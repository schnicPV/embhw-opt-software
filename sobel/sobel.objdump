
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00011acc memsz 0x00011acc flags r-x
    LOAD off    0x00012aec vaddr 0x00011aec paddr 0x000135e0 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000150d4 vaddr 0x000150d4 paddr 0x000150d4 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011110  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000798  00011354  00011354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00011aec  000135e0  00012aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  000150d4  000150d4  000150d4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015264  00015264  000145e0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000145e0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d8  00000000  00000000  00014608  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028136  00000000  00000000  000156e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a22d  00000000  00000000  0003d816  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ca4f  00000000  00000000  00047a43  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002670  00000000  00000000  00054494  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003eed  00000000  00000000  00056b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ae4e  00000000  00000000  0005a9f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00075840  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019d8  00000000  00000000  000758a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007ad8e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007ad91  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007ad9d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007ad9e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007ad9f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007ada3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007ada7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007adab  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007adb4  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007adbd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007adc6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0007add1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007ae1f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007263d  00000000  00000000  000808f7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011354 l    d  .rodata	00000000 .rodata
00011aec l    d  .rwdata	00000000 .rwdata
000150d4 l    d  .bss	00000000 .bss
00015264 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001183a l     O .rodata	00000010 zeroes.4404
00004a2c l     F .text	000000bc __sbprintf
0001184a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c3c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000676c l     F .text	00000008 __fp_unlock
00006780 l     F .text	0000019c __sinit.part.1
0000691c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00011ef4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012338 l     O .rwdata	00000020 lc_ctype_charset
00012318 l     O .rwdata	00000020 lc_message_charset
00012358 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001187c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000094b8 l     F .text	000000fc __sprint_r.part.0
000119b0 l     O .rodata	00000010 blanks.4348
000119a0 l     O .rodata	00000010 zeroes.4349
0000aa44 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000e700 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000e80c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000e838 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000e924 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ead0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000ec64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000135d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000ef70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000f0a4 l     F .text	00000034 alt_dev_reg
00012538 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000f3b0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000f5bc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000fbf4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001054c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001068c l     F .text	0000003c alt_get_errno
000106c8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015138 g     O .bss	00000004 alt_instruction_exception_handler
00008b50 g     F .text	00000074 _mprec_log10
00008c3c g     F .text	0000008c __any_on
0000afe0 g     F .text	00000054 _isatty_r
00011888 g     O .rodata	00000028 __mprec_tinytens
0000ebe0 g     F .text	0000007c alt_main
00002658 g     F .text	000000c0 _puts_r
00015164 g     O .bss	00000100 alt_irq
0000b034 g     F .text	00000060 _lseek_r
000117df g     O .rodata	00000009 gy_array
000135e0 g       *ABS*	00000000 __flash_rwdata_start
0000d22c g     F .text	00000088 .hidden __eqdf2
00015264 g       *ABS*	00000000 __alt_heap_start
0000261c g     F .text	0000003c printf
0000b24c g     F .text	0000009c _wcrtomb_r
00009378 g     F .text	0000005c __sseek
00006abc g     F .text	00000010 __sinit
0000b0f4 g     F .text	00000140 __swbuf_r
00007584 g     F .text	0000007c _setlocale_r
00006924 g     F .text	00000068 __sfmoreglue
0000ec60 g     F .text	00000004 __malloc_unlock
000009d4 g     F .text	00000014 LCD_Write_Command
000150e4 g     O .bss	00000004 sobel_width
00015128 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a48 g     F .text	0000015c memmove
000009e8 g     F .text	00000014 LCD_Write_Data
00006aa4 g     F .text	00000018 _cleanup
00007ccc g     F .text	000000a8 _Balloc
0000d2b4 g     F .text	000000dc .hidden __gtdf2
00010a84 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000005a8 g     F .text	00000024 cam_get_xsize
0000af84 g     F .text	0000005c _fstat_r
00015108 g     O .bss	00000004 errno
000092f4 g     F .text	00000008 __seofread
0001511c g     O .bss	00000004 alt_argv
0001b598 g       *ABS*	00000000 _gp
0000ef6c g     F .text	00000004 usleep
0000eef4 g     F .text	00000078 alt_uncached_malloc
00000668 g     F .text	00000074 cam_set_image_pointer
000123b8 g     O .rwdata	00000180 alt_fd_list
00001d98 g     F .text	00000010 vga_set_pointer
00010aa8 g     F .text	00000090 alt_find_dev
00007900 g     F .text	00000148 memcpy
00006774 g     F .text	0000000c _cleanup_r
0000e518 g     F .text	000000dc .hidden __floatsidf
00010610 g     F .text	0000007c alt_io_redirect
0000d390 g     F .text	000000f4 .hidden __ltdf2
00011354 g       *ABS*	00000000 __DTOR_END__
00002718 g     F .text	00000014 puts
00010d74 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000922c g     F .text	00000074 __fpclassifyd
00008aac g     F .text	000000a4 __ratio
0000aa28 g     F .text	0000001c __vfiprintf_internal
0000f7b4 g     F .text	0000021c altera_avalon_jtag_uart_read
00001db8 g     F .text	00000014 malloc
000025ec g     F .text	00000030 _printf_r
00000828 g     F .text	00000008 get_grayscale_picture
0000bfdc g     F .text	00000064 .hidden __udivsi3
000113b4 g     O .rodata	00000128 lens_roll_off_tbl
00000290 g     F .text	00000318 init_camera
0000e960 g     F .text	000000a4 isatty
000118d8 g     O .rodata	000000c8 __mprec_tens
00007600 g     F .text	0000000c __locale_charset
00010ce4 g     F .text	00000090 alt_icache_flush
00015104 g     O .bss	00000004 __malloc_top_pad
000135b0 g     O .rwdata	00000004 __mb_cur_max
00007630 g     F .text	0000000c _localeconv_r
00001534 g     F .text	00000140 sobel_x
000080d8 g     F .text	0000003c __i2b
00006f40 g     F .text	000004bc __sfvwrite_r
000009fc g     F .text	00000414 init_LCD
0000272c g     F .text	00000054 _sbrk_r
00013598 g     O .rwdata	00000004 pgy_array
000005f0 g     F .text	00000078 cam_get_profiling
0000b094 g     F .text	00000060 _read_r
00010084 g     F .text	00000078 alt_dcache_flush
000150e8 g     O .bss	00000004 sobel_result
000135c8 g     O .rwdata	00000004 alt_max_fd
0000ac78 g     F .text	000000f0 _fclose_r
0000673c g     F .text	00000030 fflush
00015100 g     O .bss	00000004 __malloc_max_sbrked_mem
000150dc g     O .bss	00000004 grayscale_array
0000c098 g     F .text	000008ac .hidden __adddf3
000005cc g     F .text	00000024 cam_get_ysize
00008854 g     F .text	0000010c __b2d
0000b9ac g     F .text	00000538 .hidden __umoddi3
0000eb0c g     F .text	000000d4 lseek
000008f0 g     F .text	0000008c i2c_short_read
000135a8 g     O .rwdata	00000004 _global_impure_ptr
00008cc8 g     F .text	00000564 _realloc_r
00015264 g       *ABS*	00000000 __bss_end
0001045c g     F .text	000000f0 alt_iic_isr_register
0001097c g     F .text	00000108 alt_tick
0000b434 g     F .text	00000578 .hidden __udivdi3
0000aee0 g     F .text	00000024 _fputwc_r
000118b0 g     O .rodata	00000028 __mprec_bigtens
00007ebc g     F .text	00000104 __s2b
0000e5f4 g     F .text	000000a8 .hidden __floatunsidf
00008594 g     F .text	00000060 __mcmp
00006adc g     F .text	00000018 __fp_lock_all
00010410 g     F .text	0000004c alt_ic_irq_enabled
000150d4 g     O .bss	00000004 grayscape_height
000108e0 g     F .text	0000009c alt_alarm_stop
0001512c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012390 g     O .rwdata	00000028 alt_dev_null
00000e9c g     F .text	00000078 transfer_LCD_with_dma
00001b0c g     F .text	0000027c sobel_complete
000100fc g     F .text	00000048 alt_dcache_flush_all
00007fc0 g     F .text	00000068 __hi0bits
0000e498 g     F .text	00000080 .hidden __fixdfsi
000135e0 g       *ABS*	00000000 __ram_rwdata_end
000135c0 g     O .rwdata	00000008 alt_dev_list
0000efac g     F .text	000000f8 write
0000fde0 g     F .text	00000020 alt_timestamp_freq
00011aec g       *ABS*	00000000 __ram_rodata_end
0000e874 g     F .text	000000b0 fstat
0000d390 g     F .text	000000f4 .hidden __ledf2
0000830c g     F .text	00000140 __pow5mult
000095cc g     F .text	0000145c ___vfiprintf_internal_r
00015114 g     O .bss	00000004 __nlocale_changed
0000c040 g     F .text	00000058 .hidden __umodsi3
00001d88 g     F .text	00000008 GetSobel_rgb
00015264 g       *ABS*	00000000 end
00001d90 g     F .text	00000008 GetSobelResult
00000700 g     F .text	00000020 take_picture_blocking
00000760 g     F .text	00000014 DIPSW_get_value
00001908 g     F .text	00000168 sobel_y_with_rgb
0000f2f0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
000006f0 g     F .text	00000010 current_image_pointer
00011354 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000fc6c g     F .text	0000007c alt_avalon_timer_sc_init
0000e69c g     F .text	00000064 .hidden __clzsi2
0000f9d0 g     F .text	00000224 altera_avalon_jtag_uart_write
00006acc g     F .text	00000004 __sfp_lock_acquire
0000781c g     F .text	000000e4 memchr
00002818 g     F .text	000021f8 ___vfprintf_internal_r
00006c30 g     F .text	00000310 _free_r
0000760c g     F .text	00000010 __locale_mb_cur_max
000017f0 g     F .text	00000118 sobel_y
000114dc g     O .rodata	00000140 noise_reduction_reg_settings_array
000111a0 g     F .text	00000180 __call_exitprocs
00015110 g     O .bss	00000004 __mlocale_changed
000135a0 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00015130 g     O .bss	00000004 _alt_tick_rate
0000844c g     F .text	00000148 __lshift
00015134 g     O .bss	00000004 _alt_nticks
0000eca0 g     F .text	000000fc read
0000f110 g     F .text	0000007c alt_sys_init
00001674 g     F .text	0000017c sobel_x_with_rgb
00011088 g     F .text	00000118 __register_exitproc
00008114 g     F .text	000001f8 __multiply
0000f65c g     F .text	00000068 altera_avalon_jtag_uart_close
00011aec g       *ABS*	00000000 __ram_rwdata_start
00011354 g       *ABS*	00000000 __ram_rodata_start
0001513c g     O .bss	00000028 __malloc_current_mallinfo
00008960 g     F .text	0000014c __d2b
000150ec g     O .bss	00000004 sobel_height
00000720 g     F .text	00000014 enable_continues_mode
0000f18c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001394 g     F .text	000000e4 init_sobel_arrays
00010c40 g     F .text	000000a4 alt_get_fd
0000ff2c g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ab60 g     F .text	00000054 _close_r
0001100c g     F .text	0000007c memcmp
0000f24c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015264 g       *ABS*	00000000 __alt_stack_base
0000f29c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00004ae8 g     F .text	00000154 __swsetup_r
0000c944 g     F .text	000008e8 .hidden __divdf3
0000698c g     F .text	00000118 __sfp
00008bc4 g     F .text	00000078 __copybits
00011aec g     O .rwdata	00000408 __malloc_av_
00006ad8 g     F .text	00000004 __sinit_lock_release
0000d484 g     F .text	00000718 .hidden __muldf3
000092a0 g     F .text	00000054 __sread
00010b38 g     F .text	00000108 alt_find_file
00010144 g     F .text	0000006c alt_dev_llist_insert
0000ec5c g     F .text	00000004 __malloc_lock
0000ee00 g     F .text	000000b0 sbrk
000066e0 g     F .text	0000005c _fflush_r
0000abb4 g     F .text	000000c4 _calloc_r
000150d4 g       *ABS*	00000000 __bss_start
00007ba4 g     F .text	00000128 memset
00000f14 g     F .text	00000480 main
00015120 g     O .bss	00000004 alt_envp
000150fc g     O .bss	00000004 __malloc_max_total_mem
00000818 g     F .text	00000008 get_grayscale_width
0000f1ec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000b234 g     F .text	00000018 __swbuf
000150f0 g     O .bss	00000004 sobel_x_result
000093d4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ad68 g     F .text	00000014 fclose
0000fce8 g     F .text	00000078 alt_timestamp_start
00004e3c g     F .text	00001688 _dtoa_r
00001de0 g     F .text	0000080c _malloc_r
0000b3a8 g     F .text	00000030 __ascii_wctomb
000135cc g     O .rwdata	00000004 alt_errno
000073fc g     F .text	000000c4 _fwalk
0000bee4 g     F .text	00000084 .hidden __divsi3
00006b0c g     F .text	00000124 _malloc_trim_r
00011354 g       *ABS*	00000000 __CTOR_END__
000150d8 g     O .bss	00000004 grayscale_width
000093dc g     F .text	000000dc strcmp
00000e10 g     F .text	0000008c transfer_LCD_no_dma
00011354 g       *ABS*	00000000 __flash_rodata_start
00011354 g       *ABS*	00000000 __DTOR_LIST__
0000d22c g     F .text	00000088 .hidden __nedf2
0001161c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000f0d8 g     F .text	00000038 alt_irq_init
0000ed9c g     F .text	00000064 alt_release_fd
00000848 g     F .text	000000a8 i2c_auto_detect
00010e5c g     F .text	00000018 memalign
000119c0 g     O .rodata	00000100 .hidden __clz_tab
000006dc g     F .text	00000014 current_image_valid
0001510c g     O .bss	00000004 _PathLocale
00000830 g     F .text	00000018 i2c_busy_wait
00010e10 g     F .text	00000014 atexit
0000ab00 g     F .text	00000060 _write_r
0000763c g     F .text	00000018 setlocale
000135ac g     O .rwdata	00000004 _impure_ptr
00015118 g     O .bss	00000004 alt_argc
000064c4 g     F .text	0000021c __sflush_r
00015124 g     O .bss	00000004 altera_avalon_timer_ts_base
00010214 g     F .text	00000064 _do_dtors
00007628 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000087f0 g     F .text	00000064 __ulp
00006af4 g     F .text	00000018 __fp_unlock_all
000135b8 g     O .rwdata	00000008 alt_fs_list
000150f4 g     O .bss	00000004 sobel_y_result
0000097c g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
000150e0 g     O .bss	00000002 LCD_height
00007654 g     F .text	0000000c localeconv
0000fd60 g     F .text	00000080 alt_timestamp
00001da8 g     F .text	00000010 vga_set_swap
000102ac g     F .text	00000050 alt_ic_isr_register
00001a70 g     F .text	0000009c sobel_threshold
000135e0 g       *ABS*	00000000 _edata
0001359c g     O .rwdata	00000004 pgx_array
00015264 g       *ABS*	00000000 _end
0000ad7c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
0000f6c4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000117e8 g     O .rodata	00000009 gx_array
00010384 g     F .text	0000008c alt_ic_irq_disable
000092fc g     F .text	0000007c __swrite
000135a4 g     O .rwdata	00000004 __malloc_trim_threshold
000150e2 g     O .bss	00000002 LCD_width
00000774 g     F .text	000000a4 conv_grayscale
0000761c g     F .text	0000000c __locale_msgcharset
00010e24 g     F .text	00000038 exit
000074c0 g     F .text	000000c4 _fwalk_reent
000085f4 g     F .text	000001fc __mdiff
0000bf68 g     F .text	00000074 .hidden __modsi3
00010e74 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006ad0 g     F .text	00000004 __sfp_lock_release
00000820 g     F .text	00000008 get_grayscale_height
00011320 g     F .text	00000034 _exit
00001478 g     F .text	000000bc sobel_mac
0000fe00 g     F .text	0000012c alt_alarm_start
00007660 g     F .text	000001bc __smakebuf_r
000150f8 g     O .bss	00000004 sobel_rgb565
00002780 g     F .text	00000098 strlen
0001078c g     F .text	00000154 open
0000d2b4 g     F .text	000000dc .hidden __gedf2
0000eeb0 g     F .text	00000044 alt_uncached_free
000135b4 g     O .rwdata	00000004 __wctomb
000095b4 g     F .text	00000018 __sprint_r
00010278 g     F .text	00000034 alt_icache_flush_all
000135d4 g     O .rwdata	00000004 alt_priority_mask
000102fc g     F .text	00000088 alt_ic_irq_enable
00004a10 g     F .text	0000001c __vfprintf_internal
0000b3d8 g     F .text	0000005c _wctomb_r
0000db9c g     F .text	000008fc .hidden __subdf3
00008028 g     F .text	000000b0 __lo0bits
000135d8 g     O .rwdata	00000008 alt_alarm_list
000101b0 g     F .text	00000064 _do_ctors
0000b2e8 g     F .text	000000c0 wcrtomb
0000e73c g     F .text	000000d0 close
0000ea04 g     F .text	000000cc alt_load
0000af04 g     F .text	00000080 fputwc
00001dcc g     F .text	00000014 free
00006ad4 g     F .text	00000004 __sinit_lock_acquire
00007d9c g     F .text	00000120 __multadd
00007d74 g     F .text	00000028 _Bfree
00000734 g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10945904 	addi	r2,r2,20836
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10945904 	addi	r2,r2,20836
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e817 	ldw	r2,-25696(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e817 	ldw	r2,-25696(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xff000248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6ad6614 	ori	gp,gp,46488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	10943514 	ori	r2,r2,20692

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d49914 	ori	r3,r3,21092

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xff000278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	000ea040 	call	ea04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	000ebe00 	call	ebe0 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xff00028c>

00000290 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00804034 	movhi	r2,256
     294:	10842744 	addi	r2,r2,4253
     298:	00c00084 	movi	r3,2
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00804034 	movhi	r2,256
     2a4:	10841304 	addi	r2,r2,4172
     2a8:	00c00044 	movi	r3,1
     2ac:	10c00025 	stbio	r3,0(r2)
     2b0:	008003f4 	movhi	r2,15
     2b4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2b8:	0001883a 	nop
     2bc:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2c0:	103ffd1e 	bne	r2,zero,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2c4:	00804034 	movhi	r2,256
     2c8:	10841304 	addi	r2,r2,4172
     2cc:	10000025 	stbio	zero,0(r2)
     2d0:	008003f4 	movhi	r2,15
     2d4:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     2d8:	0001883a 	nop
     2dc:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2e0:	103ffd1e 	bne	r2,zero,2d8 <__alt_data_end+0xff0002d8>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2e4:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     2e8:	01800044 	movi	r6,1
     2ec:	014ce184 	movi	r5,13190
     2f0:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     2f4:	dfc00315 	stw	ra,12(sp)
     2f8:	dc800215 	stw	r18,8(sp)
     2fc:	dc400115 	stw	r17,4(sp)
     300:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     304:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     308:	000d883a 	mov	r6,zero
     30c:	014ce184 	movi	r5,13190
     310:	01001e04 	movi	r4,120
     314:	000097c0 	call	97c <i2c_short_write>
     318:	008003f4 	movhi	r2,15
     31c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     320:	0001883a 	nop
     324:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     328:	103ffd1e 	bne	r2,zero,320 <__alt_data_end+0xff000320>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     32c:	01803104 	movi	r6,196
     330:	014c0684 	movi	r5,12314
     334:	01001e04 	movi	r4,120
     338:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     33c:	01800204 	movi	r6,8
     340:	014c8084 	movi	r5,12802
     344:	01001e04 	movi	r4,120
     348:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     34c:	0180c744 	movi	r6,797
     350:	014cfd04 	movi	r5,13300
     354:	01001e04 	movi	r4,120
     358:	000097c0 	call	97c <i2c_short_write>
     35c:	008000b4 	movhi	r2,2
     360:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     364:	0001883a 	nop
     368:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     36c:	103ffd1e 	bne	r2,zero,364 <__alt_data_end+0xff000364>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     370:	01a3c254 	movui	r6,36617
     374:	014d0784 	movi	r5,13342
     378:	01001e04 	movi	r4,120
     37c:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     380:	01805404 	movi	r6,336
     384:	014d0704 	movi	r5,13340
     388:	01001e04 	movi	r4,120
     38c:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     390:	01a3c254 	movui	r6,36617
     394:	014d0784 	movi	r5,13342
     398:	01001e04 	movi	r4,120
     39c:	000097c0 	call	97c <i2c_short_write>
     3a0:	008000b4 	movhi	r2,2
     3a4:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3a8:	0001883a 	nop
     3ac:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3b0:	103ffd1e 	bne	r2,zero,3a8 <__alt_data_end+0xff0003a8>
     3b4:	04000074 	movhi	r16,1
     3b8:	84058704 	addi	r16,r16,5660
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     3bc:	01a3c214 	movui	r6,36616
     3c0:	014d0784 	movi	r5,13342
     3c4:	01001e04 	movi	r4,120
     3c8:	000097c0 	call	97c <i2c_short_write>
     3cc:	84400084 	addi	r17,r16,2
     3d0:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     3d4:	8980000b 	ldhu	r6,0(r17)
     3d8:	8140000b 	ldhu	r5,0(r16)
     3dc:	01001e04 	movi	r4,120
     3e0:	84000104 	addi	r16,r16,4
     3e4:	000097c0 	call	97c <i2c_short_write>
     3e8:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     3ec:	84bff91e 	bne	r16,r18,3d4 <__alt_data_end+0xff0003d4>
     3f0:	04000074 	movhi	r16,1
     3f4:	84053704 	addi	r16,r16,5340
     3f8:	84400084 	addi	r17,r16,2
     3fc:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     400:	8980000b 	ldhu	r6,0(r17)
     404:	8140000b 	ldhu	r5,0(r16)
     408:	01001e04 	movi	r4,120
     40c:	84000104 	addi	r16,r16,4
     410:	000097c0 	call	97c <i2c_short_write>
     414:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     418:	943ff91e 	bne	r18,r16,400 <__alt_data_end+0xff000400>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     41c:	018164c4 	movi	r6,1427
     420:	014d6904 	movi	r5,13732
     424:	01001e04 	movi	r4,120
     428:	000097c0 	call	97c <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     42c:	0189e644 	movi	r6,10137
     430:	014ce304 	movi	r5,13196
     434:	01001e04 	movi	r4,120
     438:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     43c:	01991004 	movi	r6,25664
     440:	014ce404 	movi	r5,13200
     444:	01001e04 	movi	r4,120
     448:	000097c0 	call	97c <i2c_short_write>
     44c:	008000b4 	movhi	r2,2
     450:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     454:	0001883a 	nop
     458:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     45c:	103ffd1e 	bne	r2,zero,454 <__alt_data_end+0xff000454>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     460:	0189e6c4 	movi	r6,10139
     464:	014ce304 	movi	r5,13196
     468:	01001e04 	movi	r4,120
     46c:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     470:	01991004 	movi	r6,25664
     474:	014ce404 	movi	r5,13200
     478:	01001e04 	movi	r4,120
     47c:	000097c0 	call	97c <i2c_short_write>
     480:	008000b4 	movhi	r2,2
     484:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     488:	0001883a 	nop
     48c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     490:	103ffd1e 	bne	r2,zero,488 <__alt_data_end+0xff000488>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     494:	01a840d4 	movui	r6,41219
     498:	014ce304 	movi	r5,13196
     49c:	01001e04 	movi	r4,120
     4a0:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     4a4:	01800144 	movi	r6,5
     4a8:	014ce404 	movi	r5,13200
     4ac:	01001e04 	movi	r4,120
     4b0:	000097c0 	call	97c <i2c_short_write>
     4b4:	008000b4 	movhi	r2,2
     4b8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4bc:	0001883a 	nop
     4c0:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     4c4:	103ffd1e 	bne	r2,zero,4bc <__alt_data_end+0xff0004bc>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     4c8:	01a840d4 	movui	r6,41219
     4cc:	014ce304 	movi	r5,13196
     4d0:	01001e04 	movi	r4,120
     4d4:	000097c0 	call	97c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     4d8:	01800184 	movi	r6,6
     4dc:	014ce404 	movi	r5,13200
     4e0:	01001e04 	movi	r4,120
     4e4:	000097c0 	call	97c <i2c_short_write>
     4e8:	008000b4 	movhi	r2,2
     4ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     4f0:	0001883a 	nop
     4f4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     4f8:	103ffd1e 	bne	r2,zero,4f0 <__alt_data_end+0xff0004f0>
     4fc:	04000074 	movhi	r16,1
     500:	8404ed04 	addi	r16,r16,5044
     504:	84400084 	addi	r17,r16,2
     508:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     50c:	8980000b 	ldhu	r6,0(r17)
     510:	8140000b 	ldhu	r5,0(r16)
     514:	01001e04 	movi	r4,120
     518:	84000104 	addi	r16,r16,4
     51c:	000097c0 	call	97c <i2c_short_write>
     520:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     524:	943ff91e 	bne	r18,r16,50c <__alt_data_end+0xff00050c>
     528:	008003f4 	movhi	r2,15
     52c:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     530:	0001883a 	nop
     534:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     538:	103ffd1e 	bne	r2,zero,530 <__alt_data_end+0xff000530>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     53c:	01800804 	movi	r6,32
     540:	014ccb84 	movi	r5,13102
     544:	01001e04 	movi	r4,120
     548:	000097c0 	call	97c <i2c_short_write>
     54c:	008003f4 	movhi	r2,15
     550:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     554:	0001883a 	nop
     558:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     55c:	103ffd1e 	bne	r2,zero,554 <__alt_data_end+0xff000554>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     560:	01800884 	movi	r6,34
     564:	014d0104 	movi	r5,13316
     568:	01001e04 	movi	r4,120
     56c:	000097c0 	call	97c <i2c_short_write>
     570:	008003f4 	movhi	r2,15
     574:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     578:	0001883a 	nop
     57c:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     580:	103ffd1e 	bne	r2,zero,578 <__alt_data_end+0xff000578>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     584:	018009c4 	movi	r6,39
     588:	014c1004 	movi	r5,12352
     58c:	01001e04 	movi	r4,120
}
     590:	dfc00317 	ldw	ra,12(sp)
     594:	dc800217 	ldw	r18,8(sp)
     598:	dc400117 	ldw	r17,4(sp)
     59c:	dc000017 	ldw	r16,0(sp)
     5a0:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     5a4:	000097c1 	jmpi	97c <i2c_short_write>

000005a8 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5a8:	00c04034 	movhi	r3,256
     5ac:	18c41304 	addi	r3,r3,4172
     5b0:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5b4:	1080010c 	andi	r2,r2,4
     5b8:	103ffd26 	beq	r2,zero,5b0 <__alt_data_end+0xff0005b0>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     5bc:	00804034 	movhi	r2,256
     5c0:	10841004 	addi	r2,r2,4160
}
     5c4:	1080002b 	ldhuio	r2,0(r2)
     5c8:	f800283a 	ret

000005cc <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5cc:	00c04034 	movhi	r3,256
     5d0:	18c41304 	addi	r3,r3,4172
     5d4:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5d8:	1080010c 	andi	r2,r2,4
     5dc:	103ffd26 	beq	r2,zero,5d4 <__alt_data_end+0xff0005d4>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     5e0:	00804034 	movhi	r2,256
     5e4:	10841104 	addi	r2,r2,4164
}
     5e8:	1080002b 	ldhuio	r2,0(r2)
     5ec:	f800283a 	ret

000005f0 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     5f0:	00c04034 	movhi	r3,256
     5f4:	18c41304 	addi	r3,r3,4172
     5f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     5fc:	1080010c 	andi	r2,r2,4
     600:	103ffd26 	beq	r2,zero,5f8 <__alt_data_end+0xff0005f8>
	printf("Nr. of bytes each line    : %d\n",
     604:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     608:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     60c:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     610:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     614:	1140002b 	ldhuio	r5,0(r2)
     618:	01000074 	movhi	r4,1
     61c:	2104d504 	addi	r4,r4,4948
     620:	297fffcc 	andi	r5,r5,65535
     624:	000261c0 	call	261c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     628:	00804034 	movhi	r2,256
     62c:	10841104 	addi	r2,r2,4164
     630:	1140002b 	ldhuio	r5,0(r2)
     634:	01000074 	movhi	r4,1
     638:	2104dd04 	addi	r4,r4,4980
     63c:	297fffcc 	andi	r5,r5,65535
     640:	000261c0 	call	261c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     644:	00804034 	movhi	r2,256
     648:	10841204 	addi	r2,r2,4168
     64c:	1140002b 	ldhuio	r5,0(r2)
     650:	01000074 	movhi	r4,1
     654:	2104e504 	addi	r4,r4,5012
     658:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     65c:	dfc00017 	ldw	ra,0(sp)
     660:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     664:	000261c1 	jmpi	261c <printf>

00000668 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     668:	21003fcc 	andi	r4,r4,255
     66c:	2100201c 	xori	r4,r4,128
     670:	213fe004 	addi	r4,r4,-128
     674:	00800044 	movi	r2,1
     678:	20801226 	beq	r4,r2,6c4 <cam_set_image_pointer+0x5c>
     67c:	11000c0e 	bge	r2,r4,6b0 <cam_set_image_pointer+0x48>
     680:	00800084 	movi	r2,2
     684:	20800626 	beq	r4,r2,6a0 <cam_set_image_pointer+0x38>
     688:	008000c4 	movi	r2,3
     68c:	2080111e 	bne	r4,r2,6d4 <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     690:	00804034 	movhi	r2,256
     694:	10841704 	addi	r2,r2,4188
     698:	11400035 	stwio	r5,0(r2)
     69c:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     6a0:	00804034 	movhi	r2,256
     6a4:	10841604 	addi	r2,r2,4184
     6a8:	11400035 	stwio	r5,0(r2)
                break;
     6ac:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     6b0:	2000091e 	bne	r4,zero,6d8 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     6b4:	00804034 	movhi	r2,256
     6b8:	10841404 	addi	r2,r2,4176
     6bc:	11400035 	stwio	r5,0(r2)
	            break;
     6c0:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     6c4:	00804034 	movhi	r2,256
     6c8:	10841504 	addi	r2,r2,4180
     6cc:	11400035 	stwio	r5,0(r2)
                break;
     6d0:	f800283a 	ret
     6d4:	f800283a 	ret
     6d8:	f800283a 	ret

000006dc <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     6dc:	00804034 	movhi	r2,256
     6e0:	10841304 	addi	r2,r2,4172
     6e4:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     6e8:	1080800c 	andi	r2,r2,512
     6ec:	f800283a 	ret

000006f0 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     6f0:	00804034 	movhi	r2,256
     6f4:	10841404 	addi	r2,r2,4176
}
     6f8:	10800037 	ldwio	r2,0(r2)
     6fc:	f800283a 	ret

00000700 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     700:	00c04034 	movhi	r3,256
     704:	18c41304 	addi	r3,r3,4172
     708:	00800204 	movi	r2,8
     70c:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     710:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     714:	1080020c 	andi	r2,r2,8
     718:	103ffd1e 	bne	r2,zero,710 <__alt_data_end+0xff000710>
}
     71c:	f800283a 	ret

00000720 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     720:	00804034 	movhi	r2,256
     724:	10841304 	addi	r2,r2,4172
     728:	00c00404 	movi	r3,16
     72c:	10c0002d 	sthio	r3,0(r2)
     730:	f800283a 	ret

00000734 <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     734:	00c04034 	movhi	r3,256
     738:	18c41304 	addi	r3,r3,4172
     73c:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     740:	1080200c 	andi	r2,r2,128
     744:	1000021e 	bne	r2,zero,750 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     748:	0005883a 	mov	r2,zero
}
     74c:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     750:	00804004 	movi	r2,256
     754:	1880002d 	sthio	r2,0(r3)
		return 1;
     758:	00800044 	movi	r2,1
     75c:	f800283a 	ret

00000760 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     760:	00804034 	movhi	r2,256
     764:	10842804 	addi	r2,r2,4256
     768:	10800023 	ldbuio	r2,0(r2)
}
     76c:	0084303a 	nor	r2,zero,r2
     770:	f800283a 	ret

00000774 <conv_grayscale>:
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     774:	d0a6d117 	ldw	r2,-25788(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     778:	defffd04 	addi	sp,sp,-12
     77c:	dc400115 	stw	r17,4(sp)
     780:	dc000015 	stw	r16,0(sp)
     784:	dfc00215 	stw	ra,8(sp)
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
     788:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     78c:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     790:	2021883a 	mov	r16,r4
  int k,gray;
  int kmax = width*height;
     794:	29a3383a 	mul	r17,r5,r6
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     798:	10000226 	beq	r2,zero,7a4 <conv_grayscale+0x30>
    free(grayscale_array);
     79c:	1009883a 	mov	r4,r2
     7a0:	0001dcc0 	call	1dcc <free>
  grayscale_array = (unsigned char *) malloc(kmax);
     7a4:	8809883a 	mov	r4,r17
     7a8:	0001db80 	call	1db8 <malloc>
     7ac:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k<kmax; k++)
     7b0:	0440140e 	bge	zero,r17,804 <conv_grayscale+0x90>
     7b4:	8009883a 	mov	r4,r16
     7b8:	0013883a 	mov	r9,zero
     7bc:	00000106 	br	7c4 <conv_grayscale+0x50>
     7c0:	d0a6d117 	ldw	r2,-25788(gp)
  {
	  rgb = pixels[k];
     7c4:	2200000b 	ldhu	r8,0(r4)
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
     7c8:	1245883a 	add	r2,r2,r9
     7cc:	40ffffcc 	andi	r3,r8,65535
     7d0:	180ed17a 	srli	r7,r3,5
     7d4:	1806d2fa 	srli	r3,r3,11
     7d8:	420007cc 	andi	r8,r8,31
     7dc:	39c00fcc 	andi	r7,r7,63
     7e0:	39c00a24 	muli	r7,r7,40
     7e4:	18c7883a 	add	r3,r3,r3
     7e8:	380fd13a 	srai	r7,r7,4
     7ec:	38c7883a 	add	r3,r7,r3
     7f0:	1a07883a 	add	r3,r3,r8
     7f4:	10c00025 	stbio	r3,0(r2)
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
  for(k = 0; k<kmax; k++)
     7f8:	4a400044 	addi	r9,r9,1
     7fc:	21000084 	addi	r4,r4,2
     800:	8a7fef1e 	bne	r17,r9,7c0 <__alt_data_end+0xff0007c0>
  {
	  rgb = pixels[k];
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
  }
}
     804:	dfc00217 	ldw	ra,8(sp)
     808:	dc400117 	ldw	r17,4(sp)
     80c:	dc000017 	ldw	r16,0(sp)
     810:	dec00304 	addi	sp,sp,12
     814:	f800283a 	ret

00000818 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     818:	d0a6d017 	ldw	r2,-25792(gp)
     81c:	f800283a 	ret

00000820 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     820:	d0a6cf17 	ldw	r2,-25796(gp)
     824:	f800283a 	ret

00000828 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     828:	d0a6d117 	ldw	r2,-25788(gp)
     82c:	f800283a 	ret

00000830 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     830:	00c04034 	movhi	r3,256
     834:	18c42704 	addi	r3,r3,4252
     838:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     83c:	108000cc 	andi	r2,r2,3
     840:	103ffd1e 	bne	r2,zero,838 <__alt_data_end+0xff000838>
}
     844:	f800283a 	ret

00000848 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     848:	01004034 	movhi	r4,256
     84c:	21042704 	addi	r4,r4,4252
     850:	00c04034 	movhi	r3,256
     854:	18c42704 	addi	r3,r3,4252
     858:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     85c:	108000cc 	andi	r2,r2,3
     860:	103ffb1e 	bne	r2,zero,850 <__alt_data_end+0xff000850>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     864:	00800104 	movi	r2,4
     868:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     86c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     870:	108000cc 	andi	r2,r2,3
     874:	103ffd1e 	bne	r2,zero,86c <__alt_data_end+0xff00086c>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     878:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     87c:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     880:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     884:	dfc00315 	stw	ra,12(sp)
     888:	dc800215 	stw	r18,8(sp)
     88c:	dc400115 	stw	r17,4(sp)
     890:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     894:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     898:	01000074 	movhi	r4,1
     89c:	2105cd04 	addi	r4,r4,5940
     8a0:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     8a4:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     8a8:	000261c0 	call	261c <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     8ac:	04800a0e 	bge	zero,r18,8d8 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8b0:	04404034 	movhi	r17,256
     8b4:	8c442404 	addi	r17,r17,4240
     8b8:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8bc:	89800037 	ldwio	r6,0(r17)
     8c0:	01000074 	movhi	r4,1
     8c4:	800b883a 	mov	r5,r16
     8c8:	2105d604 	addi	r4,r4,5976
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8cc:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8d0:	000261c0 	call	261c <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8d4:	943ff81e 	bne	r18,r16,8b8 <__alt_data_end+0xff0008b8>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     8d8:	dfc00317 	ldw	ra,12(sp)
     8dc:	dc800217 	ldw	r18,8(sp)
     8e0:	dc400117 	ldw	r17,4(sp)
     8e4:	dc000017 	ldw	r16,0(sp)
     8e8:	dec00404 	addi	sp,sp,16
     8ec:	f800283a 	ret

000008f0 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8f0:	01804034 	movhi	r6,256
     8f4:	31842704 	addi	r6,r6,4252
     8f8:	00c04034 	movhi	r3,256
     8fc:	18c42704 	addi	r3,r3,4252
     900:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     904:	108000cc 	andi	r2,r2,3
     908:	103ffb1e 	bne	r2,zero,8f8 <__alt_data_end+0xff0008f8>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     90c:	00804034 	movhi	r2,256
     910:	21003fcc 	andi	r4,r4,255
     914:	10842404 	addi	r2,r2,4240
     918:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     91c:	00804034 	movhi	r2,256
     920:	10842504 	addi	r2,r2,4244
     924:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     928:	008010c4 	movi	r2,67
     92c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     930:	180b883a 	mov	r5,r3
     934:	00c04034 	movhi	r3,256
     938:	18c42704 	addi	r3,r3,4252
     93c:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     940:	108000cc 	andi	r2,r2,3
     944:	103ffb1e 	bne	r2,zero,934 <__alt_data_end+0xff000934>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     948:	00804034 	movhi	r2,256
     94c:	21000044 	addi	r4,r4,1
     950:	10842404 	addi	r2,r2,4240
     954:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     958:	00800884 	movi	r2,34
     95c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     960:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     964:	108000cc 	andi	r2,r2,3
     968:	103ffd1e 	bne	r2,zero,960 <__alt_data_end+0xff000960>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     96c:	00804034 	movhi	r2,256
     970:	10842604 	addi	r2,r2,4248
}
     974:	10800037 	ldwio	r2,0(r2)
     978:	f800283a 	ret

0000097c <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     97c:	01c04034 	movhi	r7,256
     980:	39c42704 	addi	r7,r7,4252
     984:	00c04034 	movhi	r3,256
     988:	18c42704 	addi	r3,r3,4252
     98c:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     990:	108000cc 	andi	r2,r2,3
     994:	103ffb1e 	bne	r2,zero,984 <__alt_data_end+0xff000984>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     998:	00804034 	movhi	r2,256
     99c:	10842404 	addi	r2,r2,4240
     9a0:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     9a4:	00804034 	movhi	r2,256
     9a8:	10842504 	addi	r2,r2,4244
     9ac:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9b0:	00804034 	movhi	r2,256
     9b4:	10842604 	addi	r2,r2,4248
     9b8:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9bc:	00801084 	movi	r2,66
     9c0:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9c4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9c8:	108000cc 	andi	r2,r2,3
     9cc:	103ffd1e 	bne	r2,zero,9c4 <__alt_data_end+0xff0009c4>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     9d0:	f800283a 	ret

000009d4 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9d4:	00804034 	movhi	r2,256
     9d8:	10841804 	addi	r2,r2,4192
     9dc:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9e0:	01000284 	movi	r4,10
     9e4:	000ef6c1 	jmpi	ef6c <usleep>

000009e8 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e8:	00804034 	movhi	r2,256
     9ec:	10841904 	addi	r2,r2,4196
     9f0:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9f4:	01000284 	movi	r4,10
     9f8:	000ef6c1 	jmpi	ef6c <usleep>

000009fc <init_LCD>:
}


void init_LCD() {
     9fc:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a00:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     a04:	dd400515 	stw	r21,20(sp)
     a08:	dfc00815 	stw	ra,32(sp)
     a0c:	ddc00715 	stw	r23,28(sp)
     a10:	dd800615 	stw	r22,24(sp)
     a14:	dd000415 	stw	r20,16(sp)
     a18:	dcc00315 	stw	r19,12(sp)
     a1c:	dc800215 	stw	r18,8(sp)
     a20:	dc400115 	stw	r17,4(sp)
     a24:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a28:	05400084 	movi	r21,2
     a2c:	10841a04 	addi	r2,r2,4200
     a30:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a34:	04804034 	movhi	r18,256
     a38:	94841804 	addi	r18,r18,4192
     a3c:	00800a04 	movi	r2,40
     a40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a44:	04000284 	movi	r16,10
     a48:	8009883a 	mov	r4,r16
     a4c:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a50:	05c00444 	movi	r23,17
     a54:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a58:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a5c:	04404034 	movhi	r17,256
     a60:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     a64:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a68:	0027883a 	mov	r19,zero
     a6c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a70:	8009883a 	mov	r4,r16
     a74:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a78:	008032c4 	movi	r2,203
     a7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a80:	8009883a 	mov	r4,r16
     a84:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a88:	00800e44 	movi	r2,57
     a8c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a90:	8009883a 	mov	r4,r16
     a94:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a98:	00800b04 	movi	r2,44
     a9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     aa0:	8009883a 	mov	r4,r16
     aa4:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aac:	8009883a 	mov	r4,r16
     ab0:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab4:	00800d04 	movi	r2,52
     ab8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     abc:	8009883a 	mov	r4,r16
     ac0:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ac4:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     ac8:	8009883a 	mov	r4,r16
     acc:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ad0:	008033c4 	movi	r2,207
     ad4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ad8:	8009883a 	mov	r4,r16
     adc:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aec:	05802044 	movi	r22,129
     af0:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     af4:	8009883a 	mov	r4,r16
     af8:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     afc:	00800c04 	movi	r2,48
     b00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b04:	8009883a 	mov	r4,r16
     b08:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b0c:	00803a04 	movi	r2,232
     b10:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b14:	8009883a 	mov	r4,r16
     b18:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b1c:	00802144 	movi	r2,133
     b20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b24:	8009883a 	mov	r4,r16
     b28:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b2c:	05000044 	movi	r20,1
     b30:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b34:	8009883a 	mov	r4,r16
     b38:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b3c:	00801e44 	movi	r2,121
     b40:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b44:	8009883a 	mov	r4,r16
     b48:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b4c:	00803a84 	movi	r2,234
     b50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b54:	8009883a 	mov	r4,r16
     b58:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b5c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b60:	8009883a 	mov	r4,r16
     b64:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b68:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00801904 	movi	r2,100
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b84:	008000c4 	movi	r2,3
     b88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	00800484 	movi	r2,18
     b98:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     ba8:	8009883a 	mov	r4,r16
     bac:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb0:	00803dc4 	movi	r2,247
     bb4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc0:	00800804 	movi	r2,32
     bc4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd0:	00803004 	movi	r2,192
     bd4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be0:	05800984 	movi	r22,38
     be4:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf0:	00800104 	movi	r2,4
     bf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c00:	00803044 	movi	r2,193
     c04:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c1c:	00803144 	movi	r2,197
     c20:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	00800d44 	movi	r2,53
     c30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	00800f84 	movi	r2,62
     c40:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c4c:	008031c4 	movi	r2,199
     c50:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c54:	8009883a 	mov	r4,r16
     c58:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c5c:	00802f84 	movi	r2,190
     c60:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c6c:	00802c44 	movi	r2,177
     c70:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c7c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c88:	00800404 	movi	r2,16
     c8c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c98:	00800e84 	movi	r2,58
     c9c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca8:	00801544 	movi	r2,85
     cac:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cb8:	00802d84 	movi	r2,182
     cbc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc0:	8009883a 	mov	r4,r16
     cc4:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc8:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd4:	00802884 	movi	r2,162
     cd8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ce4:	00803c84 	movi	r2,242
     ce8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf4:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     cf8:	8009883a 	mov	r4,r16
     cfc:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d00:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     d04:	8009883a 	mov	r4,r16
     d08:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d0c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d10:	8009883a 	mov	r4,r16
     d14:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d18:	00800d84 	movi	r2,54
     d1c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d20:	8009883a 	mov	r4,r16
     d24:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d28:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d2c:	8009883a 	mov	r4,r16
     d30:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d34:	00800a84 	movi	r2,42
     d38:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d3c:	8009883a 	mov	r4,r16
     d40:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d44:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d48:	8009883a 	mov	r4,r16
     d4c:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d50:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d54:	8009883a 	mov	r4,r16
     d58:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d5c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d60:	8009883a 	mov	r4,r16
     d64:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d68:	00803bc4 	movi	r2,239
     d6c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d70:	8009883a 	mov	r4,r16
     d74:	000ef6c0 	call	ef6c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d78:	00800ac4 	movi	r2,43
     d7c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d80:	8009883a 	mov	r4,r16
     d84:	000ef6c0 	call	ef6c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d8c:	8009883a 	mov	r4,r16
     d90:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d94:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d98:	8009883a 	mov	r4,r16
     d9c:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da0:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     da4:	8009883a 	mov	r4,r16
     da8:	000ef6c0 	call	ef6c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dac:	00800fc4 	movi	r2,63
     db0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     db4:	8009883a 	mov	r4,r16
     db8:	000ef6c0 	call	ef6c <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     dbc:	00c04034 	movhi	r3,256
     dc0:	00803c04 	movi	r2,240
     dc4:	18c41d04 	addi	r3,r3,4212
     dc8:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     dcc:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     dd0:	00805004 	movi	r2,320
     dd4:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dd8:	00800a44 	movi	r2,41
     ddc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     de0:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     de4:	dfc00817 	ldw	ra,32(sp)
     de8:	ddc00717 	ldw	r23,28(sp)
     dec:	dd800617 	ldw	r22,24(sp)
     df0:	dd400517 	ldw	r21,20(sp)
     df4:	dd000417 	ldw	r20,16(sp)
     df8:	dcc00317 	ldw	r19,12(sp)
     dfc:	dc800217 	ldw	r18,8(sp)
     e00:	dc400117 	ldw	r17,4(sp)
     e04:	dc000017 	ldw	r16,0(sp)
     e08:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e0c:	000ef6c1 	jmpi	ef6c <usleep>

00000e10 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e10:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e14:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e18:	dc000015 	stw	r16,0(sp)
     e1c:	dfc00415 	stw	ra,16(sp)
     e20:	dcc00315 	stw	r19,12(sp)
     e24:	dc800215 	stw	r18,8(sp)
     e28:	dc400115 	stw	r17,4(sp)
     e2c:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e30:	10841e04 	addi	r2,r2,4216
     e34:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e38:	00804034 	movhi	r2,256
     e3c:	10841804 	addi	r2,r2,4192
     e40:	00c00b04 	movi	r3,44
     e44:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e48:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e4c:	01000284 	movi	r4,10
     e50:	000ef6c0 	call	ef6c <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e54:	90000a26 	beq	r18,zero,e80 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e58:	04c04034 	movhi	r19,256
     e5c:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e60:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e64:	8080000b 	ldhu	r2,0(r16)
     e68:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     e6c:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e70:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     e74:	000ef6c0 	call	ef6c <usleep>
     e78:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e7c:	8cbff91e 	bne	r17,r18,e64 <__alt_data_end+0xff000e64>
		LCD_Write_Data(data_array[pixels]);
}
     e80:	dfc00417 	ldw	ra,16(sp)
     e84:	dcc00317 	ldw	r19,12(sp)
     e88:	dc800217 	ldw	r18,8(sp)
     e8c:	dc400117 	ldw	r17,4(sp)
     e90:	dc000017 	ldw	r16,0(sp)
     e94:	dec00504 	addi	sp,sp,20
     e98:	f800283a 	ret

00000e9c <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     e9c:	d0a6d20b 	ldhu	r2,-25784(gp)
     ea0:	3080010e 	bge	r6,r2,ea8 <transfer_LCD_with_dma+0xc>
     ea4:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     ea8:	d0e6d28b 	ldhu	r3,-25782(gp)
     eac:	28c0010e 	bge	r5,r3,eb4 <transfer_LCD_with_dma+0x18>
     eb0:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     eb4:	01804034 	movhi	r6,256
     eb8:	31841e04 	addi	r6,r6,4216
     ebc:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     ec0:	01404034 	movhi	r5,256
     ec4:	29441b04 	addi	r5,r5,4204
     ec8:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     ecc:	18ffffcc 	andi	r3,r3,65535
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	1885383a 	mul	r2,r3,r2
     ed8:	00c04034 	movhi	r3,256
     edc:	18c41c04 	addi	r3,r3,4208
     ee0:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     ee4:	39c03fcc 	andi	r7,r7,255
     ee8:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     eec:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     ef0:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ef4:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     ef8:	38000326 	beq	r7,zero,f08 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     efc:	00c04404 	movi	r3,272
     f00:	10c0002d 	sthio	r3,0(r2)
     f04:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f08:	00c04004 	movi	r3,256
     f0c:	10c0002d 	sthio	r3,0(r2)
     f10:	f800283a 	ret

00000f14 <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     f14:	defff504 	addi	sp,sp,-44
     f18:	dfc00a15 	stw	ra,40(sp)
     f1c:	dd800715 	stw	r22,28(sp)
     f20:	dd400615 	stw	r21,24(sp)
     f24:	dd000515 	stw	r20,20(sp)
     f28:	dcc00415 	stw	r19,16(sp)
     f2c:	dc800315 	stw	r18,12(sp)
     f30:	dc400215 	stw	r17,8(sp)
     f34:	dc000115 	stw	r16,4(sp)
     f38:	df000915 	stw	fp,36(sp)
     f3c:	ddc00815 	stw	r23,32(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     f40:	00009fc0 	call	9fc <init_LCD>
  init_camera();
     f44:	00002900 	call	290 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f48:	01000604 	movi	r4,24
     f4c:	0001da80 	call	1da8 <vga_set_swap>
  printf("Hello from Nios II!\n");
     f50:	01000074 	movhi	r4,1
     f54:	2105df04 	addi	r4,r4,6012
     f58:	00027180 	call	2718 <puts>
  cam_get_profiling();
     f5c:	00005f00 	call	5f0 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f60:	00005a80 	call	5a8 <cam_get_xsize>
     f64:	1021883a 	mov	r16,r2
     f68:	00005cc0 	call	5cc <cam_get_ysize>
     f6c:	10bfffcc 	andi	r2,r2,65535
     f70:	813fffcc 	andi	r4,r16,65535
     f74:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     f78:	04c00044 	movi	r19,1
     f7c:	05000084 	movi	r20,2
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f80:	0001db80 	call	1db8 <malloc>
     f84:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f88:	00005a80 	call	5a8 <cam_get_xsize>
     f8c:	1021883a 	mov	r16,r2
     f90:	00005cc0 	call	5cc <cam_get_ysize>
     f94:	10bfffcc 	andi	r2,r2,65535
     f98:	813fffcc 	andi	r4,r16,65535
     f9c:	2089383a 	mul	r4,r4,r2
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     fa0:	05604414 	movui	r21,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fa4:	0001db80 	call	1db8 <malloc>
     fa8:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fac:	00005a80 	call	5a8 <cam_get_xsize>
     fb0:	1021883a 	mov	r16,r2
     fb4:	00005cc0 	call	5cc <cam_get_ysize>
     fb8:	10bfffcc 	andi	r2,r2,65535
     fbc:	813fffcc 	andi	r4,r16,65535
     fc0:	2089383a 	mul	r4,r4,r2
     fc4:	0001db80 	call	1db8 <malloc>
     fc8:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fcc:	00005a80 	call	5a8 <cam_get_xsize>
     fd0:	1021883a 	mov	r16,r2
     fd4:	00005cc0 	call	5cc <cam_get_ysize>
     fd8:	10bfffcc 	andi	r2,r2,65535
     fdc:	813fffcc 	andi	r4,r16,65535
     fe0:	2089383a 	mul	r4,r4,r2
     fe4:	0001db80 	call	1db8 <malloc>
  cam_set_image_pointer(0,buffer1);
     fe8:	b00b883a 	mov	r5,r22
     fec:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ff0:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     ff4:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     ff8:	900b883a 	mov	r5,r18
     ffc:	9809883a 	mov	r4,r19
    1000:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1004:	880b883a 	mov	r5,r17
    1008:	a009883a 	mov	r4,r20
    100c:	00006680 	call	668 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    1010:	800b883a 	mov	r5,r16
    1014:	010000c4 	movi	r4,3
    1018:	00006680 	call	668 <cam_set_image_pointer>
  enable_continues_mode();
    101c:	00007200 	call	720 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    1020:	00005a80 	call	5a8 <cam_get_xsize>
    1024:	1021883a 	mov	r16,r2
    1028:	00005cc0 	call	5cc <cam_get_ysize>
    102c:	813fffcc 	andi	r4,r16,65535
    1030:	24c8d83a 	srl	r4,r4,r19
    1034:	117fffcc 	andi	r5,r2,65535
    1038:	00013940 	call	1394 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    103c:	00007340 	call	734 <new_image_available>
    1040:	10803fcc 	andi	r2,r2,255
    1044:	1080201c 	xori	r2,r2,128
    1048:	10bfe004 	addi	r2,r2,-128
    104c:	103ffb26 	beq	r2,zero,103c <__alt_data_end+0xff00103c>
		  if (current_image_valid()!=0) {
    1050:	00006dc0 	call	6dc <current_image_valid>
    1054:	10bfffcc 	andi	r2,r2,65535
    1058:	10a0001c 	xori	r2,r2,32768
    105c:	10a00004 	addi	r2,r2,-32768
    1060:	103ff626 	beq	r2,zero,103c <__alt_data_end+0xff00103c>
			  current_mode = DIPSW_get_value();
    1064:	00007600 	call	760 <DIPSW_get_value>
    1068:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    106c:	00006f00 	call	6f0 <current_image_pointer>
    1070:	1025883a 	mov	r18,r2
		      switch (mode) {
    1074:	808001cc 	andi	r2,r16,7
    1078:	14c03b26 	beq	r2,r19,1168 <main+0x254>
    107c:	1000aa26 	beq	r2,zero,1328 <main+0x414>
    1080:	15008526 	beq	r2,r20,1298 <main+0x384>
    1084:	00c000c4 	movi	r3,3
    1088:	10c0561e 	bne	r2,r3,11e4 <main+0x2d0>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
    108c:	000fce80 	call	fce8 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1090:	000fd600 	call	fd60 <alt_timestamp>
    1094:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1098:	00005a80 	call	5a8 <cam_get_xsize>
    109c:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    10a0:	00005cc0 	call	5cc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10a4:	897fffcc 	andi	r5,r17,65535
    10a8:	280ad07a 	srli	r5,r5,1
    10ac:	11bfffcc 	andi	r6,r2,65535
    10b0:	9009883a 	mov	r4,r18
    10b4:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10b8:	000fd600 	call	fd60 <alt_timestamp>
    10bc:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    10c0:	00008280 	call	828 <get_grayscale_picture>
    10c4:	1039883a 	mov	fp,r2
		               alt_timestamp_start();
    10c8:	000fce80 	call	fce8 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    10cc:	000fd600 	call	fd60 <alt_timestamp>
		               sobel_x(grayscale);
    10d0:	e009883a 	mov	r4,fp
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    10d4:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    10d8:	00015340 	call	1534 <sobel_x>
		               end_sobel_x = alt_timestamp();
    10dc:	000fd600 	call	fd60 <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    10e0:	e009883a 	mov	r4,fp
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    10e4:	1025883a 	mov	r18,r2
		               sobel_y_with_rgb(grayscale);
    10e8:	00019080 	call	1908 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    10ec:	0001d880 	call	1d88 <GetSobel_rgb>
    10f0:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    10f4:	00005a80 	call	5a8 <cam_get_xsize>
    10f8:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),0);
    10fc:	d8c00015 	stw	r3,0(sp)
    1100:	00005cc0 	call	5cc <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1104:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1108:	84003fcc 	andi	r16,r16,255
    110c:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1110:	197fffcc 	andi	r5,r3,65535
    1114:	280ad07a 	srli	r5,r5,1
    1118:	000f883a 	mov	r7,zero
    111c:	11bfffcc 	andi	r6,r2,65535
    1120:	e549883a 	add	r4,fp,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1124:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1128:	0000e9c0 	call	e9c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    112c:	80008e16 	blt	r16,zero,1368 <main+0x454>
    1130:	95e5c83a 	sub	r18,r18,r23
    1134:	8da3c83a 	sub	r17,r17,r22
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1138:	01000074 	movhi	r4,1
    113c:	2105e404 	addi	r4,r4,6032
    1140:	00027180 	call	2718 <puts>
		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
    1144:	01000074 	movhi	r4,1
    1148:	900b883a 	mov	r5,r18
    114c:	2105ec04 	addi	r4,r4,6064
    1150:	000261c0 	call	261c <printf>
//		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
//		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
//		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    1154:	01000074 	movhi	r4,1
    1158:	880b883a 	mov	r5,r17
    115c:	2105f204 	addi	r4,r4,6088
    1160:	000261c0 	call	261c <printf>
    1164:	003fb506 	br	103c <__alt_data_end+0xff00103c>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    1168:	000fce80 	call	fce8 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    116c:	000fd600 	call	fd60 <alt_timestamp>
    1170:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1174:	00005a80 	call	5a8 <cam_get_xsize>
    1178:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    117c:	00005cc0 	call	5cc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1180:	897fffcc 	andi	r5,r17,65535
    1184:	280ad07a 	srli	r5,r5,1
    1188:	9009883a 	mov	r4,r18
    118c:	11bfffcc 	andi	r6,r2,65535
    1190:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1194:	000fd600 	call	fd60 <alt_timestamp>
    1198:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    119c:	00008280 	call	828 <get_grayscale_picture>
    11a0:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    11a4:	00005a80 	call	5a8 <cam_get_xsize>
    11a8:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    11ac:	00005cc0 	call	5cc <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11b0:	917fffcc 	andi	r5,r18,65535
    11b4:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11b8:	84003fcc 	andi	r16,r16,255
    11bc:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11c0:	980f883a 	mov	r7,r19
    11c4:	11bfffcc 	andi	r6,r2,65535
    11c8:	b9102204 	addi	r4,r23,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11cc:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11d0:	0000e9c0 	call	e9c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11d4:	80006616 	blt	r16,zero,1370 <main+0x45c>
    11d8:	8da3c83a 	sub	r17,r17,r22
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    11dc:	0025883a 	mov	r18,zero
    11e0:	003fd506 	br	1138 <__alt_data_end+0xff001138>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    11e4:	000fce80 	call	fce8 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    11e8:	000fd600 	call	fd60 <alt_timestamp>
    11ec:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    11f0:	00005a80 	call	5a8 <cam_get_xsize>
    11f4:	1023883a 	mov	r17,r2
	                                  cam_get_ysize());
    11f8:	00005cc0 	call	5cc <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    11fc:	897fffcc 	andi	r5,r17,65535
    1200:	280ad07a 	srli	r5,r5,1
    1204:	11bfffcc 	andi	r6,r2,65535
    1208:	9009883a 	mov	r4,r18
    120c:	00007740 	call	774 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1210:	000fd600 	call	fd60 <alt_timestamp>
    1214:	1023883a 	mov	r17,r2
                       grayscale = get_grayscale_picture();
    1218:	00008280 	call	828 <get_grayscale_picture>
    121c:	1025883a 	mov	r18,r2

                       alt_timestamp_start();
    1220:	000fce80 	call	fce8 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    1224:	000fd600 	call	fd60 <alt_timestamp>
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    1228:	9009883a 	mov	r4,r18
    122c:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    1230:	102f883a 	mov	r23,r2
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    1234:	0001b0c0 	call	1b0c <sobel_complete>
                       end_sobel_x = alt_timestamp();
    1238:	000fd600 	call	fd60 <alt_timestamp>
    123c:	1025883a 	mov	r18,r2
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
    1240:	0001d900 	call	1d90 <GetSobelResult>
    1244:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1248:	00005a80 	call	5a8 <cam_get_xsize>
    124c:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    1250:	d8c00015 	stw	r3,0(sp)
    1254:	00005cc0 	call	5cc <cam_get_ysize>
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1258:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    125c:	84003fcc 	andi	r16,r16,255
    1260:	8400201c 	xori	r16,r16,128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1264:	197fffcc 	andi	r5,r3,65535
    1268:	280ad07a 	srli	r5,r5,1
    126c:	01c00044 	movi	r7,1
    1270:	11bfffcc 	andi	r6,r2,65535
    1274:	e1102204 	addi	r4,fp,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1278:	843fe004 	addi	r16,r16,-128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    127c:	0000e9c0 	call	e9c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1280:	803fab0e 	bge	r16,zero,1130 <__alt_data_end+0xff001130>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1284:	01000604 	movi	r4,24
    1288:	0001da80 	call	1da8 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    128c:	e009883a 	mov	r4,fp
    1290:	0001d980 	call	1d98 <vga_set_pointer>
    1294:	003fa606 	br	1130 <__alt_data_end+0xff001130>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    1298:	000fce80 	call	fce8 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    129c:	000fd600 	call	fd60 <alt_timestamp>
    12a0:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    12a4:	00005a80 	call	5a8 <cam_get_xsize>
    12a8:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    12ac:	00005cc0 	call	5cc <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    12b0:	897fffcc 	andi	r5,r17,65535
    12b4:	280ad07a 	srli	r5,r5,1
    12b8:	11bfffcc 	andi	r6,r2,65535
    12bc:	9009883a 	mov	r4,r18
    12c0:	00007740 	call	774 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    12c4:	000fd600 	call	fd60 <alt_timestamp>
    12c8:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    12cc:	00008280 	call	828 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    12d0:	1009883a 	mov	r4,r2
    12d4:	00016740 	call	1674 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    12d8:	0001d880 	call	1d88 <GetSobel_rgb>
    12dc:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    12e0:	00005a80 	call	5a8 <cam_get_xsize>
    12e4:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    12e8:	00005cc0 	call	5cc <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    12ec:	917fffcc 	andi	r5,r18,65535
    12f0:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12f4:	84003fcc 	andi	r16,r16,255
    12f8:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    12fc:	000f883a 	mov	r7,zero
    1300:	11bfffcc 	andi	r6,r2,65535
    1304:	bd49883a 	add	r4,r23,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1308:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    130c:	0000e9c0 	call	e9c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1310:	803fb10e 	bge	r16,zero,11d8 <__alt_data_end+0xff0011d8>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1314:	01000204 	movi	r4,8
    1318:	0001da80 	call	1da8 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    131c:	b809883a 	mov	r4,r23
    1320:	0001d980 	call	1d98 <vga_set_pointer>
    1324:	003fac06 	br	11d8 <__alt_data_end+0xff0011d8>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1328:	00005a80 	call	5a8 <cam_get_xsize>
    132c:	1023883a 	mov	r17,r2
		                	cam_get_ysize(),0);
    1330:	00005cc0 	call	5cc <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1334:	897fffcc 	andi	r5,r17,65535
    1338:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    133c:	84003fcc 	andi	r16,r16,255
    1340:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1344:	000f883a 	mov	r7,zero
    1348:	11bfffcc 	andi	r6,r2,65535
    134c:	9549883a 	add	r4,r18,r21
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1350:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1354:	0000e9c0 	call	e9c <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1358:	80000716 	blt	r16,zero,1378 <main+0x464>
    135c:	0023883a 	mov	r17,zero
    1360:	0025883a 	mov	r18,zero
    1364:	003f7406 	br	1138 <__alt_data_end+0xff001138>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1368:	01000204 	movi	r4,8
    136c:	003fc606 	br	1288 <__alt_data_end+0xff001288>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1370:	01000604 	movi	r4,24
    1374:	003fe806 	br	1318 <__alt_data_end+0xff001318>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1378:	01000204 	movi	r4,8
    137c:	0001da80 	call	1da8 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1380:	9009883a 	mov	r4,r18
    1384:	0001d980 	call	1d98 <vga_set_pointer>
    1388:	0023883a 	mov	r17,zero
    138c:	0025883a 	mov	r18,zero
    1390:	003f6906 	br	1138 <__alt_data_end+0xff001138>

00001394 <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1394:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    1398:	defffd04 	addi	sp,sp,-12
    139c:	dc400115 	stw	r17,4(sp)
    13a0:	dc000015 	stw	r16,0(sp)
    13a4:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    13a8:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    13ac:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    13b0:	2023883a 	mov	r17,r4
    13b4:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    13b8:	10000226 	beq	r2,zero,13c4 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    13bc:	1009883a 	mov	r4,r2
    13c0:	0001dcc0 	call	1dcc <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    13c4:	8c21383a 	mul	r16,r17,r16
    13c8:	8423883a 	add	r17,r16,r16
    13cc:	8809883a 	mov	r4,r17
    13d0:	0001db80 	call	1db8 <malloc>
	if (sobel_y_result != NULL)
    13d4:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    13d8:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    13dc:	20000126 	beq	r4,zero,13e4 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    13e0:	0001dcc0 	call	1dcc <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    13e4:	8809883a 	mov	r4,r17
    13e8:	0001db80 	call	1db8 <malloc>
	if (sobel_result != NULL)
    13ec:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    13f0:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    13f4:	20000126 	beq	r4,zero,13fc <init_sobel_arrays+0x68>
		alt_uncached_free(sobel_result);
    13f8:	000eeb00 	call	eeb0 <alt_uncached_free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    13fc:	8009883a 	mov	r4,r16
    1400:	000eef40 	call	eef4 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    1404:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1408:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    140c:	20000126 	beq	r4,zero,1414 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1410:	0001dcc0 	call	1dcc <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1414:	8809883a 	mov	r4,r17
    1418:	0001db80 	call	1db8 <malloc>
    141c:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1420:	0005883a 	mov	r2,zero
    1424:	04000f0e 	bge	zero,r16,1464 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    1428:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    142c:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    1430:	d1a6d417 	ldw	r6,-25776(gp)
    1434:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1438:	40d1883a 	add	r8,r8,r3
    143c:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1440:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    1444:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1448:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    144c:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1450:	d1a6d817 	ldw	r6,-25760(gp)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1454:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1458:	30c7883a 	add	r3,r6,r3
    145c:	1800000d 	sth	zero,0(r3)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1460:	80bff11e 	bne	r16,r2,1428 <__alt_data_end+0xff001428>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1464:	dfc00217 	ldw	ra,8(sp)
    1468:	dc400117 	ldw	r17,4(sp)
    146c:	dc000017 	ldw	r16,0(sp)
    1470:	dec00304 	addi	sp,sp,12
    1474:	f800283a 	ret

00001478 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1478:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    147c:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1480:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1484:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1488:	3b8000c7 	ldb	r14,3(r7)
    148c:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1490:	5185883a 	add	r2,r10,r6
    1494:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1498:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    149c:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    14a0:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    14a4:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    14a8:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    14ac:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    14b0:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    14b4:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    14b8:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    14bc:	49000043 	ldbu	r4,1(r9)
    14c0:	3a800147 	ldb	r10,5(r7)
    14c4:	139d383a 	mul	r14,r2,r14
    14c8:	60d9383a 	mul	r12,r12,r3
    14cc:	68800003 	ldbu	r2,0(r13)
    14d0:	38c001c7 	ldb	r3,7(r7)
    14d4:	5a17383a 	mul	r11,r11,r8
    14d8:	33ffffc3 	ldbu	r15,-1(r6)
    14dc:	3a000007 	ldb	r8,0(r7)
    14e0:	2295383a 	mul	r10,r4,r10
    14e4:	31000043 	ldbu	r4,1(r6)
    14e8:	39800087 	ldb	r6,2(r7)
    14ec:	730b883a 	add	r5,r14,r12
    14f0:	10d3383a 	mul	r9,r2,r3
    14f4:	6b3fffc3 	ldbu	r12,-1(r13)
    14f8:	38c00187 	ldb	r3,6(r7)
    14fc:	2acb883a 	add	r5,r5,r11
    1500:	7a11383a 	mul	r8,r15,r8
    1504:	6ac00043 	ldbu	r11,1(r13)
    1508:	39c00207 	ldb	r7,8(r7)
    150c:	2a8b883a 	add	r5,r5,r10
    1510:	2189383a 	mul	r4,r4,r6
    1514:	2a45883a 	add	r2,r5,r9
    1518:	60c7383a 	mul	r3,r12,r3
    151c:	1205883a 	add	r2,r2,r8
    1520:	59cb383a 	mul	r5,r11,r7
    1524:	1105883a 	add	r2,r2,r4
    1528:	10c5883a 	add	r2,r2,r3
}
    152c:	1145883a 	add	r2,r2,r5
    1530:	f800283a 	ret

00001534 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1534:	defff604 	addi	sp,sp,-40
    1538:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    153c:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    1540:	dfc00915 	stw	ra,36(sp)
    1544:	df000815 	stw	fp,32(sp)
    1548:	ddc00715 	stw	r23,28(sp)
    154c:	dd800615 	stw	r22,24(sp)
    1550:	dd400515 	stw	r21,20(sp)
    1554:	dd000415 	stw	r20,16(sp)
    1558:	dcc00315 	stw	r19,12(sp)
    155c:	dc800215 	stw	r18,8(sp)
    1560:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1564:	8c7fffc4 	addi	r17,r17,-1
    1568:	00800044 	movi	r2,1
    156c:	14402e0e 	bge	r2,r17,1628 <sobel_x+0xf4>
    1570:	d366d317 	ldw	r13,-25780(gp)
    1574:	d3e6d617 	ldw	r15,-25768(gp)
    1578:	03800084 	movi	r14,2
    157c:	6b65883a 	add	r18,r13,r13
    1580:	9385883a 	add	r2,r18,r14
    1584:	2359883a 	add	r12,r4,r13
    1588:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    158c:	7027883a 	mov	r19,r14
    1590:	736bc83a 	sub	r21,r14,r13
    1594:	6ba9883a 	add	r20,r13,r14
    1598:	9b402f0e 	bge	r19,r13,1658 <sobel_x+0x124>
    159c:	637f883a 	add	ra,r12,r13
    15a0:	7021883a 	mov	r16,r14
    15a4:	6357c83a 	sub	r11,r12,r13
    15a8:	ab0b883a 	add	r5,r21,r12
    15ac:	62800084 	addi	r10,r12,2
    15b0:	f813883a 	mov	r9,ra
    15b4:	a311883a 	add	r8,r20,r12
    15b8:	780f883a 	mov	r7,r15
    15bc:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    15c0:	29000003 	ldbu	r4,0(r5)
    15c4:	40c00003 	ldbu	r3,0(r8)
    15c8:	37000003 	ldbu	fp,0(r6)
    15cc:	50800003 	ldbu	r2,0(r10)
    15d0:	20c7883a 	add	r3,r4,r3
    15d4:	5dc00003 	ldbu	r23,0(r11)
    15d8:	1f07c83a 	sub	r3,r3,fp
    15dc:	4d800003 	ldbu	r22,0(r9)
    15e0:	1f09c83a 	sub	r4,r3,fp
    15e4:	1087883a 	add	r3,r2,r2
    15e8:	20c7883a 	add	r3,r4,r3
    15ec:	1dc5c83a 	sub	r2,r3,r23
    15f0:	1585c83a 	sub	r2,r2,r22
    15f4:	3880000d 	sth	r2,0(r7)
    15f8:	29400044 	addi	r5,r5,1
    15fc:	5ac00044 	addi	r11,r11,1
    1600:	31800044 	addi	r6,r6,1
    1604:	52800044 	addi	r10,r10,1
    1608:	4a400044 	addi	r9,r9,1
    160c:	42000044 	addi	r8,r8,1
    1610:	39c00084 	addi	r7,r7,2
void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1614:	617fea1e 	bne	r12,r5,15c0 <__alt_data_end+0xff0015c0>
    1618:	73800044 	addi	r14,r14,1
    161c:	f819883a 	mov	r12,ra
    1620:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1624:	847fdc16 	blt	r16,r17,1598 <__alt_data_end+0xff001598>
//		  result += pgx_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}
    1628:	dfc00917 	ldw	ra,36(sp)
    162c:	df000817 	ldw	fp,32(sp)
    1630:	ddc00717 	ldw	r23,28(sp)
    1634:	dd800617 	ldw	r22,24(sp)
    1638:	dd400517 	ldw	r21,20(sp)
    163c:	dd000417 	ldw	r20,16(sp)
    1640:	dcc00317 	ldw	r19,12(sp)
    1644:	dc800217 	ldw	r18,8(sp)
    1648:	dc400117 	ldw	r17,4(sp)
    164c:	dc000017 	ldw	r16,0(sp)
    1650:	dec00a04 	addi	sp,sp,40
    1654:	f800283a 	ret
    1658:	7021883a 	mov	r16,r14
    165c:	637f883a 	add	ra,r12,r13
    1660:	73800044 	addi	r14,r14,1
    1664:	f819883a 	mov	r12,ra
    1668:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    166c:	847fca16 	blt	r16,r17,1598 <__alt_data_end+0xff001598>
    1670:	003fed06 	br	1628 <__alt_data_end+0xff001628>

00001674 <sobel_x_with_rgb>:
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1674:	defff504 	addi	sp,sp,-44
    1678:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    167c:	d5a6d517 	ldw	r22,-25772(gp)
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1680:	dfc00a15 	stw	ra,40(sp)
    1684:	df000915 	stw	fp,36(sp)
    1688:	ddc00815 	stw	r23,32(sp)
    168c:	dd400615 	stw	r21,24(sp)
    1690:	dd000515 	stw	r20,20(sp)
    1694:	dcc00415 	stw	r19,16(sp)
    1698:	dc800315 	stw	r18,12(sp)
    169c:	dc400215 	stw	r17,8(sp)
    16a0:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16a4:	b5bfffc4 	addi	r22,r22,-1
    16a8:	00800044 	movi	r2,1
    16ac:	1580440e 	bge	r2,r22,17c0 <sobel_x_with_rgb+0x14c>
    16b0:	d7e6d317 	ldw	ra,-25780(gp)
    16b4:	d4a6d617 	ldw	r18,-25768(gp)
    16b8:	d466d817 	ldw	r17,-25760(gp)
    16bc:	ffe9883a 	add	r20,ra,ra
    16c0:	a0800084 	addi	r2,r20,2
    16c4:	04000084 	movi	r16,2
    16c8:	90a5883a 	add	r18,r18,r2
    16cc:	88a3883a 	add	r17,r17,r2
    16d0:	fc05883a 	add	r2,ra,r16
    16d4:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16d8:	802f883a 	mov	r23,r16
    16dc:	87f9c83a 	sub	fp,r16,ra
    16e0:	d8800015 	stw	r2,0(sp)
    16e4:	bfc02f0e 	bge	r23,ra,17a4 <sobel_x_with_rgb+0x130>
    16e8:	d8800017 	ldw	r2,0(sp)
    16ec:	7fe7883a 	add	r19,r15,ra
    16f0:	802b883a 	mov	r21,r16
    16f4:	7fdbc83a 	sub	r13,r15,ra
    16f8:	e3cf883a 	add	r7,fp,r15
    16fc:	7b000084 	addi	r12,r15,2
    1700:	9817883a 	mov	r11,r19
    1704:	13d5883a 	add	r10,r2,r15
    1708:	881d883a 	mov	r14,r17
    170c:	9013883a 	mov	r9,r18
    1710:	7811883a 	mov	r8,r15
    1714:	00000b06 	br	1744 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1718:	180692fa 	slli	r3,r3,11
    171c:	70c0000d 	sth	r3,0(r14)
    1720:	39c00044 	addi	r7,r7,1
    1724:	6b400044 	addi	r13,r13,1
    1728:	42000044 	addi	r8,r8,1
    172c:	63000044 	addi	r12,r12,1
    1730:	5ac00044 	addi	r11,r11,1
    1734:	52800044 	addi	r10,r10,1
    1738:	4a400084 	addi	r9,r9,2
    173c:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1740:	79c01a26 	beq	r15,r7,17ac <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1744:	50800003 	ldbu	r2,0(r10)
    1748:	39400003 	ldbu	r5,0(r7)
    174c:	41800003 	ldbu	r6,0(r8)
    1750:	60c00003 	ldbu	r3,0(r12)
    1754:	288b883a 	add	r5,r5,r2
    1758:	298bc83a 	sub	r5,r5,r6
    175c:	68800003 	ldbu	r2,0(r13)
    1760:	59000003 	ldbu	r4,0(r11)
    1764:	298bc83a 	sub	r5,r5,r6
    1768:	18c7883a 	add	r3,r3,r3
    176c:	28c7883a 	add	r3,r5,r3
    1770:	1887c83a 	sub	r3,r3,r2
    1774:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1778:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    177c:	10bfffcc 	andi	r2,r2,65535
    1780:	10a0001c 	xori	r2,r2,32768
    1784:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1788:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    178c:	103fe20e 	bge	r2,zero,1718 <__alt_data_end+0xff001718>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1790:	0085c83a 	sub	r2,zero,r2
    1794:	1005d0ba 	srai	r2,r2,2
    1798:	1004917a 	slli	r2,r2,5
    179c:	7080000d 	sth	r2,0(r14)
    17a0:	003fdf06 	br	1720 <__alt_data_end+0xff001720>
    17a4:	802b883a 	mov	r21,r16
    17a8:	7fe7883a 	add	r19,r15,ra
    17ac:	84000044 	addi	r16,r16,1
    17b0:	981f883a 	mov	r15,r19
    17b4:	9525883a 	add	r18,r18,r20
    17b8:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17bc:	adbfc916 	blt	r21,r22,16e4 <__alt_data_end+0xff0016e4>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    17c0:	dfc00a17 	ldw	ra,40(sp)
    17c4:	df000917 	ldw	fp,36(sp)
    17c8:	ddc00817 	ldw	r23,32(sp)
    17cc:	dd800717 	ldw	r22,28(sp)
    17d0:	dd400617 	ldw	r21,24(sp)
    17d4:	dd000517 	ldw	r20,20(sp)
    17d8:	dcc00417 	ldw	r19,16(sp)
    17dc:	dc800317 	ldw	r18,12(sp)
    17e0:	dc400217 	ldw	r17,8(sp)
    17e4:	dc000117 	ldw	r16,4(sp)
    17e8:	dec00b04 	addi	sp,sp,44
    17ec:	f800283a 	ret

000017f0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    17f0:	defff704 	addi	sp,sp,-36
    17f4:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17f8:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    17fc:	dfc00815 	stw	ra,32(sp)
    1800:	ddc00715 	stw	r23,28(sp)
    1804:	dd800615 	stw	r22,24(sp)
    1808:	dd400515 	stw	r21,20(sp)
    180c:	dd000415 	stw	r20,16(sp)
    1810:	dcc00315 	stw	r19,12(sp)
    1814:	dc800215 	stw	r18,8(sp)
    1818:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    181c:	8c7fffc4 	addi	r17,r17,-1
    1820:	00800044 	movi	r2,1
    1824:	14402d0e 	bge	r2,r17,18dc <sobel_y+0xec>
    1828:	d3e6d317 	ldw	r15,-25780(gp)
    182c:	d3a6d717 	ldw	r14,-25764(gp)
    1830:	03400084 	movi	r13,2
    1834:	7bff883a 	add	ra,r15,r15
    1838:	fb67883a 	add	r19,ra,r13
    183c:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1840:	6825883a 	mov	r18,r13
    1844:	f8a9883a 	add	r20,ra,r2
    1848:	6821883a 	mov	r16,r13
    184c:	93c01f0e 	bge	r18,r15,18cc <sobel_y+0xdc>
    1850:	27cd883a 	add	r6,r4,ra
    1854:	6821883a 	mov	r16,r13
    1858:	22c00044 	addi	r11,r4,1
    185c:	22800084 	addi	r10,r4,2
    1860:	a113883a 	add	r9,r20,r4
    1864:	990b883a 	add	r5,r19,r4
    1868:	7999883a 	add	r12,r15,r6
    186c:	7011883a 	mov	r8,r14
    1870:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1874:	3d800003 	ldbu	r22,0(r7)
    1878:	50c00003 	ldbu	r3,0(r10)
    187c:	58800003 	ldbu	r2,0(r11)
    1880:	4d400003 	ldbu	r21,0(r9)
    1884:	b0c7883a 	add	r3,r22,r3
    1888:	1085883a 	add	r2,r2,r2
    188c:	35c00003 	ldbu	r23,0(r6)
    1890:	1887883a 	add	r3,r3,r2
    1894:	2d800003 	ldbu	r22,0(r5)
    1898:	1d47c83a 	sub	r3,r3,r21
    189c:	1d47c83a 	sub	r3,r3,r21
    18a0:	1dc5c83a 	sub	r2,r3,r23
    18a4:	1585c83a 	sub	r2,r2,r22
    18a8:	4080000d 	sth	r2,0(r8)
    18ac:	29400044 	addi	r5,r5,1
    18b0:	39c00044 	addi	r7,r7,1
    18b4:	5ac00044 	addi	r11,r11,1
    18b8:	52800044 	addi	r10,r10,1
    18bc:	31800044 	addi	r6,r6,1
    18c0:	4a400044 	addi	r9,r9,1
    18c4:	42000084 	addi	r8,r8,2
void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18c8:	617fea1e 	bne	r12,r5,1874 <__alt_data_end+0xff001874>
    18cc:	6b400044 	addi	r13,r13,1
    18d0:	23c9883a 	add	r4,r4,r15
    18d4:	77dd883a 	add	r14,r14,ra

void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18d8:	847fdb16 	blt	r16,r17,1848 <__alt_data_end+0xff001848>
//		  result += pgy_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}
    18dc:	dfc00817 	ldw	ra,32(sp)
    18e0:	ddc00717 	ldw	r23,28(sp)
    18e4:	dd800617 	ldw	r22,24(sp)
    18e8:	dd400517 	ldw	r21,20(sp)
    18ec:	dd000417 	ldw	r20,16(sp)
    18f0:	dcc00317 	ldw	r19,12(sp)
    18f4:	dc800217 	ldw	r18,8(sp)
    18f8:	dc400117 	ldw	r17,4(sp)
    18fc:	dc000017 	ldw	r16,0(sp)
    1900:	dec00904 	addi	sp,sp,36
    1904:	f800283a 	ret

00001908 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1908:	defff604 	addi	sp,sp,-40
    190c:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1910:	d4e6d517 	ldw	r19,-25772(gp)
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1914:	dfc00915 	stw	ra,36(sp)
    1918:	df000815 	stw	fp,32(sp)
    191c:	ddc00715 	stw	r23,28(sp)
    1920:	dd800615 	stw	r22,24(sp)
    1924:	dd400515 	stw	r21,20(sp)
    1928:	dd000415 	stw	r20,16(sp)
    192c:	dc800215 	stw	r18,8(sp)
    1930:	dc400115 	stw	r17,4(sp)
    1934:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1938:	9cffffc4 	addi	r19,r19,-1
    193c:	00800044 	movi	r2,1
    1940:	14c03f0e 	bge	r2,r19,1a40 <sobel_y_with_rgb+0x138>
    1944:	d466d317 	ldw	r17,-25780(gp)
    1948:	d426d717 	ldw	r16,-25764(gp)
    194c:	d7e6d817 	ldw	ra,-25760(gp)
    1950:	8c5d883a 	add	r14,r17,r17
    1954:	75000084 	addi	r20,r14,2
    1958:	03c00084 	movi	r15,2
    195c:	8521883a 	add	r16,r16,r20
    1960:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1964:	782b883a 	mov	r21,r15
    1968:	70ad883a 	add	r22,r14,r2
    196c:	7825883a 	mov	r18,r15
    1970:	ac402e0e 	bge	r21,r17,1a2c <sobel_y_with_rgb+0x124>
    1974:	238d883a 	add	r6,r4,r14
    1978:	7825883a 	mov	r18,r15
    197c:	22c00044 	addi	r11,r4,1
    1980:	22800084 	addi	r10,r4,2
    1984:	b113883a 	add	r9,r22,r4
    1988:	a10b883a 	add	r5,r20,r4
    198c:	899b883a 	add	r13,r17,r6
    1990:	f819883a 	mov	r12,ra
    1994:	8011883a 	mov	r8,r16
    1998:	200f883a 	mov	r7,r4
    199c:	00000b06 	br	19cc <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    19a0:	180692fa 	slli	r3,r3,11
    19a4:	60c0000d 	sth	r3,0(r12)
    19a8:	29400044 	addi	r5,r5,1
    19ac:	39c00044 	addi	r7,r7,1
    19b0:	5ac00044 	addi	r11,r11,1
    19b4:	52800044 	addi	r10,r10,1
    19b8:	31800044 	addi	r6,r6,1
    19bc:	4a400044 	addi	r9,r9,1
    19c0:	42000084 	addi	r8,r8,2
    19c4:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    19c8:	69401826 	beq	r13,r5,1a2c <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    19cc:	50800003 	ldbu	r2,0(r10)
    19d0:	3f000003 	ldbu	fp,0(r7)
    19d4:	58c00003 	ldbu	r3,0(r11)
    19d8:	4dc00003 	ldbu	r23,0(r9)
    19dc:	e0b9883a 	add	fp,fp,r2
    19e0:	18c7883a 	add	r3,r3,r3
    19e4:	30800003 	ldbu	r2,0(r6)
    19e8:	e0c7883a 	add	r3,fp,r3
    19ec:	1dc7c83a 	sub	r3,r3,r23
    19f0:	2f000003 	ldbu	fp,0(r5)
    19f4:	1dc7c83a 	sub	r3,r3,r23
    19f8:	1885c83a 	sub	r2,r3,r2
    19fc:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1a00:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1a04:	10bfffcc 	andi	r2,r2,65535
    1a08:	10a0001c 	xori	r2,r2,32768
    1a0c:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1a10:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1a14:	103fe20e 	bge	r2,zero,19a0 <__alt_data_end+0xff0019a0>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1a18:	0085c83a 	sub	r2,zero,r2
    1a1c:	1005d0ba 	srai	r2,r2,2
    1a20:	1004917a 	slli	r2,r2,5
    1a24:	6080000d 	sth	r2,0(r12)
    1a28:	003fdf06 	br	19a8 <__alt_data_end+0xff0019a8>
    1a2c:	7bc00044 	addi	r15,r15,1
    1a30:	2449883a 	add	r4,r4,r17
    1a34:	83a1883a 	add	r16,r16,r14
    1a38:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a3c:	94ffcb16 	blt	r18,r19,196c <__alt_data_end+0xff00196c>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1a40:	dfc00917 	ldw	ra,36(sp)
    1a44:	df000817 	ldw	fp,32(sp)
    1a48:	ddc00717 	ldw	r23,28(sp)
    1a4c:	dd800617 	ldw	r22,24(sp)
    1a50:	dd400517 	ldw	r21,20(sp)
    1a54:	dd000417 	ldw	r20,16(sp)
    1a58:	dcc00317 	ldw	r19,12(sp)
    1a5c:	dc800217 	ldw	r18,8(sp)
    1a60:	dc400117 	ldw	r17,4(sp)
    1a64:	dc000017 	ldw	r16,0(sp)
    1a68:	dec00a04 	addi	sp,sp,40
    1a6c:	f800283a 	ret

00001a70 <sobel_threshold>:

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a70:	d0a6d317 	ldw	r2,-25780(gp)
    1a74:	d2a6d517 	ldw	r10,-25772(gp)
	for(k = 1; k<kmax; k++)
    1a78:	01800044 	movi	r6,1
}

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a7c:	5095383a 	mul	r10,r10,r2
	for(k = 1; k<kmax; k++)
    1a80:	3280210e 	bge	r6,r10,1b08 <sobel_threshold+0x98>
    1a84:	213fffcc 	andi	r4,r4,65535
    1a88:	2120001c 	xori	r4,r4,32768
    1a8c:	21200004 	addi	r4,r4,-32768
	{
		value = sobel_x_result[k];
    1a90:	d166d617 	ldw	r5,-25768(gp)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a94:	d0e6d717 	ldw	r3,-25764(gp)
    1a98:	3185883a 	add	r2,r6,r6
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1a9c:	288b883a 	add	r5,r5,r2
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1aa0:	1887883a 	add	r3,r3,r2
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1aa4:	2880000b 	ldhu	r2,0(r5)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1aa8:	1940000b 	ldhu	r5,0(r3)
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1aac:	d266d417 	ldw	r9,-25776(gp)
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ab0:	11ffffcc 	andi	r7,r2,65535
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ab4:	2a3fffcc 	andi	r8,r5,65535
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ab8:	39e0001c 	xori	r7,r7,32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1abc:	4220001c 	xori	r8,r8,32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ac0:	39e00004 	addi	r7,r7,-32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ac4:	42200004 	addi	r8,r8,-32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ac8:	380fd7fa 	srai	r7,r7,31
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1acc:	4011d7fa 	srai	r8,r8,31
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1ad0:	4993883a 	add	r9,r9,r6
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ad4:	3887883a 	add	r3,r7,r2
    1ad8:	414b883a 	add	r5,r8,r5
    1adc:	414af03a 	xor	r5,r8,r5
    1ae0:	38c4f03a 	xor	r2,r7,r3
    1ae4:	2885883a 	add	r2,r5,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1ae8:	10bfffcc 	andi	r2,r2,65535
    1aec:	10a0001c 	xori	r2,r2,32768
    1af0:	10a00004 	addi	r2,r2,-32768
    1af4:	2084803a 	cmplt	r2,r4,r2
    1af8:	0085c83a 	sub	r2,zero,r2
    1afc:	48800005 	stb	r2,0(r9)

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
    1b00:	31800044 	addi	r6,r6,1
    1b04:	51bfe21e 	bne	r10,r6,1a90 <__alt_data_end+0xff001a90>
    1b08:	f800283a 	ret

00001b0c <sobel_complete>:
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   short sum,value;
   int k;
   int kmax = sobel_height*sobel_width;
    1b0c:	d3e6d317 	ldw	r15,-25780(gp)
    1b10:	d0a6d517 	ldw	r2,-25772(gp)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1b14:	defff404 	addi	sp,sp,-48
    1b18:	dc400315 	stw	r17,12(sp)
   short result = 0;
   short sum,value;
   int k;
   int kmax = sobel_height*sobel_width;
    1b1c:	7885383a 	mul	r2,r15,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1b20:	dfc00b15 	stw	ra,44(sp)
    1b24:	df000a15 	stw	fp,40(sp)
    1b28:	ddc00915 	stw	r23,36(sp)
    1b2c:	dd800815 	stw	r22,32(sp)
    1b30:	dd400715 	stw	r21,28(sp)
    1b34:	dd000615 	stw	r20,24(sp)
    1b38:	dcc00515 	stw	r19,20(sp)
    1b3c:	dc800415 	stw	r18,16(sp)
    1b40:	dc000215 	stw	r16,8(sp)
   short result = 0;
   short sum,value;
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
    1b44:	04400044 	movi	r17,1
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   short sum,value;
   int k;
   int kmax = sobel_height*sobel_width;
    1b48:	d8800015 	stw	r2,0(sp)
   for(k = 1; k<kmax; k++)
    1b4c:	8880820e 	bge	r17,r2,1d58 <sobel_complete+0x24c>
    1b50:	297fffcc 	andi	r5,r5,65535
    1b54:	2960001c 	xori	r5,r5,32768
    1b58:	29600004 	addi	r5,r5,-32768
    1b5c:	202d883a 	mov	r22,r4
    1b60:	246b883a 	add	r21,r4,r17
    1b64:	25000084 	addi	r20,r4,2
    1b68:	d9400115 	stw	r5,4(sp)
    1b6c:	7805883a 	mov	r2,r15
    1b70:	00000106 	br	1b78 <sobel_complete+0x6c>
    1b74:	d0a6d317 	ldw	r2,-25780(gp)
   {
     // sobel_x in-lining
     result += pgx_array[0] * source[k-sobel_width-1];
    1b78:	d0e00117 	ldw	r3,-32764(gp)
    1b7c:	888bc83a 	sub	r5,r17,r2
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1b80:	b3000003 	ldbu	r12,0(r22)
    1b84:	aa400003 	ldbu	r9,0(r21)
    1b88:	1c0000c7 	ldb	r16,3(r3)
    1b8c:	19800107 	ldb	r6,4(r3)
    1b90:	a2000003 	ldbu	r8,0(r20)
     result += pgx_array[1] * source[k-sobel_width];
     result += pgx_array[2] * source[k-sobel_width+1];
     result += pgx_array[3] * source[k-1];
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
    1b94:	8885883a 	add	r2,r17,r2
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1b98:	1b800147 	ldb	r14,5(r3)
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
   {
     // sobel_x in-lining
     result += pgx_array[0] * source[k-sobel_width-1];
     result += pgx_array[1] * source[k-sobel_width];
    1b9c:	2167883a 	add	r19,r4,r5
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1ba0:	99c00003 	ldbu	r7,0(r19)
    1ba4:	1ac00047 	ldb	r11,1(r3)
     result += pgx_array[2] * source[k-sobel_width+1];
     result += pgx_array[3] * source[k-1];
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
    1ba8:	20a5883a 	add	r18,r4,r2
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
   {
     // sobel_x in-lining
     result += pgx_array[0] * source[k-sobel_width-1];
    1bac:	2b7fffc4 	addi	r13,r5,-1
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1bb0:	1fc001c7 	ldb	ra,7(r3)
    1bb4:	92800003 	ldbu	r10,0(r18)
    1bb8:	8321383a 	mul	r16,r16,r12
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
   {
     // sobel_x in-lining
     result += pgx_array[0] * source[k-sobel_width-1];
    1bbc:	235b883a 	add	r13,r4,r13
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1bc0:	324d383a 	mul	r6,r6,r9
   for(k = 1; k<kmax; k++)
   {
     // sobel_x in-lining
     result += pgx_array[0] * source[k-sobel_width-1];
     result += pgx_array[1] * source[k-sobel_width];
     result += pgx_array[2] * source[k-sobel_width+1];
    1bc4:	29400044 	addi	r5,r5,1
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1bc8:	1f000007 	ldb	fp,0(r3)
    1bcc:	6a400003 	ldbu	r9,0(r13)
   for(k = 1; k<kmax; k++)
   {
     // sobel_x in-lining
     result += pgx_array[0] * source[k-sobel_width-1];
     result += pgx_array[1] * source[k-sobel_width];
     result += pgx_array[2] * source[k-sobel_width+1];
    1bd0:	214b883a 	add	r5,r4,r5
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1bd4:	721d383a 	mul	r14,r14,r8
     result += pgx_array[1] * source[k-sobel_width];
     result += pgx_array[2] * source[k-sobel_width+1];
     result += pgx_array[3] * source[k-1];
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
    1bd8:	133fffc4 	addi	r12,r2,-1
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1bdc:	1dc00087 	ldb	r23,2(r3)
    1be0:	2a000003 	ldbu	r8,0(r5)
    1be4:	59d7383a 	mul	r11,r11,r7
     result += pgx_array[1] * source[k-sobel_width];
     result += pgx_array[2] * source[k-sobel_width+1];
     result += pgx_array[3] * source[k-1];
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
    1be8:	2319883a 	add	r12,r4,r12
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
    1bec:	10800044 	addi	r2,r2,1
     sobel_x_result[k] = result;
    1bf0:	1bc00187 	ldb	r15,6(r3)
    1bf4:	61c00003 	ldbu	r7,0(r12)
     result += pgx_array[3] * source[k-1];
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
    1bf8:	2085883a 	add	r2,r4,r2
     sobel_x_result[k] = result;
    1bfc:	818d883a 	add	r6,r16,r6
    1c00:	fa95383a 	mul	r10,ra,r10
    1c04:	338d883a 	add	r6,r6,r14
    1c08:	1fc00207 	ldb	ra,8(r3)
    1c0c:	e253383a 	mul	r9,fp,r9
    1c10:	10c00003 	ldbu	r3,0(r2)
    1c14:	32cd883a 	add	r6,r6,r11
    1c18:	ba11383a 	mul	r8,r23,r8
    1c1c:	3295883a 	add	r10,r6,r10
    1c20:	79cf383a 	mul	r7,r15,r7
    1c24:	5253883a 	add	r9,r10,r9
    1c28:	f8ff383a 	mul	ra,ra,r3
    1c2c:	d2e6d617 	ldw	r11,-25768(gp)
    1c30:	4a07883a 	add	r3,r9,r8
     result = 0;

     // sobel_y in-lining
     result += pgy_array[0] * source[k-sobel_width-1];
    1c34:	d1a00017 	ldw	r6,-32768(gp)
    1c38:	8c5d883a 	add	r14,r17,r17
     result += pgx_array[4] * source[k];
     result += pgx_array[5] * source[k+1];
     result += pgx_array[6] * source[k+sobel_width-1];
     result += pgx_array[7] * source[k+sobel_width];
     result += pgx_array[8] * source[k+sobel_width+1];
     sobel_x_result[k] = result;
    1c3c:	19c7883a 	add	r3,r3,r7
    1c40:	5b97883a 	add	r11,r11,r14
    1c44:	1fc7883a 	add	r3,r3,ra
    1c48:	58c0000d 	sth	r3,0(r11)
     result += pgy_array[3] * source[k-1];
     result += pgy_array[4] * source[k];
     result += pgy_array[5] * source[k+1];
     result += pgy_array[6] * source[k+sobel_width-1];
     result += pgy_array[7] * source[k+sobel_width];
     result += pgy_array[8] * source[k+sobel_width+1];
    1c4c:	a8c00003 	ldbu	r3,0(r21)
    1c50:	b2400003 	ldbu	r9,0(r22)
    1c54:	35c000c7 	ldb	r23,3(r6)
    1c58:	34000107 	ldb	r16,4(r6)
    1c5c:	33c00147 	ldb	r15,5(r6)
    1c60:	a2000003 	ldbu	r8,0(r20)
    1c64:	32800047 	ldb	r10,1(r6)
    1c68:	99c00003 	ldbu	r7,0(r19)
    1c6c:	94800003 	ldbu	r18,0(r18)
    1c70:	34c001c7 	ldb	r19,7(r6)
    1c74:	80e1383a 	mul	r16,r16,r3
    1c78:	ba53383a 	mul	r9,r23,r9
    1c7c:	37000007 	ldb	fp,0(r6)
    1c80:	7a11383a 	mul	r8,r15,r8
    1c84:	6b400003 	ldbu	r13,0(r13)
    1c88:	37c00087 	ldb	ra,2(r6)
    1c8c:	2bc00003 	ldbu	r15,0(r5)
    1c90:	51cf383a 	mul	r7,r10,r7
    1c94:	63000003 	ldbu	r12,0(r12)
    1c98:	32800187 	ldb	r10,6(r6)
    1c9c:	9ca7383a 	mul	r19,r19,r18
    1ca0:	4c13883a 	add	r9,r9,r16
    1ca4:	34800207 	ldb	r18,8(r6)
    1ca8:	11400003 	ldbu	r5,0(r2)
    1cac:	4a07883a 	add	r3,r9,r8
    1cb0:	e35b383a 	mul	r13,fp,r13
    1cb4:	19c7883a 	add	r3,r3,r7
    1cb8:	fbff383a 	mul	ra,ra,r15
    1cbc:	530d383a 	mul	r6,r10,r12
    1cc0:	1cc7883a 	add	r3,r3,r19
     sobel_y_result[k] = result;
    1cc4:	d0a6d717 	ldw	r2,-25764(gp)
     result += pgy_array[3] * source[k-1];
     result += pgy_array[4] * source[k];
     result += pgy_array[5] * source[k+1];
     result += pgy_array[6] * source[k+sobel_width-1];
     result += pgy_array[7] * source[k+sobel_width];
     result += pgy_array[8] * source[k+sobel_width+1];
    1cc8:	914b383a 	mul	r5,r18,r5
    1ccc:	1b47883a 	add	r3,r3,r13
    1cd0:	1fc7883a 	add	r3,r3,ra
    1cd4:	1987883a 	add	r3,r3,r6
    1cd8:	1947883a 	add	r3,r3,r5
     sobel_y_result[k] = result;
    1cdc:	139d883a 	add	r14,r2,r14
    1ce0:	70c0000d 	sth	r3,0(r14)
     result = 0;

     // sobel_threshold in-lining
     value = sobel_x_result[k];
    1ce4:	5880000b 	ldhu	r2,0(r11)
     sum = (value + (value >> 31)) ^ (value >> 31);   // get absolute value (2 complement)
     value = sobel_y_result[k];
     sum += (value + (value >> 31)) ^ (value >> 31);    // get absolute value (2 complement)
    1ce8:	197fffcc 	andi	r5,r3,65535
    1cec:	2960001c 	xori	r5,r5,32768
     sobel_y_result[k] = result;
     result = 0;

     // sobel_threshold in-lining
     value = sobel_x_result[k];
     sum = (value + (value >> 31)) ^ (value >> 31);   // get absolute value (2 complement)
    1cf0:	11bfffcc 	andi	r6,r2,65535
     value = sobel_y_result[k];
     sum += (value + (value >> 31)) ^ (value >> 31);    // get absolute value (2 complement)
    1cf4:	29600004 	addi	r5,r5,-32768
     sobel_y_result[k] = result;
     result = 0;

     // sobel_threshold in-lining
     value = sobel_x_result[k];
     sum = (value + (value >> 31)) ^ (value >> 31);   // get absolute value (2 complement)
    1cf8:	31a0001c 	xori	r6,r6,32768
     value = sobel_y_result[k];
     sum += (value + (value >> 31)) ^ (value >> 31);    // get absolute value (2 complement)
    1cfc:	280bd7fa 	srai	r5,r5,31
     sobel_y_result[k] = result;
     result = 0;

     // sobel_threshold in-lining
     value = sobel_x_result[k];
     sum = (value + (value >> 31)) ^ (value >> 31);   // get absolute value (2 complement)
    1d00:	31a00004 	addi	r6,r6,-32768
    1d04:	300dd7fa 	srai	r6,r6,31
     value = sobel_y_result[k];
     sum += (value + (value >> 31)) ^ (value >> 31);    // get absolute value (2 complement)
    1d08:	1947883a 	add	r3,r3,r5
    1d0c:	28caf03a 	xor	r5,r5,r3
    1d10:	3087883a 	add	r3,r6,r2
    1d14:	30c4f03a 	xor	r2,r6,r3
    1d18:	2885883a 	add	r2,r5,r2
     sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1d1c:	d8c00117 	ldw	r3,4(sp)
    1d20:	10bfffcc 	andi	r2,r2,65535
    1d24:	10a0001c 	xori	r2,r2,32768
    1d28:	10a00004 	addi	r2,r2,-32768
    1d2c:	1884803a 	cmplt	r2,r3,r2
    1d30:	d0e6d417 	ldw	r3,-25776(gp)
    1d34:	0085c83a 	sub	r2,zero,r2
    1d38:	b5800044 	addi	r22,r22,1
    1d3c:	1c47883a 	add	r3,r3,r17
    1d40:	18800005 	stb	r2,0(r3)
{
   short result = 0;
   short sum,value;
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
    1d44:	d8800017 	ldw	r2,0(sp)
    1d48:	8c400044 	addi	r17,r17,1
    1d4c:	ad400044 	addi	r21,r21,1
    1d50:	a5000044 	addi	r20,r20,1
    1d54:	147f871e 	bne	r2,r17,1b74 <__alt_data_end+0xff001b74>
     sum = (value + (value >> 31)) ^ (value >> 31);   // get absolute value (2 complement)
     value = sobel_y_result[k];
     sum += (value + (value >> 31)) ^ (value >> 31);    // get absolute value (2 complement)
     sobel_result[k] = (sum > threshold) ? 0xFF : 0;
   }
}
    1d58:	dfc00b17 	ldw	ra,44(sp)
    1d5c:	df000a17 	ldw	fp,40(sp)
    1d60:	ddc00917 	ldw	r23,36(sp)
    1d64:	dd800817 	ldw	r22,32(sp)
    1d68:	dd400717 	ldw	r21,28(sp)
    1d6c:	dd000617 	ldw	r20,24(sp)
    1d70:	dcc00517 	ldw	r19,20(sp)
    1d74:	dc800417 	ldw	r18,16(sp)
    1d78:	dc400317 	ldw	r17,12(sp)
    1d7c:	dc000217 	ldw	r16,8(sp)
    1d80:	dec00c04 	addi	sp,sp,48
    1d84:	f800283a 	ret

00001d88 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d88:	d0a6d817 	ldw	r2,-25760(gp)
    1d8c:	f800283a 	ret

00001d90 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d90:	d0a6d417 	ldw	r2,-25776(gp)
    1d94:	f800283a 	ret

00001d98 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1d98:	00804034 	movhi	r2,256
    1d9c:	10843404 	addi	r2,r2,4304
    1da0:	11000035 	stwio	r4,0(r2)
    1da4:	f800283a 	ret

00001da8 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1da8:	00804034 	movhi	r2,256
    1dac:	10843504 	addi	r2,r2,4308
    1db0:	11000025 	stbio	r4,0(r2)
    1db4:	f800283a 	ret

00001db8 <malloc>:
    1db8:	00800074 	movhi	r2,1
    1dbc:	108d6b04 	addi	r2,r2,13740
    1dc0:	200b883a 	mov	r5,r4
    1dc4:	11000017 	ldw	r4,0(r2)
    1dc8:	0001de01 	jmpi	1de0 <_malloc_r>

00001dcc <free>:
    1dcc:	00800074 	movhi	r2,1
    1dd0:	108d6b04 	addi	r2,r2,13740
    1dd4:	200b883a 	mov	r5,r4
    1dd8:	11000017 	ldw	r4,0(r2)
    1ddc:	0006c301 	jmpi	6c30 <_free_r>

00001de0 <_malloc_r>:
    1de0:	defff504 	addi	sp,sp,-44
    1de4:	dc800315 	stw	r18,12(sp)
    1de8:	dfc00a15 	stw	ra,40(sp)
    1dec:	df000915 	stw	fp,36(sp)
    1df0:	ddc00815 	stw	r23,32(sp)
    1df4:	dd800715 	stw	r22,28(sp)
    1df8:	dd400615 	stw	r21,24(sp)
    1dfc:	dd000515 	stw	r20,20(sp)
    1e00:	dcc00415 	stw	r19,16(sp)
    1e04:	dc400215 	stw	r17,8(sp)
    1e08:	dc000115 	stw	r16,4(sp)
    1e0c:	288002c4 	addi	r2,r5,11
    1e10:	00c00584 	movi	r3,22
    1e14:	2025883a 	mov	r18,r4
    1e18:	18807f2e 	bgeu	r3,r2,2018 <_malloc_r+0x238>
    1e1c:	047ffe04 	movi	r17,-8
    1e20:	1462703a 	and	r17,r2,r17
    1e24:	8800a316 	blt	r17,zero,20b4 <_malloc_r+0x2d4>
    1e28:	8940a236 	bltu	r17,r5,20b4 <_malloc_r+0x2d4>
    1e2c:	000ec5c0 	call	ec5c <__malloc_lock>
    1e30:	00807dc4 	movi	r2,503
    1e34:	1441e92e 	bgeu	r2,r17,25dc <_malloc_r+0x7fc>
    1e38:	8804d27a 	srli	r2,r17,9
    1e3c:	1000a126 	beq	r2,zero,20c4 <_malloc_r+0x2e4>
    1e40:	00c00104 	movi	r3,4
    1e44:	18811e36 	bltu	r3,r2,22c0 <_malloc_r+0x4e0>
    1e48:	8804d1ba 	srli	r2,r17,6
    1e4c:	12000e44 	addi	r8,r2,57
    1e50:	11c00e04 	addi	r7,r2,56
    1e54:	4209883a 	add	r4,r8,r8
    1e58:	04c00074 	movhi	r19,1
    1e5c:	2109883a 	add	r4,r4,r4
    1e60:	9cc6bb04 	addi	r19,r19,6892
    1e64:	2109883a 	add	r4,r4,r4
    1e68:	9909883a 	add	r4,r19,r4
    1e6c:	24000117 	ldw	r16,4(r4)
    1e70:	213ffe04 	addi	r4,r4,-8
    1e74:	24009726 	beq	r4,r16,20d4 <_malloc_r+0x2f4>
    1e78:	80800117 	ldw	r2,4(r16)
    1e7c:	01bfff04 	movi	r6,-4
    1e80:	014003c4 	movi	r5,15
    1e84:	1184703a 	and	r2,r2,r6
    1e88:	1447c83a 	sub	r3,r2,r17
    1e8c:	28c00716 	blt	r5,r3,1eac <_malloc_r+0xcc>
    1e90:	1800920e 	bge	r3,zero,20dc <_malloc_r+0x2fc>
    1e94:	84000317 	ldw	r16,12(r16)
    1e98:	24008e26 	beq	r4,r16,20d4 <_malloc_r+0x2f4>
    1e9c:	80800117 	ldw	r2,4(r16)
    1ea0:	1184703a 	and	r2,r2,r6
    1ea4:	1447c83a 	sub	r3,r2,r17
    1ea8:	28fff90e 	bge	r5,r3,1e90 <__alt_data_end+0xff001e90>
    1eac:	3809883a 	mov	r4,r7
    1eb0:	01800074 	movhi	r6,1
    1eb4:	9c000417 	ldw	r16,16(r19)
    1eb8:	3186bb04 	addi	r6,r6,6892
    1ebc:	32000204 	addi	r8,r6,8
    1ec0:	82013426 	beq	r16,r8,2394 <_malloc_r+0x5b4>
    1ec4:	80c00117 	ldw	r3,4(r16)
    1ec8:	00bfff04 	movi	r2,-4
    1ecc:	188e703a 	and	r7,r3,r2
    1ed0:	3c45c83a 	sub	r2,r7,r17
    1ed4:	00c003c4 	movi	r3,15
    1ed8:	18811f16 	blt	r3,r2,2358 <_malloc_r+0x578>
    1edc:	32000515 	stw	r8,20(r6)
    1ee0:	32000415 	stw	r8,16(r6)
    1ee4:	10007f0e 	bge	r2,zero,20e4 <_malloc_r+0x304>
    1ee8:	00807fc4 	movi	r2,511
    1eec:	11c0fd36 	bltu	r2,r7,22e4 <_malloc_r+0x504>
    1ef0:	3806d0fa 	srli	r3,r7,3
    1ef4:	01c00044 	movi	r7,1
    1ef8:	30800117 	ldw	r2,4(r6)
    1efc:	19400044 	addi	r5,r3,1
    1f00:	294b883a 	add	r5,r5,r5
    1f04:	1807d0ba 	srai	r3,r3,2
    1f08:	294b883a 	add	r5,r5,r5
    1f0c:	294b883a 	add	r5,r5,r5
    1f10:	298b883a 	add	r5,r5,r6
    1f14:	38c6983a 	sll	r3,r7,r3
    1f18:	29c00017 	ldw	r7,0(r5)
    1f1c:	2a7ffe04 	addi	r9,r5,-8
    1f20:	1886b03a 	or	r3,r3,r2
    1f24:	82400315 	stw	r9,12(r16)
    1f28:	81c00215 	stw	r7,8(r16)
    1f2c:	30c00115 	stw	r3,4(r6)
    1f30:	2c000015 	stw	r16,0(r5)
    1f34:	3c000315 	stw	r16,12(r7)
    1f38:	2005d0ba 	srai	r2,r4,2
    1f3c:	01400044 	movi	r5,1
    1f40:	288a983a 	sll	r5,r5,r2
    1f44:	19406f36 	bltu	r3,r5,2104 <_malloc_r+0x324>
    1f48:	28c4703a 	and	r2,r5,r3
    1f4c:	10000a1e 	bne	r2,zero,1f78 <_malloc_r+0x198>
    1f50:	00bfff04 	movi	r2,-4
    1f54:	294b883a 	add	r5,r5,r5
    1f58:	2088703a 	and	r4,r4,r2
    1f5c:	28c4703a 	and	r2,r5,r3
    1f60:	21000104 	addi	r4,r4,4
    1f64:	1000041e 	bne	r2,zero,1f78 <_malloc_r+0x198>
    1f68:	294b883a 	add	r5,r5,r5
    1f6c:	28c4703a 	and	r2,r5,r3
    1f70:	21000104 	addi	r4,r4,4
    1f74:	103ffc26 	beq	r2,zero,1f68 <__alt_data_end+0xff001f68>
    1f78:	02bfff04 	movi	r10,-4
    1f7c:	024003c4 	movi	r9,15
    1f80:	21800044 	addi	r6,r4,1
    1f84:	318d883a 	add	r6,r6,r6
    1f88:	318d883a 	add	r6,r6,r6
    1f8c:	318d883a 	add	r6,r6,r6
    1f90:	998d883a 	add	r6,r19,r6
    1f94:	333ffe04 	addi	r12,r6,-8
    1f98:	2017883a 	mov	r11,r4
    1f9c:	31800104 	addi	r6,r6,4
    1fa0:	34000017 	ldw	r16,0(r6)
    1fa4:	31fffd04 	addi	r7,r6,-12
    1fa8:	81c0041e 	bne	r16,r7,1fbc <_malloc_r+0x1dc>
    1fac:	0000fb06 	br	239c <_malloc_r+0x5bc>
    1fb0:	1801030e 	bge	r3,zero,23c0 <_malloc_r+0x5e0>
    1fb4:	84000317 	ldw	r16,12(r16)
    1fb8:	81c0f826 	beq	r16,r7,239c <_malloc_r+0x5bc>
    1fbc:	80800117 	ldw	r2,4(r16)
    1fc0:	1284703a 	and	r2,r2,r10
    1fc4:	1447c83a 	sub	r3,r2,r17
    1fc8:	48fff90e 	bge	r9,r3,1fb0 <__alt_data_end+0xff001fb0>
    1fcc:	80800317 	ldw	r2,12(r16)
    1fd0:	81000217 	ldw	r4,8(r16)
    1fd4:	89400054 	ori	r5,r17,1
    1fd8:	81400115 	stw	r5,4(r16)
    1fdc:	20800315 	stw	r2,12(r4)
    1fe0:	11000215 	stw	r4,8(r2)
    1fe4:	8463883a 	add	r17,r16,r17
    1fe8:	9c400515 	stw	r17,20(r19)
    1fec:	9c400415 	stw	r17,16(r19)
    1ff0:	18800054 	ori	r2,r3,1
    1ff4:	88800115 	stw	r2,4(r17)
    1ff8:	8a000315 	stw	r8,12(r17)
    1ffc:	8a000215 	stw	r8,8(r17)
    2000:	88e3883a 	add	r17,r17,r3
    2004:	88c00015 	stw	r3,0(r17)
    2008:	9009883a 	mov	r4,r18
    200c:	000ec600 	call	ec60 <__malloc_unlock>
    2010:	80800204 	addi	r2,r16,8
    2014:	00001b06 	br	2084 <_malloc_r+0x2a4>
    2018:	04400404 	movi	r17,16
    201c:	89402536 	bltu	r17,r5,20b4 <_malloc_r+0x2d4>
    2020:	000ec5c0 	call	ec5c <__malloc_lock>
    2024:	00800184 	movi	r2,6
    2028:	01000084 	movi	r4,2
    202c:	04c00074 	movhi	r19,1
    2030:	1085883a 	add	r2,r2,r2
    2034:	9cc6bb04 	addi	r19,r19,6892
    2038:	1085883a 	add	r2,r2,r2
    203c:	9885883a 	add	r2,r19,r2
    2040:	14000117 	ldw	r16,4(r2)
    2044:	10fffe04 	addi	r3,r2,-8
    2048:	80c0d926 	beq	r16,r3,23b0 <_malloc_r+0x5d0>
    204c:	80c00117 	ldw	r3,4(r16)
    2050:	81000317 	ldw	r4,12(r16)
    2054:	00bfff04 	movi	r2,-4
    2058:	1884703a 	and	r2,r3,r2
    205c:	81400217 	ldw	r5,8(r16)
    2060:	8085883a 	add	r2,r16,r2
    2064:	10c00117 	ldw	r3,4(r2)
    2068:	29000315 	stw	r4,12(r5)
    206c:	21400215 	stw	r5,8(r4)
    2070:	18c00054 	ori	r3,r3,1
    2074:	10c00115 	stw	r3,4(r2)
    2078:	9009883a 	mov	r4,r18
    207c:	000ec600 	call	ec60 <__malloc_unlock>
    2080:	80800204 	addi	r2,r16,8
    2084:	dfc00a17 	ldw	ra,40(sp)
    2088:	df000917 	ldw	fp,36(sp)
    208c:	ddc00817 	ldw	r23,32(sp)
    2090:	dd800717 	ldw	r22,28(sp)
    2094:	dd400617 	ldw	r21,24(sp)
    2098:	dd000517 	ldw	r20,20(sp)
    209c:	dcc00417 	ldw	r19,16(sp)
    20a0:	dc800317 	ldw	r18,12(sp)
    20a4:	dc400217 	ldw	r17,8(sp)
    20a8:	dc000117 	ldw	r16,4(sp)
    20ac:	dec00b04 	addi	sp,sp,44
    20b0:	f800283a 	ret
    20b4:	00800304 	movi	r2,12
    20b8:	90800015 	stw	r2,0(r18)
    20bc:	0005883a 	mov	r2,zero
    20c0:	003ff006 	br	2084 <__alt_data_end+0xff002084>
    20c4:	01002004 	movi	r4,128
    20c8:	02001004 	movi	r8,64
    20cc:	01c00fc4 	movi	r7,63
    20d0:	003f6106 	br	1e58 <__alt_data_end+0xff001e58>
    20d4:	4009883a 	mov	r4,r8
    20d8:	003f7506 	br	1eb0 <__alt_data_end+0xff001eb0>
    20dc:	81000317 	ldw	r4,12(r16)
    20e0:	003fde06 	br	205c <__alt_data_end+0xff00205c>
    20e4:	81c5883a 	add	r2,r16,r7
    20e8:	11400117 	ldw	r5,4(r2)
    20ec:	9009883a 	mov	r4,r18
    20f0:	29400054 	ori	r5,r5,1
    20f4:	11400115 	stw	r5,4(r2)
    20f8:	000ec600 	call	ec60 <__malloc_unlock>
    20fc:	80800204 	addi	r2,r16,8
    2100:	003fe006 	br	2084 <__alt_data_end+0xff002084>
    2104:	9c000217 	ldw	r16,8(r19)
    2108:	00bfff04 	movi	r2,-4
    210c:	85800117 	ldw	r22,4(r16)
    2110:	b0ac703a 	and	r22,r22,r2
    2114:	b4400336 	bltu	r22,r17,2124 <_malloc_r+0x344>
    2118:	b445c83a 	sub	r2,r22,r17
    211c:	00c003c4 	movi	r3,15
    2120:	18805d16 	blt	r3,r2,2298 <_malloc_r+0x4b8>
    2124:	05c00074 	movhi	r23,1
    2128:	00800074 	movhi	r2,1
    212c:	10944104 	addi	r2,r2,20740
    2130:	bdcd6804 	addi	r23,r23,13728
    2134:	15400017 	ldw	r21,0(r2)
    2138:	b8c00017 	ldw	r3,0(r23)
    213c:	00bfffc4 	movi	r2,-1
    2140:	858d883a 	add	r6,r16,r22
    2144:	8d6b883a 	add	r21,r17,r21
    2148:	1880ea26 	beq	r3,r2,24f4 <_malloc_r+0x714>
    214c:	ad4403c4 	addi	r21,r21,4111
    2150:	00bc0004 	movi	r2,-4096
    2154:	a8aa703a 	and	r21,r21,r2
    2158:	a80b883a 	mov	r5,r21
    215c:	9009883a 	mov	r4,r18
    2160:	d9800015 	stw	r6,0(sp)
    2164:	000272c0 	call	272c <_sbrk_r>
    2168:	1029883a 	mov	r20,r2
    216c:	00bfffc4 	movi	r2,-1
    2170:	d9800017 	ldw	r6,0(sp)
    2174:	a080e826 	beq	r20,r2,2518 <_malloc_r+0x738>
    2178:	a180a636 	bltu	r20,r6,2414 <_malloc_r+0x634>
    217c:	07000074 	movhi	fp,1
    2180:	e7144f04 	addi	fp,fp,20796
    2184:	e0800017 	ldw	r2,0(fp)
    2188:	a887883a 	add	r3,r21,r2
    218c:	e0c00015 	stw	r3,0(fp)
    2190:	3500e626 	beq	r6,r20,252c <_malloc_r+0x74c>
    2194:	b9000017 	ldw	r4,0(r23)
    2198:	00bfffc4 	movi	r2,-1
    219c:	2080ee26 	beq	r4,r2,2558 <_malloc_r+0x778>
    21a0:	a185c83a 	sub	r2,r20,r6
    21a4:	10c5883a 	add	r2,r2,r3
    21a8:	e0800015 	stw	r2,0(fp)
    21ac:	a0c001cc 	andi	r3,r20,7
    21b0:	1800bc26 	beq	r3,zero,24a4 <_malloc_r+0x6c4>
    21b4:	a0e9c83a 	sub	r20,r20,r3
    21b8:	00840204 	movi	r2,4104
    21bc:	a5000204 	addi	r20,r20,8
    21c0:	10c7c83a 	sub	r3,r2,r3
    21c4:	a545883a 	add	r2,r20,r21
    21c8:	1083ffcc 	andi	r2,r2,4095
    21cc:	18abc83a 	sub	r21,r3,r2
    21d0:	a80b883a 	mov	r5,r21
    21d4:	9009883a 	mov	r4,r18
    21d8:	000272c0 	call	272c <_sbrk_r>
    21dc:	00ffffc4 	movi	r3,-1
    21e0:	10c0e126 	beq	r2,r3,2568 <_malloc_r+0x788>
    21e4:	1505c83a 	sub	r2,r2,r20
    21e8:	1545883a 	add	r2,r2,r21
    21ec:	10800054 	ori	r2,r2,1
    21f0:	e0c00017 	ldw	r3,0(fp)
    21f4:	9d000215 	stw	r20,8(r19)
    21f8:	a0800115 	stw	r2,4(r20)
    21fc:	a8c7883a 	add	r3,r21,r3
    2200:	e0c00015 	stw	r3,0(fp)
    2204:	84c00e26 	beq	r16,r19,2240 <_malloc_r+0x460>
    2208:	018003c4 	movi	r6,15
    220c:	3580a72e 	bgeu	r6,r22,24ac <_malloc_r+0x6cc>
    2210:	81400117 	ldw	r5,4(r16)
    2214:	013ffe04 	movi	r4,-8
    2218:	b0bffd04 	addi	r2,r22,-12
    221c:	1104703a 	and	r2,r2,r4
    2220:	2900004c 	andi	r4,r5,1
    2224:	2088b03a 	or	r4,r4,r2
    2228:	81000115 	stw	r4,4(r16)
    222c:	01400144 	movi	r5,5
    2230:	8089883a 	add	r4,r16,r2
    2234:	21400115 	stw	r5,4(r4)
    2238:	21400215 	stw	r5,8(r4)
    223c:	3080cd36 	bltu	r6,r2,2574 <_malloc_r+0x794>
    2240:	00800074 	movhi	r2,1
    2244:	10944004 	addi	r2,r2,20736
    2248:	11000017 	ldw	r4,0(r2)
    224c:	20c0012e 	bgeu	r4,r3,2254 <_malloc_r+0x474>
    2250:	10c00015 	stw	r3,0(r2)
    2254:	00800074 	movhi	r2,1
    2258:	10943f04 	addi	r2,r2,20732
    225c:	11000017 	ldw	r4,0(r2)
    2260:	9c000217 	ldw	r16,8(r19)
    2264:	20c0012e 	bgeu	r4,r3,226c <_malloc_r+0x48c>
    2268:	10c00015 	stw	r3,0(r2)
    226c:	80c00117 	ldw	r3,4(r16)
    2270:	00bfff04 	movi	r2,-4
    2274:	1886703a 	and	r3,r3,r2
    2278:	1c45c83a 	sub	r2,r3,r17
    227c:	1c400236 	bltu	r3,r17,2288 <_malloc_r+0x4a8>
    2280:	00c003c4 	movi	r3,15
    2284:	18800416 	blt	r3,r2,2298 <_malloc_r+0x4b8>
    2288:	9009883a 	mov	r4,r18
    228c:	000ec600 	call	ec60 <__malloc_unlock>
    2290:	0005883a 	mov	r2,zero
    2294:	003f7b06 	br	2084 <__alt_data_end+0xff002084>
    2298:	88c00054 	ori	r3,r17,1
    229c:	80c00115 	stw	r3,4(r16)
    22a0:	8463883a 	add	r17,r16,r17
    22a4:	10800054 	ori	r2,r2,1
    22a8:	9c400215 	stw	r17,8(r19)
    22ac:	88800115 	stw	r2,4(r17)
    22b0:	9009883a 	mov	r4,r18
    22b4:	000ec600 	call	ec60 <__malloc_unlock>
    22b8:	80800204 	addi	r2,r16,8
    22bc:	003f7106 	br	2084 <__alt_data_end+0xff002084>
    22c0:	00c00504 	movi	r3,20
    22c4:	18804a2e 	bgeu	r3,r2,23f0 <_malloc_r+0x610>
    22c8:	00c01504 	movi	r3,84
    22cc:	18806e36 	bltu	r3,r2,2488 <_malloc_r+0x6a8>
    22d0:	8804d33a 	srli	r2,r17,12
    22d4:	12001bc4 	addi	r8,r2,111
    22d8:	11c01b84 	addi	r7,r2,110
    22dc:	4209883a 	add	r4,r8,r8
    22e0:	003edd06 	br	1e58 <__alt_data_end+0xff001e58>
    22e4:	3804d27a 	srli	r2,r7,9
    22e8:	00c00104 	movi	r3,4
    22ec:	1880442e 	bgeu	r3,r2,2400 <_malloc_r+0x620>
    22f0:	00c00504 	movi	r3,20
    22f4:	18808136 	bltu	r3,r2,24fc <_malloc_r+0x71c>
    22f8:	11401704 	addi	r5,r2,92
    22fc:	10c016c4 	addi	r3,r2,91
    2300:	294b883a 	add	r5,r5,r5
    2304:	294b883a 	add	r5,r5,r5
    2308:	294b883a 	add	r5,r5,r5
    230c:	994b883a 	add	r5,r19,r5
    2310:	28800017 	ldw	r2,0(r5)
    2314:	01800074 	movhi	r6,1
    2318:	297ffe04 	addi	r5,r5,-8
    231c:	3186bb04 	addi	r6,r6,6892
    2320:	28806526 	beq	r5,r2,24b8 <_malloc_r+0x6d8>
    2324:	01bfff04 	movi	r6,-4
    2328:	10c00117 	ldw	r3,4(r2)
    232c:	1986703a 	and	r3,r3,r6
    2330:	38c0022e 	bgeu	r7,r3,233c <_malloc_r+0x55c>
    2334:	10800217 	ldw	r2,8(r2)
    2338:	28bffb1e 	bne	r5,r2,2328 <__alt_data_end+0xff002328>
    233c:	11400317 	ldw	r5,12(r2)
    2340:	98c00117 	ldw	r3,4(r19)
    2344:	81400315 	stw	r5,12(r16)
    2348:	80800215 	stw	r2,8(r16)
    234c:	2c000215 	stw	r16,8(r5)
    2350:	14000315 	stw	r16,12(r2)
    2354:	003ef806 	br	1f38 <__alt_data_end+0xff001f38>
    2358:	88c00054 	ori	r3,r17,1
    235c:	80c00115 	stw	r3,4(r16)
    2360:	8463883a 	add	r17,r16,r17
    2364:	34400515 	stw	r17,20(r6)
    2368:	34400415 	stw	r17,16(r6)
    236c:	10c00054 	ori	r3,r2,1
    2370:	8a000315 	stw	r8,12(r17)
    2374:	8a000215 	stw	r8,8(r17)
    2378:	88c00115 	stw	r3,4(r17)
    237c:	88a3883a 	add	r17,r17,r2
    2380:	88800015 	stw	r2,0(r17)
    2384:	9009883a 	mov	r4,r18
    2388:	000ec600 	call	ec60 <__malloc_unlock>
    238c:	80800204 	addi	r2,r16,8
    2390:	003f3c06 	br	2084 <__alt_data_end+0xff002084>
    2394:	30c00117 	ldw	r3,4(r6)
    2398:	003ee706 	br	1f38 <__alt_data_end+0xff001f38>
    239c:	5ac00044 	addi	r11,r11,1
    23a0:	588000cc 	andi	r2,r11,3
    23a4:	31800204 	addi	r6,r6,8
    23a8:	103efd1e 	bne	r2,zero,1fa0 <__alt_data_end+0xff001fa0>
    23ac:	00002406 	br	2440 <_malloc_r+0x660>
    23b0:	14000317 	ldw	r16,12(r2)
    23b4:	143f251e 	bne	r2,r16,204c <__alt_data_end+0xff00204c>
    23b8:	21000084 	addi	r4,r4,2
    23bc:	003ebc06 	br	1eb0 <__alt_data_end+0xff001eb0>
    23c0:	8085883a 	add	r2,r16,r2
    23c4:	10c00117 	ldw	r3,4(r2)
    23c8:	81000317 	ldw	r4,12(r16)
    23cc:	81400217 	ldw	r5,8(r16)
    23d0:	18c00054 	ori	r3,r3,1
    23d4:	10c00115 	stw	r3,4(r2)
    23d8:	29000315 	stw	r4,12(r5)
    23dc:	21400215 	stw	r5,8(r4)
    23e0:	9009883a 	mov	r4,r18
    23e4:	000ec600 	call	ec60 <__malloc_unlock>
    23e8:	80800204 	addi	r2,r16,8
    23ec:	003f2506 	br	2084 <__alt_data_end+0xff002084>
    23f0:	12001704 	addi	r8,r2,92
    23f4:	11c016c4 	addi	r7,r2,91
    23f8:	4209883a 	add	r4,r8,r8
    23fc:	003e9606 	br	1e58 <__alt_data_end+0xff001e58>
    2400:	3804d1ba 	srli	r2,r7,6
    2404:	11400e44 	addi	r5,r2,57
    2408:	10c00e04 	addi	r3,r2,56
    240c:	294b883a 	add	r5,r5,r5
    2410:	003fbc06 	br	2304 <__alt_data_end+0xff002304>
    2414:	84ff5926 	beq	r16,r19,217c <__alt_data_end+0xff00217c>
    2418:	00800074 	movhi	r2,1
    241c:	1086bb04 	addi	r2,r2,6892
    2420:	14000217 	ldw	r16,8(r2)
    2424:	00bfff04 	movi	r2,-4
    2428:	80c00117 	ldw	r3,4(r16)
    242c:	1886703a 	and	r3,r3,r2
    2430:	003f9106 	br	2278 <__alt_data_end+0xff002278>
    2434:	60800217 	ldw	r2,8(r12)
    2438:	213fffc4 	addi	r4,r4,-1
    243c:	1300651e 	bne	r2,r12,25d4 <_malloc_r+0x7f4>
    2440:	208000cc 	andi	r2,r4,3
    2444:	633ffe04 	addi	r12,r12,-8
    2448:	103ffa1e 	bne	r2,zero,2434 <__alt_data_end+0xff002434>
    244c:	98800117 	ldw	r2,4(r19)
    2450:	0146303a 	nor	r3,zero,r5
    2454:	1884703a 	and	r2,r3,r2
    2458:	98800115 	stw	r2,4(r19)
    245c:	294b883a 	add	r5,r5,r5
    2460:	117f2836 	bltu	r2,r5,2104 <__alt_data_end+0xff002104>
    2464:	283f2726 	beq	r5,zero,2104 <__alt_data_end+0xff002104>
    2468:	2886703a 	and	r3,r5,r2
    246c:	5809883a 	mov	r4,r11
    2470:	183ec31e 	bne	r3,zero,1f80 <__alt_data_end+0xff001f80>
    2474:	294b883a 	add	r5,r5,r5
    2478:	2886703a 	and	r3,r5,r2
    247c:	21000104 	addi	r4,r4,4
    2480:	183ffc26 	beq	r3,zero,2474 <__alt_data_end+0xff002474>
    2484:	003ebe06 	br	1f80 <__alt_data_end+0xff001f80>
    2488:	00c05504 	movi	r3,340
    248c:	18801236 	bltu	r3,r2,24d8 <_malloc_r+0x6f8>
    2490:	8804d3fa 	srli	r2,r17,15
    2494:	12001e04 	addi	r8,r2,120
    2498:	11c01dc4 	addi	r7,r2,119
    249c:	4209883a 	add	r4,r8,r8
    24a0:	003e6d06 	br	1e58 <__alt_data_end+0xff001e58>
    24a4:	00c40004 	movi	r3,4096
    24a8:	003f4606 	br	21c4 <__alt_data_end+0xff0021c4>
    24ac:	00800044 	movi	r2,1
    24b0:	a0800115 	stw	r2,4(r20)
    24b4:	003f7406 	br	2288 <__alt_data_end+0xff002288>
    24b8:	1805d0ba 	srai	r2,r3,2
    24bc:	01c00044 	movi	r7,1
    24c0:	30c00117 	ldw	r3,4(r6)
    24c4:	388e983a 	sll	r7,r7,r2
    24c8:	2805883a 	mov	r2,r5
    24cc:	38c6b03a 	or	r3,r7,r3
    24d0:	30c00115 	stw	r3,4(r6)
    24d4:	003f9b06 	br	2344 <__alt_data_end+0xff002344>
    24d8:	00c15504 	movi	r3,1364
    24dc:	18801a36 	bltu	r3,r2,2548 <_malloc_r+0x768>
    24e0:	8804d4ba 	srli	r2,r17,18
    24e4:	12001f44 	addi	r8,r2,125
    24e8:	11c01f04 	addi	r7,r2,124
    24ec:	4209883a 	add	r4,r8,r8
    24f0:	003e5906 	br	1e58 <__alt_data_end+0xff001e58>
    24f4:	ad400404 	addi	r21,r21,16
    24f8:	003f1706 	br	2158 <__alt_data_end+0xff002158>
    24fc:	00c01504 	movi	r3,84
    2500:	18802336 	bltu	r3,r2,2590 <_malloc_r+0x7b0>
    2504:	3804d33a 	srli	r2,r7,12
    2508:	11401bc4 	addi	r5,r2,111
    250c:	10c01b84 	addi	r3,r2,110
    2510:	294b883a 	add	r5,r5,r5
    2514:	003f7b06 	br	2304 <__alt_data_end+0xff002304>
    2518:	9c000217 	ldw	r16,8(r19)
    251c:	00bfff04 	movi	r2,-4
    2520:	80c00117 	ldw	r3,4(r16)
    2524:	1886703a 	and	r3,r3,r2
    2528:	003f5306 	br	2278 <__alt_data_end+0xff002278>
    252c:	3083ffcc 	andi	r2,r6,4095
    2530:	103f181e 	bne	r2,zero,2194 <__alt_data_end+0xff002194>
    2534:	99000217 	ldw	r4,8(r19)
    2538:	b545883a 	add	r2,r22,r21
    253c:	10800054 	ori	r2,r2,1
    2540:	20800115 	stw	r2,4(r4)
    2544:	003f3e06 	br	2240 <__alt_data_end+0xff002240>
    2548:	01003f84 	movi	r4,254
    254c:	02001fc4 	movi	r8,127
    2550:	01c01f84 	movi	r7,126
    2554:	003e4006 	br	1e58 <__alt_data_end+0xff001e58>
    2558:	00800074 	movhi	r2,1
    255c:	108d6804 	addi	r2,r2,13728
    2560:	15000015 	stw	r20,0(r2)
    2564:	003f1106 	br	21ac <__alt_data_end+0xff0021ac>
    2568:	00800044 	movi	r2,1
    256c:	002b883a 	mov	r21,zero
    2570:	003f1f06 	br	21f0 <__alt_data_end+0xff0021f0>
    2574:	81400204 	addi	r5,r16,8
    2578:	9009883a 	mov	r4,r18
    257c:	0006c300 	call	6c30 <_free_r>
    2580:	00800074 	movhi	r2,1
    2584:	10944f04 	addi	r2,r2,20796
    2588:	10c00017 	ldw	r3,0(r2)
    258c:	003f2c06 	br	2240 <__alt_data_end+0xff002240>
    2590:	00c05504 	movi	r3,340
    2594:	18800536 	bltu	r3,r2,25ac <_malloc_r+0x7cc>
    2598:	3804d3fa 	srli	r2,r7,15
    259c:	11401e04 	addi	r5,r2,120
    25a0:	10c01dc4 	addi	r3,r2,119
    25a4:	294b883a 	add	r5,r5,r5
    25a8:	003f5606 	br	2304 <__alt_data_end+0xff002304>
    25ac:	00c15504 	movi	r3,1364
    25b0:	18800536 	bltu	r3,r2,25c8 <_malloc_r+0x7e8>
    25b4:	3804d4ba 	srli	r2,r7,18
    25b8:	11401f44 	addi	r5,r2,125
    25bc:	10c01f04 	addi	r3,r2,124
    25c0:	294b883a 	add	r5,r5,r5
    25c4:	003f4f06 	br	2304 <__alt_data_end+0xff002304>
    25c8:	01403f84 	movi	r5,254
    25cc:	00c01f84 	movi	r3,126
    25d0:	003f4c06 	br	2304 <__alt_data_end+0xff002304>
    25d4:	98800117 	ldw	r2,4(r19)
    25d8:	003fa006 	br	245c <__alt_data_end+0xff00245c>
    25dc:	8808d0fa 	srli	r4,r17,3
    25e0:	20800044 	addi	r2,r4,1
    25e4:	1085883a 	add	r2,r2,r2
    25e8:	003e9006 	br	202c <__alt_data_end+0xff00202c>

000025ec <_printf_r>:
    25ec:	defffd04 	addi	sp,sp,-12
    25f0:	2805883a 	mov	r2,r5
    25f4:	dfc00015 	stw	ra,0(sp)
    25f8:	d9800115 	stw	r6,4(sp)
    25fc:	d9c00215 	stw	r7,8(sp)
    2600:	21400217 	ldw	r5,8(r4)
    2604:	d9c00104 	addi	r7,sp,4
    2608:	100d883a 	mov	r6,r2
    260c:	00028180 	call	2818 <___vfprintf_internal_r>
    2610:	dfc00017 	ldw	ra,0(sp)
    2614:	dec00304 	addi	sp,sp,12
    2618:	f800283a 	ret

0000261c <printf>:
    261c:	defffc04 	addi	sp,sp,-16
    2620:	dfc00015 	stw	ra,0(sp)
    2624:	d9400115 	stw	r5,4(sp)
    2628:	d9800215 	stw	r6,8(sp)
    262c:	d9c00315 	stw	r7,12(sp)
    2630:	00800074 	movhi	r2,1
    2634:	108d6b04 	addi	r2,r2,13740
    2638:	10800017 	ldw	r2,0(r2)
    263c:	200b883a 	mov	r5,r4
    2640:	d9800104 	addi	r6,sp,4
    2644:	11000217 	ldw	r4,8(r2)
    2648:	0004a100 	call	4a10 <__vfprintf_internal>
    264c:	dfc00017 	ldw	ra,0(sp)
    2650:	dec00404 	addi	sp,sp,16
    2654:	f800283a 	ret

00002658 <_puts_r>:
    2658:	defff604 	addi	sp,sp,-40
    265c:	dc000715 	stw	r16,28(sp)
    2660:	2021883a 	mov	r16,r4
    2664:	2809883a 	mov	r4,r5
    2668:	dc400815 	stw	r17,32(sp)
    266c:	dfc00915 	stw	ra,36(sp)
    2670:	2823883a 	mov	r17,r5
    2674:	00027800 	call	2780 <strlen>
    2678:	10c00044 	addi	r3,r2,1
    267c:	d8800115 	stw	r2,4(sp)
    2680:	00800074 	movhi	r2,1
    2684:	1085fd04 	addi	r2,r2,6132
    2688:	d8800215 	stw	r2,8(sp)
    268c:	00800044 	movi	r2,1
    2690:	d8800315 	stw	r2,12(sp)
    2694:	00800084 	movi	r2,2
    2698:	dc400015 	stw	r17,0(sp)
    269c:	d8c00615 	stw	r3,24(sp)
    26a0:	dec00415 	stw	sp,16(sp)
    26a4:	d8800515 	stw	r2,20(sp)
    26a8:	80000226 	beq	r16,zero,26b4 <_puts_r+0x5c>
    26ac:	80800e17 	ldw	r2,56(r16)
    26b0:	10001426 	beq	r2,zero,2704 <_puts_r+0xac>
    26b4:	81400217 	ldw	r5,8(r16)
    26b8:	2880030b 	ldhu	r2,12(r5)
    26bc:	10c8000c 	andi	r3,r2,8192
    26c0:	1800061e 	bne	r3,zero,26dc <_puts_r+0x84>
    26c4:	29001917 	ldw	r4,100(r5)
    26c8:	00f7ffc4 	movi	r3,-8193
    26cc:	10880014 	ori	r2,r2,8192
    26d0:	20c6703a 	and	r3,r4,r3
    26d4:	2880030d 	sth	r2,12(r5)
    26d8:	28c01915 	stw	r3,100(r5)
    26dc:	d9800404 	addi	r6,sp,16
    26e0:	8009883a 	mov	r4,r16
    26e4:	0006f400 	call	6f40 <__sfvwrite_r>
    26e8:	1000091e 	bne	r2,zero,2710 <_puts_r+0xb8>
    26ec:	00800284 	movi	r2,10
    26f0:	dfc00917 	ldw	ra,36(sp)
    26f4:	dc400817 	ldw	r17,32(sp)
    26f8:	dc000717 	ldw	r16,28(sp)
    26fc:	dec00a04 	addi	sp,sp,40
    2700:	f800283a 	ret
    2704:	8009883a 	mov	r4,r16
    2708:	0006abc0 	call	6abc <__sinit>
    270c:	003fe906 	br	26b4 <__alt_data_end+0xff0026b4>
    2710:	00bfffc4 	movi	r2,-1
    2714:	003ff606 	br	26f0 <__alt_data_end+0xff0026f0>

00002718 <puts>:
    2718:	00800074 	movhi	r2,1
    271c:	108d6b04 	addi	r2,r2,13740
    2720:	200b883a 	mov	r5,r4
    2724:	11000017 	ldw	r4,0(r2)
    2728:	00026581 	jmpi	2658 <_puts_r>

0000272c <_sbrk_r>:
    272c:	defffd04 	addi	sp,sp,-12
    2730:	dc000015 	stw	r16,0(sp)
    2734:	04000074 	movhi	r16,1
    2738:	dc400115 	stw	r17,4(sp)
    273c:	84144204 	addi	r16,r16,20744
    2740:	2023883a 	mov	r17,r4
    2744:	2809883a 	mov	r4,r5
    2748:	dfc00215 	stw	ra,8(sp)
    274c:	80000015 	stw	zero,0(r16)
    2750:	000ee000 	call	ee00 <sbrk>
    2754:	00ffffc4 	movi	r3,-1
    2758:	10c00526 	beq	r2,r3,2770 <_sbrk_r+0x44>
    275c:	dfc00217 	ldw	ra,8(sp)
    2760:	dc400117 	ldw	r17,4(sp)
    2764:	dc000017 	ldw	r16,0(sp)
    2768:	dec00304 	addi	sp,sp,12
    276c:	f800283a 	ret
    2770:	80c00017 	ldw	r3,0(r16)
    2774:	183ff926 	beq	r3,zero,275c <__alt_data_end+0xff00275c>
    2778:	88c00015 	stw	r3,0(r17)
    277c:	003ff706 	br	275c <__alt_data_end+0xff00275c>

00002780 <strlen>:
    2780:	208000cc 	andi	r2,r4,3
    2784:	10002026 	beq	r2,zero,2808 <strlen+0x88>
    2788:	20800007 	ldb	r2,0(r4)
    278c:	10002026 	beq	r2,zero,2810 <strlen+0x90>
    2790:	2005883a 	mov	r2,r4
    2794:	00000206 	br	27a0 <strlen+0x20>
    2798:	10c00007 	ldb	r3,0(r2)
    279c:	18001826 	beq	r3,zero,2800 <strlen+0x80>
    27a0:	10800044 	addi	r2,r2,1
    27a4:	10c000cc 	andi	r3,r2,3
    27a8:	183ffb1e 	bne	r3,zero,2798 <__alt_data_end+0xff002798>
    27ac:	10c00017 	ldw	r3,0(r2)
    27b0:	01ffbff4 	movhi	r7,65279
    27b4:	39ffbfc4 	addi	r7,r7,-257
    27b8:	00ca303a 	nor	r5,zero,r3
    27bc:	01a02074 	movhi	r6,32897
    27c0:	19c7883a 	add	r3,r3,r7
    27c4:	31a02004 	addi	r6,r6,-32640
    27c8:	1946703a 	and	r3,r3,r5
    27cc:	1986703a 	and	r3,r3,r6
    27d0:	1800091e 	bne	r3,zero,27f8 <strlen+0x78>
    27d4:	10800104 	addi	r2,r2,4
    27d8:	10c00017 	ldw	r3,0(r2)
    27dc:	19cb883a 	add	r5,r3,r7
    27e0:	00c6303a 	nor	r3,zero,r3
    27e4:	28c6703a 	and	r3,r5,r3
    27e8:	1986703a 	and	r3,r3,r6
    27ec:	183ff926 	beq	r3,zero,27d4 <__alt_data_end+0xff0027d4>
    27f0:	00000106 	br	27f8 <strlen+0x78>
    27f4:	10800044 	addi	r2,r2,1
    27f8:	10c00007 	ldb	r3,0(r2)
    27fc:	183ffd1e 	bne	r3,zero,27f4 <__alt_data_end+0xff0027f4>
    2800:	1105c83a 	sub	r2,r2,r4
    2804:	f800283a 	ret
    2808:	2005883a 	mov	r2,r4
    280c:	003fe706 	br	27ac <__alt_data_end+0xff0027ac>
    2810:	0005883a 	mov	r2,zero
    2814:	f800283a 	ret

00002818 <___vfprintf_internal_r>:
    2818:	deffb804 	addi	sp,sp,-288
    281c:	dfc04715 	stw	ra,284(sp)
    2820:	ddc04515 	stw	r23,276(sp)
    2824:	dd404315 	stw	r21,268(sp)
    2828:	d9002c15 	stw	r4,176(sp)
    282c:	282f883a 	mov	r23,r5
    2830:	302b883a 	mov	r21,r6
    2834:	d9c02d15 	stw	r7,180(sp)
    2838:	df004615 	stw	fp,280(sp)
    283c:	dd804415 	stw	r22,272(sp)
    2840:	dd004215 	stw	r20,264(sp)
    2844:	dcc04115 	stw	r19,260(sp)
    2848:	dc804015 	stw	r18,256(sp)
    284c:	dc403f15 	stw	r17,252(sp)
    2850:	dc003e15 	stw	r16,248(sp)
    2854:	00076300 	call	7630 <_localeconv_r>
    2858:	10800017 	ldw	r2,0(r2)
    285c:	1009883a 	mov	r4,r2
    2860:	d8803415 	stw	r2,208(sp)
    2864:	00027800 	call	2780 <strlen>
    2868:	d8803715 	stw	r2,220(sp)
    286c:	d8802c17 	ldw	r2,176(sp)
    2870:	10000226 	beq	r2,zero,287c <___vfprintf_internal_r+0x64>
    2874:	10800e17 	ldw	r2,56(r2)
    2878:	1000f926 	beq	r2,zero,2c60 <___vfprintf_internal_r+0x448>
    287c:	b880030b 	ldhu	r2,12(r23)
    2880:	10c8000c 	andi	r3,r2,8192
    2884:	1800061e 	bne	r3,zero,28a0 <___vfprintf_internal_r+0x88>
    2888:	b9001917 	ldw	r4,100(r23)
    288c:	00f7ffc4 	movi	r3,-8193
    2890:	10880014 	ori	r2,r2,8192
    2894:	20c6703a 	and	r3,r4,r3
    2898:	b880030d 	sth	r2,12(r23)
    289c:	b8c01915 	stw	r3,100(r23)
    28a0:	10c0020c 	andi	r3,r2,8
    28a4:	1800c126 	beq	r3,zero,2bac <___vfprintf_internal_r+0x394>
    28a8:	b8c00417 	ldw	r3,16(r23)
    28ac:	1800bf26 	beq	r3,zero,2bac <___vfprintf_internal_r+0x394>
    28b0:	1080068c 	andi	r2,r2,26
    28b4:	00c00284 	movi	r3,10
    28b8:	10c0c426 	beq	r2,r3,2bcc <___vfprintf_internal_r+0x3b4>
    28bc:	d8c00404 	addi	r3,sp,16
    28c0:	05000074 	movhi	r20,1
    28c4:	d9001e04 	addi	r4,sp,120
    28c8:	a5060e84 	addi	r20,r20,6202
    28cc:	d8c01e15 	stw	r3,120(sp)
    28d0:	d8002015 	stw	zero,128(sp)
    28d4:	d8001f15 	stw	zero,124(sp)
    28d8:	d8003315 	stw	zero,204(sp)
    28dc:	d8003615 	stw	zero,216(sp)
    28e0:	d8003815 	stw	zero,224(sp)
    28e4:	1811883a 	mov	r8,r3
    28e8:	d8003915 	stw	zero,228(sp)
    28ec:	d8003a15 	stw	zero,232(sp)
    28f0:	d8002f15 	stw	zero,188(sp)
    28f4:	d9002815 	stw	r4,160(sp)
    28f8:	a8800007 	ldb	r2,0(r21)
    28fc:	10027b26 	beq	r2,zero,32ec <___vfprintf_internal_r+0xad4>
    2900:	00c00944 	movi	r3,37
    2904:	a821883a 	mov	r16,r21
    2908:	10c0021e 	bne	r2,r3,2914 <___vfprintf_internal_r+0xfc>
    290c:	00001406 	br	2960 <___vfprintf_internal_r+0x148>
    2910:	10c00326 	beq	r2,r3,2920 <___vfprintf_internal_r+0x108>
    2914:	84000044 	addi	r16,r16,1
    2918:	80800007 	ldb	r2,0(r16)
    291c:	103ffc1e 	bne	r2,zero,2910 <__alt_data_end+0xff002910>
    2920:	8563c83a 	sub	r17,r16,r21
    2924:	88000e26 	beq	r17,zero,2960 <___vfprintf_internal_r+0x148>
    2928:	d8c02017 	ldw	r3,128(sp)
    292c:	d8801f17 	ldw	r2,124(sp)
    2930:	45400015 	stw	r21,0(r8)
    2934:	1c47883a 	add	r3,r3,r17
    2938:	10800044 	addi	r2,r2,1
    293c:	d8c02015 	stw	r3,128(sp)
    2940:	44400115 	stw	r17,4(r8)
    2944:	d8801f15 	stw	r2,124(sp)
    2948:	00c001c4 	movi	r3,7
    294c:	1880a716 	blt	r3,r2,2bec <___vfprintf_internal_r+0x3d4>
    2950:	42000204 	addi	r8,r8,8
    2954:	d9402f17 	ldw	r5,188(sp)
    2958:	2c4b883a 	add	r5,r5,r17
    295c:	d9402f15 	stw	r5,188(sp)
    2960:	80800007 	ldb	r2,0(r16)
    2964:	1000a826 	beq	r2,zero,2c08 <___vfprintf_internal_r+0x3f0>
    2968:	84400047 	ldb	r17,1(r16)
    296c:	00bfffc4 	movi	r2,-1
    2970:	85400044 	addi	r21,r16,1
    2974:	d8002785 	stb	zero,158(sp)
    2978:	0007883a 	mov	r3,zero
    297c:	000f883a 	mov	r7,zero
    2980:	d8802915 	stw	r2,164(sp)
    2984:	d8003115 	stw	zero,196(sp)
    2988:	0025883a 	mov	r18,zero
    298c:	01401604 	movi	r5,88
    2990:	01800244 	movi	r6,9
    2994:	02800a84 	movi	r10,42
    2998:	02401b04 	movi	r9,108
    299c:	ad400044 	addi	r21,r21,1
    29a0:	88bff804 	addi	r2,r17,-32
    29a4:	28830436 	bltu	r5,r2,35b8 <___vfprintf_internal_r+0xda0>
    29a8:	100490ba 	slli	r2,r2,2
    29ac:	01000034 	movhi	r4,0
    29b0:	210a7004 	addi	r4,r4,10688
    29b4:	1105883a 	add	r2,r2,r4
    29b8:	10800017 	ldw	r2,0(r2)
    29bc:	1000683a 	jmp	r2
    29c0:	000034d8 	cmpnei	zero,zero,211
    29c4:	000035b8 	rdprs	zero,zero,214
    29c8:	000035b8 	rdprs	zero,zero,214
    29cc:	000034f8 	rdprs	zero,zero,211
    29d0:	000035b8 	rdprs	zero,zero,214
    29d4:	000035b8 	rdprs	zero,zero,214
    29d8:	000035b8 	rdprs	zero,zero,214
    29dc:	000035b8 	rdprs	zero,zero,214
    29e0:	000035b8 	rdprs	zero,zero,214
    29e4:	000035b8 	rdprs	zero,zero,214
    29e8:	00002c6c 	andhi	zero,zero,177
    29ec:	00003414 	movui	zero,208
    29f0:	000035b8 	rdprs	zero,zero,214
    29f4:	00002b34 	movhi	zero,172
    29f8:	00002c94 	movui	zero,178
    29fc:	000035b8 	rdprs	zero,zero,214
    2a00:	00002cd4 	movui	zero,179
    2a04:	00002ce0 	cmpeqi	zero,zero,179
    2a08:	00002ce0 	cmpeqi	zero,zero,179
    2a0c:	00002ce0 	cmpeqi	zero,zero,179
    2a10:	00002ce0 	cmpeqi	zero,zero,179
    2a14:	00002ce0 	cmpeqi	zero,zero,179
    2a18:	00002ce0 	cmpeqi	zero,zero,179
    2a1c:	00002ce0 	cmpeqi	zero,zero,179
    2a20:	00002ce0 	cmpeqi	zero,zero,179
    2a24:	00002ce0 	cmpeqi	zero,zero,179
    2a28:	000035b8 	rdprs	zero,zero,214
    2a2c:	000035b8 	rdprs	zero,zero,214
    2a30:	000035b8 	rdprs	zero,zero,214
    2a34:	000035b8 	rdprs	zero,zero,214
    2a38:	000035b8 	rdprs	zero,zero,214
    2a3c:	000035b8 	rdprs	zero,zero,214
    2a40:	000035b8 	rdprs	zero,zero,214
    2a44:	000035b8 	rdprs	zero,zero,214
    2a48:	000035b8 	rdprs	zero,zero,214
    2a4c:	000035b8 	rdprs	zero,zero,214
    2a50:	00002d14 	movui	zero,180
    2a54:	00002dd0 	cmplti	zero,zero,183
    2a58:	000035b8 	rdprs	zero,zero,214
    2a5c:	00002dd0 	cmplti	zero,zero,183
    2a60:	000035b8 	rdprs	zero,zero,214
    2a64:	000035b8 	rdprs	zero,zero,214
    2a68:	000035b8 	rdprs	zero,zero,214
    2a6c:	000035b8 	rdprs	zero,zero,214
    2a70:	00002e70 	cmpltui	zero,zero,185
    2a74:	000035b8 	rdprs	zero,zero,214
    2a78:	000035b8 	rdprs	zero,zero,214
    2a7c:	00002e7c 	xorhi	zero,zero,185
    2a80:	000035b8 	rdprs	zero,zero,214
    2a84:	000035b8 	rdprs	zero,zero,214
    2a88:	000035b8 	rdprs	zero,zero,214
    2a8c:	000035b8 	rdprs	zero,zero,214
    2a90:	000035b8 	rdprs	zero,zero,214
    2a94:	000032f4 	movhi	zero,203
    2a98:	000035b8 	rdprs	zero,zero,214
    2a9c:	000035b8 	rdprs	zero,zero,214
    2aa0:	00003354 	movui	zero,205
    2aa4:	000035b8 	rdprs	zero,zero,214
    2aa8:	000035b8 	rdprs	zero,zero,214
    2aac:	000035b8 	rdprs	zero,zero,214
    2ab0:	000035b8 	rdprs	zero,zero,214
    2ab4:	000035b8 	rdprs	zero,zero,214
    2ab8:	000035b8 	rdprs	zero,zero,214
    2abc:	000035b8 	rdprs	zero,zero,214
    2ac0:	000035b8 	rdprs	zero,zero,214
    2ac4:	000035b8 	rdprs	zero,zero,214
    2ac8:	000035b8 	rdprs	zero,zero,214
    2acc:	00003564 	muli	zero,zero,213
    2ad0:	00003504 	movi	zero,212
    2ad4:	00002dd0 	cmplti	zero,zero,183
    2ad8:	00002dd0 	cmplti	zero,zero,183
    2adc:	00002dd0 	cmplti	zero,zero,183
    2ae0:	00003514 	movui	zero,212
    2ae4:	00003504 	movi	zero,212
    2ae8:	000035b8 	rdprs	zero,zero,214
    2aec:	000035b8 	rdprs	zero,zero,214
    2af0:	00003520 	cmpeqi	zero,zero,212
    2af4:	000035b8 	rdprs	zero,zero,214
    2af8:	00003530 	cmpltui	zero,zero,212
    2afc:	00003404 	movi	zero,208
    2b00:	00002b40 	call	2b4 <init_camera+0x24>
    2b04:	00003424 	muli	zero,zero,208
    2b08:	000035b8 	rdprs	zero,zero,214
    2b0c:	00003430 	cmpltui	zero,zero,208
    2b10:	000035b8 	rdprs	zero,zero,214
    2b14:	0000348c 	andi	zero,zero,210
    2b18:	000035b8 	rdprs	zero,zero,214
    2b1c:	000035b8 	rdprs	zero,zero,214
    2b20:	0000349c 	xori	zero,zero,210
    2b24:	d9003117 	ldw	r4,196(sp)
    2b28:	d8802d15 	stw	r2,180(sp)
    2b2c:	0109c83a 	sub	r4,zero,r4
    2b30:	d9003115 	stw	r4,196(sp)
    2b34:	94800114 	ori	r18,r18,4
    2b38:	ac400007 	ldb	r17,0(r21)
    2b3c:	003f9706 	br	299c <__alt_data_end+0xff00299c>
    2b40:	00800c04 	movi	r2,48
    2b44:	d9002d17 	ldw	r4,180(sp)
    2b48:	d9402917 	ldw	r5,164(sp)
    2b4c:	d8802705 	stb	r2,156(sp)
    2b50:	00801e04 	movi	r2,120
    2b54:	d8802745 	stb	r2,157(sp)
    2b58:	d8002785 	stb	zero,158(sp)
    2b5c:	20c00104 	addi	r3,r4,4
    2b60:	24c00017 	ldw	r19,0(r4)
    2b64:	002d883a 	mov	r22,zero
    2b68:	90800094 	ori	r2,r18,2
    2b6c:	28029a16 	blt	r5,zero,35d8 <___vfprintf_internal_r+0xdc0>
    2b70:	00bfdfc4 	movi	r2,-129
    2b74:	90a4703a 	and	r18,r18,r2
    2b78:	d8c02d15 	stw	r3,180(sp)
    2b7c:	94800094 	ori	r18,r18,2
    2b80:	9802871e 	bne	r19,zero,35a0 <___vfprintf_internal_r+0xd88>
    2b84:	00800074 	movhi	r2,1
    2b88:	10860704 	addi	r2,r2,6172
    2b8c:	d8803915 	stw	r2,228(sp)
    2b90:	04401e04 	movi	r17,120
    2b94:	d8802917 	ldw	r2,164(sp)
    2b98:	0039883a 	mov	fp,zero
    2b9c:	1001e926 	beq	r2,zero,3344 <___vfprintf_internal_r+0xb2c>
    2ba0:	0027883a 	mov	r19,zero
    2ba4:	002d883a 	mov	r22,zero
    2ba8:	00020506 	br	33c0 <___vfprintf_internal_r+0xba8>
    2bac:	d9002c17 	ldw	r4,176(sp)
    2bb0:	b80b883a 	mov	r5,r23
    2bb4:	0004ae80 	call	4ae8 <__swsetup_r>
    2bb8:	1005ac1e 	bne	r2,zero,426c <___vfprintf_internal_r+0x1a54>
    2bbc:	b880030b 	ldhu	r2,12(r23)
    2bc0:	00c00284 	movi	r3,10
    2bc4:	1080068c 	andi	r2,r2,26
    2bc8:	10ff3c1e 	bne	r2,r3,28bc <__alt_data_end+0xff0028bc>
    2bcc:	b880038f 	ldh	r2,14(r23)
    2bd0:	103f3a16 	blt	r2,zero,28bc <__alt_data_end+0xff0028bc>
    2bd4:	d9c02d17 	ldw	r7,180(sp)
    2bd8:	d9002c17 	ldw	r4,176(sp)
    2bdc:	a80d883a 	mov	r6,r21
    2be0:	b80b883a 	mov	r5,r23
    2be4:	0004a2c0 	call	4a2c <__sbprintf>
    2be8:	00001106 	br	2c30 <___vfprintf_internal_r+0x418>
    2bec:	d9002c17 	ldw	r4,176(sp)
    2bf0:	d9801e04 	addi	r6,sp,120
    2bf4:	b80b883a 	mov	r5,r23
    2bf8:	00095b40 	call	95b4 <__sprint_r>
    2bfc:	1000081e 	bne	r2,zero,2c20 <___vfprintf_internal_r+0x408>
    2c00:	da000404 	addi	r8,sp,16
    2c04:	003f5306 	br	2954 <__alt_data_end+0xff002954>
    2c08:	d8802017 	ldw	r2,128(sp)
    2c0c:	10000426 	beq	r2,zero,2c20 <___vfprintf_internal_r+0x408>
    2c10:	d9002c17 	ldw	r4,176(sp)
    2c14:	d9801e04 	addi	r6,sp,120
    2c18:	b80b883a 	mov	r5,r23
    2c1c:	00095b40 	call	95b4 <__sprint_r>
    2c20:	b880030b 	ldhu	r2,12(r23)
    2c24:	1080100c 	andi	r2,r2,64
    2c28:	1005901e 	bne	r2,zero,426c <___vfprintf_internal_r+0x1a54>
    2c2c:	d8802f17 	ldw	r2,188(sp)
    2c30:	dfc04717 	ldw	ra,284(sp)
    2c34:	df004617 	ldw	fp,280(sp)
    2c38:	ddc04517 	ldw	r23,276(sp)
    2c3c:	dd804417 	ldw	r22,272(sp)
    2c40:	dd404317 	ldw	r21,268(sp)
    2c44:	dd004217 	ldw	r20,264(sp)
    2c48:	dcc04117 	ldw	r19,260(sp)
    2c4c:	dc804017 	ldw	r18,256(sp)
    2c50:	dc403f17 	ldw	r17,252(sp)
    2c54:	dc003e17 	ldw	r16,248(sp)
    2c58:	dec04804 	addi	sp,sp,288
    2c5c:	f800283a 	ret
    2c60:	d9002c17 	ldw	r4,176(sp)
    2c64:	0006abc0 	call	6abc <__sinit>
    2c68:	003f0406 	br	287c <__alt_data_end+0xff00287c>
    2c6c:	d8802d17 	ldw	r2,180(sp)
    2c70:	d9002d17 	ldw	r4,180(sp)
    2c74:	10800017 	ldw	r2,0(r2)
    2c78:	d8803115 	stw	r2,196(sp)
    2c7c:	20800104 	addi	r2,r4,4
    2c80:	d9003117 	ldw	r4,196(sp)
    2c84:	203fa716 	blt	r4,zero,2b24 <__alt_data_end+0xff002b24>
    2c88:	d8802d15 	stw	r2,180(sp)
    2c8c:	ac400007 	ldb	r17,0(r21)
    2c90:	003f4206 	br	299c <__alt_data_end+0xff00299c>
    2c94:	ac400007 	ldb	r17,0(r21)
    2c98:	aac00044 	addi	r11,r21,1
    2c9c:	8a872826 	beq	r17,r10,4940 <___vfprintf_internal_r+0x2128>
    2ca0:	88bff404 	addi	r2,r17,-48
    2ca4:	0009883a 	mov	r4,zero
    2ca8:	30867d36 	bltu	r6,r2,46a0 <___vfprintf_internal_r+0x1e88>
    2cac:	5c400007 	ldb	r17,0(r11)
    2cb0:	210002a4 	muli	r4,r4,10
    2cb4:	5d400044 	addi	r21,r11,1
    2cb8:	a817883a 	mov	r11,r21
    2cbc:	2089883a 	add	r4,r4,r2
    2cc0:	88bff404 	addi	r2,r17,-48
    2cc4:	30bff92e 	bgeu	r6,r2,2cac <__alt_data_end+0xff002cac>
    2cc8:	2005c916 	blt	r4,zero,43f0 <___vfprintf_internal_r+0x1bd8>
    2ccc:	d9002915 	stw	r4,164(sp)
    2cd0:	003f3306 	br	29a0 <__alt_data_end+0xff0029a0>
    2cd4:	94802014 	ori	r18,r18,128
    2cd8:	ac400007 	ldb	r17,0(r21)
    2cdc:	003f2f06 	br	299c <__alt_data_end+0xff00299c>
    2ce0:	a809883a 	mov	r4,r21
    2ce4:	d8003115 	stw	zero,196(sp)
    2ce8:	88bff404 	addi	r2,r17,-48
    2cec:	0017883a 	mov	r11,zero
    2cf0:	24400007 	ldb	r17,0(r4)
    2cf4:	5ac002a4 	muli	r11,r11,10
    2cf8:	ad400044 	addi	r21,r21,1
    2cfc:	a809883a 	mov	r4,r21
    2d00:	12d7883a 	add	r11,r2,r11
    2d04:	88bff404 	addi	r2,r17,-48
    2d08:	30bff92e 	bgeu	r6,r2,2cf0 <__alt_data_end+0xff002cf0>
    2d0c:	dac03115 	stw	r11,196(sp)
    2d10:	003f2306 	br	29a0 <__alt_data_end+0xff0029a0>
    2d14:	18c03fcc 	andi	r3,r3,255
    2d18:	18072b1e 	bne	r3,zero,49c8 <___vfprintf_internal_r+0x21b0>
    2d1c:	94800414 	ori	r18,r18,16
    2d20:	9080080c 	andi	r2,r18,32
    2d24:	10037b26 	beq	r2,zero,3b14 <___vfprintf_internal_r+0x12fc>
    2d28:	d9402d17 	ldw	r5,180(sp)
    2d2c:	28800117 	ldw	r2,4(r5)
    2d30:	2cc00017 	ldw	r19,0(r5)
    2d34:	29400204 	addi	r5,r5,8
    2d38:	d9402d15 	stw	r5,180(sp)
    2d3c:	102d883a 	mov	r22,r2
    2d40:	10044b16 	blt	r2,zero,3e70 <___vfprintf_internal_r+0x1658>
    2d44:	d9402917 	ldw	r5,164(sp)
    2d48:	df002783 	ldbu	fp,158(sp)
    2d4c:	2803bc16 	blt	r5,zero,3c40 <___vfprintf_internal_r+0x1428>
    2d50:	00ffdfc4 	movi	r3,-129
    2d54:	9d84b03a 	or	r2,r19,r22
    2d58:	90e4703a 	and	r18,r18,r3
    2d5c:	10017726 	beq	r2,zero,333c <___vfprintf_internal_r+0xb24>
    2d60:	b0038326 	beq	r22,zero,3b70 <___vfprintf_internal_r+0x1358>
    2d64:	dc402a15 	stw	r17,168(sp)
    2d68:	dc001e04 	addi	r16,sp,120
    2d6c:	b023883a 	mov	r17,r22
    2d70:	402d883a 	mov	r22,r8
    2d74:	9809883a 	mov	r4,r19
    2d78:	880b883a 	mov	r5,r17
    2d7c:	01800284 	movi	r6,10
    2d80:	000f883a 	mov	r7,zero
    2d84:	000b9ac0 	call	b9ac <__umoddi3>
    2d88:	10800c04 	addi	r2,r2,48
    2d8c:	843fffc4 	addi	r16,r16,-1
    2d90:	9809883a 	mov	r4,r19
    2d94:	880b883a 	mov	r5,r17
    2d98:	80800005 	stb	r2,0(r16)
    2d9c:	01800284 	movi	r6,10
    2da0:	000f883a 	mov	r7,zero
    2da4:	000b4340 	call	b434 <__udivdi3>
    2da8:	1027883a 	mov	r19,r2
    2dac:	10c4b03a 	or	r2,r2,r3
    2db0:	1823883a 	mov	r17,r3
    2db4:	103fef1e 	bne	r2,zero,2d74 <__alt_data_end+0xff002d74>
    2db8:	d8c02817 	ldw	r3,160(sp)
    2dbc:	dc402a17 	ldw	r17,168(sp)
    2dc0:	b011883a 	mov	r8,r22
    2dc4:	1c07c83a 	sub	r3,r3,r16
    2dc8:	d8c02e15 	stw	r3,184(sp)
    2dcc:	00005906 	br	2f34 <___vfprintf_internal_r+0x71c>
    2dd0:	18c03fcc 	andi	r3,r3,255
    2dd4:	1806fa1e 	bne	r3,zero,49c0 <___vfprintf_internal_r+0x21a8>
    2dd8:	9080020c 	andi	r2,r18,8
    2ddc:	10048a26 	beq	r2,zero,4008 <___vfprintf_internal_r+0x17f0>
    2de0:	d8c02d17 	ldw	r3,180(sp)
    2de4:	d9002d17 	ldw	r4,180(sp)
    2de8:	d9402d17 	ldw	r5,180(sp)
    2dec:	18c00017 	ldw	r3,0(r3)
    2df0:	21000117 	ldw	r4,4(r4)
    2df4:	29400204 	addi	r5,r5,8
    2df8:	d8c03615 	stw	r3,216(sp)
    2dfc:	d9003815 	stw	r4,224(sp)
    2e00:	d9402d15 	stw	r5,180(sp)
    2e04:	d9003617 	ldw	r4,216(sp)
    2e08:	d9403817 	ldw	r5,224(sp)
    2e0c:	da003d15 	stw	r8,244(sp)
    2e10:	04000044 	movi	r16,1
    2e14:	000922c0 	call	922c <__fpclassifyd>
    2e18:	da003d17 	ldw	r8,244(sp)
    2e1c:	14041f1e 	bne	r2,r16,3e9c <___vfprintf_internal_r+0x1684>
    2e20:	d9003617 	ldw	r4,216(sp)
    2e24:	d9403817 	ldw	r5,224(sp)
    2e28:	000d883a 	mov	r6,zero
    2e2c:	000f883a 	mov	r7,zero
    2e30:	000d3900 	call	d390 <__ledf2>
    2e34:	da003d17 	ldw	r8,244(sp)
    2e38:	1005be16 	blt	r2,zero,4534 <___vfprintf_internal_r+0x1d1c>
    2e3c:	df002783 	ldbu	fp,158(sp)
    2e40:	008011c4 	movi	r2,71
    2e44:	1445330e 	bge	r2,r17,4314 <___vfprintf_internal_r+0x1afc>
    2e48:	04000074 	movhi	r16,1
    2e4c:	8405ff04 	addi	r16,r16,6140
    2e50:	00c000c4 	movi	r3,3
    2e54:	00bfdfc4 	movi	r2,-129
    2e58:	d8c02a15 	stw	r3,168(sp)
    2e5c:	90a4703a 	and	r18,r18,r2
    2e60:	d8c02e15 	stw	r3,184(sp)
    2e64:	d8002915 	stw	zero,164(sp)
    2e68:	d8003215 	stw	zero,200(sp)
    2e6c:	00003706 	br	2f4c <___vfprintf_internal_r+0x734>
    2e70:	94800214 	ori	r18,r18,8
    2e74:	ac400007 	ldb	r17,0(r21)
    2e78:	003ec806 	br	299c <__alt_data_end+0xff00299c>
    2e7c:	18c03fcc 	andi	r3,r3,255
    2e80:	1806db1e 	bne	r3,zero,49f0 <___vfprintf_internal_r+0x21d8>
    2e84:	94800414 	ori	r18,r18,16
    2e88:	9080080c 	andi	r2,r18,32
    2e8c:	1002d826 	beq	r2,zero,39f0 <___vfprintf_internal_r+0x11d8>
    2e90:	d9402d17 	ldw	r5,180(sp)
    2e94:	d8c02917 	ldw	r3,164(sp)
    2e98:	d8002785 	stb	zero,158(sp)
    2e9c:	28800204 	addi	r2,r5,8
    2ea0:	2cc00017 	ldw	r19,0(r5)
    2ea4:	2d800117 	ldw	r22,4(r5)
    2ea8:	18048f16 	blt	r3,zero,40e8 <___vfprintf_internal_r+0x18d0>
    2eac:	013fdfc4 	movi	r4,-129
    2eb0:	9d86b03a 	or	r3,r19,r22
    2eb4:	d8802d15 	stw	r2,180(sp)
    2eb8:	9124703a 	and	r18,r18,r4
    2ebc:	1802d91e 	bne	r3,zero,3a24 <___vfprintf_internal_r+0x120c>
    2ec0:	d8c02917 	ldw	r3,164(sp)
    2ec4:	0039883a 	mov	fp,zero
    2ec8:	1805c326 	beq	r3,zero,45d8 <___vfprintf_internal_r+0x1dc0>
    2ecc:	0027883a 	mov	r19,zero
    2ed0:	002d883a 	mov	r22,zero
    2ed4:	dc001e04 	addi	r16,sp,120
    2ed8:	9806d0fa 	srli	r3,r19,3
    2edc:	b008977a 	slli	r4,r22,29
    2ee0:	b02cd0fa 	srli	r22,r22,3
    2ee4:	9cc001cc 	andi	r19,r19,7
    2ee8:	98800c04 	addi	r2,r19,48
    2eec:	843fffc4 	addi	r16,r16,-1
    2ef0:	20e6b03a 	or	r19,r4,r3
    2ef4:	80800005 	stb	r2,0(r16)
    2ef8:	9d86b03a 	or	r3,r19,r22
    2efc:	183ff61e 	bne	r3,zero,2ed8 <__alt_data_end+0xff002ed8>
    2f00:	90c0004c 	andi	r3,r18,1
    2f04:	18013b26 	beq	r3,zero,33f4 <___vfprintf_internal_r+0xbdc>
    2f08:	10803fcc 	andi	r2,r2,255
    2f0c:	1080201c 	xori	r2,r2,128
    2f10:	10bfe004 	addi	r2,r2,-128
    2f14:	00c00c04 	movi	r3,48
    2f18:	10c13626 	beq	r2,r3,33f4 <___vfprintf_internal_r+0xbdc>
    2f1c:	80ffffc5 	stb	r3,-1(r16)
    2f20:	d8c02817 	ldw	r3,160(sp)
    2f24:	80bfffc4 	addi	r2,r16,-1
    2f28:	1021883a 	mov	r16,r2
    2f2c:	1887c83a 	sub	r3,r3,r2
    2f30:	d8c02e15 	stw	r3,184(sp)
    2f34:	d8802e17 	ldw	r2,184(sp)
    2f38:	d9002917 	ldw	r4,164(sp)
    2f3c:	1100010e 	bge	r2,r4,2f44 <___vfprintf_internal_r+0x72c>
    2f40:	2005883a 	mov	r2,r4
    2f44:	d8802a15 	stw	r2,168(sp)
    2f48:	d8003215 	stw	zero,200(sp)
    2f4c:	e7003fcc 	andi	fp,fp,255
    2f50:	e700201c 	xori	fp,fp,128
    2f54:	e73fe004 	addi	fp,fp,-128
    2f58:	e0000326 	beq	fp,zero,2f68 <___vfprintf_internal_r+0x750>
    2f5c:	d8c02a17 	ldw	r3,168(sp)
    2f60:	18c00044 	addi	r3,r3,1
    2f64:	d8c02a15 	stw	r3,168(sp)
    2f68:	90c0008c 	andi	r3,r18,2
    2f6c:	d8c02b15 	stw	r3,172(sp)
    2f70:	18000326 	beq	r3,zero,2f80 <___vfprintf_internal_r+0x768>
    2f74:	d8c02a17 	ldw	r3,168(sp)
    2f78:	18c00084 	addi	r3,r3,2
    2f7c:	d8c02a15 	stw	r3,168(sp)
    2f80:	90c0210c 	andi	r3,r18,132
    2f84:	d8c03015 	stw	r3,192(sp)
    2f88:	1801a31e 	bne	r3,zero,3618 <___vfprintf_internal_r+0xe00>
    2f8c:	d9003117 	ldw	r4,196(sp)
    2f90:	d8c02a17 	ldw	r3,168(sp)
    2f94:	20e7c83a 	sub	r19,r4,r3
    2f98:	04c19f0e 	bge	zero,r19,3618 <___vfprintf_internal_r+0xe00>
    2f9c:	02400404 	movi	r9,16
    2fa0:	d8c02017 	ldw	r3,128(sp)
    2fa4:	d8801f17 	ldw	r2,124(sp)
    2fa8:	4cc50d0e 	bge	r9,r19,43e0 <___vfprintf_internal_r+0x1bc8>
    2fac:	01400074 	movhi	r5,1
    2fb0:	29461284 	addi	r5,r5,6218
    2fb4:	dc403b15 	stw	r17,236(sp)
    2fb8:	d9403515 	stw	r5,212(sp)
    2fbc:	9823883a 	mov	r17,r19
    2fc0:	482d883a 	mov	r22,r9
    2fc4:	9027883a 	mov	r19,r18
    2fc8:	070001c4 	movi	fp,7
    2fcc:	8025883a 	mov	r18,r16
    2fd0:	dc002c17 	ldw	r16,176(sp)
    2fd4:	00000306 	br	2fe4 <___vfprintf_internal_r+0x7cc>
    2fd8:	8c7ffc04 	addi	r17,r17,-16
    2fdc:	42000204 	addi	r8,r8,8
    2fe0:	b440130e 	bge	r22,r17,3030 <___vfprintf_internal_r+0x818>
    2fe4:	01000074 	movhi	r4,1
    2fe8:	18c00404 	addi	r3,r3,16
    2fec:	10800044 	addi	r2,r2,1
    2ff0:	21061284 	addi	r4,r4,6218
    2ff4:	41000015 	stw	r4,0(r8)
    2ff8:	45800115 	stw	r22,4(r8)
    2ffc:	d8c02015 	stw	r3,128(sp)
    3000:	d8801f15 	stw	r2,124(sp)
    3004:	e0bff40e 	bge	fp,r2,2fd8 <__alt_data_end+0xff002fd8>
    3008:	d9801e04 	addi	r6,sp,120
    300c:	b80b883a 	mov	r5,r23
    3010:	8009883a 	mov	r4,r16
    3014:	00095b40 	call	95b4 <__sprint_r>
    3018:	103f011e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    301c:	8c7ffc04 	addi	r17,r17,-16
    3020:	d8c02017 	ldw	r3,128(sp)
    3024:	d8801f17 	ldw	r2,124(sp)
    3028:	da000404 	addi	r8,sp,16
    302c:	b47fed16 	blt	r22,r17,2fe4 <__alt_data_end+0xff002fe4>
    3030:	9021883a 	mov	r16,r18
    3034:	9825883a 	mov	r18,r19
    3038:	8827883a 	mov	r19,r17
    303c:	dc403b17 	ldw	r17,236(sp)
    3040:	d9403517 	ldw	r5,212(sp)
    3044:	98c7883a 	add	r3,r19,r3
    3048:	10800044 	addi	r2,r2,1
    304c:	41400015 	stw	r5,0(r8)
    3050:	44c00115 	stw	r19,4(r8)
    3054:	d8c02015 	stw	r3,128(sp)
    3058:	d8801f15 	stw	r2,124(sp)
    305c:	010001c4 	movi	r4,7
    3060:	2082a316 	blt	r4,r2,3af0 <___vfprintf_internal_r+0x12d8>
    3064:	df002787 	ldb	fp,158(sp)
    3068:	42000204 	addi	r8,r8,8
    306c:	e0000c26 	beq	fp,zero,30a0 <___vfprintf_internal_r+0x888>
    3070:	d8801f17 	ldw	r2,124(sp)
    3074:	d9002784 	addi	r4,sp,158
    3078:	18c00044 	addi	r3,r3,1
    307c:	10800044 	addi	r2,r2,1
    3080:	41000015 	stw	r4,0(r8)
    3084:	01000044 	movi	r4,1
    3088:	41000115 	stw	r4,4(r8)
    308c:	d8c02015 	stw	r3,128(sp)
    3090:	d8801f15 	stw	r2,124(sp)
    3094:	010001c4 	movi	r4,7
    3098:	20823c16 	blt	r4,r2,398c <___vfprintf_internal_r+0x1174>
    309c:	42000204 	addi	r8,r8,8
    30a0:	d8802b17 	ldw	r2,172(sp)
    30a4:	10000c26 	beq	r2,zero,30d8 <___vfprintf_internal_r+0x8c0>
    30a8:	d8801f17 	ldw	r2,124(sp)
    30ac:	d9002704 	addi	r4,sp,156
    30b0:	18c00084 	addi	r3,r3,2
    30b4:	10800044 	addi	r2,r2,1
    30b8:	41000015 	stw	r4,0(r8)
    30bc:	01000084 	movi	r4,2
    30c0:	41000115 	stw	r4,4(r8)
    30c4:	d8c02015 	stw	r3,128(sp)
    30c8:	d8801f15 	stw	r2,124(sp)
    30cc:	010001c4 	movi	r4,7
    30d0:	20823616 	blt	r4,r2,39ac <___vfprintf_internal_r+0x1194>
    30d4:	42000204 	addi	r8,r8,8
    30d8:	d9003017 	ldw	r4,192(sp)
    30dc:	00802004 	movi	r2,128
    30e0:	20819926 	beq	r4,r2,3748 <___vfprintf_internal_r+0xf30>
    30e4:	d9402917 	ldw	r5,164(sp)
    30e8:	d8802e17 	ldw	r2,184(sp)
    30ec:	28adc83a 	sub	r22,r5,r2
    30f0:	0580310e 	bge	zero,r22,31b8 <___vfprintf_internal_r+0x9a0>
    30f4:	07000404 	movi	fp,16
    30f8:	d8801f17 	ldw	r2,124(sp)
    30fc:	e584140e 	bge	fp,r22,4150 <___vfprintf_internal_r+0x1938>
    3100:	01400074 	movhi	r5,1
    3104:	29460e84 	addi	r5,r5,6202
    3108:	dc402915 	stw	r17,164(sp)
    310c:	d9402b15 	stw	r5,172(sp)
    3110:	b023883a 	mov	r17,r22
    3114:	04c001c4 	movi	r19,7
    3118:	a82d883a 	mov	r22,r21
    311c:	902b883a 	mov	r21,r18
    3120:	8025883a 	mov	r18,r16
    3124:	dc002c17 	ldw	r16,176(sp)
    3128:	00000306 	br	3138 <___vfprintf_internal_r+0x920>
    312c:	8c7ffc04 	addi	r17,r17,-16
    3130:	42000204 	addi	r8,r8,8
    3134:	e440110e 	bge	fp,r17,317c <___vfprintf_internal_r+0x964>
    3138:	18c00404 	addi	r3,r3,16
    313c:	10800044 	addi	r2,r2,1
    3140:	45000015 	stw	r20,0(r8)
    3144:	47000115 	stw	fp,4(r8)
    3148:	d8c02015 	stw	r3,128(sp)
    314c:	d8801f15 	stw	r2,124(sp)
    3150:	98bff60e 	bge	r19,r2,312c <__alt_data_end+0xff00312c>
    3154:	d9801e04 	addi	r6,sp,120
    3158:	b80b883a 	mov	r5,r23
    315c:	8009883a 	mov	r4,r16
    3160:	00095b40 	call	95b4 <__sprint_r>
    3164:	103eae1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3168:	8c7ffc04 	addi	r17,r17,-16
    316c:	d8c02017 	ldw	r3,128(sp)
    3170:	d8801f17 	ldw	r2,124(sp)
    3174:	da000404 	addi	r8,sp,16
    3178:	e47fef16 	blt	fp,r17,3138 <__alt_data_end+0xff003138>
    317c:	9021883a 	mov	r16,r18
    3180:	a825883a 	mov	r18,r21
    3184:	b02b883a 	mov	r21,r22
    3188:	882d883a 	mov	r22,r17
    318c:	dc402917 	ldw	r17,164(sp)
    3190:	d9002b17 	ldw	r4,172(sp)
    3194:	1d87883a 	add	r3,r3,r22
    3198:	10800044 	addi	r2,r2,1
    319c:	41000015 	stw	r4,0(r8)
    31a0:	45800115 	stw	r22,4(r8)
    31a4:	d8c02015 	stw	r3,128(sp)
    31a8:	d8801f15 	stw	r2,124(sp)
    31ac:	010001c4 	movi	r4,7
    31b0:	2081ee16 	blt	r4,r2,396c <___vfprintf_internal_r+0x1154>
    31b4:	42000204 	addi	r8,r8,8
    31b8:	9080400c 	andi	r2,r18,256
    31bc:	1001181e 	bne	r2,zero,3620 <___vfprintf_internal_r+0xe08>
    31c0:	d9402e17 	ldw	r5,184(sp)
    31c4:	d8801f17 	ldw	r2,124(sp)
    31c8:	44000015 	stw	r16,0(r8)
    31cc:	1947883a 	add	r3,r3,r5
    31d0:	10800044 	addi	r2,r2,1
    31d4:	41400115 	stw	r5,4(r8)
    31d8:	d8c02015 	stw	r3,128(sp)
    31dc:	d8801f15 	stw	r2,124(sp)
    31e0:	010001c4 	movi	r4,7
    31e4:	2081d316 	blt	r4,r2,3934 <___vfprintf_internal_r+0x111c>
    31e8:	42000204 	addi	r8,r8,8
    31ec:	9480010c 	andi	r18,r18,4
    31f0:	90003226 	beq	r18,zero,32bc <___vfprintf_internal_r+0xaa4>
    31f4:	d9403117 	ldw	r5,196(sp)
    31f8:	d8802a17 	ldw	r2,168(sp)
    31fc:	28a1c83a 	sub	r16,r5,r2
    3200:	04002e0e 	bge	zero,r16,32bc <___vfprintf_internal_r+0xaa4>
    3204:	04400404 	movi	r17,16
    3208:	d8801f17 	ldw	r2,124(sp)
    320c:	8c04a20e 	bge	r17,r16,4498 <___vfprintf_internal_r+0x1c80>
    3210:	01400074 	movhi	r5,1
    3214:	29461284 	addi	r5,r5,6218
    3218:	d9403515 	stw	r5,212(sp)
    321c:	048001c4 	movi	r18,7
    3220:	dcc02c17 	ldw	r19,176(sp)
    3224:	00000306 	br	3234 <___vfprintf_internal_r+0xa1c>
    3228:	843ffc04 	addi	r16,r16,-16
    322c:	42000204 	addi	r8,r8,8
    3230:	8c00130e 	bge	r17,r16,3280 <___vfprintf_internal_r+0xa68>
    3234:	01000074 	movhi	r4,1
    3238:	18c00404 	addi	r3,r3,16
    323c:	10800044 	addi	r2,r2,1
    3240:	21061284 	addi	r4,r4,6218
    3244:	41000015 	stw	r4,0(r8)
    3248:	44400115 	stw	r17,4(r8)
    324c:	d8c02015 	stw	r3,128(sp)
    3250:	d8801f15 	stw	r2,124(sp)
    3254:	90bff40e 	bge	r18,r2,3228 <__alt_data_end+0xff003228>
    3258:	d9801e04 	addi	r6,sp,120
    325c:	b80b883a 	mov	r5,r23
    3260:	9809883a 	mov	r4,r19
    3264:	00095b40 	call	95b4 <__sprint_r>
    3268:	103e6d1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    326c:	843ffc04 	addi	r16,r16,-16
    3270:	d8c02017 	ldw	r3,128(sp)
    3274:	d8801f17 	ldw	r2,124(sp)
    3278:	da000404 	addi	r8,sp,16
    327c:	8c3fed16 	blt	r17,r16,3234 <__alt_data_end+0xff003234>
    3280:	d9403517 	ldw	r5,212(sp)
    3284:	1c07883a 	add	r3,r3,r16
    3288:	10800044 	addi	r2,r2,1
    328c:	41400015 	stw	r5,0(r8)
    3290:	44000115 	stw	r16,4(r8)
    3294:	d8c02015 	stw	r3,128(sp)
    3298:	d8801f15 	stw	r2,124(sp)
    329c:	010001c4 	movi	r4,7
    32a0:	2080060e 	bge	r4,r2,32bc <___vfprintf_internal_r+0xaa4>
    32a4:	d9002c17 	ldw	r4,176(sp)
    32a8:	d9801e04 	addi	r6,sp,120
    32ac:	b80b883a 	mov	r5,r23
    32b0:	00095b40 	call	95b4 <__sprint_r>
    32b4:	103e5a1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    32b8:	d8c02017 	ldw	r3,128(sp)
    32bc:	d8803117 	ldw	r2,196(sp)
    32c0:	d9002a17 	ldw	r4,168(sp)
    32c4:	1100010e 	bge	r2,r4,32cc <___vfprintf_internal_r+0xab4>
    32c8:	2005883a 	mov	r2,r4
    32cc:	d9402f17 	ldw	r5,188(sp)
    32d0:	288b883a 	add	r5,r5,r2
    32d4:	d9402f15 	stw	r5,188(sp)
    32d8:	18019e1e 	bne	r3,zero,3954 <___vfprintf_internal_r+0x113c>
    32dc:	a8800007 	ldb	r2,0(r21)
    32e0:	d8001f15 	stw	zero,124(sp)
    32e4:	da000404 	addi	r8,sp,16
    32e8:	103d851e 	bne	r2,zero,2900 <__alt_data_end+0xff002900>
    32ec:	a821883a 	mov	r16,r21
    32f0:	003d9b06 	br	2960 <__alt_data_end+0xff002960>
    32f4:	18c03fcc 	andi	r3,r3,255
    32f8:	1805c11e 	bne	r3,zero,4a00 <___vfprintf_internal_r+0x21e8>
    32fc:	94800414 	ori	r18,r18,16
    3300:	9080080c 	andi	r2,r18,32
    3304:	10020c26 	beq	r2,zero,3b38 <___vfprintf_internal_r+0x1320>
    3308:	d8802d17 	ldw	r2,180(sp)
    330c:	d9002917 	ldw	r4,164(sp)
    3310:	d8002785 	stb	zero,158(sp)
    3314:	10c00204 	addi	r3,r2,8
    3318:	14c00017 	ldw	r19,0(r2)
    331c:	15800117 	ldw	r22,4(r2)
    3320:	20040f16 	blt	r4,zero,4360 <___vfprintf_internal_r+0x1b48>
    3324:	013fdfc4 	movi	r4,-129
    3328:	9d84b03a 	or	r2,r19,r22
    332c:	d8c02d15 	stw	r3,180(sp)
    3330:	9124703a 	and	r18,r18,r4
    3334:	0039883a 	mov	fp,zero
    3338:	103e891e 	bne	r2,zero,2d60 <__alt_data_end+0xff002d60>
    333c:	d9002917 	ldw	r4,164(sp)
    3340:	2002c11e 	bne	r4,zero,3e48 <___vfprintf_internal_r+0x1630>
    3344:	d8002915 	stw	zero,164(sp)
    3348:	d8002e15 	stw	zero,184(sp)
    334c:	dc001e04 	addi	r16,sp,120
    3350:	003ef806 	br	2f34 <__alt_data_end+0xff002f34>
    3354:	18c03fcc 	andi	r3,r3,255
    3358:	18059d1e 	bne	r3,zero,49d0 <___vfprintf_internal_r+0x21b8>
    335c:	01400074 	movhi	r5,1
    3360:	29460204 	addi	r5,r5,6152
    3364:	d9403915 	stw	r5,228(sp)
    3368:	9080080c 	andi	r2,r18,32
    336c:	10005226 	beq	r2,zero,34b8 <___vfprintf_internal_r+0xca0>
    3370:	d8802d17 	ldw	r2,180(sp)
    3374:	14c00017 	ldw	r19,0(r2)
    3378:	15800117 	ldw	r22,4(r2)
    337c:	10800204 	addi	r2,r2,8
    3380:	d8802d15 	stw	r2,180(sp)
    3384:	9080004c 	andi	r2,r18,1
    3388:	10019026 	beq	r2,zero,39cc <___vfprintf_internal_r+0x11b4>
    338c:	9d84b03a 	or	r2,r19,r22
    3390:	10036926 	beq	r2,zero,4138 <___vfprintf_internal_r+0x1920>
    3394:	d8c02917 	ldw	r3,164(sp)
    3398:	00800c04 	movi	r2,48
    339c:	d8802705 	stb	r2,156(sp)
    33a0:	dc402745 	stb	r17,157(sp)
    33a4:	d8002785 	stb	zero,158(sp)
    33a8:	90800094 	ori	r2,r18,2
    33ac:	18045d16 	blt	r3,zero,4524 <___vfprintf_internal_r+0x1d0c>
    33b0:	00bfdfc4 	movi	r2,-129
    33b4:	90a4703a 	and	r18,r18,r2
    33b8:	94800094 	ori	r18,r18,2
    33bc:	0039883a 	mov	fp,zero
    33c0:	d9003917 	ldw	r4,228(sp)
    33c4:	dc001e04 	addi	r16,sp,120
    33c8:	988003cc 	andi	r2,r19,15
    33cc:	b006973a 	slli	r3,r22,28
    33d0:	2085883a 	add	r2,r4,r2
    33d4:	9826d13a 	srli	r19,r19,4
    33d8:	10800003 	ldbu	r2,0(r2)
    33dc:	b02cd13a 	srli	r22,r22,4
    33e0:	843fffc4 	addi	r16,r16,-1
    33e4:	1ce6b03a 	or	r19,r3,r19
    33e8:	80800005 	stb	r2,0(r16)
    33ec:	9d84b03a 	or	r2,r19,r22
    33f0:	103ff51e 	bne	r2,zero,33c8 <__alt_data_end+0xff0033c8>
    33f4:	d8c02817 	ldw	r3,160(sp)
    33f8:	1c07c83a 	sub	r3,r3,r16
    33fc:	d8c02e15 	stw	r3,184(sp)
    3400:	003ecc06 	br	2f34 <__alt_data_end+0xff002f34>
    3404:	18c03fcc 	andi	r3,r3,255
    3408:	183e9f26 	beq	r3,zero,2e88 <__alt_data_end+0xff002e88>
    340c:	d9c02785 	stb	r7,158(sp)
    3410:	003e9d06 	br	2e88 <__alt_data_end+0xff002e88>
    3414:	00c00044 	movi	r3,1
    3418:	01c00ac4 	movi	r7,43
    341c:	ac400007 	ldb	r17,0(r21)
    3420:	003d5e06 	br	299c <__alt_data_end+0xff00299c>
    3424:	94800814 	ori	r18,r18,32
    3428:	ac400007 	ldb	r17,0(r21)
    342c:	003d5b06 	br	299c <__alt_data_end+0xff00299c>
    3430:	d8c02d17 	ldw	r3,180(sp)
    3434:	d8002785 	stb	zero,158(sp)
    3438:	1c000017 	ldw	r16,0(r3)
    343c:	1cc00104 	addi	r19,r3,4
    3440:	80041926 	beq	r16,zero,44a8 <___vfprintf_internal_r+0x1c90>
    3444:	d9002917 	ldw	r4,164(sp)
    3448:	2003d016 	blt	r4,zero,438c <___vfprintf_internal_r+0x1b74>
    344c:	200d883a 	mov	r6,r4
    3450:	000b883a 	mov	r5,zero
    3454:	8009883a 	mov	r4,r16
    3458:	da003d15 	stw	r8,244(sp)
    345c:	000781c0 	call	781c <memchr>
    3460:	da003d17 	ldw	r8,244(sp)
    3464:	10045426 	beq	r2,zero,45b8 <___vfprintf_internal_r+0x1da0>
    3468:	1405c83a 	sub	r2,r2,r16
    346c:	d8802e15 	stw	r2,184(sp)
    3470:	1003cc16 	blt	r2,zero,43a4 <___vfprintf_internal_r+0x1b8c>
    3474:	df002783 	ldbu	fp,158(sp)
    3478:	d8802a15 	stw	r2,168(sp)
    347c:	dcc02d15 	stw	r19,180(sp)
    3480:	d8002915 	stw	zero,164(sp)
    3484:	d8003215 	stw	zero,200(sp)
    3488:	003eb006 	br	2f4c <__alt_data_end+0xff002f4c>
    348c:	18c03fcc 	andi	r3,r3,255
    3490:	183f9b26 	beq	r3,zero,3300 <__alt_data_end+0xff003300>
    3494:	d9c02785 	stb	r7,158(sp)
    3498:	003f9906 	br	3300 <__alt_data_end+0xff003300>
    349c:	18c03fcc 	andi	r3,r3,255
    34a0:	1805551e 	bne	r3,zero,49f8 <___vfprintf_internal_r+0x21e0>
    34a4:	01400074 	movhi	r5,1
    34a8:	29460704 	addi	r5,r5,6172
    34ac:	d9403915 	stw	r5,228(sp)
    34b0:	9080080c 	andi	r2,r18,32
    34b4:	103fae1e 	bne	r2,zero,3370 <__alt_data_end+0xff003370>
    34b8:	9080040c 	andi	r2,r18,16
    34bc:	1002de26 	beq	r2,zero,4038 <___vfprintf_internal_r+0x1820>
    34c0:	d8c02d17 	ldw	r3,180(sp)
    34c4:	002d883a 	mov	r22,zero
    34c8:	1cc00017 	ldw	r19,0(r3)
    34cc:	18c00104 	addi	r3,r3,4
    34d0:	d8c02d15 	stw	r3,180(sp)
    34d4:	003fab06 	br	3384 <__alt_data_end+0xff003384>
    34d8:	38803fcc 	andi	r2,r7,255
    34dc:	1080201c 	xori	r2,r2,128
    34e0:	10bfe004 	addi	r2,r2,-128
    34e4:	1002d21e 	bne	r2,zero,4030 <___vfprintf_internal_r+0x1818>
    34e8:	00c00044 	movi	r3,1
    34ec:	01c00804 	movi	r7,32
    34f0:	ac400007 	ldb	r17,0(r21)
    34f4:	003d2906 	br	299c <__alt_data_end+0xff00299c>
    34f8:	94800054 	ori	r18,r18,1
    34fc:	ac400007 	ldb	r17,0(r21)
    3500:	003d2606 	br	299c <__alt_data_end+0xff00299c>
    3504:	18c03fcc 	andi	r3,r3,255
    3508:	183e0526 	beq	r3,zero,2d20 <__alt_data_end+0xff002d20>
    350c:	d9c02785 	stb	r7,158(sp)
    3510:	003e0306 	br	2d20 <__alt_data_end+0xff002d20>
    3514:	94801014 	ori	r18,r18,64
    3518:	ac400007 	ldb	r17,0(r21)
    351c:	003d1f06 	br	299c <__alt_data_end+0xff00299c>
    3520:	ac400007 	ldb	r17,0(r21)
    3524:	8a438726 	beq	r17,r9,4344 <___vfprintf_internal_r+0x1b2c>
    3528:	94800414 	ori	r18,r18,16
    352c:	003d1b06 	br	299c <__alt_data_end+0xff00299c>
    3530:	18c03fcc 	andi	r3,r3,255
    3534:	1805341e 	bne	r3,zero,4a08 <___vfprintf_internal_r+0x21f0>
    3538:	9080080c 	andi	r2,r18,32
    353c:	1002cd26 	beq	r2,zero,4074 <___vfprintf_internal_r+0x185c>
    3540:	d9402d17 	ldw	r5,180(sp)
    3544:	d9002f17 	ldw	r4,188(sp)
    3548:	28800017 	ldw	r2,0(r5)
    354c:	2007d7fa 	srai	r3,r4,31
    3550:	29400104 	addi	r5,r5,4
    3554:	d9402d15 	stw	r5,180(sp)
    3558:	11000015 	stw	r4,0(r2)
    355c:	10c00115 	stw	r3,4(r2)
    3560:	003ce506 	br	28f8 <__alt_data_end+0xff0028f8>
    3564:	d8c02d17 	ldw	r3,180(sp)
    3568:	d9002d17 	ldw	r4,180(sp)
    356c:	d8002785 	stb	zero,158(sp)
    3570:	18800017 	ldw	r2,0(r3)
    3574:	21000104 	addi	r4,r4,4
    3578:	00c00044 	movi	r3,1
    357c:	d8c02a15 	stw	r3,168(sp)
    3580:	d8801405 	stb	r2,80(sp)
    3584:	d9002d15 	stw	r4,180(sp)
    3588:	d8c02e15 	stw	r3,184(sp)
    358c:	d8002915 	stw	zero,164(sp)
    3590:	d8003215 	stw	zero,200(sp)
    3594:	dc001404 	addi	r16,sp,80
    3598:	0039883a 	mov	fp,zero
    359c:	003e7206 	br	2f68 <__alt_data_end+0xff002f68>
    35a0:	01000074 	movhi	r4,1
    35a4:	21060704 	addi	r4,r4,6172
    35a8:	0039883a 	mov	fp,zero
    35ac:	d9003915 	stw	r4,228(sp)
    35b0:	04401e04 	movi	r17,120
    35b4:	003f8206 	br	33c0 <__alt_data_end+0xff0033c0>
    35b8:	18c03fcc 	andi	r3,r3,255
    35bc:	1805061e 	bne	r3,zero,49d8 <___vfprintf_internal_r+0x21c0>
    35c0:	883d9126 	beq	r17,zero,2c08 <__alt_data_end+0xff002c08>
    35c4:	00c00044 	movi	r3,1
    35c8:	d8c02a15 	stw	r3,168(sp)
    35cc:	dc401405 	stb	r17,80(sp)
    35d0:	d8002785 	stb	zero,158(sp)
    35d4:	003fec06 	br	3588 <__alt_data_end+0xff003588>
    35d8:	01400074 	movhi	r5,1
    35dc:	29460704 	addi	r5,r5,6172
    35e0:	d9403915 	stw	r5,228(sp)
    35e4:	d8c02d15 	stw	r3,180(sp)
    35e8:	1025883a 	mov	r18,r2
    35ec:	04401e04 	movi	r17,120
    35f0:	9d84b03a 	or	r2,r19,r22
    35f4:	1000fc1e 	bne	r2,zero,39e8 <___vfprintf_internal_r+0x11d0>
    35f8:	0039883a 	mov	fp,zero
    35fc:	00800084 	movi	r2,2
    3600:	10803fcc 	andi	r2,r2,255
    3604:	00c00044 	movi	r3,1
    3608:	10c20f26 	beq	r2,r3,3e48 <___vfprintf_internal_r+0x1630>
    360c:	00c00084 	movi	r3,2
    3610:	10fd6326 	beq	r2,r3,2ba0 <__alt_data_end+0xff002ba0>
    3614:	003e2d06 	br	2ecc <__alt_data_end+0xff002ecc>
    3618:	d8c02017 	ldw	r3,128(sp)
    361c:	003e9306 	br	306c <__alt_data_end+0xff00306c>
    3620:	00801944 	movi	r2,101
    3624:	14407e0e 	bge	r2,r17,3820 <___vfprintf_internal_r+0x1008>
    3628:	d9003617 	ldw	r4,216(sp)
    362c:	d9403817 	ldw	r5,224(sp)
    3630:	000d883a 	mov	r6,zero
    3634:	000f883a 	mov	r7,zero
    3638:	d8c03c15 	stw	r3,240(sp)
    363c:	da003d15 	stw	r8,244(sp)
    3640:	000d22c0 	call	d22c <__eqdf2>
    3644:	d8c03c17 	ldw	r3,240(sp)
    3648:	da003d17 	ldw	r8,244(sp)
    364c:	1000f71e 	bne	r2,zero,3a2c <___vfprintf_internal_r+0x1214>
    3650:	d8801f17 	ldw	r2,124(sp)
    3654:	01000074 	movhi	r4,1
    3658:	21060e04 	addi	r4,r4,6200
    365c:	18c00044 	addi	r3,r3,1
    3660:	10800044 	addi	r2,r2,1
    3664:	41000015 	stw	r4,0(r8)
    3668:	01000044 	movi	r4,1
    366c:	41000115 	stw	r4,4(r8)
    3670:	d8c02015 	stw	r3,128(sp)
    3674:	d8801f15 	stw	r2,124(sp)
    3678:	010001c4 	movi	r4,7
    367c:	2082b816 	blt	r4,r2,4160 <___vfprintf_internal_r+0x1948>
    3680:	42000204 	addi	r8,r8,8
    3684:	d8802617 	ldw	r2,152(sp)
    3688:	d9403317 	ldw	r5,204(sp)
    368c:	11400216 	blt	r2,r5,3698 <___vfprintf_internal_r+0xe80>
    3690:	9080004c 	andi	r2,r18,1
    3694:	103ed526 	beq	r2,zero,31ec <__alt_data_end+0xff0031ec>
    3698:	d8803717 	ldw	r2,220(sp)
    369c:	d9003417 	ldw	r4,208(sp)
    36a0:	d9403717 	ldw	r5,220(sp)
    36a4:	1887883a 	add	r3,r3,r2
    36a8:	d8801f17 	ldw	r2,124(sp)
    36ac:	41000015 	stw	r4,0(r8)
    36b0:	41400115 	stw	r5,4(r8)
    36b4:	10800044 	addi	r2,r2,1
    36b8:	d8c02015 	stw	r3,128(sp)
    36bc:	d8801f15 	stw	r2,124(sp)
    36c0:	010001c4 	movi	r4,7
    36c4:	20832916 	blt	r4,r2,436c <___vfprintf_internal_r+0x1b54>
    36c8:	42000204 	addi	r8,r8,8
    36cc:	d8803317 	ldw	r2,204(sp)
    36d0:	143fffc4 	addi	r16,r2,-1
    36d4:	043ec50e 	bge	zero,r16,31ec <__alt_data_end+0xff0031ec>
    36d8:	04400404 	movi	r17,16
    36dc:	d8801f17 	ldw	r2,124(sp)
    36e0:	8c00880e 	bge	r17,r16,3904 <___vfprintf_internal_r+0x10ec>
    36e4:	01400074 	movhi	r5,1
    36e8:	29460e84 	addi	r5,r5,6202
    36ec:	d9402b15 	stw	r5,172(sp)
    36f0:	058001c4 	movi	r22,7
    36f4:	dcc02c17 	ldw	r19,176(sp)
    36f8:	00000306 	br	3708 <___vfprintf_internal_r+0xef0>
    36fc:	42000204 	addi	r8,r8,8
    3700:	843ffc04 	addi	r16,r16,-16
    3704:	8c00820e 	bge	r17,r16,3910 <___vfprintf_internal_r+0x10f8>
    3708:	18c00404 	addi	r3,r3,16
    370c:	10800044 	addi	r2,r2,1
    3710:	45000015 	stw	r20,0(r8)
    3714:	44400115 	stw	r17,4(r8)
    3718:	d8c02015 	stw	r3,128(sp)
    371c:	d8801f15 	stw	r2,124(sp)
    3720:	b0bff60e 	bge	r22,r2,36fc <__alt_data_end+0xff0036fc>
    3724:	d9801e04 	addi	r6,sp,120
    3728:	b80b883a 	mov	r5,r23
    372c:	9809883a 	mov	r4,r19
    3730:	00095b40 	call	95b4 <__sprint_r>
    3734:	103d3a1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3738:	d8c02017 	ldw	r3,128(sp)
    373c:	d8801f17 	ldw	r2,124(sp)
    3740:	da000404 	addi	r8,sp,16
    3744:	003fee06 	br	3700 <__alt_data_end+0xff003700>
    3748:	d9403117 	ldw	r5,196(sp)
    374c:	d8802a17 	ldw	r2,168(sp)
    3750:	28adc83a 	sub	r22,r5,r2
    3754:	05be630e 	bge	zero,r22,30e4 <__alt_data_end+0xff0030e4>
    3758:	07000404 	movi	fp,16
    375c:	d8801f17 	ldw	r2,124(sp)
    3760:	e5838f0e 	bge	fp,r22,45a0 <___vfprintf_internal_r+0x1d88>
    3764:	01400074 	movhi	r5,1
    3768:	29460e84 	addi	r5,r5,6202
    376c:	dc403015 	stw	r17,192(sp)
    3770:	d9402b15 	stw	r5,172(sp)
    3774:	b023883a 	mov	r17,r22
    3778:	04c001c4 	movi	r19,7
    377c:	a82d883a 	mov	r22,r21
    3780:	902b883a 	mov	r21,r18
    3784:	8025883a 	mov	r18,r16
    3788:	dc002c17 	ldw	r16,176(sp)
    378c:	00000306 	br	379c <___vfprintf_internal_r+0xf84>
    3790:	8c7ffc04 	addi	r17,r17,-16
    3794:	42000204 	addi	r8,r8,8
    3798:	e440110e 	bge	fp,r17,37e0 <___vfprintf_internal_r+0xfc8>
    379c:	18c00404 	addi	r3,r3,16
    37a0:	10800044 	addi	r2,r2,1
    37a4:	45000015 	stw	r20,0(r8)
    37a8:	47000115 	stw	fp,4(r8)
    37ac:	d8c02015 	stw	r3,128(sp)
    37b0:	d8801f15 	stw	r2,124(sp)
    37b4:	98bff60e 	bge	r19,r2,3790 <__alt_data_end+0xff003790>
    37b8:	d9801e04 	addi	r6,sp,120
    37bc:	b80b883a 	mov	r5,r23
    37c0:	8009883a 	mov	r4,r16
    37c4:	00095b40 	call	95b4 <__sprint_r>
    37c8:	103d151e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    37cc:	8c7ffc04 	addi	r17,r17,-16
    37d0:	d8c02017 	ldw	r3,128(sp)
    37d4:	d8801f17 	ldw	r2,124(sp)
    37d8:	da000404 	addi	r8,sp,16
    37dc:	e47fef16 	blt	fp,r17,379c <__alt_data_end+0xff00379c>
    37e0:	9021883a 	mov	r16,r18
    37e4:	a825883a 	mov	r18,r21
    37e8:	b02b883a 	mov	r21,r22
    37ec:	882d883a 	mov	r22,r17
    37f0:	dc403017 	ldw	r17,192(sp)
    37f4:	d9002b17 	ldw	r4,172(sp)
    37f8:	1d87883a 	add	r3,r3,r22
    37fc:	10800044 	addi	r2,r2,1
    3800:	41000015 	stw	r4,0(r8)
    3804:	45800115 	stw	r22,4(r8)
    3808:	d8c02015 	stw	r3,128(sp)
    380c:	d8801f15 	stw	r2,124(sp)
    3810:	010001c4 	movi	r4,7
    3814:	20818e16 	blt	r4,r2,3e50 <___vfprintf_internal_r+0x1638>
    3818:	42000204 	addi	r8,r8,8
    381c:	003e3106 	br	30e4 <__alt_data_end+0xff0030e4>
    3820:	d9403317 	ldw	r5,204(sp)
    3824:	00800044 	movi	r2,1
    3828:	18c00044 	addi	r3,r3,1
    382c:	1141530e 	bge	r2,r5,3d7c <___vfprintf_internal_r+0x1564>
    3830:	dc401f17 	ldw	r17,124(sp)
    3834:	00800044 	movi	r2,1
    3838:	40800115 	stw	r2,4(r8)
    383c:	8c400044 	addi	r17,r17,1
    3840:	44000015 	stw	r16,0(r8)
    3844:	d8c02015 	stw	r3,128(sp)
    3848:	dc401f15 	stw	r17,124(sp)
    384c:	008001c4 	movi	r2,7
    3850:	14416b16 	blt	r2,r17,3e00 <___vfprintf_internal_r+0x15e8>
    3854:	42000204 	addi	r8,r8,8
    3858:	d8803717 	ldw	r2,220(sp)
    385c:	d9003417 	ldw	r4,208(sp)
    3860:	8c400044 	addi	r17,r17,1
    3864:	10c7883a 	add	r3,r2,r3
    3868:	40800115 	stw	r2,4(r8)
    386c:	41000015 	stw	r4,0(r8)
    3870:	d8c02015 	stw	r3,128(sp)
    3874:	dc401f15 	stw	r17,124(sp)
    3878:	008001c4 	movi	r2,7
    387c:	14416916 	blt	r2,r17,3e24 <___vfprintf_internal_r+0x160c>
    3880:	45800204 	addi	r22,r8,8
    3884:	d9003617 	ldw	r4,216(sp)
    3888:	d9403817 	ldw	r5,224(sp)
    388c:	000d883a 	mov	r6,zero
    3890:	000f883a 	mov	r7,zero
    3894:	d8c03c15 	stw	r3,240(sp)
    3898:	000d22c0 	call	d22c <__eqdf2>
    389c:	d8c03c17 	ldw	r3,240(sp)
    38a0:	1000bc26 	beq	r2,zero,3b94 <___vfprintf_internal_r+0x137c>
    38a4:	d9403317 	ldw	r5,204(sp)
    38a8:	84000044 	addi	r16,r16,1
    38ac:	8c400044 	addi	r17,r17,1
    38b0:	28bfffc4 	addi	r2,r5,-1
    38b4:	1887883a 	add	r3,r3,r2
    38b8:	b0800115 	stw	r2,4(r22)
    38bc:	b4000015 	stw	r16,0(r22)
    38c0:	d8c02015 	stw	r3,128(sp)
    38c4:	dc401f15 	stw	r17,124(sp)
    38c8:	008001c4 	movi	r2,7
    38cc:	14414316 	blt	r2,r17,3ddc <___vfprintf_internal_r+0x15c4>
    38d0:	b5800204 	addi	r22,r22,8
    38d4:	d9003a17 	ldw	r4,232(sp)
    38d8:	df0022c4 	addi	fp,sp,139
    38dc:	8c400044 	addi	r17,r17,1
    38e0:	20c7883a 	add	r3,r4,r3
    38e4:	b7000015 	stw	fp,0(r22)
    38e8:	b1000115 	stw	r4,4(r22)
    38ec:	d8c02015 	stw	r3,128(sp)
    38f0:	dc401f15 	stw	r17,124(sp)
    38f4:	008001c4 	movi	r2,7
    38f8:	14400e16 	blt	r2,r17,3934 <___vfprintf_internal_r+0x111c>
    38fc:	b2000204 	addi	r8,r22,8
    3900:	003e3a06 	br	31ec <__alt_data_end+0xff0031ec>
    3904:	01000074 	movhi	r4,1
    3908:	21060e84 	addi	r4,r4,6202
    390c:	d9002b15 	stw	r4,172(sp)
    3910:	d9002b17 	ldw	r4,172(sp)
    3914:	1c07883a 	add	r3,r3,r16
    3918:	44000115 	stw	r16,4(r8)
    391c:	41000015 	stw	r4,0(r8)
    3920:	10800044 	addi	r2,r2,1
    3924:	d8c02015 	stw	r3,128(sp)
    3928:	d8801f15 	stw	r2,124(sp)
    392c:	010001c4 	movi	r4,7
    3930:	20be2d0e 	bge	r4,r2,31e8 <__alt_data_end+0xff0031e8>
    3934:	d9002c17 	ldw	r4,176(sp)
    3938:	d9801e04 	addi	r6,sp,120
    393c:	b80b883a 	mov	r5,r23
    3940:	00095b40 	call	95b4 <__sprint_r>
    3944:	103cb61e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3948:	d8c02017 	ldw	r3,128(sp)
    394c:	da000404 	addi	r8,sp,16
    3950:	003e2606 	br	31ec <__alt_data_end+0xff0031ec>
    3954:	d9002c17 	ldw	r4,176(sp)
    3958:	d9801e04 	addi	r6,sp,120
    395c:	b80b883a 	mov	r5,r23
    3960:	00095b40 	call	95b4 <__sprint_r>
    3964:	103e5d26 	beq	r2,zero,32dc <__alt_data_end+0xff0032dc>
    3968:	003cad06 	br	2c20 <__alt_data_end+0xff002c20>
    396c:	d9002c17 	ldw	r4,176(sp)
    3970:	d9801e04 	addi	r6,sp,120
    3974:	b80b883a 	mov	r5,r23
    3978:	00095b40 	call	95b4 <__sprint_r>
    397c:	103ca81e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3980:	d8c02017 	ldw	r3,128(sp)
    3984:	da000404 	addi	r8,sp,16
    3988:	003e0b06 	br	31b8 <__alt_data_end+0xff0031b8>
    398c:	d9002c17 	ldw	r4,176(sp)
    3990:	d9801e04 	addi	r6,sp,120
    3994:	b80b883a 	mov	r5,r23
    3998:	00095b40 	call	95b4 <__sprint_r>
    399c:	103ca01e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    39a0:	d8c02017 	ldw	r3,128(sp)
    39a4:	da000404 	addi	r8,sp,16
    39a8:	003dbd06 	br	30a0 <__alt_data_end+0xff0030a0>
    39ac:	d9002c17 	ldw	r4,176(sp)
    39b0:	d9801e04 	addi	r6,sp,120
    39b4:	b80b883a 	mov	r5,r23
    39b8:	00095b40 	call	95b4 <__sprint_r>
    39bc:	103c981e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    39c0:	d8c02017 	ldw	r3,128(sp)
    39c4:	da000404 	addi	r8,sp,16
    39c8:	003dc306 	br	30d8 <__alt_data_end+0xff0030d8>
    39cc:	d8802917 	ldw	r2,164(sp)
    39d0:	d8002785 	stb	zero,158(sp)
    39d4:	103f0616 	blt	r2,zero,35f0 <__alt_data_end+0xff0035f0>
    39d8:	00ffdfc4 	movi	r3,-129
    39dc:	9d84b03a 	or	r2,r19,r22
    39e0:	90e4703a 	and	r18,r18,r3
    39e4:	103c6b26 	beq	r2,zero,2b94 <__alt_data_end+0xff002b94>
    39e8:	0039883a 	mov	fp,zero
    39ec:	003e7406 	br	33c0 <__alt_data_end+0xff0033c0>
    39f0:	9080040c 	andi	r2,r18,16
    39f4:	1001b326 	beq	r2,zero,40c4 <___vfprintf_internal_r+0x18ac>
    39f8:	d9002d17 	ldw	r4,180(sp)
    39fc:	d9402917 	ldw	r5,164(sp)
    3a00:	d8002785 	stb	zero,158(sp)
    3a04:	20800104 	addi	r2,r4,4
    3a08:	24c00017 	ldw	r19,0(r4)
    3a0c:	002d883a 	mov	r22,zero
    3a10:	2801b516 	blt	r5,zero,40e8 <___vfprintf_internal_r+0x18d0>
    3a14:	00ffdfc4 	movi	r3,-129
    3a18:	d8802d15 	stw	r2,180(sp)
    3a1c:	90e4703a 	and	r18,r18,r3
    3a20:	983d2726 	beq	r19,zero,2ec0 <__alt_data_end+0xff002ec0>
    3a24:	0039883a 	mov	fp,zero
    3a28:	003d2a06 	br	2ed4 <__alt_data_end+0xff002ed4>
    3a2c:	dc402617 	ldw	r17,152(sp)
    3a30:	0441d30e 	bge	zero,r17,4180 <___vfprintf_internal_r+0x1968>
    3a34:	dc403217 	ldw	r17,200(sp)
    3a38:	d8803317 	ldw	r2,204(sp)
    3a3c:	1440010e 	bge	r2,r17,3a44 <___vfprintf_internal_r+0x122c>
    3a40:	1023883a 	mov	r17,r2
    3a44:	04400a0e 	bge	zero,r17,3a70 <___vfprintf_internal_r+0x1258>
    3a48:	d8801f17 	ldw	r2,124(sp)
    3a4c:	1c47883a 	add	r3,r3,r17
    3a50:	44000015 	stw	r16,0(r8)
    3a54:	10800044 	addi	r2,r2,1
    3a58:	44400115 	stw	r17,4(r8)
    3a5c:	d8c02015 	stw	r3,128(sp)
    3a60:	d8801f15 	stw	r2,124(sp)
    3a64:	010001c4 	movi	r4,7
    3a68:	20826516 	blt	r4,r2,4400 <___vfprintf_internal_r+0x1be8>
    3a6c:	42000204 	addi	r8,r8,8
    3a70:	88026116 	blt	r17,zero,43f8 <___vfprintf_internal_r+0x1be0>
    3a74:	d9003217 	ldw	r4,200(sp)
    3a78:	2463c83a 	sub	r17,r4,r17
    3a7c:	04407b0e 	bge	zero,r17,3c6c <___vfprintf_internal_r+0x1454>
    3a80:	05800404 	movi	r22,16
    3a84:	d8801f17 	ldw	r2,124(sp)
    3a88:	b4419d0e 	bge	r22,r17,4100 <___vfprintf_internal_r+0x18e8>
    3a8c:	01000074 	movhi	r4,1
    3a90:	21060e84 	addi	r4,r4,6202
    3a94:	d9002b15 	stw	r4,172(sp)
    3a98:	070001c4 	movi	fp,7
    3a9c:	dcc02c17 	ldw	r19,176(sp)
    3aa0:	00000306 	br	3ab0 <___vfprintf_internal_r+0x1298>
    3aa4:	42000204 	addi	r8,r8,8
    3aa8:	8c7ffc04 	addi	r17,r17,-16
    3aac:	b441970e 	bge	r22,r17,410c <___vfprintf_internal_r+0x18f4>
    3ab0:	18c00404 	addi	r3,r3,16
    3ab4:	10800044 	addi	r2,r2,1
    3ab8:	45000015 	stw	r20,0(r8)
    3abc:	45800115 	stw	r22,4(r8)
    3ac0:	d8c02015 	stw	r3,128(sp)
    3ac4:	d8801f15 	stw	r2,124(sp)
    3ac8:	e0bff60e 	bge	fp,r2,3aa4 <__alt_data_end+0xff003aa4>
    3acc:	d9801e04 	addi	r6,sp,120
    3ad0:	b80b883a 	mov	r5,r23
    3ad4:	9809883a 	mov	r4,r19
    3ad8:	00095b40 	call	95b4 <__sprint_r>
    3adc:	103c501e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3ae0:	d8c02017 	ldw	r3,128(sp)
    3ae4:	d8801f17 	ldw	r2,124(sp)
    3ae8:	da000404 	addi	r8,sp,16
    3aec:	003fee06 	br	3aa8 <__alt_data_end+0xff003aa8>
    3af0:	d9002c17 	ldw	r4,176(sp)
    3af4:	d9801e04 	addi	r6,sp,120
    3af8:	b80b883a 	mov	r5,r23
    3afc:	00095b40 	call	95b4 <__sprint_r>
    3b00:	103c471e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3b04:	d8c02017 	ldw	r3,128(sp)
    3b08:	df002787 	ldb	fp,158(sp)
    3b0c:	da000404 	addi	r8,sp,16
    3b10:	003d5606 	br	306c <__alt_data_end+0xff00306c>
    3b14:	9080040c 	andi	r2,r18,16
    3b18:	10016126 	beq	r2,zero,40a0 <___vfprintf_internal_r+0x1888>
    3b1c:	d8802d17 	ldw	r2,180(sp)
    3b20:	14c00017 	ldw	r19,0(r2)
    3b24:	10800104 	addi	r2,r2,4
    3b28:	d8802d15 	stw	r2,180(sp)
    3b2c:	982dd7fa 	srai	r22,r19,31
    3b30:	b005883a 	mov	r2,r22
    3b34:	003c8206 	br	2d40 <__alt_data_end+0xff002d40>
    3b38:	9080040c 	andi	r2,r18,16
    3b3c:	10003526 	beq	r2,zero,3c14 <___vfprintf_internal_r+0x13fc>
    3b40:	d9402d17 	ldw	r5,180(sp)
    3b44:	d8c02917 	ldw	r3,164(sp)
    3b48:	d8002785 	stb	zero,158(sp)
    3b4c:	28800104 	addi	r2,r5,4
    3b50:	2cc00017 	ldw	r19,0(r5)
    3b54:	002d883a 	mov	r22,zero
    3b58:	18003716 	blt	r3,zero,3c38 <___vfprintf_internal_r+0x1420>
    3b5c:	00ffdfc4 	movi	r3,-129
    3b60:	d8802d15 	stw	r2,180(sp)
    3b64:	90e4703a 	and	r18,r18,r3
    3b68:	0039883a 	mov	fp,zero
    3b6c:	983df326 	beq	r19,zero,333c <__alt_data_end+0xff00333c>
    3b70:	00800244 	movi	r2,9
    3b74:	14fc7b36 	bltu	r2,r19,2d64 <__alt_data_end+0xff002d64>
    3b78:	d8c02817 	ldw	r3,160(sp)
    3b7c:	dc001dc4 	addi	r16,sp,119
    3b80:	9cc00c04 	addi	r19,r19,48
    3b84:	1c07c83a 	sub	r3,r3,r16
    3b88:	dcc01dc5 	stb	r19,119(sp)
    3b8c:	d8c02e15 	stw	r3,184(sp)
    3b90:	003ce806 	br	2f34 <__alt_data_end+0xff002f34>
    3b94:	d8803317 	ldw	r2,204(sp)
    3b98:	143fffc4 	addi	r16,r2,-1
    3b9c:	043f4d0e 	bge	zero,r16,38d4 <__alt_data_end+0xff0038d4>
    3ba0:	07000404 	movi	fp,16
    3ba4:	e400810e 	bge	fp,r16,3dac <___vfprintf_internal_r+0x1594>
    3ba8:	01400074 	movhi	r5,1
    3bac:	29460e84 	addi	r5,r5,6202
    3bb0:	d9402b15 	stw	r5,172(sp)
    3bb4:	01c001c4 	movi	r7,7
    3bb8:	dcc02c17 	ldw	r19,176(sp)
    3bbc:	00000306 	br	3bcc <___vfprintf_internal_r+0x13b4>
    3bc0:	b5800204 	addi	r22,r22,8
    3bc4:	843ffc04 	addi	r16,r16,-16
    3bc8:	e4007b0e 	bge	fp,r16,3db8 <___vfprintf_internal_r+0x15a0>
    3bcc:	18c00404 	addi	r3,r3,16
    3bd0:	8c400044 	addi	r17,r17,1
    3bd4:	b5000015 	stw	r20,0(r22)
    3bd8:	b7000115 	stw	fp,4(r22)
    3bdc:	d8c02015 	stw	r3,128(sp)
    3be0:	dc401f15 	stw	r17,124(sp)
    3be4:	3c7ff60e 	bge	r7,r17,3bc0 <__alt_data_end+0xff003bc0>
    3be8:	d9801e04 	addi	r6,sp,120
    3bec:	b80b883a 	mov	r5,r23
    3bf0:	9809883a 	mov	r4,r19
    3bf4:	d9c03c15 	stw	r7,240(sp)
    3bf8:	00095b40 	call	95b4 <__sprint_r>
    3bfc:	d9c03c17 	ldw	r7,240(sp)
    3c00:	103c071e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3c04:	d8c02017 	ldw	r3,128(sp)
    3c08:	dc401f17 	ldw	r17,124(sp)
    3c0c:	dd800404 	addi	r22,sp,16
    3c10:	003fec06 	br	3bc4 <__alt_data_end+0xff003bc4>
    3c14:	9080100c 	andi	r2,r18,64
    3c18:	d8002785 	stb	zero,158(sp)
    3c1c:	10010e26 	beq	r2,zero,4058 <___vfprintf_internal_r+0x1840>
    3c20:	d9002d17 	ldw	r4,180(sp)
    3c24:	d9402917 	ldw	r5,164(sp)
    3c28:	002d883a 	mov	r22,zero
    3c2c:	20800104 	addi	r2,r4,4
    3c30:	24c0000b 	ldhu	r19,0(r4)
    3c34:	283fc90e 	bge	r5,zero,3b5c <__alt_data_end+0xff003b5c>
    3c38:	d8802d15 	stw	r2,180(sp)
    3c3c:	0039883a 	mov	fp,zero
    3c40:	9d84b03a 	or	r2,r19,r22
    3c44:	103c461e 	bne	r2,zero,2d60 <__alt_data_end+0xff002d60>
    3c48:	00800044 	movi	r2,1
    3c4c:	003e6c06 	br	3600 <__alt_data_end+0xff003600>
    3c50:	d9002c17 	ldw	r4,176(sp)
    3c54:	d9801e04 	addi	r6,sp,120
    3c58:	b80b883a 	mov	r5,r23
    3c5c:	00095b40 	call	95b4 <__sprint_r>
    3c60:	103bef1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3c64:	d8c02017 	ldw	r3,128(sp)
    3c68:	da000404 	addi	r8,sp,16
    3c6c:	d9003217 	ldw	r4,200(sp)
    3c70:	d8802617 	ldw	r2,152(sp)
    3c74:	d9403317 	ldw	r5,204(sp)
    3c78:	8123883a 	add	r17,r16,r4
    3c7c:	11400216 	blt	r2,r5,3c88 <___vfprintf_internal_r+0x1470>
    3c80:	9100004c 	andi	r4,r18,1
    3c84:	20000d26 	beq	r4,zero,3cbc <___vfprintf_internal_r+0x14a4>
    3c88:	d9003717 	ldw	r4,220(sp)
    3c8c:	d9403417 	ldw	r5,208(sp)
    3c90:	1907883a 	add	r3,r3,r4
    3c94:	d9001f17 	ldw	r4,124(sp)
    3c98:	41400015 	stw	r5,0(r8)
    3c9c:	d9403717 	ldw	r5,220(sp)
    3ca0:	21000044 	addi	r4,r4,1
    3ca4:	d8c02015 	stw	r3,128(sp)
    3ca8:	41400115 	stw	r5,4(r8)
    3cac:	d9001f15 	stw	r4,124(sp)
    3cb0:	014001c4 	movi	r5,7
    3cb4:	2901e816 	blt	r5,r4,4458 <___vfprintf_internal_r+0x1c40>
    3cb8:	42000204 	addi	r8,r8,8
    3cbc:	d9003317 	ldw	r4,204(sp)
    3cc0:	8121883a 	add	r16,r16,r4
    3cc4:	2085c83a 	sub	r2,r4,r2
    3cc8:	8461c83a 	sub	r16,r16,r17
    3ccc:	1400010e 	bge	r2,r16,3cd4 <___vfprintf_internal_r+0x14bc>
    3cd0:	1021883a 	mov	r16,r2
    3cd4:	04000a0e 	bge	zero,r16,3d00 <___vfprintf_internal_r+0x14e8>
    3cd8:	d9001f17 	ldw	r4,124(sp)
    3cdc:	1c07883a 	add	r3,r3,r16
    3ce0:	44400015 	stw	r17,0(r8)
    3ce4:	21000044 	addi	r4,r4,1
    3ce8:	44000115 	stw	r16,4(r8)
    3cec:	d8c02015 	stw	r3,128(sp)
    3cf0:	d9001f15 	stw	r4,124(sp)
    3cf4:	014001c4 	movi	r5,7
    3cf8:	2901fb16 	blt	r5,r4,44e8 <___vfprintf_internal_r+0x1cd0>
    3cfc:	42000204 	addi	r8,r8,8
    3d00:	8001f716 	blt	r16,zero,44e0 <___vfprintf_internal_r+0x1cc8>
    3d04:	1421c83a 	sub	r16,r2,r16
    3d08:	043d380e 	bge	zero,r16,31ec <__alt_data_end+0xff0031ec>
    3d0c:	04400404 	movi	r17,16
    3d10:	d8801f17 	ldw	r2,124(sp)
    3d14:	8c3efb0e 	bge	r17,r16,3904 <__alt_data_end+0xff003904>
    3d18:	01400074 	movhi	r5,1
    3d1c:	29460e84 	addi	r5,r5,6202
    3d20:	d9402b15 	stw	r5,172(sp)
    3d24:	058001c4 	movi	r22,7
    3d28:	dcc02c17 	ldw	r19,176(sp)
    3d2c:	00000306 	br	3d3c <___vfprintf_internal_r+0x1524>
    3d30:	42000204 	addi	r8,r8,8
    3d34:	843ffc04 	addi	r16,r16,-16
    3d38:	8c3ef50e 	bge	r17,r16,3910 <__alt_data_end+0xff003910>
    3d3c:	18c00404 	addi	r3,r3,16
    3d40:	10800044 	addi	r2,r2,1
    3d44:	45000015 	stw	r20,0(r8)
    3d48:	44400115 	stw	r17,4(r8)
    3d4c:	d8c02015 	stw	r3,128(sp)
    3d50:	d8801f15 	stw	r2,124(sp)
    3d54:	b0bff60e 	bge	r22,r2,3d30 <__alt_data_end+0xff003d30>
    3d58:	d9801e04 	addi	r6,sp,120
    3d5c:	b80b883a 	mov	r5,r23
    3d60:	9809883a 	mov	r4,r19
    3d64:	00095b40 	call	95b4 <__sprint_r>
    3d68:	103bad1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3d6c:	d8c02017 	ldw	r3,128(sp)
    3d70:	d8801f17 	ldw	r2,124(sp)
    3d74:	da000404 	addi	r8,sp,16
    3d78:	003fee06 	br	3d34 <__alt_data_end+0xff003d34>
    3d7c:	9088703a 	and	r4,r18,r2
    3d80:	203eab1e 	bne	r4,zero,3830 <__alt_data_end+0xff003830>
    3d84:	dc401f17 	ldw	r17,124(sp)
    3d88:	40800115 	stw	r2,4(r8)
    3d8c:	44000015 	stw	r16,0(r8)
    3d90:	8c400044 	addi	r17,r17,1
    3d94:	d8c02015 	stw	r3,128(sp)
    3d98:	dc401f15 	stw	r17,124(sp)
    3d9c:	008001c4 	movi	r2,7
    3da0:	14400e16 	blt	r2,r17,3ddc <___vfprintf_internal_r+0x15c4>
    3da4:	45800204 	addi	r22,r8,8
    3da8:	003eca06 	br	38d4 <__alt_data_end+0xff0038d4>
    3dac:	01000074 	movhi	r4,1
    3db0:	21060e84 	addi	r4,r4,6202
    3db4:	d9002b15 	stw	r4,172(sp)
    3db8:	d8802b17 	ldw	r2,172(sp)
    3dbc:	1c07883a 	add	r3,r3,r16
    3dc0:	8c400044 	addi	r17,r17,1
    3dc4:	b0800015 	stw	r2,0(r22)
    3dc8:	b4000115 	stw	r16,4(r22)
    3dcc:	d8c02015 	stw	r3,128(sp)
    3dd0:	dc401f15 	stw	r17,124(sp)
    3dd4:	008001c4 	movi	r2,7
    3dd8:	147ebd0e 	bge	r2,r17,38d0 <__alt_data_end+0xff0038d0>
    3ddc:	d9002c17 	ldw	r4,176(sp)
    3de0:	d9801e04 	addi	r6,sp,120
    3de4:	b80b883a 	mov	r5,r23
    3de8:	00095b40 	call	95b4 <__sprint_r>
    3dec:	103b8c1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3df0:	d8c02017 	ldw	r3,128(sp)
    3df4:	dc401f17 	ldw	r17,124(sp)
    3df8:	dd800404 	addi	r22,sp,16
    3dfc:	003eb506 	br	38d4 <__alt_data_end+0xff0038d4>
    3e00:	d9002c17 	ldw	r4,176(sp)
    3e04:	d9801e04 	addi	r6,sp,120
    3e08:	b80b883a 	mov	r5,r23
    3e0c:	00095b40 	call	95b4 <__sprint_r>
    3e10:	103b831e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3e14:	d8c02017 	ldw	r3,128(sp)
    3e18:	dc401f17 	ldw	r17,124(sp)
    3e1c:	da000404 	addi	r8,sp,16
    3e20:	003e8d06 	br	3858 <__alt_data_end+0xff003858>
    3e24:	d9002c17 	ldw	r4,176(sp)
    3e28:	d9801e04 	addi	r6,sp,120
    3e2c:	b80b883a 	mov	r5,r23
    3e30:	00095b40 	call	95b4 <__sprint_r>
    3e34:	103b7a1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3e38:	d8c02017 	ldw	r3,128(sp)
    3e3c:	dc401f17 	ldw	r17,124(sp)
    3e40:	dd800404 	addi	r22,sp,16
    3e44:	003e8f06 	br	3884 <__alt_data_end+0xff003884>
    3e48:	0027883a 	mov	r19,zero
    3e4c:	003f4a06 	br	3b78 <__alt_data_end+0xff003b78>
    3e50:	d9002c17 	ldw	r4,176(sp)
    3e54:	d9801e04 	addi	r6,sp,120
    3e58:	b80b883a 	mov	r5,r23
    3e5c:	00095b40 	call	95b4 <__sprint_r>
    3e60:	103b6f1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    3e64:	d8c02017 	ldw	r3,128(sp)
    3e68:	da000404 	addi	r8,sp,16
    3e6c:	003c9d06 	br	30e4 <__alt_data_end+0xff0030e4>
    3e70:	04e7c83a 	sub	r19,zero,r19
    3e74:	9804c03a 	cmpne	r2,r19,zero
    3e78:	05adc83a 	sub	r22,zero,r22
    3e7c:	b0adc83a 	sub	r22,r22,r2
    3e80:	d8802917 	ldw	r2,164(sp)
    3e84:	07000b44 	movi	fp,45
    3e88:	df002785 	stb	fp,158(sp)
    3e8c:	10017b16 	blt	r2,zero,447c <___vfprintf_internal_r+0x1c64>
    3e90:	00bfdfc4 	movi	r2,-129
    3e94:	90a4703a 	and	r18,r18,r2
    3e98:	003bb106 	br	2d60 <__alt_data_end+0xff002d60>
    3e9c:	d9003617 	ldw	r4,216(sp)
    3ea0:	d9403817 	ldw	r5,224(sp)
    3ea4:	da003d15 	stw	r8,244(sp)
    3ea8:	000922c0 	call	922c <__fpclassifyd>
    3eac:	da003d17 	ldw	r8,244(sp)
    3eb0:	1000f026 	beq	r2,zero,4274 <___vfprintf_internal_r+0x1a5c>
    3eb4:	d9002917 	ldw	r4,164(sp)
    3eb8:	05bff7c4 	movi	r22,-33
    3ebc:	00bfffc4 	movi	r2,-1
    3ec0:	8dac703a 	and	r22,r17,r22
    3ec4:	20820026 	beq	r4,r2,46c8 <___vfprintf_internal_r+0x1eb0>
    3ec8:	008011c4 	movi	r2,71
    3ecc:	b081f726 	beq	r22,r2,46ac <___vfprintf_internal_r+0x1e94>
    3ed0:	d9003817 	ldw	r4,224(sp)
    3ed4:	90c04014 	ori	r3,r18,256
    3ed8:	d8c02b15 	stw	r3,172(sp)
    3edc:	20021516 	blt	r4,zero,4734 <___vfprintf_internal_r+0x1f1c>
    3ee0:	dcc03817 	ldw	r19,224(sp)
    3ee4:	d8002a05 	stb	zero,168(sp)
    3ee8:	00801984 	movi	r2,102
    3eec:	8881f926 	beq	r17,r2,46d4 <___vfprintf_internal_r+0x1ebc>
    3ef0:	00801184 	movi	r2,70
    3ef4:	88821c26 	beq	r17,r2,4768 <___vfprintf_internal_r+0x1f50>
    3ef8:	00801144 	movi	r2,69
    3efc:	b081ef26 	beq	r22,r2,46bc <___vfprintf_internal_r+0x1ea4>
    3f00:	d8c02917 	ldw	r3,164(sp)
    3f04:	d8802104 	addi	r2,sp,132
    3f08:	d8800315 	stw	r2,12(sp)
    3f0c:	d9403617 	ldw	r5,216(sp)
    3f10:	d8802504 	addi	r2,sp,148
    3f14:	d9002c17 	ldw	r4,176(sp)
    3f18:	d8800215 	stw	r2,8(sp)
    3f1c:	d8802604 	addi	r2,sp,152
    3f20:	d8c00015 	stw	r3,0(sp)
    3f24:	d8800115 	stw	r2,4(sp)
    3f28:	01c00084 	movi	r7,2
    3f2c:	980d883a 	mov	r6,r19
    3f30:	d8c03c15 	stw	r3,240(sp)
    3f34:	da003d15 	stw	r8,244(sp)
    3f38:	0004e3c0 	call	4e3c <_dtoa_r>
    3f3c:	1021883a 	mov	r16,r2
    3f40:	008019c4 	movi	r2,103
    3f44:	d8c03c17 	ldw	r3,240(sp)
    3f48:	da003d17 	ldw	r8,244(sp)
    3f4c:	88817126 	beq	r17,r2,4514 <___vfprintf_internal_r+0x1cfc>
    3f50:	008011c4 	movi	r2,71
    3f54:	88829226 	beq	r17,r2,49a0 <___vfprintf_internal_r+0x2188>
    3f58:	80f9883a 	add	fp,r16,r3
    3f5c:	d9003617 	ldw	r4,216(sp)
    3f60:	000d883a 	mov	r6,zero
    3f64:	000f883a 	mov	r7,zero
    3f68:	980b883a 	mov	r5,r19
    3f6c:	da003d15 	stw	r8,244(sp)
    3f70:	000d22c0 	call	d22c <__eqdf2>
    3f74:	da003d17 	ldw	r8,244(sp)
    3f78:	10018d26 	beq	r2,zero,45b0 <___vfprintf_internal_r+0x1d98>
    3f7c:	d8802117 	ldw	r2,132(sp)
    3f80:	1700062e 	bgeu	r2,fp,3f9c <___vfprintf_internal_r+0x1784>
    3f84:	01000c04 	movi	r4,48
    3f88:	10c00044 	addi	r3,r2,1
    3f8c:	d8c02115 	stw	r3,132(sp)
    3f90:	11000005 	stb	r4,0(r2)
    3f94:	d8802117 	ldw	r2,132(sp)
    3f98:	173ffb36 	bltu	r2,fp,3f88 <__alt_data_end+0xff003f88>
    3f9c:	1405c83a 	sub	r2,r2,r16
    3fa0:	d8803315 	stw	r2,204(sp)
    3fa4:	008011c4 	movi	r2,71
    3fa8:	b0817626 	beq	r22,r2,4584 <___vfprintf_internal_r+0x1d6c>
    3fac:	00801944 	movi	r2,101
    3fb0:	1442810e 	bge	r2,r17,49b8 <___vfprintf_internal_r+0x21a0>
    3fb4:	d8c02617 	ldw	r3,152(sp)
    3fb8:	00801984 	movi	r2,102
    3fbc:	d8c03215 	stw	r3,200(sp)
    3fc0:	8881fe26 	beq	r17,r2,47bc <___vfprintf_internal_r+0x1fa4>
    3fc4:	d8c03217 	ldw	r3,200(sp)
    3fc8:	d9003317 	ldw	r4,204(sp)
    3fcc:	1901dd16 	blt	r3,r4,4744 <___vfprintf_internal_r+0x1f2c>
    3fd0:	9480004c 	andi	r18,r18,1
    3fd4:	90022b1e 	bne	r18,zero,4884 <___vfprintf_internal_r+0x206c>
    3fd8:	1805883a 	mov	r2,r3
    3fdc:	18028016 	blt	r3,zero,49e0 <___vfprintf_internal_r+0x21c8>
    3fe0:	d8c03217 	ldw	r3,200(sp)
    3fe4:	044019c4 	movi	r17,103
    3fe8:	d8c02e15 	stw	r3,184(sp)
    3fec:	df002a07 	ldb	fp,168(sp)
    3ff0:	e001531e 	bne	fp,zero,4540 <___vfprintf_internal_r+0x1d28>
    3ff4:	df002783 	ldbu	fp,158(sp)
    3ff8:	d8802a15 	stw	r2,168(sp)
    3ffc:	dc802b17 	ldw	r18,172(sp)
    4000:	d8002915 	stw	zero,164(sp)
    4004:	003bd106 	br	2f4c <__alt_data_end+0xff002f4c>
    4008:	d8802d17 	ldw	r2,180(sp)
    400c:	d8c02d17 	ldw	r3,180(sp)
    4010:	d9002d17 	ldw	r4,180(sp)
    4014:	10800017 	ldw	r2,0(r2)
    4018:	18c00117 	ldw	r3,4(r3)
    401c:	21000204 	addi	r4,r4,8
    4020:	d8803615 	stw	r2,216(sp)
    4024:	d8c03815 	stw	r3,224(sp)
    4028:	d9002d15 	stw	r4,180(sp)
    402c:	003b7506 	br	2e04 <__alt_data_end+0xff002e04>
    4030:	ac400007 	ldb	r17,0(r21)
    4034:	003a5906 	br	299c <__alt_data_end+0xff00299c>
    4038:	9080100c 	andi	r2,r18,64
    403c:	1000a826 	beq	r2,zero,42e0 <___vfprintf_internal_r+0x1ac8>
    4040:	d9002d17 	ldw	r4,180(sp)
    4044:	002d883a 	mov	r22,zero
    4048:	24c0000b 	ldhu	r19,0(r4)
    404c:	21000104 	addi	r4,r4,4
    4050:	d9002d15 	stw	r4,180(sp)
    4054:	003ccb06 	br	3384 <__alt_data_end+0xff003384>
    4058:	d8c02d17 	ldw	r3,180(sp)
    405c:	d9002917 	ldw	r4,164(sp)
    4060:	002d883a 	mov	r22,zero
    4064:	18800104 	addi	r2,r3,4
    4068:	1cc00017 	ldw	r19,0(r3)
    406c:	203ebb0e 	bge	r4,zero,3b5c <__alt_data_end+0xff003b5c>
    4070:	003ef106 	br	3c38 <__alt_data_end+0xff003c38>
    4074:	9080040c 	andi	r2,r18,16
    4078:	1000921e 	bne	r2,zero,42c4 <___vfprintf_internal_r+0x1aac>
    407c:	9480100c 	andi	r18,r18,64
    4080:	90013926 	beq	r18,zero,4568 <___vfprintf_internal_r+0x1d50>
    4084:	d9002d17 	ldw	r4,180(sp)
    4088:	d9402f17 	ldw	r5,188(sp)
    408c:	20800017 	ldw	r2,0(r4)
    4090:	21000104 	addi	r4,r4,4
    4094:	d9002d15 	stw	r4,180(sp)
    4098:	1140000d 	sth	r5,0(r2)
    409c:	003a1606 	br	28f8 <__alt_data_end+0xff0028f8>
    40a0:	9080100c 	andi	r2,r18,64
    40a4:	10008026 	beq	r2,zero,42a8 <___vfprintf_internal_r+0x1a90>
    40a8:	d8c02d17 	ldw	r3,180(sp)
    40ac:	1cc0000f 	ldh	r19,0(r3)
    40b0:	18c00104 	addi	r3,r3,4
    40b4:	d8c02d15 	stw	r3,180(sp)
    40b8:	982dd7fa 	srai	r22,r19,31
    40bc:	b005883a 	mov	r2,r22
    40c0:	003b1f06 	br	2d40 <__alt_data_end+0xff002d40>
    40c4:	9080100c 	andi	r2,r18,64
    40c8:	d8002785 	stb	zero,158(sp)
    40cc:	10008a1e 	bne	r2,zero,42f8 <___vfprintf_internal_r+0x1ae0>
    40d0:	d9402d17 	ldw	r5,180(sp)
    40d4:	d8c02917 	ldw	r3,164(sp)
    40d8:	002d883a 	mov	r22,zero
    40dc:	28800104 	addi	r2,r5,4
    40e0:	2cc00017 	ldw	r19,0(r5)
    40e4:	183e4b0e 	bge	r3,zero,3a14 <__alt_data_end+0xff003a14>
    40e8:	9d86b03a 	or	r3,r19,r22
    40ec:	d8802d15 	stw	r2,180(sp)
    40f0:	183e4c1e 	bne	r3,zero,3a24 <__alt_data_end+0xff003a24>
    40f4:	0039883a 	mov	fp,zero
    40f8:	0005883a 	mov	r2,zero
    40fc:	003d4006 	br	3600 <__alt_data_end+0xff003600>
    4100:	01400074 	movhi	r5,1
    4104:	29460e84 	addi	r5,r5,6202
    4108:	d9402b15 	stw	r5,172(sp)
    410c:	d9402b17 	ldw	r5,172(sp)
    4110:	1c47883a 	add	r3,r3,r17
    4114:	10800044 	addi	r2,r2,1
    4118:	41400015 	stw	r5,0(r8)
    411c:	44400115 	stw	r17,4(r8)
    4120:	d8c02015 	stw	r3,128(sp)
    4124:	d8801f15 	stw	r2,124(sp)
    4128:	010001c4 	movi	r4,7
    412c:	20bec816 	blt	r4,r2,3c50 <__alt_data_end+0xff003c50>
    4130:	42000204 	addi	r8,r8,8
    4134:	003ecd06 	br	3c6c <__alt_data_end+0xff003c6c>
    4138:	d9002917 	ldw	r4,164(sp)
    413c:	d8002785 	stb	zero,158(sp)
    4140:	203d2d16 	blt	r4,zero,35f8 <__alt_data_end+0xff0035f8>
    4144:	00bfdfc4 	movi	r2,-129
    4148:	90a4703a 	and	r18,r18,r2
    414c:	003a9106 	br	2b94 <__alt_data_end+0xff002b94>
    4150:	01000074 	movhi	r4,1
    4154:	21060e84 	addi	r4,r4,6202
    4158:	d9002b15 	stw	r4,172(sp)
    415c:	003c0c06 	br	3190 <__alt_data_end+0xff003190>
    4160:	d9002c17 	ldw	r4,176(sp)
    4164:	d9801e04 	addi	r6,sp,120
    4168:	b80b883a 	mov	r5,r23
    416c:	00095b40 	call	95b4 <__sprint_r>
    4170:	103aab1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    4174:	d8c02017 	ldw	r3,128(sp)
    4178:	da000404 	addi	r8,sp,16
    417c:	003d4106 	br	3684 <__alt_data_end+0xff003684>
    4180:	d8801f17 	ldw	r2,124(sp)
    4184:	01400074 	movhi	r5,1
    4188:	01000044 	movi	r4,1
    418c:	18c00044 	addi	r3,r3,1
    4190:	10800044 	addi	r2,r2,1
    4194:	29460e04 	addi	r5,r5,6200
    4198:	41000115 	stw	r4,4(r8)
    419c:	41400015 	stw	r5,0(r8)
    41a0:	d8c02015 	stw	r3,128(sp)
    41a4:	d8801f15 	stw	r2,124(sp)
    41a8:	010001c4 	movi	r4,7
    41ac:	20805c16 	blt	r4,r2,4320 <___vfprintf_internal_r+0x1b08>
    41b0:	42000204 	addi	r8,r8,8
    41b4:	8800041e 	bne	r17,zero,41c8 <___vfprintf_internal_r+0x19b0>
    41b8:	d8803317 	ldw	r2,204(sp)
    41bc:	1000021e 	bne	r2,zero,41c8 <___vfprintf_internal_r+0x19b0>
    41c0:	9080004c 	andi	r2,r18,1
    41c4:	103c0926 	beq	r2,zero,31ec <__alt_data_end+0xff0031ec>
    41c8:	d9003717 	ldw	r4,220(sp)
    41cc:	d8801f17 	ldw	r2,124(sp)
    41d0:	d9403417 	ldw	r5,208(sp)
    41d4:	20c7883a 	add	r3,r4,r3
    41d8:	10800044 	addi	r2,r2,1
    41dc:	41000115 	stw	r4,4(r8)
    41e0:	41400015 	stw	r5,0(r8)
    41e4:	d8c02015 	stw	r3,128(sp)
    41e8:	d8801f15 	stw	r2,124(sp)
    41ec:	010001c4 	movi	r4,7
    41f0:	20812116 	blt	r4,r2,4678 <___vfprintf_internal_r+0x1e60>
    41f4:	42000204 	addi	r8,r8,8
    41f8:	0463c83a 	sub	r17,zero,r17
    41fc:	0440730e 	bge	zero,r17,43cc <___vfprintf_internal_r+0x1bb4>
    4200:	05800404 	movi	r22,16
    4204:	b440860e 	bge	r22,r17,4420 <___vfprintf_internal_r+0x1c08>
    4208:	01400074 	movhi	r5,1
    420c:	29460e84 	addi	r5,r5,6202
    4210:	d9402b15 	stw	r5,172(sp)
    4214:	070001c4 	movi	fp,7
    4218:	dcc02c17 	ldw	r19,176(sp)
    421c:	00000306 	br	422c <___vfprintf_internal_r+0x1a14>
    4220:	42000204 	addi	r8,r8,8
    4224:	8c7ffc04 	addi	r17,r17,-16
    4228:	b440800e 	bge	r22,r17,442c <___vfprintf_internal_r+0x1c14>
    422c:	18c00404 	addi	r3,r3,16
    4230:	10800044 	addi	r2,r2,1
    4234:	45000015 	stw	r20,0(r8)
    4238:	45800115 	stw	r22,4(r8)
    423c:	d8c02015 	stw	r3,128(sp)
    4240:	d8801f15 	stw	r2,124(sp)
    4244:	e0bff60e 	bge	fp,r2,4220 <__alt_data_end+0xff004220>
    4248:	d9801e04 	addi	r6,sp,120
    424c:	b80b883a 	mov	r5,r23
    4250:	9809883a 	mov	r4,r19
    4254:	00095b40 	call	95b4 <__sprint_r>
    4258:	103a711e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    425c:	d8c02017 	ldw	r3,128(sp)
    4260:	d8801f17 	ldw	r2,124(sp)
    4264:	da000404 	addi	r8,sp,16
    4268:	003fee06 	br	4224 <__alt_data_end+0xff004224>
    426c:	00bfffc4 	movi	r2,-1
    4270:	003a6f06 	br	2c30 <__alt_data_end+0xff002c30>
    4274:	008011c4 	movi	r2,71
    4278:	1440b816 	blt	r2,r17,455c <___vfprintf_internal_r+0x1d44>
    427c:	04000074 	movhi	r16,1
    4280:	84060004 	addi	r16,r16,6144
    4284:	00c000c4 	movi	r3,3
    4288:	00bfdfc4 	movi	r2,-129
    428c:	d8c02a15 	stw	r3,168(sp)
    4290:	90a4703a 	and	r18,r18,r2
    4294:	df002783 	ldbu	fp,158(sp)
    4298:	d8c02e15 	stw	r3,184(sp)
    429c:	d8002915 	stw	zero,164(sp)
    42a0:	d8003215 	stw	zero,200(sp)
    42a4:	003b2906 	br	2f4c <__alt_data_end+0xff002f4c>
    42a8:	d9002d17 	ldw	r4,180(sp)
    42ac:	24c00017 	ldw	r19,0(r4)
    42b0:	21000104 	addi	r4,r4,4
    42b4:	d9002d15 	stw	r4,180(sp)
    42b8:	982dd7fa 	srai	r22,r19,31
    42bc:	b005883a 	mov	r2,r22
    42c0:	003a9f06 	br	2d40 <__alt_data_end+0xff002d40>
    42c4:	d9402d17 	ldw	r5,180(sp)
    42c8:	d8c02f17 	ldw	r3,188(sp)
    42cc:	28800017 	ldw	r2,0(r5)
    42d0:	29400104 	addi	r5,r5,4
    42d4:	d9402d15 	stw	r5,180(sp)
    42d8:	10c00015 	stw	r3,0(r2)
    42dc:	00398606 	br	28f8 <__alt_data_end+0xff0028f8>
    42e0:	d9402d17 	ldw	r5,180(sp)
    42e4:	002d883a 	mov	r22,zero
    42e8:	2cc00017 	ldw	r19,0(r5)
    42ec:	29400104 	addi	r5,r5,4
    42f0:	d9402d15 	stw	r5,180(sp)
    42f4:	003c2306 	br	3384 <__alt_data_end+0xff003384>
    42f8:	d8c02d17 	ldw	r3,180(sp)
    42fc:	d9002917 	ldw	r4,164(sp)
    4300:	002d883a 	mov	r22,zero
    4304:	18800104 	addi	r2,r3,4
    4308:	1cc0000b 	ldhu	r19,0(r3)
    430c:	203dc10e 	bge	r4,zero,3a14 <__alt_data_end+0xff003a14>
    4310:	003f7506 	br	40e8 <__alt_data_end+0xff0040e8>
    4314:	04000074 	movhi	r16,1
    4318:	8405fe04 	addi	r16,r16,6136
    431c:	003acc06 	br	2e50 <__alt_data_end+0xff002e50>
    4320:	d9002c17 	ldw	r4,176(sp)
    4324:	d9801e04 	addi	r6,sp,120
    4328:	b80b883a 	mov	r5,r23
    432c:	00095b40 	call	95b4 <__sprint_r>
    4330:	103a3b1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    4334:	dc402617 	ldw	r17,152(sp)
    4338:	d8c02017 	ldw	r3,128(sp)
    433c:	da000404 	addi	r8,sp,16
    4340:	003f9c06 	br	41b4 <__alt_data_end+0xff0041b4>
    4344:	ac400043 	ldbu	r17,1(r21)
    4348:	94800814 	ori	r18,r18,32
    434c:	ad400044 	addi	r21,r21,1
    4350:	8c403fcc 	andi	r17,r17,255
    4354:	8c40201c 	xori	r17,r17,128
    4358:	8c7fe004 	addi	r17,r17,-128
    435c:	00398f06 	br	299c <__alt_data_end+0xff00299c>
    4360:	d8c02d15 	stw	r3,180(sp)
    4364:	0039883a 	mov	fp,zero
    4368:	003e3506 	br	3c40 <__alt_data_end+0xff003c40>
    436c:	d9002c17 	ldw	r4,176(sp)
    4370:	d9801e04 	addi	r6,sp,120
    4374:	b80b883a 	mov	r5,r23
    4378:	00095b40 	call	95b4 <__sprint_r>
    437c:	103a281e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    4380:	d8c02017 	ldw	r3,128(sp)
    4384:	da000404 	addi	r8,sp,16
    4388:	003cd006 	br	36cc <__alt_data_end+0xff0036cc>
    438c:	8009883a 	mov	r4,r16
    4390:	da003d15 	stw	r8,244(sp)
    4394:	00027800 	call	2780 <strlen>
    4398:	d8802e15 	stw	r2,184(sp)
    439c:	da003d17 	ldw	r8,244(sp)
    43a0:	103c340e 	bge	r2,zero,3474 <__alt_data_end+0xff003474>
    43a4:	0005883a 	mov	r2,zero
    43a8:	003c3206 	br	3474 <__alt_data_end+0xff003474>
    43ac:	d9002c17 	ldw	r4,176(sp)
    43b0:	d9801e04 	addi	r6,sp,120
    43b4:	b80b883a 	mov	r5,r23
    43b8:	00095b40 	call	95b4 <__sprint_r>
    43bc:	103a181e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    43c0:	d8c02017 	ldw	r3,128(sp)
    43c4:	d8801f17 	ldw	r2,124(sp)
    43c8:	da000404 	addi	r8,sp,16
    43cc:	d9403317 	ldw	r5,204(sp)
    43d0:	10800044 	addi	r2,r2,1
    43d4:	44000015 	stw	r16,0(r8)
    43d8:	28c7883a 	add	r3,r5,r3
    43dc:	003b7d06 	br	31d4 <__alt_data_end+0xff0031d4>
    43e0:	01000074 	movhi	r4,1
    43e4:	21061284 	addi	r4,r4,6218
    43e8:	d9003515 	stw	r4,212(sp)
    43ec:	003b1406 	br	3040 <__alt_data_end+0xff003040>
    43f0:	013fffc4 	movi	r4,-1
    43f4:	003a3506 	br	2ccc <__alt_data_end+0xff002ccc>
    43f8:	0023883a 	mov	r17,zero
    43fc:	003d9d06 	br	3a74 <__alt_data_end+0xff003a74>
    4400:	d9002c17 	ldw	r4,176(sp)
    4404:	d9801e04 	addi	r6,sp,120
    4408:	b80b883a 	mov	r5,r23
    440c:	00095b40 	call	95b4 <__sprint_r>
    4410:	103a031e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    4414:	d8c02017 	ldw	r3,128(sp)
    4418:	da000404 	addi	r8,sp,16
    441c:	003d9406 	br	3a70 <__alt_data_end+0xff003a70>
    4420:	01000074 	movhi	r4,1
    4424:	21060e84 	addi	r4,r4,6202
    4428:	d9002b15 	stw	r4,172(sp)
    442c:	d9002b17 	ldw	r4,172(sp)
    4430:	1c47883a 	add	r3,r3,r17
    4434:	10800044 	addi	r2,r2,1
    4438:	41000015 	stw	r4,0(r8)
    443c:	44400115 	stw	r17,4(r8)
    4440:	d8c02015 	stw	r3,128(sp)
    4444:	d8801f15 	stw	r2,124(sp)
    4448:	010001c4 	movi	r4,7
    444c:	20bfd716 	blt	r4,r2,43ac <__alt_data_end+0xff0043ac>
    4450:	42000204 	addi	r8,r8,8
    4454:	003fdd06 	br	43cc <__alt_data_end+0xff0043cc>
    4458:	d9002c17 	ldw	r4,176(sp)
    445c:	d9801e04 	addi	r6,sp,120
    4460:	b80b883a 	mov	r5,r23
    4464:	00095b40 	call	95b4 <__sprint_r>
    4468:	1039ed1e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    446c:	d8802617 	ldw	r2,152(sp)
    4470:	d8c02017 	ldw	r3,128(sp)
    4474:	da000404 	addi	r8,sp,16
    4478:	003e1006 	br	3cbc <__alt_data_end+0xff003cbc>
    447c:	00800044 	movi	r2,1
    4480:	10803fcc 	andi	r2,r2,255
    4484:	00c00044 	movi	r3,1
    4488:	10fa3526 	beq	r2,r3,2d60 <__alt_data_end+0xff002d60>
    448c:	00c00084 	movi	r3,2
    4490:	10fbcb26 	beq	r2,r3,33c0 <__alt_data_end+0xff0033c0>
    4494:	003a8f06 	br	2ed4 <__alt_data_end+0xff002ed4>
    4498:	01000074 	movhi	r4,1
    449c:	21061284 	addi	r4,r4,6218
    44a0:	d9003515 	stw	r4,212(sp)
    44a4:	003b7606 	br	3280 <__alt_data_end+0xff003280>
    44a8:	d8802917 	ldw	r2,164(sp)
    44ac:	00c00184 	movi	r3,6
    44b0:	1880012e 	bgeu	r3,r2,44b8 <___vfprintf_internal_r+0x1ca0>
    44b4:	1805883a 	mov	r2,r3
    44b8:	d8802e15 	stw	r2,184(sp)
    44bc:	1000ef16 	blt	r2,zero,487c <___vfprintf_internal_r+0x2064>
    44c0:	04000074 	movhi	r16,1
    44c4:	d8802a15 	stw	r2,168(sp)
    44c8:	dcc02d15 	stw	r19,180(sp)
    44cc:	d8002915 	stw	zero,164(sp)
    44d0:	d8003215 	stw	zero,200(sp)
    44d4:	84060c04 	addi	r16,r16,6192
    44d8:	0039883a 	mov	fp,zero
    44dc:	003aa206 	br	2f68 <__alt_data_end+0xff002f68>
    44e0:	0021883a 	mov	r16,zero
    44e4:	003e0706 	br	3d04 <__alt_data_end+0xff003d04>
    44e8:	d9002c17 	ldw	r4,176(sp)
    44ec:	d9801e04 	addi	r6,sp,120
    44f0:	b80b883a 	mov	r5,r23
    44f4:	00095b40 	call	95b4 <__sprint_r>
    44f8:	1039c91e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    44fc:	d8802617 	ldw	r2,152(sp)
    4500:	d9403317 	ldw	r5,204(sp)
    4504:	d8c02017 	ldw	r3,128(sp)
    4508:	da000404 	addi	r8,sp,16
    450c:	2885c83a 	sub	r2,r5,r2
    4510:	003dfb06 	br	3d00 <__alt_data_end+0xff003d00>
    4514:	9080004c 	andi	r2,r18,1
    4518:	103e8f1e 	bne	r2,zero,3f58 <__alt_data_end+0xff003f58>
    451c:	d8802117 	ldw	r2,132(sp)
    4520:	003e9e06 	br	3f9c <__alt_data_end+0xff003f9c>
    4524:	1025883a 	mov	r18,r2
    4528:	0039883a 	mov	fp,zero
    452c:	00800084 	movi	r2,2
    4530:	003fd306 	br	4480 <__alt_data_end+0xff004480>
    4534:	07000b44 	movi	fp,45
    4538:	df002785 	stb	fp,158(sp)
    453c:	003a4006 	br	2e40 <__alt_data_end+0xff002e40>
    4540:	00c00b44 	movi	r3,45
    4544:	d8c02785 	stb	r3,158(sp)
    4548:	d8802a15 	stw	r2,168(sp)
    454c:	dc802b17 	ldw	r18,172(sp)
    4550:	d8002915 	stw	zero,164(sp)
    4554:	07000b44 	movi	fp,45
    4558:	003a8006 	br	2f5c <__alt_data_end+0xff002f5c>
    455c:	04000074 	movhi	r16,1
    4560:	84060104 	addi	r16,r16,6148
    4564:	003f4706 	br	4284 <__alt_data_end+0xff004284>
    4568:	d8c02d17 	ldw	r3,180(sp)
    456c:	d9002f17 	ldw	r4,188(sp)
    4570:	18800017 	ldw	r2,0(r3)
    4574:	18c00104 	addi	r3,r3,4
    4578:	d8c02d15 	stw	r3,180(sp)
    457c:	11000015 	stw	r4,0(r2)
    4580:	0038dd06 	br	28f8 <__alt_data_end+0xff0028f8>
    4584:	dd802617 	ldw	r22,152(sp)
    4588:	00bfff44 	movi	r2,-3
    458c:	b0801c16 	blt	r22,r2,4600 <___vfprintf_internal_r+0x1de8>
    4590:	d9402917 	ldw	r5,164(sp)
    4594:	2d801a16 	blt	r5,r22,4600 <___vfprintf_internal_r+0x1de8>
    4598:	dd803215 	stw	r22,200(sp)
    459c:	003e8906 	br	3fc4 <__alt_data_end+0xff003fc4>
    45a0:	01000074 	movhi	r4,1
    45a4:	21060e84 	addi	r4,r4,6202
    45a8:	d9002b15 	stw	r4,172(sp)
    45ac:	003c9106 	br	37f4 <__alt_data_end+0xff0037f4>
    45b0:	e005883a 	mov	r2,fp
    45b4:	003e7906 	br	3f9c <__alt_data_end+0xff003f9c>
    45b8:	d9402917 	ldw	r5,164(sp)
    45bc:	df002783 	ldbu	fp,158(sp)
    45c0:	dcc02d15 	stw	r19,180(sp)
    45c4:	d9402a15 	stw	r5,168(sp)
    45c8:	d9402e15 	stw	r5,184(sp)
    45cc:	d8002915 	stw	zero,164(sp)
    45d0:	d8003215 	stw	zero,200(sp)
    45d4:	003a5d06 	br	2f4c <__alt_data_end+0xff002f4c>
    45d8:	9080004c 	andi	r2,r18,1
    45dc:	0039883a 	mov	fp,zero
    45e0:	10000426 	beq	r2,zero,45f4 <___vfprintf_internal_r+0x1ddc>
    45e4:	00800c04 	movi	r2,48
    45e8:	dc001dc4 	addi	r16,sp,119
    45ec:	d8801dc5 	stb	r2,119(sp)
    45f0:	003b8006 	br	33f4 <__alt_data_end+0xff0033f4>
    45f4:	d8002e15 	stw	zero,184(sp)
    45f8:	dc001e04 	addi	r16,sp,120
    45fc:	003a4d06 	br	2f34 <__alt_data_end+0xff002f34>
    4600:	8c7fff84 	addi	r17,r17,-2
    4604:	b5bfffc4 	addi	r22,r22,-1
    4608:	dd802615 	stw	r22,152(sp)
    460c:	dc4022c5 	stb	r17,139(sp)
    4610:	b000bf16 	blt	r22,zero,4910 <___vfprintf_internal_r+0x20f8>
    4614:	00800ac4 	movi	r2,43
    4618:	d8802305 	stb	r2,140(sp)
    461c:	00800244 	movi	r2,9
    4620:	15807016 	blt	r2,r22,47e4 <___vfprintf_internal_r+0x1fcc>
    4624:	00800c04 	movi	r2,48
    4628:	b5800c04 	addi	r22,r22,48
    462c:	d8802345 	stb	r2,141(sp)
    4630:	dd802385 	stb	r22,142(sp)
    4634:	d88023c4 	addi	r2,sp,143
    4638:	df0022c4 	addi	fp,sp,139
    463c:	d8c03317 	ldw	r3,204(sp)
    4640:	1739c83a 	sub	fp,r2,fp
    4644:	d9003317 	ldw	r4,204(sp)
    4648:	e0c7883a 	add	r3,fp,r3
    464c:	df003a15 	stw	fp,232(sp)
    4650:	d8c02e15 	stw	r3,184(sp)
    4654:	00800044 	movi	r2,1
    4658:	1100b30e 	bge	r2,r4,4928 <___vfprintf_internal_r+0x2110>
    465c:	d8c02e17 	ldw	r3,184(sp)
    4660:	18c00044 	addi	r3,r3,1
    4664:	d8c02e15 	stw	r3,184(sp)
    4668:	1805883a 	mov	r2,r3
    466c:	1800ac16 	blt	r3,zero,4920 <___vfprintf_internal_r+0x2108>
    4670:	d8003215 	stw	zero,200(sp)
    4674:	003e5d06 	br	3fec <__alt_data_end+0xff003fec>
    4678:	d9002c17 	ldw	r4,176(sp)
    467c:	d9801e04 	addi	r6,sp,120
    4680:	b80b883a 	mov	r5,r23
    4684:	00095b40 	call	95b4 <__sprint_r>
    4688:	1039651e 	bne	r2,zero,2c20 <__alt_data_end+0xff002c20>
    468c:	dc402617 	ldw	r17,152(sp)
    4690:	d8c02017 	ldw	r3,128(sp)
    4694:	d8801f17 	ldw	r2,124(sp)
    4698:	da000404 	addi	r8,sp,16
    469c:	003ed606 	br	41f8 <__alt_data_end+0xff0041f8>
    46a0:	582b883a 	mov	r21,r11
    46a4:	d8002915 	stw	zero,164(sp)
    46a8:	0038bd06 	br	29a0 <__alt_data_end+0xff0029a0>
    46ac:	d8802917 	ldw	r2,164(sp)
    46b0:	103e071e 	bne	r2,zero,3ed0 <__alt_data_end+0xff003ed0>
    46b4:	dc002915 	stw	r16,164(sp)
    46b8:	003e0506 	br	3ed0 <__alt_data_end+0xff003ed0>
    46bc:	d9002917 	ldw	r4,164(sp)
    46c0:	20c00044 	addi	r3,r4,1
    46c4:	003e0f06 	br	3f04 <__alt_data_end+0xff003f04>
    46c8:	01400184 	movi	r5,6
    46cc:	d9402915 	stw	r5,164(sp)
    46d0:	003dff06 	br	3ed0 <__alt_data_end+0xff003ed0>
    46d4:	d8802104 	addi	r2,sp,132
    46d8:	d8800315 	stw	r2,12(sp)
    46dc:	d8802504 	addi	r2,sp,148
    46e0:	d8800215 	stw	r2,8(sp)
    46e4:	d8802604 	addi	r2,sp,152
    46e8:	d8800115 	stw	r2,4(sp)
    46ec:	d8802917 	ldw	r2,164(sp)
    46f0:	d9403617 	ldw	r5,216(sp)
    46f4:	d9002c17 	ldw	r4,176(sp)
    46f8:	d8800015 	stw	r2,0(sp)
    46fc:	01c000c4 	movi	r7,3
    4700:	980d883a 	mov	r6,r19
    4704:	da003d15 	stw	r8,244(sp)
    4708:	0004e3c0 	call	4e3c <_dtoa_r>
    470c:	d8c02917 	ldw	r3,164(sp)
    4710:	da003d17 	ldw	r8,244(sp)
    4714:	1021883a 	mov	r16,r2
    4718:	10f9883a 	add	fp,r2,r3
    471c:	81000007 	ldb	r4,0(r16)
    4720:	00800c04 	movi	r2,48
    4724:	20805e26 	beq	r4,r2,48a0 <___vfprintf_internal_r+0x2088>
    4728:	d8c02617 	ldw	r3,152(sp)
    472c:	e0f9883a 	add	fp,fp,r3
    4730:	003e0a06 	br	3f5c <__alt_data_end+0xff003f5c>
    4734:	00c00b44 	movi	r3,45
    4738:	24e0003c 	xorhi	r19,r4,32768
    473c:	d8c02a05 	stb	r3,168(sp)
    4740:	003de906 	br	3ee8 <__alt_data_end+0xff003ee8>
    4744:	d8c03217 	ldw	r3,200(sp)
    4748:	00c07a0e 	bge	zero,r3,4934 <___vfprintf_internal_r+0x211c>
    474c:	00800044 	movi	r2,1
    4750:	d9003317 	ldw	r4,204(sp)
    4754:	1105883a 	add	r2,r2,r4
    4758:	d8802e15 	stw	r2,184(sp)
    475c:	10004e16 	blt	r2,zero,4898 <___vfprintf_internal_r+0x2080>
    4760:	044019c4 	movi	r17,103
    4764:	003e2106 	br	3fec <__alt_data_end+0xff003fec>
    4768:	d9002917 	ldw	r4,164(sp)
    476c:	d8802104 	addi	r2,sp,132
    4770:	d8800315 	stw	r2,12(sp)
    4774:	d9000015 	stw	r4,0(sp)
    4778:	d8802504 	addi	r2,sp,148
    477c:	d9403617 	ldw	r5,216(sp)
    4780:	d9002c17 	ldw	r4,176(sp)
    4784:	d8800215 	stw	r2,8(sp)
    4788:	d8802604 	addi	r2,sp,152
    478c:	d8800115 	stw	r2,4(sp)
    4790:	01c000c4 	movi	r7,3
    4794:	980d883a 	mov	r6,r19
    4798:	da003d15 	stw	r8,244(sp)
    479c:	0004e3c0 	call	4e3c <_dtoa_r>
    47a0:	d8c02917 	ldw	r3,164(sp)
    47a4:	da003d17 	ldw	r8,244(sp)
    47a8:	1021883a 	mov	r16,r2
    47ac:	00801184 	movi	r2,70
    47b0:	80f9883a 	add	fp,r16,r3
    47b4:	88bfd926 	beq	r17,r2,471c <__alt_data_end+0xff00471c>
    47b8:	003de806 	br	3f5c <__alt_data_end+0xff003f5c>
    47bc:	d9002917 	ldw	r4,164(sp)
    47c0:	00c04d0e 	bge	zero,r3,48f8 <___vfprintf_internal_r+0x20e0>
    47c4:	2000441e 	bne	r4,zero,48d8 <___vfprintf_internal_r+0x20c0>
    47c8:	9480004c 	andi	r18,r18,1
    47cc:	9000421e 	bne	r18,zero,48d8 <___vfprintf_internal_r+0x20c0>
    47d0:	1805883a 	mov	r2,r3
    47d4:	18007016 	blt	r3,zero,4998 <___vfprintf_internal_r+0x2180>
    47d8:	d8c03217 	ldw	r3,200(sp)
    47dc:	d8c02e15 	stw	r3,184(sp)
    47e0:	003e0206 	br	3fec <__alt_data_end+0xff003fec>
    47e4:	df0022c4 	addi	fp,sp,139
    47e8:	dc002915 	stw	r16,164(sp)
    47ec:	4027883a 	mov	r19,r8
    47f0:	e021883a 	mov	r16,fp
    47f4:	b009883a 	mov	r4,r22
    47f8:	01400284 	movi	r5,10
    47fc:	000bf680 	call	bf68 <__modsi3>
    4800:	10800c04 	addi	r2,r2,48
    4804:	843fffc4 	addi	r16,r16,-1
    4808:	b009883a 	mov	r4,r22
    480c:	01400284 	movi	r5,10
    4810:	80800005 	stb	r2,0(r16)
    4814:	000bee40 	call	bee4 <__divsi3>
    4818:	102d883a 	mov	r22,r2
    481c:	00800244 	movi	r2,9
    4820:	15bff416 	blt	r2,r22,47f4 <__alt_data_end+0xff0047f4>
    4824:	9811883a 	mov	r8,r19
    4828:	b0800c04 	addi	r2,r22,48
    482c:	8027883a 	mov	r19,r16
    4830:	997fffc4 	addi	r5,r19,-1
    4834:	98bfffc5 	stb	r2,-1(r19)
    4838:	dc002917 	ldw	r16,164(sp)
    483c:	2f006a2e 	bgeu	r5,fp,49e8 <___vfprintf_internal_r+0x21d0>
    4840:	d9c02384 	addi	r7,sp,142
    4844:	3ccfc83a 	sub	r7,r7,r19
    4848:	d9002344 	addi	r4,sp,141
    484c:	e1cf883a 	add	r7,fp,r7
    4850:	00000106 	br	4858 <___vfprintf_internal_r+0x2040>
    4854:	28800003 	ldbu	r2,0(r5)
    4858:	20800005 	stb	r2,0(r4)
    485c:	21000044 	addi	r4,r4,1
    4860:	29400044 	addi	r5,r5,1
    4864:	393ffb1e 	bne	r7,r4,4854 <__alt_data_end+0xff004854>
    4868:	d8802304 	addi	r2,sp,140
    486c:	14c5c83a 	sub	r2,r2,r19
    4870:	d8c02344 	addi	r3,sp,141
    4874:	1885883a 	add	r2,r3,r2
    4878:	003f7006 	br	463c <__alt_data_end+0xff00463c>
    487c:	0005883a 	mov	r2,zero
    4880:	003f0f06 	br	44c0 <__alt_data_end+0xff0044c0>
    4884:	d8c03217 	ldw	r3,200(sp)
    4888:	18c00044 	addi	r3,r3,1
    488c:	d8c02e15 	stw	r3,184(sp)
    4890:	1805883a 	mov	r2,r3
    4894:	183fb20e 	bge	r3,zero,4760 <__alt_data_end+0xff004760>
    4898:	0005883a 	mov	r2,zero
    489c:	003fb006 	br	4760 <__alt_data_end+0xff004760>
    48a0:	d9003617 	ldw	r4,216(sp)
    48a4:	000d883a 	mov	r6,zero
    48a8:	000f883a 	mov	r7,zero
    48ac:	980b883a 	mov	r5,r19
    48b0:	d8c03c15 	stw	r3,240(sp)
    48b4:	da003d15 	stw	r8,244(sp)
    48b8:	000d22c0 	call	d22c <__eqdf2>
    48bc:	d8c03c17 	ldw	r3,240(sp)
    48c0:	da003d17 	ldw	r8,244(sp)
    48c4:	103f9826 	beq	r2,zero,4728 <__alt_data_end+0xff004728>
    48c8:	00800044 	movi	r2,1
    48cc:	10c7c83a 	sub	r3,r2,r3
    48d0:	d8c02615 	stw	r3,152(sp)
    48d4:	003f9506 	br	472c <__alt_data_end+0xff00472c>
    48d8:	d9002917 	ldw	r4,164(sp)
    48dc:	d8c03217 	ldw	r3,200(sp)
    48e0:	20800044 	addi	r2,r4,1
    48e4:	1885883a 	add	r2,r3,r2
    48e8:	d8802e15 	stw	r2,184(sp)
    48ec:	103dbf0e 	bge	r2,zero,3fec <__alt_data_end+0xff003fec>
    48f0:	0005883a 	mov	r2,zero
    48f4:	003dbd06 	br	3fec <__alt_data_end+0xff003fec>
    48f8:	2000211e 	bne	r4,zero,4980 <___vfprintf_internal_r+0x2168>
    48fc:	9480004c 	andi	r18,r18,1
    4900:	90001f1e 	bne	r18,zero,4980 <___vfprintf_internal_r+0x2168>
    4904:	00800044 	movi	r2,1
    4908:	d8802e15 	stw	r2,184(sp)
    490c:	003db706 	br	3fec <__alt_data_end+0xff003fec>
    4910:	00800b44 	movi	r2,45
    4914:	05adc83a 	sub	r22,zero,r22
    4918:	d8802305 	stb	r2,140(sp)
    491c:	003f3f06 	br	461c <__alt_data_end+0xff00461c>
    4920:	0005883a 	mov	r2,zero
    4924:	003f5206 	br	4670 <__alt_data_end+0xff004670>
    4928:	90a4703a 	and	r18,r18,r2
    492c:	903f4e26 	beq	r18,zero,4668 <__alt_data_end+0xff004668>
    4930:	003f4a06 	br	465c <__alt_data_end+0xff00465c>
    4934:	00800084 	movi	r2,2
    4938:	10c5c83a 	sub	r2,r2,r3
    493c:	003f8406 	br	4750 <__alt_data_end+0xff004750>
    4940:	d8802d17 	ldw	r2,180(sp)
    4944:	d9002d17 	ldw	r4,180(sp)
    4948:	ac400043 	ldbu	r17,1(r21)
    494c:	10800017 	ldw	r2,0(r2)
    4950:	582b883a 	mov	r21,r11
    4954:	d8802915 	stw	r2,164(sp)
    4958:	20800104 	addi	r2,r4,4
    495c:	d9002917 	ldw	r4,164(sp)
    4960:	d8802d15 	stw	r2,180(sp)
    4964:	203e7a0e 	bge	r4,zero,4350 <__alt_data_end+0xff004350>
    4968:	8c403fcc 	andi	r17,r17,255
    496c:	00bfffc4 	movi	r2,-1
    4970:	8c40201c 	xori	r17,r17,128
    4974:	d8802915 	stw	r2,164(sp)
    4978:	8c7fe004 	addi	r17,r17,-128
    497c:	00380706 	br	299c <__alt_data_end+0xff00299c>
    4980:	d8c02917 	ldw	r3,164(sp)
    4984:	18c00084 	addi	r3,r3,2
    4988:	d8c02e15 	stw	r3,184(sp)
    498c:	1805883a 	mov	r2,r3
    4990:	183d960e 	bge	r3,zero,3fec <__alt_data_end+0xff003fec>
    4994:	003fd606 	br	48f0 <__alt_data_end+0xff0048f0>
    4998:	0005883a 	mov	r2,zero
    499c:	003f8e06 	br	47d8 <__alt_data_end+0xff0047d8>
    49a0:	9080004c 	andi	r2,r18,1
    49a4:	103f811e 	bne	r2,zero,47ac <__alt_data_end+0xff0047ac>
    49a8:	d8802117 	ldw	r2,132(sp)
    49ac:	1405c83a 	sub	r2,r2,r16
    49b0:	d8803315 	stw	r2,204(sp)
    49b4:	b47ef326 	beq	r22,r17,4584 <__alt_data_end+0xff004584>
    49b8:	dd802617 	ldw	r22,152(sp)
    49bc:	003f1106 	br	4604 <__alt_data_end+0xff004604>
    49c0:	d9c02785 	stb	r7,158(sp)
    49c4:	00390406 	br	2dd8 <__alt_data_end+0xff002dd8>
    49c8:	d9c02785 	stb	r7,158(sp)
    49cc:	0038d306 	br	2d1c <__alt_data_end+0xff002d1c>
    49d0:	d9c02785 	stb	r7,158(sp)
    49d4:	003a6106 	br	335c <__alt_data_end+0xff00335c>
    49d8:	d9c02785 	stb	r7,158(sp)
    49dc:	003af806 	br	35c0 <__alt_data_end+0xff0035c0>
    49e0:	0005883a 	mov	r2,zero
    49e4:	003d7e06 	br	3fe0 <__alt_data_end+0xff003fe0>
    49e8:	d8802344 	addi	r2,sp,141
    49ec:	003f1306 	br	463c <__alt_data_end+0xff00463c>
    49f0:	d9c02785 	stb	r7,158(sp)
    49f4:	00392306 	br	2e84 <__alt_data_end+0xff002e84>
    49f8:	d9c02785 	stb	r7,158(sp)
    49fc:	003aa906 	br	34a4 <__alt_data_end+0xff0034a4>
    4a00:	d9c02785 	stb	r7,158(sp)
    4a04:	003a3d06 	br	32fc <__alt_data_end+0xff0032fc>
    4a08:	d9c02785 	stb	r7,158(sp)
    4a0c:	003aca06 	br	3538 <__alt_data_end+0xff003538>

00004a10 <__vfprintf_internal>:
    4a10:	00800074 	movhi	r2,1
    4a14:	108d6b04 	addi	r2,r2,13740
    4a18:	300f883a 	mov	r7,r6
    4a1c:	280d883a 	mov	r6,r5
    4a20:	200b883a 	mov	r5,r4
    4a24:	11000017 	ldw	r4,0(r2)
    4a28:	00028181 	jmpi	2818 <___vfprintf_internal_r>

00004a2c <__sbprintf>:
    4a2c:	2880030b 	ldhu	r2,12(r5)
    4a30:	2ac01917 	ldw	r11,100(r5)
    4a34:	2a80038b 	ldhu	r10,14(r5)
    4a38:	2a400717 	ldw	r9,28(r5)
    4a3c:	2a000917 	ldw	r8,36(r5)
    4a40:	defee204 	addi	sp,sp,-1144
    4a44:	00c10004 	movi	r3,1024
    4a48:	dc011a15 	stw	r16,1128(sp)
    4a4c:	10bfff4c 	andi	r2,r2,65533
    4a50:	2821883a 	mov	r16,r5
    4a54:	d8cb883a 	add	r5,sp,r3
    4a58:	dc811c15 	stw	r18,1136(sp)
    4a5c:	dc411b15 	stw	r17,1132(sp)
    4a60:	dfc11d15 	stw	ra,1140(sp)
    4a64:	2025883a 	mov	r18,r4
    4a68:	d881030d 	sth	r2,1036(sp)
    4a6c:	dac11915 	stw	r11,1124(sp)
    4a70:	da81038d 	sth	r10,1038(sp)
    4a74:	da410715 	stw	r9,1052(sp)
    4a78:	da010915 	stw	r8,1060(sp)
    4a7c:	dec10015 	stw	sp,1024(sp)
    4a80:	dec10415 	stw	sp,1040(sp)
    4a84:	d8c10215 	stw	r3,1032(sp)
    4a88:	d8c10515 	stw	r3,1044(sp)
    4a8c:	d8010615 	stw	zero,1048(sp)
    4a90:	00028180 	call	2818 <___vfprintf_internal_r>
    4a94:	1023883a 	mov	r17,r2
    4a98:	10000416 	blt	r2,zero,4aac <__sbprintf+0x80>
    4a9c:	d9410004 	addi	r5,sp,1024
    4aa0:	9009883a 	mov	r4,r18
    4aa4:	00066e00 	call	66e0 <_fflush_r>
    4aa8:	10000d1e 	bne	r2,zero,4ae0 <__sbprintf+0xb4>
    4aac:	d881030b 	ldhu	r2,1036(sp)
    4ab0:	1080100c 	andi	r2,r2,64
    4ab4:	10000326 	beq	r2,zero,4ac4 <__sbprintf+0x98>
    4ab8:	8080030b 	ldhu	r2,12(r16)
    4abc:	10801014 	ori	r2,r2,64
    4ac0:	8080030d 	sth	r2,12(r16)
    4ac4:	8805883a 	mov	r2,r17
    4ac8:	dfc11d17 	ldw	ra,1140(sp)
    4acc:	dc811c17 	ldw	r18,1136(sp)
    4ad0:	dc411b17 	ldw	r17,1132(sp)
    4ad4:	dc011a17 	ldw	r16,1128(sp)
    4ad8:	dec11e04 	addi	sp,sp,1144
    4adc:	f800283a 	ret
    4ae0:	047fffc4 	movi	r17,-1
    4ae4:	003ff106 	br	4aac <__alt_data_end+0xff004aac>

00004ae8 <__swsetup_r>:
    4ae8:	00800074 	movhi	r2,1
    4aec:	defffd04 	addi	sp,sp,-12
    4af0:	108d6b04 	addi	r2,r2,13740
    4af4:	dc400115 	stw	r17,4(sp)
    4af8:	2023883a 	mov	r17,r4
    4afc:	11000017 	ldw	r4,0(r2)
    4b00:	dc000015 	stw	r16,0(sp)
    4b04:	dfc00215 	stw	ra,8(sp)
    4b08:	2821883a 	mov	r16,r5
    4b0c:	20000226 	beq	r4,zero,4b18 <__swsetup_r+0x30>
    4b10:	20800e17 	ldw	r2,56(r4)
    4b14:	10003126 	beq	r2,zero,4bdc <__swsetup_r+0xf4>
    4b18:	8080030b 	ldhu	r2,12(r16)
    4b1c:	10c0020c 	andi	r3,r2,8
    4b20:	1009883a 	mov	r4,r2
    4b24:	18000f26 	beq	r3,zero,4b64 <__swsetup_r+0x7c>
    4b28:	80c00417 	ldw	r3,16(r16)
    4b2c:	18001526 	beq	r3,zero,4b84 <__swsetup_r+0x9c>
    4b30:	1100004c 	andi	r4,r2,1
    4b34:	20001c1e 	bne	r4,zero,4ba8 <__swsetup_r+0xc0>
    4b38:	1080008c 	andi	r2,r2,2
    4b3c:	1000291e 	bne	r2,zero,4be4 <__swsetup_r+0xfc>
    4b40:	80800517 	ldw	r2,20(r16)
    4b44:	80800215 	stw	r2,8(r16)
    4b48:	18001c26 	beq	r3,zero,4bbc <__swsetup_r+0xd4>
    4b4c:	0005883a 	mov	r2,zero
    4b50:	dfc00217 	ldw	ra,8(sp)
    4b54:	dc400117 	ldw	r17,4(sp)
    4b58:	dc000017 	ldw	r16,0(sp)
    4b5c:	dec00304 	addi	sp,sp,12
    4b60:	f800283a 	ret
    4b64:	2080040c 	andi	r2,r4,16
    4b68:	10002e26 	beq	r2,zero,4c24 <__swsetup_r+0x13c>
    4b6c:	2080010c 	andi	r2,r4,4
    4b70:	10001e1e 	bne	r2,zero,4bec <__swsetup_r+0x104>
    4b74:	80c00417 	ldw	r3,16(r16)
    4b78:	20800214 	ori	r2,r4,8
    4b7c:	8080030d 	sth	r2,12(r16)
    4b80:	183feb1e 	bne	r3,zero,4b30 <__alt_data_end+0xff004b30>
    4b84:	1100a00c 	andi	r4,r2,640
    4b88:	01408004 	movi	r5,512
    4b8c:	217fe826 	beq	r4,r5,4b30 <__alt_data_end+0xff004b30>
    4b90:	800b883a 	mov	r5,r16
    4b94:	8809883a 	mov	r4,r17
    4b98:	00076600 	call	7660 <__smakebuf_r>
    4b9c:	8080030b 	ldhu	r2,12(r16)
    4ba0:	80c00417 	ldw	r3,16(r16)
    4ba4:	003fe206 	br	4b30 <__alt_data_end+0xff004b30>
    4ba8:	80800517 	ldw	r2,20(r16)
    4bac:	80000215 	stw	zero,8(r16)
    4bb0:	0085c83a 	sub	r2,zero,r2
    4bb4:	80800615 	stw	r2,24(r16)
    4bb8:	183fe41e 	bne	r3,zero,4b4c <__alt_data_end+0xff004b4c>
    4bbc:	80c0030b 	ldhu	r3,12(r16)
    4bc0:	0005883a 	mov	r2,zero
    4bc4:	1900200c 	andi	r4,r3,128
    4bc8:	203fe126 	beq	r4,zero,4b50 <__alt_data_end+0xff004b50>
    4bcc:	18c01014 	ori	r3,r3,64
    4bd0:	80c0030d 	sth	r3,12(r16)
    4bd4:	00bfffc4 	movi	r2,-1
    4bd8:	003fdd06 	br	4b50 <__alt_data_end+0xff004b50>
    4bdc:	0006abc0 	call	6abc <__sinit>
    4be0:	003fcd06 	br	4b18 <__alt_data_end+0xff004b18>
    4be4:	0005883a 	mov	r2,zero
    4be8:	003fd606 	br	4b44 <__alt_data_end+0xff004b44>
    4bec:	81400c17 	ldw	r5,48(r16)
    4bf0:	28000626 	beq	r5,zero,4c0c <__swsetup_r+0x124>
    4bf4:	80801004 	addi	r2,r16,64
    4bf8:	28800326 	beq	r5,r2,4c08 <__swsetup_r+0x120>
    4bfc:	8809883a 	mov	r4,r17
    4c00:	0006c300 	call	6c30 <_free_r>
    4c04:	8100030b 	ldhu	r4,12(r16)
    4c08:	80000c15 	stw	zero,48(r16)
    4c0c:	80c00417 	ldw	r3,16(r16)
    4c10:	00bff6c4 	movi	r2,-37
    4c14:	1108703a 	and	r4,r2,r4
    4c18:	80000115 	stw	zero,4(r16)
    4c1c:	80c00015 	stw	r3,0(r16)
    4c20:	003fd506 	br	4b78 <__alt_data_end+0xff004b78>
    4c24:	00800244 	movi	r2,9
    4c28:	88800015 	stw	r2,0(r17)
    4c2c:	20801014 	ori	r2,r4,64
    4c30:	8080030d 	sth	r2,12(r16)
    4c34:	00bfffc4 	movi	r2,-1
    4c38:	003fc506 	br	4b50 <__alt_data_end+0xff004b50>

00004c3c <quorem>:
    4c3c:	defff704 	addi	sp,sp,-36
    4c40:	dc800215 	stw	r18,8(sp)
    4c44:	20800417 	ldw	r2,16(r4)
    4c48:	2c800417 	ldw	r18,16(r5)
    4c4c:	dfc00815 	stw	ra,32(sp)
    4c50:	ddc00715 	stw	r23,28(sp)
    4c54:	dd800615 	stw	r22,24(sp)
    4c58:	dd400515 	stw	r21,20(sp)
    4c5c:	dd000415 	stw	r20,16(sp)
    4c60:	dcc00315 	stw	r19,12(sp)
    4c64:	dc400115 	stw	r17,4(sp)
    4c68:	dc000015 	stw	r16,0(sp)
    4c6c:	14807116 	blt	r2,r18,4e34 <quorem+0x1f8>
    4c70:	94bfffc4 	addi	r18,r18,-1
    4c74:	94ad883a 	add	r22,r18,r18
    4c78:	b5ad883a 	add	r22,r22,r22
    4c7c:	2c400504 	addi	r17,r5,20
    4c80:	8da9883a 	add	r20,r17,r22
    4c84:	25400504 	addi	r21,r4,20
    4c88:	282f883a 	mov	r23,r5
    4c8c:	adad883a 	add	r22,r21,r22
    4c90:	a1400017 	ldw	r5,0(r20)
    4c94:	2021883a 	mov	r16,r4
    4c98:	b1000017 	ldw	r4,0(r22)
    4c9c:	29400044 	addi	r5,r5,1
    4ca0:	000bfdc0 	call	bfdc <__udivsi3>
    4ca4:	1027883a 	mov	r19,r2
    4ca8:	10002c26 	beq	r2,zero,4d5c <quorem+0x120>
    4cac:	a813883a 	mov	r9,r21
    4cb0:	880b883a 	mov	r5,r17
    4cb4:	0009883a 	mov	r4,zero
    4cb8:	000d883a 	mov	r6,zero
    4cbc:	2a000017 	ldw	r8,0(r5)
    4cc0:	49c00017 	ldw	r7,0(r9)
    4cc4:	29400104 	addi	r5,r5,4
    4cc8:	40bfffcc 	andi	r2,r8,65535
    4ccc:	14c5383a 	mul	r2,r2,r19
    4cd0:	4010d43a 	srli	r8,r8,16
    4cd4:	38ffffcc 	andi	r3,r7,65535
    4cd8:	1105883a 	add	r2,r2,r4
    4cdc:	1008d43a 	srli	r4,r2,16
    4ce0:	44d1383a 	mul	r8,r8,r19
    4ce4:	198d883a 	add	r6,r3,r6
    4ce8:	10ffffcc 	andi	r3,r2,65535
    4cec:	30c7c83a 	sub	r3,r6,r3
    4cf0:	380ed43a 	srli	r7,r7,16
    4cf4:	4105883a 	add	r2,r8,r4
    4cf8:	180dd43a 	srai	r6,r3,16
    4cfc:	113fffcc 	andi	r4,r2,65535
    4d00:	390fc83a 	sub	r7,r7,r4
    4d04:	398d883a 	add	r6,r7,r6
    4d08:	300e943a 	slli	r7,r6,16
    4d0c:	18ffffcc 	andi	r3,r3,65535
    4d10:	1008d43a 	srli	r4,r2,16
    4d14:	38ceb03a 	or	r7,r7,r3
    4d18:	49c00015 	stw	r7,0(r9)
    4d1c:	300dd43a 	srai	r6,r6,16
    4d20:	4a400104 	addi	r9,r9,4
    4d24:	a17fe52e 	bgeu	r20,r5,4cbc <__alt_data_end+0xff004cbc>
    4d28:	b0800017 	ldw	r2,0(r22)
    4d2c:	10000b1e 	bne	r2,zero,4d5c <quorem+0x120>
    4d30:	b0bfff04 	addi	r2,r22,-4
    4d34:	a880082e 	bgeu	r21,r2,4d58 <quorem+0x11c>
    4d38:	b0ffff17 	ldw	r3,-4(r22)
    4d3c:	18000326 	beq	r3,zero,4d4c <quorem+0x110>
    4d40:	00000506 	br	4d58 <quorem+0x11c>
    4d44:	10c00017 	ldw	r3,0(r2)
    4d48:	1800031e 	bne	r3,zero,4d58 <quorem+0x11c>
    4d4c:	10bfff04 	addi	r2,r2,-4
    4d50:	94bfffc4 	addi	r18,r18,-1
    4d54:	a8bffb36 	bltu	r21,r2,4d44 <__alt_data_end+0xff004d44>
    4d58:	84800415 	stw	r18,16(r16)
    4d5c:	b80b883a 	mov	r5,r23
    4d60:	8009883a 	mov	r4,r16
    4d64:	00085940 	call	8594 <__mcmp>
    4d68:	10002616 	blt	r2,zero,4e04 <quorem+0x1c8>
    4d6c:	9cc00044 	addi	r19,r19,1
    4d70:	a805883a 	mov	r2,r21
    4d74:	000b883a 	mov	r5,zero
    4d78:	11000017 	ldw	r4,0(r2)
    4d7c:	89800017 	ldw	r6,0(r17)
    4d80:	10800104 	addi	r2,r2,4
    4d84:	20ffffcc 	andi	r3,r4,65535
    4d88:	194b883a 	add	r5,r3,r5
    4d8c:	30ffffcc 	andi	r3,r6,65535
    4d90:	28c7c83a 	sub	r3,r5,r3
    4d94:	300cd43a 	srli	r6,r6,16
    4d98:	2008d43a 	srli	r4,r4,16
    4d9c:	180bd43a 	srai	r5,r3,16
    4da0:	18ffffcc 	andi	r3,r3,65535
    4da4:	2189c83a 	sub	r4,r4,r6
    4da8:	2149883a 	add	r4,r4,r5
    4dac:	200c943a 	slli	r6,r4,16
    4db0:	8c400104 	addi	r17,r17,4
    4db4:	200bd43a 	srai	r5,r4,16
    4db8:	30c6b03a 	or	r3,r6,r3
    4dbc:	10ffff15 	stw	r3,-4(r2)
    4dc0:	a47fed2e 	bgeu	r20,r17,4d78 <__alt_data_end+0xff004d78>
    4dc4:	9485883a 	add	r2,r18,r18
    4dc8:	1085883a 	add	r2,r2,r2
    4dcc:	a887883a 	add	r3,r21,r2
    4dd0:	18800017 	ldw	r2,0(r3)
    4dd4:	10000b1e 	bne	r2,zero,4e04 <quorem+0x1c8>
    4dd8:	18bfff04 	addi	r2,r3,-4
    4ddc:	a880082e 	bgeu	r21,r2,4e00 <quorem+0x1c4>
    4de0:	18ffff17 	ldw	r3,-4(r3)
    4de4:	18000326 	beq	r3,zero,4df4 <quorem+0x1b8>
    4de8:	00000506 	br	4e00 <quorem+0x1c4>
    4dec:	10c00017 	ldw	r3,0(r2)
    4df0:	1800031e 	bne	r3,zero,4e00 <quorem+0x1c4>
    4df4:	10bfff04 	addi	r2,r2,-4
    4df8:	94bfffc4 	addi	r18,r18,-1
    4dfc:	a8bffb36 	bltu	r21,r2,4dec <__alt_data_end+0xff004dec>
    4e00:	84800415 	stw	r18,16(r16)
    4e04:	9805883a 	mov	r2,r19
    4e08:	dfc00817 	ldw	ra,32(sp)
    4e0c:	ddc00717 	ldw	r23,28(sp)
    4e10:	dd800617 	ldw	r22,24(sp)
    4e14:	dd400517 	ldw	r21,20(sp)
    4e18:	dd000417 	ldw	r20,16(sp)
    4e1c:	dcc00317 	ldw	r19,12(sp)
    4e20:	dc800217 	ldw	r18,8(sp)
    4e24:	dc400117 	ldw	r17,4(sp)
    4e28:	dc000017 	ldw	r16,0(sp)
    4e2c:	dec00904 	addi	sp,sp,36
    4e30:	f800283a 	ret
    4e34:	0005883a 	mov	r2,zero
    4e38:	003ff306 	br	4e08 <__alt_data_end+0xff004e08>

00004e3c <_dtoa_r>:
    4e3c:	20801017 	ldw	r2,64(r4)
    4e40:	deffde04 	addi	sp,sp,-136
    4e44:	df002015 	stw	fp,128(sp)
    4e48:	dcc01b15 	stw	r19,108(sp)
    4e4c:	dc801a15 	stw	r18,104(sp)
    4e50:	dc401915 	stw	r17,100(sp)
    4e54:	dc001815 	stw	r16,96(sp)
    4e58:	dfc02115 	stw	ra,132(sp)
    4e5c:	ddc01f15 	stw	r23,124(sp)
    4e60:	dd801e15 	stw	r22,120(sp)
    4e64:	dd401d15 	stw	r21,116(sp)
    4e68:	dd001c15 	stw	r20,112(sp)
    4e6c:	d9c00315 	stw	r7,12(sp)
    4e70:	2039883a 	mov	fp,r4
    4e74:	3023883a 	mov	r17,r6
    4e78:	2825883a 	mov	r18,r5
    4e7c:	dc002417 	ldw	r16,144(sp)
    4e80:	3027883a 	mov	r19,r6
    4e84:	10000826 	beq	r2,zero,4ea8 <_dtoa_r+0x6c>
    4e88:	21801117 	ldw	r6,68(r4)
    4e8c:	00c00044 	movi	r3,1
    4e90:	100b883a 	mov	r5,r2
    4e94:	1986983a 	sll	r3,r3,r6
    4e98:	11800115 	stw	r6,4(r2)
    4e9c:	10c00215 	stw	r3,8(r2)
    4ea0:	0007d740 	call	7d74 <_Bfree>
    4ea4:	e0001015 	stw	zero,64(fp)
    4ea8:	88002e16 	blt	r17,zero,4f64 <_dtoa_r+0x128>
    4eac:	80000015 	stw	zero,0(r16)
    4eb0:	889ffc2c 	andhi	r2,r17,32752
    4eb4:	00dffc34 	movhi	r3,32752
    4eb8:	10c01c26 	beq	r2,r3,4f2c <_dtoa_r+0xf0>
    4ebc:	000d883a 	mov	r6,zero
    4ec0:	000f883a 	mov	r7,zero
    4ec4:	9009883a 	mov	r4,r18
    4ec8:	980b883a 	mov	r5,r19
    4ecc:	000d22c0 	call	d22c <__eqdf2>
    4ed0:	10002b1e 	bne	r2,zero,4f80 <_dtoa_r+0x144>
    4ed4:	d9c02317 	ldw	r7,140(sp)
    4ed8:	00800044 	movi	r2,1
    4edc:	38800015 	stw	r2,0(r7)
    4ee0:	d8802517 	ldw	r2,148(sp)
    4ee4:	10019e26 	beq	r2,zero,5560 <_dtoa_r+0x724>
    4ee8:	d8c02517 	ldw	r3,148(sp)
    4eec:	00800074 	movhi	r2,1
    4ef0:	10860e44 	addi	r2,r2,6201
    4ef4:	18800015 	stw	r2,0(r3)
    4ef8:	10bfffc4 	addi	r2,r2,-1
    4efc:	dfc02117 	ldw	ra,132(sp)
    4f00:	df002017 	ldw	fp,128(sp)
    4f04:	ddc01f17 	ldw	r23,124(sp)
    4f08:	dd801e17 	ldw	r22,120(sp)
    4f0c:	dd401d17 	ldw	r21,116(sp)
    4f10:	dd001c17 	ldw	r20,112(sp)
    4f14:	dcc01b17 	ldw	r19,108(sp)
    4f18:	dc801a17 	ldw	r18,104(sp)
    4f1c:	dc401917 	ldw	r17,100(sp)
    4f20:	dc001817 	ldw	r16,96(sp)
    4f24:	dec02204 	addi	sp,sp,136
    4f28:	f800283a 	ret
    4f2c:	d8c02317 	ldw	r3,140(sp)
    4f30:	0089c3c4 	movi	r2,9999
    4f34:	18800015 	stw	r2,0(r3)
    4f38:	90017726 	beq	r18,zero,5518 <_dtoa_r+0x6dc>
    4f3c:	00800074 	movhi	r2,1
    4f40:	10861a04 	addi	r2,r2,6248
    4f44:	d9002517 	ldw	r4,148(sp)
    4f48:	203fec26 	beq	r4,zero,4efc <__alt_data_end+0xff004efc>
    4f4c:	10c000c7 	ldb	r3,3(r2)
    4f50:	1801781e 	bne	r3,zero,5534 <_dtoa_r+0x6f8>
    4f54:	10c000c4 	addi	r3,r2,3
    4f58:	d9802517 	ldw	r6,148(sp)
    4f5c:	30c00015 	stw	r3,0(r6)
    4f60:	003fe606 	br	4efc <__alt_data_end+0xff004efc>
    4f64:	04e00034 	movhi	r19,32768
    4f68:	9cffffc4 	addi	r19,r19,-1
    4f6c:	00800044 	movi	r2,1
    4f70:	8ce6703a 	and	r19,r17,r19
    4f74:	80800015 	stw	r2,0(r16)
    4f78:	9823883a 	mov	r17,r19
    4f7c:	003fcc06 	br	4eb0 <__alt_data_end+0xff004eb0>
    4f80:	d8800204 	addi	r2,sp,8
    4f84:	d8800015 	stw	r2,0(sp)
    4f88:	d9c00104 	addi	r7,sp,4
    4f8c:	900b883a 	mov	r5,r18
    4f90:	980d883a 	mov	r6,r19
    4f94:	e009883a 	mov	r4,fp
    4f98:	8820d53a 	srli	r16,r17,20
    4f9c:	00089600 	call	8960 <__d2b>
    4fa0:	d8800915 	stw	r2,36(sp)
    4fa4:	8001651e 	bne	r16,zero,553c <_dtoa_r+0x700>
    4fa8:	dd800217 	ldw	r22,8(sp)
    4fac:	dc000117 	ldw	r16,4(sp)
    4fb0:	00800804 	movi	r2,32
    4fb4:	b421883a 	add	r16,r22,r16
    4fb8:	80c10c84 	addi	r3,r16,1074
    4fbc:	10c2d10e 	bge	r2,r3,5b04 <_dtoa_r+0xcc8>
    4fc0:	00801004 	movi	r2,64
    4fc4:	81010484 	addi	r4,r16,1042
    4fc8:	10c7c83a 	sub	r3,r2,r3
    4fcc:	9108d83a 	srl	r4,r18,r4
    4fd0:	88e2983a 	sll	r17,r17,r3
    4fd4:	2448b03a 	or	r4,r4,r17
    4fd8:	000e5f40 	call	e5f4 <__floatunsidf>
    4fdc:	017f8434 	movhi	r5,65040
    4fe0:	01800044 	movi	r6,1
    4fe4:	1009883a 	mov	r4,r2
    4fe8:	194b883a 	add	r5,r3,r5
    4fec:	843fffc4 	addi	r16,r16,-1
    4ff0:	d9801115 	stw	r6,68(sp)
    4ff4:	000d883a 	mov	r6,zero
    4ff8:	01cffe34 	movhi	r7,16376
    4ffc:	000db9c0 	call	db9c <__subdf3>
    5000:	0198dbf4 	movhi	r6,25455
    5004:	01cff4f4 	movhi	r7,16339
    5008:	3190d844 	addi	r6,r6,17249
    500c:	39e1e9c4 	addi	r7,r7,-30809
    5010:	1009883a 	mov	r4,r2
    5014:	180b883a 	mov	r5,r3
    5018:	000d4840 	call	d484 <__muldf3>
    501c:	01a2d874 	movhi	r6,35681
    5020:	01cff1f4 	movhi	r7,16327
    5024:	31b22cc4 	addi	r6,r6,-14157
    5028:	39e28a04 	addi	r7,r7,-30168
    502c:	180b883a 	mov	r5,r3
    5030:	1009883a 	mov	r4,r2
    5034:	000c0980 	call	c098 <__adddf3>
    5038:	8009883a 	mov	r4,r16
    503c:	1029883a 	mov	r20,r2
    5040:	1823883a 	mov	r17,r3
    5044:	000e5180 	call	e518 <__floatsidf>
    5048:	019427f4 	movhi	r6,20639
    504c:	01cff4f4 	movhi	r7,16339
    5050:	319e7ec4 	addi	r6,r6,31227
    5054:	39d104c4 	addi	r7,r7,17427
    5058:	1009883a 	mov	r4,r2
    505c:	180b883a 	mov	r5,r3
    5060:	000d4840 	call	d484 <__muldf3>
    5064:	100d883a 	mov	r6,r2
    5068:	180f883a 	mov	r7,r3
    506c:	a009883a 	mov	r4,r20
    5070:	880b883a 	mov	r5,r17
    5074:	000c0980 	call	c098 <__adddf3>
    5078:	1009883a 	mov	r4,r2
    507c:	180b883a 	mov	r5,r3
    5080:	1029883a 	mov	r20,r2
    5084:	1823883a 	mov	r17,r3
    5088:	000e4980 	call	e498 <__fixdfsi>
    508c:	000d883a 	mov	r6,zero
    5090:	000f883a 	mov	r7,zero
    5094:	a009883a 	mov	r4,r20
    5098:	880b883a 	mov	r5,r17
    509c:	d8800515 	stw	r2,20(sp)
    50a0:	000d3900 	call	d390 <__ledf2>
    50a4:	10028716 	blt	r2,zero,5ac4 <_dtoa_r+0xc88>
    50a8:	d8c00517 	ldw	r3,20(sp)
    50ac:	00800584 	movi	r2,22
    50b0:	10c27536 	bltu	r2,r3,5a88 <_dtoa_r+0xc4c>
    50b4:	180490fa 	slli	r2,r3,3
    50b8:	00c00074 	movhi	r3,1
    50bc:	18c63604 	addi	r3,r3,6360
    50c0:	1885883a 	add	r2,r3,r2
    50c4:	11000017 	ldw	r4,0(r2)
    50c8:	11400117 	ldw	r5,4(r2)
    50cc:	900d883a 	mov	r6,r18
    50d0:	980f883a 	mov	r7,r19
    50d4:	000d2b40 	call	d2b4 <__gedf2>
    50d8:	00828d0e 	bge	zero,r2,5b10 <_dtoa_r+0xcd4>
    50dc:	d9000517 	ldw	r4,20(sp)
    50e0:	d8000e15 	stw	zero,56(sp)
    50e4:	213fffc4 	addi	r4,r4,-1
    50e8:	d9000515 	stw	r4,20(sp)
    50ec:	b42dc83a 	sub	r22,r22,r16
    50f0:	b5bfffc4 	addi	r22,r22,-1
    50f4:	b0026f16 	blt	r22,zero,5ab4 <_dtoa_r+0xc78>
    50f8:	d8000815 	stw	zero,32(sp)
    50fc:	d9c00517 	ldw	r7,20(sp)
    5100:	38026416 	blt	r7,zero,5a94 <_dtoa_r+0xc58>
    5104:	b1ed883a 	add	r22,r22,r7
    5108:	d9c00d15 	stw	r7,52(sp)
    510c:	d8000a15 	stw	zero,40(sp)
    5110:	d9800317 	ldw	r6,12(sp)
    5114:	00800244 	movi	r2,9
    5118:	11811436 	bltu	r2,r6,556c <_dtoa_r+0x730>
    511c:	00800144 	movi	r2,5
    5120:	1184e10e 	bge	r2,r6,64a8 <_dtoa_r+0x166c>
    5124:	31bfff04 	addi	r6,r6,-4
    5128:	d9800315 	stw	r6,12(sp)
    512c:	0023883a 	mov	r17,zero
    5130:	d9800317 	ldw	r6,12(sp)
    5134:	008000c4 	movi	r2,3
    5138:	30836726 	beq	r6,r2,5ed8 <_dtoa_r+0x109c>
    513c:	1183410e 	bge	r2,r6,5e44 <_dtoa_r+0x1008>
    5140:	d9c00317 	ldw	r7,12(sp)
    5144:	00800104 	movi	r2,4
    5148:	38827c26 	beq	r7,r2,5b3c <_dtoa_r+0xd00>
    514c:	00800144 	movi	r2,5
    5150:	3884c41e 	bne	r7,r2,6464 <_dtoa_r+0x1628>
    5154:	00800044 	movi	r2,1
    5158:	d8800b15 	stw	r2,44(sp)
    515c:	d8c00517 	ldw	r3,20(sp)
    5160:	d9002217 	ldw	r4,136(sp)
    5164:	1907883a 	add	r3,r3,r4
    5168:	19800044 	addi	r6,r3,1
    516c:	d8c00c15 	stw	r3,48(sp)
    5170:	d9800615 	stw	r6,24(sp)
    5174:	0183a40e 	bge	zero,r6,6008 <_dtoa_r+0x11cc>
    5178:	d9800617 	ldw	r6,24(sp)
    517c:	3021883a 	mov	r16,r6
    5180:	e0001115 	stw	zero,68(fp)
    5184:	008005c4 	movi	r2,23
    5188:	1184c92e 	bgeu	r2,r6,64b0 <_dtoa_r+0x1674>
    518c:	00c00044 	movi	r3,1
    5190:	00800104 	movi	r2,4
    5194:	1085883a 	add	r2,r2,r2
    5198:	11000504 	addi	r4,r2,20
    519c:	180b883a 	mov	r5,r3
    51a0:	18c00044 	addi	r3,r3,1
    51a4:	313ffb2e 	bgeu	r6,r4,5194 <__alt_data_end+0xff005194>
    51a8:	e1401115 	stw	r5,68(fp)
    51ac:	e009883a 	mov	r4,fp
    51b0:	0007ccc0 	call	7ccc <_Balloc>
    51b4:	d8800715 	stw	r2,28(sp)
    51b8:	e0801015 	stw	r2,64(fp)
    51bc:	00800384 	movi	r2,14
    51c0:	1400f736 	bltu	r2,r16,55a0 <_dtoa_r+0x764>
    51c4:	8800f626 	beq	r17,zero,55a0 <_dtoa_r+0x764>
    51c8:	d9c00517 	ldw	r7,20(sp)
    51cc:	01c39a0e 	bge	zero,r7,6038 <_dtoa_r+0x11fc>
    51d0:	388003cc 	andi	r2,r7,15
    51d4:	100490fa 	slli	r2,r2,3
    51d8:	382bd13a 	srai	r21,r7,4
    51dc:	00c00074 	movhi	r3,1
    51e0:	18c63604 	addi	r3,r3,6360
    51e4:	1885883a 	add	r2,r3,r2
    51e8:	a8c0040c 	andi	r3,r21,16
    51ec:	12400017 	ldw	r9,0(r2)
    51f0:	12000117 	ldw	r8,4(r2)
    51f4:	18037926 	beq	r3,zero,5fdc <_dtoa_r+0x11a0>
    51f8:	00800074 	movhi	r2,1
    51fc:	10862c04 	addi	r2,r2,6320
    5200:	11800817 	ldw	r6,32(r2)
    5204:	11c00917 	ldw	r7,36(r2)
    5208:	9009883a 	mov	r4,r18
    520c:	980b883a 	mov	r5,r19
    5210:	da001715 	stw	r8,92(sp)
    5214:	da401615 	stw	r9,88(sp)
    5218:	000c9440 	call	c944 <__divdf3>
    521c:	da001717 	ldw	r8,92(sp)
    5220:	da401617 	ldw	r9,88(sp)
    5224:	ad4003cc 	andi	r21,r21,15
    5228:	040000c4 	movi	r16,3
    522c:	1023883a 	mov	r17,r2
    5230:	1829883a 	mov	r20,r3
    5234:	a8001126 	beq	r21,zero,527c <_dtoa_r+0x440>
    5238:	05c00074 	movhi	r23,1
    523c:	bdc62c04 	addi	r23,r23,6320
    5240:	4805883a 	mov	r2,r9
    5244:	4007883a 	mov	r3,r8
    5248:	a980004c 	andi	r6,r21,1
    524c:	1009883a 	mov	r4,r2
    5250:	a82bd07a 	srai	r21,r21,1
    5254:	180b883a 	mov	r5,r3
    5258:	30000426 	beq	r6,zero,526c <_dtoa_r+0x430>
    525c:	b9800017 	ldw	r6,0(r23)
    5260:	b9c00117 	ldw	r7,4(r23)
    5264:	84000044 	addi	r16,r16,1
    5268:	000d4840 	call	d484 <__muldf3>
    526c:	bdc00204 	addi	r23,r23,8
    5270:	a83ff51e 	bne	r21,zero,5248 <__alt_data_end+0xff005248>
    5274:	1013883a 	mov	r9,r2
    5278:	1811883a 	mov	r8,r3
    527c:	480d883a 	mov	r6,r9
    5280:	400f883a 	mov	r7,r8
    5284:	8809883a 	mov	r4,r17
    5288:	a00b883a 	mov	r5,r20
    528c:	000c9440 	call	c944 <__divdf3>
    5290:	d8800f15 	stw	r2,60(sp)
    5294:	d8c01015 	stw	r3,64(sp)
    5298:	d8c00e17 	ldw	r3,56(sp)
    529c:	18000626 	beq	r3,zero,52b8 <_dtoa_r+0x47c>
    52a0:	d9000f17 	ldw	r4,60(sp)
    52a4:	d9401017 	ldw	r5,64(sp)
    52a8:	000d883a 	mov	r6,zero
    52ac:	01cffc34 	movhi	r7,16368
    52b0:	000d3900 	call	d390 <__ledf2>
    52b4:	10040b16 	blt	r2,zero,62e4 <_dtoa_r+0x14a8>
    52b8:	8009883a 	mov	r4,r16
    52bc:	000e5180 	call	e518 <__floatsidf>
    52c0:	d9800f17 	ldw	r6,60(sp)
    52c4:	d9c01017 	ldw	r7,64(sp)
    52c8:	1009883a 	mov	r4,r2
    52cc:	180b883a 	mov	r5,r3
    52d0:	000d4840 	call	d484 <__muldf3>
    52d4:	000d883a 	mov	r6,zero
    52d8:	01d00734 	movhi	r7,16412
    52dc:	1009883a 	mov	r4,r2
    52e0:	180b883a 	mov	r5,r3
    52e4:	000c0980 	call	c098 <__adddf3>
    52e8:	1021883a 	mov	r16,r2
    52ec:	d8800617 	ldw	r2,24(sp)
    52f0:	047f3034 	movhi	r17,64704
    52f4:	1c63883a 	add	r17,r3,r17
    52f8:	10031826 	beq	r2,zero,5f5c <_dtoa_r+0x1120>
    52fc:	d8c00517 	ldw	r3,20(sp)
    5300:	db000617 	ldw	r12,24(sp)
    5304:	d8c01315 	stw	r3,76(sp)
    5308:	d9000b17 	ldw	r4,44(sp)
    530c:	20038f26 	beq	r4,zero,614c <_dtoa_r+0x1310>
    5310:	60bfffc4 	addi	r2,r12,-1
    5314:	100490fa 	slli	r2,r2,3
    5318:	00c00074 	movhi	r3,1
    531c:	18c63604 	addi	r3,r3,6360
    5320:	1885883a 	add	r2,r3,r2
    5324:	11800017 	ldw	r6,0(r2)
    5328:	11c00117 	ldw	r7,4(r2)
    532c:	d8800717 	ldw	r2,28(sp)
    5330:	0009883a 	mov	r4,zero
    5334:	014ff834 	movhi	r5,16352
    5338:	db001615 	stw	r12,88(sp)
    533c:	15c00044 	addi	r23,r2,1
    5340:	000c9440 	call	c944 <__divdf3>
    5344:	800d883a 	mov	r6,r16
    5348:	880f883a 	mov	r7,r17
    534c:	1009883a 	mov	r4,r2
    5350:	180b883a 	mov	r5,r3
    5354:	000db9c0 	call	db9c <__subdf3>
    5358:	d9401017 	ldw	r5,64(sp)
    535c:	d9000f17 	ldw	r4,60(sp)
    5360:	102b883a 	mov	r21,r2
    5364:	d8c01215 	stw	r3,72(sp)
    5368:	000e4980 	call	e498 <__fixdfsi>
    536c:	1009883a 	mov	r4,r2
    5370:	1029883a 	mov	r20,r2
    5374:	000e5180 	call	e518 <__floatsidf>
    5378:	d9000f17 	ldw	r4,60(sp)
    537c:	d9401017 	ldw	r5,64(sp)
    5380:	100d883a 	mov	r6,r2
    5384:	180f883a 	mov	r7,r3
    5388:	000db9c0 	call	db9c <__subdf3>
    538c:	1823883a 	mov	r17,r3
    5390:	d8c00717 	ldw	r3,28(sp)
    5394:	d9401217 	ldw	r5,72(sp)
    5398:	a2000c04 	addi	r8,r20,48
    539c:	1021883a 	mov	r16,r2
    53a0:	1a000005 	stb	r8,0(r3)
    53a4:	800d883a 	mov	r6,r16
    53a8:	880f883a 	mov	r7,r17
    53ac:	a809883a 	mov	r4,r21
    53b0:	4029883a 	mov	r20,r8
    53b4:	000d2b40 	call	d2b4 <__gedf2>
    53b8:	00841d16 	blt	zero,r2,6430 <_dtoa_r+0x15f4>
    53bc:	800d883a 	mov	r6,r16
    53c0:	880f883a 	mov	r7,r17
    53c4:	0009883a 	mov	r4,zero
    53c8:	014ffc34 	movhi	r5,16368
    53cc:	000db9c0 	call	db9c <__subdf3>
    53d0:	d9401217 	ldw	r5,72(sp)
    53d4:	100d883a 	mov	r6,r2
    53d8:	180f883a 	mov	r7,r3
    53dc:	a809883a 	mov	r4,r21
    53e0:	000d2b40 	call	d2b4 <__gedf2>
    53e4:	db001617 	ldw	r12,88(sp)
    53e8:	00840e16 	blt	zero,r2,6424 <_dtoa_r+0x15e8>
    53ec:	00800044 	movi	r2,1
    53f0:	13006b0e 	bge	r2,r12,55a0 <_dtoa_r+0x764>
    53f4:	d9000717 	ldw	r4,28(sp)
    53f8:	dd800f15 	stw	r22,60(sp)
    53fc:	dcc01015 	stw	r19,64(sp)
    5400:	2319883a 	add	r12,r4,r12
    5404:	dcc01217 	ldw	r19,72(sp)
    5408:	602d883a 	mov	r22,r12
    540c:	dc801215 	stw	r18,72(sp)
    5410:	b825883a 	mov	r18,r23
    5414:	00000906 	br	543c <_dtoa_r+0x600>
    5418:	000db9c0 	call	db9c <__subdf3>
    541c:	a80d883a 	mov	r6,r21
    5420:	980f883a 	mov	r7,r19
    5424:	1009883a 	mov	r4,r2
    5428:	180b883a 	mov	r5,r3
    542c:	000d3900 	call	d390 <__ledf2>
    5430:	1003e816 	blt	r2,zero,63d4 <_dtoa_r+0x1598>
    5434:	b825883a 	mov	r18,r23
    5438:	bd83e926 	beq	r23,r22,63e0 <_dtoa_r+0x15a4>
    543c:	a809883a 	mov	r4,r21
    5440:	980b883a 	mov	r5,r19
    5444:	000d883a 	mov	r6,zero
    5448:	01d00934 	movhi	r7,16420
    544c:	000d4840 	call	d484 <__muldf3>
    5450:	000d883a 	mov	r6,zero
    5454:	01d00934 	movhi	r7,16420
    5458:	8009883a 	mov	r4,r16
    545c:	880b883a 	mov	r5,r17
    5460:	102b883a 	mov	r21,r2
    5464:	1827883a 	mov	r19,r3
    5468:	000d4840 	call	d484 <__muldf3>
    546c:	180b883a 	mov	r5,r3
    5470:	1009883a 	mov	r4,r2
    5474:	1821883a 	mov	r16,r3
    5478:	1023883a 	mov	r17,r2
    547c:	000e4980 	call	e498 <__fixdfsi>
    5480:	1009883a 	mov	r4,r2
    5484:	1029883a 	mov	r20,r2
    5488:	000e5180 	call	e518 <__floatsidf>
    548c:	8809883a 	mov	r4,r17
    5490:	800b883a 	mov	r5,r16
    5494:	100d883a 	mov	r6,r2
    5498:	180f883a 	mov	r7,r3
    549c:	000db9c0 	call	db9c <__subdf3>
    54a0:	a5000c04 	addi	r20,r20,48
    54a4:	a80d883a 	mov	r6,r21
    54a8:	980f883a 	mov	r7,r19
    54ac:	1009883a 	mov	r4,r2
    54b0:	180b883a 	mov	r5,r3
    54b4:	95000005 	stb	r20,0(r18)
    54b8:	1021883a 	mov	r16,r2
    54bc:	1823883a 	mov	r17,r3
    54c0:	000d3900 	call	d390 <__ledf2>
    54c4:	bdc00044 	addi	r23,r23,1
    54c8:	800d883a 	mov	r6,r16
    54cc:	880f883a 	mov	r7,r17
    54d0:	0009883a 	mov	r4,zero
    54d4:	014ffc34 	movhi	r5,16368
    54d8:	103fcf0e 	bge	r2,zero,5418 <__alt_data_end+0xff005418>
    54dc:	d8c01317 	ldw	r3,76(sp)
    54e0:	d8c00515 	stw	r3,20(sp)
    54e4:	d9400917 	ldw	r5,36(sp)
    54e8:	e009883a 	mov	r4,fp
    54ec:	0007d740 	call	7d74 <_Bfree>
    54f0:	d9000517 	ldw	r4,20(sp)
    54f4:	d9802317 	ldw	r6,140(sp)
    54f8:	d9c02517 	ldw	r7,148(sp)
    54fc:	b8000005 	stb	zero,0(r23)
    5500:	20800044 	addi	r2,r4,1
    5504:	30800015 	stw	r2,0(r6)
    5508:	3802aa26 	beq	r7,zero,5fb4 <_dtoa_r+0x1178>
    550c:	3dc00015 	stw	r23,0(r7)
    5510:	d8800717 	ldw	r2,28(sp)
    5514:	003e7906 	br	4efc <__alt_data_end+0xff004efc>
    5518:	00800434 	movhi	r2,16
    551c:	10bfffc4 	addi	r2,r2,-1
    5520:	88a2703a 	and	r17,r17,r2
    5524:	883e851e 	bne	r17,zero,4f3c <__alt_data_end+0xff004f3c>
    5528:	00800074 	movhi	r2,1
    552c:	10861704 	addi	r2,r2,6236
    5530:	003e8406 	br	4f44 <__alt_data_end+0xff004f44>
    5534:	10c00204 	addi	r3,r2,8
    5538:	003e8706 	br	4f58 <__alt_data_end+0xff004f58>
    553c:	01400434 	movhi	r5,16
    5540:	297fffc4 	addi	r5,r5,-1
    5544:	994a703a 	and	r5,r19,r5
    5548:	9009883a 	mov	r4,r18
    554c:	843f0044 	addi	r16,r16,-1023
    5550:	294ffc34 	orhi	r5,r5,16368
    5554:	dd800217 	ldw	r22,8(sp)
    5558:	d8001115 	stw	zero,68(sp)
    555c:	003ea506 	br	4ff4 <__alt_data_end+0xff004ff4>
    5560:	00800074 	movhi	r2,1
    5564:	10860e04 	addi	r2,r2,6200
    5568:	003e6406 	br	4efc <__alt_data_end+0xff004efc>
    556c:	e0001115 	stw	zero,68(fp)
    5570:	000b883a 	mov	r5,zero
    5574:	e009883a 	mov	r4,fp
    5578:	0007ccc0 	call	7ccc <_Balloc>
    557c:	01bfffc4 	movi	r6,-1
    5580:	01c00044 	movi	r7,1
    5584:	d8800715 	stw	r2,28(sp)
    5588:	d9800c15 	stw	r6,48(sp)
    558c:	e0801015 	stw	r2,64(fp)
    5590:	d8000315 	stw	zero,12(sp)
    5594:	d9c00b15 	stw	r7,44(sp)
    5598:	d9800615 	stw	r6,24(sp)
    559c:	d8002215 	stw	zero,136(sp)
    55a0:	d8800117 	ldw	r2,4(sp)
    55a4:	10008916 	blt	r2,zero,57cc <_dtoa_r+0x990>
    55a8:	d9000517 	ldw	r4,20(sp)
    55ac:	00c00384 	movi	r3,14
    55b0:	19008616 	blt	r3,r4,57cc <_dtoa_r+0x990>
    55b4:	200490fa 	slli	r2,r4,3
    55b8:	00c00074 	movhi	r3,1
    55bc:	d9802217 	ldw	r6,136(sp)
    55c0:	18c63604 	addi	r3,r3,6360
    55c4:	1885883a 	add	r2,r3,r2
    55c8:	14000017 	ldw	r16,0(r2)
    55cc:	14400117 	ldw	r17,4(r2)
    55d0:	30016316 	blt	r6,zero,5b60 <_dtoa_r+0xd24>
    55d4:	800d883a 	mov	r6,r16
    55d8:	880f883a 	mov	r7,r17
    55dc:	9009883a 	mov	r4,r18
    55e0:	980b883a 	mov	r5,r19
    55e4:	000c9440 	call	c944 <__divdf3>
    55e8:	180b883a 	mov	r5,r3
    55ec:	1009883a 	mov	r4,r2
    55f0:	000e4980 	call	e498 <__fixdfsi>
    55f4:	1009883a 	mov	r4,r2
    55f8:	102b883a 	mov	r21,r2
    55fc:	000e5180 	call	e518 <__floatsidf>
    5600:	800d883a 	mov	r6,r16
    5604:	880f883a 	mov	r7,r17
    5608:	1009883a 	mov	r4,r2
    560c:	180b883a 	mov	r5,r3
    5610:	000d4840 	call	d484 <__muldf3>
    5614:	100d883a 	mov	r6,r2
    5618:	180f883a 	mov	r7,r3
    561c:	9009883a 	mov	r4,r18
    5620:	980b883a 	mov	r5,r19
    5624:	000db9c0 	call	db9c <__subdf3>
    5628:	d9c00717 	ldw	r7,28(sp)
    562c:	1009883a 	mov	r4,r2
    5630:	a8800c04 	addi	r2,r21,48
    5634:	38800005 	stb	r2,0(r7)
    5638:	3dc00044 	addi	r23,r7,1
    563c:	d9c00617 	ldw	r7,24(sp)
    5640:	01800044 	movi	r6,1
    5644:	180b883a 	mov	r5,r3
    5648:	2005883a 	mov	r2,r4
    564c:	39803826 	beq	r7,r6,5730 <_dtoa_r+0x8f4>
    5650:	000d883a 	mov	r6,zero
    5654:	01d00934 	movhi	r7,16420
    5658:	000d4840 	call	d484 <__muldf3>
    565c:	000d883a 	mov	r6,zero
    5660:	000f883a 	mov	r7,zero
    5664:	1009883a 	mov	r4,r2
    5668:	180b883a 	mov	r5,r3
    566c:	1025883a 	mov	r18,r2
    5670:	1827883a 	mov	r19,r3
    5674:	000d22c0 	call	d22c <__eqdf2>
    5678:	103f9a26 	beq	r2,zero,54e4 <__alt_data_end+0xff0054e4>
    567c:	d9c00617 	ldw	r7,24(sp)
    5680:	d8c00717 	ldw	r3,28(sp)
    5684:	b829883a 	mov	r20,r23
    5688:	38bfffc4 	addi	r2,r7,-1
    568c:	18ad883a 	add	r22,r3,r2
    5690:	00000a06 	br	56bc <_dtoa_r+0x880>
    5694:	000d4840 	call	d484 <__muldf3>
    5698:	000d883a 	mov	r6,zero
    569c:	000f883a 	mov	r7,zero
    56a0:	1009883a 	mov	r4,r2
    56a4:	180b883a 	mov	r5,r3
    56a8:	1025883a 	mov	r18,r2
    56ac:	1827883a 	mov	r19,r3
    56b0:	b829883a 	mov	r20,r23
    56b4:	000d22c0 	call	d22c <__eqdf2>
    56b8:	103f8a26 	beq	r2,zero,54e4 <__alt_data_end+0xff0054e4>
    56bc:	800d883a 	mov	r6,r16
    56c0:	880f883a 	mov	r7,r17
    56c4:	9009883a 	mov	r4,r18
    56c8:	980b883a 	mov	r5,r19
    56cc:	000c9440 	call	c944 <__divdf3>
    56d0:	180b883a 	mov	r5,r3
    56d4:	1009883a 	mov	r4,r2
    56d8:	000e4980 	call	e498 <__fixdfsi>
    56dc:	1009883a 	mov	r4,r2
    56e0:	102b883a 	mov	r21,r2
    56e4:	000e5180 	call	e518 <__floatsidf>
    56e8:	800d883a 	mov	r6,r16
    56ec:	880f883a 	mov	r7,r17
    56f0:	1009883a 	mov	r4,r2
    56f4:	180b883a 	mov	r5,r3
    56f8:	000d4840 	call	d484 <__muldf3>
    56fc:	100d883a 	mov	r6,r2
    5700:	180f883a 	mov	r7,r3
    5704:	9009883a 	mov	r4,r18
    5708:	980b883a 	mov	r5,r19
    570c:	000db9c0 	call	db9c <__subdf3>
    5710:	aa000c04 	addi	r8,r21,48
    5714:	a2000005 	stb	r8,0(r20)
    5718:	000d883a 	mov	r6,zero
    571c:	01d00934 	movhi	r7,16420
    5720:	1009883a 	mov	r4,r2
    5724:	180b883a 	mov	r5,r3
    5728:	a5c00044 	addi	r23,r20,1
    572c:	b53fd91e 	bne	r22,r20,5694 <__alt_data_end+0xff005694>
    5730:	100d883a 	mov	r6,r2
    5734:	180f883a 	mov	r7,r3
    5738:	1009883a 	mov	r4,r2
    573c:	180b883a 	mov	r5,r3
    5740:	000c0980 	call	c098 <__adddf3>
    5744:	100d883a 	mov	r6,r2
    5748:	180f883a 	mov	r7,r3
    574c:	8009883a 	mov	r4,r16
    5750:	880b883a 	mov	r5,r17
    5754:	1027883a 	mov	r19,r2
    5758:	1825883a 	mov	r18,r3
    575c:	000d3900 	call	d390 <__ledf2>
    5760:	10000816 	blt	r2,zero,5784 <_dtoa_r+0x948>
    5764:	980d883a 	mov	r6,r19
    5768:	900f883a 	mov	r7,r18
    576c:	8009883a 	mov	r4,r16
    5770:	880b883a 	mov	r5,r17
    5774:	000d22c0 	call	d22c <__eqdf2>
    5778:	103f5a1e 	bne	r2,zero,54e4 <__alt_data_end+0xff0054e4>
    577c:	ad40004c 	andi	r21,r21,1
    5780:	a83f5826 	beq	r21,zero,54e4 <__alt_data_end+0xff0054e4>
    5784:	bd3fffc3 	ldbu	r20,-1(r23)
    5788:	b8bfffc4 	addi	r2,r23,-1
    578c:	1007883a 	mov	r3,r2
    5790:	01400e44 	movi	r5,57
    5794:	d9800717 	ldw	r6,28(sp)
    5798:	00000506 	br	57b0 <_dtoa_r+0x974>
    579c:	18ffffc4 	addi	r3,r3,-1
    57a0:	11824726 	beq	r2,r6,60c0 <_dtoa_r+0x1284>
    57a4:	1d000003 	ldbu	r20,0(r3)
    57a8:	102f883a 	mov	r23,r2
    57ac:	10bfffc4 	addi	r2,r2,-1
    57b0:	a1003fcc 	andi	r4,r20,255
    57b4:	2100201c 	xori	r4,r4,128
    57b8:	213fe004 	addi	r4,r4,-128
    57bc:	217ff726 	beq	r4,r5,579c <__alt_data_end+0xff00579c>
    57c0:	a2000044 	addi	r8,r20,1
    57c4:	12000005 	stb	r8,0(r2)
    57c8:	003f4606 	br	54e4 <__alt_data_end+0xff0054e4>
    57cc:	d9000b17 	ldw	r4,44(sp)
    57d0:	2000c826 	beq	r4,zero,5af4 <_dtoa_r+0xcb8>
    57d4:	d9800317 	ldw	r6,12(sp)
    57d8:	00c00044 	movi	r3,1
    57dc:	1980f90e 	bge	r3,r6,5bc4 <_dtoa_r+0xd88>
    57e0:	d8800617 	ldw	r2,24(sp)
    57e4:	d8c00a17 	ldw	r3,40(sp)
    57e8:	157fffc4 	addi	r21,r2,-1
    57ec:	1d41f316 	blt	r3,r21,5fbc <_dtoa_r+0x1180>
    57f0:	1d6bc83a 	sub	r21,r3,r21
    57f4:	d9c00617 	ldw	r7,24(sp)
    57f8:	3802aa16 	blt	r7,zero,62a4 <_dtoa_r+0x1468>
    57fc:	dd000817 	ldw	r20,32(sp)
    5800:	d8800617 	ldw	r2,24(sp)
    5804:	d8c00817 	ldw	r3,32(sp)
    5808:	01400044 	movi	r5,1
    580c:	e009883a 	mov	r4,fp
    5810:	1887883a 	add	r3,r3,r2
    5814:	d8c00815 	stw	r3,32(sp)
    5818:	b0ad883a 	add	r22,r22,r2
    581c:	00080d80 	call	80d8 <__i2b>
    5820:	1023883a 	mov	r17,r2
    5824:	a0000826 	beq	r20,zero,5848 <_dtoa_r+0xa0c>
    5828:	0580070e 	bge	zero,r22,5848 <_dtoa_r+0xa0c>
    582c:	a005883a 	mov	r2,r20
    5830:	b500b916 	blt	r22,r20,5b18 <_dtoa_r+0xcdc>
    5834:	d9000817 	ldw	r4,32(sp)
    5838:	a0a9c83a 	sub	r20,r20,r2
    583c:	b0adc83a 	sub	r22,r22,r2
    5840:	2089c83a 	sub	r4,r4,r2
    5844:	d9000815 	stw	r4,32(sp)
    5848:	d9800a17 	ldw	r6,40(sp)
    584c:	0181810e 	bge	zero,r6,5e54 <_dtoa_r+0x1018>
    5850:	d9c00b17 	ldw	r7,44(sp)
    5854:	3800b326 	beq	r7,zero,5b24 <_dtoa_r+0xce8>
    5858:	a800b226 	beq	r21,zero,5b24 <_dtoa_r+0xce8>
    585c:	880b883a 	mov	r5,r17
    5860:	a80d883a 	mov	r6,r21
    5864:	e009883a 	mov	r4,fp
    5868:	000830c0 	call	830c <__pow5mult>
    586c:	d9800917 	ldw	r6,36(sp)
    5870:	100b883a 	mov	r5,r2
    5874:	e009883a 	mov	r4,fp
    5878:	1023883a 	mov	r17,r2
    587c:	00081140 	call	8114 <__multiply>
    5880:	1021883a 	mov	r16,r2
    5884:	d8800a17 	ldw	r2,40(sp)
    5888:	d9400917 	ldw	r5,36(sp)
    588c:	e009883a 	mov	r4,fp
    5890:	1545c83a 	sub	r2,r2,r21
    5894:	d8800a15 	stw	r2,40(sp)
    5898:	0007d740 	call	7d74 <_Bfree>
    589c:	d8c00a17 	ldw	r3,40(sp)
    58a0:	18009f1e 	bne	r3,zero,5b20 <_dtoa_r+0xce4>
    58a4:	05c00044 	movi	r23,1
    58a8:	e009883a 	mov	r4,fp
    58ac:	b80b883a 	mov	r5,r23
    58b0:	00080d80 	call	80d8 <__i2b>
    58b4:	d9000d17 	ldw	r4,52(sp)
    58b8:	102b883a 	mov	r21,r2
    58bc:	2000ce26 	beq	r4,zero,5bf8 <_dtoa_r+0xdbc>
    58c0:	200d883a 	mov	r6,r4
    58c4:	100b883a 	mov	r5,r2
    58c8:	e009883a 	mov	r4,fp
    58cc:	000830c0 	call	830c <__pow5mult>
    58d0:	d9800317 	ldw	r6,12(sp)
    58d4:	102b883a 	mov	r21,r2
    58d8:	b981810e 	bge	r23,r6,5ee0 <_dtoa_r+0x10a4>
    58dc:	0027883a 	mov	r19,zero
    58e0:	a8800417 	ldw	r2,16(r21)
    58e4:	05c00804 	movi	r23,32
    58e8:	10800104 	addi	r2,r2,4
    58ec:	1085883a 	add	r2,r2,r2
    58f0:	1085883a 	add	r2,r2,r2
    58f4:	a885883a 	add	r2,r21,r2
    58f8:	11000017 	ldw	r4,0(r2)
    58fc:	0007fc00 	call	7fc0 <__hi0bits>
    5900:	b885c83a 	sub	r2,r23,r2
    5904:	1585883a 	add	r2,r2,r22
    5908:	108007cc 	andi	r2,r2,31
    590c:	1000b326 	beq	r2,zero,5bdc <_dtoa_r+0xda0>
    5910:	00c00804 	movi	r3,32
    5914:	1887c83a 	sub	r3,r3,r2
    5918:	01000104 	movi	r4,4
    591c:	20c2cd0e 	bge	r4,r3,6454 <_dtoa_r+0x1618>
    5920:	00c00704 	movi	r3,28
    5924:	1885c83a 	sub	r2,r3,r2
    5928:	d8c00817 	ldw	r3,32(sp)
    592c:	a0a9883a 	add	r20,r20,r2
    5930:	b0ad883a 	add	r22,r22,r2
    5934:	1887883a 	add	r3,r3,r2
    5938:	d8c00815 	stw	r3,32(sp)
    593c:	d9800817 	ldw	r6,32(sp)
    5940:	0180040e 	bge	zero,r6,5954 <_dtoa_r+0xb18>
    5944:	800b883a 	mov	r5,r16
    5948:	e009883a 	mov	r4,fp
    594c:	000844c0 	call	844c <__lshift>
    5950:	1021883a 	mov	r16,r2
    5954:	0580050e 	bge	zero,r22,596c <_dtoa_r+0xb30>
    5958:	a80b883a 	mov	r5,r21
    595c:	b00d883a 	mov	r6,r22
    5960:	e009883a 	mov	r4,fp
    5964:	000844c0 	call	844c <__lshift>
    5968:	102b883a 	mov	r21,r2
    596c:	d9c00e17 	ldw	r7,56(sp)
    5970:	3801211e 	bne	r7,zero,5df8 <_dtoa_r+0xfbc>
    5974:	d9800617 	ldw	r6,24(sp)
    5978:	0181380e 	bge	zero,r6,5e5c <_dtoa_r+0x1020>
    597c:	d8c00b17 	ldw	r3,44(sp)
    5980:	1800ab1e 	bne	r3,zero,5c30 <_dtoa_r+0xdf4>
    5984:	dc800717 	ldw	r18,28(sp)
    5988:	dcc00617 	ldw	r19,24(sp)
    598c:	9029883a 	mov	r20,r18
    5990:	00000206 	br	599c <_dtoa_r+0xb60>
    5994:	0007d9c0 	call	7d9c <__multadd>
    5998:	1021883a 	mov	r16,r2
    599c:	a80b883a 	mov	r5,r21
    59a0:	8009883a 	mov	r4,r16
    59a4:	0004c3c0 	call	4c3c <quorem>
    59a8:	10800c04 	addi	r2,r2,48
    59ac:	90800005 	stb	r2,0(r18)
    59b0:	94800044 	addi	r18,r18,1
    59b4:	9507c83a 	sub	r3,r18,r20
    59b8:	000f883a 	mov	r7,zero
    59bc:	01800284 	movi	r6,10
    59c0:	800b883a 	mov	r5,r16
    59c4:	e009883a 	mov	r4,fp
    59c8:	1cfff216 	blt	r3,r19,5994 <__alt_data_end+0xff005994>
    59cc:	1011883a 	mov	r8,r2
    59d0:	d8800617 	ldw	r2,24(sp)
    59d4:	0082370e 	bge	zero,r2,62b4 <_dtoa_r+0x1478>
    59d8:	d9000717 	ldw	r4,28(sp)
    59dc:	0025883a 	mov	r18,zero
    59e0:	20af883a 	add	r23,r4,r2
    59e4:	01800044 	movi	r6,1
    59e8:	800b883a 	mov	r5,r16
    59ec:	e009883a 	mov	r4,fp
    59f0:	da001715 	stw	r8,92(sp)
    59f4:	000844c0 	call	844c <__lshift>
    59f8:	a80b883a 	mov	r5,r21
    59fc:	1009883a 	mov	r4,r2
    5a00:	d8800915 	stw	r2,36(sp)
    5a04:	00085940 	call	8594 <__mcmp>
    5a08:	da001717 	ldw	r8,92(sp)
    5a0c:	0081800e 	bge	zero,r2,6010 <_dtoa_r+0x11d4>
    5a10:	b93fffc3 	ldbu	r4,-1(r23)
    5a14:	b8bfffc4 	addi	r2,r23,-1
    5a18:	1007883a 	mov	r3,r2
    5a1c:	01800e44 	movi	r6,57
    5a20:	d9c00717 	ldw	r7,28(sp)
    5a24:	00000506 	br	5a3c <_dtoa_r+0xc00>
    5a28:	18ffffc4 	addi	r3,r3,-1
    5a2c:	11c12326 	beq	r2,r7,5ebc <_dtoa_r+0x1080>
    5a30:	19000003 	ldbu	r4,0(r3)
    5a34:	102f883a 	mov	r23,r2
    5a38:	10bfffc4 	addi	r2,r2,-1
    5a3c:	21403fcc 	andi	r5,r4,255
    5a40:	2940201c 	xori	r5,r5,128
    5a44:	297fe004 	addi	r5,r5,-128
    5a48:	29bff726 	beq	r5,r6,5a28 <__alt_data_end+0xff005a28>
    5a4c:	21000044 	addi	r4,r4,1
    5a50:	11000005 	stb	r4,0(r2)
    5a54:	a80b883a 	mov	r5,r21
    5a58:	e009883a 	mov	r4,fp
    5a5c:	0007d740 	call	7d74 <_Bfree>
    5a60:	883ea026 	beq	r17,zero,54e4 <__alt_data_end+0xff0054e4>
    5a64:	90000426 	beq	r18,zero,5a78 <_dtoa_r+0xc3c>
    5a68:	94400326 	beq	r18,r17,5a78 <_dtoa_r+0xc3c>
    5a6c:	900b883a 	mov	r5,r18
    5a70:	e009883a 	mov	r4,fp
    5a74:	0007d740 	call	7d74 <_Bfree>
    5a78:	880b883a 	mov	r5,r17
    5a7c:	e009883a 	mov	r4,fp
    5a80:	0007d740 	call	7d74 <_Bfree>
    5a84:	003e9706 	br	54e4 <__alt_data_end+0xff0054e4>
    5a88:	01800044 	movi	r6,1
    5a8c:	d9800e15 	stw	r6,56(sp)
    5a90:	003d9606 	br	50ec <__alt_data_end+0xff0050ec>
    5a94:	d8800817 	ldw	r2,32(sp)
    5a98:	d8c00517 	ldw	r3,20(sp)
    5a9c:	d8000d15 	stw	zero,52(sp)
    5aa0:	10c5c83a 	sub	r2,r2,r3
    5aa4:	00c9c83a 	sub	r4,zero,r3
    5aa8:	d8800815 	stw	r2,32(sp)
    5aac:	d9000a15 	stw	r4,40(sp)
    5ab0:	003d9706 	br	5110 <__alt_data_end+0xff005110>
    5ab4:	05adc83a 	sub	r22,zero,r22
    5ab8:	dd800815 	stw	r22,32(sp)
    5abc:	002d883a 	mov	r22,zero
    5ac0:	003d8e06 	br	50fc <__alt_data_end+0xff0050fc>
    5ac4:	d9000517 	ldw	r4,20(sp)
    5ac8:	000e5180 	call	e518 <__floatsidf>
    5acc:	100d883a 	mov	r6,r2
    5ad0:	180f883a 	mov	r7,r3
    5ad4:	a009883a 	mov	r4,r20
    5ad8:	880b883a 	mov	r5,r17
    5adc:	000d22c0 	call	d22c <__eqdf2>
    5ae0:	103d7126 	beq	r2,zero,50a8 <__alt_data_end+0xff0050a8>
    5ae4:	d9c00517 	ldw	r7,20(sp)
    5ae8:	39ffffc4 	addi	r7,r7,-1
    5aec:	d9c00515 	stw	r7,20(sp)
    5af0:	003d6d06 	br	50a8 <__alt_data_end+0xff0050a8>
    5af4:	dd400a17 	ldw	r21,40(sp)
    5af8:	dd000817 	ldw	r20,32(sp)
    5afc:	0023883a 	mov	r17,zero
    5b00:	003f4806 	br	5824 <__alt_data_end+0xff005824>
    5b04:	10e3c83a 	sub	r17,r2,r3
    5b08:	9448983a 	sll	r4,r18,r17
    5b0c:	003d3206 	br	4fd8 <__alt_data_end+0xff004fd8>
    5b10:	d8000e15 	stw	zero,56(sp)
    5b14:	003d7506 	br	50ec <__alt_data_end+0xff0050ec>
    5b18:	b005883a 	mov	r2,r22
    5b1c:	003f4506 	br	5834 <__alt_data_end+0xff005834>
    5b20:	dc000915 	stw	r16,36(sp)
    5b24:	d9800a17 	ldw	r6,40(sp)
    5b28:	d9400917 	ldw	r5,36(sp)
    5b2c:	e009883a 	mov	r4,fp
    5b30:	000830c0 	call	830c <__pow5mult>
    5b34:	1021883a 	mov	r16,r2
    5b38:	003f5a06 	br	58a4 <__alt_data_end+0xff0058a4>
    5b3c:	01c00044 	movi	r7,1
    5b40:	d9c00b15 	stw	r7,44(sp)
    5b44:	d8802217 	ldw	r2,136(sp)
    5b48:	0081280e 	bge	zero,r2,5fec <_dtoa_r+0x11b0>
    5b4c:	100d883a 	mov	r6,r2
    5b50:	1021883a 	mov	r16,r2
    5b54:	d8800c15 	stw	r2,48(sp)
    5b58:	d8800615 	stw	r2,24(sp)
    5b5c:	003d8806 	br	5180 <__alt_data_end+0xff005180>
    5b60:	d8800617 	ldw	r2,24(sp)
    5b64:	00be9b16 	blt	zero,r2,55d4 <__alt_data_end+0xff0055d4>
    5b68:	10010f1e 	bne	r2,zero,5fa8 <_dtoa_r+0x116c>
    5b6c:	880b883a 	mov	r5,r17
    5b70:	000d883a 	mov	r6,zero
    5b74:	01d00534 	movhi	r7,16404
    5b78:	8009883a 	mov	r4,r16
    5b7c:	000d4840 	call	d484 <__muldf3>
    5b80:	900d883a 	mov	r6,r18
    5b84:	980f883a 	mov	r7,r19
    5b88:	1009883a 	mov	r4,r2
    5b8c:	180b883a 	mov	r5,r3
    5b90:	000d2b40 	call	d2b4 <__gedf2>
    5b94:	002b883a 	mov	r21,zero
    5b98:	0023883a 	mov	r17,zero
    5b9c:	1000bf16 	blt	r2,zero,5e9c <_dtoa_r+0x1060>
    5ba0:	d9802217 	ldw	r6,136(sp)
    5ba4:	ddc00717 	ldw	r23,28(sp)
    5ba8:	018c303a 	nor	r6,zero,r6
    5bac:	d9800515 	stw	r6,20(sp)
    5bb0:	a80b883a 	mov	r5,r21
    5bb4:	e009883a 	mov	r4,fp
    5bb8:	0007d740 	call	7d74 <_Bfree>
    5bbc:	883e4926 	beq	r17,zero,54e4 <__alt_data_end+0xff0054e4>
    5bc0:	003fad06 	br	5a78 <__alt_data_end+0xff005a78>
    5bc4:	d9c01117 	ldw	r7,68(sp)
    5bc8:	3801bc26 	beq	r7,zero,62bc <_dtoa_r+0x1480>
    5bcc:	10810cc4 	addi	r2,r2,1075
    5bd0:	dd400a17 	ldw	r21,40(sp)
    5bd4:	dd000817 	ldw	r20,32(sp)
    5bd8:	003f0a06 	br	5804 <__alt_data_end+0xff005804>
    5bdc:	00800704 	movi	r2,28
    5be0:	d9000817 	ldw	r4,32(sp)
    5be4:	a0a9883a 	add	r20,r20,r2
    5be8:	b0ad883a 	add	r22,r22,r2
    5bec:	2089883a 	add	r4,r4,r2
    5bf0:	d9000815 	stw	r4,32(sp)
    5bf4:	003f5106 	br	593c <__alt_data_end+0xff00593c>
    5bf8:	d8c00317 	ldw	r3,12(sp)
    5bfc:	b8c1fc0e 	bge	r23,r3,63f0 <_dtoa_r+0x15b4>
    5c00:	0027883a 	mov	r19,zero
    5c04:	b805883a 	mov	r2,r23
    5c08:	003f3e06 	br	5904 <__alt_data_end+0xff005904>
    5c0c:	880b883a 	mov	r5,r17
    5c10:	e009883a 	mov	r4,fp
    5c14:	000f883a 	mov	r7,zero
    5c18:	01800284 	movi	r6,10
    5c1c:	0007d9c0 	call	7d9c <__multadd>
    5c20:	d9000c17 	ldw	r4,48(sp)
    5c24:	1023883a 	mov	r17,r2
    5c28:	0102040e 	bge	zero,r4,643c <_dtoa_r+0x1600>
    5c2c:	d9000615 	stw	r4,24(sp)
    5c30:	0500050e 	bge	zero,r20,5c48 <_dtoa_r+0xe0c>
    5c34:	880b883a 	mov	r5,r17
    5c38:	a00d883a 	mov	r6,r20
    5c3c:	e009883a 	mov	r4,fp
    5c40:	000844c0 	call	844c <__lshift>
    5c44:	1023883a 	mov	r17,r2
    5c48:	9801241e 	bne	r19,zero,60dc <_dtoa_r+0x12a0>
    5c4c:	8829883a 	mov	r20,r17
    5c50:	d9000617 	ldw	r4,24(sp)
    5c54:	dcc00717 	ldw	r19,28(sp)
    5c58:	9480004c 	andi	r18,r18,1
    5c5c:	20bfffc4 	addi	r2,r4,-1
    5c60:	9885883a 	add	r2,r19,r2
    5c64:	d8800415 	stw	r2,16(sp)
    5c68:	dc800615 	stw	r18,24(sp)
    5c6c:	a80b883a 	mov	r5,r21
    5c70:	8009883a 	mov	r4,r16
    5c74:	0004c3c0 	call	4c3c <quorem>
    5c78:	880b883a 	mov	r5,r17
    5c7c:	8009883a 	mov	r4,r16
    5c80:	102f883a 	mov	r23,r2
    5c84:	00085940 	call	8594 <__mcmp>
    5c88:	a80b883a 	mov	r5,r21
    5c8c:	a00d883a 	mov	r6,r20
    5c90:	e009883a 	mov	r4,fp
    5c94:	102d883a 	mov	r22,r2
    5c98:	00085f40 	call	85f4 <__mdiff>
    5c9c:	1007883a 	mov	r3,r2
    5ca0:	10800317 	ldw	r2,12(r2)
    5ca4:	bc800c04 	addi	r18,r23,48
    5ca8:	180b883a 	mov	r5,r3
    5cac:	10004e1e 	bne	r2,zero,5de8 <_dtoa_r+0xfac>
    5cb0:	8009883a 	mov	r4,r16
    5cb4:	d8c01615 	stw	r3,88(sp)
    5cb8:	00085940 	call	8594 <__mcmp>
    5cbc:	d8c01617 	ldw	r3,88(sp)
    5cc0:	e009883a 	mov	r4,fp
    5cc4:	d8801615 	stw	r2,88(sp)
    5cc8:	180b883a 	mov	r5,r3
    5ccc:	0007d740 	call	7d74 <_Bfree>
    5cd0:	d8801617 	ldw	r2,88(sp)
    5cd4:	1000041e 	bne	r2,zero,5ce8 <_dtoa_r+0xeac>
    5cd8:	d9800317 	ldw	r6,12(sp)
    5cdc:	3000021e 	bne	r6,zero,5ce8 <_dtoa_r+0xeac>
    5ce0:	d8c00617 	ldw	r3,24(sp)
    5ce4:	18003726 	beq	r3,zero,5dc4 <_dtoa_r+0xf88>
    5ce8:	b0002016 	blt	r22,zero,5d6c <_dtoa_r+0xf30>
    5cec:	b000041e 	bne	r22,zero,5d00 <_dtoa_r+0xec4>
    5cf0:	d9000317 	ldw	r4,12(sp)
    5cf4:	2000021e 	bne	r4,zero,5d00 <_dtoa_r+0xec4>
    5cf8:	d8c00617 	ldw	r3,24(sp)
    5cfc:	18001b26 	beq	r3,zero,5d6c <_dtoa_r+0xf30>
    5d00:	00810716 	blt	zero,r2,6120 <_dtoa_r+0x12e4>
    5d04:	d8c00417 	ldw	r3,16(sp)
    5d08:	9d800044 	addi	r22,r19,1
    5d0c:	9c800005 	stb	r18,0(r19)
    5d10:	b02f883a 	mov	r23,r22
    5d14:	98c10626 	beq	r19,r3,6130 <_dtoa_r+0x12f4>
    5d18:	800b883a 	mov	r5,r16
    5d1c:	000f883a 	mov	r7,zero
    5d20:	01800284 	movi	r6,10
    5d24:	e009883a 	mov	r4,fp
    5d28:	0007d9c0 	call	7d9c <__multadd>
    5d2c:	1021883a 	mov	r16,r2
    5d30:	000f883a 	mov	r7,zero
    5d34:	01800284 	movi	r6,10
    5d38:	880b883a 	mov	r5,r17
    5d3c:	e009883a 	mov	r4,fp
    5d40:	8d002526 	beq	r17,r20,5dd8 <_dtoa_r+0xf9c>
    5d44:	0007d9c0 	call	7d9c <__multadd>
    5d48:	a00b883a 	mov	r5,r20
    5d4c:	000f883a 	mov	r7,zero
    5d50:	01800284 	movi	r6,10
    5d54:	e009883a 	mov	r4,fp
    5d58:	1023883a 	mov	r17,r2
    5d5c:	0007d9c0 	call	7d9c <__multadd>
    5d60:	1029883a 	mov	r20,r2
    5d64:	b027883a 	mov	r19,r22
    5d68:	003fc006 	br	5c6c <__alt_data_end+0xff005c6c>
    5d6c:	9011883a 	mov	r8,r18
    5d70:	00800e0e 	bge	zero,r2,5dac <_dtoa_r+0xf70>
    5d74:	800b883a 	mov	r5,r16
    5d78:	01800044 	movi	r6,1
    5d7c:	e009883a 	mov	r4,fp
    5d80:	da001715 	stw	r8,92(sp)
    5d84:	000844c0 	call	844c <__lshift>
    5d88:	a80b883a 	mov	r5,r21
    5d8c:	1009883a 	mov	r4,r2
    5d90:	1021883a 	mov	r16,r2
    5d94:	00085940 	call	8594 <__mcmp>
    5d98:	da001717 	ldw	r8,92(sp)
    5d9c:	0081960e 	bge	zero,r2,63f8 <_dtoa_r+0x15bc>
    5da0:	00800e44 	movi	r2,57
    5da4:	40817026 	beq	r8,r2,6368 <_dtoa_r+0x152c>
    5da8:	ba000c44 	addi	r8,r23,49
    5dac:	8825883a 	mov	r18,r17
    5db0:	9dc00044 	addi	r23,r19,1
    5db4:	9a000005 	stb	r8,0(r19)
    5db8:	a023883a 	mov	r17,r20
    5dbc:	dc000915 	stw	r16,36(sp)
    5dc0:	003f2406 	br	5a54 <__alt_data_end+0xff005a54>
    5dc4:	00800e44 	movi	r2,57
    5dc8:	9011883a 	mov	r8,r18
    5dcc:	90816626 	beq	r18,r2,6368 <_dtoa_r+0x152c>
    5dd0:	05bff516 	blt	zero,r22,5da8 <__alt_data_end+0xff005da8>
    5dd4:	003ff506 	br	5dac <__alt_data_end+0xff005dac>
    5dd8:	0007d9c0 	call	7d9c <__multadd>
    5ddc:	1023883a 	mov	r17,r2
    5de0:	1029883a 	mov	r20,r2
    5de4:	003fdf06 	br	5d64 <__alt_data_end+0xff005d64>
    5de8:	e009883a 	mov	r4,fp
    5dec:	0007d740 	call	7d74 <_Bfree>
    5df0:	00800044 	movi	r2,1
    5df4:	003fbc06 	br	5ce8 <__alt_data_end+0xff005ce8>
    5df8:	a80b883a 	mov	r5,r21
    5dfc:	8009883a 	mov	r4,r16
    5e00:	00085940 	call	8594 <__mcmp>
    5e04:	103edb0e 	bge	r2,zero,5974 <__alt_data_end+0xff005974>
    5e08:	800b883a 	mov	r5,r16
    5e0c:	000f883a 	mov	r7,zero
    5e10:	01800284 	movi	r6,10
    5e14:	e009883a 	mov	r4,fp
    5e18:	0007d9c0 	call	7d9c <__multadd>
    5e1c:	1021883a 	mov	r16,r2
    5e20:	d8800517 	ldw	r2,20(sp)
    5e24:	d8c00b17 	ldw	r3,44(sp)
    5e28:	10bfffc4 	addi	r2,r2,-1
    5e2c:	d8800515 	stw	r2,20(sp)
    5e30:	183f761e 	bne	r3,zero,5c0c <__alt_data_end+0xff005c0c>
    5e34:	d9000c17 	ldw	r4,48(sp)
    5e38:	0101730e 	bge	zero,r4,6408 <_dtoa_r+0x15cc>
    5e3c:	d9000615 	stw	r4,24(sp)
    5e40:	003ed006 	br	5984 <__alt_data_end+0xff005984>
    5e44:	00800084 	movi	r2,2
    5e48:	3081861e 	bne	r6,r2,6464 <_dtoa_r+0x1628>
    5e4c:	d8000b15 	stw	zero,44(sp)
    5e50:	003f3c06 	br	5b44 <__alt_data_end+0xff005b44>
    5e54:	dc000917 	ldw	r16,36(sp)
    5e58:	003e9206 	br	58a4 <__alt_data_end+0xff0058a4>
    5e5c:	d9c00317 	ldw	r7,12(sp)
    5e60:	00800084 	movi	r2,2
    5e64:	11fec50e 	bge	r2,r7,597c <__alt_data_end+0xff00597c>
    5e68:	d9000617 	ldw	r4,24(sp)
    5e6c:	20013c1e 	bne	r4,zero,6360 <_dtoa_r+0x1524>
    5e70:	a80b883a 	mov	r5,r21
    5e74:	000f883a 	mov	r7,zero
    5e78:	01800144 	movi	r6,5
    5e7c:	e009883a 	mov	r4,fp
    5e80:	0007d9c0 	call	7d9c <__multadd>
    5e84:	100b883a 	mov	r5,r2
    5e88:	8009883a 	mov	r4,r16
    5e8c:	102b883a 	mov	r21,r2
    5e90:	00085940 	call	8594 <__mcmp>
    5e94:	dc000915 	stw	r16,36(sp)
    5e98:	00bf410e 	bge	zero,r2,5ba0 <__alt_data_end+0xff005ba0>
    5e9c:	d9c00717 	ldw	r7,28(sp)
    5ea0:	00800c44 	movi	r2,49
    5ea4:	38800005 	stb	r2,0(r7)
    5ea8:	d8800517 	ldw	r2,20(sp)
    5eac:	3dc00044 	addi	r23,r7,1
    5eb0:	10800044 	addi	r2,r2,1
    5eb4:	d8800515 	stw	r2,20(sp)
    5eb8:	003f3d06 	br	5bb0 <__alt_data_end+0xff005bb0>
    5ebc:	d9800517 	ldw	r6,20(sp)
    5ec0:	d9c00717 	ldw	r7,28(sp)
    5ec4:	00800c44 	movi	r2,49
    5ec8:	31800044 	addi	r6,r6,1
    5ecc:	d9800515 	stw	r6,20(sp)
    5ed0:	38800005 	stb	r2,0(r7)
    5ed4:	003edf06 	br	5a54 <__alt_data_end+0xff005a54>
    5ed8:	d8000b15 	stw	zero,44(sp)
    5edc:	003c9f06 	br	515c <__alt_data_end+0xff00515c>
    5ee0:	903e7e1e 	bne	r18,zero,58dc <__alt_data_end+0xff0058dc>
    5ee4:	00800434 	movhi	r2,16
    5ee8:	10bfffc4 	addi	r2,r2,-1
    5eec:	9884703a 	and	r2,r19,r2
    5ef0:	1000ea1e 	bne	r2,zero,629c <_dtoa_r+0x1460>
    5ef4:	9cdffc2c 	andhi	r19,r19,32752
    5ef8:	9800e826 	beq	r19,zero,629c <_dtoa_r+0x1460>
    5efc:	d9c00817 	ldw	r7,32(sp)
    5f00:	b5800044 	addi	r22,r22,1
    5f04:	04c00044 	movi	r19,1
    5f08:	39c00044 	addi	r7,r7,1
    5f0c:	d9c00815 	stw	r7,32(sp)
    5f10:	d8800d17 	ldw	r2,52(sp)
    5f14:	103e721e 	bne	r2,zero,58e0 <__alt_data_end+0xff0058e0>
    5f18:	00800044 	movi	r2,1
    5f1c:	003e7906 	br	5904 <__alt_data_end+0xff005904>
    5f20:	8009883a 	mov	r4,r16
    5f24:	000e5180 	call	e518 <__floatsidf>
    5f28:	d9800f17 	ldw	r6,60(sp)
    5f2c:	d9c01017 	ldw	r7,64(sp)
    5f30:	1009883a 	mov	r4,r2
    5f34:	180b883a 	mov	r5,r3
    5f38:	000d4840 	call	d484 <__muldf3>
    5f3c:	000d883a 	mov	r6,zero
    5f40:	01d00734 	movhi	r7,16412
    5f44:	1009883a 	mov	r4,r2
    5f48:	180b883a 	mov	r5,r3
    5f4c:	000c0980 	call	c098 <__adddf3>
    5f50:	047f3034 	movhi	r17,64704
    5f54:	1021883a 	mov	r16,r2
    5f58:	1c63883a 	add	r17,r3,r17
    5f5c:	d9000f17 	ldw	r4,60(sp)
    5f60:	d9401017 	ldw	r5,64(sp)
    5f64:	000d883a 	mov	r6,zero
    5f68:	01d00534 	movhi	r7,16404
    5f6c:	000db9c0 	call	db9c <__subdf3>
    5f70:	800d883a 	mov	r6,r16
    5f74:	880f883a 	mov	r7,r17
    5f78:	1009883a 	mov	r4,r2
    5f7c:	180b883a 	mov	r5,r3
    5f80:	102b883a 	mov	r21,r2
    5f84:	1829883a 	mov	r20,r3
    5f88:	000d2b40 	call	d2b4 <__gedf2>
    5f8c:	00806c16 	blt	zero,r2,6140 <_dtoa_r+0x1304>
    5f90:	89e0003c 	xorhi	r7,r17,32768
    5f94:	800d883a 	mov	r6,r16
    5f98:	a809883a 	mov	r4,r21
    5f9c:	a00b883a 	mov	r5,r20
    5fa0:	000d3900 	call	d390 <__ledf2>
    5fa4:	103d7e0e 	bge	r2,zero,55a0 <__alt_data_end+0xff0055a0>
    5fa8:	002b883a 	mov	r21,zero
    5fac:	0023883a 	mov	r17,zero
    5fb0:	003efb06 	br	5ba0 <__alt_data_end+0xff005ba0>
    5fb4:	d8800717 	ldw	r2,28(sp)
    5fb8:	003bd006 	br	4efc <__alt_data_end+0xff004efc>
    5fbc:	d9000a17 	ldw	r4,40(sp)
    5fc0:	d9800d17 	ldw	r6,52(sp)
    5fc4:	dd400a15 	stw	r21,40(sp)
    5fc8:	a905c83a 	sub	r2,r21,r4
    5fcc:	308d883a 	add	r6,r6,r2
    5fd0:	d9800d15 	stw	r6,52(sp)
    5fd4:	002b883a 	mov	r21,zero
    5fd8:	003e0606 	br	57f4 <__alt_data_end+0xff0057f4>
    5fdc:	9023883a 	mov	r17,r18
    5fe0:	9829883a 	mov	r20,r19
    5fe4:	04000084 	movi	r16,2
    5fe8:	003c9206 	br	5234 <__alt_data_end+0xff005234>
    5fec:	04000044 	movi	r16,1
    5ff0:	dc000c15 	stw	r16,48(sp)
    5ff4:	dc000615 	stw	r16,24(sp)
    5ff8:	dc002215 	stw	r16,136(sp)
    5ffc:	e0001115 	stw	zero,68(fp)
    6000:	000b883a 	mov	r5,zero
    6004:	003c6906 	br	51ac <__alt_data_end+0xff0051ac>
    6008:	3021883a 	mov	r16,r6
    600c:	003ffb06 	br	5ffc <__alt_data_end+0xff005ffc>
    6010:	1000021e 	bne	r2,zero,601c <_dtoa_r+0x11e0>
    6014:	4200004c 	andi	r8,r8,1
    6018:	403e7d1e 	bne	r8,zero,5a10 <__alt_data_end+0xff005a10>
    601c:	01000c04 	movi	r4,48
    6020:	00000106 	br	6028 <_dtoa_r+0x11ec>
    6024:	102f883a 	mov	r23,r2
    6028:	b8bfffc4 	addi	r2,r23,-1
    602c:	10c00007 	ldb	r3,0(r2)
    6030:	193ffc26 	beq	r3,r4,6024 <__alt_data_end+0xff006024>
    6034:	003e8706 	br	5a54 <__alt_data_end+0xff005a54>
    6038:	d8800517 	ldw	r2,20(sp)
    603c:	00a3c83a 	sub	r17,zero,r2
    6040:	8800a426 	beq	r17,zero,62d4 <_dtoa_r+0x1498>
    6044:	888003cc 	andi	r2,r17,15
    6048:	100490fa 	slli	r2,r2,3
    604c:	00c00074 	movhi	r3,1
    6050:	18c63604 	addi	r3,r3,6360
    6054:	1885883a 	add	r2,r3,r2
    6058:	11800017 	ldw	r6,0(r2)
    605c:	11c00117 	ldw	r7,4(r2)
    6060:	9009883a 	mov	r4,r18
    6064:	980b883a 	mov	r5,r19
    6068:	8823d13a 	srai	r17,r17,4
    606c:	000d4840 	call	d484 <__muldf3>
    6070:	d8800f15 	stw	r2,60(sp)
    6074:	d8c01015 	stw	r3,64(sp)
    6078:	8800e826 	beq	r17,zero,641c <_dtoa_r+0x15e0>
    607c:	05000074 	movhi	r20,1
    6080:	a5062c04 	addi	r20,r20,6320
    6084:	04000084 	movi	r16,2
    6088:	8980004c 	andi	r6,r17,1
    608c:	1009883a 	mov	r4,r2
    6090:	8823d07a 	srai	r17,r17,1
    6094:	180b883a 	mov	r5,r3
    6098:	30000426 	beq	r6,zero,60ac <_dtoa_r+0x1270>
    609c:	a1800017 	ldw	r6,0(r20)
    60a0:	a1c00117 	ldw	r7,4(r20)
    60a4:	84000044 	addi	r16,r16,1
    60a8:	000d4840 	call	d484 <__muldf3>
    60ac:	a5000204 	addi	r20,r20,8
    60b0:	883ff51e 	bne	r17,zero,6088 <__alt_data_end+0xff006088>
    60b4:	d8800f15 	stw	r2,60(sp)
    60b8:	d8c01015 	stw	r3,64(sp)
    60bc:	003c7606 	br	5298 <__alt_data_end+0xff005298>
    60c0:	00c00c04 	movi	r3,48
    60c4:	10c00005 	stb	r3,0(r2)
    60c8:	d8c00517 	ldw	r3,20(sp)
    60cc:	bd3fffc3 	ldbu	r20,-1(r23)
    60d0:	18c00044 	addi	r3,r3,1
    60d4:	d8c00515 	stw	r3,20(sp)
    60d8:	003db906 	br	57c0 <__alt_data_end+0xff0057c0>
    60dc:	89400117 	ldw	r5,4(r17)
    60e0:	e009883a 	mov	r4,fp
    60e4:	0007ccc0 	call	7ccc <_Balloc>
    60e8:	89800417 	ldw	r6,16(r17)
    60ec:	89400304 	addi	r5,r17,12
    60f0:	11000304 	addi	r4,r2,12
    60f4:	31800084 	addi	r6,r6,2
    60f8:	318d883a 	add	r6,r6,r6
    60fc:	318d883a 	add	r6,r6,r6
    6100:	1027883a 	mov	r19,r2
    6104:	00079000 	call	7900 <memcpy>
    6108:	01800044 	movi	r6,1
    610c:	980b883a 	mov	r5,r19
    6110:	e009883a 	mov	r4,fp
    6114:	000844c0 	call	844c <__lshift>
    6118:	1029883a 	mov	r20,r2
    611c:	003ecc06 	br	5c50 <__alt_data_end+0xff005c50>
    6120:	00800e44 	movi	r2,57
    6124:	90809026 	beq	r18,r2,6368 <_dtoa_r+0x152c>
    6128:	92000044 	addi	r8,r18,1
    612c:	003f1f06 	br	5dac <__alt_data_end+0xff005dac>
    6130:	9011883a 	mov	r8,r18
    6134:	8825883a 	mov	r18,r17
    6138:	a023883a 	mov	r17,r20
    613c:	003e2906 	br	59e4 <__alt_data_end+0xff0059e4>
    6140:	002b883a 	mov	r21,zero
    6144:	0023883a 	mov	r17,zero
    6148:	003f5406 	br	5e9c <__alt_data_end+0xff005e9c>
    614c:	61bfffc4 	addi	r6,r12,-1
    6150:	300490fa 	slli	r2,r6,3
    6154:	00c00074 	movhi	r3,1
    6158:	18c63604 	addi	r3,r3,6360
    615c:	1885883a 	add	r2,r3,r2
    6160:	11000017 	ldw	r4,0(r2)
    6164:	11400117 	ldw	r5,4(r2)
    6168:	d8800717 	ldw	r2,28(sp)
    616c:	880f883a 	mov	r7,r17
    6170:	d9801215 	stw	r6,72(sp)
    6174:	800d883a 	mov	r6,r16
    6178:	db001615 	stw	r12,88(sp)
    617c:	15c00044 	addi	r23,r2,1
    6180:	000d4840 	call	d484 <__muldf3>
    6184:	d9401017 	ldw	r5,64(sp)
    6188:	d9000f17 	ldw	r4,60(sp)
    618c:	d8c01515 	stw	r3,84(sp)
    6190:	d8801415 	stw	r2,80(sp)
    6194:	000e4980 	call	e498 <__fixdfsi>
    6198:	1009883a 	mov	r4,r2
    619c:	1021883a 	mov	r16,r2
    61a0:	000e5180 	call	e518 <__floatsidf>
    61a4:	d9000f17 	ldw	r4,60(sp)
    61a8:	d9401017 	ldw	r5,64(sp)
    61ac:	100d883a 	mov	r6,r2
    61b0:	180f883a 	mov	r7,r3
    61b4:	000db9c0 	call	db9c <__subdf3>
    61b8:	1829883a 	mov	r20,r3
    61bc:	d8c00717 	ldw	r3,28(sp)
    61c0:	84000c04 	addi	r16,r16,48
    61c4:	1023883a 	mov	r17,r2
    61c8:	1c000005 	stb	r16,0(r3)
    61cc:	db001617 	ldw	r12,88(sp)
    61d0:	00800044 	movi	r2,1
    61d4:	60802226 	beq	r12,r2,6260 <_dtoa_r+0x1424>
    61d8:	d9c00717 	ldw	r7,28(sp)
    61dc:	8805883a 	mov	r2,r17
    61e0:	b82b883a 	mov	r21,r23
    61e4:	3b19883a 	add	r12,r7,r12
    61e8:	6023883a 	mov	r17,r12
    61ec:	a007883a 	mov	r3,r20
    61f0:	dc800f15 	stw	r18,60(sp)
    61f4:	000d883a 	mov	r6,zero
    61f8:	01d00934 	movhi	r7,16420
    61fc:	1009883a 	mov	r4,r2
    6200:	180b883a 	mov	r5,r3
    6204:	000d4840 	call	d484 <__muldf3>
    6208:	180b883a 	mov	r5,r3
    620c:	1009883a 	mov	r4,r2
    6210:	1829883a 	mov	r20,r3
    6214:	1025883a 	mov	r18,r2
    6218:	000e4980 	call	e498 <__fixdfsi>
    621c:	1009883a 	mov	r4,r2
    6220:	1021883a 	mov	r16,r2
    6224:	000e5180 	call	e518 <__floatsidf>
    6228:	100d883a 	mov	r6,r2
    622c:	180f883a 	mov	r7,r3
    6230:	9009883a 	mov	r4,r18
    6234:	a00b883a 	mov	r5,r20
    6238:	84000c04 	addi	r16,r16,48
    623c:	000db9c0 	call	db9c <__subdf3>
    6240:	ad400044 	addi	r21,r21,1
    6244:	ac3fffc5 	stb	r16,-1(r21)
    6248:	ac7fea1e 	bne	r21,r17,61f4 <__alt_data_end+0xff0061f4>
    624c:	1023883a 	mov	r17,r2
    6250:	d8801217 	ldw	r2,72(sp)
    6254:	dc800f17 	ldw	r18,60(sp)
    6258:	1829883a 	mov	r20,r3
    625c:	b8af883a 	add	r23,r23,r2
    6260:	d9001417 	ldw	r4,80(sp)
    6264:	d9401517 	ldw	r5,84(sp)
    6268:	000d883a 	mov	r6,zero
    626c:	01cff834 	movhi	r7,16352
    6270:	000c0980 	call	c098 <__adddf3>
    6274:	880d883a 	mov	r6,r17
    6278:	a00f883a 	mov	r7,r20
    627c:	1009883a 	mov	r4,r2
    6280:	180b883a 	mov	r5,r3
    6284:	000d3900 	call	d390 <__ledf2>
    6288:	10003e0e 	bge	r2,zero,6384 <_dtoa_r+0x1548>
    628c:	d9001317 	ldw	r4,76(sp)
    6290:	bd3fffc3 	ldbu	r20,-1(r23)
    6294:	d9000515 	stw	r4,20(sp)
    6298:	003d3b06 	br	5788 <__alt_data_end+0xff005788>
    629c:	0027883a 	mov	r19,zero
    62a0:	003f1b06 	br	5f10 <__alt_data_end+0xff005f10>
    62a4:	d8800817 	ldw	r2,32(sp)
    62a8:	11e9c83a 	sub	r20,r2,r7
    62ac:	0005883a 	mov	r2,zero
    62b0:	003d5406 	br	5804 <__alt_data_end+0xff005804>
    62b4:	00800044 	movi	r2,1
    62b8:	003dc706 	br	59d8 <__alt_data_end+0xff0059d8>
    62bc:	d8c00217 	ldw	r3,8(sp)
    62c0:	00800d84 	movi	r2,54
    62c4:	dd400a17 	ldw	r21,40(sp)
    62c8:	10c5c83a 	sub	r2,r2,r3
    62cc:	dd000817 	ldw	r20,32(sp)
    62d0:	003d4c06 	br	5804 <__alt_data_end+0xff005804>
    62d4:	dc800f15 	stw	r18,60(sp)
    62d8:	dcc01015 	stw	r19,64(sp)
    62dc:	04000084 	movi	r16,2
    62e0:	003bed06 	br	5298 <__alt_data_end+0xff005298>
    62e4:	d9000617 	ldw	r4,24(sp)
    62e8:	203f0d26 	beq	r4,zero,5f20 <__alt_data_end+0xff005f20>
    62ec:	d9800c17 	ldw	r6,48(sp)
    62f0:	01bcab0e 	bge	zero,r6,55a0 <__alt_data_end+0xff0055a0>
    62f4:	d9401017 	ldw	r5,64(sp)
    62f8:	d9000f17 	ldw	r4,60(sp)
    62fc:	000d883a 	mov	r6,zero
    6300:	01d00934 	movhi	r7,16420
    6304:	000d4840 	call	d484 <__muldf3>
    6308:	81000044 	addi	r4,r16,1
    630c:	d8800f15 	stw	r2,60(sp)
    6310:	d8c01015 	stw	r3,64(sp)
    6314:	000e5180 	call	e518 <__floatsidf>
    6318:	d9800f17 	ldw	r6,60(sp)
    631c:	d9c01017 	ldw	r7,64(sp)
    6320:	1009883a 	mov	r4,r2
    6324:	180b883a 	mov	r5,r3
    6328:	000d4840 	call	d484 <__muldf3>
    632c:	01d00734 	movhi	r7,16412
    6330:	000d883a 	mov	r6,zero
    6334:	1009883a 	mov	r4,r2
    6338:	180b883a 	mov	r5,r3
    633c:	000c0980 	call	c098 <__adddf3>
    6340:	d9c00517 	ldw	r7,20(sp)
    6344:	047f3034 	movhi	r17,64704
    6348:	1021883a 	mov	r16,r2
    634c:	39ffffc4 	addi	r7,r7,-1
    6350:	d9c01315 	stw	r7,76(sp)
    6354:	1c63883a 	add	r17,r3,r17
    6358:	db000c17 	ldw	r12,48(sp)
    635c:	003bea06 	br	5308 <__alt_data_end+0xff005308>
    6360:	dc000915 	stw	r16,36(sp)
    6364:	003e0e06 	br	5ba0 <__alt_data_end+0xff005ba0>
    6368:	01000e44 	movi	r4,57
    636c:	8825883a 	mov	r18,r17
    6370:	9dc00044 	addi	r23,r19,1
    6374:	99000005 	stb	r4,0(r19)
    6378:	a023883a 	mov	r17,r20
    637c:	dc000915 	stw	r16,36(sp)
    6380:	003da406 	br	5a14 <__alt_data_end+0xff005a14>
    6384:	d9801417 	ldw	r6,80(sp)
    6388:	d9c01517 	ldw	r7,84(sp)
    638c:	0009883a 	mov	r4,zero
    6390:	014ff834 	movhi	r5,16352
    6394:	000db9c0 	call	db9c <__subdf3>
    6398:	880d883a 	mov	r6,r17
    639c:	a00f883a 	mov	r7,r20
    63a0:	1009883a 	mov	r4,r2
    63a4:	180b883a 	mov	r5,r3
    63a8:	000d2b40 	call	d2b4 <__gedf2>
    63ac:	00bc7c0e 	bge	zero,r2,55a0 <__alt_data_end+0xff0055a0>
    63b0:	01000c04 	movi	r4,48
    63b4:	00000106 	br	63bc <_dtoa_r+0x1580>
    63b8:	102f883a 	mov	r23,r2
    63bc:	b8bfffc4 	addi	r2,r23,-1
    63c0:	10c00007 	ldb	r3,0(r2)
    63c4:	193ffc26 	beq	r3,r4,63b8 <__alt_data_end+0xff0063b8>
    63c8:	d9801317 	ldw	r6,76(sp)
    63cc:	d9800515 	stw	r6,20(sp)
    63d0:	003c4406 	br	54e4 <__alt_data_end+0xff0054e4>
    63d4:	d9801317 	ldw	r6,76(sp)
    63d8:	d9800515 	stw	r6,20(sp)
    63dc:	003cea06 	br	5788 <__alt_data_end+0xff005788>
    63e0:	dd800f17 	ldw	r22,60(sp)
    63e4:	dcc01017 	ldw	r19,64(sp)
    63e8:	dc801217 	ldw	r18,72(sp)
    63ec:	003c6c06 	br	55a0 <__alt_data_end+0xff0055a0>
    63f0:	903e031e 	bne	r18,zero,5c00 <__alt_data_end+0xff005c00>
    63f4:	003ebb06 	br	5ee4 <__alt_data_end+0xff005ee4>
    63f8:	103e6c1e 	bne	r2,zero,5dac <__alt_data_end+0xff005dac>
    63fc:	4080004c 	andi	r2,r8,1
    6400:	103e6a26 	beq	r2,zero,5dac <__alt_data_end+0xff005dac>
    6404:	003e6606 	br	5da0 <__alt_data_end+0xff005da0>
    6408:	d8c00317 	ldw	r3,12(sp)
    640c:	00800084 	movi	r2,2
    6410:	10c02916 	blt	r2,r3,64b8 <_dtoa_r+0x167c>
    6414:	d9000c17 	ldw	r4,48(sp)
    6418:	003e8806 	br	5e3c <__alt_data_end+0xff005e3c>
    641c:	04000084 	movi	r16,2
    6420:	003b9d06 	br	5298 <__alt_data_end+0xff005298>
    6424:	d9001317 	ldw	r4,76(sp)
    6428:	d9000515 	stw	r4,20(sp)
    642c:	003cd606 	br	5788 <__alt_data_end+0xff005788>
    6430:	d8801317 	ldw	r2,76(sp)
    6434:	d8800515 	stw	r2,20(sp)
    6438:	003c2a06 	br	54e4 <__alt_data_end+0xff0054e4>
    643c:	d9800317 	ldw	r6,12(sp)
    6440:	00800084 	movi	r2,2
    6444:	11801516 	blt	r2,r6,649c <_dtoa_r+0x1660>
    6448:	d9c00c17 	ldw	r7,48(sp)
    644c:	d9c00615 	stw	r7,24(sp)
    6450:	003df706 	br	5c30 <__alt_data_end+0xff005c30>
    6454:	193d3926 	beq	r3,r4,593c <__alt_data_end+0xff00593c>
    6458:	00c00f04 	movi	r3,60
    645c:	1885c83a 	sub	r2,r3,r2
    6460:	003ddf06 	br	5be0 <__alt_data_end+0xff005be0>
    6464:	e009883a 	mov	r4,fp
    6468:	e0001115 	stw	zero,68(fp)
    646c:	000b883a 	mov	r5,zero
    6470:	0007ccc0 	call	7ccc <_Balloc>
    6474:	d8800715 	stw	r2,28(sp)
    6478:	d8c00717 	ldw	r3,28(sp)
    647c:	00bfffc4 	movi	r2,-1
    6480:	01000044 	movi	r4,1
    6484:	d8800c15 	stw	r2,48(sp)
    6488:	e0c01015 	stw	r3,64(fp)
    648c:	d9000b15 	stw	r4,44(sp)
    6490:	d8800615 	stw	r2,24(sp)
    6494:	d8002215 	stw	zero,136(sp)
    6498:	003c4106 	br	55a0 <__alt_data_end+0xff0055a0>
    649c:	d8c00c17 	ldw	r3,48(sp)
    64a0:	d8c00615 	stw	r3,24(sp)
    64a4:	003e7006 	br	5e68 <__alt_data_end+0xff005e68>
    64a8:	04400044 	movi	r17,1
    64ac:	003b2006 	br	5130 <__alt_data_end+0xff005130>
    64b0:	000b883a 	mov	r5,zero
    64b4:	003b3d06 	br	51ac <__alt_data_end+0xff0051ac>
    64b8:	d8800c17 	ldw	r2,48(sp)
    64bc:	d8800615 	stw	r2,24(sp)
    64c0:	003e6906 	br	5e68 <__alt_data_end+0xff005e68>

000064c4 <__sflush_r>:
    64c4:	2880030b 	ldhu	r2,12(r5)
    64c8:	defffb04 	addi	sp,sp,-20
    64cc:	dcc00315 	stw	r19,12(sp)
    64d0:	dc400115 	stw	r17,4(sp)
    64d4:	dfc00415 	stw	ra,16(sp)
    64d8:	dc800215 	stw	r18,8(sp)
    64dc:	dc000015 	stw	r16,0(sp)
    64e0:	10c0020c 	andi	r3,r2,8
    64e4:	2823883a 	mov	r17,r5
    64e8:	2027883a 	mov	r19,r4
    64ec:	1800311e 	bne	r3,zero,65b4 <__sflush_r+0xf0>
    64f0:	28c00117 	ldw	r3,4(r5)
    64f4:	10820014 	ori	r2,r2,2048
    64f8:	2880030d 	sth	r2,12(r5)
    64fc:	00c04b0e 	bge	zero,r3,662c <__sflush_r+0x168>
    6500:	8a000a17 	ldw	r8,40(r17)
    6504:	40002326 	beq	r8,zero,6594 <__sflush_r+0xd0>
    6508:	9c000017 	ldw	r16,0(r19)
    650c:	10c4000c 	andi	r3,r2,4096
    6510:	98000015 	stw	zero,0(r19)
    6514:	18004826 	beq	r3,zero,6638 <__sflush_r+0x174>
    6518:	89801417 	ldw	r6,80(r17)
    651c:	10c0010c 	andi	r3,r2,4
    6520:	18000626 	beq	r3,zero,653c <__sflush_r+0x78>
    6524:	88c00117 	ldw	r3,4(r17)
    6528:	88800c17 	ldw	r2,48(r17)
    652c:	30cdc83a 	sub	r6,r6,r3
    6530:	10000226 	beq	r2,zero,653c <__sflush_r+0x78>
    6534:	88800f17 	ldw	r2,60(r17)
    6538:	308dc83a 	sub	r6,r6,r2
    653c:	89400717 	ldw	r5,28(r17)
    6540:	000f883a 	mov	r7,zero
    6544:	9809883a 	mov	r4,r19
    6548:	403ee83a 	callr	r8
    654c:	00ffffc4 	movi	r3,-1
    6550:	10c04426 	beq	r2,r3,6664 <__sflush_r+0x1a0>
    6554:	88c0030b 	ldhu	r3,12(r17)
    6558:	89000417 	ldw	r4,16(r17)
    655c:	88000115 	stw	zero,4(r17)
    6560:	197dffcc 	andi	r5,r3,63487
    6564:	8940030d 	sth	r5,12(r17)
    6568:	89000015 	stw	r4,0(r17)
    656c:	18c4000c 	andi	r3,r3,4096
    6570:	18002c1e 	bne	r3,zero,6624 <__sflush_r+0x160>
    6574:	89400c17 	ldw	r5,48(r17)
    6578:	9c000015 	stw	r16,0(r19)
    657c:	28000526 	beq	r5,zero,6594 <__sflush_r+0xd0>
    6580:	88801004 	addi	r2,r17,64
    6584:	28800226 	beq	r5,r2,6590 <__sflush_r+0xcc>
    6588:	9809883a 	mov	r4,r19
    658c:	0006c300 	call	6c30 <_free_r>
    6590:	88000c15 	stw	zero,48(r17)
    6594:	0005883a 	mov	r2,zero
    6598:	dfc00417 	ldw	ra,16(sp)
    659c:	dcc00317 	ldw	r19,12(sp)
    65a0:	dc800217 	ldw	r18,8(sp)
    65a4:	dc400117 	ldw	r17,4(sp)
    65a8:	dc000017 	ldw	r16,0(sp)
    65ac:	dec00504 	addi	sp,sp,20
    65b0:	f800283a 	ret
    65b4:	2c800417 	ldw	r18,16(r5)
    65b8:	903ff626 	beq	r18,zero,6594 <__alt_data_end+0xff006594>
    65bc:	2c000017 	ldw	r16,0(r5)
    65c0:	108000cc 	andi	r2,r2,3
    65c4:	2c800015 	stw	r18,0(r5)
    65c8:	84a1c83a 	sub	r16,r16,r18
    65cc:	1000131e 	bne	r2,zero,661c <__sflush_r+0x158>
    65d0:	28800517 	ldw	r2,20(r5)
    65d4:	88800215 	stw	r2,8(r17)
    65d8:	04000316 	blt	zero,r16,65e8 <__sflush_r+0x124>
    65dc:	003fed06 	br	6594 <__alt_data_end+0xff006594>
    65e0:	90a5883a 	add	r18,r18,r2
    65e4:	043feb0e 	bge	zero,r16,6594 <__alt_data_end+0xff006594>
    65e8:	88800917 	ldw	r2,36(r17)
    65ec:	89400717 	ldw	r5,28(r17)
    65f0:	800f883a 	mov	r7,r16
    65f4:	900d883a 	mov	r6,r18
    65f8:	9809883a 	mov	r4,r19
    65fc:	103ee83a 	callr	r2
    6600:	80a1c83a 	sub	r16,r16,r2
    6604:	00bff616 	blt	zero,r2,65e0 <__alt_data_end+0xff0065e0>
    6608:	88c0030b 	ldhu	r3,12(r17)
    660c:	00bfffc4 	movi	r2,-1
    6610:	18c01014 	ori	r3,r3,64
    6614:	88c0030d 	sth	r3,12(r17)
    6618:	003fdf06 	br	6598 <__alt_data_end+0xff006598>
    661c:	0005883a 	mov	r2,zero
    6620:	003fec06 	br	65d4 <__alt_data_end+0xff0065d4>
    6624:	88801415 	stw	r2,80(r17)
    6628:	003fd206 	br	6574 <__alt_data_end+0xff006574>
    662c:	28c00f17 	ldw	r3,60(r5)
    6630:	00ffb316 	blt	zero,r3,6500 <__alt_data_end+0xff006500>
    6634:	003fd706 	br	6594 <__alt_data_end+0xff006594>
    6638:	89400717 	ldw	r5,28(r17)
    663c:	000d883a 	mov	r6,zero
    6640:	01c00044 	movi	r7,1
    6644:	9809883a 	mov	r4,r19
    6648:	403ee83a 	callr	r8
    664c:	100d883a 	mov	r6,r2
    6650:	00bfffc4 	movi	r2,-1
    6654:	30801426 	beq	r6,r2,66a8 <__sflush_r+0x1e4>
    6658:	8880030b 	ldhu	r2,12(r17)
    665c:	8a000a17 	ldw	r8,40(r17)
    6660:	003fae06 	br	651c <__alt_data_end+0xff00651c>
    6664:	98c00017 	ldw	r3,0(r19)
    6668:	183fba26 	beq	r3,zero,6554 <__alt_data_end+0xff006554>
    666c:	01000744 	movi	r4,29
    6670:	19000626 	beq	r3,r4,668c <__sflush_r+0x1c8>
    6674:	01000584 	movi	r4,22
    6678:	19000426 	beq	r3,r4,668c <__sflush_r+0x1c8>
    667c:	88c0030b 	ldhu	r3,12(r17)
    6680:	18c01014 	ori	r3,r3,64
    6684:	88c0030d 	sth	r3,12(r17)
    6688:	003fc306 	br	6598 <__alt_data_end+0xff006598>
    668c:	8880030b 	ldhu	r2,12(r17)
    6690:	88c00417 	ldw	r3,16(r17)
    6694:	88000115 	stw	zero,4(r17)
    6698:	10bdffcc 	andi	r2,r2,63487
    669c:	8880030d 	sth	r2,12(r17)
    66a0:	88c00015 	stw	r3,0(r17)
    66a4:	003fb306 	br	6574 <__alt_data_end+0xff006574>
    66a8:	98800017 	ldw	r2,0(r19)
    66ac:	103fea26 	beq	r2,zero,6658 <__alt_data_end+0xff006658>
    66b0:	00c00744 	movi	r3,29
    66b4:	10c00226 	beq	r2,r3,66c0 <__sflush_r+0x1fc>
    66b8:	00c00584 	movi	r3,22
    66bc:	10c0031e 	bne	r2,r3,66cc <__sflush_r+0x208>
    66c0:	9c000015 	stw	r16,0(r19)
    66c4:	0005883a 	mov	r2,zero
    66c8:	003fb306 	br	6598 <__alt_data_end+0xff006598>
    66cc:	88c0030b 	ldhu	r3,12(r17)
    66d0:	3005883a 	mov	r2,r6
    66d4:	18c01014 	ori	r3,r3,64
    66d8:	88c0030d 	sth	r3,12(r17)
    66dc:	003fae06 	br	6598 <__alt_data_end+0xff006598>

000066e0 <_fflush_r>:
    66e0:	defffd04 	addi	sp,sp,-12
    66e4:	dc000115 	stw	r16,4(sp)
    66e8:	dfc00215 	stw	ra,8(sp)
    66ec:	2021883a 	mov	r16,r4
    66f0:	20000226 	beq	r4,zero,66fc <_fflush_r+0x1c>
    66f4:	20800e17 	ldw	r2,56(r4)
    66f8:	10000c26 	beq	r2,zero,672c <_fflush_r+0x4c>
    66fc:	2880030f 	ldh	r2,12(r5)
    6700:	1000051e 	bne	r2,zero,6718 <_fflush_r+0x38>
    6704:	0005883a 	mov	r2,zero
    6708:	dfc00217 	ldw	ra,8(sp)
    670c:	dc000117 	ldw	r16,4(sp)
    6710:	dec00304 	addi	sp,sp,12
    6714:	f800283a 	ret
    6718:	8009883a 	mov	r4,r16
    671c:	dfc00217 	ldw	ra,8(sp)
    6720:	dc000117 	ldw	r16,4(sp)
    6724:	dec00304 	addi	sp,sp,12
    6728:	00064c41 	jmpi	64c4 <__sflush_r>
    672c:	d9400015 	stw	r5,0(sp)
    6730:	0006abc0 	call	6abc <__sinit>
    6734:	d9400017 	ldw	r5,0(sp)
    6738:	003ff006 	br	66fc <__alt_data_end+0xff0066fc>

0000673c <fflush>:
    673c:	20000526 	beq	r4,zero,6754 <fflush+0x18>
    6740:	00800074 	movhi	r2,1
    6744:	108d6b04 	addi	r2,r2,13740
    6748:	200b883a 	mov	r5,r4
    674c:	11000017 	ldw	r4,0(r2)
    6750:	00066e01 	jmpi	66e0 <_fflush_r>
    6754:	00800074 	movhi	r2,1
    6758:	108d6a04 	addi	r2,r2,13736
    675c:	11000017 	ldw	r4,0(r2)
    6760:	01400034 	movhi	r5,0
    6764:	2959b804 	addi	r5,r5,26336
    6768:	00074c01 	jmpi	74c0 <_fwalk_reent>

0000676c <__fp_unlock>:
    676c:	0005883a 	mov	r2,zero
    6770:	f800283a 	ret

00006774 <_cleanup_r>:
    6774:	01400074 	movhi	r5,1
    6778:	296b1e04 	addi	r5,r5,-21384
    677c:	00074c01 	jmpi	74c0 <_fwalk_reent>

00006780 <__sinit.part.1>:
    6780:	defff704 	addi	sp,sp,-36
    6784:	00c00034 	movhi	r3,0
    6788:	dfc00815 	stw	ra,32(sp)
    678c:	ddc00715 	stw	r23,28(sp)
    6790:	dd800615 	stw	r22,24(sp)
    6794:	dd400515 	stw	r21,20(sp)
    6798:	dd000415 	stw	r20,16(sp)
    679c:	dcc00315 	stw	r19,12(sp)
    67a0:	dc800215 	stw	r18,8(sp)
    67a4:	dc400115 	stw	r17,4(sp)
    67a8:	dc000015 	stw	r16,0(sp)
    67ac:	18d9dd04 	addi	r3,r3,26484
    67b0:	24000117 	ldw	r16,4(r4)
    67b4:	20c00f15 	stw	r3,60(r4)
    67b8:	2080bb04 	addi	r2,r4,748
    67bc:	00c000c4 	movi	r3,3
    67c0:	20c0b915 	stw	r3,740(r4)
    67c4:	2080ba15 	stw	r2,744(r4)
    67c8:	2000b815 	stw	zero,736(r4)
    67cc:	05c00204 	movi	r23,8
    67d0:	00800104 	movi	r2,4
    67d4:	2025883a 	mov	r18,r4
    67d8:	b80d883a 	mov	r6,r23
    67dc:	81001704 	addi	r4,r16,92
    67e0:	000b883a 	mov	r5,zero
    67e4:	80000015 	stw	zero,0(r16)
    67e8:	80000115 	stw	zero,4(r16)
    67ec:	80000215 	stw	zero,8(r16)
    67f0:	8080030d 	sth	r2,12(r16)
    67f4:	80001915 	stw	zero,100(r16)
    67f8:	8000038d 	sth	zero,14(r16)
    67fc:	80000415 	stw	zero,16(r16)
    6800:	80000515 	stw	zero,20(r16)
    6804:	80000615 	stw	zero,24(r16)
    6808:	0007ba40 	call	7ba4 <memset>
    680c:	05800074 	movhi	r22,1
    6810:	94400217 	ldw	r17,8(r18)
    6814:	05400074 	movhi	r21,1
    6818:	05000074 	movhi	r20,1
    681c:	04c00074 	movhi	r19,1
    6820:	b5a4a804 	addi	r22,r22,-28000
    6824:	ad64bf04 	addi	r21,r21,-27908
    6828:	a524de04 	addi	r20,r20,-27784
    682c:	9ce4f504 	addi	r19,r19,-27692
    6830:	85800815 	stw	r22,32(r16)
    6834:	85400915 	stw	r21,36(r16)
    6838:	85000a15 	stw	r20,40(r16)
    683c:	84c00b15 	stw	r19,44(r16)
    6840:	84000715 	stw	r16,28(r16)
    6844:	00800284 	movi	r2,10
    6848:	8880030d 	sth	r2,12(r17)
    684c:	00800044 	movi	r2,1
    6850:	b80d883a 	mov	r6,r23
    6854:	89001704 	addi	r4,r17,92
    6858:	000b883a 	mov	r5,zero
    685c:	88000015 	stw	zero,0(r17)
    6860:	88000115 	stw	zero,4(r17)
    6864:	88000215 	stw	zero,8(r17)
    6868:	88001915 	stw	zero,100(r17)
    686c:	8880038d 	sth	r2,14(r17)
    6870:	88000415 	stw	zero,16(r17)
    6874:	88000515 	stw	zero,20(r17)
    6878:	88000615 	stw	zero,24(r17)
    687c:	0007ba40 	call	7ba4 <memset>
    6880:	94000317 	ldw	r16,12(r18)
    6884:	00800484 	movi	r2,18
    6888:	8c400715 	stw	r17,28(r17)
    688c:	8d800815 	stw	r22,32(r17)
    6890:	8d400915 	stw	r21,36(r17)
    6894:	8d000a15 	stw	r20,40(r17)
    6898:	8cc00b15 	stw	r19,44(r17)
    689c:	8080030d 	sth	r2,12(r16)
    68a0:	00800084 	movi	r2,2
    68a4:	80000015 	stw	zero,0(r16)
    68a8:	80000115 	stw	zero,4(r16)
    68ac:	80000215 	stw	zero,8(r16)
    68b0:	80001915 	stw	zero,100(r16)
    68b4:	8080038d 	sth	r2,14(r16)
    68b8:	80000415 	stw	zero,16(r16)
    68bc:	80000515 	stw	zero,20(r16)
    68c0:	80000615 	stw	zero,24(r16)
    68c4:	b80d883a 	mov	r6,r23
    68c8:	000b883a 	mov	r5,zero
    68cc:	81001704 	addi	r4,r16,92
    68d0:	0007ba40 	call	7ba4 <memset>
    68d4:	00800044 	movi	r2,1
    68d8:	84000715 	stw	r16,28(r16)
    68dc:	85800815 	stw	r22,32(r16)
    68e0:	85400915 	stw	r21,36(r16)
    68e4:	85000a15 	stw	r20,40(r16)
    68e8:	84c00b15 	stw	r19,44(r16)
    68ec:	90800e15 	stw	r2,56(r18)
    68f0:	dfc00817 	ldw	ra,32(sp)
    68f4:	ddc00717 	ldw	r23,28(sp)
    68f8:	dd800617 	ldw	r22,24(sp)
    68fc:	dd400517 	ldw	r21,20(sp)
    6900:	dd000417 	ldw	r20,16(sp)
    6904:	dcc00317 	ldw	r19,12(sp)
    6908:	dc800217 	ldw	r18,8(sp)
    690c:	dc400117 	ldw	r17,4(sp)
    6910:	dc000017 	ldw	r16,0(sp)
    6914:	dec00904 	addi	sp,sp,36
    6918:	f800283a 	ret

0000691c <__fp_lock>:
    691c:	0005883a 	mov	r2,zero
    6920:	f800283a 	ret

00006924 <__sfmoreglue>:
    6924:	defffc04 	addi	sp,sp,-16
    6928:	dc400115 	stw	r17,4(sp)
    692c:	2c7fffc4 	addi	r17,r5,-1
    6930:	8c401a24 	muli	r17,r17,104
    6934:	dc800215 	stw	r18,8(sp)
    6938:	2825883a 	mov	r18,r5
    693c:	89401d04 	addi	r5,r17,116
    6940:	dc000015 	stw	r16,0(sp)
    6944:	dfc00315 	stw	ra,12(sp)
    6948:	0001de00 	call	1de0 <_malloc_r>
    694c:	1021883a 	mov	r16,r2
    6950:	10000726 	beq	r2,zero,6970 <__sfmoreglue+0x4c>
    6954:	11000304 	addi	r4,r2,12
    6958:	10000015 	stw	zero,0(r2)
    695c:	14800115 	stw	r18,4(r2)
    6960:	11000215 	stw	r4,8(r2)
    6964:	89801a04 	addi	r6,r17,104
    6968:	000b883a 	mov	r5,zero
    696c:	0007ba40 	call	7ba4 <memset>
    6970:	8005883a 	mov	r2,r16
    6974:	dfc00317 	ldw	ra,12(sp)
    6978:	dc800217 	ldw	r18,8(sp)
    697c:	dc400117 	ldw	r17,4(sp)
    6980:	dc000017 	ldw	r16,0(sp)
    6984:	dec00404 	addi	sp,sp,16
    6988:	f800283a 	ret

0000698c <__sfp>:
    698c:	defffb04 	addi	sp,sp,-20
    6990:	dc000015 	stw	r16,0(sp)
    6994:	04000074 	movhi	r16,1
    6998:	840d6a04 	addi	r16,r16,13736
    699c:	dcc00315 	stw	r19,12(sp)
    69a0:	2027883a 	mov	r19,r4
    69a4:	81000017 	ldw	r4,0(r16)
    69a8:	dfc00415 	stw	ra,16(sp)
    69ac:	dc800215 	stw	r18,8(sp)
    69b0:	20800e17 	ldw	r2,56(r4)
    69b4:	dc400115 	stw	r17,4(sp)
    69b8:	1000021e 	bne	r2,zero,69c4 <__sfp+0x38>
    69bc:	00067800 	call	6780 <__sinit.part.1>
    69c0:	81000017 	ldw	r4,0(r16)
    69c4:	2480b804 	addi	r18,r4,736
    69c8:	047fffc4 	movi	r17,-1
    69cc:	91000117 	ldw	r4,4(r18)
    69d0:	94000217 	ldw	r16,8(r18)
    69d4:	213fffc4 	addi	r4,r4,-1
    69d8:	20000a16 	blt	r4,zero,6a04 <__sfp+0x78>
    69dc:	8080030f 	ldh	r2,12(r16)
    69e0:	10000c26 	beq	r2,zero,6a14 <__sfp+0x88>
    69e4:	80c01d04 	addi	r3,r16,116
    69e8:	00000206 	br	69f4 <__sfp+0x68>
    69ec:	18bfe60f 	ldh	r2,-104(r3)
    69f0:	10000826 	beq	r2,zero,6a14 <__sfp+0x88>
    69f4:	213fffc4 	addi	r4,r4,-1
    69f8:	1c3ffd04 	addi	r16,r3,-12
    69fc:	18c01a04 	addi	r3,r3,104
    6a00:	247ffa1e 	bne	r4,r17,69ec <__alt_data_end+0xff0069ec>
    6a04:	90800017 	ldw	r2,0(r18)
    6a08:	10001d26 	beq	r2,zero,6a80 <__sfp+0xf4>
    6a0c:	1025883a 	mov	r18,r2
    6a10:	003fee06 	br	69cc <__alt_data_end+0xff0069cc>
    6a14:	00bfffc4 	movi	r2,-1
    6a18:	8080038d 	sth	r2,14(r16)
    6a1c:	00800044 	movi	r2,1
    6a20:	8080030d 	sth	r2,12(r16)
    6a24:	80001915 	stw	zero,100(r16)
    6a28:	80000015 	stw	zero,0(r16)
    6a2c:	80000215 	stw	zero,8(r16)
    6a30:	80000115 	stw	zero,4(r16)
    6a34:	80000415 	stw	zero,16(r16)
    6a38:	80000515 	stw	zero,20(r16)
    6a3c:	80000615 	stw	zero,24(r16)
    6a40:	01800204 	movi	r6,8
    6a44:	000b883a 	mov	r5,zero
    6a48:	81001704 	addi	r4,r16,92
    6a4c:	0007ba40 	call	7ba4 <memset>
    6a50:	8005883a 	mov	r2,r16
    6a54:	80000c15 	stw	zero,48(r16)
    6a58:	80000d15 	stw	zero,52(r16)
    6a5c:	80001115 	stw	zero,68(r16)
    6a60:	80001215 	stw	zero,72(r16)
    6a64:	dfc00417 	ldw	ra,16(sp)
    6a68:	dcc00317 	ldw	r19,12(sp)
    6a6c:	dc800217 	ldw	r18,8(sp)
    6a70:	dc400117 	ldw	r17,4(sp)
    6a74:	dc000017 	ldw	r16,0(sp)
    6a78:	dec00504 	addi	sp,sp,20
    6a7c:	f800283a 	ret
    6a80:	01400104 	movi	r5,4
    6a84:	9809883a 	mov	r4,r19
    6a88:	00069240 	call	6924 <__sfmoreglue>
    6a8c:	90800015 	stw	r2,0(r18)
    6a90:	103fde1e 	bne	r2,zero,6a0c <__alt_data_end+0xff006a0c>
    6a94:	00800304 	movi	r2,12
    6a98:	98800015 	stw	r2,0(r19)
    6a9c:	0005883a 	mov	r2,zero
    6aa0:	003ff006 	br	6a64 <__alt_data_end+0xff006a64>

00006aa4 <_cleanup>:
    6aa4:	00800074 	movhi	r2,1
    6aa8:	108d6a04 	addi	r2,r2,13736
    6aac:	11000017 	ldw	r4,0(r2)
    6ab0:	01400074 	movhi	r5,1
    6ab4:	296b1e04 	addi	r5,r5,-21384
    6ab8:	00074c01 	jmpi	74c0 <_fwalk_reent>

00006abc <__sinit>:
    6abc:	20800e17 	ldw	r2,56(r4)
    6ac0:	10000126 	beq	r2,zero,6ac8 <__sinit+0xc>
    6ac4:	f800283a 	ret
    6ac8:	00067801 	jmpi	6780 <__sinit.part.1>

00006acc <__sfp_lock_acquire>:
    6acc:	f800283a 	ret

00006ad0 <__sfp_lock_release>:
    6ad0:	f800283a 	ret

00006ad4 <__sinit_lock_acquire>:
    6ad4:	f800283a 	ret

00006ad8 <__sinit_lock_release>:
    6ad8:	f800283a 	ret

00006adc <__fp_lock_all>:
    6adc:	00800074 	movhi	r2,1
    6ae0:	108d6b04 	addi	r2,r2,13740
    6ae4:	11000017 	ldw	r4,0(r2)
    6ae8:	01400034 	movhi	r5,0
    6aec:	295a4704 	addi	r5,r5,26908
    6af0:	00073fc1 	jmpi	73fc <_fwalk>

00006af4 <__fp_unlock_all>:
    6af4:	00800074 	movhi	r2,1
    6af8:	108d6b04 	addi	r2,r2,13740
    6afc:	11000017 	ldw	r4,0(r2)
    6b00:	01400034 	movhi	r5,0
    6b04:	2959db04 	addi	r5,r5,26476
    6b08:	00073fc1 	jmpi	73fc <_fwalk>

00006b0c <_malloc_trim_r>:
    6b0c:	defffb04 	addi	sp,sp,-20
    6b10:	dcc00315 	stw	r19,12(sp)
    6b14:	04c00074 	movhi	r19,1
    6b18:	dc800215 	stw	r18,8(sp)
    6b1c:	dc400115 	stw	r17,4(sp)
    6b20:	dc000015 	stw	r16,0(sp)
    6b24:	dfc00415 	stw	ra,16(sp)
    6b28:	2821883a 	mov	r16,r5
    6b2c:	9cc6bb04 	addi	r19,r19,6892
    6b30:	2025883a 	mov	r18,r4
    6b34:	000ec5c0 	call	ec5c <__malloc_lock>
    6b38:	98800217 	ldw	r2,8(r19)
    6b3c:	14400117 	ldw	r17,4(r2)
    6b40:	00bfff04 	movi	r2,-4
    6b44:	88a2703a 	and	r17,r17,r2
    6b48:	8c21c83a 	sub	r16,r17,r16
    6b4c:	8403fbc4 	addi	r16,r16,4079
    6b50:	8020d33a 	srli	r16,r16,12
    6b54:	0083ffc4 	movi	r2,4095
    6b58:	843fffc4 	addi	r16,r16,-1
    6b5c:	8020933a 	slli	r16,r16,12
    6b60:	1400060e 	bge	r2,r16,6b7c <_malloc_trim_r+0x70>
    6b64:	000b883a 	mov	r5,zero
    6b68:	9009883a 	mov	r4,r18
    6b6c:	000272c0 	call	272c <_sbrk_r>
    6b70:	98c00217 	ldw	r3,8(r19)
    6b74:	1c47883a 	add	r3,r3,r17
    6b78:	10c00a26 	beq	r2,r3,6ba4 <_malloc_trim_r+0x98>
    6b7c:	9009883a 	mov	r4,r18
    6b80:	000ec600 	call	ec60 <__malloc_unlock>
    6b84:	0005883a 	mov	r2,zero
    6b88:	dfc00417 	ldw	ra,16(sp)
    6b8c:	dcc00317 	ldw	r19,12(sp)
    6b90:	dc800217 	ldw	r18,8(sp)
    6b94:	dc400117 	ldw	r17,4(sp)
    6b98:	dc000017 	ldw	r16,0(sp)
    6b9c:	dec00504 	addi	sp,sp,20
    6ba0:	f800283a 	ret
    6ba4:	040bc83a 	sub	r5,zero,r16
    6ba8:	9009883a 	mov	r4,r18
    6bac:	000272c0 	call	272c <_sbrk_r>
    6bb0:	00ffffc4 	movi	r3,-1
    6bb4:	10c00d26 	beq	r2,r3,6bec <_malloc_trim_r+0xe0>
    6bb8:	00c00074 	movhi	r3,1
    6bbc:	18d44f04 	addi	r3,r3,20796
    6bc0:	18800017 	ldw	r2,0(r3)
    6bc4:	99000217 	ldw	r4,8(r19)
    6bc8:	8c23c83a 	sub	r17,r17,r16
    6bcc:	8c400054 	ori	r17,r17,1
    6bd0:	1421c83a 	sub	r16,r2,r16
    6bd4:	24400115 	stw	r17,4(r4)
    6bd8:	9009883a 	mov	r4,r18
    6bdc:	1c000015 	stw	r16,0(r3)
    6be0:	000ec600 	call	ec60 <__malloc_unlock>
    6be4:	00800044 	movi	r2,1
    6be8:	003fe706 	br	6b88 <__alt_data_end+0xff006b88>
    6bec:	000b883a 	mov	r5,zero
    6bf0:	9009883a 	mov	r4,r18
    6bf4:	000272c0 	call	272c <_sbrk_r>
    6bf8:	99000217 	ldw	r4,8(r19)
    6bfc:	014003c4 	movi	r5,15
    6c00:	1107c83a 	sub	r3,r2,r4
    6c04:	28ffdd0e 	bge	r5,r3,6b7c <__alt_data_end+0xff006b7c>
    6c08:	01400074 	movhi	r5,1
    6c0c:	294d6804 	addi	r5,r5,13728
    6c10:	29400017 	ldw	r5,0(r5)
    6c14:	18c00054 	ori	r3,r3,1
    6c18:	20c00115 	stw	r3,4(r4)
    6c1c:	00c00074 	movhi	r3,1
    6c20:	1145c83a 	sub	r2,r2,r5
    6c24:	18d44f04 	addi	r3,r3,20796
    6c28:	18800015 	stw	r2,0(r3)
    6c2c:	003fd306 	br	6b7c <__alt_data_end+0xff006b7c>

00006c30 <_free_r>:
    6c30:	28004126 	beq	r5,zero,6d38 <_free_r+0x108>
    6c34:	defffd04 	addi	sp,sp,-12
    6c38:	dc400115 	stw	r17,4(sp)
    6c3c:	dc000015 	stw	r16,0(sp)
    6c40:	2023883a 	mov	r17,r4
    6c44:	2821883a 	mov	r16,r5
    6c48:	dfc00215 	stw	ra,8(sp)
    6c4c:	000ec5c0 	call	ec5c <__malloc_lock>
    6c50:	81ffff17 	ldw	r7,-4(r16)
    6c54:	00bfff84 	movi	r2,-2
    6c58:	01000074 	movhi	r4,1
    6c5c:	81bffe04 	addi	r6,r16,-8
    6c60:	3884703a 	and	r2,r7,r2
    6c64:	2106bb04 	addi	r4,r4,6892
    6c68:	308b883a 	add	r5,r6,r2
    6c6c:	2a400117 	ldw	r9,4(r5)
    6c70:	22000217 	ldw	r8,8(r4)
    6c74:	00ffff04 	movi	r3,-4
    6c78:	48c6703a 	and	r3,r9,r3
    6c7c:	2a005726 	beq	r5,r8,6ddc <_free_r+0x1ac>
    6c80:	28c00115 	stw	r3,4(r5)
    6c84:	39c0004c 	andi	r7,r7,1
    6c88:	3800091e 	bne	r7,zero,6cb0 <_free_r+0x80>
    6c8c:	823ffe17 	ldw	r8,-8(r16)
    6c90:	22400204 	addi	r9,r4,8
    6c94:	320dc83a 	sub	r6,r6,r8
    6c98:	31c00217 	ldw	r7,8(r6)
    6c9c:	1205883a 	add	r2,r2,r8
    6ca0:	3a406526 	beq	r7,r9,6e38 <_free_r+0x208>
    6ca4:	32000317 	ldw	r8,12(r6)
    6ca8:	3a000315 	stw	r8,12(r7)
    6cac:	41c00215 	stw	r7,8(r8)
    6cb0:	28cf883a 	add	r7,r5,r3
    6cb4:	39c00117 	ldw	r7,4(r7)
    6cb8:	39c0004c 	andi	r7,r7,1
    6cbc:	38003a26 	beq	r7,zero,6da8 <_free_r+0x178>
    6cc0:	10c00054 	ori	r3,r2,1
    6cc4:	30c00115 	stw	r3,4(r6)
    6cc8:	3087883a 	add	r3,r6,r2
    6ccc:	18800015 	stw	r2,0(r3)
    6cd0:	00c07fc4 	movi	r3,511
    6cd4:	18801936 	bltu	r3,r2,6d3c <_free_r+0x10c>
    6cd8:	1004d0fa 	srli	r2,r2,3
    6cdc:	01c00044 	movi	r7,1
    6ce0:	21400117 	ldw	r5,4(r4)
    6ce4:	10c00044 	addi	r3,r2,1
    6ce8:	18c7883a 	add	r3,r3,r3
    6cec:	1005d0ba 	srai	r2,r2,2
    6cf0:	18c7883a 	add	r3,r3,r3
    6cf4:	18c7883a 	add	r3,r3,r3
    6cf8:	1907883a 	add	r3,r3,r4
    6cfc:	3884983a 	sll	r2,r7,r2
    6d00:	19c00017 	ldw	r7,0(r3)
    6d04:	1a3ffe04 	addi	r8,r3,-8
    6d08:	1144b03a 	or	r2,r2,r5
    6d0c:	32000315 	stw	r8,12(r6)
    6d10:	31c00215 	stw	r7,8(r6)
    6d14:	20800115 	stw	r2,4(r4)
    6d18:	19800015 	stw	r6,0(r3)
    6d1c:	39800315 	stw	r6,12(r7)
    6d20:	8809883a 	mov	r4,r17
    6d24:	dfc00217 	ldw	ra,8(sp)
    6d28:	dc400117 	ldw	r17,4(sp)
    6d2c:	dc000017 	ldw	r16,0(sp)
    6d30:	dec00304 	addi	sp,sp,12
    6d34:	000ec601 	jmpi	ec60 <__malloc_unlock>
    6d38:	f800283a 	ret
    6d3c:	100ad27a 	srli	r5,r2,9
    6d40:	00c00104 	movi	r3,4
    6d44:	19404a36 	bltu	r3,r5,6e70 <_free_r+0x240>
    6d48:	100ad1ba 	srli	r5,r2,6
    6d4c:	28c00e44 	addi	r3,r5,57
    6d50:	18c7883a 	add	r3,r3,r3
    6d54:	29400e04 	addi	r5,r5,56
    6d58:	18c7883a 	add	r3,r3,r3
    6d5c:	18c7883a 	add	r3,r3,r3
    6d60:	1909883a 	add	r4,r3,r4
    6d64:	20c00017 	ldw	r3,0(r4)
    6d68:	01c00074 	movhi	r7,1
    6d6c:	213ffe04 	addi	r4,r4,-8
    6d70:	39c6bb04 	addi	r7,r7,6892
    6d74:	20c04426 	beq	r4,r3,6e88 <_free_r+0x258>
    6d78:	01ffff04 	movi	r7,-4
    6d7c:	19400117 	ldw	r5,4(r3)
    6d80:	29ca703a 	and	r5,r5,r7
    6d84:	1140022e 	bgeu	r2,r5,6d90 <_free_r+0x160>
    6d88:	18c00217 	ldw	r3,8(r3)
    6d8c:	20fffb1e 	bne	r4,r3,6d7c <__alt_data_end+0xff006d7c>
    6d90:	19000317 	ldw	r4,12(r3)
    6d94:	31000315 	stw	r4,12(r6)
    6d98:	30c00215 	stw	r3,8(r6)
    6d9c:	21800215 	stw	r6,8(r4)
    6da0:	19800315 	stw	r6,12(r3)
    6da4:	003fde06 	br	6d20 <__alt_data_end+0xff006d20>
    6da8:	29c00217 	ldw	r7,8(r5)
    6dac:	10c5883a 	add	r2,r2,r3
    6db0:	00c00074 	movhi	r3,1
    6db4:	18c6bd04 	addi	r3,r3,6900
    6db8:	38c03b26 	beq	r7,r3,6ea8 <_free_r+0x278>
    6dbc:	2a000317 	ldw	r8,12(r5)
    6dc0:	11400054 	ori	r5,r2,1
    6dc4:	3087883a 	add	r3,r6,r2
    6dc8:	3a000315 	stw	r8,12(r7)
    6dcc:	41c00215 	stw	r7,8(r8)
    6dd0:	31400115 	stw	r5,4(r6)
    6dd4:	18800015 	stw	r2,0(r3)
    6dd8:	003fbd06 	br	6cd0 <__alt_data_end+0xff006cd0>
    6ddc:	39c0004c 	andi	r7,r7,1
    6de0:	10c5883a 	add	r2,r2,r3
    6de4:	3800071e 	bne	r7,zero,6e04 <_free_r+0x1d4>
    6de8:	81fffe17 	ldw	r7,-8(r16)
    6dec:	31cdc83a 	sub	r6,r6,r7
    6df0:	30c00317 	ldw	r3,12(r6)
    6df4:	31400217 	ldw	r5,8(r6)
    6df8:	11c5883a 	add	r2,r2,r7
    6dfc:	28c00315 	stw	r3,12(r5)
    6e00:	19400215 	stw	r5,8(r3)
    6e04:	10c00054 	ori	r3,r2,1
    6e08:	30c00115 	stw	r3,4(r6)
    6e0c:	00c00074 	movhi	r3,1
    6e10:	18cd6904 	addi	r3,r3,13732
    6e14:	18c00017 	ldw	r3,0(r3)
    6e18:	21800215 	stw	r6,8(r4)
    6e1c:	10ffc036 	bltu	r2,r3,6d20 <__alt_data_end+0xff006d20>
    6e20:	00800074 	movhi	r2,1
    6e24:	10944104 	addi	r2,r2,20740
    6e28:	11400017 	ldw	r5,0(r2)
    6e2c:	8809883a 	mov	r4,r17
    6e30:	0006b0c0 	call	6b0c <_malloc_trim_r>
    6e34:	003fba06 	br	6d20 <__alt_data_end+0xff006d20>
    6e38:	28c9883a 	add	r4,r5,r3
    6e3c:	21000117 	ldw	r4,4(r4)
    6e40:	2100004c 	andi	r4,r4,1
    6e44:	2000391e 	bne	r4,zero,6f2c <_free_r+0x2fc>
    6e48:	29c00217 	ldw	r7,8(r5)
    6e4c:	29000317 	ldw	r4,12(r5)
    6e50:	1885883a 	add	r2,r3,r2
    6e54:	10c00054 	ori	r3,r2,1
    6e58:	39000315 	stw	r4,12(r7)
    6e5c:	21c00215 	stw	r7,8(r4)
    6e60:	30c00115 	stw	r3,4(r6)
    6e64:	308d883a 	add	r6,r6,r2
    6e68:	30800015 	stw	r2,0(r6)
    6e6c:	003fac06 	br	6d20 <__alt_data_end+0xff006d20>
    6e70:	00c00504 	movi	r3,20
    6e74:	19401536 	bltu	r3,r5,6ecc <_free_r+0x29c>
    6e78:	28c01704 	addi	r3,r5,92
    6e7c:	18c7883a 	add	r3,r3,r3
    6e80:	294016c4 	addi	r5,r5,91
    6e84:	003fb406 	br	6d58 <__alt_data_end+0xff006d58>
    6e88:	280bd0ba 	srai	r5,r5,2
    6e8c:	00c00044 	movi	r3,1
    6e90:	38800117 	ldw	r2,4(r7)
    6e94:	194a983a 	sll	r5,r3,r5
    6e98:	2007883a 	mov	r3,r4
    6e9c:	2884b03a 	or	r2,r5,r2
    6ea0:	38800115 	stw	r2,4(r7)
    6ea4:	003fbb06 	br	6d94 <__alt_data_end+0xff006d94>
    6ea8:	21800515 	stw	r6,20(r4)
    6eac:	21800415 	stw	r6,16(r4)
    6eb0:	10c00054 	ori	r3,r2,1
    6eb4:	31c00315 	stw	r7,12(r6)
    6eb8:	31c00215 	stw	r7,8(r6)
    6ebc:	30c00115 	stw	r3,4(r6)
    6ec0:	308d883a 	add	r6,r6,r2
    6ec4:	30800015 	stw	r2,0(r6)
    6ec8:	003f9506 	br	6d20 <__alt_data_end+0xff006d20>
    6ecc:	00c01504 	movi	r3,84
    6ed0:	19400536 	bltu	r3,r5,6ee8 <_free_r+0x2b8>
    6ed4:	100ad33a 	srli	r5,r2,12
    6ed8:	28c01bc4 	addi	r3,r5,111
    6edc:	18c7883a 	add	r3,r3,r3
    6ee0:	29401b84 	addi	r5,r5,110
    6ee4:	003f9c06 	br	6d58 <__alt_data_end+0xff006d58>
    6ee8:	00c05504 	movi	r3,340
    6eec:	19400536 	bltu	r3,r5,6f04 <_free_r+0x2d4>
    6ef0:	100ad3fa 	srli	r5,r2,15
    6ef4:	28c01e04 	addi	r3,r5,120
    6ef8:	18c7883a 	add	r3,r3,r3
    6efc:	29401dc4 	addi	r5,r5,119
    6f00:	003f9506 	br	6d58 <__alt_data_end+0xff006d58>
    6f04:	00c15504 	movi	r3,1364
    6f08:	19400536 	bltu	r3,r5,6f20 <_free_r+0x2f0>
    6f0c:	100ad4ba 	srli	r5,r2,18
    6f10:	28c01f44 	addi	r3,r5,125
    6f14:	18c7883a 	add	r3,r3,r3
    6f18:	29401f04 	addi	r5,r5,124
    6f1c:	003f8e06 	br	6d58 <__alt_data_end+0xff006d58>
    6f20:	00c03f84 	movi	r3,254
    6f24:	01401f84 	movi	r5,126
    6f28:	003f8b06 	br	6d58 <__alt_data_end+0xff006d58>
    6f2c:	10c00054 	ori	r3,r2,1
    6f30:	30c00115 	stw	r3,4(r6)
    6f34:	308d883a 	add	r6,r6,r2
    6f38:	30800015 	stw	r2,0(r6)
    6f3c:	003f7806 	br	6d20 <__alt_data_end+0xff006d20>

00006f40 <__sfvwrite_r>:
    6f40:	30800217 	ldw	r2,8(r6)
    6f44:	10006726 	beq	r2,zero,70e4 <__sfvwrite_r+0x1a4>
    6f48:	28c0030b 	ldhu	r3,12(r5)
    6f4c:	defff404 	addi	sp,sp,-48
    6f50:	dd400715 	stw	r21,28(sp)
    6f54:	dd000615 	stw	r20,24(sp)
    6f58:	dc000215 	stw	r16,8(sp)
    6f5c:	dfc00b15 	stw	ra,44(sp)
    6f60:	df000a15 	stw	fp,40(sp)
    6f64:	ddc00915 	stw	r23,36(sp)
    6f68:	dd800815 	stw	r22,32(sp)
    6f6c:	dcc00515 	stw	r19,20(sp)
    6f70:	dc800415 	stw	r18,16(sp)
    6f74:	dc400315 	stw	r17,12(sp)
    6f78:	1880020c 	andi	r2,r3,8
    6f7c:	2821883a 	mov	r16,r5
    6f80:	202b883a 	mov	r21,r4
    6f84:	3029883a 	mov	r20,r6
    6f88:	10002726 	beq	r2,zero,7028 <__sfvwrite_r+0xe8>
    6f8c:	28800417 	ldw	r2,16(r5)
    6f90:	10002526 	beq	r2,zero,7028 <__sfvwrite_r+0xe8>
    6f94:	1880008c 	andi	r2,r3,2
    6f98:	a4400017 	ldw	r17,0(r20)
    6f9c:	10002a26 	beq	r2,zero,7048 <__sfvwrite_r+0x108>
    6fa0:	05a00034 	movhi	r22,32768
    6fa4:	0027883a 	mov	r19,zero
    6fa8:	0025883a 	mov	r18,zero
    6fac:	b5bf0004 	addi	r22,r22,-1024
    6fb0:	980d883a 	mov	r6,r19
    6fb4:	a809883a 	mov	r4,r21
    6fb8:	90004626 	beq	r18,zero,70d4 <__sfvwrite_r+0x194>
    6fbc:	900f883a 	mov	r7,r18
    6fc0:	b480022e 	bgeu	r22,r18,6fcc <__sfvwrite_r+0x8c>
    6fc4:	01e00034 	movhi	r7,32768
    6fc8:	39ff0004 	addi	r7,r7,-1024
    6fcc:	80800917 	ldw	r2,36(r16)
    6fd0:	81400717 	ldw	r5,28(r16)
    6fd4:	103ee83a 	callr	r2
    6fd8:	0080570e 	bge	zero,r2,7138 <__sfvwrite_r+0x1f8>
    6fdc:	a0c00217 	ldw	r3,8(r20)
    6fe0:	98a7883a 	add	r19,r19,r2
    6fe4:	90a5c83a 	sub	r18,r18,r2
    6fe8:	1885c83a 	sub	r2,r3,r2
    6fec:	a0800215 	stw	r2,8(r20)
    6ff0:	103fef1e 	bne	r2,zero,6fb0 <__alt_data_end+0xff006fb0>
    6ff4:	0005883a 	mov	r2,zero
    6ff8:	dfc00b17 	ldw	ra,44(sp)
    6ffc:	df000a17 	ldw	fp,40(sp)
    7000:	ddc00917 	ldw	r23,36(sp)
    7004:	dd800817 	ldw	r22,32(sp)
    7008:	dd400717 	ldw	r21,28(sp)
    700c:	dd000617 	ldw	r20,24(sp)
    7010:	dcc00517 	ldw	r19,20(sp)
    7014:	dc800417 	ldw	r18,16(sp)
    7018:	dc400317 	ldw	r17,12(sp)
    701c:	dc000217 	ldw	r16,8(sp)
    7020:	dec00c04 	addi	sp,sp,48
    7024:	f800283a 	ret
    7028:	800b883a 	mov	r5,r16
    702c:	a809883a 	mov	r4,r21
    7030:	0004ae80 	call	4ae8 <__swsetup_r>
    7034:	1000eb1e 	bne	r2,zero,73e4 <__sfvwrite_r+0x4a4>
    7038:	80c0030b 	ldhu	r3,12(r16)
    703c:	a4400017 	ldw	r17,0(r20)
    7040:	1880008c 	andi	r2,r3,2
    7044:	103fd61e 	bne	r2,zero,6fa0 <__alt_data_end+0xff006fa0>
    7048:	1880004c 	andi	r2,r3,1
    704c:	10003f1e 	bne	r2,zero,714c <__sfvwrite_r+0x20c>
    7050:	0039883a 	mov	fp,zero
    7054:	0025883a 	mov	r18,zero
    7058:	90001a26 	beq	r18,zero,70c4 <__sfvwrite_r+0x184>
    705c:	1880800c 	andi	r2,r3,512
    7060:	84c00217 	ldw	r19,8(r16)
    7064:	10002126 	beq	r2,zero,70ec <__sfvwrite_r+0x1ac>
    7068:	982f883a 	mov	r23,r19
    706c:	94c09336 	bltu	r18,r19,72bc <__sfvwrite_r+0x37c>
    7070:	1881200c 	andi	r2,r3,1152
    7074:	10009e1e 	bne	r2,zero,72f0 <__sfvwrite_r+0x3b0>
    7078:	81000017 	ldw	r4,0(r16)
    707c:	b80d883a 	mov	r6,r23
    7080:	e00b883a 	mov	r5,fp
    7084:	0007a480 	call	7a48 <memmove>
    7088:	80c00217 	ldw	r3,8(r16)
    708c:	81000017 	ldw	r4,0(r16)
    7090:	9005883a 	mov	r2,r18
    7094:	1ce7c83a 	sub	r19,r3,r19
    7098:	25cf883a 	add	r7,r4,r23
    709c:	84c00215 	stw	r19,8(r16)
    70a0:	81c00015 	stw	r7,0(r16)
    70a4:	a0c00217 	ldw	r3,8(r20)
    70a8:	e0b9883a 	add	fp,fp,r2
    70ac:	90a5c83a 	sub	r18,r18,r2
    70b0:	18a7c83a 	sub	r19,r3,r2
    70b4:	a4c00215 	stw	r19,8(r20)
    70b8:	983fce26 	beq	r19,zero,6ff4 <__alt_data_end+0xff006ff4>
    70bc:	80c0030b 	ldhu	r3,12(r16)
    70c0:	903fe61e 	bne	r18,zero,705c <__alt_data_end+0xff00705c>
    70c4:	8f000017 	ldw	fp,0(r17)
    70c8:	8c800117 	ldw	r18,4(r17)
    70cc:	8c400204 	addi	r17,r17,8
    70d0:	003fe106 	br	7058 <__alt_data_end+0xff007058>
    70d4:	8cc00017 	ldw	r19,0(r17)
    70d8:	8c800117 	ldw	r18,4(r17)
    70dc:	8c400204 	addi	r17,r17,8
    70e0:	003fb306 	br	6fb0 <__alt_data_end+0xff006fb0>
    70e4:	0005883a 	mov	r2,zero
    70e8:	f800283a 	ret
    70ec:	81000017 	ldw	r4,0(r16)
    70f0:	80800417 	ldw	r2,16(r16)
    70f4:	11005736 	bltu	r2,r4,7254 <__sfvwrite_r+0x314>
    70f8:	85c00517 	ldw	r23,20(r16)
    70fc:	95c05536 	bltu	r18,r23,7254 <__sfvwrite_r+0x314>
    7100:	00a00034 	movhi	r2,32768
    7104:	10bfffc4 	addi	r2,r2,-1
    7108:	9009883a 	mov	r4,r18
    710c:	1480012e 	bgeu	r2,r18,7114 <__sfvwrite_r+0x1d4>
    7110:	1009883a 	mov	r4,r2
    7114:	b80b883a 	mov	r5,r23
    7118:	000bee40 	call	bee4 <__divsi3>
    711c:	15cf383a 	mul	r7,r2,r23
    7120:	81400717 	ldw	r5,28(r16)
    7124:	80800917 	ldw	r2,36(r16)
    7128:	e00d883a 	mov	r6,fp
    712c:	a809883a 	mov	r4,r21
    7130:	103ee83a 	callr	r2
    7134:	00bfdb16 	blt	zero,r2,70a4 <__alt_data_end+0xff0070a4>
    7138:	8080030b 	ldhu	r2,12(r16)
    713c:	10801014 	ori	r2,r2,64
    7140:	8080030d 	sth	r2,12(r16)
    7144:	00bfffc4 	movi	r2,-1
    7148:	003fab06 	br	6ff8 <__alt_data_end+0xff006ff8>
    714c:	0027883a 	mov	r19,zero
    7150:	0011883a 	mov	r8,zero
    7154:	0039883a 	mov	fp,zero
    7158:	0025883a 	mov	r18,zero
    715c:	90001f26 	beq	r18,zero,71dc <__sfvwrite_r+0x29c>
    7160:	40005a26 	beq	r8,zero,72cc <__sfvwrite_r+0x38c>
    7164:	982d883a 	mov	r22,r19
    7168:	94c0012e 	bgeu	r18,r19,7170 <__sfvwrite_r+0x230>
    716c:	902d883a 	mov	r22,r18
    7170:	81000017 	ldw	r4,0(r16)
    7174:	80800417 	ldw	r2,16(r16)
    7178:	b02f883a 	mov	r23,r22
    717c:	81c00517 	ldw	r7,20(r16)
    7180:	1100032e 	bgeu	r2,r4,7190 <__sfvwrite_r+0x250>
    7184:	80c00217 	ldw	r3,8(r16)
    7188:	38c7883a 	add	r3,r7,r3
    718c:	1d801816 	blt	r3,r22,71f0 <__sfvwrite_r+0x2b0>
    7190:	b1c03e16 	blt	r22,r7,728c <__sfvwrite_r+0x34c>
    7194:	80800917 	ldw	r2,36(r16)
    7198:	81400717 	ldw	r5,28(r16)
    719c:	e00d883a 	mov	r6,fp
    71a0:	da000115 	stw	r8,4(sp)
    71a4:	a809883a 	mov	r4,r21
    71a8:	103ee83a 	callr	r2
    71ac:	102f883a 	mov	r23,r2
    71b0:	da000117 	ldw	r8,4(sp)
    71b4:	00bfe00e 	bge	zero,r2,7138 <__alt_data_end+0xff007138>
    71b8:	9de7c83a 	sub	r19,r19,r23
    71bc:	98001f26 	beq	r19,zero,723c <__sfvwrite_r+0x2fc>
    71c0:	a0800217 	ldw	r2,8(r20)
    71c4:	e5f9883a 	add	fp,fp,r23
    71c8:	95e5c83a 	sub	r18,r18,r23
    71cc:	15efc83a 	sub	r23,r2,r23
    71d0:	a5c00215 	stw	r23,8(r20)
    71d4:	b83f8726 	beq	r23,zero,6ff4 <__alt_data_end+0xff006ff4>
    71d8:	903fe11e 	bne	r18,zero,7160 <__alt_data_end+0xff007160>
    71dc:	8f000017 	ldw	fp,0(r17)
    71e0:	8c800117 	ldw	r18,4(r17)
    71e4:	0011883a 	mov	r8,zero
    71e8:	8c400204 	addi	r17,r17,8
    71ec:	003fdb06 	br	715c <__alt_data_end+0xff00715c>
    71f0:	180d883a 	mov	r6,r3
    71f4:	e00b883a 	mov	r5,fp
    71f8:	da000115 	stw	r8,4(sp)
    71fc:	d8c00015 	stw	r3,0(sp)
    7200:	0007a480 	call	7a48 <memmove>
    7204:	d8c00017 	ldw	r3,0(sp)
    7208:	80800017 	ldw	r2,0(r16)
    720c:	800b883a 	mov	r5,r16
    7210:	a809883a 	mov	r4,r21
    7214:	10c5883a 	add	r2,r2,r3
    7218:	80800015 	stw	r2,0(r16)
    721c:	d8c00015 	stw	r3,0(sp)
    7220:	00066e00 	call	66e0 <_fflush_r>
    7224:	d8c00017 	ldw	r3,0(sp)
    7228:	da000117 	ldw	r8,4(sp)
    722c:	103fc21e 	bne	r2,zero,7138 <__alt_data_end+0xff007138>
    7230:	182f883a 	mov	r23,r3
    7234:	9de7c83a 	sub	r19,r19,r23
    7238:	983fe11e 	bne	r19,zero,71c0 <__alt_data_end+0xff0071c0>
    723c:	800b883a 	mov	r5,r16
    7240:	a809883a 	mov	r4,r21
    7244:	00066e00 	call	66e0 <_fflush_r>
    7248:	103fbb1e 	bne	r2,zero,7138 <__alt_data_end+0xff007138>
    724c:	0011883a 	mov	r8,zero
    7250:	003fdb06 	br	71c0 <__alt_data_end+0xff0071c0>
    7254:	94c0012e 	bgeu	r18,r19,725c <__sfvwrite_r+0x31c>
    7258:	9027883a 	mov	r19,r18
    725c:	980d883a 	mov	r6,r19
    7260:	e00b883a 	mov	r5,fp
    7264:	0007a480 	call	7a48 <memmove>
    7268:	80800217 	ldw	r2,8(r16)
    726c:	80c00017 	ldw	r3,0(r16)
    7270:	14c5c83a 	sub	r2,r2,r19
    7274:	1cc7883a 	add	r3,r3,r19
    7278:	80800215 	stw	r2,8(r16)
    727c:	80c00015 	stw	r3,0(r16)
    7280:	10004326 	beq	r2,zero,7390 <__sfvwrite_r+0x450>
    7284:	9805883a 	mov	r2,r19
    7288:	003f8606 	br	70a4 <__alt_data_end+0xff0070a4>
    728c:	b00d883a 	mov	r6,r22
    7290:	e00b883a 	mov	r5,fp
    7294:	da000115 	stw	r8,4(sp)
    7298:	0007a480 	call	7a48 <memmove>
    729c:	80800217 	ldw	r2,8(r16)
    72a0:	80c00017 	ldw	r3,0(r16)
    72a4:	da000117 	ldw	r8,4(sp)
    72a8:	1585c83a 	sub	r2,r2,r22
    72ac:	1dad883a 	add	r22,r3,r22
    72b0:	80800215 	stw	r2,8(r16)
    72b4:	85800015 	stw	r22,0(r16)
    72b8:	003fbf06 	br	71b8 <__alt_data_end+0xff0071b8>
    72bc:	81000017 	ldw	r4,0(r16)
    72c0:	9027883a 	mov	r19,r18
    72c4:	902f883a 	mov	r23,r18
    72c8:	003f6c06 	br	707c <__alt_data_end+0xff00707c>
    72cc:	900d883a 	mov	r6,r18
    72d0:	01400284 	movi	r5,10
    72d4:	e009883a 	mov	r4,fp
    72d8:	000781c0 	call	781c <memchr>
    72dc:	10003e26 	beq	r2,zero,73d8 <__sfvwrite_r+0x498>
    72e0:	10800044 	addi	r2,r2,1
    72e4:	1727c83a 	sub	r19,r2,fp
    72e8:	02000044 	movi	r8,1
    72ec:	003f9d06 	br	7164 <__alt_data_end+0xff007164>
    72f0:	80800517 	ldw	r2,20(r16)
    72f4:	81400417 	ldw	r5,16(r16)
    72f8:	81c00017 	ldw	r7,0(r16)
    72fc:	10a7883a 	add	r19,r2,r2
    7300:	9885883a 	add	r2,r19,r2
    7304:	1026d7fa 	srli	r19,r2,31
    7308:	396dc83a 	sub	r22,r7,r5
    730c:	b1000044 	addi	r4,r22,1
    7310:	9885883a 	add	r2,r19,r2
    7314:	1027d07a 	srai	r19,r2,1
    7318:	2485883a 	add	r2,r4,r18
    731c:	980d883a 	mov	r6,r19
    7320:	9880022e 	bgeu	r19,r2,732c <__sfvwrite_r+0x3ec>
    7324:	1027883a 	mov	r19,r2
    7328:	100d883a 	mov	r6,r2
    732c:	18c1000c 	andi	r3,r3,1024
    7330:	18001c26 	beq	r3,zero,73a4 <__sfvwrite_r+0x464>
    7334:	300b883a 	mov	r5,r6
    7338:	a809883a 	mov	r4,r21
    733c:	0001de00 	call	1de0 <_malloc_r>
    7340:	102f883a 	mov	r23,r2
    7344:	10002926 	beq	r2,zero,73ec <__sfvwrite_r+0x4ac>
    7348:	81400417 	ldw	r5,16(r16)
    734c:	b00d883a 	mov	r6,r22
    7350:	1009883a 	mov	r4,r2
    7354:	00079000 	call	7900 <memcpy>
    7358:	8080030b 	ldhu	r2,12(r16)
    735c:	00fedfc4 	movi	r3,-1153
    7360:	10c4703a 	and	r2,r2,r3
    7364:	10802014 	ori	r2,r2,128
    7368:	8080030d 	sth	r2,12(r16)
    736c:	bd89883a 	add	r4,r23,r22
    7370:	9d8fc83a 	sub	r7,r19,r22
    7374:	85c00415 	stw	r23,16(r16)
    7378:	84c00515 	stw	r19,20(r16)
    737c:	81000015 	stw	r4,0(r16)
    7380:	9027883a 	mov	r19,r18
    7384:	81c00215 	stw	r7,8(r16)
    7388:	902f883a 	mov	r23,r18
    738c:	003f3b06 	br	707c <__alt_data_end+0xff00707c>
    7390:	800b883a 	mov	r5,r16
    7394:	a809883a 	mov	r4,r21
    7398:	00066e00 	call	66e0 <_fflush_r>
    739c:	103fb926 	beq	r2,zero,7284 <__alt_data_end+0xff007284>
    73a0:	003f6506 	br	7138 <__alt_data_end+0xff007138>
    73a4:	a809883a 	mov	r4,r21
    73a8:	0008cc80 	call	8cc8 <_realloc_r>
    73ac:	102f883a 	mov	r23,r2
    73b0:	103fee1e 	bne	r2,zero,736c <__alt_data_end+0xff00736c>
    73b4:	81400417 	ldw	r5,16(r16)
    73b8:	a809883a 	mov	r4,r21
    73bc:	0006c300 	call	6c30 <_free_r>
    73c0:	8080030b 	ldhu	r2,12(r16)
    73c4:	00ffdfc4 	movi	r3,-129
    73c8:	1884703a 	and	r2,r3,r2
    73cc:	00c00304 	movi	r3,12
    73d0:	a8c00015 	stw	r3,0(r21)
    73d4:	003f5906 	br	713c <__alt_data_end+0xff00713c>
    73d8:	94c00044 	addi	r19,r18,1
    73dc:	02000044 	movi	r8,1
    73e0:	003f6006 	br	7164 <__alt_data_end+0xff007164>
    73e4:	00bfffc4 	movi	r2,-1
    73e8:	003f0306 	br	6ff8 <__alt_data_end+0xff006ff8>
    73ec:	00800304 	movi	r2,12
    73f0:	a8800015 	stw	r2,0(r21)
    73f4:	8080030b 	ldhu	r2,12(r16)
    73f8:	003f5006 	br	713c <__alt_data_end+0xff00713c>

000073fc <_fwalk>:
    73fc:	defff704 	addi	sp,sp,-36
    7400:	dd000415 	stw	r20,16(sp)
    7404:	dfc00815 	stw	ra,32(sp)
    7408:	ddc00715 	stw	r23,28(sp)
    740c:	dd800615 	stw	r22,24(sp)
    7410:	dd400515 	stw	r21,20(sp)
    7414:	dcc00315 	stw	r19,12(sp)
    7418:	dc800215 	stw	r18,8(sp)
    741c:	dc400115 	stw	r17,4(sp)
    7420:	dc000015 	stw	r16,0(sp)
    7424:	2500b804 	addi	r20,r4,736
    7428:	a0002326 	beq	r20,zero,74b8 <_fwalk+0xbc>
    742c:	282b883a 	mov	r21,r5
    7430:	002f883a 	mov	r23,zero
    7434:	05800044 	movi	r22,1
    7438:	04ffffc4 	movi	r19,-1
    743c:	a4400117 	ldw	r17,4(r20)
    7440:	a4800217 	ldw	r18,8(r20)
    7444:	8c7fffc4 	addi	r17,r17,-1
    7448:	88000d16 	blt	r17,zero,7480 <_fwalk+0x84>
    744c:	94000304 	addi	r16,r18,12
    7450:	94800384 	addi	r18,r18,14
    7454:	8080000b 	ldhu	r2,0(r16)
    7458:	8c7fffc4 	addi	r17,r17,-1
    745c:	813ffd04 	addi	r4,r16,-12
    7460:	b080042e 	bgeu	r22,r2,7474 <_fwalk+0x78>
    7464:	9080000f 	ldh	r2,0(r18)
    7468:	14c00226 	beq	r2,r19,7474 <_fwalk+0x78>
    746c:	a83ee83a 	callr	r21
    7470:	b8aeb03a 	or	r23,r23,r2
    7474:	84001a04 	addi	r16,r16,104
    7478:	94801a04 	addi	r18,r18,104
    747c:	8cfff51e 	bne	r17,r19,7454 <__alt_data_end+0xff007454>
    7480:	a5000017 	ldw	r20,0(r20)
    7484:	a03fed1e 	bne	r20,zero,743c <__alt_data_end+0xff00743c>
    7488:	b805883a 	mov	r2,r23
    748c:	dfc00817 	ldw	ra,32(sp)
    7490:	ddc00717 	ldw	r23,28(sp)
    7494:	dd800617 	ldw	r22,24(sp)
    7498:	dd400517 	ldw	r21,20(sp)
    749c:	dd000417 	ldw	r20,16(sp)
    74a0:	dcc00317 	ldw	r19,12(sp)
    74a4:	dc800217 	ldw	r18,8(sp)
    74a8:	dc400117 	ldw	r17,4(sp)
    74ac:	dc000017 	ldw	r16,0(sp)
    74b0:	dec00904 	addi	sp,sp,36
    74b4:	f800283a 	ret
    74b8:	002f883a 	mov	r23,zero
    74bc:	003ff206 	br	7488 <__alt_data_end+0xff007488>

000074c0 <_fwalk_reent>:
    74c0:	defff704 	addi	sp,sp,-36
    74c4:	dd000415 	stw	r20,16(sp)
    74c8:	dfc00815 	stw	ra,32(sp)
    74cc:	ddc00715 	stw	r23,28(sp)
    74d0:	dd800615 	stw	r22,24(sp)
    74d4:	dd400515 	stw	r21,20(sp)
    74d8:	dcc00315 	stw	r19,12(sp)
    74dc:	dc800215 	stw	r18,8(sp)
    74e0:	dc400115 	stw	r17,4(sp)
    74e4:	dc000015 	stw	r16,0(sp)
    74e8:	2500b804 	addi	r20,r4,736
    74ec:	a0002326 	beq	r20,zero,757c <_fwalk_reent+0xbc>
    74f0:	282b883a 	mov	r21,r5
    74f4:	2027883a 	mov	r19,r4
    74f8:	002f883a 	mov	r23,zero
    74fc:	05800044 	movi	r22,1
    7500:	04bfffc4 	movi	r18,-1
    7504:	a4400117 	ldw	r17,4(r20)
    7508:	a4000217 	ldw	r16,8(r20)
    750c:	8c7fffc4 	addi	r17,r17,-1
    7510:	88000c16 	blt	r17,zero,7544 <_fwalk_reent+0x84>
    7514:	84000304 	addi	r16,r16,12
    7518:	8080000b 	ldhu	r2,0(r16)
    751c:	8c7fffc4 	addi	r17,r17,-1
    7520:	817ffd04 	addi	r5,r16,-12
    7524:	b080052e 	bgeu	r22,r2,753c <_fwalk_reent+0x7c>
    7528:	8080008f 	ldh	r2,2(r16)
    752c:	9809883a 	mov	r4,r19
    7530:	14800226 	beq	r2,r18,753c <_fwalk_reent+0x7c>
    7534:	a83ee83a 	callr	r21
    7538:	b8aeb03a 	or	r23,r23,r2
    753c:	84001a04 	addi	r16,r16,104
    7540:	8cbff51e 	bne	r17,r18,7518 <__alt_data_end+0xff007518>
    7544:	a5000017 	ldw	r20,0(r20)
    7548:	a03fee1e 	bne	r20,zero,7504 <__alt_data_end+0xff007504>
    754c:	b805883a 	mov	r2,r23
    7550:	dfc00817 	ldw	ra,32(sp)
    7554:	ddc00717 	ldw	r23,28(sp)
    7558:	dd800617 	ldw	r22,24(sp)
    755c:	dd400517 	ldw	r21,20(sp)
    7560:	dd000417 	ldw	r20,16(sp)
    7564:	dcc00317 	ldw	r19,12(sp)
    7568:	dc800217 	ldw	r18,8(sp)
    756c:	dc400117 	ldw	r17,4(sp)
    7570:	dc000017 	ldw	r16,0(sp)
    7574:	dec00904 	addi	sp,sp,36
    7578:	f800283a 	ret
    757c:	002f883a 	mov	r23,zero
    7580:	003ff206 	br	754c <__alt_data_end+0xff00754c>

00007584 <_setlocale_r>:
    7584:	30001b26 	beq	r6,zero,75f4 <_setlocale_r+0x70>
    7588:	01400074 	movhi	r5,1
    758c:	defffe04 	addi	sp,sp,-8
    7590:	29461c04 	addi	r5,r5,6256
    7594:	3009883a 	mov	r4,r6
    7598:	dc000015 	stw	r16,0(sp)
    759c:	dfc00115 	stw	ra,4(sp)
    75a0:	3021883a 	mov	r16,r6
    75a4:	00093dc0 	call	93dc <strcmp>
    75a8:	1000061e 	bne	r2,zero,75c4 <_setlocale_r+0x40>
    75ac:	00800074 	movhi	r2,1
    75b0:	10861b04 	addi	r2,r2,6252
    75b4:	dfc00117 	ldw	ra,4(sp)
    75b8:	dc000017 	ldw	r16,0(sp)
    75bc:	dec00204 	addi	sp,sp,8
    75c0:	f800283a 	ret
    75c4:	01400074 	movhi	r5,1
    75c8:	29461b04 	addi	r5,r5,6252
    75cc:	8009883a 	mov	r4,r16
    75d0:	00093dc0 	call	93dc <strcmp>
    75d4:	103ff526 	beq	r2,zero,75ac <__alt_data_end+0xff0075ac>
    75d8:	01400074 	movhi	r5,1
    75dc:	29460604 	addi	r5,r5,6168
    75e0:	8009883a 	mov	r4,r16
    75e4:	00093dc0 	call	93dc <strcmp>
    75e8:	103ff026 	beq	r2,zero,75ac <__alt_data_end+0xff0075ac>
    75ec:	0005883a 	mov	r2,zero
    75f0:	003ff006 	br	75b4 <__alt_data_end+0xff0075b4>
    75f4:	00800074 	movhi	r2,1
    75f8:	10861b04 	addi	r2,r2,6252
    75fc:	f800283a 	ret

00007600 <__locale_charset>:
    7600:	00800074 	movhi	r2,1
    7604:	1088ce04 	addi	r2,r2,9016
    7608:	f800283a 	ret

0000760c <__locale_mb_cur_max>:
    760c:	00800074 	movhi	r2,1
    7610:	108d6c04 	addi	r2,r2,13744
    7614:	10800017 	ldw	r2,0(r2)
    7618:	f800283a 	ret

0000761c <__locale_msgcharset>:
    761c:	00800074 	movhi	r2,1
    7620:	1088c604 	addi	r2,r2,8984
    7624:	f800283a 	ret

00007628 <__locale_cjk_lang>:
    7628:	0005883a 	mov	r2,zero
    762c:	f800283a 	ret

00007630 <_localeconv_r>:
    7630:	00800074 	movhi	r2,1
    7634:	1088d604 	addi	r2,r2,9048
    7638:	f800283a 	ret

0000763c <setlocale>:
    763c:	00800074 	movhi	r2,1
    7640:	108d6b04 	addi	r2,r2,13740
    7644:	280d883a 	mov	r6,r5
    7648:	200b883a 	mov	r5,r4
    764c:	11000017 	ldw	r4,0(r2)
    7650:	00075841 	jmpi	7584 <_setlocale_r>

00007654 <localeconv>:
    7654:	00800074 	movhi	r2,1
    7658:	1088d604 	addi	r2,r2,9048
    765c:	f800283a 	ret

00007660 <__smakebuf_r>:
    7660:	2880030b 	ldhu	r2,12(r5)
    7664:	10c0008c 	andi	r3,r2,2
    7668:	1800411e 	bne	r3,zero,7770 <__smakebuf_r+0x110>
    766c:	deffec04 	addi	sp,sp,-80
    7670:	dc000f15 	stw	r16,60(sp)
    7674:	2821883a 	mov	r16,r5
    7678:	2940038f 	ldh	r5,14(r5)
    767c:	dc401015 	stw	r17,64(sp)
    7680:	dfc01315 	stw	ra,76(sp)
    7684:	dcc01215 	stw	r19,72(sp)
    7688:	dc801115 	stw	r18,68(sp)
    768c:	2023883a 	mov	r17,r4
    7690:	28001c16 	blt	r5,zero,7704 <__smakebuf_r+0xa4>
    7694:	d80d883a 	mov	r6,sp
    7698:	000af840 	call	af84 <_fstat_r>
    769c:	10001816 	blt	r2,zero,7700 <__smakebuf_r+0xa0>
    76a0:	d8800117 	ldw	r2,4(sp)
    76a4:	00e00014 	movui	r3,32768
    76a8:	10bc000c 	andi	r2,r2,61440
    76ac:	14c80020 	cmpeqi	r19,r2,8192
    76b0:	10c03726 	beq	r2,r3,7790 <__smakebuf_r+0x130>
    76b4:	80c0030b 	ldhu	r3,12(r16)
    76b8:	18c20014 	ori	r3,r3,2048
    76bc:	80c0030d 	sth	r3,12(r16)
    76c0:	00c80004 	movi	r3,8192
    76c4:	10c0521e 	bne	r2,r3,7810 <__smakebuf_r+0x1b0>
    76c8:	8140038f 	ldh	r5,14(r16)
    76cc:	8809883a 	mov	r4,r17
    76d0:	000afe00 	call	afe0 <_isatty_r>
    76d4:	10004c26 	beq	r2,zero,7808 <__smakebuf_r+0x1a8>
    76d8:	8080030b 	ldhu	r2,12(r16)
    76dc:	80c010c4 	addi	r3,r16,67
    76e0:	80c00015 	stw	r3,0(r16)
    76e4:	10800054 	ori	r2,r2,1
    76e8:	8080030d 	sth	r2,12(r16)
    76ec:	00800044 	movi	r2,1
    76f0:	80c00415 	stw	r3,16(r16)
    76f4:	80800515 	stw	r2,20(r16)
    76f8:	04810004 	movi	r18,1024
    76fc:	00000706 	br	771c <__smakebuf_r+0xbc>
    7700:	8080030b 	ldhu	r2,12(r16)
    7704:	10c0200c 	andi	r3,r2,128
    7708:	18001f1e 	bne	r3,zero,7788 <__smakebuf_r+0x128>
    770c:	04810004 	movi	r18,1024
    7710:	10820014 	ori	r2,r2,2048
    7714:	8080030d 	sth	r2,12(r16)
    7718:	0027883a 	mov	r19,zero
    771c:	900b883a 	mov	r5,r18
    7720:	8809883a 	mov	r4,r17
    7724:	0001de00 	call	1de0 <_malloc_r>
    7728:	10002c26 	beq	r2,zero,77dc <__smakebuf_r+0x17c>
    772c:	80c0030b 	ldhu	r3,12(r16)
    7730:	01000034 	movhi	r4,0
    7734:	2119dd04 	addi	r4,r4,26484
    7738:	89000f15 	stw	r4,60(r17)
    773c:	18c02014 	ori	r3,r3,128
    7740:	80c0030d 	sth	r3,12(r16)
    7744:	80800015 	stw	r2,0(r16)
    7748:	80800415 	stw	r2,16(r16)
    774c:	84800515 	stw	r18,20(r16)
    7750:	98001a1e 	bne	r19,zero,77bc <__smakebuf_r+0x15c>
    7754:	dfc01317 	ldw	ra,76(sp)
    7758:	dcc01217 	ldw	r19,72(sp)
    775c:	dc801117 	ldw	r18,68(sp)
    7760:	dc401017 	ldw	r17,64(sp)
    7764:	dc000f17 	ldw	r16,60(sp)
    7768:	dec01404 	addi	sp,sp,80
    776c:	f800283a 	ret
    7770:	288010c4 	addi	r2,r5,67
    7774:	28800015 	stw	r2,0(r5)
    7778:	28800415 	stw	r2,16(r5)
    777c:	00800044 	movi	r2,1
    7780:	28800515 	stw	r2,20(r5)
    7784:	f800283a 	ret
    7788:	04801004 	movi	r18,64
    778c:	003fe006 	br	7710 <__alt_data_end+0xff007710>
    7790:	81000a17 	ldw	r4,40(r16)
    7794:	00c00074 	movhi	r3,1
    7798:	18e4de04 	addi	r3,r3,-27784
    779c:	20ffc51e 	bne	r4,r3,76b4 <__alt_data_end+0xff0076b4>
    77a0:	8080030b 	ldhu	r2,12(r16)
    77a4:	04810004 	movi	r18,1024
    77a8:	84801315 	stw	r18,76(r16)
    77ac:	1484b03a 	or	r2,r2,r18
    77b0:	8080030d 	sth	r2,12(r16)
    77b4:	0027883a 	mov	r19,zero
    77b8:	003fd806 	br	771c <__alt_data_end+0xff00771c>
    77bc:	8140038f 	ldh	r5,14(r16)
    77c0:	8809883a 	mov	r4,r17
    77c4:	000afe00 	call	afe0 <_isatty_r>
    77c8:	103fe226 	beq	r2,zero,7754 <__alt_data_end+0xff007754>
    77cc:	8080030b 	ldhu	r2,12(r16)
    77d0:	10800054 	ori	r2,r2,1
    77d4:	8080030d 	sth	r2,12(r16)
    77d8:	003fde06 	br	7754 <__alt_data_end+0xff007754>
    77dc:	8080030b 	ldhu	r2,12(r16)
    77e0:	10c0800c 	andi	r3,r2,512
    77e4:	183fdb1e 	bne	r3,zero,7754 <__alt_data_end+0xff007754>
    77e8:	10800094 	ori	r2,r2,2
    77ec:	80c010c4 	addi	r3,r16,67
    77f0:	8080030d 	sth	r2,12(r16)
    77f4:	00800044 	movi	r2,1
    77f8:	80c00015 	stw	r3,0(r16)
    77fc:	80c00415 	stw	r3,16(r16)
    7800:	80800515 	stw	r2,20(r16)
    7804:	003fd306 	br	7754 <__alt_data_end+0xff007754>
    7808:	04810004 	movi	r18,1024
    780c:	003fc306 	br	771c <__alt_data_end+0xff00771c>
    7810:	0027883a 	mov	r19,zero
    7814:	04810004 	movi	r18,1024
    7818:	003fc006 	br	771c <__alt_data_end+0xff00771c>

0000781c <memchr>:
    781c:	208000cc 	andi	r2,r4,3
    7820:	280f883a 	mov	r7,r5
    7824:	10003426 	beq	r2,zero,78f8 <memchr+0xdc>
    7828:	30bfffc4 	addi	r2,r6,-1
    782c:	30001a26 	beq	r6,zero,7898 <memchr+0x7c>
    7830:	20c00003 	ldbu	r3,0(r4)
    7834:	29803fcc 	andi	r6,r5,255
    7838:	30c0051e 	bne	r6,r3,7850 <memchr+0x34>
    783c:	00001806 	br	78a0 <memchr+0x84>
    7840:	10001526 	beq	r2,zero,7898 <memchr+0x7c>
    7844:	20c00003 	ldbu	r3,0(r4)
    7848:	10bfffc4 	addi	r2,r2,-1
    784c:	30c01426 	beq	r6,r3,78a0 <memchr+0x84>
    7850:	21000044 	addi	r4,r4,1
    7854:	20c000cc 	andi	r3,r4,3
    7858:	183ff91e 	bne	r3,zero,7840 <__alt_data_end+0xff007840>
    785c:	020000c4 	movi	r8,3
    7860:	40801136 	bltu	r8,r2,78a8 <memchr+0x8c>
    7864:	10000c26 	beq	r2,zero,7898 <memchr+0x7c>
    7868:	20c00003 	ldbu	r3,0(r4)
    786c:	29403fcc 	andi	r5,r5,255
    7870:	28c00b26 	beq	r5,r3,78a0 <memchr+0x84>
    7874:	20c00044 	addi	r3,r4,1
    7878:	39803fcc 	andi	r6,r7,255
    787c:	2089883a 	add	r4,r4,r2
    7880:	00000306 	br	7890 <memchr+0x74>
    7884:	18c00044 	addi	r3,r3,1
    7888:	197fffc3 	ldbu	r5,-1(r3)
    788c:	31400526 	beq	r6,r5,78a4 <memchr+0x88>
    7890:	1805883a 	mov	r2,r3
    7894:	20fffb1e 	bne	r4,r3,7884 <__alt_data_end+0xff007884>
    7898:	0005883a 	mov	r2,zero
    789c:	f800283a 	ret
    78a0:	2005883a 	mov	r2,r4
    78a4:	f800283a 	ret
    78a8:	28c03fcc 	andi	r3,r5,255
    78ac:	1812923a 	slli	r9,r3,8
    78b0:	02ffbff4 	movhi	r11,65279
    78b4:	02a02074 	movhi	r10,32897
    78b8:	48d2b03a 	or	r9,r9,r3
    78bc:	4806943a 	slli	r3,r9,16
    78c0:	5affbfc4 	addi	r11,r11,-257
    78c4:	52a02004 	addi	r10,r10,-32640
    78c8:	48d2b03a 	or	r9,r9,r3
    78cc:	20c00017 	ldw	r3,0(r4)
    78d0:	48c6f03a 	xor	r3,r9,r3
    78d4:	1acd883a 	add	r6,r3,r11
    78d8:	00c6303a 	nor	r3,zero,r3
    78dc:	30c6703a 	and	r3,r6,r3
    78e0:	1a86703a 	and	r3,r3,r10
    78e4:	183fe01e 	bne	r3,zero,7868 <__alt_data_end+0xff007868>
    78e8:	10bfff04 	addi	r2,r2,-4
    78ec:	21000104 	addi	r4,r4,4
    78f0:	40bff636 	bltu	r8,r2,78cc <__alt_data_end+0xff0078cc>
    78f4:	003fdb06 	br	7864 <__alt_data_end+0xff007864>
    78f8:	3005883a 	mov	r2,r6
    78fc:	003fd706 	br	785c <__alt_data_end+0xff00785c>

00007900 <memcpy>:
    7900:	defffd04 	addi	sp,sp,-12
    7904:	dfc00215 	stw	ra,8(sp)
    7908:	dc400115 	stw	r17,4(sp)
    790c:	dc000015 	stw	r16,0(sp)
    7910:	00c003c4 	movi	r3,15
    7914:	2005883a 	mov	r2,r4
    7918:	1980452e 	bgeu	r3,r6,7a30 <memcpy+0x130>
    791c:	2906b03a 	or	r3,r5,r4
    7920:	18c000cc 	andi	r3,r3,3
    7924:	1800441e 	bne	r3,zero,7a38 <memcpy+0x138>
    7928:	347ffc04 	addi	r17,r6,-16
    792c:	8822d13a 	srli	r17,r17,4
    7930:	28c00104 	addi	r3,r5,4
    7934:	23400104 	addi	r13,r4,4
    7938:	8820913a 	slli	r16,r17,4
    793c:	2b000204 	addi	r12,r5,8
    7940:	22c00204 	addi	r11,r4,8
    7944:	84000504 	addi	r16,r16,20
    7948:	2a800304 	addi	r10,r5,12
    794c:	22400304 	addi	r9,r4,12
    7950:	2c21883a 	add	r16,r5,r16
    7954:	2811883a 	mov	r8,r5
    7958:	200f883a 	mov	r7,r4
    795c:	41000017 	ldw	r4,0(r8)
    7960:	1fc00017 	ldw	ra,0(r3)
    7964:	63c00017 	ldw	r15,0(r12)
    7968:	39000015 	stw	r4,0(r7)
    796c:	53800017 	ldw	r14,0(r10)
    7970:	6fc00015 	stw	ra,0(r13)
    7974:	5bc00015 	stw	r15,0(r11)
    7978:	4b800015 	stw	r14,0(r9)
    797c:	18c00404 	addi	r3,r3,16
    7980:	39c00404 	addi	r7,r7,16
    7984:	42000404 	addi	r8,r8,16
    7988:	6b400404 	addi	r13,r13,16
    798c:	63000404 	addi	r12,r12,16
    7990:	5ac00404 	addi	r11,r11,16
    7994:	52800404 	addi	r10,r10,16
    7998:	4a400404 	addi	r9,r9,16
    799c:	1c3fef1e 	bne	r3,r16,795c <__alt_data_end+0xff00795c>
    79a0:	89c00044 	addi	r7,r17,1
    79a4:	380e913a 	slli	r7,r7,4
    79a8:	310003cc 	andi	r4,r6,15
    79ac:	02c000c4 	movi	r11,3
    79b0:	11c7883a 	add	r3,r2,r7
    79b4:	29cb883a 	add	r5,r5,r7
    79b8:	5900212e 	bgeu	r11,r4,7a40 <memcpy+0x140>
    79bc:	1813883a 	mov	r9,r3
    79c0:	2811883a 	mov	r8,r5
    79c4:	200f883a 	mov	r7,r4
    79c8:	42800017 	ldw	r10,0(r8)
    79cc:	4a400104 	addi	r9,r9,4
    79d0:	39ffff04 	addi	r7,r7,-4
    79d4:	4abfff15 	stw	r10,-4(r9)
    79d8:	42000104 	addi	r8,r8,4
    79dc:	59fffa36 	bltu	r11,r7,79c8 <__alt_data_end+0xff0079c8>
    79e0:	213fff04 	addi	r4,r4,-4
    79e4:	2008d0ba 	srli	r4,r4,2
    79e8:	318000cc 	andi	r6,r6,3
    79ec:	21000044 	addi	r4,r4,1
    79f0:	2109883a 	add	r4,r4,r4
    79f4:	2109883a 	add	r4,r4,r4
    79f8:	1907883a 	add	r3,r3,r4
    79fc:	290b883a 	add	r5,r5,r4
    7a00:	30000626 	beq	r6,zero,7a1c <memcpy+0x11c>
    7a04:	198d883a 	add	r6,r3,r6
    7a08:	29c00003 	ldbu	r7,0(r5)
    7a0c:	18c00044 	addi	r3,r3,1
    7a10:	29400044 	addi	r5,r5,1
    7a14:	19ffffc5 	stb	r7,-1(r3)
    7a18:	19bffb1e 	bne	r3,r6,7a08 <__alt_data_end+0xff007a08>
    7a1c:	dfc00217 	ldw	ra,8(sp)
    7a20:	dc400117 	ldw	r17,4(sp)
    7a24:	dc000017 	ldw	r16,0(sp)
    7a28:	dec00304 	addi	sp,sp,12
    7a2c:	f800283a 	ret
    7a30:	2007883a 	mov	r3,r4
    7a34:	003ff206 	br	7a00 <__alt_data_end+0xff007a00>
    7a38:	2007883a 	mov	r3,r4
    7a3c:	003ff106 	br	7a04 <__alt_data_end+0xff007a04>
    7a40:	200d883a 	mov	r6,r4
    7a44:	003fee06 	br	7a00 <__alt_data_end+0xff007a00>

00007a48 <memmove>:
    7a48:	2005883a 	mov	r2,r4
    7a4c:	29000b2e 	bgeu	r5,r4,7a7c <memmove+0x34>
    7a50:	298f883a 	add	r7,r5,r6
    7a54:	21c0092e 	bgeu	r4,r7,7a7c <memmove+0x34>
    7a58:	2187883a 	add	r3,r4,r6
    7a5c:	198bc83a 	sub	r5,r3,r6
    7a60:	30004826 	beq	r6,zero,7b84 <memmove+0x13c>
    7a64:	39ffffc4 	addi	r7,r7,-1
    7a68:	39000003 	ldbu	r4,0(r7)
    7a6c:	18ffffc4 	addi	r3,r3,-1
    7a70:	19000005 	stb	r4,0(r3)
    7a74:	28fffb1e 	bne	r5,r3,7a64 <__alt_data_end+0xff007a64>
    7a78:	f800283a 	ret
    7a7c:	00c003c4 	movi	r3,15
    7a80:	1980412e 	bgeu	r3,r6,7b88 <memmove+0x140>
    7a84:	2886b03a 	or	r3,r5,r2
    7a88:	18c000cc 	andi	r3,r3,3
    7a8c:	1800401e 	bne	r3,zero,7b90 <memmove+0x148>
    7a90:	33fffc04 	addi	r15,r6,-16
    7a94:	781ed13a 	srli	r15,r15,4
    7a98:	28c00104 	addi	r3,r5,4
    7a9c:	13400104 	addi	r13,r2,4
    7aa0:	781c913a 	slli	r14,r15,4
    7aa4:	2b000204 	addi	r12,r5,8
    7aa8:	12c00204 	addi	r11,r2,8
    7aac:	73800504 	addi	r14,r14,20
    7ab0:	2a800304 	addi	r10,r5,12
    7ab4:	12400304 	addi	r9,r2,12
    7ab8:	2b9d883a 	add	r14,r5,r14
    7abc:	2811883a 	mov	r8,r5
    7ac0:	100f883a 	mov	r7,r2
    7ac4:	41000017 	ldw	r4,0(r8)
    7ac8:	39c00404 	addi	r7,r7,16
    7acc:	18c00404 	addi	r3,r3,16
    7ad0:	393ffc15 	stw	r4,-16(r7)
    7ad4:	193ffc17 	ldw	r4,-16(r3)
    7ad8:	6b400404 	addi	r13,r13,16
    7adc:	5ac00404 	addi	r11,r11,16
    7ae0:	693ffc15 	stw	r4,-16(r13)
    7ae4:	61000017 	ldw	r4,0(r12)
    7ae8:	4a400404 	addi	r9,r9,16
    7aec:	42000404 	addi	r8,r8,16
    7af0:	593ffc15 	stw	r4,-16(r11)
    7af4:	51000017 	ldw	r4,0(r10)
    7af8:	63000404 	addi	r12,r12,16
    7afc:	52800404 	addi	r10,r10,16
    7b00:	493ffc15 	stw	r4,-16(r9)
    7b04:	1bbfef1e 	bne	r3,r14,7ac4 <__alt_data_end+0xff007ac4>
    7b08:	79000044 	addi	r4,r15,1
    7b0c:	2008913a 	slli	r4,r4,4
    7b10:	328003cc 	andi	r10,r6,15
    7b14:	02c000c4 	movi	r11,3
    7b18:	1107883a 	add	r3,r2,r4
    7b1c:	290b883a 	add	r5,r5,r4
    7b20:	5a801e2e 	bgeu	r11,r10,7b9c <memmove+0x154>
    7b24:	1813883a 	mov	r9,r3
    7b28:	2811883a 	mov	r8,r5
    7b2c:	500f883a 	mov	r7,r10
    7b30:	41000017 	ldw	r4,0(r8)
    7b34:	4a400104 	addi	r9,r9,4
    7b38:	39ffff04 	addi	r7,r7,-4
    7b3c:	493fff15 	stw	r4,-4(r9)
    7b40:	42000104 	addi	r8,r8,4
    7b44:	59fffa36 	bltu	r11,r7,7b30 <__alt_data_end+0xff007b30>
    7b48:	513fff04 	addi	r4,r10,-4
    7b4c:	2008d0ba 	srli	r4,r4,2
    7b50:	318000cc 	andi	r6,r6,3
    7b54:	21000044 	addi	r4,r4,1
    7b58:	2109883a 	add	r4,r4,r4
    7b5c:	2109883a 	add	r4,r4,r4
    7b60:	1907883a 	add	r3,r3,r4
    7b64:	290b883a 	add	r5,r5,r4
    7b68:	30000b26 	beq	r6,zero,7b98 <memmove+0x150>
    7b6c:	198d883a 	add	r6,r3,r6
    7b70:	29c00003 	ldbu	r7,0(r5)
    7b74:	18c00044 	addi	r3,r3,1
    7b78:	29400044 	addi	r5,r5,1
    7b7c:	19ffffc5 	stb	r7,-1(r3)
    7b80:	19bffb1e 	bne	r3,r6,7b70 <__alt_data_end+0xff007b70>
    7b84:	f800283a 	ret
    7b88:	1007883a 	mov	r3,r2
    7b8c:	003ff606 	br	7b68 <__alt_data_end+0xff007b68>
    7b90:	1007883a 	mov	r3,r2
    7b94:	003ff506 	br	7b6c <__alt_data_end+0xff007b6c>
    7b98:	f800283a 	ret
    7b9c:	500d883a 	mov	r6,r10
    7ba0:	003ff106 	br	7b68 <__alt_data_end+0xff007b68>

00007ba4 <memset>:
    7ba4:	20c000cc 	andi	r3,r4,3
    7ba8:	2005883a 	mov	r2,r4
    7bac:	18004426 	beq	r3,zero,7cc0 <memset+0x11c>
    7bb0:	31ffffc4 	addi	r7,r6,-1
    7bb4:	30004026 	beq	r6,zero,7cb8 <memset+0x114>
    7bb8:	2813883a 	mov	r9,r5
    7bbc:	200d883a 	mov	r6,r4
    7bc0:	2007883a 	mov	r3,r4
    7bc4:	00000406 	br	7bd8 <memset+0x34>
    7bc8:	3a3fffc4 	addi	r8,r7,-1
    7bcc:	31800044 	addi	r6,r6,1
    7bd0:	38003926 	beq	r7,zero,7cb8 <memset+0x114>
    7bd4:	400f883a 	mov	r7,r8
    7bd8:	18c00044 	addi	r3,r3,1
    7bdc:	32400005 	stb	r9,0(r6)
    7be0:	1a0000cc 	andi	r8,r3,3
    7be4:	403ff81e 	bne	r8,zero,7bc8 <__alt_data_end+0xff007bc8>
    7be8:	010000c4 	movi	r4,3
    7bec:	21c02d2e 	bgeu	r4,r7,7ca4 <memset+0x100>
    7bf0:	29003fcc 	andi	r4,r5,255
    7bf4:	200c923a 	slli	r6,r4,8
    7bf8:	3108b03a 	or	r4,r6,r4
    7bfc:	200c943a 	slli	r6,r4,16
    7c00:	218cb03a 	or	r6,r4,r6
    7c04:	010003c4 	movi	r4,15
    7c08:	21c0182e 	bgeu	r4,r7,7c6c <memset+0xc8>
    7c0c:	3b3ffc04 	addi	r12,r7,-16
    7c10:	6018d13a 	srli	r12,r12,4
    7c14:	1a000104 	addi	r8,r3,4
    7c18:	1ac00204 	addi	r11,r3,8
    7c1c:	6008913a 	slli	r4,r12,4
    7c20:	1a800304 	addi	r10,r3,12
    7c24:	1813883a 	mov	r9,r3
    7c28:	21000504 	addi	r4,r4,20
    7c2c:	1909883a 	add	r4,r3,r4
    7c30:	49800015 	stw	r6,0(r9)
    7c34:	41800015 	stw	r6,0(r8)
    7c38:	59800015 	stw	r6,0(r11)
    7c3c:	51800015 	stw	r6,0(r10)
    7c40:	42000404 	addi	r8,r8,16
    7c44:	4a400404 	addi	r9,r9,16
    7c48:	5ac00404 	addi	r11,r11,16
    7c4c:	52800404 	addi	r10,r10,16
    7c50:	413ff71e 	bne	r8,r4,7c30 <__alt_data_end+0xff007c30>
    7c54:	63000044 	addi	r12,r12,1
    7c58:	6018913a 	slli	r12,r12,4
    7c5c:	39c003cc 	andi	r7,r7,15
    7c60:	010000c4 	movi	r4,3
    7c64:	1b07883a 	add	r3,r3,r12
    7c68:	21c00e2e 	bgeu	r4,r7,7ca4 <memset+0x100>
    7c6c:	1813883a 	mov	r9,r3
    7c70:	3811883a 	mov	r8,r7
    7c74:	010000c4 	movi	r4,3
    7c78:	49800015 	stw	r6,0(r9)
    7c7c:	423fff04 	addi	r8,r8,-4
    7c80:	4a400104 	addi	r9,r9,4
    7c84:	223ffc36 	bltu	r4,r8,7c78 <__alt_data_end+0xff007c78>
    7c88:	393fff04 	addi	r4,r7,-4
    7c8c:	2008d0ba 	srli	r4,r4,2
    7c90:	39c000cc 	andi	r7,r7,3
    7c94:	21000044 	addi	r4,r4,1
    7c98:	2109883a 	add	r4,r4,r4
    7c9c:	2109883a 	add	r4,r4,r4
    7ca0:	1907883a 	add	r3,r3,r4
    7ca4:	38000526 	beq	r7,zero,7cbc <memset+0x118>
    7ca8:	19cf883a 	add	r7,r3,r7
    7cac:	19400005 	stb	r5,0(r3)
    7cb0:	18c00044 	addi	r3,r3,1
    7cb4:	38fffd1e 	bne	r7,r3,7cac <__alt_data_end+0xff007cac>
    7cb8:	f800283a 	ret
    7cbc:	f800283a 	ret
    7cc0:	2007883a 	mov	r3,r4
    7cc4:	300f883a 	mov	r7,r6
    7cc8:	003fc706 	br	7be8 <__alt_data_end+0xff007be8>

00007ccc <_Balloc>:
    7ccc:	20801317 	ldw	r2,76(r4)
    7cd0:	defffc04 	addi	sp,sp,-16
    7cd4:	dc400115 	stw	r17,4(sp)
    7cd8:	dc000015 	stw	r16,0(sp)
    7cdc:	dfc00315 	stw	ra,12(sp)
    7ce0:	dc800215 	stw	r18,8(sp)
    7ce4:	2023883a 	mov	r17,r4
    7ce8:	2821883a 	mov	r16,r5
    7cec:	10000f26 	beq	r2,zero,7d2c <_Balloc+0x60>
    7cf0:	8407883a 	add	r3,r16,r16
    7cf4:	18c7883a 	add	r3,r3,r3
    7cf8:	10c7883a 	add	r3,r2,r3
    7cfc:	18800017 	ldw	r2,0(r3)
    7d00:	10001126 	beq	r2,zero,7d48 <_Balloc+0x7c>
    7d04:	11000017 	ldw	r4,0(r2)
    7d08:	19000015 	stw	r4,0(r3)
    7d0c:	10000415 	stw	zero,16(r2)
    7d10:	10000315 	stw	zero,12(r2)
    7d14:	dfc00317 	ldw	ra,12(sp)
    7d18:	dc800217 	ldw	r18,8(sp)
    7d1c:	dc400117 	ldw	r17,4(sp)
    7d20:	dc000017 	ldw	r16,0(sp)
    7d24:	dec00404 	addi	sp,sp,16
    7d28:	f800283a 	ret
    7d2c:	01800844 	movi	r6,33
    7d30:	01400104 	movi	r5,4
    7d34:	000abb40 	call	abb4 <_calloc_r>
    7d38:	88801315 	stw	r2,76(r17)
    7d3c:	103fec1e 	bne	r2,zero,7cf0 <__alt_data_end+0xff007cf0>
    7d40:	0005883a 	mov	r2,zero
    7d44:	003ff306 	br	7d14 <__alt_data_end+0xff007d14>
    7d48:	01400044 	movi	r5,1
    7d4c:	2c24983a 	sll	r18,r5,r16
    7d50:	8809883a 	mov	r4,r17
    7d54:	91800144 	addi	r6,r18,5
    7d58:	318d883a 	add	r6,r6,r6
    7d5c:	318d883a 	add	r6,r6,r6
    7d60:	000abb40 	call	abb4 <_calloc_r>
    7d64:	103ff626 	beq	r2,zero,7d40 <__alt_data_end+0xff007d40>
    7d68:	14000115 	stw	r16,4(r2)
    7d6c:	14800215 	stw	r18,8(r2)
    7d70:	003fe606 	br	7d0c <__alt_data_end+0xff007d0c>

00007d74 <_Bfree>:
    7d74:	28000826 	beq	r5,zero,7d98 <_Bfree+0x24>
    7d78:	28c00117 	ldw	r3,4(r5)
    7d7c:	20801317 	ldw	r2,76(r4)
    7d80:	18c7883a 	add	r3,r3,r3
    7d84:	18c7883a 	add	r3,r3,r3
    7d88:	10c5883a 	add	r2,r2,r3
    7d8c:	10c00017 	ldw	r3,0(r2)
    7d90:	28c00015 	stw	r3,0(r5)
    7d94:	11400015 	stw	r5,0(r2)
    7d98:	f800283a 	ret

00007d9c <__multadd>:
    7d9c:	defffa04 	addi	sp,sp,-24
    7da0:	dc800315 	stw	r18,12(sp)
    7da4:	dc400215 	stw	r17,8(sp)
    7da8:	dc000115 	stw	r16,4(sp)
    7dac:	2823883a 	mov	r17,r5
    7db0:	2c000417 	ldw	r16,16(r5)
    7db4:	dfc00515 	stw	ra,20(sp)
    7db8:	dcc00415 	stw	r19,16(sp)
    7dbc:	2025883a 	mov	r18,r4
    7dc0:	29400504 	addi	r5,r5,20
    7dc4:	0011883a 	mov	r8,zero
    7dc8:	28c00017 	ldw	r3,0(r5)
    7dcc:	29400104 	addi	r5,r5,4
    7dd0:	42000044 	addi	r8,r8,1
    7dd4:	18bfffcc 	andi	r2,r3,65535
    7dd8:	1185383a 	mul	r2,r2,r6
    7ddc:	1806d43a 	srli	r3,r3,16
    7de0:	11cf883a 	add	r7,r2,r7
    7de4:	3808d43a 	srli	r4,r7,16
    7de8:	1987383a 	mul	r3,r3,r6
    7dec:	38bfffcc 	andi	r2,r7,65535
    7df0:	1907883a 	add	r3,r3,r4
    7df4:	1808943a 	slli	r4,r3,16
    7df8:	180ed43a 	srli	r7,r3,16
    7dfc:	2085883a 	add	r2,r4,r2
    7e00:	28bfff15 	stw	r2,-4(r5)
    7e04:	443ff016 	blt	r8,r16,7dc8 <__alt_data_end+0xff007dc8>
    7e08:	38000926 	beq	r7,zero,7e30 <__multadd+0x94>
    7e0c:	88800217 	ldw	r2,8(r17)
    7e10:	80800f0e 	bge	r16,r2,7e50 <__multadd+0xb4>
    7e14:	80800144 	addi	r2,r16,5
    7e18:	1085883a 	add	r2,r2,r2
    7e1c:	1085883a 	add	r2,r2,r2
    7e20:	8885883a 	add	r2,r17,r2
    7e24:	11c00015 	stw	r7,0(r2)
    7e28:	84000044 	addi	r16,r16,1
    7e2c:	8c000415 	stw	r16,16(r17)
    7e30:	8805883a 	mov	r2,r17
    7e34:	dfc00517 	ldw	ra,20(sp)
    7e38:	dcc00417 	ldw	r19,16(sp)
    7e3c:	dc800317 	ldw	r18,12(sp)
    7e40:	dc400217 	ldw	r17,8(sp)
    7e44:	dc000117 	ldw	r16,4(sp)
    7e48:	dec00604 	addi	sp,sp,24
    7e4c:	f800283a 	ret
    7e50:	89400117 	ldw	r5,4(r17)
    7e54:	9009883a 	mov	r4,r18
    7e58:	d9c00015 	stw	r7,0(sp)
    7e5c:	29400044 	addi	r5,r5,1
    7e60:	0007ccc0 	call	7ccc <_Balloc>
    7e64:	89800417 	ldw	r6,16(r17)
    7e68:	89400304 	addi	r5,r17,12
    7e6c:	11000304 	addi	r4,r2,12
    7e70:	31800084 	addi	r6,r6,2
    7e74:	318d883a 	add	r6,r6,r6
    7e78:	318d883a 	add	r6,r6,r6
    7e7c:	1027883a 	mov	r19,r2
    7e80:	00079000 	call	7900 <memcpy>
    7e84:	d9c00017 	ldw	r7,0(sp)
    7e88:	88000a26 	beq	r17,zero,7eb4 <__multadd+0x118>
    7e8c:	88c00117 	ldw	r3,4(r17)
    7e90:	90801317 	ldw	r2,76(r18)
    7e94:	18c7883a 	add	r3,r3,r3
    7e98:	18c7883a 	add	r3,r3,r3
    7e9c:	10c5883a 	add	r2,r2,r3
    7ea0:	10c00017 	ldw	r3,0(r2)
    7ea4:	88c00015 	stw	r3,0(r17)
    7ea8:	14400015 	stw	r17,0(r2)
    7eac:	9823883a 	mov	r17,r19
    7eb0:	003fd806 	br	7e14 <__alt_data_end+0xff007e14>
    7eb4:	9823883a 	mov	r17,r19
    7eb8:	003fd606 	br	7e14 <__alt_data_end+0xff007e14>

00007ebc <__s2b>:
    7ebc:	defff904 	addi	sp,sp,-28
    7ec0:	dc400115 	stw	r17,4(sp)
    7ec4:	dc000015 	stw	r16,0(sp)
    7ec8:	2023883a 	mov	r17,r4
    7ecc:	2821883a 	mov	r16,r5
    7ed0:	39000204 	addi	r4,r7,8
    7ed4:	01400244 	movi	r5,9
    7ed8:	dcc00315 	stw	r19,12(sp)
    7edc:	dc800215 	stw	r18,8(sp)
    7ee0:	dfc00615 	stw	ra,24(sp)
    7ee4:	dd400515 	stw	r21,20(sp)
    7ee8:	dd000415 	stw	r20,16(sp)
    7eec:	3825883a 	mov	r18,r7
    7ef0:	3027883a 	mov	r19,r6
    7ef4:	000bee40 	call	bee4 <__divsi3>
    7ef8:	00c00044 	movi	r3,1
    7efc:	000b883a 	mov	r5,zero
    7f00:	1880030e 	bge	r3,r2,7f10 <__s2b+0x54>
    7f04:	18c7883a 	add	r3,r3,r3
    7f08:	29400044 	addi	r5,r5,1
    7f0c:	18bffd16 	blt	r3,r2,7f04 <__alt_data_end+0xff007f04>
    7f10:	8809883a 	mov	r4,r17
    7f14:	0007ccc0 	call	7ccc <_Balloc>
    7f18:	d8c00717 	ldw	r3,28(sp)
    7f1c:	10c00515 	stw	r3,20(r2)
    7f20:	00c00044 	movi	r3,1
    7f24:	10c00415 	stw	r3,16(r2)
    7f28:	00c00244 	movi	r3,9
    7f2c:	1cc0210e 	bge	r3,r19,7fb4 <__s2b+0xf8>
    7f30:	80eb883a 	add	r21,r16,r3
    7f34:	a829883a 	mov	r20,r21
    7f38:	84e1883a 	add	r16,r16,r19
    7f3c:	a1c00007 	ldb	r7,0(r20)
    7f40:	01800284 	movi	r6,10
    7f44:	a5000044 	addi	r20,r20,1
    7f48:	100b883a 	mov	r5,r2
    7f4c:	39fff404 	addi	r7,r7,-48
    7f50:	8809883a 	mov	r4,r17
    7f54:	0007d9c0 	call	7d9c <__multadd>
    7f58:	a43ff81e 	bne	r20,r16,7f3c <__alt_data_end+0xff007f3c>
    7f5c:	ace1883a 	add	r16,r21,r19
    7f60:	843ffe04 	addi	r16,r16,-8
    7f64:	9c800a0e 	bge	r19,r18,7f90 <__s2b+0xd4>
    7f68:	94e5c83a 	sub	r18,r18,r19
    7f6c:	84a5883a 	add	r18,r16,r18
    7f70:	81c00007 	ldb	r7,0(r16)
    7f74:	01800284 	movi	r6,10
    7f78:	84000044 	addi	r16,r16,1
    7f7c:	100b883a 	mov	r5,r2
    7f80:	39fff404 	addi	r7,r7,-48
    7f84:	8809883a 	mov	r4,r17
    7f88:	0007d9c0 	call	7d9c <__multadd>
    7f8c:	84bff81e 	bne	r16,r18,7f70 <__alt_data_end+0xff007f70>
    7f90:	dfc00617 	ldw	ra,24(sp)
    7f94:	dd400517 	ldw	r21,20(sp)
    7f98:	dd000417 	ldw	r20,16(sp)
    7f9c:	dcc00317 	ldw	r19,12(sp)
    7fa0:	dc800217 	ldw	r18,8(sp)
    7fa4:	dc400117 	ldw	r17,4(sp)
    7fa8:	dc000017 	ldw	r16,0(sp)
    7fac:	dec00704 	addi	sp,sp,28
    7fb0:	f800283a 	ret
    7fb4:	84000284 	addi	r16,r16,10
    7fb8:	1827883a 	mov	r19,r3
    7fbc:	003fe906 	br	7f64 <__alt_data_end+0xff007f64>

00007fc0 <__hi0bits>:
    7fc0:	20bfffec 	andhi	r2,r4,65535
    7fc4:	1000141e 	bne	r2,zero,8018 <__hi0bits+0x58>
    7fc8:	2008943a 	slli	r4,r4,16
    7fcc:	00800404 	movi	r2,16
    7fd0:	20ffc02c 	andhi	r3,r4,65280
    7fd4:	1800021e 	bne	r3,zero,7fe0 <__hi0bits+0x20>
    7fd8:	2008923a 	slli	r4,r4,8
    7fdc:	10800204 	addi	r2,r2,8
    7fe0:	20fc002c 	andhi	r3,r4,61440
    7fe4:	1800021e 	bne	r3,zero,7ff0 <__hi0bits+0x30>
    7fe8:	2008913a 	slli	r4,r4,4
    7fec:	10800104 	addi	r2,r2,4
    7ff0:	20f0002c 	andhi	r3,r4,49152
    7ff4:	1800031e 	bne	r3,zero,8004 <__hi0bits+0x44>
    7ff8:	2109883a 	add	r4,r4,r4
    7ffc:	10800084 	addi	r2,r2,2
    8000:	2109883a 	add	r4,r4,r4
    8004:	20000316 	blt	r4,zero,8014 <__hi0bits+0x54>
    8008:	2110002c 	andhi	r4,r4,16384
    800c:	2000041e 	bne	r4,zero,8020 <__hi0bits+0x60>
    8010:	00800804 	movi	r2,32
    8014:	f800283a 	ret
    8018:	0005883a 	mov	r2,zero
    801c:	003fec06 	br	7fd0 <__alt_data_end+0xff007fd0>
    8020:	10800044 	addi	r2,r2,1
    8024:	f800283a 	ret

00008028 <__lo0bits>:
    8028:	20c00017 	ldw	r3,0(r4)
    802c:	188001cc 	andi	r2,r3,7
    8030:	10000826 	beq	r2,zero,8054 <__lo0bits+0x2c>
    8034:	1880004c 	andi	r2,r3,1
    8038:	1000211e 	bne	r2,zero,80c0 <__lo0bits+0x98>
    803c:	1880008c 	andi	r2,r3,2
    8040:	1000211e 	bne	r2,zero,80c8 <__lo0bits+0xa0>
    8044:	1806d0ba 	srli	r3,r3,2
    8048:	00800084 	movi	r2,2
    804c:	20c00015 	stw	r3,0(r4)
    8050:	f800283a 	ret
    8054:	18bfffcc 	andi	r2,r3,65535
    8058:	10001326 	beq	r2,zero,80a8 <__lo0bits+0x80>
    805c:	0005883a 	mov	r2,zero
    8060:	19403fcc 	andi	r5,r3,255
    8064:	2800021e 	bne	r5,zero,8070 <__lo0bits+0x48>
    8068:	1806d23a 	srli	r3,r3,8
    806c:	10800204 	addi	r2,r2,8
    8070:	194003cc 	andi	r5,r3,15
    8074:	2800021e 	bne	r5,zero,8080 <__lo0bits+0x58>
    8078:	1806d13a 	srli	r3,r3,4
    807c:	10800104 	addi	r2,r2,4
    8080:	194000cc 	andi	r5,r3,3
    8084:	2800021e 	bne	r5,zero,8090 <__lo0bits+0x68>
    8088:	1806d0ba 	srli	r3,r3,2
    808c:	10800084 	addi	r2,r2,2
    8090:	1940004c 	andi	r5,r3,1
    8094:	2800081e 	bne	r5,zero,80b8 <__lo0bits+0x90>
    8098:	1806d07a 	srli	r3,r3,1
    809c:	1800051e 	bne	r3,zero,80b4 <__lo0bits+0x8c>
    80a0:	00800804 	movi	r2,32
    80a4:	f800283a 	ret
    80a8:	1806d43a 	srli	r3,r3,16
    80ac:	00800404 	movi	r2,16
    80b0:	003feb06 	br	8060 <__alt_data_end+0xff008060>
    80b4:	10800044 	addi	r2,r2,1
    80b8:	20c00015 	stw	r3,0(r4)
    80bc:	f800283a 	ret
    80c0:	0005883a 	mov	r2,zero
    80c4:	f800283a 	ret
    80c8:	1806d07a 	srli	r3,r3,1
    80cc:	00800044 	movi	r2,1
    80d0:	20c00015 	stw	r3,0(r4)
    80d4:	f800283a 	ret

000080d8 <__i2b>:
    80d8:	defffd04 	addi	sp,sp,-12
    80dc:	dc000015 	stw	r16,0(sp)
    80e0:	04000044 	movi	r16,1
    80e4:	dc400115 	stw	r17,4(sp)
    80e8:	2823883a 	mov	r17,r5
    80ec:	800b883a 	mov	r5,r16
    80f0:	dfc00215 	stw	ra,8(sp)
    80f4:	0007ccc0 	call	7ccc <_Balloc>
    80f8:	14400515 	stw	r17,20(r2)
    80fc:	14000415 	stw	r16,16(r2)
    8100:	dfc00217 	ldw	ra,8(sp)
    8104:	dc400117 	ldw	r17,4(sp)
    8108:	dc000017 	ldw	r16,0(sp)
    810c:	dec00304 	addi	sp,sp,12
    8110:	f800283a 	ret

00008114 <__multiply>:
    8114:	defffa04 	addi	sp,sp,-24
    8118:	dcc00315 	stw	r19,12(sp)
    811c:	dc800215 	stw	r18,8(sp)
    8120:	34c00417 	ldw	r19,16(r6)
    8124:	2c800417 	ldw	r18,16(r5)
    8128:	dd000415 	stw	r20,16(sp)
    812c:	dc400115 	stw	r17,4(sp)
    8130:	dfc00515 	stw	ra,20(sp)
    8134:	dc000015 	stw	r16,0(sp)
    8138:	2829883a 	mov	r20,r5
    813c:	3023883a 	mov	r17,r6
    8140:	94c0050e 	bge	r18,r19,8158 <__multiply+0x44>
    8144:	9007883a 	mov	r3,r18
    8148:	3029883a 	mov	r20,r6
    814c:	9825883a 	mov	r18,r19
    8150:	2823883a 	mov	r17,r5
    8154:	1827883a 	mov	r19,r3
    8158:	a0800217 	ldw	r2,8(r20)
    815c:	94e1883a 	add	r16,r18,r19
    8160:	a1400117 	ldw	r5,4(r20)
    8164:	1400010e 	bge	r2,r16,816c <__multiply+0x58>
    8168:	29400044 	addi	r5,r5,1
    816c:	0007ccc0 	call	7ccc <_Balloc>
    8170:	8415883a 	add	r10,r16,r16
    8174:	12c00504 	addi	r11,r2,20
    8178:	5295883a 	add	r10,r10,r10
    817c:	5a95883a 	add	r10,r11,r10
    8180:	5807883a 	mov	r3,r11
    8184:	5a80032e 	bgeu	r11,r10,8194 <__multiply+0x80>
    8188:	18000015 	stw	zero,0(r3)
    818c:	18c00104 	addi	r3,r3,4
    8190:	1abffd36 	bltu	r3,r10,8188 <__alt_data_end+0xff008188>
    8194:	9ce7883a 	add	r19,r19,r19
    8198:	94a5883a 	add	r18,r18,r18
    819c:	89800504 	addi	r6,r17,20
    81a0:	9ce7883a 	add	r19,r19,r19
    81a4:	a3400504 	addi	r13,r20,20
    81a8:	94a5883a 	add	r18,r18,r18
    81ac:	34d9883a 	add	r12,r6,r19
    81b0:	6c93883a 	add	r9,r13,r18
    81b4:	3300422e 	bgeu	r6,r12,82c0 <__multiply+0x1ac>
    81b8:	37c00017 	ldw	ra,0(r6)
    81bc:	fbffffcc 	andi	r15,ra,65535
    81c0:	78001b26 	beq	r15,zero,8230 <__multiply+0x11c>
    81c4:	5811883a 	mov	r8,r11
    81c8:	681d883a 	mov	r14,r13
    81cc:	000f883a 	mov	r7,zero
    81d0:	71000017 	ldw	r4,0(r14)
    81d4:	40c00017 	ldw	r3,0(r8)
    81d8:	73800104 	addi	r14,r14,4
    81dc:	217fffcc 	andi	r5,r4,65535
    81e0:	2bcb383a 	mul	r5,r5,r15
    81e4:	2008d43a 	srli	r4,r4,16
    81e8:	1c7fffcc 	andi	r17,r3,65535
    81ec:	2c4b883a 	add	r5,r5,r17
    81f0:	29cb883a 	add	r5,r5,r7
    81f4:	23c9383a 	mul	r4,r4,r15
    81f8:	1806d43a 	srli	r3,r3,16
    81fc:	280ed43a 	srli	r7,r5,16
    8200:	297fffcc 	andi	r5,r5,65535
    8204:	20c7883a 	add	r3,r4,r3
    8208:	19c7883a 	add	r3,r3,r7
    820c:	1808943a 	slli	r4,r3,16
    8210:	4023883a 	mov	r17,r8
    8214:	180ed43a 	srli	r7,r3,16
    8218:	214ab03a 	or	r5,r4,r5
    821c:	41400015 	stw	r5,0(r8)
    8220:	42000104 	addi	r8,r8,4
    8224:	727fea36 	bltu	r14,r9,81d0 <__alt_data_end+0xff0081d0>
    8228:	89c00115 	stw	r7,4(r17)
    822c:	37c00017 	ldw	ra,0(r6)
    8230:	f83ed43a 	srli	ra,ra,16
    8234:	f8001f26 	beq	ra,zero,82b4 <__multiply+0x1a0>
    8238:	58c00017 	ldw	r3,0(r11)
    823c:	681d883a 	mov	r14,r13
    8240:	581f883a 	mov	r15,r11
    8244:	1811883a 	mov	r8,r3
    8248:	5825883a 	mov	r18,r11
    824c:	000f883a 	mov	r7,zero
    8250:	00000106 	br	8258 <__multiply+0x144>
    8254:	8825883a 	mov	r18,r17
    8258:	7140000b 	ldhu	r5,0(r14)
    825c:	4010d43a 	srli	r8,r8,16
    8260:	193fffcc 	andi	r4,r3,65535
    8264:	2fcb383a 	mul	r5,r5,ra
    8268:	7bc00104 	addi	r15,r15,4
    826c:	73800104 	addi	r14,r14,4
    8270:	2a0b883a 	add	r5,r5,r8
    8274:	29cb883a 	add	r5,r5,r7
    8278:	2806943a 	slli	r3,r5,16
    827c:	94400104 	addi	r17,r18,4
    8280:	280ad43a 	srli	r5,r5,16
    8284:	1908b03a 	or	r4,r3,r4
    8288:	793fff15 	stw	r4,-4(r15)
    828c:	70ffff17 	ldw	r3,-4(r14)
    8290:	8a000017 	ldw	r8,0(r17)
    8294:	1806d43a 	srli	r3,r3,16
    8298:	413fffcc 	andi	r4,r8,65535
    829c:	1fc7383a 	mul	r3,r3,ra
    82a0:	1907883a 	add	r3,r3,r4
    82a4:	1947883a 	add	r3,r3,r5
    82a8:	180ed43a 	srli	r7,r3,16
    82ac:	727fe936 	bltu	r14,r9,8254 <__alt_data_end+0xff008254>
    82b0:	90c00115 	stw	r3,4(r18)
    82b4:	31800104 	addi	r6,r6,4
    82b8:	5ac00104 	addi	r11,r11,4
    82bc:	333fbe36 	bltu	r6,r12,81b8 <__alt_data_end+0xff0081b8>
    82c0:	0400090e 	bge	zero,r16,82e8 <__multiply+0x1d4>
    82c4:	50ffff17 	ldw	r3,-4(r10)
    82c8:	52bfff04 	addi	r10,r10,-4
    82cc:	18000326 	beq	r3,zero,82dc <__multiply+0x1c8>
    82d0:	00000506 	br	82e8 <__multiply+0x1d4>
    82d4:	50c00017 	ldw	r3,0(r10)
    82d8:	1800031e 	bne	r3,zero,82e8 <__multiply+0x1d4>
    82dc:	843fffc4 	addi	r16,r16,-1
    82e0:	52bfff04 	addi	r10,r10,-4
    82e4:	803ffb1e 	bne	r16,zero,82d4 <__alt_data_end+0xff0082d4>
    82e8:	14000415 	stw	r16,16(r2)
    82ec:	dfc00517 	ldw	ra,20(sp)
    82f0:	dd000417 	ldw	r20,16(sp)
    82f4:	dcc00317 	ldw	r19,12(sp)
    82f8:	dc800217 	ldw	r18,8(sp)
    82fc:	dc400117 	ldw	r17,4(sp)
    8300:	dc000017 	ldw	r16,0(sp)
    8304:	dec00604 	addi	sp,sp,24
    8308:	f800283a 	ret

0000830c <__pow5mult>:
    830c:	defffa04 	addi	sp,sp,-24
    8310:	dcc00315 	stw	r19,12(sp)
    8314:	dc000015 	stw	r16,0(sp)
    8318:	dfc00515 	stw	ra,20(sp)
    831c:	dd000415 	stw	r20,16(sp)
    8320:	dc800215 	stw	r18,8(sp)
    8324:	dc400115 	stw	r17,4(sp)
    8328:	308000cc 	andi	r2,r6,3
    832c:	3021883a 	mov	r16,r6
    8330:	2027883a 	mov	r19,r4
    8334:	10002f1e 	bne	r2,zero,83f4 <__pow5mult+0xe8>
    8338:	2825883a 	mov	r18,r5
    833c:	8021d0ba 	srai	r16,r16,2
    8340:	80001a26 	beq	r16,zero,83ac <__pow5mult+0xa0>
    8344:	9c401217 	ldw	r17,72(r19)
    8348:	8800061e 	bne	r17,zero,8364 <__pow5mult+0x58>
    834c:	00003406 	br	8420 <__pow5mult+0x114>
    8350:	8021d07a 	srai	r16,r16,1
    8354:	80001526 	beq	r16,zero,83ac <__pow5mult+0xa0>
    8358:	88800017 	ldw	r2,0(r17)
    835c:	10001c26 	beq	r2,zero,83d0 <__pow5mult+0xc4>
    8360:	1023883a 	mov	r17,r2
    8364:	8080004c 	andi	r2,r16,1
    8368:	103ff926 	beq	r2,zero,8350 <__alt_data_end+0xff008350>
    836c:	880d883a 	mov	r6,r17
    8370:	900b883a 	mov	r5,r18
    8374:	9809883a 	mov	r4,r19
    8378:	00081140 	call	8114 <__multiply>
    837c:	90001b26 	beq	r18,zero,83ec <__pow5mult+0xe0>
    8380:	91000117 	ldw	r4,4(r18)
    8384:	98c01317 	ldw	r3,76(r19)
    8388:	8021d07a 	srai	r16,r16,1
    838c:	2109883a 	add	r4,r4,r4
    8390:	2109883a 	add	r4,r4,r4
    8394:	1907883a 	add	r3,r3,r4
    8398:	19000017 	ldw	r4,0(r3)
    839c:	91000015 	stw	r4,0(r18)
    83a0:	1c800015 	stw	r18,0(r3)
    83a4:	1025883a 	mov	r18,r2
    83a8:	803feb1e 	bne	r16,zero,8358 <__alt_data_end+0xff008358>
    83ac:	9005883a 	mov	r2,r18
    83b0:	dfc00517 	ldw	ra,20(sp)
    83b4:	dd000417 	ldw	r20,16(sp)
    83b8:	dcc00317 	ldw	r19,12(sp)
    83bc:	dc800217 	ldw	r18,8(sp)
    83c0:	dc400117 	ldw	r17,4(sp)
    83c4:	dc000017 	ldw	r16,0(sp)
    83c8:	dec00604 	addi	sp,sp,24
    83cc:	f800283a 	ret
    83d0:	880d883a 	mov	r6,r17
    83d4:	880b883a 	mov	r5,r17
    83d8:	9809883a 	mov	r4,r19
    83dc:	00081140 	call	8114 <__multiply>
    83e0:	88800015 	stw	r2,0(r17)
    83e4:	10000015 	stw	zero,0(r2)
    83e8:	003fdd06 	br	8360 <__alt_data_end+0xff008360>
    83ec:	1025883a 	mov	r18,r2
    83f0:	003fd706 	br	8350 <__alt_data_end+0xff008350>
    83f4:	10bfffc4 	addi	r2,r2,-1
    83f8:	1085883a 	add	r2,r2,r2
    83fc:	00c00074 	movhi	r3,1
    8400:	18c61f04 	addi	r3,r3,6268
    8404:	1085883a 	add	r2,r2,r2
    8408:	1885883a 	add	r2,r3,r2
    840c:	11800017 	ldw	r6,0(r2)
    8410:	000f883a 	mov	r7,zero
    8414:	0007d9c0 	call	7d9c <__multadd>
    8418:	1025883a 	mov	r18,r2
    841c:	003fc706 	br	833c <__alt_data_end+0xff00833c>
    8420:	05000044 	movi	r20,1
    8424:	a00b883a 	mov	r5,r20
    8428:	9809883a 	mov	r4,r19
    842c:	0007ccc0 	call	7ccc <_Balloc>
    8430:	1023883a 	mov	r17,r2
    8434:	00809c44 	movi	r2,625
    8438:	88800515 	stw	r2,20(r17)
    843c:	8d000415 	stw	r20,16(r17)
    8440:	9c401215 	stw	r17,72(r19)
    8444:	88000015 	stw	zero,0(r17)
    8448:	003fc606 	br	8364 <__alt_data_end+0xff008364>

0000844c <__lshift>:
    844c:	defff904 	addi	sp,sp,-28
    8450:	dd400515 	stw	r21,20(sp)
    8454:	dcc00315 	stw	r19,12(sp)
    8458:	302bd17a 	srai	r21,r6,5
    845c:	2cc00417 	ldw	r19,16(r5)
    8460:	28800217 	ldw	r2,8(r5)
    8464:	dd000415 	stw	r20,16(sp)
    8468:	ace7883a 	add	r19,r21,r19
    846c:	dc800215 	stw	r18,8(sp)
    8470:	dc400115 	stw	r17,4(sp)
    8474:	dc000015 	stw	r16,0(sp)
    8478:	dfc00615 	stw	ra,24(sp)
    847c:	9c000044 	addi	r16,r19,1
    8480:	2823883a 	mov	r17,r5
    8484:	3029883a 	mov	r20,r6
    8488:	2025883a 	mov	r18,r4
    848c:	29400117 	ldw	r5,4(r5)
    8490:	1400030e 	bge	r2,r16,84a0 <__lshift+0x54>
    8494:	1085883a 	add	r2,r2,r2
    8498:	29400044 	addi	r5,r5,1
    849c:	143ffd16 	blt	r2,r16,8494 <__alt_data_end+0xff008494>
    84a0:	9009883a 	mov	r4,r18
    84a4:	0007ccc0 	call	7ccc <_Balloc>
    84a8:	10c00504 	addi	r3,r2,20
    84ac:	0540070e 	bge	zero,r21,84cc <__lshift+0x80>
    84b0:	ad6b883a 	add	r21,r21,r21
    84b4:	ad6b883a 	add	r21,r21,r21
    84b8:	1809883a 	mov	r4,r3
    84bc:	1d47883a 	add	r3,r3,r21
    84c0:	20000015 	stw	zero,0(r4)
    84c4:	21000104 	addi	r4,r4,4
    84c8:	193ffd1e 	bne	r3,r4,84c0 <__alt_data_end+0xff0084c0>
    84cc:	8a000417 	ldw	r8,16(r17)
    84d0:	89000504 	addi	r4,r17,20
    84d4:	a18007cc 	andi	r6,r20,31
    84d8:	4211883a 	add	r8,r8,r8
    84dc:	4211883a 	add	r8,r8,r8
    84e0:	2211883a 	add	r8,r4,r8
    84e4:	30002326 	beq	r6,zero,8574 <__lshift+0x128>
    84e8:	02400804 	movi	r9,32
    84ec:	4993c83a 	sub	r9,r9,r6
    84f0:	000b883a 	mov	r5,zero
    84f4:	21c00017 	ldw	r7,0(r4)
    84f8:	1815883a 	mov	r10,r3
    84fc:	18c00104 	addi	r3,r3,4
    8500:	398e983a 	sll	r7,r7,r6
    8504:	21000104 	addi	r4,r4,4
    8508:	394ab03a 	or	r5,r7,r5
    850c:	197fff15 	stw	r5,-4(r3)
    8510:	217fff17 	ldw	r5,-4(r4)
    8514:	2a4ad83a 	srl	r5,r5,r9
    8518:	223ff636 	bltu	r4,r8,84f4 <__alt_data_end+0xff0084f4>
    851c:	51400115 	stw	r5,4(r10)
    8520:	28001a1e 	bne	r5,zero,858c <__lshift+0x140>
    8524:	843fffc4 	addi	r16,r16,-1
    8528:	14000415 	stw	r16,16(r2)
    852c:	88000826 	beq	r17,zero,8550 <__lshift+0x104>
    8530:	89000117 	ldw	r4,4(r17)
    8534:	90c01317 	ldw	r3,76(r18)
    8538:	2109883a 	add	r4,r4,r4
    853c:	2109883a 	add	r4,r4,r4
    8540:	1907883a 	add	r3,r3,r4
    8544:	19000017 	ldw	r4,0(r3)
    8548:	89000015 	stw	r4,0(r17)
    854c:	1c400015 	stw	r17,0(r3)
    8550:	dfc00617 	ldw	ra,24(sp)
    8554:	dd400517 	ldw	r21,20(sp)
    8558:	dd000417 	ldw	r20,16(sp)
    855c:	dcc00317 	ldw	r19,12(sp)
    8560:	dc800217 	ldw	r18,8(sp)
    8564:	dc400117 	ldw	r17,4(sp)
    8568:	dc000017 	ldw	r16,0(sp)
    856c:	dec00704 	addi	sp,sp,28
    8570:	f800283a 	ret
    8574:	21400017 	ldw	r5,0(r4)
    8578:	18c00104 	addi	r3,r3,4
    857c:	21000104 	addi	r4,r4,4
    8580:	197fff15 	stw	r5,-4(r3)
    8584:	223ffb36 	bltu	r4,r8,8574 <__alt_data_end+0xff008574>
    8588:	003fe606 	br	8524 <__alt_data_end+0xff008524>
    858c:	9c000084 	addi	r16,r19,2
    8590:	003fe406 	br	8524 <__alt_data_end+0xff008524>

00008594 <__mcmp>:
    8594:	20800417 	ldw	r2,16(r4)
    8598:	28c00417 	ldw	r3,16(r5)
    859c:	10c5c83a 	sub	r2,r2,r3
    85a0:	1000111e 	bne	r2,zero,85e8 <__mcmp+0x54>
    85a4:	18c7883a 	add	r3,r3,r3
    85a8:	18c7883a 	add	r3,r3,r3
    85ac:	21000504 	addi	r4,r4,20
    85b0:	29400504 	addi	r5,r5,20
    85b4:	20c5883a 	add	r2,r4,r3
    85b8:	28cb883a 	add	r5,r5,r3
    85bc:	00000106 	br	85c4 <__mcmp+0x30>
    85c0:	20800a2e 	bgeu	r4,r2,85ec <__mcmp+0x58>
    85c4:	10bfff04 	addi	r2,r2,-4
    85c8:	297fff04 	addi	r5,r5,-4
    85cc:	11800017 	ldw	r6,0(r2)
    85d0:	28c00017 	ldw	r3,0(r5)
    85d4:	30fffa26 	beq	r6,r3,85c0 <__alt_data_end+0xff0085c0>
    85d8:	30c00236 	bltu	r6,r3,85e4 <__mcmp+0x50>
    85dc:	00800044 	movi	r2,1
    85e0:	f800283a 	ret
    85e4:	00bfffc4 	movi	r2,-1
    85e8:	f800283a 	ret
    85ec:	0005883a 	mov	r2,zero
    85f0:	f800283a 	ret

000085f4 <__mdiff>:
    85f4:	28c00417 	ldw	r3,16(r5)
    85f8:	30800417 	ldw	r2,16(r6)
    85fc:	defffa04 	addi	sp,sp,-24
    8600:	dcc00315 	stw	r19,12(sp)
    8604:	dc800215 	stw	r18,8(sp)
    8608:	dfc00515 	stw	ra,20(sp)
    860c:	dd000415 	stw	r20,16(sp)
    8610:	dc400115 	stw	r17,4(sp)
    8614:	dc000015 	stw	r16,0(sp)
    8618:	1887c83a 	sub	r3,r3,r2
    861c:	2825883a 	mov	r18,r5
    8620:	3027883a 	mov	r19,r6
    8624:	1800141e 	bne	r3,zero,8678 <__mdiff+0x84>
    8628:	1085883a 	add	r2,r2,r2
    862c:	1085883a 	add	r2,r2,r2
    8630:	2a000504 	addi	r8,r5,20
    8634:	34000504 	addi	r16,r6,20
    8638:	4087883a 	add	r3,r8,r2
    863c:	8085883a 	add	r2,r16,r2
    8640:	00000106 	br	8648 <__mdiff+0x54>
    8644:	40c0592e 	bgeu	r8,r3,87ac <__mdiff+0x1b8>
    8648:	18ffff04 	addi	r3,r3,-4
    864c:	10bfff04 	addi	r2,r2,-4
    8650:	19c00017 	ldw	r7,0(r3)
    8654:	11400017 	ldw	r5,0(r2)
    8658:	397ffa26 	beq	r7,r5,8644 <__alt_data_end+0xff008644>
    865c:	3940592e 	bgeu	r7,r5,87c4 <__mdiff+0x1d0>
    8660:	9005883a 	mov	r2,r18
    8664:	4023883a 	mov	r17,r8
    8668:	9825883a 	mov	r18,r19
    866c:	05000044 	movi	r20,1
    8670:	1027883a 	mov	r19,r2
    8674:	00000406 	br	8688 <__mdiff+0x94>
    8678:	18005616 	blt	r3,zero,87d4 <__mdiff+0x1e0>
    867c:	34400504 	addi	r17,r6,20
    8680:	2c000504 	addi	r16,r5,20
    8684:	0029883a 	mov	r20,zero
    8688:	91400117 	ldw	r5,4(r18)
    868c:	0007ccc0 	call	7ccc <_Balloc>
    8690:	92400417 	ldw	r9,16(r18)
    8694:	9b000417 	ldw	r12,16(r19)
    8698:	12c00504 	addi	r11,r2,20
    869c:	4a51883a 	add	r8,r9,r9
    86a0:	6319883a 	add	r12,r12,r12
    86a4:	4211883a 	add	r8,r8,r8
    86a8:	6319883a 	add	r12,r12,r12
    86ac:	15000315 	stw	r20,12(r2)
    86b0:	8211883a 	add	r8,r16,r8
    86b4:	8b19883a 	add	r12,r17,r12
    86b8:	0007883a 	mov	r3,zero
    86bc:	81400017 	ldw	r5,0(r16)
    86c0:	89c00017 	ldw	r7,0(r17)
    86c4:	59800104 	addi	r6,r11,4
    86c8:	293fffcc 	andi	r4,r5,65535
    86cc:	20c7883a 	add	r3,r4,r3
    86d0:	393fffcc 	andi	r4,r7,65535
    86d4:	1909c83a 	sub	r4,r3,r4
    86d8:	280ad43a 	srli	r5,r5,16
    86dc:	380ed43a 	srli	r7,r7,16
    86e0:	2007d43a 	srai	r3,r4,16
    86e4:	213fffcc 	andi	r4,r4,65535
    86e8:	29cbc83a 	sub	r5,r5,r7
    86ec:	28c7883a 	add	r3,r5,r3
    86f0:	180a943a 	slli	r5,r3,16
    86f4:	8c400104 	addi	r17,r17,4
    86f8:	84000104 	addi	r16,r16,4
    86fc:	2908b03a 	or	r4,r5,r4
    8700:	59000015 	stw	r4,0(r11)
    8704:	1807d43a 	srai	r3,r3,16
    8708:	3015883a 	mov	r10,r6
    870c:	3017883a 	mov	r11,r6
    8710:	8b3fea36 	bltu	r17,r12,86bc <__alt_data_end+0xff0086bc>
    8714:	8200162e 	bgeu	r16,r8,8770 <__mdiff+0x17c>
    8718:	8017883a 	mov	r11,r16
    871c:	59400017 	ldw	r5,0(r11)
    8720:	31800104 	addi	r6,r6,4
    8724:	5ac00104 	addi	r11,r11,4
    8728:	293fffcc 	andi	r4,r5,65535
    872c:	20c7883a 	add	r3,r4,r3
    8730:	280ed43a 	srli	r7,r5,16
    8734:	180bd43a 	srai	r5,r3,16
    8738:	193fffcc 	andi	r4,r3,65535
    873c:	3947883a 	add	r3,r7,r5
    8740:	180a943a 	slli	r5,r3,16
    8744:	1807d43a 	srai	r3,r3,16
    8748:	2908b03a 	or	r4,r5,r4
    874c:	313fff15 	stw	r4,-4(r6)
    8750:	5a3ff236 	bltu	r11,r8,871c <__alt_data_end+0xff00871c>
    8754:	0406303a 	nor	r3,zero,r16
    8758:	1a07883a 	add	r3,r3,r8
    875c:	1806d0ba 	srli	r3,r3,2
    8760:	18c00044 	addi	r3,r3,1
    8764:	18c7883a 	add	r3,r3,r3
    8768:	18c7883a 	add	r3,r3,r3
    876c:	50d5883a 	add	r10,r10,r3
    8770:	50ffff04 	addi	r3,r10,-4
    8774:	2000041e 	bne	r4,zero,8788 <__mdiff+0x194>
    8778:	18ffff04 	addi	r3,r3,-4
    877c:	19000017 	ldw	r4,0(r3)
    8780:	4a7fffc4 	addi	r9,r9,-1
    8784:	203ffc26 	beq	r4,zero,8778 <__alt_data_end+0xff008778>
    8788:	12400415 	stw	r9,16(r2)
    878c:	dfc00517 	ldw	ra,20(sp)
    8790:	dd000417 	ldw	r20,16(sp)
    8794:	dcc00317 	ldw	r19,12(sp)
    8798:	dc800217 	ldw	r18,8(sp)
    879c:	dc400117 	ldw	r17,4(sp)
    87a0:	dc000017 	ldw	r16,0(sp)
    87a4:	dec00604 	addi	sp,sp,24
    87a8:	f800283a 	ret
    87ac:	000b883a 	mov	r5,zero
    87b0:	0007ccc0 	call	7ccc <_Balloc>
    87b4:	00c00044 	movi	r3,1
    87b8:	10c00415 	stw	r3,16(r2)
    87bc:	10000515 	stw	zero,20(r2)
    87c0:	003ff206 	br	878c <__alt_data_end+0xff00878c>
    87c4:	8023883a 	mov	r17,r16
    87c8:	0029883a 	mov	r20,zero
    87cc:	4021883a 	mov	r16,r8
    87d0:	003fad06 	br	8688 <__alt_data_end+0xff008688>
    87d4:	9005883a 	mov	r2,r18
    87d8:	94400504 	addi	r17,r18,20
    87dc:	9c000504 	addi	r16,r19,20
    87e0:	9825883a 	mov	r18,r19
    87e4:	05000044 	movi	r20,1
    87e8:	1027883a 	mov	r19,r2
    87ec:	003fa606 	br	8688 <__alt_data_end+0xff008688>

000087f0 <__ulp>:
    87f0:	295ffc2c 	andhi	r5,r5,32752
    87f4:	00bf3034 	movhi	r2,64704
    87f8:	2887883a 	add	r3,r5,r2
    87fc:	00c0020e 	bge	zero,r3,8808 <__ulp+0x18>
    8800:	0005883a 	mov	r2,zero
    8804:	f800283a 	ret
    8808:	00c7c83a 	sub	r3,zero,r3
    880c:	1807d53a 	srai	r3,r3,20
    8810:	008004c4 	movi	r2,19
    8814:	10c00b0e 	bge	r2,r3,8844 <__ulp+0x54>
    8818:	18bffb04 	addi	r2,r3,-20
    881c:	01000784 	movi	r4,30
    8820:	0007883a 	mov	r3,zero
    8824:	20800516 	blt	r4,r2,883c <__ulp+0x4c>
    8828:	010007c4 	movi	r4,31
    882c:	2089c83a 	sub	r4,r4,r2
    8830:	00800044 	movi	r2,1
    8834:	1104983a 	sll	r2,r2,r4
    8838:	f800283a 	ret
    883c:	00800044 	movi	r2,1
    8840:	f800283a 	ret
    8844:	01400234 	movhi	r5,8
    8848:	28c7d83a 	sra	r3,r5,r3
    884c:	0005883a 	mov	r2,zero
    8850:	f800283a 	ret

00008854 <__b2d>:
    8854:	defffa04 	addi	sp,sp,-24
    8858:	dc000015 	stw	r16,0(sp)
    885c:	24000417 	ldw	r16,16(r4)
    8860:	dc400115 	stw	r17,4(sp)
    8864:	24400504 	addi	r17,r4,20
    8868:	8421883a 	add	r16,r16,r16
    886c:	8421883a 	add	r16,r16,r16
    8870:	8c21883a 	add	r16,r17,r16
    8874:	dc800215 	stw	r18,8(sp)
    8878:	84bfff17 	ldw	r18,-4(r16)
    887c:	dd000415 	stw	r20,16(sp)
    8880:	dcc00315 	stw	r19,12(sp)
    8884:	9009883a 	mov	r4,r18
    8888:	2829883a 	mov	r20,r5
    888c:	dfc00515 	stw	ra,20(sp)
    8890:	0007fc00 	call	7fc0 <__hi0bits>
    8894:	00c00804 	movi	r3,32
    8898:	1889c83a 	sub	r4,r3,r2
    889c:	a1000015 	stw	r4,0(r20)
    88a0:	01000284 	movi	r4,10
    88a4:	84ffff04 	addi	r19,r16,-4
    88a8:	20801216 	blt	r4,r2,88f4 <__b2d+0xa0>
    88ac:	018002c4 	movi	r6,11
    88b0:	308dc83a 	sub	r6,r6,r2
    88b4:	9186d83a 	srl	r3,r18,r6
    88b8:	18cffc34 	orhi	r3,r3,16368
    88bc:	8cc0212e 	bgeu	r17,r19,8944 <__b2d+0xf0>
    88c0:	813ffe17 	ldw	r4,-8(r16)
    88c4:	218cd83a 	srl	r6,r4,r6
    88c8:	10800544 	addi	r2,r2,21
    88cc:	9084983a 	sll	r2,r18,r2
    88d0:	1184b03a 	or	r2,r2,r6
    88d4:	dfc00517 	ldw	ra,20(sp)
    88d8:	dd000417 	ldw	r20,16(sp)
    88dc:	dcc00317 	ldw	r19,12(sp)
    88e0:	dc800217 	ldw	r18,8(sp)
    88e4:	dc400117 	ldw	r17,4(sp)
    88e8:	dc000017 	ldw	r16,0(sp)
    88ec:	dec00604 	addi	sp,sp,24
    88f0:	f800283a 	ret
    88f4:	8cc00f2e 	bgeu	r17,r19,8934 <__b2d+0xe0>
    88f8:	117ffd44 	addi	r5,r2,-11
    88fc:	80bffe17 	ldw	r2,-8(r16)
    8900:	28000e26 	beq	r5,zero,893c <__b2d+0xe8>
    8904:	1949c83a 	sub	r4,r3,r5
    8908:	9164983a 	sll	r18,r18,r5
    890c:	1106d83a 	srl	r3,r2,r4
    8910:	81bffe04 	addi	r6,r16,-8
    8914:	948ffc34 	orhi	r18,r18,16368
    8918:	90c6b03a 	or	r3,r18,r3
    891c:	89800e2e 	bgeu	r17,r6,8958 <__b2d+0x104>
    8920:	81bffd17 	ldw	r6,-12(r16)
    8924:	1144983a 	sll	r2,r2,r5
    8928:	310ad83a 	srl	r5,r6,r4
    892c:	2884b03a 	or	r2,r5,r2
    8930:	003fe806 	br	88d4 <__alt_data_end+0xff0088d4>
    8934:	10bffd44 	addi	r2,r2,-11
    8938:	1000041e 	bne	r2,zero,894c <__b2d+0xf8>
    893c:	90cffc34 	orhi	r3,r18,16368
    8940:	003fe406 	br	88d4 <__alt_data_end+0xff0088d4>
    8944:	000d883a 	mov	r6,zero
    8948:	003fdf06 	br	88c8 <__alt_data_end+0xff0088c8>
    894c:	90a4983a 	sll	r18,r18,r2
    8950:	0005883a 	mov	r2,zero
    8954:	003ff906 	br	893c <__alt_data_end+0xff00893c>
    8958:	1144983a 	sll	r2,r2,r5
    895c:	003fdd06 	br	88d4 <__alt_data_end+0xff0088d4>

00008960 <__d2b>:
    8960:	defff804 	addi	sp,sp,-32
    8964:	dc000215 	stw	r16,8(sp)
    8968:	3021883a 	mov	r16,r6
    896c:	dc400315 	stw	r17,12(sp)
    8970:	8022907a 	slli	r17,r16,1
    8974:	dd000615 	stw	r20,24(sp)
    8978:	2829883a 	mov	r20,r5
    897c:	01400044 	movi	r5,1
    8980:	dcc00515 	stw	r19,20(sp)
    8984:	dc800415 	stw	r18,16(sp)
    8988:	dfc00715 	stw	ra,28(sp)
    898c:	3825883a 	mov	r18,r7
    8990:	8822d57a 	srli	r17,r17,21
    8994:	0007ccc0 	call	7ccc <_Balloc>
    8998:	1027883a 	mov	r19,r2
    899c:	00800434 	movhi	r2,16
    89a0:	10bfffc4 	addi	r2,r2,-1
    89a4:	808c703a 	and	r6,r16,r2
    89a8:	88000126 	beq	r17,zero,89b0 <__d2b+0x50>
    89ac:	31800434 	orhi	r6,r6,16
    89b0:	d9800015 	stw	r6,0(sp)
    89b4:	a0002426 	beq	r20,zero,8a48 <__d2b+0xe8>
    89b8:	d9000104 	addi	r4,sp,4
    89bc:	dd000115 	stw	r20,4(sp)
    89c0:	00080280 	call	8028 <__lo0bits>
    89c4:	d8c00017 	ldw	r3,0(sp)
    89c8:	10002f1e 	bne	r2,zero,8a88 <__d2b+0x128>
    89cc:	d9000117 	ldw	r4,4(sp)
    89d0:	99000515 	stw	r4,20(r19)
    89d4:	1821003a 	cmpeq	r16,r3,zero
    89d8:	01000084 	movi	r4,2
    89dc:	2421c83a 	sub	r16,r4,r16
    89e0:	98c00615 	stw	r3,24(r19)
    89e4:	9c000415 	stw	r16,16(r19)
    89e8:	88001f1e 	bne	r17,zero,8a68 <__d2b+0x108>
    89ec:	10bef384 	addi	r2,r2,-1074
    89f0:	90800015 	stw	r2,0(r18)
    89f4:	00900034 	movhi	r2,16384
    89f8:	10bfffc4 	addi	r2,r2,-1
    89fc:	8085883a 	add	r2,r16,r2
    8a00:	1085883a 	add	r2,r2,r2
    8a04:	1085883a 	add	r2,r2,r2
    8a08:	9885883a 	add	r2,r19,r2
    8a0c:	11000517 	ldw	r4,20(r2)
    8a10:	8020917a 	slli	r16,r16,5
    8a14:	0007fc00 	call	7fc0 <__hi0bits>
    8a18:	d8c00817 	ldw	r3,32(sp)
    8a1c:	8085c83a 	sub	r2,r16,r2
    8a20:	18800015 	stw	r2,0(r3)
    8a24:	9805883a 	mov	r2,r19
    8a28:	dfc00717 	ldw	ra,28(sp)
    8a2c:	dd000617 	ldw	r20,24(sp)
    8a30:	dcc00517 	ldw	r19,20(sp)
    8a34:	dc800417 	ldw	r18,16(sp)
    8a38:	dc400317 	ldw	r17,12(sp)
    8a3c:	dc000217 	ldw	r16,8(sp)
    8a40:	dec00804 	addi	sp,sp,32
    8a44:	f800283a 	ret
    8a48:	d809883a 	mov	r4,sp
    8a4c:	00080280 	call	8028 <__lo0bits>
    8a50:	d8c00017 	ldw	r3,0(sp)
    8a54:	04000044 	movi	r16,1
    8a58:	9c000415 	stw	r16,16(r19)
    8a5c:	98c00515 	stw	r3,20(r19)
    8a60:	10800804 	addi	r2,r2,32
    8a64:	883fe126 	beq	r17,zero,89ec <__alt_data_end+0xff0089ec>
    8a68:	00c00d44 	movi	r3,53
    8a6c:	8c7ef344 	addi	r17,r17,-1075
    8a70:	88a3883a 	add	r17,r17,r2
    8a74:	1885c83a 	sub	r2,r3,r2
    8a78:	d8c00817 	ldw	r3,32(sp)
    8a7c:	94400015 	stw	r17,0(r18)
    8a80:	18800015 	stw	r2,0(r3)
    8a84:	003fe706 	br	8a24 <__alt_data_end+0xff008a24>
    8a88:	01000804 	movi	r4,32
    8a8c:	2089c83a 	sub	r4,r4,r2
    8a90:	1908983a 	sll	r4,r3,r4
    8a94:	d9400117 	ldw	r5,4(sp)
    8a98:	1886d83a 	srl	r3,r3,r2
    8a9c:	2148b03a 	or	r4,r4,r5
    8aa0:	99000515 	stw	r4,20(r19)
    8aa4:	d8c00015 	stw	r3,0(sp)
    8aa8:	003fca06 	br	89d4 <__alt_data_end+0xff0089d4>

00008aac <__ratio>:
    8aac:	defff904 	addi	sp,sp,-28
    8ab0:	dc400315 	stw	r17,12(sp)
    8ab4:	2823883a 	mov	r17,r5
    8ab8:	d9400104 	addi	r5,sp,4
    8abc:	dfc00615 	stw	ra,24(sp)
    8ac0:	dcc00515 	stw	r19,20(sp)
    8ac4:	dc800415 	stw	r18,16(sp)
    8ac8:	2027883a 	mov	r19,r4
    8acc:	dc000215 	stw	r16,8(sp)
    8ad0:	00088540 	call	8854 <__b2d>
    8ad4:	d80b883a 	mov	r5,sp
    8ad8:	8809883a 	mov	r4,r17
    8adc:	1025883a 	mov	r18,r2
    8ae0:	1821883a 	mov	r16,r3
    8ae4:	00088540 	call	8854 <__b2d>
    8ae8:	8a000417 	ldw	r8,16(r17)
    8aec:	99000417 	ldw	r4,16(r19)
    8af0:	d9400117 	ldw	r5,4(sp)
    8af4:	2209c83a 	sub	r4,r4,r8
    8af8:	2010917a 	slli	r8,r4,5
    8afc:	d9000017 	ldw	r4,0(sp)
    8b00:	2909c83a 	sub	r4,r5,r4
    8b04:	4109883a 	add	r4,r8,r4
    8b08:	01000e0e 	bge	zero,r4,8b44 <__ratio+0x98>
    8b0c:	2008953a 	slli	r4,r4,20
    8b10:	2421883a 	add	r16,r4,r16
    8b14:	100d883a 	mov	r6,r2
    8b18:	180f883a 	mov	r7,r3
    8b1c:	9009883a 	mov	r4,r18
    8b20:	800b883a 	mov	r5,r16
    8b24:	000c9440 	call	c944 <__divdf3>
    8b28:	dfc00617 	ldw	ra,24(sp)
    8b2c:	dcc00517 	ldw	r19,20(sp)
    8b30:	dc800417 	ldw	r18,16(sp)
    8b34:	dc400317 	ldw	r17,12(sp)
    8b38:	dc000217 	ldw	r16,8(sp)
    8b3c:	dec00704 	addi	sp,sp,28
    8b40:	f800283a 	ret
    8b44:	2008953a 	slli	r4,r4,20
    8b48:	1907c83a 	sub	r3,r3,r4
    8b4c:	003ff106 	br	8b14 <__alt_data_end+0xff008b14>

00008b50 <_mprec_log10>:
    8b50:	defffe04 	addi	sp,sp,-8
    8b54:	dc000015 	stw	r16,0(sp)
    8b58:	dfc00115 	stw	ra,4(sp)
    8b5c:	008005c4 	movi	r2,23
    8b60:	2021883a 	mov	r16,r4
    8b64:	11000d0e 	bge	r2,r4,8b9c <_mprec_log10+0x4c>
    8b68:	0005883a 	mov	r2,zero
    8b6c:	00cffc34 	movhi	r3,16368
    8b70:	843fffc4 	addi	r16,r16,-1
    8b74:	000d883a 	mov	r6,zero
    8b78:	01d00934 	movhi	r7,16420
    8b7c:	1009883a 	mov	r4,r2
    8b80:	180b883a 	mov	r5,r3
    8b84:	000d4840 	call	d484 <__muldf3>
    8b88:	803ff91e 	bne	r16,zero,8b70 <__alt_data_end+0xff008b70>
    8b8c:	dfc00117 	ldw	ra,4(sp)
    8b90:	dc000017 	ldw	r16,0(sp)
    8b94:	dec00204 	addi	sp,sp,8
    8b98:	f800283a 	ret
    8b9c:	202090fa 	slli	r16,r4,3
    8ba0:	00800074 	movhi	r2,1
    8ba4:	10863604 	addi	r2,r2,6360
    8ba8:	1421883a 	add	r16,r2,r16
    8bac:	80800017 	ldw	r2,0(r16)
    8bb0:	80c00117 	ldw	r3,4(r16)
    8bb4:	dfc00117 	ldw	ra,4(sp)
    8bb8:	dc000017 	ldw	r16,0(sp)
    8bbc:	dec00204 	addi	sp,sp,8
    8bc0:	f800283a 	ret

00008bc4 <__copybits>:
    8bc4:	297fffc4 	addi	r5,r5,-1
    8bc8:	280fd17a 	srai	r7,r5,5
    8bcc:	30c00417 	ldw	r3,16(r6)
    8bd0:	30800504 	addi	r2,r6,20
    8bd4:	39c00044 	addi	r7,r7,1
    8bd8:	18c7883a 	add	r3,r3,r3
    8bdc:	39cf883a 	add	r7,r7,r7
    8be0:	18c7883a 	add	r3,r3,r3
    8be4:	39cf883a 	add	r7,r7,r7
    8be8:	10c7883a 	add	r3,r2,r3
    8bec:	21cf883a 	add	r7,r4,r7
    8bf0:	10c00d2e 	bgeu	r2,r3,8c28 <__copybits+0x64>
    8bf4:	200b883a 	mov	r5,r4
    8bf8:	12000017 	ldw	r8,0(r2)
    8bfc:	29400104 	addi	r5,r5,4
    8c00:	10800104 	addi	r2,r2,4
    8c04:	2a3fff15 	stw	r8,-4(r5)
    8c08:	10fffb36 	bltu	r2,r3,8bf8 <__alt_data_end+0xff008bf8>
    8c0c:	1985c83a 	sub	r2,r3,r6
    8c10:	10bffac4 	addi	r2,r2,-21
    8c14:	1004d0ba 	srli	r2,r2,2
    8c18:	10800044 	addi	r2,r2,1
    8c1c:	1085883a 	add	r2,r2,r2
    8c20:	1085883a 	add	r2,r2,r2
    8c24:	2089883a 	add	r4,r4,r2
    8c28:	21c0032e 	bgeu	r4,r7,8c38 <__copybits+0x74>
    8c2c:	20000015 	stw	zero,0(r4)
    8c30:	21000104 	addi	r4,r4,4
    8c34:	21fffd36 	bltu	r4,r7,8c2c <__alt_data_end+0xff008c2c>
    8c38:	f800283a 	ret

00008c3c <__any_on>:
    8c3c:	20c00417 	ldw	r3,16(r4)
    8c40:	2805d17a 	srai	r2,r5,5
    8c44:	21000504 	addi	r4,r4,20
    8c48:	18800d0e 	bge	r3,r2,8c80 <__any_on+0x44>
    8c4c:	18c7883a 	add	r3,r3,r3
    8c50:	18c7883a 	add	r3,r3,r3
    8c54:	20c7883a 	add	r3,r4,r3
    8c58:	20c0192e 	bgeu	r4,r3,8cc0 <__any_on+0x84>
    8c5c:	18bfff17 	ldw	r2,-4(r3)
    8c60:	18ffff04 	addi	r3,r3,-4
    8c64:	1000041e 	bne	r2,zero,8c78 <__any_on+0x3c>
    8c68:	20c0142e 	bgeu	r4,r3,8cbc <__any_on+0x80>
    8c6c:	18ffff04 	addi	r3,r3,-4
    8c70:	19400017 	ldw	r5,0(r3)
    8c74:	283ffc26 	beq	r5,zero,8c68 <__alt_data_end+0xff008c68>
    8c78:	00800044 	movi	r2,1
    8c7c:	f800283a 	ret
    8c80:	10c00a0e 	bge	r2,r3,8cac <__any_on+0x70>
    8c84:	1085883a 	add	r2,r2,r2
    8c88:	1085883a 	add	r2,r2,r2
    8c8c:	294007cc 	andi	r5,r5,31
    8c90:	2087883a 	add	r3,r4,r2
    8c94:	283ff026 	beq	r5,zero,8c58 <__alt_data_end+0xff008c58>
    8c98:	19800017 	ldw	r6,0(r3)
    8c9c:	3144d83a 	srl	r2,r6,r5
    8ca0:	114a983a 	sll	r5,r2,r5
    8ca4:	317ff41e 	bne	r6,r5,8c78 <__alt_data_end+0xff008c78>
    8ca8:	003feb06 	br	8c58 <__alt_data_end+0xff008c58>
    8cac:	1085883a 	add	r2,r2,r2
    8cb0:	1085883a 	add	r2,r2,r2
    8cb4:	2087883a 	add	r3,r4,r2
    8cb8:	003fe706 	br	8c58 <__alt_data_end+0xff008c58>
    8cbc:	f800283a 	ret
    8cc0:	0005883a 	mov	r2,zero
    8cc4:	f800283a 	ret

00008cc8 <_realloc_r>:
    8cc8:	defff604 	addi	sp,sp,-40
    8ccc:	dc800215 	stw	r18,8(sp)
    8cd0:	dfc00915 	stw	ra,36(sp)
    8cd4:	df000815 	stw	fp,32(sp)
    8cd8:	ddc00715 	stw	r23,28(sp)
    8cdc:	dd800615 	stw	r22,24(sp)
    8ce0:	dd400515 	stw	r21,20(sp)
    8ce4:	dd000415 	stw	r20,16(sp)
    8ce8:	dcc00315 	stw	r19,12(sp)
    8cec:	dc400115 	stw	r17,4(sp)
    8cf0:	dc000015 	stw	r16,0(sp)
    8cf4:	3025883a 	mov	r18,r6
    8cf8:	2800b726 	beq	r5,zero,8fd8 <_realloc_r+0x310>
    8cfc:	282b883a 	mov	r21,r5
    8d00:	2029883a 	mov	r20,r4
    8d04:	000ec5c0 	call	ec5c <__malloc_lock>
    8d08:	a8bfff17 	ldw	r2,-4(r21)
    8d0c:	043fff04 	movi	r16,-4
    8d10:	90c002c4 	addi	r3,r18,11
    8d14:	01000584 	movi	r4,22
    8d18:	acfffe04 	addi	r19,r21,-8
    8d1c:	1420703a 	and	r16,r2,r16
    8d20:	20c0332e 	bgeu	r4,r3,8df0 <_realloc_r+0x128>
    8d24:	047ffe04 	movi	r17,-8
    8d28:	1c62703a 	and	r17,r3,r17
    8d2c:	8807883a 	mov	r3,r17
    8d30:	88005816 	blt	r17,zero,8e94 <_realloc_r+0x1cc>
    8d34:	8c805736 	bltu	r17,r18,8e94 <_realloc_r+0x1cc>
    8d38:	80c0300e 	bge	r16,r3,8dfc <_realloc_r+0x134>
    8d3c:	07000074 	movhi	fp,1
    8d40:	e706bb04 	addi	fp,fp,6892
    8d44:	e1c00217 	ldw	r7,8(fp)
    8d48:	9c09883a 	add	r4,r19,r16
    8d4c:	22000117 	ldw	r8,4(r4)
    8d50:	21c06326 	beq	r4,r7,8ee0 <_realloc_r+0x218>
    8d54:	017fff84 	movi	r5,-2
    8d58:	414a703a 	and	r5,r8,r5
    8d5c:	214b883a 	add	r5,r4,r5
    8d60:	29800117 	ldw	r6,4(r5)
    8d64:	3180004c 	andi	r6,r6,1
    8d68:	30003f26 	beq	r6,zero,8e68 <_realloc_r+0x1a0>
    8d6c:	1080004c 	andi	r2,r2,1
    8d70:	10008326 	beq	r2,zero,8f80 <_realloc_r+0x2b8>
    8d74:	900b883a 	mov	r5,r18
    8d78:	a009883a 	mov	r4,r20
    8d7c:	0001de00 	call	1de0 <_malloc_r>
    8d80:	1025883a 	mov	r18,r2
    8d84:	10011e26 	beq	r2,zero,9200 <_realloc_r+0x538>
    8d88:	a93fff17 	ldw	r4,-4(r21)
    8d8c:	10fffe04 	addi	r3,r2,-8
    8d90:	00bfff84 	movi	r2,-2
    8d94:	2084703a 	and	r2,r4,r2
    8d98:	9885883a 	add	r2,r19,r2
    8d9c:	1880ee26 	beq	r3,r2,9158 <_realloc_r+0x490>
    8da0:	81bfff04 	addi	r6,r16,-4
    8da4:	00800904 	movi	r2,36
    8da8:	1180b836 	bltu	r2,r6,908c <_realloc_r+0x3c4>
    8dac:	00c004c4 	movi	r3,19
    8db0:	19809636 	bltu	r3,r6,900c <_realloc_r+0x344>
    8db4:	9005883a 	mov	r2,r18
    8db8:	a807883a 	mov	r3,r21
    8dbc:	19000017 	ldw	r4,0(r3)
    8dc0:	11000015 	stw	r4,0(r2)
    8dc4:	19000117 	ldw	r4,4(r3)
    8dc8:	11000115 	stw	r4,4(r2)
    8dcc:	18c00217 	ldw	r3,8(r3)
    8dd0:	10c00215 	stw	r3,8(r2)
    8dd4:	a80b883a 	mov	r5,r21
    8dd8:	a009883a 	mov	r4,r20
    8ddc:	0006c300 	call	6c30 <_free_r>
    8de0:	a009883a 	mov	r4,r20
    8de4:	000ec600 	call	ec60 <__malloc_unlock>
    8de8:	9005883a 	mov	r2,r18
    8dec:	00001206 	br	8e38 <_realloc_r+0x170>
    8df0:	00c00404 	movi	r3,16
    8df4:	1823883a 	mov	r17,r3
    8df8:	003fce06 	br	8d34 <__alt_data_end+0xff008d34>
    8dfc:	a825883a 	mov	r18,r21
    8e00:	8445c83a 	sub	r2,r16,r17
    8e04:	00c003c4 	movi	r3,15
    8e08:	18802636 	bltu	r3,r2,8ea4 <_realloc_r+0x1dc>
    8e0c:	99800117 	ldw	r6,4(r19)
    8e10:	9c07883a 	add	r3,r19,r16
    8e14:	3180004c 	andi	r6,r6,1
    8e18:	3420b03a 	or	r16,r6,r16
    8e1c:	9c000115 	stw	r16,4(r19)
    8e20:	18800117 	ldw	r2,4(r3)
    8e24:	10800054 	ori	r2,r2,1
    8e28:	18800115 	stw	r2,4(r3)
    8e2c:	a009883a 	mov	r4,r20
    8e30:	000ec600 	call	ec60 <__malloc_unlock>
    8e34:	9005883a 	mov	r2,r18
    8e38:	dfc00917 	ldw	ra,36(sp)
    8e3c:	df000817 	ldw	fp,32(sp)
    8e40:	ddc00717 	ldw	r23,28(sp)
    8e44:	dd800617 	ldw	r22,24(sp)
    8e48:	dd400517 	ldw	r21,20(sp)
    8e4c:	dd000417 	ldw	r20,16(sp)
    8e50:	dcc00317 	ldw	r19,12(sp)
    8e54:	dc800217 	ldw	r18,8(sp)
    8e58:	dc400117 	ldw	r17,4(sp)
    8e5c:	dc000017 	ldw	r16,0(sp)
    8e60:	dec00a04 	addi	sp,sp,40
    8e64:	f800283a 	ret
    8e68:	017fff04 	movi	r5,-4
    8e6c:	414a703a 	and	r5,r8,r5
    8e70:	814d883a 	add	r6,r16,r5
    8e74:	30c01f16 	blt	r6,r3,8ef4 <_realloc_r+0x22c>
    8e78:	20800317 	ldw	r2,12(r4)
    8e7c:	20c00217 	ldw	r3,8(r4)
    8e80:	a825883a 	mov	r18,r21
    8e84:	3021883a 	mov	r16,r6
    8e88:	18800315 	stw	r2,12(r3)
    8e8c:	10c00215 	stw	r3,8(r2)
    8e90:	003fdb06 	br	8e00 <__alt_data_end+0xff008e00>
    8e94:	00800304 	movi	r2,12
    8e98:	a0800015 	stw	r2,0(r20)
    8e9c:	0005883a 	mov	r2,zero
    8ea0:	003fe506 	br	8e38 <__alt_data_end+0xff008e38>
    8ea4:	98c00117 	ldw	r3,4(r19)
    8ea8:	9c4b883a 	add	r5,r19,r17
    8eac:	11000054 	ori	r4,r2,1
    8eb0:	18c0004c 	andi	r3,r3,1
    8eb4:	1c62b03a 	or	r17,r3,r17
    8eb8:	9c400115 	stw	r17,4(r19)
    8ebc:	29000115 	stw	r4,4(r5)
    8ec0:	2885883a 	add	r2,r5,r2
    8ec4:	10c00117 	ldw	r3,4(r2)
    8ec8:	29400204 	addi	r5,r5,8
    8ecc:	a009883a 	mov	r4,r20
    8ed0:	18c00054 	ori	r3,r3,1
    8ed4:	10c00115 	stw	r3,4(r2)
    8ed8:	0006c300 	call	6c30 <_free_r>
    8edc:	003fd306 	br	8e2c <__alt_data_end+0xff008e2c>
    8ee0:	017fff04 	movi	r5,-4
    8ee4:	414a703a 	and	r5,r8,r5
    8ee8:	89800404 	addi	r6,r17,16
    8eec:	8151883a 	add	r8,r16,r5
    8ef0:	4180590e 	bge	r8,r6,9058 <_realloc_r+0x390>
    8ef4:	1080004c 	andi	r2,r2,1
    8ef8:	103f9e1e 	bne	r2,zero,8d74 <__alt_data_end+0xff008d74>
    8efc:	adbffe17 	ldw	r22,-8(r21)
    8f00:	00bfff04 	movi	r2,-4
    8f04:	9dadc83a 	sub	r22,r19,r22
    8f08:	b1800117 	ldw	r6,4(r22)
    8f0c:	3084703a 	and	r2,r6,r2
    8f10:	20002026 	beq	r4,zero,8f94 <_realloc_r+0x2cc>
    8f14:	80af883a 	add	r23,r16,r2
    8f18:	b96f883a 	add	r23,r23,r5
    8f1c:	21c05f26 	beq	r4,r7,909c <_realloc_r+0x3d4>
    8f20:	b8c01c16 	blt	r23,r3,8f94 <_realloc_r+0x2cc>
    8f24:	20800317 	ldw	r2,12(r4)
    8f28:	20c00217 	ldw	r3,8(r4)
    8f2c:	81bfff04 	addi	r6,r16,-4
    8f30:	01000904 	movi	r4,36
    8f34:	18800315 	stw	r2,12(r3)
    8f38:	10c00215 	stw	r3,8(r2)
    8f3c:	b0c00217 	ldw	r3,8(r22)
    8f40:	b0800317 	ldw	r2,12(r22)
    8f44:	b4800204 	addi	r18,r22,8
    8f48:	18800315 	stw	r2,12(r3)
    8f4c:	10c00215 	stw	r3,8(r2)
    8f50:	21801b36 	bltu	r4,r6,8fc0 <_realloc_r+0x2f8>
    8f54:	008004c4 	movi	r2,19
    8f58:	1180352e 	bgeu	r2,r6,9030 <_realloc_r+0x368>
    8f5c:	a8800017 	ldw	r2,0(r21)
    8f60:	b0800215 	stw	r2,8(r22)
    8f64:	a8800117 	ldw	r2,4(r21)
    8f68:	b0800315 	stw	r2,12(r22)
    8f6c:	008006c4 	movi	r2,27
    8f70:	11807f36 	bltu	r2,r6,9170 <_realloc_r+0x4a8>
    8f74:	b0800404 	addi	r2,r22,16
    8f78:	ad400204 	addi	r21,r21,8
    8f7c:	00002d06 	br	9034 <_realloc_r+0x36c>
    8f80:	adbffe17 	ldw	r22,-8(r21)
    8f84:	00bfff04 	movi	r2,-4
    8f88:	9dadc83a 	sub	r22,r19,r22
    8f8c:	b1000117 	ldw	r4,4(r22)
    8f90:	2084703a 	and	r2,r4,r2
    8f94:	b03f7726 	beq	r22,zero,8d74 <__alt_data_end+0xff008d74>
    8f98:	80af883a 	add	r23,r16,r2
    8f9c:	b8ff7516 	blt	r23,r3,8d74 <__alt_data_end+0xff008d74>
    8fa0:	b0800317 	ldw	r2,12(r22)
    8fa4:	b0c00217 	ldw	r3,8(r22)
    8fa8:	81bfff04 	addi	r6,r16,-4
    8fac:	01000904 	movi	r4,36
    8fb0:	18800315 	stw	r2,12(r3)
    8fb4:	10c00215 	stw	r3,8(r2)
    8fb8:	b4800204 	addi	r18,r22,8
    8fbc:	21bfe52e 	bgeu	r4,r6,8f54 <__alt_data_end+0xff008f54>
    8fc0:	a80b883a 	mov	r5,r21
    8fc4:	9009883a 	mov	r4,r18
    8fc8:	0007a480 	call	7a48 <memmove>
    8fcc:	b821883a 	mov	r16,r23
    8fd0:	b027883a 	mov	r19,r22
    8fd4:	003f8a06 	br	8e00 <__alt_data_end+0xff008e00>
    8fd8:	300b883a 	mov	r5,r6
    8fdc:	dfc00917 	ldw	ra,36(sp)
    8fe0:	df000817 	ldw	fp,32(sp)
    8fe4:	ddc00717 	ldw	r23,28(sp)
    8fe8:	dd800617 	ldw	r22,24(sp)
    8fec:	dd400517 	ldw	r21,20(sp)
    8ff0:	dd000417 	ldw	r20,16(sp)
    8ff4:	dcc00317 	ldw	r19,12(sp)
    8ff8:	dc800217 	ldw	r18,8(sp)
    8ffc:	dc400117 	ldw	r17,4(sp)
    9000:	dc000017 	ldw	r16,0(sp)
    9004:	dec00a04 	addi	sp,sp,40
    9008:	0001de01 	jmpi	1de0 <_malloc_r>
    900c:	a8c00017 	ldw	r3,0(r21)
    9010:	90c00015 	stw	r3,0(r18)
    9014:	a8c00117 	ldw	r3,4(r21)
    9018:	90c00115 	stw	r3,4(r18)
    901c:	00c006c4 	movi	r3,27
    9020:	19804536 	bltu	r3,r6,9138 <_realloc_r+0x470>
    9024:	90800204 	addi	r2,r18,8
    9028:	a8c00204 	addi	r3,r21,8
    902c:	003f6306 	br	8dbc <__alt_data_end+0xff008dbc>
    9030:	9005883a 	mov	r2,r18
    9034:	a8c00017 	ldw	r3,0(r21)
    9038:	b821883a 	mov	r16,r23
    903c:	b027883a 	mov	r19,r22
    9040:	10c00015 	stw	r3,0(r2)
    9044:	a8c00117 	ldw	r3,4(r21)
    9048:	10c00115 	stw	r3,4(r2)
    904c:	a8c00217 	ldw	r3,8(r21)
    9050:	10c00215 	stw	r3,8(r2)
    9054:	003f6a06 	br	8e00 <__alt_data_end+0xff008e00>
    9058:	9c67883a 	add	r19,r19,r17
    905c:	4445c83a 	sub	r2,r8,r17
    9060:	e4c00215 	stw	r19,8(fp)
    9064:	10800054 	ori	r2,r2,1
    9068:	98800115 	stw	r2,4(r19)
    906c:	a8bfff17 	ldw	r2,-4(r21)
    9070:	a009883a 	mov	r4,r20
    9074:	1080004c 	andi	r2,r2,1
    9078:	1462b03a 	or	r17,r2,r17
    907c:	ac7fff15 	stw	r17,-4(r21)
    9080:	000ec600 	call	ec60 <__malloc_unlock>
    9084:	a805883a 	mov	r2,r21
    9088:	003f6b06 	br	8e38 <__alt_data_end+0xff008e38>
    908c:	a80b883a 	mov	r5,r21
    9090:	9009883a 	mov	r4,r18
    9094:	0007a480 	call	7a48 <memmove>
    9098:	003f4e06 	br	8dd4 <__alt_data_end+0xff008dd4>
    909c:	89000404 	addi	r4,r17,16
    90a0:	b93fbc16 	blt	r23,r4,8f94 <__alt_data_end+0xff008f94>
    90a4:	b0800317 	ldw	r2,12(r22)
    90a8:	b0c00217 	ldw	r3,8(r22)
    90ac:	81bfff04 	addi	r6,r16,-4
    90b0:	01000904 	movi	r4,36
    90b4:	18800315 	stw	r2,12(r3)
    90b8:	10c00215 	stw	r3,8(r2)
    90bc:	b4800204 	addi	r18,r22,8
    90c0:	21804336 	bltu	r4,r6,91d0 <_realloc_r+0x508>
    90c4:	008004c4 	movi	r2,19
    90c8:	11803f2e 	bgeu	r2,r6,91c8 <_realloc_r+0x500>
    90cc:	a8800017 	ldw	r2,0(r21)
    90d0:	b0800215 	stw	r2,8(r22)
    90d4:	a8800117 	ldw	r2,4(r21)
    90d8:	b0800315 	stw	r2,12(r22)
    90dc:	008006c4 	movi	r2,27
    90e0:	11803f36 	bltu	r2,r6,91e0 <_realloc_r+0x518>
    90e4:	b0800404 	addi	r2,r22,16
    90e8:	ad400204 	addi	r21,r21,8
    90ec:	a8c00017 	ldw	r3,0(r21)
    90f0:	10c00015 	stw	r3,0(r2)
    90f4:	a8c00117 	ldw	r3,4(r21)
    90f8:	10c00115 	stw	r3,4(r2)
    90fc:	a8c00217 	ldw	r3,8(r21)
    9100:	10c00215 	stw	r3,8(r2)
    9104:	b447883a 	add	r3,r22,r17
    9108:	bc45c83a 	sub	r2,r23,r17
    910c:	e0c00215 	stw	r3,8(fp)
    9110:	10800054 	ori	r2,r2,1
    9114:	18800115 	stw	r2,4(r3)
    9118:	b0800117 	ldw	r2,4(r22)
    911c:	a009883a 	mov	r4,r20
    9120:	1080004c 	andi	r2,r2,1
    9124:	1462b03a 	or	r17,r2,r17
    9128:	b4400115 	stw	r17,4(r22)
    912c:	000ec600 	call	ec60 <__malloc_unlock>
    9130:	9005883a 	mov	r2,r18
    9134:	003f4006 	br	8e38 <__alt_data_end+0xff008e38>
    9138:	a8c00217 	ldw	r3,8(r21)
    913c:	90c00215 	stw	r3,8(r18)
    9140:	a8c00317 	ldw	r3,12(r21)
    9144:	90c00315 	stw	r3,12(r18)
    9148:	30801126 	beq	r6,r2,9190 <_realloc_r+0x4c8>
    914c:	90800404 	addi	r2,r18,16
    9150:	a8c00404 	addi	r3,r21,16
    9154:	003f1906 	br	8dbc <__alt_data_end+0xff008dbc>
    9158:	90ffff17 	ldw	r3,-4(r18)
    915c:	00bfff04 	movi	r2,-4
    9160:	a825883a 	mov	r18,r21
    9164:	1884703a 	and	r2,r3,r2
    9168:	80a1883a 	add	r16,r16,r2
    916c:	003f2406 	br	8e00 <__alt_data_end+0xff008e00>
    9170:	a8800217 	ldw	r2,8(r21)
    9174:	b0800415 	stw	r2,16(r22)
    9178:	a8800317 	ldw	r2,12(r21)
    917c:	b0800515 	stw	r2,20(r22)
    9180:	31000a26 	beq	r6,r4,91ac <_realloc_r+0x4e4>
    9184:	b0800604 	addi	r2,r22,24
    9188:	ad400404 	addi	r21,r21,16
    918c:	003fa906 	br	9034 <__alt_data_end+0xff009034>
    9190:	a9000417 	ldw	r4,16(r21)
    9194:	90800604 	addi	r2,r18,24
    9198:	a8c00604 	addi	r3,r21,24
    919c:	91000415 	stw	r4,16(r18)
    91a0:	a9000517 	ldw	r4,20(r21)
    91a4:	91000515 	stw	r4,20(r18)
    91a8:	003f0406 	br	8dbc <__alt_data_end+0xff008dbc>
    91ac:	a8c00417 	ldw	r3,16(r21)
    91b0:	ad400604 	addi	r21,r21,24
    91b4:	b0800804 	addi	r2,r22,32
    91b8:	b0c00615 	stw	r3,24(r22)
    91bc:	a8ffff17 	ldw	r3,-4(r21)
    91c0:	b0c00715 	stw	r3,28(r22)
    91c4:	003f9b06 	br	9034 <__alt_data_end+0xff009034>
    91c8:	9005883a 	mov	r2,r18
    91cc:	003fc706 	br	90ec <__alt_data_end+0xff0090ec>
    91d0:	a80b883a 	mov	r5,r21
    91d4:	9009883a 	mov	r4,r18
    91d8:	0007a480 	call	7a48 <memmove>
    91dc:	003fc906 	br	9104 <__alt_data_end+0xff009104>
    91e0:	a8800217 	ldw	r2,8(r21)
    91e4:	b0800415 	stw	r2,16(r22)
    91e8:	a8800317 	ldw	r2,12(r21)
    91ec:	b0800515 	stw	r2,20(r22)
    91f0:	31000726 	beq	r6,r4,9210 <_realloc_r+0x548>
    91f4:	b0800604 	addi	r2,r22,24
    91f8:	ad400404 	addi	r21,r21,16
    91fc:	003fbb06 	br	90ec <__alt_data_end+0xff0090ec>
    9200:	a009883a 	mov	r4,r20
    9204:	000ec600 	call	ec60 <__malloc_unlock>
    9208:	0005883a 	mov	r2,zero
    920c:	003f0a06 	br	8e38 <__alt_data_end+0xff008e38>
    9210:	a8c00417 	ldw	r3,16(r21)
    9214:	ad400604 	addi	r21,r21,24
    9218:	b0800804 	addi	r2,r22,32
    921c:	b0c00615 	stw	r3,24(r22)
    9220:	a8ffff17 	ldw	r3,-4(r21)
    9224:	b0c00715 	stw	r3,28(r22)
    9228:	003fb006 	br	90ec <__alt_data_end+0xff0090ec>

0000922c <__fpclassifyd>:
    922c:	00a00034 	movhi	r2,32768
    9230:	10bfffc4 	addi	r2,r2,-1
    9234:	2884703a 	and	r2,r5,r2
    9238:	10000726 	beq	r2,zero,9258 <__fpclassifyd+0x2c>
    923c:	00fffc34 	movhi	r3,65520
    9240:	019ff834 	movhi	r6,32736
    9244:	28c7883a 	add	r3,r5,r3
    9248:	31bfffc4 	addi	r6,r6,-1
    924c:	30c00536 	bltu	r6,r3,9264 <__fpclassifyd+0x38>
    9250:	00800104 	movi	r2,4
    9254:	f800283a 	ret
    9258:	2000021e 	bne	r4,zero,9264 <__fpclassifyd+0x38>
    925c:	00800084 	movi	r2,2
    9260:	f800283a 	ret
    9264:	00dffc34 	movhi	r3,32752
    9268:	019ff834 	movhi	r6,32736
    926c:	28cb883a 	add	r5,r5,r3
    9270:	31bfffc4 	addi	r6,r6,-1
    9274:	317ff62e 	bgeu	r6,r5,9250 <__alt_data_end+0xff009250>
    9278:	01400434 	movhi	r5,16
    927c:	297fffc4 	addi	r5,r5,-1
    9280:	28800236 	bltu	r5,r2,928c <__fpclassifyd+0x60>
    9284:	008000c4 	movi	r2,3
    9288:	f800283a 	ret
    928c:	10c00226 	beq	r2,r3,9298 <__fpclassifyd+0x6c>
    9290:	0005883a 	mov	r2,zero
    9294:	f800283a 	ret
    9298:	2005003a 	cmpeq	r2,r4,zero
    929c:	f800283a 	ret

000092a0 <__sread>:
    92a0:	defffe04 	addi	sp,sp,-8
    92a4:	dc000015 	stw	r16,0(sp)
    92a8:	2821883a 	mov	r16,r5
    92ac:	2940038f 	ldh	r5,14(r5)
    92b0:	dfc00115 	stw	ra,4(sp)
    92b4:	000b0940 	call	b094 <_read_r>
    92b8:	10000716 	blt	r2,zero,92d8 <__sread+0x38>
    92bc:	80c01417 	ldw	r3,80(r16)
    92c0:	1887883a 	add	r3,r3,r2
    92c4:	80c01415 	stw	r3,80(r16)
    92c8:	dfc00117 	ldw	ra,4(sp)
    92cc:	dc000017 	ldw	r16,0(sp)
    92d0:	dec00204 	addi	sp,sp,8
    92d4:	f800283a 	ret
    92d8:	80c0030b 	ldhu	r3,12(r16)
    92dc:	18fbffcc 	andi	r3,r3,61439
    92e0:	80c0030d 	sth	r3,12(r16)
    92e4:	dfc00117 	ldw	ra,4(sp)
    92e8:	dc000017 	ldw	r16,0(sp)
    92ec:	dec00204 	addi	sp,sp,8
    92f0:	f800283a 	ret

000092f4 <__seofread>:
    92f4:	0005883a 	mov	r2,zero
    92f8:	f800283a 	ret

000092fc <__swrite>:
    92fc:	2880030b 	ldhu	r2,12(r5)
    9300:	defffb04 	addi	sp,sp,-20
    9304:	dcc00315 	stw	r19,12(sp)
    9308:	dc800215 	stw	r18,8(sp)
    930c:	dc400115 	stw	r17,4(sp)
    9310:	dc000015 	stw	r16,0(sp)
    9314:	dfc00415 	stw	ra,16(sp)
    9318:	10c0400c 	andi	r3,r2,256
    931c:	2821883a 	mov	r16,r5
    9320:	2023883a 	mov	r17,r4
    9324:	3025883a 	mov	r18,r6
    9328:	3827883a 	mov	r19,r7
    932c:	18000526 	beq	r3,zero,9344 <__swrite+0x48>
    9330:	2940038f 	ldh	r5,14(r5)
    9334:	01c00084 	movi	r7,2
    9338:	000d883a 	mov	r6,zero
    933c:	000b0340 	call	b034 <_lseek_r>
    9340:	8080030b 	ldhu	r2,12(r16)
    9344:	8140038f 	ldh	r5,14(r16)
    9348:	10bbffcc 	andi	r2,r2,61439
    934c:	980f883a 	mov	r7,r19
    9350:	900d883a 	mov	r6,r18
    9354:	8809883a 	mov	r4,r17
    9358:	8080030d 	sth	r2,12(r16)
    935c:	dfc00417 	ldw	ra,16(sp)
    9360:	dcc00317 	ldw	r19,12(sp)
    9364:	dc800217 	ldw	r18,8(sp)
    9368:	dc400117 	ldw	r17,4(sp)
    936c:	dc000017 	ldw	r16,0(sp)
    9370:	dec00504 	addi	sp,sp,20
    9374:	000ab001 	jmpi	ab00 <_write_r>

00009378 <__sseek>:
    9378:	defffe04 	addi	sp,sp,-8
    937c:	dc000015 	stw	r16,0(sp)
    9380:	2821883a 	mov	r16,r5
    9384:	2940038f 	ldh	r5,14(r5)
    9388:	dfc00115 	stw	ra,4(sp)
    938c:	000b0340 	call	b034 <_lseek_r>
    9390:	00ffffc4 	movi	r3,-1
    9394:	10c00826 	beq	r2,r3,93b8 <__sseek+0x40>
    9398:	80c0030b 	ldhu	r3,12(r16)
    939c:	80801415 	stw	r2,80(r16)
    93a0:	18c40014 	ori	r3,r3,4096
    93a4:	80c0030d 	sth	r3,12(r16)
    93a8:	dfc00117 	ldw	ra,4(sp)
    93ac:	dc000017 	ldw	r16,0(sp)
    93b0:	dec00204 	addi	sp,sp,8
    93b4:	f800283a 	ret
    93b8:	80c0030b 	ldhu	r3,12(r16)
    93bc:	18fbffcc 	andi	r3,r3,61439
    93c0:	80c0030d 	sth	r3,12(r16)
    93c4:	dfc00117 	ldw	ra,4(sp)
    93c8:	dc000017 	ldw	r16,0(sp)
    93cc:	dec00204 	addi	sp,sp,8
    93d0:	f800283a 	ret

000093d4 <__sclose>:
    93d4:	2940038f 	ldh	r5,14(r5)
    93d8:	000ab601 	jmpi	ab60 <_close_r>

000093dc <strcmp>:
    93dc:	2144b03a 	or	r2,r4,r5
    93e0:	108000cc 	andi	r2,r2,3
    93e4:	1000171e 	bne	r2,zero,9444 <strcmp+0x68>
    93e8:	20800017 	ldw	r2,0(r4)
    93ec:	28c00017 	ldw	r3,0(r5)
    93f0:	10c0141e 	bne	r2,r3,9444 <strcmp+0x68>
    93f4:	027fbff4 	movhi	r9,65279
    93f8:	4a7fbfc4 	addi	r9,r9,-257
    93fc:	0086303a 	nor	r3,zero,r2
    9400:	02202074 	movhi	r8,32897
    9404:	1245883a 	add	r2,r2,r9
    9408:	42202004 	addi	r8,r8,-32640
    940c:	10c4703a 	and	r2,r2,r3
    9410:	1204703a 	and	r2,r2,r8
    9414:	10000226 	beq	r2,zero,9420 <strcmp+0x44>
    9418:	00002306 	br	94a8 <strcmp+0xcc>
    941c:	1000221e 	bne	r2,zero,94a8 <strcmp+0xcc>
    9420:	21000104 	addi	r4,r4,4
    9424:	20c00017 	ldw	r3,0(r4)
    9428:	29400104 	addi	r5,r5,4
    942c:	29800017 	ldw	r6,0(r5)
    9430:	1a4f883a 	add	r7,r3,r9
    9434:	00c4303a 	nor	r2,zero,r3
    9438:	3884703a 	and	r2,r7,r2
    943c:	1204703a 	and	r2,r2,r8
    9440:	19bff626 	beq	r3,r6,941c <__alt_data_end+0xff00941c>
    9444:	20800003 	ldbu	r2,0(r4)
    9448:	10c03fcc 	andi	r3,r2,255
    944c:	18c0201c 	xori	r3,r3,128
    9450:	18ffe004 	addi	r3,r3,-128
    9454:	18000c26 	beq	r3,zero,9488 <strcmp+0xac>
    9458:	29800007 	ldb	r6,0(r5)
    945c:	19800326 	beq	r3,r6,946c <strcmp+0x90>
    9460:	00001306 	br	94b0 <strcmp+0xd4>
    9464:	29800007 	ldb	r6,0(r5)
    9468:	11800b1e 	bne	r2,r6,9498 <strcmp+0xbc>
    946c:	21000044 	addi	r4,r4,1
    9470:	20c00003 	ldbu	r3,0(r4)
    9474:	29400044 	addi	r5,r5,1
    9478:	18803fcc 	andi	r2,r3,255
    947c:	1080201c 	xori	r2,r2,128
    9480:	10bfe004 	addi	r2,r2,-128
    9484:	103ff71e 	bne	r2,zero,9464 <__alt_data_end+0xff009464>
    9488:	0007883a 	mov	r3,zero
    948c:	28800003 	ldbu	r2,0(r5)
    9490:	1885c83a 	sub	r2,r3,r2
    9494:	f800283a 	ret
    9498:	28800003 	ldbu	r2,0(r5)
    949c:	18c03fcc 	andi	r3,r3,255
    94a0:	1885c83a 	sub	r2,r3,r2
    94a4:	f800283a 	ret
    94a8:	0005883a 	mov	r2,zero
    94ac:	f800283a 	ret
    94b0:	10c03fcc 	andi	r3,r2,255
    94b4:	003ff506 	br	948c <__alt_data_end+0xff00948c>

000094b8 <__sprint_r.part.0>:
    94b8:	28801917 	ldw	r2,100(r5)
    94bc:	defff604 	addi	sp,sp,-40
    94c0:	dd400515 	stw	r21,20(sp)
    94c4:	dfc00915 	stw	ra,36(sp)
    94c8:	df000815 	stw	fp,32(sp)
    94cc:	ddc00715 	stw	r23,28(sp)
    94d0:	dd800615 	stw	r22,24(sp)
    94d4:	dd000415 	stw	r20,16(sp)
    94d8:	dcc00315 	stw	r19,12(sp)
    94dc:	dc800215 	stw	r18,8(sp)
    94e0:	dc400115 	stw	r17,4(sp)
    94e4:	dc000015 	stw	r16,0(sp)
    94e8:	1088000c 	andi	r2,r2,8192
    94ec:	302b883a 	mov	r21,r6
    94f0:	10002e26 	beq	r2,zero,95ac <__sprint_r.part.0+0xf4>
    94f4:	30800217 	ldw	r2,8(r6)
    94f8:	35800017 	ldw	r22,0(r6)
    94fc:	10002926 	beq	r2,zero,95a4 <__sprint_r.part.0+0xec>
    9500:	2827883a 	mov	r19,r5
    9504:	2029883a 	mov	r20,r4
    9508:	b5c00104 	addi	r23,r22,4
    950c:	04bfffc4 	movi	r18,-1
    9510:	bc400017 	ldw	r17,0(r23)
    9514:	b4000017 	ldw	r16,0(r22)
    9518:	0039883a 	mov	fp,zero
    951c:	8822d0ba 	srli	r17,r17,2
    9520:	8800031e 	bne	r17,zero,9530 <__sprint_r.part.0+0x78>
    9524:	00001806 	br	9588 <__sprint_r.part.0+0xd0>
    9528:	84000104 	addi	r16,r16,4
    952c:	8f001526 	beq	r17,fp,9584 <__sprint_r.part.0+0xcc>
    9530:	81400017 	ldw	r5,0(r16)
    9534:	980d883a 	mov	r6,r19
    9538:	a009883a 	mov	r4,r20
    953c:	000aee00 	call	aee0 <_fputwc_r>
    9540:	e7000044 	addi	fp,fp,1
    9544:	14bff81e 	bne	r2,r18,9528 <__alt_data_end+0xff009528>
    9548:	9005883a 	mov	r2,r18
    954c:	a8000215 	stw	zero,8(r21)
    9550:	a8000115 	stw	zero,4(r21)
    9554:	dfc00917 	ldw	ra,36(sp)
    9558:	df000817 	ldw	fp,32(sp)
    955c:	ddc00717 	ldw	r23,28(sp)
    9560:	dd800617 	ldw	r22,24(sp)
    9564:	dd400517 	ldw	r21,20(sp)
    9568:	dd000417 	ldw	r20,16(sp)
    956c:	dcc00317 	ldw	r19,12(sp)
    9570:	dc800217 	ldw	r18,8(sp)
    9574:	dc400117 	ldw	r17,4(sp)
    9578:	dc000017 	ldw	r16,0(sp)
    957c:	dec00a04 	addi	sp,sp,40
    9580:	f800283a 	ret
    9584:	a8800217 	ldw	r2,8(r21)
    9588:	8c63883a 	add	r17,r17,r17
    958c:	8c63883a 	add	r17,r17,r17
    9590:	1445c83a 	sub	r2,r2,r17
    9594:	a8800215 	stw	r2,8(r21)
    9598:	b5800204 	addi	r22,r22,8
    959c:	bdc00204 	addi	r23,r23,8
    95a0:	103fdb1e 	bne	r2,zero,9510 <__alt_data_end+0xff009510>
    95a4:	0005883a 	mov	r2,zero
    95a8:	003fe806 	br	954c <__alt_data_end+0xff00954c>
    95ac:	0006f400 	call	6f40 <__sfvwrite_r>
    95b0:	003fe606 	br	954c <__alt_data_end+0xff00954c>

000095b4 <__sprint_r>:
    95b4:	30c00217 	ldw	r3,8(r6)
    95b8:	18000126 	beq	r3,zero,95c0 <__sprint_r+0xc>
    95bc:	00094b81 	jmpi	94b8 <__sprint_r.part.0>
    95c0:	30000115 	stw	zero,4(r6)
    95c4:	0005883a 	mov	r2,zero
    95c8:	f800283a 	ret

000095cc <___vfiprintf_internal_r>:
    95cc:	deffc904 	addi	sp,sp,-220
    95d0:	df003515 	stw	fp,212(sp)
    95d4:	dd003115 	stw	r20,196(sp)
    95d8:	dfc03615 	stw	ra,216(sp)
    95dc:	ddc03415 	stw	r23,208(sp)
    95e0:	dd803315 	stw	r22,204(sp)
    95e4:	dd403215 	stw	r21,200(sp)
    95e8:	dcc03015 	stw	r19,192(sp)
    95ec:	dc802f15 	stw	r18,188(sp)
    95f0:	dc402e15 	stw	r17,184(sp)
    95f4:	dc002d15 	stw	r16,180(sp)
    95f8:	d9002015 	stw	r4,128(sp)
    95fc:	d9c02215 	stw	r7,136(sp)
    9600:	2829883a 	mov	r20,r5
    9604:	3039883a 	mov	fp,r6
    9608:	20000226 	beq	r4,zero,9614 <___vfiprintf_internal_r+0x48>
    960c:	20800e17 	ldw	r2,56(r4)
    9610:	1000cf26 	beq	r2,zero,9950 <___vfiprintf_internal_r+0x384>
    9614:	a080030b 	ldhu	r2,12(r20)
    9618:	10c8000c 	andi	r3,r2,8192
    961c:	1800061e 	bne	r3,zero,9638 <___vfiprintf_internal_r+0x6c>
    9620:	a1001917 	ldw	r4,100(r20)
    9624:	00f7ffc4 	movi	r3,-8193
    9628:	10880014 	ori	r2,r2,8192
    962c:	20c6703a 	and	r3,r4,r3
    9630:	a080030d 	sth	r2,12(r20)
    9634:	a0c01915 	stw	r3,100(r20)
    9638:	10c0020c 	andi	r3,r2,8
    963c:	1800a926 	beq	r3,zero,98e4 <___vfiprintf_internal_r+0x318>
    9640:	a0c00417 	ldw	r3,16(r20)
    9644:	1800a726 	beq	r3,zero,98e4 <___vfiprintf_internal_r+0x318>
    9648:	1080068c 	andi	r2,r2,26
    964c:	00c00284 	movi	r3,10
    9650:	10c0ac26 	beq	r2,r3,9904 <___vfiprintf_internal_r+0x338>
    9654:	da801a04 	addi	r10,sp,104
    9658:	da801e15 	stw	r10,120(sp)
    965c:	d8801e17 	ldw	r2,120(sp)
    9660:	da8019c4 	addi	r10,sp,103
    9664:	05800074 	movhi	r22,1
    9668:	05c00074 	movhi	r23,1
    966c:	da801f15 	stw	r10,124(sp)
    9670:	1295c83a 	sub	r10,r2,r10
    9674:	b5866c04 	addi	r22,r22,6576
    9678:	bdc66804 	addi	r23,r23,6560
    967c:	dec01a15 	stw	sp,104(sp)
    9680:	d8001c15 	stw	zero,112(sp)
    9684:	d8001b15 	stw	zero,108(sp)
    9688:	d8002615 	stw	zero,152(sp)
    968c:	d8002315 	stw	zero,140(sp)
    9690:	da802715 	stw	r10,156(sp)
    9694:	d811883a 	mov	r8,sp
    9698:	dd002115 	stw	r20,132(sp)
    969c:	e021883a 	mov	r16,fp
    96a0:	80800007 	ldb	r2,0(r16)
    96a4:	1003ea26 	beq	r2,zero,a650 <___vfiprintf_internal_r+0x1084>
    96a8:	00c00944 	movi	r3,37
    96ac:	8025883a 	mov	r18,r16
    96b0:	10c0021e 	bne	r2,r3,96bc <___vfiprintf_internal_r+0xf0>
    96b4:	00001606 	br	9710 <___vfiprintf_internal_r+0x144>
    96b8:	10c00326 	beq	r2,r3,96c8 <___vfiprintf_internal_r+0xfc>
    96bc:	94800044 	addi	r18,r18,1
    96c0:	90800007 	ldb	r2,0(r18)
    96c4:	103ffc1e 	bne	r2,zero,96b8 <__alt_data_end+0xff0096b8>
    96c8:	9423c83a 	sub	r17,r18,r16
    96cc:	88001026 	beq	r17,zero,9710 <___vfiprintf_internal_r+0x144>
    96d0:	d8c01c17 	ldw	r3,112(sp)
    96d4:	d8801b17 	ldw	r2,108(sp)
    96d8:	44000015 	stw	r16,0(r8)
    96dc:	88c7883a 	add	r3,r17,r3
    96e0:	10800044 	addi	r2,r2,1
    96e4:	44400115 	stw	r17,4(r8)
    96e8:	d8c01c15 	stw	r3,112(sp)
    96ec:	d8801b15 	stw	r2,108(sp)
    96f0:	010001c4 	movi	r4,7
    96f4:	2080760e 	bge	r4,r2,98d0 <___vfiprintf_internal_r+0x304>
    96f8:	1803821e 	bne	r3,zero,a504 <___vfiprintf_internal_r+0xf38>
    96fc:	da802317 	ldw	r10,140(sp)
    9700:	d8001b15 	stw	zero,108(sp)
    9704:	d811883a 	mov	r8,sp
    9708:	5455883a 	add	r10,r10,r17
    970c:	da802315 	stw	r10,140(sp)
    9710:	90800007 	ldb	r2,0(r18)
    9714:	10044626 	beq	r2,zero,a830 <___vfiprintf_internal_r+0x1264>
    9718:	90c00047 	ldb	r3,1(r18)
    971c:	94000044 	addi	r16,r18,1
    9720:	d8001d85 	stb	zero,118(sp)
    9724:	0009883a 	mov	r4,zero
    9728:	000f883a 	mov	r7,zero
    972c:	027fffc4 	movi	r9,-1
    9730:	0023883a 	mov	r17,zero
    9734:	0029883a 	mov	r20,zero
    9738:	01401604 	movi	r5,88
    973c:	01800244 	movi	r6,9
    9740:	03400a84 	movi	r13,42
    9744:	03001b04 	movi	r12,108
    9748:	84000044 	addi	r16,r16,1
    974c:	18bff804 	addi	r2,r3,-32
    9750:	28827336 	bltu	r5,r2,a120 <___vfiprintf_internal_r+0xb54>
    9754:	100490ba 	slli	r2,r2,2
    9758:	02800074 	movhi	r10,1
    975c:	52a5db04 	addi	r10,r10,-26772
    9760:	1285883a 	add	r2,r2,r10
    9764:	10800017 	ldw	r2,0(r2)
    9768:	1000683a 	jmp	r2
    976c:	00009e54 	movui	zero,633
    9770:	0000a120 	cmpeqi	zero,zero,644
    9774:	0000a120 	cmpeqi	zero,zero,644
    9778:	00009e74 	movhi	zero,633
    977c:	0000a120 	cmpeqi	zero,zero,644
    9780:	0000a120 	cmpeqi	zero,zero,644
    9784:	0000a120 	cmpeqi	zero,zero,644
    9788:	0000a120 	cmpeqi	zero,zero,644
    978c:	0000a120 	cmpeqi	zero,zero,644
    9790:	0000a120 	cmpeqi	zero,zero,644
    9794:	0000a05c 	xori	zero,zero,641
    9798:	0000a078 	rdprs	zero,zero,641
    979c:	0000a120 	cmpeqi	zero,zero,644
    97a0:	00009960 	cmpeqi	zero,zero,613
    97a4:	0000a088 	cmpgei	zero,zero,642
    97a8:	0000a120 	cmpeqi	zero,zero,644
    97ac:	00009e80 	call	9e8 <LCD_Write_Data>
    97b0:	00009e8c 	andi	zero,zero,634
    97b4:	00009e8c 	andi	zero,zero,634
    97b8:	00009e8c 	andi	zero,zero,634
    97bc:	00009e8c 	andi	zero,zero,634
    97c0:	00009e8c 	andi	zero,zero,634
    97c4:	00009e8c 	andi	zero,zero,634
    97c8:	00009e8c 	andi	zero,zero,634
    97cc:	00009e8c 	andi	zero,zero,634
    97d0:	00009e8c 	andi	zero,zero,634
    97d4:	0000a120 	cmpeqi	zero,zero,644
    97d8:	0000a120 	cmpeqi	zero,zero,644
    97dc:	0000a120 	cmpeqi	zero,zero,644
    97e0:	0000a120 	cmpeqi	zero,zero,644
    97e4:	0000a120 	cmpeqi	zero,zero,644
    97e8:	0000a120 	cmpeqi	zero,zero,644
    97ec:	0000a120 	cmpeqi	zero,zero,644
    97f0:	0000a120 	cmpeqi	zero,zero,644
    97f4:	0000a120 	cmpeqi	zero,zero,644
    97f8:	0000a120 	cmpeqi	zero,zero,644
    97fc:	00009eb8 	rdprs	zero,zero,634
    9800:	0000a120 	cmpeqi	zero,zero,644
    9804:	0000a120 	cmpeqi	zero,zero,644
    9808:	0000a120 	cmpeqi	zero,zero,644
    980c:	0000a120 	cmpeqi	zero,zero,644
    9810:	0000a120 	cmpeqi	zero,zero,644
    9814:	0000a120 	cmpeqi	zero,zero,644
    9818:	0000a120 	cmpeqi	zero,zero,644
    981c:	0000a120 	cmpeqi	zero,zero,644
    9820:	0000a120 	cmpeqi	zero,zero,644
    9824:	0000a120 	cmpeqi	zero,zero,644
    9828:	00009ef0 	cmpltui	zero,zero,635
    982c:	0000a120 	cmpeqi	zero,zero,644
    9830:	0000a120 	cmpeqi	zero,zero,644
    9834:	0000a120 	cmpeqi	zero,zero,644
    9838:	0000a120 	cmpeqi	zero,zero,644
    983c:	0000a120 	cmpeqi	zero,zero,644
    9840:	00009f48 	cmpgei	zero,zero,637
    9844:	0000a120 	cmpeqi	zero,zero,644
    9848:	0000a120 	cmpeqi	zero,zero,644
    984c:	00009fb8 	rdprs	zero,zero,638
    9850:	0000a120 	cmpeqi	zero,zero,644
    9854:	0000a120 	cmpeqi	zero,zero,644
    9858:	0000a120 	cmpeqi	zero,zero,644
    985c:	0000a120 	cmpeqi	zero,zero,644
    9860:	0000a120 	cmpeqi	zero,zero,644
    9864:	0000a120 	cmpeqi	zero,zero,644
    9868:	0000a120 	cmpeqi	zero,zero,644
    986c:	0000a120 	cmpeqi	zero,zero,644
    9870:	0000a120 	cmpeqi	zero,zero,644
    9874:	0000a120 	cmpeqi	zero,zero,644
    9878:	00009d64 	muli	zero,zero,629
    987c:	00009d90 	cmplti	zero,zero,630
    9880:	0000a120 	cmpeqi	zero,zero,644
    9884:	0000a120 	cmpeqi	zero,zero,644
    9888:	0000a120 	cmpeqi	zero,zero,644
    988c:	0000a0c8 	cmpgei	zero,zero,643
    9890:	00009d90 	cmplti	zero,zero,630
    9894:	0000a120 	cmpeqi	zero,zero,644
    9898:	0000a120 	cmpeqi	zero,zero,644
    989c:	00009c24 	muli	zero,zero,624
    98a0:	0000a120 	cmpeqi	zero,zero,644
    98a4:	00009c34 	movhi	zero,624
    98a8:	00009c70 	cmpltui	zero,zero,625
    98ac:	0000996c 	andhi	zero,zero,613
    98b0:	00009c18 	cmpnei	zero,zero,624
    98b4:	0000a120 	cmpeqi	zero,zero,644
    98b8:	00009ff4 	movhi	zero,639
    98bc:	0000a120 	cmpeqi	zero,zero,644
    98c0:	0000a04c 	andi	zero,zero,641
    98c4:	0000a120 	cmpeqi	zero,zero,644
    98c8:	0000a120 	cmpeqi	zero,zero,644
    98cc:	00009d10 	cmplti	zero,zero,628
    98d0:	42000204 	addi	r8,r8,8
    98d4:	da802317 	ldw	r10,140(sp)
    98d8:	5455883a 	add	r10,r10,r17
    98dc:	da802315 	stw	r10,140(sp)
    98e0:	003f8b06 	br	9710 <__alt_data_end+0xff009710>
    98e4:	d9002017 	ldw	r4,128(sp)
    98e8:	a00b883a 	mov	r5,r20
    98ec:	0004ae80 	call	4ae8 <__swsetup_r>
    98f0:	1003b11e 	bne	r2,zero,a7b8 <___vfiprintf_internal_r+0x11ec>
    98f4:	a080030b 	ldhu	r2,12(r20)
    98f8:	00c00284 	movi	r3,10
    98fc:	1080068c 	andi	r2,r2,26
    9900:	10ff541e 	bne	r2,r3,9654 <__alt_data_end+0xff009654>
    9904:	a080038f 	ldh	r2,14(r20)
    9908:	103f5216 	blt	r2,zero,9654 <__alt_data_end+0xff009654>
    990c:	d9c02217 	ldw	r7,136(sp)
    9910:	d9002017 	ldw	r4,128(sp)
    9914:	e00d883a 	mov	r6,fp
    9918:	a00b883a 	mov	r5,r20
    991c:	000aa440 	call	aa44 <__sbprintf>
    9920:	dfc03617 	ldw	ra,216(sp)
    9924:	df003517 	ldw	fp,212(sp)
    9928:	ddc03417 	ldw	r23,208(sp)
    992c:	dd803317 	ldw	r22,204(sp)
    9930:	dd403217 	ldw	r21,200(sp)
    9934:	dd003117 	ldw	r20,196(sp)
    9938:	dcc03017 	ldw	r19,192(sp)
    993c:	dc802f17 	ldw	r18,188(sp)
    9940:	dc402e17 	ldw	r17,184(sp)
    9944:	dc002d17 	ldw	r16,180(sp)
    9948:	dec03704 	addi	sp,sp,220
    994c:	f800283a 	ret
    9950:	0006abc0 	call	6abc <__sinit>
    9954:	003f2f06 	br	9614 <__alt_data_end+0xff009614>
    9958:	0463c83a 	sub	r17,zero,r17
    995c:	d8802215 	stw	r2,136(sp)
    9960:	a5000114 	ori	r20,r20,4
    9964:	80c00007 	ldb	r3,0(r16)
    9968:	003f7706 	br	9748 <__alt_data_end+0xff009748>
    996c:	00800c04 	movi	r2,48
    9970:	da802217 	ldw	r10,136(sp)
    9974:	d8801d05 	stb	r2,116(sp)
    9978:	00801e04 	movi	r2,120
    997c:	d8801d45 	stb	r2,117(sp)
    9980:	d8001d85 	stb	zero,118(sp)
    9984:	50c00104 	addi	r3,r10,4
    9988:	54800017 	ldw	r18,0(r10)
    998c:	0027883a 	mov	r19,zero
    9990:	a0800094 	ori	r2,r20,2
    9994:	48030b16 	blt	r9,zero,a5c4 <___vfiprintf_internal_r+0xff8>
    9998:	00bfdfc4 	movi	r2,-129
    999c:	a096703a 	and	r11,r20,r2
    99a0:	d8c02215 	stw	r3,136(sp)
    99a4:	5d000094 	ori	r20,r11,2
    99a8:	90032b1e 	bne	r18,zero,a658 <___vfiprintf_internal_r+0x108c>
    99ac:	00800074 	movhi	r2,1
    99b0:	10860704 	addi	r2,r2,6172
    99b4:	d8802615 	stw	r2,152(sp)
    99b8:	0039883a 	mov	fp,zero
    99bc:	48017b1e 	bne	r9,zero,9fac <___vfiprintf_internal_r+0x9e0>
    99c0:	0013883a 	mov	r9,zero
    99c4:	0027883a 	mov	r19,zero
    99c8:	dd401a04 	addi	r21,sp,104
    99cc:	4825883a 	mov	r18,r9
    99d0:	4cc0010e 	bge	r9,r19,99d8 <___vfiprintf_internal_r+0x40c>
    99d4:	9825883a 	mov	r18,r19
    99d8:	e7003fcc 	andi	fp,fp,255
    99dc:	e700201c 	xori	fp,fp,128
    99e0:	e73fe004 	addi	fp,fp,-128
    99e4:	e0000126 	beq	fp,zero,99ec <___vfiprintf_internal_r+0x420>
    99e8:	94800044 	addi	r18,r18,1
    99ec:	a380008c 	andi	r14,r20,2
    99f0:	70000126 	beq	r14,zero,99f8 <___vfiprintf_internal_r+0x42c>
    99f4:	94800084 	addi	r18,r18,2
    99f8:	a700210c 	andi	fp,r20,132
    99fc:	e001df1e 	bne	fp,zero,a17c <___vfiprintf_internal_r+0xbb0>
    9a00:	8c87c83a 	sub	r3,r17,r18
    9a04:	00c1dd0e 	bge	zero,r3,a17c <___vfiprintf_internal_r+0xbb0>
    9a08:	01c00404 	movi	r7,16
    9a0c:	d8801c17 	ldw	r2,112(sp)
    9a10:	38c3ad0e 	bge	r7,r3,a8c8 <___vfiprintf_internal_r+0x12fc>
    9a14:	02800074 	movhi	r10,1
    9a18:	52866c04 	addi	r10,r10,6576
    9a1c:	dc002915 	stw	r16,164(sp)
    9a20:	d9801b17 	ldw	r6,108(sp)
    9a24:	da802415 	stw	r10,144(sp)
    9a28:	03c001c4 	movi	r15,7
    9a2c:	da402515 	stw	r9,148(sp)
    9a30:	db802815 	stw	r14,160(sp)
    9a34:	1821883a 	mov	r16,r3
    9a38:	00000506 	br	9a50 <___vfiprintf_internal_r+0x484>
    9a3c:	31400084 	addi	r5,r6,2
    9a40:	42000204 	addi	r8,r8,8
    9a44:	200d883a 	mov	r6,r4
    9a48:	843ffc04 	addi	r16,r16,-16
    9a4c:	3c000d0e 	bge	r7,r16,9a84 <___vfiprintf_internal_r+0x4b8>
    9a50:	10800404 	addi	r2,r2,16
    9a54:	31000044 	addi	r4,r6,1
    9a58:	45800015 	stw	r22,0(r8)
    9a5c:	41c00115 	stw	r7,4(r8)
    9a60:	d8801c15 	stw	r2,112(sp)
    9a64:	d9001b15 	stw	r4,108(sp)
    9a68:	793ff40e 	bge	r15,r4,9a3c <__alt_data_end+0xff009a3c>
    9a6c:	1001b51e 	bne	r2,zero,a144 <___vfiprintf_internal_r+0xb78>
    9a70:	843ffc04 	addi	r16,r16,-16
    9a74:	000d883a 	mov	r6,zero
    9a78:	01400044 	movi	r5,1
    9a7c:	d811883a 	mov	r8,sp
    9a80:	3c3ff316 	blt	r7,r16,9a50 <__alt_data_end+0xff009a50>
    9a84:	8007883a 	mov	r3,r16
    9a88:	da402517 	ldw	r9,148(sp)
    9a8c:	db802817 	ldw	r14,160(sp)
    9a90:	dc002917 	ldw	r16,164(sp)
    9a94:	da802417 	ldw	r10,144(sp)
    9a98:	1885883a 	add	r2,r3,r2
    9a9c:	40c00115 	stw	r3,4(r8)
    9aa0:	42800015 	stw	r10,0(r8)
    9aa4:	d8801c15 	stw	r2,112(sp)
    9aa8:	d9401b15 	stw	r5,108(sp)
    9aac:	00c001c4 	movi	r3,7
    9ab0:	19426016 	blt	r3,r5,a434 <___vfiprintf_internal_r+0xe68>
    9ab4:	d8c01d87 	ldb	r3,118(sp)
    9ab8:	42000204 	addi	r8,r8,8
    9abc:	29000044 	addi	r4,r5,1
    9ac0:	1801b31e 	bne	r3,zero,a190 <___vfiprintf_internal_r+0xbc4>
    9ac4:	7001c026 	beq	r14,zero,a1c8 <___vfiprintf_internal_r+0xbfc>
    9ac8:	d8c01d04 	addi	r3,sp,116
    9acc:	10800084 	addi	r2,r2,2
    9ad0:	40c00015 	stw	r3,0(r8)
    9ad4:	00c00084 	movi	r3,2
    9ad8:	40c00115 	stw	r3,4(r8)
    9adc:	d8801c15 	stw	r2,112(sp)
    9ae0:	d9001b15 	stw	r4,108(sp)
    9ae4:	00c001c4 	movi	r3,7
    9ae8:	1902650e 	bge	r3,r4,a480 <___vfiprintf_internal_r+0xeb4>
    9aec:	10029a1e 	bne	r2,zero,a558 <___vfiprintf_internal_r+0xf8c>
    9af0:	00c02004 	movi	r3,128
    9af4:	01000044 	movi	r4,1
    9af8:	000b883a 	mov	r5,zero
    9afc:	d811883a 	mov	r8,sp
    9b00:	e0c1b31e 	bne	fp,r3,a1d0 <___vfiprintf_internal_r+0xc04>
    9b04:	8cb9c83a 	sub	fp,r17,r18
    9b08:	0701b10e 	bge	zero,fp,a1d0 <___vfiprintf_internal_r+0xc04>
    9b0c:	01c00404 	movi	r7,16
    9b10:	3f03890e 	bge	r7,fp,a938 <___vfiprintf_internal_r+0x136c>
    9b14:	00c00074 	movhi	r3,1
    9b18:	18c66804 	addi	r3,r3,6560
    9b1c:	d8c02415 	stw	r3,144(sp)
    9b20:	8007883a 	mov	r3,r16
    9b24:	034001c4 	movi	r13,7
    9b28:	e021883a 	mov	r16,fp
    9b2c:	da402515 	stw	r9,148(sp)
    9b30:	1839883a 	mov	fp,r3
    9b34:	00000506 	br	9b4c <___vfiprintf_internal_r+0x580>
    9b38:	29800084 	addi	r6,r5,2
    9b3c:	42000204 	addi	r8,r8,8
    9b40:	180b883a 	mov	r5,r3
    9b44:	843ffc04 	addi	r16,r16,-16
    9b48:	3c000d0e 	bge	r7,r16,9b80 <___vfiprintf_internal_r+0x5b4>
    9b4c:	10800404 	addi	r2,r2,16
    9b50:	28c00044 	addi	r3,r5,1
    9b54:	45c00015 	stw	r23,0(r8)
    9b58:	41c00115 	stw	r7,4(r8)
    9b5c:	d8801c15 	stw	r2,112(sp)
    9b60:	d8c01b15 	stw	r3,108(sp)
    9b64:	68fff40e 	bge	r13,r3,9b38 <__alt_data_end+0xff009b38>
    9b68:	1002241e 	bne	r2,zero,a3fc <___vfiprintf_internal_r+0xe30>
    9b6c:	843ffc04 	addi	r16,r16,-16
    9b70:	01800044 	movi	r6,1
    9b74:	000b883a 	mov	r5,zero
    9b78:	d811883a 	mov	r8,sp
    9b7c:	3c3ff316 	blt	r7,r16,9b4c <__alt_data_end+0xff009b4c>
    9b80:	da402517 	ldw	r9,148(sp)
    9b84:	e007883a 	mov	r3,fp
    9b88:	8039883a 	mov	fp,r16
    9b8c:	1821883a 	mov	r16,r3
    9b90:	d8c02417 	ldw	r3,144(sp)
    9b94:	1705883a 	add	r2,r2,fp
    9b98:	47000115 	stw	fp,4(r8)
    9b9c:	40c00015 	stw	r3,0(r8)
    9ba0:	d8801c15 	stw	r2,112(sp)
    9ba4:	d9801b15 	stw	r6,108(sp)
    9ba8:	00c001c4 	movi	r3,7
    9bac:	19827616 	blt	r3,r6,a588 <___vfiprintf_internal_r+0xfbc>
    9bb0:	4cf9c83a 	sub	fp,r9,r19
    9bb4:	42000204 	addi	r8,r8,8
    9bb8:	31000044 	addi	r4,r6,1
    9bbc:	300b883a 	mov	r5,r6
    9bc0:	07018516 	blt	zero,fp,a1d8 <___vfiprintf_internal_r+0xc0c>
    9bc4:	9885883a 	add	r2,r19,r2
    9bc8:	45400015 	stw	r21,0(r8)
    9bcc:	44c00115 	stw	r19,4(r8)
    9bd0:	d8801c15 	stw	r2,112(sp)
    9bd4:	d9001b15 	stw	r4,108(sp)
    9bd8:	00c001c4 	movi	r3,7
    9bdc:	1901dd0e 	bge	r3,r4,a354 <___vfiprintf_internal_r+0xd88>
    9be0:	1002401e 	bne	r2,zero,a4e4 <___vfiprintf_internal_r+0xf18>
    9be4:	d8001b15 	stw	zero,108(sp)
    9be8:	a2c0010c 	andi	r11,r20,4
    9bec:	58000226 	beq	r11,zero,9bf8 <___vfiprintf_internal_r+0x62c>
    9bf0:	8ca7c83a 	sub	r19,r17,r18
    9bf4:	04c2f216 	blt	zero,r19,a7c0 <___vfiprintf_internal_r+0x11f4>
    9bf8:	8c80010e 	bge	r17,r18,9c00 <___vfiprintf_internal_r+0x634>
    9bfc:	9023883a 	mov	r17,r18
    9c00:	da802317 	ldw	r10,140(sp)
    9c04:	5455883a 	add	r10,r10,r17
    9c08:	da802315 	stw	r10,140(sp)
    9c0c:	d8001b15 	stw	zero,108(sp)
    9c10:	d811883a 	mov	r8,sp
    9c14:	003ea206 	br	96a0 <__alt_data_end+0xff0096a0>
    9c18:	a5000814 	ori	r20,r20,32
    9c1c:	80c00007 	ldb	r3,0(r16)
    9c20:	003ec906 	br	9748 <__alt_data_end+0xff009748>
    9c24:	80c00007 	ldb	r3,0(r16)
    9c28:	1b030926 	beq	r3,r12,a850 <___vfiprintf_internal_r+0x1284>
    9c2c:	a5000414 	ori	r20,r20,16
    9c30:	003ec506 	br	9748 <__alt_data_end+0xff009748>
    9c34:	21003fcc 	andi	r4,r4,255
    9c38:	20035e1e 	bne	r4,zero,a9b4 <___vfiprintf_internal_r+0x13e8>
    9c3c:	a080080c 	andi	r2,r20,32
    9c40:	1002a526 	beq	r2,zero,a6d8 <___vfiprintf_internal_r+0x110c>
    9c44:	da802217 	ldw	r10,136(sp)
    9c48:	50800017 	ldw	r2,0(r10)
    9c4c:	da802317 	ldw	r10,140(sp)
    9c50:	5007d7fa 	srai	r3,r10,31
    9c54:	da802217 	ldw	r10,136(sp)
    9c58:	10c00115 	stw	r3,4(r2)
    9c5c:	52800104 	addi	r10,r10,4
    9c60:	da802215 	stw	r10,136(sp)
    9c64:	da802317 	ldw	r10,140(sp)
    9c68:	12800015 	stw	r10,0(r2)
    9c6c:	003e8c06 	br	96a0 <__alt_data_end+0xff0096a0>
    9c70:	21003fcc 	andi	r4,r4,255
    9c74:	2003511e 	bne	r4,zero,a9bc <___vfiprintf_internal_r+0x13f0>
    9c78:	a080080c 	andi	r2,r20,32
    9c7c:	1000a126 	beq	r2,zero,9f04 <___vfiprintf_internal_r+0x938>
    9c80:	da802217 	ldw	r10,136(sp)
    9c84:	d8001d85 	stb	zero,118(sp)
    9c88:	50800204 	addi	r2,r10,8
    9c8c:	54800017 	ldw	r18,0(r10)
    9c90:	54c00117 	ldw	r19,4(r10)
    9c94:	4802b416 	blt	r9,zero,a768 <___vfiprintf_internal_r+0x119c>
    9c98:	013fdfc4 	movi	r4,-129
    9c9c:	94c6b03a 	or	r3,r18,r19
    9ca0:	d8802215 	stw	r2,136(sp)
    9ca4:	a128703a 	and	r20,r20,r4
    9ca8:	1800a226 	beq	r3,zero,9f34 <___vfiprintf_internal_r+0x968>
    9cac:	0039883a 	mov	fp,zero
    9cb0:	dd401a04 	addi	r21,sp,104
    9cb4:	9006d0fa 	srli	r3,r18,3
    9cb8:	9808977a 	slli	r4,r19,29
    9cbc:	9826d0fa 	srli	r19,r19,3
    9cc0:	948001cc 	andi	r18,r18,7
    9cc4:	90800c04 	addi	r2,r18,48
    9cc8:	ad7fffc4 	addi	r21,r21,-1
    9ccc:	20e4b03a 	or	r18,r4,r3
    9cd0:	a8800005 	stb	r2,0(r21)
    9cd4:	94c6b03a 	or	r3,r18,r19
    9cd8:	183ff61e 	bne	r3,zero,9cb4 <__alt_data_end+0xff009cb4>
    9cdc:	a0c0004c 	andi	r3,r20,1
    9ce0:	18005926 	beq	r3,zero,9e48 <___vfiprintf_internal_r+0x87c>
    9ce4:	10803fcc 	andi	r2,r2,255
    9ce8:	1080201c 	xori	r2,r2,128
    9cec:	10bfe004 	addi	r2,r2,-128
    9cf0:	00c00c04 	movi	r3,48
    9cf4:	10c05426 	beq	r2,r3,9e48 <___vfiprintf_internal_r+0x87c>
    9cf8:	da801e17 	ldw	r10,120(sp)
    9cfc:	a8bfffc4 	addi	r2,r21,-1
    9d00:	a8ffffc5 	stb	r3,-1(r21)
    9d04:	50a7c83a 	sub	r19,r10,r2
    9d08:	102b883a 	mov	r21,r2
    9d0c:	003f2f06 	br	99cc <__alt_data_end+0xff0099cc>
    9d10:	21003fcc 	andi	r4,r4,255
    9d14:	2003421e 	bne	r4,zero,aa20 <___vfiprintf_internal_r+0x1454>
    9d18:	00800074 	movhi	r2,1
    9d1c:	10860704 	addi	r2,r2,6172
    9d20:	d8802615 	stw	r2,152(sp)
    9d24:	a080080c 	andi	r2,r20,32
    9d28:	1000aa26 	beq	r2,zero,9fd4 <___vfiprintf_internal_r+0xa08>
    9d2c:	da802217 	ldw	r10,136(sp)
    9d30:	54800017 	ldw	r18,0(r10)
    9d34:	54c00117 	ldw	r19,4(r10)
    9d38:	52800204 	addi	r10,r10,8
    9d3c:	da802215 	stw	r10,136(sp)
    9d40:	a080004c 	andi	r2,r20,1
    9d44:	1001d226 	beq	r2,zero,a490 <___vfiprintf_internal_r+0xec4>
    9d48:	94c4b03a 	or	r2,r18,r19
    9d4c:	1002351e 	bne	r2,zero,a624 <___vfiprintf_internal_r+0x1058>
    9d50:	d8001d85 	stb	zero,118(sp)
    9d54:	48022216 	blt	r9,zero,a5e0 <___vfiprintf_internal_r+0x1014>
    9d58:	00bfdfc4 	movi	r2,-129
    9d5c:	a0a8703a 	and	r20,r20,r2
    9d60:	003f1506 	br	99b8 <__alt_data_end+0xff0099b8>
    9d64:	da802217 	ldw	r10,136(sp)
    9d68:	04800044 	movi	r18,1
    9d6c:	d8001d85 	stb	zero,118(sp)
    9d70:	50800017 	ldw	r2,0(r10)
    9d74:	52800104 	addi	r10,r10,4
    9d78:	da802215 	stw	r10,136(sp)
    9d7c:	d8801005 	stb	r2,64(sp)
    9d80:	9027883a 	mov	r19,r18
    9d84:	dd401004 	addi	r21,sp,64
    9d88:	0013883a 	mov	r9,zero
    9d8c:	003f1706 	br	99ec <__alt_data_end+0xff0099ec>
    9d90:	21003fcc 	andi	r4,r4,255
    9d94:	2003201e 	bne	r4,zero,aa18 <___vfiprintf_internal_r+0x144c>
    9d98:	a080080c 	andi	r2,r20,32
    9d9c:	10004b26 	beq	r2,zero,9ecc <___vfiprintf_internal_r+0x900>
    9da0:	da802217 	ldw	r10,136(sp)
    9da4:	50800117 	ldw	r2,4(r10)
    9da8:	54800017 	ldw	r18,0(r10)
    9dac:	52800204 	addi	r10,r10,8
    9db0:	da802215 	stw	r10,136(sp)
    9db4:	1027883a 	mov	r19,r2
    9db8:	10022c16 	blt	r2,zero,a66c <___vfiprintf_internal_r+0x10a0>
    9dbc:	df001d83 	ldbu	fp,118(sp)
    9dc0:	48007216 	blt	r9,zero,9f8c <___vfiprintf_internal_r+0x9c0>
    9dc4:	00ffdfc4 	movi	r3,-129
    9dc8:	94c4b03a 	or	r2,r18,r19
    9dcc:	a0e8703a 	and	r20,r20,r3
    9dd0:	1000cc26 	beq	r2,zero,a104 <___vfiprintf_internal_r+0xb38>
    9dd4:	98021026 	beq	r19,zero,a618 <___vfiprintf_internal_r+0x104c>
    9dd8:	dc402415 	stw	r17,144(sp)
    9ddc:	dc002515 	stw	r16,148(sp)
    9de0:	9823883a 	mov	r17,r19
    9de4:	9021883a 	mov	r16,r18
    9de8:	dd401a04 	addi	r21,sp,104
    9dec:	4825883a 	mov	r18,r9
    9df0:	4027883a 	mov	r19,r8
    9df4:	8009883a 	mov	r4,r16
    9df8:	880b883a 	mov	r5,r17
    9dfc:	01800284 	movi	r6,10
    9e00:	000f883a 	mov	r7,zero
    9e04:	000b9ac0 	call	b9ac <__umoddi3>
    9e08:	10800c04 	addi	r2,r2,48
    9e0c:	ad7fffc4 	addi	r21,r21,-1
    9e10:	8009883a 	mov	r4,r16
    9e14:	880b883a 	mov	r5,r17
    9e18:	a8800005 	stb	r2,0(r21)
    9e1c:	01800284 	movi	r6,10
    9e20:	000f883a 	mov	r7,zero
    9e24:	000b4340 	call	b434 <__udivdi3>
    9e28:	1021883a 	mov	r16,r2
    9e2c:	10c4b03a 	or	r2,r2,r3
    9e30:	1823883a 	mov	r17,r3
    9e34:	103fef1e 	bne	r2,zero,9df4 <__alt_data_end+0xff009df4>
    9e38:	dc402417 	ldw	r17,144(sp)
    9e3c:	dc002517 	ldw	r16,148(sp)
    9e40:	9013883a 	mov	r9,r18
    9e44:	9811883a 	mov	r8,r19
    9e48:	da801e17 	ldw	r10,120(sp)
    9e4c:	5567c83a 	sub	r19,r10,r21
    9e50:	003ede06 	br	99cc <__alt_data_end+0xff0099cc>
    9e54:	38803fcc 	andi	r2,r7,255
    9e58:	1080201c 	xori	r2,r2,128
    9e5c:	10bfe004 	addi	r2,r2,-128
    9e60:	1002371e 	bne	r2,zero,a740 <___vfiprintf_internal_r+0x1174>
    9e64:	01000044 	movi	r4,1
    9e68:	01c00804 	movi	r7,32
    9e6c:	80c00007 	ldb	r3,0(r16)
    9e70:	003e3506 	br	9748 <__alt_data_end+0xff009748>
    9e74:	a5000054 	ori	r20,r20,1
    9e78:	80c00007 	ldb	r3,0(r16)
    9e7c:	003e3206 	br	9748 <__alt_data_end+0xff009748>
    9e80:	a5002014 	ori	r20,r20,128
    9e84:	80c00007 	ldb	r3,0(r16)
    9e88:	003e2f06 	br	9748 <__alt_data_end+0xff009748>
    9e8c:	8015883a 	mov	r10,r16
    9e90:	0023883a 	mov	r17,zero
    9e94:	18bff404 	addi	r2,r3,-48
    9e98:	50c00007 	ldb	r3,0(r10)
    9e9c:	8c4002a4 	muli	r17,r17,10
    9ea0:	84000044 	addi	r16,r16,1
    9ea4:	8015883a 	mov	r10,r16
    9ea8:	1463883a 	add	r17,r2,r17
    9eac:	18bff404 	addi	r2,r3,-48
    9eb0:	30bff92e 	bgeu	r6,r2,9e98 <__alt_data_end+0xff009e98>
    9eb4:	003e2506 	br	974c <__alt_data_end+0xff00974c>
    9eb8:	21003fcc 	andi	r4,r4,255
    9ebc:	2002d41e 	bne	r4,zero,aa10 <___vfiprintf_internal_r+0x1444>
    9ec0:	a5000414 	ori	r20,r20,16
    9ec4:	a080080c 	andi	r2,r20,32
    9ec8:	103fb51e 	bne	r2,zero,9da0 <__alt_data_end+0xff009da0>
    9ecc:	a080040c 	andi	r2,r20,16
    9ed0:	1001f826 	beq	r2,zero,a6b4 <___vfiprintf_internal_r+0x10e8>
    9ed4:	da802217 	ldw	r10,136(sp)
    9ed8:	54800017 	ldw	r18,0(r10)
    9edc:	52800104 	addi	r10,r10,4
    9ee0:	da802215 	stw	r10,136(sp)
    9ee4:	9027d7fa 	srai	r19,r18,31
    9ee8:	9805883a 	mov	r2,r19
    9eec:	003fb206 	br	9db8 <__alt_data_end+0xff009db8>
    9ef0:	21003fcc 	andi	r4,r4,255
    9ef4:	2002c41e 	bne	r4,zero,aa08 <___vfiprintf_internal_r+0x143c>
    9ef8:	a5000414 	ori	r20,r20,16
    9efc:	a080080c 	andi	r2,r20,32
    9f00:	103f5f1e 	bne	r2,zero,9c80 <__alt_data_end+0xff009c80>
    9f04:	a080040c 	andi	r2,r20,16
    9f08:	10020f26 	beq	r2,zero,a748 <___vfiprintf_internal_r+0x117c>
    9f0c:	da802217 	ldw	r10,136(sp)
    9f10:	d8001d85 	stb	zero,118(sp)
    9f14:	0027883a 	mov	r19,zero
    9f18:	50800104 	addi	r2,r10,4
    9f1c:	54800017 	ldw	r18,0(r10)
    9f20:	48021116 	blt	r9,zero,a768 <___vfiprintf_internal_r+0x119c>
    9f24:	00ffdfc4 	movi	r3,-129
    9f28:	d8802215 	stw	r2,136(sp)
    9f2c:	a0e8703a 	and	r20,r20,r3
    9f30:	903f5e1e 	bne	r18,zero,9cac <__alt_data_end+0xff009cac>
    9f34:	0039883a 	mov	fp,zero
    9f38:	4802a626 	beq	r9,zero,a9d4 <___vfiprintf_internal_r+0x1408>
    9f3c:	0025883a 	mov	r18,zero
    9f40:	0027883a 	mov	r19,zero
    9f44:	003f5a06 	br	9cb0 <__alt_data_end+0xff009cb0>
    9f48:	21003fcc 	andi	r4,r4,255
    9f4c:	20029f1e 	bne	r4,zero,a9cc <___vfiprintf_internal_r+0x1400>
    9f50:	a5000414 	ori	r20,r20,16
    9f54:	a080080c 	andi	r2,r20,32
    9f58:	10005e1e 	bne	r2,zero,a0d4 <___vfiprintf_internal_r+0xb08>
    9f5c:	a080040c 	andi	r2,r20,16
    9f60:	1001a21e 	bne	r2,zero,a5ec <___vfiprintf_internal_r+0x1020>
    9f64:	a080100c 	andi	r2,r20,64
    9f68:	d8001d85 	stb	zero,118(sp)
    9f6c:	da802217 	ldw	r10,136(sp)
    9f70:	1002231e 	bne	r2,zero,a800 <___vfiprintf_internal_r+0x1234>
    9f74:	50800104 	addi	r2,r10,4
    9f78:	54800017 	ldw	r18,0(r10)
    9f7c:	0027883a 	mov	r19,zero
    9f80:	4801a00e 	bge	r9,zero,a604 <___vfiprintf_internal_r+0x1038>
    9f84:	d8802215 	stw	r2,136(sp)
    9f88:	0039883a 	mov	fp,zero
    9f8c:	94c4b03a 	or	r2,r18,r19
    9f90:	103f901e 	bne	r2,zero,9dd4 <__alt_data_end+0xff009dd4>
    9f94:	00800044 	movi	r2,1
    9f98:	10803fcc 	andi	r2,r2,255
    9f9c:	00c00044 	movi	r3,1
    9fa0:	10c05926 	beq	r2,r3,a108 <___vfiprintf_internal_r+0xb3c>
    9fa4:	00c00084 	movi	r3,2
    9fa8:	10ffe41e 	bne	r2,r3,9f3c <__alt_data_end+0xff009f3c>
    9fac:	0025883a 	mov	r18,zero
    9fb0:	0027883a 	mov	r19,zero
    9fb4:	00013d06 	br	a4ac <___vfiprintf_internal_r+0xee0>
    9fb8:	21003fcc 	andi	r4,r4,255
    9fbc:	2002811e 	bne	r4,zero,a9c4 <___vfiprintf_internal_r+0x13f8>
    9fc0:	00800074 	movhi	r2,1
    9fc4:	10860204 	addi	r2,r2,6152
    9fc8:	d8802615 	stw	r2,152(sp)
    9fcc:	a080080c 	andi	r2,r20,32
    9fd0:	103f561e 	bne	r2,zero,9d2c <__alt_data_end+0xff009d2c>
    9fd4:	a080040c 	andi	r2,r20,16
    9fd8:	1001d126 	beq	r2,zero,a720 <___vfiprintf_internal_r+0x1154>
    9fdc:	da802217 	ldw	r10,136(sp)
    9fe0:	0027883a 	mov	r19,zero
    9fe4:	54800017 	ldw	r18,0(r10)
    9fe8:	52800104 	addi	r10,r10,4
    9fec:	da802215 	stw	r10,136(sp)
    9ff0:	003f5306 	br	9d40 <__alt_data_end+0xff009d40>
    9ff4:	da802217 	ldw	r10,136(sp)
    9ff8:	d8001d85 	stb	zero,118(sp)
    9ffc:	55400017 	ldw	r21,0(r10)
    a000:	50c00104 	addi	r3,r10,4
    a004:	a8024226 	beq	r21,zero,a910 <___vfiprintf_internal_r+0x1344>
    a008:	48021816 	blt	r9,zero,a86c <___vfiprintf_internal_r+0x12a0>
    a00c:	480d883a 	mov	r6,r9
    a010:	000b883a 	mov	r5,zero
    a014:	a809883a 	mov	r4,r21
    a018:	d8c02a15 	stw	r3,168(sp)
    a01c:	da002b15 	stw	r8,172(sp)
    a020:	da402c15 	stw	r9,176(sp)
    a024:	000781c0 	call	781c <memchr>
    a028:	d8c02a17 	ldw	r3,168(sp)
    a02c:	da002b17 	ldw	r8,172(sp)
    a030:	da402c17 	ldw	r9,176(sp)
    a034:	10024826 	beq	r2,zero,a958 <___vfiprintf_internal_r+0x138c>
    a038:	1567c83a 	sub	r19,r2,r21
    a03c:	df001d83 	ldbu	fp,118(sp)
    a040:	d8c02215 	stw	r3,136(sp)
    a044:	0013883a 	mov	r9,zero
    a048:	003e6006 	br	99cc <__alt_data_end+0xff0099cc>
    a04c:	21003fcc 	andi	r4,r4,255
    a050:	203fc026 	beq	r4,zero,9f54 <__alt_data_end+0xff009f54>
    a054:	d9c01d85 	stb	r7,118(sp)
    a058:	003fbe06 	br	9f54 <__alt_data_end+0xff009f54>
    a05c:	da802217 	ldw	r10,136(sp)
    a060:	54400017 	ldw	r17,0(r10)
    a064:	50800104 	addi	r2,r10,4
    a068:	883e3b16 	blt	r17,zero,9958 <__alt_data_end+0xff009958>
    a06c:	d8802215 	stw	r2,136(sp)
    a070:	80c00007 	ldb	r3,0(r16)
    a074:	003db406 	br	9748 <__alt_data_end+0xff009748>
    a078:	01000044 	movi	r4,1
    a07c:	01c00ac4 	movi	r7,43
    a080:	80c00007 	ldb	r3,0(r16)
    a084:	003db006 	br	9748 <__alt_data_end+0xff009748>
    a088:	80c00007 	ldb	r3,0(r16)
    a08c:	82800044 	addi	r10,r16,1
    a090:	1b423c26 	beq	r3,r13,a984 <___vfiprintf_internal_r+0x13b8>
    a094:	18bff404 	addi	r2,r3,-48
    a098:	0013883a 	mov	r9,zero
    a09c:	30822b36 	bltu	r6,r2,a94c <___vfiprintf_internal_r+0x1380>
    a0a0:	50c00007 	ldb	r3,0(r10)
    a0a4:	4a4002a4 	muli	r9,r9,10
    a0a8:	54000044 	addi	r16,r10,1
    a0ac:	8015883a 	mov	r10,r16
    a0b0:	4893883a 	add	r9,r9,r2
    a0b4:	18bff404 	addi	r2,r3,-48
    a0b8:	30bff92e 	bgeu	r6,r2,a0a0 <__alt_data_end+0xff00a0a0>
    a0bc:	483da30e 	bge	r9,zero,974c <__alt_data_end+0xff00974c>
    a0c0:	027fffc4 	movi	r9,-1
    a0c4:	003da106 	br	974c <__alt_data_end+0xff00974c>
    a0c8:	a5001014 	ori	r20,r20,64
    a0cc:	80c00007 	ldb	r3,0(r16)
    a0d0:	003d9d06 	br	9748 <__alt_data_end+0xff009748>
    a0d4:	da802217 	ldw	r10,136(sp)
    a0d8:	d8001d85 	stb	zero,118(sp)
    a0dc:	50c00204 	addi	r3,r10,8
    a0e0:	54800017 	ldw	r18,0(r10)
    a0e4:	54c00117 	ldw	r19,4(r10)
    a0e8:	4801ca16 	blt	r9,zero,a814 <___vfiprintf_internal_r+0x1248>
    a0ec:	013fdfc4 	movi	r4,-129
    a0f0:	94c4b03a 	or	r2,r18,r19
    a0f4:	d8c02215 	stw	r3,136(sp)
    a0f8:	a128703a 	and	r20,r20,r4
    a0fc:	0039883a 	mov	fp,zero
    a100:	103f341e 	bne	r2,zero,9dd4 <__alt_data_end+0xff009dd4>
    a104:	483e2e26 	beq	r9,zero,99c0 <__alt_data_end+0xff0099c0>
    a108:	0025883a 	mov	r18,zero
    a10c:	94800c04 	addi	r18,r18,48
    a110:	dc8019c5 	stb	r18,103(sp)
    a114:	dcc02717 	ldw	r19,156(sp)
    a118:	dd4019c4 	addi	r21,sp,103
    a11c:	003e2b06 	br	99cc <__alt_data_end+0xff0099cc>
    a120:	21003fcc 	andi	r4,r4,255
    a124:	2002361e 	bne	r4,zero,aa00 <___vfiprintf_internal_r+0x1434>
    a128:	1801c126 	beq	r3,zero,a830 <___vfiprintf_internal_r+0x1264>
    a12c:	04800044 	movi	r18,1
    a130:	d8c01005 	stb	r3,64(sp)
    a134:	d8001d85 	stb	zero,118(sp)
    a138:	9027883a 	mov	r19,r18
    a13c:	dd401004 	addi	r21,sp,64
    a140:	003f1106 	br	9d88 <__alt_data_end+0xff009d88>
    a144:	d9402117 	ldw	r5,132(sp)
    a148:	d9002017 	ldw	r4,128(sp)
    a14c:	d9801a04 	addi	r6,sp,104
    a150:	d9c02b15 	stw	r7,172(sp)
    a154:	dbc02a15 	stw	r15,168(sp)
    a158:	00094b80 	call	94b8 <__sprint_r.part.0>
    a15c:	d9c02b17 	ldw	r7,172(sp)
    a160:	dbc02a17 	ldw	r15,168(sp)
    a164:	10006d1e 	bne	r2,zero,a31c <___vfiprintf_internal_r+0xd50>
    a168:	d9801b17 	ldw	r6,108(sp)
    a16c:	d8801c17 	ldw	r2,112(sp)
    a170:	d811883a 	mov	r8,sp
    a174:	31400044 	addi	r5,r6,1
    a178:	003e3306 	br	9a48 <__alt_data_end+0xff009a48>
    a17c:	d9401b17 	ldw	r5,108(sp)
    a180:	d8801c17 	ldw	r2,112(sp)
    a184:	29000044 	addi	r4,r5,1
    a188:	d8c01d87 	ldb	r3,118(sp)
    a18c:	183e4d26 	beq	r3,zero,9ac4 <__alt_data_end+0xff009ac4>
    a190:	00c00044 	movi	r3,1
    a194:	d9401d84 	addi	r5,sp,118
    a198:	10c5883a 	add	r2,r2,r3
    a19c:	41400015 	stw	r5,0(r8)
    a1a0:	40c00115 	stw	r3,4(r8)
    a1a4:	d8801c15 	stw	r2,112(sp)
    a1a8:	d9001b15 	stw	r4,108(sp)
    a1ac:	014001c4 	movi	r5,7
    a1b0:	2900a90e 	bge	r5,r4,a458 <___vfiprintf_internal_r+0xe8c>
    a1b4:	1000da1e 	bne	r2,zero,a520 <___vfiprintf_internal_r+0xf54>
    a1b8:	7000ab1e 	bne	r14,zero,a468 <___vfiprintf_internal_r+0xe9c>
    a1bc:	000b883a 	mov	r5,zero
    a1c0:	1809883a 	mov	r4,r3
    a1c4:	d811883a 	mov	r8,sp
    a1c8:	00c02004 	movi	r3,128
    a1cc:	e0fe4d26 	beq	fp,r3,9b04 <__alt_data_end+0xff009b04>
    a1d0:	4cf9c83a 	sub	fp,r9,r19
    a1d4:	073e7b0e 	bge	zero,fp,9bc4 <__alt_data_end+0xff009bc4>
    a1d8:	01c00404 	movi	r7,16
    a1dc:	3f01900e 	bge	r7,fp,a820 <___vfiprintf_internal_r+0x1254>
    a1e0:	00c00074 	movhi	r3,1
    a1e4:	18c66804 	addi	r3,r3,6560
    a1e8:	d8c02415 	stw	r3,144(sp)
    a1ec:	034001c4 	movi	r13,7
    a1f0:	00000506 	br	a208 <___vfiprintf_internal_r+0xc3c>
    a1f4:	29000084 	addi	r4,r5,2
    a1f8:	42000204 	addi	r8,r8,8
    a1fc:	180b883a 	mov	r5,r3
    a200:	e73ffc04 	addi	fp,fp,-16
    a204:	3f000d0e 	bge	r7,fp,a23c <___vfiprintf_internal_r+0xc70>
    a208:	10800404 	addi	r2,r2,16
    a20c:	28c00044 	addi	r3,r5,1
    a210:	45c00015 	stw	r23,0(r8)
    a214:	41c00115 	stw	r7,4(r8)
    a218:	d8801c15 	stw	r2,112(sp)
    a21c:	d8c01b15 	stw	r3,108(sp)
    a220:	68fff40e 	bge	r13,r3,a1f4 <__alt_data_end+0xff00a1f4>
    a224:	1000101e 	bne	r2,zero,a268 <___vfiprintf_internal_r+0xc9c>
    a228:	e73ffc04 	addi	fp,fp,-16
    a22c:	01000044 	movi	r4,1
    a230:	000b883a 	mov	r5,zero
    a234:	d811883a 	mov	r8,sp
    a238:	3f3ff316 	blt	r7,fp,a208 <__alt_data_end+0xff00a208>
    a23c:	da802417 	ldw	r10,144(sp)
    a240:	1705883a 	add	r2,r2,fp
    a244:	47000115 	stw	fp,4(r8)
    a248:	42800015 	stw	r10,0(r8)
    a24c:	d8801c15 	stw	r2,112(sp)
    a250:	d9001b15 	stw	r4,108(sp)
    a254:	00c001c4 	movi	r3,7
    a258:	19003616 	blt	r3,r4,a334 <___vfiprintf_internal_r+0xd68>
    a25c:	42000204 	addi	r8,r8,8
    a260:	21000044 	addi	r4,r4,1
    a264:	003e5706 	br	9bc4 <__alt_data_end+0xff009bc4>
    a268:	d9402117 	ldw	r5,132(sp)
    a26c:	d9002017 	ldw	r4,128(sp)
    a270:	d9801a04 	addi	r6,sp,104
    a274:	d9c02b15 	stw	r7,172(sp)
    a278:	db402a15 	stw	r13,168(sp)
    a27c:	00094b80 	call	94b8 <__sprint_r.part.0>
    a280:	d9c02b17 	ldw	r7,172(sp)
    a284:	db402a17 	ldw	r13,168(sp)
    a288:	1000241e 	bne	r2,zero,a31c <___vfiprintf_internal_r+0xd50>
    a28c:	d9401b17 	ldw	r5,108(sp)
    a290:	d8801c17 	ldw	r2,112(sp)
    a294:	d811883a 	mov	r8,sp
    a298:	29000044 	addi	r4,r5,1
    a29c:	003fd806 	br	a200 <__alt_data_end+0xff00a200>
    a2a0:	d9401b17 	ldw	r5,108(sp)
    a2a4:	00c00074 	movhi	r3,1
    a2a8:	18c66c04 	addi	r3,r3,6576
    a2ac:	d8c02415 	stw	r3,144(sp)
    a2b0:	29400044 	addi	r5,r5,1
    a2b4:	d8c02417 	ldw	r3,144(sp)
    a2b8:	14c5883a 	add	r2,r2,r19
    a2bc:	44c00115 	stw	r19,4(r8)
    a2c0:	40c00015 	stw	r3,0(r8)
    a2c4:	d8801c15 	stw	r2,112(sp)
    a2c8:	d9401b15 	stw	r5,108(sp)
    a2cc:	00c001c4 	movi	r3,7
    a2d0:	1940070e 	bge	r3,r5,a2f0 <___vfiprintf_internal_r+0xd24>
    a2d4:	103e4826 	beq	r2,zero,9bf8 <__alt_data_end+0xff009bf8>
    a2d8:	d9402117 	ldw	r5,132(sp)
    a2dc:	d9002017 	ldw	r4,128(sp)
    a2e0:	d9801a04 	addi	r6,sp,104
    a2e4:	00094b80 	call	94b8 <__sprint_r.part.0>
    a2e8:	10000c1e 	bne	r2,zero,a31c <___vfiprintf_internal_r+0xd50>
    a2ec:	d8801c17 	ldw	r2,112(sp)
    a2f0:	8c80010e 	bge	r17,r18,a2f8 <___vfiprintf_internal_r+0xd2c>
    a2f4:	9023883a 	mov	r17,r18
    a2f8:	da802317 	ldw	r10,140(sp)
    a2fc:	5455883a 	add	r10,r10,r17
    a300:	da802315 	stw	r10,140(sp)
    a304:	103e4126 	beq	r2,zero,9c0c <__alt_data_end+0xff009c0c>
    a308:	d9402117 	ldw	r5,132(sp)
    a30c:	d9002017 	ldw	r4,128(sp)
    a310:	d9801a04 	addi	r6,sp,104
    a314:	00094b80 	call	94b8 <__sprint_r.part.0>
    a318:	103e3c26 	beq	r2,zero,9c0c <__alt_data_end+0xff009c0c>
    a31c:	dd002117 	ldw	r20,132(sp)
    a320:	a080030b 	ldhu	r2,12(r20)
    a324:	1080100c 	andi	r2,r2,64
    a328:	1001231e 	bne	r2,zero,a7b8 <___vfiprintf_internal_r+0x11ec>
    a32c:	d8802317 	ldw	r2,140(sp)
    a330:	003d7b06 	br	9920 <__alt_data_end+0xff009920>
    a334:	1000991e 	bne	r2,zero,a59c <___vfiprintf_internal_r+0xfd0>
    a338:	00c00044 	movi	r3,1
    a33c:	9805883a 	mov	r2,r19
    a340:	dd400015 	stw	r21,0(sp)
    a344:	dcc00115 	stw	r19,4(sp)
    a348:	dcc01c15 	stw	r19,112(sp)
    a34c:	d8c01b15 	stw	r3,108(sp)
    a350:	d811883a 	mov	r8,sp
    a354:	42000204 	addi	r8,r8,8
    a358:	a2c0010c 	andi	r11,r20,4
    a35c:	583fe426 	beq	r11,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a360:	8ca7c83a 	sub	r19,r17,r18
    a364:	04ffe20e 	bge	zero,r19,a2f0 <__alt_data_end+0xff00a2f0>
    a368:	01c00404 	movi	r7,16
    a36c:	3cffcc0e 	bge	r7,r19,a2a0 <__alt_data_end+0xff00a2a0>
    a370:	02800074 	movhi	r10,1
    a374:	52866c04 	addi	r10,r10,6576
    a378:	d9001b17 	ldw	r4,108(sp)
    a37c:	da802415 	stw	r10,144(sp)
    a380:	382b883a 	mov	r21,r7
    a384:	050001c4 	movi	r20,7
    a388:	df002017 	ldw	fp,128(sp)
    a38c:	00000506 	br	a3a4 <___vfiprintf_internal_r+0xdd8>
    a390:	21400084 	addi	r5,r4,2
    a394:	42000204 	addi	r8,r8,8
    a398:	1809883a 	mov	r4,r3
    a39c:	9cfffc04 	addi	r19,r19,-16
    a3a0:	acffc40e 	bge	r21,r19,a2b4 <__alt_data_end+0xff00a2b4>
    a3a4:	10800404 	addi	r2,r2,16
    a3a8:	20c00044 	addi	r3,r4,1
    a3ac:	45800015 	stw	r22,0(r8)
    a3b0:	45400115 	stw	r21,4(r8)
    a3b4:	d8801c15 	stw	r2,112(sp)
    a3b8:	d8c01b15 	stw	r3,108(sp)
    a3bc:	a0fff40e 	bge	r20,r3,a390 <__alt_data_end+0xff00a390>
    a3c0:	1000041e 	bne	r2,zero,a3d4 <___vfiprintf_internal_r+0xe08>
    a3c4:	01400044 	movi	r5,1
    a3c8:	0009883a 	mov	r4,zero
    a3cc:	d811883a 	mov	r8,sp
    a3d0:	003ff206 	br	a39c <__alt_data_end+0xff00a39c>
    a3d4:	d9402117 	ldw	r5,132(sp)
    a3d8:	d9801a04 	addi	r6,sp,104
    a3dc:	e009883a 	mov	r4,fp
    a3e0:	00094b80 	call	94b8 <__sprint_r.part.0>
    a3e4:	103fcd1e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a3e8:	d9001b17 	ldw	r4,108(sp)
    a3ec:	d8801c17 	ldw	r2,112(sp)
    a3f0:	d811883a 	mov	r8,sp
    a3f4:	21400044 	addi	r5,r4,1
    a3f8:	003fe806 	br	a39c <__alt_data_end+0xff00a39c>
    a3fc:	d9402117 	ldw	r5,132(sp)
    a400:	d9002017 	ldw	r4,128(sp)
    a404:	d9801a04 	addi	r6,sp,104
    a408:	d9c02b15 	stw	r7,172(sp)
    a40c:	db402a15 	stw	r13,168(sp)
    a410:	00094b80 	call	94b8 <__sprint_r.part.0>
    a414:	d9c02b17 	ldw	r7,172(sp)
    a418:	db402a17 	ldw	r13,168(sp)
    a41c:	103fbf1e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a420:	d9401b17 	ldw	r5,108(sp)
    a424:	d8801c17 	ldw	r2,112(sp)
    a428:	d811883a 	mov	r8,sp
    a42c:	29800044 	addi	r6,r5,1
    a430:	003dc406 	br	9b44 <__alt_data_end+0xff009b44>
    a434:	1000d21e 	bne	r2,zero,a780 <___vfiprintf_internal_r+0x11b4>
    a438:	d8c01d87 	ldb	r3,118(sp)
    a43c:	18009526 	beq	r3,zero,a694 <___vfiprintf_internal_r+0x10c8>
    a440:	00800044 	movi	r2,1
    a444:	d8c01d84 	addi	r3,sp,118
    a448:	1009883a 	mov	r4,r2
    a44c:	d8c00015 	stw	r3,0(sp)
    a450:	d8800115 	stw	r2,4(sp)
    a454:	d811883a 	mov	r8,sp
    a458:	200b883a 	mov	r5,r4
    a45c:	42000204 	addi	r8,r8,8
    a460:	21000044 	addi	r4,r4,1
    a464:	003d9706 	br	9ac4 <__alt_data_end+0xff009ac4>
    a468:	d9001d04 	addi	r4,sp,116
    a46c:	00800084 	movi	r2,2
    a470:	d9000015 	stw	r4,0(sp)
    a474:	d8800115 	stw	r2,4(sp)
    a478:	1809883a 	mov	r4,r3
    a47c:	d811883a 	mov	r8,sp
    a480:	200b883a 	mov	r5,r4
    a484:	42000204 	addi	r8,r8,8
    a488:	21000044 	addi	r4,r4,1
    a48c:	003f4e06 	br	a1c8 <__alt_data_end+0xff00a1c8>
    a490:	d8001d85 	stb	zero,118(sp)
    a494:	48005016 	blt	r9,zero,a5d8 <___vfiprintf_internal_r+0x100c>
    a498:	00ffdfc4 	movi	r3,-129
    a49c:	94c4b03a 	or	r2,r18,r19
    a4a0:	a0e8703a 	and	r20,r20,r3
    a4a4:	103d4426 	beq	r2,zero,99b8 <__alt_data_end+0xff0099b8>
    a4a8:	0039883a 	mov	fp,zero
    a4ac:	d9002617 	ldw	r4,152(sp)
    a4b0:	dd401a04 	addi	r21,sp,104
    a4b4:	908003cc 	andi	r2,r18,15
    a4b8:	9806973a 	slli	r3,r19,28
    a4bc:	2085883a 	add	r2,r4,r2
    a4c0:	9024d13a 	srli	r18,r18,4
    a4c4:	10800003 	ldbu	r2,0(r2)
    a4c8:	9826d13a 	srli	r19,r19,4
    a4cc:	ad7fffc4 	addi	r21,r21,-1
    a4d0:	1ca4b03a 	or	r18,r3,r18
    a4d4:	a8800005 	stb	r2,0(r21)
    a4d8:	94c4b03a 	or	r2,r18,r19
    a4dc:	103ff51e 	bne	r2,zero,a4b4 <__alt_data_end+0xff00a4b4>
    a4e0:	003e5906 	br	9e48 <__alt_data_end+0xff009e48>
    a4e4:	d9402117 	ldw	r5,132(sp)
    a4e8:	d9002017 	ldw	r4,128(sp)
    a4ec:	d9801a04 	addi	r6,sp,104
    a4f0:	00094b80 	call	94b8 <__sprint_r.part.0>
    a4f4:	103f891e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a4f8:	d8801c17 	ldw	r2,112(sp)
    a4fc:	d811883a 	mov	r8,sp
    a500:	003f9506 	br	a358 <__alt_data_end+0xff00a358>
    a504:	d9402117 	ldw	r5,132(sp)
    a508:	d9002017 	ldw	r4,128(sp)
    a50c:	d9801a04 	addi	r6,sp,104
    a510:	00094b80 	call	94b8 <__sprint_r.part.0>
    a514:	103f811e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a518:	d811883a 	mov	r8,sp
    a51c:	003ced06 	br	98d4 <__alt_data_end+0xff0098d4>
    a520:	d9402117 	ldw	r5,132(sp)
    a524:	d9002017 	ldw	r4,128(sp)
    a528:	d9801a04 	addi	r6,sp,104
    a52c:	da402c15 	stw	r9,176(sp)
    a530:	db802a15 	stw	r14,168(sp)
    a534:	00094b80 	call	94b8 <__sprint_r.part.0>
    a538:	da402c17 	ldw	r9,176(sp)
    a53c:	db802a17 	ldw	r14,168(sp)
    a540:	103f761e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a544:	d9401b17 	ldw	r5,108(sp)
    a548:	d8801c17 	ldw	r2,112(sp)
    a54c:	d811883a 	mov	r8,sp
    a550:	29000044 	addi	r4,r5,1
    a554:	003d5b06 	br	9ac4 <__alt_data_end+0xff009ac4>
    a558:	d9402117 	ldw	r5,132(sp)
    a55c:	d9002017 	ldw	r4,128(sp)
    a560:	d9801a04 	addi	r6,sp,104
    a564:	da402c15 	stw	r9,176(sp)
    a568:	00094b80 	call	94b8 <__sprint_r.part.0>
    a56c:	da402c17 	ldw	r9,176(sp)
    a570:	103f6a1e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a574:	d9401b17 	ldw	r5,108(sp)
    a578:	d8801c17 	ldw	r2,112(sp)
    a57c:	d811883a 	mov	r8,sp
    a580:	29000044 	addi	r4,r5,1
    a584:	003f1006 	br	a1c8 <__alt_data_end+0xff00a1c8>
    a588:	1000c31e 	bne	r2,zero,a898 <___vfiprintf_internal_r+0x12cc>
    a58c:	01000044 	movi	r4,1
    a590:	000b883a 	mov	r5,zero
    a594:	d811883a 	mov	r8,sp
    a598:	003f0d06 	br	a1d0 <__alt_data_end+0xff00a1d0>
    a59c:	d9402117 	ldw	r5,132(sp)
    a5a0:	d9002017 	ldw	r4,128(sp)
    a5a4:	d9801a04 	addi	r6,sp,104
    a5a8:	00094b80 	call	94b8 <__sprint_r.part.0>
    a5ac:	103f5b1e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a5b0:	d9001b17 	ldw	r4,108(sp)
    a5b4:	d8801c17 	ldw	r2,112(sp)
    a5b8:	d811883a 	mov	r8,sp
    a5bc:	21000044 	addi	r4,r4,1
    a5c0:	003d8006 	br	9bc4 <__alt_data_end+0xff009bc4>
    a5c4:	01000074 	movhi	r4,1
    a5c8:	21060704 	addi	r4,r4,6172
    a5cc:	d9002615 	stw	r4,152(sp)
    a5d0:	d8c02215 	stw	r3,136(sp)
    a5d4:	1029883a 	mov	r20,r2
    a5d8:	94c4b03a 	or	r2,r18,r19
    a5dc:	103fb21e 	bne	r2,zero,a4a8 <__alt_data_end+0xff00a4a8>
    a5e0:	0039883a 	mov	fp,zero
    a5e4:	00800084 	movi	r2,2
    a5e8:	003e6b06 	br	9f98 <__alt_data_end+0xff009f98>
    a5ec:	da802217 	ldw	r10,136(sp)
    a5f0:	d8001d85 	stb	zero,118(sp)
    a5f4:	0027883a 	mov	r19,zero
    a5f8:	50800104 	addi	r2,r10,4
    a5fc:	54800017 	ldw	r18,0(r10)
    a600:	483e6016 	blt	r9,zero,9f84 <__alt_data_end+0xff009f84>
    a604:	00ffdfc4 	movi	r3,-129
    a608:	d8802215 	stw	r2,136(sp)
    a60c:	a0e8703a 	and	r20,r20,r3
    a610:	0039883a 	mov	fp,zero
    a614:	903ebb26 	beq	r18,zero,a104 <__alt_data_end+0xff00a104>
    a618:	00800244 	movi	r2,9
    a61c:	14bdee36 	bltu	r2,r18,9dd8 <__alt_data_end+0xff009dd8>
    a620:	003eba06 	br	a10c <__alt_data_end+0xff00a10c>
    a624:	00800c04 	movi	r2,48
    a628:	d8c01d45 	stb	r3,117(sp)
    a62c:	d8801d05 	stb	r2,116(sp)
    a630:	d8001d85 	stb	zero,118(sp)
    a634:	a0c00094 	ori	r3,r20,2
    a638:	4800a916 	blt	r9,zero,a8e0 <___vfiprintf_internal_r+0x1314>
    a63c:	00bfdfc4 	movi	r2,-129
    a640:	a096703a 	and	r11,r20,r2
    a644:	5d000094 	ori	r20,r11,2
    a648:	0039883a 	mov	fp,zero
    a64c:	003f9706 	br	a4ac <__alt_data_end+0xff00a4ac>
    a650:	8025883a 	mov	r18,r16
    a654:	003c2e06 	br	9710 <__alt_data_end+0xff009710>
    a658:	00800074 	movhi	r2,1
    a65c:	10860704 	addi	r2,r2,6172
    a660:	0039883a 	mov	fp,zero
    a664:	d8802615 	stw	r2,152(sp)
    a668:	003f9006 	br	a4ac <__alt_data_end+0xff00a4ac>
    a66c:	04a5c83a 	sub	r18,zero,r18
    a670:	07000b44 	movi	fp,45
    a674:	9004c03a 	cmpne	r2,r18,zero
    a678:	04e7c83a 	sub	r19,zero,r19
    a67c:	df001d85 	stb	fp,118(sp)
    a680:	98a7c83a 	sub	r19,r19,r2
    a684:	48009f16 	blt	r9,zero,a904 <___vfiprintf_internal_r+0x1338>
    a688:	00bfdfc4 	movi	r2,-129
    a68c:	a0a8703a 	and	r20,r20,r2
    a690:	003dd006 	br	9dd4 <__alt_data_end+0xff009dd4>
    a694:	70004c26 	beq	r14,zero,a7c8 <___vfiprintf_internal_r+0x11fc>
    a698:	00800084 	movi	r2,2
    a69c:	d8c01d04 	addi	r3,sp,116
    a6a0:	d8c00015 	stw	r3,0(sp)
    a6a4:	d8800115 	stw	r2,4(sp)
    a6a8:	01000044 	movi	r4,1
    a6ac:	d811883a 	mov	r8,sp
    a6b0:	003f7306 	br	a480 <__alt_data_end+0xff00a480>
    a6b4:	a080100c 	andi	r2,r20,64
    a6b8:	da802217 	ldw	r10,136(sp)
    a6bc:	103e0626 	beq	r2,zero,9ed8 <__alt_data_end+0xff009ed8>
    a6c0:	5480000f 	ldh	r18,0(r10)
    a6c4:	52800104 	addi	r10,r10,4
    a6c8:	da802215 	stw	r10,136(sp)
    a6cc:	9027d7fa 	srai	r19,r18,31
    a6d0:	9805883a 	mov	r2,r19
    a6d4:	003db806 	br	9db8 <__alt_data_end+0xff009db8>
    a6d8:	a080040c 	andi	r2,r20,16
    a6dc:	1000091e 	bne	r2,zero,a704 <___vfiprintf_internal_r+0x1138>
    a6e0:	a2c0100c 	andi	r11,r20,64
    a6e4:	58000726 	beq	r11,zero,a704 <___vfiprintf_internal_r+0x1138>
    a6e8:	da802217 	ldw	r10,136(sp)
    a6ec:	50800017 	ldw	r2,0(r10)
    a6f0:	52800104 	addi	r10,r10,4
    a6f4:	da802215 	stw	r10,136(sp)
    a6f8:	da802317 	ldw	r10,140(sp)
    a6fc:	1280000d 	sth	r10,0(r2)
    a700:	003be706 	br	96a0 <__alt_data_end+0xff0096a0>
    a704:	da802217 	ldw	r10,136(sp)
    a708:	50800017 	ldw	r2,0(r10)
    a70c:	52800104 	addi	r10,r10,4
    a710:	da802215 	stw	r10,136(sp)
    a714:	da802317 	ldw	r10,140(sp)
    a718:	12800015 	stw	r10,0(r2)
    a71c:	003be006 	br	96a0 <__alt_data_end+0xff0096a0>
    a720:	a080100c 	andi	r2,r20,64
    a724:	da802217 	ldw	r10,136(sp)
    a728:	10003026 	beq	r2,zero,a7ec <___vfiprintf_internal_r+0x1220>
    a72c:	5480000b 	ldhu	r18,0(r10)
    a730:	52800104 	addi	r10,r10,4
    a734:	0027883a 	mov	r19,zero
    a738:	da802215 	stw	r10,136(sp)
    a73c:	003d8006 	br	9d40 <__alt_data_end+0xff009d40>
    a740:	80c00007 	ldb	r3,0(r16)
    a744:	003c0006 	br	9748 <__alt_data_end+0xff009748>
    a748:	a080100c 	andi	r2,r20,64
    a74c:	d8001d85 	stb	zero,118(sp)
    a750:	da802217 	ldw	r10,136(sp)
    a754:	1000201e 	bne	r2,zero,a7d8 <___vfiprintf_internal_r+0x120c>
    a758:	50800104 	addi	r2,r10,4
    a75c:	54800017 	ldw	r18,0(r10)
    a760:	0027883a 	mov	r19,zero
    a764:	483def0e 	bge	r9,zero,9f24 <__alt_data_end+0xff009f24>
    a768:	94c6b03a 	or	r3,r18,r19
    a76c:	d8802215 	stw	r2,136(sp)
    a770:	183d4e1e 	bne	r3,zero,9cac <__alt_data_end+0xff009cac>
    a774:	0039883a 	mov	fp,zero
    a778:	0005883a 	mov	r2,zero
    a77c:	003e0606 	br	9f98 <__alt_data_end+0xff009f98>
    a780:	d9402117 	ldw	r5,132(sp)
    a784:	d9002017 	ldw	r4,128(sp)
    a788:	d9801a04 	addi	r6,sp,104
    a78c:	da402c15 	stw	r9,176(sp)
    a790:	db802a15 	stw	r14,168(sp)
    a794:	00094b80 	call	94b8 <__sprint_r.part.0>
    a798:	da402c17 	ldw	r9,176(sp)
    a79c:	db802a17 	ldw	r14,168(sp)
    a7a0:	103ede1e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a7a4:	d9401b17 	ldw	r5,108(sp)
    a7a8:	d8801c17 	ldw	r2,112(sp)
    a7ac:	d811883a 	mov	r8,sp
    a7b0:	29000044 	addi	r4,r5,1
    a7b4:	003e7406 	br	a188 <__alt_data_end+0xff00a188>
    a7b8:	00bfffc4 	movi	r2,-1
    a7bc:	003c5806 	br	9920 <__alt_data_end+0xff009920>
    a7c0:	d811883a 	mov	r8,sp
    a7c4:	003ee806 	br	a368 <__alt_data_end+0xff00a368>
    a7c8:	000b883a 	mov	r5,zero
    a7cc:	01000044 	movi	r4,1
    a7d0:	d811883a 	mov	r8,sp
    a7d4:	003e7c06 	br	a1c8 <__alt_data_end+0xff00a1c8>
    a7d8:	50800104 	addi	r2,r10,4
    a7dc:	5480000b 	ldhu	r18,0(r10)
    a7e0:	0027883a 	mov	r19,zero
    a7e4:	483dcf0e 	bge	r9,zero,9f24 <__alt_data_end+0xff009f24>
    a7e8:	003fdf06 	br	a768 <__alt_data_end+0xff00a768>
    a7ec:	54800017 	ldw	r18,0(r10)
    a7f0:	52800104 	addi	r10,r10,4
    a7f4:	0027883a 	mov	r19,zero
    a7f8:	da802215 	stw	r10,136(sp)
    a7fc:	003d5006 	br	9d40 <__alt_data_end+0xff009d40>
    a800:	50800104 	addi	r2,r10,4
    a804:	5480000b 	ldhu	r18,0(r10)
    a808:	0027883a 	mov	r19,zero
    a80c:	483f7d0e 	bge	r9,zero,a604 <__alt_data_end+0xff00a604>
    a810:	003ddc06 	br	9f84 <__alt_data_end+0xff009f84>
    a814:	d8c02215 	stw	r3,136(sp)
    a818:	0039883a 	mov	fp,zero
    a81c:	003ddb06 	br	9f8c <__alt_data_end+0xff009f8c>
    a820:	02800074 	movhi	r10,1
    a824:	52866804 	addi	r10,r10,6560
    a828:	da802415 	stw	r10,144(sp)
    a82c:	003e8306 	br	a23c <__alt_data_end+0xff00a23c>
    a830:	d8801c17 	ldw	r2,112(sp)
    a834:	dd002117 	ldw	r20,132(sp)
    a838:	103eb926 	beq	r2,zero,a320 <__alt_data_end+0xff00a320>
    a83c:	d9002017 	ldw	r4,128(sp)
    a840:	d9801a04 	addi	r6,sp,104
    a844:	a00b883a 	mov	r5,r20
    a848:	00094b80 	call	94b8 <__sprint_r.part.0>
    a84c:	003eb406 	br	a320 <__alt_data_end+0xff00a320>
    a850:	80c00043 	ldbu	r3,1(r16)
    a854:	a5000814 	ori	r20,r20,32
    a858:	84000044 	addi	r16,r16,1
    a85c:	18c03fcc 	andi	r3,r3,255
    a860:	18c0201c 	xori	r3,r3,128
    a864:	18ffe004 	addi	r3,r3,-128
    a868:	003bb706 	br	9748 <__alt_data_end+0xff009748>
    a86c:	a809883a 	mov	r4,r21
    a870:	d8c02a15 	stw	r3,168(sp)
    a874:	da002b15 	stw	r8,172(sp)
    a878:	00027800 	call	2780 <strlen>
    a87c:	d8c02a17 	ldw	r3,168(sp)
    a880:	1027883a 	mov	r19,r2
    a884:	df001d83 	ldbu	fp,118(sp)
    a888:	d8c02215 	stw	r3,136(sp)
    a88c:	0013883a 	mov	r9,zero
    a890:	da002b17 	ldw	r8,172(sp)
    a894:	003c4d06 	br	99cc <__alt_data_end+0xff0099cc>
    a898:	d9402117 	ldw	r5,132(sp)
    a89c:	d9002017 	ldw	r4,128(sp)
    a8a0:	d9801a04 	addi	r6,sp,104
    a8a4:	da402c15 	stw	r9,176(sp)
    a8a8:	00094b80 	call	94b8 <__sprint_r.part.0>
    a8ac:	da402c17 	ldw	r9,176(sp)
    a8b0:	103e9a1e 	bne	r2,zero,a31c <__alt_data_end+0xff00a31c>
    a8b4:	d9401b17 	ldw	r5,108(sp)
    a8b8:	d8801c17 	ldw	r2,112(sp)
    a8bc:	d811883a 	mov	r8,sp
    a8c0:	29000044 	addi	r4,r5,1
    a8c4:	003e4206 	br	a1d0 <__alt_data_end+0xff00a1d0>
    a8c8:	d9401b17 	ldw	r5,108(sp)
    a8cc:	01000074 	movhi	r4,1
    a8d0:	21066c04 	addi	r4,r4,6576
    a8d4:	d9002415 	stw	r4,144(sp)
    a8d8:	29400044 	addi	r5,r5,1
    a8dc:	003c6d06 	br	9a94 <__alt_data_end+0xff009a94>
    a8e0:	0039883a 	mov	fp,zero
    a8e4:	00800084 	movi	r2,2
    a8e8:	10803fcc 	andi	r2,r2,255
    a8ec:	01000044 	movi	r4,1
    a8f0:	11001e26 	beq	r2,r4,a96c <___vfiprintf_internal_r+0x13a0>
    a8f4:	01000084 	movi	r4,2
    a8f8:	11001e1e 	bne	r2,r4,a974 <___vfiprintf_internal_r+0x13a8>
    a8fc:	1829883a 	mov	r20,r3
    a900:	003eea06 	br	a4ac <__alt_data_end+0xff00a4ac>
    a904:	a007883a 	mov	r3,r20
    a908:	00800044 	movi	r2,1
    a90c:	003ff606 	br	a8e8 <__alt_data_end+0xff00a8e8>
    a910:	00800184 	movi	r2,6
    a914:	1240012e 	bgeu	r2,r9,a91c <___vfiprintf_internal_r+0x1350>
    a918:	1013883a 	mov	r9,r2
    a91c:	4827883a 	mov	r19,r9
    a920:	4825883a 	mov	r18,r9
    a924:	48001516 	blt	r9,zero,a97c <___vfiprintf_internal_r+0x13b0>
    a928:	05400074 	movhi	r21,1
    a92c:	d8c02215 	stw	r3,136(sp)
    a930:	ad460c04 	addi	r21,r21,6192
    a934:	003d1406 	br	9d88 <__alt_data_end+0xff009d88>
    a938:	02800074 	movhi	r10,1
    a93c:	52866804 	addi	r10,r10,6560
    a940:	da802415 	stw	r10,144(sp)
    a944:	200d883a 	mov	r6,r4
    a948:	003c9106 	br	9b90 <__alt_data_end+0xff009b90>
    a94c:	5021883a 	mov	r16,r10
    a950:	0013883a 	mov	r9,zero
    a954:	003b7d06 	br	974c <__alt_data_end+0xff00974c>
    a958:	4827883a 	mov	r19,r9
    a95c:	df001d83 	ldbu	fp,118(sp)
    a960:	d8c02215 	stw	r3,136(sp)
    a964:	0013883a 	mov	r9,zero
    a968:	003c1806 	br	99cc <__alt_data_end+0xff0099cc>
    a96c:	1829883a 	mov	r20,r3
    a970:	003d1806 	br	9dd4 <__alt_data_end+0xff009dd4>
    a974:	1829883a 	mov	r20,r3
    a978:	003ccd06 	br	9cb0 <__alt_data_end+0xff009cb0>
    a97c:	0025883a 	mov	r18,zero
    a980:	003fe906 	br	a928 <__alt_data_end+0xff00a928>
    a984:	d8802217 	ldw	r2,136(sp)
    a988:	80c00043 	ldbu	r3,1(r16)
    a98c:	5021883a 	mov	r16,r10
    a990:	12400017 	ldw	r9,0(r2)
    a994:	10800104 	addi	r2,r2,4
    a998:	d8802215 	stw	r2,136(sp)
    a99c:	483faf0e 	bge	r9,zero,a85c <__alt_data_end+0xff00a85c>
    a9a0:	18c03fcc 	andi	r3,r3,255
    a9a4:	18c0201c 	xori	r3,r3,128
    a9a8:	027fffc4 	movi	r9,-1
    a9ac:	18ffe004 	addi	r3,r3,-128
    a9b0:	003b6506 	br	9748 <__alt_data_end+0xff009748>
    a9b4:	d9c01d85 	stb	r7,118(sp)
    a9b8:	003ca006 	br	9c3c <__alt_data_end+0xff009c3c>
    a9bc:	d9c01d85 	stb	r7,118(sp)
    a9c0:	003cad06 	br	9c78 <__alt_data_end+0xff009c78>
    a9c4:	d9c01d85 	stb	r7,118(sp)
    a9c8:	003d7d06 	br	9fc0 <__alt_data_end+0xff009fc0>
    a9cc:	d9c01d85 	stb	r7,118(sp)
    a9d0:	003d5f06 	br	9f50 <__alt_data_end+0xff009f50>
    a9d4:	a080004c 	andi	r2,r20,1
    a9d8:	0039883a 	mov	fp,zero
    a9dc:	10000526 	beq	r2,zero,a9f4 <___vfiprintf_internal_r+0x1428>
    a9e0:	00800c04 	movi	r2,48
    a9e4:	d88019c5 	stb	r2,103(sp)
    a9e8:	dcc02717 	ldw	r19,156(sp)
    a9ec:	dd4019c4 	addi	r21,sp,103
    a9f0:	003bf606 	br	99cc <__alt_data_end+0xff0099cc>
    a9f4:	0027883a 	mov	r19,zero
    a9f8:	dd401a04 	addi	r21,sp,104
    a9fc:	003bf306 	br	99cc <__alt_data_end+0xff0099cc>
    aa00:	d9c01d85 	stb	r7,118(sp)
    aa04:	003dc806 	br	a128 <__alt_data_end+0xff00a128>
    aa08:	d9c01d85 	stb	r7,118(sp)
    aa0c:	003d3a06 	br	9ef8 <__alt_data_end+0xff009ef8>
    aa10:	d9c01d85 	stb	r7,118(sp)
    aa14:	003d2a06 	br	9ec0 <__alt_data_end+0xff009ec0>
    aa18:	d9c01d85 	stb	r7,118(sp)
    aa1c:	003cde06 	br	9d98 <__alt_data_end+0xff009d98>
    aa20:	d9c01d85 	stb	r7,118(sp)
    aa24:	003cbc06 	br	9d18 <__alt_data_end+0xff009d18>

0000aa28 <__vfiprintf_internal>:
    aa28:	00800074 	movhi	r2,1
    aa2c:	108d6b04 	addi	r2,r2,13740
    aa30:	300f883a 	mov	r7,r6
    aa34:	280d883a 	mov	r6,r5
    aa38:	200b883a 	mov	r5,r4
    aa3c:	11000017 	ldw	r4,0(r2)
    aa40:	00095cc1 	jmpi	95cc <___vfiprintf_internal_r>

0000aa44 <__sbprintf>:
    aa44:	2880030b 	ldhu	r2,12(r5)
    aa48:	2ac01917 	ldw	r11,100(r5)
    aa4c:	2a80038b 	ldhu	r10,14(r5)
    aa50:	2a400717 	ldw	r9,28(r5)
    aa54:	2a000917 	ldw	r8,36(r5)
    aa58:	defee204 	addi	sp,sp,-1144
    aa5c:	00c10004 	movi	r3,1024
    aa60:	dc011a15 	stw	r16,1128(sp)
    aa64:	10bfff4c 	andi	r2,r2,65533
    aa68:	2821883a 	mov	r16,r5
    aa6c:	d8cb883a 	add	r5,sp,r3
    aa70:	dc811c15 	stw	r18,1136(sp)
    aa74:	dc411b15 	stw	r17,1132(sp)
    aa78:	dfc11d15 	stw	ra,1140(sp)
    aa7c:	2025883a 	mov	r18,r4
    aa80:	d881030d 	sth	r2,1036(sp)
    aa84:	dac11915 	stw	r11,1124(sp)
    aa88:	da81038d 	sth	r10,1038(sp)
    aa8c:	da410715 	stw	r9,1052(sp)
    aa90:	da010915 	stw	r8,1060(sp)
    aa94:	dec10015 	stw	sp,1024(sp)
    aa98:	dec10415 	stw	sp,1040(sp)
    aa9c:	d8c10215 	stw	r3,1032(sp)
    aaa0:	d8c10515 	stw	r3,1044(sp)
    aaa4:	d8010615 	stw	zero,1048(sp)
    aaa8:	00095cc0 	call	95cc <___vfiprintf_internal_r>
    aaac:	1023883a 	mov	r17,r2
    aab0:	10000416 	blt	r2,zero,aac4 <__sbprintf+0x80>
    aab4:	d9410004 	addi	r5,sp,1024
    aab8:	9009883a 	mov	r4,r18
    aabc:	00066e00 	call	66e0 <_fflush_r>
    aac0:	10000d1e 	bne	r2,zero,aaf8 <__sbprintf+0xb4>
    aac4:	d881030b 	ldhu	r2,1036(sp)
    aac8:	1080100c 	andi	r2,r2,64
    aacc:	10000326 	beq	r2,zero,aadc <__sbprintf+0x98>
    aad0:	8080030b 	ldhu	r2,12(r16)
    aad4:	10801014 	ori	r2,r2,64
    aad8:	8080030d 	sth	r2,12(r16)
    aadc:	8805883a 	mov	r2,r17
    aae0:	dfc11d17 	ldw	ra,1140(sp)
    aae4:	dc811c17 	ldw	r18,1136(sp)
    aae8:	dc411b17 	ldw	r17,1132(sp)
    aaec:	dc011a17 	ldw	r16,1128(sp)
    aaf0:	dec11e04 	addi	sp,sp,1144
    aaf4:	f800283a 	ret
    aaf8:	047fffc4 	movi	r17,-1
    aafc:	003ff106 	br	aac4 <__alt_data_end+0xff00aac4>

0000ab00 <_write_r>:
    ab00:	defffd04 	addi	sp,sp,-12
    ab04:	2805883a 	mov	r2,r5
    ab08:	dc000015 	stw	r16,0(sp)
    ab0c:	04000074 	movhi	r16,1
    ab10:	dc400115 	stw	r17,4(sp)
    ab14:	300b883a 	mov	r5,r6
    ab18:	84144204 	addi	r16,r16,20744
    ab1c:	2023883a 	mov	r17,r4
    ab20:	380d883a 	mov	r6,r7
    ab24:	1009883a 	mov	r4,r2
    ab28:	dfc00215 	stw	ra,8(sp)
    ab2c:	80000015 	stw	zero,0(r16)
    ab30:	000efac0 	call	efac <write>
    ab34:	00ffffc4 	movi	r3,-1
    ab38:	10c00526 	beq	r2,r3,ab50 <_write_r+0x50>
    ab3c:	dfc00217 	ldw	ra,8(sp)
    ab40:	dc400117 	ldw	r17,4(sp)
    ab44:	dc000017 	ldw	r16,0(sp)
    ab48:	dec00304 	addi	sp,sp,12
    ab4c:	f800283a 	ret
    ab50:	80c00017 	ldw	r3,0(r16)
    ab54:	183ff926 	beq	r3,zero,ab3c <__alt_data_end+0xff00ab3c>
    ab58:	88c00015 	stw	r3,0(r17)
    ab5c:	003ff706 	br	ab3c <__alt_data_end+0xff00ab3c>

0000ab60 <_close_r>:
    ab60:	defffd04 	addi	sp,sp,-12
    ab64:	dc000015 	stw	r16,0(sp)
    ab68:	04000074 	movhi	r16,1
    ab6c:	dc400115 	stw	r17,4(sp)
    ab70:	84144204 	addi	r16,r16,20744
    ab74:	2023883a 	mov	r17,r4
    ab78:	2809883a 	mov	r4,r5
    ab7c:	dfc00215 	stw	ra,8(sp)
    ab80:	80000015 	stw	zero,0(r16)
    ab84:	000e73c0 	call	e73c <close>
    ab88:	00ffffc4 	movi	r3,-1
    ab8c:	10c00526 	beq	r2,r3,aba4 <_close_r+0x44>
    ab90:	dfc00217 	ldw	ra,8(sp)
    ab94:	dc400117 	ldw	r17,4(sp)
    ab98:	dc000017 	ldw	r16,0(sp)
    ab9c:	dec00304 	addi	sp,sp,12
    aba0:	f800283a 	ret
    aba4:	80c00017 	ldw	r3,0(r16)
    aba8:	183ff926 	beq	r3,zero,ab90 <__alt_data_end+0xff00ab90>
    abac:	88c00015 	stw	r3,0(r17)
    abb0:	003ff706 	br	ab90 <__alt_data_end+0xff00ab90>

0000abb4 <_calloc_r>:
    abb4:	298b383a 	mul	r5,r5,r6
    abb8:	defffe04 	addi	sp,sp,-8
    abbc:	dfc00115 	stw	ra,4(sp)
    abc0:	dc000015 	stw	r16,0(sp)
    abc4:	0001de00 	call	1de0 <_malloc_r>
    abc8:	10002926 	beq	r2,zero,ac70 <_calloc_r+0xbc>
    abcc:	11bfff17 	ldw	r6,-4(r2)
    abd0:	1021883a 	mov	r16,r2
    abd4:	00bfff04 	movi	r2,-4
    abd8:	308c703a 	and	r6,r6,r2
    abdc:	00c00904 	movi	r3,36
    abe0:	308d883a 	add	r6,r6,r2
    abe4:	19801636 	bltu	r3,r6,ac40 <_calloc_r+0x8c>
    abe8:	008004c4 	movi	r2,19
    abec:	11800b2e 	bgeu	r2,r6,ac1c <_calloc_r+0x68>
    abf0:	80000015 	stw	zero,0(r16)
    abf4:	80000115 	stw	zero,4(r16)
    abf8:	008006c4 	movi	r2,27
    abfc:	11801a2e 	bgeu	r2,r6,ac68 <_calloc_r+0xb4>
    ac00:	80000215 	stw	zero,8(r16)
    ac04:	80000315 	stw	zero,12(r16)
    ac08:	30c0151e 	bne	r6,r3,ac60 <_calloc_r+0xac>
    ac0c:	80000415 	stw	zero,16(r16)
    ac10:	80800604 	addi	r2,r16,24
    ac14:	80000515 	stw	zero,20(r16)
    ac18:	00000106 	br	ac20 <_calloc_r+0x6c>
    ac1c:	8005883a 	mov	r2,r16
    ac20:	10000015 	stw	zero,0(r2)
    ac24:	10000115 	stw	zero,4(r2)
    ac28:	10000215 	stw	zero,8(r2)
    ac2c:	8005883a 	mov	r2,r16
    ac30:	dfc00117 	ldw	ra,4(sp)
    ac34:	dc000017 	ldw	r16,0(sp)
    ac38:	dec00204 	addi	sp,sp,8
    ac3c:	f800283a 	ret
    ac40:	000b883a 	mov	r5,zero
    ac44:	8009883a 	mov	r4,r16
    ac48:	0007ba40 	call	7ba4 <memset>
    ac4c:	8005883a 	mov	r2,r16
    ac50:	dfc00117 	ldw	ra,4(sp)
    ac54:	dc000017 	ldw	r16,0(sp)
    ac58:	dec00204 	addi	sp,sp,8
    ac5c:	f800283a 	ret
    ac60:	80800404 	addi	r2,r16,16
    ac64:	003fee06 	br	ac20 <__alt_data_end+0xff00ac20>
    ac68:	80800204 	addi	r2,r16,8
    ac6c:	003fec06 	br	ac20 <__alt_data_end+0xff00ac20>
    ac70:	0005883a 	mov	r2,zero
    ac74:	003fee06 	br	ac30 <__alt_data_end+0xff00ac30>

0000ac78 <_fclose_r>:
    ac78:	28003926 	beq	r5,zero,ad60 <_fclose_r+0xe8>
    ac7c:	defffc04 	addi	sp,sp,-16
    ac80:	dc400115 	stw	r17,4(sp)
    ac84:	dc000015 	stw	r16,0(sp)
    ac88:	dfc00315 	stw	ra,12(sp)
    ac8c:	dc800215 	stw	r18,8(sp)
    ac90:	2023883a 	mov	r17,r4
    ac94:	2821883a 	mov	r16,r5
    ac98:	20000226 	beq	r4,zero,aca4 <_fclose_r+0x2c>
    ac9c:	20800e17 	ldw	r2,56(r4)
    aca0:	10002726 	beq	r2,zero,ad40 <_fclose_r+0xc8>
    aca4:	8080030f 	ldh	r2,12(r16)
    aca8:	1000071e 	bne	r2,zero,acc8 <_fclose_r+0x50>
    acac:	0005883a 	mov	r2,zero
    acb0:	dfc00317 	ldw	ra,12(sp)
    acb4:	dc800217 	ldw	r18,8(sp)
    acb8:	dc400117 	ldw	r17,4(sp)
    acbc:	dc000017 	ldw	r16,0(sp)
    acc0:	dec00404 	addi	sp,sp,16
    acc4:	f800283a 	ret
    acc8:	800b883a 	mov	r5,r16
    accc:	8809883a 	mov	r4,r17
    acd0:	00064c40 	call	64c4 <__sflush_r>
    acd4:	1025883a 	mov	r18,r2
    acd8:	80800b17 	ldw	r2,44(r16)
    acdc:	10000426 	beq	r2,zero,acf0 <_fclose_r+0x78>
    ace0:	81400717 	ldw	r5,28(r16)
    ace4:	8809883a 	mov	r4,r17
    ace8:	103ee83a 	callr	r2
    acec:	10001616 	blt	r2,zero,ad48 <_fclose_r+0xd0>
    acf0:	8080030b 	ldhu	r2,12(r16)
    acf4:	1080200c 	andi	r2,r2,128
    acf8:	1000151e 	bne	r2,zero,ad50 <_fclose_r+0xd8>
    acfc:	81400c17 	ldw	r5,48(r16)
    ad00:	28000526 	beq	r5,zero,ad18 <_fclose_r+0xa0>
    ad04:	80801004 	addi	r2,r16,64
    ad08:	28800226 	beq	r5,r2,ad14 <_fclose_r+0x9c>
    ad0c:	8809883a 	mov	r4,r17
    ad10:	0006c300 	call	6c30 <_free_r>
    ad14:	80000c15 	stw	zero,48(r16)
    ad18:	81401117 	ldw	r5,68(r16)
    ad1c:	28000326 	beq	r5,zero,ad2c <_fclose_r+0xb4>
    ad20:	8809883a 	mov	r4,r17
    ad24:	0006c300 	call	6c30 <_free_r>
    ad28:	80001115 	stw	zero,68(r16)
    ad2c:	0006acc0 	call	6acc <__sfp_lock_acquire>
    ad30:	8000030d 	sth	zero,12(r16)
    ad34:	0006ad00 	call	6ad0 <__sfp_lock_release>
    ad38:	9005883a 	mov	r2,r18
    ad3c:	003fdc06 	br	acb0 <__alt_data_end+0xff00acb0>
    ad40:	0006abc0 	call	6abc <__sinit>
    ad44:	003fd706 	br	aca4 <__alt_data_end+0xff00aca4>
    ad48:	04bfffc4 	movi	r18,-1
    ad4c:	003fe806 	br	acf0 <__alt_data_end+0xff00acf0>
    ad50:	81400417 	ldw	r5,16(r16)
    ad54:	8809883a 	mov	r4,r17
    ad58:	0006c300 	call	6c30 <_free_r>
    ad5c:	003fe706 	br	acfc <__alt_data_end+0xff00acfc>
    ad60:	0005883a 	mov	r2,zero
    ad64:	f800283a 	ret

0000ad68 <fclose>:
    ad68:	00800074 	movhi	r2,1
    ad6c:	108d6b04 	addi	r2,r2,13740
    ad70:	200b883a 	mov	r5,r4
    ad74:	11000017 	ldw	r4,0(r2)
    ad78:	000ac781 	jmpi	ac78 <_fclose_r>

0000ad7c <__fputwc>:
    ad7c:	defff804 	addi	sp,sp,-32
    ad80:	dcc00415 	stw	r19,16(sp)
    ad84:	dc800315 	stw	r18,12(sp)
    ad88:	dc000115 	stw	r16,4(sp)
    ad8c:	dfc00715 	stw	ra,28(sp)
    ad90:	dd400615 	stw	r21,24(sp)
    ad94:	dd000515 	stw	r20,20(sp)
    ad98:	dc400215 	stw	r17,8(sp)
    ad9c:	2027883a 	mov	r19,r4
    ada0:	2825883a 	mov	r18,r5
    ada4:	3021883a 	mov	r16,r6
    ada8:	000760c0 	call	760c <__locale_mb_cur_max>
    adac:	00c00044 	movi	r3,1
    adb0:	10c03e26 	beq	r2,r3,aeac <__fputwc+0x130>
    adb4:	81c01704 	addi	r7,r16,92
    adb8:	900d883a 	mov	r6,r18
    adbc:	d80b883a 	mov	r5,sp
    adc0:	9809883a 	mov	r4,r19
    adc4:	000b24c0 	call	b24c <_wcrtomb_r>
    adc8:	1029883a 	mov	r20,r2
    adcc:	00bfffc4 	movi	r2,-1
    add0:	a0802026 	beq	r20,r2,ae54 <__fputwc+0xd8>
    add4:	d9400003 	ldbu	r5,0(sp)
    add8:	a0001c26 	beq	r20,zero,ae4c <__fputwc+0xd0>
    addc:	0023883a 	mov	r17,zero
    ade0:	05400284 	movi	r21,10
    ade4:	00000906 	br	ae0c <__fputwc+0x90>
    ade8:	80800017 	ldw	r2,0(r16)
    adec:	11400005 	stb	r5,0(r2)
    adf0:	80c00017 	ldw	r3,0(r16)
    adf4:	18c00044 	addi	r3,r3,1
    adf8:	80c00015 	stw	r3,0(r16)
    adfc:	8c400044 	addi	r17,r17,1
    ae00:	dc45883a 	add	r2,sp,r17
    ae04:	8d00112e 	bgeu	r17,r20,ae4c <__fputwc+0xd0>
    ae08:	11400003 	ldbu	r5,0(r2)
    ae0c:	80c00217 	ldw	r3,8(r16)
    ae10:	18ffffc4 	addi	r3,r3,-1
    ae14:	80c00215 	stw	r3,8(r16)
    ae18:	183ff30e 	bge	r3,zero,ade8 <__alt_data_end+0xff00ade8>
    ae1c:	80800617 	ldw	r2,24(r16)
    ae20:	18801916 	blt	r3,r2,ae88 <__fputwc+0x10c>
    ae24:	80800017 	ldw	r2,0(r16)
    ae28:	11400005 	stb	r5,0(r2)
    ae2c:	80800017 	ldw	r2,0(r16)
    ae30:	10c00003 	ldbu	r3,0(r2)
    ae34:	10800044 	addi	r2,r2,1
    ae38:	1d402326 	beq	r3,r21,aec8 <__fputwc+0x14c>
    ae3c:	80800015 	stw	r2,0(r16)
    ae40:	8c400044 	addi	r17,r17,1
    ae44:	dc45883a 	add	r2,sp,r17
    ae48:	8d3fef36 	bltu	r17,r20,ae08 <__alt_data_end+0xff00ae08>
    ae4c:	9005883a 	mov	r2,r18
    ae50:	00000406 	br	ae64 <__fputwc+0xe8>
    ae54:	80c0030b 	ldhu	r3,12(r16)
    ae58:	a005883a 	mov	r2,r20
    ae5c:	18c01014 	ori	r3,r3,64
    ae60:	80c0030d 	sth	r3,12(r16)
    ae64:	dfc00717 	ldw	ra,28(sp)
    ae68:	dd400617 	ldw	r21,24(sp)
    ae6c:	dd000517 	ldw	r20,20(sp)
    ae70:	dcc00417 	ldw	r19,16(sp)
    ae74:	dc800317 	ldw	r18,12(sp)
    ae78:	dc400217 	ldw	r17,8(sp)
    ae7c:	dc000117 	ldw	r16,4(sp)
    ae80:	dec00804 	addi	sp,sp,32
    ae84:	f800283a 	ret
    ae88:	800d883a 	mov	r6,r16
    ae8c:	29403fcc 	andi	r5,r5,255
    ae90:	9809883a 	mov	r4,r19
    ae94:	000b0f40 	call	b0f4 <__swbuf_r>
    ae98:	10bfffe0 	cmpeqi	r2,r2,-1
    ae9c:	10803fcc 	andi	r2,r2,255
    aea0:	103fd626 	beq	r2,zero,adfc <__alt_data_end+0xff00adfc>
    aea4:	00bfffc4 	movi	r2,-1
    aea8:	003fee06 	br	ae64 <__alt_data_end+0xff00ae64>
    aeac:	90ffffc4 	addi	r3,r18,-1
    aeb0:	01003f84 	movi	r4,254
    aeb4:	20ffbf36 	bltu	r4,r3,adb4 <__alt_data_end+0xff00adb4>
    aeb8:	900b883a 	mov	r5,r18
    aebc:	dc800005 	stb	r18,0(sp)
    aec0:	1029883a 	mov	r20,r2
    aec4:	003fc506 	br	addc <__alt_data_end+0xff00addc>
    aec8:	800d883a 	mov	r6,r16
    aecc:	a80b883a 	mov	r5,r21
    aed0:	9809883a 	mov	r4,r19
    aed4:	000b0f40 	call	b0f4 <__swbuf_r>
    aed8:	10bfffe0 	cmpeqi	r2,r2,-1
    aedc:	003fef06 	br	ae9c <__alt_data_end+0xff00ae9c>

0000aee0 <_fputwc_r>:
    aee0:	3080030b 	ldhu	r2,12(r6)
    aee4:	10c8000c 	andi	r3,r2,8192
    aee8:	1800051e 	bne	r3,zero,af00 <_fputwc_r+0x20>
    aeec:	30c01917 	ldw	r3,100(r6)
    aef0:	10880014 	ori	r2,r2,8192
    aef4:	3080030d 	sth	r2,12(r6)
    aef8:	18880014 	ori	r2,r3,8192
    aefc:	30801915 	stw	r2,100(r6)
    af00:	000ad7c1 	jmpi	ad7c <__fputwc>

0000af04 <fputwc>:
    af04:	00800074 	movhi	r2,1
    af08:	defffc04 	addi	sp,sp,-16
    af0c:	108d6b04 	addi	r2,r2,13740
    af10:	dc000115 	stw	r16,4(sp)
    af14:	14000017 	ldw	r16,0(r2)
    af18:	dc400215 	stw	r17,8(sp)
    af1c:	dfc00315 	stw	ra,12(sp)
    af20:	2023883a 	mov	r17,r4
    af24:	80000226 	beq	r16,zero,af30 <fputwc+0x2c>
    af28:	80800e17 	ldw	r2,56(r16)
    af2c:	10001026 	beq	r2,zero,af70 <fputwc+0x6c>
    af30:	2880030b 	ldhu	r2,12(r5)
    af34:	10c8000c 	andi	r3,r2,8192
    af38:	1800051e 	bne	r3,zero,af50 <fputwc+0x4c>
    af3c:	28c01917 	ldw	r3,100(r5)
    af40:	10880014 	ori	r2,r2,8192
    af44:	2880030d 	sth	r2,12(r5)
    af48:	18880014 	ori	r2,r3,8192
    af4c:	28801915 	stw	r2,100(r5)
    af50:	280d883a 	mov	r6,r5
    af54:	8009883a 	mov	r4,r16
    af58:	880b883a 	mov	r5,r17
    af5c:	dfc00317 	ldw	ra,12(sp)
    af60:	dc400217 	ldw	r17,8(sp)
    af64:	dc000117 	ldw	r16,4(sp)
    af68:	dec00404 	addi	sp,sp,16
    af6c:	000ad7c1 	jmpi	ad7c <__fputwc>
    af70:	8009883a 	mov	r4,r16
    af74:	d9400015 	stw	r5,0(sp)
    af78:	0006abc0 	call	6abc <__sinit>
    af7c:	d9400017 	ldw	r5,0(sp)
    af80:	003feb06 	br	af30 <__alt_data_end+0xff00af30>

0000af84 <_fstat_r>:
    af84:	defffd04 	addi	sp,sp,-12
    af88:	2805883a 	mov	r2,r5
    af8c:	dc000015 	stw	r16,0(sp)
    af90:	04000074 	movhi	r16,1
    af94:	dc400115 	stw	r17,4(sp)
    af98:	84144204 	addi	r16,r16,20744
    af9c:	2023883a 	mov	r17,r4
    afa0:	300b883a 	mov	r5,r6
    afa4:	1009883a 	mov	r4,r2
    afa8:	dfc00215 	stw	ra,8(sp)
    afac:	80000015 	stw	zero,0(r16)
    afb0:	000e8740 	call	e874 <fstat>
    afb4:	00ffffc4 	movi	r3,-1
    afb8:	10c00526 	beq	r2,r3,afd0 <_fstat_r+0x4c>
    afbc:	dfc00217 	ldw	ra,8(sp)
    afc0:	dc400117 	ldw	r17,4(sp)
    afc4:	dc000017 	ldw	r16,0(sp)
    afc8:	dec00304 	addi	sp,sp,12
    afcc:	f800283a 	ret
    afd0:	80c00017 	ldw	r3,0(r16)
    afd4:	183ff926 	beq	r3,zero,afbc <__alt_data_end+0xff00afbc>
    afd8:	88c00015 	stw	r3,0(r17)
    afdc:	003ff706 	br	afbc <__alt_data_end+0xff00afbc>

0000afe0 <_isatty_r>:
    afe0:	defffd04 	addi	sp,sp,-12
    afe4:	dc000015 	stw	r16,0(sp)
    afe8:	04000074 	movhi	r16,1
    afec:	dc400115 	stw	r17,4(sp)
    aff0:	84144204 	addi	r16,r16,20744
    aff4:	2023883a 	mov	r17,r4
    aff8:	2809883a 	mov	r4,r5
    affc:	dfc00215 	stw	ra,8(sp)
    b000:	80000015 	stw	zero,0(r16)
    b004:	000e9600 	call	e960 <isatty>
    b008:	00ffffc4 	movi	r3,-1
    b00c:	10c00526 	beq	r2,r3,b024 <_isatty_r+0x44>
    b010:	dfc00217 	ldw	ra,8(sp)
    b014:	dc400117 	ldw	r17,4(sp)
    b018:	dc000017 	ldw	r16,0(sp)
    b01c:	dec00304 	addi	sp,sp,12
    b020:	f800283a 	ret
    b024:	80c00017 	ldw	r3,0(r16)
    b028:	183ff926 	beq	r3,zero,b010 <__alt_data_end+0xff00b010>
    b02c:	88c00015 	stw	r3,0(r17)
    b030:	003ff706 	br	b010 <__alt_data_end+0xff00b010>

0000b034 <_lseek_r>:
    b034:	defffd04 	addi	sp,sp,-12
    b038:	2805883a 	mov	r2,r5
    b03c:	dc000015 	stw	r16,0(sp)
    b040:	04000074 	movhi	r16,1
    b044:	dc400115 	stw	r17,4(sp)
    b048:	300b883a 	mov	r5,r6
    b04c:	84144204 	addi	r16,r16,20744
    b050:	2023883a 	mov	r17,r4
    b054:	380d883a 	mov	r6,r7
    b058:	1009883a 	mov	r4,r2
    b05c:	dfc00215 	stw	ra,8(sp)
    b060:	80000015 	stw	zero,0(r16)
    b064:	000eb0c0 	call	eb0c <lseek>
    b068:	00ffffc4 	movi	r3,-1
    b06c:	10c00526 	beq	r2,r3,b084 <_lseek_r+0x50>
    b070:	dfc00217 	ldw	ra,8(sp)
    b074:	dc400117 	ldw	r17,4(sp)
    b078:	dc000017 	ldw	r16,0(sp)
    b07c:	dec00304 	addi	sp,sp,12
    b080:	f800283a 	ret
    b084:	80c00017 	ldw	r3,0(r16)
    b088:	183ff926 	beq	r3,zero,b070 <__alt_data_end+0xff00b070>
    b08c:	88c00015 	stw	r3,0(r17)
    b090:	003ff706 	br	b070 <__alt_data_end+0xff00b070>

0000b094 <_read_r>:
    b094:	defffd04 	addi	sp,sp,-12
    b098:	2805883a 	mov	r2,r5
    b09c:	dc000015 	stw	r16,0(sp)
    b0a0:	04000074 	movhi	r16,1
    b0a4:	dc400115 	stw	r17,4(sp)
    b0a8:	300b883a 	mov	r5,r6
    b0ac:	84144204 	addi	r16,r16,20744
    b0b0:	2023883a 	mov	r17,r4
    b0b4:	380d883a 	mov	r6,r7
    b0b8:	1009883a 	mov	r4,r2
    b0bc:	dfc00215 	stw	ra,8(sp)
    b0c0:	80000015 	stw	zero,0(r16)
    b0c4:	000eca00 	call	eca0 <read>
    b0c8:	00ffffc4 	movi	r3,-1
    b0cc:	10c00526 	beq	r2,r3,b0e4 <_read_r+0x50>
    b0d0:	dfc00217 	ldw	ra,8(sp)
    b0d4:	dc400117 	ldw	r17,4(sp)
    b0d8:	dc000017 	ldw	r16,0(sp)
    b0dc:	dec00304 	addi	sp,sp,12
    b0e0:	f800283a 	ret
    b0e4:	80c00017 	ldw	r3,0(r16)
    b0e8:	183ff926 	beq	r3,zero,b0d0 <__alt_data_end+0xff00b0d0>
    b0ec:	88c00015 	stw	r3,0(r17)
    b0f0:	003ff706 	br	b0d0 <__alt_data_end+0xff00b0d0>

0000b0f4 <__swbuf_r>:
    b0f4:	defffb04 	addi	sp,sp,-20
    b0f8:	dcc00315 	stw	r19,12(sp)
    b0fc:	dc800215 	stw	r18,8(sp)
    b100:	dc000015 	stw	r16,0(sp)
    b104:	dfc00415 	stw	ra,16(sp)
    b108:	dc400115 	stw	r17,4(sp)
    b10c:	2025883a 	mov	r18,r4
    b110:	2827883a 	mov	r19,r5
    b114:	3021883a 	mov	r16,r6
    b118:	20000226 	beq	r4,zero,b124 <__swbuf_r+0x30>
    b11c:	20800e17 	ldw	r2,56(r4)
    b120:	10004226 	beq	r2,zero,b22c <__swbuf_r+0x138>
    b124:	80800617 	ldw	r2,24(r16)
    b128:	8100030b 	ldhu	r4,12(r16)
    b12c:	80800215 	stw	r2,8(r16)
    b130:	2080020c 	andi	r2,r4,8
    b134:	10003626 	beq	r2,zero,b210 <__swbuf_r+0x11c>
    b138:	80c00417 	ldw	r3,16(r16)
    b13c:	18003426 	beq	r3,zero,b210 <__swbuf_r+0x11c>
    b140:	2088000c 	andi	r2,r4,8192
    b144:	9c403fcc 	andi	r17,r19,255
    b148:	10001a26 	beq	r2,zero,b1b4 <__swbuf_r+0xc0>
    b14c:	80800017 	ldw	r2,0(r16)
    b150:	81000517 	ldw	r4,20(r16)
    b154:	10c7c83a 	sub	r3,r2,r3
    b158:	1900200e 	bge	r3,r4,b1dc <__swbuf_r+0xe8>
    b15c:	18c00044 	addi	r3,r3,1
    b160:	81000217 	ldw	r4,8(r16)
    b164:	11400044 	addi	r5,r2,1
    b168:	81400015 	stw	r5,0(r16)
    b16c:	213fffc4 	addi	r4,r4,-1
    b170:	81000215 	stw	r4,8(r16)
    b174:	14c00005 	stb	r19,0(r2)
    b178:	80800517 	ldw	r2,20(r16)
    b17c:	10c01e26 	beq	r2,r3,b1f8 <__swbuf_r+0x104>
    b180:	8080030b 	ldhu	r2,12(r16)
    b184:	1080004c 	andi	r2,r2,1
    b188:	10000226 	beq	r2,zero,b194 <__swbuf_r+0xa0>
    b18c:	00800284 	movi	r2,10
    b190:	88801926 	beq	r17,r2,b1f8 <__swbuf_r+0x104>
    b194:	8805883a 	mov	r2,r17
    b198:	dfc00417 	ldw	ra,16(sp)
    b19c:	dcc00317 	ldw	r19,12(sp)
    b1a0:	dc800217 	ldw	r18,8(sp)
    b1a4:	dc400117 	ldw	r17,4(sp)
    b1a8:	dc000017 	ldw	r16,0(sp)
    b1ac:	dec00504 	addi	sp,sp,20
    b1b0:	f800283a 	ret
    b1b4:	81401917 	ldw	r5,100(r16)
    b1b8:	00b7ffc4 	movi	r2,-8193
    b1bc:	21080014 	ori	r4,r4,8192
    b1c0:	2884703a 	and	r2,r5,r2
    b1c4:	80801915 	stw	r2,100(r16)
    b1c8:	80800017 	ldw	r2,0(r16)
    b1cc:	8100030d 	sth	r4,12(r16)
    b1d0:	81000517 	ldw	r4,20(r16)
    b1d4:	10c7c83a 	sub	r3,r2,r3
    b1d8:	193fe016 	blt	r3,r4,b15c <__alt_data_end+0xff00b15c>
    b1dc:	800b883a 	mov	r5,r16
    b1e0:	9009883a 	mov	r4,r18
    b1e4:	00066e00 	call	66e0 <_fflush_r>
    b1e8:	1000071e 	bne	r2,zero,b208 <__swbuf_r+0x114>
    b1ec:	80800017 	ldw	r2,0(r16)
    b1f0:	00c00044 	movi	r3,1
    b1f4:	003fda06 	br	b160 <__alt_data_end+0xff00b160>
    b1f8:	800b883a 	mov	r5,r16
    b1fc:	9009883a 	mov	r4,r18
    b200:	00066e00 	call	66e0 <_fflush_r>
    b204:	103fe326 	beq	r2,zero,b194 <__alt_data_end+0xff00b194>
    b208:	00bfffc4 	movi	r2,-1
    b20c:	003fe206 	br	b198 <__alt_data_end+0xff00b198>
    b210:	800b883a 	mov	r5,r16
    b214:	9009883a 	mov	r4,r18
    b218:	0004ae80 	call	4ae8 <__swsetup_r>
    b21c:	103ffa1e 	bne	r2,zero,b208 <__alt_data_end+0xff00b208>
    b220:	8100030b 	ldhu	r4,12(r16)
    b224:	80c00417 	ldw	r3,16(r16)
    b228:	003fc506 	br	b140 <__alt_data_end+0xff00b140>
    b22c:	0006abc0 	call	6abc <__sinit>
    b230:	003fbc06 	br	b124 <__alt_data_end+0xff00b124>

0000b234 <__swbuf>:
    b234:	00800074 	movhi	r2,1
    b238:	108d6b04 	addi	r2,r2,13740
    b23c:	280d883a 	mov	r6,r5
    b240:	200b883a 	mov	r5,r4
    b244:	11000017 	ldw	r4,0(r2)
    b248:	000b0f41 	jmpi	b0f4 <__swbuf_r>

0000b24c <_wcrtomb_r>:
    b24c:	defff604 	addi	sp,sp,-40
    b250:	00800074 	movhi	r2,1
    b254:	dc800815 	stw	r18,32(sp)
    b258:	dc400715 	stw	r17,28(sp)
    b25c:	dc000615 	stw	r16,24(sp)
    b260:	108d6d04 	addi	r2,r2,13748
    b264:	dfc00915 	stw	ra,36(sp)
    b268:	2021883a 	mov	r16,r4
    b26c:	3823883a 	mov	r17,r7
    b270:	14800017 	ldw	r18,0(r2)
    b274:	28001426 	beq	r5,zero,b2c8 <_wcrtomb_r+0x7c>
    b278:	d9400415 	stw	r5,16(sp)
    b27c:	d9800515 	stw	r6,20(sp)
    b280:	00076000 	call	7600 <__locale_charset>
    b284:	d9800517 	ldw	r6,20(sp)
    b288:	d9400417 	ldw	r5,16(sp)
    b28c:	100f883a 	mov	r7,r2
    b290:	dc400015 	stw	r17,0(sp)
    b294:	8009883a 	mov	r4,r16
    b298:	903ee83a 	callr	r18
    b29c:	00ffffc4 	movi	r3,-1
    b2a0:	10c0031e 	bne	r2,r3,b2b0 <_wcrtomb_r+0x64>
    b2a4:	88000015 	stw	zero,0(r17)
    b2a8:	00c02284 	movi	r3,138
    b2ac:	80c00015 	stw	r3,0(r16)
    b2b0:	dfc00917 	ldw	ra,36(sp)
    b2b4:	dc800817 	ldw	r18,32(sp)
    b2b8:	dc400717 	ldw	r17,28(sp)
    b2bc:	dc000617 	ldw	r16,24(sp)
    b2c0:	dec00a04 	addi	sp,sp,40
    b2c4:	f800283a 	ret
    b2c8:	00076000 	call	7600 <__locale_charset>
    b2cc:	100f883a 	mov	r7,r2
    b2d0:	dc400015 	stw	r17,0(sp)
    b2d4:	000d883a 	mov	r6,zero
    b2d8:	d9400104 	addi	r5,sp,4
    b2dc:	8009883a 	mov	r4,r16
    b2e0:	903ee83a 	callr	r18
    b2e4:	003fed06 	br	b29c <__alt_data_end+0xff00b29c>

0000b2e8 <wcrtomb>:
    b2e8:	defff604 	addi	sp,sp,-40
    b2ec:	00800074 	movhi	r2,1
    b2f0:	dc800615 	stw	r18,24(sp)
    b2f4:	dc400515 	stw	r17,20(sp)
    b2f8:	108d6b04 	addi	r2,r2,13740
    b2fc:	dfc00915 	stw	ra,36(sp)
    b300:	dd000815 	stw	r20,32(sp)
    b304:	dcc00715 	stw	r19,28(sp)
    b308:	dc000415 	stw	r16,16(sp)
    b30c:	3025883a 	mov	r18,r6
    b310:	14400017 	ldw	r17,0(r2)
    b314:	20001926 	beq	r4,zero,b37c <wcrtomb+0x94>
    b318:	00800074 	movhi	r2,1
    b31c:	108d6d04 	addi	r2,r2,13748
    b320:	15000017 	ldw	r20,0(r2)
    b324:	2021883a 	mov	r16,r4
    b328:	2827883a 	mov	r19,r5
    b32c:	00076000 	call	7600 <__locale_charset>
    b330:	100f883a 	mov	r7,r2
    b334:	dc800015 	stw	r18,0(sp)
    b338:	980d883a 	mov	r6,r19
    b33c:	800b883a 	mov	r5,r16
    b340:	8809883a 	mov	r4,r17
    b344:	a03ee83a 	callr	r20
    b348:	00ffffc4 	movi	r3,-1
    b34c:	10c0031e 	bne	r2,r3,b35c <wcrtomb+0x74>
    b350:	90000015 	stw	zero,0(r18)
    b354:	00c02284 	movi	r3,138
    b358:	88c00015 	stw	r3,0(r17)
    b35c:	dfc00917 	ldw	ra,36(sp)
    b360:	dd000817 	ldw	r20,32(sp)
    b364:	dcc00717 	ldw	r19,28(sp)
    b368:	dc800617 	ldw	r18,24(sp)
    b36c:	dc400517 	ldw	r17,20(sp)
    b370:	dc000417 	ldw	r16,16(sp)
    b374:	dec00a04 	addi	sp,sp,40
    b378:	f800283a 	ret
    b37c:	00800074 	movhi	r2,1
    b380:	108d6d04 	addi	r2,r2,13748
    b384:	14000017 	ldw	r16,0(r2)
    b388:	00076000 	call	7600 <__locale_charset>
    b38c:	100f883a 	mov	r7,r2
    b390:	dc800015 	stw	r18,0(sp)
    b394:	000d883a 	mov	r6,zero
    b398:	d9400104 	addi	r5,sp,4
    b39c:	8809883a 	mov	r4,r17
    b3a0:	803ee83a 	callr	r16
    b3a4:	003fe806 	br	b348 <__alt_data_end+0xff00b348>

0000b3a8 <__ascii_wctomb>:
    b3a8:	28000526 	beq	r5,zero,b3c0 <__ascii_wctomb+0x18>
    b3ac:	00803fc4 	movi	r2,255
    b3b0:	11800536 	bltu	r2,r6,b3c8 <__ascii_wctomb+0x20>
    b3b4:	29800005 	stb	r6,0(r5)
    b3b8:	00800044 	movi	r2,1
    b3bc:	f800283a 	ret
    b3c0:	0005883a 	mov	r2,zero
    b3c4:	f800283a 	ret
    b3c8:	00802284 	movi	r2,138
    b3cc:	20800015 	stw	r2,0(r4)
    b3d0:	00bfffc4 	movi	r2,-1
    b3d4:	f800283a 	ret

0000b3d8 <_wctomb_r>:
    b3d8:	00800074 	movhi	r2,1
    b3dc:	defff904 	addi	sp,sp,-28
    b3e0:	108d6d04 	addi	r2,r2,13748
    b3e4:	dfc00615 	stw	ra,24(sp)
    b3e8:	dc400515 	stw	r17,20(sp)
    b3ec:	dc000415 	stw	r16,16(sp)
    b3f0:	3823883a 	mov	r17,r7
    b3f4:	14000017 	ldw	r16,0(r2)
    b3f8:	d9000115 	stw	r4,4(sp)
    b3fc:	d9400215 	stw	r5,8(sp)
    b400:	d9800315 	stw	r6,12(sp)
    b404:	00076000 	call	7600 <__locale_charset>
    b408:	d9800317 	ldw	r6,12(sp)
    b40c:	d9400217 	ldw	r5,8(sp)
    b410:	d9000117 	ldw	r4,4(sp)
    b414:	100f883a 	mov	r7,r2
    b418:	dc400015 	stw	r17,0(sp)
    b41c:	803ee83a 	callr	r16
    b420:	dfc00617 	ldw	ra,24(sp)
    b424:	dc400517 	ldw	r17,20(sp)
    b428:	dc000417 	ldw	r16,16(sp)
    b42c:	dec00704 	addi	sp,sp,28
    b430:	f800283a 	ret

0000b434 <__udivdi3>:
    b434:	defff504 	addi	sp,sp,-44
    b438:	dcc00415 	stw	r19,16(sp)
    b43c:	dc000115 	stw	r16,4(sp)
    b440:	dfc00a15 	stw	ra,40(sp)
    b444:	df000915 	stw	fp,36(sp)
    b448:	ddc00815 	stw	r23,32(sp)
    b44c:	dd800715 	stw	r22,28(sp)
    b450:	dd400615 	stw	r21,24(sp)
    b454:	dd000515 	stw	r20,20(sp)
    b458:	dc800315 	stw	r18,12(sp)
    b45c:	dc400215 	stw	r17,8(sp)
    b460:	2027883a 	mov	r19,r4
    b464:	2821883a 	mov	r16,r5
    b468:	3800411e 	bne	r7,zero,b570 <__udivdi3+0x13c>
    b46c:	3023883a 	mov	r17,r6
    b470:	2025883a 	mov	r18,r4
    b474:	2980522e 	bgeu	r5,r6,b5c0 <__udivdi3+0x18c>
    b478:	00bfffd4 	movui	r2,65535
    b47c:	282d883a 	mov	r22,r5
    b480:	1180a836 	bltu	r2,r6,b724 <__udivdi3+0x2f0>
    b484:	00803fc4 	movi	r2,255
    b488:	1185803a 	cmpltu	r2,r2,r6
    b48c:	100490fa 	slli	r2,r2,3
    b490:	3086d83a 	srl	r3,r6,r2
    b494:	01000074 	movhi	r4,1
    b498:	21067004 	addi	r4,r4,6592
    b49c:	20c7883a 	add	r3,r4,r3
    b4a0:	18c00003 	ldbu	r3,0(r3)
    b4a4:	1885883a 	add	r2,r3,r2
    b4a8:	00c00804 	movi	r3,32
    b4ac:	1887c83a 	sub	r3,r3,r2
    b4b0:	18000526 	beq	r3,zero,b4c8 <__udivdi3+0x94>
    b4b4:	80e0983a 	sll	r16,r16,r3
    b4b8:	9884d83a 	srl	r2,r19,r2
    b4bc:	30e2983a 	sll	r17,r6,r3
    b4c0:	98e4983a 	sll	r18,r19,r3
    b4c4:	142cb03a 	or	r22,r2,r16
    b4c8:	882ad43a 	srli	r21,r17,16
    b4cc:	b009883a 	mov	r4,r22
    b4d0:	8d3fffcc 	andi	r20,r17,65535
    b4d4:	a80b883a 	mov	r5,r21
    b4d8:	000c0400 	call	c040 <__umodsi3>
    b4dc:	b009883a 	mov	r4,r22
    b4e0:	a80b883a 	mov	r5,r21
    b4e4:	1027883a 	mov	r19,r2
    b4e8:	000bfdc0 	call	bfdc <__udivsi3>
    b4ec:	102d883a 	mov	r22,r2
    b4f0:	9826943a 	slli	r19,r19,16
    b4f4:	9004d43a 	srli	r2,r18,16
    b4f8:	a5a1383a 	mul	r16,r20,r22
    b4fc:	14c4b03a 	or	r2,r2,r19
    b500:	1400052e 	bgeu	r2,r16,b518 <__udivdi3+0xe4>
    b504:	1445883a 	add	r2,r2,r17
    b508:	b0ffffc4 	addi	r3,r22,-1
    b50c:	14400136 	bltu	r2,r17,b514 <__udivdi3+0xe0>
    b510:	14012336 	bltu	r2,r16,b9a0 <__udivdi3+0x56c>
    b514:	182d883a 	mov	r22,r3
    b518:	1421c83a 	sub	r16,r2,r16
    b51c:	a80b883a 	mov	r5,r21
    b520:	8009883a 	mov	r4,r16
    b524:	000c0400 	call	c040 <__umodsi3>
    b528:	1027883a 	mov	r19,r2
    b52c:	a80b883a 	mov	r5,r21
    b530:	8009883a 	mov	r4,r16
    b534:	000bfdc0 	call	bfdc <__udivsi3>
    b538:	9826943a 	slli	r19,r19,16
    b53c:	a0a9383a 	mul	r20,r20,r2
    b540:	94bfffcc 	andi	r18,r18,65535
    b544:	94e4b03a 	or	r18,r18,r19
    b548:	9500052e 	bgeu	r18,r20,b560 <__udivdi3+0x12c>
    b54c:	8ca5883a 	add	r18,r17,r18
    b550:	10ffffc4 	addi	r3,r2,-1
    b554:	9440f136 	bltu	r18,r17,b91c <__udivdi3+0x4e8>
    b558:	9500f02e 	bgeu	r18,r20,b91c <__udivdi3+0x4e8>
    b55c:	10bfff84 	addi	r2,r2,-2
    b560:	b00c943a 	slli	r6,r22,16
    b564:	0007883a 	mov	r3,zero
    b568:	3084b03a 	or	r2,r6,r2
    b56c:	00005906 	br	b6d4 <__udivdi3+0x2a0>
    b570:	29c05636 	bltu	r5,r7,b6cc <__udivdi3+0x298>
    b574:	00bfffd4 	movui	r2,65535
    b578:	11c0622e 	bgeu	r2,r7,b704 <__udivdi3+0x2d0>
    b57c:	00804034 	movhi	r2,256
    b580:	10bfffc4 	addi	r2,r2,-1
    b584:	11c0ee36 	bltu	r2,r7,b940 <__udivdi3+0x50c>
    b588:	00800404 	movi	r2,16
    b58c:	3886d83a 	srl	r3,r7,r2
    b590:	01000074 	movhi	r4,1
    b594:	21067004 	addi	r4,r4,6592
    b598:	20c7883a 	add	r3,r4,r3
    b59c:	18c00003 	ldbu	r3,0(r3)
    b5a0:	05400804 	movi	r21,32
    b5a4:	1885883a 	add	r2,r3,r2
    b5a8:	a8abc83a 	sub	r21,r21,r2
    b5ac:	a800621e 	bne	r21,zero,b738 <__udivdi3+0x304>
    b5b0:	3c00e936 	bltu	r7,r16,b958 <__udivdi3+0x524>
    b5b4:	9985403a 	cmpgeu	r2,r19,r6
    b5b8:	0007883a 	mov	r3,zero
    b5bc:	00004506 	br	b6d4 <__udivdi3+0x2a0>
    b5c0:	3000041e 	bne	r6,zero,b5d4 <__udivdi3+0x1a0>
    b5c4:	000b883a 	mov	r5,zero
    b5c8:	01000044 	movi	r4,1
    b5cc:	000bfdc0 	call	bfdc <__udivsi3>
    b5d0:	1023883a 	mov	r17,r2
    b5d4:	00bfffd4 	movui	r2,65535
    b5d8:	14404e2e 	bgeu	r2,r17,b714 <__udivdi3+0x2e0>
    b5dc:	00804034 	movhi	r2,256
    b5e0:	10bfffc4 	addi	r2,r2,-1
    b5e4:	1440d836 	bltu	r2,r17,b948 <__udivdi3+0x514>
    b5e8:	00800404 	movi	r2,16
    b5ec:	8886d83a 	srl	r3,r17,r2
    b5f0:	01000074 	movhi	r4,1
    b5f4:	21067004 	addi	r4,r4,6592
    b5f8:	20c7883a 	add	r3,r4,r3
    b5fc:	18c00003 	ldbu	r3,0(r3)
    b600:	1885883a 	add	r2,r3,r2
    b604:	00c00804 	movi	r3,32
    b608:	1887c83a 	sub	r3,r3,r2
    b60c:	18008f1e 	bne	r3,zero,b84c <__udivdi3+0x418>
    b610:	882ad43a 	srli	r21,r17,16
    b614:	8461c83a 	sub	r16,r16,r17
    b618:	8d3fffcc 	andi	r20,r17,65535
    b61c:	00c00044 	movi	r3,1
    b620:	8009883a 	mov	r4,r16
    b624:	a80b883a 	mov	r5,r21
    b628:	d8c00015 	stw	r3,0(sp)
    b62c:	000c0400 	call	c040 <__umodsi3>
    b630:	8009883a 	mov	r4,r16
    b634:	a80b883a 	mov	r5,r21
    b638:	1027883a 	mov	r19,r2
    b63c:	000bfdc0 	call	bfdc <__udivsi3>
    b640:	9826943a 	slli	r19,r19,16
    b644:	9008d43a 	srli	r4,r18,16
    b648:	1521383a 	mul	r16,r2,r20
    b64c:	102d883a 	mov	r22,r2
    b650:	24c8b03a 	or	r4,r4,r19
    b654:	d8c00017 	ldw	r3,0(sp)
    b658:	2400052e 	bgeu	r4,r16,b670 <__udivdi3+0x23c>
    b65c:	2449883a 	add	r4,r4,r17
    b660:	b0bfffc4 	addi	r2,r22,-1
    b664:	24400136 	bltu	r4,r17,b66c <__udivdi3+0x238>
    b668:	2400ca36 	bltu	r4,r16,b994 <__udivdi3+0x560>
    b66c:	102d883a 	mov	r22,r2
    b670:	2421c83a 	sub	r16,r4,r16
    b674:	a80b883a 	mov	r5,r21
    b678:	8009883a 	mov	r4,r16
    b67c:	d8c00015 	stw	r3,0(sp)
    b680:	000c0400 	call	c040 <__umodsi3>
    b684:	1027883a 	mov	r19,r2
    b688:	a80b883a 	mov	r5,r21
    b68c:	8009883a 	mov	r4,r16
    b690:	000bfdc0 	call	bfdc <__udivsi3>
    b694:	9826943a 	slli	r19,r19,16
    b698:	1529383a 	mul	r20,r2,r20
    b69c:	94bfffcc 	andi	r18,r18,65535
    b6a0:	94e4b03a 	or	r18,r18,r19
    b6a4:	d8c00017 	ldw	r3,0(sp)
    b6a8:	9500052e 	bgeu	r18,r20,b6c0 <__udivdi3+0x28c>
    b6ac:	8ca5883a 	add	r18,r17,r18
    b6b0:	113fffc4 	addi	r4,r2,-1
    b6b4:	94409736 	bltu	r18,r17,b914 <__udivdi3+0x4e0>
    b6b8:	9500962e 	bgeu	r18,r20,b914 <__udivdi3+0x4e0>
    b6bc:	10bfff84 	addi	r2,r2,-2
    b6c0:	b00c943a 	slli	r6,r22,16
    b6c4:	3084b03a 	or	r2,r6,r2
    b6c8:	00000206 	br	b6d4 <__udivdi3+0x2a0>
    b6cc:	0007883a 	mov	r3,zero
    b6d0:	0005883a 	mov	r2,zero
    b6d4:	dfc00a17 	ldw	ra,40(sp)
    b6d8:	df000917 	ldw	fp,36(sp)
    b6dc:	ddc00817 	ldw	r23,32(sp)
    b6e0:	dd800717 	ldw	r22,28(sp)
    b6e4:	dd400617 	ldw	r21,24(sp)
    b6e8:	dd000517 	ldw	r20,20(sp)
    b6ec:	dcc00417 	ldw	r19,16(sp)
    b6f0:	dc800317 	ldw	r18,12(sp)
    b6f4:	dc400217 	ldw	r17,8(sp)
    b6f8:	dc000117 	ldw	r16,4(sp)
    b6fc:	dec00b04 	addi	sp,sp,44
    b700:	f800283a 	ret
    b704:	00803fc4 	movi	r2,255
    b708:	11c5803a 	cmpltu	r2,r2,r7
    b70c:	100490fa 	slli	r2,r2,3
    b710:	003f9e06 	br	b58c <__alt_data_end+0xff00b58c>
    b714:	00803fc4 	movi	r2,255
    b718:	1445803a 	cmpltu	r2,r2,r17
    b71c:	100490fa 	slli	r2,r2,3
    b720:	003fb206 	br	b5ec <__alt_data_end+0xff00b5ec>
    b724:	00804034 	movhi	r2,256
    b728:	10bfffc4 	addi	r2,r2,-1
    b72c:	11808836 	bltu	r2,r6,b950 <__udivdi3+0x51c>
    b730:	00800404 	movi	r2,16
    b734:	003f5606 	br	b490 <__alt_data_end+0xff00b490>
    b738:	30aed83a 	srl	r23,r6,r2
    b73c:	3d4e983a 	sll	r7,r7,r21
    b740:	80acd83a 	srl	r22,r16,r2
    b744:	9884d83a 	srl	r2,r19,r2
    b748:	3deeb03a 	or	r23,r7,r23
    b74c:	b824d43a 	srli	r18,r23,16
    b750:	8560983a 	sll	r16,r16,r21
    b754:	b009883a 	mov	r4,r22
    b758:	900b883a 	mov	r5,r18
    b75c:	3568983a 	sll	r20,r6,r21
    b760:	1420b03a 	or	r16,r2,r16
    b764:	000c0400 	call	c040 <__umodsi3>
    b768:	b009883a 	mov	r4,r22
    b76c:	900b883a 	mov	r5,r18
    b770:	1023883a 	mov	r17,r2
    b774:	000bfdc0 	call	bfdc <__udivsi3>
    b778:	8808943a 	slli	r4,r17,16
    b77c:	bf3fffcc 	andi	fp,r23,65535
    b780:	8006d43a 	srli	r3,r16,16
    b784:	e0a3383a 	mul	r17,fp,r2
    b788:	100d883a 	mov	r6,r2
    b78c:	1906b03a 	or	r3,r3,r4
    b790:	1c40042e 	bgeu	r3,r17,b7a4 <__udivdi3+0x370>
    b794:	1dc7883a 	add	r3,r3,r23
    b798:	10bfffc4 	addi	r2,r2,-1
    b79c:	1dc0752e 	bgeu	r3,r23,b974 <__udivdi3+0x540>
    b7a0:	100d883a 	mov	r6,r2
    b7a4:	1c63c83a 	sub	r17,r3,r17
    b7a8:	900b883a 	mov	r5,r18
    b7ac:	8809883a 	mov	r4,r17
    b7b0:	d9800015 	stw	r6,0(sp)
    b7b4:	000c0400 	call	c040 <__umodsi3>
    b7b8:	102d883a 	mov	r22,r2
    b7bc:	8809883a 	mov	r4,r17
    b7c0:	900b883a 	mov	r5,r18
    b7c4:	000bfdc0 	call	bfdc <__udivsi3>
    b7c8:	b02c943a 	slli	r22,r22,16
    b7cc:	e089383a 	mul	r4,fp,r2
    b7d0:	843fffcc 	andi	r16,r16,65535
    b7d4:	85a0b03a 	or	r16,r16,r22
    b7d8:	d9800017 	ldw	r6,0(sp)
    b7dc:	8100042e 	bgeu	r16,r4,b7f0 <__udivdi3+0x3bc>
    b7e0:	85e1883a 	add	r16,r16,r23
    b7e4:	10ffffc4 	addi	r3,r2,-1
    b7e8:	85c05e2e 	bgeu	r16,r23,b964 <__udivdi3+0x530>
    b7ec:	1805883a 	mov	r2,r3
    b7f0:	300c943a 	slli	r6,r6,16
    b7f4:	a17fffcc 	andi	r5,r20,65535
    b7f8:	a028d43a 	srli	r20,r20,16
    b7fc:	3084b03a 	or	r2,r6,r2
    b800:	10ffffcc 	andi	r3,r2,65535
    b804:	100cd43a 	srli	r6,r2,16
    b808:	194f383a 	mul	r7,r3,r5
    b80c:	1d07383a 	mul	r3,r3,r20
    b810:	314b383a 	mul	r5,r6,r5
    b814:	3810d43a 	srli	r8,r7,16
    b818:	8121c83a 	sub	r16,r16,r4
    b81c:	1947883a 	add	r3,r3,r5
    b820:	40c7883a 	add	r3,r8,r3
    b824:	350d383a 	mul	r6,r6,r20
    b828:	1940022e 	bgeu	r3,r5,b834 <__udivdi3+0x400>
    b82c:	01000074 	movhi	r4,1
    b830:	310d883a 	add	r6,r6,r4
    b834:	1828d43a 	srli	r20,r3,16
    b838:	a18d883a 	add	r6,r20,r6
    b83c:	81803e36 	bltu	r16,r6,b938 <__udivdi3+0x504>
    b840:	81803826 	beq	r16,r6,b924 <__udivdi3+0x4f0>
    b844:	0007883a 	mov	r3,zero
    b848:	003fa206 	br	b6d4 <__alt_data_end+0xff00b6d4>
    b84c:	88e2983a 	sll	r17,r17,r3
    b850:	80a8d83a 	srl	r20,r16,r2
    b854:	80e0983a 	sll	r16,r16,r3
    b858:	882ad43a 	srli	r21,r17,16
    b85c:	9884d83a 	srl	r2,r19,r2
    b860:	a009883a 	mov	r4,r20
    b864:	a80b883a 	mov	r5,r21
    b868:	142eb03a 	or	r23,r2,r16
    b86c:	98e4983a 	sll	r18,r19,r3
    b870:	000c0400 	call	c040 <__umodsi3>
    b874:	a009883a 	mov	r4,r20
    b878:	a80b883a 	mov	r5,r21
    b87c:	1021883a 	mov	r16,r2
    b880:	000bfdc0 	call	bfdc <__udivsi3>
    b884:	1039883a 	mov	fp,r2
    b888:	8d3fffcc 	andi	r20,r17,65535
    b88c:	8020943a 	slli	r16,r16,16
    b890:	b804d43a 	srli	r2,r23,16
    b894:	a72d383a 	mul	r22,r20,fp
    b898:	1404b03a 	or	r2,r2,r16
    b89c:	1580062e 	bgeu	r2,r22,b8b8 <__udivdi3+0x484>
    b8a0:	1445883a 	add	r2,r2,r17
    b8a4:	e0ffffc4 	addi	r3,fp,-1
    b8a8:	14403836 	bltu	r2,r17,b98c <__udivdi3+0x558>
    b8ac:	1580372e 	bgeu	r2,r22,b98c <__udivdi3+0x558>
    b8b0:	e73fff84 	addi	fp,fp,-2
    b8b4:	1445883a 	add	r2,r2,r17
    b8b8:	15adc83a 	sub	r22,r2,r22
    b8bc:	a80b883a 	mov	r5,r21
    b8c0:	b009883a 	mov	r4,r22
    b8c4:	000c0400 	call	c040 <__umodsi3>
    b8c8:	1027883a 	mov	r19,r2
    b8cc:	b009883a 	mov	r4,r22
    b8d0:	a80b883a 	mov	r5,r21
    b8d4:	000bfdc0 	call	bfdc <__udivsi3>
    b8d8:	9826943a 	slli	r19,r19,16
    b8dc:	a0a1383a 	mul	r16,r20,r2
    b8e0:	b93fffcc 	andi	r4,r23,65535
    b8e4:	24c8b03a 	or	r4,r4,r19
    b8e8:	2400062e 	bgeu	r4,r16,b904 <__udivdi3+0x4d0>
    b8ec:	2449883a 	add	r4,r4,r17
    b8f0:	10ffffc4 	addi	r3,r2,-1
    b8f4:	24402336 	bltu	r4,r17,b984 <__udivdi3+0x550>
    b8f8:	2400222e 	bgeu	r4,r16,b984 <__udivdi3+0x550>
    b8fc:	10bfff84 	addi	r2,r2,-2
    b900:	2449883a 	add	r4,r4,r17
    b904:	e038943a 	slli	fp,fp,16
    b908:	2421c83a 	sub	r16,r4,r16
    b90c:	e086b03a 	or	r3,fp,r2
    b910:	003f4306 	br	b620 <__alt_data_end+0xff00b620>
    b914:	2005883a 	mov	r2,r4
    b918:	003f6906 	br	b6c0 <__alt_data_end+0xff00b6c0>
    b91c:	1805883a 	mov	r2,r3
    b920:	003f0f06 	br	b560 <__alt_data_end+0xff00b560>
    b924:	1806943a 	slli	r3,r3,16
    b928:	9d66983a 	sll	r19,r19,r21
    b92c:	39ffffcc 	andi	r7,r7,65535
    b930:	19c7883a 	add	r3,r3,r7
    b934:	98ffc32e 	bgeu	r19,r3,b844 <__alt_data_end+0xff00b844>
    b938:	10bfffc4 	addi	r2,r2,-1
    b93c:	003fc106 	br	b844 <__alt_data_end+0xff00b844>
    b940:	00800604 	movi	r2,24
    b944:	003f1106 	br	b58c <__alt_data_end+0xff00b58c>
    b948:	00800604 	movi	r2,24
    b94c:	003f2706 	br	b5ec <__alt_data_end+0xff00b5ec>
    b950:	00800604 	movi	r2,24
    b954:	003ece06 	br	b490 <__alt_data_end+0xff00b490>
    b958:	0007883a 	mov	r3,zero
    b95c:	00800044 	movi	r2,1
    b960:	003f5c06 	br	b6d4 <__alt_data_end+0xff00b6d4>
    b964:	813fa12e 	bgeu	r16,r4,b7ec <__alt_data_end+0xff00b7ec>
    b968:	10bfff84 	addi	r2,r2,-2
    b96c:	85e1883a 	add	r16,r16,r23
    b970:	003f9f06 	br	b7f0 <__alt_data_end+0xff00b7f0>
    b974:	1c7f8a2e 	bgeu	r3,r17,b7a0 <__alt_data_end+0xff00b7a0>
    b978:	31bfff84 	addi	r6,r6,-2
    b97c:	1dc7883a 	add	r3,r3,r23
    b980:	003f8806 	br	b7a4 <__alt_data_end+0xff00b7a4>
    b984:	1805883a 	mov	r2,r3
    b988:	003fde06 	br	b904 <__alt_data_end+0xff00b904>
    b98c:	1839883a 	mov	fp,r3
    b990:	003fc906 	br	b8b8 <__alt_data_end+0xff00b8b8>
    b994:	b5bfff84 	addi	r22,r22,-2
    b998:	2449883a 	add	r4,r4,r17
    b99c:	003f3406 	br	b670 <__alt_data_end+0xff00b670>
    b9a0:	b5bfff84 	addi	r22,r22,-2
    b9a4:	1445883a 	add	r2,r2,r17
    b9a8:	003edb06 	br	b518 <__alt_data_end+0xff00b518>

0000b9ac <__umoddi3>:
    b9ac:	defff404 	addi	sp,sp,-48
    b9b0:	df000a15 	stw	fp,40(sp)
    b9b4:	dc400315 	stw	r17,12(sp)
    b9b8:	dc000215 	stw	r16,8(sp)
    b9bc:	dfc00b15 	stw	ra,44(sp)
    b9c0:	ddc00915 	stw	r23,36(sp)
    b9c4:	dd800815 	stw	r22,32(sp)
    b9c8:	dd400715 	stw	r21,28(sp)
    b9cc:	dd000615 	stw	r20,24(sp)
    b9d0:	dcc00515 	stw	r19,20(sp)
    b9d4:	dc800415 	stw	r18,16(sp)
    b9d8:	2021883a 	mov	r16,r4
    b9dc:	2823883a 	mov	r17,r5
    b9e0:	2839883a 	mov	fp,r5
    b9e4:	38003c1e 	bne	r7,zero,bad8 <__umoddi3+0x12c>
    b9e8:	3027883a 	mov	r19,r6
    b9ec:	2029883a 	mov	r20,r4
    b9f0:	2980512e 	bgeu	r5,r6,bb38 <__umoddi3+0x18c>
    b9f4:	00bfffd4 	movui	r2,65535
    b9f8:	11809a36 	bltu	r2,r6,bc64 <__umoddi3+0x2b8>
    b9fc:	01003fc4 	movi	r4,255
    ba00:	2189803a 	cmpltu	r4,r4,r6
    ba04:	200890fa 	slli	r4,r4,3
    ba08:	3104d83a 	srl	r2,r6,r4
    ba0c:	00c00074 	movhi	r3,1
    ba10:	18c67004 	addi	r3,r3,6592
    ba14:	1885883a 	add	r2,r3,r2
    ba18:	10c00003 	ldbu	r3,0(r2)
    ba1c:	00800804 	movi	r2,32
    ba20:	1909883a 	add	r4,r3,r4
    ba24:	1125c83a 	sub	r18,r2,r4
    ba28:	90000526 	beq	r18,zero,ba40 <__umoddi3+0x94>
    ba2c:	8ca2983a 	sll	r17,r17,r18
    ba30:	8108d83a 	srl	r4,r16,r4
    ba34:	34a6983a 	sll	r19,r6,r18
    ba38:	84a8983a 	sll	r20,r16,r18
    ba3c:	2478b03a 	or	fp,r4,r17
    ba40:	982ed43a 	srli	r23,r19,16
    ba44:	e009883a 	mov	r4,fp
    ba48:	9dbfffcc 	andi	r22,r19,65535
    ba4c:	b80b883a 	mov	r5,r23
    ba50:	000c0400 	call	c040 <__umodsi3>
    ba54:	e009883a 	mov	r4,fp
    ba58:	b80b883a 	mov	r5,r23
    ba5c:	102b883a 	mov	r21,r2
    ba60:	000bfdc0 	call	bfdc <__udivsi3>
    ba64:	a806943a 	slli	r3,r21,16
    ba68:	a008d43a 	srli	r4,r20,16
    ba6c:	b085383a 	mul	r2,r22,r2
    ba70:	20c8b03a 	or	r4,r4,r3
    ba74:	2080032e 	bgeu	r4,r2,ba84 <__umoddi3+0xd8>
    ba78:	24c9883a 	add	r4,r4,r19
    ba7c:	24c00136 	bltu	r4,r19,ba84 <__umoddi3+0xd8>
    ba80:	20811036 	bltu	r4,r2,bec4 <__umoddi3+0x518>
    ba84:	20abc83a 	sub	r21,r4,r2
    ba88:	b80b883a 	mov	r5,r23
    ba8c:	a809883a 	mov	r4,r21
    ba90:	000c0400 	call	c040 <__umodsi3>
    ba94:	1023883a 	mov	r17,r2
    ba98:	b80b883a 	mov	r5,r23
    ba9c:	a809883a 	mov	r4,r21
    baa0:	000bfdc0 	call	bfdc <__udivsi3>
    baa4:	8822943a 	slli	r17,r17,16
    baa8:	b085383a 	mul	r2,r22,r2
    baac:	a0ffffcc 	andi	r3,r20,65535
    bab0:	1c46b03a 	or	r3,r3,r17
    bab4:	1880042e 	bgeu	r3,r2,bac8 <__umoddi3+0x11c>
    bab8:	1cc7883a 	add	r3,r3,r19
    babc:	1cc00236 	bltu	r3,r19,bac8 <__umoddi3+0x11c>
    bac0:	1880012e 	bgeu	r3,r2,bac8 <__umoddi3+0x11c>
    bac4:	1cc7883a 	add	r3,r3,r19
    bac8:	1885c83a 	sub	r2,r3,r2
    bacc:	1484d83a 	srl	r2,r2,r18
    bad0:	0007883a 	mov	r3,zero
    bad4:	00004f06 	br	bc14 <__umoddi3+0x268>
    bad8:	29c04c36 	bltu	r5,r7,bc0c <__umoddi3+0x260>
    badc:	00bfffd4 	movui	r2,65535
    bae0:	11c0582e 	bgeu	r2,r7,bc44 <__umoddi3+0x298>
    bae4:	00804034 	movhi	r2,256
    bae8:	10bfffc4 	addi	r2,r2,-1
    baec:	11c0e736 	bltu	r2,r7,be8c <__umoddi3+0x4e0>
    baf0:	01000404 	movi	r4,16
    baf4:	3904d83a 	srl	r2,r7,r4
    baf8:	00c00074 	movhi	r3,1
    bafc:	18c67004 	addi	r3,r3,6592
    bb00:	1885883a 	add	r2,r3,r2
    bb04:	14c00003 	ldbu	r19,0(r2)
    bb08:	00c00804 	movi	r3,32
    bb0c:	9927883a 	add	r19,r19,r4
    bb10:	1ce9c83a 	sub	r20,r3,r19
    bb14:	a000581e 	bne	r20,zero,bc78 <__umoddi3+0x2cc>
    bb18:	3c400136 	bltu	r7,r17,bb20 <__umoddi3+0x174>
    bb1c:	8180eb36 	bltu	r16,r6,becc <__umoddi3+0x520>
    bb20:	8185c83a 	sub	r2,r16,r6
    bb24:	89e3c83a 	sub	r17,r17,r7
    bb28:	8089803a 	cmpltu	r4,r16,r2
    bb2c:	8939c83a 	sub	fp,r17,r4
    bb30:	e007883a 	mov	r3,fp
    bb34:	00003706 	br	bc14 <__umoddi3+0x268>
    bb38:	3000041e 	bne	r6,zero,bb4c <__umoddi3+0x1a0>
    bb3c:	000b883a 	mov	r5,zero
    bb40:	01000044 	movi	r4,1
    bb44:	000bfdc0 	call	bfdc <__udivsi3>
    bb48:	1027883a 	mov	r19,r2
    bb4c:	00bfffd4 	movui	r2,65535
    bb50:	14c0402e 	bgeu	r2,r19,bc54 <__umoddi3+0x2a8>
    bb54:	00804034 	movhi	r2,256
    bb58:	10bfffc4 	addi	r2,r2,-1
    bb5c:	14c0cd36 	bltu	r2,r19,be94 <__umoddi3+0x4e8>
    bb60:	00800404 	movi	r2,16
    bb64:	9886d83a 	srl	r3,r19,r2
    bb68:	01000074 	movhi	r4,1
    bb6c:	21067004 	addi	r4,r4,6592
    bb70:	20c7883a 	add	r3,r4,r3
    bb74:	18c00003 	ldbu	r3,0(r3)
    bb78:	1887883a 	add	r3,r3,r2
    bb7c:	00800804 	movi	r2,32
    bb80:	10e5c83a 	sub	r18,r2,r3
    bb84:	9000901e 	bne	r18,zero,bdc8 <__umoddi3+0x41c>
    bb88:	982cd43a 	srli	r22,r19,16
    bb8c:	8ce3c83a 	sub	r17,r17,r19
    bb90:	9d7fffcc 	andi	r21,r19,65535
    bb94:	b00b883a 	mov	r5,r22
    bb98:	8809883a 	mov	r4,r17
    bb9c:	000c0400 	call	c040 <__umodsi3>
    bba0:	8809883a 	mov	r4,r17
    bba4:	b00b883a 	mov	r5,r22
    bba8:	1021883a 	mov	r16,r2
    bbac:	000bfdc0 	call	bfdc <__udivsi3>
    bbb0:	8006943a 	slli	r3,r16,16
    bbb4:	a008d43a 	srli	r4,r20,16
    bbb8:	1545383a 	mul	r2,r2,r21
    bbbc:	20c8b03a 	or	r4,r4,r3
    bbc0:	2080042e 	bgeu	r4,r2,bbd4 <__umoddi3+0x228>
    bbc4:	24c9883a 	add	r4,r4,r19
    bbc8:	24c00236 	bltu	r4,r19,bbd4 <__umoddi3+0x228>
    bbcc:	2080012e 	bgeu	r4,r2,bbd4 <__umoddi3+0x228>
    bbd0:	24c9883a 	add	r4,r4,r19
    bbd4:	20a1c83a 	sub	r16,r4,r2
    bbd8:	b00b883a 	mov	r5,r22
    bbdc:	8009883a 	mov	r4,r16
    bbe0:	000c0400 	call	c040 <__umodsi3>
    bbe4:	1023883a 	mov	r17,r2
    bbe8:	b00b883a 	mov	r5,r22
    bbec:	8009883a 	mov	r4,r16
    bbf0:	000bfdc0 	call	bfdc <__udivsi3>
    bbf4:	8822943a 	slli	r17,r17,16
    bbf8:	1545383a 	mul	r2,r2,r21
    bbfc:	a53fffcc 	andi	r20,r20,65535
    bc00:	a446b03a 	or	r3,r20,r17
    bc04:	18bfb02e 	bgeu	r3,r2,bac8 <__alt_data_end+0xff00bac8>
    bc08:	003fab06 	br	bab8 <__alt_data_end+0xff00bab8>
    bc0c:	2005883a 	mov	r2,r4
    bc10:	2807883a 	mov	r3,r5
    bc14:	dfc00b17 	ldw	ra,44(sp)
    bc18:	df000a17 	ldw	fp,40(sp)
    bc1c:	ddc00917 	ldw	r23,36(sp)
    bc20:	dd800817 	ldw	r22,32(sp)
    bc24:	dd400717 	ldw	r21,28(sp)
    bc28:	dd000617 	ldw	r20,24(sp)
    bc2c:	dcc00517 	ldw	r19,20(sp)
    bc30:	dc800417 	ldw	r18,16(sp)
    bc34:	dc400317 	ldw	r17,12(sp)
    bc38:	dc000217 	ldw	r16,8(sp)
    bc3c:	dec00c04 	addi	sp,sp,48
    bc40:	f800283a 	ret
    bc44:	04c03fc4 	movi	r19,255
    bc48:	99c9803a 	cmpltu	r4,r19,r7
    bc4c:	200890fa 	slli	r4,r4,3
    bc50:	003fa806 	br	baf4 <__alt_data_end+0xff00baf4>
    bc54:	00803fc4 	movi	r2,255
    bc58:	14c5803a 	cmpltu	r2,r2,r19
    bc5c:	100490fa 	slli	r2,r2,3
    bc60:	003fc006 	br	bb64 <__alt_data_end+0xff00bb64>
    bc64:	00804034 	movhi	r2,256
    bc68:	10bfffc4 	addi	r2,r2,-1
    bc6c:	11808b36 	bltu	r2,r6,be9c <__umoddi3+0x4f0>
    bc70:	01000404 	movi	r4,16
    bc74:	003f6406 	br	ba08 <__alt_data_end+0xff00ba08>
    bc78:	34c4d83a 	srl	r2,r6,r19
    bc7c:	3d0e983a 	sll	r7,r7,r20
    bc80:	8cf8d83a 	srl	fp,r17,r19
    bc84:	8d10983a 	sll	r8,r17,r20
    bc88:	38aab03a 	or	r21,r7,r2
    bc8c:	a82cd43a 	srli	r22,r21,16
    bc90:	84e2d83a 	srl	r17,r16,r19
    bc94:	e009883a 	mov	r4,fp
    bc98:	b00b883a 	mov	r5,r22
    bc9c:	8a22b03a 	or	r17,r17,r8
    bca0:	3524983a 	sll	r18,r6,r20
    bca4:	000c0400 	call	c040 <__umodsi3>
    bca8:	e009883a 	mov	r4,fp
    bcac:	b00b883a 	mov	r5,r22
    bcb0:	102f883a 	mov	r23,r2
    bcb4:	000bfdc0 	call	bfdc <__udivsi3>
    bcb8:	100d883a 	mov	r6,r2
    bcbc:	b808943a 	slli	r4,r23,16
    bcc0:	aa3fffcc 	andi	r8,r21,65535
    bcc4:	8804d43a 	srli	r2,r17,16
    bcc8:	41af383a 	mul	r23,r8,r6
    bccc:	8520983a 	sll	r16,r16,r20
    bcd0:	1104b03a 	or	r2,r2,r4
    bcd4:	15c0042e 	bgeu	r2,r23,bce8 <__umoddi3+0x33c>
    bcd8:	1545883a 	add	r2,r2,r21
    bcdc:	30ffffc4 	addi	r3,r6,-1
    bce0:	1540742e 	bgeu	r2,r21,beb4 <__umoddi3+0x508>
    bce4:	180d883a 	mov	r6,r3
    bce8:	15efc83a 	sub	r23,r2,r23
    bcec:	b00b883a 	mov	r5,r22
    bcf0:	b809883a 	mov	r4,r23
    bcf4:	d9800115 	stw	r6,4(sp)
    bcf8:	da000015 	stw	r8,0(sp)
    bcfc:	000c0400 	call	c040 <__umodsi3>
    bd00:	b00b883a 	mov	r5,r22
    bd04:	b809883a 	mov	r4,r23
    bd08:	1039883a 	mov	fp,r2
    bd0c:	000bfdc0 	call	bfdc <__udivsi3>
    bd10:	da000017 	ldw	r8,0(sp)
    bd14:	e038943a 	slli	fp,fp,16
    bd18:	100b883a 	mov	r5,r2
    bd1c:	4089383a 	mul	r4,r8,r2
    bd20:	8a3fffcc 	andi	r8,r17,65535
    bd24:	4710b03a 	or	r8,r8,fp
    bd28:	d9800117 	ldw	r6,4(sp)
    bd2c:	4100042e 	bgeu	r8,r4,bd40 <__umoddi3+0x394>
    bd30:	4551883a 	add	r8,r8,r21
    bd34:	10bfffc4 	addi	r2,r2,-1
    bd38:	45405a2e 	bgeu	r8,r21,bea4 <__umoddi3+0x4f8>
    bd3c:	100b883a 	mov	r5,r2
    bd40:	300c943a 	slli	r6,r6,16
    bd44:	91ffffcc 	andi	r7,r18,65535
    bd48:	9004d43a 	srli	r2,r18,16
    bd4c:	314cb03a 	or	r6,r6,r5
    bd50:	317fffcc 	andi	r5,r6,65535
    bd54:	300cd43a 	srli	r6,r6,16
    bd58:	29d3383a 	mul	r9,r5,r7
    bd5c:	288b383a 	mul	r5,r5,r2
    bd60:	31cf383a 	mul	r7,r6,r7
    bd64:	4806d43a 	srli	r3,r9,16
    bd68:	4111c83a 	sub	r8,r8,r4
    bd6c:	29cb883a 	add	r5,r5,r7
    bd70:	194b883a 	add	r5,r3,r5
    bd74:	3085383a 	mul	r2,r6,r2
    bd78:	29c0022e 	bgeu	r5,r7,bd84 <__umoddi3+0x3d8>
    bd7c:	00c00074 	movhi	r3,1
    bd80:	10c5883a 	add	r2,r2,r3
    bd84:	2808d43a 	srli	r4,r5,16
    bd88:	280a943a 	slli	r5,r5,16
    bd8c:	4a7fffcc 	andi	r9,r9,65535
    bd90:	2085883a 	add	r2,r4,r2
    bd94:	2a4b883a 	add	r5,r5,r9
    bd98:	40803636 	bltu	r8,r2,be74 <__umoddi3+0x4c8>
    bd9c:	40804d26 	beq	r8,r2,bed4 <__umoddi3+0x528>
    bda0:	4089c83a 	sub	r4,r8,r2
    bda4:	280f883a 	mov	r7,r5
    bda8:	81cfc83a 	sub	r7,r16,r7
    bdac:	81c7803a 	cmpltu	r3,r16,r7
    bdb0:	20c7c83a 	sub	r3,r4,r3
    bdb4:	1cc4983a 	sll	r2,r3,r19
    bdb8:	3d0ed83a 	srl	r7,r7,r20
    bdbc:	1d06d83a 	srl	r3,r3,r20
    bdc0:	11c4b03a 	or	r2,r2,r7
    bdc4:	003f9306 	br	bc14 <__alt_data_end+0xff00bc14>
    bdc8:	9ca6983a 	sll	r19,r19,r18
    bdcc:	88e8d83a 	srl	r20,r17,r3
    bdd0:	80c4d83a 	srl	r2,r16,r3
    bdd4:	982cd43a 	srli	r22,r19,16
    bdd8:	8ca2983a 	sll	r17,r17,r18
    bddc:	a009883a 	mov	r4,r20
    bde0:	b00b883a 	mov	r5,r22
    bde4:	1478b03a 	or	fp,r2,r17
    bde8:	000c0400 	call	c040 <__umodsi3>
    bdec:	a009883a 	mov	r4,r20
    bdf0:	b00b883a 	mov	r5,r22
    bdf4:	1023883a 	mov	r17,r2
    bdf8:	000bfdc0 	call	bfdc <__udivsi3>
    bdfc:	9d7fffcc 	andi	r21,r19,65535
    be00:	880a943a 	slli	r5,r17,16
    be04:	e008d43a 	srli	r4,fp,16
    be08:	a885383a 	mul	r2,r21,r2
    be0c:	84a8983a 	sll	r20,r16,r18
    be10:	2148b03a 	or	r4,r4,r5
    be14:	2080042e 	bgeu	r4,r2,be28 <__umoddi3+0x47c>
    be18:	24c9883a 	add	r4,r4,r19
    be1c:	24c00236 	bltu	r4,r19,be28 <__umoddi3+0x47c>
    be20:	2080012e 	bgeu	r4,r2,be28 <__umoddi3+0x47c>
    be24:	24c9883a 	add	r4,r4,r19
    be28:	20a3c83a 	sub	r17,r4,r2
    be2c:	b00b883a 	mov	r5,r22
    be30:	8809883a 	mov	r4,r17
    be34:	000c0400 	call	c040 <__umodsi3>
    be38:	102f883a 	mov	r23,r2
    be3c:	8809883a 	mov	r4,r17
    be40:	b00b883a 	mov	r5,r22
    be44:	000bfdc0 	call	bfdc <__udivsi3>
    be48:	b82e943a 	slli	r23,r23,16
    be4c:	a885383a 	mul	r2,r21,r2
    be50:	e13fffcc 	andi	r4,fp,65535
    be54:	25c8b03a 	or	r4,r4,r23
    be58:	2080042e 	bgeu	r4,r2,be6c <__umoddi3+0x4c0>
    be5c:	24c9883a 	add	r4,r4,r19
    be60:	24c00236 	bltu	r4,r19,be6c <__umoddi3+0x4c0>
    be64:	2080012e 	bgeu	r4,r2,be6c <__umoddi3+0x4c0>
    be68:	24c9883a 	add	r4,r4,r19
    be6c:	20a3c83a 	sub	r17,r4,r2
    be70:	003f4806 	br	bb94 <__alt_data_end+0xff00bb94>
    be74:	2c8fc83a 	sub	r7,r5,r18
    be78:	1545c83a 	sub	r2,r2,r21
    be7c:	29cb803a 	cmpltu	r5,r5,r7
    be80:	1145c83a 	sub	r2,r2,r5
    be84:	4089c83a 	sub	r4,r8,r2
    be88:	003fc706 	br	bda8 <__alt_data_end+0xff00bda8>
    be8c:	01000604 	movi	r4,24
    be90:	003f1806 	br	baf4 <__alt_data_end+0xff00baf4>
    be94:	00800604 	movi	r2,24
    be98:	003f3206 	br	bb64 <__alt_data_end+0xff00bb64>
    be9c:	01000604 	movi	r4,24
    bea0:	003ed906 	br	ba08 <__alt_data_end+0xff00ba08>
    bea4:	413fa52e 	bgeu	r8,r4,bd3c <__alt_data_end+0xff00bd3c>
    bea8:	297fff84 	addi	r5,r5,-2
    beac:	4551883a 	add	r8,r8,r21
    beb0:	003fa306 	br	bd40 <__alt_data_end+0xff00bd40>
    beb4:	15ff8b2e 	bgeu	r2,r23,bce4 <__alt_data_end+0xff00bce4>
    beb8:	31bfff84 	addi	r6,r6,-2
    bebc:	1545883a 	add	r2,r2,r21
    bec0:	003f8906 	br	bce8 <__alt_data_end+0xff00bce8>
    bec4:	24c9883a 	add	r4,r4,r19
    bec8:	003eee06 	br	ba84 <__alt_data_end+0xff00ba84>
    becc:	8005883a 	mov	r2,r16
    bed0:	003f1706 	br	bb30 <__alt_data_end+0xff00bb30>
    bed4:	817fe736 	bltu	r16,r5,be74 <__alt_data_end+0xff00be74>
    bed8:	280f883a 	mov	r7,r5
    bedc:	0009883a 	mov	r4,zero
    bee0:	003fb106 	br	bda8 <__alt_data_end+0xff00bda8>

0000bee4 <__divsi3>:
    bee4:	20001b16 	blt	r4,zero,bf54 <__divsi3+0x70>
    bee8:	000f883a 	mov	r7,zero
    beec:	28001616 	blt	r5,zero,bf48 <__divsi3+0x64>
    bef0:	200d883a 	mov	r6,r4
    bef4:	29001a2e 	bgeu	r5,r4,bf60 <__divsi3+0x7c>
    bef8:	00800804 	movi	r2,32
    befc:	00c00044 	movi	r3,1
    bf00:	00000106 	br	bf08 <__divsi3+0x24>
    bf04:	10000d26 	beq	r2,zero,bf3c <__divsi3+0x58>
    bf08:	294b883a 	add	r5,r5,r5
    bf0c:	10bfffc4 	addi	r2,r2,-1
    bf10:	18c7883a 	add	r3,r3,r3
    bf14:	293ffb36 	bltu	r5,r4,bf04 <__alt_data_end+0xff00bf04>
    bf18:	0005883a 	mov	r2,zero
    bf1c:	18000726 	beq	r3,zero,bf3c <__divsi3+0x58>
    bf20:	0005883a 	mov	r2,zero
    bf24:	31400236 	bltu	r6,r5,bf30 <__divsi3+0x4c>
    bf28:	314dc83a 	sub	r6,r6,r5
    bf2c:	10c4b03a 	or	r2,r2,r3
    bf30:	1806d07a 	srli	r3,r3,1
    bf34:	280ad07a 	srli	r5,r5,1
    bf38:	183ffa1e 	bne	r3,zero,bf24 <__alt_data_end+0xff00bf24>
    bf3c:	38000126 	beq	r7,zero,bf44 <__divsi3+0x60>
    bf40:	0085c83a 	sub	r2,zero,r2
    bf44:	f800283a 	ret
    bf48:	014bc83a 	sub	r5,zero,r5
    bf4c:	39c0005c 	xori	r7,r7,1
    bf50:	003fe706 	br	bef0 <__alt_data_end+0xff00bef0>
    bf54:	0109c83a 	sub	r4,zero,r4
    bf58:	01c00044 	movi	r7,1
    bf5c:	003fe306 	br	beec <__alt_data_end+0xff00beec>
    bf60:	00c00044 	movi	r3,1
    bf64:	003fee06 	br	bf20 <__alt_data_end+0xff00bf20>

0000bf68 <__modsi3>:
    bf68:	20001716 	blt	r4,zero,bfc8 <__modsi3+0x60>
    bf6c:	000f883a 	mov	r7,zero
    bf70:	2005883a 	mov	r2,r4
    bf74:	28001216 	blt	r5,zero,bfc0 <__modsi3+0x58>
    bf78:	2900162e 	bgeu	r5,r4,bfd4 <__modsi3+0x6c>
    bf7c:	01800804 	movi	r6,32
    bf80:	00c00044 	movi	r3,1
    bf84:	00000106 	br	bf8c <__modsi3+0x24>
    bf88:	30000a26 	beq	r6,zero,bfb4 <__modsi3+0x4c>
    bf8c:	294b883a 	add	r5,r5,r5
    bf90:	31bfffc4 	addi	r6,r6,-1
    bf94:	18c7883a 	add	r3,r3,r3
    bf98:	293ffb36 	bltu	r5,r4,bf88 <__alt_data_end+0xff00bf88>
    bf9c:	18000526 	beq	r3,zero,bfb4 <__modsi3+0x4c>
    bfa0:	1806d07a 	srli	r3,r3,1
    bfa4:	11400136 	bltu	r2,r5,bfac <__modsi3+0x44>
    bfa8:	1145c83a 	sub	r2,r2,r5
    bfac:	280ad07a 	srli	r5,r5,1
    bfb0:	183ffb1e 	bne	r3,zero,bfa0 <__alt_data_end+0xff00bfa0>
    bfb4:	38000126 	beq	r7,zero,bfbc <__modsi3+0x54>
    bfb8:	0085c83a 	sub	r2,zero,r2
    bfbc:	f800283a 	ret
    bfc0:	014bc83a 	sub	r5,zero,r5
    bfc4:	003fec06 	br	bf78 <__alt_data_end+0xff00bf78>
    bfc8:	0109c83a 	sub	r4,zero,r4
    bfcc:	01c00044 	movi	r7,1
    bfd0:	003fe706 	br	bf70 <__alt_data_end+0xff00bf70>
    bfd4:	00c00044 	movi	r3,1
    bfd8:	003ff106 	br	bfa0 <__alt_data_end+0xff00bfa0>

0000bfdc <__udivsi3>:
    bfdc:	200d883a 	mov	r6,r4
    bfe0:	2900152e 	bgeu	r5,r4,c038 <__udivsi3+0x5c>
    bfe4:	28001416 	blt	r5,zero,c038 <__udivsi3+0x5c>
    bfe8:	00800804 	movi	r2,32
    bfec:	00c00044 	movi	r3,1
    bff0:	00000206 	br	bffc <__udivsi3+0x20>
    bff4:	10000e26 	beq	r2,zero,c030 <__udivsi3+0x54>
    bff8:	28000516 	blt	r5,zero,c010 <__udivsi3+0x34>
    bffc:	294b883a 	add	r5,r5,r5
    c000:	10bfffc4 	addi	r2,r2,-1
    c004:	18c7883a 	add	r3,r3,r3
    c008:	293ffa36 	bltu	r5,r4,bff4 <__alt_data_end+0xff00bff4>
    c00c:	18000826 	beq	r3,zero,c030 <__udivsi3+0x54>
    c010:	0005883a 	mov	r2,zero
    c014:	31400236 	bltu	r6,r5,c020 <__udivsi3+0x44>
    c018:	314dc83a 	sub	r6,r6,r5
    c01c:	10c4b03a 	or	r2,r2,r3
    c020:	1806d07a 	srli	r3,r3,1
    c024:	280ad07a 	srli	r5,r5,1
    c028:	183ffa1e 	bne	r3,zero,c014 <__alt_data_end+0xff00c014>
    c02c:	f800283a 	ret
    c030:	0005883a 	mov	r2,zero
    c034:	f800283a 	ret
    c038:	00c00044 	movi	r3,1
    c03c:	003ff406 	br	c010 <__alt_data_end+0xff00c010>

0000c040 <__umodsi3>:
    c040:	2005883a 	mov	r2,r4
    c044:	2900122e 	bgeu	r5,r4,c090 <__umodsi3+0x50>
    c048:	28001116 	blt	r5,zero,c090 <__umodsi3+0x50>
    c04c:	01800804 	movi	r6,32
    c050:	00c00044 	movi	r3,1
    c054:	00000206 	br	c060 <__umodsi3+0x20>
    c058:	30000c26 	beq	r6,zero,c08c <__umodsi3+0x4c>
    c05c:	28000516 	blt	r5,zero,c074 <__umodsi3+0x34>
    c060:	294b883a 	add	r5,r5,r5
    c064:	31bfffc4 	addi	r6,r6,-1
    c068:	18c7883a 	add	r3,r3,r3
    c06c:	293ffa36 	bltu	r5,r4,c058 <__alt_data_end+0xff00c058>
    c070:	18000626 	beq	r3,zero,c08c <__umodsi3+0x4c>
    c074:	1806d07a 	srli	r3,r3,1
    c078:	11400136 	bltu	r2,r5,c080 <__umodsi3+0x40>
    c07c:	1145c83a 	sub	r2,r2,r5
    c080:	280ad07a 	srli	r5,r5,1
    c084:	183ffb1e 	bne	r3,zero,c074 <__alt_data_end+0xff00c074>
    c088:	f800283a 	ret
    c08c:	f800283a 	ret
    c090:	00c00044 	movi	r3,1
    c094:	003ff706 	br	c074 <__alt_data_end+0xff00c074>

0000c098 <__adddf3>:
    c098:	02c00434 	movhi	r11,16
    c09c:	5affffc4 	addi	r11,r11,-1
    c0a0:	2806d7fa 	srli	r3,r5,31
    c0a4:	2ad4703a 	and	r10,r5,r11
    c0a8:	3ad2703a 	and	r9,r7,r11
    c0ac:	3804d53a 	srli	r2,r7,20
    c0b0:	3018d77a 	srli	r12,r6,29
    c0b4:	280ad53a 	srli	r5,r5,20
    c0b8:	501490fa 	slli	r10,r10,3
    c0bc:	2010d77a 	srli	r8,r4,29
    c0c0:	481290fa 	slli	r9,r9,3
    c0c4:	380ed7fa 	srli	r7,r7,31
    c0c8:	defffb04 	addi	sp,sp,-20
    c0cc:	dc800215 	stw	r18,8(sp)
    c0d0:	dc400115 	stw	r17,4(sp)
    c0d4:	dc000015 	stw	r16,0(sp)
    c0d8:	dfc00415 	stw	ra,16(sp)
    c0dc:	dcc00315 	stw	r19,12(sp)
    c0e0:	1c803fcc 	andi	r18,r3,255
    c0e4:	2c01ffcc 	andi	r16,r5,2047
    c0e8:	5210b03a 	or	r8,r10,r8
    c0ec:	202290fa 	slli	r17,r4,3
    c0f0:	1081ffcc 	andi	r2,r2,2047
    c0f4:	4b12b03a 	or	r9,r9,r12
    c0f8:	300c90fa 	slli	r6,r6,3
    c0fc:	91c07526 	beq	r18,r7,c2d4 <__adddf3+0x23c>
    c100:	8087c83a 	sub	r3,r16,r2
    c104:	00c0ab0e 	bge	zero,r3,c3b4 <__adddf3+0x31c>
    c108:	10002a1e 	bne	r2,zero,c1b4 <__adddf3+0x11c>
    c10c:	4984b03a 	or	r2,r9,r6
    c110:	1000961e 	bne	r2,zero,c36c <__adddf3+0x2d4>
    c114:	888001cc 	andi	r2,r17,7
    c118:	10000726 	beq	r2,zero,c138 <__adddf3+0xa0>
    c11c:	888003cc 	andi	r2,r17,15
    c120:	00c00104 	movi	r3,4
    c124:	10c00426 	beq	r2,r3,c138 <__adddf3+0xa0>
    c128:	88c7883a 	add	r3,r17,r3
    c12c:	1c63803a 	cmpltu	r17,r3,r17
    c130:	4451883a 	add	r8,r8,r17
    c134:	1823883a 	mov	r17,r3
    c138:	4080202c 	andhi	r2,r8,128
    c13c:	10005926 	beq	r2,zero,c2a4 <__adddf3+0x20c>
    c140:	84000044 	addi	r16,r16,1
    c144:	0081ffc4 	movi	r2,2047
    c148:	8080ba26 	beq	r16,r2,c434 <__adddf3+0x39c>
    c14c:	00bfe034 	movhi	r2,65408
    c150:	10bfffc4 	addi	r2,r2,-1
    c154:	4090703a 	and	r8,r8,r2
    c158:	4004977a 	slli	r2,r8,29
    c15c:	4010927a 	slli	r8,r8,9
    c160:	8822d0fa 	srli	r17,r17,3
    c164:	8401ffcc 	andi	r16,r16,2047
    c168:	4010d33a 	srli	r8,r8,12
    c16c:	9007883a 	mov	r3,r18
    c170:	1444b03a 	or	r2,r2,r17
    c174:	8401ffcc 	andi	r16,r16,2047
    c178:	8020953a 	slli	r16,r16,20
    c17c:	18c03fcc 	andi	r3,r3,255
    c180:	01000434 	movhi	r4,16
    c184:	213fffc4 	addi	r4,r4,-1
    c188:	180697fa 	slli	r3,r3,31
    c18c:	4110703a 	and	r8,r8,r4
    c190:	4410b03a 	or	r8,r8,r16
    c194:	40c6b03a 	or	r3,r8,r3
    c198:	dfc00417 	ldw	ra,16(sp)
    c19c:	dcc00317 	ldw	r19,12(sp)
    c1a0:	dc800217 	ldw	r18,8(sp)
    c1a4:	dc400117 	ldw	r17,4(sp)
    c1a8:	dc000017 	ldw	r16,0(sp)
    c1ac:	dec00504 	addi	sp,sp,20
    c1b0:	f800283a 	ret
    c1b4:	0081ffc4 	movi	r2,2047
    c1b8:	80bfd626 	beq	r16,r2,c114 <__alt_data_end+0xff00c114>
    c1bc:	4a402034 	orhi	r9,r9,128
    c1c0:	00800e04 	movi	r2,56
    c1c4:	10c09f16 	blt	r2,r3,c444 <__adddf3+0x3ac>
    c1c8:	008007c4 	movi	r2,31
    c1cc:	10c0c216 	blt	r2,r3,c4d8 <__adddf3+0x440>
    c1d0:	00800804 	movi	r2,32
    c1d4:	10c5c83a 	sub	r2,r2,r3
    c1d8:	488a983a 	sll	r5,r9,r2
    c1dc:	30c8d83a 	srl	r4,r6,r3
    c1e0:	3084983a 	sll	r2,r6,r2
    c1e4:	48c6d83a 	srl	r3,r9,r3
    c1e8:	290cb03a 	or	r6,r5,r4
    c1ec:	1004c03a 	cmpne	r2,r2,zero
    c1f0:	308cb03a 	or	r6,r6,r2
    c1f4:	898dc83a 	sub	r6,r17,r6
    c1f8:	89a3803a 	cmpltu	r17,r17,r6
    c1fc:	40d1c83a 	sub	r8,r8,r3
    c200:	4451c83a 	sub	r8,r8,r17
    c204:	3023883a 	mov	r17,r6
    c208:	4080202c 	andhi	r2,r8,128
    c20c:	10002326 	beq	r2,zero,c29c <__adddf3+0x204>
    c210:	04c02034 	movhi	r19,128
    c214:	9cffffc4 	addi	r19,r19,-1
    c218:	44e6703a 	and	r19,r8,r19
    c21c:	98007626 	beq	r19,zero,c3f8 <__adddf3+0x360>
    c220:	9809883a 	mov	r4,r19
    c224:	000e69c0 	call	e69c <__clzsi2>
    c228:	10fffe04 	addi	r3,r2,-8
    c22c:	010007c4 	movi	r4,31
    c230:	20c07716 	blt	r4,r3,c410 <__adddf3+0x378>
    c234:	00800804 	movi	r2,32
    c238:	10c5c83a 	sub	r2,r2,r3
    c23c:	8884d83a 	srl	r2,r17,r2
    c240:	98d0983a 	sll	r8,r19,r3
    c244:	88e2983a 	sll	r17,r17,r3
    c248:	1204b03a 	or	r2,r2,r8
    c24c:	1c007416 	blt	r3,r16,c420 <__adddf3+0x388>
    c250:	1c21c83a 	sub	r16,r3,r16
    c254:	82000044 	addi	r8,r16,1
    c258:	00c007c4 	movi	r3,31
    c25c:	1a009116 	blt	r3,r8,c4a4 <__adddf3+0x40c>
    c260:	00c00804 	movi	r3,32
    c264:	1a07c83a 	sub	r3,r3,r8
    c268:	8a08d83a 	srl	r4,r17,r8
    c26c:	88e2983a 	sll	r17,r17,r3
    c270:	10c6983a 	sll	r3,r2,r3
    c274:	1210d83a 	srl	r8,r2,r8
    c278:	8804c03a 	cmpne	r2,r17,zero
    c27c:	1906b03a 	or	r3,r3,r4
    c280:	18a2b03a 	or	r17,r3,r2
    c284:	0021883a 	mov	r16,zero
    c288:	003fa206 	br	c114 <__alt_data_end+0xff00c114>
    c28c:	1890b03a 	or	r8,r3,r2
    c290:	40017d26 	beq	r8,zero,c888 <__adddf3+0x7f0>
    c294:	1011883a 	mov	r8,r2
    c298:	1823883a 	mov	r17,r3
    c29c:	888001cc 	andi	r2,r17,7
    c2a0:	103f9e1e 	bne	r2,zero,c11c <__alt_data_end+0xff00c11c>
    c2a4:	4004977a 	slli	r2,r8,29
    c2a8:	8822d0fa 	srli	r17,r17,3
    c2ac:	4010d0fa 	srli	r8,r8,3
    c2b0:	9007883a 	mov	r3,r18
    c2b4:	1444b03a 	or	r2,r2,r17
    c2b8:	0101ffc4 	movi	r4,2047
    c2bc:	81002426 	beq	r16,r4,c350 <__adddf3+0x2b8>
    c2c0:	8120703a 	and	r16,r16,r4
    c2c4:	01000434 	movhi	r4,16
    c2c8:	213fffc4 	addi	r4,r4,-1
    c2cc:	4110703a 	and	r8,r8,r4
    c2d0:	003fa806 	br	c174 <__alt_data_end+0xff00c174>
    c2d4:	8089c83a 	sub	r4,r16,r2
    c2d8:	01005e0e 	bge	zero,r4,c454 <__adddf3+0x3bc>
    c2dc:	10002b26 	beq	r2,zero,c38c <__adddf3+0x2f4>
    c2e0:	0081ffc4 	movi	r2,2047
    c2e4:	80bf8b26 	beq	r16,r2,c114 <__alt_data_end+0xff00c114>
    c2e8:	4a402034 	orhi	r9,r9,128
    c2ec:	00800e04 	movi	r2,56
    c2f0:	1100a40e 	bge	r2,r4,c584 <__adddf3+0x4ec>
    c2f4:	498cb03a 	or	r6,r9,r6
    c2f8:	300ac03a 	cmpne	r5,r6,zero
    c2fc:	0013883a 	mov	r9,zero
    c300:	2c4b883a 	add	r5,r5,r17
    c304:	2c63803a 	cmpltu	r17,r5,r17
    c308:	4a11883a 	add	r8,r9,r8
    c30c:	8a11883a 	add	r8,r17,r8
    c310:	2823883a 	mov	r17,r5
    c314:	4080202c 	andhi	r2,r8,128
    c318:	103fe026 	beq	r2,zero,c29c <__alt_data_end+0xff00c29c>
    c31c:	84000044 	addi	r16,r16,1
    c320:	0081ffc4 	movi	r2,2047
    c324:	8080d226 	beq	r16,r2,c670 <__adddf3+0x5d8>
    c328:	00bfe034 	movhi	r2,65408
    c32c:	10bfffc4 	addi	r2,r2,-1
    c330:	4090703a 	and	r8,r8,r2
    c334:	880ad07a 	srli	r5,r17,1
    c338:	400897fa 	slli	r4,r8,31
    c33c:	88c0004c 	andi	r3,r17,1
    c340:	28e2b03a 	or	r17,r5,r3
    c344:	4010d07a 	srli	r8,r8,1
    c348:	2462b03a 	or	r17,r4,r17
    c34c:	003f7106 	br	c114 <__alt_data_end+0xff00c114>
    c350:	4088b03a 	or	r4,r8,r2
    c354:	20014526 	beq	r4,zero,c86c <__adddf3+0x7d4>
    c358:	01000434 	movhi	r4,16
    c35c:	42000234 	orhi	r8,r8,8
    c360:	213fffc4 	addi	r4,r4,-1
    c364:	4110703a 	and	r8,r8,r4
    c368:	003f8206 	br	c174 <__alt_data_end+0xff00c174>
    c36c:	18ffffc4 	addi	r3,r3,-1
    c370:	1800491e 	bne	r3,zero,c498 <__adddf3+0x400>
    c374:	898bc83a 	sub	r5,r17,r6
    c378:	8963803a 	cmpltu	r17,r17,r5
    c37c:	4251c83a 	sub	r8,r8,r9
    c380:	4451c83a 	sub	r8,r8,r17
    c384:	2823883a 	mov	r17,r5
    c388:	003f9f06 	br	c208 <__alt_data_end+0xff00c208>
    c38c:	4984b03a 	or	r2,r9,r6
    c390:	103f6026 	beq	r2,zero,c114 <__alt_data_end+0xff00c114>
    c394:	213fffc4 	addi	r4,r4,-1
    c398:	2000931e 	bne	r4,zero,c5e8 <__adddf3+0x550>
    c39c:	898d883a 	add	r6,r17,r6
    c3a0:	3463803a 	cmpltu	r17,r6,r17
    c3a4:	4251883a 	add	r8,r8,r9
    c3a8:	8a11883a 	add	r8,r17,r8
    c3ac:	3023883a 	mov	r17,r6
    c3b0:	003fd806 	br	c314 <__alt_data_end+0xff00c314>
    c3b4:	1800541e 	bne	r3,zero,c508 <__adddf3+0x470>
    c3b8:	80800044 	addi	r2,r16,1
    c3bc:	1081ffcc 	andi	r2,r2,2047
    c3c0:	00c00044 	movi	r3,1
    c3c4:	1880a00e 	bge	r3,r2,c648 <__adddf3+0x5b0>
    c3c8:	8989c83a 	sub	r4,r17,r6
    c3cc:	8905803a 	cmpltu	r2,r17,r4
    c3d0:	4267c83a 	sub	r19,r8,r9
    c3d4:	98a7c83a 	sub	r19,r19,r2
    c3d8:	9880202c 	andhi	r2,r19,128
    c3dc:	10006326 	beq	r2,zero,c56c <__adddf3+0x4d4>
    c3e0:	3463c83a 	sub	r17,r6,r17
    c3e4:	4a07c83a 	sub	r3,r9,r8
    c3e8:	344d803a 	cmpltu	r6,r6,r17
    c3ec:	19a7c83a 	sub	r19,r3,r6
    c3f0:	3825883a 	mov	r18,r7
    c3f4:	983f8a1e 	bne	r19,zero,c220 <__alt_data_end+0xff00c220>
    c3f8:	8809883a 	mov	r4,r17
    c3fc:	000e69c0 	call	e69c <__clzsi2>
    c400:	10800804 	addi	r2,r2,32
    c404:	10fffe04 	addi	r3,r2,-8
    c408:	010007c4 	movi	r4,31
    c40c:	20ff890e 	bge	r4,r3,c234 <__alt_data_end+0xff00c234>
    c410:	10bff604 	addi	r2,r2,-40
    c414:	8884983a 	sll	r2,r17,r2
    c418:	0023883a 	mov	r17,zero
    c41c:	1c3f8c0e 	bge	r3,r16,c250 <__alt_data_end+0xff00c250>
    c420:	023fe034 	movhi	r8,65408
    c424:	423fffc4 	addi	r8,r8,-1
    c428:	80e1c83a 	sub	r16,r16,r3
    c42c:	1210703a 	and	r8,r2,r8
    c430:	003f3806 	br	c114 <__alt_data_end+0xff00c114>
    c434:	9007883a 	mov	r3,r18
    c438:	0011883a 	mov	r8,zero
    c43c:	0005883a 	mov	r2,zero
    c440:	003f4c06 	br	c174 <__alt_data_end+0xff00c174>
    c444:	498cb03a 	or	r6,r9,r6
    c448:	300cc03a 	cmpne	r6,r6,zero
    c44c:	0007883a 	mov	r3,zero
    c450:	003f6806 	br	c1f4 <__alt_data_end+0xff00c1f4>
    c454:	20009c1e 	bne	r4,zero,c6c8 <__adddf3+0x630>
    c458:	80800044 	addi	r2,r16,1
    c45c:	1141ffcc 	andi	r5,r2,2047
    c460:	01000044 	movi	r4,1
    c464:	2140670e 	bge	r4,r5,c604 <__adddf3+0x56c>
    c468:	0101ffc4 	movi	r4,2047
    c46c:	11007f26 	beq	r2,r4,c66c <__adddf3+0x5d4>
    c470:	898d883a 	add	r6,r17,r6
    c474:	4247883a 	add	r3,r8,r9
    c478:	3451803a 	cmpltu	r8,r6,r17
    c47c:	40d1883a 	add	r8,r8,r3
    c480:	402297fa 	slli	r17,r8,31
    c484:	300cd07a 	srli	r6,r6,1
    c488:	4010d07a 	srli	r8,r8,1
    c48c:	1021883a 	mov	r16,r2
    c490:	89a2b03a 	or	r17,r17,r6
    c494:	003f1f06 	br	c114 <__alt_data_end+0xff00c114>
    c498:	0081ffc4 	movi	r2,2047
    c49c:	80bf481e 	bne	r16,r2,c1c0 <__alt_data_end+0xff00c1c0>
    c4a0:	003f1c06 	br	c114 <__alt_data_end+0xff00c114>
    c4a4:	843ff844 	addi	r16,r16,-31
    c4a8:	01000804 	movi	r4,32
    c4ac:	1406d83a 	srl	r3,r2,r16
    c4b0:	41005026 	beq	r8,r4,c5f4 <__adddf3+0x55c>
    c4b4:	01001004 	movi	r4,64
    c4b8:	2211c83a 	sub	r8,r4,r8
    c4bc:	1204983a 	sll	r2,r2,r8
    c4c0:	88a2b03a 	or	r17,r17,r2
    c4c4:	8822c03a 	cmpne	r17,r17,zero
    c4c8:	1c62b03a 	or	r17,r3,r17
    c4cc:	0011883a 	mov	r8,zero
    c4d0:	0021883a 	mov	r16,zero
    c4d4:	003f7106 	br	c29c <__alt_data_end+0xff00c29c>
    c4d8:	193ff804 	addi	r4,r3,-32
    c4dc:	00800804 	movi	r2,32
    c4e0:	4908d83a 	srl	r4,r9,r4
    c4e4:	18804526 	beq	r3,r2,c5fc <__adddf3+0x564>
    c4e8:	00801004 	movi	r2,64
    c4ec:	10c5c83a 	sub	r2,r2,r3
    c4f0:	4886983a 	sll	r3,r9,r2
    c4f4:	198cb03a 	or	r6,r3,r6
    c4f8:	300cc03a 	cmpne	r6,r6,zero
    c4fc:	218cb03a 	or	r6,r4,r6
    c500:	0007883a 	mov	r3,zero
    c504:	003f3b06 	br	c1f4 <__alt_data_end+0xff00c1f4>
    c508:	80002a26 	beq	r16,zero,c5b4 <__adddf3+0x51c>
    c50c:	0101ffc4 	movi	r4,2047
    c510:	11006826 	beq	r2,r4,c6b4 <__adddf3+0x61c>
    c514:	00c7c83a 	sub	r3,zero,r3
    c518:	42002034 	orhi	r8,r8,128
    c51c:	01000e04 	movi	r4,56
    c520:	20c07c16 	blt	r4,r3,c714 <__adddf3+0x67c>
    c524:	010007c4 	movi	r4,31
    c528:	20c0da16 	blt	r4,r3,c894 <__adddf3+0x7fc>
    c52c:	01000804 	movi	r4,32
    c530:	20c9c83a 	sub	r4,r4,r3
    c534:	4114983a 	sll	r10,r8,r4
    c538:	88cad83a 	srl	r5,r17,r3
    c53c:	8908983a 	sll	r4,r17,r4
    c540:	40c6d83a 	srl	r3,r8,r3
    c544:	5162b03a 	or	r17,r10,r5
    c548:	2008c03a 	cmpne	r4,r4,zero
    c54c:	8922b03a 	or	r17,r17,r4
    c550:	3463c83a 	sub	r17,r6,r17
    c554:	48c7c83a 	sub	r3,r9,r3
    c558:	344d803a 	cmpltu	r6,r6,r17
    c55c:	1991c83a 	sub	r8,r3,r6
    c560:	1021883a 	mov	r16,r2
    c564:	3825883a 	mov	r18,r7
    c568:	003f2706 	br	c208 <__alt_data_end+0xff00c208>
    c56c:	24d0b03a 	or	r8,r4,r19
    c570:	40001b1e 	bne	r8,zero,c5e0 <__adddf3+0x548>
    c574:	0005883a 	mov	r2,zero
    c578:	0007883a 	mov	r3,zero
    c57c:	0021883a 	mov	r16,zero
    c580:	003f4d06 	br	c2b8 <__alt_data_end+0xff00c2b8>
    c584:	008007c4 	movi	r2,31
    c588:	11003c16 	blt	r2,r4,c67c <__adddf3+0x5e4>
    c58c:	00800804 	movi	r2,32
    c590:	1105c83a 	sub	r2,r2,r4
    c594:	488e983a 	sll	r7,r9,r2
    c598:	310ad83a 	srl	r5,r6,r4
    c59c:	3084983a 	sll	r2,r6,r2
    c5a0:	4912d83a 	srl	r9,r9,r4
    c5a4:	394ab03a 	or	r5,r7,r5
    c5a8:	1004c03a 	cmpne	r2,r2,zero
    c5ac:	288ab03a 	or	r5,r5,r2
    c5b0:	003f5306 	br	c300 <__alt_data_end+0xff00c300>
    c5b4:	4448b03a 	or	r4,r8,r17
    c5b8:	20003e26 	beq	r4,zero,c6b4 <__adddf3+0x61c>
    c5bc:	00c6303a 	nor	r3,zero,r3
    c5c0:	18003a1e 	bne	r3,zero,c6ac <__adddf3+0x614>
    c5c4:	3463c83a 	sub	r17,r6,r17
    c5c8:	4a07c83a 	sub	r3,r9,r8
    c5cc:	344d803a 	cmpltu	r6,r6,r17
    c5d0:	1991c83a 	sub	r8,r3,r6
    c5d4:	1021883a 	mov	r16,r2
    c5d8:	3825883a 	mov	r18,r7
    c5dc:	003f0a06 	br	c208 <__alt_data_end+0xff00c208>
    c5e0:	2023883a 	mov	r17,r4
    c5e4:	003f0d06 	br	c21c <__alt_data_end+0xff00c21c>
    c5e8:	0081ffc4 	movi	r2,2047
    c5ec:	80bf3f1e 	bne	r16,r2,c2ec <__alt_data_end+0xff00c2ec>
    c5f0:	003ec806 	br	c114 <__alt_data_end+0xff00c114>
    c5f4:	0005883a 	mov	r2,zero
    c5f8:	003fb106 	br	c4c0 <__alt_data_end+0xff00c4c0>
    c5fc:	0007883a 	mov	r3,zero
    c600:	003fbc06 	br	c4f4 <__alt_data_end+0xff00c4f4>
    c604:	4444b03a 	or	r2,r8,r17
    c608:	8000871e 	bne	r16,zero,c828 <__adddf3+0x790>
    c60c:	1000ba26 	beq	r2,zero,c8f8 <__adddf3+0x860>
    c610:	4984b03a 	or	r2,r9,r6
    c614:	103ebf26 	beq	r2,zero,c114 <__alt_data_end+0xff00c114>
    c618:	8985883a 	add	r2,r17,r6
    c61c:	4247883a 	add	r3,r8,r9
    c620:	1451803a 	cmpltu	r8,r2,r17
    c624:	40d1883a 	add	r8,r8,r3
    c628:	40c0202c 	andhi	r3,r8,128
    c62c:	1023883a 	mov	r17,r2
    c630:	183f1a26 	beq	r3,zero,c29c <__alt_data_end+0xff00c29c>
    c634:	00bfe034 	movhi	r2,65408
    c638:	10bfffc4 	addi	r2,r2,-1
    c63c:	2021883a 	mov	r16,r4
    c640:	4090703a 	and	r8,r8,r2
    c644:	003eb306 	br	c114 <__alt_data_end+0xff00c114>
    c648:	4444b03a 	or	r2,r8,r17
    c64c:	8000291e 	bne	r16,zero,c6f4 <__adddf3+0x65c>
    c650:	10004b1e 	bne	r2,zero,c780 <__adddf3+0x6e8>
    c654:	4990b03a 	or	r8,r9,r6
    c658:	40008b26 	beq	r8,zero,c888 <__adddf3+0x7f0>
    c65c:	4811883a 	mov	r8,r9
    c660:	3023883a 	mov	r17,r6
    c664:	3825883a 	mov	r18,r7
    c668:	003eaa06 	br	c114 <__alt_data_end+0xff00c114>
    c66c:	1021883a 	mov	r16,r2
    c670:	0011883a 	mov	r8,zero
    c674:	0005883a 	mov	r2,zero
    c678:	003f0f06 	br	c2b8 <__alt_data_end+0xff00c2b8>
    c67c:	217ff804 	addi	r5,r4,-32
    c680:	00800804 	movi	r2,32
    c684:	494ad83a 	srl	r5,r9,r5
    c688:	20807d26 	beq	r4,r2,c880 <__adddf3+0x7e8>
    c68c:	00801004 	movi	r2,64
    c690:	1109c83a 	sub	r4,r2,r4
    c694:	4912983a 	sll	r9,r9,r4
    c698:	498cb03a 	or	r6,r9,r6
    c69c:	300cc03a 	cmpne	r6,r6,zero
    c6a0:	298ab03a 	or	r5,r5,r6
    c6a4:	0013883a 	mov	r9,zero
    c6a8:	003f1506 	br	c300 <__alt_data_end+0xff00c300>
    c6ac:	0101ffc4 	movi	r4,2047
    c6b0:	113f9a1e 	bne	r2,r4,c51c <__alt_data_end+0xff00c51c>
    c6b4:	4811883a 	mov	r8,r9
    c6b8:	3023883a 	mov	r17,r6
    c6bc:	1021883a 	mov	r16,r2
    c6c0:	3825883a 	mov	r18,r7
    c6c4:	003e9306 	br	c114 <__alt_data_end+0xff00c114>
    c6c8:	8000161e 	bne	r16,zero,c724 <__adddf3+0x68c>
    c6cc:	444ab03a 	or	r5,r8,r17
    c6d0:	28005126 	beq	r5,zero,c818 <__adddf3+0x780>
    c6d4:	0108303a 	nor	r4,zero,r4
    c6d8:	20004d1e 	bne	r4,zero,c810 <__adddf3+0x778>
    c6dc:	89a3883a 	add	r17,r17,r6
    c6e0:	4253883a 	add	r9,r8,r9
    c6e4:	898d803a 	cmpltu	r6,r17,r6
    c6e8:	3251883a 	add	r8,r6,r9
    c6ec:	1021883a 	mov	r16,r2
    c6f0:	003f0806 	br	c314 <__alt_data_end+0xff00c314>
    c6f4:	1000301e 	bne	r2,zero,c7b8 <__adddf3+0x720>
    c6f8:	4984b03a 	or	r2,r9,r6
    c6fc:	10007126 	beq	r2,zero,c8c4 <__adddf3+0x82c>
    c700:	4811883a 	mov	r8,r9
    c704:	3023883a 	mov	r17,r6
    c708:	3825883a 	mov	r18,r7
    c70c:	0401ffc4 	movi	r16,2047
    c710:	003e8006 	br	c114 <__alt_data_end+0xff00c114>
    c714:	4462b03a 	or	r17,r8,r17
    c718:	8822c03a 	cmpne	r17,r17,zero
    c71c:	0007883a 	mov	r3,zero
    c720:	003f8b06 	br	c550 <__alt_data_end+0xff00c550>
    c724:	0141ffc4 	movi	r5,2047
    c728:	11403b26 	beq	r2,r5,c818 <__adddf3+0x780>
    c72c:	0109c83a 	sub	r4,zero,r4
    c730:	42002034 	orhi	r8,r8,128
    c734:	01400e04 	movi	r5,56
    c738:	29006716 	blt	r5,r4,c8d8 <__adddf3+0x840>
    c73c:	014007c4 	movi	r5,31
    c740:	29007016 	blt	r5,r4,c904 <__adddf3+0x86c>
    c744:	01400804 	movi	r5,32
    c748:	290bc83a 	sub	r5,r5,r4
    c74c:	4154983a 	sll	r10,r8,r5
    c750:	890ed83a 	srl	r7,r17,r4
    c754:	894a983a 	sll	r5,r17,r5
    c758:	4108d83a 	srl	r4,r8,r4
    c75c:	51e2b03a 	or	r17,r10,r7
    c760:	280ac03a 	cmpne	r5,r5,zero
    c764:	8962b03a 	or	r17,r17,r5
    c768:	89a3883a 	add	r17,r17,r6
    c76c:	2253883a 	add	r9,r4,r9
    c770:	898d803a 	cmpltu	r6,r17,r6
    c774:	3251883a 	add	r8,r6,r9
    c778:	1021883a 	mov	r16,r2
    c77c:	003ee506 	br	c314 <__alt_data_end+0xff00c314>
    c780:	4984b03a 	or	r2,r9,r6
    c784:	103e6326 	beq	r2,zero,c114 <__alt_data_end+0xff00c114>
    c788:	8987c83a 	sub	r3,r17,r6
    c78c:	88c9803a 	cmpltu	r4,r17,r3
    c790:	4245c83a 	sub	r2,r8,r9
    c794:	1105c83a 	sub	r2,r2,r4
    c798:	1100202c 	andhi	r4,r2,128
    c79c:	203ebb26 	beq	r4,zero,c28c <__alt_data_end+0xff00c28c>
    c7a0:	3463c83a 	sub	r17,r6,r17
    c7a4:	4a07c83a 	sub	r3,r9,r8
    c7a8:	344d803a 	cmpltu	r6,r6,r17
    c7ac:	1991c83a 	sub	r8,r3,r6
    c7b0:	3825883a 	mov	r18,r7
    c7b4:	003e5706 	br	c114 <__alt_data_end+0xff00c114>
    c7b8:	4984b03a 	or	r2,r9,r6
    c7bc:	10002e26 	beq	r2,zero,c878 <__adddf3+0x7e0>
    c7c0:	4004d0fa 	srli	r2,r8,3
    c7c4:	8822d0fa 	srli	r17,r17,3
    c7c8:	4010977a 	slli	r8,r8,29
    c7cc:	10c0022c 	andhi	r3,r2,8
    c7d0:	4462b03a 	or	r17,r8,r17
    c7d4:	18000826 	beq	r3,zero,c7f8 <__adddf3+0x760>
    c7d8:	4808d0fa 	srli	r4,r9,3
    c7dc:	20c0022c 	andhi	r3,r4,8
    c7e0:	1800051e 	bne	r3,zero,c7f8 <__adddf3+0x760>
    c7e4:	300cd0fa 	srli	r6,r6,3
    c7e8:	4806977a 	slli	r3,r9,29
    c7ec:	2005883a 	mov	r2,r4
    c7f0:	3825883a 	mov	r18,r7
    c7f4:	19a2b03a 	or	r17,r3,r6
    c7f8:	8810d77a 	srli	r8,r17,29
    c7fc:	100490fa 	slli	r2,r2,3
    c800:	882290fa 	slli	r17,r17,3
    c804:	0401ffc4 	movi	r16,2047
    c808:	4090b03a 	or	r8,r8,r2
    c80c:	003e4106 	br	c114 <__alt_data_end+0xff00c114>
    c810:	0141ffc4 	movi	r5,2047
    c814:	117fc71e 	bne	r2,r5,c734 <__alt_data_end+0xff00c734>
    c818:	4811883a 	mov	r8,r9
    c81c:	3023883a 	mov	r17,r6
    c820:	1021883a 	mov	r16,r2
    c824:	003e3b06 	br	c114 <__alt_data_end+0xff00c114>
    c828:	10002f26 	beq	r2,zero,c8e8 <__adddf3+0x850>
    c82c:	4984b03a 	or	r2,r9,r6
    c830:	10001126 	beq	r2,zero,c878 <__adddf3+0x7e0>
    c834:	4004d0fa 	srli	r2,r8,3
    c838:	8822d0fa 	srli	r17,r17,3
    c83c:	4010977a 	slli	r8,r8,29
    c840:	10c0022c 	andhi	r3,r2,8
    c844:	4462b03a 	or	r17,r8,r17
    c848:	183feb26 	beq	r3,zero,c7f8 <__alt_data_end+0xff00c7f8>
    c84c:	4808d0fa 	srli	r4,r9,3
    c850:	20c0022c 	andhi	r3,r4,8
    c854:	183fe81e 	bne	r3,zero,c7f8 <__alt_data_end+0xff00c7f8>
    c858:	300cd0fa 	srli	r6,r6,3
    c85c:	4806977a 	slli	r3,r9,29
    c860:	2005883a 	mov	r2,r4
    c864:	19a2b03a 	or	r17,r3,r6
    c868:	003fe306 	br	c7f8 <__alt_data_end+0xff00c7f8>
    c86c:	0011883a 	mov	r8,zero
    c870:	0005883a 	mov	r2,zero
    c874:	003e3f06 	br	c174 <__alt_data_end+0xff00c174>
    c878:	0401ffc4 	movi	r16,2047
    c87c:	003e2506 	br	c114 <__alt_data_end+0xff00c114>
    c880:	0013883a 	mov	r9,zero
    c884:	003f8406 	br	c698 <__alt_data_end+0xff00c698>
    c888:	0005883a 	mov	r2,zero
    c88c:	0007883a 	mov	r3,zero
    c890:	003e8906 	br	c2b8 <__alt_data_end+0xff00c2b8>
    c894:	197ff804 	addi	r5,r3,-32
    c898:	01000804 	movi	r4,32
    c89c:	414ad83a 	srl	r5,r8,r5
    c8a0:	19002426 	beq	r3,r4,c934 <__adddf3+0x89c>
    c8a4:	01001004 	movi	r4,64
    c8a8:	20c7c83a 	sub	r3,r4,r3
    c8ac:	40c6983a 	sll	r3,r8,r3
    c8b0:	1c46b03a 	or	r3,r3,r17
    c8b4:	1806c03a 	cmpne	r3,r3,zero
    c8b8:	28e2b03a 	or	r17,r5,r3
    c8bc:	0007883a 	mov	r3,zero
    c8c0:	003f2306 	br	c550 <__alt_data_end+0xff00c550>
    c8c4:	0007883a 	mov	r3,zero
    c8c8:	5811883a 	mov	r8,r11
    c8cc:	00bfffc4 	movi	r2,-1
    c8d0:	0401ffc4 	movi	r16,2047
    c8d4:	003e7806 	br	c2b8 <__alt_data_end+0xff00c2b8>
    c8d8:	4462b03a 	or	r17,r8,r17
    c8dc:	8822c03a 	cmpne	r17,r17,zero
    c8e0:	0009883a 	mov	r4,zero
    c8e4:	003fa006 	br	c768 <__alt_data_end+0xff00c768>
    c8e8:	4811883a 	mov	r8,r9
    c8ec:	3023883a 	mov	r17,r6
    c8f0:	0401ffc4 	movi	r16,2047
    c8f4:	003e0706 	br	c114 <__alt_data_end+0xff00c114>
    c8f8:	4811883a 	mov	r8,r9
    c8fc:	3023883a 	mov	r17,r6
    c900:	003e0406 	br	c114 <__alt_data_end+0xff00c114>
    c904:	21fff804 	addi	r7,r4,-32
    c908:	01400804 	movi	r5,32
    c90c:	41ced83a 	srl	r7,r8,r7
    c910:	21400a26 	beq	r4,r5,c93c <__adddf3+0x8a4>
    c914:	01401004 	movi	r5,64
    c918:	2909c83a 	sub	r4,r5,r4
    c91c:	4108983a 	sll	r4,r8,r4
    c920:	2448b03a 	or	r4,r4,r17
    c924:	2008c03a 	cmpne	r4,r4,zero
    c928:	3922b03a 	or	r17,r7,r4
    c92c:	0009883a 	mov	r4,zero
    c930:	003f8d06 	br	c768 <__alt_data_end+0xff00c768>
    c934:	0007883a 	mov	r3,zero
    c938:	003fdd06 	br	c8b0 <__alt_data_end+0xff00c8b0>
    c93c:	0009883a 	mov	r4,zero
    c940:	003ff706 	br	c920 <__alt_data_end+0xff00c920>

0000c944 <__divdf3>:
    c944:	defff204 	addi	sp,sp,-56
    c948:	dd400915 	stw	r21,36(sp)
    c94c:	282ad53a 	srli	r21,r5,20
    c950:	dd000815 	stw	r20,32(sp)
    c954:	2828d7fa 	srli	r20,r5,31
    c958:	dc000415 	stw	r16,16(sp)
    c95c:	04000434 	movhi	r16,16
    c960:	df000c15 	stw	fp,48(sp)
    c964:	843fffc4 	addi	r16,r16,-1
    c968:	dfc00d15 	stw	ra,52(sp)
    c96c:	ddc00b15 	stw	r23,44(sp)
    c970:	dd800a15 	stw	r22,40(sp)
    c974:	dcc00715 	stw	r19,28(sp)
    c978:	dc800615 	stw	r18,24(sp)
    c97c:	dc400515 	stw	r17,20(sp)
    c980:	ad41ffcc 	andi	r21,r21,2047
    c984:	2c20703a 	and	r16,r5,r16
    c988:	a7003fcc 	andi	fp,r20,255
    c98c:	a8006126 	beq	r21,zero,cb14 <__divdf3+0x1d0>
    c990:	0081ffc4 	movi	r2,2047
    c994:	2025883a 	mov	r18,r4
    c998:	a8803726 	beq	r21,r2,ca78 <__divdf3+0x134>
    c99c:	80800434 	orhi	r2,r16,16
    c9a0:	100490fa 	slli	r2,r2,3
    c9a4:	2020d77a 	srli	r16,r4,29
    c9a8:	202490fa 	slli	r18,r4,3
    c9ac:	ad7f0044 	addi	r21,r21,-1023
    c9b0:	80a0b03a 	or	r16,r16,r2
    c9b4:	0027883a 	mov	r19,zero
    c9b8:	0013883a 	mov	r9,zero
    c9bc:	3804d53a 	srli	r2,r7,20
    c9c0:	382cd7fa 	srli	r22,r7,31
    c9c4:	04400434 	movhi	r17,16
    c9c8:	8c7fffc4 	addi	r17,r17,-1
    c9cc:	1081ffcc 	andi	r2,r2,2047
    c9d0:	3011883a 	mov	r8,r6
    c9d4:	3c62703a 	and	r17,r7,r17
    c9d8:	b5c03fcc 	andi	r23,r22,255
    c9dc:	10006c26 	beq	r2,zero,cb90 <__divdf3+0x24c>
    c9e0:	00c1ffc4 	movi	r3,2047
    c9e4:	10c06426 	beq	r2,r3,cb78 <__divdf3+0x234>
    c9e8:	88c00434 	orhi	r3,r17,16
    c9ec:	180690fa 	slli	r3,r3,3
    c9f0:	3022d77a 	srli	r17,r6,29
    c9f4:	301090fa 	slli	r8,r6,3
    c9f8:	10bf0044 	addi	r2,r2,-1023
    c9fc:	88e2b03a 	or	r17,r17,r3
    ca00:	000f883a 	mov	r7,zero
    ca04:	a58cf03a 	xor	r6,r20,r22
    ca08:	3cc8b03a 	or	r4,r7,r19
    ca0c:	a8abc83a 	sub	r21,r21,r2
    ca10:	008003c4 	movi	r2,15
    ca14:	3007883a 	mov	r3,r6
    ca18:	34c03fcc 	andi	r19,r6,255
    ca1c:	11009036 	bltu	r2,r4,cc60 <__divdf3+0x31c>
    ca20:	200890ba 	slli	r4,r4,2
    ca24:	00800074 	movhi	r2,1
    ca28:	10b28e04 	addi	r2,r2,-13768
    ca2c:	2089883a 	add	r4,r4,r2
    ca30:	20800017 	ldw	r2,0(r4)
    ca34:	1000683a 	jmp	r2
    ca38:	0000cc60 	cmpeqi	zero,zero,817
    ca3c:	0000cab0 	cmpltui	zero,zero,810
    ca40:	0000cc50 	cmplti	zero,zero,817
    ca44:	0000caa4 	muli	zero,zero,810
    ca48:	0000cc50 	cmplti	zero,zero,817
    ca4c:	0000cc24 	muli	zero,zero,816
    ca50:	0000cc50 	cmplti	zero,zero,817
    ca54:	0000caa4 	muli	zero,zero,810
    ca58:	0000cab0 	cmpltui	zero,zero,810
    ca5c:	0000cab0 	cmpltui	zero,zero,810
    ca60:	0000cc24 	muli	zero,zero,816
    ca64:	0000caa4 	muli	zero,zero,810
    ca68:	0000ca94 	movui	zero,810
    ca6c:	0000ca94 	movui	zero,810
    ca70:	0000ca94 	movui	zero,810
    ca74:	0000cf44 	movi	zero,829
    ca78:	2404b03a 	or	r2,r4,r16
    ca7c:	1000661e 	bne	r2,zero,cc18 <__divdf3+0x2d4>
    ca80:	04c00204 	movi	r19,8
    ca84:	0021883a 	mov	r16,zero
    ca88:	0025883a 	mov	r18,zero
    ca8c:	02400084 	movi	r9,2
    ca90:	003fca06 	br	c9bc <__alt_data_end+0xff00c9bc>
    ca94:	8023883a 	mov	r17,r16
    ca98:	9011883a 	mov	r8,r18
    ca9c:	e02f883a 	mov	r23,fp
    caa0:	480f883a 	mov	r7,r9
    caa4:	00800084 	movi	r2,2
    caa8:	3881311e 	bne	r7,r2,cf70 <__divdf3+0x62c>
    caac:	b827883a 	mov	r19,r23
    cab0:	98c0004c 	andi	r3,r19,1
    cab4:	0081ffc4 	movi	r2,2047
    cab8:	000b883a 	mov	r5,zero
    cabc:	0025883a 	mov	r18,zero
    cac0:	1004953a 	slli	r2,r2,20
    cac4:	18c03fcc 	andi	r3,r3,255
    cac8:	04400434 	movhi	r17,16
    cacc:	8c7fffc4 	addi	r17,r17,-1
    cad0:	180697fa 	slli	r3,r3,31
    cad4:	2c4a703a 	and	r5,r5,r17
    cad8:	288ab03a 	or	r5,r5,r2
    cadc:	28c6b03a 	or	r3,r5,r3
    cae0:	9005883a 	mov	r2,r18
    cae4:	dfc00d17 	ldw	ra,52(sp)
    cae8:	df000c17 	ldw	fp,48(sp)
    caec:	ddc00b17 	ldw	r23,44(sp)
    caf0:	dd800a17 	ldw	r22,40(sp)
    caf4:	dd400917 	ldw	r21,36(sp)
    caf8:	dd000817 	ldw	r20,32(sp)
    cafc:	dcc00717 	ldw	r19,28(sp)
    cb00:	dc800617 	ldw	r18,24(sp)
    cb04:	dc400517 	ldw	r17,20(sp)
    cb08:	dc000417 	ldw	r16,16(sp)
    cb0c:	dec00e04 	addi	sp,sp,56
    cb10:	f800283a 	ret
    cb14:	2404b03a 	or	r2,r4,r16
    cb18:	2027883a 	mov	r19,r4
    cb1c:	10003926 	beq	r2,zero,cc04 <__divdf3+0x2c0>
    cb20:	80012e26 	beq	r16,zero,cfdc <__divdf3+0x698>
    cb24:	8009883a 	mov	r4,r16
    cb28:	d9800315 	stw	r6,12(sp)
    cb2c:	d9c00215 	stw	r7,8(sp)
    cb30:	000e69c0 	call	e69c <__clzsi2>
    cb34:	d9800317 	ldw	r6,12(sp)
    cb38:	d9c00217 	ldw	r7,8(sp)
    cb3c:	113ffd44 	addi	r4,r2,-11
    cb40:	00c00704 	movi	r3,28
    cb44:	19012116 	blt	r3,r4,cfcc <__divdf3+0x688>
    cb48:	00c00744 	movi	r3,29
    cb4c:	147ffe04 	addi	r17,r2,-8
    cb50:	1907c83a 	sub	r3,r3,r4
    cb54:	8460983a 	sll	r16,r16,r17
    cb58:	98c6d83a 	srl	r3,r19,r3
    cb5c:	9c64983a 	sll	r18,r19,r17
    cb60:	1c20b03a 	or	r16,r3,r16
    cb64:	1080fcc4 	addi	r2,r2,1011
    cb68:	00abc83a 	sub	r21,zero,r2
    cb6c:	0027883a 	mov	r19,zero
    cb70:	0013883a 	mov	r9,zero
    cb74:	003f9106 	br	c9bc <__alt_data_end+0xff00c9bc>
    cb78:	3446b03a 	or	r3,r6,r17
    cb7c:	18001f1e 	bne	r3,zero,cbfc <__divdf3+0x2b8>
    cb80:	0023883a 	mov	r17,zero
    cb84:	0011883a 	mov	r8,zero
    cb88:	01c00084 	movi	r7,2
    cb8c:	003f9d06 	br	ca04 <__alt_data_end+0xff00ca04>
    cb90:	3446b03a 	or	r3,r6,r17
    cb94:	18001526 	beq	r3,zero,cbec <__divdf3+0x2a8>
    cb98:	88011b26 	beq	r17,zero,d008 <__divdf3+0x6c4>
    cb9c:	8809883a 	mov	r4,r17
    cba0:	d9800315 	stw	r6,12(sp)
    cba4:	da400115 	stw	r9,4(sp)
    cba8:	000e69c0 	call	e69c <__clzsi2>
    cbac:	d9800317 	ldw	r6,12(sp)
    cbb0:	da400117 	ldw	r9,4(sp)
    cbb4:	113ffd44 	addi	r4,r2,-11
    cbb8:	00c00704 	movi	r3,28
    cbbc:	19010e16 	blt	r3,r4,cff8 <__divdf3+0x6b4>
    cbc0:	00c00744 	movi	r3,29
    cbc4:	123ffe04 	addi	r8,r2,-8
    cbc8:	1907c83a 	sub	r3,r3,r4
    cbcc:	8a22983a 	sll	r17,r17,r8
    cbd0:	30c6d83a 	srl	r3,r6,r3
    cbd4:	3210983a 	sll	r8,r6,r8
    cbd8:	1c62b03a 	or	r17,r3,r17
    cbdc:	1080fcc4 	addi	r2,r2,1011
    cbe0:	0085c83a 	sub	r2,zero,r2
    cbe4:	000f883a 	mov	r7,zero
    cbe8:	003f8606 	br	ca04 <__alt_data_end+0xff00ca04>
    cbec:	0023883a 	mov	r17,zero
    cbf0:	0011883a 	mov	r8,zero
    cbf4:	01c00044 	movi	r7,1
    cbf8:	003f8206 	br	ca04 <__alt_data_end+0xff00ca04>
    cbfc:	01c000c4 	movi	r7,3
    cc00:	003f8006 	br	ca04 <__alt_data_end+0xff00ca04>
    cc04:	04c00104 	movi	r19,4
    cc08:	0021883a 	mov	r16,zero
    cc0c:	0025883a 	mov	r18,zero
    cc10:	02400044 	movi	r9,1
    cc14:	003f6906 	br	c9bc <__alt_data_end+0xff00c9bc>
    cc18:	04c00304 	movi	r19,12
    cc1c:	024000c4 	movi	r9,3
    cc20:	003f6606 	br	c9bc <__alt_data_end+0xff00c9bc>
    cc24:	01400434 	movhi	r5,16
    cc28:	0007883a 	mov	r3,zero
    cc2c:	297fffc4 	addi	r5,r5,-1
    cc30:	04bfffc4 	movi	r18,-1
    cc34:	0081ffc4 	movi	r2,2047
    cc38:	003fa106 	br	cac0 <__alt_data_end+0xff00cac0>
    cc3c:	00c00044 	movi	r3,1
    cc40:	1887c83a 	sub	r3,r3,r2
    cc44:	01000e04 	movi	r4,56
    cc48:	20c1210e 	bge	r4,r3,d0d0 <__divdf3+0x78c>
    cc4c:	98c0004c 	andi	r3,r19,1
    cc50:	0005883a 	mov	r2,zero
    cc54:	000b883a 	mov	r5,zero
    cc58:	0025883a 	mov	r18,zero
    cc5c:	003f9806 	br	cac0 <__alt_data_end+0xff00cac0>
    cc60:	8c00fd36 	bltu	r17,r16,d058 <__divdf3+0x714>
    cc64:	8440fb26 	beq	r16,r17,d054 <__divdf3+0x710>
    cc68:	8007883a 	mov	r3,r16
    cc6c:	ad7fffc4 	addi	r21,r21,-1
    cc70:	0021883a 	mov	r16,zero
    cc74:	4004d63a 	srli	r2,r8,24
    cc78:	8822923a 	slli	r17,r17,8
    cc7c:	1809883a 	mov	r4,r3
    cc80:	402c923a 	slli	r22,r8,8
    cc84:	88b8b03a 	or	fp,r17,r2
    cc88:	e028d43a 	srli	r20,fp,16
    cc8c:	d8c00015 	stw	r3,0(sp)
    cc90:	e5ffffcc 	andi	r23,fp,65535
    cc94:	a00b883a 	mov	r5,r20
    cc98:	000bfdc0 	call	bfdc <__udivsi3>
    cc9c:	d8c00017 	ldw	r3,0(sp)
    cca0:	a00b883a 	mov	r5,r20
    cca4:	d8800315 	stw	r2,12(sp)
    cca8:	1809883a 	mov	r4,r3
    ccac:	000c0400 	call	c040 <__umodsi3>
    ccb0:	d9800317 	ldw	r6,12(sp)
    ccb4:	1006943a 	slli	r3,r2,16
    ccb8:	9004d43a 	srli	r2,r18,16
    ccbc:	b9a3383a 	mul	r17,r23,r6
    ccc0:	10c4b03a 	or	r2,r2,r3
    ccc4:	1440062e 	bgeu	r2,r17,cce0 <__divdf3+0x39c>
    ccc8:	1705883a 	add	r2,r2,fp
    cccc:	30ffffc4 	addi	r3,r6,-1
    ccd0:	1700ee36 	bltu	r2,fp,d08c <__divdf3+0x748>
    ccd4:	1440ed2e 	bgeu	r2,r17,d08c <__divdf3+0x748>
    ccd8:	31bfff84 	addi	r6,r6,-2
    ccdc:	1705883a 	add	r2,r2,fp
    cce0:	1463c83a 	sub	r17,r2,r17
    cce4:	a00b883a 	mov	r5,r20
    cce8:	8809883a 	mov	r4,r17
    ccec:	d9800315 	stw	r6,12(sp)
    ccf0:	000bfdc0 	call	bfdc <__udivsi3>
    ccf4:	a00b883a 	mov	r5,r20
    ccf8:	8809883a 	mov	r4,r17
    ccfc:	d8800215 	stw	r2,8(sp)
    cd00:	000c0400 	call	c040 <__umodsi3>
    cd04:	d9c00217 	ldw	r7,8(sp)
    cd08:	1004943a 	slli	r2,r2,16
    cd0c:	94bfffcc 	andi	r18,r18,65535
    cd10:	b9d1383a 	mul	r8,r23,r7
    cd14:	90a4b03a 	or	r18,r18,r2
    cd18:	d9800317 	ldw	r6,12(sp)
    cd1c:	9200062e 	bgeu	r18,r8,cd38 <__divdf3+0x3f4>
    cd20:	9725883a 	add	r18,r18,fp
    cd24:	38bfffc4 	addi	r2,r7,-1
    cd28:	9700d636 	bltu	r18,fp,d084 <__divdf3+0x740>
    cd2c:	9200d52e 	bgeu	r18,r8,d084 <__divdf3+0x740>
    cd30:	39ffff84 	addi	r7,r7,-2
    cd34:	9725883a 	add	r18,r18,fp
    cd38:	3004943a 	slli	r2,r6,16
    cd3c:	b012d43a 	srli	r9,r22,16
    cd40:	b1bfffcc 	andi	r6,r22,65535
    cd44:	11e2b03a 	or	r17,r2,r7
    cd48:	8806d43a 	srli	r3,r17,16
    cd4c:	893fffcc 	andi	r4,r17,65535
    cd50:	218b383a 	mul	r5,r4,r6
    cd54:	30c5383a 	mul	r2,r6,r3
    cd58:	2249383a 	mul	r4,r4,r9
    cd5c:	280ed43a 	srli	r7,r5,16
    cd60:	9225c83a 	sub	r18,r18,r8
    cd64:	2089883a 	add	r4,r4,r2
    cd68:	3909883a 	add	r4,r7,r4
    cd6c:	1a47383a 	mul	r3,r3,r9
    cd70:	2080022e 	bgeu	r4,r2,cd7c <__divdf3+0x438>
    cd74:	00800074 	movhi	r2,1
    cd78:	1887883a 	add	r3,r3,r2
    cd7c:	2004d43a 	srli	r2,r4,16
    cd80:	2008943a 	slli	r4,r4,16
    cd84:	297fffcc 	andi	r5,r5,65535
    cd88:	10c7883a 	add	r3,r2,r3
    cd8c:	2149883a 	add	r4,r4,r5
    cd90:	90c0a536 	bltu	r18,r3,d028 <__divdf3+0x6e4>
    cd94:	90c0bf26 	beq	r18,r3,d094 <__divdf3+0x750>
    cd98:	90c7c83a 	sub	r3,r18,r3
    cd9c:	810fc83a 	sub	r7,r16,r4
    cda0:	81e5803a 	cmpltu	r18,r16,r7
    cda4:	1ca5c83a 	sub	r18,r3,r18
    cda8:	e480c126 	beq	fp,r18,d0b0 <__divdf3+0x76c>
    cdac:	a00b883a 	mov	r5,r20
    cdb0:	9009883a 	mov	r4,r18
    cdb4:	d9800315 	stw	r6,12(sp)
    cdb8:	d9c00215 	stw	r7,8(sp)
    cdbc:	da400115 	stw	r9,4(sp)
    cdc0:	000bfdc0 	call	bfdc <__udivsi3>
    cdc4:	a00b883a 	mov	r5,r20
    cdc8:	9009883a 	mov	r4,r18
    cdcc:	d8800015 	stw	r2,0(sp)
    cdd0:	000c0400 	call	c040 <__umodsi3>
    cdd4:	d9c00217 	ldw	r7,8(sp)
    cdd8:	da000017 	ldw	r8,0(sp)
    cddc:	1006943a 	slli	r3,r2,16
    cde0:	3804d43a 	srli	r2,r7,16
    cde4:	ba21383a 	mul	r16,r23,r8
    cde8:	d9800317 	ldw	r6,12(sp)
    cdec:	10c4b03a 	or	r2,r2,r3
    cdf0:	da400117 	ldw	r9,4(sp)
    cdf4:	1400062e 	bgeu	r2,r16,ce10 <__divdf3+0x4cc>
    cdf8:	1705883a 	add	r2,r2,fp
    cdfc:	40ffffc4 	addi	r3,r8,-1
    ce00:	1700ad36 	bltu	r2,fp,d0b8 <__divdf3+0x774>
    ce04:	1400ac2e 	bgeu	r2,r16,d0b8 <__divdf3+0x774>
    ce08:	423fff84 	addi	r8,r8,-2
    ce0c:	1705883a 	add	r2,r2,fp
    ce10:	1421c83a 	sub	r16,r2,r16
    ce14:	a00b883a 	mov	r5,r20
    ce18:	8009883a 	mov	r4,r16
    ce1c:	d9800315 	stw	r6,12(sp)
    ce20:	d9c00215 	stw	r7,8(sp)
    ce24:	da000015 	stw	r8,0(sp)
    ce28:	da400115 	stw	r9,4(sp)
    ce2c:	000bfdc0 	call	bfdc <__udivsi3>
    ce30:	8009883a 	mov	r4,r16
    ce34:	a00b883a 	mov	r5,r20
    ce38:	1025883a 	mov	r18,r2
    ce3c:	000c0400 	call	c040 <__umodsi3>
    ce40:	d9c00217 	ldw	r7,8(sp)
    ce44:	1004943a 	slli	r2,r2,16
    ce48:	bcaf383a 	mul	r23,r23,r18
    ce4c:	393fffcc 	andi	r4,r7,65535
    ce50:	2088b03a 	or	r4,r4,r2
    ce54:	d9800317 	ldw	r6,12(sp)
    ce58:	da000017 	ldw	r8,0(sp)
    ce5c:	da400117 	ldw	r9,4(sp)
    ce60:	25c0062e 	bgeu	r4,r23,ce7c <__divdf3+0x538>
    ce64:	2709883a 	add	r4,r4,fp
    ce68:	90bfffc4 	addi	r2,r18,-1
    ce6c:	27009436 	bltu	r4,fp,d0c0 <__divdf3+0x77c>
    ce70:	25c0932e 	bgeu	r4,r23,d0c0 <__divdf3+0x77c>
    ce74:	94bfff84 	addi	r18,r18,-2
    ce78:	2709883a 	add	r4,r4,fp
    ce7c:	4004943a 	slli	r2,r8,16
    ce80:	25efc83a 	sub	r23,r4,r23
    ce84:	1490b03a 	or	r8,r2,r18
    ce88:	4008d43a 	srli	r4,r8,16
    ce8c:	40ffffcc 	andi	r3,r8,65535
    ce90:	30c5383a 	mul	r2,r6,r3
    ce94:	1a47383a 	mul	r3,r3,r9
    ce98:	310d383a 	mul	r6,r6,r4
    ce9c:	100ad43a 	srli	r5,r2,16
    cea0:	4913383a 	mul	r9,r9,r4
    cea4:	1987883a 	add	r3,r3,r6
    cea8:	28c7883a 	add	r3,r5,r3
    ceac:	1980022e 	bgeu	r3,r6,ceb8 <__divdf3+0x574>
    ceb0:	01000074 	movhi	r4,1
    ceb4:	4913883a 	add	r9,r9,r4
    ceb8:	1808d43a 	srli	r4,r3,16
    cebc:	1806943a 	slli	r3,r3,16
    cec0:	10bfffcc 	andi	r2,r2,65535
    cec4:	2253883a 	add	r9,r4,r9
    cec8:	1887883a 	add	r3,r3,r2
    cecc:	ba403836 	bltu	r23,r9,cfb0 <__divdf3+0x66c>
    ced0:	ba403626 	beq	r23,r9,cfac <__divdf3+0x668>
    ced4:	42000054 	ori	r8,r8,1
    ced8:	a880ffc4 	addi	r2,r21,1023
    cedc:	00bf570e 	bge	zero,r2,cc3c <__alt_data_end+0xff00cc3c>
    cee0:	40c001cc 	andi	r3,r8,7
    cee4:	18000726 	beq	r3,zero,cf04 <__divdf3+0x5c0>
    cee8:	40c003cc 	andi	r3,r8,15
    ceec:	01000104 	movi	r4,4
    cef0:	19000426 	beq	r3,r4,cf04 <__divdf3+0x5c0>
    cef4:	4107883a 	add	r3,r8,r4
    cef8:	1a11803a 	cmpltu	r8,r3,r8
    cefc:	8a23883a 	add	r17,r17,r8
    cf00:	1811883a 	mov	r8,r3
    cf04:	88c0402c 	andhi	r3,r17,256
    cf08:	18000426 	beq	r3,zero,cf1c <__divdf3+0x5d8>
    cf0c:	00ffc034 	movhi	r3,65280
    cf10:	18ffffc4 	addi	r3,r3,-1
    cf14:	a8810004 	addi	r2,r21,1024
    cf18:	88e2703a 	and	r17,r17,r3
    cf1c:	00c1ff84 	movi	r3,2046
    cf20:	18bee316 	blt	r3,r2,cab0 <__alt_data_end+0xff00cab0>
    cf24:	8824977a 	slli	r18,r17,29
    cf28:	4010d0fa 	srli	r8,r8,3
    cf2c:	8822927a 	slli	r17,r17,9
    cf30:	1081ffcc 	andi	r2,r2,2047
    cf34:	9224b03a 	or	r18,r18,r8
    cf38:	880ad33a 	srli	r5,r17,12
    cf3c:	98c0004c 	andi	r3,r19,1
    cf40:	003edf06 	br	cac0 <__alt_data_end+0xff00cac0>
    cf44:	8080022c 	andhi	r2,r16,8
    cf48:	10001226 	beq	r2,zero,cf94 <__divdf3+0x650>
    cf4c:	8880022c 	andhi	r2,r17,8
    cf50:	1000101e 	bne	r2,zero,cf94 <__divdf3+0x650>
    cf54:	00800434 	movhi	r2,16
    cf58:	89400234 	orhi	r5,r17,8
    cf5c:	10bfffc4 	addi	r2,r2,-1
    cf60:	b007883a 	mov	r3,r22
    cf64:	288a703a 	and	r5,r5,r2
    cf68:	4025883a 	mov	r18,r8
    cf6c:	003f3106 	br	cc34 <__alt_data_end+0xff00cc34>
    cf70:	008000c4 	movi	r2,3
    cf74:	3880a626 	beq	r7,r2,d210 <__divdf3+0x8cc>
    cf78:	00800044 	movi	r2,1
    cf7c:	3880521e 	bne	r7,r2,d0c8 <__divdf3+0x784>
    cf80:	b807883a 	mov	r3,r23
    cf84:	0005883a 	mov	r2,zero
    cf88:	000b883a 	mov	r5,zero
    cf8c:	0025883a 	mov	r18,zero
    cf90:	003ecb06 	br	cac0 <__alt_data_end+0xff00cac0>
    cf94:	00800434 	movhi	r2,16
    cf98:	81400234 	orhi	r5,r16,8
    cf9c:	10bfffc4 	addi	r2,r2,-1
    cfa0:	a007883a 	mov	r3,r20
    cfa4:	288a703a 	and	r5,r5,r2
    cfa8:	003f2206 	br	cc34 <__alt_data_end+0xff00cc34>
    cfac:	183fca26 	beq	r3,zero,ced8 <__alt_data_end+0xff00ced8>
    cfb0:	e5ef883a 	add	r23,fp,r23
    cfb4:	40bfffc4 	addi	r2,r8,-1
    cfb8:	bf00392e 	bgeu	r23,fp,d0a0 <__divdf3+0x75c>
    cfbc:	1011883a 	mov	r8,r2
    cfc0:	ba7fc41e 	bne	r23,r9,ced4 <__alt_data_end+0xff00ced4>
    cfc4:	b0ffc31e 	bne	r22,r3,ced4 <__alt_data_end+0xff00ced4>
    cfc8:	003fc306 	br	ced8 <__alt_data_end+0xff00ced8>
    cfcc:	143ff604 	addi	r16,r2,-40
    cfd0:	9c20983a 	sll	r16,r19,r16
    cfd4:	0025883a 	mov	r18,zero
    cfd8:	003ee206 	br	cb64 <__alt_data_end+0xff00cb64>
    cfdc:	d9800315 	stw	r6,12(sp)
    cfe0:	d9c00215 	stw	r7,8(sp)
    cfe4:	000e69c0 	call	e69c <__clzsi2>
    cfe8:	10800804 	addi	r2,r2,32
    cfec:	d9c00217 	ldw	r7,8(sp)
    cff0:	d9800317 	ldw	r6,12(sp)
    cff4:	003ed106 	br	cb3c <__alt_data_end+0xff00cb3c>
    cff8:	147ff604 	addi	r17,r2,-40
    cffc:	3462983a 	sll	r17,r6,r17
    d000:	0011883a 	mov	r8,zero
    d004:	003ef506 	br	cbdc <__alt_data_end+0xff00cbdc>
    d008:	3009883a 	mov	r4,r6
    d00c:	d9800315 	stw	r6,12(sp)
    d010:	da400115 	stw	r9,4(sp)
    d014:	000e69c0 	call	e69c <__clzsi2>
    d018:	10800804 	addi	r2,r2,32
    d01c:	da400117 	ldw	r9,4(sp)
    d020:	d9800317 	ldw	r6,12(sp)
    d024:	003ee306 	br	cbb4 <__alt_data_end+0xff00cbb4>
    d028:	85a1883a 	add	r16,r16,r22
    d02c:	8585803a 	cmpltu	r2,r16,r22
    d030:	1705883a 	add	r2,r2,fp
    d034:	14a5883a 	add	r18,r2,r18
    d038:	88bfffc4 	addi	r2,r17,-1
    d03c:	e4800c2e 	bgeu	fp,r18,d070 <__divdf3+0x72c>
    d040:	90c03e36 	bltu	r18,r3,d13c <__divdf3+0x7f8>
    d044:	1c806926 	beq	r3,r18,d1ec <__divdf3+0x8a8>
    d048:	90c7c83a 	sub	r3,r18,r3
    d04c:	1023883a 	mov	r17,r2
    d050:	003f5206 	br	cd9c <__alt_data_end+0xff00cd9c>
    d054:	923f0436 	bltu	r18,r8,cc68 <__alt_data_end+0xff00cc68>
    d058:	800897fa 	slli	r4,r16,31
    d05c:	9004d07a 	srli	r2,r18,1
    d060:	8006d07a 	srli	r3,r16,1
    d064:	902097fa 	slli	r16,r18,31
    d068:	20a4b03a 	or	r18,r4,r2
    d06c:	003f0106 	br	cc74 <__alt_data_end+0xff00cc74>
    d070:	e4bff51e 	bne	fp,r18,d048 <__alt_data_end+0xff00d048>
    d074:	85bff22e 	bgeu	r16,r22,d040 <__alt_data_end+0xff00d040>
    d078:	e0c7c83a 	sub	r3,fp,r3
    d07c:	1023883a 	mov	r17,r2
    d080:	003f4606 	br	cd9c <__alt_data_end+0xff00cd9c>
    d084:	100f883a 	mov	r7,r2
    d088:	003f2b06 	br	cd38 <__alt_data_end+0xff00cd38>
    d08c:	180d883a 	mov	r6,r3
    d090:	003f1306 	br	cce0 <__alt_data_end+0xff00cce0>
    d094:	813fe436 	bltu	r16,r4,d028 <__alt_data_end+0xff00d028>
    d098:	0007883a 	mov	r3,zero
    d09c:	003f3f06 	br	cd9c <__alt_data_end+0xff00cd9c>
    d0a0:	ba402c36 	bltu	r23,r9,d154 <__divdf3+0x810>
    d0a4:	4dc05426 	beq	r9,r23,d1f8 <__divdf3+0x8b4>
    d0a8:	1011883a 	mov	r8,r2
    d0ac:	003f8906 	br	ced4 <__alt_data_end+0xff00ced4>
    d0b0:	023fffc4 	movi	r8,-1
    d0b4:	003f8806 	br	ced8 <__alt_data_end+0xff00ced8>
    d0b8:	1811883a 	mov	r8,r3
    d0bc:	003f5406 	br	ce10 <__alt_data_end+0xff00ce10>
    d0c0:	1025883a 	mov	r18,r2
    d0c4:	003f6d06 	br	ce7c <__alt_data_end+0xff00ce7c>
    d0c8:	b827883a 	mov	r19,r23
    d0cc:	003f8206 	br	ced8 <__alt_data_end+0xff00ced8>
    d0d0:	010007c4 	movi	r4,31
    d0d4:	20c02616 	blt	r4,r3,d170 <__divdf3+0x82c>
    d0d8:	00800804 	movi	r2,32
    d0dc:	10c5c83a 	sub	r2,r2,r3
    d0e0:	888a983a 	sll	r5,r17,r2
    d0e4:	40c8d83a 	srl	r4,r8,r3
    d0e8:	4084983a 	sll	r2,r8,r2
    d0ec:	88e2d83a 	srl	r17,r17,r3
    d0f0:	2906b03a 	or	r3,r5,r4
    d0f4:	1004c03a 	cmpne	r2,r2,zero
    d0f8:	1886b03a 	or	r3,r3,r2
    d0fc:	188001cc 	andi	r2,r3,7
    d100:	10000726 	beq	r2,zero,d120 <__divdf3+0x7dc>
    d104:	188003cc 	andi	r2,r3,15
    d108:	01000104 	movi	r4,4
    d10c:	11000426 	beq	r2,r4,d120 <__divdf3+0x7dc>
    d110:	1805883a 	mov	r2,r3
    d114:	10c00104 	addi	r3,r2,4
    d118:	1885803a 	cmpltu	r2,r3,r2
    d11c:	88a3883a 	add	r17,r17,r2
    d120:	8880202c 	andhi	r2,r17,128
    d124:	10002726 	beq	r2,zero,d1c4 <__divdf3+0x880>
    d128:	98c0004c 	andi	r3,r19,1
    d12c:	00800044 	movi	r2,1
    d130:	000b883a 	mov	r5,zero
    d134:	0025883a 	mov	r18,zero
    d138:	003e6106 	br	cac0 <__alt_data_end+0xff00cac0>
    d13c:	85a1883a 	add	r16,r16,r22
    d140:	8585803a 	cmpltu	r2,r16,r22
    d144:	1705883a 	add	r2,r2,fp
    d148:	14a5883a 	add	r18,r2,r18
    d14c:	8c7fff84 	addi	r17,r17,-2
    d150:	003f1106 	br	cd98 <__alt_data_end+0xff00cd98>
    d154:	b589883a 	add	r4,r22,r22
    d158:	25ad803a 	cmpltu	r22,r4,r22
    d15c:	b739883a 	add	fp,r22,fp
    d160:	40bfff84 	addi	r2,r8,-2
    d164:	bf2f883a 	add	r23,r23,fp
    d168:	202d883a 	mov	r22,r4
    d16c:	003f9306 	br	cfbc <__alt_data_end+0xff00cfbc>
    d170:	013ff844 	movi	r4,-31
    d174:	2085c83a 	sub	r2,r4,r2
    d178:	8888d83a 	srl	r4,r17,r2
    d17c:	00800804 	movi	r2,32
    d180:	18802126 	beq	r3,r2,d208 <__divdf3+0x8c4>
    d184:	00801004 	movi	r2,64
    d188:	10c5c83a 	sub	r2,r2,r3
    d18c:	8884983a 	sll	r2,r17,r2
    d190:	1204b03a 	or	r2,r2,r8
    d194:	1004c03a 	cmpne	r2,r2,zero
    d198:	2084b03a 	or	r2,r4,r2
    d19c:	144001cc 	andi	r17,r2,7
    d1a0:	88000d1e 	bne	r17,zero,d1d8 <__divdf3+0x894>
    d1a4:	000b883a 	mov	r5,zero
    d1a8:	1024d0fa 	srli	r18,r2,3
    d1ac:	98c0004c 	andi	r3,r19,1
    d1b0:	0005883a 	mov	r2,zero
    d1b4:	9464b03a 	or	r18,r18,r17
    d1b8:	003e4106 	br	cac0 <__alt_data_end+0xff00cac0>
    d1bc:	1007883a 	mov	r3,r2
    d1c0:	0023883a 	mov	r17,zero
    d1c4:	880a927a 	slli	r5,r17,9
    d1c8:	1805883a 	mov	r2,r3
    d1cc:	8822977a 	slli	r17,r17,29
    d1d0:	280ad33a 	srli	r5,r5,12
    d1d4:	003ff406 	br	d1a8 <__alt_data_end+0xff00d1a8>
    d1d8:	10c003cc 	andi	r3,r2,15
    d1dc:	01000104 	movi	r4,4
    d1e0:	193ff626 	beq	r3,r4,d1bc <__alt_data_end+0xff00d1bc>
    d1e4:	0023883a 	mov	r17,zero
    d1e8:	003fca06 	br	d114 <__alt_data_end+0xff00d114>
    d1ec:	813fd336 	bltu	r16,r4,d13c <__alt_data_end+0xff00d13c>
    d1f0:	1023883a 	mov	r17,r2
    d1f4:	003fa806 	br	d098 <__alt_data_end+0xff00d098>
    d1f8:	b0ffd636 	bltu	r22,r3,d154 <__alt_data_end+0xff00d154>
    d1fc:	1011883a 	mov	r8,r2
    d200:	b0ff341e 	bne	r22,r3,ced4 <__alt_data_end+0xff00ced4>
    d204:	003f3406 	br	ced8 <__alt_data_end+0xff00ced8>
    d208:	0005883a 	mov	r2,zero
    d20c:	003fe006 	br	d190 <__alt_data_end+0xff00d190>
    d210:	00800434 	movhi	r2,16
    d214:	89400234 	orhi	r5,r17,8
    d218:	10bfffc4 	addi	r2,r2,-1
    d21c:	b807883a 	mov	r3,r23
    d220:	288a703a 	and	r5,r5,r2
    d224:	4025883a 	mov	r18,r8
    d228:	003e8206 	br	cc34 <__alt_data_end+0xff00cc34>

0000d22c <__eqdf2>:
    d22c:	2804d53a 	srli	r2,r5,20
    d230:	3806d53a 	srli	r3,r7,20
    d234:	02000434 	movhi	r8,16
    d238:	423fffc4 	addi	r8,r8,-1
    d23c:	1081ffcc 	andi	r2,r2,2047
    d240:	0281ffc4 	movi	r10,2047
    d244:	2a12703a 	and	r9,r5,r8
    d248:	18c1ffcc 	andi	r3,r3,2047
    d24c:	3a10703a 	and	r8,r7,r8
    d250:	280ad7fa 	srli	r5,r5,31
    d254:	380ed7fa 	srli	r7,r7,31
    d258:	12801026 	beq	r2,r10,d29c <__eqdf2+0x70>
    d25c:	0281ffc4 	movi	r10,2047
    d260:	1a800a26 	beq	r3,r10,d28c <__eqdf2+0x60>
    d264:	10c00226 	beq	r2,r3,d270 <__eqdf2+0x44>
    d268:	00800044 	movi	r2,1
    d26c:	f800283a 	ret
    d270:	4a3ffd1e 	bne	r9,r8,d268 <__alt_data_end+0xff00d268>
    d274:	21bffc1e 	bne	r4,r6,d268 <__alt_data_end+0xff00d268>
    d278:	29c00c26 	beq	r5,r7,d2ac <__eqdf2+0x80>
    d27c:	103ffa1e 	bne	r2,zero,d268 <__alt_data_end+0xff00d268>
    d280:	2244b03a 	or	r2,r4,r9
    d284:	1004c03a 	cmpne	r2,r2,zero
    d288:	f800283a 	ret
    d28c:	3214b03a 	or	r10,r6,r8
    d290:	503ff426 	beq	r10,zero,d264 <__alt_data_end+0xff00d264>
    d294:	00800044 	movi	r2,1
    d298:	f800283a 	ret
    d29c:	2254b03a 	or	r10,r4,r9
    d2a0:	503fee26 	beq	r10,zero,d25c <__alt_data_end+0xff00d25c>
    d2a4:	00800044 	movi	r2,1
    d2a8:	f800283a 	ret
    d2ac:	0005883a 	mov	r2,zero
    d2b0:	f800283a 	ret

0000d2b4 <__gedf2>:
    d2b4:	2804d53a 	srli	r2,r5,20
    d2b8:	3806d53a 	srli	r3,r7,20
    d2bc:	02000434 	movhi	r8,16
    d2c0:	423fffc4 	addi	r8,r8,-1
    d2c4:	1081ffcc 	andi	r2,r2,2047
    d2c8:	0241ffc4 	movi	r9,2047
    d2cc:	2a14703a 	and	r10,r5,r8
    d2d0:	18c1ffcc 	andi	r3,r3,2047
    d2d4:	3a10703a 	and	r8,r7,r8
    d2d8:	280ad7fa 	srli	r5,r5,31
    d2dc:	380ed7fa 	srli	r7,r7,31
    d2e0:	12401d26 	beq	r2,r9,d358 <__gedf2+0xa4>
    d2e4:	0241ffc4 	movi	r9,2047
    d2e8:	1a401226 	beq	r3,r9,d334 <__gedf2+0x80>
    d2ec:	1000081e 	bne	r2,zero,d310 <__gedf2+0x5c>
    d2f0:	2296b03a 	or	r11,r4,r10
    d2f4:	5813003a 	cmpeq	r9,r11,zero
    d2f8:	1800091e 	bne	r3,zero,d320 <__gedf2+0x6c>
    d2fc:	3218b03a 	or	r12,r6,r8
    d300:	6000071e 	bne	r12,zero,d320 <__gedf2+0x6c>
    d304:	0005883a 	mov	r2,zero
    d308:	5800101e 	bne	r11,zero,d34c <__gedf2+0x98>
    d30c:	f800283a 	ret
    d310:	18000c1e 	bne	r3,zero,d344 <__gedf2+0x90>
    d314:	3212b03a 	or	r9,r6,r8
    d318:	48000c26 	beq	r9,zero,d34c <__gedf2+0x98>
    d31c:	0013883a 	mov	r9,zero
    d320:	39c03fcc 	andi	r7,r7,255
    d324:	48000826 	beq	r9,zero,d348 <__gedf2+0x94>
    d328:	38000926 	beq	r7,zero,d350 <__gedf2+0x9c>
    d32c:	00800044 	movi	r2,1
    d330:	f800283a 	ret
    d334:	3212b03a 	or	r9,r6,r8
    d338:	483fec26 	beq	r9,zero,d2ec <__alt_data_end+0xff00d2ec>
    d33c:	00bfff84 	movi	r2,-2
    d340:	f800283a 	ret
    d344:	39c03fcc 	andi	r7,r7,255
    d348:	29c00626 	beq	r5,r7,d364 <__gedf2+0xb0>
    d34c:	283ff726 	beq	r5,zero,d32c <__alt_data_end+0xff00d32c>
    d350:	00bfffc4 	movi	r2,-1
    d354:	f800283a 	ret
    d358:	2292b03a 	or	r9,r4,r10
    d35c:	483fe126 	beq	r9,zero,d2e4 <__alt_data_end+0xff00d2e4>
    d360:	003ff606 	br	d33c <__alt_data_end+0xff00d33c>
    d364:	18bff916 	blt	r3,r2,d34c <__alt_data_end+0xff00d34c>
    d368:	10c00316 	blt	r2,r3,d378 <__gedf2+0xc4>
    d36c:	42bff736 	bltu	r8,r10,d34c <__alt_data_end+0xff00d34c>
    d370:	52000326 	beq	r10,r8,d380 <__gedf2+0xcc>
    d374:	5200042e 	bgeu	r10,r8,d388 <__gedf2+0xd4>
    d378:	283fec1e 	bne	r5,zero,d32c <__alt_data_end+0xff00d32c>
    d37c:	003ff406 	br	d350 <__alt_data_end+0xff00d350>
    d380:	313ff236 	bltu	r6,r4,d34c <__alt_data_end+0xff00d34c>
    d384:	21bffc36 	bltu	r4,r6,d378 <__alt_data_end+0xff00d378>
    d388:	0005883a 	mov	r2,zero
    d38c:	f800283a 	ret

0000d390 <__ledf2>:
    d390:	2804d53a 	srli	r2,r5,20
    d394:	3810d53a 	srli	r8,r7,20
    d398:	00c00434 	movhi	r3,16
    d39c:	18ffffc4 	addi	r3,r3,-1
    d3a0:	1081ffcc 	andi	r2,r2,2047
    d3a4:	0241ffc4 	movi	r9,2047
    d3a8:	28d4703a 	and	r10,r5,r3
    d3ac:	4201ffcc 	andi	r8,r8,2047
    d3b0:	38c6703a 	and	r3,r7,r3
    d3b4:	280ad7fa 	srli	r5,r5,31
    d3b8:	380ed7fa 	srli	r7,r7,31
    d3bc:	12401f26 	beq	r2,r9,d43c <__ledf2+0xac>
    d3c0:	0241ffc4 	movi	r9,2047
    d3c4:	42401426 	beq	r8,r9,d418 <__ledf2+0x88>
    d3c8:	1000091e 	bne	r2,zero,d3f0 <__ledf2+0x60>
    d3cc:	2296b03a 	or	r11,r4,r10
    d3d0:	5813003a 	cmpeq	r9,r11,zero
    d3d4:	29403fcc 	andi	r5,r5,255
    d3d8:	40000a1e 	bne	r8,zero,d404 <__ledf2+0x74>
    d3dc:	30d8b03a 	or	r12,r6,r3
    d3e0:	6000081e 	bne	r12,zero,d404 <__ledf2+0x74>
    d3e4:	0005883a 	mov	r2,zero
    d3e8:	5800111e 	bne	r11,zero,d430 <__ledf2+0xa0>
    d3ec:	f800283a 	ret
    d3f0:	29403fcc 	andi	r5,r5,255
    d3f4:	40000c1e 	bne	r8,zero,d428 <__ledf2+0x98>
    d3f8:	30d2b03a 	or	r9,r6,r3
    d3fc:	48000c26 	beq	r9,zero,d430 <__ledf2+0xa0>
    d400:	0013883a 	mov	r9,zero
    d404:	39c03fcc 	andi	r7,r7,255
    d408:	48000826 	beq	r9,zero,d42c <__ledf2+0x9c>
    d40c:	38001126 	beq	r7,zero,d454 <__ledf2+0xc4>
    d410:	00800044 	movi	r2,1
    d414:	f800283a 	ret
    d418:	30d2b03a 	or	r9,r6,r3
    d41c:	483fea26 	beq	r9,zero,d3c8 <__alt_data_end+0xff00d3c8>
    d420:	00800084 	movi	r2,2
    d424:	f800283a 	ret
    d428:	39c03fcc 	andi	r7,r7,255
    d42c:	39400726 	beq	r7,r5,d44c <__ledf2+0xbc>
    d430:	2800081e 	bne	r5,zero,d454 <__ledf2+0xc4>
    d434:	00800044 	movi	r2,1
    d438:	f800283a 	ret
    d43c:	2292b03a 	or	r9,r4,r10
    d440:	483fdf26 	beq	r9,zero,d3c0 <__alt_data_end+0xff00d3c0>
    d444:	00800084 	movi	r2,2
    d448:	f800283a 	ret
    d44c:	4080030e 	bge	r8,r2,d45c <__ledf2+0xcc>
    d450:	383fef26 	beq	r7,zero,d410 <__alt_data_end+0xff00d410>
    d454:	00bfffc4 	movi	r2,-1
    d458:	f800283a 	ret
    d45c:	123feb16 	blt	r2,r8,d40c <__alt_data_end+0xff00d40c>
    d460:	1abff336 	bltu	r3,r10,d430 <__alt_data_end+0xff00d430>
    d464:	50c00326 	beq	r10,r3,d474 <__ledf2+0xe4>
    d468:	50c0042e 	bgeu	r10,r3,d47c <__ledf2+0xec>
    d46c:	283fe81e 	bne	r5,zero,d410 <__alt_data_end+0xff00d410>
    d470:	003ff806 	br	d454 <__alt_data_end+0xff00d454>
    d474:	313fee36 	bltu	r6,r4,d430 <__alt_data_end+0xff00d430>
    d478:	21bffc36 	bltu	r4,r6,d46c <__alt_data_end+0xff00d46c>
    d47c:	0005883a 	mov	r2,zero
    d480:	f800283a 	ret

0000d484 <__muldf3>:
    d484:	defff304 	addi	sp,sp,-52
    d488:	2804d53a 	srli	r2,r5,20
    d48c:	dd800915 	stw	r22,36(sp)
    d490:	282cd7fa 	srli	r22,r5,31
    d494:	dc000315 	stw	r16,12(sp)
    d498:	04000434 	movhi	r16,16
    d49c:	dd400815 	stw	r21,32(sp)
    d4a0:	dc800515 	stw	r18,20(sp)
    d4a4:	843fffc4 	addi	r16,r16,-1
    d4a8:	dfc00c15 	stw	ra,48(sp)
    d4ac:	df000b15 	stw	fp,44(sp)
    d4b0:	ddc00a15 	stw	r23,40(sp)
    d4b4:	dd000715 	stw	r20,28(sp)
    d4b8:	dcc00615 	stw	r19,24(sp)
    d4bc:	dc400415 	stw	r17,16(sp)
    d4c0:	1481ffcc 	andi	r18,r2,2047
    d4c4:	2c20703a 	and	r16,r5,r16
    d4c8:	b02b883a 	mov	r21,r22
    d4cc:	b2403fcc 	andi	r9,r22,255
    d4d0:	90006026 	beq	r18,zero,d654 <__muldf3+0x1d0>
    d4d4:	0081ffc4 	movi	r2,2047
    d4d8:	2029883a 	mov	r20,r4
    d4dc:	90803626 	beq	r18,r2,d5b8 <__muldf3+0x134>
    d4e0:	80800434 	orhi	r2,r16,16
    d4e4:	100490fa 	slli	r2,r2,3
    d4e8:	2020d77a 	srli	r16,r4,29
    d4ec:	202890fa 	slli	r20,r4,3
    d4f0:	94bf0044 	addi	r18,r18,-1023
    d4f4:	80a0b03a 	or	r16,r16,r2
    d4f8:	0027883a 	mov	r19,zero
    d4fc:	0039883a 	mov	fp,zero
    d500:	3804d53a 	srli	r2,r7,20
    d504:	382ed7fa 	srli	r23,r7,31
    d508:	04400434 	movhi	r17,16
    d50c:	8c7fffc4 	addi	r17,r17,-1
    d510:	1081ffcc 	andi	r2,r2,2047
    d514:	3011883a 	mov	r8,r6
    d518:	3c62703a 	and	r17,r7,r17
    d51c:	ba803fcc 	andi	r10,r23,255
    d520:	10006d26 	beq	r2,zero,d6d8 <__muldf3+0x254>
    d524:	00c1ffc4 	movi	r3,2047
    d528:	10c06526 	beq	r2,r3,d6c0 <__muldf3+0x23c>
    d52c:	88c00434 	orhi	r3,r17,16
    d530:	180690fa 	slli	r3,r3,3
    d534:	3022d77a 	srli	r17,r6,29
    d538:	301090fa 	slli	r8,r6,3
    d53c:	10bf0044 	addi	r2,r2,-1023
    d540:	88e2b03a 	or	r17,r17,r3
    d544:	000b883a 	mov	r5,zero
    d548:	9085883a 	add	r2,r18,r2
    d54c:	2cc8b03a 	or	r4,r5,r19
    d550:	00c003c4 	movi	r3,15
    d554:	bdacf03a 	xor	r22,r23,r22
    d558:	12c00044 	addi	r11,r2,1
    d55c:	19009936 	bltu	r3,r4,d7c4 <__muldf3+0x340>
    d560:	200890ba 	slli	r4,r4,2
    d564:	00c00074 	movhi	r3,1
    d568:	18f55e04 	addi	r3,r3,-10888
    d56c:	20c9883a 	add	r4,r4,r3
    d570:	20c00017 	ldw	r3,0(r4)
    d574:	1800683a 	jmp	r3
    d578:	0000d7c4 	movi	zero,863
    d57c:	0000d5d8 	cmpnei	zero,zero,855
    d580:	0000d5d8 	cmpnei	zero,zero,855
    d584:	0000d5d4 	movui	zero,855
    d588:	0000d7a0 	cmpeqi	zero,zero,862
    d58c:	0000d7a0 	cmpeqi	zero,zero,862
    d590:	0000d788 	cmpgei	zero,zero,862
    d594:	0000d5d4 	movui	zero,855
    d598:	0000d7a0 	cmpeqi	zero,zero,862
    d59c:	0000d788 	cmpgei	zero,zero,862
    d5a0:	0000d7a0 	cmpeqi	zero,zero,862
    d5a4:	0000d5d4 	movui	zero,855
    d5a8:	0000d7b0 	cmpltui	zero,zero,862
    d5ac:	0000d7b0 	cmpltui	zero,zero,862
    d5b0:	0000d7b0 	cmpltui	zero,zero,862
    d5b4:	0000d9cc 	andi	zero,zero,871
    d5b8:	2404b03a 	or	r2,r4,r16
    d5bc:	10006f1e 	bne	r2,zero,d77c <__muldf3+0x2f8>
    d5c0:	04c00204 	movi	r19,8
    d5c4:	0021883a 	mov	r16,zero
    d5c8:	0029883a 	mov	r20,zero
    d5cc:	07000084 	movi	fp,2
    d5d0:	003fcb06 	br	d500 <__alt_data_end+0xff00d500>
    d5d4:	502d883a 	mov	r22,r10
    d5d8:	00800084 	movi	r2,2
    d5dc:	28805726 	beq	r5,r2,d73c <__muldf3+0x2b8>
    d5e0:	008000c4 	movi	r2,3
    d5e4:	28816626 	beq	r5,r2,db80 <__muldf3+0x6fc>
    d5e8:	00800044 	movi	r2,1
    d5ec:	2881411e 	bne	r5,r2,daf4 <__muldf3+0x670>
    d5f0:	b02b883a 	mov	r21,r22
    d5f4:	0005883a 	mov	r2,zero
    d5f8:	000b883a 	mov	r5,zero
    d5fc:	0029883a 	mov	r20,zero
    d600:	1004953a 	slli	r2,r2,20
    d604:	a8c03fcc 	andi	r3,r21,255
    d608:	04400434 	movhi	r17,16
    d60c:	8c7fffc4 	addi	r17,r17,-1
    d610:	180697fa 	slli	r3,r3,31
    d614:	2c4a703a 	and	r5,r5,r17
    d618:	288ab03a 	or	r5,r5,r2
    d61c:	28c6b03a 	or	r3,r5,r3
    d620:	a005883a 	mov	r2,r20
    d624:	dfc00c17 	ldw	ra,48(sp)
    d628:	df000b17 	ldw	fp,44(sp)
    d62c:	ddc00a17 	ldw	r23,40(sp)
    d630:	dd800917 	ldw	r22,36(sp)
    d634:	dd400817 	ldw	r21,32(sp)
    d638:	dd000717 	ldw	r20,28(sp)
    d63c:	dcc00617 	ldw	r19,24(sp)
    d640:	dc800517 	ldw	r18,20(sp)
    d644:	dc400417 	ldw	r17,16(sp)
    d648:	dc000317 	ldw	r16,12(sp)
    d64c:	dec00d04 	addi	sp,sp,52
    d650:	f800283a 	ret
    d654:	2404b03a 	or	r2,r4,r16
    d658:	2027883a 	mov	r19,r4
    d65c:	10004226 	beq	r2,zero,d768 <__muldf3+0x2e4>
    d660:	8000fc26 	beq	r16,zero,da54 <__muldf3+0x5d0>
    d664:	8009883a 	mov	r4,r16
    d668:	d9800215 	stw	r6,8(sp)
    d66c:	d9c00015 	stw	r7,0(sp)
    d670:	da400115 	stw	r9,4(sp)
    d674:	000e69c0 	call	e69c <__clzsi2>
    d678:	d9800217 	ldw	r6,8(sp)
    d67c:	d9c00017 	ldw	r7,0(sp)
    d680:	da400117 	ldw	r9,4(sp)
    d684:	113ffd44 	addi	r4,r2,-11
    d688:	00c00704 	movi	r3,28
    d68c:	1900ed16 	blt	r3,r4,da44 <__muldf3+0x5c0>
    d690:	00c00744 	movi	r3,29
    d694:	147ffe04 	addi	r17,r2,-8
    d698:	1907c83a 	sub	r3,r3,r4
    d69c:	8460983a 	sll	r16,r16,r17
    d6a0:	98c6d83a 	srl	r3,r19,r3
    d6a4:	9c68983a 	sll	r20,r19,r17
    d6a8:	1c20b03a 	or	r16,r3,r16
    d6ac:	1080fcc4 	addi	r2,r2,1011
    d6b0:	00a5c83a 	sub	r18,zero,r2
    d6b4:	0027883a 	mov	r19,zero
    d6b8:	0039883a 	mov	fp,zero
    d6bc:	003f9006 	br	d500 <__alt_data_end+0xff00d500>
    d6c0:	3446b03a 	or	r3,r6,r17
    d6c4:	1800261e 	bne	r3,zero,d760 <__muldf3+0x2dc>
    d6c8:	0023883a 	mov	r17,zero
    d6cc:	0011883a 	mov	r8,zero
    d6d0:	01400084 	movi	r5,2
    d6d4:	003f9c06 	br	d548 <__alt_data_end+0xff00d548>
    d6d8:	3446b03a 	or	r3,r6,r17
    d6dc:	18001c26 	beq	r3,zero,d750 <__muldf3+0x2cc>
    d6e0:	8800ce26 	beq	r17,zero,da1c <__muldf3+0x598>
    d6e4:	8809883a 	mov	r4,r17
    d6e8:	d9800215 	stw	r6,8(sp)
    d6ec:	da400115 	stw	r9,4(sp)
    d6f0:	da800015 	stw	r10,0(sp)
    d6f4:	000e69c0 	call	e69c <__clzsi2>
    d6f8:	d9800217 	ldw	r6,8(sp)
    d6fc:	da400117 	ldw	r9,4(sp)
    d700:	da800017 	ldw	r10,0(sp)
    d704:	113ffd44 	addi	r4,r2,-11
    d708:	00c00704 	movi	r3,28
    d70c:	1900bf16 	blt	r3,r4,da0c <__muldf3+0x588>
    d710:	00c00744 	movi	r3,29
    d714:	123ffe04 	addi	r8,r2,-8
    d718:	1907c83a 	sub	r3,r3,r4
    d71c:	8a22983a 	sll	r17,r17,r8
    d720:	30c6d83a 	srl	r3,r6,r3
    d724:	3210983a 	sll	r8,r6,r8
    d728:	1c62b03a 	or	r17,r3,r17
    d72c:	1080fcc4 	addi	r2,r2,1011
    d730:	0085c83a 	sub	r2,zero,r2
    d734:	000b883a 	mov	r5,zero
    d738:	003f8306 	br	d548 <__alt_data_end+0xff00d548>
    d73c:	b02b883a 	mov	r21,r22
    d740:	0081ffc4 	movi	r2,2047
    d744:	000b883a 	mov	r5,zero
    d748:	0029883a 	mov	r20,zero
    d74c:	003fac06 	br	d600 <__alt_data_end+0xff00d600>
    d750:	0023883a 	mov	r17,zero
    d754:	0011883a 	mov	r8,zero
    d758:	01400044 	movi	r5,1
    d75c:	003f7a06 	br	d548 <__alt_data_end+0xff00d548>
    d760:	014000c4 	movi	r5,3
    d764:	003f7806 	br	d548 <__alt_data_end+0xff00d548>
    d768:	04c00104 	movi	r19,4
    d76c:	0021883a 	mov	r16,zero
    d770:	0029883a 	mov	r20,zero
    d774:	07000044 	movi	fp,1
    d778:	003f6106 	br	d500 <__alt_data_end+0xff00d500>
    d77c:	04c00304 	movi	r19,12
    d780:	070000c4 	movi	fp,3
    d784:	003f5e06 	br	d500 <__alt_data_end+0xff00d500>
    d788:	01400434 	movhi	r5,16
    d78c:	002b883a 	mov	r21,zero
    d790:	297fffc4 	addi	r5,r5,-1
    d794:	053fffc4 	movi	r20,-1
    d798:	0081ffc4 	movi	r2,2047
    d79c:	003f9806 	br	d600 <__alt_data_end+0xff00d600>
    d7a0:	8023883a 	mov	r17,r16
    d7a4:	a011883a 	mov	r8,r20
    d7a8:	e00b883a 	mov	r5,fp
    d7ac:	003f8a06 	br	d5d8 <__alt_data_end+0xff00d5d8>
    d7b0:	8023883a 	mov	r17,r16
    d7b4:	a011883a 	mov	r8,r20
    d7b8:	482d883a 	mov	r22,r9
    d7bc:	e00b883a 	mov	r5,fp
    d7c0:	003f8506 	br	d5d8 <__alt_data_end+0xff00d5d8>
    d7c4:	a00ad43a 	srli	r5,r20,16
    d7c8:	401ad43a 	srli	r13,r8,16
    d7cc:	a53fffcc 	andi	r20,r20,65535
    d7d0:	423fffcc 	andi	r8,r8,65535
    d7d4:	4519383a 	mul	r12,r8,r20
    d7d8:	4147383a 	mul	r3,r8,r5
    d7dc:	6d09383a 	mul	r4,r13,r20
    d7e0:	600cd43a 	srli	r6,r12,16
    d7e4:	2b5d383a 	mul	r14,r5,r13
    d7e8:	20c9883a 	add	r4,r4,r3
    d7ec:	310d883a 	add	r6,r6,r4
    d7f0:	30c0022e 	bgeu	r6,r3,d7fc <__muldf3+0x378>
    d7f4:	00c00074 	movhi	r3,1
    d7f8:	70dd883a 	add	r14,r14,r3
    d7fc:	8826d43a 	srli	r19,r17,16
    d800:	8bffffcc 	andi	r15,r17,65535
    d804:	7d23383a 	mul	r17,r15,r20
    d808:	7949383a 	mul	r4,r15,r5
    d80c:	9d29383a 	mul	r20,r19,r20
    d810:	8814d43a 	srli	r10,r17,16
    d814:	3012943a 	slli	r9,r6,16
    d818:	a129883a 	add	r20,r20,r4
    d81c:	633fffcc 	andi	r12,r12,65535
    d820:	5515883a 	add	r10,r10,r20
    d824:	3006d43a 	srli	r3,r6,16
    d828:	4b13883a 	add	r9,r9,r12
    d82c:	2ccb383a 	mul	r5,r5,r19
    d830:	5100022e 	bgeu	r10,r4,d83c <__muldf3+0x3b8>
    d834:	01000074 	movhi	r4,1
    d838:	290b883a 	add	r5,r5,r4
    d83c:	802ad43a 	srli	r21,r16,16
    d840:	843fffcc 	andi	r16,r16,65535
    d844:	440d383a 	mul	r6,r8,r16
    d848:	4565383a 	mul	r18,r8,r21
    d84c:	8349383a 	mul	r4,r16,r13
    d850:	500e943a 	slli	r7,r10,16
    d854:	3010d43a 	srli	r8,r6,16
    d858:	5028d43a 	srli	r20,r10,16
    d85c:	2489883a 	add	r4,r4,r18
    d860:	8abfffcc 	andi	r10,r17,65535
    d864:	3a95883a 	add	r10,r7,r10
    d868:	4119883a 	add	r12,r8,r4
    d86c:	a169883a 	add	r20,r20,r5
    d870:	1a87883a 	add	r3,r3,r10
    d874:	6d5b383a 	mul	r13,r13,r21
    d878:	6480022e 	bgeu	r12,r18,d884 <__muldf3+0x400>
    d87c:	01000074 	movhi	r4,1
    d880:	691b883a 	add	r13,r13,r4
    d884:	7c25383a 	mul	r18,r15,r16
    d888:	7d4b383a 	mul	r5,r15,r21
    d88c:	84cf383a 	mul	r7,r16,r19
    d890:	901ed43a 	srli	r15,r18,16
    d894:	6008d43a 	srli	r4,r12,16
    d898:	6010943a 	slli	r8,r12,16
    d89c:	394f883a 	add	r7,r7,r5
    d8a0:	333fffcc 	andi	r12,r6,65535
    d8a4:	79df883a 	add	r15,r15,r7
    d8a8:	235b883a 	add	r13,r4,r13
    d8ac:	9d63383a 	mul	r17,r19,r21
    d8b0:	4309883a 	add	r4,r8,r12
    d8b4:	7940022e 	bgeu	r15,r5,d8c0 <__muldf3+0x43c>
    d8b8:	01400074 	movhi	r5,1
    d8bc:	8963883a 	add	r17,r17,r5
    d8c0:	780a943a 	slli	r5,r15,16
    d8c4:	91bfffcc 	andi	r6,r18,65535
    d8c8:	70c7883a 	add	r3,r14,r3
    d8cc:	298d883a 	add	r6,r5,r6
    d8d0:	1a8f803a 	cmpltu	r7,r3,r10
    d8d4:	350b883a 	add	r5,r6,r20
    d8d8:	20c7883a 	add	r3,r4,r3
    d8dc:	3955883a 	add	r10,r7,r5
    d8e0:	1909803a 	cmpltu	r4,r3,r4
    d8e4:	6a91883a 	add	r8,r13,r10
    d8e8:	780cd43a 	srli	r6,r15,16
    d8ec:	2219883a 	add	r12,r4,r8
    d8f0:	2d0b803a 	cmpltu	r5,r5,r20
    d8f4:	51cf803a 	cmpltu	r7,r10,r7
    d8f8:	29ceb03a 	or	r7,r5,r7
    d8fc:	4351803a 	cmpltu	r8,r8,r13
    d900:	610b803a 	cmpltu	r5,r12,r4
    d904:	4148b03a 	or	r4,r8,r5
    d908:	398f883a 	add	r7,r7,r6
    d90c:	3909883a 	add	r4,r7,r4
    d910:	1810927a 	slli	r8,r3,9
    d914:	2449883a 	add	r4,r4,r17
    d918:	2008927a 	slli	r4,r4,9
    d91c:	6022d5fa 	srli	r17,r12,23
    d920:	1806d5fa 	srli	r3,r3,23
    d924:	4252b03a 	or	r9,r8,r9
    d928:	600a927a 	slli	r5,r12,9
    d92c:	4810c03a 	cmpne	r8,r9,zero
    d930:	2462b03a 	or	r17,r4,r17
    d934:	40c6b03a 	or	r3,r8,r3
    d938:	8900402c 	andhi	r4,r17,256
    d93c:	1950b03a 	or	r8,r3,r5
    d940:	20000726 	beq	r4,zero,d960 <__muldf3+0x4dc>
    d944:	4006d07a 	srli	r3,r8,1
    d948:	880497fa 	slli	r2,r17,31
    d94c:	4200004c 	andi	r8,r8,1
    d950:	8822d07a 	srli	r17,r17,1
    d954:	1a10b03a 	or	r8,r3,r8
    d958:	1210b03a 	or	r8,r2,r8
    d95c:	5805883a 	mov	r2,r11
    d960:	1140ffc4 	addi	r5,r2,1023
    d964:	0140440e 	bge	zero,r5,da78 <__muldf3+0x5f4>
    d968:	40c001cc 	andi	r3,r8,7
    d96c:	18000726 	beq	r3,zero,d98c <__muldf3+0x508>
    d970:	40c003cc 	andi	r3,r8,15
    d974:	01000104 	movi	r4,4
    d978:	19000426 	beq	r3,r4,d98c <__muldf3+0x508>
    d97c:	4107883a 	add	r3,r8,r4
    d980:	1a11803a 	cmpltu	r8,r3,r8
    d984:	8a23883a 	add	r17,r17,r8
    d988:	1811883a 	mov	r8,r3
    d98c:	88c0402c 	andhi	r3,r17,256
    d990:	18000426 	beq	r3,zero,d9a4 <__muldf3+0x520>
    d994:	11410004 	addi	r5,r2,1024
    d998:	00bfc034 	movhi	r2,65280
    d99c:	10bfffc4 	addi	r2,r2,-1
    d9a0:	88a2703a 	and	r17,r17,r2
    d9a4:	0081ff84 	movi	r2,2046
    d9a8:	117f6416 	blt	r2,r5,d73c <__alt_data_end+0xff00d73c>
    d9ac:	8828977a 	slli	r20,r17,29
    d9b0:	4010d0fa 	srli	r8,r8,3
    d9b4:	8822927a 	slli	r17,r17,9
    d9b8:	2881ffcc 	andi	r2,r5,2047
    d9bc:	a228b03a 	or	r20,r20,r8
    d9c0:	880ad33a 	srli	r5,r17,12
    d9c4:	b02b883a 	mov	r21,r22
    d9c8:	003f0d06 	br	d600 <__alt_data_end+0xff00d600>
    d9cc:	8080022c 	andhi	r2,r16,8
    d9d0:	10000926 	beq	r2,zero,d9f8 <__muldf3+0x574>
    d9d4:	8880022c 	andhi	r2,r17,8
    d9d8:	1000071e 	bne	r2,zero,d9f8 <__muldf3+0x574>
    d9dc:	00800434 	movhi	r2,16
    d9e0:	89400234 	orhi	r5,r17,8
    d9e4:	10bfffc4 	addi	r2,r2,-1
    d9e8:	b82b883a 	mov	r21,r23
    d9ec:	288a703a 	and	r5,r5,r2
    d9f0:	4029883a 	mov	r20,r8
    d9f4:	003f6806 	br	d798 <__alt_data_end+0xff00d798>
    d9f8:	00800434 	movhi	r2,16
    d9fc:	81400234 	orhi	r5,r16,8
    da00:	10bfffc4 	addi	r2,r2,-1
    da04:	288a703a 	and	r5,r5,r2
    da08:	003f6306 	br	d798 <__alt_data_end+0xff00d798>
    da0c:	147ff604 	addi	r17,r2,-40
    da10:	3462983a 	sll	r17,r6,r17
    da14:	0011883a 	mov	r8,zero
    da18:	003f4406 	br	d72c <__alt_data_end+0xff00d72c>
    da1c:	3009883a 	mov	r4,r6
    da20:	d9800215 	stw	r6,8(sp)
    da24:	da400115 	stw	r9,4(sp)
    da28:	da800015 	stw	r10,0(sp)
    da2c:	000e69c0 	call	e69c <__clzsi2>
    da30:	10800804 	addi	r2,r2,32
    da34:	da800017 	ldw	r10,0(sp)
    da38:	da400117 	ldw	r9,4(sp)
    da3c:	d9800217 	ldw	r6,8(sp)
    da40:	003f3006 	br	d704 <__alt_data_end+0xff00d704>
    da44:	143ff604 	addi	r16,r2,-40
    da48:	9c20983a 	sll	r16,r19,r16
    da4c:	0029883a 	mov	r20,zero
    da50:	003f1606 	br	d6ac <__alt_data_end+0xff00d6ac>
    da54:	d9800215 	stw	r6,8(sp)
    da58:	d9c00015 	stw	r7,0(sp)
    da5c:	da400115 	stw	r9,4(sp)
    da60:	000e69c0 	call	e69c <__clzsi2>
    da64:	10800804 	addi	r2,r2,32
    da68:	da400117 	ldw	r9,4(sp)
    da6c:	d9c00017 	ldw	r7,0(sp)
    da70:	d9800217 	ldw	r6,8(sp)
    da74:	003f0306 	br	d684 <__alt_data_end+0xff00d684>
    da78:	00c00044 	movi	r3,1
    da7c:	1947c83a 	sub	r3,r3,r5
    da80:	00800e04 	movi	r2,56
    da84:	10feda16 	blt	r2,r3,d5f0 <__alt_data_end+0xff00d5f0>
    da88:	008007c4 	movi	r2,31
    da8c:	10c01b16 	blt	r2,r3,dafc <__muldf3+0x678>
    da90:	00800804 	movi	r2,32
    da94:	10c5c83a 	sub	r2,r2,r3
    da98:	888a983a 	sll	r5,r17,r2
    da9c:	40c8d83a 	srl	r4,r8,r3
    daa0:	4084983a 	sll	r2,r8,r2
    daa4:	88e2d83a 	srl	r17,r17,r3
    daa8:	2906b03a 	or	r3,r5,r4
    daac:	1004c03a 	cmpne	r2,r2,zero
    dab0:	1886b03a 	or	r3,r3,r2
    dab4:	188001cc 	andi	r2,r3,7
    dab8:	10000726 	beq	r2,zero,dad8 <__muldf3+0x654>
    dabc:	188003cc 	andi	r2,r3,15
    dac0:	01000104 	movi	r4,4
    dac4:	11000426 	beq	r2,r4,dad8 <__muldf3+0x654>
    dac8:	1805883a 	mov	r2,r3
    dacc:	10c00104 	addi	r3,r2,4
    dad0:	1885803a 	cmpltu	r2,r3,r2
    dad4:	88a3883a 	add	r17,r17,r2
    dad8:	8880202c 	andhi	r2,r17,128
    dadc:	10001c26 	beq	r2,zero,db50 <__muldf3+0x6cc>
    dae0:	b02b883a 	mov	r21,r22
    dae4:	00800044 	movi	r2,1
    dae8:	000b883a 	mov	r5,zero
    daec:	0029883a 	mov	r20,zero
    daf0:	003ec306 	br	d600 <__alt_data_end+0xff00d600>
    daf4:	5805883a 	mov	r2,r11
    daf8:	003f9906 	br	d960 <__alt_data_end+0xff00d960>
    dafc:	00bff844 	movi	r2,-31
    db00:	1145c83a 	sub	r2,r2,r5
    db04:	8888d83a 	srl	r4,r17,r2
    db08:	00800804 	movi	r2,32
    db0c:	18801a26 	beq	r3,r2,db78 <__muldf3+0x6f4>
    db10:	00801004 	movi	r2,64
    db14:	10c5c83a 	sub	r2,r2,r3
    db18:	8884983a 	sll	r2,r17,r2
    db1c:	1204b03a 	or	r2,r2,r8
    db20:	1004c03a 	cmpne	r2,r2,zero
    db24:	2084b03a 	or	r2,r4,r2
    db28:	144001cc 	andi	r17,r2,7
    db2c:	88000d1e 	bne	r17,zero,db64 <__muldf3+0x6e0>
    db30:	000b883a 	mov	r5,zero
    db34:	1028d0fa 	srli	r20,r2,3
    db38:	b02b883a 	mov	r21,r22
    db3c:	0005883a 	mov	r2,zero
    db40:	a468b03a 	or	r20,r20,r17
    db44:	003eae06 	br	d600 <__alt_data_end+0xff00d600>
    db48:	1007883a 	mov	r3,r2
    db4c:	0023883a 	mov	r17,zero
    db50:	880a927a 	slli	r5,r17,9
    db54:	1805883a 	mov	r2,r3
    db58:	8822977a 	slli	r17,r17,29
    db5c:	280ad33a 	srli	r5,r5,12
    db60:	003ff406 	br	db34 <__alt_data_end+0xff00db34>
    db64:	10c003cc 	andi	r3,r2,15
    db68:	01000104 	movi	r4,4
    db6c:	193ff626 	beq	r3,r4,db48 <__alt_data_end+0xff00db48>
    db70:	0023883a 	mov	r17,zero
    db74:	003fd506 	br	dacc <__alt_data_end+0xff00dacc>
    db78:	0005883a 	mov	r2,zero
    db7c:	003fe706 	br	db1c <__alt_data_end+0xff00db1c>
    db80:	00800434 	movhi	r2,16
    db84:	89400234 	orhi	r5,r17,8
    db88:	10bfffc4 	addi	r2,r2,-1
    db8c:	b02b883a 	mov	r21,r22
    db90:	288a703a 	and	r5,r5,r2
    db94:	4029883a 	mov	r20,r8
    db98:	003eff06 	br	d798 <__alt_data_end+0xff00d798>

0000db9c <__subdf3>:
    db9c:	02000434 	movhi	r8,16
    dba0:	423fffc4 	addi	r8,r8,-1
    dba4:	defffb04 	addi	sp,sp,-20
    dba8:	2a14703a 	and	r10,r5,r8
    dbac:	3812d53a 	srli	r9,r7,20
    dbb0:	3a10703a 	and	r8,r7,r8
    dbb4:	2006d77a 	srli	r3,r4,29
    dbb8:	3004d77a 	srli	r2,r6,29
    dbbc:	dc000015 	stw	r16,0(sp)
    dbc0:	501490fa 	slli	r10,r10,3
    dbc4:	2820d53a 	srli	r16,r5,20
    dbc8:	401090fa 	slli	r8,r8,3
    dbcc:	dc800215 	stw	r18,8(sp)
    dbd0:	dc400115 	stw	r17,4(sp)
    dbd4:	dfc00415 	stw	ra,16(sp)
    dbd8:	202290fa 	slli	r17,r4,3
    dbdc:	dcc00315 	stw	r19,12(sp)
    dbe0:	4a41ffcc 	andi	r9,r9,2047
    dbe4:	0101ffc4 	movi	r4,2047
    dbe8:	2824d7fa 	srli	r18,r5,31
    dbec:	8401ffcc 	andi	r16,r16,2047
    dbf0:	50c6b03a 	or	r3,r10,r3
    dbf4:	380ed7fa 	srli	r7,r7,31
    dbf8:	408ab03a 	or	r5,r8,r2
    dbfc:	300c90fa 	slli	r6,r6,3
    dc00:	49009626 	beq	r9,r4,de5c <__subdf3+0x2c0>
    dc04:	39c0005c 	xori	r7,r7,1
    dc08:	8245c83a 	sub	r2,r16,r9
    dc0c:	3c807426 	beq	r7,r18,dde0 <__subdf3+0x244>
    dc10:	0080af0e 	bge	zero,r2,ded0 <__subdf3+0x334>
    dc14:	48002a1e 	bne	r9,zero,dcc0 <__subdf3+0x124>
    dc18:	2988b03a 	or	r4,r5,r6
    dc1c:	20009a1e 	bne	r4,zero,de88 <__subdf3+0x2ec>
    dc20:	888001cc 	andi	r2,r17,7
    dc24:	10000726 	beq	r2,zero,dc44 <__subdf3+0xa8>
    dc28:	888003cc 	andi	r2,r17,15
    dc2c:	01000104 	movi	r4,4
    dc30:	11000426 	beq	r2,r4,dc44 <__subdf3+0xa8>
    dc34:	890b883a 	add	r5,r17,r4
    dc38:	2c63803a 	cmpltu	r17,r5,r17
    dc3c:	1c47883a 	add	r3,r3,r17
    dc40:	2823883a 	mov	r17,r5
    dc44:	1880202c 	andhi	r2,r3,128
    dc48:	10005926 	beq	r2,zero,ddb0 <__subdf3+0x214>
    dc4c:	84000044 	addi	r16,r16,1
    dc50:	0081ffc4 	movi	r2,2047
    dc54:	8080be26 	beq	r16,r2,df50 <__subdf3+0x3b4>
    dc58:	017fe034 	movhi	r5,65408
    dc5c:	297fffc4 	addi	r5,r5,-1
    dc60:	1946703a 	and	r3,r3,r5
    dc64:	1804977a 	slli	r2,r3,29
    dc68:	1806927a 	slli	r3,r3,9
    dc6c:	8822d0fa 	srli	r17,r17,3
    dc70:	8401ffcc 	andi	r16,r16,2047
    dc74:	180ad33a 	srli	r5,r3,12
    dc78:	9100004c 	andi	r4,r18,1
    dc7c:	1444b03a 	or	r2,r2,r17
    dc80:	80c1ffcc 	andi	r3,r16,2047
    dc84:	1820953a 	slli	r16,r3,20
    dc88:	20c03fcc 	andi	r3,r4,255
    dc8c:	180897fa 	slli	r4,r3,31
    dc90:	00c00434 	movhi	r3,16
    dc94:	18ffffc4 	addi	r3,r3,-1
    dc98:	28c6703a 	and	r3,r5,r3
    dc9c:	1c06b03a 	or	r3,r3,r16
    dca0:	1906b03a 	or	r3,r3,r4
    dca4:	dfc00417 	ldw	ra,16(sp)
    dca8:	dcc00317 	ldw	r19,12(sp)
    dcac:	dc800217 	ldw	r18,8(sp)
    dcb0:	dc400117 	ldw	r17,4(sp)
    dcb4:	dc000017 	ldw	r16,0(sp)
    dcb8:	dec00504 	addi	sp,sp,20
    dcbc:	f800283a 	ret
    dcc0:	0101ffc4 	movi	r4,2047
    dcc4:	813fd626 	beq	r16,r4,dc20 <__alt_data_end+0xff00dc20>
    dcc8:	29402034 	orhi	r5,r5,128
    dccc:	01000e04 	movi	r4,56
    dcd0:	2080a316 	blt	r4,r2,df60 <__subdf3+0x3c4>
    dcd4:	010007c4 	movi	r4,31
    dcd8:	2080c616 	blt	r4,r2,dff4 <__subdf3+0x458>
    dcdc:	01000804 	movi	r4,32
    dce0:	2089c83a 	sub	r4,r4,r2
    dce4:	2910983a 	sll	r8,r5,r4
    dce8:	308ed83a 	srl	r7,r6,r2
    dcec:	3108983a 	sll	r4,r6,r4
    dcf0:	2884d83a 	srl	r2,r5,r2
    dcf4:	41ccb03a 	or	r6,r8,r7
    dcf8:	2008c03a 	cmpne	r4,r4,zero
    dcfc:	310cb03a 	or	r6,r6,r4
    dd00:	898dc83a 	sub	r6,r17,r6
    dd04:	89a3803a 	cmpltu	r17,r17,r6
    dd08:	1887c83a 	sub	r3,r3,r2
    dd0c:	1c47c83a 	sub	r3,r3,r17
    dd10:	3023883a 	mov	r17,r6
    dd14:	1880202c 	andhi	r2,r3,128
    dd18:	10002326 	beq	r2,zero,dda8 <__subdf3+0x20c>
    dd1c:	04c02034 	movhi	r19,128
    dd20:	9cffffc4 	addi	r19,r19,-1
    dd24:	1ce6703a 	and	r19,r3,r19
    dd28:	98007a26 	beq	r19,zero,df14 <__subdf3+0x378>
    dd2c:	9809883a 	mov	r4,r19
    dd30:	000e69c0 	call	e69c <__clzsi2>
    dd34:	113ffe04 	addi	r4,r2,-8
    dd38:	00c007c4 	movi	r3,31
    dd3c:	19007b16 	blt	r3,r4,df2c <__subdf3+0x390>
    dd40:	00800804 	movi	r2,32
    dd44:	1105c83a 	sub	r2,r2,r4
    dd48:	8884d83a 	srl	r2,r17,r2
    dd4c:	9906983a 	sll	r3,r19,r4
    dd50:	8922983a 	sll	r17,r17,r4
    dd54:	10c4b03a 	or	r2,r2,r3
    dd58:	24007816 	blt	r4,r16,df3c <__subdf3+0x3a0>
    dd5c:	2421c83a 	sub	r16,r4,r16
    dd60:	80c00044 	addi	r3,r16,1
    dd64:	010007c4 	movi	r4,31
    dd68:	20c09516 	blt	r4,r3,dfc0 <__subdf3+0x424>
    dd6c:	01400804 	movi	r5,32
    dd70:	28cbc83a 	sub	r5,r5,r3
    dd74:	88c8d83a 	srl	r4,r17,r3
    dd78:	8962983a 	sll	r17,r17,r5
    dd7c:	114a983a 	sll	r5,r2,r5
    dd80:	10c6d83a 	srl	r3,r2,r3
    dd84:	8804c03a 	cmpne	r2,r17,zero
    dd88:	290ab03a 	or	r5,r5,r4
    dd8c:	28a2b03a 	or	r17,r5,r2
    dd90:	0021883a 	mov	r16,zero
    dd94:	003fa206 	br	dc20 <__alt_data_end+0xff00dc20>
    dd98:	2090b03a 	or	r8,r4,r2
    dd9c:	40018e26 	beq	r8,zero,e3d8 <__subdf3+0x83c>
    dda0:	1007883a 	mov	r3,r2
    dda4:	2023883a 	mov	r17,r4
    dda8:	888001cc 	andi	r2,r17,7
    ddac:	103f9e1e 	bne	r2,zero,dc28 <__alt_data_end+0xff00dc28>
    ddb0:	1804977a 	slli	r2,r3,29
    ddb4:	8822d0fa 	srli	r17,r17,3
    ddb8:	1810d0fa 	srli	r8,r3,3
    ddbc:	9100004c 	andi	r4,r18,1
    ddc0:	1444b03a 	or	r2,r2,r17
    ddc4:	00c1ffc4 	movi	r3,2047
    ddc8:	80c02826 	beq	r16,r3,de6c <__subdf3+0x2d0>
    ddcc:	01400434 	movhi	r5,16
    ddd0:	297fffc4 	addi	r5,r5,-1
    ddd4:	80e0703a 	and	r16,r16,r3
    ddd8:	414a703a 	and	r5,r8,r5
    dddc:	003fa806 	br	dc80 <__alt_data_end+0xff00dc80>
    dde0:	0080630e 	bge	zero,r2,df70 <__subdf3+0x3d4>
    dde4:	48003026 	beq	r9,zero,dea8 <__subdf3+0x30c>
    dde8:	0101ffc4 	movi	r4,2047
    ddec:	813f8c26 	beq	r16,r4,dc20 <__alt_data_end+0xff00dc20>
    ddf0:	29402034 	orhi	r5,r5,128
    ddf4:	01000e04 	movi	r4,56
    ddf8:	2080a90e 	bge	r4,r2,e0a0 <__subdf3+0x504>
    ddfc:	298cb03a 	or	r6,r5,r6
    de00:	3012c03a 	cmpne	r9,r6,zero
    de04:	0005883a 	mov	r2,zero
    de08:	4c53883a 	add	r9,r9,r17
    de0c:	4c63803a 	cmpltu	r17,r9,r17
    de10:	10c7883a 	add	r3,r2,r3
    de14:	88c7883a 	add	r3,r17,r3
    de18:	4823883a 	mov	r17,r9
    de1c:	1880202c 	andhi	r2,r3,128
    de20:	1000d026 	beq	r2,zero,e164 <__subdf3+0x5c8>
    de24:	84000044 	addi	r16,r16,1
    de28:	0081ffc4 	movi	r2,2047
    de2c:	8080fe26 	beq	r16,r2,e228 <__subdf3+0x68c>
    de30:	00bfe034 	movhi	r2,65408
    de34:	10bfffc4 	addi	r2,r2,-1
    de38:	1886703a 	and	r3,r3,r2
    de3c:	880ad07a 	srli	r5,r17,1
    de40:	180497fa 	slli	r2,r3,31
    de44:	8900004c 	andi	r4,r17,1
    de48:	2922b03a 	or	r17,r5,r4
    de4c:	1806d07a 	srli	r3,r3,1
    de50:	1462b03a 	or	r17,r2,r17
    de54:	3825883a 	mov	r18,r7
    de58:	003f7106 	br	dc20 <__alt_data_end+0xff00dc20>
    de5c:	2984b03a 	or	r2,r5,r6
    de60:	103f6826 	beq	r2,zero,dc04 <__alt_data_end+0xff00dc04>
    de64:	39c03fcc 	andi	r7,r7,255
    de68:	003f6706 	br	dc08 <__alt_data_end+0xff00dc08>
    de6c:	4086b03a 	or	r3,r8,r2
    de70:	18015226 	beq	r3,zero,e3bc <__subdf3+0x820>
    de74:	00c00434 	movhi	r3,16
    de78:	41400234 	orhi	r5,r8,8
    de7c:	18ffffc4 	addi	r3,r3,-1
    de80:	28ca703a 	and	r5,r5,r3
    de84:	003f7e06 	br	dc80 <__alt_data_end+0xff00dc80>
    de88:	10bfffc4 	addi	r2,r2,-1
    de8c:	1000491e 	bne	r2,zero,dfb4 <__subdf3+0x418>
    de90:	898fc83a 	sub	r7,r17,r6
    de94:	89e3803a 	cmpltu	r17,r17,r7
    de98:	1947c83a 	sub	r3,r3,r5
    de9c:	1c47c83a 	sub	r3,r3,r17
    dea0:	3823883a 	mov	r17,r7
    dea4:	003f9b06 	br	dd14 <__alt_data_end+0xff00dd14>
    dea8:	2988b03a 	or	r4,r5,r6
    deac:	203f5c26 	beq	r4,zero,dc20 <__alt_data_end+0xff00dc20>
    deb0:	10bfffc4 	addi	r2,r2,-1
    deb4:	1000931e 	bne	r2,zero,e104 <__subdf3+0x568>
    deb8:	898d883a 	add	r6,r17,r6
    debc:	3463803a 	cmpltu	r17,r6,r17
    dec0:	1947883a 	add	r3,r3,r5
    dec4:	88c7883a 	add	r3,r17,r3
    dec8:	3023883a 	mov	r17,r6
    decc:	003fd306 	br	de1c <__alt_data_end+0xff00de1c>
    ded0:	1000541e 	bne	r2,zero,e024 <__subdf3+0x488>
    ded4:	80800044 	addi	r2,r16,1
    ded8:	1081ffcc 	andi	r2,r2,2047
    dedc:	01000044 	movi	r4,1
    dee0:	2080a20e 	bge	r4,r2,e16c <__subdf3+0x5d0>
    dee4:	8989c83a 	sub	r4,r17,r6
    dee8:	8905803a 	cmpltu	r2,r17,r4
    deec:	1967c83a 	sub	r19,r3,r5
    def0:	98a7c83a 	sub	r19,r19,r2
    def4:	9880202c 	andhi	r2,r19,128
    def8:	10006326 	beq	r2,zero,e088 <__subdf3+0x4ec>
    defc:	3463c83a 	sub	r17,r6,r17
    df00:	28c7c83a 	sub	r3,r5,r3
    df04:	344d803a 	cmpltu	r6,r6,r17
    df08:	19a7c83a 	sub	r19,r3,r6
    df0c:	3825883a 	mov	r18,r7
    df10:	983f861e 	bne	r19,zero,dd2c <__alt_data_end+0xff00dd2c>
    df14:	8809883a 	mov	r4,r17
    df18:	000e69c0 	call	e69c <__clzsi2>
    df1c:	10800804 	addi	r2,r2,32
    df20:	113ffe04 	addi	r4,r2,-8
    df24:	00c007c4 	movi	r3,31
    df28:	193f850e 	bge	r3,r4,dd40 <__alt_data_end+0xff00dd40>
    df2c:	10bff604 	addi	r2,r2,-40
    df30:	8884983a 	sll	r2,r17,r2
    df34:	0023883a 	mov	r17,zero
    df38:	243f880e 	bge	r4,r16,dd5c <__alt_data_end+0xff00dd5c>
    df3c:	00ffe034 	movhi	r3,65408
    df40:	18ffffc4 	addi	r3,r3,-1
    df44:	8121c83a 	sub	r16,r16,r4
    df48:	10c6703a 	and	r3,r2,r3
    df4c:	003f3406 	br	dc20 <__alt_data_end+0xff00dc20>
    df50:	9100004c 	andi	r4,r18,1
    df54:	000b883a 	mov	r5,zero
    df58:	0005883a 	mov	r2,zero
    df5c:	003f4806 	br	dc80 <__alt_data_end+0xff00dc80>
    df60:	298cb03a 	or	r6,r5,r6
    df64:	300cc03a 	cmpne	r6,r6,zero
    df68:	0005883a 	mov	r2,zero
    df6c:	003f6406 	br	dd00 <__alt_data_end+0xff00dd00>
    df70:	10009a1e 	bne	r2,zero,e1dc <__subdf3+0x640>
    df74:	82400044 	addi	r9,r16,1
    df78:	4881ffcc 	andi	r2,r9,2047
    df7c:	02800044 	movi	r10,1
    df80:	5080670e 	bge	r10,r2,e120 <__subdf3+0x584>
    df84:	0081ffc4 	movi	r2,2047
    df88:	4880af26 	beq	r9,r2,e248 <__subdf3+0x6ac>
    df8c:	898d883a 	add	r6,r17,r6
    df90:	1945883a 	add	r2,r3,r5
    df94:	3447803a 	cmpltu	r3,r6,r17
    df98:	1887883a 	add	r3,r3,r2
    df9c:	182297fa 	slli	r17,r3,31
    dfa0:	300cd07a 	srli	r6,r6,1
    dfa4:	1806d07a 	srli	r3,r3,1
    dfa8:	4821883a 	mov	r16,r9
    dfac:	89a2b03a 	or	r17,r17,r6
    dfb0:	003f1b06 	br	dc20 <__alt_data_end+0xff00dc20>
    dfb4:	0101ffc4 	movi	r4,2047
    dfb8:	813f441e 	bne	r16,r4,dccc <__alt_data_end+0xff00dccc>
    dfbc:	003f1806 	br	dc20 <__alt_data_end+0xff00dc20>
    dfc0:	843ff844 	addi	r16,r16,-31
    dfc4:	01400804 	movi	r5,32
    dfc8:	1408d83a 	srl	r4,r2,r16
    dfcc:	19405026 	beq	r3,r5,e110 <__subdf3+0x574>
    dfd0:	01401004 	movi	r5,64
    dfd4:	28c7c83a 	sub	r3,r5,r3
    dfd8:	10c4983a 	sll	r2,r2,r3
    dfdc:	88a2b03a 	or	r17,r17,r2
    dfe0:	8822c03a 	cmpne	r17,r17,zero
    dfe4:	2462b03a 	or	r17,r4,r17
    dfe8:	0007883a 	mov	r3,zero
    dfec:	0021883a 	mov	r16,zero
    dff0:	003f6d06 	br	dda8 <__alt_data_end+0xff00dda8>
    dff4:	11fff804 	addi	r7,r2,-32
    dff8:	01000804 	movi	r4,32
    dffc:	29ced83a 	srl	r7,r5,r7
    e000:	11004526 	beq	r2,r4,e118 <__subdf3+0x57c>
    e004:	01001004 	movi	r4,64
    e008:	2089c83a 	sub	r4,r4,r2
    e00c:	2904983a 	sll	r2,r5,r4
    e010:	118cb03a 	or	r6,r2,r6
    e014:	300cc03a 	cmpne	r6,r6,zero
    e018:	398cb03a 	or	r6,r7,r6
    e01c:	0005883a 	mov	r2,zero
    e020:	003f3706 	br	dd00 <__alt_data_end+0xff00dd00>
    e024:	80002a26 	beq	r16,zero,e0d0 <__subdf3+0x534>
    e028:	0101ffc4 	movi	r4,2047
    e02c:	49006626 	beq	r9,r4,e1c8 <__subdf3+0x62c>
    e030:	0085c83a 	sub	r2,zero,r2
    e034:	18c02034 	orhi	r3,r3,128
    e038:	01000e04 	movi	r4,56
    e03c:	20807e16 	blt	r4,r2,e238 <__subdf3+0x69c>
    e040:	010007c4 	movi	r4,31
    e044:	2080e716 	blt	r4,r2,e3e4 <__subdf3+0x848>
    e048:	01000804 	movi	r4,32
    e04c:	2089c83a 	sub	r4,r4,r2
    e050:	1914983a 	sll	r10,r3,r4
    e054:	8890d83a 	srl	r8,r17,r2
    e058:	8908983a 	sll	r4,r17,r4
    e05c:	1884d83a 	srl	r2,r3,r2
    e060:	5222b03a 	or	r17,r10,r8
    e064:	2006c03a 	cmpne	r3,r4,zero
    e068:	88e2b03a 	or	r17,r17,r3
    e06c:	3463c83a 	sub	r17,r6,r17
    e070:	2885c83a 	sub	r2,r5,r2
    e074:	344d803a 	cmpltu	r6,r6,r17
    e078:	1187c83a 	sub	r3,r2,r6
    e07c:	4821883a 	mov	r16,r9
    e080:	3825883a 	mov	r18,r7
    e084:	003f2306 	br	dd14 <__alt_data_end+0xff00dd14>
    e088:	24d0b03a 	or	r8,r4,r19
    e08c:	40001b1e 	bne	r8,zero,e0fc <__subdf3+0x560>
    e090:	0005883a 	mov	r2,zero
    e094:	0009883a 	mov	r4,zero
    e098:	0021883a 	mov	r16,zero
    e09c:	003f4906 	br	ddc4 <__alt_data_end+0xff00ddc4>
    e0a0:	010007c4 	movi	r4,31
    e0a4:	20803a16 	blt	r4,r2,e190 <__subdf3+0x5f4>
    e0a8:	01000804 	movi	r4,32
    e0ac:	2089c83a 	sub	r4,r4,r2
    e0b0:	2912983a 	sll	r9,r5,r4
    e0b4:	3090d83a 	srl	r8,r6,r2
    e0b8:	3108983a 	sll	r4,r6,r4
    e0bc:	2884d83a 	srl	r2,r5,r2
    e0c0:	4a12b03a 	or	r9,r9,r8
    e0c4:	2008c03a 	cmpne	r4,r4,zero
    e0c8:	4912b03a 	or	r9,r9,r4
    e0cc:	003f4e06 	br	de08 <__alt_data_end+0xff00de08>
    e0d0:	1c48b03a 	or	r4,r3,r17
    e0d4:	20003c26 	beq	r4,zero,e1c8 <__subdf3+0x62c>
    e0d8:	0084303a 	nor	r2,zero,r2
    e0dc:	1000381e 	bne	r2,zero,e1c0 <__subdf3+0x624>
    e0e0:	3463c83a 	sub	r17,r6,r17
    e0e4:	28c5c83a 	sub	r2,r5,r3
    e0e8:	344d803a 	cmpltu	r6,r6,r17
    e0ec:	1187c83a 	sub	r3,r2,r6
    e0f0:	4821883a 	mov	r16,r9
    e0f4:	3825883a 	mov	r18,r7
    e0f8:	003f0606 	br	dd14 <__alt_data_end+0xff00dd14>
    e0fc:	2023883a 	mov	r17,r4
    e100:	003f0906 	br	dd28 <__alt_data_end+0xff00dd28>
    e104:	0101ffc4 	movi	r4,2047
    e108:	813f3a1e 	bne	r16,r4,ddf4 <__alt_data_end+0xff00ddf4>
    e10c:	003ec406 	br	dc20 <__alt_data_end+0xff00dc20>
    e110:	0005883a 	mov	r2,zero
    e114:	003fb106 	br	dfdc <__alt_data_end+0xff00dfdc>
    e118:	0005883a 	mov	r2,zero
    e11c:	003fbc06 	br	e010 <__alt_data_end+0xff00e010>
    e120:	1c44b03a 	or	r2,r3,r17
    e124:	80008e1e 	bne	r16,zero,e360 <__subdf3+0x7c4>
    e128:	1000c826 	beq	r2,zero,e44c <__subdf3+0x8b0>
    e12c:	2984b03a 	or	r2,r5,r6
    e130:	103ebb26 	beq	r2,zero,dc20 <__alt_data_end+0xff00dc20>
    e134:	8989883a 	add	r4,r17,r6
    e138:	1945883a 	add	r2,r3,r5
    e13c:	2447803a 	cmpltu	r3,r4,r17
    e140:	1887883a 	add	r3,r3,r2
    e144:	1880202c 	andhi	r2,r3,128
    e148:	2023883a 	mov	r17,r4
    e14c:	103f1626 	beq	r2,zero,dda8 <__alt_data_end+0xff00dda8>
    e150:	00bfe034 	movhi	r2,65408
    e154:	10bfffc4 	addi	r2,r2,-1
    e158:	5021883a 	mov	r16,r10
    e15c:	1886703a 	and	r3,r3,r2
    e160:	003eaf06 	br	dc20 <__alt_data_end+0xff00dc20>
    e164:	3825883a 	mov	r18,r7
    e168:	003f0f06 	br	dda8 <__alt_data_end+0xff00dda8>
    e16c:	1c44b03a 	or	r2,r3,r17
    e170:	8000251e 	bne	r16,zero,e208 <__subdf3+0x66c>
    e174:	1000661e 	bne	r2,zero,e310 <__subdf3+0x774>
    e178:	2990b03a 	or	r8,r5,r6
    e17c:	40009626 	beq	r8,zero,e3d8 <__subdf3+0x83c>
    e180:	2807883a 	mov	r3,r5
    e184:	3023883a 	mov	r17,r6
    e188:	3825883a 	mov	r18,r7
    e18c:	003ea406 	br	dc20 <__alt_data_end+0xff00dc20>
    e190:	127ff804 	addi	r9,r2,-32
    e194:	01000804 	movi	r4,32
    e198:	2a52d83a 	srl	r9,r5,r9
    e19c:	11008c26 	beq	r2,r4,e3d0 <__subdf3+0x834>
    e1a0:	01001004 	movi	r4,64
    e1a4:	2085c83a 	sub	r2,r4,r2
    e1a8:	2884983a 	sll	r2,r5,r2
    e1ac:	118cb03a 	or	r6,r2,r6
    e1b0:	300cc03a 	cmpne	r6,r6,zero
    e1b4:	4992b03a 	or	r9,r9,r6
    e1b8:	0005883a 	mov	r2,zero
    e1bc:	003f1206 	br	de08 <__alt_data_end+0xff00de08>
    e1c0:	0101ffc4 	movi	r4,2047
    e1c4:	493f9c1e 	bne	r9,r4,e038 <__alt_data_end+0xff00e038>
    e1c8:	2807883a 	mov	r3,r5
    e1cc:	3023883a 	mov	r17,r6
    e1d0:	4821883a 	mov	r16,r9
    e1d4:	3825883a 	mov	r18,r7
    e1d8:	003e9106 	br	dc20 <__alt_data_end+0xff00dc20>
    e1dc:	80001f1e 	bne	r16,zero,e25c <__subdf3+0x6c0>
    e1e0:	1c48b03a 	or	r4,r3,r17
    e1e4:	20005a26 	beq	r4,zero,e350 <__subdf3+0x7b4>
    e1e8:	0084303a 	nor	r2,zero,r2
    e1ec:	1000561e 	bne	r2,zero,e348 <__subdf3+0x7ac>
    e1f0:	89a3883a 	add	r17,r17,r6
    e1f4:	1945883a 	add	r2,r3,r5
    e1f8:	898d803a 	cmpltu	r6,r17,r6
    e1fc:	3087883a 	add	r3,r6,r2
    e200:	4821883a 	mov	r16,r9
    e204:	003f0506 	br	de1c <__alt_data_end+0xff00de1c>
    e208:	10002b1e 	bne	r2,zero,e2b8 <__subdf3+0x71c>
    e20c:	2984b03a 	or	r2,r5,r6
    e210:	10008026 	beq	r2,zero,e414 <__subdf3+0x878>
    e214:	2807883a 	mov	r3,r5
    e218:	3023883a 	mov	r17,r6
    e21c:	3825883a 	mov	r18,r7
    e220:	0401ffc4 	movi	r16,2047
    e224:	003e7e06 	br	dc20 <__alt_data_end+0xff00dc20>
    e228:	3809883a 	mov	r4,r7
    e22c:	0011883a 	mov	r8,zero
    e230:	0005883a 	mov	r2,zero
    e234:	003ee306 	br	ddc4 <__alt_data_end+0xff00ddc4>
    e238:	1c62b03a 	or	r17,r3,r17
    e23c:	8822c03a 	cmpne	r17,r17,zero
    e240:	0005883a 	mov	r2,zero
    e244:	003f8906 	br	e06c <__alt_data_end+0xff00e06c>
    e248:	3809883a 	mov	r4,r7
    e24c:	4821883a 	mov	r16,r9
    e250:	0011883a 	mov	r8,zero
    e254:	0005883a 	mov	r2,zero
    e258:	003eda06 	br	ddc4 <__alt_data_end+0xff00ddc4>
    e25c:	0101ffc4 	movi	r4,2047
    e260:	49003b26 	beq	r9,r4,e350 <__subdf3+0x7b4>
    e264:	0085c83a 	sub	r2,zero,r2
    e268:	18c02034 	orhi	r3,r3,128
    e26c:	01000e04 	movi	r4,56
    e270:	20806e16 	blt	r4,r2,e42c <__subdf3+0x890>
    e274:	010007c4 	movi	r4,31
    e278:	20807716 	blt	r4,r2,e458 <__subdf3+0x8bc>
    e27c:	01000804 	movi	r4,32
    e280:	2089c83a 	sub	r4,r4,r2
    e284:	1914983a 	sll	r10,r3,r4
    e288:	8890d83a 	srl	r8,r17,r2
    e28c:	8908983a 	sll	r4,r17,r4
    e290:	1884d83a 	srl	r2,r3,r2
    e294:	5222b03a 	or	r17,r10,r8
    e298:	2006c03a 	cmpne	r3,r4,zero
    e29c:	88e2b03a 	or	r17,r17,r3
    e2a0:	89a3883a 	add	r17,r17,r6
    e2a4:	1145883a 	add	r2,r2,r5
    e2a8:	898d803a 	cmpltu	r6,r17,r6
    e2ac:	3087883a 	add	r3,r6,r2
    e2b0:	4821883a 	mov	r16,r9
    e2b4:	003ed906 	br	de1c <__alt_data_end+0xff00de1c>
    e2b8:	2984b03a 	or	r2,r5,r6
    e2bc:	10004226 	beq	r2,zero,e3c8 <__subdf3+0x82c>
    e2c0:	1808d0fa 	srli	r4,r3,3
    e2c4:	8822d0fa 	srli	r17,r17,3
    e2c8:	1806977a 	slli	r3,r3,29
    e2cc:	2080022c 	andhi	r2,r4,8
    e2d0:	1c62b03a 	or	r17,r3,r17
    e2d4:	10000826 	beq	r2,zero,e2f8 <__subdf3+0x75c>
    e2d8:	2812d0fa 	srli	r9,r5,3
    e2dc:	4880022c 	andhi	r2,r9,8
    e2e0:	1000051e 	bne	r2,zero,e2f8 <__subdf3+0x75c>
    e2e4:	300cd0fa 	srli	r6,r6,3
    e2e8:	2804977a 	slli	r2,r5,29
    e2ec:	4809883a 	mov	r4,r9
    e2f0:	3825883a 	mov	r18,r7
    e2f4:	11a2b03a 	or	r17,r2,r6
    e2f8:	8806d77a 	srli	r3,r17,29
    e2fc:	200890fa 	slli	r4,r4,3
    e300:	882290fa 	slli	r17,r17,3
    e304:	0401ffc4 	movi	r16,2047
    e308:	1906b03a 	or	r3,r3,r4
    e30c:	003e4406 	br	dc20 <__alt_data_end+0xff00dc20>
    e310:	2984b03a 	or	r2,r5,r6
    e314:	103e4226 	beq	r2,zero,dc20 <__alt_data_end+0xff00dc20>
    e318:	8989c83a 	sub	r4,r17,r6
    e31c:	8911803a 	cmpltu	r8,r17,r4
    e320:	1945c83a 	sub	r2,r3,r5
    e324:	1205c83a 	sub	r2,r2,r8
    e328:	1200202c 	andhi	r8,r2,128
    e32c:	403e9a26 	beq	r8,zero,dd98 <__alt_data_end+0xff00dd98>
    e330:	3463c83a 	sub	r17,r6,r17
    e334:	28c5c83a 	sub	r2,r5,r3
    e338:	344d803a 	cmpltu	r6,r6,r17
    e33c:	1187c83a 	sub	r3,r2,r6
    e340:	3825883a 	mov	r18,r7
    e344:	003e3606 	br	dc20 <__alt_data_end+0xff00dc20>
    e348:	0101ffc4 	movi	r4,2047
    e34c:	493fc71e 	bne	r9,r4,e26c <__alt_data_end+0xff00e26c>
    e350:	2807883a 	mov	r3,r5
    e354:	3023883a 	mov	r17,r6
    e358:	4821883a 	mov	r16,r9
    e35c:	003e3006 	br	dc20 <__alt_data_end+0xff00dc20>
    e360:	10003626 	beq	r2,zero,e43c <__subdf3+0x8a0>
    e364:	2984b03a 	or	r2,r5,r6
    e368:	10001726 	beq	r2,zero,e3c8 <__subdf3+0x82c>
    e36c:	1808d0fa 	srli	r4,r3,3
    e370:	8822d0fa 	srli	r17,r17,3
    e374:	1806977a 	slli	r3,r3,29
    e378:	2080022c 	andhi	r2,r4,8
    e37c:	1c62b03a 	or	r17,r3,r17
    e380:	10000726 	beq	r2,zero,e3a0 <__subdf3+0x804>
    e384:	2812d0fa 	srli	r9,r5,3
    e388:	4880022c 	andhi	r2,r9,8
    e38c:	1000041e 	bne	r2,zero,e3a0 <__subdf3+0x804>
    e390:	300cd0fa 	srli	r6,r6,3
    e394:	2804977a 	slli	r2,r5,29
    e398:	4809883a 	mov	r4,r9
    e39c:	11a2b03a 	or	r17,r2,r6
    e3a0:	8806d77a 	srli	r3,r17,29
    e3a4:	200890fa 	slli	r4,r4,3
    e3a8:	882290fa 	slli	r17,r17,3
    e3ac:	3825883a 	mov	r18,r7
    e3b0:	1906b03a 	or	r3,r3,r4
    e3b4:	0401ffc4 	movi	r16,2047
    e3b8:	003e1906 	br	dc20 <__alt_data_end+0xff00dc20>
    e3bc:	000b883a 	mov	r5,zero
    e3c0:	0005883a 	mov	r2,zero
    e3c4:	003e2e06 	br	dc80 <__alt_data_end+0xff00dc80>
    e3c8:	0401ffc4 	movi	r16,2047
    e3cc:	003e1406 	br	dc20 <__alt_data_end+0xff00dc20>
    e3d0:	0005883a 	mov	r2,zero
    e3d4:	003f7506 	br	e1ac <__alt_data_end+0xff00e1ac>
    e3d8:	0005883a 	mov	r2,zero
    e3dc:	0009883a 	mov	r4,zero
    e3e0:	003e7806 	br	ddc4 <__alt_data_end+0xff00ddc4>
    e3e4:	123ff804 	addi	r8,r2,-32
    e3e8:	01000804 	movi	r4,32
    e3ec:	1a10d83a 	srl	r8,r3,r8
    e3f0:	11002526 	beq	r2,r4,e488 <__subdf3+0x8ec>
    e3f4:	01001004 	movi	r4,64
    e3f8:	2085c83a 	sub	r2,r4,r2
    e3fc:	1884983a 	sll	r2,r3,r2
    e400:	1444b03a 	or	r2,r2,r17
    e404:	1004c03a 	cmpne	r2,r2,zero
    e408:	40a2b03a 	or	r17,r8,r2
    e40c:	0005883a 	mov	r2,zero
    e410:	003f1606 	br	e06c <__alt_data_end+0xff00e06c>
    e414:	02000434 	movhi	r8,16
    e418:	0009883a 	mov	r4,zero
    e41c:	423fffc4 	addi	r8,r8,-1
    e420:	00bfffc4 	movi	r2,-1
    e424:	0401ffc4 	movi	r16,2047
    e428:	003e6606 	br	ddc4 <__alt_data_end+0xff00ddc4>
    e42c:	1c62b03a 	or	r17,r3,r17
    e430:	8822c03a 	cmpne	r17,r17,zero
    e434:	0005883a 	mov	r2,zero
    e438:	003f9906 	br	e2a0 <__alt_data_end+0xff00e2a0>
    e43c:	2807883a 	mov	r3,r5
    e440:	3023883a 	mov	r17,r6
    e444:	0401ffc4 	movi	r16,2047
    e448:	003df506 	br	dc20 <__alt_data_end+0xff00dc20>
    e44c:	2807883a 	mov	r3,r5
    e450:	3023883a 	mov	r17,r6
    e454:	003df206 	br	dc20 <__alt_data_end+0xff00dc20>
    e458:	123ff804 	addi	r8,r2,-32
    e45c:	01000804 	movi	r4,32
    e460:	1a10d83a 	srl	r8,r3,r8
    e464:	11000a26 	beq	r2,r4,e490 <__subdf3+0x8f4>
    e468:	01001004 	movi	r4,64
    e46c:	2085c83a 	sub	r2,r4,r2
    e470:	1884983a 	sll	r2,r3,r2
    e474:	1444b03a 	or	r2,r2,r17
    e478:	1004c03a 	cmpne	r2,r2,zero
    e47c:	40a2b03a 	or	r17,r8,r2
    e480:	0005883a 	mov	r2,zero
    e484:	003f8606 	br	e2a0 <__alt_data_end+0xff00e2a0>
    e488:	0005883a 	mov	r2,zero
    e48c:	003fdc06 	br	e400 <__alt_data_end+0xff00e400>
    e490:	0005883a 	mov	r2,zero
    e494:	003ff706 	br	e474 <__alt_data_end+0xff00e474>

0000e498 <__fixdfsi>:
    e498:	280cd53a 	srli	r6,r5,20
    e49c:	00c00434 	movhi	r3,16
    e4a0:	18ffffc4 	addi	r3,r3,-1
    e4a4:	3181ffcc 	andi	r6,r6,2047
    e4a8:	01c0ff84 	movi	r7,1022
    e4ac:	28c6703a 	and	r3,r5,r3
    e4b0:	280ad7fa 	srli	r5,r5,31
    e4b4:	3980120e 	bge	r7,r6,e500 <__fixdfsi+0x68>
    e4b8:	00810744 	movi	r2,1053
    e4bc:	11800c16 	blt	r2,r6,e4f0 <__fixdfsi+0x58>
    e4c0:	00810cc4 	movi	r2,1075
    e4c4:	1185c83a 	sub	r2,r2,r6
    e4c8:	01c007c4 	movi	r7,31
    e4cc:	18c00434 	orhi	r3,r3,16
    e4d0:	38800d16 	blt	r7,r2,e508 <__fixdfsi+0x70>
    e4d4:	31befb44 	addi	r6,r6,-1043
    e4d8:	2084d83a 	srl	r2,r4,r2
    e4dc:	1986983a 	sll	r3,r3,r6
    e4e0:	1884b03a 	or	r2,r3,r2
    e4e4:	28000726 	beq	r5,zero,e504 <__fixdfsi+0x6c>
    e4e8:	0085c83a 	sub	r2,zero,r2
    e4ec:	f800283a 	ret
    e4f0:	00a00034 	movhi	r2,32768
    e4f4:	10bfffc4 	addi	r2,r2,-1
    e4f8:	2885883a 	add	r2,r5,r2
    e4fc:	f800283a 	ret
    e500:	0005883a 	mov	r2,zero
    e504:	f800283a 	ret
    e508:	008104c4 	movi	r2,1043
    e50c:	1185c83a 	sub	r2,r2,r6
    e510:	1884d83a 	srl	r2,r3,r2
    e514:	003ff306 	br	e4e4 <__alt_data_end+0xff00e4e4>

0000e518 <__floatsidf>:
    e518:	defffd04 	addi	sp,sp,-12
    e51c:	dfc00215 	stw	ra,8(sp)
    e520:	dc400115 	stw	r17,4(sp)
    e524:	dc000015 	stw	r16,0(sp)
    e528:	20002b26 	beq	r4,zero,e5d8 <__floatsidf+0xc0>
    e52c:	2023883a 	mov	r17,r4
    e530:	2020d7fa 	srli	r16,r4,31
    e534:	20002d16 	blt	r4,zero,e5ec <__floatsidf+0xd4>
    e538:	8809883a 	mov	r4,r17
    e53c:	000e69c0 	call	e69c <__clzsi2>
    e540:	01410784 	movi	r5,1054
    e544:	288bc83a 	sub	r5,r5,r2
    e548:	01010cc4 	movi	r4,1075
    e54c:	2149c83a 	sub	r4,r4,r5
    e550:	00c007c4 	movi	r3,31
    e554:	1900160e 	bge	r3,r4,e5b0 <__floatsidf+0x98>
    e558:	00c104c4 	movi	r3,1043
    e55c:	1947c83a 	sub	r3,r3,r5
    e560:	88c6983a 	sll	r3,r17,r3
    e564:	00800434 	movhi	r2,16
    e568:	10bfffc4 	addi	r2,r2,-1
    e56c:	1886703a 	and	r3,r3,r2
    e570:	2941ffcc 	andi	r5,r5,2047
    e574:	800d883a 	mov	r6,r16
    e578:	0005883a 	mov	r2,zero
    e57c:	280a953a 	slli	r5,r5,20
    e580:	31803fcc 	andi	r6,r6,255
    e584:	01000434 	movhi	r4,16
    e588:	300c97fa 	slli	r6,r6,31
    e58c:	213fffc4 	addi	r4,r4,-1
    e590:	1906703a 	and	r3,r3,r4
    e594:	1946b03a 	or	r3,r3,r5
    e598:	1986b03a 	or	r3,r3,r6
    e59c:	dfc00217 	ldw	ra,8(sp)
    e5a0:	dc400117 	ldw	r17,4(sp)
    e5a4:	dc000017 	ldw	r16,0(sp)
    e5a8:	dec00304 	addi	sp,sp,12
    e5ac:	f800283a 	ret
    e5b0:	00c002c4 	movi	r3,11
    e5b4:	1887c83a 	sub	r3,r3,r2
    e5b8:	88c6d83a 	srl	r3,r17,r3
    e5bc:	8904983a 	sll	r2,r17,r4
    e5c0:	01000434 	movhi	r4,16
    e5c4:	213fffc4 	addi	r4,r4,-1
    e5c8:	2941ffcc 	andi	r5,r5,2047
    e5cc:	1906703a 	and	r3,r3,r4
    e5d0:	800d883a 	mov	r6,r16
    e5d4:	003fe906 	br	e57c <__alt_data_end+0xff00e57c>
    e5d8:	000d883a 	mov	r6,zero
    e5dc:	000b883a 	mov	r5,zero
    e5e0:	0007883a 	mov	r3,zero
    e5e4:	0005883a 	mov	r2,zero
    e5e8:	003fe406 	br	e57c <__alt_data_end+0xff00e57c>
    e5ec:	0123c83a 	sub	r17,zero,r4
    e5f0:	003fd106 	br	e538 <__alt_data_end+0xff00e538>

0000e5f4 <__floatunsidf>:
    e5f4:	defffe04 	addi	sp,sp,-8
    e5f8:	dc000015 	stw	r16,0(sp)
    e5fc:	dfc00115 	stw	ra,4(sp)
    e600:	2021883a 	mov	r16,r4
    e604:	20002226 	beq	r4,zero,e690 <__floatunsidf+0x9c>
    e608:	000e69c0 	call	e69c <__clzsi2>
    e60c:	01010784 	movi	r4,1054
    e610:	2089c83a 	sub	r4,r4,r2
    e614:	01810cc4 	movi	r6,1075
    e618:	310dc83a 	sub	r6,r6,r4
    e61c:	00c007c4 	movi	r3,31
    e620:	1980120e 	bge	r3,r6,e66c <__floatunsidf+0x78>
    e624:	00c104c4 	movi	r3,1043
    e628:	1907c83a 	sub	r3,r3,r4
    e62c:	80ca983a 	sll	r5,r16,r3
    e630:	00800434 	movhi	r2,16
    e634:	10bfffc4 	addi	r2,r2,-1
    e638:	2101ffcc 	andi	r4,r4,2047
    e63c:	0021883a 	mov	r16,zero
    e640:	288a703a 	and	r5,r5,r2
    e644:	2008953a 	slli	r4,r4,20
    e648:	00c00434 	movhi	r3,16
    e64c:	18ffffc4 	addi	r3,r3,-1
    e650:	28c6703a 	and	r3,r5,r3
    e654:	8005883a 	mov	r2,r16
    e658:	1906b03a 	or	r3,r3,r4
    e65c:	dfc00117 	ldw	ra,4(sp)
    e660:	dc000017 	ldw	r16,0(sp)
    e664:	dec00204 	addi	sp,sp,8
    e668:	f800283a 	ret
    e66c:	00c002c4 	movi	r3,11
    e670:	188bc83a 	sub	r5,r3,r2
    e674:	814ad83a 	srl	r5,r16,r5
    e678:	00c00434 	movhi	r3,16
    e67c:	18ffffc4 	addi	r3,r3,-1
    e680:	81a0983a 	sll	r16,r16,r6
    e684:	2101ffcc 	andi	r4,r4,2047
    e688:	28ca703a 	and	r5,r5,r3
    e68c:	003fed06 	br	e644 <__alt_data_end+0xff00e644>
    e690:	0009883a 	mov	r4,zero
    e694:	000b883a 	mov	r5,zero
    e698:	003fea06 	br	e644 <__alt_data_end+0xff00e644>

0000e69c <__clzsi2>:
    e69c:	00bfffd4 	movui	r2,65535
    e6a0:	11000536 	bltu	r2,r4,e6b8 <__clzsi2+0x1c>
    e6a4:	00803fc4 	movi	r2,255
    e6a8:	11000f36 	bltu	r2,r4,e6e8 <__clzsi2+0x4c>
    e6ac:	00800804 	movi	r2,32
    e6b0:	0007883a 	mov	r3,zero
    e6b4:	00000506 	br	e6cc <__clzsi2+0x30>
    e6b8:	00804034 	movhi	r2,256
    e6bc:	10bfffc4 	addi	r2,r2,-1
    e6c0:	11000c2e 	bgeu	r2,r4,e6f4 <__clzsi2+0x58>
    e6c4:	00800204 	movi	r2,8
    e6c8:	00c00604 	movi	r3,24
    e6cc:	20c8d83a 	srl	r4,r4,r3
    e6d0:	00c00074 	movhi	r3,1
    e6d4:	18c67004 	addi	r3,r3,6592
    e6d8:	1909883a 	add	r4,r3,r4
    e6dc:	20c00003 	ldbu	r3,0(r4)
    e6e0:	10c5c83a 	sub	r2,r2,r3
    e6e4:	f800283a 	ret
    e6e8:	00800604 	movi	r2,24
    e6ec:	00c00204 	movi	r3,8
    e6f0:	003ff606 	br	e6cc <__alt_data_end+0xff00e6cc>
    e6f4:	00800404 	movi	r2,16
    e6f8:	1007883a 	mov	r3,r2
    e6fc:	003ff306 	br	e6cc <__alt_data_end+0xff00e6cc>

0000e700 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e700:	defffe04 	addi	sp,sp,-8
    e704:	dfc00115 	stw	ra,4(sp)
    e708:	df000015 	stw	fp,0(sp)
    e70c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e710:	d0a00d17 	ldw	r2,-32716(gp)
    e714:	10000326 	beq	r2,zero,e724 <alt_get_errno+0x24>
    e718:	d0a00d17 	ldw	r2,-32716(gp)
    e71c:	103ee83a 	callr	r2
    e720:	00000106 	br	e728 <alt_get_errno+0x28>
    e724:	d0a6dc04 	addi	r2,gp,-25744
}
    e728:	e037883a 	mov	sp,fp
    e72c:	dfc00117 	ldw	ra,4(sp)
    e730:	df000017 	ldw	fp,0(sp)
    e734:	dec00204 	addi	sp,sp,8
    e738:	f800283a 	ret

0000e73c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e73c:	defffb04 	addi	sp,sp,-20
    e740:	dfc00415 	stw	ra,16(sp)
    e744:	df000315 	stw	fp,12(sp)
    e748:	df000304 	addi	fp,sp,12
    e74c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e750:	e0bfff17 	ldw	r2,-4(fp)
    e754:	10000616 	blt	r2,zero,e770 <close+0x34>
    e758:	e0bfff17 	ldw	r2,-4(fp)
    e75c:	10c00324 	muli	r3,r2,12
    e760:	00800074 	movhi	r2,1
    e764:	1088ee04 	addi	r2,r2,9144
    e768:	1885883a 	add	r2,r3,r2
    e76c:	00000106 	br	e774 <close+0x38>
    e770:	0005883a 	mov	r2,zero
    e774:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    e778:	e0bffd17 	ldw	r2,-12(fp)
    e77c:	10001926 	beq	r2,zero,e7e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e780:	e0bffd17 	ldw	r2,-12(fp)
    e784:	10800017 	ldw	r2,0(r2)
    e788:	10800417 	ldw	r2,16(r2)
    e78c:	10000626 	beq	r2,zero,e7a8 <close+0x6c>
    e790:	e0bffd17 	ldw	r2,-12(fp)
    e794:	10800017 	ldw	r2,0(r2)
    e798:	10800417 	ldw	r2,16(r2)
    e79c:	e13ffd17 	ldw	r4,-12(fp)
    e7a0:	103ee83a 	callr	r2
    e7a4:	00000106 	br	e7ac <close+0x70>
    e7a8:	0005883a 	mov	r2,zero
    e7ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e7b0:	e13fff17 	ldw	r4,-4(fp)
    e7b4:	000ed9c0 	call	ed9c <alt_release_fd>
    if (rval < 0)
    e7b8:	e0bffe17 	ldw	r2,-8(fp)
    e7bc:	1000070e 	bge	r2,zero,e7dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
    e7c0:	000e7000 	call	e700 <alt_get_errno>
    e7c4:	1007883a 	mov	r3,r2
    e7c8:	e0bffe17 	ldw	r2,-8(fp)
    e7cc:	0085c83a 	sub	r2,zero,r2
    e7d0:	18800015 	stw	r2,0(r3)
      return -1;
    e7d4:	00bfffc4 	movi	r2,-1
    e7d8:	00000706 	br	e7f8 <close+0xbc>
    }
    return 0;
    e7dc:	0005883a 	mov	r2,zero
    e7e0:	00000506 	br	e7f8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7e4:	000e7000 	call	e700 <alt_get_errno>
    e7e8:	1007883a 	mov	r3,r2
    e7ec:	00801444 	movi	r2,81
    e7f0:	18800015 	stw	r2,0(r3)
    return -1;
    e7f4:	00bfffc4 	movi	r2,-1
  }
}
    e7f8:	e037883a 	mov	sp,fp
    e7fc:	dfc00117 	ldw	ra,4(sp)
    e800:	df000017 	ldw	fp,0(sp)
    e804:	dec00204 	addi	sp,sp,8
    e808:	f800283a 	ret

0000e80c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    e80c:	defffc04 	addi	sp,sp,-16
    e810:	df000315 	stw	fp,12(sp)
    e814:	df000304 	addi	fp,sp,12
    e818:	e13ffd15 	stw	r4,-12(fp)
    e81c:	e17ffe15 	stw	r5,-8(fp)
    e820:	e1bfff15 	stw	r6,-4(fp)
  return len;
    e824:	e0bfff17 	ldw	r2,-4(fp)
}
    e828:	e037883a 	mov	sp,fp
    e82c:	df000017 	ldw	fp,0(sp)
    e830:	dec00104 	addi	sp,sp,4
    e834:	f800283a 	ret

0000e838 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e838:	defffe04 	addi	sp,sp,-8
    e83c:	dfc00115 	stw	ra,4(sp)
    e840:	df000015 	stw	fp,0(sp)
    e844:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e848:	d0a00d17 	ldw	r2,-32716(gp)
    e84c:	10000326 	beq	r2,zero,e85c <alt_get_errno+0x24>
    e850:	d0a00d17 	ldw	r2,-32716(gp)
    e854:	103ee83a 	callr	r2
    e858:	00000106 	br	e860 <alt_get_errno+0x28>
    e85c:	d0a6dc04 	addi	r2,gp,-25744
}
    e860:	e037883a 	mov	sp,fp
    e864:	dfc00117 	ldw	ra,4(sp)
    e868:	df000017 	ldw	fp,0(sp)
    e86c:	dec00204 	addi	sp,sp,8
    e870:	f800283a 	ret

0000e874 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e874:	defffb04 	addi	sp,sp,-20
    e878:	dfc00415 	stw	ra,16(sp)
    e87c:	df000315 	stw	fp,12(sp)
    e880:	df000304 	addi	fp,sp,12
    e884:	e13ffe15 	stw	r4,-8(fp)
    e888:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e88c:	e0bffe17 	ldw	r2,-8(fp)
    e890:	10000616 	blt	r2,zero,e8ac <fstat+0x38>
    e894:	e0bffe17 	ldw	r2,-8(fp)
    e898:	10c00324 	muli	r3,r2,12
    e89c:	00800074 	movhi	r2,1
    e8a0:	1088ee04 	addi	r2,r2,9144
    e8a4:	1885883a 	add	r2,r3,r2
    e8a8:	00000106 	br	e8b0 <fstat+0x3c>
    e8ac:	0005883a 	mov	r2,zero
    e8b0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    e8b4:	e0bffd17 	ldw	r2,-12(fp)
    e8b8:	10001026 	beq	r2,zero,e8fc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e8bc:	e0bffd17 	ldw	r2,-12(fp)
    e8c0:	10800017 	ldw	r2,0(r2)
    e8c4:	10800817 	ldw	r2,32(r2)
    e8c8:	10000726 	beq	r2,zero,e8e8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    e8cc:	e0bffd17 	ldw	r2,-12(fp)
    e8d0:	10800017 	ldw	r2,0(r2)
    e8d4:	10800817 	ldw	r2,32(r2)
    e8d8:	e17fff17 	ldw	r5,-4(fp)
    e8dc:	e13ffd17 	ldw	r4,-12(fp)
    e8e0:	103ee83a 	callr	r2
    e8e4:	00000a06 	br	e910 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e8e8:	e0bfff17 	ldw	r2,-4(fp)
    e8ec:	00c80004 	movi	r3,8192
    e8f0:	10c00115 	stw	r3,4(r2)
      return 0;
    e8f4:	0005883a 	mov	r2,zero
    e8f8:	00000506 	br	e910 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e8fc:	000e8380 	call	e838 <alt_get_errno>
    e900:	1007883a 	mov	r3,r2
    e904:	00801444 	movi	r2,81
    e908:	18800015 	stw	r2,0(r3)
    return -1;
    e90c:	00bfffc4 	movi	r2,-1
  }
}
    e910:	e037883a 	mov	sp,fp
    e914:	dfc00117 	ldw	ra,4(sp)
    e918:	df000017 	ldw	fp,0(sp)
    e91c:	dec00204 	addi	sp,sp,8
    e920:	f800283a 	ret

0000e924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e924:	defffe04 	addi	sp,sp,-8
    e928:	dfc00115 	stw	ra,4(sp)
    e92c:	df000015 	stw	fp,0(sp)
    e930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e934:	d0a00d17 	ldw	r2,-32716(gp)
    e938:	10000326 	beq	r2,zero,e948 <alt_get_errno+0x24>
    e93c:	d0a00d17 	ldw	r2,-32716(gp)
    e940:	103ee83a 	callr	r2
    e944:	00000106 	br	e94c <alt_get_errno+0x28>
    e948:	d0a6dc04 	addi	r2,gp,-25744
}
    e94c:	e037883a 	mov	sp,fp
    e950:	dfc00117 	ldw	ra,4(sp)
    e954:	df000017 	ldw	fp,0(sp)
    e958:	dec00204 	addi	sp,sp,8
    e95c:	f800283a 	ret

0000e960 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e960:	deffed04 	addi	sp,sp,-76
    e964:	dfc01215 	stw	ra,72(sp)
    e968:	df001115 	stw	fp,68(sp)
    e96c:	df001104 	addi	fp,sp,68
    e970:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e974:	e0bfff17 	ldw	r2,-4(fp)
    e978:	10000616 	blt	r2,zero,e994 <isatty+0x34>
    e97c:	e0bfff17 	ldw	r2,-4(fp)
    e980:	10c00324 	muli	r3,r2,12
    e984:	00800074 	movhi	r2,1
    e988:	1088ee04 	addi	r2,r2,9144
    e98c:	1885883a 	add	r2,r3,r2
    e990:	00000106 	br	e998 <isatty+0x38>
    e994:	0005883a 	mov	r2,zero
    e998:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    e99c:	e0bfef17 	ldw	r2,-68(fp)
    e9a0:	10000e26 	beq	r2,zero,e9dc <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e9a4:	e0bfef17 	ldw	r2,-68(fp)
    e9a8:	10800017 	ldw	r2,0(r2)
    e9ac:	10800817 	ldw	r2,32(r2)
    e9b0:	1000021e 	bne	r2,zero,e9bc <isatty+0x5c>
    {
      return 1;
    e9b4:	00800044 	movi	r2,1
    e9b8:	00000d06 	br	e9f0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e9bc:	e0bff004 	addi	r2,fp,-64
    e9c0:	100b883a 	mov	r5,r2
    e9c4:	e13fff17 	ldw	r4,-4(fp)
    e9c8:	000e8740 	call	e874 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e9cc:	e0bff117 	ldw	r2,-60(fp)
    e9d0:	10880020 	cmpeqi	r2,r2,8192
    e9d4:	10803fcc 	andi	r2,r2,255
    e9d8:	00000506 	br	e9f0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e9dc:	000e9240 	call	e924 <alt_get_errno>
    e9e0:	1007883a 	mov	r3,r2
    e9e4:	00801444 	movi	r2,81
    e9e8:	18800015 	stw	r2,0(r3)
    return 0;
    e9ec:	0005883a 	mov	r2,zero
  }
}
    e9f0:	e037883a 	mov	sp,fp
    e9f4:	dfc00117 	ldw	ra,4(sp)
    e9f8:	df000017 	ldw	fp,0(sp)
    e9fc:	dec00204 	addi	sp,sp,8
    ea00:	f800283a 	ret

0000ea04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ea04:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    ea08:	01000074 	movhi	r4,1
    ea0c:	01400074 	movhi	r5,1
    ea10:	dfc00015 	stw	ra,0(sp)
    ea14:	2106bb04 	addi	r4,r4,6892
    ea18:	294d7804 	addi	r5,r5,13792
    ea1c:	21400a26 	beq	r4,r5,ea48 <alt_load+0x44>
  {
    while( to != end )
    ea20:	00800074 	movhi	r2,1
    ea24:	108d7804 	addi	r2,r2,13792
    ea28:	20800726 	beq	r4,r2,ea48 <alt_load+0x44>
    {
      *to++ = *from++;
    ea2c:	21800104 	addi	r6,r4,4
    ea30:	118dc83a 	sub	r6,r2,r6
    ea34:	300cd0ba 	srli	r6,r6,2
    ea38:	31800044 	addi	r6,r6,1
    ea3c:	318d883a 	add	r6,r6,r6
    ea40:	318d883a 	add	r6,r6,r6
    ea44:	00079000 	call	7900 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    ea48:	01000034 	movhi	r4,0
    ea4c:	01400034 	movhi	r5,0
    ea50:	21000804 	addi	r4,r4,32
    ea54:	29400804 	addi	r5,r5,32
    ea58:	21400a26 	beq	r4,r5,ea84 <alt_load+0x80>
  {
    while( to != end )
    ea5c:	00800034 	movhi	r2,0
    ea60:	10809104 	addi	r2,r2,580
    ea64:	20800726 	beq	r4,r2,ea84 <alt_load+0x80>
    {
      *to++ = *from++;
    ea68:	21800104 	addi	r6,r4,4
    ea6c:	118dc83a 	sub	r6,r2,r6
    ea70:	300cd0ba 	srli	r6,r6,2
    ea74:	31800044 	addi	r6,r6,1
    ea78:	318d883a 	add	r6,r6,r6
    ea7c:	318d883a 	add	r6,r6,r6
    ea80:	00079000 	call	7900 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    ea84:	01000074 	movhi	r4,1
    ea88:	01400074 	movhi	r5,1
    ea8c:	2104d504 	addi	r4,r4,4948
    ea90:	2944d504 	addi	r5,r5,4948
    ea94:	21400a26 	beq	r4,r5,eac0 <alt_load+0xbc>
  {
    while( to != end )
    ea98:	00800074 	movhi	r2,1
    ea9c:	1086bb04 	addi	r2,r2,6892
    eaa0:	20800726 	beq	r4,r2,eac0 <alt_load+0xbc>
    {
      *to++ = *from++;
    eaa4:	21800104 	addi	r6,r4,4
    eaa8:	118dc83a 	sub	r6,r2,r6
    eaac:	300cd0ba 	srli	r6,r6,2
    eab0:	31800044 	addi	r6,r6,1
    eab4:	318d883a 	add	r6,r6,r6
    eab8:	318d883a 	add	r6,r6,r6
    eabc:	00079000 	call	7900 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    eac0:	00100fc0 	call	100fc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    eac4:	dfc00017 	ldw	ra,0(sp)
    eac8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    eacc:	00102781 	jmpi	10278 <alt_icache_flush_all>

0000ead0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ead0:	defffe04 	addi	sp,sp,-8
    ead4:	dfc00115 	stw	ra,4(sp)
    ead8:	df000015 	stw	fp,0(sp)
    eadc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    eae0:	d0a00d17 	ldw	r2,-32716(gp)
    eae4:	10000326 	beq	r2,zero,eaf4 <alt_get_errno+0x24>
    eae8:	d0a00d17 	ldw	r2,-32716(gp)
    eaec:	103ee83a 	callr	r2
    eaf0:	00000106 	br	eaf8 <alt_get_errno+0x28>
    eaf4:	d0a6dc04 	addi	r2,gp,-25744
}
    eaf8:	e037883a 	mov	sp,fp
    eafc:	dfc00117 	ldw	ra,4(sp)
    eb00:	df000017 	ldw	fp,0(sp)
    eb04:	dec00204 	addi	sp,sp,8
    eb08:	f800283a 	ret

0000eb0c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    eb0c:	defff904 	addi	sp,sp,-28
    eb10:	dfc00615 	stw	ra,24(sp)
    eb14:	df000515 	stw	fp,20(sp)
    eb18:	df000504 	addi	fp,sp,20
    eb1c:	e13ffd15 	stw	r4,-12(fp)
    eb20:	e17ffe15 	stw	r5,-8(fp)
    eb24:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    eb28:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb2c:	e0bffd17 	ldw	r2,-12(fp)
    eb30:	10000616 	blt	r2,zero,eb4c <lseek+0x40>
    eb34:	e0bffd17 	ldw	r2,-12(fp)
    eb38:	10c00324 	muli	r3,r2,12
    eb3c:	00800074 	movhi	r2,1
    eb40:	1088ee04 	addi	r2,r2,9144
    eb44:	1885883a 	add	r2,r3,r2
    eb48:	00000106 	br	eb50 <lseek+0x44>
    eb4c:	0005883a 	mov	r2,zero
    eb50:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    eb54:	e0bffc17 	ldw	r2,-16(fp)
    eb58:	10001026 	beq	r2,zero,eb9c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    eb5c:	e0bffc17 	ldw	r2,-16(fp)
    eb60:	10800017 	ldw	r2,0(r2)
    eb64:	10800717 	ldw	r2,28(r2)
    eb68:	10000926 	beq	r2,zero,eb90 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    eb6c:	e0bffc17 	ldw	r2,-16(fp)
    eb70:	10800017 	ldw	r2,0(r2)
    eb74:	10800717 	ldw	r2,28(r2)
    eb78:	e1bfff17 	ldw	r6,-4(fp)
    eb7c:	e17ffe17 	ldw	r5,-8(fp)
    eb80:	e13ffc17 	ldw	r4,-16(fp)
    eb84:	103ee83a 	callr	r2
    eb88:	e0bffb15 	stw	r2,-20(fp)
    eb8c:	00000506 	br	eba4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    eb90:	00bfde84 	movi	r2,-134
    eb94:	e0bffb15 	stw	r2,-20(fp)
    eb98:	00000206 	br	eba4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    eb9c:	00bfebc4 	movi	r2,-81
    eba0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    eba4:	e0bffb17 	ldw	r2,-20(fp)
    eba8:	1000070e 	bge	r2,zero,ebc8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    ebac:	000ead00 	call	ead0 <alt_get_errno>
    ebb0:	1007883a 	mov	r3,r2
    ebb4:	e0bffb17 	ldw	r2,-20(fp)
    ebb8:	0085c83a 	sub	r2,zero,r2
    ebbc:	18800015 	stw	r2,0(r3)
    rc = -1;
    ebc0:	00bfffc4 	movi	r2,-1
    ebc4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    ebc8:	e0bffb17 	ldw	r2,-20(fp)
}
    ebcc:	e037883a 	mov	sp,fp
    ebd0:	dfc00117 	ldw	ra,4(sp)
    ebd4:	df000017 	ldw	fp,0(sp)
    ebd8:	dec00204 	addi	sp,sp,8
    ebdc:	f800283a 	ret

0000ebe0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ebe0:	defffd04 	addi	sp,sp,-12
    ebe4:	dfc00215 	stw	ra,8(sp)
    ebe8:	df000115 	stw	fp,4(sp)
    ebec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ebf0:	0009883a 	mov	r4,zero
    ebf4:	000f0d80 	call	f0d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    ebf8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ebfc:	000f1100 	call	f110 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ec00:	01800074 	movhi	r6,1
    ec04:	3186b304 	addi	r6,r6,6860
    ec08:	01400074 	movhi	r5,1
    ec0c:	2946b304 	addi	r5,r5,6860
    ec10:	01000074 	movhi	r4,1
    ec14:	2106b304 	addi	r4,r4,6860
    ec18:	00106100 	call	10610 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ec1c:	00101b00 	call	101b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ec20:	01000074 	movhi	r4,1
    ec24:	21008504 	addi	r4,r4,532
    ec28:	0010e100 	call	10e10 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ec2c:	d0a6e017 	ldw	r2,-25728(gp)
    ec30:	d0e6e117 	ldw	r3,-25724(gp)
    ec34:	d126e217 	ldw	r4,-25720(gp)
    ec38:	200d883a 	mov	r6,r4
    ec3c:	180b883a 	mov	r5,r3
    ec40:	1009883a 	mov	r4,r2
    ec44:	0000f140 	call	f14 <main>
    ec48:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    ec4c:	01000044 	movi	r4,1
    ec50:	000e73c0 	call	e73c <close>
  exit (result);
    ec54:	e13fff17 	ldw	r4,-4(fp)
    ec58:	0010e240 	call	10e24 <exit>

0000ec5c <__malloc_lock>:
    ec5c:	f800283a 	ret

0000ec60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ec60:	f800283a 	ret

0000ec64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ec64:	defffe04 	addi	sp,sp,-8
    ec68:	dfc00115 	stw	ra,4(sp)
    ec6c:	df000015 	stw	fp,0(sp)
    ec70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ec74:	d0a00d17 	ldw	r2,-32716(gp)
    ec78:	10000326 	beq	r2,zero,ec88 <alt_get_errno+0x24>
    ec7c:	d0a00d17 	ldw	r2,-32716(gp)
    ec80:	103ee83a 	callr	r2
    ec84:	00000106 	br	ec8c <alt_get_errno+0x28>
    ec88:	d0a6dc04 	addi	r2,gp,-25744
}
    ec8c:	e037883a 	mov	sp,fp
    ec90:	dfc00117 	ldw	ra,4(sp)
    ec94:	df000017 	ldw	fp,0(sp)
    ec98:	dec00204 	addi	sp,sp,8
    ec9c:	f800283a 	ret

0000eca0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eca0:	defff904 	addi	sp,sp,-28
    eca4:	dfc00615 	stw	ra,24(sp)
    eca8:	df000515 	stw	fp,20(sp)
    ecac:	df000504 	addi	fp,sp,20
    ecb0:	e13ffd15 	stw	r4,-12(fp)
    ecb4:	e17ffe15 	stw	r5,-8(fp)
    ecb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ecbc:	e0bffd17 	ldw	r2,-12(fp)
    ecc0:	10000616 	blt	r2,zero,ecdc <read+0x3c>
    ecc4:	e0bffd17 	ldw	r2,-12(fp)
    ecc8:	10c00324 	muli	r3,r2,12
    eccc:	00800074 	movhi	r2,1
    ecd0:	1088ee04 	addi	r2,r2,9144
    ecd4:	1885883a 	add	r2,r3,r2
    ecd8:	00000106 	br	ece0 <read+0x40>
    ecdc:	0005883a 	mov	r2,zero
    ece0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    ece4:	e0bffb17 	ldw	r2,-20(fp)
    ece8:	10002226 	beq	r2,zero,ed74 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ecec:	e0bffb17 	ldw	r2,-20(fp)
    ecf0:	10800217 	ldw	r2,8(r2)
    ecf4:	108000cc 	andi	r2,r2,3
    ecf8:	10800060 	cmpeqi	r2,r2,1
    ecfc:	1000181e 	bne	r2,zero,ed60 <read+0xc0>
        (fd->dev->read))
    ed00:	e0bffb17 	ldw	r2,-20(fp)
    ed04:	10800017 	ldw	r2,0(r2)
    ed08:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ed0c:	10001426 	beq	r2,zero,ed60 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ed10:	e0bffb17 	ldw	r2,-20(fp)
    ed14:	10800017 	ldw	r2,0(r2)
    ed18:	10800517 	ldw	r2,20(r2)
    ed1c:	e0ffff17 	ldw	r3,-4(fp)
    ed20:	180d883a 	mov	r6,r3
    ed24:	e17ffe17 	ldw	r5,-8(fp)
    ed28:	e13ffb17 	ldw	r4,-20(fp)
    ed2c:	103ee83a 	callr	r2
    ed30:	e0bffc15 	stw	r2,-16(fp)
    ed34:	e0bffc17 	ldw	r2,-16(fp)
    ed38:	1000070e 	bge	r2,zero,ed58 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    ed3c:	000ec640 	call	ec64 <alt_get_errno>
    ed40:	1007883a 	mov	r3,r2
    ed44:	e0bffc17 	ldw	r2,-16(fp)
    ed48:	0085c83a 	sub	r2,zero,r2
    ed4c:	18800015 	stw	r2,0(r3)
          return -1;
    ed50:	00bfffc4 	movi	r2,-1
    ed54:	00000c06 	br	ed88 <read+0xe8>
        }
        return rval;
    ed58:	e0bffc17 	ldw	r2,-16(fp)
    ed5c:	00000a06 	br	ed88 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    ed60:	000ec640 	call	ec64 <alt_get_errno>
    ed64:	1007883a 	mov	r3,r2
    ed68:	00800344 	movi	r2,13
    ed6c:	18800015 	stw	r2,0(r3)
    ed70:	00000406 	br	ed84 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ed74:	000ec640 	call	ec64 <alt_get_errno>
    ed78:	1007883a 	mov	r3,r2
    ed7c:	00801444 	movi	r2,81
    ed80:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ed84:	00bfffc4 	movi	r2,-1
}
    ed88:	e037883a 	mov	sp,fp
    ed8c:	dfc00117 	ldw	ra,4(sp)
    ed90:	df000017 	ldw	fp,0(sp)
    ed94:	dec00204 	addi	sp,sp,8
    ed98:	f800283a 	ret

0000ed9c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    ed9c:	defffe04 	addi	sp,sp,-8
    eda0:	df000115 	stw	fp,4(sp)
    eda4:	df000104 	addi	fp,sp,4
    eda8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    edac:	e0bfff17 	ldw	r2,-4(fp)
    edb0:	108000d0 	cmplti	r2,r2,3
    edb4:	10000d1e 	bne	r2,zero,edec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    edb8:	00800074 	movhi	r2,1
    edbc:	1088ee04 	addi	r2,r2,9144
    edc0:	e0ffff17 	ldw	r3,-4(fp)
    edc4:	18c00324 	muli	r3,r3,12
    edc8:	10c5883a 	add	r2,r2,r3
    edcc:	10800204 	addi	r2,r2,8
    edd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    edd4:	00800074 	movhi	r2,1
    edd8:	1088ee04 	addi	r2,r2,9144
    eddc:	e0ffff17 	ldw	r3,-4(fp)
    ede0:	18c00324 	muli	r3,r3,12
    ede4:	10c5883a 	add	r2,r2,r3
    ede8:	10000015 	stw	zero,0(r2)
  }
}
    edec:	0001883a 	nop
    edf0:	e037883a 	mov	sp,fp
    edf4:	df000017 	ldw	fp,0(sp)
    edf8:	dec00104 	addi	sp,sp,4
    edfc:	f800283a 	ret

0000ee00 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    ee00:	defff904 	addi	sp,sp,-28
    ee04:	df000615 	stw	fp,24(sp)
    ee08:	df000604 	addi	fp,sp,24
    ee0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee10:	0005303a 	rdctl	r2,status
    ee14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee18:	e0fffe17 	ldw	r3,-8(fp)
    ee1c:	00bfff84 	movi	r2,-2
    ee20:	1884703a 	and	r2,r3,r2
    ee24:	1001703a 	wrctl	status,r2
  
  return context;
    ee28:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ee2c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ee30:	d0a00e17 	ldw	r2,-32712(gp)
    ee34:	10c000c4 	addi	r3,r2,3
    ee38:	00bfff04 	movi	r2,-4
    ee3c:	1884703a 	and	r2,r3,r2
    ee40:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ee44:	d0e00e17 	ldw	r3,-32712(gp)
    ee48:	e0bfff17 	ldw	r2,-4(fp)
    ee4c:	1887883a 	add	r3,r3,r2
    ee50:	00804034 	movhi	r2,256
    ee54:	10800004 	addi	r2,r2,0
    ee58:	10c0062e 	bgeu	r2,r3,ee74 <sbrk+0x74>
    ee5c:	e0bffb17 	ldw	r2,-20(fp)
    ee60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ee64:	e0bffa17 	ldw	r2,-24(fp)
    ee68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ee6c:	00bfffc4 	movi	r2,-1
    ee70:	00000b06 	br	eea0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    ee74:	d0a00e17 	ldw	r2,-32712(gp)
    ee78:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    ee7c:	d0e00e17 	ldw	r3,-32712(gp)
    ee80:	e0bfff17 	ldw	r2,-4(fp)
    ee84:	1885883a 	add	r2,r3,r2
    ee88:	d0a00e15 	stw	r2,-32712(gp)
    ee8c:	e0bffb17 	ldw	r2,-20(fp)
    ee90:	e0bffc15 	stw	r2,-16(fp)
    ee94:	e0bffc17 	ldw	r2,-16(fp)
    ee98:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ee9c:	e0bffd17 	ldw	r2,-12(fp)
} 
    eea0:	e037883a 	mov	sp,fp
    eea4:	df000017 	ldw	fp,0(sp)
    eea8:	dec00104 	addi	sp,sp,4
    eeac:	f800283a 	ret

0000eeb0 <alt_uncached_free>:
 * Free a block of uncached memory.
 */

void 
alt_uncached_free(volatile void* ptr)
{
    eeb0:	defffd04 	addi	sp,sp,-12
    eeb4:	dfc00215 	stw	ra,8(sp)
    eeb8:	df000115 	stw	fp,4(sp)
    eebc:	df000104 	addi	fp,sp,4
    eec0:	e13fff15 	stw	r4,-4(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
    eec4:	e0ffff17 	ldw	r3,-4(fp)
    eec8:	00a00034 	movhi	r2,32768
    eecc:	10bfffc4 	addi	r2,r2,-1
    eed0:	1884703a 	and	r2,r3,r2
    eed4:	1009883a 	mov	r4,r2
    eed8:	0001dcc0 	call	1dcc <free>
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  free((void*)ptr);
#endif /* No data cache */
}
    eedc:	0001883a 	nop
    eee0:	e037883a 	mov	sp,fp
    eee4:	dfc00117 	ldw	ra,4(sp)
    eee8:	df000017 	ldw	fp,0(sp)
    eeec:	dec00204 	addi	sp,sp,8
    eef0:	f800283a 	ret

0000eef4 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eef4:	defffa04 	addi	sp,sp,-24
    eef8:	dfc00515 	stw	ra,20(sp)
    eefc:	df000415 	stw	fp,16(sp)
    ef00:	df000404 	addi	fp,sp,16
    ef04:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
    ef08:	e0bfff17 	ldw	r2,-4(fp)
    ef0c:	108007c4 	addi	r2,r2,31
    ef10:	1004d17a 	srli	r2,r2,5
    ef14:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ef18:	e0bffc17 	ldw	r2,-16(fp)
    ef1c:	1004917a 	slli	r2,r2,5
    ef20:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    ef24:	e17ffd17 	ldw	r5,-12(fp)
    ef28:	01000804 	movi	r4,32
    ef2c:	0010e5c0 	call	10e5c <memalign>
    ef30:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
    ef34:	e0bffe17 	ldw	r2,-8(fp)
    ef38:	1000021e 	bne	r2,zero,ef44 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
    ef3c:	0005883a 	mov	r2,zero
    ef40:	00000506 	br	ef58 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    ef44:	e17ffd17 	ldw	r5,-12(fp)
    ef48:	e13ffe17 	ldw	r4,-8(fp)
    ef4c:	00100840 	call	10084 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    ef50:	e0bffe17 	ldw	r2,-8(fp)
    ef54:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    ef58:	e037883a 	mov	sp,fp
    ef5c:	dfc00117 	ldw	ra,4(sp)
    ef60:	df000017 	ldw	fp,0(sp)
    ef64:	dec00204 	addi	sp,sp,8
    ef68:	f800283a 	ret

0000ef6c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    ef6c:	000ff2c1 	jmpi	ff2c <alt_busy_sleep>

0000ef70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef70:	defffe04 	addi	sp,sp,-8
    ef74:	dfc00115 	stw	ra,4(sp)
    ef78:	df000015 	stw	fp,0(sp)
    ef7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef80:	d0a00d17 	ldw	r2,-32716(gp)
    ef84:	10000326 	beq	r2,zero,ef94 <alt_get_errno+0x24>
    ef88:	d0a00d17 	ldw	r2,-32716(gp)
    ef8c:	103ee83a 	callr	r2
    ef90:	00000106 	br	ef98 <alt_get_errno+0x28>
    ef94:	d0a6dc04 	addi	r2,gp,-25744
}
    ef98:	e037883a 	mov	sp,fp
    ef9c:	dfc00117 	ldw	ra,4(sp)
    efa0:	df000017 	ldw	fp,0(sp)
    efa4:	dec00204 	addi	sp,sp,8
    efa8:	f800283a 	ret

0000efac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    efac:	defff904 	addi	sp,sp,-28
    efb0:	dfc00615 	stw	ra,24(sp)
    efb4:	df000515 	stw	fp,20(sp)
    efb8:	df000504 	addi	fp,sp,20
    efbc:	e13ffd15 	stw	r4,-12(fp)
    efc0:	e17ffe15 	stw	r5,-8(fp)
    efc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    efc8:	e0bffd17 	ldw	r2,-12(fp)
    efcc:	10000616 	blt	r2,zero,efe8 <write+0x3c>
    efd0:	e0bffd17 	ldw	r2,-12(fp)
    efd4:	10c00324 	muli	r3,r2,12
    efd8:	00800074 	movhi	r2,1
    efdc:	1088ee04 	addi	r2,r2,9144
    efe0:	1885883a 	add	r2,r3,r2
    efe4:	00000106 	br	efec <write+0x40>
    efe8:	0005883a 	mov	r2,zero
    efec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    eff0:	e0bffb17 	ldw	r2,-20(fp)
    eff4:	10002126 	beq	r2,zero,f07c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    eff8:	e0bffb17 	ldw	r2,-20(fp)
    effc:	10800217 	ldw	r2,8(r2)
    f000:	108000cc 	andi	r2,r2,3
    f004:	10001826 	beq	r2,zero,f068 <write+0xbc>
    f008:	e0bffb17 	ldw	r2,-20(fp)
    f00c:	10800017 	ldw	r2,0(r2)
    f010:	10800617 	ldw	r2,24(r2)
    f014:	10001426 	beq	r2,zero,f068 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    f018:	e0bffb17 	ldw	r2,-20(fp)
    f01c:	10800017 	ldw	r2,0(r2)
    f020:	10800617 	ldw	r2,24(r2)
    f024:	e0ffff17 	ldw	r3,-4(fp)
    f028:	180d883a 	mov	r6,r3
    f02c:	e17ffe17 	ldw	r5,-8(fp)
    f030:	e13ffb17 	ldw	r4,-20(fp)
    f034:	103ee83a 	callr	r2
    f038:	e0bffc15 	stw	r2,-16(fp)
    f03c:	e0bffc17 	ldw	r2,-16(fp)
    f040:	1000070e 	bge	r2,zero,f060 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    f044:	000ef700 	call	ef70 <alt_get_errno>
    f048:	1007883a 	mov	r3,r2
    f04c:	e0bffc17 	ldw	r2,-16(fp)
    f050:	0085c83a 	sub	r2,zero,r2
    f054:	18800015 	stw	r2,0(r3)
        return -1;
    f058:	00bfffc4 	movi	r2,-1
    f05c:	00000c06 	br	f090 <write+0xe4>
      }
      return rval;
    f060:	e0bffc17 	ldw	r2,-16(fp)
    f064:	00000a06 	br	f090 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    f068:	000ef700 	call	ef70 <alt_get_errno>
    f06c:	1007883a 	mov	r3,r2
    f070:	00800344 	movi	r2,13
    f074:	18800015 	stw	r2,0(r3)
    f078:	00000406 	br	f08c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    f07c:	000ef700 	call	ef70 <alt_get_errno>
    f080:	1007883a 	mov	r3,r2
    f084:	00801444 	movi	r2,81
    f088:	18800015 	stw	r2,0(r3)
  }
  return -1;
    f08c:	00bfffc4 	movi	r2,-1
}
    f090:	e037883a 	mov	sp,fp
    f094:	dfc00117 	ldw	ra,4(sp)
    f098:	df000017 	ldw	fp,0(sp)
    f09c:	dec00204 	addi	sp,sp,8
    f0a0:	f800283a 	ret

0000f0a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    f0a4:	defffd04 	addi	sp,sp,-12
    f0a8:	dfc00215 	stw	ra,8(sp)
    f0ac:	df000115 	stw	fp,4(sp)
    f0b0:	df000104 	addi	fp,sp,4
    f0b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    f0b8:	d1600a04 	addi	r5,gp,-32728
    f0bc:	e13fff17 	ldw	r4,-4(fp)
    f0c0:	00101440 	call	10144 <alt_dev_llist_insert>
}
    f0c4:	e037883a 	mov	sp,fp
    f0c8:	dfc00117 	ldw	ra,4(sp)
    f0cc:	df000017 	ldw	fp,0(sp)
    f0d0:	dec00204 	addi	sp,sp,8
    f0d4:	f800283a 	ret

0000f0d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    f0d8:	defffd04 	addi	sp,sp,-12
    f0dc:	dfc00215 	stw	ra,8(sp)
    f0e0:	df000115 	stw	fp,4(sp)
    f0e4:	df000104 	addi	fp,sp,4
    f0e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    f0ec:	0010a840 	call	10a84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    f0f0:	00800044 	movi	r2,1
    f0f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    f0f8:	0001883a 	nop
    f0fc:	e037883a 	mov	sp,fp
    f100:	dfc00117 	ldw	ra,4(sp)
    f104:	df000017 	ldw	fp,0(sp)
    f108:	dec00204 	addi	sp,sp,8
    f10c:	f800283a 	ret

0000f110 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    f110:	defffe04 	addi	sp,sp,-8
    f114:	dfc00115 	stw	ra,4(sp)
    f118:	df000015 	stw	fp,0(sp)
    f11c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    f120:	00804034 	movhi	r2,256
    f124:	10840004 	addi	r2,r2,4096
    f128:	d0a6e315 	stw	r2,-25716(gp)
    f12c:	0080bef4 	movhi	r2,763
    f130:	10bc2004 	addi	r2,r2,-3968
    f134:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    f138:	01c0fa04 	movi	r7,1000
    f13c:	01800104 	movi	r6,4
    f140:	000b883a 	mov	r5,zero
    f144:	01004034 	movhi	r4,256
    f148:	21040804 	addi	r4,r4,4128
    f14c:	000fc6c0 	call	fc6c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    f150:	000d883a 	mov	r6,zero
    f154:	000b883a 	mov	r5,zero
    f158:	01000074 	movhi	r4,1
    f15c:	21095804 	addi	r4,r4,9568
    f160:	000f2f00 	call	f2f0 <altera_avalon_jtag_uart_init>
    f164:	01000074 	movhi	r4,1
    f168:	21094e04 	addi	r4,r4,9528
    f16c:	000f0a40 	call	f0a4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    f170:	0001883a 	nop
}
    f174:	0001883a 	nop
    f178:	e037883a 	mov	sp,fp
    f17c:	dfc00117 	ldw	ra,4(sp)
    f180:	df000017 	ldw	fp,0(sp)
    f184:	dec00204 	addi	sp,sp,8
    f188:	f800283a 	ret

0000f18c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    f18c:	defffa04 	addi	sp,sp,-24
    f190:	dfc00515 	stw	ra,20(sp)
    f194:	df000415 	stw	fp,16(sp)
    f198:	df000404 	addi	fp,sp,16
    f19c:	e13ffd15 	stw	r4,-12(fp)
    f1a0:	e17ffe15 	stw	r5,-8(fp)
    f1a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f1a8:	e0bffd17 	ldw	r2,-12(fp)
    f1ac:	10800017 	ldw	r2,0(r2)
    f1b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    f1b4:	e0bffc17 	ldw	r2,-16(fp)
    f1b8:	10c00a04 	addi	r3,r2,40
    f1bc:	e0bffd17 	ldw	r2,-12(fp)
    f1c0:	10800217 	ldw	r2,8(r2)
    f1c4:	100f883a 	mov	r7,r2
    f1c8:	e1bfff17 	ldw	r6,-4(fp)
    f1cc:	e17ffe17 	ldw	r5,-8(fp)
    f1d0:	1809883a 	mov	r4,r3
    f1d4:	000f7b40 	call	f7b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    f1d8:	e037883a 	mov	sp,fp
    f1dc:	dfc00117 	ldw	ra,4(sp)
    f1e0:	df000017 	ldw	fp,0(sp)
    f1e4:	dec00204 	addi	sp,sp,8
    f1e8:	f800283a 	ret

0000f1ec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    f1ec:	defffa04 	addi	sp,sp,-24
    f1f0:	dfc00515 	stw	ra,20(sp)
    f1f4:	df000415 	stw	fp,16(sp)
    f1f8:	df000404 	addi	fp,sp,16
    f1fc:	e13ffd15 	stw	r4,-12(fp)
    f200:	e17ffe15 	stw	r5,-8(fp)
    f204:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f208:	e0bffd17 	ldw	r2,-12(fp)
    f20c:	10800017 	ldw	r2,0(r2)
    f210:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    f214:	e0bffc17 	ldw	r2,-16(fp)
    f218:	10c00a04 	addi	r3,r2,40
    f21c:	e0bffd17 	ldw	r2,-12(fp)
    f220:	10800217 	ldw	r2,8(r2)
    f224:	100f883a 	mov	r7,r2
    f228:	e1bfff17 	ldw	r6,-4(fp)
    f22c:	e17ffe17 	ldw	r5,-8(fp)
    f230:	1809883a 	mov	r4,r3
    f234:	000f9d00 	call	f9d0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    f238:	e037883a 	mov	sp,fp
    f23c:	dfc00117 	ldw	ra,4(sp)
    f240:	df000017 	ldw	fp,0(sp)
    f244:	dec00204 	addi	sp,sp,8
    f248:	f800283a 	ret

0000f24c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    f24c:	defffc04 	addi	sp,sp,-16
    f250:	dfc00315 	stw	ra,12(sp)
    f254:	df000215 	stw	fp,8(sp)
    f258:	df000204 	addi	fp,sp,8
    f25c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    f260:	e0bfff17 	ldw	r2,-4(fp)
    f264:	10800017 	ldw	r2,0(r2)
    f268:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    f26c:	e0bffe17 	ldw	r2,-8(fp)
    f270:	10c00a04 	addi	r3,r2,40
    f274:	e0bfff17 	ldw	r2,-4(fp)
    f278:	10800217 	ldw	r2,8(r2)
    f27c:	100b883a 	mov	r5,r2
    f280:	1809883a 	mov	r4,r3
    f284:	000f65c0 	call	f65c <altera_avalon_jtag_uart_close>
}
    f288:	e037883a 	mov	sp,fp
    f28c:	dfc00117 	ldw	ra,4(sp)
    f290:	df000017 	ldw	fp,0(sp)
    f294:	dec00204 	addi	sp,sp,8
    f298:	f800283a 	ret

0000f29c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    f29c:	defffa04 	addi	sp,sp,-24
    f2a0:	dfc00515 	stw	ra,20(sp)
    f2a4:	df000415 	stw	fp,16(sp)
    f2a8:	df000404 	addi	fp,sp,16
    f2ac:	e13ffd15 	stw	r4,-12(fp)
    f2b0:	e17ffe15 	stw	r5,-8(fp)
    f2b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    f2b8:	e0bffd17 	ldw	r2,-12(fp)
    f2bc:	10800017 	ldw	r2,0(r2)
    f2c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    f2c4:	e0bffc17 	ldw	r2,-16(fp)
    f2c8:	10800a04 	addi	r2,r2,40
    f2cc:	e1bfff17 	ldw	r6,-4(fp)
    f2d0:	e17ffe17 	ldw	r5,-8(fp)
    f2d4:	1009883a 	mov	r4,r2
    f2d8:	000f6c40 	call	f6c4 <altera_avalon_jtag_uart_ioctl>
}
    f2dc:	e037883a 	mov	sp,fp
    f2e0:	dfc00117 	ldw	ra,4(sp)
    f2e4:	df000017 	ldw	fp,0(sp)
    f2e8:	dec00204 	addi	sp,sp,8
    f2ec:	f800283a 	ret

0000f2f0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    f2f0:	defffa04 	addi	sp,sp,-24
    f2f4:	dfc00515 	stw	ra,20(sp)
    f2f8:	df000415 	stw	fp,16(sp)
    f2fc:	df000404 	addi	fp,sp,16
    f300:	e13ffd15 	stw	r4,-12(fp)
    f304:	e17ffe15 	stw	r5,-8(fp)
    f308:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f30c:	e0bffd17 	ldw	r2,-12(fp)
    f310:	00c00044 	movi	r3,1
    f314:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    f318:	e0bffd17 	ldw	r2,-12(fp)
    f31c:	10800017 	ldw	r2,0(r2)
    f320:	10800104 	addi	r2,r2,4
    f324:	1007883a 	mov	r3,r2
    f328:	e0bffd17 	ldw	r2,-12(fp)
    f32c:	10800817 	ldw	r2,32(r2)
    f330:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    f334:	e0bffe17 	ldw	r2,-8(fp)
    f338:	e0ffff17 	ldw	r3,-4(fp)
    f33c:	d8000015 	stw	zero,0(sp)
    f340:	e1fffd17 	ldw	r7,-12(fp)
    f344:	01800074 	movhi	r6,1
    f348:	31bcec04 	addi	r6,r6,-3152
    f34c:	180b883a 	mov	r5,r3
    f350:	1009883a 	mov	r4,r2
    f354:	00102ac0 	call	102ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    f358:	e0bffd17 	ldw	r2,-12(fp)
    f35c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    f360:	e0bffd17 	ldw	r2,-12(fp)
    f364:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    f368:	d0e6e617 	ldw	r3,-25704(gp)
    f36c:	e1fffd17 	ldw	r7,-12(fp)
    f370:	01800074 	movhi	r6,1
    f374:	31bd6f04 	addi	r6,r6,-2628
    f378:	180b883a 	mov	r5,r3
    f37c:	1009883a 	mov	r4,r2
    f380:	000fe000 	call	fe00 <alt_alarm_start>
    f384:	1000040e 	bge	r2,zero,f398 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    f388:	e0fffd17 	ldw	r3,-12(fp)
    f38c:	00a00034 	movhi	r2,32768
    f390:	10bfffc4 	addi	r2,r2,-1
    f394:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    f398:	0001883a 	nop
    f39c:	e037883a 	mov	sp,fp
    f3a0:	dfc00117 	ldw	ra,4(sp)
    f3a4:	df000017 	ldw	fp,0(sp)
    f3a8:	dec00204 	addi	sp,sp,8
    f3ac:	f800283a 	ret

0000f3b0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    f3b0:	defff804 	addi	sp,sp,-32
    f3b4:	df000715 	stw	fp,28(sp)
    f3b8:	df000704 	addi	fp,sp,28
    f3bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    f3c0:	e0bfff17 	ldw	r2,-4(fp)
    f3c4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    f3c8:	e0bffb17 	ldw	r2,-20(fp)
    f3cc:	10800017 	ldw	r2,0(r2)
    f3d0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f3d4:	e0bffc17 	ldw	r2,-16(fp)
    f3d8:	10800104 	addi	r2,r2,4
    f3dc:	10800037 	ldwio	r2,0(r2)
    f3e0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    f3e4:	e0bffd17 	ldw	r2,-12(fp)
    f3e8:	1080c00c 	andi	r2,r2,768
    f3ec:	10006d26 	beq	r2,zero,f5a4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    f3f0:	e0bffd17 	ldw	r2,-12(fp)
    f3f4:	1080400c 	andi	r2,r2,256
    f3f8:	10003526 	beq	r2,zero,f4d0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    f3fc:	00800074 	movhi	r2,1
    f400:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f404:	e0bffb17 	ldw	r2,-20(fp)
    f408:	10800a17 	ldw	r2,40(r2)
    f40c:	10800044 	addi	r2,r2,1
    f410:	1081ffcc 	andi	r2,r2,2047
    f414:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    f418:	e0bffb17 	ldw	r2,-20(fp)
    f41c:	10c00b17 	ldw	r3,44(r2)
    f420:	e0bffe17 	ldw	r2,-8(fp)
    f424:	18801526 	beq	r3,r2,f47c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    f428:	e0bffc17 	ldw	r2,-16(fp)
    f42c:	10800037 	ldwio	r2,0(r2)
    f430:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    f434:	e0bff917 	ldw	r2,-28(fp)
    f438:	10a0000c 	andi	r2,r2,32768
    f43c:	10001126 	beq	r2,zero,f484 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    f440:	e0bffb17 	ldw	r2,-20(fp)
    f444:	10800a17 	ldw	r2,40(r2)
    f448:	e0fff917 	ldw	r3,-28(fp)
    f44c:	1809883a 	mov	r4,r3
    f450:	e0fffb17 	ldw	r3,-20(fp)
    f454:	1885883a 	add	r2,r3,r2
    f458:	10800e04 	addi	r2,r2,56
    f45c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f460:	e0bffb17 	ldw	r2,-20(fp)
    f464:	10800a17 	ldw	r2,40(r2)
    f468:	10800044 	addi	r2,r2,1
    f46c:	10c1ffcc 	andi	r3,r2,2047
    f470:	e0bffb17 	ldw	r2,-20(fp)
    f474:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    f478:	003fe206 	br	f404 <__alt_data_end+0xff00f404>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    f47c:	0001883a 	nop
    f480:	00000106 	br	f488 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    f484:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    f488:	e0bff917 	ldw	r2,-28(fp)
    f48c:	10bfffec 	andhi	r2,r2,65535
    f490:	10000f26 	beq	r2,zero,f4d0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f494:	e0bffb17 	ldw	r2,-20(fp)
    f498:	10c00817 	ldw	r3,32(r2)
    f49c:	00bfff84 	movi	r2,-2
    f4a0:	1886703a 	and	r3,r3,r2
    f4a4:	e0bffb17 	ldw	r2,-20(fp)
    f4a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    f4ac:	e0bffc17 	ldw	r2,-16(fp)
    f4b0:	10800104 	addi	r2,r2,4
    f4b4:	1007883a 	mov	r3,r2
    f4b8:	e0bffb17 	ldw	r2,-20(fp)
    f4bc:	10800817 	ldw	r2,32(r2)
    f4c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f4c4:	e0bffc17 	ldw	r2,-16(fp)
    f4c8:	10800104 	addi	r2,r2,4
    f4cc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    f4d0:	e0bffd17 	ldw	r2,-12(fp)
    f4d4:	1080800c 	andi	r2,r2,512
    f4d8:	103fbe26 	beq	r2,zero,f3d4 <__alt_data_end+0xff00f3d4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    f4dc:	e0bffd17 	ldw	r2,-12(fp)
    f4e0:	1004d43a 	srli	r2,r2,16
    f4e4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    f4e8:	00001406 	br	f53c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    f4ec:	e0bffc17 	ldw	r2,-16(fp)
    f4f0:	e0fffb17 	ldw	r3,-20(fp)
    f4f4:	18c00d17 	ldw	r3,52(r3)
    f4f8:	e13ffb17 	ldw	r4,-20(fp)
    f4fc:	20c7883a 	add	r3,r4,r3
    f500:	18c20e04 	addi	r3,r3,2104
    f504:	18c00003 	ldbu	r3,0(r3)
    f508:	18c03fcc 	andi	r3,r3,255
    f50c:	18c0201c 	xori	r3,r3,128
    f510:	18ffe004 	addi	r3,r3,-128
    f514:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f518:	e0bffb17 	ldw	r2,-20(fp)
    f51c:	10800d17 	ldw	r2,52(r2)
    f520:	10800044 	addi	r2,r2,1
    f524:	10c1ffcc 	andi	r3,r2,2047
    f528:	e0bffb17 	ldw	r2,-20(fp)
    f52c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    f530:	e0bffa17 	ldw	r2,-24(fp)
    f534:	10bfffc4 	addi	r2,r2,-1
    f538:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    f53c:	e0bffa17 	ldw	r2,-24(fp)
    f540:	10000526 	beq	r2,zero,f558 <altera_avalon_jtag_uart_irq+0x1a8>
    f544:	e0bffb17 	ldw	r2,-20(fp)
    f548:	10c00d17 	ldw	r3,52(r2)
    f54c:	e0bffb17 	ldw	r2,-20(fp)
    f550:	10800c17 	ldw	r2,48(r2)
    f554:	18bfe51e 	bne	r3,r2,f4ec <__alt_data_end+0xff00f4ec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    f558:	e0bffa17 	ldw	r2,-24(fp)
    f55c:	103f9d26 	beq	r2,zero,f3d4 <__alt_data_end+0xff00f3d4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f560:	e0bffb17 	ldw	r2,-20(fp)
    f564:	10c00817 	ldw	r3,32(r2)
    f568:	00bfff44 	movi	r2,-3
    f56c:	1886703a 	and	r3,r3,r2
    f570:	e0bffb17 	ldw	r2,-20(fp)
    f574:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f578:	e0bffb17 	ldw	r2,-20(fp)
    f57c:	10800017 	ldw	r2,0(r2)
    f580:	10800104 	addi	r2,r2,4
    f584:	1007883a 	mov	r3,r2
    f588:	e0bffb17 	ldw	r2,-20(fp)
    f58c:	10800817 	ldw	r2,32(r2)
    f590:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    f594:	e0bffc17 	ldw	r2,-16(fp)
    f598:	10800104 	addi	r2,r2,4
    f59c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    f5a0:	003f8c06 	br	f3d4 <__alt_data_end+0xff00f3d4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    f5a4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    f5a8:	0001883a 	nop
    f5ac:	e037883a 	mov	sp,fp
    f5b0:	df000017 	ldw	fp,0(sp)
    f5b4:	dec00104 	addi	sp,sp,4
    f5b8:	f800283a 	ret

0000f5bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    f5bc:	defff804 	addi	sp,sp,-32
    f5c0:	df000715 	stw	fp,28(sp)
    f5c4:	df000704 	addi	fp,sp,28
    f5c8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    f5cc:	e0bffb17 	ldw	r2,-20(fp)
    f5d0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    f5d4:	e0bff917 	ldw	r2,-28(fp)
    f5d8:	10800017 	ldw	r2,0(r2)
    f5dc:	10800104 	addi	r2,r2,4
    f5e0:	10800037 	ldwio	r2,0(r2)
    f5e4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    f5e8:	e0bffa17 	ldw	r2,-24(fp)
    f5ec:	1081000c 	andi	r2,r2,1024
    f5f0:	10000b26 	beq	r2,zero,f620 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    f5f4:	e0bff917 	ldw	r2,-28(fp)
    f5f8:	10800017 	ldw	r2,0(r2)
    f5fc:	10800104 	addi	r2,r2,4
    f600:	1007883a 	mov	r3,r2
    f604:	e0bff917 	ldw	r2,-28(fp)
    f608:	10800817 	ldw	r2,32(r2)
    f60c:	10810014 	ori	r2,r2,1024
    f610:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    f614:	e0bff917 	ldw	r2,-28(fp)
    f618:	10000915 	stw	zero,36(r2)
    f61c:	00000a06 	br	f648 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    f620:	e0bff917 	ldw	r2,-28(fp)
    f624:	10c00917 	ldw	r3,36(r2)
    f628:	00a00034 	movhi	r2,32768
    f62c:	10bfff04 	addi	r2,r2,-4
    f630:	10c00536 	bltu	r2,r3,f648 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    f634:	e0bff917 	ldw	r2,-28(fp)
    f638:	10800917 	ldw	r2,36(r2)
    f63c:	10c00044 	addi	r3,r2,1
    f640:	e0bff917 	ldw	r2,-28(fp)
    f644:	10c00915 	stw	r3,36(r2)
    f648:	d0a6e617 	ldw	r2,-25704(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    f64c:	e037883a 	mov	sp,fp
    f650:	df000017 	ldw	fp,0(sp)
    f654:	dec00104 	addi	sp,sp,4
    f658:	f800283a 	ret

0000f65c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    f65c:	defffd04 	addi	sp,sp,-12
    f660:	df000215 	stw	fp,8(sp)
    f664:	df000204 	addi	fp,sp,8
    f668:	e13ffe15 	stw	r4,-8(fp)
    f66c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f670:	00000506 	br	f688 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    f674:	e0bfff17 	ldw	r2,-4(fp)
    f678:	1090000c 	andi	r2,r2,16384
    f67c:	10000226 	beq	r2,zero,f688 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    f680:	00bffd44 	movi	r2,-11
    f684:	00000b06 	br	f6b4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    f688:	e0bffe17 	ldw	r2,-8(fp)
    f68c:	10c00d17 	ldw	r3,52(r2)
    f690:	e0bffe17 	ldw	r2,-8(fp)
    f694:	10800c17 	ldw	r2,48(r2)
    f698:	18800526 	beq	r3,r2,f6b0 <altera_avalon_jtag_uart_close+0x54>
    f69c:	e0bffe17 	ldw	r2,-8(fp)
    f6a0:	10c00917 	ldw	r3,36(r2)
    f6a4:	e0bffe17 	ldw	r2,-8(fp)
    f6a8:	10800117 	ldw	r2,4(r2)
    f6ac:	18bff136 	bltu	r3,r2,f674 <__alt_data_end+0xff00f674>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f6b0:	0005883a 	mov	r2,zero
}
    f6b4:	e037883a 	mov	sp,fp
    f6b8:	df000017 	ldw	fp,0(sp)
    f6bc:	dec00104 	addi	sp,sp,4
    f6c0:	f800283a 	ret

0000f6c4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    f6c4:	defffa04 	addi	sp,sp,-24
    f6c8:	df000515 	stw	fp,20(sp)
    f6cc:	df000504 	addi	fp,sp,20
    f6d0:	e13ffd15 	stw	r4,-12(fp)
    f6d4:	e17ffe15 	stw	r5,-8(fp)
    f6d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    f6dc:	00bff9c4 	movi	r2,-25
    f6e0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    f6e4:	e0bffe17 	ldw	r2,-8(fp)
    f6e8:	10da8060 	cmpeqi	r3,r2,27137
    f6ec:	1800031e 	bne	r3,zero,f6fc <altera_avalon_jtag_uart_ioctl+0x38>
    f6f0:	109a80a0 	cmpeqi	r2,r2,27138
    f6f4:	1000181e 	bne	r2,zero,f758 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    f6f8:	00002906 	br	f7a0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f6fc:	e0bffd17 	ldw	r2,-12(fp)
    f700:	10c00117 	ldw	r3,4(r2)
    f704:	00a00034 	movhi	r2,32768
    f708:	10bfffc4 	addi	r2,r2,-1
    f70c:	18802126 	beq	r3,r2,f794 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    f710:	e0bfff17 	ldw	r2,-4(fp)
    f714:	10800017 	ldw	r2,0(r2)
    f718:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f71c:	e0bffc17 	ldw	r2,-16(fp)
    f720:	10800090 	cmplti	r2,r2,2
    f724:	1000061e 	bne	r2,zero,f740 <altera_avalon_jtag_uart_ioctl+0x7c>
    f728:	e0fffc17 	ldw	r3,-16(fp)
    f72c:	00a00034 	movhi	r2,32768
    f730:	10bfffc4 	addi	r2,r2,-1
    f734:	18800226 	beq	r3,r2,f740 <altera_avalon_jtag_uart_ioctl+0x7c>
    f738:	e0bffc17 	ldw	r2,-16(fp)
    f73c:	00000206 	br	f748 <altera_avalon_jtag_uart_ioctl+0x84>
    f740:	00a00034 	movhi	r2,32768
    f744:	10bfff84 	addi	r2,r2,-2
    f748:	e0fffd17 	ldw	r3,-12(fp)
    f74c:	18800115 	stw	r2,4(r3)
      rc = 0;
    f750:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f754:	00000f06 	br	f794 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f758:	e0bffd17 	ldw	r2,-12(fp)
    f75c:	10c00117 	ldw	r3,4(r2)
    f760:	00a00034 	movhi	r2,32768
    f764:	10bfffc4 	addi	r2,r2,-1
    f768:	18800c26 	beq	r3,r2,f79c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f76c:	e0bffd17 	ldw	r2,-12(fp)
    f770:	10c00917 	ldw	r3,36(r2)
    f774:	e0bffd17 	ldw	r2,-12(fp)
    f778:	10800117 	ldw	r2,4(r2)
    f77c:	1885803a 	cmpltu	r2,r3,r2
    f780:	10c03fcc 	andi	r3,r2,255
    f784:	e0bfff17 	ldw	r2,-4(fp)
    f788:	10c00015 	stw	r3,0(r2)
      rc = 0;
    f78c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    f790:	00000206 	br	f79c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    f794:	0001883a 	nop
    f798:	00000106 	br	f7a0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    f79c:	0001883a 	nop

  default:
    break;
  }

  return rc;
    f7a0:	e0bffb17 	ldw	r2,-20(fp)
}
    f7a4:	e037883a 	mov	sp,fp
    f7a8:	df000017 	ldw	fp,0(sp)
    f7ac:	dec00104 	addi	sp,sp,4
    f7b0:	f800283a 	ret

0000f7b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f7b4:	defff304 	addi	sp,sp,-52
    f7b8:	dfc00c15 	stw	ra,48(sp)
    f7bc:	df000b15 	stw	fp,44(sp)
    f7c0:	df000b04 	addi	fp,sp,44
    f7c4:	e13ffc15 	stw	r4,-16(fp)
    f7c8:	e17ffd15 	stw	r5,-12(fp)
    f7cc:	e1bffe15 	stw	r6,-8(fp)
    f7d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    f7d4:	e0bffd17 	ldw	r2,-12(fp)
    f7d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f7dc:	00004706 	br	f8fc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f7e0:	e0bffc17 	ldw	r2,-16(fp)
    f7e4:	10800a17 	ldw	r2,40(r2)
    f7e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    f7ec:	e0bffc17 	ldw	r2,-16(fp)
    f7f0:	10800b17 	ldw	r2,44(r2)
    f7f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    f7f8:	e0fff717 	ldw	r3,-36(fp)
    f7fc:	e0bff817 	ldw	r2,-32(fp)
    f800:	18800536 	bltu	r3,r2,f818 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    f804:	e0fff717 	ldw	r3,-36(fp)
    f808:	e0bff817 	ldw	r2,-32(fp)
    f80c:	1885c83a 	sub	r2,r3,r2
    f810:	e0bff615 	stw	r2,-40(fp)
    f814:	00000406 	br	f828 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f818:	00c20004 	movi	r3,2048
    f81c:	e0bff817 	ldw	r2,-32(fp)
    f820:	1885c83a 	sub	r2,r3,r2
    f824:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    f828:	e0bff617 	ldw	r2,-40(fp)
    f82c:	10001e26 	beq	r2,zero,f8a8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    f830:	e0fffe17 	ldw	r3,-8(fp)
    f834:	e0bff617 	ldw	r2,-40(fp)
    f838:	1880022e 	bgeu	r3,r2,f844 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    f83c:	e0bffe17 	ldw	r2,-8(fp)
    f840:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    f844:	e0bffc17 	ldw	r2,-16(fp)
    f848:	10c00e04 	addi	r3,r2,56
    f84c:	e0bff817 	ldw	r2,-32(fp)
    f850:	1885883a 	add	r2,r3,r2
    f854:	e1bff617 	ldw	r6,-40(fp)
    f858:	100b883a 	mov	r5,r2
    f85c:	e13ff517 	ldw	r4,-44(fp)
    f860:	00079000 	call	7900 <memcpy>
      ptr   += n;
    f864:	e0fff517 	ldw	r3,-44(fp)
    f868:	e0bff617 	ldw	r2,-40(fp)
    f86c:	1885883a 	add	r2,r3,r2
    f870:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    f874:	e0fffe17 	ldw	r3,-8(fp)
    f878:	e0bff617 	ldw	r2,-40(fp)
    f87c:	1885c83a 	sub	r2,r3,r2
    f880:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f884:	e0fff817 	ldw	r3,-32(fp)
    f888:	e0bff617 	ldw	r2,-40(fp)
    f88c:	1885883a 	add	r2,r3,r2
    f890:	10c1ffcc 	andi	r3,r2,2047
    f894:	e0bffc17 	ldw	r2,-16(fp)
    f898:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    f89c:	e0bffe17 	ldw	r2,-8(fp)
    f8a0:	00bfcf16 	blt	zero,r2,f7e0 <__alt_data_end+0xff00f7e0>
    f8a4:	00000106 	br	f8ac <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    f8a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f8ac:	e0fff517 	ldw	r3,-44(fp)
    f8b0:	e0bffd17 	ldw	r2,-12(fp)
    f8b4:	1880141e 	bne	r3,r2,f908 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f8b8:	e0bfff17 	ldw	r2,-4(fp)
    f8bc:	1090000c 	andi	r2,r2,16384
    f8c0:	1000131e 	bne	r2,zero,f910 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f8c4:	0001883a 	nop
    f8c8:	e0bffc17 	ldw	r2,-16(fp)
    f8cc:	10c00a17 	ldw	r3,40(r2)
    f8d0:	e0bff717 	ldw	r2,-36(fp)
    f8d4:	1880051e 	bne	r3,r2,f8ec <altera_avalon_jtag_uart_read+0x138>
    f8d8:	e0bffc17 	ldw	r2,-16(fp)
    f8dc:	10c00917 	ldw	r3,36(r2)
    f8e0:	e0bffc17 	ldw	r2,-16(fp)
    f8e4:	10800117 	ldw	r2,4(r2)
    f8e8:	18bff736 	bltu	r3,r2,f8c8 <__alt_data_end+0xff00f8c8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f8ec:	e0bffc17 	ldw	r2,-16(fp)
    f8f0:	10c00a17 	ldw	r3,40(r2)
    f8f4:	e0bff717 	ldw	r2,-36(fp)
    f8f8:	18800726 	beq	r3,r2,f918 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f8fc:	e0bffe17 	ldw	r2,-8(fp)
    f900:	00bfb716 	blt	zero,r2,f7e0 <__alt_data_end+0xff00f7e0>
    f904:	00000506 	br	f91c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    f908:	0001883a 	nop
    f90c:	00000306 	br	f91c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    f910:	0001883a 	nop
    f914:	00000106 	br	f91c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    f918:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    f91c:	e0fff517 	ldw	r3,-44(fp)
    f920:	e0bffd17 	ldw	r2,-12(fp)
    f924:	18801826 	beq	r3,r2,f988 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f928:	0005303a 	rdctl	r2,status
    f92c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f930:	e0fffb17 	ldw	r3,-20(fp)
    f934:	00bfff84 	movi	r2,-2
    f938:	1884703a 	and	r2,r3,r2
    f93c:	1001703a 	wrctl	status,r2
  
  return context;
    f940:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    f944:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f948:	e0bffc17 	ldw	r2,-16(fp)
    f94c:	10800817 	ldw	r2,32(r2)
    f950:	10c00054 	ori	r3,r2,1
    f954:	e0bffc17 	ldw	r2,-16(fp)
    f958:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f95c:	e0bffc17 	ldw	r2,-16(fp)
    f960:	10800017 	ldw	r2,0(r2)
    f964:	10800104 	addi	r2,r2,4
    f968:	1007883a 	mov	r3,r2
    f96c:	e0bffc17 	ldw	r2,-16(fp)
    f970:	10800817 	ldw	r2,32(r2)
    f974:	18800035 	stwio	r2,0(r3)
    f978:	e0bffa17 	ldw	r2,-24(fp)
    f97c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f980:	e0bff917 	ldw	r2,-28(fp)
    f984:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    f988:	e0fff517 	ldw	r3,-44(fp)
    f98c:	e0bffd17 	ldw	r2,-12(fp)
    f990:	18800426 	beq	r3,r2,f9a4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    f994:	e0fff517 	ldw	r3,-44(fp)
    f998:	e0bffd17 	ldw	r2,-12(fp)
    f99c:	1885c83a 	sub	r2,r3,r2
    f9a0:	00000606 	br	f9bc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    f9a4:	e0bfff17 	ldw	r2,-4(fp)
    f9a8:	1090000c 	andi	r2,r2,16384
    f9ac:	10000226 	beq	r2,zero,f9b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    f9b0:	00bffd44 	movi	r2,-11
    f9b4:	00000106 	br	f9bc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    f9b8:	00bffec4 	movi	r2,-5
}
    f9bc:	e037883a 	mov	sp,fp
    f9c0:	dfc00117 	ldw	ra,4(sp)
    f9c4:	df000017 	ldw	fp,0(sp)
    f9c8:	dec00204 	addi	sp,sp,8
    f9cc:	f800283a 	ret

0000f9d0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f9d0:	defff304 	addi	sp,sp,-52
    f9d4:	dfc00c15 	stw	ra,48(sp)
    f9d8:	df000b15 	stw	fp,44(sp)
    f9dc:	df000b04 	addi	fp,sp,44
    f9e0:	e13ffc15 	stw	r4,-16(fp)
    f9e4:	e17ffd15 	stw	r5,-12(fp)
    f9e8:	e1bffe15 	stw	r6,-8(fp)
    f9ec:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    f9f0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    f9f4:	e0bffd17 	ldw	r2,-12(fp)
    f9f8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f9fc:	00003706 	br	fadc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    fa00:	e0bffc17 	ldw	r2,-16(fp)
    fa04:	10800c17 	ldw	r2,48(r2)
    fa08:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    fa0c:	e0bffc17 	ldw	r2,-16(fp)
    fa10:	10800d17 	ldw	r2,52(r2)
    fa14:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    fa18:	e0fff917 	ldw	r3,-28(fp)
    fa1c:	e0bff517 	ldw	r2,-44(fp)
    fa20:	1880062e 	bgeu	r3,r2,fa3c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    fa24:	e0fff517 	ldw	r3,-44(fp)
    fa28:	e0bff917 	ldw	r2,-28(fp)
    fa2c:	1885c83a 	sub	r2,r3,r2
    fa30:	10bfffc4 	addi	r2,r2,-1
    fa34:	e0bff615 	stw	r2,-40(fp)
    fa38:	00000b06 	br	fa68 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    fa3c:	e0bff517 	ldw	r2,-44(fp)
    fa40:	10000526 	beq	r2,zero,fa58 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    fa44:	00c20004 	movi	r3,2048
    fa48:	e0bff917 	ldw	r2,-28(fp)
    fa4c:	1885c83a 	sub	r2,r3,r2
    fa50:	e0bff615 	stw	r2,-40(fp)
    fa54:	00000406 	br	fa68 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    fa58:	00c1ffc4 	movi	r3,2047
    fa5c:	e0bff917 	ldw	r2,-28(fp)
    fa60:	1885c83a 	sub	r2,r3,r2
    fa64:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    fa68:	e0bff617 	ldw	r2,-40(fp)
    fa6c:	10001e26 	beq	r2,zero,fae8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    fa70:	e0fffe17 	ldw	r3,-8(fp)
    fa74:	e0bff617 	ldw	r2,-40(fp)
    fa78:	1880022e 	bgeu	r3,r2,fa84 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    fa7c:	e0bffe17 	ldw	r2,-8(fp)
    fa80:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    fa84:	e0bffc17 	ldw	r2,-16(fp)
    fa88:	10c20e04 	addi	r3,r2,2104
    fa8c:	e0bff917 	ldw	r2,-28(fp)
    fa90:	1885883a 	add	r2,r3,r2
    fa94:	e1bff617 	ldw	r6,-40(fp)
    fa98:	e17ffd17 	ldw	r5,-12(fp)
    fa9c:	1009883a 	mov	r4,r2
    faa0:	00079000 	call	7900 <memcpy>
      ptr   += n;
    faa4:	e0fffd17 	ldw	r3,-12(fp)
    faa8:	e0bff617 	ldw	r2,-40(fp)
    faac:	1885883a 	add	r2,r3,r2
    fab0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    fab4:	e0fffe17 	ldw	r3,-8(fp)
    fab8:	e0bff617 	ldw	r2,-40(fp)
    fabc:	1885c83a 	sub	r2,r3,r2
    fac0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    fac4:	e0fff917 	ldw	r3,-28(fp)
    fac8:	e0bff617 	ldw	r2,-40(fp)
    facc:	1885883a 	add	r2,r3,r2
    fad0:	10c1ffcc 	andi	r3,r2,2047
    fad4:	e0bffc17 	ldw	r2,-16(fp)
    fad8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    fadc:	e0bffe17 	ldw	r2,-8(fp)
    fae0:	00bfc716 	blt	zero,r2,fa00 <__alt_data_end+0xff00fa00>
    fae4:	00000106 	br	faec <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    fae8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    faec:	0005303a 	rdctl	r2,status
    faf0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    faf4:	e0fffb17 	ldw	r3,-20(fp)
    faf8:	00bfff84 	movi	r2,-2
    fafc:	1884703a 	and	r2,r3,r2
    fb00:	1001703a 	wrctl	status,r2
  
  return context;
    fb04:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    fb08:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    fb0c:	e0bffc17 	ldw	r2,-16(fp)
    fb10:	10800817 	ldw	r2,32(r2)
    fb14:	10c00094 	ori	r3,r2,2
    fb18:	e0bffc17 	ldw	r2,-16(fp)
    fb1c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    fb20:	e0bffc17 	ldw	r2,-16(fp)
    fb24:	10800017 	ldw	r2,0(r2)
    fb28:	10800104 	addi	r2,r2,4
    fb2c:	1007883a 	mov	r3,r2
    fb30:	e0bffc17 	ldw	r2,-16(fp)
    fb34:	10800817 	ldw	r2,32(r2)
    fb38:	18800035 	stwio	r2,0(r3)
    fb3c:	e0bffa17 	ldw	r2,-24(fp)
    fb40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb44:	e0bff817 	ldw	r2,-32(fp)
    fb48:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    fb4c:	e0bffe17 	ldw	r2,-8(fp)
    fb50:	0080100e 	bge	zero,r2,fb94 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    fb54:	e0bfff17 	ldw	r2,-4(fp)
    fb58:	1090000c 	andi	r2,r2,16384
    fb5c:	1000101e 	bne	r2,zero,fba0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    fb60:	0001883a 	nop
    fb64:	e0bffc17 	ldw	r2,-16(fp)
    fb68:	10c00d17 	ldw	r3,52(r2)
    fb6c:	e0bff517 	ldw	r2,-44(fp)
    fb70:	1880051e 	bne	r3,r2,fb88 <altera_avalon_jtag_uart_write+0x1b8>
    fb74:	e0bffc17 	ldw	r2,-16(fp)
    fb78:	10c00917 	ldw	r3,36(r2)
    fb7c:	e0bffc17 	ldw	r2,-16(fp)
    fb80:	10800117 	ldw	r2,4(r2)
    fb84:	18bff736 	bltu	r3,r2,fb64 <__alt_data_end+0xff00fb64>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    fb88:	e0bffc17 	ldw	r2,-16(fp)
    fb8c:	10800917 	ldw	r2,36(r2)
    fb90:	1000051e 	bne	r2,zero,fba8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    fb94:	e0bffe17 	ldw	r2,-8(fp)
    fb98:	00bfd016 	blt	zero,r2,fadc <__alt_data_end+0xff00fadc>
    fb9c:	00000306 	br	fbac <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    fba0:	0001883a 	nop
    fba4:	00000106 	br	fbac <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    fba8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    fbac:	e0fffd17 	ldw	r3,-12(fp)
    fbb0:	e0bff717 	ldw	r2,-36(fp)
    fbb4:	18800426 	beq	r3,r2,fbc8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    fbb8:	e0fffd17 	ldw	r3,-12(fp)
    fbbc:	e0bff717 	ldw	r2,-36(fp)
    fbc0:	1885c83a 	sub	r2,r3,r2
    fbc4:	00000606 	br	fbe0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    fbc8:	e0bfff17 	ldw	r2,-4(fp)
    fbcc:	1090000c 	andi	r2,r2,16384
    fbd0:	10000226 	beq	r2,zero,fbdc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    fbd4:	00bffd44 	movi	r2,-11
    fbd8:	00000106 	br	fbe0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    fbdc:	00bffec4 	movi	r2,-5
}
    fbe0:	e037883a 	mov	sp,fp
    fbe4:	dfc00117 	ldw	ra,4(sp)
    fbe8:	df000017 	ldw	fp,0(sp)
    fbec:	dec00204 	addi	sp,sp,8
    fbf0:	f800283a 	ret

0000fbf4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    fbf4:	defffa04 	addi	sp,sp,-24
    fbf8:	dfc00515 	stw	ra,20(sp)
    fbfc:	df000415 	stw	fp,16(sp)
    fc00:	df000404 	addi	fp,sp,16
    fc04:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    fc08:	0007883a 	mov	r3,zero
    fc0c:	e0bfff17 	ldw	r2,-4(fp)
    fc10:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    fc14:	e0bfff17 	ldw	r2,-4(fp)
    fc18:	10800104 	addi	r2,r2,4
    fc1c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fc20:	0005303a 	rdctl	r2,status
    fc24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fc28:	e0fffd17 	ldw	r3,-12(fp)
    fc2c:	00bfff84 	movi	r2,-2
    fc30:	1884703a 	and	r2,r3,r2
    fc34:	1001703a 	wrctl	status,r2
  
  return context;
    fc38:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    fc3c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    fc40:	001097c0 	call	1097c <alt_tick>
    fc44:	e0bffc17 	ldw	r2,-16(fp)
    fc48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fc4c:	e0bffe17 	ldw	r2,-8(fp)
    fc50:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    fc54:	0001883a 	nop
    fc58:	e037883a 	mov	sp,fp
    fc5c:	dfc00117 	ldw	ra,4(sp)
    fc60:	df000017 	ldw	fp,0(sp)
    fc64:	dec00204 	addi	sp,sp,8
    fc68:	f800283a 	ret

0000fc6c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    fc6c:	defff804 	addi	sp,sp,-32
    fc70:	dfc00715 	stw	ra,28(sp)
    fc74:	df000615 	stw	fp,24(sp)
    fc78:	df000604 	addi	fp,sp,24
    fc7c:	e13ffc15 	stw	r4,-16(fp)
    fc80:	e17ffd15 	stw	r5,-12(fp)
    fc84:	e1bffe15 	stw	r6,-8(fp)
    fc88:	e1ffff15 	stw	r7,-4(fp)
    fc8c:	e0bfff17 	ldw	r2,-4(fp)
    fc90:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    fc94:	d0a6e617 	ldw	r2,-25704(gp)
    fc98:	1000021e 	bne	r2,zero,fca4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    fc9c:	e0bffb17 	ldw	r2,-20(fp)
    fca0:	d0a6e615 	stw	r2,-25704(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    fca4:	e0bffc17 	ldw	r2,-16(fp)
    fca8:	10800104 	addi	r2,r2,4
    fcac:	00c001c4 	movi	r3,7
    fcb0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    fcb4:	d8000015 	stw	zero,0(sp)
    fcb8:	e1fffc17 	ldw	r7,-16(fp)
    fcbc:	01800074 	movhi	r6,1
    fcc0:	31befd04 	addi	r6,r6,-1036
    fcc4:	e17ffe17 	ldw	r5,-8(fp)
    fcc8:	e13ffd17 	ldw	r4,-12(fp)
    fccc:	00102ac0 	call	102ac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    fcd0:	0001883a 	nop
    fcd4:	e037883a 	mov	sp,fp
    fcd8:	dfc00117 	ldw	ra,4(sp)
    fcdc:	df000017 	ldw	fp,0(sp)
    fce0:	dec00204 	addi	sp,sp,8
    fce4:	f800283a 	ret

0000fce8 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
    fce8:	defffe04 	addi	sp,sp,-8
    fcec:	df000115 	stw	fp,4(sp)
    fcf0:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
    fcf4:	d0a6e317 	ldw	r2,-25716(gp)
    fcf8:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
    fcfc:	d0a6e417 	ldw	r2,-25712(gp)
    fd00:	1000021e 	bne	r2,zero,fd0c <alt_timestamp_start+0x24>
  {
    return -1;
    fd04:	00bfffc4 	movi	r2,-1
    fd08:	00001106 	br	fd50 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    fd0c:	e0bfff17 	ldw	r2,-4(fp)
    fd10:	10800104 	addi	r2,r2,4
    fd14:	00c00204 	movi	r3,8
    fd18:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    fd1c:	e0bfff17 	ldw	r2,-4(fp)
    fd20:	10800204 	addi	r2,r2,8
    fd24:	00ffffd4 	movui	r3,65535
    fd28:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    fd2c:	e0bfff17 	ldw	r2,-4(fp)
    fd30:	10800304 	addi	r2,r2,12
    fd34:	00ffffd4 	movui	r3,65535
    fd38:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    fd3c:	e0bfff17 	ldw	r2,-4(fp)
    fd40:	10800104 	addi	r2,r2,4
    fd44:	00c00104 	movi	r3,4
    fd48:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
    fd4c:	0005883a 	mov	r2,zero
}
    fd50:	e037883a 	mov	sp,fp
    fd54:	df000017 	ldw	fp,0(sp)
    fd58:	dec00104 	addi	sp,sp,4
    fd5c:	f800283a 	ret

0000fd60 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
    fd60:	defffc04 	addi	sp,sp,-16
    fd64:	df000315 	stw	fp,12(sp)
    fd68:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
    fd6c:	d0a6e317 	ldw	r2,-25716(gp)
    fd70:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
    fd74:	d0a6e417 	ldw	r2,-25712(gp)
    fd78:	1000021e 	bne	r2,zero,fd84 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    fd7c:	00bfffc4 	movi	r2,-1
    fd80:	00001306 	br	fdd0 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    fd84:	e0bffd17 	ldw	r2,-12(fp)
    fd88:	10800404 	addi	r2,r2,16
    fd8c:	0007883a 	mov	r3,zero
    fd90:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    fd94:	e0bffd17 	ldw	r2,-12(fp)
    fd98:	10800404 	addi	r2,r2,16
    fd9c:	10800037 	ldwio	r2,0(r2)
    fda0:	10bfffcc 	andi	r2,r2,65535
    fda4:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    fda8:	e0bffd17 	ldw	r2,-12(fp)
    fdac:	10800504 	addi	r2,r2,20
    fdb0:	10800037 	ldwio	r2,0(r2)
    fdb4:	10bfffcc 	andi	r2,r2,65535
    fdb8:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    fdbc:	e0bfff17 	ldw	r2,-4(fp)
    fdc0:	1006943a 	slli	r3,r2,16
    fdc4:	e0bffe17 	ldw	r2,-8(fp)
    fdc8:	1884b03a 	or	r2,r3,r2
    fdcc:	0084303a 	nor	r2,zero,r2
#endif
  }
}
    fdd0:	e037883a 	mov	sp,fp
    fdd4:	df000017 	ldw	fp,0(sp)
    fdd8:	dec00104 	addi	sp,sp,4
    fddc:	f800283a 	ret

0000fde0 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
    fde0:	deffff04 	addi	sp,sp,-4
    fde4:	df000015 	stw	fp,0(sp)
    fde8:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
    fdec:	d0a6e417 	ldw	r2,-25712(gp)
}
    fdf0:	e037883a 	mov	sp,fp
    fdf4:	df000017 	ldw	fp,0(sp)
    fdf8:	dec00104 	addi	sp,sp,4
    fdfc:	f800283a 	ret

0000fe00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    fe00:	defff504 	addi	sp,sp,-44
    fe04:	df000a15 	stw	fp,40(sp)
    fe08:	df000a04 	addi	fp,sp,40
    fe0c:	e13ffc15 	stw	r4,-16(fp)
    fe10:	e17ffd15 	stw	r5,-12(fp)
    fe14:	e1bffe15 	stw	r6,-8(fp)
    fe18:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    fe1c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fe20:	d0a6e617 	ldw	r2,-25704(gp)
  
  if (alt_ticks_per_second ())
    fe24:	10003c26 	beq	r2,zero,ff18 <alt_alarm_start+0x118>
  {
    if (alarm)
    fe28:	e0bffc17 	ldw	r2,-16(fp)
    fe2c:	10003826 	beq	r2,zero,ff10 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    fe30:	e0bffc17 	ldw	r2,-16(fp)
    fe34:	e0fffe17 	ldw	r3,-8(fp)
    fe38:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    fe3c:	e0bffc17 	ldw	r2,-16(fp)
    fe40:	e0ffff17 	ldw	r3,-4(fp)
    fe44:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fe48:	0005303a 	rdctl	r2,status
    fe4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fe50:	e0fff917 	ldw	r3,-28(fp)
    fe54:	00bfff84 	movi	r2,-2
    fe58:	1884703a 	and	r2,r3,r2
    fe5c:	1001703a 	wrctl	status,r2
  
  return context;
    fe60:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    fe64:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    fe68:	d0a6e717 	ldw	r2,-25700(gp)
      
      current_nticks = alt_nticks();
    fe6c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    fe70:	e0fffd17 	ldw	r3,-12(fp)
    fe74:	e0bff617 	ldw	r2,-40(fp)
    fe78:	1885883a 	add	r2,r3,r2
    fe7c:	10c00044 	addi	r3,r2,1
    fe80:	e0bffc17 	ldw	r2,-16(fp)
    fe84:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    fe88:	e0bffc17 	ldw	r2,-16(fp)
    fe8c:	10c00217 	ldw	r3,8(r2)
    fe90:	e0bff617 	ldw	r2,-40(fp)
    fe94:	1880042e 	bgeu	r3,r2,fea8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    fe98:	e0bffc17 	ldw	r2,-16(fp)
    fe9c:	00c00044 	movi	r3,1
    fea0:	10c00405 	stb	r3,16(r2)
    fea4:	00000206 	br	feb0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    fea8:	e0bffc17 	ldw	r2,-16(fp)
    feac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    feb0:	e0bffc17 	ldw	r2,-16(fp)
    feb4:	d0e01004 	addi	r3,gp,-32704
    feb8:	e0fffa15 	stw	r3,-24(fp)
    febc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    fec0:	e0bffb17 	ldw	r2,-20(fp)
    fec4:	e0fffa17 	ldw	r3,-24(fp)
    fec8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    fecc:	e0bffa17 	ldw	r2,-24(fp)
    fed0:	10c00017 	ldw	r3,0(r2)
    fed4:	e0bffb17 	ldw	r2,-20(fp)
    fed8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    fedc:	e0bffa17 	ldw	r2,-24(fp)
    fee0:	10800017 	ldw	r2,0(r2)
    fee4:	e0fffb17 	ldw	r3,-20(fp)
    fee8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    feec:	e0bffa17 	ldw	r2,-24(fp)
    fef0:	e0fffb17 	ldw	r3,-20(fp)
    fef4:	10c00015 	stw	r3,0(r2)
    fef8:	e0bff817 	ldw	r2,-32(fp)
    fefc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ff00:	e0bff717 	ldw	r2,-36(fp)
    ff04:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    ff08:	0005883a 	mov	r2,zero
    ff0c:	00000306 	br	ff1c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    ff10:	00bffa84 	movi	r2,-22
    ff14:	00000106 	br	ff1c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    ff18:	00bfde84 	movi	r2,-134
  }
}
    ff1c:	e037883a 	mov	sp,fp
    ff20:	df000017 	ldw	fp,0(sp)
    ff24:	dec00104 	addi	sp,sp,4
    ff28:	f800283a 	ret

0000ff2c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    ff2c:	defffa04 	addi	sp,sp,-24
    ff30:	dfc00515 	stw	ra,20(sp)
    ff34:	df000415 	stw	fp,16(sp)
    ff38:	df000404 	addi	fp,sp,16
    ff3c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    ff40:	008000c4 	movi	r2,3
    ff44:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    ff48:	e0fffd17 	ldw	r3,-12(fp)
    ff4c:	008003f4 	movhi	r2,15
    ff50:	10909004 	addi	r2,r2,16960
    ff54:	1885383a 	mul	r2,r3,r2
    ff58:	100b883a 	mov	r5,r2
    ff5c:	0100bef4 	movhi	r4,763
    ff60:	213c2004 	addi	r4,r4,-3968
    ff64:	000bfdc0 	call	bfdc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    ff68:	100b883a 	mov	r5,r2
    ff6c:	01200034 	movhi	r4,32768
    ff70:	213fffc4 	addi	r4,r4,-1
    ff74:	000bfdc0 	call	bfdc <__udivsi3>
    ff78:	100b883a 	mov	r5,r2
    ff7c:	e13fff17 	ldw	r4,-4(fp)
    ff80:	000bfdc0 	call	bfdc <__udivsi3>
    ff84:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    ff88:	e0bffe17 	ldw	r2,-8(fp)
    ff8c:	10002a26 	beq	r2,zero,10038 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    ff90:	e03ffc15 	stw	zero,-16(fp)
    ff94:	00001706 	br	fff4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    ff98:	00a00034 	movhi	r2,32768
    ff9c:	10bfffc4 	addi	r2,r2,-1
    ffa0:	10bfffc4 	addi	r2,r2,-1
    ffa4:	103ffe1e 	bne	r2,zero,ffa0 <__alt_data_end+0xff00ffa0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    ffa8:	e0fffd17 	ldw	r3,-12(fp)
    ffac:	008003f4 	movhi	r2,15
    ffb0:	10909004 	addi	r2,r2,16960
    ffb4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    ffb8:	100b883a 	mov	r5,r2
    ffbc:	0100bef4 	movhi	r4,763
    ffc0:	213c2004 	addi	r4,r4,-3968
    ffc4:	000bfdc0 	call	bfdc <__udivsi3>
    ffc8:	100b883a 	mov	r5,r2
    ffcc:	01200034 	movhi	r4,32768
    ffd0:	213fffc4 	addi	r4,r4,-1
    ffd4:	000bfdc0 	call	bfdc <__udivsi3>
    ffd8:	1007883a 	mov	r3,r2
    ffdc:	e0bfff17 	ldw	r2,-4(fp)
    ffe0:	10c5c83a 	sub	r2,r2,r3
    ffe4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    ffe8:	e0bffc17 	ldw	r2,-16(fp)
    ffec:	10800044 	addi	r2,r2,1
    fff0:	e0bffc15 	stw	r2,-16(fp)
    fff4:	e0fffc17 	ldw	r3,-16(fp)
    fff8:	e0bffe17 	ldw	r2,-8(fp)
    fffc:	18bfe616 	blt	r3,r2,ff98 <__alt_data_end+0xff00ff98>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10000:	e0fffd17 	ldw	r3,-12(fp)
   10004:	008003f4 	movhi	r2,15
   10008:	10909004 	addi	r2,r2,16960
   1000c:	1885383a 	mul	r2,r3,r2
   10010:	100b883a 	mov	r5,r2
   10014:	0100bef4 	movhi	r4,763
   10018:	213c2004 	addi	r4,r4,-3968
   1001c:	000bfdc0 	call	bfdc <__udivsi3>
   10020:	1007883a 	mov	r3,r2
   10024:	e0bfff17 	ldw	r2,-4(fp)
   10028:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1002c:	10bfffc4 	addi	r2,r2,-1
   10030:	103ffe1e 	bne	r2,zero,1002c <__alt_data_end+0xff01002c>
   10034:	00000d06 	br	1006c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10038:	e0fffd17 	ldw	r3,-12(fp)
   1003c:	008003f4 	movhi	r2,15
   10040:	10909004 	addi	r2,r2,16960
   10044:	1885383a 	mul	r2,r3,r2
   10048:	100b883a 	mov	r5,r2
   1004c:	0100bef4 	movhi	r4,763
   10050:	213c2004 	addi	r4,r4,-3968
   10054:	000bfdc0 	call	bfdc <__udivsi3>
   10058:	1007883a 	mov	r3,r2
   1005c:	e0bfff17 	ldw	r2,-4(fp)
   10060:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10064:	10bfffc4 	addi	r2,r2,-1
   10068:	00bffe16 	blt	zero,r2,10064 <__alt_data_end+0xff010064>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   1006c:	0005883a 	mov	r2,zero
}
   10070:	e037883a 	mov	sp,fp
   10074:	dfc00117 	ldw	ra,4(sp)
   10078:	df000017 	ldw	fp,0(sp)
   1007c:	dec00204 	addi	sp,sp,8
   10080:	f800283a 	ret

00010084 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   10084:	defffb04 	addi	sp,sp,-20
   10088:	df000415 	stw	fp,16(sp)
   1008c:	df000404 	addi	fp,sp,16
   10090:	e13ffe15 	stw	r4,-8(fp)
   10094:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   10098:	e0fffe17 	ldw	r3,-8(fp)
   1009c:	e0bfff17 	ldw	r2,-4(fp)
   100a0:	1885883a 	add	r2,r3,r2
   100a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   100a8:	e0bffe17 	ldw	r2,-8(fp)
   100ac:	e0bffc15 	stw	r2,-16(fp)
   100b0:	00000506 	br	100c8 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   100b4:	e0bffc17 	ldw	r2,-16(fp)
   100b8:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   100bc:	e0bffc17 	ldw	r2,-16(fp)
   100c0:	10800804 	addi	r2,r2,32
   100c4:	e0bffc15 	stw	r2,-16(fp)
   100c8:	e0fffc17 	ldw	r3,-16(fp)
   100cc:	e0bffd17 	ldw	r2,-12(fp)
   100d0:	18bff836 	bltu	r3,r2,100b4 <__alt_data_end+0xff0100b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   100d4:	e0bffe17 	ldw	r2,-8(fp)
   100d8:	108007cc 	andi	r2,r2,31
   100dc:	10000226 	beq	r2,zero,100e8 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   100e0:	e0bffc17 	ldw	r2,-16(fp)
   100e4:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   100e8:	0001883a 	nop
   100ec:	e037883a 	mov	sp,fp
   100f0:	df000017 	ldw	fp,0(sp)
   100f4:	dec00104 	addi	sp,sp,4
   100f8:	f800283a 	ret

000100fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	df000115 	stw	fp,4(sp)
   10104:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10108:	e03fff15 	stw	zero,-4(fp)
   1010c:	00000506 	br	10124 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   10110:	e0bfff17 	ldw	r2,-4(fp)
   10114:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   10118:	e0bfff17 	ldw	r2,-4(fp)
   1011c:	10800804 	addi	r2,r2,32
   10120:	e0bfff15 	stw	r2,-4(fp)
   10124:	e0bfff17 	ldw	r2,-4(fp)
   10128:	10880030 	cmpltui	r2,r2,8192
   1012c:	103ff81e 	bne	r2,zero,10110 <__alt_data_end+0xff010110>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10130:	0001883a 	nop
   10134:	e037883a 	mov	sp,fp
   10138:	df000017 	ldw	fp,0(sp)
   1013c:	dec00104 	addi	sp,sp,4
   10140:	f800283a 	ret

00010144 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10144:	20000a26 	beq	r4,zero,10170 <alt_dev_llist_insert+0x2c>
   10148:	20800217 	ldw	r2,8(r4)
   1014c:	10000826 	beq	r2,zero,10170 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10150:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10154:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10158:	0005883a 	mov	r2,zero
  entry->next     = list->next;
   1015c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   10160:	28c00017 	ldw	r3,0(r5)
   10164:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   10168:	29000015 	stw	r4,0(r5)
   1016c:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10170:	d0a00d17 	ldw	r2,-32716(gp)
   10174:	10000926 	beq	r2,zero,1019c <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10178:	deffff04 	addi	sp,sp,-4
   1017c:	dfc00015 	stw	ra,0(sp)
   10180:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10184:	00c00584 	movi	r3,22
   10188:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   1018c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10190:	dfc00017 	ldw	ra,0(sp)
   10194:	dec00104 	addi	sp,sp,4
   10198:	f800283a 	ret
   1019c:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   101a0:	00c00584 	movi	r3,22
   101a4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   101a8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   101ac:	f800283a 	ret

000101b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   101b0:	defffc04 	addi	sp,sp,-16
   101b4:	dc800215 	stw	r18,8(sp)
   101b8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   101bc:	04800074 	movhi	r18,1
   101c0:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   101c4:	dfc00315 	stw	ra,12(sp)
   101c8:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   101cc:	8404d404 	addi	r16,r16,4944
   101d0:	9484d504 	addi	r18,r18,4948
   101d4:	84800936 	bltu	r16,r18,101fc <_do_ctors+0x4c>
   101d8:	84a5c83a 	sub	r18,r16,r18
   101dc:	9024d0ba 	srli	r18,r18,2
   101e0:	0023883a 	mov	r17,zero
   101e4:	94800044 	addi	r18,r18,1
        (*ctor) (); 
   101e8:	80800017 	ldw	r2,0(r16)
   101ec:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   101f0:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
   101f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   101f8:	8cbffb1e 	bne	r17,r18,101e8 <__alt_data_end+0xff0101e8>
        (*ctor) (); 
}
   101fc:	dfc00317 	ldw	ra,12(sp)
   10200:	dc800217 	ldw	r18,8(sp)
   10204:	dc400117 	ldw	r17,4(sp)
   10208:	dc000017 	ldw	r16,0(sp)
   1020c:	dec00404 	addi	sp,sp,16
   10210:	f800283a 	ret

00010214 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10214:	defffc04 	addi	sp,sp,-16
   10218:	dc800215 	stw	r18,8(sp)
   1021c:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10220:	04800074 	movhi	r18,1
   10224:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10228:	dfc00315 	stw	ra,12(sp)
   1022c:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10230:	8404d404 	addi	r16,r16,4944
   10234:	9484d504 	addi	r18,r18,4948
   10238:	84800936 	bltu	r16,r18,10260 <_do_dtors+0x4c>
   1023c:	84a5c83a 	sub	r18,r16,r18
   10240:	9024d0ba 	srli	r18,r18,2
   10244:	0023883a 	mov	r17,zero
   10248:	94800044 	addi	r18,r18,1
        (*dtor) (); 
   1024c:	80800017 	ldw	r2,0(r16)
   10250:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10254:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
   10258:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1025c:	8cbffb1e 	bne	r17,r18,1024c <__alt_data_end+0xff01024c>
        (*dtor) (); 
}
   10260:	dfc00317 	ldw	ra,12(sp)
   10264:	dc800217 	ldw	r18,8(sp)
   10268:	dc400117 	ldw	r17,4(sp)
   1026c:	dc000017 	ldw	r16,0(sp)
   10270:	dec00404 	addi	sp,sp,16
   10274:	f800283a 	ret

00010278 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10278:	defffe04 	addi	sp,sp,-8
   1027c:	dfc00115 	stw	ra,4(sp)
   10280:	df000015 	stw	fp,0(sp)
   10284:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10288:	01440004 	movi	r5,4096
   1028c:	0009883a 	mov	r4,zero
   10290:	0010ce40 	call	10ce4 <alt_icache_flush>
#endif
}
   10294:	0001883a 	nop
   10298:	e037883a 	mov	sp,fp
   1029c:	dfc00117 	ldw	ra,4(sp)
   102a0:	df000017 	ldw	fp,0(sp)
   102a4:	dec00204 	addi	sp,sp,8
   102a8:	f800283a 	ret

000102ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   102ac:	defff904 	addi	sp,sp,-28
   102b0:	dfc00615 	stw	ra,24(sp)
   102b4:	df000515 	stw	fp,20(sp)
   102b8:	df000504 	addi	fp,sp,20
   102bc:	e13ffc15 	stw	r4,-16(fp)
   102c0:	e17ffd15 	stw	r5,-12(fp)
   102c4:	e1bffe15 	stw	r6,-8(fp)
   102c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   102cc:	e0800217 	ldw	r2,8(fp)
   102d0:	d8800015 	stw	r2,0(sp)
   102d4:	e1ffff17 	ldw	r7,-4(fp)
   102d8:	e1bffe17 	ldw	r6,-8(fp)
   102dc:	e17ffd17 	ldw	r5,-12(fp)
   102e0:	e13ffc17 	ldw	r4,-16(fp)
   102e4:	001045c0 	call	1045c <alt_iic_isr_register>
}  
   102e8:	e037883a 	mov	sp,fp
   102ec:	dfc00117 	ldw	ra,4(sp)
   102f0:	df000017 	ldw	fp,0(sp)
   102f4:	dec00204 	addi	sp,sp,8
   102f8:	f800283a 	ret

000102fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   102fc:	defff904 	addi	sp,sp,-28
   10300:	df000615 	stw	fp,24(sp)
   10304:	df000604 	addi	fp,sp,24
   10308:	e13ffe15 	stw	r4,-8(fp)
   1030c:	e17fff15 	stw	r5,-4(fp)
   10310:	e0bfff17 	ldw	r2,-4(fp)
   10314:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10318:	0005303a 	rdctl	r2,status
   1031c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10320:	e0fffb17 	ldw	r3,-20(fp)
   10324:	00bfff84 	movi	r2,-2
   10328:	1884703a 	and	r2,r3,r2
   1032c:	1001703a 	wrctl	status,r2
  
  return context;
   10330:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10334:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10338:	00c00044 	movi	r3,1
   1033c:	e0bffa17 	ldw	r2,-24(fp)
   10340:	1884983a 	sll	r2,r3,r2
   10344:	1007883a 	mov	r3,r2
   10348:	d0a6e517 	ldw	r2,-25708(gp)
   1034c:	1884b03a 	or	r2,r3,r2
   10350:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10354:	d0a6e517 	ldw	r2,-25708(gp)
   10358:	100170fa 	wrctl	ienable,r2
   1035c:	e0bffc17 	ldw	r2,-16(fp)
   10360:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10364:	e0bffd17 	ldw	r2,-12(fp)
   10368:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1036c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10370:	0001883a 	nop
}
   10374:	e037883a 	mov	sp,fp
   10378:	df000017 	ldw	fp,0(sp)
   1037c:	dec00104 	addi	sp,sp,4
   10380:	f800283a 	ret

00010384 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10384:	defff904 	addi	sp,sp,-28
   10388:	df000615 	stw	fp,24(sp)
   1038c:	df000604 	addi	fp,sp,24
   10390:	e13ffe15 	stw	r4,-8(fp)
   10394:	e17fff15 	stw	r5,-4(fp)
   10398:	e0bfff17 	ldw	r2,-4(fp)
   1039c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103a0:	0005303a 	rdctl	r2,status
   103a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103a8:	e0fffb17 	ldw	r3,-20(fp)
   103ac:	00bfff84 	movi	r2,-2
   103b0:	1884703a 	and	r2,r3,r2
   103b4:	1001703a 	wrctl	status,r2
  
  return context;
   103b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   103bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   103c0:	00c00044 	movi	r3,1
   103c4:	e0bffa17 	ldw	r2,-24(fp)
   103c8:	1884983a 	sll	r2,r3,r2
   103cc:	0084303a 	nor	r2,zero,r2
   103d0:	1007883a 	mov	r3,r2
   103d4:	d0a6e517 	ldw	r2,-25708(gp)
   103d8:	1884703a 	and	r2,r3,r2
   103dc:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   103e0:	d0a6e517 	ldw	r2,-25708(gp)
   103e4:	100170fa 	wrctl	ienable,r2
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103f0:	e0bffd17 	ldw	r2,-12(fp)
   103f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   103f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   103fc:	0001883a 	nop
}
   10400:	e037883a 	mov	sp,fp
   10404:	df000017 	ldw	fp,0(sp)
   10408:	dec00104 	addi	sp,sp,4
   1040c:	f800283a 	ret

00010410 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   10410:	defffc04 	addi	sp,sp,-16
   10414:	df000315 	stw	fp,12(sp)
   10418:	df000304 	addi	fp,sp,12
   1041c:	e13ffe15 	stw	r4,-8(fp)
   10420:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   10424:	000530fa 	rdctl	r2,ienable
   10428:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1042c:	00c00044 	movi	r3,1
   10430:	e0bfff17 	ldw	r2,-4(fp)
   10434:	1884983a 	sll	r2,r3,r2
   10438:	1007883a 	mov	r3,r2
   1043c:	e0bffd17 	ldw	r2,-12(fp)
   10440:	1884703a 	and	r2,r3,r2
   10444:	1004c03a 	cmpne	r2,r2,zero
   10448:	10803fcc 	andi	r2,r2,255
}
   1044c:	e037883a 	mov	sp,fp
   10450:	df000017 	ldw	fp,0(sp)
   10454:	dec00104 	addi	sp,sp,4
   10458:	f800283a 	ret

0001045c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1045c:	defff504 	addi	sp,sp,-44
   10460:	dfc00a15 	stw	ra,40(sp)
   10464:	df000915 	stw	fp,36(sp)
   10468:	df000904 	addi	fp,sp,36
   1046c:	e13ffc15 	stw	r4,-16(fp)
   10470:	e17ffd15 	stw	r5,-12(fp)
   10474:	e1bffe15 	stw	r6,-8(fp)
   10478:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1047c:	00bffa84 	movi	r2,-22
   10480:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   10484:	e0bffd17 	ldw	r2,-12(fp)
   10488:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1048c:	e0bff817 	ldw	r2,-32(fp)
   10490:	10800808 	cmpgei	r2,r2,32
   10494:	1000271e 	bne	r2,zero,10534 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10498:	0005303a 	rdctl	r2,status
   1049c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   104a0:	e0fffb17 	ldw	r3,-20(fp)
   104a4:	00bfff84 	movi	r2,-2
   104a8:	1884703a 	and	r2,r3,r2
   104ac:	1001703a 	wrctl	status,r2
  
  return context;
   104b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   104b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   104b8:	00800074 	movhi	r2,1
   104bc:	10945904 	addi	r2,r2,20836
   104c0:	e0fff817 	ldw	r3,-32(fp)
   104c4:	180690fa 	slli	r3,r3,3
   104c8:	10c5883a 	add	r2,r2,r3
   104cc:	e0fffe17 	ldw	r3,-8(fp)
   104d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   104d4:	00800074 	movhi	r2,1
   104d8:	10945904 	addi	r2,r2,20836
   104dc:	e0fff817 	ldw	r3,-32(fp)
   104e0:	180690fa 	slli	r3,r3,3
   104e4:	10c5883a 	add	r2,r2,r3
   104e8:	10800104 	addi	r2,r2,4
   104ec:	e0ffff17 	ldw	r3,-4(fp)
   104f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   104f4:	e0bffe17 	ldw	r2,-8(fp)
   104f8:	10000526 	beq	r2,zero,10510 <alt_iic_isr_register+0xb4>
   104fc:	e0bff817 	ldw	r2,-32(fp)
   10500:	100b883a 	mov	r5,r2
   10504:	e13ffc17 	ldw	r4,-16(fp)
   10508:	00102fc0 	call	102fc <alt_ic_irq_enable>
   1050c:	00000406 	br	10520 <alt_iic_isr_register+0xc4>
   10510:	e0bff817 	ldw	r2,-32(fp)
   10514:	100b883a 	mov	r5,r2
   10518:	e13ffc17 	ldw	r4,-16(fp)
   1051c:	00103840 	call	10384 <alt_ic_irq_disable>
   10520:	e0bff715 	stw	r2,-36(fp)
   10524:	e0bffa17 	ldw	r2,-24(fp)
   10528:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1052c:	e0bff917 	ldw	r2,-28(fp)
   10530:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   10534:	e0bff717 	ldw	r2,-36(fp)
}
   10538:	e037883a 	mov	sp,fp
   1053c:	dfc00117 	ldw	ra,4(sp)
   10540:	df000017 	ldw	fp,0(sp)
   10544:	dec00204 	addi	sp,sp,8
   10548:	f800283a 	ret

0001054c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1054c:	defff904 	addi	sp,sp,-28
   10550:	dfc00615 	stw	ra,24(sp)
   10554:	df000515 	stw	fp,20(sp)
   10558:	df000504 	addi	fp,sp,20
   1055c:	e13ffc15 	stw	r4,-16(fp)
   10560:	e17ffd15 	stw	r5,-12(fp)
   10564:	e1bffe15 	stw	r6,-8(fp)
   10568:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1056c:	e1bfff17 	ldw	r6,-4(fp)
   10570:	e17ffe17 	ldw	r5,-8(fp)
   10574:	e13ffd17 	ldw	r4,-12(fp)
   10578:	001078c0 	call	1078c <open>
   1057c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   10580:	e0bffb17 	ldw	r2,-20(fp)
   10584:	10001c16 	blt	r2,zero,105f8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   10588:	00800074 	movhi	r2,1
   1058c:	1088ee04 	addi	r2,r2,9144
   10590:	e0fffb17 	ldw	r3,-20(fp)
   10594:	18c00324 	muli	r3,r3,12
   10598:	10c5883a 	add	r2,r2,r3
   1059c:	10c00017 	ldw	r3,0(r2)
   105a0:	e0bffc17 	ldw	r2,-16(fp)
   105a4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   105a8:	00800074 	movhi	r2,1
   105ac:	1088ee04 	addi	r2,r2,9144
   105b0:	e0fffb17 	ldw	r3,-20(fp)
   105b4:	18c00324 	muli	r3,r3,12
   105b8:	10c5883a 	add	r2,r2,r3
   105bc:	10800104 	addi	r2,r2,4
   105c0:	10c00017 	ldw	r3,0(r2)
   105c4:	e0bffc17 	ldw	r2,-16(fp)
   105c8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   105cc:	00800074 	movhi	r2,1
   105d0:	1088ee04 	addi	r2,r2,9144
   105d4:	e0fffb17 	ldw	r3,-20(fp)
   105d8:	18c00324 	muli	r3,r3,12
   105dc:	10c5883a 	add	r2,r2,r3
   105e0:	10800204 	addi	r2,r2,8
   105e4:	10c00017 	ldw	r3,0(r2)
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   105f0:	e13ffb17 	ldw	r4,-20(fp)
   105f4:	000ed9c0 	call	ed9c <alt_release_fd>
  }
} 
   105f8:	0001883a 	nop
   105fc:	e037883a 	mov	sp,fp
   10600:	dfc00117 	ldw	ra,4(sp)
   10604:	df000017 	ldw	fp,0(sp)
   10608:	dec00204 	addi	sp,sp,8
   1060c:	f800283a 	ret

00010610 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   10610:	defffb04 	addi	sp,sp,-20
   10614:	dfc00415 	stw	ra,16(sp)
   10618:	df000315 	stw	fp,12(sp)
   1061c:	df000304 	addi	fp,sp,12
   10620:	e13ffd15 	stw	r4,-12(fp)
   10624:	e17ffe15 	stw	r5,-8(fp)
   10628:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1062c:	01c07fc4 	movi	r7,511
   10630:	01800044 	movi	r6,1
   10634:	e17ffd17 	ldw	r5,-12(fp)
   10638:	01000074 	movhi	r4,1
   1063c:	2108f104 	addi	r4,r4,9156
   10640:	001054c0 	call	1054c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   10644:	01c07fc4 	movi	r7,511
   10648:	000d883a 	mov	r6,zero
   1064c:	e17ffe17 	ldw	r5,-8(fp)
   10650:	01000074 	movhi	r4,1
   10654:	2108ee04 	addi	r4,r4,9144
   10658:	001054c0 	call	1054c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1065c:	01c07fc4 	movi	r7,511
   10660:	01800044 	movi	r6,1
   10664:	e17fff17 	ldw	r5,-4(fp)
   10668:	01000074 	movhi	r4,1
   1066c:	2108f404 	addi	r4,r4,9168
   10670:	001054c0 	call	1054c <alt_open_fd>
}  
   10674:	0001883a 	nop
   10678:	e037883a 	mov	sp,fp
   1067c:	dfc00117 	ldw	ra,4(sp)
   10680:	df000017 	ldw	fp,0(sp)
   10684:	dec00204 	addi	sp,sp,8
   10688:	f800283a 	ret

0001068c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1068c:	defffe04 	addi	sp,sp,-8
   10690:	dfc00115 	stw	ra,4(sp)
   10694:	df000015 	stw	fp,0(sp)
   10698:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1069c:	d0a00d17 	ldw	r2,-32716(gp)
   106a0:	10000326 	beq	r2,zero,106b0 <alt_get_errno+0x24>
   106a4:	d0a00d17 	ldw	r2,-32716(gp)
   106a8:	103ee83a 	callr	r2
   106ac:	00000106 	br	106b4 <alt_get_errno+0x28>
   106b0:	d0a6dc04 	addi	r2,gp,-25744
}
   106b4:	e037883a 	mov	sp,fp
   106b8:	dfc00117 	ldw	ra,4(sp)
   106bc:	df000017 	ldw	fp,0(sp)
   106c0:	dec00204 	addi	sp,sp,8
   106c4:	f800283a 	ret

000106c8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   106c8:	defffd04 	addi	sp,sp,-12
   106cc:	df000215 	stw	fp,8(sp)
   106d0:	df000204 	addi	fp,sp,8
   106d4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   106d8:	e0bfff17 	ldw	r2,-4(fp)
   106dc:	10800217 	ldw	r2,8(r2)
   106e0:	10d00034 	orhi	r3,r2,16384
   106e4:	e0bfff17 	ldw	r2,-4(fp)
   106e8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   106ec:	e03ffe15 	stw	zero,-8(fp)
   106f0:	00001d06 	br	10768 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   106f4:	00800074 	movhi	r2,1
   106f8:	1088ee04 	addi	r2,r2,9144
   106fc:	e0fffe17 	ldw	r3,-8(fp)
   10700:	18c00324 	muli	r3,r3,12
   10704:	10c5883a 	add	r2,r2,r3
   10708:	10c00017 	ldw	r3,0(r2)
   1070c:	e0bfff17 	ldw	r2,-4(fp)
   10710:	10800017 	ldw	r2,0(r2)
   10714:	1880111e 	bne	r3,r2,1075c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   10718:	00800074 	movhi	r2,1
   1071c:	1088ee04 	addi	r2,r2,9144
   10720:	e0fffe17 	ldw	r3,-8(fp)
   10724:	18c00324 	muli	r3,r3,12
   10728:	10c5883a 	add	r2,r2,r3
   1072c:	10800204 	addi	r2,r2,8
   10730:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   10734:	1000090e 	bge	r2,zero,1075c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   10738:	e0bffe17 	ldw	r2,-8(fp)
   1073c:	10c00324 	muli	r3,r2,12
   10740:	00800074 	movhi	r2,1
   10744:	1088ee04 	addi	r2,r2,9144
   10748:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1074c:	e0bfff17 	ldw	r2,-4(fp)
   10750:	18800226 	beq	r3,r2,1075c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   10754:	00bffcc4 	movi	r2,-13
   10758:	00000806 	br	1077c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1075c:	e0bffe17 	ldw	r2,-8(fp)
   10760:	10800044 	addi	r2,r2,1
   10764:	e0bffe15 	stw	r2,-8(fp)
   10768:	d0a00c17 	ldw	r2,-32720(gp)
   1076c:	1007883a 	mov	r3,r2
   10770:	e0bffe17 	ldw	r2,-8(fp)
   10774:	18bfdf2e 	bgeu	r3,r2,106f4 <__alt_data_end+0xff0106f4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   10778:	0005883a 	mov	r2,zero
}
   1077c:	e037883a 	mov	sp,fp
   10780:	df000017 	ldw	fp,0(sp)
   10784:	dec00104 	addi	sp,sp,4
   10788:	f800283a 	ret

0001078c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1078c:	defff604 	addi	sp,sp,-40
   10790:	dfc00915 	stw	ra,36(sp)
   10794:	df000815 	stw	fp,32(sp)
   10798:	df000804 	addi	fp,sp,32
   1079c:	e13ffd15 	stw	r4,-12(fp)
   107a0:	e17ffe15 	stw	r5,-8(fp)
   107a4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   107a8:	00bfffc4 	movi	r2,-1
   107ac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   107b0:	00bffb44 	movi	r2,-19
   107b4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   107b8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   107bc:	d1600a04 	addi	r5,gp,-32728
   107c0:	e13ffd17 	ldw	r4,-12(fp)
   107c4:	0010aa80 	call	10aa8 <alt_find_dev>
   107c8:	e0bff815 	stw	r2,-32(fp)
   107cc:	e0bff817 	ldw	r2,-32(fp)
   107d0:	1000051e 	bne	r2,zero,107e8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   107d4:	e13ffd17 	ldw	r4,-12(fp)
   107d8:	0010b380 	call	10b38 <alt_find_file>
   107dc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   107e0:	00800044 	movi	r2,1
   107e4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   107e8:	e0bff817 	ldw	r2,-32(fp)
   107ec:	10002926 	beq	r2,zero,10894 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   107f0:	e13ff817 	ldw	r4,-32(fp)
   107f4:	0010c400 	call	10c40 <alt_get_fd>
   107f8:	e0bff915 	stw	r2,-28(fp)
   107fc:	e0bff917 	ldw	r2,-28(fp)
   10800:	1000030e 	bge	r2,zero,10810 <open+0x84>
    {
      status = index;
   10804:	e0bff917 	ldw	r2,-28(fp)
   10808:	e0bffa15 	stw	r2,-24(fp)
   1080c:	00002306 	br	1089c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   10810:	e0bff917 	ldw	r2,-28(fp)
   10814:	10c00324 	muli	r3,r2,12
   10818:	00800074 	movhi	r2,1
   1081c:	1088ee04 	addi	r2,r2,9144
   10820:	1885883a 	add	r2,r3,r2
   10824:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   10828:	e0fffe17 	ldw	r3,-8(fp)
   1082c:	00900034 	movhi	r2,16384
   10830:	10bfffc4 	addi	r2,r2,-1
   10834:	1886703a 	and	r3,r3,r2
   10838:	e0bffc17 	ldw	r2,-16(fp)
   1083c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   10840:	e0bffb17 	ldw	r2,-20(fp)
   10844:	1000051e 	bne	r2,zero,1085c <open+0xd0>
   10848:	e13ffc17 	ldw	r4,-16(fp)
   1084c:	00106c80 	call	106c8 <alt_file_locked>
   10850:	e0bffa15 	stw	r2,-24(fp)
   10854:	e0bffa17 	ldw	r2,-24(fp)
   10858:	10001016 	blt	r2,zero,1089c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1085c:	e0bff817 	ldw	r2,-32(fp)
   10860:	10800317 	ldw	r2,12(r2)
   10864:	10000826 	beq	r2,zero,10888 <open+0xfc>
   10868:	e0bff817 	ldw	r2,-32(fp)
   1086c:	10800317 	ldw	r2,12(r2)
   10870:	e1ffff17 	ldw	r7,-4(fp)
   10874:	e1bffe17 	ldw	r6,-8(fp)
   10878:	e17ffd17 	ldw	r5,-12(fp)
   1087c:	e13ffc17 	ldw	r4,-16(fp)
   10880:	103ee83a 	callr	r2
   10884:	00000106 	br	1088c <open+0x100>
   10888:	0005883a 	mov	r2,zero
   1088c:	e0bffa15 	stw	r2,-24(fp)
   10890:	00000206 	br	1089c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   10894:	00bffb44 	movi	r2,-19
   10898:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1089c:	e0bffa17 	ldw	r2,-24(fp)
   108a0:	1000090e 	bge	r2,zero,108c8 <open+0x13c>
  {
    alt_release_fd (index);  
   108a4:	e13ff917 	ldw	r4,-28(fp)
   108a8:	000ed9c0 	call	ed9c <alt_release_fd>
    ALT_ERRNO = -status;
   108ac:	001068c0 	call	1068c <alt_get_errno>
   108b0:	1007883a 	mov	r3,r2
   108b4:	e0bffa17 	ldw	r2,-24(fp)
   108b8:	0085c83a 	sub	r2,zero,r2
   108bc:	18800015 	stw	r2,0(r3)
    return -1;
   108c0:	00bfffc4 	movi	r2,-1
   108c4:	00000106 	br	108cc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   108c8:	e0bff917 	ldw	r2,-28(fp)
}
   108cc:	e037883a 	mov	sp,fp
   108d0:	dfc00117 	ldw	ra,4(sp)
   108d4:	df000017 	ldw	fp,0(sp)
   108d8:	dec00204 	addi	sp,sp,8
   108dc:	f800283a 	ret

000108e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   108e0:	defffa04 	addi	sp,sp,-24
   108e4:	df000515 	stw	fp,20(sp)
   108e8:	df000504 	addi	fp,sp,20
   108ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108f0:	0005303a 	rdctl	r2,status
   108f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108f8:	e0fffc17 	ldw	r3,-16(fp)
   108fc:	00bfff84 	movi	r2,-2
   10900:	1884703a 	and	r2,r3,r2
   10904:	1001703a 	wrctl	status,r2
  
  return context;
   10908:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1090c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   10910:	e0bfff17 	ldw	r2,-4(fp)
   10914:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   10918:	e0bffd17 	ldw	r2,-12(fp)
   1091c:	10800017 	ldw	r2,0(r2)
   10920:	e0fffd17 	ldw	r3,-12(fp)
   10924:	18c00117 	ldw	r3,4(r3)
   10928:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1092c:	e0bffd17 	ldw	r2,-12(fp)
   10930:	10800117 	ldw	r2,4(r2)
   10934:	e0fffd17 	ldw	r3,-12(fp)
   10938:	18c00017 	ldw	r3,0(r3)
   1093c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   10940:	e0bffd17 	ldw	r2,-12(fp)
   10944:	e0fffd17 	ldw	r3,-12(fp)
   10948:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1094c:	e0bffd17 	ldw	r2,-12(fp)
   10950:	e0fffd17 	ldw	r3,-12(fp)
   10954:	10c00015 	stw	r3,0(r2)
   10958:	e0bffb17 	ldw	r2,-20(fp)
   1095c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10960:	e0bffe17 	ldw	r2,-8(fp)
   10964:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   10968:	0001883a 	nop
   1096c:	e037883a 	mov	sp,fp
   10970:	df000017 	ldw	fp,0(sp)
   10974:	dec00104 	addi	sp,sp,4
   10978:	f800283a 	ret

0001097c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1097c:	defffb04 	addi	sp,sp,-20
   10980:	dfc00415 	stw	ra,16(sp)
   10984:	df000315 	stw	fp,12(sp)
   10988:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1098c:	d0a01017 	ldw	r2,-32704(gp)
   10990:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   10994:	d0a6e717 	ldw	r2,-25700(gp)
   10998:	10800044 	addi	r2,r2,1
   1099c:	d0a6e715 	stw	r2,-25700(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   109a0:	00002e06 	br	10a5c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   109a4:	e0bffd17 	ldw	r2,-12(fp)
   109a8:	10800017 	ldw	r2,0(r2)
   109ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   109b0:	e0bffd17 	ldw	r2,-12(fp)
   109b4:	10800403 	ldbu	r2,16(r2)
   109b8:	10803fcc 	andi	r2,r2,255
   109bc:	10000426 	beq	r2,zero,109d0 <alt_tick+0x54>
   109c0:	d0a6e717 	ldw	r2,-25700(gp)
   109c4:	1000021e 	bne	r2,zero,109d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   109c8:	e0bffd17 	ldw	r2,-12(fp)
   109cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   109d0:	e0bffd17 	ldw	r2,-12(fp)
   109d4:	10800217 	ldw	r2,8(r2)
   109d8:	d0e6e717 	ldw	r3,-25700(gp)
   109dc:	18801d36 	bltu	r3,r2,10a54 <alt_tick+0xd8>
   109e0:	e0bffd17 	ldw	r2,-12(fp)
   109e4:	10800403 	ldbu	r2,16(r2)
   109e8:	10803fcc 	andi	r2,r2,255
   109ec:	1000191e 	bne	r2,zero,10a54 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   109f0:	e0bffd17 	ldw	r2,-12(fp)
   109f4:	10800317 	ldw	r2,12(r2)
   109f8:	e0fffd17 	ldw	r3,-12(fp)
   109fc:	18c00517 	ldw	r3,20(r3)
   10a00:	1809883a 	mov	r4,r3
   10a04:	103ee83a 	callr	r2
   10a08:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   10a0c:	e0bfff17 	ldw	r2,-4(fp)
   10a10:	1000031e 	bne	r2,zero,10a20 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   10a14:	e13ffd17 	ldw	r4,-12(fp)
   10a18:	00108e00 	call	108e0 <alt_alarm_stop>
   10a1c:	00000d06 	br	10a54 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   10a20:	e0bffd17 	ldw	r2,-12(fp)
   10a24:	10c00217 	ldw	r3,8(r2)
   10a28:	e0bfff17 	ldw	r2,-4(fp)
   10a2c:	1887883a 	add	r3,r3,r2
   10a30:	e0bffd17 	ldw	r2,-12(fp)
   10a34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   10a38:	e0bffd17 	ldw	r2,-12(fp)
   10a3c:	10c00217 	ldw	r3,8(r2)
   10a40:	d0a6e717 	ldw	r2,-25700(gp)
   10a44:	1880032e 	bgeu	r3,r2,10a54 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   10a48:	e0bffd17 	ldw	r2,-12(fp)
   10a4c:	00c00044 	movi	r3,1
   10a50:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   10a54:	e0bffe17 	ldw	r2,-8(fp)
   10a58:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   10a5c:	e0fffd17 	ldw	r3,-12(fp)
   10a60:	d0a01004 	addi	r2,gp,-32704
   10a64:	18bfcf1e 	bne	r3,r2,109a4 <__alt_data_end+0xff0109a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   10a68:	0001883a 	nop
}
   10a6c:	0001883a 	nop
   10a70:	e037883a 	mov	sp,fp
   10a74:	dfc00117 	ldw	ra,4(sp)
   10a78:	df000017 	ldw	fp,0(sp)
   10a7c:	dec00204 	addi	sp,sp,8
   10a80:	f800283a 	ret

00010a84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   10a84:	deffff04 	addi	sp,sp,-4
   10a88:	df000015 	stw	fp,0(sp)
   10a8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   10a90:	000170fa 	wrctl	ienable,zero
}
   10a94:	0001883a 	nop
   10a98:	e037883a 	mov	sp,fp
   10a9c:	df000017 	ldw	fp,0(sp)
   10aa0:	dec00104 	addi	sp,sp,4
   10aa4:	f800283a 	ret

00010aa8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   10aa8:	defffa04 	addi	sp,sp,-24
   10aac:	dfc00515 	stw	ra,20(sp)
   10ab0:	df000415 	stw	fp,16(sp)
   10ab4:	df000404 	addi	fp,sp,16
   10ab8:	e13ffe15 	stw	r4,-8(fp)
   10abc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   10ac0:	e0bfff17 	ldw	r2,-4(fp)
   10ac4:	10800017 	ldw	r2,0(r2)
   10ac8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   10acc:	e13ffe17 	ldw	r4,-8(fp)
   10ad0:	00027800 	call	2780 <strlen>
   10ad4:	10800044 	addi	r2,r2,1
   10ad8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10adc:	00000d06 	br	10b14 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   10ae0:	e0bffc17 	ldw	r2,-16(fp)
   10ae4:	10800217 	ldw	r2,8(r2)
   10ae8:	e0fffd17 	ldw	r3,-12(fp)
   10aec:	180d883a 	mov	r6,r3
   10af0:	e17ffe17 	ldw	r5,-8(fp)
   10af4:	1009883a 	mov	r4,r2
   10af8:	001100c0 	call	1100c <memcmp>
   10afc:	1000021e 	bne	r2,zero,10b08 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   10b00:	e0bffc17 	ldw	r2,-16(fp)
   10b04:	00000706 	br	10b24 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   10b08:	e0bffc17 	ldw	r2,-16(fp)
   10b0c:	10800017 	ldw	r2,0(r2)
   10b10:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   10b14:	e0fffc17 	ldw	r3,-16(fp)
   10b18:	e0bfff17 	ldw	r2,-4(fp)
   10b1c:	18bff01e 	bne	r3,r2,10ae0 <__alt_data_end+0xff010ae0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   10b20:	0005883a 	mov	r2,zero
}
   10b24:	e037883a 	mov	sp,fp
   10b28:	dfc00117 	ldw	ra,4(sp)
   10b2c:	df000017 	ldw	fp,0(sp)
   10b30:	dec00204 	addi	sp,sp,8
   10b34:	f800283a 	ret

00010b38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   10b38:	defffb04 	addi	sp,sp,-20
   10b3c:	dfc00415 	stw	ra,16(sp)
   10b40:	df000315 	stw	fp,12(sp)
   10b44:	df000304 	addi	fp,sp,12
   10b48:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   10b4c:	d0a00817 	ldw	r2,-32736(gp)
   10b50:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10b54:	00003106 	br	10c1c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   10b58:	e0bffd17 	ldw	r2,-12(fp)
   10b5c:	10800217 	ldw	r2,8(r2)
   10b60:	1009883a 	mov	r4,r2
   10b64:	00027800 	call	2780 <strlen>
   10b68:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   10b6c:	e0bffd17 	ldw	r2,-12(fp)
   10b70:	10c00217 	ldw	r3,8(r2)
   10b74:	e0bffe17 	ldw	r2,-8(fp)
   10b78:	10bfffc4 	addi	r2,r2,-1
   10b7c:	1885883a 	add	r2,r3,r2
   10b80:	10800003 	ldbu	r2,0(r2)
   10b84:	10803fcc 	andi	r2,r2,255
   10b88:	1080201c 	xori	r2,r2,128
   10b8c:	10bfe004 	addi	r2,r2,-128
   10b90:	10800bd8 	cmpnei	r2,r2,47
   10b94:	1000031e 	bne	r2,zero,10ba4 <alt_find_file+0x6c>
    {
      len -= 1;
   10b98:	e0bffe17 	ldw	r2,-8(fp)
   10b9c:	10bfffc4 	addi	r2,r2,-1
   10ba0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10ba4:	e0bffe17 	ldw	r2,-8(fp)
   10ba8:	e0ffff17 	ldw	r3,-4(fp)
   10bac:	1885883a 	add	r2,r3,r2
   10bb0:	10800003 	ldbu	r2,0(r2)
   10bb4:	10803fcc 	andi	r2,r2,255
   10bb8:	1080201c 	xori	r2,r2,128
   10bbc:	10bfe004 	addi	r2,r2,-128
   10bc0:	10800be0 	cmpeqi	r2,r2,47
   10bc4:	1000081e 	bne	r2,zero,10be8 <alt_find_file+0xb0>
   10bc8:	e0bffe17 	ldw	r2,-8(fp)
   10bcc:	e0ffff17 	ldw	r3,-4(fp)
   10bd0:	1885883a 	add	r2,r3,r2
   10bd4:	10800003 	ldbu	r2,0(r2)
   10bd8:	10803fcc 	andi	r2,r2,255
   10bdc:	1080201c 	xori	r2,r2,128
   10be0:	10bfe004 	addi	r2,r2,-128
   10be4:	10000a1e 	bne	r2,zero,10c10 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   10be8:	e0bffd17 	ldw	r2,-12(fp)
   10bec:	10800217 	ldw	r2,8(r2)
   10bf0:	e0fffe17 	ldw	r3,-8(fp)
   10bf4:	180d883a 	mov	r6,r3
   10bf8:	e17fff17 	ldw	r5,-4(fp)
   10bfc:	1009883a 	mov	r4,r2
   10c00:	001100c0 	call	1100c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   10c04:	1000021e 	bne	r2,zero,10c10 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   10c08:	e0bffd17 	ldw	r2,-12(fp)
   10c0c:	00000706 	br	10c2c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   10c10:	e0bffd17 	ldw	r2,-12(fp)
   10c14:	10800017 	ldw	r2,0(r2)
   10c18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   10c1c:	e0fffd17 	ldw	r3,-12(fp)
   10c20:	d0a00804 	addi	r2,gp,-32736
   10c24:	18bfcc1e 	bne	r3,r2,10b58 <__alt_data_end+0xff010b58>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   10c28:	0005883a 	mov	r2,zero
}
   10c2c:	e037883a 	mov	sp,fp
   10c30:	dfc00117 	ldw	ra,4(sp)
   10c34:	df000017 	ldw	fp,0(sp)
   10c38:	dec00204 	addi	sp,sp,8
   10c3c:	f800283a 	ret

00010c40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   10c40:	defffc04 	addi	sp,sp,-16
   10c44:	df000315 	stw	fp,12(sp)
   10c48:	df000304 	addi	fp,sp,12
   10c4c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   10c50:	00bffa04 	movi	r2,-24
   10c54:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10c58:	e03ffd15 	stw	zero,-12(fp)
   10c5c:	00001906 	br	10cc4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   10c60:	00800074 	movhi	r2,1
   10c64:	1088ee04 	addi	r2,r2,9144
   10c68:	e0fffd17 	ldw	r3,-12(fp)
   10c6c:	18c00324 	muli	r3,r3,12
   10c70:	10c5883a 	add	r2,r2,r3
   10c74:	10800017 	ldw	r2,0(r2)
   10c78:	10000f1e 	bne	r2,zero,10cb8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   10c7c:	00800074 	movhi	r2,1
   10c80:	1088ee04 	addi	r2,r2,9144
   10c84:	e0fffd17 	ldw	r3,-12(fp)
   10c88:	18c00324 	muli	r3,r3,12
   10c8c:	10c5883a 	add	r2,r2,r3
   10c90:	e0ffff17 	ldw	r3,-4(fp)
   10c94:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   10c98:	d0e00c17 	ldw	r3,-32720(gp)
   10c9c:	e0bffd17 	ldw	r2,-12(fp)
   10ca0:	1880020e 	bge	r3,r2,10cac <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   10ca4:	e0bffd17 	ldw	r2,-12(fp)
   10ca8:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   10cac:	e0bffd17 	ldw	r2,-12(fp)
   10cb0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   10cb4:	00000606 	br	10cd0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   10cb8:	e0bffd17 	ldw	r2,-12(fp)
   10cbc:	10800044 	addi	r2,r2,1
   10cc0:	e0bffd15 	stw	r2,-12(fp)
   10cc4:	e0bffd17 	ldw	r2,-12(fp)
   10cc8:	10800810 	cmplti	r2,r2,32
   10ccc:	103fe41e 	bne	r2,zero,10c60 <__alt_data_end+0xff010c60>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   10cd0:	e0bffe17 	ldw	r2,-8(fp)
}
   10cd4:	e037883a 	mov	sp,fp
   10cd8:	df000017 	ldw	fp,0(sp)
   10cdc:	dec00104 	addi	sp,sp,4
   10ce0:	f800283a 	ret

00010ce4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   10ce4:	defffb04 	addi	sp,sp,-20
   10ce8:	df000415 	stw	fp,16(sp)
   10cec:	df000404 	addi	fp,sp,16
   10cf0:	e13ffe15 	stw	r4,-8(fp)
   10cf4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   10cf8:	e0bfff17 	ldw	r2,-4(fp)
   10cfc:	10840070 	cmpltui	r2,r2,4097
   10d00:	1000021e 	bne	r2,zero,10d0c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   10d04:	00840004 	movi	r2,4096
   10d08:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   10d0c:	e0fffe17 	ldw	r3,-8(fp)
   10d10:	e0bfff17 	ldw	r2,-4(fp)
   10d14:	1885883a 	add	r2,r3,r2
   10d18:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10d1c:	e0bffe17 	ldw	r2,-8(fp)
   10d20:	e0bffc15 	stw	r2,-16(fp)
   10d24:	00000506 	br	10d3c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   10d28:	e0bffc17 	ldw	r2,-16(fp)
   10d2c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   10d30:	e0bffc17 	ldw	r2,-16(fp)
   10d34:	10800804 	addi	r2,r2,32
   10d38:	e0bffc15 	stw	r2,-16(fp)
   10d3c:	e0fffc17 	ldw	r3,-16(fp)
   10d40:	e0bffd17 	ldw	r2,-12(fp)
   10d44:	18bff836 	bltu	r3,r2,10d28 <__alt_data_end+0xff010d28>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   10d48:	e0bffe17 	ldw	r2,-8(fp)
   10d4c:	108007cc 	andi	r2,r2,31
   10d50:	10000226 	beq	r2,zero,10d5c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   10d54:	e0bffc17 	ldw	r2,-16(fp)
   10d58:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   10d5c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   10d60:	0001883a 	nop
   10d64:	e037883a 	mov	sp,fp
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00104 	addi	sp,sp,4
   10d70:	f800283a 	ret

00010d74 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   10d74:	defffe04 	addi	sp,sp,-8
   10d78:	df000115 	stw	fp,4(sp)
   10d7c:	df000104 	addi	fp,sp,4
   10d80:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   10d84:	e0bfff17 	ldw	r2,-4(fp)
   10d88:	10bffe84 	addi	r2,r2,-6
   10d8c:	10c00428 	cmpgeui	r3,r2,16
   10d90:	18001a1e 	bne	r3,zero,10dfc <alt_exception_cause_generated_bad_addr+0x88>
   10d94:	100690ba 	slli	r3,r2,2
   10d98:	00800074 	movhi	r2,1
   10d9c:	10836b04 	addi	r2,r2,3500
   10da0:	1885883a 	add	r2,r3,r2
   10da4:	10800017 	ldw	r2,0(r2)
   10da8:	1000683a 	jmp	r2
   10dac:	00010dec 	andhi	zero,zero,1079
   10db0:	00010dec 	andhi	zero,zero,1079
   10db4:	00010dfc 	xorhi	zero,zero,1079
   10db8:	00010dfc 	xorhi	zero,zero,1079
   10dbc:	00010dfc 	xorhi	zero,zero,1079
   10dc0:	00010dec 	andhi	zero,zero,1079
   10dc4:	00010df4 	movhi	zero,1079
   10dc8:	00010dfc 	xorhi	zero,zero,1079
   10dcc:	00010dec 	andhi	zero,zero,1079
   10dd0:	00010dec 	andhi	zero,zero,1079
   10dd4:	00010dfc 	xorhi	zero,zero,1079
   10dd8:	00010dec 	andhi	zero,zero,1079
   10ddc:	00010df4 	movhi	zero,1079
   10de0:	00010dfc 	xorhi	zero,zero,1079
   10de4:	00010dfc 	xorhi	zero,zero,1079
   10de8:	00010dec 	andhi	zero,zero,1079
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   10dec:	00800044 	movi	r2,1
   10df0:	00000306 	br	10e00 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   10df4:	0005883a 	mov	r2,zero
   10df8:	00000106 	br	10e00 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   10dfc:	0005883a 	mov	r2,zero
  }
}
   10e00:	e037883a 	mov	sp,fp
   10e04:	df000017 	ldw	fp,0(sp)
   10e08:	dec00104 	addi	sp,sp,4
   10e0c:	f800283a 	ret

00010e10 <atexit>:
   10e10:	200b883a 	mov	r5,r4
   10e14:	000f883a 	mov	r7,zero
   10e18:	000d883a 	mov	r6,zero
   10e1c:	0009883a 	mov	r4,zero
   10e20:	00110881 	jmpi	11088 <__register_exitproc>

00010e24 <exit>:
   10e24:	defffe04 	addi	sp,sp,-8
   10e28:	000b883a 	mov	r5,zero
   10e2c:	dc000015 	stw	r16,0(sp)
   10e30:	dfc00115 	stw	ra,4(sp)
   10e34:	2021883a 	mov	r16,r4
   10e38:	00111a00 	call	111a0 <__call_exitprocs>
   10e3c:	00800074 	movhi	r2,1
   10e40:	108d6a04 	addi	r2,r2,13736
   10e44:	11000017 	ldw	r4,0(r2)
   10e48:	20800f17 	ldw	r2,60(r4)
   10e4c:	10000126 	beq	r2,zero,10e54 <exit+0x30>
   10e50:	103ee83a 	callr	r2
   10e54:	8009883a 	mov	r4,r16
   10e58:	00113200 	call	11320 <_exit>

00010e5c <memalign>:
   10e5c:	00800074 	movhi	r2,1
   10e60:	108d6b04 	addi	r2,r2,13740
   10e64:	280d883a 	mov	r6,r5
   10e68:	200b883a 	mov	r5,r4
   10e6c:	11000017 	ldw	r4,0(r2)
   10e70:	0010e741 	jmpi	10e74 <_memalign_r>

00010e74 <_memalign_r>:
   10e74:	00800204 	movi	r2,8
   10e78:	1140532e 	bgeu	r2,r5,10fc8 <_memalign_r+0x154>
   10e7c:	defffa04 	addi	sp,sp,-24
   10e80:	dd000415 	stw	r20,16(sp)
   10e84:	dc400115 	stw	r17,4(sp)
   10e88:	dfc00515 	stw	ra,20(sp)
   10e8c:	dcc00315 	stw	r19,12(sp)
   10e90:	dc800215 	stw	r18,8(sp)
   10e94:	dc000015 	stw	r16,0(sp)
   10e98:	008003c4 	movi	r2,15
   10e9c:	2823883a 	mov	r17,r5
   10ea0:	2029883a 	mov	r20,r4
   10ea4:	11400136 	bltu	r2,r5,10eac <_memalign_r+0x38>
   10ea8:	04400404 	movi	r17,16
   10eac:	308002c4 	addi	r2,r6,11
   10eb0:	00c00584 	movi	r3,22
   10eb4:	18803e2e 	bgeu	r3,r2,10fb0 <_memalign_r+0x13c>
   10eb8:	04bffe04 	movi	r18,-8
   10ebc:	14a4703a 	and	r18,r2,r18
   10ec0:	90003d16 	blt	r18,zero,10fb8 <_memalign_r+0x144>
   10ec4:	91803c36 	bltu	r18,r6,10fb8 <_memalign_r+0x144>
   10ec8:	89400404 	addi	r5,r17,16
   10ecc:	2c8b883a 	add	r5,r5,r18
   10ed0:	a009883a 	mov	r4,r20
   10ed4:	0001de00 	call	1de0 <_malloc_r>
   10ed8:	1027883a 	mov	r19,r2
   10edc:	10004926 	beq	r2,zero,11004 <_memalign_r+0x190>
   10ee0:	a009883a 	mov	r4,r20
   10ee4:	000ec5c0 	call	ec5c <__malloc_lock>
   10ee8:	880b883a 	mov	r5,r17
   10eec:	9809883a 	mov	r4,r19
   10ef0:	9c3ffe04 	addi	r16,r19,-8
   10ef4:	000c0400 	call	c040 <__umodsi3>
   10ef8:	10001c26 	beq	r2,zero,10f6c <_memalign_r+0xf8>
   10efc:	88bfffc4 	addi	r2,r17,-1
   10f00:	9887883a 	add	r3,r19,r2
   10f04:	0445c83a 	sub	r2,zero,r17
   10f08:	1884703a 	and	r2,r3,r2
   10f0c:	10bffe04 	addi	r2,r2,-8
   10f10:	1409c83a 	sub	r4,r2,r16
   10f14:	014003c4 	movi	r5,15
   10f18:	8007883a 	mov	r3,r16
   10f1c:	29002c0e 	bge	r5,r4,10fd0 <_memalign_r+0x15c>
   10f20:	1021883a 	mov	r16,r2
   10f24:	993fff17 	ldw	r4,-4(r19)
   10f28:	00bfff04 	movi	r2,-4
   10f2c:	80c7c83a 	sub	r3,r16,r3
   10f30:	2084703a 	and	r2,r4,r2
   10f34:	10c5c83a 	sub	r2,r2,r3
   10f38:	11000054 	ori	r4,r2,1
   10f3c:	81000115 	stw	r4,4(r16)
   10f40:	8085883a 	add	r2,r16,r2
   10f44:	11800117 	ldw	r6,4(r2)
   10f48:	980b883a 	mov	r5,r19
   10f4c:	a009883a 	mov	r4,r20
   10f50:	31800054 	ori	r6,r6,1
   10f54:	11800115 	stw	r6,4(r2)
   10f58:	98bfff17 	ldw	r2,-4(r19)
   10f5c:	1080004c 	andi	r2,r2,1
   10f60:	10c6b03a 	or	r3,r2,r3
   10f64:	98ffff15 	stw	r3,-4(r19)
   10f68:	0006c300 	call	6c30 <_free_r>
   10f6c:	80c00117 	ldw	r3,4(r16)
   10f70:	00bfff04 	movi	r2,-4
   10f74:	1884703a 	and	r2,r3,r2
   10f78:	1485c83a 	sub	r2,r2,r18
   10f7c:	00c003c4 	movi	r3,15
   10f80:	18801516 	blt	r3,r2,10fd8 <_memalign_r+0x164>
   10f84:	a009883a 	mov	r4,r20
   10f88:	000ec600 	call	ec60 <__malloc_unlock>
   10f8c:	80800204 	addi	r2,r16,8
   10f90:	dfc00517 	ldw	ra,20(sp)
   10f94:	dd000417 	ldw	r20,16(sp)
   10f98:	dcc00317 	ldw	r19,12(sp)
   10f9c:	dc800217 	ldw	r18,8(sp)
   10fa0:	dc400117 	ldw	r17,4(sp)
   10fa4:	dc000017 	ldw	r16,0(sp)
   10fa8:	dec00604 	addi	sp,sp,24
   10fac:	f800283a 	ret
   10fb0:	04800404 	movi	r18,16
   10fb4:	91bfc42e 	bgeu	r18,r6,10ec8 <__alt_data_end+0xff010ec8>
   10fb8:	00800304 	movi	r2,12
   10fbc:	a0800015 	stw	r2,0(r20)
   10fc0:	0005883a 	mov	r2,zero
   10fc4:	003ff206 	br	10f90 <__alt_data_end+0xff010f90>
   10fc8:	300b883a 	mov	r5,r6
   10fcc:	0001de01 	jmpi	1de0 <_malloc_r>
   10fd0:	1461883a 	add	r16,r2,r17
   10fd4:	003fd306 	br	10f24 <__alt_data_end+0xff010f24>
   10fd8:	848b883a 	add	r5,r16,r18
   10fdc:	10800054 	ori	r2,r2,1
   10fe0:	28800115 	stw	r2,4(r5)
   10fe4:	80800117 	ldw	r2,4(r16)
   10fe8:	29400204 	addi	r5,r5,8
   10fec:	a009883a 	mov	r4,r20
   10ff0:	1080004c 	andi	r2,r2,1
   10ff4:	14a4b03a 	or	r18,r2,r18
   10ff8:	84800115 	stw	r18,4(r16)
   10ffc:	0006c300 	call	6c30 <_free_r>
   11000:	003fe006 	br	10f84 <__alt_data_end+0xff010f84>
   11004:	0005883a 	mov	r2,zero
   11008:	003fe106 	br	10f90 <__alt_data_end+0xff010f90>

0001100c <memcmp>:
   1100c:	01c000c4 	movi	r7,3
   11010:	3980192e 	bgeu	r7,r6,11078 <memcmp+0x6c>
   11014:	2144b03a 	or	r2,r4,r5
   11018:	11c4703a 	and	r2,r2,r7
   1101c:	10000f26 	beq	r2,zero,1105c <memcmp+0x50>
   11020:	20800003 	ldbu	r2,0(r4)
   11024:	28c00003 	ldbu	r3,0(r5)
   11028:	10c0151e 	bne	r2,r3,11080 <memcmp+0x74>
   1102c:	31bfff84 	addi	r6,r6,-2
   11030:	01ffffc4 	movi	r7,-1
   11034:	00000406 	br	11048 <memcmp+0x3c>
   11038:	20800003 	ldbu	r2,0(r4)
   1103c:	28c00003 	ldbu	r3,0(r5)
   11040:	31bfffc4 	addi	r6,r6,-1
   11044:	10c00e1e 	bne	r2,r3,11080 <memcmp+0x74>
   11048:	21000044 	addi	r4,r4,1
   1104c:	29400044 	addi	r5,r5,1
   11050:	31fff91e 	bne	r6,r7,11038 <__alt_data_end+0xff011038>
   11054:	0005883a 	mov	r2,zero
   11058:	f800283a 	ret
   1105c:	20c00017 	ldw	r3,0(r4)
   11060:	28800017 	ldw	r2,0(r5)
   11064:	18bfee1e 	bne	r3,r2,11020 <__alt_data_end+0xff011020>
   11068:	31bfff04 	addi	r6,r6,-4
   1106c:	21000104 	addi	r4,r4,4
   11070:	29400104 	addi	r5,r5,4
   11074:	39bff936 	bltu	r7,r6,1105c <__alt_data_end+0xff01105c>
   11078:	303fe91e 	bne	r6,zero,11020 <__alt_data_end+0xff011020>
   1107c:	003ff506 	br	11054 <__alt_data_end+0xff011054>
   11080:	10c5c83a 	sub	r2,r2,r3
   11084:	f800283a 	ret

00011088 <__register_exitproc>:
   11088:	defffa04 	addi	sp,sp,-24
   1108c:	dc000315 	stw	r16,12(sp)
   11090:	04000074 	movhi	r16,1
   11094:	840d6a04 	addi	r16,r16,13736
   11098:	80c00017 	ldw	r3,0(r16)
   1109c:	dc400415 	stw	r17,16(sp)
   110a0:	dfc00515 	stw	ra,20(sp)
   110a4:	18805217 	ldw	r2,328(r3)
   110a8:	2023883a 	mov	r17,r4
   110ac:	10003726 	beq	r2,zero,1118c <__register_exitproc+0x104>
   110b0:	10c00117 	ldw	r3,4(r2)
   110b4:	010007c4 	movi	r4,31
   110b8:	20c00e16 	blt	r4,r3,110f4 <__register_exitproc+0x6c>
   110bc:	1a000044 	addi	r8,r3,1
   110c0:	8800221e 	bne	r17,zero,1114c <__register_exitproc+0xc4>
   110c4:	18c00084 	addi	r3,r3,2
   110c8:	18c7883a 	add	r3,r3,r3
   110cc:	18c7883a 	add	r3,r3,r3
   110d0:	12000115 	stw	r8,4(r2)
   110d4:	10c7883a 	add	r3,r2,r3
   110d8:	19400015 	stw	r5,0(r3)
   110dc:	0005883a 	mov	r2,zero
   110e0:	dfc00517 	ldw	ra,20(sp)
   110e4:	dc400417 	ldw	r17,16(sp)
   110e8:	dc000317 	ldw	r16,12(sp)
   110ec:	dec00604 	addi	sp,sp,24
   110f0:	f800283a 	ret
   110f4:	00800034 	movhi	r2,0
   110f8:	10876e04 	addi	r2,r2,7608
   110fc:	10002626 	beq	r2,zero,11198 <__register_exitproc+0x110>
   11100:	01006404 	movi	r4,400
   11104:	d9400015 	stw	r5,0(sp)
   11108:	d9800115 	stw	r6,4(sp)
   1110c:	d9c00215 	stw	r7,8(sp)
   11110:	0001db80 	call	1db8 <malloc>
   11114:	d9400017 	ldw	r5,0(sp)
   11118:	d9800117 	ldw	r6,4(sp)
   1111c:	d9c00217 	ldw	r7,8(sp)
   11120:	10001d26 	beq	r2,zero,11198 <__register_exitproc+0x110>
   11124:	81000017 	ldw	r4,0(r16)
   11128:	10000115 	stw	zero,4(r2)
   1112c:	02000044 	movi	r8,1
   11130:	22405217 	ldw	r9,328(r4)
   11134:	0007883a 	mov	r3,zero
   11138:	12400015 	stw	r9,0(r2)
   1113c:	20805215 	stw	r2,328(r4)
   11140:	10006215 	stw	zero,392(r2)
   11144:	10006315 	stw	zero,396(r2)
   11148:	883fde26 	beq	r17,zero,110c4 <__alt_data_end+0xff0110c4>
   1114c:	18c9883a 	add	r4,r3,r3
   11150:	2109883a 	add	r4,r4,r4
   11154:	1109883a 	add	r4,r2,r4
   11158:	21802215 	stw	r6,136(r4)
   1115c:	01800044 	movi	r6,1
   11160:	12406217 	ldw	r9,392(r2)
   11164:	30cc983a 	sll	r6,r6,r3
   11168:	4992b03a 	or	r9,r9,r6
   1116c:	12406215 	stw	r9,392(r2)
   11170:	21c04215 	stw	r7,264(r4)
   11174:	01000084 	movi	r4,2
   11178:	893fd21e 	bne	r17,r4,110c4 <__alt_data_end+0xff0110c4>
   1117c:	11006317 	ldw	r4,396(r2)
   11180:	218cb03a 	or	r6,r4,r6
   11184:	11806315 	stw	r6,396(r2)
   11188:	003fce06 	br	110c4 <__alt_data_end+0xff0110c4>
   1118c:	18805304 	addi	r2,r3,332
   11190:	18805215 	stw	r2,328(r3)
   11194:	003fc606 	br	110b0 <__alt_data_end+0xff0110b0>
   11198:	00bfffc4 	movi	r2,-1
   1119c:	003fd006 	br	110e0 <__alt_data_end+0xff0110e0>

000111a0 <__call_exitprocs>:
   111a0:	defff504 	addi	sp,sp,-44
   111a4:	df000915 	stw	fp,36(sp)
   111a8:	dd400615 	stw	r21,24(sp)
   111ac:	dc800315 	stw	r18,12(sp)
   111b0:	dfc00a15 	stw	ra,40(sp)
   111b4:	ddc00815 	stw	r23,32(sp)
   111b8:	dd800715 	stw	r22,28(sp)
   111bc:	dd000515 	stw	r20,20(sp)
   111c0:	dcc00415 	stw	r19,16(sp)
   111c4:	dc400215 	stw	r17,8(sp)
   111c8:	dc000115 	stw	r16,4(sp)
   111cc:	d9000015 	stw	r4,0(sp)
   111d0:	2839883a 	mov	fp,r5
   111d4:	04800044 	movi	r18,1
   111d8:	057fffc4 	movi	r21,-1
   111dc:	00800074 	movhi	r2,1
   111e0:	108d6a04 	addi	r2,r2,13736
   111e4:	12000017 	ldw	r8,0(r2)
   111e8:	45005217 	ldw	r20,328(r8)
   111ec:	44c05204 	addi	r19,r8,328
   111f0:	a0001c26 	beq	r20,zero,11264 <__call_exitprocs+0xc4>
   111f4:	a0800117 	ldw	r2,4(r20)
   111f8:	15ffffc4 	addi	r23,r2,-1
   111fc:	b8000d16 	blt	r23,zero,11234 <__call_exitprocs+0x94>
   11200:	14000044 	addi	r16,r2,1
   11204:	8421883a 	add	r16,r16,r16
   11208:	8421883a 	add	r16,r16,r16
   1120c:	84402004 	addi	r17,r16,128
   11210:	a463883a 	add	r17,r20,r17
   11214:	a421883a 	add	r16,r20,r16
   11218:	e0001e26 	beq	fp,zero,11294 <__call_exitprocs+0xf4>
   1121c:	80804017 	ldw	r2,256(r16)
   11220:	e0801c26 	beq	fp,r2,11294 <__call_exitprocs+0xf4>
   11224:	bdffffc4 	addi	r23,r23,-1
   11228:	843fff04 	addi	r16,r16,-4
   1122c:	8c7fff04 	addi	r17,r17,-4
   11230:	bd7ff91e 	bne	r23,r21,11218 <__alt_data_end+0xff011218>
   11234:	00800034 	movhi	r2,0
   11238:	10877304 	addi	r2,r2,7628
   1123c:	10000926 	beq	r2,zero,11264 <__call_exitprocs+0xc4>
   11240:	a0800117 	ldw	r2,4(r20)
   11244:	1000301e 	bne	r2,zero,11308 <__call_exitprocs+0x168>
   11248:	a0800017 	ldw	r2,0(r20)
   1124c:	10003226 	beq	r2,zero,11318 <__call_exitprocs+0x178>
   11250:	a009883a 	mov	r4,r20
   11254:	98800015 	stw	r2,0(r19)
   11258:	0001dcc0 	call	1dcc <free>
   1125c:	9d000017 	ldw	r20,0(r19)
   11260:	a03fe41e 	bne	r20,zero,111f4 <__alt_data_end+0xff0111f4>
   11264:	dfc00a17 	ldw	ra,40(sp)
   11268:	df000917 	ldw	fp,36(sp)
   1126c:	ddc00817 	ldw	r23,32(sp)
   11270:	dd800717 	ldw	r22,28(sp)
   11274:	dd400617 	ldw	r21,24(sp)
   11278:	dd000517 	ldw	r20,20(sp)
   1127c:	dcc00417 	ldw	r19,16(sp)
   11280:	dc800317 	ldw	r18,12(sp)
   11284:	dc400217 	ldw	r17,8(sp)
   11288:	dc000117 	ldw	r16,4(sp)
   1128c:	dec00b04 	addi	sp,sp,44
   11290:	f800283a 	ret
   11294:	a0800117 	ldw	r2,4(r20)
   11298:	80c00017 	ldw	r3,0(r16)
   1129c:	10bfffc4 	addi	r2,r2,-1
   112a0:	15c01426 	beq	r2,r23,112f4 <__call_exitprocs+0x154>
   112a4:	80000015 	stw	zero,0(r16)
   112a8:	183fde26 	beq	r3,zero,11224 <__alt_data_end+0xff011224>
   112ac:	95c8983a 	sll	r4,r18,r23
   112b0:	a0806217 	ldw	r2,392(r20)
   112b4:	a5800117 	ldw	r22,4(r20)
   112b8:	2084703a 	and	r2,r4,r2
   112bc:	10000b26 	beq	r2,zero,112ec <__call_exitprocs+0x14c>
   112c0:	a0806317 	ldw	r2,396(r20)
   112c4:	2088703a 	and	r4,r4,r2
   112c8:	20000c1e 	bne	r4,zero,112fc <__call_exitprocs+0x15c>
   112cc:	89400017 	ldw	r5,0(r17)
   112d0:	d9000017 	ldw	r4,0(sp)
   112d4:	183ee83a 	callr	r3
   112d8:	a0800117 	ldw	r2,4(r20)
   112dc:	15bfbf1e 	bne	r2,r22,111dc <__alt_data_end+0xff0111dc>
   112e0:	98800017 	ldw	r2,0(r19)
   112e4:	153fcf26 	beq	r2,r20,11224 <__alt_data_end+0xff011224>
   112e8:	003fbc06 	br	111dc <__alt_data_end+0xff0111dc>
   112ec:	183ee83a 	callr	r3
   112f0:	003ff906 	br	112d8 <__alt_data_end+0xff0112d8>
   112f4:	a5c00115 	stw	r23,4(r20)
   112f8:	003feb06 	br	112a8 <__alt_data_end+0xff0112a8>
   112fc:	89000017 	ldw	r4,0(r17)
   11300:	183ee83a 	callr	r3
   11304:	003ff406 	br	112d8 <__alt_data_end+0xff0112d8>
   11308:	a0800017 	ldw	r2,0(r20)
   1130c:	a027883a 	mov	r19,r20
   11310:	1029883a 	mov	r20,r2
   11314:	003fb606 	br	111f0 <__alt_data_end+0xff0111f0>
   11318:	0005883a 	mov	r2,zero
   1131c:	003ffb06 	br	1130c <__alt_data_end+0xff01130c>

00011320 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11320:	defffd04 	addi	sp,sp,-12
   11324:	df000215 	stw	fp,8(sp)
   11328:	df000204 	addi	fp,sp,8
   1132c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11330:	0001883a 	nop
   11334:	e0bfff17 	ldw	r2,-4(fp)
   11338:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1133c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11340:	10000226 	beq	r2,zero,1134c <_exit+0x2c>
    ALT_SIM_FAIL();
   11344:	002af070 	cmpltui	zero,zero,43969
   11348:	00000106 	br	11350 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1134c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11350:	003fff06 	br	11350 <__alt_data_end+0xff011350>
