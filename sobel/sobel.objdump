
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000108f0 memsz 0x000108f0 flags r-x
    LOAD off    0x00011910 vaddr 0x00010910 paddr 0x00012404 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013ef8 vaddr 0x00013ef8 paddr 0x00013ef8 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fffc  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000788  00010188  00010188  00011188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00010910  00012404  00011910  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00013ef8  00013ef8  00013ef8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014088  00014088  00013404  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013404  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d8  00000000  00000000  00013428  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002893f  00000000  00000000  00014500  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a7df  00000000  00000000  0003ce3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cd01  00000000  00000000  0004761e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022a8  00000000  00000000  00054320  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ea7  00000000  00000000  000565c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c283  00000000  00000000  0005a46f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000766f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c38  00000000  00000000  00076758  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007bdd2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007bdd5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007bde1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007bde2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007bde3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007bde7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007bdeb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007bdef  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007bdf8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007be01  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007be0a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0007be15  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007be63  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00072641  00000000  00000000  0008193b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
00010188 l    d  .rodata	00000000 .rodata
00010910 l    d  .rwdata	00000000 .rwdata
00013ef8 l    d  .bss	00000000 .bss
00014088 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001066e l     O .rodata	00000010 zeroes.4404
00004908 l     F .text	000000bc __sbprintf
0001067e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004b18 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006648 l     F .text	00000008 __fp_unlock
0000665c l     F .text	0000019c __sinit.part.1
000067f8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010d18 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001115c l     O .rwdata	00000020 lc_ctype_charset
0001113c l     O .rwdata	00000020 lc_message_charset
0001117c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000106b0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009394 l     F .text	000000fc __sprint_r.part.0
000107e4 l     O .rodata	00000010 blanks.4348
000107d4 l     O .rodata	00000010 zeroes.4349
0000a920 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e698 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000123f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001135c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ec80 l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000eccc l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f200 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013f5c g     O .bss	00000004 alt_instruction_exception_handler
00008a2c g     F .text	00000074 _mprec_log10
00008b18 g     F .text	0000008c __any_on
0000aebc g     F .text	00000054 _isatty_r
000106bc g     O .rodata	00000028 __mprec_tinytens
0000e8e4 g     F .text	00000060 alt_main
00002534 g     F .text	000000c0 _puts_r
00013f88 g     O .bss	00000100 alt_irq
0000af10 g     F .text	00000060 _lseek_r
00010613 g     O .rodata	00000009 gy_array
00012404 g       *ABS*	00000000 __flash_rwdata_start
0000d108 g     F .text	00000088 .hidden __eqdf2
00014088 g       *ABS*	00000000 __alt_heap_start
000024f8 g     F .text	0000003c printf
0000b128 g     F .text	0000009c _wcrtomb_r
00009254 g     F .text	0000005c __sseek
00006998 g     F .text	00000010 __sinit
0000afd0 g     F .text	00000140 __swbuf_r
00007460 g     F .text	0000007c _setlocale_r
00006800 g     F .text	00000068 __sfmoreglue
0000e948 g     F .text	00000004 __malloc_unlock
0000091c g     F .text	00000014 LCD_Write_Command
00013f08 g     O .bss	00000004 sobel_width
00013f48 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007924 g     F .text	0000015c memmove
00000930 g     F .text	00000014 LCD_Write_Data
00006980 g     F .text	00000018 _cleanup
00007ba8 g     F .text	000000a8 _Balloc
0000d190 g     F .text	000000dc .hidden __gtdf2
0000fa24 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004f0 g     F .text	00000024 cam_get_xsize
0000ae60 g     F .text	0000005c _fstat_r
00013f2c g     O .bss	00000004 errno
000091d0 g     F .text	00000008 __seofread
00013f40 g     O .bss	00000004 alt_argv
0001a3bc g       *ABS*	00000000 _gp
0000eaf0 g     F .text	00000004 usleep
0000ea94 g     F .text	0000005c alt_uncached_malloc
000005b0 g     F .text	00000074 cam_set_image_pointer
000111b4 g     O .rwdata	00000180 alt_fd_list
00001c74 g     F .text	00000010 vga_set_pointer
0000fa2c g     F .text	00000078 alt_find_dev
000077dc g     F .text	00000148 memcpy
00006650 g     F .text	0000000c _cleanup_r
0000e3f4 g     F .text	000000dc .hidden __floatsidf
0000f680 g     F .text	00000104 alt_io_redirect
0000d26c g     F .text	000000f4 .hidden __ltdf2
00010188 g       *ABS*	00000000 __DTOR_END__
000025f4 g     F .text	00000014 puts
0000fbf0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00009108 g     F .text	00000074 __fpclassifyd
00008988 g     F .text	000000a4 __ratio
0000a904 g     F .text	0000001c __vfiprintf_internal
0000ef0c g     F .text	00000154 altera_avalon_jtag_uart_read
00001c94 g     F .text	00000014 malloc
000024c8 g     F .text	00000030 _printf_r
00000770 g     F .text	00000008 get_grayscale_picture
0000beb8 g     F .text	00000064 .hidden __udivsi3
000101e8 g     O .rodata	00000128 lens_roll_off_tbl
000001d8 g     F .text	00000318 init_camera
0000e718 g     F .text	00000084 isatty
0001070c g     O .rodata	000000c8 __mprec_tens
000074dc g     F .text	0000000c __locale_charset
0000fba0 g     F .text	00000050 alt_icache_flush
00013f28 g     O .bss	00000004 __malloc_top_pad
000123d4 g     O .rwdata	00000004 __mb_cur_max
0000750c g     F .text	0000000c _localeconv_r
0000147c g     F .text	00000140 sobel_x
00007fb4 g     F .text	0000003c __i2b
00006e1c g     F .text	000004bc __sfvwrite_r
00000944 g     F .text	00000414 init_LCD
00002608 g     F .text	00000054 _sbrk_r
000123bc g     O .rwdata	00000004 pgy_array
00000538 g     F .text	00000078 cam_get_profiling
0000af70 g     F .text	00000060 _read_r
0000f3f4 g     F .text	00000040 alt_dcache_flush
00013f0c g     O .bss	00000004 sobel_result
000123dc g     O .rwdata	00000004 alt_max_fd
0000ab54 g     F .text	000000f0 _fclose_r
00006618 g     F .text	00000030 fflush
00013f24 g     O .bss	00000004 __malloc_max_sbrked_mem
00013f00 g     O .bss	00000004 grayscale_array
0000bf74 g     F .text	000008ac .hidden __adddf3
00000514 g     F .text	00000024 cam_get_ysize
00008730 g     F .text	0000010c __b2d
0000b888 g     F .text	00000538 .hidden __umoddi3
0000e868 g     F .text	0000007c lseek
00000838 g     F .text	0000008c i2c_short_read
000123cc g     O .rwdata	00000004 _global_impure_ptr
00008ba4 g     F .text	00000564 _realloc_r
00014088 g       *ABS*	00000000 __bss_end
0000f618 g     F .text	00000068 alt_iic_isr_register
0000f930 g     F .text	000000f4 alt_tick
0000b310 g     F .text	00000578 .hidden __udivdi3
0000adbc g     F .text	00000024 _fputwc_r
000106e4 g     O .rodata	00000028 __mprec_bigtens
00007d98 g     F .text	00000104 __s2b
0000e4d0 g     F .text	000000a8 .hidden __floatunsidf
00008470 g     F .text	00000060 __mcmp
000069b8 g     F .text	00000018 __fp_lock_all
0000f600 g     F .text	00000018 alt_ic_irq_enabled
00013ef8 g     O .bss	00000004 grayscape_height
0000f8fc g     F .text	00000034 alt_alarm_stop
00013f50 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
00011334 g     O .rwdata	00000028 alt_dev_null
00000de4 g     F .text	00000078 transfer_LCD_with_dma
00001a54 g     F .text	00000210 sobel_complete
0000f434 g     F .text	00000018 alt_dcache_flush_all
00007e9c g     F .text	00000068 __hi0bits
0000e374 g     F .text	00000080 .hidden __fixdfsi
00012404 g       *ABS*	00000000 __ram_rwdata_end
000123e0 g     O .rwdata	00000008 alt_dev_list
0000eaf4 g     F .text	000000c4 write
0000f2f4 g     F .text	00000008 alt_timestamp_freq
00010910 g       *ABS*	00000000 __ram_rodata_end
0000e6a0 g     F .text	00000078 fstat
0000d26c g     F .text	000000f4 .hidden __ledf2
000081e8 g     F .text	00000140 __pow5mult
000094a8 g     F .text	0000145c ___vfiprintf_internal_r
00013f38 g     O .bss	00000004 __nlocale_changed
0000bf1c g     F .text	00000058 .hidden __umodsi3
00001c64 g     F .text	00000008 GetSobel_rgb
00014088 g       *ABS*	00000000 end
00001c6c g     F .text	00000008 GetSobelResult
00000648 g     F .text	00000020 take_picture_blocking
000006a8 g     F .text	00000014 DIPSW_get_value
00001850 g     F .text	00000168 sobel_y_with_rgb
0000edd4 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000638 g     F .text	00000010 current_image_pointer
00010188 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f23c g     F .text	00000048 alt_avalon_timer_sc_init
0000e578 g     F .text	00000064 .hidden __clzsi2
0000f060 g     F .text	000001a0 altera_avalon_jtag_uart_write
000069a8 g     F .text	00000004 __sfp_lock_acquire
000076f8 g     F .text	000000e4 memchr
000026f4 g     F .text	000021f8 ___vfprintf_internal_r
00006b0c g     F .text	00000310 _free_r
000074e8 g     F .text	00000010 __locale_mb_cur_max
00001738 g     F .text	00000118 sobel_y
00010310 g     O .rodata	00000140 noise_reduction_reg_settings_array
0000fff4 g     F .text	00000180 __call_exitprocs
00013f34 g     O .bss	00000004 __mlocale_changed
000123c4 g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000004c _start
00013f58 g     O .bss	00000004 _alt_tick_rate
00008328 g     F .text	00000148 __lshift
00013f54 g     O .bss	00000004 _alt_nticks
0000e94c g     F .text	000000c8 read
0000ebd8 g     F .text	0000006c alt_sys_init
000015bc g     F .text	0000017c sobel_x_with_rgb
0000fedc g     F .text	00000118 __register_exitproc
00007ff0 g     F .text	000001f8 __multiply
0000ee4c g     F .text	0000004c altera_avalon_jtag_uart_close
00010910 g       *ABS*	00000000 __ram_rwdata_start
00010188 g       *ABS*	00000000 __ram_rodata_start
00013f60 g     O .bss	00000028 __malloc_current_mallinfo
0000883c g     F .text	0000014c __d2b
00013f10 g     O .bss	00000004 sobel_height
00000668 g     F .text	00000014 enable_continues_mode
0000ec44 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
000012dc g     F .text	000000e4 init_sobel_arrays
0000fb50 g     F .text	00000050 alt_get_fd
0000f37c g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000aa3c g     F .text	00000054 _close_r
0000fe60 g     F .text	0000007c memcmp
0000ec64 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00014088 g       *ABS*	00000000 __alt_stack_base
0000ec74 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
000049c4 g     F .text	00000154 __swsetup_r
0000c820 g     F .text	000008e8 .hidden __divdf3
00006868 g     F .text	00000118 __sfp
00008aa0 g     F .text	00000078 __copybits
00010910 g     O .rwdata	00000408 __malloc_av_
000069b4 g     F .text	00000004 __sinit_lock_release
0000d360 g     F .text	00000718 .hidden __muldf3
0000917c g     F .text	00000054 __sread
0000faa4 g     F .text	000000ac alt_find_file
0000f44c g     F .text	0000006c alt_dev_llist_insert
0000e944 g     F .text	00000004 __malloc_lock
0000ea38 g     F .text	0000004c sbrk
000065bc g     F .text	0000005c _fflush_r
0000aa90 g     F .text	000000c4 _calloc_r
00013ef8 g       *ABS*	00000000 __bss_start
00007a80 g     F .text	00000128 memset
00000e5c g     F .text	00000480 main
00013f3c g     O .bss	00000004 alt_envp
00013f20 g     O .bss	00000004 __malloc_max_total_mem
00000760 g     F .text	00000008 get_grayscale_width
0000ec54 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b110 g     F .text	00000018 __swbuf
00013f14 g     O .bss	00000004 sobel_x_result
000092b0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ac44 g     F .text	00000014 fclose
0000f284 g     F .text	0000003c alt_timestamp_start
00004d18 g     F .text	00001688 _dtoa_r
00001cbc g     F .text	0000080c _malloc_r
0000b284 g     F .text	00000030 __ascii_wctomb
000123f0 g     O .rwdata	00000004 alt_errno
000072d8 g     F .text	000000c4 _fwalk
0000bdc0 g     F .text	00000084 .hidden __divsi3
000069e8 g     F .text	00000124 _malloc_trim_r
00010188 g       *ABS*	00000000 __CTOR_END__
00013efc g     O .bss	00000004 grayscale_width
000092b8 g     F .text	000000dc strcmp
00000d58 g     F .text	0000008c transfer_LCD_no_dma
00010188 g       *ABS*	00000000 __flash_rodata_start
00010188 g       *ABS*	00000000 __DTOR_LIST__
0000d108 g     F .text	00000088 .hidden __nedf2
00010450 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ebb8 g     F .text	00000020 alt_irq_init
0000ea14 g     F .text	00000024 alt_release_fd
00000790 g     F .text	000000a8 i2c_auto_detect
0000fcb0 g     F .text	00000018 memalign
000107f4 g     O .rodata	00000100 .hidden __clz_tab
00000624 g     F .text	00000014 current_image_valid
00013f30 g     O .bss	00000004 _PathLocale
00000778 g     F .text	00000018 i2c_busy_wait
0000fc64 g     F .text	00000014 atexit
0000a9dc g     F .text	00000060 _write_r
00007518 g     F .text	00000018 setlocale
000123d0 g     O .rwdata	00000004 _impure_ptr
00013f44 g     O .bss	00000004 alt_argc
000063a0 g     F .text	0000021c __sflush_r
00013f4c g     O .bss	00000004 altera_avalon_timer_ts_base
0000f51c g     F .text	00000064 _do_dtors
00007504 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000086cc g     F .text	00000064 __ulp
000069d0 g     F .text	00000018 __fp_unlock_all
000123e8 g     O .rwdata	00000008 alt_fs_list
00013f18 g     O .bss	00000004 sobel_y_result
000008c4 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013f04 g     O .bss	00000002 LCD_height
00007530 g     F .text	0000000c localeconv
0000f2c0 g     F .text	00000034 alt_timestamp
00001c84 g     F .text	00000010 vga_set_swap
0000f58c g     F .text	00000004 alt_ic_isr_register
000019b8 g     F .text	0000009c sobel_threshold
00012404 g       *ABS*	00000000 _edata
000123c0 g     O .rwdata	00000004 pgx_array
00014088 g       *ABS*	00000000 _end
0000ac58 g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000ee98 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0001061c g     O .rodata	00000009 gx_array
0000f5c8 g     F .text	00000038 alt_ic_irq_disable
000091d8 g     F .text	0000007c __swrite
000123c8 g     O .rwdata	00000004 __malloc_trim_threshold
00013f06 g     O .bss	00000002 LCD_width
000006bc g     F .text	000000a4 conv_grayscale
000074f8 g     F .text	0000000c __locale_msgcharset
0000fc78 g     F .text	00000038 exit
0000739c g     F .text	000000c4 _fwalk_reent
000084d0 g     F .text	000001fc __mdiff
0000be44 g     F .text	00000074 .hidden __modsi3
0000fcc8 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000069ac g     F .text	00000004 __sfp_lock_release
00000768 g     F .text	00000008 get_grayscale_height
00010174 g     F .text	00000014 _exit
000013c0 g     F .text	000000bc sobel_mac
0000f2fc g     F .text	00000080 alt_alarm_start
0000753c g     F .text	000001bc __smakebuf_r
00013f1c g     O .bss	00000004 sobel_rgb565
0000265c g     F .text	00000098 strlen
0000f784 g     F .text	00000178 open
0000d190 g     F .text	000000dc .hidden __gedf2
0000ea84 g     F .text	00000010 alt_uncached_free
000123d8 g     O .rwdata	00000004 __wctomb
00009490 g     F .text	00000018 __sprint_r
0000f580 g     F .text	0000000c alt_icache_flush_all
000123f8 g     O .rwdata	00000004 alt_priority_mask
0000f590 g     F .text	00000038 alt_ic_irq_enable
000048ec g     F .text	0000001c __vfprintf_internal
0000b2b4 g     F .text	0000005c _wctomb_r
0000da78 g     F .text	000008fc .hidden __subdf3
00007f04 g     F .text	000000b0 __lo0bits
000123fc g     O .rwdata	00000008 alt_alarm_list
0000f4b8 g     F .text	00000064 _do_ctors
0000b1c4 g     F .text	000000c0 wcrtomb
0000e5dc g     F .text	000000bc close
0000e79c g     F .text	000000cc alt_load
0000ade0 g     F .text	00000080 fputwc
00001ca8 g     F .text	00000014 free
000069b0 g     F .text	00000004 __sinit_lock_acquire
00007c78 g     F .text	00000120 __multadd
00007c50 g     F .text	00000028 _Bfree
0000067c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	840fe204 	addi	r16,r16,16264
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a6e817 	ldw	r2,-25696(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     18c:	00a00014 	movui	r2,32768
#endif

0:
    initd 0(r2)
     190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     198:	00bffd16 	blt	zero,r2,190 <__alt_data_end+0xff000190>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     19c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1a4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a8:	d6a8ef14 	ori	gp,gp,41916
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1ac:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1b0:	108fbe14 	ori	r2,r2,16120

    movhi r3, %hi(__bss_end)
     1b4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b8:	18d02214 	ori	r3,r3,16520

    beq r2, r3, 1f
     1bc:	10c00326 	beq	r2,r3,1cc <_start+0x40>

0:
    stw zero, (r2)
     1c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c8:	10fffd36 	bltu	r2,r3,1c0 <__alt_data_end+0xff0001c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1cc:	000e79c0 	call	e79c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1d0:	000e8e40 	call	e8e4 <alt_main>

000001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1d4:	003fff06 	br	1d4 <__alt_data_end+0xff0001d4>

000001d8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1d8:	00804034 	movhi	r2,256
     1dc:	10842744 	addi	r2,r2,4253
     1e0:	00c00084 	movi	r3,2
     1e4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1e8:	00804034 	movhi	r2,256
     1ec:	10841304 	addi	r2,r2,4172
     1f0:	00c00044 	movi	r3,1
     1f4:	10c00025 	stbio	r3,0(r2)
     1f8:	008003f4 	movhi	r2,15
     1fc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     200:	0001883a 	nop
     204:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     208:	103ffd1e 	bne	r2,zero,200 <__alt_data_end+0xff000200>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     20c:	00804034 	movhi	r2,256
     210:	10841304 	addi	r2,r2,4172
     214:	10000025 	stbio	zero,0(r2)
     218:	008003f4 	movhi	r2,15
     21c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     220:	0001883a 	nop
     224:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     228:	103ffd1e 	bne	r2,zero,220 <__alt_data_end+0xff000220>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     230:	01800044 	movi	r6,1
     234:	014ce184 	movi	r5,13190
     238:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     23c:	dfc00315 	stw	ra,12(sp)
     240:	dc800215 	stw	r18,8(sp)
     244:	dc400115 	stw	r17,4(sp)
     248:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     24c:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     250:	000d883a 	mov	r6,zero
     254:	014ce184 	movi	r5,13190
     258:	01001e04 	movi	r4,120
     25c:	00008c40 	call	8c4 <i2c_short_write>
     260:	008003f4 	movhi	r2,15
     264:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     268:	0001883a 	nop
     26c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     270:	103ffd1e 	bne	r2,zero,268 <__alt_data_end+0xff000268>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     274:	01803104 	movi	r6,196
     278:	014c0684 	movi	r5,12314
     27c:	01001e04 	movi	r4,120
     280:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     284:	01800204 	movi	r6,8
     288:	014c8084 	movi	r5,12802
     28c:	01001e04 	movi	r4,120
     290:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     294:	0180c744 	movi	r6,797
     298:	014cfd04 	movi	r5,13300
     29c:	01001e04 	movi	r4,120
     2a0:	00008c40 	call	8c4 <i2c_short_write>
     2a4:	008000b4 	movhi	r2,2
     2a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2ac:	0001883a 	nop
     2b0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2b4:	103ffd1e 	bne	r2,zero,2ac <__alt_data_end+0xff0002ac>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2b8:	01a3c254 	movui	r6,36617
     2bc:	014d0784 	movi	r5,13342
     2c0:	01001e04 	movi	r4,120
     2c4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2c8:	01805404 	movi	r6,336
     2cc:	014d0704 	movi	r5,13340
     2d0:	01001e04 	movi	r4,120
     2d4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2d8:	01a3c254 	movui	r6,36617
     2dc:	014d0784 	movi	r5,13342
     2e0:	01001e04 	movi	r4,120
     2e4:	00008c40 	call	8c4 <i2c_short_write>
     2e8:	008000b4 	movhi	r2,2
     2ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2f0:	0001883a 	nop
     2f4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2f8:	103ffd1e 	bne	r2,zero,2f0 <__alt_data_end+0xff0002f0>
     2fc:	04000074 	movhi	r16,1
     300:	84011404 	addi	r16,r16,1104
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     304:	01a3c214 	movui	r6,36616
     308:	014d0784 	movi	r5,13342
     30c:	01001e04 	movi	r4,120
     310:	00008c40 	call	8c4 <i2c_short_write>
     314:	84400084 	addi	r17,r16,2
     318:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     31c:	8980000b 	ldhu	r6,0(r17)
     320:	8140000b 	ldhu	r5,0(r16)
     324:	01001e04 	movi	r4,120
     328:	84000104 	addi	r16,r16,4
     32c:	00008c40 	call	8c4 <i2c_short_write>
     330:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     334:	84bff91e 	bne	r16,r18,31c <__alt_data_end+0xff00031c>
     338:	04000074 	movhi	r16,1
     33c:	8400c404 	addi	r16,r16,784
     340:	84400084 	addi	r17,r16,2
     344:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     348:	8980000b 	ldhu	r6,0(r17)
     34c:	8140000b 	ldhu	r5,0(r16)
     350:	01001e04 	movi	r4,120
     354:	84000104 	addi	r16,r16,4
     358:	00008c40 	call	8c4 <i2c_short_write>
     35c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     360:	943ff91e 	bne	r18,r16,348 <__alt_data_end+0xff000348>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     364:	018164c4 	movi	r6,1427
     368:	014d6904 	movi	r5,13732
     36c:	01001e04 	movi	r4,120
     370:	00008c40 	call	8c4 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     374:	0189e644 	movi	r6,10137
     378:	014ce304 	movi	r5,13196
     37c:	01001e04 	movi	r4,120
     380:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     384:	01991004 	movi	r6,25664
     388:	014ce404 	movi	r5,13200
     38c:	01001e04 	movi	r4,120
     390:	00008c40 	call	8c4 <i2c_short_write>
     394:	008000b4 	movhi	r2,2
     398:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     39c:	0001883a 	nop
     3a0:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3a4:	103ffd1e 	bne	r2,zero,39c <__alt_data_end+0xff00039c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     3a8:	0189e6c4 	movi	r6,10139
     3ac:	014ce304 	movi	r5,13196
     3b0:	01001e04 	movi	r4,120
     3b4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3b8:	01991004 	movi	r6,25664
     3bc:	014ce404 	movi	r5,13200
     3c0:	01001e04 	movi	r4,120
     3c4:	00008c40 	call	8c4 <i2c_short_write>
     3c8:	008000b4 	movhi	r2,2
     3cc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3d0:	0001883a 	nop
     3d4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3d8:	103ffd1e 	bne	r2,zero,3d0 <__alt_data_end+0xff0003d0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3dc:	01a840d4 	movui	r6,41219
     3e0:	014ce304 	movi	r5,13196
     3e4:	01001e04 	movi	r4,120
     3e8:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3ec:	01800144 	movi	r6,5
     3f0:	014ce404 	movi	r5,13200
     3f4:	01001e04 	movi	r4,120
     3f8:	00008c40 	call	8c4 <i2c_short_write>
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     404:	0001883a 	nop
     408:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     40c:	103ffd1e 	bne	r2,zero,404 <__alt_data_end+0xff000404>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     410:	01a840d4 	movui	r6,41219
     414:	014ce304 	movi	r5,13196
     418:	01001e04 	movi	r4,120
     41c:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     420:	01800184 	movi	r6,6
     424:	014ce404 	movi	r5,13200
     428:	01001e04 	movi	r4,120
     42c:	00008c40 	call	8c4 <i2c_short_write>
     430:	008000b4 	movhi	r2,2
     434:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     438:	0001883a 	nop
     43c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     440:	103ffd1e 	bne	r2,zero,438 <__alt_data_end+0xff000438>
     444:	04000074 	movhi	r16,1
     448:	84007a04 	addi	r16,r16,488
     44c:	84400084 	addi	r17,r16,2
     450:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     454:	8980000b 	ldhu	r6,0(r17)
     458:	8140000b 	ldhu	r5,0(r16)
     45c:	01001e04 	movi	r4,120
     460:	84000104 	addi	r16,r16,4
     464:	00008c40 	call	8c4 <i2c_short_write>
     468:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     46c:	943ff91e 	bne	r18,r16,454 <__alt_data_end+0xff000454>
     470:	008003f4 	movhi	r2,15
     474:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     484:	01800804 	movi	r6,32
     488:	014ccb84 	movi	r5,13102
     48c:	01001e04 	movi	r4,120
     490:	00008c40 	call	8c4 <i2c_short_write>
     494:	008003f4 	movhi	r2,15
     498:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     49c:	0001883a 	nop
     4a0:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     4a4:	103ffd1e 	bne	r2,zero,49c <__alt_data_end+0xff00049c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     4a8:	01800884 	movi	r6,34
     4ac:	014d0104 	movi	r5,13316
     4b0:	01001e04 	movi	r4,120
     4b4:	00008c40 	call	8c4 <i2c_short_write>
     4b8:	008003f4 	movhi	r2,15
     4bc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4c0:	0001883a 	nop
     4c4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4c8:	103ffd1e 	bne	r2,zero,4c0 <__alt_data_end+0xff0004c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4cc:	018009c4 	movi	r6,39
     4d0:	014c1004 	movi	r5,12352
     4d4:	01001e04 	movi	r4,120
}
     4d8:	dfc00317 	ldw	ra,12(sp)
     4dc:	dc800217 	ldw	r18,8(sp)
     4e0:	dc400117 	ldw	r17,4(sp)
     4e4:	dc000017 	ldw	r16,0(sp)
     4e8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4ec:	00008c41 	jmpi	8c4 <i2c_short_write>

000004f0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4f0:	00c04034 	movhi	r3,256
     4f4:	18c41304 	addi	r3,r3,4172
     4f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4fc:	1080010c 	andi	r2,r2,4
     500:	103ffd26 	beq	r2,zero,4f8 <__alt_data_end+0xff0004f8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     504:	00804034 	movhi	r2,256
     508:	10841004 	addi	r2,r2,4160
}
     50c:	1080002b 	ldhuio	r2,0(r2)
     510:	f800283a 	ret

00000514 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     514:	00c04034 	movhi	r3,256
     518:	18c41304 	addi	r3,r3,4172
     51c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     520:	1080010c 	andi	r2,r2,4
     524:	103ffd26 	beq	r2,zero,51c <__alt_data_end+0xff00051c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     528:	00804034 	movhi	r2,256
     52c:	10841104 	addi	r2,r2,4164
}
     530:	1080002b 	ldhuio	r2,0(r2)
     534:	f800283a 	ret

00000538 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     538:	00c04034 	movhi	r3,256
     53c:	18c41304 	addi	r3,r3,4172
     540:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     544:	1080010c 	andi	r2,r2,4
     548:	103ffd26 	beq	r2,zero,540 <__alt_data_end+0xff000540>
	printf("Nr. of bytes each line    : %d\n",
     54c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     550:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     554:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     558:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     55c:	1140002b 	ldhuio	r5,0(r2)
     560:	01000074 	movhi	r4,1
     564:	21006204 	addi	r4,r4,392
     568:	297fffcc 	andi	r5,r5,65535
     56c:	00024f80 	call	24f8 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     570:	00804034 	movhi	r2,256
     574:	10841104 	addi	r2,r2,4164
     578:	1140002b 	ldhuio	r5,0(r2)
     57c:	01000074 	movhi	r4,1
     580:	21006a04 	addi	r4,r4,424
     584:	297fffcc 	andi	r5,r5,65535
     588:	00024f80 	call	24f8 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     58c:	00804034 	movhi	r2,256
     590:	10841204 	addi	r2,r2,4168
     594:	1140002b 	ldhuio	r5,0(r2)
     598:	01000074 	movhi	r4,1
     59c:	21007204 	addi	r4,r4,456
     5a0:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     5a4:	dfc00017 	ldw	ra,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     5ac:	00024f81 	jmpi	24f8 <printf>

000005b0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5b0:	21003fcc 	andi	r4,r4,255
     5b4:	2100201c 	xori	r4,r4,128
     5b8:	213fe004 	addi	r4,r4,-128
     5bc:	00800044 	movi	r2,1
     5c0:	20801226 	beq	r4,r2,60c <cam_set_image_pointer+0x5c>
     5c4:	11000c0e 	bge	r2,r4,5f8 <cam_set_image_pointer+0x48>
     5c8:	00800084 	movi	r2,2
     5cc:	20800626 	beq	r4,r2,5e8 <cam_set_image_pointer+0x38>
     5d0:	008000c4 	movi	r2,3
     5d4:	2080111e 	bne	r4,r2,61c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841704 	addi	r2,r2,4188
     5e0:	11400035 	stwio	r5,0(r2)
     5e4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5e8:	00804034 	movhi	r2,256
     5ec:	10841604 	addi	r2,r2,4184
     5f0:	11400035 	stwio	r5,0(r2)
                break;
     5f4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5f8:	2000091e 	bne	r4,zero,620 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841404 	addi	r2,r2,4176
     604:	11400035 	stwio	r5,0(r2)
	            break;
     608:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     60c:	00804034 	movhi	r2,256
     610:	10841504 	addi	r2,r2,4180
     614:	11400035 	stwio	r5,0(r2)
                break;
     618:	f800283a 	ret
     61c:	f800283a 	ret
     620:	f800283a 	ret

00000624 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     624:	00804034 	movhi	r2,256
     628:	10841304 	addi	r2,r2,4172
     62c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     630:	1080800c 	andi	r2,r2,512
     634:	f800283a 	ret

00000638 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     638:	00804034 	movhi	r2,256
     63c:	10841404 	addi	r2,r2,4176
}
     640:	10800037 	ldwio	r2,0(r2)
     644:	f800283a 	ret

00000648 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     648:	00c04034 	movhi	r3,256
     64c:	18c41304 	addi	r3,r3,4172
     650:	00800204 	movi	r2,8
     654:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     658:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     65c:	1080020c 	andi	r2,r2,8
     660:	103ffd1e 	bne	r2,zero,658 <__alt_data_end+0xff000658>
}
     664:	f800283a 	ret

00000668 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     668:	00804034 	movhi	r2,256
     66c:	10841304 	addi	r2,r2,4172
     670:	00c00404 	movi	r3,16
     674:	10c0002d 	sthio	r3,0(r2)
     678:	f800283a 	ret

0000067c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     67c:	00c04034 	movhi	r3,256
     680:	18c41304 	addi	r3,r3,4172
     684:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     688:	1080200c 	andi	r2,r2,128
     68c:	1000021e 	bne	r2,zero,698 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     690:	0005883a 	mov	r2,zero
}
     694:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     698:	00804004 	movi	r2,256
     69c:	1880002d 	sthio	r2,0(r3)
		return 1;
     6a0:	00800044 	movi	r2,1
     6a4:	f800283a 	ret

000006a8 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     6a8:	00804034 	movhi	r2,256
     6ac:	10842804 	addi	r2,r2,4256
     6b0:	10800023 	ldbuio	r2,0(r2)
}
     6b4:	0084303a 	nor	r2,zero,r2
     6b8:	f800283a 	ret

000006bc <conv_grayscale>:
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6bc:	d0a6d117 	ldw	r2,-25788(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6c0:	defffd04 	addi	sp,sp,-12
     6c4:	dc400115 	stw	r17,4(sp)
     6c8:	dc000015 	stw	r16,0(sp)
     6cc:	dfc00215 	stw	ra,8(sp)
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
     6d0:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     6d4:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6d8:	2021883a 	mov	r16,r4
  int k,gray;
  int kmax = width*height;
     6dc:	29a3383a 	mul	r17,r5,r6
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6e0:	10000226 	beq	r2,zero,6ec <conv_grayscale+0x30>
    free(grayscale_array);
     6e4:	1009883a 	mov	r4,r2
     6e8:	0001ca80 	call	1ca8 <free>
  grayscale_array = (unsigned char *) malloc(kmax);
     6ec:	8809883a 	mov	r4,r17
     6f0:	0001c940 	call	1c94 <malloc>
     6f4:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k<kmax; k++)
     6f8:	0440140e 	bge	zero,r17,74c <conv_grayscale+0x90>
     6fc:	8009883a 	mov	r4,r16
     700:	0013883a 	mov	r9,zero
     704:	00000106 	br	70c <conv_grayscale+0x50>
     708:	d0a6d117 	ldw	r2,-25788(gp)
  {
	  rgb = pixels[k];
     70c:	2200000b 	ldhu	r8,0(r4)
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
     710:	1245883a 	add	r2,r2,r9
     714:	40ffffcc 	andi	r3,r8,65535
     718:	180ed17a 	srli	r7,r3,5
     71c:	1806d2fa 	srli	r3,r3,11
     720:	420007cc 	andi	r8,r8,31
     724:	39c00fcc 	andi	r7,r7,63
     728:	39c00a24 	muli	r7,r7,40
     72c:	18c7883a 	add	r3,r3,r3
     730:	380fd13a 	srai	r7,r7,4
     734:	38c7883a 	add	r3,r7,r3
     738:	1a07883a 	add	r3,r3,r8
     73c:	10c00025 	stbio	r3,0(r2)
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
  for(k = 0; k<kmax; k++)
     740:	4a400044 	addi	r9,r9,1
     744:	21000084 	addi	r4,r4,2
     748:	8a7fef1e 	bne	r17,r9,708 <__alt_data_end+0xff000708>
  {
	  rgb = pixels[k];
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
  }
}
     74c:	dfc00217 	ldw	ra,8(sp)
     750:	dc400117 	ldw	r17,4(sp)
     754:	dc000017 	ldw	r16,0(sp)
     758:	dec00304 	addi	sp,sp,12
     75c:	f800283a 	ret

00000760 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     760:	d0a6d017 	ldw	r2,-25792(gp)
     764:	f800283a 	ret

00000768 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     768:	d0a6cf17 	ldw	r2,-25796(gp)
     76c:	f800283a 	ret

00000770 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     770:	d0a6d117 	ldw	r2,-25788(gp)
     774:	f800283a 	ret

00000778 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     778:	00c04034 	movhi	r3,256
     77c:	18c42704 	addi	r3,r3,4252
     780:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     784:	108000cc 	andi	r2,r2,3
     788:	103ffd1e 	bne	r2,zero,780 <__alt_data_end+0xff000780>
}
     78c:	f800283a 	ret

00000790 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     790:	01004034 	movhi	r4,256
     794:	21042704 	addi	r4,r4,4252
     798:	00c04034 	movhi	r3,256
     79c:	18c42704 	addi	r3,r3,4252
     7a0:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7a4:	108000cc 	andi	r2,r2,3
     7a8:	103ffb1e 	bne	r2,zero,798 <__alt_data_end+0xff000798>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     7ac:	00800104 	movi	r2,4
     7b0:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     7b4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7b8:	108000cc 	andi	r2,r2,3
     7bc:	103ffd1e 	bne	r2,zero,7b4 <__alt_data_end+0xff0007b4>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7c0:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7c4:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7c8:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7cc:	dfc00315 	stw	ra,12(sp)
     7d0:	dc800215 	stw	r18,8(sp)
     7d4:	dc400115 	stw	r17,4(sp)
     7d8:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7dc:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     7e0:	01000074 	movhi	r4,1
     7e4:	21015a04 	addi	r4,r4,1384
     7e8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     7ec:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     7f0:	00024f80 	call	24f8 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     7f4:	04800a0e 	bge	zero,r18,820 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     7f8:	04404034 	movhi	r17,256
     7fc:	8c442404 	addi	r17,r17,4240
     800:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     804:	89800037 	ldwio	r6,0(r17)
     808:	01000074 	movhi	r4,1
     80c:	800b883a 	mov	r5,r16
     810:	21016304 	addi	r4,r4,1420
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     814:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     818:	00024f80 	call	24f8 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     81c:	943ff81e 	bne	r18,r16,800 <__alt_data_end+0xff000800>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     820:	dfc00317 	ldw	ra,12(sp)
     824:	dc800217 	ldw	r18,8(sp)
     828:	dc400117 	ldw	r17,4(sp)
     82c:	dc000017 	ldw	r16,0(sp)
     830:	dec00404 	addi	sp,sp,16
     834:	f800283a 	ret

00000838 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     838:	01804034 	movhi	r6,256
     83c:	31842704 	addi	r6,r6,4252
     840:	00c04034 	movhi	r3,256
     844:	18c42704 	addi	r3,r3,4252
     848:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     84c:	108000cc 	andi	r2,r2,3
     850:	103ffb1e 	bne	r2,zero,840 <__alt_data_end+0xff000840>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     854:	00804034 	movhi	r2,256
     858:	21003fcc 	andi	r4,r4,255
     85c:	10842404 	addi	r2,r2,4240
     860:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     864:	00804034 	movhi	r2,256
     868:	10842504 	addi	r2,r2,4244
     86c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     870:	008010c4 	movi	r2,67
     874:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     878:	180b883a 	mov	r5,r3
     87c:	00c04034 	movhi	r3,256
     880:	18c42704 	addi	r3,r3,4252
     884:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     888:	108000cc 	andi	r2,r2,3
     88c:	103ffb1e 	bne	r2,zero,87c <__alt_data_end+0xff00087c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     890:	00804034 	movhi	r2,256
     894:	21000044 	addi	r4,r4,1
     898:	10842404 	addi	r2,r2,4240
     89c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     8a0:	00800884 	movi	r2,34
     8a4:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8a8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8ac:	108000cc 	andi	r2,r2,3
     8b0:	103ffd1e 	bne	r2,zero,8a8 <__alt_data_end+0xff0008a8>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     8b4:	00804034 	movhi	r2,256
     8b8:	10842604 	addi	r2,r2,4248
}
     8bc:	10800037 	ldwio	r2,0(r2)
     8c0:	f800283a 	ret

000008c4 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8c4:	01c04034 	movhi	r7,256
     8c8:	39c42704 	addi	r7,r7,4252
     8cc:	00c04034 	movhi	r3,256
     8d0:	18c42704 	addi	r3,r3,4252
     8d4:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8d8:	108000cc 	andi	r2,r2,3
     8dc:	103ffb1e 	bne	r2,zero,8cc <__alt_data_end+0xff0008cc>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8e0:	00804034 	movhi	r2,256
     8e4:	10842404 	addi	r2,r2,4240
     8e8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     8ec:	00804034 	movhi	r2,256
     8f0:	10842504 	addi	r2,r2,4244
     8f4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     8f8:	00804034 	movhi	r2,256
     8fc:	10842604 	addi	r2,r2,4248
     900:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     904:	00801084 	movi	r2,66
     908:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     90c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     910:	108000cc 	andi	r2,r2,3
     914:	103ffd1e 	bne	r2,zero,90c <__alt_data_end+0xff00090c>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     918:	f800283a 	ret

0000091c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     91c:	00804034 	movhi	r2,256
     920:	10841804 	addi	r2,r2,4192
     924:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     928:	01000284 	movi	r4,10
     92c:	000eaf01 	jmpi	eaf0 <usleep>

00000930 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     930:	00804034 	movhi	r2,256
     934:	10841904 	addi	r2,r2,4196
     938:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     93c:	01000284 	movi	r4,10
     940:	000eaf01 	jmpi	eaf0 <usleep>

00000944 <init_LCD>:
}


void init_LCD() {
     944:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     948:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     94c:	dd400515 	stw	r21,20(sp)
     950:	dfc00815 	stw	ra,32(sp)
     954:	ddc00715 	stw	r23,28(sp)
     958:	dd800615 	stw	r22,24(sp)
     95c:	dd000415 	stw	r20,16(sp)
     960:	dcc00315 	stw	r19,12(sp)
     964:	dc800215 	stw	r18,8(sp)
     968:	dc400115 	stw	r17,4(sp)
     96c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     970:	05400084 	movi	r21,2
     974:	10841a04 	addi	r2,r2,4200
     978:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     97c:	04804034 	movhi	r18,256
     980:	94841804 	addi	r18,r18,4192
     984:	00800a04 	movi	r2,40
     988:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     98c:	04000284 	movi	r16,10
     990:	8009883a 	mov	r4,r16
     994:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     998:	05c00444 	movi	r23,17
     99c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     9a0:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9a4:	04404034 	movhi	r17,256
     9a8:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     9ac:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9b0:	0027883a 	mov	r19,zero
     9b4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9b8:	8009883a 	mov	r4,r16
     9bc:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9c0:	008032c4 	movi	r2,203
     9c4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     9c8:	8009883a 	mov	r4,r16
     9cc:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d0:	00800e44 	movi	r2,57
     9d4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9d8:	8009883a 	mov	r4,r16
     9dc:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e0:	00800b04 	movi	r2,44
     9e4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9e8:	8009883a 	mov	r4,r16
     9ec:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9f0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9f4:	8009883a 	mov	r4,r16
     9f8:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9fc:	00800d04 	movi	r2,52
     a00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a04:	8009883a 	mov	r4,r16
     a08:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a0c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     a10:	8009883a 	mov	r4,r16
     a14:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a18:	008033c4 	movi	r2,207
     a1c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a20:	8009883a 	mov	r4,r16
     a24:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a28:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a2c:	8009883a 	mov	r4,r16
     a30:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a34:	05802044 	movi	r22,129
     a38:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     a3c:	8009883a 	mov	r4,r16
     a40:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a44:	00800c04 	movi	r2,48
     a48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a4c:	8009883a 	mov	r4,r16
     a50:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a54:	00803a04 	movi	r2,232
     a58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a5c:	8009883a 	mov	r4,r16
     a60:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	00802144 	movi	r2,133
     a68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a6c:	8009883a 	mov	r4,r16
     a70:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a74:	05000044 	movi	r20,1
     a78:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     a7c:	8009883a 	mov	r4,r16
     a80:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a84:	00801e44 	movi	r2,121
     a88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a8c:	8009883a 	mov	r4,r16
     a90:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a94:	00803a84 	movi	r2,234
     a98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a9c:	8009883a 	mov	r4,r16
     aa0:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa8:	8009883a 	mov	r4,r16
     aac:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	00801904 	movi	r2,100
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	008000c4 	movi	r2,3
     ad0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
     ad8:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	00800484 	movi	r2,18
     ae0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aec:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     af0:	8009883a 	mov	r4,r16
     af4:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af8:	00803dc4 	movi	r2,247
     afc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
     b04:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b08:	00800804 	movi	r2,32
     b0c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b10:	8009883a 	mov	r4,r16
     b14:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b18:	00803004 	movi	r2,192
     b1c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	05800984 	movi	r22,38
     b2c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b38:	00800104 	movi	r2,4
     b3c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b48:	00803044 	movi	r2,193
     b4c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b50:	8009883a 	mov	r4,r16
     b54:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b58:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b64:	00803144 	movi	r2,197
     b68:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00800d44 	movi	r2,53
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b84:	00800f84 	movi	r2,62
     b88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b94:	008031c4 	movi	r2,199
     b98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	00802f84 	movi	r2,190
     ba8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb4:	00802c44 	movi	r2,177
     bb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd0:	00800404 	movi	r2,16
     bd4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     be0:	00800e84 	movi	r2,58
     be4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf0:	00801544 	movi	r2,85
     bf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c00:	00802d84 	movi	r2,182
     c04:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	00802884 	movi	r2,162
     c20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c2c:	00803c84 	movi	r2,242
     c30:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     c40:	8009883a 	mov	r4,r16
     c44:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c48:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c54:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     c58:	8009883a 	mov	r4,r16
     c5c:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c60:	00800d84 	movi	r2,54
     c64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c68:	8009883a 	mov	r4,r16
     c6c:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c70:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c7c:	00800a84 	movi	r2,42
     c80:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c8c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c9c:	8009883a 	mov	r4,r16
     ca0:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb0:	00803bc4 	movi	r2,239
     cb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000eaf00 	call	eaf0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc0:	00800ac4 	movi	r2,43
     cc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000eaf00 	call	eaf0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd4:	8009883a 	mov	r4,r16
     cd8:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cdc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000eaf00 	call	eaf0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf4:	00800fc4 	movi	r2,63
     cf8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000eaf00 	call	eaf0 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     d04:	00c04034 	movhi	r3,256
     d08:	00803c04 	movi	r2,240
     d0c:	18c41d04 	addi	r3,r3,4212
     d10:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     d14:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     d18:	00805004 	movi	r2,320
     d1c:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d20:	00800a44 	movi	r2,41
     d24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     d2c:	dfc00817 	ldw	ra,32(sp)
     d30:	ddc00717 	ldw	r23,28(sp)
     d34:	dd800617 	ldw	r22,24(sp)
     d38:	dd400517 	ldw	r21,20(sp)
     d3c:	dd000417 	ldw	r20,16(sp)
     d40:	dcc00317 	ldw	r19,12(sp)
     d44:	dc800217 	ldw	r18,8(sp)
     d48:	dc400117 	ldw	r17,4(sp)
     d4c:	dc000017 	ldw	r16,0(sp)
     d50:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d54:	000eaf01 	jmpi	eaf0 <usleep>

00000d58 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d58:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d5c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d60:	dc000015 	stw	r16,0(sp)
     d64:	dfc00415 	stw	ra,16(sp)
     d68:	dcc00315 	stw	r19,12(sp)
     d6c:	dc800215 	stw	r18,8(sp)
     d70:	dc400115 	stw	r17,4(sp)
     d74:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d78:	10841e04 	addi	r2,r2,4216
     d7c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d80:	00804034 	movhi	r2,256
     d84:	10841804 	addi	r2,r2,4192
     d88:	00c00b04 	movi	r3,44
     d8c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d90:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d94:	01000284 	movi	r4,10
     d98:	000eaf00 	call	eaf0 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d9c:	90000a26 	beq	r18,zero,dc8 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da0:	04c04034 	movhi	r19,256
     da4:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     da8:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dac:	8080000b 	ldhu	r2,0(r16)
     db0:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     db4:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     db8:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     dbc:	000eaf00 	call	eaf0 <usleep>
     dc0:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     dc4:	8cbff91e 	bne	r17,r18,dac <__alt_data_end+0xff000dac>
		LCD_Write_Data(data_array[pixels]);
}
     dc8:	dfc00417 	ldw	ra,16(sp)
     dcc:	dcc00317 	ldw	r19,12(sp)
     dd0:	dc800217 	ldw	r18,8(sp)
     dd4:	dc400117 	ldw	r17,4(sp)
     dd8:	dc000017 	ldw	r16,0(sp)
     ddc:	dec00504 	addi	sp,sp,20
     de0:	f800283a 	ret

00000de4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     de4:	d0a6d20b 	ldhu	r2,-25784(gp)
     de8:	3080010e 	bge	r6,r2,df0 <transfer_LCD_with_dma+0xc>
     dec:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     df0:	d0e6d28b 	ldhu	r3,-25782(gp)
     df4:	28c0010e 	bge	r5,r3,dfc <transfer_LCD_with_dma+0x18>
     df8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     dfc:	01804034 	movhi	r6,256
     e00:	31841e04 	addi	r6,r6,4216
     e04:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     e08:	01404034 	movhi	r5,256
     e0c:	29441b04 	addi	r5,r5,4204
     e10:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     e14:	18ffffcc 	andi	r3,r3,65535
     e18:	10bfffcc 	andi	r2,r2,65535
     e1c:	1885383a 	mul	r2,r3,r2
     e20:	00c04034 	movhi	r3,256
     e24:	18c41c04 	addi	r3,r3,4208
     e28:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     e2c:	39c03fcc 	andi	r7,r7,255
     e30:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e34:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e38:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e3c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e40:	38000326 	beq	r7,zero,e50 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e44:	00c04404 	movi	r3,272
     e48:	10c0002d 	sthio	r3,0(r2)
     e4c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e50:	00c04004 	movi	r3,256
     e54:	10c0002d 	sthio	r3,0(r2)
     e58:	f800283a 	ret

00000e5c <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     e5c:	defff504 	addi	sp,sp,-44
     e60:	dfc00a15 	stw	ra,40(sp)
     e64:	dd800715 	stw	r22,28(sp)
     e68:	dd400615 	stw	r21,24(sp)
     e6c:	dd000515 	stw	r20,20(sp)
     e70:	dcc00415 	stw	r19,16(sp)
     e74:	dc800315 	stw	r18,12(sp)
     e78:	dc400215 	stw	r17,8(sp)
     e7c:	dc000115 	stw	r16,4(sp)
     e80:	df000915 	stw	fp,36(sp)
     e84:	ddc00815 	stw	r23,32(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     e88:	00009440 	call	944 <init_LCD>
  init_camera();
     e8c:	00001d80 	call	1d8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     e90:	01000604 	movi	r4,24
     e94:	0001c840 	call	1c84 <vga_set_swap>
  printf("Hello from Nios II!\n");
     e98:	01000074 	movhi	r4,1
     e9c:	21016c04 	addi	r4,r4,1456
     ea0:	00025f40 	call	25f4 <puts>
  cam_get_profiling();
     ea4:	00005380 	call	538 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ea8:	00004f00 	call	4f0 <cam_get_xsize>
     eac:	1021883a 	mov	r16,r2
     eb0:	00005140 	call	514 <cam_get_ysize>
     eb4:	10bfffcc 	andi	r2,r2,65535
     eb8:	813fffcc 	andi	r4,r16,65535
     ebc:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     ec0:	04c00044 	movi	r19,1
     ec4:	05000084 	movi	r20,2
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ec8:	0001c940 	call	1c94 <malloc>
     ecc:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ed0:	00004f00 	call	4f0 <cam_get_xsize>
     ed4:	1021883a 	mov	r16,r2
     ed8:	00005140 	call	514 <cam_get_ysize>
     edc:	10bfffcc 	andi	r2,r2,65535
     ee0:	813fffcc 	andi	r4,r16,65535
     ee4:	2089383a 	mul	r4,r4,r2
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     ee8:	05604414 	movui	r21,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     eec:	0001c940 	call	1c94 <malloc>
     ef0:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ef4:	00004f00 	call	4f0 <cam_get_xsize>
     ef8:	1021883a 	mov	r16,r2
     efc:	00005140 	call	514 <cam_get_ysize>
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	813fffcc 	andi	r4,r16,65535
     f08:	2089383a 	mul	r4,r4,r2
     f0c:	0001c940 	call	1c94 <malloc>
     f10:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f14:	00004f00 	call	4f0 <cam_get_xsize>
     f18:	1021883a 	mov	r16,r2
     f1c:	00005140 	call	514 <cam_get_ysize>
     f20:	10bfffcc 	andi	r2,r2,65535
     f24:	813fffcc 	andi	r4,r16,65535
     f28:	2089383a 	mul	r4,r4,r2
     f2c:	0001c940 	call	1c94 <malloc>
  cam_set_image_pointer(0,buffer1);
     f30:	b00b883a 	mov	r5,r22
     f34:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f38:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     f3c:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     f40:	900b883a 	mov	r5,r18
     f44:	9809883a 	mov	r4,r19
     f48:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     f4c:	880b883a 	mov	r5,r17
     f50:	a009883a 	mov	r4,r20
     f54:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     f58:	800b883a 	mov	r5,r16
     f5c:	010000c4 	movi	r4,3
     f60:	00005b00 	call	5b0 <cam_set_image_pointer>
  enable_continues_mode();
     f64:	00006680 	call	668 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
     f68:	00004f00 	call	4f0 <cam_get_xsize>
     f6c:	1021883a 	mov	r16,r2
     f70:	00005140 	call	514 <cam_get_ysize>
     f74:	813fffcc 	andi	r4,r16,65535
     f78:	24c8d83a 	srl	r4,r4,r19
     f7c:	117fffcc 	andi	r5,r2,65535
     f80:	00012dc0 	call	12dc <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
     f84:	000067c0 	call	67c <new_image_available>
     f88:	10803fcc 	andi	r2,r2,255
     f8c:	1080201c 	xori	r2,r2,128
     f90:	10bfe004 	addi	r2,r2,-128
     f94:	103ffb26 	beq	r2,zero,f84 <__alt_data_end+0xff000f84>
		  if (current_image_valid()!=0) {
     f98:	00006240 	call	624 <current_image_valid>
     f9c:	10bfffcc 	andi	r2,r2,65535
     fa0:	10a0001c 	xori	r2,r2,32768
     fa4:	10a00004 	addi	r2,r2,-32768
     fa8:	103ff626 	beq	r2,zero,f84 <__alt_data_end+0xff000f84>
			  current_mode = DIPSW_get_value();
     fac:	00006a80 	call	6a8 <DIPSW_get_value>
     fb0:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
     fb4:	00006380 	call	638 <current_image_pointer>
     fb8:	1025883a 	mov	r18,r2
		      switch (mode) {
     fbc:	808001cc 	andi	r2,r16,7
     fc0:	14c03b26 	beq	r2,r19,10b0 <main+0x254>
     fc4:	1000aa26 	beq	r2,zero,1270 <main+0x414>
     fc8:	15008526 	beq	r2,r20,11e0 <main+0x384>
     fcc:	00c000c4 	movi	r3,3
     fd0:	10c0561e 	bne	r2,r3,112c <main+0x2d0>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
     fd4:	000f2840 	call	f284 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
     fd8:	000f2c00 	call	f2c0 <alt_timestamp>
     fdc:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
     fe0:	00004f00 	call	4f0 <cam_get_xsize>
     fe4:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
     fe8:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
     fec:	897fffcc 	andi	r5,r17,65535
     ff0:	280ad07a 	srli	r5,r5,1
     ff4:	11bfffcc 	andi	r6,r2,65535
     ff8:	9009883a 	mov	r4,r18
     ffc:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1000:	000f2c00 	call	f2c0 <alt_timestamp>
    1004:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1008:	00007700 	call	770 <get_grayscale_picture>
    100c:	1039883a 	mov	fp,r2
		               alt_timestamp_start();
    1010:	000f2840 	call	f284 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1014:	000f2c00 	call	f2c0 <alt_timestamp>
		               sobel_x(grayscale);
    1018:	e009883a 	mov	r4,fp
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    101c:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    1020:	000147c0 	call	147c <sobel_x>
		               end_sobel_x = alt_timestamp();
    1024:	000f2c00 	call	f2c0 <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    1028:	e009883a 	mov	r4,fp
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    102c:	1025883a 	mov	r18,r2
		               sobel_y_with_rgb(grayscale);
    1030:	00018500 	call	1850 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1034:	0001c640 	call	1c64 <GetSobel_rgb>
    1038:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    103c:	00004f00 	call	4f0 <cam_get_xsize>
    1040:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),0);
    1044:	d8c00015 	stw	r3,0(sp)
    1048:	00005140 	call	514 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    104c:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1050:	84003fcc 	andi	r16,r16,255
    1054:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1058:	197fffcc 	andi	r5,r3,65535
    105c:	280ad07a 	srli	r5,r5,1
    1060:	000f883a 	mov	r7,zero
    1064:	11bfffcc 	andi	r6,r2,65535
    1068:	e549883a 	add	r4,fp,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    106c:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1070:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1074:	80008e16 	blt	r16,zero,12b0 <main+0x454>
    1078:	95e5c83a 	sub	r18,r18,r23
    107c:	8da3c83a 	sub	r17,r17,r22
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1080:	01000074 	movhi	r4,1
    1084:	21017104 	addi	r4,r4,1476
    1088:	00025f40 	call	25f4 <puts>
		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
    108c:	01000074 	movhi	r4,1
    1090:	900b883a 	mov	r5,r18
    1094:	21017904 	addi	r4,r4,1508
    1098:	00024f80 	call	24f8 <printf>
//		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
//		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
//		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    109c:	01000074 	movhi	r4,1
    10a0:	880b883a 	mov	r5,r17
    10a4:	21017f04 	addi	r4,r4,1532
    10a8:	00024f80 	call	24f8 <printf>
    10ac:	003fb506 	br	f84 <__alt_data_end+0xff000f84>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    10b0:	000f2840 	call	f284 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    10b4:	000f2c00 	call	f2c0 <alt_timestamp>
    10b8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    10bc:	00004f00 	call	4f0 <cam_get_xsize>
    10c0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    10c4:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10c8:	897fffcc 	andi	r5,r17,65535
    10cc:	280ad07a 	srli	r5,r5,1
    10d0:	9009883a 	mov	r4,r18
    10d4:	11bfffcc 	andi	r6,r2,65535
    10d8:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10dc:	000f2c00 	call	f2c0 <alt_timestamp>
    10e0:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    10e4:	00007700 	call	770 <get_grayscale_picture>
    10e8:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    10ec:	00004f00 	call	4f0 <cam_get_xsize>
    10f0:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    10f4:	00005140 	call	514 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    10f8:	917fffcc 	andi	r5,r18,65535
    10fc:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1100:	84003fcc 	andi	r16,r16,255
    1104:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1108:	980f883a 	mov	r7,r19
    110c:	11bfffcc 	andi	r6,r2,65535
    1110:	b9102204 	addi	r4,r23,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1114:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1118:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    111c:	80006616 	blt	r16,zero,12b8 <main+0x45c>
    1120:	8da3c83a 	sub	r17,r17,r22
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1124:	0025883a 	mov	r18,zero
    1128:	003fd506 	br	1080 <__alt_data_end+0xff001080>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    112c:	000f2840 	call	f284 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1130:	000f2c00 	call	f2c0 <alt_timestamp>
    1134:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1138:	00004f00 	call	4f0 <cam_get_xsize>
    113c:	1023883a 	mov	r17,r2
	                                  cam_get_ysize());
    1140:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1144:	897fffcc 	andi	r5,r17,65535
    1148:	280ad07a 	srli	r5,r5,1
    114c:	11bfffcc 	andi	r6,r2,65535
    1150:	9009883a 	mov	r4,r18
    1154:	00006bc0 	call	6bc <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1158:	000f2c00 	call	f2c0 <alt_timestamp>
    115c:	1023883a 	mov	r17,r2
                       grayscale = get_grayscale_picture();
    1160:	00007700 	call	770 <get_grayscale_picture>
    1164:	1025883a 	mov	r18,r2

                       alt_timestamp_start();
    1168:	000f2840 	call	f284 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    116c:	000f2c00 	call	f2c0 <alt_timestamp>
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    1170:	9009883a 	mov	r4,r18
    1174:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    1178:	102f883a 	mov	r23,r2
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    117c:	0001a540 	call	1a54 <sobel_complete>
                       end_sobel_x = alt_timestamp();
    1180:	000f2c00 	call	f2c0 <alt_timestamp>
    1184:	1025883a 	mov	r18,r2
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
    1188:	0001c6c0 	call	1c6c <GetSobelResult>
    118c:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1190:	00004f00 	call	4f0 <cam_get_xsize>
    1194:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    1198:	d8c00015 	stw	r3,0(sp)
    119c:	00005140 	call	514 <cam_get_ysize>
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11a0:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11a4:	84003fcc 	andi	r16,r16,255
    11a8:	8400201c 	xori	r16,r16,128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11ac:	197fffcc 	andi	r5,r3,65535
    11b0:	280ad07a 	srli	r5,r5,1
    11b4:	01c00044 	movi	r7,1
    11b8:	11bfffcc 	andi	r6,r2,65535
    11bc:	e1102204 	addi	r4,fp,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11c0:	843fe004 	addi	r16,r16,-128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11c4:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11c8:	803fab0e 	bge	r16,zero,1078 <__alt_data_end+0xff001078>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    11cc:	01000604 	movi	r4,24
    11d0:	0001c840 	call	1c84 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    11d4:	e009883a 	mov	r4,fp
    11d8:	0001c740 	call	1c74 <vga_set_pointer>
    11dc:	003fa606 	br	1078 <__alt_data_end+0xff001078>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    11e0:	000f2840 	call	f284 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    11e4:	000f2c00 	call	f2c0 <alt_timestamp>
    11e8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11ec:	00004f00 	call	4f0 <cam_get_xsize>
    11f0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    11f4:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    11f8:	897fffcc 	andi	r5,r17,65535
    11fc:	280ad07a 	srli	r5,r5,1
    1200:	11bfffcc 	andi	r6,r2,65535
    1204:	9009883a 	mov	r4,r18
    1208:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    120c:	000f2c00 	call	f2c0 <alt_timestamp>
    1210:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1214:	00007700 	call	770 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1218:	1009883a 	mov	r4,r2
    121c:	00015bc0 	call	15bc <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1220:	0001c640 	call	1c64 <GetSobel_rgb>
    1224:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1228:	00004f00 	call	4f0 <cam_get_xsize>
    122c:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1230:	00005140 	call	514 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1234:	917fffcc 	andi	r5,r18,65535
    1238:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    123c:	84003fcc 	andi	r16,r16,255
    1240:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1244:	000f883a 	mov	r7,zero
    1248:	11bfffcc 	andi	r6,r2,65535
    124c:	bd49883a 	add	r4,r23,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1250:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1254:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1258:	803fb10e 	bge	r16,zero,1120 <__alt_data_end+0xff001120>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    125c:	01000204 	movi	r4,8
    1260:	0001c840 	call	1c84 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1264:	b809883a 	mov	r4,r23
    1268:	0001c740 	call	1c74 <vga_set_pointer>
    126c:	003fac06 	br	1120 <__alt_data_end+0xff001120>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1270:	00004f00 	call	4f0 <cam_get_xsize>
    1274:	1023883a 	mov	r17,r2
		                	cam_get_ysize(),0);
    1278:	00005140 	call	514 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    127c:	897fffcc 	andi	r5,r17,65535
    1280:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1284:	84003fcc 	andi	r16,r16,255
    1288:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    128c:	000f883a 	mov	r7,zero
    1290:	11bfffcc 	andi	r6,r2,65535
    1294:	9549883a 	add	r4,r18,r21
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1298:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    129c:	0000de40 	call	de4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12a0:	80000716 	blt	r16,zero,12c0 <main+0x464>
    12a4:	0023883a 	mov	r17,zero
    12a8:	0025883a 	mov	r18,zero
    12ac:	003f7406 	br	1080 <__alt_data_end+0xff001080>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12b0:	01000204 	movi	r4,8
    12b4:	003fc606 	br	11d0 <__alt_data_end+0xff0011d0>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12b8:	01000604 	movi	r4,24
    12bc:	003fe806 	br	1260 <__alt_data_end+0xff001260>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12c0:	01000204 	movi	r4,8
    12c4:	0001c840 	call	1c84 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12c8:	9009883a 	mov	r4,r18
    12cc:	0001c740 	call	1c74 <vga_set_pointer>
    12d0:	0023883a 	mov	r17,zero
    12d4:	0025883a 	mov	r18,zero
    12d8:	003f6906 	br	1080 <__alt_data_end+0xff001080>

000012dc <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12dc:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    12e0:	defffd04 	addi	sp,sp,-12
    12e4:	dc400115 	stw	r17,4(sp)
    12e8:	dc000015 	stw	r16,0(sp)
    12ec:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    12f0:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    12f4:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    12f8:	2023883a 	mov	r17,r4
    12fc:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1300:	10000226 	beq	r2,zero,130c <init_sobel_arrays+0x30>
		free(sobel_x_result);
    1304:	1009883a 	mov	r4,r2
    1308:	0001ca80 	call	1ca8 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    130c:	8c21383a 	mul	r16,r17,r16
    1310:	8423883a 	add	r17,r16,r16
    1314:	8809883a 	mov	r4,r17
    1318:	0001c940 	call	1c94 <malloc>
	if (sobel_y_result != NULL)
    131c:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1320:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    1324:	20000126 	beq	r4,zero,132c <init_sobel_arrays+0x50>
		free(sobel_y_result);
    1328:	0001ca80 	call	1ca8 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    132c:	8809883a 	mov	r4,r17
    1330:	0001c940 	call	1c94 <malloc>
	if (sobel_result != NULL)
    1334:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1338:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    133c:	20000126 	beq	r4,zero,1344 <init_sobel_arrays+0x68>
		alt_uncached_free(sobel_result);
    1340:	000ea840 	call	ea84 <alt_uncached_free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1344:	8009883a 	mov	r4,r16
    1348:	000ea940 	call	ea94 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    134c:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1350:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    1354:	20000126 	beq	r4,zero,135c <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1358:	0001ca80 	call	1ca8 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    135c:	8809883a 	mov	r4,r17
    1360:	0001c940 	call	1c94 <malloc>
    1364:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1368:	0005883a 	mov	r2,zero
    136c:	04000f0e 	bge	zero,r16,13ac <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    1370:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    1374:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    1378:	d1a6d417 	ldw	r6,-25776(gp)
    137c:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1380:	40d1883a 	add	r8,r8,r3
    1384:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1388:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    138c:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1390:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    1394:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1398:	d1a6d817 	ldw	r6,-25760(gp)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    139c:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    13a0:	30c7883a 	add	r3,r6,r3
    13a4:	1800000d 	sth	zero,0(r3)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13a8:	80bff11e 	bne	r16,r2,1370 <__alt_data_end+0xff001370>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    13ac:	dfc00217 	ldw	ra,8(sp)
    13b0:	dc400117 	ldw	r17,4(sp)
    13b4:	dc000017 	ldw	r16,0(sp)
    13b8:	dec00304 	addi	sp,sp,12
    13bc:	f800283a 	ret

000013c0 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    13c0:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13c4:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13c8:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13cc:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13d0:	3b8000c7 	ldb	r14,3(r7)
    13d4:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13d8:	5185883a 	add	r2,r10,r6
    13dc:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13e0:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    13e4:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13e8:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13ec:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13f0:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13f4:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13f8:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13fc:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    1400:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1404:	49000043 	ldbu	r4,1(r9)
    1408:	3a800147 	ldb	r10,5(r7)
    140c:	139d383a 	mul	r14,r2,r14
    1410:	60d9383a 	mul	r12,r12,r3
    1414:	68800003 	ldbu	r2,0(r13)
    1418:	38c001c7 	ldb	r3,7(r7)
    141c:	5a17383a 	mul	r11,r11,r8
    1420:	33ffffc3 	ldbu	r15,-1(r6)
    1424:	3a000007 	ldb	r8,0(r7)
    1428:	2295383a 	mul	r10,r4,r10
    142c:	31000043 	ldbu	r4,1(r6)
    1430:	39800087 	ldb	r6,2(r7)
    1434:	730b883a 	add	r5,r14,r12
    1438:	10d3383a 	mul	r9,r2,r3
    143c:	6b3fffc3 	ldbu	r12,-1(r13)
    1440:	38c00187 	ldb	r3,6(r7)
    1444:	2acb883a 	add	r5,r5,r11
    1448:	7a11383a 	mul	r8,r15,r8
    144c:	6ac00043 	ldbu	r11,1(r13)
    1450:	39c00207 	ldb	r7,8(r7)
    1454:	2a8b883a 	add	r5,r5,r10
    1458:	2189383a 	mul	r4,r4,r6
    145c:	2a45883a 	add	r2,r5,r9
    1460:	60c7383a 	mul	r3,r12,r3
    1464:	1205883a 	add	r2,r2,r8
    1468:	59cb383a 	mul	r5,r11,r7
    146c:	1105883a 	add	r2,r2,r4
    1470:	10c5883a 	add	r2,r2,r3
}
    1474:	1145883a 	add	r2,r2,r5
    1478:	f800283a 	ret

0000147c <sobel_x>:

void sobel_x( unsigned char *source ) {
    147c:	defff604 	addi	sp,sp,-40
    1480:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1484:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    1488:	dfc00915 	stw	ra,36(sp)
    148c:	df000815 	stw	fp,32(sp)
    1490:	ddc00715 	stw	r23,28(sp)
    1494:	dd800615 	stw	r22,24(sp)
    1498:	dd400515 	stw	r21,20(sp)
    149c:	dd000415 	stw	r20,16(sp)
    14a0:	dcc00315 	stw	r19,12(sp)
    14a4:	dc800215 	stw	r18,8(sp)
    14a8:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14ac:	8c7fffc4 	addi	r17,r17,-1
    14b0:	00800044 	movi	r2,1
    14b4:	14402e0e 	bge	r2,r17,1570 <sobel_x+0xf4>
    14b8:	d366d317 	ldw	r13,-25780(gp)
    14bc:	d3e6d617 	ldw	r15,-25768(gp)
    14c0:	03800084 	movi	r14,2
    14c4:	6b65883a 	add	r18,r13,r13
    14c8:	9385883a 	add	r2,r18,r14
    14cc:	2359883a 	add	r12,r4,r13
    14d0:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    14d4:	7027883a 	mov	r19,r14
    14d8:	736bc83a 	sub	r21,r14,r13
    14dc:	6ba9883a 	add	r20,r13,r14
    14e0:	9b402f0e 	bge	r19,r13,15a0 <sobel_x+0x124>
    14e4:	637f883a 	add	ra,r12,r13
    14e8:	7021883a 	mov	r16,r14
    14ec:	6357c83a 	sub	r11,r12,r13
    14f0:	ab0b883a 	add	r5,r21,r12
    14f4:	62800084 	addi	r10,r12,2
    14f8:	f813883a 	mov	r9,ra
    14fc:	a311883a 	add	r8,r20,r12
    1500:	780f883a 	mov	r7,r15
    1504:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1508:	29000003 	ldbu	r4,0(r5)
    150c:	40c00003 	ldbu	r3,0(r8)
    1510:	37000003 	ldbu	fp,0(r6)
    1514:	50800003 	ldbu	r2,0(r10)
    1518:	20c7883a 	add	r3,r4,r3
    151c:	5dc00003 	ldbu	r23,0(r11)
    1520:	1f07c83a 	sub	r3,r3,fp
    1524:	4d800003 	ldbu	r22,0(r9)
    1528:	1f09c83a 	sub	r4,r3,fp
    152c:	1087883a 	add	r3,r2,r2
    1530:	20c7883a 	add	r3,r4,r3
    1534:	1dc5c83a 	sub	r2,r3,r23
    1538:	1585c83a 	sub	r2,r2,r22
    153c:	3880000d 	sth	r2,0(r7)
    1540:	29400044 	addi	r5,r5,1
    1544:	5ac00044 	addi	r11,r11,1
    1548:	31800044 	addi	r6,r6,1
    154c:	52800044 	addi	r10,r10,1
    1550:	4a400044 	addi	r9,r9,1
    1554:	42000044 	addi	r8,r8,1
    1558:	39c00084 	addi	r7,r7,2
void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    155c:	617fea1e 	bne	r12,r5,1508 <__alt_data_end+0xff001508>
    1560:	73800044 	addi	r14,r14,1
    1564:	f819883a 	mov	r12,ra
    1568:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    156c:	847fdc16 	blt	r16,r17,14e0 <__alt_data_end+0xff0014e0>
//		  result += pgx_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}
    1570:	dfc00917 	ldw	ra,36(sp)
    1574:	df000817 	ldw	fp,32(sp)
    1578:	ddc00717 	ldw	r23,28(sp)
    157c:	dd800617 	ldw	r22,24(sp)
    1580:	dd400517 	ldw	r21,20(sp)
    1584:	dd000417 	ldw	r20,16(sp)
    1588:	dcc00317 	ldw	r19,12(sp)
    158c:	dc800217 	ldw	r18,8(sp)
    1590:	dc400117 	ldw	r17,4(sp)
    1594:	dc000017 	ldw	r16,0(sp)
    1598:	dec00a04 	addi	sp,sp,40
    159c:	f800283a 	ret
    15a0:	7021883a 	mov	r16,r14
    15a4:	637f883a 	add	ra,r12,r13
    15a8:	73800044 	addi	r14,r14,1
    15ac:	f819883a 	mov	r12,ra
    15b0:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15b4:	847fca16 	blt	r16,r17,14e0 <__alt_data_end+0xff0014e0>
    15b8:	003fed06 	br	1570 <__alt_data_end+0xff001570>

000015bc <sobel_x_with_rgb>:
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15bc:	defff504 	addi	sp,sp,-44
    15c0:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15c4:	d5a6d517 	ldw	r22,-25772(gp)
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15c8:	dfc00a15 	stw	ra,40(sp)
    15cc:	df000915 	stw	fp,36(sp)
    15d0:	ddc00815 	stw	r23,32(sp)
    15d4:	dd400615 	stw	r21,24(sp)
    15d8:	dd000515 	stw	r20,20(sp)
    15dc:	dcc00415 	stw	r19,16(sp)
    15e0:	dc800315 	stw	r18,12(sp)
    15e4:	dc400215 	stw	r17,8(sp)
    15e8:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15ec:	b5bfffc4 	addi	r22,r22,-1
    15f0:	00800044 	movi	r2,1
    15f4:	1580440e 	bge	r2,r22,1708 <sobel_x_with_rgb+0x14c>
    15f8:	d7e6d317 	ldw	ra,-25780(gp)
    15fc:	d4a6d617 	ldw	r18,-25768(gp)
    1600:	d466d817 	ldw	r17,-25760(gp)
    1604:	ffe9883a 	add	r20,ra,ra
    1608:	a0800084 	addi	r2,r20,2
    160c:	04000084 	movi	r16,2
    1610:	90a5883a 	add	r18,r18,r2
    1614:	88a3883a 	add	r17,r17,r2
    1618:	fc05883a 	add	r2,ra,r16
    161c:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1620:	802f883a 	mov	r23,r16
    1624:	87f9c83a 	sub	fp,r16,ra
    1628:	d8800015 	stw	r2,0(sp)
    162c:	bfc02f0e 	bge	r23,ra,16ec <sobel_x_with_rgb+0x130>
    1630:	d8800017 	ldw	r2,0(sp)
    1634:	7fe7883a 	add	r19,r15,ra
    1638:	802b883a 	mov	r21,r16
    163c:	7fdbc83a 	sub	r13,r15,ra
    1640:	e3cf883a 	add	r7,fp,r15
    1644:	7b000084 	addi	r12,r15,2
    1648:	9817883a 	mov	r11,r19
    164c:	13d5883a 	add	r10,r2,r15
    1650:	881d883a 	mov	r14,r17
    1654:	9013883a 	mov	r9,r18
    1658:	7811883a 	mov	r8,r15
    165c:	00000b06 	br	168c <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1660:	180692fa 	slli	r3,r3,11
    1664:	70c0000d 	sth	r3,0(r14)
    1668:	39c00044 	addi	r7,r7,1
    166c:	6b400044 	addi	r13,r13,1
    1670:	42000044 	addi	r8,r8,1
    1674:	63000044 	addi	r12,r12,1
    1678:	5ac00044 	addi	r11,r11,1
    167c:	52800044 	addi	r10,r10,1
    1680:	4a400084 	addi	r9,r9,2
    1684:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1688:	79c01a26 	beq	r15,r7,16f4 <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    168c:	50800003 	ldbu	r2,0(r10)
    1690:	39400003 	ldbu	r5,0(r7)
    1694:	41800003 	ldbu	r6,0(r8)
    1698:	60c00003 	ldbu	r3,0(r12)
    169c:	288b883a 	add	r5,r5,r2
    16a0:	298bc83a 	sub	r5,r5,r6
    16a4:	68800003 	ldbu	r2,0(r13)
    16a8:	59000003 	ldbu	r4,0(r11)
    16ac:	298bc83a 	sub	r5,r5,r6
    16b0:	18c7883a 	add	r3,r3,r3
    16b4:	28c7883a 	add	r3,r5,r3
    16b8:	1887c83a 	sub	r3,r3,r2
    16bc:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    16c0:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    16c4:	10bfffcc 	andi	r2,r2,65535
    16c8:	10a0001c 	xori	r2,r2,32768
    16cc:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16d0:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    16d4:	103fe20e 	bge	r2,zero,1660 <__alt_data_end+0xff001660>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    16d8:	0085c83a 	sub	r2,zero,r2
    16dc:	1005d0ba 	srai	r2,r2,2
    16e0:	1004917a 	slli	r2,r2,5
    16e4:	7080000d 	sth	r2,0(r14)
    16e8:	003fdf06 	br	1668 <__alt_data_end+0xff001668>
    16ec:	802b883a 	mov	r21,r16
    16f0:	7fe7883a 	add	r19,r15,ra
    16f4:	84000044 	addi	r16,r16,1
    16f8:	981f883a 	mov	r15,r19
    16fc:	9525883a 	add	r18,r18,r20
    1700:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1704:	adbfc916 	blt	r21,r22,162c <__alt_data_end+0xff00162c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1708:	dfc00a17 	ldw	ra,40(sp)
    170c:	df000917 	ldw	fp,36(sp)
    1710:	ddc00817 	ldw	r23,32(sp)
    1714:	dd800717 	ldw	r22,28(sp)
    1718:	dd400617 	ldw	r21,24(sp)
    171c:	dd000517 	ldw	r20,20(sp)
    1720:	dcc00417 	ldw	r19,16(sp)
    1724:	dc800317 	ldw	r18,12(sp)
    1728:	dc400217 	ldw	r17,8(sp)
    172c:	dc000117 	ldw	r16,4(sp)
    1730:	dec00b04 	addi	sp,sp,44
    1734:	f800283a 	ret

00001738 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1738:	defff704 	addi	sp,sp,-36
    173c:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1740:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1744:	dfc00815 	stw	ra,32(sp)
    1748:	ddc00715 	stw	r23,28(sp)
    174c:	dd800615 	stw	r22,24(sp)
    1750:	dd400515 	stw	r21,20(sp)
    1754:	dd000415 	stw	r20,16(sp)
    1758:	dcc00315 	stw	r19,12(sp)
    175c:	dc800215 	stw	r18,8(sp)
    1760:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1764:	8c7fffc4 	addi	r17,r17,-1
    1768:	00800044 	movi	r2,1
    176c:	14402d0e 	bge	r2,r17,1824 <sobel_y+0xec>
    1770:	d3e6d317 	ldw	r15,-25780(gp)
    1774:	d3a6d717 	ldw	r14,-25764(gp)
    1778:	03400084 	movi	r13,2
    177c:	7bff883a 	add	ra,r15,r15
    1780:	fb67883a 	add	r19,ra,r13
    1784:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1788:	6825883a 	mov	r18,r13
    178c:	f8a9883a 	add	r20,ra,r2
    1790:	6821883a 	mov	r16,r13
    1794:	93c01f0e 	bge	r18,r15,1814 <sobel_y+0xdc>
    1798:	27cd883a 	add	r6,r4,ra
    179c:	6821883a 	mov	r16,r13
    17a0:	22c00044 	addi	r11,r4,1
    17a4:	22800084 	addi	r10,r4,2
    17a8:	a113883a 	add	r9,r20,r4
    17ac:	990b883a 	add	r5,r19,r4
    17b0:	7999883a 	add	r12,r15,r6
    17b4:	7011883a 	mov	r8,r14
    17b8:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    17bc:	3d800003 	ldbu	r22,0(r7)
    17c0:	50c00003 	ldbu	r3,0(r10)
    17c4:	58800003 	ldbu	r2,0(r11)
    17c8:	4d400003 	ldbu	r21,0(r9)
    17cc:	b0c7883a 	add	r3,r22,r3
    17d0:	1085883a 	add	r2,r2,r2
    17d4:	35c00003 	ldbu	r23,0(r6)
    17d8:	1887883a 	add	r3,r3,r2
    17dc:	2d800003 	ldbu	r22,0(r5)
    17e0:	1d47c83a 	sub	r3,r3,r21
    17e4:	1d47c83a 	sub	r3,r3,r21
    17e8:	1dc5c83a 	sub	r2,r3,r23
    17ec:	1585c83a 	sub	r2,r2,r22
    17f0:	4080000d 	sth	r2,0(r8)
    17f4:	29400044 	addi	r5,r5,1
    17f8:	39c00044 	addi	r7,r7,1
    17fc:	5ac00044 	addi	r11,r11,1
    1800:	52800044 	addi	r10,r10,1
    1804:	31800044 	addi	r6,r6,1
    1808:	4a400044 	addi	r9,r9,1
    180c:	42000084 	addi	r8,r8,2
void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1810:	617fea1e 	bne	r12,r5,17bc <__alt_data_end+0xff0017bc>
    1814:	6b400044 	addi	r13,r13,1
    1818:	23c9883a 	add	r4,r4,r15
    181c:	77dd883a 	add	r14,r14,ra

void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1820:	847fdb16 	blt	r16,r17,1790 <__alt_data_end+0xff001790>
//		  result += pgy_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}
    1824:	dfc00817 	ldw	ra,32(sp)
    1828:	ddc00717 	ldw	r23,28(sp)
    182c:	dd800617 	ldw	r22,24(sp)
    1830:	dd400517 	ldw	r21,20(sp)
    1834:	dd000417 	ldw	r20,16(sp)
    1838:	dcc00317 	ldw	r19,12(sp)
    183c:	dc800217 	ldw	r18,8(sp)
    1840:	dc400117 	ldw	r17,4(sp)
    1844:	dc000017 	ldw	r16,0(sp)
    1848:	dec00904 	addi	sp,sp,36
    184c:	f800283a 	ret

00001850 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1850:	defff604 	addi	sp,sp,-40
    1854:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1858:	d4e6d517 	ldw	r19,-25772(gp)
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    185c:	dfc00915 	stw	ra,36(sp)
    1860:	df000815 	stw	fp,32(sp)
    1864:	ddc00715 	stw	r23,28(sp)
    1868:	dd800615 	stw	r22,24(sp)
    186c:	dd400515 	stw	r21,20(sp)
    1870:	dd000415 	stw	r20,16(sp)
    1874:	dc800215 	stw	r18,8(sp)
    1878:	dc400115 	stw	r17,4(sp)
    187c:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1880:	9cffffc4 	addi	r19,r19,-1
    1884:	00800044 	movi	r2,1
    1888:	14c03f0e 	bge	r2,r19,1988 <sobel_y_with_rgb+0x138>
    188c:	d466d317 	ldw	r17,-25780(gp)
    1890:	d426d717 	ldw	r16,-25764(gp)
    1894:	d7e6d817 	ldw	ra,-25760(gp)
    1898:	8c5d883a 	add	r14,r17,r17
    189c:	75000084 	addi	r20,r14,2
    18a0:	03c00084 	movi	r15,2
    18a4:	8521883a 	add	r16,r16,r20
    18a8:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18ac:	782b883a 	mov	r21,r15
    18b0:	70ad883a 	add	r22,r14,r2
    18b4:	7825883a 	mov	r18,r15
    18b8:	ac402e0e 	bge	r21,r17,1974 <sobel_y_with_rgb+0x124>
    18bc:	238d883a 	add	r6,r4,r14
    18c0:	7825883a 	mov	r18,r15
    18c4:	22c00044 	addi	r11,r4,1
    18c8:	22800084 	addi	r10,r4,2
    18cc:	b113883a 	add	r9,r22,r4
    18d0:	a10b883a 	add	r5,r20,r4
    18d4:	899b883a 	add	r13,r17,r6
    18d8:	f819883a 	mov	r12,ra
    18dc:	8011883a 	mov	r8,r16
    18e0:	200f883a 	mov	r7,r4
    18e4:	00000b06 	br	1914 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    18e8:	180692fa 	slli	r3,r3,11
    18ec:	60c0000d 	sth	r3,0(r12)
    18f0:	29400044 	addi	r5,r5,1
    18f4:	39c00044 	addi	r7,r7,1
    18f8:	5ac00044 	addi	r11,r11,1
    18fc:	52800044 	addi	r10,r10,1
    1900:	31800044 	addi	r6,r6,1
    1904:	4a400044 	addi	r9,r9,1
    1908:	42000084 	addi	r8,r8,2
    190c:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1910:	69401826 	beq	r13,r5,1974 <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1914:	50800003 	ldbu	r2,0(r10)
    1918:	3f000003 	ldbu	fp,0(r7)
    191c:	58c00003 	ldbu	r3,0(r11)
    1920:	4dc00003 	ldbu	r23,0(r9)
    1924:	e0b9883a 	add	fp,fp,r2
    1928:	18c7883a 	add	r3,r3,r3
    192c:	30800003 	ldbu	r2,0(r6)
    1930:	e0c7883a 	add	r3,fp,r3
    1934:	1dc7c83a 	sub	r3,r3,r23
    1938:	2f000003 	ldbu	fp,0(r5)
    193c:	1dc7c83a 	sub	r3,r3,r23
    1940:	1885c83a 	sub	r2,r3,r2
    1944:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1948:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    194c:	10bfffcc 	andi	r2,r2,65535
    1950:	10a0001c 	xori	r2,r2,32768
    1954:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1958:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    195c:	103fe20e 	bge	r2,zero,18e8 <__alt_data_end+0xff0018e8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1960:	0085c83a 	sub	r2,zero,r2
    1964:	1005d0ba 	srai	r2,r2,2
    1968:	1004917a 	slli	r2,r2,5
    196c:	6080000d 	sth	r2,0(r12)
    1970:	003fdf06 	br	18f0 <__alt_data_end+0xff0018f0>
    1974:	7bc00044 	addi	r15,r15,1
    1978:	2449883a 	add	r4,r4,r17
    197c:	83a1883a 	add	r16,r16,r14
    1980:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1984:	94ffcb16 	blt	r18,r19,18b4 <__alt_data_end+0xff0018b4>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1988:	dfc00917 	ldw	ra,36(sp)
    198c:	df000817 	ldw	fp,32(sp)
    1990:	ddc00717 	ldw	r23,28(sp)
    1994:	dd800617 	ldw	r22,24(sp)
    1998:	dd400517 	ldw	r21,20(sp)
    199c:	dd000417 	ldw	r20,16(sp)
    19a0:	dcc00317 	ldw	r19,12(sp)
    19a4:	dc800217 	ldw	r18,8(sp)
    19a8:	dc400117 	ldw	r17,4(sp)
    19ac:	dc000017 	ldw	r16,0(sp)
    19b0:	dec00a04 	addi	sp,sp,40
    19b4:	f800283a 	ret

000019b8 <sobel_threshold>:

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    19b8:	d0a6d317 	ldw	r2,-25780(gp)
    19bc:	d2a6d517 	ldw	r10,-25772(gp)
	for(k = 1; k<kmax; k++)
    19c0:	01800044 	movi	r6,1
}

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    19c4:	5095383a 	mul	r10,r10,r2
	for(k = 1; k<kmax; k++)
    19c8:	3280210e 	bge	r6,r10,1a50 <sobel_threshold+0x98>
    19cc:	213fffcc 	andi	r4,r4,65535
    19d0:	2120001c 	xori	r4,r4,32768
    19d4:	21200004 	addi	r4,r4,-32768
	{
		value = sobel_x_result[k];
    19d8:	d166d617 	ldw	r5,-25768(gp)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19dc:	d0e6d717 	ldw	r3,-25764(gp)
    19e0:	3185883a 	add	r2,r6,r6
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    19e4:	288b883a 	add	r5,r5,r2
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19e8:	1887883a 	add	r3,r3,r2
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    19ec:	2880000b 	ldhu	r2,0(r5)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19f0:	1940000b 	ldhu	r5,0(r3)
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    19f4:	d266d417 	ldw	r9,-25776(gp)
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19f8:	11ffffcc 	andi	r7,r2,65535
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19fc:	2a3fffcc 	andi	r8,r5,65535
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a00:	39e0001c 	xori	r7,r7,32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a04:	4220001c 	xori	r8,r8,32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a08:	39e00004 	addi	r7,r7,-32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a0c:	42200004 	addi	r8,r8,-32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a10:	380fd7fa 	srai	r7,r7,31
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a14:	4011d7fa 	srai	r8,r8,31
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a18:	4993883a 	add	r9,r9,r6
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a1c:	3887883a 	add	r3,r7,r2
    1a20:	414b883a 	add	r5,r8,r5
    1a24:	414af03a 	xor	r5,r8,r5
    1a28:	38c4f03a 	xor	r2,r7,r3
    1a2c:	2885883a 	add	r2,r5,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a30:	10bfffcc 	andi	r2,r2,65535
    1a34:	10a0001c 	xori	r2,r2,32768
    1a38:	10a00004 	addi	r2,r2,-32768
    1a3c:	2084803a 	cmplt	r2,r4,r2
    1a40:	0085c83a 	sub	r2,zero,r2
    1a44:	48800005 	stb	r2,0(r9)

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
    1a48:	31800044 	addi	r6,r6,1
    1a4c:	51bfe21e 	bne	r10,r6,19d8 <__alt_data_end+0xff0019d8>
    1a50:	f800283a 	ret

00001a54 <sobel_complete>:
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a54:	defff604 	addi	sp,sp,-40
    1a58:	dc800215 	stw	r18,8(sp)
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
    1a5c:	d3a6d517 	ldw	r14,-25772(gp)
    1a60:	d4a6d317 	ldw	r18,-25780(gp)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a64:	dfc00915 	stw	ra,36(sp)
    1a68:	df000815 	stw	fp,32(sp)
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
    1a6c:	939d383a 	mul	r14,r18,r14
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a70:	ddc00715 	stw	r23,28(sp)
    1a74:	dd800615 	stw	r22,24(sp)
    1a78:	dd400515 	stw	r21,20(sp)
    1a7c:	dd000415 	stw	r20,16(sp)
    1a80:	dcc00315 	stw	r19,12(sp)
    1a84:	dc400115 	stw	r17,4(sp)
    1a88:	dc000015 	stw	r16,0(sp)
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
    1a8c:	00800044 	movi	r2,1
    1a90:	1380680e 	bge	r2,r14,1c34 <sobel_complete+0x1e0>
    1a94:	d1e6d617 	ldw	r7,-25768(gp)
    1a98:	0491c83a 	sub	r8,zero,r18
    1a9c:	2219883a 	add	r12,r4,r8
    1aa0:	2495c83a 	sub	r10,r4,r18
    1aa4:	9497883a 	add	r11,r18,r18
    1aa8:	92400084 	addi	r9,r18,2
    1aac:	52800084 	addi	r10,r10,2
    1ab0:	62e9883a 	add	r20,r12,r11
    1ab4:	2253883a 	add	r9,r4,r9
    1ab8:	70a7883a 	add	r19,r14,r2
    1abc:	2023883a 	mov	r17,r4
    1ac0:	21800084 	addi	r6,r4,2
    1ac4:	a021883a 	mov	r16,r20
    1ac8:	3fc00084 	addi	ra,r7,2
    1acc:	24e7883a 	add	r19,r4,r19
    1ad0:	481f883a 	mov	r15,r9
    1ad4:	501b883a 	mov	r13,r10
     result -= (source[k-1]<<1);			// x<<1 <=> x*=2
     // omitted line due to result += 0;
     result += (source[k+1]<<1);			// x<<1 <=> x*=2
     result -= source[k+sobel_width-1];
     // omitted line due to result += 0;
     result += source[k+sobel_width+1];
    1ad8:	6d400003 	ldbu	r21,0(r13)
    1adc:	7dc00003 	ldbu	r23,0(r15)
    1ae0:	67000003 	ldbu	fp,0(r12)
    1ae4:	30c00003 	ldbu	r3,0(r6)
    1ae8:	80800003 	ldbu	r2,0(r16)
    1aec:	8d800003 	ldbu	r22,0(r17)
    1af0:	adeb883a 	add	r21,r21,r23
    1af4:	af2bc83a 	sub	r21,r21,fp
    1af8:	18c7883a 	add	r3,r3,r3
    1afc:	a8c7883a 	add	r3,r21,r3
    1b00:	1887c83a 	sub	r3,r3,r2
    1b04:	b5ad883a 	add	r22,r22,r22
    1b08:	1d85c83a 	sub	r2,r3,r22
     sobel_x_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
    1b0c:	10ffffcc 	andi	r3,r2,65535
    1b10:	18e0001c 	xori	r3,r3,32768
    1b14:	18e00004 	addi	r3,r3,-32768
    1b18:	1807d7fa 	srai	r3,r3,31
    1b1c:	31800044 	addi	r6,r6,1
    1b20:	63000044 	addi	r12,r12,1
    1b24:	10c5883a 	add	r2,r2,r3
    1b28:	1884f03a 	xor	r2,r3,r2
    1b2c:	f880000d 	sth	r2,0(ra)
    1b30:	6b400044 	addi	r13,r13,1
    1b34:	8c400044 	addi	r17,r17,1
    1b38:	84000044 	addi	r16,r16,1
    1b3c:	7bc00044 	addi	r15,r15,1
    1b40:	ffc00084 	addi	ra,ra,2
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
    1b44:	34ffe41e 	bne	r6,r19,1ad8 <__alt_data_end+0xff001ad8>
    1b48:	d366d717 	ldw	r13,-25764(gp)
    1b4c:	4211883a 	add	r8,r8,r8
    1b50:	249fc83a 	sub	r15,r4,r18
    1b54:	a229883a 	add	r20,r20,r8
    1b58:	92000044 	addi	r8,r18,1
    1b5c:	74a5c83a 	sub	r18,r14,r18
    1b60:	2211883a 	add	r8,r4,r8
    1b64:	7bc00044 	addi	r15,r15,1
    1b68:	a2d7883a 	add	r11,r20,r11
    1b6c:	6c000084 	addi	r16,r13,2
    1b70:	2489883a 	add	r4,r4,r18
     result += (source[k-sobel_width]<<1);	// x<<1 <=> x*=2
     result += source[k-sobel_width+1];
     // omitted line due to result += 0;
     result -= source[k+sobel_width-1];
     result -= (source[k+sobel_width]<<1);	// x<<1 <=> x*=2
     result -= source[k+sobel_width+1];
    1b74:	51800003 	ldbu	r6,0(r10)
    1b78:	78c00003 	ldbu	r3,0(r15)
    1b7c:	a4400003 	ldbu	r17,0(r20)
    1b80:	5c800003 	ldbu	r18,0(r11)
    1b84:	48800003 	ldbu	r2,0(r9)
    1b88:	43000003 	ldbu	r12,0(r8)
    1b8c:	89a3883a 	add	r17,r17,r6
    1b90:	18cd883a 	add	r6,r3,r3
    1b94:	898d883a 	add	r6,r17,r6
    1b98:	3487c83a 	sub	r3,r6,r18
    1b9c:	1887c83a 	sub	r3,r3,r2
    1ba0:	6319883a 	add	r12,r12,r12
    1ba4:	1b05c83a 	sub	r2,r3,r12
     sobel_y_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
    1ba8:	10ffffcc 	andi	r3,r2,65535
    1bac:	18e0001c 	xori	r3,r3,32768
    1bb0:	18e00004 	addi	r3,r3,-32768
    1bb4:	1807d7fa 	srai	r3,r3,31
    1bb8:	7bc00044 	addi	r15,r15,1
    1bbc:	a5000044 	addi	r20,r20,1
    1bc0:	10c5883a 	add	r2,r2,r3
    1bc4:	1884f03a 	xor	r2,r3,r2
    1bc8:	8080000d 	sth	r2,0(r16)
    1bcc:	52800044 	addi	r10,r10,1
    1bd0:	5ac00044 	addi	r11,r11,1
    1bd4:	42000044 	addi	r8,r8,1
    1bd8:	4a400044 	addi	r9,r9,1
    1bdc:	84000084 	addi	r16,r16,2
     // omitted line due to result += 0;
     result += source[k+sobel_width+1];
     sobel_x_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
     result = 0;
   }
   for(k = 1; k<kmax; k++)
    1be0:	23ffe41e 	bne	r4,r15,1b74 <__alt_data_end+0xff001b74>
    1be4:	297fffcc 	andi	r5,r5,65535
    1be8:	2960001c 	xori	r5,r5,32768
    1bec:	29600004 	addi	r5,r5,-32768
    1bf0:	00c00044 	movi	r3,1
    1bf4:	00000206 	br	1c00 <sobel_complete+0x1ac>
    1bf8:	d1e6d617 	ldw	r7,-25768(gp)
    1bfc:	d366d717 	ldw	r13,-25764(gp)
    1c00:	18c5883a 	add	r2,r3,r3
     result = 0;
   }
   for(k = 1; k<kmax; k++)		// even if sobel_result doesn't use the cache, it is faster to create another loop here (because sobel x,y are using the cache)
   {
     // sobel_threshold in-lining
     sobel_result[k] = ((sobel_x_result[k]+sobel_y_result[k]) > threshold) ? 0xFF : 0;
    1c04:	388f883a 	add	r7,r7,r2
    1c08:	6889883a 	add	r4,r13,r2
    1c0c:	2080000f 	ldh	r2,0(r4)
    1c10:	3980000f 	ldh	r6,0(r7)
    1c14:	d126d417 	ldw	r4,-25776(gp)
    1c18:	3085883a 	add	r2,r6,r2
    1c1c:	2884803a 	cmplt	r2,r5,r2
    1c20:	20c9883a 	add	r4,r4,r3
    1c24:	0085c83a 	sub	r2,zero,r2
    1c28:	20800005 	stb	r2,0(r4)
     result -= (source[k+sobel_width]<<1);	// x<<1 <=> x*=2
     result -= source[k+sobel_width+1];
     sobel_y_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
     result = 0;
   }
   for(k = 1; k<kmax; k++)		// even if sobel_result doesn't use the cache, it is faster to create another loop here (because sobel x,y are using the cache)
    1c2c:	18c00044 	addi	r3,r3,1
    1c30:	1bbff116 	blt	r3,r14,1bf8 <__alt_data_end+0xff001bf8>
   {
     // sobel_threshold in-lining
     sobel_result[k] = ((sobel_x_result[k]+sobel_y_result[k]) > threshold) ? 0xFF : 0;
   }
}
    1c34:	dfc00917 	ldw	ra,36(sp)
    1c38:	df000817 	ldw	fp,32(sp)
    1c3c:	ddc00717 	ldw	r23,28(sp)
    1c40:	dd800617 	ldw	r22,24(sp)
    1c44:	dd400517 	ldw	r21,20(sp)
    1c48:	dd000417 	ldw	r20,16(sp)
    1c4c:	dcc00317 	ldw	r19,12(sp)
    1c50:	dc800217 	ldw	r18,8(sp)
    1c54:	dc400117 	ldw	r17,4(sp)
    1c58:	dc000017 	ldw	r16,0(sp)
    1c5c:	dec00a04 	addi	sp,sp,40
    1c60:	f800283a 	ret

00001c64 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1c64:	d0a6d817 	ldw	r2,-25760(gp)
    1c68:	f800283a 	ret

00001c6c <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1c6c:	d0a6d417 	ldw	r2,-25776(gp)
    1c70:	f800283a 	ret

00001c74 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1c74:	00804034 	movhi	r2,256
    1c78:	10843404 	addi	r2,r2,4304
    1c7c:	11000035 	stwio	r4,0(r2)
    1c80:	f800283a 	ret

00001c84 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1c84:	00804034 	movhi	r2,256
    1c88:	10843504 	addi	r2,r2,4308
    1c8c:	11000025 	stbio	r4,0(r2)
    1c90:	f800283a 	ret

00001c94 <malloc>:
    1c94:	00800074 	movhi	r2,1
    1c98:	1088f404 	addi	r2,r2,9168
    1c9c:	200b883a 	mov	r5,r4
    1ca0:	11000017 	ldw	r4,0(r2)
    1ca4:	0001cbc1 	jmpi	1cbc <_malloc_r>

00001ca8 <free>:
    1ca8:	00800074 	movhi	r2,1
    1cac:	1088f404 	addi	r2,r2,9168
    1cb0:	200b883a 	mov	r5,r4
    1cb4:	11000017 	ldw	r4,0(r2)
    1cb8:	0006b0c1 	jmpi	6b0c <_free_r>

00001cbc <_malloc_r>:
    1cbc:	defff504 	addi	sp,sp,-44
    1cc0:	dc800315 	stw	r18,12(sp)
    1cc4:	dfc00a15 	stw	ra,40(sp)
    1cc8:	df000915 	stw	fp,36(sp)
    1ccc:	ddc00815 	stw	r23,32(sp)
    1cd0:	dd800715 	stw	r22,28(sp)
    1cd4:	dd400615 	stw	r21,24(sp)
    1cd8:	dd000515 	stw	r20,20(sp)
    1cdc:	dcc00415 	stw	r19,16(sp)
    1ce0:	dc400215 	stw	r17,8(sp)
    1ce4:	dc000115 	stw	r16,4(sp)
    1ce8:	288002c4 	addi	r2,r5,11
    1cec:	00c00584 	movi	r3,22
    1cf0:	2025883a 	mov	r18,r4
    1cf4:	18807f2e 	bgeu	r3,r2,1ef4 <_malloc_r+0x238>
    1cf8:	047ffe04 	movi	r17,-8
    1cfc:	1462703a 	and	r17,r2,r17
    1d00:	8800a316 	blt	r17,zero,1f90 <_malloc_r+0x2d4>
    1d04:	8940a236 	bltu	r17,r5,1f90 <_malloc_r+0x2d4>
    1d08:	000e9440 	call	e944 <__malloc_lock>
    1d0c:	00807dc4 	movi	r2,503
    1d10:	1441e92e 	bgeu	r2,r17,24b8 <_malloc_r+0x7fc>
    1d14:	8804d27a 	srli	r2,r17,9
    1d18:	1000a126 	beq	r2,zero,1fa0 <_malloc_r+0x2e4>
    1d1c:	00c00104 	movi	r3,4
    1d20:	18811e36 	bltu	r3,r2,219c <_malloc_r+0x4e0>
    1d24:	8804d1ba 	srli	r2,r17,6
    1d28:	12000e44 	addi	r8,r2,57
    1d2c:	11c00e04 	addi	r7,r2,56
    1d30:	4209883a 	add	r4,r8,r8
    1d34:	04c00074 	movhi	r19,1
    1d38:	2109883a 	add	r4,r4,r4
    1d3c:	9cc24404 	addi	r19,r19,2320
    1d40:	2109883a 	add	r4,r4,r4
    1d44:	9909883a 	add	r4,r19,r4
    1d48:	24000117 	ldw	r16,4(r4)
    1d4c:	213ffe04 	addi	r4,r4,-8
    1d50:	24009726 	beq	r4,r16,1fb0 <_malloc_r+0x2f4>
    1d54:	80800117 	ldw	r2,4(r16)
    1d58:	01bfff04 	movi	r6,-4
    1d5c:	014003c4 	movi	r5,15
    1d60:	1184703a 	and	r2,r2,r6
    1d64:	1447c83a 	sub	r3,r2,r17
    1d68:	28c00716 	blt	r5,r3,1d88 <_malloc_r+0xcc>
    1d6c:	1800920e 	bge	r3,zero,1fb8 <_malloc_r+0x2fc>
    1d70:	84000317 	ldw	r16,12(r16)
    1d74:	24008e26 	beq	r4,r16,1fb0 <_malloc_r+0x2f4>
    1d78:	80800117 	ldw	r2,4(r16)
    1d7c:	1184703a 	and	r2,r2,r6
    1d80:	1447c83a 	sub	r3,r2,r17
    1d84:	28fff90e 	bge	r5,r3,1d6c <__alt_data_end+0xff001d6c>
    1d88:	3809883a 	mov	r4,r7
    1d8c:	01800074 	movhi	r6,1
    1d90:	9c000417 	ldw	r16,16(r19)
    1d94:	31824404 	addi	r6,r6,2320
    1d98:	32000204 	addi	r8,r6,8
    1d9c:	82013426 	beq	r16,r8,2270 <_malloc_r+0x5b4>
    1da0:	80c00117 	ldw	r3,4(r16)
    1da4:	00bfff04 	movi	r2,-4
    1da8:	188e703a 	and	r7,r3,r2
    1dac:	3c45c83a 	sub	r2,r7,r17
    1db0:	00c003c4 	movi	r3,15
    1db4:	18811f16 	blt	r3,r2,2234 <_malloc_r+0x578>
    1db8:	32000515 	stw	r8,20(r6)
    1dbc:	32000415 	stw	r8,16(r6)
    1dc0:	10007f0e 	bge	r2,zero,1fc0 <_malloc_r+0x304>
    1dc4:	00807fc4 	movi	r2,511
    1dc8:	11c0fd36 	bltu	r2,r7,21c0 <_malloc_r+0x504>
    1dcc:	3806d0fa 	srli	r3,r7,3
    1dd0:	01c00044 	movi	r7,1
    1dd4:	30800117 	ldw	r2,4(r6)
    1dd8:	19400044 	addi	r5,r3,1
    1ddc:	294b883a 	add	r5,r5,r5
    1de0:	1807d0ba 	srai	r3,r3,2
    1de4:	294b883a 	add	r5,r5,r5
    1de8:	294b883a 	add	r5,r5,r5
    1dec:	298b883a 	add	r5,r5,r6
    1df0:	38c6983a 	sll	r3,r7,r3
    1df4:	29c00017 	ldw	r7,0(r5)
    1df8:	2a7ffe04 	addi	r9,r5,-8
    1dfc:	1886b03a 	or	r3,r3,r2
    1e00:	82400315 	stw	r9,12(r16)
    1e04:	81c00215 	stw	r7,8(r16)
    1e08:	30c00115 	stw	r3,4(r6)
    1e0c:	2c000015 	stw	r16,0(r5)
    1e10:	3c000315 	stw	r16,12(r7)
    1e14:	2005d0ba 	srai	r2,r4,2
    1e18:	01400044 	movi	r5,1
    1e1c:	288a983a 	sll	r5,r5,r2
    1e20:	19406f36 	bltu	r3,r5,1fe0 <_malloc_r+0x324>
    1e24:	28c4703a 	and	r2,r5,r3
    1e28:	10000a1e 	bne	r2,zero,1e54 <_malloc_r+0x198>
    1e2c:	00bfff04 	movi	r2,-4
    1e30:	294b883a 	add	r5,r5,r5
    1e34:	2088703a 	and	r4,r4,r2
    1e38:	28c4703a 	and	r2,r5,r3
    1e3c:	21000104 	addi	r4,r4,4
    1e40:	1000041e 	bne	r2,zero,1e54 <_malloc_r+0x198>
    1e44:	294b883a 	add	r5,r5,r5
    1e48:	28c4703a 	and	r2,r5,r3
    1e4c:	21000104 	addi	r4,r4,4
    1e50:	103ffc26 	beq	r2,zero,1e44 <__alt_data_end+0xff001e44>
    1e54:	02bfff04 	movi	r10,-4
    1e58:	024003c4 	movi	r9,15
    1e5c:	21800044 	addi	r6,r4,1
    1e60:	318d883a 	add	r6,r6,r6
    1e64:	318d883a 	add	r6,r6,r6
    1e68:	318d883a 	add	r6,r6,r6
    1e6c:	998d883a 	add	r6,r19,r6
    1e70:	333ffe04 	addi	r12,r6,-8
    1e74:	2017883a 	mov	r11,r4
    1e78:	31800104 	addi	r6,r6,4
    1e7c:	34000017 	ldw	r16,0(r6)
    1e80:	31fffd04 	addi	r7,r6,-12
    1e84:	81c0041e 	bne	r16,r7,1e98 <_malloc_r+0x1dc>
    1e88:	0000fb06 	br	2278 <_malloc_r+0x5bc>
    1e8c:	1801030e 	bge	r3,zero,229c <_malloc_r+0x5e0>
    1e90:	84000317 	ldw	r16,12(r16)
    1e94:	81c0f826 	beq	r16,r7,2278 <_malloc_r+0x5bc>
    1e98:	80800117 	ldw	r2,4(r16)
    1e9c:	1284703a 	and	r2,r2,r10
    1ea0:	1447c83a 	sub	r3,r2,r17
    1ea4:	48fff90e 	bge	r9,r3,1e8c <__alt_data_end+0xff001e8c>
    1ea8:	80800317 	ldw	r2,12(r16)
    1eac:	81000217 	ldw	r4,8(r16)
    1eb0:	89400054 	ori	r5,r17,1
    1eb4:	81400115 	stw	r5,4(r16)
    1eb8:	20800315 	stw	r2,12(r4)
    1ebc:	11000215 	stw	r4,8(r2)
    1ec0:	8463883a 	add	r17,r16,r17
    1ec4:	9c400515 	stw	r17,20(r19)
    1ec8:	9c400415 	stw	r17,16(r19)
    1ecc:	18800054 	ori	r2,r3,1
    1ed0:	88800115 	stw	r2,4(r17)
    1ed4:	8a000315 	stw	r8,12(r17)
    1ed8:	8a000215 	stw	r8,8(r17)
    1edc:	88e3883a 	add	r17,r17,r3
    1ee0:	88c00015 	stw	r3,0(r17)
    1ee4:	9009883a 	mov	r4,r18
    1ee8:	000e9480 	call	e948 <__malloc_unlock>
    1eec:	80800204 	addi	r2,r16,8
    1ef0:	00001b06 	br	1f60 <_malloc_r+0x2a4>
    1ef4:	04400404 	movi	r17,16
    1ef8:	89402536 	bltu	r17,r5,1f90 <_malloc_r+0x2d4>
    1efc:	000e9440 	call	e944 <__malloc_lock>
    1f00:	00800184 	movi	r2,6
    1f04:	01000084 	movi	r4,2
    1f08:	04c00074 	movhi	r19,1
    1f0c:	1085883a 	add	r2,r2,r2
    1f10:	9cc24404 	addi	r19,r19,2320
    1f14:	1085883a 	add	r2,r2,r2
    1f18:	9885883a 	add	r2,r19,r2
    1f1c:	14000117 	ldw	r16,4(r2)
    1f20:	10fffe04 	addi	r3,r2,-8
    1f24:	80c0d926 	beq	r16,r3,228c <_malloc_r+0x5d0>
    1f28:	80c00117 	ldw	r3,4(r16)
    1f2c:	81000317 	ldw	r4,12(r16)
    1f30:	00bfff04 	movi	r2,-4
    1f34:	1884703a 	and	r2,r3,r2
    1f38:	81400217 	ldw	r5,8(r16)
    1f3c:	8085883a 	add	r2,r16,r2
    1f40:	10c00117 	ldw	r3,4(r2)
    1f44:	29000315 	stw	r4,12(r5)
    1f48:	21400215 	stw	r5,8(r4)
    1f4c:	18c00054 	ori	r3,r3,1
    1f50:	10c00115 	stw	r3,4(r2)
    1f54:	9009883a 	mov	r4,r18
    1f58:	000e9480 	call	e948 <__malloc_unlock>
    1f5c:	80800204 	addi	r2,r16,8
    1f60:	dfc00a17 	ldw	ra,40(sp)
    1f64:	df000917 	ldw	fp,36(sp)
    1f68:	ddc00817 	ldw	r23,32(sp)
    1f6c:	dd800717 	ldw	r22,28(sp)
    1f70:	dd400617 	ldw	r21,24(sp)
    1f74:	dd000517 	ldw	r20,20(sp)
    1f78:	dcc00417 	ldw	r19,16(sp)
    1f7c:	dc800317 	ldw	r18,12(sp)
    1f80:	dc400217 	ldw	r17,8(sp)
    1f84:	dc000117 	ldw	r16,4(sp)
    1f88:	dec00b04 	addi	sp,sp,44
    1f8c:	f800283a 	ret
    1f90:	00800304 	movi	r2,12
    1f94:	90800015 	stw	r2,0(r18)
    1f98:	0005883a 	mov	r2,zero
    1f9c:	003ff006 	br	1f60 <__alt_data_end+0xff001f60>
    1fa0:	01002004 	movi	r4,128
    1fa4:	02001004 	movi	r8,64
    1fa8:	01c00fc4 	movi	r7,63
    1fac:	003f6106 	br	1d34 <__alt_data_end+0xff001d34>
    1fb0:	4009883a 	mov	r4,r8
    1fb4:	003f7506 	br	1d8c <__alt_data_end+0xff001d8c>
    1fb8:	81000317 	ldw	r4,12(r16)
    1fbc:	003fde06 	br	1f38 <__alt_data_end+0xff001f38>
    1fc0:	81c5883a 	add	r2,r16,r7
    1fc4:	11400117 	ldw	r5,4(r2)
    1fc8:	9009883a 	mov	r4,r18
    1fcc:	29400054 	ori	r5,r5,1
    1fd0:	11400115 	stw	r5,4(r2)
    1fd4:	000e9480 	call	e948 <__malloc_unlock>
    1fd8:	80800204 	addi	r2,r16,8
    1fdc:	003fe006 	br	1f60 <__alt_data_end+0xff001f60>
    1fe0:	9c000217 	ldw	r16,8(r19)
    1fe4:	00bfff04 	movi	r2,-4
    1fe8:	85800117 	ldw	r22,4(r16)
    1fec:	b0ac703a 	and	r22,r22,r2
    1ff0:	b4400336 	bltu	r22,r17,2000 <_malloc_r+0x344>
    1ff4:	b445c83a 	sub	r2,r22,r17
    1ff8:	00c003c4 	movi	r3,15
    1ffc:	18805d16 	blt	r3,r2,2174 <_malloc_r+0x4b8>
    2000:	05c00074 	movhi	r23,1
    2004:	00800074 	movhi	r2,1
    2008:	108fca04 	addi	r2,r2,16168
    200c:	bdc8f104 	addi	r23,r23,9156
    2010:	15400017 	ldw	r21,0(r2)
    2014:	b8c00017 	ldw	r3,0(r23)
    2018:	00bfffc4 	movi	r2,-1
    201c:	858d883a 	add	r6,r16,r22
    2020:	8d6b883a 	add	r21,r17,r21
    2024:	1880ea26 	beq	r3,r2,23d0 <_malloc_r+0x714>
    2028:	ad4403c4 	addi	r21,r21,4111
    202c:	00bc0004 	movi	r2,-4096
    2030:	a8aa703a 	and	r21,r21,r2
    2034:	a80b883a 	mov	r5,r21
    2038:	9009883a 	mov	r4,r18
    203c:	d9800015 	stw	r6,0(sp)
    2040:	00026080 	call	2608 <_sbrk_r>
    2044:	1029883a 	mov	r20,r2
    2048:	00bfffc4 	movi	r2,-1
    204c:	d9800017 	ldw	r6,0(sp)
    2050:	a080e826 	beq	r20,r2,23f4 <_malloc_r+0x738>
    2054:	a180a636 	bltu	r20,r6,22f0 <_malloc_r+0x634>
    2058:	07000074 	movhi	fp,1
    205c:	e70fd804 	addi	fp,fp,16224
    2060:	e0800017 	ldw	r2,0(fp)
    2064:	a887883a 	add	r3,r21,r2
    2068:	e0c00015 	stw	r3,0(fp)
    206c:	3500e626 	beq	r6,r20,2408 <_malloc_r+0x74c>
    2070:	b9000017 	ldw	r4,0(r23)
    2074:	00bfffc4 	movi	r2,-1
    2078:	2080ee26 	beq	r4,r2,2434 <_malloc_r+0x778>
    207c:	a185c83a 	sub	r2,r20,r6
    2080:	10c5883a 	add	r2,r2,r3
    2084:	e0800015 	stw	r2,0(fp)
    2088:	a0c001cc 	andi	r3,r20,7
    208c:	1800bc26 	beq	r3,zero,2380 <_malloc_r+0x6c4>
    2090:	a0e9c83a 	sub	r20,r20,r3
    2094:	00840204 	movi	r2,4104
    2098:	a5000204 	addi	r20,r20,8
    209c:	10c7c83a 	sub	r3,r2,r3
    20a0:	a545883a 	add	r2,r20,r21
    20a4:	1083ffcc 	andi	r2,r2,4095
    20a8:	18abc83a 	sub	r21,r3,r2
    20ac:	a80b883a 	mov	r5,r21
    20b0:	9009883a 	mov	r4,r18
    20b4:	00026080 	call	2608 <_sbrk_r>
    20b8:	00ffffc4 	movi	r3,-1
    20bc:	10c0e126 	beq	r2,r3,2444 <_malloc_r+0x788>
    20c0:	1505c83a 	sub	r2,r2,r20
    20c4:	1545883a 	add	r2,r2,r21
    20c8:	10800054 	ori	r2,r2,1
    20cc:	e0c00017 	ldw	r3,0(fp)
    20d0:	9d000215 	stw	r20,8(r19)
    20d4:	a0800115 	stw	r2,4(r20)
    20d8:	a8c7883a 	add	r3,r21,r3
    20dc:	e0c00015 	stw	r3,0(fp)
    20e0:	84c00e26 	beq	r16,r19,211c <_malloc_r+0x460>
    20e4:	018003c4 	movi	r6,15
    20e8:	3580a72e 	bgeu	r6,r22,2388 <_malloc_r+0x6cc>
    20ec:	81400117 	ldw	r5,4(r16)
    20f0:	013ffe04 	movi	r4,-8
    20f4:	b0bffd04 	addi	r2,r22,-12
    20f8:	1104703a 	and	r2,r2,r4
    20fc:	2900004c 	andi	r4,r5,1
    2100:	2088b03a 	or	r4,r4,r2
    2104:	81000115 	stw	r4,4(r16)
    2108:	01400144 	movi	r5,5
    210c:	8089883a 	add	r4,r16,r2
    2110:	21400115 	stw	r5,4(r4)
    2114:	21400215 	stw	r5,8(r4)
    2118:	3080cd36 	bltu	r6,r2,2450 <_malloc_r+0x794>
    211c:	00800074 	movhi	r2,1
    2120:	108fc904 	addi	r2,r2,16164
    2124:	11000017 	ldw	r4,0(r2)
    2128:	20c0012e 	bgeu	r4,r3,2130 <_malloc_r+0x474>
    212c:	10c00015 	stw	r3,0(r2)
    2130:	00800074 	movhi	r2,1
    2134:	108fc804 	addi	r2,r2,16160
    2138:	11000017 	ldw	r4,0(r2)
    213c:	9c000217 	ldw	r16,8(r19)
    2140:	20c0012e 	bgeu	r4,r3,2148 <_malloc_r+0x48c>
    2144:	10c00015 	stw	r3,0(r2)
    2148:	80c00117 	ldw	r3,4(r16)
    214c:	00bfff04 	movi	r2,-4
    2150:	1886703a 	and	r3,r3,r2
    2154:	1c45c83a 	sub	r2,r3,r17
    2158:	1c400236 	bltu	r3,r17,2164 <_malloc_r+0x4a8>
    215c:	00c003c4 	movi	r3,15
    2160:	18800416 	blt	r3,r2,2174 <_malloc_r+0x4b8>
    2164:	9009883a 	mov	r4,r18
    2168:	000e9480 	call	e948 <__malloc_unlock>
    216c:	0005883a 	mov	r2,zero
    2170:	003f7b06 	br	1f60 <__alt_data_end+0xff001f60>
    2174:	88c00054 	ori	r3,r17,1
    2178:	80c00115 	stw	r3,4(r16)
    217c:	8463883a 	add	r17,r16,r17
    2180:	10800054 	ori	r2,r2,1
    2184:	9c400215 	stw	r17,8(r19)
    2188:	88800115 	stw	r2,4(r17)
    218c:	9009883a 	mov	r4,r18
    2190:	000e9480 	call	e948 <__malloc_unlock>
    2194:	80800204 	addi	r2,r16,8
    2198:	003f7106 	br	1f60 <__alt_data_end+0xff001f60>
    219c:	00c00504 	movi	r3,20
    21a0:	18804a2e 	bgeu	r3,r2,22cc <_malloc_r+0x610>
    21a4:	00c01504 	movi	r3,84
    21a8:	18806e36 	bltu	r3,r2,2364 <_malloc_r+0x6a8>
    21ac:	8804d33a 	srli	r2,r17,12
    21b0:	12001bc4 	addi	r8,r2,111
    21b4:	11c01b84 	addi	r7,r2,110
    21b8:	4209883a 	add	r4,r8,r8
    21bc:	003edd06 	br	1d34 <__alt_data_end+0xff001d34>
    21c0:	3804d27a 	srli	r2,r7,9
    21c4:	00c00104 	movi	r3,4
    21c8:	1880442e 	bgeu	r3,r2,22dc <_malloc_r+0x620>
    21cc:	00c00504 	movi	r3,20
    21d0:	18808136 	bltu	r3,r2,23d8 <_malloc_r+0x71c>
    21d4:	11401704 	addi	r5,r2,92
    21d8:	10c016c4 	addi	r3,r2,91
    21dc:	294b883a 	add	r5,r5,r5
    21e0:	294b883a 	add	r5,r5,r5
    21e4:	294b883a 	add	r5,r5,r5
    21e8:	994b883a 	add	r5,r19,r5
    21ec:	28800017 	ldw	r2,0(r5)
    21f0:	01800074 	movhi	r6,1
    21f4:	297ffe04 	addi	r5,r5,-8
    21f8:	31824404 	addi	r6,r6,2320
    21fc:	28806526 	beq	r5,r2,2394 <_malloc_r+0x6d8>
    2200:	01bfff04 	movi	r6,-4
    2204:	10c00117 	ldw	r3,4(r2)
    2208:	1986703a 	and	r3,r3,r6
    220c:	38c0022e 	bgeu	r7,r3,2218 <_malloc_r+0x55c>
    2210:	10800217 	ldw	r2,8(r2)
    2214:	28bffb1e 	bne	r5,r2,2204 <__alt_data_end+0xff002204>
    2218:	11400317 	ldw	r5,12(r2)
    221c:	98c00117 	ldw	r3,4(r19)
    2220:	81400315 	stw	r5,12(r16)
    2224:	80800215 	stw	r2,8(r16)
    2228:	2c000215 	stw	r16,8(r5)
    222c:	14000315 	stw	r16,12(r2)
    2230:	003ef806 	br	1e14 <__alt_data_end+0xff001e14>
    2234:	88c00054 	ori	r3,r17,1
    2238:	80c00115 	stw	r3,4(r16)
    223c:	8463883a 	add	r17,r16,r17
    2240:	34400515 	stw	r17,20(r6)
    2244:	34400415 	stw	r17,16(r6)
    2248:	10c00054 	ori	r3,r2,1
    224c:	8a000315 	stw	r8,12(r17)
    2250:	8a000215 	stw	r8,8(r17)
    2254:	88c00115 	stw	r3,4(r17)
    2258:	88a3883a 	add	r17,r17,r2
    225c:	88800015 	stw	r2,0(r17)
    2260:	9009883a 	mov	r4,r18
    2264:	000e9480 	call	e948 <__malloc_unlock>
    2268:	80800204 	addi	r2,r16,8
    226c:	003f3c06 	br	1f60 <__alt_data_end+0xff001f60>
    2270:	30c00117 	ldw	r3,4(r6)
    2274:	003ee706 	br	1e14 <__alt_data_end+0xff001e14>
    2278:	5ac00044 	addi	r11,r11,1
    227c:	588000cc 	andi	r2,r11,3
    2280:	31800204 	addi	r6,r6,8
    2284:	103efd1e 	bne	r2,zero,1e7c <__alt_data_end+0xff001e7c>
    2288:	00002406 	br	231c <_malloc_r+0x660>
    228c:	14000317 	ldw	r16,12(r2)
    2290:	143f251e 	bne	r2,r16,1f28 <__alt_data_end+0xff001f28>
    2294:	21000084 	addi	r4,r4,2
    2298:	003ebc06 	br	1d8c <__alt_data_end+0xff001d8c>
    229c:	8085883a 	add	r2,r16,r2
    22a0:	10c00117 	ldw	r3,4(r2)
    22a4:	81000317 	ldw	r4,12(r16)
    22a8:	81400217 	ldw	r5,8(r16)
    22ac:	18c00054 	ori	r3,r3,1
    22b0:	10c00115 	stw	r3,4(r2)
    22b4:	29000315 	stw	r4,12(r5)
    22b8:	21400215 	stw	r5,8(r4)
    22bc:	9009883a 	mov	r4,r18
    22c0:	000e9480 	call	e948 <__malloc_unlock>
    22c4:	80800204 	addi	r2,r16,8
    22c8:	003f2506 	br	1f60 <__alt_data_end+0xff001f60>
    22cc:	12001704 	addi	r8,r2,92
    22d0:	11c016c4 	addi	r7,r2,91
    22d4:	4209883a 	add	r4,r8,r8
    22d8:	003e9606 	br	1d34 <__alt_data_end+0xff001d34>
    22dc:	3804d1ba 	srli	r2,r7,6
    22e0:	11400e44 	addi	r5,r2,57
    22e4:	10c00e04 	addi	r3,r2,56
    22e8:	294b883a 	add	r5,r5,r5
    22ec:	003fbc06 	br	21e0 <__alt_data_end+0xff0021e0>
    22f0:	84ff5926 	beq	r16,r19,2058 <__alt_data_end+0xff002058>
    22f4:	00800074 	movhi	r2,1
    22f8:	10824404 	addi	r2,r2,2320
    22fc:	14000217 	ldw	r16,8(r2)
    2300:	00bfff04 	movi	r2,-4
    2304:	80c00117 	ldw	r3,4(r16)
    2308:	1886703a 	and	r3,r3,r2
    230c:	003f9106 	br	2154 <__alt_data_end+0xff002154>
    2310:	60800217 	ldw	r2,8(r12)
    2314:	213fffc4 	addi	r4,r4,-1
    2318:	1300651e 	bne	r2,r12,24b0 <_malloc_r+0x7f4>
    231c:	208000cc 	andi	r2,r4,3
    2320:	633ffe04 	addi	r12,r12,-8
    2324:	103ffa1e 	bne	r2,zero,2310 <__alt_data_end+0xff002310>
    2328:	98800117 	ldw	r2,4(r19)
    232c:	0146303a 	nor	r3,zero,r5
    2330:	1884703a 	and	r2,r3,r2
    2334:	98800115 	stw	r2,4(r19)
    2338:	294b883a 	add	r5,r5,r5
    233c:	117f2836 	bltu	r2,r5,1fe0 <__alt_data_end+0xff001fe0>
    2340:	283f2726 	beq	r5,zero,1fe0 <__alt_data_end+0xff001fe0>
    2344:	2886703a 	and	r3,r5,r2
    2348:	5809883a 	mov	r4,r11
    234c:	183ec31e 	bne	r3,zero,1e5c <__alt_data_end+0xff001e5c>
    2350:	294b883a 	add	r5,r5,r5
    2354:	2886703a 	and	r3,r5,r2
    2358:	21000104 	addi	r4,r4,4
    235c:	183ffc26 	beq	r3,zero,2350 <__alt_data_end+0xff002350>
    2360:	003ebe06 	br	1e5c <__alt_data_end+0xff001e5c>
    2364:	00c05504 	movi	r3,340
    2368:	18801236 	bltu	r3,r2,23b4 <_malloc_r+0x6f8>
    236c:	8804d3fa 	srli	r2,r17,15
    2370:	12001e04 	addi	r8,r2,120
    2374:	11c01dc4 	addi	r7,r2,119
    2378:	4209883a 	add	r4,r8,r8
    237c:	003e6d06 	br	1d34 <__alt_data_end+0xff001d34>
    2380:	00c40004 	movi	r3,4096
    2384:	003f4606 	br	20a0 <__alt_data_end+0xff0020a0>
    2388:	00800044 	movi	r2,1
    238c:	a0800115 	stw	r2,4(r20)
    2390:	003f7406 	br	2164 <__alt_data_end+0xff002164>
    2394:	1805d0ba 	srai	r2,r3,2
    2398:	01c00044 	movi	r7,1
    239c:	30c00117 	ldw	r3,4(r6)
    23a0:	388e983a 	sll	r7,r7,r2
    23a4:	2805883a 	mov	r2,r5
    23a8:	38c6b03a 	or	r3,r7,r3
    23ac:	30c00115 	stw	r3,4(r6)
    23b0:	003f9b06 	br	2220 <__alt_data_end+0xff002220>
    23b4:	00c15504 	movi	r3,1364
    23b8:	18801a36 	bltu	r3,r2,2424 <_malloc_r+0x768>
    23bc:	8804d4ba 	srli	r2,r17,18
    23c0:	12001f44 	addi	r8,r2,125
    23c4:	11c01f04 	addi	r7,r2,124
    23c8:	4209883a 	add	r4,r8,r8
    23cc:	003e5906 	br	1d34 <__alt_data_end+0xff001d34>
    23d0:	ad400404 	addi	r21,r21,16
    23d4:	003f1706 	br	2034 <__alt_data_end+0xff002034>
    23d8:	00c01504 	movi	r3,84
    23dc:	18802336 	bltu	r3,r2,246c <_malloc_r+0x7b0>
    23e0:	3804d33a 	srli	r2,r7,12
    23e4:	11401bc4 	addi	r5,r2,111
    23e8:	10c01b84 	addi	r3,r2,110
    23ec:	294b883a 	add	r5,r5,r5
    23f0:	003f7b06 	br	21e0 <__alt_data_end+0xff0021e0>
    23f4:	9c000217 	ldw	r16,8(r19)
    23f8:	00bfff04 	movi	r2,-4
    23fc:	80c00117 	ldw	r3,4(r16)
    2400:	1886703a 	and	r3,r3,r2
    2404:	003f5306 	br	2154 <__alt_data_end+0xff002154>
    2408:	3083ffcc 	andi	r2,r6,4095
    240c:	103f181e 	bne	r2,zero,2070 <__alt_data_end+0xff002070>
    2410:	99000217 	ldw	r4,8(r19)
    2414:	b545883a 	add	r2,r22,r21
    2418:	10800054 	ori	r2,r2,1
    241c:	20800115 	stw	r2,4(r4)
    2420:	003f3e06 	br	211c <__alt_data_end+0xff00211c>
    2424:	01003f84 	movi	r4,254
    2428:	02001fc4 	movi	r8,127
    242c:	01c01f84 	movi	r7,126
    2430:	003e4006 	br	1d34 <__alt_data_end+0xff001d34>
    2434:	00800074 	movhi	r2,1
    2438:	1088f104 	addi	r2,r2,9156
    243c:	15000015 	stw	r20,0(r2)
    2440:	003f1106 	br	2088 <__alt_data_end+0xff002088>
    2444:	00800044 	movi	r2,1
    2448:	002b883a 	mov	r21,zero
    244c:	003f1f06 	br	20cc <__alt_data_end+0xff0020cc>
    2450:	81400204 	addi	r5,r16,8
    2454:	9009883a 	mov	r4,r18
    2458:	0006b0c0 	call	6b0c <_free_r>
    245c:	00800074 	movhi	r2,1
    2460:	108fd804 	addi	r2,r2,16224
    2464:	10c00017 	ldw	r3,0(r2)
    2468:	003f2c06 	br	211c <__alt_data_end+0xff00211c>
    246c:	00c05504 	movi	r3,340
    2470:	18800536 	bltu	r3,r2,2488 <_malloc_r+0x7cc>
    2474:	3804d3fa 	srli	r2,r7,15
    2478:	11401e04 	addi	r5,r2,120
    247c:	10c01dc4 	addi	r3,r2,119
    2480:	294b883a 	add	r5,r5,r5
    2484:	003f5606 	br	21e0 <__alt_data_end+0xff0021e0>
    2488:	00c15504 	movi	r3,1364
    248c:	18800536 	bltu	r3,r2,24a4 <_malloc_r+0x7e8>
    2490:	3804d4ba 	srli	r2,r7,18
    2494:	11401f44 	addi	r5,r2,125
    2498:	10c01f04 	addi	r3,r2,124
    249c:	294b883a 	add	r5,r5,r5
    24a0:	003f4f06 	br	21e0 <__alt_data_end+0xff0021e0>
    24a4:	01403f84 	movi	r5,254
    24a8:	00c01f84 	movi	r3,126
    24ac:	003f4c06 	br	21e0 <__alt_data_end+0xff0021e0>
    24b0:	98800117 	ldw	r2,4(r19)
    24b4:	003fa006 	br	2338 <__alt_data_end+0xff002338>
    24b8:	8808d0fa 	srli	r4,r17,3
    24bc:	20800044 	addi	r2,r4,1
    24c0:	1085883a 	add	r2,r2,r2
    24c4:	003e9006 	br	1f08 <__alt_data_end+0xff001f08>

000024c8 <_printf_r>:
    24c8:	defffd04 	addi	sp,sp,-12
    24cc:	2805883a 	mov	r2,r5
    24d0:	dfc00015 	stw	ra,0(sp)
    24d4:	d9800115 	stw	r6,4(sp)
    24d8:	d9c00215 	stw	r7,8(sp)
    24dc:	21400217 	ldw	r5,8(r4)
    24e0:	d9c00104 	addi	r7,sp,4
    24e4:	100d883a 	mov	r6,r2
    24e8:	00026f40 	call	26f4 <___vfprintf_internal_r>
    24ec:	dfc00017 	ldw	ra,0(sp)
    24f0:	dec00304 	addi	sp,sp,12
    24f4:	f800283a 	ret

000024f8 <printf>:
    24f8:	defffc04 	addi	sp,sp,-16
    24fc:	dfc00015 	stw	ra,0(sp)
    2500:	d9400115 	stw	r5,4(sp)
    2504:	d9800215 	stw	r6,8(sp)
    2508:	d9c00315 	stw	r7,12(sp)
    250c:	00800074 	movhi	r2,1
    2510:	1088f404 	addi	r2,r2,9168
    2514:	10800017 	ldw	r2,0(r2)
    2518:	200b883a 	mov	r5,r4
    251c:	d9800104 	addi	r6,sp,4
    2520:	11000217 	ldw	r4,8(r2)
    2524:	00048ec0 	call	48ec <__vfprintf_internal>
    2528:	dfc00017 	ldw	ra,0(sp)
    252c:	dec00404 	addi	sp,sp,16
    2530:	f800283a 	ret

00002534 <_puts_r>:
    2534:	defff604 	addi	sp,sp,-40
    2538:	dc000715 	stw	r16,28(sp)
    253c:	2021883a 	mov	r16,r4
    2540:	2809883a 	mov	r4,r5
    2544:	dc400815 	stw	r17,32(sp)
    2548:	dfc00915 	stw	ra,36(sp)
    254c:	2823883a 	mov	r17,r5
    2550:	000265c0 	call	265c <strlen>
    2554:	10c00044 	addi	r3,r2,1
    2558:	d8800115 	stw	r2,4(sp)
    255c:	00800074 	movhi	r2,1
    2560:	10818a04 	addi	r2,r2,1576
    2564:	d8800215 	stw	r2,8(sp)
    2568:	00800044 	movi	r2,1
    256c:	d8800315 	stw	r2,12(sp)
    2570:	00800084 	movi	r2,2
    2574:	dc400015 	stw	r17,0(sp)
    2578:	d8c00615 	stw	r3,24(sp)
    257c:	dec00415 	stw	sp,16(sp)
    2580:	d8800515 	stw	r2,20(sp)
    2584:	80000226 	beq	r16,zero,2590 <_puts_r+0x5c>
    2588:	80800e17 	ldw	r2,56(r16)
    258c:	10001426 	beq	r2,zero,25e0 <_puts_r+0xac>
    2590:	81400217 	ldw	r5,8(r16)
    2594:	2880030b 	ldhu	r2,12(r5)
    2598:	10c8000c 	andi	r3,r2,8192
    259c:	1800061e 	bne	r3,zero,25b8 <_puts_r+0x84>
    25a0:	29001917 	ldw	r4,100(r5)
    25a4:	00f7ffc4 	movi	r3,-8193
    25a8:	10880014 	ori	r2,r2,8192
    25ac:	20c6703a 	and	r3,r4,r3
    25b0:	2880030d 	sth	r2,12(r5)
    25b4:	28c01915 	stw	r3,100(r5)
    25b8:	d9800404 	addi	r6,sp,16
    25bc:	8009883a 	mov	r4,r16
    25c0:	0006e1c0 	call	6e1c <__sfvwrite_r>
    25c4:	1000091e 	bne	r2,zero,25ec <_puts_r+0xb8>
    25c8:	00800284 	movi	r2,10
    25cc:	dfc00917 	ldw	ra,36(sp)
    25d0:	dc400817 	ldw	r17,32(sp)
    25d4:	dc000717 	ldw	r16,28(sp)
    25d8:	dec00a04 	addi	sp,sp,40
    25dc:	f800283a 	ret
    25e0:	8009883a 	mov	r4,r16
    25e4:	00069980 	call	6998 <__sinit>
    25e8:	003fe906 	br	2590 <__alt_data_end+0xff002590>
    25ec:	00bfffc4 	movi	r2,-1
    25f0:	003ff606 	br	25cc <__alt_data_end+0xff0025cc>

000025f4 <puts>:
    25f4:	00800074 	movhi	r2,1
    25f8:	1088f404 	addi	r2,r2,9168
    25fc:	200b883a 	mov	r5,r4
    2600:	11000017 	ldw	r4,0(r2)
    2604:	00025341 	jmpi	2534 <_puts_r>

00002608 <_sbrk_r>:
    2608:	defffd04 	addi	sp,sp,-12
    260c:	dc000015 	stw	r16,0(sp)
    2610:	04000074 	movhi	r16,1
    2614:	dc400115 	stw	r17,4(sp)
    2618:	840fcb04 	addi	r16,r16,16172
    261c:	2023883a 	mov	r17,r4
    2620:	2809883a 	mov	r4,r5
    2624:	dfc00215 	stw	ra,8(sp)
    2628:	80000015 	stw	zero,0(r16)
    262c:	000ea380 	call	ea38 <sbrk>
    2630:	00ffffc4 	movi	r3,-1
    2634:	10c00526 	beq	r2,r3,264c <_sbrk_r+0x44>
    2638:	dfc00217 	ldw	ra,8(sp)
    263c:	dc400117 	ldw	r17,4(sp)
    2640:	dc000017 	ldw	r16,0(sp)
    2644:	dec00304 	addi	sp,sp,12
    2648:	f800283a 	ret
    264c:	80c00017 	ldw	r3,0(r16)
    2650:	183ff926 	beq	r3,zero,2638 <__alt_data_end+0xff002638>
    2654:	88c00015 	stw	r3,0(r17)
    2658:	003ff706 	br	2638 <__alt_data_end+0xff002638>

0000265c <strlen>:
    265c:	208000cc 	andi	r2,r4,3
    2660:	10002026 	beq	r2,zero,26e4 <strlen+0x88>
    2664:	20800007 	ldb	r2,0(r4)
    2668:	10002026 	beq	r2,zero,26ec <strlen+0x90>
    266c:	2005883a 	mov	r2,r4
    2670:	00000206 	br	267c <strlen+0x20>
    2674:	10c00007 	ldb	r3,0(r2)
    2678:	18001826 	beq	r3,zero,26dc <strlen+0x80>
    267c:	10800044 	addi	r2,r2,1
    2680:	10c000cc 	andi	r3,r2,3
    2684:	183ffb1e 	bne	r3,zero,2674 <__alt_data_end+0xff002674>
    2688:	10c00017 	ldw	r3,0(r2)
    268c:	01ffbff4 	movhi	r7,65279
    2690:	39ffbfc4 	addi	r7,r7,-257
    2694:	00ca303a 	nor	r5,zero,r3
    2698:	01a02074 	movhi	r6,32897
    269c:	19c7883a 	add	r3,r3,r7
    26a0:	31a02004 	addi	r6,r6,-32640
    26a4:	1946703a 	and	r3,r3,r5
    26a8:	1986703a 	and	r3,r3,r6
    26ac:	1800091e 	bne	r3,zero,26d4 <strlen+0x78>
    26b0:	10800104 	addi	r2,r2,4
    26b4:	10c00017 	ldw	r3,0(r2)
    26b8:	19cb883a 	add	r5,r3,r7
    26bc:	00c6303a 	nor	r3,zero,r3
    26c0:	28c6703a 	and	r3,r5,r3
    26c4:	1986703a 	and	r3,r3,r6
    26c8:	183ff926 	beq	r3,zero,26b0 <__alt_data_end+0xff0026b0>
    26cc:	00000106 	br	26d4 <strlen+0x78>
    26d0:	10800044 	addi	r2,r2,1
    26d4:	10c00007 	ldb	r3,0(r2)
    26d8:	183ffd1e 	bne	r3,zero,26d0 <__alt_data_end+0xff0026d0>
    26dc:	1105c83a 	sub	r2,r2,r4
    26e0:	f800283a 	ret
    26e4:	2005883a 	mov	r2,r4
    26e8:	003fe706 	br	2688 <__alt_data_end+0xff002688>
    26ec:	0005883a 	mov	r2,zero
    26f0:	f800283a 	ret

000026f4 <___vfprintf_internal_r>:
    26f4:	deffb804 	addi	sp,sp,-288
    26f8:	dfc04715 	stw	ra,284(sp)
    26fc:	ddc04515 	stw	r23,276(sp)
    2700:	dd404315 	stw	r21,268(sp)
    2704:	d9002c15 	stw	r4,176(sp)
    2708:	282f883a 	mov	r23,r5
    270c:	302b883a 	mov	r21,r6
    2710:	d9c02d15 	stw	r7,180(sp)
    2714:	df004615 	stw	fp,280(sp)
    2718:	dd804415 	stw	r22,272(sp)
    271c:	dd004215 	stw	r20,264(sp)
    2720:	dcc04115 	stw	r19,260(sp)
    2724:	dc804015 	stw	r18,256(sp)
    2728:	dc403f15 	stw	r17,252(sp)
    272c:	dc003e15 	stw	r16,248(sp)
    2730:	000750c0 	call	750c <_localeconv_r>
    2734:	10800017 	ldw	r2,0(r2)
    2738:	1009883a 	mov	r4,r2
    273c:	d8803415 	stw	r2,208(sp)
    2740:	000265c0 	call	265c <strlen>
    2744:	d8803715 	stw	r2,220(sp)
    2748:	d8802c17 	ldw	r2,176(sp)
    274c:	10000226 	beq	r2,zero,2758 <___vfprintf_internal_r+0x64>
    2750:	10800e17 	ldw	r2,56(r2)
    2754:	1000f926 	beq	r2,zero,2b3c <___vfprintf_internal_r+0x448>
    2758:	b880030b 	ldhu	r2,12(r23)
    275c:	10c8000c 	andi	r3,r2,8192
    2760:	1800061e 	bne	r3,zero,277c <___vfprintf_internal_r+0x88>
    2764:	b9001917 	ldw	r4,100(r23)
    2768:	00f7ffc4 	movi	r3,-8193
    276c:	10880014 	ori	r2,r2,8192
    2770:	20c6703a 	and	r3,r4,r3
    2774:	b880030d 	sth	r2,12(r23)
    2778:	b8c01915 	stw	r3,100(r23)
    277c:	10c0020c 	andi	r3,r2,8
    2780:	1800c126 	beq	r3,zero,2a88 <___vfprintf_internal_r+0x394>
    2784:	b8c00417 	ldw	r3,16(r23)
    2788:	1800bf26 	beq	r3,zero,2a88 <___vfprintf_internal_r+0x394>
    278c:	1080068c 	andi	r2,r2,26
    2790:	00c00284 	movi	r3,10
    2794:	10c0c426 	beq	r2,r3,2aa8 <___vfprintf_internal_r+0x3b4>
    2798:	d8c00404 	addi	r3,sp,16
    279c:	05000074 	movhi	r20,1
    27a0:	d9001e04 	addi	r4,sp,120
    27a4:	a5019b84 	addi	r20,r20,1646
    27a8:	d8c01e15 	stw	r3,120(sp)
    27ac:	d8002015 	stw	zero,128(sp)
    27b0:	d8001f15 	stw	zero,124(sp)
    27b4:	d8003315 	stw	zero,204(sp)
    27b8:	d8003615 	stw	zero,216(sp)
    27bc:	d8003815 	stw	zero,224(sp)
    27c0:	1811883a 	mov	r8,r3
    27c4:	d8003915 	stw	zero,228(sp)
    27c8:	d8003a15 	stw	zero,232(sp)
    27cc:	d8002f15 	stw	zero,188(sp)
    27d0:	d9002815 	stw	r4,160(sp)
    27d4:	a8800007 	ldb	r2,0(r21)
    27d8:	10027b26 	beq	r2,zero,31c8 <___vfprintf_internal_r+0xad4>
    27dc:	00c00944 	movi	r3,37
    27e0:	a821883a 	mov	r16,r21
    27e4:	10c0021e 	bne	r2,r3,27f0 <___vfprintf_internal_r+0xfc>
    27e8:	00001406 	br	283c <___vfprintf_internal_r+0x148>
    27ec:	10c00326 	beq	r2,r3,27fc <___vfprintf_internal_r+0x108>
    27f0:	84000044 	addi	r16,r16,1
    27f4:	80800007 	ldb	r2,0(r16)
    27f8:	103ffc1e 	bne	r2,zero,27ec <__alt_data_end+0xff0027ec>
    27fc:	8563c83a 	sub	r17,r16,r21
    2800:	88000e26 	beq	r17,zero,283c <___vfprintf_internal_r+0x148>
    2804:	d8c02017 	ldw	r3,128(sp)
    2808:	d8801f17 	ldw	r2,124(sp)
    280c:	45400015 	stw	r21,0(r8)
    2810:	1c47883a 	add	r3,r3,r17
    2814:	10800044 	addi	r2,r2,1
    2818:	d8c02015 	stw	r3,128(sp)
    281c:	44400115 	stw	r17,4(r8)
    2820:	d8801f15 	stw	r2,124(sp)
    2824:	00c001c4 	movi	r3,7
    2828:	1880a716 	blt	r3,r2,2ac8 <___vfprintf_internal_r+0x3d4>
    282c:	42000204 	addi	r8,r8,8
    2830:	d9402f17 	ldw	r5,188(sp)
    2834:	2c4b883a 	add	r5,r5,r17
    2838:	d9402f15 	stw	r5,188(sp)
    283c:	80800007 	ldb	r2,0(r16)
    2840:	1000a826 	beq	r2,zero,2ae4 <___vfprintf_internal_r+0x3f0>
    2844:	84400047 	ldb	r17,1(r16)
    2848:	00bfffc4 	movi	r2,-1
    284c:	85400044 	addi	r21,r16,1
    2850:	d8002785 	stb	zero,158(sp)
    2854:	0007883a 	mov	r3,zero
    2858:	000f883a 	mov	r7,zero
    285c:	d8802915 	stw	r2,164(sp)
    2860:	d8003115 	stw	zero,196(sp)
    2864:	0025883a 	mov	r18,zero
    2868:	01401604 	movi	r5,88
    286c:	01800244 	movi	r6,9
    2870:	02800a84 	movi	r10,42
    2874:	02401b04 	movi	r9,108
    2878:	ad400044 	addi	r21,r21,1
    287c:	88bff804 	addi	r2,r17,-32
    2880:	28830436 	bltu	r5,r2,3494 <___vfprintf_internal_r+0xda0>
    2884:	100490ba 	slli	r2,r2,2
    2888:	01000034 	movhi	r4,0
    288c:	210a2704 	addi	r4,r4,10396
    2890:	1105883a 	add	r2,r2,r4
    2894:	10800017 	ldw	r2,0(r2)
    2898:	1000683a 	jmp	r2
    289c:	000033b4 	movhi	zero,206
    28a0:	00003494 	movui	zero,210
    28a4:	00003494 	movui	zero,210
    28a8:	000033d4 	movui	zero,207
    28ac:	00003494 	movui	zero,210
    28b0:	00003494 	movui	zero,210
    28b4:	00003494 	movui	zero,210
    28b8:	00003494 	movui	zero,210
    28bc:	00003494 	movui	zero,210
    28c0:	00003494 	movui	zero,210
    28c4:	00002b48 	cmpgei	zero,zero,173
    28c8:	000032f0 	cmpltui	zero,zero,203
    28cc:	00003494 	movui	zero,210
    28d0:	00002a10 	cmplti	zero,zero,168
    28d4:	00002b70 	cmpltui	zero,zero,173
    28d8:	00003494 	movui	zero,210
    28dc:	00002bb0 	cmpltui	zero,zero,174
    28e0:	00002bbc 	xorhi	zero,zero,174
    28e4:	00002bbc 	xorhi	zero,zero,174
    28e8:	00002bbc 	xorhi	zero,zero,174
    28ec:	00002bbc 	xorhi	zero,zero,174
    28f0:	00002bbc 	xorhi	zero,zero,174
    28f4:	00002bbc 	xorhi	zero,zero,174
    28f8:	00002bbc 	xorhi	zero,zero,174
    28fc:	00002bbc 	xorhi	zero,zero,174
    2900:	00002bbc 	xorhi	zero,zero,174
    2904:	00003494 	movui	zero,210
    2908:	00003494 	movui	zero,210
    290c:	00003494 	movui	zero,210
    2910:	00003494 	movui	zero,210
    2914:	00003494 	movui	zero,210
    2918:	00003494 	movui	zero,210
    291c:	00003494 	movui	zero,210
    2920:	00003494 	movui	zero,210
    2924:	00003494 	movui	zero,210
    2928:	00003494 	movui	zero,210
    292c:	00002bf0 	cmpltui	zero,zero,175
    2930:	00002cac 	andhi	zero,zero,178
    2934:	00003494 	movui	zero,210
    2938:	00002cac 	andhi	zero,zero,178
    293c:	00003494 	movui	zero,210
    2940:	00003494 	movui	zero,210
    2944:	00003494 	movui	zero,210
    2948:	00003494 	movui	zero,210
    294c:	00002d4c 	andi	zero,zero,181
    2950:	00003494 	movui	zero,210
    2954:	00003494 	movui	zero,210
    2958:	00002d58 	cmpnei	zero,zero,181
    295c:	00003494 	movui	zero,210
    2960:	00003494 	movui	zero,210
    2964:	00003494 	movui	zero,210
    2968:	00003494 	movui	zero,210
    296c:	00003494 	movui	zero,210
    2970:	000031d0 	cmplti	zero,zero,199
    2974:	00003494 	movui	zero,210
    2978:	00003494 	movui	zero,210
    297c:	00003230 	cmpltui	zero,zero,200
    2980:	00003494 	movui	zero,210
    2984:	00003494 	movui	zero,210
    2988:	00003494 	movui	zero,210
    298c:	00003494 	movui	zero,210
    2990:	00003494 	movui	zero,210
    2994:	00003494 	movui	zero,210
    2998:	00003494 	movui	zero,210
    299c:	00003494 	movui	zero,210
    29a0:	00003494 	movui	zero,210
    29a4:	00003494 	movui	zero,210
    29a8:	00003440 	call	344 <init_camera+0x16c>
    29ac:	000033e0 	cmpeqi	zero,zero,207
    29b0:	00002cac 	andhi	zero,zero,178
    29b4:	00002cac 	andhi	zero,zero,178
    29b8:	00002cac 	andhi	zero,zero,178
    29bc:	000033f0 	cmpltui	zero,zero,207
    29c0:	000033e0 	cmpeqi	zero,zero,207
    29c4:	00003494 	movui	zero,210
    29c8:	00003494 	movui	zero,210
    29cc:	000033fc 	xorhi	zero,zero,207
    29d0:	00003494 	movui	zero,210
    29d4:	0000340c 	andi	zero,zero,208
    29d8:	000032e0 	cmpeqi	zero,zero,203
    29dc:	00002a1c 	xori	zero,zero,168
    29e0:	00003300 	call	330 <init_camera+0x158>
    29e4:	00003494 	movui	zero,210
    29e8:	0000330c 	andi	zero,zero,204
    29ec:	00003494 	movui	zero,210
    29f0:	00003368 	cmpgeui	zero,zero,205
    29f4:	00003494 	movui	zero,210
    29f8:	00003494 	movui	zero,210
    29fc:	00003378 	rdprs	zero,zero,205
    2a00:	d9003117 	ldw	r4,196(sp)
    2a04:	d8802d15 	stw	r2,180(sp)
    2a08:	0109c83a 	sub	r4,zero,r4
    2a0c:	d9003115 	stw	r4,196(sp)
    2a10:	94800114 	ori	r18,r18,4
    2a14:	ac400007 	ldb	r17,0(r21)
    2a18:	003f9706 	br	2878 <__alt_data_end+0xff002878>
    2a1c:	00800c04 	movi	r2,48
    2a20:	d9002d17 	ldw	r4,180(sp)
    2a24:	d9402917 	ldw	r5,164(sp)
    2a28:	d8802705 	stb	r2,156(sp)
    2a2c:	00801e04 	movi	r2,120
    2a30:	d8802745 	stb	r2,157(sp)
    2a34:	d8002785 	stb	zero,158(sp)
    2a38:	20c00104 	addi	r3,r4,4
    2a3c:	24c00017 	ldw	r19,0(r4)
    2a40:	002d883a 	mov	r22,zero
    2a44:	90800094 	ori	r2,r18,2
    2a48:	28029a16 	blt	r5,zero,34b4 <___vfprintf_internal_r+0xdc0>
    2a4c:	00bfdfc4 	movi	r2,-129
    2a50:	90a4703a 	and	r18,r18,r2
    2a54:	d8c02d15 	stw	r3,180(sp)
    2a58:	94800094 	ori	r18,r18,2
    2a5c:	9802871e 	bne	r19,zero,347c <___vfprintf_internal_r+0xd88>
    2a60:	00800074 	movhi	r2,1
    2a64:	10819404 	addi	r2,r2,1616
    2a68:	d8803915 	stw	r2,228(sp)
    2a6c:	04401e04 	movi	r17,120
    2a70:	d8802917 	ldw	r2,164(sp)
    2a74:	0039883a 	mov	fp,zero
    2a78:	1001e926 	beq	r2,zero,3220 <___vfprintf_internal_r+0xb2c>
    2a7c:	0027883a 	mov	r19,zero
    2a80:	002d883a 	mov	r22,zero
    2a84:	00020506 	br	329c <___vfprintf_internal_r+0xba8>
    2a88:	d9002c17 	ldw	r4,176(sp)
    2a8c:	b80b883a 	mov	r5,r23
    2a90:	00049c40 	call	49c4 <__swsetup_r>
    2a94:	1005ac1e 	bne	r2,zero,4148 <___vfprintf_internal_r+0x1a54>
    2a98:	b880030b 	ldhu	r2,12(r23)
    2a9c:	00c00284 	movi	r3,10
    2aa0:	1080068c 	andi	r2,r2,26
    2aa4:	10ff3c1e 	bne	r2,r3,2798 <__alt_data_end+0xff002798>
    2aa8:	b880038f 	ldh	r2,14(r23)
    2aac:	103f3a16 	blt	r2,zero,2798 <__alt_data_end+0xff002798>
    2ab0:	d9c02d17 	ldw	r7,180(sp)
    2ab4:	d9002c17 	ldw	r4,176(sp)
    2ab8:	a80d883a 	mov	r6,r21
    2abc:	b80b883a 	mov	r5,r23
    2ac0:	00049080 	call	4908 <__sbprintf>
    2ac4:	00001106 	br	2b0c <___vfprintf_internal_r+0x418>
    2ac8:	d9002c17 	ldw	r4,176(sp)
    2acc:	d9801e04 	addi	r6,sp,120
    2ad0:	b80b883a 	mov	r5,r23
    2ad4:	00094900 	call	9490 <__sprint_r>
    2ad8:	1000081e 	bne	r2,zero,2afc <___vfprintf_internal_r+0x408>
    2adc:	da000404 	addi	r8,sp,16
    2ae0:	003f5306 	br	2830 <__alt_data_end+0xff002830>
    2ae4:	d8802017 	ldw	r2,128(sp)
    2ae8:	10000426 	beq	r2,zero,2afc <___vfprintf_internal_r+0x408>
    2aec:	d9002c17 	ldw	r4,176(sp)
    2af0:	d9801e04 	addi	r6,sp,120
    2af4:	b80b883a 	mov	r5,r23
    2af8:	00094900 	call	9490 <__sprint_r>
    2afc:	b880030b 	ldhu	r2,12(r23)
    2b00:	1080100c 	andi	r2,r2,64
    2b04:	1005901e 	bne	r2,zero,4148 <___vfprintf_internal_r+0x1a54>
    2b08:	d8802f17 	ldw	r2,188(sp)
    2b0c:	dfc04717 	ldw	ra,284(sp)
    2b10:	df004617 	ldw	fp,280(sp)
    2b14:	ddc04517 	ldw	r23,276(sp)
    2b18:	dd804417 	ldw	r22,272(sp)
    2b1c:	dd404317 	ldw	r21,268(sp)
    2b20:	dd004217 	ldw	r20,264(sp)
    2b24:	dcc04117 	ldw	r19,260(sp)
    2b28:	dc804017 	ldw	r18,256(sp)
    2b2c:	dc403f17 	ldw	r17,252(sp)
    2b30:	dc003e17 	ldw	r16,248(sp)
    2b34:	dec04804 	addi	sp,sp,288
    2b38:	f800283a 	ret
    2b3c:	d9002c17 	ldw	r4,176(sp)
    2b40:	00069980 	call	6998 <__sinit>
    2b44:	003f0406 	br	2758 <__alt_data_end+0xff002758>
    2b48:	d8802d17 	ldw	r2,180(sp)
    2b4c:	d9002d17 	ldw	r4,180(sp)
    2b50:	10800017 	ldw	r2,0(r2)
    2b54:	d8803115 	stw	r2,196(sp)
    2b58:	20800104 	addi	r2,r4,4
    2b5c:	d9003117 	ldw	r4,196(sp)
    2b60:	203fa716 	blt	r4,zero,2a00 <__alt_data_end+0xff002a00>
    2b64:	d8802d15 	stw	r2,180(sp)
    2b68:	ac400007 	ldb	r17,0(r21)
    2b6c:	003f4206 	br	2878 <__alt_data_end+0xff002878>
    2b70:	ac400007 	ldb	r17,0(r21)
    2b74:	aac00044 	addi	r11,r21,1
    2b78:	8a872826 	beq	r17,r10,481c <___vfprintf_internal_r+0x2128>
    2b7c:	88bff404 	addi	r2,r17,-48
    2b80:	0009883a 	mov	r4,zero
    2b84:	30867d36 	bltu	r6,r2,457c <___vfprintf_internal_r+0x1e88>
    2b88:	5c400007 	ldb	r17,0(r11)
    2b8c:	210002a4 	muli	r4,r4,10
    2b90:	5d400044 	addi	r21,r11,1
    2b94:	a817883a 	mov	r11,r21
    2b98:	2089883a 	add	r4,r4,r2
    2b9c:	88bff404 	addi	r2,r17,-48
    2ba0:	30bff92e 	bgeu	r6,r2,2b88 <__alt_data_end+0xff002b88>
    2ba4:	2005c916 	blt	r4,zero,42cc <___vfprintf_internal_r+0x1bd8>
    2ba8:	d9002915 	stw	r4,164(sp)
    2bac:	003f3306 	br	287c <__alt_data_end+0xff00287c>
    2bb0:	94802014 	ori	r18,r18,128
    2bb4:	ac400007 	ldb	r17,0(r21)
    2bb8:	003f2f06 	br	2878 <__alt_data_end+0xff002878>
    2bbc:	a809883a 	mov	r4,r21
    2bc0:	d8003115 	stw	zero,196(sp)
    2bc4:	88bff404 	addi	r2,r17,-48
    2bc8:	0017883a 	mov	r11,zero
    2bcc:	24400007 	ldb	r17,0(r4)
    2bd0:	5ac002a4 	muli	r11,r11,10
    2bd4:	ad400044 	addi	r21,r21,1
    2bd8:	a809883a 	mov	r4,r21
    2bdc:	12d7883a 	add	r11,r2,r11
    2be0:	88bff404 	addi	r2,r17,-48
    2be4:	30bff92e 	bgeu	r6,r2,2bcc <__alt_data_end+0xff002bcc>
    2be8:	dac03115 	stw	r11,196(sp)
    2bec:	003f2306 	br	287c <__alt_data_end+0xff00287c>
    2bf0:	18c03fcc 	andi	r3,r3,255
    2bf4:	18072b1e 	bne	r3,zero,48a4 <___vfprintf_internal_r+0x21b0>
    2bf8:	94800414 	ori	r18,r18,16
    2bfc:	9080080c 	andi	r2,r18,32
    2c00:	10037b26 	beq	r2,zero,39f0 <___vfprintf_internal_r+0x12fc>
    2c04:	d9402d17 	ldw	r5,180(sp)
    2c08:	28800117 	ldw	r2,4(r5)
    2c0c:	2cc00017 	ldw	r19,0(r5)
    2c10:	29400204 	addi	r5,r5,8
    2c14:	d9402d15 	stw	r5,180(sp)
    2c18:	102d883a 	mov	r22,r2
    2c1c:	10044b16 	blt	r2,zero,3d4c <___vfprintf_internal_r+0x1658>
    2c20:	d9402917 	ldw	r5,164(sp)
    2c24:	df002783 	ldbu	fp,158(sp)
    2c28:	2803bc16 	blt	r5,zero,3b1c <___vfprintf_internal_r+0x1428>
    2c2c:	00ffdfc4 	movi	r3,-129
    2c30:	9d84b03a 	or	r2,r19,r22
    2c34:	90e4703a 	and	r18,r18,r3
    2c38:	10017726 	beq	r2,zero,3218 <___vfprintf_internal_r+0xb24>
    2c3c:	b0038326 	beq	r22,zero,3a4c <___vfprintf_internal_r+0x1358>
    2c40:	dc402a15 	stw	r17,168(sp)
    2c44:	dc001e04 	addi	r16,sp,120
    2c48:	b023883a 	mov	r17,r22
    2c4c:	402d883a 	mov	r22,r8
    2c50:	9809883a 	mov	r4,r19
    2c54:	880b883a 	mov	r5,r17
    2c58:	01800284 	movi	r6,10
    2c5c:	000f883a 	mov	r7,zero
    2c60:	000b8880 	call	b888 <__umoddi3>
    2c64:	10800c04 	addi	r2,r2,48
    2c68:	843fffc4 	addi	r16,r16,-1
    2c6c:	9809883a 	mov	r4,r19
    2c70:	880b883a 	mov	r5,r17
    2c74:	80800005 	stb	r2,0(r16)
    2c78:	01800284 	movi	r6,10
    2c7c:	000f883a 	mov	r7,zero
    2c80:	000b3100 	call	b310 <__udivdi3>
    2c84:	1027883a 	mov	r19,r2
    2c88:	10c4b03a 	or	r2,r2,r3
    2c8c:	1823883a 	mov	r17,r3
    2c90:	103fef1e 	bne	r2,zero,2c50 <__alt_data_end+0xff002c50>
    2c94:	d8c02817 	ldw	r3,160(sp)
    2c98:	dc402a17 	ldw	r17,168(sp)
    2c9c:	b011883a 	mov	r8,r22
    2ca0:	1c07c83a 	sub	r3,r3,r16
    2ca4:	d8c02e15 	stw	r3,184(sp)
    2ca8:	00005906 	br	2e10 <___vfprintf_internal_r+0x71c>
    2cac:	18c03fcc 	andi	r3,r3,255
    2cb0:	1806fa1e 	bne	r3,zero,489c <___vfprintf_internal_r+0x21a8>
    2cb4:	9080020c 	andi	r2,r18,8
    2cb8:	10048a26 	beq	r2,zero,3ee4 <___vfprintf_internal_r+0x17f0>
    2cbc:	d8c02d17 	ldw	r3,180(sp)
    2cc0:	d9002d17 	ldw	r4,180(sp)
    2cc4:	d9402d17 	ldw	r5,180(sp)
    2cc8:	18c00017 	ldw	r3,0(r3)
    2ccc:	21000117 	ldw	r4,4(r4)
    2cd0:	29400204 	addi	r5,r5,8
    2cd4:	d8c03615 	stw	r3,216(sp)
    2cd8:	d9003815 	stw	r4,224(sp)
    2cdc:	d9402d15 	stw	r5,180(sp)
    2ce0:	d9003617 	ldw	r4,216(sp)
    2ce4:	d9403817 	ldw	r5,224(sp)
    2ce8:	da003d15 	stw	r8,244(sp)
    2cec:	04000044 	movi	r16,1
    2cf0:	00091080 	call	9108 <__fpclassifyd>
    2cf4:	da003d17 	ldw	r8,244(sp)
    2cf8:	14041f1e 	bne	r2,r16,3d78 <___vfprintf_internal_r+0x1684>
    2cfc:	d9003617 	ldw	r4,216(sp)
    2d00:	d9403817 	ldw	r5,224(sp)
    2d04:	000d883a 	mov	r6,zero
    2d08:	000f883a 	mov	r7,zero
    2d0c:	000d26c0 	call	d26c <__ledf2>
    2d10:	da003d17 	ldw	r8,244(sp)
    2d14:	1005be16 	blt	r2,zero,4410 <___vfprintf_internal_r+0x1d1c>
    2d18:	df002783 	ldbu	fp,158(sp)
    2d1c:	008011c4 	movi	r2,71
    2d20:	1445330e 	bge	r2,r17,41f0 <___vfprintf_internal_r+0x1afc>
    2d24:	04000074 	movhi	r16,1
    2d28:	84018c04 	addi	r16,r16,1584
    2d2c:	00c000c4 	movi	r3,3
    2d30:	00bfdfc4 	movi	r2,-129
    2d34:	d8c02a15 	stw	r3,168(sp)
    2d38:	90a4703a 	and	r18,r18,r2
    2d3c:	d8c02e15 	stw	r3,184(sp)
    2d40:	d8002915 	stw	zero,164(sp)
    2d44:	d8003215 	stw	zero,200(sp)
    2d48:	00003706 	br	2e28 <___vfprintf_internal_r+0x734>
    2d4c:	94800214 	ori	r18,r18,8
    2d50:	ac400007 	ldb	r17,0(r21)
    2d54:	003ec806 	br	2878 <__alt_data_end+0xff002878>
    2d58:	18c03fcc 	andi	r3,r3,255
    2d5c:	1806db1e 	bne	r3,zero,48cc <___vfprintf_internal_r+0x21d8>
    2d60:	94800414 	ori	r18,r18,16
    2d64:	9080080c 	andi	r2,r18,32
    2d68:	1002d826 	beq	r2,zero,38cc <___vfprintf_internal_r+0x11d8>
    2d6c:	d9402d17 	ldw	r5,180(sp)
    2d70:	d8c02917 	ldw	r3,164(sp)
    2d74:	d8002785 	stb	zero,158(sp)
    2d78:	28800204 	addi	r2,r5,8
    2d7c:	2cc00017 	ldw	r19,0(r5)
    2d80:	2d800117 	ldw	r22,4(r5)
    2d84:	18048f16 	blt	r3,zero,3fc4 <___vfprintf_internal_r+0x18d0>
    2d88:	013fdfc4 	movi	r4,-129
    2d8c:	9d86b03a 	or	r3,r19,r22
    2d90:	d8802d15 	stw	r2,180(sp)
    2d94:	9124703a 	and	r18,r18,r4
    2d98:	1802d91e 	bne	r3,zero,3900 <___vfprintf_internal_r+0x120c>
    2d9c:	d8c02917 	ldw	r3,164(sp)
    2da0:	0039883a 	mov	fp,zero
    2da4:	1805c326 	beq	r3,zero,44b4 <___vfprintf_internal_r+0x1dc0>
    2da8:	0027883a 	mov	r19,zero
    2dac:	002d883a 	mov	r22,zero
    2db0:	dc001e04 	addi	r16,sp,120
    2db4:	9806d0fa 	srli	r3,r19,3
    2db8:	b008977a 	slli	r4,r22,29
    2dbc:	b02cd0fa 	srli	r22,r22,3
    2dc0:	9cc001cc 	andi	r19,r19,7
    2dc4:	98800c04 	addi	r2,r19,48
    2dc8:	843fffc4 	addi	r16,r16,-1
    2dcc:	20e6b03a 	or	r19,r4,r3
    2dd0:	80800005 	stb	r2,0(r16)
    2dd4:	9d86b03a 	or	r3,r19,r22
    2dd8:	183ff61e 	bne	r3,zero,2db4 <__alt_data_end+0xff002db4>
    2ddc:	90c0004c 	andi	r3,r18,1
    2de0:	18013b26 	beq	r3,zero,32d0 <___vfprintf_internal_r+0xbdc>
    2de4:	10803fcc 	andi	r2,r2,255
    2de8:	1080201c 	xori	r2,r2,128
    2dec:	10bfe004 	addi	r2,r2,-128
    2df0:	00c00c04 	movi	r3,48
    2df4:	10c13626 	beq	r2,r3,32d0 <___vfprintf_internal_r+0xbdc>
    2df8:	80ffffc5 	stb	r3,-1(r16)
    2dfc:	d8c02817 	ldw	r3,160(sp)
    2e00:	80bfffc4 	addi	r2,r16,-1
    2e04:	1021883a 	mov	r16,r2
    2e08:	1887c83a 	sub	r3,r3,r2
    2e0c:	d8c02e15 	stw	r3,184(sp)
    2e10:	d8802e17 	ldw	r2,184(sp)
    2e14:	d9002917 	ldw	r4,164(sp)
    2e18:	1100010e 	bge	r2,r4,2e20 <___vfprintf_internal_r+0x72c>
    2e1c:	2005883a 	mov	r2,r4
    2e20:	d8802a15 	stw	r2,168(sp)
    2e24:	d8003215 	stw	zero,200(sp)
    2e28:	e7003fcc 	andi	fp,fp,255
    2e2c:	e700201c 	xori	fp,fp,128
    2e30:	e73fe004 	addi	fp,fp,-128
    2e34:	e0000326 	beq	fp,zero,2e44 <___vfprintf_internal_r+0x750>
    2e38:	d8c02a17 	ldw	r3,168(sp)
    2e3c:	18c00044 	addi	r3,r3,1
    2e40:	d8c02a15 	stw	r3,168(sp)
    2e44:	90c0008c 	andi	r3,r18,2
    2e48:	d8c02b15 	stw	r3,172(sp)
    2e4c:	18000326 	beq	r3,zero,2e5c <___vfprintf_internal_r+0x768>
    2e50:	d8c02a17 	ldw	r3,168(sp)
    2e54:	18c00084 	addi	r3,r3,2
    2e58:	d8c02a15 	stw	r3,168(sp)
    2e5c:	90c0210c 	andi	r3,r18,132
    2e60:	d8c03015 	stw	r3,192(sp)
    2e64:	1801a31e 	bne	r3,zero,34f4 <___vfprintf_internal_r+0xe00>
    2e68:	d9003117 	ldw	r4,196(sp)
    2e6c:	d8c02a17 	ldw	r3,168(sp)
    2e70:	20e7c83a 	sub	r19,r4,r3
    2e74:	04c19f0e 	bge	zero,r19,34f4 <___vfprintf_internal_r+0xe00>
    2e78:	02400404 	movi	r9,16
    2e7c:	d8c02017 	ldw	r3,128(sp)
    2e80:	d8801f17 	ldw	r2,124(sp)
    2e84:	4cc50d0e 	bge	r9,r19,42bc <___vfprintf_internal_r+0x1bc8>
    2e88:	01400074 	movhi	r5,1
    2e8c:	29419f84 	addi	r5,r5,1662
    2e90:	dc403b15 	stw	r17,236(sp)
    2e94:	d9403515 	stw	r5,212(sp)
    2e98:	9823883a 	mov	r17,r19
    2e9c:	482d883a 	mov	r22,r9
    2ea0:	9027883a 	mov	r19,r18
    2ea4:	070001c4 	movi	fp,7
    2ea8:	8025883a 	mov	r18,r16
    2eac:	dc002c17 	ldw	r16,176(sp)
    2eb0:	00000306 	br	2ec0 <___vfprintf_internal_r+0x7cc>
    2eb4:	8c7ffc04 	addi	r17,r17,-16
    2eb8:	42000204 	addi	r8,r8,8
    2ebc:	b440130e 	bge	r22,r17,2f0c <___vfprintf_internal_r+0x818>
    2ec0:	01000074 	movhi	r4,1
    2ec4:	18c00404 	addi	r3,r3,16
    2ec8:	10800044 	addi	r2,r2,1
    2ecc:	21019f84 	addi	r4,r4,1662
    2ed0:	41000015 	stw	r4,0(r8)
    2ed4:	45800115 	stw	r22,4(r8)
    2ed8:	d8c02015 	stw	r3,128(sp)
    2edc:	d8801f15 	stw	r2,124(sp)
    2ee0:	e0bff40e 	bge	fp,r2,2eb4 <__alt_data_end+0xff002eb4>
    2ee4:	d9801e04 	addi	r6,sp,120
    2ee8:	b80b883a 	mov	r5,r23
    2eec:	8009883a 	mov	r4,r16
    2ef0:	00094900 	call	9490 <__sprint_r>
    2ef4:	103f011e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    2ef8:	8c7ffc04 	addi	r17,r17,-16
    2efc:	d8c02017 	ldw	r3,128(sp)
    2f00:	d8801f17 	ldw	r2,124(sp)
    2f04:	da000404 	addi	r8,sp,16
    2f08:	b47fed16 	blt	r22,r17,2ec0 <__alt_data_end+0xff002ec0>
    2f0c:	9021883a 	mov	r16,r18
    2f10:	9825883a 	mov	r18,r19
    2f14:	8827883a 	mov	r19,r17
    2f18:	dc403b17 	ldw	r17,236(sp)
    2f1c:	d9403517 	ldw	r5,212(sp)
    2f20:	98c7883a 	add	r3,r19,r3
    2f24:	10800044 	addi	r2,r2,1
    2f28:	41400015 	stw	r5,0(r8)
    2f2c:	44c00115 	stw	r19,4(r8)
    2f30:	d8c02015 	stw	r3,128(sp)
    2f34:	d8801f15 	stw	r2,124(sp)
    2f38:	010001c4 	movi	r4,7
    2f3c:	2082a316 	blt	r4,r2,39cc <___vfprintf_internal_r+0x12d8>
    2f40:	df002787 	ldb	fp,158(sp)
    2f44:	42000204 	addi	r8,r8,8
    2f48:	e0000c26 	beq	fp,zero,2f7c <___vfprintf_internal_r+0x888>
    2f4c:	d8801f17 	ldw	r2,124(sp)
    2f50:	d9002784 	addi	r4,sp,158
    2f54:	18c00044 	addi	r3,r3,1
    2f58:	10800044 	addi	r2,r2,1
    2f5c:	41000015 	stw	r4,0(r8)
    2f60:	01000044 	movi	r4,1
    2f64:	41000115 	stw	r4,4(r8)
    2f68:	d8c02015 	stw	r3,128(sp)
    2f6c:	d8801f15 	stw	r2,124(sp)
    2f70:	010001c4 	movi	r4,7
    2f74:	20823c16 	blt	r4,r2,3868 <___vfprintf_internal_r+0x1174>
    2f78:	42000204 	addi	r8,r8,8
    2f7c:	d8802b17 	ldw	r2,172(sp)
    2f80:	10000c26 	beq	r2,zero,2fb4 <___vfprintf_internal_r+0x8c0>
    2f84:	d8801f17 	ldw	r2,124(sp)
    2f88:	d9002704 	addi	r4,sp,156
    2f8c:	18c00084 	addi	r3,r3,2
    2f90:	10800044 	addi	r2,r2,1
    2f94:	41000015 	stw	r4,0(r8)
    2f98:	01000084 	movi	r4,2
    2f9c:	41000115 	stw	r4,4(r8)
    2fa0:	d8c02015 	stw	r3,128(sp)
    2fa4:	d8801f15 	stw	r2,124(sp)
    2fa8:	010001c4 	movi	r4,7
    2fac:	20823616 	blt	r4,r2,3888 <___vfprintf_internal_r+0x1194>
    2fb0:	42000204 	addi	r8,r8,8
    2fb4:	d9003017 	ldw	r4,192(sp)
    2fb8:	00802004 	movi	r2,128
    2fbc:	20819926 	beq	r4,r2,3624 <___vfprintf_internal_r+0xf30>
    2fc0:	d9402917 	ldw	r5,164(sp)
    2fc4:	d8802e17 	ldw	r2,184(sp)
    2fc8:	28adc83a 	sub	r22,r5,r2
    2fcc:	0580310e 	bge	zero,r22,3094 <___vfprintf_internal_r+0x9a0>
    2fd0:	07000404 	movi	fp,16
    2fd4:	d8801f17 	ldw	r2,124(sp)
    2fd8:	e584140e 	bge	fp,r22,402c <___vfprintf_internal_r+0x1938>
    2fdc:	01400074 	movhi	r5,1
    2fe0:	29419b84 	addi	r5,r5,1646
    2fe4:	dc402915 	stw	r17,164(sp)
    2fe8:	d9402b15 	stw	r5,172(sp)
    2fec:	b023883a 	mov	r17,r22
    2ff0:	04c001c4 	movi	r19,7
    2ff4:	a82d883a 	mov	r22,r21
    2ff8:	902b883a 	mov	r21,r18
    2ffc:	8025883a 	mov	r18,r16
    3000:	dc002c17 	ldw	r16,176(sp)
    3004:	00000306 	br	3014 <___vfprintf_internal_r+0x920>
    3008:	8c7ffc04 	addi	r17,r17,-16
    300c:	42000204 	addi	r8,r8,8
    3010:	e440110e 	bge	fp,r17,3058 <___vfprintf_internal_r+0x964>
    3014:	18c00404 	addi	r3,r3,16
    3018:	10800044 	addi	r2,r2,1
    301c:	45000015 	stw	r20,0(r8)
    3020:	47000115 	stw	fp,4(r8)
    3024:	d8c02015 	stw	r3,128(sp)
    3028:	d8801f15 	stw	r2,124(sp)
    302c:	98bff60e 	bge	r19,r2,3008 <__alt_data_end+0xff003008>
    3030:	d9801e04 	addi	r6,sp,120
    3034:	b80b883a 	mov	r5,r23
    3038:	8009883a 	mov	r4,r16
    303c:	00094900 	call	9490 <__sprint_r>
    3040:	103eae1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3044:	8c7ffc04 	addi	r17,r17,-16
    3048:	d8c02017 	ldw	r3,128(sp)
    304c:	d8801f17 	ldw	r2,124(sp)
    3050:	da000404 	addi	r8,sp,16
    3054:	e47fef16 	blt	fp,r17,3014 <__alt_data_end+0xff003014>
    3058:	9021883a 	mov	r16,r18
    305c:	a825883a 	mov	r18,r21
    3060:	b02b883a 	mov	r21,r22
    3064:	882d883a 	mov	r22,r17
    3068:	dc402917 	ldw	r17,164(sp)
    306c:	d9002b17 	ldw	r4,172(sp)
    3070:	1d87883a 	add	r3,r3,r22
    3074:	10800044 	addi	r2,r2,1
    3078:	41000015 	stw	r4,0(r8)
    307c:	45800115 	stw	r22,4(r8)
    3080:	d8c02015 	stw	r3,128(sp)
    3084:	d8801f15 	stw	r2,124(sp)
    3088:	010001c4 	movi	r4,7
    308c:	2081ee16 	blt	r4,r2,3848 <___vfprintf_internal_r+0x1154>
    3090:	42000204 	addi	r8,r8,8
    3094:	9080400c 	andi	r2,r18,256
    3098:	1001181e 	bne	r2,zero,34fc <___vfprintf_internal_r+0xe08>
    309c:	d9402e17 	ldw	r5,184(sp)
    30a0:	d8801f17 	ldw	r2,124(sp)
    30a4:	44000015 	stw	r16,0(r8)
    30a8:	1947883a 	add	r3,r3,r5
    30ac:	10800044 	addi	r2,r2,1
    30b0:	41400115 	stw	r5,4(r8)
    30b4:	d8c02015 	stw	r3,128(sp)
    30b8:	d8801f15 	stw	r2,124(sp)
    30bc:	010001c4 	movi	r4,7
    30c0:	2081d316 	blt	r4,r2,3810 <___vfprintf_internal_r+0x111c>
    30c4:	42000204 	addi	r8,r8,8
    30c8:	9480010c 	andi	r18,r18,4
    30cc:	90003226 	beq	r18,zero,3198 <___vfprintf_internal_r+0xaa4>
    30d0:	d9403117 	ldw	r5,196(sp)
    30d4:	d8802a17 	ldw	r2,168(sp)
    30d8:	28a1c83a 	sub	r16,r5,r2
    30dc:	04002e0e 	bge	zero,r16,3198 <___vfprintf_internal_r+0xaa4>
    30e0:	04400404 	movi	r17,16
    30e4:	d8801f17 	ldw	r2,124(sp)
    30e8:	8c04a20e 	bge	r17,r16,4374 <___vfprintf_internal_r+0x1c80>
    30ec:	01400074 	movhi	r5,1
    30f0:	29419f84 	addi	r5,r5,1662
    30f4:	d9403515 	stw	r5,212(sp)
    30f8:	048001c4 	movi	r18,7
    30fc:	dcc02c17 	ldw	r19,176(sp)
    3100:	00000306 	br	3110 <___vfprintf_internal_r+0xa1c>
    3104:	843ffc04 	addi	r16,r16,-16
    3108:	42000204 	addi	r8,r8,8
    310c:	8c00130e 	bge	r17,r16,315c <___vfprintf_internal_r+0xa68>
    3110:	01000074 	movhi	r4,1
    3114:	18c00404 	addi	r3,r3,16
    3118:	10800044 	addi	r2,r2,1
    311c:	21019f84 	addi	r4,r4,1662
    3120:	41000015 	stw	r4,0(r8)
    3124:	44400115 	stw	r17,4(r8)
    3128:	d8c02015 	stw	r3,128(sp)
    312c:	d8801f15 	stw	r2,124(sp)
    3130:	90bff40e 	bge	r18,r2,3104 <__alt_data_end+0xff003104>
    3134:	d9801e04 	addi	r6,sp,120
    3138:	b80b883a 	mov	r5,r23
    313c:	9809883a 	mov	r4,r19
    3140:	00094900 	call	9490 <__sprint_r>
    3144:	103e6d1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3148:	843ffc04 	addi	r16,r16,-16
    314c:	d8c02017 	ldw	r3,128(sp)
    3150:	d8801f17 	ldw	r2,124(sp)
    3154:	da000404 	addi	r8,sp,16
    3158:	8c3fed16 	blt	r17,r16,3110 <__alt_data_end+0xff003110>
    315c:	d9403517 	ldw	r5,212(sp)
    3160:	1c07883a 	add	r3,r3,r16
    3164:	10800044 	addi	r2,r2,1
    3168:	41400015 	stw	r5,0(r8)
    316c:	44000115 	stw	r16,4(r8)
    3170:	d8c02015 	stw	r3,128(sp)
    3174:	d8801f15 	stw	r2,124(sp)
    3178:	010001c4 	movi	r4,7
    317c:	2080060e 	bge	r4,r2,3198 <___vfprintf_internal_r+0xaa4>
    3180:	d9002c17 	ldw	r4,176(sp)
    3184:	d9801e04 	addi	r6,sp,120
    3188:	b80b883a 	mov	r5,r23
    318c:	00094900 	call	9490 <__sprint_r>
    3190:	103e5a1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3194:	d8c02017 	ldw	r3,128(sp)
    3198:	d8803117 	ldw	r2,196(sp)
    319c:	d9002a17 	ldw	r4,168(sp)
    31a0:	1100010e 	bge	r2,r4,31a8 <___vfprintf_internal_r+0xab4>
    31a4:	2005883a 	mov	r2,r4
    31a8:	d9402f17 	ldw	r5,188(sp)
    31ac:	288b883a 	add	r5,r5,r2
    31b0:	d9402f15 	stw	r5,188(sp)
    31b4:	18019e1e 	bne	r3,zero,3830 <___vfprintf_internal_r+0x113c>
    31b8:	a8800007 	ldb	r2,0(r21)
    31bc:	d8001f15 	stw	zero,124(sp)
    31c0:	da000404 	addi	r8,sp,16
    31c4:	103d851e 	bne	r2,zero,27dc <__alt_data_end+0xff0027dc>
    31c8:	a821883a 	mov	r16,r21
    31cc:	003d9b06 	br	283c <__alt_data_end+0xff00283c>
    31d0:	18c03fcc 	andi	r3,r3,255
    31d4:	1805c11e 	bne	r3,zero,48dc <___vfprintf_internal_r+0x21e8>
    31d8:	94800414 	ori	r18,r18,16
    31dc:	9080080c 	andi	r2,r18,32
    31e0:	10020c26 	beq	r2,zero,3a14 <___vfprintf_internal_r+0x1320>
    31e4:	d8802d17 	ldw	r2,180(sp)
    31e8:	d9002917 	ldw	r4,164(sp)
    31ec:	d8002785 	stb	zero,158(sp)
    31f0:	10c00204 	addi	r3,r2,8
    31f4:	14c00017 	ldw	r19,0(r2)
    31f8:	15800117 	ldw	r22,4(r2)
    31fc:	20040f16 	blt	r4,zero,423c <___vfprintf_internal_r+0x1b48>
    3200:	013fdfc4 	movi	r4,-129
    3204:	9d84b03a 	or	r2,r19,r22
    3208:	d8c02d15 	stw	r3,180(sp)
    320c:	9124703a 	and	r18,r18,r4
    3210:	0039883a 	mov	fp,zero
    3214:	103e891e 	bne	r2,zero,2c3c <__alt_data_end+0xff002c3c>
    3218:	d9002917 	ldw	r4,164(sp)
    321c:	2002c11e 	bne	r4,zero,3d24 <___vfprintf_internal_r+0x1630>
    3220:	d8002915 	stw	zero,164(sp)
    3224:	d8002e15 	stw	zero,184(sp)
    3228:	dc001e04 	addi	r16,sp,120
    322c:	003ef806 	br	2e10 <__alt_data_end+0xff002e10>
    3230:	18c03fcc 	andi	r3,r3,255
    3234:	18059d1e 	bne	r3,zero,48ac <___vfprintf_internal_r+0x21b8>
    3238:	01400074 	movhi	r5,1
    323c:	29418f04 	addi	r5,r5,1596
    3240:	d9403915 	stw	r5,228(sp)
    3244:	9080080c 	andi	r2,r18,32
    3248:	10005226 	beq	r2,zero,3394 <___vfprintf_internal_r+0xca0>
    324c:	d8802d17 	ldw	r2,180(sp)
    3250:	14c00017 	ldw	r19,0(r2)
    3254:	15800117 	ldw	r22,4(r2)
    3258:	10800204 	addi	r2,r2,8
    325c:	d8802d15 	stw	r2,180(sp)
    3260:	9080004c 	andi	r2,r18,1
    3264:	10019026 	beq	r2,zero,38a8 <___vfprintf_internal_r+0x11b4>
    3268:	9d84b03a 	or	r2,r19,r22
    326c:	10036926 	beq	r2,zero,4014 <___vfprintf_internal_r+0x1920>
    3270:	d8c02917 	ldw	r3,164(sp)
    3274:	00800c04 	movi	r2,48
    3278:	d8802705 	stb	r2,156(sp)
    327c:	dc402745 	stb	r17,157(sp)
    3280:	d8002785 	stb	zero,158(sp)
    3284:	90800094 	ori	r2,r18,2
    3288:	18045d16 	blt	r3,zero,4400 <___vfprintf_internal_r+0x1d0c>
    328c:	00bfdfc4 	movi	r2,-129
    3290:	90a4703a 	and	r18,r18,r2
    3294:	94800094 	ori	r18,r18,2
    3298:	0039883a 	mov	fp,zero
    329c:	d9003917 	ldw	r4,228(sp)
    32a0:	dc001e04 	addi	r16,sp,120
    32a4:	988003cc 	andi	r2,r19,15
    32a8:	b006973a 	slli	r3,r22,28
    32ac:	2085883a 	add	r2,r4,r2
    32b0:	9826d13a 	srli	r19,r19,4
    32b4:	10800003 	ldbu	r2,0(r2)
    32b8:	b02cd13a 	srli	r22,r22,4
    32bc:	843fffc4 	addi	r16,r16,-1
    32c0:	1ce6b03a 	or	r19,r3,r19
    32c4:	80800005 	stb	r2,0(r16)
    32c8:	9d84b03a 	or	r2,r19,r22
    32cc:	103ff51e 	bne	r2,zero,32a4 <__alt_data_end+0xff0032a4>
    32d0:	d8c02817 	ldw	r3,160(sp)
    32d4:	1c07c83a 	sub	r3,r3,r16
    32d8:	d8c02e15 	stw	r3,184(sp)
    32dc:	003ecc06 	br	2e10 <__alt_data_end+0xff002e10>
    32e0:	18c03fcc 	andi	r3,r3,255
    32e4:	183e9f26 	beq	r3,zero,2d64 <__alt_data_end+0xff002d64>
    32e8:	d9c02785 	stb	r7,158(sp)
    32ec:	003e9d06 	br	2d64 <__alt_data_end+0xff002d64>
    32f0:	00c00044 	movi	r3,1
    32f4:	01c00ac4 	movi	r7,43
    32f8:	ac400007 	ldb	r17,0(r21)
    32fc:	003d5e06 	br	2878 <__alt_data_end+0xff002878>
    3300:	94800814 	ori	r18,r18,32
    3304:	ac400007 	ldb	r17,0(r21)
    3308:	003d5b06 	br	2878 <__alt_data_end+0xff002878>
    330c:	d8c02d17 	ldw	r3,180(sp)
    3310:	d8002785 	stb	zero,158(sp)
    3314:	1c000017 	ldw	r16,0(r3)
    3318:	1cc00104 	addi	r19,r3,4
    331c:	80041926 	beq	r16,zero,4384 <___vfprintf_internal_r+0x1c90>
    3320:	d9002917 	ldw	r4,164(sp)
    3324:	2003d016 	blt	r4,zero,4268 <___vfprintf_internal_r+0x1b74>
    3328:	200d883a 	mov	r6,r4
    332c:	000b883a 	mov	r5,zero
    3330:	8009883a 	mov	r4,r16
    3334:	da003d15 	stw	r8,244(sp)
    3338:	00076f80 	call	76f8 <memchr>
    333c:	da003d17 	ldw	r8,244(sp)
    3340:	10045426 	beq	r2,zero,4494 <___vfprintf_internal_r+0x1da0>
    3344:	1405c83a 	sub	r2,r2,r16
    3348:	d8802e15 	stw	r2,184(sp)
    334c:	1003cc16 	blt	r2,zero,4280 <___vfprintf_internal_r+0x1b8c>
    3350:	df002783 	ldbu	fp,158(sp)
    3354:	d8802a15 	stw	r2,168(sp)
    3358:	dcc02d15 	stw	r19,180(sp)
    335c:	d8002915 	stw	zero,164(sp)
    3360:	d8003215 	stw	zero,200(sp)
    3364:	003eb006 	br	2e28 <__alt_data_end+0xff002e28>
    3368:	18c03fcc 	andi	r3,r3,255
    336c:	183f9b26 	beq	r3,zero,31dc <__alt_data_end+0xff0031dc>
    3370:	d9c02785 	stb	r7,158(sp)
    3374:	003f9906 	br	31dc <__alt_data_end+0xff0031dc>
    3378:	18c03fcc 	andi	r3,r3,255
    337c:	1805551e 	bne	r3,zero,48d4 <___vfprintf_internal_r+0x21e0>
    3380:	01400074 	movhi	r5,1
    3384:	29419404 	addi	r5,r5,1616
    3388:	d9403915 	stw	r5,228(sp)
    338c:	9080080c 	andi	r2,r18,32
    3390:	103fae1e 	bne	r2,zero,324c <__alt_data_end+0xff00324c>
    3394:	9080040c 	andi	r2,r18,16
    3398:	1002de26 	beq	r2,zero,3f14 <___vfprintf_internal_r+0x1820>
    339c:	d8c02d17 	ldw	r3,180(sp)
    33a0:	002d883a 	mov	r22,zero
    33a4:	1cc00017 	ldw	r19,0(r3)
    33a8:	18c00104 	addi	r3,r3,4
    33ac:	d8c02d15 	stw	r3,180(sp)
    33b0:	003fab06 	br	3260 <__alt_data_end+0xff003260>
    33b4:	38803fcc 	andi	r2,r7,255
    33b8:	1080201c 	xori	r2,r2,128
    33bc:	10bfe004 	addi	r2,r2,-128
    33c0:	1002d21e 	bne	r2,zero,3f0c <___vfprintf_internal_r+0x1818>
    33c4:	00c00044 	movi	r3,1
    33c8:	01c00804 	movi	r7,32
    33cc:	ac400007 	ldb	r17,0(r21)
    33d0:	003d2906 	br	2878 <__alt_data_end+0xff002878>
    33d4:	94800054 	ori	r18,r18,1
    33d8:	ac400007 	ldb	r17,0(r21)
    33dc:	003d2606 	br	2878 <__alt_data_end+0xff002878>
    33e0:	18c03fcc 	andi	r3,r3,255
    33e4:	183e0526 	beq	r3,zero,2bfc <__alt_data_end+0xff002bfc>
    33e8:	d9c02785 	stb	r7,158(sp)
    33ec:	003e0306 	br	2bfc <__alt_data_end+0xff002bfc>
    33f0:	94801014 	ori	r18,r18,64
    33f4:	ac400007 	ldb	r17,0(r21)
    33f8:	003d1f06 	br	2878 <__alt_data_end+0xff002878>
    33fc:	ac400007 	ldb	r17,0(r21)
    3400:	8a438726 	beq	r17,r9,4220 <___vfprintf_internal_r+0x1b2c>
    3404:	94800414 	ori	r18,r18,16
    3408:	003d1b06 	br	2878 <__alt_data_end+0xff002878>
    340c:	18c03fcc 	andi	r3,r3,255
    3410:	1805341e 	bne	r3,zero,48e4 <___vfprintf_internal_r+0x21f0>
    3414:	9080080c 	andi	r2,r18,32
    3418:	1002cd26 	beq	r2,zero,3f50 <___vfprintf_internal_r+0x185c>
    341c:	d9402d17 	ldw	r5,180(sp)
    3420:	d9002f17 	ldw	r4,188(sp)
    3424:	28800017 	ldw	r2,0(r5)
    3428:	2007d7fa 	srai	r3,r4,31
    342c:	29400104 	addi	r5,r5,4
    3430:	d9402d15 	stw	r5,180(sp)
    3434:	11000015 	stw	r4,0(r2)
    3438:	10c00115 	stw	r3,4(r2)
    343c:	003ce506 	br	27d4 <__alt_data_end+0xff0027d4>
    3440:	d8c02d17 	ldw	r3,180(sp)
    3444:	d9002d17 	ldw	r4,180(sp)
    3448:	d8002785 	stb	zero,158(sp)
    344c:	18800017 	ldw	r2,0(r3)
    3450:	21000104 	addi	r4,r4,4
    3454:	00c00044 	movi	r3,1
    3458:	d8c02a15 	stw	r3,168(sp)
    345c:	d8801405 	stb	r2,80(sp)
    3460:	d9002d15 	stw	r4,180(sp)
    3464:	d8c02e15 	stw	r3,184(sp)
    3468:	d8002915 	stw	zero,164(sp)
    346c:	d8003215 	stw	zero,200(sp)
    3470:	dc001404 	addi	r16,sp,80
    3474:	0039883a 	mov	fp,zero
    3478:	003e7206 	br	2e44 <__alt_data_end+0xff002e44>
    347c:	01000074 	movhi	r4,1
    3480:	21019404 	addi	r4,r4,1616
    3484:	0039883a 	mov	fp,zero
    3488:	d9003915 	stw	r4,228(sp)
    348c:	04401e04 	movi	r17,120
    3490:	003f8206 	br	329c <__alt_data_end+0xff00329c>
    3494:	18c03fcc 	andi	r3,r3,255
    3498:	1805061e 	bne	r3,zero,48b4 <___vfprintf_internal_r+0x21c0>
    349c:	883d9126 	beq	r17,zero,2ae4 <__alt_data_end+0xff002ae4>
    34a0:	00c00044 	movi	r3,1
    34a4:	d8c02a15 	stw	r3,168(sp)
    34a8:	dc401405 	stb	r17,80(sp)
    34ac:	d8002785 	stb	zero,158(sp)
    34b0:	003fec06 	br	3464 <__alt_data_end+0xff003464>
    34b4:	01400074 	movhi	r5,1
    34b8:	29419404 	addi	r5,r5,1616
    34bc:	d9403915 	stw	r5,228(sp)
    34c0:	d8c02d15 	stw	r3,180(sp)
    34c4:	1025883a 	mov	r18,r2
    34c8:	04401e04 	movi	r17,120
    34cc:	9d84b03a 	or	r2,r19,r22
    34d0:	1000fc1e 	bne	r2,zero,38c4 <___vfprintf_internal_r+0x11d0>
    34d4:	0039883a 	mov	fp,zero
    34d8:	00800084 	movi	r2,2
    34dc:	10803fcc 	andi	r2,r2,255
    34e0:	00c00044 	movi	r3,1
    34e4:	10c20f26 	beq	r2,r3,3d24 <___vfprintf_internal_r+0x1630>
    34e8:	00c00084 	movi	r3,2
    34ec:	10fd6326 	beq	r2,r3,2a7c <__alt_data_end+0xff002a7c>
    34f0:	003e2d06 	br	2da8 <__alt_data_end+0xff002da8>
    34f4:	d8c02017 	ldw	r3,128(sp)
    34f8:	003e9306 	br	2f48 <__alt_data_end+0xff002f48>
    34fc:	00801944 	movi	r2,101
    3500:	14407e0e 	bge	r2,r17,36fc <___vfprintf_internal_r+0x1008>
    3504:	d9003617 	ldw	r4,216(sp)
    3508:	d9403817 	ldw	r5,224(sp)
    350c:	000d883a 	mov	r6,zero
    3510:	000f883a 	mov	r7,zero
    3514:	d8c03c15 	stw	r3,240(sp)
    3518:	da003d15 	stw	r8,244(sp)
    351c:	000d1080 	call	d108 <__eqdf2>
    3520:	d8c03c17 	ldw	r3,240(sp)
    3524:	da003d17 	ldw	r8,244(sp)
    3528:	1000f71e 	bne	r2,zero,3908 <___vfprintf_internal_r+0x1214>
    352c:	d8801f17 	ldw	r2,124(sp)
    3530:	01000074 	movhi	r4,1
    3534:	21019b04 	addi	r4,r4,1644
    3538:	18c00044 	addi	r3,r3,1
    353c:	10800044 	addi	r2,r2,1
    3540:	41000015 	stw	r4,0(r8)
    3544:	01000044 	movi	r4,1
    3548:	41000115 	stw	r4,4(r8)
    354c:	d8c02015 	stw	r3,128(sp)
    3550:	d8801f15 	stw	r2,124(sp)
    3554:	010001c4 	movi	r4,7
    3558:	2082b816 	blt	r4,r2,403c <___vfprintf_internal_r+0x1948>
    355c:	42000204 	addi	r8,r8,8
    3560:	d8802617 	ldw	r2,152(sp)
    3564:	d9403317 	ldw	r5,204(sp)
    3568:	11400216 	blt	r2,r5,3574 <___vfprintf_internal_r+0xe80>
    356c:	9080004c 	andi	r2,r18,1
    3570:	103ed526 	beq	r2,zero,30c8 <__alt_data_end+0xff0030c8>
    3574:	d8803717 	ldw	r2,220(sp)
    3578:	d9003417 	ldw	r4,208(sp)
    357c:	d9403717 	ldw	r5,220(sp)
    3580:	1887883a 	add	r3,r3,r2
    3584:	d8801f17 	ldw	r2,124(sp)
    3588:	41000015 	stw	r4,0(r8)
    358c:	41400115 	stw	r5,4(r8)
    3590:	10800044 	addi	r2,r2,1
    3594:	d8c02015 	stw	r3,128(sp)
    3598:	d8801f15 	stw	r2,124(sp)
    359c:	010001c4 	movi	r4,7
    35a0:	20832916 	blt	r4,r2,4248 <___vfprintf_internal_r+0x1b54>
    35a4:	42000204 	addi	r8,r8,8
    35a8:	d8803317 	ldw	r2,204(sp)
    35ac:	143fffc4 	addi	r16,r2,-1
    35b0:	043ec50e 	bge	zero,r16,30c8 <__alt_data_end+0xff0030c8>
    35b4:	04400404 	movi	r17,16
    35b8:	d8801f17 	ldw	r2,124(sp)
    35bc:	8c00880e 	bge	r17,r16,37e0 <___vfprintf_internal_r+0x10ec>
    35c0:	01400074 	movhi	r5,1
    35c4:	29419b84 	addi	r5,r5,1646
    35c8:	d9402b15 	stw	r5,172(sp)
    35cc:	058001c4 	movi	r22,7
    35d0:	dcc02c17 	ldw	r19,176(sp)
    35d4:	00000306 	br	35e4 <___vfprintf_internal_r+0xef0>
    35d8:	42000204 	addi	r8,r8,8
    35dc:	843ffc04 	addi	r16,r16,-16
    35e0:	8c00820e 	bge	r17,r16,37ec <___vfprintf_internal_r+0x10f8>
    35e4:	18c00404 	addi	r3,r3,16
    35e8:	10800044 	addi	r2,r2,1
    35ec:	45000015 	stw	r20,0(r8)
    35f0:	44400115 	stw	r17,4(r8)
    35f4:	d8c02015 	stw	r3,128(sp)
    35f8:	d8801f15 	stw	r2,124(sp)
    35fc:	b0bff60e 	bge	r22,r2,35d8 <__alt_data_end+0xff0035d8>
    3600:	d9801e04 	addi	r6,sp,120
    3604:	b80b883a 	mov	r5,r23
    3608:	9809883a 	mov	r4,r19
    360c:	00094900 	call	9490 <__sprint_r>
    3610:	103d3a1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3614:	d8c02017 	ldw	r3,128(sp)
    3618:	d8801f17 	ldw	r2,124(sp)
    361c:	da000404 	addi	r8,sp,16
    3620:	003fee06 	br	35dc <__alt_data_end+0xff0035dc>
    3624:	d9403117 	ldw	r5,196(sp)
    3628:	d8802a17 	ldw	r2,168(sp)
    362c:	28adc83a 	sub	r22,r5,r2
    3630:	05be630e 	bge	zero,r22,2fc0 <__alt_data_end+0xff002fc0>
    3634:	07000404 	movi	fp,16
    3638:	d8801f17 	ldw	r2,124(sp)
    363c:	e5838f0e 	bge	fp,r22,447c <___vfprintf_internal_r+0x1d88>
    3640:	01400074 	movhi	r5,1
    3644:	29419b84 	addi	r5,r5,1646
    3648:	dc403015 	stw	r17,192(sp)
    364c:	d9402b15 	stw	r5,172(sp)
    3650:	b023883a 	mov	r17,r22
    3654:	04c001c4 	movi	r19,7
    3658:	a82d883a 	mov	r22,r21
    365c:	902b883a 	mov	r21,r18
    3660:	8025883a 	mov	r18,r16
    3664:	dc002c17 	ldw	r16,176(sp)
    3668:	00000306 	br	3678 <___vfprintf_internal_r+0xf84>
    366c:	8c7ffc04 	addi	r17,r17,-16
    3670:	42000204 	addi	r8,r8,8
    3674:	e440110e 	bge	fp,r17,36bc <___vfprintf_internal_r+0xfc8>
    3678:	18c00404 	addi	r3,r3,16
    367c:	10800044 	addi	r2,r2,1
    3680:	45000015 	stw	r20,0(r8)
    3684:	47000115 	stw	fp,4(r8)
    3688:	d8c02015 	stw	r3,128(sp)
    368c:	d8801f15 	stw	r2,124(sp)
    3690:	98bff60e 	bge	r19,r2,366c <__alt_data_end+0xff00366c>
    3694:	d9801e04 	addi	r6,sp,120
    3698:	b80b883a 	mov	r5,r23
    369c:	8009883a 	mov	r4,r16
    36a0:	00094900 	call	9490 <__sprint_r>
    36a4:	103d151e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    36a8:	8c7ffc04 	addi	r17,r17,-16
    36ac:	d8c02017 	ldw	r3,128(sp)
    36b0:	d8801f17 	ldw	r2,124(sp)
    36b4:	da000404 	addi	r8,sp,16
    36b8:	e47fef16 	blt	fp,r17,3678 <__alt_data_end+0xff003678>
    36bc:	9021883a 	mov	r16,r18
    36c0:	a825883a 	mov	r18,r21
    36c4:	b02b883a 	mov	r21,r22
    36c8:	882d883a 	mov	r22,r17
    36cc:	dc403017 	ldw	r17,192(sp)
    36d0:	d9002b17 	ldw	r4,172(sp)
    36d4:	1d87883a 	add	r3,r3,r22
    36d8:	10800044 	addi	r2,r2,1
    36dc:	41000015 	stw	r4,0(r8)
    36e0:	45800115 	stw	r22,4(r8)
    36e4:	d8c02015 	stw	r3,128(sp)
    36e8:	d8801f15 	stw	r2,124(sp)
    36ec:	010001c4 	movi	r4,7
    36f0:	20818e16 	blt	r4,r2,3d2c <___vfprintf_internal_r+0x1638>
    36f4:	42000204 	addi	r8,r8,8
    36f8:	003e3106 	br	2fc0 <__alt_data_end+0xff002fc0>
    36fc:	d9403317 	ldw	r5,204(sp)
    3700:	00800044 	movi	r2,1
    3704:	18c00044 	addi	r3,r3,1
    3708:	1141530e 	bge	r2,r5,3c58 <___vfprintf_internal_r+0x1564>
    370c:	dc401f17 	ldw	r17,124(sp)
    3710:	00800044 	movi	r2,1
    3714:	40800115 	stw	r2,4(r8)
    3718:	8c400044 	addi	r17,r17,1
    371c:	44000015 	stw	r16,0(r8)
    3720:	d8c02015 	stw	r3,128(sp)
    3724:	dc401f15 	stw	r17,124(sp)
    3728:	008001c4 	movi	r2,7
    372c:	14416b16 	blt	r2,r17,3cdc <___vfprintf_internal_r+0x15e8>
    3730:	42000204 	addi	r8,r8,8
    3734:	d8803717 	ldw	r2,220(sp)
    3738:	d9003417 	ldw	r4,208(sp)
    373c:	8c400044 	addi	r17,r17,1
    3740:	10c7883a 	add	r3,r2,r3
    3744:	40800115 	stw	r2,4(r8)
    3748:	41000015 	stw	r4,0(r8)
    374c:	d8c02015 	stw	r3,128(sp)
    3750:	dc401f15 	stw	r17,124(sp)
    3754:	008001c4 	movi	r2,7
    3758:	14416916 	blt	r2,r17,3d00 <___vfprintf_internal_r+0x160c>
    375c:	45800204 	addi	r22,r8,8
    3760:	d9003617 	ldw	r4,216(sp)
    3764:	d9403817 	ldw	r5,224(sp)
    3768:	000d883a 	mov	r6,zero
    376c:	000f883a 	mov	r7,zero
    3770:	d8c03c15 	stw	r3,240(sp)
    3774:	000d1080 	call	d108 <__eqdf2>
    3778:	d8c03c17 	ldw	r3,240(sp)
    377c:	1000bc26 	beq	r2,zero,3a70 <___vfprintf_internal_r+0x137c>
    3780:	d9403317 	ldw	r5,204(sp)
    3784:	84000044 	addi	r16,r16,1
    3788:	8c400044 	addi	r17,r17,1
    378c:	28bfffc4 	addi	r2,r5,-1
    3790:	1887883a 	add	r3,r3,r2
    3794:	b0800115 	stw	r2,4(r22)
    3798:	b4000015 	stw	r16,0(r22)
    379c:	d8c02015 	stw	r3,128(sp)
    37a0:	dc401f15 	stw	r17,124(sp)
    37a4:	008001c4 	movi	r2,7
    37a8:	14414316 	blt	r2,r17,3cb8 <___vfprintf_internal_r+0x15c4>
    37ac:	b5800204 	addi	r22,r22,8
    37b0:	d9003a17 	ldw	r4,232(sp)
    37b4:	df0022c4 	addi	fp,sp,139
    37b8:	8c400044 	addi	r17,r17,1
    37bc:	20c7883a 	add	r3,r4,r3
    37c0:	b7000015 	stw	fp,0(r22)
    37c4:	b1000115 	stw	r4,4(r22)
    37c8:	d8c02015 	stw	r3,128(sp)
    37cc:	dc401f15 	stw	r17,124(sp)
    37d0:	008001c4 	movi	r2,7
    37d4:	14400e16 	blt	r2,r17,3810 <___vfprintf_internal_r+0x111c>
    37d8:	b2000204 	addi	r8,r22,8
    37dc:	003e3a06 	br	30c8 <__alt_data_end+0xff0030c8>
    37e0:	01000074 	movhi	r4,1
    37e4:	21019b84 	addi	r4,r4,1646
    37e8:	d9002b15 	stw	r4,172(sp)
    37ec:	d9002b17 	ldw	r4,172(sp)
    37f0:	1c07883a 	add	r3,r3,r16
    37f4:	44000115 	stw	r16,4(r8)
    37f8:	41000015 	stw	r4,0(r8)
    37fc:	10800044 	addi	r2,r2,1
    3800:	d8c02015 	stw	r3,128(sp)
    3804:	d8801f15 	stw	r2,124(sp)
    3808:	010001c4 	movi	r4,7
    380c:	20be2d0e 	bge	r4,r2,30c4 <__alt_data_end+0xff0030c4>
    3810:	d9002c17 	ldw	r4,176(sp)
    3814:	d9801e04 	addi	r6,sp,120
    3818:	b80b883a 	mov	r5,r23
    381c:	00094900 	call	9490 <__sprint_r>
    3820:	103cb61e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3824:	d8c02017 	ldw	r3,128(sp)
    3828:	da000404 	addi	r8,sp,16
    382c:	003e2606 	br	30c8 <__alt_data_end+0xff0030c8>
    3830:	d9002c17 	ldw	r4,176(sp)
    3834:	d9801e04 	addi	r6,sp,120
    3838:	b80b883a 	mov	r5,r23
    383c:	00094900 	call	9490 <__sprint_r>
    3840:	103e5d26 	beq	r2,zero,31b8 <__alt_data_end+0xff0031b8>
    3844:	003cad06 	br	2afc <__alt_data_end+0xff002afc>
    3848:	d9002c17 	ldw	r4,176(sp)
    384c:	d9801e04 	addi	r6,sp,120
    3850:	b80b883a 	mov	r5,r23
    3854:	00094900 	call	9490 <__sprint_r>
    3858:	103ca81e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    385c:	d8c02017 	ldw	r3,128(sp)
    3860:	da000404 	addi	r8,sp,16
    3864:	003e0b06 	br	3094 <__alt_data_end+0xff003094>
    3868:	d9002c17 	ldw	r4,176(sp)
    386c:	d9801e04 	addi	r6,sp,120
    3870:	b80b883a 	mov	r5,r23
    3874:	00094900 	call	9490 <__sprint_r>
    3878:	103ca01e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    387c:	d8c02017 	ldw	r3,128(sp)
    3880:	da000404 	addi	r8,sp,16
    3884:	003dbd06 	br	2f7c <__alt_data_end+0xff002f7c>
    3888:	d9002c17 	ldw	r4,176(sp)
    388c:	d9801e04 	addi	r6,sp,120
    3890:	b80b883a 	mov	r5,r23
    3894:	00094900 	call	9490 <__sprint_r>
    3898:	103c981e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    389c:	d8c02017 	ldw	r3,128(sp)
    38a0:	da000404 	addi	r8,sp,16
    38a4:	003dc306 	br	2fb4 <__alt_data_end+0xff002fb4>
    38a8:	d8802917 	ldw	r2,164(sp)
    38ac:	d8002785 	stb	zero,158(sp)
    38b0:	103f0616 	blt	r2,zero,34cc <__alt_data_end+0xff0034cc>
    38b4:	00ffdfc4 	movi	r3,-129
    38b8:	9d84b03a 	or	r2,r19,r22
    38bc:	90e4703a 	and	r18,r18,r3
    38c0:	103c6b26 	beq	r2,zero,2a70 <__alt_data_end+0xff002a70>
    38c4:	0039883a 	mov	fp,zero
    38c8:	003e7406 	br	329c <__alt_data_end+0xff00329c>
    38cc:	9080040c 	andi	r2,r18,16
    38d0:	1001b326 	beq	r2,zero,3fa0 <___vfprintf_internal_r+0x18ac>
    38d4:	d9002d17 	ldw	r4,180(sp)
    38d8:	d9402917 	ldw	r5,164(sp)
    38dc:	d8002785 	stb	zero,158(sp)
    38e0:	20800104 	addi	r2,r4,4
    38e4:	24c00017 	ldw	r19,0(r4)
    38e8:	002d883a 	mov	r22,zero
    38ec:	2801b516 	blt	r5,zero,3fc4 <___vfprintf_internal_r+0x18d0>
    38f0:	00ffdfc4 	movi	r3,-129
    38f4:	d8802d15 	stw	r2,180(sp)
    38f8:	90e4703a 	and	r18,r18,r3
    38fc:	983d2726 	beq	r19,zero,2d9c <__alt_data_end+0xff002d9c>
    3900:	0039883a 	mov	fp,zero
    3904:	003d2a06 	br	2db0 <__alt_data_end+0xff002db0>
    3908:	dc402617 	ldw	r17,152(sp)
    390c:	0441d30e 	bge	zero,r17,405c <___vfprintf_internal_r+0x1968>
    3910:	dc403217 	ldw	r17,200(sp)
    3914:	d8803317 	ldw	r2,204(sp)
    3918:	1440010e 	bge	r2,r17,3920 <___vfprintf_internal_r+0x122c>
    391c:	1023883a 	mov	r17,r2
    3920:	04400a0e 	bge	zero,r17,394c <___vfprintf_internal_r+0x1258>
    3924:	d8801f17 	ldw	r2,124(sp)
    3928:	1c47883a 	add	r3,r3,r17
    392c:	44000015 	stw	r16,0(r8)
    3930:	10800044 	addi	r2,r2,1
    3934:	44400115 	stw	r17,4(r8)
    3938:	d8c02015 	stw	r3,128(sp)
    393c:	d8801f15 	stw	r2,124(sp)
    3940:	010001c4 	movi	r4,7
    3944:	20826516 	blt	r4,r2,42dc <___vfprintf_internal_r+0x1be8>
    3948:	42000204 	addi	r8,r8,8
    394c:	88026116 	blt	r17,zero,42d4 <___vfprintf_internal_r+0x1be0>
    3950:	d9003217 	ldw	r4,200(sp)
    3954:	2463c83a 	sub	r17,r4,r17
    3958:	04407b0e 	bge	zero,r17,3b48 <___vfprintf_internal_r+0x1454>
    395c:	05800404 	movi	r22,16
    3960:	d8801f17 	ldw	r2,124(sp)
    3964:	b4419d0e 	bge	r22,r17,3fdc <___vfprintf_internal_r+0x18e8>
    3968:	01000074 	movhi	r4,1
    396c:	21019b84 	addi	r4,r4,1646
    3970:	d9002b15 	stw	r4,172(sp)
    3974:	070001c4 	movi	fp,7
    3978:	dcc02c17 	ldw	r19,176(sp)
    397c:	00000306 	br	398c <___vfprintf_internal_r+0x1298>
    3980:	42000204 	addi	r8,r8,8
    3984:	8c7ffc04 	addi	r17,r17,-16
    3988:	b441970e 	bge	r22,r17,3fe8 <___vfprintf_internal_r+0x18f4>
    398c:	18c00404 	addi	r3,r3,16
    3990:	10800044 	addi	r2,r2,1
    3994:	45000015 	stw	r20,0(r8)
    3998:	45800115 	stw	r22,4(r8)
    399c:	d8c02015 	stw	r3,128(sp)
    39a0:	d8801f15 	stw	r2,124(sp)
    39a4:	e0bff60e 	bge	fp,r2,3980 <__alt_data_end+0xff003980>
    39a8:	d9801e04 	addi	r6,sp,120
    39ac:	b80b883a 	mov	r5,r23
    39b0:	9809883a 	mov	r4,r19
    39b4:	00094900 	call	9490 <__sprint_r>
    39b8:	103c501e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    39bc:	d8c02017 	ldw	r3,128(sp)
    39c0:	d8801f17 	ldw	r2,124(sp)
    39c4:	da000404 	addi	r8,sp,16
    39c8:	003fee06 	br	3984 <__alt_data_end+0xff003984>
    39cc:	d9002c17 	ldw	r4,176(sp)
    39d0:	d9801e04 	addi	r6,sp,120
    39d4:	b80b883a 	mov	r5,r23
    39d8:	00094900 	call	9490 <__sprint_r>
    39dc:	103c471e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    39e0:	d8c02017 	ldw	r3,128(sp)
    39e4:	df002787 	ldb	fp,158(sp)
    39e8:	da000404 	addi	r8,sp,16
    39ec:	003d5606 	br	2f48 <__alt_data_end+0xff002f48>
    39f0:	9080040c 	andi	r2,r18,16
    39f4:	10016126 	beq	r2,zero,3f7c <___vfprintf_internal_r+0x1888>
    39f8:	d8802d17 	ldw	r2,180(sp)
    39fc:	14c00017 	ldw	r19,0(r2)
    3a00:	10800104 	addi	r2,r2,4
    3a04:	d8802d15 	stw	r2,180(sp)
    3a08:	982dd7fa 	srai	r22,r19,31
    3a0c:	b005883a 	mov	r2,r22
    3a10:	003c8206 	br	2c1c <__alt_data_end+0xff002c1c>
    3a14:	9080040c 	andi	r2,r18,16
    3a18:	10003526 	beq	r2,zero,3af0 <___vfprintf_internal_r+0x13fc>
    3a1c:	d9402d17 	ldw	r5,180(sp)
    3a20:	d8c02917 	ldw	r3,164(sp)
    3a24:	d8002785 	stb	zero,158(sp)
    3a28:	28800104 	addi	r2,r5,4
    3a2c:	2cc00017 	ldw	r19,0(r5)
    3a30:	002d883a 	mov	r22,zero
    3a34:	18003716 	blt	r3,zero,3b14 <___vfprintf_internal_r+0x1420>
    3a38:	00ffdfc4 	movi	r3,-129
    3a3c:	d8802d15 	stw	r2,180(sp)
    3a40:	90e4703a 	and	r18,r18,r3
    3a44:	0039883a 	mov	fp,zero
    3a48:	983df326 	beq	r19,zero,3218 <__alt_data_end+0xff003218>
    3a4c:	00800244 	movi	r2,9
    3a50:	14fc7b36 	bltu	r2,r19,2c40 <__alt_data_end+0xff002c40>
    3a54:	d8c02817 	ldw	r3,160(sp)
    3a58:	dc001dc4 	addi	r16,sp,119
    3a5c:	9cc00c04 	addi	r19,r19,48
    3a60:	1c07c83a 	sub	r3,r3,r16
    3a64:	dcc01dc5 	stb	r19,119(sp)
    3a68:	d8c02e15 	stw	r3,184(sp)
    3a6c:	003ce806 	br	2e10 <__alt_data_end+0xff002e10>
    3a70:	d8803317 	ldw	r2,204(sp)
    3a74:	143fffc4 	addi	r16,r2,-1
    3a78:	043f4d0e 	bge	zero,r16,37b0 <__alt_data_end+0xff0037b0>
    3a7c:	07000404 	movi	fp,16
    3a80:	e400810e 	bge	fp,r16,3c88 <___vfprintf_internal_r+0x1594>
    3a84:	01400074 	movhi	r5,1
    3a88:	29419b84 	addi	r5,r5,1646
    3a8c:	d9402b15 	stw	r5,172(sp)
    3a90:	01c001c4 	movi	r7,7
    3a94:	dcc02c17 	ldw	r19,176(sp)
    3a98:	00000306 	br	3aa8 <___vfprintf_internal_r+0x13b4>
    3a9c:	b5800204 	addi	r22,r22,8
    3aa0:	843ffc04 	addi	r16,r16,-16
    3aa4:	e4007b0e 	bge	fp,r16,3c94 <___vfprintf_internal_r+0x15a0>
    3aa8:	18c00404 	addi	r3,r3,16
    3aac:	8c400044 	addi	r17,r17,1
    3ab0:	b5000015 	stw	r20,0(r22)
    3ab4:	b7000115 	stw	fp,4(r22)
    3ab8:	d8c02015 	stw	r3,128(sp)
    3abc:	dc401f15 	stw	r17,124(sp)
    3ac0:	3c7ff60e 	bge	r7,r17,3a9c <__alt_data_end+0xff003a9c>
    3ac4:	d9801e04 	addi	r6,sp,120
    3ac8:	b80b883a 	mov	r5,r23
    3acc:	9809883a 	mov	r4,r19
    3ad0:	d9c03c15 	stw	r7,240(sp)
    3ad4:	00094900 	call	9490 <__sprint_r>
    3ad8:	d9c03c17 	ldw	r7,240(sp)
    3adc:	103c071e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3ae0:	d8c02017 	ldw	r3,128(sp)
    3ae4:	dc401f17 	ldw	r17,124(sp)
    3ae8:	dd800404 	addi	r22,sp,16
    3aec:	003fec06 	br	3aa0 <__alt_data_end+0xff003aa0>
    3af0:	9080100c 	andi	r2,r18,64
    3af4:	d8002785 	stb	zero,158(sp)
    3af8:	10010e26 	beq	r2,zero,3f34 <___vfprintf_internal_r+0x1840>
    3afc:	d9002d17 	ldw	r4,180(sp)
    3b00:	d9402917 	ldw	r5,164(sp)
    3b04:	002d883a 	mov	r22,zero
    3b08:	20800104 	addi	r2,r4,4
    3b0c:	24c0000b 	ldhu	r19,0(r4)
    3b10:	283fc90e 	bge	r5,zero,3a38 <__alt_data_end+0xff003a38>
    3b14:	d8802d15 	stw	r2,180(sp)
    3b18:	0039883a 	mov	fp,zero
    3b1c:	9d84b03a 	or	r2,r19,r22
    3b20:	103c461e 	bne	r2,zero,2c3c <__alt_data_end+0xff002c3c>
    3b24:	00800044 	movi	r2,1
    3b28:	003e6c06 	br	34dc <__alt_data_end+0xff0034dc>
    3b2c:	d9002c17 	ldw	r4,176(sp)
    3b30:	d9801e04 	addi	r6,sp,120
    3b34:	b80b883a 	mov	r5,r23
    3b38:	00094900 	call	9490 <__sprint_r>
    3b3c:	103bef1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3b40:	d8c02017 	ldw	r3,128(sp)
    3b44:	da000404 	addi	r8,sp,16
    3b48:	d9003217 	ldw	r4,200(sp)
    3b4c:	d8802617 	ldw	r2,152(sp)
    3b50:	d9403317 	ldw	r5,204(sp)
    3b54:	8123883a 	add	r17,r16,r4
    3b58:	11400216 	blt	r2,r5,3b64 <___vfprintf_internal_r+0x1470>
    3b5c:	9100004c 	andi	r4,r18,1
    3b60:	20000d26 	beq	r4,zero,3b98 <___vfprintf_internal_r+0x14a4>
    3b64:	d9003717 	ldw	r4,220(sp)
    3b68:	d9403417 	ldw	r5,208(sp)
    3b6c:	1907883a 	add	r3,r3,r4
    3b70:	d9001f17 	ldw	r4,124(sp)
    3b74:	41400015 	stw	r5,0(r8)
    3b78:	d9403717 	ldw	r5,220(sp)
    3b7c:	21000044 	addi	r4,r4,1
    3b80:	d8c02015 	stw	r3,128(sp)
    3b84:	41400115 	stw	r5,4(r8)
    3b88:	d9001f15 	stw	r4,124(sp)
    3b8c:	014001c4 	movi	r5,7
    3b90:	2901e816 	blt	r5,r4,4334 <___vfprintf_internal_r+0x1c40>
    3b94:	42000204 	addi	r8,r8,8
    3b98:	d9003317 	ldw	r4,204(sp)
    3b9c:	8121883a 	add	r16,r16,r4
    3ba0:	2085c83a 	sub	r2,r4,r2
    3ba4:	8461c83a 	sub	r16,r16,r17
    3ba8:	1400010e 	bge	r2,r16,3bb0 <___vfprintf_internal_r+0x14bc>
    3bac:	1021883a 	mov	r16,r2
    3bb0:	04000a0e 	bge	zero,r16,3bdc <___vfprintf_internal_r+0x14e8>
    3bb4:	d9001f17 	ldw	r4,124(sp)
    3bb8:	1c07883a 	add	r3,r3,r16
    3bbc:	44400015 	stw	r17,0(r8)
    3bc0:	21000044 	addi	r4,r4,1
    3bc4:	44000115 	stw	r16,4(r8)
    3bc8:	d8c02015 	stw	r3,128(sp)
    3bcc:	d9001f15 	stw	r4,124(sp)
    3bd0:	014001c4 	movi	r5,7
    3bd4:	2901fb16 	blt	r5,r4,43c4 <___vfprintf_internal_r+0x1cd0>
    3bd8:	42000204 	addi	r8,r8,8
    3bdc:	8001f716 	blt	r16,zero,43bc <___vfprintf_internal_r+0x1cc8>
    3be0:	1421c83a 	sub	r16,r2,r16
    3be4:	043d380e 	bge	zero,r16,30c8 <__alt_data_end+0xff0030c8>
    3be8:	04400404 	movi	r17,16
    3bec:	d8801f17 	ldw	r2,124(sp)
    3bf0:	8c3efb0e 	bge	r17,r16,37e0 <__alt_data_end+0xff0037e0>
    3bf4:	01400074 	movhi	r5,1
    3bf8:	29419b84 	addi	r5,r5,1646
    3bfc:	d9402b15 	stw	r5,172(sp)
    3c00:	058001c4 	movi	r22,7
    3c04:	dcc02c17 	ldw	r19,176(sp)
    3c08:	00000306 	br	3c18 <___vfprintf_internal_r+0x1524>
    3c0c:	42000204 	addi	r8,r8,8
    3c10:	843ffc04 	addi	r16,r16,-16
    3c14:	8c3ef50e 	bge	r17,r16,37ec <__alt_data_end+0xff0037ec>
    3c18:	18c00404 	addi	r3,r3,16
    3c1c:	10800044 	addi	r2,r2,1
    3c20:	45000015 	stw	r20,0(r8)
    3c24:	44400115 	stw	r17,4(r8)
    3c28:	d8c02015 	stw	r3,128(sp)
    3c2c:	d8801f15 	stw	r2,124(sp)
    3c30:	b0bff60e 	bge	r22,r2,3c0c <__alt_data_end+0xff003c0c>
    3c34:	d9801e04 	addi	r6,sp,120
    3c38:	b80b883a 	mov	r5,r23
    3c3c:	9809883a 	mov	r4,r19
    3c40:	00094900 	call	9490 <__sprint_r>
    3c44:	103bad1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3c48:	d8c02017 	ldw	r3,128(sp)
    3c4c:	d8801f17 	ldw	r2,124(sp)
    3c50:	da000404 	addi	r8,sp,16
    3c54:	003fee06 	br	3c10 <__alt_data_end+0xff003c10>
    3c58:	9088703a 	and	r4,r18,r2
    3c5c:	203eab1e 	bne	r4,zero,370c <__alt_data_end+0xff00370c>
    3c60:	dc401f17 	ldw	r17,124(sp)
    3c64:	40800115 	stw	r2,4(r8)
    3c68:	44000015 	stw	r16,0(r8)
    3c6c:	8c400044 	addi	r17,r17,1
    3c70:	d8c02015 	stw	r3,128(sp)
    3c74:	dc401f15 	stw	r17,124(sp)
    3c78:	008001c4 	movi	r2,7
    3c7c:	14400e16 	blt	r2,r17,3cb8 <___vfprintf_internal_r+0x15c4>
    3c80:	45800204 	addi	r22,r8,8
    3c84:	003eca06 	br	37b0 <__alt_data_end+0xff0037b0>
    3c88:	01000074 	movhi	r4,1
    3c8c:	21019b84 	addi	r4,r4,1646
    3c90:	d9002b15 	stw	r4,172(sp)
    3c94:	d8802b17 	ldw	r2,172(sp)
    3c98:	1c07883a 	add	r3,r3,r16
    3c9c:	8c400044 	addi	r17,r17,1
    3ca0:	b0800015 	stw	r2,0(r22)
    3ca4:	b4000115 	stw	r16,4(r22)
    3ca8:	d8c02015 	stw	r3,128(sp)
    3cac:	dc401f15 	stw	r17,124(sp)
    3cb0:	008001c4 	movi	r2,7
    3cb4:	147ebd0e 	bge	r2,r17,37ac <__alt_data_end+0xff0037ac>
    3cb8:	d9002c17 	ldw	r4,176(sp)
    3cbc:	d9801e04 	addi	r6,sp,120
    3cc0:	b80b883a 	mov	r5,r23
    3cc4:	00094900 	call	9490 <__sprint_r>
    3cc8:	103b8c1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3ccc:	d8c02017 	ldw	r3,128(sp)
    3cd0:	dc401f17 	ldw	r17,124(sp)
    3cd4:	dd800404 	addi	r22,sp,16
    3cd8:	003eb506 	br	37b0 <__alt_data_end+0xff0037b0>
    3cdc:	d9002c17 	ldw	r4,176(sp)
    3ce0:	d9801e04 	addi	r6,sp,120
    3ce4:	b80b883a 	mov	r5,r23
    3ce8:	00094900 	call	9490 <__sprint_r>
    3cec:	103b831e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3cf0:	d8c02017 	ldw	r3,128(sp)
    3cf4:	dc401f17 	ldw	r17,124(sp)
    3cf8:	da000404 	addi	r8,sp,16
    3cfc:	003e8d06 	br	3734 <__alt_data_end+0xff003734>
    3d00:	d9002c17 	ldw	r4,176(sp)
    3d04:	d9801e04 	addi	r6,sp,120
    3d08:	b80b883a 	mov	r5,r23
    3d0c:	00094900 	call	9490 <__sprint_r>
    3d10:	103b7a1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3d14:	d8c02017 	ldw	r3,128(sp)
    3d18:	dc401f17 	ldw	r17,124(sp)
    3d1c:	dd800404 	addi	r22,sp,16
    3d20:	003e8f06 	br	3760 <__alt_data_end+0xff003760>
    3d24:	0027883a 	mov	r19,zero
    3d28:	003f4a06 	br	3a54 <__alt_data_end+0xff003a54>
    3d2c:	d9002c17 	ldw	r4,176(sp)
    3d30:	d9801e04 	addi	r6,sp,120
    3d34:	b80b883a 	mov	r5,r23
    3d38:	00094900 	call	9490 <__sprint_r>
    3d3c:	103b6f1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    3d40:	d8c02017 	ldw	r3,128(sp)
    3d44:	da000404 	addi	r8,sp,16
    3d48:	003c9d06 	br	2fc0 <__alt_data_end+0xff002fc0>
    3d4c:	04e7c83a 	sub	r19,zero,r19
    3d50:	9804c03a 	cmpne	r2,r19,zero
    3d54:	05adc83a 	sub	r22,zero,r22
    3d58:	b0adc83a 	sub	r22,r22,r2
    3d5c:	d8802917 	ldw	r2,164(sp)
    3d60:	07000b44 	movi	fp,45
    3d64:	df002785 	stb	fp,158(sp)
    3d68:	10017b16 	blt	r2,zero,4358 <___vfprintf_internal_r+0x1c64>
    3d6c:	00bfdfc4 	movi	r2,-129
    3d70:	90a4703a 	and	r18,r18,r2
    3d74:	003bb106 	br	2c3c <__alt_data_end+0xff002c3c>
    3d78:	d9003617 	ldw	r4,216(sp)
    3d7c:	d9403817 	ldw	r5,224(sp)
    3d80:	da003d15 	stw	r8,244(sp)
    3d84:	00091080 	call	9108 <__fpclassifyd>
    3d88:	da003d17 	ldw	r8,244(sp)
    3d8c:	1000f026 	beq	r2,zero,4150 <___vfprintf_internal_r+0x1a5c>
    3d90:	d9002917 	ldw	r4,164(sp)
    3d94:	05bff7c4 	movi	r22,-33
    3d98:	00bfffc4 	movi	r2,-1
    3d9c:	8dac703a 	and	r22,r17,r22
    3da0:	20820026 	beq	r4,r2,45a4 <___vfprintf_internal_r+0x1eb0>
    3da4:	008011c4 	movi	r2,71
    3da8:	b081f726 	beq	r22,r2,4588 <___vfprintf_internal_r+0x1e94>
    3dac:	d9003817 	ldw	r4,224(sp)
    3db0:	90c04014 	ori	r3,r18,256
    3db4:	d8c02b15 	stw	r3,172(sp)
    3db8:	20021516 	blt	r4,zero,4610 <___vfprintf_internal_r+0x1f1c>
    3dbc:	dcc03817 	ldw	r19,224(sp)
    3dc0:	d8002a05 	stb	zero,168(sp)
    3dc4:	00801984 	movi	r2,102
    3dc8:	8881f926 	beq	r17,r2,45b0 <___vfprintf_internal_r+0x1ebc>
    3dcc:	00801184 	movi	r2,70
    3dd0:	88821c26 	beq	r17,r2,4644 <___vfprintf_internal_r+0x1f50>
    3dd4:	00801144 	movi	r2,69
    3dd8:	b081ef26 	beq	r22,r2,4598 <___vfprintf_internal_r+0x1ea4>
    3ddc:	d8c02917 	ldw	r3,164(sp)
    3de0:	d8802104 	addi	r2,sp,132
    3de4:	d8800315 	stw	r2,12(sp)
    3de8:	d9403617 	ldw	r5,216(sp)
    3dec:	d8802504 	addi	r2,sp,148
    3df0:	d9002c17 	ldw	r4,176(sp)
    3df4:	d8800215 	stw	r2,8(sp)
    3df8:	d8802604 	addi	r2,sp,152
    3dfc:	d8c00015 	stw	r3,0(sp)
    3e00:	d8800115 	stw	r2,4(sp)
    3e04:	01c00084 	movi	r7,2
    3e08:	980d883a 	mov	r6,r19
    3e0c:	d8c03c15 	stw	r3,240(sp)
    3e10:	da003d15 	stw	r8,244(sp)
    3e14:	0004d180 	call	4d18 <_dtoa_r>
    3e18:	1021883a 	mov	r16,r2
    3e1c:	008019c4 	movi	r2,103
    3e20:	d8c03c17 	ldw	r3,240(sp)
    3e24:	da003d17 	ldw	r8,244(sp)
    3e28:	88817126 	beq	r17,r2,43f0 <___vfprintf_internal_r+0x1cfc>
    3e2c:	008011c4 	movi	r2,71
    3e30:	88829226 	beq	r17,r2,487c <___vfprintf_internal_r+0x2188>
    3e34:	80f9883a 	add	fp,r16,r3
    3e38:	d9003617 	ldw	r4,216(sp)
    3e3c:	000d883a 	mov	r6,zero
    3e40:	000f883a 	mov	r7,zero
    3e44:	980b883a 	mov	r5,r19
    3e48:	da003d15 	stw	r8,244(sp)
    3e4c:	000d1080 	call	d108 <__eqdf2>
    3e50:	da003d17 	ldw	r8,244(sp)
    3e54:	10018d26 	beq	r2,zero,448c <___vfprintf_internal_r+0x1d98>
    3e58:	d8802117 	ldw	r2,132(sp)
    3e5c:	1700062e 	bgeu	r2,fp,3e78 <___vfprintf_internal_r+0x1784>
    3e60:	01000c04 	movi	r4,48
    3e64:	10c00044 	addi	r3,r2,1
    3e68:	d8c02115 	stw	r3,132(sp)
    3e6c:	11000005 	stb	r4,0(r2)
    3e70:	d8802117 	ldw	r2,132(sp)
    3e74:	173ffb36 	bltu	r2,fp,3e64 <__alt_data_end+0xff003e64>
    3e78:	1405c83a 	sub	r2,r2,r16
    3e7c:	d8803315 	stw	r2,204(sp)
    3e80:	008011c4 	movi	r2,71
    3e84:	b0817626 	beq	r22,r2,4460 <___vfprintf_internal_r+0x1d6c>
    3e88:	00801944 	movi	r2,101
    3e8c:	1442810e 	bge	r2,r17,4894 <___vfprintf_internal_r+0x21a0>
    3e90:	d8c02617 	ldw	r3,152(sp)
    3e94:	00801984 	movi	r2,102
    3e98:	d8c03215 	stw	r3,200(sp)
    3e9c:	8881fe26 	beq	r17,r2,4698 <___vfprintf_internal_r+0x1fa4>
    3ea0:	d8c03217 	ldw	r3,200(sp)
    3ea4:	d9003317 	ldw	r4,204(sp)
    3ea8:	1901dd16 	blt	r3,r4,4620 <___vfprintf_internal_r+0x1f2c>
    3eac:	9480004c 	andi	r18,r18,1
    3eb0:	90022b1e 	bne	r18,zero,4760 <___vfprintf_internal_r+0x206c>
    3eb4:	1805883a 	mov	r2,r3
    3eb8:	18028016 	blt	r3,zero,48bc <___vfprintf_internal_r+0x21c8>
    3ebc:	d8c03217 	ldw	r3,200(sp)
    3ec0:	044019c4 	movi	r17,103
    3ec4:	d8c02e15 	stw	r3,184(sp)
    3ec8:	df002a07 	ldb	fp,168(sp)
    3ecc:	e001531e 	bne	fp,zero,441c <___vfprintf_internal_r+0x1d28>
    3ed0:	df002783 	ldbu	fp,158(sp)
    3ed4:	d8802a15 	stw	r2,168(sp)
    3ed8:	dc802b17 	ldw	r18,172(sp)
    3edc:	d8002915 	stw	zero,164(sp)
    3ee0:	003bd106 	br	2e28 <__alt_data_end+0xff002e28>
    3ee4:	d8802d17 	ldw	r2,180(sp)
    3ee8:	d8c02d17 	ldw	r3,180(sp)
    3eec:	d9002d17 	ldw	r4,180(sp)
    3ef0:	10800017 	ldw	r2,0(r2)
    3ef4:	18c00117 	ldw	r3,4(r3)
    3ef8:	21000204 	addi	r4,r4,8
    3efc:	d8803615 	stw	r2,216(sp)
    3f00:	d8c03815 	stw	r3,224(sp)
    3f04:	d9002d15 	stw	r4,180(sp)
    3f08:	003b7506 	br	2ce0 <__alt_data_end+0xff002ce0>
    3f0c:	ac400007 	ldb	r17,0(r21)
    3f10:	003a5906 	br	2878 <__alt_data_end+0xff002878>
    3f14:	9080100c 	andi	r2,r18,64
    3f18:	1000a826 	beq	r2,zero,41bc <___vfprintf_internal_r+0x1ac8>
    3f1c:	d9002d17 	ldw	r4,180(sp)
    3f20:	002d883a 	mov	r22,zero
    3f24:	24c0000b 	ldhu	r19,0(r4)
    3f28:	21000104 	addi	r4,r4,4
    3f2c:	d9002d15 	stw	r4,180(sp)
    3f30:	003ccb06 	br	3260 <__alt_data_end+0xff003260>
    3f34:	d8c02d17 	ldw	r3,180(sp)
    3f38:	d9002917 	ldw	r4,164(sp)
    3f3c:	002d883a 	mov	r22,zero
    3f40:	18800104 	addi	r2,r3,4
    3f44:	1cc00017 	ldw	r19,0(r3)
    3f48:	203ebb0e 	bge	r4,zero,3a38 <__alt_data_end+0xff003a38>
    3f4c:	003ef106 	br	3b14 <__alt_data_end+0xff003b14>
    3f50:	9080040c 	andi	r2,r18,16
    3f54:	1000921e 	bne	r2,zero,41a0 <___vfprintf_internal_r+0x1aac>
    3f58:	9480100c 	andi	r18,r18,64
    3f5c:	90013926 	beq	r18,zero,4444 <___vfprintf_internal_r+0x1d50>
    3f60:	d9002d17 	ldw	r4,180(sp)
    3f64:	d9402f17 	ldw	r5,188(sp)
    3f68:	20800017 	ldw	r2,0(r4)
    3f6c:	21000104 	addi	r4,r4,4
    3f70:	d9002d15 	stw	r4,180(sp)
    3f74:	1140000d 	sth	r5,0(r2)
    3f78:	003a1606 	br	27d4 <__alt_data_end+0xff0027d4>
    3f7c:	9080100c 	andi	r2,r18,64
    3f80:	10008026 	beq	r2,zero,4184 <___vfprintf_internal_r+0x1a90>
    3f84:	d8c02d17 	ldw	r3,180(sp)
    3f88:	1cc0000f 	ldh	r19,0(r3)
    3f8c:	18c00104 	addi	r3,r3,4
    3f90:	d8c02d15 	stw	r3,180(sp)
    3f94:	982dd7fa 	srai	r22,r19,31
    3f98:	b005883a 	mov	r2,r22
    3f9c:	003b1f06 	br	2c1c <__alt_data_end+0xff002c1c>
    3fa0:	9080100c 	andi	r2,r18,64
    3fa4:	d8002785 	stb	zero,158(sp)
    3fa8:	10008a1e 	bne	r2,zero,41d4 <___vfprintf_internal_r+0x1ae0>
    3fac:	d9402d17 	ldw	r5,180(sp)
    3fb0:	d8c02917 	ldw	r3,164(sp)
    3fb4:	002d883a 	mov	r22,zero
    3fb8:	28800104 	addi	r2,r5,4
    3fbc:	2cc00017 	ldw	r19,0(r5)
    3fc0:	183e4b0e 	bge	r3,zero,38f0 <__alt_data_end+0xff0038f0>
    3fc4:	9d86b03a 	or	r3,r19,r22
    3fc8:	d8802d15 	stw	r2,180(sp)
    3fcc:	183e4c1e 	bne	r3,zero,3900 <__alt_data_end+0xff003900>
    3fd0:	0039883a 	mov	fp,zero
    3fd4:	0005883a 	mov	r2,zero
    3fd8:	003d4006 	br	34dc <__alt_data_end+0xff0034dc>
    3fdc:	01400074 	movhi	r5,1
    3fe0:	29419b84 	addi	r5,r5,1646
    3fe4:	d9402b15 	stw	r5,172(sp)
    3fe8:	d9402b17 	ldw	r5,172(sp)
    3fec:	1c47883a 	add	r3,r3,r17
    3ff0:	10800044 	addi	r2,r2,1
    3ff4:	41400015 	stw	r5,0(r8)
    3ff8:	44400115 	stw	r17,4(r8)
    3ffc:	d8c02015 	stw	r3,128(sp)
    4000:	d8801f15 	stw	r2,124(sp)
    4004:	010001c4 	movi	r4,7
    4008:	20bec816 	blt	r4,r2,3b2c <__alt_data_end+0xff003b2c>
    400c:	42000204 	addi	r8,r8,8
    4010:	003ecd06 	br	3b48 <__alt_data_end+0xff003b48>
    4014:	d9002917 	ldw	r4,164(sp)
    4018:	d8002785 	stb	zero,158(sp)
    401c:	203d2d16 	blt	r4,zero,34d4 <__alt_data_end+0xff0034d4>
    4020:	00bfdfc4 	movi	r2,-129
    4024:	90a4703a 	and	r18,r18,r2
    4028:	003a9106 	br	2a70 <__alt_data_end+0xff002a70>
    402c:	01000074 	movhi	r4,1
    4030:	21019b84 	addi	r4,r4,1646
    4034:	d9002b15 	stw	r4,172(sp)
    4038:	003c0c06 	br	306c <__alt_data_end+0xff00306c>
    403c:	d9002c17 	ldw	r4,176(sp)
    4040:	d9801e04 	addi	r6,sp,120
    4044:	b80b883a 	mov	r5,r23
    4048:	00094900 	call	9490 <__sprint_r>
    404c:	103aab1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    4050:	d8c02017 	ldw	r3,128(sp)
    4054:	da000404 	addi	r8,sp,16
    4058:	003d4106 	br	3560 <__alt_data_end+0xff003560>
    405c:	d8801f17 	ldw	r2,124(sp)
    4060:	01400074 	movhi	r5,1
    4064:	01000044 	movi	r4,1
    4068:	18c00044 	addi	r3,r3,1
    406c:	10800044 	addi	r2,r2,1
    4070:	29419b04 	addi	r5,r5,1644
    4074:	41000115 	stw	r4,4(r8)
    4078:	41400015 	stw	r5,0(r8)
    407c:	d8c02015 	stw	r3,128(sp)
    4080:	d8801f15 	stw	r2,124(sp)
    4084:	010001c4 	movi	r4,7
    4088:	20805c16 	blt	r4,r2,41fc <___vfprintf_internal_r+0x1b08>
    408c:	42000204 	addi	r8,r8,8
    4090:	8800041e 	bne	r17,zero,40a4 <___vfprintf_internal_r+0x19b0>
    4094:	d8803317 	ldw	r2,204(sp)
    4098:	1000021e 	bne	r2,zero,40a4 <___vfprintf_internal_r+0x19b0>
    409c:	9080004c 	andi	r2,r18,1
    40a0:	103c0926 	beq	r2,zero,30c8 <__alt_data_end+0xff0030c8>
    40a4:	d9003717 	ldw	r4,220(sp)
    40a8:	d8801f17 	ldw	r2,124(sp)
    40ac:	d9403417 	ldw	r5,208(sp)
    40b0:	20c7883a 	add	r3,r4,r3
    40b4:	10800044 	addi	r2,r2,1
    40b8:	41000115 	stw	r4,4(r8)
    40bc:	41400015 	stw	r5,0(r8)
    40c0:	d8c02015 	stw	r3,128(sp)
    40c4:	d8801f15 	stw	r2,124(sp)
    40c8:	010001c4 	movi	r4,7
    40cc:	20812116 	blt	r4,r2,4554 <___vfprintf_internal_r+0x1e60>
    40d0:	42000204 	addi	r8,r8,8
    40d4:	0463c83a 	sub	r17,zero,r17
    40d8:	0440730e 	bge	zero,r17,42a8 <___vfprintf_internal_r+0x1bb4>
    40dc:	05800404 	movi	r22,16
    40e0:	b440860e 	bge	r22,r17,42fc <___vfprintf_internal_r+0x1c08>
    40e4:	01400074 	movhi	r5,1
    40e8:	29419b84 	addi	r5,r5,1646
    40ec:	d9402b15 	stw	r5,172(sp)
    40f0:	070001c4 	movi	fp,7
    40f4:	dcc02c17 	ldw	r19,176(sp)
    40f8:	00000306 	br	4108 <___vfprintf_internal_r+0x1a14>
    40fc:	42000204 	addi	r8,r8,8
    4100:	8c7ffc04 	addi	r17,r17,-16
    4104:	b440800e 	bge	r22,r17,4308 <___vfprintf_internal_r+0x1c14>
    4108:	18c00404 	addi	r3,r3,16
    410c:	10800044 	addi	r2,r2,1
    4110:	45000015 	stw	r20,0(r8)
    4114:	45800115 	stw	r22,4(r8)
    4118:	d8c02015 	stw	r3,128(sp)
    411c:	d8801f15 	stw	r2,124(sp)
    4120:	e0bff60e 	bge	fp,r2,40fc <__alt_data_end+0xff0040fc>
    4124:	d9801e04 	addi	r6,sp,120
    4128:	b80b883a 	mov	r5,r23
    412c:	9809883a 	mov	r4,r19
    4130:	00094900 	call	9490 <__sprint_r>
    4134:	103a711e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    4138:	d8c02017 	ldw	r3,128(sp)
    413c:	d8801f17 	ldw	r2,124(sp)
    4140:	da000404 	addi	r8,sp,16
    4144:	003fee06 	br	4100 <__alt_data_end+0xff004100>
    4148:	00bfffc4 	movi	r2,-1
    414c:	003a6f06 	br	2b0c <__alt_data_end+0xff002b0c>
    4150:	008011c4 	movi	r2,71
    4154:	1440b816 	blt	r2,r17,4438 <___vfprintf_internal_r+0x1d44>
    4158:	04000074 	movhi	r16,1
    415c:	84018d04 	addi	r16,r16,1588
    4160:	00c000c4 	movi	r3,3
    4164:	00bfdfc4 	movi	r2,-129
    4168:	d8c02a15 	stw	r3,168(sp)
    416c:	90a4703a 	and	r18,r18,r2
    4170:	df002783 	ldbu	fp,158(sp)
    4174:	d8c02e15 	stw	r3,184(sp)
    4178:	d8002915 	stw	zero,164(sp)
    417c:	d8003215 	stw	zero,200(sp)
    4180:	003b2906 	br	2e28 <__alt_data_end+0xff002e28>
    4184:	d9002d17 	ldw	r4,180(sp)
    4188:	24c00017 	ldw	r19,0(r4)
    418c:	21000104 	addi	r4,r4,4
    4190:	d9002d15 	stw	r4,180(sp)
    4194:	982dd7fa 	srai	r22,r19,31
    4198:	b005883a 	mov	r2,r22
    419c:	003a9f06 	br	2c1c <__alt_data_end+0xff002c1c>
    41a0:	d9402d17 	ldw	r5,180(sp)
    41a4:	d8c02f17 	ldw	r3,188(sp)
    41a8:	28800017 	ldw	r2,0(r5)
    41ac:	29400104 	addi	r5,r5,4
    41b0:	d9402d15 	stw	r5,180(sp)
    41b4:	10c00015 	stw	r3,0(r2)
    41b8:	00398606 	br	27d4 <__alt_data_end+0xff0027d4>
    41bc:	d9402d17 	ldw	r5,180(sp)
    41c0:	002d883a 	mov	r22,zero
    41c4:	2cc00017 	ldw	r19,0(r5)
    41c8:	29400104 	addi	r5,r5,4
    41cc:	d9402d15 	stw	r5,180(sp)
    41d0:	003c2306 	br	3260 <__alt_data_end+0xff003260>
    41d4:	d8c02d17 	ldw	r3,180(sp)
    41d8:	d9002917 	ldw	r4,164(sp)
    41dc:	002d883a 	mov	r22,zero
    41e0:	18800104 	addi	r2,r3,4
    41e4:	1cc0000b 	ldhu	r19,0(r3)
    41e8:	203dc10e 	bge	r4,zero,38f0 <__alt_data_end+0xff0038f0>
    41ec:	003f7506 	br	3fc4 <__alt_data_end+0xff003fc4>
    41f0:	04000074 	movhi	r16,1
    41f4:	84018b04 	addi	r16,r16,1580
    41f8:	003acc06 	br	2d2c <__alt_data_end+0xff002d2c>
    41fc:	d9002c17 	ldw	r4,176(sp)
    4200:	d9801e04 	addi	r6,sp,120
    4204:	b80b883a 	mov	r5,r23
    4208:	00094900 	call	9490 <__sprint_r>
    420c:	103a3b1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    4210:	dc402617 	ldw	r17,152(sp)
    4214:	d8c02017 	ldw	r3,128(sp)
    4218:	da000404 	addi	r8,sp,16
    421c:	003f9c06 	br	4090 <__alt_data_end+0xff004090>
    4220:	ac400043 	ldbu	r17,1(r21)
    4224:	94800814 	ori	r18,r18,32
    4228:	ad400044 	addi	r21,r21,1
    422c:	8c403fcc 	andi	r17,r17,255
    4230:	8c40201c 	xori	r17,r17,128
    4234:	8c7fe004 	addi	r17,r17,-128
    4238:	00398f06 	br	2878 <__alt_data_end+0xff002878>
    423c:	d8c02d15 	stw	r3,180(sp)
    4240:	0039883a 	mov	fp,zero
    4244:	003e3506 	br	3b1c <__alt_data_end+0xff003b1c>
    4248:	d9002c17 	ldw	r4,176(sp)
    424c:	d9801e04 	addi	r6,sp,120
    4250:	b80b883a 	mov	r5,r23
    4254:	00094900 	call	9490 <__sprint_r>
    4258:	103a281e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    425c:	d8c02017 	ldw	r3,128(sp)
    4260:	da000404 	addi	r8,sp,16
    4264:	003cd006 	br	35a8 <__alt_data_end+0xff0035a8>
    4268:	8009883a 	mov	r4,r16
    426c:	da003d15 	stw	r8,244(sp)
    4270:	000265c0 	call	265c <strlen>
    4274:	d8802e15 	stw	r2,184(sp)
    4278:	da003d17 	ldw	r8,244(sp)
    427c:	103c340e 	bge	r2,zero,3350 <__alt_data_end+0xff003350>
    4280:	0005883a 	mov	r2,zero
    4284:	003c3206 	br	3350 <__alt_data_end+0xff003350>
    4288:	d9002c17 	ldw	r4,176(sp)
    428c:	d9801e04 	addi	r6,sp,120
    4290:	b80b883a 	mov	r5,r23
    4294:	00094900 	call	9490 <__sprint_r>
    4298:	103a181e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    429c:	d8c02017 	ldw	r3,128(sp)
    42a0:	d8801f17 	ldw	r2,124(sp)
    42a4:	da000404 	addi	r8,sp,16
    42a8:	d9403317 	ldw	r5,204(sp)
    42ac:	10800044 	addi	r2,r2,1
    42b0:	44000015 	stw	r16,0(r8)
    42b4:	28c7883a 	add	r3,r5,r3
    42b8:	003b7d06 	br	30b0 <__alt_data_end+0xff0030b0>
    42bc:	01000074 	movhi	r4,1
    42c0:	21019f84 	addi	r4,r4,1662
    42c4:	d9003515 	stw	r4,212(sp)
    42c8:	003b1406 	br	2f1c <__alt_data_end+0xff002f1c>
    42cc:	013fffc4 	movi	r4,-1
    42d0:	003a3506 	br	2ba8 <__alt_data_end+0xff002ba8>
    42d4:	0023883a 	mov	r17,zero
    42d8:	003d9d06 	br	3950 <__alt_data_end+0xff003950>
    42dc:	d9002c17 	ldw	r4,176(sp)
    42e0:	d9801e04 	addi	r6,sp,120
    42e4:	b80b883a 	mov	r5,r23
    42e8:	00094900 	call	9490 <__sprint_r>
    42ec:	103a031e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    42f0:	d8c02017 	ldw	r3,128(sp)
    42f4:	da000404 	addi	r8,sp,16
    42f8:	003d9406 	br	394c <__alt_data_end+0xff00394c>
    42fc:	01000074 	movhi	r4,1
    4300:	21019b84 	addi	r4,r4,1646
    4304:	d9002b15 	stw	r4,172(sp)
    4308:	d9002b17 	ldw	r4,172(sp)
    430c:	1c47883a 	add	r3,r3,r17
    4310:	10800044 	addi	r2,r2,1
    4314:	41000015 	stw	r4,0(r8)
    4318:	44400115 	stw	r17,4(r8)
    431c:	d8c02015 	stw	r3,128(sp)
    4320:	d8801f15 	stw	r2,124(sp)
    4324:	010001c4 	movi	r4,7
    4328:	20bfd716 	blt	r4,r2,4288 <__alt_data_end+0xff004288>
    432c:	42000204 	addi	r8,r8,8
    4330:	003fdd06 	br	42a8 <__alt_data_end+0xff0042a8>
    4334:	d9002c17 	ldw	r4,176(sp)
    4338:	d9801e04 	addi	r6,sp,120
    433c:	b80b883a 	mov	r5,r23
    4340:	00094900 	call	9490 <__sprint_r>
    4344:	1039ed1e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    4348:	d8802617 	ldw	r2,152(sp)
    434c:	d8c02017 	ldw	r3,128(sp)
    4350:	da000404 	addi	r8,sp,16
    4354:	003e1006 	br	3b98 <__alt_data_end+0xff003b98>
    4358:	00800044 	movi	r2,1
    435c:	10803fcc 	andi	r2,r2,255
    4360:	00c00044 	movi	r3,1
    4364:	10fa3526 	beq	r2,r3,2c3c <__alt_data_end+0xff002c3c>
    4368:	00c00084 	movi	r3,2
    436c:	10fbcb26 	beq	r2,r3,329c <__alt_data_end+0xff00329c>
    4370:	003a8f06 	br	2db0 <__alt_data_end+0xff002db0>
    4374:	01000074 	movhi	r4,1
    4378:	21019f84 	addi	r4,r4,1662
    437c:	d9003515 	stw	r4,212(sp)
    4380:	003b7606 	br	315c <__alt_data_end+0xff00315c>
    4384:	d8802917 	ldw	r2,164(sp)
    4388:	00c00184 	movi	r3,6
    438c:	1880012e 	bgeu	r3,r2,4394 <___vfprintf_internal_r+0x1ca0>
    4390:	1805883a 	mov	r2,r3
    4394:	d8802e15 	stw	r2,184(sp)
    4398:	1000ef16 	blt	r2,zero,4758 <___vfprintf_internal_r+0x2064>
    439c:	04000074 	movhi	r16,1
    43a0:	d8802a15 	stw	r2,168(sp)
    43a4:	dcc02d15 	stw	r19,180(sp)
    43a8:	d8002915 	stw	zero,164(sp)
    43ac:	d8003215 	stw	zero,200(sp)
    43b0:	84019904 	addi	r16,r16,1636
    43b4:	0039883a 	mov	fp,zero
    43b8:	003aa206 	br	2e44 <__alt_data_end+0xff002e44>
    43bc:	0021883a 	mov	r16,zero
    43c0:	003e0706 	br	3be0 <__alt_data_end+0xff003be0>
    43c4:	d9002c17 	ldw	r4,176(sp)
    43c8:	d9801e04 	addi	r6,sp,120
    43cc:	b80b883a 	mov	r5,r23
    43d0:	00094900 	call	9490 <__sprint_r>
    43d4:	1039c91e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    43d8:	d8802617 	ldw	r2,152(sp)
    43dc:	d9403317 	ldw	r5,204(sp)
    43e0:	d8c02017 	ldw	r3,128(sp)
    43e4:	da000404 	addi	r8,sp,16
    43e8:	2885c83a 	sub	r2,r5,r2
    43ec:	003dfb06 	br	3bdc <__alt_data_end+0xff003bdc>
    43f0:	9080004c 	andi	r2,r18,1
    43f4:	103e8f1e 	bne	r2,zero,3e34 <__alt_data_end+0xff003e34>
    43f8:	d8802117 	ldw	r2,132(sp)
    43fc:	003e9e06 	br	3e78 <__alt_data_end+0xff003e78>
    4400:	1025883a 	mov	r18,r2
    4404:	0039883a 	mov	fp,zero
    4408:	00800084 	movi	r2,2
    440c:	003fd306 	br	435c <__alt_data_end+0xff00435c>
    4410:	07000b44 	movi	fp,45
    4414:	df002785 	stb	fp,158(sp)
    4418:	003a4006 	br	2d1c <__alt_data_end+0xff002d1c>
    441c:	00c00b44 	movi	r3,45
    4420:	d8c02785 	stb	r3,158(sp)
    4424:	d8802a15 	stw	r2,168(sp)
    4428:	dc802b17 	ldw	r18,172(sp)
    442c:	d8002915 	stw	zero,164(sp)
    4430:	07000b44 	movi	fp,45
    4434:	003a8006 	br	2e38 <__alt_data_end+0xff002e38>
    4438:	04000074 	movhi	r16,1
    443c:	84018e04 	addi	r16,r16,1592
    4440:	003f4706 	br	4160 <__alt_data_end+0xff004160>
    4444:	d8c02d17 	ldw	r3,180(sp)
    4448:	d9002f17 	ldw	r4,188(sp)
    444c:	18800017 	ldw	r2,0(r3)
    4450:	18c00104 	addi	r3,r3,4
    4454:	d8c02d15 	stw	r3,180(sp)
    4458:	11000015 	stw	r4,0(r2)
    445c:	0038dd06 	br	27d4 <__alt_data_end+0xff0027d4>
    4460:	dd802617 	ldw	r22,152(sp)
    4464:	00bfff44 	movi	r2,-3
    4468:	b0801c16 	blt	r22,r2,44dc <___vfprintf_internal_r+0x1de8>
    446c:	d9402917 	ldw	r5,164(sp)
    4470:	2d801a16 	blt	r5,r22,44dc <___vfprintf_internal_r+0x1de8>
    4474:	dd803215 	stw	r22,200(sp)
    4478:	003e8906 	br	3ea0 <__alt_data_end+0xff003ea0>
    447c:	01000074 	movhi	r4,1
    4480:	21019b84 	addi	r4,r4,1646
    4484:	d9002b15 	stw	r4,172(sp)
    4488:	003c9106 	br	36d0 <__alt_data_end+0xff0036d0>
    448c:	e005883a 	mov	r2,fp
    4490:	003e7906 	br	3e78 <__alt_data_end+0xff003e78>
    4494:	d9402917 	ldw	r5,164(sp)
    4498:	df002783 	ldbu	fp,158(sp)
    449c:	dcc02d15 	stw	r19,180(sp)
    44a0:	d9402a15 	stw	r5,168(sp)
    44a4:	d9402e15 	stw	r5,184(sp)
    44a8:	d8002915 	stw	zero,164(sp)
    44ac:	d8003215 	stw	zero,200(sp)
    44b0:	003a5d06 	br	2e28 <__alt_data_end+0xff002e28>
    44b4:	9080004c 	andi	r2,r18,1
    44b8:	0039883a 	mov	fp,zero
    44bc:	10000426 	beq	r2,zero,44d0 <___vfprintf_internal_r+0x1ddc>
    44c0:	00800c04 	movi	r2,48
    44c4:	dc001dc4 	addi	r16,sp,119
    44c8:	d8801dc5 	stb	r2,119(sp)
    44cc:	003b8006 	br	32d0 <__alt_data_end+0xff0032d0>
    44d0:	d8002e15 	stw	zero,184(sp)
    44d4:	dc001e04 	addi	r16,sp,120
    44d8:	003a4d06 	br	2e10 <__alt_data_end+0xff002e10>
    44dc:	8c7fff84 	addi	r17,r17,-2
    44e0:	b5bfffc4 	addi	r22,r22,-1
    44e4:	dd802615 	stw	r22,152(sp)
    44e8:	dc4022c5 	stb	r17,139(sp)
    44ec:	b000bf16 	blt	r22,zero,47ec <___vfprintf_internal_r+0x20f8>
    44f0:	00800ac4 	movi	r2,43
    44f4:	d8802305 	stb	r2,140(sp)
    44f8:	00800244 	movi	r2,9
    44fc:	15807016 	blt	r2,r22,46c0 <___vfprintf_internal_r+0x1fcc>
    4500:	00800c04 	movi	r2,48
    4504:	b5800c04 	addi	r22,r22,48
    4508:	d8802345 	stb	r2,141(sp)
    450c:	dd802385 	stb	r22,142(sp)
    4510:	d88023c4 	addi	r2,sp,143
    4514:	df0022c4 	addi	fp,sp,139
    4518:	d8c03317 	ldw	r3,204(sp)
    451c:	1739c83a 	sub	fp,r2,fp
    4520:	d9003317 	ldw	r4,204(sp)
    4524:	e0c7883a 	add	r3,fp,r3
    4528:	df003a15 	stw	fp,232(sp)
    452c:	d8c02e15 	stw	r3,184(sp)
    4530:	00800044 	movi	r2,1
    4534:	1100b30e 	bge	r2,r4,4804 <___vfprintf_internal_r+0x2110>
    4538:	d8c02e17 	ldw	r3,184(sp)
    453c:	18c00044 	addi	r3,r3,1
    4540:	d8c02e15 	stw	r3,184(sp)
    4544:	1805883a 	mov	r2,r3
    4548:	1800ac16 	blt	r3,zero,47fc <___vfprintf_internal_r+0x2108>
    454c:	d8003215 	stw	zero,200(sp)
    4550:	003e5d06 	br	3ec8 <__alt_data_end+0xff003ec8>
    4554:	d9002c17 	ldw	r4,176(sp)
    4558:	d9801e04 	addi	r6,sp,120
    455c:	b80b883a 	mov	r5,r23
    4560:	00094900 	call	9490 <__sprint_r>
    4564:	1039651e 	bne	r2,zero,2afc <__alt_data_end+0xff002afc>
    4568:	dc402617 	ldw	r17,152(sp)
    456c:	d8c02017 	ldw	r3,128(sp)
    4570:	d8801f17 	ldw	r2,124(sp)
    4574:	da000404 	addi	r8,sp,16
    4578:	003ed606 	br	40d4 <__alt_data_end+0xff0040d4>
    457c:	582b883a 	mov	r21,r11
    4580:	d8002915 	stw	zero,164(sp)
    4584:	0038bd06 	br	287c <__alt_data_end+0xff00287c>
    4588:	d8802917 	ldw	r2,164(sp)
    458c:	103e071e 	bne	r2,zero,3dac <__alt_data_end+0xff003dac>
    4590:	dc002915 	stw	r16,164(sp)
    4594:	003e0506 	br	3dac <__alt_data_end+0xff003dac>
    4598:	d9002917 	ldw	r4,164(sp)
    459c:	20c00044 	addi	r3,r4,1
    45a0:	003e0f06 	br	3de0 <__alt_data_end+0xff003de0>
    45a4:	01400184 	movi	r5,6
    45a8:	d9402915 	stw	r5,164(sp)
    45ac:	003dff06 	br	3dac <__alt_data_end+0xff003dac>
    45b0:	d8802104 	addi	r2,sp,132
    45b4:	d8800315 	stw	r2,12(sp)
    45b8:	d8802504 	addi	r2,sp,148
    45bc:	d8800215 	stw	r2,8(sp)
    45c0:	d8802604 	addi	r2,sp,152
    45c4:	d8800115 	stw	r2,4(sp)
    45c8:	d8802917 	ldw	r2,164(sp)
    45cc:	d9403617 	ldw	r5,216(sp)
    45d0:	d9002c17 	ldw	r4,176(sp)
    45d4:	d8800015 	stw	r2,0(sp)
    45d8:	01c000c4 	movi	r7,3
    45dc:	980d883a 	mov	r6,r19
    45e0:	da003d15 	stw	r8,244(sp)
    45e4:	0004d180 	call	4d18 <_dtoa_r>
    45e8:	d8c02917 	ldw	r3,164(sp)
    45ec:	da003d17 	ldw	r8,244(sp)
    45f0:	1021883a 	mov	r16,r2
    45f4:	10f9883a 	add	fp,r2,r3
    45f8:	81000007 	ldb	r4,0(r16)
    45fc:	00800c04 	movi	r2,48
    4600:	20805e26 	beq	r4,r2,477c <___vfprintf_internal_r+0x2088>
    4604:	d8c02617 	ldw	r3,152(sp)
    4608:	e0f9883a 	add	fp,fp,r3
    460c:	003e0a06 	br	3e38 <__alt_data_end+0xff003e38>
    4610:	00c00b44 	movi	r3,45
    4614:	24e0003c 	xorhi	r19,r4,32768
    4618:	d8c02a05 	stb	r3,168(sp)
    461c:	003de906 	br	3dc4 <__alt_data_end+0xff003dc4>
    4620:	d8c03217 	ldw	r3,200(sp)
    4624:	00c07a0e 	bge	zero,r3,4810 <___vfprintf_internal_r+0x211c>
    4628:	00800044 	movi	r2,1
    462c:	d9003317 	ldw	r4,204(sp)
    4630:	1105883a 	add	r2,r2,r4
    4634:	d8802e15 	stw	r2,184(sp)
    4638:	10004e16 	blt	r2,zero,4774 <___vfprintf_internal_r+0x2080>
    463c:	044019c4 	movi	r17,103
    4640:	003e2106 	br	3ec8 <__alt_data_end+0xff003ec8>
    4644:	d9002917 	ldw	r4,164(sp)
    4648:	d8802104 	addi	r2,sp,132
    464c:	d8800315 	stw	r2,12(sp)
    4650:	d9000015 	stw	r4,0(sp)
    4654:	d8802504 	addi	r2,sp,148
    4658:	d9403617 	ldw	r5,216(sp)
    465c:	d9002c17 	ldw	r4,176(sp)
    4660:	d8800215 	stw	r2,8(sp)
    4664:	d8802604 	addi	r2,sp,152
    4668:	d8800115 	stw	r2,4(sp)
    466c:	01c000c4 	movi	r7,3
    4670:	980d883a 	mov	r6,r19
    4674:	da003d15 	stw	r8,244(sp)
    4678:	0004d180 	call	4d18 <_dtoa_r>
    467c:	d8c02917 	ldw	r3,164(sp)
    4680:	da003d17 	ldw	r8,244(sp)
    4684:	1021883a 	mov	r16,r2
    4688:	00801184 	movi	r2,70
    468c:	80f9883a 	add	fp,r16,r3
    4690:	88bfd926 	beq	r17,r2,45f8 <__alt_data_end+0xff0045f8>
    4694:	003de806 	br	3e38 <__alt_data_end+0xff003e38>
    4698:	d9002917 	ldw	r4,164(sp)
    469c:	00c04d0e 	bge	zero,r3,47d4 <___vfprintf_internal_r+0x20e0>
    46a0:	2000441e 	bne	r4,zero,47b4 <___vfprintf_internal_r+0x20c0>
    46a4:	9480004c 	andi	r18,r18,1
    46a8:	9000421e 	bne	r18,zero,47b4 <___vfprintf_internal_r+0x20c0>
    46ac:	1805883a 	mov	r2,r3
    46b0:	18007016 	blt	r3,zero,4874 <___vfprintf_internal_r+0x2180>
    46b4:	d8c03217 	ldw	r3,200(sp)
    46b8:	d8c02e15 	stw	r3,184(sp)
    46bc:	003e0206 	br	3ec8 <__alt_data_end+0xff003ec8>
    46c0:	df0022c4 	addi	fp,sp,139
    46c4:	dc002915 	stw	r16,164(sp)
    46c8:	4027883a 	mov	r19,r8
    46cc:	e021883a 	mov	r16,fp
    46d0:	b009883a 	mov	r4,r22
    46d4:	01400284 	movi	r5,10
    46d8:	000be440 	call	be44 <__modsi3>
    46dc:	10800c04 	addi	r2,r2,48
    46e0:	843fffc4 	addi	r16,r16,-1
    46e4:	b009883a 	mov	r4,r22
    46e8:	01400284 	movi	r5,10
    46ec:	80800005 	stb	r2,0(r16)
    46f0:	000bdc00 	call	bdc0 <__divsi3>
    46f4:	102d883a 	mov	r22,r2
    46f8:	00800244 	movi	r2,9
    46fc:	15bff416 	blt	r2,r22,46d0 <__alt_data_end+0xff0046d0>
    4700:	9811883a 	mov	r8,r19
    4704:	b0800c04 	addi	r2,r22,48
    4708:	8027883a 	mov	r19,r16
    470c:	997fffc4 	addi	r5,r19,-1
    4710:	98bfffc5 	stb	r2,-1(r19)
    4714:	dc002917 	ldw	r16,164(sp)
    4718:	2f006a2e 	bgeu	r5,fp,48c4 <___vfprintf_internal_r+0x21d0>
    471c:	d9c02384 	addi	r7,sp,142
    4720:	3ccfc83a 	sub	r7,r7,r19
    4724:	d9002344 	addi	r4,sp,141
    4728:	e1cf883a 	add	r7,fp,r7
    472c:	00000106 	br	4734 <___vfprintf_internal_r+0x2040>
    4730:	28800003 	ldbu	r2,0(r5)
    4734:	20800005 	stb	r2,0(r4)
    4738:	21000044 	addi	r4,r4,1
    473c:	29400044 	addi	r5,r5,1
    4740:	393ffb1e 	bne	r7,r4,4730 <__alt_data_end+0xff004730>
    4744:	d8802304 	addi	r2,sp,140
    4748:	14c5c83a 	sub	r2,r2,r19
    474c:	d8c02344 	addi	r3,sp,141
    4750:	1885883a 	add	r2,r3,r2
    4754:	003f7006 	br	4518 <__alt_data_end+0xff004518>
    4758:	0005883a 	mov	r2,zero
    475c:	003f0f06 	br	439c <__alt_data_end+0xff00439c>
    4760:	d8c03217 	ldw	r3,200(sp)
    4764:	18c00044 	addi	r3,r3,1
    4768:	d8c02e15 	stw	r3,184(sp)
    476c:	1805883a 	mov	r2,r3
    4770:	183fb20e 	bge	r3,zero,463c <__alt_data_end+0xff00463c>
    4774:	0005883a 	mov	r2,zero
    4778:	003fb006 	br	463c <__alt_data_end+0xff00463c>
    477c:	d9003617 	ldw	r4,216(sp)
    4780:	000d883a 	mov	r6,zero
    4784:	000f883a 	mov	r7,zero
    4788:	980b883a 	mov	r5,r19
    478c:	d8c03c15 	stw	r3,240(sp)
    4790:	da003d15 	stw	r8,244(sp)
    4794:	000d1080 	call	d108 <__eqdf2>
    4798:	d8c03c17 	ldw	r3,240(sp)
    479c:	da003d17 	ldw	r8,244(sp)
    47a0:	103f9826 	beq	r2,zero,4604 <__alt_data_end+0xff004604>
    47a4:	00800044 	movi	r2,1
    47a8:	10c7c83a 	sub	r3,r2,r3
    47ac:	d8c02615 	stw	r3,152(sp)
    47b0:	003f9506 	br	4608 <__alt_data_end+0xff004608>
    47b4:	d9002917 	ldw	r4,164(sp)
    47b8:	d8c03217 	ldw	r3,200(sp)
    47bc:	20800044 	addi	r2,r4,1
    47c0:	1885883a 	add	r2,r3,r2
    47c4:	d8802e15 	stw	r2,184(sp)
    47c8:	103dbf0e 	bge	r2,zero,3ec8 <__alt_data_end+0xff003ec8>
    47cc:	0005883a 	mov	r2,zero
    47d0:	003dbd06 	br	3ec8 <__alt_data_end+0xff003ec8>
    47d4:	2000211e 	bne	r4,zero,485c <___vfprintf_internal_r+0x2168>
    47d8:	9480004c 	andi	r18,r18,1
    47dc:	90001f1e 	bne	r18,zero,485c <___vfprintf_internal_r+0x2168>
    47e0:	00800044 	movi	r2,1
    47e4:	d8802e15 	stw	r2,184(sp)
    47e8:	003db706 	br	3ec8 <__alt_data_end+0xff003ec8>
    47ec:	00800b44 	movi	r2,45
    47f0:	05adc83a 	sub	r22,zero,r22
    47f4:	d8802305 	stb	r2,140(sp)
    47f8:	003f3f06 	br	44f8 <__alt_data_end+0xff0044f8>
    47fc:	0005883a 	mov	r2,zero
    4800:	003f5206 	br	454c <__alt_data_end+0xff00454c>
    4804:	90a4703a 	and	r18,r18,r2
    4808:	903f4e26 	beq	r18,zero,4544 <__alt_data_end+0xff004544>
    480c:	003f4a06 	br	4538 <__alt_data_end+0xff004538>
    4810:	00800084 	movi	r2,2
    4814:	10c5c83a 	sub	r2,r2,r3
    4818:	003f8406 	br	462c <__alt_data_end+0xff00462c>
    481c:	d8802d17 	ldw	r2,180(sp)
    4820:	d9002d17 	ldw	r4,180(sp)
    4824:	ac400043 	ldbu	r17,1(r21)
    4828:	10800017 	ldw	r2,0(r2)
    482c:	582b883a 	mov	r21,r11
    4830:	d8802915 	stw	r2,164(sp)
    4834:	20800104 	addi	r2,r4,4
    4838:	d9002917 	ldw	r4,164(sp)
    483c:	d8802d15 	stw	r2,180(sp)
    4840:	203e7a0e 	bge	r4,zero,422c <__alt_data_end+0xff00422c>
    4844:	8c403fcc 	andi	r17,r17,255
    4848:	00bfffc4 	movi	r2,-1
    484c:	8c40201c 	xori	r17,r17,128
    4850:	d8802915 	stw	r2,164(sp)
    4854:	8c7fe004 	addi	r17,r17,-128
    4858:	00380706 	br	2878 <__alt_data_end+0xff002878>
    485c:	d8c02917 	ldw	r3,164(sp)
    4860:	18c00084 	addi	r3,r3,2
    4864:	d8c02e15 	stw	r3,184(sp)
    4868:	1805883a 	mov	r2,r3
    486c:	183d960e 	bge	r3,zero,3ec8 <__alt_data_end+0xff003ec8>
    4870:	003fd606 	br	47cc <__alt_data_end+0xff0047cc>
    4874:	0005883a 	mov	r2,zero
    4878:	003f8e06 	br	46b4 <__alt_data_end+0xff0046b4>
    487c:	9080004c 	andi	r2,r18,1
    4880:	103f811e 	bne	r2,zero,4688 <__alt_data_end+0xff004688>
    4884:	d8802117 	ldw	r2,132(sp)
    4888:	1405c83a 	sub	r2,r2,r16
    488c:	d8803315 	stw	r2,204(sp)
    4890:	b47ef326 	beq	r22,r17,4460 <__alt_data_end+0xff004460>
    4894:	dd802617 	ldw	r22,152(sp)
    4898:	003f1106 	br	44e0 <__alt_data_end+0xff0044e0>
    489c:	d9c02785 	stb	r7,158(sp)
    48a0:	00390406 	br	2cb4 <__alt_data_end+0xff002cb4>
    48a4:	d9c02785 	stb	r7,158(sp)
    48a8:	0038d306 	br	2bf8 <__alt_data_end+0xff002bf8>
    48ac:	d9c02785 	stb	r7,158(sp)
    48b0:	003a6106 	br	3238 <__alt_data_end+0xff003238>
    48b4:	d9c02785 	stb	r7,158(sp)
    48b8:	003af806 	br	349c <__alt_data_end+0xff00349c>
    48bc:	0005883a 	mov	r2,zero
    48c0:	003d7e06 	br	3ebc <__alt_data_end+0xff003ebc>
    48c4:	d8802344 	addi	r2,sp,141
    48c8:	003f1306 	br	4518 <__alt_data_end+0xff004518>
    48cc:	d9c02785 	stb	r7,158(sp)
    48d0:	00392306 	br	2d60 <__alt_data_end+0xff002d60>
    48d4:	d9c02785 	stb	r7,158(sp)
    48d8:	003aa906 	br	3380 <__alt_data_end+0xff003380>
    48dc:	d9c02785 	stb	r7,158(sp)
    48e0:	003a3d06 	br	31d8 <__alt_data_end+0xff0031d8>
    48e4:	d9c02785 	stb	r7,158(sp)
    48e8:	003aca06 	br	3414 <__alt_data_end+0xff003414>

000048ec <__vfprintf_internal>:
    48ec:	00800074 	movhi	r2,1
    48f0:	1088f404 	addi	r2,r2,9168
    48f4:	300f883a 	mov	r7,r6
    48f8:	280d883a 	mov	r6,r5
    48fc:	200b883a 	mov	r5,r4
    4900:	11000017 	ldw	r4,0(r2)
    4904:	00026f41 	jmpi	26f4 <___vfprintf_internal_r>

00004908 <__sbprintf>:
    4908:	2880030b 	ldhu	r2,12(r5)
    490c:	2ac01917 	ldw	r11,100(r5)
    4910:	2a80038b 	ldhu	r10,14(r5)
    4914:	2a400717 	ldw	r9,28(r5)
    4918:	2a000917 	ldw	r8,36(r5)
    491c:	defee204 	addi	sp,sp,-1144
    4920:	00c10004 	movi	r3,1024
    4924:	dc011a15 	stw	r16,1128(sp)
    4928:	10bfff4c 	andi	r2,r2,65533
    492c:	2821883a 	mov	r16,r5
    4930:	d8cb883a 	add	r5,sp,r3
    4934:	dc811c15 	stw	r18,1136(sp)
    4938:	dc411b15 	stw	r17,1132(sp)
    493c:	dfc11d15 	stw	ra,1140(sp)
    4940:	2025883a 	mov	r18,r4
    4944:	d881030d 	sth	r2,1036(sp)
    4948:	dac11915 	stw	r11,1124(sp)
    494c:	da81038d 	sth	r10,1038(sp)
    4950:	da410715 	stw	r9,1052(sp)
    4954:	da010915 	stw	r8,1060(sp)
    4958:	dec10015 	stw	sp,1024(sp)
    495c:	dec10415 	stw	sp,1040(sp)
    4960:	d8c10215 	stw	r3,1032(sp)
    4964:	d8c10515 	stw	r3,1044(sp)
    4968:	d8010615 	stw	zero,1048(sp)
    496c:	00026f40 	call	26f4 <___vfprintf_internal_r>
    4970:	1023883a 	mov	r17,r2
    4974:	10000416 	blt	r2,zero,4988 <__sbprintf+0x80>
    4978:	d9410004 	addi	r5,sp,1024
    497c:	9009883a 	mov	r4,r18
    4980:	00065bc0 	call	65bc <_fflush_r>
    4984:	10000d1e 	bne	r2,zero,49bc <__sbprintf+0xb4>
    4988:	d881030b 	ldhu	r2,1036(sp)
    498c:	1080100c 	andi	r2,r2,64
    4990:	10000326 	beq	r2,zero,49a0 <__sbprintf+0x98>
    4994:	8080030b 	ldhu	r2,12(r16)
    4998:	10801014 	ori	r2,r2,64
    499c:	8080030d 	sth	r2,12(r16)
    49a0:	8805883a 	mov	r2,r17
    49a4:	dfc11d17 	ldw	ra,1140(sp)
    49a8:	dc811c17 	ldw	r18,1136(sp)
    49ac:	dc411b17 	ldw	r17,1132(sp)
    49b0:	dc011a17 	ldw	r16,1128(sp)
    49b4:	dec11e04 	addi	sp,sp,1144
    49b8:	f800283a 	ret
    49bc:	047fffc4 	movi	r17,-1
    49c0:	003ff106 	br	4988 <__alt_data_end+0xff004988>

000049c4 <__swsetup_r>:
    49c4:	00800074 	movhi	r2,1
    49c8:	defffd04 	addi	sp,sp,-12
    49cc:	1088f404 	addi	r2,r2,9168
    49d0:	dc400115 	stw	r17,4(sp)
    49d4:	2023883a 	mov	r17,r4
    49d8:	11000017 	ldw	r4,0(r2)
    49dc:	dc000015 	stw	r16,0(sp)
    49e0:	dfc00215 	stw	ra,8(sp)
    49e4:	2821883a 	mov	r16,r5
    49e8:	20000226 	beq	r4,zero,49f4 <__swsetup_r+0x30>
    49ec:	20800e17 	ldw	r2,56(r4)
    49f0:	10003126 	beq	r2,zero,4ab8 <__swsetup_r+0xf4>
    49f4:	8080030b 	ldhu	r2,12(r16)
    49f8:	10c0020c 	andi	r3,r2,8
    49fc:	1009883a 	mov	r4,r2
    4a00:	18000f26 	beq	r3,zero,4a40 <__swsetup_r+0x7c>
    4a04:	80c00417 	ldw	r3,16(r16)
    4a08:	18001526 	beq	r3,zero,4a60 <__swsetup_r+0x9c>
    4a0c:	1100004c 	andi	r4,r2,1
    4a10:	20001c1e 	bne	r4,zero,4a84 <__swsetup_r+0xc0>
    4a14:	1080008c 	andi	r2,r2,2
    4a18:	1000291e 	bne	r2,zero,4ac0 <__swsetup_r+0xfc>
    4a1c:	80800517 	ldw	r2,20(r16)
    4a20:	80800215 	stw	r2,8(r16)
    4a24:	18001c26 	beq	r3,zero,4a98 <__swsetup_r+0xd4>
    4a28:	0005883a 	mov	r2,zero
    4a2c:	dfc00217 	ldw	ra,8(sp)
    4a30:	dc400117 	ldw	r17,4(sp)
    4a34:	dc000017 	ldw	r16,0(sp)
    4a38:	dec00304 	addi	sp,sp,12
    4a3c:	f800283a 	ret
    4a40:	2080040c 	andi	r2,r4,16
    4a44:	10002e26 	beq	r2,zero,4b00 <__swsetup_r+0x13c>
    4a48:	2080010c 	andi	r2,r4,4
    4a4c:	10001e1e 	bne	r2,zero,4ac8 <__swsetup_r+0x104>
    4a50:	80c00417 	ldw	r3,16(r16)
    4a54:	20800214 	ori	r2,r4,8
    4a58:	8080030d 	sth	r2,12(r16)
    4a5c:	183feb1e 	bne	r3,zero,4a0c <__alt_data_end+0xff004a0c>
    4a60:	1100a00c 	andi	r4,r2,640
    4a64:	01408004 	movi	r5,512
    4a68:	217fe826 	beq	r4,r5,4a0c <__alt_data_end+0xff004a0c>
    4a6c:	800b883a 	mov	r5,r16
    4a70:	8809883a 	mov	r4,r17
    4a74:	000753c0 	call	753c <__smakebuf_r>
    4a78:	8080030b 	ldhu	r2,12(r16)
    4a7c:	80c00417 	ldw	r3,16(r16)
    4a80:	003fe206 	br	4a0c <__alt_data_end+0xff004a0c>
    4a84:	80800517 	ldw	r2,20(r16)
    4a88:	80000215 	stw	zero,8(r16)
    4a8c:	0085c83a 	sub	r2,zero,r2
    4a90:	80800615 	stw	r2,24(r16)
    4a94:	183fe41e 	bne	r3,zero,4a28 <__alt_data_end+0xff004a28>
    4a98:	80c0030b 	ldhu	r3,12(r16)
    4a9c:	0005883a 	mov	r2,zero
    4aa0:	1900200c 	andi	r4,r3,128
    4aa4:	203fe126 	beq	r4,zero,4a2c <__alt_data_end+0xff004a2c>
    4aa8:	18c01014 	ori	r3,r3,64
    4aac:	80c0030d 	sth	r3,12(r16)
    4ab0:	00bfffc4 	movi	r2,-1
    4ab4:	003fdd06 	br	4a2c <__alt_data_end+0xff004a2c>
    4ab8:	00069980 	call	6998 <__sinit>
    4abc:	003fcd06 	br	49f4 <__alt_data_end+0xff0049f4>
    4ac0:	0005883a 	mov	r2,zero
    4ac4:	003fd606 	br	4a20 <__alt_data_end+0xff004a20>
    4ac8:	81400c17 	ldw	r5,48(r16)
    4acc:	28000626 	beq	r5,zero,4ae8 <__swsetup_r+0x124>
    4ad0:	80801004 	addi	r2,r16,64
    4ad4:	28800326 	beq	r5,r2,4ae4 <__swsetup_r+0x120>
    4ad8:	8809883a 	mov	r4,r17
    4adc:	0006b0c0 	call	6b0c <_free_r>
    4ae0:	8100030b 	ldhu	r4,12(r16)
    4ae4:	80000c15 	stw	zero,48(r16)
    4ae8:	80c00417 	ldw	r3,16(r16)
    4aec:	00bff6c4 	movi	r2,-37
    4af0:	1108703a 	and	r4,r2,r4
    4af4:	80000115 	stw	zero,4(r16)
    4af8:	80c00015 	stw	r3,0(r16)
    4afc:	003fd506 	br	4a54 <__alt_data_end+0xff004a54>
    4b00:	00800244 	movi	r2,9
    4b04:	88800015 	stw	r2,0(r17)
    4b08:	20801014 	ori	r2,r4,64
    4b0c:	8080030d 	sth	r2,12(r16)
    4b10:	00bfffc4 	movi	r2,-1
    4b14:	003fc506 	br	4a2c <__alt_data_end+0xff004a2c>

00004b18 <quorem>:
    4b18:	defff704 	addi	sp,sp,-36
    4b1c:	dc800215 	stw	r18,8(sp)
    4b20:	20800417 	ldw	r2,16(r4)
    4b24:	2c800417 	ldw	r18,16(r5)
    4b28:	dfc00815 	stw	ra,32(sp)
    4b2c:	ddc00715 	stw	r23,28(sp)
    4b30:	dd800615 	stw	r22,24(sp)
    4b34:	dd400515 	stw	r21,20(sp)
    4b38:	dd000415 	stw	r20,16(sp)
    4b3c:	dcc00315 	stw	r19,12(sp)
    4b40:	dc400115 	stw	r17,4(sp)
    4b44:	dc000015 	stw	r16,0(sp)
    4b48:	14807116 	blt	r2,r18,4d10 <quorem+0x1f8>
    4b4c:	94bfffc4 	addi	r18,r18,-1
    4b50:	94ad883a 	add	r22,r18,r18
    4b54:	b5ad883a 	add	r22,r22,r22
    4b58:	2c400504 	addi	r17,r5,20
    4b5c:	8da9883a 	add	r20,r17,r22
    4b60:	25400504 	addi	r21,r4,20
    4b64:	282f883a 	mov	r23,r5
    4b68:	adad883a 	add	r22,r21,r22
    4b6c:	a1400017 	ldw	r5,0(r20)
    4b70:	2021883a 	mov	r16,r4
    4b74:	b1000017 	ldw	r4,0(r22)
    4b78:	29400044 	addi	r5,r5,1
    4b7c:	000beb80 	call	beb8 <__udivsi3>
    4b80:	1027883a 	mov	r19,r2
    4b84:	10002c26 	beq	r2,zero,4c38 <quorem+0x120>
    4b88:	a813883a 	mov	r9,r21
    4b8c:	880b883a 	mov	r5,r17
    4b90:	0009883a 	mov	r4,zero
    4b94:	000d883a 	mov	r6,zero
    4b98:	2a000017 	ldw	r8,0(r5)
    4b9c:	49c00017 	ldw	r7,0(r9)
    4ba0:	29400104 	addi	r5,r5,4
    4ba4:	40bfffcc 	andi	r2,r8,65535
    4ba8:	14c5383a 	mul	r2,r2,r19
    4bac:	4010d43a 	srli	r8,r8,16
    4bb0:	38ffffcc 	andi	r3,r7,65535
    4bb4:	1105883a 	add	r2,r2,r4
    4bb8:	1008d43a 	srli	r4,r2,16
    4bbc:	44d1383a 	mul	r8,r8,r19
    4bc0:	198d883a 	add	r6,r3,r6
    4bc4:	10ffffcc 	andi	r3,r2,65535
    4bc8:	30c7c83a 	sub	r3,r6,r3
    4bcc:	380ed43a 	srli	r7,r7,16
    4bd0:	4105883a 	add	r2,r8,r4
    4bd4:	180dd43a 	srai	r6,r3,16
    4bd8:	113fffcc 	andi	r4,r2,65535
    4bdc:	390fc83a 	sub	r7,r7,r4
    4be0:	398d883a 	add	r6,r7,r6
    4be4:	300e943a 	slli	r7,r6,16
    4be8:	18ffffcc 	andi	r3,r3,65535
    4bec:	1008d43a 	srli	r4,r2,16
    4bf0:	38ceb03a 	or	r7,r7,r3
    4bf4:	49c00015 	stw	r7,0(r9)
    4bf8:	300dd43a 	srai	r6,r6,16
    4bfc:	4a400104 	addi	r9,r9,4
    4c00:	a17fe52e 	bgeu	r20,r5,4b98 <__alt_data_end+0xff004b98>
    4c04:	b0800017 	ldw	r2,0(r22)
    4c08:	10000b1e 	bne	r2,zero,4c38 <quorem+0x120>
    4c0c:	b0bfff04 	addi	r2,r22,-4
    4c10:	a880082e 	bgeu	r21,r2,4c34 <quorem+0x11c>
    4c14:	b0ffff17 	ldw	r3,-4(r22)
    4c18:	18000326 	beq	r3,zero,4c28 <quorem+0x110>
    4c1c:	00000506 	br	4c34 <quorem+0x11c>
    4c20:	10c00017 	ldw	r3,0(r2)
    4c24:	1800031e 	bne	r3,zero,4c34 <quorem+0x11c>
    4c28:	10bfff04 	addi	r2,r2,-4
    4c2c:	94bfffc4 	addi	r18,r18,-1
    4c30:	a8bffb36 	bltu	r21,r2,4c20 <__alt_data_end+0xff004c20>
    4c34:	84800415 	stw	r18,16(r16)
    4c38:	b80b883a 	mov	r5,r23
    4c3c:	8009883a 	mov	r4,r16
    4c40:	00084700 	call	8470 <__mcmp>
    4c44:	10002616 	blt	r2,zero,4ce0 <quorem+0x1c8>
    4c48:	9cc00044 	addi	r19,r19,1
    4c4c:	a805883a 	mov	r2,r21
    4c50:	000b883a 	mov	r5,zero
    4c54:	11000017 	ldw	r4,0(r2)
    4c58:	89800017 	ldw	r6,0(r17)
    4c5c:	10800104 	addi	r2,r2,4
    4c60:	20ffffcc 	andi	r3,r4,65535
    4c64:	194b883a 	add	r5,r3,r5
    4c68:	30ffffcc 	andi	r3,r6,65535
    4c6c:	28c7c83a 	sub	r3,r5,r3
    4c70:	300cd43a 	srli	r6,r6,16
    4c74:	2008d43a 	srli	r4,r4,16
    4c78:	180bd43a 	srai	r5,r3,16
    4c7c:	18ffffcc 	andi	r3,r3,65535
    4c80:	2189c83a 	sub	r4,r4,r6
    4c84:	2149883a 	add	r4,r4,r5
    4c88:	200c943a 	slli	r6,r4,16
    4c8c:	8c400104 	addi	r17,r17,4
    4c90:	200bd43a 	srai	r5,r4,16
    4c94:	30c6b03a 	or	r3,r6,r3
    4c98:	10ffff15 	stw	r3,-4(r2)
    4c9c:	a47fed2e 	bgeu	r20,r17,4c54 <__alt_data_end+0xff004c54>
    4ca0:	9485883a 	add	r2,r18,r18
    4ca4:	1085883a 	add	r2,r2,r2
    4ca8:	a887883a 	add	r3,r21,r2
    4cac:	18800017 	ldw	r2,0(r3)
    4cb0:	10000b1e 	bne	r2,zero,4ce0 <quorem+0x1c8>
    4cb4:	18bfff04 	addi	r2,r3,-4
    4cb8:	a880082e 	bgeu	r21,r2,4cdc <quorem+0x1c4>
    4cbc:	18ffff17 	ldw	r3,-4(r3)
    4cc0:	18000326 	beq	r3,zero,4cd0 <quorem+0x1b8>
    4cc4:	00000506 	br	4cdc <quorem+0x1c4>
    4cc8:	10c00017 	ldw	r3,0(r2)
    4ccc:	1800031e 	bne	r3,zero,4cdc <quorem+0x1c4>
    4cd0:	10bfff04 	addi	r2,r2,-4
    4cd4:	94bfffc4 	addi	r18,r18,-1
    4cd8:	a8bffb36 	bltu	r21,r2,4cc8 <__alt_data_end+0xff004cc8>
    4cdc:	84800415 	stw	r18,16(r16)
    4ce0:	9805883a 	mov	r2,r19
    4ce4:	dfc00817 	ldw	ra,32(sp)
    4ce8:	ddc00717 	ldw	r23,28(sp)
    4cec:	dd800617 	ldw	r22,24(sp)
    4cf0:	dd400517 	ldw	r21,20(sp)
    4cf4:	dd000417 	ldw	r20,16(sp)
    4cf8:	dcc00317 	ldw	r19,12(sp)
    4cfc:	dc800217 	ldw	r18,8(sp)
    4d00:	dc400117 	ldw	r17,4(sp)
    4d04:	dc000017 	ldw	r16,0(sp)
    4d08:	dec00904 	addi	sp,sp,36
    4d0c:	f800283a 	ret
    4d10:	0005883a 	mov	r2,zero
    4d14:	003ff306 	br	4ce4 <__alt_data_end+0xff004ce4>

00004d18 <_dtoa_r>:
    4d18:	20801017 	ldw	r2,64(r4)
    4d1c:	deffde04 	addi	sp,sp,-136
    4d20:	df002015 	stw	fp,128(sp)
    4d24:	dcc01b15 	stw	r19,108(sp)
    4d28:	dc801a15 	stw	r18,104(sp)
    4d2c:	dc401915 	stw	r17,100(sp)
    4d30:	dc001815 	stw	r16,96(sp)
    4d34:	dfc02115 	stw	ra,132(sp)
    4d38:	ddc01f15 	stw	r23,124(sp)
    4d3c:	dd801e15 	stw	r22,120(sp)
    4d40:	dd401d15 	stw	r21,116(sp)
    4d44:	dd001c15 	stw	r20,112(sp)
    4d48:	d9c00315 	stw	r7,12(sp)
    4d4c:	2039883a 	mov	fp,r4
    4d50:	3023883a 	mov	r17,r6
    4d54:	2825883a 	mov	r18,r5
    4d58:	dc002417 	ldw	r16,144(sp)
    4d5c:	3027883a 	mov	r19,r6
    4d60:	10000826 	beq	r2,zero,4d84 <_dtoa_r+0x6c>
    4d64:	21801117 	ldw	r6,68(r4)
    4d68:	00c00044 	movi	r3,1
    4d6c:	100b883a 	mov	r5,r2
    4d70:	1986983a 	sll	r3,r3,r6
    4d74:	11800115 	stw	r6,4(r2)
    4d78:	10c00215 	stw	r3,8(r2)
    4d7c:	0007c500 	call	7c50 <_Bfree>
    4d80:	e0001015 	stw	zero,64(fp)
    4d84:	88002e16 	blt	r17,zero,4e40 <_dtoa_r+0x128>
    4d88:	80000015 	stw	zero,0(r16)
    4d8c:	889ffc2c 	andhi	r2,r17,32752
    4d90:	00dffc34 	movhi	r3,32752
    4d94:	10c01c26 	beq	r2,r3,4e08 <_dtoa_r+0xf0>
    4d98:	000d883a 	mov	r6,zero
    4d9c:	000f883a 	mov	r7,zero
    4da0:	9009883a 	mov	r4,r18
    4da4:	980b883a 	mov	r5,r19
    4da8:	000d1080 	call	d108 <__eqdf2>
    4dac:	10002b1e 	bne	r2,zero,4e5c <_dtoa_r+0x144>
    4db0:	d9c02317 	ldw	r7,140(sp)
    4db4:	00800044 	movi	r2,1
    4db8:	38800015 	stw	r2,0(r7)
    4dbc:	d8802517 	ldw	r2,148(sp)
    4dc0:	10019e26 	beq	r2,zero,543c <_dtoa_r+0x724>
    4dc4:	d8c02517 	ldw	r3,148(sp)
    4dc8:	00800074 	movhi	r2,1
    4dcc:	10819b44 	addi	r2,r2,1645
    4dd0:	18800015 	stw	r2,0(r3)
    4dd4:	10bfffc4 	addi	r2,r2,-1
    4dd8:	dfc02117 	ldw	ra,132(sp)
    4ddc:	df002017 	ldw	fp,128(sp)
    4de0:	ddc01f17 	ldw	r23,124(sp)
    4de4:	dd801e17 	ldw	r22,120(sp)
    4de8:	dd401d17 	ldw	r21,116(sp)
    4dec:	dd001c17 	ldw	r20,112(sp)
    4df0:	dcc01b17 	ldw	r19,108(sp)
    4df4:	dc801a17 	ldw	r18,104(sp)
    4df8:	dc401917 	ldw	r17,100(sp)
    4dfc:	dc001817 	ldw	r16,96(sp)
    4e00:	dec02204 	addi	sp,sp,136
    4e04:	f800283a 	ret
    4e08:	d8c02317 	ldw	r3,140(sp)
    4e0c:	0089c3c4 	movi	r2,9999
    4e10:	18800015 	stw	r2,0(r3)
    4e14:	90017726 	beq	r18,zero,53f4 <_dtoa_r+0x6dc>
    4e18:	00800074 	movhi	r2,1
    4e1c:	1081a704 	addi	r2,r2,1692
    4e20:	d9002517 	ldw	r4,148(sp)
    4e24:	203fec26 	beq	r4,zero,4dd8 <__alt_data_end+0xff004dd8>
    4e28:	10c000c7 	ldb	r3,3(r2)
    4e2c:	1801781e 	bne	r3,zero,5410 <_dtoa_r+0x6f8>
    4e30:	10c000c4 	addi	r3,r2,3
    4e34:	d9802517 	ldw	r6,148(sp)
    4e38:	30c00015 	stw	r3,0(r6)
    4e3c:	003fe606 	br	4dd8 <__alt_data_end+0xff004dd8>
    4e40:	04e00034 	movhi	r19,32768
    4e44:	9cffffc4 	addi	r19,r19,-1
    4e48:	00800044 	movi	r2,1
    4e4c:	8ce6703a 	and	r19,r17,r19
    4e50:	80800015 	stw	r2,0(r16)
    4e54:	9823883a 	mov	r17,r19
    4e58:	003fcc06 	br	4d8c <__alt_data_end+0xff004d8c>
    4e5c:	d8800204 	addi	r2,sp,8
    4e60:	d8800015 	stw	r2,0(sp)
    4e64:	d9c00104 	addi	r7,sp,4
    4e68:	900b883a 	mov	r5,r18
    4e6c:	980d883a 	mov	r6,r19
    4e70:	e009883a 	mov	r4,fp
    4e74:	8820d53a 	srli	r16,r17,20
    4e78:	000883c0 	call	883c <__d2b>
    4e7c:	d8800915 	stw	r2,36(sp)
    4e80:	8001651e 	bne	r16,zero,5418 <_dtoa_r+0x700>
    4e84:	dd800217 	ldw	r22,8(sp)
    4e88:	dc000117 	ldw	r16,4(sp)
    4e8c:	00800804 	movi	r2,32
    4e90:	b421883a 	add	r16,r22,r16
    4e94:	80c10c84 	addi	r3,r16,1074
    4e98:	10c2d10e 	bge	r2,r3,59e0 <_dtoa_r+0xcc8>
    4e9c:	00801004 	movi	r2,64
    4ea0:	81010484 	addi	r4,r16,1042
    4ea4:	10c7c83a 	sub	r3,r2,r3
    4ea8:	9108d83a 	srl	r4,r18,r4
    4eac:	88e2983a 	sll	r17,r17,r3
    4eb0:	2448b03a 	or	r4,r4,r17
    4eb4:	000e4d00 	call	e4d0 <__floatunsidf>
    4eb8:	017f8434 	movhi	r5,65040
    4ebc:	01800044 	movi	r6,1
    4ec0:	1009883a 	mov	r4,r2
    4ec4:	194b883a 	add	r5,r3,r5
    4ec8:	843fffc4 	addi	r16,r16,-1
    4ecc:	d9801115 	stw	r6,68(sp)
    4ed0:	000d883a 	mov	r6,zero
    4ed4:	01cffe34 	movhi	r7,16376
    4ed8:	000da780 	call	da78 <__subdf3>
    4edc:	0198dbf4 	movhi	r6,25455
    4ee0:	01cff4f4 	movhi	r7,16339
    4ee4:	3190d844 	addi	r6,r6,17249
    4ee8:	39e1e9c4 	addi	r7,r7,-30809
    4eec:	1009883a 	mov	r4,r2
    4ef0:	180b883a 	mov	r5,r3
    4ef4:	000d3600 	call	d360 <__muldf3>
    4ef8:	01a2d874 	movhi	r6,35681
    4efc:	01cff1f4 	movhi	r7,16327
    4f00:	31b22cc4 	addi	r6,r6,-14157
    4f04:	39e28a04 	addi	r7,r7,-30168
    4f08:	180b883a 	mov	r5,r3
    4f0c:	1009883a 	mov	r4,r2
    4f10:	000bf740 	call	bf74 <__adddf3>
    4f14:	8009883a 	mov	r4,r16
    4f18:	1029883a 	mov	r20,r2
    4f1c:	1823883a 	mov	r17,r3
    4f20:	000e3f40 	call	e3f4 <__floatsidf>
    4f24:	019427f4 	movhi	r6,20639
    4f28:	01cff4f4 	movhi	r7,16339
    4f2c:	319e7ec4 	addi	r6,r6,31227
    4f30:	39d104c4 	addi	r7,r7,17427
    4f34:	1009883a 	mov	r4,r2
    4f38:	180b883a 	mov	r5,r3
    4f3c:	000d3600 	call	d360 <__muldf3>
    4f40:	100d883a 	mov	r6,r2
    4f44:	180f883a 	mov	r7,r3
    4f48:	a009883a 	mov	r4,r20
    4f4c:	880b883a 	mov	r5,r17
    4f50:	000bf740 	call	bf74 <__adddf3>
    4f54:	1009883a 	mov	r4,r2
    4f58:	180b883a 	mov	r5,r3
    4f5c:	1029883a 	mov	r20,r2
    4f60:	1823883a 	mov	r17,r3
    4f64:	000e3740 	call	e374 <__fixdfsi>
    4f68:	000d883a 	mov	r6,zero
    4f6c:	000f883a 	mov	r7,zero
    4f70:	a009883a 	mov	r4,r20
    4f74:	880b883a 	mov	r5,r17
    4f78:	d8800515 	stw	r2,20(sp)
    4f7c:	000d26c0 	call	d26c <__ledf2>
    4f80:	10028716 	blt	r2,zero,59a0 <_dtoa_r+0xc88>
    4f84:	d8c00517 	ldw	r3,20(sp)
    4f88:	00800584 	movi	r2,22
    4f8c:	10c27536 	bltu	r2,r3,5964 <_dtoa_r+0xc4c>
    4f90:	180490fa 	slli	r2,r3,3
    4f94:	00c00074 	movhi	r3,1
    4f98:	18c1c304 	addi	r3,r3,1804
    4f9c:	1885883a 	add	r2,r3,r2
    4fa0:	11000017 	ldw	r4,0(r2)
    4fa4:	11400117 	ldw	r5,4(r2)
    4fa8:	900d883a 	mov	r6,r18
    4fac:	980f883a 	mov	r7,r19
    4fb0:	000d1900 	call	d190 <__gedf2>
    4fb4:	00828d0e 	bge	zero,r2,59ec <_dtoa_r+0xcd4>
    4fb8:	d9000517 	ldw	r4,20(sp)
    4fbc:	d8000e15 	stw	zero,56(sp)
    4fc0:	213fffc4 	addi	r4,r4,-1
    4fc4:	d9000515 	stw	r4,20(sp)
    4fc8:	b42dc83a 	sub	r22,r22,r16
    4fcc:	b5bfffc4 	addi	r22,r22,-1
    4fd0:	b0026f16 	blt	r22,zero,5990 <_dtoa_r+0xc78>
    4fd4:	d8000815 	stw	zero,32(sp)
    4fd8:	d9c00517 	ldw	r7,20(sp)
    4fdc:	38026416 	blt	r7,zero,5970 <_dtoa_r+0xc58>
    4fe0:	b1ed883a 	add	r22,r22,r7
    4fe4:	d9c00d15 	stw	r7,52(sp)
    4fe8:	d8000a15 	stw	zero,40(sp)
    4fec:	d9800317 	ldw	r6,12(sp)
    4ff0:	00800244 	movi	r2,9
    4ff4:	11811436 	bltu	r2,r6,5448 <_dtoa_r+0x730>
    4ff8:	00800144 	movi	r2,5
    4ffc:	1184e10e 	bge	r2,r6,6384 <_dtoa_r+0x166c>
    5000:	31bfff04 	addi	r6,r6,-4
    5004:	d9800315 	stw	r6,12(sp)
    5008:	0023883a 	mov	r17,zero
    500c:	d9800317 	ldw	r6,12(sp)
    5010:	008000c4 	movi	r2,3
    5014:	30836726 	beq	r6,r2,5db4 <_dtoa_r+0x109c>
    5018:	1183410e 	bge	r2,r6,5d20 <_dtoa_r+0x1008>
    501c:	d9c00317 	ldw	r7,12(sp)
    5020:	00800104 	movi	r2,4
    5024:	38827c26 	beq	r7,r2,5a18 <_dtoa_r+0xd00>
    5028:	00800144 	movi	r2,5
    502c:	3884c41e 	bne	r7,r2,6340 <_dtoa_r+0x1628>
    5030:	00800044 	movi	r2,1
    5034:	d8800b15 	stw	r2,44(sp)
    5038:	d8c00517 	ldw	r3,20(sp)
    503c:	d9002217 	ldw	r4,136(sp)
    5040:	1907883a 	add	r3,r3,r4
    5044:	19800044 	addi	r6,r3,1
    5048:	d8c00c15 	stw	r3,48(sp)
    504c:	d9800615 	stw	r6,24(sp)
    5050:	0183a40e 	bge	zero,r6,5ee4 <_dtoa_r+0x11cc>
    5054:	d9800617 	ldw	r6,24(sp)
    5058:	3021883a 	mov	r16,r6
    505c:	e0001115 	stw	zero,68(fp)
    5060:	008005c4 	movi	r2,23
    5064:	1184c92e 	bgeu	r2,r6,638c <_dtoa_r+0x1674>
    5068:	00c00044 	movi	r3,1
    506c:	00800104 	movi	r2,4
    5070:	1085883a 	add	r2,r2,r2
    5074:	11000504 	addi	r4,r2,20
    5078:	180b883a 	mov	r5,r3
    507c:	18c00044 	addi	r3,r3,1
    5080:	313ffb2e 	bgeu	r6,r4,5070 <__alt_data_end+0xff005070>
    5084:	e1401115 	stw	r5,68(fp)
    5088:	e009883a 	mov	r4,fp
    508c:	0007ba80 	call	7ba8 <_Balloc>
    5090:	d8800715 	stw	r2,28(sp)
    5094:	e0801015 	stw	r2,64(fp)
    5098:	00800384 	movi	r2,14
    509c:	1400f736 	bltu	r2,r16,547c <_dtoa_r+0x764>
    50a0:	8800f626 	beq	r17,zero,547c <_dtoa_r+0x764>
    50a4:	d9c00517 	ldw	r7,20(sp)
    50a8:	01c39a0e 	bge	zero,r7,5f14 <_dtoa_r+0x11fc>
    50ac:	388003cc 	andi	r2,r7,15
    50b0:	100490fa 	slli	r2,r2,3
    50b4:	382bd13a 	srai	r21,r7,4
    50b8:	00c00074 	movhi	r3,1
    50bc:	18c1c304 	addi	r3,r3,1804
    50c0:	1885883a 	add	r2,r3,r2
    50c4:	a8c0040c 	andi	r3,r21,16
    50c8:	12400017 	ldw	r9,0(r2)
    50cc:	12000117 	ldw	r8,4(r2)
    50d0:	18037926 	beq	r3,zero,5eb8 <_dtoa_r+0x11a0>
    50d4:	00800074 	movhi	r2,1
    50d8:	1081b904 	addi	r2,r2,1764
    50dc:	11800817 	ldw	r6,32(r2)
    50e0:	11c00917 	ldw	r7,36(r2)
    50e4:	9009883a 	mov	r4,r18
    50e8:	980b883a 	mov	r5,r19
    50ec:	da001715 	stw	r8,92(sp)
    50f0:	da401615 	stw	r9,88(sp)
    50f4:	000c8200 	call	c820 <__divdf3>
    50f8:	da001717 	ldw	r8,92(sp)
    50fc:	da401617 	ldw	r9,88(sp)
    5100:	ad4003cc 	andi	r21,r21,15
    5104:	040000c4 	movi	r16,3
    5108:	1023883a 	mov	r17,r2
    510c:	1829883a 	mov	r20,r3
    5110:	a8001126 	beq	r21,zero,5158 <_dtoa_r+0x440>
    5114:	05c00074 	movhi	r23,1
    5118:	bdc1b904 	addi	r23,r23,1764
    511c:	4805883a 	mov	r2,r9
    5120:	4007883a 	mov	r3,r8
    5124:	a980004c 	andi	r6,r21,1
    5128:	1009883a 	mov	r4,r2
    512c:	a82bd07a 	srai	r21,r21,1
    5130:	180b883a 	mov	r5,r3
    5134:	30000426 	beq	r6,zero,5148 <_dtoa_r+0x430>
    5138:	b9800017 	ldw	r6,0(r23)
    513c:	b9c00117 	ldw	r7,4(r23)
    5140:	84000044 	addi	r16,r16,1
    5144:	000d3600 	call	d360 <__muldf3>
    5148:	bdc00204 	addi	r23,r23,8
    514c:	a83ff51e 	bne	r21,zero,5124 <__alt_data_end+0xff005124>
    5150:	1013883a 	mov	r9,r2
    5154:	1811883a 	mov	r8,r3
    5158:	480d883a 	mov	r6,r9
    515c:	400f883a 	mov	r7,r8
    5160:	8809883a 	mov	r4,r17
    5164:	a00b883a 	mov	r5,r20
    5168:	000c8200 	call	c820 <__divdf3>
    516c:	d8800f15 	stw	r2,60(sp)
    5170:	d8c01015 	stw	r3,64(sp)
    5174:	d8c00e17 	ldw	r3,56(sp)
    5178:	18000626 	beq	r3,zero,5194 <_dtoa_r+0x47c>
    517c:	d9000f17 	ldw	r4,60(sp)
    5180:	d9401017 	ldw	r5,64(sp)
    5184:	000d883a 	mov	r6,zero
    5188:	01cffc34 	movhi	r7,16368
    518c:	000d26c0 	call	d26c <__ledf2>
    5190:	10040b16 	blt	r2,zero,61c0 <_dtoa_r+0x14a8>
    5194:	8009883a 	mov	r4,r16
    5198:	000e3f40 	call	e3f4 <__floatsidf>
    519c:	d9800f17 	ldw	r6,60(sp)
    51a0:	d9c01017 	ldw	r7,64(sp)
    51a4:	1009883a 	mov	r4,r2
    51a8:	180b883a 	mov	r5,r3
    51ac:	000d3600 	call	d360 <__muldf3>
    51b0:	000d883a 	mov	r6,zero
    51b4:	01d00734 	movhi	r7,16412
    51b8:	1009883a 	mov	r4,r2
    51bc:	180b883a 	mov	r5,r3
    51c0:	000bf740 	call	bf74 <__adddf3>
    51c4:	1021883a 	mov	r16,r2
    51c8:	d8800617 	ldw	r2,24(sp)
    51cc:	047f3034 	movhi	r17,64704
    51d0:	1c63883a 	add	r17,r3,r17
    51d4:	10031826 	beq	r2,zero,5e38 <_dtoa_r+0x1120>
    51d8:	d8c00517 	ldw	r3,20(sp)
    51dc:	db000617 	ldw	r12,24(sp)
    51e0:	d8c01315 	stw	r3,76(sp)
    51e4:	d9000b17 	ldw	r4,44(sp)
    51e8:	20038f26 	beq	r4,zero,6028 <_dtoa_r+0x1310>
    51ec:	60bfffc4 	addi	r2,r12,-1
    51f0:	100490fa 	slli	r2,r2,3
    51f4:	00c00074 	movhi	r3,1
    51f8:	18c1c304 	addi	r3,r3,1804
    51fc:	1885883a 	add	r2,r3,r2
    5200:	11800017 	ldw	r6,0(r2)
    5204:	11c00117 	ldw	r7,4(r2)
    5208:	d8800717 	ldw	r2,28(sp)
    520c:	0009883a 	mov	r4,zero
    5210:	014ff834 	movhi	r5,16352
    5214:	db001615 	stw	r12,88(sp)
    5218:	15c00044 	addi	r23,r2,1
    521c:	000c8200 	call	c820 <__divdf3>
    5220:	800d883a 	mov	r6,r16
    5224:	880f883a 	mov	r7,r17
    5228:	1009883a 	mov	r4,r2
    522c:	180b883a 	mov	r5,r3
    5230:	000da780 	call	da78 <__subdf3>
    5234:	d9401017 	ldw	r5,64(sp)
    5238:	d9000f17 	ldw	r4,60(sp)
    523c:	102b883a 	mov	r21,r2
    5240:	d8c01215 	stw	r3,72(sp)
    5244:	000e3740 	call	e374 <__fixdfsi>
    5248:	1009883a 	mov	r4,r2
    524c:	1029883a 	mov	r20,r2
    5250:	000e3f40 	call	e3f4 <__floatsidf>
    5254:	d9000f17 	ldw	r4,60(sp)
    5258:	d9401017 	ldw	r5,64(sp)
    525c:	100d883a 	mov	r6,r2
    5260:	180f883a 	mov	r7,r3
    5264:	000da780 	call	da78 <__subdf3>
    5268:	1823883a 	mov	r17,r3
    526c:	d8c00717 	ldw	r3,28(sp)
    5270:	d9401217 	ldw	r5,72(sp)
    5274:	a2000c04 	addi	r8,r20,48
    5278:	1021883a 	mov	r16,r2
    527c:	1a000005 	stb	r8,0(r3)
    5280:	800d883a 	mov	r6,r16
    5284:	880f883a 	mov	r7,r17
    5288:	a809883a 	mov	r4,r21
    528c:	4029883a 	mov	r20,r8
    5290:	000d1900 	call	d190 <__gedf2>
    5294:	00841d16 	blt	zero,r2,630c <_dtoa_r+0x15f4>
    5298:	800d883a 	mov	r6,r16
    529c:	880f883a 	mov	r7,r17
    52a0:	0009883a 	mov	r4,zero
    52a4:	014ffc34 	movhi	r5,16368
    52a8:	000da780 	call	da78 <__subdf3>
    52ac:	d9401217 	ldw	r5,72(sp)
    52b0:	100d883a 	mov	r6,r2
    52b4:	180f883a 	mov	r7,r3
    52b8:	a809883a 	mov	r4,r21
    52bc:	000d1900 	call	d190 <__gedf2>
    52c0:	db001617 	ldw	r12,88(sp)
    52c4:	00840e16 	blt	zero,r2,6300 <_dtoa_r+0x15e8>
    52c8:	00800044 	movi	r2,1
    52cc:	13006b0e 	bge	r2,r12,547c <_dtoa_r+0x764>
    52d0:	d9000717 	ldw	r4,28(sp)
    52d4:	dd800f15 	stw	r22,60(sp)
    52d8:	dcc01015 	stw	r19,64(sp)
    52dc:	2319883a 	add	r12,r4,r12
    52e0:	dcc01217 	ldw	r19,72(sp)
    52e4:	602d883a 	mov	r22,r12
    52e8:	dc801215 	stw	r18,72(sp)
    52ec:	b825883a 	mov	r18,r23
    52f0:	00000906 	br	5318 <_dtoa_r+0x600>
    52f4:	000da780 	call	da78 <__subdf3>
    52f8:	a80d883a 	mov	r6,r21
    52fc:	980f883a 	mov	r7,r19
    5300:	1009883a 	mov	r4,r2
    5304:	180b883a 	mov	r5,r3
    5308:	000d26c0 	call	d26c <__ledf2>
    530c:	1003e816 	blt	r2,zero,62b0 <_dtoa_r+0x1598>
    5310:	b825883a 	mov	r18,r23
    5314:	bd83e926 	beq	r23,r22,62bc <_dtoa_r+0x15a4>
    5318:	a809883a 	mov	r4,r21
    531c:	980b883a 	mov	r5,r19
    5320:	000d883a 	mov	r6,zero
    5324:	01d00934 	movhi	r7,16420
    5328:	000d3600 	call	d360 <__muldf3>
    532c:	000d883a 	mov	r6,zero
    5330:	01d00934 	movhi	r7,16420
    5334:	8009883a 	mov	r4,r16
    5338:	880b883a 	mov	r5,r17
    533c:	102b883a 	mov	r21,r2
    5340:	1827883a 	mov	r19,r3
    5344:	000d3600 	call	d360 <__muldf3>
    5348:	180b883a 	mov	r5,r3
    534c:	1009883a 	mov	r4,r2
    5350:	1821883a 	mov	r16,r3
    5354:	1023883a 	mov	r17,r2
    5358:	000e3740 	call	e374 <__fixdfsi>
    535c:	1009883a 	mov	r4,r2
    5360:	1029883a 	mov	r20,r2
    5364:	000e3f40 	call	e3f4 <__floatsidf>
    5368:	8809883a 	mov	r4,r17
    536c:	800b883a 	mov	r5,r16
    5370:	100d883a 	mov	r6,r2
    5374:	180f883a 	mov	r7,r3
    5378:	000da780 	call	da78 <__subdf3>
    537c:	a5000c04 	addi	r20,r20,48
    5380:	a80d883a 	mov	r6,r21
    5384:	980f883a 	mov	r7,r19
    5388:	1009883a 	mov	r4,r2
    538c:	180b883a 	mov	r5,r3
    5390:	95000005 	stb	r20,0(r18)
    5394:	1021883a 	mov	r16,r2
    5398:	1823883a 	mov	r17,r3
    539c:	000d26c0 	call	d26c <__ledf2>
    53a0:	bdc00044 	addi	r23,r23,1
    53a4:	800d883a 	mov	r6,r16
    53a8:	880f883a 	mov	r7,r17
    53ac:	0009883a 	mov	r4,zero
    53b0:	014ffc34 	movhi	r5,16368
    53b4:	103fcf0e 	bge	r2,zero,52f4 <__alt_data_end+0xff0052f4>
    53b8:	d8c01317 	ldw	r3,76(sp)
    53bc:	d8c00515 	stw	r3,20(sp)
    53c0:	d9400917 	ldw	r5,36(sp)
    53c4:	e009883a 	mov	r4,fp
    53c8:	0007c500 	call	7c50 <_Bfree>
    53cc:	d9000517 	ldw	r4,20(sp)
    53d0:	d9802317 	ldw	r6,140(sp)
    53d4:	d9c02517 	ldw	r7,148(sp)
    53d8:	b8000005 	stb	zero,0(r23)
    53dc:	20800044 	addi	r2,r4,1
    53e0:	30800015 	stw	r2,0(r6)
    53e4:	3802aa26 	beq	r7,zero,5e90 <_dtoa_r+0x1178>
    53e8:	3dc00015 	stw	r23,0(r7)
    53ec:	d8800717 	ldw	r2,28(sp)
    53f0:	003e7906 	br	4dd8 <__alt_data_end+0xff004dd8>
    53f4:	00800434 	movhi	r2,16
    53f8:	10bfffc4 	addi	r2,r2,-1
    53fc:	88a2703a 	and	r17,r17,r2
    5400:	883e851e 	bne	r17,zero,4e18 <__alt_data_end+0xff004e18>
    5404:	00800074 	movhi	r2,1
    5408:	1081a404 	addi	r2,r2,1680
    540c:	003e8406 	br	4e20 <__alt_data_end+0xff004e20>
    5410:	10c00204 	addi	r3,r2,8
    5414:	003e8706 	br	4e34 <__alt_data_end+0xff004e34>
    5418:	01400434 	movhi	r5,16
    541c:	297fffc4 	addi	r5,r5,-1
    5420:	994a703a 	and	r5,r19,r5
    5424:	9009883a 	mov	r4,r18
    5428:	843f0044 	addi	r16,r16,-1023
    542c:	294ffc34 	orhi	r5,r5,16368
    5430:	dd800217 	ldw	r22,8(sp)
    5434:	d8001115 	stw	zero,68(sp)
    5438:	003ea506 	br	4ed0 <__alt_data_end+0xff004ed0>
    543c:	00800074 	movhi	r2,1
    5440:	10819b04 	addi	r2,r2,1644
    5444:	003e6406 	br	4dd8 <__alt_data_end+0xff004dd8>
    5448:	e0001115 	stw	zero,68(fp)
    544c:	000b883a 	mov	r5,zero
    5450:	e009883a 	mov	r4,fp
    5454:	0007ba80 	call	7ba8 <_Balloc>
    5458:	01bfffc4 	movi	r6,-1
    545c:	01c00044 	movi	r7,1
    5460:	d8800715 	stw	r2,28(sp)
    5464:	d9800c15 	stw	r6,48(sp)
    5468:	e0801015 	stw	r2,64(fp)
    546c:	d8000315 	stw	zero,12(sp)
    5470:	d9c00b15 	stw	r7,44(sp)
    5474:	d9800615 	stw	r6,24(sp)
    5478:	d8002215 	stw	zero,136(sp)
    547c:	d8800117 	ldw	r2,4(sp)
    5480:	10008916 	blt	r2,zero,56a8 <_dtoa_r+0x990>
    5484:	d9000517 	ldw	r4,20(sp)
    5488:	00c00384 	movi	r3,14
    548c:	19008616 	blt	r3,r4,56a8 <_dtoa_r+0x990>
    5490:	200490fa 	slli	r2,r4,3
    5494:	00c00074 	movhi	r3,1
    5498:	d9802217 	ldw	r6,136(sp)
    549c:	18c1c304 	addi	r3,r3,1804
    54a0:	1885883a 	add	r2,r3,r2
    54a4:	14000017 	ldw	r16,0(r2)
    54a8:	14400117 	ldw	r17,4(r2)
    54ac:	30016316 	blt	r6,zero,5a3c <_dtoa_r+0xd24>
    54b0:	800d883a 	mov	r6,r16
    54b4:	880f883a 	mov	r7,r17
    54b8:	9009883a 	mov	r4,r18
    54bc:	980b883a 	mov	r5,r19
    54c0:	000c8200 	call	c820 <__divdf3>
    54c4:	180b883a 	mov	r5,r3
    54c8:	1009883a 	mov	r4,r2
    54cc:	000e3740 	call	e374 <__fixdfsi>
    54d0:	1009883a 	mov	r4,r2
    54d4:	102b883a 	mov	r21,r2
    54d8:	000e3f40 	call	e3f4 <__floatsidf>
    54dc:	800d883a 	mov	r6,r16
    54e0:	880f883a 	mov	r7,r17
    54e4:	1009883a 	mov	r4,r2
    54e8:	180b883a 	mov	r5,r3
    54ec:	000d3600 	call	d360 <__muldf3>
    54f0:	100d883a 	mov	r6,r2
    54f4:	180f883a 	mov	r7,r3
    54f8:	9009883a 	mov	r4,r18
    54fc:	980b883a 	mov	r5,r19
    5500:	000da780 	call	da78 <__subdf3>
    5504:	d9c00717 	ldw	r7,28(sp)
    5508:	1009883a 	mov	r4,r2
    550c:	a8800c04 	addi	r2,r21,48
    5510:	38800005 	stb	r2,0(r7)
    5514:	3dc00044 	addi	r23,r7,1
    5518:	d9c00617 	ldw	r7,24(sp)
    551c:	01800044 	movi	r6,1
    5520:	180b883a 	mov	r5,r3
    5524:	2005883a 	mov	r2,r4
    5528:	39803826 	beq	r7,r6,560c <_dtoa_r+0x8f4>
    552c:	000d883a 	mov	r6,zero
    5530:	01d00934 	movhi	r7,16420
    5534:	000d3600 	call	d360 <__muldf3>
    5538:	000d883a 	mov	r6,zero
    553c:	000f883a 	mov	r7,zero
    5540:	1009883a 	mov	r4,r2
    5544:	180b883a 	mov	r5,r3
    5548:	1025883a 	mov	r18,r2
    554c:	1827883a 	mov	r19,r3
    5550:	000d1080 	call	d108 <__eqdf2>
    5554:	103f9a26 	beq	r2,zero,53c0 <__alt_data_end+0xff0053c0>
    5558:	d9c00617 	ldw	r7,24(sp)
    555c:	d8c00717 	ldw	r3,28(sp)
    5560:	b829883a 	mov	r20,r23
    5564:	38bfffc4 	addi	r2,r7,-1
    5568:	18ad883a 	add	r22,r3,r2
    556c:	00000a06 	br	5598 <_dtoa_r+0x880>
    5570:	000d3600 	call	d360 <__muldf3>
    5574:	000d883a 	mov	r6,zero
    5578:	000f883a 	mov	r7,zero
    557c:	1009883a 	mov	r4,r2
    5580:	180b883a 	mov	r5,r3
    5584:	1025883a 	mov	r18,r2
    5588:	1827883a 	mov	r19,r3
    558c:	b829883a 	mov	r20,r23
    5590:	000d1080 	call	d108 <__eqdf2>
    5594:	103f8a26 	beq	r2,zero,53c0 <__alt_data_end+0xff0053c0>
    5598:	800d883a 	mov	r6,r16
    559c:	880f883a 	mov	r7,r17
    55a0:	9009883a 	mov	r4,r18
    55a4:	980b883a 	mov	r5,r19
    55a8:	000c8200 	call	c820 <__divdf3>
    55ac:	180b883a 	mov	r5,r3
    55b0:	1009883a 	mov	r4,r2
    55b4:	000e3740 	call	e374 <__fixdfsi>
    55b8:	1009883a 	mov	r4,r2
    55bc:	102b883a 	mov	r21,r2
    55c0:	000e3f40 	call	e3f4 <__floatsidf>
    55c4:	800d883a 	mov	r6,r16
    55c8:	880f883a 	mov	r7,r17
    55cc:	1009883a 	mov	r4,r2
    55d0:	180b883a 	mov	r5,r3
    55d4:	000d3600 	call	d360 <__muldf3>
    55d8:	100d883a 	mov	r6,r2
    55dc:	180f883a 	mov	r7,r3
    55e0:	9009883a 	mov	r4,r18
    55e4:	980b883a 	mov	r5,r19
    55e8:	000da780 	call	da78 <__subdf3>
    55ec:	aa000c04 	addi	r8,r21,48
    55f0:	a2000005 	stb	r8,0(r20)
    55f4:	000d883a 	mov	r6,zero
    55f8:	01d00934 	movhi	r7,16420
    55fc:	1009883a 	mov	r4,r2
    5600:	180b883a 	mov	r5,r3
    5604:	a5c00044 	addi	r23,r20,1
    5608:	b53fd91e 	bne	r22,r20,5570 <__alt_data_end+0xff005570>
    560c:	100d883a 	mov	r6,r2
    5610:	180f883a 	mov	r7,r3
    5614:	1009883a 	mov	r4,r2
    5618:	180b883a 	mov	r5,r3
    561c:	000bf740 	call	bf74 <__adddf3>
    5620:	100d883a 	mov	r6,r2
    5624:	180f883a 	mov	r7,r3
    5628:	8009883a 	mov	r4,r16
    562c:	880b883a 	mov	r5,r17
    5630:	1027883a 	mov	r19,r2
    5634:	1825883a 	mov	r18,r3
    5638:	000d26c0 	call	d26c <__ledf2>
    563c:	10000816 	blt	r2,zero,5660 <_dtoa_r+0x948>
    5640:	980d883a 	mov	r6,r19
    5644:	900f883a 	mov	r7,r18
    5648:	8009883a 	mov	r4,r16
    564c:	880b883a 	mov	r5,r17
    5650:	000d1080 	call	d108 <__eqdf2>
    5654:	103f5a1e 	bne	r2,zero,53c0 <__alt_data_end+0xff0053c0>
    5658:	ad40004c 	andi	r21,r21,1
    565c:	a83f5826 	beq	r21,zero,53c0 <__alt_data_end+0xff0053c0>
    5660:	bd3fffc3 	ldbu	r20,-1(r23)
    5664:	b8bfffc4 	addi	r2,r23,-1
    5668:	1007883a 	mov	r3,r2
    566c:	01400e44 	movi	r5,57
    5670:	d9800717 	ldw	r6,28(sp)
    5674:	00000506 	br	568c <_dtoa_r+0x974>
    5678:	18ffffc4 	addi	r3,r3,-1
    567c:	11824726 	beq	r2,r6,5f9c <_dtoa_r+0x1284>
    5680:	1d000003 	ldbu	r20,0(r3)
    5684:	102f883a 	mov	r23,r2
    5688:	10bfffc4 	addi	r2,r2,-1
    568c:	a1003fcc 	andi	r4,r20,255
    5690:	2100201c 	xori	r4,r4,128
    5694:	213fe004 	addi	r4,r4,-128
    5698:	217ff726 	beq	r4,r5,5678 <__alt_data_end+0xff005678>
    569c:	a2000044 	addi	r8,r20,1
    56a0:	12000005 	stb	r8,0(r2)
    56a4:	003f4606 	br	53c0 <__alt_data_end+0xff0053c0>
    56a8:	d9000b17 	ldw	r4,44(sp)
    56ac:	2000c826 	beq	r4,zero,59d0 <_dtoa_r+0xcb8>
    56b0:	d9800317 	ldw	r6,12(sp)
    56b4:	00c00044 	movi	r3,1
    56b8:	1980f90e 	bge	r3,r6,5aa0 <_dtoa_r+0xd88>
    56bc:	d8800617 	ldw	r2,24(sp)
    56c0:	d8c00a17 	ldw	r3,40(sp)
    56c4:	157fffc4 	addi	r21,r2,-1
    56c8:	1d41f316 	blt	r3,r21,5e98 <_dtoa_r+0x1180>
    56cc:	1d6bc83a 	sub	r21,r3,r21
    56d0:	d9c00617 	ldw	r7,24(sp)
    56d4:	3802aa16 	blt	r7,zero,6180 <_dtoa_r+0x1468>
    56d8:	dd000817 	ldw	r20,32(sp)
    56dc:	d8800617 	ldw	r2,24(sp)
    56e0:	d8c00817 	ldw	r3,32(sp)
    56e4:	01400044 	movi	r5,1
    56e8:	e009883a 	mov	r4,fp
    56ec:	1887883a 	add	r3,r3,r2
    56f0:	d8c00815 	stw	r3,32(sp)
    56f4:	b0ad883a 	add	r22,r22,r2
    56f8:	0007fb40 	call	7fb4 <__i2b>
    56fc:	1023883a 	mov	r17,r2
    5700:	a0000826 	beq	r20,zero,5724 <_dtoa_r+0xa0c>
    5704:	0580070e 	bge	zero,r22,5724 <_dtoa_r+0xa0c>
    5708:	a005883a 	mov	r2,r20
    570c:	b500b916 	blt	r22,r20,59f4 <_dtoa_r+0xcdc>
    5710:	d9000817 	ldw	r4,32(sp)
    5714:	a0a9c83a 	sub	r20,r20,r2
    5718:	b0adc83a 	sub	r22,r22,r2
    571c:	2089c83a 	sub	r4,r4,r2
    5720:	d9000815 	stw	r4,32(sp)
    5724:	d9800a17 	ldw	r6,40(sp)
    5728:	0181810e 	bge	zero,r6,5d30 <_dtoa_r+0x1018>
    572c:	d9c00b17 	ldw	r7,44(sp)
    5730:	3800b326 	beq	r7,zero,5a00 <_dtoa_r+0xce8>
    5734:	a800b226 	beq	r21,zero,5a00 <_dtoa_r+0xce8>
    5738:	880b883a 	mov	r5,r17
    573c:	a80d883a 	mov	r6,r21
    5740:	e009883a 	mov	r4,fp
    5744:	00081e80 	call	81e8 <__pow5mult>
    5748:	d9800917 	ldw	r6,36(sp)
    574c:	100b883a 	mov	r5,r2
    5750:	e009883a 	mov	r4,fp
    5754:	1023883a 	mov	r17,r2
    5758:	0007ff00 	call	7ff0 <__multiply>
    575c:	1021883a 	mov	r16,r2
    5760:	d8800a17 	ldw	r2,40(sp)
    5764:	d9400917 	ldw	r5,36(sp)
    5768:	e009883a 	mov	r4,fp
    576c:	1545c83a 	sub	r2,r2,r21
    5770:	d8800a15 	stw	r2,40(sp)
    5774:	0007c500 	call	7c50 <_Bfree>
    5778:	d8c00a17 	ldw	r3,40(sp)
    577c:	18009f1e 	bne	r3,zero,59fc <_dtoa_r+0xce4>
    5780:	05c00044 	movi	r23,1
    5784:	e009883a 	mov	r4,fp
    5788:	b80b883a 	mov	r5,r23
    578c:	0007fb40 	call	7fb4 <__i2b>
    5790:	d9000d17 	ldw	r4,52(sp)
    5794:	102b883a 	mov	r21,r2
    5798:	2000ce26 	beq	r4,zero,5ad4 <_dtoa_r+0xdbc>
    579c:	200d883a 	mov	r6,r4
    57a0:	100b883a 	mov	r5,r2
    57a4:	e009883a 	mov	r4,fp
    57a8:	00081e80 	call	81e8 <__pow5mult>
    57ac:	d9800317 	ldw	r6,12(sp)
    57b0:	102b883a 	mov	r21,r2
    57b4:	b981810e 	bge	r23,r6,5dbc <_dtoa_r+0x10a4>
    57b8:	0027883a 	mov	r19,zero
    57bc:	a8800417 	ldw	r2,16(r21)
    57c0:	05c00804 	movi	r23,32
    57c4:	10800104 	addi	r2,r2,4
    57c8:	1085883a 	add	r2,r2,r2
    57cc:	1085883a 	add	r2,r2,r2
    57d0:	a885883a 	add	r2,r21,r2
    57d4:	11000017 	ldw	r4,0(r2)
    57d8:	0007e9c0 	call	7e9c <__hi0bits>
    57dc:	b885c83a 	sub	r2,r23,r2
    57e0:	1585883a 	add	r2,r2,r22
    57e4:	108007cc 	andi	r2,r2,31
    57e8:	1000b326 	beq	r2,zero,5ab8 <_dtoa_r+0xda0>
    57ec:	00c00804 	movi	r3,32
    57f0:	1887c83a 	sub	r3,r3,r2
    57f4:	01000104 	movi	r4,4
    57f8:	20c2cd0e 	bge	r4,r3,6330 <_dtoa_r+0x1618>
    57fc:	00c00704 	movi	r3,28
    5800:	1885c83a 	sub	r2,r3,r2
    5804:	d8c00817 	ldw	r3,32(sp)
    5808:	a0a9883a 	add	r20,r20,r2
    580c:	b0ad883a 	add	r22,r22,r2
    5810:	1887883a 	add	r3,r3,r2
    5814:	d8c00815 	stw	r3,32(sp)
    5818:	d9800817 	ldw	r6,32(sp)
    581c:	0180040e 	bge	zero,r6,5830 <_dtoa_r+0xb18>
    5820:	800b883a 	mov	r5,r16
    5824:	e009883a 	mov	r4,fp
    5828:	00083280 	call	8328 <__lshift>
    582c:	1021883a 	mov	r16,r2
    5830:	0580050e 	bge	zero,r22,5848 <_dtoa_r+0xb30>
    5834:	a80b883a 	mov	r5,r21
    5838:	b00d883a 	mov	r6,r22
    583c:	e009883a 	mov	r4,fp
    5840:	00083280 	call	8328 <__lshift>
    5844:	102b883a 	mov	r21,r2
    5848:	d9c00e17 	ldw	r7,56(sp)
    584c:	3801211e 	bne	r7,zero,5cd4 <_dtoa_r+0xfbc>
    5850:	d9800617 	ldw	r6,24(sp)
    5854:	0181380e 	bge	zero,r6,5d38 <_dtoa_r+0x1020>
    5858:	d8c00b17 	ldw	r3,44(sp)
    585c:	1800ab1e 	bne	r3,zero,5b0c <_dtoa_r+0xdf4>
    5860:	dc800717 	ldw	r18,28(sp)
    5864:	dcc00617 	ldw	r19,24(sp)
    5868:	9029883a 	mov	r20,r18
    586c:	00000206 	br	5878 <_dtoa_r+0xb60>
    5870:	0007c780 	call	7c78 <__multadd>
    5874:	1021883a 	mov	r16,r2
    5878:	a80b883a 	mov	r5,r21
    587c:	8009883a 	mov	r4,r16
    5880:	0004b180 	call	4b18 <quorem>
    5884:	10800c04 	addi	r2,r2,48
    5888:	90800005 	stb	r2,0(r18)
    588c:	94800044 	addi	r18,r18,1
    5890:	9507c83a 	sub	r3,r18,r20
    5894:	000f883a 	mov	r7,zero
    5898:	01800284 	movi	r6,10
    589c:	800b883a 	mov	r5,r16
    58a0:	e009883a 	mov	r4,fp
    58a4:	1cfff216 	blt	r3,r19,5870 <__alt_data_end+0xff005870>
    58a8:	1011883a 	mov	r8,r2
    58ac:	d8800617 	ldw	r2,24(sp)
    58b0:	0082370e 	bge	zero,r2,6190 <_dtoa_r+0x1478>
    58b4:	d9000717 	ldw	r4,28(sp)
    58b8:	0025883a 	mov	r18,zero
    58bc:	20af883a 	add	r23,r4,r2
    58c0:	01800044 	movi	r6,1
    58c4:	800b883a 	mov	r5,r16
    58c8:	e009883a 	mov	r4,fp
    58cc:	da001715 	stw	r8,92(sp)
    58d0:	00083280 	call	8328 <__lshift>
    58d4:	a80b883a 	mov	r5,r21
    58d8:	1009883a 	mov	r4,r2
    58dc:	d8800915 	stw	r2,36(sp)
    58e0:	00084700 	call	8470 <__mcmp>
    58e4:	da001717 	ldw	r8,92(sp)
    58e8:	0081800e 	bge	zero,r2,5eec <_dtoa_r+0x11d4>
    58ec:	b93fffc3 	ldbu	r4,-1(r23)
    58f0:	b8bfffc4 	addi	r2,r23,-1
    58f4:	1007883a 	mov	r3,r2
    58f8:	01800e44 	movi	r6,57
    58fc:	d9c00717 	ldw	r7,28(sp)
    5900:	00000506 	br	5918 <_dtoa_r+0xc00>
    5904:	18ffffc4 	addi	r3,r3,-1
    5908:	11c12326 	beq	r2,r7,5d98 <_dtoa_r+0x1080>
    590c:	19000003 	ldbu	r4,0(r3)
    5910:	102f883a 	mov	r23,r2
    5914:	10bfffc4 	addi	r2,r2,-1
    5918:	21403fcc 	andi	r5,r4,255
    591c:	2940201c 	xori	r5,r5,128
    5920:	297fe004 	addi	r5,r5,-128
    5924:	29bff726 	beq	r5,r6,5904 <__alt_data_end+0xff005904>
    5928:	21000044 	addi	r4,r4,1
    592c:	11000005 	stb	r4,0(r2)
    5930:	a80b883a 	mov	r5,r21
    5934:	e009883a 	mov	r4,fp
    5938:	0007c500 	call	7c50 <_Bfree>
    593c:	883ea026 	beq	r17,zero,53c0 <__alt_data_end+0xff0053c0>
    5940:	90000426 	beq	r18,zero,5954 <_dtoa_r+0xc3c>
    5944:	94400326 	beq	r18,r17,5954 <_dtoa_r+0xc3c>
    5948:	900b883a 	mov	r5,r18
    594c:	e009883a 	mov	r4,fp
    5950:	0007c500 	call	7c50 <_Bfree>
    5954:	880b883a 	mov	r5,r17
    5958:	e009883a 	mov	r4,fp
    595c:	0007c500 	call	7c50 <_Bfree>
    5960:	003e9706 	br	53c0 <__alt_data_end+0xff0053c0>
    5964:	01800044 	movi	r6,1
    5968:	d9800e15 	stw	r6,56(sp)
    596c:	003d9606 	br	4fc8 <__alt_data_end+0xff004fc8>
    5970:	d8800817 	ldw	r2,32(sp)
    5974:	d8c00517 	ldw	r3,20(sp)
    5978:	d8000d15 	stw	zero,52(sp)
    597c:	10c5c83a 	sub	r2,r2,r3
    5980:	00c9c83a 	sub	r4,zero,r3
    5984:	d8800815 	stw	r2,32(sp)
    5988:	d9000a15 	stw	r4,40(sp)
    598c:	003d9706 	br	4fec <__alt_data_end+0xff004fec>
    5990:	05adc83a 	sub	r22,zero,r22
    5994:	dd800815 	stw	r22,32(sp)
    5998:	002d883a 	mov	r22,zero
    599c:	003d8e06 	br	4fd8 <__alt_data_end+0xff004fd8>
    59a0:	d9000517 	ldw	r4,20(sp)
    59a4:	000e3f40 	call	e3f4 <__floatsidf>
    59a8:	100d883a 	mov	r6,r2
    59ac:	180f883a 	mov	r7,r3
    59b0:	a009883a 	mov	r4,r20
    59b4:	880b883a 	mov	r5,r17
    59b8:	000d1080 	call	d108 <__eqdf2>
    59bc:	103d7126 	beq	r2,zero,4f84 <__alt_data_end+0xff004f84>
    59c0:	d9c00517 	ldw	r7,20(sp)
    59c4:	39ffffc4 	addi	r7,r7,-1
    59c8:	d9c00515 	stw	r7,20(sp)
    59cc:	003d6d06 	br	4f84 <__alt_data_end+0xff004f84>
    59d0:	dd400a17 	ldw	r21,40(sp)
    59d4:	dd000817 	ldw	r20,32(sp)
    59d8:	0023883a 	mov	r17,zero
    59dc:	003f4806 	br	5700 <__alt_data_end+0xff005700>
    59e0:	10e3c83a 	sub	r17,r2,r3
    59e4:	9448983a 	sll	r4,r18,r17
    59e8:	003d3206 	br	4eb4 <__alt_data_end+0xff004eb4>
    59ec:	d8000e15 	stw	zero,56(sp)
    59f0:	003d7506 	br	4fc8 <__alt_data_end+0xff004fc8>
    59f4:	b005883a 	mov	r2,r22
    59f8:	003f4506 	br	5710 <__alt_data_end+0xff005710>
    59fc:	dc000915 	stw	r16,36(sp)
    5a00:	d9800a17 	ldw	r6,40(sp)
    5a04:	d9400917 	ldw	r5,36(sp)
    5a08:	e009883a 	mov	r4,fp
    5a0c:	00081e80 	call	81e8 <__pow5mult>
    5a10:	1021883a 	mov	r16,r2
    5a14:	003f5a06 	br	5780 <__alt_data_end+0xff005780>
    5a18:	01c00044 	movi	r7,1
    5a1c:	d9c00b15 	stw	r7,44(sp)
    5a20:	d8802217 	ldw	r2,136(sp)
    5a24:	0081280e 	bge	zero,r2,5ec8 <_dtoa_r+0x11b0>
    5a28:	100d883a 	mov	r6,r2
    5a2c:	1021883a 	mov	r16,r2
    5a30:	d8800c15 	stw	r2,48(sp)
    5a34:	d8800615 	stw	r2,24(sp)
    5a38:	003d8806 	br	505c <__alt_data_end+0xff00505c>
    5a3c:	d8800617 	ldw	r2,24(sp)
    5a40:	00be9b16 	blt	zero,r2,54b0 <__alt_data_end+0xff0054b0>
    5a44:	10010f1e 	bne	r2,zero,5e84 <_dtoa_r+0x116c>
    5a48:	880b883a 	mov	r5,r17
    5a4c:	000d883a 	mov	r6,zero
    5a50:	01d00534 	movhi	r7,16404
    5a54:	8009883a 	mov	r4,r16
    5a58:	000d3600 	call	d360 <__muldf3>
    5a5c:	900d883a 	mov	r6,r18
    5a60:	980f883a 	mov	r7,r19
    5a64:	1009883a 	mov	r4,r2
    5a68:	180b883a 	mov	r5,r3
    5a6c:	000d1900 	call	d190 <__gedf2>
    5a70:	002b883a 	mov	r21,zero
    5a74:	0023883a 	mov	r17,zero
    5a78:	1000bf16 	blt	r2,zero,5d78 <_dtoa_r+0x1060>
    5a7c:	d9802217 	ldw	r6,136(sp)
    5a80:	ddc00717 	ldw	r23,28(sp)
    5a84:	018c303a 	nor	r6,zero,r6
    5a88:	d9800515 	stw	r6,20(sp)
    5a8c:	a80b883a 	mov	r5,r21
    5a90:	e009883a 	mov	r4,fp
    5a94:	0007c500 	call	7c50 <_Bfree>
    5a98:	883e4926 	beq	r17,zero,53c0 <__alt_data_end+0xff0053c0>
    5a9c:	003fad06 	br	5954 <__alt_data_end+0xff005954>
    5aa0:	d9c01117 	ldw	r7,68(sp)
    5aa4:	3801bc26 	beq	r7,zero,6198 <_dtoa_r+0x1480>
    5aa8:	10810cc4 	addi	r2,r2,1075
    5aac:	dd400a17 	ldw	r21,40(sp)
    5ab0:	dd000817 	ldw	r20,32(sp)
    5ab4:	003f0a06 	br	56e0 <__alt_data_end+0xff0056e0>
    5ab8:	00800704 	movi	r2,28
    5abc:	d9000817 	ldw	r4,32(sp)
    5ac0:	a0a9883a 	add	r20,r20,r2
    5ac4:	b0ad883a 	add	r22,r22,r2
    5ac8:	2089883a 	add	r4,r4,r2
    5acc:	d9000815 	stw	r4,32(sp)
    5ad0:	003f5106 	br	5818 <__alt_data_end+0xff005818>
    5ad4:	d8c00317 	ldw	r3,12(sp)
    5ad8:	b8c1fc0e 	bge	r23,r3,62cc <_dtoa_r+0x15b4>
    5adc:	0027883a 	mov	r19,zero
    5ae0:	b805883a 	mov	r2,r23
    5ae4:	003f3e06 	br	57e0 <__alt_data_end+0xff0057e0>
    5ae8:	880b883a 	mov	r5,r17
    5aec:	e009883a 	mov	r4,fp
    5af0:	000f883a 	mov	r7,zero
    5af4:	01800284 	movi	r6,10
    5af8:	0007c780 	call	7c78 <__multadd>
    5afc:	d9000c17 	ldw	r4,48(sp)
    5b00:	1023883a 	mov	r17,r2
    5b04:	0102040e 	bge	zero,r4,6318 <_dtoa_r+0x1600>
    5b08:	d9000615 	stw	r4,24(sp)
    5b0c:	0500050e 	bge	zero,r20,5b24 <_dtoa_r+0xe0c>
    5b10:	880b883a 	mov	r5,r17
    5b14:	a00d883a 	mov	r6,r20
    5b18:	e009883a 	mov	r4,fp
    5b1c:	00083280 	call	8328 <__lshift>
    5b20:	1023883a 	mov	r17,r2
    5b24:	9801241e 	bne	r19,zero,5fb8 <_dtoa_r+0x12a0>
    5b28:	8829883a 	mov	r20,r17
    5b2c:	d9000617 	ldw	r4,24(sp)
    5b30:	dcc00717 	ldw	r19,28(sp)
    5b34:	9480004c 	andi	r18,r18,1
    5b38:	20bfffc4 	addi	r2,r4,-1
    5b3c:	9885883a 	add	r2,r19,r2
    5b40:	d8800415 	stw	r2,16(sp)
    5b44:	dc800615 	stw	r18,24(sp)
    5b48:	a80b883a 	mov	r5,r21
    5b4c:	8009883a 	mov	r4,r16
    5b50:	0004b180 	call	4b18 <quorem>
    5b54:	880b883a 	mov	r5,r17
    5b58:	8009883a 	mov	r4,r16
    5b5c:	102f883a 	mov	r23,r2
    5b60:	00084700 	call	8470 <__mcmp>
    5b64:	a80b883a 	mov	r5,r21
    5b68:	a00d883a 	mov	r6,r20
    5b6c:	e009883a 	mov	r4,fp
    5b70:	102d883a 	mov	r22,r2
    5b74:	00084d00 	call	84d0 <__mdiff>
    5b78:	1007883a 	mov	r3,r2
    5b7c:	10800317 	ldw	r2,12(r2)
    5b80:	bc800c04 	addi	r18,r23,48
    5b84:	180b883a 	mov	r5,r3
    5b88:	10004e1e 	bne	r2,zero,5cc4 <_dtoa_r+0xfac>
    5b8c:	8009883a 	mov	r4,r16
    5b90:	d8c01615 	stw	r3,88(sp)
    5b94:	00084700 	call	8470 <__mcmp>
    5b98:	d8c01617 	ldw	r3,88(sp)
    5b9c:	e009883a 	mov	r4,fp
    5ba0:	d8801615 	stw	r2,88(sp)
    5ba4:	180b883a 	mov	r5,r3
    5ba8:	0007c500 	call	7c50 <_Bfree>
    5bac:	d8801617 	ldw	r2,88(sp)
    5bb0:	1000041e 	bne	r2,zero,5bc4 <_dtoa_r+0xeac>
    5bb4:	d9800317 	ldw	r6,12(sp)
    5bb8:	3000021e 	bne	r6,zero,5bc4 <_dtoa_r+0xeac>
    5bbc:	d8c00617 	ldw	r3,24(sp)
    5bc0:	18003726 	beq	r3,zero,5ca0 <_dtoa_r+0xf88>
    5bc4:	b0002016 	blt	r22,zero,5c48 <_dtoa_r+0xf30>
    5bc8:	b000041e 	bne	r22,zero,5bdc <_dtoa_r+0xec4>
    5bcc:	d9000317 	ldw	r4,12(sp)
    5bd0:	2000021e 	bne	r4,zero,5bdc <_dtoa_r+0xec4>
    5bd4:	d8c00617 	ldw	r3,24(sp)
    5bd8:	18001b26 	beq	r3,zero,5c48 <_dtoa_r+0xf30>
    5bdc:	00810716 	blt	zero,r2,5ffc <_dtoa_r+0x12e4>
    5be0:	d8c00417 	ldw	r3,16(sp)
    5be4:	9d800044 	addi	r22,r19,1
    5be8:	9c800005 	stb	r18,0(r19)
    5bec:	b02f883a 	mov	r23,r22
    5bf0:	98c10626 	beq	r19,r3,600c <_dtoa_r+0x12f4>
    5bf4:	800b883a 	mov	r5,r16
    5bf8:	000f883a 	mov	r7,zero
    5bfc:	01800284 	movi	r6,10
    5c00:	e009883a 	mov	r4,fp
    5c04:	0007c780 	call	7c78 <__multadd>
    5c08:	1021883a 	mov	r16,r2
    5c0c:	000f883a 	mov	r7,zero
    5c10:	01800284 	movi	r6,10
    5c14:	880b883a 	mov	r5,r17
    5c18:	e009883a 	mov	r4,fp
    5c1c:	8d002526 	beq	r17,r20,5cb4 <_dtoa_r+0xf9c>
    5c20:	0007c780 	call	7c78 <__multadd>
    5c24:	a00b883a 	mov	r5,r20
    5c28:	000f883a 	mov	r7,zero
    5c2c:	01800284 	movi	r6,10
    5c30:	e009883a 	mov	r4,fp
    5c34:	1023883a 	mov	r17,r2
    5c38:	0007c780 	call	7c78 <__multadd>
    5c3c:	1029883a 	mov	r20,r2
    5c40:	b027883a 	mov	r19,r22
    5c44:	003fc006 	br	5b48 <__alt_data_end+0xff005b48>
    5c48:	9011883a 	mov	r8,r18
    5c4c:	00800e0e 	bge	zero,r2,5c88 <_dtoa_r+0xf70>
    5c50:	800b883a 	mov	r5,r16
    5c54:	01800044 	movi	r6,1
    5c58:	e009883a 	mov	r4,fp
    5c5c:	da001715 	stw	r8,92(sp)
    5c60:	00083280 	call	8328 <__lshift>
    5c64:	a80b883a 	mov	r5,r21
    5c68:	1009883a 	mov	r4,r2
    5c6c:	1021883a 	mov	r16,r2
    5c70:	00084700 	call	8470 <__mcmp>
    5c74:	da001717 	ldw	r8,92(sp)
    5c78:	0081960e 	bge	zero,r2,62d4 <_dtoa_r+0x15bc>
    5c7c:	00800e44 	movi	r2,57
    5c80:	40817026 	beq	r8,r2,6244 <_dtoa_r+0x152c>
    5c84:	ba000c44 	addi	r8,r23,49
    5c88:	8825883a 	mov	r18,r17
    5c8c:	9dc00044 	addi	r23,r19,1
    5c90:	9a000005 	stb	r8,0(r19)
    5c94:	a023883a 	mov	r17,r20
    5c98:	dc000915 	stw	r16,36(sp)
    5c9c:	003f2406 	br	5930 <__alt_data_end+0xff005930>
    5ca0:	00800e44 	movi	r2,57
    5ca4:	9011883a 	mov	r8,r18
    5ca8:	90816626 	beq	r18,r2,6244 <_dtoa_r+0x152c>
    5cac:	05bff516 	blt	zero,r22,5c84 <__alt_data_end+0xff005c84>
    5cb0:	003ff506 	br	5c88 <__alt_data_end+0xff005c88>
    5cb4:	0007c780 	call	7c78 <__multadd>
    5cb8:	1023883a 	mov	r17,r2
    5cbc:	1029883a 	mov	r20,r2
    5cc0:	003fdf06 	br	5c40 <__alt_data_end+0xff005c40>
    5cc4:	e009883a 	mov	r4,fp
    5cc8:	0007c500 	call	7c50 <_Bfree>
    5ccc:	00800044 	movi	r2,1
    5cd0:	003fbc06 	br	5bc4 <__alt_data_end+0xff005bc4>
    5cd4:	a80b883a 	mov	r5,r21
    5cd8:	8009883a 	mov	r4,r16
    5cdc:	00084700 	call	8470 <__mcmp>
    5ce0:	103edb0e 	bge	r2,zero,5850 <__alt_data_end+0xff005850>
    5ce4:	800b883a 	mov	r5,r16
    5ce8:	000f883a 	mov	r7,zero
    5cec:	01800284 	movi	r6,10
    5cf0:	e009883a 	mov	r4,fp
    5cf4:	0007c780 	call	7c78 <__multadd>
    5cf8:	1021883a 	mov	r16,r2
    5cfc:	d8800517 	ldw	r2,20(sp)
    5d00:	d8c00b17 	ldw	r3,44(sp)
    5d04:	10bfffc4 	addi	r2,r2,-1
    5d08:	d8800515 	stw	r2,20(sp)
    5d0c:	183f761e 	bne	r3,zero,5ae8 <__alt_data_end+0xff005ae8>
    5d10:	d9000c17 	ldw	r4,48(sp)
    5d14:	0101730e 	bge	zero,r4,62e4 <_dtoa_r+0x15cc>
    5d18:	d9000615 	stw	r4,24(sp)
    5d1c:	003ed006 	br	5860 <__alt_data_end+0xff005860>
    5d20:	00800084 	movi	r2,2
    5d24:	3081861e 	bne	r6,r2,6340 <_dtoa_r+0x1628>
    5d28:	d8000b15 	stw	zero,44(sp)
    5d2c:	003f3c06 	br	5a20 <__alt_data_end+0xff005a20>
    5d30:	dc000917 	ldw	r16,36(sp)
    5d34:	003e9206 	br	5780 <__alt_data_end+0xff005780>
    5d38:	d9c00317 	ldw	r7,12(sp)
    5d3c:	00800084 	movi	r2,2
    5d40:	11fec50e 	bge	r2,r7,5858 <__alt_data_end+0xff005858>
    5d44:	d9000617 	ldw	r4,24(sp)
    5d48:	20013c1e 	bne	r4,zero,623c <_dtoa_r+0x1524>
    5d4c:	a80b883a 	mov	r5,r21
    5d50:	000f883a 	mov	r7,zero
    5d54:	01800144 	movi	r6,5
    5d58:	e009883a 	mov	r4,fp
    5d5c:	0007c780 	call	7c78 <__multadd>
    5d60:	100b883a 	mov	r5,r2
    5d64:	8009883a 	mov	r4,r16
    5d68:	102b883a 	mov	r21,r2
    5d6c:	00084700 	call	8470 <__mcmp>
    5d70:	dc000915 	stw	r16,36(sp)
    5d74:	00bf410e 	bge	zero,r2,5a7c <__alt_data_end+0xff005a7c>
    5d78:	d9c00717 	ldw	r7,28(sp)
    5d7c:	00800c44 	movi	r2,49
    5d80:	38800005 	stb	r2,0(r7)
    5d84:	d8800517 	ldw	r2,20(sp)
    5d88:	3dc00044 	addi	r23,r7,1
    5d8c:	10800044 	addi	r2,r2,1
    5d90:	d8800515 	stw	r2,20(sp)
    5d94:	003f3d06 	br	5a8c <__alt_data_end+0xff005a8c>
    5d98:	d9800517 	ldw	r6,20(sp)
    5d9c:	d9c00717 	ldw	r7,28(sp)
    5da0:	00800c44 	movi	r2,49
    5da4:	31800044 	addi	r6,r6,1
    5da8:	d9800515 	stw	r6,20(sp)
    5dac:	38800005 	stb	r2,0(r7)
    5db0:	003edf06 	br	5930 <__alt_data_end+0xff005930>
    5db4:	d8000b15 	stw	zero,44(sp)
    5db8:	003c9f06 	br	5038 <__alt_data_end+0xff005038>
    5dbc:	903e7e1e 	bne	r18,zero,57b8 <__alt_data_end+0xff0057b8>
    5dc0:	00800434 	movhi	r2,16
    5dc4:	10bfffc4 	addi	r2,r2,-1
    5dc8:	9884703a 	and	r2,r19,r2
    5dcc:	1000ea1e 	bne	r2,zero,6178 <_dtoa_r+0x1460>
    5dd0:	9cdffc2c 	andhi	r19,r19,32752
    5dd4:	9800e826 	beq	r19,zero,6178 <_dtoa_r+0x1460>
    5dd8:	d9c00817 	ldw	r7,32(sp)
    5ddc:	b5800044 	addi	r22,r22,1
    5de0:	04c00044 	movi	r19,1
    5de4:	39c00044 	addi	r7,r7,1
    5de8:	d9c00815 	stw	r7,32(sp)
    5dec:	d8800d17 	ldw	r2,52(sp)
    5df0:	103e721e 	bne	r2,zero,57bc <__alt_data_end+0xff0057bc>
    5df4:	00800044 	movi	r2,1
    5df8:	003e7906 	br	57e0 <__alt_data_end+0xff0057e0>
    5dfc:	8009883a 	mov	r4,r16
    5e00:	000e3f40 	call	e3f4 <__floatsidf>
    5e04:	d9800f17 	ldw	r6,60(sp)
    5e08:	d9c01017 	ldw	r7,64(sp)
    5e0c:	1009883a 	mov	r4,r2
    5e10:	180b883a 	mov	r5,r3
    5e14:	000d3600 	call	d360 <__muldf3>
    5e18:	000d883a 	mov	r6,zero
    5e1c:	01d00734 	movhi	r7,16412
    5e20:	1009883a 	mov	r4,r2
    5e24:	180b883a 	mov	r5,r3
    5e28:	000bf740 	call	bf74 <__adddf3>
    5e2c:	047f3034 	movhi	r17,64704
    5e30:	1021883a 	mov	r16,r2
    5e34:	1c63883a 	add	r17,r3,r17
    5e38:	d9000f17 	ldw	r4,60(sp)
    5e3c:	d9401017 	ldw	r5,64(sp)
    5e40:	000d883a 	mov	r6,zero
    5e44:	01d00534 	movhi	r7,16404
    5e48:	000da780 	call	da78 <__subdf3>
    5e4c:	800d883a 	mov	r6,r16
    5e50:	880f883a 	mov	r7,r17
    5e54:	1009883a 	mov	r4,r2
    5e58:	180b883a 	mov	r5,r3
    5e5c:	102b883a 	mov	r21,r2
    5e60:	1829883a 	mov	r20,r3
    5e64:	000d1900 	call	d190 <__gedf2>
    5e68:	00806c16 	blt	zero,r2,601c <_dtoa_r+0x1304>
    5e6c:	89e0003c 	xorhi	r7,r17,32768
    5e70:	800d883a 	mov	r6,r16
    5e74:	a809883a 	mov	r4,r21
    5e78:	a00b883a 	mov	r5,r20
    5e7c:	000d26c0 	call	d26c <__ledf2>
    5e80:	103d7e0e 	bge	r2,zero,547c <__alt_data_end+0xff00547c>
    5e84:	002b883a 	mov	r21,zero
    5e88:	0023883a 	mov	r17,zero
    5e8c:	003efb06 	br	5a7c <__alt_data_end+0xff005a7c>
    5e90:	d8800717 	ldw	r2,28(sp)
    5e94:	003bd006 	br	4dd8 <__alt_data_end+0xff004dd8>
    5e98:	d9000a17 	ldw	r4,40(sp)
    5e9c:	d9800d17 	ldw	r6,52(sp)
    5ea0:	dd400a15 	stw	r21,40(sp)
    5ea4:	a905c83a 	sub	r2,r21,r4
    5ea8:	308d883a 	add	r6,r6,r2
    5eac:	d9800d15 	stw	r6,52(sp)
    5eb0:	002b883a 	mov	r21,zero
    5eb4:	003e0606 	br	56d0 <__alt_data_end+0xff0056d0>
    5eb8:	9023883a 	mov	r17,r18
    5ebc:	9829883a 	mov	r20,r19
    5ec0:	04000084 	movi	r16,2
    5ec4:	003c9206 	br	5110 <__alt_data_end+0xff005110>
    5ec8:	04000044 	movi	r16,1
    5ecc:	dc000c15 	stw	r16,48(sp)
    5ed0:	dc000615 	stw	r16,24(sp)
    5ed4:	dc002215 	stw	r16,136(sp)
    5ed8:	e0001115 	stw	zero,68(fp)
    5edc:	000b883a 	mov	r5,zero
    5ee0:	003c6906 	br	5088 <__alt_data_end+0xff005088>
    5ee4:	3021883a 	mov	r16,r6
    5ee8:	003ffb06 	br	5ed8 <__alt_data_end+0xff005ed8>
    5eec:	1000021e 	bne	r2,zero,5ef8 <_dtoa_r+0x11e0>
    5ef0:	4200004c 	andi	r8,r8,1
    5ef4:	403e7d1e 	bne	r8,zero,58ec <__alt_data_end+0xff0058ec>
    5ef8:	01000c04 	movi	r4,48
    5efc:	00000106 	br	5f04 <_dtoa_r+0x11ec>
    5f00:	102f883a 	mov	r23,r2
    5f04:	b8bfffc4 	addi	r2,r23,-1
    5f08:	10c00007 	ldb	r3,0(r2)
    5f0c:	193ffc26 	beq	r3,r4,5f00 <__alt_data_end+0xff005f00>
    5f10:	003e8706 	br	5930 <__alt_data_end+0xff005930>
    5f14:	d8800517 	ldw	r2,20(sp)
    5f18:	00a3c83a 	sub	r17,zero,r2
    5f1c:	8800a426 	beq	r17,zero,61b0 <_dtoa_r+0x1498>
    5f20:	888003cc 	andi	r2,r17,15
    5f24:	100490fa 	slli	r2,r2,3
    5f28:	00c00074 	movhi	r3,1
    5f2c:	18c1c304 	addi	r3,r3,1804
    5f30:	1885883a 	add	r2,r3,r2
    5f34:	11800017 	ldw	r6,0(r2)
    5f38:	11c00117 	ldw	r7,4(r2)
    5f3c:	9009883a 	mov	r4,r18
    5f40:	980b883a 	mov	r5,r19
    5f44:	8823d13a 	srai	r17,r17,4
    5f48:	000d3600 	call	d360 <__muldf3>
    5f4c:	d8800f15 	stw	r2,60(sp)
    5f50:	d8c01015 	stw	r3,64(sp)
    5f54:	8800e826 	beq	r17,zero,62f8 <_dtoa_r+0x15e0>
    5f58:	05000074 	movhi	r20,1
    5f5c:	a501b904 	addi	r20,r20,1764
    5f60:	04000084 	movi	r16,2
    5f64:	8980004c 	andi	r6,r17,1
    5f68:	1009883a 	mov	r4,r2
    5f6c:	8823d07a 	srai	r17,r17,1
    5f70:	180b883a 	mov	r5,r3
    5f74:	30000426 	beq	r6,zero,5f88 <_dtoa_r+0x1270>
    5f78:	a1800017 	ldw	r6,0(r20)
    5f7c:	a1c00117 	ldw	r7,4(r20)
    5f80:	84000044 	addi	r16,r16,1
    5f84:	000d3600 	call	d360 <__muldf3>
    5f88:	a5000204 	addi	r20,r20,8
    5f8c:	883ff51e 	bne	r17,zero,5f64 <__alt_data_end+0xff005f64>
    5f90:	d8800f15 	stw	r2,60(sp)
    5f94:	d8c01015 	stw	r3,64(sp)
    5f98:	003c7606 	br	5174 <__alt_data_end+0xff005174>
    5f9c:	00c00c04 	movi	r3,48
    5fa0:	10c00005 	stb	r3,0(r2)
    5fa4:	d8c00517 	ldw	r3,20(sp)
    5fa8:	bd3fffc3 	ldbu	r20,-1(r23)
    5fac:	18c00044 	addi	r3,r3,1
    5fb0:	d8c00515 	stw	r3,20(sp)
    5fb4:	003db906 	br	569c <__alt_data_end+0xff00569c>
    5fb8:	89400117 	ldw	r5,4(r17)
    5fbc:	e009883a 	mov	r4,fp
    5fc0:	0007ba80 	call	7ba8 <_Balloc>
    5fc4:	89800417 	ldw	r6,16(r17)
    5fc8:	89400304 	addi	r5,r17,12
    5fcc:	11000304 	addi	r4,r2,12
    5fd0:	31800084 	addi	r6,r6,2
    5fd4:	318d883a 	add	r6,r6,r6
    5fd8:	318d883a 	add	r6,r6,r6
    5fdc:	1027883a 	mov	r19,r2
    5fe0:	00077dc0 	call	77dc <memcpy>
    5fe4:	01800044 	movi	r6,1
    5fe8:	980b883a 	mov	r5,r19
    5fec:	e009883a 	mov	r4,fp
    5ff0:	00083280 	call	8328 <__lshift>
    5ff4:	1029883a 	mov	r20,r2
    5ff8:	003ecc06 	br	5b2c <__alt_data_end+0xff005b2c>
    5ffc:	00800e44 	movi	r2,57
    6000:	90809026 	beq	r18,r2,6244 <_dtoa_r+0x152c>
    6004:	92000044 	addi	r8,r18,1
    6008:	003f1f06 	br	5c88 <__alt_data_end+0xff005c88>
    600c:	9011883a 	mov	r8,r18
    6010:	8825883a 	mov	r18,r17
    6014:	a023883a 	mov	r17,r20
    6018:	003e2906 	br	58c0 <__alt_data_end+0xff0058c0>
    601c:	002b883a 	mov	r21,zero
    6020:	0023883a 	mov	r17,zero
    6024:	003f5406 	br	5d78 <__alt_data_end+0xff005d78>
    6028:	61bfffc4 	addi	r6,r12,-1
    602c:	300490fa 	slli	r2,r6,3
    6030:	00c00074 	movhi	r3,1
    6034:	18c1c304 	addi	r3,r3,1804
    6038:	1885883a 	add	r2,r3,r2
    603c:	11000017 	ldw	r4,0(r2)
    6040:	11400117 	ldw	r5,4(r2)
    6044:	d8800717 	ldw	r2,28(sp)
    6048:	880f883a 	mov	r7,r17
    604c:	d9801215 	stw	r6,72(sp)
    6050:	800d883a 	mov	r6,r16
    6054:	db001615 	stw	r12,88(sp)
    6058:	15c00044 	addi	r23,r2,1
    605c:	000d3600 	call	d360 <__muldf3>
    6060:	d9401017 	ldw	r5,64(sp)
    6064:	d9000f17 	ldw	r4,60(sp)
    6068:	d8c01515 	stw	r3,84(sp)
    606c:	d8801415 	stw	r2,80(sp)
    6070:	000e3740 	call	e374 <__fixdfsi>
    6074:	1009883a 	mov	r4,r2
    6078:	1021883a 	mov	r16,r2
    607c:	000e3f40 	call	e3f4 <__floatsidf>
    6080:	d9000f17 	ldw	r4,60(sp)
    6084:	d9401017 	ldw	r5,64(sp)
    6088:	100d883a 	mov	r6,r2
    608c:	180f883a 	mov	r7,r3
    6090:	000da780 	call	da78 <__subdf3>
    6094:	1829883a 	mov	r20,r3
    6098:	d8c00717 	ldw	r3,28(sp)
    609c:	84000c04 	addi	r16,r16,48
    60a0:	1023883a 	mov	r17,r2
    60a4:	1c000005 	stb	r16,0(r3)
    60a8:	db001617 	ldw	r12,88(sp)
    60ac:	00800044 	movi	r2,1
    60b0:	60802226 	beq	r12,r2,613c <_dtoa_r+0x1424>
    60b4:	d9c00717 	ldw	r7,28(sp)
    60b8:	8805883a 	mov	r2,r17
    60bc:	b82b883a 	mov	r21,r23
    60c0:	3b19883a 	add	r12,r7,r12
    60c4:	6023883a 	mov	r17,r12
    60c8:	a007883a 	mov	r3,r20
    60cc:	dc800f15 	stw	r18,60(sp)
    60d0:	000d883a 	mov	r6,zero
    60d4:	01d00934 	movhi	r7,16420
    60d8:	1009883a 	mov	r4,r2
    60dc:	180b883a 	mov	r5,r3
    60e0:	000d3600 	call	d360 <__muldf3>
    60e4:	180b883a 	mov	r5,r3
    60e8:	1009883a 	mov	r4,r2
    60ec:	1829883a 	mov	r20,r3
    60f0:	1025883a 	mov	r18,r2
    60f4:	000e3740 	call	e374 <__fixdfsi>
    60f8:	1009883a 	mov	r4,r2
    60fc:	1021883a 	mov	r16,r2
    6100:	000e3f40 	call	e3f4 <__floatsidf>
    6104:	100d883a 	mov	r6,r2
    6108:	180f883a 	mov	r7,r3
    610c:	9009883a 	mov	r4,r18
    6110:	a00b883a 	mov	r5,r20
    6114:	84000c04 	addi	r16,r16,48
    6118:	000da780 	call	da78 <__subdf3>
    611c:	ad400044 	addi	r21,r21,1
    6120:	ac3fffc5 	stb	r16,-1(r21)
    6124:	ac7fea1e 	bne	r21,r17,60d0 <__alt_data_end+0xff0060d0>
    6128:	1023883a 	mov	r17,r2
    612c:	d8801217 	ldw	r2,72(sp)
    6130:	dc800f17 	ldw	r18,60(sp)
    6134:	1829883a 	mov	r20,r3
    6138:	b8af883a 	add	r23,r23,r2
    613c:	d9001417 	ldw	r4,80(sp)
    6140:	d9401517 	ldw	r5,84(sp)
    6144:	000d883a 	mov	r6,zero
    6148:	01cff834 	movhi	r7,16352
    614c:	000bf740 	call	bf74 <__adddf3>
    6150:	880d883a 	mov	r6,r17
    6154:	a00f883a 	mov	r7,r20
    6158:	1009883a 	mov	r4,r2
    615c:	180b883a 	mov	r5,r3
    6160:	000d26c0 	call	d26c <__ledf2>
    6164:	10003e0e 	bge	r2,zero,6260 <_dtoa_r+0x1548>
    6168:	d9001317 	ldw	r4,76(sp)
    616c:	bd3fffc3 	ldbu	r20,-1(r23)
    6170:	d9000515 	stw	r4,20(sp)
    6174:	003d3b06 	br	5664 <__alt_data_end+0xff005664>
    6178:	0027883a 	mov	r19,zero
    617c:	003f1b06 	br	5dec <__alt_data_end+0xff005dec>
    6180:	d8800817 	ldw	r2,32(sp)
    6184:	11e9c83a 	sub	r20,r2,r7
    6188:	0005883a 	mov	r2,zero
    618c:	003d5406 	br	56e0 <__alt_data_end+0xff0056e0>
    6190:	00800044 	movi	r2,1
    6194:	003dc706 	br	58b4 <__alt_data_end+0xff0058b4>
    6198:	d8c00217 	ldw	r3,8(sp)
    619c:	00800d84 	movi	r2,54
    61a0:	dd400a17 	ldw	r21,40(sp)
    61a4:	10c5c83a 	sub	r2,r2,r3
    61a8:	dd000817 	ldw	r20,32(sp)
    61ac:	003d4c06 	br	56e0 <__alt_data_end+0xff0056e0>
    61b0:	dc800f15 	stw	r18,60(sp)
    61b4:	dcc01015 	stw	r19,64(sp)
    61b8:	04000084 	movi	r16,2
    61bc:	003bed06 	br	5174 <__alt_data_end+0xff005174>
    61c0:	d9000617 	ldw	r4,24(sp)
    61c4:	203f0d26 	beq	r4,zero,5dfc <__alt_data_end+0xff005dfc>
    61c8:	d9800c17 	ldw	r6,48(sp)
    61cc:	01bcab0e 	bge	zero,r6,547c <__alt_data_end+0xff00547c>
    61d0:	d9401017 	ldw	r5,64(sp)
    61d4:	d9000f17 	ldw	r4,60(sp)
    61d8:	000d883a 	mov	r6,zero
    61dc:	01d00934 	movhi	r7,16420
    61e0:	000d3600 	call	d360 <__muldf3>
    61e4:	81000044 	addi	r4,r16,1
    61e8:	d8800f15 	stw	r2,60(sp)
    61ec:	d8c01015 	stw	r3,64(sp)
    61f0:	000e3f40 	call	e3f4 <__floatsidf>
    61f4:	d9800f17 	ldw	r6,60(sp)
    61f8:	d9c01017 	ldw	r7,64(sp)
    61fc:	1009883a 	mov	r4,r2
    6200:	180b883a 	mov	r5,r3
    6204:	000d3600 	call	d360 <__muldf3>
    6208:	01d00734 	movhi	r7,16412
    620c:	000d883a 	mov	r6,zero
    6210:	1009883a 	mov	r4,r2
    6214:	180b883a 	mov	r5,r3
    6218:	000bf740 	call	bf74 <__adddf3>
    621c:	d9c00517 	ldw	r7,20(sp)
    6220:	047f3034 	movhi	r17,64704
    6224:	1021883a 	mov	r16,r2
    6228:	39ffffc4 	addi	r7,r7,-1
    622c:	d9c01315 	stw	r7,76(sp)
    6230:	1c63883a 	add	r17,r3,r17
    6234:	db000c17 	ldw	r12,48(sp)
    6238:	003bea06 	br	51e4 <__alt_data_end+0xff0051e4>
    623c:	dc000915 	stw	r16,36(sp)
    6240:	003e0e06 	br	5a7c <__alt_data_end+0xff005a7c>
    6244:	01000e44 	movi	r4,57
    6248:	8825883a 	mov	r18,r17
    624c:	9dc00044 	addi	r23,r19,1
    6250:	99000005 	stb	r4,0(r19)
    6254:	a023883a 	mov	r17,r20
    6258:	dc000915 	stw	r16,36(sp)
    625c:	003da406 	br	58f0 <__alt_data_end+0xff0058f0>
    6260:	d9801417 	ldw	r6,80(sp)
    6264:	d9c01517 	ldw	r7,84(sp)
    6268:	0009883a 	mov	r4,zero
    626c:	014ff834 	movhi	r5,16352
    6270:	000da780 	call	da78 <__subdf3>
    6274:	880d883a 	mov	r6,r17
    6278:	a00f883a 	mov	r7,r20
    627c:	1009883a 	mov	r4,r2
    6280:	180b883a 	mov	r5,r3
    6284:	000d1900 	call	d190 <__gedf2>
    6288:	00bc7c0e 	bge	zero,r2,547c <__alt_data_end+0xff00547c>
    628c:	01000c04 	movi	r4,48
    6290:	00000106 	br	6298 <_dtoa_r+0x1580>
    6294:	102f883a 	mov	r23,r2
    6298:	b8bfffc4 	addi	r2,r23,-1
    629c:	10c00007 	ldb	r3,0(r2)
    62a0:	193ffc26 	beq	r3,r4,6294 <__alt_data_end+0xff006294>
    62a4:	d9801317 	ldw	r6,76(sp)
    62a8:	d9800515 	stw	r6,20(sp)
    62ac:	003c4406 	br	53c0 <__alt_data_end+0xff0053c0>
    62b0:	d9801317 	ldw	r6,76(sp)
    62b4:	d9800515 	stw	r6,20(sp)
    62b8:	003cea06 	br	5664 <__alt_data_end+0xff005664>
    62bc:	dd800f17 	ldw	r22,60(sp)
    62c0:	dcc01017 	ldw	r19,64(sp)
    62c4:	dc801217 	ldw	r18,72(sp)
    62c8:	003c6c06 	br	547c <__alt_data_end+0xff00547c>
    62cc:	903e031e 	bne	r18,zero,5adc <__alt_data_end+0xff005adc>
    62d0:	003ebb06 	br	5dc0 <__alt_data_end+0xff005dc0>
    62d4:	103e6c1e 	bne	r2,zero,5c88 <__alt_data_end+0xff005c88>
    62d8:	4080004c 	andi	r2,r8,1
    62dc:	103e6a26 	beq	r2,zero,5c88 <__alt_data_end+0xff005c88>
    62e0:	003e6606 	br	5c7c <__alt_data_end+0xff005c7c>
    62e4:	d8c00317 	ldw	r3,12(sp)
    62e8:	00800084 	movi	r2,2
    62ec:	10c02916 	blt	r2,r3,6394 <_dtoa_r+0x167c>
    62f0:	d9000c17 	ldw	r4,48(sp)
    62f4:	003e8806 	br	5d18 <__alt_data_end+0xff005d18>
    62f8:	04000084 	movi	r16,2
    62fc:	003b9d06 	br	5174 <__alt_data_end+0xff005174>
    6300:	d9001317 	ldw	r4,76(sp)
    6304:	d9000515 	stw	r4,20(sp)
    6308:	003cd606 	br	5664 <__alt_data_end+0xff005664>
    630c:	d8801317 	ldw	r2,76(sp)
    6310:	d8800515 	stw	r2,20(sp)
    6314:	003c2a06 	br	53c0 <__alt_data_end+0xff0053c0>
    6318:	d9800317 	ldw	r6,12(sp)
    631c:	00800084 	movi	r2,2
    6320:	11801516 	blt	r2,r6,6378 <_dtoa_r+0x1660>
    6324:	d9c00c17 	ldw	r7,48(sp)
    6328:	d9c00615 	stw	r7,24(sp)
    632c:	003df706 	br	5b0c <__alt_data_end+0xff005b0c>
    6330:	193d3926 	beq	r3,r4,5818 <__alt_data_end+0xff005818>
    6334:	00c00f04 	movi	r3,60
    6338:	1885c83a 	sub	r2,r3,r2
    633c:	003ddf06 	br	5abc <__alt_data_end+0xff005abc>
    6340:	e009883a 	mov	r4,fp
    6344:	e0001115 	stw	zero,68(fp)
    6348:	000b883a 	mov	r5,zero
    634c:	0007ba80 	call	7ba8 <_Balloc>
    6350:	d8800715 	stw	r2,28(sp)
    6354:	d8c00717 	ldw	r3,28(sp)
    6358:	00bfffc4 	movi	r2,-1
    635c:	01000044 	movi	r4,1
    6360:	d8800c15 	stw	r2,48(sp)
    6364:	e0c01015 	stw	r3,64(fp)
    6368:	d9000b15 	stw	r4,44(sp)
    636c:	d8800615 	stw	r2,24(sp)
    6370:	d8002215 	stw	zero,136(sp)
    6374:	003c4106 	br	547c <__alt_data_end+0xff00547c>
    6378:	d8c00c17 	ldw	r3,48(sp)
    637c:	d8c00615 	stw	r3,24(sp)
    6380:	003e7006 	br	5d44 <__alt_data_end+0xff005d44>
    6384:	04400044 	movi	r17,1
    6388:	003b2006 	br	500c <__alt_data_end+0xff00500c>
    638c:	000b883a 	mov	r5,zero
    6390:	003b3d06 	br	5088 <__alt_data_end+0xff005088>
    6394:	d8800c17 	ldw	r2,48(sp)
    6398:	d8800615 	stw	r2,24(sp)
    639c:	003e6906 	br	5d44 <__alt_data_end+0xff005d44>

000063a0 <__sflush_r>:
    63a0:	2880030b 	ldhu	r2,12(r5)
    63a4:	defffb04 	addi	sp,sp,-20
    63a8:	dcc00315 	stw	r19,12(sp)
    63ac:	dc400115 	stw	r17,4(sp)
    63b0:	dfc00415 	stw	ra,16(sp)
    63b4:	dc800215 	stw	r18,8(sp)
    63b8:	dc000015 	stw	r16,0(sp)
    63bc:	10c0020c 	andi	r3,r2,8
    63c0:	2823883a 	mov	r17,r5
    63c4:	2027883a 	mov	r19,r4
    63c8:	1800311e 	bne	r3,zero,6490 <__sflush_r+0xf0>
    63cc:	28c00117 	ldw	r3,4(r5)
    63d0:	10820014 	ori	r2,r2,2048
    63d4:	2880030d 	sth	r2,12(r5)
    63d8:	00c04b0e 	bge	zero,r3,6508 <__sflush_r+0x168>
    63dc:	8a000a17 	ldw	r8,40(r17)
    63e0:	40002326 	beq	r8,zero,6470 <__sflush_r+0xd0>
    63e4:	9c000017 	ldw	r16,0(r19)
    63e8:	10c4000c 	andi	r3,r2,4096
    63ec:	98000015 	stw	zero,0(r19)
    63f0:	18004826 	beq	r3,zero,6514 <__sflush_r+0x174>
    63f4:	89801417 	ldw	r6,80(r17)
    63f8:	10c0010c 	andi	r3,r2,4
    63fc:	18000626 	beq	r3,zero,6418 <__sflush_r+0x78>
    6400:	88c00117 	ldw	r3,4(r17)
    6404:	88800c17 	ldw	r2,48(r17)
    6408:	30cdc83a 	sub	r6,r6,r3
    640c:	10000226 	beq	r2,zero,6418 <__sflush_r+0x78>
    6410:	88800f17 	ldw	r2,60(r17)
    6414:	308dc83a 	sub	r6,r6,r2
    6418:	89400717 	ldw	r5,28(r17)
    641c:	000f883a 	mov	r7,zero
    6420:	9809883a 	mov	r4,r19
    6424:	403ee83a 	callr	r8
    6428:	00ffffc4 	movi	r3,-1
    642c:	10c04426 	beq	r2,r3,6540 <__sflush_r+0x1a0>
    6430:	88c0030b 	ldhu	r3,12(r17)
    6434:	89000417 	ldw	r4,16(r17)
    6438:	88000115 	stw	zero,4(r17)
    643c:	197dffcc 	andi	r5,r3,63487
    6440:	8940030d 	sth	r5,12(r17)
    6444:	89000015 	stw	r4,0(r17)
    6448:	18c4000c 	andi	r3,r3,4096
    644c:	18002c1e 	bne	r3,zero,6500 <__sflush_r+0x160>
    6450:	89400c17 	ldw	r5,48(r17)
    6454:	9c000015 	stw	r16,0(r19)
    6458:	28000526 	beq	r5,zero,6470 <__sflush_r+0xd0>
    645c:	88801004 	addi	r2,r17,64
    6460:	28800226 	beq	r5,r2,646c <__sflush_r+0xcc>
    6464:	9809883a 	mov	r4,r19
    6468:	0006b0c0 	call	6b0c <_free_r>
    646c:	88000c15 	stw	zero,48(r17)
    6470:	0005883a 	mov	r2,zero
    6474:	dfc00417 	ldw	ra,16(sp)
    6478:	dcc00317 	ldw	r19,12(sp)
    647c:	dc800217 	ldw	r18,8(sp)
    6480:	dc400117 	ldw	r17,4(sp)
    6484:	dc000017 	ldw	r16,0(sp)
    6488:	dec00504 	addi	sp,sp,20
    648c:	f800283a 	ret
    6490:	2c800417 	ldw	r18,16(r5)
    6494:	903ff626 	beq	r18,zero,6470 <__alt_data_end+0xff006470>
    6498:	2c000017 	ldw	r16,0(r5)
    649c:	108000cc 	andi	r2,r2,3
    64a0:	2c800015 	stw	r18,0(r5)
    64a4:	84a1c83a 	sub	r16,r16,r18
    64a8:	1000131e 	bne	r2,zero,64f8 <__sflush_r+0x158>
    64ac:	28800517 	ldw	r2,20(r5)
    64b0:	88800215 	stw	r2,8(r17)
    64b4:	04000316 	blt	zero,r16,64c4 <__sflush_r+0x124>
    64b8:	003fed06 	br	6470 <__alt_data_end+0xff006470>
    64bc:	90a5883a 	add	r18,r18,r2
    64c0:	043feb0e 	bge	zero,r16,6470 <__alt_data_end+0xff006470>
    64c4:	88800917 	ldw	r2,36(r17)
    64c8:	89400717 	ldw	r5,28(r17)
    64cc:	800f883a 	mov	r7,r16
    64d0:	900d883a 	mov	r6,r18
    64d4:	9809883a 	mov	r4,r19
    64d8:	103ee83a 	callr	r2
    64dc:	80a1c83a 	sub	r16,r16,r2
    64e0:	00bff616 	blt	zero,r2,64bc <__alt_data_end+0xff0064bc>
    64e4:	88c0030b 	ldhu	r3,12(r17)
    64e8:	00bfffc4 	movi	r2,-1
    64ec:	18c01014 	ori	r3,r3,64
    64f0:	88c0030d 	sth	r3,12(r17)
    64f4:	003fdf06 	br	6474 <__alt_data_end+0xff006474>
    64f8:	0005883a 	mov	r2,zero
    64fc:	003fec06 	br	64b0 <__alt_data_end+0xff0064b0>
    6500:	88801415 	stw	r2,80(r17)
    6504:	003fd206 	br	6450 <__alt_data_end+0xff006450>
    6508:	28c00f17 	ldw	r3,60(r5)
    650c:	00ffb316 	blt	zero,r3,63dc <__alt_data_end+0xff0063dc>
    6510:	003fd706 	br	6470 <__alt_data_end+0xff006470>
    6514:	89400717 	ldw	r5,28(r17)
    6518:	000d883a 	mov	r6,zero
    651c:	01c00044 	movi	r7,1
    6520:	9809883a 	mov	r4,r19
    6524:	403ee83a 	callr	r8
    6528:	100d883a 	mov	r6,r2
    652c:	00bfffc4 	movi	r2,-1
    6530:	30801426 	beq	r6,r2,6584 <__sflush_r+0x1e4>
    6534:	8880030b 	ldhu	r2,12(r17)
    6538:	8a000a17 	ldw	r8,40(r17)
    653c:	003fae06 	br	63f8 <__alt_data_end+0xff0063f8>
    6540:	98c00017 	ldw	r3,0(r19)
    6544:	183fba26 	beq	r3,zero,6430 <__alt_data_end+0xff006430>
    6548:	01000744 	movi	r4,29
    654c:	19000626 	beq	r3,r4,6568 <__sflush_r+0x1c8>
    6550:	01000584 	movi	r4,22
    6554:	19000426 	beq	r3,r4,6568 <__sflush_r+0x1c8>
    6558:	88c0030b 	ldhu	r3,12(r17)
    655c:	18c01014 	ori	r3,r3,64
    6560:	88c0030d 	sth	r3,12(r17)
    6564:	003fc306 	br	6474 <__alt_data_end+0xff006474>
    6568:	8880030b 	ldhu	r2,12(r17)
    656c:	88c00417 	ldw	r3,16(r17)
    6570:	88000115 	stw	zero,4(r17)
    6574:	10bdffcc 	andi	r2,r2,63487
    6578:	8880030d 	sth	r2,12(r17)
    657c:	88c00015 	stw	r3,0(r17)
    6580:	003fb306 	br	6450 <__alt_data_end+0xff006450>
    6584:	98800017 	ldw	r2,0(r19)
    6588:	103fea26 	beq	r2,zero,6534 <__alt_data_end+0xff006534>
    658c:	00c00744 	movi	r3,29
    6590:	10c00226 	beq	r2,r3,659c <__sflush_r+0x1fc>
    6594:	00c00584 	movi	r3,22
    6598:	10c0031e 	bne	r2,r3,65a8 <__sflush_r+0x208>
    659c:	9c000015 	stw	r16,0(r19)
    65a0:	0005883a 	mov	r2,zero
    65a4:	003fb306 	br	6474 <__alt_data_end+0xff006474>
    65a8:	88c0030b 	ldhu	r3,12(r17)
    65ac:	3005883a 	mov	r2,r6
    65b0:	18c01014 	ori	r3,r3,64
    65b4:	88c0030d 	sth	r3,12(r17)
    65b8:	003fae06 	br	6474 <__alt_data_end+0xff006474>

000065bc <_fflush_r>:
    65bc:	defffd04 	addi	sp,sp,-12
    65c0:	dc000115 	stw	r16,4(sp)
    65c4:	dfc00215 	stw	ra,8(sp)
    65c8:	2021883a 	mov	r16,r4
    65cc:	20000226 	beq	r4,zero,65d8 <_fflush_r+0x1c>
    65d0:	20800e17 	ldw	r2,56(r4)
    65d4:	10000c26 	beq	r2,zero,6608 <_fflush_r+0x4c>
    65d8:	2880030f 	ldh	r2,12(r5)
    65dc:	1000051e 	bne	r2,zero,65f4 <_fflush_r+0x38>
    65e0:	0005883a 	mov	r2,zero
    65e4:	dfc00217 	ldw	ra,8(sp)
    65e8:	dc000117 	ldw	r16,4(sp)
    65ec:	dec00304 	addi	sp,sp,12
    65f0:	f800283a 	ret
    65f4:	8009883a 	mov	r4,r16
    65f8:	dfc00217 	ldw	ra,8(sp)
    65fc:	dc000117 	ldw	r16,4(sp)
    6600:	dec00304 	addi	sp,sp,12
    6604:	00063a01 	jmpi	63a0 <__sflush_r>
    6608:	d9400015 	stw	r5,0(sp)
    660c:	00069980 	call	6998 <__sinit>
    6610:	d9400017 	ldw	r5,0(sp)
    6614:	003ff006 	br	65d8 <__alt_data_end+0xff0065d8>

00006618 <fflush>:
    6618:	20000526 	beq	r4,zero,6630 <fflush+0x18>
    661c:	00800074 	movhi	r2,1
    6620:	1088f404 	addi	r2,r2,9168
    6624:	200b883a 	mov	r5,r4
    6628:	11000017 	ldw	r4,0(r2)
    662c:	00065bc1 	jmpi	65bc <_fflush_r>
    6630:	00800074 	movhi	r2,1
    6634:	1088f304 	addi	r2,r2,9164
    6638:	11000017 	ldw	r4,0(r2)
    663c:	01400034 	movhi	r5,0
    6640:	29596f04 	addi	r5,r5,26044
    6644:	000739c1 	jmpi	739c <_fwalk_reent>

00006648 <__fp_unlock>:
    6648:	0005883a 	mov	r2,zero
    664c:	f800283a 	ret

00006650 <_cleanup_r>:
    6650:	01400074 	movhi	r5,1
    6654:	296ad504 	addi	r5,r5,-21676
    6658:	000739c1 	jmpi	739c <_fwalk_reent>

0000665c <__sinit.part.1>:
    665c:	defff704 	addi	sp,sp,-36
    6660:	00c00034 	movhi	r3,0
    6664:	dfc00815 	stw	ra,32(sp)
    6668:	ddc00715 	stw	r23,28(sp)
    666c:	dd800615 	stw	r22,24(sp)
    6670:	dd400515 	stw	r21,20(sp)
    6674:	dd000415 	stw	r20,16(sp)
    6678:	dcc00315 	stw	r19,12(sp)
    667c:	dc800215 	stw	r18,8(sp)
    6680:	dc400115 	stw	r17,4(sp)
    6684:	dc000015 	stw	r16,0(sp)
    6688:	18d99404 	addi	r3,r3,26192
    668c:	24000117 	ldw	r16,4(r4)
    6690:	20c00f15 	stw	r3,60(r4)
    6694:	2080bb04 	addi	r2,r4,748
    6698:	00c000c4 	movi	r3,3
    669c:	20c0b915 	stw	r3,740(r4)
    66a0:	2080ba15 	stw	r2,744(r4)
    66a4:	2000b815 	stw	zero,736(r4)
    66a8:	05c00204 	movi	r23,8
    66ac:	00800104 	movi	r2,4
    66b0:	2025883a 	mov	r18,r4
    66b4:	b80d883a 	mov	r6,r23
    66b8:	81001704 	addi	r4,r16,92
    66bc:	000b883a 	mov	r5,zero
    66c0:	80000015 	stw	zero,0(r16)
    66c4:	80000115 	stw	zero,4(r16)
    66c8:	80000215 	stw	zero,8(r16)
    66cc:	8080030d 	sth	r2,12(r16)
    66d0:	80001915 	stw	zero,100(r16)
    66d4:	8000038d 	sth	zero,14(r16)
    66d8:	80000415 	stw	zero,16(r16)
    66dc:	80000515 	stw	zero,20(r16)
    66e0:	80000615 	stw	zero,24(r16)
    66e4:	0007a800 	call	7a80 <memset>
    66e8:	05800074 	movhi	r22,1
    66ec:	94400217 	ldw	r17,8(r18)
    66f0:	05400074 	movhi	r21,1
    66f4:	05000074 	movhi	r20,1
    66f8:	04c00074 	movhi	r19,1
    66fc:	b5a45f04 	addi	r22,r22,-28292
    6700:	ad647604 	addi	r21,r21,-28200
    6704:	a5249504 	addi	r20,r20,-28076
    6708:	9ce4ac04 	addi	r19,r19,-27984
    670c:	85800815 	stw	r22,32(r16)
    6710:	85400915 	stw	r21,36(r16)
    6714:	85000a15 	stw	r20,40(r16)
    6718:	84c00b15 	stw	r19,44(r16)
    671c:	84000715 	stw	r16,28(r16)
    6720:	00800284 	movi	r2,10
    6724:	8880030d 	sth	r2,12(r17)
    6728:	00800044 	movi	r2,1
    672c:	b80d883a 	mov	r6,r23
    6730:	89001704 	addi	r4,r17,92
    6734:	000b883a 	mov	r5,zero
    6738:	88000015 	stw	zero,0(r17)
    673c:	88000115 	stw	zero,4(r17)
    6740:	88000215 	stw	zero,8(r17)
    6744:	88001915 	stw	zero,100(r17)
    6748:	8880038d 	sth	r2,14(r17)
    674c:	88000415 	stw	zero,16(r17)
    6750:	88000515 	stw	zero,20(r17)
    6754:	88000615 	stw	zero,24(r17)
    6758:	0007a800 	call	7a80 <memset>
    675c:	94000317 	ldw	r16,12(r18)
    6760:	00800484 	movi	r2,18
    6764:	8c400715 	stw	r17,28(r17)
    6768:	8d800815 	stw	r22,32(r17)
    676c:	8d400915 	stw	r21,36(r17)
    6770:	8d000a15 	stw	r20,40(r17)
    6774:	8cc00b15 	stw	r19,44(r17)
    6778:	8080030d 	sth	r2,12(r16)
    677c:	00800084 	movi	r2,2
    6780:	80000015 	stw	zero,0(r16)
    6784:	80000115 	stw	zero,4(r16)
    6788:	80000215 	stw	zero,8(r16)
    678c:	80001915 	stw	zero,100(r16)
    6790:	8080038d 	sth	r2,14(r16)
    6794:	80000415 	stw	zero,16(r16)
    6798:	80000515 	stw	zero,20(r16)
    679c:	80000615 	stw	zero,24(r16)
    67a0:	b80d883a 	mov	r6,r23
    67a4:	000b883a 	mov	r5,zero
    67a8:	81001704 	addi	r4,r16,92
    67ac:	0007a800 	call	7a80 <memset>
    67b0:	00800044 	movi	r2,1
    67b4:	84000715 	stw	r16,28(r16)
    67b8:	85800815 	stw	r22,32(r16)
    67bc:	85400915 	stw	r21,36(r16)
    67c0:	85000a15 	stw	r20,40(r16)
    67c4:	84c00b15 	stw	r19,44(r16)
    67c8:	90800e15 	stw	r2,56(r18)
    67cc:	dfc00817 	ldw	ra,32(sp)
    67d0:	ddc00717 	ldw	r23,28(sp)
    67d4:	dd800617 	ldw	r22,24(sp)
    67d8:	dd400517 	ldw	r21,20(sp)
    67dc:	dd000417 	ldw	r20,16(sp)
    67e0:	dcc00317 	ldw	r19,12(sp)
    67e4:	dc800217 	ldw	r18,8(sp)
    67e8:	dc400117 	ldw	r17,4(sp)
    67ec:	dc000017 	ldw	r16,0(sp)
    67f0:	dec00904 	addi	sp,sp,36
    67f4:	f800283a 	ret

000067f8 <__fp_lock>:
    67f8:	0005883a 	mov	r2,zero
    67fc:	f800283a 	ret

00006800 <__sfmoreglue>:
    6800:	defffc04 	addi	sp,sp,-16
    6804:	dc400115 	stw	r17,4(sp)
    6808:	2c7fffc4 	addi	r17,r5,-1
    680c:	8c401a24 	muli	r17,r17,104
    6810:	dc800215 	stw	r18,8(sp)
    6814:	2825883a 	mov	r18,r5
    6818:	89401d04 	addi	r5,r17,116
    681c:	dc000015 	stw	r16,0(sp)
    6820:	dfc00315 	stw	ra,12(sp)
    6824:	0001cbc0 	call	1cbc <_malloc_r>
    6828:	1021883a 	mov	r16,r2
    682c:	10000726 	beq	r2,zero,684c <__sfmoreglue+0x4c>
    6830:	11000304 	addi	r4,r2,12
    6834:	10000015 	stw	zero,0(r2)
    6838:	14800115 	stw	r18,4(r2)
    683c:	11000215 	stw	r4,8(r2)
    6840:	89801a04 	addi	r6,r17,104
    6844:	000b883a 	mov	r5,zero
    6848:	0007a800 	call	7a80 <memset>
    684c:	8005883a 	mov	r2,r16
    6850:	dfc00317 	ldw	ra,12(sp)
    6854:	dc800217 	ldw	r18,8(sp)
    6858:	dc400117 	ldw	r17,4(sp)
    685c:	dc000017 	ldw	r16,0(sp)
    6860:	dec00404 	addi	sp,sp,16
    6864:	f800283a 	ret

00006868 <__sfp>:
    6868:	defffb04 	addi	sp,sp,-20
    686c:	dc000015 	stw	r16,0(sp)
    6870:	04000074 	movhi	r16,1
    6874:	8408f304 	addi	r16,r16,9164
    6878:	dcc00315 	stw	r19,12(sp)
    687c:	2027883a 	mov	r19,r4
    6880:	81000017 	ldw	r4,0(r16)
    6884:	dfc00415 	stw	ra,16(sp)
    6888:	dc800215 	stw	r18,8(sp)
    688c:	20800e17 	ldw	r2,56(r4)
    6890:	dc400115 	stw	r17,4(sp)
    6894:	1000021e 	bne	r2,zero,68a0 <__sfp+0x38>
    6898:	000665c0 	call	665c <__sinit.part.1>
    689c:	81000017 	ldw	r4,0(r16)
    68a0:	2480b804 	addi	r18,r4,736
    68a4:	047fffc4 	movi	r17,-1
    68a8:	91000117 	ldw	r4,4(r18)
    68ac:	94000217 	ldw	r16,8(r18)
    68b0:	213fffc4 	addi	r4,r4,-1
    68b4:	20000a16 	blt	r4,zero,68e0 <__sfp+0x78>
    68b8:	8080030f 	ldh	r2,12(r16)
    68bc:	10000c26 	beq	r2,zero,68f0 <__sfp+0x88>
    68c0:	80c01d04 	addi	r3,r16,116
    68c4:	00000206 	br	68d0 <__sfp+0x68>
    68c8:	18bfe60f 	ldh	r2,-104(r3)
    68cc:	10000826 	beq	r2,zero,68f0 <__sfp+0x88>
    68d0:	213fffc4 	addi	r4,r4,-1
    68d4:	1c3ffd04 	addi	r16,r3,-12
    68d8:	18c01a04 	addi	r3,r3,104
    68dc:	247ffa1e 	bne	r4,r17,68c8 <__alt_data_end+0xff0068c8>
    68e0:	90800017 	ldw	r2,0(r18)
    68e4:	10001d26 	beq	r2,zero,695c <__sfp+0xf4>
    68e8:	1025883a 	mov	r18,r2
    68ec:	003fee06 	br	68a8 <__alt_data_end+0xff0068a8>
    68f0:	00bfffc4 	movi	r2,-1
    68f4:	8080038d 	sth	r2,14(r16)
    68f8:	00800044 	movi	r2,1
    68fc:	8080030d 	sth	r2,12(r16)
    6900:	80001915 	stw	zero,100(r16)
    6904:	80000015 	stw	zero,0(r16)
    6908:	80000215 	stw	zero,8(r16)
    690c:	80000115 	stw	zero,4(r16)
    6910:	80000415 	stw	zero,16(r16)
    6914:	80000515 	stw	zero,20(r16)
    6918:	80000615 	stw	zero,24(r16)
    691c:	01800204 	movi	r6,8
    6920:	000b883a 	mov	r5,zero
    6924:	81001704 	addi	r4,r16,92
    6928:	0007a800 	call	7a80 <memset>
    692c:	8005883a 	mov	r2,r16
    6930:	80000c15 	stw	zero,48(r16)
    6934:	80000d15 	stw	zero,52(r16)
    6938:	80001115 	stw	zero,68(r16)
    693c:	80001215 	stw	zero,72(r16)
    6940:	dfc00417 	ldw	ra,16(sp)
    6944:	dcc00317 	ldw	r19,12(sp)
    6948:	dc800217 	ldw	r18,8(sp)
    694c:	dc400117 	ldw	r17,4(sp)
    6950:	dc000017 	ldw	r16,0(sp)
    6954:	dec00504 	addi	sp,sp,20
    6958:	f800283a 	ret
    695c:	01400104 	movi	r5,4
    6960:	9809883a 	mov	r4,r19
    6964:	00068000 	call	6800 <__sfmoreglue>
    6968:	90800015 	stw	r2,0(r18)
    696c:	103fde1e 	bne	r2,zero,68e8 <__alt_data_end+0xff0068e8>
    6970:	00800304 	movi	r2,12
    6974:	98800015 	stw	r2,0(r19)
    6978:	0005883a 	mov	r2,zero
    697c:	003ff006 	br	6940 <__alt_data_end+0xff006940>

00006980 <_cleanup>:
    6980:	00800074 	movhi	r2,1
    6984:	1088f304 	addi	r2,r2,9164
    6988:	11000017 	ldw	r4,0(r2)
    698c:	01400074 	movhi	r5,1
    6990:	296ad504 	addi	r5,r5,-21676
    6994:	000739c1 	jmpi	739c <_fwalk_reent>

00006998 <__sinit>:
    6998:	20800e17 	ldw	r2,56(r4)
    699c:	10000126 	beq	r2,zero,69a4 <__sinit+0xc>
    69a0:	f800283a 	ret
    69a4:	000665c1 	jmpi	665c <__sinit.part.1>

000069a8 <__sfp_lock_acquire>:
    69a8:	f800283a 	ret

000069ac <__sfp_lock_release>:
    69ac:	f800283a 	ret

000069b0 <__sinit_lock_acquire>:
    69b0:	f800283a 	ret

000069b4 <__sinit_lock_release>:
    69b4:	f800283a 	ret

000069b8 <__fp_lock_all>:
    69b8:	00800074 	movhi	r2,1
    69bc:	1088f404 	addi	r2,r2,9168
    69c0:	11000017 	ldw	r4,0(r2)
    69c4:	01400034 	movhi	r5,0
    69c8:	2959fe04 	addi	r5,r5,26616
    69cc:	00072d81 	jmpi	72d8 <_fwalk>

000069d0 <__fp_unlock_all>:
    69d0:	00800074 	movhi	r2,1
    69d4:	1088f404 	addi	r2,r2,9168
    69d8:	11000017 	ldw	r4,0(r2)
    69dc:	01400034 	movhi	r5,0
    69e0:	29599204 	addi	r5,r5,26184
    69e4:	00072d81 	jmpi	72d8 <_fwalk>

000069e8 <_malloc_trim_r>:
    69e8:	defffb04 	addi	sp,sp,-20
    69ec:	dcc00315 	stw	r19,12(sp)
    69f0:	04c00074 	movhi	r19,1
    69f4:	dc800215 	stw	r18,8(sp)
    69f8:	dc400115 	stw	r17,4(sp)
    69fc:	dc000015 	stw	r16,0(sp)
    6a00:	dfc00415 	stw	ra,16(sp)
    6a04:	2821883a 	mov	r16,r5
    6a08:	9cc24404 	addi	r19,r19,2320
    6a0c:	2025883a 	mov	r18,r4
    6a10:	000e9440 	call	e944 <__malloc_lock>
    6a14:	98800217 	ldw	r2,8(r19)
    6a18:	14400117 	ldw	r17,4(r2)
    6a1c:	00bfff04 	movi	r2,-4
    6a20:	88a2703a 	and	r17,r17,r2
    6a24:	8c21c83a 	sub	r16,r17,r16
    6a28:	8403fbc4 	addi	r16,r16,4079
    6a2c:	8020d33a 	srli	r16,r16,12
    6a30:	0083ffc4 	movi	r2,4095
    6a34:	843fffc4 	addi	r16,r16,-1
    6a38:	8020933a 	slli	r16,r16,12
    6a3c:	1400060e 	bge	r2,r16,6a58 <_malloc_trim_r+0x70>
    6a40:	000b883a 	mov	r5,zero
    6a44:	9009883a 	mov	r4,r18
    6a48:	00026080 	call	2608 <_sbrk_r>
    6a4c:	98c00217 	ldw	r3,8(r19)
    6a50:	1c47883a 	add	r3,r3,r17
    6a54:	10c00a26 	beq	r2,r3,6a80 <_malloc_trim_r+0x98>
    6a58:	9009883a 	mov	r4,r18
    6a5c:	000e9480 	call	e948 <__malloc_unlock>
    6a60:	0005883a 	mov	r2,zero
    6a64:	dfc00417 	ldw	ra,16(sp)
    6a68:	dcc00317 	ldw	r19,12(sp)
    6a6c:	dc800217 	ldw	r18,8(sp)
    6a70:	dc400117 	ldw	r17,4(sp)
    6a74:	dc000017 	ldw	r16,0(sp)
    6a78:	dec00504 	addi	sp,sp,20
    6a7c:	f800283a 	ret
    6a80:	040bc83a 	sub	r5,zero,r16
    6a84:	9009883a 	mov	r4,r18
    6a88:	00026080 	call	2608 <_sbrk_r>
    6a8c:	00ffffc4 	movi	r3,-1
    6a90:	10c00d26 	beq	r2,r3,6ac8 <_malloc_trim_r+0xe0>
    6a94:	00c00074 	movhi	r3,1
    6a98:	18cfd804 	addi	r3,r3,16224
    6a9c:	18800017 	ldw	r2,0(r3)
    6aa0:	99000217 	ldw	r4,8(r19)
    6aa4:	8c23c83a 	sub	r17,r17,r16
    6aa8:	8c400054 	ori	r17,r17,1
    6aac:	1421c83a 	sub	r16,r2,r16
    6ab0:	24400115 	stw	r17,4(r4)
    6ab4:	9009883a 	mov	r4,r18
    6ab8:	1c000015 	stw	r16,0(r3)
    6abc:	000e9480 	call	e948 <__malloc_unlock>
    6ac0:	00800044 	movi	r2,1
    6ac4:	003fe706 	br	6a64 <__alt_data_end+0xff006a64>
    6ac8:	000b883a 	mov	r5,zero
    6acc:	9009883a 	mov	r4,r18
    6ad0:	00026080 	call	2608 <_sbrk_r>
    6ad4:	99000217 	ldw	r4,8(r19)
    6ad8:	014003c4 	movi	r5,15
    6adc:	1107c83a 	sub	r3,r2,r4
    6ae0:	28ffdd0e 	bge	r5,r3,6a58 <__alt_data_end+0xff006a58>
    6ae4:	01400074 	movhi	r5,1
    6ae8:	2948f104 	addi	r5,r5,9156
    6aec:	29400017 	ldw	r5,0(r5)
    6af0:	18c00054 	ori	r3,r3,1
    6af4:	20c00115 	stw	r3,4(r4)
    6af8:	00c00074 	movhi	r3,1
    6afc:	1145c83a 	sub	r2,r2,r5
    6b00:	18cfd804 	addi	r3,r3,16224
    6b04:	18800015 	stw	r2,0(r3)
    6b08:	003fd306 	br	6a58 <__alt_data_end+0xff006a58>

00006b0c <_free_r>:
    6b0c:	28004126 	beq	r5,zero,6c14 <_free_r+0x108>
    6b10:	defffd04 	addi	sp,sp,-12
    6b14:	dc400115 	stw	r17,4(sp)
    6b18:	dc000015 	stw	r16,0(sp)
    6b1c:	2023883a 	mov	r17,r4
    6b20:	2821883a 	mov	r16,r5
    6b24:	dfc00215 	stw	ra,8(sp)
    6b28:	000e9440 	call	e944 <__malloc_lock>
    6b2c:	81ffff17 	ldw	r7,-4(r16)
    6b30:	00bfff84 	movi	r2,-2
    6b34:	01000074 	movhi	r4,1
    6b38:	81bffe04 	addi	r6,r16,-8
    6b3c:	3884703a 	and	r2,r7,r2
    6b40:	21024404 	addi	r4,r4,2320
    6b44:	308b883a 	add	r5,r6,r2
    6b48:	2a400117 	ldw	r9,4(r5)
    6b4c:	22000217 	ldw	r8,8(r4)
    6b50:	00ffff04 	movi	r3,-4
    6b54:	48c6703a 	and	r3,r9,r3
    6b58:	2a005726 	beq	r5,r8,6cb8 <_free_r+0x1ac>
    6b5c:	28c00115 	stw	r3,4(r5)
    6b60:	39c0004c 	andi	r7,r7,1
    6b64:	3800091e 	bne	r7,zero,6b8c <_free_r+0x80>
    6b68:	823ffe17 	ldw	r8,-8(r16)
    6b6c:	22400204 	addi	r9,r4,8
    6b70:	320dc83a 	sub	r6,r6,r8
    6b74:	31c00217 	ldw	r7,8(r6)
    6b78:	1205883a 	add	r2,r2,r8
    6b7c:	3a406526 	beq	r7,r9,6d14 <_free_r+0x208>
    6b80:	32000317 	ldw	r8,12(r6)
    6b84:	3a000315 	stw	r8,12(r7)
    6b88:	41c00215 	stw	r7,8(r8)
    6b8c:	28cf883a 	add	r7,r5,r3
    6b90:	39c00117 	ldw	r7,4(r7)
    6b94:	39c0004c 	andi	r7,r7,1
    6b98:	38003a26 	beq	r7,zero,6c84 <_free_r+0x178>
    6b9c:	10c00054 	ori	r3,r2,1
    6ba0:	30c00115 	stw	r3,4(r6)
    6ba4:	3087883a 	add	r3,r6,r2
    6ba8:	18800015 	stw	r2,0(r3)
    6bac:	00c07fc4 	movi	r3,511
    6bb0:	18801936 	bltu	r3,r2,6c18 <_free_r+0x10c>
    6bb4:	1004d0fa 	srli	r2,r2,3
    6bb8:	01c00044 	movi	r7,1
    6bbc:	21400117 	ldw	r5,4(r4)
    6bc0:	10c00044 	addi	r3,r2,1
    6bc4:	18c7883a 	add	r3,r3,r3
    6bc8:	1005d0ba 	srai	r2,r2,2
    6bcc:	18c7883a 	add	r3,r3,r3
    6bd0:	18c7883a 	add	r3,r3,r3
    6bd4:	1907883a 	add	r3,r3,r4
    6bd8:	3884983a 	sll	r2,r7,r2
    6bdc:	19c00017 	ldw	r7,0(r3)
    6be0:	1a3ffe04 	addi	r8,r3,-8
    6be4:	1144b03a 	or	r2,r2,r5
    6be8:	32000315 	stw	r8,12(r6)
    6bec:	31c00215 	stw	r7,8(r6)
    6bf0:	20800115 	stw	r2,4(r4)
    6bf4:	19800015 	stw	r6,0(r3)
    6bf8:	39800315 	stw	r6,12(r7)
    6bfc:	8809883a 	mov	r4,r17
    6c00:	dfc00217 	ldw	ra,8(sp)
    6c04:	dc400117 	ldw	r17,4(sp)
    6c08:	dc000017 	ldw	r16,0(sp)
    6c0c:	dec00304 	addi	sp,sp,12
    6c10:	000e9481 	jmpi	e948 <__malloc_unlock>
    6c14:	f800283a 	ret
    6c18:	100ad27a 	srli	r5,r2,9
    6c1c:	00c00104 	movi	r3,4
    6c20:	19404a36 	bltu	r3,r5,6d4c <_free_r+0x240>
    6c24:	100ad1ba 	srli	r5,r2,6
    6c28:	28c00e44 	addi	r3,r5,57
    6c2c:	18c7883a 	add	r3,r3,r3
    6c30:	29400e04 	addi	r5,r5,56
    6c34:	18c7883a 	add	r3,r3,r3
    6c38:	18c7883a 	add	r3,r3,r3
    6c3c:	1909883a 	add	r4,r3,r4
    6c40:	20c00017 	ldw	r3,0(r4)
    6c44:	01c00074 	movhi	r7,1
    6c48:	213ffe04 	addi	r4,r4,-8
    6c4c:	39c24404 	addi	r7,r7,2320
    6c50:	20c04426 	beq	r4,r3,6d64 <_free_r+0x258>
    6c54:	01ffff04 	movi	r7,-4
    6c58:	19400117 	ldw	r5,4(r3)
    6c5c:	29ca703a 	and	r5,r5,r7
    6c60:	1140022e 	bgeu	r2,r5,6c6c <_free_r+0x160>
    6c64:	18c00217 	ldw	r3,8(r3)
    6c68:	20fffb1e 	bne	r4,r3,6c58 <__alt_data_end+0xff006c58>
    6c6c:	19000317 	ldw	r4,12(r3)
    6c70:	31000315 	stw	r4,12(r6)
    6c74:	30c00215 	stw	r3,8(r6)
    6c78:	21800215 	stw	r6,8(r4)
    6c7c:	19800315 	stw	r6,12(r3)
    6c80:	003fde06 	br	6bfc <__alt_data_end+0xff006bfc>
    6c84:	29c00217 	ldw	r7,8(r5)
    6c88:	10c5883a 	add	r2,r2,r3
    6c8c:	00c00074 	movhi	r3,1
    6c90:	18c24604 	addi	r3,r3,2328
    6c94:	38c03b26 	beq	r7,r3,6d84 <_free_r+0x278>
    6c98:	2a000317 	ldw	r8,12(r5)
    6c9c:	11400054 	ori	r5,r2,1
    6ca0:	3087883a 	add	r3,r6,r2
    6ca4:	3a000315 	stw	r8,12(r7)
    6ca8:	41c00215 	stw	r7,8(r8)
    6cac:	31400115 	stw	r5,4(r6)
    6cb0:	18800015 	stw	r2,0(r3)
    6cb4:	003fbd06 	br	6bac <__alt_data_end+0xff006bac>
    6cb8:	39c0004c 	andi	r7,r7,1
    6cbc:	10c5883a 	add	r2,r2,r3
    6cc0:	3800071e 	bne	r7,zero,6ce0 <_free_r+0x1d4>
    6cc4:	81fffe17 	ldw	r7,-8(r16)
    6cc8:	31cdc83a 	sub	r6,r6,r7
    6ccc:	30c00317 	ldw	r3,12(r6)
    6cd0:	31400217 	ldw	r5,8(r6)
    6cd4:	11c5883a 	add	r2,r2,r7
    6cd8:	28c00315 	stw	r3,12(r5)
    6cdc:	19400215 	stw	r5,8(r3)
    6ce0:	10c00054 	ori	r3,r2,1
    6ce4:	30c00115 	stw	r3,4(r6)
    6ce8:	00c00074 	movhi	r3,1
    6cec:	18c8f204 	addi	r3,r3,9160
    6cf0:	18c00017 	ldw	r3,0(r3)
    6cf4:	21800215 	stw	r6,8(r4)
    6cf8:	10ffc036 	bltu	r2,r3,6bfc <__alt_data_end+0xff006bfc>
    6cfc:	00800074 	movhi	r2,1
    6d00:	108fca04 	addi	r2,r2,16168
    6d04:	11400017 	ldw	r5,0(r2)
    6d08:	8809883a 	mov	r4,r17
    6d0c:	00069e80 	call	69e8 <_malloc_trim_r>
    6d10:	003fba06 	br	6bfc <__alt_data_end+0xff006bfc>
    6d14:	28c9883a 	add	r4,r5,r3
    6d18:	21000117 	ldw	r4,4(r4)
    6d1c:	2100004c 	andi	r4,r4,1
    6d20:	2000391e 	bne	r4,zero,6e08 <_free_r+0x2fc>
    6d24:	29c00217 	ldw	r7,8(r5)
    6d28:	29000317 	ldw	r4,12(r5)
    6d2c:	1885883a 	add	r2,r3,r2
    6d30:	10c00054 	ori	r3,r2,1
    6d34:	39000315 	stw	r4,12(r7)
    6d38:	21c00215 	stw	r7,8(r4)
    6d3c:	30c00115 	stw	r3,4(r6)
    6d40:	308d883a 	add	r6,r6,r2
    6d44:	30800015 	stw	r2,0(r6)
    6d48:	003fac06 	br	6bfc <__alt_data_end+0xff006bfc>
    6d4c:	00c00504 	movi	r3,20
    6d50:	19401536 	bltu	r3,r5,6da8 <_free_r+0x29c>
    6d54:	28c01704 	addi	r3,r5,92
    6d58:	18c7883a 	add	r3,r3,r3
    6d5c:	294016c4 	addi	r5,r5,91
    6d60:	003fb406 	br	6c34 <__alt_data_end+0xff006c34>
    6d64:	280bd0ba 	srai	r5,r5,2
    6d68:	00c00044 	movi	r3,1
    6d6c:	38800117 	ldw	r2,4(r7)
    6d70:	194a983a 	sll	r5,r3,r5
    6d74:	2007883a 	mov	r3,r4
    6d78:	2884b03a 	or	r2,r5,r2
    6d7c:	38800115 	stw	r2,4(r7)
    6d80:	003fbb06 	br	6c70 <__alt_data_end+0xff006c70>
    6d84:	21800515 	stw	r6,20(r4)
    6d88:	21800415 	stw	r6,16(r4)
    6d8c:	10c00054 	ori	r3,r2,1
    6d90:	31c00315 	stw	r7,12(r6)
    6d94:	31c00215 	stw	r7,8(r6)
    6d98:	30c00115 	stw	r3,4(r6)
    6d9c:	308d883a 	add	r6,r6,r2
    6da0:	30800015 	stw	r2,0(r6)
    6da4:	003f9506 	br	6bfc <__alt_data_end+0xff006bfc>
    6da8:	00c01504 	movi	r3,84
    6dac:	19400536 	bltu	r3,r5,6dc4 <_free_r+0x2b8>
    6db0:	100ad33a 	srli	r5,r2,12
    6db4:	28c01bc4 	addi	r3,r5,111
    6db8:	18c7883a 	add	r3,r3,r3
    6dbc:	29401b84 	addi	r5,r5,110
    6dc0:	003f9c06 	br	6c34 <__alt_data_end+0xff006c34>
    6dc4:	00c05504 	movi	r3,340
    6dc8:	19400536 	bltu	r3,r5,6de0 <_free_r+0x2d4>
    6dcc:	100ad3fa 	srli	r5,r2,15
    6dd0:	28c01e04 	addi	r3,r5,120
    6dd4:	18c7883a 	add	r3,r3,r3
    6dd8:	29401dc4 	addi	r5,r5,119
    6ddc:	003f9506 	br	6c34 <__alt_data_end+0xff006c34>
    6de0:	00c15504 	movi	r3,1364
    6de4:	19400536 	bltu	r3,r5,6dfc <_free_r+0x2f0>
    6de8:	100ad4ba 	srli	r5,r2,18
    6dec:	28c01f44 	addi	r3,r5,125
    6df0:	18c7883a 	add	r3,r3,r3
    6df4:	29401f04 	addi	r5,r5,124
    6df8:	003f8e06 	br	6c34 <__alt_data_end+0xff006c34>
    6dfc:	00c03f84 	movi	r3,254
    6e00:	01401f84 	movi	r5,126
    6e04:	003f8b06 	br	6c34 <__alt_data_end+0xff006c34>
    6e08:	10c00054 	ori	r3,r2,1
    6e0c:	30c00115 	stw	r3,4(r6)
    6e10:	308d883a 	add	r6,r6,r2
    6e14:	30800015 	stw	r2,0(r6)
    6e18:	003f7806 	br	6bfc <__alt_data_end+0xff006bfc>

00006e1c <__sfvwrite_r>:
    6e1c:	30800217 	ldw	r2,8(r6)
    6e20:	10006726 	beq	r2,zero,6fc0 <__sfvwrite_r+0x1a4>
    6e24:	28c0030b 	ldhu	r3,12(r5)
    6e28:	defff404 	addi	sp,sp,-48
    6e2c:	dd400715 	stw	r21,28(sp)
    6e30:	dd000615 	stw	r20,24(sp)
    6e34:	dc000215 	stw	r16,8(sp)
    6e38:	dfc00b15 	stw	ra,44(sp)
    6e3c:	df000a15 	stw	fp,40(sp)
    6e40:	ddc00915 	stw	r23,36(sp)
    6e44:	dd800815 	stw	r22,32(sp)
    6e48:	dcc00515 	stw	r19,20(sp)
    6e4c:	dc800415 	stw	r18,16(sp)
    6e50:	dc400315 	stw	r17,12(sp)
    6e54:	1880020c 	andi	r2,r3,8
    6e58:	2821883a 	mov	r16,r5
    6e5c:	202b883a 	mov	r21,r4
    6e60:	3029883a 	mov	r20,r6
    6e64:	10002726 	beq	r2,zero,6f04 <__sfvwrite_r+0xe8>
    6e68:	28800417 	ldw	r2,16(r5)
    6e6c:	10002526 	beq	r2,zero,6f04 <__sfvwrite_r+0xe8>
    6e70:	1880008c 	andi	r2,r3,2
    6e74:	a4400017 	ldw	r17,0(r20)
    6e78:	10002a26 	beq	r2,zero,6f24 <__sfvwrite_r+0x108>
    6e7c:	05a00034 	movhi	r22,32768
    6e80:	0027883a 	mov	r19,zero
    6e84:	0025883a 	mov	r18,zero
    6e88:	b5bf0004 	addi	r22,r22,-1024
    6e8c:	980d883a 	mov	r6,r19
    6e90:	a809883a 	mov	r4,r21
    6e94:	90004626 	beq	r18,zero,6fb0 <__sfvwrite_r+0x194>
    6e98:	900f883a 	mov	r7,r18
    6e9c:	b480022e 	bgeu	r22,r18,6ea8 <__sfvwrite_r+0x8c>
    6ea0:	01e00034 	movhi	r7,32768
    6ea4:	39ff0004 	addi	r7,r7,-1024
    6ea8:	80800917 	ldw	r2,36(r16)
    6eac:	81400717 	ldw	r5,28(r16)
    6eb0:	103ee83a 	callr	r2
    6eb4:	0080570e 	bge	zero,r2,7014 <__sfvwrite_r+0x1f8>
    6eb8:	a0c00217 	ldw	r3,8(r20)
    6ebc:	98a7883a 	add	r19,r19,r2
    6ec0:	90a5c83a 	sub	r18,r18,r2
    6ec4:	1885c83a 	sub	r2,r3,r2
    6ec8:	a0800215 	stw	r2,8(r20)
    6ecc:	103fef1e 	bne	r2,zero,6e8c <__alt_data_end+0xff006e8c>
    6ed0:	0005883a 	mov	r2,zero
    6ed4:	dfc00b17 	ldw	ra,44(sp)
    6ed8:	df000a17 	ldw	fp,40(sp)
    6edc:	ddc00917 	ldw	r23,36(sp)
    6ee0:	dd800817 	ldw	r22,32(sp)
    6ee4:	dd400717 	ldw	r21,28(sp)
    6ee8:	dd000617 	ldw	r20,24(sp)
    6eec:	dcc00517 	ldw	r19,20(sp)
    6ef0:	dc800417 	ldw	r18,16(sp)
    6ef4:	dc400317 	ldw	r17,12(sp)
    6ef8:	dc000217 	ldw	r16,8(sp)
    6efc:	dec00c04 	addi	sp,sp,48
    6f00:	f800283a 	ret
    6f04:	800b883a 	mov	r5,r16
    6f08:	a809883a 	mov	r4,r21
    6f0c:	00049c40 	call	49c4 <__swsetup_r>
    6f10:	1000eb1e 	bne	r2,zero,72c0 <__sfvwrite_r+0x4a4>
    6f14:	80c0030b 	ldhu	r3,12(r16)
    6f18:	a4400017 	ldw	r17,0(r20)
    6f1c:	1880008c 	andi	r2,r3,2
    6f20:	103fd61e 	bne	r2,zero,6e7c <__alt_data_end+0xff006e7c>
    6f24:	1880004c 	andi	r2,r3,1
    6f28:	10003f1e 	bne	r2,zero,7028 <__sfvwrite_r+0x20c>
    6f2c:	0039883a 	mov	fp,zero
    6f30:	0025883a 	mov	r18,zero
    6f34:	90001a26 	beq	r18,zero,6fa0 <__sfvwrite_r+0x184>
    6f38:	1880800c 	andi	r2,r3,512
    6f3c:	84c00217 	ldw	r19,8(r16)
    6f40:	10002126 	beq	r2,zero,6fc8 <__sfvwrite_r+0x1ac>
    6f44:	982f883a 	mov	r23,r19
    6f48:	94c09336 	bltu	r18,r19,7198 <__sfvwrite_r+0x37c>
    6f4c:	1881200c 	andi	r2,r3,1152
    6f50:	10009e1e 	bne	r2,zero,71cc <__sfvwrite_r+0x3b0>
    6f54:	81000017 	ldw	r4,0(r16)
    6f58:	b80d883a 	mov	r6,r23
    6f5c:	e00b883a 	mov	r5,fp
    6f60:	00079240 	call	7924 <memmove>
    6f64:	80c00217 	ldw	r3,8(r16)
    6f68:	81000017 	ldw	r4,0(r16)
    6f6c:	9005883a 	mov	r2,r18
    6f70:	1ce7c83a 	sub	r19,r3,r19
    6f74:	25cf883a 	add	r7,r4,r23
    6f78:	84c00215 	stw	r19,8(r16)
    6f7c:	81c00015 	stw	r7,0(r16)
    6f80:	a0c00217 	ldw	r3,8(r20)
    6f84:	e0b9883a 	add	fp,fp,r2
    6f88:	90a5c83a 	sub	r18,r18,r2
    6f8c:	18a7c83a 	sub	r19,r3,r2
    6f90:	a4c00215 	stw	r19,8(r20)
    6f94:	983fce26 	beq	r19,zero,6ed0 <__alt_data_end+0xff006ed0>
    6f98:	80c0030b 	ldhu	r3,12(r16)
    6f9c:	903fe61e 	bne	r18,zero,6f38 <__alt_data_end+0xff006f38>
    6fa0:	8f000017 	ldw	fp,0(r17)
    6fa4:	8c800117 	ldw	r18,4(r17)
    6fa8:	8c400204 	addi	r17,r17,8
    6fac:	003fe106 	br	6f34 <__alt_data_end+0xff006f34>
    6fb0:	8cc00017 	ldw	r19,0(r17)
    6fb4:	8c800117 	ldw	r18,4(r17)
    6fb8:	8c400204 	addi	r17,r17,8
    6fbc:	003fb306 	br	6e8c <__alt_data_end+0xff006e8c>
    6fc0:	0005883a 	mov	r2,zero
    6fc4:	f800283a 	ret
    6fc8:	81000017 	ldw	r4,0(r16)
    6fcc:	80800417 	ldw	r2,16(r16)
    6fd0:	11005736 	bltu	r2,r4,7130 <__sfvwrite_r+0x314>
    6fd4:	85c00517 	ldw	r23,20(r16)
    6fd8:	95c05536 	bltu	r18,r23,7130 <__sfvwrite_r+0x314>
    6fdc:	00a00034 	movhi	r2,32768
    6fe0:	10bfffc4 	addi	r2,r2,-1
    6fe4:	9009883a 	mov	r4,r18
    6fe8:	1480012e 	bgeu	r2,r18,6ff0 <__sfvwrite_r+0x1d4>
    6fec:	1009883a 	mov	r4,r2
    6ff0:	b80b883a 	mov	r5,r23
    6ff4:	000bdc00 	call	bdc0 <__divsi3>
    6ff8:	15cf383a 	mul	r7,r2,r23
    6ffc:	81400717 	ldw	r5,28(r16)
    7000:	80800917 	ldw	r2,36(r16)
    7004:	e00d883a 	mov	r6,fp
    7008:	a809883a 	mov	r4,r21
    700c:	103ee83a 	callr	r2
    7010:	00bfdb16 	blt	zero,r2,6f80 <__alt_data_end+0xff006f80>
    7014:	8080030b 	ldhu	r2,12(r16)
    7018:	10801014 	ori	r2,r2,64
    701c:	8080030d 	sth	r2,12(r16)
    7020:	00bfffc4 	movi	r2,-1
    7024:	003fab06 	br	6ed4 <__alt_data_end+0xff006ed4>
    7028:	0027883a 	mov	r19,zero
    702c:	0011883a 	mov	r8,zero
    7030:	0039883a 	mov	fp,zero
    7034:	0025883a 	mov	r18,zero
    7038:	90001f26 	beq	r18,zero,70b8 <__sfvwrite_r+0x29c>
    703c:	40005a26 	beq	r8,zero,71a8 <__sfvwrite_r+0x38c>
    7040:	982d883a 	mov	r22,r19
    7044:	94c0012e 	bgeu	r18,r19,704c <__sfvwrite_r+0x230>
    7048:	902d883a 	mov	r22,r18
    704c:	81000017 	ldw	r4,0(r16)
    7050:	80800417 	ldw	r2,16(r16)
    7054:	b02f883a 	mov	r23,r22
    7058:	81c00517 	ldw	r7,20(r16)
    705c:	1100032e 	bgeu	r2,r4,706c <__sfvwrite_r+0x250>
    7060:	80c00217 	ldw	r3,8(r16)
    7064:	38c7883a 	add	r3,r7,r3
    7068:	1d801816 	blt	r3,r22,70cc <__sfvwrite_r+0x2b0>
    706c:	b1c03e16 	blt	r22,r7,7168 <__sfvwrite_r+0x34c>
    7070:	80800917 	ldw	r2,36(r16)
    7074:	81400717 	ldw	r5,28(r16)
    7078:	e00d883a 	mov	r6,fp
    707c:	da000115 	stw	r8,4(sp)
    7080:	a809883a 	mov	r4,r21
    7084:	103ee83a 	callr	r2
    7088:	102f883a 	mov	r23,r2
    708c:	da000117 	ldw	r8,4(sp)
    7090:	00bfe00e 	bge	zero,r2,7014 <__alt_data_end+0xff007014>
    7094:	9de7c83a 	sub	r19,r19,r23
    7098:	98001f26 	beq	r19,zero,7118 <__sfvwrite_r+0x2fc>
    709c:	a0800217 	ldw	r2,8(r20)
    70a0:	e5f9883a 	add	fp,fp,r23
    70a4:	95e5c83a 	sub	r18,r18,r23
    70a8:	15efc83a 	sub	r23,r2,r23
    70ac:	a5c00215 	stw	r23,8(r20)
    70b0:	b83f8726 	beq	r23,zero,6ed0 <__alt_data_end+0xff006ed0>
    70b4:	903fe11e 	bne	r18,zero,703c <__alt_data_end+0xff00703c>
    70b8:	8f000017 	ldw	fp,0(r17)
    70bc:	8c800117 	ldw	r18,4(r17)
    70c0:	0011883a 	mov	r8,zero
    70c4:	8c400204 	addi	r17,r17,8
    70c8:	003fdb06 	br	7038 <__alt_data_end+0xff007038>
    70cc:	180d883a 	mov	r6,r3
    70d0:	e00b883a 	mov	r5,fp
    70d4:	da000115 	stw	r8,4(sp)
    70d8:	d8c00015 	stw	r3,0(sp)
    70dc:	00079240 	call	7924 <memmove>
    70e0:	d8c00017 	ldw	r3,0(sp)
    70e4:	80800017 	ldw	r2,0(r16)
    70e8:	800b883a 	mov	r5,r16
    70ec:	a809883a 	mov	r4,r21
    70f0:	10c5883a 	add	r2,r2,r3
    70f4:	80800015 	stw	r2,0(r16)
    70f8:	d8c00015 	stw	r3,0(sp)
    70fc:	00065bc0 	call	65bc <_fflush_r>
    7100:	d8c00017 	ldw	r3,0(sp)
    7104:	da000117 	ldw	r8,4(sp)
    7108:	103fc21e 	bne	r2,zero,7014 <__alt_data_end+0xff007014>
    710c:	182f883a 	mov	r23,r3
    7110:	9de7c83a 	sub	r19,r19,r23
    7114:	983fe11e 	bne	r19,zero,709c <__alt_data_end+0xff00709c>
    7118:	800b883a 	mov	r5,r16
    711c:	a809883a 	mov	r4,r21
    7120:	00065bc0 	call	65bc <_fflush_r>
    7124:	103fbb1e 	bne	r2,zero,7014 <__alt_data_end+0xff007014>
    7128:	0011883a 	mov	r8,zero
    712c:	003fdb06 	br	709c <__alt_data_end+0xff00709c>
    7130:	94c0012e 	bgeu	r18,r19,7138 <__sfvwrite_r+0x31c>
    7134:	9027883a 	mov	r19,r18
    7138:	980d883a 	mov	r6,r19
    713c:	e00b883a 	mov	r5,fp
    7140:	00079240 	call	7924 <memmove>
    7144:	80800217 	ldw	r2,8(r16)
    7148:	80c00017 	ldw	r3,0(r16)
    714c:	14c5c83a 	sub	r2,r2,r19
    7150:	1cc7883a 	add	r3,r3,r19
    7154:	80800215 	stw	r2,8(r16)
    7158:	80c00015 	stw	r3,0(r16)
    715c:	10004326 	beq	r2,zero,726c <__sfvwrite_r+0x450>
    7160:	9805883a 	mov	r2,r19
    7164:	003f8606 	br	6f80 <__alt_data_end+0xff006f80>
    7168:	b00d883a 	mov	r6,r22
    716c:	e00b883a 	mov	r5,fp
    7170:	da000115 	stw	r8,4(sp)
    7174:	00079240 	call	7924 <memmove>
    7178:	80800217 	ldw	r2,8(r16)
    717c:	80c00017 	ldw	r3,0(r16)
    7180:	da000117 	ldw	r8,4(sp)
    7184:	1585c83a 	sub	r2,r2,r22
    7188:	1dad883a 	add	r22,r3,r22
    718c:	80800215 	stw	r2,8(r16)
    7190:	85800015 	stw	r22,0(r16)
    7194:	003fbf06 	br	7094 <__alt_data_end+0xff007094>
    7198:	81000017 	ldw	r4,0(r16)
    719c:	9027883a 	mov	r19,r18
    71a0:	902f883a 	mov	r23,r18
    71a4:	003f6c06 	br	6f58 <__alt_data_end+0xff006f58>
    71a8:	900d883a 	mov	r6,r18
    71ac:	01400284 	movi	r5,10
    71b0:	e009883a 	mov	r4,fp
    71b4:	00076f80 	call	76f8 <memchr>
    71b8:	10003e26 	beq	r2,zero,72b4 <__sfvwrite_r+0x498>
    71bc:	10800044 	addi	r2,r2,1
    71c0:	1727c83a 	sub	r19,r2,fp
    71c4:	02000044 	movi	r8,1
    71c8:	003f9d06 	br	7040 <__alt_data_end+0xff007040>
    71cc:	80800517 	ldw	r2,20(r16)
    71d0:	81400417 	ldw	r5,16(r16)
    71d4:	81c00017 	ldw	r7,0(r16)
    71d8:	10a7883a 	add	r19,r2,r2
    71dc:	9885883a 	add	r2,r19,r2
    71e0:	1026d7fa 	srli	r19,r2,31
    71e4:	396dc83a 	sub	r22,r7,r5
    71e8:	b1000044 	addi	r4,r22,1
    71ec:	9885883a 	add	r2,r19,r2
    71f0:	1027d07a 	srai	r19,r2,1
    71f4:	2485883a 	add	r2,r4,r18
    71f8:	980d883a 	mov	r6,r19
    71fc:	9880022e 	bgeu	r19,r2,7208 <__sfvwrite_r+0x3ec>
    7200:	1027883a 	mov	r19,r2
    7204:	100d883a 	mov	r6,r2
    7208:	18c1000c 	andi	r3,r3,1024
    720c:	18001c26 	beq	r3,zero,7280 <__sfvwrite_r+0x464>
    7210:	300b883a 	mov	r5,r6
    7214:	a809883a 	mov	r4,r21
    7218:	0001cbc0 	call	1cbc <_malloc_r>
    721c:	102f883a 	mov	r23,r2
    7220:	10002926 	beq	r2,zero,72c8 <__sfvwrite_r+0x4ac>
    7224:	81400417 	ldw	r5,16(r16)
    7228:	b00d883a 	mov	r6,r22
    722c:	1009883a 	mov	r4,r2
    7230:	00077dc0 	call	77dc <memcpy>
    7234:	8080030b 	ldhu	r2,12(r16)
    7238:	00fedfc4 	movi	r3,-1153
    723c:	10c4703a 	and	r2,r2,r3
    7240:	10802014 	ori	r2,r2,128
    7244:	8080030d 	sth	r2,12(r16)
    7248:	bd89883a 	add	r4,r23,r22
    724c:	9d8fc83a 	sub	r7,r19,r22
    7250:	85c00415 	stw	r23,16(r16)
    7254:	84c00515 	stw	r19,20(r16)
    7258:	81000015 	stw	r4,0(r16)
    725c:	9027883a 	mov	r19,r18
    7260:	81c00215 	stw	r7,8(r16)
    7264:	902f883a 	mov	r23,r18
    7268:	003f3b06 	br	6f58 <__alt_data_end+0xff006f58>
    726c:	800b883a 	mov	r5,r16
    7270:	a809883a 	mov	r4,r21
    7274:	00065bc0 	call	65bc <_fflush_r>
    7278:	103fb926 	beq	r2,zero,7160 <__alt_data_end+0xff007160>
    727c:	003f6506 	br	7014 <__alt_data_end+0xff007014>
    7280:	a809883a 	mov	r4,r21
    7284:	0008ba40 	call	8ba4 <_realloc_r>
    7288:	102f883a 	mov	r23,r2
    728c:	103fee1e 	bne	r2,zero,7248 <__alt_data_end+0xff007248>
    7290:	81400417 	ldw	r5,16(r16)
    7294:	a809883a 	mov	r4,r21
    7298:	0006b0c0 	call	6b0c <_free_r>
    729c:	8080030b 	ldhu	r2,12(r16)
    72a0:	00ffdfc4 	movi	r3,-129
    72a4:	1884703a 	and	r2,r3,r2
    72a8:	00c00304 	movi	r3,12
    72ac:	a8c00015 	stw	r3,0(r21)
    72b0:	003f5906 	br	7018 <__alt_data_end+0xff007018>
    72b4:	94c00044 	addi	r19,r18,1
    72b8:	02000044 	movi	r8,1
    72bc:	003f6006 	br	7040 <__alt_data_end+0xff007040>
    72c0:	00bfffc4 	movi	r2,-1
    72c4:	003f0306 	br	6ed4 <__alt_data_end+0xff006ed4>
    72c8:	00800304 	movi	r2,12
    72cc:	a8800015 	stw	r2,0(r21)
    72d0:	8080030b 	ldhu	r2,12(r16)
    72d4:	003f5006 	br	7018 <__alt_data_end+0xff007018>

000072d8 <_fwalk>:
    72d8:	defff704 	addi	sp,sp,-36
    72dc:	dd000415 	stw	r20,16(sp)
    72e0:	dfc00815 	stw	ra,32(sp)
    72e4:	ddc00715 	stw	r23,28(sp)
    72e8:	dd800615 	stw	r22,24(sp)
    72ec:	dd400515 	stw	r21,20(sp)
    72f0:	dcc00315 	stw	r19,12(sp)
    72f4:	dc800215 	stw	r18,8(sp)
    72f8:	dc400115 	stw	r17,4(sp)
    72fc:	dc000015 	stw	r16,0(sp)
    7300:	2500b804 	addi	r20,r4,736
    7304:	a0002326 	beq	r20,zero,7394 <_fwalk+0xbc>
    7308:	282b883a 	mov	r21,r5
    730c:	002f883a 	mov	r23,zero
    7310:	05800044 	movi	r22,1
    7314:	04ffffc4 	movi	r19,-1
    7318:	a4400117 	ldw	r17,4(r20)
    731c:	a4800217 	ldw	r18,8(r20)
    7320:	8c7fffc4 	addi	r17,r17,-1
    7324:	88000d16 	blt	r17,zero,735c <_fwalk+0x84>
    7328:	94000304 	addi	r16,r18,12
    732c:	94800384 	addi	r18,r18,14
    7330:	8080000b 	ldhu	r2,0(r16)
    7334:	8c7fffc4 	addi	r17,r17,-1
    7338:	813ffd04 	addi	r4,r16,-12
    733c:	b080042e 	bgeu	r22,r2,7350 <_fwalk+0x78>
    7340:	9080000f 	ldh	r2,0(r18)
    7344:	14c00226 	beq	r2,r19,7350 <_fwalk+0x78>
    7348:	a83ee83a 	callr	r21
    734c:	b8aeb03a 	or	r23,r23,r2
    7350:	84001a04 	addi	r16,r16,104
    7354:	94801a04 	addi	r18,r18,104
    7358:	8cfff51e 	bne	r17,r19,7330 <__alt_data_end+0xff007330>
    735c:	a5000017 	ldw	r20,0(r20)
    7360:	a03fed1e 	bne	r20,zero,7318 <__alt_data_end+0xff007318>
    7364:	b805883a 	mov	r2,r23
    7368:	dfc00817 	ldw	ra,32(sp)
    736c:	ddc00717 	ldw	r23,28(sp)
    7370:	dd800617 	ldw	r22,24(sp)
    7374:	dd400517 	ldw	r21,20(sp)
    7378:	dd000417 	ldw	r20,16(sp)
    737c:	dcc00317 	ldw	r19,12(sp)
    7380:	dc800217 	ldw	r18,8(sp)
    7384:	dc400117 	ldw	r17,4(sp)
    7388:	dc000017 	ldw	r16,0(sp)
    738c:	dec00904 	addi	sp,sp,36
    7390:	f800283a 	ret
    7394:	002f883a 	mov	r23,zero
    7398:	003ff206 	br	7364 <__alt_data_end+0xff007364>

0000739c <_fwalk_reent>:
    739c:	defff704 	addi	sp,sp,-36
    73a0:	dd000415 	stw	r20,16(sp)
    73a4:	dfc00815 	stw	ra,32(sp)
    73a8:	ddc00715 	stw	r23,28(sp)
    73ac:	dd800615 	stw	r22,24(sp)
    73b0:	dd400515 	stw	r21,20(sp)
    73b4:	dcc00315 	stw	r19,12(sp)
    73b8:	dc800215 	stw	r18,8(sp)
    73bc:	dc400115 	stw	r17,4(sp)
    73c0:	dc000015 	stw	r16,0(sp)
    73c4:	2500b804 	addi	r20,r4,736
    73c8:	a0002326 	beq	r20,zero,7458 <_fwalk_reent+0xbc>
    73cc:	282b883a 	mov	r21,r5
    73d0:	2027883a 	mov	r19,r4
    73d4:	002f883a 	mov	r23,zero
    73d8:	05800044 	movi	r22,1
    73dc:	04bfffc4 	movi	r18,-1
    73e0:	a4400117 	ldw	r17,4(r20)
    73e4:	a4000217 	ldw	r16,8(r20)
    73e8:	8c7fffc4 	addi	r17,r17,-1
    73ec:	88000c16 	blt	r17,zero,7420 <_fwalk_reent+0x84>
    73f0:	84000304 	addi	r16,r16,12
    73f4:	8080000b 	ldhu	r2,0(r16)
    73f8:	8c7fffc4 	addi	r17,r17,-1
    73fc:	817ffd04 	addi	r5,r16,-12
    7400:	b080052e 	bgeu	r22,r2,7418 <_fwalk_reent+0x7c>
    7404:	8080008f 	ldh	r2,2(r16)
    7408:	9809883a 	mov	r4,r19
    740c:	14800226 	beq	r2,r18,7418 <_fwalk_reent+0x7c>
    7410:	a83ee83a 	callr	r21
    7414:	b8aeb03a 	or	r23,r23,r2
    7418:	84001a04 	addi	r16,r16,104
    741c:	8cbff51e 	bne	r17,r18,73f4 <__alt_data_end+0xff0073f4>
    7420:	a5000017 	ldw	r20,0(r20)
    7424:	a03fee1e 	bne	r20,zero,73e0 <__alt_data_end+0xff0073e0>
    7428:	b805883a 	mov	r2,r23
    742c:	dfc00817 	ldw	ra,32(sp)
    7430:	ddc00717 	ldw	r23,28(sp)
    7434:	dd800617 	ldw	r22,24(sp)
    7438:	dd400517 	ldw	r21,20(sp)
    743c:	dd000417 	ldw	r20,16(sp)
    7440:	dcc00317 	ldw	r19,12(sp)
    7444:	dc800217 	ldw	r18,8(sp)
    7448:	dc400117 	ldw	r17,4(sp)
    744c:	dc000017 	ldw	r16,0(sp)
    7450:	dec00904 	addi	sp,sp,36
    7454:	f800283a 	ret
    7458:	002f883a 	mov	r23,zero
    745c:	003ff206 	br	7428 <__alt_data_end+0xff007428>

00007460 <_setlocale_r>:
    7460:	30001b26 	beq	r6,zero,74d0 <_setlocale_r+0x70>
    7464:	01400074 	movhi	r5,1
    7468:	defffe04 	addi	sp,sp,-8
    746c:	2941a904 	addi	r5,r5,1700
    7470:	3009883a 	mov	r4,r6
    7474:	dc000015 	stw	r16,0(sp)
    7478:	dfc00115 	stw	ra,4(sp)
    747c:	3021883a 	mov	r16,r6
    7480:	00092b80 	call	92b8 <strcmp>
    7484:	1000061e 	bne	r2,zero,74a0 <_setlocale_r+0x40>
    7488:	00800074 	movhi	r2,1
    748c:	1081a804 	addi	r2,r2,1696
    7490:	dfc00117 	ldw	ra,4(sp)
    7494:	dc000017 	ldw	r16,0(sp)
    7498:	dec00204 	addi	sp,sp,8
    749c:	f800283a 	ret
    74a0:	01400074 	movhi	r5,1
    74a4:	2941a804 	addi	r5,r5,1696
    74a8:	8009883a 	mov	r4,r16
    74ac:	00092b80 	call	92b8 <strcmp>
    74b0:	103ff526 	beq	r2,zero,7488 <__alt_data_end+0xff007488>
    74b4:	01400074 	movhi	r5,1
    74b8:	29419304 	addi	r5,r5,1612
    74bc:	8009883a 	mov	r4,r16
    74c0:	00092b80 	call	92b8 <strcmp>
    74c4:	103ff026 	beq	r2,zero,7488 <__alt_data_end+0xff007488>
    74c8:	0005883a 	mov	r2,zero
    74cc:	003ff006 	br	7490 <__alt_data_end+0xff007490>
    74d0:	00800074 	movhi	r2,1
    74d4:	1081a804 	addi	r2,r2,1696
    74d8:	f800283a 	ret

000074dc <__locale_charset>:
    74dc:	00800074 	movhi	r2,1
    74e0:	10845704 	addi	r2,r2,4444
    74e4:	f800283a 	ret

000074e8 <__locale_mb_cur_max>:
    74e8:	00800074 	movhi	r2,1
    74ec:	1088f504 	addi	r2,r2,9172
    74f0:	10800017 	ldw	r2,0(r2)
    74f4:	f800283a 	ret

000074f8 <__locale_msgcharset>:
    74f8:	00800074 	movhi	r2,1
    74fc:	10844f04 	addi	r2,r2,4412
    7500:	f800283a 	ret

00007504 <__locale_cjk_lang>:
    7504:	0005883a 	mov	r2,zero
    7508:	f800283a 	ret

0000750c <_localeconv_r>:
    750c:	00800074 	movhi	r2,1
    7510:	10845f04 	addi	r2,r2,4476
    7514:	f800283a 	ret

00007518 <setlocale>:
    7518:	00800074 	movhi	r2,1
    751c:	1088f404 	addi	r2,r2,9168
    7520:	280d883a 	mov	r6,r5
    7524:	200b883a 	mov	r5,r4
    7528:	11000017 	ldw	r4,0(r2)
    752c:	00074601 	jmpi	7460 <_setlocale_r>

00007530 <localeconv>:
    7530:	00800074 	movhi	r2,1
    7534:	10845f04 	addi	r2,r2,4476
    7538:	f800283a 	ret

0000753c <__smakebuf_r>:
    753c:	2880030b 	ldhu	r2,12(r5)
    7540:	10c0008c 	andi	r3,r2,2
    7544:	1800411e 	bne	r3,zero,764c <__smakebuf_r+0x110>
    7548:	deffec04 	addi	sp,sp,-80
    754c:	dc000f15 	stw	r16,60(sp)
    7550:	2821883a 	mov	r16,r5
    7554:	2940038f 	ldh	r5,14(r5)
    7558:	dc401015 	stw	r17,64(sp)
    755c:	dfc01315 	stw	ra,76(sp)
    7560:	dcc01215 	stw	r19,72(sp)
    7564:	dc801115 	stw	r18,68(sp)
    7568:	2023883a 	mov	r17,r4
    756c:	28001c16 	blt	r5,zero,75e0 <__smakebuf_r+0xa4>
    7570:	d80d883a 	mov	r6,sp
    7574:	000ae600 	call	ae60 <_fstat_r>
    7578:	10001816 	blt	r2,zero,75dc <__smakebuf_r+0xa0>
    757c:	d8800117 	ldw	r2,4(sp)
    7580:	00e00014 	movui	r3,32768
    7584:	10bc000c 	andi	r2,r2,61440
    7588:	14c80020 	cmpeqi	r19,r2,8192
    758c:	10c03726 	beq	r2,r3,766c <__smakebuf_r+0x130>
    7590:	80c0030b 	ldhu	r3,12(r16)
    7594:	18c20014 	ori	r3,r3,2048
    7598:	80c0030d 	sth	r3,12(r16)
    759c:	00c80004 	movi	r3,8192
    75a0:	10c0521e 	bne	r2,r3,76ec <__smakebuf_r+0x1b0>
    75a4:	8140038f 	ldh	r5,14(r16)
    75a8:	8809883a 	mov	r4,r17
    75ac:	000aebc0 	call	aebc <_isatty_r>
    75b0:	10004c26 	beq	r2,zero,76e4 <__smakebuf_r+0x1a8>
    75b4:	8080030b 	ldhu	r2,12(r16)
    75b8:	80c010c4 	addi	r3,r16,67
    75bc:	80c00015 	stw	r3,0(r16)
    75c0:	10800054 	ori	r2,r2,1
    75c4:	8080030d 	sth	r2,12(r16)
    75c8:	00800044 	movi	r2,1
    75cc:	80c00415 	stw	r3,16(r16)
    75d0:	80800515 	stw	r2,20(r16)
    75d4:	04810004 	movi	r18,1024
    75d8:	00000706 	br	75f8 <__smakebuf_r+0xbc>
    75dc:	8080030b 	ldhu	r2,12(r16)
    75e0:	10c0200c 	andi	r3,r2,128
    75e4:	18001f1e 	bne	r3,zero,7664 <__smakebuf_r+0x128>
    75e8:	04810004 	movi	r18,1024
    75ec:	10820014 	ori	r2,r2,2048
    75f0:	8080030d 	sth	r2,12(r16)
    75f4:	0027883a 	mov	r19,zero
    75f8:	900b883a 	mov	r5,r18
    75fc:	8809883a 	mov	r4,r17
    7600:	0001cbc0 	call	1cbc <_malloc_r>
    7604:	10002c26 	beq	r2,zero,76b8 <__smakebuf_r+0x17c>
    7608:	80c0030b 	ldhu	r3,12(r16)
    760c:	01000034 	movhi	r4,0
    7610:	21199404 	addi	r4,r4,26192
    7614:	89000f15 	stw	r4,60(r17)
    7618:	18c02014 	ori	r3,r3,128
    761c:	80c0030d 	sth	r3,12(r16)
    7620:	80800015 	stw	r2,0(r16)
    7624:	80800415 	stw	r2,16(r16)
    7628:	84800515 	stw	r18,20(r16)
    762c:	98001a1e 	bne	r19,zero,7698 <__smakebuf_r+0x15c>
    7630:	dfc01317 	ldw	ra,76(sp)
    7634:	dcc01217 	ldw	r19,72(sp)
    7638:	dc801117 	ldw	r18,68(sp)
    763c:	dc401017 	ldw	r17,64(sp)
    7640:	dc000f17 	ldw	r16,60(sp)
    7644:	dec01404 	addi	sp,sp,80
    7648:	f800283a 	ret
    764c:	288010c4 	addi	r2,r5,67
    7650:	28800015 	stw	r2,0(r5)
    7654:	28800415 	stw	r2,16(r5)
    7658:	00800044 	movi	r2,1
    765c:	28800515 	stw	r2,20(r5)
    7660:	f800283a 	ret
    7664:	04801004 	movi	r18,64
    7668:	003fe006 	br	75ec <__alt_data_end+0xff0075ec>
    766c:	81000a17 	ldw	r4,40(r16)
    7670:	00c00074 	movhi	r3,1
    7674:	18e49504 	addi	r3,r3,-28076
    7678:	20ffc51e 	bne	r4,r3,7590 <__alt_data_end+0xff007590>
    767c:	8080030b 	ldhu	r2,12(r16)
    7680:	04810004 	movi	r18,1024
    7684:	84801315 	stw	r18,76(r16)
    7688:	1484b03a 	or	r2,r2,r18
    768c:	8080030d 	sth	r2,12(r16)
    7690:	0027883a 	mov	r19,zero
    7694:	003fd806 	br	75f8 <__alt_data_end+0xff0075f8>
    7698:	8140038f 	ldh	r5,14(r16)
    769c:	8809883a 	mov	r4,r17
    76a0:	000aebc0 	call	aebc <_isatty_r>
    76a4:	103fe226 	beq	r2,zero,7630 <__alt_data_end+0xff007630>
    76a8:	8080030b 	ldhu	r2,12(r16)
    76ac:	10800054 	ori	r2,r2,1
    76b0:	8080030d 	sth	r2,12(r16)
    76b4:	003fde06 	br	7630 <__alt_data_end+0xff007630>
    76b8:	8080030b 	ldhu	r2,12(r16)
    76bc:	10c0800c 	andi	r3,r2,512
    76c0:	183fdb1e 	bne	r3,zero,7630 <__alt_data_end+0xff007630>
    76c4:	10800094 	ori	r2,r2,2
    76c8:	80c010c4 	addi	r3,r16,67
    76cc:	8080030d 	sth	r2,12(r16)
    76d0:	00800044 	movi	r2,1
    76d4:	80c00015 	stw	r3,0(r16)
    76d8:	80c00415 	stw	r3,16(r16)
    76dc:	80800515 	stw	r2,20(r16)
    76e0:	003fd306 	br	7630 <__alt_data_end+0xff007630>
    76e4:	04810004 	movi	r18,1024
    76e8:	003fc306 	br	75f8 <__alt_data_end+0xff0075f8>
    76ec:	0027883a 	mov	r19,zero
    76f0:	04810004 	movi	r18,1024
    76f4:	003fc006 	br	75f8 <__alt_data_end+0xff0075f8>

000076f8 <memchr>:
    76f8:	208000cc 	andi	r2,r4,3
    76fc:	280f883a 	mov	r7,r5
    7700:	10003426 	beq	r2,zero,77d4 <memchr+0xdc>
    7704:	30bfffc4 	addi	r2,r6,-1
    7708:	30001a26 	beq	r6,zero,7774 <memchr+0x7c>
    770c:	20c00003 	ldbu	r3,0(r4)
    7710:	29803fcc 	andi	r6,r5,255
    7714:	30c0051e 	bne	r6,r3,772c <memchr+0x34>
    7718:	00001806 	br	777c <memchr+0x84>
    771c:	10001526 	beq	r2,zero,7774 <memchr+0x7c>
    7720:	20c00003 	ldbu	r3,0(r4)
    7724:	10bfffc4 	addi	r2,r2,-1
    7728:	30c01426 	beq	r6,r3,777c <memchr+0x84>
    772c:	21000044 	addi	r4,r4,1
    7730:	20c000cc 	andi	r3,r4,3
    7734:	183ff91e 	bne	r3,zero,771c <__alt_data_end+0xff00771c>
    7738:	020000c4 	movi	r8,3
    773c:	40801136 	bltu	r8,r2,7784 <memchr+0x8c>
    7740:	10000c26 	beq	r2,zero,7774 <memchr+0x7c>
    7744:	20c00003 	ldbu	r3,0(r4)
    7748:	29403fcc 	andi	r5,r5,255
    774c:	28c00b26 	beq	r5,r3,777c <memchr+0x84>
    7750:	20c00044 	addi	r3,r4,1
    7754:	39803fcc 	andi	r6,r7,255
    7758:	2089883a 	add	r4,r4,r2
    775c:	00000306 	br	776c <memchr+0x74>
    7760:	18c00044 	addi	r3,r3,1
    7764:	197fffc3 	ldbu	r5,-1(r3)
    7768:	31400526 	beq	r6,r5,7780 <memchr+0x88>
    776c:	1805883a 	mov	r2,r3
    7770:	20fffb1e 	bne	r4,r3,7760 <__alt_data_end+0xff007760>
    7774:	0005883a 	mov	r2,zero
    7778:	f800283a 	ret
    777c:	2005883a 	mov	r2,r4
    7780:	f800283a 	ret
    7784:	28c03fcc 	andi	r3,r5,255
    7788:	1812923a 	slli	r9,r3,8
    778c:	02ffbff4 	movhi	r11,65279
    7790:	02a02074 	movhi	r10,32897
    7794:	48d2b03a 	or	r9,r9,r3
    7798:	4806943a 	slli	r3,r9,16
    779c:	5affbfc4 	addi	r11,r11,-257
    77a0:	52a02004 	addi	r10,r10,-32640
    77a4:	48d2b03a 	or	r9,r9,r3
    77a8:	20c00017 	ldw	r3,0(r4)
    77ac:	48c6f03a 	xor	r3,r9,r3
    77b0:	1acd883a 	add	r6,r3,r11
    77b4:	00c6303a 	nor	r3,zero,r3
    77b8:	30c6703a 	and	r3,r6,r3
    77bc:	1a86703a 	and	r3,r3,r10
    77c0:	183fe01e 	bne	r3,zero,7744 <__alt_data_end+0xff007744>
    77c4:	10bfff04 	addi	r2,r2,-4
    77c8:	21000104 	addi	r4,r4,4
    77cc:	40bff636 	bltu	r8,r2,77a8 <__alt_data_end+0xff0077a8>
    77d0:	003fdb06 	br	7740 <__alt_data_end+0xff007740>
    77d4:	3005883a 	mov	r2,r6
    77d8:	003fd706 	br	7738 <__alt_data_end+0xff007738>

000077dc <memcpy>:
    77dc:	defffd04 	addi	sp,sp,-12
    77e0:	dfc00215 	stw	ra,8(sp)
    77e4:	dc400115 	stw	r17,4(sp)
    77e8:	dc000015 	stw	r16,0(sp)
    77ec:	00c003c4 	movi	r3,15
    77f0:	2005883a 	mov	r2,r4
    77f4:	1980452e 	bgeu	r3,r6,790c <memcpy+0x130>
    77f8:	2906b03a 	or	r3,r5,r4
    77fc:	18c000cc 	andi	r3,r3,3
    7800:	1800441e 	bne	r3,zero,7914 <memcpy+0x138>
    7804:	347ffc04 	addi	r17,r6,-16
    7808:	8822d13a 	srli	r17,r17,4
    780c:	28c00104 	addi	r3,r5,4
    7810:	23400104 	addi	r13,r4,4
    7814:	8820913a 	slli	r16,r17,4
    7818:	2b000204 	addi	r12,r5,8
    781c:	22c00204 	addi	r11,r4,8
    7820:	84000504 	addi	r16,r16,20
    7824:	2a800304 	addi	r10,r5,12
    7828:	22400304 	addi	r9,r4,12
    782c:	2c21883a 	add	r16,r5,r16
    7830:	2811883a 	mov	r8,r5
    7834:	200f883a 	mov	r7,r4
    7838:	41000017 	ldw	r4,0(r8)
    783c:	1fc00017 	ldw	ra,0(r3)
    7840:	63c00017 	ldw	r15,0(r12)
    7844:	39000015 	stw	r4,0(r7)
    7848:	53800017 	ldw	r14,0(r10)
    784c:	6fc00015 	stw	ra,0(r13)
    7850:	5bc00015 	stw	r15,0(r11)
    7854:	4b800015 	stw	r14,0(r9)
    7858:	18c00404 	addi	r3,r3,16
    785c:	39c00404 	addi	r7,r7,16
    7860:	42000404 	addi	r8,r8,16
    7864:	6b400404 	addi	r13,r13,16
    7868:	63000404 	addi	r12,r12,16
    786c:	5ac00404 	addi	r11,r11,16
    7870:	52800404 	addi	r10,r10,16
    7874:	4a400404 	addi	r9,r9,16
    7878:	1c3fef1e 	bne	r3,r16,7838 <__alt_data_end+0xff007838>
    787c:	89c00044 	addi	r7,r17,1
    7880:	380e913a 	slli	r7,r7,4
    7884:	310003cc 	andi	r4,r6,15
    7888:	02c000c4 	movi	r11,3
    788c:	11c7883a 	add	r3,r2,r7
    7890:	29cb883a 	add	r5,r5,r7
    7894:	5900212e 	bgeu	r11,r4,791c <memcpy+0x140>
    7898:	1813883a 	mov	r9,r3
    789c:	2811883a 	mov	r8,r5
    78a0:	200f883a 	mov	r7,r4
    78a4:	42800017 	ldw	r10,0(r8)
    78a8:	4a400104 	addi	r9,r9,4
    78ac:	39ffff04 	addi	r7,r7,-4
    78b0:	4abfff15 	stw	r10,-4(r9)
    78b4:	42000104 	addi	r8,r8,4
    78b8:	59fffa36 	bltu	r11,r7,78a4 <__alt_data_end+0xff0078a4>
    78bc:	213fff04 	addi	r4,r4,-4
    78c0:	2008d0ba 	srli	r4,r4,2
    78c4:	318000cc 	andi	r6,r6,3
    78c8:	21000044 	addi	r4,r4,1
    78cc:	2109883a 	add	r4,r4,r4
    78d0:	2109883a 	add	r4,r4,r4
    78d4:	1907883a 	add	r3,r3,r4
    78d8:	290b883a 	add	r5,r5,r4
    78dc:	30000626 	beq	r6,zero,78f8 <memcpy+0x11c>
    78e0:	198d883a 	add	r6,r3,r6
    78e4:	29c00003 	ldbu	r7,0(r5)
    78e8:	18c00044 	addi	r3,r3,1
    78ec:	29400044 	addi	r5,r5,1
    78f0:	19ffffc5 	stb	r7,-1(r3)
    78f4:	19bffb1e 	bne	r3,r6,78e4 <__alt_data_end+0xff0078e4>
    78f8:	dfc00217 	ldw	ra,8(sp)
    78fc:	dc400117 	ldw	r17,4(sp)
    7900:	dc000017 	ldw	r16,0(sp)
    7904:	dec00304 	addi	sp,sp,12
    7908:	f800283a 	ret
    790c:	2007883a 	mov	r3,r4
    7910:	003ff206 	br	78dc <__alt_data_end+0xff0078dc>
    7914:	2007883a 	mov	r3,r4
    7918:	003ff106 	br	78e0 <__alt_data_end+0xff0078e0>
    791c:	200d883a 	mov	r6,r4
    7920:	003fee06 	br	78dc <__alt_data_end+0xff0078dc>

00007924 <memmove>:
    7924:	2005883a 	mov	r2,r4
    7928:	29000b2e 	bgeu	r5,r4,7958 <memmove+0x34>
    792c:	298f883a 	add	r7,r5,r6
    7930:	21c0092e 	bgeu	r4,r7,7958 <memmove+0x34>
    7934:	2187883a 	add	r3,r4,r6
    7938:	198bc83a 	sub	r5,r3,r6
    793c:	30004826 	beq	r6,zero,7a60 <memmove+0x13c>
    7940:	39ffffc4 	addi	r7,r7,-1
    7944:	39000003 	ldbu	r4,0(r7)
    7948:	18ffffc4 	addi	r3,r3,-1
    794c:	19000005 	stb	r4,0(r3)
    7950:	28fffb1e 	bne	r5,r3,7940 <__alt_data_end+0xff007940>
    7954:	f800283a 	ret
    7958:	00c003c4 	movi	r3,15
    795c:	1980412e 	bgeu	r3,r6,7a64 <memmove+0x140>
    7960:	2886b03a 	or	r3,r5,r2
    7964:	18c000cc 	andi	r3,r3,3
    7968:	1800401e 	bne	r3,zero,7a6c <memmove+0x148>
    796c:	33fffc04 	addi	r15,r6,-16
    7970:	781ed13a 	srli	r15,r15,4
    7974:	28c00104 	addi	r3,r5,4
    7978:	13400104 	addi	r13,r2,4
    797c:	781c913a 	slli	r14,r15,4
    7980:	2b000204 	addi	r12,r5,8
    7984:	12c00204 	addi	r11,r2,8
    7988:	73800504 	addi	r14,r14,20
    798c:	2a800304 	addi	r10,r5,12
    7990:	12400304 	addi	r9,r2,12
    7994:	2b9d883a 	add	r14,r5,r14
    7998:	2811883a 	mov	r8,r5
    799c:	100f883a 	mov	r7,r2
    79a0:	41000017 	ldw	r4,0(r8)
    79a4:	39c00404 	addi	r7,r7,16
    79a8:	18c00404 	addi	r3,r3,16
    79ac:	393ffc15 	stw	r4,-16(r7)
    79b0:	193ffc17 	ldw	r4,-16(r3)
    79b4:	6b400404 	addi	r13,r13,16
    79b8:	5ac00404 	addi	r11,r11,16
    79bc:	693ffc15 	stw	r4,-16(r13)
    79c0:	61000017 	ldw	r4,0(r12)
    79c4:	4a400404 	addi	r9,r9,16
    79c8:	42000404 	addi	r8,r8,16
    79cc:	593ffc15 	stw	r4,-16(r11)
    79d0:	51000017 	ldw	r4,0(r10)
    79d4:	63000404 	addi	r12,r12,16
    79d8:	52800404 	addi	r10,r10,16
    79dc:	493ffc15 	stw	r4,-16(r9)
    79e0:	1bbfef1e 	bne	r3,r14,79a0 <__alt_data_end+0xff0079a0>
    79e4:	79000044 	addi	r4,r15,1
    79e8:	2008913a 	slli	r4,r4,4
    79ec:	328003cc 	andi	r10,r6,15
    79f0:	02c000c4 	movi	r11,3
    79f4:	1107883a 	add	r3,r2,r4
    79f8:	290b883a 	add	r5,r5,r4
    79fc:	5a801e2e 	bgeu	r11,r10,7a78 <memmove+0x154>
    7a00:	1813883a 	mov	r9,r3
    7a04:	2811883a 	mov	r8,r5
    7a08:	500f883a 	mov	r7,r10
    7a0c:	41000017 	ldw	r4,0(r8)
    7a10:	4a400104 	addi	r9,r9,4
    7a14:	39ffff04 	addi	r7,r7,-4
    7a18:	493fff15 	stw	r4,-4(r9)
    7a1c:	42000104 	addi	r8,r8,4
    7a20:	59fffa36 	bltu	r11,r7,7a0c <__alt_data_end+0xff007a0c>
    7a24:	513fff04 	addi	r4,r10,-4
    7a28:	2008d0ba 	srli	r4,r4,2
    7a2c:	318000cc 	andi	r6,r6,3
    7a30:	21000044 	addi	r4,r4,1
    7a34:	2109883a 	add	r4,r4,r4
    7a38:	2109883a 	add	r4,r4,r4
    7a3c:	1907883a 	add	r3,r3,r4
    7a40:	290b883a 	add	r5,r5,r4
    7a44:	30000b26 	beq	r6,zero,7a74 <memmove+0x150>
    7a48:	198d883a 	add	r6,r3,r6
    7a4c:	29c00003 	ldbu	r7,0(r5)
    7a50:	18c00044 	addi	r3,r3,1
    7a54:	29400044 	addi	r5,r5,1
    7a58:	19ffffc5 	stb	r7,-1(r3)
    7a5c:	19bffb1e 	bne	r3,r6,7a4c <__alt_data_end+0xff007a4c>
    7a60:	f800283a 	ret
    7a64:	1007883a 	mov	r3,r2
    7a68:	003ff606 	br	7a44 <__alt_data_end+0xff007a44>
    7a6c:	1007883a 	mov	r3,r2
    7a70:	003ff506 	br	7a48 <__alt_data_end+0xff007a48>
    7a74:	f800283a 	ret
    7a78:	500d883a 	mov	r6,r10
    7a7c:	003ff106 	br	7a44 <__alt_data_end+0xff007a44>

00007a80 <memset>:
    7a80:	20c000cc 	andi	r3,r4,3
    7a84:	2005883a 	mov	r2,r4
    7a88:	18004426 	beq	r3,zero,7b9c <memset+0x11c>
    7a8c:	31ffffc4 	addi	r7,r6,-1
    7a90:	30004026 	beq	r6,zero,7b94 <memset+0x114>
    7a94:	2813883a 	mov	r9,r5
    7a98:	200d883a 	mov	r6,r4
    7a9c:	2007883a 	mov	r3,r4
    7aa0:	00000406 	br	7ab4 <memset+0x34>
    7aa4:	3a3fffc4 	addi	r8,r7,-1
    7aa8:	31800044 	addi	r6,r6,1
    7aac:	38003926 	beq	r7,zero,7b94 <memset+0x114>
    7ab0:	400f883a 	mov	r7,r8
    7ab4:	18c00044 	addi	r3,r3,1
    7ab8:	32400005 	stb	r9,0(r6)
    7abc:	1a0000cc 	andi	r8,r3,3
    7ac0:	403ff81e 	bne	r8,zero,7aa4 <__alt_data_end+0xff007aa4>
    7ac4:	010000c4 	movi	r4,3
    7ac8:	21c02d2e 	bgeu	r4,r7,7b80 <memset+0x100>
    7acc:	29003fcc 	andi	r4,r5,255
    7ad0:	200c923a 	slli	r6,r4,8
    7ad4:	3108b03a 	or	r4,r6,r4
    7ad8:	200c943a 	slli	r6,r4,16
    7adc:	218cb03a 	or	r6,r4,r6
    7ae0:	010003c4 	movi	r4,15
    7ae4:	21c0182e 	bgeu	r4,r7,7b48 <memset+0xc8>
    7ae8:	3b3ffc04 	addi	r12,r7,-16
    7aec:	6018d13a 	srli	r12,r12,4
    7af0:	1a000104 	addi	r8,r3,4
    7af4:	1ac00204 	addi	r11,r3,8
    7af8:	6008913a 	slli	r4,r12,4
    7afc:	1a800304 	addi	r10,r3,12
    7b00:	1813883a 	mov	r9,r3
    7b04:	21000504 	addi	r4,r4,20
    7b08:	1909883a 	add	r4,r3,r4
    7b0c:	49800015 	stw	r6,0(r9)
    7b10:	41800015 	stw	r6,0(r8)
    7b14:	59800015 	stw	r6,0(r11)
    7b18:	51800015 	stw	r6,0(r10)
    7b1c:	42000404 	addi	r8,r8,16
    7b20:	4a400404 	addi	r9,r9,16
    7b24:	5ac00404 	addi	r11,r11,16
    7b28:	52800404 	addi	r10,r10,16
    7b2c:	413ff71e 	bne	r8,r4,7b0c <__alt_data_end+0xff007b0c>
    7b30:	63000044 	addi	r12,r12,1
    7b34:	6018913a 	slli	r12,r12,4
    7b38:	39c003cc 	andi	r7,r7,15
    7b3c:	010000c4 	movi	r4,3
    7b40:	1b07883a 	add	r3,r3,r12
    7b44:	21c00e2e 	bgeu	r4,r7,7b80 <memset+0x100>
    7b48:	1813883a 	mov	r9,r3
    7b4c:	3811883a 	mov	r8,r7
    7b50:	010000c4 	movi	r4,3
    7b54:	49800015 	stw	r6,0(r9)
    7b58:	423fff04 	addi	r8,r8,-4
    7b5c:	4a400104 	addi	r9,r9,4
    7b60:	223ffc36 	bltu	r4,r8,7b54 <__alt_data_end+0xff007b54>
    7b64:	393fff04 	addi	r4,r7,-4
    7b68:	2008d0ba 	srli	r4,r4,2
    7b6c:	39c000cc 	andi	r7,r7,3
    7b70:	21000044 	addi	r4,r4,1
    7b74:	2109883a 	add	r4,r4,r4
    7b78:	2109883a 	add	r4,r4,r4
    7b7c:	1907883a 	add	r3,r3,r4
    7b80:	38000526 	beq	r7,zero,7b98 <memset+0x118>
    7b84:	19cf883a 	add	r7,r3,r7
    7b88:	19400005 	stb	r5,0(r3)
    7b8c:	18c00044 	addi	r3,r3,1
    7b90:	38fffd1e 	bne	r7,r3,7b88 <__alt_data_end+0xff007b88>
    7b94:	f800283a 	ret
    7b98:	f800283a 	ret
    7b9c:	2007883a 	mov	r3,r4
    7ba0:	300f883a 	mov	r7,r6
    7ba4:	003fc706 	br	7ac4 <__alt_data_end+0xff007ac4>

00007ba8 <_Balloc>:
    7ba8:	20801317 	ldw	r2,76(r4)
    7bac:	defffc04 	addi	sp,sp,-16
    7bb0:	dc400115 	stw	r17,4(sp)
    7bb4:	dc000015 	stw	r16,0(sp)
    7bb8:	dfc00315 	stw	ra,12(sp)
    7bbc:	dc800215 	stw	r18,8(sp)
    7bc0:	2023883a 	mov	r17,r4
    7bc4:	2821883a 	mov	r16,r5
    7bc8:	10000f26 	beq	r2,zero,7c08 <_Balloc+0x60>
    7bcc:	8407883a 	add	r3,r16,r16
    7bd0:	18c7883a 	add	r3,r3,r3
    7bd4:	10c7883a 	add	r3,r2,r3
    7bd8:	18800017 	ldw	r2,0(r3)
    7bdc:	10001126 	beq	r2,zero,7c24 <_Balloc+0x7c>
    7be0:	11000017 	ldw	r4,0(r2)
    7be4:	19000015 	stw	r4,0(r3)
    7be8:	10000415 	stw	zero,16(r2)
    7bec:	10000315 	stw	zero,12(r2)
    7bf0:	dfc00317 	ldw	ra,12(sp)
    7bf4:	dc800217 	ldw	r18,8(sp)
    7bf8:	dc400117 	ldw	r17,4(sp)
    7bfc:	dc000017 	ldw	r16,0(sp)
    7c00:	dec00404 	addi	sp,sp,16
    7c04:	f800283a 	ret
    7c08:	01800844 	movi	r6,33
    7c0c:	01400104 	movi	r5,4
    7c10:	000aa900 	call	aa90 <_calloc_r>
    7c14:	88801315 	stw	r2,76(r17)
    7c18:	103fec1e 	bne	r2,zero,7bcc <__alt_data_end+0xff007bcc>
    7c1c:	0005883a 	mov	r2,zero
    7c20:	003ff306 	br	7bf0 <__alt_data_end+0xff007bf0>
    7c24:	01400044 	movi	r5,1
    7c28:	2c24983a 	sll	r18,r5,r16
    7c2c:	8809883a 	mov	r4,r17
    7c30:	91800144 	addi	r6,r18,5
    7c34:	318d883a 	add	r6,r6,r6
    7c38:	318d883a 	add	r6,r6,r6
    7c3c:	000aa900 	call	aa90 <_calloc_r>
    7c40:	103ff626 	beq	r2,zero,7c1c <__alt_data_end+0xff007c1c>
    7c44:	14000115 	stw	r16,4(r2)
    7c48:	14800215 	stw	r18,8(r2)
    7c4c:	003fe606 	br	7be8 <__alt_data_end+0xff007be8>

00007c50 <_Bfree>:
    7c50:	28000826 	beq	r5,zero,7c74 <_Bfree+0x24>
    7c54:	28c00117 	ldw	r3,4(r5)
    7c58:	20801317 	ldw	r2,76(r4)
    7c5c:	18c7883a 	add	r3,r3,r3
    7c60:	18c7883a 	add	r3,r3,r3
    7c64:	10c5883a 	add	r2,r2,r3
    7c68:	10c00017 	ldw	r3,0(r2)
    7c6c:	28c00015 	stw	r3,0(r5)
    7c70:	11400015 	stw	r5,0(r2)
    7c74:	f800283a 	ret

00007c78 <__multadd>:
    7c78:	defffa04 	addi	sp,sp,-24
    7c7c:	dc800315 	stw	r18,12(sp)
    7c80:	dc400215 	stw	r17,8(sp)
    7c84:	dc000115 	stw	r16,4(sp)
    7c88:	2823883a 	mov	r17,r5
    7c8c:	2c000417 	ldw	r16,16(r5)
    7c90:	dfc00515 	stw	ra,20(sp)
    7c94:	dcc00415 	stw	r19,16(sp)
    7c98:	2025883a 	mov	r18,r4
    7c9c:	29400504 	addi	r5,r5,20
    7ca0:	0011883a 	mov	r8,zero
    7ca4:	28c00017 	ldw	r3,0(r5)
    7ca8:	29400104 	addi	r5,r5,4
    7cac:	42000044 	addi	r8,r8,1
    7cb0:	18bfffcc 	andi	r2,r3,65535
    7cb4:	1185383a 	mul	r2,r2,r6
    7cb8:	1806d43a 	srli	r3,r3,16
    7cbc:	11cf883a 	add	r7,r2,r7
    7cc0:	3808d43a 	srli	r4,r7,16
    7cc4:	1987383a 	mul	r3,r3,r6
    7cc8:	38bfffcc 	andi	r2,r7,65535
    7ccc:	1907883a 	add	r3,r3,r4
    7cd0:	1808943a 	slli	r4,r3,16
    7cd4:	180ed43a 	srli	r7,r3,16
    7cd8:	2085883a 	add	r2,r4,r2
    7cdc:	28bfff15 	stw	r2,-4(r5)
    7ce0:	443ff016 	blt	r8,r16,7ca4 <__alt_data_end+0xff007ca4>
    7ce4:	38000926 	beq	r7,zero,7d0c <__multadd+0x94>
    7ce8:	88800217 	ldw	r2,8(r17)
    7cec:	80800f0e 	bge	r16,r2,7d2c <__multadd+0xb4>
    7cf0:	80800144 	addi	r2,r16,5
    7cf4:	1085883a 	add	r2,r2,r2
    7cf8:	1085883a 	add	r2,r2,r2
    7cfc:	8885883a 	add	r2,r17,r2
    7d00:	11c00015 	stw	r7,0(r2)
    7d04:	84000044 	addi	r16,r16,1
    7d08:	8c000415 	stw	r16,16(r17)
    7d0c:	8805883a 	mov	r2,r17
    7d10:	dfc00517 	ldw	ra,20(sp)
    7d14:	dcc00417 	ldw	r19,16(sp)
    7d18:	dc800317 	ldw	r18,12(sp)
    7d1c:	dc400217 	ldw	r17,8(sp)
    7d20:	dc000117 	ldw	r16,4(sp)
    7d24:	dec00604 	addi	sp,sp,24
    7d28:	f800283a 	ret
    7d2c:	89400117 	ldw	r5,4(r17)
    7d30:	9009883a 	mov	r4,r18
    7d34:	d9c00015 	stw	r7,0(sp)
    7d38:	29400044 	addi	r5,r5,1
    7d3c:	0007ba80 	call	7ba8 <_Balloc>
    7d40:	89800417 	ldw	r6,16(r17)
    7d44:	89400304 	addi	r5,r17,12
    7d48:	11000304 	addi	r4,r2,12
    7d4c:	31800084 	addi	r6,r6,2
    7d50:	318d883a 	add	r6,r6,r6
    7d54:	318d883a 	add	r6,r6,r6
    7d58:	1027883a 	mov	r19,r2
    7d5c:	00077dc0 	call	77dc <memcpy>
    7d60:	d9c00017 	ldw	r7,0(sp)
    7d64:	88000a26 	beq	r17,zero,7d90 <__multadd+0x118>
    7d68:	88c00117 	ldw	r3,4(r17)
    7d6c:	90801317 	ldw	r2,76(r18)
    7d70:	18c7883a 	add	r3,r3,r3
    7d74:	18c7883a 	add	r3,r3,r3
    7d78:	10c5883a 	add	r2,r2,r3
    7d7c:	10c00017 	ldw	r3,0(r2)
    7d80:	88c00015 	stw	r3,0(r17)
    7d84:	14400015 	stw	r17,0(r2)
    7d88:	9823883a 	mov	r17,r19
    7d8c:	003fd806 	br	7cf0 <__alt_data_end+0xff007cf0>
    7d90:	9823883a 	mov	r17,r19
    7d94:	003fd606 	br	7cf0 <__alt_data_end+0xff007cf0>

00007d98 <__s2b>:
    7d98:	defff904 	addi	sp,sp,-28
    7d9c:	dc400115 	stw	r17,4(sp)
    7da0:	dc000015 	stw	r16,0(sp)
    7da4:	2023883a 	mov	r17,r4
    7da8:	2821883a 	mov	r16,r5
    7dac:	39000204 	addi	r4,r7,8
    7db0:	01400244 	movi	r5,9
    7db4:	dcc00315 	stw	r19,12(sp)
    7db8:	dc800215 	stw	r18,8(sp)
    7dbc:	dfc00615 	stw	ra,24(sp)
    7dc0:	dd400515 	stw	r21,20(sp)
    7dc4:	dd000415 	stw	r20,16(sp)
    7dc8:	3825883a 	mov	r18,r7
    7dcc:	3027883a 	mov	r19,r6
    7dd0:	000bdc00 	call	bdc0 <__divsi3>
    7dd4:	00c00044 	movi	r3,1
    7dd8:	000b883a 	mov	r5,zero
    7ddc:	1880030e 	bge	r3,r2,7dec <__s2b+0x54>
    7de0:	18c7883a 	add	r3,r3,r3
    7de4:	29400044 	addi	r5,r5,1
    7de8:	18bffd16 	blt	r3,r2,7de0 <__alt_data_end+0xff007de0>
    7dec:	8809883a 	mov	r4,r17
    7df0:	0007ba80 	call	7ba8 <_Balloc>
    7df4:	d8c00717 	ldw	r3,28(sp)
    7df8:	10c00515 	stw	r3,20(r2)
    7dfc:	00c00044 	movi	r3,1
    7e00:	10c00415 	stw	r3,16(r2)
    7e04:	00c00244 	movi	r3,9
    7e08:	1cc0210e 	bge	r3,r19,7e90 <__s2b+0xf8>
    7e0c:	80eb883a 	add	r21,r16,r3
    7e10:	a829883a 	mov	r20,r21
    7e14:	84e1883a 	add	r16,r16,r19
    7e18:	a1c00007 	ldb	r7,0(r20)
    7e1c:	01800284 	movi	r6,10
    7e20:	a5000044 	addi	r20,r20,1
    7e24:	100b883a 	mov	r5,r2
    7e28:	39fff404 	addi	r7,r7,-48
    7e2c:	8809883a 	mov	r4,r17
    7e30:	0007c780 	call	7c78 <__multadd>
    7e34:	a43ff81e 	bne	r20,r16,7e18 <__alt_data_end+0xff007e18>
    7e38:	ace1883a 	add	r16,r21,r19
    7e3c:	843ffe04 	addi	r16,r16,-8
    7e40:	9c800a0e 	bge	r19,r18,7e6c <__s2b+0xd4>
    7e44:	94e5c83a 	sub	r18,r18,r19
    7e48:	84a5883a 	add	r18,r16,r18
    7e4c:	81c00007 	ldb	r7,0(r16)
    7e50:	01800284 	movi	r6,10
    7e54:	84000044 	addi	r16,r16,1
    7e58:	100b883a 	mov	r5,r2
    7e5c:	39fff404 	addi	r7,r7,-48
    7e60:	8809883a 	mov	r4,r17
    7e64:	0007c780 	call	7c78 <__multadd>
    7e68:	84bff81e 	bne	r16,r18,7e4c <__alt_data_end+0xff007e4c>
    7e6c:	dfc00617 	ldw	ra,24(sp)
    7e70:	dd400517 	ldw	r21,20(sp)
    7e74:	dd000417 	ldw	r20,16(sp)
    7e78:	dcc00317 	ldw	r19,12(sp)
    7e7c:	dc800217 	ldw	r18,8(sp)
    7e80:	dc400117 	ldw	r17,4(sp)
    7e84:	dc000017 	ldw	r16,0(sp)
    7e88:	dec00704 	addi	sp,sp,28
    7e8c:	f800283a 	ret
    7e90:	84000284 	addi	r16,r16,10
    7e94:	1827883a 	mov	r19,r3
    7e98:	003fe906 	br	7e40 <__alt_data_end+0xff007e40>

00007e9c <__hi0bits>:
    7e9c:	20bfffec 	andhi	r2,r4,65535
    7ea0:	1000141e 	bne	r2,zero,7ef4 <__hi0bits+0x58>
    7ea4:	2008943a 	slli	r4,r4,16
    7ea8:	00800404 	movi	r2,16
    7eac:	20ffc02c 	andhi	r3,r4,65280
    7eb0:	1800021e 	bne	r3,zero,7ebc <__hi0bits+0x20>
    7eb4:	2008923a 	slli	r4,r4,8
    7eb8:	10800204 	addi	r2,r2,8
    7ebc:	20fc002c 	andhi	r3,r4,61440
    7ec0:	1800021e 	bne	r3,zero,7ecc <__hi0bits+0x30>
    7ec4:	2008913a 	slli	r4,r4,4
    7ec8:	10800104 	addi	r2,r2,4
    7ecc:	20f0002c 	andhi	r3,r4,49152
    7ed0:	1800031e 	bne	r3,zero,7ee0 <__hi0bits+0x44>
    7ed4:	2109883a 	add	r4,r4,r4
    7ed8:	10800084 	addi	r2,r2,2
    7edc:	2109883a 	add	r4,r4,r4
    7ee0:	20000316 	blt	r4,zero,7ef0 <__hi0bits+0x54>
    7ee4:	2110002c 	andhi	r4,r4,16384
    7ee8:	2000041e 	bne	r4,zero,7efc <__hi0bits+0x60>
    7eec:	00800804 	movi	r2,32
    7ef0:	f800283a 	ret
    7ef4:	0005883a 	mov	r2,zero
    7ef8:	003fec06 	br	7eac <__alt_data_end+0xff007eac>
    7efc:	10800044 	addi	r2,r2,1
    7f00:	f800283a 	ret

00007f04 <__lo0bits>:
    7f04:	20c00017 	ldw	r3,0(r4)
    7f08:	188001cc 	andi	r2,r3,7
    7f0c:	10000826 	beq	r2,zero,7f30 <__lo0bits+0x2c>
    7f10:	1880004c 	andi	r2,r3,1
    7f14:	1000211e 	bne	r2,zero,7f9c <__lo0bits+0x98>
    7f18:	1880008c 	andi	r2,r3,2
    7f1c:	1000211e 	bne	r2,zero,7fa4 <__lo0bits+0xa0>
    7f20:	1806d0ba 	srli	r3,r3,2
    7f24:	00800084 	movi	r2,2
    7f28:	20c00015 	stw	r3,0(r4)
    7f2c:	f800283a 	ret
    7f30:	18bfffcc 	andi	r2,r3,65535
    7f34:	10001326 	beq	r2,zero,7f84 <__lo0bits+0x80>
    7f38:	0005883a 	mov	r2,zero
    7f3c:	19403fcc 	andi	r5,r3,255
    7f40:	2800021e 	bne	r5,zero,7f4c <__lo0bits+0x48>
    7f44:	1806d23a 	srli	r3,r3,8
    7f48:	10800204 	addi	r2,r2,8
    7f4c:	194003cc 	andi	r5,r3,15
    7f50:	2800021e 	bne	r5,zero,7f5c <__lo0bits+0x58>
    7f54:	1806d13a 	srli	r3,r3,4
    7f58:	10800104 	addi	r2,r2,4
    7f5c:	194000cc 	andi	r5,r3,3
    7f60:	2800021e 	bne	r5,zero,7f6c <__lo0bits+0x68>
    7f64:	1806d0ba 	srli	r3,r3,2
    7f68:	10800084 	addi	r2,r2,2
    7f6c:	1940004c 	andi	r5,r3,1
    7f70:	2800081e 	bne	r5,zero,7f94 <__lo0bits+0x90>
    7f74:	1806d07a 	srli	r3,r3,1
    7f78:	1800051e 	bne	r3,zero,7f90 <__lo0bits+0x8c>
    7f7c:	00800804 	movi	r2,32
    7f80:	f800283a 	ret
    7f84:	1806d43a 	srli	r3,r3,16
    7f88:	00800404 	movi	r2,16
    7f8c:	003feb06 	br	7f3c <__alt_data_end+0xff007f3c>
    7f90:	10800044 	addi	r2,r2,1
    7f94:	20c00015 	stw	r3,0(r4)
    7f98:	f800283a 	ret
    7f9c:	0005883a 	mov	r2,zero
    7fa0:	f800283a 	ret
    7fa4:	1806d07a 	srli	r3,r3,1
    7fa8:	00800044 	movi	r2,1
    7fac:	20c00015 	stw	r3,0(r4)
    7fb0:	f800283a 	ret

00007fb4 <__i2b>:
    7fb4:	defffd04 	addi	sp,sp,-12
    7fb8:	dc000015 	stw	r16,0(sp)
    7fbc:	04000044 	movi	r16,1
    7fc0:	dc400115 	stw	r17,4(sp)
    7fc4:	2823883a 	mov	r17,r5
    7fc8:	800b883a 	mov	r5,r16
    7fcc:	dfc00215 	stw	ra,8(sp)
    7fd0:	0007ba80 	call	7ba8 <_Balloc>
    7fd4:	14400515 	stw	r17,20(r2)
    7fd8:	14000415 	stw	r16,16(r2)
    7fdc:	dfc00217 	ldw	ra,8(sp)
    7fe0:	dc400117 	ldw	r17,4(sp)
    7fe4:	dc000017 	ldw	r16,0(sp)
    7fe8:	dec00304 	addi	sp,sp,12
    7fec:	f800283a 	ret

00007ff0 <__multiply>:
    7ff0:	defffa04 	addi	sp,sp,-24
    7ff4:	dcc00315 	stw	r19,12(sp)
    7ff8:	dc800215 	stw	r18,8(sp)
    7ffc:	34c00417 	ldw	r19,16(r6)
    8000:	2c800417 	ldw	r18,16(r5)
    8004:	dd000415 	stw	r20,16(sp)
    8008:	dc400115 	stw	r17,4(sp)
    800c:	dfc00515 	stw	ra,20(sp)
    8010:	dc000015 	stw	r16,0(sp)
    8014:	2829883a 	mov	r20,r5
    8018:	3023883a 	mov	r17,r6
    801c:	94c0050e 	bge	r18,r19,8034 <__multiply+0x44>
    8020:	9007883a 	mov	r3,r18
    8024:	3029883a 	mov	r20,r6
    8028:	9825883a 	mov	r18,r19
    802c:	2823883a 	mov	r17,r5
    8030:	1827883a 	mov	r19,r3
    8034:	a0800217 	ldw	r2,8(r20)
    8038:	94e1883a 	add	r16,r18,r19
    803c:	a1400117 	ldw	r5,4(r20)
    8040:	1400010e 	bge	r2,r16,8048 <__multiply+0x58>
    8044:	29400044 	addi	r5,r5,1
    8048:	0007ba80 	call	7ba8 <_Balloc>
    804c:	8415883a 	add	r10,r16,r16
    8050:	12c00504 	addi	r11,r2,20
    8054:	5295883a 	add	r10,r10,r10
    8058:	5a95883a 	add	r10,r11,r10
    805c:	5807883a 	mov	r3,r11
    8060:	5a80032e 	bgeu	r11,r10,8070 <__multiply+0x80>
    8064:	18000015 	stw	zero,0(r3)
    8068:	18c00104 	addi	r3,r3,4
    806c:	1abffd36 	bltu	r3,r10,8064 <__alt_data_end+0xff008064>
    8070:	9ce7883a 	add	r19,r19,r19
    8074:	94a5883a 	add	r18,r18,r18
    8078:	89800504 	addi	r6,r17,20
    807c:	9ce7883a 	add	r19,r19,r19
    8080:	a3400504 	addi	r13,r20,20
    8084:	94a5883a 	add	r18,r18,r18
    8088:	34d9883a 	add	r12,r6,r19
    808c:	6c93883a 	add	r9,r13,r18
    8090:	3300422e 	bgeu	r6,r12,819c <__multiply+0x1ac>
    8094:	37c00017 	ldw	ra,0(r6)
    8098:	fbffffcc 	andi	r15,ra,65535
    809c:	78001b26 	beq	r15,zero,810c <__multiply+0x11c>
    80a0:	5811883a 	mov	r8,r11
    80a4:	681d883a 	mov	r14,r13
    80a8:	000f883a 	mov	r7,zero
    80ac:	71000017 	ldw	r4,0(r14)
    80b0:	40c00017 	ldw	r3,0(r8)
    80b4:	73800104 	addi	r14,r14,4
    80b8:	217fffcc 	andi	r5,r4,65535
    80bc:	2bcb383a 	mul	r5,r5,r15
    80c0:	2008d43a 	srli	r4,r4,16
    80c4:	1c7fffcc 	andi	r17,r3,65535
    80c8:	2c4b883a 	add	r5,r5,r17
    80cc:	29cb883a 	add	r5,r5,r7
    80d0:	23c9383a 	mul	r4,r4,r15
    80d4:	1806d43a 	srli	r3,r3,16
    80d8:	280ed43a 	srli	r7,r5,16
    80dc:	297fffcc 	andi	r5,r5,65535
    80e0:	20c7883a 	add	r3,r4,r3
    80e4:	19c7883a 	add	r3,r3,r7
    80e8:	1808943a 	slli	r4,r3,16
    80ec:	4023883a 	mov	r17,r8
    80f0:	180ed43a 	srli	r7,r3,16
    80f4:	214ab03a 	or	r5,r4,r5
    80f8:	41400015 	stw	r5,0(r8)
    80fc:	42000104 	addi	r8,r8,4
    8100:	727fea36 	bltu	r14,r9,80ac <__alt_data_end+0xff0080ac>
    8104:	89c00115 	stw	r7,4(r17)
    8108:	37c00017 	ldw	ra,0(r6)
    810c:	f83ed43a 	srli	ra,ra,16
    8110:	f8001f26 	beq	ra,zero,8190 <__multiply+0x1a0>
    8114:	58c00017 	ldw	r3,0(r11)
    8118:	681d883a 	mov	r14,r13
    811c:	581f883a 	mov	r15,r11
    8120:	1811883a 	mov	r8,r3
    8124:	5825883a 	mov	r18,r11
    8128:	000f883a 	mov	r7,zero
    812c:	00000106 	br	8134 <__multiply+0x144>
    8130:	8825883a 	mov	r18,r17
    8134:	7140000b 	ldhu	r5,0(r14)
    8138:	4010d43a 	srli	r8,r8,16
    813c:	193fffcc 	andi	r4,r3,65535
    8140:	2fcb383a 	mul	r5,r5,ra
    8144:	7bc00104 	addi	r15,r15,4
    8148:	73800104 	addi	r14,r14,4
    814c:	2a0b883a 	add	r5,r5,r8
    8150:	29cb883a 	add	r5,r5,r7
    8154:	2806943a 	slli	r3,r5,16
    8158:	94400104 	addi	r17,r18,4
    815c:	280ad43a 	srli	r5,r5,16
    8160:	1908b03a 	or	r4,r3,r4
    8164:	793fff15 	stw	r4,-4(r15)
    8168:	70ffff17 	ldw	r3,-4(r14)
    816c:	8a000017 	ldw	r8,0(r17)
    8170:	1806d43a 	srli	r3,r3,16
    8174:	413fffcc 	andi	r4,r8,65535
    8178:	1fc7383a 	mul	r3,r3,ra
    817c:	1907883a 	add	r3,r3,r4
    8180:	1947883a 	add	r3,r3,r5
    8184:	180ed43a 	srli	r7,r3,16
    8188:	727fe936 	bltu	r14,r9,8130 <__alt_data_end+0xff008130>
    818c:	90c00115 	stw	r3,4(r18)
    8190:	31800104 	addi	r6,r6,4
    8194:	5ac00104 	addi	r11,r11,4
    8198:	333fbe36 	bltu	r6,r12,8094 <__alt_data_end+0xff008094>
    819c:	0400090e 	bge	zero,r16,81c4 <__multiply+0x1d4>
    81a0:	50ffff17 	ldw	r3,-4(r10)
    81a4:	52bfff04 	addi	r10,r10,-4
    81a8:	18000326 	beq	r3,zero,81b8 <__multiply+0x1c8>
    81ac:	00000506 	br	81c4 <__multiply+0x1d4>
    81b0:	50c00017 	ldw	r3,0(r10)
    81b4:	1800031e 	bne	r3,zero,81c4 <__multiply+0x1d4>
    81b8:	843fffc4 	addi	r16,r16,-1
    81bc:	52bfff04 	addi	r10,r10,-4
    81c0:	803ffb1e 	bne	r16,zero,81b0 <__alt_data_end+0xff0081b0>
    81c4:	14000415 	stw	r16,16(r2)
    81c8:	dfc00517 	ldw	ra,20(sp)
    81cc:	dd000417 	ldw	r20,16(sp)
    81d0:	dcc00317 	ldw	r19,12(sp)
    81d4:	dc800217 	ldw	r18,8(sp)
    81d8:	dc400117 	ldw	r17,4(sp)
    81dc:	dc000017 	ldw	r16,0(sp)
    81e0:	dec00604 	addi	sp,sp,24
    81e4:	f800283a 	ret

000081e8 <__pow5mult>:
    81e8:	defffa04 	addi	sp,sp,-24
    81ec:	dcc00315 	stw	r19,12(sp)
    81f0:	dc000015 	stw	r16,0(sp)
    81f4:	dfc00515 	stw	ra,20(sp)
    81f8:	dd000415 	stw	r20,16(sp)
    81fc:	dc800215 	stw	r18,8(sp)
    8200:	dc400115 	stw	r17,4(sp)
    8204:	308000cc 	andi	r2,r6,3
    8208:	3021883a 	mov	r16,r6
    820c:	2027883a 	mov	r19,r4
    8210:	10002f1e 	bne	r2,zero,82d0 <__pow5mult+0xe8>
    8214:	2825883a 	mov	r18,r5
    8218:	8021d0ba 	srai	r16,r16,2
    821c:	80001a26 	beq	r16,zero,8288 <__pow5mult+0xa0>
    8220:	9c401217 	ldw	r17,72(r19)
    8224:	8800061e 	bne	r17,zero,8240 <__pow5mult+0x58>
    8228:	00003406 	br	82fc <__pow5mult+0x114>
    822c:	8021d07a 	srai	r16,r16,1
    8230:	80001526 	beq	r16,zero,8288 <__pow5mult+0xa0>
    8234:	88800017 	ldw	r2,0(r17)
    8238:	10001c26 	beq	r2,zero,82ac <__pow5mult+0xc4>
    823c:	1023883a 	mov	r17,r2
    8240:	8080004c 	andi	r2,r16,1
    8244:	103ff926 	beq	r2,zero,822c <__alt_data_end+0xff00822c>
    8248:	880d883a 	mov	r6,r17
    824c:	900b883a 	mov	r5,r18
    8250:	9809883a 	mov	r4,r19
    8254:	0007ff00 	call	7ff0 <__multiply>
    8258:	90001b26 	beq	r18,zero,82c8 <__pow5mult+0xe0>
    825c:	91000117 	ldw	r4,4(r18)
    8260:	98c01317 	ldw	r3,76(r19)
    8264:	8021d07a 	srai	r16,r16,1
    8268:	2109883a 	add	r4,r4,r4
    826c:	2109883a 	add	r4,r4,r4
    8270:	1907883a 	add	r3,r3,r4
    8274:	19000017 	ldw	r4,0(r3)
    8278:	91000015 	stw	r4,0(r18)
    827c:	1c800015 	stw	r18,0(r3)
    8280:	1025883a 	mov	r18,r2
    8284:	803feb1e 	bne	r16,zero,8234 <__alt_data_end+0xff008234>
    8288:	9005883a 	mov	r2,r18
    828c:	dfc00517 	ldw	ra,20(sp)
    8290:	dd000417 	ldw	r20,16(sp)
    8294:	dcc00317 	ldw	r19,12(sp)
    8298:	dc800217 	ldw	r18,8(sp)
    829c:	dc400117 	ldw	r17,4(sp)
    82a0:	dc000017 	ldw	r16,0(sp)
    82a4:	dec00604 	addi	sp,sp,24
    82a8:	f800283a 	ret
    82ac:	880d883a 	mov	r6,r17
    82b0:	880b883a 	mov	r5,r17
    82b4:	9809883a 	mov	r4,r19
    82b8:	0007ff00 	call	7ff0 <__multiply>
    82bc:	88800015 	stw	r2,0(r17)
    82c0:	10000015 	stw	zero,0(r2)
    82c4:	003fdd06 	br	823c <__alt_data_end+0xff00823c>
    82c8:	1025883a 	mov	r18,r2
    82cc:	003fd706 	br	822c <__alt_data_end+0xff00822c>
    82d0:	10bfffc4 	addi	r2,r2,-1
    82d4:	1085883a 	add	r2,r2,r2
    82d8:	00c00074 	movhi	r3,1
    82dc:	18c1ac04 	addi	r3,r3,1712
    82e0:	1085883a 	add	r2,r2,r2
    82e4:	1885883a 	add	r2,r3,r2
    82e8:	11800017 	ldw	r6,0(r2)
    82ec:	000f883a 	mov	r7,zero
    82f0:	0007c780 	call	7c78 <__multadd>
    82f4:	1025883a 	mov	r18,r2
    82f8:	003fc706 	br	8218 <__alt_data_end+0xff008218>
    82fc:	05000044 	movi	r20,1
    8300:	a00b883a 	mov	r5,r20
    8304:	9809883a 	mov	r4,r19
    8308:	0007ba80 	call	7ba8 <_Balloc>
    830c:	1023883a 	mov	r17,r2
    8310:	00809c44 	movi	r2,625
    8314:	88800515 	stw	r2,20(r17)
    8318:	8d000415 	stw	r20,16(r17)
    831c:	9c401215 	stw	r17,72(r19)
    8320:	88000015 	stw	zero,0(r17)
    8324:	003fc606 	br	8240 <__alt_data_end+0xff008240>

00008328 <__lshift>:
    8328:	defff904 	addi	sp,sp,-28
    832c:	dd400515 	stw	r21,20(sp)
    8330:	dcc00315 	stw	r19,12(sp)
    8334:	302bd17a 	srai	r21,r6,5
    8338:	2cc00417 	ldw	r19,16(r5)
    833c:	28800217 	ldw	r2,8(r5)
    8340:	dd000415 	stw	r20,16(sp)
    8344:	ace7883a 	add	r19,r21,r19
    8348:	dc800215 	stw	r18,8(sp)
    834c:	dc400115 	stw	r17,4(sp)
    8350:	dc000015 	stw	r16,0(sp)
    8354:	dfc00615 	stw	ra,24(sp)
    8358:	9c000044 	addi	r16,r19,1
    835c:	2823883a 	mov	r17,r5
    8360:	3029883a 	mov	r20,r6
    8364:	2025883a 	mov	r18,r4
    8368:	29400117 	ldw	r5,4(r5)
    836c:	1400030e 	bge	r2,r16,837c <__lshift+0x54>
    8370:	1085883a 	add	r2,r2,r2
    8374:	29400044 	addi	r5,r5,1
    8378:	143ffd16 	blt	r2,r16,8370 <__alt_data_end+0xff008370>
    837c:	9009883a 	mov	r4,r18
    8380:	0007ba80 	call	7ba8 <_Balloc>
    8384:	10c00504 	addi	r3,r2,20
    8388:	0540070e 	bge	zero,r21,83a8 <__lshift+0x80>
    838c:	ad6b883a 	add	r21,r21,r21
    8390:	ad6b883a 	add	r21,r21,r21
    8394:	1809883a 	mov	r4,r3
    8398:	1d47883a 	add	r3,r3,r21
    839c:	20000015 	stw	zero,0(r4)
    83a0:	21000104 	addi	r4,r4,4
    83a4:	193ffd1e 	bne	r3,r4,839c <__alt_data_end+0xff00839c>
    83a8:	8a000417 	ldw	r8,16(r17)
    83ac:	89000504 	addi	r4,r17,20
    83b0:	a18007cc 	andi	r6,r20,31
    83b4:	4211883a 	add	r8,r8,r8
    83b8:	4211883a 	add	r8,r8,r8
    83bc:	2211883a 	add	r8,r4,r8
    83c0:	30002326 	beq	r6,zero,8450 <__lshift+0x128>
    83c4:	02400804 	movi	r9,32
    83c8:	4993c83a 	sub	r9,r9,r6
    83cc:	000b883a 	mov	r5,zero
    83d0:	21c00017 	ldw	r7,0(r4)
    83d4:	1815883a 	mov	r10,r3
    83d8:	18c00104 	addi	r3,r3,4
    83dc:	398e983a 	sll	r7,r7,r6
    83e0:	21000104 	addi	r4,r4,4
    83e4:	394ab03a 	or	r5,r7,r5
    83e8:	197fff15 	stw	r5,-4(r3)
    83ec:	217fff17 	ldw	r5,-4(r4)
    83f0:	2a4ad83a 	srl	r5,r5,r9
    83f4:	223ff636 	bltu	r4,r8,83d0 <__alt_data_end+0xff0083d0>
    83f8:	51400115 	stw	r5,4(r10)
    83fc:	28001a1e 	bne	r5,zero,8468 <__lshift+0x140>
    8400:	843fffc4 	addi	r16,r16,-1
    8404:	14000415 	stw	r16,16(r2)
    8408:	88000826 	beq	r17,zero,842c <__lshift+0x104>
    840c:	89000117 	ldw	r4,4(r17)
    8410:	90c01317 	ldw	r3,76(r18)
    8414:	2109883a 	add	r4,r4,r4
    8418:	2109883a 	add	r4,r4,r4
    841c:	1907883a 	add	r3,r3,r4
    8420:	19000017 	ldw	r4,0(r3)
    8424:	89000015 	stw	r4,0(r17)
    8428:	1c400015 	stw	r17,0(r3)
    842c:	dfc00617 	ldw	ra,24(sp)
    8430:	dd400517 	ldw	r21,20(sp)
    8434:	dd000417 	ldw	r20,16(sp)
    8438:	dcc00317 	ldw	r19,12(sp)
    843c:	dc800217 	ldw	r18,8(sp)
    8440:	dc400117 	ldw	r17,4(sp)
    8444:	dc000017 	ldw	r16,0(sp)
    8448:	dec00704 	addi	sp,sp,28
    844c:	f800283a 	ret
    8450:	21400017 	ldw	r5,0(r4)
    8454:	18c00104 	addi	r3,r3,4
    8458:	21000104 	addi	r4,r4,4
    845c:	197fff15 	stw	r5,-4(r3)
    8460:	223ffb36 	bltu	r4,r8,8450 <__alt_data_end+0xff008450>
    8464:	003fe606 	br	8400 <__alt_data_end+0xff008400>
    8468:	9c000084 	addi	r16,r19,2
    846c:	003fe406 	br	8400 <__alt_data_end+0xff008400>

00008470 <__mcmp>:
    8470:	20800417 	ldw	r2,16(r4)
    8474:	28c00417 	ldw	r3,16(r5)
    8478:	10c5c83a 	sub	r2,r2,r3
    847c:	1000111e 	bne	r2,zero,84c4 <__mcmp+0x54>
    8480:	18c7883a 	add	r3,r3,r3
    8484:	18c7883a 	add	r3,r3,r3
    8488:	21000504 	addi	r4,r4,20
    848c:	29400504 	addi	r5,r5,20
    8490:	20c5883a 	add	r2,r4,r3
    8494:	28cb883a 	add	r5,r5,r3
    8498:	00000106 	br	84a0 <__mcmp+0x30>
    849c:	20800a2e 	bgeu	r4,r2,84c8 <__mcmp+0x58>
    84a0:	10bfff04 	addi	r2,r2,-4
    84a4:	297fff04 	addi	r5,r5,-4
    84a8:	11800017 	ldw	r6,0(r2)
    84ac:	28c00017 	ldw	r3,0(r5)
    84b0:	30fffa26 	beq	r6,r3,849c <__alt_data_end+0xff00849c>
    84b4:	30c00236 	bltu	r6,r3,84c0 <__mcmp+0x50>
    84b8:	00800044 	movi	r2,1
    84bc:	f800283a 	ret
    84c0:	00bfffc4 	movi	r2,-1
    84c4:	f800283a 	ret
    84c8:	0005883a 	mov	r2,zero
    84cc:	f800283a 	ret

000084d0 <__mdiff>:
    84d0:	28c00417 	ldw	r3,16(r5)
    84d4:	30800417 	ldw	r2,16(r6)
    84d8:	defffa04 	addi	sp,sp,-24
    84dc:	dcc00315 	stw	r19,12(sp)
    84e0:	dc800215 	stw	r18,8(sp)
    84e4:	dfc00515 	stw	ra,20(sp)
    84e8:	dd000415 	stw	r20,16(sp)
    84ec:	dc400115 	stw	r17,4(sp)
    84f0:	dc000015 	stw	r16,0(sp)
    84f4:	1887c83a 	sub	r3,r3,r2
    84f8:	2825883a 	mov	r18,r5
    84fc:	3027883a 	mov	r19,r6
    8500:	1800141e 	bne	r3,zero,8554 <__mdiff+0x84>
    8504:	1085883a 	add	r2,r2,r2
    8508:	1085883a 	add	r2,r2,r2
    850c:	2a000504 	addi	r8,r5,20
    8510:	34000504 	addi	r16,r6,20
    8514:	4087883a 	add	r3,r8,r2
    8518:	8085883a 	add	r2,r16,r2
    851c:	00000106 	br	8524 <__mdiff+0x54>
    8520:	40c0592e 	bgeu	r8,r3,8688 <__mdiff+0x1b8>
    8524:	18ffff04 	addi	r3,r3,-4
    8528:	10bfff04 	addi	r2,r2,-4
    852c:	19c00017 	ldw	r7,0(r3)
    8530:	11400017 	ldw	r5,0(r2)
    8534:	397ffa26 	beq	r7,r5,8520 <__alt_data_end+0xff008520>
    8538:	3940592e 	bgeu	r7,r5,86a0 <__mdiff+0x1d0>
    853c:	9005883a 	mov	r2,r18
    8540:	4023883a 	mov	r17,r8
    8544:	9825883a 	mov	r18,r19
    8548:	05000044 	movi	r20,1
    854c:	1027883a 	mov	r19,r2
    8550:	00000406 	br	8564 <__mdiff+0x94>
    8554:	18005616 	blt	r3,zero,86b0 <__mdiff+0x1e0>
    8558:	34400504 	addi	r17,r6,20
    855c:	2c000504 	addi	r16,r5,20
    8560:	0029883a 	mov	r20,zero
    8564:	91400117 	ldw	r5,4(r18)
    8568:	0007ba80 	call	7ba8 <_Balloc>
    856c:	92400417 	ldw	r9,16(r18)
    8570:	9b000417 	ldw	r12,16(r19)
    8574:	12c00504 	addi	r11,r2,20
    8578:	4a51883a 	add	r8,r9,r9
    857c:	6319883a 	add	r12,r12,r12
    8580:	4211883a 	add	r8,r8,r8
    8584:	6319883a 	add	r12,r12,r12
    8588:	15000315 	stw	r20,12(r2)
    858c:	8211883a 	add	r8,r16,r8
    8590:	8b19883a 	add	r12,r17,r12
    8594:	0007883a 	mov	r3,zero
    8598:	81400017 	ldw	r5,0(r16)
    859c:	89c00017 	ldw	r7,0(r17)
    85a0:	59800104 	addi	r6,r11,4
    85a4:	293fffcc 	andi	r4,r5,65535
    85a8:	20c7883a 	add	r3,r4,r3
    85ac:	393fffcc 	andi	r4,r7,65535
    85b0:	1909c83a 	sub	r4,r3,r4
    85b4:	280ad43a 	srli	r5,r5,16
    85b8:	380ed43a 	srli	r7,r7,16
    85bc:	2007d43a 	srai	r3,r4,16
    85c0:	213fffcc 	andi	r4,r4,65535
    85c4:	29cbc83a 	sub	r5,r5,r7
    85c8:	28c7883a 	add	r3,r5,r3
    85cc:	180a943a 	slli	r5,r3,16
    85d0:	8c400104 	addi	r17,r17,4
    85d4:	84000104 	addi	r16,r16,4
    85d8:	2908b03a 	or	r4,r5,r4
    85dc:	59000015 	stw	r4,0(r11)
    85e0:	1807d43a 	srai	r3,r3,16
    85e4:	3015883a 	mov	r10,r6
    85e8:	3017883a 	mov	r11,r6
    85ec:	8b3fea36 	bltu	r17,r12,8598 <__alt_data_end+0xff008598>
    85f0:	8200162e 	bgeu	r16,r8,864c <__mdiff+0x17c>
    85f4:	8017883a 	mov	r11,r16
    85f8:	59400017 	ldw	r5,0(r11)
    85fc:	31800104 	addi	r6,r6,4
    8600:	5ac00104 	addi	r11,r11,4
    8604:	293fffcc 	andi	r4,r5,65535
    8608:	20c7883a 	add	r3,r4,r3
    860c:	280ed43a 	srli	r7,r5,16
    8610:	180bd43a 	srai	r5,r3,16
    8614:	193fffcc 	andi	r4,r3,65535
    8618:	3947883a 	add	r3,r7,r5
    861c:	180a943a 	slli	r5,r3,16
    8620:	1807d43a 	srai	r3,r3,16
    8624:	2908b03a 	or	r4,r5,r4
    8628:	313fff15 	stw	r4,-4(r6)
    862c:	5a3ff236 	bltu	r11,r8,85f8 <__alt_data_end+0xff0085f8>
    8630:	0406303a 	nor	r3,zero,r16
    8634:	1a07883a 	add	r3,r3,r8
    8638:	1806d0ba 	srli	r3,r3,2
    863c:	18c00044 	addi	r3,r3,1
    8640:	18c7883a 	add	r3,r3,r3
    8644:	18c7883a 	add	r3,r3,r3
    8648:	50d5883a 	add	r10,r10,r3
    864c:	50ffff04 	addi	r3,r10,-4
    8650:	2000041e 	bne	r4,zero,8664 <__mdiff+0x194>
    8654:	18ffff04 	addi	r3,r3,-4
    8658:	19000017 	ldw	r4,0(r3)
    865c:	4a7fffc4 	addi	r9,r9,-1
    8660:	203ffc26 	beq	r4,zero,8654 <__alt_data_end+0xff008654>
    8664:	12400415 	stw	r9,16(r2)
    8668:	dfc00517 	ldw	ra,20(sp)
    866c:	dd000417 	ldw	r20,16(sp)
    8670:	dcc00317 	ldw	r19,12(sp)
    8674:	dc800217 	ldw	r18,8(sp)
    8678:	dc400117 	ldw	r17,4(sp)
    867c:	dc000017 	ldw	r16,0(sp)
    8680:	dec00604 	addi	sp,sp,24
    8684:	f800283a 	ret
    8688:	000b883a 	mov	r5,zero
    868c:	0007ba80 	call	7ba8 <_Balloc>
    8690:	00c00044 	movi	r3,1
    8694:	10c00415 	stw	r3,16(r2)
    8698:	10000515 	stw	zero,20(r2)
    869c:	003ff206 	br	8668 <__alt_data_end+0xff008668>
    86a0:	8023883a 	mov	r17,r16
    86a4:	0029883a 	mov	r20,zero
    86a8:	4021883a 	mov	r16,r8
    86ac:	003fad06 	br	8564 <__alt_data_end+0xff008564>
    86b0:	9005883a 	mov	r2,r18
    86b4:	94400504 	addi	r17,r18,20
    86b8:	9c000504 	addi	r16,r19,20
    86bc:	9825883a 	mov	r18,r19
    86c0:	05000044 	movi	r20,1
    86c4:	1027883a 	mov	r19,r2
    86c8:	003fa606 	br	8564 <__alt_data_end+0xff008564>

000086cc <__ulp>:
    86cc:	295ffc2c 	andhi	r5,r5,32752
    86d0:	00bf3034 	movhi	r2,64704
    86d4:	2887883a 	add	r3,r5,r2
    86d8:	00c0020e 	bge	zero,r3,86e4 <__ulp+0x18>
    86dc:	0005883a 	mov	r2,zero
    86e0:	f800283a 	ret
    86e4:	00c7c83a 	sub	r3,zero,r3
    86e8:	1807d53a 	srai	r3,r3,20
    86ec:	008004c4 	movi	r2,19
    86f0:	10c00b0e 	bge	r2,r3,8720 <__ulp+0x54>
    86f4:	18bffb04 	addi	r2,r3,-20
    86f8:	01000784 	movi	r4,30
    86fc:	0007883a 	mov	r3,zero
    8700:	20800516 	blt	r4,r2,8718 <__ulp+0x4c>
    8704:	010007c4 	movi	r4,31
    8708:	2089c83a 	sub	r4,r4,r2
    870c:	00800044 	movi	r2,1
    8710:	1104983a 	sll	r2,r2,r4
    8714:	f800283a 	ret
    8718:	00800044 	movi	r2,1
    871c:	f800283a 	ret
    8720:	01400234 	movhi	r5,8
    8724:	28c7d83a 	sra	r3,r5,r3
    8728:	0005883a 	mov	r2,zero
    872c:	f800283a 	ret

00008730 <__b2d>:
    8730:	defffa04 	addi	sp,sp,-24
    8734:	dc000015 	stw	r16,0(sp)
    8738:	24000417 	ldw	r16,16(r4)
    873c:	dc400115 	stw	r17,4(sp)
    8740:	24400504 	addi	r17,r4,20
    8744:	8421883a 	add	r16,r16,r16
    8748:	8421883a 	add	r16,r16,r16
    874c:	8c21883a 	add	r16,r17,r16
    8750:	dc800215 	stw	r18,8(sp)
    8754:	84bfff17 	ldw	r18,-4(r16)
    8758:	dd000415 	stw	r20,16(sp)
    875c:	dcc00315 	stw	r19,12(sp)
    8760:	9009883a 	mov	r4,r18
    8764:	2829883a 	mov	r20,r5
    8768:	dfc00515 	stw	ra,20(sp)
    876c:	0007e9c0 	call	7e9c <__hi0bits>
    8770:	00c00804 	movi	r3,32
    8774:	1889c83a 	sub	r4,r3,r2
    8778:	a1000015 	stw	r4,0(r20)
    877c:	01000284 	movi	r4,10
    8780:	84ffff04 	addi	r19,r16,-4
    8784:	20801216 	blt	r4,r2,87d0 <__b2d+0xa0>
    8788:	018002c4 	movi	r6,11
    878c:	308dc83a 	sub	r6,r6,r2
    8790:	9186d83a 	srl	r3,r18,r6
    8794:	18cffc34 	orhi	r3,r3,16368
    8798:	8cc0212e 	bgeu	r17,r19,8820 <__b2d+0xf0>
    879c:	813ffe17 	ldw	r4,-8(r16)
    87a0:	218cd83a 	srl	r6,r4,r6
    87a4:	10800544 	addi	r2,r2,21
    87a8:	9084983a 	sll	r2,r18,r2
    87ac:	1184b03a 	or	r2,r2,r6
    87b0:	dfc00517 	ldw	ra,20(sp)
    87b4:	dd000417 	ldw	r20,16(sp)
    87b8:	dcc00317 	ldw	r19,12(sp)
    87bc:	dc800217 	ldw	r18,8(sp)
    87c0:	dc400117 	ldw	r17,4(sp)
    87c4:	dc000017 	ldw	r16,0(sp)
    87c8:	dec00604 	addi	sp,sp,24
    87cc:	f800283a 	ret
    87d0:	8cc00f2e 	bgeu	r17,r19,8810 <__b2d+0xe0>
    87d4:	117ffd44 	addi	r5,r2,-11
    87d8:	80bffe17 	ldw	r2,-8(r16)
    87dc:	28000e26 	beq	r5,zero,8818 <__b2d+0xe8>
    87e0:	1949c83a 	sub	r4,r3,r5
    87e4:	9164983a 	sll	r18,r18,r5
    87e8:	1106d83a 	srl	r3,r2,r4
    87ec:	81bffe04 	addi	r6,r16,-8
    87f0:	948ffc34 	orhi	r18,r18,16368
    87f4:	90c6b03a 	or	r3,r18,r3
    87f8:	89800e2e 	bgeu	r17,r6,8834 <__b2d+0x104>
    87fc:	81bffd17 	ldw	r6,-12(r16)
    8800:	1144983a 	sll	r2,r2,r5
    8804:	310ad83a 	srl	r5,r6,r4
    8808:	2884b03a 	or	r2,r5,r2
    880c:	003fe806 	br	87b0 <__alt_data_end+0xff0087b0>
    8810:	10bffd44 	addi	r2,r2,-11
    8814:	1000041e 	bne	r2,zero,8828 <__b2d+0xf8>
    8818:	90cffc34 	orhi	r3,r18,16368
    881c:	003fe406 	br	87b0 <__alt_data_end+0xff0087b0>
    8820:	000d883a 	mov	r6,zero
    8824:	003fdf06 	br	87a4 <__alt_data_end+0xff0087a4>
    8828:	90a4983a 	sll	r18,r18,r2
    882c:	0005883a 	mov	r2,zero
    8830:	003ff906 	br	8818 <__alt_data_end+0xff008818>
    8834:	1144983a 	sll	r2,r2,r5
    8838:	003fdd06 	br	87b0 <__alt_data_end+0xff0087b0>

0000883c <__d2b>:
    883c:	defff804 	addi	sp,sp,-32
    8840:	dc000215 	stw	r16,8(sp)
    8844:	3021883a 	mov	r16,r6
    8848:	dc400315 	stw	r17,12(sp)
    884c:	8022907a 	slli	r17,r16,1
    8850:	dd000615 	stw	r20,24(sp)
    8854:	2829883a 	mov	r20,r5
    8858:	01400044 	movi	r5,1
    885c:	dcc00515 	stw	r19,20(sp)
    8860:	dc800415 	stw	r18,16(sp)
    8864:	dfc00715 	stw	ra,28(sp)
    8868:	3825883a 	mov	r18,r7
    886c:	8822d57a 	srli	r17,r17,21
    8870:	0007ba80 	call	7ba8 <_Balloc>
    8874:	1027883a 	mov	r19,r2
    8878:	00800434 	movhi	r2,16
    887c:	10bfffc4 	addi	r2,r2,-1
    8880:	808c703a 	and	r6,r16,r2
    8884:	88000126 	beq	r17,zero,888c <__d2b+0x50>
    8888:	31800434 	orhi	r6,r6,16
    888c:	d9800015 	stw	r6,0(sp)
    8890:	a0002426 	beq	r20,zero,8924 <__d2b+0xe8>
    8894:	d9000104 	addi	r4,sp,4
    8898:	dd000115 	stw	r20,4(sp)
    889c:	0007f040 	call	7f04 <__lo0bits>
    88a0:	d8c00017 	ldw	r3,0(sp)
    88a4:	10002f1e 	bne	r2,zero,8964 <__d2b+0x128>
    88a8:	d9000117 	ldw	r4,4(sp)
    88ac:	99000515 	stw	r4,20(r19)
    88b0:	1821003a 	cmpeq	r16,r3,zero
    88b4:	01000084 	movi	r4,2
    88b8:	2421c83a 	sub	r16,r4,r16
    88bc:	98c00615 	stw	r3,24(r19)
    88c0:	9c000415 	stw	r16,16(r19)
    88c4:	88001f1e 	bne	r17,zero,8944 <__d2b+0x108>
    88c8:	10bef384 	addi	r2,r2,-1074
    88cc:	90800015 	stw	r2,0(r18)
    88d0:	00900034 	movhi	r2,16384
    88d4:	10bfffc4 	addi	r2,r2,-1
    88d8:	8085883a 	add	r2,r16,r2
    88dc:	1085883a 	add	r2,r2,r2
    88e0:	1085883a 	add	r2,r2,r2
    88e4:	9885883a 	add	r2,r19,r2
    88e8:	11000517 	ldw	r4,20(r2)
    88ec:	8020917a 	slli	r16,r16,5
    88f0:	0007e9c0 	call	7e9c <__hi0bits>
    88f4:	d8c00817 	ldw	r3,32(sp)
    88f8:	8085c83a 	sub	r2,r16,r2
    88fc:	18800015 	stw	r2,0(r3)
    8900:	9805883a 	mov	r2,r19
    8904:	dfc00717 	ldw	ra,28(sp)
    8908:	dd000617 	ldw	r20,24(sp)
    890c:	dcc00517 	ldw	r19,20(sp)
    8910:	dc800417 	ldw	r18,16(sp)
    8914:	dc400317 	ldw	r17,12(sp)
    8918:	dc000217 	ldw	r16,8(sp)
    891c:	dec00804 	addi	sp,sp,32
    8920:	f800283a 	ret
    8924:	d809883a 	mov	r4,sp
    8928:	0007f040 	call	7f04 <__lo0bits>
    892c:	d8c00017 	ldw	r3,0(sp)
    8930:	04000044 	movi	r16,1
    8934:	9c000415 	stw	r16,16(r19)
    8938:	98c00515 	stw	r3,20(r19)
    893c:	10800804 	addi	r2,r2,32
    8940:	883fe126 	beq	r17,zero,88c8 <__alt_data_end+0xff0088c8>
    8944:	00c00d44 	movi	r3,53
    8948:	8c7ef344 	addi	r17,r17,-1075
    894c:	88a3883a 	add	r17,r17,r2
    8950:	1885c83a 	sub	r2,r3,r2
    8954:	d8c00817 	ldw	r3,32(sp)
    8958:	94400015 	stw	r17,0(r18)
    895c:	18800015 	stw	r2,0(r3)
    8960:	003fe706 	br	8900 <__alt_data_end+0xff008900>
    8964:	01000804 	movi	r4,32
    8968:	2089c83a 	sub	r4,r4,r2
    896c:	1908983a 	sll	r4,r3,r4
    8970:	d9400117 	ldw	r5,4(sp)
    8974:	1886d83a 	srl	r3,r3,r2
    8978:	2148b03a 	or	r4,r4,r5
    897c:	99000515 	stw	r4,20(r19)
    8980:	d8c00015 	stw	r3,0(sp)
    8984:	003fca06 	br	88b0 <__alt_data_end+0xff0088b0>

00008988 <__ratio>:
    8988:	defff904 	addi	sp,sp,-28
    898c:	dc400315 	stw	r17,12(sp)
    8990:	2823883a 	mov	r17,r5
    8994:	d9400104 	addi	r5,sp,4
    8998:	dfc00615 	stw	ra,24(sp)
    899c:	dcc00515 	stw	r19,20(sp)
    89a0:	dc800415 	stw	r18,16(sp)
    89a4:	2027883a 	mov	r19,r4
    89a8:	dc000215 	stw	r16,8(sp)
    89ac:	00087300 	call	8730 <__b2d>
    89b0:	d80b883a 	mov	r5,sp
    89b4:	8809883a 	mov	r4,r17
    89b8:	1025883a 	mov	r18,r2
    89bc:	1821883a 	mov	r16,r3
    89c0:	00087300 	call	8730 <__b2d>
    89c4:	8a000417 	ldw	r8,16(r17)
    89c8:	99000417 	ldw	r4,16(r19)
    89cc:	d9400117 	ldw	r5,4(sp)
    89d0:	2209c83a 	sub	r4,r4,r8
    89d4:	2010917a 	slli	r8,r4,5
    89d8:	d9000017 	ldw	r4,0(sp)
    89dc:	2909c83a 	sub	r4,r5,r4
    89e0:	4109883a 	add	r4,r8,r4
    89e4:	01000e0e 	bge	zero,r4,8a20 <__ratio+0x98>
    89e8:	2008953a 	slli	r4,r4,20
    89ec:	2421883a 	add	r16,r4,r16
    89f0:	100d883a 	mov	r6,r2
    89f4:	180f883a 	mov	r7,r3
    89f8:	9009883a 	mov	r4,r18
    89fc:	800b883a 	mov	r5,r16
    8a00:	000c8200 	call	c820 <__divdf3>
    8a04:	dfc00617 	ldw	ra,24(sp)
    8a08:	dcc00517 	ldw	r19,20(sp)
    8a0c:	dc800417 	ldw	r18,16(sp)
    8a10:	dc400317 	ldw	r17,12(sp)
    8a14:	dc000217 	ldw	r16,8(sp)
    8a18:	dec00704 	addi	sp,sp,28
    8a1c:	f800283a 	ret
    8a20:	2008953a 	slli	r4,r4,20
    8a24:	1907c83a 	sub	r3,r3,r4
    8a28:	003ff106 	br	89f0 <__alt_data_end+0xff0089f0>

00008a2c <_mprec_log10>:
    8a2c:	defffe04 	addi	sp,sp,-8
    8a30:	dc000015 	stw	r16,0(sp)
    8a34:	dfc00115 	stw	ra,4(sp)
    8a38:	008005c4 	movi	r2,23
    8a3c:	2021883a 	mov	r16,r4
    8a40:	11000d0e 	bge	r2,r4,8a78 <_mprec_log10+0x4c>
    8a44:	0005883a 	mov	r2,zero
    8a48:	00cffc34 	movhi	r3,16368
    8a4c:	843fffc4 	addi	r16,r16,-1
    8a50:	000d883a 	mov	r6,zero
    8a54:	01d00934 	movhi	r7,16420
    8a58:	1009883a 	mov	r4,r2
    8a5c:	180b883a 	mov	r5,r3
    8a60:	000d3600 	call	d360 <__muldf3>
    8a64:	803ff91e 	bne	r16,zero,8a4c <__alt_data_end+0xff008a4c>
    8a68:	dfc00117 	ldw	ra,4(sp)
    8a6c:	dc000017 	ldw	r16,0(sp)
    8a70:	dec00204 	addi	sp,sp,8
    8a74:	f800283a 	ret
    8a78:	202090fa 	slli	r16,r4,3
    8a7c:	00800074 	movhi	r2,1
    8a80:	1081c304 	addi	r2,r2,1804
    8a84:	1421883a 	add	r16,r2,r16
    8a88:	80800017 	ldw	r2,0(r16)
    8a8c:	80c00117 	ldw	r3,4(r16)
    8a90:	dfc00117 	ldw	ra,4(sp)
    8a94:	dc000017 	ldw	r16,0(sp)
    8a98:	dec00204 	addi	sp,sp,8
    8a9c:	f800283a 	ret

00008aa0 <__copybits>:
    8aa0:	297fffc4 	addi	r5,r5,-1
    8aa4:	280fd17a 	srai	r7,r5,5
    8aa8:	30c00417 	ldw	r3,16(r6)
    8aac:	30800504 	addi	r2,r6,20
    8ab0:	39c00044 	addi	r7,r7,1
    8ab4:	18c7883a 	add	r3,r3,r3
    8ab8:	39cf883a 	add	r7,r7,r7
    8abc:	18c7883a 	add	r3,r3,r3
    8ac0:	39cf883a 	add	r7,r7,r7
    8ac4:	10c7883a 	add	r3,r2,r3
    8ac8:	21cf883a 	add	r7,r4,r7
    8acc:	10c00d2e 	bgeu	r2,r3,8b04 <__copybits+0x64>
    8ad0:	200b883a 	mov	r5,r4
    8ad4:	12000017 	ldw	r8,0(r2)
    8ad8:	29400104 	addi	r5,r5,4
    8adc:	10800104 	addi	r2,r2,4
    8ae0:	2a3fff15 	stw	r8,-4(r5)
    8ae4:	10fffb36 	bltu	r2,r3,8ad4 <__alt_data_end+0xff008ad4>
    8ae8:	1985c83a 	sub	r2,r3,r6
    8aec:	10bffac4 	addi	r2,r2,-21
    8af0:	1004d0ba 	srli	r2,r2,2
    8af4:	10800044 	addi	r2,r2,1
    8af8:	1085883a 	add	r2,r2,r2
    8afc:	1085883a 	add	r2,r2,r2
    8b00:	2089883a 	add	r4,r4,r2
    8b04:	21c0032e 	bgeu	r4,r7,8b14 <__copybits+0x74>
    8b08:	20000015 	stw	zero,0(r4)
    8b0c:	21000104 	addi	r4,r4,4
    8b10:	21fffd36 	bltu	r4,r7,8b08 <__alt_data_end+0xff008b08>
    8b14:	f800283a 	ret

00008b18 <__any_on>:
    8b18:	20c00417 	ldw	r3,16(r4)
    8b1c:	2805d17a 	srai	r2,r5,5
    8b20:	21000504 	addi	r4,r4,20
    8b24:	18800d0e 	bge	r3,r2,8b5c <__any_on+0x44>
    8b28:	18c7883a 	add	r3,r3,r3
    8b2c:	18c7883a 	add	r3,r3,r3
    8b30:	20c7883a 	add	r3,r4,r3
    8b34:	20c0192e 	bgeu	r4,r3,8b9c <__any_on+0x84>
    8b38:	18bfff17 	ldw	r2,-4(r3)
    8b3c:	18ffff04 	addi	r3,r3,-4
    8b40:	1000041e 	bne	r2,zero,8b54 <__any_on+0x3c>
    8b44:	20c0142e 	bgeu	r4,r3,8b98 <__any_on+0x80>
    8b48:	18ffff04 	addi	r3,r3,-4
    8b4c:	19400017 	ldw	r5,0(r3)
    8b50:	283ffc26 	beq	r5,zero,8b44 <__alt_data_end+0xff008b44>
    8b54:	00800044 	movi	r2,1
    8b58:	f800283a 	ret
    8b5c:	10c00a0e 	bge	r2,r3,8b88 <__any_on+0x70>
    8b60:	1085883a 	add	r2,r2,r2
    8b64:	1085883a 	add	r2,r2,r2
    8b68:	294007cc 	andi	r5,r5,31
    8b6c:	2087883a 	add	r3,r4,r2
    8b70:	283ff026 	beq	r5,zero,8b34 <__alt_data_end+0xff008b34>
    8b74:	19800017 	ldw	r6,0(r3)
    8b78:	3144d83a 	srl	r2,r6,r5
    8b7c:	114a983a 	sll	r5,r2,r5
    8b80:	317ff41e 	bne	r6,r5,8b54 <__alt_data_end+0xff008b54>
    8b84:	003feb06 	br	8b34 <__alt_data_end+0xff008b34>
    8b88:	1085883a 	add	r2,r2,r2
    8b8c:	1085883a 	add	r2,r2,r2
    8b90:	2087883a 	add	r3,r4,r2
    8b94:	003fe706 	br	8b34 <__alt_data_end+0xff008b34>
    8b98:	f800283a 	ret
    8b9c:	0005883a 	mov	r2,zero
    8ba0:	f800283a 	ret

00008ba4 <_realloc_r>:
    8ba4:	defff604 	addi	sp,sp,-40
    8ba8:	dc800215 	stw	r18,8(sp)
    8bac:	dfc00915 	stw	ra,36(sp)
    8bb0:	df000815 	stw	fp,32(sp)
    8bb4:	ddc00715 	stw	r23,28(sp)
    8bb8:	dd800615 	stw	r22,24(sp)
    8bbc:	dd400515 	stw	r21,20(sp)
    8bc0:	dd000415 	stw	r20,16(sp)
    8bc4:	dcc00315 	stw	r19,12(sp)
    8bc8:	dc400115 	stw	r17,4(sp)
    8bcc:	dc000015 	stw	r16,0(sp)
    8bd0:	3025883a 	mov	r18,r6
    8bd4:	2800b726 	beq	r5,zero,8eb4 <_realloc_r+0x310>
    8bd8:	282b883a 	mov	r21,r5
    8bdc:	2029883a 	mov	r20,r4
    8be0:	000e9440 	call	e944 <__malloc_lock>
    8be4:	a8bfff17 	ldw	r2,-4(r21)
    8be8:	043fff04 	movi	r16,-4
    8bec:	90c002c4 	addi	r3,r18,11
    8bf0:	01000584 	movi	r4,22
    8bf4:	acfffe04 	addi	r19,r21,-8
    8bf8:	1420703a 	and	r16,r2,r16
    8bfc:	20c0332e 	bgeu	r4,r3,8ccc <_realloc_r+0x128>
    8c00:	047ffe04 	movi	r17,-8
    8c04:	1c62703a 	and	r17,r3,r17
    8c08:	8807883a 	mov	r3,r17
    8c0c:	88005816 	blt	r17,zero,8d70 <_realloc_r+0x1cc>
    8c10:	8c805736 	bltu	r17,r18,8d70 <_realloc_r+0x1cc>
    8c14:	80c0300e 	bge	r16,r3,8cd8 <_realloc_r+0x134>
    8c18:	07000074 	movhi	fp,1
    8c1c:	e7024404 	addi	fp,fp,2320
    8c20:	e1c00217 	ldw	r7,8(fp)
    8c24:	9c09883a 	add	r4,r19,r16
    8c28:	22000117 	ldw	r8,4(r4)
    8c2c:	21c06326 	beq	r4,r7,8dbc <_realloc_r+0x218>
    8c30:	017fff84 	movi	r5,-2
    8c34:	414a703a 	and	r5,r8,r5
    8c38:	214b883a 	add	r5,r4,r5
    8c3c:	29800117 	ldw	r6,4(r5)
    8c40:	3180004c 	andi	r6,r6,1
    8c44:	30003f26 	beq	r6,zero,8d44 <_realloc_r+0x1a0>
    8c48:	1080004c 	andi	r2,r2,1
    8c4c:	10008326 	beq	r2,zero,8e5c <_realloc_r+0x2b8>
    8c50:	900b883a 	mov	r5,r18
    8c54:	a009883a 	mov	r4,r20
    8c58:	0001cbc0 	call	1cbc <_malloc_r>
    8c5c:	1025883a 	mov	r18,r2
    8c60:	10011e26 	beq	r2,zero,90dc <_realloc_r+0x538>
    8c64:	a93fff17 	ldw	r4,-4(r21)
    8c68:	10fffe04 	addi	r3,r2,-8
    8c6c:	00bfff84 	movi	r2,-2
    8c70:	2084703a 	and	r2,r4,r2
    8c74:	9885883a 	add	r2,r19,r2
    8c78:	1880ee26 	beq	r3,r2,9034 <_realloc_r+0x490>
    8c7c:	81bfff04 	addi	r6,r16,-4
    8c80:	00800904 	movi	r2,36
    8c84:	1180b836 	bltu	r2,r6,8f68 <_realloc_r+0x3c4>
    8c88:	00c004c4 	movi	r3,19
    8c8c:	19809636 	bltu	r3,r6,8ee8 <_realloc_r+0x344>
    8c90:	9005883a 	mov	r2,r18
    8c94:	a807883a 	mov	r3,r21
    8c98:	19000017 	ldw	r4,0(r3)
    8c9c:	11000015 	stw	r4,0(r2)
    8ca0:	19000117 	ldw	r4,4(r3)
    8ca4:	11000115 	stw	r4,4(r2)
    8ca8:	18c00217 	ldw	r3,8(r3)
    8cac:	10c00215 	stw	r3,8(r2)
    8cb0:	a80b883a 	mov	r5,r21
    8cb4:	a009883a 	mov	r4,r20
    8cb8:	0006b0c0 	call	6b0c <_free_r>
    8cbc:	a009883a 	mov	r4,r20
    8cc0:	000e9480 	call	e948 <__malloc_unlock>
    8cc4:	9005883a 	mov	r2,r18
    8cc8:	00001206 	br	8d14 <_realloc_r+0x170>
    8ccc:	00c00404 	movi	r3,16
    8cd0:	1823883a 	mov	r17,r3
    8cd4:	003fce06 	br	8c10 <__alt_data_end+0xff008c10>
    8cd8:	a825883a 	mov	r18,r21
    8cdc:	8445c83a 	sub	r2,r16,r17
    8ce0:	00c003c4 	movi	r3,15
    8ce4:	18802636 	bltu	r3,r2,8d80 <_realloc_r+0x1dc>
    8ce8:	99800117 	ldw	r6,4(r19)
    8cec:	9c07883a 	add	r3,r19,r16
    8cf0:	3180004c 	andi	r6,r6,1
    8cf4:	3420b03a 	or	r16,r6,r16
    8cf8:	9c000115 	stw	r16,4(r19)
    8cfc:	18800117 	ldw	r2,4(r3)
    8d00:	10800054 	ori	r2,r2,1
    8d04:	18800115 	stw	r2,4(r3)
    8d08:	a009883a 	mov	r4,r20
    8d0c:	000e9480 	call	e948 <__malloc_unlock>
    8d10:	9005883a 	mov	r2,r18
    8d14:	dfc00917 	ldw	ra,36(sp)
    8d18:	df000817 	ldw	fp,32(sp)
    8d1c:	ddc00717 	ldw	r23,28(sp)
    8d20:	dd800617 	ldw	r22,24(sp)
    8d24:	dd400517 	ldw	r21,20(sp)
    8d28:	dd000417 	ldw	r20,16(sp)
    8d2c:	dcc00317 	ldw	r19,12(sp)
    8d30:	dc800217 	ldw	r18,8(sp)
    8d34:	dc400117 	ldw	r17,4(sp)
    8d38:	dc000017 	ldw	r16,0(sp)
    8d3c:	dec00a04 	addi	sp,sp,40
    8d40:	f800283a 	ret
    8d44:	017fff04 	movi	r5,-4
    8d48:	414a703a 	and	r5,r8,r5
    8d4c:	814d883a 	add	r6,r16,r5
    8d50:	30c01f16 	blt	r6,r3,8dd0 <_realloc_r+0x22c>
    8d54:	20800317 	ldw	r2,12(r4)
    8d58:	20c00217 	ldw	r3,8(r4)
    8d5c:	a825883a 	mov	r18,r21
    8d60:	3021883a 	mov	r16,r6
    8d64:	18800315 	stw	r2,12(r3)
    8d68:	10c00215 	stw	r3,8(r2)
    8d6c:	003fdb06 	br	8cdc <__alt_data_end+0xff008cdc>
    8d70:	00800304 	movi	r2,12
    8d74:	a0800015 	stw	r2,0(r20)
    8d78:	0005883a 	mov	r2,zero
    8d7c:	003fe506 	br	8d14 <__alt_data_end+0xff008d14>
    8d80:	98c00117 	ldw	r3,4(r19)
    8d84:	9c4b883a 	add	r5,r19,r17
    8d88:	11000054 	ori	r4,r2,1
    8d8c:	18c0004c 	andi	r3,r3,1
    8d90:	1c62b03a 	or	r17,r3,r17
    8d94:	9c400115 	stw	r17,4(r19)
    8d98:	29000115 	stw	r4,4(r5)
    8d9c:	2885883a 	add	r2,r5,r2
    8da0:	10c00117 	ldw	r3,4(r2)
    8da4:	29400204 	addi	r5,r5,8
    8da8:	a009883a 	mov	r4,r20
    8dac:	18c00054 	ori	r3,r3,1
    8db0:	10c00115 	stw	r3,4(r2)
    8db4:	0006b0c0 	call	6b0c <_free_r>
    8db8:	003fd306 	br	8d08 <__alt_data_end+0xff008d08>
    8dbc:	017fff04 	movi	r5,-4
    8dc0:	414a703a 	and	r5,r8,r5
    8dc4:	89800404 	addi	r6,r17,16
    8dc8:	8151883a 	add	r8,r16,r5
    8dcc:	4180590e 	bge	r8,r6,8f34 <_realloc_r+0x390>
    8dd0:	1080004c 	andi	r2,r2,1
    8dd4:	103f9e1e 	bne	r2,zero,8c50 <__alt_data_end+0xff008c50>
    8dd8:	adbffe17 	ldw	r22,-8(r21)
    8ddc:	00bfff04 	movi	r2,-4
    8de0:	9dadc83a 	sub	r22,r19,r22
    8de4:	b1800117 	ldw	r6,4(r22)
    8de8:	3084703a 	and	r2,r6,r2
    8dec:	20002026 	beq	r4,zero,8e70 <_realloc_r+0x2cc>
    8df0:	80af883a 	add	r23,r16,r2
    8df4:	b96f883a 	add	r23,r23,r5
    8df8:	21c05f26 	beq	r4,r7,8f78 <_realloc_r+0x3d4>
    8dfc:	b8c01c16 	blt	r23,r3,8e70 <_realloc_r+0x2cc>
    8e00:	20800317 	ldw	r2,12(r4)
    8e04:	20c00217 	ldw	r3,8(r4)
    8e08:	81bfff04 	addi	r6,r16,-4
    8e0c:	01000904 	movi	r4,36
    8e10:	18800315 	stw	r2,12(r3)
    8e14:	10c00215 	stw	r3,8(r2)
    8e18:	b0c00217 	ldw	r3,8(r22)
    8e1c:	b0800317 	ldw	r2,12(r22)
    8e20:	b4800204 	addi	r18,r22,8
    8e24:	18800315 	stw	r2,12(r3)
    8e28:	10c00215 	stw	r3,8(r2)
    8e2c:	21801b36 	bltu	r4,r6,8e9c <_realloc_r+0x2f8>
    8e30:	008004c4 	movi	r2,19
    8e34:	1180352e 	bgeu	r2,r6,8f0c <_realloc_r+0x368>
    8e38:	a8800017 	ldw	r2,0(r21)
    8e3c:	b0800215 	stw	r2,8(r22)
    8e40:	a8800117 	ldw	r2,4(r21)
    8e44:	b0800315 	stw	r2,12(r22)
    8e48:	008006c4 	movi	r2,27
    8e4c:	11807f36 	bltu	r2,r6,904c <_realloc_r+0x4a8>
    8e50:	b0800404 	addi	r2,r22,16
    8e54:	ad400204 	addi	r21,r21,8
    8e58:	00002d06 	br	8f10 <_realloc_r+0x36c>
    8e5c:	adbffe17 	ldw	r22,-8(r21)
    8e60:	00bfff04 	movi	r2,-4
    8e64:	9dadc83a 	sub	r22,r19,r22
    8e68:	b1000117 	ldw	r4,4(r22)
    8e6c:	2084703a 	and	r2,r4,r2
    8e70:	b03f7726 	beq	r22,zero,8c50 <__alt_data_end+0xff008c50>
    8e74:	80af883a 	add	r23,r16,r2
    8e78:	b8ff7516 	blt	r23,r3,8c50 <__alt_data_end+0xff008c50>
    8e7c:	b0800317 	ldw	r2,12(r22)
    8e80:	b0c00217 	ldw	r3,8(r22)
    8e84:	81bfff04 	addi	r6,r16,-4
    8e88:	01000904 	movi	r4,36
    8e8c:	18800315 	stw	r2,12(r3)
    8e90:	10c00215 	stw	r3,8(r2)
    8e94:	b4800204 	addi	r18,r22,8
    8e98:	21bfe52e 	bgeu	r4,r6,8e30 <__alt_data_end+0xff008e30>
    8e9c:	a80b883a 	mov	r5,r21
    8ea0:	9009883a 	mov	r4,r18
    8ea4:	00079240 	call	7924 <memmove>
    8ea8:	b821883a 	mov	r16,r23
    8eac:	b027883a 	mov	r19,r22
    8eb0:	003f8a06 	br	8cdc <__alt_data_end+0xff008cdc>
    8eb4:	300b883a 	mov	r5,r6
    8eb8:	dfc00917 	ldw	ra,36(sp)
    8ebc:	df000817 	ldw	fp,32(sp)
    8ec0:	ddc00717 	ldw	r23,28(sp)
    8ec4:	dd800617 	ldw	r22,24(sp)
    8ec8:	dd400517 	ldw	r21,20(sp)
    8ecc:	dd000417 	ldw	r20,16(sp)
    8ed0:	dcc00317 	ldw	r19,12(sp)
    8ed4:	dc800217 	ldw	r18,8(sp)
    8ed8:	dc400117 	ldw	r17,4(sp)
    8edc:	dc000017 	ldw	r16,0(sp)
    8ee0:	dec00a04 	addi	sp,sp,40
    8ee4:	0001cbc1 	jmpi	1cbc <_malloc_r>
    8ee8:	a8c00017 	ldw	r3,0(r21)
    8eec:	90c00015 	stw	r3,0(r18)
    8ef0:	a8c00117 	ldw	r3,4(r21)
    8ef4:	90c00115 	stw	r3,4(r18)
    8ef8:	00c006c4 	movi	r3,27
    8efc:	19804536 	bltu	r3,r6,9014 <_realloc_r+0x470>
    8f00:	90800204 	addi	r2,r18,8
    8f04:	a8c00204 	addi	r3,r21,8
    8f08:	003f6306 	br	8c98 <__alt_data_end+0xff008c98>
    8f0c:	9005883a 	mov	r2,r18
    8f10:	a8c00017 	ldw	r3,0(r21)
    8f14:	b821883a 	mov	r16,r23
    8f18:	b027883a 	mov	r19,r22
    8f1c:	10c00015 	stw	r3,0(r2)
    8f20:	a8c00117 	ldw	r3,4(r21)
    8f24:	10c00115 	stw	r3,4(r2)
    8f28:	a8c00217 	ldw	r3,8(r21)
    8f2c:	10c00215 	stw	r3,8(r2)
    8f30:	003f6a06 	br	8cdc <__alt_data_end+0xff008cdc>
    8f34:	9c67883a 	add	r19,r19,r17
    8f38:	4445c83a 	sub	r2,r8,r17
    8f3c:	e4c00215 	stw	r19,8(fp)
    8f40:	10800054 	ori	r2,r2,1
    8f44:	98800115 	stw	r2,4(r19)
    8f48:	a8bfff17 	ldw	r2,-4(r21)
    8f4c:	a009883a 	mov	r4,r20
    8f50:	1080004c 	andi	r2,r2,1
    8f54:	1462b03a 	or	r17,r2,r17
    8f58:	ac7fff15 	stw	r17,-4(r21)
    8f5c:	000e9480 	call	e948 <__malloc_unlock>
    8f60:	a805883a 	mov	r2,r21
    8f64:	003f6b06 	br	8d14 <__alt_data_end+0xff008d14>
    8f68:	a80b883a 	mov	r5,r21
    8f6c:	9009883a 	mov	r4,r18
    8f70:	00079240 	call	7924 <memmove>
    8f74:	003f4e06 	br	8cb0 <__alt_data_end+0xff008cb0>
    8f78:	89000404 	addi	r4,r17,16
    8f7c:	b93fbc16 	blt	r23,r4,8e70 <__alt_data_end+0xff008e70>
    8f80:	b0800317 	ldw	r2,12(r22)
    8f84:	b0c00217 	ldw	r3,8(r22)
    8f88:	81bfff04 	addi	r6,r16,-4
    8f8c:	01000904 	movi	r4,36
    8f90:	18800315 	stw	r2,12(r3)
    8f94:	10c00215 	stw	r3,8(r2)
    8f98:	b4800204 	addi	r18,r22,8
    8f9c:	21804336 	bltu	r4,r6,90ac <_realloc_r+0x508>
    8fa0:	008004c4 	movi	r2,19
    8fa4:	11803f2e 	bgeu	r2,r6,90a4 <_realloc_r+0x500>
    8fa8:	a8800017 	ldw	r2,0(r21)
    8fac:	b0800215 	stw	r2,8(r22)
    8fb0:	a8800117 	ldw	r2,4(r21)
    8fb4:	b0800315 	stw	r2,12(r22)
    8fb8:	008006c4 	movi	r2,27
    8fbc:	11803f36 	bltu	r2,r6,90bc <_realloc_r+0x518>
    8fc0:	b0800404 	addi	r2,r22,16
    8fc4:	ad400204 	addi	r21,r21,8
    8fc8:	a8c00017 	ldw	r3,0(r21)
    8fcc:	10c00015 	stw	r3,0(r2)
    8fd0:	a8c00117 	ldw	r3,4(r21)
    8fd4:	10c00115 	stw	r3,4(r2)
    8fd8:	a8c00217 	ldw	r3,8(r21)
    8fdc:	10c00215 	stw	r3,8(r2)
    8fe0:	b447883a 	add	r3,r22,r17
    8fe4:	bc45c83a 	sub	r2,r23,r17
    8fe8:	e0c00215 	stw	r3,8(fp)
    8fec:	10800054 	ori	r2,r2,1
    8ff0:	18800115 	stw	r2,4(r3)
    8ff4:	b0800117 	ldw	r2,4(r22)
    8ff8:	a009883a 	mov	r4,r20
    8ffc:	1080004c 	andi	r2,r2,1
    9000:	1462b03a 	or	r17,r2,r17
    9004:	b4400115 	stw	r17,4(r22)
    9008:	000e9480 	call	e948 <__malloc_unlock>
    900c:	9005883a 	mov	r2,r18
    9010:	003f4006 	br	8d14 <__alt_data_end+0xff008d14>
    9014:	a8c00217 	ldw	r3,8(r21)
    9018:	90c00215 	stw	r3,8(r18)
    901c:	a8c00317 	ldw	r3,12(r21)
    9020:	90c00315 	stw	r3,12(r18)
    9024:	30801126 	beq	r6,r2,906c <_realloc_r+0x4c8>
    9028:	90800404 	addi	r2,r18,16
    902c:	a8c00404 	addi	r3,r21,16
    9030:	003f1906 	br	8c98 <__alt_data_end+0xff008c98>
    9034:	90ffff17 	ldw	r3,-4(r18)
    9038:	00bfff04 	movi	r2,-4
    903c:	a825883a 	mov	r18,r21
    9040:	1884703a 	and	r2,r3,r2
    9044:	80a1883a 	add	r16,r16,r2
    9048:	003f2406 	br	8cdc <__alt_data_end+0xff008cdc>
    904c:	a8800217 	ldw	r2,8(r21)
    9050:	b0800415 	stw	r2,16(r22)
    9054:	a8800317 	ldw	r2,12(r21)
    9058:	b0800515 	stw	r2,20(r22)
    905c:	31000a26 	beq	r6,r4,9088 <_realloc_r+0x4e4>
    9060:	b0800604 	addi	r2,r22,24
    9064:	ad400404 	addi	r21,r21,16
    9068:	003fa906 	br	8f10 <__alt_data_end+0xff008f10>
    906c:	a9000417 	ldw	r4,16(r21)
    9070:	90800604 	addi	r2,r18,24
    9074:	a8c00604 	addi	r3,r21,24
    9078:	91000415 	stw	r4,16(r18)
    907c:	a9000517 	ldw	r4,20(r21)
    9080:	91000515 	stw	r4,20(r18)
    9084:	003f0406 	br	8c98 <__alt_data_end+0xff008c98>
    9088:	a8c00417 	ldw	r3,16(r21)
    908c:	ad400604 	addi	r21,r21,24
    9090:	b0800804 	addi	r2,r22,32
    9094:	b0c00615 	stw	r3,24(r22)
    9098:	a8ffff17 	ldw	r3,-4(r21)
    909c:	b0c00715 	stw	r3,28(r22)
    90a0:	003f9b06 	br	8f10 <__alt_data_end+0xff008f10>
    90a4:	9005883a 	mov	r2,r18
    90a8:	003fc706 	br	8fc8 <__alt_data_end+0xff008fc8>
    90ac:	a80b883a 	mov	r5,r21
    90b0:	9009883a 	mov	r4,r18
    90b4:	00079240 	call	7924 <memmove>
    90b8:	003fc906 	br	8fe0 <__alt_data_end+0xff008fe0>
    90bc:	a8800217 	ldw	r2,8(r21)
    90c0:	b0800415 	stw	r2,16(r22)
    90c4:	a8800317 	ldw	r2,12(r21)
    90c8:	b0800515 	stw	r2,20(r22)
    90cc:	31000726 	beq	r6,r4,90ec <_realloc_r+0x548>
    90d0:	b0800604 	addi	r2,r22,24
    90d4:	ad400404 	addi	r21,r21,16
    90d8:	003fbb06 	br	8fc8 <__alt_data_end+0xff008fc8>
    90dc:	a009883a 	mov	r4,r20
    90e0:	000e9480 	call	e948 <__malloc_unlock>
    90e4:	0005883a 	mov	r2,zero
    90e8:	003f0a06 	br	8d14 <__alt_data_end+0xff008d14>
    90ec:	a8c00417 	ldw	r3,16(r21)
    90f0:	ad400604 	addi	r21,r21,24
    90f4:	b0800804 	addi	r2,r22,32
    90f8:	b0c00615 	stw	r3,24(r22)
    90fc:	a8ffff17 	ldw	r3,-4(r21)
    9100:	b0c00715 	stw	r3,28(r22)
    9104:	003fb006 	br	8fc8 <__alt_data_end+0xff008fc8>

00009108 <__fpclassifyd>:
    9108:	00a00034 	movhi	r2,32768
    910c:	10bfffc4 	addi	r2,r2,-1
    9110:	2884703a 	and	r2,r5,r2
    9114:	10000726 	beq	r2,zero,9134 <__fpclassifyd+0x2c>
    9118:	00fffc34 	movhi	r3,65520
    911c:	019ff834 	movhi	r6,32736
    9120:	28c7883a 	add	r3,r5,r3
    9124:	31bfffc4 	addi	r6,r6,-1
    9128:	30c00536 	bltu	r6,r3,9140 <__fpclassifyd+0x38>
    912c:	00800104 	movi	r2,4
    9130:	f800283a 	ret
    9134:	2000021e 	bne	r4,zero,9140 <__fpclassifyd+0x38>
    9138:	00800084 	movi	r2,2
    913c:	f800283a 	ret
    9140:	00dffc34 	movhi	r3,32752
    9144:	019ff834 	movhi	r6,32736
    9148:	28cb883a 	add	r5,r5,r3
    914c:	31bfffc4 	addi	r6,r6,-1
    9150:	317ff62e 	bgeu	r6,r5,912c <__alt_data_end+0xff00912c>
    9154:	01400434 	movhi	r5,16
    9158:	297fffc4 	addi	r5,r5,-1
    915c:	28800236 	bltu	r5,r2,9168 <__fpclassifyd+0x60>
    9160:	008000c4 	movi	r2,3
    9164:	f800283a 	ret
    9168:	10c00226 	beq	r2,r3,9174 <__fpclassifyd+0x6c>
    916c:	0005883a 	mov	r2,zero
    9170:	f800283a 	ret
    9174:	2005003a 	cmpeq	r2,r4,zero
    9178:	f800283a 	ret

0000917c <__sread>:
    917c:	defffe04 	addi	sp,sp,-8
    9180:	dc000015 	stw	r16,0(sp)
    9184:	2821883a 	mov	r16,r5
    9188:	2940038f 	ldh	r5,14(r5)
    918c:	dfc00115 	stw	ra,4(sp)
    9190:	000af700 	call	af70 <_read_r>
    9194:	10000716 	blt	r2,zero,91b4 <__sread+0x38>
    9198:	80c01417 	ldw	r3,80(r16)
    919c:	1887883a 	add	r3,r3,r2
    91a0:	80c01415 	stw	r3,80(r16)
    91a4:	dfc00117 	ldw	ra,4(sp)
    91a8:	dc000017 	ldw	r16,0(sp)
    91ac:	dec00204 	addi	sp,sp,8
    91b0:	f800283a 	ret
    91b4:	80c0030b 	ldhu	r3,12(r16)
    91b8:	18fbffcc 	andi	r3,r3,61439
    91bc:	80c0030d 	sth	r3,12(r16)
    91c0:	dfc00117 	ldw	ra,4(sp)
    91c4:	dc000017 	ldw	r16,0(sp)
    91c8:	dec00204 	addi	sp,sp,8
    91cc:	f800283a 	ret

000091d0 <__seofread>:
    91d0:	0005883a 	mov	r2,zero
    91d4:	f800283a 	ret

000091d8 <__swrite>:
    91d8:	2880030b 	ldhu	r2,12(r5)
    91dc:	defffb04 	addi	sp,sp,-20
    91e0:	dcc00315 	stw	r19,12(sp)
    91e4:	dc800215 	stw	r18,8(sp)
    91e8:	dc400115 	stw	r17,4(sp)
    91ec:	dc000015 	stw	r16,0(sp)
    91f0:	dfc00415 	stw	ra,16(sp)
    91f4:	10c0400c 	andi	r3,r2,256
    91f8:	2821883a 	mov	r16,r5
    91fc:	2023883a 	mov	r17,r4
    9200:	3025883a 	mov	r18,r6
    9204:	3827883a 	mov	r19,r7
    9208:	18000526 	beq	r3,zero,9220 <__swrite+0x48>
    920c:	2940038f 	ldh	r5,14(r5)
    9210:	01c00084 	movi	r7,2
    9214:	000d883a 	mov	r6,zero
    9218:	000af100 	call	af10 <_lseek_r>
    921c:	8080030b 	ldhu	r2,12(r16)
    9220:	8140038f 	ldh	r5,14(r16)
    9224:	10bbffcc 	andi	r2,r2,61439
    9228:	980f883a 	mov	r7,r19
    922c:	900d883a 	mov	r6,r18
    9230:	8809883a 	mov	r4,r17
    9234:	8080030d 	sth	r2,12(r16)
    9238:	dfc00417 	ldw	ra,16(sp)
    923c:	dcc00317 	ldw	r19,12(sp)
    9240:	dc800217 	ldw	r18,8(sp)
    9244:	dc400117 	ldw	r17,4(sp)
    9248:	dc000017 	ldw	r16,0(sp)
    924c:	dec00504 	addi	sp,sp,20
    9250:	000a9dc1 	jmpi	a9dc <_write_r>

00009254 <__sseek>:
    9254:	defffe04 	addi	sp,sp,-8
    9258:	dc000015 	stw	r16,0(sp)
    925c:	2821883a 	mov	r16,r5
    9260:	2940038f 	ldh	r5,14(r5)
    9264:	dfc00115 	stw	ra,4(sp)
    9268:	000af100 	call	af10 <_lseek_r>
    926c:	00ffffc4 	movi	r3,-1
    9270:	10c00826 	beq	r2,r3,9294 <__sseek+0x40>
    9274:	80c0030b 	ldhu	r3,12(r16)
    9278:	80801415 	stw	r2,80(r16)
    927c:	18c40014 	ori	r3,r3,4096
    9280:	80c0030d 	sth	r3,12(r16)
    9284:	dfc00117 	ldw	ra,4(sp)
    9288:	dc000017 	ldw	r16,0(sp)
    928c:	dec00204 	addi	sp,sp,8
    9290:	f800283a 	ret
    9294:	80c0030b 	ldhu	r3,12(r16)
    9298:	18fbffcc 	andi	r3,r3,61439
    929c:	80c0030d 	sth	r3,12(r16)
    92a0:	dfc00117 	ldw	ra,4(sp)
    92a4:	dc000017 	ldw	r16,0(sp)
    92a8:	dec00204 	addi	sp,sp,8
    92ac:	f800283a 	ret

000092b0 <__sclose>:
    92b0:	2940038f 	ldh	r5,14(r5)
    92b4:	000aa3c1 	jmpi	aa3c <_close_r>

000092b8 <strcmp>:
    92b8:	2144b03a 	or	r2,r4,r5
    92bc:	108000cc 	andi	r2,r2,3
    92c0:	1000171e 	bne	r2,zero,9320 <strcmp+0x68>
    92c4:	20800017 	ldw	r2,0(r4)
    92c8:	28c00017 	ldw	r3,0(r5)
    92cc:	10c0141e 	bne	r2,r3,9320 <strcmp+0x68>
    92d0:	027fbff4 	movhi	r9,65279
    92d4:	4a7fbfc4 	addi	r9,r9,-257
    92d8:	0086303a 	nor	r3,zero,r2
    92dc:	02202074 	movhi	r8,32897
    92e0:	1245883a 	add	r2,r2,r9
    92e4:	42202004 	addi	r8,r8,-32640
    92e8:	10c4703a 	and	r2,r2,r3
    92ec:	1204703a 	and	r2,r2,r8
    92f0:	10000226 	beq	r2,zero,92fc <strcmp+0x44>
    92f4:	00002306 	br	9384 <strcmp+0xcc>
    92f8:	1000221e 	bne	r2,zero,9384 <strcmp+0xcc>
    92fc:	21000104 	addi	r4,r4,4
    9300:	20c00017 	ldw	r3,0(r4)
    9304:	29400104 	addi	r5,r5,4
    9308:	29800017 	ldw	r6,0(r5)
    930c:	1a4f883a 	add	r7,r3,r9
    9310:	00c4303a 	nor	r2,zero,r3
    9314:	3884703a 	and	r2,r7,r2
    9318:	1204703a 	and	r2,r2,r8
    931c:	19bff626 	beq	r3,r6,92f8 <__alt_data_end+0xff0092f8>
    9320:	20800003 	ldbu	r2,0(r4)
    9324:	10c03fcc 	andi	r3,r2,255
    9328:	18c0201c 	xori	r3,r3,128
    932c:	18ffe004 	addi	r3,r3,-128
    9330:	18000c26 	beq	r3,zero,9364 <strcmp+0xac>
    9334:	29800007 	ldb	r6,0(r5)
    9338:	19800326 	beq	r3,r6,9348 <strcmp+0x90>
    933c:	00001306 	br	938c <strcmp+0xd4>
    9340:	29800007 	ldb	r6,0(r5)
    9344:	11800b1e 	bne	r2,r6,9374 <strcmp+0xbc>
    9348:	21000044 	addi	r4,r4,1
    934c:	20c00003 	ldbu	r3,0(r4)
    9350:	29400044 	addi	r5,r5,1
    9354:	18803fcc 	andi	r2,r3,255
    9358:	1080201c 	xori	r2,r2,128
    935c:	10bfe004 	addi	r2,r2,-128
    9360:	103ff71e 	bne	r2,zero,9340 <__alt_data_end+0xff009340>
    9364:	0007883a 	mov	r3,zero
    9368:	28800003 	ldbu	r2,0(r5)
    936c:	1885c83a 	sub	r2,r3,r2
    9370:	f800283a 	ret
    9374:	28800003 	ldbu	r2,0(r5)
    9378:	18c03fcc 	andi	r3,r3,255
    937c:	1885c83a 	sub	r2,r3,r2
    9380:	f800283a 	ret
    9384:	0005883a 	mov	r2,zero
    9388:	f800283a 	ret
    938c:	10c03fcc 	andi	r3,r2,255
    9390:	003ff506 	br	9368 <__alt_data_end+0xff009368>

00009394 <__sprint_r.part.0>:
    9394:	28801917 	ldw	r2,100(r5)
    9398:	defff604 	addi	sp,sp,-40
    939c:	dd400515 	stw	r21,20(sp)
    93a0:	dfc00915 	stw	ra,36(sp)
    93a4:	df000815 	stw	fp,32(sp)
    93a8:	ddc00715 	stw	r23,28(sp)
    93ac:	dd800615 	stw	r22,24(sp)
    93b0:	dd000415 	stw	r20,16(sp)
    93b4:	dcc00315 	stw	r19,12(sp)
    93b8:	dc800215 	stw	r18,8(sp)
    93bc:	dc400115 	stw	r17,4(sp)
    93c0:	dc000015 	stw	r16,0(sp)
    93c4:	1088000c 	andi	r2,r2,8192
    93c8:	302b883a 	mov	r21,r6
    93cc:	10002e26 	beq	r2,zero,9488 <__sprint_r.part.0+0xf4>
    93d0:	30800217 	ldw	r2,8(r6)
    93d4:	35800017 	ldw	r22,0(r6)
    93d8:	10002926 	beq	r2,zero,9480 <__sprint_r.part.0+0xec>
    93dc:	2827883a 	mov	r19,r5
    93e0:	2029883a 	mov	r20,r4
    93e4:	b5c00104 	addi	r23,r22,4
    93e8:	04bfffc4 	movi	r18,-1
    93ec:	bc400017 	ldw	r17,0(r23)
    93f0:	b4000017 	ldw	r16,0(r22)
    93f4:	0039883a 	mov	fp,zero
    93f8:	8822d0ba 	srli	r17,r17,2
    93fc:	8800031e 	bne	r17,zero,940c <__sprint_r.part.0+0x78>
    9400:	00001806 	br	9464 <__sprint_r.part.0+0xd0>
    9404:	84000104 	addi	r16,r16,4
    9408:	8f001526 	beq	r17,fp,9460 <__sprint_r.part.0+0xcc>
    940c:	81400017 	ldw	r5,0(r16)
    9410:	980d883a 	mov	r6,r19
    9414:	a009883a 	mov	r4,r20
    9418:	000adbc0 	call	adbc <_fputwc_r>
    941c:	e7000044 	addi	fp,fp,1
    9420:	14bff81e 	bne	r2,r18,9404 <__alt_data_end+0xff009404>
    9424:	9005883a 	mov	r2,r18
    9428:	a8000215 	stw	zero,8(r21)
    942c:	a8000115 	stw	zero,4(r21)
    9430:	dfc00917 	ldw	ra,36(sp)
    9434:	df000817 	ldw	fp,32(sp)
    9438:	ddc00717 	ldw	r23,28(sp)
    943c:	dd800617 	ldw	r22,24(sp)
    9440:	dd400517 	ldw	r21,20(sp)
    9444:	dd000417 	ldw	r20,16(sp)
    9448:	dcc00317 	ldw	r19,12(sp)
    944c:	dc800217 	ldw	r18,8(sp)
    9450:	dc400117 	ldw	r17,4(sp)
    9454:	dc000017 	ldw	r16,0(sp)
    9458:	dec00a04 	addi	sp,sp,40
    945c:	f800283a 	ret
    9460:	a8800217 	ldw	r2,8(r21)
    9464:	8c63883a 	add	r17,r17,r17
    9468:	8c63883a 	add	r17,r17,r17
    946c:	1445c83a 	sub	r2,r2,r17
    9470:	a8800215 	stw	r2,8(r21)
    9474:	b5800204 	addi	r22,r22,8
    9478:	bdc00204 	addi	r23,r23,8
    947c:	103fdb1e 	bne	r2,zero,93ec <__alt_data_end+0xff0093ec>
    9480:	0005883a 	mov	r2,zero
    9484:	003fe806 	br	9428 <__alt_data_end+0xff009428>
    9488:	0006e1c0 	call	6e1c <__sfvwrite_r>
    948c:	003fe606 	br	9428 <__alt_data_end+0xff009428>

00009490 <__sprint_r>:
    9490:	30c00217 	ldw	r3,8(r6)
    9494:	18000126 	beq	r3,zero,949c <__sprint_r+0xc>
    9498:	00093941 	jmpi	9394 <__sprint_r.part.0>
    949c:	30000115 	stw	zero,4(r6)
    94a0:	0005883a 	mov	r2,zero
    94a4:	f800283a 	ret

000094a8 <___vfiprintf_internal_r>:
    94a8:	deffc904 	addi	sp,sp,-220
    94ac:	df003515 	stw	fp,212(sp)
    94b0:	dd003115 	stw	r20,196(sp)
    94b4:	dfc03615 	stw	ra,216(sp)
    94b8:	ddc03415 	stw	r23,208(sp)
    94bc:	dd803315 	stw	r22,204(sp)
    94c0:	dd403215 	stw	r21,200(sp)
    94c4:	dcc03015 	stw	r19,192(sp)
    94c8:	dc802f15 	stw	r18,188(sp)
    94cc:	dc402e15 	stw	r17,184(sp)
    94d0:	dc002d15 	stw	r16,180(sp)
    94d4:	d9002015 	stw	r4,128(sp)
    94d8:	d9c02215 	stw	r7,136(sp)
    94dc:	2829883a 	mov	r20,r5
    94e0:	3039883a 	mov	fp,r6
    94e4:	20000226 	beq	r4,zero,94f0 <___vfiprintf_internal_r+0x48>
    94e8:	20800e17 	ldw	r2,56(r4)
    94ec:	1000cf26 	beq	r2,zero,982c <___vfiprintf_internal_r+0x384>
    94f0:	a080030b 	ldhu	r2,12(r20)
    94f4:	10c8000c 	andi	r3,r2,8192
    94f8:	1800061e 	bne	r3,zero,9514 <___vfiprintf_internal_r+0x6c>
    94fc:	a1001917 	ldw	r4,100(r20)
    9500:	00f7ffc4 	movi	r3,-8193
    9504:	10880014 	ori	r2,r2,8192
    9508:	20c6703a 	and	r3,r4,r3
    950c:	a080030d 	sth	r2,12(r20)
    9510:	a0c01915 	stw	r3,100(r20)
    9514:	10c0020c 	andi	r3,r2,8
    9518:	1800a926 	beq	r3,zero,97c0 <___vfiprintf_internal_r+0x318>
    951c:	a0c00417 	ldw	r3,16(r20)
    9520:	1800a726 	beq	r3,zero,97c0 <___vfiprintf_internal_r+0x318>
    9524:	1080068c 	andi	r2,r2,26
    9528:	00c00284 	movi	r3,10
    952c:	10c0ac26 	beq	r2,r3,97e0 <___vfiprintf_internal_r+0x338>
    9530:	da801a04 	addi	r10,sp,104
    9534:	da801e15 	stw	r10,120(sp)
    9538:	d8801e17 	ldw	r2,120(sp)
    953c:	da8019c4 	addi	r10,sp,103
    9540:	05800074 	movhi	r22,1
    9544:	05c00074 	movhi	r23,1
    9548:	da801f15 	stw	r10,124(sp)
    954c:	1295c83a 	sub	r10,r2,r10
    9550:	b581f904 	addi	r22,r22,2020
    9554:	bdc1f504 	addi	r23,r23,2004
    9558:	dec01a15 	stw	sp,104(sp)
    955c:	d8001c15 	stw	zero,112(sp)
    9560:	d8001b15 	stw	zero,108(sp)
    9564:	d8002615 	stw	zero,152(sp)
    9568:	d8002315 	stw	zero,140(sp)
    956c:	da802715 	stw	r10,156(sp)
    9570:	d811883a 	mov	r8,sp
    9574:	dd002115 	stw	r20,132(sp)
    9578:	e021883a 	mov	r16,fp
    957c:	80800007 	ldb	r2,0(r16)
    9580:	1003ea26 	beq	r2,zero,a52c <___vfiprintf_internal_r+0x1084>
    9584:	00c00944 	movi	r3,37
    9588:	8025883a 	mov	r18,r16
    958c:	10c0021e 	bne	r2,r3,9598 <___vfiprintf_internal_r+0xf0>
    9590:	00001606 	br	95ec <___vfiprintf_internal_r+0x144>
    9594:	10c00326 	beq	r2,r3,95a4 <___vfiprintf_internal_r+0xfc>
    9598:	94800044 	addi	r18,r18,1
    959c:	90800007 	ldb	r2,0(r18)
    95a0:	103ffc1e 	bne	r2,zero,9594 <__alt_data_end+0xff009594>
    95a4:	9423c83a 	sub	r17,r18,r16
    95a8:	88001026 	beq	r17,zero,95ec <___vfiprintf_internal_r+0x144>
    95ac:	d8c01c17 	ldw	r3,112(sp)
    95b0:	d8801b17 	ldw	r2,108(sp)
    95b4:	44000015 	stw	r16,0(r8)
    95b8:	88c7883a 	add	r3,r17,r3
    95bc:	10800044 	addi	r2,r2,1
    95c0:	44400115 	stw	r17,4(r8)
    95c4:	d8c01c15 	stw	r3,112(sp)
    95c8:	d8801b15 	stw	r2,108(sp)
    95cc:	010001c4 	movi	r4,7
    95d0:	2080760e 	bge	r4,r2,97ac <___vfiprintf_internal_r+0x304>
    95d4:	1803821e 	bne	r3,zero,a3e0 <___vfiprintf_internal_r+0xf38>
    95d8:	da802317 	ldw	r10,140(sp)
    95dc:	d8001b15 	stw	zero,108(sp)
    95e0:	d811883a 	mov	r8,sp
    95e4:	5455883a 	add	r10,r10,r17
    95e8:	da802315 	stw	r10,140(sp)
    95ec:	90800007 	ldb	r2,0(r18)
    95f0:	10044626 	beq	r2,zero,a70c <___vfiprintf_internal_r+0x1264>
    95f4:	90c00047 	ldb	r3,1(r18)
    95f8:	94000044 	addi	r16,r18,1
    95fc:	d8001d85 	stb	zero,118(sp)
    9600:	0009883a 	mov	r4,zero
    9604:	000f883a 	mov	r7,zero
    9608:	027fffc4 	movi	r9,-1
    960c:	0023883a 	mov	r17,zero
    9610:	0029883a 	mov	r20,zero
    9614:	01401604 	movi	r5,88
    9618:	01800244 	movi	r6,9
    961c:	03400a84 	movi	r13,42
    9620:	03001b04 	movi	r12,108
    9624:	84000044 	addi	r16,r16,1
    9628:	18bff804 	addi	r2,r3,-32
    962c:	28827336 	bltu	r5,r2,9ffc <___vfiprintf_internal_r+0xb54>
    9630:	100490ba 	slli	r2,r2,2
    9634:	02800074 	movhi	r10,1
    9638:	52a59204 	addi	r10,r10,-27064
    963c:	1285883a 	add	r2,r2,r10
    9640:	10800017 	ldw	r2,0(r2)
    9644:	1000683a 	jmp	r2
    9648:	00009d30 	cmpltui	zero,zero,628
    964c:	00009ffc 	xorhi	zero,zero,639
    9650:	00009ffc 	xorhi	zero,zero,639
    9654:	00009d50 	cmplti	zero,zero,629
    9658:	00009ffc 	xorhi	zero,zero,639
    965c:	00009ffc 	xorhi	zero,zero,639
    9660:	00009ffc 	xorhi	zero,zero,639
    9664:	00009ffc 	xorhi	zero,zero,639
    9668:	00009ffc 	xorhi	zero,zero,639
    966c:	00009ffc 	xorhi	zero,zero,639
    9670:	00009f38 	rdprs	zero,zero,636
    9674:	00009f54 	movui	zero,637
    9678:	00009ffc 	xorhi	zero,zero,639
    967c:	0000983c 	xorhi	zero,zero,608
    9680:	00009f64 	muli	zero,zero,637
    9684:	00009ffc 	xorhi	zero,zero,639
    9688:	00009d5c 	xori	zero,zero,629
    968c:	00009d68 	cmpgeui	zero,zero,629
    9690:	00009d68 	cmpgeui	zero,zero,629
    9694:	00009d68 	cmpgeui	zero,zero,629
    9698:	00009d68 	cmpgeui	zero,zero,629
    969c:	00009d68 	cmpgeui	zero,zero,629
    96a0:	00009d68 	cmpgeui	zero,zero,629
    96a4:	00009d68 	cmpgeui	zero,zero,629
    96a8:	00009d68 	cmpgeui	zero,zero,629
    96ac:	00009d68 	cmpgeui	zero,zero,629
    96b0:	00009ffc 	xorhi	zero,zero,639
    96b4:	00009ffc 	xorhi	zero,zero,639
    96b8:	00009ffc 	xorhi	zero,zero,639
    96bc:	00009ffc 	xorhi	zero,zero,639
    96c0:	00009ffc 	xorhi	zero,zero,639
    96c4:	00009ffc 	xorhi	zero,zero,639
    96c8:	00009ffc 	xorhi	zero,zero,639
    96cc:	00009ffc 	xorhi	zero,zero,639
    96d0:	00009ffc 	xorhi	zero,zero,639
    96d4:	00009ffc 	xorhi	zero,zero,639
    96d8:	00009d94 	movui	zero,630
    96dc:	00009ffc 	xorhi	zero,zero,639
    96e0:	00009ffc 	xorhi	zero,zero,639
    96e4:	00009ffc 	xorhi	zero,zero,639
    96e8:	00009ffc 	xorhi	zero,zero,639
    96ec:	00009ffc 	xorhi	zero,zero,639
    96f0:	00009ffc 	xorhi	zero,zero,639
    96f4:	00009ffc 	xorhi	zero,zero,639
    96f8:	00009ffc 	xorhi	zero,zero,639
    96fc:	00009ffc 	xorhi	zero,zero,639
    9700:	00009ffc 	xorhi	zero,zero,639
    9704:	00009dcc 	andi	zero,zero,631
    9708:	00009ffc 	xorhi	zero,zero,639
    970c:	00009ffc 	xorhi	zero,zero,639
    9710:	00009ffc 	xorhi	zero,zero,639
    9714:	00009ffc 	xorhi	zero,zero,639
    9718:	00009ffc 	xorhi	zero,zero,639
    971c:	00009e24 	muli	zero,zero,632
    9720:	00009ffc 	xorhi	zero,zero,639
    9724:	00009ffc 	xorhi	zero,zero,639
    9728:	00009e94 	movui	zero,634
    972c:	00009ffc 	xorhi	zero,zero,639
    9730:	00009ffc 	xorhi	zero,zero,639
    9734:	00009ffc 	xorhi	zero,zero,639
    9738:	00009ffc 	xorhi	zero,zero,639
    973c:	00009ffc 	xorhi	zero,zero,639
    9740:	00009ffc 	xorhi	zero,zero,639
    9744:	00009ffc 	xorhi	zero,zero,639
    9748:	00009ffc 	xorhi	zero,zero,639
    974c:	00009ffc 	xorhi	zero,zero,639
    9750:	00009ffc 	xorhi	zero,zero,639
    9754:	00009c40 	call	9c4 <init_LCD+0x80>
    9758:	00009c6c 	andhi	zero,zero,625
    975c:	00009ffc 	xorhi	zero,zero,639
    9760:	00009ffc 	xorhi	zero,zero,639
    9764:	00009ffc 	xorhi	zero,zero,639
    9768:	00009fa4 	muli	zero,zero,638
    976c:	00009c6c 	andhi	zero,zero,625
    9770:	00009ffc 	xorhi	zero,zero,639
    9774:	00009ffc 	xorhi	zero,zero,639
    9778:	00009b00 	call	9b0 <init_LCD+0x6c>
    977c:	00009ffc 	xorhi	zero,zero,639
    9780:	00009b10 	cmplti	zero,zero,620
    9784:	00009b4c 	andi	zero,zero,621
    9788:	00009848 	cmpgei	zero,zero,609
    978c:	00009af4 	movhi	zero,619
    9790:	00009ffc 	xorhi	zero,zero,639
    9794:	00009ed0 	cmplti	zero,zero,635
    9798:	00009ffc 	xorhi	zero,zero,639
    979c:	00009f28 	cmpgeui	zero,zero,636
    97a0:	00009ffc 	xorhi	zero,zero,639
    97a4:	00009ffc 	xorhi	zero,zero,639
    97a8:	00009bec 	andhi	zero,zero,623
    97ac:	42000204 	addi	r8,r8,8
    97b0:	da802317 	ldw	r10,140(sp)
    97b4:	5455883a 	add	r10,r10,r17
    97b8:	da802315 	stw	r10,140(sp)
    97bc:	003f8b06 	br	95ec <__alt_data_end+0xff0095ec>
    97c0:	d9002017 	ldw	r4,128(sp)
    97c4:	a00b883a 	mov	r5,r20
    97c8:	00049c40 	call	49c4 <__swsetup_r>
    97cc:	1003b11e 	bne	r2,zero,a694 <___vfiprintf_internal_r+0x11ec>
    97d0:	a080030b 	ldhu	r2,12(r20)
    97d4:	00c00284 	movi	r3,10
    97d8:	1080068c 	andi	r2,r2,26
    97dc:	10ff541e 	bne	r2,r3,9530 <__alt_data_end+0xff009530>
    97e0:	a080038f 	ldh	r2,14(r20)
    97e4:	103f5216 	blt	r2,zero,9530 <__alt_data_end+0xff009530>
    97e8:	d9c02217 	ldw	r7,136(sp)
    97ec:	d9002017 	ldw	r4,128(sp)
    97f0:	e00d883a 	mov	r6,fp
    97f4:	a00b883a 	mov	r5,r20
    97f8:	000a9200 	call	a920 <__sbprintf>
    97fc:	dfc03617 	ldw	ra,216(sp)
    9800:	df003517 	ldw	fp,212(sp)
    9804:	ddc03417 	ldw	r23,208(sp)
    9808:	dd803317 	ldw	r22,204(sp)
    980c:	dd403217 	ldw	r21,200(sp)
    9810:	dd003117 	ldw	r20,196(sp)
    9814:	dcc03017 	ldw	r19,192(sp)
    9818:	dc802f17 	ldw	r18,188(sp)
    981c:	dc402e17 	ldw	r17,184(sp)
    9820:	dc002d17 	ldw	r16,180(sp)
    9824:	dec03704 	addi	sp,sp,220
    9828:	f800283a 	ret
    982c:	00069980 	call	6998 <__sinit>
    9830:	003f2f06 	br	94f0 <__alt_data_end+0xff0094f0>
    9834:	0463c83a 	sub	r17,zero,r17
    9838:	d8802215 	stw	r2,136(sp)
    983c:	a5000114 	ori	r20,r20,4
    9840:	80c00007 	ldb	r3,0(r16)
    9844:	003f7706 	br	9624 <__alt_data_end+0xff009624>
    9848:	00800c04 	movi	r2,48
    984c:	da802217 	ldw	r10,136(sp)
    9850:	d8801d05 	stb	r2,116(sp)
    9854:	00801e04 	movi	r2,120
    9858:	d8801d45 	stb	r2,117(sp)
    985c:	d8001d85 	stb	zero,118(sp)
    9860:	50c00104 	addi	r3,r10,4
    9864:	54800017 	ldw	r18,0(r10)
    9868:	0027883a 	mov	r19,zero
    986c:	a0800094 	ori	r2,r20,2
    9870:	48030b16 	blt	r9,zero,a4a0 <___vfiprintf_internal_r+0xff8>
    9874:	00bfdfc4 	movi	r2,-129
    9878:	a096703a 	and	r11,r20,r2
    987c:	d8c02215 	stw	r3,136(sp)
    9880:	5d000094 	ori	r20,r11,2
    9884:	90032b1e 	bne	r18,zero,a534 <___vfiprintf_internal_r+0x108c>
    9888:	00800074 	movhi	r2,1
    988c:	10819404 	addi	r2,r2,1616
    9890:	d8802615 	stw	r2,152(sp)
    9894:	0039883a 	mov	fp,zero
    9898:	48017b1e 	bne	r9,zero,9e88 <___vfiprintf_internal_r+0x9e0>
    989c:	0013883a 	mov	r9,zero
    98a0:	0027883a 	mov	r19,zero
    98a4:	dd401a04 	addi	r21,sp,104
    98a8:	4825883a 	mov	r18,r9
    98ac:	4cc0010e 	bge	r9,r19,98b4 <___vfiprintf_internal_r+0x40c>
    98b0:	9825883a 	mov	r18,r19
    98b4:	e7003fcc 	andi	fp,fp,255
    98b8:	e700201c 	xori	fp,fp,128
    98bc:	e73fe004 	addi	fp,fp,-128
    98c0:	e0000126 	beq	fp,zero,98c8 <___vfiprintf_internal_r+0x420>
    98c4:	94800044 	addi	r18,r18,1
    98c8:	a380008c 	andi	r14,r20,2
    98cc:	70000126 	beq	r14,zero,98d4 <___vfiprintf_internal_r+0x42c>
    98d0:	94800084 	addi	r18,r18,2
    98d4:	a700210c 	andi	fp,r20,132
    98d8:	e001df1e 	bne	fp,zero,a058 <___vfiprintf_internal_r+0xbb0>
    98dc:	8c87c83a 	sub	r3,r17,r18
    98e0:	00c1dd0e 	bge	zero,r3,a058 <___vfiprintf_internal_r+0xbb0>
    98e4:	01c00404 	movi	r7,16
    98e8:	d8801c17 	ldw	r2,112(sp)
    98ec:	38c3ad0e 	bge	r7,r3,a7a4 <___vfiprintf_internal_r+0x12fc>
    98f0:	02800074 	movhi	r10,1
    98f4:	5281f904 	addi	r10,r10,2020
    98f8:	dc002915 	stw	r16,164(sp)
    98fc:	d9801b17 	ldw	r6,108(sp)
    9900:	da802415 	stw	r10,144(sp)
    9904:	03c001c4 	movi	r15,7
    9908:	da402515 	stw	r9,148(sp)
    990c:	db802815 	stw	r14,160(sp)
    9910:	1821883a 	mov	r16,r3
    9914:	00000506 	br	992c <___vfiprintf_internal_r+0x484>
    9918:	31400084 	addi	r5,r6,2
    991c:	42000204 	addi	r8,r8,8
    9920:	200d883a 	mov	r6,r4
    9924:	843ffc04 	addi	r16,r16,-16
    9928:	3c000d0e 	bge	r7,r16,9960 <___vfiprintf_internal_r+0x4b8>
    992c:	10800404 	addi	r2,r2,16
    9930:	31000044 	addi	r4,r6,1
    9934:	45800015 	stw	r22,0(r8)
    9938:	41c00115 	stw	r7,4(r8)
    993c:	d8801c15 	stw	r2,112(sp)
    9940:	d9001b15 	stw	r4,108(sp)
    9944:	793ff40e 	bge	r15,r4,9918 <__alt_data_end+0xff009918>
    9948:	1001b51e 	bne	r2,zero,a020 <___vfiprintf_internal_r+0xb78>
    994c:	843ffc04 	addi	r16,r16,-16
    9950:	000d883a 	mov	r6,zero
    9954:	01400044 	movi	r5,1
    9958:	d811883a 	mov	r8,sp
    995c:	3c3ff316 	blt	r7,r16,992c <__alt_data_end+0xff00992c>
    9960:	8007883a 	mov	r3,r16
    9964:	da402517 	ldw	r9,148(sp)
    9968:	db802817 	ldw	r14,160(sp)
    996c:	dc002917 	ldw	r16,164(sp)
    9970:	da802417 	ldw	r10,144(sp)
    9974:	1885883a 	add	r2,r3,r2
    9978:	40c00115 	stw	r3,4(r8)
    997c:	42800015 	stw	r10,0(r8)
    9980:	d8801c15 	stw	r2,112(sp)
    9984:	d9401b15 	stw	r5,108(sp)
    9988:	00c001c4 	movi	r3,7
    998c:	19426016 	blt	r3,r5,a310 <___vfiprintf_internal_r+0xe68>
    9990:	d8c01d87 	ldb	r3,118(sp)
    9994:	42000204 	addi	r8,r8,8
    9998:	29000044 	addi	r4,r5,1
    999c:	1801b31e 	bne	r3,zero,a06c <___vfiprintf_internal_r+0xbc4>
    99a0:	7001c026 	beq	r14,zero,a0a4 <___vfiprintf_internal_r+0xbfc>
    99a4:	d8c01d04 	addi	r3,sp,116
    99a8:	10800084 	addi	r2,r2,2
    99ac:	40c00015 	stw	r3,0(r8)
    99b0:	00c00084 	movi	r3,2
    99b4:	40c00115 	stw	r3,4(r8)
    99b8:	d8801c15 	stw	r2,112(sp)
    99bc:	d9001b15 	stw	r4,108(sp)
    99c0:	00c001c4 	movi	r3,7
    99c4:	1902650e 	bge	r3,r4,a35c <___vfiprintf_internal_r+0xeb4>
    99c8:	10029a1e 	bne	r2,zero,a434 <___vfiprintf_internal_r+0xf8c>
    99cc:	00c02004 	movi	r3,128
    99d0:	01000044 	movi	r4,1
    99d4:	000b883a 	mov	r5,zero
    99d8:	d811883a 	mov	r8,sp
    99dc:	e0c1b31e 	bne	fp,r3,a0ac <___vfiprintf_internal_r+0xc04>
    99e0:	8cb9c83a 	sub	fp,r17,r18
    99e4:	0701b10e 	bge	zero,fp,a0ac <___vfiprintf_internal_r+0xc04>
    99e8:	01c00404 	movi	r7,16
    99ec:	3f03890e 	bge	r7,fp,a814 <___vfiprintf_internal_r+0x136c>
    99f0:	00c00074 	movhi	r3,1
    99f4:	18c1f504 	addi	r3,r3,2004
    99f8:	d8c02415 	stw	r3,144(sp)
    99fc:	8007883a 	mov	r3,r16
    9a00:	034001c4 	movi	r13,7
    9a04:	e021883a 	mov	r16,fp
    9a08:	da402515 	stw	r9,148(sp)
    9a0c:	1839883a 	mov	fp,r3
    9a10:	00000506 	br	9a28 <___vfiprintf_internal_r+0x580>
    9a14:	29800084 	addi	r6,r5,2
    9a18:	42000204 	addi	r8,r8,8
    9a1c:	180b883a 	mov	r5,r3
    9a20:	843ffc04 	addi	r16,r16,-16
    9a24:	3c000d0e 	bge	r7,r16,9a5c <___vfiprintf_internal_r+0x5b4>
    9a28:	10800404 	addi	r2,r2,16
    9a2c:	28c00044 	addi	r3,r5,1
    9a30:	45c00015 	stw	r23,0(r8)
    9a34:	41c00115 	stw	r7,4(r8)
    9a38:	d8801c15 	stw	r2,112(sp)
    9a3c:	d8c01b15 	stw	r3,108(sp)
    9a40:	68fff40e 	bge	r13,r3,9a14 <__alt_data_end+0xff009a14>
    9a44:	1002241e 	bne	r2,zero,a2d8 <___vfiprintf_internal_r+0xe30>
    9a48:	843ffc04 	addi	r16,r16,-16
    9a4c:	01800044 	movi	r6,1
    9a50:	000b883a 	mov	r5,zero
    9a54:	d811883a 	mov	r8,sp
    9a58:	3c3ff316 	blt	r7,r16,9a28 <__alt_data_end+0xff009a28>
    9a5c:	da402517 	ldw	r9,148(sp)
    9a60:	e007883a 	mov	r3,fp
    9a64:	8039883a 	mov	fp,r16
    9a68:	1821883a 	mov	r16,r3
    9a6c:	d8c02417 	ldw	r3,144(sp)
    9a70:	1705883a 	add	r2,r2,fp
    9a74:	47000115 	stw	fp,4(r8)
    9a78:	40c00015 	stw	r3,0(r8)
    9a7c:	d8801c15 	stw	r2,112(sp)
    9a80:	d9801b15 	stw	r6,108(sp)
    9a84:	00c001c4 	movi	r3,7
    9a88:	19827616 	blt	r3,r6,a464 <___vfiprintf_internal_r+0xfbc>
    9a8c:	4cf9c83a 	sub	fp,r9,r19
    9a90:	42000204 	addi	r8,r8,8
    9a94:	31000044 	addi	r4,r6,1
    9a98:	300b883a 	mov	r5,r6
    9a9c:	07018516 	blt	zero,fp,a0b4 <___vfiprintf_internal_r+0xc0c>
    9aa0:	9885883a 	add	r2,r19,r2
    9aa4:	45400015 	stw	r21,0(r8)
    9aa8:	44c00115 	stw	r19,4(r8)
    9aac:	d8801c15 	stw	r2,112(sp)
    9ab0:	d9001b15 	stw	r4,108(sp)
    9ab4:	00c001c4 	movi	r3,7
    9ab8:	1901dd0e 	bge	r3,r4,a230 <___vfiprintf_internal_r+0xd88>
    9abc:	1002401e 	bne	r2,zero,a3c0 <___vfiprintf_internal_r+0xf18>
    9ac0:	d8001b15 	stw	zero,108(sp)
    9ac4:	a2c0010c 	andi	r11,r20,4
    9ac8:	58000226 	beq	r11,zero,9ad4 <___vfiprintf_internal_r+0x62c>
    9acc:	8ca7c83a 	sub	r19,r17,r18
    9ad0:	04c2f216 	blt	zero,r19,a69c <___vfiprintf_internal_r+0x11f4>
    9ad4:	8c80010e 	bge	r17,r18,9adc <___vfiprintf_internal_r+0x634>
    9ad8:	9023883a 	mov	r17,r18
    9adc:	da802317 	ldw	r10,140(sp)
    9ae0:	5455883a 	add	r10,r10,r17
    9ae4:	da802315 	stw	r10,140(sp)
    9ae8:	d8001b15 	stw	zero,108(sp)
    9aec:	d811883a 	mov	r8,sp
    9af0:	003ea206 	br	957c <__alt_data_end+0xff00957c>
    9af4:	a5000814 	ori	r20,r20,32
    9af8:	80c00007 	ldb	r3,0(r16)
    9afc:	003ec906 	br	9624 <__alt_data_end+0xff009624>
    9b00:	80c00007 	ldb	r3,0(r16)
    9b04:	1b030926 	beq	r3,r12,a72c <___vfiprintf_internal_r+0x1284>
    9b08:	a5000414 	ori	r20,r20,16
    9b0c:	003ec506 	br	9624 <__alt_data_end+0xff009624>
    9b10:	21003fcc 	andi	r4,r4,255
    9b14:	20035e1e 	bne	r4,zero,a890 <___vfiprintf_internal_r+0x13e8>
    9b18:	a080080c 	andi	r2,r20,32
    9b1c:	1002a526 	beq	r2,zero,a5b4 <___vfiprintf_internal_r+0x110c>
    9b20:	da802217 	ldw	r10,136(sp)
    9b24:	50800017 	ldw	r2,0(r10)
    9b28:	da802317 	ldw	r10,140(sp)
    9b2c:	5007d7fa 	srai	r3,r10,31
    9b30:	da802217 	ldw	r10,136(sp)
    9b34:	10c00115 	stw	r3,4(r2)
    9b38:	52800104 	addi	r10,r10,4
    9b3c:	da802215 	stw	r10,136(sp)
    9b40:	da802317 	ldw	r10,140(sp)
    9b44:	12800015 	stw	r10,0(r2)
    9b48:	003e8c06 	br	957c <__alt_data_end+0xff00957c>
    9b4c:	21003fcc 	andi	r4,r4,255
    9b50:	2003511e 	bne	r4,zero,a898 <___vfiprintf_internal_r+0x13f0>
    9b54:	a080080c 	andi	r2,r20,32
    9b58:	1000a126 	beq	r2,zero,9de0 <___vfiprintf_internal_r+0x938>
    9b5c:	da802217 	ldw	r10,136(sp)
    9b60:	d8001d85 	stb	zero,118(sp)
    9b64:	50800204 	addi	r2,r10,8
    9b68:	54800017 	ldw	r18,0(r10)
    9b6c:	54c00117 	ldw	r19,4(r10)
    9b70:	4802b416 	blt	r9,zero,a644 <___vfiprintf_internal_r+0x119c>
    9b74:	013fdfc4 	movi	r4,-129
    9b78:	94c6b03a 	or	r3,r18,r19
    9b7c:	d8802215 	stw	r2,136(sp)
    9b80:	a128703a 	and	r20,r20,r4
    9b84:	1800a226 	beq	r3,zero,9e10 <___vfiprintf_internal_r+0x968>
    9b88:	0039883a 	mov	fp,zero
    9b8c:	dd401a04 	addi	r21,sp,104
    9b90:	9006d0fa 	srli	r3,r18,3
    9b94:	9808977a 	slli	r4,r19,29
    9b98:	9826d0fa 	srli	r19,r19,3
    9b9c:	948001cc 	andi	r18,r18,7
    9ba0:	90800c04 	addi	r2,r18,48
    9ba4:	ad7fffc4 	addi	r21,r21,-1
    9ba8:	20e4b03a 	or	r18,r4,r3
    9bac:	a8800005 	stb	r2,0(r21)
    9bb0:	94c6b03a 	or	r3,r18,r19
    9bb4:	183ff61e 	bne	r3,zero,9b90 <__alt_data_end+0xff009b90>
    9bb8:	a0c0004c 	andi	r3,r20,1
    9bbc:	18005926 	beq	r3,zero,9d24 <___vfiprintf_internal_r+0x87c>
    9bc0:	10803fcc 	andi	r2,r2,255
    9bc4:	1080201c 	xori	r2,r2,128
    9bc8:	10bfe004 	addi	r2,r2,-128
    9bcc:	00c00c04 	movi	r3,48
    9bd0:	10c05426 	beq	r2,r3,9d24 <___vfiprintf_internal_r+0x87c>
    9bd4:	da801e17 	ldw	r10,120(sp)
    9bd8:	a8bfffc4 	addi	r2,r21,-1
    9bdc:	a8ffffc5 	stb	r3,-1(r21)
    9be0:	50a7c83a 	sub	r19,r10,r2
    9be4:	102b883a 	mov	r21,r2
    9be8:	003f2f06 	br	98a8 <__alt_data_end+0xff0098a8>
    9bec:	21003fcc 	andi	r4,r4,255
    9bf0:	2003421e 	bne	r4,zero,a8fc <___vfiprintf_internal_r+0x1454>
    9bf4:	00800074 	movhi	r2,1
    9bf8:	10819404 	addi	r2,r2,1616
    9bfc:	d8802615 	stw	r2,152(sp)
    9c00:	a080080c 	andi	r2,r20,32
    9c04:	1000aa26 	beq	r2,zero,9eb0 <___vfiprintf_internal_r+0xa08>
    9c08:	da802217 	ldw	r10,136(sp)
    9c0c:	54800017 	ldw	r18,0(r10)
    9c10:	54c00117 	ldw	r19,4(r10)
    9c14:	52800204 	addi	r10,r10,8
    9c18:	da802215 	stw	r10,136(sp)
    9c1c:	a080004c 	andi	r2,r20,1
    9c20:	1001d226 	beq	r2,zero,a36c <___vfiprintf_internal_r+0xec4>
    9c24:	94c4b03a 	or	r2,r18,r19
    9c28:	1002351e 	bne	r2,zero,a500 <___vfiprintf_internal_r+0x1058>
    9c2c:	d8001d85 	stb	zero,118(sp)
    9c30:	48022216 	blt	r9,zero,a4bc <___vfiprintf_internal_r+0x1014>
    9c34:	00bfdfc4 	movi	r2,-129
    9c38:	a0a8703a 	and	r20,r20,r2
    9c3c:	003f1506 	br	9894 <__alt_data_end+0xff009894>
    9c40:	da802217 	ldw	r10,136(sp)
    9c44:	04800044 	movi	r18,1
    9c48:	d8001d85 	stb	zero,118(sp)
    9c4c:	50800017 	ldw	r2,0(r10)
    9c50:	52800104 	addi	r10,r10,4
    9c54:	da802215 	stw	r10,136(sp)
    9c58:	d8801005 	stb	r2,64(sp)
    9c5c:	9027883a 	mov	r19,r18
    9c60:	dd401004 	addi	r21,sp,64
    9c64:	0013883a 	mov	r9,zero
    9c68:	003f1706 	br	98c8 <__alt_data_end+0xff0098c8>
    9c6c:	21003fcc 	andi	r4,r4,255
    9c70:	2003201e 	bne	r4,zero,a8f4 <___vfiprintf_internal_r+0x144c>
    9c74:	a080080c 	andi	r2,r20,32
    9c78:	10004b26 	beq	r2,zero,9da8 <___vfiprintf_internal_r+0x900>
    9c7c:	da802217 	ldw	r10,136(sp)
    9c80:	50800117 	ldw	r2,4(r10)
    9c84:	54800017 	ldw	r18,0(r10)
    9c88:	52800204 	addi	r10,r10,8
    9c8c:	da802215 	stw	r10,136(sp)
    9c90:	1027883a 	mov	r19,r2
    9c94:	10022c16 	blt	r2,zero,a548 <___vfiprintf_internal_r+0x10a0>
    9c98:	df001d83 	ldbu	fp,118(sp)
    9c9c:	48007216 	blt	r9,zero,9e68 <___vfiprintf_internal_r+0x9c0>
    9ca0:	00ffdfc4 	movi	r3,-129
    9ca4:	94c4b03a 	or	r2,r18,r19
    9ca8:	a0e8703a 	and	r20,r20,r3
    9cac:	1000cc26 	beq	r2,zero,9fe0 <___vfiprintf_internal_r+0xb38>
    9cb0:	98021026 	beq	r19,zero,a4f4 <___vfiprintf_internal_r+0x104c>
    9cb4:	dc402415 	stw	r17,144(sp)
    9cb8:	dc002515 	stw	r16,148(sp)
    9cbc:	9823883a 	mov	r17,r19
    9cc0:	9021883a 	mov	r16,r18
    9cc4:	dd401a04 	addi	r21,sp,104
    9cc8:	4825883a 	mov	r18,r9
    9ccc:	4027883a 	mov	r19,r8
    9cd0:	8009883a 	mov	r4,r16
    9cd4:	880b883a 	mov	r5,r17
    9cd8:	01800284 	movi	r6,10
    9cdc:	000f883a 	mov	r7,zero
    9ce0:	000b8880 	call	b888 <__umoddi3>
    9ce4:	10800c04 	addi	r2,r2,48
    9ce8:	ad7fffc4 	addi	r21,r21,-1
    9cec:	8009883a 	mov	r4,r16
    9cf0:	880b883a 	mov	r5,r17
    9cf4:	a8800005 	stb	r2,0(r21)
    9cf8:	01800284 	movi	r6,10
    9cfc:	000f883a 	mov	r7,zero
    9d00:	000b3100 	call	b310 <__udivdi3>
    9d04:	1021883a 	mov	r16,r2
    9d08:	10c4b03a 	or	r2,r2,r3
    9d0c:	1823883a 	mov	r17,r3
    9d10:	103fef1e 	bne	r2,zero,9cd0 <__alt_data_end+0xff009cd0>
    9d14:	dc402417 	ldw	r17,144(sp)
    9d18:	dc002517 	ldw	r16,148(sp)
    9d1c:	9013883a 	mov	r9,r18
    9d20:	9811883a 	mov	r8,r19
    9d24:	da801e17 	ldw	r10,120(sp)
    9d28:	5567c83a 	sub	r19,r10,r21
    9d2c:	003ede06 	br	98a8 <__alt_data_end+0xff0098a8>
    9d30:	38803fcc 	andi	r2,r7,255
    9d34:	1080201c 	xori	r2,r2,128
    9d38:	10bfe004 	addi	r2,r2,-128
    9d3c:	1002371e 	bne	r2,zero,a61c <___vfiprintf_internal_r+0x1174>
    9d40:	01000044 	movi	r4,1
    9d44:	01c00804 	movi	r7,32
    9d48:	80c00007 	ldb	r3,0(r16)
    9d4c:	003e3506 	br	9624 <__alt_data_end+0xff009624>
    9d50:	a5000054 	ori	r20,r20,1
    9d54:	80c00007 	ldb	r3,0(r16)
    9d58:	003e3206 	br	9624 <__alt_data_end+0xff009624>
    9d5c:	a5002014 	ori	r20,r20,128
    9d60:	80c00007 	ldb	r3,0(r16)
    9d64:	003e2f06 	br	9624 <__alt_data_end+0xff009624>
    9d68:	8015883a 	mov	r10,r16
    9d6c:	0023883a 	mov	r17,zero
    9d70:	18bff404 	addi	r2,r3,-48
    9d74:	50c00007 	ldb	r3,0(r10)
    9d78:	8c4002a4 	muli	r17,r17,10
    9d7c:	84000044 	addi	r16,r16,1
    9d80:	8015883a 	mov	r10,r16
    9d84:	1463883a 	add	r17,r2,r17
    9d88:	18bff404 	addi	r2,r3,-48
    9d8c:	30bff92e 	bgeu	r6,r2,9d74 <__alt_data_end+0xff009d74>
    9d90:	003e2506 	br	9628 <__alt_data_end+0xff009628>
    9d94:	21003fcc 	andi	r4,r4,255
    9d98:	2002d41e 	bne	r4,zero,a8ec <___vfiprintf_internal_r+0x1444>
    9d9c:	a5000414 	ori	r20,r20,16
    9da0:	a080080c 	andi	r2,r20,32
    9da4:	103fb51e 	bne	r2,zero,9c7c <__alt_data_end+0xff009c7c>
    9da8:	a080040c 	andi	r2,r20,16
    9dac:	1001f826 	beq	r2,zero,a590 <___vfiprintf_internal_r+0x10e8>
    9db0:	da802217 	ldw	r10,136(sp)
    9db4:	54800017 	ldw	r18,0(r10)
    9db8:	52800104 	addi	r10,r10,4
    9dbc:	da802215 	stw	r10,136(sp)
    9dc0:	9027d7fa 	srai	r19,r18,31
    9dc4:	9805883a 	mov	r2,r19
    9dc8:	003fb206 	br	9c94 <__alt_data_end+0xff009c94>
    9dcc:	21003fcc 	andi	r4,r4,255
    9dd0:	2002c41e 	bne	r4,zero,a8e4 <___vfiprintf_internal_r+0x143c>
    9dd4:	a5000414 	ori	r20,r20,16
    9dd8:	a080080c 	andi	r2,r20,32
    9ddc:	103f5f1e 	bne	r2,zero,9b5c <__alt_data_end+0xff009b5c>
    9de0:	a080040c 	andi	r2,r20,16
    9de4:	10020f26 	beq	r2,zero,a624 <___vfiprintf_internal_r+0x117c>
    9de8:	da802217 	ldw	r10,136(sp)
    9dec:	d8001d85 	stb	zero,118(sp)
    9df0:	0027883a 	mov	r19,zero
    9df4:	50800104 	addi	r2,r10,4
    9df8:	54800017 	ldw	r18,0(r10)
    9dfc:	48021116 	blt	r9,zero,a644 <___vfiprintf_internal_r+0x119c>
    9e00:	00ffdfc4 	movi	r3,-129
    9e04:	d8802215 	stw	r2,136(sp)
    9e08:	a0e8703a 	and	r20,r20,r3
    9e0c:	903f5e1e 	bne	r18,zero,9b88 <__alt_data_end+0xff009b88>
    9e10:	0039883a 	mov	fp,zero
    9e14:	4802a626 	beq	r9,zero,a8b0 <___vfiprintf_internal_r+0x1408>
    9e18:	0025883a 	mov	r18,zero
    9e1c:	0027883a 	mov	r19,zero
    9e20:	003f5a06 	br	9b8c <__alt_data_end+0xff009b8c>
    9e24:	21003fcc 	andi	r4,r4,255
    9e28:	20029f1e 	bne	r4,zero,a8a8 <___vfiprintf_internal_r+0x1400>
    9e2c:	a5000414 	ori	r20,r20,16
    9e30:	a080080c 	andi	r2,r20,32
    9e34:	10005e1e 	bne	r2,zero,9fb0 <___vfiprintf_internal_r+0xb08>
    9e38:	a080040c 	andi	r2,r20,16
    9e3c:	1001a21e 	bne	r2,zero,a4c8 <___vfiprintf_internal_r+0x1020>
    9e40:	a080100c 	andi	r2,r20,64
    9e44:	d8001d85 	stb	zero,118(sp)
    9e48:	da802217 	ldw	r10,136(sp)
    9e4c:	1002231e 	bne	r2,zero,a6dc <___vfiprintf_internal_r+0x1234>
    9e50:	50800104 	addi	r2,r10,4
    9e54:	54800017 	ldw	r18,0(r10)
    9e58:	0027883a 	mov	r19,zero
    9e5c:	4801a00e 	bge	r9,zero,a4e0 <___vfiprintf_internal_r+0x1038>
    9e60:	d8802215 	stw	r2,136(sp)
    9e64:	0039883a 	mov	fp,zero
    9e68:	94c4b03a 	or	r2,r18,r19
    9e6c:	103f901e 	bne	r2,zero,9cb0 <__alt_data_end+0xff009cb0>
    9e70:	00800044 	movi	r2,1
    9e74:	10803fcc 	andi	r2,r2,255
    9e78:	00c00044 	movi	r3,1
    9e7c:	10c05926 	beq	r2,r3,9fe4 <___vfiprintf_internal_r+0xb3c>
    9e80:	00c00084 	movi	r3,2
    9e84:	10ffe41e 	bne	r2,r3,9e18 <__alt_data_end+0xff009e18>
    9e88:	0025883a 	mov	r18,zero
    9e8c:	0027883a 	mov	r19,zero
    9e90:	00013d06 	br	a388 <___vfiprintf_internal_r+0xee0>
    9e94:	21003fcc 	andi	r4,r4,255
    9e98:	2002811e 	bne	r4,zero,a8a0 <___vfiprintf_internal_r+0x13f8>
    9e9c:	00800074 	movhi	r2,1
    9ea0:	10818f04 	addi	r2,r2,1596
    9ea4:	d8802615 	stw	r2,152(sp)
    9ea8:	a080080c 	andi	r2,r20,32
    9eac:	103f561e 	bne	r2,zero,9c08 <__alt_data_end+0xff009c08>
    9eb0:	a080040c 	andi	r2,r20,16
    9eb4:	1001d126 	beq	r2,zero,a5fc <___vfiprintf_internal_r+0x1154>
    9eb8:	da802217 	ldw	r10,136(sp)
    9ebc:	0027883a 	mov	r19,zero
    9ec0:	54800017 	ldw	r18,0(r10)
    9ec4:	52800104 	addi	r10,r10,4
    9ec8:	da802215 	stw	r10,136(sp)
    9ecc:	003f5306 	br	9c1c <__alt_data_end+0xff009c1c>
    9ed0:	da802217 	ldw	r10,136(sp)
    9ed4:	d8001d85 	stb	zero,118(sp)
    9ed8:	55400017 	ldw	r21,0(r10)
    9edc:	50c00104 	addi	r3,r10,4
    9ee0:	a8024226 	beq	r21,zero,a7ec <___vfiprintf_internal_r+0x1344>
    9ee4:	48021816 	blt	r9,zero,a748 <___vfiprintf_internal_r+0x12a0>
    9ee8:	480d883a 	mov	r6,r9
    9eec:	000b883a 	mov	r5,zero
    9ef0:	a809883a 	mov	r4,r21
    9ef4:	d8c02a15 	stw	r3,168(sp)
    9ef8:	da002b15 	stw	r8,172(sp)
    9efc:	da402c15 	stw	r9,176(sp)
    9f00:	00076f80 	call	76f8 <memchr>
    9f04:	d8c02a17 	ldw	r3,168(sp)
    9f08:	da002b17 	ldw	r8,172(sp)
    9f0c:	da402c17 	ldw	r9,176(sp)
    9f10:	10024826 	beq	r2,zero,a834 <___vfiprintf_internal_r+0x138c>
    9f14:	1567c83a 	sub	r19,r2,r21
    9f18:	df001d83 	ldbu	fp,118(sp)
    9f1c:	d8c02215 	stw	r3,136(sp)
    9f20:	0013883a 	mov	r9,zero
    9f24:	003e6006 	br	98a8 <__alt_data_end+0xff0098a8>
    9f28:	21003fcc 	andi	r4,r4,255
    9f2c:	203fc026 	beq	r4,zero,9e30 <__alt_data_end+0xff009e30>
    9f30:	d9c01d85 	stb	r7,118(sp)
    9f34:	003fbe06 	br	9e30 <__alt_data_end+0xff009e30>
    9f38:	da802217 	ldw	r10,136(sp)
    9f3c:	54400017 	ldw	r17,0(r10)
    9f40:	50800104 	addi	r2,r10,4
    9f44:	883e3b16 	blt	r17,zero,9834 <__alt_data_end+0xff009834>
    9f48:	d8802215 	stw	r2,136(sp)
    9f4c:	80c00007 	ldb	r3,0(r16)
    9f50:	003db406 	br	9624 <__alt_data_end+0xff009624>
    9f54:	01000044 	movi	r4,1
    9f58:	01c00ac4 	movi	r7,43
    9f5c:	80c00007 	ldb	r3,0(r16)
    9f60:	003db006 	br	9624 <__alt_data_end+0xff009624>
    9f64:	80c00007 	ldb	r3,0(r16)
    9f68:	82800044 	addi	r10,r16,1
    9f6c:	1b423c26 	beq	r3,r13,a860 <___vfiprintf_internal_r+0x13b8>
    9f70:	18bff404 	addi	r2,r3,-48
    9f74:	0013883a 	mov	r9,zero
    9f78:	30822b36 	bltu	r6,r2,a828 <___vfiprintf_internal_r+0x1380>
    9f7c:	50c00007 	ldb	r3,0(r10)
    9f80:	4a4002a4 	muli	r9,r9,10
    9f84:	54000044 	addi	r16,r10,1
    9f88:	8015883a 	mov	r10,r16
    9f8c:	4893883a 	add	r9,r9,r2
    9f90:	18bff404 	addi	r2,r3,-48
    9f94:	30bff92e 	bgeu	r6,r2,9f7c <__alt_data_end+0xff009f7c>
    9f98:	483da30e 	bge	r9,zero,9628 <__alt_data_end+0xff009628>
    9f9c:	027fffc4 	movi	r9,-1
    9fa0:	003da106 	br	9628 <__alt_data_end+0xff009628>
    9fa4:	a5001014 	ori	r20,r20,64
    9fa8:	80c00007 	ldb	r3,0(r16)
    9fac:	003d9d06 	br	9624 <__alt_data_end+0xff009624>
    9fb0:	da802217 	ldw	r10,136(sp)
    9fb4:	d8001d85 	stb	zero,118(sp)
    9fb8:	50c00204 	addi	r3,r10,8
    9fbc:	54800017 	ldw	r18,0(r10)
    9fc0:	54c00117 	ldw	r19,4(r10)
    9fc4:	4801ca16 	blt	r9,zero,a6f0 <___vfiprintf_internal_r+0x1248>
    9fc8:	013fdfc4 	movi	r4,-129
    9fcc:	94c4b03a 	or	r2,r18,r19
    9fd0:	d8c02215 	stw	r3,136(sp)
    9fd4:	a128703a 	and	r20,r20,r4
    9fd8:	0039883a 	mov	fp,zero
    9fdc:	103f341e 	bne	r2,zero,9cb0 <__alt_data_end+0xff009cb0>
    9fe0:	483e2e26 	beq	r9,zero,989c <__alt_data_end+0xff00989c>
    9fe4:	0025883a 	mov	r18,zero
    9fe8:	94800c04 	addi	r18,r18,48
    9fec:	dc8019c5 	stb	r18,103(sp)
    9ff0:	dcc02717 	ldw	r19,156(sp)
    9ff4:	dd4019c4 	addi	r21,sp,103
    9ff8:	003e2b06 	br	98a8 <__alt_data_end+0xff0098a8>
    9ffc:	21003fcc 	andi	r4,r4,255
    a000:	2002361e 	bne	r4,zero,a8dc <___vfiprintf_internal_r+0x1434>
    a004:	1801c126 	beq	r3,zero,a70c <___vfiprintf_internal_r+0x1264>
    a008:	04800044 	movi	r18,1
    a00c:	d8c01005 	stb	r3,64(sp)
    a010:	d8001d85 	stb	zero,118(sp)
    a014:	9027883a 	mov	r19,r18
    a018:	dd401004 	addi	r21,sp,64
    a01c:	003f1106 	br	9c64 <__alt_data_end+0xff009c64>
    a020:	d9402117 	ldw	r5,132(sp)
    a024:	d9002017 	ldw	r4,128(sp)
    a028:	d9801a04 	addi	r6,sp,104
    a02c:	d9c02b15 	stw	r7,172(sp)
    a030:	dbc02a15 	stw	r15,168(sp)
    a034:	00093940 	call	9394 <__sprint_r.part.0>
    a038:	d9c02b17 	ldw	r7,172(sp)
    a03c:	dbc02a17 	ldw	r15,168(sp)
    a040:	10006d1e 	bne	r2,zero,a1f8 <___vfiprintf_internal_r+0xd50>
    a044:	d9801b17 	ldw	r6,108(sp)
    a048:	d8801c17 	ldw	r2,112(sp)
    a04c:	d811883a 	mov	r8,sp
    a050:	31400044 	addi	r5,r6,1
    a054:	003e3306 	br	9924 <__alt_data_end+0xff009924>
    a058:	d9401b17 	ldw	r5,108(sp)
    a05c:	d8801c17 	ldw	r2,112(sp)
    a060:	29000044 	addi	r4,r5,1
    a064:	d8c01d87 	ldb	r3,118(sp)
    a068:	183e4d26 	beq	r3,zero,99a0 <__alt_data_end+0xff0099a0>
    a06c:	00c00044 	movi	r3,1
    a070:	d9401d84 	addi	r5,sp,118
    a074:	10c5883a 	add	r2,r2,r3
    a078:	41400015 	stw	r5,0(r8)
    a07c:	40c00115 	stw	r3,4(r8)
    a080:	d8801c15 	stw	r2,112(sp)
    a084:	d9001b15 	stw	r4,108(sp)
    a088:	014001c4 	movi	r5,7
    a08c:	2900a90e 	bge	r5,r4,a334 <___vfiprintf_internal_r+0xe8c>
    a090:	1000da1e 	bne	r2,zero,a3fc <___vfiprintf_internal_r+0xf54>
    a094:	7000ab1e 	bne	r14,zero,a344 <___vfiprintf_internal_r+0xe9c>
    a098:	000b883a 	mov	r5,zero
    a09c:	1809883a 	mov	r4,r3
    a0a0:	d811883a 	mov	r8,sp
    a0a4:	00c02004 	movi	r3,128
    a0a8:	e0fe4d26 	beq	fp,r3,99e0 <__alt_data_end+0xff0099e0>
    a0ac:	4cf9c83a 	sub	fp,r9,r19
    a0b0:	073e7b0e 	bge	zero,fp,9aa0 <__alt_data_end+0xff009aa0>
    a0b4:	01c00404 	movi	r7,16
    a0b8:	3f01900e 	bge	r7,fp,a6fc <___vfiprintf_internal_r+0x1254>
    a0bc:	00c00074 	movhi	r3,1
    a0c0:	18c1f504 	addi	r3,r3,2004
    a0c4:	d8c02415 	stw	r3,144(sp)
    a0c8:	034001c4 	movi	r13,7
    a0cc:	00000506 	br	a0e4 <___vfiprintf_internal_r+0xc3c>
    a0d0:	29000084 	addi	r4,r5,2
    a0d4:	42000204 	addi	r8,r8,8
    a0d8:	180b883a 	mov	r5,r3
    a0dc:	e73ffc04 	addi	fp,fp,-16
    a0e0:	3f000d0e 	bge	r7,fp,a118 <___vfiprintf_internal_r+0xc70>
    a0e4:	10800404 	addi	r2,r2,16
    a0e8:	28c00044 	addi	r3,r5,1
    a0ec:	45c00015 	stw	r23,0(r8)
    a0f0:	41c00115 	stw	r7,4(r8)
    a0f4:	d8801c15 	stw	r2,112(sp)
    a0f8:	d8c01b15 	stw	r3,108(sp)
    a0fc:	68fff40e 	bge	r13,r3,a0d0 <__alt_data_end+0xff00a0d0>
    a100:	1000101e 	bne	r2,zero,a144 <___vfiprintf_internal_r+0xc9c>
    a104:	e73ffc04 	addi	fp,fp,-16
    a108:	01000044 	movi	r4,1
    a10c:	000b883a 	mov	r5,zero
    a110:	d811883a 	mov	r8,sp
    a114:	3f3ff316 	blt	r7,fp,a0e4 <__alt_data_end+0xff00a0e4>
    a118:	da802417 	ldw	r10,144(sp)
    a11c:	1705883a 	add	r2,r2,fp
    a120:	47000115 	stw	fp,4(r8)
    a124:	42800015 	stw	r10,0(r8)
    a128:	d8801c15 	stw	r2,112(sp)
    a12c:	d9001b15 	stw	r4,108(sp)
    a130:	00c001c4 	movi	r3,7
    a134:	19003616 	blt	r3,r4,a210 <___vfiprintf_internal_r+0xd68>
    a138:	42000204 	addi	r8,r8,8
    a13c:	21000044 	addi	r4,r4,1
    a140:	003e5706 	br	9aa0 <__alt_data_end+0xff009aa0>
    a144:	d9402117 	ldw	r5,132(sp)
    a148:	d9002017 	ldw	r4,128(sp)
    a14c:	d9801a04 	addi	r6,sp,104
    a150:	d9c02b15 	stw	r7,172(sp)
    a154:	db402a15 	stw	r13,168(sp)
    a158:	00093940 	call	9394 <__sprint_r.part.0>
    a15c:	d9c02b17 	ldw	r7,172(sp)
    a160:	db402a17 	ldw	r13,168(sp)
    a164:	1000241e 	bne	r2,zero,a1f8 <___vfiprintf_internal_r+0xd50>
    a168:	d9401b17 	ldw	r5,108(sp)
    a16c:	d8801c17 	ldw	r2,112(sp)
    a170:	d811883a 	mov	r8,sp
    a174:	29000044 	addi	r4,r5,1
    a178:	003fd806 	br	a0dc <__alt_data_end+0xff00a0dc>
    a17c:	d9401b17 	ldw	r5,108(sp)
    a180:	00c00074 	movhi	r3,1
    a184:	18c1f904 	addi	r3,r3,2020
    a188:	d8c02415 	stw	r3,144(sp)
    a18c:	29400044 	addi	r5,r5,1
    a190:	d8c02417 	ldw	r3,144(sp)
    a194:	14c5883a 	add	r2,r2,r19
    a198:	44c00115 	stw	r19,4(r8)
    a19c:	40c00015 	stw	r3,0(r8)
    a1a0:	d8801c15 	stw	r2,112(sp)
    a1a4:	d9401b15 	stw	r5,108(sp)
    a1a8:	00c001c4 	movi	r3,7
    a1ac:	1940070e 	bge	r3,r5,a1cc <___vfiprintf_internal_r+0xd24>
    a1b0:	103e4826 	beq	r2,zero,9ad4 <__alt_data_end+0xff009ad4>
    a1b4:	d9402117 	ldw	r5,132(sp)
    a1b8:	d9002017 	ldw	r4,128(sp)
    a1bc:	d9801a04 	addi	r6,sp,104
    a1c0:	00093940 	call	9394 <__sprint_r.part.0>
    a1c4:	10000c1e 	bne	r2,zero,a1f8 <___vfiprintf_internal_r+0xd50>
    a1c8:	d8801c17 	ldw	r2,112(sp)
    a1cc:	8c80010e 	bge	r17,r18,a1d4 <___vfiprintf_internal_r+0xd2c>
    a1d0:	9023883a 	mov	r17,r18
    a1d4:	da802317 	ldw	r10,140(sp)
    a1d8:	5455883a 	add	r10,r10,r17
    a1dc:	da802315 	stw	r10,140(sp)
    a1e0:	103e4126 	beq	r2,zero,9ae8 <__alt_data_end+0xff009ae8>
    a1e4:	d9402117 	ldw	r5,132(sp)
    a1e8:	d9002017 	ldw	r4,128(sp)
    a1ec:	d9801a04 	addi	r6,sp,104
    a1f0:	00093940 	call	9394 <__sprint_r.part.0>
    a1f4:	103e3c26 	beq	r2,zero,9ae8 <__alt_data_end+0xff009ae8>
    a1f8:	dd002117 	ldw	r20,132(sp)
    a1fc:	a080030b 	ldhu	r2,12(r20)
    a200:	1080100c 	andi	r2,r2,64
    a204:	1001231e 	bne	r2,zero,a694 <___vfiprintf_internal_r+0x11ec>
    a208:	d8802317 	ldw	r2,140(sp)
    a20c:	003d7b06 	br	97fc <__alt_data_end+0xff0097fc>
    a210:	1000991e 	bne	r2,zero,a478 <___vfiprintf_internal_r+0xfd0>
    a214:	00c00044 	movi	r3,1
    a218:	9805883a 	mov	r2,r19
    a21c:	dd400015 	stw	r21,0(sp)
    a220:	dcc00115 	stw	r19,4(sp)
    a224:	dcc01c15 	stw	r19,112(sp)
    a228:	d8c01b15 	stw	r3,108(sp)
    a22c:	d811883a 	mov	r8,sp
    a230:	42000204 	addi	r8,r8,8
    a234:	a2c0010c 	andi	r11,r20,4
    a238:	583fe426 	beq	r11,zero,a1cc <__alt_data_end+0xff00a1cc>
    a23c:	8ca7c83a 	sub	r19,r17,r18
    a240:	04ffe20e 	bge	zero,r19,a1cc <__alt_data_end+0xff00a1cc>
    a244:	01c00404 	movi	r7,16
    a248:	3cffcc0e 	bge	r7,r19,a17c <__alt_data_end+0xff00a17c>
    a24c:	02800074 	movhi	r10,1
    a250:	5281f904 	addi	r10,r10,2020
    a254:	d9001b17 	ldw	r4,108(sp)
    a258:	da802415 	stw	r10,144(sp)
    a25c:	382b883a 	mov	r21,r7
    a260:	050001c4 	movi	r20,7
    a264:	df002017 	ldw	fp,128(sp)
    a268:	00000506 	br	a280 <___vfiprintf_internal_r+0xdd8>
    a26c:	21400084 	addi	r5,r4,2
    a270:	42000204 	addi	r8,r8,8
    a274:	1809883a 	mov	r4,r3
    a278:	9cfffc04 	addi	r19,r19,-16
    a27c:	acffc40e 	bge	r21,r19,a190 <__alt_data_end+0xff00a190>
    a280:	10800404 	addi	r2,r2,16
    a284:	20c00044 	addi	r3,r4,1
    a288:	45800015 	stw	r22,0(r8)
    a28c:	45400115 	stw	r21,4(r8)
    a290:	d8801c15 	stw	r2,112(sp)
    a294:	d8c01b15 	stw	r3,108(sp)
    a298:	a0fff40e 	bge	r20,r3,a26c <__alt_data_end+0xff00a26c>
    a29c:	1000041e 	bne	r2,zero,a2b0 <___vfiprintf_internal_r+0xe08>
    a2a0:	01400044 	movi	r5,1
    a2a4:	0009883a 	mov	r4,zero
    a2a8:	d811883a 	mov	r8,sp
    a2ac:	003ff206 	br	a278 <__alt_data_end+0xff00a278>
    a2b0:	d9402117 	ldw	r5,132(sp)
    a2b4:	d9801a04 	addi	r6,sp,104
    a2b8:	e009883a 	mov	r4,fp
    a2bc:	00093940 	call	9394 <__sprint_r.part.0>
    a2c0:	103fcd1e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a2c4:	d9001b17 	ldw	r4,108(sp)
    a2c8:	d8801c17 	ldw	r2,112(sp)
    a2cc:	d811883a 	mov	r8,sp
    a2d0:	21400044 	addi	r5,r4,1
    a2d4:	003fe806 	br	a278 <__alt_data_end+0xff00a278>
    a2d8:	d9402117 	ldw	r5,132(sp)
    a2dc:	d9002017 	ldw	r4,128(sp)
    a2e0:	d9801a04 	addi	r6,sp,104
    a2e4:	d9c02b15 	stw	r7,172(sp)
    a2e8:	db402a15 	stw	r13,168(sp)
    a2ec:	00093940 	call	9394 <__sprint_r.part.0>
    a2f0:	d9c02b17 	ldw	r7,172(sp)
    a2f4:	db402a17 	ldw	r13,168(sp)
    a2f8:	103fbf1e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a2fc:	d9401b17 	ldw	r5,108(sp)
    a300:	d8801c17 	ldw	r2,112(sp)
    a304:	d811883a 	mov	r8,sp
    a308:	29800044 	addi	r6,r5,1
    a30c:	003dc406 	br	9a20 <__alt_data_end+0xff009a20>
    a310:	1000d21e 	bne	r2,zero,a65c <___vfiprintf_internal_r+0x11b4>
    a314:	d8c01d87 	ldb	r3,118(sp)
    a318:	18009526 	beq	r3,zero,a570 <___vfiprintf_internal_r+0x10c8>
    a31c:	00800044 	movi	r2,1
    a320:	d8c01d84 	addi	r3,sp,118
    a324:	1009883a 	mov	r4,r2
    a328:	d8c00015 	stw	r3,0(sp)
    a32c:	d8800115 	stw	r2,4(sp)
    a330:	d811883a 	mov	r8,sp
    a334:	200b883a 	mov	r5,r4
    a338:	42000204 	addi	r8,r8,8
    a33c:	21000044 	addi	r4,r4,1
    a340:	003d9706 	br	99a0 <__alt_data_end+0xff0099a0>
    a344:	d9001d04 	addi	r4,sp,116
    a348:	00800084 	movi	r2,2
    a34c:	d9000015 	stw	r4,0(sp)
    a350:	d8800115 	stw	r2,4(sp)
    a354:	1809883a 	mov	r4,r3
    a358:	d811883a 	mov	r8,sp
    a35c:	200b883a 	mov	r5,r4
    a360:	42000204 	addi	r8,r8,8
    a364:	21000044 	addi	r4,r4,1
    a368:	003f4e06 	br	a0a4 <__alt_data_end+0xff00a0a4>
    a36c:	d8001d85 	stb	zero,118(sp)
    a370:	48005016 	blt	r9,zero,a4b4 <___vfiprintf_internal_r+0x100c>
    a374:	00ffdfc4 	movi	r3,-129
    a378:	94c4b03a 	or	r2,r18,r19
    a37c:	a0e8703a 	and	r20,r20,r3
    a380:	103d4426 	beq	r2,zero,9894 <__alt_data_end+0xff009894>
    a384:	0039883a 	mov	fp,zero
    a388:	d9002617 	ldw	r4,152(sp)
    a38c:	dd401a04 	addi	r21,sp,104
    a390:	908003cc 	andi	r2,r18,15
    a394:	9806973a 	slli	r3,r19,28
    a398:	2085883a 	add	r2,r4,r2
    a39c:	9024d13a 	srli	r18,r18,4
    a3a0:	10800003 	ldbu	r2,0(r2)
    a3a4:	9826d13a 	srli	r19,r19,4
    a3a8:	ad7fffc4 	addi	r21,r21,-1
    a3ac:	1ca4b03a 	or	r18,r3,r18
    a3b0:	a8800005 	stb	r2,0(r21)
    a3b4:	94c4b03a 	or	r2,r18,r19
    a3b8:	103ff51e 	bne	r2,zero,a390 <__alt_data_end+0xff00a390>
    a3bc:	003e5906 	br	9d24 <__alt_data_end+0xff009d24>
    a3c0:	d9402117 	ldw	r5,132(sp)
    a3c4:	d9002017 	ldw	r4,128(sp)
    a3c8:	d9801a04 	addi	r6,sp,104
    a3cc:	00093940 	call	9394 <__sprint_r.part.0>
    a3d0:	103f891e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a3d4:	d8801c17 	ldw	r2,112(sp)
    a3d8:	d811883a 	mov	r8,sp
    a3dc:	003f9506 	br	a234 <__alt_data_end+0xff00a234>
    a3e0:	d9402117 	ldw	r5,132(sp)
    a3e4:	d9002017 	ldw	r4,128(sp)
    a3e8:	d9801a04 	addi	r6,sp,104
    a3ec:	00093940 	call	9394 <__sprint_r.part.0>
    a3f0:	103f811e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a3f4:	d811883a 	mov	r8,sp
    a3f8:	003ced06 	br	97b0 <__alt_data_end+0xff0097b0>
    a3fc:	d9402117 	ldw	r5,132(sp)
    a400:	d9002017 	ldw	r4,128(sp)
    a404:	d9801a04 	addi	r6,sp,104
    a408:	da402c15 	stw	r9,176(sp)
    a40c:	db802a15 	stw	r14,168(sp)
    a410:	00093940 	call	9394 <__sprint_r.part.0>
    a414:	da402c17 	ldw	r9,176(sp)
    a418:	db802a17 	ldw	r14,168(sp)
    a41c:	103f761e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a420:	d9401b17 	ldw	r5,108(sp)
    a424:	d8801c17 	ldw	r2,112(sp)
    a428:	d811883a 	mov	r8,sp
    a42c:	29000044 	addi	r4,r5,1
    a430:	003d5b06 	br	99a0 <__alt_data_end+0xff0099a0>
    a434:	d9402117 	ldw	r5,132(sp)
    a438:	d9002017 	ldw	r4,128(sp)
    a43c:	d9801a04 	addi	r6,sp,104
    a440:	da402c15 	stw	r9,176(sp)
    a444:	00093940 	call	9394 <__sprint_r.part.0>
    a448:	da402c17 	ldw	r9,176(sp)
    a44c:	103f6a1e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a450:	d9401b17 	ldw	r5,108(sp)
    a454:	d8801c17 	ldw	r2,112(sp)
    a458:	d811883a 	mov	r8,sp
    a45c:	29000044 	addi	r4,r5,1
    a460:	003f1006 	br	a0a4 <__alt_data_end+0xff00a0a4>
    a464:	1000c31e 	bne	r2,zero,a774 <___vfiprintf_internal_r+0x12cc>
    a468:	01000044 	movi	r4,1
    a46c:	000b883a 	mov	r5,zero
    a470:	d811883a 	mov	r8,sp
    a474:	003f0d06 	br	a0ac <__alt_data_end+0xff00a0ac>
    a478:	d9402117 	ldw	r5,132(sp)
    a47c:	d9002017 	ldw	r4,128(sp)
    a480:	d9801a04 	addi	r6,sp,104
    a484:	00093940 	call	9394 <__sprint_r.part.0>
    a488:	103f5b1e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a48c:	d9001b17 	ldw	r4,108(sp)
    a490:	d8801c17 	ldw	r2,112(sp)
    a494:	d811883a 	mov	r8,sp
    a498:	21000044 	addi	r4,r4,1
    a49c:	003d8006 	br	9aa0 <__alt_data_end+0xff009aa0>
    a4a0:	01000074 	movhi	r4,1
    a4a4:	21019404 	addi	r4,r4,1616
    a4a8:	d9002615 	stw	r4,152(sp)
    a4ac:	d8c02215 	stw	r3,136(sp)
    a4b0:	1029883a 	mov	r20,r2
    a4b4:	94c4b03a 	or	r2,r18,r19
    a4b8:	103fb21e 	bne	r2,zero,a384 <__alt_data_end+0xff00a384>
    a4bc:	0039883a 	mov	fp,zero
    a4c0:	00800084 	movi	r2,2
    a4c4:	003e6b06 	br	9e74 <__alt_data_end+0xff009e74>
    a4c8:	da802217 	ldw	r10,136(sp)
    a4cc:	d8001d85 	stb	zero,118(sp)
    a4d0:	0027883a 	mov	r19,zero
    a4d4:	50800104 	addi	r2,r10,4
    a4d8:	54800017 	ldw	r18,0(r10)
    a4dc:	483e6016 	blt	r9,zero,9e60 <__alt_data_end+0xff009e60>
    a4e0:	00ffdfc4 	movi	r3,-129
    a4e4:	d8802215 	stw	r2,136(sp)
    a4e8:	a0e8703a 	and	r20,r20,r3
    a4ec:	0039883a 	mov	fp,zero
    a4f0:	903ebb26 	beq	r18,zero,9fe0 <__alt_data_end+0xff009fe0>
    a4f4:	00800244 	movi	r2,9
    a4f8:	14bdee36 	bltu	r2,r18,9cb4 <__alt_data_end+0xff009cb4>
    a4fc:	003eba06 	br	9fe8 <__alt_data_end+0xff009fe8>
    a500:	00800c04 	movi	r2,48
    a504:	d8c01d45 	stb	r3,117(sp)
    a508:	d8801d05 	stb	r2,116(sp)
    a50c:	d8001d85 	stb	zero,118(sp)
    a510:	a0c00094 	ori	r3,r20,2
    a514:	4800a916 	blt	r9,zero,a7bc <___vfiprintf_internal_r+0x1314>
    a518:	00bfdfc4 	movi	r2,-129
    a51c:	a096703a 	and	r11,r20,r2
    a520:	5d000094 	ori	r20,r11,2
    a524:	0039883a 	mov	fp,zero
    a528:	003f9706 	br	a388 <__alt_data_end+0xff00a388>
    a52c:	8025883a 	mov	r18,r16
    a530:	003c2e06 	br	95ec <__alt_data_end+0xff0095ec>
    a534:	00800074 	movhi	r2,1
    a538:	10819404 	addi	r2,r2,1616
    a53c:	0039883a 	mov	fp,zero
    a540:	d8802615 	stw	r2,152(sp)
    a544:	003f9006 	br	a388 <__alt_data_end+0xff00a388>
    a548:	04a5c83a 	sub	r18,zero,r18
    a54c:	07000b44 	movi	fp,45
    a550:	9004c03a 	cmpne	r2,r18,zero
    a554:	04e7c83a 	sub	r19,zero,r19
    a558:	df001d85 	stb	fp,118(sp)
    a55c:	98a7c83a 	sub	r19,r19,r2
    a560:	48009f16 	blt	r9,zero,a7e0 <___vfiprintf_internal_r+0x1338>
    a564:	00bfdfc4 	movi	r2,-129
    a568:	a0a8703a 	and	r20,r20,r2
    a56c:	003dd006 	br	9cb0 <__alt_data_end+0xff009cb0>
    a570:	70004c26 	beq	r14,zero,a6a4 <___vfiprintf_internal_r+0x11fc>
    a574:	00800084 	movi	r2,2
    a578:	d8c01d04 	addi	r3,sp,116
    a57c:	d8c00015 	stw	r3,0(sp)
    a580:	d8800115 	stw	r2,4(sp)
    a584:	01000044 	movi	r4,1
    a588:	d811883a 	mov	r8,sp
    a58c:	003f7306 	br	a35c <__alt_data_end+0xff00a35c>
    a590:	a080100c 	andi	r2,r20,64
    a594:	da802217 	ldw	r10,136(sp)
    a598:	103e0626 	beq	r2,zero,9db4 <__alt_data_end+0xff009db4>
    a59c:	5480000f 	ldh	r18,0(r10)
    a5a0:	52800104 	addi	r10,r10,4
    a5a4:	da802215 	stw	r10,136(sp)
    a5a8:	9027d7fa 	srai	r19,r18,31
    a5ac:	9805883a 	mov	r2,r19
    a5b0:	003db806 	br	9c94 <__alt_data_end+0xff009c94>
    a5b4:	a080040c 	andi	r2,r20,16
    a5b8:	1000091e 	bne	r2,zero,a5e0 <___vfiprintf_internal_r+0x1138>
    a5bc:	a2c0100c 	andi	r11,r20,64
    a5c0:	58000726 	beq	r11,zero,a5e0 <___vfiprintf_internal_r+0x1138>
    a5c4:	da802217 	ldw	r10,136(sp)
    a5c8:	50800017 	ldw	r2,0(r10)
    a5cc:	52800104 	addi	r10,r10,4
    a5d0:	da802215 	stw	r10,136(sp)
    a5d4:	da802317 	ldw	r10,140(sp)
    a5d8:	1280000d 	sth	r10,0(r2)
    a5dc:	003be706 	br	957c <__alt_data_end+0xff00957c>
    a5e0:	da802217 	ldw	r10,136(sp)
    a5e4:	50800017 	ldw	r2,0(r10)
    a5e8:	52800104 	addi	r10,r10,4
    a5ec:	da802215 	stw	r10,136(sp)
    a5f0:	da802317 	ldw	r10,140(sp)
    a5f4:	12800015 	stw	r10,0(r2)
    a5f8:	003be006 	br	957c <__alt_data_end+0xff00957c>
    a5fc:	a080100c 	andi	r2,r20,64
    a600:	da802217 	ldw	r10,136(sp)
    a604:	10003026 	beq	r2,zero,a6c8 <___vfiprintf_internal_r+0x1220>
    a608:	5480000b 	ldhu	r18,0(r10)
    a60c:	52800104 	addi	r10,r10,4
    a610:	0027883a 	mov	r19,zero
    a614:	da802215 	stw	r10,136(sp)
    a618:	003d8006 	br	9c1c <__alt_data_end+0xff009c1c>
    a61c:	80c00007 	ldb	r3,0(r16)
    a620:	003c0006 	br	9624 <__alt_data_end+0xff009624>
    a624:	a080100c 	andi	r2,r20,64
    a628:	d8001d85 	stb	zero,118(sp)
    a62c:	da802217 	ldw	r10,136(sp)
    a630:	1000201e 	bne	r2,zero,a6b4 <___vfiprintf_internal_r+0x120c>
    a634:	50800104 	addi	r2,r10,4
    a638:	54800017 	ldw	r18,0(r10)
    a63c:	0027883a 	mov	r19,zero
    a640:	483def0e 	bge	r9,zero,9e00 <__alt_data_end+0xff009e00>
    a644:	94c6b03a 	or	r3,r18,r19
    a648:	d8802215 	stw	r2,136(sp)
    a64c:	183d4e1e 	bne	r3,zero,9b88 <__alt_data_end+0xff009b88>
    a650:	0039883a 	mov	fp,zero
    a654:	0005883a 	mov	r2,zero
    a658:	003e0606 	br	9e74 <__alt_data_end+0xff009e74>
    a65c:	d9402117 	ldw	r5,132(sp)
    a660:	d9002017 	ldw	r4,128(sp)
    a664:	d9801a04 	addi	r6,sp,104
    a668:	da402c15 	stw	r9,176(sp)
    a66c:	db802a15 	stw	r14,168(sp)
    a670:	00093940 	call	9394 <__sprint_r.part.0>
    a674:	da402c17 	ldw	r9,176(sp)
    a678:	db802a17 	ldw	r14,168(sp)
    a67c:	103ede1e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a680:	d9401b17 	ldw	r5,108(sp)
    a684:	d8801c17 	ldw	r2,112(sp)
    a688:	d811883a 	mov	r8,sp
    a68c:	29000044 	addi	r4,r5,1
    a690:	003e7406 	br	a064 <__alt_data_end+0xff00a064>
    a694:	00bfffc4 	movi	r2,-1
    a698:	003c5806 	br	97fc <__alt_data_end+0xff0097fc>
    a69c:	d811883a 	mov	r8,sp
    a6a0:	003ee806 	br	a244 <__alt_data_end+0xff00a244>
    a6a4:	000b883a 	mov	r5,zero
    a6a8:	01000044 	movi	r4,1
    a6ac:	d811883a 	mov	r8,sp
    a6b0:	003e7c06 	br	a0a4 <__alt_data_end+0xff00a0a4>
    a6b4:	50800104 	addi	r2,r10,4
    a6b8:	5480000b 	ldhu	r18,0(r10)
    a6bc:	0027883a 	mov	r19,zero
    a6c0:	483dcf0e 	bge	r9,zero,9e00 <__alt_data_end+0xff009e00>
    a6c4:	003fdf06 	br	a644 <__alt_data_end+0xff00a644>
    a6c8:	54800017 	ldw	r18,0(r10)
    a6cc:	52800104 	addi	r10,r10,4
    a6d0:	0027883a 	mov	r19,zero
    a6d4:	da802215 	stw	r10,136(sp)
    a6d8:	003d5006 	br	9c1c <__alt_data_end+0xff009c1c>
    a6dc:	50800104 	addi	r2,r10,4
    a6e0:	5480000b 	ldhu	r18,0(r10)
    a6e4:	0027883a 	mov	r19,zero
    a6e8:	483f7d0e 	bge	r9,zero,a4e0 <__alt_data_end+0xff00a4e0>
    a6ec:	003ddc06 	br	9e60 <__alt_data_end+0xff009e60>
    a6f0:	d8c02215 	stw	r3,136(sp)
    a6f4:	0039883a 	mov	fp,zero
    a6f8:	003ddb06 	br	9e68 <__alt_data_end+0xff009e68>
    a6fc:	02800074 	movhi	r10,1
    a700:	5281f504 	addi	r10,r10,2004
    a704:	da802415 	stw	r10,144(sp)
    a708:	003e8306 	br	a118 <__alt_data_end+0xff00a118>
    a70c:	d8801c17 	ldw	r2,112(sp)
    a710:	dd002117 	ldw	r20,132(sp)
    a714:	103eb926 	beq	r2,zero,a1fc <__alt_data_end+0xff00a1fc>
    a718:	d9002017 	ldw	r4,128(sp)
    a71c:	d9801a04 	addi	r6,sp,104
    a720:	a00b883a 	mov	r5,r20
    a724:	00093940 	call	9394 <__sprint_r.part.0>
    a728:	003eb406 	br	a1fc <__alt_data_end+0xff00a1fc>
    a72c:	80c00043 	ldbu	r3,1(r16)
    a730:	a5000814 	ori	r20,r20,32
    a734:	84000044 	addi	r16,r16,1
    a738:	18c03fcc 	andi	r3,r3,255
    a73c:	18c0201c 	xori	r3,r3,128
    a740:	18ffe004 	addi	r3,r3,-128
    a744:	003bb706 	br	9624 <__alt_data_end+0xff009624>
    a748:	a809883a 	mov	r4,r21
    a74c:	d8c02a15 	stw	r3,168(sp)
    a750:	da002b15 	stw	r8,172(sp)
    a754:	000265c0 	call	265c <strlen>
    a758:	d8c02a17 	ldw	r3,168(sp)
    a75c:	1027883a 	mov	r19,r2
    a760:	df001d83 	ldbu	fp,118(sp)
    a764:	d8c02215 	stw	r3,136(sp)
    a768:	0013883a 	mov	r9,zero
    a76c:	da002b17 	ldw	r8,172(sp)
    a770:	003c4d06 	br	98a8 <__alt_data_end+0xff0098a8>
    a774:	d9402117 	ldw	r5,132(sp)
    a778:	d9002017 	ldw	r4,128(sp)
    a77c:	d9801a04 	addi	r6,sp,104
    a780:	da402c15 	stw	r9,176(sp)
    a784:	00093940 	call	9394 <__sprint_r.part.0>
    a788:	da402c17 	ldw	r9,176(sp)
    a78c:	103e9a1e 	bne	r2,zero,a1f8 <__alt_data_end+0xff00a1f8>
    a790:	d9401b17 	ldw	r5,108(sp)
    a794:	d8801c17 	ldw	r2,112(sp)
    a798:	d811883a 	mov	r8,sp
    a79c:	29000044 	addi	r4,r5,1
    a7a0:	003e4206 	br	a0ac <__alt_data_end+0xff00a0ac>
    a7a4:	d9401b17 	ldw	r5,108(sp)
    a7a8:	01000074 	movhi	r4,1
    a7ac:	2101f904 	addi	r4,r4,2020
    a7b0:	d9002415 	stw	r4,144(sp)
    a7b4:	29400044 	addi	r5,r5,1
    a7b8:	003c6d06 	br	9970 <__alt_data_end+0xff009970>
    a7bc:	0039883a 	mov	fp,zero
    a7c0:	00800084 	movi	r2,2
    a7c4:	10803fcc 	andi	r2,r2,255
    a7c8:	01000044 	movi	r4,1
    a7cc:	11001e26 	beq	r2,r4,a848 <___vfiprintf_internal_r+0x13a0>
    a7d0:	01000084 	movi	r4,2
    a7d4:	11001e1e 	bne	r2,r4,a850 <___vfiprintf_internal_r+0x13a8>
    a7d8:	1829883a 	mov	r20,r3
    a7dc:	003eea06 	br	a388 <__alt_data_end+0xff00a388>
    a7e0:	a007883a 	mov	r3,r20
    a7e4:	00800044 	movi	r2,1
    a7e8:	003ff606 	br	a7c4 <__alt_data_end+0xff00a7c4>
    a7ec:	00800184 	movi	r2,6
    a7f0:	1240012e 	bgeu	r2,r9,a7f8 <___vfiprintf_internal_r+0x1350>
    a7f4:	1013883a 	mov	r9,r2
    a7f8:	4827883a 	mov	r19,r9
    a7fc:	4825883a 	mov	r18,r9
    a800:	48001516 	blt	r9,zero,a858 <___vfiprintf_internal_r+0x13b0>
    a804:	05400074 	movhi	r21,1
    a808:	d8c02215 	stw	r3,136(sp)
    a80c:	ad419904 	addi	r21,r21,1636
    a810:	003d1406 	br	9c64 <__alt_data_end+0xff009c64>
    a814:	02800074 	movhi	r10,1
    a818:	5281f504 	addi	r10,r10,2004
    a81c:	da802415 	stw	r10,144(sp)
    a820:	200d883a 	mov	r6,r4
    a824:	003c9106 	br	9a6c <__alt_data_end+0xff009a6c>
    a828:	5021883a 	mov	r16,r10
    a82c:	0013883a 	mov	r9,zero
    a830:	003b7d06 	br	9628 <__alt_data_end+0xff009628>
    a834:	4827883a 	mov	r19,r9
    a838:	df001d83 	ldbu	fp,118(sp)
    a83c:	d8c02215 	stw	r3,136(sp)
    a840:	0013883a 	mov	r9,zero
    a844:	003c1806 	br	98a8 <__alt_data_end+0xff0098a8>
    a848:	1829883a 	mov	r20,r3
    a84c:	003d1806 	br	9cb0 <__alt_data_end+0xff009cb0>
    a850:	1829883a 	mov	r20,r3
    a854:	003ccd06 	br	9b8c <__alt_data_end+0xff009b8c>
    a858:	0025883a 	mov	r18,zero
    a85c:	003fe906 	br	a804 <__alt_data_end+0xff00a804>
    a860:	d8802217 	ldw	r2,136(sp)
    a864:	80c00043 	ldbu	r3,1(r16)
    a868:	5021883a 	mov	r16,r10
    a86c:	12400017 	ldw	r9,0(r2)
    a870:	10800104 	addi	r2,r2,4
    a874:	d8802215 	stw	r2,136(sp)
    a878:	483faf0e 	bge	r9,zero,a738 <__alt_data_end+0xff00a738>
    a87c:	18c03fcc 	andi	r3,r3,255
    a880:	18c0201c 	xori	r3,r3,128
    a884:	027fffc4 	movi	r9,-1
    a888:	18ffe004 	addi	r3,r3,-128
    a88c:	003b6506 	br	9624 <__alt_data_end+0xff009624>
    a890:	d9c01d85 	stb	r7,118(sp)
    a894:	003ca006 	br	9b18 <__alt_data_end+0xff009b18>
    a898:	d9c01d85 	stb	r7,118(sp)
    a89c:	003cad06 	br	9b54 <__alt_data_end+0xff009b54>
    a8a0:	d9c01d85 	stb	r7,118(sp)
    a8a4:	003d7d06 	br	9e9c <__alt_data_end+0xff009e9c>
    a8a8:	d9c01d85 	stb	r7,118(sp)
    a8ac:	003d5f06 	br	9e2c <__alt_data_end+0xff009e2c>
    a8b0:	a080004c 	andi	r2,r20,1
    a8b4:	0039883a 	mov	fp,zero
    a8b8:	10000526 	beq	r2,zero,a8d0 <___vfiprintf_internal_r+0x1428>
    a8bc:	00800c04 	movi	r2,48
    a8c0:	d88019c5 	stb	r2,103(sp)
    a8c4:	dcc02717 	ldw	r19,156(sp)
    a8c8:	dd4019c4 	addi	r21,sp,103
    a8cc:	003bf606 	br	98a8 <__alt_data_end+0xff0098a8>
    a8d0:	0027883a 	mov	r19,zero
    a8d4:	dd401a04 	addi	r21,sp,104
    a8d8:	003bf306 	br	98a8 <__alt_data_end+0xff0098a8>
    a8dc:	d9c01d85 	stb	r7,118(sp)
    a8e0:	003dc806 	br	a004 <__alt_data_end+0xff00a004>
    a8e4:	d9c01d85 	stb	r7,118(sp)
    a8e8:	003d3a06 	br	9dd4 <__alt_data_end+0xff009dd4>
    a8ec:	d9c01d85 	stb	r7,118(sp)
    a8f0:	003d2a06 	br	9d9c <__alt_data_end+0xff009d9c>
    a8f4:	d9c01d85 	stb	r7,118(sp)
    a8f8:	003cde06 	br	9c74 <__alt_data_end+0xff009c74>
    a8fc:	d9c01d85 	stb	r7,118(sp)
    a900:	003cbc06 	br	9bf4 <__alt_data_end+0xff009bf4>

0000a904 <__vfiprintf_internal>:
    a904:	00800074 	movhi	r2,1
    a908:	1088f404 	addi	r2,r2,9168
    a90c:	300f883a 	mov	r7,r6
    a910:	280d883a 	mov	r6,r5
    a914:	200b883a 	mov	r5,r4
    a918:	11000017 	ldw	r4,0(r2)
    a91c:	00094a81 	jmpi	94a8 <___vfiprintf_internal_r>

0000a920 <__sbprintf>:
    a920:	2880030b 	ldhu	r2,12(r5)
    a924:	2ac01917 	ldw	r11,100(r5)
    a928:	2a80038b 	ldhu	r10,14(r5)
    a92c:	2a400717 	ldw	r9,28(r5)
    a930:	2a000917 	ldw	r8,36(r5)
    a934:	defee204 	addi	sp,sp,-1144
    a938:	00c10004 	movi	r3,1024
    a93c:	dc011a15 	stw	r16,1128(sp)
    a940:	10bfff4c 	andi	r2,r2,65533
    a944:	2821883a 	mov	r16,r5
    a948:	d8cb883a 	add	r5,sp,r3
    a94c:	dc811c15 	stw	r18,1136(sp)
    a950:	dc411b15 	stw	r17,1132(sp)
    a954:	dfc11d15 	stw	ra,1140(sp)
    a958:	2025883a 	mov	r18,r4
    a95c:	d881030d 	sth	r2,1036(sp)
    a960:	dac11915 	stw	r11,1124(sp)
    a964:	da81038d 	sth	r10,1038(sp)
    a968:	da410715 	stw	r9,1052(sp)
    a96c:	da010915 	stw	r8,1060(sp)
    a970:	dec10015 	stw	sp,1024(sp)
    a974:	dec10415 	stw	sp,1040(sp)
    a978:	d8c10215 	stw	r3,1032(sp)
    a97c:	d8c10515 	stw	r3,1044(sp)
    a980:	d8010615 	stw	zero,1048(sp)
    a984:	00094a80 	call	94a8 <___vfiprintf_internal_r>
    a988:	1023883a 	mov	r17,r2
    a98c:	10000416 	blt	r2,zero,a9a0 <__sbprintf+0x80>
    a990:	d9410004 	addi	r5,sp,1024
    a994:	9009883a 	mov	r4,r18
    a998:	00065bc0 	call	65bc <_fflush_r>
    a99c:	10000d1e 	bne	r2,zero,a9d4 <__sbprintf+0xb4>
    a9a0:	d881030b 	ldhu	r2,1036(sp)
    a9a4:	1080100c 	andi	r2,r2,64
    a9a8:	10000326 	beq	r2,zero,a9b8 <__sbprintf+0x98>
    a9ac:	8080030b 	ldhu	r2,12(r16)
    a9b0:	10801014 	ori	r2,r2,64
    a9b4:	8080030d 	sth	r2,12(r16)
    a9b8:	8805883a 	mov	r2,r17
    a9bc:	dfc11d17 	ldw	ra,1140(sp)
    a9c0:	dc811c17 	ldw	r18,1136(sp)
    a9c4:	dc411b17 	ldw	r17,1132(sp)
    a9c8:	dc011a17 	ldw	r16,1128(sp)
    a9cc:	dec11e04 	addi	sp,sp,1144
    a9d0:	f800283a 	ret
    a9d4:	047fffc4 	movi	r17,-1
    a9d8:	003ff106 	br	a9a0 <__alt_data_end+0xff00a9a0>

0000a9dc <_write_r>:
    a9dc:	defffd04 	addi	sp,sp,-12
    a9e0:	2805883a 	mov	r2,r5
    a9e4:	dc000015 	stw	r16,0(sp)
    a9e8:	04000074 	movhi	r16,1
    a9ec:	dc400115 	stw	r17,4(sp)
    a9f0:	300b883a 	mov	r5,r6
    a9f4:	840fcb04 	addi	r16,r16,16172
    a9f8:	2023883a 	mov	r17,r4
    a9fc:	380d883a 	mov	r6,r7
    aa00:	1009883a 	mov	r4,r2
    aa04:	dfc00215 	stw	ra,8(sp)
    aa08:	80000015 	stw	zero,0(r16)
    aa0c:	000eaf40 	call	eaf4 <write>
    aa10:	00ffffc4 	movi	r3,-1
    aa14:	10c00526 	beq	r2,r3,aa2c <_write_r+0x50>
    aa18:	dfc00217 	ldw	ra,8(sp)
    aa1c:	dc400117 	ldw	r17,4(sp)
    aa20:	dc000017 	ldw	r16,0(sp)
    aa24:	dec00304 	addi	sp,sp,12
    aa28:	f800283a 	ret
    aa2c:	80c00017 	ldw	r3,0(r16)
    aa30:	183ff926 	beq	r3,zero,aa18 <__alt_data_end+0xff00aa18>
    aa34:	88c00015 	stw	r3,0(r17)
    aa38:	003ff706 	br	aa18 <__alt_data_end+0xff00aa18>

0000aa3c <_close_r>:
    aa3c:	defffd04 	addi	sp,sp,-12
    aa40:	dc000015 	stw	r16,0(sp)
    aa44:	04000074 	movhi	r16,1
    aa48:	dc400115 	stw	r17,4(sp)
    aa4c:	840fcb04 	addi	r16,r16,16172
    aa50:	2023883a 	mov	r17,r4
    aa54:	2809883a 	mov	r4,r5
    aa58:	dfc00215 	stw	ra,8(sp)
    aa5c:	80000015 	stw	zero,0(r16)
    aa60:	000e5dc0 	call	e5dc <close>
    aa64:	00ffffc4 	movi	r3,-1
    aa68:	10c00526 	beq	r2,r3,aa80 <_close_r+0x44>
    aa6c:	dfc00217 	ldw	ra,8(sp)
    aa70:	dc400117 	ldw	r17,4(sp)
    aa74:	dc000017 	ldw	r16,0(sp)
    aa78:	dec00304 	addi	sp,sp,12
    aa7c:	f800283a 	ret
    aa80:	80c00017 	ldw	r3,0(r16)
    aa84:	183ff926 	beq	r3,zero,aa6c <__alt_data_end+0xff00aa6c>
    aa88:	88c00015 	stw	r3,0(r17)
    aa8c:	003ff706 	br	aa6c <__alt_data_end+0xff00aa6c>

0000aa90 <_calloc_r>:
    aa90:	298b383a 	mul	r5,r5,r6
    aa94:	defffe04 	addi	sp,sp,-8
    aa98:	dfc00115 	stw	ra,4(sp)
    aa9c:	dc000015 	stw	r16,0(sp)
    aaa0:	0001cbc0 	call	1cbc <_malloc_r>
    aaa4:	10002926 	beq	r2,zero,ab4c <_calloc_r+0xbc>
    aaa8:	11bfff17 	ldw	r6,-4(r2)
    aaac:	1021883a 	mov	r16,r2
    aab0:	00bfff04 	movi	r2,-4
    aab4:	308c703a 	and	r6,r6,r2
    aab8:	00c00904 	movi	r3,36
    aabc:	308d883a 	add	r6,r6,r2
    aac0:	19801636 	bltu	r3,r6,ab1c <_calloc_r+0x8c>
    aac4:	008004c4 	movi	r2,19
    aac8:	11800b2e 	bgeu	r2,r6,aaf8 <_calloc_r+0x68>
    aacc:	80000015 	stw	zero,0(r16)
    aad0:	80000115 	stw	zero,4(r16)
    aad4:	008006c4 	movi	r2,27
    aad8:	11801a2e 	bgeu	r2,r6,ab44 <_calloc_r+0xb4>
    aadc:	80000215 	stw	zero,8(r16)
    aae0:	80000315 	stw	zero,12(r16)
    aae4:	30c0151e 	bne	r6,r3,ab3c <_calloc_r+0xac>
    aae8:	80000415 	stw	zero,16(r16)
    aaec:	80800604 	addi	r2,r16,24
    aaf0:	80000515 	stw	zero,20(r16)
    aaf4:	00000106 	br	aafc <_calloc_r+0x6c>
    aaf8:	8005883a 	mov	r2,r16
    aafc:	10000015 	stw	zero,0(r2)
    ab00:	10000115 	stw	zero,4(r2)
    ab04:	10000215 	stw	zero,8(r2)
    ab08:	8005883a 	mov	r2,r16
    ab0c:	dfc00117 	ldw	ra,4(sp)
    ab10:	dc000017 	ldw	r16,0(sp)
    ab14:	dec00204 	addi	sp,sp,8
    ab18:	f800283a 	ret
    ab1c:	000b883a 	mov	r5,zero
    ab20:	8009883a 	mov	r4,r16
    ab24:	0007a800 	call	7a80 <memset>
    ab28:	8005883a 	mov	r2,r16
    ab2c:	dfc00117 	ldw	ra,4(sp)
    ab30:	dc000017 	ldw	r16,0(sp)
    ab34:	dec00204 	addi	sp,sp,8
    ab38:	f800283a 	ret
    ab3c:	80800404 	addi	r2,r16,16
    ab40:	003fee06 	br	aafc <__alt_data_end+0xff00aafc>
    ab44:	80800204 	addi	r2,r16,8
    ab48:	003fec06 	br	aafc <__alt_data_end+0xff00aafc>
    ab4c:	0005883a 	mov	r2,zero
    ab50:	003fee06 	br	ab0c <__alt_data_end+0xff00ab0c>

0000ab54 <_fclose_r>:
    ab54:	28003926 	beq	r5,zero,ac3c <_fclose_r+0xe8>
    ab58:	defffc04 	addi	sp,sp,-16
    ab5c:	dc400115 	stw	r17,4(sp)
    ab60:	dc000015 	stw	r16,0(sp)
    ab64:	dfc00315 	stw	ra,12(sp)
    ab68:	dc800215 	stw	r18,8(sp)
    ab6c:	2023883a 	mov	r17,r4
    ab70:	2821883a 	mov	r16,r5
    ab74:	20000226 	beq	r4,zero,ab80 <_fclose_r+0x2c>
    ab78:	20800e17 	ldw	r2,56(r4)
    ab7c:	10002726 	beq	r2,zero,ac1c <_fclose_r+0xc8>
    ab80:	8080030f 	ldh	r2,12(r16)
    ab84:	1000071e 	bne	r2,zero,aba4 <_fclose_r+0x50>
    ab88:	0005883a 	mov	r2,zero
    ab8c:	dfc00317 	ldw	ra,12(sp)
    ab90:	dc800217 	ldw	r18,8(sp)
    ab94:	dc400117 	ldw	r17,4(sp)
    ab98:	dc000017 	ldw	r16,0(sp)
    ab9c:	dec00404 	addi	sp,sp,16
    aba0:	f800283a 	ret
    aba4:	800b883a 	mov	r5,r16
    aba8:	8809883a 	mov	r4,r17
    abac:	00063a00 	call	63a0 <__sflush_r>
    abb0:	1025883a 	mov	r18,r2
    abb4:	80800b17 	ldw	r2,44(r16)
    abb8:	10000426 	beq	r2,zero,abcc <_fclose_r+0x78>
    abbc:	81400717 	ldw	r5,28(r16)
    abc0:	8809883a 	mov	r4,r17
    abc4:	103ee83a 	callr	r2
    abc8:	10001616 	blt	r2,zero,ac24 <_fclose_r+0xd0>
    abcc:	8080030b 	ldhu	r2,12(r16)
    abd0:	1080200c 	andi	r2,r2,128
    abd4:	1000151e 	bne	r2,zero,ac2c <_fclose_r+0xd8>
    abd8:	81400c17 	ldw	r5,48(r16)
    abdc:	28000526 	beq	r5,zero,abf4 <_fclose_r+0xa0>
    abe0:	80801004 	addi	r2,r16,64
    abe4:	28800226 	beq	r5,r2,abf0 <_fclose_r+0x9c>
    abe8:	8809883a 	mov	r4,r17
    abec:	0006b0c0 	call	6b0c <_free_r>
    abf0:	80000c15 	stw	zero,48(r16)
    abf4:	81401117 	ldw	r5,68(r16)
    abf8:	28000326 	beq	r5,zero,ac08 <_fclose_r+0xb4>
    abfc:	8809883a 	mov	r4,r17
    ac00:	0006b0c0 	call	6b0c <_free_r>
    ac04:	80001115 	stw	zero,68(r16)
    ac08:	00069a80 	call	69a8 <__sfp_lock_acquire>
    ac0c:	8000030d 	sth	zero,12(r16)
    ac10:	00069ac0 	call	69ac <__sfp_lock_release>
    ac14:	9005883a 	mov	r2,r18
    ac18:	003fdc06 	br	ab8c <__alt_data_end+0xff00ab8c>
    ac1c:	00069980 	call	6998 <__sinit>
    ac20:	003fd706 	br	ab80 <__alt_data_end+0xff00ab80>
    ac24:	04bfffc4 	movi	r18,-1
    ac28:	003fe806 	br	abcc <__alt_data_end+0xff00abcc>
    ac2c:	81400417 	ldw	r5,16(r16)
    ac30:	8809883a 	mov	r4,r17
    ac34:	0006b0c0 	call	6b0c <_free_r>
    ac38:	003fe706 	br	abd8 <__alt_data_end+0xff00abd8>
    ac3c:	0005883a 	mov	r2,zero
    ac40:	f800283a 	ret

0000ac44 <fclose>:
    ac44:	00800074 	movhi	r2,1
    ac48:	1088f404 	addi	r2,r2,9168
    ac4c:	200b883a 	mov	r5,r4
    ac50:	11000017 	ldw	r4,0(r2)
    ac54:	000ab541 	jmpi	ab54 <_fclose_r>

0000ac58 <__fputwc>:
    ac58:	defff804 	addi	sp,sp,-32
    ac5c:	dcc00415 	stw	r19,16(sp)
    ac60:	dc800315 	stw	r18,12(sp)
    ac64:	dc000115 	stw	r16,4(sp)
    ac68:	dfc00715 	stw	ra,28(sp)
    ac6c:	dd400615 	stw	r21,24(sp)
    ac70:	dd000515 	stw	r20,20(sp)
    ac74:	dc400215 	stw	r17,8(sp)
    ac78:	2027883a 	mov	r19,r4
    ac7c:	2825883a 	mov	r18,r5
    ac80:	3021883a 	mov	r16,r6
    ac84:	00074e80 	call	74e8 <__locale_mb_cur_max>
    ac88:	00c00044 	movi	r3,1
    ac8c:	10c03e26 	beq	r2,r3,ad88 <__fputwc+0x130>
    ac90:	81c01704 	addi	r7,r16,92
    ac94:	900d883a 	mov	r6,r18
    ac98:	d80b883a 	mov	r5,sp
    ac9c:	9809883a 	mov	r4,r19
    aca0:	000b1280 	call	b128 <_wcrtomb_r>
    aca4:	1029883a 	mov	r20,r2
    aca8:	00bfffc4 	movi	r2,-1
    acac:	a0802026 	beq	r20,r2,ad30 <__fputwc+0xd8>
    acb0:	d9400003 	ldbu	r5,0(sp)
    acb4:	a0001c26 	beq	r20,zero,ad28 <__fputwc+0xd0>
    acb8:	0023883a 	mov	r17,zero
    acbc:	05400284 	movi	r21,10
    acc0:	00000906 	br	ace8 <__fputwc+0x90>
    acc4:	80800017 	ldw	r2,0(r16)
    acc8:	11400005 	stb	r5,0(r2)
    accc:	80c00017 	ldw	r3,0(r16)
    acd0:	18c00044 	addi	r3,r3,1
    acd4:	80c00015 	stw	r3,0(r16)
    acd8:	8c400044 	addi	r17,r17,1
    acdc:	dc45883a 	add	r2,sp,r17
    ace0:	8d00112e 	bgeu	r17,r20,ad28 <__fputwc+0xd0>
    ace4:	11400003 	ldbu	r5,0(r2)
    ace8:	80c00217 	ldw	r3,8(r16)
    acec:	18ffffc4 	addi	r3,r3,-1
    acf0:	80c00215 	stw	r3,8(r16)
    acf4:	183ff30e 	bge	r3,zero,acc4 <__alt_data_end+0xff00acc4>
    acf8:	80800617 	ldw	r2,24(r16)
    acfc:	18801916 	blt	r3,r2,ad64 <__fputwc+0x10c>
    ad00:	80800017 	ldw	r2,0(r16)
    ad04:	11400005 	stb	r5,0(r2)
    ad08:	80800017 	ldw	r2,0(r16)
    ad0c:	10c00003 	ldbu	r3,0(r2)
    ad10:	10800044 	addi	r2,r2,1
    ad14:	1d402326 	beq	r3,r21,ada4 <__fputwc+0x14c>
    ad18:	80800015 	stw	r2,0(r16)
    ad1c:	8c400044 	addi	r17,r17,1
    ad20:	dc45883a 	add	r2,sp,r17
    ad24:	8d3fef36 	bltu	r17,r20,ace4 <__alt_data_end+0xff00ace4>
    ad28:	9005883a 	mov	r2,r18
    ad2c:	00000406 	br	ad40 <__fputwc+0xe8>
    ad30:	80c0030b 	ldhu	r3,12(r16)
    ad34:	a005883a 	mov	r2,r20
    ad38:	18c01014 	ori	r3,r3,64
    ad3c:	80c0030d 	sth	r3,12(r16)
    ad40:	dfc00717 	ldw	ra,28(sp)
    ad44:	dd400617 	ldw	r21,24(sp)
    ad48:	dd000517 	ldw	r20,20(sp)
    ad4c:	dcc00417 	ldw	r19,16(sp)
    ad50:	dc800317 	ldw	r18,12(sp)
    ad54:	dc400217 	ldw	r17,8(sp)
    ad58:	dc000117 	ldw	r16,4(sp)
    ad5c:	dec00804 	addi	sp,sp,32
    ad60:	f800283a 	ret
    ad64:	800d883a 	mov	r6,r16
    ad68:	29403fcc 	andi	r5,r5,255
    ad6c:	9809883a 	mov	r4,r19
    ad70:	000afd00 	call	afd0 <__swbuf_r>
    ad74:	10bfffe0 	cmpeqi	r2,r2,-1
    ad78:	10803fcc 	andi	r2,r2,255
    ad7c:	103fd626 	beq	r2,zero,acd8 <__alt_data_end+0xff00acd8>
    ad80:	00bfffc4 	movi	r2,-1
    ad84:	003fee06 	br	ad40 <__alt_data_end+0xff00ad40>
    ad88:	90ffffc4 	addi	r3,r18,-1
    ad8c:	01003f84 	movi	r4,254
    ad90:	20ffbf36 	bltu	r4,r3,ac90 <__alt_data_end+0xff00ac90>
    ad94:	900b883a 	mov	r5,r18
    ad98:	dc800005 	stb	r18,0(sp)
    ad9c:	1029883a 	mov	r20,r2
    ada0:	003fc506 	br	acb8 <__alt_data_end+0xff00acb8>
    ada4:	800d883a 	mov	r6,r16
    ada8:	a80b883a 	mov	r5,r21
    adac:	9809883a 	mov	r4,r19
    adb0:	000afd00 	call	afd0 <__swbuf_r>
    adb4:	10bfffe0 	cmpeqi	r2,r2,-1
    adb8:	003fef06 	br	ad78 <__alt_data_end+0xff00ad78>

0000adbc <_fputwc_r>:
    adbc:	3080030b 	ldhu	r2,12(r6)
    adc0:	10c8000c 	andi	r3,r2,8192
    adc4:	1800051e 	bne	r3,zero,addc <_fputwc_r+0x20>
    adc8:	30c01917 	ldw	r3,100(r6)
    adcc:	10880014 	ori	r2,r2,8192
    add0:	3080030d 	sth	r2,12(r6)
    add4:	18880014 	ori	r2,r3,8192
    add8:	30801915 	stw	r2,100(r6)
    addc:	000ac581 	jmpi	ac58 <__fputwc>

0000ade0 <fputwc>:
    ade0:	00800074 	movhi	r2,1
    ade4:	defffc04 	addi	sp,sp,-16
    ade8:	1088f404 	addi	r2,r2,9168
    adec:	dc000115 	stw	r16,4(sp)
    adf0:	14000017 	ldw	r16,0(r2)
    adf4:	dc400215 	stw	r17,8(sp)
    adf8:	dfc00315 	stw	ra,12(sp)
    adfc:	2023883a 	mov	r17,r4
    ae00:	80000226 	beq	r16,zero,ae0c <fputwc+0x2c>
    ae04:	80800e17 	ldw	r2,56(r16)
    ae08:	10001026 	beq	r2,zero,ae4c <fputwc+0x6c>
    ae0c:	2880030b 	ldhu	r2,12(r5)
    ae10:	10c8000c 	andi	r3,r2,8192
    ae14:	1800051e 	bne	r3,zero,ae2c <fputwc+0x4c>
    ae18:	28c01917 	ldw	r3,100(r5)
    ae1c:	10880014 	ori	r2,r2,8192
    ae20:	2880030d 	sth	r2,12(r5)
    ae24:	18880014 	ori	r2,r3,8192
    ae28:	28801915 	stw	r2,100(r5)
    ae2c:	280d883a 	mov	r6,r5
    ae30:	8009883a 	mov	r4,r16
    ae34:	880b883a 	mov	r5,r17
    ae38:	dfc00317 	ldw	ra,12(sp)
    ae3c:	dc400217 	ldw	r17,8(sp)
    ae40:	dc000117 	ldw	r16,4(sp)
    ae44:	dec00404 	addi	sp,sp,16
    ae48:	000ac581 	jmpi	ac58 <__fputwc>
    ae4c:	8009883a 	mov	r4,r16
    ae50:	d9400015 	stw	r5,0(sp)
    ae54:	00069980 	call	6998 <__sinit>
    ae58:	d9400017 	ldw	r5,0(sp)
    ae5c:	003feb06 	br	ae0c <__alt_data_end+0xff00ae0c>

0000ae60 <_fstat_r>:
    ae60:	defffd04 	addi	sp,sp,-12
    ae64:	2805883a 	mov	r2,r5
    ae68:	dc000015 	stw	r16,0(sp)
    ae6c:	04000074 	movhi	r16,1
    ae70:	dc400115 	stw	r17,4(sp)
    ae74:	840fcb04 	addi	r16,r16,16172
    ae78:	2023883a 	mov	r17,r4
    ae7c:	300b883a 	mov	r5,r6
    ae80:	1009883a 	mov	r4,r2
    ae84:	dfc00215 	stw	ra,8(sp)
    ae88:	80000015 	stw	zero,0(r16)
    ae8c:	000e6a00 	call	e6a0 <fstat>
    ae90:	00ffffc4 	movi	r3,-1
    ae94:	10c00526 	beq	r2,r3,aeac <_fstat_r+0x4c>
    ae98:	dfc00217 	ldw	ra,8(sp)
    ae9c:	dc400117 	ldw	r17,4(sp)
    aea0:	dc000017 	ldw	r16,0(sp)
    aea4:	dec00304 	addi	sp,sp,12
    aea8:	f800283a 	ret
    aeac:	80c00017 	ldw	r3,0(r16)
    aeb0:	183ff926 	beq	r3,zero,ae98 <__alt_data_end+0xff00ae98>
    aeb4:	88c00015 	stw	r3,0(r17)
    aeb8:	003ff706 	br	ae98 <__alt_data_end+0xff00ae98>

0000aebc <_isatty_r>:
    aebc:	defffd04 	addi	sp,sp,-12
    aec0:	dc000015 	stw	r16,0(sp)
    aec4:	04000074 	movhi	r16,1
    aec8:	dc400115 	stw	r17,4(sp)
    aecc:	840fcb04 	addi	r16,r16,16172
    aed0:	2023883a 	mov	r17,r4
    aed4:	2809883a 	mov	r4,r5
    aed8:	dfc00215 	stw	ra,8(sp)
    aedc:	80000015 	stw	zero,0(r16)
    aee0:	000e7180 	call	e718 <isatty>
    aee4:	00ffffc4 	movi	r3,-1
    aee8:	10c00526 	beq	r2,r3,af00 <_isatty_r+0x44>
    aeec:	dfc00217 	ldw	ra,8(sp)
    aef0:	dc400117 	ldw	r17,4(sp)
    aef4:	dc000017 	ldw	r16,0(sp)
    aef8:	dec00304 	addi	sp,sp,12
    aefc:	f800283a 	ret
    af00:	80c00017 	ldw	r3,0(r16)
    af04:	183ff926 	beq	r3,zero,aeec <__alt_data_end+0xff00aeec>
    af08:	88c00015 	stw	r3,0(r17)
    af0c:	003ff706 	br	aeec <__alt_data_end+0xff00aeec>

0000af10 <_lseek_r>:
    af10:	defffd04 	addi	sp,sp,-12
    af14:	2805883a 	mov	r2,r5
    af18:	dc000015 	stw	r16,0(sp)
    af1c:	04000074 	movhi	r16,1
    af20:	dc400115 	stw	r17,4(sp)
    af24:	300b883a 	mov	r5,r6
    af28:	840fcb04 	addi	r16,r16,16172
    af2c:	2023883a 	mov	r17,r4
    af30:	380d883a 	mov	r6,r7
    af34:	1009883a 	mov	r4,r2
    af38:	dfc00215 	stw	ra,8(sp)
    af3c:	80000015 	stw	zero,0(r16)
    af40:	000e8680 	call	e868 <lseek>
    af44:	00ffffc4 	movi	r3,-1
    af48:	10c00526 	beq	r2,r3,af60 <_lseek_r+0x50>
    af4c:	dfc00217 	ldw	ra,8(sp)
    af50:	dc400117 	ldw	r17,4(sp)
    af54:	dc000017 	ldw	r16,0(sp)
    af58:	dec00304 	addi	sp,sp,12
    af5c:	f800283a 	ret
    af60:	80c00017 	ldw	r3,0(r16)
    af64:	183ff926 	beq	r3,zero,af4c <__alt_data_end+0xff00af4c>
    af68:	88c00015 	stw	r3,0(r17)
    af6c:	003ff706 	br	af4c <__alt_data_end+0xff00af4c>

0000af70 <_read_r>:
    af70:	defffd04 	addi	sp,sp,-12
    af74:	2805883a 	mov	r2,r5
    af78:	dc000015 	stw	r16,0(sp)
    af7c:	04000074 	movhi	r16,1
    af80:	dc400115 	stw	r17,4(sp)
    af84:	300b883a 	mov	r5,r6
    af88:	840fcb04 	addi	r16,r16,16172
    af8c:	2023883a 	mov	r17,r4
    af90:	380d883a 	mov	r6,r7
    af94:	1009883a 	mov	r4,r2
    af98:	dfc00215 	stw	ra,8(sp)
    af9c:	80000015 	stw	zero,0(r16)
    afa0:	000e94c0 	call	e94c <read>
    afa4:	00ffffc4 	movi	r3,-1
    afa8:	10c00526 	beq	r2,r3,afc0 <_read_r+0x50>
    afac:	dfc00217 	ldw	ra,8(sp)
    afb0:	dc400117 	ldw	r17,4(sp)
    afb4:	dc000017 	ldw	r16,0(sp)
    afb8:	dec00304 	addi	sp,sp,12
    afbc:	f800283a 	ret
    afc0:	80c00017 	ldw	r3,0(r16)
    afc4:	183ff926 	beq	r3,zero,afac <__alt_data_end+0xff00afac>
    afc8:	88c00015 	stw	r3,0(r17)
    afcc:	003ff706 	br	afac <__alt_data_end+0xff00afac>

0000afd0 <__swbuf_r>:
    afd0:	defffb04 	addi	sp,sp,-20
    afd4:	dcc00315 	stw	r19,12(sp)
    afd8:	dc800215 	stw	r18,8(sp)
    afdc:	dc000015 	stw	r16,0(sp)
    afe0:	dfc00415 	stw	ra,16(sp)
    afe4:	dc400115 	stw	r17,4(sp)
    afe8:	2025883a 	mov	r18,r4
    afec:	2827883a 	mov	r19,r5
    aff0:	3021883a 	mov	r16,r6
    aff4:	20000226 	beq	r4,zero,b000 <__swbuf_r+0x30>
    aff8:	20800e17 	ldw	r2,56(r4)
    affc:	10004226 	beq	r2,zero,b108 <__swbuf_r+0x138>
    b000:	80800617 	ldw	r2,24(r16)
    b004:	8100030b 	ldhu	r4,12(r16)
    b008:	80800215 	stw	r2,8(r16)
    b00c:	2080020c 	andi	r2,r4,8
    b010:	10003626 	beq	r2,zero,b0ec <__swbuf_r+0x11c>
    b014:	80c00417 	ldw	r3,16(r16)
    b018:	18003426 	beq	r3,zero,b0ec <__swbuf_r+0x11c>
    b01c:	2088000c 	andi	r2,r4,8192
    b020:	9c403fcc 	andi	r17,r19,255
    b024:	10001a26 	beq	r2,zero,b090 <__swbuf_r+0xc0>
    b028:	80800017 	ldw	r2,0(r16)
    b02c:	81000517 	ldw	r4,20(r16)
    b030:	10c7c83a 	sub	r3,r2,r3
    b034:	1900200e 	bge	r3,r4,b0b8 <__swbuf_r+0xe8>
    b038:	18c00044 	addi	r3,r3,1
    b03c:	81000217 	ldw	r4,8(r16)
    b040:	11400044 	addi	r5,r2,1
    b044:	81400015 	stw	r5,0(r16)
    b048:	213fffc4 	addi	r4,r4,-1
    b04c:	81000215 	stw	r4,8(r16)
    b050:	14c00005 	stb	r19,0(r2)
    b054:	80800517 	ldw	r2,20(r16)
    b058:	10c01e26 	beq	r2,r3,b0d4 <__swbuf_r+0x104>
    b05c:	8080030b 	ldhu	r2,12(r16)
    b060:	1080004c 	andi	r2,r2,1
    b064:	10000226 	beq	r2,zero,b070 <__swbuf_r+0xa0>
    b068:	00800284 	movi	r2,10
    b06c:	88801926 	beq	r17,r2,b0d4 <__swbuf_r+0x104>
    b070:	8805883a 	mov	r2,r17
    b074:	dfc00417 	ldw	ra,16(sp)
    b078:	dcc00317 	ldw	r19,12(sp)
    b07c:	dc800217 	ldw	r18,8(sp)
    b080:	dc400117 	ldw	r17,4(sp)
    b084:	dc000017 	ldw	r16,0(sp)
    b088:	dec00504 	addi	sp,sp,20
    b08c:	f800283a 	ret
    b090:	81401917 	ldw	r5,100(r16)
    b094:	00b7ffc4 	movi	r2,-8193
    b098:	21080014 	ori	r4,r4,8192
    b09c:	2884703a 	and	r2,r5,r2
    b0a0:	80801915 	stw	r2,100(r16)
    b0a4:	80800017 	ldw	r2,0(r16)
    b0a8:	8100030d 	sth	r4,12(r16)
    b0ac:	81000517 	ldw	r4,20(r16)
    b0b0:	10c7c83a 	sub	r3,r2,r3
    b0b4:	193fe016 	blt	r3,r4,b038 <__alt_data_end+0xff00b038>
    b0b8:	800b883a 	mov	r5,r16
    b0bc:	9009883a 	mov	r4,r18
    b0c0:	00065bc0 	call	65bc <_fflush_r>
    b0c4:	1000071e 	bne	r2,zero,b0e4 <__swbuf_r+0x114>
    b0c8:	80800017 	ldw	r2,0(r16)
    b0cc:	00c00044 	movi	r3,1
    b0d0:	003fda06 	br	b03c <__alt_data_end+0xff00b03c>
    b0d4:	800b883a 	mov	r5,r16
    b0d8:	9009883a 	mov	r4,r18
    b0dc:	00065bc0 	call	65bc <_fflush_r>
    b0e0:	103fe326 	beq	r2,zero,b070 <__alt_data_end+0xff00b070>
    b0e4:	00bfffc4 	movi	r2,-1
    b0e8:	003fe206 	br	b074 <__alt_data_end+0xff00b074>
    b0ec:	800b883a 	mov	r5,r16
    b0f0:	9009883a 	mov	r4,r18
    b0f4:	00049c40 	call	49c4 <__swsetup_r>
    b0f8:	103ffa1e 	bne	r2,zero,b0e4 <__alt_data_end+0xff00b0e4>
    b0fc:	8100030b 	ldhu	r4,12(r16)
    b100:	80c00417 	ldw	r3,16(r16)
    b104:	003fc506 	br	b01c <__alt_data_end+0xff00b01c>
    b108:	00069980 	call	6998 <__sinit>
    b10c:	003fbc06 	br	b000 <__alt_data_end+0xff00b000>

0000b110 <__swbuf>:
    b110:	00800074 	movhi	r2,1
    b114:	1088f404 	addi	r2,r2,9168
    b118:	280d883a 	mov	r6,r5
    b11c:	200b883a 	mov	r5,r4
    b120:	11000017 	ldw	r4,0(r2)
    b124:	000afd01 	jmpi	afd0 <__swbuf_r>

0000b128 <_wcrtomb_r>:
    b128:	defff604 	addi	sp,sp,-40
    b12c:	00800074 	movhi	r2,1
    b130:	dc800815 	stw	r18,32(sp)
    b134:	dc400715 	stw	r17,28(sp)
    b138:	dc000615 	stw	r16,24(sp)
    b13c:	1088f604 	addi	r2,r2,9176
    b140:	dfc00915 	stw	ra,36(sp)
    b144:	2021883a 	mov	r16,r4
    b148:	3823883a 	mov	r17,r7
    b14c:	14800017 	ldw	r18,0(r2)
    b150:	28001426 	beq	r5,zero,b1a4 <_wcrtomb_r+0x7c>
    b154:	d9400415 	stw	r5,16(sp)
    b158:	d9800515 	stw	r6,20(sp)
    b15c:	00074dc0 	call	74dc <__locale_charset>
    b160:	d9800517 	ldw	r6,20(sp)
    b164:	d9400417 	ldw	r5,16(sp)
    b168:	100f883a 	mov	r7,r2
    b16c:	dc400015 	stw	r17,0(sp)
    b170:	8009883a 	mov	r4,r16
    b174:	903ee83a 	callr	r18
    b178:	00ffffc4 	movi	r3,-1
    b17c:	10c0031e 	bne	r2,r3,b18c <_wcrtomb_r+0x64>
    b180:	88000015 	stw	zero,0(r17)
    b184:	00c02284 	movi	r3,138
    b188:	80c00015 	stw	r3,0(r16)
    b18c:	dfc00917 	ldw	ra,36(sp)
    b190:	dc800817 	ldw	r18,32(sp)
    b194:	dc400717 	ldw	r17,28(sp)
    b198:	dc000617 	ldw	r16,24(sp)
    b19c:	dec00a04 	addi	sp,sp,40
    b1a0:	f800283a 	ret
    b1a4:	00074dc0 	call	74dc <__locale_charset>
    b1a8:	100f883a 	mov	r7,r2
    b1ac:	dc400015 	stw	r17,0(sp)
    b1b0:	000d883a 	mov	r6,zero
    b1b4:	d9400104 	addi	r5,sp,4
    b1b8:	8009883a 	mov	r4,r16
    b1bc:	903ee83a 	callr	r18
    b1c0:	003fed06 	br	b178 <__alt_data_end+0xff00b178>

0000b1c4 <wcrtomb>:
    b1c4:	defff604 	addi	sp,sp,-40
    b1c8:	00800074 	movhi	r2,1
    b1cc:	dc800615 	stw	r18,24(sp)
    b1d0:	dc400515 	stw	r17,20(sp)
    b1d4:	1088f404 	addi	r2,r2,9168
    b1d8:	dfc00915 	stw	ra,36(sp)
    b1dc:	dd000815 	stw	r20,32(sp)
    b1e0:	dcc00715 	stw	r19,28(sp)
    b1e4:	dc000415 	stw	r16,16(sp)
    b1e8:	3025883a 	mov	r18,r6
    b1ec:	14400017 	ldw	r17,0(r2)
    b1f0:	20001926 	beq	r4,zero,b258 <wcrtomb+0x94>
    b1f4:	00800074 	movhi	r2,1
    b1f8:	1088f604 	addi	r2,r2,9176
    b1fc:	15000017 	ldw	r20,0(r2)
    b200:	2021883a 	mov	r16,r4
    b204:	2827883a 	mov	r19,r5
    b208:	00074dc0 	call	74dc <__locale_charset>
    b20c:	100f883a 	mov	r7,r2
    b210:	dc800015 	stw	r18,0(sp)
    b214:	980d883a 	mov	r6,r19
    b218:	800b883a 	mov	r5,r16
    b21c:	8809883a 	mov	r4,r17
    b220:	a03ee83a 	callr	r20
    b224:	00ffffc4 	movi	r3,-1
    b228:	10c0031e 	bne	r2,r3,b238 <wcrtomb+0x74>
    b22c:	90000015 	stw	zero,0(r18)
    b230:	00c02284 	movi	r3,138
    b234:	88c00015 	stw	r3,0(r17)
    b238:	dfc00917 	ldw	ra,36(sp)
    b23c:	dd000817 	ldw	r20,32(sp)
    b240:	dcc00717 	ldw	r19,28(sp)
    b244:	dc800617 	ldw	r18,24(sp)
    b248:	dc400517 	ldw	r17,20(sp)
    b24c:	dc000417 	ldw	r16,16(sp)
    b250:	dec00a04 	addi	sp,sp,40
    b254:	f800283a 	ret
    b258:	00800074 	movhi	r2,1
    b25c:	1088f604 	addi	r2,r2,9176
    b260:	14000017 	ldw	r16,0(r2)
    b264:	00074dc0 	call	74dc <__locale_charset>
    b268:	100f883a 	mov	r7,r2
    b26c:	dc800015 	stw	r18,0(sp)
    b270:	000d883a 	mov	r6,zero
    b274:	d9400104 	addi	r5,sp,4
    b278:	8809883a 	mov	r4,r17
    b27c:	803ee83a 	callr	r16
    b280:	003fe806 	br	b224 <__alt_data_end+0xff00b224>

0000b284 <__ascii_wctomb>:
    b284:	28000526 	beq	r5,zero,b29c <__ascii_wctomb+0x18>
    b288:	00803fc4 	movi	r2,255
    b28c:	11800536 	bltu	r2,r6,b2a4 <__ascii_wctomb+0x20>
    b290:	29800005 	stb	r6,0(r5)
    b294:	00800044 	movi	r2,1
    b298:	f800283a 	ret
    b29c:	0005883a 	mov	r2,zero
    b2a0:	f800283a 	ret
    b2a4:	00802284 	movi	r2,138
    b2a8:	20800015 	stw	r2,0(r4)
    b2ac:	00bfffc4 	movi	r2,-1
    b2b0:	f800283a 	ret

0000b2b4 <_wctomb_r>:
    b2b4:	00800074 	movhi	r2,1
    b2b8:	defff904 	addi	sp,sp,-28
    b2bc:	1088f604 	addi	r2,r2,9176
    b2c0:	dfc00615 	stw	ra,24(sp)
    b2c4:	dc400515 	stw	r17,20(sp)
    b2c8:	dc000415 	stw	r16,16(sp)
    b2cc:	3823883a 	mov	r17,r7
    b2d0:	14000017 	ldw	r16,0(r2)
    b2d4:	d9000115 	stw	r4,4(sp)
    b2d8:	d9400215 	stw	r5,8(sp)
    b2dc:	d9800315 	stw	r6,12(sp)
    b2e0:	00074dc0 	call	74dc <__locale_charset>
    b2e4:	d9800317 	ldw	r6,12(sp)
    b2e8:	d9400217 	ldw	r5,8(sp)
    b2ec:	d9000117 	ldw	r4,4(sp)
    b2f0:	100f883a 	mov	r7,r2
    b2f4:	dc400015 	stw	r17,0(sp)
    b2f8:	803ee83a 	callr	r16
    b2fc:	dfc00617 	ldw	ra,24(sp)
    b300:	dc400517 	ldw	r17,20(sp)
    b304:	dc000417 	ldw	r16,16(sp)
    b308:	dec00704 	addi	sp,sp,28
    b30c:	f800283a 	ret

0000b310 <__udivdi3>:
    b310:	defff504 	addi	sp,sp,-44
    b314:	dcc00415 	stw	r19,16(sp)
    b318:	dc000115 	stw	r16,4(sp)
    b31c:	dfc00a15 	stw	ra,40(sp)
    b320:	df000915 	stw	fp,36(sp)
    b324:	ddc00815 	stw	r23,32(sp)
    b328:	dd800715 	stw	r22,28(sp)
    b32c:	dd400615 	stw	r21,24(sp)
    b330:	dd000515 	stw	r20,20(sp)
    b334:	dc800315 	stw	r18,12(sp)
    b338:	dc400215 	stw	r17,8(sp)
    b33c:	2027883a 	mov	r19,r4
    b340:	2821883a 	mov	r16,r5
    b344:	3800411e 	bne	r7,zero,b44c <__udivdi3+0x13c>
    b348:	3023883a 	mov	r17,r6
    b34c:	2025883a 	mov	r18,r4
    b350:	2980522e 	bgeu	r5,r6,b49c <__udivdi3+0x18c>
    b354:	00bfffd4 	movui	r2,65535
    b358:	282d883a 	mov	r22,r5
    b35c:	1180a836 	bltu	r2,r6,b600 <__udivdi3+0x2f0>
    b360:	00803fc4 	movi	r2,255
    b364:	1185803a 	cmpltu	r2,r2,r6
    b368:	100490fa 	slli	r2,r2,3
    b36c:	3086d83a 	srl	r3,r6,r2
    b370:	01000074 	movhi	r4,1
    b374:	2101fd04 	addi	r4,r4,2036
    b378:	20c7883a 	add	r3,r4,r3
    b37c:	18c00003 	ldbu	r3,0(r3)
    b380:	1885883a 	add	r2,r3,r2
    b384:	00c00804 	movi	r3,32
    b388:	1887c83a 	sub	r3,r3,r2
    b38c:	18000526 	beq	r3,zero,b3a4 <__udivdi3+0x94>
    b390:	80e0983a 	sll	r16,r16,r3
    b394:	9884d83a 	srl	r2,r19,r2
    b398:	30e2983a 	sll	r17,r6,r3
    b39c:	98e4983a 	sll	r18,r19,r3
    b3a0:	142cb03a 	or	r22,r2,r16
    b3a4:	882ad43a 	srli	r21,r17,16
    b3a8:	b009883a 	mov	r4,r22
    b3ac:	8d3fffcc 	andi	r20,r17,65535
    b3b0:	a80b883a 	mov	r5,r21
    b3b4:	000bf1c0 	call	bf1c <__umodsi3>
    b3b8:	b009883a 	mov	r4,r22
    b3bc:	a80b883a 	mov	r5,r21
    b3c0:	1027883a 	mov	r19,r2
    b3c4:	000beb80 	call	beb8 <__udivsi3>
    b3c8:	102d883a 	mov	r22,r2
    b3cc:	9826943a 	slli	r19,r19,16
    b3d0:	9004d43a 	srli	r2,r18,16
    b3d4:	a5a1383a 	mul	r16,r20,r22
    b3d8:	14c4b03a 	or	r2,r2,r19
    b3dc:	1400052e 	bgeu	r2,r16,b3f4 <__udivdi3+0xe4>
    b3e0:	1445883a 	add	r2,r2,r17
    b3e4:	b0ffffc4 	addi	r3,r22,-1
    b3e8:	14400136 	bltu	r2,r17,b3f0 <__udivdi3+0xe0>
    b3ec:	14012336 	bltu	r2,r16,b87c <__udivdi3+0x56c>
    b3f0:	182d883a 	mov	r22,r3
    b3f4:	1421c83a 	sub	r16,r2,r16
    b3f8:	a80b883a 	mov	r5,r21
    b3fc:	8009883a 	mov	r4,r16
    b400:	000bf1c0 	call	bf1c <__umodsi3>
    b404:	1027883a 	mov	r19,r2
    b408:	a80b883a 	mov	r5,r21
    b40c:	8009883a 	mov	r4,r16
    b410:	000beb80 	call	beb8 <__udivsi3>
    b414:	9826943a 	slli	r19,r19,16
    b418:	a0a9383a 	mul	r20,r20,r2
    b41c:	94bfffcc 	andi	r18,r18,65535
    b420:	94e4b03a 	or	r18,r18,r19
    b424:	9500052e 	bgeu	r18,r20,b43c <__udivdi3+0x12c>
    b428:	8ca5883a 	add	r18,r17,r18
    b42c:	10ffffc4 	addi	r3,r2,-1
    b430:	9440f136 	bltu	r18,r17,b7f8 <__udivdi3+0x4e8>
    b434:	9500f02e 	bgeu	r18,r20,b7f8 <__udivdi3+0x4e8>
    b438:	10bfff84 	addi	r2,r2,-2
    b43c:	b00c943a 	slli	r6,r22,16
    b440:	0007883a 	mov	r3,zero
    b444:	3084b03a 	or	r2,r6,r2
    b448:	00005906 	br	b5b0 <__udivdi3+0x2a0>
    b44c:	29c05636 	bltu	r5,r7,b5a8 <__udivdi3+0x298>
    b450:	00bfffd4 	movui	r2,65535
    b454:	11c0622e 	bgeu	r2,r7,b5e0 <__udivdi3+0x2d0>
    b458:	00804034 	movhi	r2,256
    b45c:	10bfffc4 	addi	r2,r2,-1
    b460:	11c0ee36 	bltu	r2,r7,b81c <__udivdi3+0x50c>
    b464:	00800404 	movi	r2,16
    b468:	3886d83a 	srl	r3,r7,r2
    b46c:	01000074 	movhi	r4,1
    b470:	2101fd04 	addi	r4,r4,2036
    b474:	20c7883a 	add	r3,r4,r3
    b478:	18c00003 	ldbu	r3,0(r3)
    b47c:	05400804 	movi	r21,32
    b480:	1885883a 	add	r2,r3,r2
    b484:	a8abc83a 	sub	r21,r21,r2
    b488:	a800621e 	bne	r21,zero,b614 <__udivdi3+0x304>
    b48c:	3c00e936 	bltu	r7,r16,b834 <__udivdi3+0x524>
    b490:	9985403a 	cmpgeu	r2,r19,r6
    b494:	0007883a 	mov	r3,zero
    b498:	00004506 	br	b5b0 <__udivdi3+0x2a0>
    b49c:	3000041e 	bne	r6,zero,b4b0 <__udivdi3+0x1a0>
    b4a0:	000b883a 	mov	r5,zero
    b4a4:	01000044 	movi	r4,1
    b4a8:	000beb80 	call	beb8 <__udivsi3>
    b4ac:	1023883a 	mov	r17,r2
    b4b0:	00bfffd4 	movui	r2,65535
    b4b4:	14404e2e 	bgeu	r2,r17,b5f0 <__udivdi3+0x2e0>
    b4b8:	00804034 	movhi	r2,256
    b4bc:	10bfffc4 	addi	r2,r2,-1
    b4c0:	1440d836 	bltu	r2,r17,b824 <__udivdi3+0x514>
    b4c4:	00800404 	movi	r2,16
    b4c8:	8886d83a 	srl	r3,r17,r2
    b4cc:	01000074 	movhi	r4,1
    b4d0:	2101fd04 	addi	r4,r4,2036
    b4d4:	20c7883a 	add	r3,r4,r3
    b4d8:	18c00003 	ldbu	r3,0(r3)
    b4dc:	1885883a 	add	r2,r3,r2
    b4e0:	00c00804 	movi	r3,32
    b4e4:	1887c83a 	sub	r3,r3,r2
    b4e8:	18008f1e 	bne	r3,zero,b728 <__udivdi3+0x418>
    b4ec:	882ad43a 	srli	r21,r17,16
    b4f0:	8461c83a 	sub	r16,r16,r17
    b4f4:	8d3fffcc 	andi	r20,r17,65535
    b4f8:	00c00044 	movi	r3,1
    b4fc:	8009883a 	mov	r4,r16
    b500:	a80b883a 	mov	r5,r21
    b504:	d8c00015 	stw	r3,0(sp)
    b508:	000bf1c0 	call	bf1c <__umodsi3>
    b50c:	8009883a 	mov	r4,r16
    b510:	a80b883a 	mov	r5,r21
    b514:	1027883a 	mov	r19,r2
    b518:	000beb80 	call	beb8 <__udivsi3>
    b51c:	9826943a 	slli	r19,r19,16
    b520:	9008d43a 	srli	r4,r18,16
    b524:	1521383a 	mul	r16,r2,r20
    b528:	102d883a 	mov	r22,r2
    b52c:	24c8b03a 	or	r4,r4,r19
    b530:	d8c00017 	ldw	r3,0(sp)
    b534:	2400052e 	bgeu	r4,r16,b54c <__udivdi3+0x23c>
    b538:	2449883a 	add	r4,r4,r17
    b53c:	b0bfffc4 	addi	r2,r22,-1
    b540:	24400136 	bltu	r4,r17,b548 <__udivdi3+0x238>
    b544:	2400ca36 	bltu	r4,r16,b870 <__udivdi3+0x560>
    b548:	102d883a 	mov	r22,r2
    b54c:	2421c83a 	sub	r16,r4,r16
    b550:	a80b883a 	mov	r5,r21
    b554:	8009883a 	mov	r4,r16
    b558:	d8c00015 	stw	r3,0(sp)
    b55c:	000bf1c0 	call	bf1c <__umodsi3>
    b560:	1027883a 	mov	r19,r2
    b564:	a80b883a 	mov	r5,r21
    b568:	8009883a 	mov	r4,r16
    b56c:	000beb80 	call	beb8 <__udivsi3>
    b570:	9826943a 	slli	r19,r19,16
    b574:	1529383a 	mul	r20,r2,r20
    b578:	94bfffcc 	andi	r18,r18,65535
    b57c:	94e4b03a 	or	r18,r18,r19
    b580:	d8c00017 	ldw	r3,0(sp)
    b584:	9500052e 	bgeu	r18,r20,b59c <__udivdi3+0x28c>
    b588:	8ca5883a 	add	r18,r17,r18
    b58c:	113fffc4 	addi	r4,r2,-1
    b590:	94409736 	bltu	r18,r17,b7f0 <__udivdi3+0x4e0>
    b594:	9500962e 	bgeu	r18,r20,b7f0 <__udivdi3+0x4e0>
    b598:	10bfff84 	addi	r2,r2,-2
    b59c:	b00c943a 	slli	r6,r22,16
    b5a0:	3084b03a 	or	r2,r6,r2
    b5a4:	00000206 	br	b5b0 <__udivdi3+0x2a0>
    b5a8:	0007883a 	mov	r3,zero
    b5ac:	0005883a 	mov	r2,zero
    b5b0:	dfc00a17 	ldw	ra,40(sp)
    b5b4:	df000917 	ldw	fp,36(sp)
    b5b8:	ddc00817 	ldw	r23,32(sp)
    b5bc:	dd800717 	ldw	r22,28(sp)
    b5c0:	dd400617 	ldw	r21,24(sp)
    b5c4:	dd000517 	ldw	r20,20(sp)
    b5c8:	dcc00417 	ldw	r19,16(sp)
    b5cc:	dc800317 	ldw	r18,12(sp)
    b5d0:	dc400217 	ldw	r17,8(sp)
    b5d4:	dc000117 	ldw	r16,4(sp)
    b5d8:	dec00b04 	addi	sp,sp,44
    b5dc:	f800283a 	ret
    b5e0:	00803fc4 	movi	r2,255
    b5e4:	11c5803a 	cmpltu	r2,r2,r7
    b5e8:	100490fa 	slli	r2,r2,3
    b5ec:	003f9e06 	br	b468 <__alt_data_end+0xff00b468>
    b5f0:	00803fc4 	movi	r2,255
    b5f4:	1445803a 	cmpltu	r2,r2,r17
    b5f8:	100490fa 	slli	r2,r2,3
    b5fc:	003fb206 	br	b4c8 <__alt_data_end+0xff00b4c8>
    b600:	00804034 	movhi	r2,256
    b604:	10bfffc4 	addi	r2,r2,-1
    b608:	11808836 	bltu	r2,r6,b82c <__udivdi3+0x51c>
    b60c:	00800404 	movi	r2,16
    b610:	003f5606 	br	b36c <__alt_data_end+0xff00b36c>
    b614:	30aed83a 	srl	r23,r6,r2
    b618:	3d4e983a 	sll	r7,r7,r21
    b61c:	80acd83a 	srl	r22,r16,r2
    b620:	9884d83a 	srl	r2,r19,r2
    b624:	3deeb03a 	or	r23,r7,r23
    b628:	b824d43a 	srli	r18,r23,16
    b62c:	8560983a 	sll	r16,r16,r21
    b630:	b009883a 	mov	r4,r22
    b634:	900b883a 	mov	r5,r18
    b638:	3568983a 	sll	r20,r6,r21
    b63c:	1420b03a 	or	r16,r2,r16
    b640:	000bf1c0 	call	bf1c <__umodsi3>
    b644:	b009883a 	mov	r4,r22
    b648:	900b883a 	mov	r5,r18
    b64c:	1023883a 	mov	r17,r2
    b650:	000beb80 	call	beb8 <__udivsi3>
    b654:	8808943a 	slli	r4,r17,16
    b658:	bf3fffcc 	andi	fp,r23,65535
    b65c:	8006d43a 	srli	r3,r16,16
    b660:	e0a3383a 	mul	r17,fp,r2
    b664:	100d883a 	mov	r6,r2
    b668:	1906b03a 	or	r3,r3,r4
    b66c:	1c40042e 	bgeu	r3,r17,b680 <__udivdi3+0x370>
    b670:	1dc7883a 	add	r3,r3,r23
    b674:	10bfffc4 	addi	r2,r2,-1
    b678:	1dc0752e 	bgeu	r3,r23,b850 <__udivdi3+0x540>
    b67c:	100d883a 	mov	r6,r2
    b680:	1c63c83a 	sub	r17,r3,r17
    b684:	900b883a 	mov	r5,r18
    b688:	8809883a 	mov	r4,r17
    b68c:	d9800015 	stw	r6,0(sp)
    b690:	000bf1c0 	call	bf1c <__umodsi3>
    b694:	102d883a 	mov	r22,r2
    b698:	8809883a 	mov	r4,r17
    b69c:	900b883a 	mov	r5,r18
    b6a0:	000beb80 	call	beb8 <__udivsi3>
    b6a4:	b02c943a 	slli	r22,r22,16
    b6a8:	e089383a 	mul	r4,fp,r2
    b6ac:	843fffcc 	andi	r16,r16,65535
    b6b0:	85a0b03a 	or	r16,r16,r22
    b6b4:	d9800017 	ldw	r6,0(sp)
    b6b8:	8100042e 	bgeu	r16,r4,b6cc <__udivdi3+0x3bc>
    b6bc:	85e1883a 	add	r16,r16,r23
    b6c0:	10ffffc4 	addi	r3,r2,-1
    b6c4:	85c05e2e 	bgeu	r16,r23,b840 <__udivdi3+0x530>
    b6c8:	1805883a 	mov	r2,r3
    b6cc:	300c943a 	slli	r6,r6,16
    b6d0:	a17fffcc 	andi	r5,r20,65535
    b6d4:	a028d43a 	srli	r20,r20,16
    b6d8:	3084b03a 	or	r2,r6,r2
    b6dc:	10ffffcc 	andi	r3,r2,65535
    b6e0:	100cd43a 	srli	r6,r2,16
    b6e4:	194f383a 	mul	r7,r3,r5
    b6e8:	1d07383a 	mul	r3,r3,r20
    b6ec:	314b383a 	mul	r5,r6,r5
    b6f0:	3810d43a 	srli	r8,r7,16
    b6f4:	8121c83a 	sub	r16,r16,r4
    b6f8:	1947883a 	add	r3,r3,r5
    b6fc:	40c7883a 	add	r3,r8,r3
    b700:	350d383a 	mul	r6,r6,r20
    b704:	1940022e 	bgeu	r3,r5,b710 <__udivdi3+0x400>
    b708:	01000074 	movhi	r4,1
    b70c:	310d883a 	add	r6,r6,r4
    b710:	1828d43a 	srli	r20,r3,16
    b714:	a18d883a 	add	r6,r20,r6
    b718:	81803e36 	bltu	r16,r6,b814 <__udivdi3+0x504>
    b71c:	81803826 	beq	r16,r6,b800 <__udivdi3+0x4f0>
    b720:	0007883a 	mov	r3,zero
    b724:	003fa206 	br	b5b0 <__alt_data_end+0xff00b5b0>
    b728:	88e2983a 	sll	r17,r17,r3
    b72c:	80a8d83a 	srl	r20,r16,r2
    b730:	80e0983a 	sll	r16,r16,r3
    b734:	882ad43a 	srli	r21,r17,16
    b738:	9884d83a 	srl	r2,r19,r2
    b73c:	a009883a 	mov	r4,r20
    b740:	a80b883a 	mov	r5,r21
    b744:	142eb03a 	or	r23,r2,r16
    b748:	98e4983a 	sll	r18,r19,r3
    b74c:	000bf1c0 	call	bf1c <__umodsi3>
    b750:	a009883a 	mov	r4,r20
    b754:	a80b883a 	mov	r5,r21
    b758:	1021883a 	mov	r16,r2
    b75c:	000beb80 	call	beb8 <__udivsi3>
    b760:	1039883a 	mov	fp,r2
    b764:	8d3fffcc 	andi	r20,r17,65535
    b768:	8020943a 	slli	r16,r16,16
    b76c:	b804d43a 	srli	r2,r23,16
    b770:	a72d383a 	mul	r22,r20,fp
    b774:	1404b03a 	or	r2,r2,r16
    b778:	1580062e 	bgeu	r2,r22,b794 <__udivdi3+0x484>
    b77c:	1445883a 	add	r2,r2,r17
    b780:	e0ffffc4 	addi	r3,fp,-1
    b784:	14403836 	bltu	r2,r17,b868 <__udivdi3+0x558>
    b788:	1580372e 	bgeu	r2,r22,b868 <__udivdi3+0x558>
    b78c:	e73fff84 	addi	fp,fp,-2
    b790:	1445883a 	add	r2,r2,r17
    b794:	15adc83a 	sub	r22,r2,r22
    b798:	a80b883a 	mov	r5,r21
    b79c:	b009883a 	mov	r4,r22
    b7a0:	000bf1c0 	call	bf1c <__umodsi3>
    b7a4:	1027883a 	mov	r19,r2
    b7a8:	b009883a 	mov	r4,r22
    b7ac:	a80b883a 	mov	r5,r21
    b7b0:	000beb80 	call	beb8 <__udivsi3>
    b7b4:	9826943a 	slli	r19,r19,16
    b7b8:	a0a1383a 	mul	r16,r20,r2
    b7bc:	b93fffcc 	andi	r4,r23,65535
    b7c0:	24c8b03a 	or	r4,r4,r19
    b7c4:	2400062e 	bgeu	r4,r16,b7e0 <__udivdi3+0x4d0>
    b7c8:	2449883a 	add	r4,r4,r17
    b7cc:	10ffffc4 	addi	r3,r2,-1
    b7d0:	24402336 	bltu	r4,r17,b860 <__udivdi3+0x550>
    b7d4:	2400222e 	bgeu	r4,r16,b860 <__udivdi3+0x550>
    b7d8:	10bfff84 	addi	r2,r2,-2
    b7dc:	2449883a 	add	r4,r4,r17
    b7e0:	e038943a 	slli	fp,fp,16
    b7e4:	2421c83a 	sub	r16,r4,r16
    b7e8:	e086b03a 	or	r3,fp,r2
    b7ec:	003f4306 	br	b4fc <__alt_data_end+0xff00b4fc>
    b7f0:	2005883a 	mov	r2,r4
    b7f4:	003f6906 	br	b59c <__alt_data_end+0xff00b59c>
    b7f8:	1805883a 	mov	r2,r3
    b7fc:	003f0f06 	br	b43c <__alt_data_end+0xff00b43c>
    b800:	1806943a 	slli	r3,r3,16
    b804:	9d66983a 	sll	r19,r19,r21
    b808:	39ffffcc 	andi	r7,r7,65535
    b80c:	19c7883a 	add	r3,r3,r7
    b810:	98ffc32e 	bgeu	r19,r3,b720 <__alt_data_end+0xff00b720>
    b814:	10bfffc4 	addi	r2,r2,-1
    b818:	003fc106 	br	b720 <__alt_data_end+0xff00b720>
    b81c:	00800604 	movi	r2,24
    b820:	003f1106 	br	b468 <__alt_data_end+0xff00b468>
    b824:	00800604 	movi	r2,24
    b828:	003f2706 	br	b4c8 <__alt_data_end+0xff00b4c8>
    b82c:	00800604 	movi	r2,24
    b830:	003ece06 	br	b36c <__alt_data_end+0xff00b36c>
    b834:	0007883a 	mov	r3,zero
    b838:	00800044 	movi	r2,1
    b83c:	003f5c06 	br	b5b0 <__alt_data_end+0xff00b5b0>
    b840:	813fa12e 	bgeu	r16,r4,b6c8 <__alt_data_end+0xff00b6c8>
    b844:	10bfff84 	addi	r2,r2,-2
    b848:	85e1883a 	add	r16,r16,r23
    b84c:	003f9f06 	br	b6cc <__alt_data_end+0xff00b6cc>
    b850:	1c7f8a2e 	bgeu	r3,r17,b67c <__alt_data_end+0xff00b67c>
    b854:	31bfff84 	addi	r6,r6,-2
    b858:	1dc7883a 	add	r3,r3,r23
    b85c:	003f8806 	br	b680 <__alt_data_end+0xff00b680>
    b860:	1805883a 	mov	r2,r3
    b864:	003fde06 	br	b7e0 <__alt_data_end+0xff00b7e0>
    b868:	1839883a 	mov	fp,r3
    b86c:	003fc906 	br	b794 <__alt_data_end+0xff00b794>
    b870:	b5bfff84 	addi	r22,r22,-2
    b874:	2449883a 	add	r4,r4,r17
    b878:	003f3406 	br	b54c <__alt_data_end+0xff00b54c>
    b87c:	b5bfff84 	addi	r22,r22,-2
    b880:	1445883a 	add	r2,r2,r17
    b884:	003edb06 	br	b3f4 <__alt_data_end+0xff00b3f4>

0000b888 <__umoddi3>:
    b888:	defff404 	addi	sp,sp,-48
    b88c:	df000a15 	stw	fp,40(sp)
    b890:	dc400315 	stw	r17,12(sp)
    b894:	dc000215 	stw	r16,8(sp)
    b898:	dfc00b15 	stw	ra,44(sp)
    b89c:	ddc00915 	stw	r23,36(sp)
    b8a0:	dd800815 	stw	r22,32(sp)
    b8a4:	dd400715 	stw	r21,28(sp)
    b8a8:	dd000615 	stw	r20,24(sp)
    b8ac:	dcc00515 	stw	r19,20(sp)
    b8b0:	dc800415 	stw	r18,16(sp)
    b8b4:	2021883a 	mov	r16,r4
    b8b8:	2823883a 	mov	r17,r5
    b8bc:	2839883a 	mov	fp,r5
    b8c0:	38003c1e 	bne	r7,zero,b9b4 <__umoddi3+0x12c>
    b8c4:	3027883a 	mov	r19,r6
    b8c8:	2029883a 	mov	r20,r4
    b8cc:	2980512e 	bgeu	r5,r6,ba14 <__umoddi3+0x18c>
    b8d0:	00bfffd4 	movui	r2,65535
    b8d4:	11809a36 	bltu	r2,r6,bb40 <__umoddi3+0x2b8>
    b8d8:	01003fc4 	movi	r4,255
    b8dc:	2189803a 	cmpltu	r4,r4,r6
    b8e0:	200890fa 	slli	r4,r4,3
    b8e4:	3104d83a 	srl	r2,r6,r4
    b8e8:	00c00074 	movhi	r3,1
    b8ec:	18c1fd04 	addi	r3,r3,2036
    b8f0:	1885883a 	add	r2,r3,r2
    b8f4:	10c00003 	ldbu	r3,0(r2)
    b8f8:	00800804 	movi	r2,32
    b8fc:	1909883a 	add	r4,r3,r4
    b900:	1125c83a 	sub	r18,r2,r4
    b904:	90000526 	beq	r18,zero,b91c <__umoddi3+0x94>
    b908:	8ca2983a 	sll	r17,r17,r18
    b90c:	8108d83a 	srl	r4,r16,r4
    b910:	34a6983a 	sll	r19,r6,r18
    b914:	84a8983a 	sll	r20,r16,r18
    b918:	2478b03a 	or	fp,r4,r17
    b91c:	982ed43a 	srli	r23,r19,16
    b920:	e009883a 	mov	r4,fp
    b924:	9dbfffcc 	andi	r22,r19,65535
    b928:	b80b883a 	mov	r5,r23
    b92c:	000bf1c0 	call	bf1c <__umodsi3>
    b930:	e009883a 	mov	r4,fp
    b934:	b80b883a 	mov	r5,r23
    b938:	102b883a 	mov	r21,r2
    b93c:	000beb80 	call	beb8 <__udivsi3>
    b940:	a806943a 	slli	r3,r21,16
    b944:	a008d43a 	srli	r4,r20,16
    b948:	b085383a 	mul	r2,r22,r2
    b94c:	20c8b03a 	or	r4,r4,r3
    b950:	2080032e 	bgeu	r4,r2,b960 <__umoddi3+0xd8>
    b954:	24c9883a 	add	r4,r4,r19
    b958:	24c00136 	bltu	r4,r19,b960 <__umoddi3+0xd8>
    b95c:	20811036 	bltu	r4,r2,bda0 <__umoddi3+0x518>
    b960:	20abc83a 	sub	r21,r4,r2
    b964:	b80b883a 	mov	r5,r23
    b968:	a809883a 	mov	r4,r21
    b96c:	000bf1c0 	call	bf1c <__umodsi3>
    b970:	1023883a 	mov	r17,r2
    b974:	b80b883a 	mov	r5,r23
    b978:	a809883a 	mov	r4,r21
    b97c:	000beb80 	call	beb8 <__udivsi3>
    b980:	8822943a 	slli	r17,r17,16
    b984:	b085383a 	mul	r2,r22,r2
    b988:	a0ffffcc 	andi	r3,r20,65535
    b98c:	1c46b03a 	or	r3,r3,r17
    b990:	1880042e 	bgeu	r3,r2,b9a4 <__umoddi3+0x11c>
    b994:	1cc7883a 	add	r3,r3,r19
    b998:	1cc00236 	bltu	r3,r19,b9a4 <__umoddi3+0x11c>
    b99c:	1880012e 	bgeu	r3,r2,b9a4 <__umoddi3+0x11c>
    b9a0:	1cc7883a 	add	r3,r3,r19
    b9a4:	1885c83a 	sub	r2,r3,r2
    b9a8:	1484d83a 	srl	r2,r2,r18
    b9ac:	0007883a 	mov	r3,zero
    b9b0:	00004f06 	br	baf0 <__umoddi3+0x268>
    b9b4:	29c04c36 	bltu	r5,r7,bae8 <__umoddi3+0x260>
    b9b8:	00bfffd4 	movui	r2,65535
    b9bc:	11c0582e 	bgeu	r2,r7,bb20 <__umoddi3+0x298>
    b9c0:	00804034 	movhi	r2,256
    b9c4:	10bfffc4 	addi	r2,r2,-1
    b9c8:	11c0e736 	bltu	r2,r7,bd68 <__umoddi3+0x4e0>
    b9cc:	01000404 	movi	r4,16
    b9d0:	3904d83a 	srl	r2,r7,r4
    b9d4:	00c00074 	movhi	r3,1
    b9d8:	18c1fd04 	addi	r3,r3,2036
    b9dc:	1885883a 	add	r2,r3,r2
    b9e0:	14c00003 	ldbu	r19,0(r2)
    b9e4:	00c00804 	movi	r3,32
    b9e8:	9927883a 	add	r19,r19,r4
    b9ec:	1ce9c83a 	sub	r20,r3,r19
    b9f0:	a000581e 	bne	r20,zero,bb54 <__umoddi3+0x2cc>
    b9f4:	3c400136 	bltu	r7,r17,b9fc <__umoddi3+0x174>
    b9f8:	8180eb36 	bltu	r16,r6,bda8 <__umoddi3+0x520>
    b9fc:	8185c83a 	sub	r2,r16,r6
    ba00:	89e3c83a 	sub	r17,r17,r7
    ba04:	8089803a 	cmpltu	r4,r16,r2
    ba08:	8939c83a 	sub	fp,r17,r4
    ba0c:	e007883a 	mov	r3,fp
    ba10:	00003706 	br	baf0 <__umoddi3+0x268>
    ba14:	3000041e 	bne	r6,zero,ba28 <__umoddi3+0x1a0>
    ba18:	000b883a 	mov	r5,zero
    ba1c:	01000044 	movi	r4,1
    ba20:	000beb80 	call	beb8 <__udivsi3>
    ba24:	1027883a 	mov	r19,r2
    ba28:	00bfffd4 	movui	r2,65535
    ba2c:	14c0402e 	bgeu	r2,r19,bb30 <__umoddi3+0x2a8>
    ba30:	00804034 	movhi	r2,256
    ba34:	10bfffc4 	addi	r2,r2,-1
    ba38:	14c0cd36 	bltu	r2,r19,bd70 <__umoddi3+0x4e8>
    ba3c:	00800404 	movi	r2,16
    ba40:	9886d83a 	srl	r3,r19,r2
    ba44:	01000074 	movhi	r4,1
    ba48:	2101fd04 	addi	r4,r4,2036
    ba4c:	20c7883a 	add	r3,r4,r3
    ba50:	18c00003 	ldbu	r3,0(r3)
    ba54:	1887883a 	add	r3,r3,r2
    ba58:	00800804 	movi	r2,32
    ba5c:	10e5c83a 	sub	r18,r2,r3
    ba60:	9000901e 	bne	r18,zero,bca4 <__umoddi3+0x41c>
    ba64:	982cd43a 	srli	r22,r19,16
    ba68:	8ce3c83a 	sub	r17,r17,r19
    ba6c:	9d7fffcc 	andi	r21,r19,65535
    ba70:	b00b883a 	mov	r5,r22
    ba74:	8809883a 	mov	r4,r17
    ba78:	000bf1c0 	call	bf1c <__umodsi3>
    ba7c:	8809883a 	mov	r4,r17
    ba80:	b00b883a 	mov	r5,r22
    ba84:	1021883a 	mov	r16,r2
    ba88:	000beb80 	call	beb8 <__udivsi3>
    ba8c:	8006943a 	slli	r3,r16,16
    ba90:	a008d43a 	srli	r4,r20,16
    ba94:	1545383a 	mul	r2,r2,r21
    ba98:	20c8b03a 	or	r4,r4,r3
    ba9c:	2080042e 	bgeu	r4,r2,bab0 <__umoddi3+0x228>
    baa0:	24c9883a 	add	r4,r4,r19
    baa4:	24c00236 	bltu	r4,r19,bab0 <__umoddi3+0x228>
    baa8:	2080012e 	bgeu	r4,r2,bab0 <__umoddi3+0x228>
    baac:	24c9883a 	add	r4,r4,r19
    bab0:	20a1c83a 	sub	r16,r4,r2
    bab4:	b00b883a 	mov	r5,r22
    bab8:	8009883a 	mov	r4,r16
    babc:	000bf1c0 	call	bf1c <__umodsi3>
    bac0:	1023883a 	mov	r17,r2
    bac4:	b00b883a 	mov	r5,r22
    bac8:	8009883a 	mov	r4,r16
    bacc:	000beb80 	call	beb8 <__udivsi3>
    bad0:	8822943a 	slli	r17,r17,16
    bad4:	1545383a 	mul	r2,r2,r21
    bad8:	a53fffcc 	andi	r20,r20,65535
    badc:	a446b03a 	or	r3,r20,r17
    bae0:	18bfb02e 	bgeu	r3,r2,b9a4 <__alt_data_end+0xff00b9a4>
    bae4:	003fab06 	br	b994 <__alt_data_end+0xff00b994>
    bae8:	2005883a 	mov	r2,r4
    baec:	2807883a 	mov	r3,r5
    baf0:	dfc00b17 	ldw	ra,44(sp)
    baf4:	df000a17 	ldw	fp,40(sp)
    baf8:	ddc00917 	ldw	r23,36(sp)
    bafc:	dd800817 	ldw	r22,32(sp)
    bb00:	dd400717 	ldw	r21,28(sp)
    bb04:	dd000617 	ldw	r20,24(sp)
    bb08:	dcc00517 	ldw	r19,20(sp)
    bb0c:	dc800417 	ldw	r18,16(sp)
    bb10:	dc400317 	ldw	r17,12(sp)
    bb14:	dc000217 	ldw	r16,8(sp)
    bb18:	dec00c04 	addi	sp,sp,48
    bb1c:	f800283a 	ret
    bb20:	04c03fc4 	movi	r19,255
    bb24:	99c9803a 	cmpltu	r4,r19,r7
    bb28:	200890fa 	slli	r4,r4,3
    bb2c:	003fa806 	br	b9d0 <__alt_data_end+0xff00b9d0>
    bb30:	00803fc4 	movi	r2,255
    bb34:	14c5803a 	cmpltu	r2,r2,r19
    bb38:	100490fa 	slli	r2,r2,3
    bb3c:	003fc006 	br	ba40 <__alt_data_end+0xff00ba40>
    bb40:	00804034 	movhi	r2,256
    bb44:	10bfffc4 	addi	r2,r2,-1
    bb48:	11808b36 	bltu	r2,r6,bd78 <__umoddi3+0x4f0>
    bb4c:	01000404 	movi	r4,16
    bb50:	003f6406 	br	b8e4 <__alt_data_end+0xff00b8e4>
    bb54:	34c4d83a 	srl	r2,r6,r19
    bb58:	3d0e983a 	sll	r7,r7,r20
    bb5c:	8cf8d83a 	srl	fp,r17,r19
    bb60:	8d10983a 	sll	r8,r17,r20
    bb64:	38aab03a 	or	r21,r7,r2
    bb68:	a82cd43a 	srli	r22,r21,16
    bb6c:	84e2d83a 	srl	r17,r16,r19
    bb70:	e009883a 	mov	r4,fp
    bb74:	b00b883a 	mov	r5,r22
    bb78:	8a22b03a 	or	r17,r17,r8
    bb7c:	3524983a 	sll	r18,r6,r20
    bb80:	000bf1c0 	call	bf1c <__umodsi3>
    bb84:	e009883a 	mov	r4,fp
    bb88:	b00b883a 	mov	r5,r22
    bb8c:	102f883a 	mov	r23,r2
    bb90:	000beb80 	call	beb8 <__udivsi3>
    bb94:	100d883a 	mov	r6,r2
    bb98:	b808943a 	slli	r4,r23,16
    bb9c:	aa3fffcc 	andi	r8,r21,65535
    bba0:	8804d43a 	srli	r2,r17,16
    bba4:	41af383a 	mul	r23,r8,r6
    bba8:	8520983a 	sll	r16,r16,r20
    bbac:	1104b03a 	or	r2,r2,r4
    bbb0:	15c0042e 	bgeu	r2,r23,bbc4 <__umoddi3+0x33c>
    bbb4:	1545883a 	add	r2,r2,r21
    bbb8:	30ffffc4 	addi	r3,r6,-1
    bbbc:	1540742e 	bgeu	r2,r21,bd90 <__umoddi3+0x508>
    bbc0:	180d883a 	mov	r6,r3
    bbc4:	15efc83a 	sub	r23,r2,r23
    bbc8:	b00b883a 	mov	r5,r22
    bbcc:	b809883a 	mov	r4,r23
    bbd0:	d9800115 	stw	r6,4(sp)
    bbd4:	da000015 	stw	r8,0(sp)
    bbd8:	000bf1c0 	call	bf1c <__umodsi3>
    bbdc:	b00b883a 	mov	r5,r22
    bbe0:	b809883a 	mov	r4,r23
    bbe4:	1039883a 	mov	fp,r2
    bbe8:	000beb80 	call	beb8 <__udivsi3>
    bbec:	da000017 	ldw	r8,0(sp)
    bbf0:	e038943a 	slli	fp,fp,16
    bbf4:	100b883a 	mov	r5,r2
    bbf8:	4089383a 	mul	r4,r8,r2
    bbfc:	8a3fffcc 	andi	r8,r17,65535
    bc00:	4710b03a 	or	r8,r8,fp
    bc04:	d9800117 	ldw	r6,4(sp)
    bc08:	4100042e 	bgeu	r8,r4,bc1c <__umoddi3+0x394>
    bc0c:	4551883a 	add	r8,r8,r21
    bc10:	10bfffc4 	addi	r2,r2,-1
    bc14:	45405a2e 	bgeu	r8,r21,bd80 <__umoddi3+0x4f8>
    bc18:	100b883a 	mov	r5,r2
    bc1c:	300c943a 	slli	r6,r6,16
    bc20:	91ffffcc 	andi	r7,r18,65535
    bc24:	9004d43a 	srli	r2,r18,16
    bc28:	314cb03a 	or	r6,r6,r5
    bc2c:	317fffcc 	andi	r5,r6,65535
    bc30:	300cd43a 	srli	r6,r6,16
    bc34:	29d3383a 	mul	r9,r5,r7
    bc38:	288b383a 	mul	r5,r5,r2
    bc3c:	31cf383a 	mul	r7,r6,r7
    bc40:	4806d43a 	srli	r3,r9,16
    bc44:	4111c83a 	sub	r8,r8,r4
    bc48:	29cb883a 	add	r5,r5,r7
    bc4c:	194b883a 	add	r5,r3,r5
    bc50:	3085383a 	mul	r2,r6,r2
    bc54:	29c0022e 	bgeu	r5,r7,bc60 <__umoddi3+0x3d8>
    bc58:	00c00074 	movhi	r3,1
    bc5c:	10c5883a 	add	r2,r2,r3
    bc60:	2808d43a 	srli	r4,r5,16
    bc64:	280a943a 	slli	r5,r5,16
    bc68:	4a7fffcc 	andi	r9,r9,65535
    bc6c:	2085883a 	add	r2,r4,r2
    bc70:	2a4b883a 	add	r5,r5,r9
    bc74:	40803636 	bltu	r8,r2,bd50 <__umoddi3+0x4c8>
    bc78:	40804d26 	beq	r8,r2,bdb0 <__umoddi3+0x528>
    bc7c:	4089c83a 	sub	r4,r8,r2
    bc80:	280f883a 	mov	r7,r5
    bc84:	81cfc83a 	sub	r7,r16,r7
    bc88:	81c7803a 	cmpltu	r3,r16,r7
    bc8c:	20c7c83a 	sub	r3,r4,r3
    bc90:	1cc4983a 	sll	r2,r3,r19
    bc94:	3d0ed83a 	srl	r7,r7,r20
    bc98:	1d06d83a 	srl	r3,r3,r20
    bc9c:	11c4b03a 	or	r2,r2,r7
    bca0:	003f9306 	br	baf0 <__alt_data_end+0xff00baf0>
    bca4:	9ca6983a 	sll	r19,r19,r18
    bca8:	88e8d83a 	srl	r20,r17,r3
    bcac:	80c4d83a 	srl	r2,r16,r3
    bcb0:	982cd43a 	srli	r22,r19,16
    bcb4:	8ca2983a 	sll	r17,r17,r18
    bcb8:	a009883a 	mov	r4,r20
    bcbc:	b00b883a 	mov	r5,r22
    bcc0:	1478b03a 	or	fp,r2,r17
    bcc4:	000bf1c0 	call	bf1c <__umodsi3>
    bcc8:	a009883a 	mov	r4,r20
    bccc:	b00b883a 	mov	r5,r22
    bcd0:	1023883a 	mov	r17,r2
    bcd4:	000beb80 	call	beb8 <__udivsi3>
    bcd8:	9d7fffcc 	andi	r21,r19,65535
    bcdc:	880a943a 	slli	r5,r17,16
    bce0:	e008d43a 	srli	r4,fp,16
    bce4:	a885383a 	mul	r2,r21,r2
    bce8:	84a8983a 	sll	r20,r16,r18
    bcec:	2148b03a 	or	r4,r4,r5
    bcf0:	2080042e 	bgeu	r4,r2,bd04 <__umoddi3+0x47c>
    bcf4:	24c9883a 	add	r4,r4,r19
    bcf8:	24c00236 	bltu	r4,r19,bd04 <__umoddi3+0x47c>
    bcfc:	2080012e 	bgeu	r4,r2,bd04 <__umoddi3+0x47c>
    bd00:	24c9883a 	add	r4,r4,r19
    bd04:	20a3c83a 	sub	r17,r4,r2
    bd08:	b00b883a 	mov	r5,r22
    bd0c:	8809883a 	mov	r4,r17
    bd10:	000bf1c0 	call	bf1c <__umodsi3>
    bd14:	102f883a 	mov	r23,r2
    bd18:	8809883a 	mov	r4,r17
    bd1c:	b00b883a 	mov	r5,r22
    bd20:	000beb80 	call	beb8 <__udivsi3>
    bd24:	b82e943a 	slli	r23,r23,16
    bd28:	a885383a 	mul	r2,r21,r2
    bd2c:	e13fffcc 	andi	r4,fp,65535
    bd30:	25c8b03a 	or	r4,r4,r23
    bd34:	2080042e 	bgeu	r4,r2,bd48 <__umoddi3+0x4c0>
    bd38:	24c9883a 	add	r4,r4,r19
    bd3c:	24c00236 	bltu	r4,r19,bd48 <__umoddi3+0x4c0>
    bd40:	2080012e 	bgeu	r4,r2,bd48 <__umoddi3+0x4c0>
    bd44:	24c9883a 	add	r4,r4,r19
    bd48:	20a3c83a 	sub	r17,r4,r2
    bd4c:	003f4806 	br	ba70 <__alt_data_end+0xff00ba70>
    bd50:	2c8fc83a 	sub	r7,r5,r18
    bd54:	1545c83a 	sub	r2,r2,r21
    bd58:	29cb803a 	cmpltu	r5,r5,r7
    bd5c:	1145c83a 	sub	r2,r2,r5
    bd60:	4089c83a 	sub	r4,r8,r2
    bd64:	003fc706 	br	bc84 <__alt_data_end+0xff00bc84>
    bd68:	01000604 	movi	r4,24
    bd6c:	003f1806 	br	b9d0 <__alt_data_end+0xff00b9d0>
    bd70:	00800604 	movi	r2,24
    bd74:	003f3206 	br	ba40 <__alt_data_end+0xff00ba40>
    bd78:	01000604 	movi	r4,24
    bd7c:	003ed906 	br	b8e4 <__alt_data_end+0xff00b8e4>
    bd80:	413fa52e 	bgeu	r8,r4,bc18 <__alt_data_end+0xff00bc18>
    bd84:	297fff84 	addi	r5,r5,-2
    bd88:	4551883a 	add	r8,r8,r21
    bd8c:	003fa306 	br	bc1c <__alt_data_end+0xff00bc1c>
    bd90:	15ff8b2e 	bgeu	r2,r23,bbc0 <__alt_data_end+0xff00bbc0>
    bd94:	31bfff84 	addi	r6,r6,-2
    bd98:	1545883a 	add	r2,r2,r21
    bd9c:	003f8906 	br	bbc4 <__alt_data_end+0xff00bbc4>
    bda0:	24c9883a 	add	r4,r4,r19
    bda4:	003eee06 	br	b960 <__alt_data_end+0xff00b960>
    bda8:	8005883a 	mov	r2,r16
    bdac:	003f1706 	br	ba0c <__alt_data_end+0xff00ba0c>
    bdb0:	817fe736 	bltu	r16,r5,bd50 <__alt_data_end+0xff00bd50>
    bdb4:	280f883a 	mov	r7,r5
    bdb8:	0009883a 	mov	r4,zero
    bdbc:	003fb106 	br	bc84 <__alt_data_end+0xff00bc84>

0000bdc0 <__divsi3>:
    bdc0:	20001b16 	blt	r4,zero,be30 <__divsi3+0x70>
    bdc4:	000f883a 	mov	r7,zero
    bdc8:	28001616 	blt	r5,zero,be24 <__divsi3+0x64>
    bdcc:	200d883a 	mov	r6,r4
    bdd0:	29001a2e 	bgeu	r5,r4,be3c <__divsi3+0x7c>
    bdd4:	00800804 	movi	r2,32
    bdd8:	00c00044 	movi	r3,1
    bddc:	00000106 	br	bde4 <__divsi3+0x24>
    bde0:	10000d26 	beq	r2,zero,be18 <__divsi3+0x58>
    bde4:	294b883a 	add	r5,r5,r5
    bde8:	10bfffc4 	addi	r2,r2,-1
    bdec:	18c7883a 	add	r3,r3,r3
    bdf0:	293ffb36 	bltu	r5,r4,bde0 <__alt_data_end+0xff00bde0>
    bdf4:	0005883a 	mov	r2,zero
    bdf8:	18000726 	beq	r3,zero,be18 <__divsi3+0x58>
    bdfc:	0005883a 	mov	r2,zero
    be00:	31400236 	bltu	r6,r5,be0c <__divsi3+0x4c>
    be04:	314dc83a 	sub	r6,r6,r5
    be08:	10c4b03a 	or	r2,r2,r3
    be0c:	1806d07a 	srli	r3,r3,1
    be10:	280ad07a 	srli	r5,r5,1
    be14:	183ffa1e 	bne	r3,zero,be00 <__alt_data_end+0xff00be00>
    be18:	38000126 	beq	r7,zero,be20 <__divsi3+0x60>
    be1c:	0085c83a 	sub	r2,zero,r2
    be20:	f800283a 	ret
    be24:	014bc83a 	sub	r5,zero,r5
    be28:	39c0005c 	xori	r7,r7,1
    be2c:	003fe706 	br	bdcc <__alt_data_end+0xff00bdcc>
    be30:	0109c83a 	sub	r4,zero,r4
    be34:	01c00044 	movi	r7,1
    be38:	003fe306 	br	bdc8 <__alt_data_end+0xff00bdc8>
    be3c:	00c00044 	movi	r3,1
    be40:	003fee06 	br	bdfc <__alt_data_end+0xff00bdfc>

0000be44 <__modsi3>:
    be44:	20001716 	blt	r4,zero,bea4 <__modsi3+0x60>
    be48:	000f883a 	mov	r7,zero
    be4c:	2005883a 	mov	r2,r4
    be50:	28001216 	blt	r5,zero,be9c <__modsi3+0x58>
    be54:	2900162e 	bgeu	r5,r4,beb0 <__modsi3+0x6c>
    be58:	01800804 	movi	r6,32
    be5c:	00c00044 	movi	r3,1
    be60:	00000106 	br	be68 <__modsi3+0x24>
    be64:	30000a26 	beq	r6,zero,be90 <__modsi3+0x4c>
    be68:	294b883a 	add	r5,r5,r5
    be6c:	31bfffc4 	addi	r6,r6,-1
    be70:	18c7883a 	add	r3,r3,r3
    be74:	293ffb36 	bltu	r5,r4,be64 <__alt_data_end+0xff00be64>
    be78:	18000526 	beq	r3,zero,be90 <__modsi3+0x4c>
    be7c:	1806d07a 	srli	r3,r3,1
    be80:	11400136 	bltu	r2,r5,be88 <__modsi3+0x44>
    be84:	1145c83a 	sub	r2,r2,r5
    be88:	280ad07a 	srli	r5,r5,1
    be8c:	183ffb1e 	bne	r3,zero,be7c <__alt_data_end+0xff00be7c>
    be90:	38000126 	beq	r7,zero,be98 <__modsi3+0x54>
    be94:	0085c83a 	sub	r2,zero,r2
    be98:	f800283a 	ret
    be9c:	014bc83a 	sub	r5,zero,r5
    bea0:	003fec06 	br	be54 <__alt_data_end+0xff00be54>
    bea4:	0109c83a 	sub	r4,zero,r4
    bea8:	01c00044 	movi	r7,1
    beac:	003fe706 	br	be4c <__alt_data_end+0xff00be4c>
    beb0:	00c00044 	movi	r3,1
    beb4:	003ff106 	br	be7c <__alt_data_end+0xff00be7c>

0000beb8 <__udivsi3>:
    beb8:	200d883a 	mov	r6,r4
    bebc:	2900152e 	bgeu	r5,r4,bf14 <__udivsi3+0x5c>
    bec0:	28001416 	blt	r5,zero,bf14 <__udivsi3+0x5c>
    bec4:	00800804 	movi	r2,32
    bec8:	00c00044 	movi	r3,1
    becc:	00000206 	br	bed8 <__udivsi3+0x20>
    bed0:	10000e26 	beq	r2,zero,bf0c <__udivsi3+0x54>
    bed4:	28000516 	blt	r5,zero,beec <__udivsi3+0x34>
    bed8:	294b883a 	add	r5,r5,r5
    bedc:	10bfffc4 	addi	r2,r2,-1
    bee0:	18c7883a 	add	r3,r3,r3
    bee4:	293ffa36 	bltu	r5,r4,bed0 <__alt_data_end+0xff00bed0>
    bee8:	18000826 	beq	r3,zero,bf0c <__udivsi3+0x54>
    beec:	0005883a 	mov	r2,zero
    bef0:	31400236 	bltu	r6,r5,befc <__udivsi3+0x44>
    bef4:	314dc83a 	sub	r6,r6,r5
    bef8:	10c4b03a 	or	r2,r2,r3
    befc:	1806d07a 	srli	r3,r3,1
    bf00:	280ad07a 	srli	r5,r5,1
    bf04:	183ffa1e 	bne	r3,zero,bef0 <__alt_data_end+0xff00bef0>
    bf08:	f800283a 	ret
    bf0c:	0005883a 	mov	r2,zero
    bf10:	f800283a 	ret
    bf14:	00c00044 	movi	r3,1
    bf18:	003ff406 	br	beec <__alt_data_end+0xff00beec>

0000bf1c <__umodsi3>:
    bf1c:	2005883a 	mov	r2,r4
    bf20:	2900122e 	bgeu	r5,r4,bf6c <__umodsi3+0x50>
    bf24:	28001116 	blt	r5,zero,bf6c <__umodsi3+0x50>
    bf28:	01800804 	movi	r6,32
    bf2c:	00c00044 	movi	r3,1
    bf30:	00000206 	br	bf3c <__umodsi3+0x20>
    bf34:	30000c26 	beq	r6,zero,bf68 <__umodsi3+0x4c>
    bf38:	28000516 	blt	r5,zero,bf50 <__umodsi3+0x34>
    bf3c:	294b883a 	add	r5,r5,r5
    bf40:	31bfffc4 	addi	r6,r6,-1
    bf44:	18c7883a 	add	r3,r3,r3
    bf48:	293ffa36 	bltu	r5,r4,bf34 <__alt_data_end+0xff00bf34>
    bf4c:	18000626 	beq	r3,zero,bf68 <__umodsi3+0x4c>
    bf50:	1806d07a 	srli	r3,r3,1
    bf54:	11400136 	bltu	r2,r5,bf5c <__umodsi3+0x40>
    bf58:	1145c83a 	sub	r2,r2,r5
    bf5c:	280ad07a 	srli	r5,r5,1
    bf60:	183ffb1e 	bne	r3,zero,bf50 <__alt_data_end+0xff00bf50>
    bf64:	f800283a 	ret
    bf68:	f800283a 	ret
    bf6c:	00c00044 	movi	r3,1
    bf70:	003ff706 	br	bf50 <__alt_data_end+0xff00bf50>

0000bf74 <__adddf3>:
    bf74:	02c00434 	movhi	r11,16
    bf78:	5affffc4 	addi	r11,r11,-1
    bf7c:	2806d7fa 	srli	r3,r5,31
    bf80:	2ad4703a 	and	r10,r5,r11
    bf84:	3ad2703a 	and	r9,r7,r11
    bf88:	3804d53a 	srli	r2,r7,20
    bf8c:	3018d77a 	srli	r12,r6,29
    bf90:	280ad53a 	srli	r5,r5,20
    bf94:	501490fa 	slli	r10,r10,3
    bf98:	2010d77a 	srli	r8,r4,29
    bf9c:	481290fa 	slli	r9,r9,3
    bfa0:	380ed7fa 	srli	r7,r7,31
    bfa4:	defffb04 	addi	sp,sp,-20
    bfa8:	dc800215 	stw	r18,8(sp)
    bfac:	dc400115 	stw	r17,4(sp)
    bfb0:	dc000015 	stw	r16,0(sp)
    bfb4:	dfc00415 	stw	ra,16(sp)
    bfb8:	dcc00315 	stw	r19,12(sp)
    bfbc:	1c803fcc 	andi	r18,r3,255
    bfc0:	2c01ffcc 	andi	r16,r5,2047
    bfc4:	5210b03a 	or	r8,r10,r8
    bfc8:	202290fa 	slli	r17,r4,3
    bfcc:	1081ffcc 	andi	r2,r2,2047
    bfd0:	4b12b03a 	or	r9,r9,r12
    bfd4:	300c90fa 	slli	r6,r6,3
    bfd8:	91c07526 	beq	r18,r7,c1b0 <__adddf3+0x23c>
    bfdc:	8087c83a 	sub	r3,r16,r2
    bfe0:	00c0ab0e 	bge	zero,r3,c290 <__adddf3+0x31c>
    bfe4:	10002a1e 	bne	r2,zero,c090 <__adddf3+0x11c>
    bfe8:	4984b03a 	or	r2,r9,r6
    bfec:	1000961e 	bne	r2,zero,c248 <__adddf3+0x2d4>
    bff0:	888001cc 	andi	r2,r17,7
    bff4:	10000726 	beq	r2,zero,c014 <__adddf3+0xa0>
    bff8:	888003cc 	andi	r2,r17,15
    bffc:	00c00104 	movi	r3,4
    c000:	10c00426 	beq	r2,r3,c014 <__adddf3+0xa0>
    c004:	88c7883a 	add	r3,r17,r3
    c008:	1c63803a 	cmpltu	r17,r3,r17
    c00c:	4451883a 	add	r8,r8,r17
    c010:	1823883a 	mov	r17,r3
    c014:	4080202c 	andhi	r2,r8,128
    c018:	10005926 	beq	r2,zero,c180 <__adddf3+0x20c>
    c01c:	84000044 	addi	r16,r16,1
    c020:	0081ffc4 	movi	r2,2047
    c024:	8080ba26 	beq	r16,r2,c310 <__adddf3+0x39c>
    c028:	00bfe034 	movhi	r2,65408
    c02c:	10bfffc4 	addi	r2,r2,-1
    c030:	4090703a 	and	r8,r8,r2
    c034:	4004977a 	slli	r2,r8,29
    c038:	4010927a 	slli	r8,r8,9
    c03c:	8822d0fa 	srli	r17,r17,3
    c040:	8401ffcc 	andi	r16,r16,2047
    c044:	4010d33a 	srli	r8,r8,12
    c048:	9007883a 	mov	r3,r18
    c04c:	1444b03a 	or	r2,r2,r17
    c050:	8401ffcc 	andi	r16,r16,2047
    c054:	8020953a 	slli	r16,r16,20
    c058:	18c03fcc 	andi	r3,r3,255
    c05c:	01000434 	movhi	r4,16
    c060:	213fffc4 	addi	r4,r4,-1
    c064:	180697fa 	slli	r3,r3,31
    c068:	4110703a 	and	r8,r8,r4
    c06c:	4410b03a 	or	r8,r8,r16
    c070:	40c6b03a 	or	r3,r8,r3
    c074:	dfc00417 	ldw	ra,16(sp)
    c078:	dcc00317 	ldw	r19,12(sp)
    c07c:	dc800217 	ldw	r18,8(sp)
    c080:	dc400117 	ldw	r17,4(sp)
    c084:	dc000017 	ldw	r16,0(sp)
    c088:	dec00504 	addi	sp,sp,20
    c08c:	f800283a 	ret
    c090:	0081ffc4 	movi	r2,2047
    c094:	80bfd626 	beq	r16,r2,bff0 <__alt_data_end+0xff00bff0>
    c098:	4a402034 	orhi	r9,r9,128
    c09c:	00800e04 	movi	r2,56
    c0a0:	10c09f16 	blt	r2,r3,c320 <__adddf3+0x3ac>
    c0a4:	008007c4 	movi	r2,31
    c0a8:	10c0c216 	blt	r2,r3,c3b4 <__adddf3+0x440>
    c0ac:	00800804 	movi	r2,32
    c0b0:	10c5c83a 	sub	r2,r2,r3
    c0b4:	488a983a 	sll	r5,r9,r2
    c0b8:	30c8d83a 	srl	r4,r6,r3
    c0bc:	3084983a 	sll	r2,r6,r2
    c0c0:	48c6d83a 	srl	r3,r9,r3
    c0c4:	290cb03a 	or	r6,r5,r4
    c0c8:	1004c03a 	cmpne	r2,r2,zero
    c0cc:	308cb03a 	or	r6,r6,r2
    c0d0:	898dc83a 	sub	r6,r17,r6
    c0d4:	89a3803a 	cmpltu	r17,r17,r6
    c0d8:	40d1c83a 	sub	r8,r8,r3
    c0dc:	4451c83a 	sub	r8,r8,r17
    c0e0:	3023883a 	mov	r17,r6
    c0e4:	4080202c 	andhi	r2,r8,128
    c0e8:	10002326 	beq	r2,zero,c178 <__adddf3+0x204>
    c0ec:	04c02034 	movhi	r19,128
    c0f0:	9cffffc4 	addi	r19,r19,-1
    c0f4:	44e6703a 	and	r19,r8,r19
    c0f8:	98007626 	beq	r19,zero,c2d4 <__adddf3+0x360>
    c0fc:	9809883a 	mov	r4,r19
    c100:	000e5780 	call	e578 <__clzsi2>
    c104:	10fffe04 	addi	r3,r2,-8
    c108:	010007c4 	movi	r4,31
    c10c:	20c07716 	blt	r4,r3,c2ec <__adddf3+0x378>
    c110:	00800804 	movi	r2,32
    c114:	10c5c83a 	sub	r2,r2,r3
    c118:	8884d83a 	srl	r2,r17,r2
    c11c:	98d0983a 	sll	r8,r19,r3
    c120:	88e2983a 	sll	r17,r17,r3
    c124:	1204b03a 	or	r2,r2,r8
    c128:	1c007416 	blt	r3,r16,c2fc <__adddf3+0x388>
    c12c:	1c21c83a 	sub	r16,r3,r16
    c130:	82000044 	addi	r8,r16,1
    c134:	00c007c4 	movi	r3,31
    c138:	1a009116 	blt	r3,r8,c380 <__adddf3+0x40c>
    c13c:	00c00804 	movi	r3,32
    c140:	1a07c83a 	sub	r3,r3,r8
    c144:	8a08d83a 	srl	r4,r17,r8
    c148:	88e2983a 	sll	r17,r17,r3
    c14c:	10c6983a 	sll	r3,r2,r3
    c150:	1210d83a 	srl	r8,r2,r8
    c154:	8804c03a 	cmpne	r2,r17,zero
    c158:	1906b03a 	or	r3,r3,r4
    c15c:	18a2b03a 	or	r17,r3,r2
    c160:	0021883a 	mov	r16,zero
    c164:	003fa206 	br	bff0 <__alt_data_end+0xff00bff0>
    c168:	1890b03a 	or	r8,r3,r2
    c16c:	40017d26 	beq	r8,zero,c764 <__adddf3+0x7f0>
    c170:	1011883a 	mov	r8,r2
    c174:	1823883a 	mov	r17,r3
    c178:	888001cc 	andi	r2,r17,7
    c17c:	103f9e1e 	bne	r2,zero,bff8 <__alt_data_end+0xff00bff8>
    c180:	4004977a 	slli	r2,r8,29
    c184:	8822d0fa 	srli	r17,r17,3
    c188:	4010d0fa 	srli	r8,r8,3
    c18c:	9007883a 	mov	r3,r18
    c190:	1444b03a 	or	r2,r2,r17
    c194:	0101ffc4 	movi	r4,2047
    c198:	81002426 	beq	r16,r4,c22c <__adddf3+0x2b8>
    c19c:	8120703a 	and	r16,r16,r4
    c1a0:	01000434 	movhi	r4,16
    c1a4:	213fffc4 	addi	r4,r4,-1
    c1a8:	4110703a 	and	r8,r8,r4
    c1ac:	003fa806 	br	c050 <__alt_data_end+0xff00c050>
    c1b0:	8089c83a 	sub	r4,r16,r2
    c1b4:	01005e0e 	bge	zero,r4,c330 <__adddf3+0x3bc>
    c1b8:	10002b26 	beq	r2,zero,c268 <__adddf3+0x2f4>
    c1bc:	0081ffc4 	movi	r2,2047
    c1c0:	80bf8b26 	beq	r16,r2,bff0 <__alt_data_end+0xff00bff0>
    c1c4:	4a402034 	orhi	r9,r9,128
    c1c8:	00800e04 	movi	r2,56
    c1cc:	1100a40e 	bge	r2,r4,c460 <__adddf3+0x4ec>
    c1d0:	498cb03a 	or	r6,r9,r6
    c1d4:	300ac03a 	cmpne	r5,r6,zero
    c1d8:	0013883a 	mov	r9,zero
    c1dc:	2c4b883a 	add	r5,r5,r17
    c1e0:	2c63803a 	cmpltu	r17,r5,r17
    c1e4:	4a11883a 	add	r8,r9,r8
    c1e8:	8a11883a 	add	r8,r17,r8
    c1ec:	2823883a 	mov	r17,r5
    c1f0:	4080202c 	andhi	r2,r8,128
    c1f4:	103fe026 	beq	r2,zero,c178 <__alt_data_end+0xff00c178>
    c1f8:	84000044 	addi	r16,r16,1
    c1fc:	0081ffc4 	movi	r2,2047
    c200:	8080d226 	beq	r16,r2,c54c <__adddf3+0x5d8>
    c204:	00bfe034 	movhi	r2,65408
    c208:	10bfffc4 	addi	r2,r2,-1
    c20c:	4090703a 	and	r8,r8,r2
    c210:	880ad07a 	srli	r5,r17,1
    c214:	400897fa 	slli	r4,r8,31
    c218:	88c0004c 	andi	r3,r17,1
    c21c:	28e2b03a 	or	r17,r5,r3
    c220:	4010d07a 	srli	r8,r8,1
    c224:	2462b03a 	or	r17,r4,r17
    c228:	003f7106 	br	bff0 <__alt_data_end+0xff00bff0>
    c22c:	4088b03a 	or	r4,r8,r2
    c230:	20014526 	beq	r4,zero,c748 <__adddf3+0x7d4>
    c234:	01000434 	movhi	r4,16
    c238:	42000234 	orhi	r8,r8,8
    c23c:	213fffc4 	addi	r4,r4,-1
    c240:	4110703a 	and	r8,r8,r4
    c244:	003f8206 	br	c050 <__alt_data_end+0xff00c050>
    c248:	18ffffc4 	addi	r3,r3,-1
    c24c:	1800491e 	bne	r3,zero,c374 <__adddf3+0x400>
    c250:	898bc83a 	sub	r5,r17,r6
    c254:	8963803a 	cmpltu	r17,r17,r5
    c258:	4251c83a 	sub	r8,r8,r9
    c25c:	4451c83a 	sub	r8,r8,r17
    c260:	2823883a 	mov	r17,r5
    c264:	003f9f06 	br	c0e4 <__alt_data_end+0xff00c0e4>
    c268:	4984b03a 	or	r2,r9,r6
    c26c:	103f6026 	beq	r2,zero,bff0 <__alt_data_end+0xff00bff0>
    c270:	213fffc4 	addi	r4,r4,-1
    c274:	2000931e 	bne	r4,zero,c4c4 <__adddf3+0x550>
    c278:	898d883a 	add	r6,r17,r6
    c27c:	3463803a 	cmpltu	r17,r6,r17
    c280:	4251883a 	add	r8,r8,r9
    c284:	8a11883a 	add	r8,r17,r8
    c288:	3023883a 	mov	r17,r6
    c28c:	003fd806 	br	c1f0 <__alt_data_end+0xff00c1f0>
    c290:	1800541e 	bne	r3,zero,c3e4 <__adddf3+0x470>
    c294:	80800044 	addi	r2,r16,1
    c298:	1081ffcc 	andi	r2,r2,2047
    c29c:	00c00044 	movi	r3,1
    c2a0:	1880a00e 	bge	r3,r2,c524 <__adddf3+0x5b0>
    c2a4:	8989c83a 	sub	r4,r17,r6
    c2a8:	8905803a 	cmpltu	r2,r17,r4
    c2ac:	4267c83a 	sub	r19,r8,r9
    c2b0:	98a7c83a 	sub	r19,r19,r2
    c2b4:	9880202c 	andhi	r2,r19,128
    c2b8:	10006326 	beq	r2,zero,c448 <__adddf3+0x4d4>
    c2bc:	3463c83a 	sub	r17,r6,r17
    c2c0:	4a07c83a 	sub	r3,r9,r8
    c2c4:	344d803a 	cmpltu	r6,r6,r17
    c2c8:	19a7c83a 	sub	r19,r3,r6
    c2cc:	3825883a 	mov	r18,r7
    c2d0:	983f8a1e 	bne	r19,zero,c0fc <__alt_data_end+0xff00c0fc>
    c2d4:	8809883a 	mov	r4,r17
    c2d8:	000e5780 	call	e578 <__clzsi2>
    c2dc:	10800804 	addi	r2,r2,32
    c2e0:	10fffe04 	addi	r3,r2,-8
    c2e4:	010007c4 	movi	r4,31
    c2e8:	20ff890e 	bge	r4,r3,c110 <__alt_data_end+0xff00c110>
    c2ec:	10bff604 	addi	r2,r2,-40
    c2f0:	8884983a 	sll	r2,r17,r2
    c2f4:	0023883a 	mov	r17,zero
    c2f8:	1c3f8c0e 	bge	r3,r16,c12c <__alt_data_end+0xff00c12c>
    c2fc:	023fe034 	movhi	r8,65408
    c300:	423fffc4 	addi	r8,r8,-1
    c304:	80e1c83a 	sub	r16,r16,r3
    c308:	1210703a 	and	r8,r2,r8
    c30c:	003f3806 	br	bff0 <__alt_data_end+0xff00bff0>
    c310:	9007883a 	mov	r3,r18
    c314:	0011883a 	mov	r8,zero
    c318:	0005883a 	mov	r2,zero
    c31c:	003f4c06 	br	c050 <__alt_data_end+0xff00c050>
    c320:	498cb03a 	or	r6,r9,r6
    c324:	300cc03a 	cmpne	r6,r6,zero
    c328:	0007883a 	mov	r3,zero
    c32c:	003f6806 	br	c0d0 <__alt_data_end+0xff00c0d0>
    c330:	20009c1e 	bne	r4,zero,c5a4 <__adddf3+0x630>
    c334:	80800044 	addi	r2,r16,1
    c338:	1141ffcc 	andi	r5,r2,2047
    c33c:	01000044 	movi	r4,1
    c340:	2140670e 	bge	r4,r5,c4e0 <__adddf3+0x56c>
    c344:	0101ffc4 	movi	r4,2047
    c348:	11007f26 	beq	r2,r4,c548 <__adddf3+0x5d4>
    c34c:	898d883a 	add	r6,r17,r6
    c350:	4247883a 	add	r3,r8,r9
    c354:	3451803a 	cmpltu	r8,r6,r17
    c358:	40d1883a 	add	r8,r8,r3
    c35c:	402297fa 	slli	r17,r8,31
    c360:	300cd07a 	srli	r6,r6,1
    c364:	4010d07a 	srli	r8,r8,1
    c368:	1021883a 	mov	r16,r2
    c36c:	89a2b03a 	or	r17,r17,r6
    c370:	003f1f06 	br	bff0 <__alt_data_end+0xff00bff0>
    c374:	0081ffc4 	movi	r2,2047
    c378:	80bf481e 	bne	r16,r2,c09c <__alt_data_end+0xff00c09c>
    c37c:	003f1c06 	br	bff0 <__alt_data_end+0xff00bff0>
    c380:	843ff844 	addi	r16,r16,-31
    c384:	01000804 	movi	r4,32
    c388:	1406d83a 	srl	r3,r2,r16
    c38c:	41005026 	beq	r8,r4,c4d0 <__adddf3+0x55c>
    c390:	01001004 	movi	r4,64
    c394:	2211c83a 	sub	r8,r4,r8
    c398:	1204983a 	sll	r2,r2,r8
    c39c:	88a2b03a 	or	r17,r17,r2
    c3a0:	8822c03a 	cmpne	r17,r17,zero
    c3a4:	1c62b03a 	or	r17,r3,r17
    c3a8:	0011883a 	mov	r8,zero
    c3ac:	0021883a 	mov	r16,zero
    c3b0:	003f7106 	br	c178 <__alt_data_end+0xff00c178>
    c3b4:	193ff804 	addi	r4,r3,-32
    c3b8:	00800804 	movi	r2,32
    c3bc:	4908d83a 	srl	r4,r9,r4
    c3c0:	18804526 	beq	r3,r2,c4d8 <__adddf3+0x564>
    c3c4:	00801004 	movi	r2,64
    c3c8:	10c5c83a 	sub	r2,r2,r3
    c3cc:	4886983a 	sll	r3,r9,r2
    c3d0:	198cb03a 	or	r6,r3,r6
    c3d4:	300cc03a 	cmpne	r6,r6,zero
    c3d8:	218cb03a 	or	r6,r4,r6
    c3dc:	0007883a 	mov	r3,zero
    c3e0:	003f3b06 	br	c0d0 <__alt_data_end+0xff00c0d0>
    c3e4:	80002a26 	beq	r16,zero,c490 <__adddf3+0x51c>
    c3e8:	0101ffc4 	movi	r4,2047
    c3ec:	11006826 	beq	r2,r4,c590 <__adddf3+0x61c>
    c3f0:	00c7c83a 	sub	r3,zero,r3
    c3f4:	42002034 	orhi	r8,r8,128
    c3f8:	01000e04 	movi	r4,56
    c3fc:	20c07c16 	blt	r4,r3,c5f0 <__adddf3+0x67c>
    c400:	010007c4 	movi	r4,31
    c404:	20c0da16 	blt	r4,r3,c770 <__adddf3+0x7fc>
    c408:	01000804 	movi	r4,32
    c40c:	20c9c83a 	sub	r4,r4,r3
    c410:	4114983a 	sll	r10,r8,r4
    c414:	88cad83a 	srl	r5,r17,r3
    c418:	8908983a 	sll	r4,r17,r4
    c41c:	40c6d83a 	srl	r3,r8,r3
    c420:	5162b03a 	or	r17,r10,r5
    c424:	2008c03a 	cmpne	r4,r4,zero
    c428:	8922b03a 	or	r17,r17,r4
    c42c:	3463c83a 	sub	r17,r6,r17
    c430:	48c7c83a 	sub	r3,r9,r3
    c434:	344d803a 	cmpltu	r6,r6,r17
    c438:	1991c83a 	sub	r8,r3,r6
    c43c:	1021883a 	mov	r16,r2
    c440:	3825883a 	mov	r18,r7
    c444:	003f2706 	br	c0e4 <__alt_data_end+0xff00c0e4>
    c448:	24d0b03a 	or	r8,r4,r19
    c44c:	40001b1e 	bne	r8,zero,c4bc <__adddf3+0x548>
    c450:	0005883a 	mov	r2,zero
    c454:	0007883a 	mov	r3,zero
    c458:	0021883a 	mov	r16,zero
    c45c:	003f4d06 	br	c194 <__alt_data_end+0xff00c194>
    c460:	008007c4 	movi	r2,31
    c464:	11003c16 	blt	r2,r4,c558 <__adddf3+0x5e4>
    c468:	00800804 	movi	r2,32
    c46c:	1105c83a 	sub	r2,r2,r4
    c470:	488e983a 	sll	r7,r9,r2
    c474:	310ad83a 	srl	r5,r6,r4
    c478:	3084983a 	sll	r2,r6,r2
    c47c:	4912d83a 	srl	r9,r9,r4
    c480:	394ab03a 	or	r5,r7,r5
    c484:	1004c03a 	cmpne	r2,r2,zero
    c488:	288ab03a 	or	r5,r5,r2
    c48c:	003f5306 	br	c1dc <__alt_data_end+0xff00c1dc>
    c490:	4448b03a 	or	r4,r8,r17
    c494:	20003e26 	beq	r4,zero,c590 <__adddf3+0x61c>
    c498:	00c6303a 	nor	r3,zero,r3
    c49c:	18003a1e 	bne	r3,zero,c588 <__adddf3+0x614>
    c4a0:	3463c83a 	sub	r17,r6,r17
    c4a4:	4a07c83a 	sub	r3,r9,r8
    c4a8:	344d803a 	cmpltu	r6,r6,r17
    c4ac:	1991c83a 	sub	r8,r3,r6
    c4b0:	1021883a 	mov	r16,r2
    c4b4:	3825883a 	mov	r18,r7
    c4b8:	003f0a06 	br	c0e4 <__alt_data_end+0xff00c0e4>
    c4bc:	2023883a 	mov	r17,r4
    c4c0:	003f0d06 	br	c0f8 <__alt_data_end+0xff00c0f8>
    c4c4:	0081ffc4 	movi	r2,2047
    c4c8:	80bf3f1e 	bne	r16,r2,c1c8 <__alt_data_end+0xff00c1c8>
    c4cc:	003ec806 	br	bff0 <__alt_data_end+0xff00bff0>
    c4d0:	0005883a 	mov	r2,zero
    c4d4:	003fb106 	br	c39c <__alt_data_end+0xff00c39c>
    c4d8:	0007883a 	mov	r3,zero
    c4dc:	003fbc06 	br	c3d0 <__alt_data_end+0xff00c3d0>
    c4e0:	4444b03a 	or	r2,r8,r17
    c4e4:	8000871e 	bne	r16,zero,c704 <__adddf3+0x790>
    c4e8:	1000ba26 	beq	r2,zero,c7d4 <__adddf3+0x860>
    c4ec:	4984b03a 	or	r2,r9,r6
    c4f0:	103ebf26 	beq	r2,zero,bff0 <__alt_data_end+0xff00bff0>
    c4f4:	8985883a 	add	r2,r17,r6
    c4f8:	4247883a 	add	r3,r8,r9
    c4fc:	1451803a 	cmpltu	r8,r2,r17
    c500:	40d1883a 	add	r8,r8,r3
    c504:	40c0202c 	andhi	r3,r8,128
    c508:	1023883a 	mov	r17,r2
    c50c:	183f1a26 	beq	r3,zero,c178 <__alt_data_end+0xff00c178>
    c510:	00bfe034 	movhi	r2,65408
    c514:	10bfffc4 	addi	r2,r2,-1
    c518:	2021883a 	mov	r16,r4
    c51c:	4090703a 	and	r8,r8,r2
    c520:	003eb306 	br	bff0 <__alt_data_end+0xff00bff0>
    c524:	4444b03a 	or	r2,r8,r17
    c528:	8000291e 	bne	r16,zero,c5d0 <__adddf3+0x65c>
    c52c:	10004b1e 	bne	r2,zero,c65c <__adddf3+0x6e8>
    c530:	4990b03a 	or	r8,r9,r6
    c534:	40008b26 	beq	r8,zero,c764 <__adddf3+0x7f0>
    c538:	4811883a 	mov	r8,r9
    c53c:	3023883a 	mov	r17,r6
    c540:	3825883a 	mov	r18,r7
    c544:	003eaa06 	br	bff0 <__alt_data_end+0xff00bff0>
    c548:	1021883a 	mov	r16,r2
    c54c:	0011883a 	mov	r8,zero
    c550:	0005883a 	mov	r2,zero
    c554:	003f0f06 	br	c194 <__alt_data_end+0xff00c194>
    c558:	217ff804 	addi	r5,r4,-32
    c55c:	00800804 	movi	r2,32
    c560:	494ad83a 	srl	r5,r9,r5
    c564:	20807d26 	beq	r4,r2,c75c <__adddf3+0x7e8>
    c568:	00801004 	movi	r2,64
    c56c:	1109c83a 	sub	r4,r2,r4
    c570:	4912983a 	sll	r9,r9,r4
    c574:	498cb03a 	or	r6,r9,r6
    c578:	300cc03a 	cmpne	r6,r6,zero
    c57c:	298ab03a 	or	r5,r5,r6
    c580:	0013883a 	mov	r9,zero
    c584:	003f1506 	br	c1dc <__alt_data_end+0xff00c1dc>
    c588:	0101ffc4 	movi	r4,2047
    c58c:	113f9a1e 	bne	r2,r4,c3f8 <__alt_data_end+0xff00c3f8>
    c590:	4811883a 	mov	r8,r9
    c594:	3023883a 	mov	r17,r6
    c598:	1021883a 	mov	r16,r2
    c59c:	3825883a 	mov	r18,r7
    c5a0:	003e9306 	br	bff0 <__alt_data_end+0xff00bff0>
    c5a4:	8000161e 	bne	r16,zero,c600 <__adddf3+0x68c>
    c5a8:	444ab03a 	or	r5,r8,r17
    c5ac:	28005126 	beq	r5,zero,c6f4 <__adddf3+0x780>
    c5b0:	0108303a 	nor	r4,zero,r4
    c5b4:	20004d1e 	bne	r4,zero,c6ec <__adddf3+0x778>
    c5b8:	89a3883a 	add	r17,r17,r6
    c5bc:	4253883a 	add	r9,r8,r9
    c5c0:	898d803a 	cmpltu	r6,r17,r6
    c5c4:	3251883a 	add	r8,r6,r9
    c5c8:	1021883a 	mov	r16,r2
    c5cc:	003f0806 	br	c1f0 <__alt_data_end+0xff00c1f0>
    c5d0:	1000301e 	bne	r2,zero,c694 <__adddf3+0x720>
    c5d4:	4984b03a 	or	r2,r9,r6
    c5d8:	10007126 	beq	r2,zero,c7a0 <__adddf3+0x82c>
    c5dc:	4811883a 	mov	r8,r9
    c5e0:	3023883a 	mov	r17,r6
    c5e4:	3825883a 	mov	r18,r7
    c5e8:	0401ffc4 	movi	r16,2047
    c5ec:	003e8006 	br	bff0 <__alt_data_end+0xff00bff0>
    c5f0:	4462b03a 	or	r17,r8,r17
    c5f4:	8822c03a 	cmpne	r17,r17,zero
    c5f8:	0007883a 	mov	r3,zero
    c5fc:	003f8b06 	br	c42c <__alt_data_end+0xff00c42c>
    c600:	0141ffc4 	movi	r5,2047
    c604:	11403b26 	beq	r2,r5,c6f4 <__adddf3+0x780>
    c608:	0109c83a 	sub	r4,zero,r4
    c60c:	42002034 	orhi	r8,r8,128
    c610:	01400e04 	movi	r5,56
    c614:	29006716 	blt	r5,r4,c7b4 <__adddf3+0x840>
    c618:	014007c4 	movi	r5,31
    c61c:	29007016 	blt	r5,r4,c7e0 <__adddf3+0x86c>
    c620:	01400804 	movi	r5,32
    c624:	290bc83a 	sub	r5,r5,r4
    c628:	4154983a 	sll	r10,r8,r5
    c62c:	890ed83a 	srl	r7,r17,r4
    c630:	894a983a 	sll	r5,r17,r5
    c634:	4108d83a 	srl	r4,r8,r4
    c638:	51e2b03a 	or	r17,r10,r7
    c63c:	280ac03a 	cmpne	r5,r5,zero
    c640:	8962b03a 	or	r17,r17,r5
    c644:	89a3883a 	add	r17,r17,r6
    c648:	2253883a 	add	r9,r4,r9
    c64c:	898d803a 	cmpltu	r6,r17,r6
    c650:	3251883a 	add	r8,r6,r9
    c654:	1021883a 	mov	r16,r2
    c658:	003ee506 	br	c1f0 <__alt_data_end+0xff00c1f0>
    c65c:	4984b03a 	or	r2,r9,r6
    c660:	103e6326 	beq	r2,zero,bff0 <__alt_data_end+0xff00bff0>
    c664:	8987c83a 	sub	r3,r17,r6
    c668:	88c9803a 	cmpltu	r4,r17,r3
    c66c:	4245c83a 	sub	r2,r8,r9
    c670:	1105c83a 	sub	r2,r2,r4
    c674:	1100202c 	andhi	r4,r2,128
    c678:	203ebb26 	beq	r4,zero,c168 <__alt_data_end+0xff00c168>
    c67c:	3463c83a 	sub	r17,r6,r17
    c680:	4a07c83a 	sub	r3,r9,r8
    c684:	344d803a 	cmpltu	r6,r6,r17
    c688:	1991c83a 	sub	r8,r3,r6
    c68c:	3825883a 	mov	r18,r7
    c690:	003e5706 	br	bff0 <__alt_data_end+0xff00bff0>
    c694:	4984b03a 	or	r2,r9,r6
    c698:	10002e26 	beq	r2,zero,c754 <__adddf3+0x7e0>
    c69c:	4004d0fa 	srli	r2,r8,3
    c6a0:	8822d0fa 	srli	r17,r17,3
    c6a4:	4010977a 	slli	r8,r8,29
    c6a8:	10c0022c 	andhi	r3,r2,8
    c6ac:	4462b03a 	or	r17,r8,r17
    c6b0:	18000826 	beq	r3,zero,c6d4 <__adddf3+0x760>
    c6b4:	4808d0fa 	srli	r4,r9,3
    c6b8:	20c0022c 	andhi	r3,r4,8
    c6bc:	1800051e 	bne	r3,zero,c6d4 <__adddf3+0x760>
    c6c0:	300cd0fa 	srli	r6,r6,3
    c6c4:	4806977a 	slli	r3,r9,29
    c6c8:	2005883a 	mov	r2,r4
    c6cc:	3825883a 	mov	r18,r7
    c6d0:	19a2b03a 	or	r17,r3,r6
    c6d4:	8810d77a 	srli	r8,r17,29
    c6d8:	100490fa 	slli	r2,r2,3
    c6dc:	882290fa 	slli	r17,r17,3
    c6e0:	0401ffc4 	movi	r16,2047
    c6e4:	4090b03a 	or	r8,r8,r2
    c6e8:	003e4106 	br	bff0 <__alt_data_end+0xff00bff0>
    c6ec:	0141ffc4 	movi	r5,2047
    c6f0:	117fc71e 	bne	r2,r5,c610 <__alt_data_end+0xff00c610>
    c6f4:	4811883a 	mov	r8,r9
    c6f8:	3023883a 	mov	r17,r6
    c6fc:	1021883a 	mov	r16,r2
    c700:	003e3b06 	br	bff0 <__alt_data_end+0xff00bff0>
    c704:	10002f26 	beq	r2,zero,c7c4 <__adddf3+0x850>
    c708:	4984b03a 	or	r2,r9,r6
    c70c:	10001126 	beq	r2,zero,c754 <__adddf3+0x7e0>
    c710:	4004d0fa 	srli	r2,r8,3
    c714:	8822d0fa 	srli	r17,r17,3
    c718:	4010977a 	slli	r8,r8,29
    c71c:	10c0022c 	andhi	r3,r2,8
    c720:	4462b03a 	or	r17,r8,r17
    c724:	183feb26 	beq	r3,zero,c6d4 <__alt_data_end+0xff00c6d4>
    c728:	4808d0fa 	srli	r4,r9,3
    c72c:	20c0022c 	andhi	r3,r4,8
    c730:	183fe81e 	bne	r3,zero,c6d4 <__alt_data_end+0xff00c6d4>
    c734:	300cd0fa 	srli	r6,r6,3
    c738:	4806977a 	slli	r3,r9,29
    c73c:	2005883a 	mov	r2,r4
    c740:	19a2b03a 	or	r17,r3,r6
    c744:	003fe306 	br	c6d4 <__alt_data_end+0xff00c6d4>
    c748:	0011883a 	mov	r8,zero
    c74c:	0005883a 	mov	r2,zero
    c750:	003e3f06 	br	c050 <__alt_data_end+0xff00c050>
    c754:	0401ffc4 	movi	r16,2047
    c758:	003e2506 	br	bff0 <__alt_data_end+0xff00bff0>
    c75c:	0013883a 	mov	r9,zero
    c760:	003f8406 	br	c574 <__alt_data_end+0xff00c574>
    c764:	0005883a 	mov	r2,zero
    c768:	0007883a 	mov	r3,zero
    c76c:	003e8906 	br	c194 <__alt_data_end+0xff00c194>
    c770:	197ff804 	addi	r5,r3,-32
    c774:	01000804 	movi	r4,32
    c778:	414ad83a 	srl	r5,r8,r5
    c77c:	19002426 	beq	r3,r4,c810 <__adddf3+0x89c>
    c780:	01001004 	movi	r4,64
    c784:	20c7c83a 	sub	r3,r4,r3
    c788:	40c6983a 	sll	r3,r8,r3
    c78c:	1c46b03a 	or	r3,r3,r17
    c790:	1806c03a 	cmpne	r3,r3,zero
    c794:	28e2b03a 	or	r17,r5,r3
    c798:	0007883a 	mov	r3,zero
    c79c:	003f2306 	br	c42c <__alt_data_end+0xff00c42c>
    c7a0:	0007883a 	mov	r3,zero
    c7a4:	5811883a 	mov	r8,r11
    c7a8:	00bfffc4 	movi	r2,-1
    c7ac:	0401ffc4 	movi	r16,2047
    c7b0:	003e7806 	br	c194 <__alt_data_end+0xff00c194>
    c7b4:	4462b03a 	or	r17,r8,r17
    c7b8:	8822c03a 	cmpne	r17,r17,zero
    c7bc:	0009883a 	mov	r4,zero
    c7c0:	003fa006 	br	c644 <__alt_data_end+0xff00c644>
    c7c4:	4811883a 	mov	r8,r9
    c7c8:	3023883a 	mov	r17,r6
    c7cc:	0401ffc4 	movi	r16,2047
    c7d0:	003e0706 	br	bff0 <__alt_data_end+0xff00bff0>
    c7d4:	4811883a 	mov	r8,r9
    c7d8:	3023883a 	mov	r17,r6
    c7dc:	003e0406 	br	bff0 <__alt_data_end+0xff00bff0>
    c7e0:	21fff804 	addi	r7,r4,-32
    c7e4:	01400804 	movi	r5,32
    c7e8:	41ced83a 	srl	r7,r8,r7
    c7ec:	21400a26 	beq	r4,r5,c818 <__adddf3+0x8a4>
    c7f0:	01401004 	movi	r5,64
    c7f4:	2909c83a 	sub	r4,r5,r4
    c7f8:	4108983a 	sll	r4,r8,r4
    c7fc:	2448b03a 	or	r4,r4,r17
    c800:	2008c03a 	cmpne	r4,r4,zero
    c804:	3922b03a 	or	r17,r7,r4
    c808:	0009883a 	mov	r4,zero
    c80c:	003f8d06 	br	c644 <__alt_data_end+0xff00c644>
    c810:	0007883a 	mov	r3,zero
    c814:	003fdd06 	br	c78c <__alt_data_end+0xff00c78c>
    c818:	0009883a 	mov	r4,zero
    c81c:	003ff706 	br	c7fc <__alt_data_end+0xff00c7fc>

0000c820 <__divdf3>:
    c820:	defff204 	addi	sp,sp,-56
    c824:	dd400915 	stw	r21,36(sp)
    c828:	282ad53a 	srli	r21,r5,20
    c82c:	dd000815 	stw	r20,32(sp)
    c830:	2828d7fa 	srli	r20,r5,31
    c834:	dc000415 	stw	r16,16(sp)
    c838:	04000434 	movhi	r16,16
    c83c:	df000c15 	stw	fp,48(sp)
    c840:	843fffc4 	addi	r16,r16,-1
    c844:	dfc00d15 	stw	ra,52(sp)
    c848:	ddc00b15 	stw	r23,44(sp)
    c84c:	dd800a15 	stw	r22,40(sp)
    c850:	dcc00715 	stw	r19,28(sp)
    c854:	dc800615 	stw	r18,24(sp)
    c858:	dc400515 	stw	r17,20(sp)
    c85c:	ad41ffcc 	andi	r21,r21,2047
    c860:	2c20703a 	and	r16,r5,r16
    c864:	a7003fcc 	andi	fp,r20,255
    c868:	a8006126 	beq	r21,zero,c9f0 <__divdf3+0x1d0>
    c86c:	0081ffc4 	movi	r2,2047
    c870:	2025883a 	mov	r18,r4
    c874:	a8803726 	beq	r21,r2,c954 <__divdf3+0x134>
    c878:	80800434 	orhi	r2,r16,16
    c87c:	100490fa 	slli	r2,r2,3
    c880:	2020d77a 	srli	r16,r4,29
    c884:	202490fa 	slli	r18,r4,3
    c888:	ad7f0044 	addi	r21,r21,-1023
    c88c:	80a0b03a 	or	r16,r16,r2
    c890:	0027883a 	mov	r19,zero
    c894:	0013883a 	mov	r9,zero
    c898:	3804d53a 	srli	r2,r7,20
    c89c:	382cd7fa 	srli	r22,r7,31
    c8a0:	04400434 	movhi	r17,16
    c8a4:	8c7fffc4 	addi	r17,r17,-1
    c8a8:	1081ffcc 	andi	r2,r2,2047
    c8ac:	3011883a 	mov	r8,r6
    c8b0:	3c62703a 	and	r17,r7,r17
    c8b4:	b5c03fcc 	andi	r23,r22,255
    c8b8:	10006c26 	beq	r2,zero,ca6c <__divdf3+0x24c>
    c8bc:	00c1ffc4 	movi	r3,2047
    c8c0:	10c06426 	beq	r2,r3,ca54 <__divdf3+0x234>
    c8c4:	88c00434 	orhi	r3,r17,16
    c8c8:	180690fa 	slli	r3,r3,3
    c8cc:	3022d77a 	srli	r17,r6,29
    c8d0:	301090fa 	slli	r8,r6,3
    c8d4:	10bf0044 	addi	r2,r2,-1023
    c8d8:	88e2b03a 	or	r17,r17,r3
    c8dc:	000f883a 	mov	r7,zero
    c8e0:	a58cf03a 	xor	r6,r20,r22
    c8e4:	3cc8b03a 	or	r4,r7,r19
    c8e8:	a8abc83a 	sub	r21,r21,r2
    c8ec:	008003c4 	movi	r2,15
    c8f0:	3007883a 	mov	r3,r6
    c8f4:	34c03fcc 	andi	r19,r6,255
    c8f8:	11009036 	bltu	r2,r4,cb3c <__divdf3+0x31c>
    c8fc:	200890ba 	slli	r4,r4,2
    c900:	00800074 	movhi	r2,1
    c904:	10b24504 	addi	r2,r2,-14060
    c908:	2089883a 	add	r4,r4,r2
    c90c:	20800017 	ldw	r2,0(r4)
    c910:	1000683a 	jmp	r2
    c914:	0000cb3c 	xorhi	zero,zero,812
    c918:	0000c98c 	andi	zero,zero,806
    c91c:	0000cb2c 	andhi	zero,zero,812
    c920:	0000c980 	call	c98 <init_LCD+0x354>
    c924:	0000cb2c 	andhi	zero,zero,812
    c928:	0000cb00 	call	cb0 <init_LCD+0x36c>
    c92c:	0000cb2c 	andhi	zero,zero,812
    c930:	0000c980 	call	c98 <init_LCD+0x354>
    c934:	0000c98c 	andi	zero,zero,806
    c938:	0000c98c 	andi	zero,zero,806
    c93c:	0000cb00 	call	cb0 <init_LCD+0x36c>
    c940:	0000c980 	call	c98 <init_LCD+0x354>
    c944:	0000c970 	cmpltui	zero,zero,805
    c948:	0000c970 	cmpltui	zero,zero,805
    c94c:	0000c970 	cmpltui	zero,zero,805
    c950:	0000ce20 	cmpeqi	zero,zero,824
    c954:	2404b03a 	or	r2,r4,r16
    c958:	1000661e 	bne	r2,zero,caf4 <__divdf3+0x2d4>
    c95c:	04c00204 	movi	r19,8
    c960:	0021883a 	mov	r16,zero
    c964:	0025883a 	mov	r18,zero
    c968:	02400084 	movi	r9,2
    c96c:	003fca06 	br	c898 <__alt_data_end+0xff00c898>
    c970:	8023883a 	mov	r17,r16
    c974:	9011883a 	mov	r8,r18
    c978:	e02f883a 	mov	r23,fp
    c97c:	480f883a 	mov	r7,r9
    c980:	00800084 	movi	r2,2
    c984:	3881311e 	bne	r7,r2,ce4c <__divdf3+0x62c>
    c988:	b827883a 	mov	r19,r23
    c98c:	98c0004c 	andi	r3,r19,1
    c990:	0081ffc4 	movi	r2,2047
    c994:	000b883a 	mov	r5,zero
    c998:	0025883a 	mov	r18,zero
    c99c:	1004953a 	slli	r2,r2,20
    c9a0:	18c03fcc 	andi	r3,r3,255
    c9a4:	04400434 	movhi	r17,16
    c9a8:	8c7fffc4 	addi	r17,r17,-1
    c9ac:	180697fa 	slli	r3,r3,31
    c9b0:	2c4a703a 	and	r5,r5,r17
    c9b4:	288ab03a 	or	r5,r5,r2
    c9b8:	28c6b03a 	or	r3,r5,r3
    c9bc:	9005883a 	mov	r2,r18
    c9c0:	dfc00d17 	ldw	ra,52(sp)
    c9c4:	df000c17 	ldw	fp,48(sp)
    c9c8:	ddc00b17 	ldw	r23,44(sp)
    c9cc:	dd800a17 	ldw	r22,40(sp)
    c9d0:	dd400917 	ldw	r21,36(sp)
    c9d4:	dd000817 	ldw	r20,32(sp)
    c9d8:	dcc00717 	ldw	r19,28(sp)
    c9dc:	dc800617 	ldw	r18,24(sp)
    c9e0:	dc400517 	ldw	r17,20(sp)
    c9e4:	dc000417 	ldw	r16,16(sp)
    c9e8:	dec00e04 	addi	sp,sp,56
    c9ec:	f800283a 	ret
    c9f0:	2404b03a 	or	r2,r4,r16
    c9f4:	2027883a 	mov	r19,r4
    c9f8:	10003926 	beq	r2,zero,cae0 <__divdf3+0x2c0>
    c9fc:	80012e26 	beq	r16,zero,ceb8 <__divdf3+0x698>
    ca00:	8009883a 	mov	r4,r16
    ca04:	d9800315 	stw	r6,12(sp)
    ca08:	d9c00215 	stw	r7,8(sp)
    ca0c:	000e5780 	call	e578 <__clzsi2>
    ca10:	d9800317 	ldw	r6,12(sp)
    ca14:	d9c00217 	ldw	r7,8(sp)
    ca18:	113ffd44 	addi	r4,r2,-11
    ca1c:	00c00704 	movi	r3,28
    ca20:	19012116 	blt	r3,r4,cea8 <__divdf3+0x688>
    ca24:	00c00744 	movi	r3,29
    ca28:	147ffe04 	addi	r17,r2,-8
    ca2c:	1907c83a 	sub	r3,r3,r4
    ca30:	8460983a 	sll	r16,r16,r17
    ca34:	98c6d83a 	srl	r3,r19,r3
    ca38:	9c64983a 	sll	r18,r19,r17
    ca3c:	1c20b03a 	or	r16,r3,r16
    ca40:	1080fcc4 	addi	r2,r2,1011
    ca44:	00abc83a 	sub	r21,zero,r2
    ca48:	0027883a 	mov	r19,zero
    ca4c:	0013883a 	mov	r9,zero
    ca50:	003f9106 	br	c898 <__alt_data_end+0xff00c898>
    ca54:	3446b03a 	or	r3,r6,r17
    ca58:	18001f1e 	bne	r3,zero,cad8 <__divdf3+0x2b8>
    ca5c:	0023883a 	mov	r17,zero
    ca60:	0011883a 	mov	r8,zero
    ca64:	01c00084 	movi	r7,2
    ca68:	003f9d06 	br	c8e0 <__alt_data_end+0xff00c8e0>
    ca6c:	3446b03a 	or	r3,r6,r17
    ca70:	18001526 	beq	r3,zero,cac8 <__divdf3+0x2a8>
    ca74:	88011b26 	beq	r17,zero,cee4 <__divdf3+0x6c4>
    ca78:	8809883a 	mov	r4,r17
    ca7c:	d9800315 	stw	r6,12(sp)
    ca80:	da400115 	stw	r9,4(sp)
    ca84:	000e5780 	call	e578 <__clzsi2>
    ca88:	d9800317 	ldw	r6,12(sp)
    ca8c:	da400117 	ldw	r9,4(sp)
    ca90:	113ffd44 	addi	r4,r2,-11
    ca94:	00c00704 	movi	r3,28
    ca98:	19010e16 	blt	r3,r4,ced4 <__divdf3+0x6b4>
    ca9c:	00c00744 	movi	r3,29
    caa0:	123ffe04 	addi	r8,r2,-8
    caa4:	1907c83a 	sub	r3,r3,r4
    caa8:	8a22983a 	sll	r17,r17,r8
    caac:	30c6d83a 	srl	r3,r6,r3
    cab0:	3210983a 	sll	r8,r6,r8
    cab4:	1c62b03a 	or	r17,r3,r17
    cab8:	1080fcc4 	addi	r2,r2,1011
    cabc:	0085c83a 	sub	r2,zero,r2
    cac0:	000f883a 	mov	r7,zero
    cac4:	003f8606 	br	c8e0 <__alt_data_end+0xff00c8e0>
    cac8:	0023883a 	mov	r17,zero
    cacc:	0011883a 	mov	r8,zero
    cad0:	01c00044 	movi	r7,1
    cad4:	003f8206 	br	c8e0 <__alt_data_end+0xff00c8e0>
    cad8:	01c000c4 	movi	r7,3
    cadc:	003f8006 	br	c8e0 <__alt_data_end+0xff00c8e0>
    cae0:	04c00104 	movi	r19,4
    cae4:	0021883a 	mov	r16,zero
    cae8:	0025883a 	mov	r18,zero
    caec:	02400044 	movi	r9,1
    caf0:	003f6906 	br	c898 <__alt_data_end+0xff00c898>
    caf4:	04c00304 	movi	r19,12
    caf8:	024000c4 	movi	r9,3
    cafc:	003f6606 	br	c898 <__alt_data_end+0xff00c898>
    cb00:	01400434 	movhi	r5,16
    cb04:	0007883a 	mov	r3,zero
    cb08:	297fffc4 	addi	r5,r5,-1
    cb0c:	04bfffc4 	movi	r18,-1
    cb10:	0081ffc4 	movi	r2,2047
    cb14:	003fa106 	br	c99c <__alt_data_end+0xff00c99c>
    cb18:	00c00044 	movi	r3,1
    cb1c:	1887c83a 	sub	r3,r3,r2
    cb20:	01000e04 	movi	r4,56
    cb24:	20c1210e 	bge	r4,r3,cfac <__divdf3+0x78c>
    cb28:	98c0004c 	andi	r3,r19,1
    cb2c:	0005883a 	mov	r2,zero
    cb30:	000b883a 	mov	r5,zero
    cb34:	0025883a 	mov	r18,zero
    cb38:	003f9806 	br	c99c <__alt_data_end+0xff00c99c>
    cb3c:	8c00fd36 	bltu	r17,r16,cf34 <__divdf3+0x714>
    cb40:	8440fb26 	beq	r16,r17,cf30 <__divdf3+0x710>
    cb44:	8007883a 	mov	r3,r16
    cb48:	ad7fffc4 	addi	r21,r21,-1
    cb4c:	0021883a 	mov	r16,zero
    cb50:	4004d63a 	srli	r2,r8,24
    cb54:	8822923a 	slli	r17,r17,8
    cb58:	1809883a 	mov	r4,r3
    cb5c:	402c923a 	slli	r22,r8,8
    cb60:	88b8b03a 	or	fp,r17,r2
    cb64:	e028d43a 	srli	r20,fp,16
    cb68:	d8c00015 	stw	r3,0(sp)
    cb6c:	e5ffffcc 	andi	r23,fp,65535
    cb70:	a00b883a 	mov	r5,r20
    cb74:	000beb80 	call	beb8 <__udivsi3>
    cb78:	d8c00017 	ldw	r3,0(sp)
    cb7c:	a00b883a 	mov	r5,r20
    cb80:	d8800315 	stw	r2,12(sp)
    cb84:	1809883a 	mov	r4,r3
    cb88:	000bf1c0 	call	bf1c <__umodsi3>
    cb8c:	d9800317 	ldw	r6,12(sp)
    cb90:	1006943a 	slli	r3,r2,16
    cb94:	9004d43a 	srli	r2,r18,16
    cb98:	b9a3383a 	mul	r17,r23,r6
    cb9c:	10c4b03a 	or	r2,r2,r3
    cba0:	1440062e 	bgeu	r2,r17,cbbc <__divdf3+0x39c>
    cba4:	1705883a 	add	r2,r2,fp
    cba8:	30ffffc4 	addi	r3,r6,-1
    cbac:	1700ee36 	bltu	r2,fp,cf68 <__divdf3+0x748>
    cbb0:	1440ed2e 	bgeu	r2,r17,cf68 <__divdf3+0x748>
    cbb4:	31bfff84 	addi	r6,r6,-2
    cbb8:	1705883a 	add	r2,r2,fp
    cbbc:	1463c83a 	sub	r17,r2,r17
    cbc0:	a00b883a 	mov	r5,r20
    cbc4:	8809883a 	mov	r4,r17
    cbc8:	d9800315 	stw	r6,12(sp)
    cbcc:	000beb80 	call	beb8 <__udivsi3>
    cbd0:	a00b883a 	mov	r5,r20
    cbd4:	8809883a 	mov	r4,r17
    cbd8:	d8800215 	stw	r2,8(sp)
    cbdc:	000bf1c0 	call	bf1c <__umodsi3>
    cbe0:	d9c00217 	ldw	r7,8(sp)
    cbe4:	1004943a 	slli	r2,r2,16
    cbe8:	94bfffcc 	andi	r18,r18,65535
    cbec:	b9d1383a 	mul	r8,r23,r7
    cbf0:	90a4b03a 	or	r18,r18,r2
    cbf4:	d9800317 	ldw	r6,12(sp)
    cbf8:	9200062e 	bgeu	r18,r8,cc14 <__divdf3+0x3f4>
    cbfc:	9725883a 	add	r18,r18,fp
    cc00:	38bfffc4 	addi	r2,r7,-1
    cc04:	9700d636 	bltu	r18,fp,cf60 <__divdf3+0x740>
    cc08:	9200d52e 	bgeu	r18,r8,cf60 <__divdf3+0x740>
    cc0c:	39ffff84 	addi	r7,r7,-2
    cc10:	9725883a 	add	r18,r18,fp
    cc14:	3004943a 	slli	r2,r6,16
    cc18:	b012d43a 	srli	r9,r22,16
    cc1c:	b1bfffcc 	andi	r6,r22,65535
    cc20:	11e2b03a 	or	r17,r2,r7
    cc24:	8806d43a 	srli	r3,r17,16
    cc28:	893fffcc 	andi	r4,r17,65535
    cc2c:	218b383a 	mul	r5,r4,r6
    cc30:	30c5383a 	mul	r2,r6,r3
    cc34:	2249383a 	mul	r4,r4,r9
    cc38:	280ed43a 	srli	r7,r5,16
    cc3c:	9225c83a 	sub	r18,r18,r8
    cc40:	2089883a 	add	r4,r4,r2
    cc44:	3909883a 	add	r4,r7,r4
    cc48:	1a47383a 	mul	r3,r3,r9
    cc4c:	2080022e 	bgeu	r4,r2,cc58 <__divdf3+0x438>
    cc50:	00800074 	movhi	r2,1
    cc54:	1887883a 	add	r3,r3,r2
    cc58:	2004d43a 	srli	r2,r4,16
    cc5c:	2008943a 	slli	r4,r4,16
    cc60:	297fffcc 	andi	r5,r5,65535
    cc64:	10c7883a 	add	r3,r2,r3
    cc68:	2149883a 	add	r4,r4,r5
    cc6c:	90c0a536 	bltu	r18,r3,cf04 <__divdf3+0x6e4>
    cc70:	90c0bf26 	beq	r18,r3,cf70 <__divdf3+0x750>
    cc74:	90c7c83a 	sub	r3,r18,r3
    cc78:	810fc83a 	sub	r7,r16,r4
    cc7c:	81e5803a 	cmpltu	r18,r16,r7
    cc80:	1ca5c83a 	sub	r18,r3,r18
    cc84:	e480c126 	beq	fp,r18,cf8c <__divdf3+0x76c>
    cc88:	a00b883a 	mov	r5,r20
    cc8c:	9009883a 	mov	r4,r18
    cc90:	d9800315 	stw	r6,12(sp)
    cc94:	d9c00215 	stw	r7,8(sp)
    cc98:	da400115 	stw	r9,4(sp)
    cc9c:	000beb80 	call	beb8 <__udivsi3>
    cca0:	a00b883a 	mov	r5,r20
    cca4:	9009883a 	mov	r4,r18
    cca8:	d8800015 	stw	r2,0(sp)
    ccac:	000bf1c0 	call	bf1c <__umodsi3>
    ccb0:	d9c00217 	ldw	r7,8(sp)
    ccb4:	da000017 	ldw	r8,0(sp)
    ccb8:	1006943a 	slli	r3,r2,16
    ccbc:	3804d43a 	srli	r2,r7,16
    ccc0:	ba21383a 	mul	r16,r23,r8
    ccc4:	d9800317 	ldw	r6,12(sp)
    ccc8:	10c4b03a 	or	r2,r2,r3
    cccc:	da400117 	ldw	r9,4(sp)
    ccd0:	1400062e 	bgeu	r2,r16,ccec <__divdf3+0x4cc>
    ccd4:	1705883a 	add	r2,r2,fp
    ccd8:	40ffffc4 	addi	r3,r8,-1
    ccdc:	1700ad36 	bltu	r2,fp,cf94 <__divdf3+0x774>
    cce0:	1400ac2e 	bgeu	r2,r16,cf94 <__divdf3+0x774>
    cce4:	423fff84 	addi	r8,r8,-2
    cce8:	1705883a 	add	r2,r2,fp
    ccec:	1421c83a 	sub	r16,r2,r16
    ccf0:	a00b883a 	mov	r5,r20
    ccf4:	8009883a 	mov	r4,r16
    ccf8:	d9800315 	stw	r6,12(sp)
    ccfc:	d9c00215 	stw	r7,8(sp)
    cd00:	da000015 	stw	r8,0(sp)
    cd04:	da400115 	stw	r9,4(sp)
    cd08:	000beb80 	call	beb8 <__udivsi3>
    cd0c:	8009883a 	mov	r4,r16
    cd10:	a00b883a 	mov	r5,r20
    cd14:	1025883a 	mov	r18,r2
    cd18:	000bf1c0 	call	bf1c <__umodsi3>
    cd1c:	d9c00217 	ldw	r7,8(sp)
    cd20:	1004943a 	slli	r2,r2,16
    cd24:	bcaf383a 	mul	r23,r23,r18
    cd28:	393fffcc 	andi	r4,r7,65535
    cd2c:	2088b03a 	or	r4,r4,r2
    cd30:	d9800317 	ldw	r6,12(sp)
    cd34:	da000017 	ldw	r8,0(sp)
    cd38:	da400117 	ldw	r9,4(sp)
    cd3c:	25c0062e 	bgeu	r4,r23,cd58 <__divdf3+0x538>
    cd40:	2709883a 	add	r4,r4,fp
    cd44:	90bfffc4 	addi	r2,r18,-1
    cd48:	27009436 	bltu	r4,fp,cf9c <__divdf3+0x77c>
    cd4c:	25c0932e 	bgeu	r4,r23,cf9c <__divdf3+0x77c>
    cd50:	94bfff84 	addi	r18,r18,-2
    cd54:	2709883a 	add	r4,r4,fp
    cd58:	4004943a 	slli	r2,r8,16
    cd5c:	25efc83a 	sub	r23,r4,r23
    cd60:	1490b03a 	or	r8,r2,r18
    cd64:	4008d43a 	srli	r4,r8,16
    cd68:	40ffffcc 	andi	r3,r8,65535
    cd6c:	30c5383a 	mul	r2,r6,r3
    cd70:	1a47383a 	mul	r3,r3,r9
    cd74:	310d383a 	mul	r6,r6,r4
    cd78:	100ad43a 	srli	r5,r2,16
    cd7c:	4913383a 	mul	r9,r9,r4
    cd80:	1987883a 	add	r3,r3,r6
    cd84:	28c7883a 	add	r3,r5,r3
    cd88:	1980022e 	bgeu	r3,r6,cd94 <__divdf3+0x574>
    cd8c:	01000074 	movhi	r4,1
    cd90:	4913883a 	add	r9,r9,r4
    cd94:	1808d43a 	srli	r4,r3,16
    cd98:	1806943a 	slli	r3,r3,16
    cd9c:	10bfffcc 	andi	r2,r2,65535
    cda0:	2253883a 	add	r9,r4,r9
    cda4:	1887883a 	add	r3,r3,r2
    cda8:	ba403836 	bltu	r23,r9,ce8c <__divdf3+0x66c>
    cdac:	ba403626 	beq	r23,r9,ce88 <__divdf3+0x668>
    cdb0:	42000054 	ori	r8,r8,1
    cdb4:	a880ffc4 	addi	r2,r21,1023
    cdb8:	00bf570e 	bge	zero,r2,cb18 <__alt_data_end+0xff00cb18>
    cdbc:	40c001cc 	andi	r3,r8,7
    cdc0:	18000726 	beq	r3,zero,cde0 <__divdf3+0x5c0>
    cdc4:	40c003cc 	andi	r3,r8,15
    cdc8:	01000104 	movi	r4,4
    cdcc:	19000426 	beq	r3,r4,cde0 <__divdf3+0x5c0>
    cdd0:	4107883a 	add	r3,r8,r4
    cdd4:	1a11803a 	cmpltu	r8,r3,r8
    cdd8:	8a23883a 	add	r17,r17,r8
    cddc:	1811883a 	mov	r8,r3
    cde0:	88c0402c 	andhi	r3,r17,256
    cde4:	18000426 	beq	r3,zero,cdf8 <__divdf3+0x5d8>
    cde8:	00ffc034 	movhi	r3,65280
    cdec:	18ffffc4 	addi	r3,r3,-1
    cdf0:	a8810004 	addi	r2,r21,1024
    cdf4:	88e2703a 	and	r17,r17,r3
    cdf8:	00c1ff84 	movi	r3,2046
    cdfc:	18bee316 	blt	r3,r2,c98c <__alt_data_end+0xff00c98c>
    ce00:	8824977a 	slli	r18,r17,29
    ce04:	4010d0fa 	srli	r8,r8,3
    ce08:	8822927a 	slli	r17,r17,9
    ce0c:	1081ffcc 	andi	r2,r2,2047
    ce10:	9224b03a 	or	r18,r18,r8
    ce14:	880ad33a 	srli	r5,r17,12
    ce18:	98c0004c 	andi	r3,r19,1
    ce1c:	003edf06 	br	c99c <__alt_data_end+0xff00c99c>
    ce20:	8080022c 	andhi	r2,r16,8
    ce24:	10001226 	beq	r2,zero,ce70 <__divdf3+0x650>
    ce28:	8880022c 	andhi	r2,r17,8
    ce2c:	1000101e 	bne	r2,zero,ce70 <__divdf3+0x650>
    ce30:	00800434 	movhi	r2,16
    ce34:	89400234 	orhi	r5,r17,8
    ce38:	10bfffc4 	addi	r2,r2,-1
    ce3c:	b007883a 	mov	r3,r22
    ce40:	288a703a 	and	r5,r5,r2
    ce44:	4025883a 	mov	r18,r8
    ce48:	003f3106 	br	cb10 <__alt_data_end+0xff00cb10>
    ce4c:	008000c4 	movi	r2,3
    ce50:	3880a626 	beq	r7,r2,d0ec <__divdf3+0x8cc>
    ce54:	00800044 	movi	r2,1
    ce58:	3880521e 	bne	r7,r2,cfa4 <__divdf3+0x784>
    ce5c:	b807883a 	mov	r3,r23
    ce60:	0005883a 	mov	r2,zero
    ce64:	000b883a 	mov	r5,zero
    ce68:	0025883a 	mov	r18,zero
    ce6c:	003ecb06 	br	c99c <__alt_data_end+0xff00c99c>
    ce70:	00800434 	movhi	r2,16
    ce74:	81400234 	orhi	r5,r16,8
    ce78:	10bfffc4 	addi	r2,r2,-1
    ce7c:	a007883a 	mov	r3,r20
    ce80:	288a703a 	and	r5,r5,r2
    ce84:	003f2206 	br	cb10 <__alt_data_end+0xff00cb10>
    ce88:	183fca26 	beq	r3,zero,cdb4 <__alt_data_end+0xff00cdb4>
    ce8c:	e5ef883a 	add	r23,fp,r23
    ce90:	40bfffc4 	addi	r2,r8,-1
    ce94:	bf00392e 	bgeu	r23,fp,cf7c <__divdf3+0x75c>
    ce98:	1011883a 	mov	r8,r2
    ce9c:	ba7fc41e 	bne	r23,r9,cdb0 <__alt_data_end+0xff00cdb0>
    cea0:	b0ffc31e 	bne	r22,r3,cdb0 <__alt_data_end+0xff00cdb0>
    cea4:	003fc306 	br	cdb4 <__alt_data_end+0xff00cdb4>
    cea8:	143ff604 	addi	r16,r2,-40
    ceac:	9c20983a 	sll	r16,r19,r16
    ceb0:	0025883a 	mov	r18,zero
    ceb4:	003ee206 	br	ca40 <__alt_data_end+0xff00ca40>
    ceb8:	d9800315 	stw	r6,12(sp)
    cebc:	d9c00215 	stw	r7,8(sp)
    cec0:	000e5780 	call	e578 <__clzsi2>
    cec4:	10800804 	addi	r2,r2,32
    cec8:	d9c00217 	ldw	r7,8(sp)
    cecc:	d9800317 	ldw	r6,12(sp)
    ced0:	003ed106 	br	ca18 <__alt_data_end+0xff00ca18>
    ced4:	147ff604 	addi	r17,r2,-40
    ced8:	3462983a 	sll	r17,r6,r17
    cedc:	0011883a 	mov	r8,zero
    cee0:	003ef506 	br	cab8 <__alt_data_end+0xff00cab8>
    cee4:	3009883a 	mov	r4,r6
    cee8:	d9800315 	stw	r6,12(sp)
    ceec:	da400115 	stw	r9,4(sp)
    cef0:	000e5780 	call	e578 <__clzsi2>
    cef4:	10800804 	addi	r2,r2,32
    cef8:	da400117 	ldw	r9,4(sp)
    cefc:	d9800317 	ldw	r6,12(sp)
    cf00:	003ee306 	br	ca90 <__alt_data_end+0xff00ca90>
    cf04:	85a1883a 	add	r16,r16,r22
    cf08:	8585803a 	cmpltu	r2,r16,r22
    cf0c:	1705883a 	add	r2,r2,fp
    cf10:	14a5883a 	add	r18,r2,r18
    cf14:	88bfffc4 	addi	r2,r17,-1
    cf18:	e4800c2e 	bgeu	fp,r18,cf4c <__divdf3+0x72c>
    cf1c:	90c03e36 	bltu	r18,r3,d018 <__divdf3+0x7f8>
    cf20:	1c806926 	beq	r3,r18,d0c8 <__divdf3+0x8a8>
    cf24:	90c7c83a 	sub	r3,r18,r3
    cf28:	1023883a 	mov	r17,r2
    cf2c:	003f5206 	br	cc78 <__alt_data_end+0xff00cc78>
    cf30:	923f0436 	bltu	r18,r8,cb44 <__alt_data_end+0xff00cb44>
    cf34:	800897fa 	slli	r4,r16,31
    cf38:	9004d07a 	srli	r2,r18,1
    cf3c:	8006d07a 	srli	r3,r16,1
    cf40:	902097fa 	slli	r16,r18,31
    cf44:	20a4b03a 	or	r18,r4,r2
    cf48:	003f0106 	br	cb50 <__alt_data_end+0xff00cb50>
    cf4c:	e4bff51e 	bne	fp,r18,cf24 <__alt_data_end+0xff00cf24>
    cf50:	85bff22e 	bgeu	r16,r22,cf1c <__alt_data_end+0xff00cf1c>
    cf54:	e0c7c83a 	sub	r3,fp,r3
    cf58:	1023883a 	mov	r17,r2
    cf5c:	003f4606 	br	cc78 <__alt_data_end+0xff00cc78>
    cf60:	100f883a 	mov	r7,r2
    cf64:	003f2b06 	br	cc14 <__alt_data_end+0xff00cc14>
    cf68:	180d883a 	mov	r6,r3
    cf6c:	003f1306 	br	cbbc <__alt_data_end+0xff00cbbc>
    cf70:	813fe436 	bltu	r16,r4,cf04 <__alt_data_end+0xff00cf04>
    cf74:	0007883a 	mov	r3,zero
    cf78:	003f3f06 	br	cc78 <__alt_data_end+0xff00cc78>
    cf7c:	ba402c36 	bltu	r23,r9,d030 <__divdf3+0x810>
    cf80:	4dc05426 	beq	r9,r23,d0d4 <__divdf3+0x8b4>
    cf84:	1011883a 	mov	r8,r2
    cf88:	003f8906 	br	cdb0 <__alt_data_end+0xff00cdb0>
    cf8c:	023fffc4 	movi	r8,-1
    cf90:	003f8806 	br	cdb4 <__alt_data_end+0xff00cdb4>
    cf94:	1811883a 	mov	r8,r3
    cf98:	003f5406 	br	ccec <__alt_data_end+0xff00ccec>
    cf9c:	1025883a 	mov	r18,r2
    cfa0:	003f6d06 	br	cd58 <__alt_data_end+0xff00cd58>
    cfa4:	b827883a 	mov	r19,r23
    cfa8:	003f8206 	br	cdb4 <__alt_data_end+0xff00cdb4>
    cfac:	010007c4 	movi	r4,31
    cfb0:	20c02616 	blt	r4,r3,d04c <__divdf3+0x82c>
    cfb4:	00800804 	movi	r2,32
    cfb8:	10c5c83a 	sub	r2,r2,r3
    cfbc:	888a983a 	sll	r5,r17,r2
    cfc0:	40c8d83a 	srl	r4,r8,r3
    cfc4:	4084983a 	sll	r2,r8,r2
    cfc8:	88e2d83a 	srl	r17,r17,r3
    cfcc:	2906b03a 	or	r3,r5,r4
    cfd0:	1004c03a 	cmpne	r2,r2,zero
    cfd4:	1886b03a 	or	r3,r3,r2
    cfd8:	188001cc 	andi	r2,r3,7
    cfdc:	10000726 	beq	r2,zero,cffc <__divdf3+0x7dc>
    cfe0:	188003cc 	andi	r2,r3,15
    cfe4:	01000104 	movi	r4,4
    cfe8:	11000426 	beq	r2,r4,cffc <__divdf3+0x7dc>
    cfec:	1805883a 	mov	r2,r3
    cff0:	10c00104 	addi	r3,r2,4
    cff4:	1885803a 	cmpltu	r2,r3,r2
    cff8:	88a3883a 	add	r17,r17,r2
    cffc:	8880202c 	andhi	r2,r17,128
    d000:	10002726 	beq	r2,zero,d0a0 <__divdf3+0x880>
    d004:	98c0004c 	andi	r3,r19,1
    d008:	00800044 	movi	r2,1
    d00c:	000b883a 	mov	r5,zero
    d010:	0025883a 	mov	r18,zero
    d014:	003e6106 	br	c99c <__alt_data_end+0xff00c99c>
    d018:	85a1883a 	add	r16,r16,r22
    d01c:	8585803a 	cmpltu	r2,r16,r22
    d020:	1705883a 	add	r2,r2,fp
    d024:	14a5883a 	add	r18,r2,r18
    d028:	8c7fff84 	addi	r17,r17,-2
    d02c:	003f1106 	br	cc74 <__alt_data_end+0xff00cc74>
    d030:	b589883a 	add	r4,r22,r22
    d034:	25ad803a 	cmpltu	r22,r4,r22
    d038:	b739883a 	add	fp,r22,fp
    d03c:	40bfff84 	addi	r2,r8,-2
    d040:	bf2f883a 	add	r23,r23,fp
    d044:	202d883a 	mov	r22,r4
    d048:	003f9306 	br	ce98 <__alt_data_end+0xff00ce98>
    d04c:	013ff844 	movi	r4,-31
    d050:	2085c83a 	sub	r2,r4,r2
    d054:	8888d83a 	srl	r4,r17,r2
    d058:	00800804 	movi	r2,32
    d05c:	18802126 	beq	r3,r2,d0e4 <__divdf3+0x8c4>
    d060:	00801004 	movi	r2,64
    d064:	10c5c83a 	sub	r2,r2,r3
    d068:	8884983a 	sll	r2,r17,r2
    d06c:	1204b03a 	or	r2,r2,r8
    d070:	1004c03a 	cmpne	r2,r2,zero
    d074:	2084b03a 	or	r2,r4,r2
    d078:	144001cc 	andi	r17,r2,7
    d07c:	88000d1e 	bne	r17,zero,d0b4 <__divdf3+0x894>
    d080:	000b883a 	mov	r5,zero
    d084:	1024d0fa 	srli	r18,r2,3
    d088:	98c0004c 	andi	r3,r19,1
    d08c:	0005883a 	mov	r2,zero
    d090:	9464b03a 	or	r18,r18,r17
    d094:	003e4106 	br	c99c <__alt_data_end+0xff00c99c>
    d098:	1007883a 	mov	r3,r2
    d09c:	0023883a 	mov	r17,zero
    d0a0:	880a927a 	slli	r5,r17,9
    d0a4:	1805883a 	mov	r2,r3
    d0a8:	8822977a 	slli	r17,r17,29
    d0ac:	280ad33a 	srli	r5,r5,12
    d0b0:	003ff406 	br	d084 <__alt_data_end+0xff00d084>
    d0b4:	10c003cc 	andi	r3,r2,15
    d0b8:	01000104 	movi	r4,4
    d0bc:	193ff626 	beq	r3,r4,d098 <__alt_data_end+0xff00d098>
    d0c0:	0023883a 	mov	r17,zero
    d0c4:	003fca06 	br	cff0 <__alt_data_end+0xff00cff0>
    d0c8:	813fd336 	bltu	r16,r4,d018 <__alt_data_end+0xff00d018>
    d0cc:	1023883a 	mov	r17,r2
    d0d0:	003fa806 	br	cf74 <__alt_data_end+0xff00cf74>
    d0d4:	b0ffd636 	bltu	r22,r3,d030 <__alt_data_end+0xff00d030>
    d0d8:	1011883a 	mov	r8,r2
    d0dc:	b0ff341e 	bne	r22,r3,cdb0 <__alt_data_end+0xff00cdb0>
    d0e0:	003f3406 	br	cdb4 <__alt_data_end+0xff00cdb4>
    d0e4:	0005883a 	mov	r2,zero
    d0e8:	003fe006 	br	d06c <__alt_data_end+0xff00d06c>
    d0ec:	00800434 	movhi	r2,16
    d0f0:	89400234 	orhi	r5,r17,8
    d0f4:	10bfffc4 	addi	r2,r2,-1
    d0f8:	b807883a 	mov	r3,r23
    d0fc:	288a703a 	and	r5,r5,r2
    d100:	4025883a 	mov	r18,r8
    d104:	003e8206 	br	cb10 <__alt_data_end+0xff00cb10>

0000d108 <__eqdf2>:
    d108:	2804d53a 	srli	r2,r5,20
    d10c:	3806d53a 	srli	r3,r7,20
    d110:	02000434 	movhi	r8,16
    d114:	423fffc4 	addi	r8,r8,-1
    d118:	1081ffcc 	andi	r2,r2,2047
    d11c:	0281ffc4 	movi	r10,2047
    d120:	2a12703a 	and	r9,r5,r8
    d124:	18c1ffcc 	andi	r3,r3,2047
    d128:	3a10703a 	and	r8,r7,r8
    d12c:	280ad7fa 	srli	r5,r5,31
    d130:	380ed7fa 	srli	r7,r7,31
    d134:	12801026 	beq	r2,r10,d178 <__eqdf2+0x70>
    d138:	0281ffc4 	movi	r10,2047
    d13c:	1a800a26 	beq	r3,r10,d168 <__eqdf2+0x60>
    d140:	10c00226 	beq	r2,r3,d14c <__eqdf2+0x44>
    d144:	00800044 	movi	r2,1
    d148:	f800283a 	ret
    d14c:	4a3ffd1e 	bne	r9,r8,d144 <__alt_data_end+0xff00d144>
    d150:	21bffc1e 	bne	r4,r6,d144 <__alt_data_end+0xff00d144>
    d154:	29c00c26 	beq	r5,r7,d188 <__eqdf2+0x80>
    d158:	103ffa1e 	bne	r2,zero,d144 <__alt_data_end+0xff00d144>
    d15c:	2244b03a 	or	r2,r4,r9
    d160:	1004c03a 	cmpne	r2,r2,zero
    d164:	f800283a 	ret
    d168:	3214b03a 	or	r10,r6,r8
    d16c:	503ff426 	beq	r10,zero,d140 <__alt_data_end+0xff00d140>
    d170:	00800044 	movi	r2,1
    d174:	f800283a 	ret
    d178:	2254b03a 	or	r10,r4,r9
    d17c:	503fee26 	beq	r10,zero,d138 <__alt_data_end+0xff00d138>
    d180:	00800044 	movi	r2,1
    d184:	f800283a 	ret
    d188:	0005883a 	mov	r2,zero
    d18c:	f800283a 	ret

0000d190 <__gedf2>:
    d190:	2804d53a 	srli	r2,r5,20
    d194:	3806d53a 	srli	r3,r7,20
    d198:	02000434 	movhi	r8,16
    d19c:	423fffc4 	addi	r8,r8,-1
    d1a0:	1081ffcc 	andi	r2,r2,2047
    d1a4:	0241ffc4 	movi	r9,2047
    d1a8:	2a14703a 	and	r10,r5,r8
    d1ac:	18c1ffcc 	andi	r3,r3,2047
    d1b0:	3a10703a 	and	r8,r7,r8
    d1b4:	280ad7fa 	srli	r5,r5,31
    d1b8:	380ed7fa 	srli	r7,r7,31
    d1bc:	12401d26 	beq	r2,r9,d234 <__gedf2+0xa4>
    d1c0:	0241ffc4 	movi	r9,2047
    d1c4:	1a401226 	beq	r3,r9,d210 <__gedf2+0x80>
    d1c8:	1000081e 	bne	r2,zero,d1ec <__gedf2+0x5c>
    d1cc:	2296b03a 	or	r11,r4,r10
    d1d0:	5813003a 	cmpeq	r9,r11,zero
    d1d4:	1800091e 	bne	r3,zero,d1fc <__gedf2+0x6c>
    d1d8:	3218b03a 	or	r12,r6,r8
    d1dc:	6000071e 	bne	r12,zero,d1fc <__gedf2+0x6c>
    d1e0:	0005883a 	mov	r2,zero
    d1e4:	5800101e 	bne	r11,zero,d228 <__gedf2+0x98>
    d1e8:	f800283a 	ret
    d1ec:	18000c1e 	bne	r3,zero,d220 <__gedf2+0x90>
    d1f0:	3212b03a 	or	r9,r6,r8
    d1f4:	48000c26 	beq	r9,zero,d228 <__gedf2+0x98>
    d1f8:	0013883a 	mov	r9,zero
    d1fc:	39c03fcc 	andi	r7,r7,255
    d200:	48000826 	beq	r9,zero,d224 <__gedf2+0x94>
    d204:	38000926 	beq	r7,zero,d22c <__gedf2+0x9c>
    d208:	00800044 	movi	r2,1
    d20c:	f800283a 	ret
    d210:	3212b03a 	or	r9,r6,r8
    d214:	483fec26 	beq	r9,zero,d1c8 <__alt_data_end+0xff00d1c8>
    d218:	00bfff84 	movi	r2,-2
    d21c:	f800283a 	ret
    d220:	39c03fcc 	andi	r7,r7,255
    d224:	29c00626 	beq	r5,r7,d240 <__gedf2+0xb0>
    d228:	283ff726 	beq	r5,zero,d208 <__alt_data_end+0xff00d208>
    d22c:	00bfffc4 	movi	r2,-1
    d230:	f800283a 	ret
    d234:	2292b03a 	or	r9,r4,r10
    d238:	483fe126 	beq	r9,zero,d1c0 <__alt_data_end+0xff00d1c0>
    d23c:	003ff606 	br	d218 <__alt_data_end+0xff00d218>
    d240:	18bff916 	blt	r3,r2,d228 <__alt_data_end+0xff00d228>
    d244:	10c00316 	blt	r2,r3,d254 <__gedf2+0xc4>
    d248:	42bff736 	bltu	r8,r10,d228 <__alt_data_end+0xff00d228>
    d24c:	52000326 	beq	r10,r8,d25c <__gedf2+0xcc>
    d250:	5200042e 	bgeu	r10,r8,d264 <__gedf2+0xd4>
    d254:	283fec1e 	bne	r5,zero,d208 <__alt_data_end+0xff00d208>
    d258:	003ff406 	br	d22c <__alt_data_end+0xff00d22c>
    d25c:	313ff236 	bltu	r6,r4,d228 <__alt_data_end+0xff00d228>
    d260:	21bffc36 	bltu	r4,r6,d254 <__alt_data_end+0xff00d254>
    d264:	0005883a 	mov	r2,zero
    d268:	f800283a 	ret

0000d26c <__ledf2>:
    d26c:	2804d53a 	srli	r2,r5,20
    d270:	3810d53a 	srli	r8,r7,20
    d274:	00c00434 	movhi	r3,16
    d278:	18ffffc4 	addi	r3,r3,-1
    d27c:	1081ffcc 	andi	r2,r2,2047
    d280:	0241ffc4 	movi	r9,2047
    d284:	28d4703a 	and	r10,r5,r3
    d288:	4201ffcc 	andi	r8,r8,2047
    d28c:	38c6703a 	and	r3,r7,r3
    d290:	280ad7fa 	srli	r5,r5,31
    d294:	380ed7fa 	srli	r7,r7,31
    d298:	12401f26 	beq	r2,r9,d318 <__ledf2+0xac>
    d29c:	0241ffc4 	movi	r9,2047
    d2a0:	42401426 	beq	r8,r9,d2f4 <__ledf2+0x88>
    d2a4:	1000091e 	bne	r2,zero,d2cc <__ledf2+0x60>
    d2a8:	2296b03a 	or	r11,r4,r10
    d2ac:	5813003a 	cmpeq	r9,r11,zero
    d2b0:	29403fcc 	andi	r5,r5,255
    d2b4:	40000a1e 	bne	r8,zero,d2e0 <__ledf2+0x74>
    d2b8:	30d8b03a 	or	r12,r6,r3
    d2bc:	6000081e 	bne	r12,zero,d2e0 <__ledf2+0x74>
    d2c0:	0005883a 	mov	r2,zero
    d2c4:	5800111e 	bne	r11,zero,d30c <__ledf2+0xa0>
    d2c8:	f800283a 	ret
    d2cc:	29403fcc 	andi	r5,r5,255
    d2d0:	40000c1e 	bne	r8,zero,d304 <__ledf2+0x98>
    d2d4:	30d2b03a 	or	r9,r6,r3
    d2d8:	48000c26 	beq	r9,zero,d30c <__ledf2+0xa0>
    d2dc:	0013883a 	mov	r9,zero
    d2e0:	39c03fcc 	andi	r7,r7,255
    d2e4:	48000826 	beq	r9,zero,d308 <__ledf2+0x9c>
    d2e8:	38001126 	beq	r7,zero,d330 <__ledf2+0xc4>
    d2ec:	00800044 	movi	r2,1
    d2f0:	f800283a 	ret
    d2f4:	30d2b03a 	or	r9,r6,r3
    d2f8:	483fea26 	beq	r9,zero,d2a4 <__alt_data_end+0xff00d2a4>
    d2fc:	00800084 	movi	r2,2
    d300:	f800283a 	ret
    d304:	39c03fcc 	andi	r7,r7,255
    d308:	39400726 	beq	r7,r5,d328 <__ledf2+0xbc>
    d30c:	2800081e 	bne	r5,zero,d330 <__ledf2+0xc4>
    d310:	00800044 	movi	r2,1
    d314:	f800283a 	ret
    d318:	2292b03a 	or	r9,r4,r10
    d31c:	483fdf26 	beq	r9,zero,d29c <__alt_data_end+0xff00d29c>
    d320:	00800084 	movi	r2,2
    d324:	f800283a 	ret
    d328:	4080030e 	bge	r8,r2,d338 <__ledf2+0xcc>
    d32c:	383fef26 	beq	r7,zero,d2ec <__alt_data_end+0xff00d2ec>
    d330:	00bfffc4 	movi	r2,-1
    d334:	f800283a 	ret
    d338:	123feb16 	blt	r2,r8,d2e8 <__alt_data_end+0xff00d2e8>
    d33c:	1abff336 	bltu	r3,r10,d30c <__alt_data_end+0xff00d30c>
    d340:	50c00326 	beq	r10,r3,d350 <__ledf2+0xe4>
    d344:	50c0042e 	bgeu	r10,r3,d358 <__ledf2+0xec>
    d348:	283fe81e 	bne	r5,zero,d2ec <__alt_data_end+0xff00d2ec>
    d34c:	003ff806 	br	d330 <__alt_data_end+0xff00d330>
    d350:	313fee36 	bltu	r6,r4,d30c <__alt_data_end+0xff00d30c>
    d354:	21bffc36 	bltu	r4,r6,d348 <__alt_data_end+0xff00d348>
    d358:	0005883a 	mov	r2,zero
    d35c:	f800283a 	ret

0000d360 <__muldf3>:
    d360:	defff304 	addi	sp,sp,-52
    d364:	2804d53a 	srli	r2,r5,20
    d368:	dd800915 	stw	r22,36(sp)
    d36c:	282cd7fa 	srli	r22,r5,31
    d370:	dc000315 	stw	r16,12(sp)
    d374:	04000434 	movhi	r16,16
    d378:	dd400815 	stw	r21,32(sp)
    d37c:	dc800515 	stw	r18,20(sp)
    d380:	843fffc4 	addi	r16,r16,-1
    d384:	dfc00c15 	stw	ra,48(sp)
    d388:	df000b15 	stw	fp,44(sp)
    d38c:	ddc00a15 	stw	r23,40(sp)
    d390:	dd000715 	stw	r20,28(sp)
    d394:	dcc00615 	stw	r19,24(sp)
    d398:	dc400415 	stw	r17,16(sp)
    d39c:	1481ffcc 	andi	r18,r2,2047
    d3a0:	2c20703a 	and	r16,r5,r16
    d3a4:	b02b883a 	mov	r21,r22
    d3a8:	b2403fcc 	andi	r9,r22,255
    d3ac:	90006026 	beq	r18,zero,d530 <__muldf3+0x1d0>
    d3b0:	0081ffc4 	movi	r2,2047
    d3b4:	2029883a 	mov	r20,r4
    d3b8:	90803626 	beq	r18,r2,d494 <__muldf3+0x134>
    d3bc:	80800434 	orhi	r2,r16,16
    d3c0:	100490fa 	slli	r2,r2,3
    d3c4:	2020d77a 	srli	r16,r4,29
    d3c8:	202890fa 	slli	r20,r4,3
    d3cc:	94bf0044 	addi	r18,r18,-1023
    d3d0:	80a0b03a 	or	r16,r16,r2
    d3d4:	0027883a 	mov	r19,zero
    d3d8:	0039883a 	mov	fp,zero
    d3dc:	3804d53a 	srli	r2,r7,20
    d3e0:	382ed7fa 	srli	r23,r7,31
    d3e4:	04400434 	movhi	r17,16
    d3e8:	8c7fffc4 	addi	r17,r17,-1
    d3ec:	1081ffcc 	andi	r2,r2,2047
    d3f0:	3011883a 	mov	r8,r6
    d3f4:	3c62703a 	and	r17,r7,r17
    d3f8:	ba803fcc 	andi	r10,r23,255
    d3fc:	10006d26 	beq	r2,zero,d5b4 <__muldf3+0x254>
    d400:	00c1ffc4 	movi	r3,2047
    d404:	10c06526 	beq	r2,r3,d59c <__muldf3+0x23c>
    d408:	88c00434 	orhi	r3,r17,16
    d40c:	180690fa 	slli	r3,r3,3
    d410:	3022d77a 	srli	r17,r6,29
    d414:	301090fa 	slli	r8,r6,3
    d418:	10bf0044 	addi	r2,r2,-1023
    d41c:	88e2b03a 	or	r17,r17,r3
    d420:	000b883a 	mov	r5,zero
    d424:	9085883a 	add	r2,r18,r2
    d428:	2cc8b03a 	or	r4,r5,r19
    d42c:	00c003c4 	movi	r3,15
    d430:	bdacf03a 	xor	r22,r23,r22
    d434:	12c00044 	addi	r11,r2,1
    d438:	19009936 	bltu	r3,r4,d6a0 <__muldf3+0x340>
    d43c:	200890ba 	slli	r4,r4,2
    d440:	00c00074 	movhi	r3,1
    d444:	18f51504 	addi	r3,r3,-11180
    d448:	20c9883a 	add	r4,r4,r3
    d44c:	20c00017 	ldw	r3,0(r4)
    d450:	1800683a 	jmp	r3
    d454:	0000d6a0 	cmpeqi	zero,zero,858
    d458:	0000d4b4 	movhi	zero,850
    d45c:	0000d4b4 	movhi	zero,850
    d460:	0000d4b0 	cmpltui	zero,zero,850
    d464:	0000d67c 	xorhi	zero,zero,857
    d468:	0000d67c 	xorhi	zero,zero,857
    d46c:	0000d664 	muli	zero,zero,857
    d470:	0000d4b0 	cmpltui	zero,zero,850
    d474:	0000d67c 	xorhi	zero,zero,857
    d478:	0000d664 	muli	zero,zero,857
    d47c:	0000d67c 	xorhi	zero,zero,857
    d480:	0000d4b0 	cmpltui	zero,zero,850
    d484:	0000d68c 	andi	zero,zero,858
    d488:	0000d68c 	andi	zero,zero,858
    d48c:	0000d68c 	andi	zero,zero,858
    d490:	0000d8a8 	cmpgeui	zero,zero,866
    d494:	2404b03a 	or	r2,r4,r16
    d498:	10006f1e 	bne	r2,zero,d658 <__muldf3+0x2f8>
    d49c:	04c00204 	movi	r19,8
    d4a0:	0021883a 	mov	r16,zero
    d4a4:	0029883a 	mov	r20,zero
    d4a8:	07000084 	movi	fp,2
    d4ac:	003fcb06 	br	d3dc <__alt_data_end+0xff00d3dc>
    d4b0:	502d883a 	mov	r22,r10
    d4b4:	00800084 	movi	r2,2
    d4b8:	28805726 	beq	r5,r2,d618 <__muldf3+0x2b8>
    d4bc:	008000c4 	movi	r2,3
    d4c0:	28816626 	beq	r5,r2,da5c <__muldf3+0x6fc>
    d4c4:	00800044 	movi	r2,1
    d4c8:	2881411e 	bne	r5,r2,d9d0 <__muldf3+0x670>
    d4cc:	b02b883a 	mov	r21,r22
    d4d0:	0005883a 	mov	r2,zero
    d4d4:	000b883a 	mov	r5,zero
    d4d8:	0029883a 	mov	r20,zero
    d4dc:	1004953a 	slli	r2,r2,20
    d4e0:	a8c03fcc 	andi	r3,r21,255
    d4e4:	04400434 	movhi	r17,16
    d4e8:	8c7fffc4 	addi	r17,r17,-1
    d4ec:	180697fa 	slli	r3,r3,31
    d4f0:	2c4a703a 	and	r5,r5,r17
    d4f4:	288ab03a 	or	r5,r5,r2
    d4f8:	28c6b03a 	or	r3,r5,r3
    d4fc:	a005883a 	mov	r2,r20
    d500:	dfc00c17 	ldw	ra,48(sp)
    d504:	df000b17 	ldw	fp,44(sp)
    d508:	ddc00a17 	ldw	r23,40(sp)
    d50c:	dd800917 	ldw	r22,36(sp)
    d510:	dd400817 	ldw	r21,32(sp)
    d514:	dd000717 	ldw	r20,28(sp)
    d518:	dcc00617 	ldw	r19,24(sp)
    d51c:	dc800517 	ldw	r18,20(sp)
    d520:	dc400417 	ldw	r17,16(sp)
    d524:	dc000317 	ldw	r16,12(sp)
    d528:	dec00d04 	addi	sp,sp,52
    d52c:	f800283a 	ret
    d530:	2404b03a 	or	r2,r4,r16
    d534:	2027883a 	mov	r19,r4
    d538:	10004226 	beq	r2,zero,d644 <__muldf3+0x2e4>
    d53c:	8000fc26 	beq	r16,zero,d930 <__muldf3+0x5d0>
    d540:	8009883a 	mov	r4,r16
    d544:	d9800215 	stw	r6,8(sp)
    d548:	d9c00015 	stw	r7,0(sp)
    d54c:	da400115 	stw	r9,4(sp)
    d550:	000e5780 	call	e578 <__clzsi2>
    d554:	d9800217 	ldw	r6,8(sp)
    d558:	d9c00017 	ldw	r7,0(sp)
    d55c:	da400117 	ldw	r9,4(sp)
    d560:	113ffd44 	addi	r4,r2,-11
    d564:	00c00704 	movi	r3,28
    d568:	1900ed16 	blt	r3,r4,d920 <__muldf3+0x5c0>
    d56c:	00c00744 	movi	r3,29
    d570:	147ffe04 	addi	r17,r2,-8
    d574:	1907c83a 	sub	r3,r3,r4
    d578:	8460983a 	sll	r16,r16,r17
    d57c:	98c6d83a 	srl	r3,r19,r3
    d580:	9c68983a 	sll	r20,r19,r17
    d584:	1c20b03a 	or	r16,r3,r16
    d588:	1080fcc4 	addi	r2,r2,1011
    d58c:	00a5c83a 	sub	r18,zero,r2
    d590:	0027883a 	mov	r19,zero
    d594:	0039883a 	mov	fp,zero
    d598:	003f9006 	br	d3dc <__alt_data_end+0xff00d3dc>
    d59c:	3446b03a 	or	r3,r6,r17
    d5a0:	1800261e 	bne	r3,zero,d63c <__muldf3+0x2dc>
    d5a4:	0023883a 	mov	r17,zero
    d5a8:	0011883a 	mov	r8,zero
    d5ac:	01400084 	movi	r5,2
    d5b0:	003f9c06 	br	d424 <__alt_data_end+0xff00d424>
    d5b4:	3446b03a 	or	r3,r6,r17
    d5b8:	18001c26 	beq	r3,zero,d62c <__muldf3+0x2cc>
    d5bc:	8800ce26 	beq	r17,zero,d8f8 <__muldf3+0x598>
    d5c0:	8809883a 	mov	r4,r17
    d5c4:	d9800215 	stw	r6,8(sp)
    d5c8:	da400115 	stw	r9,4(sp)
    d5cc:	da800015 	stw	r10,0(sp)
    d5d0:	000e5780 	call	e578 <__clzsi2>
    d5d4:	d9800217 	ldw	r6,8(sp)
    d5d8:	da400117 	ldw	r9,4(sp)
    d5dc:	da800017 	ldw	r10,0(sp)
    d5e0:	113ffd44 	addi	r4,r2,-11
    d5e4:	00c00704 	movi	r3,28
    d5e8:	1900bf16 	blt	r3,r4,d8e8 <__muldf3+0x588>
    d5ec:	00c00744 	movi	r3,29
    d5f0:	123ffe04 	addi	r8,r2,-8
    d5f4:	1907c83a 	sub	r3,r3,r4
    d5f8:	8a22983a 	sll	r17,r17,r8
    d5fc:	30c6d83a 	srl	r3,r6,r3
    d600:	3210983a 	sll	r8,r6,r8
    d604:	1c62b03a 	or	r17,r3,r17
    d608:	1080fcc4 	addi	r2,r2,1011
    d60c:	0085c83a 	sub	r2,zero,r2
    d610:	000b883a 	mov	r5,zero
    d614:	003f8306 	br	d424 <__alt_data_end+0xff00d424>
    d618:	b02b883a 	mov	r21,r22
    d61c:	0081ffc4 	movi	r2,2047
    d620:	000b883a 	mov	r5,zero
    d624:	0029883a 	mov	r20,zero
    d628:	003fac06 	br	d4dc <__alt_data_end+0xff00d4dc>
    d62c:	0023883a 	mov	r17,zero
    d630:	0011883a 	mov	r8,zero
    d634:	01400044 	movi	r5,1
    d638:	003f7a06 	br	d424 <__alt_data_end+0xff00d424>
    d63c:	014000c4 	movi	r5,3
    d640:	003f7806 	br	d424 <__alt_data_end+0xff00d424>
    d644:	04c00104 	movi	r19,4
    d648:	0021883a 	mov	r16,zero
    d64c:	0029883a 	mov	r20,zero
    d650:	07000044 	movi	fp,1
    d654:	003f6106 	br	d3dc <__alt_data_end+0xff00d3dc>
    d658:	04c00304 	movi	r19,12
    d65c:	070000c4 	movi	fp,3
    d660:	003f5e06 	br	d3dc <__alt_data_end+0xff00d3dc>
    d664:	01400434 	movhi	r5,16
    d668:	002b883a 	mov	r21,zero
    d66c:	297fffc4 	addi	r5,r5,-1
    d670:	053fffc4 	movi	r20,-1
    d674:	0081ffc4 	movi	r2,2047
    d678:	003f9806 	br	d4dc <__alt_data_end+0xff00d4dc>
    d67c:	8023883a 	mov	r17,r16
    d680:	a011883a 	mov	r8,r20
    d684:	e00b883a 	mov	r5,fp
    d688:	003f8a06 	br	d4b4 <__alt_data_end+0xff00d4b4>
    d68c:	8023883a 	mov	r17,r16
    d690:	a011883a 	mov	r8,r20
    d694:	482d883a 	mov	r22,r9
    d698:	e00b883a 	mov	r5,fp
    d69c:	003f8506 	br	d4b4 <__alt_data_end+0xff00d4b4>
    d6a0:	a00ad43a 	srli	r5,r20,16
    d6a4:	401ad43a 	srli	r13,r8,16
    d6a8:	a53fffcc 	andi	r20,r20,65535
    d6ac:	423fffcc 	andi	r8,r8,65535
    d6b0:	4519383a 	mul	r12,r8,r20
    d6b4:	4147383a 	mul	r3,r8,r5
    d6b8:	6d09383a 	mul	r4,r13,r20
    d6bc:	600cd43a 	srli	r6,r12,16
    d6c0:	2b5d383a 	mul	r14,r5,r13
    d6c4:	20c9883a 	add	r4,r4,r3
    d6c8:	310d883a 	add	r6,r6,r4
    d6cc:	30c0022e 	bgeu	r6,r3,d6d8 <__muldf3+0x378>
    d6d0:	00c00074 	movhi	r3,1
    d6d4:	70dd883a 	add	r14,r14,r3
    d6d8:	8826d43a 	srli	r19,r17,16
    d6dc:	8bffffcc 	andi	r15,r17,65535
    d6e0:	7d23383a 	mul	r17,r15,r20
    d6e4:	7949383a 	mul	r4,r15,r5
    d6e8:	9d29383a 	mul	r20,r19,r20
    d6ec:	8814d43a 	srli	r10,r17,16
    d6f0:	3012943a 	slli	r9,r6,16
    d6f4:	a129883a 	add	r20,r20,r4
    d6f8:	633fffcc 	andi	r12,r12,65535
    d6fc:	5515883a 	add	r10,r10,r20
    d700:	3006d43a 	srli	r3,r6,16
    d704:	4b13883a 	add	r9,r9,r12
    d708:	2ccb383a 	mul	r5,r5,r19
    d70c:	5100022e 	bgeu	r10,r4,d718 <__muldf3+0x3b8>
    d710:	01000074 	movhi	r4,1
    d714:	290b883a 	add	r5,r5,r4
    d718:	802ad43a 	srli	r21,r16,16
    d71c:	843fffcc 	andi	r16,r16,65535
    d720:	440d383a 	mul	r6,r8,r16
    d724:	4565383a 	mul	r18,r8,r21
    d728:	8349383a 	mul	r4,r16,r13
    d72c:	500e943a 	slli	r7,r10,16
    d730:	3010d43a 	srli	r8,r6,16
    d734:	5028d43a 	srli	r20,r10,16
    d738:	2489883a 	add	r4,r4,r18
    d73c:	8abfffcc 	andi	r10,r17,65535
    d740:	3a95883a 	add	r10,r7,r10
    d744:	4119883a 	add	r12,r8,r4
    d748:	a169883a 	add	r20,r20,r5
    d74c:	1a87883a 	add	r3,r3,r10
    d750:	6d5b383a 	mul	r13,r13,r21
    d754:	6480022e 	bgeu	r12,r18,d760 <__muldf3+0x400>
    d758:	01000074 	movhi	r4,1
    d75c:	691b883a 	add	r13,r13,r4
    d760:	7c25383a 	mul	r18,r15,r16
    d764:	7d4b383a 	mul	r5,r15,r21
    d768:	84cf383a 	mul	r7,r16,r19
    d76c:	901ed43a 	srli	r15,r18,16
    d770:	6008d43a 	srli	r4,r12,16
    d774:	6010943a 	slli	r8,r12,16
    d778:	394f883a 	add	r7,r7,r5
    d77c:	333fffcc 	andi	r12,r6,65535
    d780:	79df883a 	add	r15,r15,r7
    d784:	235b883a 	add	r13,r4,r13
    d788:	9d63383a 	mul	r17,r19,r21
    d78c:	4309883a 	add	r4,r8,r12
    d790:	7940022e 	bgeu	r15,r5,d79c <__muldf3+0x43c>
    d794:	01400074 	movhi	r5,1
    d798:	8963883a 	add	r17,r17,r5
    d79c:	780a943a 	slli	r5,r15,16
    d7a0:	91bfffcc 	andi	r6,r18,65535
    d7a4:	70c7883a 	add	r3,r14,r3
    d7a8:	298d883a 	add	r6,r5,r6
    d7ac:	1a8f803a 	cmpltu	r7,r3,r10
    d7b0:	350b883a 	add	r5,r6,r20
    d7b4:	20c7883a 	add	r3,r4,r3
    d7b8:	3955883a 	add	r10,r7,r5
    d7bc:	1909803a 	cmpltu	r4,r3,r4
    d7c0:	6a91883a 	add	r8,r13,r10
    d7c4:	780cd43a 	srli	r6,r15,16
    d7c8:	2219883a 	add	r12,r4,r8
    d7cc:	2d0b803a 	cmpltu	r5,r5,r20
    d7d0:	51cf803a 	cmpltu	r7,r10,r7
    d7d4:	29ceb03a 	or	r7,r5,r7
    d7d8:	4351803a 	cmpltu	r8,r8,r13
    d7dc:	610b803a 	cmpltu	r5,r12,r4
    d7e0:	4148b03a 	or	r4,r8,r5
    d7e4:	398f883a 	add	r7,r7,r6
    d7e8:	3909883a 	add	r4,r7,r4
    d7ec:	1810927a 	slli	r8,r3,9
    d7f0:	2449883a 	add	r4,r4,r17
    d7f4:	2008927a 	slli	r4,r4,9
    d7f8:	6022d5fa 	srli	r17,r12,23
    d7fc:	1806d5fa 	srli	r3,r3,23
    d800:	4252b03a 	or	r9,r8,r9
    d804:	600a927a 	slli	r5,r12,9
    d808:	4810c03a 	cmpne	r8,r9,zero
    d80c:	2462b03a 	or	r17,r4,r17
    d810:	40c6b03a 	or	r3,r8,r3
    d814:	8900402c 	andhi	r4,r17,256
    d818:	1950b03a 	or	r8,r3,r5
    d81c:	20000726 	beq	r4,zero,d83c <__muldf3+0x4dc>
    d820:	4006d07a 	srli	r3,r8,1
    d824:	880497fa 	slli	r2,r17,31
    d828:	4200004c 	andi	r8,r8,1
    d82c:	8822d07a 	srli	r17,r17,1
    d830:	1a10b03a 	or	r8,r3,r8
    d834:	1210b03a 	or	r8,r2,r8
    d838:	5805883a 	mov	r2,r11
    d83c:	1140ffc4 	addi	r5,r2,1023
    d840:	0140440e 	bge	zero,r5,d954 <__muldf3+0x5f4>
    d844:	40c001cc 	andi	r3,r8,7
    d848:	18000726 	beq	r3,zero,d868 <__muldf3+0x508>
    d84c:	40c003cc 	andi	r3,r8,15
    d850:	01000104 	movi	r4,4
    d854:	19000426 	beq	r3,r4,d868 <__muldf3+0x508>
    d858:	4107883a 	add	r3,r8,r4
    d85c:	1a11803a 	cmpltu	r8,r3,r8
    d860:	8a23883a 	add	r17,r17,r8
    d864:	1811883a 	mov	r8,r3
    d868:	88c0402c 	andhi	r3,r17,256
    d86c:	18000426 	beq	r3,zero,d880 <__muldf3+0x520>
    d870:	11410004 	addi	r5,r2,1024
    d874:	00bfc034 	movhi	r2,65280
    d878:	10bfffc4 	addi	r2,r2,-1
    d87c:	88a2703a 	and	r17,r17,r2
    d880:	0081ff84 	movi	r2,2046
    d884:	117f6416 	blt	r2,r5,d618 <__alt_data_end+0xff00d618>
    d888:	8828977a 	slli	r20,r17,29
    d88c:	4010d0fa 	srli	r8,r8,3
    d890:	8822927a 	slli	r17,r17,9
    d894:	2881ffcc 	andi	r2,r5,2047
    d898:	a228b03a 	or	r20,r20,r8
    d89c:	880ad33a 	srli	r5,r17,12
    d8a0:	b02b883a 	mov	r21,r22
    d8a4:	003f0d06 	br	d4dc <__alt_data_end+0xff00d4dc>
    d8a8:	8080022c 	andhi	r2,r16,8
    d8ac:	10000926 	beq	r2,zero,d8d4 <__muldf3+0x574>
    d8b0:	8880022c 	andhi	r2,r17,8
    d8b4:	1000071e 	bne	r2,zero,d8d4 <__muldf3+0x574>
    d8b8:	00800434 	movhi	r2,16
    d8bc:	89400234 	orhi	r5,r17,8
    d8c0:	10bfffc4 	addi	r2,r2,-1
    d8c4:	b82b883a 	mov	r21,r23
    d8c8:	288a703a 	and	r5,r5,r2
    d8cc:	4029883a 	mov	r20,r8
    d8d0:	003f6806 	br	d674 <__alt_data_end+0xff00d674>
    d8d4:	00800434 	movhi	r2,16
    d8d8:	81400234 	orhi	r5,r16,8
    d8dc:	10bfffc4 	addi	r2,r2,-1
    d8e0:	288a703a 	and	r5,r5,r2
    d8e4:	003f6306 	br	d674 <__alt_data_end+0xff00d674>
    d8e8:	147ff604 	addi	r17,r2,-40
    d8ec:	3462983a 	sll	r17,r6,r17
    d8f0:	0011883a 	mov	r8,zero
    d8f4:	003f4406 	br	d608 <__alt_data_end+0xff00d608>
    d8f8:	3009883a 	mov	r4,r6
    d8fc:	d9800215 	stw	r6,8(sp)
    d900:	da400115 	stw	r9,4(sp)
    d904:	da800015 	stw	r10,0(sp)
    d908:	000e5780 	call	e578 <__clzsi2>
    d90c:	10800804 	addi	r2,r2,32
    d910:	da800017 	ldw	r10,0(sp)
    d914:	da400117 	ldw	r9,4(sp)
    d918:	d9800217 	ldw	r6,8(sp)
    d91c:	003f3006 	br	d5e0 <__alt_data_end+0xff00d5e0>
    d920:	143ff604 	addi	r16,r2,-40
    d924:	9c20983a 	sll	r16,r19,r16
    d928:	0029883a 	mov	r20,zero
    d92c:	003f1606 	br	d588 <__alt_data_end+0xff00d588>
    d930:	d9800215 	stw	r6,8(sp)
    d934:	d9c00015 	stw	r7,0(sp)
    d938:	da400115 	stw	r9,4(sp)
    d93c:	000e5780 	call	e578 <__clzsi2>
    d940:	10800804 	addi	r2,r2,32
    d944:	da400117 	ldw	r9,4(sp)
    d948:	d9c00017 	ldw	r7,0(sp)
    d94c:	d9800217 	ldw	r6,8(sp)
    d950:	003f0306 	br	d560 <__alt_data_end+0xff00d560>
    d954:	00c00044 	movi	r3,1
    d958:	1947c83a 	sub	r3,r3,r5
    d95c:	00800e04 	movi	r2,56
    d960:	10feda16 	blt	r2,r3,d4cc <__alt_data_end+0xff00d4cc>
    d964:	008007c4 	movi	r2,31
    d968:	10c01b16 	blt	r2,r3,d9d8 <__muldf3+0x678>
    d96c:	00800804 	movi	r2,32
    d970:	10c5c83a 	sub	r2,r2,r3
    d974:	888a983a 	sll	r5,r17,r2
    d978:	40c8d83a 	srl	r4,r8,r3
    d97c:	4084983a 	sll	r2,r8,r2
    d980:	88e2d83a 	srl	r17,r17,r3
    d984:	2906b03a 	or	r3,r5,r4
    d988:	1004c03a 	cmpne	r2,r2,zero
    d98c:	1886b03a 	or	r3,r3,r2
    d990:	188001cc 	andi	r2,r3,7
    d994:	10000726 	beq	r2,zero,d9b4 <__muldf3+0x654>
    d998:	188003cc 	andi	r2,r3,15
    d99c:	01000104 	movi	r4,4
    d9a0:	11000426 	beq	r2,r4,d9b4 <__muldf3+0x654>
    d9a4:	1805883a 	mov	r2,r3
    d9a8:	10c00104 	addi	r3,r2,4
    d9ac:	1885803a 	cmpltu	r2,r3,r2
    d9b0:	88a3883a 	add	r17,r17,r2
    d9b4:	8880202c 	andhi	r2,r17,128
    d9b8:	10001c26 	beq	r2,zero,da2c <__muldf3+0x6cc>
    d9bc:	b02b883a 	mov	r21,r22
    d9c0:	00800044 	movi	r2,1
    d9c4:	000b883a 	mov	r5,zero
    d9c8:	0029883a 	mov	r20,zero
    d9cc:	003ec306 	br	d4dc <__alt_data_end+0xff00d4dc>
    d9d0:	5805883a 	mov	r2,r11
    d9d4:	003f9906 	br	d83c <__alt_data_end+0xff00d83c>
    d9d8:	00bff844 	movi	r2,-31
    d9dc:	1145c83a 	sub	r2,r2,r5
    d9e0:	8888d83a 	srl	r4,r17,r2
    d9e4:	00800804 	movi	r2,32
    d9e8:	18801a26 	beq	r3,r2,da54 <__muldf3+0x6f4>
    d9ec:	00801004 	movi	r2,64
    d9f0:	10c5c83a 	sub	r2,r2,r3
    d9f4:	8884983a 	sll	r2,r17,r2
    d9f8:	1204b03a 	or	r2,r2,r8
    d9fc:	1004c03a 	cmpne	r2,r2,zero
    da00:	2084b03a 	or	r2,r4,r2
    da04:	144001cc 	andi	r17,r2,7
    da08:	88000d1e 	bne	r17,zero,da40 <__muldf3+0x6e0>
    da0c:	000b883a 	mov	r5,zero
    da10:	1028d0fa 	srli	r20,r2,3
    da14:	b02b883a 	mov	r21,r22
    da18:	0005883a 	mov	r2,zero
    da1c:	a468b03a 	or	r20,r20,r17
    da20:	003eae06 	br	d4dc <__alt_data_end+0xff00d4dc>
    da24:	1007883a 	mov	r3,r2
    da28:	0023883a 	mov	r17,zero
    da2c:	880a927a 	slli	r5,r17,9
    da30:	1805883a 	mov	r2,r3
    da34:	8822977a 	slli	r17,r17,29
    da38:	280ad33a 	srli	r5,r5,12
    da3c:	003ff406 	br	da10 <__alt_data_end+0xff00da10>
    da40:	10c003cc 	andi	r3,r2,15
    da44:	01000104 	movi	r4,4
    da48:	193ff626 	beq	r3,r4,da24 <__alt_data_end+0xff00da24>
    da4c:	0023883a 	mov	r17,zero
    da50:	003fd506 	br	d9a8 <__alt_data_end+0xff00d9a8>
    da54:	0005883a 	mov	r2,zero
    da58:	003fe706 	br	d9f8 <__alt_data_end+0xff00d9f8>
    da5c:	00800434 	movhi	r2,16
    da60:	89400234 	orhi	r5,r17,8
    da64:	10bfffc4 	addi	r2,r2,-1
    da68:	b02b883a 	mov	r21,r22
    da6c:	288a703a 	and	r5,r5,r2
    da70:	4029883a 	mov	r20,r8
    da74:	003eff06 	br	d674 <__alt_data_end+0xff00d674>

0000da78 <__subdf3>:
    da78:	02000434 	movhi	r8,16
    da7c:	423fffc4 	addi	r8,r8,-1
    da80:	defffb04 	addi	sp,sp,-20
    da84:	2a14703a 	and	r10,r5,r8
    da88:	3812d53a 	srli	r9,r7,20
    da8c:	3a10703a 	and	r8,r7,r8
    da90:	2006d77a 	srli	r3,r4,29
    da94:	3004d77a 	srli	r2,r6,29
    da98:	dc000015 	stw	r16,0(sp)
    da9c:	501490fa 	slli	r10,r10,3
    daa0:	2820d53a 	srli	r16,r5,20
    daa4:	401090fa 	slli	r8,r8,3
    daa8:	dc800215 	stw	r18,8(sp)
    daac:	dc400115 	stw	r17,4(sp)
    dab0:	dfc00415 	stw	ra,16(sp)
    dab4:	202290fa 	slli	r17,r4,3
    dab8:	dcc00315 	stw	r19,12(sp)
    dabc:	4a41ffcc 	andi	r9,r9,2047
    dac0:	0101ffc4 	movi	r4,2047
    dac4:	2824d7fa 	srli	r18,r5,31
    dac8:	8401ffcc 	andi	r16,r16,2047
    dacc:	50c6b03a 	or	r3,r10,r3
    dad0:	380ed7fa 	srli	r7,r7,31
    dad4:	408ab03a 	or	r5,r8,r2
    dad8:	300c90fa 	slli	r6,r6,3
    dadc:	49009626 	beq	r9,r4,dd38 <__subdf3+0x2c0>
    dae0:	39c0005c 	xori	r7,r7,1
    dae4:	8245c83a 	sub	r2,r16,r9
    dae8:	3c807426 	beq	r7,r18,dcbc <__subdf3+0x244>
    daec:	0080af0e 	bge	zero,r2,ddac <__subdf3+0x334>
    daf0:	48002a1e 	bne	r9,zero,db9c <__subdf3+0x124>
    daf4:	2988b03a 	or	r4,r5,r6
    daf8:	20009a1e 	bne	r4,zero,dd64 <__subdf3+0x2ec>
    dafc:	888001cc 	andi	r2,r17,7
    db00:	10000726 	beq	r2,zero,db20 <__subdf3+0xa8>
    db04:	888003cc 	andi	r2,r17,15
    db08:	01000104 	movi	r4,4
    db0c:	11000426 	beq	r2,r4,db20 <__subdf3+0xa8>
    db10:	890b883a 	add	r5,r17,r4
    db14:	2c63803a 	cmpltu	r17,r5,r17
    db18:	1c47883a 	add	r3,r3,r17
    db1c:	2823883a 	mov	r17,r5
    db20:	1880202c 	andhi	r2,r3,128
    db24:	10005926 	beq	r2,zero,dc8c <__subdf3+0x214>
    db28:	84000044 	addi	r16,r16,1
    db2c:	0081ffc4 	movi	r2,2047
    db30:	8080be26 	beq	r16,r2,de2c <__subdf3+0x3b4>
    db34:	017fe034 	movhi	r5,65408
    db38:	297fffc4 	addi	r5,r5,-1
    db3c:	1946703a 	and	r3,r3,r5
    db40:	1804977a 	slli	r2,r3,29
    db44:	1806927a 	slli	r3,r3,9
    db48:	8822d0fa 	srli	r17,r17,3
    db4c:	8401ffcc 	andi	r16,r16,2047
    db50:	180ad33a 	srli	r5,r3,12
    db54:	9100004c 	andi	r4,r18,1
    db58:	1444b03a 	or	r2,r2,r17
    db5c:	80c1ffcc 	andi	r3,r16,2047
    db60:	1820953a 	slli	r16,r3,20
    db64:	20c03fcc 	andi	r3,r4,255
    db68:	180897fa 	slli	r4,r3,31
    db6c:	00c00434 	movhi	r3,16
    db70:	18ffffc4 	addi	r3,r3,-1
    db74:	28c6703a 	and	r3,r5,r3
    db78:	1c06b03a 	or	r3,r3,r16
    db7c:	1906b03a 	or	r3,r3,r4
    db80:	dfc00417 	ldw	ra,16(sp)
    db84:	dcc00317 	ldw	r19,12(sp)
    db88:	dc800217 	ldw	r18,8(sp)
    db8c:	dc400117 	ldw	r17,4(sp)
    db90:	dc000017 	ldw	r16,0(sp)
    db94:	dec00504 	addi	sp,sp,20
    db98:	f800283a 	ret
    db9c:	0101ffc4 	movi	r4,2047
    dba0:	813fd626 	beq	r16,r4,dafc <__alt_data_end+0xff00dafc>
    dba4:	29402034 	orhi	r5,r5,128
    dba8:	01000e04 	movi	r4,56
    dbac:	2080a316 	blt	r4,r2,de3c <__subdf3+0x3c4>
    dbb0:	010007c4 	movi	r4,31
    dbb4:	2080c616 	blt	r4,r2,ded0 <__subdf3+0x458>
    dbb8:	01000804 	movi	r4,32
    dbbc:	2089c83a 	sub	r4,r4,r2
    dbc0:	2910983a 	sll	r8,r5,r4
    dbc4:	308ed83a 	srl	r7,r6,r2
    dbc8:	3108983a 	sll	r4,r6,r4
    dbcc:	2884d83a 	srl	r2,r5,r2
    dbd0:	41ccb03a 	or	r6,r8,r7
    dbd4:	2008c03a 	cmpne	r4,r4,zero
    dbd8:	310cb03a 	or	r6,r6,r4
    dbdc:	898dc83a 	sub	r6,r17,r6
    dbe0:	89a3803a 	cmpltu	r17,r17,r6
    dbe4:	1887c83a 	sub	r3,r3,r2
    dbe8:	1c47c83a 	sub	r3,r3,r17
    dbec:	3023883a 	mov	r17,r6
    dbf0:	1880202c 	andhi	r2,r3,128
    dbf4:	10002326 	beq	r2,zero,dc84 <__subdf3+0x20c>
    dbf8:	04c02034 	movhi	r19,128
    dbfc:	9cffffc4 	addi	r19,r19,-1
    dc00:	1ce6703a 	and	r19,r3,r19
    dc04:	98007a26 	beq	r19,zero,ddf0 <__subdf3+0x378>
    dc08:	9809883a 	mov	r4,r19
    dc0c:	000e5780 	call	e578 <__clzsi2>
    dc10:	113ffe04 	addi	r4,r2,-8
    dc14:	00c007c4 	movi	r3,31
    dc18:	19007b16 	blt	r3,r4,de08 <__subdf3+0x390>
    dc1c:	00800804 	movi	r2,32
    dc20:	1105c83a 	sub	r2,r2,r4
    dc24:	8884d83a 	srl	r2,r17,r2
    dc28:	9906983a 	sll	r3,r19,r4
    dc2c:	8922983a 	sll	r17,r17,r4
    dc30:	10c4b03a 	or	r2,r2,r3
    dc34:	24007816 	blt	r4,r16,de18 <__subdf3+0x3a0>
    dc38:	2421c83a 	sub	r16,r4,r16
    dc3c:	80c00044 	addi	r3,r16,1
    dc40:	010007c4 	movi	r4,31
    dc44:	20c09516 	blt	r4,r3,de9c <__subdf3+0x424>
    dc48:	01400804 	movi	r5,32
    dc4c:	28cbc83a 	sub	r5,r5,r3
    dc50:	88c8d83a 	srl	r4,r17,r3
    dc54:	8962983a 	sll	r17,r17,r5
    dc58:	114a983a 	sll	r5,r2,r5
    dc5c:	10c6d83a 	srl	r3,r2,r3
    dc60:	8804c03a 	cmpne	r2,r17,zero
    dc64:	290ab03a 	or	r5,r5,r4
    dc68:	28a2b03a 	or	r17,r5,r2
    dc6c:	0021883a 	mov	r16,zero
    dc70:	003fa206 	br	dafc <__alt_data_end+0xff00dafc>
    dc74:	2090b03a 	or	r8,r4,r2
    dc78:	40018e26 	beq	r8,zero,e2b4 <__subdf3+0x83c>
    dc7c:	1007883a 	mov	r3,r2
    dc80:	2023883a 	mov	r17,r4
    dc84:	888001cc 	andi	r2,r17,7
    dc88:	103f9e1e 	bne	r2,zero,db04 <__alt_data_end+0xff00db04>
    dc8c:	1804977a 	slli	r2,r3,29
    dc90:	8822d0fa 	srli	r17,r17,3
    dc94:	1810d0fa 	srli	r8,r3,3
    dc98:	9100004c 	andi	r4,r18,1
    dc9c:	1444b03a 	or	r2,r2,r17
    dca0:	00c1ffc4 	movi	r3,2047
    dca4:	80c02826 	beq	r16,r3,dd48 <__subdf3+0x2d0>
    dca8:	01400434 	movhi	r5,16
    dcac:	297fffc4 	addi	r5,r5,-1
    dcb0:	80e0703a 	and	r16,r16,r3
    dcb4:	414a703a 	and	r5,r8,r5
    dcb8:	003fa806 	br	db5c <__alt_data_end+0xff00db5c>
    dcbc:	0080630e 	bge	zero,r2,de4c <__subdf3+0x3d4>
    dcc0:	48003026 	beq	r9,zero,dd84 <__subdf3+0x30c>
    dcc4:	0101ffc4 	movi	r4,2047
    dcc8:	813f8c26 	beq	r16,r4,dafc <__alt_data_end+0xff00dafc>
    dccc:	29402034 	orhi	r5,r5,128
    dcd0:	01000e04 	movi	r4,56
    dcd4:	2080a90e 	bge	r4,r2,df7c <__subdf3+0x504>
    dcd8:	298cb03a 	or	r6,r5,r6
    dcdc:	3012c03a 	cmpne	r9,r6,zero
    dce0:	0005883a 	mov	r2,zero
    dce4:	4c53883a 	add	r9,r9,r17
    dce8:	4c63803a 	cmpltu	r17,r9,r17
    dcec:	10c7883a 	add	r3,r2,r3
    dcf0:	88c7883a 	add	r3,r17,r3
    dcf4:	4823883a 	mov	r17,r9
    dcf8:	1880202c 	andhi	r2,r3,128
    dcfc:	1000d026 	beq	r2,zero,e040 <__subdf3+0x5c8>
    dd00:	84000044 	addi	r16,r16,1
    dd04:	0081ffc4 	movi	r2,2047
    dd08:	8080fe26 	beq	r16,r2,e104 <__subdf3+0x68c>
    dd0c:	00bfe034 	movhi	r2,65408
    dd10:	10bfffc4 	addi	r2,r2,-1
    dd14:	1886703a 	and	r3,r3,r2
    dd18:	880ad07a 	srli	r5,r17,1
    dd1c:	180497fa 	slli	r2,r3,31
    dd20:	8900004c 	andi	r4,r17,1
    dd24:	2922b03a 	or	r17,r5,r4
    dd28:	1806d07a 	srli	r3,r3,1
    dd2c:	1462b03a 	or	r17,r2,r17
    dd30:	3825883a 	mov	r18,r7
    dd34:	003f7106 	br	dafc <__alt_data_end+0xff00dafc>
    dd38:	2984b03a 	or	r2,r5,r6
    dd3c:	103f6826 	beq	r2,zero,dae0 <__alt_data_end+0xff00dae0>
    dd40:	39c03fcc 	andi	r7,r7,255
    dd44:	003f6706 	br	dae4 <__alt_data_end+0xff00dae4>
    dd48:	4086b03a 	or	r3,r8,r2
    dd4c:	18015226 	beq	r3,zero,e298 <__subdf3+0x820>
    dd50:	00c00434 	movhi	r3,16
    dd54:	41400234 	orhi	r5,r8,8
    dd58:	18ffffc4 	addi	r3,r3,-1
    dd5c:	28ca703a 	and	r5,r5,r3
    dd60:	003f7e06 	br	db5c <__alt_data_end+0xff00db5c>
    dd64:	10bfffc4 	addi	r2,r2,-1
    dd68:	1000491e 	bne	r2,zero,de90 <__subdf3+0x418>
    dd6c:	898fc83a 	sub	r7,r17,r6
    dd70:	89e3803a 	cmpltu	r17,r17,r7
    dd74:	1947c83a 	sub	r3,r3,r5
    dd78:	1c47c83a 	sub	r3,r3,r17
    dd7c:	3823883a 	mov	r17,r7
    dd80:	003f9b06 	br	dbf0 <__alt_data_end+0xff00dbf0>
    dd84:	2988b03a 	or	r4,r5,r6
    dd88:	203f5c26 	beq	r4,zero,dafc <__alt_data_end+0xff00dafc>
    dd8c:	10bfffc4 	addi	r2,r2,-1
    dd90:	1000931e 	bne	r2,zero,dfe0 <__subdf3+0x568>
    dd94:	898d883a 	add	r6,r17,r6
    dd98:	3463803a 	cmpltu	r17,r6,r17
    dd9c:	1947883a 	add	r3,r3,r5
    dda0:	88c7883a 	add	r3,r17,r3
    dda4:	3023883a 	mov	r17,r6
    dda8:	003fd306 	br	dcf8 <__alt_data_end+0xff00dcf8>
    ddac:	1000541e 	bne	r2,zero,df00 <__subdf3+0x488>
    ddb0:	80800044 	addi	r2,r16,1
    ddb4:	1081ffcc 	andi	r2,r2,2047
    ddb8:	01000044 	movi	r4,1
    ddbc:	2080a20e 	bge	r4,r2,e048 <__subdf3+0x5d0>
    ddc0:	8989c83a 	sub	r4,r17,r6
    ddc4:	8905803a 	cmpltu	r2,r17,r4
    ddc8:	1967c83a 	sub	r19,r3,r5
    ddcc:	98a7c83a 	sub	r19,r19,r2
    ddd0:	9880202c 	andhi	r2,r19,128
    ddd4:	10006326 	beq	r2,zero,df64 <__subdf3+0x4ec>
    ddd8:	3463c83a 	sub	r17,r6,r17
    dddc:	28c7c83a 	sub	r3,r5,r3
    dde0:	344d803a 	cmpltu	r6,r6,r17
    dde4:	19a7c83a 	sub	r19,r3,r6
    dde8:	3825883a 	mov	r18,r7
    ddec:	983f861e 	bne	r19,zero,dc08 <__alt_data_end+0xff00dc08>
    ddf0:	8809883a 	mov	r4,r17
    ddf4:	000e5780 	call	e578 <__clzsi2>
    ddf8:	10800804 	addi	r2,r2,32
    ddfc:	113ffe04 	addi	r4,r2,-8
    de00:	00c007c4 	movi	r3,31
    de04:	193f850e 	bge	r3,r4,dc1c <__alt_data_end+0xff00dc1c>
    de08:	10bff604 	addi	r2,r2,-40
    de0c:	8884983a 	sll	r2,r17,r2
    de10:	0023883a 	mov	r17,zero
    de14:	243f880e 	bge	r4,r16,dc38 <__alt_data_end+0xff00dc38>
    de18:	00ffe034 	movhi	r3,65408
    de1c:	18ffffc4 	addi	r3,r3,-1
    de20:	8121c83a 	sub	r16,r16,r4
    de24:	10c6703a 	and	r3,r2,r3
    de28:	003f3406 	br	dafc <__alt_data_end+0xff00dafc>
    de2c:	9100004c 	andi	r4,r18,1
    de30:	000b883a 	mov	r5,zero
    de34:	0005883a 	mov	r2,zero
    de38:	003f4806 	br	db5c <__alt_data_end+0xff00db5c>
    de3c:	298cb03a 	or	r6,r5,r6
    de40:	300cc03a 	cmpne	r6,r6,zero
    de44:	0005883a 	mov	r2,zero
    de48:	003f6406 	br	dbdc <__alt_data_end+0xff00dbdc>
    de4c:	10009a1e 	bne	r2,zero,e0b8 <__subdf3+0x640>
    de50:	82400044 	addi	r9,r16,1
    de54:	4881ffcc 	andi	r2,r9,2047
    de58:	02800044 	movi	r10,1
    de5c:	5080670e 	bge	r10,r2,dffc <__subdf3+0x584>
    de60:	0081ffc4 	movi	r2,2047
    de64:	4880af26 	beq	r9,r2,e124 <__subdf3+0x6ac>
    de68:	898d883a 	add	r6,r17,r6
    de6c:	1945883a 	add	r2,r3,r5
    de70:	3447803a 	cmpltu	r3,r6,r17
    de74:	1887883a 	add	r3,r3,r2
    de78:	182297fa 	slli	r17,r3,31
    de7c:	300cd07a 	srli	r6,r6,1
    de80:	1806d07a 	srli	r3,r3,1
    de84:	4821883a 	mov	r16,r9
    de88:	89a2b03a 	or	r17,r17,r6
    de8c:	003f1b06 	br	dafc <__alt_data_end+0xff00dafc>
    de90:	0101ffc4 	movi	r4,2047
    de94:	813f441e 	bne	r16,r4,dba8 <__alt_data_end+0xff00dba8>
    de98:	003f1806 	br	dafc <__alt_data_end+0xff00dafc>
    de9c:	843ff844 	addi	r16,r16,-31
    dea0:	01400804 	movi	r5,32
    dea4:	1408d83a 	srl	r4,r2,r16
    dea8:	19405026 	beq	r3,r5,dfec <__subdf3+0x574>
    deac:	01401004 	movi	r5,64
    deb0:	28c7c83a 	sub	r3,r5,r3
    deb4:	10c4983a 	sll	r2,r2,r3
    deb8:	88a2b03a 	or	r17,r17,r2
    debc:	8822c03a 	cmpne	r17,r17,zero
    dec0:	2462b03a 	or	r17,r4,r17
    dec4:	0007883a 	mov	r3,zero
    dec8:	0021883a 	mov	r16,zero
    decc:	003f6d06 	br	dc84 <__alt_data_end+0xff00dc84>
    ded0:	11fff804 	addi	r7,r2,-32
    ded4:	01000804 	movi	r4,32
    ded8:	29ced83a 	srl	r7,r5,r7
    dedc:	11004526 	beq	r2,r4,dff4 <__subdf3+0x57c>
    dee0:	01001004 	movi	r4,64
    dee4:	2089c83a 	sub	r4,r4,r2
    dee8:	2904983a 	sll	r2,r5,r4
    deec:	118cb03a 	or	r6,r2,r6
    def0:	300cc03a 	cmpne	r6,r6,zero
    def4:	398cb03a 	or	r6,r7,r6
    def8:	0005883a 	mov	r2,zero
    defc:	003f3706 	br	dbdc <__alt_data_end+0xff00dbdc>
    df00:	80002a26 	beq	r16,zero,dfac <__subdf3+0x534>
    df04:	0101ffc4 	movi	r4,2047
    df08:	49006626 	beq	r9,r4,e0a4 <__subdf3+0x62c>
    df0c:	0085c83a 	sub	r2,zero,r2
    df10:	18c02034 	orhi	r3,r3,128
    df14:	01000e04 	movi	r4,56
    df18:	20807e16 	blt	r4,r2,e114 <__subdf3+0x69c>
    df1c:	010007c4 	movi	r4,31
    df20:	2080e716 	blt	r4,r2,e2c0 <__subdf3+0x848>
    df24:	01000804 	movi	r4,32
    df28:	2089c83a 	sub	r4,r4,r2
    df2c:	1914983a 	sll	r10,r3,r4
    df30:	8890d83a 	srl	r8,r17,r2
    df34:	8908983a 	sll	r4,r17,r4
    df38:	1884d83a 	srl	r2,r3,r2
    df3c:	5222b03a 	or	r17,r10,r8
    df40:	2006c03a 	cmpne	r3,r4,zero
    df44:	88e2b03a 	or	r17,r17,r3
    df48:	3463c83a 	sub	r17,r6,r17
    df4c:	2885c83a 	sub	r2,r5,r2
    df50:	344d803a 	cmpltu	r6,r6,r17
    df54:	1187c83a 	sub	r3,r2,r6
    df58:	4821883a 	mov	r16,r9
    df5c:	3825883a 	mov	r18,r7
    df60:	003f2306 	br	dbf0 <__alt_data_end+0xff00dbf0>
    df64:	24d0b03a 	or	r8,r4,r19
    df68:	40001b1e 	bne	r8,zero,dfd8 <__subdf3+0x560>
    df6c:	0005883a 	mov	r2,zero
    df70:	0009883a 	mov	r4,zero
    df74:	0021883a 	mov	r16,zero
    df78:	003f4906 	br	dca0 <__alt_data_end+0xff00dca0>
    df7c:	010007c4 	movi	r4,31
    df80:	20803a16 	blt	r4,r2,e06c <__subdf3+0x5f4>
    df84:	01000804 	movi	r4,32
    df88:	2089c83a 	sub	r4,r4,r2
    df8c:	2912983a 	sll	r9,r5,r4
    df90:	3090d83a 	srl	r8,r6,r2
    df94:	3108983a 	sll	r4,r6,r4
    df98:	2884d83a 	srl	r2,r5,r2
    df9c:	4a12b03a 	or	r9,r9,r8
    dfa0:	2008c03a 	cmpne	r4,r4,zero
    dfa4:	4912b03a 	or	r9,r9,r4
    dfa8:	003f4e06 	br	dce4 <__alt_data_end+0xff00dce4>
    dfac:	1c48b03a 	or	r4,r3,r17
    dfb0:	20003c26 	beq	r4,zero,e0a4 <__subdf3+0x62c>
    dfb4:	0084303a 	nor	r2,zero,r2
    dfb8:	1000381e 	bne	r2,zero,e09c <__subdf3+0x624>
    dfbc:	3463c83a 	sub	r17,r6,r17
    dfc0:	28c5c83a 	sub	r2,r5,r3
    dfc4:	344d803a 	cmpltu	r6,r6,r17
    dfc8:	1187c83a 	sub	r3,r2,r6
    dfcc:	4821883a 	mov	r16,r9
    dfd0:	3825883a 	mov	r18,r7
    dfd4:	003f0606 	br	dbf0 <__alt_data_end+0xff00dbf0>
    dfd8:	2023883a 	mov	r17,r4
    dfdc:	003f0906 	br	dc04 <__alt_data_end+0xff00dc04>
    dfe0:	0101ffc4 	movi	r4,2047
    dfe4:	813f3a1e 	bne	r16,r4,dcd0 <__alt_data_end+0xff00dcd0>
    dfe8:	003ec406 	br	dafc <__alt_data_end+0xff00dafc>
    dfec:	0005883a 	mov	r2,zero
    dff0:	003fb106 	br	deb8 <__alt_data_end+0xff00deb8>
    dff4:	0005883a 	mov	r2,zero
    dff8:	003fbc06 	br	deec <__alt_data_end+0xff00deec>
    dffc:	1c44b03a 	or	r2,r3,r17
    e000:	80008e1e 	bne	r16,zero,e23c <__subdf3+0x7c4>
    e004:	1000c826 	beq	r2,zero,e328 <__subdf3+0x8b0>
    e008:	2984b03a 	or	r2,r5,r6
    e00c:	103ebb26 	beq	r2,zero,dafc <__alt_data_end+0xff00dafc>
    e010:	8989883a 	add	r4,r17,r6
    e014:	1945883a 	add	r2,r3,r5
    e018:	2447803a 	cmpltu	r3,r4,r17
    e01c:	1887883a 	add	r3,r3,r2
    e020:	1880202c 	andhi	r2,r3,128
    e024:	2023883a 	mov	r17,r4
    e028:	103f1626 	beq	r2,zero,dc84 <__alt_data_end+0xff00dc84>
    e02c:	00bfe034 	movhi	r2,65408
    e030:	10bfffc4 	addi	r2,r2,-1
    e034:	5021883a 	mov	r16,r10
    e038:	1886703a 	and	r3,r3,r2
    e03c:	003eaf06 	br	dafc <__alt_data_end+0xff00dafc>
    e040:	3825883a 	mov	r18,r7
    e044:	003f0f06 	br	dc84 <__alt_data_end+0xff00dc84>
    e048:	1c44b03a 	or	r2,r3,r17
    e04c:	8000251e 	bne	r16,zero,e0e4 <__subdf3+0x66c>
    e050:	1000661e 	bne	r2,zero,e1ec <__subdf3+0x774>
    e054:	2990b03a 	or	r8,r5,r6
    e058:	40009626 	beq	r8,zero,e2b4 <__subdf3+0x83c>
    e05c:	2807883a 	mov	r3,r5
    e060:	3023883a 	mov	r17,r6
    e064:	3825883a 	mov	r18,r7
    e068:	003ea406 	br	dafc <__alt_data_end+0xff00dafc>
    e06c:	127ff804 	addi	r9,r2,-32
    e070:	01000804 	movi	r4,32
    e074:	2a52d83a 	srl	r9,r5,r9
    e078:	11008c26 	beq	r2,r4,e2ac <__subdf3+0x834>
    e07c:	01001004 	movi	r4,64
    e080:	2085c83a 	sub	r2,r4,r2
    e084:	2884983a 	sll	r2,r5,r2
    e088:	118cb03a 	or	r6,r2,r6
    e08c:	300cc03a 	cmpne	r6,r6,zero
    e090:	4992b03a 	or	r9,r9,r6
    e094:	0005883a 	mov	r2,zero
    e098:	003f1206 	br	dce4 <__alt_data_end+0xff00dce4>
    e09c:	0101ffc4 	movi	r4,2047
    e0a0:	493f9c1e 	bne	r9,r4,df14 <__alt_data_end+0xff00df14>
    e0a4:	2807883a 	mov	r3,r5
    e0a8:	3023883a 	mov	r17,r6
    e0ac:	4821883a 	mov	r16,r9
    e0b0:	3825883a 	mov	r18,r7
    e0b4:	003e9106 	br	dafc <__alt_data_end+0xff00dafc>
    e0b8:	80001f1e 	bne	r16,zero,e138 <__subdf3+0x6c0>
    e0bc:	1c48b03a 	or	r4,r3,r17
    e0c0:	20005a26 	beq	r4,zero,e22c <__subdf3+0x7b4>
    e0c4:	0084303a 	nor	r2,zero,r2
    e0c8:	1000561e 	bne	r2,zero,e224 <__subdf3+0x7ac>
    e0cc:	89a3883a 	add	r17,r17,r6
    e0d0:	1945883a 	add	r2,r3,r5
    e0d4:	898d803a 	cmpltu	r6,r17,r6
    e0d8:	3087883a 	add	r3,r6,r2
    e0dc:	4821883a 	mov	r16,r9
    e0e0:	003f0506 	br	dcf8 <__alt_data_end+0xff00dcf8>
    e0e4:	10002b1e 	bne	r2,zero,e194 <__subdf3+0x71c>
    e0e8:	2984b03a 	or	r2,r5,r6
    e0ec:	10008026 	beq	r2,zero,e2f0 <__subdf3+0x878>
    e0f0:	2807883a 	mov	r3,r5
    e0f4:	3023883a 	mov	r17,r6
    e0f8:	3825883a 	mov	r18,r7
    e0fc:	0401ffc4 	movi	r16,2047
    e100:	003e7e06 	br	dafc <__alt_data_end+0xff00dafc>
    e104:	3809883a 	mov	r4,r7
    e108:	0011883a 	mov	r8,zero
    e10c:	0005883a 	mov	r2,zero
    e110:	003ee306 	br	dca0 <__alt_data_end+0xff00dca0>
    e114:	1c62b03a 	or	r17,r3,r17
    e118:	8822c03a 	cmpne	r17,r17,zero
    e11c:	0005883a 	mov	r2,zero
    e120:	003f8906 	br	df48 <__alt_data_end+0xff00df48>
    e124:	3809883a 	mov	r4,r7
    e128:	4821883a 	mov	r16,r9
    e12c:	0011883a 	mov	r8,zero
    e130:	0005883a 	mov	r2,zero
    e134:	003eda06 	br	dca0 <__alt_data_end+0xff00dca0>
    e138:	0101ffc4 	movi	r4,2047
    e13c:	49003b26 	beq	r9,r4,e22c <__subdf3+0x7b4>
    e140:	0085c83a 	sub	r2,zero,r2
    e144:	18c02034 	orhi	r3,r3,128
    e148:	01000e04 	movi	r4,56
    e14c:	20806e16 	blt	r4,r2,e308 <__subdf3+0x890>
    e150:	010007c4 	movi	r4,31
    e154:	20807716 	blt	r4,r2,e334 <__subdf3+0x8bc>
    e158:	01000804 	movi	r4,32
    e15c:	2089c83a 	sub	r4,r4,r2
    e160:	1914983a 	sll	r10,r3,r4
    e164:	8890d83a 	srl	r8,r17,r2
    e168:	8908983a 	sll	r4,r17,r4
    e16c:	1884d83a 	srl	r2,r3,r2
    e170:	5222b03a 	or	r17,r10,r8
    e174:	2006c03a 	cmpne	r3,r4,zero
    e178:	88e2b03a 	or	r17,r17,r3
    e17c:	89a3883a 	add	r17,r17,r6
    e180:	1145883a 	add	r2,r2,r5
    e184:	898d803a 	cmpltu	r6,r17,r6
    e188:	3087883a 	add	r3,r6,r2
    e18c:	4821883a 	mov	r16,r9
    e190:	003ed906 	br	dcf8 <__alt_data_end+0xff00dcf8>
    e194:	2984b03a 	or	r2,r5,r6
    e198:	10004226 	beq	r2,zero,e2a4 <__subdf3+0x82c>
    e19c:	1808d0fa 	srli	r4,r3,3
    e1a0:	8822d0fa 	srli	r17,r17,3
    e1a4:	1806977a 	slli	r3,r3,29
    e1a8:	2080022c 	andhi	r2,r4,8
    e1ac:	1c62b03a 	or	r17,r3,r17
    e1b0:	10000826 	beq	r2,zero,e1d4 <__subdf3+0x75c>
    e1b4:	2812d0fa 	srli	r9,r5,3
    e1b8:	4880022c 	andhi	r2,r9,8
    e1bc:	1000051e 	bne	r2,zero,e1d4 <__subdf3+0x75c>
    e1c0:	300cd0fa 	srli	r6,r6,3
    e1c4:	2804977a 	slli	r2,r5,29
    e1c8:	4809883a 	mov	r4,r9
    e1cc:	3825883a 	mov	r18,r7
    e1d0:	11a2b03a 	or	r17,r2,r6
    e1d4:	8806d77a 	srli	r3,r17,29
    e1d8:	200890fa 	slli	r4,r4,3
    e1dc:	882290fa 	slli	r17,r17,3
    e1e0:	0401ffc4 	movi	r16,2047
    e1e4:	1906b03a 	or	r3,r3,r4
    e1e8:	003e4406 	br	dafc <__alt_data_end+0xff00dafc>
    e1ec:	2984b03a 	or	r2,r5,r6
    e1f0:	103e4226 	beq	r2,zero,dafc <__alt_data_end+0xff00dafc>
    e1f4:	8989c83a 	sub	r4,r17,r6
    e1f8:	8911803a 	cmpltu	r8,r17,r4
    e1fc:	1945c83a 	sub	r2,r3,r5
    e200:	1205c83a 	sub	r2,r2,r8
    e204:	1200202c 	andhi	r8,r2,128
    e208:	403e9a26 	beq	r8,zero,dc74 <__alt_data_end+0xff00dc74>
    e20c:	3463c83a 	sub	r17,r6,r17
    e210:	28c5c83a 	sub	r2,r5,r3
    e214:	344d803a 	cmpltu	r6,r6,r17
    e218:	1187c83a 	sub	r3,r2,r6
    e21c:	3825883a 	mov	r18,r7
    e220:	003e3606 	br	dafc <__alt_data_end+0xff00dafc>
    e224:	0101ffc4 	movi	r4,2047
    e228:	493fc71e 	bne	r9,r4,e148 <__alt_data_end+0xff00e148>
    e22c:	2807883a 	mov	r3,r5
    e230:	3023883a 	mov	r17,r6
    e234:	4821883a 	mov	r16,r9
    e238:	003e3006 	br	dafc <__alt_data_end+0xff00dafc>
    e23c:	10003626 	beq	r2,zero,e318 <__subdf3+0x8a0>
    e240:	2984b03a 	or	r2,r5,r6
    e244:	10001726 	beq	r2,zero,e2a4 <__subdf3+0x82c>
    e248:	1808d0fa 	srli	r4,r3,3
    e24c:	8822d0fa 	srli	r17,r17,3
    e250:	1806977a 	slli	r3,r3,29
    e254:	2080022c 	andhi	r2,r4,8
    e258:	1c62b03a 	or	r17,r3,r17
    e25c:	10000726 	beq	r2,zero,e27c <__subdf3+0x804>
    e260:	2812d0fa 	srli	r9,r5,3
    e264:	4880022c 	andhi	r2,r9,8
    e268:	1000041e 	bne	r2,zero,e27c <__subdf3+0x804>
    e26c:	300cd0fa 	srli	r6,r6,3
    e270:	2804977a 	slli	r2,r5,29
    e274:	4809883a 	mov	r4,r9
    e278:	11a2b03a 	or	r17,r2,r6
    e27c:	8806d77a 	srli	r3,r17,29
    e280:	200890fa 	slli	r4,r4,3
    e284:	882290fa 	slli	r17,r17,3
    e288:	3825883a 	mov	r18,r7
    e28c:	1906b03a 	or	r3,r3,r4
    e290:	0401ffc4 	movi	r16,2047
    e294:	003e1906 	br	dafc <__alt_data_end+0xff00dafc>
    e298:	000b883a 	mov	r5,zero
    e29c:	0005883a 	mov	r2,zero
    e2a0:	003e2e06 	br	db5c <__alt_data_end+0xff00db5c>
    e2a4:	0401ffc4 	movi	r16,2047
    e2a8:	003e1406 	br	dafc <__alt_data_end+0xff00dafc>
    e2ac:	0005883a 	mov	r2,zero
    e2b0:	003f7506 	br	e088 <__alt_data_end+0xff00e088>
    e2b4:	0005883a 	mov	r2,zero
    e2b8:	0009883a 	mov	r4,zero
    e2bc:	003e7806 	br	dca0 <__alt_data_end+0xff00dca0>
    e2c0:	123ff804 	addi	r8,r2,-32
    e2c4:	01000804 	movi	r4,32
    e2c8:	1a10d83a 	srl	r8,r3,r8
    e2cc:	11002526 	beq	r2,r4,e364 <__subdf3+0x8ec>
    e2d0:	01001004 	movi	r4,64
    e2d4:	2085c83a 	sub	r2,r4,r2
    e2d8:	1884983a 	sll	r2,r3,r2
    e2dc:	1444b03a 	or	r2,r2,r17
    e2e0:	1004c03a 	cmpne	r2,r2,zero
    e2e4:	40a2b03a 	or	r17,r8,r2
    e2e8:	0005883a 	mov	r2,zero
    e2ec:	003f1606 	br	df48 <__alt_data_end+0xff00df48>
    e2f0:	02000434 	movhi	r8,16
    e2f4:	0009883a 	mov	r4,zero
    e2f8:	423fffc4 	addi	r8,r8,-1
    e2fc:	00bfffc4 	movi	r2,-1
    e300:	0401ffc4 	movi	r16,2047
    e304:	003e6606 	br	dca0 <__alt_data_end+0xff00dca0>
    e308:	1c62b03a 	or	r17,r3,r17
    e30c:	8822c03a 	cmpne	r17,r17,zero
    e310:	0005883a 	mov	r2,zero
    e314:	003f9906 	br	e17c <__alt_data_end+0xff00e17c>
    e318:	2807883a 	mov	r3,r5
    e31c:	3023883a 	mov	r17,r6
    e320:	0401ffc4 	movi	r16,2047
    e324:	003df506 	br	dafc <__alt_data_end+0xff00dafc>
    e328:	2807883a 	mov	r3,r5
    e32c:	3023883a 	mov	r17,r6
    e330:	003df206 	br	dafc <__alt_data_end+0xff00dafc>
    e334:	123ff804 	addi	r8,r2,-32
    e338:	01000804 	movi	r4,32
    e33c:	1a10d83a 	srl	r8,r3,r8
    e340:	11000a26 	beq	r2,r4,e36c <__subdf3+0x8f4>
    e344:	01001004 	movi	r4,64
    e348:	2085c83a 	sub	r2,r4,r2
    e34c:	1884983a 	sll	r2,r3,r2
    e350:	1444b03a 	or	r2,r2,r17
    e354:	1004c03a 	cmpne	r2,r2,zero
    e358:	40a2b03a 	or	r17,r8,r2
    e35c:	0005883a 	mov	r2,zero
    e360:	003f8606 	br	e17c <__alt_data_end+0xff00e17c>
    e364:	0005883a 	mov	r2,zero
    e368:	003fdc06 	br	e2dc <__alt_data_end+0xff00e2dc>
    e36c:	0005883a 	mov	r2,zero
    e370:	003ff706 	br	e350 <__alt_data_end+0xff00e350>

0000e374 <__fixdfsi>:
    e374:	280cd53a 	srli	r6,r5,20
    e378:	00c00434 	movhi	r3,16
    e37c:	18ffffc4 	addi	r3,r3,-1
    e380:	3181ffcc 	andi	r6,r6,2047
    e384:	01c0ff84 	movi	r7,1022
    e388:	28c6703a 	and	r3,r5,r3
    e38c:	280ad7fa 	srli	r5,r5,31
    e390:	3980120e 	bge	r7,r6,e3dc <__fixdfsi+0x68>
    e394:	00810744 	movi	r2,1053
    e398:	11800c16 	blt	r2,r6,e3cc <__fixdfsi+0x58>
    e39c:	00810cc4 	movi	r2,1075
    e3a0:	1185c83a 	sub	r2,r2,r6
    e3a4:	01c007c4 	movi	r7,31
    e3a8:	18c00434 	orhi	r3,r3,16
    e3ac:	38800d16 	blt	r7,r2,e3e4 <__fixdfsi+0x70>
    e3b0:	31befb44 	addi	r6,r6,-1043
    e3b4:	2084d83a 	srl	r2,r4,r2
    e3b8:	1986983a 	sll	r3,r3,r6
    e3bc:	1884b03a 	or	r2,r3,r2
    e3c0:	28000726 	beq	r5,zero,e3e0 <__fixdfsi+0x6c>
    e3c4:	0085c83a 	sub	r2,zero,r2
    e3c8:	f800283a 	ret
    e3cc:	00a00034 	movhi	r2,32768
    e3d0:	10bfffc4 	addi	r2,r2,-1
    e3d4:	2885883a 	add	r2,r5,r2
    e3d8:	f800283a 	ret
    e3dc:	0005883a 	mov	r2,zero
    e3e0:	f800283a 	ret
    e3e4:	008104c4 	movi	r2,1043
    e3e8:	1185c83a 	sub	r2,r2,r6
    e3ec:	1884d83a 	srl	r2,r3,r2
    e3f0:	003ff306 	br	e3c0 <__alt_data_end+0xff00e3c0>

0000e3f4 <__floatsidf>:
    e3f4:	defffd04 	addi	sp,sp,-12
    e3f8:	dfc00215 	stw	ra,8(sp)
    e3fc:	dc400115 	stw	r17,4(sp)
    e400:	dc000015 	stw	r16,0(sp)
    e404:	20002b26 	beq	r4,zero,e4b4 <__floatsidf+0xc0>
    e408:	2023883a 	mov	r17,r4
    e40c:	2020d7fa 	srli	r16,r4,31
    e410:	20002d16 	blt	r4,zero,e4c8 <__floatsidf+0xd4>
    e414:	8809883a 	mov	r4,r17
    e418:	000e5780 	call	e578 <__clzsi2>
    e41c:	01410784 	movi	r5,1054
    e420:	288bc83a 	sub	r5,r5,r2
    e424:	01010cc4 	movi	r4,1075
    e428:	2149c83a 	sub	r4,r4,r5
    e42c:	00c007c4 	movi	r3,31
    e430:	1900160e 	bge	r3,r4,e48c <__floatsidf+0x98>
    e434:	00c104c4 	movi	r3,1043
    e438:	1947c83a 	sub	r3,r3,r5
    e43c:	88c6983a 	sll	r3,r17,r3
    e440:	00800434 	movhi	r2,16
    e444:	10bfffc4 	addi	r2,r2,-1
    e448:	1886703a 	and	r3,r3,r2
    e44c:	2941ffcc 	andi	r5,r5,2047
    e450:	800d883a 	mov	r6,r16
    e454:	0005883a 	mov	r2,zero
    e458:	280a953a 	slli	r5,r5,20
    e45c:	31803fcc 	andi	r6,r6,255
    e460:	01000434 	movhi	r4,16
    e464:	300c97fa 	slli	r6,r6,31
    e468:	213fffc4 	addi	r4,r4,-1
    e46c:	1906703a 	and	r3,r3,r4
    e470:	1946b03a 	or	r3,r3,r5
    e474:	1986b03a 	or	r3,r3,r6
    e478:	dfc00217 	ldw	ra,8(sp)
    e47c:	dc400117 	ldw	r17,4(sp)
    e480:	dc000017 	ldw	r16,0(sp)
    e484:	dec00304 	addi	sp,sp,12
    e488:	f800283a 	ret
    e48c:	00c002c4 	movi	r3,11
    e490:	1887c83a 	sub	r3,r3,r2
    e494:	88c6d83a 	srl	r3,r17,r3
    e498:	8904983a 	sll	r2,r17,r4
    e49c:	01000434 	movhi	r4,16
    e4a0:	213fffc4 	addi	r4,r4,-1
    e4a4:	2941ffcc 	andi	r5,r5,2047
    e4a8:	1906703a 	and	r3,r3,r4
    e4ac:	800d883a 	mov	r6,r16
    e4b0:	003fe906 	br	e458 <__alt_data_end+0xff00e458>
    e4b4:	000d883a 	mov	r6,zero
    e4b8:	000b883a 	mov	r5,zero
    e4bc:	0007883a 	mov	r3,zero
    e4c0:	0005883a 	mov	r2,zero
    e4c4:	003fe406 	br	e458 <__alt_data_end+0xff00e458>
    e4c8:	0123c83a 	sub	r17,zero,r4
    e4cc:	003fd106 	br	e414 <__alt_data_end+0xff00e414>

0000e4d0 <__floatunsidf>:
    e4d0:	defffe04 	addi	sp,sp,-8
    e4d4:	dc000015 	stw	r16,0(sp)
    e4d8:	dfc00115 	stw	ra,4(sp)
    e4dc:	2021883a 	mov	r16,r4
    e4e0:	20002226 	beq	r4,zero,e56c <__floatunsidf+0x9c>
    e4e4:	000e5780 	call	e578 <__clzsi2>
    e4e8:	01010784 	movi	r4,1054
    e4ec:	2089c83a 	sub	r4,r4,r2
    e4f0:	01810cc4 	movi	r6,1075
    e4f4:	310dc83a 	sub	r6,r6,r4
    e4f8:	00c007c4 	movi	r3,31
    e4fc:	1980120e 	bge	r3,r6,e548 <__floatunsidf+0x78>
    e500:	00c104c4 	movi	r3,1043
    e504:	1907c83a 	sub	r3,r3,r4
    e508:	80ca983a 	sll	r5,r16,r3
    e50c:	00800434 	movhi	r2,16
    e510:	10bfffc4 	addi	r2,r2,-1
    e514:	2101ffcc 	andi	r4,r4,2047
    e518:	0021883a 	mov	r16,zero
    e51c:	288a703a 	and	r5,r5,r2
    e520:	2008953a 	slli	r4,r4,20
    e524:	00c00434 	movhi	r3,16
    e528:	18ffffc4 	addi	r3,r3,-1
    e52c:	28c6703a 	and	r3,r5,r3
    e530:	8005883a 	mov	r2,r16
    e534:	1906b03a 	or	r3,r3,r4
    e538:	dfc00117 	ldw	ra,4(sp)
    e53c:	dc000017 	ldw	r16,0(sp)
    e540:	dec00204 	addi	sp,sp,8
    e544:	f800283a 	ret
    e548:	00c002c4 	movi	r3,11
    e54c:	188bc83a 	sub	r5,r3,r2
    e550:	814ad83a 	srl	r5,r16,r5
    e554:	00c00434 	movhi	r3,16
    e558:	18ffffc4 	addi	r3,r3,-1
    e55c:	81a0983a 	sll	r16,r16,r6
    e560:	2101ffcc 	andi	r4,r4,2047
    e564:	28ca703a 	and	r5,r5,r3
    e568:	003fed06 	br	e520 <__alt_data_end+0xff00e520>
    e56c:	0009883a 	mov	r4,zero
    e570:	000b883a 	mov	r5,zero
    e574:	003fea06 	br	e520 <__alt_data_end+0xff00e520>

0000e578 <__clzsi2>:
    e578:	00bfffd4 	movui	r2,65535
    e57c:	11000536 	bltu	r2,r4,e594 <__clzsi2+0x1c>
    e580:	00803fc4 	movi	r2,255
    e584:	11000f36 	bltu	r2,r4,e5c4 <__clzsi2+0x4c>
    e588:	00800804 	movi	r2,32
    e58c:	0007883a 	mov	r3,zero
    e590:	00000506 	br	e5a8 <__clzsi2+0x30>
    e594:	00804034 	movhi	r2,256
    e598:	10bfffc4 	addi	r2,r2,-1
    e59c:	11000c2e 	bgeu	r2,r4,e5d0 <__clzsi2+0x58>
    e5a0:	00800204 	movi	r2,8
    e5a4:	00c00604 	movi	r3,24
    e5a8:	20c8d83a 	srl	r4,r4,r3
    e5ac:	00c00074 	movhi	r3,1
    e5b0:	18c1fd04 	addi	r3,r3,2036
    e5b4:	1909883a 	add	r4,r3,r4
    e5b8:	20c00003 	ldbu	r3,0(r4)
    e5bc:	10c5c83a 	sub	r2,r2,r3
    e5c0:	f800283a 	ret
    e5c4:	00800604 	movi	r2,24
    e5c8:	00c00204 	movi	r3,8
    e5cc:	003ff606 	br	e5a8 <__alt_data_end+0xff00e5a8>
    e5d0:	00800404 	movi	r2,16
    e5d4:	1007883a 	mov	r3,r2
    e5d8:	003ff306 	br	e5a8 <__alt_data_end+0xff00e5a8>

0000e5dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e5dc:	defffd04 	addi	sp,sp,-12
    e5e0:	dfc00215 	stw	ra,8(sp)
    e5e4:	dc400115 	stw	r17,4(sp)
    e5e8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e5ec:	20001f16 	blt	r4,zero,e66c <close+0x90>
    e5f0:	20c00324 	muli	r3,r4,12
    e5f4:	00800074 	movhi	r2,1
    e5f8:	10846d04 	addi	r2,r2,4532
    e5fc:	1885883a 	add	r2,r3,r2
    e600:	2021883a 	mov	r16,r4

  if (fd)
    e604:	10001926 	beq	r2,zero,e66c <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e608:	10c00017 	ldw	r3,0(r2)
    e60c:	18c00417 	ldw	r3,16(r3)
    e610:	18000c26 	beq	r3,zero,e644 <close+0x68>
    e614:	1009883a 	mov	r4,r2
    e618:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e61c:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e620:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e624:	000ea140 	call	ea14 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e628:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e62c:	88000816 	blt	r17,zero,e650 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e630:	dfc00217 	ldw	ra,8(sp)
    e634:	dc400117 	ldw	r17,4(sp)
    e638:	dc000017 	ldw	r16,0(sp)
    e63c:	dec00304 	addi	sp,sp,12
    e640:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e644:	000ea140 	call	ea14 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e648:	0005883a 	mov	r2,zero
    e64c:	003ff806 	br	e630 <__alt_data_end+0xff00e630>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e650:	d0a00d17 	ldw	r2,-32716(gp)
    e654:	10000c26 	beq	r2,zero,e688 <close+0xac>
    e658:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e65c:	0463c83a 	sub	r17,zero,r17
    e660:	14400015 	stw	r17,0(r2)
      return -1;
    e664:	00bfffc4 	movi	r2,-1
    e668:	003ff106 	br	e630 <__alt_data_end+0xff00e630>
    e66c:	d0a00d17 	ldw	r2,-32716(gp)
    e670:	10000726 	beq	r2,zero,e690 <close+0xb4>
    e674:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e678:	00c01444 	movi	r3,81
    e67c:	10c00015 	stw	r3,0(r2)
    return -1;
    e680:	00bfffc4 	movi	r2,-1
    e684:	003fea06 	br	e630 <__alt_data_end+0xff00e630>
    e688:	d0a6dc04 	addi	r2,gp,-25744
    e68c:	003ff306 	br	e65c <__alt_data_end+0xff00e65c>
    e690:	d0a6dc04 	addi	r2,gp,-25744
    e694:	003ff806 	br	e678 <__alt_data_end+0xff00e678>

0000e698 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e698:	3005883a 	mov	r2,r6
    e69c:	f800283a 	ret

0000e6a0 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e6a0:	20000d16 	blt	r4,zero,e6d8 <fstat+0x38>
    e6a4:	21000324 	muli	r4,r4,12
    e6a8:	00800074 	movhi	r2,1
    e6ac:	10846d04 	addi	r2,r2,4532
    e6b0:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e6b4:	20000826 	beq	r4,zero,e6d8 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e6b8:	20800017 	ldw	r2,0(r4)
    e6bc:	10800817 	ldw	r2,32(r2)
    e6c0:	10000126 	beq	r2,zero,e6c8 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e6c4:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e6c8:	00880004 	movi	r2,8192
    e6cc:	28800115 	stw	r2,4(r5)
      return 0;
    e6d0:	0005883a 	mov	r2,zero
    e6d4:	f800283a 	ret
    e6d8:	d0a00d17 	ldw	r2,-32716(gp)
    e6dc:	10000926 	beq	r2,zero,e704 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e6e0:	deffff04 	addi	sp,sp,-4
    e6e4:	dfc00015 	stw	ra,0(sp)
    e6e8:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6ec:	00c01444 	movi	r3,81
    e6f0:	10c00015 	stw	r3,0(r2)
    return -1;
    e6f4:	00bfffc4 	movi	r2,-1
  }
}
    e6f8:	dfc00017 	ldw	ra,0(sp)
    e6fc:	dec00104 	addi	sp,sp,4
    e700:	f800283a 	ret
    e704:	d0a6dc04 	addi	r2,gp,-25744
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e708:	00c01444 	movi	r3,81
    e70c:	10c00015 	stw	r3,0(r2)
    return -1;
    e710:	00bfffc4 	movi	r2,-1
  }
}
    e714:	f800283a 	ret

0000e718 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e718:	defff004 	addi	sp,sp,-64
    e71c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e720:	20001316 	blt	r4,zero,e770 <isatty+0x58>
    e724:	20800324 	muli	r2,r4,12
    e728:	00c00074 	movhi	r3,1
    e72c:	18c46d04 	addi	r3,r3,4532
    e730:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e734:	10000e26 	beq	r2,zero,e770 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e738:	10800017 	ldw	r2,0(r2)
    e73c:	10800817 	ldw	r2,32(r2)
    e740:	10000726 	beq	r2,zero,e760 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e744:	d80b883a 	mov	r5,sp
    e748:	000e6a00 	call	e6a0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e74c:	d8800117 	ldw	r2,4(sp)
    e750:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e754:	dfc00f17 	ldw	ra,60(sp)
    e758:	dec01004 	addi	sp,sp,64
    e75c:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e760:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e764:	dfc00f17 	ldw	ra,60(sp)
    e768:	dec01004 	addi	sp,sp,64
    e76c:	f800283a 	ret
    e770:	d0a00d17 	ldw	r2,-32716(gp)
    e774:	10000726 	beq	r2,zero,e794 <isatty+0x7c>
    e778:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e77c:	00c01444 	movi	r3,81
    e780:	10c00015 	stw	r3,0(r2)
    return 0;
    e784:	0005883a 	mov	r2,zero
  }
}
    e788:	dfc00f17 	ldw	ra,60(sp)
    e78c:	dec01004 	addi	sp,sp,64
    e790:	f800283a 	ret
    e794:	d0a6dc04 	addi	r2,gp,-25744
    e798:	003ff806 	br	e77c <__alt_data_end+0xff00e77c>

0000e79c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e79c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e7a0:	01000074 	movhi	r4,1
    e7a4:	01400074 	movhi	r5,1
    e7a8:	dfc00015 	stw	ra,0(sp)
    e7ac:	21024404 	addi	r4,r4,2320
    e7b0:	29490104 	addi	r5,r5,9220
    e7b4:	21400a26 	beq	r4,r5,e7e0 <alt_load+0x44>
  {
    while( to != end )
    e7b8:	00800074 	movhi	r2,1
    e7bc:	10890104 	addi	r2,r2,9220
    e7c0:	20800726 	beq	r4,r2,e7e0 <alt_load+0x44>
    {
      *to++ = *from++;
    e7c4:	21800104 	addi	r6,r4,4
    e7c8:	118dc83a 	sub	r6,r2,r6
    e7cc:	300cd0ba 	srli	r6,r6,2
    e7d0:	31800044 	addi	r6,r6,1
    e7d4:	318d883a 	add	r6,r6,r6
    e7d8:	318d883a 	add	r6,r6,r6
    e7dc:	00077dc0 	call	77dc <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e7e0:	01000034 	movhi	r4,0
    e7e4:	01400034 	movhi	r5,0
    e7e8:	21000804 	addi	r4,r4,32
    e7ec:	29400804 	addi	r5,r5,32
    e7f0:	21400a26 	beq	r4,r5,e81c <alt_load+0x80>
  {
    while( to != end )
    e7f4:	00800034 	movhi	r2,0
    e7f8:	10806304 	addi	r2,r2,396
    e7fc:	20800726 	beq	r4,r2,e81c <alt_load+0x80>
    {
      *to++ = *from++;
    e800:	21800104 	addi	r6,r4,4
    e804:	118dc83a 	sub	r6,r2,r6
    e808:	300cd0ba 	srli	r6,r6,2
    e80c:	31800044 	addi	r6,r6,1
    e810:	318d883a 	add	r6,r6,r6
    e814:	318d883a 	add	r6,r6,r6
    e818:	00077dc0 	call	77dc <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e81c:	01000074 	movhi	r4,1
    e820:	01400074 	movhi	r5,1
    e824:	21006204 	addi	r4,r4,392
    e828:	29406204 	addi	r5,r5,392
    e82c:	21400a26 	beq	r4,r5,e858 <alt_load+0xbc>
  {
    while( to != end )
    e830:	00800074 	movhi	r2,1
    e834:	10824404 	addi	r2,r2,2320
    e838:	20800726 	beq	r4,r2,e858 <alt_load+0xbc>
    {
      *to++ = *from++;
    e83c:	21800104 	addi	r6,r4,4
    e840:	118dc83a 	sub	r6,r2,r6
    e844:	300cd0ba 	srli	r6,r6,2
    e848:	31800044 	addi	r6,r6,1
    e84c:	318d883a 	add	r6,r6,r6
    e850:	318d883a 	add	r6,r6,r6
    e854:	00077dc0 	call	77dc <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e858:	000f4340 	call	f434 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e85c:	dfc00017 	ldw	ra,0(sp)
    e860:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e864:	000f5801 	jmpi	f580 <alt_icache_flush_all>

0000e868 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e868:	defffe04 	addi	sp,sp,-8
    e86c:	dfc00115 	stw	ra,4(sp)
    e870:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e874:	20000e16 	blt	r4,zero,e8b0 <lseek+0x48>
    e878:	21000324 	muli	r4,r4,12
    e87c:	00800074 	movhi	r2,1
    e880:	10846d04 	addi	r2,r2,4532
    e884:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    e888:	20000926 	beq	r4,zero,e8b0 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e88c:	20800017 	ldw	r2,0(r4)
    e890:	10800717 	ldw	r2,28(r2)
    e894:	10000d26 	beq	r2,zero,e8cc <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e898:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    e89c:	10000f16 	blt	r2,zero,e8dc <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    e8a0:	dfc00117 	ldw	ra,4(sp)
    e8a4:	dc000017 	ldw	r16,0(sp)
    e8a8:	dec00204 	addi	sp,sp,8
    e8ac:	f800283a 	ret
    e8b0:	04001444 	movi	r16,81
    e8b4:	d0a00d17 	ldw	r2,-32716(gp)
    e8b8:	10000626 	beq	r2,zero,e8d4 <lseek+0x6c>
    e8bc:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    e8c0:	14000015 	stw	r16,0(r2)
    rc = -1;
    e8c4:	00bfffc4 	movi	r2,-1
  }

  return rc;
    e8c8:	003ff506 	br	e8a0 <__alt_data_end+0xff00e8a0>
    e8cc:	04002184 	movi	r16,134
    e8d0:	003ff806 	br	e8b4 <__alt_data_end+0xff00e8b4>
    e8d4:	d0a6dc04 	addi	r2,gp,-25744
    e8d8:	003ff906 	br	e8c0 <__alt_data_end+0xff00e8c0>
    e8dc:	00a1c83a 	sub	r16,zero,r2
    e8e0:	003ff406 	br	e8b4 <__alt_data_end+0xff00e8b4>

0000e8e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e8e4:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e8e8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e8ec:	dfc00115 	stw	ra,4(sp)
    e8f0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e8f4:	000ebb80 	call	ebb8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e8f8:	000ebd80 	call	ebd8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e8fc:	01800074 	movhi	r6,1
    e900:	31824004 	addi	r6,r6,2304
    e904:	300b883a 	mov	r5,r6
    e908:	3009883a 	mov	r4,r6
    e90c:	000f6800 	call	f680 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e910:	000f4b80 	call	f4b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e914:	01000074 	movhi	r4,1
    e918:	213d4704 	addi	r4,r4,-2788
    e91c:	000fc640 	call	fc64 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e920:	d1a6e017 	ldw	r6,-25728(gp)
    e924:	d166e117 	ldw	r5,-25724(gp)
    e928:	d126e217 	ldw	r4,-25720(gp)
    e92c:	0000e5c0 	call	e5c <main>
  close(STDOUT_FILENO);
    e930:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e934:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    e938:	000e5dc0 	call	e5dc <close>
  exit (result);
    e93c:	8009883a 	mov	r4,r16
    e940:	000fc780 	call	fc78 <exit>

0000e944 <__malloc_lock>:
    e944:	f800283a 	ret

0000e948 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e948:	f800283a 	ret

0000e94c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e94c:	defffe04 	addi	sp,sp,-8
    e950:	dfc00115 	stw	ra,4(sp)
    e954:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e958:	20002116 	blt	r4,zero,e9e0 <read+0x94>
    e95c:	21000324 	muli	r4,r4,12
    e960:	00800074 	movhi	r2,1
    e964:	10846d04 	addi	r2,r2,4532
    e968:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e96c:	20001c26 	beq	r4,zero,e9e0 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e970:	20800217 	ldw	r2,8(r4)
    e974:	00c00044 	movi	r3,1
    e978:	108000cc 	andi	r2,r2,3
    e97c:	10c00a26 	beq	r2,r3,e9a8 <read+0x5c>
        (fd->dev->read))
    e980:	20800017 	ldw	r2,0(r4)
    e984:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e988:	10000726 	beq	r2,zero,e9a8 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e98c:	103ee83a 	callr	r2
    e990:	1021883a 	mov	r16,r2
    e994:	10000b16 	blt	r2,zero,e9c4 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    e998:	dfc00117 	ldw	ra,4(sp)
    e99c:	dc000017 	ldw	r16,0(sp)
    e9a0:	dec00204 	addi	sp,sp,8
    e9a4:	f800283a 	ret
    e9a8:	d0a00d17 	ldw	r2,-32716(gp)
    e9ac:	10001326 	beq	r2,zero,e9fc <read+0xb0>
    e9b0:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    e9b4:	00c00344 	movi	r3,13
    e9b8:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    e9bc:	00bfffc4 	movi	r2,-1
    e9c0:	003ff506 	br	e998 <__alt_data_end+0xff00e998>
    e9c4:	d0a00d17 	ldw	r2,-32716(gp)
    e9c8:	10000e26 	beq	r2,zero,ea04 <read+0xb8>
    e9cc:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    e9d0:	0421c83a 	sub	r16,zero,r16
    e9d4:	14000015 	stw	r16,0(r2)
          return -1;
    e9d8:	00bfffc4 	movi	r2,-1
    e9dc:	003fee06 	br	e998 <__alt_data_end+0xff00e998>
    e9e0:	d0a00d17 	ldw	r2,-32716(gp)
    e9e4:	10000926 	beq	r2,zero,ea0c <read+0xc0>
    e9e8:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e9ec:	00c01444 	movi	r3,81
    e9f0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    e9f4:	00bfffc4 	movi	r2,-1
    e9f8:	003fe706 	br	e998 <__alt_data_end+0xff00e998>
    e9fc:	d0a6dc04 	addi	r2,gp,-25744
    ea00:	003fec06 	br	e9b4 <__alt_data_end+0xff00e9b4>
    ea04:	d0a6dc04 	addi	r2,gp,-25744
    ea08:	003ff106 	br	e9d0 <__alt_data_end+0xff00e9d0>
    ea0c:	d0a6dc04 	addi	r2,gp,-25744
    ea10:	003ff606 	br	e9ec <__alt_data_end+0xff00e9ec>

0000ea14 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    ea14:	00800084 	movi	r2,2
    ea18:	1100060e 	bge	r2,r4,ea34 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    ea1c:	21000324 	muli	r4,r4,12
    ea20:	00800074 	movhi	r2,1
    ea24:	10846d04 	addi	r2,r2,4532
    ea28:	1109883a 	add	r4,r2,r4
    ea2c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    ea30:	20000015 	stw	zero,0(r4)
    ea34:	f800283a 	ret

0000ea38 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea38:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea3c:	00bfff84 	movi	r2,-2
    ea40:	2884703a 	and	r2,r5,r2
    ea44:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea48:	d0a00e17 	ldw	r2,-32712(gp)
    ea4c:	00ffff04 	movi	r3,-4
    ea50:	108000c4 	addi	r2,r2,3
    ea54:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ea58:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea5c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ea60:	1109883a 	add	r4,r2,r4
    ea64:	18c00004 	addi	r3,r3,0
    ea68:	19000336 	bltu	r3,r4,ea78 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    ea6c:	d1200e15 	stw	r4,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea70:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    ea74:	f800283a 	ret
    ea78:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ea7c:	00bfffc4 	movi	r2,-1
    ea80:	f800283a 	ret

0000ea84 <alt_uncached_free>:
void 
alt_uncached_free(volatile void* ptr)
{
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
    ea84:	00a00034 	movhi	r2,32768
    ea88:	10bfffc4 	addi	r2,r2,-1
    ea8c:	2088703a 	and	r4,r4,r2
    ea90:	0001ca81 	jmpi	1ca8 <free>

0000ea94 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ea94:	defffd04 	addi	sp,sp,-12
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ea98:	210007c4 	addi	r4,r4,31
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ea9c:	dc000015 	stw	r16,0(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    eaa0:	2020d17a 	srli	r16,r4,5

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    eaa4:	01000804 	movi	r4,32
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eaa8:	dfc00215 	stw	ra,8(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    eaac:	8020917a 	slli	r16,r16,5
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eab0:	dc400115 	stw	r17,4(sp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    eab4:	800b883a 	mov	r5,r16
    eab8:	000fcb00 	call	fcb0 <memalign>

  if (ptr == NULL) {
    eabc:	10000a26 	beq	r2,zero,eae8 <alt_uncached_malloc+0x54>
    return NULL; /* Out of memory */
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    eac0:	1009883a 	mov	r4,r2
    eac4:	800b883a 	mov	r5,r16
    eac8:	1023883a 	mov	r17,r2
    eacc:	000f3f40 	call	f3f4 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    ead0:	88a00034 	orhi	r2,r17,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    ead4:	dfc00217 	ldw	ra,8(sp)
    ead8:	dc400117 	ldw	r17,4(sp)
    eadc:	dc000017 	ldw	r16,0(sp)
    eae0:	dec00304 	addi	sp,sp,12
    eae4:	f800283a 	ret
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);

  if (ptr == NULL) {
    return NULL; /* Out of memory */
    eae8:	0005883a 	mov	r2,zero
    eaec:	003ff906 	br	ead4 <__alt_data_end+0xff00ead4>

0000eaf0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    eaf0:	000f37c1 	jmpi	f37c <alt_busy_sleep>

0000eaf4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    eaf4:	defffe04 	addi	sp,sp,-8
    eaf8:	dfc00115 	stw	ra,4(sp)
    eafc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb00:	20002216 	blt	r4,zero,eb8c <write+0x98>
    eb04:	21000324 	muli	r4,r4,12
    eb08:	00800074 	movhi	r2,1
    eb0c:	10846d04 	addi	r2,r2,4532
    eb10:	2089883a 	add	r4,r4,r2
  
  if (fd)
    eb14:	20001d26 	beq	r4,zero,eb8c <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    eb18:	20800217 	ldw	r2,8(r4)
    eb1c:	108000cc 	andi	r2,r2,3
    eb20:	10000a26 	beq	r2,zero,eb4c <write+0x58>
    eb24:	20800017 	ldw	r2,0(r4)
    eb28:	10800617 	ldw	r2,24(r2)
    eb2c:	10000726 	beq	r2,zero,eb4c <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    eb30:	103ee83a 	callr	r2
    eb34:	1021883a 	mov	r16,r2
    eb38:	10000d16 	blt	r2,zero,eb70 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    eb3c:	dfc00117 	ldw	ra,4(sp)
    eb40:	dc000017 	ldw	r16,0(sp)
    eb44:	dec00204 	addi	sp,sp,8
    eb48:	f800283a 	ret
    eb4c:	d0a00d17 	ldw	r2,-32716(gp)
    eb50:	10000526 	beq	r2,zero,eb68 <write+0x74>
    eb54:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    eb58:	00c00344 	movi	r3,13
    eb5c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    eb60:	00bfffc4 	movi	r2,-1
    eb64:	003ff506 	br	eb3c <__alt_data_end+0xff00eb3c>
    eb68:	d0a6dc04 	addi	r2,gp,-25744
    eb6c:	003ffa06 	br	eb58 <__alt_data_end+0xff00eb58>
    eb70:	d0a00d17 	ldw	r2,-32716(gp)
    eb74:	10000c26 	beq	r2,zero,eba8 <write+0xb4>
    eb78:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    eb7c:	0421c83a 	sub	r16,zero,r16
    eb80:	14000015 	stw	r16,0(r2)
        return -1;
    eb84:	00bfffc4 	movi	r2,-1
    eb88:	003fec06 	br	eb3c <__alt_data_end+0xff00eb3c>
    eb8c:	d0a00d17 	ldw	r2,-32716(gp)
    eb90:	10000726 	beq	r2,zero,ebb0 <write+0xbc>
    eb94:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    eb98:	00c01444 	movi	r3,81
    eb9c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eba0:	00bfffc4 	movi	r2,-1
    eba4:	003fe506 	br	eb3c <__alt_data_end+0xff00eb3c>
    eba8:	d0a6dc04 	addi	r2,gp,-25744
    ebac:	003ff306 	br	eb7c <__alt_data_end+0xff00eb7c>
    ebb0:	d0a6dc04 	addi	r2,gp,-25744
    ebb4:	003ff806 	br	eb98 <__alt_data_end+0xff00eb98>

0000ebb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ebb8:	deffff04 	addi	sp,sp,-4
    ebbc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ebc0:	000fa240 	call	fa24 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ebc4:	00800044 	movi	r2,1
    ebc8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ebcc:	dfc00017 	ldw	ra,0(sp)
    ebd0:	dec00104 	addi	sp,sp,4
    ebd4:	f800283a 	ret

0000ebd8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ebd8:	00804034 	movhi	r2,256
    ebdc:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ebe0:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ebe4:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ebe8:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ebec:	0080bef4 	movhi	r2,763
    ebf0:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ebf4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ebf8:	01c0fa04 	movi	r7,1000
    ebfc:	21040804 	addi	r4,r4,4128
    ec00:	01800104 	movi	r6,4
    ec04:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ec08:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ec0c:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ec10:	8404e104 	addi	r16,r16,4996
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ec14:	d0a6e315 	stw	r2,-25716(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ec18:	000f23c0 	call	f23c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ec1c:	8009883a 	mov	r4,r16
    ec20:	000b883a 	mov	r5,zero
    ec24:	000d883a 	mov	r6,zero
    ec28:	000edd40 	call	edd4 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ec2c:	d1600904 	addi	r5,gp,-32732
    ec30:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    ec34:	dfc00117 	ldw	ra,4(sp)
    ec38:	dc000017 	ldw	r16,0(sp)
    ec3c:	dec00204 	addi	sp,sp,8
    ec40:	000f44c1 	jmpi	f44c <alt_dev_llist_insert>

0000ec44 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ec44:	20800017 	ldw	r2,0(r4)
    ec48:	21c00217 	ldw	r7,8(r4)
    ec4c:	11000a04 	addi	r4,r2,40
    ec50:	000ef0c1 	jmpi	ef0c <altera_avalon_jtag_uart_read>

0000ec54 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ec54:	20800017 	ldw	r2,0(r4)
    ec58:	21c00217 	ldw	r7,8(r4)
    ec5c:	11000a04 	addi	r4,r2,40
    ec60:	000f0601 	jmpi	f060 <altera_avalon_jtag_uart_write>

0000ec64 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ec64:	20800017 	ldw	r2,0(r4)
    ec68:	21400217 	ldw	r5,8(r4)
    ec6c:	11000a04 	addi	r4,r2,40
    ec70:	000ee4c1 	jmpi	ee4c <altera_avalon_jtag_uart_close>

0000ec74 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ec74:	21000017 	ldw	r4,0(r4)
    ec78:	21000a04 	addi	r4,r4,40
    ec7c:	000ee981 	jmpi	ee98 <altera_avalon_jtag_uart_ioctl>

0000ec80 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ec80:	20800017 	ldw	r2,0(r4)
    ec84:	10800104 	addi	r2,r2,4
    ec88:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ec8c:	18c1000c 	andi	r3,r3,1024
    ec90:	1800081e 	bne	r3,zero,ecb4 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ec94:	20800917 	ldw	r2,36(r4)
    ec98:	00e00034 	movhi	r3,32768
    ec9c:	18ffff04 	addi	r3,r3,-4
    eca0:	18800236 	bltu	r3,r2,ecac <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    eca4:	10800044 	addi	r2,r2,1
    eca8:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ecac:	d0a6e717 	ldw	r2,-25700(gp)
    ecb0:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ecb4:	20c00817 	ldw	r3,32(r4)
    ecb8:	18c10014 	ori	r3,r3,1024
    ecbc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ecc0:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ecc4:	d0a6e717 	ldw	r2,-25700(gp)
    ecc8:	f800283a 	ret

0000eccc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    eccc:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ecd0:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ecd4:	02bfff44 	movi	r10,-3
    ecd8:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ecdc:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ece0:	3880c00c 	andi	r2,r7,768
    ece4:	10003426 	beq	r2,zero,edb8 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ece8:	3880400c 	andi	r2,r7,256
    ecec:	10001726 	beq	r2,zero,ed4c <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ecf0:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ecf4:	20c00b17 	ldw	r3,44(r4)
    ecf8:	10800044 	addi	r2,r2,1
    ecfc:	1081ffcc 	andi	r2,r2,2047
    ed00:	18800d1e 	bne	r3,r2,ed38 <altera_avalon_jtag_uart_irq+0x6c>
    ed04:	00002d06 	br	edbc <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ed08:	20800a17 	ldw	r2,40(r4)
    ed0c:	2085883a 	add	r2,r4,r2
    ed10:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed14:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    ed18:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed1c:	10800044 	addi	r2,r2,1
    ed20:	1081ffcc 	andi	r2,r2,2047
    ed24:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed28:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ed2c:	10800044 	addi	r2,r2,1
    ed30:	1081ffcc 	andi	r2,r2,2047
    ed34:	11400326 	beq	r2,r5,ed44 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ed38:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ed3c:	18a0000c 	andi	r2,r3,32768
    ed40:	103ff11e 	bne	r2,zero,ed08 <__alt_data_end+0xff00ed08>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ed44:	18ffffec 	andhi	r3,r3,65535
    ed48:	18001c1e 	bne	r3,zero,edbc <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ed4c:	3880800c 	andi	r2,r7,512
    ed50:	103fe226 	beq	r2,zero,ecdc <__alt_data_end+0xff00ecdc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ed54:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    ed58:	38000b1e 	bne	r7,zero,ed88 <altera_avalon_jtag_uart_irq+0xbc>
    ed5c:	003fdf06 	br	ecdc <__alt_data_end+0xff00ecdc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ed60:	20800d17 	ldw	r2,52(r4)
    ed64:	2085883a 	add	r2,r4,r2
    ed68:	10820e07 	ldb	r2,2104(r2)
    ed6c:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed70:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ed74:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed78:	10800044 	addi	r2,r2,1
    ed7c:	1081ffcc 	andi	r2,r2,2047
    ed80:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ed84:	383fd526 	beq	r7,zero,ecdc <__alt_data_end+0xff00ecdc>
    ed88:	20c00d17 	ldw	r3,52(r4)
    ed8c:	20800c17 	ldw	r2,48(r4)
    ed90:	18bff31e 	bne	r3,r2,ed60 <__alt_data_end+0xff00ed60>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ed94:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ed98:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ed9c:	1284703a 	and	r2,r2,r10
    eda0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eda4:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eda8:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    edac:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    edb0:	3880c00c 	andi	r2,r7,768
    edb4:	103fcc1e 	bne	r2,zero,ece8 <__alt_data_end+0xff00ece8>
    edb8:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    edbc:	20800817 	ldw	r2,32(r4)
    edc0:	1244703a 	and	r2,r2,r9
    edc4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    edc8:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    edcc:	40800037 	ldwio	r2,0(r8)
    edd0:	003fde06 	br	ed4c <__alt_data_end+0xff00ed4c>

0000edd4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    edd4:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    edd8:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eddc:	dc000115 	stw	r16,4(sp)
    ede0:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ede4:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ede8:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    edec:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    edf0:	2809883a 	mov	r4,r5
    edf4:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    edf8:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    edfc:	01800074 	movhi	r6,1
    ee00:	31bb3304 	addi	r6,r6,-4916
    ee04:	800f883a 	mov	r7,r16
    ee08:	d8000015 	stw	zero,0(sp)
    ee0c:	000f58c0 	call	f58c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ee10:	d166e717 	ldw	r5,-25700(gp)
    ee14:	01800074 	movhi	r6,1
    ee18:	31bb2004 	addi	r6,r6,-4992
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ee1c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ee20:	800f883a 	mov	r7,r16
    ee24:	81000204 	addi	r4,r16,8
    ee28:	000f2fc0 	call	f2fc <alt_alarm_start>
    ee2c:	1000030e 	bge	r2,zero,ee3c <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ee30:	00a00034 	movhi	r2,32768
    ee34:	10bfffc4 	addi	r2,r2,-1
    ee38:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ee3c:	dfc00217 	ldw	ra,8(sp)
    ee40:	dc000117 	ldw	r16,4(sp)
    ee44:	dec00304 	addi	sp,sp,12
    ee48:	f800283a 	ret

0000ee4c <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    ee4c:	2890000c 	andi	r2,r5,16384
    ee50:	21c00c17 	ldw	r7,48(r4)
    ee54:	10000426 	beq	r2,zero,ee68 <altera_avalon_jtag_uart_close+0x1c>
    ee58:	00000606 	br	ee74 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ee5c:	21800917 	ldw	r6,36(r4)
    ee60:	20c00117 	ldw	r3,4(r4)
    ee64:	30c00a2e 	bgeu	r6,r3,ee90 <altera_avalon_jtag_uart_close+0x44>
    ee68:	20c00d17 	ldw	r3,52(r4)
    ee6c:	38fffb1e 	bne	r7,r3,ee5c <__alt_data_end+0xff00ee5c>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    ee70:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ee74:	20800d17 	ldw	r2,52(r4)
    ee78:	11c00526 	beq	r2,r7,ee90 <altera_avalon_jtag_uart_close+0x44>
    ee7c:	20c00917 	ldw	r3,36(r4)
    ee80:	20800117 	ldw	r2,4(r4)
    ee84:	1880022e 	bgeu	r3,r2,ee90 <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    ee88:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    ee8c:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ee90:	0005883a 	mov	r2,zero
    ee94:	f800283a 	ret

0000ee98 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    ee98:	009a8044 	movi	r2,27137
    ee9c:	28800d26 	beq	r5,r2,eed4 <altera_avalon_jtag_uart_ioctl+0x3c>
    eea0:	009a8084 	movi	r2,27138
    eea4:	2880091e 	bne	r5,r2,eecc <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    eea8:	21400117 	ldw	r5,4(r4)
    eeac:	00a00034 	movhi	r2,32768
    eeb0:	10bfffc4 	addi	r2,r2,-1
    eeb4:	28800526 	beq	r5,r2,eecc <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    eeb8:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    eebc:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    eec0:	1947803a 	cmpltu	r3,r3,r5
    eec4:	30c00015 	stw	r3,0(r6)
    eec8:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    eecc:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    eed0:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    eed4:	20c00117 	ldw	r3,4(r4)
    eed8:	00a00034 	movhi	r2,32768
    eedc:	10bfffc4 	addi	r2,r2,-1
    eee0:	18bffa26 	beq	r3,r2,eecc <__alt_data_end+0xff00eecc>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    eee4:	30800017 	ldw	r2,0(r6)
    eee8:	01600034 	movhi	r5,32768
    eeec:	297fff04 	addi	r5,r5,-4
    eef0:	10ffff84 	addi	r3,r2,-2
    eef4:	28c0022e 	bgeu	r5,r3,ef00 <altera_avalon_jtag_uart_ioctl+0x68>
    eef8:	00a00034 	movhi	r2,32768
    eefc:	10bfff84 	addi	r2,r2,-2
    ef00:	20800115 	stw	r2,4(r4)
      rc = 0;
    ef04:	0005883a 	mov	r2,zero
    ef08:	f800283a 	ret

0000ef0c <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ef0c:	01804e0e 	bge	zero,r6,f048 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ef10:	defff504 	addi	sp,sp,-44
    ef14:	dc000115 	stw	r16,4(sp)
    ef18:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ef1c:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ef20:	dd800715 	stw	r22,28(sp)
    ef24:	dd400615 	stw	r21,24(sp)
    ef28:	dd000515 	stw	r20,20(sp)
    ef2c:	dcc00415 	stw	r19,16(sp)
    ef30:	dc800315 	stw	r18,12(sp)
    ef34:	dfc00a15 	stw	ra,40(sp)
    ef38:	df000915 	stw	fp,36(sp)
    ef3c:	ddc00815 	stw	r23,32(sp)
    ef40:	dc400215 	stw	r17,8(sp)
    ef44:	3027883a 	mov	r19,r6
    ef48:	2025883a 	mov	r18,r4
    ef4c:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ef50:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ef54:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef58:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ef5c:	b02f883a 	mov	r23,r22
    ef60:	00000a06 	br	ef8c <altera_avalon_jtag_uart_read+0x80>
    ef64:	9880012e 	bgeu	r19,r2,ef6c <altera_avalon_jtag_uart_read+0x60>
    ef68:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef6c:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef70:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef74:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef78:	00077dc0 	call	77dc <memcpy>
      ptr   += n;
      space -= n;
    ef7c:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef80:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    ef84:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    ef88:	04c0080e 	bge	zero,r19,efac <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ef8c:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ef90:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    ef94:	e4000136 	bltu	fp,r16,ef9c <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    ef98:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef9c:	a40b883a 	add	r5,r20,r16
    efa0:	b809883a 	mov	r4,r23
    efa4:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    efa8:	103fee1e 	bne	r2,zero,ef64 <__alt_data_end+0xff00ef64>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    efac:	bd800d1e 	bne	r23,r22,efe4 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    efb0:	d8800017 	ldw	r2,0(sp)
    efb4:	10000426 	beq	r2,zero,efc8 <altera_avalon_jtag_uart_read+0xbc>
    efb8:	00002106 	br	f040 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    efbc:	90c00917 	ldw	r3,36(r18)
    efc0:	90800117 	ldw	r2,4(r18)
    efc4:	1880022e 	bgeu	r3,r2,efd0 <altera_avalon_jtag_uart_read+0xc4>
    efc8:	90800a17 	ldw	r2,40(r18)
    efcc:	e0bffb26 	beq	fp,r2,efbc <__alt_data_end+0xff00efbc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    efd0:	90800a17 	ldw	r2,40(r18)
    efd4:	e0800126 	beq	fp,r2,efdc <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    efd8:	04ffe016 	blt	zero,r19,ef5c <__alt_data_end+0xff00ef5c>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    efdc:	00bffec4 	movi	r2,-5
    efe0:	00000b06 	br	f010 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efe4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efe8:	00bfff84 	movi	r2,-2
    efec:	2084703a 	and	r2,r4,r2
    eff0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eff4:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eff8:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    effc:	10800054 	ori	r2,r2,1
    f000:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f004:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f008:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    f00c:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    f010:	dfc00a17 	ldw	ra,40(sp)
    f014:	df000917 	ldw	fp,36(sp)
    f018:	ddc00817 	ldw	r23,32(sp)
    f01c:	dd800717 	ldw	r22,28(sp)
    f020:	dd400617 	ldw	r21,24(sp)
    f024:	dd000517 	ldw	r20,20(sp)
    f028:	dcc00417 	ldw	r19,16(sp)
    f02c:	dc800317 	ldw	r18,12(sp)
    f030:	dc400217 	ldw	r17,8(sp)
    f034:	dc000117 	ldw	r16,4(sp)
    f038:	dec00b04 	addi	sp,sp,44
    f03c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f040:	00bffd44 	movi	r2,-11
    f044:	003ff206 	br	f010 <__alt_data_end+0xff00f010>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    f048:	39d0000c 	andi	r7,r7,16384
    f04c:	3800021e 	bne	r7,zero,f058 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    f050:	00bffec4 	movi	r2,-5
}
    f054:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f058:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    f05c:	f800283a 	ret

0000f060 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f060:	defff604 	addi	sp,sp,-40
    f064:	dc000015 	stw	r16,0(sp)
    f068:	dfc00915 	stw	ra,36(sp)
    f06c:	df000815 	stw	fp,32(sp)
    f070:	ddc00715 	stw	r23,28(sp)
    f074:	dd800615 	stw	r22,24(sp)
    f078:	dd400515 	stw	r21,20(sp)
    f07c:	dd000415 	stw	r20,16(sp)
    f080:	dcc00315 	stw	r19,12(sp)
    f084:	dc800215 	stw	r18,8(sp)
    f088:	dc400115 	stw	r17,4(sp)
    f08c:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f090:	01804d0e 	bge	zero,r6,f1c8 <altera_avalon_jtag_uart_write+0x168>
    f094:	302d883a 	mov	r22,r6
    f098:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f09c:	3c50000c 	andi	r17,r7,16384
    f0a0:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0a4:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f0a8:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f0ac:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    f0b0:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    f0b4:	e0c03a2e 	bgeu	fp,r3,f1a0 <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    f0b8:	1dffffc4 	addi	r23,r3,-1
    f0bc:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    f0c0:	b800131e 	bne	r23,zero,f110 <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0c4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0c8:	24c4703a 	and	r2,r4,r19
    f0cc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0d0:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0d4:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0d8:	10800094 	ori	r2,r2,2
    f0dc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0e0:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0e4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f0e8:	8800341e 	bne	r17,zero,f1bc <altera_avalon_jtag_uart_write+0x15c>
    f0ec:	81000917 	ldw	r4,36(r16)
    f0f0:	00000206 	br	f0fc <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f0f4:	80800117 	ldw	r2,4(r16)
    f0f8:	2080022e 	bgeu	r4,r2,f104 <altera_avalon_jtag_uart_write+0xa4>
    f0fc:	80800d17 	ldw	r2,52(r16)
    f100:	18bffc26 	beq	r3,r2,f0f4 <__alt_data_end+0xff00f0f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f104:	203fe926 	beq	r4,zero,f0ac <__alt_data_end+0xff00f0ac>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f108:	ad00181e 	bne	r21,r20,f16c <altera_avalon_jtag_uart_write+0x10c>
    f10c:	00003a06 	br	f1f8 <altera_avalon_jtag_uart_write+0x198>
    f110:	b5c0012e 	bgeu	r22,r23,f118 <altera_avalon_jtag_uart_write+0xb8>
    f114:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f118:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f11c:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f120:	a80b883a 	mov	r5,r21
    f124:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f128:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f12c:	00077dc0 	call	77dc <memcpy>
      ptr   += n;
      count -= n;
    f130:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f134:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f138:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f13c:	05bfdb16 	blt	zero,r22,f0ac <__alt_data_end+0xff00f0ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f140:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f144:	00bfff84 	movi	r2,-2
    f148:	1884703a 	and	r2,r3,r2
    f14c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f150:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f154:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f158:	10800094 	ori	r2,r2,2
    f15c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f160:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f164:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f168:	a5402226 	beq	r20,r21,f1f4 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f16c:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f170:	dfc00917 	ldw	ra,36(sp)
    f174:	df000817 	ldw	fp,32(sp)
    f178:	ddc00717 	ldw	r23,28(sp)
    f17c:	dd800617 	ldw	r22,24(sp)
    f180:	dd400517 	ldw	r21,20(sp)
    f184:	dd000417 	ldw	r20,16(sp)
    f188:	dcc00317 	ldw	r19,12(sp)
    f18c:	dc800217 	ldw	r18,8(sp)
    f190:	dc400117 	ldw	r17,4(sp)
    f194:	dc000017 	ldw	r16,0(sp)
    f198:	dec00a04 	addi	sp,sp,40
    f19c:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f1a0:	18000326 	beq	r3,zero,f1b0 <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f1a4:	00820004 	movi	r2,2048
    f1a8:	172fc83a 	sub	r23,r2,fp
    f1ac:	003fc406 	br	f0c0 <__alt_data_end+0xff00f0c0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f1b0:	0081ffc4 	movi	r2,2047
    f1b4:	172fc83a 	sub	r23,r2,fp
    f1b8:	003fc106 	br	f0c0 <__alt_data_end+0xff00f0c0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f1bc:	ad3feb1e 	bne	r21,r20,f16c <__alt_data_end+0xff00f16c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f1c0:	00bffd44 	movi	r2,-11
    f1c4:	003fea06 	br	f170 <__alt_data_end+0xff00f170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1c8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1cc:	00bfff84 	movi	r2,-2
    f1d0:	1884703a 	and	r2,r3,r2
    f1d4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1d8:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1dc:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1e0:	10800094 	ori	r2,r2,2
    f1e4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1e8:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1ec:	1801703a 	wrctl	status,r3
    f1f0:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f1f4:	883ff21e 	bne	r17,zero,f1c0 <__alt_data_end+0xff00f1c0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f1f8:	00bffec4 	movi	r2,-5
    f1fc:	003fdc06 	br	f170 <__alt_data_end+0xff00f170>

0000f200 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f200:	defffe04 	addi	sp,sp,-8
    f204:	dfc00115 	stw	ra,4(sp)
    f208:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f20c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f210:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f214:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f218:	00bfff84 	movi	r2,-2
    f21c:	8084703a 	and	r2,r16,r2
    f220:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f224:	000f9300 	call	f930 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f228:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f22c:	dfc00117 	ldw	ra,4(sp)
    f230:	dc000017 	ldw	r16,0(sp)
    f234:	dec00204 	addi	sp,sp,8
    f238:	f800283a 	ret

0000f23c <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f23c:	d0e6e717 	ldw	r3,-25700(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f240:	defffe04 	addi	sp,sp,-8
    f244:	dfc00115 	stw	ra,4(sp)
    f248:	2005883a 	mov	r2,r4
    f24c:	2809883a 	mov	r4,r5
    f250:	300b883a 	mov	r5,r6
    f254:	1800011e 	bne	r3,zero,f25c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f258:	d1e6e715 	stw	r7,-25700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f25c:	00c001c4 	movi	r3,7
    f260:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f264:	01800074 	movhi	r6,1
    f268:	31bc8004 	addi	r6,r6,-3584
    f26c:	d8000015 	stw	zero,0(sp)
    f270:	100f883a 	mov	r7,r2
    f274:	000f58c0 	call	f58c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f278:	dfc00117 	ldw	ra,4(sp)
    f27c:	dec00204 	addi	sp,sp,8
    f280:	f800283a 	ret

0000f284 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f284:	d0e6e317 	ldw	r3,-25716(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f288:	d0a6e417 	ldw	r2,-25712(gp)

  if (!altera_avalon_timer_ts_freq)
    f28c:	18000a26 	beq	r3,zero,f2b8 <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f290:	10c00104 	addi	r3,r2,4
    f294:	01000204 	movi	r4,8
    f298:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f29c:	013fffd4 	movui	r4,65535
    f2a0:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f2a4:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f2a8:	00800104 	movi	r2,4
    f2ac:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f2b0:	0005883a 	mov	r2,zero
    f2b4:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f2b8:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f2bc:	f800283a 	ret

0000f2c0 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f2c0:	d0a6e317 	ldw	r2,-25716(gp)
    f2c4:	1000021e 	bne	r2,zero,f2d0 <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f2c8:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f2cc:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f2d0:	d0e6e417 	ldw	r3,-25712(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f2d4:	18800404 	addi	r2,r3,16
    f2d8:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f2dc:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f2e0:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f2e4:	1806943a 	slli	r3,r3,16
    f2e8:	10bfffcc 	andi	r2,r2,65535
    f2ec:	1884303a 	nor	r2,r3,r2
    f2f0:	f800283a 	ret

0000f2f4 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f2f4:	d0a6e317 	ldw	r2,-25716(gp)
    f2f8:	f800283a 	ret

0000f2fc <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f2fc:	d0a6e717 	ldw	r2,-25700(gp)
    f300:	10001a26 	beq	r2,zero,f36c <alt_alarm_start+0x70>
  {
    if (alarm)
    f304:	20001b26 	beq	r4,zero,f374 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f308:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f30c:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f310:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f314:	00bfff84 	movi	r2,-2
    f318:	1884703a 	and	r2,r3,r2
    f31c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f320:	d0a6e617 	ldw	r2,-25704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f324:	11800044 	addi	r6,r2,1
    f328:	314b883a 	add	r5,r6,r5
    f32c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f330:	28800b36 	bltu	r5,r2,f360 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f334:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f338:	d0a01004 	addi	r2,gp,-32704
    f33c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f340:	d0a01017 	ldw	r2,-32704(gp)
    f344:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f348:	d0a01017 	ldw	r2,-32704(gp)
  list->next           = entry;
    f34c:	d1201015 	stw	r4,-32704(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f350:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f354:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f358:	0005883a 	mov	r2,zero
    f35c:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f360:	00800044 	movi	r2,1
    f364:	20800405 	stb	r2,16(r4)
    f368:	003ff306 	br	f338 <__alt_data_end+0xff00f338>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f36c:	00bfde84 	movi	r2,-134
    f370:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f374:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f378:	f800283a 	ret

0000f37c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f37c:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f380:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f384:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f388:	dc000015 	stw	r16,0(sp)
    f38c:	dfc00115 	stw	ra,4(sp)
    f390:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f394:	000beb80 	call	beb8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f398:	10001226 	beq	r2,zero,f3e4 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f39c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f3a0:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f3a4:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f3a8:	21000044 	addi	r4,r4,1
    f3ac:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f3b0:	297fffc4 	addi	r5,r5,-1
    f3b4:	283ffe1e 	bne	r5,zero,f3b0 <__alt_data_end+0xff00f3b0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f3b8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f3bc:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f3c0:	18bffb16 	blt	r3,r2,f3b0 <__alt_data_end+0xff00f3b0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f3c4:	8020913a 	slli	r16,r16,4
    f3c8:	843fffc4 	addi	r16,r16,-1
    f3cc:	803ffe1e 	bne	r16,zero,f3c8 <__alt_data_end+0xff00f3c8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f3d0:	0005883a 	mov	r2,zero
    f3d4:	dfc00117 	ldw	ra,4(sp)
    f3d8:	dc000017 	ldw	r16,0(sp)
    f3dc:	dec00204 	addi	sp,sp,8
    f3e0:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f3e4:	8020913a 	slli	r16,r16,4
    f3e8:	843fffc4 	addi	r16,r16,-1
    f3ec:	043ffe16 	blt	zero,r16,f3e8 <__alt_data_end+0xff00f3e8>
    f3f0:	003ff706 	br	f3d0 <__alt_data_end+0xff00f3d0>

0000f3f4 <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
    f3f4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f3f8:	2005883a 	mov	r2,r4
    f3fc:	2140092e 	bgeu	r4,r5,f424 <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
    f400:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f404:	10800804 	addi	r2,r2,32
    f408:	117ffd36 	bltu	r2,r5,f400 <__alt_data_end+0xff00f400>
    f40c:	0104303a 	nor	r2,zero,r4
    f410:	1145883a 	add	r2,r2,r5
    f414:	1004d17a 	srli	r2,r2,5
    f418:	10800044 	addi	r2,r2,1
    f41c:	1004917a 	slli	r2,r2,5
    f420:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
    f424:	210007cc 	andi	r4,r4,31
    f428:	20000126 	beq	r4,zero,f430 <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
    f42c:	1000001b 	flushda	0(r2)
    f430:	f800283a 	ret

0000f434 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f434:	0005883a 	mov	r2,zero
    f438:	00e00014 	movui	r3,32768
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f43c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f440:	10800804 	addi	r2,r2,32
    f444:	10fffd1e 	bne	r2,r3,f43c <__alt_data_end+0xff00f43c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f448:	f800283a 	ret

0000f44c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f44c:	20000a26 	beq	r4,zero,f478 <alt_dev_llist_insert+0x2c>
    f450:	20800217 	ldw	r2,8(r4)
    f454:	10000826 	beq	r2,zero,f478 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f458:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f45c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f460:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f464:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f468:	28c00017 	ldw	r3,0(r5)
    f46c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f470:	29000015 	stw	r4,0(r5)
    f474:	f800283a 	ret
    f478:	d0a00d17 	ldw	r2,-32716(gp)
    f47c:	10000926 	beq	r2,zero,f4a4 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f480:	deffff04 	addi	sp,sp,-4
    f484:	dfc00015 	stw	ra,0(sp)
    f488:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f48c:	00c00584 	movi	r3,22
    f490:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f494:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f498:	dfc00017 	ldw	ra,0(sp)
    f49c:	dec00104 	addi	sp,sp,4
    f4a0:	f800283a 	ret
    f4a4:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f4a8:	00c00584 	movi	r3,22
    f4ac:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f4b0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f4b4:	f800283a 	ret

0000f4b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4b8:	defffc04 	addi	sp,sp,-16
    f4bc:	dc800215 	stw	r18,8(sp)
    f4c0:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4c4:	04800074 	movhi	r18,1
    f4c8:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4cc:	dfc00315 	stw	ra,12(sp)
    f4d0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4d4:	84006104 	addi	r16,r16,388
    f4d8:	94806204 	addi	r18,r18,392
    f4dc:	84800936 	bltu	r16,r18,f504 <_do_ctors+0x4c>
    f4e0:	84a5c83a 	sub	r18,r16,r18
    f4e4:	9024d0ba 	srli	r18,r18,2
    f4e8:	0023883a 	mov	r17,zero
    f4ec:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f4f0:	80800017 	ldw	r2,0(r16)
    f4f4:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4f8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f4fc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f500:	8cbffb1e 	bne	r17,r18,f4f0 <__alt_data_end+0xff00f4f0>
        (*ctor) (); 
}
    f504:	dfc00317 	ldw	ra,12(sp)
    f508:	dc800217 	ldw	r18,8(sp)
    f50c:	dc400117 	ldw	r17,4(sp)
    f510:	dc000017 	ldw	r16,0(sp)
    f514:	dec00404 	addi	sp,sp,16
    f518:	f800283a 	ret

0000f51c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f51c:	defffc04 	addi	sp,sp,-16
    f520:	dc800215 	stw	r18,8(sp)
    f524:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f528:	04800074 	movhi	r18,1
    f52c:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f530:	dfc00315 	stw	ra,12(sp)
    f534:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f538:	84006104 	addi	r16,r16,388
    f53c:	94806204 	addi	r18,r18,392
    f540:	84800936 	bltu	r16,r18,f568 <_do_dtors+0x4c>
    f544:	84a5c83a 	sub	r18,r16,r18
    f548:	9024d0ba 	srli	r18,r18,2
    f54c:	0023883a 	mov	r17,zero
    f550:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f554:	80800017 	ldw	r2,0(r16)
    f558:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f55c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f560:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f564:	8cbffb1e 	bne	r17,r18,f554 <__alt_data_end+0xff00f554>
        (*dtor) (); 
}
    f568:	dfc00317 	ldw	ra,12(sp)
    f56c:	dc800217 	ldw	r18,8(sp)
    f570:	dc400117 	ldw	r17,4(sp)
    f574:	dc000017 	ldw	r16,0(sp)
    f578:	dec00404 	addi	sp,sp,16
    f57c:	f800283a 	ret

0000f580 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f580:	01440004 	movi	r5,4096
    f584:	0009883a 	mov	r4,zero
    f588:	000fba01 	jmpi	fba0 <alt_icache_flush>

0000f58c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f58c:	000f6181 	jmpi	f618 <alt_iic_isr_register>

0000f590 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f590:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f594:	00bfff84 	movi	r2,-2
    f598:	2084703a 	and	r2,r4,r2
    f59c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f5a0:	00c00044 	movi	r3,1
    f5a4:	d0a6e517 	ldw	r2,-25708(gp)
    f5a8:	194a983a 	sll	r5,r3,r5
    f5ac:	288ab03a 	or	r5,r5,r2
    f5b0:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f5b4:	d0a6e517 	ldw	r2,-25708(gp)
    f5b8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5bc:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f5c0:	0005883a 	mov	r2,zero
    f5c4:	f800283a 	ret

0000f5c8 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5c8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5cc:	00bfff84 	movi	r2,-2
    f5d0:	2084703a 	and	r2,r4,r2
    f5d4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f5d8:	00ffff84 	movi	r3,-2
    f5dc:	d0a6e517 	ldw	r2,-25708(gp)
    f5e0:	194a183a 	rol	r5,r3,r5
    f5e4:	288a703a 	and	r5,r5,r2
    f5e8:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f5ec:	d0a6e517 	ldw	r2,-25708(gp)
    f5f0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5f4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f5f8:	0005883a 	mov	r2,zero
    f5fc:	f800283a 	ret

0000f600 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f600:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f604:	00800044 	movi	r2,1
    f608:	1144983a 	sll	r2,r2,r5
    f60c:	10c4703a 	and	r2,r2,r3
}
    f610:	1004c03a 	cmpne	r2,r2,zero
    f614:	f800283a 	ret

0000f618 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f618:	00c007c4 	movi	r3,31
    f61c:	19401616 	blt	r3,r5,f678 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f620:	defffe04 	addi	sp,sp,-8
    f624:	dfc00115 	stw	ra,4(sp)
    f628:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f62c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f630:	00ffff84 	movi	r3,-2
    f634:	80c6703a 	and	r3,r16,r3
    f638:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f63c:	280490fa 	slli	r2,r5,3
    f640:	00c00074 	movhi	r3,1
    f644:	18cfe204 	addi	r3,r3,16264
    f648:	1885883a 	add	r2,r3,r2
    f64c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f650:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f654:	30000626 	beq	r6,zero,f670 <alt_iic_isr_register+0x58>
    f658:	000f5900 	call	f590 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f65c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f660:	dfc00117 	ldw	ra,4(sp)
    f664:	dc000017 	ldw	r16,0(sp)
    f668:	dec00204 	addi	sp,sp,8
    f66c:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f670:	000f5c80 	call	f5c8 <alt_ic_irq_disable>
    f674:	003ff906 	br	f65c <__alt_data_end+0xff00f65c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f678:	00bffa84 	movi	r2,-22
    f67c:	f800283a 	ret

0000f680 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f680:	defffd04 	addi	sp,sp,-12
    f684:	dc400115 	stw	r17,4(sp)
    f688:	dc000015 	stw	r16,0(sp)
    f68c:	2823883a 	mov	r17,r5
    f690:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f694:	01400044 	movi	r5,1
    f698:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f69c:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f6a0:	000f7840 	call	f784 <open>

  if (old >= 0)
    f6a4:	10000c16 	blt	r2,zero,f6d8 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f6a8:	10c00324 	muli	r3,r2,12
    f6ac:	01400074 	movhi	r5,1
    f6b0:	29446d04 	addi	r5,r5,4532
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f6b4:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6b8:	28c5883a 	add	r2,r5,r3
    f6bc:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f6c0:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6c4:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f6c8:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f6cc:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f6d0:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f6d4:	000ea140 	call	ea14 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f6d8:	01807fc4 	movi	r6,511
    f6dc:	000b883a 	mov	r5,zero
    f6e0:	8809883a 	mov	r4,r17
    f6e4:	000f7840 	call	f784 <open>

  if (old >= 0)
    f6e8:	10000c16 	blt	r2,zero,f71c <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f6ec:	10c00324 	muli	r3,r2,12
    f6f0:	01400074 	movhi	r5,1
    f6f4:	29446d04 	addi	r5,r5,4532
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f6f8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6fc:	28c5883a 	add	r2,r5,r3
    f700:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f704:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f708:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f70c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f710:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f714:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f718:	000ea140 	call	ea14 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f71c:	01807fc4 	movi	r6,511
    f720:	01400044 	movi	r5,1
    f724:	8009883a 	mov	r4,r16
    f728:	000f7840 	call	f784 <open>

  if (old >= 0)
    f72c:	10001016 	blt	r2,zero,f770 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f730:	10c00324 	muli	r3,r2,12
    f734:	01400074 	movhi	r5,1
    f738:	29446d04 	addi	r5,r5,4532
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f73c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f740:	28c5883a 	add	r2,r5,r3
    f744:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f748:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f74c:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f750:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f754:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f758:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f75c:	dfc00217 	ldw	ra,8(sp)
    f760:	dc400117 	ldw	r17,4(sp)
    f764:	dc000017 	ldw	r16,0(sp)
    f768:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f76c:	000ea141 	jmpi	ea14 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f770:	dfc00217 	ldw	ra,8(sp)
    f774:	dc400117 	ldw	r17,4(sp)
    f778:	dc000017 	ldw	r16,0(sp)
    f77c:	dec00304 	addi	sp,sp,12
    f780:	f800283a 	ret

0000f784 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f784:	defffa04 	addi	sp,sp,-24
    f788:	dc000015 	stw	r16,0(sp)
    f78c:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f790:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f794:	dc800215 	stw	r18,8(sp)
    f798:	dc400115 	stw	r17,4(sp)
    f79c:	dfc00515 	stw	ra,20(sp)
    f7a0:	dd000415 	stw	r20,16(sp)
    f7a4:	dcc00315 	stw	r19,12(sp)
    f7a8:	2023883a 	mov	r17,r4
    f7ac:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f7b0:	000fa2c0 	call	fa2c <alt_find_dev>
    f7b4:	10004626 	beq	r2,zero,f8d0 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f7b8:	1009883a 	mov	r4,r2
    f7bc:	1029883a 	mov	r20,r2
    f7c0:	000fb500 	call	fb50 <alt_get_fd>
    f7c4:	1027883a 	mov	r19,r2
    f7c8:	1000090e 	bge	r2,zero,f7f0 <open+0x6c>
    f7cc:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f7d0:	9809883a 	mov	r4,r19
    f7d4:	000ea140 	call	ea14 <alt_release_fd>
    f7d8:	d0a00d17 	ldw	r2,-32716(gp)
    f7dc:	10004326 	beq	r2,zero,f8ec <open+0x168>
    f7e0:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f7e4:	14000015 	stw	r16,0(r2)
    return -1;
    f7e8:	00bfffc4 	movi	r2,-1
    f7ec:	00002e06 	br	f8a8 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f7f0:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f7f4:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f7f8:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f7fc:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f800:	10846d04 	addi	r2,r2,4532

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f804:	80c6703a 	and	r3,r16,r3
    f808:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f80c:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f810:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f814:	d2200817 	ldw	r8,-32736(gp)
    f818:	21c00017 	ldw	r7,0(r4)
    f81c:	11400204 	addi	r5,r2,8
    f820:	0007883a 	mov	r3,zero
    f824:	00000306 	br	f834 <open+0xb0>
    f828:	10800304 	addi	r2,r2,12
    f82c:	29400304 	addi	r5,r5,12
    f830:	40c01436 	bltu	r8,r3,f884 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f834:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f838:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f83c:	31fffa1e 	bne	r6,r7,f828 <__alt_data_end+0xff00f828>
    f840:	29800017 	ldw	r6,0(r5)
    f844:	303ff80e 	bge	r6,zero,f828 <__alt_data_end+0xff00f828>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f848:	20bff726 	beq	r4,r2,f828 <__alt_data_end+0xff00f828>
    f84c:	04000344 	movi	r16,13
    f850:	003fdf06 	br	f7d0 <__alt_data_end+0xff00f7d0>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f854:	1009883a 	mov	r4,r2
    f858:	000fb500 	call	fb50 <alt_get_fd>
    f85c:	1027883a 	mov	r19,r2
    f860:	103fda16 	blt	r2,zero,f7cc <__alt_data_end+0xff00f7cc>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f864:	99000324 	muli	r4,r19,12
    f868:	00800074 	movhi	r2,1
    f86c:	10846d04 	addi	r2,r2,4532
    f870:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f874:	00900034 	movhi	r2,16384
    f878:	10bfffc4 	addi	r2,r2,-1
    f87c:	8084703a 	and	r2,r16,r2
    f880:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f884:	a0800317 	ldw	r2,12(r20)
    f888:	10000f26 	beq	r2,zero,f8c8 <open+0x144>
    f88c:	900f883a 	mov	r7,r18
    f890:	800d883a 	mov	r6,r16
    f894:	880b883a 	mov	r5,r17
    f898:	103ee83a 	callr	r2
    f89c:	1007883a 	mov	r3,r2
    f8a0:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f8a4:	18001316 	blt	r3,zero,f8f4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    f8a8:	dfc00517 	ldw	ra,20(sp)
    f8ac:	dd000417 	ldw	r20,16(sp)
    f8b0:	dcc00317 	ldw	r19,12(sp)
    f8b4:	dc800217 	ldw	r18,8(sp)
    f8b8:	dc400117 	ldw	r17,4(sp)
    f8bc:	dc000017 	ldw	r16,0(sp)
    f8c0:	dec00604 	addi	sp,sp,24
    f8c4:	f800283a 	ret
    f8c8:	9805883a 	mov	r2,r19
    f8cc:	003ff606 	br	f8a8 <__alt_data_end+0xff00f8a8>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f8d0:	8809883a 	mov	r4,r17
    f8d4:	000faa40 	call	faa4 <alt_find_file>
    f8d8:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f8dc:	103fdd1e 	bne	r2,zero,f854 <__alt_data_end+0xff00f854>
    f8e0:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f8e4:	04ffffc4 	movi	r19,-1
    f8e8:	003fb906 	br	f7d0 <__alt_data_end+0xff00f7d0>
    f8ec:	d0a6dc04 	addi	r2,gp,-25744
    f8f0:	003fbc06 	br	f7e4 <__alt_data_end+0xff00f7e4>
    f8f4:	00e1c83a 	sub	r16,zero,r3
    f8f8:	003fb506 	br	f7d0 <__alt_data_end+0xff00f7d0>

0000f8fc <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8fc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f900:	00bfff84 	movi	r2,-2
    f904:	1884703a 	and	r2,r3,r2
    f908:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f90c:	21400117 	ldw	r5,4(r4)
    f910:	20800017 	ldw	r2,0(r4)
    f914:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    f918:	21400117 	ldw	r5,4(r4)
    f91c:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f920:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    f924:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f928:	1801703a 	wrctl	status,r3
    f92c:	f800283a 	ret

0000f930 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f930:	d0a6e617 	ldw	r2,-25704(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f934:	defffa04 	addi	sp,sp,-24
    f938:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f93c:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f940:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f944:	dc800215 	stw	r18,8(sp)
    f948:	dfc00515 	stw	ra,20(sp)
    f94c:	dd000415 	stw	r20,16(sp)
    f950:	dcc00315 	stw	r19,12(sp)
    f954:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f958:	d4a01004 	addi	r18,gp,-32704

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f95c:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f960:	84801126 	beq	r16,r18,f9a8 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    f964:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f968:	053fff84 	movi	r20,-2
    f96c:	00000606 	br	f988 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    f970:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f974:	d0e6e617 	ldw	r3,-25704(gp)
    f978:	80800217 	ldw	r2,8(r16)
    f97c:	1880122e 	bgeu	r3,r2,f9c8 <alt_tick+0x98>
    f980:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f984:	8c800826 	beq	r17,r18,f9a8 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f988:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    f98c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f990:	103ff826 	beq	r2,zero,f974 <__alt_data_end+0xff00f974>
    f994:	d0a6e617 	ldw	r2,-25704(gp)
    f998:	103ff526 	beq	r2,zero,f970 <__alt_data_end+0xff00f970>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f99c:	d0a6e617 	ldw	r2,-25704(gp)
    f9a0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f9a4:	8cbff81e 	bne	r17,r18,f988 <__alt_data_end+0xff00f988>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    f9a8:	dfc00517 	ldw	ra,20(sp)
    f9ac:	dd000417 	ldw	r20,16(sp)
    f9b0:	dcc00317 	ldw	r19,12(sp)
    f9b4:	dc800217 	ldw	r18,8(sp)
    f9b8:	dc400117 	ldw	r17,4(sp)
    f9bc:	dc000017 	ldw	r16,0(sp)
    f9c0:	dec00604 	addi	sp,sp,24
    f9c4:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    f9c8:	80800317 	ldw	r2,12(r16)
    f9cc:	81000517 	ldw	r4,20(r16)
    f9d0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f9d4:	10000726 	beq	r2,zero,f9f4 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f9d8:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f9dc:	d126e617 	ldw	r4,-25704(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f9e0:	10c5883a 	add	r2,r2,r3
    f9e4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f9e8:	113fe52e 	bgeu	r2,r4,f980 <__alt_data_end+0xff00f980>
        {
          alarm->rollover = 1;
    f9ec:	84c00405 	stb	r19,16(r16)
    f9f0:	003fe306 	br	f980 <__alt_data_end+0xff00f980>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9f4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9f8:	1506703a 	and	r3,r2,r20
    f9fc:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fa00:	81000117 	ldw	r4,4(r16)
    fa04:	80c00017 	ldw	r3,0(r16)
    fa08:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    fa0c:	81000117 	ldw	r4,4(r16)
    fa10:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fa14:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    fa18:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa1c:	1001703a 	wrctl	status,r2
    fa20:	003fd706 	br	f980 <__alt_data_end+0xff00f980>

0000fa24 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    fa24:	000170fa 	wrctl	ienable,zero
    fa28:	f800283a 	ret

0000fa2c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa2c:	defffb04 	addi	sp,sp,-20
    fa30:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    fa34:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa38:	dc400115 	stw	r17,4(sp)
    fa3c:	2823883a 	mov	r17,r5
    fa40:	dcc00315 	stw	r19,12(sp)
    fa44:	dfc00415 	stw	ra,16(sp)
    fa48:	dc800215 	stw	r18,8(sp)
    fa4c:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    fa50:	000265c0 	call	265c <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa54:	8c000b26 	beq	r17,r16,fa84 <alt_find_dev+0x58>
    fa58:	14800044 	addi	r18,r2,1
    fa5c:	00000206 	br	fa68 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fa60:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa64:	8c000726 	beq	r17,r16,fa84 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fa68:	81000217 	ldw	r4,8(r16)
    fa6c:	900d883a 	mov	r6,r18
    fa70:	980b883a 	mov	r5,r19
    fa74:	000fe600 	call	fe60 <memcmp>
    fa78:	103ff91e 	bne	r2,zero,fa60 <__alt_data_end+0xff00fa60>
    fa7c:	8005883a 	mov	r2,r16
    fa80:	00000106 	br	fa88 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fa84:	0005883a 	mov	r2,zero
}
    fa88:	dfc00417 	ldw	ra,16(sp)
    fa8c:	dcc00317 	ldw	r19,12(sp)
    fa90:	dc800217 	ldw	r18,8(sp)
    fa94:	dc400117 	ldw	r17,4(sp)
    fa98:	dc000017 	ldw	r16,0(sp)
    fa9c:	dec00504 	addi	sp,sp,20
    faa0:	f800283a 	ret

0000faa4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    faa4:	defffa04 	addi	sp,sp,-24
    faa8:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    faac:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fab0:	dd000415 	stw	r20,16(sp)
    fab4:	dfc00515 	stw	ra,20(sp)
    fab8:	dcc00315 	stw	r19,12(sp)
    fabc:	dc800215 	stw	r18,8(sp)
    fac0:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fac4:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fac8:	85001626 	beq	r16,r20,fb24 <alt_find_file+0x80>
    facc:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fad0:	04c00bc4 	movi	r19,47
    fad4:	00000806 	br	faf8 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fad8:	9185883a 	add	r2,r18,r6
    fadc:	10800007 	ldb	r2,0(r2)
    fae0:	14c00126 	beq	r2,r19,fae8 <alt_find_file+0x44>
    fae4:	1000021e 	bne	r2,zero,faf0 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    fae8:	000fe600 	call	fe60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    faec:	10001626 	beq	r2,zero,fb48 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    faf0:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    faf4:	85000b26 	beq	r16,r20,fb24 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    faf8:	84400217 	ldw	r17,8(r16)
    fafc:	8809883a 	mov	r4,r17
    fb00:	000265c0 	call	265c <strlen>
    fb04:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    fb08:	8885883a 	add	r2,r17,r2
    fb0c:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fb10:	900b883a 	mov	r5,r18
    fb14:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fb18:	14ffef1e 	bne	r2,r19,fad8 <__alt_data_end+0xff00fad8>
    {
      len -= 1;
    fb1c:	31bfffc4 	addi	r6,r6,-1
    fb20:	003fed06 	br	fad8 <__alt_data_end+0xff00fad8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fb24:	0005883a 	mov	r2,zero
}
    fb28:	dfc00517 	ldw	ra,20(sp)
    fb2c:	dd000417 	ldw	r20,16(sp)
    fb30:	dcc00317 	ldw	r19,12(sp)
    fb34:	dc800217 	ldw	r18,8(sp)
    fb38:	dc400117 	ldw	r17,4(sp)
    fb3c:	dc000017 	ldw	r16,0(sp)
    fb40:	dec00604 	addi	sp,sp,24
    fb44:	f800283a 	ret
    fb48:	8005883a 	mov	r2,r16
    fb4c:	003ff606 	br	fb28 <__alt_data_end+0xff00fb28>

0000fb50 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fb50:	01c00074 	movhi	r7,1
    fb54:	39c46d04 	addi	r7,r7,4532
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fb58:	0005883a 	mov	r2,zero
    fb5c:	3807883a 	mov	r3,r7
    fb60:	01800804 	movi	r6,32
    fb64:	00000206 	br	fb70 <alt_get_fd+0x20>
    fb68:	10800044 	addi	r2,r2,1
    fb6c:	11800a26 	beq	r2,r6,fb98 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fb70:	19400017 	ldw	r5,0(r3)
    fb74:	18c00304 	addi	r3,r3,12
    fb78:	283ffb1e 	bne	r5,zero,fb68 <__alt_data_end+0xff00fb68>
    {
      alt_fd_list[i].dev = dev;
    fb7c:	10c00324 	muli	r3,r2,12
    fb80:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fb84:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fb88:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fb8c:	1880030e 	bge	r3,r2,fb9c <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fb90:	d0a00815 	stw	r2,-32736(gp)
    fb94:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    fb98:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fb9c:	f800283a 	ret

0000fba0 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fba0:	00840004 	movi	r2,4096
    fba4:	1140012e 	bgeu	r2,r5,fbac <alt_icache_flush+0xc>
    fba8:	100b883a 	mov	r5,r2
    fbac:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fbb0:	2005883a 	mov	r2,r4
    fbb4:	2140092e 	bgeu	r4,r5,fbdc <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fbb8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fbbc:	10800804 	addi	r2,r2,32
    fbc0:	117ffd36 	bltu	r2,r5,fbb8 <__alt_data_end+0xff00fbb8>
    fbc4:	0104303a 	nor	r2,zero,r4
    fbc8:	2885883a 	add	r2,r5,r2
    fbcc:	1004d17a 	srli	r2,r2,5
    fbd0:	10800044 	addi	r2,r2,1
    fbd4:	1004917a 	slli	r2,r2,5
    fbd8:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fbdc:	210007cc 	andi	r4,r4,31
    fbe0:	20000126 	beq	r4,zero,fbe8 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fbe4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fbe8:	0000203a 	flushp
    fbec:	f800283a 	ret

0000fbf0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fbf0:	213ffe84 	addi	r4,r4,-6
    fbf4:	008003c4 	movi	r2,15
    fbf8:	11001636 	bltu	r2,r4,fc54 <alt_exception_cause_generated_bad_addr+0x64>
    fbfc:	200890ba 	slli	r4,r4,2
    fc00:	00800074 	movhi	r2,1
    fc04:	10bf0504 	addi	r2,r2,-1004
    fc08:	2089883a 	add	r4,r4,r2
    fc0c:	20800017 	ldw	r2,0(r4)
    fc10:	1000683a 	jmp	r2
    fc14:	0000fc5c 	xori	zero,zero,1009
    fc18:	0000fc5c 	xori	zero,zero,1009
    fc1c:	0000fc54 	movui	zero,1009
    fc20:	0000fc54 	movui	zero,1009
    fc24:	0000fc54 	movui	zero,1009
    fc28:	0000fc5c 	xori	zero,zero,1009
    fc2c:	0000fc54 	movui	zero,1009
    fc30:	0000fc54 	movui	zero,1009
    fc34:	0000fc5c 	xori	zero,zero,1009
    fc38:	0000fc5c 	xori	zero,zero,1009
    fc3c:	0000fc54 	movui	zero,1009
    fc40:	0000fc5c 	xori	zero,zero,1009
    fc44:	0000fc54 	movui	zero,1009
    fc48:	0000fc54 	movui	zero,1009
    fc4c:	0000fc54 	movui	zero,1009
    fc50:	0000fc5c 	xori	zero,zero,1009
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fc54:	0005883a 	mov	r2,zero
    fc58:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fc5c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fc60:	f800283a 	ret

0000fc64 <atexit>:
    fc64:	200b883a 	mov	r5,r4
    fc68:	000f883a 	mov	r7,zero
    fc6c:	000d883a 	mov	r6,zero
    fc70:	0009883a 	mov	r4,zero
    fc74:	000fedc1 	jmpi	fedc <__register_exitproc>

0000fc78 <exit>:
    fc78:	defffe04 	addi	sp,sp,-8
    fc7c:	000b883a 	mov	r5,zero
    fc80:	dc000015 	stw	r16,0(sp)
    fc84:	dfc00115 	stw	ra,4(sp)
    fc88:	2021883a 	mov	r16,r4
    fc8c:	000fff40 	call	fff4 <__call_exitprocs>
    fc90:	00800074 	movhi	r2,1
    fc94:	1088f304 	addi	r2,r2,9164
    fc98:	11000017 	ldw	r4,0(r2)
    fc9c:	20800f17 	ldw	r2,60(r4)
    fca0:	10000126 	beq	r2,zero,fca8 <exit+0x30>
    fca4:	103ee83a 	callr	r2
    fca8:	8009883a 	mov	r4,r16
    fcac:	00101740 	call	10174 <_exit>

0000fcb0 <memalign>:
    fcb0:	00800074 	movhi	r2,1
    fcb4:	1088f404 	addi	r2,r2,9168
    fcb8:	280d883a 	mov	r6,r5
    fcbc:	200b883a 	mov	r5,r4
    fcc0:	11000017 	ldw	r4,0(r2)
    fcc4:	000fcc81 	jmpi	fcc8 <_memalign_r>

0000fcc8 <_memalign_r>:
    fcc8:	00800204 	movi	r2,8
    fccc:	1140532e 	bgeu	r2,r5,fe1c <_memalign_r+0x154>
    fcd0:	defffa04 	addi	sp,sp,-24
    fcd4:	dd000415 	stw	r20,16(sp)
    fcd8:	dc400115 	stw	r17,4(sp)
    fcdc:	dfc00515 	stw	ra,20(sp)
    fce0:	dcc00315 	stw	r19,12(sp)
    fce4:	dc800215 	stw	r18,8(sp)
    fce8:	dc000015 	stw	r16,0(sp)
    fcec:	008003c4 	movi	r2,15
    fcf0:	2823883a 	mov	r17,r5
    fcf4:	2029883a 	mov	r20,r4
    fcf8:	11400136 	bltu	r2,r5,fd00 <_memalign_r+0x38>
    fcfc:	04400404 	movi	r17,16
    fd00:	308002c4 	addi	r2,r6,11
    fd04:	00c00584 	movi	r3,22
    fd08:	18803e2e 	bgeu	r3,r2,fe04 <_memalign_r+0x13c>
    fd0c:	04bffe04 	movi	r18,-8
    fd10:	14a4703a 	and	r18,r2,r18
    fd14:	90003d16 	blt	r18,zero,fe0c <_memalign_r+0x144>
    fd18:	91803c36 	bltu	r18,r6,fe0c <_memalign_r+0x144>
    fd1c:	89400404 	addi	r5,r17,16
    fd20:	2c8b883a 	add	r5,r5,r18
    fd24:	a009883a 	mov	r4,r20
    fd28:	0001cbc0 	call	1cbc <_malloc_r>
    fd2c:	1027883a 	mov	r19,r2
    fd30:	10004926 	beq	r2,zero,fe58 <_memalign_r+0x190>
    fd34:	a009883a 	mov	r4,r20
    fd38:	000e9440 	call	e944 <__malloc_lock>
    fd3c:	880b883a 	mov	r5,r17
    fd40:	9809883a 	mov	r4,r19
    fd44:	9c3ffe04 	addi	r16,r19,-8
    fd48:	000bf1c0 	call	bf1c <__umodsi3>
    fd4c:	10001c26 	beq	r2,zero,fdc0 <_memalign_r+0xf8>
    fd50:	88bfffc4 	addi	r2,r17,-1
    fd54:	9887883a 	add	r3,r19,r2
    fd58:	0445c83a 	sub	r2,zero,r17
    fd5c:	1884703a 	and	r2,r3,r2
    fd60:	10bffe04 	addi	r2,r2,-8
    fd64:	1409c83a 	sub	r4,r2,r16
    fd68:	014003c4 	movi	r5,15
    fd6c:	8007883a 	mov	r3,r16
    fd70:	29002c0e 	bge	r5,r4,fe24 <_memalign_r+0x15c>
    fd74:	1021883a 	mov	r16,r2
    fd78:	993fff17 	ldw	r4,-4(r19)
    fd7c:	00bfff04 	movi	r2,-4
    fd80:	80c7c83a 	sub	r3,r16,r3
    fd84:	2084703a 	and	r2,r4,r2
    fd88:	10c5c83a 	sub	r2,r2,r3
    fd8c:	11000054 	ori	r4,r2,1
    fd90:	81000115 	stw	r4,4(r16)
    fd94:	8085883a 	add	r2,r16,r2
    fd98:	11800117 	ldw	r6,4(r2)
    fd9c:	980b883a 	mov	r5,r19
    fda0:	a009883a 	mov	r4,r20
    fda4:	31800054 	ori	r6,r6,1
    fda8:	11800115 	stw	r6,4(r2)
    fdac:	98bfff17 	ldw	r2,-4(r19)
    fdb0:	1080004c 	andi	r2,r2,1
    fdb4:	10c6b03a 	or	r3,r2,r3
    fdb8:	98ffff15 	stw	r3,-4(r19)
    fdbc:	0006b0c0 	call	6b0c <_free_r>
    fdc0:	80c00117 	ldw	r3,4(r16)
    fdc4:	00bfff04 	movi	r2,-4
    fdc8:	1884703a 	and	r2,r3,r2
    fdcc:	1485c83a 	sub	r2,r2,r18
    fdd0:	00c003c4 	movi	r3,15
    fdd4:	18801516 	blt	r3,r2,fe2c <_memalign_r+0x164>
    fdd8:	a009883a 	mov	r4,r20
    fddc:	000e9480 	call	e948 <__malloc_unlock>
    fde0:	80800204 	addi	r2,r16,8
    fde4:	dfc00517 	ldw	ra,20(sp)
    fde8:	dd000417 	ldw	r20,16(sp)
    fdec:	dcc00317 	ldw	r19,12(sp)
    fdf0:	dc800217 	ldw	r18,8(sp)
    fdf4:	dc400117 	ldw	r17,4(sp)
    fdf8:	dc000017 	ldw	r16,0(sp)
    fdfc:	dec00604 	addi	sp,sp,24
    fe00:	f800283a 	ret
    fe04:	04800404 	movi	r18,16
    fe08:	91bfc42e 	bgeu	r18,r6,fd1c <__alt_data_end+0xff00fd1c>
    fe0c:	00800304 	movi	r2,12
    fe10:	a0800015 	stw	r2,0(r20)
    fe14:	0005883a 	mov	r2,zero
    fe18:	003ff206 	br	fde4 <__alt_data_end+0xff00fde4>
    fe1c:	300b883a 	mov	r5,r6
    fe20:	0001cbc1 	jmpi	1cbc <_malloc_r>
    fe24:	1461883a 	add	r16,r2,r17
    fe28:	003fd306 	br	fd78 <__alt_data_end+0xff00fd78>
    fe2c:	848b883a 	add	r5,r16,r18
    fe30:	10800054 	ori	r2,r2,1
    fe34:	28800115 	stw	r2,4(r5)
    fe38:	80800117 	ldw	r2,4(r16)
    fe3c:	29400204 	addi	r5,r5,8
    fe40:	a009883a 	mov	r4,r20
    fe44:	1080004c 	andi	r2,r2,1
    fe48:	14a4b03a 	or	r18,r2,r18
    fe4c:	84800115 	stw	r18,4(r16)
    fe50:	0006b0c0 	call	6b0c <_free_r>
    fe54:	003fe006 	br	fdd8 <__alt_data_end+0xff00fdd8>
    fe58:	0005883a 	mov	r2,zero
    fe5c:	003fe106 	br	fde4 <__alt_data_end+0xff00fde4>

0000fe60 <memcmp>:
    fe60:	01c000c4 	movi	r7,3
    fe64:	3980192e 	bgeu	r7,r6,fecc <memcmp+0x6c>
    fe68:	2144b03a 	or	r2,r4,r5
    fe6c:	11c4703a 	and	r2,r2,r7
    fe70:	10000f26 	beq	r2,zero,feb0 <memcmp+0x50>
    fe74:	20800003 	ldbu	r2,0(r4)
    fe78:	28c00003 	ldbu	r3,0(r5)
    fe7c:	10c0151e 	bne	r2,r3,fed4 <memcmp+0x74>
    fe80:	31bfff84 	addi	r6,r6,-2
    fe84:	01ffffc4 	movi	r7,-1
    fe88:	00000406 	br	fe9c <memcmp+0x3c>
    fe8c:	20800003 	ldbu	r2,0(r4)
    fe90:	28c00003 	ldbu	r3,0(r5)
    fe94:	31bfffc4 	addi	r6,r6,-1
    fe98:	10c00e1e 	bne	r2,r3,fed4 <memcmp+0x74>
    fe9c:	21000044 	addi	r4,r4,1
    fea0:	29400044 	addi	r5,r5,1
    fea4:	31fff91e 	bne	r6,r7,fe8c <__alt_data_end+0xff00fe8c>
    fea8:	0005883a 	mov	r2,zero
    feac:	f800283a 	ret
    feb0:	20c00017 	ldw	r3,0(r4)
    feb4:	28800017 	ldw	r2,0(r5)
    feb8:	18bfee1e 	bne	r3,r2,fe74 <__alt_data_end+0xff00fe74>
    febc:	31bfff04 	addi	r6,r6,-4
    fec0:	21000104 	addi	r4,r4,4
    fec4:	29400104 	addi	r5,r5,4
    fec8:	39bff936 	bltu	r7,r6,feb0 <__alt_data_end+0xff00feb0>
    fecc:	303fe91e 	bne	r6,zero,fe74 <__alt_data_end+0xff00fe74>
    fed0:	003ff506 	br	fea8 <__alt_data_end+0xff00fea8>
    fed4:	10c5c83a 	sub	r2,r2,r3
    fed8:	f800283a 	ret

0000fedc <__register_exitproc>:
    fedc:	defffa04 	addi	sp,sp,-24
    fee0:	dc000315 	stw	r16,12(sp)
    fee4:	04000074 	movhi	r16,1
    fee8:	8408f304 	addi	r16,r16,9164
    feec:	80c00017 	ldw	r3,0(r16)
    fef0:	dc400415 	stw	r17,16(sp)
    fef4:	dfc00515 	stw	ra,20(sp)
    fef8:	18805217 	ldw	r2,328(r3)
    fefc:	2023883a 	mov	r17,r4
    ff00:	10003726 	beq	r2,zero,ffe0 <__register_exitproc+0x104>
    ff04:	10c00117 	ldw	r3,4(r2)
    ff08:	010007c4 	movi	r4,31
    ff0c:	20c00e16 	blt	r4,r3,ff48 <__register_exitproc+0x6c>
    ff10:	1a000044 	addi	r8,r3,1
    ff14:	8800221e 	bne	r17,zero,ffa0 <__register_exitproc+0xc4>
    ff18:	18c00084 	addi	r3,r3,2
    ff1c:	18c7883a 	add	r3,r3,r3
    ff20:	18c7883a 	add	r3,r3,r3
    ff24:	12000115 	stw	r8,4(r2)
    ff28:	10c7883a 	add	r3,r2,r3
    ff2c:	19400015 	stw	r5,0(r3)
    ff30:	0005883a 	mov	r2,zero
    ff34:	dfc00517 	ldw	ra,20(sp)
    ff38:	dc400417 	ldw	r17,16(sp)
    ff3c:	dc000317 	ldw	r16,12(sp)
    ff40:	dec00604 	addi	sp,sp,24
    ff44:	f800283a 	ret
    ff48:	00800034 	movhi	r2,0
    ff4c:	10872504 	addi	r2,r2,7316
    ff50:	10002626 	beq	r2,zero,ffec <__register_exitproc+0x110>
    ff54:	01006404 	movi	r4,400
    ff58:	d9400015 	stw	r5,0(sp)
    ff5c:	d9800115 	stw	r6,4(sp)
    ff60:	d9c00215 	stw	r7,8(sp)
    ff64:	0001c940 	call	1c94 <malloc>
    ff68:	d9400017 	ldw	r5,0(sp)
    ff6c:	d9800117 	ldw	r6,4(sp)
    ff70:	d9c00217 	ldw	r7,8(sp)
    ff74:	10001d26 	beq	r2,zero,ffec <__register_exitproc+0x110>
    ff78:	81000017 	ldw	r4,0(r16)
    ff7c:	10000115 	stw	zero,4(r2)
    ff80:	02000044 	movi	r8,1
    ff84:	22405217 	ldw	r9,328(r4)
    ff88:	0007883a 	mov	r3,zero
    ff8c:	12400015 	stw	r9,0(r2)
    ff90:	20805215 	stw	r2,328(r4)
    ff94:	10006215 	stw	zero,392(r2)
    ff98:	10006315 	stw	zero,396(r2)
    ff9c:	883fde26 	beq	r17,zero,ff18 <__alt_data_end+0xff00ff18>
    ffa0:	18c9883a 	add	r4,r3,r3
    ffa4:	2109883a 	add	r4,r4,r4
    ffa8:	1109883a 	add	r4,r2,r4
    ffac:	21802215 	stw	r6,136(r4)
    ffb0:	01800044 	movi	r6,1
    ffb4:	12406217 	ldw	r9,392(r2)
    ffb8:	30cc983a 	sll	r6,r6,r3
    ffbc:	4992b03a 	or	r9,r9,r6
    ffc0:	12406215 	stw	r9,392(r2)
    ffc4:	21c04215 	stw	r7,264(r4)
    ffc8:	01000084 	movi	r4,2
    ffcc:	893fd21e 	bne	r17,r4,ff18 <__alt_data_end+0xff00ff18>
    ffd0:	11006317 	ldw	r4,396(r2)
    ffd4:	218cb03a 	or	r6,r4,r6
    ffd8:	11806315 	stw	r6,396(r2)
    ffdc:	003fce06 	br	ff18 <__alt_data_end+0xff00ff18>
    ffe0:	18805304 	addi	r2,r3,332
    ffe4:	18805215 	stw	r2,328(r3)
    ffe8:	003fc606 	br	ff04 <__alt_data_end+0xff00ff04>
    ffec:	00bfffc4 	movi	r2,-1
    fff0:	003fd006 	br	ff34 <__alt_data_end+0xff00ff34>

0000fff4 <__call_exitprocs>:
    fff4:	defff504 	addi	sp,sp,-44
    fff8:	df000915 	stw	fp,36(sp)
    fffc:	dd400615 	stw	r21,24(sp)
   10000:	dc800315 	stw	r18,12(sp)
   10004:	dfc00a15 	stw	ra,40(sp)
   10008:	ddc00815 	stw	r23,32(sp)
   1000c:	dd800715 	stw	r22,28(sp)
   10010:	dd000515 	stw	r20,20(sp)
   10014:	dcc00415 	stw	r19,16(sp)
   10018:	dc400215 	stw	r17,8(sp)
   1001c:	dc000115 	stw	r16,4(sp)
   10020:	d9000015 	stw	r4,0(sp)
   10024:	2839883a 	mov	fp,r5
   10028:	04800044 	movi	r18,1
   1002c:	057fffc4 	movi	r21,-1
   10030:	00800074 	movhi	r2,1
   10034:	1088f304 	addi	r2,r2,9164
   10038:	12000017 	ldw	r8,0(r2)
   1003c:	45005217 	ldw	r20,328(r8)
   10040:	44c05204 	addi	r19,r8,328
   10044:	a0001c26 	beq	r20,zero,100b8 <__call_exitprocs+0xc4>
   10048:	a0800117 	ldw	r2,4(r20)
   1004c:	15ffffc4 	addi	r23,r2,-1
   10050:	b8000d16 	blt	r23,zero,10088 <__call_exitprocs+0x94>
   10054:	14000044 	addi	r16,r2,1
   10058:	8421883a 	add	r16,r16,r16
   1005c:	8421883a 	add	r16,r16,r16
   10060:	84402004 	addi	r17,r16,128
   10064:	a463883a 	add	r17,r20,r17
   10068:	a421883a 	add	r16,r20,r16
   1006c:	e0001e26 	beq	fp,zero,100e8 <__call_exitprocs+0xf4>
   10070:	80804017 	ldw	r2,256(r16)
   10074:	e0801c26 	beq	fp,r2,100e8 <__call_exitprocs+0xf4>
   10078:	bdffffc4 	addi	r23,r23,-1
   1007c:	843fff04 	addi	r16,r16,-4
   10080:	8c7fff04 	addi	r17,r17,-4
   10084:	bd7ff91e 	bne	r23,r21,1006c <__alt_data_end+0xff01006c>
   10088:	00800034 	movhi	r2,0
   1008c:	10872a04 	addi	r2,r2,7336
   10090:	10000926 	beq	r2,zero,100b8 <__call_exitprocs+0xc4>
   10094:	a0800117 	ldw	r2,4(r20)
   10098:	1000301e 	bne	r2,zero,1015c <__call_exitprocs+0x168>
   1009c:	a0800017 	ldw	r2,0(r20)
   100a0:	10003226 	beq	r2,zero,1016c <__call_exitprocs+0x178>
   100a4:	a009883a 	mov	r4,r20
   100a8:	98800015 	stw	r2,0(r19)
   100ac:	0001ca80 	call	1ca8 <free>
   100b0:	9d000017 	ldw	r20,0(r19)
   100b4:	a03fe41e 	bne	r20,zero,10048 <__alt_data_end+0xff010048>
   100b8:	dfc00a17 	ldw	ra,40(sp)
   100bc:	df000917 	ldw	fp,36(sp)
   100c0:	ddc00817 	ldw	r23,32(sp)
   100c4:	dd800717 	ldw	r22,28(sp)
   100c8:	dd400617 	ldw	r21,24(sp)
   100cc:	dd000517 	ldw	r20,20(sp)
   100d0:	dcc00417 	ldw	r19,16(sp)
   100d4:	dc800317 	ldw	r18,12(sp)
   100d8:	dc400217 	ldw	r17,8(sp)
   100dc:	dc000117 	ldw	r16,4(sp)
   100e0:	dec00b04 	addi	sp,sp,44
   100e4:	f800283a 	ret
   100e8:	a0800117 	ldw	r2,4(r20)
   100ec:	80c00017 	ldw	r3,0(r16)
   100f0:	10bfffc4 	addi	r2,r2,-1
   100f4:	15c01426 	beq	r2,r23,10148 <__call_exitprocs+0x154>
   100f8:	80000015 	stw	zero,0(r16)
   100fc:	183fde26 	beq	r3,zero,10078 <__alt_data_end+0xff010078>
   10100:	95c8983a 	sll	r4,r18,r23
   10104:	a0806217 	ldw	r2,392(r20)
   10108:	a5800117 	ldw	r22,4(r20)
   1010c:	2084703a 	and	r2,r4,r2
   10110:	10000b26 	beq	r2,zero,10140 <__call_exitprocs+0x14c>
   10114:	a0806317 	ldw	r2,396(r20)
   10118:	2088703a 	and	r4,r4,r2
   1011c:	20000c1e 	bne	r4,zero,10150 <__call_exitprocs+0x15c>
   10120:	89400017 	ldw	r5,0(r17)
   10124:	d9000017 	ldw	r4,0(sp)
   10128:	183ee83a 	callr	r3
   1012c:	a0800117 	ldw	r2,4(r20)
   10130:	15bfbf1e 	bne	r2,r22,10030 <__alt_data_end+0xff010030>
   10134:	98800017 	ldw	r2,0(r19)
   10138:	153fcf26 	beq	r2,r20,10078 <__alt_data_end+0xff010078>
   1013c:	003fbc06 	br	10030 <__alt_data_end+0xff010030>
   10140:	183ee83a 	callr	r3
   10144:	003ff906 	br	1012c <__alt_data_end+0xff01012c>
   10148:	a5c00115 	stw	r23,4(r20)
   1014c:	003feb06 	br	100fc <__alt_data_end+0xff0100fc>
   10150:	89000017 	ldw	r4,0(r17)
   10154:	183ee83a 	callr	r3
   10158:	003ff406 	br	1012c <__alt_data_end+0xff01012c>
   1015c:	a0800017 	ldw	r2,0(r20)
   10160:	a027883a 	mov	r19,r20
   10164:	1029883a 	mov	r20,r2
   10168:	003fb606 	br	10044 <__alt_data_end+0xff010044>
   1016c:	0005883a 	mov	r2,zero
   10170:	003ffb06 	br	10160 <__alt_data_end+0xff010160>

00010174 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10174:	20000226 	beq	r4,zero,10180 <_exit+0xc>
    ALT_SIM_FAIL();
   10178:	002af070 	cmpltui	zero,zero,43969
   1017c:	003fff06 	br	1017c <__alt_data_end+0xff01017c>
  } else {
    ALT_SIM_PASS();
   10180:	002af0b0 	cmpltui	zero,zero,43970
   10184:	003ffd06 	br	1017c <__alt_data_end+0xff01017c>
