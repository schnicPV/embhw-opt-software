
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010668 memsz 0x00010668 flags r-x
    LOAD off    0x00011688 vaddr 0x00010688 paddr 0x00012274 align 2**12
         filesz 0x00001bec memsz 0x00001bec flags rw-
    LOAD off    0x00013e60 vaddr 0x00013e60 paddr 0x00013e60 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fd44  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b8  0000fed0  0000fed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bec  00010688  00012274  00011688  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00013e60  00013e60  00013e60  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00013ff0  00013ff0  00013274  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013274  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001050  00000000  00000000  00013298  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027364  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a218  00000000  00000000  0003b64c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c6dc  00000000  00000000  00045864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021b4  00000000  00000000  00051f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ddf  00000000  00000000  000540f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001affb  00000000  00000000  00057ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00072ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c30  00000000  00000000  00072f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007846e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00078471  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007847d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007847e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007847f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00078483  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00078487  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007848b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00078494  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007849d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000784a6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  000784b1  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  000784ff  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007dfd7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
0000fed0 l    d  .rodata	00000000 .rodata
00010688 l    d  .rwdata	00000000 .rwdata
00013e60 l    d  .bss	00000000 .bss
00013ff0 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001c4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-divtable.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000103e6 l     O .rodata	00000010 zeroes.4404
00004a74 l     F .text	000000bc __sbprintf
000103f6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c84 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000067b4 l     F .text	00000008 __fp_unlock
000067c8 l     F .text	0000019c __sinit.part.1
00006964 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010b90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00010fd4 l     O .rwdata	00000020 lc_ctype_charset
00010fb4 l     O .rwdata	00000020 lc_message_charset
00010ff4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010428 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009500 l     F .text	000000fc __sprint_r.part.0
0001055c l     O .rodata	00000010 blanks.4348
0001054c l     O .rodata	00000010 zeroes.4349
0000aa8c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e650 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012264 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000111d4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ebcc l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000ec18 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f14c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013ec4 g     O .bss	00000004 alt_instruction_exception_handler
00008b98 g     F .text	00000074 _mprec_log10
00008c84 g     F .text	0000008c __any_on
0000b028 g     F .text	00000054 _isatty_r
00010434 g     O .rodata	00000028 __mprec_tinytens
0000e89c g     F .text	00000060 alt_main
000026a0 g     F .text	000000c0 _puts_r
00013ef0 g     O .bss	00000100 alt_irq
0000b07c g     F .text	00000060 _lseek_r
0001038b g     O .rodata	00000009 gy_array
00012274 g       *ABS*	00000000 __flash_rwdata_start
0000d0c0 g     F .text	00000088 .hidden __eqdf2
00013ff0 g       *ABS*	00000000 __alt_heap_start
00002664 g     F .text	0000003c printf
0000b294 g     F .text	0000009c _wcrtomb_r
000093c0 g     F .text	0000005c __sseek
00006b04 g     F .text	00000010 __sinit
0000b13c g     F .text	00000140 __swbuf_r
000075cc g     F .text	0000007c _setlocale_r
0000696c g     F .text	00000068 __sfmoreglue
0000e900 g     F .text	00000004 __malloc_unlock
000009c4 g     F .text	00000014 LCD_Write_Command
00013e70 g     O .bss	00000004 sobel_width
00013eb0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a90 g     F .text	0000015c memmove
000009d8 g     F .text	00000014 LCD_Write_Data
00006aec g     F .text	00000018 _cleanup
00007d14 g     F .text	000000a8 _Balloc
0000d148 g     F .text	000000dc .hidden __gtdf2
0000f91c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004e0 g     F .text	00000024 cam_get_xsize
0000afcc g     F .text	0000005c _fstat_r
00013e94 g     O .bss	00000004 errno
0000933c g     F .text	00000008 __seofread
00013ea8 g     O .bss	00000004 alt_argv
0001a234 g       *ABS*	00000000 _gp
0000ea3c g     F .text	00000004 usleep
000005a0 g     F .text	00000074 cam_set_image_pointer
0001102c g     O .rwdata	00000180 alt_fd_list
00001c2c g     F .text	00000010 vga_set_pointer
0000f924 g     F .text	00000078 alt_find_dev
00007948 g     F .text	00000148 memcpy
000067bc g     F .text	0000000c _cleanup_r
0000e3ac g     F .text	000000dc .hidden __floatsidf
0000f578 g     F .text	00000104 alt_io_redirect
0000d224 g     F .text	000000f4 .hidden __ltdf2
0000fed0 g       *ABS*	00000000 __DTOR_END__
00002760 g     F .text	00000014 puts
0000fae8 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00009274 g     F .text	00000074 __fpclassifyd
00008af4 g     F .text	000000a4 __ratio
0000aa70 g     F .text	0000001c __vfiprintf_internal
0000ee58 g     F .text	00000154 altera_avalon_jtag_uart_read
00001e00 g     F .text	00000014 malloc
00002634 g     F .text	00000030 _printf_r
00000818 g     F .text	00000008 get_grayscale_picture
00001d44 g     F .text	00000064 .hidden __udivsi3
0000ff30 g     O .rodata	00000128 lens_roll_off_tbl
000001c8 g     F .text	00000318 init_camera
0000e6d0 g     F .text	00000084 isatty
00010484 g     O .rodata	000000c8 __mprec_tens
00007648 g     F .text	0000000c __locale_charset
0000fa98 g     F .text	00000050 alt_icache_flush
00013e90 g     O .bss	00000004 __malloc_top_pad
00012244 g     O .rwdata	00000004 __mb_cur_max
00007678 g     F .text	0000000c _localeconv_r
00001628 g     F .text	00000138 sobel_x
00008120 g     F .text	0000003c __i2b
00006f88 g     F .text	000004bc __sfvwrite_r
000009ec g     F .text	00000414 init_LCD
00002774 g     F .text	00000054 _sbrk_r
00000528 g     F .text	00000078 cam_get_profiling
0000b0dc g     F .text	00000060 _read_r
00013e74 g     O .bss	00000004 sobel_result
0001224c g     O .rwdata	00000004 alt_max_fd
0000acc0 g     F .text	000000f0 _fclose_r
00006784 g     F .text	00000030 fflush
00013e8c g     O .bss	00000004 __malloc_max_sbrked_mem
00013e68 g     O .bss	00000004 grayscale_array
0000bf2c g     F .text	000008ac .hidden __adddf3
00000504 g     F .text	00000024 cam_get_ysize
0000889c g     F .text	0000010c __b2d
0000b9f4 g     F .text	00000538 .hidden __umoddi3
0000e820 g     F .text	0000007c lseek
000008e0 g     F .text	0000008c i2c_short_read
0001223c g     O .rwdata	00000004 _global_impure_ptr
00008d10 g     F .text	00000564 _realloc_r
00013ff0 g       *ABS*	00000000 __bss_end
0000f510 g     F .text	00000068 alt_iic_isr_register
0000f828 g     F .text	000000f4 alt_tick
0000b47c g     F .text	00000578 .hidden __udivdi3
0000af28 g     F .text	00000024 _fputwc_r
0001045c g     O .rodata	00000028 __mprec_bigtens
00007f04 g     F .text	00000104 __s2b
0000e488 g     F .text	000000a8 .hidden __floatunsidf
000085dc g     F .text	00000060 __mcmp
00006b24 g     F .text	00000018 __fp_lock_all
0000f4f8 g     F .text	00000018 alt_ic_irq_enabled
00013e60 g     O .bss	00000004 grayscape_height
0000f7f4 g     F .text	00000034 alt_alarm_stop
00013eb8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
000111ac g     O .rwdata	00000028 alt_dev_null
00000e8c g     F .text	00000078 transfer_LCD_with_dma
0000f340 g     F .text	00000004 alt_dcache_flush_all
00008008 g     F .text	00000068 __hi0bits
0000e32c g     F .text	00000080 .hidden __fixdfsi
00012274 g       *ABS*	00000000 __ram_rwdata_end
00012250 g     O .rwdata	00000008 alt_dev_list
0000ea40 g     F .text	000000c4 write
0000f240 g     F .text	00000008 alt_timestamp_freq
00010688 g       *ABS*	00000000 __ram_rodata_end
0000e658 g     F .text	00000078 fstat
0000d224 g     F .text	000000f4 .hidden __ledf2
00008354 g     F .text	00000140 __pow5mult
00009614 g     F .text	0000145c ___vfiprintf_internal_r
00013ea0 g     O .bss	00000004 __nlocale_changed
00001da8 g     F .text	00000058 .hidden __umodsi3
00001c1c g     F .text	00000008 GetSobel_rgb
00013ff0 g       *ABS*	00000000 end
00001c24 g     F .text	00000008 GetSobelResult
00000638 g     F .text	00000020 take_picture_blocking
00000698 g     F .text	00000014 DIPSW_get_value
000019e4 g     F .text	00000184 sobel_y_with_rgb
0000ed20 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000628 g     F .text	00000010 current_image_pointer
0000fed0 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f188 g     F .text	00000048 alt_avalon_timer_sc_init
0000e530 g     F .text	00000064 .hidden __clzsi2
0000efac g     F .text	000001a0 altera_avalon_jtag_uart_write
00006b14 g     F .text	00000004 __sfp_lock_acquire
00007864 g     F .text	000000e4 memchr
00002860 g     F .text	000021f8 ___vfprintf_internal_r
00006c78 g     F .text	00000310 _free_r
00007654 g     F .text	00000010 __locale_mb_cur_max
000018c8 g     F .text	0000011c sobel_y
00010058 g     O .rodata	00000140 noise_reduction_reg_settings_array
0000fd3c g     F .text	00000180 __call_exitprocs
00013e9c g     O .bss	00000004 __mlocale_changed
00012234 g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000003c _start
00013ec0 g     O .bss	00000004 _alt_tick_rate
00008494 g     F .text	00000148 __lshift
00013ebc g     O .bss	00000004 _alt_nticks
0000e904 g     F .text	000000c8 read
0000eb24 g     F .text	0000006c alt_sys_init
00001760 g     F .text	00000168 sobel_x_with_rgb
0000fc24 g     F .text	00000118 __register_exitproc
0000815c g     F .text	000001f8 __multiply
0000ed98 g     F .text	0000004c altera_avalon_jtag_uart_close
00010688 g       *ABS*	00000000 __ram_rwdata_start
0000fed0 g       *ABS*	00000000 __ram_rodata_start
00013ec8 g     O .bss	00000028 __malloc_current_mallinfo
000089a8 g     F .text	0000014c __d2b
00013e78 g     O .bss	00000004 sobel_height
00000658 g     F .text	00000014 enable_continues_mode
0000eb90 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0000141c g     F .text	000000e4 init_sobel_arrays
0000fa48 g     F .text	00000050 alt_get_fd
0000f2c8 g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000aba8 g     F .text	00000054 _close_r
0000fba8 g     F .text	0000007c memcmp
0000ebb0 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00013ff0 g       *ABS*	00000000 __alt_stack_base
0000ebc0 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00004b30 g     F .text	00000154 __swsetup_r
0000c7d8 g     F .text	000008e8 .hidden __divdf3
000069d4 g     F .text	00000118 __sfp
00008c0c g     F .text	00000078 __copybits
00010788 g     O .rwdata	00000408 __malloc_av_
00006b20 g     F .text	00000004 __sinit_lock_release
0000d318 g     F .text	00000718 .hidden __muldf3
000092e8 g     F .text	00000054 __sread
0000f99c g     F .text	000000ac alt_find_file
0000f344 g     F .text	0000006c alt_dev_llist_insert
0000e8fc g     F .text	00000004 __malloc_lock
0000e9f0 g     F .text	0000004c sbrk
00006728 g     F .text	0000005c _fflush_r
0000abfc g     F .text	000000c4 _calloc_r
00010688 g     O .rwdata	00000100 .hidden __divsi3_table
00013e60 g       *ABS*	00000000 __bss_start
00007bec g     F .text	00000128 memset
00000f04 g     F .text	00000518 main
00013ea4 g     O .bss	00000004 alt_envp
00013e88 g     O .bss	00000004 __malloc_max_total_mem
00000808 g     F .text	00000008 get_grayscale_width
0000eba0 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b27c g     F .text	00000018 __swbuf
00013e7c g     O .bss	00000004 sobel_x_result
0000941c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000adb0 g     F .text	00000014 fclose
0000f1d0 g     F .text	0000003c alt_timestamp_start
00004e84 g     F .text	00001688 _dtoa_r
00001e28 g     F .text	0000080c _malloc_r
0000b3f0 g     F .text	00000030 __ascii_wctomb
00012260 g     O .rwdata	00000004 alt_errno
00007444 g     F .text	000000c4 _fwalk
00001c4c g     F .text	00000084 .hidden __divsi3
00006b54 g     F .text	00000124 _malloc_trim_r
0000fed0 g       *ABS*	00000000 __CTOR_END__
00013e64 g     O .bss	00000004 grayscale_width
00009424 g     F .text	000000dc strcmp
00000e00 g     F .text	0000008c transfer_LCD_no_dma
0000fed0 g       *ABS*	00000000 __flash_rodata_start
0000fed0 g       *ABS*	00000000 __DTOR_LIST__
0000d0c0 g     F .text	00000088 .hidden __nedf2
00010198 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eb04 g     F .text	00000020 alt_irq_init
0000e9cc g     F .text	00000024 alt_release_fd
00000838 g     F .text	000000a8 i2c_auto_detect
0001056c g     O .rodata	00000100 .hidden __clz_tab
00000614 g     F .text	00000014 current_image_valid
00013e98 g     O .bss	00000004 _PathLocale
00000820 g     F .text	00000018 i2c_busy_wait
0000fb5c g     F .text	00000014 atexit
0000ab48 g     F .text	00000060 _write_r
00007684 g     F .text	00000018 setlocale
00012240 g     O .rwdata	00000004 _impure_ptr
00013eac g     O .bss	00000004 alt_argc
0000650c g     F .text	0000021c __sflush_r
00013eb4 g     O .bss	00000004 altera_avalon_timer_ts_base
0000f414 g     F .text	00000064 _do_dtors
00007670 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008838 g     F .text	00000064 __ulp
00006b3c g     F .text	00000018 __fp_unlock_all
00012258 g     O .rwdata	00000008 alt_fs_list
00013e80 g     O .bss	00000004 sobel_y_result
0000096c g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013e6c g     O .bss	00000002 LCD_height
0000769c g     F .text	0000000c localeconv
0000f20c g     F .text	00000034 alt_timestamp
00001c3c g     F .text	00000010 vga_set_swap
0000f484 g     F .text	00000004 alt_ic_isr_register
00001b68 g     F .text	000000b4 sobel_threshold
00012274 g       *ABS*	00000000 _edata
00013ff0 g       *ABS*	00000000 _end
0000adc4 g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000ede4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00010394 g     O .rodata	00000009 gx_array
0000f4c0 g     F .text	00000038 alt_ic_irq_disable
00009344 g     F .text	0000007c __swrite
00012238 g     O .rwdata	00000004 __malloc_trim_threshold
00013e6e g     O .bss	00000002 LCD_width
000006ac g     F .text	0000015c conv_grayscale
00007664 g     F .text	0000000c __locale_msgcharset
0000fb70 g     F .text	00000038 exit
00007508 g     F .text	000000c4 _fwalk_reent
0000863c g     F .text	000001fc __mdiff
00001cd0 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006b18 g     F .text	00000004 __sfp_lock_release
00000810 g     F .text	00000008 get_grayscale_height
0000febc g     F .text	00000014 _exit
00001500 g     F .text	00000128 sobel_mac
0000f248 g     F .text	00000080 alt_alarm_start
000076a8 g     F .text	000001bc __smakebuf_r
00013e84 g     O .bss	00000004 sobel_rgb565
000027c8 g     F .text	00000098 strlen
0000f67c g     F .text	00000178 open
0000d148 g     F .text	000000dc .hidden __gedf2
00012248 g     O .rwdata	00000004 __wctomb
000095fc g     F .text	00000018 __sprint_r
0000f478 g     F .text	0000000c alt_icache_flush_all
00012268 g     O .rwdata	00000004 alt_priority_mask
0000f488 g     F .text	00000038 alt_ic_irq_enable
00004a58 g     F .text	0000001c __vfprintf_internal
0000b420 g     F .text	0000005c _wctomb_r
0000da30 g     F .text	000008fc .hidden __subdf3
00008070 g     F .text	000000b0 __lo0bits
0001226c g     O .rwdata	00000008 alt_alarm_list
0000f3b0 g     F .text	00000064 _do_ctors
0000b330 g     F .text	000000c0 wcrtomb
0000e594 g     F .text	000000bc close
0000e754 g     F .text	000000cc alt_load
0000af4c g     F .text	00000080 fputwc
00001e14 g     F .text	00000014 free
00006b1c g     F .text	00000004 __sinit_lock_acquire
00007de4 g     F .text	00000120 __multadd
00007dbc g     F .text	00000028 _Bfree
0000066c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	840fbc04 	addi	r16,r16,16112
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a72417 	ldw	r2,-25456(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     18c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     190:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     194:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     198:	d6a88d14 	ori	gp,gp,41524
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     19c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a0:	108f9814 	ori	r2,r2,15968

    movhi r3, %hi(__bss_end)
     1a4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1a8:	18cffc14 	ori	r3,r3,16368

    beq r2, r3, 1f
     1ac:	10c00326 	beq	r2,r3,1bc <_start+0x30>

0:
    stw zero, (r2)
     1b0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1b4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1b8:	10fffd36 	bltu	r2,r3,1b0 <__alt_data_end+0xff0001b0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1bc:	000e7540 	call	e754 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c0:	000e89c0 	call	e89c <alt_main>

000001c4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1c4:	003fff06 	br	1c4 <__alt_data_end+0xff0001c4>

000001c8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1c8:	00804034 	movhi	r2,256
     1cc:	10842744 	addi	r2,r2,4253
     1d0:	00c00084 	movi	r3,2
     1d4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1d8:	00804034 	movhi	r2,256
     1dc:	10841304 	addi	r2,r2,4172
     1e0:	00c00044 	movi	r3,1
     1e4:	10c00025 	stbio	r3,0(r2)
     1e8:	008003f4 	movhi	r2,15
     1ec:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     1f0:	0001883a 	nop
     1f4:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     1f8:	103ffd1e 	bne	r2,zero,1f0 <__alt_data_end+0xff0001f0>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     1fc:	00804034 	movhi	r2,256
     200:	10841304 	addi	r2,r2,4172
     204:	10000025 	stbio	zero,0(r2)
     208:	008003f4 	movhi	r2,15
     20c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     210:	0001883a 	nop
     214:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     218:	103ffd1e 	bne	r2,zero,210 <__alt_data_end+0xff000210>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     21c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     220:	01800044 	movi	r6,1
     224:	014ce184 	movi	r5,13190
     228:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	dfc00315 	stw	ra,12(sp)
     230:	dc800215 	stw	r18,8(sp)
     234:	dc400115 	stw	r17,4(sp)
     238:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     23c:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     240:	000d883a 	mov	r6,zero
     244:	014ce184 	movi	r5,13190
     248:	01001e04 	movi	r4,120
     24c:	000096c0 	call	96c <i2c_short_write>
     250:	008003f4 	movhi	r2,15
     254:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     258:	0001883a 	nop
     25c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     260:	103ffd1e 	bne	r2,zero,258 <__alt_data_end+0xff000258>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     264:	01803104 	movi	r6,196
     268:	014c0684 	movi	r5,12314
     26c:	01001e04 	movi	r4,120
     270:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     274:	01800204 	movi	r6,8
     278:	014c8084 	movi	r5,12802
     27c:	01001e04 	movi	r4,120
     280:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     284:	0180c744 	movi	r6,797
     288:	014cfd04 	movi	r5,13300
     28c:	01001e04 	movi	r4,120
     290:	000096c0 	call	96c <i2c_short_write>
     294:	008000b4 	movhi	r2,2
     298:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     29c:	0001883a 	nop
     2a0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2a4:	103ffd1e 	bne	r2,zero,29c <__alt_data_end+0xff00029c>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2a8:	01a3c254 	movui	r6,36617
     2ac:	014d0784 	movi	r5,13342
     2b0:	01001e04 	movi	r4,120
     2b4:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2b8:	01805404 	movi	r6,336
     2bc:	014d0704 	movi	r5,13340
     2c0:	01001e04 	movi	r4,120
     2c4:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2c8:	01a3c254 	movui	r6,36617
     2cc:	014d0784 	movi	r5,13342
     2d0:	01001e04 	movi	r4,120
     2d4:	000096c0 	call	96c <i2c_short_write>
     2d8:	008000b4 	movhi	r2,2
     2dc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2e0:	0001883a 	nop
     2e4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2e8:	103ffd1e 	bne	r2,zero,2e0 <__alt_data_end+0xff0002e0>
     2ec:	04000074 	movhi	r16,1
     2f0:	84006604 	addi	r16,r16,408
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     2f4:	01a3c214 	movui	r6,36616
     2f8:	014d0784 	movi	r5,13342
     2fc:	01001e04 	movi	r4,120
     300:	000096c0 	call	96c <i2c_short_write>
     304:	84400084 	addi	r17,r16,2
     308:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     30c:	8980000b 	ldhu	r6,0(r17)
     310:	8140000b 	ldhu	r5,0(r16)
     314:	01001e04 	movi	r4,120
     318:	84000104 	addi	r16,r16,4
     31c:	000096c0 	call	96c <i2c_short_write>
     320:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     324:	84bff91e 	bne	r16,r18,30c <__alt_data_end+0xff00030c>
     328:	04000074 	movhi	r16,1
     32c:	84001604 	addi	r16,r16,88
     330:	84400084 	addi	r17,r16,2
     334:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     338:	8980000b 	ldhu	r6,0(r17)
     33c:	8140000b 	ldhu	r5,0(r16)
     340:	01001e04 	movi	r4,120
     344:	84000104 	addi	r16,r16,4
     348:	000096c0 	call	96c <i2c_short_write>
     34c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     350:	943ff91e 	bne	r18,r16,338 <__alt_data_end+0xff000338>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     354:	018164c4 	movi	r6,1427
     358:	014d6904 	movi	r5,13732
     35c:	01001e04 	movi	r4,120
     360:	000096c0 	call	96c <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     364:	0189e644 	movi	r6,10137
     368:	014ce304 	movi	r5,13196
     36c:	01001e04 	movi	r4,120
     370:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     374:	01991004 	movi	r6,25664
     378:	014ce404 	movi	r5,13200
     37c:	01001e04 	movi	r4,120
     380:	000096c0 	call	96c <i2c_short_write>
     384:	008000b4 	movhi	r2,2
     388:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     38c:	0001883a 	nop
     390:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     394:	103ffd1e 	bne	r2,zero,38c <__alt_data_end+0xff00038c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     398:	0189e6c4 	movi	r6,10139
     39c:	014ce304 	movi	r5,13196
     3a0:	01001e04 	movi	r4,120
     3a4:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3a8:	01991004 	movi	r6,25664
     3ac:	014ce404 	movi	r5,13200
     3b0:	01001e04 	movi	r4,120
     3b4:	000096c0 	call	96c <i2c_short_write>
     3b8:	008000b4 	movhi	r2,2
     3bc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3c0:	0001883a 	nop
     3c4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3c8:	103ffd1e 	bne	r2,zero,3c0 <__alt_data_end+0xff0003c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3cc:	01a840d4 	movui	r6,41219
     3d0:	014ce304 	movi	r5,13196
     3d4:	01001e04 	movi	r4,120
     3d8:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3dc:	01800144 	movi	r6,5
     3e0:	014ce404 	movi	r5,13200
     3e4:	01001e04 	movi	r4,120
     3e8:	000096c0 	call	96c <i2c_short_write>
     3ec:	008000b4 	movhi	r2,2
     3f0:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3f4:	0001883a 	nop
     3f8:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     3fc:	103ffd1e 	bne	r2,zero,3f4 <__alt_data_end+0xff0003f4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     400:	01a840d4 	movui	r6,41219
     404:	014ce304 	movi	r5,13196
     408:	01001e04 	movi	r4,120
     40c:	000096c0 	call	96c <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     410:	01800184 	movi	r6,6
     414:	014ce404 	movi	r5,13200
     418:	01001e04 	movi	r4,120
     41c:	000096c0 	call	96c <i2c_short_write>
     420:	008000b4 	movhi	r2,2
     424:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     428:	0001883a 	nop
     42c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     430:	103ffd1e 	bne	r2,zero,428 <__alt_data_end+0xff000428>
     434:	04000074 	movhi	r16,1
     438:	843fcc04 	addi	r16,r16,-208
     43c:	84400084 	addi	r17,r16,2
     440:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     444:	8980000b 	ldhu	r6,0(r17)
     448:	8140000b 	ldhu	r5,0(r16)
     44c:	01001e04 	movi	r4,120
     450:	84000104 	addi	r16,r16,4
     454:	000096c0 	call	96c <i2c_short_write>
     458:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     45c:	943ff91e 	bne	r18,r16,444 <__alt_data_end+0xff000444>
     460:	008003f4 	movhi	r2,15
     464:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     468:	0001883a 	nop
     46c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     470:	103ffd1e 	bne	r2,zero,468 <__alt_data_end+0xff000468>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     474:	01800804 	movi	r6,32
     478:	014ccb84 	movi	r5,13102
     47c:	01001e04 	movi	r4,120
     480:	000096c0 	call	96c <i2c_short_write>
     484:	008003f4 	movhi	r2,15
     488:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     48c:	0001883a 	nop
     490:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     494:	103ffd1e 	bne	r2,zero,48c <__alt_data_end+0xff00048c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     498:	01800884 	movi	r6,34
     49c:	014d0104 	movi	r5,13316
     4a0:	01001e04 	movi	r4,120
     4a4:	000096c0 	call	96c <i2c_short_write>
     4a8:	008003f4 	movhi	r2,15
     4ac:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4b0:	0001883a 	nop
     4b4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4b8:	103ffd1e 	bne	r2,zero,4b0 <__alt_data_end+0xff0004b0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4bc:	018009c4 	movi	r6,39
     4c0:	014c1004 	movi	r5,12352
     4c4:	01001e04 	movi	r4,120
}
     4c8:	dfc00317 	ldw	ra,12(sp)
     4cc:	dc800217 	ldw	r18,8(sp)
     4d0:	dc400117 	ldw	r17,4(sp)
     4d4:	dc000017 	ldw	r16,0(sp)
     4d8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4dc:	000096c1 	jmpi	96c <i2c_short_write>

000004e0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4e0:	00c04034 	movhi	r3,256
     4e4:	18c41304 	addi	r3,r3,4172
     4e8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4ec:	1080010c 	andi	r2,r2,4
     4f0:	103ffd26 	beq	r2,zero,4e8 <__alt_data_end+0xff0004e8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     4f4:	00804034 	movhi	r2,256
     4f8:	10841004 	addi	r2,r2,4160
}
     4fc:	1080002b 	ldhuio	r2,0(r2)
     500:	f800283a 	ret

00000504 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     504:	00c04034 	movhi	r3,256
     508:	18c41304 	addi	r3,r3,4172
     50c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     510:	1080010c 	andi	r2,r2,4
     514:	103ffd26 	beq	r2,zero,50c <__alt_data_end+0xff00050c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     518:	00804034 	movhi	r2,256
     51c:	10841104 	addi	r2,r2,4164
}
     520:	1080002b 	ldhuio	r2,0(r2)
     524:	f800283a 	ret

00000528 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     528:	00c04034 	movhi	r3,256
     52c:	18c41304 	addi	r3,r3,4172
     530:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     534:	1080010c 	andi	r2,r2,4
     538:	103ffd26 	beq	r2,zero,530 <__alt_data_end+0xff000530>
	printf("Nr. of bytes each line    : %d\n",
     53c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     540:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     544:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     548:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     54c:	1140002b 	ldhuio	r5,0(r2)
     550:	01000074 	movhi	r4,1
     554:	213fb404 	addi	r4,r4,-304
     558:	297fffcc 	andi	r5,r5,65535
     55c:	00026640 	call	2664 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     560:	00804034 	movhi	r2,256
     564:	10841104 	addi	r2,r2,4164
     568:	1140002b 	ldhuio	r5,0(r2)
     56c:	01000074 	movhi	r4,1
     570:	213fbc04 	addi	r4,r4,-272
     574:	297fffcc 	andi	r5,r5,65535
     578:	00026640 	call	2664 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     57c:	00804034 	movhi	r2,256
     580:	10841204 	addi	r2,r2,4168
     584:	1140002b 	ldhuio	r5,0(r2)
     588:	01000074 	movhi	r4,1
     58c:	213fc404 	addi	r4,r4,-240
     590:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     594:	dfc00017 	ldw	ra,0(sp)
     598:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     59c:	00026641 	jmpi	2664 <printf>

000005a0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5a0:	21003fcc 	andi	r4,r4,255
     5a4:	2100201c 	xori	r4,r4,128
     5a8:	213fe004 	addi	r4,r4,-128
     5ac:	00800044 	movi	r2,1
     5b0:	20801226 	beq	r4,r2,5fc <cam_set_image_pointer+0x5c>
     5b4:	11000c0e 	bge	r2,r4,5e8 <cam_set_image_pointer+0x48>
     5b8:	00800084 	movi	r2,2
     5bc:	20800626 	beq	r4,r2,5d8 <cam_set_image_pointer+0x38>
     5c0:	008000c4 	movi	r2,3
     5c4:	2080111e 	bne	r4,r2,60c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5c8:	00804034 	movhi	r2,256
     5cc:	10841704 	addi	r2,r2,4188
     5d0:	11400035 	stwio	r5,0(r2)
     5d4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841604 	addi	r2,r2,4184
     5e0:	11400035 	stwio	r5,0(r2)
                break;
     5e4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5e8:	2000091e 	bne	r4,zero,610 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5ec:	00804034 	movhi	r2,256
     5f0:	10841404 	addi	r2,r2,4176
     5f4:	11400035 	stwio	r5,0(r2)
	            break;
     5f8:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841504 	addi	r2,r2,4180
     604:	11400035 	stwio	r5,0(r2)
                break;
     608:	f800283a 	ret
     60c:	f800283a 	ret
     610:	f800283a 	ret

00000614 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     614:	00804034 	movhi	r2,256
     618:	10841304 	addi	r2,r2,4172
     61c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     620:	1080800c 	andi	r2,r2,512
     624:	f800283a 	ret

00000628 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     628:	00804034 	movhi	r2,256
     62c:	10841404 	addi	r2,r2,4176
}
     630:	10800037 	ldwio	r2,0(r2)
     634:	f800283a 	ret

00000638 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     638:	00c04034 	movhi	r3,256
     63c:	18c41304 	addi	r3,r3,4172
     640:	00800204 	movi	r2,8
     644:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     648:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     64c:	1080020c 	andi	r2,r2,8
     650:	103ffd1e 	bne	r2,zero,648 <__alt_data_end+0xff000648>
}
     654:	f800283a 	ret

00000658 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     658:	00804034 	movhi	r2,256
     65c:	10841304 	addi	r2,r2,4172
     660:	00c00404 	movi	r3,16
     664:	10c0002d 	sthio	r3,0(r2)
     668:	f800283a 	ret

0000066c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     66c:	00c04034 	movhi	r3,256
     670:	18c41304 	addi	r3,r3,4172
     674:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     678:	1080200c 	andi	r2,r2,128
     67c:	1000021e 	bne	r2,zero,688 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     680:	0005883a 	mov	r2,zero
}
     684:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     688:	00804004 	movi	r2,256
     68c:	1880002d 	sthio	r2,0(r3)
		return 1;
     690:	00800044 	movi	r2,1
     694:	f800283a 	ret

00000698 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     698:	00804034 	movhi	r2,256
     69c:	10842804 	addi	r2,r2,4256
     6a0:	10800023 	ldbuio	r2,0(r2)
}
     6a4:	0084303a 	nor	r2,zero,r2
     6a8:	f800283a 	ret

000006ac <conv_grayscale>:
		            int height) {
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     6ac:	d0a70d17 	ldw	r2,-25548(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     6b0:	defff404 	addi	sp,sp,-48
     6b4:	dc400315 	stw	r17,12(sp)
     6b8:	dc000215 	stw	r16,8(sp)
     6bc:	dfc00b15 	stw	ra,44(sp)
     6c0:	df000a15 	stw	fp,40(sp)
     6c4:	ddc00915 	stw	r23,36(sp)
     6c8:	dd800815 	stw	r22,32(sp)
     6cc:	dd400715 	stw	r21,28(sp)
     6d0:	dd000615 	stw	r20,24(sp)
     6d4:	dcc00515 	stw	r19,20(sp)
     6d8:	dc800415 	stw	r18,16(sp)
     6dc:	d9800015 	stw	r6,0(sp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
     6e0:	d1670c15 	stw	r5,-25552(gp)
	grayscape_height = height;
     6e4:	d1a70b15 	stw	r6,-25556(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     6e8:	2821883a 	mov	r16,r5
     6ec:	2023883a 	mov	r17,r4
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
     6f0:	10000226 	beq	r2,zero,6fc <conv_grayscale+0x50>
		free(grayscale_array);
     6f4:	1009883a 	mov	r4,r2
     6f8:	0001e140 	call	1e14 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     6fc:	d8c00017 	ldw	r3,0(sp)
     700:	80c9383a 	mul	r4,r16,r3
     704:	0001e000 	call	1e00 <malloc>
	for (y = 0 ; y < height ; y++) {
     708:	d8c00017 	ldw	r3,0(sp)
	unsigned short *pixels = (unsigned short *)picture , rgb;
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
     70c:	d0a70d15 	stw	r2,-25548(gp)
	for (y = 0 ; y < height ; y++) {
     710:	00c0310e 	bge	zero,r3,7d8 <conv_grayscale+0x12c>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     714:	05000074 	movhi	r20,1
     718:	8407883a 	add	r3,r16,r16
     71c:	a501a204 	addi	r20,r20,1672
     720:	d8c00115 	stw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     724:	802f883a 	mov	r23,r16
     728:	0025883a 	mov	r18,zero
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     72c:	070003c4 	movi	fp,15
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     730:	0400230e 	bge	zero,r16,7c0 <conv_grayscale+0x114>
     734:	bc2bc83a 	sub	r21,r23,r16
     738:	882d883a 	mov	r22,r17
     73c:	00000506 	br	754 <conv_grayscale+0xa8>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     740:	10800003 	ldbu	r2,0(r2)
     744:	98800025 	stbio	r2,0(r19)
     748:	ad400044 	addi	r21,r21,1
     74c:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     750:	bd401b26 	beq	r23,r21,7c0 <conv_grayscale+0x114>
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     754:	b100000b 	ldhu	r4,0(r22)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     758:	01401904 	movi	r5,100
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     75c:	2006d2fa 	srli	r3,r4,11
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     760:	2004d17a 	srli	r2,r4,5
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     764:	200890fa 	slli	r4,r4,3
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     768:	180690fa 	slli	r3,r3,3
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     76c:	1085883a 	add	r2,r2,r2
     770:	1085883a 	add	r2,r2,r2
     774:	10803fcc 	andi	r2,r2,255
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     778:	18c00564 	muli	r3,r3,21
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     77c:	10801224 	muli	r2,r2,72
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     780:	21003fcc 	andi	r4,r4,255
     784:	210001e4 	muli	r4,r4,7
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     788:	10c5883a 	add	r2,r2,r3
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     78c:	d0e70d17 	ldw	r3,-25548(gp)
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
			rgb = pixels[y*width+x];
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     790:	2089883a 	add	r4,r4,r2
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     794:	2004913a 	slli	r2,r4,4
     798:	214eb03a 	or	r7,r4,r5
     79c:	1d67883a 	add	r19,r3,r21
     7a0:	1144b03a 	or	r2,r2,r5
     7a4:	1505883a 	add	r2,r2,r20
     7a8:	e1ffe52e 	bgeu	fp,r7,740 <__alt_data_end+0xff000740>
     7ac:	0001c4c0 	call	1c4c <__divsi3>
     7b0:	98800025 	stbio	r2,0(r19)
     7b4:	ad400044 	addi	r21,r21,1
     7b8:	b5800084 	addi	r22,r22,2
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     7bc:	bd7fe51e 	bne	r23,r21,754 <__alt_data_end+0xff000754>
     7c0:	d8c00117 	ldw	r3,4(sp)
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     7c4:	94800044 	addi	r18,r18,1
     7c8:	bc2f883a 	add	r23,r23,r16
     7cc:	88e3883a 	add	r17,r17,r3
     7d0:	d8c00017 	ldw	r3,0(sp)
     7d4:	1cbfd61e 	bne	r3,r18,730 <__alt_data_end+0xff000730>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     7d8:	dfc00b17 	ldw	ra,44(sp)
     7dc:	df000a17 	ldw	fp,40(sp)
     7e0:	ddc00917 	ldw	r23,36(sp)
     7e4:	dd800817 	ldw	r22,32(sp)
     7e8:	dd400717 	ldw	r21,28(sp)
     7ec:	dd000617 	ldw	r20,24(sp)
     7f0:	dcc00517 	ldw	r19,20(sp)
     7f4:	dc800417 	ldw	r18,16(sp)
     7f8:	dc400317 	ldw	r17,12(sp)
     7fc:	dc000217 	ldw	r16,8(sp)
     800:	dec00c04 	addi	sp,sp,48
     804:	f800283a 	ret

00000808 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     808:	d0a70c17 	ldw	r2,-25552(gp)
     80c:	f800283a 	ret

00000810 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     810:	d0a70b17 	ldw	r2,-25556(gp)
     814:	f800283a 	ret

00000818 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     818:	d0a70d17 	ldw	r2,-25548(gp)
     81c:	f800283a 	ret

00000820 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     820:	00c04034 	movhi	r3,256
     824:	18c42704 	addi	r3,r3,4252
     828:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     82c:	108000cc 	andi	r2,r2,3
     830:	103ffd1e 	bne	r2,zero,828 <__alt_data_end+0xff000828>
}
     834:	f800283a 	ret

00000838 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     838:	01004034 	movhi	r4,256
     83c:	21042704 	addi	r4,r4,4252
     840:	00c04034 	movhi	r3,256
     844:	18c42704 	addi	r3,r3,4252
     848:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     84c:	108000cc 	andi	r2,r2,3
     850:	103ffb1e 	bne	r2,zero,840 <__alt_data_end+0xff000840>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     854:	00800104 	movi	r2,4
     858:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     85c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     860:	108000cc 	andi	r2,r2,3
     864:	103ffd1e 	bne	r2,zero,85c <__alt_data_end+0xff00085c>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     868:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     86c:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     870:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     874:	dfc00315 	stw	ra,12(sp)
     878:	dc800215 	stw	r18,8(sp)
     87c:	dc400115 	stw	r17,4(sp)
     880:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     884:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     888:	01000074 	movhi	r4,1
     88c:	2100ac04 	addi	r4,r4,688
     890:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     894:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     898:	00026640 	call	2664 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     89c:	04800a0e 	bge	zero,r18,8c8 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     8a0:	04404034 	movhi	r17,256
     8a4:	8c442404 	addi	r17,r17,4240
     8a8:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8ac:	89800037 	ldwio	r6,0(r17)
     8b0:	01000074 	movhi	r4,1
     8b4:	800b883a 	mov	r5,r16
     8b8:	2100b504 	addi	r4,r4,724
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8bc:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     8c0:	00026640 	call	2664 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     8c4:	943ff81e 	bne	r18,r16,8a8 <__alt_data_end+0xff0008a8>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     8c8:	dfc00317 	ldw	ra,12(sp)
     8cc:	dc800217 	ldw	r18,8(sp)
     8d0:	dc400117 	ldw	r17,4(sp)
     8d4:	dc000017 	ldw	r16,0(sp)
     8d8:	dec00404 	addi	sp,sp,16
     8dc:	f800283a 	ret

000008e0 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8e0:	01804034 	movhi	r6,256
     8e4:	31842704 	addi	r6,r6,4252
     8e8:	00c04034 	movhi	r3,256
     8ec:	18c42704 	addi	r3,r3,4252
     8f0:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8f4:	108000cc 	andi	r2,r2,3
     8f8:	103ffb1e 	bne	r2,zero,8e8 <__alt_data_end+0xff0008e8>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8fc:	00804034 	movhi	r2,256
     900:	21003fcc 	andi	r4,r4,255
     904:	10842404 	addi	r2,r2,4240
     908:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     90c:	00804034 	movhi	r2,256
     910:	10842504 	addi	r2,r2,4244
     914:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     918:	008010c4 	movi	r2,67
     91c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     920:	180b883a 	mov	r5,r3
     924:	00c04034 	movhi	r3,256
     928:	18c42704 	addi	r3,r3,4252
     92c:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     930:	108000cc 	andi	r2,r2,3
     934:	103ffb1e 	bne	r2,zero,924 <__alt_data_end+0xff000924>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     938:	00804034 	movhi	r2,256
     93c:	21000044 	addi	r4,r4,1
     940:	10842404 	addi	r2,r2,4240
     944:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     948:	00800884 	movi	r2,34
     94c:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     950:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     954:	108000cc 	andi	r2,r2,3
     958:	103ffd1e 	bne	r2,zero,950 <__alt_data_end+0xff000950>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     95c:	00804034 	movhi	r2,256
     960:	10842604 	addi	r2,r2,4248
}
     964:	10800037 	ldwio	r2,0(r2)
     968:	f800283a 	ret

0000096c <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     96c:	01c04034 	movhi	r7,256
     970:	39c42704 	addi	r7,r7,4252
     974:	00c04034 	movhi	r3,256
     978:	18c42704 	addi	r3,r3,4252
     97c:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     980:	108000cc 	andi	r2,r2,3
     984:	103ffb1e 	bne	r2,zero,974 <__alt_data_end+0xff000974>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     988:	00804034 	movhi	r2,256
     98c:	10842404 	addi	r2,r2,4240
     990:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     994:	00804034 	movhi	r2,256
     998:	10842504 	addi	r2,r2,4244
     99c:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     9a0:	00804034 	movhi	r2,256
     9a4:	10842604 	addi	r2,r2,4248
     9a8:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     9ac:	00801084 	movi	r2,66
     9b0:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     9b4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     9b8:	108000cc 	andi	r2,r2,3
     9bc:	103ffd1e 	bne	r2,zero,9b4 <__alt_data_end+0xff0009b4>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     9c0:	f800283a 	ret

000009c4 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9c4:	00804034 	movhi	r2,256
     9c8:	10841804 	addi	r2,r2,4192
     9cc:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9d0:	01000284 	movi	r4,10
     9d4:	000ea3c1 	jmpi	ea3c <usleep>

000009d8 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d8:	00804034 	movhi	r2,256
     9dc:	10841904 	addi	r2,r2,4196
     9e0:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     9e4:	01000284 	movi	r4,10
     9e8:	000ea3c1 	jmpi	ea3c <usleep>

000009ec <init_LCD>:
}


void init_LCD() {
     9ec:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     9f0:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     9f4:	dd400515 	stw	r21,20(sp)
     9f8:	dfc00815 	stw	ra,32(sp)
     9fc:	ddc00715 	stw	r23,28(sp)
     a00:	dd800615 	stw	r22,24(sp)
     a04:	dd000415 	stw	r20,16(sp)
     a08:	dcc00315 	stw	r19,12(sp)
     a0c:	dc800215 	stw	r18,8(sp)
     a10:	dc400115 	stw	r17,4(sp)
     a14:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     a18:	05400084 	movi	r21,2
     a1c:	10841a04 	addi	r2,r2,4200
     a20:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a24:	04804034 	movhi	r18,256
     a28:	94841804 	addi	r18,r18,4192
     a2c:	00800a04 	movi	r2,40
     a30:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a34:	04000284 	movi	r16,10
     a38:	8009883a 	mov	r4,r16
     a3c:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a40:	05c00444 	movi	r23,17
     a44:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     a48:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a4c:	04404034 	movhi	r17,256
     a50:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     a54:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a58:	0027883a 	mov	r19,zero
     a5c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a60:	8009883a 	mov	r4,r16
     a64:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a68:	008032c4 	movi	r2,203
     a6c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a70:	8009883a 	mov	r4,r16
     a74:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a78:	00800e44 	movi	r2,57
     a7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a80:	8009883a 	mov	r4,r16
     a84:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a88:	00800b04 	movi	r2,44
     a8c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a90:	8009883a 	mov	r4,r16
     a94:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a9c:	8009883a 	mov	r4,r16
     aa0:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa4:	00800d04 	movi	r2,52
     aa8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     aac:	8009883a 	mov	r4,r16
     ab0:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab4:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     ab8:	8009883a 	mov	r4,r16
     abc:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ac0:	008033c4 	movi	r2,207
     ac4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ac8:	8009883a 	mov	r4,r16
     acc:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
     ad8:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	05802044 	movi	r22,129
     ae0:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aec:	00800c04 	movi	r2,48
     af0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     af4:	8009883a 	mov	r4,r16
     af8:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     afc:	00803a04 	movi	r2,232
     b00:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b04:	8009883a 	mov	r4,r16
     b08:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b0c:	00802144 	movi	r2,133
     b10:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b14:	8009883a 	mov	r4,r16
     b18:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b1c:	05000044 	movi	r20,1
     b20:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     b24:	8009883a 	mov	r4,r16
     b28:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b2c:	00801e44 	movi	r2,121
     b30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b34:	8009883a 	mov	r4,r16
     b38:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b3c:	00803a84 	movi	r2,234
     b40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b44:	8009883a 	mov	r4,r16
     b48:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b4c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b50:	8009883a 	mov	r4,r16
     b54:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b58:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b64:	00801904 	movi	r2,100
     b68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	008000c4 	movi	r2,3
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b84:	00800484 	movi	r2,18
     b88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b98:	8009883a 	mov	r4,r16
     b9c:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ba0:	00803dc4 	movi	r2,247
     ba4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     ba8:	8009883a 	mov	r4,r16
     bac:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb0:	00800804 	movi	r2,32
     bb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bc0:	00803004 	movi	r2,192
     bc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd0:	05800984 	movi	r22,38
     bd4:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be0:	00800104 	movi	r2,4
     be4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf0:	00803044 	movi	r2,193
     bf4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c00:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     c04:	8009883a 	mov	r4,r16
     c08:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c0c:	00803144 	movi	r2,197
     c10:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	00800d44 	movi	r2,53
     c20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	00800f84 	movi	r2,62
     c30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c3c:	008031c4 	movi	r2,199
     c40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c44:	8009883a 	mov	r4,r16
     c48:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c4c:	00802f84 	movi	r2,190
     c50:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c54:	8009883a 	mov	r4,r16
     c58:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c5c:	00802c44 	movi	r2,177
     c60:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c6c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c70:	8009883a 	mov	r4,r16
     c74:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c78:	00800404 	movi	r2,16
     c7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c88:	00800e84 	movi	r2,58
     c8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	00801544 	movi	r2,85
     c9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca0:	8009883a 	mov	r4,r16
     ca4:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ca8:	00802d84 	movi	r2,182
     cac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb0:	8009883a 	mov	r4,r16
     cb4:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb8:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc4:	00802884 	movi	r2,162
     cc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ccc:	8009883a 	mov	r4,r16
     cd0:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cd4:	00803c84 	movi	r2,242
     cd8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     ce8:	8009883a 	mov	r4,r16
     cec:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cf0:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     cf4:	8009883a 	mov	r4,r16
     cf8:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cfc:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d00:	8009883a 	mov	r4,r16
     d04:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d08:	00800d84 	movi	r2,54
     d0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d10:	8009883a 	mov	r4,r16
     d14:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d18:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
     d20:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d24:	00800a84 	movi	r2,42
     d28:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d2c:	8009883a 	mov	r4,r16
     d30:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d34:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d38:	8009883a 	mov	r4,r16
     d3c:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d40:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d44:	8009883a 	mov	r4,r16
     d48:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d4c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d50:	8009883a 	mov	r4,r16
     d54:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d58:	00803bc4 	movi	r2,239
     d5c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     d60:	8009883a 	mov	r4,r16
     d64:	000ea3c0 	call	ea3c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d68:	00800ac4 	movi	r2,43
     d6c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d70:	8009883a 	mov	r4,r16
     d74:	000ea3c0 	call	ea3c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d78:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d7c:	8009883a 	mov	r4,r16
     d80:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d84:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     d88:	8009883a 	mov	r4,r16
     d8c:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d90:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     d94:	8009883a 	mov	r4,r16
     d98:	000ea3c0 	call	ea3c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	00800fc4 	movi	r2,63
     da0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     da4:	8009883a 	mov	r4,r16
     da8:	000ea3c0 	call	ea3c <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     dac:	00c04034 	movhi	r3,256
     db0:	00803c04 	movi	r2,240
     db4:	18c41d04 	addi	r3,r3,4212
     db8:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     dbc:	d0a70e8d 	sth	r2,-25542(gp)
	LCD_height = 320;
     dc0:	00805004 	movi	r2,320
     dc4:	d0a70e0d 	sth	r2,-25544(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     dc8:	00800a44 	movi	r2,41
     dcc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     dd0:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     dd4:	dfc00817 	ldw	ra,32(sp)
     dd8:	ddc00717 	ldw	r23,28(sp)
     ddc:	dd800617 	ldw	r22,24(sp)
     de0:	dd400517 	ldw	r21,20(sp)
     de4:	dd000417 	ldw	r20,16(sp)
     de8:	dcc00317 	ldw	r19,12(sp)
     dec:	dc800217 	ldw	r18,8(sp)
     df0:	dc400117 	ldw	r17,4(sp)
     df4:	dc000017 	ldw	r16,0(sp)
     df8:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     dfc:	000ea3c1 	jmpi	ea3c <usleep>

00000e00 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e00:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e04:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     e08:	dc000015 	stw	r16,0(sp)
     e0c:	dfc00415 	stw	ra,16(sp)
     e10:	dcc00315 	stw	r19,12(sp)
     e14:	dc800215 	stw	r18,8(sp)
     e18:	dc400115 	stw	r17,4(sp)
     e1c:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     e20:	10841e04 	addi	r2,r2,4216
     e24:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     e28:	00804034 	movhi	r2,256
     e2c:	10841804 	addi	r2,r2,4192
     e30:	00c00b04 	movi	r3,44
     e34:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e38:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     e3c:	01000284 	movi	r4,10
     e40:	000ea3c0 	call	ea3c <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e44:	90000a26 	beq	r18,zero,e70 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e48:	04c04034 	movhi	r19,256
     e4c:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e50:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     e54:	8080000b 	ldhu	r2,0(r16)
     e58:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     e5c:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e60:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     e64:	000ea3c0 	call	ea3c <usleep>
     e68:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     e6c:	8cbff91e 	bne	r17,r18,e54 <__alt_data_end+0xff000e54>
		LCD_Write_Data(data_array[pixels]);
}
     e70:	dfc00417 	ldw	ra,16(sp)
     e74:	dcc00317 	ldw	r19,12(sp)
     e78:	dc800217 	ldw	r18,8(sp)
     e7c:	dc400117 	ldw	r17,4(sp)
     e80:	dc000017 	ldw	r16,0(sp)
     e84:	dec00504 	addi	sp,sp,20
     e88:	f800283a 	ret

00000e8c <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     e8c:	d0a70e0b 	ldhu	r2,-25544(gp)
     e90:	3080010e 	bge	r6,r2,e98 <transfer_LCD_with_dma+0xc>
     e94:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     e98:	d0e70e8b 	ldhu	r3,-25542(gp)
     e9c:	28c0010e 	bge	r5,r3,ea4 <transfer_LCD_with_dma+0x18>
     ea0:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     ea4:	01804034 	movhi	r6,256
     ea8:	31841e04 	addi	r6,r6,4216
     eac:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     eb0:	01404034 	movhi	r5,256
     eb4:	29441b04 	addi	r5,r5,4204
     eb8:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     ebc:	18ffffcc 	andi	r3,r3,65535
     ec0:	10bfffcc 	andi	r2,r2,65535
     ec4:	1885383a 	mul	r2,r3,r2
     ec8:	00c04034 	movhi	r3,256
     ecc:	18c41c04 	addi	r3,r3,4208
     ed0:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     ed4:	39c03fcc 	andi	r7,r7,255
     ed8:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     edc:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     ee0:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ee4:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     ee8:	38000326 	beq	r7,zero,ef8 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     eec:	00c04404 	movi	r3,272
     ef0:	10c0002d 	sthio	r3,0(r2)
     ef4:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     ef8:	00c04004 	movi	r3,256
     efc:	10c0002d 	sthio	r3,0(r2)
     f00:	f800283a 	ret

00000f04 <main>:
#include "sobel.h"
#include "sys/alt_timestamp.h" 		// include due to profiling
#include "alt_types.h" 		// include due to profiling

int main()
{
     f04:	defff204 	addi	sp,sp,-56
     f08:	dfc00d15 	stw	ra,52(sp)
     f0c:	df000c15 	stw	fp,48(sp)
     f10:	dd000815 	stw	r20,32(sp)
     f14:	dcc00715 	stw	r19,28(sp)
     f18:	dc800615 	stw	r18,24(sp)
     f1c:	dc400515 	stw	r17,20(sp)
     f20:	dc000415 	stw	r16,16(sp)
     f24:	ddc00b15 	stw	r23,44(sp)
     f28:	dd800a15 	stw	r22,40(sp)
     f2c:	dd400915 	stw	r21,36(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     f30:	00009ec0 	call	9ec <init_LCD>
  init_camera();
     f34:	00001c80 	call	1c8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     f38:	01000604 	movi	r4,24
     f3c:	0001c3c0 	call	1c3c <vga_set_swap>
  printf("Hello from Nios II!\n");
     f40:	01000074 	movhi	r4,1
     f44:	2100be04 	addi	r4,r4,760
     f48:	00027600 	call	2760 <puts>
  cam_get_profiling();
     f4c:	00005280 	call	528 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f50:	00004e00 	call	4e0 <cam_get_xsize>
     f54:	1021883a 	mov	r16,r2
     f58:	00005040 	call	504 <cam_get_ysize>
     f5c:	10bfffcc 	andi	r2,r2,65535
     f60:	813fffcc 	andi	r4,r16,65535
     f64:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     f68:	05000044 	movi	r20,1
		      case 0 : transfer_LCD_with_dma(&image[16520],
     f6c:	07204414 	movui	fp,33040
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f70:	0001e000 	call	1e00 <malloc>
     f74:	1027883a 	mov	r19,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f78:	00004e00 	call	4e0 <cam_get_xsize>
     f7c:	1021883a 	mov	r16,r2
     f80:	00005040 	call	504 <cam_get_ysize>
     f84:	10bfffcc 	andi	r2,r2,65535
     f88:	813fffcc 	andi	r4,r16,65535
     f8c:	2089383a 	mul	r4,r4,r2
     f90:	0001e000 	call	1e00 <malloc>
     f94:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f98:	00004e00 	call	4e0 <cam_get_xsize>
     f9c:	1021883a 	mov	r16,r2
     fa0:	00005040 	call	504 <cam_get_ysize>
     fa4:	10bfffcc 	andi	r2,r2,65535
     fa8:	813fffcc 	andi	r4,r16,65535
     fac:	2089383a 	mul	r4,r4,r2
     fb0:	0001e000 	call	1e00 <malloc>
     fb4:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fb8:	00004e00 	call	4e0 <cam_get_xsize>
     fbc:	1021883a 	mov	r16,r2
     fc0:	00005040 	call	504 <cam_get_ysize>
     fc4:	10bfffcc 	andi	r2,r2,65535
     fc8:	813fffcc 	andi	r4,r16,65535
     fcc:	2089383a 	mul	r4,r4,r2
     fd0:	0001e000 	call	1e00 <malloc>
  cam_set_image_pointer(0,buffer1);
     fd4:	980b883a 	mov	r5,r19
     fd8:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     fdc:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     fe0:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     fe4:	900b883a 	mov	r5,r18
     fe8:	a009883a 	mov	r4,r20
     fec:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     ff0:	880b883a 	mov	r5,r17
     ff4:	01000084 	movi	r4,2
     ff8:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     ffc:	800b883a 	mov	r5,r16
    1000:	010000c4 	movi	r4,3
    1004:	00005a00 	call	5a0 <cam_set_image_pointer>
  enable_continues_mode();
    1008:	00006580 	call	658 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    100c:	00004e00 	call	4e0 <cam_get_xsize>
    1010:	1021883a 	mov	r16,r2
    1014:	00005040 	call	504 <cam_get_ysize>
    1018:	813fffcc 	andi	r4,r16,65535
    101c:	2508d83a 	srl	r4,r4,r20
    1020:	117fffcc 	andi	r5,r2,65535
    1024:	000141c0 	call	141c <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    1028:	000066c0 	call	66c <new_image_available>
    102c:	10803fcc 	andi	r2,r2,255
    1030:	1080201c 	xori	r2,r2,128
    1034:	10bfe004 	addi	r2,r2,-128
    1038:	103ffb26 	beq	r2,zero,1028 <__alt_data_end+0xff001028>
		  if (current_image_valid()!=0) {
    103c:	00006140 	call	614 <current_image_valid>
    1040:	10bfffcc 	andi	r2,r2,65535
    1044:	10a0001c 	xori	r2,r2,32768
    1048:	10a00004 	addi	r2,r2,-32768
    104c:	103ff626 	beq	r2,zero,1028 <__alt_data_end+0xff001028>
			  current_mode = DIPSW_get_value();
    1050:	00006980 	call	698 <DIPSW_get_value>
    1054:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
    1058:	00006280 	call	628 <current_image_pointer>
    105c:	1023883a 	mov	r17,r2
		      switch (mode) {
    1060:	808001cc 	andi	r2,r16,7
    1064:	15004426 	beq	r2,r20,1178 <main+0x274>
    1068:	1000c526 	beq	r2,zero,1380 <main+0x47c>
    106c:	00c00084 	movi	r3,2
    1070:	10c09f26 	beq	r2,r3,12f0 <main+0x3ec>
    1074:	00c000c4 	movi	r3,3
    1078:	10c0601e 	bne	r2,r3,11fc <main+0x2f8>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
    107c:	000f1d00 	call	f1d0 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1080:	000f20c0 	call	f20c <alt_timestamp>
    1084:	102b883a 	mov	r21,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1088:	00004e00 	call	4e0 <cam_get_xsize>
    108c:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
    1090:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1094:	917fffcc 	andi	r5,r18,65535
    1098:	280ad07a 	srli	r5,r5,1
    109c:	11bfffcc 	andi	r6,r2,65535
    10a0:	8809883a 	mov	r4,r17
    10a4:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10a8:	000f20c0 	call	f20c <alt_timestamp>
    10ac:	1025883a 	mov	r18,r2
		               grayscale = get_grayscale_picture();
    10b0:	00008180 	call	818 <get_grayscale_picture>
    10b4:	1027883a 	mov	r19,r2
		               alt_timestamp_start();
    10b8:	000f1d00 	call	f1d0 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    10bc:	000f20c0 	call	f20c <alt_timestamp>
		               sobel_x(grayscale);
    10c0:	9809883a 	mov	r4,r19
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    10c4:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    10c8:	00016280 	call	1628 <sobel_x>
		               end_sobel_x = alt_timestamp();
    10cc:	000f20c0 	call	f20c <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    10d0:	9809883a 	mov	r4,r19
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    10d4:	1023883a 	mov	r17,r2
		               sobel_y_with_rgb(grayscale);
    10d8:	00019e40 	call	19e4 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    10dc:	0001c1c0 	call	1c1c <GetSobel_rgb>
    10e0:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    10e4:	00004e00 	call	4e0 <cam_get_xsize>
    10e8:	1027883a 	mov	r19,r2
		      		                	cam_get_ysize(),0);
    10ec:	00005040 	call	504 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    10f0:	997fffcc 	andi	r5,r19,65535
    10f4:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10f8:	84003fcc 	andi	r16,r16,255
    10fc:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1100:	000f883a 	mov	r7,zero
    1104:	11bfffcc 	andi	r6,r2,65535
    1108:	b709883a 	add	r4,r22,fp
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    110c:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1110:	0000e8c0 	call	e8c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1114:	8000ba16 	blt	r16,zero,1400 <main+0x4fc>
    1118:	9561c83a 	sub	r16,r18,r21
    111c:	8de3c83a 	sub	r17,r17,r23
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1120:	0025883a 	mov	r18,zero
    1124:	0027883a 	mov	r19,zero
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1128:	01000074 	movhi	r4,1
    112c:	2100c304 	addi	r4,r4,780
    1130:	00027600 	call	2760 <puts>
		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
    1134:	01000074 	movhi	r4,1
    1138:	880b883a 	mov	r5,r17
    113c:	2100cb04 	addi	r4,r4,812
    1140:	00026640 	call	2664 <printf>
		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
    1144:	01000074 	movhi	r4,1
    1148:	980b883a 	mov	r5,r19
    114c:	2100d104 	addi	r4,r4,836
    1150:	00026640 	call	2664 <printf>
		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
    1154:	01000074 	movhi	r4,1
    1158:	900b883a 	mov	r5,r18
    115c:	2100d704 	addi	r4,r4,860
    1160:	00026640 	call	2664 <printf>
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    1164:	01000074 	movhi	r4,1
    1168:	800b883a 	mov	r5,r16
    116c:	2100dd04 	addi	r4,r4,884
    1170:	00026640 	call	2664 <printf>
    1174:	003fac06 	br	1028 <__alt_data_end+0xff001028>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    1178:	000f1d00 	call	f1d0 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    117c:	000f20c0 	call	f20c <alt_timestamp>
    1180:	1027883a 	mov	r19,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1184:	00004e00 	call	4e0 <cam_get_xsize>
    1188:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
    118c:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1190:	917fffcc 	andi	r5,r18,65535
    1194:	280ad07a 	srli	r5,r5,1
    1198:	8809883a 	mov	r4,r17
    119c:	11bfffcc 	andi	r6,r2,65535
    11a0:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    11a4:	000f20c0 	call	f20c <alt_timestamp>
    11a8:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    11ac:	00008180 	call	818 <get_grayscale_picture>
    11b0:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    11b4:	00004e00 	call	4e0 <cam_get_xsize>
    11b8:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    11bc:	00005040 	call	504 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11c0:	917fffcc 	andi	r5,r18,65535
    11c4:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11c8:	84003fcc 	andi	r16,r16,255
    11cc:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11d0:	a00f883a 	mov	r7,r20
    11d4:	11bfffcc 	andi	r6,r2,65535
    11d8:	a9102204 	addi	r4,r21,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11dc:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    11e0:	0000e8c0 	call	e8c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11e4:	80008b16 	blt	r16,zero,1414 <main+0x510>
    11e8:	8ce1c83a 	sub	r16,r17,r19
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    11ec:	0025883a 	mov	r18,zero
    11f0:	0027883a 	mov	r19,zero
    11f4:	0023883a 	mov	r17,zero
    11f8:	003fcb06 	br	1128 <__alt_data_end+0xff001128>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    11fc:	000f1d00 	call	f1d0 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1200:	000f20c0 	call	f20c <alt_timestamp>
    1204:	d8800015 	stw	r2,0(sp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1208:	00004e00 	call	4e0 <cam_get_xsize>
    120c:	1025883a 	mov	r18,r2
	                                  cam_get_ysize());
    1210:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1214:	917fffcc 	andi	r5,r18,65535
    1218:	280ad07a 	srli	r5,r5,1
    121c:	11bfffcc 	andi	r6,r2,65535
    1220:	8809883a 	mov	r4,r17
    1224:	00006ac0 	call	6ac <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1228:	000f20c0 	call	f20c <alt_timestamp>
    122c:	d8800115 	stw	r2,4(sp)
                       grayscale = get_grayscale_picture();
    1230:	00008180 	call	818 <get_grayscale_picture>
    1234:	1025883a 	mov	r18,r2
                       alt_timestamp_start();
    1238:	000f1d00 	call	f1d0 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    123c:	000f20c0 	call	f20c <alt_timestamp>
                       sobel_x(grayscale);
    1240:	9009883a 	mov	r4,r18
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();
                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    1244:	102f883a 	mov	r23,r2
                       sobel_x(grayscale);
    1248:	00016280 	call	1628 <sobel_x>
                       end_sobel_x = alt_timestamp();
    124c:	000f20c0 	call	f20c <alt_timestamp>
    1250:	1023883a 	mov	r17,r2
                       alt_timestamp_start();
    1254:	000f1d00 	call	f1d0 <alt_timestamp_start>
                       start_sobel_y = alt_timestamp();
    1258:	000f20c0 	call	f20c <alt_timestamp>
                       sobel_y(grayscale);
    125c:	9009883a 	mov	r4,r18
                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
                       sobel_x(grayscale);
                       end_sobel_x = alt_timestamp();
                       alt_timestamp_start();
                       start_sobel_y = alt_timestamp();
    1260:	102d883a 	mov	r22,r2
                       sobel_y(grayscale);
    1264:	00018c80 	call	18c8 <sobel_y>
                       end_sobel_y = alt_timestamp();
    1268:	000f20c0 	call	f20c <alt_timestamp>
    126c:	1027883a 	mov	r19,r2
                       alt_timestamp_start();
    1270:	000f1d00 	call	f1d0 <alt_timestamp_start>
                       start_sobel_th = alt_timestamp();
    1274:	000f20c0 	call	f20c <alt_timestamp>
                       sobel_threshold(128);
    1278:	01002004 	movi	r4,128
                       alt_timestamp_start();
                       start_sobel_y = alt_timestamp();
                       sobel_y(grayscale);
                       end_sobel_y = alt_timestamp();
                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
    127c:	102b883a 	mov	r21,r2
                       sobel_threshold(128);
    1280:	0001b680 	call	1b68 <sobel_threshold>
                       end_sobel_th = alt_timestamp();
    1284:	000f20c0 	call	f20c <alt_timestamp>
    1288:	1025883a 	mov	r18,r2
                       grayscale=GetSobelResult();
    128c:	0001c240 	call	1c24 <GetSobelResult>
    1290:	d8800215 	stw	r2,8(sp)
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1294:	00004e00 	call	4e0 <cam_get_xsize>
    1298:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    129c:	d8c00315 	stw	r3,12(sp)
    12a0:	00005040 	call	504 <cam_get_ysize>
                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12a4:	d8c00317 	ldw	r3,12(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12a8:	84003fcc 	andi	r16,r16,255
    12ac:	8400201c 	xori	r16,r16,128
                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12b0:	197fffcc 	andi	r5,r3,65535
    12b4:	d8c00217 	ldw	r3,8(sp)
    12b8:	280ad07a 	srli	r5,r5,1
    12bc:	01c00044 	movi	r7,1
    12c0:	11bfffcc 	andi	r6,r2,65535
    12c4:	19102204 	addi	r4,r3,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12c8:	843fe004 	addi	r16,r16,-128
                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    12cc:	0000e8c0 	call	e8c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12d0:	80003d16 	blt	r16,zero,13c8 <main+0x4c4>
    12d4:	d8c00117 	ldw	r3,4(sp)
    12d8:	d8800017 	ldw	r2,0(sp)
    12dc:	8de3c83a 	sub	r17,r17,r23
    12e0:	9da7c83a 	sub	r19,r19,r22
    12e4:	9565c83a 	sub	r18,r18,r21
    12e8:	18a1c83a 	sub	r16,r3,r2
    12ec:	003f8e06 	br	1128 <__alt_data_end+0xff001128>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    12f0:	000f1d00 	call	f1d0 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    12f4:	000f20c0 	call	f20c <alt_timestamp>
    12f8:	1027883a 	mov	r19,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    12fc:	00004e00 	call	4e0 <cam_get_xsize>
    1300:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
    1304:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1308:	917fffcc 	andi	r5,r18,65535
    130c:	280ad07a 	srli	r5,r5,1
    1310:	11bfffcc 	andi	r6,r2,65535
    1314:	8809883a 	mov	r4,r17
    1318:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    131c:	000f20c0 	call	f20c <alt_timestamp>
    1320:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1324:	00008180 	call	818 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1328:	1009883a 	mov	r4,r2
    132c:	00017600 	call	1760 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1330:	0001c1c0 	call	1c1c <GetSobel_rgb>
    1334:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1338:	00004e00 	call	4e0 <cam_get_xsize>
    133c:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1340:	00005040 	call	504 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1344:	917fffcc 	andi	r5,r18,65535
    1348:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    134c:	84003fcc 	andi	r16,r16,255
    1350:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1354:	000f883a 	mov	r7,zero
    1358:	11bfffcc 	andi	r6,r2,65535
    135c:	af09883a 	add	r4,r21,fp
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1360:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1364:	0000e8c0 	call	e8c <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1368:	803f9f0e 	bge	r16,zero,11e8 <__alt_data_end+0xff0011e8>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    136c:	01000204 	movi	r4,8
    1370:	0001c3c0 	call	1c3c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1374:	a809883a 	mov	r4,r21
    1378:	0001c2c0 	call	1c2c <vga_set_pointer>
    137c:	003f9a06 	br	11e8 <__alt_data_end+0xff0011e8>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1380:	00004e00 	call	4e0 <cam_get_xsize>
    1384:	1025883a 	mov	r18,r2
		                	cam_get_ysize(),0);
    1388:	00005040 	call	504 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    138c:	917fffcc 	andi	r5,r18,65535
    1390:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1394:	84003fcc 	andi	r16,r16,255
    1398:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    139c:	000f883a 	mov	r7,zero
    13a0:	11bfffcc 	andi	r6,r2,65535
    13a4:	8f09883a 	add	r4,r17,fp
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    13a8:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    13ac:	0000e8c0 	call	e8c <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    13b0:	80000a16 	blt	r16,zero,13dc <main+0x4d8>
    13b4:	0021883a 	mov	r16,zero
    13b8:	0025883a 	mov	r18,zero
    13bc:	0027883a 	mov	r19,zero
    13c0:	0023883a 	mov	r17,zero
    13c4:	003f5806 	br	1128 <__alt_data_end+0xff001128>
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    13c8:	01000604 	movi	r4,24
    13cc:	0001c3c0 	call	1c3c <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    13d0:	d9000217 	ldw	r4,8(sp)
    13d4:	0001c2c0 	call	1c2c <vga_set_pointer>
    13d8:	003fbe06 	br	12d4 <__alt_data_end+0xff0012d4>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    13dc:	01000204 	movi	r4,8
    13e0:	0001c3c0 	call	1c3c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    13e4:	8809883a 	mov	r4,r17
    13e8:	0001c2c0 	call	1c2c <vga_set_pointer>
    13ec:	0021883a 	mov	r16,zero
    13f0:	0025883a 	mov	r18,zero
    13f4:	0027883a 	mov	r19,zero
    13f8:	0023883a 	mov	r17,zero
    13fc:	003f4a06 	br	1128 <__alt_data_end+0xff001128>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1400:	01000204 	movi	r4,8
    1404:	0001c3c0 	call	1c3c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1408:	b009883a 	mov	r4,r22
    140c:	0001c2c0 	call	1c2c <vga_set_pointer>
    1410:	003f4106 	br	1118 <__alt_data_end+0xff001118>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1414:	01000604 	movi	r4,24
    1418:	003fd506 	br	1370 <__alt_data_end+0xff001370>

0000141c <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    141c:	d0a71217 	ldw	r2,-25528(gp)
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1420:	defffd04 	addi	sp,sp,-12
    1424:	dc400115 	stw	r17,4(sp)
    1428:	dc000015 	stw	r16,0(sp)
    142c:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    1430:	d1270f15 	stw	r4,-25540(gp)
	sobel_height = height;
    1434:	d1671115 	stw	r5,-25532(gp)
unsigned short *sobel_rgb565;
unsigned char *sobel_result;
int sobel_width;
int sobel_height;

void init_sobel_arrays(int width , int height) {
    1438:	2023883a 	mov	r17,r4
    143c:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1440:	10000226 	beq	r2,zero,144c <init_sobel_arrays+0x30>
		free(sobel_x_result);
    1444:	1009883a 	mov	r4,r2
    1448:	0001e140 	call	1e14 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    144c:	8c21383a 	mul	r16,r17,r16
    1450:	8423883a 	add	r17,r16,r16
    1454:	8809883a 	mov	r4,r17
    1458:	0001e000 	call	1e00 <malloc>
	if (sobel_y_result != NULL)
    145c:	d1271317 	ldw	r4,-25524(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1460:	d0a71215 	stw	r2,-25528(gp)
	if (sobel_y_result != NULL)
    1464:	20000126 	beq	r4,zero,146c <init_sobel_arrays+0x50>
		free(sobel_y_result);
    1468:	0001e140 	call	1e14 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    146c:	8809883a 	mov	r4,r17
    1470:	0001e000 	call	1e00 <malloc>
	if (sobel_result != NULL)
    1474:	d1271017 	ldw	r4,-25536(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1478:	d0a71315 	stw	r2,-25524(gp)
	if (sobel_result != NULL)
    147c:	20000126 	beq	r4,zero,1484 <init_sobel_arrays+0x68>
		free(sobel_result);
    1480:	0001e140 	call	1e14 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1484:	8009883a 	mov	r4,r16
    1488:	0001e000 	call	1e00 <malloc>
	if (sobel_rgb565 != NULL)
    148c:	d1271417 	ldw	r4,-25520(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1490:	d0a71015 	stw	r2,-25536(gp)
	if (sobel_rgb565 != NULL)
    1494:	20000126 	beq	r4,zero,149c <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1498:	0001e140 	call	1e14 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    149c:	8809883a 	mov	r4,r17
    14a0:	0001e000 	call	1e00 <malloc>
    14a4:	d0a71415 	stw	r2,-25520(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    14a8:	0005883a 	mov	r2,zero
    14ac:	04000f0e 	bge	zero,r16,14ec <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    14b0:	d2271217 	ldw	r8,-25528(gp)
		sobel_y_result[loop] = 0;
    14b4:	d1e71317 	ldw	r7,-25524(gp)
		sobel_result[loop] = 0;
    14b8:	d1a71017 	ldw	r6,-25536(gp)
    14bc:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    14c0:	40d1883a 	add	r8,r8,r3
    14c4:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    14c8:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    14cc:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    14d0:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    14d4:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    14d8:	d1a71417 	ldw	r6,-25520(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    14dc:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    14e0:	30c7883a 	add	r3,r6,r3
    14e4:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    14e8:	80bff11e 	bne	r16,r2,14b0 <__alt_data_end+0xff0014b0>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    14ec:	dfc00217 	ldw	ra,8(sp)
    14f0:	dc400117 	ldw	r17,4(sp)
    14f4:	dc000017 	ldw	r16,0(sp)
    14f8:	dec00304 	addi	sp,sp,12
    14fc:	f800283a 	ret

00001500 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1500:	defff904 	addi	sp,sp,-28
    1504:	da400717 	ldw	r9,28(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1508:	30ffffc4 	addi	r3,r6,-1
    150c:	30800044 	addi	r2,r6,1
    1510:	3251383a 	mul	r8,r6,r9
    1514:	1a47383a 	mul	r3,r3,r9
    1518:	1245383a 	mul	r2,r2,r9
    151c:	29bfffc4 	addi	r6,r5,-1
    1520:	2b000044 	addi	r12,r5,1
    1524:	2211883a 	add	r8,r4,r8
    1528:	2155883a 	add	r10,r4,r5
    152c:	2193883a 	add	r9,r4,r6

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1530:	dfc00615 	stw	ra,24(sp)
    1534:	dd400515 	stw	r21,20(sp)
    1538:	dd000415 	stw	r20,16(sp)
    153c:	dcc00315 	stw	r19,12(sp)
    1540:	dc800215 	stw	r18,8(sp)
    1544:	dc400115 	stw	r17,4(sp)
    1548:	dc000015 	stw	r16,0(sp)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    154c:	2085883a 	add	r2,r4,r2
    1550:	415b883a 	add	r13,r8,r5
    1554:	4197883a 	add	r11,r8,r6
    1558:	50d5883a 	add	r10,r10,r3
    155c:	48d3883a 	add	r9,r9,r3
    1560:	2309883a 	add	r4,r4,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1564:	54400003 	ldbu	r17,0(r10)
    1568:	4c000003 	ldbu	r16,0(r9)
    156c:	3a800007 	ldb	r10,0(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1570:	20c9883a 	add	r4,r4,r3
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1574:	6c800003 	ldbu	r18,0(r13)
    1578:	5fc00003 	ldbu	ra,0(r11)
    157c:	3b400107 	ldb	r13,4(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1580:	4317883a 	add	r11,r8,r12
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1584:	3a4000c7 	ldb	r9,3(r7)
                   pixels[(y+dy)*width+(x+dx)];
    1588:	118d883a 	add	r6,r2,r6
    158c:	114b883a 	add	r5,r2,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1590:	3b800047 	ldb	r14,1(r7)
    1594:	25000003 	ldbu	r20,0(r4)
    1598:	3a000087 	ldb	r8,2(r7)
    159c:	5cc00003 	ldbu	r19,0(r11)
    15a0:	39000147 	ldb	r4,5(r7)
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15a4:	33c00003 	ldbu	r15,0(r6)
    15a8:	3ac00187 	ldb	r11,6(r7)
    15ac:	2d400003 	ldbu	r21,0(r5)
    15b0:	398001c7 	ldb	r6,7(r7)
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    15b4:	130b883a 	add	r5,r2,r12
      }
   }
   return result;
    15b8:	2b000003 	ldbu	r12,0(r5)
    15bc:	39400207 	ldb	r5,8(r7)
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15c0:	8295383a 	mul	r10,r16,r10
    15c4:	8b8f383a 	mul	r7,r17,r14
    15c8:	9347383a 	mul	r3,r18,r13
    15cc:	fa53383a 	mul	r9,ra,r9
    15d0:	a211383a 	mul	r8,r20,r8
    15d4:	9909383a 	mul	r4,r19,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15d8:	7ac5383a 	mul	r2,r15,r11
    15dc:	a98d383a 	mul	r6,r21,r6
    15e0:	614b383a 	mul	r5,r12,r5
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15e4:	3a8f883a 	add	r7,r7,r10
    15e8:	1a47883a 	add	r3,r3,r9
    15ec:	3a0f883a 	add	r7,r7,r8
    15f0:	1907883a 	add	r3,r3,r4
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15f4:	1185883a 	add	r2,r2,r6
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    15f8:	38c7883a 	add	r3,r7,r3
                   pixels[(y+dy)*width+(x+dx)];
      }
   }
   return result;
    15fc:	1145883a 	add	r2,r2,r5
}
    1600:	1885883a 	add	r2,r3,r2
    1604:	dfc00617 	ldw	ra,24(sp)
    1608:	dd400517 	ldw	r21,20(sp)
    160c:	dd000417 	ldw	r20,16(sp)
    1610:	dcc00317 	ldw	r19,12(sp)
    1614:	dc800217 	ldw	r18,8(sp)
    1618:	dc400117 	ldw	r17,4(sp)
    161c:	dc000017 	ldw	r16,0(sp)
    1620:	dec00704 	addi	sp,sp,28
    1624:	f800283a 	ret

00001628 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1628:	defff704 	addi	sp,sp,-36
    162c:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1630:	d4671117 	ldw	r17,-25532(gp)
      }
   }
   return result;
}

void sobel_x( unsigned char *source ) {
    1634:	dfc00815 	stw	ra,32(sp)
    1638:	ddc00715 	stw	r23,28(sp)
    163c:	dd800615 	stw	r22,24(sp)
    1640:	dd400515 	stw	r21,20(sp)
    1644:	dd000415 	stw	r20,16(sp)
    1648:	dcc00315 	stw	r19,12(sp)
    164c:	dc800215 	stw	r18,8(sp)
    1650:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1654:	8c7fffc4 	addi	r17,r17,-1
    1658:	00800044 	movi	r2,1
    165c:	14402e0e 	bge	r2,r17,1718 <sobel_x+0xf0>
    1660:	d3670f17 	ldw	r13,-25540(gp)
    1664:	d3e71217 	ldw	r15,-25528(gp)
    1668:	03800084 	movi	r14,2
    166c:	6b65883a 	add	r18,r13,r13
    1670:	9385883a 	add	r2,r18,r14
    1674:	2359883a 	add	r12,r4,r13
    1678:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    167c:	7027883a 	mov	r19,r14
    1680:	736bc83a 	sub	r21,r14,r13
    1684:	6ba9883a 	add	r20,r13,r14
    1688:	9b402e0e 	bge	r19,r13,1744 <sobel_x+0x11c>
    168c:	637f883a 	add	ra,r12,r13
    1690:	7021883a 	mov	r16,r14
    1694:	6357c83a 	sub	r11,r12,r13
    1698:	ab0b883a 	add	r5,r21,r12
    169c:	62800084 	addi	r10,r12,2
    16a0:	f813883a 	mov	r9,ra
    16a4:	a311883a 	add	r8,r20,r12
    16a8:	780f883a 	mov	r7,r15
    16ac:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    16b0:	2d800003 	ldbu	r22,0(r5)
    16b4:	40c00003 	ldbu	r3,0(r8)
    16b8:	31000003 	ldbu	r4,0(r6)
    16bc:	50800003 	ldbu	r2,0(r10)
    16c0:	b0c7883a 	add	r3,r22,r3
    16c4:	5dc00003 	ldbu	r23,0(r11)
    16c8:	1907c83a 	sub	r3,r3,r4
    16cc:	4d800003 	ldbu	r22,0(r9)
    16d0:	1909c83a 	sub	r4,r3,r4
    16d4:	1087883a 	add	r3,r2,r2
    16d8:	20c7883a 	add	r3,r4,r3
    16dc:	1dc5c83a 	sub	r2,r3,r23
    16e0:	1585c83a 	sub	r2,r2,r22
    16e4:	3880000d 	sth	r2,0(r7)
    16e8:	29400044 	addi	r5,r5,1
    16ec:	5ac00044 	addi	r11,r11,1
    16f0:	31800044 	addi	r6,r6,1
    16f4:	52800044 	addi	r10,r10,1
    16f8:	4a400044 	addi	r9,r9,1
    16fc:	42000044 	addi	r8,r8,1
    1700:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1704:	617fea1e 	bne	r12,r5,16b0 <__alt_data_end+0xff0016b0>
    1708:	73800044 	addi	r14,r14,1
    170c:	f819883a 	mov	r12,ra
    1710:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1714:	847fdc16 	blt	r16,r17,1688 <__alt_data_end+0xff001688>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1718:	dfc00817 	ldw	ra,32(sp)
    171c:	ddc00717 	ldw	r23,28(sp)
    1720:	dd800617 	ldw	r22,24(sp)
    1724:	dd400517 	ldw	r21,20(sp)
    1728:	dd000417 	ldw	r20,16(sp)
    172c:	dcc00317 	ldw	r19,12(sp)
    1730:	dc800217 	ldw	r18,8(sp)
    1734:	dc400117 	ldw	r17,4(sp)
    1738:	dc000017 	ldw	r16,0(sp)
    173c:	dec00904 	addi	sp,sp,36
    1740:	f800283a 	ret
    1744:	7021883a 	mov	r16,r14
    1748:	637f883a 	add	ra,r12,r13
    174c:	73800044 	addi	r14,r14,1
    1750:	f819883a 	mov	r12,ra
    1754:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1758:	847fcb16 	blt	r16,r17,1688 <__alt_data_end+0xff001688>
    175c:	003fee06 	br	1718 <__alt_data_end+0xff001718>

00001760 <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1760:	defff604 	addi	sp,sp,-40
    1764:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1768:	d4e71117 	ldw	r19,-25532(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    176c:	dfc00915 	stw	ra,36(sp)
    1770:	df000815 	stw	fp,32(sp)
    1774:	ddc00715 	stw	r23,28(sp)
    1778:	dd800615 	stw	r22,24(sp)
    177c:	dd400515 	stw	r21,20(sp)
    1780:	dd000415 	stw	r20,16(sp)
    1784:	dc800215 	stw	r18,8(sp)
    1788:	dc400115 	stw	r17,4(sp)
    178c:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1790:	00800084 	movi	r2,2
    1794:	14c03b0e 	bge	r2,r19,1884 <sobel_x_with_rgb+0x124>
    1798:	2025883a 	mov	r18,r4
    179c:	d1270f17 	ldw	r4,-25540(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    17a0:	d5671217 	ldw	r21,-25528(gp)
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    17a4:	d5271417 	ldw	r20,-25520(gp)
    17a8:	23ffffc4 	addi	r15,r4,-1
    17ac:	908f883a 	add	r7,r18,r2
    17b0:	9cffffc4 	addi	r19,r19,-1
    17b4:	200d883a 	mov	r6,r4
    17b8:	04000044 	movi	r16,1
    17bc:	31400044 	addi	r5,r6,1
    17c0:	294b883a 	add	r5,r5,r5
    17c4:	393f883a 	add	ra,r7,r4
    17c8:	a15b883a 	add	r13,r20,r5
    17cc:	3123883a 	add	r17,r6,r4
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    17d0:	02000044 	movi	r8,1
    17d4:	84000044 	addi	r16,r16,1
    17d8:	3b3fff84 	addi	r12,r7,-2
    17dc:	918d883a 	add	r6,r18,r6
    17e0:	9457883a 	add	r11,r18,r17
    17e4:	27d5883a 	add	r10,r4,ra
    17e8:	a94b883a 	add	r5,r21,r5
    17ec:	f813883a 	mov	r9,ra
    17f0:	681d883a 	mov	r14,r13
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17f4:	43c0200e 	bge	r8,r15,1878 <sobel_x_with_rgb+0x118>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    17f8:	50800003 	ldbu	r2,0(r10)
    17fc:	3dc00003 	ldbu	r23,0(r7)
    1800:	37000003 	ldbu	fp,0(r6)
    1804:	48c00003 	ldbu	r3,0(r9)
    1808:	b8af883a 	add	r23,r23,r2
    180c:	65800003 	ldbu	r22,0(r12)
    1810:	bf2fc83a 	sub	r23,r23,fp
    1814:	58800003 	ldbu	r2,0(r11)
    1818:	bf2fc83a 	sub	r23,r23,fp
    181c:	18c7883a 	add	r3,r3,r3
    1820:	b8c7883a 	add	r3,r23,r3
    1824:	1d87c83a 	sub	r3,r3,r22
    1828:	1885c83a 	sub	r2,r3,r2
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    182c:	2880000d 	sth	r2,0(r5)
          if (result < 0) {
    1830:	10bfffcc 	andi	r2,r2,65535
    1834:	10a0001c 	xori	r2,r2,32768
    1838:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    183c:	1007d0fa 	srai	r3,r2,3
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
                   pixels[(y+dy)*width+(x+dx)];
    1840:	42000044 	addi	r8,r8,1

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    1844:	10001b16 	blt	r2,zero,18b4 <sobel_x_with_rgb+0x154>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1848:	180692fa 	slli	r3,r3,11
    184c:	68c0000d 	sth	r3,0(r13)
    1850:	73800084 	addi	r14,r14,2
    1854:	6b400084 	addi	r13,r13,2
    1858:	63000044 	addi	r12,r12,1
    185c:	39c00044 	addi	r7,r7,1
    1860:	31800044 	addi	r6,r6,1
    1864:	4a400044 	addi	r9,r9,1
    1868:	5ac00044 	addi	r11,r11,1
    186c:	52800044 	addi	r10,r10,1
    1870:	29400084 	addi	r5,r5,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1874:	43ffe016 	blt	r8,r15,17f8 <__alt_data_end+0xff0017f8>
    1878:	880d883a 	mov	r6,r17
    187c:	f80f883a 	mov	r7,ra

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1880:	9c3fce1e 	bne	r19,r16,17bc <__alt_data_end+0xff0017bc>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1884:	dfc00917 	ldw	ra,36(sp)
    1888:	df000817 	ldw	fp,32(sp)
    188c:	ddc00717 	ldw	r23,28(sp)
    1890:	dd800617 	ldw	r22,24(sp)
    1894:	dd400517 	ldw	r21,20(sp)
    1898:	dd000417 	ldw	r20,16(sp)
    189c:	dcc00317 	ldw	r19,12(sp)
    18a0:	dc800217 	ldw	r18,8(sp)
    18a4:	dc400117 	ldw	r17,4(sp)
    18a8:	dc000017 	ldw	r16,0(sp)
    18ac:	dec00a04 	addi	sp,sp,40
    18b0:	f800283a 	ret
   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    18b4:	0085c83a 	sub	r2,zero,r2
    18b8:	1005d0ba 	srai	r2,r2,2
    18bc:	1004917a 	slli	r2,r2,5
    18c0:	7080000d 	sth	r2,0(r14)
    18c4:	003fe206 	br	1850 <__alt_data_end+0xff001850>

000018c8 <sobel_y>:
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    18c8:	defff704 	addi	sp,sp,-36
    18cc:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18d0:	d4671117 	ldw	r17,-25532(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    18d4:	dfc00815 	stw	ra,32(sp)
    18d8:	ddc00715 	stw	r23,28(sp)
    18dc:	dd800615 	stw	r22,24(sp)
    18e0:	dd400515 	stw	r21,20(sp)
    18e4:	dd000415 	stw	r20,16(sp)
    18e8:	dcc00315 	stw	r19,12(sp)
    18ec:	dc800215 	stw	r18,8(sp)
    18f0:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18f4:	8c7fffc4 	addi	r17,r17,-1
    18f8:	00800044 	movi	r2,1
    18fc:	14402e0e 	bge	r2,r17,19b8 <sobel_y+0xf0>
    1900:	d3e70f17 	ldw	r15,-25540(gp)
    1904:	d3a71317 	ldw	r14,-25524(gp)
    1908:	03400084 	movi	r13,2
    190c:	7bff883a 	add	ra,r15,r15
    1910:	fb67883a 	add	r19,ra,r13
    1914:	2019883a 	mov	r12,r4
    1918:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    191c:	6825883a 	mov	r18,r13
    1920:	f8a9883a 	add	r20,ra,r2
    1924:	6821883a 	mov	r16,r13
    1928:	93c01f0e 	bge	r18,r15,19a8 <sobel_y+0xe0>
    192c:	67cb883a 	add	r5,r12,ra
    1930:	6821883a 	mov	r16,r13
    1934:	62800044 	addi	r10,r12,1
    1938:	61000084 	addi	r4,r12,2
    193c:	a313883a 	add	r9,r20,r12
    1940:	9b11883a 	add	r8,r19,r12
    1944:	2bd7c83a 	sub	r11,r5,r15
    1948:	700f883a 	mov	r7,r14
    194c:	600d883a 	mov	r6,r12
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1950:	35800003 	ldbu	r22,0(r6)
    1954:	20c00003 	ldbu	r3,0(r4)
    1958:	50800003 	ldbu	r2,0(r10)
    195c:	4d400003 	ldbu	r21,0(r9)
    1960:	b0c7883a 	add	r3,r22,r3
    1964:	1085883a 	add	r2,r2,r2
    1968:	2dc00003 	ldbu	r23,0(r5)
    196c:	1887883a 	add	r3,r3,r2
    1970:	45800003 	ldbu	r22,0(r8)
    1974:	1d47c83a 	sub	r3,r3,r21
    1978:	1d47c83a 	sub	r3,r3,r21
    197c:	1dc5c83a 	sub	r2,r3,r23
    1980:	1585c83a 	sub	r2,r2,r22
    1984:	3880000d 	sth	r2,0(r7)
    1988:	21000044 	addi	r4,r4,1
    198c:	31800044 	addi	r6,r6,1
    1990:	52800044 	addi	r10,r10,1
    1994:	29400044 	addi	r5,r5,1
    1998:	4a400044 	addi	r9,r9,1
    199c:	42000044 	addi	r8,r8,1
    19a0:	39c00084 	addi	r7,r7,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    19a4:	593fea1e 	bne	r11,r4,1950 <__alt_data_end+0xff001950>
    19a8:	6b400044 	addi	r13,r13,1
    19ac:	63d9883a 	add	r12,r12,r15
    19b0:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19b4:	847fdb16 	blt	r16,r17,1924 <__alt_data_end+0xff001924>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    19b8:	dfc00817 	ldw	ra,32(sp)
    19bc:	ddc00717 	ldw	r23,28(sp)
    19c0:	dd800617 	ldw	r22,24(sp)
    19c4:	dd400517 	ldw	r21,20(sp)
    19c8:	dd000417 	ldw	r20,16(sp)
    19cc:	dcc00317 	ldw	r19,12(sp)
    19d0:	dc800217 	ldw	r18,8(sp)
    19d4:	dc400117 	ldw	r17,4(sp)
    19d8:	dc000017 	ldw	r16,0(sp)
    19dc:	dec00904 	addi	sp,sp,36
    19e0:	f800283a 	ret

000019e4 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    19e4:	defff504 	addi	sp,sp,-44
    19e8:	dd400615 	stw	r21,24(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19ec:	d5671117 	ldw	r21,-25532(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    19f0:	dfc00a15 	stw	ra,40(sp)
    19f4:	df000915 	stw	fp,36(sp)
    19f8:	ddc00815 	stw	r23,32(sp)
    19fc:	dd800715 	stw	r22,28(sp)
    1a00:	dd000515 	stw	r20,20(sp)
    1a04:	dcc00415 	stw	r19,16(sp)
    1a08:	dc800315 	stw	r18,12(sp)
    1a0c:	dc400215 	stw	r17,8(sp)
    1a10:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a14:	00800084 	movi	r2,2
    1a18:	1540470e 	bge	r2,r21,1b38 <sobel_y_with_rgb+0x154>
    1a1c:	d4270f17 	ldw	r16,-25540(gp)
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1a20:	d7271317 	ldw	fp,-25524(gp)
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1a24:	d5e71417 	ldw	r23,-25520(gp)
    1a28:	842d883a 	add	r22,r16,r16
    1a2c:	2029883a 	mov	r20,r4
    1a30:	25bf883a 	add	ra,r4,r22
    1a34:	80c00084 	addi	r3,r16,2
    1a38:	813fffc4 	addi	r4,r16,-1
    1a3c:	a2800044 	addi	r10,r20,1
    1a40:	07ffc83a 	sub	ra,zero,ra
    1a44:	ad7fffc4 	addi	r21,r21,-1
    1a48:	8005883a 	mov	r2,r16
    1a4c:	04400044 	movi	r17,1
    1a50:	d8c00015 	stw	r3,0(sp)
    1a54:	d8c00017 	ldw	r3,0(sp)
    1a58:	12000044 	addi	r8,r2,1
    1a5c:	4211883a 	add	r8,r8,r8
    1a60:	ba1d883a 	add	r14,r23,r8
    1a64:	1427883a 	add	r19,r2,r16
    1a68:	55a5883a 	add	r18,r10,r22
    1a6c:	1885883a 	add	r2,r3,r2
    1a70:	8c400044 	addi	r17,r17,1
    1a74:	537fffc4 	addi	r13,r10,-1
    1a78:	53000044 	addi	r12,r10,1
    1a7c:	a4d7883a 	add	r11,r20,r19
    1a80:	a093883a 	add	r9,r20,r2
    1a84:	e211883a 	add	r8,fp,r8
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    1a88:	900f883a 	mov	r7,r18
    1a8c:	701f883a 	mov	r15,r14
    1a90:	00000b06 	br	1ac0 <sobel_y_with_rgb+0xdc>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1a94:	180692fa 	slli	r3,r3,11
    1a98:	70c0000d 	sth	r3,0(r14)
    1a9c:	7bc00084 	addi	r15,r15,2
    1aa0:	73800084 	addi	r14,r14,2
    1aa4:	6b400044 	addi	r13,r13,1
    1aa8:	52800044 	addi	r10,r10,1
    1aac:	63000044 	addi	r12,r12,1
    1ab0:	5ac00044 	addi	r11,r11,1
    1ab4:	39c00044 	addi	r7,r7,1
    1ab8:	4a400044 	addi	r9,r9,1
    1abc:	42000084 	addi	r8,r8,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ac0:	3fc5883a 	add	r2,r7,ra
    1ac4:	1100180e 	bge	r2,r4,1b28 <sobel_y_with_rgb+0x144>
                 unsigned int width ) {
   short dy,dx;
   short result = 0;
   for (dy = -1 ; dy < 2 ; dy++) {
      for (dx = -1 ; dx < 2 ; dx++) {
         result += filter[(dy+1)*3+(dx+1)]*
    1ac8:	60800003 	ldbu	r2,0(r12)
    1acc:	69800003 	ldbu	r6,0(r13)
    1ad0:	50c00003 	ldbu	r3,0(r10)
    1ad4:	39400003 	ldbu	r5,0(r7)
    1ad8:	308d883a 	add	r6,r6,r2
    1adc:	18c7883a 	add	r3,r3,r3
    1ae0:	58800003 	ldbu	r2,0(r11)
    1ae4:	30c7883a 	add	r3,r6,r3
    1ae8:	1947c83a 	sub	r3,r3,r5
    1aec:	49800003 	ldbu	r6,0(r9)
    1af0:	1947c83a 	sub	r3,r3,r5
    1af4:	1885c83a 	sub	r2,r3,r2
    1af8:	1185c83a 	sub	r2,r2,r6
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1afc:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    1b00:	10bfffcc 	andi	r2,r2,65535
    1b04:	10a0001c 	xori	r2,r2,32768
    1b08:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1b0c:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    1b10:	103fe00e 	bge	r2,zero,1a94 <__alt_data_end+0xff001a94>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1b14:	0085c83a 	sub	r2,zero,r2
    1b18:	1005d0ba 	srai	r2,r2,2
    1b1c:	1004917a 	slli	r2,r2,5
    1b20:	7880000d 	sth	r2,0(r15)
    1b24:	003fdd06 	br	1a9c <__alt_data_end+0xff001a9c>
    1b28:	9415c83a 	sub	r10,r18,r16
    1b2c:	fc3fc83a 	sub	ra,ra,r16
    1b30:	9805883a 	mov	r2,r19

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b34:	ac7fc71e 	bne	r21,r17,1a54 <__alt_data_end+0xff001a54>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1b38:	dfc00a17 	ldw	ra,40(sp)
    1b3c:	df000917 	ldw	fp,36(sp)
    1b40:	ddc00817 	ldw	r23,32(sp)
    1b44:	dd800717 	ldw	r22,28(sp)
    1b48:	dd400617 	ldw	r21,24(sp)
    1b4c:	dd000517 	ldw	r20,20(sp)
    1b50:	dcc00417 	ldw	r19,16(sp)
    1b54:	dc800317 	ldw	r18,12(sp)
    1b58:	dc400217 	ldw	r17,8(sp)
    1b5c:	dc000117 	ldw	r16,4(sp)
    1b60:	dec00b04 	addi	sp,sp,44
    1b64:	f800283a 	ret

00001b68 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b68:	d0a71117 	ldw	r2,-25532(gp)
    1b6c:	02400084 	movi	r9,2
    1b70:	4880290e 	bge	r9,r2,1c18 <sobel_threshold+0xb0>
    1b74:	223fffcc 	andi	r8,r4,65535
    1b78:	d0e70f17 	ldw	r3,-25540(gp)
    1b7c:	4220001c 	xori	r8,r8,32768
    1b80:	01c00044 	movi	r7,1
    1b84:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b88:	48c0200e 	bge	r9,r3,1c0c <sobel_threshold+0xa4>
    1b8c:	01400044 	movi	r5,1
    1b90:	00000c06 	br	1bc4 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1b94:	2080000f 	ldh	r2,0(r4)
    1b98:	10001916 	blt	r2,zero,1c00 <sobel_threshold+0x98>
    1b9c:	3085883a 	add	r2,r6,r2
    1ba0:	10bfffcc 	andi	r2,r2,65535
    1ba4:	10a0001c 	xori	r2,r2,32768
    1ba8:	10a00004 	addi	r2,r2,-32768
    1bac:	4084803a 	cmplt	r2,r8,r2
    1bb0:	0085c83a 	sub	r2,zero,r2
    1bb4:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1bb8:	d0e70f17 	ldw	r3,-25540(gp)
    1bbc:	18bfffc4 	addi	r2,r3,-1
    1bc0:	2880110e 	bge	r5,r2,1c08 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1bc4:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1bc8:	d1a71317 	ldw	r6,-25524(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1bcc:	d1271217 	ldw	r4,-25528(gp)
    1bd0:	1947883a 	add	r3,r3,r5
    1bd4:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1bd8:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1bdc:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1be0:	3180000f 	ldh	r6,0(r6)
    1be4:	d0a71017 	ldw	r2,-25536(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1be8:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1bec:	10c7883a 	add	r3,r2,r3
    1bf0:	303fe80e 	bge	r6,zero,1b94 <__alt_data_end+0xff001b94>
    1bf4:	2080000f 	ldh	r2,0(r4)
    1bf8:	018dc83a 	sub	r6,zero,r6
    1bfc:	103fe70e 	bge	r2,zero,1b9c <__alt_data_end+0xff001b9c>
    1c00:	0085c83a 	sub	r2,zero,r2
    1c04:	003fe506 	br	1b9c <__alt_data_end+0xff001b9c>
    1c08:	d0a71117 	ldw	r2,-25532(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1c0c:	39c00044 	addi	r7,r7,1
    1c10:	113fffc4 	addi	r4,r2,-1
    1c14:	393fdc16 	blt	r7,r4,1b88 <__alt_data_end+0xff001b88>
    1c18:	f800283a 	ret

00001c1c <GetSobel_rgb>:
	}
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1c1c:	d0a71417 	ldw	r2,-25520(gp)
    1c20:	f800283a 	ret

00001c24 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1c24:	d0a71017 	ldw	r2,-25536(gp)
    1c28:	f800283a 	ret

00001c2c <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1c2c:	00804034 	movhi	r2,256
    1c30:	10843404 	addi	r2,r2,4304
    1c34:	11000035 	stwio	r4,0(r2)
    1c38:	f800283a 	ret

00001c3c <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1c3c:	00804034 	movhi	r2,256
    1c40:	10843504 	addi	r2,r2,4308
    1c44:	11000025 	stbio	r4,0(r2)
    1c48:	f800283a 	ret

00001c4c <__divsi3>:
    1c4c:	20001b16 	blt	r4,zero,1cbc <__divsi3+0x70>
    1c50:	000f883a 	mov	r7,zero
    1c54:	28001616 	blt	r5,zero,1cb0 <__divsi3+0x64>
    1c58:	200d883a 	mov	r6,r4
    1c5c:	29001a2e 	bgeu	r5,r4,1cc8 <__divsi3+0x7c>
    1c60:	00800804 	movi	r2,32
    1c64:	00c00044 	movi	r3,1
    1c68:	00000106 	br	1c70 <__divsi3+0x24>
    1c6c:	10000d26 	beq	r2,zero,1ca4 <__divsi3+0x58>
    1c70:	294b883a 	add	r5,r5,r5
    1c74:	10bfffc4 	addi	r2,r2,-1
    1c78:	18c7883a 	add	r3,r3,r3
    1c7c:	293ffb36 	bltu	r5,r4,1c6c <__alt_data_end+0xff001c6c>
    1c80:	0005883a 	mov	r2,zero
    1c84:	18000726 	beq	r3,zero,1ca4 <__divsi3+0x58>
    1c88:	0005883a 	mov	r2,zero
    1c8c:	31400236 	bltu	r6,r5,1c98 <__divsi3+0x4c>
    1c90:	314dc83a 	sub	r6,r6,r5
    1c94:	10c4b03a 	or	r2,r2,r3
    1c98:	1806d07a 	srli	r3,r3,1
    1c9c:	280ad07a 	srli	r5,r5,1
    1ca0:	183ffa1e 	bne	r3,zero,1c8c <__alt_data_end+0xff001c8c>
    1ca4:	38000126 	beq	r7,zero,1cac <__divsi3+0x60>
    1ca8:	0085c83a 	sub	r2,zero,r2
    1cac:	f800283a 	ret
    1cb0:	014bc83a 	sub	r5,zero,r5
    1cb4:	39c0005c 	xori	r7,r7,1
    1cb8:	003fe706 	br	1c58 <__alt_data_end+0xff001c58>
    1cbc:	0109c83a 	sub	r4,zero,r4
    1cc0:	01c00044 	movi	r7,1
    1cc4:	003fe306 	br	1c54 <__alt_data_end+0xff001c54>
    1cc8:	00c00044 	movi	r3,1
    1ccc:	003fee06 	br	1c88 <__alt_data_end+0xff001c88>

00001cd0 <__modsi3>:
    1cd0:	20001716 	blt	r4,zero,1d30 <__modsi3+0x60>
    1cd4:	000f883a 	mov	r7,zero
    1cd8:	2005883a 	mov	r2,r4
    1cdc:	28001216 	blt	r5,zero,1d28 <__modsi3+0x58>
    1ce0:	2900162e 	bgeu	r5,r4,1d3c <__modsi3+0x6c>
    1ce4:	01800804 	movi	r6,32
    1ce8:	00c00044 	movi	r3,1
    1cec:	00000106 	br	1cf4 <__modsi3+0x24>
    1cf0:	30000a26 	beq	r6,zero,1d1c <__modsi3+0x4c>
    1cf4:	294b883a 	add	r5,r5,r5
    1cf8:	31bfffc4 	addi	r6,r6,-1
    1cfc:	18c7883a 	add	r3,r3,r3
    1d00:	293ffb36 	bltu	r5,r4,1cf0 <__alt_data_end+0xff001cf0>
    1d04:	18000526 	beq	r3,zero,1d1c <__modsi3+0x4c>
    1d08:	1806d07a 	srli	r3,r3,1
    1d0c:	11400136 	bltu	r2,r5,1d14 <__modsi3+0x44>
    1d10:	1145c83a 	sub	r2,r2,r5
    1d14:	280ad07a 	srli	r5,r5,1
    1d18:	183ffb1e 	bne	r3,zero,1d08 <__alt_data_end+0xff001d08>
    1d1c:	38000126 	beq	r7,zero,1d24 <__modsi3+0x54>
    1d20:	0085c83a 	sub	r2,zero,r2
    1d24:	f800283a 	ret
    1d28:	014bc83a 	sub	r5,zero,r5
    1d2c:	003fec06 	br	1ce0 <__alt_data_end+0xff001ce0>
    1d30:	0109c83a 	sub	r4,zero,r4
    1d34:	01c00044 	movi	r7,1
    1d38:	003fe706 	br	1cd8 <__alt_data_end+0xff001cd8>
    1d3c:	00c00044 	movi	r3,1
    1d40:	003ff106 	br	1d08 <__alt_data_end+0xff001d08>

00001d44 <__udivsi3>:
    1d44:	200d883a 	mov	r6,r4
    1d48:	2900152e 	bgeu	r5,r4,1da0 <__udivsi3+0x5c>
    1d4c:	28001416 	blt	r5,zero,1da0 <__udivsi3+0x5c>
    1d50:	00800804 	movi	r2,32
    1d54:	00c00044 	movi	r3,1
    1d58:	00000206 	br	1d64 <__udivsi3+0x20>
    1d5c:	10000e26 	beq	r2,zero,1d98 <__udivsi3+0x54>
    1d60:	28000516 	blt	r5,zero,1d78 <__udivsi3+0x34>
    1d64:	294b883a 	add	r5,r5,r5
    1d68:	10bfffc4 	addi	r2,r2,-1
    1d6c:	18c7883a 	add	r3,r3,r3
    1d70:	293ffa36 	bltu	r5,r4,1d5c <__alt_data_end+0xff001d5c>
    1d74:	18000826 	beq	r3,zero,1d98 <__udivsi3+0x54>
    1d78:	0005883a 	mov	r2,zero
    1d7c:	31400236 	bltu	r6,r5,1d88 <__udivsi3+0x44>
    1d80:	314dc83a 	sub	r6,r6,r5
    1d84:	10c4b03a 	or	r2,r2,r3
    1d88:	1806d07a 	srli	r3,r3,1
    1d8c:	280ad07a 	srli	r5,r5,1
    1d90:	183ffa1e 	bne	r3,zero,1d7c <__alt_data_end+0xff001d7c>
    1d94:	f800283a 	ret
    1d98:	0005883a 	mov	r2,zero
    1d9c:	f800283a 	ret
    1da0:	00c00044 	movi	r3,1
    1da4:	003ff406 	br	1d78 <__alt_data_end+0xff001d78>

00001da8 <__umodsi3>:
    1da8:	2005883a 	mov	r2,r4
    1dac:	2900122e 	bgeu	r5,r4,1df8 <__umodsi3+0x50>
    1db0:	28001116 	blt	r5,zero,1df8 <__umodsi3+0x50>
    1db4:	01800804 	movi	r6,32
    1db8:	00c00044 	movi	r3,1
    1dbc:	00000206 	br	1dc8 <__umodsi3+0x20>
    1dc0:	30000c26 	beq	r6,zero,1df4 <__umodsi3+0x4c>
    1dc4:	28000516 	blt	r5,zero,1ddc <__umodsi3+0x34>
    1dc8:	294b883a 	add	r5,r5,r5
    1dcc:	31bfffc4 	addi	r6,r6,-1
    1dd0:	18c7883a 	add	r3,r3,r3
    1dd4:	293ffa36 	bltu	r5,r4,1dc0 <__alt_data_end+0xff001dc0>
    1dd8:	18000626 	beq	r3,zero,1df4 <__umodsi3+0x4c>
    1ddc:	1806d07a 	srli	r3,r3,1
    1de0:	11400136 	bltu	r2,r5,1de8 <__umodsi3+0x40>
    1de4:	1145c83a 	sub	r2,r2,r5
    1de8:	280ad07a 	srli	r5,r5,1
    1dec:	183ffb1e 	bne	r3,zero,1ddc <__alt_data_end+0xff001ddc>
    1df0:	f800283a 	ret
    1df4:	f800283a 	ret
    1df8:	00c00044 	movi	r3,1
    1dfc:	003ff706 	br	1ddc <__alt_data_end+0xff001ddc>

00001e00 <malloc>:
    1e00:	00800074 	movhi	r2,1
    1e04:	10889004 	addi	r2,r2,8768
    1e08:	200b883a 	mov	r5,r4
    1e0c:	11000017 	ldw	r4,0(r2)
    1e10:	0001e281 	jmpi	1e28 <_malloc_r>

00001e14 <free>:
    1e14:	00800074 	movhi	r2,1
    1e18:	10889004 	addi	r2,r2,8768
    1e1c:	200b883a 	mov	r5,r4
    1e20:	11000017 	ldw	r4,0(r2)
    1e24:	0006c781 	jmpi	6c78 <_free_r>

00001e28 <_malloc_r>:
    1e28:	defff504 	addi	sp,sp,-44
    1e2c:	dc800315 	stw	r18,12(sp)
    1e30:	dfc00a15 	stw	ra,40(sp)
    1e34:	df000915 	stw	fp,36(sp)
    1e38:	ddc00815 	stw	r23,32(sp)
    1e3c:	dd800715 	stw	r22,28(sp)
    1e40:	dd400615 	stw	r21,24(sp)
    1e44:	dd000515 	stw	r20,20(sp)
    1e48:	dcc00415 	stw	r19,16(sp)
    1e4c:	dc400215 	stw	r17,8(sp)
    1e50:	dc000115 	stw	r16,4(sp)
    1e54:	288002c4 	addi	r2,r5,11
    1e58:	00c00584 	movi	r3,22
    1e5c:	2025883a 	mov	r18,r4
    1e60:	18807f2e 	bgeu	r3,r2,2060 <_malloc_r+0x238>
    1e64:	047ffe04 	movi	r17,-8
    1e68:	1462703a 	and	r17,r2,r17
    1e6c:	8800a316 	blt	r17,zero,20fc <_malloc_r+0x2d4>
    1e70:	8940a236 	bltu	r17,r5,20fc <_malloc_r+0x2d4>
    1e74:	000e8fc0 	call	e8fc <__malloc_lock>
    1e78:	00807dc4 	movi	r2,503
    1e7c:	1441e92e 	bgeu	r2,r17,2624 <_malloc_r+0x7fc>
    1e80:	8804d27a 	srli	r2,r17,9
    1e84:	1000a126 	beq	r2,zero,210c <_malloc_r+0x2e4>
    1e88:	00c00104 	movi	r3,4
    1e8c:	18811e36 	bltu	r3,r2,2308 <_malloc_r+0x4e0>
    1e90:	8804d1ba 	srli	r2,r17,6
    1e94:	12000e44 	addi	r8,r2,57
    1e98:	11c00e04 	addi	r7,r2,56
    1e9c:	4209883a 	add	r4,r8,r8
    1ea0:	04c00074 	movhi	r19,1
    1ea4:	2109883a 	add	r4,r4,r4
    1ea8:	9cc1e204 	addi	r19,r19,1928
    1eac:	2109883a 	add	r4,r4,r4
    1eb0:	9909883a 	add	r4,r19,r4
    1eb4:	24000117 	ldw	r16,4(r4)
    1eb8:	213ffe04 	addi	r4,r4,-8
    1ebc:	24009726 	beq	r4,r16,211c <_malloc_r+0x2f4>
    1ec0:	80800117 	ldw	r2,4(r16)
    1ec4:	01bfff04 	movi	r6,-4
    1ec8:	014003c4 	movi	r5,15
    1ecc:	1184703a 	and	r2,r2,r6
    1ed0:	1447c83a 	sub	r3,r2,r17
    1ed4:	28c00716 	blt	r5,r3,1ef4 <_malloc_r+0xcc>
    1ed8:	1800920e 	bge	r3,zero,2124 <_malloc_r+0x2fc>
    1edc:	84000317 	ldw	r16,12(r16)
    1ee0:	24008e26 	beq	r4,r16,211c <_malloc_r+0x2f4>
    1ee4:	80800117 	ldw	r2,4(r16)
    1ee8:	1184703a 	and	r2,r2,r6
    1eec:	1447c83a 	sub	r3,r2,r17
    1ef0:	28fff90e 	bge	r5,r3,1ed8 <__alt_data_end+0xff001ed8>
    1ef4:	3809883a 	mov	r4,r7
    1ef8:	01800074 	movhi	r6,1
    1efc:	9c000417 	ldw	r16,16(r19)
    1f00:	3181e204 	addi	r6,r6,1928
    1f04:	32000204 	addi	r8,r6,8
    1f08:	82013426 	beq	r16,r8,23dc <_malloc_r+0x5b4>
    1f0c:	80c00117 	ldw	r3,4(r16)
    1f10:	00bfff04 	movi	r2,-4
    1f14:	188e703a 	and	r7,r3,r2
    1f18:	3c45c83a 	sub	r2,r7,r17
    1f1c:	00c003c4 	movi	r3,15
    1f20:	18811f16 	blt	r3,r2,23a0 <_malloc_r+0x578>
    1f24:	32000515 	stw	r8,20(r6)
    1f28:	32000415 	stw	r8,16(r6)
    1f2c:	10007f0e 	bge	r2,zero,212c <_malloc_r+0x304>
    1f30:	00807fc4 	movi	r2,511
    1f34:	11c0fd36 	bltu	r2,r7,232c <_malloc_r+0x504>
    1f38:	3806d0fa 	srli	r3,r7,3
    1f3c:	01c00044 	movi	r7,1
    1f40:	30800117 	ldw	r2,4(r6)
    1f44:	19400044 	addi	r5,r3,1
    1f48:	294b883a 	add	r5,r5,r5
    1f4c:	1807d0ba 	srai	r3,r3,2
    1f50:	294b883a 	add	r5,r5,r5
    1f54:	294b883a 	add	r5,r5,r5
    1f58:	298b883a 	add	r5,r5,r6
    1f5c:	38c6983a 	sll	r3,r7,r3
    1f60:	29c00017 	ldw	r7,0(r5)
    1f64:	2a7ffe04 	addi	r9,r5,-8
    1f68:	1886b03a 	or	r3,r3,r2
    1f6c:	82400315 	stw	r9,12(r16)
    1f70:	81c00215 	stw	r7,8(r16)
    1f74:	30c00115 	stw	r3,4(r6)
    1f78:	2c000015 	stw	r16,0(r5)
    1f7c:	3c000315 	stw	r16,12(r7)
    1f80:	2005d0ba 	srai	r2,r4,2
    1f84:	01400044 	movi	r5,1
    1f88:	288a983a 	sll	r5,r5,r2
    1f8c:	19406f36 	bltu	r3,r5,214c <_malloc_r+0x324>
    1f90:	28c4703a 	and	r2,r5,r3
    1f94:	10000a1e 	bne	r2,zero,1fc0 <_malloc_r+0x198>
    1f98:	00bfff04 	movi	r2,-4
    1f9c:	294b883a 	add	r5,r5,r5
    1fa0:	2088703a 	and	r4,r4,r2
    1fa4:	28c4703a 	and	r2,r5,r3
    1fa8:	21000104 	addi	r4,r4,4
    1fac:	1000041e 	bne	r2,zero,1fc0 <_malloc_r+0x198>
    1fb0:	294b883a 	add	r5,r5,r5
    1fb4:	28c4703a 	and	r2,r5,r3
    1fb8:	21000104 	addi	r4,r4,4
    1fbc:	103ffc26 	beq	r2,zero,1fb0 <__alt_data_end+0xff001fb0>
    1fc0:	02bfff04 	movi	r10,-4
    1fc4:	024003c4 	movi	r9,15
    1fc8:	21800044 	addi	r6,r4,1
    1fcc:	318d883a 	add	r6,r6,r6
    1fd0:	318d883a 	add	r6,r6,r6
    1fd4:	318d883a 	add	r6,r6,r6
    1fd8:	998d883a 	add	r6,r19,r6
    1fdc:	333ffe04 	addi	r12,r6,-8
    1fe0:	2017883a 	mov	r11,r4
    1fe4:	31800104 	addi	r6,r6,4
    1fe8:	34000017 	ldw	r16,0(r6)
    1fec:	31fffd04 	addi	r7,r6,-12
    1ff0:	81c0041e 	bne	r16,r7,2004 <_malloc_r+0x1dc>
    1ff4:	0000fb06 	br	23e4 <_malloc_r+0x5bc>
    1ff8:	1801030e 	bge	r3,zero,2408 <_malloc_r+0x5e0>
    1ffc:	84000317 	ldw	r16,12(r16)
    2000:	81c0f826 	beq	r16,r7,23e4 <_malloc_r+0x5bc>
    2004:	80800117 	ldw	r2,4(r16)
    2008:	1284703a 	and	r2,r2,r10
    200c:	1447c83a 	sub	r3,r2,r17
    2010:	48fff90e 	bge	r9,r3,1ff8 <__alt_data_end+0xff001ff8>
    2014:	80800317 	ldw	r2,12(r16)
    2018:	81000217 	ldw	r4,8(r16)
    201c:	89400054 	ori	r5,r17,1
    2020:	81400115 	stw	r5,4(r16)
    2024:	20800315 	stw	r2,12(r4)
    2028:	11000215 	stw	r4,8(r2)
    202c:	8463883a 	add	r17,r16,r17
    2030:	9c400515 	stw	r17,20(r19)
    2034:	9c400415 	stw	r17,16(r19)
    2038:	18800054 	ori	r2,r3,1
    203c:	88800115 	stw	r2,4(r17)
    2040:	8a000315 	stw	r8,12(r17)
    2044:	8a000215 	stw	r8,8(r17)
    2048:	88e3883a 	add	r17,r17,r3
    204c:	88c00015 	stw	r3,0(r17)
    2050:	9009883a 	mov	r4,r18
    2054:	000e9000 	call	e900 <__malloc_unlock>
    2058:	80800204 	addi	r2,r16,8
    205c:	00001b06 	br	20cc <_malloc_r+0x2a4>
    2060:	04400404 	movi	r17,16
    2064:	89402536 	bltu	r17,r5,20fc <_malloc_r+0x2d4>
    2068:	000e8fc0 	call	e8fc <__malloc_lock>
    206c:	00800184 	movi	r2,6
    2070:	01000084 	movi	r4,2
    2074:	04c00074 	movhi	r19,1
    2078:	1085883a 	add	r2,r2,r2
    207c:	9cc1e204 	addi	r19,r19,1928
    2080:	1085883a 	add	r2,r2,r2
    2084:	9885883a 	add	r2,r19,r2
    2088:	14000117 	ldw	r16,4(r2)
    208c:	10fffe04 	addi	r3,r2,-8
    2090:	80c0d926 	beq	r16,r3,23f8 <_malloc_r+0x5d0>
    2094:	80c00117 	ldw	r3,4(r16)
    2098:	81000317 	ldw	r4,12(r16)
    209c:	00bfff04 	movi	r2,-4
    20a0:	1884703a 	and	r2,r3,r2
    20a4:	81400217 	ldw	r5,8(r16)
    20a8:	8085883a 	add	r2,r16,r2
    20ac:	10c00117 	ldw	r3,4(r2)
    20b0:	29000315 	stw	r4,12(r5)
    20b4:	21400215 	stw	r5,8(r4)
    20b8:	18c00054 	ori	r3,r3,1
    20bc:	10c00115 	stw	r3,4(r2)
    20c0:	9009883a 	mov	r4,r18
    20c4:	000e9000 	call	e900 <__malloc_unlock>
    20c8:	80800204 	addi	r2,r16,8
    20cc:	dfc00a17 	ldw	ra,40(sp)
    20d0:	df000917 	ldw	fp,36(sp)
    20d4:	ddc00817 	ldw	r23,32(sp)
    20d8:	dd800717 	ldw	r22,28(sp)
    20dc:	dd400617 	ldw	r21,24(sp)
    20e0:	dd000517 	ldw	r20,20(sp)
    20e4:	dcc00417 	ldw	r19,16(sp)
    20e8:	dc800317 	ldw	r18,12(sp)
    20ec:	dc400217 	ldw	r17,8(sp)
    20f0:	dc000117 	ldw	r16,4(sp)
    20f4:	dec00b04 	addi	sp,sp,44
    20f8:	f800283a 	ret
    20fc:	00800304 	movi	r2,12
    2100:	90800015 	stw	r2,0(r18)
    2104:	0005883a 	mov	r2,zero
    2108:	003ff006 	br	20cc <__alt_data_end+0xff0020cc>
    210c:	01002004 	movi	r4,128
    2110:	02001004 	movi	r8,64
    2114:	01c00fc4 	movi	r7,63
    2118:	003f6106 	br	1ea0 <__alt_data_end+0xff001ea0>
    211c:	4009883a 	mov	r4,r8
    2120:	003f7506 	br	1ef8 <__alt_data_end+0xff001ef8>
    2124:	81000317 	ldw	r4,12(r16)
    2128:	003fde06 	br	20a4 <__alt_data_end+0xff0020a4>
    212c:	81c5883a 	add	r2,r16,r7
    2130:	11400117 	ldw	r5,4(r2)
    2134:	9009883a 	mov	r4,r18
    2138:	29400054 	ori	r5,r5,1
    213c:	11400115 	stw	r5,4(r2)
    2140:	000e9000 	call	e900 <__malloc_unlock>
    2144:	80800204 	addi	r2,r16,8
    2148:	003fe006 	br	20cc <__alt_data_end+0xff0020cc>
    214c:	9c000217 	ldw	r16,8(r19)
    2150:	00bfff04 	movi	r2,-4
    2154:	85800117 	ldw	r22,4(r16)
    2158:	b0ac703a 	and	r22,r22,r2
    215c:	b4400336 	bltu	r22,r17,216c <_malloc_r+0x344>
    2160:	b445c83a 	sub	r2,r22,r17
    2164:	00c003c4 	movi	r3,15
    2168:	18805d16 	blt	r3,r2,22e0 <_malloc_r+0x4b8>
    216c:	05c00074 	movhi	r23,1
    2170:	00800074 	movhi	r2,1
    2174:	108fa404 	addi	r2,r2,16016
    2178:	bdc88d04 	addi	r23,r23,8756
    217c:	15400017 	ldw	r21,0(r2)
    2180:	b8c00017 	ldw	r3,0(r23)
    2184:	00bfffc4 	movi	r2,-1
    2188:	858d883a 	add	r6,r16,r22
    218c:	8d6b883a 	add	r21,r17,r21
    2190:	1880ea26 	beq	r3,r2,253c <_malloc_r+0x714>
    2194:	ad4403c4 	addi	r21,r21,4111
    2198:	00bc0004 	movi	r2,-4096
    219c:	a8aa703a 	and	r21,r21,r2
    21a0:	a80b883a 	mov	r5,r21
    21a4:	9009883a 	mov	r4,r18
    21a8:	d9800015 	stw	r6,0(sp)
    21ac:	00027740 	call	2774 <_sbrk_r>
    21b0:	1029883a 	mov	r20,r2
    21b4:	00bfffc4 	movi	r2,-1
    21b8:	d9800017 	ldw	r6,0(sp)
    21bc:	a080e826 	beq	r20,r2,2560 <_malloc_r+0x738>
    21c0:	a180a636 	bltu	r20,r6,245c <_malloc_r+0x634>
    21c4:	07000074 	movhi	fp,1
    21c8:	e70fb204 	addi	fp,fp,16072
    21cc:	e0800017 	ldw	r2,0(fp)
    21d0:	a887883a 	add	r3,r21,r2
    21d4:	e0c00015 	stw	r3,0(fp)
    21d8:	3500e626 	beq	r6,r20,2574 <_malloc_r+0x74c>
    21dc:	b9000017 	ldw	r4,0(r23)
    21e0:	00bfffc4 	movi	r2,-1
    21e4:	2080ee26 	beq	r4,r2,25a0 <_malloc_r+0x778>
    21e8:	a185c83a 	sub	r2,r20,r6
    21ec:	10c5883a 	add	r2,r2,r3
    21f0:	e0800015 	stw	r2,0(fp)
    21f4:	a0c001cc 	andi	r3,r20,7
    21f8:	1800bc26 	beq	r3,zero,24ec <_malloc_r+0x6c4>
    21fc:	a0e9c83a 	sub	r20,r20,r3
    2200:	00840204 	movi	r2,4104
    2204:	a5000204 	addi	r20,r20,8
    2208:	10c7c83a 	sub	r3,r2,r3
    220c:	a545883a 	add	r2,r20,r21
    2210:	1083ffcc 	andi	r2,r2,4095
    2214:	18abc83a 	sub	r21,r3,r2
    2218:	a80b883a 	mov	r5,r21
    221c:	9009883a 	mov	r4,r18
    2220:	00027740 	call	2774 <_sbrk_r>
    2224:	00ffffc4 	movi	r3,-1
    2228:	10c0e126 	beq	r2,r3,25b0 <_malloc_r+0x788>
    222c:	1505c83a 	sub	r2,r2,r20
    2230:	1545883a 	add	r2,r2,r21
    2234:	10800054 	ori	r2,r2,1
    2238:	e0c00017 	ldw	r3,0(fp)
    223c:	9d000215 	stw	r20,8(r19)
    2240:	a0800115 	stw	r2,4(r20)
    2244:	a8c7883a 	add	r3,r21,r3
    2248:	e0c00015 	stw	r3,0(fp)
    224c:	84c00e26 	beq	r16,r19,2288 <_malloc_r+0x460>
    2250:	018003c4 	movi	r6,15
    2254:	3580a72e 	bgeu	r6,r22,24f4 <_malloc_r+0x6cc>
    2258:	81400117 	ldw	r5,4(r16)
    225c:	013ffe04 	movi	r4,-8
    2260:	b0bffd04 	addi	r2,r22,-12
    2264:	1104703a 	and	r2,r2,r4
    2268:	2900004c 	andi	r4,r5,1
    226c:	2088b03a 	or	r4,r4,r2
    2270:	81000115 	stw	r4,4(r16)
    2274:	01400144 	movi	r5,5
    2278:	8089883a 	add	r4,r16,r2
    227c:	21400115 	stw	r5,4(r4)
    2280:	21400215 	stw	r5,8(r4)
    2284:	3080cd36 	bltu	r6,r2,25bc <_malloc_r+0x794>
    2288:	00800074 	movhi	r2,1
    228c:	108fa304 	addi	r2,r2,16012
    2290:	11000017 	ldw	r4,0(r2)
    2294:	20c0012e 	bgeu	r4,r3,229c <_malloc_r+0x474>
    2298:	10c00015 	stw	r3,0(r2)
    229c:	00800074 	movhi	r2,1
    22a0:	108fa204 	addi	r2,r2,16008
    22a4:	11000017 	ldw	r4,0(r2)
    22a8:	9c000217 	ldw	r16,8(r19)
    22ac:	20c0012e 	bgeu	r4,r3,22b4 <_malloc_r+0x48c>
    22b0:	10c00015 	stw	r3,0(r2)
    22b4:	80c00117 	ldw	r3,4(r16)
    22b8:	00bfff04 	movi	r2,-4
    22bc:	1886703a 	and	r3,r3,r2
    22c0:	1c45c83a 	sub	r2,r3,r17
    22c4:	1c400236 	bltu	r3,r17,22d0 <_malloc_r+0x4a8>
    22c8:	00c003c4 	movi	r3,15
    22cc:	18800416 	blt	r3,r2,22e0 <_malloc_r+0x4b8>
    22d0:	9009883a 	mov	r4,r18
    22d4:	000e9000 	call	e900 <__malloc_unlock>
    22d8:	0005883a 	mov	r2,zero
    22dc:	003f7b06 	br	20cc <__alt_data_end+0xff0020cc>
    22e0:	88c00054 	ori	r3,r17,1
    22e4:	80c00115 	stw	r3,4(r16)
    22e8:	8463883a 	add	r17,r16,r17
    22ec:	10800054 	ori	r2,r2,1
    22f0:	9c400215 	stw	r17,8(r19)
    22f4:	88800115 	stw	r2,4(r17)
    22f8:	9009883a 	mov	r4,r18
    22fc:	000e9000 	call	e900 <__malloc_unlock>
    2300:	80800204 	addi	r2,r16,8
    2304:	003f7106 	br	20cc <__alt_data_end+0xff0020cc>
    2308:	00c00504 	movi	r3,20
    230c:	18804a2e 	bgeu	r3,r2,2438 <_malloc_r+0x610>
    2310:	00c01504 	movi	r3,84
    2314:	18806e36 	bltu	r3,r2,24d0 <_malloc_r+0x6a8>
    2318:	8804d33a 	srli	r2,r17,12
    231c:	12001bc4 	addi	r8,r2,111
    2320:	11c01b84 	addi	r7,r2,110
    2324:	4209883a 	add	r4,r8,r8
    2328:	003edd06 	br	1ea0 <__alt_data_end+0xff001ea0>
    232c:	3804d27a 	srli	r2,r7,9
    2330:	00c00104 	movi	r3,4
    2334:	1880442e 	bgeu	r3,r2,2448 <_malloc_r+0x620>
    2338:	00c00504 	movi	r3,20
    233c:	18808136 	bltu	r3,r2,2544 <_malloc_r+0x71c>
    2340:	11401704 	addi	r5,r2,92
    2344:	10c016c4 	addi	r3,r2,91
    2348:	294b883a 	add	r5,r5,r5
    234c:	294b883a 	add	r5,r5,r5
    2350:	294b883a 	add	r5,r5,r5
    2354:	994b883a 	add	r5,r19,r5
    2358:	28800017 	ldw	r2,0(r5)
    235c:	01800074 	movhi	r6,1
    2360:	297ffe04 	addi	r5,r5,-8
    2364:	3181e204 	addi	r6,r6,1928
    2368:	28806526 	beq	r5,r2,2500 <_malloc_r+0x6d8>
    236c:	01bfff04 	movi	r6,-4
    2370:	10c00117 	ldw	r3,4(r2)
    2374:	1986703a 	and	r3,r3,r6
    2378:	38c0022e 	bgeu	r7,r3,2384 <_malloc_r+0x55c>
    237c:	10800217 	ldw	r2,8(r2)
    2380:	28bffb1e 	bne	r5,r2,2370 <__alt_data_end+0xff002370>
    2384:	11400317 	ldw	r5,12(r2)
    2388:	98c00117 	ldw	r3,4(r19)
    238c:	81400315 	stw	r5,12(r16)
    2390:	80800215 	stw	r2,8(r16)
    2394:	2c000215 	stw	r16,8(r5)
    2398:	14000315 	stw	r16,12(r2)
    239c:	003ef806 	br	1f80 <__alt_data_end+0xff001f80>
    23a0:	88c00054 	ori	r3,r17,1
    23a4:	80c00115 	stw	r3,4(r16)
    23a8:	8463883a 	add	r17,r16,r17
    23ac:	34400515 	stw	r17,20(r6)
    23b0:	34400415 	stw	r17,16(r6)
    23b4:	10c00054 	ori	r3,r2,1
    23b8:	8a000315 	stw	r8,12(r17)
    23bc:	8a000215 	stw	r8,8(r17)
    23c0:	88c00115 	stw	r3,4(r17)
    23c4:	88a3883a 	add	r17,r17,r2
    23c8:	88800015 	stw	r2,0(r17)
    23cc:	9009883a 	mov	r4,r18
    23d0:	000e9000 	call	e900 <__malloc_unlock>
    23d4:	80800204 	addi	r2,r16,8
    23d8:	003f3c06 	br	20cc <__alt_data_end+0xff0020cc>
    23dc:	30c00117 	ldw	r3,4(r6)
    23e0:	003ee706 	br	1f80 <__alt_data_end+0xff001f80>
    23e4:	5ac00044 	addi	r11,r11,1
    23e8:	588000cc 	andi	r2,r11,3
    23ec:	31800204 	addi	r6,r6,8
    23f0:	103efd1e 	bne	r2,zero,1fe8 <__alt_data_end+0xff001fe8>
    23f4:	00002406 	br	2488 <_malloc_r+0x660>
    23f8:	14000317 	ldw	r16,12(r2)
    23fc:	143f251e 	bne	r2,r16,2094 <__alt_data_end+0xff002094>
    2400:	21000084 	addi	r4,r4,2
    2404:	003ebc06 	br	1ef8 <__alt_data_end+0xff001ef8>
    2408:	8085883a 	add	r2,r16,r2
    240c:	10c00117 	ldw	r3,4(r2)
    2410:	81000317 	ldw	r4,12(r16)
    2414:	81400217 	ldw	r5,8(r16)
    2418:	18c00054 	ori	r3,r3,1
    241c:	10c00115 	stw	r3,4(r2)
    2420:	29000315 	stw	r4,12(r5)
    2424:	21400215 	stw	r5,8(r4)
    2428:	9009883a 	mov	r4,r18
    242c:	000e9000 	call	e900 <__malloc_unlock>
    2430:	80800204 	addi	r2,r16,8
    2434:	003f2506 	br	20cc <__alt_data_end+0xff0020cc>
    2438:	12001704 	addi	r8,r2,92
    243c:	11c016c4 	addi	r7,r2,91
    2440:	4209883a 	add	r4,r8,r8
    2444:	003e9606 	br	1ea0 <__alt_data_end+0xff001ea0>
    2448:	3804d1ba 	srli	r2,r7,6
    244c:	11400e44 	addi	r5,r2,57
    2450:	10c00e04 	addi	r3,r2,56
    2454:	294b883a 	add	r5,r5,r5
    2458:	003fbc06 	br	234c <__alt_data_end+0xff00234c>
    245c:	84ff5926 	beq	r16,r19,21c4 <__alt_data_end+0xff0021c4>
    2460:	00800074 	movhi	r2,1
    2464:	1081e204 	addi	r2,r2,1928
    2468:	14000217 	ldw	r16,8(r2)
    246c:	00bfff04 	movi	r2,-4
    2470:	80c00117 	ldw	r3,4(r16)
    2474:	1886703a 	and	r3,r3,r2
    2478:	003f9106 	br	22c0 <__alt_data_end+0xff0022c0>
    247c:	60800217 	ldw	r2,8(r12)
    2480:	213fffc4 	addi	r4,r4,-1
    2484:	1300651e 	bne	r2,r12,261c <_malloc_r+0x7f4>
    2488:	208000cc 	andi	r2,r4,3
    248c:	633ffe04 	addi	r12,r12,-8
    2490:	103ffa1e 	bne	r2,zero,247c <__alt_data_end+0xff00247c>
    2494:	98800117 	ldw	r2,4(r19)
    2498:	0146303a 	nor	r3,zero,r5
    249c:	1884703a 	and	r2,r3,r2
    24a0:	98800115 	stw	r2,4(r19)
    24a4:	294b883a 	add	r5,r5,r5
    24a8:	117f2836 	bltu	r2,r5,214c <__alt_data_end+0xff00214c>
    24ac:	283f2726 	beq	r5,zero,214c <__alt_data_end+0xff00214c>
    24b0:	2886703a 	and	r3,r5,r2
    24b4:	5809883a 	mov	r4,r11
    24b8:	183ec31e 	bne	r3,zero,1fc8 <__alt_data_end+0xff001fc8>
    24bc:	294b883a 	add	r5,r5,r5
    24c0:	2886703a 	and	r3,r5,r2
    24c4:	21000104 	addi	r4,r4,4
    24c8:	183ffc26 	beq	r3,zero,24bc <__alt_data_end+0xff0024bc>
    24cc:	003ebe06 	br	1fc8 <__alt_data_end+0xff001fc8>
    24d0:	00c05504 	movi	r3,340
    24d4:	18801236 	bltu	r3,r2,2520 <_malloc_r+0x6f8>
    24d8:	8804d3fa 	srli	r2,r17,15
    24dc:	12001e04 	addi	r8,r2,120
    24e0:	11c01dc4 	addi	r7,r2,119
    24e4:	4209883a 	add	r4,r8,r8
    24e8:	003e6d06 	br	1ea0 <__alt_data_end+0xff001ea0>
    24ec:	00c40004 	movi	r3,4096
    24f0:	003f4606 	br	220c <__alt_data_end+0xff00220c>
    24f4:	00800044 	movi	r2,1
    24f8:	a0800115 	stw	r2,4(r20)
    24fc:	003f7406 	br	22d0 <__alt_data_end+0xff0022d0>
    2500:	1805d0ba 	srai	r2,r3,2
    2504:	01c00044 	movi	r7,1
    2508:	30c00117 	ldw	r3,4(r6)
    250c:	388e983a 	sll	r7,r7,r2
    2510:	2805883a 	mov	r2,r5
    2514:	38c6b03a 	or	r3,r7,r3
    2518:	30c00115 	stw	r3,4(r6)
    251c:	003f9b06 	br	238c <__alt_data_end+0xff00238c>
    2520:	00c15504 	movi	r3,1364
    2524:	18801a36 	bltu	r3,r2,2590 <_malloc_r+0x768>
    2528:	8804d4ba 	srli	r2,r17,18
    252c:	12001f44 	addi	r8,r2,125
    2530:	11c01f04 	addi	r7,r2,124
    2534:	4209883a 	add	r4,r8,r8
    2538:	003e5906 	br	1ea0 <__alt_data_end+0xff001ea0>
    253c:	ad400404 	addi	r21,r21,16
    2540:	003f1706 	br	21a0 <__alt_data_end+0xff0021a0>
    2544:	00c01504 	movi	r3,84
    2548:	18802336 	bltu	r3,r2,25d8 <_malloc_r+0x7b0>
    254c:	3804d33a 	srli	r2,r7,12
    2550:	11401bc4 	addi	r5,r2,111
    2554:	10c01b84 	addi	r3,r2,110
    2558:	294b883a 	add	r5,r5,r5
    255c:	003f7b06 	br	234c <__alt_data_end+0xff00234c>
    2560:	9c000217 	ldw	r16,8(r19)
    2564:	00bfff04 	movi	r2,-4
    2568:	80c00117 	ldw	r3,4(r16)
    256c:	1886703a 	and	r3,r3,r2
    2570:	003f5306 	br	22c0 <__alt_data_end+0xff0022c0>
    2574:	3083ffcc 	andi	r2,r6,4095
    2578:	103f181e 	bne	r2,zero,21dc <__alt_data_end+0xff0021dc>
    257c:	99000217 	ldw	r4,8(r19)
    2580:	b545883a 	add	r2,r22,r21
    2584:	10800054 	ori	r2,r2,1
    2588:	20800115 	stw	r2,4(r4)
    258c:	003f3e06 	br	2288 <__alt_data_end+0xff002288>
    2590:	01003f84 	movi	r4,254
    2594:	02001fc4 	movi	r8,127
    2598:	01c01f84 	movi	r7,126
    259c:	003e4006 	br	1ea0 <__alt_data_end+0xff001ea0>
    25a0:	00800074 	movhi	r2,1
    25a4:	10888d04 	addi	r2,r2,8756
    25a8:	15000015 	stw	r20,0(r2)
    25ac:	003f1106 	br	21f4 <__alt_data_end+0xff0021f4>
    25b0:	00800044 	movi	r2,1
    25b4:	002b883a 	mov	r21,zero
    25b8:	003f1f06 	br	2238 <__alt_data_end+0xff002238>
    25bc:	81400204 	addi	r5,r16,8
    25c0:	9009883a 	mov	r4,r18
    25c4:	0006c780 	call	6c78 <_free_r>
    25c8:	00800074 	movhi	r2,1
    25cc:	108fb204 	addi	r2,r2,16072
    25d0:	10c00017 	ldw	r3,0(r2)
    25d4:	003f2c06 	br	2288 <__alt_data_end+0xff002288>
    25d8:	00c05504 	movi	r3,340
    25dc:	18800536 	bltu	r3,r2,25f4 <_malloc_r+0x7cc>
    25e0:	3804d3fa 	srli	r2,r7,15
    25e4:	11401e04 	addi	r5,r2,120
    25e8:	10c01dc4 	addi	r3,r2,119
    25ec:	294b883a 	add	r5,r5,r5
    25f0:	003f5606 	br	234c <__alt_data_end+0xff00234c>
    25f4:	00c15504 	movi	r3,1364
    25f8:	18800536 	bltu	r3,r2,2610 <_malloc_r+0x7e8>
    25fc:	3804d4ba 	srli	r2,r7,18
    2600:	11401f44 	addi	r5,r2,125
    2604:	10c01f04 	addi	r3,r2,124
    2608:	294b883a 	add	r5,r5,r5
    260c:	003f4f06 	br	234c <__alt_data_end+0xff00234c>
    2610:	01403f84 	movi	r5,254
    2614:	00c01f84 	movi	r3,126
    2618:	003f4c06 	br	234c <__alt_data_end+0xff00234c>
    261c:	98800117 	ldw	r2,4(r19)
    2620:	003fa006 	br	24a4 <__alt_data_end+0xff0024a4>
    2624:	8808d0fa 	srli	r4,r17,3
    2628:	20800044 	addi	r2,r4,1
    262c:	1085883a 	add	r2,r2,r2
    2630:	003e9006 	br	2074 <__alt_data_end+0xff002074>

00002634 <_printf_r>:
    2634:	defffd04 	addi	sp,sp,-12
    2638:	2805883a 	mov	r2,r5
    263c:	dfc00015 	stw	ra,0(sp)
    2640:	d9800115 	stw	r6,4(sp)
    2644:	d9c00215 	stw	r7,8(sp)
    2648:	21400217 	ldw	r5,8(r4)
    264c:	d9c00104 	addi	r7,sp,4
    2650:	100d883a 	mov	r6,r2
    2654:	00028600 	call	2860 <___vfprintf_internal_r>
    2658:	dfc00017 	ldw	ra,0(sp)
    265c:	dec00304 	addi	sp,sp,12
    2660:	f800283a 	ret

00002664 <printf>:
    2664:	defffc04 	addi	sp,sp,-16
    2668:	dfc00015 	stw	ra,0(sp)
    266c:	d9400115 	stw	r5,4(sp)
    2670:	d9800215 	stw	r6,8(sp)
    2674:	d9c00315 	stw	r7,12(sp)
    2678:	00800074 	movhi	r2,1
    267c:	10889004 	addi	r2,r2,8768
    2680:	10800017 	ldw	r2,0(r2)
    2684:	200b883a 	mov	r5,r4
    2688:	d9800104 	addi	r6,sp,4
    268c:	11000217 	ldw	r4,8(r2)
    2690:	0004a580 	call	4a58 <__vfprintf_internal>
    2694:	dfc00017 	ldw	ra,0(sp)
    2698:	dec00404 	addi	sp,sp,16
    269c:	f800283a 	ret

000026a0 <_puts_r>:
    26a0:	defff604 	addi	sp,sp,-40
    26a4:	dc000715 	stw	r16,28(sp)
    26a8:	2021883a 	mov	r16,r4
    26ac:	2809883a 	mov	r4,r5
    26b0:	dc400815 	stw	r17,32(sp)
    26b4:	dfc00915 	stw	ra,36(sp)
    26b8:	2823883a 	mov	r17,r5
    26bc:	00027c80 	call	27c8 <strlen>
    26c0:	10c00044 	addi	r3,r2,1
    26c4:	d8800115 	stw	r2,4(sp)
    26c8:	00800074 	movhi	r2,1
    26cc:	1080e804 	addi	r2,r2,928
    26d0:	d8800215 	stw	r2,8(sp)
    26d4:	00800044 	movi	r2,1
    26d8:	d8800315 	stw	r2,12(sp)
    26dc:	00800084 	movi	r2,2
    26e0:	dc400015 	stw	r17,0(sp)
    26e4:	d8c00615 	stw	r3,24(sp)
    26e8:	dec00415 	stw	sp,16(sp)
    26ec:	d8800515 	stw	r2,20(sp)
    26f0:	80000226 	beq	r16,zero,26fc <_puts_r+0x5c>
    26f4:	80800e17 	ldw	r2,56(r16)
    26f8:	10001426 	beq	r2,zero,274c <_puts_r+0xac>
    26fc:	81400217 	ldw	r5,8(r16)
    2700:	2880030b 	ldhu	r2,12(r5)
    2704:	10c8000c 	andi	r3,r2,8192
    2708:	1800061e 	bne	r3,zero,2724 <_puts_r+0x84>
    270c:	29001917 	ldw	r4,100(r5)
    2710:	00f7ffc4 	movi	r3,-8193
    2714:	10880014 	ori	r2,r2,8192
    2718:	20c6703a 	and	r3,r4,r3
    271c:	2880030d 	sth	r2,12(r5)
    2720:	28c01915 	stw	r3,100(r5)
    2724:	d9800404 	addi	r6,sp,16
    2728:	8009883a 	mov	r4,r16
    272c:	0006f880 	call	6f88 <__sfvwrite_r>
    2730:	1000091e 	bne	r2,zero,2758 <_puts_r+0xb8>
    2734:	00800284 	movi	r2,10
    2738:	dfc00917 	ldw	ra,36(sp)
    273c:	dc400817 	ldw	r17,32(sp)
    2740:	dc000717 	ldw	r16,28(sp)
    2744:	dec00a04 	addi	sp,sp,40
    2748:	f800283a 	ret
    274c:	8009883a 	mov	r4,r16
    2750:	0006b040 	call	6b04 <__sinit>
    2754:	003fe906 	br	26fc <__alt_data_end+0xff0026fc>
    2758:	00bfffc4 	movi	r2,-1
    275c:	003ff606 	br	2738 <__alt_data_end+0xff002738>

00002760 <puts>:
    2760:	00800074 	movhi	r2,1
    2764:	10889004 	addi	r2,r2,8768
    2768:	200b883a 	mov	r5,r4
    276c:	11000017 	ldw	r4,0(r2)
    2770:	00026a01 	jmpi	26a0 <_puts_r>

00002774 <_sbrk_r>:
    2774:	defffd04 	addi	sp,sp,-12
    2778:	dc000015 	stw	r16,0(sp)
    277c:	04000074 	movhi	r16,1
    2780:	dc400115 	stw	r17,4(sp)
    2784:	840fa504 	addi	r16,r16,16020
    2788:	2023883a 	mov	r17,r4
    278c:	2809883a 	mov	r4,r5
    2790:	dfc00215 	stw	ra,8(sp)
    2794:	80000015 	stw	zero,0(r16)
    2798:	000e9f00 	call	e9f0 <sbrk>
    279c:	00ffffc4 	movi	r3,-1
    27a0:	10c00526 	beq	r2,r3,27b8 <_sbrk_r+0x44>
    27a4:	dfc00217 	ldw	ra,8(sp)
    27a8:	dc400117 	ldw	r17,4(sp)
    27ac:	dc000017 	ldw	r16,0(sp)
    27b0:	dec00304 	addi	sp,sp,12
    27b4:	f800283a 	ret
    27b8:	80c00017 	ldw	r3,0(r16)
    27bc:	183ff926 	beq	r3,zero,27a4 <__alt_data_end+0xff0027a4>
    27c0:	88c00015 	stw	r3,0(r17)
    27c4:	003ff706 	br	27a4 <__alt_data_end+0xff0027a4>

000027c8 <strlen>:
    27c8:	208000cc 	andi	r2,r4,3
    27cc:	10002026 	beq	r2,zero,2850 <strlen+0x88>
    27d0:	20800007 	ldb	r2,0(r4)
    27d4:	10002026 	beq	r2,zero,2858 <strlen+0x90>
    27d8:	2005883a 	mov	r2,r4
    27dc:	00000206 	br	27e8 <strlen+0x20>
    27e0:	10c00007 	ldb	r3,0(r2)
    27e4:	18001826 	beq	r3,zero,2848 <strlen+0x80>
    27e8:	10800044 	addi	r2,r2,1
    27ec:	10c000cc 	andi	r3,r2,3
    27f0:	183ffb1e 	bne	r3,zero,27e0 <__alt_data_end+0xff0027e0>
    27f4:	10c00017 	ldw	r3,0(r2)
    27f8:	01ffbff4 	movhi	r7,65279
    27fc:	39ffbfc4 	addi	r7,r7,-257
    2800:	00ca303a 	nor	r5,zero,r3
    2804:	01a02074 	movhi	r6,32897
    2808:	19c7883a 	add	r3,r3,r7
    280c:	31a02004 	addi	r6,r6,-32640
    2810:	1946703a 	and	r3,r3,r5
    2814:	1986703a 	and	r3,r3,r6
    2818:	1800091e 	bne	r3,zero,2840 <strlen+0x78>
    281c:	10800104 	addi	r2,r2,4
    2820:	10c00017 	ldw	r3,0(r2)
    2824:	19cb883a 	add	r5,r3,r7
    2828:	00c6303a 	nor	r3,zero,r3
    282c:	28c6703a 	and	r3,r5,r3
    2830:	1986703a 	and	r3,r3,r6
    2834:	183ff926 	beq	r3,zero,281c <__alt_data_end+0xff00281c>
    2838:	00000106 	br	2840 <strlen+0x78>
    283c:	10800044 	addi	r2,r2,1
    2840:	10c00007 	ldb	r3,0(r2)
    2844:	183ffd1e 	bne	r3,zero,283c <__alt_data_end+0xff00283c>
    2848:	1105c83a 	sub	r2,r2,r4
    284c:	f800283a 	ret
    2850:	2005883a 	mov	r2,r4
    2854:	003fe706 	br	27f4 <__alt_data_end+0xff0027f4>
    2858:	0005883a 	mov	r2,zero
    285c:	f800283a 	ret

00002860 <___vfprintf_internal_r>:
    2860:	deffb804 	addi	sp,sp,-288
    2864:	dfc04715 	stw	ra,284(sp)
    2868:	ddc04515 	stw	r23,276(sp)
    286c:	dd404315 	stw	r21,268(sp)
    2870:	d9002c15 	stw	r4,176(sp)
    2874:	282f883a 	mov	r23,r5
    2878:	302b883a 	mov	r21,r6
    287c:	d9c02d15 	stw	r7,180(sp)
    2880:	df004615 	stw	fp,280(sp)
    2884:	dd804415 	stw	r22,272(sp)
    2888:	dd004215 	stw	r20,264(sp)
    288c:	dcc04115 	stw	r19,260(sp)
    2890:	dc804015 	stw	r18,256(sp)
    2894:	dc403f15 	stw	r17,252(sp)
    2898:	dc003e15 	stw	r16,248(sp)
    289c:	00076780 	call	7678 <_localeconv_r>
    28a0:	10800017 	ldw	r2,0(r2)
    28a4:	1009883a 	mov	r4,r2
    28a8:	d8803415 	stw	r2,208(sp)
    28ac:	00027c80 	call	27c8 <strlen>
    28b0:	d8803715 	stw	r2,220(sp)
    28b4:	d8802c17 	ldw	r2,176(sp)
    28b8:	10000226 	beq	r2,zero,28c4 <___vfprintf_internal_r+0x64>
    28bc:	10800e17 	ldw	r2,56(r2)
    28c0:	1000f926 	beq	r2,zero,2ca8 <___vfprintf_internal_r+0x448>
    28c4:	b880030b 	ldhu	r2,12(r23)
    28c8:	10c8000c 	andi	r3,r2,8192
    28cc:	1800061e 	bne	r3,zero,28e8 <___vfprintf_internal_r+0x88>
    28d0:	b9001917 	ldw	r4,100(r23)
    28d4:	00f7ffc4 	movi	r3,-8193
    28d8:	10880014 	ori	r2,r2,8192
    28dc:	20c6703a 	and	r3,r4,r3
    28e0:	b880030d 	sth	r2,12(r23)
    28e4:	b8c01915 	stw	r3,100(r23)
    28e8:	10c0020c 	andi	r3,r2,8
    28ec:	1800c126 	beq	r3,zero,2bf4 <___vfprintf_internal_r+0x394>
    28f0:	b8c00417 	ldw	r3,16(r23)
    28f4:	1800bf26 	beq	r3,zero,2bf4 <___vfprintf_internal_r+0x394>
    28f8:	1080068c 	andi	r2,r2,26
    28fc:	00c00284 	movi	r3,10
    2900:	10c0c426 	beq	r2,r3,2c14 <___vfprintf_internal_r+0x3b4>
    2904:	d8c00404 	addi	r3,sp,16
    2908:	05000074 	movhi	r20,1
    290c:	d9001e04 	addi	r4,sp,120
    2910:	a500f984 	addi	r20,r20,998
    2914:	d8c01e15 	stw	r3,120(sp)
    2918:	d8002015 	stw	zero,128(sp)
    291c:	d8001f15 	stw	zero,124(sp)
    2920:	d8003315 	stw	zero,204(sp)
    2924:	d8003615 	stw	zero,216(sp)
    2928:	d8003815 	stw	zero,224(sp)
    292c:	1811883a 	mov	r8,r3
    2930:	d8003915 	stw	zero,228(sp)
    2934:	d8003a15 	stw	zero,232(sp)
    2938:	d8002f15 	stw	zero,188(sp)
    293c:	d9002815 	stw	r4,160(sp)
    2940:	a8800007 	ldb	r2,0(r21)
    2944:	10027b26 	beq	r2,zero,3334 <___vfprintf_internal_r+0xad4>
    2948:	00c00944 	movi	r3,37
    294c:	a821883a 	mov	r16,r21
    2950:	10c0021e 	bne	r2,r3,295c <___vfprintf_internal_r+0xfc>
    2954:	00001406 	br	29a8 <___vfprintf_internal_r+0x148>
    2958:	10c00326 	beq	r2,r3,2968 <___vfprintf_internal_r+0x108>
    295c:	84000044 	addi	r16,r16,1
    2960:	80800007 	ldb	r2,0(r16)
    2964:	103ffc1e 	bne	r2,zero,2958 <__alt_data_end+0xff002958>
    2968:	8563c83a 	sub	r17,r16,r21
    296c:	88000e26 	beq	r17,zero,29a8 <___vfprintf_internal_r+0x148>
    2970:	d8c02017 	ldw	r3,128(sp)
    2974:	d8801f17 	ldw	r2,124(sp)
    2978:	45400015 	stw	r21,0(r8)
    297c:	1c47883a 	add	r3,r3,r17
    2980:	10800044 	addi	r2,r2,1
    2984:	d8c02015 	stw	r3,128(sp)
    2988:	44400115 	stw	r17,4(r8)
    298c:	d8801f15 	stw	r2,124(sp)
    2990:	00c001c4 	movi	r3,7
    2994:	1880a716 	blt	r3,r2,2c34 <___vfprintf_internal_r+0x3d4>
    2998:	42000204 	addi	r8,r8,8
    299c:	d9402f17 	ldw	r5,188(sp)
    29a0:	2c4b883a 	add	r5,r5,r17
    29a4:	d9402f15 	stw	r5,188(sp)
    29a8:	80800007 	ldb	r2,0(r16)
    29ac:	1000a826 	beq	r2,zero,2c50 <___vfprintf_internal_r+0x3f0>
    29b0:	84400047 	ldb	r17,1(r16)
    29b4:	00bfffc4 	movi	r2,-1
    29b8:	85400044 	addi	r21,r16,1
    29bc:	d8002785 	stb	zero,158(sp)
    29c0:	0007883a 	mov	r3,zero
    29c4:	000f883a 	mov	r7,zero
    29c8:	d8802915 	stw	r2,164(sp)
    29cc:	d8003115 	stw	zero,196(sp)
    29d0:	0025883a 	mov	r18,zero
    29d4:	01401604 	movi	r5,88
    29d8:	01800244 	movi	r6,9
    29dc:	02800a84 	movi	r10,42
    29e0:	02401b04 	movi	r9,108
    29e4:	ad400044 	addi	r21,r21,1
    29e8:	88bff804 	addi	r2,r17,-32
    29ec:	28830436 	bltu	r5,r2,3600 <___vfprintf_internal_r+0xda0>
    29f0:	100490ba 	slli	r2,r2,2
    29f4:	01000034 	movhi	r4,0
    29f8:	210a8204 	addi	r4,r4,10760
    29fc:	1105883a 	add	r2,r2,r4
    2a00:	10800017 	ldw	r2,0(r2)
    2a04:	1000683a 	jmp	r2
    2a08:	00003520 	cmpeqi	zero,zero,212
    2a0c:	00003600 	call	360 <init_camera+0x198>
    2a10:	00003600 	call	360 <init_camera+0x198>
    2a14:	00003540 	call	354 <init_camera+0x18c>
    2a18:	00003600 	call	360 <init_camera+0x198>
    2a1c:	00003600 	call	360 <init_camera+0x198>
    2a20:	00003600 	call	360 <init_camera+0x198>
    2a24:	00003600 	call	360 <init_camera+0x198>
    2a28:	00003600 	call	360 <init_camera+0x198>
    2a2c:	00003600 	call	360 <init_camera+0x198>
    2a30:	00002cb4 	movhi	zero,178
    2a34:	0000345c 	xori	zero,zero,209
    2a38:	00003600 	call	360 <init_camera+0x198>
    2a3c:	00002b7c 	xorhi	zero,zero,173
    2a40:	00002cdc 	xori	zero,zero,179
    2a44:	00003600 	call	360 <init_camera+0x198>
    2a48:	00002d1c 	xori	zero,zero,180
    2a4c:	00002d28 	cmpgeui	zero,zero,180
    2a50:	00002d28 	cmpgeui	zero,zero,180
    2a54:	00002d28 	cmpgeui	zero,zero,180
    2a58:	00002d28 	cmpgeui	zero,zero,180
    2a5c:	00002d28 	cmpgeui	zero,zero,180
    2a60:	00002d28 	cmpgeui	zero,zero,180
    2a64:	00002d28 	cmpgeui	zero,zero,180
    2a68:	00002d28 	cmpgeui	zero,zero,180
    2a6c:	00002d28 	cmpgeui	zero,zero,180
    2a70:	00003600 	call	360 <init_camera+0x198>
    2a74:	00003600 	call	360 <init_camera+0x198>
    2a78:	00003600 	call	360 <init_camera+0x198>
    2a7c:	00003600 	call	360 <init_camera+0x198>
    2a80:	00003600 	call	360 <init_camera+0x198>
    2a84:	00003600 	call	360 <init_camera+0x198>
    2a88:	00003600 	call	360 <init_camera+0x198>
    2a8c:	00003600 	call	360 <init_camera+0x198>
    2a90:	00003600 	call	360 <init_camera+0x198>
    2a94:	00003600 	call	360 <init_camera+0x198>
    2a98:	00002d5c 	xori	zero,zero,181
    2a9c:	00002e18 	cmpnei	zero,zero,184
    2aa0:	00003600 	call	360 <init_camera+0x198>
    2aa4:	00002e18 	cmpnei	zero,zero,184
    2aa8:	00003600 	call	360 <init_camera+0x198>
    2aac:	00003600 	call	360 <init_camera+0x198>
    2ab0:	00003600 	call	360 <init_camera+0x198>
    2ab4:	00003600 	call	360 <init_camera+0x198>
    2ab8:	00002eb8 	rdprs	zero,zero,186
    2abc:	00003600 	call	360 <init_camera+0x198>
    2ac0:	00003600 	call	360 <init_camera+0x198>
    2ac4:	00002ec4 	movi	zero,187
    2ac8:	00003600 	call	360 <init_camera+0x198>
    2acc:	00003600 	call	360 <init_camera+0x198>
    2ad0:	00003600 	call	360 <init_camera+0x198>
    2ad4:	00003600 	call	360 <init_camera+0x198>
    2ad8:	00003600 	call	360 <init_camera+0x198>
    2adc:	0000333c 	xorhi	zero,zero,204
    2ae0:	00003600 	call	360 <init_camera+0x198>
    2ae4:	00003600 	call	360 <init_camera+0x198>
    2ae8:	0000339c 	xori	zero,zero,206
    2aec:	00003600 	call	360 <init_camera+0x198>
    2af0:	00003600 	call	360 <init_camera+0x198>
    2af4:	00003600 	call	360 <init_camera+0x198>
    2af8:	00003600 	call	360 <init_camera+0x198>
    2afc:	00003600 	call	360 <init_camera+0x198>
    2b00:	00003600 	call	360 <init_camera+0x198>
    2b04:	00003600 	call	360 <init_camera+0x198>
    2b08:	00003600 	call	360 <init_camera+0x198>
    2b0c:	00003600 	call	360 <init_camera+0x198>
    2b10:	00003600 	call	360 <init_camera+0x198>
    2b14:	000035ac 	andhi	zero,zero,214
    2b18:	0000354c 	andi	zero,zero,213
    2b1c:	00002e18 	cmpnei	zero,zero,184
    2b20:	00002e18 	cmpnei	zero,zero,184
    2b24:	00002e18 	cmpnei	zero,zero,184
    2b28:	0000355c 	xori	zero,zero,213
    2b2c:	0000354c 	andi	zero,zero,213
    2b30:	00003600 	call	360 <init_camera+0x198>
    2b34:	00003600 	call	360 <init_camera+0x198>
    2b38:	00003568 	cmpgeui	zero,zero,213
    2b3c:	00003600 	call	360 <init_camera+0x198>
    2b40:	00003578 	rdprs	zero,zero,213
    2b44:	0000344c 	andi	zero,zero,209
    2b48:	00002b88 	cmpgei	zero,zero,174
    2b4c:	0000346c 	andhi	zero,zero,209
    2b50:	00003600 	call	360 <init_camera+0x198>
    2b54:	00003478 	rdprs	zero,zero,209
    2b58:	00003600 	call	360 <init_camera+0x198>
    2b5c:	000034d4 	movui	zero,211
    2b60:	00003600 	call	360 <init_camera+0x198>
    2b64:	00003600 	call	360 <init_camera+0x198>
    2b68:	000034e4 	muli	zero,zero,211
    2b6c:	d9003117 	ldw	r4,196(sp)
    2b70:	d8802d15 	stw	r2,180(sp)
    2b74:	0109c83a 	sub	r4,zero,r4
    2b78:	d9003115 	stw	r4,196(sp)
    2b7c:	94800114 	ori	r18,r18,4
    2b80:	ac400007 	ldb	r17,0(r21)
    2b84:	003f9706 	br	29e4 <__alt_data_end+0xff0029e4>
    2b88:	00800c04 	movi	r2,48
    2b8c:	d9002d17 	ldw	r4,180(sp)
    2b90:	d9402917 	ldw	r5,164(sp)
    2b94:	d8802705 	stb	r2,156(sp)
    2b98:	00801e04 	movi	r2,120
    2b9c:	d8802745 	stb	r2,157(sp)
    2ba0:	d8002785 	stb	zero,158(sp)
    2ba4:	20c00104 	addi	r3,r4,4
    2ba8:	24c00017 	ldw	r19,0(r4)
    2bac:	002d883a 	mov	r22,zero
    2bb0:	90800094 	ori	r2,r18,2
    2bb4:	28029a16 	blt	r5,zero,3620 <___vfprintf_internal_r+0xdc0>
    2bb8:	00bfdfc4 	movi	r2,-129
    2bbc:	90a4703a 	and	r18,r18,r2
    2bc0:	d8c02d15 	stw	r3,180(sp)
    2bc4:	94800094 	ori	r18,r18,2
    2bc8:	9802871e 	bne	r19,zero,35e8 <___vfprintf_internal_r+0xd88>
    2bcc:	00800074 	movhi	r2,1
    2bd0:	1080f204 	addi	r2,r2,968
    2bd4:	d8803915 	stw	r2,228(sp)
    2bd8:	04401e04 	movi	r17,120
    2bdc:	d8802917 	ldw	r2,164(sp)
    2be0:	0039883a 	mov	fp,zero
    2be4:	1001e926 	beq	r2,zero,338c <___vfprintf_internal_r+0xb2c>
    2be8:	0027883a 	mov	r19,zero
    2bec:	002d883a 	mov	r22,zero
    2bf0:	00020506 	br	3408 <___vfprintf_internal_r+0xba8>
    2bf4:	d9002c17 	ldw	r4,176(sp)
    2bf8:	b80b883a 	mov	r5,r23
    2bfc:	0004b300 	call	4b30 <__swsetup_r>
    2c00:	1005ac1e 	bne	r2,zero,42b4 <___vfprintf_internal_r+0x1a54>
    2c04:	b880030b 	ldhu	r2,12(r23)
    2c08:	00c00284 	movi	r3,10
    2c0c:	1080068c 	andi	r2,r2,26
    2c10:	10ff3c1e 	bne	r2,r3,2904 <__alt_data_end+0xff002904>
    2c14:	b880038f 	ldh	r2,14(r23)
    2c18:	103f3a16 	blt	r2,zero,2904 <__alt_data_end+0xff002904>
    2c1c:	d9c02d17 	ldw	r7,180(sp)
    2c20:	d9002c17 	ldw	r4,176(sp)
    2c24:	a80d883a 	mov	r6,r21
    2c28:	b80b883a 	mov	r5,r23
    2c2c:	0004a740 	call	4a74 <__sbprintf>
    2c30:	00001106 	br	2c78 <___vfprintf_internal_r+0x418>
    2c34:	d9002c17 	ldw	r4,176(sp)
    2c38:	d9801e04 	addi	r6,sp,120
    2c3c:	b80b883a 	mov	r5,r23
    2c40:	00095fc0 	call	95fc <__sprint_r>
    2c44:	1000081e 	bne	r2,zero,2c68 <___vfprintf_internal_r+0x408>
    2c48:	da000404 	addi	r8,sp,16
    2c4c:	003f5306 	br	299c <__alt_data_end+0xff00299c>
    2c50:	d8802017 	ldw	r2,128(sp)
    2c54:	10000426 	beq	r2,zero,2c68 <___vfprintf_internal_r+0x408>
    2c58:	d9002c17 	ldw	r4,176(sp)
    2c5c:	d9801e04 	addi	r6,sp,120
    2c60:	b80b883a 	mov	r5,r23
    2c64:	00095fc0 	call	95fc <__sprint_r>
    2c68:	b880030b 	ldhu	r2,12(r23)
    2c6c:	1080100c 	andi	r2,r2,64
    2c70:	1005901e 	bne	r2,zero,42b4 <___vfprintf_internal_r+0x1a54>
    2c74:	d8802f17 	ldw	r2,188(sp)
    2c78:	dfc04717 	ldw	ra,284(sp)
    2c7c:	df004617 	ldw	fp,280(sp)
    2c80:	ddc04517 	ldw	r23,276(sp)
    2c84:	dd804417 	ldw	r22,272(sp)
    2c88:	dd404317 	ldw	r21,268(sp)
    2c8c:	dd004217 	ldw	r20,264(sp)
    2c90:	dcc04117 	ldw	r19,260(sp)
    2c94:	dc804017 	ldw	r18,256(sp)
    2c98:	dc403f17 	ldw	r17,252(sp)
    2c9c:	dc003e17 	ldw	r16,248(sp)
    2ca0:	dec04804 	addi	sp,sp,288
    2ca4:	f800283a 	ret
    2ca8:	d9002c17 	ldw	r4,176(sp)
    2cac:	0006b040 	call	6b04 <__sinit>
    2cb0:	003f0406 	br	28c4 <__alt_data_end+0xff0028c4>
    2cb4:	d8802d17 	ldw	r2,180(sp)
    2cb8:	d9002d17 	ldw	r4,180(sp)
    2cbc:	10800017 	ldw	r2,0(r2)
    2cc0:	d8803115 	stw	r2,196(sp)
    2cc4:	20800104 	addi	r2,r4,4
    2cc8:	d9003117 	ldw	r4,196(sp)
    2ccc:	203fa716 	blt	r4,zero,2b6c <__alt_data_end+0xff002b6c>
    2cd0:	d8802d15 	stw	r2,180(sp)
    2cd4:	ac400007 	ldb	r17,0(r21)
    2cd8:	003f4206 	br	29e4 <__alt_data_end+0xff0029e4>
    2cdc:	ac400007 	ldb	r17,0(r21)
    2ce0:	aac00044 	addi	r11,r21,1
    2ce4:	8a872826 	beq	r17,r10,4988 <___vfprintf_internal_r+0x2128>
    2ce8:	88bff404 	addi	r2,r17,-48
    2cec:	0009883a 	mov	r4,zero
    2cf0:	30867d36 	bltu	r6,r2,46e8 <___vfprintf_internal_r+0x1e88>
    2cf4:	5c400007 	ldb	r17,0(r11)
    2cf8:	210002a4 	muli	r4,r4,10
    2cfc:	5d400044 	addi	r21,r11,1
    2d00:	a817883a 	mov	r11,r21
    2d04:	2089883a 	add	r4,r4,r2
    2d08:	88bff404 	addi	r2,r17,-48
    2d0c:	30bff92e 	bgeu	r6,r2,2cf4 <__alt_data_end+0xff002cf4>
    2d10:	2005c916 	blt	r4,zero,4438 <___vfprintf_internal_r+0x1bd8>
    2d14:	d9002915 	stw	r4,164(sp)
    2d18:	003f3306 	br	29e8 <__alt_data_end+0xff0029e8>
    2d1c:	94802014 	ori	r18,r18,128
    2d20:	ac400007 	ldb	r17,0(r21)
    2d24:	003f2f06 	br	29e4 <__alt_data_end+0xff0029e4>
    2d28:	a809883a 	mov	r4,r21
    2d2c:	d8003115 	stw	zero,196(sp)
    2d30:	88bff404 	addi	r2,r17,-48
    2d34:	0017883a 	mov	r11,zero
    2d38:	24400007 	ldb	r17,0(r4)
    2d3c:	5ac002a4 	muli	r11,r11,10
    2d40:	ad400044 	addi	r21,r21,1
    2d44:	a809883a 	mov	r4,r21
    2d48:	12d7883a 	add	r11,r2,r11
    2d4c:	88bff404 	addi	r2,r17,-48
    2d50:	30bff92e 	bgeu	r6,r2,2d38 <__alt_data_end+0xff002d38>
    2d54:	dac03115 	stw	r11,196(sp)
    2d58:	003f2306 	br	29e8 <__alt_data_end+0xff0029e8>
    2d5c:	18c03fcc 	andi	r3,r3,255
    2d60:	18072b1e 	bne	r3,zero,4a10 <___vfprintf_internal_r+0x21b0>
    2d64:	94800414 	ori	r18,r18,16
    2d68:	9080080c 	andi	r2,r18,32
    2d6c:	10037b26 	beq	r2,zero,3b5c <___vfprintf_internal_r+0x12fc>
    2d70:	d9402d17 	ldw	r5,180(sp)
    2d74:	28800117 	ldw	r2,4(r5)
    2d78:	2cc00017 	ldw	r19,0(r5)
    2d7c:	29400204 	addi	r5,r5,8
    2d80:	d9402d15 	stw	r5,180(sp)
    2d84:	102d883a 	mov	r22,r2
    2d88:	10044b16 	blt	r2,zero,3eb8 <___vfprintf_internal_r+0x1658>
    2d8c:	d9402917 	ldw	r5,164(sp)
    2d90:	df002783 	ldbu	fp,158(sp)
    2d94:	2803bc16 	blt	r5,zero,3c88 <___vfprintf_internal_r+0x1428>
    2d98:	00ffdfc4 	movi	r3,-129
    2d9c:	9d84b03a 	or	r2,r19,r22
    2da0:	90e4703a 	and	r18,r18,r3
    2da4:	10017726 	beq	r2,zero,3384 <___vfprintf_internal_r+0xb24>
    2da8:	b0038326 	beq	r22,zero,3bb8 <___vfprintf_internal_r+0x1358>
    2dac:	dc402a15 	stw	r17,168(sp)
    2db0:	dc001e04 	addi	r16,sp,120
    2db4:	b023883a 	mov	r17,r22
    2db8:	402d883a 	mov	r22,r8
    2dbc:	9809883a 	mov	r4,r19
    2dc0:	880b883a 	mov	r5,r17
    2dc4:	01800284 	movi	r6,10
    2dc8:	000f883a 	mov	r7,zero
    2dcc:	000b9f40 	call	b9f4 <__umoddi3>
    2dd0:	10800c04 	addi	r2,r2,48
    2dd4:	843fffc4 	addi	r16,r16,-1
    2dd8:	9809883a 	mov	r4,r19
    2ddc:	880b883a 	mov	r5,r17
    2de0:	80800005 	stb	r2,0(r16)
    2de4:	01800284 	movi	r6,10
    2de8:	000f883a 	mov	r7,zero
    2dec:	000b47c0 	call	b47c <__udivdi3>
    2df0:	1027883a 	mov	r19,r2
    2df4:	10c4b03a 	or	r2,r2,r3
    2df8:	1823883a 	mov	r17,r3
    2dfc:	103fef1e 	bne	r2,zero,2dbc <__alt_data_end+0xff002dbc>
    2e00:	d8c02817 	ldw	r3,160(sp)
    2e04:	dc402a17 	ldw	r17,168(sp)
    2e08:	b011883a 	mov	r8,r22
    2e0c:	1c07c83a 	sub	r3,r3,r16
    2e10:	d8c02e15 	stw	r3,184(sp)
    2e14:	00005906 	br	2f7c <___vfprintf_internal_r+0x71c>
    2e18:	18c03fcc 	andi	r3,r3,255
    2e1c:	1806fa1e 	bne	r3,zero,4a08 <___vfprintf_internal_r+0x21a8>
    2e20:	9080020c 	andi	r2,r18,8
    2e24:	10048a26 	beq	r2,zero,4050 <___vfprintf_internal_r+0x17f0>
    2e28:	d8c02d17 	ldw	r3,180(sp)
    2e2c:	d9002d17 	ldw	r4,180(sp)
    2e30:	d9402d17 	ldw	r5,180(sp)
    2e34:	18c00017 	ldw	r3,0(r3)
    2e38:	21000117 	ldw	r4,4(r4)
    2e3c:	29400204 	addi	r5,r5,8
    2e40:	d8c03615 	stw	r3,216(sp)
    2e44:	d9003815 	stw	r4,224(sp)
    2e48:	d9402d15 	stw	r5,180(sp)
    2e4c:	d9003617 	ldw	r4,216(sp)
    2e50:	d9403817 	ldw	r5,224(sp)
    2e54:	da003d15 	stw	r8,244(sp)
    2e58:	04000044 	movi	r16,1
    2e5c:	00092740 	call	9274 <__fpclassifyd>
    2e60:	da003d17 	ldw	r8,244(sp)
    2e64:	14041f1e 	bne	r2,r16,3ee4 <___vfprintf_internal_r+0x1684>
    2e68:	d9003617 	ldw	r4,216(sp)
    2e6c:	d9403817 	ldw	r5,224(sp)
    2e70:	000d883a 	mov	r6,zero
    2e74:	000f883a 	mov	r7,zero
    2e78:	000d2240 	call	d224 <__ledf2>
    2e7c:	da003d17 	ldw	r8,244(sp)
    2e80:	1005be16 	blt	r2,zero,457c <___vfprintf_internal_r+0x1d1c>
    2e84:	df002783 	ldbu	fp,158(sp)
    2e88:	008011c4 	movi	r2,71
    2e8c:	1445330e 	bge	r2,r17,435c <___vfprintf_internal_r+0x1afc>
    2e90:	04000074 	movhi	r16,1
    2e94:	8400ea04 	addi	r16,r16,936
    2e98:	00c000c4 	movi	r3,3
    2e9c:	00bfdfc4 	movi	r2,-129
    2ea0:	d8c02a15 	stw	r3,168(sp)
    2ea4:	90a4703a 	and	r18,r18,r2
    2ea8:	d8c02e15 	stw	r3,184(sp)
    2eac:	d8002915 	stw	zero,164(sp)
    2eb0:	d8003215 	stw	zero,200(sp)
    2eb4:	00003706 	br	2f94 <___vfprintf_internal_r+0x734>
    2eb8:	94800214 	ori	r18,r18,8
    2ebc:	ac400007 	ldb	r17,0(r21)
    2ec0:	003ec806 	br	29e4 <__alt_data_end+0xff0029e4>
    2ec4:	18c03fcc 	andi	r3,r3,255
    2ec8:	1806db1e 	bne	r3,zero,4a38 <___vfprintf_internal_r+0x21d8>
    2ecc:	94800414 	ori	r18,r18,16
    2ed0:	9080080c 	andi	r2,r18,32
    2ed4:	1002d826 	beq	r2,zero,3a38 <___vfprintf_internal_r+0x11d8>
    2ed8:	d9402d17 	ldw	r5,180(sp)
    2edc:	d8c02917 	ldw	r3,164(sp)
    2ee0:	d8002785 	stb	zero,158(sp)
    2ee4:	28800204 	addi	r2,r5,8
    2ee8:	2cc00017 	ldw	r19,0(r5)
    2eec:	2d800117 	ldw	r22,4(r5)
    2ef0:	18048f16 	blt	r3,zero,4130 <___vfprintf_internal_r+0x18d0>
    2ef4:	013fdfc4 	movi	r4,-129
    2ef8:	9d86b03a 	or	r3,r19,r22
    2efc:	d8802d15 	stw	r2,180(sp)
    2f00:	9124703a 	and	r18,r18,r4
    2f04:	1802d91e 	bne	r3,zero,3a6c <___vfprintf_internal_r+0x120c>
    2f08:	d8c02917 	ldw	r3,164(sp)
    2f0c:	0039883a 	mov	fp,zero
    2f10:	1805c326 	beq	r3,zero,4620 <___vfprintf_internal_r+0x1dc0>
    2f14:	0027883a 	mov	r19,zero
    2f18:	002d883a 	mov	r22,zero
    2f1c:	dc001e04 	addi	r16,sp,120
    2f20:	9806d0fa 	srli	r3,r19,3
    2f24:	b008977a 	slli	r4,r22,29
    2f28:	b02cd0fa 	srli	r22,r22,3
    2f2c:	9cc001cc 	andi	r19,r19,7
    2f30:	98800c04 	addi	r2,r19,48
    2f34:	843fffc4 	addi	r16,r16,-1
    2f38:	20e6b03a 	or	r19,r4,r3
    2f3c:	80800005 	stb	r2,0(r16)
    2f40:	9d86b03a 	or	r3,r19,r22
    2f44:	183ff61e 	bne	r3,zero,2f20 <__alt_data_end+0xff002f20>
    2f48:	90c0004c 	andi	r3,r18,1
    2f4c:	18013b26 	beq	r3,zero,343c <___vfprintf_internal_r+0xbdc>
    2f50:	10803fcc 	andi	r2,r2,255
    2f54:	1080201c 	xori	r2,r2,128
    2f58:	10bfe004 	addi	r2,r2,-128
    2f5c:	00c00c04 	movi	r3,48
    2f60:	10c13626 	beq	r2,r3,343c <___vfprintf_internal_r+0xbdc>
    2f64:	80ffffc5 	stb	r3,-1(r16)
    2f68:	d8c02817 	ldw	r3,160(sp)
    2f6c:	80bfffc4 	addi	r2,r16,-1
    2f70:	1021883a 	mov	r16,r2
    2f74:	1887c83a 	sub	r3,r3,r2
    2f78:	d8c02e15 	stw	r3,184(sp)
    2f7c:	d8802e17 	ldw	r2,184(sp)
    2f80:	d9002917 	ldw	r4,164(sp)
    2f84:	1100010e 	bge	r2,r4,2f8c <___vfprintf_internal_r+0x72c>
    2f88:	2005883a 	mov	r2,r4
    2f8c:	d8802a15 	stw	r2,168(sp)
    2f90:	d8003215 	stw	zero,200(sp)
    2f94:	e7003fcc 	andi	fp,fp,255
    2f98:	e700201c 	xori	fp,fp,128
    2f9c:	e73fe004 	addi	fp,fp,-128
    2fa0:	e0000326 	beq	fp,zero,2fb0 <___vfprintf_internal_r+0x750>
    2fa4:	d8c02a17 	ldw	r3,168(sp)
    2fa8:	18c00044 	addi	r3,r3,1
    2fac:	d8c02a15 	stw	r3,168(sp)
    2fb0:	90c0008c 	andi	r3,r18,2
    2fb4:	d8c02b15 	stw	r3,172(sp)
    2fb8:	18000326 	beq	r3,zero,2fc8 <___vfprintf_internal_r+0x768>
    2fbc:	d8c02a17 	ldw	r3,168(sp)
    2fc0:	18c00084 	addi	r3,r3,2
    2fc4:	d8c02a15 	stw	r3,168(sp)
    2fc8:	90c0210c 	andi	r3,r18,132
    2fcc:	d8c03015 	stw	r3,192(sp)
    2fd0:	1801a31e 	bne	r3,zero,3660 <___vfprintf_internal_r+0xe00>
    2fd4:	d9003117 	ldw	r4,196(sp)
    2fd8:	d8c02a17 	ldw	r3,168(sp)
    2fdc:	20e7c83a 	sub	r19,r4,r3
    2fe0:	04c19f0e 	bge	zero,r19,3660 <___vfprintf_internal_r+0xe00>
    2fe4:	02400404 	movi	r9,16
    2fe8:	d8c02017 	ldw	r3,128(sp)
    2fec:	d8801f17 	ldw	r2,124(sp)
    2ff0:	4cc50d0e 	bge	r9,r19,4428 <___vfprintf_internal_r+0x1bc8>
    2ff4:	01400074 	movhi	r5,1
    2ff8:	2940fd84 	addi	r5,r5,1014
    2ffc:	dc403b15 	stw	r17,236(sp)
    3000:	d9403515 	stw	r5,212(sp)
    3004:	9823883a 	mov	r17,r19
    3008:	482d883a 	mov	r22,r9
    300c:	9027883a 	mov	r19,r18
    3010:	070001c4 	movi	fp,7
    3014:	8025883a 	mov	r18,r16
    3018:	dc002c17 	ldw	r16,176(sp)
    301c:	00000306 	br	302c <___vfprintf_internal_r+0x7cc>
    3020:	8c7ffc04 	addi	r17,r17,-16
    3024:	42000204 	addi	r8,r8,8
    3028:	b440130e 	bge	r22,r17,3078 <___vfprintf_internal_r+0x818>
    302c:	01000074 	movhi	r4,1
    3030:	18c00404 	addi	r3,r3,16
    3034:	10800044 	addi	r2,r2,1
    3038:	2100fd84 	addi	r4,r4,1014
    303c:	41000015 	stw	r4,0(r8)
    3040:	45800115 	stw	r22,4(r8)
    3044:	d8c02015 	stw	r3,128(sp)
    3048:	d8801f15 	stw	r2,124(sp)
    304c:	e0bff40e 	bge	fp,r2,3020 <__alt_data_end+0xff003020>
    3050:	d9801e04 	addi	r6,sp,120
    3054:	b80b883a 	mov	r5,r23
    3058:	8009883a 	mov	r4,r16
    305c:	00095fc0 	call	95fc <__sprint_r>
    3060:	103f011e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3064:	8c7ffc04 	addi	r17,r17,-16
    3068:	d8c02017 	ldw	r3,128(sp)
    306c:	d8801f17 	ldw	r2,124(sp)
    3070:	da000404 	addi	r8,sp,16
    3074:	b47fed16 	blt	r22,r17,302c <__alt_data_end+0xff00302c>
    3078:	9021883a 	mov	r16,r18
    307c:	9825883a 	mov	r18,r19
    3080:	8827883a 	mov	r19,r17
    3084:	dc403b17 	ldw	r17,236(sp)
    3088:	d9403517 	ldw	r5,212(sp)
    308c:	98c7883a 	add	r3,r19,r3
    3090:	10800044 	addi	r2,r2,1
    3094:	41400015 	stw	r5,0(r8)
    3098:	44c00115 	stw	r19,4(r8)
    309c:	d8c02015 	stw	r3,128(sp)
    30a0:	d8801f15 	stw	r2,124(sp)
    30a4:	010001c4 	movi	r4,7
    30a8:	2082a316 	blt	r4,r2,3b38 <___vfprintf_internal_r+0x12d8>
    30ac:	df002787 	ldb	fp,158(sp)
    30b0:	42000204 	addi	r8,r8,8
    30b4:	e0000c26 	beq	fp,zero,30e8 <___vfprintf_internal_r+0x888>
    30b8:	d8801f17 	ldw	r2,124(sp)
    30bc:	d9002784 	addi	r4,sp,158
    30c0:	18c00044 	addi	r3,r3,1
    30c4:	10800044 	addi	r2,r2,1
    30c8:	41000015 	stw	r4,0(r8)
    30cc:	01000044 	movi	r4,1
    30d0:	41000115 	stw	r4,4(r8)
    30d4:	d8c02015 	stw	r3,128(sp)
    30d8:	d8801f15 	stw	r2,124(sp)
    30dc:	010001c4 	movi	r4,7
    30e0:	20823c16 	blt	r4,r2,39d4 <___vfprintf_internal_r+0x1174>
    30e4:	42000204 	addi	r8,r8,8
    30e8:	d8802b17 	ldw	r2,172(sp)
    30ec:	10000c26 	beq	r2,zero,3120 <___vfprintf_internal_r+0x8c0>
    30f0:	d8801f17 	ldw	r2,124(sp)
    30f4:	d9002704 	addi	r4,sp,156
    30f8:	18c00084 	addi	r3,r3,2
    30fc:	10800044 	addi	r2,r2,1
    3100:	41000015 	stw	r4,0(r8)
    3104:	01000084 	movi	r4,2
    3108:	41000115 	stw	r4,4(r8)
    310c:	d8c02015 	stw	r3,128(sp)
    3110:	d8801f15 	stw	r2,124(sp)
    3114:	010001c4 	movi	r4,7
    3118:	20823616 	blt	r4,r2,39f4 <___vfprintf_internal_r+0x1194>
    311c:	42000204 	addi	r8,r8,8
    3120:	d9003017 	ldw	r4,192(sp)
    3124:	00802004 	movi	r2,128
    3128:	20819926 	beq	r4,r2,3790 <___vfprintf_internal_r+0xf30>
    312c:	d9402917 	ldw	r5,164(sp)
    3130:	d8802e17 	ldw	r2,184(sp)
    3134:	28adc83a 	sub	r22,r5,r2
    3138:	0580310e 	bge	zero,r22,3200 <___vfprintf_internal_r+0x9a0>
    313c:	07000404 	movi	fp,16
    3140:	d8801f17 	ldw	r2,124(sp)
    3144:	e584140e 	bge	fp,r22,4198 <___vfprintf_internal_r+0x1938>
    3148:	01400074 	movhi	r5,1
    314c:	2940f984 	addi	r5,r5,998
    3150:	dc402915 	stw	r17,164(sp)
    3154:	d9402b15 	stw	r5,172(sp)
    3158:	b023883a 	mov	r17,r22
    315c:	04c001c4 	movi	r19,7
    3160:	a82d883a 	mov	r22,r21
    3164:	902b883a 	mov	r21,r18
    3168:	8025883a 	mov	r18,r16
    316c:	dc002c17 	ldw	r16,176(sp)
    3170:	00000306 	br	3180 <___vfprintf_internal_r+0x920>
    3174:	8c7ffc04 	addi	r17,r17,-16
    3178:	42000204 	addi	r8,r8,8
    317c:	e440110e 	bge	fp,r17,31c4 <___vfprintf_internal_r+0x964>
    3180:	18c00404 	addi	r3,r3,16
    3184:	10800044 	addi	r2,r2,1
    3188:	45000015 	stw	r20,0(r8)
    318c:	47000115 	stw	fp,4(r8)
    3190:	d8c02015 	stw	r3,128(sp)
    3194:	d8801f15 	stw	r2,124(sp)
    3198:	98bff60e 	bge	r19,r2,3174 <__alt_data_end+0xff003174>
    319c:	d9801e04 	addi	r6,sp,120
    31a0:	b80b883a 	mov	r5,r23
    31a4:	8009883a 	mov	r4,r16
    31a8:	00095fc0 	call	95fc <__sprint_r>
    31ac:	103eae1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    31b0:	8c7ffc04 	addi	r17,r17,-16
    31b4:	d8c02017 	ldw	r3,128(sp)
    31b8:	d8801f17 	ldw	r2,124(sp)
    31bc:	da000404 	addi	r8,sp,16
    31c0:	e47fef16 	blt	fp,r17,3180 <__alt_data_end+0xff003180>
    31c4:	9021883a 	mov	r16,r18
    31c8:	a825883a 	mov	r18,r21
    31cc:	b02b883a 	mov	r21,r22
    31d0:	882d883a 	mov	r22,r17
    31d4:	dc402917 	ldw	r17,164(sp)
    31d8:	d9002b17 	ldw	r4,172(sp)
    31dc:	1d87883a 	add	r3,r3,r22
    31e0:	10800044 	addi	r2,r2,1
    31e4:	41000015 	stw	r4,0(r8)
    31e8:	45800115 	stw	r22,4(r8)
    31ec:	d8c02015 	stw	r3,128(sp)
    31f0:	d8801f15 	stw	r2,124(sp)
    31f4:	010001c4 	movi	r4,7
    31f8:	2081ee16 	blt	r4,r2,39b4 <___vfprintf_internal_r+0x1154>
    31fc:	42000204 	addi	r8,r8,8
    3200:	9080400c 	andi	r2,r18,256
    3204:	1001181e 	bne	r2,zero,3668 <___vfprintf_internal_r+0xe08>
    3208:	d9402e17 	ldw	r5,184(sp)
    320c:	d8801f17 	ldw	r2,124(sp)
    3210:	44000015 	stw	r16,0(r8)
    3214:	1947883a 	add	r3,r3,r5
    3218:	10800044 	addi	r2,r2,1
    321c:	41400115 	stw	r5,4(r8)
    3220:	d8c02015 	stw	r3,128(sp)
    3224:	d8801f15 	stw	r2,124(sp)
    3228:	010001c4 	movi	r4,7
    322c:	2081d316 	blt	r4,r2,397c <___vfprintf_internal_r+0x111c>
    3230:	42000204 	addi	r8,r8,8
    3234:	9480010c 	andi	r18,r18,4
    3238:	90003226 	beq	r18,zero,3304 <___vfprintf_internal_r+0xaa4>
    323c:	d9403117 	ldw	r5,196(sp)
    3240:	d8802a17 	ldw	r2,168(sp)
    3244:	28a1c83a 	sub	r16,r5,r2
    3248:	04002e0e 	bge	zero,r16,3304 <___vfprintf_internal_r+0xaa4>
    324c:	04400404 	movi	r17,16
    3250:	d8801f17 	ldw	r2,124(sp)
    3254:	8c04a20e 	bge	r17,r16,44e0 <___vfprintf_internal_r+0x1c80>
    3258:	01400074 	movhi	r5,1
    325c:	2940fd84 	addi	r5,r5,1014
    3260:	d9403515 	stw	r5,212(sp)
    3264:	048001c4 	movi	r18,7
    3268:	dcc02c17 	ldw	r19,176(sp)
    326c:	00000306 	br	327c <___vfprintf_internal_r+0xa1c>
    3270:	843ffc04 	addi	r16,r16,-16
    3274:	42000204 	addi	r8,r8,8
    3278:	8c00130e 	bge	r17,r16,32c8 <___vfprintf_internal_r+0xa68>
    327c:	01000074 	movhi	r4,1
    3280:	18c00404 	addi	r3,r3,16
    3284:	10800044 	addi	r2,r2,1
    3288:	2100fd84 	addi	r4,r4,1014
    328c:	41000015 	stw	r4,0(r8)
    3290:	44400115 	stw	r17,4(r8)
    3294:	d8c02015 	stw	r3,128(sp)
    3298:	d8801f15 	stw	r2,124(sp)
    329c:	90bff40e 	bge	r18,r2,3270 <__alt_data_end+0xff003270>
    32a0:	d9801e04 	addi	r6,sp,120
    32a4:	b80b883a 	mov	r5,r23
    32a8:	9809883a 	mov	r4,r19
    32ac:	00095fc0 	call	95fc <__sprint_r>
    32b0:	103e6d1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    32b4:	843ffc04 	addi	r16,r16,-16
    32b8:	d8c02017 	ldw	r3,128(sp)
    32bc:	d8801f17 	ldw	r2,124(sp)
    32c0:	da000404 	addi	r8,sp,16
    32c4:	8c3fed16 	blt	r17,r16,327c <__alt_data_end+0xff00327c>
    32c8:	d9403517 	ldw	r5,212(sp)
    32cc:	1c07883a 	add	r3,r3,r16
    32d0:	10800044 	addi	r2,r2,1
    32d4:	41400015 	stw	r5,0(r8)
    32d8:	44000115 	stw	r16,4(r8)
    32dc:	d8c02015 	stw	r3,128(sp)
    32e0:	d8801f15 	stw	r2,124(sp)
    32e4:	010001c4 	movi	r4,7
    32e8:	2080060e 	bge	r4,r2,3304 <___vfprintf_internal_r+0xaa4>
    32ec:	d9002c17 	ldw	r4,176(sp)
    32f0:	d9801e04 	addi	r6,sp,120
    32f4:	b80b883a 	mov	r5,r23
    32f8:	00095fc0 	call	95fc <__sprint_r>
    32fc:	103e5a1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3300:	d8c02017 	ldw	r3,128(sp)
    3304:	d8803117 	ldw	r2,196(sp)
    3308:	d9002a17 	ldw	r4,168(sp)
    330c:	1100010e 	bge	r2,r4,3314 <___vfprintf_internal_r+0xab4>
    3310:	2005883a 	mov	r2,r4
    3314:	d9402f17 	ldw	r5,188(sp)
    3318:	288b883a 	add	r5,r5,r2
    331c:	d9402f15 	stw	r5,188(sp)
    3320:	18019e1e 	bne	r3,zero,399c <___vfprintf_internal_r+0x113c>
    3324:	a8800007 	ldb	r2,0(r21)
    3328:	d8001f15 	stw	zero,124(sp)
    332c:	da000404 	addi	r8,sp,16
    3330:	103d851e 	bne	r2,zero,2948 <__alt_data_end+0xff002948>
    3334:	a821883a 	mov	r16,r21
    3338:	003d9b06 	br	29a8 <__alt_data_end+0xff0029a8>
    333c:	18c03fcc 	andi	r3,r3,255
    3340:	1805c11e 	bne	r3,zero,4a48 <___vfprintf_internal_r+0x21e8>
    3344:	94800414 	ori	r18,r18,16
    3348:	9080080c 	andi	r2,r18,32
    334c:	10020c26 	beq	r2,zero,3b80 <___vfprintf_internal_r+0x1320>
    3350:	d8802d17 	ldw	r2,180(sp)
    3354:	d9002917 	ldw	r4,164(sp)
    3358:	d8002785 	stb	zero,158(sp)
    335c:	10c00204 	addi	r3,r2,8
    3360:	14c00017 	ldw	r19,0(r2)
    3364:	15800117 	ldw	r22,4(r2)
    3368:	20040f16 	blt	r4,zero,43a8 <___vfprintf_internal_r+0x1b48>
    336c:	013fdfc4 	movi	r4,-129
    3370:	9d84b03a 	or	r2,r19,r22
    3374:	d8c02d15 	stw	r3,180(sp)
    3378:	9124703a 	and	r18,r18,r4
    337c:	0039883a 	mov	fp,zero
    3380:	103e891e 	bne	r2,zero,2da8 <__alt_data_end+0xff002da8>
    3384:	d9002917 	ldw	r4,164(sp)
    3388:	2002c11e 	bne	r4,zero,3e90 <___vfprintf_internal_r+0x1630>
    338c:	d8002915 	stw	zero,164(sp)
    3390:	d8002e15 	stw	zero,184(sp)
    3394:	dc001e04 	addi	r16,sp,120
    3398:	003ef806 	br	2f7c <__alt_data_end+0xff002f7c>
    339c:	18c03fcc 	andi	r3,r3,255
    33a0:	18059d1e 	bne	r3,zero,4a18 <___vfprintf_internal_r+0x21b8>
    33a4:	01400074 	movhi	r5,1
    33a8:	2940ed04 	addi	r5,r5,948
    33ac:	d9403915 	stw	r5,228(sp)
    33b0:	9080080c 	andi	r2,r18,32
    33b4:	10005226 	beq	r2,zero,3500 <___vfprintf_internal_r+0xca0>
    33b8:	d8802d17 	ldw	r2,180(sp)
    33bc:	14c00017 	ldw	r19,0(r2)
    33c0:	15800117 	ldw	r22,4(r2)
    33c4:	10800204 	addi	r2,r2,8
    33c8:	d8802d15 	stw	r2,180(sp)
    33cc:	9080004c 	andi	r2,r18,1
    33d0:	10019026 	beq	r2,zero,3a14 <___vfprintf_internal_r+0x11b4>
    33d4:	9d84b03a 	or	r2,r19,r22
    33d8:	10036926 	beq	r2,zero,4180 <___vfprintf_internal_r+0x1920>
    33dc:	d8c02917 	ldw	r3,164(sp)
    33e0:	00800c04 	movi	r2,48
    33e4:	d8802705 	stb	r2,156(sp)
    33e8:	dc402745 	stb	r17,157(sp)
    33ec:	d8002785 	stb	zero,158(sp)
    33f0:	90800094 	ori	r2,r18,2
    33f4:	18045d16 	blt	r3,zero,456c <___vfprintf_internal_r+0x1d0c>
    33f8:	00bfdfc4 	movi	r2,-129
    33fc:	90a4703a 	and	r18,r18,r2
    3400:	94800094 	ori	r18,r18,2
    3404:	0039883a 	mov	fp,zero
    3408:	d9003917 	ldw	r4,228(sp)
    340c:	dc001e04 	addi	r16,sp,120
    3410:	988003cc 	andi	r2,r19,15
    3414:	b006973a 	slli	r3,r22,28
    3418:	2085883a 	add	r2,r4,r2
    341c:	9826d13a 	srli	r19,r19,4
    3420:	10800003 	ldbu	r2,0(r2)
    3424:	b02cd13a 	srli	r22,r22,4
    3428:	843fffc4 	addi	r16,r16,-1
    342c:	1ce6b03a 	or	r19,r3,r19
    3430:	80800005 	stb	r2,0(r16)
    3434:	9d84b03a 	or	r2,r19,r22
    3438:	103ff51e 	bne	r2,zero,3410 <__alt_data_end+0xff003410>
    343c:	d8c02817 	ldw	r3,160(sp)
    3440:	1c07c83a 	sub	r3,r3,r16
    3444:	d8c02e15 	stw	r3,184(sp)
    3448:	003ecc06 	br	2f7c <__alt_data_end+0xff002f7c>
    344c:	18c03fcc 	andi	r3,r3,255
    3450:	183e9f26 	beq	r3,zero,2ed0 <__alt_data_end+0xff002ed0>
    3454:	d9c02785 	stb	r7,158(sp)
    3458:	003e9d06 	br	2ed0 <__alt_data_end+0xff002ed0>
    345c:	00c00044 	movi	r3,1
    3460:	01c00ac4 	movi	r7,43
    3464:	ac400007 	ldb	r17,0(r21)
    3468:	003d5e06 	br	29e4 <__alt_data_end+0xff0029e4>
    346c:	94800814 	ori	r18,r18,32
    3470:	ac400007 	ldb	r17,0(r21)
    3474:	003d5b06 	br	29e4 <__alt_data_end+0xff0029e4>
    3478:	d8c02d17 	ldw	r3,180(sp)
    347c:	d8002785 	stb	zero,158(sp)
    3480:	1c000017 	ldw	r16,0(r3)
    3484:	1cc00104 	addi	r19,r3,4
    3488:	80041926 	beq	r16,zero,44f0 <___vfprintf_internal_r+0x1c90>
    348c:	d9002917 	ldw	r4,164(sp)
    3490:	2003d016 	blt	r4,zero,43d4 <___vfprintf_internal_r+0x1b74>
    3494:	200d883a 	mov	r6,r4
    3498:	000b883a 	mov	r5,zero
    349c:	8009883a 	mov	r4,r16
    34a0:	da003d15 	stw	r8,244(sp)
    34a4:	00078640 	call	7864 <memchr>
    34a8:	da003d17 	ldw	r8,244(sp)
    34ac:	10045426 	beq	r2,zero,4600 <___vfprintf_internal_r+0x1da0>
    34b0:	1405c83a 	sub	r2,r2,r16
    34b4:	d8802e15 	stw	r2,184(sp)
    34b8:	1003cc16 	blt	r2,zero,43ec <___vfprintf_internal_r+0x1b8c>
    34bc:	df002783 	ldbu	fp,158(sp)
    34c0:	d8802a15 	stw	r2,168(sp)
    34c4:	dcc02d15 	stw	r19,180(sp)
    34c8:	d8002915 	stw	zero,164(sp)
    34cc:	d8003215 	stw	zero,200(sp)
    34d0:	003eb006 	br	2f94 <__alt_data_end+0xff002f94>
    34d4:	18c03fcc 	andi	r3,r3,255
    34d8:	183f9b26 	beq	r3,zero,3348 <__alt_data_end+0xff003348>
    34dc:	d9c02785 	stb	r7,158(sp)
    34e0:	003f9906 	br	3348 <__alt_data_end+0xff003348>
    34e4:	18c03fcc 	andi	r3,r3,255
    34e8:	1805551e 	bne	r3,zero,4a40 <___vfprintf_internal_r+0x21e0>
    34ec:	01400074 	movhi	r5,1
    34f0:	2940f204 	addi	r5,r5,968
    34f4:	d9403915 	stw	r5,228(sp)
    34f8:	9080080c 	andi	r2,r18,32
    34fc:	103fae1e 	bne	r2,zero,33b8 <__alt_data_end+0xff0033b8>
    3500:	9080040c 	andi	r2,r18,16
    3504:	1002de26 	beq	r2,zero,4080 <___vfprintf_internal_r+0x1820>
    3508:	d8c02d17 	ldw	r3,180(sp)
    350c:	002d883a 	mov	r22,zero
    3510:	1cc00017 	ldw	r19,0(r3)
    3514:	18c00104 	addi	r3,r3,4
    3518:	d8c02d15 	stw	r3,180(sp)
    351c:	003fab06 	br	33cc <__alt_data_end+0xff0033cc>
    3520:	38803fcc 	andi	r2,r7,255
    3524:	1080201c 	xori	r2,r2,128
    3528:	10bfe004 	addi	r2,r2,-128
    352c:	1002d21e 	bne	r2,zero,4078 <___vfprintf_internal_r+0x1818>
    3530:	00c00044 	movi	r3,1
    3534:	01c00804 	movi	r7,32
    3538:	ac400007 	ldb	r17,0(r21)
    353c:	003d2906 	br	29e4 <__alt_data_end+0xff0029e4>
    3540:	94800054 	ori	r18,r18,1
    3544:	ac400007 	ldb	r17,0(r21)
    3548:	003d2606 	br	29e4 <__alt_data_end+0xff0029e4>
    354c:	18c03fcc 	andi	r3,r3,255
    3550:	183e0526 	beq	r3,zero,2d68 <__alt_data_end+0xff002d68>
    3554:	d9c02785 	stb	r7,158(sp)
    3558:	003e0306 	br	2d68 <__alt_data_end+0xff002d68>
    355c:	94801014 	ori	r18,r18,64
    3560:	ac400007 	ldb	r17,0(r21)
    3564:	003d1f06 	br	29e4 <__alt_data_end+0xff0029e4>
    3568:	ac400007 	ldb	r17,0(r21)
    356c:	8a438726 	beq	r17,r9,438c <___vfprintf_internal_r+0x1b2c>
    3570:	94800414 	ori	r18,r18,16
    3574:	003d1b06 	br	29e4 <__alt_data_end+0xff0029e4>
    3578:	18c03fcc 	andi	r3,r3,255
    357c:	1805341e 	bne	r3,zero,4a50 <___vfprintf_internal_r+0x21f0>
    3580:	9080080c 	andi	r2,r18,32
    3584:	1002cd26 	beq	r2,zero,40bc <___vfprintf_internal_r+0x185c>
    3588:	d9402d17 	ldw	r5,180(sp)
    358c:	d9002f17 	ldw	r4,188(sp)
    3590:	28800017 	ldw	r2,0(r5)
    3594:	2007d7fa 	srai	r3,r4,31
    3598:	29400104 	addi	r5,r5,4
    359c:	d9402d15 	stw	r5,180(sp)
    35a0:	11000015 	stw	r4,0(r2)
    35a4:	10c00115 	stw	r3,4(r2)
    35a8:	003ce506 	br	2940 <__alt_data_end+0xff002940>
    35ac:	d8c02d17 	ldw	r3,180(sp)
    35b0:	d9002d17 	ldw	r4,180(sp)
    35b4:	d8002785 	stb	zero,158(sp)
    35b8:	18800017 	ldw	r2,0(r3)
    35bc:	21000104 	addi	r4,r4,4
    35c0:	00c00044 	movi	r3,1
    35c4:	d8c02a15 	stw	r3,168(sp)
    35c8:	d8801405 	stb	r2,80(sp)
    35cc:	d9002d15 	stw	r4,180(sp)
    35d0:	d8c02e15 	stw	r3,184(sp)
    35d4:	d8002915 	stw	zero,164(sp)
    35d8:	d8003215 	stw	zero,200(sp)
    35dc:	dc001404 	addi	r16,sp,80
    35e0:	0039883a 	mov	fp,zero
    35e4:	003e7206 	br	2fb0 <__alt_data_end+0xff002fb0>
    35e8:	01000074 	movhi	r4,1
    35ec:	2100f204 	addi	r4,r4,968
    35f0:	0039883a 	mov	fp,zero
    35f4:	d9003915 	stw	r4,228(sp)
    35f8:	04401e04 	movi	r17,120
    35fc:	003f8206 	br	3408 <__alt_data_end+0xff003408>
    3600:	18c03fcc 	andi	r3,r3,255
    3604:	1805061e 	bne	r3,zero,4a20 <___vfprintf_internal_r+0x21c0>
    3608:	883d9126 	beq	r17,zero,2c50 <__alt_data_end+0xff002c50>
    360c:	00c00044 	movi	r3,1
    3610:	d8c02a15 	stw	r3,168(sp)
    3614:	dc401405 	stb	r17,80(sp)
    3618:	d8002785 	stb	zero,158(sp)
    361c:	003fec06 	br	35d0 <__alt_data_end+0xff0035d0>
    3620:	01400074 	movhi	r5,1
    3624:	2940f204 	addi	r5,r5,968
    3628:	d9403915 	stw	r5,228(sp)
    362c:	d8c02d15 	stw	r3,180(sp)
    3630:	1025883a 	mov	r18,r2
    3634:	04401e04 	movi	r17,120
    3638:	9d84b03a 	or	r2,r19,r22
    363c:	1000fc1e 	bne	r2,zero,3a30 <___vfprintf_internal_r+0x11d0>
    3640:	0039883a 	mov	fp,zero
    3644:	00800084 	movi	r2,2
    3648:	10803fcc 	andi	r2,r2,255
    364c:	00c00044 	movi	r3,1
    3650:	10c20f26 	beq	r2,r3,3e90 <___vfprintf_internal_r+0x1630>
    3654:	00c00084 	movi	r3,2
    3658:	10fd6326 	beq	r2,r3,2be8 <__alt_data_end+0xff002be8>
    365c:	003e2d06 	br	2f14 <__alt_data_end+0xff002f14>
    3660:	d8c02017 	ldw	r3,128(sp)
    3664:	003e9306 	br	30b4 <__alt_data_end+0xff0030b4>
    3668:	00801944 	movi	r2,101
    366c:	14407e0e 	bge	r2,r17,3868 <___vfprintf_internal_r+0x1008>
    3670:	d9003617 	ldw	r4,216(sp)
    3674:	d9403817 	ldw	r5,224(sp)
    3678:	000d883a 	mov	r6,zero
    367c:	000f883a 	mov	r7,zero
    3680:	d8c03c15 	stw	r3,240(sp)
    3684:	da003d15 	stw	r8,244(sp)
    3688:	000d0c00 	call	d0c0 <__eqdf2>
    368c:	d8c03c17 	ldw	r3,240(sp)
    3690:	da003d17 	ldw	r8,244(sp)
    3694:	1000f71e 	bne	r2,zero,3a74 <___vfprintf_internal_r+0x1214>
    3698:	d8801f17 	ldw	r2,124(sp)
    369c:	01000074 	movhi	r4,1
    36a0:	2100f904 	addi	r4,r4,996
    36a4:	18c00044 	addi	r3,r3,1
    36a8:	10800044 	addi	r2,r2,1
    36ac:	41000015 	stw	r4,0(r8)
    36b0:	01000044 	movi	r4,1
    36b4:	41000115 	stw	r4,4(r8)
    36b8:	d8c02015 	stw	r3,128(sp)
    36bc:	d8801f15 	stw	r2,124(sp)
    36c0:	010001c4 	movi	r4,7
    36c4:	2082b816 	blt	r4,r2,41a8 <___vfprintf_internal_r+0x1948>
    36c8:	42000204 	addi	r8,r8,8
    36cc:	d8802617 	ldw	r2,152(sp)
    36d0:	d9403317 	ldw	r5,204(sp)
    36d4:	11400216 	blt	r2,r5,36e0 <___vfprintf_internal_r+0xe80>
    36d8:	9080004c 	andi	r2,r18,1
    36dc:	103ed526 	beq	r2,zero,3234 <__alt_data_end+0xff003234>
    36e0:	d8803717 	ldw	r2,220(sp)
    36e4:	d9003417 	ldw	r4,208(sp)
    36e8:	d9403717 	ldw	r5,220(sp)
    36ec:	1887883a 	add	r3,r3,r2
    36f0:	d8801f17 	ldw	r2,124(sp)
    36f4:	41000015 	stw	r4,0(r8)
    36f8:	41400115 	stw	r5,4(r8)
    36fc:	10800044 	addi	r2,r2,1
    3700:	d8c02015 	stw	r3,128(sp)
    3704:	d8801f15 	stw	r2,124(sp)
    3708:	010001c4 	movi	r4,7
    370c:	20832916 	blt	r4,r2,43b4 <___vfprintf_internal_r+0x1b54>
    3710:	42000204 	addi	r8,r8,8
    3714:	d8803317 	ldw	r2,204(sp)
    3718:	143fffc4 	addi	r16,r2,-1
    371c:	043ec50e 	bge	zero,r16,3234 <__alt_data_end+0xff003234>
    3720:	04400404 	movi	r17,16
    3724:	d8801f17 	ldw	r2,124(sp)
    3728:	8c00880e 	bge	r17,r16,394c <___vfprintf_internal_r+0x10ec>
    372c:	01400074 	movhi	r5,1
    3730:	2940f984 	addi	r5,r5,998
    3734:	d9402b15 	stw	r5,172(sp)
    3738:	058001c4 	movi	r22,7
    373c:	dcc02c17 	ldw	r19,176(sp)
    3740:	00000306 	br	3750 <___vfprintf_internal_r+0xef0>
    3744:	42000204 	addi	r8,r8,8
    3748:	843ffc04 	addi	r16,r16,-16
    374c:	8c00820e 	bge	r17,r16,3958 <___vfprintf_internal_r+0x10f8>
    3750:	18c00404 	addi	r3,r3,16
    3754:	10800044 	addi	r2,r2,1
    3758:	45000015 	stw	r20,0(r8)
    375c:	44400115 	stw	r17,4(r8)
    3760:	d8c02015 	stw	r3,128(sp)
    3764:	d8801f15 	stw	r2,124(sp)
    3768:	b0bff60e 	bge	r22,r2,3744 <__alt_data_end+0xff003744>
    376c:	d9801e04 	addi	r6,sp,120
    3770:	b80b883a 	mov	r5,r23
    3774:	9809883a 	mov	r4,r19
    3778:	00095fc0 	call	95fc <__sprint_r>
    377c:	103d3a1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3780:	d8c02017 	ldw	r3,128(sp)
    3784:	d8801f17 	ldw	r2,124(sp)
    3788:	da000404 	addi	r8,sp,16
    378c:	003fee06 	br	3748 <__alt_data_end+0xff003748>
    3790:	d9403117 	ldw	r5,196(sp)
    3794:	d8802a17 	ldw	r2,168(sp)
    3798:	28adc83a 	sub	r22,r5,r2
    379c:	05be630e 	bge	zero,r22,312c <__alt_data_end+0xff00312c>
    37a0:	07000404 	movi	fp,16
    37a4:	d8801f17 	ldw	r2,124(sp)
    37a8:	e5838f0e 	bge	fp,r22,45e8 <___vfprintf_internal_r+0x1d88>
    37ac:	01400074 	movhi	r5,1
    37b0:	2940f984 	addi	r5,r5,998
    37b4:	dc403015 	stw	r17,192(sp)
    37b8:	d9402b15 	stw	r5,172(sp)
    37bc:	b023883a 	mov	r17,r22
    37c0:	04c001c4 	movi	r19,7
    37c4:	a82d883a 	mov	r22,r21
    37c8:	902b883a 	mov	r21,r18
    37cc:	8025883a 	mov	r18,r16
    37d0:	dc002c17 	ldw	r16,176(sp)
    37d4:	00000306 	br	37e4 <___vfprintf_internal_r+0xf84>
    37d8:	8c7ffc04 	addi	r17,r17,-16
    37dc:	42000204 	addi	r8,r8,8
    37e0:	e440110e 	bge	fp,r17,3828 <___vfprintf_internal_r+0xfc8>
    37e4:	18c00404 	addi	r3,r3,16
    37e8:	10800044 	addi	r2,r2,1
    37ec:	45000015 	stw	r20,0(r8)
    37f0:	47000115 	stw	fp,4(r8)
    37f4:	d8c02015 	stw	r3,128(sp)
    37f8:	d8801f15 	stw	r2,124(sp)
    37fc:	98bff60e 	bge	r19,r2,37d8 <__alt_data_end+0xff0037d8>
    3800:	d9801e04 	addi	r6,sp,120
    3804:	b80b883a 	mov	r5,r23
    3808:	8009883a 	mov	r4,r16
    380c:	00095fc0 	call	95fc <__sprint_r>
    3810:	103d151e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3814:	8c7ffc04 	addi	r17,r17,-16
    3818:	d8c02017 	ldw	r3,128(sp)
    381c:	d8801f17 	ldw	r2,124(sp)
    3820:	da000404 	addi	r8,sp,16
    3824:	e47fef16 	blt	fp,r17,37e4 <__alt_data_end+0xff0037e4>
    3828:	9021883a 	mov	r16,r18
    382c:	a825883a 	mov	r18,r21
    3830:	b02b883a 	mov	r21,r22
    3834:	882d883a 	mov	r22,r17
    3838:	dc403017 	ldw	r17,192(sp)
    383c:	d9002b17 	ldw	r4,172(sp)
    3840:	1d87883a 	add	r3,r3,r22
    3844:	10800044 	addi	r2,r2,1
    3848:	41000015 	stw	r4,0(r8)
    384c:	45800115 	stw	r22,4(r8)
    3850:	d8c02015 	stw	r3,128(sp)
    3854:	d8801f15 	stw	r2,124(sp)
    3858:	010001c4 	movi	r4,7
    385c:	20818e16 	blt	r4,r2,3e98 <___vfprintf_internal_r+0x1638>
    3860:	42000204 	addi	r8,r8,8
    3864:	003e3106 	br	312c <__alt_data_end+0xff00312c>
    3868:	d9403317 	ldw	r5,204(sp)
    386c:	00800044 	movi	r2,1
    3870:	18c00044 	addi	r3,r3,1
    3874:	1141530e 	bge	r2,r5,3dc4 <___vfprintf_internal_r+0x1564>
    3878:	dc401f17 	ldw	r17,124(sp)
    387c:	00800044 	movi	r2,1
    3880:	40800115 	stw	r2,4(r8)
    3884:	8c400044 	addi	r17,r17,1
    3888:	44000015 	stw	r16,0(r8)
    388c:	d8c02015 	stw	r3,128(sp)
    3890:	dc401f15 	stw	r17,124(sp)
    3894:	008001c4 	movi	r2,7
    3898:	14416b16 	blt	r2,r17,3e48 <___vfprintf_internal_r+0x15e8>
    389c:	42000204 	addi	r8,r8,8
    38a0:	d8803717 	ldw	r2,220(sp)
    38a4:	d9003417 	ldw	r4,208(sp)
    38a8:	8c400044 	addi	r17,r17,1
    38ac:	10c7883a 	add	r3,r2,r3
    38b0:	40800115 	stw	r2,4(r8)
    38b4:	41000015 	stw	r4,0(r8)
    38b8:	d8c02015 	stw	r3,128(sp)
    38bc:	dc401f15 	stw	r17,124(sp)
    38c0:	008001c4 	movi	r2,7
    38c4:	14416916 	blt	r2,r17,3e6c <___vfprintf_internal_r+0x160c>
    38c8:	45800204 	addi	r22,r8,8
    38cc:	d9003617 	ldw	r4,216(sp)
    38d0:	d9403817 	ldw	r5,224(sp)
    38d4:	000d883a 	mov	r6,zero
    38d8:	000f883a 	mov	r7,zero
    38dc:	d8c03c15 	stw	r3,240(sp)
    38e0:	000d0c00 	call	d0c0 <__eqdf2>
    38e4:	d8c03c17 	ldw	r3,240(sp)
    38e8:	1000bc26 	beq	r2,zero,3bdc <___vfprintf_internal_r+0x137c>
    38ec:	d9403317 	ldw	r5,204(sp)
    38f0:	84000044 	addi	r16,r16,1
    38f4:	8c400044 	addi	r17,r17,1
    38f8:	28bfffc4 	addi	r2,r5,-1
    38fc:	1887883a 	add	r3,r3,r2
    3900:	b0800115 	stw	r2,4(r22)
    3904:	b4000015 	stw	r16,0(r22)
    3908:	d8c02015 	stw	r3,128(sp)
    390c:	dc401f15 	stw	r17,124(sp)
    3910:	008001c4 	movi	r2,7
    3914:	14414316 	blt	r2,r17,3e24 <___vfprintf_internal_r+0x15c4>
    3918:	b5800204 	addi	r22,r22,8
    391c:	d9003a17 	ldw	r4,232(sp)
    3920:	df0022c4 	addi	fp,sp,139
    3924:	8c400044 	addi	r17,r17,1
    3928:	20c7883a 	add	r3,r4,r3
    392c:	b7000015 	stw	fp,0(r22)
    3930:	b1000115 	stw	r4,4(r22)
    3934:	d8c02015 	stw	r3,128(sp)
    3938:	dc401f15 	stw	r17,124(sp)
    393c:	008001c4 	movi	r2,7
    3940:	14400e16 	blt	r2,r17,397c <___vfprintf_internal_r+0x111c>
    3944:	b2000204 	addi	r8,r22,8
    3948:	003e3a06 	br	3234 <__alt_data_end+0xff003234>
    394c:	01000074 	movhi	r4,1
    3950:	2100f984 	addi	r4,r4,998
    3954:	d9002b15 	stw	r4,172(sp)
    3958:	d9002b17 	ldw	r4,172(sp)
    395c:	1c07883a 	add	r3,r3,r16
    3960:	44000115 	stw	r16,4(r8)
    3964:	41000015 	stw	r4,0(r8)
    3968:	10800044 	addi	r2,r2,1
    396c:	d8c02015 	stw	r3,128(sp)
    3970:	d8801f15 	stw	r2,124(sp)
    3974:	010001c4 	movi	r4,7
    3978:	20be2d0e 	bge	r4,r2,3230 <__alt_data_end+0xff003230>
    397c:	d9002c17 	ldw	r4,176(sp)
    3980:	d9801e04 	addi	r6,sp,120
    3984:	b80b883a 	mov	r5,r23
    3988:	00095fc0 	call	95fc <__sprint_r>
    398c:	103cb61e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3990:	d8c02017 	ldw	r3,128(sp)
    3994:	da000404 	addi	r8,sp,16
    3998:	003e2606 	br	3234 <__alt_data_end+0xff003234>
    399c:	d9002c17 	ldw	r4,176(sp)
    39a0:	d9801e04 	addi	r6,sp,120
    39a4:	b80b883a 	mov	r5,r23
    39a8:	00095fc0 	call	95fc <__sprint_r>
    39ac:	103e5d26 	beq	r2,zero,3324 <__alt_data_end+0xff003324>
    39b0:	003cad06 	br	2c68 <__alt_data_end+0xff002c68>
    39b4:	d9002c17 	ldw	r4,176(sp)
    39b8:	d9801e04 	addi	r6,sp,120
    39bc:	b80b883a 	mov	r5,r23
    39c0:	00095fc0 	call	95fc <__sprint_r>
    39c4:	103ca81e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    39c8:	d8c02017 	ldw	r3,128(sp)
    39cc:	da000404 	addi	r8,sp,16
    39d0:	003e0b06 	br	3200 <__alt_data_end+0xff003200>
    39d4:	d9002c17 	ldw	r4,176(sp)
    39d8:	d9801e04 	addi	r6,sp,120
    39dc:	b80b883a 	mov	r5,r23
    39e0:	00095fc0 	call	95fc <__sprint_r>
    39e4:	103ca01e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    39e8:	d8c02017 	ldw	r3,128(sp)
    39ec:	da000404 	addi	r8,sp,16
    39f0:	003dbd06 	br	30e8 <__alt_data_end+0xff0030e8>
    39f4:	d9002c17 	ldw	r4,176(sp)
    39f8:	d9801e04 	addi	r6,sp,120
    39fc:	b80b883a 	mov	r5,r23
    3a00:	00095fc0 	call	95fc <__sprint_r>
    3a04:	103c981e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3a08:	d8c02017 	ldw	r3,128(sp)
    3a0c:	da000404 	addi	r8,sp,16
    3a10:	003dc306 	br	3120 <__alt_data_end+0xff003120>
    3a14:	d8802917 	ldw	r2,164(sp)
    3a18:	d8002785 	stb	zero,158(sp)
    3a1c:	103f0616 	blt	r2,zero,3638 <__alt_data_end+0xff003638>
    3a20:	00ffdfc4 	movi	r3,-129
    3a24:	9d84b03a 	or	r2,r19,r22
    3a28:	90e4703a 	and	r18,r18,r3
    3a2c:	103c6b26 	beq	r2,zero,2bdc <__alt_data_end+0xff002bdc>
    3a30:	0039883a 	mov	fp,zero
    3a34:	003e7406 	br	3408 <__alt_data_end+0xff003408>
    3a38:	9080040c 	andi	r2,r18,16
    3a3c:	1001b326 	beq	r2,zero,410c <___vfprintf_internal_r+0x18ac>
    3a40:	d9002d17 	ldw	r4,180(sp)
    3a44:	d9402917 	ldw	r5,164(sp)
    3a48:	d8002785 	stb	zero,158(sp)
    3a4c:	20800104 	addi	r2,r4,4
    3a50:	24c00017 	ldw	r19,0(r4)
    3a54:	002d883a 	mov	r22,zero
    3a58:	2801b516 	blt	r5,zero,4130 <___vfprintf_internal_r+0x18d0>
    3a5c:	00ffdfc4 	movi	r3,-129
    3a60:	d8802d15 	stw	r2,180(sp)
    3a64:	90e4703a 	and	r18,r18,r3
    3a68:	983d2726 	beq	r19,zero,2f08 <__alt_data_end+0xff002f08>
    3a6c:	0039883a 	mov	fp,zero
    3a70:	003d2a06 	br	2f1c <__alt_data_end+0xff002f1c>
    3a74:	dc402617 	ldw	r17,152(sp)
    3a78:	0441d30e 	bge	zero,r17,41c8 <___vfprintf_internal_r+0x1968>
    3a7c:	dc403217 	ldw	r17,200(sp)
    3a80:	d8803317 	ldw	r2,204(sp)
    3a84:	1440010e 	bge	r2,r17,3a8c <___vfprintf_internal_r+0x122c>
    3a88:	1023883a 	mov	r17,r2
    3a8c:	04400a0e 	bge	zero,r17,3ab8 <___vfprintf_internal_r+0x1258>
    3a90:	d8801f17 	ldw	r2,124(sp)
    3a94:	1c47883a 	add	r3,r3,r17
    3a98:	44000015 	stw	r16,0(r8)
    3a9c:	10800044 	addi	r2,r2,1
    3aa0:	44400115 	stw	r17,4(r8)
    3aa4:	d8c02015 	stw	r3,128(sp)
    3aa8:	d8801f15 	stw	r2,124(sp)
    3aac:	010001c4 	movi	r4,7
    3ab0:	20826516 	blt	r4,r2,4448 <___vfprintf_internal_r+0x1be8>
    3ab4:	42000204 	addi	r8,r8,8
    3ab8:	88026116 	blt	r17,zero,4440 <___vfprintf_internal_r+0x1be0>
    3abc:	d9003217 	ldw	r4,200(sp)
    3ac0:	2463c83a 	sub	r17,r4,r17
    3ac4:	04407b0e 	bge	zero,r17,3cb4 <___vfprintf_internal_r+0x1454>
    3ac8:	05800404 	movi	r22,16
    3acc:	d8801f17 	ldw	r2,124(sp)
    3ad0:	b4419d0e 	bge	r22,r17,4148 <___vfprintf_internal_r+0x18e8>
    3ad4:	01000074 	movhi	r4,1
    3ad8:	2100f984 	addi	r4,r4,998
    3adc:	d9002b15 	stw	r4,172(sp)
    3ae0:	070001c4 	movi	fp,7
    3ae4:	dcc02c17 	ldw	r19,176(sp)
    3ae8:	00000306 	br	3af8 <___vfprintf_internal_r+0x1298>
    3aec:	42000204 	addi	r8,r8,8
    3af0:	8c7ffc04 	addi	r17,r17,-16
    3af4:	b441970e 	bge	r22,r17,4154 <___vfprintf_internal_r+0x18f4>
    3af8:	18c00404 	addi	r3,r3,16
    3afc:	10800044 	addi	r2,r2,1
    3b00:	45000015 	stw	r20,0(r8)
    3b04:	45800115 	stw	r22,4(r8)
    3b08:	d8c02015 	stw	r3,128(sp)
    3b0c:	d8801f15 	stw	r2,124(sp)
    3b10:	e0bff60e 	bge	fp,r2,3aec <__alt_data_end+0xff003aec>
    3b14:	d9801e04 	addi	r6,sp,120
    3b18:	b80b883a 	mov	r5,r23
    3b1c:	9809883a 	mov	r4,r19
    3b20:	00095fc0 	call	95fc <__sprint_r>
    3b24:	103c501e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3b28:	d8c02017 	ldw	r3,128(sp)
    3b2c:	d8801f17 	ldw	r2,124(sp)
    3b30:	da000404 	addi	r8,sp,16
    3b34:	003fee06 	br	3af0 <__alt_data_end+0xff003af0>
    3b38:	d9002c17 	ldw	r4,176(sp)
    3b3c:	d9801e04 	addi	r6,sp,120
    3b40:	b80b883a 	mov	r5,r23
    3b44:	00095fc0 	call	95fc <__sprint_r>
    3b48:	103c471e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3b4c:	d8c02017 	ldw	r3,128(sp)
    3b50:	df002787 	ldb	fp,158(sp)
    3b54:	da000404 	addi	r8,sp,16
    3b58:	003d5606 	br	30b4 <__alt_data_end+0xff0030b4>
    3b5c:	9080040c 	andi	r2,r18,16
    3b60:	10016126 	beq	r2,zero,40e8 <___vfprintf_internal_r+0x1888>
    3b64:	d8802d17 	ldw	r2,180(sp)
    3b68:	14c00017 	ldw	r19,0(r2)
    3b6c:	10800104 	addi	r2,r2,4
    3b70:	d8802d15 	stw	r2,180(sp)
    3b74:	982dd7fa 	srai	r22,r19,31
    3b78:	b005883a 	mov	r2,r22
    3b7c:	003c8206 	br	2d88 <__alt_data_end+0xff002d88>
    3b80:	9080040c 	andi	r2,r18,16
    3b84:	10003526 	beq	r2,zero,3c5c <___vfprintf_internal_r+0x13fc>
    3b88:	d9402d17 	ldw	r5,180(sp)
    3b8c:	d8c02917 	ldw	r3,164(sp)
    3b90:	d8002785 	stb	zero,158(sp)
    3b94:	28800104 	addi	r2,r5,4
    3b98:	2cc00017 	ldw	r19,0(r5)
    3b9c:	002d883a 	mov	r22,zero
    3ba0:	18003716 	blt	r3,zero,3c80 <___vfprintf_internal_r+0x1420>
    3ba4:	00ffdfc4 	movi	r3,-129
    3ba8:	d8802d15 	stw	r2,180(sp)
    3bac:	90e4703a 	and	r18,r18,r3
    3bb0:	0039883a 	mov	fp,zero
    3bb4:	983df326 	beq	r19,zero,3384 <__alt_data_end+0xff003384>
    3bb8:	00800244 	movi	r2,9
    3bbc:	14fc7b36 	bltu	r2,r19,2dac <__alt_data_end+0xff002dac>
    3bc0:	d8c02817 	ldw	r3,160(sp)
    3bc4:	dc001dc4 	addi	r16,sp,119
    3bc8:	9cc00c04 	addi	r19,r19,48
    3bcc:	1c07c83a 	sub	r3,r3,r16
    3bd0:	dcc01dc5 	stb	r19,119(sp)
    3bd4:	d8c02e15 	stw	r3,184(sp)
    3bd8:	003ce806 	br	2f7c <__alt_data_end+0xff002f7c>
    3bdc:	d8803317 	ldw	r2,204(sp)
    3be0:	143fffc4 	addi	r16,r2,-1
    3be4:	043f4d0e 	bge	zero,r16,391c <__alt_data_end+0xff00391c>
    3be8:	07000404 	movi	fp,16
    3bec:	e400810e 	bge	fp,r16,3df4 <___vfprintf_internal_r+0x1594>
    3bf0:	01400074 	movhi	r5,1
    3bf4:	2940f984 	addi	r5,r5,998
    3bf8:	d9402b15 	stw	r5,172(sp)
    3bfc:	01c001c4 	movi	r7,7
    3c00:	dcc02c17 	ldw	r19,176(sp)
    3c04:	00000306 	br	3c14 <___vfprintf_internal_r+0x13b4>
    3c08:	b5800204 	addi	r22,r22,8
    3c0c:	843ffc04 	addi	r16,r16,-16
    3c10:	e4007b0e 	bge	fp,r16,3e00 <___vfprintf_internal_r+0x15a0>
    3c14:	18c00404 	addi	r3,r3,16
    3c18:	8c400044 	addi	r17,r17,1
    3c1c:	b5000015 	stw	r20,0(r22)
    3c20:	b7000115 	stw	fp,4(r22)
    3c24:	d8c02015 	stw	r3,128(sp)
    3c28:	dc401f15 	stw	r17,124(sp)
    3c2c:	3c7ff60e 	bge	r7,r17,3c08 <__alt_data_end+0xff003c08>
    3c30:	d9801e04 	addi	r6,sp,120
    3c34:	b80b883a 	mov	r5,r23
    3c38:	9809883a 	mov	r4,r19
    3c3c:	d9c03c15 	stw	r7,240(sp)
    3c40:	00095fc0 	call	95fc <__sprint_r>
    3c44:	d9c03c17 	ldw	r7,240(sp)
    3c48:	103c071e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3c4c:	d8c02017 	ldw	r3,128(sp)
    3c50:	dc401f17 	ldw	r17,124(sp)
    3c54:	dd800404 	addi	r22,sp,16
    3c58:	003fec06 	br	3c0c <__alt_data_end+0xff003c0c>
    3c5c:	9080100c 	andi	r2,r18,64
    3c60:	d8002785 	stb	zero,158(sp)
    3c64:	10010e26 	beq	r2,zero,40a0 <___vfprintf_internal_r+0x1840>
    3c68:	d9002d17 	ldw	r4,180(sp)
    3c6c:	d9402917 	ldw	r5,164(sp)
    3c70:	002d883a 	mov	r22,zero
    3c74:	20800104 	addi	r2,r4,4
    3c78:	24c0000b 	ldhu	r19,0(r4)
    3c7c:	283fc90e 	bge	r5,zero,3ba4 <__alt_data_end+0xff003ba4>
    3c80:	d8802d15 	stw	r2,180(sp)
    3c84:	0039883a 	mov	fp,zero
    3c88:	9d84b03a 	or	r2,r19,r22
    3c8c:	103c461e 	bne	r2,zero,2da8 <__alt_data_end+0xff002da8>
    3c90:	00800044 	movi	r2,1
    3c94:	003e6c06 	br	3648 <__alt_data_end+0xff003648>
    3c98:	d9002c17 	ldw	r4,176(sp)
    3c9c:	d9801e04 	addi	r6,sp,120
    3ca0:	b80b883a 	mov	r5,r23
    3ca4:	00095fc0 	call	95fc <__sprint_r>
    3ca8:	103bef1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3cac:	d8c02017 	ldw	r3,128(sp)
    3cb0:	da000404 	addi	r8,sp,16
    3cb4:	d9003217 	ldw	r4,200(sp)
    3cb8:	d8802617 	ldw	r2,152(sp)
    3cbc:	d9403317 	ldw	r5,204(sp)
    3cc0:	8123883a 	add	r17,r16,r4
    3cc4:	11400216 	blt	r2,r5,3cd0 <___vfprintf_internal_r+0x1470>
    3cc8:	9100004c 	andi	r4,r18,1
    3ccc:	20000d26 	beq	r4,zero,3d04 <___vfprintf_internal_r+0x14a4>
    3cd0:	d9003717 	ldw	r4,220(sp)
    3cd4:	d9403417 	ldw	r5,208(sp)
    3cd8:	1907883a 	add	r3,r3,r4
    3cdc:	d9001f17 	ldw	r4,124(sp)
    3ce0:	41400015 	stw	r5,0(r8)
    3ce4:	d9403717 	ldw	r5,220(sp)
    3ce8:	21000044 	addi	r4,r4,1
    3cec:	d8c02015 	stw	r3,128(sp)
    3cf0:	41400115 	stw	r5,4(r8)
    3cf4:	d9001f15 	stw	r4,124(sp)
    3cf8:	014001c4 	movi	r5,7
    3cfc:	2901e816 	blt	r5,r4,44a0 <___vfprintf_internal_r+0x1c40>
    3d00:	42000204 	addi	r8,r8,8
    3d04:	d9003317 	ldw	r4,204(sp)
    3d08:	8121883a 	add	r16,r16,r4
    3d0c:	2085c83a 	sub	r2,r4,r2
    3d10:	8461c83a 	sub	r16,r16,r17
    3d14:	1400010e 	bge	r2,r16,3d1c <___vfprintf_internal_r+0x14bc>
    3d18:	1021883a 	mov	r16,r2
    3d1c:	04000a0e 	bge	zero,r16,3d48 <___vfprintf_internal_r+0x14e8>
    3d20:	d9001f17 	ldw	r4,124(sp)
    3d24:	1c07883a 	add	r3,r3,r16
    3d28:	44400015 	stw	r17,0(r8)
    3d2c:	21000044 	addi	r4,r4,1
    3d30:	44000115 	stw	r16,4(r8)
    3d34:	d8c02015 	stw	r3,128(sp)
    3d38:	d9001f15 	stw	r4,124(sp)
    3d3c:	014001c4 	movi	r5,7
    3d40:	2901fb16 	blt	r5,r4,4530 <___vfprintf_internal_r+0x1cd0>
    3d44:	42000204 	addi	r8,r8,8
    3d48:	8001f716 	blt	r16,zero,4528 <___vfprintf_internal_r+0x1cc8>
    3d4c:	1421c83a 	sub	r16,r2,r16
    3d50:	043d380e 	bge	zero,r16,3234 <__alt_data_end+0xff003234>
    3d54:	04400404 	movi	r17,16
    3d58:	d8801f17 	ldw	r2,124(sp)
    3d5c:	8c3efb0e 	bge	r17,r16,394c <__alt_data_end+0xff00394c>
    3d60:	01400074 	movhi	r5,1
    3d64:	2940f984 	addi	r5,r5,998
    3d68:	d9402b15 	stw	r5,172(sp)
    3d6c:	058001c4 	movi	r22,7
    3d70:	dcc02c17 	ldw	r19,176(sp)
    3d74:	00000306 	br	3d84 <___vfprintf_internal_r+0x1524>
    3d78:	42000204 	addi	r8,r8,8
    3d7c:	843ffc04 	addi	r16,r16,-16
    3d80:	8c3ef50e 	bge	r17,r16,3958 <__alt_data_end+0xff003958>
    3d84:	18c00404 	addi	r3,r3,16
    3d88:	10800044 	addi	r2,r2,1
    3d8c:	45000015 	stw	r20,0(r8)
    3d90:	44400115 	stw	r17,4(r8)
    3d94:	d8c02015 	stw	r3,128(sp)
    3d98:	d8801f15 	stw	r2,124(sp)
    3d9c:	b0bff60e 	bge	r22,r2,3d78 <__alt_data_end+0xff003d78>
    3da0:	d9801e04 	addi	r6,sp,120
    3da4:	b80b883a 	mov	r5,r23
    3da8:	9809883a 	mov	r4,r19
    3dac:	00095fc0 	call	95fc <__sprint_r>
    3db0:	103bad1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3db4:	d8c02017 	ldw	r3,128(sp)
    3db8:	d8801f17 	ldw	r2,124(sp)
    3dbc:	da000404 	addi	r8,sp,16
    3dc0:	003fee06 	br	3d7c <__alt_data_end+0xff003d7c>
    3dc4:	9088703a 	and	r4,r18,r2
    3dc8:	203eab1e 	bne	r4,zero,3878 <__alt_data_end+0xff003878>
    3dcc:	dc401f17 	ldw	r17,124(sp)
    3dd0:	40800115 	stw	r2,4(r8)
    3dd4:	44000015 	stw	r16,0(r8)
    3dd8:	8c400044 	addi	r17,r17,1
    3ddc:	d8c02015 	stw	r3,128(sp)
    3de0:	dc401f15 	stw	r17,124(sp)
    3de4:	008001c4 	movi	r2,7
    3de8:	14400e16 	blt	r2,r17,3e24 <___vfprintf_internal_r+0x15c4>
    3dec:	45800204 	addi	r22,r8,8
    3df0:	003eca06 	br	391c <__alt_data_end+0xff00391c>
    3df4:	01000074 	movhi	r4,1
    3df8:	2100f984 	addi	r4,r4,998
    3dfc:	d9002b15 	stw	r4,172(sp)
    3e00:	d8802b17 	ldw	r2,172(sp)
    3e04:	1c07883a 	add	r3,r3,r16
    3e08:	8c400044 	addi	r17,r17,1
    3e0c:	b0800015 	stw	r2,0(r22)
    3e10:	b4000115 	stw	r16,4(r22)
    3e14:	d8c02015 	stw	r3,128(sp)
    3e18:	dc401f15 	stw	r17,124(sp)
    3e1c:	008001c4 	movi	r2,7
    3e20:	147ebd0e 	bge	r2,r17,3918 <__alt_data_end+0xff003918>
    3e24:	d9002c17 	ldw	r4,176(sp)
    3e28:	d9801e04 	addi	r6,sp,120
    3e2c:	b80b883a 	mov	r5,r23
    3e30:	00095fc0 	call	95fc <__sprint_r>
    3e34:	103b8c1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3e38:	d8c02017 	ldw	r3,128(sp)
    3e3c:	dc401f17 	ldw	r17,124(sp)
    3e40:	dd800404 	addi	r22,sp,16
    3e44:	003eb506 	br	391c <__alt_data_end+0xff00391c>
    3e48:	d9002c17 	ldw	r4,176(sp)
    3e4c:	d9801e04 	addi	r6,sp,120
    3e50:	b80b883a 	mov	r5,r23
    3e54:	00095fc0 	call	95fc <__sprint_r>
    3e58:	103b831e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3e5c:	d8c02017 	ldw	r3,128(sp)
    3e60:	dc401f17 	ldw	r17,124(sp)
    3e64:	da000404 	addi	r8,sp,16
    3e68:	003e8d06 	br	38a0 <__alt_data_end+0xff0038a0>
    3e6c:	d9002c17 	ldw	r4,176(sp)
    3e70:	d9801e04 	addi	r6,sp,120
    3e74:	b80b883a 	mov	r5,r23
    3e78:	00095fc0 	call	95fc <__sprint_r>
    3e7c:	103b7a1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3e80:	d8c02017 	ldw	r3,128(sp)
    3e84:	dc401f17 	ldw	r17,124(sp)
    3e88:	dd800404 	addi	r22,sp,16
    3e8c:	003e8f06 	br	38cc <__alt_data_end+0xff0038cc>
    3e90:	0027883a 	mov	r19,zero
    3e94:	003f4a06 	br	3bc0 <__alt_data_end+0xff003bc0>
    3e98:	d9002c17 	ldw	r4,176(sp)
    3e9c:	d9801e04 	addi	r6,sp,120
    3ea0:	b80b883a 	mov	r5,r23
    3ea4:	00095fc0 	call	95fc <__sprint_r>
    3ea8:	103b6f1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    3eac:	d8c02017 	ldw	r3,128(sp)
    3eb0:	da000404 	addi	r8,sp,16
    3eb4:	003c9d06 	br	312c <__alt_data_end+0xff00312c>
    3eb8:	04e7c83a 	sub	r19,zero,r19
    3ebc:	9804c03a 	cmpne	r2,r19,zero
    3ec0:	05adc83a 	sub	r22,zero,r22
    3ec4:	b0adc83a 	sub	r22,r22,r2
    3ec8:	d8802917 	ldw	r2,164(sp)
    3ecc:	07000b44 	movi	fp,45
    3ed0:	df002785 	stb	fp,158(sp)
    3ed4:	10017b16 	blt	r2,zero,44c4 <___vfprintf_internal_r+0x1c64>
    3ed8:	00bfdfc4 	movi	r2,-129
    3edc:	90a4703a 	and	r18,r18,r2
    3ee0:	003bb106 	br	2da8 <__alt_data_end+0xff002da8>
    3ee4:	d9003617 	ldw	r4,216(sp)
    3ee8:	d9403817 	ldw	r5,224(sp)
    3eec:	da003d15 	stw	r8,244(sp)
    3ef0:	00092740 	call	9274 <__fpclassifyd>
    3ef4:	da003d17 	ldw	r8,244(sp)
    3ef8:	1000f026 	beq	r2,zero,42bc <___vfprintf_internal_r+0x1a5c>
    3efc:	d9002917 	ldw	r4,164(sp)
    3f00:	05bff7c4 	movi	r22,-33
    3f04:	00bfffc4 	movi	r2,-1
    3f08:	8dac703a 	and	r22,r17,r22
    3f0c:	20820026 	beq	r4,r2,4710 <___vfprintf_internal_r+0x1eb0>
    3f10:	008011c4 	movi	r2,71
    3f14:	b081f726 	beq	r22,r2,46f4 <___vfprintf_internal_r+0x1e94>
    3f18:	d9003817 	ldw	r4,224(sp)
    3f1c:	90c04014 	ori	r3,r18,256
    3f20:	d8c02b15 	stw	r3,172(sp)
    3f24:	20021516 	blt	r4,zero,477c <___vfprintf_internal_r+0x1f1c>
    3f28:	dcc03817 	ldw	r19,224(sp)
    3f2c:	d8002a05 	stb	zero,168(sp)
    3f30:	00801984 	movi	r2,102
    3f34:	8881f926 	beq	r17,r2,471c <___vfprintf_internal_r+0x1ebc>
    3f38:	00801184 	movi	r2,70
    3f3c:	88821c26 	beq	r17,r2,47b0 <___vfprintf_internal_r+0x1f50>
    3f40:	00801144 	movi	r2,69
    3f44:	b081ef26 	beq	r22,r2,4704 <___vfprintf_internal_r+0x1ea4>
    3f48:	d8c02917 	ldw	r3,164(sp)
    3f4c:	d8802104 	addi	r2,sp,132
    3f50:	d8800315 	stw	r2,12(sp)
    3f54:	d9403617 	ldw	r5,216(sp)
    3f58:	d8802504 	addi	r2,sp,148
    3f5c:	d9002c17 	ldw	r4,176(sp)
    3f60:	d8800215 	stw	r2,8(sp)
    3f64:	d8802604 	addi	r2,sp,152
    3f68:	d8c00015 	stw	r3,0(sp)
    3f6c:	d8800115 	stw	r2,4(sp)
    3f70:	01c00084 	movi	r7,2
    3f74:	980d883a 	mov	r6,r19
    3f78:	d8c03c15 	stw	r3,240(sp)
    3f7c:	da003d15 	stw	r8,244(sp)
    3f80:	0004e840 	call	4e84 <_dtoa_r>
    3f84:	1021883a 	mov	r16,r2
    3f88:	008019c4 	movi	r2,103
    3f8c:	d8c03c17 	ldw	r3,240(sp)
    3f90:	da003d17 	ldw	r8,244(sp)
    3f94:	88817126 	beq	r17,r2,455c <___vfprintf_internal_r+0x1cfc>
    3f98:	008011c4 	movi	r2,71
    3f9c:	88829226 	beq	r17,r2,49e8 <___vfprintf_internal_r+0x2188>
    3fa0:	80f9883a 	add	fp,r16,r3
    3fa4:	d9003617 	ldw	r4,216(sp)
    3fa8:	000d883a 	mov	r6,zero
    3fac:	000f883a 	mov	r7,zero
    3fb0:	980b883a 	mov	r5,r19
    3fb4:	da003d15 	stw	r8,244(sp)
    3fb8:	000d0c00 	call	d0c0 <__eqdf2>
    3fbc:	da003d17 	ldw	r8,244(sp)
    3fc0:	10018d26 	beq	r2,zero,45f8 <___vfprintf_internal_r+0x1d98>
    3fc4:	d8802117 	ldw	r2,132(sp)
    3fc8:	1700062e 	bgeu	r2,fp,3fe4 <___vfprintf_internal_r+0x1784>
    3fcc:	01000c04 	movi	r4,48
    3fd0:	10c00044 	addi	r3,r2,1
    3fd4:	d8c02115 	stw	r3,132(sp)
    3fd8:	11000005 	stb	r4,0(r2)
    3fdc:	d8802117 	ldw	r2,132(sp)
    3fe0:	173ffb36 	bltu	r2,fp,3fd0 <__alt_data_end+0xff003fd0>
    3fe4:	1405c83a 	sub	r2,r2,r16
    3fe8:	d8803315 	stw	r2,204(sp)
    3fec:	008011c4 	movi	r2,71
    3ff0:	b0817626 	beq	r22,r2,45cc <___vfprintf_internal_r+0x1d6c>
    3ff4:	00801944 	movi	r2,101
    3ff8:	1442810e 	bge	r2,r17,4a00 <___vfprintf_internal_r+0x21a0>
    3ffc:	d8c02617 	ldw	r3,152(sp)
    4000:	00801984 	movi	r2,102
    4004:	d8c03215 	stw	r3,200(sp)
    4008:	8881fe26 	beq	r17,r2,4804 <___vfprintf_internal_r+0x1fa4>
    400c:	d8c03217 	ldw	r3,200(sp)
    4010:	d9003317 	ldw	r4,204(sp)
    4014:	1901dd16 	blt	r3,r4,478c <___vfprintf_internal_r+0x1f2c>
    4018:	9480004c 	andi	r18,r18,1
    401c:	90022b1e 	bne	r18,zero,48cc <___vfprintf_internal_r+0x206c>
    4020:	1805883a 	mov	r2,r3
    4024:	18028016 	blt	r3,zero,4a28 <___vfprintf_internal_r+0x21c8>
    4028:	d8c03217 	ldw	r3,200(sp)
    402c:	044019c4 	movi	r17,103
    4030:	d8c02e15 	stw	r3,184(sp)
    4034:	df002a07 	ldb	fp,168(sp)
    4038:	e001531e 	bne	fp,zero,4588 <___vfprintf_internal_r+0x1d28>
    403c:	df002783 	ldbu	fp,158(sp)
    4040:	d8802a15 	stw	r2,168(sp)
    4044:	dc802b17 	ldw	r18,172(sp)
    4048:	d8002915 	stw	zero,164(sp)
    404c:	003bd106 	br	2f94 <__alt_data_end+0xff002f94>
    4050:	d8802d17 	ldw	r2,180(sp)
    4054:	d8c02d17 	ldw	r3,180(sp)
    4058:	d9002d17 	ldw	r4,180(sp)
    405c:	10800017 	ldw	r2,0(r2)
    4060:	18c00117 	ldw	r3,4(r3)
    4064:	21000204 	addi	r4,r4,8
    4068:	d8803615 	stw	r2,216(sp)
    406c:	d8c03815 	stw	r3,224(sp)
    4070:	d9002d15 	stw	r4,180(sp)
    4074:	003b7506 	br	2e4c <__alt_data_end+0xff002e4c>
    4078:	ac400007 	ldb	r17,0(r21)
    407c:	003a5906 	br	29e4 <__alt_data_end+0xff0029e4>
    4080:	9080100c 	andi	r2,r18,64
    4084:	1000a826 	beq	r2,zero,4328 <___vfprintf_internal_r+0x1ac8>
    4088:	d9002d17 	ldw	r4,180(sp)
    408c:	002d883a 	mov	r22,zero
    4090:	24c0000b 	ldhu	r19,0(r4)
    4094:	21000104 	addi	r4,r4,4
    4098:	d9002d15 	stw	r4,180(sp)
    409c:	003ccb06 	br	33cc <__alt_data_end+0xff0033cc>
    40a0:	d8c02d17 	ldw	r3,180(sp)
    40a4:	d9002917 	ldw	r4,164(sp)
    40a8:	002d883a 	mov	r22,zero
    40ac:	18800104 	addi	r2,r3,4
    40b0:	1cc00017 	ldw	r19,0(r3)
    40b4:	203ebb0e 	bge	r4,zero,3ba4 <__alt_data_end+0xff003ba4>
    40b8:	003ef106 	br	3c80 <__alt_data_end+0xff003c80>
    40bc:	9080040c 	andi	r2,r18,16
    40c0:	1000921e 	bne	r2,zero,430c <___vfprintf_internal_r+0x1aac>
    40c4:	9480100c 	andi	r18,r18,64
    40c8:	90013926 	beq	r18,zero,45b0 <___vfprintf_internal_r+0x1d50>
    40cc:	d9002d17 	ldw	r4,180(sp)
    40d0:	d9402f17 	ldw	r5,188(sp)
    40d4:	20800017 	ldw	r2,0(r4)
    40d8:	21000104 	addi	r4,r4,4
    40dc:	d9002d15 	stw	r4,180(sp)
    40e0:	1140000d 	sth	r5,0(r2)
    40e4:	003a1606 	br	2940 <__alt_data_end+0xff002940>
    40e8:	9080100c 	andi	r2,r18,64
    40ec:	10008026 	beq	r2,zero,42f0 <___vfprintf_internal_r+0x1a90>
    40f0:	d8c02d17 	ldw	r3,180(sp)
    40f4:	1cc0000f 	ldh	r19,0(r3)
    40f8:	18c00104 	addi	r3,r3,4
    40fc:	d8c02d15 	stw	r3,180(sp)
    4100:	982dd7fa 	srai	r22,r19,31
    4104:	b005883a 	mov	r2,r22
    4108:	003b1f06 	br	2d88 <__alt_data_end+0xff002d88>
    410c:	9080100c 	andi	r2,r18,64
    4110:	d8002785 	stb	zero,158(sp)
    4114:	10008a1e 	bne	r2,zero,4340 <___vfprintf_internal_r+0x1ae0>
    4118:	d9402d17 	ldw	r5,180(sp)
    411c:	d8c02917 	ldw	r3,164(sp)
    4120:	002d883a 	mov	r22,zero
    4124:	28800104 	addi	r2,r5,4
    4128:	2cc00017 	ldw	r19,0(r5)
    412c:	183e4b0e 	bge	r3,zero,3a5c <__alt_data_end+0xff003a5c>
    4130:	9d86b03a 	or	r3,r19,r22
    4134:	d8802d15 	stw	r2,180(sp)
    4138:	183e4c1e 	bne	r3,zero,3a6c <__alt_data_end+0xff003a6c>
    413c:	0039883a 	mov	fp,zero
    4140:	0005883a 	mov	r2,zero
    4144:	003d4006 	br	3648 <__alt_data_end+0xff003648>
    4148:	01400074 	movhi	r5,1
    414c:	2940f984 	addi	r5,r5,998
    4150:	d9402b15 	stw	r5,172(sp)
    4154:	d9402b17 	ldw	r5,172(sp)
    4158:	1c47883a 	add	r3,r3,r17
    415c:	10800044 	addi	r2,r2,1
    4160:	41400015 	stw	r5,0(r8)
    4164:	44400115 	stw	r17,4(r8)
    4168:	d8c02015 	stw	r3,128(sp)
    416c:	d8801f15 	stw	r2,124(sp)
    4170:	010001c4 	movi	r4,7
    4174:	20bec816 	blt	r4,r2,3c98 <__alt_data_end+0xff003c98>
    4178:	42000204 	addi	r8,r8,8
    417c:	003ecd06 	br	3cb4 <__alt_data_end+0xff003cb4>
    4180:	d9002917 	ldw	r4,164(sp)
    4184:	d8002785 	stb	zero,158(sp)
    4188:	203d2d16 	blt	r4,zero,3640 <__alt_data_end+0xff003640>
    418c:	00bfdfc4 	movi	r2,-129
    4190:	90a4703a 	and	r18,r18,r2
    4194:	003a9106 	br	2bdc <__alt_data_end+0xff002bdc>
    4198:	01000074 	movhi	r4,1
    419c:	2100f984 	addi	r4,r4,998
    41a0:	d9002b15 	stw	r4,172(sp)
    41a4:	003c0c06 	br	31d8 <__alt_data_end+0xff0031d8>
    41a8:	d9002c17 	ldw	r4,176(sp)
    41ac:	d9801e04 	addi	r6,sp,120
    41b0:	b80b883a 	mov	r5,r23
    41b4:	00095fc0 	call	95fc <__sprint_r>
    41b8:	103aab1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    41bc:	d8c02017 	ldw	r3,128(sp)
    41c0:	da000404 	addi	r8,sp,16
    41c4:	003d4106 	br	36cc <__alt_data_end+0xff0036cc>
    41c8:	d8801f17 	ldw	r2,124(sp)
    41cc:	01400074 	movhi	r5,1
    41d0:	01000044 	movi	r4,1
    41d4:	18c00044 	addi	r3,r3,1
    41d8:	10800044 	addi	r2,r2,1
    41dc:	2940f904 	addi	r5,r5,996
    41e0:	41000115 	stw	r4,4(r8)
    41e4:	41400015 	stw	r5,0(r8)
    41e8:	d8c02015 	stw	r3,128(sp)
    41ec:	d8801f15 	stw	r2,124(sp)
    41f0:	010001c4 	movi	r4,7
    41f4:	20805c16 	blt	r4,r2,4368 <___vfprintf_internal_r+0x1b08>
    41f8:	42000204 	addi	r8,r8,8
    41fc:	8800041e 	bne	r17,zero,4210 <___vfprintf_internal_r+0x19b0>
    4200:	d8803317 	ldw	r2,204(sp)
    4204:	1000021e 	bne	r2,zero,4210 <___vfprintf_internal_r+0x19b0>
    4208:	9080004c 	andi	r2,r18,1
    420c:	103c0926 	beq	r2,zero,3234 <__alt_data_end+0xff003234>
    4210:	d9003717 	ldw	r4,220(sp)
    4214:	d8801f17 	ldw	r2,124(sp)
    4218:	d9403417 	ldw	r5,208(sp)
    421c:	20c7883a 	add	r3,r4,r3
    4220:	10800044 	addi	r2,r2,1
    4224:	41000115 	stw	r4,4(r8)
    4228:	41400015 	stw	r5,0(r8)
    422c:	d8c02015 	stw	r3,128(sp)
    4230:	d8801f15 	stw	r2,124(sp)
    4234:	010001c4 	movi	r4,7
    4238:	20812116 	blt	r4,r2,46c0 <___vfprintf_internal_r+0x1e60>
    423c:	42000204 	addi	r8,r8,8
    4240:	0463c83a 	sub	r17,zero,r17
    4244:	0440730e 	bge	zero,r17,4414 <___vfprintf_internal_r+0x1bb4>
    4248:	05800404 	movi	r22,16
    424c:	b440860e 	bge	r22,r17,4468 <___vfprintf_internal_r+0x1c08>
    4250:	01400074 	movhi	r5,1
    4254:	2940f984 	addi	r5,r5,998
    4258:	d9402b15 	stw	r5,172(sp)
    425c:	070001c4 	movi	fp,7
    4260:	dcc02c17 	ldw	r19,176(sp)
    4264:	00000306 	br	4274 <___vfprintf_internal_r+0x1a14>
    4268:	42000204 	addi	r8,r8,8
    426c:	8c7ffc04 	addi	r17,r17,-16
    4270:	b440800e 	bge	r22,r17,4474 <___vfprintf_internal_r+0x1c14>
    4274:	18c00404 	addi	r3,r3,16
    4278:	10800044 	addi	r2,r2,1
    427c:	45000015 	stw	r20,0(r8)
    4280:	45800115 	stw	r22,4(r8)
    4284:	d8c02015 	stw	r3,128(sp)
    4288:	d8801f15 	stw	r2,124(sp)
    428c:	e0bff60e 	bge	fp,r2,4268 <__alt_data_end+0xff004268>
    4290:	d9801e04 	addi	r6,sp,120
    4294:	b80b883a 	mov	r5,r23
    4298:	9809883a 	mov	r4,r19
    429c:	00095fc0 	call	95fc <__sprint_r>
    42a0:	103a711e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    42a4:	d8c02017 	ldw	r3,128(sp)
    42a8:	d8801f17 	ldw	r2,124(sp)
    42ac:	da000404 	addi	r8,sp,16
    42b0:	003fee06 	br	426c <__alt_data_end+0xff00426c>
    42b4:	00bfffc4 	movi	r2,-1
    42b8:	003a6f06 	br	2c78 <__alt_data_end+0xff002c78>
    42bc:	008011c4 	movi	r2,71
    42c0:	1440b816 	blt	r2,r17,45a4 <___vfprintf_internal_r+0x1d44>
    42c4:	04000074 	movhi	r16,1
    42c8:	8400eb04 	addi	r16,r16,940
    42cc:	00c000c4 	movi	r3,3
    42d0:	00bfdfc4 	movi	r2,-129
    42d4:	d8c02a15 	stw	r3,168(sp)
    42d8:	90a4703a 	and	r18,r18,r2
    42dc:	df002783 	ldbu	fp,158(sp)
    42e0:	d8c02e15 	stw	r3,184(sp)
    42e4:	d8002915 	stw	zero,164(sp)
    42e8:	d8003215 	stw	zero,200(sp)
    42ec:	003b2906 	br	2f94 <__alt_data_end+0xff002f94>
    42f0:	d9002d17 	ldw	r4,180(sp)
    42f4:	24c00017 	ldw	r19,0(r4)
    42f8:	21000104 	addi	r4,r4,4
    42fc:	d9002d15 	stw	r4,180(sp)
    4300:	982dd7fa 	srai	r22,r19,31
    4304:	b005883a 	mov	r2,r22
    4308:	003a9f06 	br	2d88 <__alt_data_end+0xff002d88>
    430c:	d9402d17 	ldw	r5,180(sp)
    4310:	d8c02f17 	ldw	r3,188(sp)
    4314:	28800017 	ldw	r2,0(r5)
    4318:	29400104 	addi	r5,r5,4
    431c:	d9402d15 	stw	r5,180(sp)
    4320:	10c00015 	stw	r3,0(r2)
    4324:	00398606 	br	2940 <__alt_data_end+0xff002940>
    4328:	d9402d17 	ldw	r5,180(sp)
    432c:	002d883a 	mov	r22,zero
    4330:	2cc00017 	ldw	r19,0(r5)
    4334:	29400104 	addi	r5,r5,4
    4338:	d9402d15 	stw	r5,180(sp)
    433c:	003c2306 	br	33cc <__alt_data_end+0xff0033cc>
    4340:	d8c02d17 	ldw	r3,180(sp)
    4344:	d9002917 	ldw	r4,164(sp)
    4348:	002d883a 	mov	r22,zero
    434c:	18800104 	addi	r2,r3,4
    4350:	1cc0000b 	ldhu	r19,0(r3)
    4354:	203dc10e 	bge	r4,zero,3a5c <__alt_data_end+0xff003a5c>
    4358:	003f7506 	br	4130 <__alt_data_end+0xff004130>
    435c:	04000074 	movhi	r16,1
    4360:	8400e904 	addi	r16,r16,932
    4364:	003acc06 	br	2e98 <__alt_data_end+0xff002e98>
    4368:	d9002c17 	ldw	r4,176(sp)
    436c:	d9801e04 	addi	r6,sp,120
    4370:	b80b883a 	mov	r5,r23
    4374:	00095fc0 	call	95fc <__sprint_r>
    4378:	103a3b1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    437c:	dc402617 	ldw	r17,152(sp)
    4380:	d8c02017 	ldw	r3,128(sp)
    4384:	da000404 	addi	r8,sp,16
    4388:	003f9c06 	br	41fc <__alt_data_end+0xff0041fc>
    438c:	ac400043 	ldbu	r17,1(r21)
    4390:	94800814 	ori	r18,r18,32
    4394:	ad400044 	addi	r21,r21,1
    4398:	8c403fcc 	andi	r17,r17,255
    439c:	8c40201c 	xori	r17,r17,128
    43a0:	8c7fe004 	addi	r17,r17,-128
    43a4:	00398f06 	br	29e4 <__alt_data_end+0xff0029e4>
    43a8:	d8c02d15 	stw	r3,180(sp)
    43ac:	0039883a 	mov	fp,zero
    43b0:	003e3506 	br	3c88 <__alt_data_end+0xff003c88>
    43b4:	d9002c17 	ldw	r4,176(sp)
    43b8:	d9801e04 	addi	r6,sp,120
    43bc:	b80b883a 	mov	r5,r23
    43c0:	00095fc0 	call	95fc <__sprint_r>
    43c4:	103a281e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    43c8:	d8c02017 	ldw	r3,128(sp)
    43cc:	da000404 	addi	r8,sp,16
    43d0:	003cd006 	br	3714 <__alt_data_end+0xff003714>
    43d4:	8009883a 	mov	r4,r16
    43d8:	da003d15 	stw	r8,244(sp)
    43dc:	00027c80 	call	27c8 <strlen>
    43e0:	d8802e15 	stw	r2,184(sp)
    43e4:	da003d17 	ldw	r8,244(sp)
    43e8:	103c340e 	bge	r2,zero,34bc <__alt_data_end+0xff0034bc>
    43ec:	0005883a 	mov	r2,zero
    43f0:	003c3206 	br	34bc <__alt_data_end+0xff0034bc>
    43f4:	d9002c17 	ldw	r4,176(sp)
    43f8:	d9801e04 	addi	r6,sp,120
    43fc:	b80b883a 	mov	r5,r23
    4400:	00095fc0 	call	95fc <__sprint_r>
    4404:	103a181e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    4408:	d8c02017 	ldw	r3,128(sp)
    440c:	d8801f17 	ldw	r2,124(sp)
    4410:	da000404 	addi	r8,sp,16
    4414:	d9403317 	ldw	r5,204(sp)
    4418:	10800044 	addi	r2,r2,1
    441c:	44000015 	stw	r16,0(r8)
    4420:	28c7883a 	add	r3,r5,r3
    4424:	003b7d06 	br	321c <__alt_data_end+0xff00321c>
    4428:	01000074 	movhi	r4,1
    442c:	2100fd84 	addi	r4,r4,1014
    4430:	d9003515 	stw	r4,212(sp)
    4434:	003b1406 	br	3088 <__alt_data_end+0xff003088>
    4438:	013fffc4 	movi	r4,-1
    443c:	003a3506 	br	2d14 <__alt_data_end+0xff002d14>
    4440:	0023883a 	mov	r17,zero
    4444:	003d9d06 	br	3abc <__alt_data_end+0xff003abc>
    4448:	d9002c17 	ldw	r4,176(sp)
    444c:	d9801e04 	addi	r6,sp,120
    4450:	b80b883a 	mov	r5,r23
    4454:	00095fc0 	call	95fc <__sprint_r>
    4458:	103a031e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    445c:	d8c02017 	ldw	r3,128(sp)
    4460:	da000404 	addi	r8,sp,16
    4464:	003d9406 	br	3ab8 <__alt_data_end+0xff003ab8>
    4468:	01000074 	movhi	r4,1
    446c:	2100f984 	addi	r4,r4,998
    4470:	d9002b15 	stw	r4,172(sp)
    4474:	d9002b17 	ldw	r4,172(sp)
    4478:	1c47883a 	add	r3,r3,r17
    447c:	10800044 	addi	r2,r2,1
    4480:	41000015 	stw	r4,0(r8)
    4484:	44400115 	stw	r17,4(r8)
    4488:	d8c02015 	stw	r3,128(sp)
    448c:	d8801f15 	stw	r2,124(sp)
    4490:	010001c4 	movi	r4,7
    4494:	20bfd716 	blt	r4,r2,43f4 <__alt_data_end+0xff0043f4>
    4498:	42000204 	addi	r8,r8,8
    449c:	003fdd06 	br	4414 <__alt_data_end+0xff004414>
    44a0:	d9002c17 	ldw	r4,176(sp)
    44a4:	d9801e04 	addi	r6,sp,120
    44a8:	b80b883a 	mov	r5,r23
    44ac:	00095fc0 	call	95fc <__sprint_r>
    44b0:	1039ed1e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    44b4:	d8802617 	ldw	r2,152(sp)
    44b8:	d8c02017 	ldw	r3,128(sp)
    44bc:	da000404 	addi	r8,sp,16
    44c0:	003e1006 	br	3d04 <__alt_data_end+0xff003d04>
    44c4:	00800044 	movi	r2,1
    44c8:	10803fcc 	andi	r2,r2,255
    44cc:	00c00044 	movi	r3,1
    44d0:	10fa3526 	beq	r2,r3,2da8 <__alt_data_end+0xff002da8>
    44d4:	00c00084 	movi	r3,2
    44d8:	10fbcb26 	beq	r2,r3,3408 <__alt_data_end+0xff003408>
    44dc:	003a8f06 	br	2f1c <__alt_data_end+0xff002f1c>
    44e0:	01000074 	movhi	r4,1
    44e4:	2100fd84 	addi	r4,r4,1014
    44e8:	d9003515 	stw	r4,212(sp)
    44ec:	003b7606 	br	32c8 <__alt_data_end+0xff0032c8>
    44f0:	d8802917 	ldw	r2,164(sp)
    44f4:	00c00184 	movi	r3,6
    44f8:	1880012e 	bgeu	r3,r2,4500 <___vfprintf_internal_r+0x1ca0>
    44fc:	1805883a 	mov	r2,r3
    4500:	d8802e15 	stw	r2,184(sp)
    4504:	1000ef16 	blt	r2,zero,48c4 <___vfprintf_internal_r+0x2064>
    4508:	04000074 	movhi	r16,1
    450c:	d8802a15 	stw	r2,168(sp)
    4510:	dcc02d15 	stw	r19,180(sp)
    4514:	d8002915 	stw	zero,164(sp)
    4518:	d8003215 	stw	zero,200(sp)
    451c:	8400f704 	addi	r16,r16,988
    4520:	0039883a 	mov	fp,zero
    4524:	003aa206 	br	2fb0 <__alt_data_end+0xff002fb0>
    4528:	0021883a 	mov	r16,zero
    452c:	003e0706 	br	3d4c <__alt_data_end+0xff003d4c>
    4530:	d9002c17 	ldw	r4,176(sp)
    4534:	d9801e04 	addi	r6,sp,120
    4538:	b80b883a 	mov	r5,r23
    453c:	00095fc0 	call	95fc <__sprint_r>
    4540:	1039c91e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    4544:	d8802617 	ldw	r2,152(sp)
    4548:	d9403317 	ldw	r5,204(sp)
    454c:	d8c02017 	ldw	r3,128(sp)
    4550:	da000404 	addi	r8,sp,16
    4554:	2885c83a 	sub	r2,r5,r2
    4558:	003dfb06 	br	3d48 <__alt_data_end+0xff003d48>
    455c:	9080004c 	andi	r2,r18,1
    4560:	103e8f1e 	bne	r2,zero,3fa0 <__alt_data_end+0xff003fa0>
    4564:	d8802117 	ldw	r2,132(sp)
    4568:	003e9e06 	br	3fe4 <__alt_data_end+0xff003fe4>
    456c:	1025883a 	mov	r18,r2
    4570:	0039883a 	mov	fp,zero
    4574:	00800084 	movi	r2,2
    4578:	003fd306 	br	44c8 <__alt_data_end+0xff0044c8>
    457c:	07000b44 	movi	fp,45
    4580:	df002785 	stb	fp,158(sp)
    4584:	003a4006 	br	2e88 <__alt_data_end+0xff002e88>
    4588:	00c00b44 	movi	r3,45
    458c:	d8c02785 	stb	r3,158(sp)
    4590:	d8802a15 	stw	r2,168(sp)
    4594:	dc802b17 	ldw	r18,172(sp)
    4598:	d8002915 	stw	zero,164(sp)
    459c:	07000b44 	movi	fp,45
    45a0:	003a8006 	br	2fa4 <__alt_data_end+0xff002fa4>
    45a4:	04000074 	movhi	r16,1
    45a8:	8400ec04 	addi	r16,r16,944
    45ac:	003f4706 	br	42cc <__alt_data_end+0xff0042cc>
    45b0:	d8c02d17 	ldw	r3,180(sp)
    45b4:	d9002f17 	ldw	r4,188(sp)
    45b8:	18800017 	ldw	r2,0(r3)
    45bc:	18c00104 	addi	r3,r3,4
    45c0:	d8c02d15 	stw	r3,180(sp)
    45c4:	11000015 	stw	r4,0(r2)
    45c8:	0038dd06 	br	2940 <__alt_data_end+0xff002940>
    45cc:	dd802617 	ldw	r22,152(sp)
    45d0:	00bfff44 	movi	r2,-3
    45d4:	b0801c16 	blt	r22,r2,4648 <___vfprintf_internal_r+0x1de8>
    45d8:	d9402917 	ldw	r5,164(sp)
    45dc:	2d801a16 	blt	r5,r22,4648 <___vfprintf_internal_r+0x1de8>
    45e0:	dd803215 	stw	r22,200(sp)
    45e4:	003e8906 	br	400c <__alt_data_end+0xff00400c>
    45e8:	01000074 	movhi	r4,1
    45ec:	2100f984 	addi	r4,r4,998
    45f0:	d9002b15 	stw	r4,172(sp)
    45f4:	003c9106 	br	383c <__alt_data_end+0xff00383c>
    45f8:	e005883a 	mov	r2,fp
    45fc:	003e7906 	br	3fe4 <__alt_data_end+0xff003fe4>
    4600:	d9402917 	ldw	r5,164(sp)
    4604:	df002783 	ldbu	fp,158(sp)
    4608:	dcc02d15 	stw	r19,180(sp)
    460c:	d9402a15 	stw	r5,168(sp)
    4610:	d9402e15 	stw	r5,184(sp)
    4614:	d8002915 	stw	zero,164(sp)
    4618:	d8003215 	stw	zero,200(sp)
    461c:	003a5d06 	br	2f94 <__alt_data_end+0xff002f94>
    4620:	9080004c 	andi	r2,r18,1
    4624:	0039883a 	mov	fp,zero
    4628:	10000426 	beq	r2,zero,463c <___vfprintf_internal_r+0x1ddc>
    462c:	00800c04 	movi	r2,48
    4630:	dc001dc4 	addi	r16,sp,119
    4634:	d8801dc5 	stb	r2,119(sp)
    4638:	003b8006 	br	343c <__alt_data_end+0xff00343c>
    463c:	d8002e15 	stw	zero,184(sp)
    4640:	dc001e04 	addi	r16,sp,120
    4644:	003a4d06 	br	2f7c <__alt_data_end+0xff002f7c>
    4648:	8c7fff84 	addi	r17,r17,-2
    464c:	b5bfffc4 	addi	r22,r22,-1
    4650:	dd802615 	stw	r22,152(sp)
    4654:	dc4022c5 	stb	r17,139(sp)
    4658:	b000bf16 	blt	r22,zero,4958 <___vfprintf_internal_r+0x20f8>
    465c:	00800ac4 	movi	r2,43
    4660:	d8802305 	stb	r2,140(sp)
    4664:	00800244 	movi	r2,9
    4668:	15807016 	blt	r2,r22,482c <___vfprintf_internal_r+0x1fcc>
    466c:	00800c04 	movi	r2,48
    4670:	b5800c04 	addi	r22,r22,48
    4674:	d8802345 	stb	r2,141(sp)
    4678:	dd802385 	stb	r22,142(sp)
    467c:	d88023c4 	addi	r2,sp,143
    4680:	df0022c4 	addi	fp,sp,139
    4684:	d8c03317 	ldw	r3,204(sp)
    4688:	1739c83a 	sub	fp,r2,fp
    468c:	d9003317 	ldw	r4,204(sp)
    4690:	e0c7883a 	add	r3,fp,r3
    4694:	df003a15 	stw	fp,232(sp)
    4698:	d8c02e15 	stw	r3,184(sp)
    469c:	00800044 	movi	r2,1
    46a0:	1100b30e 	bge	r2,r4,4970 <___vfprintf_internal_r+0x2110>
    46a4:	d8c02e17 	ldw	r3,184(sp)
    46a8:	18c00044 	addi	r3,r3,1
    46ac:	d8c02e15 	stw	r3,184(sp)
    46b0:	1805883a 	mov	r2,r3
    46b4:	1800ac16 	blt	r3,zero,4968 <___vfprintf_internal_r+0x2108>
    46b8:	d8003215 	stw	zero,200(sp)
    46bc:	003e5d06 	br	4034 <__alt_data_end+0xff004034>
    46c0:	d9002c17 	ldw	r4,176(sp)
    46c4:	d9801e04 	addi	r6,sp,120
    46c8:	b80b883a 	mov	r5,r23
    46cc:	00095fc0 	call	95fc <__sprint_r>
    46d0:	1039651e 	bne	r2,zero,2c68 <__alt_data_end+0xff002c68>
    46d4:	dc402617 	ldw	r17,152(sp)
    46d8:	d8c02017 	ldw	r3,128(sp)
    46dc:	d8801f17 	ldw	r2,124(sp)
    46e0:	da000404 	addi	r8,sp,16
    46e4:	003ed606 	br	4240 <__alt_data_end+0xff004240>
    46e8:	582b883a 	mov	r21,r11
    46ec:	d8002915 	stw	zero,164(sp)
    46f0:	0038bd06 	br	29e8 <__alt_data_end+0xff0029e8>
    46f4:	d8802917 	ldw	r2,164(sp)
    46f8:	103e071e 	bne	r2,zero,3f18 <__alt_data_end+0xff003f18>
    46fc:	dc002915 	stw	r16,164(sp)
    4700:	003e0506 	br	3f18 <__alt_data_end+0xff003f18>
    4704:	d9002917 	ldw	r4,164(sp)
    4708:	20c00044 	addi	r3,r4,1
    470c:	003e0f06 	br	3f4c <__alt_data_end+0xff003f4c>
    4710:	01400184 	movi	r5,6
    4714:	d9402915 	stw	r5,164(sp)
    4718:	003dff06 	br	3f18 <__alt_data_end+0xff003f18>
    471c:	d8802104 	addi	r2,sp,132
    4720:	d8800315 	stw	r2,12(sp)
    4724:	d8802504 	addi	r2,sp,148
    4728:	d8800215 	stw	r2,8(sp)
    472c:	d8802604 	addi	r2,sp,152
    4730:	d8800115 	stw	r2,4(sp)
    4734:	d8802917 	ldw	r2,164(sp)
    4738:	d9403617 	ldw	r5,216(sp)
    473c:	d9002c17 	ldw	r4,176(sp)
    4740:	d8800015 	stw	r2,0(sp)
    4744:	01c000c4 	movi	r7,3
    4748:	980d883a 	mov	r6,r19
    474c:	da003d15 	stw	r8,244(sp)
    4750:	0004e840 	call	4e84 <_dtoa_r>
    4754:	d8c02917 	ldw	r3,164(sp)
    4758:	da003d17 	ldw	r8,244(sp)
    475c:	1021883a 	mov	r16,r2
    4760:	10f9883a 	add	fp,r2,r3
    4764:	81000007 	ldb	r4,0(r16)
    4768:	00800c04 	movi	r2,48
    476c:	20805e26 	beq	r4,r2,48e8 <___vfprintf_internal_r+0x2088>
    4770:	d8c02617 	ldw	r3,152(sp)
    4774:	e0f9883a 	add	fp,fp,r3
    4778:	003e0a06 	br	3fa4 <__alt_data_end+0xff003fa4>
    477c:	00c00b44 	movi	r3,45
    4780:	24e0003c 	xorhi	r19,r4,32768
    4784:	d8c02a05 	stb	r3,168(sp)
    4788:	003de906 	br	3f30 <__alt_data_end+0xff003f30>
    478c:	d8c03217 	ldw	r3,200(sp)
    4790:	00c07a0e 	bge	zero,r3,497c <___vfprintf_internal_r+0x211c>
    4794:	00800044 	movi	r2,1
    4798:	d9003317 	ldw	r4,204(sp)
    479c:	1105883a 	add	r2,r2,r4
    47a0:	d8802e15 	stw	r2,184(sp)
    47a4:	10004e16 	blt	r2,zero,48e0 <___vfprintf_internal_r+0x2080>
    47a8:	044019c4 	movi	r17,103
    47ac:	003e2106 	br	4034 <__alt_data_end+0xff004034>
    47b0:	d9002917 	ldw	r4,164(sp)
    47b4:	d8802104 	addi	r2,sp,132
    47b8:	d8800315 	stw	r2,12(sp)
    47bc:	d9000015 	stw	r4,0(sp)
    47c0:	d8802504 	addi	r2,sp,148
    47c4:	d9403617 	ldw	r5,216(sp)
    47c8:	d9002c17 	ldw	r4,176(sp)
    47cc:	d8800215 	stw	r2,8(sp)
    47d0:	d8802604 	addi	r2,sp,152
    47d4:	d8800115 	stw	r2,4(sp)
    47d8:	01c000c4 	movi	r7,3
    47dc:	980d883a 	mov	r6,r19
    47e0:	da003d15 	stw	r8,244(sp)
    47e4:	0004e840 	call	4e84 <_dtoa_r>
    47e8:	d8c02917 	ldw	r3,164(sp)
    47ec:	da003d17 	ldw	r8,244(sp)
    47f0:	1021883a 	mov	r16,r2
    47f4:	00801184 	movi	r2,70
    47f8:	80f9883a 	add	fp,r16,r3
    47fc:	88bfd926 	beq	r17,r2,4764 <__alt_data_end+0xff004764>
    4800:	003de806 	br	3fa4 <__alt_data_end+0xff003fa4>
    4804:	d9002917 	ldw	r4,164(sp)
    4808:	00c04d0e 	bge	zero,r3,4940 <___vfprintf_internal_r+0x20e0>
    480c:	2000441e 	bne	r4,zero,4920 <___vfprintf_internal_r+0x20c0>
    4810:	9480004c 	andi	r18,r18,1
    4814:	9000421e 	bne	r18,zero,4920 <___vfprintf_internal_r+0x20c0>
    4818:	1805883a 	mov	r2,r3
    481c:	18007016 	blt	r3,zero,49e0 <___vfprintf_internal_r+0x2180>
    4820:	d8c03217 	ldw	r3,200(sp)
    4824:	d8c02e15 	stw	r3,184(sp)
    4828:	003e0206 	br	4034 <__alt_data_end+0xff004034>
    482c:	df0022c4 	addi	fp,sp,139
    4830:	dc002915 	stw	r16,164(sp)
    4834:	4027883a 	mov	r19,r8
    4838:	e021883a 	mov	r16,fp
    483c:	b009883a 	mov	r4,r22
    4840:	01400284 	movi	r5,10
    4844:	0001cd00 	call	1cd0 <__modsi3>
    4848:	10800c04 	addi	r2,r2,48
    484c:	843fffc4 	addi	r16,r16,-1
    4850:	b009883a 	mov	r4,r22
    4854:	01400284 	movi	r5,10
    4858:	80800005 	stb	r2,0(r16)
    485c:	0001c4c0 	call	1c4c <__divsi3>
    4860:	102d883a 	mov	r22,r2
    4864:	00800244 	movi	r2,9
    4868:	15bff416 	blt	r2,r22,483c <__alt_data_end+0xff00483c>
    486c:	9811883a 	mov	r8,r19
    4870:	b0800c04 	addi	r2,r22,48
    4874:	8027883a 	mov	r19,r16
    4878:	997fffc4 	addi	r5,r19,-1
    487c:	98bfffc5 	stb	r2,-1(r19)
    4880:	dc002917 	ldw	r16,164(sp)
    4884:	2f006a2e 	bgeu	r5,fp,4a30 <___vfprintf_internal_r+0x21d0>
    4888:	d9c02384 	addi	r7,sp,142
    488c:	3ccfc83a 	sub	r7,r7,r19
    4890:	d9002344 	addi	r4,sp,141
    4894:	e1cf883a 	add	r7,fp,r7
    4898:	00000106 	br	48a0 <___vfprintf_internal_r+0x2040>
    489c:	28800003 	ldbu	r2,0(r5)
    48a0:	20800005 	stb	r2,0(r4)
    48a4:	21000044 	addi	r4,r4,1
    48a8:	29400044 	addi	r5,r5,1
    48ac:	393ffb1e 	bne	r7,r4,489c <__alt_data_end+0xff00489c>
    48b0:	d8802304 	addi	r2,sp,140
    48b4:	14c5c83a 	sub	r2,r2,r19
    48b8:	d8c02344 	addi	r3,sp,141
    48bc:	1885883a 	add	r2,r3,r2
    48c0:	003f7006 	br	4684 <__alt_data_end+0xff004684>
    48c4:	0005883a 	mov	r2,zero
    48c8:	003f0f06 	br	4508 <__alt_data_end+0xff004508>
    48cc:	d8c03217 	ldw	r3,200(sp)
    48d0:	18c00044 	addi	r3,r3,1
    48d4:	d8c02e15 	stw	r3,184(sp)
    48d8:	1805883a 	mov	r2,r3
    48dc:	183fb20e 	bge	r3,zero,47a8 <__alt_data_end+0xff0047a8>
    48e0:	0005883a 	mov	r2,zero
    48e4:	003fb006 	br	47a8 <__alt_data_end+0xff0047a8>
    48e8:	d9003617 	ldw	r4,216(sp)
    48ec:	000d883a 	mov	r6,zero
    48f0:	000f883a 	mov	r7,zero
    48f4:	980b883a 	mov	r5,r19
    48f8:	d8c03c15 	stw	r3,240(sp)
    48fc:	da003d15 	stw	r8,244(sp)
    4900:	000d0c00 	call	d0c0 <__eqdf2>
    4904:	d8c03c17 	ldw	r3,240(sp)
    4908:	da003d17 	ldw	r8,244(sp)
    490c:	103f9826 	beq	r2,zero,4770 <__alt_data_end+0xff004770>
    4910:	00800044 	movi	r2,1
    4914:	10c7c83a 	sub	r3,r2,r3
    4918:	d8c02615 	stw	r3,152(sp)
    491c:	003f9506 	br	4774 <__alt_data_end+0xff004774>
    4920:	d9002917 	ldw	r4,164(sp)
    4924:	d8c03217 	ldw	r3,200(sp)
    4928:	20800044 	addi	r2,r4,1
    492c:	1885883a 	add	r2,r3,r2
    4930:	d8802e15 	stw	r2,184(sp)
    4934:	103dbf0e 	bge	r2,zero,4034 <__alt_data_end+0xff004034>
    4938:	0005883a 	mov	r2,zero
    493c:	003dbd06 	br	4034 <__alt_data_end+0xff004034>
    4940:	2000211e 	bne	r4,zero,49c8 <___vfprintf_internal_r+0x2168>
    4944:	9480004c 	andi	r18,r18,1
    4948:	90001f1e 	bne	r18,zero,49c8 <___vfprintf_internal_r+0x2168>
    494c:	00800044 	movi	r2,1
    4950:	d8802e15 	stw	r2,184(sp)
    4954:	003db706 	br	4034 <__alt_data_end+0xff004034>
    4958:	00800b44 	movi	r2,45
    495c:	05adc83a 	sub	r22,zero,r22
    4960:	d8802305 	stb	r2,140(sp)
    4964:	003f3f06 	br	4664 <__alt_data_end+0xff004664>
    4968:	0005883a 	mov	r2,zero
    496c:	003f5206 	br	46b8 <__alt_data_end+0xff0046b8>
    4970:	90a4703a 	and	r18,r18,r2
    4974:	903f4e26 	beq	r18,zero,46b0 <__alt_data_end+0xff0046b0>
    4978:	003f4a06 	br	46a4 <__alt_data_end+0xff0046a4>
    497c:	00800084 	movi	r2,2
    4980:	10c5c83a 	sub	r2,r2,r3
    4984:	003f8406 	br	4798 <__alt_data_end+0xff004798>
    4988:	d8802d17 	ldw	r2,180(sp)
    498c:	d9002d17 	ldw	r4,180(sp)
    4990:	ac400043 	ldbu	r17,1(r21)
    4994:	10800017 	ldw	r2,0(r2)
    4998:	582b883a 	mov	r21,r11
    499c:	d8802915 	stw	r2,164(sp)
    49a0:	20800104 	addi	r2,r4,4
    49a4:	d9002917 	ldw	r4,164(sp)
    49a8:	d8802d15 	stw	r2,180(sp)
    49ac:	203e7a0e 	bge	r4,zero,4398 <__alt_data_end+0xff004398>
    49b0:	8c403fcc 	andi	r17,r17,255
    49b4:	00bfffc4 	movi	r2,-1
    49b8:	8c40201c 	xori	r17,r17,128
    49bc:	d8802915 	stw	r2,164(sp)
    49c0:	8c7fe004 	addi	r17,r17,-128
    49c4:	00380706 	br	29e4 <__alt_data_end+0xff0029e4>
    49c8:	d8c02917 	ldw	r3,164(sp)
    49cc:	18c00084 	addi	r3,r3,2
    49d0:	d8c02e15 	stw	r3,184(sp)
    49d4:	1805883a 	mov	r2,r3
    49d8:	183d960e 	bge	r3,zero,4034 <__alt_data_end+0xff004034>
    49dc:	003fd606 	br	4938 <__alt_data_end+0xff004938>
    49e0:	0005883a 	mov	r2,zero
    49e4:	003f8e06 	br	4820 <__alt_data_end+0xff004820>
    49e8:	9080004c 	andi	r2,r18,1
    49ec:	103f811e 	bne	r2,zero,47f4 <__alt_data_end+0xff0047f4>
    49f0:	d8802117 	ldw	r2,132(sp)
    49f4:	1405c83a 	sub	r2,r2,r16
    49f8:	d8803315 	stw	r2,204(sp)
    49fc:	b47ef326 	beq	r22,r17,45cc <__alt_data_end+0xff0045cc>
    4a00:	dd802617 	ldw	r22,152(sp)
    4a04:	003f1106 	br	464c <__alt_data_end+0xff00464c>
    4a08:	d9c02785 	stb	r7,158(sp)
    4a0c:	00390406 	br	2e20 <__alt_data_end+0xff002e20>
    4a10:	d9c02785 	stb	r7,158(sp)
    4a14:	0038d306 	br	2d64 <__alt_data_end+0xff002d64>
    4a18:	d9c02785 	stb	r7,158(sp)
    4a1c:	003a6106 	br	33a4 <__alt_data_end+0xff0033a4>
    4a20:	d9c02785 	stb	r7,158(sp)
    4a24:	003af806 	br	3608 <__alt_data_end+0xff003608>
    4a28:	0005883a 	mov	r2,zero
    4a2c:	003d7e06 	br	4028 <__alt_data_end+0xff004028>
    4a30:	d8802344 	addi	r2,sp,141
    4a34:	003f1306 	br	4684 <__alt_data_end+0xff004684>
    4a38:	d9c02785 	stb	r7,158(sp)
    4a3c:	00392306 	br	2ecc <__alt_data_end+0xff002ecc>
    4a40:	d9c02785 	stb	r7,158(sp)
    4a44:	003aa906 	br	34ec <__alt_data_end+0xff0034ec>
    4a48:	d9c02785 	stb	r7,158(sp)
    4a4c:	003a3d06 	br	3344 <__alt_data_end+0xff003344>
    4a50:	d9c02785 	stb	r7,158(sp)
    4a54:	003aca06 	br	3580 <__alt_data_end+0xff003580>

00004a58 <__vfprintf_internal>:
    4a58:	00800074 	movhi	r2,1
    4a5c:	10889004 	addi	r2,r2,8768
    4a60:	300f883a 	mov	r7,r6
    4a64:	280d883a 	mov	r6,r5
    4a68:	200b883a 	mov	r5,r4
    4a6c:	11000017 	ldw	r4,0(r2)
    4a70:	00028601 	jmpi	2860 <___vfprintf_internal_r>

00004a74 <__sbprintf>:
    4a74:	2880030b 	ldhu	r2,12(r5)
    4a78:	2ac01917 	ldw	r11,100(r5)
    4a7c:	2a80038b 	ldhu	r10,14(r5)
    4a80:	2a400717 	ldw	r9,28(r5)
    4a84:	2a000917 	ldw	r8,36(r5)
    4a88:	defee204 	addi	sp,sp,-1144
    4a8c:	00c10004 	movi	r3,1024
    4a90:	dc011a15 	stw	r16,1128(sp)
    4a94:	10bfff4c 	andi	r2,r2,65533
    4a98:	2821883a 	mov	r16,r5
    4a9c:	d8cb883a 	add	r5,sp,r3
    4aa0:	dc811c15 	stw	r18,1136(sp)
    4aa4:	dc411b15 	stw	r17,1132(sp)
    4aa8:	dfc11d15 	stw	ra,1140(sp)
    4aac:	2025883a 	mov	r18,r4
    4ab0:	d881030d 	sth	r2,1036(sp)
    4ab4:	dac11915 	stw	r11,1124(sp)
    4ab8:	da81038d 	sth	r10,1038(sp)
    4abc:	da410715 	stw	r9,1052(sp)
    4ac0:	da010915 	stw	r8,1060(sp)
    4ac4:	dec10015 	stw	sp,1024(sp)
    4ac8:	dec10415 	stw	sp,1040(sp)
    4acc:	d8c10215 	stw	r3,1032(sp)
    4ad0:	d8c10515 	stw	r3,1044(sp)
    4ad4:	d8010615 	stw	zero,1048(sp)
    4ad8:	00028600 	call	2860 <___vfprintf_internal_r>
    4adc:	1023883a 	mov	r17,r2
    4ae0:	10000416 	blt	r2,zero,4af4 <__sbprintf+0x80>
    4ae4:	d9410004 	addi	r5,sp,1024
    4ae8:	9009883a 	mov	r4,r18
    4aec:	00067280 	call	6728 <_fflush_r>
    4af0:	10000d1e 	bne	r2,zero,4b28 <__sbprintf+0xb4>
    4af4:	d881030b 	ldhu	r2,1036(sp)
    4af8:	1080100c 	andi	r2,r2,64
    4afc:	10000326 	beq	r2,zero,4b0c <__sbprintf+0x98>
    4b00:	8080030b 	ldhu	r2,12(r16)
    4b04:	10801014 	ori	r2,r2,64
    4b08:	8080030d 	sth	r2,12(r16)
    4b0c:	8805883a 	mov	r2,r17
    4b10:	dfc11d17 	ldw	ra,1140(sp)
    4b14:	dc811c17 	ldw	r18,1136(sp)
    4b18:	dc411b17 	ldw	r17,1132(sp)
    4b1c:	dc011a17 	ldw	r16,1128(sp)
    4b20:	dec11e04 	addi	sp,sp,1144
    4b24:	f800283a 	ret
    4b28:	047fffc4 	movi	r17,-1
    4b2c:	003ff106 	br	4af4 <__alt_data_end+0xff004af4>

00004b30 <__swsetup_r>:
    4b30:	00800074 	movhi	r2,1
    4b34:	defffd04 	addi	sp,sp,-12
    4b38:	10889004 	addi	r2,r2,8768
    4b3c:	dc400115 	stw	r17,4(sp)
    4b40:	2023883a 	mov	r17,r4
    4b44:	11000017 	ldw	r4,0(r2)
    4b48:	dc000015 	stw	r16,0(sp)
    4b4c:	dfc00215 	stw	ra,8(sp)
    4b50:	2821883a 	mov	r16,r5
    4b54:	20000226 	beq	r4,zero,4b60 <__swsetup_r+0x30>
    4b58:	20800e17 	ldw	r2,56(r4)
    4b5c:	10003126 	beq	r2,zero,4c24 <__swsetup_r+0xf4>
    4b60:	8080030b 	ldhu	r2,12(r16)
    4b64:	10c0020c 	andi	r3,r2,8
    4b68:	1009883a 	mov	r4,r2
    4b6c:	18000f26 	beq	r3,zero,4bac <__swsetup_r+0x7c>
    4b70:	80c00417 	ldw	r3,16(r16)
    4b74:	18001526 	beq	r3,zero,4bcc <__swsetup_r+0x9c>
    4b78:	1100004c 	andi	r4,r2,1
    4b7c:	20001c1e 	bne	r4,zero,4bf0 <__swsetup_r+0xc0>
    4b80:	1080008c 	andi	r2,r2,2
    4b84:	1000291e 	bne	r2,zero,4c2c <__swsetup_r+0xfc>
    4b88:	80800517 	ldw	r2,20(r16)
    4b8c:	80800215 	stw	r2,8(r16)
    4b90:	18001c26 	beq	r3,zero,4c04 <__swsetup_r+0xd4>
    4b94:	0005883a 	mov	r2,zero
    4b98:	dfc00217 	ldw	ra,8(sp)
    4b9c:	dc400117 	ldw	r17,4(sp)
    4ba0:	dc000017 	ldw	r16,0(sp)
    4ba4:	dec00304 	addi	sp,sp,12
    4ba8:	f800283a 	ret
    4bac:	2080040c 	andi	r2,r4,16
    4bb0:	10002e26 	beq	r2,zero,4c6c <__swsetup_r+0x13c>
    4bb4:	2080010c 	andi	r2,r4,4
    4bb8:	10001e1e 	bne	r2,zero,4c34 <__swsetup_r+0x104>
    4bbc:	80c00417 	ldw	r3,16(r16)
    4bc0:	20800214 	ori	r2,r4,8
    4bc4:	8080030d 	sth	r2,12(r16)
    4bc8:	183feb1e 	bne	r3,zero,4b78 <__alt_data_end+0xff004b78>
    4bcc:	1100a00c 	andi	r4,r2,640
    4bd0:	01408004 	movi	r5,512
    4bd4:	217fe826 	beq	r4,r5,4b78 <__alt_data_end+0xff004b78>
    4bd8:	800b883a 	mov	r5,r16
    4bdc:	8809883a 	mov	r4,r17
    4be0:	00076a80 	call	76a8 <__smakebuf_r>
    4be4:	8080030b 	ldhu	r2,12(r16)
    4be8:	80c00417 	ldw	r3,16(r16)
    4bec:	003fe206 	br	4b78 <__alt_data_end+0xff004b78>
    4bf0:	80800517 	ldw	r2,20(r16)
    4bf4:	80000215 	stw	zero,8(r16)
    4bf8:	0085c83a 	sub	r2,zero,r2
    4bfc:	80800615 	stw	r2,24(r16)
    4c00:	183fe41e 	bne	r3,zero,4b94 <__alt_data_end+0xff004b94>
    4c04:	80c0030b 	ldhu	r3,12(r16)
    4c08:	0005883a 	mov	r2,zero
    4c0c:	1900200c 	andi	r4,r3,128
    4c10:	203fe126 	beq	r4,zero,4b98 <__alt_data_end+0xff004b98>
    4c14:	18c01014 	ori	r3,r3,64
    4c18:	80c0030d 	sth	r3,12(r16)
    4c1c:	00bfffc4 	movi	r2,-1
    4c20:	003fdd06 	br	4b98 <__alt_data_end+0xff004b98>
    4c24:	0006b040 	call	6b04 <__sinit>
    4c28:	003fcd06 	br	4b60 <__alt_data_end+0xff004b60>
    4c2c:	0005883a 	mov	r2,zero
    4c30:	003fd606 	br	4b8c <__alt_data_end+0xff004b8c>
    4c34:	81400c17 	ldw	r5,48(r16)
    4c38:	28000626 	beq	r5,zero,4c54 <__swsetup_r+0x124>
    4c3c:	80801004 	addi	r2,r16,64
    4c40:	28800326 	beq	r5,r2,4c50 <__swsetup_r+0x120>
    4c44:	8809883a 	mov	r4,r17
    4c48:	0006c780 	call	6c78 <_free_r>
    4c4c:	8100030b 	ldhu	r4,12(r16)
    4c50:	80000c15 	stw	zero,48(r16)
    4c54:	80c00417 	ldw	r3,16(r16)
    4c58:	00bff6c4 	movi	r2,-37
    4c5c:	1108703a 	and	r4,r2,r4
    4c60:	80000115 	stw	zero,4(r16)
    4c64:	80c00015 	stw	r3,0(r16)
    4c68:	003fd506 	br	4bc0 <__alt_data_end+0xff004bc0>
    4c6c:	00800244 	movi	r2,9
    4c70:	88800015 	stw	r2,0(r17)
    4c74:	20801014 	ori	r2,r4,64
    4c78:	8080030d 	sth	r2,12(r16)
    4c7c:	00bfffc4 	movi	r2,-1
    4c80:	003fc506 	br	4b98 <__alt_data_end+0xff004b98>

00004c84 <quorem>:
    4c84:	defff704 	addi	sp,sp,-36
    4c88:	dc800215 	stw	r18,8(sp)
    4c8c:	20800417 	ldw	r2,16(r4)
    4c90:	2c800417 	ldw	r18,16(r5)
    4c94:	dfc00815 	stw	ra,32(sp)
    4c98:	ddc00715 	stw	r23,28(sp)
    4c9c:	dd800615 	stw	r22,24(sp)
    4ca0:	dd400515 	stw	r21,20(sp)
    4ca4:	dd000415 	stw	r20,16(sp)
    4ca8:	dcc00315 	stw	r19,12(sp)
    4cac:	dc400115 	stw	r17,4(sp)
    4cb0:	dc000015 	stw	r16,0(sp)
    4cb4:	14807116 	blt	r2,r18,4e7c <quorem+0x1f8>
    4cb8:	94bfffc4 	addi	r18,r18,-1
    4cbc:	94ad883a 	add	r22,r18,r18
    4cc0:	b5ad883a 	add	r22,r22,r22
    4cc4:	2c400504 	addi	r17,r5,20
    4cc8:	8da9883a 	add	r20,r17,r22
    4ccc:	25400504 	addi	r21,r4,20
    4cd0:	282f883a 	mov	r23,r5
    4cd4:	adad883a 	add	r22,r21,r22
    4cd8:	a1400017 	ldw	r5,0(r20)
    4cdc:	2021883a 	mov	r16,r4
    4ce0:	b1000017 	ldw	r4,0(r22)
    4ce4:	29400044 	addi	r5,r5,1
    4ce8:	0001d440 	call	1d44 <__udivsi3>
    4cec:	1027883a 	mov	r19,r2
    4cf0:	10002c26 	beq	r2,zero,4da4 <quorem+0x120>
    4cf4:	a813883a 	mov	r9,r21
    4cf8:	880b883a 	mov	r5,r17
    4cfc:	0009883a 	mov	r4,zero
    4d00:	000d883a 	mov	r6,zero
    4d04:	2a000017 	ldw	r8,0(r5)
    4d08:	49c00017 	ldw	r7,0(r9)
    4d0c:	29400104 	addi	r5,r5,4
    4d10:	40bfffcc 	andi	r2,r8,65535
    4d14:	14c5383a 	mul	r2,r2,r19
    4d18:	4010d43a 	srli	r8,r8,16
    4d1c:	38ffffcc 	andi	r3,r7,65535
    4d20:	1105883a 	add	r2,r2,r4
    4d24:	1008d43a 	srli	r4,r2,16
    4d28:	44d1383a 	mul	r8,r8,r19
    4d2c:	198d883a 	add	r6,r3,r6
    4d30:	10ffffcc 	andi	r3,r2,65535
    4d34:	30c7c83a 	sub	r3,r6,r3
    4d38:	380ed43a 	srli	r7,r7,16
    4d3c:	4105883a 	add	r2,r8,r4
    4d40:	180dd43a 	srai	r6,r3,16
    4d44:	113fffcc 	andi	r4,r2,65535
    4d48:	390fc83a 	sub	r7,r7,r4
    4d4c:	398d883a 	add	r6,r7,r6
    4d50:	300e943a 	slli	r7,r6,16
    4d54:	18ffffcc 	andi	r3,r3,65535
    4d58:	1008d43a 	srli	r4,r2,16
    4d5c:	38ceb03a 	or	r7,r7,r3
    4d60:	49c00015 	stw	r7,0(r9)
    4d64:	300dd43a 	srai	r6,r6,16
    4d68:	4a400104 	addi	r9,r9,4
    4d6c:	a17fe52e 	bgeu	r20,r5,4d04 <__alt_data_end+0xff004d04>
    4d70:	b0800017 	ldw	r2,0(r22)
    4d74:	10000b1e 	bne	r2,zero,4da4 <quorem+0x120>
    4d78:	b0bfff04 	addi	r2,r22,-4
    4d7c:	a880082e 	bgeu	r21,r2,4da0 <quorem+0x11c>
    4d80:	b0ffff17 	ldw	r3,-4(r22)
    4d84:	18000326 	beq	r3,zero,4d94 <quorem+0x110>
    4d88:	00000506 	br	4da0 <quorem+0x11c>
    4d8c:	10c00017 	ldw	r3,0(r2)
    4d90:	1800031e 	bne	r3,zero,4da0 <quorem+0x11c>
    4d94:	10bfff04 	addi	r2,r2,-4
    4d98:	94bfffc4 	addi	r18,r18,-1
    4d9c:	a8bffb36 	bltu	r21,r2,4d8c <__alt_data_end+0xff004d8c>
    4da0:	84800415 	stw	r18,16(r16)
    4da4:	b80b883a 	mov	r5,r23
    4da8:	8009883a 	mov	r4,r16
    4dac:	00085dc0 	call	85dc <__mcmp>
    4db0:	10002616 	blt	r2,zero,4e4c <quorem+0x1c8>
    4db4:	9cc00044 	addi	r19,r19,1
    4db8:	a805883a 	mov	r2,r21
    4dbc:	000b883a 	mov	r5,zero
    4dc0:	11000017 	ldw	r4,0(r2)
    4dc4:	89800017 	ldw	r6,0(r17)
    4dc8:	10800104 	addi	r2,r2,4
    4dcc:	20ffffcc 	andi	r3,r4,65535
    4dd0:	194b883a 	add	r5,r3,r5
    4dd4:	30ffffcc 	andi	r3,r6,65535
    4dd8:	28c7c83a 	sub	r3,r5,r3
    4ddc:	300cd43a 	srli	r6,r6,16
    4de0:	2008d43a 	srli	r4,r4,16
    4de4:	180bd43a 	srai	r5,r3,16
    4de8:	18ffffcc 	andi	r3,r3,65535
    4dec:	2189c83a 	sub	r4,r4,r6
    4df0:	2149883a 	add	r4,r4,r5
    4df4:	200c943a 	slli	r6,r4,16
    4df8:	8c400104 	addi	r17,r17,4
    4dfc:	200bd43a 	srai	r5,r4,16
    4e00:	30c6b03a 	or	r3,r6,r3
    4e04:	10ffff15 	stw	r3,-4(r2)
    4e08:	a47fed2e 	bgeu	r20,r17,4dc0 <__alt_data_end+0xff004dc0>
    4e0c:	9485883a 	add	r2,r18,r18
    4e10:	1085883a 	add	r2,r2,r2
    4e14:	a887883a 	add	r3,r21,r2
    4e18:	18800017 	ldw	r2,0(r3)
    4e1c:	10000b1e 	bne	r2,zero,4e4c <quorem+0x1c8>
    4e20:	18bfff04 	addi	r2,r3,-4
    4e24:	a880082e 	bgeu	r21,r2,4e48 <quorem+0x1c4>
    4e28:	18ffff17 	ldw	r3,-4(r3)
    4e2c:	18000326 	beq	r3,zero,4e3c <quorem+0x1b8>
    4e30:	00000506 	br	4e48 <quorem+0x1c4>
    4e34:	10c00017 	ldw	r3,0(r2)
    4e38:	1800031e 	bne	r3,zero,4e48 <quorem+0x1c4>
    4e3c:	10bfff04 	addi	r2,r2,-4
    4e40:	94bfffc4 	addi	r18,r18,-1
    4e44:	a8bffb36 	bltu	r21,r2,4e34 <__alt_data_end+0xff004e34>
    4e48:	84800415 	stw	r18,16(r16)
    4e4c:	9805883a 	mov	r2,r19
    4e50:	dfc00817 	ldw	ra,32(sp)
    4e54:	ddc00717 	ldw	r23,28(sp)
    4e58:	dd800617 	ldw	r22,24(sp)
    4e5c:	dd400517 	ldw	r21,20(sp)
    4e60:	dd000417 	ldw	r20,16(sp)
    4e64:	dcc00317 	ldw	r19,12(sp)
    4e68:	dc800217 	ldw	r18,8(sp)
    4e6c:	dc400117 	ldw	r17,4(sp)
    4e70:	dc000017 	ldw	r16,0(sp)
    4e74:	dec00904 	addi	sp,sp,36
    4e78:	f800283a 	ret
    4e7c:	0005883a 	mov	r2,zero
    4e80:	003ff306 	br	4e50 <__alt_data_end+0xff004e50>

00004e84 <_dtoa_r>:
    4e84:	20801017 	ldw	r2,64(r4)
    4e88:	deffde04 	addi	sp,sp,-136
    4e8c:	df002015 	stw	fp,128(sp)
    4e90:	dcc01b15 	stw	r19,108(sp)
    4e94:	dc801a15 	stw	r18,104(sp)
    4e98:	dc401915 	stw	r17,100(sp)
    4e9c:	dc001815 	stw	r16,96(sp)
    4ea0:	dfc02115 	stw	ra,132(sp)
    4ea4:	ddc01f15 	stw	r23,124(sp)
    4ea8:	dd801e15 	stw	r22,120(sp)
    4eac:	dd401d15 	stw	r21,116(sp)
    4eb0:	dd001c15 	stw	r20,112(sp)
    4eb4:	d9c00315 	stw	r7,12(sp)
    4eb8:	2039883a 	mov	fp,r4
    4ebc:	3023883a 	mov	r17,r6
    4ec0:	2825883a 	mov	r18,r5
    4ec4:	dc002417 	ldw	r16,144(sp)
    4ec8:	3027883a 	mov	r19,r6
    4ecc:	10000826 	beq	r2,zero,4ef0 <_dtoa_r+0x6c>
    4ed0:	21801117 	ldw	r6,68(r4)
    4ed4:	00c00044 	movi	r3,1
    4ed8:	100b883a 	mov	r5,r2
    4edc:	1986983a 	sll	r3,r3,r6
    4ee0:	11800115 	stw	r6,4(r2)
    4ee4:	10c00215 	stw	r3,8(r2)
    4ee8:	0007dbc0 	call	7dbc <_Bfree>
    4eec:	e0001015 	stw	zero,64(fp)
    4ef0:	88002e16 	blt	r17,zero,4fac <_dtoa_r+0x128>
    4ef4:	80000015 	stw	zero,0(r16)
    4ef8:	889ffc2c 	andhi	r2,r17,32752
    4efc:	00dffc34 	movhi	r3,32752
    4f00:	10c01c26 	beq	r2,r3,4f74 <_dtoa_r+0xf0>
    4f04:	000d883a 	mov	r6,zero
    4f08:	000f883a 	mov	r7,zero
    4f0c:	9009883a 	mov	r4,r18
    4f10:	980b883a 	mov	r5,r19
    4f14:	000d0c00 	call	d0c0 <__eqdf2>
    4f18:	10002b1e 	bne	r2,zero,4fc8 <_dtoa_r+0x144>
    4f1c:	d9c02317 	ldw	r7,140(sp)
    4f20:	00800044 	movi	r2,1
    4f24:	38800015 	stw	r2,0(r7)
    4f28:	d8802517 	ldw	r2,148(sp)
    4f2c:	10019e26 	beq	r2,zero,55a8 <_dtoa_r+0x724>
    4f30:	d8c02517 	ldw	r3,148(sp)
    4f34:	00800074 	movhi	r2,1
    4f38:	1080f944 	addi	r2,r2,997
    4f3c:	18800015 	stw	r2,0(r3)
    4f40:	10bfffc4 	addi	r2,r2,-1
    4f44:	dfc02117 	ldw	ra,132(sp)
    4f48:	df002017 	ldw	fp,128(sp)
    4f4c:	ddc01f17 	ldw	r23,124(sp)
    4f50:	dd801e17 	ldw	r22,120(sp)
    4f54:	dd401d17 	ldw	r21,116(sp)
    4f58:	dd001c17 	ldw	r20,112(sp)
    4f5c:	dcc01b17 	ldw	r19,108(sp)
    4f60:	dc801a17 	ldw	r18,104(sp)
    4f64:	dc401917 	ldw	r17,100(sp)
    4f68:	dc001817 	ldw	r16,96(sp)
    4f6c:	dec02204 	addi	sp,sp,136
    4f70:	f800283a 	ret
    4f74:	d8c02317 	ldw	r3,140(sp)
    4f78:	0089c3c4 	movi	r2,9999
    4f7c:	18800015 	stw	r2,0(r3)
    4f80:	90017726 	beq	r18,zero,5560 <_dtoa_r+0x6dc>
    4f84:	00800074 	movhi	r2,1
    4f88:	10810504 	addi	r2,r2,1044
    4f8c:	d9002517 	ldw	r4,148(sp)
    4f90:	203fec26 	beq	r4,zero,4f44 <__alt_data_end+0xff004f44>
    4f94:	10c000c7 	ldb	r3,3(r2)
    4f98:	1801781e 	bne	r3,zero,557c <_dtoa_r+0x6f8>
    4f9c:	10c000c4 	addi	r3,r2,3
    4fa0:	d9802517 	ldw	r6,148(sp)
    4fa4:	30c00015 	stw	r3,0(r6)
    4fa8:	003fe606 	br	4f44 <__alt_data_end+0xff004f44>
    4fac:	04e00034 	movhi	r19,32768
    4fb0:	9cffffc4 	addi	r19,r19,-1
    4fb4:	00800044 	movi	r2,1
    4fb8:	8ce6703a 	and	r19,r17,r19
    4fbc:	80800015 	stw	r2,0(r16)
    4fc0:	9823883a 	mov	r17,r19
    4fc4:	003fcc06 	br	4ef8 <__alt_data_end+0xff004ef8>
    4fc8:	d8800204 	addi	r2,sp,8
    4fcc:	d8800015 	stw	r2,0(sp)
    4fd0:	d9c00104 	addi	r7,sp,4
    4fd4:	900b883a 	mov	r5,r18
    4fd8:	980d883a 	mov	r6,r19
    4fdc:	e009883a 	mov	r4,fp
    4fe0:	8820d53a 	srli	r16,r17,20
    4fe4:	00089a80 	call	89a8 <__d2b>
    4fe8:	d8800915 	stw	r2,36(sp)
    4fec:	8001651e 	bne	r16,zero,5584 <_dtoa_r+0x700>
    4ff0:	dd800217 	ldw	r22,8(sp)
    4ff4:	dc000117 	ldw	r16,4(sp)
    4ff8:	00800804 	movi	r2,32
    4ffc:	b421883a 	add	r16,r22,r16
    5000:	80c10c84 	addi	r3,r16,1074
    5004:	10c2d10e 	bge	r2,r3,5b4c <_dtoa_r+0xcc8>
    5008:	00801004 	movi	r2,64
    500c:	81010484 	addi	r4,r16,1042
    5010:	10c7c83a 	sub	r3,r2,r3
    5014:	9108d83a 	srl	r4,r18,r4
    5018:	88e2983a 	sll	r17,r17,r3
    501c:	2448b03a 	or	r4,r4,r17
    5020:	000e4880 	call	e488 <__floatunsidf>
    5024:	017f8434 	movhi	r5,65040
    5028:	01800044 	movi	r6,1
    502c:	1009883a 	mov	r4,r2
    5030:	194b883a 	add	r5,r3,r5
    5034:	843fffc4 	addi	r16,r16,-1
    5038:	d9801115 	stw	r6,68(sp)
    503c:	000d883a 	mov	r6,zero
    5040:	01cffe34 	movhi	r7,16376
    5044:	000da300 	call	da30 <__subdf3>
    5048:	0198dbf4 	movhi	r6,25455
    504c:	01cff4f4 	movhi	r7,16339
    5050:	3190d844 	addi	r6,r6,17249
    5054:	39e1e9c4 	addi	r7,r7,-30809
    5058:	1009883a 	mov	r4,r2
    505c:	180b883a 	mov	r5,r3
    5060:	000d3180 	call	d318 <__muldf3>
    5064:	01a2d874 	movhi	r6,35681
    5068:	01cff1f4 	movhi	r7,16327
    506c:	31b22cc4 	addi	r6,r6,-14157
    5070:	39e28a04 	addi	r7,r7,-30168
    5074:	180b883a 	mov	r5,r3
    5078:	1009883a 	mov	r4,r2
    507c:	000bf2c0 	call	bf2c <__adddf3>
    5080:	8009883a 	mov	r4,r16
    5084:	1029883a 	mov	r20,r2
    5088:	1823883a 	mov	r17,r3
    508c:	000e3ac0 	call	e3ac <__floatsidf>
    5090:	019427f4 	movhi	r6,20639
    5094:	01cff4f4 	movhi	r7,16339
    5098:	319e7ec4 	addi	r6,r6,31227
    509c:	39d104c4 	addi	r7,r7,17427
    50a0:	1009883a 	mov	r4,r2
    50a4:	180b883a 	mov	r5,r3
    50a8:	000d3180 	call	d318 <__muldf3>
    50ac:	100d883a 	mov	r6,r2
    50b0:	180f883a 	mov	r7,r3
    50b4:	a009883a 	mov	r4,r20
    50b8:	880b883a 	mov	r5,r17
    50bc:	000bf2c0 	call	bf2c <__adddf3>
    50c0:	1009883a 	mov	r4,r2
    50c4:	180b883a 	mov	r5,r3
    50c8:	1029883a 	mov	r20,r2
    50cc:	1823883a 	mov	r17,r3
    50d0:	000e32c0 	call	e32c <__fixdfsi>
    50d4:	000d883a 	mov	r6,zero
    50d8:	000f883a 	mov	r7,zero
    50dc:	a009883a 	mov	r4,r20
    50e0:	880b883a 	mov	r5,r17
    50e4:	d8800515 	stw	r2,20(sp)
    50e8:	000d2240 	call	d224 <__ledf2>
    50ec:	10028716 	blt	r2,zero,5b0c <_dtoa_r+0xc88>
    50f0:	d8c00517 	ldw	r3,20(sp)
    50f4:	00800584 	movi	r2,22
    50f8:	10c27536 	bltu	r2,r3,5ad0 <_dtoa_r+0xc4c>
    50fc:	180490fa 	slli	r2,r3,3
    5100:	00c00074 	movhi	r3,1
    5104:	18c12104 	addi	r3,r3,1156
    5108:	1885883a 	add	r2,r3,r2
    510c:	11000017 	ldw	r4,0(r2)
    5110:	11400117 	ldw	r5,4(r2)
    5114:	900d883a 	mov	r6,r18
    5118:	980f883a 	mov	r7,r19
    511c:	000d1480 	call	d148 <__gedf2>
    5120:	00828d0e 	bge	zero,r2,5b58 <_dtoa_r+0xcd4>
    5124:	d9000517 	ldw	r4,20(sp)
    5128:	d8000e15 	stw	zero,56(sp)
    512c:	213fffc4 	addi	r4,r4,-1
    5130:	d9000515 	stw	r4,20(sp)
    5134:	b42dc83a 	sub	r22,r22,r16
    5138:	b5bfffc4 	addi	r22,r22,-1
    513c:	b0026f16 	blt	r22,zero,5afc <_dtoa_r+0xc78>
    5140:	d8000815 	stw	zero,32(sp)
    5144:	d9c00517 	ldw	r7,20(sp)
    5148:	38026416 	blt	r7,zero,5adc <_dtoa_r+0xc58>
    514c:	b1ed883a 	add	r22,r22,r7
    5150:	d9c00d15 	stw	r7,52(sp)
    5154:	d8000a15 	stw	zero,40(sp)
    5158:	d9800317 	ldw	r6,12(sp)
    515c:	00800244 	movi	r2,9
    5160:	11811436 	bltu	r2,r6,55b4 <_dtoa_r+0x730>
    5164:	00800144 	movi	r2,5
    5168:	1184e10e 	bge	r2,r6,64f0 <_dtoa_r+0x166c>
    516c:	31bfff04 	addi	r6,r6,-4
    5170:	d9800315 	stw	r6,12(sp)
    5174:	0023883a 	mov	r17,zero
    5178:	d9800317 	ldw	r6,12(sp)
    517c:	008000c4 	movi	r2,3
    5180:	30836726 	beq	r6,r2,5f20 <_dtoa_r+0x109c>
    5184:	1183410e 	bge	r2,r6,5e8c <_dtoa_r+0x1008>
    5188:	d9c00317 	ldw	r7,12(sp)
    518c:	00800104 	movi	r2,4
    5190:	38827c26 	beq	r7,r2,5b84 <_dtoa_r+0xd00>
    5194:	00800144 	movi	r2,5
    5198:	3884c41e 	bne	r7,r2,64ac <_dtoa_r+0x1628>
    519c:	00800044 	movi	r2,1
    51a0:	d8800b15 	stw	r2,44(sp)
    51a4:	d8c00517 	ldw	r3,20(sp)
    51a8:	d9002217 	ldw	r4,136(sp)
    51ac:	1907883a 	add	r3,r3,r4
    51b0:	19800044 	addi	r6,r3,1
    51b4:	d8c00c15 	stw	r3,48(sp)
    51b8:	d9800615 	stw	r6,24(sp)
    51bc:	0183a40e 	bge	zero,r6,6050 <_dtoa_r+0x11cc>
    51c0:	d9800617 	ldw	r6,24(sp)
    51c4:	3021883a 	mov	r16,r6
    51c8:	e0001115 	stw	zero,68(fp)
    51cc:	008005c4 	movi	r2,23
    51d0:	1184c92e 	bgeu	r2,r6,64f8 <_dtoa_r+0x1674>
    51d4:	00c00044 	movi	r3,1
    51d8:	00800104 	movi	r2,4
    51dc:	1085883a 	add	r2,r2,r2
    51e0:	11000504 	addi	r4,r2,20
    51e4:	180b883a 	mov	r5,r3
    51e8:	18c00044 	addi	r3,r3,1
    51ec:	313ffb2e 	bgeu	r6,r4,51dc <__alt_data_end+0xff0051dc>
    51f0:	e1401115 	stw	r5,68(fp)
    51f4:	e009883a 	mov	r4,fp
    51f8:	0007d140 	call	7d14 <_Balloc>
    51fc:	d8800715 	stw	r2,28(sp)
    5200:	e0801015 	stw	r2,64(fp)
    5204:	00800384 	movi	r2,14
    5208:	1400f736 	bltu	r2,r16,55e8 <_dtoa_r+0x764>
    520c:	8800f626 	beq	r17,zero,55e8 <_dtoa_r+0x764>
    5210:	d9c00517 	ldw	r7,20(sp)
    5214:	01c39a0e 	bge	zero,r7,6080 <_dtoa_r+0x11fc>
    5218:	388003cc 	andi	r2,r7,15
    521c:	100490fa 	slli	r2,r2,3
    5220:	382bd13a 	srai	r21,r7,4
    5224:	00c00074 	movhi	r3,1
    5228:	18c12104 	addi	r3,r3,1156
    522c:	1885883a 	add	r2,r3,r2
    5230:	a8c0040c 	andi	r3,r21,16
    5234:	12400017 	ldw	r9,0(r2)
    5238:	12000117 	ldw	r8,4(r2)
    523c:	18037926 	beq	r3,zero,6024 <_dtoa_r+0x11a0>
    5240:	00800074 	movhi	r2,1
    5244:	10811704 	addi	r2,r2,1116
    5248:	11800817 	ldw	r6,32(r2)
    524c:	11c00917 	ldw	r7,36(r2)
    5250:	9009883a 	mov	r4,r18
    5254:	980b883a 	mov	r5,r19
    5258:	da001715 	stw	r8,92(sp)
    525c:	da401615 	stw	r9,88(sp)
    5260:	000c7d80 	call	c7d8 <__divdf3>
    5264:	da001717 	ldw	r8,92(sp)
    5268:	da401617 	ldw	r9,88(sp)
    526c:	ad4003cc 	andi	r21,r21,15
    5270:	040000c4 	movi	r16,3
    5274:	1023883a 	mov	r17,r2
    5278:	1829883a 	mov	r20,r3
    527c:	a8001126 	beq	r21,zero,52c4 <_dtoa_r+0x440>
    5280:	05c00074 	movhi	r23,1
    5284:	bdc11704 	addi	r23,r23,1116
    5288:	4805883a 	mov	r2,r9
    528c:	4007883a 	mov	r3,r8
    5290:	a980004c 	andi	r6,r21,1
    5294:	1009883a 	mov	r4,r2
    5298:	a82bd07a 	srai	r21,r21,1
    529c:	180b883a 	mov	r5,r3
    52a0:	30000426 	beq	r6,zero,52b4 <_dtoa_r+0x430>
    52a4:	b9800017 	ldw	r6,0(r23)
    52a8:	b9c00117 	ldw	r7,4(r23)
    52ac:	84000044 	addi	r16,r16,1
    52b0:	000d3180 	call	d318 <__muldf3>
    52b4:	bdc00204 	addi	r23,r23,8
    52b8:	a83ff51e 	bne	r21,zero,5290 <__alt_data_end+0xff005290>
    52bc:	1013883a 	mov	r9,r2
    52c0:	1811883a 	mov	r8,r3
    52c4:	480d883a 	mov	r6,r9
    52c8:	400f883a 	mov	r7,r8
    52cc:	8809883a 	mov	r4,r17
    52d0:	a00b883a 	mov	r5,r20
    52d4:	000c7d80 	call	c7d8 <__divdf3>
    52d8:	d8800f15 	stw	r2,60(sp)
    52dc:	d8c01015 	stw	r3,64(sp)
    52e0:	d8c00e17 	ldw	r3,56(sp)
    52e4:	18000626 	beq	r3,zero,5300 <_dtoa_r+0x47c>
    52e8:	d9000f17 	ldw	r4,60(sp)
    52ec:	d9401017 	ldw	r5,64(sp)
    52f0:	000d883a 	mov	r6,zero
    52f4:	01cffc34 	movhi	r7,16368
    52f8:	000d2240 	call	d224 <__ledf2>
    52fc:	10040b16 	blt	r2,zero,632c <_dtoa_r+0x14a8>
    5300:	8009883a 	mov	r4,r16
    5304:	000e3ac0 	call	e3ac <__floatsidf>
    5308:	d9800f17 	ldw	r6,60(sp)
    530c:	d9c01017 	ldw	r7,64(sp)
    5310:	1009883a 	mov	r4,r2
    5314:	180b883a 	mov	r5,r3
    5318:	000d3180 	call	d318 <__muldf3>
    531c:	000d883a 	mov	r6,zero
    5320:	01d00734 	movhi	r7,16412
    5324:	1009883a 	mov	r4,r2
    5328:	180b883a 	mov	r5,r3
    532c:	000bf2c0 	call	bf2c <__adddf3>
    5330:	1021883a 	mov	r16,r2
    5334:	d8800617 	ldw	r2,24(sp)
    5338:	047f3034 	movhi	r17,64704
    533c:	1c63883a 	add	r17,r3,r17
    5340:	10031826 	beq	r2,zero,5fa4 <_dtoa_r+0x1120>
    5344:	d8c00517 	ldw	r3,20(sp)
    5348:	db000617 	ldw	r12,24(sp)
    534c:	d8c01315 	stw	r3,76(sp)
    5350:	d9000b17 	ldw	r4,44(sp)
    5354:	20038f26 	beq	r4,zero,6194 <_dtoa_r+0x1310>
    5358:	60bfffc4 	addi	r2,r12,-1
    535c:	100490fa 	slli	r2,r2,3
    5360:	00c00074 	movhi	r3,1
    5364:	18c12104 	addi	r3,r3,1156
    5368:	1885883a 	add	r2,r3,r2
    536c:	11800017 	ldw	r6,0(r2)
    5370:	11c00117 	ldw	r7,4(r2)
    5374:	d8800717 	ldw	r2,28(sp)
    5378:	0009883a 	mov	r4,zero
    537c:	014ff834 	movhi	r5,16352
    5380:	db001615 	stw	r12,88(sp)
    5384:	15c00044 	addi	r23,r2,1
    5388:	000c7d80 	call	c7d8 <__divdf3>
    538c:	800d883a 	mov	r6,r16
    5390:	880f883a 	mov	r7,r17
    5394:	1009883a 	mov	r4,r2
    5398:	180b883a 	mov	r5,r3
    539c:	000da300 	call	da30 <__subdf3>
    53a0:	d9401017 	ldw	r5,64(sp)
    53a4:	d9000f17 	ldw	r4,60(sp)
    53a8:	102b883a 	mov	r21,r2
    53ac:	d8c01215 	stw	r3,72(sp)
    53b0:	000e32c0 	call	e32c <__fixdfsi>
    53b4:	1009883a 	mov	r4,r2
    53b8:	1029883a 	mov	r20,r2
    53bc:	000e3ac0 	call	e3ac <__floatsidf>
    53c0:	d9000f17 	ldw	r4,60(sp)
    53c4:	d9401017 	ldw	r5,64(sp)
    53c8:	100d883a 	mov	r6,r2
    53cc:	180f883a 	mov	r7,r3
    53d0:	000da300 	call	da30 <__subdf3>
    53d4:	1823883a 	mov	r17,r3
    53d8:	d8c00717 	ldw	r3,28(sp)
    53dc:	d9401217 	ldw	r5,72(sp)
    53e0:	a2000c04 	addi	r8,r20,48
    53e4:	1021883a 	mov	r16,r2
    53e8:	1a000005 	stb	r8,0(r3)
    53ec:	800d883a 	mov	r6,r16
    53f0:	880f883a 	mov	r7,r17
    53f4:	a809883a 	mov	r4,r21
    53f8:	4029883a 	mov	r20,r8
    53fc:	000d1480 	call	d148 <__gedf2>
    5400:	00841d16 	blt	zero,r2,6478 <_dtoa_r+0x15f4>
    5404:	800d883a 	mov	r6,r16
    5408:	880f883a 	mov	r7,r17
    540c:	0009883a 	mov	r4,zero
    5410:	014ffc34 	movhi	r5,16368
    5414:	000da300 	call	da30 <__subdf3>
    5418:	d9401217 	ldw	r5,72(sp)
    541c:	100d883a 	mov	r6,r2
    5420:	180f883a 	mov	r7,r3
    5424:	a809883a 	mov	r4,r21
    5428:	000d1480 	call	d148 <__gedf2>
    542c:	db001617 	ldw	r12,88(sp)
    5430:	00840e16 	blt	zero,r2,646c <_dtoa_r+0x15e8>
    5434:	00800044 	movi	r2,1
    5438:	13006b0e 	bge	r2,r12,55e8 <_dtoa_r+0x764>
    543c:	d9000717 	ldw	r4,28(sp)
    5440:	dd800f15 	stw	r22,60(sp)
    5444:	dcc01015 	stw	r19,64(sp)
    5448:	2319883a 	add	r12,r4,r12
    544c:	dcc01217 	ldw	r19,72(sp)
    5450:	602d883a 	mov	r22,r12
    5454:	dc801215 	stw	r18,72(sp)
    5458:	b825883a 	mov	r18,r23
    545c:	00000906 	br	5484 <_dtoa_r+0x600>
    5460:	000da300 	call	da30 <__subdf3>
    5464:	a80d883a 	mov	r6,r21
    5468:	980f883a 	mov	r7,r19
    546c:	1009883a 	mov	r4,r2
    5470:	180b883a 	mov	r5,r3
    5474:	000d2240 	call	d224 <__ledf2>
    5478:	1003e816 	blt	r2,zero,641c <_dtoa_r+0x1598>
    547c:	b825883a 	mov	r18,r23
    5480:	bd83e926 	beq	r23,r22,6428 <_dtoa_r+0x15a4>
    5484:	a809883a 	mov	r4,r21
    5488:	980b883a 	mov	r5,r19
    548c:	000d883a 	mov	r6,zero
    5490:	01d00934 	movhi	r7,16420
    5494:	000d3180 	call	d318 <__muldf3>
    5498:	000d883a 	mov	r6,zero
    549c:	01d00934 	movhi	r7,16420
    54a0:	8009883a 	mov	r4,r16
    54a4:	880b883a 	mov	r5,r17
    54a8:	102b883a 	mov	r21,r2
    54ac:	1827883a 	mov	r19,r3
    54b0:	000d3180 	call	d318 <__muldf3>
    54b4:	180b883a 	mov	r5,r3
    54b8:	1009883a 	mov	r4,r2
    54bc:	1821883a 	mov	r16,r3
    54c0:	1023883a 	mov	r17,r2
    54c4:	000e32c0 	call	e32c <__fixdfsi>
    54c8:	1009883a 	mov	r4,r2
    54cc:	1029883a 	mov	r20,r2
    54d0:	000e3ac0 	call	e3ac <__floatsidf>
    54d4:	8809883a 	mov	r4,r17
    54d8:	800b883a 	mov	r5,r16
    54dc:	100d883a 	mov	r6,r2
    54e0:	180f883a 	mov	r7,r3
    54e4:	000da300 	call	da30 <__subdf3>
    54e8:	a5000c04 	addi	r20,r20,48
    54ec:	a80d883a 	mov	r6,r21
    54f0:	980f883a 	mov	r7,r19
    54f4:	1009883a 	mov	r4,r2
    54f8:	180b883a 	mov	r5,r3
    54fc:	95000005 	stb	r20,0(r18)
    5500:	1021883a 	mov	r16,r2
    5504:	1823883a 	mov	r17,r3
    5508:	000d2240 	call	d224 <__ledf2>
    550c:	bdc00044 	addi	r23,r23,1
    5510:	800d883a 	mov	r6,r16
    5514:	880f883a 	mov	r7,r17
    5518:	0009883a 	mov	r4,zero
    551c:	014ffc34 	movhi	r5,16368
    5520:	103fcf0e 	bge	r2,zero,5460 <__alt_data_end+0xff005460>
    5524:	d8c01317 	ldw	r3,76(sp)
    5528:	d8c00515 	stw	r3,20(sp)
    552c:	d9400917 	ldw	r5,36(sp)
    5530:	e009883a 	mov	r4,fp
    5534:	0007dbc0 	call	7dbc <_Bfree>
    5538:	d9000517 	ldw	r4,20(sp)
    553c:	d9802317 	ldw	r6,140(sp)
    5540:	d9c02517 	ldw	r7,148(sp)
    5544:	b8000005 	stb	zero,0(r23)
    5548:	20800044 	addi	r2,r4,1
    554c:	30800015 	stw	r2,0(r6)
    5550:	3802aa26 	beq	r7,zero,5ffc <_dtoa_r+0x1178>
    5554:	3dc00015 	stw	r23,0(r7)
    5558:	d8800717 	ldw	r2,28(sp)
    555c:	003e7906 	br	4f44 <__alt_data_end+0xff004f44>
    5560:	00800434 	movhi	r2,16
    5564:	10bfffc4 	addi	r2,r2,-1
    5568:	88a2703a 	and	r17,r17,r2
    556c:	883e851e 	bne	r17,zero,4f84 <__alt_data_end+0xff004f84>
    5570:	00800074 	movhi	r2,1
    5574:	10810204 	addi	r2,r2,1032
    5578:	003e8406 	br	4f8c <__alt_data_end+0xff004f8c>
    557c:	10c00204 	addi	r3,r2,8
    5580:	003e8706 	br	4fa0 <__alt_data_end+0xff004fa0>
    5584:	01400434 	movhi	r5,16
    5588:	297fffc4 	addi	r5,r5,-1
    558c:	994a703a 	and	r5,r19,r5
    5590:	9009883a 	mov	r4,r18
    5594:	843f0044 	addi	r16,r16,-1023
    5598:	294ffc34 	orhi	r5,r5,16368
    559c:	dd800217 	ldw	r22,8(sp)
    55a0:	d8001115 	stw	zero,68(sp)
    55a4:	003ea506 	br	503c <__alt_data_end+0xff00503c>
    55a8:	00800074 	movhi	r2,1
    55ac:	1080f904 	addi	r2,r2,996
    55b0:	003e6406 	br	4f44 <__alt_data_end+0xff004f44>
    55b4:	e0001115 	stw	zero,68(fp)
    55b8:	000b883a 	mov	r5,zero
    55bc:	e009883a 	mov	r4,fp
    55c0:	0007d140 	call	7d14 <_Balloc>
    55c4:	01bfffc4 	movi	r6,-1
    55c8:	01c00044 	movi	r7,1
    55cc:	d8800715 	stw	r2,28(sp)
    55d0:	d9800c15 	stw	r6,48(sp)
    55d4:	e0801015 	stw	r2,64(fp)
    55d8:	d8000315 	stw	zero,12(sp)
    55dc:	d9c00b15 	stw	r7,44(sp)
    55e0:	d9800615 	stw	r6,24(sp)
    55e4:	d8002215 	stw	zero,136(sp)
    55e8:	d8800117 	ldw	r2,4(sp)
    55ec:	10008916 	blt	r2,zero,5814 <_dtoa_r+0x990>
    55f0:	d9000517 	ldw	r4,20(sp)
    55f4:	00c00384 	movi	r3,14
    55f8:	19008616 	blt	r3,r4,5814 <_dtoa_r+0x990>
    55fc:	200490fa 	slli	r2,r4,3
    5600:	00c00074 	movhi	r3,1
    5604:	d9802217 	ldw	r6,136(sp)
    5608:	18c12104 	addi	r3,r3,1156
    560c:	1885883a 	add	r2,r3,r2
    5610:	14000017 	ldw	r16,0(r2)
    5614:	14400117 	ldw	r17,4(r2)
    5618:	30016316 	blt	r6,zero,5ba8 <_dtoa_r+0xd24>
    561c:	800d883a 	mov	r6,r16
    5620:	880f883a 	mov	r7,r17
    5624:	9009883a 	mov	r4,r18
    5628:	980b883a 	mov	r5,r19
    562c:	000c7d80 	call	c7d8 <__divdf3>
    5630:	180b883a 	mov	r5,r3
    5634:	1009883a 	mov	r4,r2
    5638:	000e32c0 	call	e32c <__fixdfsi>
    563c:	1009883a 	mov	r4,r2
    5640:	102b883a 	mov	r21,r2
    5644:	000e3ac0 	call	e3ac <__floatsidf>
    5648:	800d883a 	mov	r6,r16
    564c:	880f883a 	mov	r7,r17
    5650:	1009883a 	mov	r4,r2
    5654:	180b883a 	mov	r5,r3
    5658:	000d3180 	call	d318 <__muldf3>
    565c:	100d883a 	mov	r6,r2
    5660:	180f883a 	mov	r7,r3
    5664:	9009883a 	mov	r4,r18
    5668:	980b883a 	mov	r5,r19
    566c:	000da300 	call	da30 <__subdf3>
    5670:	d9c00717 	ldw	r7,28(sp)
    5674:	1009883a 	mov	r4,r2
    5678:	a8800c04 	addi	r2,r21,48
    567c:	38800005 	stb	r2,0(r7)
    5680:	3dc00044 	addi	r23,r7,1
    5684:	d9c00617 	ldw	r7,24(sp)
    5688:	01800044 	movi	r6,1
    568c:	180b883a 	mov	r5,r3
    5690:	2005883a 	mov	r2,r4
    5694:	39803826 	beq	r7,r6,5778 <_dtoa_r+0x8f4>
    5698:	000d883a 	mov	r6,zero
    569c:	01d00934 	movhi	r7,16420
    56a0:	000d3180 	call	d318 <__muldf3>
    56a4:	000d883a 	mov	r6,zero
    56a8:	000f883a 	mov	r7,zero
    56ac:	1009883a 	mov	r4,r2
    56b0:	180b883a 	mov	r5,r3
    56b4:	1025883a 	mov	r18,r2
    56b8:	1827883a 	mov	r19,r3
    56bc:	000d0c00 	call	d0c0 <__eqdf2>
    56c0:	103f9a26 	beq	r2,zero,552c <__alt_data_end+0xff00552c>
    56c4:	d9c00617 	ldw	r7,24(sp)
    56c8:	d8c00717 	ldw	r3,28(sp)
    56cc:	b829883a 	mov	r20,r23
    56d0:	38bfffc4 	addi	r2,r7,-1
    56d4:	18ad883a 	add	r22,r3,r2
    56d8:	00000a06 	br	5704 <_dtoa_r+0x880>
    56dc:	000d3180 	call	d318 <__muldf3>
    56e0:	000d883a 	mov	r6,zero
    56e4:	000f883a 	mov	r7,zero
    56e8:	1009883a 	mov	r4,r2
    56ec:	180b883a 	mov	r5,r3
    56f0:	1025883a 	mov	r18,r2
    56f4:	1827883a 	mov	r19,r3
    56f8:	b829883a 	mov	r20,r23
    56fc:	000d0c00 	call	d0c0 <__eqdf2>
    5700:	103f8a26 	beq	r2,zero,552c <__alt_data_end+0xff00552c>
    5704:	800d883a 	mov	r6,r16
    5708:	880f883a 	mov	r7,r17
    570c:	9009883a 	mov	r4,r18
    5710:	980b883a 	mov	r5,r19
    5714:	000c7d80 	call	c7d8 <__divdf3>
    5718:	180b883a 	mov	r5,r3
    571c:	1009883a 	mov	r4,r2
    5720:	000e32c0 	call	e32c <__fixdfsi>
    5724:	1009883a 	mov	r4,r2
    5728:	102b883a 	mov	r21,r2
    572c:	000e3ac0 	call	e3ac <__floatsidf>
    5730:	800d883a 	mov	r6,r16
    5734:	880f883a 	mov	r7,r17
    5738:	1009883a 	mov	r4,r2
    573c:	180b883a 	mov	r5,r3
    5740:	000d3180 	call	d318 <__muldf3>
    5744:	100d883a 	mov	r6,r2
    5748:	180f883a 	mov	r7,r3
    574c:	9009883a 	mov	r4,r18
    5750:	980b883a 	mov	r5,r19
    5754:	000da300 	call	da30 <__subdf3>
    5758:	aa000c04 	addi	r8,r21,48
    575c:	a2000005 	stb	r8,0(r20)
    5760:	000d883a 	mov	r6,zero
    5764:	01d00934 	movhi	r7,16420
    5768:	1009883a 	mov	r4,r2
    576c:	180b883a 	mov	r5,r3
    5770:	a5c00044 	addi	r23,r20,1
    5774:	b53fd91e 	bne	r22,r20,56dc <__alt_data_end+0xff0056dc>
    5778:	100d883a 	mov	r6,r2
    577c:	180f883a 	mov	r7,r3
    5780:	1009883a 	mov	r4,r2
    5784:	180b883a 	mov	r5,r3
    5788:	000bf2c0 	call	bf2c <__adddf3>
    578c:	100d883a 	mov	r6,r2
    5790:	180f883a 	mov	r7,r3
    5794:	8009883a 	mov	r4,r16
    5798:	880b883a 	mov	r5,r17
    579c:	1027883a 	mov	r19,r2
    57a0:	1825883a 	mov	r18,r3
    57a4:	000d2240 	call	d224 <__ledf2>
    57a8:	10000816 	blt	r2,zero,57cc <_dtoa_r+0x948>
    57ac:	980d883a 	mov	r6,r19
    57b0:	900f883a 	mov	r7,r18
    57b4:	8009883a 	mov	r4,r16
    57b8:	880b883a 	mov	r5,r17
    57bc:	000d0c00 	call	d0c0 <__eqdf2>
    57c0:	103f5a1e 	bne	r2,zero,552c <__alt_data_end+0xff00552c>
    57c4:	ad40004c 	andi	r21,r21,1
    57c8:	a83f5826 	beq	r21,zero,552c <__alt_data_end+0xff00552c>
    57cc:	bd3fffc3 	ldbu	r20,-1(r23)
    57d0:	b8bfffc4 	addi	r2,r23,-1
    57d4:	1007883a 	mov	r3,r2
    57d8:	01400e44 	movi	r5,57
    57dc:	d9800717 	ldw	r6,28(sp)
    57e0:	00000506 	br	57f8 <_dtoa_r+0x974>
    57e4:	18ffffc4 	addi	r3,r3,-1
    57e8:	11824726 	beq	r2,r6,6108 <_dtoa_r+0x1284>
    57ec:	1d000003 	ldbu	r20,0(r3)
    57f0:	102f883a 	mov	r23,r2
    57f4:	10bfffc4 	addi	r2,r2,-1
    57f8:	a1003fcc 	andi	r4,r20,255
    57fc:	2100201c 	xori	r4,r4,128
    5800:	213fe004 	addi	r4,r4,-128
    5804:	217ff726 	beq	r4,r5,57e4 <__alt_data_end+0xff0057e4>
    5808:	a2000044 	addi	r8,r20,1
    580c:	12000005 	stb	r8,0(r2)
    5810:	003f4606 	br	552c <__alt_data_end+0xff00552c>
    5814:	d9000b17 	ldw	r4,44(sp)
    5818:	2000c826 	beq	r4,zero,5b3c <_dtoa_r+0xcb8>
    581c:	d9800317 	ldw	r6,12(sp)
    5820:	00c00044 	movi	r3,1
    5824:	1980f90e 	bge	r3,r6,5c0c <_dtoa_r+0xd88>
    5828:	d8800617 	ldw	r2,24(sp)
    582c:	d8c00a17 	ldw	r3,40(sp)
    5830:	157fffc4 	addi	r21,r2,-1
    5834:	1d41f316 	blt	r3,r21,6004 <_dtoa_r+0x1180>
    5838:	1d6bc83a 	sub	r21,r3,r21
    583c:	d9c00617 	ldw	r7,24(sp)
    5840:	3802aa16 	blt	r7,zero,62ec <_dtoa_r+0x1468>
    5844:	dd000817 	ldw	r20,32(sp)
    5848:	d8800617 	ldw	r2,24(sp)
    584c:	d8c00817 	ldw	r3,32(sp)
    5850:	01400044 	movi	r5,1
    5854:	e009883a 	mov	r4,fp
    5858:	1887883a 	add	r3,r3,r2
    585c:	d8c00815 	stw	r3,32(sp)
    5860:	b0ad883a 	add	r22,r22,r2
    5864:	00081200 	call	8120 <__i2b>
    5868:	1023883a 	mov	r17,r2
    586c:	a0000826 	beq	r20,zero,5890 <_dtoa_r+0xa0c>
    5870:	0580070e 	bge	zero,r22,5890 <_dtoa_r+0xa0c>
    5874:	a005883a 	mov	r2,r20
    5878:	b500b916 	blt	r22,r20,5b60 <_dtoa_r+0xcdc>
    587c:	d9000817 	ldw	r4,32(sp)
    5880:	a0a9c83a 	sub	r20,r20,r2
    5884:	b0adc83a 	sub	r22,r22,r2
    5888:	2089c83a 	sub	r4,r4,r2
    588c:	d9000815 	stw	r4,32(sp)
    5890:	d9800a17 	ldw	r6,40(sp)
    5894:	0181810e 	bge	zero,r6,5e9c <_dtoa_r+0x1018>
    5898:	d9c00b17 	ldw	r7,44(sp)
    589c:	3800b326 	beq	r7,zero,5b6c <_dtoa_r+0xce8>
    58a0:	a800b226 	beq	r21,zero,5b6c <_dtoa_r+0xce8>
    58a4:	880b883a 	mov	r5,r17
    58a8:	a80d883a 	mov	r6,r21
    58ac:	e009883a 	mov	r4,fp
    58b0:	00083540 	call	8354 <__pow5mult>
    58b4:	d9800917 	ldw	r6,36(sp)
    58b8:	100b883a 	mov	r5,r2
    58bc:	e009883a 	mov	r4,fp
    58c0:	1023883a 	mov	r17,r2
    58c4:	000815c0 	call	815c <__multiply>
    58c8:	1021883a 	mov	r16,r2
    58cc:	d8800a17 	ldw	r2,40(sp)
    58d0:	d9400917 	ldw	r5,36(sp)
    58d4:	e009883a 	mov	r4,fp
    58d8:	1545c83a 	sub	r2,r2,r21
    58dc:	d8800a15 	stw	r2,40(sp)
    58e0:	0007dbc0 	call	7dbc <_Bfree>
    58e4:	d8c00a17 	ldw	r3,40(sp)
    58e8:	18009f1e 	bne	r3,zero,5b68 <_dtoa_r+0xce4>
    58ec:	05c00044 	movi	r23,1
    58f0:	e009883a 	mov	r4,fp
    58f4:	b80b883a 	mov	r5,r23
    58f8:	00081200 	call	8120 <__i2b>
    58fc:	d9000d17 	ldw	r4,52(sp)
    5900:	102b883a 	mov	r21,r2
    5904:	2000ce26 	beq	r4,zero,5c40 <_dtoa_r+0xdbc>
    5908:	200d883a 	mov	r6,r4
    590c:	100b883a 	mov	r5,r2
    5910:	e009883a 	mov	r4,fp
    5914:	00083540 	call	8354 <__pow5mult>
    5918:	d9800317 	ldw	r6,12(sp)
    591c:	102b883a 	mov	r21,r2
    5920:	b981810e 	bge	r23,r6,5f28 <_dtoa_r+0x10a4>
    5924:	0027883a 	mov	r19,zero
    5928:	a8800417 	ldw	r2,16(r21)
    592c:	05c00804 	movi	r23,32
    5930:	10800104 	addi	r2,r2,4
    5934:	1085883a 	add	r2,r2,r2
    5938:	1085883a 	add	r2,r2,r2
    593c:	a885883a 	add	r2,r21,r2
    5940:	11000017 	ldw	r4,0(r2)
    5944:	00080080 	call	8008 <__hi0bits>
    5948:	b885c83a 	sub	r2,r23,r2
    594c:	1585883a 	add	r2,r2,r22
    5950:	108007cc 	andi	r2,r2,31
    5954:	1000b326 	beq	r2,zero,5c24 <_dtoa_r+0xda0>
    5958:	00c00804 	movi	r3,32
    595c:	1887c83a 	sub	r3,r3,r2
    5960:	01000104 	movi	r4,4
    5964:	20c2cd0e 	bge	r4,r3,649c <_dtoa_r+0x1618>
    5968:	00c00704 	movi	r3,28
    596c:	1885c83a 	sub	r2,r3,r2
    5970:	d8c00817 	ldw	r3,32(sp)
    5974:	a0a9883a 	add	r20,r20,r2
    5978:	b0ad883a 	add	r22,r22,r2
    597c:	1887883a 	add	r3,r3,r2
    5980:	d8c00815 	stw	r3,32(sp)
    5984:	d9800817 	ldw	r6,32(sp)
    5988:	0180040e 	bge	zero,r6,599c <_dtoa_r+0xb18>
    598c:	800b883a 	mov	r5,r16
    5990:	e009883a 	mov	r4,fp
    5994:	00084940 	call	8494 <__lshift>
    5998:	1021883a 	mov	r16,r2
    599c:	0580050e 	bge	zero,r22,59b4 <_dtoa_r+0xb30>
    59a0:	a80b883a 	mov	r5,r21
    59a4:	b00d883a 	mov	r6,r22
    59a8:	e009883a 	mov	r4,fp
    59ac:	00084940 	call	8494 <__lshift>
    59b0:	102b883a 	mov	r21,r2
    59b4:	d9c00e17 	ldw	r7,56(sp)
    59b8:	3801211e 	bne	r7,zero,5e40 <_dtoa_r+0xfbc>
    59bc:	d9800617 	ldw	r6,24(sp)
    59c0:	0181380e 	bge	zero,r6,5ea4 <_dtoa_r+0x1020>
    59c4:	d8c00b17 	ldw	r3,44(sp)
    59c8:	1800ab1e 	bne	r3,zero,5c78 <_dtoa_r+0xdf4>
    59cc:	dc800717 	ldw	r18,28(sp)
    59d0:	dcc00617 	ldw	r19,24(sp)
    59d4:	9029883a 	mov	r20,r18
    59d8:	00000206 	br	59e4 <_dtoa_r+0xb60>
    59dc:	0007de40 	call	7de4 <__multadd>
    59e0:	1021883a 	mov	r16,r2
    59e4:	a80b883a 	mov	r5,r21
    59e8:	8009883a 	mov	r4,r16
    59ec:	0004c840 	call	4c84 <quorem>
    59f0:	10800c04 	addi	r2,r2,48
    59f4:	90800005 	stb	r2,0(r18)
    59f8:	94800044 	addi	r18,r18,1
    59fc:	9507c83a 	sub	r3,r18,r20
    5a00:	000f883a 	mov	r7,zero
    5a04:	01800284 	movi	r6,10
    5a08:	800b883a 	mov	r5,r16
    5a0c:	e009883a 	mov	r4,fp
    5a10:	1cfff216 	blt	r3,r19,59dc <__alt_data_end+0xff0059dc>
    5a14:	1011883a 	mov	r8,r2
    5a18:	d8800617 	ldw	r2,24(sp)
    5a1c:	0082370e 	bge	zero,r2,62fc <_dtoa_r+0x1478>
    5a20:	d9000717 	ldw	r4,28(sp)
    5a24:	0025883a 	mov	r18,zero
    5a28:	20af883a 	add	r23,r4,r2
    5a2c:	01800044 	movi	r6,1
    5a30:	800b883a 	mov	r5,r16
    5a34:	e009883a 	mov	r4,fp
    5a38:	da001715 	stw	r8,92(sp)
    5a3c:	00084940 	call	8494 <__lshift>
    5a40:	a80b883a 	mov	r5,r21
    5a44:	1009883a 	mov	r4,r2
    5a48:	d8800915 	stw	r2,36(sp)
    5a4c:	00085dc0 	call	85dc <__mcmp>
    5a50:	da001717 	ldw	r8,92(sp)
    5a54:	0081800e 	bge	zero,r2,6058 <_dtoa_r+0x11d4>
    5a58:	b93fffc3 	ldbu	r4,-1(r23)
    5a5c:	b8bfffc4 	addi	r2,r23,-1
    5a60:	1007883a 	mov	r3,r2
    5a64:	01800e44 	movi	r6,57
    5a68:	d9c00717 	ldw	r7,28(sp)
    5a6c:	00000506 	br	5a84 <_dtoa_r+0xc00>
    5a70:	18ffffc4 	addi	r3,r3,-1
    5a74:	11c12326 	beq	r2,r7,5f04 <_dtoa_r+0x1080>
    5a78:	19000003 	ldbu	r4,0(r3)
    5a7c:	102f883a 	mov	r23,r2
    5a80:	10bfffc4 	addi	r2,r2,-1
    5a84:	21403fcc 	andi	r5,r4,255
    5a88:	2940201c 	xori	r5,r5,128
    5a8c:	297fe004 	addi	r5,r5,-128
    5a90:	29bff726 	beq	r5,r6,5a70 <__alt_data_end+0xff005a70>
    5a94:	21000044 	addi	r4,r4,1
    5a98:	11000005 	stb	r4,0(r2)
    5a9c:	a80b883a 	mov	r5,r21
    5aa0:	e009883a 	mov	r4,fp
    5aa4:	0007dbc0 	call	7dbc <_Bfree>
    5aa8:	883ea026 	beq	r17,zero,552c <__alt_data_end+0xff00552c>
    5aac:	90000426 	beq	r18,zero,5ac0 <_dtoa_r+0xc3c>
    5ab0:	94400326 	beq	r18,r17,5ac0 <_dtoa_r+0xc3c>
    5ab4:	900b883a 	mov	r5,r18
    5ab8:	e009883a 	mov	r4,fp
    5abc:	0007dbc0 	call	7dbc <_Bfree>
    5ac0:	880b883a 	mov	r5,r17
    5ac4:	e009883a 	mov	r4,fp
    5ac8:	0007dbc0 	call	7dbc <_Bfree>
    5acc:	003e9706 	br	552c <__alt_data_end+0xff00552c>
    5ad0:	01800044 	movi	r6,1
    5ad4:	d9800e15 	stw	r6,56(sp)
    5ad8:	003d9606 	br	5134 <__alt_data_end+0xff005134>
    5adc:	d8800817 	ldw	r2,32(sp)
    5ae0:	d8c00517 	ldw	r3,20(sp)
    5ae4:	d8000d15 	stw	zero,52(sp)
    5ae8:	10c5c83a 	sub	r2,r2,r3
    5aec:	00c9c83a 	sub	r4,zero,r3
    5af0:	d8800815 	stw	r2,32(sp)
    5af4:	d9000a15 	stw	r4,40(sp)
    5af8:	003d9706 	br	5158 <__alt_data_end+0xff005158>
    5afc:	05adc83a 	sub	r22,zero,r22
    5b00:	dd800815 	stw	r22,32(sp)
    5b04:	002d883a 	mov	r22,zero
    5b08:	003d8e06 	br	5144 <__alt_data_end+0xff005144>
    5b0c:	d9000517 	ldw	r4,20(sp)
    5b10:	000e3ac0 	call	e3ac <__floatsidf>
    5b14:	100d883a 	mov	r6,r2
    5b18:	180f883a 	mov	r7,r3
    5b1c:	a009883a 	mov	r4,r20
    5b20:	880b883a 	mov	r5,r17
    5b24:	000d0c00 	call	d0c0 <__eqdf2>
    5b28:	103d7126 	beq	r2,zero,50f0 <__alt_data_end+0xff0050f0>
    5b2c:	d9c00517 	ldw	r7,20(sp)
    5b30:	39ffffc4 	addi	r7,r7,-1
    5b34:	d9c00515 	stw	r7,20(sp)
    5b38:	003d6d06 	br	50f0 <__alt_data_end+0xff0050f0>
    5b3c:	dd400a17 	ldw	r21,40(sp)
    5b40:	dd000817 	ldw	r20,32(sp)
    5b44:	0023883a 	mov	r17,zero
    5b48:	003f4806 	br	586c <__alt_data_end+0xff00586c>
    5b4c:	10e3c83a 	sub	r17,r2,r3
    5b50:	9448983a 	sll	r4,r18,r17
    5b54:	003d3206 	br	5020 <__alt_data_end+0xff005020>
    5b58:	d8000e15 	stw	zero,56(sp)
    5b5c:	003d7506 	br	5134 <__alt_data_end+0xff005134>
    5b60:	b005883a 	mov	r2,r22
    5b64:	003f4506 	br	587c <__alt_data_end+0xff00587c>
    5b68:	dc000915 	stw	r16,36(sp)
    5b6c:	d9800a17 	ldw	r6,40(sp)
    5b70:	d9400917 	ldw	r5,36(sp)
    5b74:	e009883a 	mov	r4,fp
    5b78:	00083540 	call	8354 <__pow5mult>
    5b7c:	1021883a 	mov	r16,r2
    5b80:	003f5a06 	br	58ec <__alt_data_end+0xff0058ec>
    5b84:	01c00044 	movi	r7,1
    5b88:	d9c00b15 	stw	r7,44(sp)
    5b8c:	d8802217 	ldw	r2,136(sp)
    5b90:	0081280e 	bge	zero,r2,6034 <_dtoa_r+0x11b0>
    5b94:	100d883a 	mov	r6,r2
    5b98:	1021883a 	mov	r16,r2
    5b9c:	d8800c15 	stw	r2,48(sp)
    5ba0:	d8800615 	stw	r2,24(sp)
    5ba4:	003d8806 	br	51c8 <__alt_data_end+0xff0051c8>
    5ba8:	d8800617 	ldw	r2,24(sp)
    5bac:	00be9b16 	blt	zero,r2,561c <__alt_data_end+0xff00561c>
    5bb0:	10010f1e 	bne	r2,zero,5ff0 <_dtoa_r+0x116c>
    5bb4:	880b883a 	mov	r5,r17
    5bb8:	000d883a 	mov	r6,zero
    5bbc:	01d00534 	movhi	r7,16404
    5bc0:	8009883a 	mov	r4,r16
    5bc4:	000d3180 	call	d318 <__muldf3>
    5bc8:	900d883a 	mov	r6,r18
    5bcc:	980f883a 	mov	r7,r19
    5bd0:	1009883a 	mov	r4,r2
    5bd4:	180b883a 	mov	r5,r3
    5bd8:	000d1480 	call	d148 <__gedf2>
    5bdc:	002b883a 	mov	r21,zero
    5be0:	0023883a 	mov	r17,zero
    5be4:	1000bf16 	blt	r2,zero,5ee4 <_dtoa_r+0x1060>
    5be8:	d9802217 	ldw	r6,136(sp)
    5bec:	ddc00717 	ldw	r23,28(sp)
    5bf0:	018c303a 	nor	r6,zero,r6
    5bf4:	d9800515 	stw	r6,20(sp)
    5bf8:	a80b883a 	mov	r5,r21
    5bfc:	e009883a 	mov	r4,fp
    5c00:	0007dbc0 	call	7dbc <_Bfree>
    5c04:	883e4926 	beq	r17,zero,552c <__alt_data_end+0xff00552c>
    5c08:	003fad06 	br	5ac0 <__alt_data_end+0xff005ac0>
    5c0c:	d9c01117 	ldw	r7,68(sp)
    5c10:	3801bc26 	beq	r7,zero,6304 <_dtoa_r+0x1480>
    5c14:	10810cc4 	addi	r2,r2,1075
    5c18:	dd400a17 	ldw	r21,40(sp)
    5c1c:	dd000817 	ldw	r20,32(sp)
    5c20:	003f0a06 	br	584c <__alt_data_end+0xff00584c>
    5c24:	00800704 	movi	r2,28
    5c28:	d9000817 	ldw	r4,32(sp)
    5c2c:	a0a9883a 	add	r20,r20,r2
    5c30:	b0ad883a 	add	r22,r22,r2
    5c34:	2089883a 	add	r4,r4,r2
    5c38:	d9000815 	stw	r4,32(sp)
    5c3c:	003f5106 	br	5984 <__alt_data_end+0xff005984>
    5c40:	d8c00317 	ldw	r3,12(sp)
    5c44:	b8c1fc0e 	bge	r23,r3,6438 <_dtoa_r+0x15b4>
    5c48:	0027883a 	mov	r19,zero
    5c4c:	b805883a 	mov	r2,r23
    5c50:	003f3e06 	br	594c <__alt_data_end+0xff00594c>
    5c54:	880b883a 	mov	r5,r17
    5c58:	e009883a 	mov	r4,fp
    5c5c:	000f883a 	mov	r7,zero
    5c60:	01800284 	movi	r6,10
    5c64:	0007de40 	call	7de4 <__multadd>
    5c68:	d9000c17 	ldw	r4,48(sp)
    5c6c:	1023883a 	mov	r17,r2
    5c70:	0102040e 	bge	zero,r4,6484 <_dtoa_r+0x1600>
    5c74:	d9000615 	stw	r4,24(sp)
    5c78:	0500050e 	bge	zero,r20,5c90 <_dtoa_r+0xe0c>
    5c7c:	880b883a 	mov	r5,r17
    5c80:	a00d883a 	mov	r6,r20
    5c84:	e009883a 	mov	r4,fp
    5c88:	00084940 	call	8494 <__lshift>
    5c8c:	1023883a 	mov	r17,r2
    5c90:	9801241e 	bne	r19,zero,6124 <_dtoa_r+0x12a0>
    5c94:	8829883a 	mov	r20,r17
    5c98:	d9000617 	ldw	r4,24(sp)
    5c9c:	dcc00717 	ldw	r19,28(sp)
    5ca0:	9480004c 	andi	r18,r18,1
    5ca4:	20bfffc4 	addi	r2,r4,-1
    5ca8:	9885883a 	add	r2,r19,r2
    5cac:	d8800415 	stw	r2,16(sp)
    5cb0:	dc800615 	stw	r18,24(sp)
    5cb4:	a80b883a 	mov	r5,r21
    5cb8:	8009883a 	mov	r4,r16
    5cbc:	0004c840 	call	4c84 <quorem>
    5cc0:	880b883a 	mov	r5,r17
    5cc4:	8009883a 	mov	r4,r16
    5cc8:	102f883a 	mov	r23,r2
    5ccc:	00085dc0 	call	85dc <__mcmp>
    5cd0:	a80b883a 	mov	r5,r21
    5cd4:	a00d883a 	mov	r6,r20
    5cd8:	e009883a 	mov	r4,fp
    5cdc:	102d883a 	mov	r22,r2
    5ce0:	000863c0 	call	863c <__mdiff>
    5ce4:	1007883a 	mov	r3,r2
    5ce8:	10800317 	ldw	r2,12(r2)
    5cec:	bc800c04 	addi	r18,r23,48
    5cf0:	180b883a 	mov	r5,r3
    5cf4:	10004e1e 	bne	r2,zero,5e30 <_dtoa_r+0xfac>
    5cf8:	8009883a 	mov	r4,r16
    5cfc:	d8c01615 	stw	r3,88(sp)
    5d00:	00085dc0 	call	85dc <__mcmp>
    5d04:	d8c01617 	ldw	r3,88(sp)
    5d08:	e009883a 	mov	r4,fp
    5d0c:	d8801615 	stw	r2,88(sp)
    5d10:	180b883a 	mov	r5,r3
    5d14:	0007dbc0 	call	7dbc <_Bfree>
    5d18:	d8801617 	ldw	r2,88(sp)
    5d1c:	1000041e 	bne	r2,zero,5d30 <_dtoa_r+0xeac>
    5d20:	d9800317 	ldw	r6,12(sp)
    5d24:	3000021e 	bne	r6,zero,5d30 <_dtoa_r+0xeac>
    5d28:	d8c00617 	ldw	r3,24(sp)
    5d2c:	18003726 	beq	r3,zero,5e0c <_dtoa_r+0xf88>
    5d30:	b0002016 	blt	r22,zero,5db4 <_dtoa_r+0xf30>
    5d34:	b000041e 	bne	r22,zero,5d48 <_dtoa_r+0xec4>
    5d38:	d9000317 	ldw	r4,12(sp)
    5d3c:	2000021e 	bne	r4,zero,5d48 <_dtoa_r+0xec4>
    5d40:	d8c00617 	ldw	r3,24(sp)
    5d44:	18001b26 	beq	r3,zero,5db4 <_dtoa_r+0xf30>
    5d48:	00810716 	blt	zero,r2,6168 <_dtoa_r+0x12e4>
    5d4c:	d8c00417 	ldw	r3,16(sp)
    5d50:	9d800044 	addi	r22,r19,1
    5d54:	9c800005 	stb	r18,0(r19)
    5d58:	b02f883a 	mov	r23,r22
    5d5c:	98c10626 	beq	r19,r3,6178 <_dtoa_r+0x12f4>
    5d60:	800b883a 	mov	r5,r16
    5d64:	000f883a 	mov	r7,zero
    5d68:	01800284 	movi	r6,10
    5d6c:	e009883a 	mov	r4,fp
    5d70:	0007de40 	call	7de4 <__multadd>
    5d74:	1021883a 	mov	r16,r2
    5d78:	000f883a 	mov	r7,zero
    5d7c:	01800284 	movi	r6,10
    5d80:	880b883a 	mov	r5,r17
    5d84:	e009883a 	mov	r4,fp
    5d88:	8d002526 	beq	r17,r20,5e20 <_dtoa_r+0xf9c>
    5d8c:	0007de40 	call	7de4 <__multadd>
    5d90:	a00b883a 	mov	r5,r20
    5d94:	000f883a 	mov	r7,zero
    5d98:	01800284 	movi	r6,10
    5d9c:	e009883a 	mov	r4,fp
    5da0:	1023883a 	mov	r17,r2
    5da4:	0007de40 	call	7de4 <__multadd>
    5da8:	1029883a 	mov	r20,r2
    5dac:	b027883a 	mov	r19,r22
    5db0:	003fc006 	br	5cb4 <__alt_data_end+0xff005cb4>
    5db4:	9011883a 	mov	r8,r18
    5db8:	00800e0e 	bge	zero,r2,5df4 <_dtoa_r+0xf70>
    5dbc:	800b883a 	mov	r5,r16
    5dc0:	01800044 	movi	r6,1
    5dc4:	e009883a 	mov	r4,fp
    5dc8:	da001715 	stw	r8,92(sp)
    5dcc:	00084940 	call	8494 <__lshift>
    5dd0:	a80b883a 	mov	r5,r21
    5dd4:	1009883a 	mov	r4,r2
    5dd8:	1021883a 	mov	r16,r2
    5ddc:	00085dc0 	call	85dc <__mcmp>
    5de0:	da001717 	ldw	r8,92(sp)
    5de4:	0081960e 	bge	zero,r2,6440 <_dtoa_r+0x15bc>
    5de8:	00800e44 	movi	r2,57
    5dec:	40817026 	beq	r8,r2,63b0 <_dtoa_r+0x152c>
    5df0:	ba000c44 	addi	r8,r23,49
    5df4:	8825883a 	mov	r18,r17
    5df8:	9dc00044 	addi	r23,r19,1
    5dfc:	9a000005 	stb	r8,0(r19)
    5e00:	a023883a 	mov	r17,r20
    5e04:	dc000915 	stw	r16,36(sp)
    5e08:	003f2406 	br	5a9c <__alt_data_end+0xff005a9c>
    5e0c:	00800e44 	movi	r2,57
    5e10:	9011883a 	mov	r8,r18
    5e14:	90816626 	beq	r18,r2,63b0 <_dtoa_r+0x152c>
    5e18:	05bff516 	blt	zero,r22,5df0 <__alt_data_end+0xff005df0>
    5e1c:	003ff506 	br	5df4 <__alt_data_end+0xff005df4>
    5e20:	0007de40 	call	7de4 <__multadd>
    5e24:	1023883a 	mov	r17,r2
    5e28:	1029883a 	mov	r20,r2
    5e2c:	003fdf06 	br	5dac <__alt_data_end+0xff005dac>
    5e30:	e009883a 	mov	r4,fp
    5e34:	0007dbc0 	call	7dbc <_Bfree>
    5e38:	00800044 	movi	r2,1
    5e3c:	003fbc06 	br	5d30 <__alt_data_end+0xff005d30>
    5e40:	a80b883a 	mov	r5,r21
    5e44:	8009883a 	mov	r4,r16
    5e48:	00085dc0 	call	85dc <__mcmp>
    5e4c:	103edb0e 	bge	r2,zero,59bc <__alt_data_end+0xff0059bc>
    5e50:	800b883a 	mov	r5,r16
    5e54:	000f883a 	mov	r7,zero
    5e58:	01800284 	movi	r6,10
    5e5c:	e009883a 	mov	r4,fp
    5e60:	0007de40 	call	7de4 <__multadd>
    5e64:	1021883a 	mov	r16,r2
    5e68:	d8800517 	ldw	r2,20(sp)
    5e6c:	d8c00b17 	ldw	r3,44(sp)
    5e70:	10bfffc4 	addi	r2,r2,-1
    5e74:	d8800515 	stw	r2,20(sp)
    5e78:	183f761e 	bne	r3,zero,5c54 <__alt_data_end+0xff005c54>
    5e7c:	d9000c17 	ldw	r4,48(sp)
    5e80:	0101730e 	bge	zero,r4,6450 <_dtoa_r+0x15cc>
    5e84:	d9000615 	stw	r4,24(sp)
    5e88:	003ed006 	br	59cc <__alt_data_end+0xff0059cc>
    5e8c:	00800084 	movi	r2,2
    5e90:	3081861e 	bne	r6,r2,64ac <_dtoa_r+0x1628>
    5e94:	d8000b15 	stw	zero,44(sp)
    5e98:	003f3c06 	br	5b8c <__alt_data_end+0xff005b8c>
    5e9c:	dc000917 	ldw	r16,36(sp)
    5ea0:	003e9206 	br	58ec <__alt_data_end+0xff0058ec>
    5ea4:	d9c00317 	ldw	r7,12(sp)
    5ea8:	00800084 	movi	r2,2
    5eac:	11fec50e 	bge	r2,r7,59c4 <__alt_data_end+0xff0059c4>
    5eb0:	d9000617 	ldw	r4,24(sp)
    5eb4:	20013c1e 	bne	r4,zero,63a8 <_dtoa_r+0x1524>
    5eb8:	a80b883a 	mov	r5,r21
    5ebc:	000f883a 	mov	r7,zero
    5ec0:	01800144 	movi	r6,5
    5ec4:	e009883a 	mov	r4,fp
    5ec8:	0007de40 	call	7de4 <__multadd>
    5ecc:	100b883a 	mov	r5,r2
    5ed0:	8009883a 	mov	r4,r16
    5ed4:	102b883a 	mov	r21,r2
    5ed8:	00085dc0 	call	85dc <__mcmp>
    5edc:	dc000915 	stw	r16,36(sp)
    5ee0:	00bf410e 	bge	zero,r2,5be8 <__alt_data_end+0xff005be8>
    5ee4:	d9c00717 	ldw	r7,28(sp)
    5ee8:	00800c44 	movi	r2,49
    5eec:	38800005 	stb	r2,0(r7)
    5ef0:	d8800517 	ldw	r2,20(sp)
    5ef4:	3dc00044 	addi	r23,r7,1
    5ef8:	10800044 	addi	r2,r2,1
    5efc:	d8800515 	stw	r2,20(sp)
    5f00:	003f3d06 	br	5bf8 <__alt_data_end+0xff005bf8>
    5f04:	d9800517 	ldw	r6,20(sp)
    5f08:	d9c00717 	ldw	r7,28(sp)
    5f0c:	00800c44 	movi	r2,49
    5f10:	31800044 	addi	r6,r6,1
    5f14:	d9800515 	stw	r6,20(sp)
    5f18:	38800005 	stb	r2,0(r7)
    5f1c:	003edf06 	br	5a9c <__alt_data_end+0xff005a9c>
    5f20:	d8000b15 	stw	zero,44(sp)
    5f24:	003c9f06 	br	51a4 <__alt_data_end+0xff0051a4>
    5f28:	903e7e1e 	bne	r18,zero,5924 <__alt_data_end+0xff005924>
    5f2c:	00800434 	movhi	r2,16
    5f30:	10bfffc4 	addi	r2,r2,-1
    5f34:	9884703a 	and	r2,r19,r2
    5f38:	1000ea1e 	bne	r2,zero,62e4 <_dtoa_r+0x1460>
    5f3c:	9cdffc2c 	andhi	r19,r19,32752
    5f40:	9800e826 	beq	r19,zero,62e4 <_dtoa_r+0x1460>
    5f44:	d9c00817 	ldw	r7,32(sp)
    5f48:	b5800044 	addi	r22,r22,1
    5f4c:	04c00044 	movi	r19,1
    5f50:	39c00044 	addi	r7,r7,1
    5f54:	d9c00815 	stw	r7,32(sp)
    5f58:	d8800d17 	ldw	r2,52(sp)
    5f5c:	103e721e 	bne	r2,zero,5928 <__alt_data_end+0xff005928>
    5f60:	00800044 	movi	r2,1
    5f64:	003e7906 	br	594c <__alt_data_end+0xff00594c>
    5f68:	8009883a 	mov	r4,r16
    5f6c:	000e3ac0 	call	e3ac <__floatsidf>
    5f70:	d9800f17 	ldw	r6,60(sp)
    5f74:	d9c01017 	ldw	r7,64(sp)
    5f78:	1009883a 	mov	r4,r2
    5f7c:	180b883a 	mov	r5,r3
    5f80:	000d3180 	call	d318 <__muldf3>
    5f84:	000d883a 	mov	r6,zero
    5f88:	01d00734 	movhi	r7,16412
    5f8c:	1009883a 	mov	r4,r2
    5f90:	180b883a 	mov	r5,r3
    5f94:	000bf2c0 	call	bf2c <__adddf3>
    5f98:	047f3034 	movhi	r17,64704
    5f9c:	1021883a 	mov	r16,r2
    5fa0:	1c63883a 	add	r17,r3,r17
    5fa4:	d9000f17 	ldw	r4,60(sp)
    5fa8:	d9401017 	ldw	r5,64(sp)
    5fac:	000d883a 	mov	r6,zero
    5fb0:	01d00534 	movhi	r7,16404
    5fb4:	000da300 	call	da30 <__subdf3>
    5fb8:	800d883a 	mov	r6,r16
    5fbc:	880f883a 	mov	r7,r17
    5fc0:	1009883a 	mov	r4,r2
    5fc4:	180b883a 	mov	r5,r3
    5fc8:	102b883a 	mov	r21,r2
    5fcc:	1829883a 	mov	r20,r3
    5fd0:	000d1480 	call	d148 <__gedf2>
    5fd4:	00806c16 	blt	zero,r2,6188 <_dtoa_r+0x1304>
    5fd8:	89e0003c 	xorhi	r7,r17,32768
    5fdc:	800d883a 	mov	r6,r16
    5fe0:	a809883a 	mov	r4,r21
    5fe4:	a00b883a 	mov	r5,r20
    5fe8:	000d2240 	call	d224 <__ledf2>
    5fec:	103d7e0e 	bge	r2,zero,55e8 <__alt_data_end+0xff0055e8>
    5ff0:	002b883a 	mov	r21,zero
    5ff4:	0023883a 	mov	r17,zero
    5ff8:	003efb06 	br	5be8 <__alt_data_end+0xff005be8>
    5ffc:	d8800717 	ldw	r2,28(sp)
    6000:	003bd006 	br	4f44 <__alt_data_end+0xff004f44>
    6004:	d9000a17 	ldw	r4,40(sp)
    6008:	d9800d17 	ldw	r6,52(sp)
    600c:	dd400a15 	stw	r21,40(sp)
    6010:	a905c83a 	sub	r2,r21,r4
    6014:	308d883a 	add	r6,r6,r2
    6018:	d9800d15 	stw	r6,52(sp)
    601c:	002b883a 	mov	r21,zero
    6020:	003e0606 	br	583c <__alt_data_end+0xff00583c>
    6024:	9023883a 	mov	r17,r18
    6028:	9829883a 	mov	r20,r19
    602c:	04000084 	movi	r16,2
    6030:	003c9206 	br	527c <__alt_data_end+0xff00527c>
    6034:	04000044 	movi	r16,1
    6038:	dc000c15 	stw	r16,48(sp)
    603c:	dc000615 	stw	r16,24(sp)
    6040:	dc002215 	stw	r16,136(sp)
    6044:	e0001115 	stw	zero,68(fp)
    6048:	000b883a 	mov	r5,zero
    604c:	003c6906 	br	51f4 <__alt_data_end+0xff0051f4>
    6050:	3021883a 	mov	r16,r6
    6054:	003ffb06 	br	6044 <__alt_data_end+0xff006044>
    6058:	1000021e 	bne	r2,zero,6064 <_dtoa_r+0x11e0>
    605c:	4200004c 	andi	r8,r8,1
    6060:	403e7d1e 	bne	r8,zero,5a58 <__alt_data_end+0xff005a58>
    6064:	01000c04 	movi	r4,48
    6068:	00000106 	br	6070 <_dtoa_r+0x11ec>
    606c:	102f883a 	mov	r23,r2
    6070:	b8bfffc4 	addi	r2,r23,-1
    6074:	10c00007 	ldb	r3,0(r2)
    6078:	193ffc26 	beq	r3,r4,606c <__alt_data_end+0xff00606c>
    607c:	003e8706 	br	5a9c <__alt_data_end+0xff005a9c>
    6080:	d8800517 	ldw	r2,20(sp)
    6084:	00a3c83a 	sub	r17,zero,r2
    6088:	8800a426 	beq	r17,zero,631c <_dtoa_r+0x1498>
    608c:	888003cc 	andi	r2,r17,15
    6090:	100490fa 	slli	r2,r2,3
    6094:	00c00074 	movhi	r3,1
    6098:	18c12104 	addi	r3,r3,1156
    609c:	1885883a 	add	r2,r3,r2
    60a0:	11800017 	ldw	r6,0(r2)
    60a4:	11c00117 	ldw	r7,4(r2)
    60a8:	9009883a 	mov	r4,r18
    60ac:	980b883a 	mov	r5,r19
    60b0:	8823d13a 	srai	r17,r17,4
    60b4:	000d3180 	call	d318 <__muldf3>
    60b8:	d8800f15 	stw	r2,60(sp)
    60bc:	d8c01015 	stw	r3,64(sp)
    60c0:	8800e826 	beq	r17,zero,6464 <_dtoa_r+0x15e0>
    60c4:	05000074 	movhi	r20,1
    60c8:	a5011704 	addi	r20,r20,1116
    60cc:	04000084 	movi	r16,2
    60d0:	8980004c 	andi	r6,r17,1
    60d4:	1009883a 	mov	r4,r2
    60d8:	8823d07a 	srai	r17,r17,1
    60dc:	180b883a 	mov	r5,r3
    60e0:	30000426 	beq	r6,zero,60f4 <_dtoa_r+0x1270>
    60e4:	a1800017 	ldw	r6,0(r20)
    60e8:	a1c00117 	ldw	r7,4(r20)
    60ec:	84000044 	addi	r16,r16,1
    60f0:	000d3180 	call	d318 <__muldf3>
    60f4:	a5000204 	addi	r20,r20,8
    60f8:	883ff51e 	bne	r17,zero,60d0 <__alt_data_end+0xff0060d0>
    60fc:	d8800f15 	stw	r2,60(sp)
    6100:	d8c01015 	stw	r3,64(sp)
    6104:	003c7606 	br	52e0 <__alt_data_end+0xff0052e0>
    6108:	00c00c04 	movi	r3,48
    610c:	10c00005 	stb	r3,0(r2)
    6110:	d8c00517 	ldw	r3,20(sp)
    6114:	bd3fffc3 	ldbu	r20,-1(r23)
    6118:	18c00044 	addi	r3,r3,1
    611c:	d8c00515 	stw	r3,20(sp)
    6120:	003db906 	br	5808 <__alt_data_end+0xff005808>
    6124:	89400117 	ldw	r5,4(r17)
    6128:	e009883a 	mov	r4,fp
    612c:	0007d140 	call	7d14 <_Balloc>
    6130:	89800417 	ldw	r6,16(r17)
    6134:	89400304 	addi	r5,r17,12
    6138:	11000304 	addi	r4,r2,12
    613c:	31800084 	addi	r6,r6,2
    6140:	318d883a 	add	r6,r6,r6
    6144:	318d883a 	add	r6,r6,r6
    6148:	1027883a 	mov	r19,r2
    614c:	00079480 	call	7948 <memcpy>
    6150:	01800044 	movi	r6,1
    6154:	980b883a 	mov	r5,r19
    6158:	e009883a 	mov	r4,fp
    615c:	00084940 	call	8494 <__lshift>
    6160:	1029883a 	mov	r20,r2
    6164:	003ecc06 	br	5c98 <__alt_data_end+0xff005c98>
    6168:	00800e44 	movi	r2,57
    616c:	90809026 	beq	r18,r2,63b0 <_dtoa_r+0x152c>
    6170:	92000044 	addi	r8,r18,1
    6174:	003f1f06 	br	5df4 <__alt_data_end+0xff005df4>
    6178:	9011883a 	mov	r8,r18
    617c:	8825883a 	mov	r18,r17
    6180:	a023883a 	mov	r17,r20
    6184:	003e2906 	br	5a2c <__alt_data_end+0xff005a2c>
    6188:	002b883a 	mov	r21,zero
    618c:	0023883a 	mov	r17,zero
    6190:	003f5406 	br	5ee4 <__alt_data_end+0xff005ee4>
    6194:	61bfffc4 	addi	r6,r12,-1
    6198:	300490fa 	slli	r2,r6,3
    619c:	00c00074 	movhi	r3,1
    61a0:	18c12104 	addi	r3,r3,1156
    61a4:	1885883a 	add	r2,r3,r2
    61a8:	11000017 	ldw	r4,0(r2)
    61ac:	11400117 	ldw	r5,4(r2)
    61b0:	d8800717 	ldw	r2,28(sp)
    61b4:	880f883a 	mov	r7,r17
    61b8:	d9801215 	stw	r6,72(sp)
    61bc:	800d883a 	mov	r6,r16
    61c0:	db001615 	stw	r12,88(sp)
    61c4:	15c00044 	addi	r23,r2,1
    61c8:	000d3180 	call	d318 <__muldf3>
    61cc:	d9401017 	ldw	r5,64(sp)
    61d0:	d9000f17 	ldw	r4,60(sp)
    61d4:	d8c01515 	stw	r3,84(sp)
    61d8:	d8801415 	stw	r2,80(sp)
    61dc:	000e32c0 	call	e32c <__fixdfsi>
    61e0:	1009883a 	mov	r4,r2
    61e4:	1021883a 	mov	r16,r2
    61e8:	000e3ac0 	call	e3ac <__floatsidf>
    61ec:	d9000f17 	ldw	r4,60(sp)
    61f0:	d9401017 	ldw	r5,64(sp)
    61f4:	100d883a 	mov	r6,r2
    61f8:	180f883a 	mov	r7,r3
    61fc:	000da300 	call	da30 <__subdf3>
    6200:	1829883a 	mov	r20,r3
    6204:	d8c00717 	ldw	r3,28(sp)
    6208:	84000c04 	addi	r16,r16,48
    620c:	1023883a 	mov	r17,r2
    6210:	1c000005 	stb	r16,0(r3)
    6214:	db001617 	ldw	r12,88(sp)
    6218:	00800044 	movi	r2,1
    621c:	60802226 	beq	r12,r2,62a8 <_dtoa_r+0x1424>
    6220:	d9c00717 	ldw	r7,28(sp)
    6224:	8805883a 	mov	r2,r17
    6228:	b82b883a 	mov	r21,r23
    622c:	3b19883a 	add	r12,r7,r12
    6230:	6023883a 	mov	r17,r12
    6234:	a007883a 	mov	r3,r20
    6238:	dc800f15 	stw	r18,60(sp)
    623c:	000d883a 	mov	r6,zero
    6240:	01d00934 	movhi	r7,16420
    6244:	1009883a 	mov	r4,r2
    6248:	180b883a 	mov	r5,r3
    624c:	000d3180 	call	d318 <__muldf3>
    6250:	180b883a 	mov	r5,r3
    6254:	1009883a 	mov	r4,r2
    6258:	1829883a 	mov	r20,r3
    625c:	1025883a 	mov	r18,r2
    6260:	000e32c0 	call	e32c <__fixdfsi>
    6264:	1009883a 	mov	r4,r2
    6268:	1021883a 	mov	r16,r2
    626c:	000e3ac0 	call	e3ac <__floatsidf>
    6270:	100d883a 	mov	r6,r2
    6274:	180f883a 	mov	r7,r3
    6278:	9009883a 	mov	r4,r18
    627c:	a00b883a 	mov	r5,r20
    6280:	84000c04 	addi	r16,r16,48
    6284:	000da300 	call	da30 <__subdf3>
    6288:	ad400044 	addi	r21,r21,1
    628c:	ac3fffc5 	stb	r16,-1(r21)
    6290:	ac7fea1e 	bne	r21,r17,623c <__alt_data_end+0xff00623c>
    6294:	1023883a 	mov	r17,r2
    6298:	d8801217 	ldw	r2,72(sp)
    629c:	dc800f17 	ldw	r18,60(sp)
    62a0:	1829883a 	mov	r20,r3
    62a4:	b8af883a 	add	r23,r23,r2
    62a8:	d9001417 	ldw	r4,80(sp)
    62ac:	d9401517 	ldw	r5,84(sp)
    62b0:	000d883a 	mov	r6,zero
    62b4:	01cff834 	movhi	r7,16352
    62b8:	000bf2c0 	call	bf2c <__adddf3>
    62bc:	880d883a 	mov	r6,r17
    62c0:	a00f883a 	mov	r7,r20
    62c4:	1009883a 	mov	r4,r2
    62c8:	180b883a 	mov	r5,r3
    62cc:	000d2240 	call	d224 <__ledf2>
    62d0:	10003e0e 	bge	r2,zero,63cc <_dtoa_r+0x1548>
    62d4:	d9001317 	ldw	r4,76(sp)
    62d8:	bd3fffc3 	ldbu	r20,-1(r23)
    62dc:	d9000515 	stw	r4,20(sp)
    62e0:	003d3b06 	br	57d0 <__alt_data_end+0xff0057d0>
    62e4:	0027883a 	mov	r19,zero
    62e8:	003f1b06 	br	5f58 <__alt_data_end+0xff005f58>
    62ec:	d8800817 	ldw	r2,32(sp)
    62f0:	11e9c83a 	sub	r20,r2,r7
    62f4:	0005883a 	mov	r2,zero
    62f8:	003d5406 	br	584c <__alt_data_end+0xff00584c>
    62fc:	00800044 	movi	r2,1
    6300:	003dc706 	br	5a20 <__alt_data_end+0xff005a20>
    6304:	d8c00217 	ldw	r3,8(sp)
    6308:	00800d84 	movi	r2,54
    630c:	dd400a17 	ldw	r21,40(sp)
    6310:	10c5c83a 	sub	r2,r2,r3
    6314:	dd000817 	ldw	r20,32(sp)
    6318:	003d4c06 	br	584c <__alt_data_end+0xff00584c>
    631c:	dc800f15 	stw	r18,60(sp)
    6320:	dcc01015 	stw	r19,64(sp)
    6324:	04000084 	movi	r16,2
    6328:	003bed06 	br	52e0 <__alt_data_end+0xff0052e0>
    632c:	d9000617 	ldw	r4,24(sp)
    6330:	203f0d26 	beq	r4,zero,5f68 <__alt_data_end+0xff005f68>
    6334:	d9800c17 	ldw	r6,48(sp)
    6338:	01bcab0e 	bge	zero,r6,55e8 <__alt_data_end+0xff0055e8>
    633c:	d9401017 	ldw	r5,64(sp)
    6340:	d9000f17 	ldw	r4,60(sp)
    6344:	000d883a 	mov	r6,zero
    6348:	01d00934 	movhi	r7,16420
    634c:	000d3180 	call	d318 <__muldf3>
    6350:	81000044 	addi	r4,r16,1
    6354:	d8800f15 	stw	r2,60(sp)
    6358:	d8c01015 	stw	r3,64(sp)
    635c:	000e3ac0 	call	e3ac <__floatsidf>
    6360:	d9800f17 	ldw	r6,60(sp)
    6364:	d9c01017 	ldw	r7,64(sp)
    6368:	1009883a 	mov	r4,r2
    636c:	180b883a 	mov	r5,r3
    6370:	000d3180 	call	d318 <__muldf3>
    6374:	01d00734 	movhi	r7,16412
    6378:	000d883a 	mov	r6,zero
    637c:	1009883a 	mov	r4,r2
    6380:	180b883a 	mov	r5,r3
    6384:	000bf2c0 	call	bf2c <__adddf3>
    6388:	d9c00517 	ldw	r7,20(sp)
    638c:	047f3034 	movhi	r17,64704
    6390:	1021883a 	mov	r16,r2
    6394:	39ffffc4 	addi	r7,r7,-1
    6398:	d9c01315 	stw	r7,76(sp)
    639c:	1c63883a 	add	r17,r3,r17
    63a0:	db000c17 	ldw	r12,48(sp)
    63a4:	003bea06 	br	5350 <__alt_data_end+0xff005350>
    63a8:	dc000915 	stw	r16,36(sp)
    63ac:	003e0e06 	br	5be8 <__alt_data_end+0xff005be8>
    63b0:	01000e44 	movi	r4,57
    63b4:	8825883a 	mov	r18,r17
    63b8:	9dc00044 	addi	r23,r19,1
    63bc:	99000005 	stb	r4,0(r19)
    63c0:	a023883a 	mov	r17,r20
    63c4:	dc000915 	stw	r16,36(sp)
    63c8:	003da406 	br	5a5c <__alt_data_end+0xff005a5c>
    63cc:	d9801417 	ldw	r6,80(sp)
    63d0:	d9c01517 	ldw	r7,84(sp)
    63d4:	0009883a 	mov	r4,zero
    63d8:	014ff834 	movhi	r5,16352
    63dc:	000da300 	call	da30 <__subdf3>
    63e0:	880d883a 	mov	r6,r17
    63e4:	a00f883a 	mov	r7,r20
    63e8:	1009883a 	mov	r4,r2
    63ec:	180b883a 	mov	r5,r3
    63f0:	000d1480 	call	d148 <__gedf2>
    63f4:	00bc7c0e 	bge	zero,r2,55e8 <__alt_data_end+0xff0055e8>
    63f8:	01000c04 	movi	r4,48
    63fc:	00000106 	br	6404 <_dtoa_r+0x1580>
    6400:	102f883a 	mov	r23,r2
    6404:	b8bfffc4 	addi	r2,r23,-1
    6408:	10c00007 	ldb	r3,0(r2)
    640c:	193ffc26 	beq	r3,r4,6400 <__alt_data_end+0xff006400>
    6410:	d9801317 	ldw	r6,76(sp)
    6414:	d9800515 	stw	r6,20(sp)
    6418:	003c4406 	br	552c <__alt_data_end+0xff00552c>
    641c:	d9801317 	ldw	r6,76(sp)
    6420:	d9800515 	stw	r6,20(sp)
    6424:	003cea06 	br	57d0 <__alt_data_end+0xff0057d0>
    6428:	dd800f17 	ldw	r22,60(sp)
    642c:	dcc01017 	ldw	r19,64(sp)
    6430:	dc801217 	ldw	r18,72(sp)
    6434:	003c6c06 	br	55e8 <__alt_data_end+0xff0055e8>
    6438:	903e031e 	bne	r18,zero,5c48 <__alt_data_end+0xff005c48>
    643c:	003ebb06 	br	5f2c <__alt_data_end+0xff005f2c>
    6440:	103e6c1e 	bne	r2,zero,5df4 <__alt_data_end+0xff005df4>
    6444:	4080004c 	andi	r2,r8,1
    6448:	103e6a26 	beq	r2,zero,5df4 <__alt_data_end+0xff005df4>
    644c:	003e6606 	br	5de8 <__alt_data_end+0xff005de8>
    6450:	d8c00317 	ldw	r3,12(sp)
    6454:	00800084 	movi	r2,2
    6458:	10c02916 	blt	r2,r3,6500 <_dtoa_r+0x167c>
    645c:	d9000c17 	ldw	r4,48(sp)
    6460:	003e8806 	br	5e84 <__alt_data_end+0xff005e84>
    6464:	04000084 	movi	r16,2
    6468:	003b9d06 	br	52e0 <__alt_data_end+0xff0052e0>
    646c:	d9001317 	ldw	r4,76(sp)
    6470:	d9000515 	stw	r4,20(sp)
    6474:	003cd606 	br	57d0 <__alt_data_end+0xff0057d0>
    6478:	d8801317 	ldw	r2,76(sp)
    647c:	d8800515 	stw	r2,20(sp)
    6480:	003c2a06 	br	552c <__alt_data_end+0xff00552c>
    6484:	d9800317 	ldw	r6,12(sp)
    6488:	00800084 	movi	r2,2
    648c:	11801516 	blt	r2,r6,64e4 <_dtoa_r+0x1660>
    6490:	d9c00c17 	ldw	r7,48(sp)
    6494:	d9c00615 	stw	r7,24(sp)
    6498:	003df706 	br	5c78 <__alt_data_end+0xff005c78>
    649c:	193d3926 	beq	r3,r4,5984 <__alt_data_end+0xff005984>
    64a0:	00c00f04 	movi	r3,60
    64a4:	1885c83a 	sub	r2,r3,r2
    64a8:	003ddf06 	br	5c28 <__alt_data_end+0xff005c28>
    64ac:	e009883a 	mov	r4,fp
    64b0:	e0001115 	stw	zero,68(fp)
    64b4:	000b883a 	mov	r5,zero
    64b8:	0007d140 	call	7d14 <_Balloc>
    64bc:	d8800715 	stw	r2,28(sp)
    64c0:	d8c00717 	ldw	r3,28(sp)
    64c4:	00bfffc4 	movi	r2,-1
    64c8:	01000044 	movi	r4,1
    64cc:	d8800c15 	stw	r2,48(sp)
    64d0:	e0c01015 	stw	r3,64(fp)
    64d4:	d9000b15 	stw	r4,44(sp)
    64d8:	d8800615 	stw	r2,24(sp)
    64dc:	d8002215 	stw	zero,136(sp)
    64e0:	003c4106 	br	55e8 <__alt_data_end+0xff0055e8>
    64e4:	d8c00c17 	ldw	r3,48(sp)
    64e8:	d8c00615 	stw	r3,24(sp)
    64ec:	003e7006 	br	5eb0 <__alt_data_end+0xff005eb0>
    64f0:	04400044 	movi	r17,1
    64f4:	003b2006 	br	5178 <__alt_data_end+0xff005178>
    64f8:	000b883a 	mov	r5,zero
    64fc:	003b3d06 	br	51f4 <__alt_data_end+0xff0051f4>
    6500:	d8800c17 	ldw	r2,48(sp)
    6504:	d8800615 	stw	r2,24(sp)
    6508:	003e6906 	br	5eb0 <__alt_data_end+0xff005eb0>

0000650c <__sflush_r>:
    650c:	2880030b 	ldhu	r2,12(r5)
    6510:	defffb04 	addi	sp,sp,-20
    6514:	dcc00315 	stw	r19,12(sp)
    6518:	dc400115 	stw	r17,4(sp)
    651c:	dfc00415 	stw	ra,16(sp)
    6520:	dc800215 	stw	r18,8(sp)
    6524:	dc000015 	stw	r16,0(sp)
    6528:	10c0020c 	andi	r3,r2,8
    652c:	2823883a 	mov	r17,r5
    6530:	2027883a 	mov	r19,r4
    6534:	1800311e 	bne	r3,zero,65fc <__sflush_r+0xf0>
    6538:	28c00117 	ldw	r3,4(r5)
    653c:	10820014 	ori	r2,r2,2048
    6540:	2880030d 	sth	r2,12(r5)
    6544:	00c04b0e 	bge	zero,r3,6674 <__sflush_r+0x168>
    6548:	8a000a17 	ldw	r8,40(r17)
    654c:	40002326 	beq	r8,zero,65dc <__sflush_r+0xd0>
    6550:	9c000017 	ldw	r16,0(r19)
    6554:	10c4000c 	andi	r3,r2,4096
    6558:	98000015 	stw	zero,0(r19)
    655c:	18004826 	beq	r3,zero,6680 <__sflush_r+0x174>
    6560:	89801417 	ldw	r6,80(r17)
    6564:	10c0010c 	andi	r3,r2,4
    6568:	18000626 	beq	r3,zero,6584 <__sflush_r+0x78>
    656c:	88c00117 	ldw	r3,4(r17)
    6570:	88800c17 	ldw	r2,48(r17)
    6574:	30cdc83a 	sub	r6,r6,r3
    6578:	10000226 	beq	r2,zero,6584 <__sflush_r+0x78>
    657c:	88800f17 	ldw	r2,60(r17)
    6580:	308dc83a 	sub	r6,r6,r2
    6584:	89400717 	ldw	r5,28(r17)
    6588:	000f883a 	mov	r7,zero
    658c:	9809883a 	mov	r4,r19
    6590:	403ee83a 	callr	r8
    6594:	00ffffc4 	movi	r3,-1
    6598:	10c04426 	beq	r2,r3,66ac <__sflush_r+0x1a0>
    659c:	88c0030b 	ldhu	r3,12(r17)
    65a0:	89000417 	ldw	r4,16(r17)
    65a4:	88000115 	stw	zero,4(r17)
    65a8:	197dffcc 	andi	r5,r3,63487
    65ac:	8940030d 	sth	r5,12(r17)
    65b0:	89000015 	stw	r4,0(r17)
    65b4:	18c4000c 	andi	r3,r3,4096
    65b8:	18002c1e 	bne	r3,zero,666c <__sflush_r+0x160>
    65bc:	89400c17 	ldw	r5,48(r17)
    65c0:	9c000015 	stw	r16,0(r19)
    65c4:	28000526 	beq	r5,zero,65dc <__sflush_r+0xd0>
    65c8:	88801004 	addi	r2,r17,64
    65cc:	28800226 	beq	r5,r2,65d8 <__sflush_r+0xcc>
    65d0:	9809883a 	mov	r4,r19
    65d4:	0006c780 	call	6c78 <_free_r>
    65d8:	88000c15 	stw	zero,48(r17)
    65dc:	0005883a 	mov	r2,zero
    65e0:	dfc00417 	ldw	ra,16(sp)
    65e4:	dcc00317 	ldw	r19,12(sp)
    65e8:	dc800217 	ldw	r18,8(sp)
    65ec:	dc400117 	ldw	r17,4(sp)
    65f0:	dc000017 	ldw	r16,0(sp)
    65f4:	dec00504 	addi	sp,sp,20
    65f8:	f800283a 	ret
    65fc:	2c800417 	ldw	r18,16(r5)
    6600:	903ff626 	beq	r18,zero,65dc <__alt_data_end+0xff0065dc>
    6604:	2c000017 	ldw	r16,0(r5)
    6608:	108000cc 	andi	r2,r2,3
    660c:	2c800015 	stw	r18,0(r5)
    6610:	84a1c83a 	sub	r16,r16,r18
    6614:	1000131e 	bne	r2,zero,6664 <__sflush_r+0x158>
    6618:	28800517 	ldw	r2,20(r5)
    661c:	88800215 	stw	r2,8(r17)
    6620:	04000316 	blt	zero,r16,6630 <__sflush_r+0x124>
    6624:	003fed06 	br	65dc <__alt_data_end+0xff0065dc>
    6628:	90a5883a 	add	r18,r18,r2
    662c:	043feb0e 	bge	zero,r16,65dc <__alt_data_end+0xff0065dc>
    6630:	88800917 	ldw	r2,36(r17)
    6634:	89400717 	ldw	r5,28(r17)
    6638:	800f883a 	mov	r7,r16
    663c:	900d883a 	mov	r6,r18
    6640:	9809883a 	mov	r4,r19
    6644:	103ee83a 	callr	r2
    6648:	80a1c83a 	sub	r16,r16,r2
    664c:	00bff616 	blt	zero,r2,6628 <__alt_data_end+0xff006628>
    6650:	88c0030b 	ldhu	r3,12(r17)
    6654:	00bfffc4 	movi	r2,-1
    6658:	18c01014 	ori	r3,r3,64
    665c:	88c0030d 	sth	r3,12(r17)
    6660:	003fdf06 	br	65e0 <__alt_data_end+0xff0065e0>
    6664:	0005883a 	mov	r2,zero
    6668:	003fec06 	br	661c <__alt_data_end+0xff00661c>
    666c:	88801415 	stw	r2,80(r17)
    6670:	003fd206 	br	65bc <__alt_data_end+0xff0065bc>
    6674:	28c00f17 	ldw	r3,60(r5)
    6678:	00ffb316 	blt	zero,r3,6548 <__alt_data_end+0xff006548>
    667c:	003fd706 	br	65dc <__alt_data_end+0xff0065dc>
    6680:	89400717 	ldw	r5,28(r17)
    6684:	000d883a 	mov	r6,zero
    6688:	01c00044 	movi	r7,1
    668c:	9809883a 	mov	r4,r19
    6690:	403ee83a 	callr	r8
    6694:	100d883a 	mov	r6,r2
    6698:	00bfffc4 	movi	r2,-1
    669c:	30801426 	beq	r6,r2,66f0 <__sflush_r+0x1e4>
    66a0:	8880030b 	ldhu	r2,12(r17)
    66a4:	8a000a17 	ldw	r8,40(r17)
    66a8:	003fae06 	br	6564 <__alt_data_end+0xff006564>
    66ac:	98c00017 	ldw	r3,0(r19)
    66b0:	183fba26 	beq	r3,zero,659c <__alt_data_end+0xff00659c>
    66b4:	01000744 	movi	r4,29
    66b8:	19000626 	beq	r3,r4,66d4 <__sflush_r+0x1c8>
    66bc:	01000584 	movi	r4,22
    66c0:	19000426 	beq	r3,r4,66d4 <__sflush_r+0x1c8>
    66c4:	88c0030b 	ldhu	r3,12(r17)
    66c8:	18c01014 	ori	r3,r3,64
    66cc:	88c0030d 	sth	r3,12(r17)
    66d0:	003fc306 	br	65e0 <__alt_data_end+0xff0065e0>
    66d4:	8880030b 	ldhu	r2,12(r17)
    66d8:	88c00417 	ldw	r3,16(r17)
    66dc:	88000115 	stw	zero,4(r17)
    66e0:	10bdffcc 	andi	r2,r2,63487
    66e4:	8880030d 	sth	r2,12(r17)
    66e8:	88c00015 	stw	r3,0(r17)
    66ec:	003fb306 	br	65bc <__alt_data_end+0xff0065bc>
    66f0:	98800017 	ldw	r2,0(r19)
    66f4:	103fea26 	beq	r2,zero,66a0 <__alt_data_end+0xff0066a0>
    66f8:	00c00744 	movi	r3,29
    66fc:	10c00226 	beq	r2,r3,6708 <__sflush_r+0x1fc>
    6700:	00c00584 	movi	r3,22
    6704:	10c0031e 	bne	r2,r3,6714 <__sflush_r+0x208>
    6708:	9c000015 	stw	r16,0(r19)
    670c:	0005883a 	mov	r2,zero
    6710:	003fb306 	br	65e0 <__alt_data_end+0xff0065e0>
    6714:	88c0030b 	ldhu	r3,12(r17)
    6718:	3005883a 	mov	r2,r6
    671c:	18c01014 	ori	r3,r3,64
    6720:	88c0030d 	sth	r3,12(r17)
    6724:	003fae06 	br	65e0 <__alt_data_end+0xff0065e0>

00006728 <_fflush_r>:
    6728:	defffd04 	addi	sp,sp,-12
    672c:	dc000115 	stw	r16,4(sp)
    6730:	dfc00215 	stw	ra,8(sp)
    6734:	2021883a 	mov	r16,r4
    6738:	20000226 	beq	r4,zero,6744 <_fflush_r+0x1c>
    673c:	20800e17 	ldw	r2,56(r4)
    6740:	10000c26 	beq	r2,zero,6774 <_fflush_r+0x4c>
    6744:	2880030f 	ldh	r2,12(r5)
    6748:	1000051e 	bne	r2,zero,6760 <_fflush_r+0x38>
    674c:	0005883a 	mov	r2,zero
    6750:	dfc00217 	ldw	ra,8(sp)
    6754:	dc000117 	ldw	r16,4(sp)
    6758:	dec00304 	addi	sp,sp,12
    675c:	f800283a 	ret
    6760:	8009883a 	mov	r4,r16
    6764:	dfc00217 	ldw	ra,8(sp)
    6768:	dc000117 	ldw	r16,4(sp)
    676c:	dec00304 	addi	sp,sp,12
    6770:	000650c1 	jmpi	650c <__sflush_r>
    6774:	d9400015 	stw	r5,0(sp)
    6778:	0006b040 	call	6b04 <__sinit>
    677c:	d9400017 	ldw	r5,0(sp)
    6780:	003ff006 	br	6744 <__alt_data_end+0xff006744>

00006784 <fflush>:
    6784:	20000526 	beq	r4,zero,679c <fflush+0x18>
    6788:	00800074 	movhi	r2,1
    678c:	10889004 	addi	r2,r2,8768
    6790:	200b883a 	mov	r5,r4
    6794:	11000017 	ldw	r4,0(r2)
    6798:	00067281 	jmpi	6728 <_fflush_r>
    679c:	00800074 	movhi	r2,1
    67a0:	10888f04 	addi	r2,r2,8764
    67a4:	11000017 	ldw	r4,0(r2)
    67a8:	01400034 	movhi	r5,0
    67ac:	2959ca04 	addi	r5,r5,26408
    67b0:	00075081 	jmpi	7508 <_fwalk_reent>

000067b4 <__fp_unlock>:
    67b4:	0005883a 	mov	r2,zero
    67b8:	f800283a 	ret

000067bc <_cleanup_r>:
    67bc:	01400074 	movhi	r5,1
    67c0:	296b3004 	addi	r5,r5,-21312
    67c4:	00075081 	jmpi	7508 <_fwalk_reent>

000067c8 <__sinit.part.1>:
    67c8:	defff704 	addi	sp,sp,-36
    67cc:	00c00034 	movhi	r3,0
    67d0:	dfc00815 	stw	ra,32(sp)
    67d4:	ddc00715 	stw	r23,28(sp)
    67d8:	dd800615 	stw	r22,24(sp)
    67dc:	dd400515 	stw	r21,20(sp)
    67e0:	dd000415 	stw	r20,16(sp)
    67e4:	dcc00315 	stw	r19,12(sp)
    67e8:	dc800215 	stw	r18,8(sp)
    67ec:	dc400115 	stw	r17,4(sp)
    67f0:	dc000015 	stw	r16,0(sp)
    67f4:	18d9ef04 	addi	r3,r3,26556
    67f8:	24000117 	ldw	r16,4(r4)
    67fc:	20c00f15 	stw	r3,60(r4)
    6800:	2080bb04 	addi	r2,r4,748
    6804:	00c000c4 	movi	r3,3
    6808:	20c0b915 	stw	r3,740(r4)
    680c:	2080ba15 	stw	r2,744(r4)
    6810:	2000b815 	stw	zero,736(r4)
    6814:	05c00204 	movi	r23,8
    6818:	00800104 	movi	r2,4
    681c:	2025883a 	mov	r18,r4
    6820:	b80d883a 	mov	r6,r23
    6824:	81001704 	addi	r4,r16,92
    6828:	000b883a 	mov	r5,zero
    682c:	80000015 	stw	zero,0(r16)
    6830:	80000115 	stw	zero,4(r16)
    6834:	80000215 	stw	zero,8(r16)
    6838:	8080030d 	sth	r2,12(r16)
    683c:	80001915 	stw	zero,100(r16)
    6840:	8000038d 	sth	zero,14(r16)
    6844:	80000415 	stw	zero,16(r16)
    6848:	80000515 	stw	zero,20(r16)
    684c:	80000615 	stw	zero,24(r16)
    6850:	0007bec0 	call	7bec <memset>
    6854:	05800074 	movhi	r22,1
    6858:	94400217 	ldw	r17,8(r18)
    685c:	05400074 	movhi	r21,1
    6860:	05000074 	movhi	r20,1
    6864:	04c00074 	movhi	r19,1
    6868:	b5a4ba04 	addi	r22,r22,-27928
    686c:	ad64d104 	addi	r21,r21,-27836
    6870:	a524f004 	addi	r20,r20,-27712
    6874:	9ce50704 	addi	r19,r19,-27620
    6878:	85800815 	stw	r22,32(r16)
    687c:	85400915 	stw	r21,36(r16)
    6880:	85000a15 	stw	r20,40(r16)
    6884:	84c00b15 	stw	r19,44(r16)
    6888:	84000715 	stw	r16,28(r16)
    688c:	00800284 	movi	r2,10
    6890:	8880030d 	sth	r2,12(r17)
    6894:	00800044 	movi	r2,1
    6898:	b80d883a 	mov	r6,r23
    689c:	89001704 	addi	r4,r17,92
    68a0:	000b883a 	mov	r5,zero
    68a4:	88000015 	stw	zero,0(r17)
    68a8:	88000115 	stw	zero,4(r17)
    68ac:	88000215 	stw	zero,8(r17)
    68b0:	88001915 	stw	zero,100(r17)
    68b4:	8880038d 	sth	r2,14(r17)
    68b8:	88000415 	stw	zero,16(r17)
    68bc:	88000515 	stw	zero,20(r17)
    68c0:	88000615 	stw	zero,24(r17)
    68c4:	0007bec0 	call	7bec <memset>
    68c8:	94000317 	ldw	r16,12(r18)
    68cc:	00800484 	movi	r2,18
    68d0:	8c400715 	stw	r17,28(r17)
    68d4:	8d800815 	stw	r22,32(r17)
    68d8:	8d400915 	stw	r21,36(r17)
    68dc:	8d000a15 	stw	r20,40(r17)
    68e0:	8cc00b15 	stw	r19,44(r17)
    68e4:	8080030d 	sth	r2,12(r16)
    68e8:	00800084 	movi	r2,2
    68ec:	80000015 	stw	zero,0(r16)
    68f0:	80000115 	stw	zero,4(r16)
    68f4:	80000215 	stw	zero,8(r16)
    68f8:	80001915 	stw	zero,100(r16)
    68fc:	8080038d 	sth	r2,14(r16)
    6900:	80000415 	stw	zero,16(r16)
    6904:	80000515 	stw	zero,20(r16)
    6908:	80000615 	stw	zero,24(r16)
    690c:	b80d883a 	mov	r6,r23
    6910:	000b883a 	mov	r5,zero
    6914:	81001704 	addi	r4,r16,92
    6918:	0007bec0 	call	7bec <memset>
    691c:	00800044 	movi	r2,1
    6920:	84000715 	stw	r16,28(r16)
    6924:	85800815 	stw	r22,32(r16)
    6928:	85400915 	stw	r21,36(r16)
    692c:	85000a15 	stw	r20,40(r16)
    6930:	84c00b15 	stw	r19,44(r16)
    6934:	90800e15 	stw	r2,56(r18)
    6938:	dfc00817 	ldw	ra,32(sp)
    693c:	ddc00717 	ldw	r23,28(sp)
    6940:	dd800617 	ldw	r22,24(sp)
    6944:	dd400517 	ldw	r21,20(sp)
    6948:	dd000417 	ldw	r20,16(sp)
    694c:	dcc00317 	ldw	r19,12(sp)
    6950:	dc800217 	ldw	r18,8(sp)
    6954:	dc400117 	ldw	r17,4(sp)
    6958:	dc000017 	ldw	r16,0(sp)
    695c:	dec00904 	addi	sp,sp,36
    6960:	f800283a 	ret

00006964 <__fp_lock>:
    6964:	0005883a 	mov	r2,zero
    6968:	f800283a 	ret

0000696c <__sfmoreglue>:
    696c:	defffc04 	addi	sp,sp,-16
    6970:	dc400115 	stw	r17,4(sp)
    6974:	2c7fffc4 	addi	r17,r5,-1
    6978:	8c401a24 	muli	r17,r17,104
    697c:	dc800215 	stw	r18,8(sp)
    6980:	2825883a 	mov	r18,r5
    6984:	89401d04 	addi	r5,r17,116
    6988:	dc000015 	stw	r16,0(sp)
    698c:	dfc00315 	stw	ra,12(sp)
    6990:	0001e280 	call	1e28 <_malloc_r>
    6994:	1021883a 	mov	r16,r2
    6998:	10000726 	beq	r2,zero,69b8 <__sfmoreglue+0x4c>
    699c:	11000304 	addi	r4,r2,12
    69a0:	10000015 	stw	zero,0(r2)
    69a4:	14800115 	stw	r18,4(r2)
    69a8:	11000215 	stw	r4,8(r2)
    69ac:	89801a04 	addi	r6,r17,104
    69b0:	000b883a 	mov	r5,zero
    69b4:	0007bec0 	call	7bec <memset>
    69b8:	8005883a 	mov	r2,r16
    69bc:	dfc00317 	ldw	ra,12(sp)
    69c0:	dc800217 	ldw	r18,8(sp)
    69c4:	dc400117 	ldw	r17,4(sp)
    69c8:	dc000017 	ldw	r16,0(sp)
    69cc:	dec00404 	addi	sp,sp,16
    69d0:	f800283a 	ret

000069d4 <__sfp>:
    69d4:	defffb04 	addi	sp,sp,-20
    69d8:	dc000015 	stw	r16,0(sp)
    69dc:	04000074 	movhi	r16,1
    69e0:	84088f04 	addi	r16,r16,8764
    69e4:	dcc00315 	stw	r19,12(sp)
    69e8:	2027883a 	mov	r19,r4
    69ec:	81000017 	ldw	r4,0(r16)
    69f0:	dfc00415 	stw	ra,16(sp)
    69f4:	dc800215 	stw	r18,8(sp)
    69f8:	20800e17 	ldw	r2,56(r4)
    69fc:	dc400115 	stw	r17,4(sp)
    6a00:	1000021e 	bne	r2,zero,6a0c <__sfp+0x38>
    6a04:	00067c80 	call	67c8 <__sinit.part.1>
    6a08:	81000017 	ldw	r4,0(r16)
    6a0c:	2480b804 	addi	r18,r4,736
    6a10:	047fffc4 	movi	r17,-1
    6a14:	91000117 	ldw	r4,4(r18)
    6a18:	94000217 	ldw	r16,8(r18)
    6a1c:	213fffc4 	addi	r4,r4,-1
    6a20:	20000a16 	blt	r4,zero,6a4c <__sfp+0x78>
    6a24:	8080030f 	ldh	r2,12(r16)
    6a28:	10000c26 	beq	r2,zero,6a5c <__sfp+0x88>
    6a2c:	80c01d04 	addi	r3,r16,116
    6a30:	00000206 	br	6a3c <__sfp+0x68>
    6a34:	18bfe60f 	ldh	r2,-104(r3)
    6a38:	10000826 	beq	r2,zero,6a5c <__sfp+0x88>
    6a3c:	213fffc4 	addi	r4,r4,-1
    6a40:	1c3ffd04 	addi	r16,r3,-12
    6a44:	18c01a04 	addi	r3,r3,104
    6a48:	247ffa1e 	bne	r4,r17,6a34 <__alt_data_end+0xff006a34>
    6a4c:	90800017 	ldw	r2,0(r18)
    6a50:	10001d26 	beq	r2,zero,6ac8 <__sfp+0xf4>
    6a54:	1025883a 	mov	r18,r2
    6a58:	003fee06 	br	6a14 <__alt_data_end+0xff006a14>
    6a5c:	00bfffc4 	movi	r2,-1
    6a60:	8080038d 	sth	r2,14(r16)
    6a64:	00800044 	movi	r2,1
    6a68:	8080030d 	sth	r2,12(r16)
    6a6c:	80001915 	stw	zero,100(r16)
    6a70:	80000015 	stw	zero,0(r16)
    6a74:	80000215 	stw	zero,8(r16)
    6a78:	80000115 	stw	zero,4(r16)
    6a7c:	80000415 	stw	zero,16(r16)
    6a80:	80000515 	stw	zero,20(r16)
    6a84:	80000615 	stw	zero,24(r16)
    6a88:	01800204 	movi	r6,8
    6a8c:	000b883a 	mov	r5,zero
    6a90:	81001704 	addi	r4,r16,92
    6a94:	0007bec0 	call	7bec <memset>
    6a98:	8005883a 	mov	r2,r16
    6a9c:	80000c15 	stw	zero,48(r16)
    6aa0:	80000d15 	stw	zero,52(r16)
    6aa4:	80001115 	stw	zero,68(r16)
    6aa8:	80001215 	stw	zero,72(r16)
    6aac:	dfc00417 	ldw	ra,16(sp)
    6ab0:	dcc00317 	ldw	r19,12(sp)
    6ab4:	dc800217 	ldw	r18,8(sp)
    6ab8:	dc400117 	ldw	r17,4(sp)
    6abc:	dc000017 	ldw	r16,0(sp)
    6ac0:	dec00504 	addi	sp,sp,20
    6ac4:	f800283a 	ret
    6ac8:	01400104 	movi	r5,4
    6acc:	9809883a 	mov	r4,r19
    6ad0:	000696c0 	call	696c <__sfmoreglue>
    6ad4:	90800015 	stw	r2,0(r18)
    6ad8:	103fde1e 	bne	r2,zero,6a54 <__alt_data_end+0xff006a54>
    6adc:	00800304 	movi	r2,12
    6ae0:	98800015 	stw	r2,0(r19)
    6ae4:	0005883a 	mov	r2,zero
    6ae8:	003ff006 	br	6aac <__alt_data_end+0xff006aac>

00006aec <_cleanup>:
    6aec:	00800074 	movhi	r2,1
    6af0:	10888f04 	addi	r2,r2,8764
    6af4:	11000017 	ldw	r4,0(r2)
    6af8:	01400074 	movhi	r5,1
    6afc:	296b3004 	addi	r5,r5,-21312
    6b00:	00075081 	jmpi	7508 <_fwalk_reent>

00006b04 <__sinit>:
    6b04:	20800e17 	ldw	r2,56(r4)
    6b08:	10000126 	beq	r2,zero,6b10 <__sinit+0xc>
    6b0c:	f800283a 	ret
    6b10:	00067c81 	jmpi	67c8 <__sinit.part.1>

00006b14 <__sfp_lock_acquire>:
    6b14:	f800283a 	ret

00006b18 <__sfp_lock_release>:
    6b18:	f800283a 	ret

00006b1c <__sinit_lock_acquire>:
    6b1c:	f800283a 	ret

00006b20 <__sinit_lock_release>:
    6b20:	f800283a 	ret

00006b24 <__fp_lock_all>:
    6b24:	00800074 	movhi	r2,1
    6b28:	10889004 	addi	r2,r2,8768
    6b2c:	11000017 	ldw	r4,0(r2)
    6b30:	01400034 	movhi	r5,0
    6b34:	295a5904 	addi	r5,r5,26980
    6b38:	00074441 	jmpi	7444 <_fwalk>

00006b3c <__fp_unlock_all>:
    6b3c:	00800074 	movhi	r2,1
    6b40:	10889004 	addi	r2,r2,8768
    6b44:	11000017 	ldw	r4,0(r2)
    6b48:	01400034 	movhi	r5,0
    6b4c:	2959ed04 	addi	r5,r5,26548
    6b50:	00074441 	jmpi	7444 <_fwalk>

00006b54 <_malloc_trim_r>:
    6b54:	defffb04 	addi	sp,sp,-20
    6b58:	dcc00315 	stw	r19,12(sp)
    6b5c:	04c00074 	movhi	r19,1
    6b60:	dc800215 	stw	r18,8(sp)
    6b64:	dc400115 	stw	r17,4(sp)
    6b68:	dc000015 	stw	r16,0(sp)
    6b6c:	dfc00415 	stw	ra,16(sp)
    6b70:	2821883a 	mov	r16,r5
    6b74:	9cc1e204 	addi	r19,r19,1928
    6b78:	2025883a 	mov	r18,r4
    6b7c:	000e8fc0 	call	e8fc <__malloc_lock>
    6b80:	98800217 	ldw	r2,8(r19)
    6b84:	14400117 	ldw	r17,4(r2)
    6b88:	00bfff04 	movi	r2,-4
    6b8c:	88a2703a 	and	r17,r17,r2
    6b90:	8c21c83a 	sub	r16,r17,r16
    6b94:	8403fbc4 	addi	r16,r16,4079
    6b98:	8020d33a 	srli	r16,r16,12
    6b9c:	0083ffc4 	movi	r2,4095
    6ba0:	843fffc4 	addi	r16,r16,-1
    6ba4:	8020933a 	slli	r16,r16,12
    6ba8:	1400060e 	bge	r2,r16,6bc4 <_malloc_trim_r+0x70>
    6bac:	000b883a 	mov	r5,zero
    6bb0:	9009883a 	mov	r4,r18
    6bb4:	00027740 	call	2774 <_sbrk_r>
    6bb8:	98c00217 	ldw	r3,8(r19)
    6bbc:	1c47883a 	add	r3,r3,r17
    6bc0:	10c00a26 	beq	r2,r3,6bec <_malloc_trim_r+0x98>
    6bc4:	9009883a 	mov	r4,r18
    6bc8:	000e9000 	call	e900 <__malloc_unlock>
    6bcc:	0005883a 	mov	r2,zero
    6bd0:	dfc00417 	ldw	ra,16(sp)
    6bd4:	dcc00317 	ldw	r19,12(sp)
    6bd8:	dc800217 	ldw	r18,8(sp)
    6bdc:	dc400117 	ldw	r17,4(sp)
    6be0:	dc000017 	ldw	r16,0(sp)
    6be4:	dec00504 	addi	sp,sp,20
    6be8:	f800283a 	ret
    6bec:	040bc83a 	sub	r5,zero,r16
    6bf0:	9009883a 	mov	r4,r18
    6bf4:	00027740 	call	2774 <_sbrk_r>
    6bf8:	00ffffc4 	movi	r3,-1
    6bfc:	10c00d26 	beq	r2,r3,6c34 <_malloc_trim_r+0xe0>
    6c00:	00c00074 	movhi	r3,1
    6c04:	18cfb204 	addi	r3,r3,16072
    6c08:	18800017 	ldw	r2,0(r3)
    6c0c:	99000217 	ldw	r4,8(r19)
    6c10:	8c23c83a 	sub	r17,r17,r16
    6c14:	8c400054 	ori	r17,r17,1
    6c18:	1421c83a 	sub	r16,r2,r16
    6c1c:	24400115 	stw	r17,4(r4)
    6c20:	9009883a 	mov	r4,r18
    6c24:	1c000015 	stw	r16,0(r3)
    6c28:	000e9000 	call	e900 <__malloc_unlock>
    6c2c:	00800044 	movi	r2,1
    6c30:	003fe706 	br	6bd0 <__alt_data_end+0xff006bd0>
    6c34:	000b883a 	mov	r5,zero
    6c38:	9009883a 	mov	r4,r18
    6c3c:	00027740 	call	2774 <_sbrk_r>
    6c40:	99000217 	ldw	r4,8(r19)
    6c44:	014003c4 	movi	r5,15
    6c48:	1107c83a 	sub	r3,r2,r4
    6c4c:	28ffdd0e 	bge	r5,r3,6bc4 <__alt_data_end+0xff006bc4>
    6c50:	01400074 	movhi	r5,1
    6c54:	29488d04 	addi	r5,r5,8756
    6c58:	29400017 	ldw	r5,0(r5)
    6c5c:	18c00054 	ori	r3,r3,1
    6c60:	20c00115 	stw	r3,4(r4)
    6c64:	00c00074 	movhi	r3,1
    6c68:	1145c83a 	sub	r2,r2,r5
    6c6c:	18cfb204 	addi	r3,r3,16072
    6c70:	18800015 	stw	r2,0(r3)
    6c74:	003fd306 	br	6bc4 <__alt_data_end+0xff006bc4>

00006c78 <_free_r>:
    6c78:	28004126 	beq	r5,zero,6d80 <_free_r+0x108>
    6c7c:	defffd04 	addi	sp,sp,-12
    6c80:	dc400115 	stw	r17,4(sp)
    6c84:	dc000015 	stw	r16,0(sp)
    6c88:	2023883a 	mov	r17,r4
    6c8c:	2821883a 	mov	r16,r5
    6c90:	dfc00215 	stw	ra,8(sp)
    6c94:	000e8fc0 	call	e8fc <__malloc_lock>
    6c98:	81ffff17 	ldw	r7,-4(r16)
    6c9c:	00bfff84 	movi	r2,-2
    6ca0:	01000074 	movhi	r4,1
    6ca4:	81bffe04 	addi	r6,r16,-8
    6ca8:	3884703a 	and	r2,r7,r2
    6cac:	2101e204 	addi	r4,r4,1928
    6cb0:	308b883a 	add	r5,r6,r2
    6cb4:	2a400117 	ldw	r9,4(r5)
    6cb8:	22000217 	ldw	r8,8(r4)
    6cbc:	00ffff04 	movi	r3,-4
    6cc0:	48c6703a 	and	r3,r9,r3
    6cc4:	2a005726 	beq	r5,r8,6e24 <_free_r+0x1ac>
    6cc8:	28c00115 	stw	r3,4(r5)
    6ccc:	39c0004c 	andi	r7,r7,1
    6cd0:	3800091e 	bne	r7,zero,6cf8 <_free_r+0x80>
    6cd4:	823ffe17 	ldw	r8,-8(r16)
    6cd8:	22400204 	addi	r9,r4,8
    6cdc:	320dc83a 	sub	r6,r6,r8
    6ce0:	31c00217 	ldw	r7,8(r6)
    6ce4:	1205883a 	add	r2,r2,r8
    6ce8:	3a406526 	beq	r7,r9,6e80 <_free_r+0x208>
    6cec:	32000317 	ldw	r8,12(r6)
    6cf0:	3a000315 	stw	r8,12(r7)
    6cf4:	41c00215 	stw	r7,8(r8)
    6cf8:	28cf883a 	add	r7,r5,r3
    6cfc:	39c00117 	ldw	r7,4(r7)
    6d00:	39c0004c 	andi	r7,r7,1
    6d04:	38003a26 	beq	r7,zero,6df0 <_free_r+0x178>
    6d08:	10c00054 	ori	r3,r2,1
    6d0c:	30c00115 	stw	r3,4(r6)
    6d10:	3087883a 	add	r3,r6,r2
    6d14:	18800015 	stw	r2,0(r3)
    6d18:	00c07fc4 	movi	r3,511
    6d1c:	18801936 	bltu	r3,r2,6d84 <_free_r+0x10c>
    6d20:	1004d0fa 	srli	r2,r2,3
    6d24:	01c00044 	movi	r7,1
    6d28:	21400117 	ldw	r5,4(r4)
    6d2c:	10c00044 	addi	r3,r2,1
    6d30:	18c7883a 	add	r3,r3,r3
    6d34:	1005d0ba 	srai	r2,r2,2
    6d38:	18c7883a 	add	r3,r3,r3
    6d3c:	18c7883a 	add	r3,r3,r3
    6d40:	1907883a 	add	r3,r3,r4
    6d44:	3884983a 	sll	r2,r7,r2
    6d48:	19c00017 	ldw	r7,0(r3)
    6d4c:	1a3ffe04 	addi	r8,r3,-8
    6d50:	1144b03a 	or	r2,r2,r5
    6d54:	32000315 	stw	r8,12(r6)
    6d58:	31c00215 	stw	r7,8(r6)
    6d5c:	20800115 	stw	r2,4(r4)
    6d60:	19800015 	stw	r6,0(r3)
    6d64:	39800315 	stw	r6,12(r7)
    6d68:	8809883a 	mov	r4,r17
    6d6c:	dfc00217 	ldw	ra,8(sp)
    6d70:	dc400117 	ldw	r17,4(sp)
    6d74:	dc000017 	ldw	r16,0(sp)
    6d78:	dec00304 	addi	sp,sp,12
    6d7c:	000e9001 	jmpi	e900 <__malloc_unlock>
    6d80:	f800283a 	ret
    6d84:	100ad27a 	srli	r5,r2,9
    6d88:	00c00104 	movi	r3,4
    6d8c:	19404a36 	bltu	r3,r5,6eb8 <_free_r+0x240>
    6d90:	100ad1ba 	srli	r5,r2,6
    6d94:	28c00e44 	addi	r3,r5,57
    6d98:	18c7883a 	add	r3,r3,r3
    6d9c:	29400e04 	addi	r5,r5,56
    6da0:	18c7883a 	add	r3,r3,r3
    6da4:	18c7883a 	add	r3,r3,r3
    6da8:	1909883a 	add	r4,r3,r4
    6dac:	20c00017 	ldw	r3,0(r4)
    6db0:	01c00074 	movhi	r7,1
    6db4:	213ffe04 	addi	r4,r4,-8
    6db8:	39c1e204 	addi	r7,r7,1928
    6dbc:	20c04426 	beq	r4,r3,6ed0 <_free_r+0x258>
    6dc0:	01ffff04 	movi	r7,-4
    6dc4:	19400117 	ldw	r5,4(r3)
    6dc8:	29ca703a 	and	r5,r5,r7
    6dcc:	1140022e 	bgeu	r2,r5,6dd8 <_free_r+0x160>
    6dd0:	18c00217 	ldw	r3,8(r3)
    6dd4:	20fffb1e 	bne	r4,r3,6dc4 <__alt_data_end+0xff006dc4>
    6dd8:	19000317 	ldw	r4,12(r3)
    6ddc:	31000315 	stw	r4,12(r6)
    6de0:	30c00215 	stw	r3,8(r6)
    6de4:	21800215 	stw	r6,8(r4)
    6de8:	19800315 	stw	r6,12(r3)
    6dec:	003fde06 	br	6d68 <__alt_data_end+0xff006d68>
    6df0:	29c00217 	ldw	r7,8(r5)
    6df4:	10c5883a 	add	r2,r2,r3
    6df8:	00c00074 	movhi	r3,1
    6dfc:	18c1e404 	addi	r3,r3,1936
    6e00:	38c03b26 	beq	r7,r3,6ef0 <_free_r+0x278>
    6e04:	2a000317 	ldw	r8,12(r5)
    6e08:	11400054 	ori	r5,r2,1
    6e0c:	3087883a 	add	r3,r6,r2
    6e10:	3a000315 	stw	r8,12(r7)
    6e14:	41c00215 	stw	r7,8(r8)
    6e18:	31400115 	stw	r5,4(r6)
    6e1c:	18800015 	stw	r2,0(r3)
    6e20:	003fbd06 	br	6d18 <__alt_data_end+0xff006d18>
    6e24:	39c0004c 	andi	r7,r7,1
    6e28:	10c5883a 	add	r2,r2,r3
    6e2c:	3800071e 	bne	r7,zero,6e4c <_free_r+0x1d4>
    6e30:	81fffe17 	ldw	r7,-8(r16)
    6e34:	31cdc83a 	sub	r6,r6,r7
    6e38:	30c00317 	ldw	r3,12(r6)
    6e3c:	31400217 	ldw	r5,8(r6)
    6e40:	11c5883a 	add	r2,r2,r7
    6e44:	28c00315 	stw	r3,12(r5)
    6e48:	19400215 	stw	r5,8(r3)
    6e4c:	10c00054 	ori	r3,r2,1
    6e50:	30c00115 	stw	r3,4(r6)
    6e54:	00c00074 	movhi	r3,1
    6e58:	18c88e04 	addi	r3,r3,8760
    6e5c:	18c00017 	ldw	r3,0(r3)
    6e60:	21800215 	stw	r6,8(r4)
    6e64:	10ffc036 	bltu	r2,r3,6d68 <__alt_data_end+0xff006d68>
    6e68:	00800074 	movhi	r2,1
    6e6c:	108fa404 	addi	r2,r2,16016
    6e70:	11400017 	ldw	r5,0(r2)
    6e74:	8809883a 	mov	r4,r17
    6e78:	0006b540 	call	6b54 <_malloc_trim_r>
    6e7c:	003fba06 	br	6d68 <__alt_data_end+0xff006d68>
    6e80:	28c9883a 	add	r4,r5,r3
    6e84:	21000117 	ldw	r4,4(r4)
    6e88:	2100004c 	andi	r4,r4,1
    6e8c:	2000391e 	bne	r4,zero,6f74 <_free_r+0x2fc>
    6e90:	29c00217 	ldw	r7,8(r5)
    6e94:	29000317 	ldw	r4,12(r5)
    6e98:	1885883a 	add	r2,r3,r2
    6e9c:	10c00054 	ori	r3,r2,1
    6ea0:	39000315 	stw	r4,12(r7)
    6ea4:	21c00215 	stw	r7,8(r4)
    6ea8:	30c00115 	stw	r3,4(r6)
    6eac:	308d883a 	add	r6,r6,r2
    6eb0:	30800015 	stw	r2,0(r6)
    6eb4:	003fac06 	br	6d68 <__alt_data_end+0xff006d68>
    6eb8:	00c00504 	movi	r3,20
    6ebc:	19401536 	bltu	r3,r5,6f14 <_free_r+0x29c>
    6ec0:	28c01704 	addi	r3,r5,92
    6ec4:	18c7883a 	add	r3,r3,r3
    6ec8:	294016c4 	addi	r5,r5,91
    6ecc:	003fb406 	br	6da0 <__alt_data_end+0xff006da0>
    6ed0:	280bd0ba 	srai	r5,r5,2
    6ed4:	00c00044 	movi	r3,1
    6ed8:	38800117 	ldw	r2,4(r7)
    6edc:	194a983a 	sll	r5,r3,r5
    6ee0:	2007883a 	mov	r3,r4
    6ee4:	2884b03a 	or	r2,r5,r2
    6ee8:	38800115 	stw	r2,4(r7)
    6eec:	003fbb06 	br	6ddc <__alt_data_end+0xff006ddc>
    6ef0:	21800515 	stw	r6,20(r4)
    6ef4:	21800415 	stw	r6,16(r4)
    6ef8:	10c00054 	ori	r3,r2,1
    6efc:	31c00315 	stw	r7,12(r6)
    6f00:	31c00215 	stw	r7,8(r6)
    6f04:	30c00115 	stw	r3,4(r6)
    6f08:	308d883a 	add	r6,r6,r2
    6f0c:	30800015 	stw	r2,0(r6)
    6f10:	003f9506 	br	6d68 <__alt_data_end+0xff006d68>
    6f14:	00c01504 	movi	r3,84
    6f18:	19400536 	bltu	r3,r5,6f30 <_free_r+0x2b8>
    6f1c:	100ad33a 	srli	r5,r2,12
    6f20:	28c01bc4 	addi	r3,r5,111
    6f24:	18c7883a 	add	r3,r3,r3
    6f28:	29401b84 	addi	r5,r5,110
    6f2c:	003f9c06 	br	6da0 <__alt_data_end+0xff006da0>
    6f30:	00c05504 	movi	r3,340
    6f34:	19400536 	bltu	r3,r5,6f4c <_free_r+0x2d4>
    6f38:	100ad3fa 	srli	r5,r2,15
    6f3c:	28c01e04 	addi	r3,r5,120
    6f40:	18c7883a 	add	r3,r3,r3
    6f44:	29401dc4 	addi	r5,r5,119
    6f48:	003f9506 	br	6da0 <__alt_data_end+0xff006da0>
    6f4c:	00c15504 	movi	r3,1364
    6f50:	19400536 	bltu	r3,r5,6f68 <_free_r+0x2f0>
    6f54:	100ad4ba 	srli	r5,r2,18
    6f58:	28c01f44 	addi	r3,r5,125
    6f5c:	18c7883a 	add	r3,r3,r3
    6f60:	29401f04 	addi	r5,r5,124
    6f64:	003f8e06 	br	6da0 <__alt_data_end+0xff006da0>
    6f68:	00c03f84 	movi	r3,254
    6f6c:	01401f84 	movi	r5,126
    6f70:	003f8b06 	br	6da0 <__alt_data_end+0xff006da0>
    6f74:	10c00054 	ori	r3,r2,1
    6f78:	30c00115 	stw	r3,4(r6)
    6f7c:	308d883a 	add	r6,r6,r2
    6f80:	30800015 	stw	r2,0(r6)
    6f84:	003f7806 	br	6d68 <__alt_data_end+0xff006d68>

00006f88 <__sfvwrite_r>:
    6f88:	30800217 	ldw	r2,8(r6)
    6f8c:	10006726 	beq	r2,zero,712c <__sfvwrite_r+0x1a4>
    6f90:	28c0030b 	ldhu	r3,12(r5)
    6f94:	defff404 	addi	sp,sp,-48
    6f98:	dd400715 	stw	r21,28(sp)
    6f9c:	dd000615 	stw	r20,24(sp)
    6fa0:	dc000215 	stw	r16,8(sp)
    6fa4:	dfc00b15 	stw	ra,44(sp)
    6fa8:	df000a15 	stw	fp,40(sp)
    6fac:	ddc00915 	stw	r23,36(sp)
    6fb0:	dd800815 	stw	r22,32(sp)
    6fb4:	dcc00515 	stw	r19,20(sp)
    6fb8:	dc800415 	stw	r18,16(sp)
    6fbc:	dc400315 	stw	r17,12(sp)
    6fc0:	1880020c 	andi	r2,r3,8
    6fc4:	2821883a 	mov	r16,r5
    6fc8:	202b883a 	mov	r21,r4
    6fcc:	3029883a 	mov	r20,r6
    6fd0:	10002726 	beq	r2,zero,7070 <__sfvwrite_r+0xe8>
    6fd4:	28800417 	ldw	r2,16(r5)
    6fd8:	10002526 	beq	r2,zero,7070 <__sfvwrite_r+0xe8>
    6fdc:	1880008c 	andi	r2,r3,2
    6fe0:	a4400017 	ldw	r17,0(r20)
    6fe4:	10002a26 	beq	r2,zero,7090 <__sfvwrite_r+0x108>
    6fe8:	05a00034 	movhi	r22,32768
    6fec:	0027883a 	mov	r19,zero
    6ff0:	0025883a 	mov	r18,zero
    6ff4:	b5bf0004 	addi	r22,r22,-1024
    6ff8:	980d883a 	mov	r6,r19
    6ffc:	a809883a 	mov	r4,r21
    7000:	90004626 	beq	r18,zero,711c <__sfvwrite_r+0x194>
    7004:	900f883a 	mov	r7,r18
    7008:	b480022e 	bgeu	r22,r18,7014 <__sfvwrite_r+0x8c>
    700c:	01e00034 	movhi	r7,32768
    7010:	39ff0004 	addi	r7,r7,-1024
    7014:	80800917 	ldw	r2,36(r16)
    7018:	81400717 	ldw	r5,28(r16)
    701c:	103ee83a 	callr	r2
    7020:	0080570e 	bge	zero,r2,7180 <__sfvwrite_r+0x1f8>
    7024:	a0c00217 	ldw	r3,8(r20)
    7028:	98a7883a 	add	r19,r19,r2
    702c:	90a5c83a 	sub	r18,r18,r2
    7030:	1885c83a 	sub	r2,r3,r2
    7034:	a0800215 	stw	r2,8(r20)
    7038:	103fef1e 	bne	r2,zero,6ff8 <__alt_data_end+0xff006ff8>
    703c:	0005883a 	mov	r2,zero
    7040:	dfc00b17 	ldw	ra,44(sp)
    7044:	df000a17 	ldw	fp,40(sp)
    7048:	ddc00917 	ldw	r23,36(sp)
    704c:	dd800817 	ldw	r22,32(sp)
    7050:	dd400717 	ldw	r21,28(sp)
    7054:	dd000617 	ldw	r20,24(sp)
    7058:	dcc00517 	ldw	r19,20(sp)
    705c:	dc800417 	ldw	r18,16(sp)
    7060:	dc400317 	ldw	r17,12(sp)
    7064:	dc000217 	ldw	r16,8(sp)
    7068:	dec00c04 	addi	sp,sp,48
    706c:	f800283a 	ret
    7070:	800b883a 	mov	r5,r16
    7074:	a809883a 	mov	r4,r21
    7078:	0004b300 	call	4b30 <__swsetup_r>
    707c:	1000eb1e 	bne	r2,zero,742c <__sfvwrite_r+0x4a4>
    7080:	80c0030b 	ldhu	r3,12(r16)
    7084:	a4400017 	ldw	r17,0(r20)
    7088:	1880008c 	andi	r2,r3,2
    708c:	103fd61e 	bne	r2,zero,6fe8 <__alt_data_end+0xff006fe8>
    7090:	1880004c 	andi	r2,r3,1
    7094:	10003f1e 	bne	r2,zero,7194 <__sfvwrite_r+0x20c>
    7098:	0039883a 	mov	fp,zero
    709c:	0025883a 	mov	r18,zero
    70a0:	90001a26 	beq	r18,zero,710c <__sfvwrite_r+0x184>
    70a4:	1880800c 	andi	r2,r3,512
    70a8:	84c00217 	ldw	r19,8(r16)
    70ac:	10002126 	beq	r2,zero,7134 <__sfvwrite_r+0x1ac>
    70b0:	982f883a 	mov	r23,r19
    70b4:	94c09336 	bltu	r18,r19,7304 <__sfvwrite_r+0x37c>
    70b8:	1881200c 	andi	r2,r3,1152
    70bc:	10009e1e 	bne	r2,zero,7338 <__sfvwrite_r+0x3b0>
    70c0:	81000017 	ldw	r4,0(r16)
    70c4:	b80d883a 	mov	r6,r23
    70c8:	e00b883a 	mov	r5,fp
    70cc:	0007a900 	call	7a90 <memmove>
    70d0:	80c00217 	ldw	r3,8(r16)
    70d4:	81000017 	ldw	r4,0(r16)
    70d8:	9005883a 	mov	r2,r18
    70dc:	1ce7c83a 	sub	r19,r3,r19
    70e0:	25cf883a 	add	r7,r4,r23
    70e4:	84c00215 	stw	r19,8(r16)
    70e8:	81c00015 	stw	r7,0(r16)
    70ec:	a0c00217 	ldw	r3,8(r20)
    70f0:	e0b9883a 	add	fp,fp,r2
    70f4:	90a5c83a 	sub	r18,r18,r2
    70f8:	18a7c83a 	sub	r19,r3,r2
    70fc:	a4c00215 	stw	r19,8(r20)
    7100:	983fce26 	beq	r19,zero,703c <__alt_data_end+0xff00703c>
    7104:	80c0030b 	ldhu	r3,12(r16)
    7108:	903fe61e 	bne	r18,zero,70a4 <__alt_data_end+0xff0070a4>
    710c:	8f000017 	ldw	fp,0(r17)
    7110:	8c800117 	ldw	r18,4(r17)
    7114:	8c400204 	addi	r17,r17,8
    7118:	003fe106 	br	70a0 <__alt_data_end+0xff0070a0>
    711c:	8cc00017 	ldw	r19,0(r17)
    7120:	8c800117 	ldw	r18,4(r17)
    7124:	8c400204 	addi	r17,r17,8
    7128:	003fb306 	br	6ff8 <__alt_data_end+0xff006ff8>
    712c:	0005883a 	mov	r2,zero
    7130:	f800283a 	ret
    7134:	81000017 	ldw	r4,0(r16)
    7138:	80800417 	ldw	r2,16(r16)
    713c:	11005736 	bltu	r2,r4,729c <__sfvwrite_r+0x314>
    7140:	85c00517 	ldw	r23,20(r16)
    7144:	95c05536 	bltu	r18,r23,729c <__sfvwrite_r+0x314>
    7148:	00a00034 	movhi	r2,32768
    714c:	10bfffc4 	addi	r2,r2,-1
    7150:	9009883a 	mov	r4,r18
    7154:	1480012e 	bgeu	r2,r18,715c <__sfvwrite_r+0x1d4>
    7158:	1009883a 	mov	r4,r2
    715c:	b80b883a 	mov	r5,r23
    7160:	0001c4c0 	call	1c4c <__divsi3>
    7164:	15cf383a 	mul	r7,r2,r23
    7168:	81400717 	ldw	r5,28(r16)
    716c:	80800917 	ldw	r2,36(r16)
    7170:	e00d883a 	mov	r6,fp
    7174:	a809883a 	mov	r4,r21
    7178:	103ee83a 	callr	r2
    717c:	00bfdb16 	blt	zero,r2,70ec <__alt_data_end+0xff0070ec>
    7180:	8080030b 	ldhu	r2,12(r16)
    7184:	10801014 	ori	r2,r2,64
    7188:	8080030d 	sth	r2,12(r16)
    718c:	00bfffc4 	movi	r2,-1
    7190:	003fab06 	br	7040 <__alt_data_end+0xff007040>
    7194:	0027883a 	mov	r19,zero
    7198:	0011883a 	mov	r8,zero
    719c:	0039883a 	mov	fp,zero
    71a0:	0025883a 	mov	r18,zero
    71a4:	90001f26 	beq	r18,zero,7224 <__sfvwrite_r+0x29c>
    71a8:	40005a26 	beq	r8,zero,7314 <__sfvwrite_r+0x38c>
    71ac:	982d883a 	mov	r22,r19
    71b0:	94c0012e 	bgeu	r18,r19,71b8 <__sfvwrite_r+0x230>
    71b4:	902d883a 	mov	r22,r18
    71b8:	81000017 	ldw	r4,0(r16)
    71bc:	80800417 	ldw	r2,16(r16)
    71c0:	b02f883a 	mov	r23,r22
    71c4:	81c00517 	ldw	r7,20(r16)
    71c8:	1100032e 	bgeu	r2,r4,71d8 <__sfvwrite_r+0x250>
    71cc:	80c00217 	ldw	r3,8(r16)
    71d0:	38c7883a 	add	r3,r7,r3
    71d4:	1d801816 	blt	r3,r22,7238 <__sfvwrite_r+0x2b0>
    71d8:	b1c03e16 	blt	r22,r7,72d4 <__sfvwrite_r+0x34c>
    71dc:	80800917 	ldw	r2,36(r16)
    71e0:	81400717 	ldw	r5,28(r16)
    71e4:	e00d883a 	mov	r6,fp
    71e8:	da000115 	stw	r8,4(sp)
    71ec:	a809883a 	mov	r4,r21
    71f0:	103ee83a 	callr	r2
    71f4:	102f883a 	mov	r23,r2
    71f8:	da000117 	ldw	r8,4(sp)
    71fc:	00bfe00e 	bge	zero,r2,7180 <__alt_data_end+0xff007180>
    7200:	9de7c83a 	sub	r19,r19,r23
    7204:	98001f26 	beq	r19,zero,7284 <__sfvwrite_r+0x2fc>
    7208:	a0800217 	ldw	r2,8(r20)
    720c:	e5f9883a 	add	fp,fp,r23
    7210:	95e5c83a 	sub	r18,r18,r23
    7214:	15efc83a 	sub	r23,r2,r23
    7218:	a5c00215 	stw	r23,8(r20)
    721c:	b83f8726 	beq	r23,zero,703c <__alt_data_end+0xff00703c>
    7220:	903fe11e 	bne	r18,zero,71a8 <__alt_data_end+0xff0071a8>
    7224:	8f000017 	ldw	fp,0(r17)
    7228:	8c800117 	ldw	r18,4(r17)
    722c:	0011883a 	mov	r8,zero
    7230:	8c400204 	addi	r17,r17,8
    7234:	003fdb06 	br	71a4 <__alt_data_end+0xff0071a4>
    7238:	180d883a 	mov	r6,r3
    723c:	e00b883a 	mov	r5,fp
    7240:	da000115 	stw	r8,4(sp)
    7244:	d8c00015 	stw	r3,0(sp)
    7248:	0007a900 	call	7a90 <memmove>
    724c:	d8c00017 	ldw	r3,0(sp)
    7250:	80800017 	ldw	r2,0(r16)
    7254:	800b883a 	mov	r5,r16
    7258:	a809883a 	mov	r4,r21
    725c:	10c5883a 	add	r2,r2,r3
    7260:	80800015 	stw	r2,0(r16)
    7264:	d8c00015 	stw	r3,0(sp)
    7268:	00067280 	call	6728 <_fflush_r>
    726c:	d8c00017 	ldw	r3,0(sp)
    7270:	da000117 	ldw	r8,4(sp)
    7274:	103fc21e 	bne	r2,zero,7180 <__alt_data_end+0xff007180>
    7278:	182f883a 	mov	r23,r3
    727c:	9de7c83a 	sub	r19,r19,r23
    7280:	983fe11e 	bne	r19,zero,7208 <__alt_data_end+0xff007208>
    7284:	800b883a 	mov	r5,r16
    7288:	a809883a 	mov	r4,r21
    728c:	00067280 	call	6728 <_fflush_r>
    7290:	103fbb1e 	bne	r2,zero,7180 <__alt_data_end+0xff007180>
    7294:	0011883a 	mov	r8,zero
    7298:	003fdb06 	br	7208 <__alt_data_end+0xff007208>
    729c:	94c0012e 	bgeu	r18,r19,72a4 <__sfvwrite_r+0x31c>
    72a0:	9027883a 	mov	r19,r18
    72a4:	980d883a 	mov	r6,r19
    72a8:	e00b883a 	mov	r5,fp
    72ac:	0007a900 	call	7a90 <memmove>
    72b0:	80800217 	ldw	r2,8(r16)
    72b4:	80c00017 	ldw	r3,0(r16)
    72b8:	14c5c83a 	sub	r2,r2,r19
    72bc:	1cc7883a 	add	r3,r3,r19
    72c0:	80800215 	stw	r2,8(r16)
    72c4:	80c00015 	stw	r3,0(r16)
    72c8:	10004326 	beq	r2,zero,73d8 <__sfvwrite_r+0x450>
    72cc:	9805883a 	mov	r2,r19
    72d0:	003f8606 	br	70ec <__alt_data_end+0xff0070ec>
    72d4:	b00d883a 	mov	r6,r22
    72d8:	e00b883a 	mov	r5,fp
    72dc:	da000115 	stw	r8,4(sp)
    72e0:	0007a900 	call	7a90 <memmove>
    72e4:	80800217 	ldw	r2,8(r16)
    72e8:	80c00017 	ldw	r3,0(r16)
    72ec:	da000117 	ldw	r8,4(sp)
    72f0:	1585c83a 	sub	r2,r2,r22
    72f4:	1dad883a 	add	r22,r3,r22
    72f8:	80800215 	stw	r2,8(r16)
    72fc:	85800015 	stw	r22,0(r16)
    7300:	003fbf06 	br	7200 <__alt_data_end+0xff007200>
    7304:	81000017 	ldw	r4,0(r16)
    7308:	9027883a 	mov	r19,r18
    730c:	902f883a 	mov	r23,r18
    7310:	003f6c06 	br	70c4 <__alt_data_end+0xff0070c4>
    7314:	900d883a 	mov	r6,r18
    7318:	01400284 	movi	r5,10
    731c:	e009883a 	mov	r4,fp
    7320:	00078640 	call	7864 <memchr>
    7324:	10003e26 	beq	r2,zero,7420 <__sfvwrite_r+0x498>
    7328:	10800044 	addi	r2,r2,1
    732c:	1727c83a 	sub	r19,r2,fp
    7330:	02000044 	movi	r8,1
    7334:	003f9d06 	br	71ac <__alt_data_end+0xff0071ac>
    7338:	80800517 	ldw	r2,20(r16)
    733c:	81400417 	ldw	r5,16(r16)
    7340:	81c00017 	ldw	r7,0(r16)
    7344:	10a7883a 	add	r19,r2,r2
    7348:	9885883a 	add	r2,r19,r2
    734c:	1026d7fa 	srli	r19,r2,31
    7350:	396dc83a 	sub	r22,r7,r5
    7354:	b1000044 	addi	r4,r22,1
    7358:	9885883a 	add	r2,r19,r2
    735c:	1027d07a 	srai	r19,r2,1
    7360:	2485883a 	add	r2,r4,r18
    7364:	980d883a 	mov	r6,r19
    7368:	9880022e 	bgeu	r19,r2,7374 <__sfvwrite_r+0x3ec>
    736c:	1027883a 	mov	r19,r2
    7370:	100d883a 	mov	r6,r2
    7374:	18c1000c 	andi	r3,r3,1024
    7378:	18001c26 	beq	r3,zero,73ec <__sfvwrite_r+0x464>
    737c:	300b883a 	mov	r5,r6
    7380:	a809883a 	mov	r4,r21
    7384:	0001e280 	call	1e28 <_malloc_r>
    7388:	102f883a 	mov	r23,r2
    738c:	10002926 	beq	r2,zero,7434 <__sfvwrite_r+0x4ac>
    7390:	81400417 	ldw	r5,16(r16)
    7394:	b00d883a 	mov	r6,r22
    7398:	1009883a 	mov	r4,r2
    739c:	00079480 	call	7948 <memcpy>
    73a0:	8080030b 	ldhu	r2,12(r16)
    73a4:	00fedfc4 	movi	r3,-1153
    73a8:	10c4703a 	and	r2,r2,r3
    73ac:	10802014 	ori	r2,r2,128
    73b0:	8080030d 	sth	r2,12(r16)
    73b4:	bd89883a 	add	r4,r23,r22
    73b8:	9d8fc83a 	sub	r7,r19,r22
    73bc:	85c00415 	stw	r23,16(r16)
    73c0:	84c00515 	stw	r19,20(r16)
    73c4:	81000015 	stw	r4,0(r16)
    73c8:	9027883a 	mov	r19,r18
    73cc:	81c00215 	stw	r7,8(r16)
    73d0:	902f883a 	mov	r23,r18
    73d4:	003f3b06 	br	70c4 <__alt_data_end+0xff0070c4>
    73d8:	800b883a 	mov	r5,r16
    73dc:	a809883a 	mov	r4,r21
    73e0:	00067280 	call	6728 <_fflush_r>
    73e4:	103fb926 	beq	r2,zero,72cc <__alt_data_end+0xff0072cc>
    73e8:	003f6506 	br	7180 <__alt_data_end+0xff007180>
    73ec:	a809883a 	mov	r4,r21
    73f0:	0008d100 	call	8d10 <_realloc_r>
    73f4:	102f883a 	mov	r23,r2
    73f8:	103fee1e 	bne	r2,zero,73b4 <__alt_data_end+0xff0073b4>
    73fc:	81400417 	ldw	r5,16(r16)
    7400:	a809883a 	mov	r4,r21
    7404:	0006c780 	call	6c78 <_free_r>
    7408:	8080030b 	ldhu	r2,12(r16)
    740c:	00ffdfc4 	movi	r3,-129
    7410:	1884703a 	and	r2,r3,r2
    7414:	00c00304 	movi	r3,12
    7418:	a8c00015 	stw	r3,0(r21)
    741c:	003f5906 	br	7184 <__alt_data_end+0xff007184>
    7420:	94c00044 	addi	r19,r18,1
    7424:	02000044 	movi	r8,1
    7428:	003f6006 	br	71ac <__alt_data_end+0xff0071ac>
    742c:	00bfffc4 	movi	r2,-1
    7430:	003f0306 	br	7040 <__alt_data_end+0xff007040>
    7434:	00800304 	movi	r2,12
    7438:	a8800015 	stw	r2,0(r21)
    743c:	8080030b 	ldhu	r2,12(r16)
    7440:	003f5006 	br	7184 <__alt_data_end+0xff007184>

00007444 <_fwalk>:
    7444:	defff704 	addi	sp,sp,-36
    7448:	dd000415 	stw	r20,16(sp)
    744c:	dfc00815 	stw	ra,32(sp)
    7450:	ddc00715 	stw	r23,28(sp)
    7454:	dd800615 	stw	r22,24(sp)
    7458:	dd400515 	stw	r21,20(sp)
    745c:	dcc00315 	stw	r19,12(sp)
    7460:	dc800215 	stw	r18,8(sp)
    7464:	dc400115 	stw	r17,4(sp)
    7468:	dc000015 	stw	r16,0(sp)
    746c:	2500b804 	addi	r20,r4,736
    7470:	a0002326 	beq	r20,zero,7500 <_fwalk+0xbc>
    7474:	282b883a 	mov	r21,r5
    7478:	002f883a 	mov	r23,zero
    747c:	05800044 	movi	r22,1
    7480:	04ffffc4 	movi	r19,-1
    7484:	a4400117 	ldw	r17,4(r20)
    7488:	a4800217 	ldw	r18,8(r20)
    748c:	8c7fffc4 	addi	r17,r17,-1
    7490:	88000d16 	blt	r17,zero,74c8 <_fwalk+0x84>
    7494:	94000304 	addi	r16,r18,12
    7498:	94800384 	addi	r18,r18,14
    749c:	8080000b 	ldhu	r2,0(r16)
    74a0:	8c7fffc4 	addi	r17,r17,-1
    74a4:	813ffd04 	addi	r4,r16,-12
    74a8:	b080042e 	bgeu	r22,r2,74bc <_fwalk+0x78>
    74ac:	9080000f 	ldh	r2,0(r18)
    74b0:	14c00226 	beq	r2,r19,74bc <_fwalk+0x78>
    74b4:	a83ee83a 	callr	r21
    74b8:	b8aeb03a 	or	r23,r23,r2
    74bc:	84001a04 	addi	r16,r16,104
    74c0:	94801a04 	addi	r18,r18,104
    74c4:	8cfff51e 	bne	r17,r19,749c <__alt_data_end+0xff00749c>
    74c8:	a5000017 	ldw	r20,0(r20)
    74cc:	a03fed1e 	bne	r20,zero,7484 <__alt_data_end+0xff007484>
    74d0:	b805883a 	mov	r2,r23
    74d4:	dfc00817 	ldw	ra,32(sp)
    74d8:	ddc00717 	ldw	r23,28(sp)
    74dc:	dd800617 	ldw	r22,24(sp)
    74e0:	dd400517 	ldw	r21,20(sp)
    74e4:	dd000417 	ldw	r20,16(sp)
    74e8:	dcc00317 	ldw	r19,12(sp)
    74ec:	dc800217 	ldw	r18,8(sp)
    74f0:	dc400117 	ldw	r17,4(sp)
    74f4:	dc000017 	ldw	r16,0(sp)
    74f8:	dec00904 	addi	sp,sp,36
    74fc:	f800283a 	ret
    7500:	002f883a 	mov	r23,zero
    7504:	003ff206 	br	74d0 <__alt_data_end+0xff0074d0>

00007508 <_fwalk_reent>:
    7508:	defff704 	addi	sp,sp,-36
    750c:	dd000415 	stw	r20,16(sp)
    7510:	dfc00815 	stw	ra,32(sp)
    7514:	ddc00715 	stw	r23,28(sp)
    7518:	dd800615 	stw	r22,24(sp)
    751c:	dd400515 	stw	r21,20(sp)
    7520:	dcc00315 	stw	r19,12(sp)
    7524:	dc800215 	stw	r18,8(sp)
    7528:	dc400115 	stw	r17,4(sp)
    752c:	dc000015 	stw	r16,0(sp)
    7530:	2500b804 	addi	r20,r4,736
    7534:	a0002326 	beq	r20,zero,75c4 <_fwalk_reent+0xbc>
    7538:	282b883a 	mov	r21,r5
    753c:	2027883a 	mov	r19,r4
    7540:	002f883a 	mov	r23,zero
    7544:	05800044 	movi	r22,1
    7548:	04bfffc4 	movi	r18,-1
    754c:	a4400117 	ldw	r17,4(r20)
    7550:	a4000217 	ldw	r16,8(r20)
    7554:	8c7fffc4 	addi	r17,r17,-1
    7558:	88000c16 	blt	r17,zero,758c <_fwalk_reent+0x84>
    755c:	84000304 	addi	r16,r16,12
    7560:	8080000b 	ldhu	r2,0(r16)
    7564:	8c7fffc4 	addi	r17,r17,-1
    7568:	817ffd04 	addi	r5,r16,-12
    756c:	b080052e 	bgeu	r22,r2,7584 <_fwalk_reent+0x7c>
    7570:	8080008f 	ldh	r2,2(r16)
    7574:	9809883a 	mov	r4,r19
    7578:	14800226 	beq	r2,r18,7584 <_fwalk_reent+0x7c>
    757c:	a83ee83a 	callr	r21
    7580:	b8aeb03a 	or	r23,r23,r2
    7584:	84001a04 	addi	r16,r16,104
    7588:	8cbff51e 	bne	r17,r18,7560 <__alt_data_end+0xff007560>
    758c:	a5000017 	ldw	r20,0(r20)
    7590:	a03fee1e 	bne	r20,zero,754c <__alt_data_end+0xff00754c>
    7594:	b805883a 	mov	r2,r23
    7598:	dfc00817 	ldw	ra,32(sp)
    759c:	ddc00717 	ldw	r23,28(sp)
    75a0:	dd800617 	ldw	r22,24(sp)
    75a4:	dd400517 	ldw	r21,20(sp)
    75a8:	dd000417 	ldw	r20,16(sp)
    75ac:	dcc00317 	ldw	r19,12(sp)
    75b0:	dc800217 	ldw	r18,8(sp)
    75b4:	dc400117 	ldw	r17,4(sp)
    75b8:	dc000017 	ldw	r16,0(sp)
    75bc:	dec00904 	addi	sp,sp,36
    75c0:	f800283a 	ret
    75c4:	002f883a 	mov	r23,zero
    75c8:	003ff206 	br	7594 <__alt_data_end+0xff007594>

000075cc <_setlocale_r>:
    75cc:	30001b26 	beq	r6,zero,763c <_setlocale_r+0x70>
    75d0:	01400074 	movhi	r5,1
    75d4:	defffe04 	addi	sp,sp,-8
    75d8:	29410704 	addi	r5,r5,1052
    75dc:	3009883a 	mov	r4,r6
    75e0:	dc000015 	stw	r16,0(sp)
    75e4:	dfc00115 	stw	ra,4(sp)
    75e8:	3021883a 	mov	r16,r6
    75ec:	00094240 	call	9424 <strcmp>
    75f0:	1000061e 	bne	r2,zero,760c <_setlocale_r+0x40>
    75f4:	00800074 	movhi	r2,1
    75f8:	10810604 	addi	r2,r2,1048
    75fc:	dfc00117 	ldw	ra,4(sp)
    7600:	dc000017 	ldw	r16,0(sp)
    7604:	dec00204 	addi	sp,sp,8
    7608:	f800283a 	ret
    760c:	01400074 	movhi	r5,1
    7610:	29410604 	addi	r5,r5,1048
    7614:	8009883a 	mov	r4,r16
    7618:	00094240 	call	9424 <strcmp>
    761c:	103ff526 	beq	r2,zero,75f4 <__alt_data_end+0xff0075f4>
    7620:	01400074 	movhi	r5,1
    7624:	2940f104 	addi	r5,r5,964
    7628:	8009883a 	mov	r4,r16
    762c:	00094240 	call	9424 <strcmp>
    7630:	103ff026 	beq	r2,zero,75f4 <__alt_data_end+0xff0075f4>
    7634:	0005883a 	mov	r2,zero
    7638:	003ff006 	br	75fc <__alt_data_end+0xff0075fc>
    763c:	00800074 	movhi	r2,1
    7640:	10810604 	addi	r2,r2,1048
    7644:	f800283a 	ret

00007648 <__locale_charset>:
    7648:	00800074 	movhi	r2,1
    764c:	1083f504 	addi	r2,r2,4052
    7650:	f800283a 	ret

00007654 <__locale_mb_cur_max>:
    7654:	00800074 	movhi	r2,1
    7658:	10889104 	addi	r2,r2,8772
    765c:	10800017 	ldw	r2,0(r2)
    7660:	f800283a 	ret

00007664 <__locale_msgcharset>:
    7664:	00800074 	movhi	r2,1
    7668:	1083ed04 	addi	r2,r2,4020
    766c:	f800283a 	ret

00007670 <__locale_cjk_lang>:
    7670:	0005883a 	mov	r2,zero
    7674:	f800283a 	ret

00007678 <_localeconv_r>:
    7678:	00800074 	movhi	r2,1
    767c:	1083fd04 	addi	r2,r2,4084
    7680:	f800283a 	ret

00007684 <setlocale>:
    7684:	00800074 	movhi	r2,1
    7688:	10889004 	addi	r2,r2,8768
    768c:	280d883a 	mov	r6,r5
    7690:	200b883a 	mov	r5,r4
    7694:	11000017 	ldw	r4,0(r2)
    7698:	00075cc1 	jmpi	75cc <_setlocale_r>

0000769c <localeconv>:
    769c:	00800074 	movhi	r2,1
    76a0:	1083fd04 	addi	r2,r2,4084
    76a4:	f800283a 	ret

000076a8 <__smakebuf_r>:
    76a8:	2880030b 	ldhu	r2,12(r5)
    76ac:	10c0008c 	andi	r3,r2,2
    76b0:	1800411e 	bne	r3,zero,77b8 <__smakebuf_r+0x110>
    76b4:	deffec04 	addi	sp,sp,-80
    76b8:	dc000f15 	stw	r16,60(sp)
    76bc:	2821883a 	mov	r16,r5
    76c0:	2940038f 	ldh	r5,14(r5)
    76c4:	dc401015 	stw	r17,64(sp)
    76c8:	dfc01315 	stw	ra,76(sp)
    76cc:	dcc01215 	stw	r19,72(sp)
    76d0:	dc801115 	stw	r18,68(sp)
    76d4:	2023883a 	mov	r17,r4
    76d8:	28001c16 	blt	r5,zero,774c <__smakebuf_r+0xa4>
    76dc:	d80d883a 	mov	r6,sp
    76e0:	000afcc0 	call	afcc <_fstat_r>
    76e4:	10001816 	blt	r2,zero,7748 <__smakebuf_r+0xa0>
    76e8:	d8800117 	ldw	r2,4(sp)
    76ec:	00e00014 	movui	r3,32768
    76f0:	10bc000c 	andi	r2,r2,61440
    76f4:	14c80020 	cmpeqi	r19,r2,8192
    76f8:	10c03726 	beq	r2,r3,77d8 <__smakebuf_r+0x130>
    76fc:	80c0030b 	ldhu	r3,12(r16)
    7700:	18c20014 	ori	r3,r3,2048
    7704:	80c0030d 	sth	r3,12(r16)
    7708:	00c80004 	movi	r3,8192
    770c:	10c0521e 	bne	r2,r3,7858 <__smakebuf_r+0x1b0>
    7710:	8140038f 	ldh	r5,14(r16)
    7714:	8809883a 	mov	r4,r17
    7718:	000b0280 	call	b028 <_isatty_r>
    771c:	10004c26 	beq	r2,zero,7850 <__smakebuf_r+0x1a8>
    7720:	8080030b 	ldhu	r2,12(r16)
    7724:	80c010c4 	addi	r3,r16,67
    7728:	80c00015 	stw	r3,0(r16)
    772c:	10800054 	ori	r2,r2,1
    7730:	8080030d 	sth	r2,12(r16)
    7734:	00800044 	movi	r2,1
    7738:	80c00415 	stw	r3,16(r16)
    773c:	80800515 	stw	r2,20(r16)
    7740:	04810004 	movi	r18,1024
    7744:	00000706 	br	7764 <__smakebuf_r+0xbc>
    7748:	8080030b 	ldhu	r2,12(r16)
    774c:	10c0200c 	andi	r3,r2,128
    7750:	18001f1e 	bne	r3,zero,77d0 <__smakebuf_r+0x128>
    7754:	04810004 	movi	r18,1024
    7758:	10820014 	ori	r2,r2,2048
    775c:	8080030d 	sth	r2,12(r16)
    7760:	0027883a 	mov	r19,zero
    7764:	900b883a 	mov	r5,r18
    7768:	8809883a 	mov	r4,r17
    776c:	0001e280 	call	1e28 <_malloc_r>
    7770:	10002c26 	beq	r2,zero,7824 <__smakebuf_r+0x17c>
    7774:	80c0030b 	ldhu	r3,12(r16)
    7778:	01000034 	movhi	r4,0
    777c:	2119ef04 	addi	r4,r4,26556
    7780:	89000f15 	stw	r4,60(r17)
    7784:	18c02014 	ori	r3,r3,128
    7788:	80c0030d 	sth	r3,12(r16)
    778c:	80800015 	stw	r2,0(r16)
    7790:	80800415 	stw	r2,16(r16)
    7794:	84800515 	stw	r18,20(r16)
    7798:	98001a1e 	bne	r19,zero,7804 <__smakebuf_r+0x15c>
    779c:	dfc01317 	ldw	ra,76(sp)
    77a0:	dcc01217 	ldw	r19,72(sp)
    77a4:	dc801117 	ldw	r18,68(sp)
    77a8:	dc401017 	ldw	r17,64(sp)
    77ac:	dc000f17 	ldw	r16,60(sp)
    77b0:	dec01404 	addi	sp,sp,80
    77b4:	f800283a 	ret
    77b8:	288010c4 	addi	r2,r5,67
    77bc:	28800015 	stw	r2,0(r5)
    77c0:	28800415 	stw	r2,16(r5)
    77c4:	00800044 	movi	r2,1
    77c8:	28800515 	stw	r2,20(r5)
    77cc:	f800283a 	ret
    77d0:	04801004 	movi	r18,64
    77d4:	003fe006 	br	7758 <__alt_data_end+0xff007758>
    77d8:	81000a17 	ldw	r4,40(r16)
    77dc:	00c00074 	movhi	r3,1
    77e0:	18e4f004 	addi	r3,r3,-27712
    77e4:	20ffc51e 	bne	r4,r3,76fc <__alt_data_end+0xff0076fc>
    77e8:	8080030b 	ldhu	r2,12(r16)
    77ec:	04810004 	movi	r18,1024
    77f0:	84801315 	stw	r18,76(r16)
    77f4:	1484b03a 	or	r2,r2,r18
    77f8:	8080030d 	sth	r2,12(r16)
    77fc:	0027883a 	mov	r19,zero
    7800:	003fd806 	br	7764 <__alt_data_end+0xff007764>
    7804:	8140038f 	ldh	r5,14(r16)
    7808:	8809883a 	mov	r4,r17
    780c:	000b0280 	call	b028 <_isatty_r>
    7810:	103fe226 	beq	r2,zero,779c <__alt_data_end+0xff00779c>
    7814:	8080030b 	ldhu	r2,12(r16)
    7818:	10800054 	ori	r2,r2,1
    781c:	8080030d 	sth	r2,12(r16)
    7820:	003fde06 	br	779c <__alt_data_end+0xff00779c>
    7824:	8080030b 	ldhu	r2,12(r16)
    7828:	10c0800c 	andi	r3,r2,512
    782c:	183fdb1e 	bne	r3,zero,779c <__alt_data_end+0xff00779c>
    7830:	10800094 	ori	r2,r2,2
    7834:	80c010c4 	addi	r3,r16,67
    7838:	8080030d 	sth	r2,12(r16)
    783c:	00800044 	movi	r2,1
    7840:	80c00015 	stw	r3,0(r16)
    7844:	80c00415 	stw	r3,16(r16)
    7848:	80800515 	stw	r2,20(r16)
    784c:	003fd306 	br	779c <__alt_data_end+0xff00779c>
    7850:	04810004 	movi	r18,1024
    7854:	003fc306 	br	7764 <__alt_data_end+0xff007764>
    7858:	0027883a 	mov	r19,zero
    785c:	04810004 	movi	r18,1024
    7860:	003fc006 	br	7764 <__alt_data_end+0xff007764>

00007864 <memchr>:
    7864:	208000cc 	andi	r2,r4,3
    7868:	280f883a 	mov	r7,r5
    786c:	10003426 	beq	r2,zero,7940 <memchr+0xdc>
    7870:	30bfffc4 	addi	r2,r6,-1
    7874:	30001a26 	beq	r6,zero,78e0 <memchr+0x7c>
    7878:	20c00003 	ldbu	r3,0(r4)
    787c:	29803fcc 	andi	r6,r5,255
    7880:	30c0051e 	bne	r6,r3,7898 <memchr+0x34>
    7884:	00001806 	br	78e8 <memchr+0x84>
    7888:	10001526 	beq	r2,zero,78e0 <memchr+0x7c>
    788c:	20c00003 	ldbu	r3,0(r4)
    7890:	10bfffc4 	addi	r2,r2,-1
    7894:	30c01426 	beq	r6,r3,78e8 <memchr+0x84>
    7898:	21000044 	addi	r4,r4,1
    789c:	20c000cc 	andi	r3,r4,3
    78a0:	183ff91e 	bne	r3,zero,7888 <__alt_data_end+0xff007888>
    78a4:	020000c4 	movi	r8,3
    78a8:	40801136 	bltu	r8,r2,78f0 <memchr+0x8c>
    78ac:	10000c26 	beq	r2,zero,78e0 <memchr+0x7c>
    78b0:	20c00003 	ldbu	r3,0(r4)
    78b4:	29403fcc 	andi	r5,r5,255
    78b8:	28c00b26 	beq	r5,r3,78e8 <memchr+0x84>
    78bc:	20c00044 	addi	r3,r4,1
    78c0:	39803fcc 	andi	r6,r7,255
    78c4:	2089883a 	add	r4,r4,r2
    78c8:	00000306 	br	78d8 <memchr+0x74>
    78cc:	18c00044 	addi	r3,r3,1
    78d0:	197fffc3 	ldbu	r5,-1(r3)
    78d4:	31400526 	beq	r6,r5,78ec <memchr+0x88>
    78d8:	1805883a 	mov	r2,r3
    78dc:	20fffb1e 	bne	r4,r3,78cc <__alt_data_end+0xff0078cc>
    78e0:	0005883a 	mov	r2,zero
    78e4:	f800283a 	ret
    78e8:	2005883a 	mov	r2,r4
    78ec:	f800283a 	ret
    78f0:	28c03fcc 	andi	r3,r5,255
    78f4:	1812923a 	slli	r9,r3,8
    78f8:	02ffbff4 	movhi	r11,65279
    78fc:	02a02074 	movhi	r10,32897
    7900:	48d2b03a 	or	r9,r9,r3
    7904:	4806943a 	slli	r3,r9,16
    7908:	5affbfc4 	addi	r11,r11,-257
    790c:	52a02004 	addi	r10,r10,-32640
    7910:	48d2b03a 	or	r9,r9,r3
    7914:	20c00017 	ldw	r3,0(r4)
    7918:	48c6f03a 	xor	r3,r9,r3
    791c:	1acd883a 	add	r6,r3,r11
    7920:	00c6303a 	nor	r3,zero,r3
    7924:	30c6703a 	and	r3,r6,r3
    7928:	1a86703a 	and	r3,r3,r10
    792c:	183fe01e 	bne	r3,zero,78b0 <__alt_data_end+0xff0078b0>
    7930:	10bfff04 	addi	r2,r2,-4
    7934:	21000104 	addi	r4,r4,4
    7938:	40bff636 	bltu	r8,r2,7914 <__alt_data_end+0xff007914>
    793c:	003fdb06 	br	78ac <__alt_data_end+0xff0078ac>
    7940:	3005883a 	mov	r2,r6
    7944:	003fd706 	br	78a4 <__alt_data_end+0xff0078a4>

00007948 <memcpy>:
    7948:	defffd04 	addi	sp,sp,-12
    794c:	dfc00215 	stw	ra,8(sp)
    7950:	dc400115 	stw	r17,4(sp)
    7954:	dc000015 	stw	r16,0(sp)
    7958:	00c003c4 	movi	r3,15
    795c:	2005883a 	mov	r2,r4
    7960:	1980452e 	bgeu	r3,r6,7a78 <memcpy+0x130>
    7964:	2906b03a 	or	r3,r5,r4
    7968:	18c000cc 	andi	r3,r3,3
    796c:	1800441e 	bne	r3,zero,7a80 <memcpy+0x138>
    7970:	347ffc04 	addi	r17,r6,-16
    7974:	8822d13a 	srli	r17,r17,4
    7978:	28c00104 	addi	r3,r5,4
    797c:	23400104 	addi	r13,r4,4
    7980:	8820913a 	slli	r16,r17,4
    7984:	2b000204 	addi	r12,r5,8
    7988:	22c00204 	addi	r11,r4,8
    798c:	84000504 	addi	r16,r16,20
    7990:	2a800304 	addi	r10,r5,12
    7994:	22400304 	addi	r9,r4,12
    7998:	2c21883a 	add	r16,r5,r16
    799c:	2811883a 	mov	r8,r5
    79a0:	200f883a 	mov	r7,r4
    79a4:	41000017 	ldw	r4,0(r8)
    79a8:	1fc00017 	ldw	ra,0(r3)
    79ac:	63c00017 	ldw	r15,0(r12)
    79b0:	39000015 	stw	r4,0(r7)
    79b4:	53800017 	ldw	r14,0(r10)
    79b8:	6fc00015 	stw	ra,0(r13)
    79bc:	5bc00015 	stw	r15,0(r11)
    79c0:	4b800015 	stw	r14,0(r9)
    79c4:	18c00404 	addi	r3,r3,16
    79c8:	39c00404 	addi	r7,r7,16
    79cc:	42000404 	addi	r8,r8,16
    79d0:	6b400404 	addi	r13,r13,16
    79d4:	63000404 	addi	r12,r12,16
    79d8:	5ac00404 	addi	r11,r11,16
    79dc:	52800404 	addi	r10,r10,16
    79e0:	4a400404 	addi	r9,r9,16
    79e4:	1c3fef1e 	bne	r3,r16,79a4 <__alt_data_end+0xff0079a4>
    79e8:	89c00044 	addi	r7,r17,1
    79ec:	380e913a 	slli	r7,r7,4
    79f0:	310003cc 	andi	r4,r6,15
    79f4:	02c000c4 	movi	r11,3
    79f8:	11c7883a 	add	r3,r2,r7
    79fc:	29cb883a 	add	r5,r5,r7
    7a00:	5900212e 	bgeu	r11,r4,7a88 <memcpy+0x140>
    7a04:	1813883a 	mov	r9,r3
    7a08:	2811883a 	mov	r8,r5
    7a0c:	200f883a 	mov	r7,r4
    7a10:	42800017 	ldw	r10,0(r8)
    7a14:	4a400104 	addi	r9,r9,4
    7a18:	39ffff04 	addi	r7,r7,-4
    7a1c:	4abfff15 	stw	r10,-4(r9)
    7a20:	42000104 	addi	r8,r8,4
    7a24:	59fffa36 	bltu	r11,r7,7a10 <__alt_data_end+0xff007a10>
    7a28:	213fff04 	addi	r4,r4,-4
    7a2c:	2008d0ba 	srli	r4,r4,2
    7a30:	318000cc 	andi	r6,r6,3
    7a34:	21000044 	addi	r4,r4,1
    7a38:	2109883a 	add	r4,r4,r4
    7a3c:	2109883a 	add	r4,r4,r4
    7a40:	1907883a 	add	r3,r3,r4
    7a44:	290b883a 	add	r5,r5,r4
    7a48:	30000626 	beq	r6,zero,7a64 <memcpy+0x11c>
    7a4c:	198d883a 	add	r6,r3,r6
    7a50:	29c00003 	ldbu	r7,0(r5)
    7a54:	18c00044 	addi	r3,r3,1
    7a58:	29400044 	addi	r5,r5,1
    7a5c:	19ffffc5 	stb	r7,-1(r3)
    7a60:	19bffb1e 	bne	r3,r6,7a50 <__alt_data_end+0xff007a50>
    7a64:	dfc00217 	ldw	ra,8(sp)
    7a68:	dc400117 	ldw	r17,4(sp)
    7a6c:	dc000017 	ldw	r16,0(sp)
    7a70:	dec00304 	addi	sp,sp,12
    7a74:	f800283a 	ret
    7a78:	2007883a 	mov	r3,r4
    7a7c:	003ff206 	br	7a48 <__alt_data_end+0xff007a48>
    7a80:	2007883a 	mov	r3,r4
    7a84:	003ff106 	br	7a4c <__alt_data_end+0xff007a4c>
    7a88:	200d883a 	mov	r6,r4
    7a8c:	003fee06 	br	7a48 <__alt_data_end+0xff007a48>

00007a90 <memmove>:
    7a90:	2005883a 	mov	r2,r4
    7a94:	29000b2e 	bgeu	r5,r4,7ac4 <memmove+0x34>
    7a98:	298f883a 	add	r7,r5,r6
    7a9c:	21c0092e 	bgeu	r4,r7,7ac4 <memmove+0x34>
    7aa0:	2187883a 	add	r3,r4,r6
    7aa4:	198bc83a 	sub	r5,r3,r6
    7aa8:	30004826 	beq	r6,zero,7bcc <memmove+0x13c>
    7aac:	39ffffc4 	addi	r7,r7,-1
    7ab0:	39000003 	ldbu	r4,0(r7)
    7ab4:	18ffffc4 	addi	r3,r3,-1
    7ab8:	19000005 	stb	r4,0(r3)
    7abc:	28fffb1e 	bne	r5,r3,7aac <__alt_data_end+0xff007aac>
    7ac0:	f800283a 	ret
    7ac4:	00c003c4 	movi	r3,15
    7ac8:	1980412e 	bgeu	r3,r6,7bd0 <memmove+0x140>
    7acc:	2886b03a 	or	r3,r5,r2
    7ad0:	18c000cc 	andi	r3,r3,3
    7ad4:	1800401e 	bne	r3,zero,7bd8 <memmove+0x148>
    7ad8:	33fffc04 	addi	r15,r6,-16
    7adc:	781ed13a 	srli	r15,r15,4
    7ae0:	28c00104 	addi	r3,r5,4
    7ae4:	13400104 	addi	r13,r2,4
    7ae8:	781c913a 	slli	r14,r15,4
    7aec:	2b000204 	addi	r12,r5,8
    7af0:	12c00204 	addi	r11,r2,8
    7af4:	73800504 	addi	r14,r14,20
    7af8:	2a800304 	addi	r10,r5,12
    7afc:	12400304 	addi	r9,r2,12
    7b00:	2b9d883a 	add	r14,r5,r14
    7b04:	2811883a 	mov	r8,r5
    7b08:	100f883a 	mov	r7,r2
    7b0c:	41000017 	ldw	r4,0(r8)
    7b10:	39c00404 	addi	r7,r7,16
    7b14:	18c00404 	addi	r3,r3,16
    7b18:	393ffc15 	stw	r4,-16(r7)
    7b1c:	193ffc17 	ldw	r4,-16(r3)
    7b20:	6b400404 	addi	r13,r13,16
    7b24:	5ac00404 	addi	r11,r11,16
    7b28:	693ffc15 	stw	r4,-16(r13)
    7b2c:	61000017 	ldw	r4,0(r12)
    7b30:	4a400404 	addi	r9,r9,16
    7b34:	42000404 	addi	r8,r8,16
    7b38:	593ffc15 	stw	r4,-16(r11)
    7b3c:	51000017 	ldw	r4,0(r10)
    7b40:	63000404 	addi	r12,r12,16
    7b44:	52800404 	addi	r10,r10,16
    7b48:	493ffc15 	stw	r4,-16(r9)
    7b4c:	1bbfef1e 	bne	r3,r14,7b0c <__alt_data_end+0xff007b0c>
    7b50:	79000044 	addi	r4,r15,1
    7b54:	2008913a 	slli	r4,r4,4
    7b58:	328003cc 	andi	r10,r6,15
    7b5c:	02c000c4 	movi	r11,3
    7b60:	1107883a 	add	r3,r2,r4
    7b64:	290b883a 	add	r5,r5,r4
    7b68:	5a801e2e 	bgeu	r11,r10,7be4 <memmove+0x154>
    7b6c:	1813883a 	mov	r9,r3
    7b70:	2811883a 	mov	r8,r5
    7b74:	500f883a 	mov	r7,r10
    7b78:	41000017 	ldw	r4,0(r8)
    7b7c:	4a400104 	addi	r9,r9,4
    7b80:	39ffff04 	addi	r7,r7,-4
    7b84:	493fff15 	stw	r4,-4(r9)
    7b88:	42000104 	addi	r8,r8,4
    7b8c:	59fffa36 	bltu	r11,r7,7b78 <__alt_data_end+0xff007b78>
    7b90:	513fff04 	addi	r4,r10,-4
    7b94:	2008d0ba 	srli	r4,r4,2
    7b98:	318000cc 	andi	r6,r6,3
    7b9c:	21000044 	addi	r4,r4,1
    7ba0:	2109883a 	add	r4,r4,r4
    7ba4:	2109883a 	add	r4,r4,r4
    7ba8:	1907883a 	add	r3,r3,r4
    7bac:	290b883a 	add	r5,r5,r4
    7bb0:	30000b26 	beq	r6,zero,7be0 <memmove+0x150>
    7bb4:	198d883a 	add	r6,r3,r6
    7bb8:	29c00003 	ldbu	r7,0(r5)
    7bbc:	18c00044 	addi	r3,r3,1
    7bc0:	29400044 	addi	r5,r5,1
    7bc4:	19ffffc5 	stb	r7,-1(r3)
    7bc8:	19bffb1e 	bne	r3,r6,7bb8 <__alt_data_end+0xff007bb8>
    7bcc:	f800283a 	ret
    7bd0:	1007883a 	mov	r3,r2
    7bd4:	003ff606 	br	7bb0 <__alt_data_end+0xff007bb0>
    7bd8:	1007883a 	mov	r3,r2
    7bdc:	003ff506 	br	7bb4 <__alt_data_end+0xff007bb4>
    7be0:	f800283a 	ret
    7be4:	500d883a 	mov	r6,r10
    7be8:	003ff106 	br	7bb0 <__alt_data_end+0xff007bb0>

00007bec <memset>:
    7bec:	20c000cc 	andi	r3,r4,3
    7bf0:	2005883a 	mov	r2,r4
    7bf4:	18004426 	beq	r3,zero,7d08 <memset+0x11c>
    7bf8:	31ffffc4 	addi	r7,r6,-1
    7bfc:	30004026 	beq	r6,zero,7d00 <memset+0x114>
    7c00:	2813883a 	mov	r9,r5
    7c04:	200d883a 	mov	r6,r4
    7c08:	2007883a 	mov	r3,r4
    7c0c:	00000406 	br	7c20 <memset+0x34>
    7c10:	3a3fffc4 	addi	r8,r7,-1
    7c14:	31800044 	addi	r6,r6,1
    7c18:	38003926 	beq	r7,zero,7d00 <memset+0x114>
    7c1c:	400f883a 	mov	r7,r8
    7c20:	18c00044 	addi	r3,r3,1
    7c24:	32400005 	stb	r9,0(r6)
    7c28:	1a0000cc 	andi	r8,r3,3
    7c2c:	403ff81e 	bne	r8,zero,7c10 <__alt_data_end+0xff007c10>
    7c30:	010000c4 	movi	r4,3
    7c34:	21c02d2e 	bgeu	r4,r7,7cec <memset+0x100>
    7c38:	29003fcc 	andi	r4,r5,255
    7c3c:	200c923a 	slli	r6,r4,8
    7c40:	3108b03a 	or	r4,r6,r4
    7c44:	200c943a 	slli	r6,r4,16
    7c48:	218cb03a 	or	r6,r4,r6
    7c4c:	010003c4 	movi	r4,15
    7c50:	21c0182e 	bgeu	r4,r7,7cb4 <memset+0xc8>
    7c54:	3b3ffc04 	addi	r12,r7,-16
    7c58:	6018d13a 	srli	r12,r12,4
    7c5c:	1a000104 	addi	r8,r3,4
    7c60:	1ac00204 	addi	r11,r3,8
    7c64:	6008913a 	slli	r4,r12,4
    7c68:	1a800304 	addi	r10,r3,12
    7c6c:	1813883a 	mov	r9,r3
    7c70:	21000504 	addi	r4,r4,20
    7c74:	1909883a 	add	r4,r3,r4
    7c78:	49800015 	stw	r6,0(r9)
    7c7c:	41800015 	stw	r6,0(r8)
    7c80:	59800015 	stw	r6,0(r11)
    7c84:	51800015 	stw	r6,0(r10)
    7c88:	42000404 	addi	r8,r8,16
    7c8c:	4a400404 	addi	r9,r9,16
    7c90:	5ac00404 	addi	r11,r11,16
    7c94:	52800404 	addi	r10,r10,16
    7c98:	413ff71e 	bne	r8,r4,7c78 <__alt_data_end+0xff007c78>
    7c9c:	63000044 	addi	r12,r12,1
    7ca0:	6018913a 	slli	r12,r12,4
    7ca4:	39c003cc 	andi	r7,r7,15
    7ca8:	010000c4 	movi	r4,3
    7cac:	1b07883a 	add	r3,r3,r12
    7cb0:	21c00e2e 	bgeu	r4,r7,7cec <memset+0x100>
    7cb4:	1813883a 	mov	r9,r3
    7cb8:	3811883a 	mov	r8,r7
    7cbc:	010000c4 	movi	r4,3
    7cc0:	49800015 	stw	r6,0(r9)
    7cc4:	423fff04 	addi	r8,r8,-4
    7cc8:	4a400104 	addi	r9,r9,4
    7ccc:	223ffc36 	bltu	r4,r8,7cc0 <__alt_data_end+0xff007cc0>
    7cd0:	393fff04 	addi	r4,r7,-4
    7cd4:	2008d0ba 	srli	r4,r4,2
    7cd8:	39c000cc 	andi	r7,r7,3
    7cdc:	21000044 	addi	r4,r4,1
    7ce0:	2109883a 	add	r4,r4,r4
    7ce4:	2109883a 	add	r4,r4,r4
    7ce8:	1907883a 	add	r3,r3,r4
    7cec:	38000526 	beq	r7,zero,7d04 <memset+0x118>
    7cf0:	19cf883a 	add	r7,r3,r7
    7cf4:	19400005 	stb	r5,0(r3)
    7cf8:	18c00044 	addi	r3,r3,1
    7cfc:	38fffd1e 	bne	r7,r3,7cf4 <__alt_data_end+0xff007cf4>
    7d00:	f800283a 	ret
    7d04:	f800283a 	ret
    7d08:	2007883a 	mov	r3,r4
    7d0c:	300f883a 	mov	r7,r6
    7d10:	003fc706 	br	7c30 <__alt_data_end+0xff007c30>

00007d14 <_Balloc>:
    7d14:	20801317 	ldw	r2,76(r4)
    7d18:	defffc04 	addi	sp,sp,-16
    7d1c:	dc400115 	stw	r17,4(sp)
    7d20:	dc000015 	stw	r16,0(sp)
    7d24:	dfc00315 	stw	ra,12(sp)
    7d28:	dc800215 	stw	r18,8(sp)
    7d2c:	2023883a 	mov	r17,r4
    7d30:	2821883a 	mov	r16,r5
    7d34:	10000f26 	beq	r2,zero,7d74 <_Balloc+0x60>
    7d38:	8407883a 	add	r3,r16,r16
    7d3c:	18c7883a 	add	r3,r3,r3
    7d40:	10c7883a 	add	r3,r2,r3
    7d44:	18800017 	ldw	r2,0(r3)
    7d48:	10001126 	beq	r2,zero,7d90 <_Balloc+0x7c>
    7d4c:	11000017 	ldw	r4,0(r2)
    7d50:	19000015 	stw	r4,0(r3)
    7d54:	10000415 	stw	zero,16(r2)
    7d58:	10000315 	stw	zero,12(r2)
    7d5c:	dfc00317 	ldw	ra,12(sp)
    7d60:	dc800217 	ldw	r18,8(sp)
    7d64:	dc400117 	ldw	r17,4(sp)
    7d68:	dc000017 	ldw	r16,0(sp)
    7d6c:	dec00404 	addi	sp,sp,16
    7d70:	f800283a 	ret
    7d74:	01800844 	movi	r6,33
    7d78:	01400104 	movi	r5,4
    7d7c:	000abfc0 	call	abfc <_calloc_r>
    7d80:	88801315 	stw	r2,76(r17)
    7d84:	103fec1e 	bne	r2,zero,7d38 <__alt_data_end+0xff007d38>
    7d88:	0005883a 	mov	r2,zero
    7d8c:	003ff306 	br	7d5c <__alt_data_end+0xff007d5c>
    7d90:	01400044 	movi	r5,1
    7d94:	2c24983a 	sll	r18,r5,r16
    7d98:	8809883a 	mov	r4,r17
    7d9c:	91800144 	addi	r6,r18,5
    7da0:	318d883a 	add	r6,r6,r6
    7da4:	318d883a 	add	r6,r6,r6
    7da8:	000abfc0 	call	abfc <_calloc_r>
    7dac:	103ff626 	beq	r2,zero,7d88 <__alt_data_end+0xff007d88>
    7db0:	14000115 	stw	r16,4(r2)
    7db4:	14800215 	stw	r18,8(r2)
    7db8:	003fe606 	br	7d54 <__alt_data_end+0xff007d54>

00007dbc <_Bfree>:
    7dbc:	28000826 	beq	r5,zero,7de0 <_Bfree+0x24>
    7dc0:	28c00117 	ldw	r3,4(r5)
    7dc4:	20801317 	ldw	r2,76(r4)
    7dc8:	18c7883a 	add	r3,r3,r3
    7dcc:	18c7883a 	add	r3,r3,r3
    7dd0:	10c5883a 	add	r2,r2,r3
    7dd4:	10c00017 	ldw	r3,0(r2)
    7dd8:	28c00015 	stw	r3,0(r5)
    7ddc:	11400015 	stw	r5,0(r2)
    7de0:	f800283a 	ret

00007de4 <__multadd>:
    7de4:	defffa04 	addi	sp,sp,-24
    7de8:	dc800315 	stw	r18,12(sp)
    7dec:	dc400215 	stw	r17,8(sp)
    7df0:	dc000115 	stw	r16,4(sp)
    7df4:	2823883a 	mov	r17,r5
    7df8:	2c000417 	ldw	r16,16(r5)
    7dfc:	dfc00515 	stw	ra,20(sp)
    7e00:	dcc00415 	stw	r19,16(sp)
    7e04:	2025883a 	mov	r18,r4
    7e08:	29400504 	addi	r5,r5,20
    7e0c:	0011883a 	mov	r8,zero
    7e10:	28c00017 	ldw	r3,0(r5)
    7e14:	29400104 	addi	r5,r5,4
    7e18:	42000044 	addi	r8,r8,1
    7e1c:	18bfffcc 	andi	r2,r3,65535
    7e20:	1185383a 	mul	r2,r2,r6
    7e24:	1806d43a 	srli	r3,r3,16
    7e28:	11cf883a 	add	r7,r2,r7
    7e2c:	3808d43a 	srli	r4,r7,16
    7e30:	1987383a 	mul	r3,r3,r6
    7e34:	38bfffcc 	andi	r2,r7,65535
    7e38:	1907883a 	add	r3,r3,r4
    7e3c:	1808943a 	slli	r4,r3,16
    7e40:	180ed43a 	srli	r7,r3,16
    7e44:	2085883a 	add	r2,r4,r2
    7e48:	28bfff15 	stw	r2,-4(r5)
    7e4c:	443ff016 	blt	r8,r16,7e10 <__alt_data_end+0xff007e10>
    7e50:	38000926 	beq	r7,zero,7e78 <__multadd+0x94>
    7e54:	88800217 	ldw	r2,8(r17)
    7e58:	80800f0e 	bge	r16,r2,7e98 <__multadd+0xb4>
    7e5c:	80800144 	addi	r2,r16,5
    7e60:	1085883a 	add	r2,r2,r2
    7e64:	1085883a 	add	r2,r2,r2
    7e68:	8885883a 	add	r2,r17,r2
    7e6c:	11c00015 	stw	r7,0(r2)
    7e70:	84000044 	addi	r16,r16,1
    7e74:	8c000415 	stw	r16,16(r17)
    7e78:	8805883a 	mov	r2,r17
    7e7c:	dfc00517 	ldw	ra,20(sp)
    7e80:	dcc00417 	ldw	r19,16(sp)
    7e84:	dc800317 	ldw	r18,12(sp)
    7e88:	dc400217 	ldw	r17,8(sp)
    7e8c:	dc000117 	ldw	r16,4(sp)
    7e90:	dec00604 	addi	sp,sp,24
    7e94:	f800283a 	ret
    7e98:	89400117 	ldw	r5,4(r17)
    7e9c:	9009883a 	mov	r4,r18
    7ea0:	d9c00015 	stw	r7,0(sp)
    7ea4:	29400044 	addi	r5,r5,1
    7ea8:	0007d140 	call	7d14 <_Balloc>
    7eac:	89800417 	ldw	r6,16(r17)
    7eb0:	89400304 	addi	r5,r17,12
    7eb4:	11000304 	addi	r4,r2,12
    7eb8:	31800084 	addi	r6,r6,2
    7ebc:	318d883a 	add	r6,r6,r6
    7ec0:	318d883a 	add	r6,r6,r6
    7ec4:	1027883a 	mov	r19,r2
    7ec8:	00079480 	call	7948 <memcpy>
    7ecc:	d9c00017 	ldw	r7,0(sp)
    7ed0:	88000a26 	beq	r17,zero,7efc <__multadd+0x118>
    7ed4:	88c00117 	ldw	r3,4(r17)
    7ed8:	90801317 	ldw	r2,76(r18)
    7edc:	18c7883a 	add	r3,r3,r3
    7ee0:	18c7883a 	add	r3,r3,r3
    7ee4:	10c5883a 	add	r2,r2,r3
    7ee8:	10c00017 	ldw	r3,0(r2)
    7eec:	88c00015 	stw	r3,0(r17)
    7ef0:	14400015 	stw	r17,0(r2)
    7ef4:	9823883a 	mov	r17,r19
    7ef8:	003fd806 	br	7e5c <__alt_data_end+0xff007e5c>
    7efc:	9823883a 	mov	r17,r19
    7f00:	003fd606 	br	7e5c <__alt_data_end+0xff007e5c>

00007f04 <__s2b>:
    7f04:	defff904 	addi	sp,sp,-28
    7f08:	dc400115 	stw	r17,4(sp)
    7f0c:	dc000015 	stw	r16,0(sp)
    7f10:	2023883a 	mov	r17,r4
    7f14:	2821883a 	mov	r16,r5
    7f18:	39000204 	addi	r4,r7,8
    7f1c:	01400244 	movi	r5,9
    7f20:	dcc00315 	stw	r19,12(sp)
    7f24:	dc800215 	stw	r18,8(sp)
    7f28:	dfc00615 	stw	ra,24(sp)
    7f2c:	dd400515 	stw	r21,20(sp)
    7f30:	dd000415 	stw	r20,16(sp)
    7f34:	3825883a 	mov	r18,r7
    7f38:	3027883a 	mov	r19,r6
    7f3c:	0001c4c0 	call	1c4c <__divsi3>
    7f40:	00c00044 	movi	r3,1
    7f44:	000b883a 	mov	r5,zero
    7f48:	1880030e 	bge	r3,r2,7f58 <__s2b+0x54>
    7f4c:	18c7883a 	add	r3,r3,r3
    7f50:	29400044 	addi	r5,r5,1
    7f54:	18bffd16 	blt	r3,r2,7f4c <__alt_data_end+0xff007f4c>
    7f58:	8809883a 	mov	r4,r17
    7f5c:	0007d140 	call	7d14 <_Balloc>
    7f60:	d8c00717 	ldw	r3,28(sp)
    7f64:	10c00515 	stw	r3,20(r2)
    7f68:	00c00044 	movi	r3,1
    7f6c:	10c00415 	stw	r3,16(r2)
    7f70:	00c00244 	movi	r3,9
    7f74:	1cc0210e 	bge	r3,r19,7ffc <__s2b+0xf8>
    7f78:	80eb883a 	add	r21,r16,r3
    7f7c:	a829883a 	mov	r20,r21
    7f80:	84e1883a 	add	r16,r16,r19
    7f84:	a1c00007 	ldb	r7,0(r20)
    7f88:	01800284 	movi	r6,10
    7f8c:	a5000044 	addi	r20,r20,1
    7f90:	100b883a 	mov	r5,r2
    7f94:	39fff404 	addi	r7,r7,-48
    7f98:	8809883a 	mov	r4,r17
    7f9c:	0007de40 	call	7de4 <__multadd>
    7fa0:	a43ff81e 	bne	r20,r16,7f84 <__alt_data_end+0xff007f84>
    7fa4:	ace1883a 	add	r16,r21,r19
    7fa8:	843ffe04 	addi	r16,r16,-8
    7fac:	9c800a0e 	bge	r19,r18,7fd8 <__s2b+0xd4>
    7fb0:	94e5c83a 	sub	r18,r18,r19
    7fb4:	84a5883a 	add	r18,r16,r18
    7fb8:	81c00007 	ldb	r7,0(r16)
    7fbc:	01800284 	movi	r6,10
    7fc0:	84000044 	addi	r16,r16,1
    7fc4:	100b883a 	mov	r5,r2
    7fc8:	39fff404 	addi	r7,r7,-48
    7fcc:	8809883a 	mov	r4,r17
    7fd0:	0007de40 	call	7de4 <__multadd>
    7fd4:	84bff81e 	bne	r16,r18,7fb8 <__alt_data_end+0xff007fb8>
    7fd8:	dfc00617 	ldw	ra,24(sp)
    7fdc:	dd400517 	ldw	r21,20(sp)
    7fe0:	dd000417 	ldw	r20,16(sp)
    7fe4:	dcc00317 	ldw	r19,12(sp)
    7fe8:	dc800217 	ldw	r18,8(sp)
    7fec:	dc400117 	ldw	r17,4(sp)
    7ff0:	dc000017 	ldw	r16,0(sp)
    7ff4:	dec00704 	addi	sp,sp,28
    7ff8:	f800283a 	ret
    7ffc:	84000284 	addi	r16,r16,10
    8000:	1827883a 	mov	r19,r3
    8004:	003fe906 	br	7fac <__alt_data_end+0xff007fac>

00008008 <__hi0bits>:
    8008:	20bfffec 	andhi	r2,r4,65535
    800c:	1000141e 	bne	r2,zero,8060 <__hi0bits+0x58>
    8010:	2008943a 	slli	r4,r4,16
    8014:	00800404 	movi	r2,16
    8018:	20ffc02c 	andhi	r3,r4,65280
    801c:	1800021e 	bne	r3,zero,8028 <__hi0bits+0x20>
    8020:	2008923a 	slli	r4,r4,8
    8024:	10800204 	addi	r2,r2,8
    8028:	20fc002c 	andhi	r3,r4,61440
    802c:	1800021e 	bne	r3,zero,8038 <__hi0bits+0x30>
    8030:	2008913a 	slli	r4,r4,4
    8034:	10800104 	addi	r2,r2,4
    8038:	20f0002c 	andhi	r3,r4,49152
    803c:	1800031e 	bne	r3,zero,804c <__hi0bits+0x44>
    8040:	2109883a 	add	r4,r4,r4
    8044:	10800084 	addi	r2,r2,2
    8048:	2109883a 	add	r4,r4,r4
    804c:	20000316 	blt	r4,zero,805c <__hi0bits+0x54>
    8050:	2110002c 	andhi	r4,r4,16384
    8054:	2000041e 	bne	r4,zero,8068 <__hi0bits+0x60>
    8058:	00800804 	movi	r2,32
    805c:	f800283a 	ret
    8060:	0005883a 	mov	r2,zero
    8064:	003fec06 	br	8018 <__alt_data_end+0xff008018>
    8068:	10800044 	addi	r2,r2,1
    806c:	f800283a 	ret

00008070 <__lo0bits>:
    8070:	20c00017 	ldw	r3,0(r4)
    8074:	188001cc 	andi	r2,r3,7
    8078:	10000826 	beq	r2,zero,809c <__lo0bits+0x2c>
    807c:	1880004c 	andi	r2,r3,1
    8080:	1000211e 	bne	r2,zero,8108 <__lo0bits+0x98>
    8084:	1880008c 	andi	r2,r3,2
    8088:	1000211e 	bne	r2,zero,8110 <__lo0bits+0xa0>
    808c:	1806d0ba 	srli	r3,r3,2
    8090:	00800084 	movi	r2,2
    8094:	20c00015 	stw	r3,0(r4)
    8098:	f800283a 	ret
    809c:	18bfffcc 	andi	r2,r3,65535
    80a0:	10001326 	beq	r2,zero,80f0 <__lo0bits+0x80>
    80a4:	0005883a 	mov	r2,zero
    80a8:	19403fcc 	andi	r5,r3,255
    80ac:	2800021e 	bne	r5,zero,80b8 <__lo0bits+0x48>
    80b0:	1806d23a 	srli	r3,r3,8
    80b4:	10800204 	addi	r2,r2,8
    80b8:	194003cc 	andi	r5,r3,15
    80bc:	2800021e 	bne	r5,zero,80c8 <__lo0bits+0x58>
    80c0:	1806d13a 	srli	r3,r3,4
    80c4:	10800104 	addi	r2,r2,4
    80c8:	194000cc 	andi	r5,r3,3
    80cc:	2800021e 	bne	r5,zero,80d8 <__lo0bits+0x68>
    80d0:	1806d0ba 	srli	r3,r3,2
    80d4:	10800084 	addi	r2,r2,2
    80d8:	1940004c 	andi	r5,r3,1
    80dc:	2800081e 	bne	r5,zero,8100 <__lo0bits+0x90>
    80e0:	1806d07a 	srli	r3,r3,1
    80e4:	1800051e 	bne	r3,zero,80fc <__lo0bits+0x8c>
    80e8:	00800804 	movi	r2,32
    80ec:	f800283a 	ret
    80f0:	1806d43a 	srli	r3,r3,16
    80f4:	00800404 	movi	r2,16
    80f8:	003feb06 	br	80a8 <__alt_data_end+0xff0080a8>
    80fc:	10800044 	addi	r2,r2,1
    8100:	20c00015 	stw	r3,0(r4)
    8104:	f800283a 	ret
    8108:	0005883a 	mov	r2,zero
    810c:	f800283a 	ret
    8110:	1806d07a 	srli	r3,r3,1
    8114:	00800044 	movi	r2,1
    8118:	20c00015 	stw	r3,0(r4)
    811c:	f800283a 	ret

00008120 <__i2b>:
    8120:	defffd04 	addi	sp,sp,-12
    8124:	dc000015 	stw	r16,0(sp)
    8128:	04000044 	movi	r16,1
    812c:	dc400115 	stw	r17,4(sp)
    8130:	2823883a 	mov	r17,r5
    8134:	800b883a 	mov	r5,r16
    8138:	dfc00215 	stw	ra,8(sp)
    813c:	0007d140 	call	7d14 <_Balloc>
    8140:	14400515 	stw	r17,20(r2)
    8144:	14000415 	stw	r16,16(r2)
    8148:	dfc00217 	ldw	ra,8(sp)
    814c:	dc400117 	ldw	r17,4(sp)
    8150:	dc000017 	ldw	r16,0(sp)
    8154:	dec00304 	addi	sp,sp,12
    8158:	f800283a 	ret

0000815c <__multiply>:
    815c:	defffa04 	addi	sp,sp,-24
    8160:	dcc00315 	stw	r19,12(sp)
    8164:	dc800215 	stw	r18,8(sp)
    8168:	34c00417 	ldw	r19,16(r6)
    816c:	2c800417 	ldw	r18,16(r5)
    8170:	dd000415 	stw	r20,16(sp)
    8174:	dc400115 	stw	r17,4(sp)
    8178:	dfc00515 	stw	ra,20(sp)
    817c:	dc000015 	stw	r16,0(sp)
    8180:	2829883a 	mov	r20,r5
    8184:	3023883a 	mov	r17,r6
    8188:	94c0050e 	bge	r18,r19,81a0 <__multiply+0x44>
    818c:	9007883a 	mov	r3,r18
    8190:	3029883a 	mov	r20,r6
    8194:	9825883a 	mov	r18,r19
    8198:	2823883a 	mov	r17,r5
    819c:	1827883a 	mov	r19,r3
    81a0:	a0800217 	ldw	r2,8(r20)
    81a4:	94e1883a 	add	r16,r18,r19
    81a8:	a1400117 	ldw	r5,4(r20)
    81ac:	1400010e 	bge	r2,r16,81b4 <__multiply+0x58>
    81b0:	29400044 	addi	r5,r5,1
    81b4:	0007d140 	call	7d14 <_Balloc>
    81b8:	8415883a 	add	r10,r16,r16
    81bc:	12c00504 	addi	r11,r2,20
    81c0:	5295883a 	add	r10,r10,r10
    81c4:	5a95883a 	add	r10,r11,r10
    81c8:	5807883a 	mov	r3,r11
    81cc:	5a80032e 	bgeu	r11,r10,81dc <__multiply+0x80>
    81d0:	18000015 	stw	zero,0(r3)
    81d4:	18c00104 	addi	r3,r3,4
    81d8:	1abffd36 	bltu	r3,r10,81d0 <__alt_data_end+0xff0081d0>
    81dc:	9ce7883a 	add	r19,r19,r19
    81e0:	94a5883a 	add	r18,r18,r18
    81e4:	89800504 	addi	r6,r17,20
    81e8:	9ce7883a 	add	r19,r19,r19
    81ec:	a3400504 	addi	r13,r20,20
    81f0:	94a5883a 	add	r18,r18,r18
    81f4:	34d9883a 	add	r12,r6,r19
    81f8:	6c93883a 	add	r9,r13,r18
    81fc:	3300422e 	bgeu	r6,r12,8308 <__multiply+0x1ac>
    8200:	37c00017 	ldw	ra,0(r6)
    8204:	fbffffcc 	andi	r15,ra,65535
    8208:	78001b26 	beq	r15,zero,8278 <__multiply+0x11c>
    820c:	5811883a 	mov	r8,r11
    8210:	681d883a 	mov	r14,r13
    8214:	000f883a 	mov	r7,zero
    8218:	71000017 	ldw	r4,0(r14)
    821c:	40c00017 	ldw	r3,0(r8)
    8220:	73800104 	addi	r14,r14,4
    8224:	217fffcc 	andi	r5,r4,65535
    8228:	2bcb383a 	mul	r5,r5,r15
    822c:	2008d43a 	srli	r4,r4,16
    8230:	1c7fffcc 	andi	r17,r3,65535
    8234:	2c4b883a 	add	r5,r5,r17
    8238:	29cb883a 	add	r5,r5,r7
    823c:	23c9383a 	mul	r4,r4,r15
    8240:	1806d43a 	srli	r3,r3,16
    8244:	280ed43a 	srli	r7,r5,16
    8248:	297fffcc 	andi	r5,r5,65535
    824c:	20c7883a 	add	r3,r4,r3
    8250:	19c7883a 	add	r3,r3,r7
    8254:	1808943a 	slli	r4,r3,16
    8258:	4023883a 	mov	r17,r8
    825c:	180ed43a 	srli	r7,r3,16
    8260:	214ab03a 	or	r5,r4,r5
    8264:	41400015 	stw	r5,0(r8)
    8268:	42000104 	addi	r8,r8,4
    826c:	727fea36 	bltu	r14,r9,8218 <__alt_data_end+0xff008218>
    8270:	89c00115 	stw	r7,4(r17)
    8274:	37c00017 	ldw	ra,0(r6)
    8278:	f83ed43a 	srli	ra,ra,16
    827c:	f8001f26 	beq	ra,zero,82fc <__multiply+0x1a0>
    8280:	58c00017 	ldw	r3,0(r11)
    8284:	681d883a 	mov	r14,r13
    8288:	581f883a 	mov	r15,r11
    828c:	1811883a 	mov	r8,r3
    8290:	5825883a 	mov	r18,r11
    8294:	000f883a 	mov	r7,zero
    8298:	00000106 	br	82a0 <__multiply+0x144>
    829c:	8825883a 	mov	r18,r17
    82a0:	7140000b 	ldhu	r5,0(r14)
    82a4:	4010d43a 	srli	r8,r8,16
    82a8:	193fffcc 	andi	r4,r3,65535
    82ac:	2fcb383a 	mul	r5,r5,ra
    82b0:	7bc00104 	addi	r15,r15,4
    82b4:	73800104 	addi	r14,r14,4
    82b8:	2a0b883a 	add	r5,r5,r8
    82bc:	29cb883a 	add	r5,r5,r7
    82c0:	2806943a 	slli	r3,r5,16
    82c4:	94400104 	addi	r17,r18,4
    82c8:	280ad43a 	srli	r5,r5,16
    82cc:	1908b03a 	or	r4,r3,r4
    82d0:	793fff15 	stw	r4,-4(r15)
    82d4:	70ffff17 	ldw	r3,-4(r14)
    82d8:	8a000017 	ldw	r8,0(r17)
    82dc:	1806d43a 	srli	r3,r3,16
    82e0:	413fffcc 	andi	r4,r8,65535
    82e4:	1fc7383a 	mul	r3,r3,ra
    82e8:	1907883a 	add	r3,r3,r4
    82ec:	1947883a 	add	r3,r3,r5
    82f0:	180ed43a 	srli	r7,r3,16
    82f4:	727fe936 	bltu	r14,r9,829c <__alt_data_end+0xff00829c>
    82f8:	90c00115 	stw	r3,4(r18)
    82fc:	31800104 	addi	r6,r6,4
    8300:	5ac00104 	addi	r11,r11,4
    8304:	333fbe36 	bltu	r6,r12,8200 <__alt_data_end+0xff008200>
    8308:	0400090e 	bge	zero,r16,8330 <__multiply+0x1d4>
    830c:	50ffff17 	ldw	r3,-4(r10)
    8310:	52bfff04 	addi	r10,r10,-4
    8314:	18000326 	beq	r3,zero,8324 <__multiply+0x1c8>
    8318:	00000506 	br	8330 <__multiply+0x1d4>
    831c:	50c00017 	ldw	r3,0(r10)
    8320:	1800031e 	bne	r3,zero,8330 <__multiply+0x1d4>
    8324:	843fffc4 	addi	r16,r16,-1
    8328:	52bfff04 	addi	r10,r10,-4
    832c:	803ffb1e 	bne	r16,zero,831c <__alt_data_end+0xff00831c>
    8330:	14000415 	stw	r16,16(r2)
    8334:	dfc00517 	ldw	ra,20(sp)
    8338:	dd000417 	ldw	r20,16(sp)
    833c:	dcc00317 	ldw	r19,12(sp)
    8340:	dc800217 	ldw	r18,8(sp)
    8344:	dc400117 	ldw	r17,4(sp)
    8348:	dc000017 	ldw	r16,0(sp)
    834c:	dec00604 	addi	sp,sp,24
    8350:	f800283a 	ret

00008354 <__pow5mult>:
    8354:	defffa04 	addi	sp,sp,-24
    8358:	dcc00315 	stw	r19,12(sp)
    835c:	dc000015 	stw	r16,0(sp)
    8360:	dfc00515 	stw	ra,20(sp)
    8364:	dd000415 	stw	r20,16(sp)
    8368:	dc800215 	stw	r18,8(sp)
    836c:	dc400115 	stw	r17,4(sp)
    8370:	308000cc 	andi	r2,r6,3
    8374:	3021883a 	mov	r16,r6
    8378:	2027883a 	mov	r19,r4
    837c:	10002f1e 	bne	r2,zero,843c <__pow5mult+0xe8>
    8380:	2825883a 	mov	r18,r5
    8384:	8021d0ba 	srai	r16,r16,2
    8388:	80001a26 	beq	r16,zero,83f4 <__pow5mult+0xa0>
    838c:	9c401217 	ldw	r17,72(r19)
    8390:	8800061e 	bne	r17,zero,83ac <__pow5mult+0x58>
    8394:	00003406 	br	8468 <__pow5mult+0x114>
    8398:	8021d07a 	srai	r16,r16,1
    839c:	80001526 	beq	r16,zero,83f4 <__pow5mult+0xa0>
    83a0:	88800017 	ldw	r2,0(r17)
    83a4:	10001c26 	beq	r2,zero,8418 <__pow5mult+0xc4>
    83a8:	1023883a 	mov	r17,r2
    83ac:	8080004c 	andi	r2,r16,1
    83b0:	103ff926 	beq	r2,zero,8398 <__alt_data_end+0xff008398>
    83b4:	880d883a 	mov	r6,r17
    83b8:	900b883a 	mov	r5,r18
    83bc:	9809883a 	mov	r4,r19
    83c0:	000815c0 	call	815c <__multiply>
    83c4:	90001b26 	beq	r18,zero,8434 <__pow5mult+0xe0>
    83c8:	91000117 	ldw	r4,4(r18)
    83cc:	98c01317 	ldw	r3,76(r19)
    83d0:	8021d07a 	srai	r16,r16,1
    83d4:	2109883a 	add	r4,r4,r4
    83d8:	2109883a 	add	r4,r4,r4
    83dc:	1907883a 	add	r3,r3,r4
    83e0:	19000017 	ldw	r4,0(r3)
    83e4:	91000015 	stw	r4,0(r18)
    83e8:	1c800015 	stw	r18,0(r3)
    83ec:	1025883a 	mov	r18,r2
    83f0:	803feb1e 	bne	r16,zero,83a0 <__alt_data_end+0xff0083a0>
    83f4:	9005883a 	mov	r2,r18
    83f8:	dfc00517 	ldw	ra,20(sp)
    83fc:	dd000417 	ldw	r20,16(sp)
    8400:	dcc00317 	ldw	r19,12(sp)
    8404:	dc800217 	ldw	r18,8(sp)
    8408:	dc400117 	ldw	r17,4(sp)
    840c:	dc000017 	ldw	r16,0(sp)
    8410:	dec00604 	addi	sp,sp,24
    8414:	f800283a 	ret
    8418:	880d883a 	mov	r6,r17
    841c:	880b883a 	mov	r5,r17
    8420:	9809883a 	mov	r4,r19
    8424:	000815c0 	call	815c <__multiply>
    8428:	88800015 	stw	r2,0(r17)
    842c:	10000015 	stw	zero,0(r2)
    8430:	003fdd06 	br	83a8 <__alt_data_end+0xff0083a8>
    8434:	1025883a 	mov	r18,r2
    8438:	003fd706 	br	8398 <__alt_data_end+0xff008398>
    843c:	10bfffc4 	addi	r2,r2,-1
    8440:	1085883a 	add	r2,r2,r2
    8444:	00c00074 	movhi	r3,1
    8448:	18c10a04 	addi	r3,r3,1064
    844c:	1085883a 	add	r2,r2,r2
    8450:	1885883a 	add	r2,r3,r2
    8454:	11800017 	ldw	r6,0(r2)
    8458:	000f883a 	mov	r7,zero
    845c:	0007de40 	call	7de4 <__multadd>
    8460:	1025883a 	mov	r18,r2
    8464:	003fc706 	br	8384 <__alt_data_end+0xff008384>
    8468:	05000044 	movi	r20,1
    846c:	a00b883a 	mov	r5,r20
    8470:	9809883a 	mov	r4,r19
    8474:	0007d140 	call	7d14 <_Balloc>
    8478:	1023883a 	mov	r17,r2
    847c:	00809c44 	movi	r2,625
    8480:	88800515 	stw	r2,20(r17)
    8484:	8d000415 	stw	r20,16(r17)
    8488:	9c401215 	stw	r17,72(r19)
    848c:	88000015 	stw	zero,0(r17)
    8490:	003fc606 	br	83ac <__alt_data_end+0xff0083ac>

00008494 <__lshift>:
    8494:	defff904 	addi	sp,sp,-28
    8498:	dd400515 	stw	r21,20(sp)
    849c:	dcc00315 	stw	r19,12(sp)
    84a0:	302bd17a 	srai	r21,r6,5
    84a4:	2cc00417 	ldw	r19,16(r5)
    84a8:	28800217 	ldw	r2,8(r5)
    84ac:	dd000415 	stw	r20,16(sp)
    84b0:	ace7883a 	add	r19,r21,r19
    84b4:	dc800215 	stw	r18,8(sp)
    84b8:	dc400115 	stw	r17,4(sp)
    84bc:	dc000015 	stw	r16,0(sp)
    84c0:	dfc00615 	stw	ra,24(sp)
    84c4:	9c000044 	addi	r16,r19,1
    84c8:	2823883a 	mov	r17,r5
    84cc:	3029883a 	mov	r20,r6
    84d0:	2025883a 	mov	r18,r4
    84d4:	29400117 	ldw	r5,4(r5)
    84d8:	1400030e 	bge	r2,r16,84e8 <__lshift+0x54>
    84dc:	1085883a 	add	r2,r2,r2
    84e0:	29400044 	addi	r5,r5,1
    84e4:	143ffd16 	blt	r2,r16,84dc <__alt_data_end+0xff0084dc>
    84e8:	9009883a 	mov	r4,r18
    84ec:	0007d140 	call	7d14 <_Balloc>
    84f0:	10c00504 	addi	r3,r2,20
    84f4:	0540070e 	bge	zero,r21,8514 <__lshift+0x80>
    84f8:	ad6b883a 	add	r21,r21,r21
    84fc:	ad6b883a 	add	r21,r21,r21
    8500:	1809883a 	mov	r4,r3
    8504:	1d47883a 	add	r3,r3,r21
    8508:	20000015 	stw	zero,0(r4)
    850c:	21000104 	addi	r4,r4,4
    8510:	193ffd1e 	bne	r3,r4,8508 <__alt_data_end+0xff008508>
    8514:	8a000417 	ldw	r8,16(r17)
    8518:	89000504 	addi	r4,r17,20
    851c:	a18007cc 	andi	r6,r20,31
    8520:	4211883a 	add	r8,r8,r8
    8524:	4211883a 	add	r8,r8,r8
    8528:	2211883a 	add	r8,r4,r8
    852c:	30002326 	beq	r6,zero,85bc <__lshift+0x128>
    8530:	02400804 	movi	r9,32
    8534:	4993c83a 	sub	r9,r9,r6
    8538:	000b883a 	mov	r5,zero
    853c:	21c00017 	ldw	r7,0(r4)
    8540:	1815883a 	mov	r10,r3
    8544:	18c00104 	addi	r3,r3,4
    8548:	398e983a 	sll	r7,r7,r6
    854c:	21000104 	addi	r4,r4,4
    8550:	394ab03a 	or	r5,r7,r5
    8554:	197fff15 	stw	r5,-4(r3)
    8558:	217fff17 	ldw	r5,-4(r4)
    855c:	2a4ad83a 	srl	r5,r5,r9
    8560:	223ff636 	bltu	r4,r8,853c <__alt_data_end+0xff00853c>
    8564:	51400115 	stw	r5,4(r10)
    8568:	28001a1e 	bne	r5,zero,85d4 <__lshift+0x140>
    856c:	843fffc4 	addi	r16,r16,-1
    8570:	14000415 	stw	r16,16(r2)
    8574:	88000826 	beq	r17,zero,8598 <__lshift+0x104>
    8578:	89000117 	ldw	r4,4(r17)
    857c:	90c01317 	ldw	r3,76(r18)
    8580:	2109883a 	add	r4,r4,r4
    8584:	2109883a 	add	r4,r4,r4
    8588:	1907883a 	add	r3,r3,r4
    858c:	19000017 	ldw	r4,0(r3)
    8590:	89000015 	stw	r4,0(r17)
    8594:	1c400015 	stw	r17,0(r3)
    8598:	dfc00617 	ldw	ra,24(sp)
    859c:	dd400517 	ldw	r21,20(sp)
    85a0:	dd000417 	ldw	r20,16(sp)
    85a4:	dcc00317 	ldw	r19,12(sp)
    85a8:	dc800217 	ldw	r18,8(sp)
    85ac:	dc400117 	ldw	r17,4(sp)
    85b0:	dc000017 	ldw	r16,0(sp)
    85b4:	dec00704 	addi	sp,sp,28
    85b8:	f800283a 	ret
    85bc:	21400017 	ldw	r5,0(r4)
    85c0:	18c00104 	addi	r3,r3,4
    85c4:	21000104 	addi	r4,r4,4
    85c8:	197fff15 	stw	r5,-4(r3)
    85cc:	223ffb36 	bltu	r4,r8,85bc <__alt_data_end+0xff0085bc>
    85d0:	003fe606 	br	856c <__alt_data_end+0xff00856c>
    85d4:	9c000084 	addi	r16,r19,2
    85d8:	003fe406 	br	856c <__alt_data_end+0xff00856c>

000085dc <__mcmp>:
    85dc:	20800417 	ldw	r2,16(r4)
    85e0:	28c00417 	ldw	r3,16(r5)
    85e4:	10c5c83a 	sub	r2,r2,r3
    85e8:	1000111e 	bne	r2,zero,8630 <__mcmp+0x54>
    85ec:	18c7883a 	add	r3,r3,r3
    85f0:	18c7883a 	add	r3,r3,r3
    85f4:	21000504 	addi	r4,r4,20
    85f8:	29400504 	addi	r5,r5,20
    85fc:	20c5883a 	add	r2,r4,r3
    8600:	28cb883a 	add	r5,r5,r3
    8604:	00000106 	br	860c <__mcmp+0x30>
    8608:	20800a2e 	bgeu	r4,r2,8634 <__mcmp+0x58>
    860c:	10bfff04 	addi	r2,r2,-4
    8610:	297fff04 	addi	r5,r5,-4
    8614:	11800017 	ldw	r6,0(r2)
    8618:	28c00017 	ldw	r3,0(r5)
    861c:	30fffa26 	beq	r6,r3,8608 <__alt_data_end+0xff008608>
    8620:	30c00236 	bltu	r6,r3,862c <__mcmp+0x50>
    8624:	00800044 	movi	r2,1
    8628:	f800283a 	ret
    862c:	00bfffc4 	movi	r2,-1
    8630:	f800283a 	ret
    8634:	0005883a 	mov	r2,zero
    8638:	f800283a 	ret

0000863c <__mdiff>:
    863c:	28c00417 	ldw	r3,16(r5)
    8640:	30800417 	ldw	r2,16(r6)
    8644:	defffa04 	addi	sp,sp,-24
    8648:	dcc00315 	stw	r19,12(sp)
    864c:	dc800215 	stw	r18,8(sp)
    8650:	dfc00515 	stw	ra,20(sp)
    8654:	dd000415 	stw	r20,16(sp)
    8658:	dc400115 	stw	r17,4(sp)
    865c:	dc000015 	stw	r16,0(sp)
    8660:	1887c83a 	sub	r3,r3,r2
    8664:	2825883a 	mov	r18,r5
    8668:	3027883a 	mov	r19,r6
    866c:	1800141e 	bne	r3,zero,86c0 <__mdiff+0x84>
    8670:	1085883a 	add	r2,r2,r2
    8674:	1085883a 	add	r2,r2,r2
    8678:	2a000504 	addi	r8,r5,20
    867c:	34000504 	addi	r16,r6,20
    8680:	4087883a 	add	r3,r8,r2
    8684:	8085883a 	add	r2,r16,r2
    8688:	00000106 	br	8690 <__mdiff+0x54>
    868c:	40c0592e 	bgeu	r8,r3,87f4 <__mdiff+0x1b8>
    8690:	18ffff04 	addi	r3,r3,-4
    8694:	10bfff04 	addi	r2,r2,-4
    8698:	19c00017 	ldw	r7,0(r3)
    869c:	11400017 	ldw	r5,0(r2)
    86a0:	397ffa26 	beq	r7,r5,868c <__alt_data_end+0xff00868c>
    86a4:	3940592e 	bgeu	r7,r5,880c <__mdiff+0x1d0>
    86a8:	9005883a 	mov	r2,r18
    86ac:	4023883a 	mov	r17,r8
    86b0:	9825883a 	mov	r18,r19
    86b4:	05000044 	movi	r20,1
    86b8:	1027883a 	mov	r19,r2
    86bc:	00000406 	br	86d0 <__mdiff+0x94>
    86c0:	18005616 	blt	r3,zero,881c <__mdiff+0x1e0>
    86c4:	34400504 	addi	r17,r6,20
    86c8:	2c000504 	addi	r16,r5,20
    86cc:	0029883a 	mov	r20,zero
    86d0:	91400117 	ldw	r5,4(r18)
    86d4:	0007d140 	call	7d14 <_Balloc>
    86d8:	92400417 	ldw	r9,16(r18)
    86dc:	9b000417 	ldw	r12,16(r19)
    86e0:	12c00504 	addi	r11,r2,20
    86e4:	4a51883a 	add	r8,r9,r9
    86e8:	6319883a 	add	r12,r12,r12
    86ec:	4211883a 	add	r8,r8,r8
    86f0:	6319883a 	add	r12,r12,r12
    86f4:	15000315 	stw	r20,12(r2)
    86f8:	8211883a 	add	r8,r16,r8
    86fc:	8b19883a 	add	r12,r17,r12
    8700:	0007883a 	mov	r3,zero
    8704:	81400017 	ldw	r5,0(r16)
    8708:	89c00017 	ldw	r7,0(r17)
    870c:	59800104 	addi	r6,r11,4
    8710:	293fffcc 	andi	r4,r5,65535
    8714:	20c7883a 	add	r3,r4,r3
    8718:	393fffcc 	andi	r4,r7,65535
    871c:	1909c83a 	sub	r4,r3,r4
    8720:	280ad43a 	srli	r5,r5,16
    8724:	380ed43a 	srli	r7,r7,16
    8728:	2007d43a 	srai	r3,r4,16
    872c:	213fffcc 	andi	r4,r4,65535
    8730:	29cbc83a 	sub	r5,r5,r7
    8734:	28c7883a 	add	r3,r5,r3
    8738:	180a943a 	slli	r5,r3,16
    873c:	8c400104 	addi	r17,r17,4
    8740:	84000104 	addi	r16,r16,4
    8744:	2908b03a 	or	r4,r5,r4
    8748:	59000015 	stw	r4,0(r11)
    874c:	1807d43a 	srai	r3,r3,16
    8750:	3015883a 	mov	r10,r6
    8754:	3017883a 	mov	r11,r6
    8758:	8b3fea36 	bltu	r17,r12,8704 <__alt_data_end+0xff008704>
    875c:	8200162e 	bgeu	r16,r8,87b8 <__mdiff+0x17c>
    8760:	8017883a 	mov	r11,r16
    8764:	59400017 	ldw	r5,0(r11)
    8768:	31800104 	addi	r6,r6,4
    876c:	5ac00104 	addi	r11,r11,4
    8770:	293fffcc 	andi	r4,r5,65535
    8774:	20c7883a 	add	r3,r4,r3
    8778:	280ed43a 	srli	r7,r5,16
    877c:	180bd43a 	srai	r5,r3,16
    8780:	193fffcc 	andi	r4,r3,65535
    8784:	3947883a 	add	r3,r7,r5
    8788:	180a943a 	slli	r5,r3,16
    878c:	1807d43a 	srai	r3,r3,16
    8790:	2908b03a 	or	r4,r5,r4
    8794:	313fff15 	stw	r4,-4(r6)
    8798:	5a3ff236 	bltu	r11,r8,8764 <__alt_data_end+0xff008764>
    879c:	0406303a 	nor	r3,zero,r16
    87a0:	1a07883a 	add	r3,r3,r8
    87a4:	1806d0ba 	srli	r3,r3,2
    87a8:	18c00044 	addi	r3,r3,1
    87ac:	18c7883a 	add	r3,r3,r3
    87b0:	18c7883a 	add	r3,r3,r3
    87b4:	50d5883a 	add	r10,r10,r3
    87b8:	50ffff04 	addi	r3,r10,-4
    87bc:	2000041e 	bne	r4,zero,87d0 <__mdiff+0x194>
    87c0:	18ffff04 	addi	r3,r3,-4
    87c4:	19000017 	ldw	r4,0(r3)
    87c8:	4a7fffc4 	addi	r9,r9,-1
    87cc:	203ffc26 	beq	r4,zero,87c0 <__alt_data_end+0xff0087c0>
    87d0:	12400415 	stw	r9,16(r2)
    87d4:	dfc00517 	ldw	ra,20(sp)
    87d8:	dd000417 	ldw	r20,16(sp)
    87dc:	dcc00317 	ldw	r19,12(sp)
    87e0:	dc800217 	ldw	r18,8(sp)
    87e4:	dc400117 	ldw	r17,4(sp)
    87e8:	dc000017 	ldw	r16,0(sp)
    87ec:	dec00604 	addi	sp,sp,24
    87f0:	f800283a 	ret
    87f4:	000b883a 	mov	r5,zero
    87f8:	0007d140 	call	7d14 <_Balloc>
    87fc:	00c00044 	movi	r3,1
    8800:	10c00415 	stw	r3,16(r2)
    8804:	10000515 	stw	zero,20(r2)
    8808:	003ff206 	br	87d4 <__alt_data_end+0xff0087d4>
    880c:	8023883a 	mov	r17,r16
    8810:	0029883a 	mov	r20,zero
    8814:	4021883a 	mov	r16,r8
    8818:	003fad06 	br	86d0 <__alt_data_end+0xff0086d0>
    881c:	9005883a 	mov	r2,r18
    8820:	94400504 	addi	r17,r18,20
    8824:	9c000504 	addi	r16,r19,20
    8828:	9825883a 	mov	r18,r19
    882c:	05000044 	movi	r20,1
    8830:	1027883a 	mov	r19,r2
    8834:	003fa606 	br	86d0 <__alt_data_end+0xff0086d0>

00008838 <__ulp>:
    8838:	295ffc2c 	andhi	r5,r5,32752
    883c:	00bf3034 	movhi	r2,64704
    8840:	2887883a 	add	r3,r5,r2
    8844:	00c0020e 	bge	zero,r3,8850 <__ulp+0x18>
    8848:	0005883a 	mov	r2,zero
    884c:	f800283a 	ret
    8850:	00c7c83a 	sub	r3,zero,r3
    8854:	1807d53a 	srai	r3,r3,20
    8858:	008004c4 	movi	r2,19
    885c:	10c00b0e 	bge	r2,r3,888c <__ulp+0x54>
    8860:	18bffb04 	addi	r2,r3,-20
    8864:	01000784 	movi	r4,30
    8868:	0007883a 	mov	r3,zero
    886c:	20800516 	blt	r4,r2,8884 <__ulp+0x4c>
    8870:	010007c4 	movi	r4,31
    8874:	2089c83a 	sub	r4,r4,r2
    8878:	00800044 	movi	r2,1
    887c:	1104983a 	sll	r2,r2,r4
    8880:	f800283a 	ret
    8884:	00800044 	movi	r2,1
    8888:	f800283a 	ret
    888c:	01400234 	movhi	r5,8
    8890:	28c7d83a 	sra	r3,r5,r3
    8894:	0005883a 	mov	r2,zero
    8898:	f800283a 	ret

0000889c <__b2d>:
    889c:	defffa04 	addi	sp,sp,-24
    88a0:	dc000015 	stw	r16,0(sp)
    88a4:	24000417 	ldw	r16,16(r4)
    88a8:	dc400115 	stw	r17,4(sp)
    88ac:	24400504 	addi	r17,r4,20
    88b0:	8421883a 	add	r16,r16,r16
    88b4:	8421883a 	add	r16,r16,r16
    88b8:	8c21883a 	add	r16,r17,r16
    88bc:	dc800215 	stw	r18,8(sp)
    88c0:	84bfff17 	ldw	r18,-4(r16)
    88c4:	dd000415 	stw	r20,16(sp)
    88c8:	dcc00315 	stw	r19,12(sp)
    88cc:	9009883a 	mov	r4,r18
    88d0:	2829883a 	mov	r20,r5
    88d4:	dfc00515 	stw	ra,20(sp)
    88d8:	00080080 	call	8008 <__hi0bits>
    88dc:	00c00804 	movi	r3,32
    88e0:	1889c83a 	sub	r4,r3,r2
    88e4:	a1000015 	stw	r4,0(r20)
    88e8:	01000284 	movi	r4,10
    88ec:	84ffff04 	addi	r19,r16,-4
    88f0:	20801216 	blt	r4,r2,893c <__b2d+0xa0>
    88f4:	018002c4 	movi	r6,11
    88f8:	308dc83a 	sub	r6,r6,r2
    88fc:	9186d83a 	srl	r3,r18,r6
    8900:	18cffc34 	orhi	r3,r3,16368
    8904:	8cc0212e 	bgeu	r17,r19,898c <__b2d+0xf0>
    8908:	813ffe17 	ldw	r4,-8(r16)
    890c:	218cd83a 	srl	r6,r4,r6
    8910:	10800544 	addi	r2,r2,21
    8914:	9084983a 	sll	r2,r18,r2
    8918:	1184b03a 	or	r2,r2,r6
    891c:	dfc00517 	ldw	ra,20(sp)
    8920:	dd000417 	ldw	r20,16(sp)
    8924:	dcc00317 	ldw	r19,12(sp)
    8928:	dc800217 	ldw	r18,8(sp)
    892c:	dc400117 	ldw	r17,4(sp)
    8930:	dc000017 	ldw	r16,0(sp)
    8934:	dec00604 	addi	sp,sp,24
    8938:	f800283a 	ret
    893c:	8cc00f2e 	bgeu	r17,r19,897c <__b2d+0xe0>
    8940:	117ffd44 	addi	r5,r2,-11
    8944:	80bffe17 	ldw	r2,-8(r16)
    8948:	28000e26 	beq	r5,zero,8984 <__b2d+0xe8>
    894c:	1949c83a 	sub	r4,r3,r5
    8950:	9164983a 	sll	r18,r18,r5
    8954:	1106d83a 	srl	r3,r2,r4
    8958:	81bffe04 	addi	r6,r16,-8
    895c:	948ffc34 	orhi	r18,r18,16368
    8960:	90c6b03a 	or	r3,r18,r3
    8964:	89800e2e 	bgeu	r17,r6,89a0 <__b2d+0x104>
    8968:	81bffd17 	ldw	r6,-12(r16)
    896c:	1144983a 	sll	r2,r2,r5
    8970:	310ad83a 	srl	r5,r6,r4
    8974:	2884b03a 	or	r2,r5,r2
    8978:	003fe806 	br	891c <__alt_data_end+0xff00891c>
    897c:	10bffd44 	addi	r2,r2,-11
    8980:	1000041e 	bne	r2,zero,8994 <__b2d+0xf8>
    8984:	90cffc34 	orhi	r3,r18,16368
    8988:	003fe406 	br	891c <__alt_data_end+0xff00891c>
    898c:	000d883a 	mov	r6,zero
    8990:	003fdf06 	br	8910 <__alt_data_end+0xff008910>
    8994:	90a4983a 	sll	r18,r18,r2
    8998:	0005883a 	mov	r2,zero
    899c:	003ff906 	br	8984 <__alt_data_end+0xff008984>
    89a0:	1144983a 	sll	r2,r2,r5
    89a4:	003fdd06 	br	891c <__alt_data_end+0xff00891c>

000089a8 <__d2b>:
    89a8:	defff804 	addi	sp,sp,-32
    89ac:	dc000215 	stw	r16,8(sp)
    89b0:	3021883a 	mov	r16,r6
    89b4:	dc400315 	stw	r17,12(sp)
    89b8:	8022907a 	slli	r17,r16,1
    89bc:	dd000615 	stw	r20,24(sp)
    89c0:	2829883a 	mov	r20,r5
    89c4:	01400044 	movi	r5,1
    89c8:	dcc00515 	stw	r19,20(sp)
    89cc:	dc800415 	stw	r18,16(sp)
    89d0:	dfc00715 	stw	ra,28(sp)
    89d4:	3825883a 	mov	r18,r7
    89d8:	8822d57a 	srli	r17,r17,21
    89dc:	0007d140 	call	7d14 <_Balloc>
    89e0:	1027883a 	mov	r19,r2
    89e4:	00800434 	movhi	r2,16
    89e8:	10bfffc4 	addi	r2,r2,-1
    89ec:	808c703a 	and	r6,r16,r2
    89f0:	88000126 	beq	r17,zero,89f8 <__d2b+0x50>
    89f4:	31800434 	orhi	r6,r6,16
    89f8:	d9800015 	stw	r6,0(sp)
    89fc:	a0002426 	beq	r20,zero,8a90 <__d2b+0xe8>
    8a00:	d9000104 	addi	r4,sp,4
    8a04:	dd000115 	stw	r20,4(sp)
    8a08:	00080700 	call	8070 <__lo0bits>
    8a0c:	d8c00017 	ldw	r3,0(sp)
    8a10:	10002f1e 	bne	r2,zero,8ad0 <__d2b+0x128>
    8a14:	d9000117 	ldw	r4,4(sp)
    8a18:	99000515 	stw	r4,20(r19)
    8a1c:	1821003a 	cmpeq	r16,r3,zero
    8a20:	01000084 	movi	r4,2
    8a24:	2421c83a 	sub	r16,r4,r16
    8a28:	98c00615 	stw	r3,24(r19)
    8a2c:	9c000415 	stw	r16,16(r19)
    8a30:	88001f1e 	bne	r17,zero,8ab0 <__d2b+0x108>
    8a34:	10bef384 	addi	r2,r2,-1074
    8a38:	90800015 	stw	r2,0(r18)
    8a3c:	00900034 	movhi	r2,16384
    8a40:	10bfffc4 	addi	r2,r2,-1
    8a44:	8085883a 	add	r2,r16,r2
    8a48:	1085883a 	add	r2,r2,r2
    8a4c:	1085883a 	add	r2,r2,r2
    8a50:	9885883a 	add	r2,r19,r2
    8a54:	11000517 	ldw	r4,20(r2)
    8a58:	8020917a 	slli	r16,r16,5
    8a5c:	00080080 	call	8008 <__hi0bits>
    8a60:	d8c00817 	ldw	r3,32(sp)
    8a64:	8085c83a 	sub	r2,r16,r2
    8a68:	18800015 	stw	r2,0(r3)
    8a6c:	9805883a 	mov	r2,r19
    8a70:	dfc00717 	ldw	ra,28(sp)
    8a74:	dd000617 	ldw	r20,24(sp)
    8a78:	dcc00517 	ldw	r19,20(sp)
    8a7c:	dc800417 	ldw	r18,16(sp)
    8a80:	dc400317 	ldw	r17,12(sp)
    8a84:	dc000217 	ldw	r16,8(sp)
    8a88:	dec00804 	addi	sp,sp,32
    8a8c:	f800283a 	ret
    8a90:	d809883a 	mov	r4,sp
    8a94:	00080700 	call	8070 <__lo0bits>
    8a98:	d8c00017 	ldw	r3,0(sp)
    8a9c:	04000044 	movi	r16,1
    8aa0:	9c000415 	stw	r16,16(r19)
    8aa4:	98c00515 	stw	r3,20(r19)
    8aa8:	10800804 	addi	r2,r2,32
    8aac:	883fe126 	beq	r17,zero,8a34 <__alt_data_end+0xff008a34>
    8ab0:	00c00d44 	movi	r3,53
    8ab4:	8c7ef344 	addi	r17,r17,-1075
    8ab8:	88a3883a 	add	r17,r17,r2
    8abc:	1885c83a 	sub	r2,r3,r2
    8ac0:	d8c00817 	ldw	r3,32(sp)
    8ac4:	94400015 	stw	r17,0(r18)
    8ac8:	18800015 	stw	r2,0(r3)
    8acc:	003fe706 	br	8a6c <__alt_data_end+0xff008a6c>
    8ad0:	01000804 	movi	r4,32
    8ad4:	2089c83a 	sub	r4,r4,r2
    8ad8:	1908983a 	sll	r4,r3,r4
    8adc:	d9400117 	ldw	r5,4(sp)
    8ae0:	1886d83a 	srl	r3,r3,r2
    8ae4:	2148b03a 	or	r4,r4,r5
    8ae8:	99000515 	stw	r4,20(r19)
    8aec:	d8c00015 	stw	r3,0(sp)
    8af0:	003fca06 	br	8a1c <__alt_data_end+0xff008a1c>

00008af4 <__ratio>:
    8af4:	defff904 	addi	sp,sp,-28
    8af8:	dc400315 	stw	r17,12(sp)
    8afc:	2823883a 	mov	r17,r5
    8b00:	d9400104 	addi	r5,sp,4
    8b04:	dfc00615 	stw	ra,24(sp)
    8b08:	dcc00515 	stw	r19,20(sp)
    8b0c:	dc800415 	stw	r18,16(sp)
    8b10:	2027883a 	mov	r19,r4
    8b14:	dc000215 	stw	r16,8(sp)
    8b18:	000889c0 	call	889c <__b2d>
    8b1c:	d80b883a 	mov	r5,sp
    8b20:	8809883a 	mov	r4,r17
    8b24:	1025883a 	mov	r18,r2
    8b28:	1821883a 	mov	r16,r3
    8b2c:	000889c0 	call	889c <__b2d>
    8b30:	8a000417 	ldw	r8,16(r17)
    8b34:	99000417 	ldw	r4,16(r19)
    8b38:	d9400117 	ldw	r5,4(sp)
    8b3c:	2209c83a 	sub	r4,r4,r8
    8b40:	2010917a 	slli	r8,r4,5
    8b44:	d9000017 	ldw	r4,0(sp)
    8b48:	2909c83a 	sub	r4,r5,r4
    8b4c:	4109883a 	add	r4,r8,r4
    8b50:	01000e0e 	bge	zero,r4,8b8c <__ratio+0x98>
    8b54:	2008953a 	slli	r4,r4,20
    8b58:	2421883a 	add	r16,r4,r16
    8b5c:	100d883a 	mov	r6,r2
    8b60:	180f883a 	mov	r7,r3
    8b64:	9009883a 	mov	r4,r18
    8b68:	800b883a 	mov	r5,r16
    8b6c:	000c7d80 	call	c7d8 <__divdf3>
    8b70:	dfc00617 	ldw	ra,24(sp)
    8b74:	dcc00517 	ldw	r19,20(sp)
    8b78:	dc800417 	ldw	r18,16(sp)
    8b7c:	dc400317 	ldw	r17,12(sp)
    8b80:	dc000217 	ldw	r16,8(sp)
    8b84:	dec00704 	addi	sp,sp,28
    8b88:	f800283a 	ret
    8b8c:	2008953a 	slli	r4,r4,20
    8b90:	1907c83a 	sub	r3,r3,r4
    8b94:	003ff106 	br	8b5c <__alt_data_end+0xff008b5c>

00008b98 <_mprec_log10>:
    8b98:	defffe04 	addi	sp,sp,-8
    8b9c:	dc000015 	stw	r16,0(sp)
    8ba0:	dfc00115 	stw	ra,4(sp)
    8ba4:	008005c4 	movi	r2,23
    8ba8:	2021883a 	mov	r16,r4
    8bac:	11000d0e 	bge	r2,r4,8be4 <_mprec_log10+0x4c>
    8bb0:	0005883a 	mov	r2,zero
    8bb4:	00cffc34 	movhi	r3,16368
    8bb8:	843fffc4 	addi	r16,r16,-1
    8bbc:	000d883a 	mov	r6,zero
    8bc0:	01d00934 	movhi	r7,16420
    8bc4:	1009883a 	mov	r4,r2
    8bc8:	180b883a 	mov	r5,r3
    8bcc:	000d3180 	call	d318 <__muldf3>
    8bd0:	803ff91e 	bne	r16,zero,8bb8 <__alt_data_end+0xff008bb8>
    8bd4:	dfc00117 	ldw	ra,4(sp)
    8bd8:	dc000017 	ldw	r16,0(sp)
    8bdc:	dec00204 	addi	sp,sp,8
    8be0:	f800283a 	ret
    8be4:	202090fa 	slli	r16,r4,3
    8be8:	00800074 	movhi	r2,1
    8bec:	10812104 	addi	r2,r2,1156
    8bf0:	1421883a 	add	r16,r2,r16
    8bf4:	80800017 	ldw	r2,0(r16)
    8bf8:	80c00117 	ldw	r3,4(r16)
    8bfc:	dfc00117 	ldw	ra,4(sp)
    8c00:	dc000017 	ldw	r16,0(sp)
    8c04:	dec00204 	addi	sp,sp,8
    8c08:	f800283a 	ret

00008c0c <__copybits>:
    8c0c:	297fffc4 	addi	r5,r5,-1
    8c10:	280fd17a 	srai	r7,r5,5
    8c14:	30c00417 	ldw	r3,16(r6)
    8c18:	30800504 	addi	r2,r6,20
    8c1c:	39c00044 	addi	r7,r7,1
    8c20:	18c7883a 	add	r3,r3,r3
    8c24:	39cf883a 	add	r7,r7,r7
    8c28:	18c7883a 	add	r3,r3,r3
    8c2c:	39cf883a 	add	r7,r7,r7
    8c30:	10c7883a 	add	r3,r2,r3
    8c34:	21cf883a 	add	r7,r4,r7
    8c38:	10c00d2e 	bgeu	r2,r3,8c70 <__copybits+0x64>
    8c3c:	200b883a 	mov	r5,r4
    8c40:	12000017 	ldw	r8,0(r2)
    8c44:	29400104 	addi	r5,r5,4
    8c48:	10800104 	addi	r2,r2,4
    8c4c:	2a3fff15 	stw	r8,-4(r5)
    8c50:	10fffb36 	bltu	r2,r3,8c40 <__alt_data_end+0xff008c40>
    8c54:	1985c83a 	sub	r2,r3,r6
    8c58:	10bffac4 	addi	r2,r2,-21
    8c5c:	1004d0ba 	srli	r2,r2,2
    8c60:	10800044 	addi	r2,r2,1
    8c64:	1085883a 	add	r2,r2,r2
    8c68:	1085883a 	add	r2,r2,r2
    8c6c:	2089883a 	add	r4,r4,r2
    8c70:	21c0032e 	bgeu	r4,r7,8c80 <__copybits+0x74>
    8c74:	20000015 	stw	zero,0(r4)
    8c78:	21000104 	addi	r4,r4,4
    8c7c:	21fffd36 	bltu	r4,r7,8c74 <__alt_data_end+0xff008c74>
    8c80:	f800283a 	ret

00008c84 <__any_on>:
    8c84:	20c00417 	ldw	r3,16(r4)
    8c88:	2805d17a 	srai	r2,r5,5
    8c8c:	21000504 	addi	r4,r4,20
    8c90:	18800d0e 	bge	r3,r2,8cc8 <__any_on+0x44>
    8c94:	18c7883a 	add	r3,r3,r3
    8c98:	18c7883a 	add	r3,r3,r3
    8c9c:	20c7883a 	add	r3,r4,r3
    8ca0:	20c0192e 	bgeu	r4,r3,8d08 <__any_on+0x84>
    8ca4:	18bfff17 	ldw	r2,-4(r3)
    8ca8:	18ffff04 	addi	r3,r3,-4
    8cac:	1000041e 	bne	r2,zero,8cc0 <__any_on+0x3c>
    8cb0:	20c0142e 	bgeu	r4,r3,8d04 <__any_on+0x80>
    8cb4:	18ffff04 	addi	r3,r3,-4
    8cb8:	19400017 	ldw	r5,0(r3)
    8cbc:	283ffc26 	beq	r5,zero,8cb0 <__alt_data_end+0xff008cb0>
    8cc0:	00800044 	movi	r2,1
    8cc4:	f800283a 	ret
    8cc8:	10c00a0e 	bge	r2,r3,8cf4 <__any_on+0x70>
    8ccc:	1085883a 	add	r2,r2,r2
    8cd0:	1085883a 	add	r2,r2,r2
    8cd4:	294007cc 	andi	r5,r5,31
    8cd8:	2087883a 	add	r3,r4,r2
    8cdc:	283ff026 	beq	r5,zero,8ca0 <__alt_data_end+0xff008ca0>
    8ce0:	19800017 	ldw	r6,0(r3)
    8ce4:	3144d83a 	srl	r2,r6,r5
    8ce8:	114a983a 	sll	r5,r2,r5
    8cec:	317ff41e 	bne	r6,r5,8cc0 <__alt_data_end+0xff008cc0>
    8cf0:	003feb06 	br	8ca0 <__alt_data_end+0xff008ca0>
    8cf4:	1085883a 	add	r2,r2,r2
    8cf8:	1085883a 	add	r2,r2,r2
    8cfc:	2087883a 	add	r3,r4,r2
    8d00:	003fe706 	br	8ca0 <__alt_data_end+0xff008ca0>
    8d04:	f800283a 	ret
    8d08:	0005883a 	mov	r2,zero
    8d0c:	f800283a 	ret

00008d10 <_realloc_r>:
    8d10:	defff604 	addi	sp,sp,-40
    8d14:	dc800215 	stw	r18,8(sp)
    8d18:	dfc00915 	stw	ra,36(sp)
    8d1c:	df000815 	stw	fp,32(sp)
    8d20:	ddc00715 	stw	r23,28(sp)
    8d24:	dd800615 	stw	r22,24(sp)
    8d28:	dd400515 	stw	r21,20(sp)
    8d2c:	dd000415 	stw	r20,16(sp)
    8d30:	dcc00315 	stw	r19,12(sp)
    8d34:	dc400115 	stw	r17,4(sp)
    8d38:	dc000015 	stw	r16,0(sp)
    8d3c:	3025883a 	mov	r18,r6
    8d40:	2800b726 	beq	r5,zero,9020 <_realloc_r+0x310>
    8d44:	282b883a 	mov	r21,r5
    8d48:	2029883a 	mov	r20,r4
    8d4c:	000e8fc0 	call	e8fc <__malloc_lock>
    8d50:	a8bfff17 	ldw	r2,-4(r21)
    8d54:	043fff04 	movi	r16,-4
    8d58:	90c002c4 	addi	r3,r18,11
    8d5c:	01000584 	movi	r4,22
    8d60:	acfffe04 	addi	r19,r21,-8
    8d64:	1420703a 	and	r16,r2,r16
    8d68:	20c0332e 	bgeu	r4,r3,8e38 <_realloc_r+0x128>
    8d6c:	047ffe04 	movi	r17,-8
    8d70:	1c62703a 	and	r17,r3,r17
    8d74:	8807883a 	mov	r3,r17
    8d78:	88005816 	blt	r17,zero,8edc <_realloc_r+0x1cc>
    8d7c:	8c805736 	bltu	r17,r18,8edc <_realloc_r+0x1cc>
    8d80:	80c0300e 	bge	r16,r3,8e44 <_realloc_r+0x134>
    8d84:	07000074 	movhi	fp,1
    8d88:	e701e204 	addi	fp,fp,1928
    8d8c:	e1c00217 	ldw	r7,8(fp)
    8d90:	9c09883a 	add	r4,r19,r16
    8d94:	22000117 	ldw	r8,4(r4)
    8d98:	21c06326 	beq	r4,r7,8f28 <_realloc_r+0x218>
    8d9c:	017fff84 	movi	r5,-2
    8da0:	414a703a 	and	r5,r8,r5
    8da4:	214b883a 	add	r5,r4,r5
    8da8:	29800117 	ldw	r6,4(r5)
    8dac:	3180004c 	andi	r6,r6,1
    8db0:	30003f26 	beq	r6,zero,8eb0 <_realloc_r+0x1a0>
    8db4:	1080004c 	andi	r2,r2,1
    8db8:	10008326 	beq	r2,zero,8fc8 <_realloc_r+0x2b8>
    8dbc:	900b883a 	mov	r5,r18
    8dc0:	a009883a 	mov	r4,r20
    8dc4:	0001e280 	call	1e28 <_malloc_r>
    8dc8:	1025883a 	mov	r18,r2
    8dcc:	10011e26 	beq	r2,zero,9248 <_realloc_r+0x538>
    8dd0:	a93fff17 	ldw	r4,-4(r21)
    8dd4:	10fffe04 	addi	r3,r2,-8
    8dd8:	00bfff84 	movi	r2,-2
    8ddc:	2084703a 	and	r2,r4,r2
    8de0:	9885883a 	add	r2,r19,r2
    8de4:	1880ee26 	beq	r3,r2,91a0 <_realloc_r+0x490>
    8de8:	81bfff04 	addi	r6,r16,-4
    8dec:	00800904 	movi	r2,36
    8df0:	1180b836 	bltu	r2,r6,90d4 <_realloc_r+0x3c4>
    8df4:	00c004c4 	movi	r3,19
    8df8:	19809636 	bltu	r3,r6,9054 <_realloc_r+0x344>
    8dfc:	9005883a 	mov	r2,r18
    8e00:	a807883a 	mov	r3,r21
    8e04:	19000017 	ldw	r4,0(r3)
    8e08:	11000015 	stw	r4,0(r2)
    8e0c:	19000117 	ldw	r4,4(r3)
    8e10:	11000115 	stw	r4,4(r2)
    8e14:	18c00217 	ldw	r3,8(r3)
    8e18:	10c00215 	stw	r3,8(r2)
    8e1c:	a80b883a 	mov	r5,r21
    8e20:	a009883a 	mov	r4,r20
    8e24:	0006c780 	call	6c78 <_free_r>
    8e28:	a009883a 	mov	r4,r20
    8e2c:	000e9000 	call	e900 <__malloc_unlock>
    8e30:	9005883a 	mov	r2,r18
    8e34:	00001206 	br	8e80 <_realloc_r+0x170>
    8e38:	00c00404 	movi	r3,16
    8e3c:	1823883a 	mov	r17,r3
    8e40:	003fce06 	br	8d7c <__alt_data_end+0xff008d7c>
    8e44:	a825883a 	mov	r18,r21
    8e48:	8445c83a 	sub	r2,r16,r17
    8e4c:	00c003c4 	movi	r3,15
    8e50:	18802636 	bltu	r3,r2,8eec <_realloc_r+0x1dc>
    8e54:	99800117 	ldw	r6,4(r19)
    8e58:	9c07883a 	add	r3,r19,r16
    8e5c:	3180004c 	andi	r6,r6,1
    8e60:	3420b03a 	or	r16,r6,r16
    8e64:	9c000115 	stw	r16,4(r19)
    8e68:	18800117 	ldw	r2,4(r3)
    8e6c:	10800054 	ori	r2,r2,1
    8e70:	18800115 	stw	r2,4(r3)
    8e74:	a009883a 	mov	r4,r20
    8e78:	000e9000 	call	e900 <__malloc_unlock>
    8e7c:	9005883a 	mov	r2,r18
    8e80:	dfc00917 	ldw	ra,36(sp)
    8e84:	df000817 	ldw	fp,32(sp)
    8e88:	ddc00717 	ldw	r23,28(sp)
    8e8c:	dd800617 	ldw	r22,24(sp)
    8e90:	dd400517 	ldw	r21,20(sp)
    8e94:	dd000417 	ldw	r20,16(sp)
    8e98:	dcc00317 	ldw	r19,12(sp)
    8e9c:	dc800217 	ldw	r18,8(sp)
    8ea0:	dc400117 	ldw	r17,4(sp)
    8ea4:	dc000017 	ldw	r16,0(sp)
    8ea8:	dec00a04 	addi	sp,sp,40
    8eac:	f800283a 	ret
    8eb0:	017fff04 	movi	r5,-4
    8eb4:	414a703a 	and	r5,r8,r5
    8eb8:	814d883a 	add	r6,r16,r5
    8ebc:	30c01f16 	blt	r6,r3,8f3c <_realloc_r+0x22c>
    8ec0:	20800317 	ldw	r2,12(r4)
    8ec4:	20c00217 	ldw	r3,8(r4)
    8ec8:	a825883a 	mov	r18,r21
    8ecc:	3021883a 	mov	r16,r6
    8ed0:	18800315 	stw	r2,12(r3)
    8ed4:	10c00215 	stw	r3,8(r2)
    8ed8:	003fdb06 	br	8e48 <__alt_data_end+0xff008e48>
    8edc:	00800304 	movi	r2,12
    8ee0:	a0800015 	stw	r2,0(r20)
    8ee4:	0005883a 	mov	r2,zero
    8ee8:	003fe506 	br	8e80 <__alt_data_end+0xff008e80>
    8eec:	98c00117 	ldw	r3,4(r19)
    8ef0:	9c4b883a 	add	r5,r19,r17
    8ef4:	11000054 	ori	r4,r2,1
    8ef8:	18c0004c 	andi	r3,r3,1
    8efc:	1c62b03a 	or	r17,r3,r17
    8f00:	9c400115 	stw	r17,4(r19)
    8f04:	29000115 	stw	r4,4(r5)
    8f08:	2885883a 	add	r2,r5,r2
    8f0c:	10c00117 	ldw	r3,4(r2)
    8f10:	29400204 	addi	r5,r5,8
    8f14:	a009883a 	mov	r4,r20
    8f18:	18c00054 	ori	r3,r3,1
    8f1c:	10c00115 	stw	r3,4(r2)
    8f20:	0006c780 	call	6c78 <_free_r>
    8f24:	003fd306 	br	8e74 <__alt_data_end+0xff008e74>
    8f28:	017fff04 	movi	r5,-4
    8f2c:	414a703a 	and	r5,r8,r5
    8f30:	89800404 	addi	r6,r17,16
    8f34:	8151883a 	add	r8,r16,r5
    8f38:	4180590e 	bge	r8,r6,90a0 <_realloc_r+0x390>
    8f3c:	1080004c 	andi	r2,r2,1
    8f40:	103f9e1e 	bne	r2,zero,8dbc <__alt_data_end+0xff008dbc>
    8f44:	adbffe17 	ldw	r22,-8(r21)
    8f48:	00bfff04 	movi	r2,-4
    8f4c:	9dadc83a 	sub	r22,r19,r22
    8f50:	b1800117 	ldw	r6,4(r22)
    8f54:	3084703a 	and	r2,r6,r2
    8f58:	20002026 	beq	r4,zero,8fdc <_realloc_r+0x2cc>
    8f5c:	80af883a 	add	r23,r16,r2
    8f60:	b96f883a 	add	r23,r23,r5
    8f64:	21c05f26 	beq	r4,r7,90e4 <_realloc_r+0x3d4>
    8f68:	b8c01c16 	blt	r23,r3,8fdc <_realloc_r+0x2cc>
    8f6c:	20800317 	ldw	r2,12(r4)
    8f70:	20c00217 	ldw	r3,8(r4)
    8f74:	81bfff04 	addi	r6,r16,-4
    8f78:	01000904 	movi	r4,36
    8f7c:	18800315 	stw	r2,12(r3)
    8f80:	10c00215 	stw	r3,8(r2)
    8f84:	b0c00217 	ldw	r3,8(r22)
    8f88:	b0800317 	ldw	r2,12(r22)
    8f8c:	b4800204 	addi	r18,r22,8
    8f90:	18800315 	stw	r2,12(r3)
    8f94:	10c00215 	stw	r3,8(r2)
    8f98:	21801b36 	bltu	r4,r6,9008 <_realloc_r+0x2f8>
    8f9c:	008004c4 	movi	r2,19
    8fa0:	1180352e 	bgeu	r2,r6,9078 <_realloc_r+0x368>
    8fa4:	a8800017 	ldw	r2,0(r21)
    8fa8:	b0800215 	stw	r2,8(r22)
    8fac:	a8800117 	ldw	r2,4(r21)
    8fb0:	b0800315 	stw	r2,12(r22)
    8fb4:	008006c4 	movi	r2,27
    8fb8:	11807f36 	bltu	r2,r6,91b8 <_realloc_r+0x4a8>
    8fbc:	b0800404 	addi	r2,r22,16
    8fc0:	ad400204 	addi	r21,r21,8
    8fc4:	00002d06 	br	907c <_realloc_r+0x36c>
    8fc8:	adbffe17 	ldw	r22,-8(r21)
    8fcc:	00bfff04 	movi	r2,-4
    8fd0:	9dadc83a 	sub	r22,r19,r22
    8fd4:	b1000117 	ldw	r4,4(r22)
    8fd8:	2084703a 	and	r2,r4,r2
    8fdc:	b03f7726 	beq	r22,zero,8dbc <__alt_data_end+0xff008dbc>
    8fe0:	80af883a 	add	r23,r16,r2
    8fe4:	b8ff7516 	blt	r23,r3,8dbc <__alt_data_end+0xff008dbc>
    8fe8:	b0800317 	ldw	r2,12(r22)
    8fec:	b0c00217 	ldw	r3,8(r22)
    8ff0:	81bfff04 	addi	r6,r16,-4
    8ff4:	01000904 	movi	r4,36
    8ff8:	18800315 	stw	r2,12(r3)
    8ffc:	10c00215 	stw	r3,8(r2)
    9000:	b4800204 	addi	r18,r22,8
    9004:	21bfe52e 	bgeu	r4,r6,8f9c <__alt_data_end+0xff008f9c>
    9008:	a80b883a 	mov	r5,r21
    900c:	9009883a 	mov	r4,r18
    9010:	0007a900 	call	7a90 <memmove>
    9014:	b821883a 	mov	r16,r23
    9018:	b027883a 	mov	r19,r22
    901c:	003f8a06 	br	8e48 <__alt_data_end+0xff008e48>
    9020:	300b883a 	mov	r5,r6
    9024:	dfc00917 	ldw	ra,36(sp)
    9028:	df000817 	ldw	fp,32(sp)
    902c:	ddc00717 	ldw	r23,28(sp)
    9030:	dd800617 	ldw	r22,24(sp)
    9034:	dd400517 	ldw	r21,20(sp)
    9038:	dd000417 	ldw	r20,16(sp)
    903c:	dcc00317 	ldw	r19,12(sp)
    9040:	dc800217 	ldw	r18,8(sp)
    9044:	dc400117 	ldw	r17,4(sp)
    9048:	dc000017 	ldw	r16,0(sp)
    904c:	dec00a04 	addi	sp,sp,40
    9050:	0001e281 	jmpi	1e28 <_malloc_r>
    9054:	a8c00017 	ldw	r3,0(r21)
    9058:	90c00015 	stw	r3,0(r18)
    905c:	a8c00117 	ldw	r3,4(r21)
    9060:	90c00115 	stw	r3,4(r18)
    9064:	00c006c4 	movi	r3,27
    9068:	19804536 	bltu	r3,r6,9180 <_realloc_r+0x470>
    906c:	90800204 	addi	r2,r18,8
    9070:	a8c00204 	addi	r3,r21,8
    9074:	003f6306 	br	8e04 <__alt_data_end+0xff008e04>
    9078:	9005883a 	mov	r2,r18
    907c:	a8c00017 	ldw	r3,0(r21)
    9080:	b821883a 	mov	r16,r23
    9084:	b027883a 	mov	r19,r22
    9088:	10c00015 	stw	r3,0(r2)
    908c:	a8c00117 	ldw	r3,4(r21)
    9090:	10c00115 	stw	r3,4(r2)
    9094:	a8c00217 	ldw	r3,8(r21)
    9098:	10c00215 	stw	r3,8(r2)
    909c:	003f6a06 	br	8e48 <__alt_data_end+0xff008e48>
    90a0:	9c67883a 	add	r19,r19,r17
    90a4:	4445c83a 	sub	r2,r8,r17
    90a8:	e4c00215 	stw	r19,8(fp)
    90ac:	10800054 	ori	r2,r2,1
    90b0:	98800115 	stw	r2,4(r19)
    90b4:	a8bfff17 	ldw	r2,-4(r21)
    90b8:	a009883a 	mov	r4,r20
    90bc:	1080004c 	andi	r2,r2,1
    90c0:	1462b03a 	or	r17,r2,r17
    90c4:	ac7fff15 	stw	r17,-4(r21)
    90c8:	000e9000 	call	e900 <__malloc_unlock>
    90cc:	a805883a 	mov	r2,r21
    90d0:	003f6b06 	br	8e80 <__alt_data_end+0xff008e80>
    90d4:	a80b883a 	mov	r5,r21
    90d8:	9009883a 	mov	r4,r18
    90dc:	0007a900 	call	7a90 <memmove>
    90e0:	003f4e06 	br	8e1c <__alt_data_end+0xff008e1c>
    90e4:	89000404 	addi	r4,r17,16
    90e8:	b93fbc16 	blt	r23,r4,8fdc <__alt_data_end+0xff008fdc>
    90ec:	b0800317 	ldw	r2,12(r22)
    90f0:	b0c00217 	ldw	r3,8(r22)
    90f4:	81bfff04 	addi	r6,r16,-4
    90f8:	01000904 	movi	r4,36
    90fc:	18800315 	stw	r2,12(r3)
    9100:	10c00215 	stw	r3,8(r2)
    9104:	b4800204 	addi	r18,r22,8
    9108:	21804336 	bltu	r4,r6,9218 <_realloc_r+0x508>
    910c:	008004c4 	movi	r2,19
    9110:	11803f2e 	bgeu	r2,r6,9210 <_realloc_r+0x500>
    9114:	a8800017 	ldw	r2,0(r21)
    9118:	b0800215 	stw	r2,8(r22)
    911c:	a8800117 	ldw	r2,4(r21)
    9120:	b0800315 	stw	r2,12(r22)
    9124:	008006c4 	movi	r2,27
    9128:	11803f36 	bltu	r2,r6,9228 <_realloc_r+0x518>
    912c:	b0800404 	addi	r2,r22,16
    9130:	ad400204 	addi	r21,r21,8
    9134:	a8c00017 	ldw	r3,0(r21)
    9138:	10c00015 	stw	r3,0(r2)
    913c:	a8c00117 	ldw	r3,4(r21)
    9140:	10c00115 	stw	r3,4(r2)
    9144:	a8c00217 	ldw	r3,8(r21)
    9148:	10c00215 	stw	r3,8(r2)
    914c:	b447883a 	add	r3,r22,r17
    9150:	bc45c83a 	sub	r2,r23,r17
    9154:	e0c00215 	stw	r3,8(fp)
    9158:	10800054 	ori	r2,r2,1
    915c:	18800115 	stw	r2,4(r3)
    9160:	b0800117 	ldw	r2,4(r22)
    9164:	a009883a 	mov	r4,r20
    9168:	1080004c 	andi	r2,r2,1
    916c:	1462b03a 	or	r17,r2,r17
    9170:	b4400115 	stw	r17,4(r22)
    9174:	000e9000 	call	e900 <__malloc_unlock>
    9178:	9005883a 	mov	r2,r18
    917c:	003f4006 	br	8e80 <__alt_data_end+0xff008e80>
    9180:	a8c00217 	ldw	r3,8(r21)
    9184:	90c00215 	stw	r3,8(r18)
    9188:	a8c00317 	ldw	r3,12(r21)
    918c:	90c00315 	stw	r3,12(r18)
    9190:	30801126 	beq	r6,r2,91d8 <_realloc_r+0x4c8>
    9194:	90800404 	addi	r2,r18,16
    9198:	a8c00404 	addi	r3,r21,16
    919c:	003f1906 	br	8e04 <__alt_data_end+0xff008e04>
    91a0:	90ffff17 	ldw	r3,-4(r18)
    91a4:	00bfff04 	movi	r2,-4
    91a8:	a825883a 	mov	r18,r21
    91ac:	1884703a 	and	r2,r3,r2
    91b0:	80a1883a 	add	r16,r16,r2
    91b4:	003f2406 	br	8e48 <__alt_data_end+0xff008e48>
    91b8:	a8800217 	ldw	r2,8(r21)
    91bc:	b0800415 	stw	r2,16(r22)
    91c0:	a8800317 	ldw	r2,12(r21)
    91c4:	b0800515 	stw	r2,20(r22)
    91c8:	31000a26 	beq	r6,r4,91f4 <_realloc_r+0x4e4>
    91cc:	b0800604 	addi	r2,r22,24
    91d0:	ad400404 	addi	r21,r21,16
    91d4:	003fa906 	br	907c <__alt_data_end+0xff00907c>
    91d8:	a9000417 	ldw	r4,16(r21)
    91dc:	90800604 	addi	r2,r18,24
    91e0:	a8c00604 	addi	r3,r21,24
    91e4:	91000415 	stw	r4,16(r18)
    91e8:	a9000517 	ldw	r4,20(r21)
    91ec:	91000515 	stw	r4,20(r18)
    91f0:	003f0406 	br	8e04 <__alt_data_end+0xff008e04>
    91f4:	a8c00417 	ldw	r3,16(r21)
    91f8:	ad400604 	addi	r21,r21,24
    91fc:	b0800804 	addi	r2,r22,32
    9200:	b0c00615 	stw	r3,24(r22)
    9204:	a8ffff17 	ldw	r3,-4(r21)
    9208:	b0c00715 	stw	r3,28(r22)
    920c:	003f9b06 	br	907c <__alt_data_end+0xff00907c>
    9210:	9005883a 	mov	r2,r18
    9214:	003fc706 	br	9134 <__alt_data_end+0xff009134>
    9218:	a80b883a 	mov	r5,r21
    921c:	9009883a 	mov	r4,r18
    9220:	0007a900 	call	7a90 <memmove>
    9224:	003fc906 	br	914c <__alt_data_end+0xff00914c>
    9228:	a8800217 	ldw	r2,8(r21)
    922c:	b0800415 	stw	r2,16(r22)
    9230:	a8800317 	ldw	r2,12(r21)
    9234:	b0800515 	stw	r2,20(r22)
    9238:	31000726 	beq	r6,r4,9258 <_realloc_r+0x548>
    923c:	b0800604 	addi	r2,r22,24
    9240:	ad400404 	addi	r21,r21,16
    9244:	003fbb06 	br	9134 <__alt_data_end+0xff009134>
    9248:	a009883a 	mov	r4,r20
    924c:	000e9000 	call	e900 <__malloc_unlock>
    9250:	0005883a 	mov	r2,zero
    9254:	003f0a06 	br	8e80 <__alt_data_end+0xff008e80>
    9258:	a8c00417 	ldw	r3,16(r21)
    925c:	ad400604 	addi	r21,r21,24
    9260:	b0800804 	addi	r2,r22,32
    9264:	b0c00615 	stw	r3,24(r22)
    9268:	a8ffff17 	ldw	r3,-4(r21)
    926c:	b0c00715 	stw	r3,28(r22)
    9270:	003fb006 	br	9134 <__alt_data_end+0xff009134>

00009274 <__fpclassifyd>:
    9274:	00a00034 	movhi	r2,32768
    9278:	10bfffc4 	addi	r2,r2,-1
    927c:	2884703a 	and	r2,r5,r2
    9280:	10000726 	beq	r2,zero,92a0 <__fpclassifyd+0x2c>
    9284:	00fffc34 	movhi	r3,65520
    9288:	019ff834 	movhi	r6,32736
    928c:	28c7883a 	add	r3,r5,r3
    9290:	31bfffc4 	addi	r6,r6,-1
    9294:	30c00536 	bltu	r6,r3,92ac <__fpclassifyd+0x38>
    9298:	00800104 	movi	r2,4
    929c:	f800283a 	ret
    92a0:	2000021e 	bne	r4,zero,92ac <__fpclassifyd+0x38>
    92a4:	00800084 	movi	r2,2
    92a8:	f800283a 	ret
    92ac:	00dffc34 	movhi	r3,32752
    92b0:	019ff834 	movhi	r6,32736
    92b4:	28cb883a 	add	r5,r5,r3
    92b8:	31bfffc4 	addi	r6,r6,-1
    92bc:	317ff62e 	bgeu	r6,r5,9298 <__alt_data_end+0xff009298>
    92c0:	01400434 	movhi	r5,16
    92c4:	297fffc4 	addi	r5,r5,-1
    92c8:	28800236 	bltu	r5,r2,92d4 <__fpclassifyd+0x60>
    92cc:	008000c4 	movi	r2,3
    92d0:	f800283a 	ret
    92d4:	10c00226 	beq	r2,r3,92e0 <__fpclassifyd+0x6c>
    92d8:	0005883a 	mov	r2,zero
    92dc:	f800283a 	ret
    92e0:	2005003a 	cmpeq	r2,r4,zero
    92e4:	f800283a 	ret

000092e8 <__sread>:
    92e8:	defffe04 	addi	sp,sp,-8
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	2821883a 	mov	r16,r5
    92f4:	2940038f 	ldh	r5,14(r5)
    92f8:	dfc00115 	stw	ra,4(sp)
    92fc:	000b0dc0 	call	b0dc <_read_r>
    9300:	10000716 	blt	r2,zero,9320 <__sread+0x38>
    9304:	80c01417 	ldw	r3,80(r16)
    9308:	1887883a 	add	r3,r3,r2
    930c:	80c01415 	stw	r3,80(r16)
    9310:	dfc00117 	ldw	ra,4(sp)
    9314:	dc000017 	ldw	r16,0(sp)
    9318:	dec00204 	addi	sp,sp,8
    931c:	f800283a 	ret
    9320:	80c0030b 	ldhu	r3,12(r16)
    9324:	18fbffcc 	andi	r3,r3,61439
    9328:	80c0030d 	sth	r3,12(r16)
    932c:	dfc00117 	ldw	ra,4(sp)
    9330:	dc000017 	ldw	r16,0(sp)
    9334:	dec00204 	addi	sp,sp,8
    9338:	f800283a 	ret

0000933c <__seofread>:
    933c:	0005883a 	mov	r2,zero
    9340:	f800283a 	ret

00009344 <__swrite>:
    9344:	2880030b 	ldhu	r2,12(r5)
    9348:	defffb04 	addi	sp,sp,-20
    934c:	dcc00315 	stw	r19,12(sp)
    9350:	dc800215 	stw	r18,8(sp)
    9354:	dc400115 	stw	r17,4(sp)
    9358:	dc000015 	stw	r16,0(sp)
    935c:	dfc00415 	stw	ra,16(sp)
    9360:	10c0400c 	andi	r3,r2,256
    9364:	2821883a 	mov	r16,r5
    9368:	2023883a 	mov	r17,r4
    936c:	3025883a 	mov	r18,r6
    9370:	3827883a 	mov	r19,r7
    9374:	18000526 	beq	r3,zero,938c <__swrite+0x48>
    9378:	2940038f 	ldh	r5,14(r5)
    937c:	01c00084 	movi	r7,2
    9380:	000d883a 	mov	r6,zero
    9384:	000b07c0 	call	b07c <_lseek_r>
    9388:	8080030b 	ldhu	r2,12(r16)
    938c:	8140038f 	ldh	r5,14(r16)
    9390:	10bbffcc 	andi	r2,r2,61439
    9394:	980f883a 	mov	r7,r19
    9398:	900d883a 	mov	r6,r18
    939c:	8809883a 	mov	r4,r17
    93a0:	8080030d 	sth	r2,12(r16)
    93a4:	dfc00417 	ldw	ra,16(sp)
    93a8:	dcc00317 	ldw	r19,12(sp)
    93ac:	dc800217 	ldw	r18,8(sp)
    93b0:	dc400117 	ldw	r17,4(sp)
    93b4:	dc000017 	ldw	r16,0(sp)
    93b8:	dec00504 	addi	sp,sp,20
    93bc:	000ab481 	jmpi	ab48 <_write_r>

000093c0 <__sseek>:
    93c0:	defffe04 	addi	sp,sp,-8
    93c4:	dc000015 	stw	r16,0(sp)
    93c8:	2821883a 	mov	r16,r5
    93cc:	2940038f 	ldh	r5,14(r5)
    93d0:	dfc00115 	stw	ra,4(sp)
    93d4:	000b07c0 	call	b07c <_lseek_r>
    93d8:	00ffffc4 	movi	r3,-1
    93dc:	10c00826 	beq	r2,r3,9400 <__sseek+0x40>
    93e0:	80c0030b 	ldhu	r3,12(r16)
    93e4:	80801415 	stw	r2,80(r16)
    93e8:	18c40014 	ori	r3,r3,4096
    93ec:	80c0030d 	sth	r3,12(r16)
    93f0:	dfc00117 	ldw	ra,4(sp)
    93f4:	dc000017 	ldw	r16,0(sp)
    93f8:	dec00204 	addi	sp,sp,8
    93fc:	f800283a 	ret
    9400:	80c0030b 	ldhu	r3,12(r16)
    9404:	18fbffcc 	andi	r3,r3,61439
    9408:	80c0030d 	sth	r3,12(r16)
    940c:	dfc00117 	ldw	ra,4(sp)
    9410:	dc000017 	ldw	r16,0(sp)
    9414:	dec00204 	addi	sp,sp,8
    9418:	f800283a 	ret

0000941c <__sclose>:
    941c:	2940038f 	ldh	r5,14(r5)
    9420:	000aba81 	jmpi	aba8 <_close_r>

00009424 <strcmp>:
    9424:	2144b03a 	or	r2,r4,r5
    9428:	108000cc 	andi	r2,r2,3
    942c:	1000171e 	bne	r2,zero,948c <strcmp+0x68>
    9430:	20800017 	ldw	r2,0(r4)
    9434:	28c00017 	ldw	r3,0(r5)
    9438:	10c0141e 	bne	r2,r3,948c <strcmp+0x68>
    943c:	027fbff4 	movhi	r9,65279
    9440:	4a7fbfc4 	addi	r9,r9,-257
    9444:	0086303a 	nor	r3,zero,r2
    9448:	02202074 	movhi	r8,32897
    944c:	1245883a 	add	r2,r2,r9
    9450:	42202004 	addi	r8,r8,-32640
    9454:	10c4703a 	and	r2,r2,r3
    9458:	1204703a 	and	r2,r2,r8
    945c:	10000226 	beq	r2,zero,9468 <strcmp+0x44>
    9460:	00002306 	br	94f0 <strcmp+0xcc>
    9464:	1000221e 	bne	r2,zero,94f0 <strcmp+0xcc>
    9468:	21000104 	addi	r4,r4,4
    946c:	20c00017 	ldw	r3,0(r4)
    9470:	29400104 	addi	r5,r5,4
    9474:	29800017 	ldw	r6,0(r5)
    9478:	1a4f883a 	add	r7,r3,r9
    947c:	00c4303a 	nor	r2,zero,r3
    9480:	3884703a 	and	r2,r7,r2
    9484:	1204703a 	and	r2,r2,r8
    9488:	19bff626 	beq	r3,r6,9464 <__alt_data_end+0xff009464>
    948c:	20800003 	ldbu	r2,0(r4)
    9490:	10c03fcc 	andi	r3,r2,255
    9494:	18c0201c 	xori	r3,r3,128
    9498:	18ffe004 	addi	r3,r3,-128
    949c:	18000c26 	beq	r3,zero,94d0 <strcmp+0xac>
    94a0:	29800007 	ldb	r6,0(r5)
    94a4:	19800326 	beq	r3,r6,94b4 <strcmp+0x90>
    94a8:	00001306 	br	94f8 <strcmp+0xd4>
    94ac:	29800007 	ldb	r6,0(r5)
    94b0:	11800b1e 	bne	r2,r6,94e0 <strcmp+0xbc>
    94b4:	21000044 	addi	r4,r4,1
    94b8:	20c00003 	ldbu	r3,0(r4)
    94bc:	29400044 	addi	r5,r5,1
    94c0:	18803fcc 	andi	r2,r3,255
    94c4:	1080201c 	xori	r2,r2,128
    94c8:	10bfe004 	addi	r2,r2,-128
    94cc:	103ff71e 	bne	r2,zero,94ac <__alt_data_end+0xff0094ac>
    94d0:	0007883a 	mov	r3,zero
    94d4:	28800003 	ldbu	r2,0(r5)
    94d8:	1885c83a 	sub	r2,r3,r2
    94dc:	f800283a 	ret
    94e0:	28800003 	ldbu	r2,0(r5)
    94e4:	18c03fcc 	andi	r3,r3,255
    94e8:	1885c83a 	sub	r2,r3,r2
    94ec:	f800283a 	ret
    94f0:	0005883a 	mov	r2,zero
    94f4:	f800283a 	ret
    94f8:	10c03fcc 	andi	r3,r2,255
    94fc:	003ff506 	br	94d4 <__alt_data_end+0xff0094d4>

00009500 <__sprint_r.part.0>:
    9500:	28801917 	ldw	r2,100(r5)
    9504:	defff604 	addi	sp,sp,-40
    9508:	dd400515 	stw	r21,20(sp)
    950c:	dfc00915 	stw	ra,36(sp)
    9510:	df000815 	stw	fp,32(sp)
    9514:	ddc00715 	stw	r23,28(sp)
    9518:	dd800615 	stw	r22,24(sp)
    951c:	dd000415 	stw	r20,16(sp)
    9520:	dcc00315 	stw	r19,12(sp)
    9524:	dc800215 	stw	r18,8(sp)
    9528:	dc400115 	stw	r17,4(sp)
    952c:	dc000015 	stw	r16,0(sp)
    9530:	1088000c 	andi	r2,r2,8192
    9534:	302b883a 	mov	r21,r6
    9538:	10002e26 	beq	r2,zero,95f4 <__sprint_r.part.0+0xf4>
    953c:	30800217 	ldw	r2,8(r6)
    9540:	35800017 	ldw	r22,0(r6)
    9544:	10002926 	beq	r2,zero,95ec <__sprint_r.part.0+0xec>
    9548:	2827883a 	mov	r19,r5
    954c:	2029883a 	mov	r20,r4
    9550:	b5c00104 	addi	r23,r22,4
    9554:	04bfffc4 	movi	r18,-1
    9558:	bc400017 	ldw	r17,0(r23)
    955c:	b4000017 	ldw	r16,0(r22)
    9560:	0039883a 	mov	fp,zero
    9564:	8822d0ba 	srli	r17,r17,2
    9568:	8800031e 	bne	r17,zero,9578 <__sprint_r.part.0+0x78>
    956c:	00001806 	br	95d0 <__sprint_r.part.0+0xd0>
    9570:	84000104 	addi	r16,r16,4
    9574:	8f001526 	beq	r17,fp,95cc <__sprint_r.part.0+0xcc>
    9578:	81400017 	ldw	r5,0(r16)
    957c:	980d883a 	mov	r6,r19
    9580:	a009883a 	mov	r4,r20
    9584:	000af280 	call	af28 <_fputwc_r>
    9588:	e7000044 	addi	fp,fp,1
    958c:	14bff81e 	bne	r2,r18,9570 <__alt_data_end+0xff009570>
    9590:	9005883a 	mov	r2,r18
    9594:	a8000215 	stw	zero,8(r21)
    9598:	a8000115 	stw	zero,4(r21)
    959c:	dfc00917 	ldw	ra,36(sp)
    95a0:	df000817 	ldw	fp,32(sp)
    95a4:	ddc00717 	ldw	r23,28(sp)
    95a8:	dd800617 	ldw	r22,24(sp)
    95ac:	dd400517 	ldw	r21,20(sp)
    95b0:	dd000417 	ldw	r20,16(sp)
    95b4:	dcc00317 	ldw	r19,12(sp)
    95b8:	dc800217 	ldw	r18,8(sp)
    95bc:	dc400117 	ldw	r17,4(sp)
    95c0:	dc000017 	ldw	r16,0(sp)
    95c4:	dec00a04 	addi	sp,sp,40
    95c8:	f800283a 	ret
    95cc:	a8800217 	ldw	r2,8(r21)
    95d0:	8c63883a 	add	r17,r17,r17
    95d4:	8c63883a 	add	r17,r17,r17
    95d8:	1445c83a 	sub	r2,r2,r17
    95dc:	a8800215 	stw	r2,8(r21)
    95e0:	b5800204 	addi	r22,r22,8
    95e4:	bdc00204 	addi	r23,r23,8
    95e8:	103fdb1e 	bne	r2,zero,9558 <__alt_data_end+0xff009558>
    95ec:	0005883a 	mov	r2,zero
    95f0:	003fe806 	br	9594 <__alt_data_end+0xff009594>
    95f4:	0006f880 	call	6f88 <__sfvwrite_r>
    95f8:	003fe606 	br	9594 <__alt_data_end+0xff009594>

000095fc <__sprint_r>:
    95fc:	30c00217 	ldw	r3,8(r6)
    9600:	18000126 	beq	r3,zero,9608 <__sprint_r+0xc>
    9604:	00095001 	jmpi	9500 <__sprint_r.part.0>
    9608:	30000115 	stw	zero,4(r6)
    960c:	0005883a 	mov	r2,zero
    9610:	f800283a 	ret

00009614 <___vfiprintf_internal_r>:
    9614:	deffc904 	addi	sp,sp,-220
    9618:	df003515 	stw	fp,212(sp)
    961c:	dd003115 	stw	r20,196(sp)
    9620:	dfc03615 	stw	ra,216(sp)
    9624:	ddc03415 	stw	r23,208(sp)
    9628:	dd803315 	stw	r22,204(sp)
    962c:	dd403215 	stw	r21,200(sp)
    9630:	dcc03015 	stw	r19,192(sp)
    9634:	dc802f15 	stw	r18,188(sp)
    9638:	dc402e15 	stw	r17,184(sp)
    963c:	dc002d15 	stw	r16,180(sp)
    9640:	d9002015 	stw	r4,128(sp)
    9644:	d9c02215 	stw	r7,136(sp)
    9648:	2829883a 	mov	r20,r5
    964c:	3039883a 	mov	fp,r6
    9650:	20000226 	beq	r4,zero,965c <___vfiprintf_internal_r+0x48>
    9654:	20800e17 	ldw	r2,56(r4)
    9658:	1000cf26 	beq	r2,zero,9998 <___vfiprintf_internal_r+0x384>
    965c:	a080030b 	ldhu	r2,12(r20)
    9660:	10c8000c 	andi	r3,r2,8192
    9664:	1800061e 	bne	r3,zero,9680 <___vfiprintf_internal_r+0x6c>
    9668:	a1001917 	ldw	r4,100(r20)
    966c:	00f7ffc4 	movi	r3,-8193
    9670:	10880014 	ori	r2,r2,8192
    9674:	20c6703a 	and	r3,r4,r3
    9678:	a080030d 	sth	r2,12(r20)
    967c:	a0c01915 	stw	r3,100(r20)
    9680:	10c0020c 	andi	r3,r2,8
    9684:	1800a926 	beq	r3,zero,992c <___vfiprintf_internal_r+0x318>
    9688:	a0c00417 	ldw	r3,16(r20)
    968c:	1800a726 	beq	r3,zero,992c <___vfiprintf_internal_r+0x318>
    9690:	1080068c 	andi	r2,r2,26
    9694:	00c00284 	movi	r3,10
    9698:	10c0ac26 	beq	r2,r3,994c <___vfiprintf_internal_r+0x338>
    969c:	da801a04 	addi	r10,sp,104
    96a0:	da801e15 	stw	r10,120(sp)
    96a4:	d8801e17 	ldw	r2,120(sp)
    96a8:	da8019c4 	addi	r10,sp,103
    96ac:	05800074 	movhi	r22,1
    96b0:	05c00074 	movhi	r23,1
    96b4:	da801f15 	stw	r10,124(sp)
    96b8:	1295c83a 	sub	r10,r2,r10
    96bc:	b5815704 	addi	r22,r22,1372
    96c0:	bdc15304 	addi	r23,r23,1356
    96c4:	dec01a15 	stw	sp,104(sp)
    96c8:	d8001c15 	stw	zero,112(sp)
    96cc:	d8001b15 	stw	zero,108(sp)
    96d0:	d8002615 	stw	zero,152(sp)
    96d4:	d8002315 	stw	zero,140(sp)
    96d8:	da802715 	stw	r10,156(sp)
    96dc:	d811883a 	mov	r8,sp
    96e0:	dd002115 	stw	r20,132(sp)
    96e4:	e021883a 	mov	r16,fp
    96e8:	80800007 	ldb	r2,0(r16)
    96ec:	1003ea26 	beq	r2,zero,a698 <___vfiprintf_internal_r+0x1084>
    96f0:	00c00944 	movi	r3,37
    96f4:	8025883a 	mov	r18,r16
    96f8:	10c0021e 	bne	r2,r3,9704 <___vfiprintf_internal_r+0xf0>
    96fc:	00001606 	br	9758 <___vfiprintf_internal_r+0x144>
    9700:	10c00326 	beq	r2,r3,9710 <___vfiprintf_internal_r+0xfc>
    9704:	94800044 	addi	r18,r18,1
    9708:	90800007 	ldb	r2,0(r18)
    970c:	103ffc1e 	bne	r2,zero,9700 <__alt_data_end+0xff009700>
    9710:	9423c83a 	sub	r17,r18,r16
    9714:	88001026 	beq	r17,zero,9758 <___vfiprintf_internal_r+0x144>
    9718:	d8c01c17 	ldw	r3,112(sp)
    971c:	d8801b17 	ldw	r2,108(sp)
    9720:	44000015 	stw	r16,0(r8)
    9724:	88c7883a 	add	r3,r17,r3
    9728:	10800044 	addi	r2,r2,1
    972c:	44400115 	stw	r17,4(r8)
    9730:	d8c01c15 	stw	r3,112(sp)
    9734:	d8801b15 	stw	r2,108(sp)
    9738:	010001c4 	movi	r4,7
    973c:	2080760e 	bge	r4,r2,9918 <___vfiprintf_internal_r+0x304>
    9740:	1803821e 	bne	r3,zero,a54c <___vfiprintf_internal_r+0xf38>
    9744:	da802317 	ldw	r10,140(sp)
    9748:	d8001b15 	stw	zero,108(sp)
    974c:	d811883a 	mov	r8,sp
    9750:	5455883a 	add	r10,r10,r17
    9754:	da802315 	stw	r10,140(sp)
    9758:	90800007 	ldb	r2,0(r18)
    975c:	10044626 	beq	r2,zero,a878 <___vfiprintf_internal_r+0x1264>
    9760:	90c00047 	ldb	r3,1(r18)
    9764:	94000044 	addi	r16,r18,1
    9768:	d8001d85 	stb	zero,118(sp)
    976c:	0009883a 	mov	r4,zero
    9770:	000f883a 	mov	r7,zero
    9774:	027fffc4 	movi	r9,-1
    9778:	0023883a 	mov	r17,zero
    977c:	0029883a 	mov	r20,zero
    9780:	01401604 	movi	r5,88
    9784:	01800244 	movi	r6,9
    9788:	03400a84 	movi	r13,42
    978c:	03001b04 	movi	r12,108
    9790:	84000044 	addi	r16,r16,1
    9794:	18bff804 	addi	r2,r3,-32
    9798:	28827336 	bltu	r5,r2,a168 <___vfiprintf_internal_r+0xb54>
    979c:	100490ba 	slli	r2,r2,2
    97a0:	02800074 	movhi	r10,1
    97a4:	52a5ed04 	addi	r10,r10,-26700
    97a8:	1285883a 	add	r2,r2,r10
    97ac:	10800017 	ldw	r2,0(r2)
    97b0:	1000683a 	jmp	r2
    97b4:	00009e9c 	xori	zero,zero,634
    97b8:	0000a168 	cmpgeui	zero,zero,645
    97bc:	0000a168 	cmpgeui	zero,zero,645
    97c0:	00009ebc 	xorhi	zero,zero,634
    97c4:	0000a168 	cmpgeui	zero,zero,645
    97c8:	0000a168 	cmpgeui	zero,zero,645
    97cc:	0000a168 	cmpgeui	zero,zero,645
    97d0:	0000a168 	cmpgeui	zero,zero,645
    97d4:	0000a168 	cmpgeui	zero,zero,645
    97d8:	0000a168 	cmpgeui	zero,zero,645
    97dc:	0000a0a4 	muli	zero,zero,642
    97e0:	0000a0c0 	call	a0c <init_LCD+0x20>
    97e4:	0000a168 	cmpgeui	zero,zero,645
    97e8:	000099a8 	cmpgeui	zero,zero,614
    97ec:	0000a0d0 	cmplti	zero,zero,643
    97f0:	0000a168 	cmpgeui	zero,zero,645
    97f4:	00009ec8 	cmpgei	zero,zero,635
    97f8:	00009ed4 	movui	zero,635
    97fc:	00009ed4 	movui	zero,635
    9800:	00009ed4 	movui	zero,635
    9804:	00009ed4 	movui	zero,635
    9808:	00009ed4 	movui	zero,635
    980c:	00009ed4 	movui	zero,635
    9810:	00009ed4 	movui	zero,635
    9814:	00009ed4 	movui	zero,635
    9818:	00009ed4 	movui	zero,635
    981c:	0000a168 	cmpgeui	zero,zero,645
    9820:	0000a168 	cmpgeui	zero,zero,645
    9824:	0000a168 	cmpgeui	zero,zero,645
    9828:	0000a168 	cmpgeui	zero,zero,645
    982c:	0000a168 	cmpgeui	zero,zero,645
    9830:	0000a168 	cmpgeui	zero,zero,645
    9834:	0000a168 	cmpgeui	zero,zero,645
    9838:	0000a168 	cmpgeui	zero,zero,645
    983c:	0000a168 	cmpgeui	zero,zero,645
    9840:	0000a168 	cmpgeui	zero,zero,645
    9844:	00009f00 	call	9f0 <init_LCD+0x4>
    9848:	0000a168 	cmpgeui	zero,zero,645
    984c:	0000a168 	cmpgeui	zero,zero,645
    9850:	0000a168 	cmpgeui	zero,zero,645
    9854:	0000a168 	cmpgeui	zero,zero,645
    9858:	0000a168 	cmpgeui	zero,zero,645
    985c:	0000a168 	cmpgeui	zero,zero,645
    9860:	0000a168 	cmpgeui	zero,zero,645
    9864:	0000a168 	cmpgeui	zero,zero,645
    9868:	0000a168 	cmpgeui	zero,zero,645
    986c:	0000a168 	cmpgeui	zero,zero,645
    9870:	00009f38 	rdprs	zero,zero,636
    9874:	0000a168 	cmpgeui	zero,zero,645
    9878:	0000a168 	cmpgeui	zero,zero,645
    987c:	0000a168 	cmpgeui	zero,zero,645
    9880:	0000a168 	cmpgeui	zero,zero,645
    9884:	0000a168 	cmpgeui	zero,zero,645
    9888:	00009f90 	cmplti	zero,zero,638
    988c:	0000a168 	cmpgeui	zero,zero,645
    9890:	0000a168 	cmpgeui	zero,zero,645
    9894:	0000a000 	call	a00 <init_LCD+0x14>
    9898:	0000a168 	cmpgeui	zero,zero,645
    989c:	0000a168 	cmpgeui	zero,zero,645
    98a0:	0000a168 	cmpgeui	zero,zero,645
    98a4:	0000a168 	cmpgeui	zero,zero,645
    98a8:	0000a168 	cmpgeui	zero,zero,645
    98ac:	0000a168 	cmpgeui	zero,zero,645
    98b0:	0000a168 	cmpgeui	zero,zero,645
    98b4:	0000a168 	cmpgeui	zero,zero,645
    98b8:	0000a168 	cmpgeui	zero,zero,645
    98bc:	0000a168 	cmpgeui	zero,zero,645
    98c0:	00009dac 	andhi	zero,zero,630
    98c4:	00009dd8 	cmpnei	zero,zero,631
    98c8:	0000a168 	cmpgeui	zero,zero,645
    98cc:	0000a168 	cmpgeui	zero,zero,645
    98d0:	0000a168 	cmpgeui	zero,zero,645
    98d4:	0000a110 	cmplti	zero,zero,644
    98d8:	00009dd8 	cmpnei	zero,zero,631
    98dc:	0000a168 	cmpgeui	zero,zero,645
    98e0:	0000a168 	cmpgeui	zero,zero,645
    98e4:	00009c6c 	andhi	zero,zero,625
    98e8:	0000a168 	cmpgeui	zero,zero,645
    98ec:	00009c7c 	xorhi	zero,zero,625
    98f0:	00009cb8 	rdprs	zero,zero,626
    98f4:	000099b4 	movhi	zero,614
    98f8:	00009c60 	cmpeqi	zero,zero,625
    98fc:	0000a168 	cmpgeui	zero,zero,645
    9900:	0000a03c 	xorhi	zero,zero,640
    9904:	0000a168 	cmpgeui	zero,zero,645
    9908:	0000a094 	movui	zero,642
    990c:	0000a168 	cmpgeui	zero,zero,645
    9910:	0000a168 	cmpgeui	zero,zero,645
    9914:	00009d58 	cmpnei	zero,zero,629
    9918:	42000204 	addi	r8,r8,8
    991c:	da802317 	ldw	r10,140(sp)
    9920:	5455883a 	add	r10,r10,r17
    9924:	da802315 	stw	r10,140(sp)
    9928:	003f8b06 	br	9758 <__alt_data_end+0xff009758>
    992c:	d9002017 	ldw	r4,128(sp)
    9930:	a00b883a 	mov	r5,r20
    9934:	0004b300 	call	4b30 <__swsetup_r>
    9938:	1003b11e 	bne	r2,zero,a800 <___vfiprintf_internal_r+0x11ec>
    993c:	a080030b 	ldhu	r2,12(r20)
    9940:	00c00284 	movi	r3,10
    9944:	1080068c 	andi	r2,r2,26
    9948:	10ff541e 	bne	r2,r3,969c <__alt_data_end+0xff00969c>
    994c:	a080038f 	ldh	r2,14(r20)
    9950:	103f5216 	blt	r2,zero,969c <__alt_data_end+0xff00969c>
    9954:	d9c02217 	ldw	r7,136(sp)
    9958:	d9002017 	ldw	r4,128(sp)
    995c:	e00d883a 	mov	r6,fp
    9960:	a00b883a 	mov	r5,r20
    9964:	000aa8c0 	call	aa8c <__sbprintf>
    9968:	dfc03617 	ldw	ra,216(sp)
    996c:	df003517 	ldw	fp,212(sp)
    9970:	ddc03417 	ldw	r23,208(sp)
    9974:	dd803317 	ldw	r22,204(sp)
    9978:	dd403217 	ldw	r21,200(sp)
    997c:	dd003117 	ldw	r20,196(sp)
    9980:	dcc03017 	ldw	r19,192(sp)
    9984:	dc802f17 	ldw	r18,188(sp)
    9988:	dc402e17 	ldw	r17,184(sp)
    998c:	dc002d17 	ldw	r16,180(sp)
    9990:	dec03704 	addi	sp,sp,220
    9994:	f800283a 	ret
    9998:	0006b040 	call	6b04 <__sinit>
    999c:	003f2f06 	br	965c <__alt_data_end+0xff00965c>
    99a0:	0463c83a 	sub	r17,zero,r17
    99a4:	d8802215 	stw	r2,136(sp)
    99a8:	a5000114 	ori	r20,r20,4
    99ac:	80c00007 	ldb	r3,0(r16)
    99b0:	003f7706 	br	9790 <__alt_data_end+0xff009790>
    99b4:	00800c04 	movi	r2,48
    99b8:	da802217 	ldw	r10,136(sp)
    99bc:	d8801d05 	stb	r2,116(sp)
    99c0:	00801e04 	movi	r2,120
    99c4:	d8801d45 	stb	r2,117(sp)
    99c8:	d8001d85 	stb	zero,118(sp)
    99cc:	50c00104 	addi	r3,r10,4
    99d0:	54800017 	ldw	r18,0(r10)
    99d4:	0027883a 	mov	r19,zero
    99d8:	a0800094 	ori	r2,r20,2
    99dc:	48030b16 	blt	r9,zero,a60c <___vfiprintf_internal_r+0xff8>
    99e0:	00bfdfc4 	movi	r2,-129
    99e4:	a096703a 	and	r11,r20,r2
    99e8:	d8c02215 	stw	r3,136(sp)
    99ec:	5d000094 	ori	r20,r11,2
    99f0:	90032b1e 	bne	r18,zero,a6a0 <___vfiprintf_internal_r+0x108c>
    99f4:	00800074 	movhi	r2,1
    99f8:	1080f204 	addi	r2,r2,968
    99fc:	d8802615 	stw	r2,152(sp)
    9a00:	0039883a 	mov	fp,zero
    9a04:	48017b1e 	bne	r9,zero,9ff4 <___vfiprintf_internal_r+0x9e0>
    9a08:	0013883a 	mov	r9,zero
    9a0c:	0027883a 	mov	r19,zero
    9a10:	dd401a04 	addi	r21,sp,104
    9a14:	4825883a 	mov	r18,r9
    9a18:	4cc0010e 	bge	r9,r19,9a20 <___vfiprintf_internal_r+0x40c>
    9a1c:	9825883a 	mov	r18,r19
    9a20:	e7003fcc 	andi	fp,fp,255
    9a24:	e700201c 	xori	fp,fp,128
    9a28:	e73fe004 	addi	fp,fp,-128
    9a2c:	e0000126 	beq	fp,zero,9a34 <___vfiprintf_internal_r+0x420>
    9a30:	94800044 	addi	r18,r18,1
    9a34:	a380008c 	andi	r14,r20,2
    9a38:	70000126 	beq	r14,zero,9a40 <___vfiprintf_internal_r+0x42c>
    9a3c:	94800084 	addi	r18,r18,2
    9a40:	a700210c 	andi	fp,r20,132
    9a44:	e001df1e 	bne	fp,zero,a1c4 <___vfiprintf_internal_r+0xbb0>
    9a48:	8c87c83a 	sub	r3,r17,r18
    9a4c:	00c1dd0e 	bge	zero,r3,a1c4 <___vfiprintf_internal_r+0xbb0>
    9a50:	01c00404 	movi	r7,16
    9a54:	d8801c17 	ldw	r2,112(sp)
    9a58:	38c3ad0e 	bge	r7,r3,a910 <___vfiprintf_internal_r+0x12fc>
    9a5c:	02800074 	movhi	r10,1
    9a60:	52815704 	addi	r10,r10,1372
    9a64:	dc002915 	stw	r16,164(sp)
    9a68:	d9801b17 	ldw	r6,108(sp)
    9a6c:	da802415 	stw	r10,144(sp)
    9a70:	03c001c4 	movi	r15,7
    9a74:	da402515 	stw	r9,148(sp)
    9a78:	db802815 	stw	r14,160(sp)
    9a7c:	1821883a 	mov	r16,r3
    9a80:	00000506 	br	9a98 <___vfiprintf_internal_r+0x484>
    9a84:	31400084 	addi	r5,r6,2
    9a88:	42000204 	addi	r8,r8,8
    9a8c:	200d883a 	mov	r6,r4
    9a90:	843ffc04 	addi	r16,r16,-16
    9a94:	3c000d0e 	bge	r7,r16,9acc <___vfiprintf_internal_r+0x4b8>
    9a98:	10800404 	addi	r2,r2,16
    9a9c:	31000044 	addi	r4,r6,1
    9aa0:	45800015 	stw	r22,0(r8)
    9aa4:	41c00115 	stw	r7,4(r8)
    9aa8:	d8801c15 	stw	r2,112(sp)
    9aac:	d9001b15 	stw	r4,108(sp)
    9ab0:	793ff40e 	bge	r15,r4,9a84 <__alt_data_end+0xff009a84>
    9ab4:	1001b51e 	bne	r2,zero,a18c <___vfiprintf_internal_r+0xb78>
    9ab8:	843ffc04 	addi	r16,r16,-16
    9abc:	000d883a 	mov	r6,zero
    9ac0:	01400044 	movi	r5,1
    9ac4:	d811883a 	mov	r8,sp
    9ac8:	3c3ff316 	blt	r7,r16,9a98 <__alt_data_end+0xff009a98>
    9acc:	8007883a 	mov	r3,r16
    9ad0:	da402517 	ldw	r9,148(sp)
    9ad4:	db802817 	ldw	r14,160(sp)
    9ad8:	dc002917 	ldw	r16,164(sp)
    9adc:	da802417 	ldw	r10,144(sp)
    9ae0:	1885883a 	add	r2,r3,r2
    9ae4:	40c00115 	stw	r3,4(r8)
    9ae8:	42800015 	stw	r10,0(r8)
    9aec:	d8801c15 	stw	r2,112(sp)
    9af0:	d9401b15 	stw	r5,108(sp)
    9af4:	00c001c4 	movi	r3,7
    9af8:	19426016 	blt	r3,r5,a47c <___vfiprintf_internal_r+0xe68>
    9afc:	d8c01d87 	ldb	r3,118(sp)
    9b00:	42000204 	addi	r8,r8,8
    9b04:	29000044 	addi	r4,r5,1
    9b08:	1801b31e 	bne	r3,zero,a1d8 <___vfiprintf_internal_r+0xbc4>
    9b0c:	7001c026 	beq	r14,zero,a210 <___vfiprintf_internal_r+0xbfc>
    9b10:	d8c01d04 	addi	r3,sp,116
    9b14:	10800084 	addi	r2,r2,2
    9b18:	40c00015 	stw	r3,0(r8)
    9b1c:	00c00084 	movi	r3,2
    9b20:	40c00115 	stw	r3,4(r8)
    9b24:	d8801c15 	stw	r2,112(sp)
    9b28:	d9001b15 	stw	r4,108(sp)
    9b2c:	00c001c4 	movi	r3,7
    9b30:	1902650e 	bge	r3,r4,a4c8 <___vfiprintf_internal_r+0xeb4>
    9b34:	10029a1e 	bne	r2,zero,a5a0 <___vfiprintf_internal_r+0xf8c>
    9b38:	00c02004 	movi	r3,128
    9b3c:	01000044 	movi	r4,1
    9b40:	000b883a 	mov	r5,zero
    9b44:	d811883a 	mov	r8,sp
    9b48:	e0c1b31e 	bne	fp,r3,a218 <___vfiprintf_internal_r+0xc04>
    9b4c:	8cb9c83a 	sub	fp,r17,r18
    9b50:	0701b10e 	bge	zero,fp,a218 <___vfiprintf_internal_r+0xc04>
    9b54:	01c00404 	movi	r7,16
    9b58:	3f03890e 	bge	r7,fp,a980 <___vfiprintf_internal_r+0x136c>
    9b5c:	00c00074 	movhi	r3,1
    9b60:	18c15304 	addi	r3,r3,1356
    9b64:	d8c02415 	stw	r3,144(sp)
    9b68:	8007883a 	mov	r3,r16
    9b6c:	034001c4 	movi	r13,7
    9b70:	e021883a 	mov	r16,fp
    9b74:	da402515 	stw	r9,148(sp)
    9b78:	1839883a 	mov	fp,r3
    9b7c:	00000506 	br	9b94 <___vfiprintf_internal_r+0x580>
    9b80:	29800084 	addi	r6,r5,2
    9b84:	42000204 	addi	r8,r8,8
    9b88:	180b883a 	mov	r5,r3
    9b8c:	843ffc04 	addi	r16,r16,-16
    9b90:	3c000d0e 	bge	r7,r16,9bc8 <___vfiprintf_internal_r+0x5b4>
    9b94:	10800404 	addi	r2,r2,16
    9b98:	28c00044 	addi	r3,r5,1
    9b9c:	45c00015 	stw	r23,0(r8)
    9ba0:	41c00115 	stw	r7,4(r8)
    9ba4:	d8801c15 	stw	r2,112(sp)
    9ba8:	d8c01b15 	stw	r3,108(sp)
    9bac:	68fff40e 	bge	r13,r3,9b80 <__alt_data_end+0xff009b80>
    9bb0:	1002241e 	bne	r2,zero,a444 <___vfiprintf_internal_r+0xe30>
    9bb4:	843ffc04 	addi	r16,r16,-16
    9bb8:	01800044 	movi	r6,1
    9bbc:	000b883a 	mov	r5,zero
    9bc0:	d811883a 	mov	r8,sp
    9bc4:	3c3ff316 	blt	r7,r16,9b94 <__alt_data_end+0xff009b94>
    9bc8:	da402517 	ldw	r9,148(sp)
    9bcc:	e007883a 	mov	r3,fp
    9bd0:	8039883a 	mov	fp,r16
    9bd4:	1821883a 	mov	r16,r3
    9bd8:	d8c02417 	ldw	r3,144(sp)
    9bdc:	1705883a 	add	r2,r2,fp
    9be0:	47000115 	stw	fp,4(r8)
    9be4:	40c00015 	stw	r3,0(r8)
    9be8:	d8801c15 	stw	r2,112(sp)
    9bec:	d9801b15 	stw	r6,108(sp)
    9bf0:	00c001c4 	movi	r3,7
    9bf4:	19827616 	blt	r3,r6,a5d0 <___vfiprintf_internal_r+0xfbc>
    9bf8:	4cf9c83a 	sub	fp,r9,r19
    9bfc:	42000204 	addi	r8,r8,8
    9c00:	31000044 	addi	r4,r6,1
    9c04:	300b883a 	mov	r5,r6
    9c08:	07018516 	blt	zero,fp,a220 <___vfiprintf_internal_r+0xc0c>
    9c0c:	9885883a 	add	r2,r19,r2
    9c10:	45400015 	stw	r21,0(r8)
    9c14:	44c00115 	stw	r19,4(r8)
    9c18:	d8801c15 	stw	r2,112(sp)
    9c1c:	d9001b15 	stw	r4,108(sp)
    9c20:	00c001c4 	movi	r3,7
    9c24:	1901dd0e 	bge	r3,r4,a39c <___vfiprintf_internal_r+0xd88>
    9c28:	1002401e 	bne	r2,zero,a52c <___vfiprintf_internal_r+0xf18>
    9c2c:	d8001b15 	stw	zero,108(sp)
    9c30:	a2c0010c 	andi	r11,r20,4
    9c34:	58000226 	beq	r11,zero,9c40 <___vfiprintf_internal_r+0x62c>
    9c38:	8ca7c83a 	sub	r19,r17,r18
    9c3c:	04c2f216 	blt	zero,r19,a808 <___vfiprintf_internal_r+0x11f4>
    9c40:	8c80010e 	bge	r17,r18,9c48 <___vfiprintf_internal_r+0x634>
    9c44:	9023883a 	mov	r17,r18
    9c48:	da802317 	ldw	r10,140(sp)
    9c4c:	5455883a 	add	r10,r10,r17
    9c50:	da802315 	stw	r10,140(sp)
    9c54:	d8001b15 	stw	zero,108(sp)
    9c58:	d811883a 	mov	r8,sp
    9c5c:	003ea206 	br	96e8 <__alt_data_end+0xff0096e8>
    9c60:	a5000814 	ori	r20,r20,32
    9c64:	80c00007 	ldb	r3,0(r16)
    9c68:	003ec906 	br	9790 <__alt_data_end+0xff009790>
    9c6c:	80c00007 	ldb	r3,0(r16)
    9c70:	1b030926 	beq	r3,r12,a898 <___vfiprintf_internal_r+0x1284>
    9c74:	a5000414 	ori	r20,r20,16
    9c78:	003ec506 	br	9790 <__alt_data_end+0xff009790>
    9c7c:	21003fcc 	andi	r4,r4,255
    9c80:	20035e1e 	bne	r4,zero,a9fc <___vfiprintf_internal_r+0x13e8>
    9c84:	a080080c 	andi	r2,r20,32
    9c88:	1002a526 	beq	r2,zero,a720 <___vfiprintf_internal_r+0x110c>
    9c8c:	da802217 	ldw	r10,136(sp)
    9c90:	50800017 	ldw	r2,0(r10)
    9c94:	da802317 	ldw	r10,140(sp)
    9c98:	5007d7fa 	srai	r3,r10,31
    9c9c:	da802217 	ldw	r10,136(sp)
    9ca0:	10c00115 	stw	r3,4(r2)
    9ca4:	52800104 	addi	r10,r10,4
    9ca8:	da802215 	stw	r10,136(sp)
    9cac:	da802317 	ldw	r10,140(sp)
    9cb0:	12800015 	stw	r10,0(r2)
    9cb4:	003e8c06 	br	96e8 <__alt_data_end+0xff0096e8>
    9cb8:	21003fcc 	andi	r4,r4,255
    9cbc:	2003511e 	bne	r4,zero,aa04 <___vfiprintf_internal_r+0x13f0>
    9cc0:	a080080c 	andi	r2,r20,32
    9cc4:	1000a126 	beq	r2,zero,9f4c <___vfiprintf_internal_r+0x938>
    9cc8:	da802217 	ldw	r10,136(sp)
    9ccc:	d8001d85 	stb	zero,118(sp)
    9cd0:	50800204 	addi	r2,r10,8
    9cd4:	54800017 	ldw	r18,0(r10)
    9cd8:	54c00117 	ldw	r19,4(r10)
    9cdc:	4802b416 	blt	r9,zero,a7b0 <___vfiprintf_internal_r+0x119c>
    9ce0:	013fdfc4 	movi	r4,-129
    9ce4:	94c6b03a 	or	r3,r18,r19
    9ce8:	d8802215 	stw	r2,136(sp)
    9cec:	a128703a 	and	r20,r20,r4
    9cf0:	1800a226 	beq	r3,zero,9f7c <___vfiprintf_internal_r+0x968>
    9cf4:	0039883a 	mov	fp,zero
    9cf8:	dd401a04 	addi	r21,sp,104
    9cfc:	9006d0fa 	srli	r3,r18,3
    9d00:	9808977a 	slli	r4,r19,29
    9d04:	9826d0fa 	srli	r19,r19,3
    9d08:	948001cc 	andi	r18,r18,7
    9d0c:	90800c04 	addi	r2,r18,48
    9d10:	ad7fffc4 	addi	r21,r21,-1
    9d14:	20e4b03a 	or	r18,r4,r3
    9d18:	a8800005 	stb	r2,0(r21)
    9d1c:	94c6b03a 	or	r3,r18,r19
    9d20:	183ff61e 	bne	r3,zero,9cfc <__alt_data_end+0xff009cfc>
    9d24:	a0c0004c 	andi	r3,r20,1
    9d28:	18005926 	beq	r3,zero,9e90 <___vfiprintf_internal_r+0x87c>
    9d2c:	10803fcc 	andi	r2,r2,255
    9d30:	1080201c 	xori	r2,r2,128
    9d34:	10bfe004 	addi	r2,r2,-128
    9d38:	00c00c04 	movi	r3,48
    9d3c:	10c05426 	beq	r2,r3,9e90 <___vfiprintf_internal_r+0x87c>
    9d40:	da801e17 	ldw	r10,120(sp)
    9d44:	a8bfffc4 	addi	r2,r21,-1
    9d48:	a8ffffc5 	stb	r3,-1(r21)
    9d4c:	50a7c83a 	sub	r19,r10,r2
    9d50:	102b883a 	mov	r21,r2
    9d54:	003f2f06 	br	9a14 <__alt_data_end+0xff009a14>
    9d58:	21003fcc 	andi	r4,r4,255
    9d5c:	2003421e 	bne	r4,zero,aa68 <___vfiprintf_internal_r+0x1454>
    9d60:	00800074 	movhi	r2,1
    9d64:	1080f204 	addi	r2,r2,968
    9d68:	d8802615 	stw	r2,152(sp)
    9d6c:	a080080c 	andi	r2,r20,32
    9d70:	1000aa26 	beq	r2,zero,a01c <___vfiprintf_internal_r+0xa08>
    9d74:	da802217 	ldw	r10,136(sp)
    9d78:	54800017 	ldw	r18,0(r10)
    9d7c:	54c00117 	ldw	r19,4(r10)
    9d80:	52800204 	addi	r10,r10,8
    9d84:	da802215 	stw	r10,136(sp)
    9d88:	a080004c 	andi	r2,r20,1
    9d8c:	1001d226 	beq	r2,zero,a4d8 <___vfiprintf_internal_r+0xec4>
    9d90:	94c4b03a 	or	r2,r18,r19
    9d94:	1002351e 	bne	r2,zero,a66c <___vfiprintf_internal_r+0x1058>
    9d98:	d8001d85 	stb	zero,118(sp)
    9d9c:	48022216 	blt	r9,zero,a628 <___vfiprintf_internal_r+0x1014>
    9da0:	00bfdfc4 	movi	r2,-129
    9da4:	a0a8703a 	and	r20,r20,r2
    9da8:	003f1506 	br	9a00 <__alt_data_end+0xff009a00>
    9dac:	da802217 	ldw	r10,136(sp)
    9db0:	04800044 	movi	r18,1
    9db4:	d8001d85 	stb	zero,118(sp)
    9db8:	50800017 	ldw	r2,0(r10)
    9dbc:	52800104 	addi	r10,r10,4
    9dc0:	da802215 	stw	r10,136(sp)
    9dc4:	d8801005 	stb	r2,64(sp)
    9dc8:	9027883a 	mov	r19,r18
    9dcc:	dd401004 	addi	r21,sp,64
    9dd0:	0013883a 	mov	r9,zero
    9dd4:	003f1706 	br	9a34 <__alt_data_end+0xff009a34>
    9dd8:	21003fcc 	andi	r4,r4,255
    9ddc:	2003201e 	bne	r4,zero,aa60 <___vfiprintf_internal_r+0x144c>
    9de0:	a080080c 	andi	r2,r20,32
    9de4:	10004b26 	beq	r2,zero,9f14 <___vfiprintf_internal_r+0x900>
    9de8:	da802217 	ldw	r10,136(sp)
    9dec:	50800117 	ldw	r2,4(r10)
    9df0:	54800017 	ldw	r18,0(r10)
    9df4:	52800204 	addi	r10,r10,8
    9df8:	da802215 	stw	r10,136(sp)
    9dfc:	1027883a 	mov	r19,r2
    9e00:	10022c16 	blt	r2,zero,a6b4 <___vfiprintf_internal_r+0x10a0>
    9e04:	df001d83 	ldbu	fp,118(sp)
    9e08:	48007216 	blt	r9,zero,9fd4 <___vfiprintf_internal_r+0x9c0>
    9e0c:	00ffdfc4 	movi	r3,-129
    9e10:	94c4b03a 	or	r2,r18,r19
    9e14:	a0e8703a 	and	r20,r20,r3
    9e18:	1000cc26 	beq	r2,zero,a14c <___vfiprintf_internal_r+0xb38>
    9e1c:	98021026 	beq	r19,zero,a660 <___vfiprintf_internal_r+0x104c>
    9e20:	dc402415 	stw	r17,144(sp)
    9e24:	dc002515 	stw	r16,148(sp)
    9e28:	9823883a 	mov	r17,r19
    9e2c:	9021883a 	mov	r16,r18
    9e30:	dd401a04 	addi	r21,sp,104
    9e34:	4825883a 	mov	r18,r9
    9e38:	4027883a 	mov	r19,r8
    9e3c:	8009883a 	mov	r4,r16
    9e40:	880b883a 	mov	r5,r17
    9e44:	01800284 	movi	r6,10
    9e48:	000f883a 	mov	r7,zero
    9e4c:	000b9f40 	call	b9f4 <__umoddi3>
    9e50:	10800c04 	addi	r2,r2,48
    9e54:	ad7fffc4 	addi	r21,r21,-1
    9e58:	8009883a 	mov	r4,r16
    9e5c:	880b883a 	mov	r5,r17
    9e60:	a8800005 	stb	r2,0(r21)
    9e64:	01800284 	movi	r6,10
    9e68:	000f883a 	mov	r7,zero
    9e6c:	000b47c0 	call	b47c <__udivdi3>
    9e70:	1021883a 	mov	r16,r2
    9e74:	10c4b03a 	or	r2,r2,r3
    9e78:	1823883a 	mov	r17,r3
    9e7c:	103fef1e 	bne	r2,zero,9e3c <__alt_data_end+0xff009e3c>
    9e80:	dc402417 	ldw	r17,144(sp)
    9e84:	dc002517 	ldw	r16,148(sp)
    9e88:	9013883a 	mov	r9,r18
    9e8c:	9811883a 	mov	r8,r19
    9e90:	da801e17 	ldw	r10,120(sp)
    9e94:	5567c83a 	sub	r19,r10,r21
    9e98:	003ede06 	br	9a14 <__alt_data_end+0xff009a14>
    9e9c:	38803fcc 	andi	r2,r7,255
    9ea0:	1080201c 	xori	r2,r2,128
    9ea4:	10bfe004 	addi	r2,r2,-128
    9ea8:	1002371e 	bne	r2,zero,a788 <___vfiprintf_internal_r+0x1174>
    9eac:	01000044 	movi	r4,1
    9eb0:	01c00804 	movi	r7,32
    9eb4:	80c00007 	ldb	r3,0(r16)
    9eb8:	003e3506 	br	9790 <__alt_data_end+0xff009790>
    9ebc:	a5000054 	ori	r20,r20,1
    9ec0:	80c00007 	ldb	r3,0(r16)
    9ec4:	003e3206 	br	9790 <__alt_data_end+0xff009790>
    9ec8:	a5002014 	ori	r20,r20,128
    9ecc:	80c00007 	ldb	r3,0(r16)
    9ed0:	003e2f06 	br	9790 <__alt_data_end+0xff009790>
    9ed4:	8015883a 	mov	r10,r16
    9ed8:	0023883a 	mov	r17,zero
    9edc:	18bff404 	addi	r2,r3,-48
    9ee0:	50c00007 	ldb	r3,0(r10)
    9ee4:	8c4002a4 	muli	r17,r17,10
    9ee8:	84000044 	addi	r16,r16,1
    9eec:	8015883a 	mov	r10,r16
    9ef0:	1463883a 	add	r17,r2,r17
    9ef4:	18bff404 	addi	r2,r3,-48
    9ef8:	30bff92e 	bgeu	r6,r2,9ee0 <__alt_data_end+0xff009ee0>
    9efc:	003e2506 	br	9794 <__alt_data_end+0xff009794>
    9f00:	21003fcc 	andi	r4,r4,255
    9f04:	2002d41e 	bne	r4,zero,aa58 <___vfiprintf_internal_r+0x1444>
    9f08:	a5000414 	ori	r20,r20,16
    9f0c:	a080080c 	andi	r2,r20,32
    9f10:	103fb51e 	bne	r2,zero,9de8 <__alt_data_end+0xff009de8>
    9f14:	a080040c 	andi	r2,r20,16
    9f18:	1001f826 	beq	r2,zero,a6fc <___vfiprintf_internal_r+0x10e8>
    9f1c:	da802217 	ldw	r10,136(sp)
    9f20:	54800017 	ldw	r18,0(r10)
    9f24:	52800104 	addi	r10,r10,4
    9f28:	da802215 	stw	r10,136(sp)
    9f2c:	9027d7fa 	srai	r19,r18,31
    9f30:	9805883a 	mov	r2,r19
    9f34:	003fb206 	br	9e00 <__alt_data_end+0xff009e00>
    9f38:	21003fcc 	andi	r4,r4,255
    9f3c:	2002c41e 	bne	r4,zero,aa50 <___vfiprintf_internal_r+0x143c>
    9f40:	a5000414 	ori	r20,r20,16
    9f44:	a080080c 	andi	r2,r20,32
    9f48:	103f5f1e 	bne	r2,zero,9cc8 <__alt_data_end+0xff009cc8>
    9f4c:	a080040c 	andi	r2,r20,16
    9f50:	10020f26 	beq	r2,zero,a790 <___vfiprintf_internal_r+0x117c>
    9f54:	da802217 	ldw	r10,136(sp)
    9f58:	d8001d85 	stb	zero,118(sp)
    9f5c:	0027883a 	mov	r19,zero
    9f60:	50800104 	addi	r2,r10,4
    9f64:	54800017 	ldw	r18,0(r10)
    9f68:	48021116 	blt	r9,zero,a7b0 <___vfiprintf_internal_r+0x119c>
    9f6c:	00ffdfc4 	movi	r3,-129
    9f70:	d8802215 	stw	r2,136(sp)
    9f74:	a0e8703a 	and	r20,r20,r3
    9f78:	903f5e1e 	bne	r18,zero,9cf4 <__alt_data_end+0xff009cf4>
    9f7c:	0039883a 	mov	fp,zero
    9f80:	4802a626 	beq	r9,zero,aa1c <___vfiprintf_internal_r+0x1408>
    9f84:	0025883a 	mov	r18,zero
    9f88:	0027883a 	mov	r19,zero
    9f8c:	003f5a06 	br	9cf8 <__alt_data_end+0xff009cf8>
    9f90:	21003fcc 	andi	r4,r4,255
    9f94:	20029f1e 	bne	r4,zero,aa14 <___vfiprintf_internal_r+0x1400>
    9f98:	a5000414 	ori	r20,r20,16
    9f9c:	a080080c 	andi	r2,r20,32
    9fa0:	10005e1e 	bne	r2,zero,a11c <___vfiprintf_internal_r+0xb08>
    9fa4:	a080040c 	andi	r2,r20,16
    9fa8:	1001a21e 	bne	r2,zero,a634 <___vfiprintf_internal_r+0x1020>
    9fac:	a080100c 	andi	r2,r20,64
    9fb0:	d8001d85 	stb	zero,118(sp)
    9fb4:	da802217 	ldw	r10,136(sp)
    9fb8:	1002231e 	bne	r2,zero,a848 <___vfiprintf_internal_r+0x1234>
    9fbc:	50800104 	addi	r2,r10,4
    9fc0:	54800017 	ldw	r18,0(r10)
    9fc4:	0027883a 	mov	r19,zero
    9fc8:	4801a00e 	bge	r9,zero,a64c <___vfiprintf_internal_r+0x1038>
    9fcc:	d8802215 	stw	r2,136(sp)
    9fd0:	0039883a 	mov	fp,zero
    9fd4:	94c4b03a 	or	r2,r18,r19
    9fd8:	103f901e 	bne	r2,zero,9e1c <__alt_data_end+0xff009e1c>
    9fdc:	00800044 	movi	r2,1
    9fe0:	10803fcc 	andi	r2,r2,255
    9fe4:	00c00044 	movi	r3,1
    9fe8:	10c05926 	beq	r2,r3,a150 <___vfiprintf_internal_r+0xb3c>
    9fec:	00c00084 	movi	r3,2
    9ff0:	10ffe41e 	bne	r2,r3,9f84 <__alt_data_end+0xff009f84>
    9ff4:	0025883a 	mov	r18,zero
    9ff8:	0027883a 	mov	r19,zero
    9ffc:	00013d06 	br	a4f4 <___vfiprintf_internal_r+0xee0>
    a000:	21003fcc 	andi	r4,r4,255
    a004:	2002811e 	bne	r4,zero,aa0c <___vfiprintf_internal_r+0x13f8>
    a008:	00800074 	movhi	r2,1
    a00c:	1080ed04 	addi	r2,r2,948
    a010:	d8802615 	stw	r2,152(sp)
    a014:	a080080c 	andi	r2,r20,32
    a018:	103f561e 	bne	r2,zero,9d74 <__alt_data_end+0xff009d74>
    a01c:	a080040c 	andi	r2,r20,16
    a020:	1001d126 	beq	r2,zero,a768 <___vfiprintf_internal_r+0x1154>
    a024:	da802217 	ldw	r10,136(sp)
    a028:	0027883a 	mov	r19,zero
    a02c:	54800017 	ldw	r18,0(r10)
    a030:	52800104 	addi	r10,r10,4
    a034:	da802215 	stw	r10,136(sp)
    a038:	003f5306 	br	9d88 <__alt_data_end+0xff009d88>
    a03c:	da802217 	ldw	r10,136(sp)
    a040:	d8001d85 	stb	zero,118(sp)
    a044:	55400017 	ldw	r21,0(r10)
    a048:	50c00104 	addi	r3,r10,4
    a04c:	a8024226 	beq	r21,zero,a958 <___vfiprintf_internal_r+0x1344>
    a050:	48021816 	blt	r9,zero,a8b4 <___vfiprintf_internal_r+0x12a0>
    a054:	480d883a 	mov	r6,r9
    a058:	000b883a 	mov	r5,zero
    a05c:	a809883a 	mov	r4,r21
    a060:	d8c02a15 	stw	r3,168(sp)
    a064:	da002b15 	stw	r8,172(sp)
    a068:	da402c15 	stw	r9,176(sp)
    a06c:	00078640 	call	7864 <memchr>
    a070:	d8c02a17 	ldw	r3,168(sp)
    a074:	da002b17 	ldw	r8,172(sp)
    a078:	da402c17 	ldw	r9,176(sp)
    a07c:	10024826 	beq	r2,zero,a9a0 <___vfiprintf_internal_r+0x138c>
    a080:	1567c83a 	sub	r19,r2,r21
    a084:	df001d83 	ldbu	fp,118(sp)
    a088:	d8c02215 	stw	r3,136(sp)
    a08c:	0013883a 	mov	r9,zero
    a090:	003e6006 	br	9a14 <__alt_data_end+0xff009a14>
    a094:	21003fcc 	andi	r4,r4,255
    a098:	203fc026 	beq	r4,zero,9f9c <__alt_data_end+0xff009f9c>
    a09c:	d9c01d85 	stb	r7,118(sp)
    a0a0:	003fbe06 	br	9f9c <__alt_data_end+0xff009f9c>
    a0a4:	da802217 	ldw	r10,136(sp)
    a0a8:	54400017 	ldw	r17,0(r10)
    a0ac:	50800104 	addi	r2,r10,4
    a0b0:	883e3b16 	blt	r17,zero,99a0 <__alt_data_end+0xff0099a0>
    a0b4:	d8802215 	stw	r2,136(sp)
    a0b8:	80c00007 	ldb	r3,0(r16)
    a0bc:	003db406 	br	9790 <__alt_data_end+0xff009790>
    a0c0:	01000044 	movi	r4,1
    a0c4:	01c00ac4 	movi	r7,43
    a0c8:	80c00007 	ldb	r3,0(r16)
    a0cc:	003db006 	br	9790 <__alt_data_end+0xff009790>
    a0d0:	80c00007 	ldb	r3,0(r16)
    a0d4:	82800044 	addi	r10,r16,1
    a0d8:	1b423c26 	beq	r3,r13,a9cc <___vfiprintf_internal_r+0x13b8>
    a0dc:	18bff404 	addi	r2,r3,-48
    a0e0:	0013883a 	mov	r9,zero
    a0e4:	30822b36 	bltu	r6,r2,a994 <___vfiprintf_internal_r+0x1380>
    a0e8:	50c00007 	ldb	r3,0(r10)
    a0ec:	4a4002a4 	muli	r9,r9,10
    a0f0:	54000044 	addi	r16,r10,1
    a0f4:	8015883a 	mov	r10,r16
    a0f8:	4893883a 	add	r9,r9,r2
    a0fc:	18bff404 	addi	r2,r3,-48
    a100:	30bff92e 	bgeu	r6,r2,a0e8 <__alt_data_end+0xff00a0e8>
    a104:	483da30e 	bge	r9,zero,9794 <__alt_data_end+0xff009794>
    a108:	027fffc4 	movi	r9,-1
    a10c:	003da106 	br	9794 <__alt_data_end+0xff009794>
    a110:	a5001014 	ori	r20,r20,64
    a114:	80c00007 	ldb	r3,0(r16)
    a118:	003d9d06 	br	9790 <__alt_data_end+0xff009790>
    a11c:	da802217 	ldw	r10,136(sp)
    a120:	d8001d85 	stb	zero,118(sp)
    a124:	50c00204 	addi	r3,r10,8
    a128:	54800017 	ldw	r18,0(r10)
    a12c:	54c00117 	ldw	r19,4(r10)
    a130:	4801ca16 	blt	r9,zero,a85c <___vfiprintf_internal_r+0x1248>
    a134:	013fdfc4 	movi	r4,-129
    a138:	94c4b03a 	or	r2,r18,r19
    a13c:	d8c02215 	stw	r3,136(sp)
    a140:	a128703a 	and	r20,r20,r4
    a144:	0039883a 	mov	fp,zero
    a148:	103f341e 	bne	r2,zero,9e1c <__alt_data_end+0xff009e1c>
    a14c:	483e2e26 	beq	r9,zero,9a08 <__alt_data_end+0xff009a08>
    a150:	0025883a 	mov	r18,zero
    a154:	94800c04 	addi	r18,r18,48
    a158:	dc8019c5 	stb	r18,103(sp)
    a15c:	dcc02717 	ldw	r19,156(sp)
    a160:	dd4019c4 	addi	r21,sp,103
    a164:	003e2b06 	br	9a14 <__alt_data_end+0xff009a14>
    a168:	21003fcc 	andi	r4,r4,255
    a16c:	2002361e 	bne	r4,zero,aa48 <___vfiprintf_internal_r+0x1434>
    a170:	1801c126 	beq	r3,zero,a878 <___vfiprintf_internal_r+0x1264>
    a174:	04800044 	movi	r18,1
    a178:	d8c01005 	stb	r3,64(sp)
    a17c:	d8001d85 	stb	zero,118(sp)
    a180:	9027883a 	mov	r19,r18
    a184:	dd401004 	addi	r21,sp,64
    a188:	003f1106 	br	9dd0 <__alt_data_end+0xff009dd0>
    a18c:	d9402117 	ldw	r5,132(sp)
    a190:	d9002017 	ldw	r4,128(sp)
    a194:	d9801a04 	addi	r6,sp,104
    a198:	d9c02b15 	stw	r7,172(sp)
    a19c:	dbc02a15 	stw	r15,168(sp)
    a1a0:	00095000 	call	9500 <__sprint_r.part.0>
    a1a4:	d9c02b17 	ldw	r7,172(sp)
    a1a8:	dbc02a17 	ldw	r15,168(sp)
    a1ac:	10006d1e 	bne	r2,zero,a364 <___vfiprintf_internal_r+0xd50>
    a1b0:	d9801b17 	ldw	r6,108(sp)
    a1b4:	d8801c17 	ldw	r2,112(sp)
    a1b8:	d811883a 	mov	r8,sp
    a1bc:	31400044 	addi	r5,r6,1
    a1c0:	003e3306 	br	9a90 <__alt_data_end+0xff009a90>
    a1c4:	d9401b17 	ldw	r5,108(sp)
    a1c8:	d8801c17 	ldw	r2,112(sp)
    a1cc:	29000044 	addi	r4,r5,1
    a1d0:	d8c01d87 	ldb	r3,118(sp)
    a1d4:	183e4d26 	beq	r3,zero,9b0c <__alt_data_end+0xff009b0c>
    a1d8:	00c00044 	movi	r3,1
    a1dc:	d9401d84 	addi	r5,sp,118
    a1e0:	10c5883a 	add	r2,r2,r3
    a1e4:	41400015 	stw	r5,0(r8)
    a1e8:	40c00115 	stw	r3,4(r8)
    a1ec:	d8801c15 	stw	r2,112(sp)
    a1f0:	d9001b15 	stw	r4,108(sp)
    a1f4:	014001c4 	movi	r5,7
    a1f8:	2900a90e 	bge	r5,r4,a4a0 <___vfiprintf_internal_r+0xe8c>
    a1fc:	1000da1e 	bne	r2,zero,a568 <___vfiprintf_internal_r+0xf54>
    a200:	7000ab1e 	bne	r14,zero,a4b0 <___vfiprintf_internal_r+0xe9c>
    a204:	000b883a 	mov	r5,zero
    a208:	1809883a 	mov	r4,r3
    a20c:	d811883a 	mov	r8,sp
    a210:	00c02004 	movi	r3,128
    a214:	e0fe4d26 	beq	fp,r3,9b4c <__alt_data_end+0xff009b4c>
    a218:	4cf9c83a 	sub	fp,r9,r19
    a21c:	073e7b0e 	bge	zero,fp,9c0c <__alt_data_end+0xff009c0c>
    a220:	01c00404 	movi	r7,16
    a224:	3f01900e 	bge	r7,fp,a868 <___vfiprintf_internal_r+0x1254>
    a228:	00c00074 	movhi	r3,1
    a22c:	18c15304 	addi	r3,r3,1356
    a230:	d8c02415 	stw	r3,144(sp)
    a234:	034001c4 	movi	r13,7
    a238:	00000506 	br	a250 <___vfiprintf_internal_r+0xc3c>
    a23c:	29000084 	addi	r4,r5,2
    a240:	42000204 	addi	r8,r8,8
    a244:	180b883a 	mov	r5,r3
    a248:	e73ffc04 	addi	fp,fp,-16
    a24c:	3f000d0e 	bge	r7,fp,a284 <___vfiprintf_internal_r+0xc70>
    a250:	10800404 	addi	r2,r2,16
    a254:	28c00044 	addi	r3,r5,1
    a258:	45c00015 	stw	r23,0(r8)
    a25c:	41c00115 	stw	r7,4(r8)
    a260:	d8801c15 	stw	r2,112(sp)
    a264:	d8c01b15 	stw	r3,108(sp)
    a268:	68fff40e 	bge	r13,r3,a23c <__alt_data_end+0xff00a23c>
    a26c:	1000101e 	bne	r2,zero,a2b0 <___vfiprintf_internal_r+0xc9c>
    a270:	e73ffc04 	addi	fp,fp,-16
    a274:	01000044 	movi	r4,1
    a278:	000b883a 	mov	r5,zero
    a27c:	d811883a 	mov	r8,sp
    a280:	3f3ff316 	blt	r7,fp,a250 <__alt_data_end+0xff00a250>
    a284:	da802417 	ldw	r10,144(sp)
    a288:	1705883a 	add	r2,r2,fp
    a28c:	47000115 	stw	fp,4(r8)
    a290:	42800015 	stw	r10,0(r8)
    a294:	d8801c15 	stw	r2,112(sp)
    a298:	d9001b15 	stw	r4,108(sp)
    a29c:	00c001c4 	movi	r3,7
    a2a0:	19003616 	blt	r3,r4,a37c <___vfiprintf_internal_r+0xd68>
    a2a4:	42000204 	addi	r8,r8,8
    a2a8:	21000044 	addi	r4,r4,1
    a2ac:	003e5706 	br	9c0c <__alt_data_end+0xff009c0c>
    a2b0:	d9402117 	ldw	r5,132(sp)
    a2b4:	d9002017 	ldw	r4,128(sp)
    a2b8:	d9801a04 	addi	r6,sp,104
    a2bc:	d9c02b15 	stw	r7,172(sp)
    a2c0:	db402a15 	stw	r13,168(sp)
    a2c4:	00095000 	call	9500 <__sprint_r.part.0>
    a2c8:	d9c02b17 	ldw	r7,172(sp)
    a2cc:	db402a17 	ldw	r13,168(sp)
    a2d0:	1000241e 	bne	r2,zero,a364 <___vfiprintf_internal_r+0xd50>
    a2d4:	d9401b17 	ldw	r5,108(sp)
    a2d8:	d8801c17 	ldw	r2,112(sp)
    a2dc:	d811883a 	mov	r8,sp
    a2e0:	29000044 	addi	r4,r5,1
    a2e4:	003fd806 	br	a248 <__alt_data_end+0xff00a248>
    a2e8:	d9401b17 	ldw	r5,108(sp)
    a2ec:	00c00074 	movhi	r3,1
    a2f0:	18c15704 	addi	r3,r3,1372
    a2f4:	d8c02415 	stw	r3,144(sp)
    a2f8:	29400044 	addi	r5,r5,1
    a2fc:	d8c02417 	ldw	r3,144(sp)
    a300:	14c5883a 	add	r2,r2,r19
    a304:	44c00115 	stw	r19,4(r8)
    a308:	40c00015 	stw	r3,0(r8)
    a30c:	d8801c15 	stw	r2,112(sp)
    a310:	d9401b15 	stw	r5,108(sp)
    a314:	00c001c4 	movi	r3,7
    a318:	1940070e 	bge	r3,r5,a338 <___vfiprintf_internal_r+0xd24>
    a31c:	103e4826 	beq	r2,zero,9c40 <__alt_data_end+0xff009c40>
    a320:	d9402117 	ldw	r5,132(sp)
    a324:	d9002017 	ldw	r4,128(sp)
    a328:	d9801a04 	addi	r6,sp,104
    a32c:	00095000 	call	9500 <__sprint_r.part.0>
    a330:	10000c1e 	bne	r2,zero,a364 <___vfiprintf_internal_r+0xd50>
    a334:	d8801c17 	ldw	r2,112(sp)
    a338:	8c80010e 	bge	r17,r18,a340 <___vfiprintf_internal_r+0xd2c>
    a33c:	9023883a 	mov	r17,r18
    a340:	da802317 	ldw	r10,140(sp)
    a344:	5455883a 	add	r10,r10,r17
    a348:	da802315 	stw	r10,140(sp)
    a34c:	103e4126 	beq	r2,zero,9c54 <__alt_data_end+0xff009c54>
    a350:	d9402117 	ldw	r5,132(sp)
    a354:	d9002017 	ldw	r4,128(sp)
    a358:	d9801a04 	addi	r6,sp,104
    a35c:	00095000 	call	9500 <__sprint_r.part.0>
    a360:	103e3c26 	beq	r2,zero,9c54 <__alt_data_end+0xff009c54>
    a364:	dd002117 	ldw	r20,132(sp)
    a368:	a080030b 	ldhu	r2,12(r20)
    a36c:	1080100c 	andi	r2,r2,64
    a370:	1001231e 	bne	r2,zero,a800 <___vfiprintf_internal_r+0x11ec>
    a374:	d8802317 	ldw	r2,140(sp)
    a378:	003d7b06 	br	9968 <__alt_data_end+0xff009968>
    a37c:	1000991e 	bne	r2,zero,a5e4 <___vfiprintf_internal_r+0xfd0>
    a380:	00c00044 	movi	r3,1
    a384:	9805883a 	mov	r2,r19
    a388:	dd400015 	stw	r21,0(sp)
    a38c:	dcc00115 	stw	r19,4(sp)
    a390:	dcc01c15 	stw	r19,112(sp)
    a394:	d8c01b15 	stw	r3,108(sp)
    a398:	d811883a 	mov	r8,sp
    a39c:	42000204 	addi	r8,r8,8
    a3a0:	a2c0010c 	andi	r11,r20,4
    a3a4:	583fe426 	beq	r11,zero,a338 <__alt_data_end+0xff00a338>
    a3a8:	8ca7c83a 	sub	r19,r17,r18
    a3ac:	04ffe20e 	bge	zero,r19,a338 <__alt_data_end+0xff00a338>
    a3b0:	01c00404 	movi	r7,16
    a3b4:	3cffcc0e 	bge	r7,r19,a2e8 <__alt_data_end+0xff00a2e8>
    a3b8:	02800074 	movhi	r10,1
    a3bc:	52815704 	addi	r10,r10,1372
    a3c0:	d9001b17 	ldw	r4,108(sp)
    a3c4:	da802415 	stw	r10,144(sp)
    a3c8:	382b883a 	mov	r21,r7
    a3cc:	050001c4 	movi	r20,7
    a3d0:	df002017 	ldw	fp,128(sp)
    a3d4:	00000506 	br	a3ec <___vfiprintf_internal_r+0xdd8>
    a3d8:	21400084 	addi	r5,r4,2
    a3dc:	42000204 	addi	r8,r8,8
    a3e0:	1809883a 	mov	r4,r3
    a3e4:	9cfffc04 	addi	r19,r19,-16
    a3e8:	acffc40e 	bge	r21,r19,a2fc <__alt_data_end+0xff00a2fc>
    a3ec:	10800404 	addi	r2,r2,16
    a3f0:	20c00044 	addi	r3,r4,1
    a3f4:	45800015 	stw	r22,0(r8)
    a3f8:	45400115 	stw	r21,4(r8)
    a3fc:	d8801c15 	stw	r2,112(sp)
    a400:	d8c01b15 	stw	r3,108(sp)
    a404:	a0fff40e 	bge	r20,r3,a3d8 <__alt_data_end+0xff00a3d8>
    a408:	1000041e 	bne	r2,zero,a41c <___vfiprintf_internal_r+0xe08>
    a40c:	01400044 	movi	r5,1
    a410:	0009883a 	mov	r4,zero
    a414:	d811883a 	mov	r8,sp
    a418:	003ff206 	br	a3e4 <__alt_data_end+0xff00a3e4>
    a41c:	d9402117 	ldw	r5,132(sp)
    a420:	d9801a04 	addi	r6,sp,104
    a424:	e009883a 	mov	r4,fp
    a428:	00095000 	call	9500 <__sprint_r.part.0>
    a42c:	103fcd1e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a430:	d9001b17 	ldw	r4,108(sp)
    a434:	d8801c17 	ldw	r2,112(sp)
    a438:	d811883a 	mov	r8,sp
    a43c:	21400044 	addi	r5,r4,1
    a440:	003fe806 	br	a3e4 <__alt_data_end+0xff00a3e4>
    a444:	d9402117 	ldw	r5,132(sp)
    a448:	d9002017 	ldw	r4,128(sp)
    a44c:	d9801a04 	addi	r6,sp,104
    a450:	d9c02b15 	stw	r7,172(sp)
    a454:	db402a15 	stw	r13,168(sp)
    a458:	00095000 	call	9500 <__sprint_r.part.0>
    a45c:	d9c02b17 	ldw	r7,172(sp)
    a460:	db402a17 	ldw	r13,168(sp)
    a464:	103fbf1e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a468:	d9401b17 	ldw	r5,108(sp)
    a46c:	d8801c17 	ldw	r2,112(sp)
    a470:	d811883a 	mov	r8,sp
    a474:	29800044 	addi	r6,r5,1
    a478:	003dc406 	br	9b8c <__alt_data_end+0xff009b8c>
    a47c:	1000d21e 	bne	r2,zero,a7c8 <___vfiprintf_internal_r+0x11b4>
    a480:	d8c01d87 	ldb	r3,118(sp)
    a484:	18009526 	beq	r3,zero,a6dc <___vfiprintf_internal_r+0x10c8>
    a488:	00800044 	movi	r2,1
    a48c:	d8c01d84 	addi	r3,sp,118
    a490:	1009883a 	mov	r4,r2
    a494:	d8c00015 	stw	r3,0(sp)
    a498:	d8800115 	stw	r2,4(sp)
    a49c:	d811883a 	mov	r8,sp
    a4a0:	200b883a 	mov	r5,r4
    a4a4:	42000204 	addi	r8,r8,8
    a4a8:	21000044 	addi	r4,r4,1
    a4ac:	003d9706 	br	9b0c <__alt_data_end+0xff009b0c>
    a4b0:	d9001d04 	addi	r4,sp,116
    a4b4:	00800084 	movi	r2,2
    a4b8:	d9000015 	stw	r4,0(sp)
    a4bc:	d8800115 	stw	r2,4(sp)
    a4c0:	1809883a 	mov	r4,r3
    a4c4:	d811883a 	mov	r8,sp
    a4c8:	200b883a 	mov	r5,r4
    a4cc:	42000204 	addi	r8,r8,8
    a4d0:	21000044 	addi	r4,r4,1
    a4d4:	003f4e06 	br	a210 <__alt_data_end+0xff00a210>
    a4d8:	d8001d85 	stb	zero,118(sp)
    a4dc:	48005016 	blt	r9,zero,a620 <___vfiprintf_internal_r+0x100c>
    a4e0:	00ffdfc4 	movi	r3,-129
    a4e4:	94c4b03a 	or	r2,r18,r19
    a4e8:	a0e8703a 	and	r20,r20,r3
    a4ec:	103d4426 	beq	r2,zero,9a00 <__alt_data_end+0xff009a00>
    a4f0:	0039883a 	mov	fp,zero
    a4f4:	d9002617 	ldw	r4,152(sp)
    a4f8:	dd401a04 	addi	r21,sp,104
    a4fc:	908003cc 	andi	r2,r18,15
    a500:	9806973a 	slli	r3,r19,28
    a504:	2085883a 	add	r2,r4,r2
    a508:	9024d13a 	srli	r18,r18,4
    a50c:	10800003 	ldbu	r2,0(r2)
    a510:	9826d13a 	srli	r19,r19,4
    a514:	ad7fffc4 	addi	r21,r21,-1
    a518:	1ca4b03a 	or	r18,r3,r18
    a51c:	a8800005 	stb	r2,0(r21)
    a520:	94c4b03a 	or	r2,r18,r19
    a524:	103ff51e 	bne	r2,zero,a4fc <__alt_data_end+0xff00a4fc>
    a528:	003e5906 	br	9e90 <__alt_data_end+0xff009e90>
    a52c:	d9402117 	ldw	r5,132(sp)
    a530:	d9002017 	ldw	r4,128(sp)
    a534:	d9801a04 	addi	r6,sp,104
    a538:	00095000 	call	9500 <__sprint_r.part.0>
    a53c:	103f891e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a540:	d8801c17 	ldw	r2,112(sp)
    a544:	d811883a 	mov	r8,sp
    a548:	003f9506 	br	a3a0 <__alt_data_end+0xff00a3a0>
    a54c:	d9402117 	ldw	r5,132(sp)
    a550:	d9002017 	ldw	r4,128(sp)
    a554:	d9801a04 	addi	r6,sp,104
    a558:	00095000 	call	9500 <__sprint_r.part.0>
    a55c:	103f811e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a560:	d811883a 	mov	r8,sp
    a564:	003ced06 	br	991c <__alt_data_end+0xff00991c>
    a568:	d9402117 	ldw	r5,132(sp)
    a56c:	d9002017 	ldw	r4,128(sp)
    a570:	d9801a04 	addi	r6,sp,104
    a574:	da402c15 	stw	r9,176(sp)
    a578:	db802a15 	stw	r14,168(sp)
    a57c:	00095000 	call	9500 <__sprint_r.part.0>
    a580:	da402c17 	ldw	r9,176(sp)
    a584:	db802a17 	ldw	r14,168(sp)
    a588:	103f761e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a58c:	d9401b17 	ldw	r5,108(sp)
    a590:	d8801c17 	ldw	r2,112(sp)
    a594:	d811883a 	mov	r8,sp
    a598:	29000044 	addi	r4,r5,1
    a59c:	003d5b06 	br	9b0c <__alt_data_end+0xff009b0c>
    a5a0:	d9402117 	ldw	r5,132(sp)
    a5a4:	d9002017 	ldw	r4,128(sp)
    a5a8:	d9801a04 	addi	r6,sp,104
    a5ac:	da402c15 	stw	r9,176(sp)
    a5b0:	00095000 	call	9500 <__sprint_r.part.0>
    a5b4:	da402c17 	ldw	r9,176(sp)
    a5b8:	103f6a1e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a5bc:	d9401b17 	ldw	r5,108(sp)
    a5c0:	d8801c17 	ldw	r2,112(sp)
    a5c4:	d811883a 	mov	r8,sp
    a5c8:	29000044 	addi	r4,r5,1
    a5cc:	003f1006 	br	a210 <__alt_data_end+0xff00a210>
    a5d0:	1000c31e 	bne	r2,zero,a8e0 <___vfiprintf_internal_r+0x12cc>
    a5d4:	01000044 	movi	r4,1
    a5d8:	000b883a 	mov	r5,zero
    a5dc:	d811883a 	mov	r8,sp
    a5e0:	003f0d06 	br	a218 <__alt_data_end+0xff00a218>
    a5e4:	d9402117 	ldw	r5,132(sp)
    a5e8:	d9002017 	ldw	r4,128(sp)
    a5ec:	d9801a04 	addi	r6,sp,104
    a5f0:	00095000 	call	9500 <__sprint_r.part.0>
    a5f4:	103f5b1e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a5f8:	d9001b17 	ldw	r4,108(sp)
    a5fc:	d8801c17 	ldw	r2,112(sp)
    a600:	d811883a 	mov	r8,sp
    a604:	21000044 	addi	r4,r4,1
    a608:	003d8006 	br	9c0c <__alt_data_end+0xff009c0c>
    a60c:	01000074 	movhi	r4,1
    a610:	2100f204 	addi	r4,r4,968
    a614:	d9002615 	stw	r4,152(sp)
    a618:	d8c02215 	stw	r3,136(sp)
    a61c:	1029883a 	mov	r20,r2
    a620:	94c4b03a 	or	r2,r18,r19
    a624:	103fb21e 	bne	r2,zero,a4f0 <__alt_data_end+0xff00a4f0>
    a628:	0039883a 	mov	fp,zero
    a62c:	00800084 	movi	r2,2
    a630:	003e6b06 	br	9fe0 <__alt_data_end+0xff009fe0>
    a634:	da802217 	ldw	r10,136(sp)
    a638:	d8001d85 	stb	zero,118(sp)
    a63c:	0027883a 	mov	r19,zero
    a640:	50800104 	addi	r2,r10,4
    a644:	54800017 	ldw	r18,0(r10)
    a648:	483e6016 	blt	r9,zero,9fcc <__alt_data_end+0xff009fcc>
    a64c:	00ffdfc4 	movi	r3,-129
    a650:	d8802215 	stw	r2,136(sp)
    a654:	a0e8703a 	and	r20,r20,r3
    a658:	0039883a 	mov	fp,zero
    a65c:	903ebb26 	beq	r18,zero,a14c <__alt_data_end+0xff00a14c>
    a660:	00800244 	movi	r2,9
    a664:	14bdee36 	bltu	r2,r18,9e20 <__alt_data_end+0xff009e20>
    a668:	003eba06 	br	a154 <__alt_data_end+0xff00a154>
    a66c:	00800c04 	movi	r2,48
    a670:	d8c01d45 	stb	r3,117(sp)
    a674:	d8801d05 	stb	r2,116(sp)
    a678:	d8001d85 	stb	zero,118(sp)
    a67c:	a0c00094 	ori	r3,r20,2
    a680:	4800a916 	blt	r9,zero,a928 <___vfiprintf_internal_r+0x1314>
    a684:	00bfdfc4 	movi	r2,-129
    a688:	a096703a 	and	r11,r20,r2
    a68c:	5d000094 	ori	r20,r11,2
    a690:	0039883a 	mov	fp,zero
    a694:	003f9706 	br	a4f4 <__alt_data_end+0xff00a4f4>
    a698:	8025883a 	mov	r18,r16
    a69c:	003c2e06 	br	9758 <__alt_data_end+0xff009758>
    a6a0:	00800074 	movhi	r2,1
    a6a4:	1080f204 	addi	r2,r2,968
    a6a8:	0039883a 	mov	fp,zero
    a6ac:	d8802615 	stw	r2,152(sp)
    a6b0:	003f9006 	br	a4f4 <__alt_data_end+0xff00a4f4>
    a6b4:	04a5c83a 	sub	r18,zero,r18
    a6b8:	07000b44 	movi	fp,45
    a6bc:	9004c03a 	cmpne	r2,r18,zero
    a6c0:	04e7c83a 	sub	r19,zero,r19
    a6c4:	df001d85 	stb	fp,118(sp)
    a6c8:	98a7c83a 	sub	r19,r19,r2
    a6cc:	48009f16 	blt	r9,zero,a94c <___vfiprintf_internal_r+0x1338>
    a6d0:	00bfdfc4 	movi	r2,-129
    a6d4:	a0a8703a 	and	r20,r20,r2
    a6d8:	003dd006 	br	9e1c <__alt_data_end+0xff009e1c>
    a6dc:	70004c26 	beq	r14,zero,a810 <___vfiprintf_internal_r+0x11fc>
    a6e0:	00800084 	movi	r2,2
    a6e4:	d8c01d04 	addi	r3,sp,116
    a6e8:	d8c00015 	stw	r3,0(sp)
    a6ec:	d8800115 	stw	r2,4(sp)
    a6f0:	01000044 	movi	r4,1
    a6f4:	d811883a 	mov	r8,sp
    a6f8:	003f7306 	br	a4c8 <__alt_data_end+0xff00a4c8>
    a6fc:	a080100c 	andi	r2,r20,64
    a700:	da802217 	ldw	r10,136(sp)
    a704:	103e0626 	beq	r2,zero,9f20 <__alt_data_end+0xff009f20>
    a708:	5480000f 	ldh	r18,0(r10)
    a70c:	52800104 	addi	r10,r10,4
    a710:	da802215 	stw	r10,136(sp)
    a714:	9027d7fa 	srai	r19,r18,31
    a718:	9805883a 	mov	r2,r19
    a71c:	003db806 	br	9e00 <__alt_data_end+0xff009e00>
    a720:	a080040c 	andi	r2,r20,16
    a724:	1000091e 	bne	r2,zero,a74c <___vfiprintf_internal_r+0x1138>
    a728:	a2c0100c 	andi	r11,r20,64
    a72c:	58000726 	beq	r11,zero,a74c <___vfiprintf_internal_r+0x1138>
    a730:	da802217 	ldw	r10,136(sp)
    a734:	50800017 	ldw	r2,0(r10)
    a738:	52800104 	addi	r10,r10,4
    a73c:	da802215 	stw	r10,136(sp)
    a740:	da802317 	ldw	r10,140(sp)
    a744:	1280000d 	sth	r10,0(r2)
    a748:	003be706 	br	96e8 <__alt_data_end+0xff0096e8>
    a74c:	da802217 	ldw	r10,136(sp)
    a750:	50800017 	ldw	r2,0(r10)
    a754:	52800104 	addi	r10,r10,4
    a758:	da802215 	stw	r10,136(sp)
    a75c:	da802317 	ldw	r10,140(sp)
    a760:	12800015 	stw	r10,0(r2)
    a764:	003be006 	br	96e8 <__alt_data_end+0xff0096e8>
    a768:	a080100c 	andi	r2,r20,64
    a76c:	da802217 	ldw	r10,136(sp)
    a770:	10003026 	beq	r2,zero,a834 <___vfiprintf_internal_r+0x1220>
    a774:	5480000b 	ldhu	r18,0(r10)
    a778:	52800104 	addi	r10,r10,4
    a77c:	0027883a 	mov	r19,zero
    a780:	da802215 	stw	r10,136(sp)
    a784:	003d8006 	br	9d88 <__alt_data_end+0xff009d88>
    a788:	80c00007 	ldb	r3,0(r16)
    a78c:	003c0006 	br	9790 <__alt_data_end+0xff009790>
    a790:	a080100c 	andi	r2,r20,64
    a794:	d8001d85 	stb	zero,118(sp)
    a798:	da802217 	ldw	r10,136(sp)
    a79c:	1000201e 	bne	r2,zero,a820 <___vfiprintf_internal_r+0x120c>
    a7a0:	50800104 	addi	r2,r10,4
    a7a4:	54800017 	ldw	r18,0(r10)
    a7a8:	0027883a 	mov	r19,zero
    a7ac:	483def0e 	bge	r9,zero,9f6c <__alt_data_end+0xff009f6c>
    a7b0:	94c6b03a 	or	r3,r18,r19
    a7b4:	d8802215 	stw	r2,136(sp)
    a7b8:	183d4e1e 	bne	r3,zero,9cf4 <__alt_data_end+0xff009cf4>
    a7bc:	0039883a 	mov	fp,zero
    a7c0:	0005883a 	mov	r2,zero
    a7c4:	003e0606 	br	9fe0 <__alt_data_end+0xff009fe0>
    a7c8:	d9402117 	ldw	r5,132(sp)
    a7cc:	d9002017 	ldw	r4,128(sp)
    a7d0:	d9801a04 	addi	r6,sp,104
    a7d4:	da402c15 	stw	r9,176(sp)
    a7d8:	db802a15 	stw	r14,168(sp)
    a7dc:	00095000 	call	9500 <__sprint_r.part.0>
    a7e0:	da402c17 	ldw	r9,176(sp)
    a7e4:	db802a17 	ldw	r14,168(sp)
    a7e8:	103ede1e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a7ec:	d9401b17 	ldw	r5,108(sp)
    a7f0:	d8801c17 	ldw	r2,112(sp)
    a7f4:	d811883a 	mov	r8,sp
    a7f8:	29000044 	addi	r4,r5,1
    a7fc:	003e7406 	br	a1d0 <__alt_data_end+0xff00a1d0>
    a800:	00bfffc4 	movi	r2,-1
    a804:	003c5806 	br	9968 <__alt_data_end+0xff009968>
    a808:	d811883a 	mov	r8,sp
    a80c:	003ee806 	br	a3b0 <__alt_data_end+0xff00a3b0>
    a810:	000b883a 	mov	r5,zero
    a814:	01000044 	movi	r4,1
    a818:	d811883a 	mov	r8,sp
    a81c:	003e7c06 	br	a210 <__alt_data_end+0xff00a210>
    a820:	50800104 	addi	r2,r10,4
    a824:	5480000b 	ldhu	r18,0(r10)
    a828:	0027883a 	mov	r19,zero
    a82c:	483dcf0e 	bge	r9,zero,9f6c <__alt_data_end+0xff009f6c>
    a830:	003fdf06 	br	a7b0 <__alt_data_end+0xff00a7b0>
    a834:	54800017 	ldw	r18,0(r10)
    a838:	52800104 	addi	r10,r10,4
    a83c:	0027883a 	mov	r19,zero
    a840:	da802215 	stw	r10,136(sp)
    a844:	003d5006 	br	9d88 <__alt_data_end+0xff009d88>
    a848:	50800104 	addi	r2,r10,4
    a84c:	5480000b 	ldhu	r18,0(r10)
    a850:	0027883a 	mov	r19,zero
    a854:	483f7d0e 	bge	r9,zero,a64c <__alt_data_end+0xff00a64c>
    a858:	003ddc06 	br	9fcc <__alt_data_end+0xff009fcc>
    a85c:	d8c02215 	stw	r3,136(sp)
    a860:	0039883a 	mov	fp,zero
    a864:	003ddb06 	br	9fd4 <__alt_data_end+0xff009fd4>
    a868:	02800074 	movhi	r10,1
    a86c:	52815304 	addi	r10,r10,1356
    a870:	da802415 	stw	r10,144(sp)
    a874:	003e8306 	br	a284 <__alt_data_end+0xff00a284>
    a878:	d8801c17 	ldw	r2,112(sp)
    a87c:	dd002117 	ldw	r20,132(sp)
    a880:	103eb926 	beq	r2,zero,a368 <__alt_data_end+0xff00a368>
    a884:	d9002017 	ldw	r4,128(sp)
    a888:	d9801a04 	addi	r6,sp,104
    a88c:	a00b883a 	mov	r5,r20
    a890:	00095000 	call	9500 <__sprint_r.part.0>
    a894:	003eb406 	br	a368 <__alt_data_end+0xff00a368>
    a898:	80c00043 	ldbu	r3,1(r16)
    a89c:	a5000814 	ori	r20,r20,32
    a8a0:	84000044 	addi	r16,r16,1
    a8a4:	18c03fcc 	andi	r3,r3,255
    a8a8:	18c0201c 	xori	r3,r3,128
    a8ac:	18ffe004 	addi	r3,r3,-128
    a8b0:	003bb706 	br	9790 <__alt_data_end+0xff009790>
    a8b4:	a809883a 	mov	r4,r21
    a8b8:	d8c02a15 	stw	r3,168(sp)
    a8bc:	da002b15 	stw	r8,172(sp)
    a8c0:	00027c80 	call	27c8 <strlen>
    a8c4:	d8c02a17 	ldw	r3,168(sp)
    a8c8:	1027883a 	mov	r19,r2
    a8cc:	df001d83 	ldbu	fp,118(sp)
    a8d0:	d8c02215 	stw	r3,136(sp)
    a8d4:	0013883a 	mov	r9,zero
    a8d8:	da002b17 	ldw	r8,172(sp)
    a8dc:	003c4d06 	br	9a14 <__alt_data_end+0xff009a14>
    a8e0:	d9402117 	ldw	r5,132(sp)
    a8e4:	d9002017 	ldw	r4,128(sp)
    a8e8:	d9801a04 	addi	r6,sp,104
    a8ec:	da402c15 	stw	r9,176(sp)
    a8f0:	00095000 	call	9500 <__sprint_r.part.0>
    a8f4:	da402c17 	ldw	r9,176(sp)
    a8f8:	103e9a1e 	bne	r2,zero,a364 <__alt_data_end+0xff00a364>
    a8fc:	d9401b17 	ldw	r5,108(sp)
    a900:	d8801c17 	ldw	r2,112(sp)
    a904:	d811883a 	mov	r8,sp
    a908:	29000044 	addi	r4,r5,1
    a90c:	003e4206 	br	a218 <__alt_data_end+0xff00a218>
    a910:	d9401b17 	ldw	r5,108(sp)
    a914:	01000074 	movhi	r4,1
    a918:	21015704 	addi	r4,r4,1372
    a91c:	d9002415 	stw	r4,144(sp)
    a920:	29400044 	addi	r5,r5,1
    a924:	003c6d06 	br	9adc <__alt_data_end+0xff009adc>
    a928:	0039883a 	mov	fp,zero
    a92c:	00800084 	movi	r2,2
    a930:	10803fcc 	andi	r2,r2,255
    a934:	01000044 	movi	r4,1
    a938:	11001e26 	beq	r2,r4,a9b4 <___vfiprintf_internal_r+0x13a0>
    a93c:	01000084 	movi	r4,2
    a940:	11001e1e 	bne	r2,r4,a9bc <___vfiprintf_internal_r+0x13a8>
    a944:	1829883a 	mov	r20,r3
    a948:	003eea06 	br	a4f4 <__alt_data_end+0xff00a4f4>
    a94c:	a007883a 	mov	r3,r20
    a950:	00800044 	movi	r2,1
    a954:	003ff606 	br	a930 <__alt_data_end+0xff00a930>
    a958:	00800184 	movi	r2,6
    a95c:	1240012e 	bgeu	r2,r9,a964 <___vfiprintf_internal_r+0x1350>
    a960:	1013883a 	mov	r9,r2
    a964:	4827883a 	mov	r19,r9
    a968:	4825883a 	mov	r18,r9
    a96c:	48001516 	blt	r9,zero,a9c4 <___vfiprintf_internal_r+0x13b0>
    a970:	05400074 	movhi	r21,1
    a974:	d8c02215 	stw	r3,136(sp)
    a978:	ad40f704 	addi	r21,r21,988
    a97c:	003d1406 	br	9dd0 <__alt_data_end+0xff009dd0>
    a980:	02800074 	movhi	r10,1
    a984:	52815304 	addi	r10,r10,1356
    a988:	da802415 	stw	r10,144(sp)
    a98c:	200d883a 	mov	r6,r4
    a990:	003c9106 	br	9bd8 <__alt_data_end+0xff009bd8>
    a994:	5021883a 	mov	r16,r10
    a998:	0013883a 	mov	r9,zero
    a99c:	003b7d06 	br	9794 <__alt_data_end+0xff009794>
    a9a0:	4827883a 	mov	r19,r9
    a9a4:	df001d83 	ldbu	fp,118(sp)
    a9a8:	d8c02215 	stw	r3,136(sp)
    a9ac:	0013883a 	mov	r9,zero
    a9b0:	003c1806 	br	9a14 <__alt_data_end+0xff009a14>
    a9b4:	1829883a 	mov	r20,r3
    a9b8:	003d1806 	br	9e1c <__alt_data_end+0xff009e1c>
    a9bc:	1829883a 	mov	r20,r3
    a9c0:	003ccd06 	br	9cf8 <__alt_data_end+0xff009cf8>
    a9c4:	0025883a 	mov	r18,zero
    a9c8:	003fe906 	br	a970 <__alt_data_end+0xff00a970>
    a9cc:	d8802217 	ldw	r2,136(sp)
    a9d0:	80c00043 	ldbu	r3,1(r16)
    a9d4:	5021883a 	mov	r16,r10
    a9d8:	12400017 	ldw	r9,0(r2)
    a9dc:	10800104 	addi	r2,r2,4
    a9e0:	d8802215 	stw	r2,136(sp)
    a9e4:	483faf0e 	bge	r9,zero,a8a4 <__alt_data_end+0xff00a8a4>
    a9e8:	18c03fcc 	andi	r3,r3,255
    a9ec:	18c0201c 	xori	r3,r3,128
    a9f0:	027fffc4 	movi	r9,-1
    a9f4:	18ffe004 	addi	r3,r3,-128
    a9f8:	003b6506 	br	9790 <__alt_data_end+0xff009790>
    a9fc:	d9c01d85 	stb	r7,118(sp)
    aa00:	003ca006 	br	9c84 <__alt_data_end+0xff009c84>
    aa04:	d9c01d85 	stb	r7,118(sp)
    aa08:	003cad06 	br	9cc0 <__alt_data_end+0xff009cc0>
    aa0c:	d9c01d85 	stb	r7,118(sp)
    aa10:	003d7d06 	br	a008 <__alt_data_end+0xff00a008>
    aa14:	d9c01d85 	stb	r7,118(sp)
    aa18:	003d5f06 	br	9f98 <__alt_data_end+0xff009f98>
    aa1c:	a080004c 	andi	r2,r20,1
    aa20:	0039883a 	mov	fp,zero
    aa24:	10000526 	beq	r2,zero,aa3c <___vfiprintf_internal_r+0x1428>
    aa28:	00800c04 	movi	r2,48
    aa2c:	d88019c5 	stb	r2,103(sp)
    aa30:	dcc02717 	ldw	r19,156(sp)
    aa34:	dd4019c4 	addi	r21,sp,103
    aa38:	003bf606 	br	9a14 <__alt_data_end+0xff009a14>
    aa3c:	0027883a 	mov	r19,zero
    aa40:	dd401a04 	addi	r21,sp,104
    aa44:	003bf306 	br	9a14 <__alt_data_end+0xff009a14>
    aa48:	d9c01d85 	stb	r7,118(sp)
    aa4c:	003dc806 	br	a170 <__alt_data_end+0xff00a170>
    aa50:	d9c01d85 	stb	r7,118(sp)
    aa54:	003d3a06 	br	9f40 <__alt_data_end+0xff009f40>
    aa58:	d9c01d85 	stb	r7,118(sp)
    aa5c:	003d2a06 	br	9f08 <__alt_data_end+0xff009f08>
    aa60:	d9c01d85 	stb	r7,118(sp)
    aa64:	003cde06 	br	9de0 <__alt_data_end+0xff009de0>
    aa68:	d9c01d85 	stb	r7,118(sp)
    aa6c:	003cbc06 	br	9d60 <__alt_data_end+0xff009d60>

0000aa70 <__vfiprintf_internal>:
    aa70:	00800074 	movhi	r2,1
    aa74:	10889004 	addi	r2,r2,8768
    aa78:	300f883a 	mov	r7,r6
    aa7c:	280d883a 	mov	r6,r5
    aa80:	200b883a 	mov	r5,r4
    aa84:	11000017 	ldw	r4,0(r2)
    aa88:	00096141 	jmpi	9614 <___vfiprintf_internal_r>

0000aa8c <__sbprintf>:
    aa8c:	2880030b 	ldhu	r2,12(r5)
    aa90:	2ac01917 	ldw	r11,100(r5)
    aa94:	2a80038b 	ldhu	r10,14(r5)
    aa98:	2a400717 	ldw	r9,28(r5)
    aa9c:	2a000917 	ldw	r8,36(r5)
    aaa0:	defee204 	addi	sp,sp,-1144
    aaa4:	00c10004 	movi	r3,1024
    aaa8:	dc011a15 	stw	r16,1128(sp)
    aaac:	10bfff4c 	andi	r2,r2,65533
    aab0:	2821883a 	mov	r16,r5
    aab4:	d8cb883a 	add	r5,sp,r3
    aab8:	dc811c15 	stw	r18,1136(sp)
    aabc:	dc411b15 	stw	r17,1132(sp)
    aac0:	dfc11d15 	stw	ra,1140(sp)
    aac4:	2025883a 	mov	r18,r4
    aac8:	d881030d 	sth	r2,1036(sp)
    aacc:	dac11915 	stw	r11,1124(sp)
    aad0:	da81038d 	sth	r10,1038(sp)
    aad4:	da410715 	stw	r9,1052(sp)
    aad8:	da010915 	stw	r8,1060(sp)
    aadc:	dec10015 	stw	sp,1024(sp)
    aae0:	dec10415 	stw	sp,1040(sp)
    aae4:	d8c10215 	stw	r3,1032(sp)
    aae8:	d8c10515 	stw	r3,1044(sp)
    aaec:	d8010615 	stw	zero,1048(sp)
    aaf0:	00096140 	call	9614 <___vfiprintf_internal_r>
    aaf4:	1023883a 	mov	r17,r2
    aaf8:	10000416 	blt	r2,zero,ab0c <__sbprintf+0x80>
    aafc:	d9410004 	addi	r5,sp,1024
    ab00:	9009883a 	mov	r4,r18
    ab04:	00067280 	call	6728 <_fflush_r>
    ab08:	10000d1e 	bne	r2,zero,ab40 <__sbprintf+0xb4>
    ab0c:	d881030b 	ldhu	r2,1036(sp)
    ab10:	1080100c 	andi	r2,r2,64
    ab14:	10000326 	beq	r2,zero,ab24 <__sbprintf+0x98>
    ab18:	8080030b 	ldhu	r2,12(r16)
    ab1c:	10801014 	ori	r2,r2,64
    ab20:	8080030d 	sth	r2,12(r16)
    ab24:	8805883a 	mov	r2,r17
    ab28:	dfc11d17 	ldw	ra,1140(sp)
    ab2c:	dc811c17 	ldw	r18,1136(sp)
    ab30:	dc411b17 	ldw	r17,1132(sp)
    ab34:	dc011a17 	ldw	r16,1128(sp)
    ab38:	dec11e04 	addi	sp,sp,1144
    ab3c:	f800283a 	ret
    ab40:	047fffc4 	movi	r17,-1
    ab44:	003ff106 	br	ab0c <__alt_data_end+0xff00ab0c>

0000ab48 <_write_r>:
    ab48:	defffd04 	addi	sp,sp,-12
    ab4c:	2805883a 	mov	r2,r5
    ab50:	dc000015 	stw	r16,0(sp)
    ab54:	04000074 	movhi	r16,1
    ab58:	dc400115 	stw	r17,4(sp)
    ab5c:	300b883a 	mov	r5,r6
    ab60:	840fa504 	addi	r16,r16,16020
    ab64:	2023883a 	mov	r17,r4
    ab68:	380d883a 	mov	r6,r7
    ab6c:	1009883a 	mov	r4,r2
    ab70:	dfc00215 	stw	ra,8(sp)
    ab74:	80000015 	stw	zero,0(r16)
    ab78:	000ea400 	call	ea40 <write>
    ab7c:	00ffffc4 	movi	r3,-1
    ab80:	10c00526 	beq	r2,r3,ab98 <_write_r+0x50>
    ab84:	dfc00217 	ldw	ra,8(sp)
    ab88:	dc400117 	ldw	r17,4(sp)
    ab8c:	dc000017 	ldw	r16,0(sp)
    ab90:	dec00304 	addi	sp,sp,12
    ab94:	f800283a 	ret
    ab98:	80c00017 	ldw	r3,0(r16)
    ab9c:	183ff926 	beq	r3,zero,ab84 <__alt_data_end+0xff00ab84>
    aba0:	88c00015 	stw	r3,0(r17)
    aba4:	003ff706 	br	ab84 <__alt_data_end+0xff00ab84>

0000aba8 <_close_r>:
    aba8:	defffd04 	addi	sp,sp,-12
    abac:	dc000015 	stw	r16,0(sp)
    abb0:	04000074 	movhi	r16,1
    abb4:	dc400115 	stw	r17,4(sp)
    abb8:	840fa504 	addi	r16,r16,16020
    abbc:	2023883a 	mov	r17,r4
    abc0:	2809883a 	mov	r4,r5
    abc4:	dfc00215 	stw	ra,8(sp)
    abc8:	80000015 	stw	zero,0(r16)
    abcc:	000e5940 	call	e594 <close>
    abd0:	00ffffc4 	movi	r3,-1
    abd4:	10c00526 	beq	r2,r3,abec <_close_r+0x44>
    abd8:	dfc00217 	ldw	ra,8(sp)
    abdc:	dc400117 	ldw	r17,4(sp)
    abe0:	dc000017 	ldw	r16,0(sp)
    abe4:	dec00304 	addi	sp,sp,12
    abe8:	f800283a 	ret
    abec:	80c00017 	ldw	r3,0(r16)
    abf0:	183ff926 	beq	r3,zero,abd8 <__alt_data_end+0xff00abd8>
    abf4:	88c00015 	stw	r3,0(r17)
    abf8:	003ff706 	br	abd8 <__alt_data_end+0xff00abd8>

0000abfc <_calloc_r>:
    abfc:	298b383a 	mul	r5,r5,r6
    ac00:	defffe04 	addi	sp,sp,-8
    ac04:	dfc00115 	stw	ra,4(sp)
    ac08:	dc000015 	stw	r16,0(sp)
    ac0c:	0001e280 	call	1e28 <_malloc_r>
    ac10:	10002926 	beq	r2,zero,acb8 <_calloc_r+0xbc>
    ac14:	11bfff17 	ldw	r6,-4(r2)
    ac18:	1021883a 	mov	r16,r2
    ac1c:	00bfff04 	movi	r2,-4
    ac20:	308c703a 	and	r6,r6,r2
    ac24:	00c00904 	movi	r3,36
    ac28:	308d883a 	add	r6,r6,r2
    ac2c:	19801636 	bltu	r3,r6,ac88 <_calloc_r+0x8c>
    ac30:	008004c4 	movi	r2,19
    ac34:	11800b2e 	bgeu	r2,r6,ac64 <_calloc_r+0x68>
    ac38:	80000015 	stw	zero,0(r16)
    ac3c:	80000115 	stw	zero,4(r16)
    ac40:	008006c4 	movi	r2,27
    ac44:	11801a2e 	bgeu	r2,r6,acb0 <_calloc_r+0xb4>
    ac48:	80000215 	stw	zero,8(r16)
    ac4c:	80000315 	stw	zero,12(r16)
    ac50:	30c0151e 	bne	r6,r3,aca8 <_calloc_r+0xac>
    ac54:	80000415 	stw	zero,16(r16)
    ac58:	80800604 	addi	r2,r16,24
    ac5c:	80000515 	stw	zero,20(r16)
    ac60:	00000106 	br	ac68 <_calloc_r+0x6c>
    ac64:	8005883a 	mov	r2,r16
    ac68:	10000015 	stw	zero,0(r2)
    ac6c:	10000115 	stw	zero,4(r2)
    ac70:	10000215 	stw	zero,8(r2)
    ac74:	8005883a 	mov	r2,r16
    ac78:	dfc00117 	ldw	ra,4(sp)
    ac7c:	dc000017 	ldw	r16,0(sp)
    ac80:	dec00204 	addi	sp,sp,8
    ac84:	f800283a 	ret
    ac88:	000b883a 	mov	r5,zero
    ac8c:	8009883a 	mov	r4,r16
    ac90:	0007bec0 	call	7bec <memset>
    ac94:	8005883a 	mov	r2,r16
    ac98:	dfc00117 	ldw	ra,4(sp)
    ac9c:	dc000017 	ldw	r16,0(sp)
    aca0:	dec00204 	addi	sp,sp,8
    aca4:	f800283a 	ret
    aca8:	80800404 	addi	r2,r16,16
    acac:	003fee06 	br	ac68 <__alt_data_end+0xff00ac68>
    acb0:	80800204 	addi	r2,r16,8
    acb4:	003fec06 	br	ac68 <__alt_data_end+0xff00ac68>
    acb8:	0005883a 	mov	r2,zero
    acbc:	003fee06 	br	ac78 <__alt_data_end+0xff00ac78>

0000acc0 <_fclose_r>:
    acc0:	28003926 	beq	r5,zero,ada8 <_fclose_r+0xe8>
    acc4:	defffc04 	addi	sp,sp,-16
    acc8:	dc400115 	stw	r17,4(sp)
    accc:	dc000015 	stw	r16,0(sp)
    acd0:	dfc00315 	stw	ra,12(sp)
    acd4:	dc800215 	stw	r18,8(sp)
    acd8:	2023883a 	mov	r17,r4
    acdc:	2821883a 	mov	r16,r5
    ace0:	20000226 	beq	r4,zero,acec <_fclose_r+0x2c>
    ace4:	20800e17 	ldw	r2,56(r4)
    ace8:	10002726 	beq	r2,zero,ad88 <_fclose_r+0xc8>
    acec:	8080030f 	ldh	r2,12(r16)
    acf0:	1000071e 	bne	r2,zero,ad10 <_fclose_r+0x50>
    acf4:	0005883a 	mov	r2,zero
    acf8:	dfc00317 	ldw	ra,12(sp)
    acfc:	dc800217 	ldw	r18,8(sp)
    ad00:	dc400117 	ldw	r17,4(sp)
    ad04:	dc000017 	ldw	r16,0(sp)
    ad08:	dec00404 	addi	sp,sp,16
    ad0c:	f800283a 	ret
    ad10:	800b883a 	mov	r5,r16
    ad14:	8809883a 	mov	r4,r17
    ad18:	000650c0 	call	650c <__sflush_r>
    ad1c:	1025883a 	mov	r18,r2
    ad20:	80800b17 	ldw	r2,44(r16)
    ad24:	10000426 	beq	r2,zero,ad38 <_fclose_r+0x78>
    ad28:	81400717 	ldw	r5,28(r16)
    ad2c:	8809883a 	mov	r4,r17
    ad30:	103ee83a 	callr	r2
    ad34:	10001616 	blt	r2,zero,ad90 <_fclose_r+0xd0>
    ad38:	8080030b 	ldhu	r2,12(r16)
    ad3c:	1080200c 	andi	r2,r2,128
    ad40:	1000151e 	bne	r2,zero,ad98 <_fclose_r+0xd8>
    ad44:	81400c17 	ldw	r5,48(r16)
    ad48:	28000526 	beq	r5,zero,ad60 <_fclose_r+0xa0>
    ad4c:	80801004 	addi	r2,r16,64
    ad50:	28800226 	beq	r5,r2,ad5c <_fclose_r+0x9c>
    ad54:	8809883a 	mov	r4,r17
    ad58:	0006c780 	call	6c78 <_free_r>
    ad5c:	80000c15 	stw	zero,48(r16)
    ad60:	81401117 	ldw	r5,68(r16)
    ad64:	28000326 	beq	r5,zero,ad74 <_fclose_r+0xb4>
    ad68:	8809883a 	mov	r4,r17
    ad6c:	0006c780 	call	6c78 <_free_r>
    ad70:	80001115 	stw	zero,68(r16)
    ad74:	0006b140 	call	6b14 <__sfp_lock_acquire>
    ad78:	8000030d 	sth	zero,12(r16)
    ad7c:	0006b180 	call	6b18 <__sfp_lock_release>
    ad80:	9005883a 	mov	r2,r18
    ad84:	003fdc06 	br	acf8 <__alt_data_end+0xff00acf8>
    ad88:	0006b040 	call	6b04 <__sinit>
    ad8c:	003fd706 	br	acec <__alt_data_end+0xff00acec>
    ad90:	04bfffc4 	movi	r18,-1
    ad94:	003fe806 	br	ad38 <__alt_data_end+0xff00ad38>
    ad98:	81400417 	ldw	r5,16(r16)
    ad9c:	8809883a 	mov	r4,r17
    ada0:	0006c780 	call	6c78 <_free_r>
    ada4:	003fe706 	br	ad44 <__alt_data_end+0xff00ad44>
    ada8:	0005883a 	mov	r2,zero
    adac:	f800283a 	ret

0000adb0 <fclose>:
    adb0:	00800074 	movhi	r2,1
    adb4:	10889004 	addi	r2,r2,8768
    adb8:	200b883a 	mov	r5,r4
    adbc:	11000017 	ldw	r4,0(r2)
    adc0:	000acc01 	jmpi	acc0 <_fclose_r>

0000adc4 <__fputwc>:
    adc4:	defff804 	addi	sp,sp,-32
    adc8:	dcc00415 	stw	r19,16(sp)
    adcc:	dc800315 	stw	r18,12(sp)
    add0:	dc000115 	stw	r16,4(sp)
    add4:	dfc00715 	stw	ra,28(sp)
    add8:	dd400615 	stw	r21,24(sp)
    addc:	dd000515 	stw	r20,20(sp)
    ade0:	dc400215 	stw	r17,8(sp)
    ade4:	2027883a 	mov	r19,r4
    ade8:	2825883a 	mov	r18,r5
    adec:	3021883a 	mov	r16,r6
    adf0:	00076540 	call	7654 <__locale_mb_cur_max>
    adf4:	00c00044 	movi	r3,1
    adf8:	10c03e26 	beq	r2,r3,aef4 <__fputwc+0x130>
    adfc:	81c01704 	addi	r7,r16,92
    ae00:	900d883a 	mov	r6,r18
    ae04:	d80b883a 	mov	r5,sp
    ae08:	9809883a 	mov	r4,r19
    ae0c:	000b2940 	call	b294 <_wcrtomb_r>
    ae10:	1029883a 	mov	r20,r2
    ae14:	00bfffc4 	movi	r2,-1
    ae18:	a0802026 	beq	r20,r2,ae9c <__fputwc+0xd8>
    ae1c:	d9400003 	ldbu	r5,0(sp)
    ae20:	a0001c26 	beq	r20,zero,ae94 <__fputwc+0xd0>
    ae24:	0023883a 	mov	r17,zero
    ae28:	05400284 	movi	r21,10
    ae2c:	00000906 	br	ae54 <__fputwc+0x90>
    ae30:	80800017 	ldw	r2,0(r16)
    ae34:	11400005 	stb	r5,0(r2)
    ae38:	80c00017 	ldw	r3,0(r16)
    ae3c:	18c00044 	addi	r3,r3,1
    ae40:	80c00015 	stw	r3,0(r16)
    ae44:	8c400044 	addi	r17,r17,1
    ae48:	dc45883a 	add	r2,sp,r17
    ae4c:	8d00112e 	bgeu	r17,r20,ae94 <__fputwc+0xd0>
    ae50:	11400003 	ldbu	r5,0(r2)
    ae54:	80c00217 	ldw	r3,8(r16)
    ae58:	18ffffc4 	addi	r3,r3,-1
    ae5c:	80c00215 	stw	r3,8(r16)
    ae60:	183ff30e 	bge	r3,zero,ae30 <__alt_data_end+0xff00ae30>
    ae64:	80800617 	ldw	r2,24(r16)
    ae68:	18801916 	blt	r3,r2,aed0 <__fputwc+0x10c>
    ae6c:	80800017 	ldw	r2,0(r16)
    ae70:	11400005 	stb	r5,0(r2)
    ae74:	80800017 	ldw	r2,0(r16)
    ae78:	10c00003 	ldbu	r3,0(r2)
    ae7c:	10800044 	addi	r2,r2,1
    ae80:	1d402326 	beq	r3,r21,af10 <__fputwc+0x14c>
    ae84:	80800015 	stw	r2,0(r16)
    ae88:	8c400044 	addi	r17,r17,1
    ae8c:	dc45883a 	add	r2,sp,r17
    ae90:	8d3fef36 	bltu	r17,r20,ae50 <__alt_data_end+0xff00ae50>
    ae94:	9005883a 	mov	r2,r18
    ae98:	00000406 	br	aeac <__fputwc+0xe8>
    ae9c:	80c0030b 	ldhu	r3,12(r16)
    aea0:	a005883a 	mov	r2,r20
    aea4:	18c01014 	ori	r3,r3,64
    aea8:	80c0030d 	sth	r3,12(r16)
    aeac:	dfc00717 	ldw	ra,28(sp)
    aeb0:	dd400617 	ldw	r21,24(sp)
    aeb4:	dd000517 	ldw	r20,20(sp)
    aeb8:	dcc00417 	ldw	r19,16(sp)
    aebc:	dc800317 	ldw	r18,12(sp)
    aec0:	dc400217 	ldw	r17,8(sp)
    aec4:	dc000117 	ldw	r16,4(sp)
    aec8:	dec00804 	addi	sp,sp,32
    aecc:	f800283a 	ret
    aed0:	800d883a 	mov	r6,r16
    aed4:	29403fcc 	andi	r5,r5,255
    aed8:	9809883a 	mov	r4,r19
    aedc:	000b13c0 	call	b13c <__swbuf_r>
    aee0:	10bfffe0 	cmpeqi	r2,r2,-1
    aee4:	10803fcc 	andi	r2,r2,255
    aee8:	103fd626 	beq	r2,zero,ae44 <__alt_data_end+0xff00ae44>
    aeec:	00bfffc4 	movi	r2,-1
    aef0:	003fee06 	br	aeac <__alt_data_end+0xff00aeac>
    aef4:	90ffffc4 	addi	r3,r18,-1
    aef8:	01003f84 	movi	r4,254
    aefc:	20ffbf36 	bltu	r4,r3,adfc <__alt_data_end+0xff00adfc>
    af00:	900b883a 	mov	r5,r18
    af04:	dc800005 	stb	r18,0(sp)
    af08:	1029883a 	mov	r20,r2
    af0c:	003fc506 	br	ae24 <__alt_data_end+0xff00ae24>
    af10:	800d883a 	mov	r6,r16
    af14:	a80b883a 	mov	r5,r21
    af18:	9809883a 	mov	r4,r19
    af1c:	000b13c0 	call	b13c <__swbuf_r>
    af20:	10bfffe0 	cmpeqi	r2,r2,-1
    af24:	003fef06 	br	aee4 <__alt_data_end+0xff00aee4>

0000af28 <_fputwc_r>:
    af28:	3080030b 	ldhu	r2,12(r6)
    af2c:	10c8000c 	andi	r3,r2,8192
    af30:	1800051e 	bne	r3,zero,af48 <_fputwc_r+0x20>
    af34:	30c01917 	ldw	r3,100(r6)
    af38:	10880014 	ori	r2,r2,8192
    af3c:	3080030d 	sth	r2,12(r6)
    af40:	18880014 	ori	r2,r3,8192
    af44:	30801915 	stw	r2,100(r6)
    af48:	000adc41 	jmpi	adc4 <__fputwc>

0000af4c <fputwc>:
    af4c:	00800074 	movhi	r2,1
    af50:	defffc04 	addi	sp,sp,-16
    af54:	10889004 	addi	r2,r2,8768
    af58:	dc000115 	stw	r16,4(sp)
    af5c:	14000017 	ldw	r16,0(r2)
    af60:	dc400215 	stw	r17,8(sp)
    af64:	dfc00315 	stw	ra,12(sp)
    af68:	2023883a 	mov	r17,r4
    af6c:	80000226 	beq	r16,zero,af78 <fputwc+0x2c>
    af70:	80800e17 	ldw	r2,56(r16)
    af74:	10001026 	beq	r2,zero,afb8 <fputwc+0x6c>
    af78:	2880030b 	ldhu	r2,12(r5)
    af7c:	10c8000c 	andi	r3,r2,8192
    af80:	1800051e 	bne	r3,zero,af98 <fputwc+0x4c>
    af84:	28c01917 	ldw	r3,100(r5)
    af88:	10880014 	ori	r2,r2,8192
    af8c:	2880030d 	sth	r2,12(r5)
    af90:	18880014 	ori	r2,r3,8192
    af94:	28801915 	stw	r2,100(r5)
    af98:	280d883a 	mov	r6,r5
    af9c:	8009883a 	mov	r4,r16
    afa0:	880b883a 	mov	r5,r17
    afa4:	dfc00317 	ldw	ra,12(sp)
    afa8:	dc400217 	ldw	r17,8(sp)
    afac:	dc000117 	ldw	r16,4(sp)
    afb0:	dec00404 	addi	sp,sp,16
    afb4:	000adc41 	jmpi	adc4 <__fputwc>
    afb8:	8009883a 	mov	r4,r16
    afbc:	d9400015 	stw	r5,0(sp)
    afc0:	0006b040 	call	6b04 <__sinit>
    afc4:	d9400017 	ldw	r5,0(sp)
    afc8:	003feb06 	br	af78 <__alt_data_end+0xff00af78>

0000afcc <_fstat_r>:
    afcc:	defffd04 	addi	sp,sp,-12
    afd0:	2805883a 	mov	r2,r5
    afd4:	dc000015 	stw	r16,0(sp)
    afd8:	04000074 	movhi	r16,1
    afdc:	dc400115 	stw	r17,4(sp)
    afe0:	840fa504 	addi	r16,r16,16020
    afe4:	2023883a 	mov	r17,r4
    afe8:	300b883a 	mov	r5,r6
    afec:	1009883a 	mov	r4,r2
    aff0:	dfc00215 	stw	ra,8(sp)
    aff4:	80000015 	stw	zero,0(r16)
    aff8:	000e6580 	call	e658 <fstat>
    affc:	00ffffc4 	movi	r3,-1
    b000:	10c00526 	beq	r2,r3,b018 <_fstat_r+0x4c>
    b004:	dfc00217 	ldw	ra,8(sp)
    b008:	dc400117 	ldw	r17,4(sp)
    b00c:	dc000017 	ldw	r16,0(sp)
    b010:	dec00304 	addi	sp,sp,12
    b014:	f800283a 	ret
    b018:	80c00017 	ldw	r3,0(r16)
    b01c:	183ff926 	beq	r3,zero,b004 <__alt_data_end+0xff00b004>
    b020:	88c00015 	stw	r3,0(r17)
    b024:	003ff706 	br	b004 <__alt_data_end+0xff00b004>

0000b028 <_isatty_r>:
    b028:	defffd04 	addi	sp,sp,-12
    b02c:	dc000015 	stw	r16,0(sp)
    b030:	04000074 	movhi	r16,1
    b034:	dc400115 	stw	r17,4(sp)
    b038:	840fa504 	addi	r16,r16,16020
    b03c:	2023883a 	mov	r17,r4
    b040:	2809883a 	mov	r4,r5
    b044:	dfc00215 	stw	ra,8(sp)
    b048:	80000015 	stw	zero,0(r16)
    b04c:	000e6d00 	call	e6d0 <isatty>
    b050:	00ffffc4 	movi	r3,-1
    b054:	10c00526 	beq	r2,r3,b06c <_isatty_r+0x44>
    b058:	dfc00217 	ldw	ra,8(sp)
    b05c:	dc400117 	ldw	r17,4(sp)
    b060:	dc000017 	ldw	r16,0(sp)
    b064:	dec00304 	addi	sp,sp,12
    b068:	f800283a 	ret
    b06c:	80c00017 	ldw	r3,0(r16)
    b070:	183ff926 	beq	r3,zero,b058 <__alt_data_end+0xff00b058>
    b074:	88c00015 	stw	r3,0(r17)
    b078:	003ff706 	br	b058 <__alt_data_end+0xff00b058>

0000b07c <_lseek_r>:
    b07c:	defffd04 	addi	sp,sp,-12
    b080:	2805883a 	mov	r2,r5
    b084:	dc000015 	stw	r16,0(sp)
    b088:	04000074 	movhi	r16,1
    b08c:	dc400115 	stw	r17,4(sp)
    b090:	300b883a 	mov	r5,r6
    b094:	840fa504 	addi	r16,r16,16020
    b098:	2023883a 	mov	r17,r4
    b09c:	380d883a 	mov	r6,r7
    b0a0:	1009883a 	mov	r4,r2
    b0a4:	dfc00215 	stw	ra,8(sp)
    b0a8:	80000015 	stw	zero,0(r16)
    b0ac:	000e8200 	call	e820 <lseek>
    b0b0:	00ffffc4 	movi	r3,-1
    b0b4:	10c00526 	beq	r2,r3,b0cc <_lseek_r+0x50>
    b0b8:	dfc00217 	ldw	ra,8(sp)
    b0bc:	dc400117 	ldw	r17,4(sp)
    b0c0:	dc000017 	ldw	r16,0(sp)
    b0c4:	dec00304 	addi	sp,sp,12
    b0c8:	f800283a 	ret
    b0cc:	80c00017 	ldw	r3,0(r16)
    b0d0:	183ff926 	beq	r3,zero,b0b8 <__alt_data_end+0xff00b0b8>
    b0d4:	88c00015 	stw	r3,0(r17)
    b0d8:	003ff706 	br	b0b8 <__alt_data_end+0xff00b0b8>

0000b0dc <_read_r>:
    b0dc:	defffd04 	addi	sp,sp,-12
    b0e0:	2805883a 	mov	r2,r5
    b0e4:	dc000015 	stw	r16,0(sp)
    b0e8:	04000074 	movhi	r16,1
    b0ec:	dc400115 	stw	r17,4(sp)
    b0f0:	300b883a 	mov	r5,r6
    b0f4:	840fa504 	addi	r16,r16,16020
    b0f8:	2023883a 	mov	r17,r4
    b0fc:	380d883a 	mov	r6,r7
    b100:	1009883a 	mov	r4,r2
    b104:	dfc00215 	stw	ra,8(sp)
    b108:	80000015 	stw	zero,0(r16)
    b10c:	000e9040 	call	e904 <read>
    b110:	00ffffc4 	movi	r3,-1
    b114:	10c00526 	beq	r2,r3,b12c <_read_r+0x50>
    b118:	dfc00217 	ldw	ra,8(sp)
    b11c:	dc400117 	ldw	r17,4(sp)
    b120:	dc000017 	ldw	r16,0(sp)
    b124:	dec00304 	addi	sp,sp,12
    b128:	f800283a 	ret
    b12c:	80c00017 	ldw	r3,0(r16)
    b130:	183ff926 	beq	r3,zero,b118 <__alt_data_end+0xff00b118>
    b134:	88c00015 	stw	r3,0(r17)
    b138:	003ff706 	br	b118 <__alt_data_end+0xff00b118>

0000b13c <__swbuf_r>:
    b13c:	defffb04 	addi	sp,sp,-20
    b140:	dcc00315 	stw	r19,12(sp)
    b144:	dc800215 	stw	r18,8(sp)
    b148:	dc000015 	stw	r16,0(sp)
    b14c:	dfc00415 	stw	ra,16(sp)
    b150:	dc400115 	stw	r17,4(sp)
    b154:	2025883a 	mov	r18,r4
    b158:	2827883a 	mov	r19,r5
    b15c:	3021883a 	mov	r16,r6
    b160:	20000226 	beq	r4,zero,b16c <__swbuf_r+0x30>
    b164:	20800e17 	ldw	r2,56(r4)
    b168:	10004226 	beq	r2,zero,b274 <__swbuf_r+0x138>
    b16c:	80800617 	ldw	r2,24(r16)
    b170:	8100030b 	ldhu	r4,12(r16)
    b174:	80800215 	stw	r2,8(r16)
    b178:	2080020c 	andi	r2,r4,8
    b17c:	10003626 	beq	r2,zero,b258 <__swbuf_r+0x11c>
    b180:	80c00417 	ldw	r3,16(r16)
    b184:	18003426 	beq	r3,zero,b258 <__swbuf_r+0x11c>
    b188:	2088000c 	andi	r2,r4,8192
    b18c:	9c403fcc 	andi	r17,r19,255
    b190:	10001a26 	beq	r2,zero,b1fc <__swbuf_r+0xc0>
    b194:	80800017 	ldw	r2,0(r16)
    b198:	81000517 	ldw	r4,20(r16)
    b19c:	10c7c83a 	sub	r3,r2,r3
    b1a0:	1900200e 	bge	r3,r4,b224 <__swbuf_r+0xe8>
    b1a4:	18c00044 	addi	r3,r3,1
    b1a8:	81000217 	ldw	r4,8(r16)
    b1ac:	11400044 	addi	r5,r2,1
    b1b0:	81400015 	stw	r5,0(r16)
    b1b4:	213fffc4 	addi	r4,r4,-1
    b1b8:	81000215 	stw	r4,8(r16)
    b1bc:	14c00005 	stb	r19,0(r2)
    b1c0:	80800517 	ldw	r2,20(r16)
    b1c4:	10c01e26 	beq	r2,r3,b240 <__swbuf_r+0x104>
    b1c8:	8080030b 	ldhu	r2,12(r16)
    b1cc:	1080004c 	andi	r2,r2,1
    b1d0:	10000226 	beq	r2,zero,b1dc <__swbuf_r+0xa0>
    b1d4:	00800284 	movi	r2,10
    b1d8:	88801926 	beq	r17,r2,b240 <__swbuf_r+0x104>
    b1dc:	8805883a 	mov	r2,r17
    b1e0:	dfc00417 	ldw	ra,16(sp)
    b1e4:	dcc00317 	ldw	r19,12(sp)
    b1e8:	dc800217 	ldw	r18,8(sp)
    b1ec:	dc400117 	ldw	r17,4(sp)
    b1f0:	dc000017 	ldw	r16,0(sp)
    b1f4:	dec00504 	addi	sp,sp,20
    b1f8:	f800283a 	ret
    b1fc:	81401917 	ldw	r5,100(r16)
    b200:	00b7ffc4 	movi	r2,-8193
    b204:	21080014 	ori	r4,r4,8192
    b208:	2884703a 	and	r2,r5,r2
    b20c:	80801915 	stw	r2,100(r16)
    b210:	80800017 	ldw	r2,0(r16)
    b214:	8100030d 	sth	r4,12(r16)
    b218:	81000517 	ldw	r4,20(r16)
    b21c:	10c7c83a 	sub	r3,r2,r3
    b220:	193fe016 	blt	r3,r4,b1a4 <__alt_data_end+0xff00b1a4>
    b224:	800b883a 	mov	r5,r16
    b228:	9009883a 	mov	r4,r18
    b22c:	00067280 	call	6728 <_fflush_r>
    b230:	1000071e 	bne	r2,zero,b250 <__swbuf_r+0x114>
    b234:	80800017 	ldw	r2,0(r16)
    b238:	00c00044 	movi	r3,1
    b23c:	003fda06 	br	b1a8 <__alt_data_end+0xff00b1a8>
    b240:	800b883a 	mov	r5,r16
    b244:	9009883a 	mov	r4,r18
    b248:	00067280 	call	6728 <_fflush_r>
    b24c:	103fe326 	beq	r2,zero,b1dc <__alt_data_end+0xff00b1dc>
    b250:	00bfffc4 	movi	r2,-1
    b254:	003fe206 	br	b1e0 <__alt_data_end+0xff00b1e0>
    b258:	800b883a 	mov	r5,r16
    b25c:	9009883a 	mov	r4,r18
    b260:	0004b300 	call	4b30 <__swsetup_r>
    b264:	103ffa1e 	bne	r2,zero,b250 <__alt_data_end+0xff00b250>
    b268:	8100030b 	ldhu	r4,12(r16)
    b26c:	80c00417 	ldw	r3,16(r16)
    b270:	003fc506 	br	b188 <__alt_data_end+0xff00b188>
    b274:	0006b040 	call	6b04 <__sinit>
    b278:	003fbc06 	br	b16c <__alt_data_end+0xff00b16c>

0000b27c <__swbuf>:
    b27c:	00800074 	movhi	r2,1
    b280:	10889004 	addi	r2,r2,8768
    b284:	280d883a 	mov	r6,r5
    b288:	200b883a 	mov	r5,r4
    b28c:	11000017 	ldw	r4,0(r2)
    b290:	000b13c1 	jmpi	b13c <__swbuf_r>

0000b294 <_wcrtomb_r>:
    b294:	defff604 	addi	sp,sp,-40
    b298:	00800074 	movhi	r2,1
    b29c:	dc800815 	stw	r18,32(sp)
    b2a0:	dc400715 	stw	r17,28(sp)
    b2a4:	dc000615 	stw	r16,24(sp)
    b2a8:	10889204 	addi	r2,r2,8776
    b2ac:	dfc00915 	stw	ra,36(sp)
    b2b0:	2021883a 	mov	r16,r4
    b2b4:	3823883a 	mov	r17,r7
    b2b8:	14800017 	ldw	r18,0(r2)
    b2bc:	28001426 	beq	r5,zero,b310 <_wcrtomb_r+0x7c>
    b2c0:	d9400415 	stw	r5,16(sp)
    b2c4:	d9800515 	stw	r6,20(sp)
    b2c8:	00076480 	call	7648 <__locale_charset>
    b2cc:	d9800517 	ldw	r6,20(sp)
    b2d0:	d9400417 	ldw	r5,16(sp)
    b2d4:	100f883a 	mov	r7,r2
    b2d8:	dc400015 	stw	r17,0(sp)
    b2dc:	8009883a 	mov	r4,r16
    b2e0:	903ee83a 	callr	r18
    b2e4:	00ffffc4 	movi	r3,-1
    b2e8:	10c0031e 	bne	r2,r3,b2f8 <_wcrtomb_r+0x64>
    b2ec:	88000015 	stw	zero,0(r17)
    b2f0:	00c02284 	movi	r3,138
    b2f4:	80c00015 	stw	r3,0(r16)
    b2f8:	dfc00917 	ldw	ra,36(sp)
    b2fc:	dc800817 	ldw	r18,32(sp)
    b300:	dc400717 	ldw	r17,28(sp)
    b304:	dc000617 	ldw	r16,24(sp)
    b308:	dec00a04 	addi	sp,sp,40
    b30c:	f800283a 	ret
    b310:	00076480 	call	7648 <__locale_charset>
    b314:	100f883a 	mov	r7,r2
    b318:	dc400015 	stw	r17,0(sp)
    b31c:	000d883a 	mov	r6,zero
    b320:	d9400104 	addi	r5,sp,4
    b324:	8009883a 	mov	r4,r16
    b328:	903ee83a 	callr	r18
    b32c:	003fed06 	br	b2e4 <__alt_data_end+0xff00b2e4>

0000b330 <wcrtomb>:
    b330:	defff604 	addi	sp,sp,-40
    b334:	00800074 	movhi	r2,1
    b338:	dc800615 	stw	r18,24(sp)
    b33c:	dc400515 	stw	r17,20(sp)
    b340:	10889004 	addi	r2,r2,8768
    b344:	dfc00915 	stw	ra,36(sp)
    b348:	dd000815 	stw	r20,32(sp)
    b34c:	dcc00715 	stw	r19,28(sp)
    b350:	dc000415 	stw	r16,16(sp)
    b354:	3025883a 	mov	r18,r6
    b358:	14400017 	ldw	r17,0(r2)
    b35c:	20001926 	beq	r4,zero,b3c4 <wcrtomb+0x94>
    b360:	00800074 	movhi	r2,1
    b364:	10889204 	addi	r2,r2,8776
    b368:	15000017 	ldw	r20,0(r2)
    b36c:	2021883a 	mov	r16,r4
    b370:	2827883a 	mov	r19,r5
    b374:	00076480 	call	7648 <__locale_charset>
    b378:	100f883a 	mov	r7,r2
    b37c:	dc800015 	stw	r18,0(sp)
    b380:	980d883a 	mov	r6,r19
    b384:	800b883a 	mov	r5,r16
    b388:	8809883a 	mov	r4,r17
    b38c:	a03ee83a 	callr	r20
    b390:	00ffffc4 	movi	r3,-1
    b394:	10c0031e 	bne	r2,r3,b3a4 <wcrtomb+0x74>
    b398:	90000015 	stw	zero,0(r18)
    b39c:	00c02284 	movi	r3,138
    b3a0:	88c00015 	stw	r3,0(r17)
    b3a4:	dfc00917 	ldw	ra,36(sp)
    b3a8:	dd000817 	ldw	r20,32(sp)
    b3ac:	dcc00717 	ldw	r19,28(sp)
    b3b0:	dc800617 	ldw	r18,24(sp)
    b3b4:	dc400517 	ldw	r17,20(sp)
    b3b8:	dc000417 	ldw	r16,16(sp)
    b3bc:	dec00a04 	addi	sp,sp,40
    b3c0:	f800283a 	ret
    b3c4:	00800074 	movhi	r2,1
    b3c8:	10889204 	addi	r2,r2,8776
    b3cc:	14000017 	ldw	r16,0(r2)
    b3d0:	00076480 	call	7648 <__locale_charset>
    b3d4:	100f883a 	mov	r7,r2
    b3d8:	dc800015 	stw	r18,0(sp)
    b3dc:	000d883a 	mov	r6,zero
    b3e0:	d9400104 	addi	r5,sp,4
    b3e4:	8809883a 	mov	r4,r17
    b3e8:	803ee83a 	callr	r16
    b3ec:	003fe806 	br	b390 <__alt_data_end+0xff00b390>

0000b3f0 <__ascii_wctomb>:
    b3f0:	28000526 	beq	r5,zero,b408 <__ascii_wctomb+0x18>
    b3f4:	00803fc4 	movi	r2,255
    b3f8:	11800536 	bltu	r2,r6,b410 <__ascii_wctomb+0x20>
    b3fc:	29800005 	stb	r6,0(r5)
    b400:	00800044 	movi	r2,1
    b404:	f800283a 	ret
    b408:	0005883a 	mov	r2,zero
    b40c:	f800283a 	ret
    b410:	00802284 	movi	r2,138
    b414:	20800015 	stw	r2,0(r4)
    b418:	00bfffc4 	movi	r2,-1
    b41c:	f800283a 	ret

0000b420 <_wctomb_r>:
    b420:	00800074 	movhi	r2,1
    b424:	defff904 	addi	sp,sp,-28
    b428:	10889204 	addi	r2,r2,8776
    b42c:	dfc00615 	stw	ra,24(sp)
    b430:	dc400515 	stw	r17,20(sp)
    b434:	dc000415 	stw	r16,16(sp)
    b438:	3823883a 	mov	r17,r7
    b43c:	14000017 	ldw	r16,0(r2)
    b440:	d9000115 	stw	r4,4(sp)
    b444:	d9400215 	stw	r5,8(sp)
    b448:	d9800315 	stw	r6,12(sp)
    b44c:	00076480 	call	7648 <__locale_charset>
    b450:	d9800317 	ldw	r6,12(sp)
    b454:	d9400217 	ldw	r5,8(sp)
    b458:	d9000117 	ldw	r4,4(sp)
    b45c:	100f883a 	mov	r7,r2
    b460:	dc400015 	stw	r17,0(sp)
    b464:	803ee83a 	callr	r16
    b468:	dfc00617 	ldw	ra,24(sp)
    b46c:	dc400517 	ldw	r17,20(sp)
    b470:	dc000417 	ldw	r16,16(sp)
    b474:	dec00704 	addi	sp,sp,28
    b478:	f800283a 	ret

0000b47c <__udivdi3>:
    b47c:	defff504 	addi	sp,sp,-44
    b480:	dcc00415 	stw	r19,16(sp)
    b484:	dc000115 	stw	r16,4(sp)
    b488:	dfc00a15 	stw	ra,40(sp)
    b48c:	df000915 	stw	fp,36(sp)
    b490:	ddc00815 	stw	r23,32(sp)
    b494:	dd800715 	stw	r22,28(sp)
    b498:	dd400615 	stw	r21,24(sp)
    b49c:	dd000515 	stw	r20,20(sp)
    b4a0:	dc800315 	stw	r18,12(sp)
    b4a4:	dc400215 	stw	r17,8(sp)
    b4a8:	2027883a 	mov	r19,r4
    b4ac:	2821883a 	mov	r16,r5
    b4b0:	3800411e 	bne	r7,zero,b5b8 <__udivdi3+0x13c>
    b4b4:	3023883a 	mov	r17,r6
    b4b8:	2025883a 	mov	r18,r4
    b4bc:	2980522e 	bgeu	r5,r6,b608 <__udivdi3+0x18c>
    b4c0:	00bfffd4 	movui	r2,65535
    b4c4:	282d883a 	mov	r22,r5
    b4c8:	1180a836 	bltu	r2,r6,b76c <__udivdi3+0x2f0>
    b4cc:	00803fc4 	movi	r2,255
    b4d0:	1185803a 	cmpltu	r2,r2,r6
    b4d4:	100490fa 	slli	r2,r2,3
    b4d8:	3086d83a 	srl	r3,r6,r2
    b4dc:	01000074 	movhi	r4,1
    b4e0:	21015b04 	addi	r4,r4,1388
    b4e4:	20c7883a 	add	r3,r4,r3
    b4e8:	18c00003 	ldbu	r3,0(r3)
    b4ec:	1885883a 	add	r2,r3,r2
    b4f0:	00c00804 	movi	r3,32
    b4f4:	1887c83a 	sub	r3,r3,r2
    b4f8:	18000526 	beq	r3,zero,b510 <__udivdi3+0x94>
    b4fc:	80e0983a 	sll	r16,r16,r3
    b500:	9884d83a 	srl	r2,r19,r2
    b504:	30e2983a 	sll	r17,r6,r3
    b508:	98e4983a 	sll	r18,r19,r3
    b50c:	142cb03a 	or	r22,r2,r16
    b510:	882ad43a 	srli	r21,r17,16
    b514:	b009883a 	mov	r4,r22
    b518:	8d3fffcc 	andi	r20,r17,65535
    b51c:	a80b883a 	mov	r5,r21
    b520:	0001da80 	call	1da8 <__umodsi3>
    b524:	b009883a 	mov	r4,r22
    b528:	a80b883a 	mov	r5,r21
    b52c:	1027883a 	mov	r19,r2
    b530:	0001d440 	call	1d44 <__udivsi3>
    b534:	102d883a 	mov	r22,r2
    b538:	9826943a 	slli	r19,r19,16
    b53c:	9004d43a 	srli	r2,r18,16
    b540:	a5a1383a 	mul	r16,r20,r22
    b544:	14c4b03a 	or	r2,r2,r19
    b548:	1400052e 	bgeu	r2,r16,b560 <__udivdi3+0xe4>
    b54c:	1445883a 	add	r2,r2,r17
    b550:	b0ffffc4 	addi	r3,r22,-1
    b554:	14400136 	bltu	r2,r17,b55c <__udivdi3+0xe0>
    b558:	14012336 	bltu	r2,r16,b9e8 <__udivdi3+0x56c>
    b55c:	182d883a 	mov	r22,r3
    b560:	1421c83a 	sub	r16,r2,r16
    b564:	a80b883a 	mov	r5,r21
    b568:	8009883a 	mov	r4,r16
    b56c:	0001da80 	call	1da8 <__umodsi3>
    b570:	1027883a 	mov	r19,r2
    b574:	a80b883a 	mov	r5,r21
    b578:	8009883a 	mov	r4,r16
    b57c:	0001d440 	call	1d44 <__udivsi3>
    b580:	9826943a 	slli	r19,r19,16
    b584:	a0a9383a 	mul	r20,r20,r2
    b588:	94bfffcc 	andi	r18,r18,65535
    b58c:	94e4b03a 	or	r18,r18,r19
    b590:	9500052e 	bgeu	r18,r20,b5a8 <__udivdi3+0x12c>
    b594:	8ca5883a 	add	r18,r17,r18
    b598:	10ffffc4 	addi	r3,r2,-1
    b59c:	9440f136 	bltu	r18,r17,b964 <__udivdi3+0x4e8>
    b5a0:	9500f02e 	bgeu	r18,r20,b964 <__udivdi3+0x4e8>
    b5a4:	10bfff84 	addi	r2,r2,-2
    b5a8:	b00c943a 	slli	r6,r22,16
    b5ac:	0007883a 	mov	r3,zero
    b5b0:	3084b03a 	or	r2,r6,r2
    b5b4:	00005906 	br	b71c <__udivdi3+0x2a0>
    b5b8:	29c05636 	bltu	r5,r7,b714 <__udivdi3+0x298>
    b5bc:	00bfffd4 	movui	r2,65535
    b5c0:	11c0622e 	bgeu	r2,r7,b74c <__udivdi3+0x2d0>
    b5c4:	00804034 	movhi	r2,256
    b5c8:	10bfffc4 	addi	r2,r2,-1
    b5cc:	11c0ee36 	bltu	r2,r7,b988 <__udivdi3+0x50c>
    b5d0:	00800404 	movi	r2,16
    b5d4:	3886d83a 	srl	r3,r7,r2
    b5d8:	01000074 	movhi	r4,1
    b5dc:	21015b04 	addi	r4,r4,1388
    b5e0:	20c7883a 	add	r3,r4,r3
    b5e4:	18c00003 	ldbu	r3,0(r3)
    b5e8:	05400804 	movi	r21,32
    b5ec:	1885883a 	add	r2,r3,r2
    b5f0:	a8abc83a 	sub	r21,r21,r2
    b5f4:	a800621e 	bne	r21,zero,b780 <__udivdi3+0x304>
    b5f8:	3c00e936 	bltu	r7,r16,b9a0 <__udivdi3+0x524>
    b5fc:	9985403a 	cmpgeu	r2,r19,r6
    b600:	0007883a 	mov	r3,zero
    b604:	00004506 	br	b71c <__udivdi3+0x2a0>
    b608:	3000041e 	bne	r6,zero,b61c <__udivdi3+0x1a0>
    b60c:	000b883a 	mov	r5,zero
    b610:	01000044 	movi	r4,1
    b614:	0001d440 	call	1d44 <__udivsi3>
    b618:	1023883a 	mov	r17,r2
    b61c:	00bfffd4 	movui	r2,65535
    b620:	14404e2e 	bgeu	r2,r17,b75c <__udivdi3+0x2e0>
    b624:	00804034 	movhi	r2,256
    b628:	10bfffc4 	addi	r2,r2,-1
    b62c:	1440d836 	bltu	r2,r17,b990 <__udivdi3+0x514>
    b630:	00800404 	movi	r2,16
    b634:	8886d83a 	srl	r3,r17,r2
    b638:	01000074 	movhi	r4,1
    b63c:	21015b04 	addi	r4,r4,1388
    b640:	20c7883a 	add	r3,r4,r3
    b644:	18c00003 	ldbu	r3,0(r3)
    b648:	1885883a 	add	r2,r3,r2
    b64c:	00c00804 	movi	r3,32
    b650:	1887c83a 	sub	r3,r3,r2
    b654:	18008f1e 	bne	r3,zero,b894 <__udivdi3+0x418>
    b658:	882ad43a 	srli	r21,r17,16
    b65c:	8461c83a 	sub	r16,r16,r17
    b660:	8d3fffcc 	andi	r20,r17,65535
    b664:	00c00044 	movi	r3,1
    b668:	8009883a 	mov	r4,r16
    b66c:	a80b883a 	mov	r5,r21
    b670:	d8c00015 	stw	r3,0(sp)
    b674:	0001da80 	call	1da8 <__umodsi3>
    b678:	8009883a 	mov	r4,r16
    b67c:	a80b883a 	mov	r5,r21
    b680:	1027883a 	mov	r19,r2
    b684:	0001d440 	call	1d44 <__udivsi3>
    b688:	9826943a 	slli	r19,r19,16
    b68c:	9008d43a 	srli	r4,r18,16
    b690:	1521383a 	mul	r16,r2,r20
    b694:	102d883a 	mov	r22,r2
    b698:	24c8b03a 	or	r4,r4,r19
    b69c:	d8c00017 	ldw	r3,0(sp)
    b6a0:	2400052e 	bgeu	r4,r16,b6b8 <__udivdi3+0x23c>
    b6a4:	2449883a 	add	r4,r4,r17
    b6a8:	b0bfffc4 	addi	r2,r22,-1
    b6ac:	24400136 	bltu	r4,r17,b6b4 <__udivdi3+0x238>
    b6b0:	2400ca36 	bltu	r4,r16,b9dc <__udivdi3+0x560>
    b6b4:	102d883a 	mov	r22,r2
    b6b8:	2421c83a 	sub	r16,r4,r16
    b6bc:	a80b883a 	mov	r5,r21
    b6c0:	8009883a 	mov	r4,r16
    b6c4:	d8c00015 	stw	r3,0(sp)
    b6c8:	0001da80 	call	1da8 <__umodsi3>
    b6cc:	1027883a 	mov	r19,r2
    b6d0:	a80b883a 	mov	r5,r21
    b6d4:	8009883a 	mov	r4,r16
    b6d8:	0001d440 	call	1d44 <__udivsi3>
    b6dc:	9826943a 	slli	r19,r19,16
    b6e0:	1529383a 	mul	r20,r2,r20
    b6e4:	94bfffcc 	andi	r18,r18,65535
    b6e8:	94e4b03a 	or	r18,r18,r19
    b6ec:	d8c00017 	ldw	r3,0(sp)
    b6f0:	9500052e 	bgeu	r18,r20,b708 <__udivdi3+0x28c>
    b6f4:	8ca5883a 	add	r18,r17,r18
    b6f8:	113fffc4 	addi	r4,r2,-1
    b6fc:	94409736 	bltu	r18,r17,b95c <__udivdi3+0x4e0>
    b700:	9500962e 	bgeu	r18,r20,b95c <__udivdi3+0x4e0>
    b704:	10bfff84 	addi	r2,r2,-2
    b708:	b00c943a 	slli	r6,r22,16
    b70c:	3084b03a 	or	r2,r6,r2
    b710:	00000206 	br	b71c <__udivdi3+0x2a0>
    b714:	0007883a 	mov	r3,zero
    b718:	0005883a 	mov	r2,zero
    b71c:	dfc00a17 	ldw	ra,40(sp)
    b720:	df000917 	ldw	fp,36(sp)
    b724:	ddc00817 	ldw	r23,32(sp)
    b728:	dd800717 	ldw	r22,28(sp)
    b72c:	dd400617 	ldw	r21,24(sp)
    b730:	dd000517 	ldw	r20,20(sp)
    b734:	dcc00417 	ldw	r19,16(sp)
    b738:	dc800317 	ldw	r18,12(sp)
    b73c:	dc400217 	ldw	r17,8(sp)
    b740:	dc000117 	ldw	r16,4(sp)
    b744:	dec00b04 	addi	sp,sp,44
    b748:	f800283a 	ret
    b74c:	00803fc4 	movi	r2,255
    b750:	11c5803a 	cmpltu	r2,r2,r7
    b754:	100490fa 	slli	r2,r2,3
    b758:	003f9e06 	br	b5d4 <__alt_data_end+0xff00b5d4>
    b75c:	00803fc4 	movi	r2,255
    b760:	1445803a 	cmpltu	r2,r2,r17
    b764:	100490fa 	slli	r2,r2,3
    b768:	003fb206 	br	b634 <__alt_data_end+0xff00b634>
    b76c:	00804034 	movhi	r2,256
    b770:	10bfffc4 	addi	r2,r2,-1
    b774:	11808836 	bltu	r2,r6,b998 <__udivdi3+0x51c>
    b778:	00800404 	movi	r2,16
    b77c:	003f5606 	br	b4d8 <__alt_data_end+0xff00b4d8>
    b780:	30aed83a 	srl	r23,r6,r2
    b784:	3d4e983a 	sll	r7,r7,r21
    b788:	80acd83a 	srl	r22,r16,r2
    b78c:	9884d83a 	srl	r2,r19,r2
    b790:	3deeb03a 	or	r23,r7,r23
    b794:	b824d43a 	srli	r18,r23,16
    b798:	8560983a 	sll	r16,r16,r21
    b79c:	b009883a 	mov	r4,r22
    b7a0:	900b883a 	mov	r5,r18
    b7a4:	3568983a 	sll	r20,r6,r21
    b7a8:	1420b03a 	or	r16,r2,r16
    b7ac:	0001da80 	call	1da8 <__umodsi3>
    b7b0:	b009883a 	mov	r4,r22
    b7b4:	900b883a 	mov	r5,r18
    b7b8:	1023883a 	mov	r17,r2
    b7bc:	0001d440 	call	1d44 <__udivsi3>
    b7c0:	8808943a 	slli	r4,r17,16
    b7c4:	bf3fffcc 	andi	fp,r23,65535
    b7c8:	8006d43a 	srli	r3,r16,16
    b7cc:	e0a3383a 	mul	r17,fp,r2
    b7d0:	100d883a 	mov	r6,r2
    b7d4:	1906b03a 	or	r3,r3,r4
    b7d8:	1c40042e 	bgeu	r3,r17,b7ec <__udivdi3+0x370>
    b7dc:	1dc7883a 	add	r3,r3,r23
    b7e0:	10bfffc4 	addi	r2,r2,-1
    b7e4:	1dc0752e 	bgeu	r3,r23,b9bc <__udivdi3+0x540>
    b7e8:	100d883a 	mov	r6,r2
    b7ec:	1c63c83a 	sub	r17,r3,r17
    b7f0:	900b883a 	mov	r5,r18
    b7f4:	8809883a 	mov	r4,r17
    b7f8:	d9800015 	stw	r6,0(sp)
    b7fc:	0001da80 	call	1da8 <__umodsi3>
    b800:	102d883a 	mov	r22,r2
    b804:	8809883a 	mov	r4,r17
    b808:	900b883a 	mov	r5,r18
    b80c:	0001d440 	call	1d44 <__udivsi3>
    b810:	b02c943a 	slli	r22,r22,16
    b814:	e089383a 	mul	r4,fp,r2
    b818:	843fffcc 	andi	r16,r16,65535
    b81c:	85a0b03a 	or	r16,r16,r22
    b820:	d9800017 	ldw	r6,0(sp)
    b824:	8100042e 	bgeu	r16,r4,b838 <__udivdi3+0x3bc>
    b828:	85e1883a 	add	r16,r16,r23
    b82c:	10ffffc4 	addi	r3,r2,-1
    b830:	85c05e2e 	bgeu	r16,r23,b9ac <__udivdi3+0x530>
    b834:	1805883a 	mov	r2,r3
    b838:	300c943a 	slli	r6,r6,16
    b83c:	a17fffcc 	andi	r5,r20,65535
    b840:	a028d43a 	srli	r20,r20,16
    b844:	3084b03a 	or	r2,r6,r2
    b848:	10ffffcc 	andi	r3,r2,65535
    b84c:	100cd43a 	srli	r6,r2,16
    b850:	194f383a 	mul	r7,r3,r5
    b854:	1d07383a 	mul	r3,r3,r20
    b858:	314b383a 	mul	r5,r6,r5
    b85c:	3810d43a 	srli	r8,r7,16
    b860:	8121c83a 	sub	r16,r16,r4
    b864:	1947883a 	add	r3,r3,r5
    b868:	40c7883a 	add	r3,r8,r3
    b86c:	350d383a 	mul	r6,r6,r20
    b870:	1940022e 	bgeu	r3,r5,b87c <__udivdi3+0x400>
    b874:	01000074 	movhi	r4,1
    b878:	310d883a 	add	r6,r6,r4
    b87c:	1828d43a 	srli	r20,r3,16
    b880:	a18d883a 	add	r6,r20,r6
    b884:	81803e36 	bltu	r16,r6,b980 <__udivdi3+0x504>
    b888:	81803826 	beq	r16,r6,b96c <__udivdi3+0x4f0>
    b88c:	0007883a 	mov	r3,zero
    b890:	003fa206 	br	b71c <__alt_data_end+0xff00b71c>
    b894:	88e2983a 	sll	r17,r17,r3
    b898:	80a8d83a 	srl	r20,r16,r2
    b89c:	80e0983a 	sll	r16,r16,r3
    b8a0:	882ad43a 	srli	r21,r17,16
    b8a4:	9884d83a 	srl	r2,r19,r2
    b8a8:	a009883a 	mov	r4,r20
    b8ac:	a80b883a 	mov	r5,r21
    b8b0:	142eb03a 	or	r23,r2,r16
    b8b4:	98e4983a 	sll	r18,r19,r3
    b8b8:	0001da80 	call	1da8 <__umodsi3>
    b8bc:	a009883a 	mov	r4,r20
    b8c0:	a80b883a 	mov	r5,r21
    b8c4:	1021883a 	mov	r16,r2
    b8c8:	0001d440 	call	1d44 <__udivsi3>
    b8cc:	1039883a 	mov	fp,r2
    b8d0:	8d3fffcc 	andi	r20,r17,65535
    b8d4:	8020943a 	slli	r16,r16,16
    b8d8:	b804d43a 	srli	r2,r23,16
    b8dc:	a72d383a 	mul	r22,r20,fp
    b8e0:	1404b03a 	or	r2,r2,r16
    b8e4:	1580062e 	bgeu	r2,r22,b900 <__udivdi3+0x484>
    b8e8:	1445883a 	add	r2,r2,r17
    b8ec:	e0ffffc4 	addi	r3,fp,-1
    b8f0:	14403836 	bltu	r2,r17,b9d4 <__udivdi3+0x558>
    b8f4:	1580372e 	bgeu	r2,r22,b9d4 <__udivdi3+0x558>
    b8f8:	e73fff84 	addi	fp,fp,-2
    b8fc:	1445883a 	add	r2,r2,r17
    b900:	15adc83a 	sub	r22,r2,r22
    b904:	a80b883a 	mov	r5,r21
    b908:	b009883a 	mov	r4,r22
    b90c:	0001da80 	call	1da8 <__umodsi3>
    b910:	1027883a 	mov	r19,r2
    b914:	b009883a 	mov	r4,r22
    b918:	a80b883a 	mov	r5,r21
    b91c:	0001d440 	call	1d44 <__udivsi3>
    b920:	9826943a 	slli	r19,r19,16
    b924:	a0a1383a 	mul	r16,r20,r2
    b928:	b93fffcc 	andi	r4,r23,65535
    b92c:	24c8b03a 	or	r4,r4,r19
    b930:	2400062e 	bgeu	r4,r16,b94c <__udivdi3+0x4d0>
    b934:	2449883a 	add	r4,r4,r17
    b938:	10ffffc4 	addi	r3,r2,-1
    b93c:	24402336 	bltu	r4,r17,b9cc <__udivdi3+0x550>
    b940:	2400222e 	bgeu	r4,r16,b9cc <__udivdi3+0x550>
    b944:	10bfff84 	addi	r2,r2,-2
    b948:	2449883a 	add	r4,r4,r17
    b94c:	e038943a 	slli	fp,fp,16
    b950:	2421c83a 	sub	r16,r4,r16
    b954:	e086b03a 	or	r3,fp,r2
    b958:	003f4306 	br	b668 <__alt_data_end+0xff00b668>
    b95c:	2005883a 	mov	r2,r4
    b960:	003f6906 	br	b708 <__alt_data_end+0xff00b708>
    b964:	1805883a 	mov	r2,r3
    b968:	003f0f06 	br	b5a8 <__alt_data_end+0xff00b5a8>
    b96c:	1806943a 	slli	r3,r3,16
    b970:	9d66983a 	sll	r19,r19,r21
    b974:	39ffffcc 	andi	r7,r7,65535
    b978:	19c7883a 	add	r3,r3,r7
    b97c:	98ffc32e 	bgeu	r19,r3,b88c <__alt_data_end+0xff00b88c>
    b980:	10bfffc4 	addi	r2,r2,-1
    b984:	003fc106 	br	b88c <__alt_data_end+0xff00b88c>
    b988:	00800604 	movi	r2,24
    b98c:	003f1106 	br	b5d4 <__alt_data_end+0xff00b5d4>
    b990:	00800604 	movi	r2,24
    b994:	003f2706 	br	b634 <__alt_data_end+0xff00b634>
    b998:	00800604 	movi	r2,24
    b99c:	003ece06 	br	b4d8 <__alt_data_end+0xff00b4d8>
    b9a0:	0007883a 	mov	r3,zero
    b9a4:	00800044 	movi	r2,1
    b9a8:	003f5c06 	br	b71c <__alt_data_end+0xff00b71c>
    b9ac:	813fa12e 	bgeu	r16,r4,b834 <__alt_data_end+0xff00b834>
    b9b0:	10bfff84 	addi	r2,r2,-2
    b9b4:	85e1883a 	add	r16,r16,r23
    b9b8:	003f9f06 	br	b838 <__alt_data_end+0xff00b838>
    b9bc:	1c7f8a2e 	bgeu	r3,r17,b7e8 <__alt_data_end+0xff00b7e8>
    b9c0:	31bfff84 	addi	r6,r6,-2
    b9c4:	1dc7883a 	add	r3,r3,r23
    b9c8:	003f8806 	br	b7ec <__alt_data_end+0xff00b7ec>
    b9cc:	1805883a 	mov	r2,r3
    b9d0:	003fde06 	br	b94c <__alt_data_end+0xff00b94c>
    b9d4:	1839883a 	mov	fp,r3
    b9d8:	003fc906 	br	b900 <__alt_data_end+0xff00b900>
    b9dc:	b5bfff84 	addi	r22,r22,-2
    b9e0:	2449883a 	add	r4,r4,r17
    b9e4:	003f3406 	br	b6b8 <__alt_data_end+0xff00b6b8>
    b9e8:	b5bfff84 	addi	r22,r22,-2
    b9ec:	1445883a 	add	r2,r2,r17
    b9f0:	003edb06 	br	b560 <__alt_data_end+0xff00b560>

0000b9f4 <__umoddi3>:
    b9f4:	defff404 	addi	sp,sp,-48
    b9f8:	df000a15 	stw	fp,40(sp)
    b9fc:	dc400315 	stw	r17,12(sp)
    ba00:	dc000215 	stw	r16,8(sp)
    ba04:	dfc00b15 	stw	ra,44(sp)
    ba08:	ddc00915 	stw	r23,36(sp)
    ba0c:	dd800815 	stw	r22,32(sp)
    ba10:	dd400715 	stw	r21,28(sp)
    ba14:	dd000615 	stw	r20,24(sp)
    ba18:	dcc00515 	stw	r19,20(sp)
    ba1c:	dc800415 	stw	r18,16(sp)
    ba20:	2021883a 	mov	r16,r4
    ba24:	2823883a 	mov	r17,r5
    ba28:	2839883a 	mov	fp,r5
    ba2c:	38003c1e 	bne	r7,zero,bb20 <__umoddi3+0x12c>
    ba30:	3027883a 	mov	r19,r6
    ba34:	2029883a 	mov	r20,r4
    ba38:	2980512e 	bgeu	r5,r6,bb80 <__umoddi3+0x18c>
    ba3c:	00bfffd4 	movui	r2,65535
    ba40:	11809a36 	bltu	r2,r6,bcac <__umoddi3+0x2b8>
    ba44:	01003fc4 	movi	r4,255
    ba48:	2189803a 	cmpltu	r4,r4,r6
    ba4c:	200890fa 	slli	r4,r4,3
    ba50:	3104d83a 	srl	r2,r6,r4
    ba54:	00c00074 	movhi	r3,1
    ba58:	18c15b04 	addi	r3,r3,1388
    ba5c:	1885883a 	add	r2,r3,r2
    ba60:	10c00003 	ldbu	r3,0(r2)
    ba64:	00800804 	movi	r2,32
    ba68:	1909883a 	add	r4,r3,r4
    ba6c:	1125c83a 	sub	r18,r2,r4
    ba70:	90000526 	beq	r18,zero,ba88 <__umoddi3+0x94>
    ba74:	8ca2983a 	sll	r17,r17,r18
    ba78:	8108d83a 	srl	r4,r16,r4
    ba7c:	34a6983a 	sll	r19,r6,r18
    ba80:	84a8983a 	sll	r20,r16,r18
    ba84:	2478b03a 	or	fp,r4,r17
    ba88:	982ed43a 	srli	r23,r19,16
    ba8c:	e009883a 	mov	r4,fp
    ba90:	9dbfffcc 	andi	r22,r19,65535
    ba94:	b80b883a 	mov	r5,r23
    ba98:	0001da80 	call	1da8 <__umodsi3>
    ba9c:	e009883a 	mov	r4,fp
    baa0:	b80b883a 	mov	r5,r23
    baa4:	102b883a 	mov	r21,r2
    baa8:	0001d440 	call	1d44 <__udivsi3>
    baac:	a806943a 	slli	r3,r21,16
    bab0:	a008d43a 	srli	r4,r20,16
    bab4:	b085383a 	mul	r2,r22,r2
    bab8:	20c8b03a 	or	r4,r4,r3
    babc:	2080032e 	bgeu	r4,r2,bacc <__umoddi3+0xd8>
    bac0:	24c9883a 	add	r4,r4,r19
    bac4:	24c00136 	bltu	r4,r19,bacc <__umoddi3+0xd8>
    bac8:	20811036 	bltu	r4,r2,bf0c <__umoddi3+0x518>
    bacc:	20abc83a 	sub	r21,r4,r2
    bad0:	b80b883a 	mov	r5,r23
    bad4:	a809883a 	mov	r4,r21
    bad8:	0001da80 	call	1da8 <__umodsi3>
    badc:	1023883a 	mov	r17,r2
    bae0:	b80b883a 	mov	r5,r23
    bae4:	a809883a 	mov	r4,r21
    bae8:	0001d440 	call	1d44 <__udivsi3>
    baec:	8822943a 	slli	r17,r17,16
    baf0:	b085383a 	mul	r2,r22,r2
    baf4:	a0ffffcc 	andi	r3,r20,65535
    baf8:	1c46b03a 	or	r3,r3,r17
    bafc:	1880042e 	bgeu	r3,r2,bb10 <__umoddi3+0x11c>
    bb00:	1cc7883a 	add	r3,r3,r19
    bb04:	1cc00236 	bltu	r3,r19,bb10 <__umoddi3+0x11c>
    bb08:	1880012e 	bgeu	r3,r2,bb10 <__umoddi3+0x11c>
    bb0c:	1cc7883a 	add	r3,r3,r19
    bb10:	1885c83a 	sub	r2,r3,r2
    bb14:	1484d83a 	srl	r2,r2,r18
    bb18:	0007883a 	mov	r3,zero
    bb1c:	00004f06 	br	bc5c <__umoddi3+0x268>
    bb20:	29c04c36 	bltu	r5,r7,bc54 <__umoddi3+0x260>
    bb24:	00bfffd4 	movui	r2,65535
    bb28:	11c0582e 	bgeu	r2,r7,bc8c <__umoddi3+0x298>
    bb2c:	00804034 	movhi	r2,256
    bb30:	10bfffc4 	addi	r2,r2,-1
    bb34:	11c0e736 	bltu	r2,r7,bed4 <__umoddi3+0x4e0>
    bb38:	01000404 	movi	r4,16
    bb3c:	3904d83a 	srl	r2,r7,r4
    bb40:	00c00074 	movhi	r3,1
    bb44:	18c15b04 	addi	r3,r3,1388
    bb48:	1885883a 	add	r2,r3,r2
    bb4c:	14c00003 	ldbu	r19,0(r2)
    bb50:	00c00804 	movi	r3,32
    bb54:	9927883a 	add	r19,r19,r4
    bb58:	1ce9c83a 	sub	r20,r3,r19
    bb5c:	a000581e 	bne	r20,zero,bcc0 <__umoddi3+0x2cc>
    bb60:	3c400136 	bltu	r7,r17,bb68 <__umoddi3+0x174>
    bb64:	8180eb36 	bltu	r16,r6,bf14 <__umoddi3+0x520>
    bb68:	8185c83a 	sub	r2,r16,r6
    bb6c:	89e3c83a 	sub	r17,r17,r7
    bb70:	8089803a 	cmpltu	r4,r16,r2
    bb74:	8939c83a 	sub	fp,r17,r4
    bb78:	e007883a 	mov	r3,fp
    bb7c:	00003706 	br	bc5c <__umoddi3+0x268>
    bb80:	3000041e 	bne	r6,zero,bb94 <__umoddi3+0x1a0>
    bb84:	000b883a 	mov	r5,zero
    bb88:	01000044 	movi	r4,1
    bb8c:	0001d440 	call	1d44 <__udivsi3>
    bb90:	1027883a 	mov	r19,r2
    bb94:	00bfffd4 	movui	r2,65535
    bb98:	14c0402e 	bgeu	r2,r19,bc9c <__umoddi3+0x2a8>
    bb9c:	00804034 	movhi	r2,256
    bba0:	10bfffc4 	addi	r2,r2,-1
    bba4:	14c0cd36 	bltu	r2,r19,bedc <__umoddi3+0x4e8>
    bba8:	00800404 	movi	r2,16
    bbac:	9886d83a 	srl	r3,r19,r2
    bbb0:	01000074 	movhi	r4,1
    bbb4:	21015b04 	addi	r4,r4,1388
    bbb8:	20c7883a 	add	r3,r4,r3
    bbbc:	18c00003 	ldbu	r3,0(r3)
    bbc0:	1887883a 	add	r3,r3,r2
    bbc4:	00800804 	movi	r2,32
    bbc8:	10e5c83a 	sub	r18,r2,r3
    bbcc:	9000901e 	bne	r18,zero,be10 <__umoddi3+0x41c>
    bbd0:	982cd43a 	srli	r22,r19,16
    bbd4:	8ce3c83a 	sub	r17,r17,r19
    bbd8:	9d7fffcc 	andi	r21,r19,65535
    bbdc:	b00b883a 	mov	r5,r22
    bbe0:	8809883a 	mov	r4,r17
    bbe4:	0001da80 	call	1da8 <__umodsi3>
    bbe8:	8809883a 	mov	r4,r17
    bbec:	b00b883a 	mov	r5,r22
    bbf0:	1021883a 	mov	r16,r2
    bbf4:	0001d440 	call	1d44 <__udivsi3>
    bbf8:	8006943a 	slli	r3,r16,16
    bbfc:	a008d43a 	srli	r4,r20,16
    bc00:	1545383a 	mul	r2,r2,r21
    bc04:	20c8b03a 	or	r4,r4,r3
    bc08:	2080042e 	bgeu	r4,r2,bc1c <__umoddi3+0x228>
    bc0c:	24c9883a 	add	r4,r4,r19
    bc10:	24c00236 	bltu	r4,r19,bc1c <__umoddi3+0x228>
    bc14:	2080012e 	bgeu	r4,r2,bc1c <__umoddi3+0x228>
    bc18:	24c9883a 	add	r4,r4,r19
    bc1c:	20a1c83a 	sub	r16,r4,r2
    bc20:	b00b883a 	mov	r5,r22
    bc24:	8009883a 	mov	r4,r16
    bc28:	0001da80 	call	1da8 <__umodsi3>
    bc2c:	1023883a 	mov	r17,r2
    bc30:	b00b883a 	mov	r5,r22
    bc34:	8009883a 	mov	r4,r16
    bc38:	0001d440 	call	1d44 <__udivsi3>
    bc3c:	8822943a 	slli	r17,r17,16
    bc40:	1545383a 	mul	r2,r2,r21
    bc44:	a53fffcc 	andi	r20,r20,65535
    bc48:	a446b03a 	or	r3,r20,r17
    bc4c:	18bfb02e 	bgeu	r3,r2,bb10 <__alt_data_end+0xff00bb10>
    bc50:	003fab06 	br	bb00 <__alt_data_end+0xff00bb00>
    bc54:	2005883a 	mov	r2,r4
    bc58:	2807883a 	mov	r3,r5
    bc5c:	dfc00b17 	ldw	ra,44(sp)
    bc60:	df000a17 	ldw	fp,40(sp)
    bc64:	ddc00917 	ldw	r23,36(sp)
    bc68:	dd800817 	ldw	r22,32(sp)
    bc6c:	dd400717 	ldw	r21,28(sp)
    bc70:	dd000617 	ldw	r20,24(sp)
    bc74:	dcc00517 	ldw	r19,20(sp)
    bc78:	dc800417 	ldw	r18,16(sp)
    bc7c:	dc400317 	ldw	r17,12(sp)
    bc80:	dc000217 	ldw	r16,8(sp)
    bc84:	dec00c04 	addi	sp,sp,48
    bc88:	f800283a 	ret
    bc8c:	04c03fc4 	movi	r19,255
    bc90:	99c9803a 	cmpltu	r4,r19,r7
    bc94:	200890fa 	slli	r4,r4,3
    bc98:	003fa806 	br	bb3c <__alt_data_end+0xff00bb3c>
    bc9c:	00803fc4 	movi	r2,255
    bca0:	14c5803a 	cmpltu	r2,r2,r19
    bca4:	100490fa 	slli	r2,r2,3
    bca8:	003fc006 	br	bbac <__alt_data_end+0xff00bbac>
    bcac:	00804034 	movhi	r2,256
    bcb0:	10bfffc4 	addi	r2,r2,-1
    bcb4:	11808b36 	bltu	r2,r6,bee4 <__umoddi3+0x4f0>
    bcb8:	01000404 	movi	r4,16
    bcbc:	003f6406 	br	ba50 <__alt_data_end+0xff00ba50>
    bcc0:	34c4d83a 	srl	r2,r6,r19
    bcc4:	3d0e983a 	sll	r7,r7,r20
    bcc8:	8cf8d83a 	srl	fp,r17,r19
    bccc:	8d10983a 	sll	r8,r17,r20
    bcd0:	38aab03a 	or	r21,r7,r2
    bcd4:	a82cd43a 	srli	r22,r21,16
    bcd8:	84e2d83a 	srl	r17,r16,r19
    bcdc:	e009883a 	mov	r4,fp
    bce0:	b00b883a 	mov	r5,r22
    bce4:	8a22b03a 	or	r17,r17,r8
    bce8:	3524983a 	sll	r18,r6,r20
    bcec:	0001da80 	call	1da8 <__umodsi3>
    bcf0:	e009883a 	mov	r4,fp
    bcf4:	b00b883a 	mov	r5,r22
    bcf8:	102f883a 	mov	r23,r2
    bcfc:	0001d440 	call	1d44 <__udivsi3>
    bd00:	100d883a 	mov	r6,r2
    bd04:	b808943a 	slli	r4,r23,16
    bd08:	aa3fffcc 	andi	r8,r21,65535
    bd0c:	8804d43a 	srli	r2,r17,16
    bd10:	41af383a 	mul	r23,r8,r6
    bd14:	8520983a 	sll	r16,r16,r20
    bd18:	1104b03a 	or	r2,r2,r4
    bd1c:	15c0042e 	bgeu	r2,r23,bd30 <__umoddi3+0x33c>
    bd20:	1545883a 	add	r2,r2,r21
    bd24:	30ffffc4 	addi	r3,r6,-1
    bd28:	1540742e 	bgeu	r2,r21,befc <__umoddi3+0x508>
    bd2c:	180d883a 	mov	r6,r3
    bd30:	15efc83a 	sub	r23,r2,r23
    bd34:	b00b883a 	mov	r5,r22
    bd38:	b809883a 	mov	r4,r23
    bd3c:	d9800115 	stw	r6,4(sp)
    bd40:	da000015 	stw	r8,0(sp)
    bd44:	0001da80 	call	1da8 <__umodsi3>
    bd48:	b00b883a 	mov	r5,r22
    bd4c:	b809883a 	mov	r4,r23
    bd50:	1039883a 	mov	fp,r2
    bd54:	0001d440 	call	1d44 <__udivsi3>
    bd58:	da000017 	ldw	r8,0(sp)
    bd5c:	e038943a 	slli	fp,fp,16
    bd60:	100b883a 	mov	r5,r2
    bd64:	4089383a 	mul	r4,r8,r2
    bd68:	8a3fffcc 	andi	r8,r17,65535
    bd6c:	4710b03a 	or	r8,r8,fp
    bd70:	d9800117 	ldw	r6,4(sp)
    bd74:	4100042e 	bgeu	r8,r4,bd88 <__umoddi3+0x394>
    bd78:	4551883a 	add	r8,r8,r21
    bd7c:	10bfffc4 	addi	r2,r2,-1
    bd80:	45405a2e 	bgeu	r8,r21,beec <__umoddi3+0x4f8>
    bd84:	100b883a 	mov	r5,r2
    bd88:	300c943a 	slli	r6,r6,16
    bd8c:	91ffffcc 	andi	r7,r18,65535
    bd90:	9004d43a 	srli	r2,r18,16
    bd94:	314cb03a 	or	r6,r6,r5
    bd98:	317fffcc 	andi	r5,r6,65535
    bd9c:	300cd43a 	srli	r6,r6,16
    bda0:	29d3383a 	mul	r9,r5,r7
    bda4:	288b383a 	mul	r5,r5,r2
    bda8:	31cf383a 	mul	r7,r6,r7
    bdac:	4806d43a 	srli	r3,r9,16
    bdb0:	4111c83a 	sub	r8,r8,r4
    bdb4:	29cb883a 	add	r5,r5,r7
    bdb8:	194b883a 	add	r5,r3,r5
    bdbc:	3085383a 	mul	r2,r6,r2
    bdc0:	29c0022e 	bgeu	r5,r7,bdcc <__umoddi3+0x3d8>
    bdc4:	00c00074 	movhi	r3,1
    bdc8:	10c5883a 	add	r2,r2,r3
    bdcc:	2808d43a 	srli	r4,r5,16
    bdd0:	280a943a 	slli	r5,r5,16
    bdd4:	4a7fffcc 	andi	r9,r9,65535
    bdd8:	2085883a 	add	r2,r4,r2
    bddc:	2a4b883a 	add	r5,r5,r9
    bde0:	40803636 	bltu	r8,r2,bebc <__umoddi3+0x4c8>
    bde4:	40804d26 	beq	r8,r2,bf1c <__umoddi3+0x528>
    bde8:	4089c83a 	sub	r4,r8,r2
    bdec:	280f883a 	mov	r7,r5
    bdf0:	81cfc83a 	sub	r7,r16,r7
    bdf4:	81c7803a 	cmpltu	r3,r16,r7
    bdf8:	20c7c83a 	sub	r3,r4,r3
    bdfc:	1cc4983a 	sll	r2,r3,r19
    be00:	3d0ed83a 	srl	r7,r7,r20
    be04:	1d06d83a 	srl	r3,r3,r20
    be08:	11c4b03a 	or	r2,r2,r7
    be0c:	003f9306 	br	bc5c <__alt_data_end+0xff00bc5c>
    be10:	9ca6983a 	sll	r19,r19,r18
    be14:	88e8d83a 	srl	r20,r17,r3
    be18:	80c4d83a 	srl	r2,r16,r3
    be1c:	982cd43a 	srli	r22,r19,16
    be20:	8ca2983a 	sll	r17,r17,r18
    be24:	a009883a 	mov	r4,r20
    be28:	b00b883a 	mov	r5,r22
    be2c:	1478b03a 	or	fp,r2,r17
    be30:	0001da80 	call	1da8 <__umodsi3>
    be34:	a009883a 	mov	r4,r20
    be38:	b00b883a 	mov	r5,r22
    be3c:	1023883a 	mov	r17,r2
    be40:	0001d440 	call	1d44 <__udivsi3>
    be44:	9d7fffcc 	andi	r21,r19,65535
    be48:	880a943a 	slli	r5,r17,16
    be4c:	e008d43a 	srli	r4,fp,16
    be50:	a885383a 	mul	r2,r21,r2
    be54:	84a8983a 	sll	r20,r16,r18
    be58:	2148b03a 	or	r4,r4,r5
    be5c:	2080042e 	bgeu	r4,r2,be70 <__umoddi3+0x47c>
    be60:	24c9883a 	add	r4,r4,r19
    be64:	24c00236 	bltu	r4,r19,be70 <__umoddi3+0x47c>
    be68:	2080012e 	bgeu	r4,r2,be70 <__umoddi3+0x47c>
    be6c:	24c9883a 	add	r4,r4,r19
    be70:	20a3c83a 	sub	r17,r4,r2
    be74:	b00b883a 	mov	r5,r22
    be78:	8809883a 	mov	r4,r17
    be7c:	0001da80 	call	1da8 <__umodsi3>
    be80:	102f883a 	mov	r23,r2
    be84:	8809883a 	mov	r4,r17
    be88:	b00b883a 	mov	r5,r22
    be8c:	0001d440 	call	1d44 <__udivsi3>
    be90:	b82e943a 	slli	r23,r23,16
    be94:	a885383a 	mul	r2,r21,r2
    be98:	e13fffcc 	andi	r4,fp,65535
    be9c:	25c8b03a 	or	r4,r4,r23
    bea0:	2080042e 	bgeu	r4,r2,beb4 <__umoddi3+0x4c0>
    bea4:	24c9883a 	add	r4,r4,r19
    bea8:	24c00236 	bltu	r4,r19,beb4 <__umoddi3+0x4c0>
    beac:	2080012e 	bgeu	r4,r2,beb4 <__umoddi3+0x4c0>
    beb0:	24c9883a 	add	r4,r4,r19
    beb4:	20a3c83a 	sub	r17,r4,r2
    beb8:	003f4806 	br	bbdc <__alt_data_end+0xff00bbdc>
    bebc:	2c8fc83a 	sub	r7,r5,r18
    bec0:	1545c83a 	sub	r2,r2,r21
    bec4:	29cb803a 	cmpltu	r5,r5,r7
    bec8:	1145c83a 	sub	r2,r2,r5
    becc:	4089c83a 	sub	r4,r8,r2
    bed0:	003fc706 	br	bdf0 <__alt_data_end+0xff00bdf0>
    bed4:	01000604 	movi	r4,24
    bed8:	003f1806 	br	bb3c <__alt_data_end+0xff00bb3c>
    bedc:	00800604 	movi	r2,24
    bee0:	003f3206 	br	bbac <__alt_data_end+0xff00bbac>
    bee4:	01000604 	movi	r4,24
    bee8:	003ed906 	br	ba50 <__alt_data_end+0xff00ba50>
    beec:	413fa52e 	bgeu	r8,r4,bd84 <__alt_data_end+0xff00bd84>
    bef0:	297fff84 	addi	r5,r5,-2
    bef4:	4551883a 	add	r8,r8,r21
    bef8:	003fa306 	br	bd88 <__alt_data_end+0xff00bd88>
    befc:	15ff8b2e 	bgeu	r2,r23,bd2c <__alt_data_end+0xff00bd2c>
    bf00:	31bfff84 	addi	r6,r6,-2
    bf04:	1545883a 	add	r2,r2,r21
    bf08:	003f8906 	br	bd30 <__alt_data_end+0xff00bd30>
    bf0c:	24c9883a 	add	r4,r4,r19
    bf10:	003eee06 	br	bacc <__alt_data_end+0xff00bacc>
    bf14:	8005883a 	mov	r2,r16
    bf18:	003f1706 	br	bb78 <__alt_data_end+0xff00bb78>
    bf1c:	817fe736 	bltu	r16,r5,bebc <__alt_data_end+0xff00bebc>
    bf20:	280f883a 	mov	r7,r5
    bf24:	0009883a 	mov	r4,zero
    bf28:	003fb106 	br	bdf0 <__alt_data_end+0xff00bdf0>

0000bf2c <__adddf3>:
    bf2c:	02c00434 	movhi	r11,16
    bf30:	5affffc4 	addi	r11,r11,-1
    bf34:	2806d7fa 	srli	r3,r5,31
    bf38:	2ad4703a 	and	r10,r5,r11
    bf3c:	3ad2703a 	and	r9,r7,r11
    bf40:	3804d53a 	srli	r2,r7,20
    bf44:	3018d77a 	srli	r12,r6,29
    bf48:	280ad53a 	srli	r5,r5,20
    bf4c:	501490fa 	slli	r10,r10,3
    bf50:	2010d77a 	srli	r8,r4,29
    bf54:	481290fa 	slli	r9,r9,3
    bf58:	380ed7fa 	srli	r7,r7,31
    bf5c:	defffb04 	addi	sp,sp,-20
    bf60:	dc800215 	stw	r18,8(sp)
    bf64:	dc400115 	stw	r17,4(sp)
    bf68:	dc000015 	stw	r16,0(sp)
    bf6c:	dfc00415 	stw	ra,16(sp)
    bf70:	dcc00315 	stw	r19,12(sp)
    bf74:	1c803fcc 	andi	r18,r3,255
    bf78:	2c01ffcc 	andi	r16,r5,2047
    bf7c:	5210b03a 	or	r8,r10,r8
    bf80:	202290fa 	slli	r17,r4,3
    bf84:	1081ffcc 	andi	r2,r2,2047
    bf88:	4b12b03a 	or	r9,r9,r12
    bf8c:	300c90fa 	slli	r6,r6,3
    bf90:	91c07526 	beq	r18,r7,c168 <__adddf3+0x23c>
    bf94:	8087c83a 	sub	r3,r16,r2
    bf98:	00c0ab0e 	bge	zero,r3,c248 <__adddf3+0x31c>
    bf9c:	10002a1e 	bne	r2,zero,c048 <__adddf3+0x11c>
    bfa0:	4984b03a 	or	r2,r9,r6
    bfa4:	1000961e 	bne	r2,zero,c200 <__adddf3+0x2d4>
    bfa8:	888001cc 	andi	r2,r17,7
    bfac:	10000726 	beq	r2,zero,bfcc <__adddf3+0xa0>
    bfb0:	888003cc 	andi	r2,r17,15
    bfb4:	00c00104 	movi	r3,4
    bfb8:	10c00426 	beq	r2,r3,bfcc <__adddf3+0xa0>
    bfbc:	88c7883a 	add	r3,r17,r3
    bfc0:	1c63803a 	cmpltu	r17,r3,r17
    bfc4:	4451883a 	add	r8,r8,r17
    bfc8:	1823883a 	mov	r17,r3
    bfcc:	4080202c 	andhi	r2,r8,128
    bfd0:	10005926 	beq	r2,zero,c138 <__adddf3+0x20c>
    bfd4:	84000044 	addi	r16,r16,1
    bfd8:	0081ffc4 	movi	r2,2047
    bfdc:	8080ba26 	beq	r16,r2,c2c8 <__adddf3+0x39c>
    bfe0:	00bfe034 	movhi	r2,65408
    bfe4:	10bfffc4 	addi	r2,r2,-1
    bfe8:	4090703a 	and	r8,r8,r2
    bfec:	4004977a 	slli	r2,r8,29
    bff0:	4010927a 	slli	r8,r8,9
    bff4:	8822d0fa 	srli	r17,r17,3
    bff8:	8401ffcc 	andi	r16,r16,2047
    bffc:	4010d33a 	srli	r8,r8,12
    c000:	9007883a 	mov	r3,r18
    c004:	1444b03a 	or	r2,r2,r17
    c008:	8401ffcc 	andi	r16,r16,2047
    c00c:	8020953a 	slli	r16,r16,20
    c010:	18c03fcc 	andi	r3,r3,255
    c014:	01000434 	movhi	r4,16
    c018:	213fffc4 	addi	r4,r4,-1
    c01c:	180697fa 	slli	r3,r3,31
    c020:	4110703a 	and	r8,r8,r4
    c024:	4410b03a 	or	r8,r8,r16
    c028:	40c6b03a 	or	r3,r8,r3
    c02c:	dfc00417 	ldw	ra,16(sp)
    c030:	dcc00317 	ldw	r19,12(sp)
    c034:	dc800217 	ldw	r18,8(sp)
    c038:	dc400117 	ldw	r17,4(sp)
    c03c:	dc000017 	ldw	r16,0(sp)
    c040:	dec00504 	addi	sp,sp,20
    c044:	f800283a 	ret
    c048:	0081ffc4 	movi	r2,2047
    c04c:	80bfd626 	beq	r16,r2,bfa8 <__alt_data_end+0xff00bfa8>
    c050:	4a402034 	orhi	r9,r9,128
    c054:	00800e04 	movi	r2,56
    c058:	10c09f16 	blt	r2,r3,c2d8 <__adddf3+0x3ac>
    c05c:	008007c4 	movi	r2,31
    c060:	10c0c216 	blt	r2,r3,c36c <__adddf3+0x440>
    c064:	00800804 	movi	r2,32
    c068:	10c5c83a 	sub	r2,r2,r3
    c06c:	488a983a 	sll	r5,r9,r2
    c070:	30c8d83a 	srl	r4,r6,r3
    c074:	3084983a 	sll	r2,r6,r2
    c078:	48c6d83a 	srl	r3,r9,r3
    c07c:	290cb03a 	or	r6,r5,r4
    c080:	1004c03a 	cmpne	r2,r2,zero
    c084:	308cb03a 	or	r6,r6,r2
    c088:	898dc83a 	sub	r6,r17,r6
    c08c:	89a3803a 	cmpltu	r17,r17,r6
    c090:	40d1c83a 	sub	r8,r8,r3
    c094:	4451c83a 	sub	r8,r8,r17
    c098:	3023883a 	mov	r17,r6
    c09c:	4080202c 	andhi	r2,r8,128
    c0a0:	10002326 	beq	r2,zero,c130 <__adddf3+0x204>
    c0a4:	04c02034 	movhi	r19,128
    c0a8:	9cffffc4 	addi	r19,r19,-1
    c0ac:	44e6703a 	and	r19,r8,r19
    c0b0:	98007626 	beq	r19,zero,c28c <__adddf3+0x360>
    c0b4:	9809883a 	mov	r4,r19
    c0b8:	000e5300 	call	e530 <__clzsi2>
    c0bc:	10fffe04 	addi	r3,r2,-8
    c0c0:	010007c4 	movi	r4,31
    c0c4:	20c07716 	blt	r4,r3,c2a4 <__adddf3+0x378>
    c0c8:	00800804 	movi	r2,32
    c0cc:	10c5c83a 	sub	r2,r2,r3
    c0d0:	8884d83a 	srl	r2,r17,r2
    c0d4:	98d0983a 	sll	r8,r19,r3
    c0d8:	88e2983a 	sll	r17,r17,r3
    c0dc:	1204b03a 	or	r2,r2,r8
    c0e0:	1c007416 	blt	r3,r16,c2b4 <__adddf3+0x388>
    c0e4:	1c21c83a 	sub	r16,r3,r16
    c0e8:	82000044 	addi	r8,r16,1
    c0ec:	00c007c4 	movi	r3,31
    c0f0:	1a009116 	blt	r3,r8,c338 <__adddf3+0x40c>
    c0f4:	00c00804 	movi	r3,32
    c0f8:	1a07c83a 	sub	r3,r3,r8
    c0fc:	8a08d83a 	srl	r4,r17,r8
    c100:	88e2983a 	sll	r17,r17,r3
    c104:	10c6983a 	sll	r3,r2,r3
    c108:	1210d83a 	srl	r8,r2,r8
    c10c:	8804c03a 	cmpne	r2,r17,zero
    c110:	1906b03a 	or	r3,r3,r4
    c114:	18a2b03a 	or	r17,r3,r2
    c118:	0021883a 	mov	r16,zero
    c11c:	003fa206 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c120:	1890b03a 	or	r8,r3,r2
    c124:	40017d26 	beq	r8,zero,c71c <__adddf3+0x7f0>
    c128:	1011883a 	mov	r8,r2
    c12c:	1823883a 	mov	r17,r3
    c130:	888001cc 	andi	r2,r17,7
    c134:	103f9e1e 	bne	r2,zero,bfb0 <__alt_data_end+0xff00bfb0>
    c138:	4004977a 	slli	r2,r8,29
    c13c:	8822d0fa 	srli	r17,r17,3
    c140:	4010d0fa 	srli	r8,r8,3
    c144:	9007883a 	mov	r3,r18
    c148:	1444b03a 	or	r2,r2,r17
    c14c:	0101ffc4 	movi	r4,2047
    c150:	81002426 	beq	r16,r4,c1e4 <__adddf3+0x2b8>
    c154:	8120703a 	and	r16,r16,r4
    c158:	01000434 	movhi	r4,16
    c15c:	213fffc4 	addi	r4,r4,-1
    c160:	4110703a 	and	r8,r8,r4
    c164:	003fa806 	br	c008 <__alt_data_end+0xff00c008>
    c168:	8089c83a 	sub	r4,r16,r2
    c16c:	01005e0e 	bge	zero,r4,c2e8 <__adddf3+0x3bc>
    c170:	10002b26 	beq	r2,zero,c220 <__adddf3+0x2f4>
    c174:	0081ffc4 	movi	r2,2047
    c178:	80bf8b26 	beq	r16,r2,bfa8 <__alt_data_end+0xff00bfa8>
    c17c:	4a402034 	orhi	r9,r9,128
    c180:	00800e04 	movi	r2,56
    c184:	1100a40e 	bge	r2,r4,c418 <__adddf3+0x4ec>
    c188:	498cb03a 	or	r6,r9,r6
    c18c:	300ac03a 	cmpne	r5,r6,zero
    c190:	0013883a 	mov	r9,zero
    c194:	2c4b883a 	add	r5,r5,r17
    c198:	2c63803a 	cmpltu	r17,r5,r17
    c19c:	4a11883a 	add	r8,r9,r8
    c1a0:	8a11883a 	add	r8,r17,r8
    c1a4:	2823883a 	mov	r17,r5
    c1a8:	4080202c 	andhi	r2,r8,128
    c1ac:	103fe026 	beq	r2,zero,c130 <__alt_data_end+0xff00c130>
    c1b0:	84000044 	addi	r16,r16,1
    c1b4:	0081ffc4 	movi	r2,2047
    c1b8:	8080d226 	beq	r16,r2,c504 <__adddf3+0x5d8>
    c1bc:	00bfe034 	movhi	r2,65408
    c1c0:	10bfffc4 	addi	r2,r2,-1
    c1c4:	4090703a 	and	r8,r8,r2
    c1c8:	880ad07a 	srli	r5,r17,1
    c1cc:	400897fa 	slli	r4,r8,31
    c1d0:	88c0004c 	andi	r3,r17,1
    c1d4:	28e2b03a 	or	r17,r5,r3
    c1d8:	4010d07a 	srli	r8,r8,1
    c1dc:	2462b03a 	or	r17,r4,r17
    c1e0:	003f7106 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c1e4:	4088b03a 	or	r4,r8,r2
    c1e8:	20014526 	beq	r4,zero,c700 <__adddf3+0x7d4>
    c1ec:	01000434 	movhi	r4,16
    c1f0:	42000234 	orhi	r8,r8,8
    c1f4:	213fffc4 	addi	r4,r4,-1
    c1f8:	4110703a 	and	r8,r8,r4
    c1fc:	003f8206 	br	c008 <__alt_data_end+0xff00c008>
    c200:	18ffffc4 	addi	r3,r3,-1
    c204:	1800491e 	bne	r3,zero,c32c <__adddf3+0x400>
    c208:	898bc83a 	sub	r5,r17,r6
    c20c:	8963803a 	cmpltu	r17,r17,r5
    c210:	4251c83a 	sub	r8,r8,r9
    c214:	4451c83a 	sub	r8,r8,r17
    c218:	2823883a 	mov	r17,r5
    c21c:	003f9f06 	br	c09c <__alt_data_end+0xff00c09c>
    c220:	4984b03a 	or	r2,r9,r6
    c224:	103f6026 	beq	r2,zero,bfa8 <__alt_data_end+0xff00bfa8>
    c228:	213fffc4 	addi	r4,r4,-1
    c22c:	2000931e 	bne	r4,zero,c47c <__adddf3+0x550>
    c230:	898d883a 	add	r6,r17,r6
    c234:	3463803a 	cmpltu	r17,r6,r17
    c238:	4251883a 	add	r8,r8,r9
    c23c:	8a11883a 	add	r8,r17,r8
    c240:	3023883a 	mov	r17,r6
    c244:	003fd806 	br	c1a8 <__alt_data_end+0xff00c1a8>
    c248:	1800541e 	bne	r3,zero,c39c <__adddf3+0x470>
    c24c:	80800044 	addi	r2,r16,1
    c250:	1081ffcc 	andi	r2,r2,2047
    c254:	00c00044 	movi	r3,1
    c258:	1880a00e 	bge	r3,r2,c4dc <__adddf3+0x5b0>
    c25c:	8989c83a 	sub	r4,r17,r6
    c260:	8905803a 	cmpltu	r2,r17,r4
    c264:	4267c83a 	sub	r19,r8,r9
    c268:	98a7c83a 	sub	r19,r19,r2
    c26c:	9880202c 	andhi	r2,r19,128
    c270:	10006326 	beq	r2,zero,c400 <__adddf3+0x4d4>
    c274:	3463c83a 	sub	r17,r6,r17
    c278:	4a07c83a 	sub	r3,r9,r8
    c27c:	344d803a 	cmpltu	r6,r6,r17
    c280:	19a7c83a 	sub	r19,r3,r6
    c284:	3825883a 	mov	r18,r7
    c288:	983f8a1e 	bne	r19,zero,c0b4 <__alt_data_end+0xff00c0b4>
    c28c:	8809883a 	mov	r4,r17
    c290:	000e5300 	call	e530 <__clzsi2>
    c294:	10800804 	addi	r2,r2,32
    c298:	10fffe04 	addi	r3,r2,-8
    c29c:	010007c4 	movi	r4,31
    c2a0:	20ff890e 	bge	r4,r3,c0c8 <__alt_data_end+0xff00c0c8>
    c2a4:	10bff604 	addi	r2,r2,-40
    c2a8:	8884983a 	sll	r2,r17,r2
    c2ac:	0023883a 	mov	r17,zero
    c2b0:	1c3f8c0e 	bge	r3,r16,c0e4 <__alt_data_end+0xff00c0e4>
    c2b4:	023fe034 	movhi	r8,65408
    c2b8:	423fffc4 	addi	r8,r8,-1
    c2bc:	80e1c83a 	sub	r16,r16,r3
    c2c0:	1210703a 	and	r8,r2,r8
    c2c4:	003f3806 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c2c8:	9007883a 	mov	r3,r18
    c2cc:	0011883a 	mov	r8,zero
    c2d0:	0005883a 	mov	r2,zero
    c2d4:	003f4c06 	br	c008 <__alt_data_end+0xff00c008>
    c2d8:	498cb03a 	or	r6,r9,r6
    c2dc:	300cc03a 	cmpne	r6,r6,zero
    c2e0:	0007883a 	mov	r3,zero
    c2e4:	003f6806 	br	c088 <__alt_data_end+0xff00c088>
    c2e8:	20009c1e 	bne	r4,zero,c55c <__adddf3+0x630>
    c2ec:	80800044 	addi	r2,r16,1
    c2f0:	1141ffcc 	andi	r5,r2,2047
    c2f4:	01000044 	movi	r4,1
    c2f8:	2140670e 	bge	r4,r5,c498 <__adddf3+0x56c>
    c2fc:	0101ffc4 	movi	r4,2047
    c300:	11007f26 	beq	r2,r4,c500 <__adddf3+0x5d4>
    c304:	898d883a 	add	r6,r17,r6
    c308:	4247883a 	add	r3,r8,r9
    c30c:	3451803a 	cmpltu	r8,r6,r17
    c310:	40d1883a 	add	r8,r8,r3
    c314:	402297fa 	slli	r17,r8,31
    c318:	300cd07a 	srli	r6,r6,1
    c31c:	4010d07a 	srli	r8,r8,1
    c320:	1021883a 	mov	r16,r2
    c324:	89a2b03a 	or	r17,r17,r6
    c328:	003f1f06 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c32c:	0081ffc4 	movi	r2,2047
    c330:	80bf481e 	bne	r16,r2,c054 <__alt_data_end+0xff00c054>
    c334:	003f1c06 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c338:	843ff844 	addi	r16,r16,-31
    c33c:	01000804 	movi	r4,32
    c340:	1406d83a 	srl	r3,r2,r16
    c344:	41005026 	beq	r8,r4,c488 <__adddf3+0x55c>
    c348:	01001004 	movi	r4,64
    c34c:	2211c83a 	sub	r8,r4,r8
    c350:	1204983a 	sll	r2,r2,r8
    c354:	88a2b03a 	or	r17,r17,r2
    c358:	8822c03a 	cmpne	r17,r17,zero
    c35c:	1c62b03a 	or	r17,r3,r17
    c360:	0011883a 	mov	r8,zero
    c364:	0021883a 	mov	r16,zero
    c368:	003f7106 	br	c130 <__alt_data_end+0xff00c130>
    c36c:	193ff804 	addi	r4,r3,-32
    c370:	00800804 	movi	r2,32
    c374:	4908d83a 	srl	r4,r9,r4
    c378:	18804526 	beq	r3,r2,c490 <__adddf3+0x564>
    c37c:	00801004 	movi	r2,64
    c380:	10c5c83a 	sub	r2,r2,r3
    c384:	4886983a 	sll	r3,r9,r2
    c388:	198cb03a 	or	r6,r3,r6
    c38c:	300cc03a 	cmpne	r6,r6,zero
    c390:	218cb03a 	or	r6,r4,r6
    c394:	0007883a 	mov	r3,zero
    c398:	003f3b06 	br	c088 <__alt_data_end+0xff00c088>
    c39c:	80002a26 	beq	r16,zero,c448 <__adddf3+0x51c>
    c3a0:	0101ffc4 	movi	r4,2047
    c3a4:	11006826 	beq	r2,r4,c548 <__adddf3+0x61c>
    c3a8:	00c7c83a 	sub	r3,zero,r3
    c3ac:	42002034 	orhi	r8,r8,128
    c3b0:	01000e04 	movi	r4,56
    c3b4:	20c07c16 	blt	r4,r3,c5a8 <__adddf3+0x67c>
    c3b8:	010007c4 	movi	r4,31
    c3bc:	20c0da16 	blt	r4,r3,c728 <__adddf3+0x7fc>
    c3c0:	01000804 	movi	r4,32
    c3c4:	20c9c83a 	sub	r4,r4,r3
    c3c8:	4114983a 	sll	r10,r8,r4
    c3cc:	88cad83a 	srl	r5,r17,r3
    c3d0:	8908983a 	sll	r4,r17,r4
    c3d4:	40c6d83a 	srl	r3,r8,r3
    c3d8:	5162b03a 	or	r17,r10,r5
    c3dc:	2008c03a 	cmpne	r4,r4,zero
    c3e0:	8922b03a 	or	r17,r17,r4
    c3e4:	3463c83a 	sub	r17,r6,r17
    c3e8:	48c7c83a 	sub	r3,r9,r3
    c3ec:	344d803a 	cmpltu	r6,r6,r17
    c3f0:	1991c83a 	sub	r8,r3,r6
    c3f4:	1021883a 	mov	r16,r2
    c3f8:	3825883a 	mov	r18,r7
    c3fc:	003f2706 	br	c09c <__alt_data_end+0xff00c09c>
    c400:	24d0b03a 	or	r8,r4,r19
    c404:	40001b1e 	bne	r8,zero,c474 <__adddf3+0x548>
    c408:	0005883a 	mov	r2,zero
    c40c:	0007883a 	mov	r3,zero
    c410:	0021883a 	mov	r16,zero
    c414:	003f4d06 	br	c14c <__alt_data_end+0xff00c14c>
    c418:	008007c4 	movi	r2,31
    c41c:	11003c16 	blt	r2,r4,c510 <__adddf3+0x5e4>
    c420:	00800804 	movi	r2,32
    c424:	1105c83a 	sub	r2,r2,r4
    c428:	488e983a 	sll	r7,r9,r2
    c42c:	310ad83a 	srl	r5,r6,r4
    c430:	3084983a 	sll	r2,r6,r2
    c434:	4912d83a 	srl	r9,r9,r4
    c438:	394ab03a 	or	r5,r7,r5
    c43c:	1004c03a 	cmpne	r2,r2,zero
    c440:	288ab03a 	or	r5,r5,r2
    c444:	003f5306 	br	c194 <__alt_data_end+0xff00c194>
    c448:	4448b03a 	or	r4,r8,r17
    c44c:	20003e26 	beq	r4,zero,c548 <__adddf3+0x61c>
    c450:	00c6303a 	nor	r3,zero,r3
    c454:	18003a1e 	bne	r3,zero,c540 <__adddf3+0x614>
    c458:	3463c83a 	sub	r17,r6,r17
    c45c:	4a07c83a 	sub	r3,r9,r8
    c460:	344d803a 	cmpltu	r6,r6,r17
    c464:	1991c83a 	sub	r8,r3,r6
    c468:	1021883a 	mov	r16,r2
    c46c:	3825883a 	mov	r18,r7
    c470:	003f0a06 	br	c09c <__alt_data_end+0xff00c09c>
    c474:	2023883a 	mov	r17,r4
    c478:	003f0d06 	br	c0b0 <__alt_data_end+0xff00c0b0>
    c47c:	0081ffc4 	movi	r2,2047
    c480:	80bf3f1e 	bne	r16,r2,c180 <__alt_data_end+0xff00c180>
    c484:	003ec806 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c488:	0005883a 	mov	r2,zero
    c48c:	003fb106 	br	c354 <__alt_data_end+0xff00c354>
    c490:	0007883a 	mov	r3,zero
    c494:	003fbc06 	br	c388 <__alt_data_end+0xff00c388>
    c498:	4444b03a 	or	r2,r8,r17
    c49c:	8000871e 	bne	r16,zero,c6bc <__adddf3+0x790>
    c4a0:	1000ba26 	beq	r2,zero,c78c <__adddf3+0x860>
    c4a4:	4984b03a 	or	r2,r9,r6
    c4a8:	103ebf26 	beq	r2,zero,bfa8 <__alt_data_end+0xff00bfa8>
    c4ac:	8985883a 	add	r2,r17,r6
    c4b0:	4247883a 	add	r3,r8,r9
    c4b4:	1451803a 	cmpltu	r8,r2,r17
    c4b8:	40d1883a 	add	r8,r8,r3
    c4bc:	40c0202c 	andhi	r3,r8,128
    c4c0:	1023883a 	mov	r17,r2
    c4c4:	183f1a26 	beq	r3,zero,c130 <__alt_data_end+0xff00c130>
    c4c8:	00bfe034 	movhi	r2,65408
    c4cc:	10bfffc4 	addi	r2,r2,-1
    c4d0:	2021883a 	mov	r16,r4
    c4d4:	4090703a 	and	r8,r8,r2
    c4d8:	003eb306 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c4dc:	4444b03a 	or	r2,r8,r17
    c4e0:	8000291e 	bne	r16,zero,c588 <__adddf3+0x65c>
    c4e4:	10004b1e 	bne	r2,zero,c614 <__adddf3+0x6e8>
    c4e8:	4990b03a 	or	r8,r9,r6
    c4ec:	40008b26 	beq	r8,zero,c71c <__adddf3+0x7f0>
    c4f0:	4811883a 	mov	r8,r9
    c4f4:	3023883a 	mov	r17,r6
    c4f8:	3825883a 	mov	r18,r7
    c4fc:	003eaa06 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c500:	1021883a 	mov	r16,r2
    c504:	0011883a 	mov	r8,zero
    c508:	0005883a 	mov	r2,zero
    c50c:	003f0f06 	br	c14c <__alt_data_end+0xff00c14c>
    c510:	217ff804 	addi	r5,r4,-32
    c514:	00800804 	movi	r2,32
    c518:	494ad83a 	srl	r5,r9,r5
    c51c:	20807d26 	beq	r4,r2,c714 <__adddf3+0x7e8>
    c520:	00801004 	movi	r2,64
    c524:	1109c83a 	sub	r4,r2,r4
    c528:	4912983a 	sll	r9,r9,r4
    c52c:	498cb03a 	or	r6,r9,r6
    c530:	300cc03a 	cmpne	r6,r6,zero
    c534:	298ab03a 	or	r5,r5,r6
    c538:	0013883a 	mov	r9,zero
    c53c:	003f1506 	br	c194 <__alt_data_end+0xff00c194>
    c540:	0101ffc4 	movi	r4,2047
    c544:	113f9a1e 	bne	r2,r4,c3b0 <__alt_data_end+0xff00c3b0>
    c548:	4811883a 	mov	r8,r9
    c54c:	3023883a 	mov	r17,r6
    c550:	1021883a 	mov	r16,r2
    c554:	3825883a 	mov	r18,r7
    c558:	003e9306 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c55c:	8000161e 	bne	r16,zero,c5b8 <__adddf3+0x68c>
    c560:	444ab03a 	or	r5,r8,r17
    c564:	28005126 	beq	r5,zero,c6ac <__adddf3+0x780>
    c568:	0108303a 	nor	r4,zero,r4
    c56c:	20004d1e 	bne	r4,zero,c6a4 <__adddf3+0x778>
    c570:	89a3883a 	add	r17,r17,r6
    c574:	4253883a 	add	r9,r8,r9
    c578:	898d803a 	cmpltu	r6,r17,r6
    c57c:	3251883a 	add	r8,r6,r9
    c580:	1021883a 	mov	r16,r2
    c584:	003f0806 	br	c1a8 <__alt_data_end+0xff00c1a8>
    c588:	1000301e 	bne	r2,zero,c64c <__adddf3+0x720>
    c58c:	4984b03a 	or	r2,r9,r6
    c590:	10007126 	beq	r2,zero,c758 <__adddf3+0x82c>
    c594:	4811883a 	mov	r8,r9
    c598:	3023883a 	mov	r17,r6
    c59c:	3825883a 	mov	r18,r7
    c5a0:	0401ffc4 	movi	r16,2047
    c5a4:	003e8006 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c5a8:	4462b03a 	or	r17,r8,r17
    c5ac:	8822c03a 	cmpne	r17,r17,zero
    c5b0:	0007883a 	mov	r3,zero
    c5b4:	003f8b06 	br	c3e4 <__alt_data_end+0xff00c3e4>
    c5b8:	0141ffc4 	movi	r5,2047
    c5bc:	11403b26 	beq	r2,r5,c6ac <__adddf3+0x780>
    c5c0:	0109c83a 	sub	r4,zero,r4
    c5c4:	42002034 	orhi	r8,r8,128
    c5c8:	01400e04 	movi	r5,56
    c5cc:	29006716 	blt	r5,r4,c76c <__adddf3+0x840>
    c5d0:	014007c4 	movi	r5,31
    c5d4:	29007016 	blt	r5,r4,c798 <__adddf3+0x86c>
    c5d8:	01400804 	movi	r5,32
    c5dc:	290bc83a 	sub	r5,r5,r4
    c5e0:	4154983a 	sll	r10,r8,r5
    c5e4:	890ed83a 	srl	r7,r17,r4
    c5e8:	894a983a 	sll	r5,r17,r5
    c5ec:	4108d83a 	srl	r4,r8,r4
    c5f0:	51e2b03a 	or	r17,r10,r7
    c5f4:	280ac03a 	cmpne	r5,r5,zero
    c5f8:	8962b03a 	or	r17,r17,r5
    c5fc:	89a3883a 	add	r17,r17,r6
    c600:	2253883a 	add	r9,r4,r9
    c604:	898d803a 	cmpltu	r6,r17,r6
    c608:	3251883a 	add	r8,r6,r9
    c60c:	1021883a 	mov	r16,r2
    c610:	003ee506 	br	c1a8 <__alt_data_end+0xff00c1a8>
    c614:	4984b03a 	or	r2,r9,r6
    c618:	103e6326 	beq	r2,zero,bfa8 <__alt_data_end+0xff00bfa8>
    c61c:	8987c83a 	sub	r3,r17,r6
    c620:	88c9803a 	cmpltu	r4,r17,r3
    c624:	4245c83a 	sub	r2,r8,r9
    c628:	1105c83a 	sub	r2,r2,r4
    c62c:	1100202c 	andhi	r4,r2,128
    c630:	203ebb26 	beq	r4,zero,c120 <__alt_data_end+0xff00c120>
    c634:	3463c83a 	sub	r17,r6,r17
    c638:	4a07c83a 	sub	r3,r9,r8
    c63c:	344d803a 	cmpltu	r6,r6,r17
    c640:	1991c83a 	sub	r8,r3,r6
    c644:	3825883a 	mov	r18,r7
    c648:	003e5706 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c64c:	4984b03a 	or	r2,r9,r6
    c650:	10002e26 	beq	r2,zero,c70c <__adddf3+0x7e0>
    c654:	4004d0fa 	srli	r2,r8,3
    c658:	8822d0fa 	srli	r17,r17,3
    c65c:	4010977a 	slli	r8,r8,29
    c660:	10c0022c 	andhi	r3,r2,8
    c664:	4462b03a 	or	r17,r8,r17
    c668:	18000826 	beq	r3,zero,c68c <__adddf3+0x760>
    c66c:	4808d0fa 	srli	r4,r9,3
    c670:	20c0022c 	andhi	r3,r4,8
    c674:	1800051e 	bne	r3,zero,c68c <__adddf3+0x760>
    c678:	300cd0fa 	srli	r6,r6,3
    c67c:	4806977a 	slli	r3,r9,29
    c680:	2005883a 	mov	r2,r4
    c684:	3825883a 	mov	r18,r7
    c688:	19a2b03a 	or	r17,r3,r6
    c68c:	8810d77a 	srli	r8,r17,29
    c690:	100490fa 	slli	r2,r2,3
    c694:	882290fa 	slli	r17,r17,3
    c698:	0401ffc4 	movi	r16,2047
    c69c:	4090b03a 	or	r8,r8,r2
    c6a0:	003e4106 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c6a4:	0141ffc4 	movi	r5,2047
    c6a8:	117fc71e 	bne	r2,r5,c5c8 <__alt_data_end+0xff00c5c8>
    c6ac:	4811883a 	mov	r8,r9
    c6b0:	3023883a 	mov	r17,r6
    c6b4:	1021883a 	mov	r16,r2
    c6b8:	003e3b06 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c6bc:	10002f26 	beq	r2,zero,c77c <__adddf3+0x850>
    c6c0:	4984b03a 	or	r2,r9,r6
    c6c4:	10001126 	beq	r2,zero,c70c <__adddf3+0x7e0>
    c6c8:	4004d0fa 	srli	r2,r8,3
    c6cc:	8822d0fa 	srli	r17,r17,3
    c6d0:	4010977a 	slli	r8,r8,29
    c6d4:	10c0022c 	andhi	r3,r2,8
    c6d8:	4462b03a 	or	r17,r8,r17
    c6dc:	183feb26 	beq	r3,zero,c68c <__alt_data_end+0xff00c68c>
    c6e0:	4808d0fa 	srli	r4,r9,3
    c6e4:	20c0022c 	andhi	r3,r4,8
    c6e8:	183fe81e 	bne	r3,zero,c68c <__alt_data_end+0xff00c68c>
    c6ec:	300cd0fa 	srli	r6,r6,3
    c6f0:	4806977a 	slli	r3,r9,29
    c6f4:	2005883a 	mov	r2,r4
    c6f8:	19a2b03a 	or	r17,r3,r6
    c6fc:	003fe306 	br	c68c <__alt_data_end+0xff00c68c>
    c700:	0011883a 	mov	r8,zero
    c704:	0005883a 	mov	r2,zero
    c708:	003e3f06 	br	c008 <__alt_data_end+0xff00c008>
    c70c:	0401ffc4 	movi	r16,2047
    c710:	003e2506 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c714:	0013883a 	mov	r9,zero
    c718:	003f8406 	br	c52c <__alt_data_end+0xff00c52c>
    c71c:	0005883a 	mov	r2,zero
    c720:	0007883a 	mov	r3,zero
    c724:	003e8906 	br	c14c <__alt_data_end+0xff00c14c>
    c728:	197ff804 	addi	r5,r3,-32
    c72c:	01000804 	movi	r4,32
    c730:	414ad83a 	srl	r5,r8,r5
    c734:	19002426 	beq	r3,r4,c7c8 <__adddf3+0x89c>
    c738:	01001004 	movi	r4,64
    c73c:	20c7c83a 	sub	r3,r4,r3
    c740:	40c6983a 	sll	r3,r8,r3
    c744:	1c46b03a 	or	r3,r3,r17
    c748:	1806c03a 	cmpne	r3,r3,zero
    c74c:	28e2b03a 	or	r17,r5,r3
    c750:	0007883a 	mov	r3,zero
    c754:	003f2306 	br	c3e4 <__alt_data_end+0xff00c3e4>
    c758:	0007883a 	mov	r3,zero
    c75c:	5811883a 	mov	r8,r11
    c760:	00bfffc4 	movi	r2,-1
    c764:	0401ffc4 	movi	r16,2047
    c768:	003e7806 	br	c14c <__alt_data_end+0xff00c14c>
    c76c:	4462b03a 	or	r17,r8,r17
    c770:	8822c03a 	cmpne	r17,r17,zero
    c774:	0009883a 	mov	r4,zero
    c778:	003fa006 	br	c5fc <__alt_data_end+0xff00c5fc>
    c77c:	4811883a 	mov	r8,r9
    c780:	3023883a 	mov	r17,r6
    c784:	0401ffc4 	movi	r16,2047
    c788:	003e0706 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c78c:	4811883a 	mov	r8,r9
    c790:	3023883a 	mov	r17,r6
    c794:	003e0406 	br	bfa8 <__alt_data_end+0xff00bfa8>
    c798:	21fff804 	addi	r7,r4,-32
    c79c:	01400804 	movi	r5,32
    c7a0:	41ced83a 	srl	r7,r8,r7
    c7a4:	21400a26 	beq	r4,r5,c7d0 <__adddf3+0x8a4>
    c7a8:	01401004 	movi	r5,64
    c7ac:	2909c83a 	sub	r4,r5,r4
    c7b0:	4108983a 	sll	r4,r8,r4
    c7b4:	2448b03a 	or	r4,r4,r17
    c7b8:	2008c03a 	cmpne	r4,r4,zero
    c7bc:	3922b03a 	or	r17,r7,r4
    c7c0:	0009883a 	mov	r4,zero
    c7c4:	003f8d06 	br	c5fc <__alt_data_end+0xff00c5fc>
    c7c8:	0007883a 	mov	r3,zero
    c7cc:	003fdd06 	br	c744 <__alt_data_end+0xff00c744>
    c7d0:	0009883a 	mov	r4,zero
    c7d4:	003ff706 	br	c7b4 <__alt_data_end+0xff00c7b4>

0000c7d8 <__divdf3>:
    c7d8:	defff204 	addi	sp,sp,-56
    c7dc:	dd400915 	stw	r21,36(sp)
    c7e0:	282ad53a 	srli	r21,r5,20
    c7e4:	dd000815 	stw	r20,32(sp)
    c7e8:	2828d7fa 	srli	r20,r5,31
    c7ec:	dc000415 	stw	r16,16(sp)
    c7f0:	04000434 	movhi	r16,16
    c7f4:	df000c15 	stw	fp,48(sp)
    c7f8:	843fffc4 	addi	r16,r16,-1
    c7fc:	dfc00d15 	stw	ra,52(sp)
    c800:	ddc00b15 	stw	r23,44(sp)
    c804:	dd800a15 	stw	r22,40(sp)
    c808:	dcc00715 	stw	r19,28(sp)
    c80c:	dc800615 	stw	r18,24(sp)
    c810:	dc400515 	stw	r17,20(sp)
    c814:	ad41ffcc 	andi	r21,r21,2047
    c818:	2c20703a 	and	r16,r5,r16
    c81c:	a7003fcc 	andi	fp,r20,255
    c820:	a8006126 	beq	r21,zero,c9a8 <__divdf3+0x1d0>
    c824:	0081ffc4 	movi	r2,2047
    c828:	2025883a 	mov	r18,r4
    c82c:	a8803726 	beq	r21,r2,c90c <__divdf3+0x134>
    c830:	80800434 	orhi	r2,r16,16
    c834:	100490fa 	slli	r2,r2,3
    c838:	2020d77a 	srli	r16,r4,29
    c83c:	202490fa 	slli	r18,r4,3
    c840:	ad7f0044 	addi	r21,r21,-1023
    c844:	80a0b03a 	or	r16,r16,r2
    c848:	0027883a 	mov	r19,zero
    c84c:	0013883a 	mov	r9,zero
    c850:	3804d53a 	srli	r2,r7,20
    c854:	382cd7fa 	srli	r22,r7,31
    c858:	04400434 	movhi	r17,16
    c85c:	8c7fffc4 	addi	r17,r17,-1
    c860:	1081ffcc 	andi	r2,r2,2047
    c864:	3011883a 	mov	r8,r6
    c868:	3c62703a 	and	r17,r7,r17
    c86c:	b5c03fcc 	andi	r23,r22,255
    c870:	10006c26 	beq	r2,zero,ca24 <__divdf3+0x24c>
    c874:	00c1ffc4 	movi	r3,2047
    c878:	10c06426 	beq	r2,r3,ca0c <__divdf3+0x234>
    c87c:	88c00434 	orhi	r3,r17,16
    c880:	180690fa 	slli	r3,r3,3
    c884:	3022d77a 	srli	r17,r6,29
    c888:	301090fa 	slli	r8,r6,3
    c88c:	10bf0044 	addi	r2,r2,-1023
    c890:	88e2b03a 	or	r17,r17,r3
    c894:	000f883a 	mov	r7,zero
    c898:	a58cf03a 	xor	r6,r20,r22
    c89c:	3cc8b03a 	or	r4,r7,r19
    c8a0:	a8abc83a 	sub	r21,r21,r2
    c8a4:	008003c4 	movi	r2,15
    c8a8:	3007883a 	mov	r3,r6
    c8ac:	34c03fcc 	andi	r19,r6,255
    c8b0:	11009036 	bltu	r2,r4,caf4 <__divdf3+0x31c>
    c8b4:	200890ba 	slli	r4,r4,2
    c8b8:	00800074 	movhi	r2,1
    c8bc:	10b23304 	addi	r2,r2,-14132
    c8c0:	2089883a 	add	r4,r4,r2
    c8c4:	20800017 	ldw	r2,0(r4)
    c8c8:	1000683a 	jmp	r2
    c8cc:	0000caf4 	movhi	zero,811
    c8d0:	0000c944 	movi	zero,805
    c8d4:	0000cae4 	muli	zero,zero,811
    c8d8:	0000c938 	rdprs	zero,zero,804
    c8dc:	0000cae4 	muli	zero,zero,811
    c8e0:	0000cab8 	rdprs	zero,zero,810
    c8e4:	0000cae4 	muli	zero,zero,811
    c8e8:	0000c938 	rdprs	zero,zero,804
    c8ec:	0000c944 	movi	zero,805
    c8f0:	0000c944 	movi	zero,805
    c8f4:	0000cab8 	rdprs	zero,zero,810
    c8f8:	0000c938 	rdprs	zero,zero,804
    c8fc:	0000c928 	cmpgeui	zero,zero,804
    c900:	0000c928 	cmpgeui	zero,zero,804
    c904:	0000c928 	cmpgeui	zero,zero,804
    c908:	0000cdd8 	cmpnei	zero,zero,823
    c90c:	2404b03a 	or	r2,r4,r16
    c910:	1000661e 	bne	r2,zero,caac <__divdf3+0x2d4>
    c914:	04c00204 	movi	r19,8
    c918:	0021883a 	mov	r16,zero
    c91c:	0025883a 	mov	r18,zero
    c920:	02400084 	movi	r9,2
    c924:	003fca06 	br	c850 <__alt_data_end+0xff00c850>
    c928:	8023883a 	mov	r17,r16
    c92c:	9011883a 	mov	r8,r18
    c930:	e02f883a 	mov	r23,fp
    c934:	480f883a 	mov	r7,r9
    c938:	00800084 	movi	r2,2
    c93c:	3881311e 	bne	r7,r2,ce04 <__divdf3+0x62c>
    c940:	b827883a 	mov	r19,r23
    c944:	98c0004c 	andi	r3,r19,1
    c948:	0081ffc4 	movi	r2,2047
    c94c:	000b883a 	mov	r5,zero
    c950:	0025883a 	mov	r18,zero
    c954:	1004953a 	slli	r2,r2,20
    c958:	18c03fcc 	andi	r3,r3,255
    c95c:	04400434 	movhi	r17,16
    c960:	8c7fffc4 	addi	r17,r17,-1
    c964:	180697fa 	slli	r3,r3,31
    c968:	2c4a703a 	and	r5,r5,r17
    c96c:	288ab03a 	or	r5,r5,r2
    c970:	28c6b03a 	or	r3,r5,r3
    c974:	9005883a 	mov	r2,r18
    c978:	dfc00d17 	ldw	ra,52(sp)
    c97c:	df000c17 	ldw	fp,48(sp)
    c980:	ddc00b17 	ldw	r23,44(sp)
    c984:	dd800a17 	ldw	r22,40(sp)
    c988:	dd400917 	ldw	r21,36(sp)
    c98c:	dd000817 	ldw	r20,32(sp)
    c990:	dcc00717 	ldw	r19,28(sp)
    c994:	dc800617 	ldw	r18,24(sp)
    c998:	dc400517 	ldw	r17,20(sp)
    c99c:	dc000417 	ldw	r16,16(sp)
    c9a0:	dec00e04 	addi	sp,sp,56
    c9a4:	f800283a 	ret
    c9a8:	2404b03a 	or	r2,r4,r16
    c9ac:	2027883a 	mov	r19,r4
    c9b0:	10003926 	beq	r2,zero,ca98 <__divdf3+0x2c0>
    c9b4:	80012e26 	beq	r16,zero,ce70 <__divdf3+0x698>
    c9b8:	8009883a 	mov	r4,r16
    c9bc:	d9800315 	stw	r6,12(sp)
    c9c0:	d9c00215 	stw	r7,8(sp)
    c9c4:	000e5300 	call	e530 <__clzsi2>
    c9c8:	d9800317 	ldw	r6,12(sp)
    c9cc:	d9c00217 	ldw	r7,8(sp)
    c9d0:	113ffd44 	addi	r4,r2,-11
    c9d4:	00c00704 	movi	r3,28
    c9d8:	19012116 	blt	r3,r4,ce60 <__divdf3+0x688>
    c9dc:	00c00744 	movi	r3,29
    c9e0:	147ffe04 	addi	r17,r2,-8
    c9e4:	1907c83a 	sub	r3,r3,r4
    c9e8:	8460983a 	sll	r16,r16,r17
    c9ec:	98c6d83a 	srl	r3,r19,r3
    c9f0:	9c64983a 	sll	r18,r19,r17
    c9f4:	1c20b03a 	or	r16,r3,r16
    c9f8:	1080fcc4 	addi	r2,r2,1011
    c9fc:	00abc83a 	sub	r21,zero,r2
    ca00:	0027883a 	mov	r19,zero
    ca04:	0013883a 	mov	r9,zero
    ca08:	003f9106 	br	c850 <__alt_data_end+0xff00c850>
    ca0c:	3446b03a 	or	r3,r6,r17
    ca10:	18001f1e 	bne	r3,zero,ca90 <__divdf3+0x2b8>
    ca14:	0023883a 	mov	r17,zero
    ca18:	0011883a 	mov	r8,zero
    ca1c:	01c00084 	movi	r7,2
    ca20:	003f9d06 	br	c898 <__alt_data_end+0xff00c898>
    ca24:	3446b03a 	or	r3,r6,r17
    ca28:	18001526 	beq	r3,zero,ca80 <__divdf3+0x2a8>
    ca2c:	88011b26 	beq	r17,zero,ce9c <__divdf3+0x6c4>
    ca30:	8809883a 	mov	r4,r17
    ca34:	d9800315 	stw	r6,12(sp)
    ca38:	da400115 	stw	r9,4(sp)
    ca3c:	000e5300 	call	e530 <__clzsi2>
    ca40:	d9800317 	ldw	r6,12(sp)
    ca44:	da400117 	ldw	r9,4(sp)
    ca48:	113ffd44 	addi	r4,r2,-11
    ca4c:	00c00704 	movi	r3,28
    ca50:	19010e16 	blt	r3,r4,ce8c <__divdf3+0x6b4>
    ca54:	00c00744 	movi	r3,29
    ca58:	123ffe04 	addi	r8,r2,-8
    ca5c:	1907c83a 	sub	r3,r3,r4
    ca60:	8a22983a 	sll	r17,r17,r8
    ca64:	30c6d83a 	srl	r3,r6,r3
    ca68:	3210983a 	sll	r8,r6,r8
    ca6c:	1c62b03a 	or	r17,r3,r17
    ca70:	1080fcc4 	addi	r2,r2,1011
    ca74:	0085c83a 	sub	r2,zero,r2
    ca78:	000f883a 	mov	r7,zero
    ca7c:	003f8606 	br	c898 <__alt_data_end+0xff00c898>
    ca80:	0023883a 	mov	r17,zero
    ca84:	0011883a 	mov	r8,zero
    ca88:	01c00044 	movi	r7,1
    ca8c:	003f8206 	br	c898 <__alt_data_end+0xff00c898>
    ca90:	01c000c4 	movi	r7,3
    ca94:	003f8006 	br	c898 <__alt_data_end+0xff00c898>
    ca98:	04c00104 	movi	r19,4
    ca9c:	0021883a 	mov	r16,zero
    caa0:	0025883a 	mov	r18,zero
    caa4:	02400044 	movi	r9,1
    caa8:	003f6906 	br	c850 <__alt_data_end+0xff00c850>
    caac:	04c00304 	movi	r19,12
    cab0:	024000c4 	movi	r9,3
    cab4:	003f6606 	br	c850 <__alt_data_end+0xff00c850>
    cab8:	01400434 	movhi	r5,16
    cabc:	0007883a 	mov	r3,zero
    cac0:	297fffc4 	addi	r5,r5,-1
    cac4:	04bfffc4 	movi	r18,-1
    cac8:	0081ffc4 	movi	r2,2047
    cacc:	003fa106 	br	c954 <__alt_data_end+0xff00c954>
    cad0:	00c00044 	movi	r3,1
    cad4:	1887c83a 	sub	r3,r3,r2
    cad8:	01000e04 	movi	r4,56
    cadc:	20c1210e 	bge	r4,r3,cf64 <__divdf3+0x78c>
    cae0:	98c0004c 	andi	r3,r19,1
    cae4:	0005883a 	mov	r2,zero
    cae8:	000b883a 	mov	r5,zero
    caec:	0025883a 	mov	r18,zero
    caf0:	003f9806 	br	c954 <__alt_data_end+0xff00c954>
    caf4:	8c00fd36 	bltu	r17,r16,ceec <__divdf3+0x714>
    caf8:	8440fb26 	beq	r16,r17,cee8 <__divdf3+0x710>
    cafc:	8007883a 	mov	r3,r16
    cb00:	ad7fffc4 	addi	r21,r21,-1
    cb04:	0021883a 	mov	r16,zero
    cb08:	4004d63a 	srli	r2,r8,24
    cb0c:	8822923a 	slli	r17,r17,8
    cb10:	1809883a 	mov	r4,r3
    cb14:	402c923a 	slli	r22,r8,8
    cb18:	88b8b03a 	or	fp,r17,r2
    cb1c:	e028d43a 	srli	r20,fp,16
    cb20:	d8c00015 	stw	r3,0(sp)
    cb24:	e5ffffcc 	andi	r23,fp,65535
    cb28:	a00b883a 	mov	r5,r20
    cb2c:	0001d440 	call	1d44 <__udivsi3>
    cb30:	d8c00017 	ldw	r3,0(sp)
    cb34:	a00b883a 	mov	r5,r20
    cb38:	d8800315 	stw	r2,12(sp)
    cb3c:	1809883a 	mov	r4,r3
    cb40:	0001da80 	call	1da8 <__umodsi3>
    cb44:	d9800317 	ldw	r6,12(sp)
    cb48:	1006943a 	slli	r3,r2,16
    cb4c:	9004d43a 	srli	r2,r18,16
    cb50:	b9a3383a 	mul	r17,r23,r6
    cb54:	10c4b03a 	or	r2,r2,r3
    cb58:	1440062e 	bgeu	r2,r17,cb74 <__divdf3+0x39c>
    cb5c:	1705883a 	add	r2,r2,fp
    cb60:	30ffffc4 	addi	r3,r6,-1
    cb64:	1700ee36 	bltu	r2,fp,cf20 <__divdf3+0x748>
    cb68:	1440ed2e 	bgeu	r2,r17,cf20 <__divdf3+0x748>
    cb6c:	31bfff84 	addi	r6,r6,-2
    cb70:	1705883a 	add	r2,r2,fp
    cb74:	1463c83a 	sub	r17,r2,r17
    cb78:	a00b883a 	mov	r5,r20
    cb7c:	8809883a 	mov	r4,r17
    cb80:	d9800315 	stw	r6,12(sp)
    cb84:	0001d440 	call	1d44 <__udivsi3>
    cb88:	a00b883a 	mov	r5,r20
    cb8c:	8809883a 	mov	r4,r17
    cb90:	d8800215 	stw	r2,8(sp)
    cb94:	0001da80 	call	1da8 <__umodsi3>
    cb98:	d9c00217 	ldw	r7,8(sp)
    cb9c:	1004943a 	slli	r2,r2,16
    cba0:	94bfffcc 	andi	r18,r18,65535
    cba4:	b9d1383a 	mul	r8,r23,r7
    cba8:	90a4b03a 	or	r18,r18,r2
    cbac:	d9800317 	ldw	r6,12(sp)
    cbb0:	9200062e 	bgeu	r18,r8,cbcc <__divdf3+0x3f4>
    cbb4:	9725883a 	add	r18,r18,fp
    cbb8:	38bfffc4 	addi	r2,r7,-1
    cbbc:	9700d636 	bltu	r18,fp,cf18 <__divdf3+0x740>
    cbc0:	9200d52e 	bgeu	r18,r8,cf18 <__divdf3+0x740>
    cbc4:	39ffff84 	addi	r7,r7,-2
    cbc8:	9725883a 	add	r18,r18,fp
    cbcc:	3004943a 	slli	r2,r6,16
    cbd0:	b012d43a 	srli	r9,r22,16
    cbd4:	b1bfffcc 	andi	r6,r22,65535
    cbd8:	11e2b03a 	or	r17,r2,r7
    cbdc:	8806d43a 	srli	r3,r17,16
    cbe0:	893fffcc 	andi	r4,r17,65535
    cbe4:	218b383a 	mul	r5,r4,r6
    cbe8:	30c5383a 	mul	r2,r6,r3
    cbec:	2249383a 	mul	r4,r4,r9
    cbf0:	280ed43a 	srli	r7,r5,16
    cbf4:	9225c83a 	sub	r18,r18,r8
    cbf8:	2089883a 	add	r4,r4,r2
    cbfc:	3909883a 	add	r4,r7,r4
    cc00:	1a47383a 	mul	r3,r3,r9
    cc04:	2080022e 	bgeu	r4,r2,cc10 <__divdf3+0x438>
    cc08:	00800074 	movhi	r2,1
    cc0c:	1887883a 	add	r3,r3,r2
    cc10:	2004d43a 	srli	r2,r4,16
    cc14:	2008943a 	slli	r4,r4,16
    cc18:	297fffcc 	andi	r5,r5,65535
    cc1c:	10c7883a 	add	r3,r2,r3
    cc20:	2149883a 	add	r4,r4,r5
    cc24:	90c0a536 	bltu	r18,r3,cebc <__divdf3+0x6e4>
    cc28:	90c0bf26 	beq	r18,r3,cf28 <__divdf3+0x750>
    cc2c:	90c7c83a 	sub	r3,r18,r3
    cc30:	810fc83a 	sub	r7,r16,r4
    cc34:	81e5803a 	cmpltu	r18,r16,r7
    cc38:	1ca5c83a 	sub	r18,r3,r18
    cc3c:	e480c126 	beq	fp,r18,cf44 <__divdf3+0x76c>
    cc40:	a00b883a 	mov	r5,r20
    cc44:	9009883a 	mov	r4,r18
    cc48:	d9800315 	stw	r6,12(sp)
    cc4c:	d9c00215 	stw	r7,8(sp)
    cc50:	da400115 	stw	r9,4(sp)
    cc54:	0001d440 	call	1d44 <__udivsi3>
    cc58:	a00b883a 	mov	r5,r20
    cc5c:	9009883a 	mov	r4,r18
    cc60:	d8800015 	stw	r2,0(sp)
    cc64:	0001da80 	call	1da8 <__umodsi3>
    cc68:	d9c00217 	ldw	r7,8(sp)
    cc6c:	da000017 	ldw	r8,0(sp)
    cc70:	1006943a 	slli	r3,r2,16
    cc74:	3804d43a 	srli	r2,r7,16
    cc78:	ba21383a 	mul	r16,r23,r8
    cc7c:	d9800317 	ldw	r6,12(sp)
    cc80:	10c4b03a 	or	r2,r2,r3
    cc84:	da400117 	ldw	r9,4(sp)
    cc88:	1400062e 	bgeu	r2,r16,cca4 <__divdf3+0x4cc>
    cc8c:	1705883a 	add	r2,r2,fp
    cc90:	40ffffc4 	addi	r3,r8,-1
    cc94:	1700ad36 	bltu	r2,fp,cf4c <__divdf3+0x774>
    cc98:	1400ac2e 	bgeu	r2,r16,cf4c <__divdf3+0x774>
    cc9c:	423fff84 	addi	r8,r8,-2
    cca0:	1705883a 	add	r2,r2,fp
    cca4:	1421c83a 	sub	r16,r2,r16
    cca8:	a00b883a 	mov	r5,r20
    ccac:	8009883a 	mov	r4,r16
    ccb0:	d9800315 	stw	r6,12(sp)
    ccb4:	d9c00215 	stw	r7,8(sp)
    ccb8:	da000015 	stw	r8,0(sp)
    ccbc:	da400115 	stw	r9,4(sp)
    ccc0:	0001d440 	call	1d44 <__udivsi3>
    ccc4:	8009883a 	mov	r4,r16
    ccc8:	a00b883a 	mov	r5,r20
    cccc:	1025883a 	mov	r18,r2
    ccd0:	0001da80 	call	1da8 <__umodsi3>
    ccd4:	d9c00217 	ldw	r7,8(sp)
    ccd8:	1004943a 	slli	r2,r2,16
    ccdc:	bcaf383a 	mul	r23,r23,r18
    cce0:	393fffcc 	andi	r4,r7,65535
    cce4:	2088b03a 	or	r4,r4,r2
    cce8:	d9800317 	ldw	r6,12(sp)
    ccec:	da000017 	ldw	r8,0(sp)
    ccf0:	da400117 	ldw	r9,4(sp)
    ccf4:	25c0062e 	bgeu	r4,r23,cd10 <__divdf3+0x538>
    ccf8:	2709883a 	add	r4,r4,fp
    ccfc:	90bfffc4 	addi	r2,r18,-1
    cd00:	27009436 	bltu	r4,fp,cf54 <__divdf3+0x77c>
    cd04:	25c0932e 	bgeu	r4,r23,cf54 <__divdf3+0x77c>
    cd08:	94bfff84 	addi	r18,r18,-2
    cd0c:	2709883a 	add	r4,r4,fp
    cd10:	4004943a 	slli	r2,r8,16
    cd14:	25efc83a 	sub	r23,r4,r23
    cd18:	1490b03a 	or	r8,r2,r18
    cd1c:	4008d43a 	srli	r4,r8,16
    cd20:	40ffffcc 	andi	r3,r8,65535
    cd24:	30c5383a 	mul	r2,r6,r3
    cd28:	1a47383a 	mul	r3,r3,r9
    cd2c:	310d383a 	mul	r6,r6,r4
    cd30:	100ad43a 	srli	r5,r2,16
    cd34:	4913383a 	mul	r9,r9,r4
    cd38:	1987883a 	add	r3,r3,r6
    cd3c:	28c7883a 	add	r3,r5,r3
    cd40:	1980022e 	bgeu	r3,r6,cd4c <__divdf3+0x574>
    cd44:	01000074 	movhi	r4,1
    cd48:	4913883a 	add	r9,r9,r4
    cd4c:	1808d43a 	srli	r4,r3,16
    cd50:	1806943a 	slli	r3,r3,16
    cd54:	10bfffcc 	andi	r2,r2,65535
    cd58:	2253883a 	add	r9,r4,r9
    cd5c:	1887883a 	add	r3,r3,r2
    cd60:	ba403836 	bltu	r23,r9,ce44 <__divdf3+0x66c>
    cd64:	ba403626 	beq	r23,r9,ce40 <__divdf3+0x668>
    cd68:	42000054 	ori	r8,r8,1
    cd6c:	a880ffc4 	addi	r2,r21,1023
    cd70:	00bf570e 	bge	zero,r2,cad0 <__alt_data_end+0xff00cad0>
    cd74:	40c001cc 	andi	r3,r8,7
    cd78:	18000726 	beq	r3,zero,cd98 <__divdf3+0x5c0>
    cd7c:	40c003cc 	andi	r3,r8,15
    cd80:	01000104 	movi	r4,4
    cd84:	19000426 	beq	r3,r4,cd98 <__divdf3+0x5c0>
    cd88:	4107883a 	add	r3,r8,r4
    cd8c:	1a11803a 	cmpltu	r8,r3,r8
    cd90:	8a23883a 	add	r17,r17,r8
    cd94:	1811883a 	mov	r8,r3
    cd98:	88c0402c 	andhi	r3,r17,256
    cd9c:	18000426 	beq	r3,zero,cdb0 <__divdf3+0x5d8>
    cda0:	00ffc034 	movhi	r3,65280
    cda4:	18ffffc4 	addi	r3,r3,-1
    cda8:	a8810004 	addi	r2,r21,1024
    cdac:	88e2703a 	and	r17,r17,r3
    cdb0:	00c1ff84 	movi	r3,2046
    cdb4:	18bee316 	blt	r3,r2,c944 <__alt_data_end+0xff00c944>
    cdb8:	8824977a 	slli	r18,r17,29
    cdbc:	4010d0fa 	srli	r8,r8,3
    cdc0:	8822927a 	slli	r17,r17,9
    cdc4:	1081ffcc 	andi	r2,r2,2047
    cdc8:	9224b03a 	or	r18,r18,r8
    cdcc:	880ad33a 	srli	r5,r17,12
    cdd0:	98c0004c 	andi	r3,r19,1
    cdd4:	003edf06 	br	c954 <__alt_data_end+0xff00c954>
    cdd8:	8080022c 	andhi	r2,r16,8
    cddc:	10001226 	beq	r2,zero,ce28 <__divdf3+0x650>
    cde0:	8880022c 	andhi	r2,r17,8
    cde4:	1000101e 	bne	r2,zero,ce28 <__divdf3+0x650>
    cde8:	00800434 	movhi	r2,16
    cdec:	89400234 	orhi	r5,r17,8
    cdf0:	10bfffc4 	addi	r2,r2,-1
    cdf4:	b007883a 	mov	r3,r22
    cdf8:	288a703a 	and	r5,r5,r2
    cdfc:	4025883a 	mov	r18,r8
    ce00:	003f3106 	br	cac8 <__alt_data_end+0xff00cac8>
    ce04:	008000c4 	movi	r2,3
    ce08:	3880a626 	beq	r7,r2,d0a4 <__divdf3+0x8cc>
    ce0c:	00800044 	movi	r2,1
    ce10:	3880521e 	bne	r7,r2,cf5c <__divdf3+0x784>
    ce14:	b807883a 	mov	r3,r23
    ce18:	0005883a 	mov	r2,zero
    ce1c:	000b883a 	mov	r5,zero
    ce20:	0025883a 	mov	r18,zero
    ce24:	003ecb06 	br	c954 <__alt_data_end+0xff00c954>
    ce28:	00800434 	movhi	r2,16
    ce2c:	81400234 	orhi	r5,r16,8
    ce30:	10bfffc4 	addi	r2,r2,-1
    ce34:	a007883a 	mov	r3,r20
    ce38:	288a703a 	and	r5,r5,r2
    ce3c:	003f2206 	br	cac8 <__alt_data_end+0xff00cac8>
    ce40:	183fca26 	beq	r3,zero,cd6c <__alt_data_end+0xff00cd6c>
    ce44:	e5ef883a 	add	r23,fp,r23
    ce48:	40bfffc4 	addi	r2,r8,-1
    ce4c:	bf00392e 	bgeu	r23,fp,cf34 <__divdf3+0x75c>
    ce50:	1011883a 	mov	r8,r2
    ce54:	ba7fc41e 	bne	r23,r9,cd68 <__alt_data_end+0xff00cd68>
    ce58:	b0ffc31e 	bne	r22,r3,cd68 <__alt_data_end+0xff00cd68>
    ce5c:	003fc306 	br	cd6c <__alt_data_end+0xff00cd6c>
    ce60:	143ff604 	addi	r16,r2,-40
    ce64:	9c20983a 	sll	r16,r19,r16
    ce68:	0025883a 	mov	r18,zero
    ce6c:	003ee206 	br	c9f8 <__alt_data_end+0xff00c9f8>
    ce70:	d9800315 	stw	r6,12(sp)
    ce74:	d9c00215 	stw	r7,8(sp)
    ce78:	000e5300 	call	e530 <__clzsi2>
    ce7c:	10800804 	addi	r2,r2,32
    ce80:	d9c00217 	ldw	r7,8(sp)
    ce84:	d9800317 	ldw	r6,12(sp)
    ce88:	003ed106 	br	c9d0 <__alt_data_end+0xff00c9d0>
    ce8c:	147ff604 	addi	r17,r2,-40
    ce90:	3462983a 	sll	r17,r6,r17
    ce94:	0011883a 	mov	r8,zero
    ce98:	003ef506 	br	ca70 <__alt_data_end+0xff00ca70>
    ce9c:	3009883a 	mov	r4,r6
    cea0:	d9800315 	stw	r6,12(sp)
    cea4:	da400115 	stw	r9,4(sp)
    cea8:	000e5300 	call	e530 <__clzsi2>
    ceac:	10800804 	addi	r2,r2,32
    ceb0:	da400117 	ldw	r9,4(sp)
    ceb4:	d9800317 	ldw	r6,12(sp)
    ceb8:	003ee306 	br	ca48 <__alt_data_end+0xff00ca48>
    cebc:	85a1883a 	add	r16,r16,r22
    cec0:	8585803a 	cmpltu	r2,r16,r22
    cec4:	1705883a 	add	r2,r2,fp
    cec8:	14a5883a 	add	r18,r2,r18
    cecc:	88bfffc4 	addi	r2,r17,-1
    ced0:	e4800c2e 	bgeu	fp,r18,cf04 <__divdf3+0x72c>
    ced4:	90c03e36 	bltu	r18,r3,cfd0 <__divdf3+0x7f8>
    ced8:	1c806926 	beq	r3,r18,d080 <__divdf3+0x8a8>
    cedc:	90c7c83a 	sub	r3,r18,r3
    cee0:	1023883a 	mov	r17,r2
    cee4:	003f5206 	br	cc30 <__alt_data_end+0xff00cc30>
    cee8:	923f0436 	bltu	r18,r8,cafc <__alt_data_end+0xff00cafc>
    ceec:	800897fa 	slli	r4,r16,31
    cef0:	9004d07a 	srli	r2,r18,1
    cef4:	8006d07a 	srli	r3,r16,1
    cef8:	902097fa 	slli	r16,r18,31
    cefc:	20a4b03a 	or	r18,r4,r2
    cf00:	003f0106 	br	cb08 <__alt_data_end+0xff00cb08>
    cf04:	e4bff51e 	bne	fp,r18,cedc <__alt_data_end+0xff00cedc>
    cf08:	85bff22e 	bgeu	r16,r22,ced4 <__alt_data_end+0xff00ced4>
    cf0c:	e0c7c83a 	sub	r3,fp,r3
    cf10:	1023883a 	mov	r17,r2
    cf14:	003f4606 	br	cc30 <__alt_data_end+0xff00cc30>
    cf18:	100f883a 	mov	r7,r2
    cf1c:	003f2b06 	br	cbcc <__alt_data_end+0xff00cbcc>
    cf20:	180d883a 	mov	r6,r3
    cf24:	003f1306 	br	cb74 <__alt_data_end+0xff00cb74>
    cf28:	813fe436 	bltu	r16,r4,cebc <__alt_data_end+0xff00cebc>
    cf2c:	0007883a 	mov	r3,zero
    cf30:	003f3f06 	br	cc30 <__alt_data_end+0xff00cc30>
    cf34:	ba402c36 	bltu	r23,r9,cfe8 <__divdf3+0x810>
    cf38:	4dc05426 	beq	r9,r23,d08c <__divdf3+0x8b4>
    cf3c:	1011883a 	mov	r8,r2
    cf40:	003f8906 	br	cd68 <__alt_data_end+0xff00cd68>
    cf44:	023fffc4 	movi	r8,-1
    cf48:	003f8806 	br	cd6c <__alt_data_end+0xff00cd6c>
    cf4c:	1811883a 	mov	r8,r3
    cf50:	003f5406 	br	cca4 <__alt_data_end+0xff00cca4>
    cf54:	1025883a 	mov	r18,r2
    cf58:	003f6d06 	br	cd10 <__alt_data_end+0xff00cd10>
    cf5c:	b827883a 	mov	r19,r23
    cf60:	003f8206 	br	cd6c <__alt_data_end+0xff00cd6c>
    cf64:	010007c4 	movi	r4,31
    cf68:	20c02616 	blt	r4,r3,d004 <__divdf3+0x82c>
    cf6c:	00800804 	movi	r2,32
    cf70:	10c5c83a 	sub	r2,r2,r3
    cf74:	888a983a 	sll	r5,r17,r2
    cf78:	40c8d83a 	srl	r4,r8,r3
    cf7c:	4084983a 	sll	r2,r8,r2
    cf80:	88e2d83a 	srl	r17,r17,r3
    cf84:	2906b03a 	or	r3,r5,r4
    cf88:	1004c03a 	cmpne	r2,r2,zero
    cf8c:	1886b03a 	or	r3,r3,r2
    cf90:	188001cc 	andi	r2,r3,7
    cf94:	10000726 	beq	r2,zero,cfb4 <__divdf3+0x7dc>
    cf98:	188003cc 	andi	r2,r3,15
    cf9c:	01000104 	movi	r4,4
    cfa0:	11000426 	beq	r2,r4,cfb4 <__divdf3+0x7dc>
    cfa4:	1805883a 	mov	r2,r3
    cfa8:	10c00104 	addi	r3,r2,4
    cfac:	1885803a 	cmpltu	r2,r3,r2
    cfb0:	88a3883a 	add	r17,r17,r2
    cfb4:	8880202c 	andhi	r2,r17,128
    cfb8:	10002726 	beq	r2,zero,d058 <__divdf3+0x880>
    cfbc:	98c0004c 	andi	r3,r19,1
    cfc0:	00800044 	movi	r2,1
    cfc4:	000b883a 	mov	r5,zero
    cfc8:	0025883a 	mov	r18,zero
    cfcc:	003e6106 	br	c954 <__alt_data_end+0xff00c954>
    cfd0:	85a1883a 	add	r16,r16,r22
    cfd4:	8585803a 	cmpltu	r2,r16,r22
    cfd8:	1705883a 	add	r2,r2,fp
    cfdc:	14a5883a 	add	r18,r2,r18
    cfe0:	8c7fff84 	addi	r17,r17,-2
    cfe4:	003f1106 	br	cc2c <__alt_data_end+0xff00cc2c>
    cfe8:	b589883a 	add	r4,r22,r22
    cfec:	25ad803a 	cmpltu	r22,r4,r22
    cff0:	b739883a 	add	fp,r22,fp
    cff4:	40bfff84 	addi	r2,r8,-2
    cff8:	bf2f883a 	add	r23,r23,fp
    cffc:	202d883a 	mov	r22,r4
    d000:	003f9306 	br	ce50 <__alt_data_end+0xff00ce50>
    d004:	013ff844 	movi	r4,-31
    d008:	2085c83a 	sub	r2,r4,r2
    d00c:	8888d83a 	srl	r4,r17,r2
    d010:	00800804 	movi	r2,32
    d014:	18802126 	beq	r3,r2,d09c <__divdf3+0x8c4>
    d018:	00801004 	movi	r2,64
    d01c:	10c5c83a 	sub	r2,r2,r3
    d020:	8884983a 	sll	r2,r17,r2
    d024:	1204b03a 	or	r2,r2,r8
    d028:	1004c03a 	cmpne	r2,r2,zero
    d02c:	2084b03a 	or	r2,r4,r2
    d030:	144001cc 	andi	r17,r2,7
    d034:	88000d1e 	bne	r17,zero,d06c <__divdf3+0x894>
    d038:	000b883a 	mov	r5,zero
    d03c:	1024d0fa 	srli	r18,r2,3
    d040:	98c0004c 	andi	r3,r19,1
    d044:	0005883a 	mov	r2,zero
    d048:	9464b03a 	or	r18,r18,r17
    d04c:	003e4106 	br	c954 <__alt_data_end+0xff00c954>
    d050:	1007883a 	mov	r3,r2
    d054:	0023883a 	mov	r17,zero
    d058:	880a927a 	slli	r5,r17,9
    d05c:	1805883a 	mov	r2,r3
    d060:	8822977a 	slli	r17,r17,29
    d064:	280ad33a 	srli	r5,r5,12
    d068:	003ff406 	br	d03c <__alt_data_end+0xff00d03c>
    d06c:	10c003cc 	andi	r3,r2,15
    d070:	01000104 	movi	r4,4
    d074:	193ff626 	beq	r3,r4,d050 <__alt_data_end+0xff00d050>
    d078:	0023883a 	mov	r17,zero
    d07c:	003fca06 	br	cfa8 <__alt_data_end+0xff00cfa8>
    d080:	813fd336 	bltu	r16,r4,cfd0 <__alt_data_end+0xff00cfd0>
    d084:	1023883a 	mov	r17,r2
    d088:	003fa806 	br	cf2c <__alt_data_end+0xff00cf2c>
    d08c:	b0ffd636 	bltu	r22,r3,cfe8 <__alt_data_end+0xff00cfe8>
    d090:	1011883a 	mov	r8,r2
    d094:	b0ff341e 	bne	r22,r3,cd68 <__alt_data_end+0xff00cd68>
    d098:	003f3406 	br	cd6c <__alt_data_end+0xff00cd6c>
    d09c:	0005883a 	mov	r2,zero
    d0a0:	003fe006 	br	d024 <__alt_data_end+0xff00d024>
    d0a4:	00800434 	movhi	r2,16
    d0a8:	89400234 	orhi	r5,r17,8
    d0ac:	10bfffc4 	addi	r2,r2,-1
    d0b0:	b807883a 	mov	r3,r23
    d0b4:	288a703a 	and	r5,r5,r2
    d0b8:	4025883a 	mov	r18,r8
    d0bc:	003e8206 	br	cac8 <__alt_data_end+0xff00cac8>

0000d0c0 <__eqdf2>:
    d0c0:	2804d53a 	srli	r2,r5,20
    d0c4:	3806d53a 	srli	r3,r7,20
    d0c8:	02000434 	movhi	r8,16
    d0cc:	423fffc4 	addi	r8,r8,-1
    d0d0:	1081ffcc 	andi	r2,r2,2047
    d0d4:	0281ffc4 	movi	r10,2047
    d0d8:	2a12703a 	and	r9,r5,r8
    d0dc:	18c1ffcc 	andi	r3,r3,2047
    d0e0:	3a10703a 	and	r8,r7,r8
    d0e4:	280ad7fa 	srli	r5,r5,31
    d0e8:	380ed7fa 	srli	r7,r7,31
    d0ec:	12801026 	beq	r2,r10,d130 <__eqdf2+0x70>
    d0f0:	0281ffc4 	movi	r10,2047
    d0f4:	1a800a26 	beq	r3,r10,d120 <__eqdf2+0x60>
    d0f8:	10c00226 	beq	r2,r3,d104 <__eqdf2+0x44>
    d0fc:	00800044 	movi	r2,1
    d100:	f800283a 	ret
    d104:	4a3ffd1e 	bne	r9,r8,d0fc <__alt_data_end+0xff00d0fc>
    d108:	21bffc1e 	bne	r4,r6,d0fc <__alt_data_end+0xff00d0fc>
    d10c:	29c00c26 	beq	r5,r7,d140 <__eqdf2+0x80>
    d110:	103ffa1e 	bne	r2,zero,d0fc <__alt_data_end+0xff00d0fc>
    d114:	2244b03a 	or	r2,r4,r9
    d118:	1004c03a 	cmpne	r2,r2,zero
    d11c:	f800283a 	ret
    d120:	3214b03a 	or	r10,r6,r8
    d124:	503ff426 	beq	r10,zero,d0f8 <__alt_data_end+0xff00d0f8>
    d128:	00800044 	movi	r2,1
    d12c:	f800283a 	ret
    d130:	2254b03a 	or	r10,r4,r9
    d134:	503fee26 	beq	r10,zero,d0f0 <__alt_data_end+0xff00d0f0>
    d138:	00800044 	movi	r2,1
    d13c:	f800283a 	ret
    d140:	0005883a 	mov	r2,zero
    d144:	f800283a 	ret

0000d148 <__gedf2>:
    d148:	2804d53a 	srli	r2,r5,20
    d14c:	3806d53a 	srli	r3,r7,20
    d150:	02000434 	movhi	r8,16
    d154:	423fffc4 	addi	r8,r8,-1
    d158:	1081ffcc 	andi	r2,r2,2047
    d15c:	0241ffc4 	movi	r9,2047
    d160:	2a14703a 	and	r10,r5,r8
    d164:	18c1ffcc 	andi	r3,r3,2047
    d168:	3a10703a 	and	r8,r7,r8
    d16c:	280ad7fa 	srli	r5,r5,31
    d170:	380ed7fa 	srli	r7,r7,31
    d174:	12401d26 	beq	r2,r9,d1ec <__gedf2+0xa4>
    d178:	0241ffc4 	movi	r9,2047
    d17c:	1a401226 	beq	r3,r9,d1c8 <__gedf2+0x80>
    d180:	1000081e 	bne	r2,zero,d1a4 <__gedf2+0x5c>
    d184:	2296b03a 	or	r11,r4,r10
    d188:	5813003a 	cmpeq	r9,r11,zero
    d18c:	1800091e 	bne	r3,zero,d1b4 <__gedf2+0x6c>
    d190:	3218b03a 	or	r12,r6,r8
    d194:	6000071e 	bne	r12,zero,d1b4 <__gedf2+0x6c>
    d198:	0005883a 	mov	r2,zero
    d19c:	5800101e 	bne	r11,zero,d1e0 <__gedf2+0x98>
    d1a0:	f800283a 	ret
    d1a4:	18000c1e 	bne	r3,zero,d1d8 <__gedf2+0x90>
    d1a8:	3212b03a 	or	r9,r6,r8
    d1ac:	48000c26 	beq	r9,zero,d1e0 <__gedf2+0x98>
    d1b0:	0013883a 	mov	r9,zero
    d1b4:	39c03fcc 	andi	r7,r7,255
    d1b8:	48000826 	beq	r9,zero,d1dc <__gedf2+0x94>
    d1bc:	38000926 	beq	r7,zero,d1e4 <__gedf2+0x9c>
    d1c0:	00800044 	movi	r2,1
    d1c4:	f800283a 	ret
    d1c8:	3212b03a 	or	r9,r6,r8
    d1cc:	483fec26 	beq	r9,zero,d180 <__alt_data_end+0xff00d180>
    d1d0:	00bfff84 	movi	r2,-2
    d1d4:	f800283a 	ret
    d1d8:	39c03fcc 	andi	r7,r7,255
    d1dc:	29c00626 	beq	r5,r7,d1f8 <__gedf2+0xb0>
    d1e0:	283ff726 	beq	r5,zero,d1c0 <__alt_data_end+0xff00d1c0>
    d1e4:	00bfffc4 	movi	r2,-1
    d1e8:	f800283a 	ret
    d1ec:	2292b03a 	or	r9,r4,r10
    d1f0:	483fe126 	beq	r9,zero,d178 <__alt_data_end+0xff00d178>
    d1f4:	003ff606 	br	d1d0 <__alt_data_end+0xff00d1d0>
    d1f8:	18bff916 	blt	r3,r2,d1e0 <__alt_data_end+0xff00d1e0>
    d1fc:	10c00316 	blt	r2,r3,d20c <__gedf2+0xc4>
    d200:	42bff736 	bltu	r8,r10,d1e0 <__alt_data_end+0xff00d1e0>
    d204:	52000326 	beq	r10,r8,d214 <__gedf2+0xcc>
    d208:	5200042e 	bgeu	r10,r8,d21c <__gedf2+0xd4>
    d20c:	283fec1e 	bne	r5,zero,d1c0 <__alt_data_end+0xff00d1c0>
    d210:	003ff406 	br	d1e4 <__alt_data_end+0xff00d1e4>
    d214:	313ff236 	bltu	r6,r4,d1e0 <__alt_data_end+0xff00d1e0>
    d218:	21bffc36 	bltu	r4,r6,d20c <__alt_data_end+0xff00d20c>
    d21c:	0005883a 	mov	r2,zero
    d220:	f800283a 	ret

0000d224 <__ledf2>:
    d224:	2804d53a 	srli	r2,r5,20
    d228:	3810d53a 	srli	r8,r7,20
    d22c:	00c00434 	movhi	r3,16
    d230:	18ffffc4 	addi	r3,r3,-1
    d234:	1081ffcc 	andi	r2,r2,2047
    d238:	0241ffc4 	movi	r9,2047
    d23c:	28d4703a 	and	r10,r5,r3
    d240:	4201ffcc 	andi	r8,r8,2047
    d244:	38c6703a 	and	r3,r7,r3
    d248:	280ad7fa 	srli	r5,r5,31
    d24c:	380ed7fa 	srli	r7,r7,31
    d250:	12401f26 	beq	r2,r9,d2d0 <__ledf2+0xac>
    d254:	0241ffc4 	movi	r9,2047
    d258:	42401426 	beq	r8,r9,d2ac <__ledf2+0x88>
    d25c:	1000091e 	bne	r2,zero,d284 <__ledf2+0x60>
    d260:	2296b03a 	or	r11,r4,r10
    d264:	5813003a 	cmpeq	r9,r11,zero
    d268:	29403fcc 	andi	r5,r5,255
    d26c:	40000a1e 	bne	r8,zero,d298 <__ledf2+0x74>
    d270:	30d8b03a 	or	r12,r6,r3
    d274:	6000081e 	bne	r12,zero,d298 <__ledf2+0x74>
    d278:	0005883a 	mov	r2,zero
    d27c:	5800111e 	bne	r11,zero,d2c4 <__ledf2+0xa0>
    d280:	f800283a 	ret
    d284:	29403fcc 	andi	r5,r5,255
    d288:	40000c1e 	bne	r8,zero,d2bc <__ledf2+0x98>
    d28c:	30d2b03a 	or	r9,r6,r3
    d290:	48000c26 	beq	r9,zero,d2c4 <__ledf2+0xa0>
    d294:	0013883a 	mov	r9,zero
    d298:	39c03fcc 	andi	r7,r7,255
    d29c:	48000826 	beq	r9,zero,d2c0 <__ledf2+0x9c>
    d2a0:	38001126 	beq	r7,zero,d2e8 <__ledf2+0xc4>
    d2a4:	00800044 	movi	r2,1
    d2a8:	f800283a 	ret
    d2ac:	30d2b03a 	or	r9,r6,r3
    d2b0:	483fea26 	beq	r9,zero,d25c <__alt_data_end+0xff00d25c>
    d2b4:	00800084 	movi	r2,2
    d2b8:	f800283a 	ret
    d2bc:	39c03fcc 	andi	r7,r7,255
    d2c0:	39400726 	beq	r7,r5,d2e0 <__ledf2+0xbc>
    d2c4:	2800081e 	bne	r5,zero,d2e8 <__ledf2+0xc4>
    d2c8:	00800044 	movi	r2,1
    d2cc:	f800283a 	ret
    d2d0:	2292b03a 	or	r9,r4,r10
    d2d4:	483fdf26 	beq	r9,zero,d254 <__alt_data_end+0xff00d254>
    d2d8:	00800084 	movi	r2,2
    d2dc:	f800283a 	ret
    d2e0:	4080030e 	bge	r8,r2,d2f0 <__ledf2+0xcc>
    d2e4:	383fef26 	beq	r7,zero,d2a4 <__alt_data_end+0xff00d2a4>
    d2e8:	00bfffc4 	movi	r2,-1
    d2ec:	f800283a 	ret
    d2f0:	123feb16 	blt	r2,r8,d2a0 <__alt_data_end+0xff00d2a0>
    d2f4:	1abff336 	bltu	r3,r10,d2c4 <__alt_data_end+0xff00d2c4>
    d2f8:	50c00326 	beq	r10,r3,d308 <__ledf2+0xe4>
    d2fc:	50c0042e 	bgeu	r10,r3,d310 <__ledf2+0xec>
    d300:	283fe81e 	bne	r5,zero,d2a4 <__alt_data_end+0xff00d2a4>
    d304:	003ff806 	br	d2e8 <__alt_data_end+0xff00d2e8>
    d308:	313fee36 	bltu	r6,r4,d2c4 <__alt_data_end+0xff00d2c4>
    d30c:	21bffc36 	bltu	r4,r6,d300 <__alt_data_end+0xff00d300>
    d310:	0005883a 	mov	r2,zero
    d314:	f800283a 	ret

0000d318 <__muldf3>:
    d318:	defff304 	addi	sp,sp,-52
    d31c:	2804d53a 	srli	r2,r5,20
    d320:	dd800915 	stw	r22,36(sp)
    d324:	282cd7fa 	srli	r22,r5,31
    d328:	dc000315 	stw	r16,12(sp)
    d32c:	04000434 	movhi	r16,16
    d330:	dd400815 	stw	r21,32(sp)
    d334:	dc800515 	stw	r18,20(sp)
    d338:	843fffc4 	addi	r16,r16,-1
    d33c:	dfc00c15 	stw	ra,48(sp)
    d340:	df000b15 	stw	fp,44(sp)
    d344:	ddc00a15 	stw	r23,40(sp)
    d348:	dd000715 	stw	r20,28(sp)
    d34c:	dcc00615 	stw	r19,24(sp)
    d350:	dc400415 	stw	r17,16(sp)
    d354:	1481ffcc 	andi	r18,r2,2047
    d358:	2c20703a 	and	r16,r5,r16
    d35c:	b02b883a 	mov	r21,r22
    d360:	b2403fcc 	andi	r9,r22,255
    d364:	90006026 	beq	r18,zero,d4e8 <__muldf3+0x1d0>
    d368:	0081ffc4 	movi	r2,2047
    d36c:	2029883a 	mov	r20,r4
    d370:	90803626 	beq	r18,r2,d44c <__muldf3+0x134>
    d374:	80800434 	orhi	r2,r16,16
    d378:	100490fa 	slli	r2,r2,3
    d37c:	2020d77a 	srli	r16,r4,29
    d380:	202890fa 	slli	r20,r4,3
    d384:	94bf0044 	addi	r18,r18,-1023
    d388:	80a0b03a 	or	r16,r16,r2
    d38c:	0027883a 	mov	r19,zero
    d390:	0039883a 	mov	fp,zero
    d394:	3804d53a 	srli	r2,r7,20
    d398:	382ed7fa 	srli	r23,r7,31
    d39c:	04400434 	movhi	r17,16
    d3a0:	8c7fffc4 	addi	r17,r17,-1
    d3a4:	1081ffcc 	andi	r2,r2,2047
    d3a8:	3011883a 	mov	r8,r6
    d3ac:	3c62703a 	and	r17,r7,r17
    d3b0:	ba803fcc 	andi	r10,r23,255
    d3b4:	10006d26 	beq	r2,zero,d56c <__muldf3+0x254>
    d3b8:	00c1ffc4 	movi	r3,2047
    d3bc:	10c06526 	beq	r2,r3,d554 <__muldf3+0x23c>
    d3c0:	88c00434 	orhi	r3,r17,16
    d3c4:	180690fa 	slli	r3,r3,3
    d3c8:	3022d77a 	srli	r17,r6,29
    d3cc:	301090fa 	slli	r8,r6,3
    d3d0:	10bf0044 	addi	r2,r2,-1023
    d3d4:	88e2b03a 	or	r17,r17,r3
    d3d8:	000b883a 	mov	r5,zero
    d3dc:	9085883a 	add	r2,r18,r2
    d3e0:	2cc8b03a 	or	r4,r5,r19
    d3e4:	00c003c4 	movi	r3,15
    d3e8:	bdacf03a 	xor	r22,r23,r22
    d3ec:	12c00044 	addi	r11,r2,1
    d3f0:	19009936 	bltu	r3,r4,d658 <__muldf3+0x340>
    d3f4:	200890ba 	slli	r4,r4,2
    d3f8:	00c00074 	movhi	r3,1
    d3fc:	18f50304 	addi	r3,r3,-11252
    d400:	20c9883a 	add	r4,r4,r3
    d404:	20c00017 	ldw	r3,0(r4)
    d408:	1800683a 	jmp	r3
    d40c:	0000d658 	cmpnei	zero,zero,857
    d410:	0000d46c 	andhi	zero,zero,849
    d414:	0000d46c 	andhi	zero,zero,849
    d418:	0000d468 	cmpgeui	zero,zero,849
    d41c:	0000d634 	movhi	zero,856
    d420:	0000d634 	movhi	zero,856
    d424:	0000d61c 	xori	zero,zero,856
    d428:	0000d468 	cmpgeui	zero,zero,849
    d42c:	0000d634 	movhi	zero,856
    d430:	0000d61c 	xori	zero,zero,856
    d434:	0000d634 	movhi	zero,856
    d438:	0000d468 	cmpgeui	zero,zero,849
    d43c:	0000d644 	movi	zero,857
    d440:	0000d644 	movi	zero,857
    d444:	0000d644 	movi	zero,857
    d448:	0000d860 	cmpeqi	zero,zero,865
    d44c:	2404b03a 	or	r2,r4,r16
    d450:	10006f1e 	bne	r2,zero,d610 <__muldf3+0x2f8>
    d454:	04c00204 	movi	r19,8
    d458:	0021883a 	mov	r16,zero
    d45c:	0029883a 	mov	r20,zero
    d460:	07000084 	movi	fp,2
    d464:	003fcb06 	br	d394 <__alt_data_end+0xff00d394>
    d468:	502d883a 	mov	r22,r10
    d46c:	00800084 	movi	r2,2
    d470:	28805726 	beq	r5,r2,d5d0 <__muldf3+0x2b8>
    d474:	008000c4 	movi	r2,3
    d478:	28816626 	beq	r5,r2,da14 <__muldf3+0x6fc>
    d47c:	00800044 	movi	r2,1
    d480:	2881411e 	bne	r5,r2,d988 <__muldf3+0x670>
    d484:	b02b883a 	mov	r21,r22
    d488:	0005883a 	mov	r2,zero
    d48c:	000b883a 	mov	r5,zero
    d490:	0029883a 	mov	r20,zero
    d494:	1004953a 	slli	r2,r2,20
    d498:	a8c03fcc 	andi	r3,r21,255
    d49c:	04400434 	movhi	r17,16
    d4a0:	8c7fffc4 	addi	r17,r17,-1
    d4a4:	180697fa 	slli	r3,r3,31
    d4a8:	2c4a703a 	and	r5,r5,r17
    d4ac:	288ab03a 	or	r5,r5,r2
    d4b0:	28c6b03a 	or	r3,r5,r3
    d4b4:	a005883a 	mov	r2,r20
    d4b8:	dfc00c17 	ldw	ra,48(sp)
    d4bc:	df000b17 	ldw	fp,44(sp)
    d4c0:	ddc00a17 	ldw	r23,40(sp)
    d4c4:	dd800917 	ldw	r22,36(sp)
    d4c8:	dd400817 	ldw	r21,32(sp)
    d4cc:	dd000717 	ldw	r20,28(sp)
    d4d0:	dcc00617 	ldw	r19,24(sp)
    d4d4:	dc800517 	ldw	r18,20(sp)
    d4d8:	dc400417 	ldw	r17,16(sp)
    d4dc:	dc000317 	ldw	r16,12(sp)
    d4e0:	dec00d04 	addi	sp,sp,52
    d4e4:	f800283a 	ret
    d4e8:	2404b03a 	or	r2,r4,r16
    d4ec:	2027883a 	mov	r19,r4
    d4f0:	10004226 	beq	r2,zero,d5fc <__muldf3+0x2e4>
    d4f4:	8000fc26 	beq	r16,zero,d8e8 <__muldf3+0x5d0>
    d4f8:	8009883a 	mov	r4,r16
    d4fc:	d9800215 	stw	r6,8(sp)
    d500:	d9c00015 	stw	r7,0(sp)
    d504:	da400115 	stw	r9,4(sp)
    d508:	000e5300 	call	e530 <__clzsi2>
    d50c:	d9800217 	ldw	r6,8(sp)
    d510:	d9c00017 	ldw	r7,0(sp)
    d514:	da400117 	ldw	r9,4(sp)
    d518:	113ffd44 	addi	r4,r2,-11
    d51c:	00c00704 	movi	r3,28
    d520:	1900ed16 	blt	r3,r4,d8d8 <__muldf3+0x5c0>
    d524:	00c00744 	movi	r3,29
    d528:	147ffe04 	addi	r17,r2,-8
    d52c:	1907c83a 	sub	r3,r3,r4
    d530:	8460983a 	sll	r16,r16,r17
    d534:	98c6d83a 	srl	r3,r19,r3
    d538:	9c68983a 	sll	r20,r19,r17
    d53c:	1c20b03a 	or	r16,r3,r16
    d540:	1080fcc4 	addi	r2,r2,1011
    d544:	00a5c83a 	sub	r18,zero,r2
    d548:	0027883a 	mov	r19,zero
    d54c:	0039883a 	mov	fp,zero
    d550:	003f9006 	br	d394 <__alt_data_end+0xff00d394>
    d554:	3446b03a 	or	r3,r6,r17
    d558:	1800261e 	bne	r3,zero,d5f4 <__muldf3+0x2dc>
    d55c:	0023883a 	mov	r17,zero
    d560:	0011883a 	mov	r8,zero
    d564:	01400084 	movi	r5,2
    d568:	003f9c06 	br	d3dc <__alt_data_end+0xff00d3dc>
    d56c:	3446b03a 	or	r3,r6,r17
    d570:	18001c26 	beq	r3,zero,d5e4 <__muldf3+0x2cc>
    d574:	8800ce26 	beq	r17,zero,d8b0 <__muldf3+0x598>
    d578:	8809883a 	mov	r4,r17
    d57c:	d9800215 	stw	r6,8(sp)
    d580:	da400115 	stw	r9,4(sp)
    d584:	da800015 	stw	r10,0(sp)
    d588:	000e5300 	call	e530 <__clzsi2>
    d58c:	d9800217 	ldw	r6,8(sp)
    d590:	da400117 	ldw	r9,4(sp)
    d594:	da800017 	ldw	r10,0(sp)
    d598:	113ffd44 	addi	r4,r2,-11
    d59c:	00c00704 	movi	r3,28
    d5a0:	1900bf16 	blt	r3,r4,d8a0 <__muldf3+0x588>
    d5a4:	00c00744 	movi	r3,29
    d5a8:	123ffe04 	addi	r8,r2,-8
    d5ac:	1907c83a 	sub	r3,r3,r4
    d5b0:	8a22983a 	sll	r17,r17,r8
    d5b4:	30c6d83a 	srl	r3,r6,r3
    d5b8:	3210983a 	sll	r8,r6,r8
    d5bc:	1c62b03a 	or	r17,r3,r17
    d5c0:	1080fcc4 	addi	r2,r2,1011
    d5c4:	0085c83a 	sub	r2,zero,r2
    d5c8:	000b883a 	mov	r5,zero
    d5cc:	003f8306 	br	d3dc <__alt_data_end+0xff00d3dc>
    d5d0:	b02b883a 	mov	r21,r22
    d5d4:	0081ffc4 	movi	r2,2047
    d5d8:	000b883a 	mov	r5,zero
    d5dc:	0029883a 	mov	r20,zero
    d5e0:	003fac06 	br	d494 <__alt_data_end+0xff00d494>
    d5e4:	0023883a 	mov	r17,zero
    d5e8:	0011883a 	mov	r8,zero
    d5ec:	01400044 	movi	r5,1
    d5f0:	003f7a06 	br	d3dc <__alt_data_end+0xff00d3dc>
    d5f4:	014000c4 	movi	r5,3
    d5f8:	003f7806 	br	d3dc <__alt_data_end+0xff00d3dc>
    d5fc:	04c00104 	movi	r19,4
    d600:	0021883a 	mov	r16,zero
    d604:	0029883a 	mov	r20,zero
    d608:	07000044 	movi	fp,1
    d60c:	003f6106 	br	d394 <__alt_data_end+0xff00d394>
    d610:	04c00304 	movi	r19,12
    d614:	070000c4 	movi	fp,3
    d618:	003f5e06 	br	d394 <__alt_data_end+0xff00d394>
    d61c:	01400434 	movhi	r5,16
    d620:	002b883a 	mov	r21,zero
    d624:	297fffc4 	addi	r5,r5,-1
    d628:	053fffc4 	movi	r20,-1
    d62c:	0081ffc4 	movi	r2,2047
    d630:	003f9806 	br	d494 <__alt_data_end+0xff00d494>
    d634:	8023883a 	mov	r17,r16
    d638:	a011883a 	mov	r8,r20
    d63c:	e00b883a 	mov	r5,fp
    d640:	003f8a06 	br	d46c <__alt_data_end+0xff00d46c>
    d644:	8023883a 	mov	r17,r16
    d648:	a011883a 	mov	r8,r20
    d64c:	482d883a 	mov	r22,r9
    d650:	e00b883a 	mov	r5,fp
    d654:	003f8506 	br	d46c <__alt_data_end+0xff00d46c>
    d658:	a00ad43a 	srli	r5,r20,16
    d65c:	401ad43a 	srli	r13,r8,16
    d660:	a53fffcc 	andi	r20,r20,65535
    d664:	423fffcc 	andi	r8,r8,65535
    d668:	4519383a 	mul	r12,r8,r20
    d66c:	4147383a 	mul	r3,r8,r5
    d670:	6d09383a 	mul	r4,r13,r20
    d674:	600cd43a 	srli	r6,r12,16
    d678:	2b5d383a 	mul	r14,r5,r13
    d67c:	20c9883a 	add	r4,r4,r3
    d680:	310d883a 	add	r6,r6,r4
    d684:	30c0022e 	bgeu	r6,r3,d690 <__muldf3+0x378>
    d688:	00c00074 	movhi	r3,1
    d68c:	70dd883a 	add	r14,r14,r3
    d690:	8826d43a 	srli	r19,r17,16
    d694:	8bffffcc 	andi	r15,r17,65535
    d698:	7d23383a 	mul	r17,r15,r20
    d69c:	7949383a 	mul	r4,r15,r5
    d6a0:	9d29383a 	mul	r20,r19,r20
    d6a4:	8814d43a 	srli	r10,r17,16
    d6a8:	3012943a 	slli	r9,r6,16
    d6ac:	a129883a 	add	r20,r20,r4
    d6b0:	633fffcc 	andi	r12,r12,65535
    d6b4:	5515883a 	add	r10,r10,r20
    d6b8:	3006d43a 	srli	r3,r6,16
    d6bc:	4b13883a 	add	r9,r9,r12
    d6c0:	2ccb383a 	mul	r5,r5,r19
    d6c4:	5100022e 	bgeu	r10,r4,d6d0 <__muldf3+0x3b8>
    d6c8:	01000074 	movhi	r4,1
    d6cc:	290b883a 	add	r5,r5,r4
    d6d0:	802ad43a 	srli	r21,r16,16
    d6d4:	843fffcc 	andi	r16,r16,65535
    d6d8:	440d383a 	mul	r6,r8,r16
    d6dc:	4565383a 	mul	r18,r8,r21
    d6e0:	8349383a 	mul	r4,r16,r13
    d6e4:	500e943a 	slli	r7,r10,16
    d6e8:	3010d43a 	srli	r8,r6,16
    d6ec:	5028d43a 	srli	r20,r10,16
    d6f0:	2489883a 	add	r4,r4,r18
    d6f4:	8abfffcc 	andi	r10,r17,65535
    d6f8:	3a95883a 	add	r10,r7,r10
    d6fc:	4119883a 	add	r12,r8,r4
    d700:	a169883a 	add	r20,r20,r5
    d704:	1a87883a 	add	r3,r3,r10
    d708:	6d5b383a 	mul	r13,r13,r21
    d70c:	6480022e 	bgeu	r12,r18,d718 <__muldf3+0x400>
    d710:	01000074 	movhi	r4,1
    d714:	691b883a 	add	r13,r13,r4
    d718:	7c25383a 	mul	r18,r15,r16
    d71c:	7d4b383a 	mul	r5,r15,r21
    d720:	84cf383a 	mul	r7,r16,r19
    d724:	901ed43a 	srli	r15,r18,16
    d728:	6008d43a 	srli	r4,r12,16
    d72c:	6010943a 	slli	r8,r12,16
    d730:	394f883a 	add	r7,r7,r5
    d734:	333fffcc 	andi	r12,r6,65535
    d738:	79df883a 	add	r15,r15,r7
    d73c:	235b883a 	add	r13,r4,r13
    d740:	9d63383a 	mul	r17,r19,r21
    d744:	4309883a 	add	r4,r8,r12
    d748:	7940022e 	bgeu	r15,r5,d754 <__muldf3+0x43c>
    d74c:	01400074 	movhi	r5,1
    d750:	8963883a 	add	r17,r17,r5
    d754:	780a943a 	slli	r5,r15,16
    d758:	91bfffcc 	andi	r6,r18,65535
    d75c:	70c7883a 	add	r3,r14,r3
    d760:	298d883a 	add	r6,r5,r6
    d764:	1a8f803a 	cmpltu	r7,r3,r10
    d768:	350b883a 	add	r5,r6,r20
    d76c:	20c7883a 	add	r3,r4,r3
    d770:	3955883a 	add	r10,r7,r5
    d774:	1909803a 	cmpltu	r4,r3,r4
    d778:	6a91883a 	add	r8,r13,r10
    d77c:	780cd43a 	srli	r6,r15,16
    d780:	2219883a 	add	r12,r4,r8
    d784:	2d0b803a 	cmpltu	r5,r5,r20
    d788:	51cf803a 	cmpltu	r7,r10,r7
    d78c:	29ceb03a 	or	r7,r5,r7
    d790:	4351803a 	cmpltu	r8,r8,r13
    d794:	610b803a 	cmpltu	r5,r12,r4
    d798:	4148b03a 	or	r4,r8,r5
    d79c:	398f883a 	add	r7,r7,r6
    d7a0:	3909883a 	add	r4,r7,r4
    d7a4:	1810927a 	slli	r8,r3,9
    d7a8:	2449883a 	add	r4,r4,r17
    d7ac:	2008927a 	slli	r4,r4,9
    d7b0:	6022d5fa 	srli	r17,r12,23
    d7b4:	1806d5fa 	srli	r3,r3,23
    d7b8:	4252b03a 	or	r9,r8,r9
    d7bc:	600a927a 	slli	r5,r12,9
    d7c0:	4810c03a 	cmpne	r8,r9,zero
    d7c4:	2462b03a 	or	r17,r4,r17
    d7c8:	40c6b03a 	or	r3,r8,r3
    d7cc:	8900402c 	andhi	r4,r17,256
    d7d0:	1950b03a 	or	r8,r3,r5
    d7d4:	20000726 	beq	r4,zero,d7f4 <__muldf3+0x4dc>
    d7d8:	4006d07a 	srli	r3,r8,1
    d7dc:	880497fa 	slli	r2,r17,31
    d7e0:	4200004c 	andi	r8,r8,1
    d7e4:	8822d07a 	srli	r17,r17,1
    d7e8:	1a10b03a 	or	r8,r3,r8
    d7ec:	1210b03a 	or	r8,r2,r8
    d7f0:	5805883a 	mov	r2,r11
    d7f4:	1140ffc4 	addi	r5,r2,1023
    d7f8:	0140440e 	bge	zero,r5,d90c <__muldf3+0x5f4>
    d7fc:	40c001cc 	andi	r3,r8,7
    d800:	18000726 	beq	r3,zero,d820 <__muldf3+0x508>
    d804:	40c003cc 	andi	r3,r8,15
    d808:	01000104 	movi	r4,4
    d80c:	19000426 	beq	r3,r4,d820 <__muldf3+0x508>
    d810:	4107883a 	add	r3,r8,r4
    d814:	1a11803a 	cmpltu	r8,r3,r8
    d818:	8a23883a 	add	r17,r17,r8
    d81c:	1811883a 	mov	r8,r3
    d820:	88c0402c 	andhi	r3,r17,256
    d824:	18000426 	beq	r3,zero,d838 <__muldf3+0x520>
    d828:	11410004 	addi	r5,r2,1024
    d82c:	00bfc034 	movhi	r2,65280
    d830:	10bfffc4 	addi	r2,r2,-1
    d834:	88a2703a 	and	r17,r17,r2
    d838:	0081ff84 	movi	r2,2046
    d83c:	117f6416 	blt	r2,r5,d5d0 <__alt_data_end+0xff00d5d0>
    d840:	8828977a 	slli	r20,r17,29
    d844:	4010d0fa 	srli	r8,r8,3
    d848:	8822927a 	slli	r17,r17,9
    d84c:	2881ffcc 	andi	r2,r5,2047
    d850:	a228b03a 	or	r20,r20,r8
    d854:	880ad33a 	srli	r5,r17,12
    d858:	b02b883a 	mov	r21,r22
    d85c:	003f0d06 	br	d494 <__alt_data_end+0xff00d494>
    d860:	8080022c 	andhi	r2,r16,8
    d864:	10000926 	beq	r2,zero,d88c <__muldf3+0x574>
    d868:	8880022c 	andhi	r2,r17,8
    d86c:	1000071e 	bne	r2,zero,d88c <__muldf3+0x574>
    d870:	00800434 	movhi	r2,16
    d874:	89400234 	orhi	r5,r17,8
    d878:	10bfffc4 	addi	r2,r2,-1
    d87c:	b82b883a 	mov	r21,r23
    d880:	288a703a 	and	r5,r5,r2
    d884:	4029883a 	mov	r20,r8
    d888:	003f6806 	br	d62c <__alt_data_end+0xff00d62c>
    d88c:	00800434 	movhi	r2,16
    d890:	81400234 	orhi	r5,r16,8
    d894:	10bfffc4 	addi	r2,r2,-1
    d898:	288a703a 	and	r5,r5,r2
    d89c:	003f6306 	br	d62c <__alt_data_end+0xff00d62c>
    d8a0:	147ff604 	addi	r17,r2,-40
    d8a4:	3462983a 	sll	r17,r6,r17
    d8a8:	0011883a 	mov	r8,zero
    d8ac:	003f4406 	br	d5c0 <__alt_data_end+0xff00d5c0>
    d8b0:	3009883a 	mov	r4,r6
    d8b4:	d9800215 	stw	r6,8(sp)
    d8b8:	da400115 	stw	r9,4(sp)
    d8bc:	da800015 	stw	r10,0(sp)
    d8c0:	000e5300 	call	e530 <__clzsi2>
    d8c4:	10800804 	addi	r2,r2,32
    d8c8:	da800017 	ldw	r10,0(sp)
    d8cc:	da400117 	ldw	r9,4(sp)
    d8d0:	d9800217 	ldw	r6,8(sp)
    d8d4:	003f3006 	br	d598 <__alt_data_end+0xff00d598>
    d8d8:	143ff604 	addi	r16,r2,-40
    d8dc:	9c20983a 	sll	r16,r19,r16
    d8e0:	0029883a 	mov	r20,zero
    d8e4:	003f1606 	br	d540 <__alt_data_end+0xff00d540>
    d8e8:	d9800215 	stw	r6,8(sp)
    d8ec:	d9c00015 	stw	r7,0(sp)
    d8f0:	da400115 	stw	r9,4(sp)
    d8f4:	000e5300 	call	e530 <__clzsi2>
    d8f8:	10800804 	addi	r2,r2,32
    d8fc:	da400117 	ldw	r9,4(sp)
    d900:	d9c00017 	ldw	r7,0(sp)
    d904:	d9800217 	ldw	r6,8(sp)
    d908:	003f0306 	br	d518 <__alt_data_end+0xff00d518>
    d90c:	00c00044 	movi	r3,1
    d910:	1947c83a 	sub	r3,r3,r5
    d914:	00800e04 	movi	r2,56
    d918:	10feda16 	blt	r2,r3,d484 <__alt_data_end+0xff00d484>
    d91c:	008007c4 	movi	r2,31
    d920:	10c01b16 	blt	r2,r3,d990 <__muldf3+0x678>
    d924:	00800804 	movi	r2,32
    d928:	10c5c83a 	sub	r2,r2,r3
    d92c:	888a983a 	sll	r5,r17,r2
    d930:	40c8d83a 	srl	r4,r8,r3
    d934:	4084983a 	sll	r2,r8,r2
    d938:	88e2d83a 	srl	r17,r17,r3
    d93c:	2906b03a 	or	r3,r5,r4
    d940:	1004c03a 	cmpne	r2,r2,zero
    d944:	1886b03a 	or	r3,r3,r2
    d948:	188001cc 	andi	r2,r3,7
    d94c:	10000726 	beq	r2,zero,d96c <__muldf3+0x654>
    d950:	188003cc 	andi	r2,r3,15
    d954:	01000104 	movi	r4,4
    d958:	11000426 	beq	r2,r4,d96c <__muldf3+0x654>
    d95c:	1805883a 	mov	r2,r3
    d960:	10c00104 	addi	r3,r2,4
    d964:	1885803a 	cmpltu	r2,r3,r2
    d968:	88a3883a 	add	r17,r17,r2
    d96c:	8880202c 	andhi	r2,r17,128
    d970:	10001c26 	beq	r2,zero,d9e4 <__muldf3+0x6cc>
    d974:	b02b883a 	mov	r21,r22
    d978:	00800044 	movi	r2,1
    d97c:	000b883a 	mov	r5,zero
    d980:	0029883a 	mov	r20,zero
    d984:	003ec306 	br	d494 <__alt_data_end+0xff00d494>
    d988:	5805883a 	mov	r2,r11
    d98c:	003f9906 	br	d7f4 <__alt_data_end+0xff00d7f4>
    d990:	00bff844 	movi	r2,-31
    d994:	1145c83a 	sub	r2,r2,r5
    d998:	8888d83a 	srl	r4,r17,r2
    d99c:	00800804 	movi	r2,32
    d9a0:	18801a26 	beq	r3,r2,da0c <__muldf3+0x6f4>
    d9a4:	00801004 	movi	r2,64
    d9a8:	10c5c83a 	sub	r2,r2,r3
    d9ac:	8884983a 	sll	r2,r17,r2
    d9b0:	1204b03a 	or	r2,r2,r8
    d9b4:	1004c03a 	cmpne	r2,r2,zero
    d9b8:	2084b03a 	or	r2,r4,r2
    d9bc:	144001cc 	andi	r17,r2,7
    d9c0:	88000d1e 	bne	r17,zero,d9f8 <__muldf3+0x6e0>
    d9c4:	000b883a 	mov	r5,zero
    d9c8:	1028d0fa 	srli	r20,r2,3
    d9cc:	b02b883a 	mov	r21,r22
    d9d0:	0005883a 	mov	r2,zero
    d9d4:	a468b03a 	or	r20,r20,r17
    d9d8:	003eae06 	br	d494 <__alt_data_end+0xff00d494>
    d9dc:	1007883a 	mov	r3,r2
    d9e0:	0023883a 	mov	r17,zero
    d9e4:	880a927a 	slli	r5,r17,9
    d9e8:	1805883a 	mov	r2,r3
    d9ec:	8822977a 	slli	r17,r17,29
    d9f0:	280ad33a 	srli	r5,r5,12
    d9f4:	003ff406 	br	d9c8 <__alt_data_end+0xff00d9c8>
    d9f8:	10c003cc 	andi	r3,r2,15
    d9fc:	01000104 	movi	r4,4
    da00:	193ff626 	beq	r3,r4,d9dc <__alt_data_end+0xff00d9dc>
    da04:	0023883a 	mov	r17,zero
    da08:	003fd506 	br	d960 <__alt_data_end+0xff00d960>
    da0c:	0005883a 	mov	r2,zero
    da10:	003fe706 	br	d9b0 <__alt_data_end+0xff00d9b0>
    da14:	00800434 	movhi	r2,16
    da18:	89400234 	orhi	r5,r17,8
    da1c:	10bfffc4 	addi	r2,r2,-1
    da20:	b02b883a 	mov	r21,r22
    da24:	288a703a 	and	r5,r5,r2
    da28:	4029883a 	mov	r20,r8
    da2c:	003eff06 	br	d62c <__alt_data_end+0xff00d62c>

0000da30 <__subdf3>:
    da30:	02000434 	movhi	r8,16
    da34:	423fffc4 	addi	r8,r8,-1
    da38:	defffb04 	addi	sp,sp,-20
    da3c:	2a14703a 	and	r10,r5,r8
    da40:	3812d53a 	srli	r9,r7,20
    da44:	3a10703a 	and	r8,r7,r8
    da48:	2006d77a 	srli	r3,r4,29
    da4c:	3004d77a 	srli	r2,r6,29
    da50:	dc000015 	stw	r16,0(sp)
    da54:	501490fa 	slli	r10,r10,3
    da58:	2820d53a 	srli	r16,r5,20
    da5c:	401090fa 	slli	r8,r8,3
    da60:	dc800215 	stw	r18,8(sp)
    da64:	dc400115 	stw	r17,4(sp)
    da68:	dfc00415 	stw	ra,16(sp)
    da6c:	202290fa 	slli	r17,r4,3
    da70:	dcc00315 	stw	r19,12(sp)
    da74:	4a41ffcc 	andi	r9,r9,2047
    da78:	0101ffc4 	movi	r4,2047
    da7c:	2824d7fa 	srli	r18,r5,31
    da80:	8401ffcc 	andi	r16,r16,2047
    da84:	50c6b03a 	or	r3,r10,r3
    da88:	380ed7fa 	srli	r7,r7,31
    da8c:	408ab03a 	or	r5,r8,r2
    da90:	300c90fa 	slli	r6,r6,3
    da94:	49009626 	beq	r9,r4,dcf0 <__subdf3+0x2c0>
    da98:	39c0005c 	xori	r7,r7,1
    da9c:	8245c83a 	sub	r2,r16,r9
    daa0:	3c807426 	beq	r7,r18,dc74 <__subdf3+0x244>
    daa4:	0080af0e 	bge	zero,r2,dd64 <__subdf3+0x334>
    daa8:	48002a1e 	bne	r9,zero,db54 <__subdf3+0x124>
    daac:	2988b03a 	or	r4,r5,r6
    dab0:	20009a1e 	bne	r4,zero,dd1c <__subdf3+0x2ec>
    dab4:	888001cc 	andi	r2,r17,7
    dab8:	10000726 	beq	r2,zero,dad8 <__subdf3+0xa8>
    dabc:	888003cc 	andi	r2,r17,15
    dac0:	01000104 	movi	r4,4
    dac4:	11000426 	beq	r2,r4,dad8 <__subdf3+0xa8>
    dac8:	890b883a 	add	r5,r17,r4
    dacc:	2c63803a 	cmpltu	r17,r5,r17
    dad0:	1c47883a 	add	r3,r3,r17
    dad4:	2823883a 	mov	r17,r5
    dad8:	1880202c 	andhi	r2,r3,128
    dadc:	10005926 	beq	r2,zero,dc44 <__subdf3+0x214>
    dae0:	84000044 	addi	r16,r16,1
    dae4:	0081ffc4 	movi	r2,2047
    dae8:	8080be26 	beq	r16,r2,dde4 <__subdf3+0x3b4>
    daec:	017fe034 	movhi	r5,65408
    daf0:	297fffc4 	addi	r5,r5,-1
    daf4:	1946703a 	and	r3,r3,r5
    daf8:	1804977a 	slli	r2,r3,29
    dafc:	1806927a 	slli	r3,r3,9
    db00:	8822d0fa 	srli	r17,r17,3
    db04:	8401ffcc 	andi	r16,r16,2047
    db08:	180ad33a 	srli	r5,r3,12
    db0c:	9100004c 	andi	r4,r18,1
    db10:	1444b03a 	or	r2,r2,r17
    db14:	80c1ffcc 	andi	r3,r16,2047
    db18:	1820953a 	slli	r16,r3,20
    db1c:	20c03fcc 	andi	r3,r4,255
    db20:	180897fa 	slli	r4,r3,31
    db24:	00c00434 	movhi	r3,16
    db28:	18ffffc4 	addi	r3,r3,-1
    db2c:	28c6703a 	and	r3,r5,r3
    db30:	1c06b03a 	or	r3,r3,r16
    db34:	1906b03a 	or	r3,r3,r4
    db38:	dfc00417 	ldw	ra,16(sp)
    db3c:	dcc00317 	ldw	r19,12(sp)
    db40:	dc800217 	ldw	r18,8(sp)
    db44:	dc400117 	ldw	r17,4(sp)
    db48:	dc000017 	ldw	r16,0(sp)
    db4c:	dec00504 	addi	sp,sp,20
    db50:	f800283a 	ret
    db54:	0101ffc4 	movi	r4,2047
    db58:	813fd626 	beq	r16,r4,dab4 <__alt_data_end+0xff00dab4>
    db5c:	29402034 	orhi	r5,r5,128
    db60:	01000e04 	movi	r4,56
    db64:	2080a316 	blt	r4,r2,ddf4 <__subdf3+0x3c4>
    db68:	010007c4 	movi	r4,31
    db6c:	2080c616 	blt	r4,r2,de88 <__subdf3+0x458>
    db70:	01000804 	movi	r4,32
    db74:	2089c83a 	sub	r4,r4,r2
    db78:	2910983a 	sll	r8,r5,r4
    db7c:	308ed83a 	srl	r7,r6,r2
    db80:	3108983a 	sll	r4,r6,r4
    db84:	2884d83a 	srl	r2,r5,r2
    db88:	41ccb03a 	or	r6,r8,r7
    db8c:	2008c03a 	cmpne	r4,r4,zero
    db90:	310cb03a 	or	r6,r6,r4
    db94:	898dc83a 	sub	r6,r17,r6
    db98:	89a3803a 	cmpltu	r17,r17,r6
    db9c:	1887c83a 	sub	r3,r3,r2
    dba0:	1c47c83a 	sub	r3,r3,r17
    dba4:	3023883a 	mov	r17,r6
    dba8:	1880202c 	andhi	r2,r3,128
    dbac:	10002326 	beq	r2,zero,dc3c <__subdf3+0x20c>
    dbb0:	04c02034 	movhi	r19,128
    dbb4:	9cffffc4 	addi	r19,r19,-1
    dbb8:	1ce6703a 	and	r19,r3,r19
    dbbc:	98007a26 	beq	r19,zero,dda8 <__subdf3+0x378>
    dbc0:	9809883a 	mov	r4,r19
    dbc4:	000e5300 	call	e530 <__clzsi2>
    dbc8:	113ffe04 	addi	r4,r2,-8
    dbcc:	00c007c4 	movi	r3,31
    dbd0:	19007b16 	blt	r3,r4,ddc0 <__subdf3+0x390>
    dbd4:	00800804 	movi	r2,32
    dbd8:	1105c83a 	sub	r2,r2,r4
    dbdc:	8884d83a 	srl	r2,r17,r2
    dbe0:	9906983a 	sll	r3,r19,r4
    dbe4:	8922983a 	sll	r17,r17,r4
    dbe8:	10c4b03a 	or	r2,r2,r3
    dbec:	24007816 	blt	r4,r16,ddd0 <__subdf3+0x3a0>
    dbf0:	2421c83a 	sub	r16,r4,r16
    dbf4:	80c00044 	addi	r3,r16,1
    dbf8:	010007c4 	movi	r4,31
    dbfc:	20c09516 	blt	r4,r3,de54 <__subdf3+0x424>
    dc00:	01400804 	movi	r5,32
    dc04:	28cbc83a 	sub	r5,r5,r3
    dc08:	88c8d83a 	srl	r4,r17,r3
    dc0c:	8962983a 	sll	r17,r17,r5
    dc10:	114a983a 	sll	r5,r2,r5
    dc14:	10c6d83a 	srl	r3,r2,r3
    dc18:	8804c03a 	cmpne	r2,r17,zero
    dc1c:	290ab03a 	or	r5,r5,r4
    dc20:	28a2b03a 	or	r17,r5,r2
    dc24:	0021883a 	mov	r16,zero
    dc28:	003fa206 	br	dab4 <__alt_data_end+0xff00dab4>
    dc2c:	2090b03a 	or	r8,r4,r2
    dc30:	40018e26 	beq	r8,zero,e26c <__subdf3+0x83c>
    dc34:	1007883a 	mov	r3,r2
    dc38:	2023883a 	mov	r17,r4
    dc3c:	888001cc 	andi	r2,r17,7
    dc40:	103f9e1e 	bne	r2,zero,dabc <__alt_data_end+0xff00dabc>
    dc44:	1804977a 	slli	r2,r3,29
    dc48:	8822d0fa 	srli	r17,r17,3
    dc4c:	1810d0fa 	srli	r8,r3,3
    dc50:	9100004c 	andi	r4,r18,1
    dc54:	1444b03a 	or	r2,r2,r17
    dc58:	00c1ffc4 	movi	r3,2047
    dc5c:	80c02826 	beq	r16,r3,dd00 <__subdf3+0x2d0>
    dc60:	01400434 	movhi	r5,16
    dc64:	297fffc4 	addi	r5,r5,-1
    dc68:	80e0703a 	and	r16,r16,r3
    dc6c:	414a703a 	and	r5,r8,r5
    dc70:	003fa806 	br	db14 <__alt_data_end+0xff00db14>
    dc74:	0080630e 	bge	zero,r2,de04 <__subdf3+0x3d4>
    dc78:	48003026 	beq	r9,zero,dd3c <__subdf3+0x30c>
    dc7c:	0101ffc4 	movi	r4,2047
    dc80:	813f8c26 	beq	r16,r4,dab4 <__alt_data_end+0xff00dab4>
    dc84:	29402034 	orhi	r5,r5,128
    dc88:	01000e04 	movi	r4,56
    dc8c:	2080a90e 	bge	r4,r2,df34 <__subdf3+0x504>
    dc90:	298cb03a 	or	r6,r5,r6
    dc94:	3012c03a 	cmpne	r9,r6,zero
    dc98:	0005883a 	mov	r2,zero
    dc9c:	4c53883a 	add	r9,r9,r17
    dca0:	4c63803a 	cmpltu	r17,r9,r17
    dca4:	10c7883a 	add	r3,r2,r3
    dca8:	88c7883a 	add	r3,r17,r3
    dcac:	4823883a 	mov	r17,r9
    dcb0:	1880202c 	andhi	r2,r3,128
    dcb4:	1000d026 	beq	r2,zero,dff8 <__subdf3+0x5c8>
    dcb8:	84000044 	addi	r16,r16,1
    dcbc:	0081ffc4 	movi	r2,2047
    dcc0:	8080fe26 	beq	r16,r2,e0bc <__subdf3+0x68c>
    dcc4:	00bfe034 	movhi	r2,65408
    dcc8:	10bfffc4 	addi	r2,r2,-1
    dccc:	1886703a 	and	r3,r3,r2
    dcd0:	880ad07a 	srli	r5,r17,1
    dcd4:	180497fa 	slli	r2,r3,31
    dcd8:	8900004c 	andi	r4,r17,1
    dcdc:	2922b03a 	or	r17,r5,r4
    dce0:	1806d07a 	srli	r3,r3,1
    dce4:	1462b03a 	or	r17,r2,r17
    dce8:	3825883a 	mov	r18,r7
    dcec:	003f7106 	br	dab4 <__alt_data_end+0xff00dab4>
    dcf0:	2984b03a 	or	r2,r5,r6
    dcf4:	103f6826 	beq	r2,zero,da98 <__alt_data_end+0xff00da98>
    dcf8:	39c03fcc 	andi	r7,r7,255
    dcfc:	003f6706 	br	da9c <__alt_data_end+0xff00da9c>
    dd00:	4086b03a 	or	r3,r8,r2
    dd04:	18015226 	beq	r3,zero,e250 <__subdf3+0x820>
    dd08:	00c00434 	movhi	r3,16
    dd0c:	41400234 	orhi	r5,r8,8
    dd10:	18ffffc4 	addi	r3,r3,-1
    dd14:	28ca703a 	and	r5,r5,r3
    dd18:	003f7e06 	br	db14 <__alt_data_end+0xff00db14>
    dd1c:	10bfffc4 	addi	r2,r2,-1
    dd20:	1000491e 	bne	r2,zero,de48 <__subdf3+0x418>
    dd24:	898fc83a 	sub	r7,r17,r6
    dd28:	89e3803a 	cmpltu	r17,r17,r7
    dd2c:	1947c83a 	sub	r3,r3,r5
    dd30:	1c47c83a 	sub	r3,r3,r17
    dd34:	3823883a 	mov	r17,r7
    dd38:	003f9b06 	br	dba8 <__alt_data_end+0xff00dba8>
    dd3c:	2988b03a 	or	r4,r5,r6
    dd40:	203f5c26 	beq	r4,zero,dab4 <__alt_data_end+0xff00dab4>
    dd44:	10bfffc4 	addi	r2,r2,-1
    dd48:	1000931e 	bne	r2,zero,df98 <__subdf3+0x568>
    dd4c:	898d883a 	add	r6,r17,r6
    dd50:	3463803a 	cmpltu	r17,r6,r17
    dd54:	1947883a 	add	r3,r3,r5
    dd58:	88c7883a 	add	r3,r17,r3
    dd5c:	3023883a 	mov	r17,r6
    dd60:	003fd306 	br	dcb0 <__alt_data_end+0xff00dcb0>
    dd64:	1000541e 	bne	r2,zero,deb8 <__subdf3+0x488>
    dd68:	80800044 	addi	r2,r16,1
    dd6c:	1081ffcc 	andi	r2,r2,2047
    dd70:	01000044 	movi	r4,1
    dd74:	2080a20e 	bge	r4,r2,e000 <__subdf3+0x5d0>
    dd78:	8989c83a 	sub	r4,r17,r6
    dd7c:	8905803a 	cmpltu	r2,r17,r4
    dd80:	1967c83a 	sub	r19,r3,r5
    dd84:	98a7c83a 	sub	r19,r19,r2
    dd88:	9880202c 	andhi	r2,r19,128
    dd8c:	10006326 	beq	r2,zero,df1c <__subdf3+0x4ec>
    dd90:	3463c83a 	sub	r17,r6,r17
    dd94:	28c7c83a 	sub	r3,r5,r3
    dd98:	344d803a 	cmpltu	r6,r6,r17
    dd9c:	19a7c83a 	sub	r19,r3,r6
    dda0:	3825883a 	mov	r18,r7
    dda4:	983f861e 	bne	r19,zero,dbc0 <__alt_data_end+0xff00dbc0>
    dda8:	8809883a 	mov	r4,r17
    ddac:	000e5300 	call	e530 <__clzsi2>
    ddb0:	10800804 	addi	r2,r2,32
    ddb4:	113ffe04 	addi	r4,r2,-8
    ddb8:	00c007c4 	movi	r3,31
    ddbc:	193f850e 	bge	r3,r4,dbd4 <__alt_data_end+0xff00dbd4>
    ddc0:	10bff604 	addi	r2,r2,-40
    ddc4:	8884983a 	sll	r2,r17,r2
    ddc8:	0023883a 	mov	r17,zero
    ddcc:	243f880e 	bge	r4,r16,dbf0 <__alt_data_end+0xff00dbf0>
    ddd0:	00ffe034 	movhi	r3,65408
    ddd4:	18ffffc4 	addi	r3,r3,-1
    ddd8:	8121c83a 	sub	r16,r16,r4
    dddc:	10c6703a 	and	r3,r2,r3
    dde0:	003f3406 	br	dab4 <__alt_data_end+0xff00dab4>
    dde4:	9100004c 	andi	r4,r18,1
    dde8:	000b883a 	mov	r5,zero
    ddec:	0005883a 	mov	r2,zero
    ddf0:	003f4806 	br	db14 <__alt_data_end+0xff00db14>
    ddf4:	298cb03a 	or	r6,r5,r6
    ddf8:	300cc03a 	cmpne	r6,r6,zero
    ddfc:	0005883a 	mov	r2,zero
    de00:	003f6406 	br	db94 <__alt_data_end+0xff00db94>
    de04:	10009a1e 	bne	r2,zero,e070 <__subdf3+0x640>
    de08:	82400044 	addi	r9,r16,1
    de0c:	4881ffcc 	andi	r2,r9,2047
    de10:	02800044 	movi	r10,1
    de14:	5080670e 	bge	r10,r2,dfb4 <__subdf3+0x584>
    de18:	0081ffc4 	movi	r2,2047
    de1c:	4880af26 	beq	r9,r2,e0dc <__subdf3+0x6ac>
    de20:	898d883a 	add	r6,r17,r6
    de24:	1945883a 	add	r2,r3,r5
    de28:	3447803a 	cmpltu	r3,r6,r17
    de2c:	1887883a 	add	r3,r3,r2
    de30:	182297fa 	slli	r17,r3,31
    de34:	300cd07a 	srli	r6,r6,1
    de38:	1806d07a 	srli	r3,r3,1
    de3c:	4821883a 	mov	r16,r9
    de40:	89a2b03a 	or	r17,r17,r6
    de44:	003f1b06 	br	dab4 <__alt_data_end+0xff00dab4>
    de48:	0101ffc4 	movi	r4,2047
    de4c:	813f441e 	bne	r16,r4,db60 <__alt_data_end+0xff00db60>
    de50:	003f1806 	br	dab4 <__alt_data_end+0xff00dab4>
    de54:	843ff844 	addi	r16,r16,-31
    de58:	01400804 	movi	r5,32
    de5c:	1408d83a 	srl	r4,r2,r16
    de60:	19405026 	beq	r3,r5,dfa4 <__subdf3+0x574>
    de64:	01401004 	movi	r5,64
    de68:	28c7c83a 	sub	r3,r5,r3
    de6c:	10c4983a 	sll	r2,r2,r3
    de70:	88a2b03a 	or	r17,r17,r2
    de74:	8822c03a 	cmpne	r17,r17,zero
    de78:	2462b03a 	or	r17,r4,r17
    de7c:	0007883a 	mov	r3,zero
    de80:	0021883a 	mov	r16,zero
    de84:	003f6d06 	br	dc3c <__alt_data_end+0xff00dc3c>
    de88:	11fff804 	addi	r7,r2,-32
    de8c:	01000804 	movi	r4,32
    de90:	29ced83a 	srl	r7,r5,r7
    de94:	11004526 	beq	r2,r4,dfac <__subdf3+0x57c>
    de98:	01001004 	movi	r4,64
    de9c:	2089c83a 	sub	r4,r4,r2
    dea0:	2904983a 	sll	r2,r5,r4
    dea4:	118cb03a 	or	r6,r2,r6
    dea8:	300cc03a 	cmpne	r6,r6,zero
    deac:	398cb03a 	or	r6,r7,r6
    deb0:	0005883a 	mov	r2,zero
    deb4:	003f3706 	br	db94 <__alt_data_end+0xff00db94>
    deb8:	80002a26 	beq	r16,zero,df64 <__subdf3+0x534>
    debc:	0101ffc4 	movi	r4,2047
    dec0:	49006626 	beq	r9,r4,e05c <__subdf3+0x62c>
    dec4:	0085c83a 	sub	r2,zero,r2
    dec8:	18c02034 	orhi	r3,r3,128
    decc:	01000e04 	movi	r4,56
    ded0:	20807e16 	blt	r4,r2,e0cc <__subdf3+0x69c>
    ded4:	010007c4 	movi	r4,31
    ded8:	2080e716 	blt	r4,r2,e278 <__subdf3+0x848>
    dedc:	01000804 	movi	r4,32
    dee0:	2089c83a 	sub	r4,r4,r2
    dee4:	1914983a 	sll	r10,r3,r4
    dee8:	8890d83a 	srl	r8,r17,r2
    deec:	8908983a 	sll	r4,r17,r4
    def0:	1884d83a 	srl	r2,r3,r2
    def4:	5222b03a 	or	r17,r10,r8
    def8:	2006c03a 	cmpne	r3,r4,zero
    defc:	88e2b03a 	or	r17,r17,r3
    df00:	3463c83a 	sub	r17,r6,r17
    df04:	2885c83a 	sub	r2,r5,r2
    df08:	344d803a 	cmpltu	r6,r6,r17
    df0c:	1187c83a 	sub	r3,r2,r6
    df10:	4821883a 	mov	r16,r9
    df14:	3825883a 	mov	r18,r7
    df18:	003f2306 	br	dba8 <__alt_data_end+0xff00dba8>
    df1c:	24d0b03a 	or	r8,r4,r19
    df20:	40001b1e 	bne	r8,zero,df90 <__subdf3+0x560>
    df24:	0005883a 	mov	r2,zero
    df28:	0009883a 	mov	r4,zero
    df2c:	0021883a 	mov	r16,zero
    df30:	003f4906 	br	dc58 <__alt_data_end+0xff00dc58>
    df34:	010007c4 	movi	r4,31
    df38:	20803a16 	blt	r4,r2,e024 <__subdf3+0x5f4>
    df3c:	01000804 	movi	r4,32
    df40:	2089c83a 	sub	r4,r4,r2
    df44:	2912983a 	sll	r9,r5,r4
    df48:	3090d83a 	srl	r8,r6,r2
    df4c:	3108983a 	sll	r4,r6,r4
    df50:	2884d83a 	srl	r2,r5,r2
    df54:	4a12b03a 	or	r9,r9,r8
    df58:	2008c03a 	cmpne	r4,r4,zero
    df5c:	4912b03a 	or	r9,r9,r4
    df60:	003f4e06 	br	dc9c <__alt_data_end+0xff00dc9c>
    df64:	1c48b03a 	or	r4,r3,r17
    df68:	20003c26 	beq	r4,zero,e05c <__subdf3+0x62c>
    df6c:	0084303a 	nor	r2,zero,r2
    df70:	1000381e 	bne	r2,zero,e054 <__subdf3+0x624>
    df74:	3463c83a 	sub	r17,r6,r17
    df78:	28c5c83a 	sub	r2,r5,r3
    df7c:	344d803a 	cmpltu	r6,r6,r17
    df80:	1187c83a 	sub	r3,r2,r6
    df84:	4821883a 	mov	r16,r9
    df88:	3825883a 	mov	r18,r7
    df8c:	003f0606 	br	dba8 <__alt_data_end+0xff00dba8>
    df90:	2023883a 	mov	r17,r4
    df94:	003f0906 	br	dbbc <__alt_data_end+0xff00dbbc>
    df98:	0101ffc4 	movi	r4,2047
    df9c:	813f3a1e 	bne	r16,r4,dc88 <__alt_data_end+0xff00dc88>
    dfa0:	003ec406 	br	dab4 <__alt_data_end+0xff00dab4>
    dfa4:	0005883a 	mov	r2,zero
    dfa8:	003fb106 	br	de70 <__alt_data_end+0xff00de70>
    dfac:	0005883a 	mov	r2,zero
    dfb0:	003fbc06 	br	dea4 <__alt_data_end+0xff00dea4>
    dfb4:	1c44b03a 	or	r2,r3,r17
    dfb8:	80008e1e 	bne	r16,zero,e1f4 <__subdf3+0x7c4>
    dfbc:	1000c826 	beq	r2,zero,e2e0 <__subdf3+0x8b0>
    dfc0:	2984b03a 	or	r2,r5,r6
    dfc4:	103ebb26 	beq	r2,zero,dab4 <__alt_data_end+0xff00dab4>
    dfc8:	8989883a 	add	r4,r17,r6
    dfcc:	1945883a 	add	r2,r3,r5
    dfd0:	2447803a 	cmpltu	r3,r4,r17
    dfd4:	1887883a 	add	r3,r3,r2
    dfd8:	1880202c 	andhi	r2,r3,128
    dfdc:	2023883a 	mov	r17,r4
    dfe0:	103f1626 	beq	r2,zero,dc3c <__alt_data_end+0xff00dc3c>
    dfe4:	00bfe034 	movhi	r2,65408
    dfe8:	10bfffc4 	addi	r2,r2,-1
    dfec:	5021883a 	mov	r16,r10
    dff0:	1886703a 	and	r3,r3,r2
    dff4:	003eaf06 	br	dab4 <__alt_data_end+0xff00dab4>
    dff8:	3825883a 	mov	r18,r7
    dffc:	003f0f06 	br	dc3c <__alt_data_end+0xff00dc3c>
    e000:	1c44b03a 	or	r2,r3,r17
    e004:	8000251e 	bne	r16,zero,e09c <__subdf3+0x66c>
    e008:	1000661e 	bne	r2,zero,e1a4 <__subdf3+0x774>
    e00c:	2990b03a 	or	r8,r5,r6
    e010:	40009626 	beq	r8,zero,e26c <__subdf3+0x83c>
    e014:	2807883a 	mov	r3,r5
    e018:	3023883a 	mov	r17,r6
    e01c:	3825883a 	mov	r18,r7
    e020:	003ea406 	br	dab4 <__alt_data_end+0xff00dab4>
    e024:	127ff804 	addi	r9,r2,-32
    e028:	01000804 	movi	r4,32
    e02c:	2a52d83a 	srl	r9,r5,r9
    e030:	11008c26 	beq	r2,r4,e264 <__subdf3+0x834>
    e034:	01001004 	movi	r4,64
    e038:	2085c83a 	sub	r2,r4,r2
    e03c:	2884983a 	sll	r2,r5,r2
    e040:	118cb03a 	or	r6,r2,r6
    e044:	300cc03a 	cmpne	r6,r6,zero
    e048:	4992b03a 	or	r9,r9,r6
    e04c:	0005883a 	mov	r2,zero
    e050:	003f1206 	br	dc9c <__alt_data_end+0xff00dc9c>
    e054:	0101ffc4 	movi	r4,2047
    e058:	493f9c1e 	bne	r9,r4,decc <__alt_data_end+0xff00decc>
    e05c:	2807883a 	mov	r3,r5
    e060:	3023883a 	mov	r17,r6
    e064:	4821883a 	mov	r16,r9
    e068:	3825883a 	mov	r18,r7
    e06c:	003e9106 	br	dab4 <__alt_data_end+0xff00dab4>
    e070:	80001f1e 	bne	r16,zero,e0f0 <__subdf3+0x6c0>
    e074:	1c48b03a 	or	r4,r3,r17
    e078:	20005a26 	beq	r4,zero,e1e4 <__subdf3+0x7b4>
    e07c:	0084303a 	nor	r2,zero,r2
    e080:	1000561e 	bne	r2,zero,e1dc <__subdf3+0x7ac>
    e084:	89a3883a 	add	r17,r17,r6
    e088:	1945883a 	add	r2,r3,r5
    e08c:	898d803a 	cmpltu	r6,r17,r6
    e090:	3087883a 	add	r3,r6,r2
    e094:	4821883a 	mov	r16,r9
    e098:	003f0506 	br	dcb0 <__alt_data_end+0xff00dcb0>
    e09c:	10002b1e 	bne	r2,zero,e14c <__subdf3+0x71c>
    e0a0:	2984b03a 	or	r2,r5,r6
    e0a4:	10008026 	beq	r2,zero,e2a8 <__subdf3+0x878>
    e0a8:	2807883a 	mov	r3,r5
    e0ac:	3023883a 	mov	r17,r6
    e0b0:	3825883a 	mov	r18,r7
    e0b4:	0401ffc4 	movi	r16,2047
    e0b8:	003e7e06 	br	dab4 <__alt_data_end+0xff00dab4>
    e0bc:	3809883a 	mov	r4,r7
    e0c0:	0011883a 	mov	r8,zero
    e0c4:	0005883a 	mov	r2,zero
    e0c8:	003ee306 	br	dc58 <__alt_data_end+0xff00dc58>
    e0cc:	1c62b03a 	or	r17,r3,r17
    e0d0:	8822c03a 	cmpne	r17,r17,zero
    e0d4:	0005883a 	mov	r2,zero
    e0d8:	003f8906 	br	df00 <__alt_data_end+0xff00df00>
    e0dc:	3809883a 	mov	r4,r7
    e0e0:	4821883a 	mov	r16,r9
    e0e4:	0011883a 	mov	r8,zero
    e0e8:	0005883a 	mov	r2,zero
    e0ec:	003eda06 	br	dc58 <__alt_data_end+0xff00dc58>
    e0f0:	0101ffc4 	movi	r4,2047
    e0f4:	49003b26 	beq	r9,r4,e1e4 <__subdf3+0x7b4>
    e0f8:	0085c83a 	sub	r2,zero,r2
    e0fc:	18c02034 	orhi	r3,r3,128
    e100:	01000e04 	movi	r4,56
    e104:	20806e16 	blt	r4,r2,e2c0 <__subdf3+0x890>
    e108:	010007c4 	movi	r4,31
    e10c:	20807716 	blt	r4,r2,e2ec <__subdf3+0x8bc>
    e110:	01000804 	movi	r4,32
    e114:	2089c83a 	sub	r4,r4,r2
    e118:	1914983a 	sll	r10,r3,r4
    e11c:	8890d83a 	srl	r8,r17,r2
    e120:	8908983a 	sll	r4,r17,r4
    e124:	1884d83a 	srl	r2,r3,r2
    e128:	5222b03a 	or	r17,r10,r8
    e12c:	2006c03a 	cmpne	r3,r4,zero
    e130:	88e2b03a 	or	r17,r17,r3
    e134:	89a3883a 	add	r17,r17,r6
    e138:	1145883a 	add	r2,r2,r5
    e13c:	898d803a 	cmpltu	r6,r17,r6
    e140:	3087883a 	add	r3,r6,r2
    e144:	4821883a 	mov	r16,r9
    e148:	003ed906 	br	dcb0 <__alt_data_end+0xff00dcb0>
    e14c:	2984b03a 	or	r2,r5,r6
    e150:	10004226 	beq	r2,zero,e25c <__subdf3+0x82c>
    e154:	1808d0fa 	srli	r4,r3,3
    e158:	8822d0fa 	srli	r17,r17,3
    e15c:	1806977a 	slli	r3,r3,29
    e160:	2080022c 	andhi	r2,r4,8
    e164:	1c62b03a 	or	r17,r3,r17
    e168:	10000826 	beq	r2,zero,e18c <__subdf3+0x75c>
    e16c:	2812d0fa 	srli	r9,r5,3
    e170:	4880022c 	andhi	r2,r9,8
    e174:	1000051e 	bne	r2,zero,e18c <__subdf3+0x75c>
    e178:	300cd0fa 	srli	r6,r6,3
    e17c:	2804977a 	slli	r2,r5,29
    e180:	4809883a 	mov	r4,r9
    e184:	3825883a 	mov	r18,r7
    e188:	11a2b03a 	or	r17,r2,r6
    e18c:	8806d77a 	srli	r3,r17,29
    e190:	200890fa 	slli	r4,r4,3
    e194:	882290fa 	slli	r17,r17,3
    e198:	0401ffc4 	movi	r16,2047
    e19c:	1906b03a 	or	r3,r3,r4
    e1a0:	003e4406 	br	dab4 <__alt_data_end+0xff00dab4>
    e1a4:	2984b03a 	or	r2,r5,r6
    e1a8:	103e4226 	beq	r2,zero,dab4 <__alt_data_end+0xff00dab4>
    e1ac:	8989c83a 	sub	r4,r17,r6
    e1b0:	8911803a 	cmpltu	r8,r17,r4
    e1b4:	1945c83a 	sub	r2,r3,r5
    e1b8:	1205c83a 	sub	r2,r2,r8
    e1bc:	1200202c 	andhi	r8,r2,128
    e1c0:	403e9a26 	beq	r8,zero,dc2c <__alt_data_end+0xff00dc2c>
    e1c4:	3463c83a 	sub	r17,r6,r17
    e1c8:	28c5c83a 	sub	r2,r5,r3
    e1cc:	344d803a 	cmpltu	r6,r6,r17
    e1d0:	1187c83a 	sub	r3,r2,r6
    e1d4:	3825883a 	mov	r18,r7
    e1d8:	003e3606 	br	dab4 <__alt_data_end+0xff00dab4>
    e1dc:	0101ffc4 	movi	r4,2047
    e1e0:	493fc71e 	bne	r9,r4,e100 <__alt_data_end+0xff00e100>
    e1e4:	2807883a 	mov	r3,r5
    e1e8:	3023883a 	mov	r17,r6
    e1ec:	4821883a 	mov	r16,r9
    e1f0:	003e3006 	br	dab4 <__alt_data_end+0xff00dab4>
    e1f4:	10003626 	beq	r2,zero,e2d0 <__subdf3+0x8a0>
    e1f8:	2984b03a 	or	r2,r5,r6
    e1fc:	10001726 	beq	r2,zero,e25c <__subdf3+0x82c>
    e200:	1808d0fa 	srli	r4,r3,3
    e204:	8822d0fa 	srli	r17,r17,3
    e208:	1806977a 	slli	r3,r3,29
    e20c:	2080022c 	andhi	r2,r4,8
    e210:	1c62b03a 	or	r17,r3,r17
    e214:	10000726 	beq	r2,zero,e234 <__subdf3+0x804>
    e218:	2812d0fa 	srli	r9,r5,3
    e21c:	4880022c 	andhi	r2,r9,8
    e220:	1000041e 	bne	r2,zero,e234 <__subdf3+0x804>
    e224:	300cd0fa 	srli	r6,r6,3
    e228:	2804977a 	slli	r2,r5,29
    e22c:	4809883a 	mov	r4,r9
    e230:	11a2b03a 	or	r17,r2,r6
    e234:	8806d77a 	srli	r3,r17,29
    e238:	200890fa 	slli	r4,r4,3
    e23c:	882290fa 	slli	r17,r17,3
    e240:	3825883a 	mov	r18,r7
    e244:	1906b03a 	or	r3,r3,r4
    e248:	0401ffc4 	movi	r16,2047
    e24c:	003e1906 	br	dab4 <__alt_data_end+0xff00dab4>
    e250:	000b883a 	mov	r5,zero
    e254:	0005883a 	mov	r2,zero
    e258:	003e2e06 	br	db14 <__alt_data_end+0xff00db14>
    e25c:	0401ffc4 	movi	r16,2047
    e260:	003e1406 	br	dab4 <__alt_data_end+0xff00dab4>
    e264:	0005883a 	mov	r2,zero
    e268:	003f7506 	br	e040 <__alt_data_end+0xff00e040>
    e26c:	0005883a 	mov	r2,zero
    e270:	0009883a 	mov	r4,zero
    e274:	003e7806 	br	dc58 <__alt_data_end+0xff00dc58>
    e278:	123ff804 	addi	r8,r2,-32
    e27c:	01000804 	movi	r4,32
    e280:	1a10d83a 	srl	r8,r3,r8
    e284:	11002526 	beq	r2,r4,e31c <__subdf3+0x8ec>
    e288:	01001004 	movi	r4,64
    e28c:	2085c83a 	sub	r2,r4,r2
    e290:	1884983a 	sll	r2,r3,r2
    e294:	1444b03a 	or	r2,r2,r17
    e298:	1004c03a 	cmpne	r2,r2,zero
    e29c:	40a2b03a 	or	r17,r8,r2
    e2a0:	0005883a 	mov	r2,zero
    e2a4:	003f1606 	br	df00 <__alt_data_end+0xff00df00>
    e2a8:	02000434 	movhi	r8,16
    e2ac:	0009883a 	mov	r4,zero
    e2b0:	423fffc4 	addi	r8,r8,-1
    e2b4:	00bfffc4 	movi	r2,-1
    e2b8:	0401ffc4 	movi	r16,2047
    e2bc:	003e6606 	br	dc58 <__alt_data_end+0xff00dc58>
    e2c0:	1c62b03a 	or	r17,r3,r17
    e2c4:	8822c03a 	cmpne	r17,r17,zero
    e2c8:	0005883a 	mov	r2,zero
    e2cc:	003f9906 	br	e134 <__alt_data_end+0xff00e134>
    e2d0:	2807883a 	mov	r3,r5
    e2d4:	3023883a 	mov	r17,r6
    e2d8:	0401ffc4 	movi	r16,2047
    e2dc:	003df506 	br	dab4 <__alt_data_end+0xff00dab4>
    e2e0:	2807883a 	mov	r3,r5
    e2e4:	3023883a 	mov	r17,r6
    e2e8:	003df206 	br	dab4 <__alt_data_end+0xff00dab4>
    e2ec:	123ff804 	addi	r8,r2,-32
    e2f0:	01000804 	movi	r4,32
    e2f4:	1a10d83a 	srl	r8,r3,r8
    e2f8:	11000a26 	beq	r2,r4,e324 <__subdf3+0x8f4>
    e2fc:	01001004 	movi	r4,64
    e300:	2085c83a 	sub	r2,r4,r2
    e304:	1884983a 	sll	r2,r3,r2
    e308:	1444b03a 	or	r2,r2,r17
    e30c:	1004c03a 	cmpne	r2,r2,zero
    e310:	40a2b03a 	or	r17,r8,r2
    e314:	0005883a 	mov	r2,zero
    e318:	003f8606 	br	e134 <__alt_data_end+0xff00e134>
    e31c:	0005883a 	mov	r2,zero
    e320:	003fdc06 	br	e294 <__alt_data_end+0xff00e294>
    e324:	0005883a 	mov	r2,zero
    e328:	003ff706 	br	e308 <__alt_data_end+0xff00e308>

0000e32c <__fixdfsi>:
    e32c:	280cd53a 	srli	r6,r5,20
    e330:	00c00434 	movhi	r3,16
    e334:	18ffffc4 	addi	r3,r3,-1
    e338:	3181ffcc 	andi	r6,r6,2047
    e33c:	01c0ff84 	movi	r7,1022
    e340:	28c6703a 	and	r3,r5,r3
    e344:	280ad7fa 	srli	r5,r5,31
    e348:	3980120e 	bge	r7,r6,e394 <__fixdfsi+0x68>
    e34c:	00810744 	movi	r2,1053
    e350:	11800c16 	blt	r2,r6,e384 <__fixdfsi+0x58>
    e354:	00810cc4 	movi	r2,1075
    e358:	1185c83a 	sub	r2,r2,r6
    e35c:	01c007c4 	movi	r7,31
    e360:	18c00434 	orhi	r3,r3,16
    e364:	38800d16 	blt	r7,r2,e39c <__fixdfsi+0x70>
    e368:	31befb44 	addi	r6,r6,-1043
    e36c:	2084d83a 	srl	r2,r4,r2
    e370:	1986983a 	sll	r3,r3,r6
    e374:	1884b03a 	or	r2,r3,r2
    e378:	28000726 	beq	r5,zero,e398 <__fixdfsi+0x6c>
    e37c:	0085c83a 	sub	r2,zero,r2
    e380:	f800283a 	ret
    e384:	00a00034 	movhi	r2,32768
    e388:	10bfffc4 	addi	r2,r2,-1
    e38c:	2885883a 	add	r2,r5,r2
    e390:	f800283a 	ret
    e394:	0005883a 	mov	r2,zero
    e398:	f800283a 	ret
    e39c:	008104c4 	movi	r2,1043
    e3a0:	1185c83a 	sub	r2,r2,r6
    e3a4:	1884d83a 	srl	r2,r3,r2
    e3a8:	003ff306 	br	e378 <__alt_data_end+0xff00e378>

0000e3ac <__floatsidf>:
    e3ac:	defffd04 	addi	sp,sp,-12
    e3b0:	dfc00215 	stw	ra,8(sp)
    e3b4:	dc400115 	stw	r17,4(sp)
    e3b8:	dc000015 	stw	r16,0(sp)
    e3bc:	20002b26 	beq	r4,zero,e46c <__floatsidf+0xc0>
    e3c0:	2023883a 	mov	r17,r4
    e3c4:	2020d7fa 	srli	r16,r4,31
    e3c8:	20002d16 	blt	r4,zero,e480 <__floatsidf+0xd4>
    e3cc:	8809883a 	mov	r4,r17
    e3d0:	000e5300 	call	e530 <__clzsi2>
    e3d4:	01410784 	movi	r5,1054
    e3d8:	288bc83a 	sub	r5,r5,r2
    e3dc:	01010cc4 	movi	r4,1075
    e3e0:	2149c83a 	sub	r4,r4,r5
    e3e4:	00c007c4 	movi	r3,31
    e3e8:	1900160e 	bge	r3,r4,e444 <__floatsidf+0x98>
    e3ec:	00c104c4 	movi	r3,1043
    e3f0:	1947c83a 	sub	r3,r3,r5
    e3f4:	88c6983a 	sll	r3,r17,r3
    e3f8:	00800434 	movhi	r2,16
    e3fc:	10bfffc4 	addi	r2,r2,-1
    e400:	1886703a 	and	r3,r3,r2
    e404:	2941ffcc 	andi	r5,r5,2047
    e408:	800d883a 	mov	r6,r16
    e40c:	0005883a 	mov	r2,zero
    e410:	280a953a 	slli	r5,r5,20
    e414:	31803fcc 	andi	r6,r6,255
    e418:	01000434 	movhi	r4,16
    e41c:	300c97fa 	slli	r6,r6,31
    e420:	213fffc4 	addi	r4,r4,-1
    e424:	1906703a 	and	r3,r3,r4
    e428:	1946b03a 	or	r3,r3,r5
    e42c:	1986b03a 	or	r3,r3,r6
    e430:	dfc00217 	ldw	ra,8(sp)
    e434:	dc400117 	ldw	r17,4(sp)
    e438:	dc000017 	ldw	r16,0(sp)
    e43c:	dec00304 	addi	sp,sp,12
    e440:	f800283a 	ret
    e444:	00c002c4 	movi	r3,11
    e448:	1887c83a 	sub	r3,r3,r2
    e44c:	88c6d83a 	srl	r3,r17,r3
    e450:	8904983a 	sll	r2,r17,r4
    e454:	01000434 	movhi	r4,16
    e458:	213fffc4 	addi	r4,r4,-1
    e45c:	2941ffcc 	andi	r5,r5,2047
    e460:	1906703a 	and	r3,r3,r4
    e464:	800d883a 	mov	r6,r16
    e468:	003fe906 	br	e410 <__alt_data_end+0xff00e410>
    e46c:	000d883a 	mov	r6,zero
    e470:	000b883a 	mov	r5,zero
    e474:	0007883a 	mov	r3,zero
    e478:	0005883a 	mov	r2,zero
    e47c:	003fe406 	br	e410 <__alt_data_end+0xff00e410>
    e480:	0123c83a 	sub	r17,zero,r4
    e484:	003fd106 	br	e3cc <__alt_data_end+0xff00e3cc>

0000e488 <__floatunsidf>:
    e488:	defffe04 	addi	sp,sp,-8
    e48c:	dc000015 	stw	r16,0(sp)
    e490:	dfc00115 	stw	ra,4(sp)
    e494:	2021883a 	mov	r16,r4
    e498:	20002226 	beq	r4,zero,e524 <__floatunsidf+0x9c>
    e49c:	000e5300 	call	e530 <__clzsi2>
    e4a0:	01010784 	movi	r4,1054
    e4a4:	2089c83a 	sub	r4,r4,r2
    e4a8:	01810cc4 	movi	r6,1075
    e4ac:	310dc83a 	sub	r6,r6,r4
    e4b0:	00c007c4 	movi	r3,31
    e4b4:	1980120e 	bge	r3,r6,e500 <__floatunsidf+0x78>
    e4b8:	00c104c4 	movi	r3,1043
    e4bc:	1907c83a 	sub	r3,r3,r4
    e4c0:	80ca983a 	sll	r5,r16,r3
    e4c4:	00800434 	movhi	r2,16
    e4c8:	10bfffc4 	addi	r2,r2,-1
    e4cc:	2101ffcc 	andi	r4,r4,2047
    e4d0:	0021883a 	mov	r16,zero
    e4d4:	288a703a 	and	r5,r5,r2
    e4d8:	2008953a 	slli	r4,r4,20
    e4dc:	00c00434 	movhi	r3,16
    e4e0:	18ffffc4 	addi	r3,r3,-1
    e4e4:	28c6703a 	and	r3,r5,r3
    e4e8:	8005883a 	mov	r2,r16
    e4ec:	1906b03a 	or	r3,r3,r4
    e4f0:	dfc00117 	ldw	ra,4(sp)
    e4f4:	dc000017 	ldw	r16,0(sp)
    e4f8:	dec00204 	addi	sp,sp,8
    e4fc:	f800283a 	ret
    e500:	00c002c4 	movi	r3,11
    e504:	188bc83a 	sub	r5,r3,r2
    e508:	814ad83a 	srl	r5,r16,r5
    e50c:	00c00434 	movhi	r3,16
    e510:	18ffffc4 	addi	r3,r3,-1
    e514:	81a0983a 	sll	r16,r16,r6
    e518:	2101ffcc 	andi	r4,r4,2047
    e51c:	28ca703a 	and	r5,r5,r3
    e520:	003fed06 	br	e4d8 <__alt_data_end+0xff00e4d8>
    e524:	0009883a 	mov	r4,zero
    e528:	000b883a 	mov	r5,zero
    e52c:	003fea06 	br	e4d8 <__alt_data_end+0xff00e4d8>

0000e530 <__clzsi2>:
    e530:	00bfffd4 	movui	r2,65535
    e534:	11000536 	bltu	r2,r4,e54c <__clzsi2+0x1c>
    e538:	00803fc4 	movi	r2,255
    e53c:	11000f36 	bltu	r2,r4,e57c <__clzsi2+0x4c>
    e540:	00800804 	movi	r2,32
    e544:	0007883a 	mov	r3,zero
    e548:	00000506 	br	e560 <__clzsi2+0x30>
    e54c:	00804034 	movhi	r2,256
    e550:	10bfffc4 	addi	r2,r2,-1
    e554:	11000c2e 	bgeu	r2,r4,e588 <__clzsi2+0x58>
    e558:	00800204 	movi	r2,8
    e55c:	00c00604 	movi	r3,24
    e560:	20c8d83a 	srl	r4,r4,r3
    e564:	00c00074 	movhi	r3,1
    e568:	18c15b04 	addi	r3,r3,1388
    e56c:	1909883a 	add	r4,r3,r4
    e570:	20c00003 	ldbu	r3,0(r4)
    e574:	10c5c83a 	sub	r2,r2,r3
    e578:	f800283a 	ret
    e57c:	00800604 	movi	r2,24
    e580:	00c00204 	movi	r3,8
    e584:	003ff606 	br	e560 <__alt_data_end+0xff00e560>
    e588:	00800404 	movi	r2,16
    e58c:	1007883a 	mov	r3,r2
    e590:	003ff306 	br	e560 <__alt_data_end+0xff00e560>

0000e594 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e594:	defffd04 	addi	sp,sp,-12
    e598:	dfc00215 	stw	ra,8(sp)
    e59c:	dc400115 	stw	r17,4(sp)
    e5a0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e5a4:	20001f16 	blt	r4,zero,e624 <close+0x90>
    e5a8:	20c00324 	muli	r3,r4,12
    e5ac:	00800074 	movhi	r2,1
    e5b0:	10840b04 	addi	r2,r2,4140
    e5b4:	1885883a 	add	r2,r3,r2
    e5b8:	2021883a 	mov	r16,r4

  if (fd)
    e5bc:	10001926 	beq	r2,zero,e624 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e5c0:	10c00017 	ldw	r3,0(r2)
    e5c4:	18c00417 	ldw	r3,16(r3)
    e5c8:	18000c26 	beq	r3,zero,e5fc <close+0x68>
    e5cc:	1009883a 	mov	r4,r2
    e5d0:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e5d4:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e5d8:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e5dc:	000e9cc0 	call	e9cc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e5e0:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e5e4:	88000816 	blt	r17,zero,e608 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e5e8:	dfc00217 	ldw	ra,8(sp)
    e5ec:	dc400117 	ldw	r17,4(sp)
    e5f0:	dc000017 	ldw	r16,0(sp)
    e5f4:	dec00304 	addi	sp,sp,12
    e5f8:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e5fc:	000e9cc0 	call	e9cc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e600:	0005883a 	mov	r2,zero
    e604:	003ff806 	br	e5e8 <__alt_data_end+0xff00e5e8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e608:	d0a00b17 	ldw	r2,-32724(gp)
    e60c:	10000c26 	beq	r2,zero,e640 <close+0xac>
    e610:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e614:	0463c83a 	sub	r17,zero,r17
    e618:	14400015 	stw	r17,0(r2)
      return -1;
    e61c:	00bfffc4 	movi	r2,-1
    e620:	003ff106 	br	e5e8 <__alt_data_end+0xff00e5e8>
    e624:	d0a00b17 	ldw	r2,-32724(gp)
    e628:	10000726 	beq	r2,zero,e648 <close+0xb4>
    e62c:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e630:	00c01444 	movi	r3,81
    e634:	10c00015 	stw	r3,0(r2)
    return -1;
    e638:	00bfffc4 	movi	r2,-1
    e63c:	003fea06 	br	e5e8 <__alt_data_end+0xff00e5e8>
    e640:	d0a71804 	addi	r2,gp,-25504
    e644:	003ff306 	br	e614 <__alt_data_end+0xff00e614>
    e648:	d0a71804 	addi	r2,gp,-25504
    e64c:	003ff806 	br	e630 <__alt_data_end+0xff00e630>

0000e650 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e650:	3005883a 	mov	r2,r6
    e654:	f800283a 	ret

0000e658 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e658:	20000d16 	blt	r4,zero,e690 <fstat+0x38>
    e65c:	21000324 	muli	r4,r4,12
    e660:	00800074 	movhi	r2,1
    e664:	10840b04 	addi	r2,r2,4140
    e668:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e66c:	20000826 	beq	r4,zero,e690 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e670:	20800017 	ldw	r2,0(r4)
    e674:	10800817 	ldw	r2,32(r2)
    e678:	10000126 	beq	r2,zero,e680 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e67c:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e680:	00880004 	movi	r2,8192
    e684:	28800115 	stw	r2,4(r5)
      return 0;
    e688:	0005883a 	mov	r2,zero
    e68c:	f800283a 	ret
    e690:	d0a00b17 	ldw	r2,-32724(gp)
    e694:	10000926 	beq	r2,zero,e6bc <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e698:	deffff04 	addi	sp,sp,-4
    e69c:	dfc00015 	stw	ra,0(sp)
    e6a0:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6a4:	00c01444 	movi	r3,81
    e6a8:	10c00015 	stw	r3,0(r2)
    return -1;
    e6ac:	00bfffc4 	movi	r2,-1
  }
}
    e6b0:	dfc00017 	ldw	ra,0(sp)
    e6b4:	dec00104 	addi	sp,sp,4
    e6b8:	f800283a 	ret
    e6bc:	d0a71804 	addi	r2,gp,-25504
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6c0:	00c01444 	movi	r3,81
    e6c4:	10c00015 	stw	r3,0(r2)
    return -1;
    e6c8:	00bfffc4 	movi	r2,-1
  }
}
    e6cc:	f800283a 	ret

0000e6d0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e6d0:	defff004 	addi	sp,sp,-64
    e6d4:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e6d8:	20001316 	blt	r4,zero,e728 <isatty+0x58>
    e6dc:	20800324 	muli	r2,r4,12
    e6e0:	00c00074 	movhi	r3,1
    e6e4:	18c40b04 	addi	r3,r3,4140
    e6e8:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e6ec:	10000e26 	beq	r2,zero,e728 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e6f0:	10800017 	ldw	r2,0(r2)
    e6f4:	10800817 	ldw	r2,32(r2)
    e6f8:	10000726 	beq	r2,zero,e718 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e6fc:	d80b883a 	mov	r5,sp
    e700:	000e6580 	call	e658 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e704:	d8800117 	ldw	r2,4(sp)
    e708:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e70c:	dfc00f17 	ldw	ra,60(sp)
    e710:	dec01004 	addi	sp,sp,64
    e714:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e718:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e71c:	dfc00f17 	ldw	ra,60(sp)
    e720:	dec01004 	addi	sp,sp,64
    e724:	f800283a 	ret
    e728:	d0a00b17 	ldw	r2,-32724(gp)
    e72c:	10000726 	beq	r2,zero,e74c <isatty+0x7c>
    e730:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e734:	00c01444 	movi	r3,81
    e738:	10c00015 	stw	r3,0(r2)
    return 0;
    e73c:	0005883a 	mov	r2,zero
  }
}
    e740:	dfc00f17 	ldw	ra,60(sp)
    e744:	dec01004 	addi	sp,sp,64
    e748:	f800283a 	ret
    e74c:	d0a71804 	addi	r2,gp,-25504
    e750:	003ff806 	br	e734 <__alt_data_end+0xff00e734>

0000e754 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e754:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e758:	01000074 	movhi	r4,1
    e75c:	01400074 	movhi	r5,1
    e760:	dfc00015 	stw	ra,0(sp)
    e764:	2101a204 	addi	r4,r4,1672
    e768:	29489d04 	addi	r5,r5,8820
    e76c:	21400a26 	beq	r4,r5,e798 <alt_load+0x44>
  {
    while( to != end )
    e770:	00800074 	movhi	r2,1
    e774:	10889d04 	addi	r2,r2,8820
    e778:	20800726 	beq	r4,r2,e798 <alt_load+0x44>
    {
      *to++ = *from++;
    e77c:	21800104 	addi	r6,r4,4
    e780:	118dc83a 	sub	r6,r2,r6
    e784:	300cd0ba 	srli	r6,r6,2
    e788:	31800044 	addi	r6,r6,1
    e78c:	318d883a 	add	r6,r6,r6
    e790:	318d883a 	add	r6,r6,r6
    e794:	00079480 	call	7948 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e798:	01000034 	movhi	r4,0
    e79c:	01400034 	movhi	r5,0
    e7a0:	21000804 	addi	r4,r4,32
    e7a4:	29400804 	addi	r5,r5,32
    e7a8:	21400a26 	beq	r4,r5,e7d4 <alt_load+0x80>
  {
    while( to != end )
    e7ac:	00800034 	movhi	r2,0
    e7b0:	10806304 	addi	r2,r2,396
    e7b4:	20800726 	beq	r4,r2,e7d4 <alt_load+0x80>
    {
      *to++ = *from++;
    e7b8:	21800104 	addi	r6,r4,4
    e7bc:	118dc83a 	sub	r6,r2,r6
    e7c0:	300cd0ba 	srli	r6,r6,2
    e7c4:	31800044 	addi	r6,r6,1
    e7c8:	318d883a 	add	r6,r6,r6
    e7cc:	318d883a 	add	r6,r6,r6
    e7d0:	00079480 	call	7948 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e7d4:	01000074 	movhi	r4,1
    e7d8:	01400074 	movhi	r5,1
    e7dc:	213fb404 	addi	r4,r4,-304
    e7e0:	297fb404 	addi	r5,r5,-304
    e7e4:	21400a26 	beq	r4,r5,e810 <alt_load+0xbc>
  {
    while( to != end )
    e7e8:	00800074 	movhi	r2,1
    e7ec:	1081a204 	addi	r2,r2,1672
    e7f0:	20800726 	beq	r4,r2,e810 <alt_load+0xbc>
    {
      *to++ = *from++;
    e7f4:	21800104 	addi	r6,r4,4
    e7f8:	118dc83a 	sub	r6,r2,r6
    e7fc:	300cd0ba 	srli	r6,r6,2
    e800:	31800044 	addi	r6,r6,1
    e804:	318d883a 	add	r6,r6,r6
    e808:	318d883a 	add	r6,r6,r6
    e80c:	00079480 	call	7948 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e810:	000f3400 	call	f340 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e814:	dfc00017 	ldw	ra,0(sp)
    e818:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e81c:	000f4781 	jmpi	f478 <alt_icache_flush_all>

0000e820 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e820:	defffe04 	addi	sp,sp,-8
    e824:	dfc00115 	stw	ra,4(sp)
    e828:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e82c:	20000e16 	blt	r4,zero,e868 <lseek+0x48>
    e830:	21000324 	muli	r4,r4,12
    e834:	00800074 	movhi	r2,1
    e838:	10840b04 	addi	r2,r2,4140
    e83c:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    e840:	20000926 	beq	r4,zero,e868 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e844:	20800017 	ldw	r2,0(r4)
    e848:	10800717 	ldw	r2,28(r2)
    e84c:	10000d26 	beq	r2,zero,e884 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e850:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    e854:	10000f16 	blt	r2,zero,e894 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    e858:	dfc00117 	ldw	ra,4(sp)
    e85c:	dc000017 	ldw	r16,0(sp)
    e860:	dec00204 	addi	sp,sp,8
    e864:	f800283a 	ret
    e868:	04001444 	movi	r16,81
    e86c:	d0a00b17 	ldw	r2,-32724(gp)
    e870:	10000626 	beq	r2,zero,e88c <lseek+0x6c>
    e874:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    e878:	14000015 	stw	r16,0(r2)
    rc = -1;
    e87c:	00bfffc4 	movi	r2,-1
  }

  return rc;
    e880:	003ff506 	br	e858 <__alt_data_end+0xff00e858>
    e884:	04002184 	movi	r16,134
    e888:	003ff806 	br	e86c <__alt_data_end+0xff00e86c>
    e88c:	d0a71804 	addi	r2,gp,-25504
    e890:	003ff906 	br	e878 <__alt_data_end+0xff00e878>
    e894:	00a1c83a 	sub	r16,zero,r2
    e898:	003ff406 	br	e86c <__alt_data_end+0xff00e86c>

0000e89c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e89c:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e8a0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e8a4:	dfc00115 	stw	ra,4(sp)
    e8a8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e8ac:	000eb040 	call	eb04 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e8b0:	000eb240 	call	eb24 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e8b4:	01800074 	movhi	r6,1
    e8b8:	31819e04 	addi	r6,r6,1656
    e8bc:	300b883a 	mov	r5,r6
    e8c0:	3009883a 	mov	r4,r6
    e8c4:	000f5780 	call	f578 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e8c8:	000f3b00 	call	f3b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e8cc:	01000074 	movhi	r4,1
    e8d0:	213d0504 	addi	r4,r4,-3052
    e8d4:	000fb5c0 	call	fb5c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e8d8:	d1a71c17 	ldw	r6,-25488(gp)
    e8dc:	d1671d17 	ldw	r5,-25484(gp)
    e8e0:	d1271e17 	ldw	r4,-25480(gp)
    e8e4:	0000f040 	call	f04 <main>
  close(STDOUT_FILENO);
    e8e8:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e8ec:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    e8f0:	000e5940 	call	e594 <close>
  exit (result);
    e8f4:	8009883a 	mov	r4,r16
    e8f8:	000fb700 	call	fb70 <exit>

0000e8fc <__malloc_lock>:
    e8fc:	f800283a 	ret

0000e900 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e900:	f800283a 	ret

0000e904 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e904:	defffe04 	addi	sp,sp,-8
    e908:	dfc00115 	stw	ra,4(sp)
    e90c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e910:	20002116 	blt	r4,zero,e998 <read+0x94>
    e914:	21000324 	muli	r4,r4,12
    e918:	00800074 	movhi	r2,1
    e91c:	10840b04 	addi	r2,r2,4140
    e920:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e924:	20001c26 	beq	r4,zero,e998 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e928:	20800217 	ldw	r2,8(r4)
    e92c:	00c00044 	movi	r3,1
    e930:	108000cc 	andi	r2,r2,3
    e934:	10c00a26 	beq	r2,r3,e960 <read+0x5c>
        (fd->dev->read))
    e938:	20800017 	ldw	r2,0(r4)
    e93c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e940:	10000726 	beq	r2,zero,e960 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e944:	103ee83a 	callr	r2
    e948:	1021883a 	mov	r16,r2
    e94c:	10000b16 	blt	r2,zero,e97c <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    e950:	dfc00117 	ldw	ra,4(sp)
    e954:	dc000017 	ldw	r16,0(sp)
    e958:	dec00204 	addi	sp,sp,8
    e95c:	f800283a 	ret
    e960:	d0a00b17 	ldw	r2,-32724(gp)
    e964:	10001326 	beq	r2,zero,e9b4 <read+0xb0>
    e968:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    e96c:	00c00344 	movi	r3,13
    e970:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    e974:	00bfffc4 	movi	r2,-1
    e978:	003ff506 	br	e950 <__alt_data_end+0xff00e950>
    e97c:	d0a00b17 	ldw	r2,-32724(gp)
    e980:	10000e26 	beq	r2,zero,e9bc <read+0xb8>
    e984:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    e988:	0421c83a 	sub	r16,zero,r16
    e98c:	14000015 	stw	r16,0(r2)
          return -1;
    e990:	00bfffc4 	movi	r2,-1
    e994:	003fee06 	br	e950 <__alt_data_end+0xff00e950>
    e998:	d0a00b17 	ldw	r2,-32724(gp)
    e99c:	10000926 	beq	r2,zero,e9c4 <read+0xc0>
    e9a0:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e9a4:	00c01444 	movi	r3,81
    e9a8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    e9ac:	00bfffc4 	movi	r2,-1
    e9b0:	003fe706 	br	e950 <__alt_data_end+0xff00e950>
    e9b4:	d0a71804 	addi	r2,gp,-25504
    e9b8:	003fec06 	br	e96c <__alt_data_end+0xff00e96c>
    e9bc:	d0a71804 	addi	r2,gp,-25504
    e9c0:	003ff106 	br	e988 <__alt_data_end+0xff00e988>
    e9c4:	d0a71804 	addi	r2,gp,-25504
    e9c8:	003ff606 	br	e9a4 <__alt_data_end+0xff00e9a4>

0000e9cc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    e9cc:	00800084 	movi	r2,2
    e9d0:	1100060e 	bge	r2,r4,e9ec <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    e9d4:	21000324 	muli	r4,r4,12
    e9d8:	00800074 	movhi	r2,1
    e9dc:	10840b04 	addi	r2,r2,4140
    e9e0:	1109883a 	add	r4,r2,r4
    e9e4:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    e9e8:	20000015 	stw	zero,0(r4)
    e9ec:	f800283a 	ret

0000e9f0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e9f0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e9f4:	00bfff84 	movi	r2,-2
    e9f8:	2884703a 	and	r2,r5,r2
    e9fc:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea00:	d0a00c17 	ldw	r2,-32720(gp)
    ea04:	00ffff04 	movi	r3,-4
    ea08:	108000c4 	addi	r2,r2,3
    ea0c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ea10:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea14:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ea18:	1109883a 	add	r4,r2,r4
    ea1c:	18c00004 	addi	r3,r3,0
    ea20:	19000336 	bltu	r3,r4,ea30 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    ea24:	d1200c15 	stw	r4,-32720(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea28:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    ea2c:	f800283a 	ret
    ea30:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ea34:	00bfffc4 	movi	r2,-1
    ea38:	f800283a 	ret

0000ea3c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    ea3c:	000f2c81 	jmpi	f2c8 <alt_busy_sleep>

0000ea40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ea40:	defffe04 	addi	sp,sp,-8
    ea44:	dfc00115 	stw	ra,4(sp)
    ea48:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea4c:	20002216 	blt	r4,zero,ead8 <write+0x98>
    ea50:	21000324 	muli	r4,r4,12
    ea54:	00800074 	movhi	r2,1
    ea58:	10840b04 	addi	r2,r2,4140
    ea5c:	2089883a 	add	r4,r4,r2
  
  if (fd)
    ea60:	20001d26 	beq	r4,zero,ead8 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ea64:	20800217 	ldw	r2,8(r4)
    ea68:	108000cc 	andi	r2,r2,3
    ea6c:	10000a26 	beq	r2,zero,ea98 <write+0x58>
    ea70:	20800017 	ldw	r2,0(r4)
    ea74:	10800617 	ldw	r2,24(r2)
    ea78:	10000726 	beq	r2,zero,ea98 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ea7c:	103ee83a 	callr	r2
    ea80:	1021883a 	mov	r16,r2
    ea84:	10000d16 	blt	r2,zero,eabc <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ea88:	dfc00117 	ldw	ra,4(sp)
    ea8c:	dc000017 	ldw	r16,0(sp)
    ea90:	dec00204 	addi	sp,sp,8
    ea94:	f800283a 	ret
    ea98:	d0a00b17 	ldw	r2,-32724(gp)
    ea9c:	10000526 	beq	r2,zero,eab4 <write+0x74>
    eaa0:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    eaa4:	00c00344 	movi	r3,13
    eaa8:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    eaac:	00bfffc4 	movi	r2,-1
    eab0:	003ff506 	br	ea88 <__alt_data_end+0xff00ea88>
    eab4:	d0a71804 	addi	r2,gp,-25504
    eab8:	003ffa06 	br	eaa4 <__alt_data_end+0xff00eaa4>
    eabc:	d0a00b17 	ldw	r2,-32724(gp)
    eac0:	10000c26 	beq	r2,zero,eaf4 <write+0xb4>
    eac4:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    eac8:	0421c83a 	sub	r16,zero,r16
    eacc:	14000015 	stw	r16,0(r2)
        return -1;
    ead0:	00bfffc4 	movi	r2,-1
    ead4:	003fec06 	br	ea88 <__alt_data_end+0xff00ea88>
    ead8:	d0a00b17 	ldw	r2,-32724(gp)
    eadc:	10000726 	beq	r2,zero,eafc <write+0xbc>
    eae0:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    eae4:	00c01444 	movi	r3,81
    eae8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eaec:	00bfffc4 	movi	r2,-1
    eaf0:	003fe506 	br	ea88 <__alt_data_end+0xff00ea88>
    eaf4:	d0a71804 	addi	r2,gp,-25504
    eaf8:	003ff306 	br	eac8 <__alt_data_end+0xff00eac8>
    eafc:	d0a71804 	addi	r2,gp,-25504
    eb00:	003ff806 	br	eae4 <__alt_data_end+0xff00eae4>

0000eb04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eb04:	deffff04 	addi	sp,sp,-4
    eb08:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    eb0c:	000f91c0 	call	f91c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    eb10:	00800044 	movi	r2,1
    eb14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    eb18:	dfc00017 	ldw	ra,0(sp)
    eb1c:	dec00104 	addi	sp,sp,4
    eb20:	f800283a 	ret

0000eb24 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eb24:	00804034 	movhi	r2,256
    eb28:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eb2c:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eb30:	d0a72015 	stw	r2,-25472(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eb34:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eb38:	0080bef4 	movhi	r2,763
    eb3c:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eb40:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eb44:	01c0fa04 	movi	r7,1000
    eb48:	21040804 	addi	r4,r4,4128
    eb4c:	01800104 	movi	r6,4
    eb50:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eb54:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eb58:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eb5c:	84047f04 	addi	r16,r16,4604
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eb60:	d0a71f15 	stw	r2,-25476(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eb64:	000f1880 	call	f188 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eb68:	8009883a 	mov	r4,r16
    eb6c:	000b883a 	mov	r5,zero
    eb70:	000d883a 	mov	r6,zero
    eb74:	000ed200 	call	ed20 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    eb78:	d1600704 	addi	r5,gp,-32740
    eb7c:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    eb80:	dfc00117 	ldw	ra,4(sp)
    eb84:	dc000017 	ldw	r16,0(sp)
    eb88:	dec00204 	addi	sp,sp,8
    eb8c:	000f3441 	jmpi	f344 <alt_dev_llist_insert>

0000eb90 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    eb90:	20800017 	ldw	r2,0(r4)
    eb94:	21c00217 	ldw	r7,8(r4)
    eb98:	11000a04 	addi	r4,r2,40
    eb9c:	000ee581 	jmpi	ee58 <altera_avalon_jtag_uart_read>

0000eba0 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    eba0:	20800017 	ldw	r2,0(r4)
    eba4:	21c00217 	ldw	r7,8(r4)
    eba8:	11000a04 	addi	r4,r2,40
    ebac:	000efac1 	jmpi	efac <altera_avalon_jtag_uart_write>

0000ebb0 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ebb0:	20800017 	ldw	r2,0(r4)
    ebb4:	21400217 	ldw	r5,8(r4)
    ebb8:	11000a04 	addi	r4,r2,40
    ebbc:	000ed981 	jmpi	ed98 <altera_avalon_jtag_uart_close>

0000ebc0 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ebc0:	21000017 	ldw	r4,0(r4)
    ebc4:	21000a04 	addi	r4,r4,40
    ebc8:	000ede41 	jmpi	ede4 <altera_avalon_jtag_uart_ioctl>

0000ebcc <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ebcc:	20800017 	ldw	r2,0(r4)
    ebd0:	10800104 	addi	r2,r2,4
    ebd4:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ebd8:	18c1000c 	andi	r3,r3,1024
    ebdc:	1800081e 	bne	r3,zero,ec00 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ebe0:	20800917 	ldw	r2,36(r4)
    ebe4:	00e00034 	movhi	r3,32768
    ebe8:	18ffff04 	addi	r3,r3,-4
    ebec:	18800236 	bltu	r3,r2,ebf8 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    ebf0:	10800044 	addi	r2,r2,1
    ebf4:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ebf8:	d0a72317 	ldw	r2,-25460(gp)
    ebfc:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ec00:	20c00817 	ldw	r3,32(r4)
    ec04:	18c10014 	ori	r3,r3,1024
    ec08:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ec0c:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ec10:	d0a72317 	ldw	r2,-25460(gp)
    ec14:	f800283a 	ret

0000ec18 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    ec18:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ec1c:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ec20:	02bfff44 	movi	r10,-3
    ec24:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ec28:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ec2c:	3880c00c 	andi	r2,r7,768
    ec30:	10003426 	beq	r2,zero,ed04 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ec34:	3880400c 	andi	r2,r7,256
    ec38:	10001726 	beq	r2,zero,ec98 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec3c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ec40:	20c00b17 	ldw	r3,44(r4)
    ec44:	10800044 	addi	r2,r2,1
    ec48:	1081ffcc 	andi	r2,r2,2047
    ec4c:	18800d1e 	bne	r3,r2,ec84 <altera_avalon_jtag_uart_irq+0x6c>
    ec50:	00002d06 	br	ed08 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ec54:	20800a17 	ldw	r2,40(r4)
    ec58:	2085883a 	add	r2,r4,r2
    ec5c:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec60:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    ec64:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec68:	10800044 	addi	r2,r2,1
    ec6c:	1081ffcc 	andi	r2,r2,2047
    ec70:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec74:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ec78:	10800044 	addi	r2,r2,1
    ec7c:	1081ffcc 	andi	r2,r2,2047
    ec80:	11400326 	beq	r2,r5,ec90 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ec84:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ec88:	18a0000c 	andi	r2,r3,32768
    ec8c:	103ff11e 	bne	r2,zero,ec54 <__alt_data_end+0xff00ec54>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ec90:	18ffffec 	andhi	r3,r3,65535
    ec94:	18001c1e 	bne	r3,zero,ed08 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ec98:	3880800c 	andi	r2,r7,512
    ec9c:	103fe226 	beq	r2,zero,ec28 <__alt_data_end+0xff00ec28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    eca0:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    eca4:	38000b1e 	bne	r7,zero,ecd4 <altera_avalon_jtag_uart_irq+0xbc>
    eca8:	003fdf06 	br	ec28 <__alt_data_end+0xff00ec28>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ecac:	20800d17 	ldw	r2,52(r4)
    ecb0:	2085883a 	add	r2,r4,r2
    ecb4:	10820e07 	ldb	r2,2104(r2)
    ecb8:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ecbc:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ecc0:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ecc4:	10800044 	addi	r2,r2,1
    ecc8:	1081ffcc 	andi	r2,r2,2047
    eccc:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ecd0:	383fd526 	beq	r7,zero,ec28 <__alt_data_end+0xff00ec28>
    ecd4:	20c00d17 	ldw	r3,52(r4)
    ecd8:	20800c17 	ldw	r2,48(r4)
    ecdc:	18bff31e 	bne	r3,r2,ecac <__alt_data_end+0xff00ecac>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ece0:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ece4:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ece8:	1284703a 	and	r2,r2,r10
    ecec:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ecf0:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ecf4:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ecf8:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ecfc:	3880c00c 	andi	r2,r7,768
    ed00:	103fcc1e 	bne	r2,zero,ec34 <__alt_data_end+0xff00ec34>
    ed04:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ed08:	20800817 	ldw	r2,32(r4)
    ed0c:	1244703a 	and	r2,r2,r9
    ed10:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ed14:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ed18:	40800037 	ldwio	r2,0(r8)
    ed1c:	003fde06 	br	ec98 <__alt_data_end+0xff00ec98>

0000ed20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ed20:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ed24:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ed28:	dc000115 	stw	r16,4(sp)
    ed2c:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ed30:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ed34:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ed38:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ed3c:	2809883a 	mov	r4,r5
    ed40:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ed44:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ed48:	01800074 	movhi	r6,1
    ed4c:	31bb0604 	addi	r6,r6,-5096
    ed50:	800f883a 	mov	r7,r16
    ed54:	d8000015 	stw	zero,0(sp)
    ed58:	000f4840 	call	f484 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ed5c:	d1672317 	ldw	r5,-25460(gp)
    ed60:	01800074 	movhi	r6,1
    ed64:	31baf304 	addi	r6,r6,-5172
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ed68:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ed6c:	800f883a 	mov	r7,r16
    ed70:	81000204 	addi	r4,r16,8
    ed74:	000f2480 	call	f248 <alt_alarm_start>
    ed78:	1000030e 	bge	r2,zero,ed88 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ed7c:	00a00034 	movhi	r2,32768
    ed80:	10bfffc4 	addi	r2,r2,-1
    ed84:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ed88:	dfc00217 	ldw	ra,8(sp)
    ed8c:	dc000117 	ldw	r16,4(sp)
    ed90:	dec00304 	addi	sp,sp,12
    ed94:	f800283a 	ret

0000ed98 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    ed98:	2890000c 	andi	r2,r5,16384
    ed9c:	21c00c17 	ldw	r7,48(r4)
    eda0:	10000426 	beq	r2,zero,edb4 <altera_avalon_jtag_uart_close+0x1c>
    eda4:	00000606 	br	edc0 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eda8:	21800917 	ldw	r6,36(r4)
    edac:	20c00117 	ldw	r3,4(r4)
    edb0:	30c00a2e 	bgeu	r6,r3,eddc <altera_avalon_jtag_uart_close+0x44>
    edb4:	20c00d17 	ldw	r3,52(r4)
    edb8:	38fffb1e 	bne	r7,r3,eda8 <__alt_data_end+0xff00eda8>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    edbc:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    edc0:	20800d17 	ldw	r2,52(r4)
    edc4:	11c00526 	beq	r2,r7,eddc <altera_avalon_jtag_uart_close+0x44>
    edc8:	20c00917 	ldw	r3,36(r4)
    edcc:	20800117 	ldw	r2,4(r4)
    edd0:	1880022e 	bgeu	r3,r2,eddc <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    edd4:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    edd8:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    eddc:	0005883a 	mov	r2,zero
    ede0:	f800283a 	ret

0000ede4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    ede4:	009a8044 	movi	r2,27137
    ede8:	28800d26 	beq	r5,r2,ee20 <altera_avalon_jtag_uart_ioctl+0x3c>
    edec:	009a8084 	movi	r2,27138
    edf0:	2880091e 	bne	r5,r2,ee18 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    edf4:	21400117 	ldw	r5,4(r4)
    edf8:	00a00034 	movhi	r2,32768
    edfc:	10bfffc4 	addi	r2,r2,-1
    ee00:	28800526 	beq	r5,r2,ee18 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ee04:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    ee08:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ee0c:	1947803a 	cmpltu	r3,r3,r5
    ee10:	30c00015 	stw	r3,0(r6)
    ee14:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    ee18:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    ee1c:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ee20:	20c00117 	ldw	r3,4(r4)
    ee24:	00a00034 	movhi	r2,32768
    ee28:	10bfffc4 	addi	r2,r2,-1
    ee2c:	18bffa26 	beq	r3,r2,ee18 <__alt_data_end+0xff00ee18>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ee30:	30800017 	ldw	r2,0(r6)
    ee34:	01600034 	movhi	r5,32768
    ee38:	297fff04 	addi	r5,r5,-4
    ee3c:	10ffff84 	addi	r3,r2,-2
    ee40:	28c0022e 	bgeu	r5,r3,ee4c <altera_avalon_jtag_uart_ioctl+0x68>
    ee44:	00a00034 	movhi	r2,32768
    ee48:	10bfff84 	addi	r2,r2,-2
    ee4c:	20800115 	stw	r2,4(r4)
      rc = 0;
    ee50:	0005883a 	mov	r2,zero
    ee54:	f800283a 	ret

0000ee58 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ee58:	01804e0e 	bge	zero,r6,ef94 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ee5c:	defff504 	addi	sp,sp,-44
    ee60:	dc000115 	stw	r16,4(sp)
    ee64:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ee68:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ee6c:	dd800715 	stw	r22,28(sp)
    ee70:	dd400615 	stw	r21,24(sp)
    ee74:	dd000515 	stw	r20,20(sp)
    ee78:	dcc00415 	stw	r19,16(sp)
    ee7c:	dc800315 	stw	r18,12(sp)
    ee80:	dfc00a15 	stw	ra,40(sp)
    ee84:	df000915 	stw	fp,36(sp)
    ee88:	ddc00815 	stw	r23,32(sp)
    ee8c:	dc400215 	stw	r17,8(sp)
    ee90:	3027883a 	mov	r19,r6
    ee94:	2025883a 	mov	r18,r4
    ee98:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ee9c:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    eea0:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    eea4:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    eea8:	b02f883a 	mov	r23,r22
    eeac:	00000a06 	br	eed8 <altera_avalon_jtag_uart_read+0x80>
    eeb0:	9880012e 	bgeu	r19,r2,eeb8 <altera_avalon_jtag_uart_read+0x60>
    eeb4:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eeb8:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    eebc:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eec0:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    eec4:	00079480 	call	7948 <memcpy>
      ptr   += n;
      space -= n;
    eec8:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eecc:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    eed0:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    eed4:	04c0080e 	bge	zero,r19,eef8 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    eed8:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    eedc:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    eee0:	e4000136 	bltu	fp,r16,eee8 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    eee4:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    eee8:	a40b883a 	add	r5,r20,r16
    eeec:	b809883a 	mov	r4,r23
    eef0:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    eef4:	103fee1e 	bne	r2,zero,eeb0 <__alt_data_end+0xff00eeb0>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    eef8:	bd800d1e 	bne	r23,r22,ef30 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    eefc:	d8800017 	ldw	r2,0(sp)
    ef00:	10000426 	beq	r2,zero,ef14 <altera_avalon_jtag_uart_read+0xbc>
    ef04:	00002106 	br	ef8c <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    ef08:	90c00917 	ldw	r3,36(r18)
    ef0c:	90800117 	ldw	r2,4(r18)
    ef10:	1880022e 	bgeu	r3,r2,ef1c <altera_avalon_jtag_uart_read+0xc4>
    ef14:	90800a17 	ldw	r2,40(r18)
    ef18:	e0bffb26 	beq	fp,r2,ef08 <__alt_data_end+0xff00ef08>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    ef1c:	90800a17 	ldw	r2,40(r18)
    ef20:	e0800126 	beq	fp,r2,ef28 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ef24:	04ffe016 	blt	zero,r19,eea8 <__alt_data_end+0xff00eea8>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    ef28:	00bffec4 	movi	r2,-5
    ef2c:	00000b06 	br	ef5c <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ef30:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ef34:	00bfff84 	movi	r2,-2
    ef38:	2084703a 	and	r2,r4,r2
    ef3c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef40:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef44:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef48:	10800054 	ori	r2,r2,1
    ef4c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef50:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef54:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    ef58:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    ef5c:	dfc00a17 	ldw	ra,40(sp)
    ef60:	df000917 	ldw	fp,36(sp)
    ef64:	ddc00817 	ldw	r23,32(sp)
    ef68:	dd800717 	ldw	r22,28(sp)
    ef6c:	dd400617 	ldw	r21,24(sp)
    ef70:	dd000517 	ldw	r20,20(sp)
    ef74:	dcc00417 	ldw	r19,16(sp)
    ef78:	dc800317 	ldw	r18,12(sp)
    ef7c:	dc400217 	ldw	r17,8(sp)
    ef80:	dc000117 	ldw	r16,4(sp)
    ef84:	dec00b04 	addi	sp,sp,44
    ef88:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    ef8c:	00bffd44 	movi	r2,-11
    ef90:	003ff206 	br	ef5c <__alt_data_end+0xff00ef5c>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    ef94:	39d0000c 	andi	r7,r7,16384
    ef98:	3800021e 	bne	r7,zero,efa4 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    ef9c:	00bffec4 	movi	r2,-5
}
    efa0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    efa4:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    efa8:	f800283a 	ret

0000efac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    efac:	defff604 	addi	sp,sp,-40
    efb0:	dc000015 	stw	r16,0(sp)
    efb4:	dfc00915 	stw	ra,36(sp)
    efb8:	df000815 	stw	fp,32(sp)
    efbc:	ddc00715 	stw	r23,28(sp)
    efc0:	dd800615 	stw	r22,24(sp)
    efc4:	dd400515 	stw	r21,20(sp)
    efc8:	dd000415 	stw	r20,16(sp)
    efcc:	dcc00315 	stw	r19,12(sp)
    efd0:	dc800215 	stw	r18,8(sp)
    efd4:	dc400115 	stw	r17,4(sp)
    efd8:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    efdc:	01804d0e 	bge	zero,r6,f114 <altera_avalon_jtag_uart_write+0x168>
    efe0:	302d883a 	mov	r22,r6
    efe4:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    efe8:	3c50000c 	andi	r17,r7,16384
    efec:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eff0:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    eff4:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    eff8:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    effc:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    f000:	e0c03a2e 	bgeu	fp,r3,f0ec <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    f004:	1dffffc4 	addi	r23,r3,-1
    f008:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    f00c:	b800131e 	bne	r23,zero,f05c <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f010:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f014:	24c4703a 	and	r2,r4,r19
    f018:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f01c:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f020:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f024:	10800094 	ori	r2,r2,2
    f028:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f02c:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f030:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f034:	8800341e 	bne	r17,zero,f108 <altera_avalon_jtag_uart_write+0x15c>
    f038:	81000917 	ldw	r4,36(r16)
    f03c:	00000206 	br	f048 <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f040:	80800117 	ldw	r2,4(r16)
    f044:	2080022e 	bgeu	r4,r2,f050 <altera_avalon_jtag_uart_write+0xa4>
    f048:	80800d17 	ldw	r2,52(r16)
    f04c:	18bffc26 	beq	r3,r2,f040 <__alt_data_end+0xff00f040>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f050:	203fe926 	beq	r4,zero,eff8 <__alt_data_end+0xff00eff8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f054:	ad00181e 	bne	r21,r20,f0b8 <altera_avalon_jtag_uart_write+0x10c>
    f058:	00003a06 	br	f144 <altera_avalon_jtag_uart_write+0x198>
    f05c:	b5c0012e 	bgeu	r22,r23,f064 <altera_avalon_jtag_uart_write+0xb8>
    f060:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f064:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f068:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f06c:	a80b883a 	mov	r5,r21
    f070:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f074:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f078:	00079480 	call	7948 <memcpy>
      ptr   += n;
      count -= n;
    f07c:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f080:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f084:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f088:	05bfdb16 	blt	zero,r22,eff8 <__alt_data_end+0xff00eff8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f08c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f090:	00bfff84 	movi	r2,-2
    f094:	1884703a 	and	r2,r3,r2
    f098:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f09c:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0a0:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0a4:	10800094 	ori	r2,r2,2
    f0a8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0ac:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0b0:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f0b4:	a5402226 	beq	r20,r21,f140 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f0b8:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f0bc:	dfc00917 	ldw	ra,36(sp)
    f0c0:	df000817 	ldw	fp,32(sp)
    f0c4:	ddc00717 	ldw	r23,28(sp)
    f0c8:	dd800617 	ldw	r22,24(sp)
    f0cc:	dd400517 	ldw	r21,20(sp)
    f0d0:	dd000417 	ldw	r20,16(sp)
    f0d4:	dcc00317 	ldw	r19,12(sp)
    f0d8:	dc800217 	ldw	r18,8(sp)
    f0dc:	dc400117 	ldw	r17,4(sp)
    f0e0:	dc000017 	ldw	r16,0(sp)
    f0e4:	dec00a04 	addi	sp,sp,40
    f0e8:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f0ec:	18000326 	beq	r3,zero,f0fc <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f0f0:	00820004 	movi	r2,2048
    f0f4:	172fc83a 	sub	r23,r2,fp
    f0f8:	003fc406 	br	f00c <__alt_data_end+0xff00f00c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f0fc:	0081ffc4 	movi	r2,2047
    f100:	172fc83a 	sub	r23,r2,fp
    f104:	003fc106 	br	f00c <__alt_data_end+0xff00f00c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f108:	ad3feb1e 	bne	r21,r20,f0b8 <__alt_data_end+0xff00f0b8>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f10c:	00bffd44 	movi	r2,-11
    f110:	003fea06 	br	f0bc <__alt_data_end+0xff00f0bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f114:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f118:	00bfff84 	movi	r2,-2
    f11c:	1884703a 	and	r2,r3,r2
    f120:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f124:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f128:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f12c:	10800094 	ori	r2,r2,2
    f130:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f134:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f138:	1801703a 	wrctl	status,r3
    f13c:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f140:	883ff21e 	bne	r17,zero,f10c <__alt_data_end+0xff00f10c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f144:	00bffec4 	movi	r2,-5
    f148:	003fdc06 	br	f0bc <__alt_data_end+0xff00f0bc>

0000f14c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f14c:	defffe04 	addi	sp,sp,-8
    f150:	dfc00115 	stw	ra,4(sp)
    f154:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f158:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f15c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f160:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f164:	00bfff84 	movi	r2,-2
    f168:	8084703a 	and	r2,r16,r2
    f16c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f170:	000f8280 	call	f828 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f174:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f178:	dfc00117 	ldw	ra,4(sp)
    f17c:	dc000017 	ldw	r16,0(sp)
    f180:	dec00204 	addi	sp,sp,8
    f184:	f800283a 	ret

0000f188 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f188:	d0e72317 	ldw	r3,-25460(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f18c:	defffe04 	addi	sp,sp,-8
    f190:	dfc00115 	stw	ra,4(sp)
    f194:	2005883a 	mov	r2,r4
    f198:	2809883a 	mov	r4,r5
    f19c:	300b883a 	mov	r5,r6
    f1a0:	1800011e 	bne	r3,zero,f1a8 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f1a4:	d1e72315 	stw	r7,-25460(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f1a8:	00c001c4 	movi	r3,7
    f1ac:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f1b0:	01800074 	movhi	r6,1
    f1b4:	31bc5304 	addi	r6,r6,-3764
    f1b8:	d8000015 	stw	zero,0(sp)
    f1bc:	100f883a 	mov	r7,r2
    f1c0:	000f4840 	call	f484 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f1c4:	dfc00117 	ldw	ra,4(sp)
    f1c8:	dec00204 	addi	sp,sp,8
    f1cc:	f800283a 	ret

0000f1d0 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f1d0:	d0e71f17 	ldw	r3,-25476(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f1d4:	d0a72017 	ldw	r2,-25472(gp)

  if (!altera_avalon_timer_ts_freq)
    f1d8:	18000a26 	beq	r3,zero,f204 <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f1dc:	10c00104 	addi	r3,r2,4
    f1e0:	01000204 	movi	r4,8
    f1e4:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f1e8:	013fffd4 	movui	r4,65535
    f1ec:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f1f0:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f1f4:	00800104 	movi	r2,4
    f1f8:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f1fc:	0005883a 	mov	r2,zero
    f200:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f204:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f208:	f800283a 	ret

0000f20c <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f20c:	d0a71f17 	ldw	r2,-25476(gp)
    f210:	1000021e 	bne	r2,zero,f21c <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f214:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f218:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f21c:	d0e72017 	ldw	r3,-25472(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f220:	18800404 	addi	r2,r3,16
    f224:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f228:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f22c:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f230:	1806943a 	slli	r3,r3,16
    f234:	10bfffcc 	andi	r2,r2,65535
    f238:	1884303a 	nor	r2,r3,r2
    f23c:	f800283a 	ret

0000f240 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f240:	d0a71f17 	ldw	r2,-25476(gp)
    f244:	f800283a 	ret

0000f248 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f248:	d0a72317 	ldw	r2,-25460(gp)
    f24c:	10001a26 	beq	r2,zero,f2b8 <alt_alarm_start+0x70>
  {
    if (alarm)
    f250:	20001b26 	beq	r4,zero,f2c0 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f254:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f258:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f25c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f260:	00bfff84 	movi	r2,-2
    f264:	1884703a 	and	r2,r3,r2
    f268:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f26c:	d0a72217 	ldw	r2,-25464(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f270:	11800044 	addi	r6,r2,1
    f274:	314b883a 	add	r5,r6,r5
    f278:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f27c:	28800b36 	bltu	r5,r2,f2ac <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f280:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f284:	d0a00e04 	addi	r2,gp,-32712
    f288:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f28c:	d0a00e17 	ldw	r2,-32712(gp)
    f290:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f294:	d0a00e17 	ldw	r2,-32712(gp)
  list->next           = entry;
    f298:	d1200e15 	stw	r4,-32712(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f29c:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2a0:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f2a4:	0005883a 	mov	r2,zero
    f2a8:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f2ac:	00800044 	movi	r2,1
    f2b0:	20800405 	stb	r2,16(r4)
    f2b4:	003ff306 	br	f284 <__alt_data_end+0xff00f284>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f2b8:	00bfde84 	movi	r2,-134
    f2bc:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f2c0:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f2c4:	f800283a 	ret

0000f2c8 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f2c8:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f2cc:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f2d0:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f2d4:	dc000015 	stw	r16,0(sp)
    f2d8:	dfc00115 	stw	ra,4(sp)
    f2dc:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f2e0:	0001d440 	call	1d44 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f2e4:	10001226 	beq	r2,zero,f330 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2e8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f2ec:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2f0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f2f4:	21000044 	addi	r4,r4,1
    f2f8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2fc:	297fffc4 	addi	r5,r5,-1
    f300:	283ffe1e 	bne	r5,zero,f2fc <__alt_data_end+0xff00f2fc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f304:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f308:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f30c:	18bffb16 	blt	r3,r2,f2fc <__alt_data_end+0xff00f2fc>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f310:	8020913a 	slli	r16,r16,4
    f314:	843fffc4 	addi	r16,r16,-1
    f318:	803ffe1e 	bne	r16,zero,f314 <__alt_data_end+0xff00f314>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f31c:	0005883a 	mov	r2,zero
    f320:	dfc00117 	ldw	ra,4(sp)
    f324:	dc000017 	ldw	r16,0(sp)
    f328:	dec00204 	addi	sp,sp,8
    f32c:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f330:	8020913a 	slli	r16,r16,4
    f334:	843fffc4 	addi	r16,r16,-1
    f338:	043ffe16 	blt	zero,r16,f334 <__alt_data_end+0xff00f334>
    f33c:	003ff706 	br	f31c <__alt_data_end+0xff00f31c>

0000f340 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f340:	f800283a 	ret

0000f344 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f344:	20000a26 	beq	r4,zero,f370 <alt_dev_llist_insert+0x2c>
    f348:	20800217 	ldw	r2,8(r4)
    f34c:	10000826 	beq	r2,zero,f370 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f350:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f354:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f358:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f35c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f360:	28c00017 	ldw	r3,0(r5)
    f364:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f368:	29000015 	stw	r4,0(r5)
    f36c:	f800283a 	ret
    f370:	d0a00b17 	ldw	r2,-32724(gp)
    f374:	10000926 	beq	r2,zero,f39c <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f378:	deffff04 	addi	sp,sp,-4
    f37c:	dfc00015 	stw	ra,0(sp)
    f380:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f384:	00c00584 	movi	r3,22
    f388:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f38c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f390:	dfc00017 	ldw	ra,0(sp)
    f394:	dec00104 	addi	sp,sp,4
    f398:	f800283a 	ret
    f39c:	d0a71804 	addi	r2,gp,-25504
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f3a0:	00c00584 	movi	r3,22
    f3a4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f3a8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f3ac:	f800283a 	ret

0000f3b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f3b0:	defffc04 	addi	sp,sp,-16
    f3b4:	dc800215 	stw	r18,8(sp)
    f3b8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f3bc:	04800074 	movhi	r18,1
    f3c0:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f3c4:	dfc00315 	stw	ra,12(sp)
    f3c8:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f3cc:	843fb304 	addi	r16,r16,-308
    f3d0:	94bfb404 	addi	r18,r18,-304
    f3d4:	84800936 	bltu	r16,r18,f3fc <_do_ctors+0x4c>
    f3d8:	84a5c83a 	sub	r18,r16,r18
    f3dc:	9024d0ba 	srli	r18,r18,2
    f3e0:	0023883a 	mov	r17,zero
    f3e4:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f3e8:	80800017 	ldw	r2,0(r16)
    f3ec:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f3f0:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f3f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f3f8:	8cbffb1e 	bne	r17,r18,f3e8 <__alt_data_end+0xff00f3e8>
        (*ctor) (); 
}
    f3fc:	dfc00317 	ldw	ra,12(sp)
    f400:	dc800217 	ldw	r18,8(sp)
    f404:	dc400117 	ldw	r17,4(sp)
    f408:	dc000017 	ldw	r16,0(sp)
    f40c:	dec00404 	addi	sp,sp,16
    f410:	f800283a 	ret

0000f414 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f414:	defffc04 	addi	sp,sp,-16
    f418:	dc800215 	stw	r18,8(sp)
    f41c:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f420:	04800074 	movhi	r18,1
    f424:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f428:	dfc00315 	stw	ra,12(sp)
    f42c:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f430:	843fb304 	addi	r16,r16,-308
    f434:	94bfb404 	addi	r18,r18,-304
    f438:	84800936 	bltu	r16,r18,f460 <_do_dtors+0x4c>
    f43c:	84a5c83a 	sub	r18,r16,r18
    f440:	9024d0ba 	srli	r18,r18,2
    f444:	0023883a 	mov	r17,zero
    f448:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f44c:	80800017 	ldw	r2,0(r16)
    f450:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f454:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f458:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f45c:	8cbffb1e 	bne	r17,r18,f44c <__alt_data_end+0xff00f44c>
        (*dtor) (); 
}
    f460:	dfc00317 	ldw	ra,12(sp)
    f464:	dc800217 	ldw	r18,8(sp)
    f468:	dc400117 	ldw	r17,4(sp)
    f46c:	dc000017 	ldw	r16,0(sp)
    f470:	dec00404 	addi	sp,sp,16
    f474:	f800283a 	ret

0000f478 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f478:	01440004 	movi	r5,4096
    f47c:	0009883a 	mov	r4,zero
    f480:	000fa981 	jmpi	fa98 <alt_icache_flush>

0000f484 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f484:	000f5101 	jmpi	f510 <alt_iic_isr_register>

0000f488 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f488:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f48c:	00bfff84 	movi	r2,-2
    f490:	2084703a 	and	r2,r4,r2
    f494:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f498:	00c00044 	movi	r3,1
    f49c:	d0a72117 	ldw	r2,-25468(gp)
    f4a0:	194a983a 	sll	r5,r3,r5
    f4a4:	288ab03a 	or	r5,r5,r2
    f4a8:	d1672115 	stw	r5,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f4ac:	d0a72117 	ldw	r2,-25468(gp)
    f4b0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4b4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f4b8:	0005883a 	mov	r2,zero
    f4bc:	f800283a 	ret

0000f4c0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f4c0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f4c4:	00bfff84 	movi	r2,-2
    f4c8:	2084703a 	and	r2,r4,r2
    f4cc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f4d0:	00ffff84 	movi	r3,-2
    f4d4:	d0a72117 	ldw	r2,-25468(gp)
    f4d8:	194a183a 	rol	r5,r3,r5
    f4dc:	288a703a 	and	r5,r5,r2
    f4e0:	d1672115 	stw	r5,-25468(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f4e4:	d0a72117 	ldw	r2,-25468(gp)
    f4e8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4ec:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f4f0:	0005883a 	mov	r2,zero
    f4f4:	f800283a 	ret

0000f4f8 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f4f8:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f4fc:	00800044 	movi	r2,1
    f500:	1144983a 	sll	r2,r2,r5
    f504:	10c4703a 	and	r2,r2,r3
}
    f508:	1004c03a 	cmpne	r2,r2,zero
    f50c:	f800283a 	ret

0000f510 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f510:	00c007c4 	movi	r3,31
    f514:	19401616 	blt	r3,r5,f570 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f518:	defffe04 	addi	sp,sp,-8
    f51c:	dfc00115 	stw	ra,4(sp)
    f520:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f524:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f528:	00ffff84 	movi	r3,-2
    f52c:	80c6703a 	and	r3,r16,r3
    f530:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f534:	280490fa 	slli	r2,r5,3
    f538:	00c00074 	movhi	r3,1
    f53c:	18cfbc04 	addi	r3,r3,16112
    f540:	1885883a 	add	r2,r3,r2
    f544:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f548:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f54c:	30000626 	beq	r6,zero,f568 <alt_iic_isr_register+0x58>
    f550:	000f4880 	call	f488 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f554:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f558:	dfc00117 	ldw	ra,4(sp)
    f55c:	dc000017 	ldw	r16,0(sp)
    f560:	dec00204 	addi	sp,sp,8
    f564:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f568:	000f4c00 	call	f4c0 <alt_ic_irq_disable>
    f56c:	003ff906 	br	f554 <__alt_data_end+0xff00f554>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f570:	00bffa84 	movi	r2,-22
    f574:	f800283a 	ret

0000f578 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f578:	defffd04 	addi	sp,sp,-12
    f57c:	dc400115 	stw	r17,4(sp)
    f580:	dc000015 	stw	r16,0(sp)
    f584:	2823883a 	mov	r17,r5
    f588:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f58c:	01400044 	movi	r5,1
    f590:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f594:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f598:	000f67c0 	call	f67c <open>

  if (old >= 0)
    f59c:	10000c16 	blt	r2,zero,f5d0 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f5a0:	10c00324 	muli	r3,r2,12
    f5a4:	01400074 	movhi	r5,1
    f5a8:	29440b04 	addi	r5,r5,4140
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f5ac:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f5b0:	28c5883a 	add	r2,r5,r3
    f5b4:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f5b8:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f5bc:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f5c0:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f5c4:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f5c8:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f5cc:	000e9cc0 	call	e9cc <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f5d0:	01807fc4 	movi	r6,511
    f5d4:	000b883a 	mov	r5,zero
    f5d8:	8809883a 	mov	r4,r17
    f5dc:	000f67c0 	call	f67c <open>

  if (old >= 0)
    f5e0:	10000c16 	blt	r2,zero,f614 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f5e4:	10c00324 	muli	r3,r2,12
    f5e8:	01400074 	movhi	r5,1
    f5ec:	29440b04 	addi	r5,r5,4140
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f5f0:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f5f4:	28c5883a 	add	r2,r5,r3
    f5f8:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f5fc:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f600:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f604:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f608:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f60c:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f610:	000e9cc0 	call	e9cc <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f614:	01807fc4 	movi	r6,511
    f618:	01400044 	movi	r5,1
    f61c:	8009883a 	mov	r4,r16
    f620:	000f67c0 	call	f67c <open>

  if (old >= 0)
    f624:	10001016 	blt	r2,zero,f668 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f628:	10c00324 	muli	r3,r2,12
    f62c:	01400074 	movhi	r5,1
    f630:	29440b04 	addi	r5,r5,4140
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f634:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f638:	28c5883a 	add	r2,r5,r3
    f63c:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f640:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f644:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f648:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f64c:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f650:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f654:	dfc00217 	ldw	ra,8(sp)
    f658:	dc400117 	ldw	r17,4(sp)
    f65c:	dc000017 	ldw	r16,0(sp)
    f660:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f664:	000e9cc1 	jmpi	e9cc <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f668:	dfc00217 	ldw	ra,8(sp)
    f66c:	dc400117 	ldw	r17,4(sp)
    f670:	dc000017 	ldw	r16,0(sp)
    f674:	dec00304 	addi	sp,sp,12
    f678:	f800283a 	ret

0000f67c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f67c:	defffa04 	addi	sp,sp,-24
    f680:	dc000015 	stw	r16,0(sp)
    f684:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f688:	d1600704 	addi	r5,gp,-32740
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f68c:	dc800215 	stw	r18,8(sp)
    f690:	dc400115 	stw	r17,4(sp)
    f694:	dfc00515 	stw	ra,20(sp)
    f698:	dd000415 	stw	r20,16(sp)
    f69c:	dcc00315 	stw	r19,12(sp)
    f6a0:	2023883a 	mov	r17,r4
    f6a4:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f6a8:	000f9240 	call	f924 <alt_find_dev>
    f6ac:	10004626 	beq	r2,zero,f7c8 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f6b0:	1009883a 	mov	r4,r2
    f6b4:	1029883a 	mov	r20,r2
    f6b8:	000fa480 	call	fa48 <alt_get_fd>
    f6bc:	1027883a 	mov	r19,r2
    f6c0:	1000090e 	bge	r2,zero,f6e8 <open+0x6c>
    f6c4:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f6c8:	9809883a 	mov	r4,r19
    f6cc:	000e9cc0 	call	e9cc <alt_release_fd>
    f6d0:	d0a00b17 	ldw	r2,-32724(gp)
    f6d4:	10004326 	beq	r2,zero,f7e4 <open+0x168>
    f6d8:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f6dc:	14000015 	stw	r16,0(r2)
    return -1;
    f6e0:	00bfffc4 	movi	r2,-1
    f6e4:	00002e06 	br	f7a0 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f6e8:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f6ec:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f6f0:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f6f4:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f6f8:	10840b04 	addi	r2,r2,4140

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f6fc:	80c6703a 	and	r3,r16,r3
    f700:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f704:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f708:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f70c:	d2200617 	ldw	r8,-32744(gp)
    f710:	21c00017 	ldw	r7,0(r4)
    f714:	11400204 	addi	r5,r2,8
    f718:	0007883a 	mov	r3,zero
    f71c:	00000306 	br	f72c <open+0xb0>
    f720:	10800304 	addi	r2,r2,12
    f724:	29400304 	addi	r5,r5,12
    f728:	40c01436 	bltu	r8,r3,f77c <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f72c:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f730:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f734:	31fffa1e 	bne	r6,r7,f720 <__alt_data_end+0xff00f720>
    f738:	29800017 	ldw	r6,0(r5)
    f73c:	303ff80e 	bge	r6,zero,f720 <__alt_data_end+0xff00f720>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f740:	20bff726 	beq	r4,r2,f720 <__alt_data_end+0xff00f720>
    f744:	04000344 	movi	r16,13
    f748:	003fdf06 	br	f6c8 <__alt_data_end+0xff00f6c8>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f74c:	1009883a 	mov	r4,r2
    f750:	000fa480 	call	fa48 <alt_get_fd>
    f754:	1027883a 	mov	r19,r2
    f758:	103fda16 	blt	r2,zero,f6c4 <__alt_data_end+0xff00f6c4>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f75c:	99000324 	muli	r4,r19,12
    f760:	00800074 	movhi	r2,1
    f764:	10840b04 	addi	r2,r2,4140
    f768:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f76c:	00900034 	movhi	r2,16384
    f770:	10bfffc4 	addi	r2,r2,-1
    f774:	8084703a 	and	r2,r16,r2
    f778:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f77c:	a0800317 	ldw	r2,12(r20)
    f780:	10000f26 	beq	r2,zero,f7c0 <open+0x144>
    f784:	900f883a 	mov	r7,r18
    f788:	800d883a 	mov	r6,r16
    f78c:	880b883a 	mov	r5,r17
    f790:	103ee83a 	callr	r2
    f794:	1007883a 	mov	r3,r2
    f798:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f79c:	18001316 	blt	r3,zero,f7ec <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    f7a0:	dfc00517 	ldw	ra,20(sp)
    f7a4:	dd000417 	ldw	r20,16(sp)
    f7a8:	dcc00317 	ldw	r19,12(sp)
    f7ac:	dc800217 	ldw	r18,8(sp)
    f7b0:	dc400117 	ldw	r17,4(sp)
    f7b4:	dc000017 	ldw	r16,0(sp)
    f7b8:	dec00604 	addi	sp,sp,24
    f7bc:	f800283a 	ret
    f7c0:	9805883a 	mov	r2,r19
    f7c4:	003ff606 	br	f7a0 <__alt_data_end+0xff00f7a0>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f7c8:	8809883a 	mov	r4,r17
    f7cc:	000f99c0 	call	f99c <alt_find_file>
    f7d0:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f7d4:	103fdd1e 	bne	r2,zero,f74c <__alt_data_end+0xff00f74c>
    f7d8:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f7dc:	04ffffc4 	movi	r19,-1
    f7e0:	003fb906 	br	f6c8 <__alt_data_end+0xff00f6c8>
    f7e4:	d0a71804 	addi	r2,gp,-25504
    f7e8:	003fbc06 	br	f6dc <__alt_data_end+0xff00f6dc>
    f7ec:	00e1c83a 	sub	r16,zero,r3
    f7f0:	003fb506 	br	f6c8 <__alt_data_end+0xff00f6c8>

0000f7f4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7f4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7f8:	00bfff84 	movi	r2,-2
    f7fc:	1884703a 	and	r2,r3,r2
    f800:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f804:	21400117 	ldw	r5,4(r4)
    f808:	20800017 	ldw	r2,0(r4)
    f80c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    f810:	21400117 	ldw	r5,4(r4)
    f814:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f818:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    f81c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f820:	1801703a 	wrctl	status,r3
    f824:	f800283a 	ret

0000f828 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f828:	d0a72217 	ldw	r2,-25464(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f82c:	defffa04 	addi	sp,sp,-24
    f830:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f834:	d4200e17 	ldw	r16,-32712(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f838:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f83c:	dc800215 	stw	r18,8(sp)
    f840:	dfc00515 	stw	ra,20(sp)
    f844:	dd000415 	stw	r20,16(sp)
    f848:	dcc00315 	stw	r19,12(sp)
    f84c:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f850:	d4a00e04 	addi	r18,gp,-32712

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f854:	d0a72215 	stw	r2,-25464(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f858:	84801126 	beq	r16,r18,f8a0 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    f85c:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f860:	053fff84 	movi	r20,-2
    f864:	00000606 	br	f880 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    f868:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f86c:	d0e72217 	ldw	r3,-25464(gp)
    f870:	80800217 	ldw	r2,8(r16)
    f874:	1880122e 	bgeu	r3,r2,f8c0 <alt_tick+0x98>
    f878:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f87c:	8c800826 	beq	r17,r18,f8a0 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f880:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    f884:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f888:	103ff826 	beq	r2,zero,f86c <__alt_data_end+0xff00f86c>
    f88c:	d0a72217 	ldw	r2,-25464(gp)
    f890:	103ff526 	beq	r2,zero,f868 <__alt_data_end+0xff00f868>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f894:	d0a72217 	ldw	r2,-25464(gp)
    f898:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f89c:	8cbff81e 	bne	r17,r18,f880 <__alt_data_end+0xff00f880>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    f8a0:	dfc00517 	ldw	ra,20(sp)
    f8a4:	dd000417 	ldw	r20,16(sp)
    f8a8:	dcc00317 	ldw	r19,12(sp)
    f8ac:	dc800217 	ldw	r18,8(sp)
    f8b0:	dc400117 	ldw	r17,4(sp)
    f8b4:	dc000017 	ldw	r16,0(sp)
    f8b8:	dec00604 	addi	sp,sp,24
    f8bc:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    f8c0:	80800317 	ldw	r2,12(r16)
    f8c4:	81000517 	ldw	r4,20(r16)
    f8c8:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f8cc:	10000726 	beq	r2,zero,f8ec <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f8d0:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f8d4:	d1272217 	ldw	r4,-25464(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f8d8:	10c5883a 	add	r2,r2,r3
    f8dc:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f8e0:	113fe52e 	bgeu	r2,r4,f878 <__alt_data_end+0xff00f878>
        {
          alarm->rollover = 1;
    f8e4:	84c00405 	stb	r19,16(r16)
    f8e8:	003fe306 	br	f878 <__alt_data_end+0xff00f878>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8ec:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8f0:	1506703a 	and	r3,r2,r20
    f8f4:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f8f8:	81000117 	ldw	r4,4(r16)
    f8fc:	80c00017 	ldw	r3,0(r16)
    f900:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    f904:	81000117 	ldw	r4,4(r16)
    f908:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f90c:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    f910:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f914:	1001703a 	wrctl	status,r2
    f918:	003fd706 	br	f878 <__alt_data_end+0xff00f878>

0000f91c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    f91c:	000170fa 	wrctl	ienable,zero
    f920:	f800283a 	ret

0000f924 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f924:	defffb04 	addi	sp,sp,-20
    f928:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    f92c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f930:	dc400115 	stw	r17,4(sp)
    f934:	2823883a 	mov	r17,r5
    f938:	dcc00315 	stw	r19,12(sp)
    f93c:	dfc00415 	stw	ra,16(sp)
    f940:	dc800215 	stw	r18,8(sp)
    f944:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    f948:	00027c80 	call	27c8 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f94c:	8c000b26 	beq	r17,r16,f97c <alt_find_dev+0x58>
    f950:	14800044 	addi	r18,r2,1
    f954:	00000206 	br	f960 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    f958:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f95c:	8c000726 	beq	r17,r16,f97c <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f960:	81000217 	ldw	r4,8(r16)
    f964:	900d883a 	mov	r6,r18
    f968:	980b883a 	mov	r5,r19
    f96c:	000fba80 	call	fba8 <memcmp>
    f970:	103ff91e 	bne	r2,zero,f958 <__alt_data_end+0xff00f958>
    f974:	8005883a 	mov	r2,r16
    f978:	00000106 	br	f980 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f97c:	0005883a 	mov	r2,zero
}
    f980:	dfc00417 	ldw	ra,16(sp)
    f984:	dcc00317 	ldw	r19,12(sp)
    f988:	dc800217 	ldw	r18,8(sp)
    f98c:	dc400117 	ldw	r17,4(sp)
    f990:	dc000017 	ldw	r16,0(sp)
    f994:	dec00504 	addi	sp,sp,20
    f998:	f800283a 	ret

0000f99c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f99c:	defffa04 	addi	sp,sp,-24
    f9a0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f9a4:	d4200917 	ldw	r16,-32732(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f9a8:	dd000415 	stw	r20,16(sp)
    f9ac:	dfc00515 	stw	ra,20(sp)
    f9b0:	dcc00315 	stw	r19,12(sp)
    f9b4:	dc800215 	stw	r18,8(sp)
    f9b8:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f9bc:	d5200904 	addi	r20,gp,-32732
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f9c0:	85001626 	beq	r16,r20,fa1c <alt_find_file+0x80>
    f9c4:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    f9c8:	04c00bc4 	movi	r19,47
    f9cc:	00000806 	br	f9f0 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f9d0:	9185883a 	add	r2,r18,r6
    f9d4:	10800007 	ldb	r2,0(r2)
    f9d8:	14c00126 	beq	r2,r19,f9e0 <alt_find_file+0x44>
    f9dc:	1000021e 	bne	r2,zero,f9e8 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    f9e0:	000fba80 	call	fba8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f9e4:	10001626 	beq	r2,zero,fa40 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    f9e8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f9ec:	85000b26 	beq	r16,r20,fa1c <alt_find_file+0x80>
  {
    len = strlen(next->name);
    f9f0:	84400217 	ldw	r17,8(r16)
    f9f4:	8809883a 	mov	r4,r17
    f9f8:	00027c80 	call	27c8 <strlen>
    f9fc:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    fa00:	8885883a 	add	r2,r17,r2
    fa04:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fa08:	900b883a 	mov	r5,r18
    fa0c:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fa10:	14ffef1e 	bne	r2,r19,f9d0 <__alt_data_end+0xff00f9d0>
    {
      len -= 1;
    fa14:	31bfffc4 	addi	r6,r6,-1
    fa18:	003fed06 	br	f9d0 <__alt_data_end+0xff00f9d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fa1c:	0005883a 	mov	r2,zero
}
    fa20:	dfc00517 	ldw	ra,20(sp)
    fa24:	dd000417 	ldw	r20,16(sp)
    fa28:	dcc00317 	ldw	r19,12(sp)
    fa2c:	dc800217 	ldw	r18,8(sp)
    fa30:	dc400117 	ldw	r17,4(sp)
    fa34:	dc000017 	ldw	r16,0(sp)
    fa38:	dec00604 	addi	sp,sp,24
    fa3c:	f800283a 	ret
    fa40:	8005883a 	mov	r2,r16
    fa44:	003ff606 	br	fa20 <__alt_data_end+0xff00fa20>

0000fa48 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fa48:	01c00074 	movhi	r7,1
    fa4c:	39c40b04 	addi	r7,r7,4140
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fa50:	0005883a 	mov	r2,zero
    fa54:	3807883a 	mov	r3,r7
    fa58:	01800804 	movi	r6,32
    fa5c:	00000206 	br	fa68 <alt_get_fd+0x20>
    fa60:	10800044 	addi	r2,r2,1
    fa64:	11800a26 	beq	r2,r6,fa90 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fa68:	19400017 	ldw	r5,0(r3)
    fa6c:	18c00304 	addi	r3,r3,12
    fa70:	283ffb1e 	bne	r5,zero,fa60 <__alt_data_end+0xff00fa60>
    {
      alt_fd_list[i].dev = dev;
    fa74:	10c00324 	muli	r3,r2,12
    fa78:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fa7c:	d0e00617 	ldw	r3,-32744(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fa80:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fa84:	1880030e 	bge	r3,r2,fa94 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fa88:	d0a00615 	stw	r2,-32744(gp)
    fa8c:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    fa90:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fa94:	f800283a 	ret

0000fa98 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fa98:	00840004 	movi	r2,4096
    fa9c:	1140012e 	bgeu	r2,r5,faa4 <alt_icache_flush+0xc>
    faa0:	100b883a 	mov	r5,r2
    faa4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    faa8:	2005883a 	mov	r2,r4
    faac:	2140092e 	bgeu	r4,r5,fad4 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fab0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fab4:	10800804 	addi	r2,r2,32
    fab8:	117ffd36 	bltu	r2,r5,fab0 <__alt_data_end+0xff00fab0>
    fabc:	0104303a 	nor	r2,zero,r4
    fac0:	2885883a 	add	r2,r5,r2
    fac4:	1004d17a 	srli	r2,r2,5
    fac8:	10800044 	addi	r2,r2,1
    facc:	1004917a 	slli	r2,r2,5
    fad0:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fad4:	210007cc 	andi	r4,r4,31
    fad8:	20000126 	beq	r4,zero,fae0 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fadc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fae0:	0000203a 	flushp
    fae4:	f800283a 	ret

0000fae8 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fae8:	213ffe84 	addi	r4,r4,-6
    faec:	008003c4 	movi	r2,15
    faf0:	11001636 	bltu	r2,r4,fb4c <alt_exception_cause_generated_bad_addr+0x64>
    faf4:	200890ba 	slli	r4,r4,2
    faf8:	00800074 	movhi	r2,1
    fafc:	10bec304 	addi	r2,r2,-1268
    fb00:	2089883a 	add	r4,r4,r2
    fb04:	20800017 	ldw	r2,0(r4)
    fb08:	1000683a 	jmp	r2
    fb0c:	0000fb54 	movui	zero,1005
    fb10:	0000fb54 	movui	zero,1005
    fb14:	0000fb4c 	andi	zero,zero,1005
    fb18:	0000fb4c 	andi	zero,zero,1005
    fb1c:	0000fb4c 	andi	zero,zero,1005
    fb20:	0000fb54 	movui	zero,1005
    fb24:	0000fb4c 	andi	zero,zero,1005
    fb28:	0000fb4c 	andi	zero,zero,1005
    fb2c:	0000fb54 	movui	zero,1005
    fb30:	0000fb54 	movui	zero,1005
    fb34:	0000fb4c 	andi	zero,zero,1005
    fb38:	0000fb54 	movui	zero,1005
    fb3c:	0000fb4c 	andi	zero,zero,1005
    fb40:	0000fb4c 	andi	zero,zero,1005
    fb44:	0000fb4c 	andi	zero,zero,1005
    fb48:	0000fb54 	movui	zero,1005
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fb4c:	0005883a 	mov	r2,zero
    fb50:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fb54:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fb58:	f800283a 	ret

0000fb5c <atexit>:
    fb5c:	200b883a 	mov	r5,r4
    fb60:	000f883a 	mov	r7,zero
    fb64:	000d883a 	mov	r6,zero
    fb68:	0009883a 	mov	r4,zero
    fb6c:	000fc241 	jmpi	fc24 <__register_exitproc>

0000fb70 <exit>:
    fb70:	defffe04 	addi	sp,sp,-8
    fb74:	000b883a 	mov	r5,zero
    fb78:	dc000015 	stw	r16,0(sp)
    fb7c:	dfc00115 	stw	ra,4(sp)
    fb80:	2021883a 	mov	r16,r4
    fb84:	000fd3c0 	call	fd3c <__call_exitprocs>
    fb88:	00800074 	movhi	r2,1
    fb8c:	10888f04 	addi	r2,r2,8764
    fb90:	11000017 	ldw	r4,0(r2)
    fb94:	20800f17 	ldw	r2,60(r4)
    fb98:	10000126 	beq	r2,zero,fba0 <exit+0x30>
    fb9c:	103ee83a 	callr	r2
    fba0:	8009883a 	mov	r4,r16
    fba4:	000febc0 	call	febc <_exit>

0000fba8 <memcmp>:
    fba8:	01c000c4 	movi	r7,3
    fbac:	3980192e 	bgeu	r7,r6,fc14 <memcmp+0x6c>
    fbb0:	2144b03a 	or	r2,r4,r5
    fbb4:	11c4703a 	and	r2,r2,r7
    fbb8:	10000f26 	beq	r2,zero,fbf8 <memcmp+0x50>
    fbbc:	20800003 	ldbu	r2,0(r4)
    fbc0:	28c00003 	ldbu	r3,0(r5)
    fbc4:	10c0151e 	bne	r2,r3,fc1c <memcmp+0x74>
    fbc8:	31bfff84 	addi	r6,r6,-2
    fbcc:	01ffffc4 	movi	r7,-1
    fbd0:	00000406 	br	fbe4 <memcmp+0x3c>
    fbd4:	20800003 	ldbu	r2,0(r4)
    fbd8:	28c00003 	ldbu	r3,0(r5)
    fbdc:	31bfffc4 	addi	r6,r6,-1
    fbe0:	10c00e1e 	bne	r2,r3,fc1c <memcmp+0x74>
    fbe4:	21000044 	addi	r4,r4,1
    fbe8:	29400044 	addi	r5,r5,1
    fbec:	31fff91e 	bne	r6,r7,fbd4 <__alt_data_end+0xff00fbd4>
    fbf0:	0005883a 	mov	r2,zero
    fbf4:	f800283a 	ret
    fbf8:	20c00017 	ldw	r3,0(r4)
    fbfc:	28800017 	ldw	r2,0(r5)
    fc00:	18bfee1e 	bne	r3,r2,fbbc <__alt_data_end+0xff00fbbc>
    fc04:	31bfff04 	addi	r6,r6,-4
    fc08:	21000104 	addi	r4,r4,4
    fc0c:	29400104 	addi	r5,r5,4
    fc10:	39bff936 	bltu	r7,r6,fbf8 <__alt_data_end+0xff00fbf8>
    fc14:	303fe91e 	bne	r6,zero,fbbc <__alt_data_end+0xff00fbbc>
    fc18:	003ff506 	br	fbf0 <__alt_data_end+0xff00fbf0>
    fc1c:	10c5c83a 	sub	r2,r2,r3
    fc20:	f800283a 	ret

0000fc24 <__register_exitproc>:
    fc24:	defffa04 	addi	sp,sp,-24
    fc28:	dc000315 	stw	r16,12(sp)
    fc2c:	04000074 	movhi	r16,1
    fc30:	84088f04 	addi	r16,r16,8764
    fc34:	80c00017 	ldw	r3,0(r16)
    fc38:	dc400415 	stw	r17,16(sp)
    fc3c:	dfc00515 	stw	ra,20(sp)
    fc40:	18805217 	ldw	r2,328(r3)
    fc44:	2023883a 	mov	r17,r4
    fc48:	10003726 	beq	r2,zero,fd28 <__register_exitproc+0x104>
    fc4c:	10c00117 	ldw	r3,4(r2)
    fc50:	010007c4 	movi	r4,31
    fc54:	20c00e16 	blt	r4,r3,fc90 <__register_exitproc+0x6c>
    fc58:	1a000044 	addi	r8,r3,1
    fc5c:	8800221e 	bne	r17,zero,fce8 <__register_exitproc+0xc4>
    fc60:	18c00084 	addi	r3,r3,2
    fc64:	18c7883a 	add	r3,r3,r3
    fc68:	18c7883a 	add	r3,r3,r3
    fc6c:	12000115 	stw	r8,4(r2)
    fc70:	10c7883a 	add	r3,r2,r3
    fc74:	19400015 	stw	r5,0(r3)
    fc78:	0005883a 	mov	r2,zero
    fc7c:	dfc00517 	ldw	ra,20(sp)
    fc80:	dc400417 	ldw	r17,16(sp)
    fc84:	dc000317 	ldw	r16,12(sp)
    fc88:	dec00604 	addi	sp,sp,24
    fc8c:	f800283a 	ret
    fc90:	00800034 	movhi	r2,0
    fc94:	10878004 	addi	r2,r2,7680
    fc98:	10002626 	beq	r2,zero,fd34 <__register_exitproc+0x110>
    fc9c:	01006404 	movi	r4,400
    fca0:	d9400015 	stw	r5,0(sp)
    fca4:	d9800115 	stw	r6,4(sp)
    fca8:	d9c00215 	stw	r7,8(sp)
    fcac:	0001e000 	call	1e00 <malloc>
    fcb0:	d9400017 	ldw	r5,0(sp)
    fcb4:	d9800117 	ldw	r6,4(sp)
    fcb8:	d9c00217 	ldw	r7,8(sp)
    fcbc:	10001d26 	beq	r2,zero,fd34 <__register_exitproc+0x110>
    fcc0:	81000017 	ldw	r4,0(r16)
    fcc4:	10000115 	stw	zero,4(r2)
    fcc8:	02000044 	movi	r8,1
    fccc:	22405217 	ldw	r9,328(r4)
    fcd0:	0007883a 	mov	r3,zero
    fcd4:	12400015 	stw	r9,0(r2)
    fcd8:	20805215 	stw	r2,328(r4)
    fcdc:	10006215 	stw	zero,392(r2)
    fce0:	10006315 	stw	zero,396(r2)
    fce4:	883fde26 	beq	r17,zero,fc60 <__alt_data_end+0xff00fc60>
    fce8:	18c9883a 	add	r4,r3,r3
    fcec:	2109883a 	add	r4,r4,r4
    fcf0:	1109883a 	add	r4,r2,r4
    fcf4:	21802215 	stw	r6,136(r4)
    fcf8:	01800044 	movi	r6,1
    fcfc:	12406217 	ldw	r9,392(r2)
    fd00:	30cc983a 	sll	r6,r6,r3
    fd04:	4992b03a 	or	r9,r9,r6
    fd08:	12406215 	stw	r9,392(r2)
    fd0c:	21c04215 	stw	r7,264(r4)
    fd10:	01000084 	movi	r4,2
    fd14:	893fd21e 	bne	r17,r4,fc60 <__alt_data_end+0xff00fc60>
    fd18:	11006317 	ldw	r4,396(r2)
    fd1c:	218cb03a 	or	r6,r4,r6
    fd20:	11806315 	stw	r6,396(r2)
    fd24:	003fce06 	br	fc60 <__alt_data_end+0xff00fc60>
    fd28:	18805304 	addi	r2,r3,332
    fd2c:	18805215 	stw	r2,328(r3)
    fd30:	003fc606 	br	fc4c <__alt_data_end+0xff00fc4c>
    fd34:	00bfffc4 	movi	r2,-1
    fd38:	003fd006 	br	fc7c <__alt_data_end+0xff00fc7c>

0000fd3c <__call_exitprocs>:
    fd3c:	defff504 	addi	sp,sp,-44
    fd40:	df000915 	stw	fp,36(sp)
    fd44:	dd400615 	stw	r21,24(sp)
    fd48:	dc800315 	stw	r18,12(sp)
    fd4c:	dfc00a15 	stw	ra,40(sp)
    fd50:	ddc00815 	stw	r23,32(sp)
    fd54:	dd800715 	stw	r22,28(sp)
    fd58:	dd000515 	stw	r20,20(sp)
    fd5c:	dcc00415 	stw	r19,16(sp)
    fd60:	dc400215 	stw	r17,8(sp)
    fd64:	dc000115 	stw	r16,4(sp)
    fd68:	d9000015 	stw	r4,0(sp)
    fd6c:	2839883a 	mov	fp,r5
    fd70:	04800044 	movi	r18,1
    fd74:	057fffc4 	movi	r21,-1
    fd78:	00800074 	movhi	r2,1
    fd7c:	10888f04 	addi	r2,r2,8764
    fd80:	12000017 	ldw	r8,0(r2)
    fd84:	45005217 	ldw	r20,328(r8)
    fd88:	44c05204 	addi	r19,r8,328
    fd8c:	a0001c26 	beq	r20,zero,fe00 <__call_exitprocs+0xc4>
    fd90:	a0800117 	ldw	r2,4(r20)
    fd94:	15ffffc4 	addi	r23,r2,-1
    fd98:	b8000d16 	blt	r23,zero,fdd0 <__call_exitprocs+0x94>
    fd9c:	14000044 	addi	r16,r2,1
    fda0:	8421883a 	add	r16,r16,r16
    fda4:	8421883a 	add	r16,r16,r16
    fda8:	84402004 	addi	r17,r16,128
    fdac:	a463883a 	add	r17,r20,r17
    fdb0:	a421883a 	add	r16,r20,r16
    fdb4:	e0001e26 	beq	fp,zero,fe30 <__call_exitprocs+0xf4>
    fdb8:	80804017 	ldw	r2,256(r16)
    fdbc:	e0801c26 	beq	fp,r2,fe30 <__call_exitprocs+0xf4>
    fdc0:	bdffffc4 	addi	r23,r23,-1
    fdc4:	843fff04 	addi	r16,r16,-4
    fdc8:	8c7fff04 	addi	r17,r17,-4
    fdcc:	bd7ff91e 	bne	r23,r21,fdb4 <__alt_data_end+0xff00fdb4>
    fdd0:	00800034 	movhi	r2,0
    fdd4:	10878504 	addi	r2,r2,7700
    fdd8:	10000926 	beq	r2,zero,fe00 <__call_exitprocs+0xc4>
    fddc:	a0800117 	ldw	r2,4(r20)
    fde0:	1000301e 	bne	r2,zero,fea4 <__call_exitprocs+0x168>
    fde4:	a0800017 	ldw	r2,0(r20)
    fde8:	10003226 	beq	r2,zero,feb4 <__call_exitprocs+0x178>
    fdec:	a009883a 	mov	r4,r20
    fdf0:	98800015 	stw	r2,0(r19)
    fdf4:	0001e140 	call	1e14 <free>
    fdf8:	9d000017 	ldw	r20,0(r19)
    fdfc:	a03fe41e 	bne	r20,zero,fd90 <__alt_data_end+0xff00fd90>
    fe00:	dfc00a17 	ldw	ra,40(sp)
    fe04:	df000917 	ldw	fp,36(sp)
    fe08:	ddc00817 	ldw	r23,32(sp)
    fe0c:	dd800717 	ldw	r22,28(sp)
    fe10:	dd400617 	ldw	r21,24(sp)
    fe14:	dd000517 	ldw	r20,20(sp)
    fe18:	dcc00417 	ldw	r19,16(sp)
    fe1c:	dc800317 	ldw	r18,12(sp)
    fe20:	dc400217 	ldw	r17,8(sp)
    fe24:	dc000117 	ldw	r16,4(sp)
    fe28:	dec00b04 	addi	sp,sp,44
    fe2c:	f800283a 	ret
    fe30:	a0800117 	ldw	r2,4(r20)
    fe34:	80c00017 	ldw	r3,0(r16)
    fe38:	10bfffc4 	addi	r2,r2,-1
    fe3c:	15c01426 	beq	r2,r23,fe90 <__call_exitprocs+0x154>
    fe40:	80000015 	stw	zero,0(r16)
    fe44:	183fde26 	beq	r3,zero,fdc0 <__alt_data_end+0xff00fdc0>
    fe48:	95c8983a 	sll	r4,r18,r23
    fe4c:	a0806217 	ldw	r2,392(r20)
    fe50:	a5800117 	ldw	r22,4(r20)
    fe54:	2084703a 	and	r2,r4,r2
    fe58:	10000b26 	beq	r2,zero,fe88 <__call_exitprocs+0x14c>
    fe5c:	a0806317 	ldw	r2,396(r20)
    fe60:	2088703a 	and	r4,r4,r2
    fe64:	20000c1e 	bne	r4,zero,fe98 <__call_exitprocs+0x15c>
    fe68:	89400017 	ldw	r5,0(r17)
    fe6c:	d9000017 	ldw	r4,0(sp)
    fe70:	183ee83a 	callr	r3
    fe74:	a0800117 	ldw	r2,4(r20)
    fe78:	15bfbf1e 	bne	r2,r22,fd78 <__alt_data_end+0xff00fd78>
    fe7c:	98800017 	ldw	r2,0(r19)
    fe80:	153fcf26 	beq	r2,r20,fdc0 <__alt_data_end+0xff00fdc0>
    fe84:	003fbc06 	br	fd78 <__alt_data_end+0xff00fd78>
    fe88:	183ee83a 	callr	r3
    fe8c:	003ff906 	br	fe74 <__alt_data_end+0xff00fe74>
    fe90:	a5c00115 	stw	r23,4(r20)
    fe94:	003feb06 	br	fe44 <__alt_data_end+0xff00fe44>
    fe98:	89000017 	ldw	r4,0(r17)
    fe9c:	183ee83a 	callr	r3
    fea0:	003ff406 	br	fe74 <__alt_data_end+0xff00fe74>
    fea4:	a0800017 	ldw	r2,0(r20)
    fea8:	a027883a 	mov	r19,r20
    feac:	1029883a 	mov	r20,r2
    feb0:	003fb606 	br	fd8c <__alt_data_end+0xff00fd8c>
    feb4:	0005883a 	mov	r2,zero
    feb8:	003ffb06 	br	fea8 <__alt_data_end+0xff00fea8>

0000febc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    febc:	20000226 	beq	r4,zero,fec8 <_exit+0xc>
    ALT_SIM_FAIL();
    fec0:	002af070 	cmpltui	zero,zero,43969
    fec4:	003fff06 	br	fec4 <__alt_data_end+0xff00fec4>
  } else {
    ALT_SIM_PASS();
    fec8:	002af0b0 	cmpltui	zero,zero,43970
    fecc:	003ffd06 	br	fec4 <__alt_data_end+0xff00fec4>
