
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010778 memsz 0x00010778 flags r-x
    LOAD off    0x00011798 vaddr 0x00010798 paddr 0x0001228c align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013d80 vaddr 0x00013d80 paddr 0x00013d80 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fe84  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000788  00010010  00010010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00010798  0001228c  00011798  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00013d80  00013d80  00013d80  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00013f10  00013f10  0001328c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001328c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  000132b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027319  00000000  00000000  000142e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a1cb  00000000  00000000  0003b601  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c667  00000000  00000000  000457cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021c8  00000000  00000000  00051e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003dad  00000000  00000000  00053ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c551  00000000  00000000  00057da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000742fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c18  00000000  00000000  00074350  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00079886  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00079889  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00079895  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00079896  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00079897  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007989b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007989f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000798a3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000798ac  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000798b5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000798be  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  000798c9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00079917  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007f3ef  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
00010010 l    d  .rodata	00000000 .rodata
00010798 l    d  .rwdata	00000000 .rwdata
00013d80 l    d  .bss	00000000 .bss
00013f10 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001c4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000104f6 l     O .rodata	00000010 zeroes.4404
00004a00 l     F .text	000000bc __sbprintf
00010506 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c10 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006740 l     F .text	00000008 __fp_unlock
00006754 l     F .text	0000019c __sinit.part.1
000068f0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010ba0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00010fe4 l     O .rwdata	00000020 lc_ctype_charset
00010fc4 l     O .rwdata	00000020 lc_message_charset
00011004 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010538 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000948c l     F .text	000000fc __sprint_r.part.0
0001066c l     O .rodata	00000010 blanks.4348
0001065c l     O .rodata	00000010 zeroes.4349
0000aa18 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e790 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001227c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000111e4 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ed0c l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000ed58 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f28c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013de4 g     O .bss	00000004 alt_instruction_exception_handler
00008b24 g     F .text	00000074 _mprec_log10
00008c10 g     F .text	0000008c __any_on
0000afb4 g     F .text	00000054 _isatty_r
00010544 g     O .rodata	00000028 __mprec_tinytens
0000e9dc g     F .text	00000060 alt_main
0000262c g     F .text	000000c0 _puts_r
00013e10 g     O .bss	00000100 alt_irq
0000b008 g     F .text	00000060 _lseek_r
0001049b g     O .rodata	00000009 gy_array
0001228c g       *ABS*	00000000 __flash_rwdata_start
0000d200 g     F .text	00000088 .hidden __eqdf2
00013f10 g       *ABS*	00000000 __alt_heap_start
000025f0 g     F .text	0000003c printf
0000b220 g     F .text	0000009c _wcrtomb_r
0000934c g     F .text	0000005c __sseek
00006a90 g     F .text	00000010 __sinit
0000b0c8 g     F .text	00000140 __swbuf_r
00007558 g     F .text	0000007c _setlocale_r
000068f8 g     F .text	00000068 __sfmoreglue
0000ea40 g     F .text	00000004 __malloc_unlock
0000090c g     F .text	00000014 LCD_Write_Command
00013d90 g     O .bss	00000004 sobel_width
00013dd0 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a1c g     F .text	0000015c memmove
00000920 g     F .text	00000014 LCD_Write_Data
00006a78 g     F .text	00000018 _cleanup
00007ca0 g     F .text	000000a8 _Balloc
0000d288 g     F .text	000000dc .hidden __gtdf2
0000fa5c g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004e0 g     F .text	00000024 cam_get_xsize
0000af58 g     F .text	0000005c _fstat_r
00013db4 g     O .bss	00000004 errno
000092c8 g     F .text	00000008 __seofread
00013dc8 g     O .bss	00000004 alt_argv
0001a244 g       *ABS*	00000000 _gp
0000eb7c g     F .text	00000004 usleep
000005a0 g     F .text	00000074 cam_set_image_pointer
0001103c g     O .rwdata	00000180 alt_fd_list
00001d6c g     F .text	00000010 vga_set_pointer
0000fa64 g     F .text	00000078 alt_find_dev
000078d4 g     F .text	00000148 memcpy
00006748 g     F .text	0000000c _cleanup_r
0000e4ec g     F .text	000000dc .hidden __floatsidf
0000f6b8 g     F .text	00000104 alt_io_redirect
0000d364 g     F .text	000000f4 .hidden __ltdf2
00010010 g       *ABS*	00000000 __DTOR_END__
000026ec g     F .text	00000014 puts
0000fc28 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00009200 g     F .text	00000074 __fpclassifyd
00008a80 g     F .text	000000a4 __ratio
0000a9fc g     F .text	0000001c __vfiprintf_internal
0000ef98 g     F .text	00000154 altera_avalon_jtag_uart_read
00001d8c g     F .text	00000014 malloc
000025c0 g     F .text	00000030 _printf_r
00000760 g     F .text	00000008 get_grayscale_picture
0000bfb0 g     F .text	00000064 .hidden __udivsi3
00010070 g     O .rodata	00000128 lens_roll_off_tbl
000001c8 g     F .text	00000318 init_camera
0000e810 g     F .text	00000084 isatty
00010594 g     O .rodata	000000c8 __mprec_tens
000075d4 g     F .text	0000000c __locale_charset
0000fbd8 g     F .text	00000050 alt_icache_flush
00013db0 g     O .bss	00000004 __malloc_top_pad
0001225c g     O .rwdata	00000004 __mb_cur_max
00007604 g     F .text	0000000c _localeconv_r
0000146c g     F .text	00000140 sobel_x
000080ac g     F .text	0000003c __i2b
00006f14 g     F .text	000004bc __sfvwrite_r
00000934 g     F .text	00000414 init_LCD
00002700 g     F .text	00000054 _sbrk_r
00012244 g     O .rwdata	00000004 pgy_array
00000528 g     F .text	00000078 cam_get_profiling
0000b068 g     F .text	00000060 _read_r
00013d94 g     O .bss	00000004 sobel_result
00012264 g     O .rwdata	00000004 alt_max_fd
0000ac4c g     F .text	000000f0 _fclose_r
00006710 g     F .text	00000030 fflush
00013dac g     O .bss	00000004 __malloc_max_sbrked_mem
00013d88 g     O .bss	00000004 grayscale_array
0000c06c g     F .text	000008ac .hidden __adddf3
00000504 g     F .text	00000024 cam_get_ysize
00008828 g     F .text	0000010c __b2d
0000b980 g     F .text	00000538 .hidden __umoddi3
0000e960 g     F .text	0000007c lseek
00000828 g     F .text	0000008c i2c_short_read
00012254 g     O .rwdata	00000004 _global_impure_ptr
00008c9c g     F .text	00000564 _realloc_r
00013f10 g       *ABS*	00000000 __bss_end
0000f650 g     F .text	00000068 alt_iic_isr_register
0000f968 g     F .text	000000f4 alt_tick
0000b408 g     F .text	00000578 .hidden __udivdi3
0000aeb4 g     F .text	00000024 _fputwc_r
0001056c g     O .rodata	00000028 __mprec_bigtens
00007e90 g     F .text	00000104 __s2b
0000e5c8 g     F .text	000000a8 .hidden __floatunsidf
00008568 g     F .text	00000060 __mcmp
00006ab0 g     F .text	00000018 __fp_lock_all
0000f638 g     F .text	00000018 alt_ic_irq_enabled
00013d80 g     O .bss	00000004 grayscape_height
0000f934 g     F .text	00000034 alt_alarm_stop
00013dd8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
000111bc g     O .rwdata	00000028 alt_dev_null
00000dd4 g     F .text	00000078 transfer_LCD_with_dma
00001a5c g     F .text	00000300 sobel_complete
0000f480 g     F .text	00000004 alt_dcache_flush_all
00007f94 g     F .text	00000068 __hi0bits
0000e46c g     F .text	00000080 .hidden __fixdfsi
0001228c g       *ABS*	00000000 __ram_rwdata_end
00012268 g     O .rwdata	00000008 alt_dev_list
0000eb80 g     F .text	000000c4 write
0000f380 g     F .text	00000008 alt_timestamp_freq
00010798 g       *ABS*	00000000 __ram_rodata_end
0000e798 g     F .text	00000078 fstat
0000d364 g     F .text	000000f4 .hidden __ledf2
000082e0 g     F .text	00000140 __pow5mult
000095a0 g     F .text	0000145c ___vfiprintf_internal_r
00013dc0 g     O .bss	00000004 __nlocale_changed
0000c014 g     F .text	00000058 .hidden __umodsi3
00001d5c g     F .text	00000008 GetSobel_rgb
00013f10 g       *ABS*	00000000 end
00001d64 g     F .text	00000008 GetSobelResult
00000638 g     F .text	00000020 take_picture_blocking
00000698 g     F .text	00000014 DIPSW_get_value
00001840 g     F .text	00000168 sobel_y_with_rgb
0000ee60 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000628 g     F .text	00000010 current_image_pointer
00010010 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f2c8 g     F .text	00000048 alt_avalon_timer_sc_init
0000e670 g     F .text	00000064 .hidden __clzsi2
0000f0ec g     F .text	000001a0 altera_avalon_jtag_uart_write
00006aa0 g     F .text	00000004 __sfp_lock_acquire
000077f0 g     F .text	000000e4 memchr
000027ec g     F .text	000021f8 ___vfprintf_internal_r
00006c04 g     F .text	00000310 _free_r
000075e0 g     F .text	00000010 __locale_mb_cur_max
00001728 g     F .text	00000118 sobel_y
00010198 g     O .rodata	00000140 noise_reduction_reg_settings_array
0000fe7c g     F .text	00000180 __call_exitprocs
00013dbc g     O .bss	00000004 __mlocale_changed
0001224c g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000003c _start
00013de0 g     O .bss	00000004 _alt_tick_rate
00008420 g     F .text	00000148 __lshift
00013ddc g     O .bss	00000004 _alt_nticks
0000ea44 g     F .text	000000c8 read
0000ec64 g     F .text	0000006c alt_sys_init
000015ac g     F .text	0000017c sobel_x_with_rgb
0000fd64 g     F .text	00000118 __register_exitproc
000080e8 g     F .text	000001f8 __multiply
0000eed8 g     F .text	0000004c altera_avalon_jtag_uart_close
00010798 g       *ABS*	00000000 __ram_rwdata_start
00010010 g       *ABS*	00000000 __ram_rodata_start
00013de8 g     O .bss	00000028 __malloc_current_mallinfo
00008934 g     F .text	0000014c __d2b
00013d98 g     O .bss	00000004 sobel_height
00000658 g     F .text	00000014 enable_continues_mode
0000ecd0 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
000012cc g     F .text	000000e4 init_sobel_arrays
0000fb88 g     F .text	00000050 alt_get_fd
0000f408 g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ab34 g     F .text	00000054 _close_r
0000fce8 g     F .text	0000007c memcmp
0000ecf0 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00013f10 g       *ABS*	00000000 __alt_stack_base
0000ed00 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00004abc g     F .text	00000154 __swsetup_r
0000c918 g     F .text	000008e8 .hidden __divdf3
00006960 g     F .text	00000118 __sfp
00008b98 g     F .text	00000078 __copybits
00010798 g     O .rwdata	00000408 __malloc_av_
00006aac g     F .text	00000004 __sinit_lock_release
0000d458 g     F .text	00000718 .hidden __muldf3
00009274 g     F .text	00000054 __sread
0000fadc g     F .text	000000ac alt_find_file
0000f484 g     F .text	0000006c alt_dev_llist_insert
0000ea3c g     F .text	00000004 __malloc_lock
0000eb30 g     F .text	0000004c sbrk
000066b4 g     F .text	0000005c _fflush_r
0000ab88 g     F .text	000000c4 _calloc_r
00013d80 g       *ABS*	00000000 __bss_start
00007b78 g     F .text	00000128 memset
00000e4c g     F .text	00000480 main
00013dc4 g     O .bss	00000004 alt_envp
00013da8 g     O .bss	00000004 __malloc_max_total_mem
00000750 g     F .text	00000008 get_grayscale_width
0000ece0 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b208 g     F .text	00000018 __swbuf
00013d9c g     O .bss	00000004 sobel_x_result
000093a8 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ad3c g     F .text	00000014 fclose
0000f310 g     F .text	0000003c alt_timestamp_start
00004e10 g     F .text	00001688 _dtoa_r
00001db4 g     F .text	0000080c _malloc_r
0000b37c g     F .text	00000030 __ascii_wctomb
00012278 g     O .rwdata	00000004 alt_errno
000073d0 g     F .text	000000c4 _fwalk
0000beb8 g     F .text	00000084 .hidden __divsi3
00006ae0 g     F .text	00000124 _malloc_trim_r
00010010 g       *ABS*	00000000 __CTOR_END__
00013d84 g     O .bss	00000004 grayscale_width
000093b0 g     F .text	000000dc strcmp
00000d48 g     F .text	0000008c transfer_LCD_no_dma
00010010 g       *ABS*	00000000 __flash_rodata_start
00010010 g       *ABS*	00000000 __DTOR_LIST__
0000d200 g     F .text	00000088 .hidden __nedf2
000102d8 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ec44 g     F .text	00000020 alt_irq_init
0000eb0c g     F .text	00000024 alt_release_fd
00000780 g     F .text	000000a8 i2c_auto_detect
0001067c g     O .rodata	00000100 .hidden __clz_tab
00000614 g     F .text	00000014 current_image_valid
00013db8 g     O .bss	00000004 _PathLocale
00000768 g     F .text	00000018 i2c_busy_wait
0000fc9c g     F .text	00000014 atexit
0000aad4 g     F .text	00000060 _write_r
00007610 g     F .text	00000018 setlocale
00012258 g     O .rwdata	00000004 _impure_ptr
00013dcc g     O .bss	00000004 alt_argc
00006498 g     F .text	0000021c __sflush_r
00013dd4 g     O .bss	00000004 altera_avalon_timer_ts_base
0000f554 g     F .text	00000064 _do_dtors
000075fc g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000087c4 g     F .text	00000064 __ulp
00006ac8 g     F .text	00000018 __fp_unlock_all
00012270 g     O .rwdata	00000008 alt_fs_list
00013da0 g     O .bss	00000004 sobel_y_result
000008b4 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013d8c g     O .bss	00000002 LCD_height
00007628 g     F .text	0000000c localeconv
0000f34c g     F .text	00000034 alt_timestamp
00001d7c g     F .text	00000010 vga_set_swap
0000f5c4 g     F .text	00000004 alt_ic_isr_register
000019a8 g     F .text	000000b4 sobel_threshold
0001228c g       *ABS*	00000000 _edata
00012248 g     O .rwdata	00000004 pgx_array
00013f10 g       *ABS*	00000000 _end
0000ad50 g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000ef24 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
000104a4 g     O .rodata	00000009 gx_array
0000f600 g     F .text	00000038 alt_ic_irq_disable
000092d0 g     F .text	0000007c __swrite
00012250 g     O .rwdata	00000004 __malloc_trim_threshold
00013d8e g     O .bss	00000002 LCD_width
000006ac g     F .text	000000a4 conv_grayscale
000075f0 g     F .text	0000000c __locale_msgcharset
0000fcb0 g     F .text	00000038 exit
00007494 g     F .text	000000c4 _fwalk_reent
000085c8 g     F .text	000001fc __mdiff
0000bf3c g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006aa4 g     F .text	00000004 __sfp_lock_release
00000758 g     F .text	00000008 get_grayscale_height
0000fffc g     F .text	00000014 _exit
000013b0 g     F .text	000000bc sobel_mac
0000f388 g     F .text	00000080 alt_alarm_start
00007634 g     F .text	000001bc __smakebuf_r
00013da4 g     O .bss	00000004 sobel_rgb565
00002754 g     F .text	00000098 strlen
0000f7bc g     F .text	00000178 open
0000d288 g     F .text	000000dc .hidden __gedf2
00012260 g     O .rwdata	00000004 __wctomb
00009588 g     F .text	00000018 __sprint_r
0000f5b8 g     F .text	0000000c alt_icache_flush_all
00012280 g     O .rwdata	00000004 alt_priority_mask
0000f5c8 g     F .text	00000038 alt_ic_irq_enable
000049e4 g     F .text	0000001c __vfprintf_internal
0000b3ac g     F .text	0000005c _wctomb_r
0000db70 g     F .text	000008fc .hidden __subdf3
00007ffc g     F .text	000000b0 __lo0bits
00012284 g     O .rwdata	00000008 alt_alarm_list
0000f4f0 g     F .text	00000064 _do_ctors
0000b2bc g     F .text	000000c0 wcrtomb
0000e6d4 g     F .text	000000bc close
0000e894 g     F .text	000000cc alt_load
0000aed8 g     F .text	00000080 fputwc
00001da0 g     F .text	00000014 free
00006aa8 g     F .text	00000004 __sinit_lock_acquire
00007d70 g     F .text	00000120 __multadd
00007d48 g     F .text	00000028 _Bfree
0000066c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	840f8404 	addi	r16,r16,15888
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a6e817 	ldw	r2,-25696(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     18c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     190:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     194:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     198:	d6a89114 	ori	gp,gp,41540
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     19c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a0:	108f6014 	ori	r2,r2,15744

    movhi r3, %hi(__bss_end)
     1a4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1a8:	18cfc414 	ori	r3,r3,16144

    beq r2, r3, 1f
     1ac:	10c00326 	beq	r2,r3,1bc <_start+0x30>

0:
    stw zero, (r2)
     1b0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1b4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1b8:	10fffd36 	bltu	r2,r3,1b0 <__alt_data_end+0xff0001b0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1bc:	000e8940 	call	e894 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c0:	000e9dc0 	call	e9dc <alt_main>

000001c4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1c4:	003fff06 	br	1c4 <__alt_data_end+0xff0001c4>

000001c8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1c8:	00804034 	movhi	r2,256
     1cc:	10842744 	addi	r2,r2,4253
     1d0:	00c00084 	movi	r3,2
     1d4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1d8:	00804034 	movhi	r2,256
     1dc:	10841304 	addi	r2,r2,4172
     1e0:	00c00044 	movi	r3,1
     1e4:	10c00025 	stbio	r3,0(r2)
     1e8:	008003f4 	movhi	r2,15
     1ec:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     1f0:	0001883a 	nop
     1f4:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     1f8:	103ffd1e 	bne	r2,zero,1f0 <__alt_data_end+0xff0001f0>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     1fc:	00804034 	movhi	r2,256
     200:	10841304 	addi	r2,r2,4172
     204:	10000025 	stbio	zero,0(r2)
     208:	008003f4 	movhi	r2,15
     20c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     210:	0001883a 	nop
     214:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     218:	103ffd1e 	bne	r2,zero,210 <__alt_data_end+0xff000210>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     21c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     220:	01800044 	movi	r6,1
     224:	014ce184 	movi	r5,13190
     228:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	dfc00315 	stw	ra,12(sp)
     230:	dc800215 	stw	r18,8(sp)
     234:	dc400115 	stw	r17,4(sp)
     238:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     23c:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     240:	000d883a 	mov	r6,zero
     244:	014ce184 	movi	r5,13190
     248:	01001e04 	movi	r4,120
     24c:	00008b40 	call	8b4 <i2c_short_write>
     250:	008003f4 	movhi	r2,15
     254:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     258:	0001883a 	nop
     25c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     260:	103ffd1e 	bne	r2,zero,258 <__alt_data_end+0xff000258>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     264:	01803104 	movi	r6,196
     268:	014c0684 	movi	r5,12314
     26c:	01001e04 	movi	r4,120
     270:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     274:	01800204 	movi	r6,8
     278:	014c8084 	movi	r5,12802
     27c:	01001e04 	movi	r4,120
     280:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     284:	0180c744 	movi	r6,797
     288:	014cfd04 	movi	r5,13300
     28c:	01001e04 	movi	r4,120
     290:	00008b40 	call	8b4 <i2c_short_write>
     294:	008000b4 	movhi	r2,2
     298:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     29c:	0001883a 	nop
     2a0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2a4:	103ffd1e 	bne	r2,zero,29c <__alt_data_end+0xff00029c>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2a8:	01a3c254 	movui	r6,36617
     2ac:	014d0784 	movi	r5,13342
     2b0:	01001e04 	movi	r4,120
     2b4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2b8:	01805404 	movi	r6,336
     2bc:	014d0704 	movi	r5,13340
     2c0:	01001e04 	movi	r4,120
     2c4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2c8:	01a3c254 	movui	r6,36617
     2cc:	014d0784 	movi	r5,13342
     2d0:	01001e04 	movi	r4,120
     2d4:	00008b40 	call	8b4 <i2c_short_write>
     2d8:	008000b4 	movhi	r2,2
     2dc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2e0:	0001883a 	nop
     2e4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2e8:	103ffd1e 	bne	r2,zero,2e0 <__alt_data_end+0xff0002e0>
     2ec:	04000074 	movhi	r16,1
     2f0:	8400b604 	addi	r16,r16,728
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     2f4:	01a3c214 	movui	r6,36616
     2f8:	014d0784 	movi	r5,13342
     2fc:	01001e04 	movi	r4,120
     300:	00008b40 	call	8b4 <i2c_short_write>
     304:	84400084 	addi	r17,r16,2
     308:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     30c:	8980000b 	ldhu	r6,0(r17)
     310:	8140000b 	ldhu	r5,0(r16)
     314:	01001e04 	movi	r4,120
     318:	84000104 	addi	r16,r16,4
     31c:	00008b40 	call	8b4 <i2c_short_write>
     320:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     324:	84bff91e 	bne	r16,r18,30c <__alt_data_end+0xff00030c>
     328:	04000074 	movhi	r16,1
     32c:	84006604 	addi	r16,r16,408
     330:	84400084 	addi	r17,r16,2
     334:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     338:	8980000b 	ldhu	r6,0(r17)
     33c:	8140000b 	ldhu	r5,0(r16)
     340:	01001e04 	movi	r4,120
     344:	84000104 	addi	r16,r16,4
     348:	00008b40 	call	8b4 <i2c_short_write>
     34c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     350:	943ff91e 	bne	r18,r16,338 <__alt_data_end+0xff000338>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     354:	018164c4 	movi	r6,1427
     358:	014d6904 	movi	r5,13732
     35c:	01001e04 	movi	r4,120
     360:	00008b40 	call	8b4 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     364:	0189e644 	movi	r6,10137
     368:	014ce304 	movi	r5,13196
     36c:	01001e04 	movi	r4,120
     370:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     374:	01991004 	movi	r6,25664
     378:	014ce404 	movi	r5,13200
     37c:	01001e04 	movi	r4,120
     380:	00008b40 	call	8b4 <i2c_short_write>
     384:	008000b4 	movhi	r2,2
     388:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     38c:	0001883a 	nop
     390:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     394:	103ffd1e 	bne	r2,zero,38c <__alt_data_end+0xff00038c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     398:	0189e6c4 	movi	r6,10139
     39c:	014ce304 	movi	r5,13196
     3a0:	01001e04 	movi	r4,120
     3a4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3a8:	01991004 	movi	r6,25664
     3ac:	014ce404 	movi	r5,13200
     3b0:	01001e04 	movi	r4,120
     3b4:	00008b40 	call	8b4 <i2c_short_write>
     3b8:	008000b4 	movhi	r2,2
     3bc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3c0:	0001883a 	nop
     3c4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3c8:	103ffd1e 	bne	r2,zero,3c0 <__alt_data_end+0xff0003c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3cc:	01a840d4 	movui	r6,41219
     3d0:	014ce304 	movi	r5,13196
     3d4:	01001e04 	movi	r4,120
     3d8:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3dc:	01800144 	movi	r6,5
     3e0:	014ce404 	movi	r5,13200
     3e4:	01001e04 	movi	r4,120
     3e8:	00008b40 	call	8b4 <i2c_short_write>
     3ec:	008000b4 	movhi	r2,2
     3f0:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3f4:	0001883a 	nop
     3f8:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     3fc:	103ffd1e 	bne	r2,zero,3f4 <__alt_data_end+0xff0003f4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     400:	01a840d4 	movui	r6,41219
     404:	014ce304 	movi	r5,13196
     408:	01001e04 	movi	r4,120
     40c:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     410:	01800184 	movi	r6,6
     414:	014ce404 	movi	r5,13200
     418:	01001e04 	movi	r4,120
     41c:	00008b40 	call	8b4 <i2c_short_write>
     420:	008000b4 	movhi	r2,2
     424:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     428:	0001883a 	nop
     42c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     430:	103ffd1e 	bne	r2,zero,428 <__alt_data_end+0xff000428>
     434:	04000074 	movhi	r16,1
     438:	84001c04 	addi	r16,r16,112
     43c:	84400084 	addi	r17,r16,2
     440:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     444:	8980000b 	ldhu	r6,0(r17)
     448:	8140000b 	ldhu	r5,0(r16)
     44c:	01001e04 	movi	r4,120
     450:	84000104 	addi	r16,r16,4
     454:	00008b40 	call	8b4 <i2c_short_write>
     458:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     45c:	943ff91e 	bne	r18,r16,444 <__alt_data_end+0xff000444>
     460:	008003f4 	movhi	r2,15
     464:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     468:	0001883a 	nop
     46c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     470:	103ffd1e 	bne	r2,zero,468 <__alt_data_end+0xff000468>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     474:	01800804 	movi	r6,32
     478:	014ccb84 	movi	r5,13102
     47c:	01001e04 	movi	r4,120
     480:	00008b40 	call	8b4 <i2c_short_write>
     484:	008003f4 	movhi	r2,15
     488:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     48c:	0001883a 	nop
     490:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     494:	103ffd1e 	bne	r2,zero,48c <__alt_data_end+0xff00048c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     498:	01800884 	movi	r6,34
     49c:	014d0104 	movi	r5,13316
     4a0:	01001e04 	movi	r4,120
     4a4:	00008b40 	call	8b4 <i2c_short_write>
     4a8:	008003f4 	movhi	r2,15
     4ac:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4b0:	0001883a 	nop
     4b4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4b8:	103ffd1e 	bne	r2,zero,4b0 <__alt_data_end+0xff0004b0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4bc:	018009c4 	movi	r6,39
     4c0:	014c1004 	movi	r5,12352
     4c4:	01001e04 	movi	r4,120
}
     4c8:	dfc00317 	ldw	ra,12(sp)
     4cc:	dc800217 	ldw	r18,8(sp)
     4d0:	dc400117 	ldw	r17,4(sp)
     4d4:	dc000017 	ldw	r16,0(sp)
     4d8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4dc:	00008b41 	jmpi	8b4 <i2c_short_write>

000004e0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4e0:	00c04034 	movhi	r3,256
     4e4:	18c41304 	addi	r3,r3,4172
     4e8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4ec:	1080010c 	andi	r2,r2,4
     4f0:	103ffd26 	beq	r2,zero,4e8 <__alt_data_end+0xff0004e8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     4f4:	00804034 	movhi	r2,256
     4f8:	10841004 	addi	r2,r2,4160
}
     4fc:	1080002b 	ldhuio	r2,0(r2)
     500:	f800283a 	ret

00000504 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     504:	00c04034 	movhi	r3,256
     508:	18c41304 	addi	r3,r3,4172
     50c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     510:	1080010c 	andi	r2,r2,4
     514:	103ffd26 	beq	r2,zero,50c <__alt_data_end+0xff00050c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     518:	00804034 	movhi	r2,256
     51c:	10841104 	addi	r2,r2,4164
}
     520:	1080002b 	ldhuio	r2,0(r2)
     524:	f800283a 	ret

00000528 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     528:	00c04034 	movhi	r3,256
     52c:	18c41304 	addi	r3,r3,4172
     530:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     534:	1080010c 	andi	r2,r2,4
     538:	103ffd26 	beq	r2,zero,530 <__alt_data_end+0xff000530>
	printf("Nr. of bytes each line    : %d\n",
     53c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     540:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     544:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     548:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     54c:	1140002b 	ldhuio	r5,0(r2)
     550:	01000074 	movhi	r4,1
     554:	21000404 	addi	r4,r4,16
     558:	297fffcc 	andi	r5,r5,65535
     55c:	00025f00 	call	25f0 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     560:	00804034 	movhi	r2,256
     564:	10841104 	addi	r2,r2,4164
     568:	1140002b 	ldhuio	r5,0(r2)
     56c:	01000074 	movhi	r4,1
     570:	21000c04 	addi	r4,r4,48
     574:	297fffcc 	andi	r5,r5,65535
     578:	00025f00 	call	25f0 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     57c:	00804034 	movhi	r2,256
     580:	10841204 	addi	r2,r2,4168
     584:	1140002b 	ldhuio	r5,0(r2)
     588:	01000074 	movhi	r4,1
     58c:	21001404 	addi	r4,r4,80
     590:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     594:	dfc00017 	ldw	ra,0(sp)
     598:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     59c:	00025f01 	jmpi	25f0 <printf>

000005a0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5a0:	21003fcc 	andi	r4,r4,255
     5a4:	2100201c 	xori	r4,r4,128
     5a8:	213fe004 	addi	r4,r4,-128
     5ac:	00800044 	movi	r2,1
     5b0:	20801226 	beq	r4,r2,5fc <cam_set_image_pointer+0x5c>
     5b4:	11000c0e 	bge	r2,r4,5e8 <cam_set_image_pointer+0x48>
     5b8:	00800084 	movi	r2,2
     5bc:	20800626 	beq	r4,r2,5d8 <cam_set_image_pointer+0x38>
     5c0:	008000c4 	movi	r2,3
     5c4:	2080111e 	bne	r4,r2,60c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5c8:	00804034 	movhi	r2,256
     5cc:	10841704 	addi	r2,r2,4188
     5d0:	11400035 	stwio	r5,0(r2)
     5d4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841604 	addi	r2,r2,4184
     5e0:	11400035 	stwio	r5,0(r2)
                break;
     5e4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5e8:	2000091e 	bne	r4,zero,610 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5ec:	00804034 	movhi	r2,256
     5f0:	10841404 	addi	r2,r2,4176
     5f4:	11400035 	stwio	r5,0(r2)
	            break;
     5f8:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841504 	addi	r2,r2,4180
     604:	11400035 	stwio	r5,0(r2)
                break;
     608:	f800283a 	ret
     60c:	f800283a 	ret
     610:	f800283a 	ret

00000614 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     614:	00804034 	movhi	r2,256
     618:	10841304 	addi	r2,r2,4172
     61c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     620:	1080800c 	andi	r2,r2,512
     624:	f800283a 	ret

00000628 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     628:	00804034 	movhi	r2,256
     62c:	10841404 	addi	r2,r2,4176
}
     630:	10800037 	ldwio	r2,0(r2)
     634:	f800283a 	ret

00000638 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     638:	00c04034 	movhi	r3,256
     63c:	18c41304 	addi	r3,r3,4172
     640:	00800204 	movi	r2,8
     644:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     648:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     64c:	1080020c 	andi	r2,r2,8
     650:	103ffd1e 	bne	r2,zero,648 <__alt_data_end+0xff000648>
}
     654:	f800283a 	ret

00000658 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     658:	00804034 	movhi	r2,256
     65c:	10841304 	addi	r2,r2,4172
     660:	00c00404 	movi	r3,16
     664:	10c0002d 	sthio	r3,0(r2)
     668:	f800283a 	ret

0000066c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     66c:	00c04034 	movhi	r3,256
     670:	18c41304 	addi	r3,r3,4172
     674:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     678:	1080200c 	andi	r2,r2,128
     67c:	1000021e 	bne	r2,zero,688 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     680:	0005883a 	mov	r2,zero
}
     684:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     688:	00804004 	movi	r2,256
     68c:	1880002d 	sthio	r2,0(r3)
		return 1;
     690:	00800044 	movi	r2,1
     694:	f800283a 	ret

00000698 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     698:	00804034 	movhi	r2,256
     69c:	10842804 	addi	r2,r2,4256
     6a0:	10800023 	ldbuio	r2,0(r2)
}
     6a4:	0084303a 	nor	r2,zero,r2
     6a8:	f800283a 	ret

000006ac <conv_grayscale>:
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6ac:	d0a6d117 	ldw	r2,-25788(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6b0:	defffd04 	addi	sp,sp,-12
     6b4:	dc400115 	stw	r17,4(sp)
     6b8:	dc000015 	stw	r16,0(sp)
     6bc:	dfc00215 	stw	ra,8(sp)
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
     6c0:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     6c4:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6c8:	2021883a 	mov	r16,r4
  int k,gray;
  int kmax = width*height;
     6cc:	29a3383a 	mul	r17,r5,r6
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6d0:	10000226 	beq	r2,zero,6dc <conv_grayscale+0x30>
    free(grayscale_array);
     6d4:	1009883a 	mov	r4,r2
     6d8:	0001da00 	call	1da0 <free>
  grayscale_array = (unsigned char *) malloc(kmax);
     6dc:	8809883a 	mov	r4,r17
     6e0:	0001d8c0 	call	1d8c <malloc>
     6e4:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k<kmax; k++)
     6e8:	0440140e 	bge	zero,r17,73c <conv_grayscale+0x90>
     6ec:	8009883a 	mov	r4,r16
     6f0:	0013883a 	mov	r9,zero
     6f4:	00000106 	br	6fc <conv_grayscale+0x50>
     6f8:	d0a6d117 	ldw	r2,-25788(gp)
  {
	  rgb = pixels[k];
     6fc:	2200000b 	ldhu	r8,0(r4)
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
     700:	1245883a 	add	r2,r2,r9
     704:	40ffffcc 	andi	r3,r8,65535
     708:	180ed17a 	srli	r7,r3,5
     70c:	1806d2fa 	srli	r3,r3,11
     710:	420007cc 	andi	r8,r8,31
     714:	39c00fcc 	andi	r7,r7,63
     718:	39c00a24 	muli	r7,r7,40
     71c:	18c7883a 	add	r3,r3,r3
     720:	380fd13a 	srai	r7,r7,4
     724:	38c7883a 	add	r3,r7,r3
     728:	1a07883a 	add	r3,r3,r8
     72c:	10c00025 	stbio	r3,0(r2)
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
  for(k = 0; k<kmax; k++)
     730:	4a400044 	addi	r9,r9,1
     734:	21000084 	addi	r4,r4,2
     738:	8a7fef1e 	bne	r17,r9,6f8 <__alt_data_end+0xff0006f8>
  {
	  rgb = pixels[k];
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
  }
}
     73c:	dfc00217 	ldw	ra,8(sp)
     740:	dc400117 	ldw	r17,4(sp)
     744:	dc000017 	ldw	r16,0(sp)
     748:	dec00304 	addi	sp,sp,12
     74c:	f800283a 	ret

00000750 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     750:	d0a6d017 	ldw	r2,-25792(gp)
     754:	f800283a 	ret

00000758 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     758:	d0a6cf17 	ldw	r2,-25796(gp)
     75c:	f800283a 	ret

00000760 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     760:	d0a6d117 	ldw	r2,-25788(gp)
     764:	f800283a 	ret

00000768 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     768:	00c04034 	movhi	r3,256
     76c:	18c42704 	addi	r3,r3,4252
     770:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     774:	108000cc 	andi	r2,r2,3
     778:	103ffd1e 	bne	r2,zero,770 <__alt_data_end+0xff000770>
}
     77c:	f800283a 	ret

00000780 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     780:	01004034 	movhi	r4,256
     784:	21042704 	addi	r4,r4,4252
     788:	00c04034 	movhi	r3,256
     78c:	18c42704 	addi	r3,r3,4252
     790:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     794:	108000cc 	andi	r2,r2,3
     798:	103ffb1e 	bne	r2,zero,788 <__alt_data_end+0xff000788>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     79c:	00800104 	movi	r2,4
     7a0:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     7a4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7a8:	108000cc 	andi	r2,r2,3
     7ac:	103ffd1e 	bne	r2,zero,7a4 <__alt_data_end+0xff0007a4>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7b0:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7b4:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7b8:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7bc:	dfc00315 	stw	ra,12(sp)
     7c0:	dc800215 	stw	r18,8(sp)
     7c4:	dc400115 	stw	r17,4(sp)
     7c8:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7cc:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     7d0:	01000074 	movhi	r4,1
     7d4:	2100fc04 	addi	r4,r4,1008
     7d8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     7dc:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     7e0:	00025f00 	call	25f0 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     7e4:	04800a0e 	bge	zero,r18,810 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     7e8:	04404034 	movhi	r17,256
     7ec:	8c442404 	addi	r17,r17,4240
     7f0:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     7f4:	89800037 	ldwio	r6,0(r17)
     7f8:	01000074 	movhi	r4,1
     7fc:	800b883a 	mov	r5,r16
     800:	21010504 	addi	r4,r4,1044
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     804:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     808:	00025f00 	call	25f0 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     80c:	943ff81e 	bne	r18,r16,7f0 <__alt_data_end+0xff0007f0>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     810:	dfc00317 	ldw	ra,12(sp)
     814:	dc800217 	ldw	r18,8(sp)
     818:	dc400117 	ldw	r17,4(sp)
     81c:	dc000017 	ldw	r16,0(sp)
     820:	dec00404 	addi	sp,sp,16
     824:	f800283a 	ret

00000828 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     828:	01804034 	movhi	r6,256
     82c:	31842704 	addi	r6,r6,4252
     830:	00c04034 	movhi	r3,256
     834:	18c42704 	addi	r3,r3,4252
     838:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     83c:	108000cc 	andi	r2,r2,3
     840:	103ffb1e 	bne	r2,zero,830 <__alt_data_end+0xff000830>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     844:	00804034 	movhi	r2,256
     848:	21003fcc 	andi	r4,r4,255
     84c:	10842404 	addi	r2,r2,4240
     850:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     854:	00804034 	movhi	r2,256
     858:	10842504 	addi	r2,r2,4244
     85c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     860:	008010c4 	movi	r2,67
     864:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     868:	180b883a 	mov	r5,r3
     86c:	00c04034 	movhi	r3,256
     870:	18c42704 	addi	r3,r3,4252
     874:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffb1e 	bne	r2,zero,86c <__alt_data_end+0xff00086c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     880:	00804034 	movhi	r2,256
     884:	21000044 	addi	r4,r4,1
     888:	10842404 	addi	r2,r2,4240
     88c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     890:	00800884 	movi	r2,34
     894:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     898:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     89c:	108000cc 	andi	r2,r2,3
     8a0:	103ffd1e 	bne	r2,zero,898 <__alt_data_end+0xff000898>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     8a4:	00804034 	movhi	r2,256
     8a8:	10842604 	addi	r2,r2,4248
}
     8ac:	10800037 	ldwio	r2,0(r2)
     8b0:	f800283a 	ret

000008b4 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8b4:	01c04034 	movhi	r7,256
     8b8:	39c42704 	addi	r7,r7,4252
     8bc:	00c04034 	movhi	r3,256
     8c0:	18c42704 	addi	r3,r3,4252
     8c4:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8c8:	108000cc 	andi	r2,r2,3
     8cc:	103ffb1e 	bne	r2,zero,8bc <__alt_data_end+0xff0008bc>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8d0:	00804034 	movhi	r2,256
     8d4:	10842404 	addi	r2,r2,4240
     8d8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     8dc:	00804034 	movhi	r2,256
     8e0:	10842504 	addi	r2,r2,4244
     8e4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     8e8:	00804034 	movhi	r2,256
     8ec:	10842604 	addi	r2,r2,4248
     8f0:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     8f4:	00801084 	movi	r2,66
     8f8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8fc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     900:	108000cc 	andi	r2,r2,3
     904:	103ffd1e 	bne	r2,zero,8fc <__alt_data_end+0xff0008fc>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     908:	f800283a 	ret

0000090c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     90c:	00804034 	movhi	r2,256
     910:	10841804 	addi	r2,r2,4192
     914:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     918:	01000284 	movi	r4,10
     91c:	000eb7c1 	jmpi	eb7c <usleep>

00000920 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     920:	00804034 	movhi	r2,256
     924:	10841904 	addi	r2,r2,4196
     928:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     92c:	01000284 	movi	r4,10
     930:	000eb7c1 	jmpi	eb7c <usleep>

00000934 <init_LCD>:
}


void init_LCD() {
     934:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     938:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     93c:	dd400515 	stw	r21,20(sp)
     940:	dfc00815 	stw	ra,32(sp)
     944:	ddc00715 	stw	r23,28(sp)
     948:	dd800615 	stw	r22,24(sp)
     94c:	dd000415 	stw	r20,16(sp)
     950:	dcc00315 	stw	r19,12(sp)
     954:	dc800215 	stw	r18,8(sp)
     958:	dc400115 	stw	r17,4(sp)
     95c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     960:	05400084 	movi	r21,2
     964:	10841a04 	addi	r2,r2,4200
     968:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     96c:	04804034 	movhi	r18,256
     970:	94841804 	addi	r18,r18,4192
     974:	00800a04 	movi	r2,40
     978:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     97c:	04000284 	movi	r16,10
     980:	8009883a 	mov	r4,r16
     984:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     988:	05c00444 	movi	r23,17
     98c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     990:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     994:	04404034 	movhi	r17,256
     998:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     99c:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9a0:	0027883a 	mov	r19,zero
     9a4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9a8:	8009883a 	mov	r4,r16
     9ac:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9b0:	008032c4 	movi	r2,203
     9b4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     9b8:	8009883a 	mov	r4,r16
     9bc:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9c0:	00800e44 	movi	r2,57
     9c4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9c8:	8009883a 	mov	r4,r16
     9cc:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d0:	00800b04 	movi	r2,44
     9d4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9d8:	8009883a 	mov	r4,r16
     9dc:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9e4:	8009883a 	mov	r4,r16
     9e8:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9ec:	00800d04 	movi	r2,52
     9f0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9f4:	8009883a 	mov	r4,r16
     9f8:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9fc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     a00:	8009883a 	mov	r4,r16
     a04:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a08:	008033c4 	movi	r2,207
     a0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a10:	8009883a 	mov	r4,r16
     a14:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a18:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a1c:	8009883a 	mov	r4,r16
     a20:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a24:	05802044 	movi	r22,129
     a28:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     a2c:	8009883a 	mov	r4,r16
     a30:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a34:	00800c04 	movi	r2,48
     a38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a3c:	8009883a 	mov	r4,r16
     a40:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a44:	00803a04 	movi	r2,232
     a48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a4c:	8009883a 	mov	r4,r16
     a50:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a54:	00802144 	movi	r2,133
     a58:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a5c:	8009883a 	mov	r4,r16
     a60:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	05000044 	movi	r20,1
     a68:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     a6c:	8009883a 	mov	r4,r16
     a70:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a74:	00801e44 	movi	r2,121
     a78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a7c:	8009883a 	mov	r4,r16
     a80:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a84:	00803a84 	movi	r2,234
     a88:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a8c:	8009883a 	mov	r4,r16
     a90:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a94:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a98:	8009883a 	mov	r4,r16
     a9c:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa4:	8009883a 	mov	r4,r16
     aa8:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aac:	00801904 	movi	r2,100
     ab0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	008000c4 	movi	r2,3
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	00800484 	movi	r2,18
     ad0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
     ad8:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     ae0:	8009883a 	mov	r4,r16
     ae4:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ae8:	00803dc4 	movi	r2,247
     aec:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     af0:	8009883a 	mov	r4,r16
     af4:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af8:	00800804 	movi	r2,32
     afc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
     b04:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b08:	00803004 	movi	r2,192
     b0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b10:	8009883a 	mov	r4,r16
     b14:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b18:	05800984 	movi	r22,38
     b1c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	00800104 	movi	r2,4
     b2c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b38:	00803044 	movi	r2,193
     b3c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b48:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b54:	00803144 	movi	r2,197
     b58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b64:	00800d44 	movi	r2,53
     b68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00800f84 	movi	r2,62
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b84:	008031c4 	movi	r2,199
     b88:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	00802f84 	movi	r2,190
     b98:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ba4:	00802c44 	movi	r2,177
     ba8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc0:	00800404 	movi	r2,16
     bc4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd0:	00800e84 	movi	r2,58
     bd4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be0:	00801544 	movi	r2,85
     be4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf0:	00802d84 	movi	r2,182
     bf4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c00:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     c04:	8009883a 	mov	r4,r16
     c08:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c0c:	00802884 	movi	r2,162
     c10:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c1c:	00803c84 	movi	r2,242
     c20:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     c30:	8009883a 	mov	r4,r16
     c34:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c38:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     c3c:	8009883a 	mov	r4,r16
     c40:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c44:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     c48:	8009883a 	mov	r4,r16
     c4c:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c50:	00800d84 	movi	r2,54
     c54:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c58:	8009883a 	mov	r4,r16
     c5c:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c60:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c6c:	00800a84 	movi	r2,42
     c70:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c7c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c8c:	8009883a 	mov	r4,r16
     c90:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c94:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c98:	8009883a 	mov	r4,r16
     c9c:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca0:	00803bc4 	movi	r2,239
     ca4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000eb7c0 	call	eb7c <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cb0:	00800ac4 	movi	r2,43
     cb4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000eb7c0 	call	eb7c <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cc4:	8009883a 	mov	r4,r16
     cc8:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ccc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd0:	8009883a 	mov	r4,r16
     cd4:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000eb7c0 	call	eb7c <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	00800fc4 	movi	r2,63
     ce8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000eb7c0 	call	eb7c <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     cf4:	00c04034 	movhi	r3,256
     cf8:	00803c04 	movi	r2,240
     cfc:	18c41d04 	addi	r3,r3,4212
     d00:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     d04:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     d08:	00805004 	movi	r2,320
     d0c:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d10:	00800a44 	movi	r2,41
     d14:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     d1c:	dfc00817 	ldw	ra,32(sp)
     d20:	ddc00717 	ldw	r23,28(sp)
     d24:	dd800617 	ldw	r22,24(sp)
     d28:	dd400517 	ldw	r21,20(sp)
     d2c:	dd000417 	ldw	r20,16(sp)
     d30:	dcc00317 	ldw	r19,12(sp)
     d34:	dc800217 	ldw	r18,8(sp)
     d38:	dc400117 	ldw	r17,4(sp)
     d3c:	dc000017 	ldw	r16,0(sp)
     d40:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d44:	000eb7c1 	jmpi	eb7c <usleep>

00000d48 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d48:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d4c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d50:	dc000015 	stw	r16,0(sp)
     d54:	dfc00415 	stw	ra,16(sp)
     d58:	dcc00315 	stw	r19,12(sp)
     d5c:	dc800215 	stw	r18,8(sp)
     d60:	dc400115 	stw	r17,4(sp)
     d64:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d68:	10841e04 	addi	r2,r2,4216
     d6c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d70:	00804034 	movhi	r2,256
     d74:	10841804 	addi	r2,r2,4192
     d78:	00c00b04 	movi	r3,44
     d7c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d80:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d84:	01000284 	movi	r4,10
     d88:	000eb7c0 	call	eb7c <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d8c:	90000a26 	beq	r18,zero,db8 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d90:	04c04034 	movhi	r19,256
     d94:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d98:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8080000b 	ldhu	r2,0(r16)
     da0:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     da4:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     da8:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     dac:	000eb7c0 	call	eb7c <usleep>
     db0:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     db4:	8cbff91e 	bne	r17,r18,d9c <__alt_data_end+0xff000d9c>
		LCD_Write_Data(data_array[pixels]);
}
     db8:	dfc00417 	ldw	ra,16(sp)
     dbc:	dcc00317 	ldw	r19,12(sp)
     dc0:	dc800217 	ldw	r18,8(sp)
     dc4:	dc400117 	ldw	r17,4(sp)
     dc8:	dc000017 	ldw	r16,0(sp)
     dcc:	dec00504 	addi	sp,sp,20
     dd0:	f800283a 	ret

00000dd4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     dd4:	d0a6d20b 	ldhu	r2,-25784(gp)
     dd8:	3080010e 	bge	r6,r2,de0 <transfer_LCD_with_dma+0xc>
     ddc:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     de0:	d0e6d28b 	ldhu	r3,-25782(gp)
     de4:	28c0010e 	bge	r5,r3,dec <transfer_LCD_with_dma+0x18>
     de8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     dec:	01804034 	movhi	r6,256
     df0:	31841e04 	addi	r6,r6,4216
     df4:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     df8:	01404034 	movhi	r5,256
     dfc:	29441b04 	addi	r5,r5,4204
     e00:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     e04:	18ffffcc 	andi	r3,r3,65535
     e08:	10bfffcc 	andi	r2,r2,65535
     e0c:	1885383a 	mul	r2,r3,r2
     e10:	00c04034 	movhi	r3,256
     e14:	18c41c04 	addi	r3,r3,4208
     e18:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     e1c:	39c03fcc 	andi	r7,r7,255
     e20:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e24:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e28:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e2c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e30:	38000326 	beq	r7,zero,e40 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e34:	00c04404 	movi	r3,272
     e38:	10c0002d 	sthio	r3,0(r2)
     e3c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e40:	00c04004 	movi	r3,256
     e44:	10c0002d 	sthio	r3,0(r2)
     e48:	f800283a 	ret

00000e4c <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     e4c:	defff504 	addi	sp,sp,-44
     e50:	dfc00a15 	stw	ra,40(sp)
     e54:	dd800715 	stw	r22,28(sp)
     e58:	dd400615 	stw	r21,24(sp)
     e5c:	dd000515 	stw	r20,20(sp)
     e60:	dcc00415 	stw	r19,16(sp)
     e64:	dc800315 	stw	r18,12(sp)
     e68:	dc400215 	stw	r17,8(sp)
     e6c:	dc000115 	stw	r16,4(sp)
     e70:	df000915 	stw	fp,36(sp)
     e74:	ddc00815 	stw	r23,32(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     e78:	00009340 	call	934 <init_LCD>
  init_camera();
     e7c:	00001c80 	call	1c8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     e80:	01000604 	movi	r4,24
     e84:	0001d7c0 	call	1d7c <vga_set_swap>
  printf("Hello from Nios II!\n");
     e88:	01000074 	movhi	r4,1
     e8c:	21010e04 	addi	r4,r4,1080
     e90:	00026ec0 	call	26ec <puts>
  cam_get_profiling();
     e94:	00005280 	call	528 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     e98:	00004e00 	call	4e0 <cam_get_xsize>
     e9c:	1021883a 	mov	r16,r2
     ea0:	00005040 	call	504 <cam_get_ysize>
     ea4:	10bfffcc 	andi	r2,r2,65535
     ea8:	813fffcc 	andi	r4,r16,65535
     eac:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     eb0:	04c00044 	movi	r19,1
     eb4:	05000084 	movi	r20,2
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     eb8:	0001d8c0 	call	1d8c <malloc>
     ebc:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ec0:	00004e00 	call	4e0 <cam_get_xsize>
     ec4:	1021883a 	mov	r16,r2
     ec8:	00005040 	call	504 <cam_get_ysize>
     ecc:	10bfffcc 	andi	r2,r2,65535
     ed0:	813fffcc 	andi	r4,r16,65535
     ed4:	2089383a 	mul	r4,r4,r2
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     ed8:	05604414 	movui	r21,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     edc:	0001d8c0 	call	1d8c <malloc>
     ee0:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ee4:	00004e00 	call	4e0 <cam_get_xsize>
     ee8:	1021883a 	mov	r16,r2
     eec:	00005040 	call	504 <cam_get_ysize>
     ef0:	10bfffcc 	andi	r2,r2,65535
     ef4:	813fffcc 	andi	r4,r16,65535
     ef8:	2089383a 	mul	r4,r4,r2
     efc:	0001d8c0 	call	1d8c <malloc>
     f00:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f04:	00004e00 	call	4e0 <cam_get_xsize>
     f08:	1021883a 	mov	r16,r2
     f0c:	00005040 	call	504 <cam_get_ysize>
     f10:	10bfffcc 	andi	r2,r2,65535
     f14:	813fffcc 	andi	r4,r16,65535
     f18:	2089383a 	mul	r4,r4,r2
     f1c:	0001d8c0 	call	1d8c <malloc>
  cam_set_image_pointer(0,buffer1);
     f20:	b00b883a 	mov	r5,r22
     f24:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f28:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     f2c:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     f30:	900b883a 	mov	r5,r18
     f34:	9809883a 	mov	r4,r19
     f38:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     f3c:	880b883a 	mov	r5,r17
     f40:	a009883a 	mov	r4,r20
     f44:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     f48:	800b883a 	mov	r5,r16
     f4c:	010000c4 	movi	r4,3
     f50:	00005a00 	call	5a0 <cam_set_image_pointer>
  enable_continues_mode();
     f54:	00006580 	call	658 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
     f58:	00004e00 	call	4e0 <cam_get_xsize>
     f5c:	1021883a 	mov	r16,r2
     f60:	00005040 	call	504 <cam_get_ysize>
     f64:	813fffcc 	andi	r4,r16,65535
     f68:	24c8d83a 	srl	r4,r4,r19
     f6c:	117fffcc 	andi	r5,r2,65535
     f70:	00012cc0 	call	12cc <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
     f74:	000066c0 	call	66c <new_image_available>
     f78:	10803fcc 	andi	r2,r2,255
     f7c:	1080201c 	xori	r2,r2,128
     f80:	10bfe004 	addi	r2,r2,-128
     f84:	103ffb26 	beq	r2,zero,f74 <__alt_data_end+0xff000f74>
		  if (current_image_valid()!=0) {
     f88:	00006140 	call	614 <current_image_valid>
     f8c:	10bfffcc 	andi	r2,r2,65535
     f90:	10a0001c 	xori	r2,r2,32768
     f94:	10a00004 	addi	r2,r2,-32768
     f98:	103ff626 	beq	r2,zero,f74 <__alt_data_end+0xff000f74>
			  current_mode = DIPSW_get_value();
     f9c:	00006980 	call	698 <DIPSW_get_value>
     fa0:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
     fa4:	00006280 	call	628 <current_image_pointer>
     fa8:	1025883a 	mov	r18,r2
		      switch (mode) {
     fac:	808001cc 	andi	r2,r16,7
     fb0:	14c03b26 	beq	r2,r19,10a0 <main+0x254>
     fb4:	1000aa26 	beq	r2,zero,1260 <main+0x414>
     fb8:	15008526 	beq	r2,r20,11d0 <main+0x384>
     fbc:	00c000c4 	movi	r3,3
     fc0:	10c0561e 	bne	r2,r3,111c <main+0x2d0>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
     fc4:	000f3100 	call	f310 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
     fc8:	000f34c0 	call	f34c <alt_timestamp>
     fcc:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
     fd0:	00004e00 	call	4e0 <cam_get_xsize>
     fd4:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
     fd8:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
     fdc:	897fffcc 	andi	r5,r17,65535
     fe0:	280ad07a 	srli	r5,r5,1
     fe4:	11bfffcc 	andi	r6,r2,65535
     fe8:	9009883a 	mov	r4,r18
     fec:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
     ff0:	000f34c0 	call	f34c <alt_timestamp>
     ff4:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
     ff8:	00007600 	call	760 <get_grayscale_picture>
     ffc:	1039883a 	mov	fp,r2
		               alt_timestamp_start();
    1000:	000f3100 	call	f310 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1004:	000f34c0 	call	f34c <alt_timestamp>
		               sobel_x(grayscale);
    1008:	e009883a 	mov	r4,fp
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    100c:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    1010:	000146c0 	call	146c <sobel_x>
		               end_sobel_x = alt_timestamp();
    1014:	000f34c0 	call	f34c <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    1018:	e009883a 	mov	r4,fp
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    101c:	1025883a 	mov	r18,r2
		               sobel_y_with_rgb(grayscale);
    1020:	00018400 	call	1840 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1024:	0001d5c0 	call	1d5c <GetSobel_rgb>
    1028:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    102c:	00004e00 	call	4e0 <cam_get_xsize>
    1030:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),0);
    1034:	d8c00015 	stw	r3,0(sp)
    1038:	00005040 	call	504 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    103c:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1040:	84003fcc 	andi	r16,r16,255
    1044:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1048:	197fffcc 	andi	r5,r3,65535
    104c:	280ad07a 	srli	r5,r5,1
    1050:	000f883a 	mov	r7,zero
    1054:	11bfffcc 	andi	r6,r2,65535
    1058:	e549883a 	add	r4,fp,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    105c:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1060:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1064:	80008e16 	blt	r16,zero,12a0 <main+0x454>
    1068:	95e5c83a 	sub	r18,r18,r23
    106c:	8da3c83a 	sub	r17,r17,r22
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1070:	01000074 	movhi	r4,1
    1074:	21011304 	addi	r4,r4,1100
    1078:	00026ec0 	call	26ec <puts>
		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
    107c:	01000074 	movhi	r4,1
    1080:	900b883a 	mov	r5,r18
    1084:	21011b04 	addi	r4,r4,1132
    1088:	00025f00 	call	25f0 <printf>
//		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
//		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
//		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    108c:	01000074 	movhi	r4,1
    1090:	880b883a 	mov	r5,r17
    1094:	21012104 	addi	r4,r4,1156
    1098:	00025f00 	call	25f0 <printf>
    109c:	003fb506 	br	f74 <__alt_data_end+0xff000f74>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    10a0:	000f3100 	call	f310 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    10a4:	000f34c0 	call	f34c <alt_timestamp>
    10a8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    10ac:	00004e00 	call	4e0 <cam_get_xsize>
    10b0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    10b4:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10b8:	897fffcc 	andi	r5,r17,65535
    10bc:	280ad07a 	srli	r5,r5,1
    10c0:	9009883a 	mov	r4,r18
    10c4:	11bfffcc 	andi	r6,r2,65535
    10c8:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10cc:	000f34c0 	call	f34c <alt_timestamp>
    10d0:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    10d4:	00007600 	call	760 <get_grayscale_picture>
    10d8:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    10dc:	00004e00 	call	4e0 <cam_get_xsize>
    10e0:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    10e4:	00005040 	call	504 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    10e8:	917fffcc 	andi	r5,r18,65535
    10ec:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10f0:	84003fcc 	andi	r16,r16,255
    10f4:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    10f8:	980f883a 	mov	r7,r19
    10fc:	11bfffcc 	andi	r6,r2,65535
    1100:	b9102204 	addi	r4,r23,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1104:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1108:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    110c:	80006616 	blt	r16,zero,12a8 <main+0x45c>
    1110:	8da3c83a 	sub	r17,r17,r22
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1114:	0025883a 	mov	r18,zero
    1118:	003fd506 	br	1070 <__alt_data_end+0xff001070>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    111c:	000f3100 	call	f310 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1120:	000f34c0 	call	f34c <alt_timestamp>
    1124:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1128:	00004e00 	call	4e0 <cam_get_xsize>
    112c:	1023883a 	mov	r17,r2
	                                  cam_get_ysize());
    1130:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1134:	897fffcc 	andi	r5,r17,65535
    1138:	280ad07a 	srli	r5,r5,1
    113c:	11bfffcc 	andi	r6,r2,65535
    1140:	9009883a 	mov	r4,r18
    1144:	00006ac0 	call	6ac <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1148:	000f34c0 	call	f34c <alt_timestamp>
    114c:	1023883a 	mov	r17,r2
                       grayscale = get_grayscale_picture();
    1150:	00007600 	call	760 <get_grayscale_picture>
    1154:	1025883a 	mov	r18,r2

                       alt_timestamp_start();
    1158:	000f3100 	call	f310 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    115c:	000f34c0 	call	f34c <alt_timestamp>
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    1160:	9009883a 	mov	r4,r18
    1164:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    1168:	102f883a 	mov	r23,r2
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    116c:	0001a5c0 	call	1a5c <sobel_complete>
                       end_sobel_x = alt_timestamp();
    1170:	000f34c0 	call	f34c <alt_timestamp>
    1174:	1025883a 	mov	r18,r2

//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
    1178:	0001d640 	call	1d64 <GetSobelResult>
    117c:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1180:	00004e00 	call	4e0 <cam_get_xsize>
    1184:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    1188:	d8c00015 	stw	r3,0(sp)
    118c:	00005040 	call	504 <cam_get_ysize>
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1190:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1194:	84003fcc 	andi	r16,r16,255
    1198:	8400201c 	xori	r16,r16,128
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    119c:	197fffcc 	andi	r5,r3,65535
    11a0:	280ad07a 	srli	r5,r5,1
    11a4:	01c00044 	movi	r7,1
    11a8:	11bfffcc 	andi	r6,r2,65535
    11ac:	e1102204 	addi	r4,fp,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11b0:	843fe004 	addi	r16,r16,-128
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11b4:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11b8:	803fab0e 	bge	r16,zero,1068 <__alt_data_end+0xff001068>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    11bc:	01000604 	movi	r4,24
    11c0:	0001d7c0 	call	1d7c <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    11c4:	e009883a 	mov	r4,fp
    11c8:	0001d6c0 	call	1d6c <vga_set_pointer>
    11cc:	003fa606 	br	1068 <__alt_data_end+0xff001068>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    11d0:	000f3100 	call	f310 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    11d4:	000f34c0 	call	f34c <alt_timestamp>
    11d8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11dc:	00004e00 	call	4e0 <cam_get_xsize>
    11e0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    11e4:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    11e8:	897fffcc 	andi	r5,r17,65535
    11ec:	280ad07a 	srli	r5,r5,1
    11f0:	11bfffcc 	andi	r6,r2,65535
    11f4:	9009883a 	mov	r4,r18
    11f8:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    11fc:	000f34c0 	call	f34c <alt_timestamp>
    1200:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1204:	00007600 	call	760 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1208:	1009883a 	mov	r4,r2
    120c:	00015ac0 	call	15ac <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1210:	0001d5c0 	call	1d5c <GetSobel_rgb>
    1214:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1218:	00004e00 	call	4e0 <cam_get_xsize>
    121c:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1220:	00005040 	call	504 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1224:	917fffcc 	andi	r5,r18,65535
    1228:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    122c:	84003fcc 	andi	r16,r16,255
    1230:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1234:	000f883a 	mov	r7,zero
    1238:	11bfffcc 	andi	r6,r2,65535
    123c:	bd49883a 	add	r4,r23,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1240:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1244:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1248:	803fb10e 	bge	r16,zero,1110 <__alt_data_end+0xff001110>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    124c:	01000204 	movi	r4,8
    1250:	0001d7c0 	call	1d7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1254:	b809883a 	mov	r4,r23
    1258:	0001d6c0 	call	1d6c <vga_set_pointer>
    125c:	003fac06 	br	1110 <__alt_data_end+0xff001110>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1260:	00004e00 	call	4e0 <cam_get_xsize>
    1264:	1023883a 	mov	r17,r2
		                	cam_get_ysize(),0);
    1268:	00005040 	call	504 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    126c:	897fffcc 	andi	r5,r17,65535
    1270:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1274:	84003fcc 	andi	r16,r16,255
    1278:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    127c:	000f883a 	mov	r7,zero
    1280:	11bfffcc 	andi	r6,r2,65535
    1284:	9549883a 	add	r4,r18,r21
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1288:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    128c:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1290:	80000716 	blt	r16,zero,12b0 <main+0x464>
    1294:	0023883a 	mov	r17,zero
    1298:	0025883a 	mov	r18,zero
    129c:	003f7406 	br	1070 <__alt_data_end+0xff001070>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12a0:	01000204 	movi	r4,8
    12a4:	003fc606 	br	11c0 <__alt_data_end+0xff0011c0>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12a8:	01000604 	movi	r4,24
    12ac:	003fe806 	br	1250 <__alt_data_end+0xff001250>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12b0:	01000204 	movi	r4,8
    12b4:	0001d7c0 	call	1d7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12b8:	9009883a 	mov	r4,r18
    12bc:	0001d6c0 	call	1d6c <vga_set_pointer>
    12c0:	0023883a 	mov	r17,zero
    12c4:	0025883a 	mov	r18,zero
    12c8:	003f6906 	br	1070 <__alt_data_end+0xff001070>

000012cc <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12cc:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &gx_array;
const char * pgy_array = &gy_array;

void init_sobel_arrays(int width , int height) {
    12d0:	defffd04 	addi	sp,sp,-12
    12d4:	dc400115 	stw	r17,4(sp)
    12d8:	dc000015 	stw	r16,0(sp)
    12dc:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    12e0:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    12e4:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &gx_array;
const char * pgy_array = &gy_array;

void init_sobel_arrays(int width , int height) {
    12e8:	2023883a 	mov	r17,r4
    12ec:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12f0:	10000226 	beq	r2,zero,12fc <init_sobel_arrays+0x30>
		free(sobel_x_result);
    12f4:	1009883a 	mov	r4,r2
    12f8:	0001da00 	call	1da0 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12fc:	8c21383a 	mul	r16,r17,r16
    1300:	8423883a 	add	r17,r16,r16
    1304:	8809883a 	mov	r4,r17
    1308:	0001d8c0 	call	1d8c <malloc>
	if (sobel_y_result != NULL)
    130c:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1310:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    1314:	20000126 	beq	r4,zero,131c <init_sobel_arrays+0x50>
		free(sobel_y_result);
    1318:	0001da00 	call	1da0 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    131c:	8809883a 	mov	r4,r17
    1320:	0001d8c0 	call	1d8c <malloc>
	if (sobel_result != NULL)
    1324:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1328:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    132c:	20000126 	beq	r4,zero,1334 <init_sobel_arrays+0x68>
		free(sobel_result);
    1330:	0001da00 	call	1da0 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1334:	8009883a 	mov	r4,r16
    1338:	0001d8c0 	call	1d8c <malloc>
	if (sobel_rgb565 != NULL)
    133c:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    1340:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    1344:	20000126 	beq	r4,zero,134c <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1348:	0001da00 	call	1da0 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    134c:	8809883a 	mov	r4,r17
    1350:	0001d8c0 	call	1d8c <malloc>
    1354:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1358:	0005883a 	mov	r2,zero
    135c:	04000f0e 	bge	zero,r16,139c <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    1360:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    1364:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    1368:	d1a6d417 	ldw	r6,-25776(gp)
    136c:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1370:	40d1883a 	add	r8,r8,r3
    1374:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1378:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    137c:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1380:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    1384:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1388:	d1a6d817 	ldw	r6,-25760(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    138c:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1390:	30c7883a 	add	r3,r6,r3
    1394:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1398:	80bff11e 	bne	r16,r2,1360 <__alt_data_end+0xff001360>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    139c:	dfc00217 	ldw	ra,8(sp)
    13a0:	dc400117 	ldw	r17,4(sp)
    13a4:	dc000017 	ldw	r16,0(sp)
    13a8:	dec00304 	addi	sp,sp,12
    13ac:	f800283a 	ret

000013b0 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    13b0:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13b4:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13b8:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13bc:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13c0:	3b8000c7 	ldb	r14,3(r7)
    13c4:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13c8:	5185883a 	add	r2,r10,r6
    13cc:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13d0:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    13d4:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13d8:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13dc:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13e0:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13e4:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13e8:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13ec:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    13f0:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13f4:	49000043 	ldbu	r4,1(r9)
    13f8:	3a800147 	ldb	r10,5(r7)
    13fc:	139d383a 	mul	r14,r2,r14
    1400:	60d9383a 	mul	r12,r12,r3
    1404:	68800003 	ldbu	r2,0(r13)
    1408:	38c001c7 	ldb	r3,7(r7)
    140c:	5a17383a 	mul	r11,r11,r8
    1410:	33ffffc3 	ldbu	r15,-1(r6)
    1414:	3a000007 	ldb	r8,0(r7)
    1418:	2295383a 	mul	r10,r4,r10
    141c:	31000043 	ldbu	r4,1(r6)
    1420:	39800087 	ldb	r6,2(r7)
    1424:	730b883a 	add	r5,r14,r12
    1428:	10d3383a 	mul	r9,r2,r3
    142c:	6b3fffc3 	ldbu	r12,-1(r13)
    1430:	38c00187 	ldb	r3,6(r7)
    1434:	2acb883a 	add	r5,r5,r11
    1438:	7a11383a 	mul	r8,r15,r8
    143c:	6ac00043 	ldbu	r11,1(r13)
    1440:	39c00207 	ldb	r7,8(r7)
    1444:	2a8b883a 	add	r5,r5,r10
    1448:	2189383a 	mul	r4,r4,r6
    144c:	2a45883a 	add	r2,r5,r9
    1450:	60c7383a 	mul	r3,r12,r3
    1454:	1205883a 	add	r2,r2,r8
    1458:	59cb383a 	mul	r5,r11,r7
    145c:	1105883a 	add	r2,r2,r4
    1460:	10c5883a 	add	r2,r2,r3
}
    1464:	1145883a 	add	r2,r2,r5
    1468:	f800283a 	ret

0000146c <sobel_x>:

void sobel_x( unsigned char *source ) {
    146c:	defff604 	addi	sp,sp,-40
    1470:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1474:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    1478:	dfc00915 	stw	ra,36(sp)
    147c:	df000815 	stw	fp,32(sp)
    1480:	ddc00715 	stw	r23,28(sp)
    1484:	dd800615 	stw	r22,24(sp)
    1488:	dd400515 	stw	r21,20(sp)
    148c:	dd000415 	stw	r20,16(sp)
    1490:	dcc00315 	stw	r19,12(sp)
    1494:	dc800215 	stw	r18,8(sp)
    1498:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    149c:	8c7fffc4 	addi	r17,r17,-1
    14a0:	00800044 	movi	r2,1
    14a4:	14402e0e 	bge	r2,r17,1560 <sobel_x+0xf4>
    14a8:	d366d317 	ldw	r13,-25780(gp)
    14ac:	d3e6d617 	ldw	r15,-25768(gp)
    14b0:	03800084 	movi	r14,2
    14b4:	6b65883a 	add	r18,r13,r13
    14b8:	9385883a 	add	r2,r18,r14
    14bc:	2359883a 	add	r12,r4,r13
    14c0:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    14c4:	7027883a 	mov	r19,r14
    14c8:	736bc83a 	sub	r21,r14,r13
    14cc:	6ba9883a 	add	r20,r13,r14
    14d0:	9b402f0e 	bge	r19,r13,1590 <sobel_x+0x124>
    14d4:	637f883a 	add	ra,r12,r13
    14d8:	7021883a 	mov	r16,r14
    14dc:	6357c83a 	sub	r11,r12,r13
    14e0:	ab0b883a 	add	r5,r21,r12
    14e4:	62800084 	addi	r10,r12,2
    14e8:	f813883a 	mov	r9,ra
    14ec:	a311883a 	add	r8,r20,r12
    14f0:	780f883a 	mov	r7,r15
    14f4:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    14f8:	29000003 	ldbu	r4,0(r5)
    14fc:	40c00003 	ldbu	r3,0(r8)
    1500:	37000003 	ldbu	fp,0(r6)
    1504:	50800003 	ldbu	r2,0(r10)
    1508:	20c7883a 	add	r3,r4,r3
    150c:	5dc00003 	ldbu	r23,0(r11)
    1510:	1f07c83a 	sub	r3,r3,fp
    1514:	4d800003 	ldbu	r22,0(r9)
    1518:	1f09c83a 	sub	r4,r3,fp
    151c:	1087883a 	add	r3,r2,r2
    1520:	20c7883a 	add	r3,r4,r3
    1524:	1dc5c83a 	sub	r2,r3,r23
    1528:	1585c83a 	sub	r2,r2,r22
    152c:	3880000d 	sth	r2,0(r7)
    1530:	29400044 	addi	r5,r5,1
    1534:	5ac00044 	addi	r11,r11,1
    1538:	31800044 	addi	r6,r6,1
    153c:	52800044 	addi	r10,r10,1
    1540:	4a400044 	addi	r9,r9,1
    1544:	42000044 	addi	r8,r8,1
    1548:	39c00084 	addi	r7,r7,2

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    154c:	617fea1e 	bne	r12,r5,14f8 <__alt_data_end+0xff0014f8>
    1550:	73800044 	addi	r14,r14,1
    1554:	f819883a 	mov	r12,ra
    1558:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    155c:	847fdc16 	blt	r16,r17,14d0 <__alt_data_end+0xff0014d0>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1560:	dfc00917 	ldw	ra,36(sp)
    1564:	df000817 	ldw	fp,32(sp)
    1568:	ddc00717 	ldw	r23,28(sp)
    156c:	dd800617 	ldw	r22,24(sp)
    1570:	dd400517 	ldw	r21,20(sp)
    1574:	dd000417 	ldw	r20,16(sp)
    1578:	dcc00317 	ldw	r19,12(sp)
    157c:	dc800217 	ldw	r18,8(sp)
    1580:	dc400117 	ldw	r17,4(sp)
    1584:	dc000017 	ldw	r16,0(sp)
    1588:	dec00a04 	addi	sp,sp,40
    158c:	f800283a 	ret
    1590:	7021883a 	mov	r16,r14
    1594:	637f883a 	add	ra,r12,r13
    1598:	73800044 	addi	r14,r14,1
    159c:	f819883a 	mov	r12,ra
    15a0:	7c9f883a 	add	r15,r15,r18
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15a4:	847fca16 	blt	r16,r17,14d0 <__alt_data_end+0xff0014d0>
    15a8:	003fed06 	br	1560 <__alt_data_end+0xff001560>

000015ac <sobel_x_with_rgb>:
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15ac:	defff504 	addi	sp,sp,-44
    15b0:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15b4:	d5a6d517 	ldw	r22,-25772(gp)
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15b8:	dfc00a15 	stw	ra,40(sp)
    15bc:	df000915 	stw	fp,36(sp)
    15c0:	ddc00815 	stw	r23,32(sp)
    15c4:	dd400615 	stw	r21,24(sp)
    15c8:	dd000515 	stw	r20,20(sp)
    15cc:	dcc00415 	stw	r19,16(sp)
    15d0:	dc800315 	stw	r18,12(sp)
    15d4:	dc400215 	stw	r17,8(sp)
    15d8:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15dc:	b5bfffc4 	addi	r22,r22,-1
    15e0:	00800044 	movi	r2,1
    15e4:	1580440e 	bge	r2,r22,16f8 <sobel_x_with_rgb+0x14c>
    15e8:	d7e6d317 	ldw	ra,-25780(gp)
    15ec:	d4a6d617 	ldw	r18,-25768(gp)
    15f0:	d466d817 	ldw	r17,-25760(gp)
    15f4:	ffe9883a 	add	r20,ra,ra
    15f8:	a0800084 	addi	r2,r20,2
    15fc:	04000084 	movi	r16,2
    1600:	90a5883a 	add	r18,r18,r2
    1604:	88a3883a 	add	r17,r17,r2
    1608:	fc05883a 	add	r2,ra,r16
    160c:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1610:	802f883a 	mov	r23,r16
    1614:	87f9c83a 	sub	fp,r16,ra
    1618:	d8800015 	stw	r2,0(sp)
    161c:	bfc02f0e 	bge	r23,ra,16dc <sobel_x_with_rgb+0x130>
    1620:	d8800017 	ldw	r2,0(sp)
    1624:	7fe7883a 	add	r19,r15,ra
    1628:	802b883a 	mov	r21,r16
    162c:	7fdbc83a 	sub	r13,r15,ra
    1630:	e3cf883a 	add	r7,fp,r15
    1634:	7b000084 	addi	r12,r15,2
    1638:	9817883a 	mov	r11,r19
    163c:	13d5883a 	add	r10,r2,r15
    1640:	881d883a 	mov	r14,r17
    1644:	9013883a 	mov	r9,r18
    1648:	7811883a 	mov	r8,r15
    164c:	00000b06 	br	167c <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1650:	180692fa 	slli	r3,r3,11
    1654:	70c0000d 	sth	r3,0(r14)
    1658:	39c00044 	addi	r7,r7,1
    165c:	6b400044 	addi	r13,r13,1
    1660:	42000044 	addi	r8,r8,1
    1664:	63000044 	addi	r12,r12,1
    1668:	5ac00044 	addi	r11,r11,1
    166c:	52800044 	addi	r10,r10,1
    1670:	4a400084 	addi	r9,r9,2
    1674:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1678:	79c01a26 	beq	r15,r7,16e4 <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    167c:	50800003 	ldbu	r2,0(r10)
    1680:	39400003 	ldbu	r5,0(r7)
    1684:	41800003 	ldbu	r6,0(r8)
    1688:	60c00003 	ldbu	r3,0(r12)
    168c:	288b883a 	add	r5,r5,r2
    1690:	298bc83a 	sub	r5,r5,r6
    1694:	68800003 	ldbu	r2,0(r13)
    1698:	59000003 	ldbu	r4,0(r11)
    169c:	298bc83a 	sub	r5,r5,r6
    16a0:	18c7883a 	add	r3,r3,r3
    16a4:	28c7883a 	add	r3,r5,r3
    16a8:	1887c83a 	sub	r3,r3,r2
    16ac:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    16b0:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    16b4:	10bfffcc 	andi	r2,r2,65535
    16b8:	10a0001c 	xori	r2,r2,32768
    16bc:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16c0:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    16c4:	103fe20e 	bge	r2,zero,1650 <__alt_data_end+0xff001650>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    16c8:	0085c83a 	sub	r2,zero,r2
    16cc:	1005d0ba 	srai	r2,r2,2
    16d0:	1004917a 	slli	r2,r2,5
    16d4:	7080000d 	sth	r2,0(r14)
    16d8:	003fdf06 	br	1658 <__alt_data_end+0xff001658>
    16dc:	802b883a 	mov	r21,r16
    16e0:	7fe7883a 	add	r19,r15,ra
    16e4:	84000044 	addi	r16,r16,1
    16e8:	981f883a 	mov	r15,r19
    16ec:	9525883a 	add	r18,r18,r20
    16f0:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16f4:	adbfc916 	blt	r21,r22,161c <__alt_data_end+0xff00161c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    16f8:	dfc00a17 	ldw	ra,40(sp)
    16fc:	df000917 	ldw	fp,36(sp)
    1700:	ddc00817 	ldw	r23,32(sp)
    1704:	dd800717 	ldw	r22,28(sp)
    1708:	dd400617 	ldw	r21,24(sp)
    170c:	dd000517 	ldw	r20,20(sp)
    1710:	dcc00417 	ldw	r19,16(sp)
    1714:	dc800317 	ldw	r18,12(sp)
    1718:	dc400217 	ldw	r17,8(sp)
    171c:	dc000117 	ldw	r16,4(sp)
    1720:	dec00b04 	addi	sp,sp,44
    1724:	f800283a 	ret

00001728 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1728:	defff704 	addi	sp,sp,-36
    172c:	dc400115 	stw	r17,4(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1730:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1734:	dfc00815 	stw	ra,32(sp)
    1738:	ddc00715 	stw	r23,28(sp)
    173c:	dd800615 	stw	r22,24(sp)
    1740:	dd400515 	stw	r21,20(sp)
    1744:	dd000415 	stw	r20,16(sp)
    1748:	dcc00315 	stw	r19,12(sp)
    174c:	dc800215 	stw	r18,8(sp)
    1750:	dc000015 	stw	r16,0(sp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1754:	8c7fffc4 	addi	r17,r17,-1
    1758:	00800044 	movi	r2,1
    175c:	14402d0e 	bge	r2,r17,1814 <sobel_y+0xec>
    1760:	d3e6d317 	ldw	r15,-25780(gp)
    1764:	d3a6d717 	ldw	r14,-25764(gp)
    1768:	03400084 	movi	r13,2
    176c:	7bff883a 	add	ra,r15,r15
    1770:	fb67883a 	add	r19,ra,r13
    1774:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1778:	6825883a 	mov	r18,r13
    177c:	f8a9883a 	add	r20,ra,r2
    1780:	6821883a 	mov	r16,r13
    1784:	93c01f0e 	bge	r18,r15,1804 <sobel_y+0xdc>
    1788:	27cd883a 	add	r6,r4,ra
    178c:	6821883a 	mov	r16,r13
    1790:	22c00044 	addi	r11,r4,1
    1794:	22800084 	addi	r10,r4,2
    1798:	a113883a 	add	r9,r20,r4
    179c:	990b883a 	add	r5,r19,r4
    17a0:	7999883a 	add	r12,r15,r6
    17a4:	7011883a 	mov	r8,r14
    17a8:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    17ac:	3d800003 	ldbu	r22,0(r7)
    17b0:	50c00003 	ldbu	r3,0(r10)
    17b4:	58800003 	ldbu	r2,0(r11)
    17b8:	4d400003 	ldbu	r21,0(r9)
    17bc:	b0c7883a 	add	r3,r22,r3
    17c0:	1085883a 	add	r2,r2,r2
    17c4:	35c00003 	ldbu	r23,0(r6)
    17c8:	1887883a 	add	r3,r3,r2
    17cc:	2d800003 	ldbu	r22,0(r5)
    17d0:	1d47c83a 	sub	r3,r3,r21
    17d4:	1d47c83a 	sub	r3,r3,r21
    17d8:	1dc5c83a 	sub	r2,r3,r23
    17dc:	1585c83a 	sub	r2,r2,r22
    17e0:	4080000d 	sth	r2,0(r8)
    17e4:	29400044 	addi	r5,r5,1
    17e8:	39c00044 	addi	r7,r7,1
    17ec:	5ac00044 	addi	r11,r11,1
    17f0:	52800044 	addi	r10,r10,1
    17f4:	31800044 	addi	r6,r6,1
    17f8:	4a400044 	addi	r9,r9,1
    17fc:	42000084 	addi	r8,r8,2

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1800:	617fea1e 	bne	r12,r5,17ac <__alt_data_end+0xff0017ac>
    1804:	6b400044 	addi	r13,r13,1
    1808:	23c9883a 	add	r4,r4,r15
    180c:	77dd883a 	add	r14,r14,ra
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1810:	847fdb16 	blt	r16,r17,1780 <__alt_data_end+0xff001780>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    1814:	dfc00817 	ldw	ra,32(sp)
    1818:	ddc00717 	ldw	r23,28(sp)
    181c:	dd800617 	ldw	r22,24(sp)
    1820:	dd400517 	ldw	r21,20(sp)
    1824:	dd000417 	ldw	r20,16(sp)
    1828:	dcc00317 	ldw	r19,12(sp)
    182c:	dc800217 	ldw	r18,8(sp)
    1830:	dc400117 	ldw	r17,4(sp)
    1834:	dc000017 	ldw	r16,0(sp)
    1838:	dec00904 	addi	sp,sp,36
    183c:	f800283a 	ret

00001840 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1840:	defff604 	addi	sp,sp,-40
    1844:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1848:	d4e6d517 	ldw	r19,-25772(gp)
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    184c:	dfc00915 	stw	ra,36(sp)
    1850:	df000815 	stw	fp,32(sp)
    1854:	ddc00715 	stw	r23,28(sp)
    1858:	dd800615 	stw	r22,24(sp)
    185c:	dd400515 	stw	r21,20(sp)
    1860:	dd000415 	stw	r20,16(sp)
    1864:	dc800215 	stw	r18,8(sp)
    1868:	dc400115 	stw	r17,4(sp)
    186c:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1870:	9cffffc4 	addi	r19,r19,-1
    1874:	00800044 	movi	r2,1
    1878:	14c03f0e 	bge	r2,r19,1978 <sobel_y_with_rgb+0x138>
    187c:	d466d317 	ldw	r17,-25780(gp)
    1880:	d426d717 	ldw	r16,-25764(gp)
    1884:	d7e6d817 	ldw	ra,-25760(gp)
    1888:	8c5d883a 	add	r14,r17,r17
    188c:	75000084 	addi	r20,r14,2
    1890:	03c00084 	movi	r15,2
    1894:	8521883a 	add	r16,r16,r20
    1898:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    189c:	782b883a 	mov	r21,r15
    18a0:	70ad883a 	add	r22,r14,r2
    18a4:	7825883a 	mov	r18,r15
    18a8:	ac402e0e 	bge	r21,r17,1964 <sobel_y_with_rgb+0x124>
    18ac:	238d883a 	add	r6,r4,r14
    18b0:	7825883a 	mov	r18,r15
    18b4:	22c00044 	addi	r11,r4,1
    18b8:	22800084 	addi	r10,r4,2
    18bc:	b113883a 	add	r9,r22,r4
    18c0:	a10b883a 	add	r5,r20,r4
    18c4:	899b883a 	add	r13,r17,r6
    18c8:	f819883a 	mov	r12,ra
    18cc:	8011883a 	mov	r8,r16
    18d0:	200f883a 	mov	r7,r4
    18d4:	00000b06 	br	1904 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    18d8:	180692fa 	slli	r3,r3,11
    18dc:	60c0000d 	sth	r3,0(r12)
    18e0:	29400044 	addi	r5,r5,1
    18e4:	39c00044 	addi	r7,r7,1
    18e8:	5ac00044 	addi	r11,r11,1
    18ec:	52800044 	addi	r10,r10,1
    18f0:	31800044 	addi	r6,r6,1
    18f4:	4a400044 	addi	r9,r9,1
    18f8:	42000084 	addi	r8,r8,2
    18fc:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1900:	69401826 	beq	r13,r5,1964 <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1904:	50800003 	ldbu	r2,0(r10)
    1908:	3f000003 	ldbu	fp,0(r7)
    190c:	58c00003 	ldbu	r3,0(r11)
    1910:	4dc00003 	ldbu	r23,0(r9)
    1914:	e0b9883a 	add	fp,fp,r2
    1918:	18c7883a 	add	r3,r3,r3
    191c:	30800003 	ldbu	r2,0(r6)
    1920:	e0c7883a 	add	r3,fp,r3
    1924:	1dc7c83a 	sub	r3,r3,r23
    1928:	2f000003 	ldbu	fp,0(r5)
    192c:	1dc7c83a 	sub	r3,r3,r23
    1930:	1885c83a 	sub	r2,r3,r2
    1934:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1938:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    193c:	10bfffcc 	andi	r2,r2,65535
    1940:	10a0001c 	xori	r2,r2,32768
    1944:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1948:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    194c:	103fe20e 	bge	r2,zero,18d8 <__alt_data_end+0xff0018d8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1950:	0085c83a 	sub	r2,zero,r2
    1954:	1005d0ba 	srai	r2,r2,2
    1958:	1004917a 	slli	r2,r2,5
    195c:	6080000d 	sth	r2,0(r12)
    1960:	003fdf06 	br	18e0 <__alt_data_end+0xff0018e0>
    1964:	7bc00044 	addi	r15,r15,1
    1968:	2449883a 	add	r4,r4,r17
    196c:	83a1883a 	add	r16,r16,r14
    1970:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1974:	94ffcb16 	blt	r18,r19,18a4 <__alt_data_end+0xff0018a4>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1978:	dfc00917 	ldw	ra,36(sp)
    197c:	df000817 	ldw	fp,32(sp)
    1980:	ddc00717 	ldw	r23,28(sp)
    1984:	dd800617 	ldw	r22,24(sp)
    1988:	dd400517 	ldw	r21,20(sp)
    198c:	dd000417 	ldw	r20,16(sp)
    1990:	dcc00317 	ldw	r19,12(sp)
    1994:	dc800217 	ldw	r18,8(sp)
    1998:	dc400117 	ldw	r17,4(sp)
    199c:	dc000017 	ldw	r16,0(sp)
    19a0:	dec00a04 	addi	sp,sp,40
    19a4:	f800283a 	ret

000019a8 <sobel_threshold>:

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    19a8:	d0a6d517 	ldw	r2,-25772(gp)
    19ac:	02400084 	movi	r9,2
    19b0:	4880290e 	bge	r9,r2,1a58 <sobel_threshold+0xb0>
    19b4:	223fffcc 	andi	r8,r4,65535
    19b8:	d0e6d317 	ldw	r3,-25780(gp)
    19bc:	4220001c 	xori	r8,r8,32768
    19c0:	01c00044 	movi	r7,1
    19c4:	42200004 	addi	r8,r8,-32768
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19c8:	48c0200e 	bge	r9,r3,1a4c <sobel_threshold+0xa4>
    19cc:	01400044 	movi	r5,1
    19d0:	00000c06 	br	1a04 <sobel_threshold+0x5c>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    19d4:	2080000f 	ldh	r2,0(r4)
    19d8:	10001916 	blt	r2,zero,1a40 <sobel_threshold+0x98>
    19dc:	3085883a 	add	r2,r6,r2
    19e0:	10bfffcc 	andi	r2,r2,65535
    19e4:	10a0001c 	xori	r2,r2,32768
    19e8:	10a00004 	addi	r2,r2,-32768
    19ec:	4084803a 	cmplt	r2,r8,r2
    19f0:	0085c83a 	sub	r2,zero,r2
    19f4:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    19f8:	d0e6d317 	ldw	r3,-25780(gp)
    19fc:	18bfffc4 	addi	r2,r3,-1
    1a00:	2880110e 	bge	r5,r2,1a48 <sobel_threshold+0xa0>
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a04:	38c7383a 	mul	r3,r7,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a08:	d1a6d717 	ldw	r6,-25764(gp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a0c:	d126d617 	ldw	r4,-25768(gp)
    1a10:	1947883a 	add	r3,r3,r5
    1a14:	18c5883a 	add	r2,r3,r3
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
    1a18:	308d883a 	add	r6,r6,r2
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
    1a1c:	2089883a 	add	r4,r4,r2
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a20:	3180000f 	ldh	r6,0(r6)
    1a24:	d0a6d417 	ldw	r2,-25776(gp)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    1a28:	29400044 	addi	r5,r5,1
			arrayindex = (y*sobel_width)+x;
			value = sobel_x_result[arrayindex];
			sum = (value < 0) ? -value : value;
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1a2c:	10c7883a 	add	r3,r2,r3
    1a30:	303fe80e 	bge	r6,zero,19d4 <__alt_data_end+0xff0019d4>
    1a34:	2080000f 	ldh	r2,0(r4)
    1a38:	018dc83a 	sub	r6,zero,r6
    1a3c:	103fe70e 	bge	r2,zero,19dc <__alt_data_end+0xff0019dc>
    1a40:	0085c83a 	sub	r2,zero,r2
    1a44:	003fe506 	br	19dc <__alt_data_end+0xff0019dc>
    1a48:	d0a6d517 	ldw	r2,-25772(gp)
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a4c:	39c00044 	addi	r7,r7,1
    1a50:	113fffc4 	addi	r4,r2,-1
    1a54:	393fdc16 	blt	r7,r4,19c8 <__alt_data_end+0xff0019c8>
    1a58:	f800283a 	ret

00001a5c <sobel_complete>:
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a5c:	d0e6d517 	ldw	r3,-25772(gp)
    1a60:	00800084 	movi	r2,2
    1a64:	10c0b70e 	bge	r2,r3,1d44 <sobel_complete+0x2e8>
    1a68:	297fffcc 	andi	r5,r5,65535
    1a6c:	2960001c 	xori	r5,r5,32768
    1a70:	d3a6d317 	ldw	r14,-25780(gp)
		}
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a74:	defff004 	addi	sp,sp,-64
    1a78:	29600004 	addi	r5,r5,-32768
    1a7c:	dfc00f15 	stw	ra,60(sp)
    1a80:	df000e15 	stw	fp,56(sp)
    1a84:	ddc00d15 	stw	r23,52(sp)
    1a88:	dd800c15 	stw	r22,48(sp)
    1a8c:	dd400b15 	stw	r21,44(sp)
    1a90:	dd000a15 	stw	r20,40(sp)
    1a94:	dcc00915 	stw	r19,36(sp)
    1a98:	dc800815 	stw	r18,32(sp)
    1a9c:	dc400715 	stw	r17,28(sp)
    1aa0:	dc000615 	stw	r16,24(sp)
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1aa4:	d8800115 	stw	r2,4(sp)
    1aa8:	d9400415 	stw	r5,16(sp)
    1aac:	203f883a 	mov	ra,r4
    1ab0:	da400117 	ldw	r9,4(sp)
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ab4:	02c00084 	movi	r11,2
    1ab8:	4a7fffc4 	addi	r9,r9,-1
    1abc:	da400215 	stw	r9,8(sp)
    1ac0:	5b80a10e 	bge	r11,r14,1d48 <sobel_complete+0x2ec>
    1ac4:	d8c00117 	ldw	r3,4(sp)
    1ac8:	d9000117 	ldw	r4,4(sp)
    1acc:	18ffff84 	addi	r3,r3,-2
    1ad0:	d8c00315 	stw	r3,12(sp)
    1ad4:	00c00044 	movi	r3,1
    1ad8:	d9000515 	stw	r4,20(sp)
    1adc:	1805883a 	mov	r2,r3
    1ae0:	00001006 	br	1b24 <sobel_complete+0xc8>
	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value < 0) ? -value : value;
	   value = sobel_y_result[arrayindex];
	   sum += (value < 0) ? -value : value;
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1ae4:	10bfffcc 	andi	r2,r2,65535
    1ae8:	10a0001c 	xori	r2,r2,32768
    1aec:	10a00004 	addi	r2,r2,-32768
    1af0:	10008016 	blt	r2,zero,1cf4 <sobel_complete+0x298>
    1af4:	1885883a 	add	r2,r3,r2
    1af8:	10bfffcc 	andi	r2,r2,65535
    1afc:	d8c00417 	ldw	r3,16(sp)
    1b00:	10a0001c 	xori	r2,r2,32768
    1b04:	10a00004 	addi	r2,r2,-32768
    1b08:	1884803a 	cmplt	r2,r3,r2
    1b0c:	0085c83a 	sub	r2,zero,r2
    1b10:	30800005 	stb	r2,0(r6)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b14:	d3a6d317 	ldw	r14,-25780(gp)
    1b18:	6805883a 	mov	r2,r13
    1b1c:	70ffffc4 	addi	r3,r14,-1
    1b20:	68c0760e 	bge	r13,r3,1cfc <sobel_complete+0x2a0>
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b24:	d8c00317 	ldw	r3,12(sp)
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;
    1b28:	d9000217 	ldw	r4,8(sp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1b2c:	d9800117 	ldw	r6,4(sp)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b30:	70cb383a 	mul	r5,r14,r3
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;
    1b34:	7107383a 	mul	r3,r14,r4

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1b38:	13400044 	addi	r13,r2,1
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b3c:	d1200117 	ldw	r4,-32764(gp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    1b40:	28a5883a 	add	r18,r5,r2
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1b44:	2b63883a 	add	r17,r5,r13
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1b48:	719d383a 	mul	r14,r14,r6
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    1b4c:	fca5883a 	add	r18,ra,r18
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
    1b50:	188d883a 	add	r6,r3,r2
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1b54:	fc63883a 	add	r17,ra,r17
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b58:	25400047 	ldb	r21,1(r4)
    1b5c:	8a400003 	ldbu	r9,0(r17)
    1b60:	94c00003 	ldbu	r19,0(r18)
    1b64:	23000087 	ldb	r12,2(r4)
	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
    1b68:	f9a9883a 	add	r20,ra,r6
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b6c:	a2000003 	ldbu	r8,0(r20)
    1b70:	22c00107 	ldb	r11,4(r4)
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    1b74:	1b4f883a 	add	r7,r3,r13
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b78:	ace7383a 	mul	r19,r21,r19
    1b7c:	6259383a 	mul	r12,r12,r9
    1b80:	22400207 	ldb	r9,8(r4)
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    1b84:	f9ed883a 	add	r22,ra,r7
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    1b88:	70a1883a 	add	r16,r14,r2
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b8c:	5a17383a 	mul	r11,r11,r8
    1b90:	b1c00003 	ldbu	r7,0(r22)
    1b94:	27000147 	ldb	fp,5(r4)
    1b98:	10bfffc4 	addi	r2,r2,-1
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    1b9c:	fc21883a 	add	r16,ra,r16
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    1ba0:	6b9f883a 	add	r15,r13,r14
	   sobel_x_result[arrayindex] = result;
    1ba4:	25c001c7 	ldb	r23,7(r4)
    1ba8:	82800003 	ldbu	r10,0(r16)
    1bac:	da40000d 	sth	r9,0(sp)
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    1bb0:	fbdf883a 	add	r15,ra,r15
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1bb4:	288b883a 	add	r5,r5,r2
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bb8:	9b19883a 	add	r12,r19,r12
    1bbc:	7a400003 	ldbu	r9,0(r15)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1bc0:	f94b883a 	add	r5,ra,r5
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    1bc4:	1887883a 	add	r3,r3,r2
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bc8:	62d9883a 	add	r12,r12,r11
    1bcc:	dac0000b 	ldhu	r11,0(sp)
    1bd0:	25400007 	ldb	r21,0(r4)
    1bd4:	2a000003 	ldbu	r8,0(r5)

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    1bd8:	f8c7883a 	add	r3,ra,r3
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bdc:	e1f9383a 	mul	fp,fp,r7
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1be0:	7085883a 	add	r2,r14,r2
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1be4:	19c00003 	ldbu	r7,0(r3)
    1be8:	238000c7 	ldb	r14,3(r4)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1bec:	f885883a 	add	r2,ra,r2
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bf0:	ba95383a 	mul	r10,r23,r10
    1bf4:	24c00187 	ldb	r19,6(r4)
    1bf8:	5a53383a 	mul	r9,r11,r9
    1bfc:	11000003 	ldbu	r4,0(r2)
    1c00:	6719883a 	add	r12,r12,fp
    1c04:	aa11383a 	mul	r8,r21,r8
    1c08:	6299883a 	add	r12,r12,r10
    1c0c:	71dd383a 	mul	r14,r14,r7
    1c10:	6253883a 	add	r9,r12,r9
    1c14:	9927383a 	mul	r19,r19,r4
    1c18:	d5e6d617 	ldw	r23,-25768(gp)
    1c1c:	4a11883a 	add	r8,r9,r8
	   result = 0;

	   // sobel_y in-lining
	   result += pgy_array[0] * source[(y-1)*sobel_width+(x-1)];
    1c20:	d2e00017 	ldw	r11,-32768(gp)
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1c24:	31b9883a 	add	fp,r6,r6
    1c28:	4389883a 	add	r4,r8,r14
    1c2c:	bf2f883a 	add	r23,r23,fp
    1c30:	24c9883a 	add	r4,r4,r19
    1c34:	b900000d 	sth	r4,0(r23)
	   result += pgy_array[3] * source[y*sobel_width+(x-1)];
	   result += pgy_array[4] * source[y*sobel_width+x];
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
    1c38:	5a800047 	ldb	r10,1(r11)
    1c3c:	92400003 	ldbu	r9,0(r18)
    1c40:	5b000087 	ldb	r12,2(r11)
    1c44:	8a000003 	ldbu	r8,0(r17)
    1c48:	5b800107 	ldb	r14,4(r11)
    1c4c:	a1c00003 	ldbu	r7,0(r20)
    1c50:	b1000003 	ldbu	r4,0(r22)
    1c54:	5c400147 	ldb	r17,5(r11)
    1c58:	5c8001c7 	ldb	r18,7(r11)
    1c5c:	84000003 	ldbu	r16,0(r16)
    1c60:	5253383a 	mul	r9,r10,r9
    1c64:	6211383a 	mul	r8,r12,r8
    1c68:	5cc00207 	ldb	r19,8(r11)
    1c6c:	7bc00003 	ldbu	r15,0(r15)
    1c70:	71cf383a 	mul	r7,r14,r7
    1c74:	5d000007 	ldb	r20,0(r11)
    1c78:	29400003 	ldbu	r5,0(r5)
    1c7c:	8923383a 	mul	r17,r17,r4
    1c80:	5d4000c7 	ldb	r21,3(r11)
    1c84:	1d800003 	ldbu	r22,0(r3)
    1c88:	4a13883a 	add	r9,r9,r8
    1c8c:	9425383a 	mul	r18,r18,r16
    1c90:	10c00003 	ldbu	r3,0(r2)
    1c94:	5ac00187 	ldb	r11,6(r11)
    1c98:	49d3883a 	add	r9,r9,r7
    1c9c:	9bdf383a 	mul	r15,r19,r15
    1ca0:	4c45883a 	add	r2,r9,r17
    1ca4:	a169383a 	mul	r20,r20,r5
    1ca8:	ad89383a 	mul	r4,r21,r22
    1cac:	1485883a 	add	r2,r2,r18
    1cb0:	58c7383a 	mul	r3,r11,r3
    1cb4:	13c5883a 	add	r2,r2,r15
    1cb8:	1505883a 	add	r2,r2,r20
    1cbc:	1105883a 	add	r2,r2,r4
    1cc0:	10c5883a 	add	r2,r2,r3
	   sobel_y_result[arrayindex] = result;
    1cc4:	d0e6d717 	ldw	r3,-25764(gp)
	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value < 0) ? -value : value;
	   value = sobel_y_result[arrayindex];
	   sum += (value < 0) ? -value : value;
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1cc8:	d126d417 	ldw	r4,-25776(gp)
	   result += pgy_array[4] * source[y*sobel_width+x];
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_y_result[arrayindex] = result;
    1ccc:	1f39883a 	add	fp,r3,fp
    1cd0:	e080000d 	sth	r2,0(fp)
	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value < 0) ? -value : value;
	   value = sobel_y_result[arrayindex];
	   sum += (value < 0) ? -value : value;
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1cd4:	b8c0000f 	ldh	r3,0(r23)
    1cd8:	218d883a 	add	r6,r4,r6
    1cdc:	183f810e 	bge	r3,zero,1ae4 <__alt_data_end+0xff001ae4>
    1ce0:	10bfffcc 	andi	r2,r2,65535
    1ce4:	10a0001c 	xori	r2,r2,32768
    1ce8:	10a00004 	addi	r2,r2,-32768
    1cec:	00c7c83a 	sub	r3,zero,r3
    1cf0:	103f800e 	bge	r2,zero,1af4 <__alt_data_end+0xff001af4>
    1cf4:	0085c83a 	sub	r2,zero,r2
    1cf8:	003f7e06 	br	1af4 <__alt_data_end+0xff001af4>
    1cfc:	d0e6d517 	ldw	r3,-25772(gp)
    1d00:	d9000117 	ldw	r4,4(sp)
    1d04:	d9800517 	ldw	r6,20(sp)
    1d08:	21000044 	addi	r4,r4,1
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d0c:	18bfffc4 	addi	r2,r3,-1
    1d10:	d9000115 	stw	r4,4(sp)
    1d14:	30bf6616 	blt	r6,r2,1ab0 <__alt_data_end+0xff001ab0>
	   value = sobel_y_result[arrayindex];
	   sum += (value < 0) ? -value : value;
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
	 }
   }
}
    1d18:	dfc00f17 	ldw	ra,60(sp)
    1d1c:	df000e17 	ldw	fp,56(sp)
    1d20:	ddc00d17 	ldw	r23,52(sp)
    1d24:	dd800c17 	ldw	r22,48(sp)
    1d28:	dd400b17 	ldw	r21,44(sp)
    1d2c:	dd000a17 	ldw	r20,40(sp)
    1d30:	dcc00917 	ldw	r19,36(sp)
    1d34:	dc800817 	ldw	r18,32(sp)
    1d38:	dc400717 	ldw	r17,28(sp)
    1d3c:	dc000617 	ldw	r16,24(sp)
    1d40:	dec01004 	addi	sp,sp,64
    1d44:	f800283a 	ret
    1d48:	d8800117 	ldw	r2,4(sp)
    1d4c:	d8800515 	stw	r2,20(sp)
    1d50:	1009883a 	mov	r4,r2
    1d54:	100d883a 	mov	r6,r2
    1d58:	003feb06 	br	1d08 <__alt_data_end+0xff001d08>

00001d5c <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d5c:	d0a6d817 	ldw	r2,-25760(gp)
    1d60:	f800283a 	ret

00001d64 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d64:	d0a6d417 	ldw	r2,-25776(gp)
    1d68:	f800283a 	ret

00001d6c <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1d6c:	00804034 	movhi	r2,256
    1d70:	10843404 	addi	r2,r2,4304
    1d74:	11000035 	stwio	r4,0(r2)
    1d78:	f800283a 	ret

00001d7c <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1d7c:	00804034 	movhi	r2,256
    1d80:	10843504 	addi	r2,r2,4308
    1d84:	11000025 	stbio	r4,0(r2)
    1d88:	f800283a 	ret

00001d8c <malloc>:
    1d8c:	00800074 	movhi	r2,1
    1d90:	10889604 	addi	r2,r2,8792
    1d94:	200b883a 	mov	r5,r4
    1d98:	11000017 	ldw	r4,0(r2)
    1d9c:	0001db41 	jmpi	1db4 <_malloc_r>

00001da0 <free>:
    1da0:	00800074 	movhi	r2,1
    1da4:	10889604 	addi	r2,r2,8792
    1da8:	200b883a 	mov	r5,r4
    1dac:	11000017 	ldw	r4,0(r2)
    1db0:	0006c041 	jmpi	6c04 <_free_r>

00001db4 <_malloc_r>:
    1db4:	defff504 	addi	sp,sp,-44
    1db8:	dc800315 	stw	r18,12(sp)
    1dbc:	dfc00a15 	stw	ra,40(sp)
    1dc0:	df000915 	stw	fp,36(sp)
    1dc4:	ddc00815 	stw	r23,32(sp)
    1dc8:	dd800715 	stw	r22,28(sp)
    1dcc:	dd400615 	stw	r21,24(sp)
    1dd0:	dd000515 	stw	r20,20(sp)
    1dd4:	dcc00415 	stw	r19,16(sp)
    1dd8:	dc400215 	stw	r17,8(sp)
    1ddc:	dc000115 	stw	r16,4(sp)
    1de0:	288002c4 	addi	r2,r5,11
    1de4:	00c00584 	movi	r3,22
    1de8:	2025883a 	mov	r18,r4
    1dec:	18807f2e 	bgeu	r3,r2,1fec <_malloc_r+0x238>
    1df0:	047ffe04 	movi	r17,-8
    1df4:	1462703a 	and	r17,r2,r17
    1df8:	8800a316 	blt	r17,zero,2088 <_malloc_r+0x2d4>
    1dfc:	8940a236 	bltu	r17,r5,2088 <_malloc_r+0x2d4>
    1e00:	000ea3c0 	call	ea3c <__malloc_lock>
    1e04:	00807dc4 	movi	r2,503
    1e08:	1441e92e 	bgeu	r2,r17,25b0 <_malloc_r+0x7fc>
    1e0c:	8804d27a 	srli	r2,r17,9
    1e10:	1000a126 	beq	r2,zero,2098 <_malloc_r+0x2e4>
    1e14:	00c00104 	movi	r3,4
    1e18:	18811e36 	bltu	r3,r2,2294 <_malloc_r+0x4e0>
    1e1c:	8804d1ba 	srli	r2,r17,6
    1e20:	12000e44 	addi	r8,r2,57
    1e24:	11c00e04 	addi	r7,r2,56
    1e28:	4209883a 	add	r4,r8,r8
    1e2c:	04c00074 	movhi	r19,1
    1e30:	2109883a 	add	r4,r4,r4
    1e34:	9cc1e604 	addi	r19,r19,1944
    1e38:	2109883a 	add	r4,r4,r4
    1e3c:	9909883a 	add	r4,r19,r4
    1e40:	24000117 	ldw	r16,4(r4)
    1e44:	213ffe04 	addi	r4,r4,-8
    1e48:	24009726 	beq	r4,r16,20a8 <_malloc_r+0x2f4>
    1e4c:	80800117 	ldw	r2,4(r16)
    1e50:	01bfff04 	movi	r6,-4
    1e54:	014003c4 	movi	r5,15
    1e58:	1184703a 	and	r2,r2,r6
    1e5c:	1447c83a 	sub	r3,r2,r17
    1e60:	28c00716 	blt	r5,r3,1e80 <_malloc_r+0xcc>
    1e64:	1800920e 	bge	r3,zero,20b0 <_malloc_r+0x2fc>
    1e68:	84000317 	ldw	r16,12(r16)
    1e6c:	24008e26 	beq	r4,r16,20a8 <_malloc_r+0x2f4>
    1e70:	80800117 	ldw	r2,4(r16)
    1e74:	1184703a 	and	r2,r2,r6
    1e78:	1447c83a 	sub	r3,r2,r17
    1e7c:	28fff90e 	bge	r5,r3,1e64 <__alt_data_end+0xff001e64>
    1e80:	3809883a 	mov	r4,r7
    1e84:	01800074 	movhi	r6,1
    1e88:	9c000417 	ldw	r16,16(r19)
    1e8c:	3181e604 	addi	r6,r6,1944
    1e90:	32000204 	addi	r8,r6,8
    1e94:	82013426 	beq	r16,r8,2368 <_malloc_r+0x5b4>
    1e98:	80c00117 	ldw	r3,4(r16)
    1e9c:	00bfff04 	movi	r2,-4
    1ea0:	188e703a 	and	r7,r3,r2
    1ea4:	3c45c83a 	sub	r2,r7,r17
    1ea8:	00c003c4 	movi	r3,15
    1eac:	18811f16 	blt	r3,r2,232c <_malloc_r+0x578>
    1eb0:	32000515 	stw	r8,20(r6)
    1eb4:	32000415 	stw	r8,16(r6)
    1eb8:	10007f0e 	bge	r2,zero,20b8 <_malloc_r+0x304>
    1ebc:	00807fc4 	movi	r2,511
    1ec0:	11c0fd36 	bltu	r2,r7,22b8 <_malloc_r+0x504>
    1ec4:	3806d0fa 	srli	r3,r7,3
    1ec8:	01c00044 	movi	r7,1
    1ecc:	30800117 	ldw	r2,4(r6)
    1ed0:	19400044 	addi	r5,r3,1
    1ed4:	294b883a 	add	r5,r5,r5
    1ed8:	1807d0ba 	srai	r3,r3,2
    1edc:	294b883a 	add	r5,r5,r5
    1ee0:	294b883a 	add	r5,r5,r5
    1ee4:	298b883a 	add	r5,r5,r6
    1ee8:	38c6983a 	sll	r3,r7,r3
    1eec:	29c00017 	ldw	r7,0(r5)
    1ef0:	2a7ffe04 	addi	r9,r5,-8
    1ef4:	1886b03a 	or	r3,r3,r2
    1ef8:	82400315 	stw	r9,12(r16)
    1efc:	81c00215 	stw	r7,8(r16)
    1f00:	30c00115 	stw	r3,4(r6)
    1f04:	2c000015 	stw	r16,0(r5)
    1f08:	3c000315 	stw	r16,12(r7)
    1f0c:	2005d0ba 	srai	r2,r4,2
    1f10:	01400044 	movi	r5,1
    1f14:	288a983a 	sll	r5,r5,r2
    1f18:	19406f36 	bltu	r3,r5,20d8 <_malloc_r+0x324>
    1f1c:	28c4703a 	and	r2,r5,r3
    1f20:	10000a1e 	bne	r2,zero,1f4c <_malloc_r+0x198>
    1f24:	00bfff04 	movi	r2,-4
    1f28:	294b883a 	add	r5,r5,r5
    1f2c:	2088703a 	and	r4,r4,r2
    1f30:	28c4703a 	and	r2,r5,r3
    1f34:	21000104 	addi	r4,r4,4
    1f38:	1000041e 	bne	r2,zero,1f4c <_malloc_r+0x198>
    1f3c:	294b883a 	add	r5,r5,r5
    1f40:	28c4703a 	and	r2,r5,r3
    1f44:	21000104 	addi	r4,r4,4
    1f48:	103ffc26 	beq	r2,zero,1f3c <__alt_data_end+0xff001f3c>
    1f4c:	02bfff04 	movi	r10,-4
    1f50:	024003c4 	movi	r9,15
    1f54:	21800044 	addi	r6,r4,1
    1f58:	318d883a 	add	r6,r6,r6
    1f5c:	318d883a 	add	r6,r6,r6
    1f60:	318d883a 	add	r6,r6,r6
    1f64:	998d883a 	add	r6,r19,r6
    1f68:	333ffe04 	addi	r12,r6,-8
    1f6c:	2017883a 	mov	r11,r4
    1f70:	31800104 	addi	r6,r6,4
    1f74:	34000017 	ldw	r16,0(r6)
    1f78:	31fffd04 	addi	r7,r6,-12
    1f7c:	81c0041e 	bne	r16,r7,1f90 <_malloc_r+0x1dc>
    1f80:	0000fb06 	br	2370 <_malloc_r+0x5bc>
    1f84:	1801030e 	bge	r3,zero,2394 <_malloc_r+0x5e0>
    1f88:	84000317 	ldw	r16,12(r16)
    1f8c:	81c0f826 	beq	r16,r7,2370 <_malloc_r+0x5bc>
    1f90:	80800117 	ldw	r2,4(r16)
    1f94:	1284703a 	and	r2,r2,r10
    1f98:	1447c83a 	sub	r3,r2,r17
    1f9c:	48fff90e 	bge	r9,r3,1f84 <__alt_data_end+0xff001f84>
    1fa0:	80800317 	ldw	r2,12(r16)
    1fa4:	81000217 	ldw	r4,8(r16)
    1fa8:	89400054 	ori	r5,r17,1
    1fac:	81400115 	stw	r5,4(r16)
    1fb0:	20800315 	stw	r2,12(r4)
    1fb4:	11000215 	stw	r4,8(r2)
    1fb8:	8463883a 	add	r17,r16,r17
    1fbc:	9c400515 	stw	r17,20(r19)
    1fc0:	9c400415 	stw	r17,16(r19)
    1fc4:	18800054 	ori	r2,r3,1
    1fc8:	88800115 	stw	r2,4(r17)
    1fcc:	8a000315 	stw	r8,12(r17)
    1fd0:	8a000215 	stw	r8,8(r17)
    1fd4:	88e3883a 	add	r17,r17,r3
    1fd8:	88c00015 	stw	r3,0(r17)
    1fdc:	9009883a 	mov	r4,r18
    1fe0:	000ea400 	call	ea40 <__malloc_unlock>
    1fe4:	80800204 	addi	r2,r16,8
    1fe8:	00001b06 	br	2058 <_malloc_r+0x2a4>
    1fec:	04400404 	movi	r17,16
    1ff0:	89402536 	bltu	r17,r5,2088 <_malloc_r+0x2d4>
    1ff4:	000ea3c0 	call	ea3c <__malloc_lock>
    1ff8:	00800184 	movi	r2,6
    1ffc:	01000084 	movi	r4,2
    2000:	04c00074 	movhi	r19,1
    2004:	1085883a 	add	r2,r2,r2
    2008:	9cc1e604 	addi	r19,r19,1944
    200c:	1085883a 	add	r2,r2,r2
    2010:	9885883a 	add	r2,r19,r2
    2014:	14000117 	ldw	r16,4(r2)
    2018:	10fffe04 	addi	r3,r2,-8
    201c:	80c0d926 	beq	r16,r3,2384 <_malloc_r+0x5d0>
    2020:	80c00117 	ldw	r3,4(r16)
    2024:	81000317 	ldw	r4,12(r16)
    2028:	00bfff04 	movi	r2,-4
    202c:	1884703a 	and	r2,r3,r2
    2030:	81400217 	ldw	r5,8(r16)
    2034:	8085883a 	add	r2,r16,r2
    2038:	10c00117 	ldw	r3,4(r2)
    203c:	29000315 	stw	r4,12(r5)
    2040:	21400215 	stw	r5,8(r4)
    2044:	18c00054 	ori	r3,r3,1
    2048:	10c00115 	stw	r3,4(r2)
    204c:	9009883a 	mov	r4,r18
    2050:	000ea400 	call	ea40 <__malloc_unlock>
    2054:	80800204 	addi	r2,r16,8
    2058:	dfc00a17 	ldw	ra,40(sp)
    205c:	df000917 	ldw	fp,36(sp)
    2060:	ddc00817 	ldw	r23,32(sp)
    2064:	dd800717 	ldw	r22,28(sp)
    2068:	dd400617 	ldw	r21,24(sp)
    206c:	dd000517 	ldw	r20,20(sp)
    2070:	dcc00417 	ldw	r19,16(sp)
    2074:	dc800317 	ldw	r18,12(sp)
    2078:	dc400217 	ldw	r17,8(sp)
    207c:	dc000117 	ldw	r16,4(sp)
    2080:	dec00b04 	addi	sp,sp,44
    2084:	f800283a 	ret
    2088:	00800304 	movi	r2,12
    208c:	90800015 	stw	r2,0(r18)
    2090:	0005883a 	mov	r2,zero
    2094:	003ff006 	br	2058 <__alt_data_end+0xff002058>
    2098:	01002004 	movi	r4,128
    209c:	02001004 	movi	r8,64
    20a0:	01c00fc4 	movi	r7,63
    20a4:	003f6106 	br	1e2c <__alt_data_end+0xff001e2c>
    20a8:	4009883a 	mov	r4,r8
    20ac:	003f7506 	br	1e84 <__alt_data_end+0xff001e84>
    20b0:	81000317 	ldw	r4,12(r16)
    20b4:	003fde06 	br	2030 <__alt_data_end+0xff002030>
    20b8:	81c5883a 	add	r2,r16,r7
    20bc:	11400117 	ldw	r5,4(r2)
    20c0:	9009883a 	mov	r4,r18
    20c4:	29400054 	ori	r5,r5,1
    20c8:	11400115 	stw	r5,4(r2)
    20cc:	000ea400 	call	ea40 <__malloc_unlock>
    20d0:	80800204 	addi	r2,r16,8
    20d4:	003fe006 	br	2058 <__alt_data_end+0xff002058>
    20d8:	9c000217 	ldw	r16,8(r19)
    20dc:	00bfff04 	movi	r2,-4
    20e0:	85800117 	ldw	r22,4(r16)
    20e4:	b0ac703a 	and	r22,r22,r2
    20e8:	b4400336 	bltu	r22,r17,20f8 <_malloc_r+0x344>
    20ec:	b445c83a 	sub	r2,r22,r17
    20f0:	00c003c4 	movi	r3,15
    20f4:	18805d16 	blt	r3,r2,226c <_malloc_r+0x4b8>
    20f8:	05c00074 	movhi	r23,1
    20fc:	00800074 	movhi	r2,1
    2100:	108f6c04 	addi	r2,r2,15792
    2104:	bdc89304 	addi	r23,r23,8780
    2108:	15400017 	ldw	r21,0(r2)
    210c:	b8c00017 	ldw	r3,0(r23)
    2110:	00bfffc4 	movi	r2,-1
    2114:	858d883a 	add	r6,r16,r22
    2118:	8d6b883a 	add	r21,r17,r21
    211c:	1880ea26 	beq	r3,r2,24c8 <_malloc_r+0x714>
    2120:	ad4403c4 	addi	r21,r21,4111
    2124:	00bc0004 	movi	r2,-4096
    2128:	a8aa703a 	and	r21,r21,r2
    212c:	a80b883a 	mov	r5,r21
    2130:	9009883a 	mov	r4,r18
    2134:	d9800015 	stw	r6,0(sp)
    2138:	00027000 	call	2700 <_sbrk_r>
    213c:	1029883a 	mov	r20,r2
    2140:	00bfffc4 	movi	r2,-1
    2144:	d9800017 	ldw	r6,0(sp)
    2148:	a080e826 	beq	r20,r2,24ec <_malloc_r+0x738>
    214c:	a180a636 	bltu	r20,r6,23e8 <_malloc_r+0x634>
    2150:	07000074 	movhi	fp,1
    2154:	e70f7a04 	addi	fp,fp,15848
    2158:	e0800017 	ldw	r2,0(fp)
    215c:	a887883a 	add	r3,r21,r2
    2160:	e0c00015 	stw	r3,0(fp)
    2164:	3500e626 	beq	r6,r20,2500 <_malloc_r+0x74c>
    2168:	b9000017 	ldw	r4,0(r23)
    216c:	00bfffc4 	movi	r2,-1
    2170:	2080ee26 	beq	r4,r2,252c <_malloc_r+0x778>
    2174:	a185c83a 	sub	r2,r20,r6
    2178:	10c5883a 	add	r2,r2,r3
    217c:	e0800015 	stw	r2,0(fp)
    2180:	a0c001cc 	andi	r3,r20,7
    2184:	1800bc26 	beq	r3,zero,2478 <_malloc_r+0x6c4>
    2188:	a0e9c83a 	sub	r20,r20,r3
    218c:	00840204 	movi	r2,4104
    2190:	a5000204 	addi	r20,r20,8
    2194:	10c7c83a 	sub	r3,r2,r3
    2198:	a545883a 	add	r2,r20,r21
    219c:	1083ffcc 	andi	r2,r2,4095
    21a0:	18abc83a 	sub	r21,r3,r2
    21a4:	a80b883a 	mov	r5,r21
    21a8:	9009883a 	mov	r4,r18
    21ac:	00027000 	call	2700 <_sbrk_r>
    21b0:	00ffffc4 	movi	r3,-1
    21b4:	10c0e126 	beq	r2,r3,253c <_malloc_r+0x788>
    21b8:	1505c83a 	sub	r2,r2,r20
    21bc:	1545883a 	add	r2,r2,r21
    21c0:	10800054 	ori	r2,r2,1
    21c4:	e0c00017 	ldw	r3,0(fp)
    21c8:	9d000215 	stw	r20,8(r19)
    21cc:	a0800115 	stw	r2,4(r20)
    21d0:	a8c7883a 	add	r3,r21,r3
    21d4:	e0c00015 	stw	r3,0(fp)
    21d8:	84c00e26 	beq	r16,r19,2214 <_malloc_r+0x460>
    21dc:	018003c4 	movi	r6,15
    21e0:	3580a72e 	bgeu	r6,r22,2480 <_malloc_r+0x6cc>
    21e4:	81400117 	ldw	r5,4(r16)
    21e8:	013ffe04 	movi	r4,-8
    21ec:	b0bffd04 	addi	r2,r22,-12
    21f0:	1104703a 	and	r2,r2,r4
    21f4:	2900004c 	andi	r4,r5,1
    21f8:	2088b03a 	or	r4,r4,r2
    21fc:	81000115 	stw	r4,4(r16)
    2200:	01400144 	movi	r5,5
    2204:	8089883a 	add	r4,r16,r2
    2208:	21400115 	stw	r5,4(r4)
    220c:	21400215 	stw	r5,8(r4)
    2210:	3080cd36 	bltu	r6,r2,2548 <_malloc_r+0x794>
    2214:	00800074 	movhi	r2,1
    2218:	108f6b04 	addi	r2,r2,15788
    221c:	11000017 	ldw	r4,0(r2)
    2220:	20c0012e 	bgeu	r4,r3,2228 <_malloc_r+0x474>
    2224:	10c00015 	stw	r3,0(r2)
    2228:	00800074 	movhi	r2,1
    222c:	108f6a04 	addi	r2,r2,15784
    2230:	11000017 	ldw	r4,0(r2)
    2234:	9c000217 	ldw	r16,8(r19)
    2238:	20c0012e 	bgeu	r4,r3,2240 <_malloc_r+0x48c>
    223c:	10c00015 	stw	r3,0(r2)
    2240:	80c00117 	ldw	r3,4(r16)
    2244:	00bfff04 	movi	r2,-4
    2248:	1886703a 	and	r3,r3,r2
    224c:	1c45c83a 	sub	r2,r3,r17
    2250:	1c400236 	bltu	r3,r17,225c <_malloc_r+0x4a8>
    2254:	00c003c4 	movi	r3,15
    2258:	18800416 	blt	r3,r2,226c <_malloc_r+0x4b8>
    225c:	9009883a 	mov	r4,r18
    2260:	000ea400 	call	ea40 <__malloc_unlock>
    2264:	0005883a 	mov	r2,zero
    2268:	003f7b06 	br	2058 <__alt_data_end+0xff002058>
    226c:	88c00054 	ori	r3,r17,1
    2270:	80c00115 	stw	r3,4(r16)
    2274:	8463883a 	add	r17,r16,r17
    2278:	10800054 	ori	r2,r2,1
    227c:	9c400215 	stw	r17,8(r19)
    2280:	88800115 	stw	r2,4(r17)
    2284:	9009883a 	mov	r4,r18
    2288:	000ea400 	call	ea40 <__malloc_unlock>
    228c:	80800204 	addi	r2,r16,8
    2290:	003f7106 	br	2058 <__alt_data_end+0xff002058>
    2294:	00c00504 	movi	r3,20
    2298:	18804a2e 	bgeu	r3,r2,23c4 <_malloc_r+0x610>
    229c:	00c01504 	movi	r3,84
    22a0:	18806e36 	bltu	r3,r2,245c <_malloc_r+0x6a8>
    22a4:	8804d33a 	srli	r2,r17,12
    22a8:	12001bc4 	addi	r8,r2,111
    22ac:	11c01b84 	addi	r7,r2,110
    22b0:	4209883a 	add	r4,r8,r8
    22b4:	003edd06 	br	1e2c <__alt_data_end+0xff001e2c>
    22b8:	3804d27a 	srli	r2,r7,9
    22bc:	00c00104 	movi	r3,4
    22c0:	1880442e 	bgeu	r3,r2,23d4 <_malloc_r+0x620>
    22c4:	00c00504 	movi	r3,20
    22c8:	18808136 	bltu	r3,r2,24d0 <_malloc_r+0x71c>
    22cc:	11401704 	addi	r5,r2,92
    22d0:	10c016c4 	addi	r3,r2,91
    22d4:	294b883a 	add	r5,r5,r5
    22d8:	294b883a 	add	r5,r5,r5
    22dc:	294b883a 	add	r5,r5,r5
    22e0:	994b883a 	add	r5,r19,r5
    22e4:	28800017 	ldw	r2,0(r5)
    22e8:	01800074 	movhi	r6,1
    22ec:	297ffe04 	addi	r5,r5,-8
    22f0:	3181e604 	addi	r6,r6,1944
    22f4:	28806526 	beq	r5,r2,248c <_malloc_r+0x6d8>
    22f8:	01bfff04 	movi	r6,-4
    22fc:	10c00117 	ldw	r3,4(r2)
    2300:	1986703a 	and	r3,r3,r6
    2304:	38c0022e 	bgeu	r7,r3,2310 <_malloc_r+0x55c>
    2308:	10800217 	ldw	r2,8(r2)
    230c:	28bffb1e 	bne	r5,r2,22fc <__alt_data_end+0xff0022fc>
    2310:	11400317 	ldw	r5,12(r2)
    2314:	98c00117 	ldw	r3,4(r19)
    2318:	81400315 	stw	r5,12(r16)
    231c:	80800215 	stw	r2,8(r16)
    2320:	2c000215 	stw	r16,8(r5)
    2324:	14000315 	stw	r16,12(r2)
    2328:	003ef806 	br	1f0c <__alt_data_end+0xff001f0c>
    232c:	88c00054 	ori	r3,r17,1
    2330:	80c00115 	stw	r3,4(r16)
    2334:	8463883a 	add	r17,r16,r17
    2338:	34400515 	stw	r17,20(r6)
    233c:	34400415 	stw	r17,16(r6)
    2340:	10c00054 	ori	r3,r2,1
    2344:	8a000315 	stw	r8,12(r17)
    2348:	8a000215 	stw	r8,8(r17)
    234c:	88c00115 	stw	r3,4(r17)
    2350:	88a3883a 	add	r17,r17,r2
    2354:	88800015 	stw	r2,0(r17)
    2358:	9009883a 	mov	r4,r18
    235c:	000ea400 	call	ea40 <__malloc_unlock>
    2360:	80800204 	addi	r2,r16,8
    2364:	003f3c06 	br	2058 <__alt_data_end+0xff002058>
    2368:	30c00117 	ldw	r3,4(r6)
    236c:	003ee706 	br	1f0c <__alt_data_end+0xff001f0c>
    2370:	5ac00044 	addi	r11,r11,1
    2374:	588000cc 	andi	r2,r11,3
    2378:	31800204 	addi	r6,r6,8
    237c:	103efd1e 	bne	r2,zero,1f74 <__alt_data_end+0xff001f74>
    2380:	00002406 	br	2414 <_malloc_r+0x660>
    2384:	14000317 	ldw	r16,12(r2)
    2388:	143f251e 	bne	r2,r16,2020 <__alt_data_end+0xff002020>
    238c:	21000084 	addi	r4,r4,2
    2390:	003ebc06 	br	1e84 <__alt_data_end+0xff001e84>
    2394:	8085883a 	add	r2,r16,r2
    2398:	10c00117 	ldw	r3,4(r2)
    239c:	81000317 	ldw	r4,12(r16)
    23a0:	81400217 	ldw	r5,8(r16)
    23a4:	18c00054 	ori	r3,r3,1
    23a8:	10c00115 	stw	r3,4(r2)
    23ac:	29000315 	stw	r4,12(r5)
    23b0:	21400215 	stw	r5,8(r4)
    23b4:	9009883a 	mov	r4,r18
    23b8:	000ea400 	call	ea40 <__malloc_unlock>
    23bc:	80800204 	addi	r2,r16,8
    23c0:	003f2506 	br	2058 <__alt_data_end+0xff002058>
    23c4:	12001704 	addi	r8,r2,92
    23c8:	11c016c4 	addi	r7,r2,91
    23cc:	4209883a 	add	r4,r8,r8
    23d0:	003e9606 	br	1e2c <__alt_data_end+0xff001e2c>
    23d4:	3804d1ba 	srli	r2,r7,6
    23d8:	11400e44 	addi	r5,r2,57
    23dc:	10c00e04 	addi	r3,r2,56
    23e0:	294b883a 	add	r5,r5,r5
    23e4:	003fbc06 	br	22d8 <__alt_data_end+0xff0022d8>
    23e8:	84ff5926 	beq	r16,r19,2150 <__alt_data_end+0xff002150>
    23ec:	00800074 	movhi	r2,1
    23f0:	1081e604 	addi	r2,r2,1944
    23f4:	14000217 	ldw	r16,8(r2)
    23f8:	00bfff04 	movi	r2,-4
    23fc:	80c00117 	ldw	r3,4(r16)
    2400:	1886703a 	and	r3,r3,r2
    2404:	003f9106 	br	224c <__alt_data_end+0xff00224c>
    2408:	60800217 	ldw	r2,8(r12)
    240c:	213fffc4 	addi	r4,r4,-1
    2410:	1300651e 	bne	r2,r12,25a8 <_malloc_r+0x7f4>
    2414:	208000cc 	andi	r2,r4,3
    2418:	633ffe04 	addi	r12,r12,-8
    241c:	103ffa1e 	bne	r2,zero,2408 <__alt_data_end+0xff002408>
    2420:	98800117 	ldw	r2,4(r19)
    2424:	0146303a 	nor	r3,zero,r5
    2428:	1884703a 	and	r2,r3,r2
    242c:	98800115 	stw	r2,4(r19)
    2430:	294b883a 	add	r5,r5,r5
    2434:	117f2836 	bltu	r2,r5,20d8 <__alt_data_end+0xff0020d8>
    2438:	283f2726 	beq	r5,zero,20d8 <__alt_data_end+0xff0020d8>
    243c:	2886703a 	and	r3,r5,r2
    2440:	5809883a 	mov	r4,r11
    2444:	183ec31e 	bne	r3,zero,1f54 <__alt_data_end+0xff001f54>
    2448:	294b883a 	add	r5,r5,r5
    244c:	2886703a 	and	r3,r5,r2
    2450:	21000104 	addi	r4,r4,4
    2454:	183ffc26 	beq	r3,zero,2448 <__alt_data_end+0xff002448>
    2458:	003ebe06 	br	1f54 <__alt_data_end+0xff001f54>
    245c:	00c05504 	movi	r3,340
    2460:	18801236 	bltu	r3,r2,24ac <_malloc_r+0x6f8>
    2464:	8804d3fa 	srli	r2,r17,15
    2468:	12001e04 	addi	r8,r2,120
    246c:	11c01dc4 	addi	r7,r2,119
    2470:	4209883a 	add	r4,r8,r8
    2474:	003e6d06 	br	1e2c <__alt_data_end+0xff001e2c>
    2478:	00c40004 	movi	r3,4096
    247c:	003f4606 	br	2198 <__alt_data_end+0xff002198>
    2480:	00800044 	movi	r2,1
    2484:	a0800115 	stw	r2,4(r20)
    2488:	003f7406 	br	225c <__alt_data_end+0xff00225c>
    248c:	1805d0ba 	srai	r2,r3,2
    2490:	01c00044 	movi	r7,1
    2494:	30c00117 	ldw	r3,4(r6)
    2498:	388e983a 	sll	r7,r7,r2
    249c:	2805883a 	mov	r2,r5
    24a0:	38c6b03a 	or	r3,r7,r3
    24a4:	30c00115 	stw	r3,4(r6)
    24a8:	003f9b06 	br	2318 <__alt_data_end+0xff002318>
    24ac:	00c15504 	movi	r3,1364
    24b0:	18801a36 	bltu	r3,r2,251c <_malloc_r+0x768>
    24b4:	8804d4ba 	srli	r2,r17,18
    24b8:	12001f44 	addi	r8,r2,125
    24bc:	11c01f04 	addi	r7,r2,124
    24c0:	4209883a 	add	r4,r8,r8
    24c4:	003e5906 	br	1e2c <__alt_data_end+0xff001e2c>
    24c8:	ad400404 	addi	r21,r21,16
    24cc:	003f1706 	br	212c <__alt_data_end+0xff00212c>
    24d0:	00c01504 	movi	r3,84
    24d4:	18802336 	bltu	r3,r2,2564 <_malloc_r+0x7b0>
    24d8:	3804d33a 	srli	r2,r7,12
    24dc:	11401bc4 	addi	r5,r2,111
    24e0:	10c01b84 	addi	r3,r2,110
    24e4:	294b883a 	add	r5,r5,r5
    24e8:	003f7b06 	br	22d8 <__alt_data_end+0xff0022d8>
    24ec:	9c000217 	ldw	r16,8(r19)
    24f0:	00bfff04 	movi	r2,-4
    24f4:	80c00117 	ldw	r3,4(r16)
    24f8:	1886703a 	and	r3,r3,r2
    24fc:	003f5306 	br	224c <__alt_data_end+0xff00224c>
    2500:	3083ffcc 	andi	r2,r6,4095
    2504:	103f181e 	bne	r2,zero,2168 <__alt_data_end+0xff002168>
    2508:	99000217 	ldw	r4,8(r19)
    250c:	b545883a 	add	r2,r22,r21
    2510:	10800054 	ori	r2,r2,1
    2514:	20800115 	stw	r2,4(r4)
    2518:	003f3e06 	br	2214 <__alt_data_end+0xff002214>
    251c:	01003f84 	movi	r4,254
    2520:	02001fc4 	movi	r8,127
    2524:	01c01f84 	movi	r7,126
    2528:	003e4006 	br	1e2c <__alt_data_end+0xff001e2c>
    252c:	00800074 	movhi	r2,1
    2530:	10889304 	addi	r2,r2,8780
    2534:	15000015 	stw	r20,0(r2)
    2538:	003f1106 	br	2180 <__alt_data_end+0xff002180>
    253c:	00800044 	movi	r2,1
    2540:	002b883a 	mov	r21,zero
    2544:	003f1f06 	br	21c4 <__alt_data_end+0xff0021c4>
    2548:	81400204 	addi	r5,r16,8
    254c:	9009883a 	mov	r4,r18
    2550:	0006c040 	call	6c04 <_free_r>
    2554:	00800074 	movhi	r2,1
    2558:	108f7a04 	addi	r2,r2,15848
    255c:	10c00017 	ldw	r3,0(r2)
    2560:	003f2c06 	br	2214 <__alt_data_end+0xff002214>
    2564:	00c05504 	movi	r3,340
    2568:	18800536 	bltu	r3,r2,2580 <_malloc_r+0x7cc>
    256c:	3804d3fa 	srli	r2,r7,15
    2570:	11401e04 	addi	r5,r2,120
    2574:	10c01dc4 	addi	r3,r2,119
    2578:	294b883a 	add	r5,r5,r5
    257c:	003f5606 	br	22d8 <__alt_data_end+0xff0022d8>
    2580:	00c15504 	movi	r3,1364
    2584:	18800536 	bltu	r3,r2,259c <_malloc_r+0x7e8>
    2588:	3804d4ba 	srli	r2,r7,18
    258c:	11401f44 	addi	r5,r2,125
    2590:	10c01f04 	addi	r3,r2,124
    2594:	294b883a 	add	r5,r5,r5
    2598:	003f4f06 	br	22d8 <__alt_data_end+0xff0022d8>
    259c:	01403f84 	movi	r5,254
    25a0:	00c01f84 	movi	r3,126
    25a4:	003f4c06 	br	22d8 <__alt_data_end+0xff0022d8>
    25a8:	98800117 	ldw	r2,4(r19)
    25ac:	003fa006 	br	2430 <__alt_data_end+0xff002430>
    25b0:	8808d0fa 	srli	r4,r17,3
    25b4:	20800044 	addi	r2,r4,1
    25b8:	1085883a 	add	r2,r2,r2
    25bc:	003e9006 	br	2000 <__alt_data_end+0xff002000>

000025c0 <_printf_r>:
    25c0:	defffd04 	addi	sp,sp,-12
    25c4:	2805883a 	mov	r2,r5
    25c8:	dfc00015 	stw	ra,0(sp)
    25cc:	d9800115 	stw	r6,4(sp)
    25d0:	d9c00215 	stw	r7,8(sp)
    25d4:	21400217 	ldw	r5,8(r4)
    25d8:	d9c00104 	addi	r7,sp,4
    25dc:	100d883a 	mov	r6,r2
    25e0:	00027ec0 	call	27ec <___vfprintf_internal_r>
    25e4:	dfc00017 	ldw	ra,0(sp)
    25e8:	dec00304 	addi	sp,sp,12
    25ec:	f800283a 	ret

000025f0 <printf>:
    25f0:	defffc04 	addi	sp,sp,-16
    25f4:	dfc00015 	stw	ra,0(sp)
    25f8:	d9400115 	stw	r5,4(sp)
    25fc:	d9800215 	stw	r6,8(sp)
    2600:	d9c00315 	stw	r7,12(sp)
    2604:	00800074 	movhi	r2,1
    2608:	10889604 	addi	r2,r2,8792
    260c:	10800017 	ldw	r2,0(r2)
    2610:	200b883a 	mov	r5,r4
    2614:	d9800104 	addi	r6,sp,4
    2618:	11000217 	ldw	r4,8(r2)
    261c:	00049e40 	call	49e4 <__vfprintf_internal>
    2620:	dfc00017 	ldw	ra,0(sp)
    2624:	dec00404 	addi	sp,sp,16
    2628:	f800283a 	ret

0000262c <_puts_r>:
    262c:	defff604 	addi	sp,sp,-40
    2630:	dc000715 	stw	r16,28(sp)
    2634:	2021883a 	mov	r16,r4
    2638:	2809883a 	mov	r4,r5
    263c:	dc400815 	stw	r17,32(sp)
    2640:	dfc00915 	stw	ra,36(sp)
    2644:	2823883a 	mov	r17,r5
    2648:	00027540 	call	2754 <strlen>
    264c:	10c00044 	addi	r3,r2,1
    2650:	d8800115 	stw	r2,4(sp)
    2654:	00800074 	movhi	r2,1
    2658:	10812c04 	addi	r2,r2,1200
    265c:	d8800215 	stw	r2,8(sp)
    2660:	00800044 	movi	r2,1
    2664:	d8800315 	stw	r2,12(sp)
    2668:	00800084 	movi	r2,2
    266c:	dc400015 	stw	r17,0(sp)
    2670:	d8c00615 	stw	r3,24(sp)
    2674:	dec00415 	stw	sp,16(sp)
    2678:	d8800515 	stw	r2,20(sp)
    267c:	80000226 	beq	r16,zero,2688 <_puts_r+0x5c>
    2680:	80800e17 	ldw	r2,56(r16)
    2684:	10001426 	beq	r2,zero,26d8 <_puts_r+0xac>
    2688:	81400217 	ldw	r5,8(r16)
    268c:	2880030b 	ldhu	r2,12(r5)
    2690:	10c8000c 	andi	r3,r2,8192
    2694:	1800061e 	bne	r3,zero,26b0 <_puts_r+0x84>
    2698:	29001917 	ldw	r4,100(r5)
    269c:	00f7ffc4 	movi	r3,-8193
    26a0:	10880014 	ori	r2,r2,8192
    26a4:	20c6703a 	and	r3,r4,r3
    26a8:	2880030d 	sth	r2,12(r5)
    26ac:	28c01915 	stw	r3,100(r5)
    26b0:	d9800404 	addi	r6,sp,16
    26b4:	8009883a 	mov	r4,r16
    26b8:	0006f140 	call	6f14 <__sfvwrite_r>
    26bc:	1000091e 	bne	r2,zero,26e4 <_puts_r+0xb8>
    26c0:	00800284 	movi	r2,10
    26c4:	dfc00917 	ldw	ra,36(sp)
    26c8:	dc400817 	ldw	r17,32(sp)
    26cc:	dc000717 	ldw	r16,28(sp)
    26d0:	dec00a04 	addi	sp,sp,40
    26d4:	f800283a 	ret
    26d8:	8009883a 	mov	r4,r16
    26dc:	0006a900 	call	6a90 <__sinit>
    26e0:	003fe906 	br	2688 <__alt_data_end+0xff002688>
    26e4:	00bfffc4 	movi	r2,-1
    26e8:	003ff606 	br	26c4 <__alt_data_end+0xff0026c4>

000026ec <puts>:
    26ec:	00800074 	movhi	r2,1
    26f0:	10889604 	addi	r2,r2,8792
    26f4:	200b883a 	mov	r5,r4
    26f8:	11000017 	ldw	r4,0(r2)
    26fc:	000262c1 	jmpi	262c <_puts_r>

00002700 <_sbrk_r>:
    2700:	defffd04 	addi	sp,sp,-12
    2704:	dc000015 	stw	r16,0(sp)
    2708:	04000074 	movhi	r16,1
    270c:	dc400115 	stw	r17,4(sp)
    2710:	840f6d04 	addi	r16,r16,15796
    2714:	2023883a 	mov	r17,r4
    2718:	2809883a 	mov	r4,r5
    271c:	dfc00215 	stw	ra,8(sp)
    2720:	80000015 	stw	zero,0(r16)
    2724:	000eb300 	call	eb30 <sbrk>
    2728:	00ffffc4 	movi	r3,-1
    272c:	10c00526 	beq	r2,r3,2744 <_sbrk_r+0x44>
    2730:	dfc00217 	ldw	ra,8(sp)
    2734:	dc400117 	ldw	r17,4(sp)
    2738:	dc000017 	ldw	r16,0(sp)
    273c:	dec00304 	addi	sp,sp,12
    2740:	f800283a 	ret
    2744:	80c00017 	ldw	r3,0(r16)
    2748:	183ff926 	beq	r3,zero,2730 <__alt_data_end+0xff002730>
    274c:	88c00015 	stw	r3,0(r17)
    2750:	003ff706 	br	2730 <__alt_data_end+0xff002730>

00002754 <strlen>:
    2754:	208000cc 	andi	r2,r4,3
    2758:	10002026 	beq	r2,zero,27dc <strlen+0x88>
    275c:	20800007 	ldb	r2,0(r4)
    2760:	10002026 	beq	r2,zero,27e4 <strlen+0x90>
    2764:	2005883a 	mov	r2,r4
    2768:	00000206 	br	2774 <strlen+0x20>
    276c:	10c00007 	ldb	r3,0(r2)
    2770:	18001826 	beq	r3,zero,27d4 <strlen+0x80>
    2774:	10800044 	addi	r2,r2,1
    2778:	10c000cc 	andi	r3,r2,3
    277c:	183ffb1e 	bne	r3,zero,276c <__alt_data_end+0xff00276c>
    2780:	10c00017 	ldw	r3,0(r2)
    2784:	01ffbff4 	movhi	r7,65279
    2788:	39ffbfc4 	addi	r7,r7,-257
    278c:	00ca303a 	nor	r5,zero,r3
    2790:	01a02074 	movhi	r6,32897
    2794:	19c7883a 	add	r3,r3,r7
    2798:	31a02004 	addi	r6,r6,-32640
    279c:	1946703a 	and	r3,r3,r5
    27a0:	1986703a 	and	r3,r3,r6
    27a4:	1800091e 	bne	r3,zero,27cc <strlen+0x78>
    27a8:	10800104 	addi	r2,r2,4
    27ac:	10c00017 	ldw	r3,0(r2)
    27b0:	19cb883a 	add	r5,r3,r7
    27b4:	00c6303a 	nor	r3,zero,r3
    27b8:	28c6703a 	and	r3,r5,r3
    27bc:	1986703a 	and	r3,r3,r6
    27c0:	183ff926 	beq	r3,zero,27a8 <__alt_data_end+0xff0027a8>
    27c4:	00000106 	br	27cc <strlen+0x78>
    27c8:	10800044 	addi	r2,r2,1
    27cc:	10c00007 	ldb	r3,0(r2)
    27d0:	183ffd1e 	bne	r3,zero,27c8 <__alt_data_end+0xff0027c8>
    27d4:	1105c83a 	sub	r2,r2,r4
    27d8:	f800283a 	ret
    27dc:	2005883a 	mov	r2,r4
    27e0:	003fe706 	br	2780 <__alt_data_end+0xff002780>
    27e4:	0005883a 	mov	r2,zero
    27e8:	f800283a 	ret

000027ec <___vfprintf_internal_r>:
    27ec:	deffb804 	addi	sp,sp,-288
    27f0:	dfc04715 	stw	ra,284(sp)
    27f4:	ddc04515 	stw	r23,276(sp)
    27f8:	dd404315 	stw	r21,268(sp)
    27fc:	d9002c15 	stw	r4,176(sp)
    2800:	282f883a 	mov	r23,r5
    2804:	302b883a 	mov	r21,r6
    2808:	d9c02d15 	stw	r7,180(sp)
    280c:	df004615 	stw	fp,280(sp)
    2810:	dd804415 	stw	r22,272(sp)
    2814:	dd004215 	stw	r20,264(sp)
    2818:	dcc04115 	stw	r19,260(sp)
    281c:	dc804015 	stw	r18,256(sp)
    2820:	dc403f15 	stw	r17,252(sp)
    2824:	dc003e15 	stw	r16,248(sp)
    2828:	00076040 	call	7604 <_localeconv_r>
    282c:	10800017 	ldw	r2,0(r2)
    2830:	1009883a 	mov	r4,r2
    2834:	d8803415 	stw	r2,208(sp)
    2838:	00027540 	call	2754 <strlen>
    283c:	d8803715 	stw	r2,220(sp)
    2840:	d8802c17 	ldw	r2,176(sp)
    2844:	10000226 	beq	r2,zero,2850 <___vfprintf_internal_r+0x64>
    2848:	10800e17 	ldw	r2,56(r2)
    284c:	1000f926 	beq	r2,zero,2c34 <___vfprintf_internal_r+0x448>
    2850:	b880030b 	ldhu	r2,12(r23)
    2854:	10c8000c 	andi	r3,r2,8192
    2858:	1800061e 	bne	r3,zero,2874 <___vfprintf_internal_r+0x88>
    285c:	b9001917 	ldw	r4,100(r23)
    2860:	00f7ffc4 	movi	r3,-8193
    2864:	10880014 	ori	r2,r2,8192
    2868:	20c6703a 	and	r3,r4,r3
    286c:	b880030d 	sth	r2,12(r23)
    2870:	b8c01915 	stw	r3,100(r23)
    2874:	10c0020c 	andi	r3,r2,8
    2878:	1800c126 	beq	r3,zero,2b80 <___vfprintf_internal_r+0x394>
    287c:	b8c00417 	ldw	r3,16(r23)
    2880:	1800bf26 	beq	r3,zero,2b80 <___vfprintf_internal_r+0x394>
    2884:	1080068c 	andi	r2,r2,26
    2888:	00c00284 	movi	r3,10
    288c:	10c0c426 	beq	r2,r3,2ba0 <___vfprintf_internal_r+0x3b4>
    2890:	d8c00404 	addi	r3,sp,16
    2894:	05000074 	movhi	r20,1
    2898:	d9001e04 	addi	r4,sp,120
    289c:	a5013d84 	addi	r20,r20,1270
    28a0:	d8c01e15 	stw	r3,120(sp)
    28a4:	d8002015 	stw	zero,128(sp)
    28a8:	d8001f15 	stw	zero,124(sp)
    28ac:	d8003315 	stw	zero,204(sp)
    28b0:	d8003615 	stw	zero,216(sp)
    28b4:	d8003815 	stw	zero,224(sp)
    28b8:	1811883a 	mov	r8,r3
    28bc:	d8003915 	stw	zero,228(sp)
    28c0:	d8003a15 	stw	zero,232(sp)
    28c4:	d8002f15 	stw	zero,188(sp)
    28c8:	d9002815 	stw	r4,160(sp)
    28cc:	a8800007 	ldb	r2,0(r21)
    28d0:	10027b26 	beq	r2,zero,32c0 <___vfprintf_internal_r+0xad4>
    28d4:	00c00944 	movi	r3,37
    28d8:	a821883a 	mov	r16,r21
    28dc:	10c0021e 	bne	r2,r3,28e8 <___vfprintf_internal_r+0xfc>
    28e0:	00001406 	br	2934 <___vfprintf_internal_r+0x148>
    28e4:	10c00326 	beq	r2,r3,28f4 <___vfprintf_internal_r+0x108>
    28e8:	84000044 	addi	r16,r16,1
    28ec:	80800007 	ldb	r2,0(r16)
    28f0:	103ffc1e 	bne	r2,zero,28e4 <__alt_data_end+0xff0028e4>
    28f4:	8563c83a 	sub	r17,r16,r21
    28f8:	88000e26 	beq	r17,zero,2934 <___vfprintf_internal_r+0x148>
    28fc:	d8c02017 	ldw	r3,128(sp)
    2900:	d8801f17 	ldw	r2,124(sp)
    2904:	45400015 	stw	r21,0(r8)
    2908:	1c47883a 	add	r3,r3,r17
    290c:	10800044 	addi	r2,r2,1
    2910:	d8c02015 	stw	r3,128(sp)
    2914:	44400115 	stw	r17,4(r8)
    2918:	d8801f15 	stw	r2,124(sp)
    291c:	00c001c4 	movi	r3,7
    2920:	1880a716 	blt	r3,r2,2bc0 <___vfprintf_internal_r+0x3d4>
    2924:	42000204 	addi	r8,r8,8
    2928:	d9402f17 	ldw	r5,188(sp)
    292c:	2c4b883a 	add	r5,r5,r17
    2930:	d9402f15 	stw	r5,188(sp)
    2934:	80800007 	ldb	r2,0(r16)
    2938:	1000a826 	beq	r2,zero,2bdc <___vfprintf_internal_r+0x3f0>
    293c:	84400047 	ldb	r17,1(r16)
    2940:	00bfffc4 	movi	r2,-1
    2944:	85400044 	addi	r21,r16,1
    2948:	d8002785 	stb	zero,158(sp)
    294c:	0007883a 	mov	r3,zero
    2950:	000f883a 	mov	r7,zero
    2954:	d8802915 	stw	r2,164(sp)
    2958:	d8003115 	stw	zero,196(sp)
    295c:	0025883a 	mov	r18,zero
    2960:	01401604 	movi	r5,88
    2964:	01800244 	movi	r6,9
    2968:	02800a84 	movi	r10,42
    296c:	02401b04 	movi	r9,108
    2970:	ad400044 	addi	r21,r21,1
    2974:	88bff804 	addi	r2,r17,-32
    2978:	28830436 	bltu	r5,r2,358c <___vfprintf_internal_r+0xda0>
    297c:	100490ba 	slli	r2,r2,2
    2980:	01000034 	movhi	r4,0
    2984:	210a6504 	addi	r4,r4,10644
    2988:	1105883a 	add	r2,r2,r4
    298c:	10800017 	ldw	r2,0(r2)
    2990:	1000683a 	jmp	r2
    2994:	000034ac 	andhi	zero,zero,210
    2998:	0000358c 	andi	zero,zero,214
    299c:	0000358c 	andi	zero,zero,214
    29a0:	000034cc 	andi	zero,zero,211
    29a4:	0000358c 	andi	zero,zero,214
    29a8:	0000358c 	andi	zero,zero,214
    29ac:	0000358c 	andi	zero,zero,214
    29b0:	0000358c 	andi	zero,zero,214
    29b4:	0000358c 	andi	zero,zero,214
    29b8:	0000358c 	andi	zero,zero,214
    29bc:	00002c40 	call	2c4 <init_camera+0xfc>
    29c0:	000033e8 	cmpgeui	zero,zero,207
    29c4:	0000358c 	andi	zero,zero,214
    29c8:	00002b08 	cmpgei	zero,zero,172
    29cc:	00002c68 	cmpgeui	zero,zero,177
    29d0:	0000358c 	andi	zero,zero,214
    29d4:	00002ca8 	cmpgeui	zero,zero,178
    29d8:	00002cb4 	movhi	zero,178
    29dc:	00002cb4 	movhi	zero,178
    29e0:	00002cb4 	movhi	zero,178
    29e4:	00002cb4 	movhi	zero,178
    29e8:	00002cb4 	movhi	zero,178
    29ec:	00002cb4 	movhi	zero,178
    29f0:	00002cb4 	movhi	zero,178
    29f4:	00002cb4 	movhi	zero,178
    29f8:	00002cb4 	movhi	zero,178
    29fc:	0000358c 	andi	zero,zero,214
    2a00:	0000358c 	andi	zero,zero,214
    2a04:	0000358c 	andi	zero,zero,214
    2a08:	0000358c 	andi	zero,zero,214
    2a0c:	0000358c 	andi	zero,zero,214
    2a10:	0000358c 	andi	zero,zero,214
    2a14:	0000358c 	andi	zero,zero,214
    2a18:	0000358c 	andi	zero,zero,214
    2a1c:	0000358c 	andi	zero,zero,214
    2a20:	0000358c 	andi	zero,zero,214
    2a24:	00002ce8 	cmpgeui	zero,zero,179
    2a28:	00002da4 	muli	zero,zero,182
    2a2c:	0000358c 	andi	zero,zero,214
    2a30:	00002da4 	muli	zero,zero,182
    2a34:	0000358c 	andi	zero,zero,214
    2a38:	0000358c 	andi	zero,zero,214
    2a3c:	0000358c 	andi	zero,zero,214
    2a40:	0000358c 	andi	zero,zero,214
    2a44:	00002e44 	movi	zero,185
    2a48:	0000358c 	andi	zero,zero,214
    2a4c:	0000358c 	andi	zero,zero,214
    2a50:	00002e50 	cmplti	zero,zero,185
    2a54:	0000358c 	andi	zero,zero,214
    2a58:	0000358c 	andi	zero,zero,214
    2a5c:	0000358c 	andi	zero,zero,214
    2a60:	0000358c 	andi	zero,zero,214
    2a64:	0000358c 	andi	zero,zero,214
    2a68:	000032c8 	cmpgei	zero,zero,203
    2a6c:	0000358c 	andi	zero,zero,214
    2a70:	0000358c 	andi	zero,zero,214
    2a74:	00003328 	cmpgeui	zero,zero,204
    2a78:	0000358c 	andi	zero,zero,214
    2a7c:	0000358c 	andi	zero,zero,214
    2a80:	0000358c 	andi	zero,zero,214
    2a84:	0000358c 	andi	zero,zero,214
    2a88:	0000358c 	andi	zero,zero,214
    2a8c:	0000358c 	andi	zero,zero,214
    2a90:	0000358c 	andi	zero,zero,214
    2a94:	0000358c 	andi	zero,zero,214
    2a98:	0000358c 	andi	zero,zero,214
    2a9c:	0000358c 	andi	zero,zero,214
    2aa0:	00003538 	rdprs	zero,zero,212
    2aa4:	000034d8 	cmpnei	zero,zero,211
    2aa8:	00002da4 	muli	zero,zero,182
    2aac:	00002da4 	muli	zero,zero,182
    2ab0:	00002da4 	muli	zero,zero,182
    2ab4:	000034e8 	cmpgeui	zero,zero,211
    2ab8:	000034d8 	cmpnei	zero,zero,211
    2abc:	0000358c 	andi	zero,zero,214
    2ac0:	0000358c 	andi	zero,zero,214
    2ac4:	000034f4 	movhi	zero,211
    2ac8:	0000358c 	andi	zero,zero,214
    2acc:	00003504 	movi	zero,212
    2ad0:	000033d8 	cmpnei	zero,zero,207
    2ad4:	00002b14 	movui	zero,172
    2ad8:	000033f8 	rdprs	zero,zero,207
    2adc:	0000358c 	andi	zero,zero,214
    2ae0:	00003404 	movi	zero,208
    2ae4:	0000358c 	andi	zero,zero,214
    2ae8:	00003460 	cmpeqi	zero,zero,209
    2aec:	0000358c 	andi	zero,zero,214
    2af0:	0000358c 	andi	zero,zero,214
    2af4:	00003470 	cmpltui	zero,zero,209
    2af8:	d9003117 	ldw	r4,196(sp)
    2afc:	d8802d15 	stw	r2,180(sp)
    2b00:	0109c83a 	sub	r4,zero,r4
    2b04:	d9003115 	stw	r4,196(sp)
    2b08:	94800114 	ori	r18,r18,4
    2b0c:	ac400007 	ldb	r17,0(r21)
    2b10:	003f9706 	br	2970 <__alt_data_end+0xff002970>
    2b14:	00800c04 	movi	r2,48
    2b18:	d9002d17 	ldw	r4,180(sp)
    2b1c:	d9402917 	ldw	r5,164(sp)
    2b20:	d8802705 	stb	r2,156(sp)
    2b24:	00801e04 	movi	r2,120
    2b28:	d8802745 	stb	r2,157(sp)
    2b2c:	d8002785 	stb	zero,158(sp)
    2b30:	20c00104 	addi	r3,r4,4
    2b34:	24c00017 	ldw	r19,0(r4)
    2b38:	002d883a 	mov	r22,zero
    2b3c:	90800094 	ori	r2,r18,2
    2b40:	28029a16 	blt	r5,zero,35ac <___vfprintf_internal_r+0xdc0>
    2b44:	00bfdfc4 	movi	r2,-129
    2b48:	90a4703a 	and	r18,r18,r2
    2b4c:	d8c02d15 	stw	r3,180(sp)
    2b50:	94800094 	ori	r18,r18,2
    2b54:	9802871e 	bne	r19,zero,3574 <___vfprintf_internal_r+0xd88>
    2b58:	00800074 	movhi	r2,1
    2b5c:	10813604 	addi	r2,r2,1240
    2b60:	d8803915 	stw	r2,228(sp)
    2b64:	04401e04 	movi	r17,120
    2b68:	d8802917 	ldw	r2,164(sp)
    2b6c:	0039883a 	mov	fp,zero
    2b70:	1001e926 	beq	r2,zero,3318 <___vfprintf_internal_r+0xb2c>
    2b74:	0027883a 	mov	r19,zero
    2b78:	002d883a 	mov	r22,zero
    2b7c:	00020506 	br	3394 <___vfprintf_internal_r+0xba8>
    2b80:	d9002c17 	ldw	r4,176(sp)
    2b84:	b80b883a 	mov	r5,r23
    2b88:	0004abc0 	call	4abc <__swsetup_r>
    2b8c:	1005ac1e 	bne	r2,zero,4240 <___vfprintf_internal_r+0x1a54>
    2b90:	b880030b 	ldhu	r2,12(r23)
    2b94:	00c00284 	movi	r3,10
    2b98:	1080068c 	andi	r2,r2,26
    2b9c:	10ff3c1e 	bne	r2,r3,2890 <__alt_data_end+0xff002890>
    2ba0:	b880038f 	ldh	r2,14(r23)
    2ba4:	103f3a16 	blt	r2,zero,2890 <__alt_data_end+0xff002890>
    2ba8:	d9c02d17 	ldw	r7,180(sp)
    2bac:	d9002c17 	ldw	r4,176(sp)
    2bb0:	a80d883a 	mov	r6,r21
    2bb4:	b80b883a 	mov	r5,r23
    2bb8:	0004a000 	call	4a00 <__sbprintf>
    2bbc:	00001106 	br	2c04 <___vfprintf_internal_r+0x418>
    2bc0:	d9002c17 	ldw	r4,176(sp)
    2bc4:	d9801e04 	addi	r6,sp,120
    2bc8:	b80b883a 	mov	r5,r23
    2bcc:	00095880 	call	9588 <__sprint_r>
    2bd0:	1000081e 	bne	r2,zero,2bf4 <___vfprintf_internal_r+0x408>
    2bd4:	da000404 	addi	r8,sp,16
    2bd8:	003f5306 	br	2928 <__alt_data_end+0xff002928>
    2bdc:	d8802017 	ldw	r2,128(sp)
    2be0:	10000426 	beq	r2,zero,2bf4 <___vfprintf_internal_r+0x408>
    2be4:	d9002c17 	ldw	r4,176(sp)
    2be8:	d9801e04 	addi	r6,sp,120
    2bec:	b80b883a 	mov	r5,r23
    2bf0:	00095880 	call	9588 <__sprint_r>
    2bf4:	b880030b 	ldhu	r2,12(r23)
    2bf8:	1080100c 	andi	r2,r2,64
    2bfc:	1005901e 	bne	r2,zero,4240 <___vfprintf_internal_r+0x1a54>
    2c00:	d8802f17 	ldw	r2,188(sp)
    2c04:	dfc04717 	ldw	ra,284(sp)
    2c08:	df004617 	ldw	fp,280(sp)
    2c0c:	ddc04517 	ldw	r23,276(sp)
    2c10:	dd804417 	ldw	r22,272(sp)
    2c14:	dd404317 	ldw	r21,268(sp)
    2c18:	dd004217 	ldw	r20,264(sp)
    2c1c:	dcc04117 	ldw	r19,260(sp)
    2c20:	dc804017 	ldw	r18,256(sp)
    2c24:	dc403f17 	ldw	r17,252(sp)
    2c28:	dc003e17 	ldw	r16,248(sp)
    2c2c:	dec04804 	addi	sp,sp,288
    2c30:	f800283a 	ret
    2c34:	d9002c17 	ldw	r4,176(sp)
    2c38:	0006a900 	call	6a90 <__sinit>
    2c3c:	003f0406 	br	2850 <__alt_data_end+0xff002850>
    2c40:	d8802d17 	ldw	r2,180(sp)
    2c44:	d9002d17 	ldw	r4,180(sp)
    2c48:	10800017 	ldw	r2,0(r2)
    2c4c:	d8803115 	stw	r2,196(sp)
    2c50:	20800104 	addi	r2,r4,4
    2c54:	d9003117 	ldw	r4,196(sp)
    2c58:	203fa716 	blt	r4,zero,2af8 <__alt_data_end+0xff002af8>
    2c5c:	d8802d15 	stw	r2,180(sp)
    2c60:	ac400007 	ldb	r17,0(r21)
    2c64:	003f4206 	br	2970 <__alt_data_end+0xff002970>
    2c68:	ac400007 	ldb	r17,0(r21)
    2c6c:	aac00044 	addi	r11,r21,1
    2c70:	8a872826 	beq	r17,r10,4914 <___vfprintf_internal_r+0x2128>
    2c74:	88bff404 	addi	r2,r17,-48
    2c78:	0009883a 	mov	r4,zero
    2c7c:	30867d36 	bltu	r6,r2,4674 <___vfprintf_internal_r+0x1e88>
    2c80:	5c400007 	ldb	r17,0(r11)
    2c84:	210002a4 	muli	r4,r4,10
    2c88:	5d400044 	addi	r21,r11,1
    2c8c:	a817883a 	mov	r11,r21
    2c90:	2089883a 	add	r4,r4,r2
    2c94:	88bff404 	addi	r2,r17,-48
    2c98:	30bff92e 	bgeu	r6,r2,2c80 <__alt_data_end+0xff002c80>
    2c9c:	2005c916 	blt	r4,zero,43c4 <___vfprintf_internal_r+0x1bd8>
    2ca0:	d9002915 	stw	r4,164(sp)
    2ca4:	003f3306 	br	2974 <__alt_data_end+0xff002974>
    2ca8:	94802014 	ori	r18,r18,128
    2cac:	ac400007 	ldb	r17,0(r21)
    2cb0:	003f2f06 	br	2970 <__alt_data_end+0xff002970>
    2cb4:	a809883a 	mov	r4,r21
    2cb8:	d8003115 	stw	zero,196(sp)
    2cbc:	88bff404 	addi	r2,r17,-48
    2cc0:	0017883a 	mov	r11,zero
    2cc4:	24400007 	ldb	r17,0(r4)
    2cc8:	5ac002a4 	muli	r11,r11,10
    2ccc:	ad400044 	addi	r21,r21,1
    2cd0:	a809883a 	mov	r4,r21
    2cd4:	12d7883a 	add	r11,r2,r11
    2cd8:	88bff404 	addi	r2,r17,-48
    2cdc:	30bff92e 	bgeu	r6,r2,2cc4 <__alt_data_end+0xff002cc4>
    2ce0:	dac03115 	stw	r11,196(sp)
    2ce4:	003f2306 	br	2974 <__alt_data_end+0xff002974>
    2ce8:	18c03fcc 	andi	r3,r3,255
    2cec:	18072b1e 	bne	r3,zero,499c <___vfprintf_internal_r+0x21b0>
    2cf0:	94800414 	ori	r18,r18,16
    2cf4:	9080080c 	andi	r2,r18,32
    2cf8:	10037b26 	beq	r2,zero,3ae8 <___vfprintf_internal_r+0x12fc>
    2cfc:	d9402d17 	ldw	r5,180(sp)
    2d00:	28800117 	ldw	r2,4(r5)
    2d04:	2cc00017 	ldw	r19,0(r5)
    2d08:	29400204 	addi	r5,r5,8
    2d0c:	d9402d15 	stw	r5,180(sp)
    2d10:	102d883a 	mov	r22,r2
    2d14:	10044b16 	blt	r2,zero,3e44 <___vfprintf_internal_r+0x1658>
    2d18:	d9402917 	ldw	r5,164(sp)
    2d1c:	df002783 	ldbu	fp,158(sp)
    2d20:	2803bc16 	blt	r5,zero,3c14 <___vfprintf_internal_r+0x1428>
    2d24:	00ffdfc4 	movi	r3,-129
    2d28:	9d84b03a 	or	r2,r19,r22
    2d2c:	90e4703a 	and	r18,r18,r3
    2d30:	10017726 	beq	r2,zero,3310 <___vfprintf_internal_r+0xb24>
    2d34:	b0038326 	beq	r22,zero,3b44 <___vfprintf_internal_r+0x1358>
    2d38:	dc402a15 	stw	r17,168(sp)
    2d3c:	dc001e04 	addi	r16,sp,120
    2d40:	b023883a 	mov	r17,r22
    2d44:	402d883a 	mov	r22,r8
    2d48:	9809883a 	mov	r4,r19
    2d4c:	880b883a 	mov	r5,r17
    2d50:	01800284 	movi	r6,10
    2d54:	000f883a 	mov	r7,zero
    2d58:	000b9800 	call	b980 <__umoddi3>
    2d5c:	10800c04 	addi	r2,r2,48
    2d60:	843fffc4 	addi	r16,r16,-1
    2d64:	9809883a 	mov	r4,r19
    2d68:	880b883a 	mov	r5,r17
    2d6c:	80800005 	stb	r2,0(r16)
    2d70:	01800284 	movi	r6,10
    2d74:	000f883a 	mov	r7,zero
    2d78:	000b4080 	call	b408 <__udivdi3>
    2d7c:	1027883a 	mov	r19,r2
    2d80:	10c4b03a 	or	r2,r2,r3
    2d84:	1823883a 	mov	r17,r3
    2d88:	103fef1e 	bne	r2,zero,2d48 <__alt_data_end+0xff002d48>
    2d8c:	d8c02817 	ldw	r3,160(sp)
    2d90:	dc402a17 	ldw	r17,168(sp)
    2d94:	b011883a 	mov	r8,r22
    2d98:	1c07c83a 	sub	r3,r3,r16
    2d9c:	d8c02e15 	stw	r3,184(sp)
    2da0:	00005906 	br	2f08 <___vfprintf_internal_r+0x71c>
    2da4:	18c03fcc 	andi	r3,r3,255
    2da8:	1806fa1e 	bne	r3,zero,4994 <___vfprintf_internal_r+0x21a8>
    2dac:	9080020c 	andi	r2,r18,8
    2db0:	10048a26 	beq	r2,zero,3fdc <___vfprintf_internal_r+0x17f0>
    2db4:	d8c02d17 	ldw	r3,180(sp)
    2db8:	d9002d17 	ldw	r4,180(sp)
    2dbc:	d9402d17 	ldw	r5,180(sp)
    2dc0:	18c00017 	ldw	r3,0(r3)
    2dc4:	21000117 	ldw	r4,4(r4)
    2dc8:	29400204 	addi	r5,r5,8
    2dcc:	d8c03615 	stw	r3,216(sp)
    2dd0:	d9003815 	stw	r4,224(sp)
    2dd4:	d9402d15 	stw	r5,180(sp)
    2dd8:	d9003617 	ldw	r4,216(sp)
    2ddc:	d9403817 	ldw	r5,224(sp)
    2de0:	da003d15 	stw	r8,244(sp)
    2de4:	04000044 	movi	r16,1
    2de8:	00092000 	call	9200 <__fpclassifyd>
    2dec:	da003d17 	ldw	r8,244(sp)
    2df0:	14041f1e 	bne	r2,r16,3e70 <___vfprintf_internal_r+0x1684>
    2df4:	d9003617 	ldw	r4,216(sp)
    2df8:	d9403817 	ldw	r5,224(sp)
    2dfc:	000d883a 	mov	r6,zero
    2e00:	000f883a 	mov	r7,zero
    2e04:	000d3640 	call	d364 <__ledf2>
    2e08:	da003d17 	ldw	r8,244(sp)
    2e0c:	1005be16 	blt	r2,zero,4508 <___vfprintf_internal_r+0x1d1c>
    2e10:	df002783 	ldbu	fp,158(sp)
    2e14:	008011c4 	movi	r2,71
    2e18:	1445330e 	bge	r2,r17,42e8 <___vfprintf_internal_r+0x1afc>
    2e1c:	04000074 	movhi	r16,1
    2e20:	84012e04 	addi	r16,r16,1208
    2e24:	00c000c4 	movi	r3,3
    2e28:	00bfdfc4 	movi	r2,-129
    2e2c:	d8c02a15 	stw	r3,168(sp)
    2e30:	90a4703a 	and	r18,r18,r2
    2e34:	d8c02e15 	stw	r3,184(sp)
    2e38:	d8002915 	stw	zero,164(sp)
    2e3c:	d8003215 	stw	zero,200(sp)
    2e40:	00003706 	br	2f20 <___vfprintf_internal_r+0x734>
    2e44:	94800214 	ori	r18,r18,8
    2e48:	ac400007 	ldb	r17,0(r21)
    2e4c:	003ec806 	br	2970 <__alt_data_end+0xff002970>
    2e50:	18c03fcc 	andi	r3,r3,255
    2e54:	1806db1e 	bne	r3,zero,49c4 <___vfprintf_internal_r+0x21d8>
    2e58:	94800414 	ori	r18,r18,16
    2e5c:	9080080c 	andi	r2,r18,32
    2e60:	1002d826 	beq	r2,zero,39c4 <___vfprintf_internal_r+0x11d8>
    2e64:	d9402d17 	ldw	r5,180(sp)
    2e68:	d8c02917 	ldw	r3,164(sp)
    2e6c:	d8002785 	stb	zero,158(sp)
    2e70:	28800204 	addi	r2,r5,8
    2e74:	2cc00017 	ldw	r19,0(r5)
    2e78:	2d800117 	ldw	r22,4(r5)
    2e7c:	18048f16 	blt	r3,zero,40bc <___vfprintf_internal_r+0x18d0>
    2e80:	013fdfc4 	movi	r4,-129
    2e84:	9d86b03a 	or	r3,r19,r22
    2e88:	d8802d15 	stw	r2,180(sp)
    2e8c:	9124703a 	and	r18,r18,r4
    2e90:	1802d91e 	bne	r3,zero,39f8 <___vfprintf_internal_r+0x120c>
    2e94:	d8c02917 	ldw	r3,164(sp)
    2e98:	0039883a 	mov	fp,zero
    2e9c:	1805c326 	beq	r3,zero,45ac <___vfprintf_internal_r+0x1dc0>
    2ea0:	0027883a 	mov	r19,zero
    2ea4:	002d883a 	mov	r22,zero
    2ea8:	dc001e04 	addi	r16,sp,120
    2eac:	9806d0fa 	srli	r3,r19,3
    2eb0:	b008977a 	slli	r4,r22,29
    2eb4:	b02cd0fa 	srli	r22,r22,3
    2eb8:	9cc001cc 	andi	r19,r19,7
    2ebc:	98800c04 	addi	r2,r19,48
    2ec0:	843fffc4 	addi	r16,r16,-1
    2ec4:	20e6b03a 	or	r19,r4,r3
    2ec8:	80800005 	stb	r2,0(r16)
    2ecc:	9d86b03a 	or	r3,r19,r22
    2ed0:	183ff61e 	bne	r3,zero,2eac <__alt_data_end+0xff002eac>
    2ed4:	90c0004c 	andi	r3,r18,1
    2ed8:	18013b26 	beq	r3,zero,33c8 <___vfprintf_internal_r+0xbdc>
    2edc:	10803fcc 	andi	r2,r2,255
    2ee0:	1080201c 	xori	r2,r2,128
    2ee4:	10bfe004 	addi	r2,r2,-128
    2ee8:	00c00c04 	movi	r3,48
    2eec:	10c13626 	beq	r2,r3,33c8 <___vfprintf_internal_r+0xbdc>
    2ef0:	80ffffc5 	stb	r3,-1(r16)
    2ef4:	d8c02817 	ldw	r3,160(sp)
    2ef8:	80bfffc4 	addi	r2,r16,-1
    2efc:	1021883a 	mov	r16,r2
    2f00:	1887c83a 	sub	r3,r3,r2
    2f04:	d8c02e15 	stw	r3,184(sp)
    2f08:	d8802e17 	ldw	r2,184(sp)
    2f0c:	d9002917 	ldw	r4,164(sp)
    2f10:	1100010e 	bge	r2,r4,2f18 <___vfprintf_internal_r+0x72c>
    2f14:	2005883a 	mov	r2,r4
    2f18:	d8802a15 	stw	r2,168(sp)
    2f1c:	d8003215 	stw	zero,200(sp)
    2f20:	e7003fcc 	andi	fp,fp,255
    2f24:	e700201c 	xori	fp,fp,128
    2f28:	e73fe004 	addi	fp,fp,-128
    2f2c:	e0000326 	beq	fp,zero,2f3c <___vfprintf_internal_r+0x750>
    2f30:	d8c02a17 	ldw	r3,168(sp)
    2f34:	18c00044 	addi	r3,r3,1
    2f38:	d8c02a15 	stw	r3,168(sp)
    2f3c:	90c0008c 	andi	r3,r18,2
    2f40:	d8c02b15 	stw	r3,172(sp)
    2f44:	18000326 	beq	r3,zero,2f54 <___vfprintf_internal_r+0x768>
    2f48:	d8c02a17 	ldw	r3,168(sp)
    2f4c:	18c00084 	addi	r3,r3,2
    2f50:	d8c02a15 	stw	r3,168(sp)
    2f54:	90c0210c 	andi	r3,r18,132
    2f58:	d8c03015 	stw	r3,192(sp)
    2f5c:	1801a31e 	bne	r3,zero,35ec <___vfprintf_internal_r+0xe00>
    2f60:	d9003117 	ldw	r4,196(sp)
    2f64:	d8c02a17 	ldw	r3,168(sp)
    2f68:	20e7c83a 	sub	r19,r4,r3
    2f6c:	04c19f0e 	bge	zero,r19,35ec <___vfprintf_internal_r+0xe00>
    2f70:	02400404 	movi	r9,16
    2f74:	d8c02017 	ldw	r3,128(sp)
    2f78:	d8801f17 	ldw	r2,124(sp)
    2f7c:	4cc50d0e 	bge	r9,r19,43b4 <___vfprintf_internal_r+0x1bc8>
    2f80:	01400074 	movhi	r5,1
    2f84:	29414184 	addi	r5,r5,1286
    2f88:	dc403b15 	stw	r17,236(sp)
    2f8c:	d9403515 	stw	r5,212(sp)
    2f90:	9823883a 	mov	r17,r19
    2f94:	482d883a 	mov	r22,r9
    2f98:	9027883a 	mov	r19,r18
    2f9c:	070001c4 	movi	fp,7
    2fa0:	8025883a 	mov	r18,r16
    2fa4:	dc002c17 	ldw	r16,176(sp)
    2fa8:	00000306 	br	2fb8 <___vfprintf_internal_r+0x7cc>
    2fac:	8c7ffc04 	addi	r17,r17,-16
    2fb0:	42000204 	addi	r8,r8,8
    2fb4:	b440130e 	bge	r22,r17,3004 <___vfprintf_internal_r+0x818>
    2fb8:	01000074 	movhi	r4,1
    2fbc:	18c00404 	addi	r3,r3,16
    2fc0:	10800044 	addi	r2,r2,1
    2fc4:	21014184 	addi	r4,r4,1286
    2fc8:	41000015 	stw	r4,0(r8)
    2fcc:	45800115 	stw	r22,4(r8)
    2fd0:	d8c02015 	stw	r3,128(sp)
    2fd4:	d8801f15 	stw	r2,124(sp)
    2fd8:	e0bff40e 	bge	fp,r2,2fac <__alt_data_end+0xff002fac>
    2fdc:	d9801e04 	addi	r6,sp,120
    2fe0:	b80b883a 	mov	r5,r23
    2fe4:	8009883a 	mov	r4,r16
    2fe8:	00095880 	call	9588 <__sprint_r>
    2fec:	103f011e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    2ff0:	8c7ffc04 	addi	r17,r17,-16
    2ff4:	d8c02017 	ldw	r3,128(sp)
    2ff8:	d8801f17 	ldw	r2,124(sp)
    2ffc:	da000404 	addi	r8,sp,16
    3000:	b47fed16 	blt	r22,r17,2fb8 <__alt_data_end+0xff002fb8>
    3004:	9021883a 	mov	r16,r18
    3008:	9825883a 	mov	r18,r19
    300c:	8827883a 	mov	r19,r17
    3010:	dc403b17 	ldw	r17,236(sp)
    3014:	d9403517 	ldw	r5,212(sp)
    3018:	98c7883a 	add	r3,r19,r3
    301c:	10800044 	addi	r2,r2,1
    3020:	41400015 	stw	r5,0(r8)
    3024:	44c00115 	stw	r19,4(r8)
    3028:	d8c02015 	stw	r3,128(sp)
    302c:	d8801f15 	stw	r2,124(sp)
    3030:	010001c4 	movi	r4,7
    3034:	2082a316 	blt	r4,r2,3ac4 <___vfprintf_internal_r+0x12d8>
    3038:	df002787 	ldb	fp,158(sp)
    303c:	42000204 	addi	r8,r8,8
    3040:	e0000c26 	beq	fp,zero,3074 <___vfprintf_internal_r+0x888>
    3044:	d8801f17 	ldw	r2,124(sp)
    3048:	d9002784 	addi	r4,sp,158
    304c:	18c00044 	addi	r3,r3,1
    3050:	10800044 	addi	r2,r2,1
    3054:	41000015 	stw	r4,0(r8)
    3058:	01000044 	movi	r4,1
    305c:	41000115 	stw	r4,4(r8)
    3060:	d8c02015 	stw	r3,128(sp)
    3064:	d8801f15 	stw	r2,124(sp)
    3068:	010001c4 	movi	r4,7
    306c:	20823c16 	blt	r4,r2,3960 <___vfprintf_internal_r+0x1174>
    3070:	42000204 	addi	r8,r8,8
    3074:	d8802b17 	ldw	r2,172(sp)
    3078:	10000c26 	beq	r2,zero,30ac <___vfprintf_internal_r+0x8c0>
    307c:	d8801f17 	ldw	r2,124(sp)
    3080:	d9002704 	addi	r4,sp,156
    3084:	18c00084 	addi	r3,r3,2
    3088:	10800044 	addi	r2,r2,1
    308c:	41000015 	stw	r4,0(r8)
    3090:	01000084 	movi	r4,2
    3094:	41000115 	stw	r4,4(r8)
    3098:	d8c02015 	stw	r3,128(sp)
    309c:	d8801f15 	stw	r2,124(sp)
    30a0:	010001c4 	movi	r4,7
    30a4:	20823616 	blt	r4,r2,3980 <___vfprintf_internal_r+0x1194>
    30a8:	42000204 	addi	r8,r8,8
    30ac:	d9003017 	ldw	r4,192(sp)
    30b0:	00802004 	movi	r2,128
    30b4:	20819926 	beq	r4,r2,371c <___vfprintf_internal_r+0xf30>
    30b8:	d9402917 	ldw	r5,164(sp)
    30bc:	d8802e17 	ldw	r2,184(sp)
    30c0:	28adc83a 	sub	r22,r5,r2
    30c4:	0580310e 	bge	zero,r22,318c <___vfprintf_internal_r+0x9a0>
    30c8:	07000404 	movi	fp,16
    30cc:	d8801f17 	ldw	r2,124(sp)
    30d0:	e584140e 	bge	fp,r22,4124 <___vfprintf_internal_r+0x1938>
    30d4:	01400074 	movhi	r5,1
    30d8:	29413d84 	addi	r5,r5,1270
    30dc:	dc402915 	stw	r17,164(sp)
    30e0:	d9402b15 	stw	r5,172(sp)
    30e4:	b023883a 	mov	r17,r22
    30e8:	04c001c4 	movi	r19,7
    30ec:	a82d883a 	mov	r22,r21
    30f0:	902b883a 	mov	r21,r18
    30f4:	8025883a 	mov	r18,r16
    30f8:	dc002c17 	ldw	r16,176(sp)
    30fc:	00000306 	br	310c <___vfprintf_internal_r+0x920>
    3100:	8c7ffc04 	addi	r17,r17,-16
    3104:	42000204 	addi	r8,r8,8
    3108:	e440110e 	bge	fp,r17,3150 <___vfprintf_internal_r+0x964>
    310c:	18c00404 	addi	r3,r3,16
    3110:	10800044 	addi	r2,r2,1
    3114:	45000015 	stw	r20,0(r8)
    3118:	47000115 	stw	fp,4(r8)
    311c:	d8c02015 	stw	r3,128(sp)
    3120:	d8801f15 	stw	r2,124(sp)
    3124:	98bff60e 	bge	r19,r2,3100 <__alt_data_end+0xff003100>
    3128:	d9801e04 	addi	r6,sp,120
    312c:	b80b883a 	mov	r5,r23
    3130:	8009883a 	mov	r4,r16
    3134:	00095880 	call	9588 <__sprint_r>
    3138:	103eae1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    313c:	8c7ffc04 	addi	r17,r17,-16
    3140:	d8c02017 	ldw	r3,128(sp)
    3144:	d8801f17 	ldw	r2,124(sp)
    3148:	da000404 	addi	r8,sp,16
    314c:	e47fef16 	blt	fp,r17,310c <__alt_data_end+0xff00310c>
    3150:	9021883a 	mov	r16,r18
    3154:	a825883a 	mov	r18,r21
    3158:	b02b883a 	mov	r21,r22
    315c:	882d883a 	mov	r22,r17
    3160:	dc402917 	ldw	r17,164(sp)
    3164:	d9002b17 	ldw	r4,172(sp)
    3168:	1d87883a 	add	r3,r3,r22
    316c:	10800044 	addi	r2,r2,1
    3170:	41000015 	stw	r4,0(r8)
    3174:	45800115 	stw	r22,4(r8)
    3178:	d8c02015 	stw	r3,128(sp)
    317c:	d8801f15 	stw	r2,124(sp)
    3180:	010001c4 	movi	r4,7
    3184:	2081ee16 	blt	r4,r2,3940 <___vfprintf_internal_r+0x1154>
    3188:	42000204 	addi	r8,r8,8
    318c:	9080400c 	andi	r2,r18,256
    3190:	1001181e 	bne	r2,zero,35f4 <___vfprintf_internal_r+0xe08>
    3194:	d9402e17 	ldw	r5,184(sp)
    3198:	d8801f17 	ldw	r2,124(sp)
    319c:	44000015 	stw	r16,0(r8)
    31a0:	1947883a 	add	r3,r3,r5
    31a4:	10800044 	addi	r2,r2,1
    31a8:	41400115 	stw	r5,4(r8)
    31ac:	d8c02015 	stw	r3,128(sp)
    31b0:	d8801f15 	stw	r2,124(sp)
    31b4:	010001c4 	movi	r4,7
    31b8:	2081d316 	blt	r4,r2,3908 <___vfprintf_internal_r+0x111c>
    31bc:	42000204 	addi	r8,r8,8
    31c0:	9480010c 	andi	r18,r18,4
    31c4:	90003226 	beq	r18,zero,3290 <___vfprintf_internal_r+0xaa4>
    31c8:	d9403117 	ldw	r5,196(sp)
    31cc:	d8802a17 	ldw	r2,168(sp)
    31d0:	28a1c83a 	sub	r16,r5,r2
    31d4:	04002e0e 	bge	zero,r16,3290 <___vfprintf_internal_r+0xaa4>
    31d8:	04400404 	movi	r17,16
    31dc:	d8801f17 	ldw	r2,124(sp)
    31e0:	8c04a20e 	bge	r17,r16,446c <___vfprintf_internal_r+0x1c80>
    31e4:	01400074 	movhi	r5,1
    31e8:	29414184 	addi	r5,r5,1286
    31ec:	d9403515 	stw	r5,212(sp)
    31f0:	048001c4 	movi	r18,7
    31f4:	dcc02c17 	ldw	r19,176(sp)
    31f8:	00000306 	br	3208 <___vfprintf_internal_r+0xa1c>
    31fc:	843ffc04 	addi	r16,r16,-16
    3200:	42000204 	addi	r8,r8,8
    3204:	8c00130e 	bge	r17,r16,3254 <___vfprintf_internal_r+0xa68>
    3208:	01000074 	movhi	r4,1
    320c:	18c00404 	addi	r3,r3,16
    3210:	10800044 	addi	r2,r2,1
    3214:	21014184 	addi	r4,r4,1286
    3218:	41000015 	stw	r4,0(r8)
    321c:	44400115 	stw	r17,4(r8)
    3220:	d8c02015 	stw	r3,128(sp)
    3224:	d8801f15 	stw	r2,124(sp)
    3228:	90bff40e 	bge	r18,r2,31fc <__alt_data_end+0xff0031fc>
    322c:	d9801e04 	addi	r6,sp,120
    3230:	b80b883a 	mov	r5,r23
    3234:	9809883a 	mov	r4,r19
    3238:	00095880 	call	9588 <__sprint_r>
    323c:	103e6d1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3240:	843ffc04 	addi	r16,r16,-16
    3244:	d8c02017 	ldw	r3,128(sp)
    3248:	d8801f17 	ldw	r2,124(sp)
    324c:	da000404 	addi	r8,sp,16
    3250:	8c3fed16 	blt	r17,r16,3208 <__alt_data_end+0xff003208>
    3254:	d9403517 	ldw	r5,212(sp)
    3258:	1c07883a 	add	r3,r3,r16
    325c:	10800044 	addi	r2,r2,1
    3260:	41400015 	stw	r5,0(r8)
    3264:	44000115 	stw	r16,4(r8)
    3268:	d8c02015 	stw	r3,128(sp)
    326c:	d8801f15 	stw	r2,124(sp)
    3270:	010001c4 	movi	r4,7
    3274:	2080060e 	bge	r4,r2,3290 <___vfprintf_internal_r+0xaa4>
    3278:	d9002c17 	ldw	r4,176(sp)
    327c:	d9801e04 	addi	r6,sp,120
    3280:	b80b883a 	mov	r5,r23
    3284:	00095880 	call	9588 <__sprint_r>
    3288:	103e5a1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    328c:	d8c02017 	ldw	r3,128(sp)
    3290:	d8803117 	ldw	r2,196(sp)
    3294:	d9002a17 	ldw	r4,168(sp)
    3298:	1100010e 	bge	r2,r4,32a0 <___vfprintf_internal_r+0xab4>
    329c:	2005883a 	mov	r2,r4
    32a0:	d9402f17 	ldw	r5,188(sp)
    32a4:	288b883a 	add	r5,r5,r2
    32a8:	d9402f15 	stw	r5,188(sp)
    32ac:	18019e1e 	bne	r3,zero,3928 <___vfprintf_internal_r+0x113c>
    32b0:	a8800007 	ldb	r2,0(r21)
    32b4:	d8001f15 	stw	zero,124(sp)
    32b8:	da000404 	addi	r8,sp,16
    32bc:	103d851e 	bne	r2,zero,28d4 <__alt_data_end+0xff0028d4>
    32c0:	a821883a 	mov	r16,r21
    32c4:	003d9b06 	br	2934 <__alt_data_end+0xff002934>
    32c8:	18c03fcc 	andi	r3,r3,255
    32cc:	1805c11e 	bne	r3,zero,49d4 <___vfprintf_internal_r+0x21e8>
    32d0:	94800414 	ori	r18,r18,16
    32d4:	9080080c 	andi	r2,r18,32
    32d8:	10020c26 	beq	r2,zero,3b0c <___vfprintf_internal_r+0x1320>
    32dc:	d8802d17 	ldw	r2,180(sp)
    32e0:	d9002917 	ldw	r4,164(sp)
    32e4:	d8002785 	stb	zero,158(sp)
    32e8:	10c00204 	addi	r3,r2,8
    32ec:	14c00017 	ldw	r19,0(r2)
    32f0:	15800117 	ldw	r22,4(r2)
    32f4:	20040f16 	blt	r4,zero,4334 <___vfprintf_internal_r+0x1b48>
    32f8:	013fdfc4 	movi	r4,-129
    32fc:	9d84b03a 	or	r2,r19,r22
    3300:	d8c02d15 	stw	r3,180(sp)
    3304:	9124703a 	and	r18,r18,r4
    3308:	0039883a 	mov	fp,zero
    330c:	103e891e 	bne	r2,zero,2d34 <__alt_data_end+0xff002d34>
    3310:	d9002917 	ldw	r4,164(sp)
    3314:	2002c11e 	bne	r4,zero,3e1c <___vfprintf_internal_r+0x1630>
    3318:	d8002915 	stw	zero,164(sp)
    331c:	d8002e15 	stw	zero,184(sp)
    3320:	dc001e04 	addi	r16,sp,120
    3324:	003ef806 	br	2f08 <__alt_data_end+0xff002f08>
    3328:	18c03fcc 	andi	r3,r3,255
    332c:	18059d1e 	bne	r3,zero,49a4 <___vfprintf_internal_r+0x21b8>
    3330:	01400074 	movhi	r5,1
    3334:	29413104 	addi	r5,r5,1220
    3338:	d9403915 	stw	r5,228(sp)
    333c:	9080080c 	andi	r2,r18,32
    3340:	10005226 	beq	r2,zero,348c <___vfprintf_internal_r+0xca0>
    3344:	d8802d17 	ldw	r2,180(sp)
    3348:	14c00017 	ldw	r19,0(r2)
    334c:	15800117 	ldw	r22,4(r2)
    3350:	10800204 	addi	r2,r2,8
    3354:	d8802d15 	stw	r2,180(sp)
    3358:	9080004c 	andi	r2,r18,1
    335c:	10019026 	beq	r2,zero,39a0 <___vfprintf_internal_r+0x11b4>
    3360:	9d84b03a 	or	r2,r19,r22
    3364:	10036926 	beq	r2,zero,410c <___vfprintf_internal_r+0x1920>
    3368:	d8c02917 	ldw	r3,164(sp)
    336c:	00800c04 	movi	r2,48
    3370:	d8802705 	stb	r2,156(sp)
    3374:	dc402745 	stb	r17,157(sp)
    3378:	d8002785 	stb	zero,158(sp)
    337c:	90800094 	ori	r2,r18,2
    3380:	18045d16 	blt	r3,zero,44f8 <___vfprintf_internal_r+0x1d0c>
    3384:	00bfdfc4 	movi	r2,-129
    3388:	90a4703a 	and	r18,r18,r2
    338c:	94800094 	ori	r18,r18,2
    3390:	0039883a 	mov	fp,zero
    3394:	d9003917 	ldw	r4,228(sp)
    3398:	dc001e04 	addi	r16,sp,120
    339c:	988003cc 	andi	r2,r19,15
    33a0:	b006973a 	slli	r3,r22,28
    33a4:	2085883a 	add	r2,r4,r2
    33a8:	9826d13a 	srli	r19,r19,4
    33ac:	10800003 	ldbu	r2,0(r2)
    33b0:	b02cd13a 	srli	r22,r22,4
    33b4:	843fffc4 	addi	r16,r16,-1
    33b8:	1ce6b03a 	or	r19,r3,r19
    33bc:	80800005 	stb	r2,0(r16)
    33c0:	9d84b03a 	or	r2,r19,r22
    33c4:	103ff51e 	bne	r2,zero,339c <__alt_data_end+0xff00339c>
    33c8:	d8c02817 	ldw	r3,160(sp)
    33cc:	1c07c83a 	sub	r3,r3,r16
    33d0:	d8c02e15 	stw	r3,184(sp)
    33d4:	003ecc06 	br	2f08 <__alt_data_end+0xff002f08>
    33d8:	18c03fcc 	andi	r3,r3,255
    33dc:	183e9f26 	beq	r3,zero,2e5c <__alt_data_end+0xff002e5c>
    33e0:	d9c02785 	stb	r7,158(sp)
    33e4:	003e9d06 	br	2e5c <__alt_data_end+0xff002e5c>
    33e8:	00c00044 	movi	r3,1
    33ec:	01c00ac4 	movi	r7,43
    33f0:	ac400007 	ldb	r17,0(r21)
    33f4:	003d5e06 	br	2970 <__alt_data_end+0xff002970>
    33f8:	94800814 	ori	r18,r18,32
    33fc:	ac400007 	ldb	r17,0(r21)
    3400:	003d5b06 	br	2970 <__alt_data_end+0xff002970>
    3404:	d8c02d17 	ldw	r3,180(sp)
    3408:	d8002785 	stb	zero,158(sp)
    340c:	1c000017 	ldw	r16,0(r3)
    3410:	1cc00104 	addi	r19,r3,4
    3414:	80041926 	beq	r16,zero,447c <___vfprintf_internal_r+0x1c90>
    3418:	d9002917 	ldw	r4,164(sp)
    341c:	2003d016 	blt	r4,zero,4360 <___vfprintf_internal_r+0x1b74>
    3420:	200d883a 	mov	r6,r4
    3424:	000b883a 	mov	r5,zero
    3428:	8009883a 	mov	r4,r16
    342c:	da003d15 	stw	r8,244(sp)
    3430:	00077f00 	call	77f0 <memchr>
    3434:	da003d17 	ldw	r8,244(sp)
    3438:	10045426 	beq	r2,zero,458c <___vfprintf_internal_r+0x1da0>
    343c:	1405c83a 	sub	r2,r2,r16
    3440:	d8802e15 	stw	r2,184(sp)
    3444:	1003cc16 	blt	r2,zero,4378 <___vfprintf_internal_r+0x1b8c>
    3448:	df002783 	ldbu	fp,158(sp)
    344c:	d8802a15 	stw	r2,168(sp)
    3450:	dcc02d15 	stw	r19,180(sp)
    3454:	d8002915 	stw	zero,164(sp)
    3458:	d8003215 	stw	zero,200(sp)
    345c:	003eb006 	br	2f20 <__alt_data_end+0xff002f20>
    3460:	18c03fcc 	andi	r3,r3,255
    3464:	183f9b26 	beq	r3,zero,32d4 <__alt_data_end+0xff0032d4>
    3468:	d9c02785 	stb	r7,158(sp)
    346c:	003f9906 	br	32d4 <__alt_data_end+0xff0032d4>
    3470:	18c03fcc 	andi	r3,r3,255
    3474:	1805551e 	bne	r3,zero,49cc <___vfprintf_internal_r+0x21e0>
    3478:	01400074 	movhi	r5,1
    347c:	29413604 	addi	r5,r5,1240
    3480:	d9403915 	stw	r5,228(sp)
    3484:	9080080c 	andi	r2,r18,32
    3488:	103fae1e 	bne	r2,zero,3344 <__alt_data_end+0xff003344>
    348c:	9080040c 	andi	r2,r18,16
    3490:	1002de26 	beq	r2,zero,400c <___vfprintf_internal_r+0x1820>
    3494:	d8c02d17 	ldw	r3,180(sp)
    3498:	002d883a 	mov	r22,zero
    349c:	1cc00017 	ldw	r19,0(r3)
    34a0:	18c00104 	addi	r3,r3,4
    34a4:	d8c02d15 	stw	r3,180(sp)
    34a8:	003fab06 	br	3358 <__alt_data_end+0xff003358>
    34ac:	38803fcc 	andi	r2,r7,255
    34b0:	1080201c 	xori	r2,r2,128
    34b4:	10bfe004 	addi	r2,r2,-128
    34b8:	1002d21e 	bne	r2,zero,4004 <___vfprintf_internal_r+0x1818>
    34bc:	00c00044 	movi	r3,1
    34c0:	01c00804 	movi	r7,32
    34c4:	ac400007 	ldb	r17,0(r21)
    34c8:	003d2906 	br	2970 <__alt_data_end+0xff002970>
    34cc:	94800054 	ori	r18,r18,1
    34d0:	ac400007 	ldb	r17,0(r21)
    34d4:	003d2606 	br	2970 <__alt_data_end+0xff002970>
    34d8:	18c03fcc 	andi	r3,r3,255
    34dc:	183e0526 	beq	r3,zero,2cf4 <__alt_data_end+0xff002cf4>
    34e0:	d9c02785 	stb	r7,158(sp)
    34e4:	003e0306 	br	2cf4 <__alt_data_end+0xff002cf4>
    34e8:	94801014 	ori	r18,r18,64
    34ec:	ac400007 	ldb	r17,0(r21)
    34f0:	003d1f06 	br	2970 <__alt_data_end+0xff002970>
    34f4:	ac400007 	ldb	r17,0(r21)
    34f8:	8a438726 	beq	r17,r9,4318 <___vfprintf_internal_r+0x1b2c>
    34fc:	94800414 	ori	r18,r18,16
    3500:	003d1b06 	br	2970 <__alt_data_end+0xff002970>
    3504:	18c03fcc 	andi	r3,r3,255
    3508:	1805341e 	bne	r3,zero,49dc <___vfprintf_internal_r+0x21f0>
    350c:	9080080c 	andi	r2,r18,32
    3510:	1002cd26 	beq	r2,zero,4048 <___vfprintf_internal_r+0x185c>
    3514:	d9402d17 	ldw	r5,180(sp)
    3518:	d9002f17 	ldw	r4,188(sp)
    351c:	28800017 	ldw	r2,0(r5)
    3520:	2007d7fa 	srai	r3,r4,31
    3524:	29400104 	addi	r5,r5,4
    3528:	d9402d15 	stw	r5,180(sp)
    352c:	11000015 	stw	r4,0(r2)
    3530:	10c00115 	stw	r3,4(r2)
    3534:	003ce506 	br	28cc <__alt_data_end+0xff0028cc>
    3538:	d8c02d17 	ldw	r3,180(sp)
    353c:	d9002d17 	ldw	r4,180(sp)
    3540:	d8002785 	stb	zero,158(sp)
    3544:	18800017 	ldw	r2,0(r3)
    3548:	21000104 	addi	r4,r4,4
    354c:	00c00044 	movi	r3,1
    3550:	d8c02a15 	stw	r3,168(sp)
    3554:	d8801405 	stb	r2,80(sp)
    3558:	d9002d15 	stw	r4,180(sp)
    355c:	d8c02e15 	stw	r3,184(sp)
    3560:	d8002915 	stw	zero,164(sp)
    3564:	d8003215 	stw	zero,200(sp)
    3568:	dc001404 	addi	r16,sp,80
    356c:	0039883a 	mov	fp,zero
    3570:	003e7206 	br	2f3c <__alt_data_end+0xff002f3c>
    3574:	01000074 	movhi	r4,1
    3578:	21013604 	addi	r4,r4,1240
    357c:	0039883a 	mov	fp,zero
    3580:	d9003915 	stw	r4,228(sp)
    3584:	04401e04 	movi	r17,120
    3588:	003f8206 	br	3394 <__alt_data_end+0xff003394>
    358c:	18c03fcc 	andi	r3,r3,255
    3590:	1805061e 	bne	r3,zero,49ac <___vfprintf_internal_r+0x21c0>
    3594:	883d9126 	beq	r17,zero,2bdc <__alt_data_end+0xff002bdc>
    3598:	00c00044 	movi	r3,1
    359c:	d8c02a15 	stw	r3,168(sp)
    35a0:	dc401405 	stb	r17,80(sp)
    35a4:	d8002785 	stb	zero,158(sp)
    35a8:	003fec06 	br	355c <__alt_data_end+0xff00355c>
    35ac:	01400074 	movhi	r5,1
    35b0:	29413604 	addi	r5,r5,1240
    35b4:	d9403915 	stw	r5,228(sp)
    35b8:	d8c02d15 	stw	r3,180(sp)
    35bc:	1025883a 	mov	r18,r2
    35c0:	04401e04 	movi	r17,120
    35c4:	9d84b03a 	or	r2,r19,r22
    35c8:	1000fc1e 	bne	r2,zero,39bc <___vfprintf_internal_r+0x11d0>
    35cc:	0039883a 	mov	fp,zero
    35d0:	00800084 	movi	r2,2
    35d4:	10803fcc 	andi	r2,r2,255
    35d8:	00c00044 	movi	r3,1
    35dc:	10c20f26 	beq	r2,r3,3e1c <___vfprintf_internal_r+0x1630>
    35e0:	00c00084 	movi	r3,2
    35e4:	10fd6326 	beq	r2,r3,2b74 <__alt_data_end+0xff002b74>
    35e8:	003e2d06 	br	2ea0 <__alt_data_end+0xff002ea0>
    35ec:	d8c02017 	ldw	r3,128(sp)
    35f0:	003e9306 	br	3040 <__alt_data_end+0xff003040>
    35f4:	00801944 	movi	r2,101
    35f8:	14407e0e 	bge	r2,r17,37f4 <___vfprintf_internal_r+0x1008>
    35fc:	d9003617 	ldw	r4,216(sp)
    3600:	d9403817 	ldw	r5,224(sp)
    3604:	000d883a 	mov	r6,zero
    3608:	000f883a 	mov	r7,zero
    360c:	d8c03c15 	stw	r3,240(sp)
    3610:	da003d15 	stw	r8,244(sp)
    3614:	000d2000 	call	d200 <__eqdf2>
    3618:	d8c03c17 	ldw	r3,240(sp)
    361c:	da003d17 	ldw	r8,244(sp)
    3620:	1000f71e 	bne	r2,zero,3a00 <___vfprintf_internal_r+0x1214>
    3624:	d8801f17 	ldw	r2,124(sp)
    3628:	01000074 	movhi	r4,1
    362c:	21013d04 	addi	r4,r4,1268
    3630:	18c00044 	addi	r3,r3,1
    3634:	10800044 	addi	r2,r2,1
    3638:	41000015 	stw	r4,0(r8)
    363c:	01000044 	movi	r4,1
    3640:	41000115 	stw	r4,4(r8)
    3644:	d8c02015 	stw	r3,128(sp)
    3648:	d8801f15 	stw	r2,124(sp)
    364c:	010001c4 	movi	r4,7
    3650:	2082b816 	blt	r4,r2,4134 <___vfprintf_internal_r+0x1948>
    3654:	42000204 	addi	r8,r8,8
    3658:	d8802617 	ldw	r2,152(sp)
    365c:	d9403317 	ldw	r5,204(sp)
    3660:	11400216 	blt	r2,r5,366c <___vfprintf_internal_r+0xe80>
    3664:	9080004c 	andi	r2,r18,1
    3668:	103ed526 	beq	r2,zero,31c0 <__alt_data_end+0xff0031c0>
    366c:	d8803717 	ldw	r2,220(sp)
    3670:	d9003417 	ldw	r4,208(sp)
    3674:	d9403717 	ldw	r5,220(sp)
    3678:	1887883a 	add	r3,r3,r2
    367c:	d8801f17 	ldw	r2,124(sp)
    3680:	41000015 	stw	r4,0(r8)
    3684:	41400115 	stw	r5,4(r8)
    3688:	10800044 	addi	r2,r2,1
    368c:	d8c02015 	stw	r3,128(sp)
    3690:	d8801f15 	stw	r2,124(sp)
    3694:	010001c4 	movi	r4,7
    3698:	20832916 	blt	r4,r2,4340 <___vfprintf_internal_r+0x1b54>
    369c:	42000204 	addi	r8,r8,8
    36a0:	d8803317 	ldw	r2,204(sp)
    36a4:	143fffc4 	addi	r16,r2,-1
    36a8:	043ec50e 	bge	zero,r16,31c0 <__alt_data_end+0xff0031c0>
    36ac:	04400404 	movi	r17,16
    36b0:	d8801f17 	ldw	r2,124(sp)
    36b4:	8c00880e 	bge	r17,r16,38d8 <___vfprintf_internal_r+0x10ec>
    36b8:	01400074 	movhi	r5,1
    36bc:	29413d84 	addi	r5,r5,1270
    36c0:	d9402b15 	stw	r5,172(sp)
    36c4:	058001c4 	movi	r22,7
    36c8:	dcc02c17 	ldw	r19,176(sp)
    36cc:	00000306 	br	36dc <___vfprintf_internal_r+0xef0>
    36d0:	42000204 	addi	r8,r8,8
    36d4:	843ffc04 	addi	r16,r16,-16
    36d8:	8c00820e 	bge	r17,r16,38e4 <___vfprintf_internal_r+0x10f8>
    36dc:	18c00404 	addi	r3,r3,16
    36e0:	10800044 	addi	r2,r2,1
    36e4:	45000015 	stw	r20,0(r8)
    36e8:	44400115 	stw	r17,4(r8)
    36ec:	d8c02015 	stw	r3,128(sp)
    36f0:	d8801f15 	stw	r2,124(sp)
    36f4:	b0bff60e 	bge	r22,r2,36d0 <__alt_data_end+0xff0036d0>
    36f8:	d9801e04 	addi	r6,sp,120
    36fc:	b80b883a 	mov	r5,r23
    3700:	9809883a 	mov	r4,r19
    3704:	00095880 	call	9588 <__sprint_r>
    3708:	103d3a1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    370c:	d8c02017 	ldw	r3,128(sp)
    3710:	d8801f17 	ldw	r2,124(sp)
    3714:	da000404 	addi	r8,sp,16
    3718:	003fee06 	br	36d4 <__alt_data_end+0xff0036d4>
    371c:	d9403117 	ldw	r5,196(sp)
    3720:	d8802a17 	ldw	r2,168(sp)
    3724:	28adc83a 	sub	r22,r5,r2
    3728:	05be630e 	bge	zero,r22,30b8 <__alt_data_end+0xff0030b8>
    372c:	07000404 	movi	fp,16
    3730:	d8801f17 	ldw	r2,124(sp)
    3734:	e5838f0e 	bge	fp,r22,4574 <___vfprintf_internal_r+0x1d88>
    3738:	01400074 	movhi	r5,1
    373c:	29413d84 	addi	r5,r5,1270
    3740:	dc403015 	stw	r17,192(sp)
    3744:	d9402b15 	stw	r5,172(sp)
    3748:	b023883a 	mov	r17,r22
    374c:	04c001c4 	movi	r19,7
    3750:	a82d883a 	mov	r22,r21
    3754:	902b883a 	mov	r21,r18
    3758:	8025883a 	mov	r18,r16
    375c:	dc002c17 	ldw	r16,176(sp)
    3760:	00000306 	br	3770 <___vfprintf_internal_r+0xf84>
    3764:	8c7ffc04 	addi	r17,r17,-16
    3768:	42000204 	addi	r8,r8,8
    376c:	e440110e 	bge	fp,r17,37b4 <___vfprintf_internal_r+0xfc8>
    3770:	18c00404 	addi	r3,r3,16
    3774:	10800044 	addi	r2,r2,1
    3778:	45000015 	stw	r20,0(r8)
    377c:	47000115 	stw	fp,4(r8)
    3780:	d8c02015 	stw	r3,128(sp)
    3784:	d8801f15 	stw	r2,124(sp)
    3788:	98bff60e 	bge	r19,r2,3764 <__alt_data_end+0xff003764>
    378c:	d9801e04 	addi	r6,sp,120
    3790:	b80b883a 	mov	r5,r23
    3794:	8009883a 	mov	r4,r16
    3798:	00095880 	call	9588 <__sprint_r>
    379c:	103d151e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    37a0:	8c7ffc04 	addi	r17,r17,-16
    37a4:	d8c02017 	ldw	r3,128(sp)
    37a8:	d8801f17 	ldw	r2,124(sp)
    37ac:	da000404 	addi	r8,sp,16
    37b0:	e47fef16 	blt	fp,r17,3770 <__alt_data_end+0xff003770>
    37b4:	9021883a 	mov	r16,r18
    37b8:	a825883a 	mov	r18,r21
    37bc:	b02b883a 	mov	r21,r22
    37c0:	882d883a 	mov	r22,r17
    37c4:	dc403017 	ldw	r17,192(sp)
    37c8:	d9002b17 	ldw	r4,172(sp)
    37cc:	1d87883a 	add	r3,r3,r22
    37d0:	10800044 	addi	r2,r2,1
    37d4:	41000015 	stw	r4,0(r8)
    37d8:	45800115 	stw	r22,4(r8)
    37dc:	d8c02015 	stw	r3,128(sp)
    37e0:	d8801f15 	stw	r2,124(sp)
    37e4:	010001c4 	movi	r4,7
    37e8:	20818e16 	blt	r4,r2,3e24 <___vfprintf_internal_r+0x1638>
    37ec:	42000204 	addi	r8,r8,8
    37f0:	003e3106 	br	30b8 <__alt_data_end+0xff0030b8>
    37f4:	d9403317 	ldw	r5,204(sp)
    37f8:	00800044 	movi	r2,1
    37fc:	18c00044 	addi	r3,r3,1
    3800:	1141530e 	bge	r2,r5,3d50 <___vfprintf_internal_r+0x1564>
    3804:	dc401f17 	ldw	r17,124(sp)
    3808:	00800044 	movi	r2,1
    380c:	40800115 	stw	r2,4(r8)
    3810:	8c400044 	addi	r17,r17,1
    3814:	44000015 	stw	r16,0(r8)
    3818:	d8c02015 	stw	r3,128(sp)
    381c:	dc401f15 	stw	r17,124(sp)
    3820:	008001c4 	movi	r2,7
    3824:	14416b16 	blt	r2,r17,3dd4 <___vfprintf_internal_r+0x15e8>
    3828:	42000204 	addi	r8,r8,8
    382c:	d8803717 	ldw	r2,220(sp)
    3830:	d9003417 	ldw	r4,208(sp)
    3834:	8c400044 	addi	r17,r17,1
    3838:	10c7883a 	add	r3,r2,r3
    383c:	40800115 	stw	r2,4(r8)
    3840:	41000015 	stw	r4,0(r8)
    3844:	d8c02015 	stw	r3,128(sp)
    3848:	dc401f15 	stw	r17,124(sp)
    384c:	008001c4 	movi	r2,7
    3850:	14416916 	blt	r2,r17,3df8 <___vfprintf_internal_r+0x160c>
    3854:	45800204 	addi	r22,r8,8
    3858:	d9003617 	ldw	r4,216(sp)
    385c:	d9403817 	ldw	r5,224(sp)
    3860:	000d883a 	mov	r6,zero
    3864:	000f883a 	mov	r7,zero
    3868:	d8c03c15 	stw	r3,240(sp)
    386c:	000d2000 	call	d200 <__eqdf2>
    3870:	d8c03c17 	ldw	r3,240(sp)
    3874:	1000bc26 	beq	r2,zero,3b68 <___vfprintf_internal_r+0x137c>
    3878:	d9403317 	ldw	r5,204(sp)
    387c:	84000044 	addi	r16,r16,1
    3880:	8c400044 	addi	r17,r17,1
    3884:	28bfffc4 	addi	r2,r5,-1
    3888:	1887883a 	add	r3,r3,r2
    388c:	b0800115 	stw	r2,4(r22)
    3890:	b4000015 	stw	r16,0(r22)
    3894:	d8c02015 	stw	r3,128(sp)
    3898:	dc401f15 	stw	r17,124(sp)
    389c:	008001c4 	movi	r2,7
    38a0:	14414316 	blt	r2,r17,3db0 <___vfprintf_internal_r+0x15c4>
    38a4:	b5800204 	addi	r22,r22,8
    38a8:	d9003a17 	ldw	r4,232(sp)
    38ac:	df0022c4 	addi	fp,sp,139
    38b0:	8c400044 	addi	r17,r17,1
    38b4:	20c7883a 	add	r3,r4,r3
    38b8:	b7000015 	stw	fp,0(r22)
    38bc:	b1000115 	stw	r4,4(r22)
    38c0:	d8c02015 	stw	r3,128(sp)
    38c4:	dc401f15 	stw	r17,124(sp)
    38c8:	008001c4 	movi	r2,7
    38cc:	14400e16 	blt	r2,r17,3908 <___vfprintf_internal_r+0x111c>
    38d0:	b2000204 	addi	r8,r22,8
    38d4:	003e3a06 	br	31c0 <__alt_data_end+0xff0031c0>
    38d8:	01000074 	movhi	r4,1
    38dc:	21013d84 	addi	r4,r4,1270
    38e0:	d9002b15 	stw	r4,172(sp)
    38e4:	d9002b17 	ldw	r4,172(sp)
    38e8:	1c07883a 	add	r3,r3,r16
    38ec:	44000115 	stw	r16,4(r8)
    38f0:	41000015 	stw	r4,0(r8)
    38f4:	10800044 	addi	r2,r2,1
    38f8:	d8c02015 	stw	r3,128(sp)
    38fc:	d8801f15 	stw	r2,124(sp)
    3900:	010001c4 	movi	r4,7
    3904:	20be2d0e 	bge	r4,r2,31bc <__alt_data_end+0xff0031bc>
    3908:	d9002c17 	ldw	r4,176(sp)
    390c:	d9801e04 	addi	r6,sp,120
    3910:	b80b883a 	mov	r5,r23
    3914:	00095880 	call	9588 <__sprint_r>
    3918:	103cb61e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    391c:	d8c02017 	ldw	r3,128(sp)
    3920:	da000404 	addi	r8,sp,16
    3924:	003e2606 	br	31c0 <__alt_data_end+0xff0031c0>
    3928:	d9002c17 	ldw	r4,176(sp)
    392c:	d9801e04 	addi	r6,sp,120
    3930:	b80b883a 	mov	r5,r23
    3934:	00095880 	call	9588 <__sprint_r>
    3938:	103e5d26 	beq	r2,zero,32b0 <__alt_data_end+0xff0032b0>
    393c:	003cad06 	br	2bf4 <__alt_data_end+0xff002bf4>
    3940:	d9002c17 	ldw	r4,176(sp)
    3944:	d9801e04 	addi	r6,sp,120
    3948:	b80b883a 	mov	r5,r23
    394c:	00095880 	call	9588 <__sprint_r>
    3950:	103ca81e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3954:	d8c02017 	ldw	r3,128(sp)
    3958:	da000404 	addi	r8,sp,16
    395c:	003e0b06 	br	318c <__alt_data_end+0xff00318c>
    3960:	d9002c17 	ldw	r4,176(sp)
    3964:	d9801e04 	addi	r6,sp,120
    3968:	b80b883a 	mov	r5,r23
    396c:	00095880 	call	9588 <__sprint_r>
    3970:	103ca01e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3974:	d8c02017 	ldw	r3,128(sp)
    3978:	da000404 	addi	r8,sp,16
    397c:	003dbd06 	br	3074 <__alt_data_end+0xff003074>
    3980:	d9002c17 	ldw	r4,176(sp)
    3984:	d9801e04 	addi	r6,sp,120
    3988:	b80b883a 	mov	r5,r23
    398c:	00095880 	call	9588 <__sprint_r>
    3990:	103c981e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3994:	d8c02017 	ldw	r3,128(sp)
    3998:	da000404 	addi	r8,sp,16
    399c:	003dc306 	br	30ac <__alt_data_end+0xff0030ac>
    39a0:	d8802917 	ldw	r2,164(sp)
    39a4:	d8002785 	stb	zero,158(sp)
    39a8:	103f0616 	blt	r2,zero,35c4 <__alt_data_end+0xff0035c4>
    39ac:	00ffdfc4 	movi	r3,-129
    39b0:	9d84b03a 	or	r2,r19,r22
    39b4:	90e4703a 	and	r18,r18,r3
    39b8:	103c6b26 	beq	r2,zero,2b68 <__alt_data_end+0xff002b68>
    39bc:	0039883a 	mov	fp,zero
    39c0:	003e7406 	br	3394 <__alt_data_end+0xff003394>
    39c4:	9080040c 	andi	r2,r18,16
    39c8:	1001b326 	beq	r2,zero,4098 <___vfprintf_internal_r+0x18ac>
    39cc:	d9002d17 	ldw	r4,180(sp)
    39d0:	d9402917 	ldw	r5,164(sp)
    39d4:	d8002785 	stb	zero,158(sp)
    39d8:	20800104 	addi	r2,r4,4
    39dc:	24c00017 	ldw	r19,0(r4)
    39e0:	002d883a 	mov	r22,zero
    39e4:	2801b516 	blt	r5,zero,40bc <___vfprintf_internal_r+0x18d0>
    39e8:	00ffdfc4 	movi	r3,-129
    39ec:	d8802d15 	stw	r2,180(sp)
    39f0:	90e4703a 	and	r18,r18,r3
    39f4:	983d2726 	beq	r19,zero,2e94 <__alt_data_end+0xff002e94>
    39f8:	0039883a 	mov	fp,zero
    39fc:	003d2a06 	br	2ea8 <__alt_data_end+0xff002ea8>
    3a00:	dc402617 	ldw	r17,152(sp)
    3a04:	0441d30e 	bge	zero,r17,4154 <___vfprintf_internal_r+0x1968>
    3a08:	dc403217 	ldw	r17,200(sp)
    3a0c:	d8803317 	ldw	r2,204(sp)
    3a10:	1440010e 	bge	r2,r17,3a18 <___vfprintf_internal_r+0x122c>
    3a14:	1023883a 	mov	r17,r2
    3a18:	04400a0e 	bge	zero,r17,3a44 <___vfprintf_internal_r+0x1258>
    3a1c:	d8801f17 	ldw	r2,124(sp)
    3a20:	1c47883a 	add	r3,r3,r17
    3a24:	44000015 	stw	r16,0(r8)
    3a28:	10800044 	addi	r2,r2,1
    3a2c:	44400115 	stw	r17,4(r8)
    3a30:	d8c02015 	stw	r3,128(sp)
    3a34:	d8801f15 	stw	r2,124(sp)
    3a38:	010001c4 	movi	r4,7
    3a3c:	20826516 	blt	r4,r2,43d4 <___vfprintf_internal_r+0x1be8>
    3a40:	42000204 	addi	r8,r8,8
    3a44:	88026116 	blt	r17,zero,43cc <___vfprintf_internal_r+0x1be0>
    3a48:	d9003217 	ldw	r4,200(sp)
    3a4c:	2463c83a 	sub	r17,r4,r17
    3a50:	04407b0e 	bge	zero,r17,3c40 <___vfprintf_internal_r+0x1454>
    3a54:	05800404 	movi	r22,16
    3a58:	d8801f17 	ldw	r2,124(sp)
    3a5c:	b4419d0e 	bge	r22,r17,40d4 <___vfprintf_internal_r+0x18e8>
    3a60:	01000074 	movhi	r4,1
    3a64:	21013d84 	addi	r4,r4,1270
    3a68:	d9002b15 	stw	r4,172(sp)
    3a6c:	070001c4 	movi	fp,7
    3a70:	dcc02c17 	ldw	r19,176(sp)
    3a74:	00000306 	br	3a84 <___vfprintf_internal_r+0x1298>
    3a78:	42000204 	addi	r8,r8,8
    3a7c:	8c7ffc04 	addi	r17,r17,-16
    3a80:	b441970e 	bge	r22,r17,40e0 <___vfprintf_internal_r+0x18f4>
    3a84:	18c00404 	addi	r3,r3,16
    3a88:	10800044 	addi	r2,r2,1
    3a8c:	45000015 	stw	r20,0(r8)
    3a90:	45800115 	stw	r22,4(r8)
    3a94:	d8c02015 	stw	r3,128(sp)
    3a98:	d8801f15 	stw	r2,124(sp)
    3a9c:	e0bff60e 	bge	fp,r2,3a78 <__alt_data_end+0xff003a78>
    3aa0:	d9801e04 	addi	r6,sp,120
    3aa4:	b80b883a 	mov	r5,r23
    3aa8:	9809883a 	mov	r4,r19
    3aac:	00095880 	call	9588 <__sprint_r>
    3ab0:	103c501e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3ab4:	d8c02017 	ldw	r3,128(sp)
    3ab8:	d8801f17 	ldw	r2,124(sp)
    3abc:	da000404 	addi	r8,sp,16
    3ac0:	003fee06 	br	3a7c <__alt_data_end+0xff003a7c>
    3ac4:	d9002c17 	ldw	r4,176(sp)
    3ac8:	d9801e04 	addi	r6,sp,120
    3acc:	b80b883a 	mov	r5,r23
    3ad0:	00095880 	call	9588 <__sprint_r>
    3ad4:	103c471e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3ad8:	d8c02017 	ldw	r3,128(sp)
    3adc:	df002787 	ldb	fp,158(sp)
    3ae0:	da000404 	addi	r8,sp,16
    3ae4:	003d5606 	br	3040 <__alt_data_end+0xff003040>
    3ae8:	9080040c 	andi	r2,r18,16
    3aec:	10016126 	beq	r2,zero,4074 <___vfprintf_internal_r+0x1888>
    3af0:	d8802d17 	ldw	r2,180(sp)
    3af4:	14c00017 	ldw	r19,0(r2)
    3af8:	10800104 	addi	r2,r2,4
    3afc:	d8802d15 	stw	r2,180(sp)
    3b00:	982dd7fa 	srai	r22,r19,31
    3b04:	b005883a 	mov	r2,r22
    3b08:	003c8206 	br	2d14 <__alt_data_end+0xff002d14>
    3b0c:	9080040c 	andi	r2,r18,16
    3b10:	10003526 	beq	r2,zero,3be8 <___vfprintf_internal_r+0x13fc>
    3b14:	d9402d17 	ldw	r5,180(sp)
    3b18:	d8c02917 	ldw	r3,164(sp)
    3b1c:	d8002785 	stb	zero,158(sp)
    3b20:	28800104 	addi	r2,r5,4
    3b24:	2cc00017 	ldw	r19,0(r5)
    3b28:	002d883a 	mov	r22,zero
    3b2c:	18003716 	blt	r3,zero,3c0c <___vfprintf_internal_r+0x1420>
    3b30:	00ffdfc4 	movi	r3,-129
    3b34:	d8802d15 	stw	r2,180(sp)
    3b38:	90e4703a 	and	r18,r18,r3
    3b3c:	0039883a 	mov	fp,zero
    3b40:	983df326 	beq	r19,zero,3310 <__alt_data_end+0xff003310>
    3b44:	00800244 	movi	r2,9
    3b48:	14fc7b36 	bltu	r2,r19,2d38 <__alt_data_end+0xff002d38>
    3b4c:	d8c02817 	ldw	r3,160(sp)
    3b50:	dc001dc4 	addi	r16,sp,119
    3b54:	9cc00c04 	addi	r19,r19,48
    3b58:	1c07c83a 	sub	r3,r3,r16
    3b5c:	dcc01dc5 	stb	r19,119(sp)
    3b60:	d8c02e15 	stw	r3,184(sp)
    3b64:	003ce806 	br	2f08 <__alt_data_end+0xff002f08>
    3b68:	d8803317 	ldw	r2,204(sp)
    3b6c:	143fffc4 	addi	r16,r2,-1
    3b70:	043f4d0e 	bge	zero,r16,38a8 <__alt_data_end+0xff0038a8>
    3b74:	07000404 	movi	fp,16
    3b78:	e400810e 	bge	fp,r16,3d80 <___vfprintf_internal_r+0x1594>
    3b7c:	01400074 	movhi	r5,1
    3b80:	29413d84 	addi	r5,r5,1270
    3b84:	d9402b15 	stw	r5,172(sp)
    3b88:	01c001c4 	movi	r7,7
    3b8c:	dcc02c17 	ldw	r19,176(sp)
    3b90:	00000306 	br	3ba0 <___vfprintf_internal_r+0x13b4>
    3b94:	b5800204 	addi	r22,r22,8
    3b98:	843ffc04 	addi	r16,r16,-16
    3b9c:	e4007b0e 	bge	fp,r16,3d8c <___vfprintf_internal_r+0x15a0>
    3ba0:	18c00404 	addi	r3,r3,16
    3ba4:	8c400044 	addi	r17,r17,1
    3ba8:	b5000015 	stw	r20,0(r22)
    3bac:	b7000115 	stw	fp,4(r22)
    3bb0:	d8c02015 	stw	r3,128(sp)
    3bb4:	dc401f15 	stw	r17,124(sp)
    3bb8:	3c7ff60e 	bge	r7,r17,3b94 <__alt_data_end+0xff003b94>
    3bbc:	d9801e04 	addi	r6,sp,120
    3bc0:	b80b883a 	mov	r5,r23
    3bc4:	9809883a 	mov	r4,r19
    3bc8:	d9c03c15 	stw	r7,240(sp)
    3bcc:	00095880 	call	9588 <__sprint_r>
    3bd0:	d9c03c17 	ldw	r7,240(sp)
    3bd4:	103c071e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3bd8:	d8c02017 	ldw	r3,128(sp)
    3bdc:	dc401f17 	ldw	r17,124(sp)
    3be0:	dd800404 	addi	r22,sp,16
    3be4:	003fec06 	br	3b98 <__alt_data_end+0xff003b98>
    3be8:	9080100c 	andi	r2,r18,64
    3bec:	d8002785 	stb	zero,158(sp)
    3bf0:	10010e26 	beq	r2,zero,402c <___vfprintf_internal_r+0x1840>
    3bf4:	d9002d17 	ldw	r4,180(sp)
    3bf8:	d9402917 	ldw	r5,164(sp)
    3bfc:	002d883a 	mov	r22,zero
    3c00:	20800104 	addi	r2,r4,4
    3c04:	24c0000b 	ldhu	r19,0(r4)
    3c08:	283fc90e 	bge	r5,zero,3b30 <__alt_data_end+0xff003b30>
    3c0c:	d8802d15 	stw	r2,180(sp)
    3c10:	0039883a 	mov	fp,zero
    3c14:	9d84b03a 	or	r2,r19,r22
    3c18:	103c461e 	bne	r2,zero,2d34 <__alt_data_end+0xff002d34>
    3c1c:	00800044 	movi	r2,1
    3c20:	003e6c06 	br	35d4 <__alt_data_end+0xff0035d4>
    3c24:	d9002c17 	ldw	r4,176(sp)
    3c28:	d9801e04 	addi	r6,sp,120
    3c2c:	b80b883a 	mov	r5,r23
    3c30:	00095880 	call	9588 <__sprint_r>
    3c34:	103bef1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3c38:	d8c02017 	ldw	r3,128(sp)
    3c3c:	da000404 	addi	r8,sp,16
    3c40:	d9003217 	ldw	r4,200(sp)
    3c44:	d8802617 	ldw	r2,152(sp)
    3c48:	d9403317 	ldw	r5,204(sp)
    3c4c:	8123883a 	add	r17,r16,r4
    3c50:	11400216 	blt	r2,r5,3c5c <___vfprintf_internal_r+0x1470>
    3c54:	9100004c 	andi	r4,r18,1
    3c58:	20000d26 	beq	r4,zero,3c90 <___vfprintf_internal_r+0x14a4>
    3c5c:	d9003717 	ldw	r4,220(sp)
    3c60:	d9403417 	ldw	r5,208(sp)
    3c64:	1907883a 	add	r3,r3,r4
    3c68:	d9001f17 	ldw	r4,124(sp)
    3c6c:	41400015 	stw	r5,0(r8)
    3c70:	d9403717 	ldw	r5,220(sp)
    3c74:	21000044 	addi	r4,r4,1
    3c78:	d8c02015 	stw	r3,128(sp)
    3c7c:	41400115 	stw	r5,4(r8)
    3c80:	d9001f15 	stw	r4,124(sp)
    3c84:	014001c4 	movi	r5,7
    3c88:	2901e816 	blt	r5,r4,442c <___vfprintf_internal_r+0x1c40>
    3c8c:	42000204 	addi	r8,r8,8
    3c90:	d9003317 	ldw	r4,204(sp)
    3c94:	8121883a 	add	r16,r16,r4
    3c98:	2085c83a 	sub	r2,r4,r2
    3c9c:	8461c83a 	sub	r16,r16,r17
    3ca0:	1400010e 	bge	r2,r16,3ca8 <___vfprintf_internal_r+0x14bc>
    3ca4:	1021883a 	mov	r16,r2
    3ca8:	04000a0e 	bge	zero,r16,3cd4 <___vfprintf_internal_r+0x14e8>
    3cac:	d9001f17 	ldw	r4,124(sp)
    3cb0:	1c07883a 	add	r3,r3,r16
    3cb4:	44400015 	stw	r17,0(r8)
    3cb8:	21000044 	addi	r4,r4,1
    3cbc:	44000115 	stw	r16,4(r8)
    3cc0:	d8c02015 	stw	r3,128(sp)
    3cc4:	d9001f15 	stw	r4,124(sp)
    3cc8:	014001c4 	movi	r5,7
    3ccc:	2901fb16 	blt	r5,r4,44bc <___vfprintf_internal_r+0x1cd0>
    3cd0:	42000204 	addi	r8,r8,8
    3cd4:	8001f716 	blt	r16,zero,44b4 <___vfprintf_internal_r+0x1cc8>
    3cd8:	1421c83a 	sub	r16,r2,r16
    3cdc:	043d380e 	bge	zero,r16,31c0 <__alt_data_end+0xff0031c0>
    3ce0:	04400404 	movi	r17,16
    3ce4:	d8801f17 	ldw	r2,124(sp)
    3ce8:	8c3efb0e 	bge	r17,r16,38d8 <__alt_data_end+0xff0038d8>
    3cec:	01400074 	movhi	r5,1
    3cf0:	29413d84 	addi	r5,r5,1270
    3cf4:	d9402b15 	stw	r5,172(sp)
    3cf8:	058001c4 	movi	r22,7
    3cfc:	dcc02c17 	ldw	r19,176(sp)
    3d00:	00000306 	br	3d10 <___vfprintf_internal_r+0x1524>
    3d04:	42000204 	addi	r8,r8,8
    3d08:	843ffc04 	addi	r16,r16,-16
    3d0c:	8c3ef50e 	bge	r17,r16,38e4 <__alt_data_end+0xff0038e4>
    3d10:	18c00404 	addi	r3,r3,16
    3d14:	10800044 	addi	r2,r2,1
    3d18:	45000015 	stw	r20,0(r8)
    3d1c:	44400115 	stw	r17,4(r8)
    3d20:	d8c02015 	stw	r3,128(sp)
    3d24:	d8801f15 	stw	r2,124(sp)
    3d28:	b0bff60e 	bge	r22,r2,3d04 <__alt_data_end+0xff003d04>
    3d2c:	d9801e04 	addi	r6,sp,120
    3d30:	b80b883a 	mov	r5,r23
    3d34:	9809883a 	mov	r4,r19
    3d38:	00095880 	call	9588 <__sprint_r>
    3d3c:	103bad1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3d40:	d8c02017 	ldw	r3,128(sp)
    3d44:	d8801f17 	ldw	r2,124(sp)
    3d48:	da000404 	addi	r8,sp,16
    3d4c:	003fee06 	br	3d08 <__alt_data_end+0xff003d08>
    3d50:	9088703a 	and	r4,r18,r2
    3d54:	203eab1e 	bne	r4,zero,3804 <__alt_data_end+0xff003804>
    3d58:	dc401f17 	ldw	r17,124(sp)
    3d5c:	40800115 	stw	r2,4(r8)
    3d60:	44000015 	stw	r16,0(r8)
    3d64:	8c400044 	addi	r17,r17,1
    3d68:	d8c02015 	stw	r3,128(sp)
    3d6c:	dc401f15 	stw	r17,124(sp)
    3d70:	008001c4 	movi	r2,7
    3d74:	14400e16 	blt	r2,r17,3db0 <___vfprintf_internal_r+0x15c4>
    3d78:	45800204 	addi	r22,r8,8
    3d7c:	003eca06 	br	38a8 <__alt_data_end+0xff0038a8>
    3d80:	01000074 	movhi	r4,1
    3d84:	21013d84 	addi	r4,r4,1270
    3d88:	d9002b15 	stw	r4,172(sp)
    3d8c:	d8802b17 	ldw	r2,172(sp)
    3d90:	1c07883a 	add	r3,r3,r16
    3d94:	8c400044 	addi	r17,r17,1
    3d98:	b0800015 	stw	r2,0(r22)
    3d9c:	b4000115 	stw	r16,4(r22)
    3da0:	d8c02015 	stw	r3,128(sp)
    3da4:	dc401f15 	stw	r17,124(sp)
    3da8:	008001c4 	movi	r2,7
    3dac:	147ebd0e 	bge	r2,r17,38a4 <__alt_data_end+0xff0038a4>
    3db0:	d9002c17 	ldw	r4,176(sp)
    3db4:	d9801e04 	addi	r6,sp,120
    3db8:	b80b883a 	mov	r5,r23
    3dbc:	00095880 	call	9588 <__sprint_r>
    3dc0:	103b8c1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3dc4:	d8c02017 	ldw	r3,128(sp)
    3dc8:	dc401f17 	ldw	r17,124(sp)
    3dcc:	dd800404 	addi	r22,sp,16
    3dd0:	003eb506 	br	38a8 <__alt_data_end+0xff0038a8>
    3dd4:	d9002c17 	ldw	r4,176(sp)
    3dd8:	d9801e04 	addi	r6,sp,120
    3ddc:	b80b883a 	mov	r5,r23
    3de0:	00095880 	call	9588 <__sprint_r>
    3de4:	103b831e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3de8:	d8c02017 	ldw	r3,128(sp)
    3dec:	dc401f17 	ldw	r17,124(sp)
    3df0:	da000404 	addi	r8,sp,16
    3df4:	003e8d06 	br	382c <__alt_data_end+0xff00382c>
    3df8:	d9002c17 	ldw	r4,176(sp)
    3dfc:	d9801e04 	addi	r6,sp,120
    3e00:	b80b883a 	mov	r5,r23
    3e04:	00095880 	call	9588 <__sprint_r>
    3e08:	103b7a1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3e0c:	d8c02017 	ldw	r3,128(sp)
    3e10:	dc401f17 	ldw	r17,124(sp)
    3e14:	dd800404 	addi	r22,sp,16
    3e18:	003e8f06 	br	3858 <__alt_data_end+0xff003858>
    3e1c:	0027883a 	mov	r19,zero
    3e20:	003f4a06 	br	3b4c <__alt_data_end+0xff003b4c>
    3e24:	d9002c17 	ldw	r4,176(sp)
    3e28:	d9801e04 	addi	r6,sp,120
    3e2c:	b80b883a 	mov	r5,r23
    3e30:	00095880 	call	9588 <__sprint_r>
    3e34:	103b6f1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3e38:	d8c02017 	ldw	r3,128(sp)
    3e3c:	da000404 	addi	r8,sp,16
    3e40:	003c9d06 	br	30b8 <__alt_data_end+0xff0030b8>
    3e44:	04e7c83a 	sub	r19,zero,r19
    3e48:	9804c03a 	cmpne	r2,r19,zero
    3e4c:	05adc83a 	sub	r22,zero,r22
    3e50:	b0adc83a 	sub	r22,r22,r2
    3e54:	d8802917 	ldw	r2,164(sp)
    3e58:	07000b44 	movi	fp,45
    3e5c:	df002785 	stb	fp,158(sp)
    3e60:	10017b16 	blt	r2,zero,4450 <___vfprintf_internal_r+0x1c64>
    3e64:	00bfdfc4 	movi	r2,-129
    3e68:	90a4703a 	and	r18,r18,r2
    3e6c:	003bb106 	br	2d34 <__alt_data_end+0xff002d34>
    3e70:	d9003617 	ldw	r4,216(sp)
    3e74:	d9403817 	ldw	r5,224(sp)
    3e78:	da003d15 	stw	r8,244(sp)
    3e7c:	00092000 	call	9200 <__fpclassifyd>
    3e80:	da003d17 	ldw	r8,244(sp)
    3e84:	1000f026 	beq	r2,zero,4248 <___vfprintf_internal_r+0x1a5c>
    3e88:	d9002917 	ldw	r4,164(sp)
    3e8c:	05bff7c4 	movi	r22,-33
    3e90:	00bfffc4 	movi	r2,-1
    3e94:	8dac703a 	and	r22,r17,r22
    3e98:	20820026 	beq	r4,r2,469c <___vfprintf_internal_r+0x1eb0>
    3e9c:	008011c4 	movi	r2,71
    3ea0:	b081f726 	beq	r22,r2,4680 <___vfprintf_internal_r+0x1e94>
    3ea4:	d9003817 	ldw	r4,224(sp)
    3ea8:	90c04014 	ori	r3,r18,256
    3eac:	d8c02b15 	stw	r3,172(sp)
    3eb0:	20021516 	blt	r4,zero,4708 <___vfprintf_internal_r+0x1f1c>
    3eb4:	dcc03817 	ldw	r19,224(sp)
    3eb8:	d8002a05 	stb	zero,168(sp)
    3ebc:	00801984 	movi	r2,102
    3ec0:	8881f926 	beq	r17,r2,46a8 <___vfprintf_internal_r+0x1ebc>
    3ec4:	00801184 	movi	r2,70
    3ec8:	88821c26 	beq	r17,r2,473c <___vfprintf_internal_r+0x1f50>
    3ecc:	00801144 	movi	r2,69
    3ed0:	b081ef26 	beq	r22,r2,4690 <___vfprintf_internal_r+0x1ea4>
    3ed4:	d8c02917 	ldw	r3,164(sp)
    3ed8:	d8802104 	addi	r2,sp,132
    3edc:	d8800315 	stw	r2,12(sp)
    3ee0:	d9403617 	ldw	r5,216(sp)
    3ee4:	d8802504 	addi	r2,sp,148
    3ee8:	d9002c17 	ldw	r4,176(sp)
    3eec:	d8800215 	stw	r2,8(sp)
    3ef0:	d8802604 	addi	r2,sp,152
    3ef4:	d8c00015 	stw	r3,0(sp)
    3ef8:	d8800115 	stw	r2,4(sp)
    3efc:	01c00084 	movi	r7,2
    3f00:	980d883a 	mov	r6,r19
    3f04:	d8c03c15 	stw	r3,240(sp)
    3f08:	da003d15 	stw	r8,244(sp)
    3f0c:	0004e100 	call	4e10 <_dtoa_r>
    3f10:	1021883a 	mov	r16,r2
    3f14:	008019c4 	movi	r2,103
    3f18:	d8c03c17 	ldw	r3,240(sp)
    3f1c:	da003d17 	ldw	r8,244(sp)
    3f20:	88817126 	beq	r17,r2,44e8 <___vfprintf_internal_r+0x1cfc>
    3f24:	008011c4 	movi	r2,71
    3f28:	88829226 	beq	r17,r2,4974 <___vfprintf_internal_r+0x2188>
    3f2c:	80f9883a 	add	fp,r16,r3
    3f30:	d9003617 	ldw	r4,216(sp)
    3f34:	000d883a 	mov	r6,zero
    3f38:	000f883a 	mov	r7,zero
    3f3c:	980b883a 	mov	r5,r19
    3f40:	da003d15 	stw	r8,244(sp)
    3f44:	000d2000 	call	d200 <__eqdf2>
    3f48:	da003d17 	ldw	r8,244(sp)
    3f4c:	10018d26 	beq	r2,zero,4584 <___vfprintf_internal_r+0x1d98>
    3f50:	d8802117 	ldw	r2,132(sp)
    3f54:	1700062e 	bgeu	r2,fp,3f70 <___vfprintf_internal_r+0x1784>
    3f58:	01000c04 	movi	r4,48
    3f5c:	10c00044 	addi	r3,r2,1
    3f60:	d8c02115 	stw	r3,132(sp)
    3f64:	11000005 	stb	r4,0(r2)
    3f68:	d8802117 	ldw	r2,132(sp)
    3f6c:	173ffb36 	bltu	r2,fp,3f5c <__alt_data_end+0xff003f5c>
    3f70:	1405c83a 	sub	r2,r2,r16
    3f74:	d8803315 	stw	r2,204(sp)
    3f78:	008011c4 	movi	r2,71
    3f7c:	b0817626 	beq	r22,r2,4558 <___vfprintf_internal_r+0x1d6c>
    3f80:	00801944 	movi	r2,101
    3f84:	1442810e 	bge	r2,r17,498c <___vfprintf_internal_r+0x21a0>
    3f88:	d8c02617 	ldw	r3,152(sp)
    3f8c:	00801984 	movi	r2,102
    3f90:	d8c03215 	stw	r3,200(sp)
    3f94:	8881fe26 	beq	r17,r2,4790 <___vfprintf_internal_r+0x1fa4>
    3f98:	d8c03217 	ldw	r3,200(sp)
    3f9c:	d9003317 	ldw	r4,204(sp)
    3fa0:	1901dd16 	blt	r3,r4,4718 <___vfprintf_internal_r+0x1f2c>
    3fa4:	9480004c 	andi	r18,r18,1
    3fa8:	90022b1e 	bne	r18,zero,4858 <___vfprintf_internal_r+0x206c>
    3fac:	1805883a 	mov	r2,r3
    3fb0:	18028016 	blt	r3,zero,49b4 <___vfprintf_internal_r+0x21c8>
    3fb4:	d8c03217 	ldw	r3,200(sp)
    3fb8:	044019c4 	movi	r17,103
    3fbc:	d8c02e15 	stw	r3,184(sp)
    3fc0:	df002a07 	ldb	fp,168(sp)
    3fc4:	e001531e 	bne	fp,zero,4514 <___vfprintf_internal_r+0x1d28>
    3fc8:	df002783 	ldbu	fp,158(sp)
    3fcc:	d8802a15 	stw	r2,168(sp)
    3fd0:	dc802b17 	ldw	r18,172(sp)
    3fd4:	d8002915 	stw	zero,164(sp)
    3fd8:	003bd106 	br	2f20 <__alt_data_end+0xff002f20>
    3fdc:	d8802d17 	ldw	r2,180(sp)
    3fe0:	d8c02d17 	ldw	r3,180(sp)
    3fe4:	d9002d17 	ldw	r4,180(sp)
    3fe8:	10800017 	ldw	r2,0(r2)
    3fec:	18c00117 	ldw	r3,4(r3)
    3ff0:	21000204 	addi	r4,r4,8
    3ff4:	d8803615 	stw	r2,216(sp)
    3ff8:	d8c03815 	stw	r3,224(sp)
    3ffc:	d9002d15 	stw	r4,180(sp)
    4000:	003b7506 	br	2dd8 <__alt_data_end+0xff002dd8>
    4004:	ac400007 	ldb	r17,0(r21)
    4008:	003a5906 	br	2970 <__alt_data_end+0xff002970>
    400c:	9080100c 	andi	r2,r18,64
    4010:	1000a826 	beq	r2,zero,42b4 <___vfprintf_internal_r+0x1ac8>
    4014:	d9002d17 	ldw	r4,180(sp)
    4018:	002d883a 	mov	r22,zero
    401c:	24c0000b 	ldhu	r19,0(r4)
    4020:	21000104 	addi	r4,r4,4
    4024:	d9002d15 	stw	r4,180(sp)
    4028:	003ccb06 	br	3358 <__alt_data_end+0xff003358>
    402c:	d8c02d17 	ldw	r3,180(sp)
    4030:	d9002917 	ldw	r4,164(sp)
    4034:	002d883a 	mov	r22,zero
    4038:	18800104 	addi	r2,r3,4
    403c:	1cc00017 	ldw	r19,0(r3)
    4040:	203ebb0e 	bge	r4,zero,3b30 <__alt_data_end+0xff003b30>
    4044:	003ef106 	br	3c0c <__alt_data_end+0xff003c0c>
    4048:	9080040c 	andi	r2,r18,16
    404c:	1000921e 	bne	r2,zero,4298 <___vfprintf_internal_r+0x1aac>
    4050:	9480100c 	andi	r18,r18,64
    4054:	90013926 	beq	r18,zero,453c <___vfprintf_internal_r+0x1d50>
    4058:	d9002d17 	ldw	r4,180(sp)
    405c:	d9402f17 	ldw	r5,188(sp)
    4060:	20800017 	ldw	r2,0(r4)
    4064:	21000104 	addi	r4,r4,4
    4068:	d9002d15 	stw	r4,180(sp)
    406c:	1140000d 	sth	r5,0(r2)
    4070:	003a1606 	br	28cc <__alt_data_end+0xff0028cc>
    4074:	9080100c 	andi	r2,r18,64
    4078:	10008026 	beq	r2,zero,427c <___vfprintf_internal_r+0x1a90>
    407c:	d8c02d17 	ldw	r3,180(sp)
    4080:	1cc0000f 	ldh	r19,0(r3)
    4084:	18c00104 	addi	r3,r3,4
    4088:	d8c02d15 	stw	r3,180(sp)
    408c:	982dd7fa 	srai	r22,r19,31
    4090:	b005883a 	mov	r2,r22
    4094:	003b1f06 	br	2d14 <__alt_data_end+0xff002d14>
    4098:	9080100c 	andi	r2,r18,64
    409c:	d8002785 	stb	zero,158(sp)
    40a0:	10008a1e 	bne	r2,zero,42cc <___vfprintf_internal_r+0x1ae0>
    40a4:	d9402d17 	ldw	r5,180(sp)
    40a8:	d8c02917 	ldw	r3,164(sp)
    40ac:	002d883a 	mov	r22,zero
    40b0:	28800104 	addi	r2,r5,4
    40b4:	2cc00017 	ldw	r19,0(r5)
    40b8:	183e4b0e 	bge	r3,zero,39e8 <__alt_data_end+0xff0039e8>
    40bc:	9d86b03a 	or	r3,r19,r22
    40c0:	d8802d15 	stw	r2,180(sp)
    40c4:	183e4c1e 	bne	r3,zero,39f8 <__alt_data_end+0xff0039f8>
    40c8:	0039883a 	mov	fp,zero
    40cc:	0005883a 	mov	r2,zero
    40d0:	003d4006 	br	35d4 <__alt_data_end+0xff0035d4>
    40d4:	01400074 	movhi	r5,1
    40d8:	29413d84 	addi	r5,r5,1270
    40dc:	d9402b15 	stw	r5,172(sp)
    40e0:	d9402b17 	ldw	r5,172(sp)
    40e4:	1c47883a 	add	r3,r3,r17
    40e8:	10800044 	addi	r2,r2,1
    40ec:	41400015 	stw	r5,0(r8)
    40f0:	44400115 	stw	r17,4(r8)
    40f4:	d8c02015 	stw	r3,128(sp)
    40f8:	d8801f15 	stw	r2,124(sp)
    40fc:	010001c4 	movi	r4,7
    4100:	20bec816 	blt	r4,r2,3c24 <__alt_data_end+0xff003c24>
    4104:	42000204 	addi	r8,r8,8
    4108:	003ecd06 	br	3c40 <__alt_data_end+0xff003c40>
    410c:	d9002917 	ldw	r4,164(sp)
    4110:	d8002785 	stb	zero,158(sp)
    4114:	203d2d16 	blt	r4,zero,35cc <__alt_data_end+0xff0035cc>
    4118:	00bfdfc4 	movi	r2,-129
    411c:	90a4703a 	and	r18,r18,r2
    4120:	003a9106 	br	2b68 <__alt_data_end+0xff002b68>
    4124:	01000074 	movhi	r4,1
    4128:	21013d84 	addi	r4,r4,1270
    412c:	d9002b15 	stw	r4,172(sp)
    4130:	003c0c06 	br	3164 <__alt_data_end+0xff003164>
    4134:	d9002c17 	ldw	r4,176(sp)
    4138:	d9801e04 	addi	r6,sp,120
    413c:	b80b883a 	mov	r5,r23
    4140:	00095880 	call	9588 <__sprint_r>
    4144:	103aab1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    4148:	d8c02017 	ldw	r3,128(sp)
    414c:	da000404 	addi	r8,sp,16
    4150:	003d4106 	br	3658 <__alt_data_end+0xff003658>
    4154:	d8801f17 	ldw	r2,124(sp)
    4158:	01400074 	movhi	r5,1
    415c:	01000044 	movi	r4,1
    4160:	18c00044 	addi	r3,r3,1
    4164:	10800044 	addi	r2,r2,1
    4168:	29413d04 	addi	r5,r5,1268
    416c:	41000115 	stw	r4,4(r8)
    4170:	41400015 	stw	r5,0(r8)
    4174:	d8c02015 	stw	r3,128(sp)
    4178:	d8801f15 	stw	r2,124(sp)
    417c:	010001c4 	movi	r4,7
    4180:	20805c16 	blt	r4,r2,42f4 <___vfprintf_internal_r+0x1b08>
    4184:	42000204 	addi	r8,r8,8
    4188:	8800041e 	bne	r17,zero,419c <___vfprintf_internal_r+0x19b0>
    418c:	d8803317 	ldw	r2,204(sp)
    4190:	1000021e 	bne	r2,zero,419c <___vfprintf_internal_r+0x19b0>
    4194:	9080004c 	andi	r2,r18,1
    4198:	103c0926 	beq	r2,zero,31c0 <__alt_data_end+0xff0031c0>
    419c:	d9003717 	ldw	r4,220(sp)
    41a0:	d8801f17 	ldw	r2,124(sp)
    41a4:	d9403417 	ldw	r5,208(sp)
    41a8:	20c7883a 	add	r3,r4,r3
    41ac:	10800044 	addi	r2,r2,1
    41b0:	41000115 	stw	r4,4(r8)
    41b4:	41400015 	stw	r5,0(r8)
    41b8:	d8c02015 	stw	r3,128(sp)
    41bc:	d8801f15 	stw	r2,124(sp)
    41c0:	010001c4 	movi	r4,7
    41c4:	20812116 	blt	r4,r2,464c <___vfprintf_internal_r+0x1e60>
    41c8:	42000204 	addi	r8,r8,8
    41cc:	0463c83a 	sub	r17,zero,r17
    41d0:	0440730e 	bge	zero,r17,43a0 <___vfprintf_internal_r+0x1bb4>
    41d4:	05800404 	movi	r22,16
    41d8:	b440860e 	bge	r22,r17,43f4 <___vfprintf_internal_r+0x1c08>
    41dc:	01400074 	movhi	r5,1
    41e0:	29413d84 	addi	r5,r5,1270
    41e4:	d9402b15 	stw	r5,172(sp)
    41e8:	070001c4 	movi	fp,7
    41ec:	dcc02c17 	ldw	r19,176(sp)
    41f0:	00000306 	br	4200 <___vfprintf_internal_r+0x1a14>
    41f4:	42000204 	addi	r8,r8,8
    41f8:	8c7ffc04 	addi	r17,r17,-16
    41fc:	b440800e 	bge	r22,r17,4400 <___vfprintf_internal_r+0x1c14>
    4200:	18c00404 	addi	r3,r3,16
    4204:	10800044 	addi	r2,r2,1
    4208:	45000015 	stw	r20,0(r8)
    420c:	45800115 	stw	r22,4(r8)
    4210:	d8c02015 	stw	r3,128(sp)
    4214:	d8801f15 	stw	r2,124(sp)
    4218:	e0bff60e 	bge	fp,r2,41f4 <__alt_data_end+0xff0041f4>
    421c:	d9801e04 	addi	r6,sp,120
    4220:	b80b883a 	mov	r5,r23
    4224:	9809883a 	mov	r4,r19
    4228:	00095880 	call	9588 <__sprint_r>
    422c:	103a711e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    4230:	d8c02017 	ldw	r3,128(sp)
    4234:	d8801f17 	ldw	r2,124(sp)
    4238:	da000404 	addi	r8,sp,16
    423c:	003fee06 	br	41f8 <__alt_data_end+0xff0041f8>
    4240:	00bfffc4 	movi	r2,-1
    4244:	003a6f06 	br	2c04 <__alt_data_end+0xff002c04>
    4248:	008011c4 	movi	r2,71
    424c:	1440b816 	blt	r2,r17,4530 <___vfprintf_internal_r+0x1d44>
    4250:	04000074 	movhi	r16,1
    4254:	84012f04 	addi	r16,r16,1212
    4258:	00c000c4 	movi	r3,3
    425c:	00bfdfc4 	movi	r2,-129
    4260:	d8c02a15 	stw	r3,168(sp)
    4264:	90a4703a 	and	r18,r18,r2
    4268:	df002783 	ldbu	fp,158(sp)
    426c:	d8c02e15 	stw	r3,184(sp)
    4270:	d8002915 	stw	zero,164(sp)
    4274:	d8003215 	stw	zero,200(sp)
    4278:	003b2906 	br	2f20 <__alt_data_end+0xff002f20>
    427c:	d9002d17 	ldw	r4,180(sp)
    4280:	24c00017 	ldw	r19,0(r4)
    4284:	21000104 	addi	r4,r4,4
    4288:	d9002d15 	stw	r4,180(sp)
    428c:	982dd7fa 	srai	r22,r19,31
    4290:	b005883a 	mov	r2,r22
    4294:	003a9f06 	br	2d14 <__alt_data_end+0xff002d14>
    4298:	d9402d17 	ldw	r5,180(sp)
    429c:	d8c02f17 	ldw	r3,188(sp)
    42a0:	28800017 	ldw	r2,0(r5)
    42a4:	29400104 	addi	r5,r5,4
    42a8:	d9402d15 	stw	r5,180(sp)
    42ac:	10c00015 	stw	r3,0(r2)
    42b0:	00398606 	br	28cc <__alt_data_end+0xff0028cc>
    42b4:	d9402d17 	ldw	r5,180(sp)
    42b8:	002d883a 	mov	r22,zero
    42bc:	2cc00017 	ldw	r19,0(r5)
    42c0:	29400104 	addi	r5,r5,4
    42c4:	d9402d15 	stw	r5,180(sp)
    42c8:	003c2306 	br	3358 <__alt_data_end+0xff003358>
    42cc:	d8c02d17 	ldw	r3,180(sp)
    42d0:	d9002917 	ldw	r4,164(sp)
    42d4:	002d883a 	mov	r22,zero
    42d8:	18800104 	addi	r2,r3,4
    42dc:	1cc0000b 	ldhu	r19,0(r3)
    42e0:	203dc10e 	bge	r4,zero,39e8 <__alt_data_end+0xff0039e8>
    42e4:	003f7506 	br	40bc <__alt_data_end+0xff0040bc>
    42e8:	04000074 	movhi	r16,1
    42ec:	84012d04 	addi	r16,r16,1204
    42f0:	003acc06 	br	2e24 <__alt_data_end+0xff002e24>
    42f4:	d9002c17 	ldw	r4,176(sp)
    42f8:	d9801e04 	addi	r6,sp,120
    42fc:	b80b883a 	mov	r5,r23
    4300:	00095880 	call	9588 <__sprint_r>
    4304:	103a3b1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    4308:	dc402617 	ldw	r17,152(sp)
    430c:	d8c02017 	ldw	r3,128(sp)
    4310:	da000404 	addi	r8,sp,16
    4314:	003f9c06 	br	4188 <__alt_data_end+0xff004188>
    4318:	ac400043 	ldbu	r17,1(r21)
    431c:	94800814 	ori	r18,r18,32
    4320:	ad400044 	addi	r21,r21,1
    4324:	8c403fcc 	andi	r17,r17,255
    4328:	8c40201c 	xori	r17,r17,128
    432c:	8c7fe004 	addi	r17,r17,-128
    4330:	00398f06 	br	2970 <__alt_data_end+0xff002970>
    4334:	d8c02d15 	stw	r3,180(sp)
    4338:	0039883a 	mov	fp,zero
    433c:	003e3506 	br	3c14 <__alt_data_end+0xff003c14>
    4340:	d9002c17 	ldw	r4,176(sp)
    4344:	d9801e04 	addi	r6,sp,120
    4348:	b80b883a 	mov	r5,r23
    434c:	00095880 	call	9588 <__sprint_r>
    4350:	103a281e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    4354:	d8c02017 	ldw	r3,128(sp)
    4358:	da000404 	addi	r8,sp,16
    435c:	003cd006 	br	36a0 <__alt_data_end+0xff0036a0>
    4360:	8009883a 	mov	r4,r16
    4364:	da003d15 	stw	r8,244(sp)
    4368:	00027540 	call	2754 <strlen>
    436c:	d8802e15 	stw	r2,184(sp)
    4370:	da003d17 	ldw	r8,244(sp)
    4374:	103c340e 	bge	r2,zero,3448 <__alt_data_end+0xff003448>
    4378:	0005883a 	mov	r2,zero
    437c:	003c3206 	br	3448 <__alt_data_end+0xff003448>
    4380:	d9002c17 	ldw	r4,176(sp)
    4384:	d9801e04 	addi	r6,sp,120
    4388:	b80b883a 	mov	r5,r23
    438c:	00095880 	call	9588 <__sprint_r>
    4390:	103a181e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    4394:	d8c02017 	ldw	r3,128(sp)
    4398:	d8801f17 	ldw	r2,124(sp)
    439c:	da000404 	addi	r8,sp,16
    43a0:	d9403317 	ldw	r5,204(sp)
    43a4:	10800044 	addi	r2,r2,1
    43a8:	44000015 	stw	r16,0(r8)
    43ac:	28c7883a 	add	r3,r5,r3
    43b0:	003b7d06 	br	31a8 <__alt_data_end+0xff0031a8>
    43b4:	01000074 	movhi	r4,1
    43b8:	21014184 	addi	r4,r4,1286
    43bc:	d9003515 	stw	r4,212(sp)
    43c0:	003b1406 	br	3014 <__alt_data_end+0xff003014>
    43c4:	013fffc4 	movi	r4,-1
    43c8:	003a3506 	br	2ca0 <__alt_data_end+0xff002ca0>
    43cc:	0023883a 	mov	r17,zero
    43d0:	003d9d06 	br	3a48 <__alt_data_end+0xff003a48>
    43d4:	d9002c17 	ldw	r4,176(sp)
    43d8:	d9801e04 	addi	r6,sp,120
    43dc:	b80b883a 	mov	r5,r23
    43e0:	00095880 	call	9588 <__sprint_r>
    43e4:	103a031e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    43e8:	d8c02017 	ldw	r3,128(sp)
    43ec:	da000404 	addi	r8,sp,16
    43f0:	003d9406 	br	3a44 <__alt_data_end+0xff003a44>
    43f4:	01000074 	movhi	r4,1
    43f8:	21013d84 	addi	r4,r4,1270
    43fc:	d9002b15 	stw	r4,172(sp)
    4400:	d9002b17 	ldw	r4,172(sp)
    4404:	1c47883a 	add	r3,r3,r17
    4408:	10800044 	addi	r2,r2,1
    440c:	41000015 	stw	r4,0(r8)
    4410:	44400115 	stw	r17,4(r8)
    4414:	d8c02015 	stw	r3,128(sp)
    4418:	d8801f15 	stw	r2,124(sp)
    441c:	010001c4 	movi	r4,7
    4420:	20bfd716 	blt	r4,r2,4380 <__alt_data_end+0xff004380>
    4424:	42000204 	addi	r8,r8,8
    4428:	003fdd06 	br	43a0 <__alt_data_end+0xff0043a0>
    442c:	d9002c17 	ldw	r4,176(sp)
    4430:	d9801e04 	addi	r6,sp,120
    4434:	b80b883a 	mov	r5,r23
    4438:	00095880 	call	9588 <__sprint_r>
    443c:	1039ed1e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    4440:	d8802617 	ldw	r2,152(sp)
    4444:	d8c02017 	ldw	r3,128(sp)
    4448:	da000404 	addi	r8,sp,16
    444c:	003e1006 	br	3c90 <__alt_data_end+0xff003c90>
    4450:	00800044 	movi	r2,1
    4454:	10803fcc 	andi	r2,r2,255
    4458:	00c00044 	movi	r3,1
    445c:	10fa3526 	beq	r2,r3,2d34 <__alt_data_end+0xff002d34>
    4460:	00c00084 	movi	r3,2
    4464:	10fbcb26 	beq	r2,r3,3394 <__alt_data_end+0xff003394>
    4468:	003a8f06 	br	2ea8 <__alt_data_end+0xff002ea8>
    446c:	01000074 	movhi	r4,1
    4470:	21014184 	addi	r4,r4,1286
    4474:	d9003515 	stw	r4,212(sp)
    4478:	003b7606 	br	3254 <__alt_data_end+0xff003254>
    447c:	d8802917 	ldw	r2,164(sp)
    4480:	00c00184 	movi	r3,6
    4484:	1880012e 	bgeu	r3,r2,448c <___vfprintf_internal_r+0x1ca0>
    4488:	1805883a 	mov	r2,r3
    448c:	d8802e15 	stw	r2,184(sp)
    4490:	1000ef16 	blt	r2,zero,4850 <___vfprintf_internal_r+0x2064>
    4494:	04000074 	movhi	r16,1
    4498:	d8802a15 	stw	r2,168(sp)
    449c:	dcc02d15 	stw	r19,180(sp)
    44a0:	d8002915 	stw	zero,164(sp)
    44a4:	d8003215 	stw	zero,200(sp)
    44a8:	84013b04 	addi	r16,r16,1260
    44ac:	0039883a 	mov	fp,zero
    44b0:	003aa206 	br	2f3c <__alt_data_end+0xff002f3c>
    44b4:	0021883a 	mov	r16,zero
    44b8:	003e0706 	br	3cd8 <__alt_data_end+0xff003cd8>
    44bc:	d9002c17 	ldw	r4,176(sp)
    44c0:	d9801e04 	addi	r6,sp,120
    44c4:	b80b883a 	mov	r5,r23
    44c8:	00095880 	call	9588 <__sprint_r>
    44cc:	1039c91e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    44d0:	d8802617 	ldw	r2,152(sp)
    44d4:	d9403317 	ldw	r5,204(sp)
    44d8:	d8c02017 	ldw	r3,128(sp)
    44dc:	da000404 	addi	r8,sp,16
    44e0:	2885c83a 	sub	r2,r5,r2
    44e4:	003dfb06 	br	3cd4 <__alt_data_end+0xff003cd4>
    44e8:	9080004c 	andi	r2,r18,1
    44ec:	103e8f1e 	bne	r2,zero,3f2c <__alt_data_end+0xff003f2c>
    44f0:	d8802117 	ldw	r2,132(sp)
    44f4:	003e9e06 	br	3f70 <__alt_data_end+0xff003f70>
    44f8:	1025883a 	mov	r18,r2
    44fc:	0039883a 	mov	fp,zero
    4500:	00800084 	movi	r2,2
    4504:	003fd306 	br	4454 <__alt_data_end+0xff004454>
    4508:	07000b44 	movi	fp,45
    450c:	df002785 	stb	fp,158(sp)
    4510:	003a4006 	br	2e14 <__alt_data_end+0xff002e14>
    4514:	00c00b44 	movi	r3,45
    4518:	d8c02785 	stb	r3,158(sp)
    451c:	d8802a15 	stw	r2,168(sp)
    4520:	dc802b17 	ldw	r18,172(sp)
    4524:	d8002915 	stw	zero,164(sp)
    4528:	07000b44 	movi	fp,45
    452c:	003a8006 	br	2f30 <__alt_data_end+0xff002f30>
    4530:	04000074 	movhi	r16,1
    4534:	84013004 	addi	r16,r16,1216
    4538:	003f4706 	br	4258 <__alt_data_end+0xff004258>
    453c:	d8c02d17 	ldw	r3,180(sp)
    4540:	d9002f17 	ldw	r4,188(sp)
    4544:	18800017 	ldw	r2,0(r3)
    4548:	18c00104 	addi	r3,r3,4
    454c:	d8c02d15 	stw	r3,180(sp)
    4550:	11000015 	stw	r4,0(r2)
    4554:	0038dd06 	br	28cc <__alt_data_end+0xff0028cc>
    4558:	dd802617 	ldw	r22,152(sp)
    455c:	00bfff44 	movi	r2,-3
    4560:	b0801c16 	blt	r22,r2,45d4 <___vfprintf_internal_r+0x1de8>
    4564:	d9402917 	ldw	r5,164(sp)
    4568:	2d801a16 	blt	r5,r22,45d4 <___vfprintf_internal_r+0x1de8>
    456c:	dd803215 	stw	r22,200(sp)
    4570:	003e8906 	br	3f98 <__alt_data_end+0xff003f98>
    4574:	01000074 	movhi	r4,1
    4578:	21013d84 	addi	r4,r4,1270
    457c:	d9002b15 	stw	r4,172(sp)
    4580:	003c9106 	br	37c8 <__alt_data_end+0xff0037c8>
    4584:	e005883a 	mov	r2,fp
    4588:	003e7906 	br	3f70 <__alt_data_end+0xff003f70>
    458c:	d9402917 	ldw	r5,164(sp)
    4590:	df002783 	ldbu	fp,158(sp)
    4594:	dcc02d15 	stw	r19,180(sp)
    4598:	d9402a15 	stw	r5,168(sp)
    459c:	d9402e15 	stw	r5,184(sp)
    45a0:	d8002915 	stw	zero,164(sp)
    45a4:	d8003215 	stw	zero,200(sp)
    45a8:	003a5d06 	br	2f20 <__alt_data_end+0xff002f20>
    45ac:	9080004c 	andi	r2,r18,1
    45b0:	0039883a 	mov	fp,zero
    45b4:	10000426 	beq	r2,zero,45c8 <___vfprintf_internal_r+0x1ddc>
    45b8:	00800c04 	movi	r2,48
    45bc:	dc001dc4 	addi	r16,sp,119
    45c0:	d8801dc5 	stb	r2,119(sp)
    45c4:	003b8006 	br	33c8 <__alt_data_end+0xff0033c8>
    45c8:	d8002e15 	stw	zero,184(sp)
    45cc:	dc001e04 	addi	r16,sp,120
    45d0:	003a4d06 	br	2f08 <__alt_data_end+0xff002f08>
    45d4:	8c7fff84 	addi	r17,r17,-2
    45d8:	b5bfffc4 	addi	r22,r22,-1
    45dc:	dd802615 	stw	r22,152(sp)
    45e0:	dc4022c5 	stb	r17,139(sp)
    45e4:	b000bf16 	blt	r22,zero,48e4 <___vfprintf_internal_r+0x20f8>
    45e8:	00800ac4 	movi	r2,43
    45ec:	d8802305 	stb	r2,140(sp)
    45f0:	00800244 	movi	r2,9
    45f4:	15807016 	blt	r2,r22,47b8 <___vfprintf_internal_r+0x1fcc>
    45f8:	00800c04 	movi	r2,48
    45fc:	b5800c04 	addi	r22,r22,48
    4600:	d8802345 	stb	r2,141(sp)
    4604:	dd802385 	stb	r22,142(sp)
    4608:	d88023c4 	addi	r2,sp,143
    460c:	df0022c4 	addi	fp,sp,139
    4610:	d8c03317 	ldw	r3,204(sp)
    4614:	1739c83a 	sub	fp,r2,fp
    4618:	d9003317 	ldw	r4,204(sp)
    461c:	e0c7883a 	add	r3,fp,r3
    4620:	df003a15 	stw	fp,232(sp)
    4624:	d8c02e15 	stw	r3,184(sp)
    4628:	00800044 	movi	r2,1
    462c:	1100b30e 	bge	r2,r4,48fc <___vfprintf_internal_r+0x2110>
    4630:	d8c02e17 	ldw	r3,184(sp)
    4634:	18c00044 	addi	r3,r3,1
    4638:	d8c02e15 	stw	r3,184(sp)
    463c:	1805883a 	mov	r2,r3
    4640:	1800ac16 	blt	r3,zero,48f4 <___vfprintf_internal_r+0x2108>
    4644:	d8003215 	stw	zero,200(sp)
    4648:	003e5d06 	br	3fc0 <__alt_data_end+0xff003fc0>
    464c:	d9002c17 	ldw	r4,176(sp)
    4650:	d9801e04 	addi	r6,sp,120
    4654:	b80b883a 	mov	r5,r23
    4658:	00095880 	call	9588 <__sprint_r>
    465c:	1039651e 	bne	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    4660:	dc402617 	ldw	r17,152(sp)
    4664:	d8c02017 	ldw	r3,128(sp)
    4668:	d8801f17 	ldw	r2,124(sp)
    466c:	da000404 	addi	r8,sp,16
    4670:	003ed606 	br	41cc <__alt_data_end+0xff0041cc>
    4674:	582b883a 	mov	r21,r11
    4678:	d8002915 	stw	zero,164(sp)
    467c:	0038bd06 	br	2974 <__alt_data_end+0xff002974>
    4680:	d8802917 	ldw	r2,164(sp)
    4684:	103e071e 	bne	r2,zero,3ea4 <__alt_data_end+0xff003ea4>
    4688:	dc002915 	stw	r16,164(sp)
    468c:	003e0506 	br	3ea4 <__alt_data_end+0xff003ea4>
    4690:	d9002917 	ldw	r4,164(sp)
    4694:	20c00044 	addi	r3,r4,1
    4698:	003e0f06 	br	3ed8 <__alt_data_end+0xff003ed8>
    469c:	01400184 	movi	r5,6
    46a0:	d9402915 	stw	r5,164(sp)
    46a4:	003dff06 	br	3ea4 <__alt_data_end+0xff003ea4>
    46a8:	d8802104 	addi	r2,sp,132
    46ac:	d8800315 	stw	r2,12(sp)
    46b0:	d8802504 	addi	r2,sp,148
    46b4:	d8800215 	stw	r2,8(sp)
    46b8:	d8802604 	addi	r2,sp,152
    46bc:	d8800115 	stw	r2,4(sp)
    46c0:	d8802917 	ldw	r2,164(sp)
    46c4:	d9403617 	ldw	r5,216(sp)
    46c8:	d9002c17 	ldw	r4,176(sp)
    46cc:	d8800015 	stw	r2,0(sp)
    46d0:	01c000c4 	movi	r7,3
    46d4:	980d883a 	mov	r6,r19
    46d8:	da003d15 	stw	r8,244(sp)
    46dc:	0004e100 	call	4e10 <_dtoa_r>
    46e0:	d8c02917 	ldw	r3,164(sp)
    46e4:	da003d17 	ldw	r8,244(sp)
    46e8:	1021883a 	mov	r16,r2
    46ec:	10f9883a 	add	fp,r2,r3
    46f0:	81000007 	ldb	r4,0(r16)
    46f4:	00800c04 	movi	r2,48
    46f8:	20805e26 	beq	r4,r2,4874 <___vfprintf_internal_r+0x2088>
    46fc:	d8c02617 	ldw	r3,152(sp)
    4700:	e0f9883a 	add	fp,fp,r3
    4704:	003e0a06 	br	3f30 <__alt_data_end+0xff003f30>
    4708:	00c00b44 	movi	r3,45
    470c:	24e0003c 	xorhi	r19,r4,32768
    4710:	d8c02a05 	stb	r3,168(sp)
    4714:	003de906 	br	3ebc <__alt_data_end+0xff003ebc>
    4718:	d8c03217 	ldw	r3,200(sp)
    471c:	00c07a0e 	bge	zero,r3,4908 <___vfprintf_internal_r+0x211c>
    4720:	00800044 	movi	r2,1
    4724:	d9003317 	ldw	r4,204(sp)
    4728:	1105883a 	add	r2,r2,r4
    472c:	d8802e15 	stw	r2,184(sp)
    4730:	10004e16 	blt	r2,zero,486c <___vfprintf_internal_r+0x2080>
    4734:	044019c4 	movi	r17,103
    4738:	003e2106 	br	3fc0 <__alt_data_end+0xff003fc0>
    473c:	d9002917 	ldw	r4,164(sp)
    4740:	d8802104 	addi	r2,sp,132
    4744:	d8800315 	stw	r2,12(sp)
    4748:	d9000015 	stw	r4,0(sp)
    474c:	d8802504 	addi	r2,sp,148
    4750:	d9403617 	ldw	r5,216(sp)
    4754:	d9002c17 	ldw	r4,176(sp)
    4758:	d8800215 	stw	r2,8(sp)
    475c:	d8802604 	addi	r2,sp,152
    4760:	d8800115 	stw	r2,4(sp)
    4764:	01c000c4 	movi	r7,3
    4768:	980d883a 	mov	r6,r19
    476c:	da003d15 	stw	r8,244(sp)
    4770:	0004e100 	call	4e10 <_dtoa_r>
    4774:	d8c02917 	ldw	r3,164(sp)
    4778:	da003d17 	ldw	r8,244(sp)
    477c:	1021883a 	mov	r16,r2
    4780:	00801184 	movi	r2,70
    4784:	80f9883a 	add	fp,r16,r3
    4788:	88bfd926 	beq	r17,r2,46f0 <__alt_data_end+0xff0046f0>
    478c:	003de806 	br	3f30 <__alt_data_end+0xff003f30>
    4790:	d9002917 	ldw	r4,164(sp)
    4794:	00c04d0e 	bge	zero,r3,48cc <___vfprintf_internal_r+0x20e0>
    4798:	2000441e 	bne	r4,zero,48ac <___vfprintf_internal_r+0x20c0>
    479c:	9480004c 	andi	r18,r18,1
    47a0:	9000421e 	bne	r18,zero,48ac <___vfprintf_internal_r+0x20c0>
    47a4:	1805883a 	mov	r2,r3
    47a8:	18007016 	blt	r3,zero,496c <___vfprintf_internal_r+0x2180>
    47ac:	d8c03217 	ldw	r3,200(sp)
    47b0:	d8c02e15 	stw	r3,184(sp)
    47b4:	003e0206 	br	3fc0 <__alt_data_end+0xff003fc0>
    47b8:	df0022c4 	addi	fp,sp,139
    47bc:	dc002915 	stw	r16,164(sp)
    47c0:	4027883a 	mov	r19,r8
    47c4:	e021883a 	mov	r16,fp
    47c8:	b009883a 	mov	r4,r22
    47cc:	01400284 	movi	r5,10
    47d0:	000bf3c0 	call	bf3c <__modsi3>
    47d4:	10800c04 	addi	r2,r2,48
    47d8:	843fffc4 	addi	r16,r16,-1
    47dc:	b009883a 	mov	r4,r22
    47e0:	01400284 	movi	r5,10
    47e4:	80800005 	stb	r2,0(r16)
    47e8:	000beb80 	call	beb8 <__divsi3>
    47ec:	102d883a 	mov	r22,r2
    47f0:	00800244 	movi	r2,9
    47f4:	15bff416 	blt	r2,r22,47c8 <__alt_data_end+0xff0047c8>
    47f8:	9811883a 	mov	r8,r19
    47fc:	b0800c04 	addi	r2,r22,48
    4800:	8027883a 	mov	r19,r16
    4804:	997fffc4 	addi	r5,r19,-1
    4808:	98bfffc5 	stb	r2,-1(r19)
    480c:	dc002917 	ldw	r16,164(sp)
    4810:	2f006a2e 	bgeu	r5,fp,49bc <___vfprintf_internal_r+0x21d0>
    4814:	d9c02384 	addi	r7,sp,142
    4818:	3ccfc83a 	sub	r7,r7,r19
    481c:	d9002344 	addi	r4,sp,141
    4820:	e1cf883a 	add	r7,fp,r7
    4824:	00000106 	br	482c <___vfprintf_internal_r+0x2040>
    4828:	28800003 	ldbu	r2,0(r5)
    482c:	20800005 	stb	r2,0(r4)
    4830:	21000044 	addi	r4,r4,1
    4834:	29400044 	addi	r5,r5,1
    4838:	393ffb1e 	bne	r7,r4,4828 <__alt_data_end+0xff004828>
    483c:	d8802304 	addi	r2,sp,140
    4840:	14c5c83a 	sub	r2,r2,r19
    4844:	d8c02344 	addi	r3,sp,141
    4848:	1885883a 	add	r2,r3,r2
    484c:	003f7006 	br	4610 <__alt_data_end+0xff004610>
    4850:	0005883a 	mov	r2,zero
    4854:	003f0f06 	br	4494 <__alt_data_end+0xff004494>
    4858:	d8c03217 	ldw	r3,200(sp)
    485c:	18c00044 	addi	r3,r3,1
    4860:	d8c02e15 	stw	r3,184(sp)
    4864:	1805883a 	mov	r2,r3
    4868:	183fb20e 	bge	r3,zero,4734 <__alt_data_end+0xff004734>
    486c:	0005883a 	mov	r2,zero
    4870:	003fb006 	br	4734 <__alt_data_end+0xff004734>
    4874:	d9003617 	ldw	r4,216(sp)
    4878:	000d883a 	mov	r6,zero
    487c:	000f883a 	mov	r7,zero
    4880:	980b883a 	mov	r5,r19
    4884:	d8c03c15 	stw	r3,240(sp)
    4888:	da003d15 	stw	r8,244(sp)
    488c:	000d2000 	call	d200 <__eqdf2>
    4890:	d8c03c17 	ldw	r3,240(sp)
    4894:	da003d17 	ldw	r8,244(sp)
    4898:	103f9826 	beq	r2,zero,46fc <__alt_data_end+0xff0046fc>
    489c:	00800044 	movi	r2,1
    48a0:	10c7c83a 	sub	r3,r2,r3
    48a4:	d8c02615 	stw	r3,152(sp)
    48a8:	003f9506 	br	4700 <__alt_data_end+0xff004700>
    48ac:	d9002917 	ldw	r4,164(sp)
    48b0:	d8c03217 	ldw	r3,200(sp)
    48b4:	20800044 	addi	r2,r4,1
    48b8:	1885883a 	add	r2,r3,r2
    48bc:	d8802e15 	stw	r2,184(sp)
    48c0:	103dbf0e 	bge	r2,zero,3fc0 <__alt_data_end+0xff003fc0>
    48c4:	0005883a 	mov	r2,zero
    48c8:	003dbd06 	br	3fc0 <__alt_data_end+0xff003fc0>
    48cc:	2000211e 	bne	r4,zero,4954 <___vfprintf_internal_r+0x2168>
    48d0:	9480004c 	andi	r18,r18,1
    48d4:	90001f1e 	bne	r18,zero,4954 <___vfprintf_internal_r+0x2168>
    48d8:	00800044 	movi	r2,1
    48dc:	d8802e15 	stw	r2,184(sp)
    48e0:	003db706 	br	3fc0 <__alt_data_end+0xff003fc0>
    48e4:	00800b44 	movi	r2,45
    48e8:	05adc83a 	sub	r22,zero,r22
    48ec:	d8802305 	stb	r2,140(sp)
    48f0:	003f3f06 	br	45f0 <__alt_data_end+0xff0045f0>
    48f4:	0005883a 	mov	r2,zero
    48f8:	003f5206 	br	4644 <__alt_data_end+0xff004644>
    48fc:	90a4703a 	and	r18,r18,r2
    4900:	903f4e26 	beq	r18,zero,463c <__alt_data_end+0xff00463c>
    4904:	003f4a06 	br	4630 <__alt_data_end+0xff004630>
    4908:	00800084 	movi	r2,2
    490c:	10c5c83a 	sub	r2,r2,r3
    4910:	003f8406 	br	4724 <__alt_data_end+0xff004724>
    4914:	d8802d17 	ldw	r2,180(sp)
    4918:	d9002d17 	ldw	r4,180(sp)
    491c:	ac400043 	ldbu	r17,1(r21)
    4920:	10800017 	ldw	r2,0(r2)
    4924:	582b883a 	mov	r21,r11
    4928:	d8802915 	stw	r2,164(sp)
    492c:	20800104 	addi	r2,r4,4
    4930:	d9002917 	ldw	r4,164(sp)
    4934:	d8802d15 	stw	r2,180(sp)
    4938:	203e7a0e 	bge	r4,zero,4324 <__alt_data_end+0xff004324>
    493c:	8c403fcc 	andi	r17,r17,255
    4940:	00bfffc4 	movi	r2,-1
    4944:	8c40201c 	xori	r17,r17,128
    4948:	d8802915 	stw	r2,164(sp)
    494c:	8c7fe004 	addi	r17,r17,-128
    4950:	00380706 	br	2970 <__alt_data_end+0xff002970>
    4954:	d8c02917 	ldw	r3,164(sp)
    4958:	18c00084 	addi	r3,r3,2
    495c:	d8c02e15 	stw	r3,184(sp)
    4960:	1805883a 	mov	r2,r3
    4964:	183d960e 	bge	r3,zero,3fc0 <__alt_data_end+0xff003fc0>
    4968:	003fd606 	br	48c4 <__alt_data_end+0xff0048c4>
    496c:	0005883a 	mov	r2,zero
    4970:	003f8e06 	br	47ac <__alt_data_end+0xff0047ac>
    4974:	9080004c 	andi	r2,r18,1
    4978:	103f811e 	bne	r2,zero,4780 <__alt_data_end+0xff004780>
    497c:	d8802117 	ldw	r2,132(sp)
    4980:	1405c83a 	sub	r2,r2,r16
    4984:	d8803315 	stw	r2,204(sp)
    4988:	b47ef326 	beq	r22,r17,4558 <__alt_data_end+0xff004558>
    498c:	dd802617 	ldw	r22,152(sp)
    4990:	003f1106 	br	45d8 <__alt_data_end+0xff0045d8>
    4994:	d9c02785 	stb	r7,158(sp)
    4998:	00390406 	br	2dac <__alt_data_end+0xff002dac>
    499c:	d9c02785 	stb	r7,158(sp)
    49a0:	0038d306 	br	2cf0 <__alt_data_end+0xff002cf0>
    49a4:	d9c02785 	stb	r7,158(sp)
    49a8:	003a6106 	br	3330 <__alt_data_end+0xff003330>
    49ac:	d9c02785 	stb	r7,158(sp)
    49b0:	003af806 	br	3594 <__alt_data_end+0xff003594>
    49b4:	0005883a 	mov	r2,zero
    49b8:	003d7e06 	br	3fb4 <__alt_data_end+0xff003fb4>
    49bc:	d8802344 	addi	r2,sp,141
    49c0:	003f1306 	br	4610 <__alt_data_end+0xff004610>
    49c4:	d9c02785 	stb	r7,158(sp)
    49c8:	00392306 	br	2e58 <__alt_data_end+0xff002e58>
    49cc:	d9c02785 	stb	r7,158(sp)
    49d0:	003aa906 	br	3478 <__alt_data_end+0xff003478>
    49d4:	d9c02785 	stb	r7,158(sp)
    49d8:	003a3d06 	br	32d0 <__alt_data_end+0xff0032d0>
    49dc:	d9c02785 	stb	r7,158(sp)
    49e0:	003aca06 	br	350c <__alt_data_end+0xff00350c>

000049e4 <__vfprintf_internal>:
    49e4:	00800074 	movhi	r2,1
    49e8:	10889604 	addi	r2,r2,8792
    49ec:	300f883a 	mov	r7,r6
    49f0:	280d883a 	mov	r6,r5
    49f4:	200b883a 	mov	r5,r4
    49f8:	11000017 	ldw	r4,0(r2)
    49fc:	00027ec1 	jmpi	27ec <___vfprintf_internal_r>

00004a00 <__sbprintf>:
    4a00:	2880030b 	ldhu	r2,12(r5)
    4a04:	2ac01917 	ldw	r11,100(r5)
    4a08:	2a80038b 	ldhu	r10,14(r5)
    4a0c:	2a400717 	ldw	r9,28(r5)
    4a10:	2a000917 	ldw	r8,36(r5)
    4a14:	defee204 	addi	sp,sp,-1144
    4a18:	00c10004 	movi	r3,1024
    4a1c:	dc011a15 	stw	r16,1128(sp)
    4a20:	10bfff4c 	andi	r2,r2,65533
    4a24:	2821883a 	mov	r16,r5
    4a28:	d8cb883a 	add	r5,sp,r3
    4a2c:	dc811c15 	stw	r18,1136(sp)
    4a30:	dc411b15 	stw	r17,1132(sp)
    4a34:	dfc11d15 	stw	ra,1140(sp)
    4a38:	2025883a 	mov	r18,r4
    4a3c:	d881030d 	sth	r2,1036(sp)
    4a40:	dac11915 	stw	r11,1124(sp)
    4a44:	da81038d 	sth	r10,1038(sp)
    4a48:	da410715 	stw	r9,1052(sp)
    4a4c:	da010915 	stw	r8,1060(sp)
    4a50:	dec10015 	stw	sp,1024(sp)
    4a54:	dec10415 	stw	sp,1040(sp)
    4a58:	d8c10215 	stw	r3,1032(sp)
    4a5c:	d8c10515 	stw	r3,1044(sp)
    4a60:	d8010615 	stw	zero,1048(sp)
    4a64:	00027ec0 	call	27ec <___vfprintf_internal_r>
    4a68:	1023883a 	mov	r17,r2
    4a6c:	10000416 	blt	r2,zero,4a80 <__sbprintf+0x80>
    4a70:	d9410004 	addi	r5,sp,1024
    4a74:	9009883a 	mov	r4,r18
    4a78:	00066b40 	call	66b4 <_fflush_r>
    4a7c:	10000d1e 	bne	r2,zero,4ab4 <__sbprintf+0xb4>
    4a80:	d881030b 	ldhu	r2,1036(sp)
    4a84:	1080100c 	andi	r2,r2,64
    4a88:	10000326 	beq	r2,zero,4a98 <__sbprintf+0x98>
    4a8c:	8080030b 	ldhu	r2,12(r16)
    4a90:	10801014 	ori	r2,r2,64
    4a94:	8080030d 	sth	r2,12(r16)
    4a98:	8805883a 	mov	r2,r17
    4a9c:	dfc11d17 	ldw	ra,1140(sp)
    4aa0:	dc811c17 	ldw	r18,1136(sp)
    4aa4:	dc411b17 	ldw	r17,1132(sp)
    4aa8:	dc011a17 	ldw	r16,1128(sp)
    4aac:	dec11e04 	addi	sp,sp,1144
    4ab0:	f800283a 	ret
    4ab4:	047fffc4 	movi	r17,-1
    4ab8:	003ff106 	br	4a80 <__alt_data_end+0xff004a80>

00004abc <__swsetup_r>:
    4abc:	00800074 	movhi	r2,1
    4ac0:	defffd04 	addi	sp,sp,-12
    4ac4:	10889604 	addi	r2,r2,8792
    4ac8:	dc400115 	stw	r17,4(sp)
    4acc:	2023883a 	mov	r17,r4
    4ad0:	11000017 	ldw	r4,0(r2)
    4ad4:	dc000015 	stw	r16,0(sp)
    4ad8:	dfc00215 	stw	ra,8(sp)
    4adc:	2821883a 	mov	r16,r5
    4ae0:	20000226 	beq	r4,zero,4aec <__swsetup_r+0x30>
    4ae4:	20800e17 	ldw	r2,56(r4)
    4ae8:	10003126 	beq	r2,zero,4bb0 <__swsetup_r+0xf4>
    4aec:	8080030b 	ldhu	r2,12(r16)
    4af0:	10c0020c 	andi	r3,r2,8
    4af4:	1009883a 	mov	r4,r2
    4af8:	18000f26 	beq	r3,zero,4b38 <__swsetup_r+0x7c>
    4afc:	80c00417 	ldw	r3,16(r16)
    4b00:	18001526 	beq	r3,zero,4b58 <__swsetup_r+0x9c>
    4b04:	1100004c 	andi	r4,r2,1
    4b08:	20001c1e 	bne	r4,zero,4b7c <__swsetup_r+0xc0>
    4b0c:	1080008c 	andi	r2,r2,2
    4b10:	1000291e 	bne	r2,zero,4bb8 <__swsetup_r+0xfc>
    4b14:	80800517 	ldw	r2,20(r16)
    4b18:	80800215 	stw	r2,8(r16)
    4b1c:	18001c26 	beq	r3,zero,4b90 <__swsetup_r+0xd4>
    4b20:	0005883a 	mov	r2,zero
    4b24:	dfc00217 	ldw	ra,8(sp)
    4b28:	dc400117 	ldw	r17,4(sp)
    4b2c:	dc000017 	ldw	r16,0(sp)
    4b30:	dec00304 	addi	sp,sp,12
    4b34:	f800283a 	ret
    4b38:	2080040c 	andi	r2,r4,16
    4b3c:	10002e26 	beq	r2,zero,4bf8 <__swsetup_r+0x13c>
    4b40:	2080010c 	andi	r2,r4,4
    4b44:	10001e1e 	bne	r2,zero,4bc0 <__swsetup_r+0x104>
    4b48:	80c00417 	ldw	r3,16(r16)
    4b4c:	20800214 	ori	r2,r4,8
    4b50:	8080030d 	sth	r2,12(r16)
    4b54:	183feb1e 	bne	r3,zero,4b04 <__alt_data_end+0xff004b04>
    4b58:	1100a00c 	andi	r4,r2,640
    4b5c:	01408004 	movi	r5,512
    4b60:	217fe826 	beq	r4,r5,4b04 <__alt_data_end+0xff004b04>
    4b64:	800b883a 	mov	r5,r16
    4b68:	8809883a 	mov	r4,r17
    4b6c:	00076340 	call	7634 <__smakebuf_r>
    4b70:	8080030b 	ldhu	r2,12(r16)
    4b74:	80c00417 	ldw	r3,16(r16)
    4b78:	003fe206 	br	4b04 <__alt_data_end+0xff004b04>
    4b7c:	80800517 	ldw	r2,20(r16)
    4b80:	80000215 	stw	zero,8(r16)
    4b84:	0085c83a 	sub	r2,zero,r2
    4b88:	80800615 	stw	r2,24(r16)
    4b8c:	183fe41e 	bne	r3,zero,4b20 <__alt_data_end+0xff004b20>
    4b90:	80c0030b 	ldhu	r3,12(r16)
    4b94:	0005883a 	mov	r2,zero
    4b98:	1900200c 	andi	r4,r3,128
    4b9c:	203fe126 	beq	r4,zero,4b24 <__alt_data_end+0xff004b24>
    4ba0:	18c01014 	ori	r3,r3,64
    4ba4:	80c0030d 	sth	r3,12(r16)
    4ba8:	00bfffc4 	movi	r2,-1
    4bac:	003fdd06 	br	4b24 <__alt_data_end+0xff004b24>
    4bb0:	0006a900 	call	6a90 <__sinit>
    4bb4:	003fcd06 	br	4aec <__alt_data_end+0xff004aec>
    4bb8:	0005883a 	mov	r2,zero
    4bbc:	003fd606 	br	4b18 <__alt_data_end+0xff004b18>
    4bc0:	81400c17 	ldw	r5,48(r16)
    4bc4:	28000626 	beq	r5,zero,4be0 <__swsetup_r+0x124>
    4bc8:	80801004 	addi	r2,r16,64
    4bcc:	28800326 	beq	r5,r2,4bdc <__swsetup_r+0x120>
    4bd0:	8809883a 	mov	r4,r17
    4bd4:	0006c040 	call	6c04 <_free_r>
    4bd8:	8100030b 	ldhu	r4,12(r16)
    4bdc:	80000c15 	stw	zero,48(r16)
    4be0:	80c00417 	ldw	r3,16(r16)
    4be4:	00bff6c4 	movi	r2,-37
    4be8:	1108703a 	and	r4,r2,r4
    4bec:	80000115 	stw	zero,4(r16)
    4bf0:	80c00015 	stw	r3,0(r16)
    4bf4:	003fd506 	br	4b4c <__alt_data_end+0xff004b4c>
    4bf8:	00800244 	movi	r2,9
    4bfc:	88800015 	stw	r2,0(r17)
    4c00:	20801014 	ori	r2,r4,64
    4c04:	8080030d 	sth	r2,12(r16)
    4c08:	00bfffc4 	movi	r2,-1
    4c0c:	003fc506 	br	4b24 <__alt_data_end+0xff004b24>

00004c10 <quorem>:
    4c10:	defff704 	addi	sp,sp,-36
    4c14:	dc800215 	stw	r18,8(sp)
    4c18:	20800417 	ldw	r2,16(r4)
    4c1c:	2c800417 	ldw	r18,16(r5)
    4c20:	dfc00815 	stw	ra,32(sp)
    4c24:	ddc00715 	stw	r23,28(sp)
    4c28:	dd800615 	stw	r22,24(sp)
    4c2c:	dd400515 	stw	r21,20(sp)
    4c30:	dd000415 	stw	r20,16(sp)
    4c34:	dcc00315 	stw	r19,12(sp)
    4c38:	dc400115 	stw	r17,4(sp)
    4c3c:	dc000015 	stw	r16,0(sp)
    4c40:	14807116 	blt	r2,r18,4e08 <quorem+0x1f8>
    4c44:	94bfffc4 	addi	r18,r18,-1
    4c48:	94ad883a 	add	r22,r18,r18
    4c4c:	b5ad883a 	add	r22,r22,r22
    4c50:	2c400504 	addi	r17,r5,20
    4c54:	8da9883a 	add	r20,r17,r22
    4c58:	25400504 	addi	r21,r4,20
    4c5c:	282f883a 	mov	r23,r5
    4c60:	adad883a 	add	r22,r21,r22
    4c64:	a1400017 	ldw	r5,0(r20)
    4c68:	2021883a 	mov	r16,r4
    4c6c:	b1000017 	ldw	r4,0(r22)
    4c70:	29400044 	addi	r5,r5,1
    4c74:	000bfb00 	call	bfb0 <__udivsi3>
    4c78:	1027883a 	mov	r19,r2
    4c7c:	10002c26 	beq	r2,zero,4d30 <quorem+0x120>
    4c80:	a813883a 	mov	r9,r21
    4c84:	880b883a 	mov	r5,r17
    4c88:	0009883a 	mov	r4,zero
    4c8c:	000d883a 	mov	r6,zero
    4c90:	2a000017 	ldw	r8,0(r5)
    4c94:	49c00017 	ldw	r7,0(r9)
    4c98:	29400104 	addi	r5,r5,4
    4c9c:	40bfffcc 	andi	r2,r8,65535
    4ca0:	14c5383a 	mul	r2,r2,r19
    4ca4:	4010d43a 	srli	r8,r8,16
    4ca8:	38ffffcc 	andi	r3,r7,65535
    4cac:	1105883a 	add	r2,r2,r4
    4cb0:	1008d43a 	srli	r4,r2,16
    4cb4:	44d1383a 	mul	r8,r8,r19
    4cb8:	198d883a 	add	r6,r3,r6
    4cbc:	10ffffcc 	andi	r3,r2,65535
    4cc0:	30c7c83a 	sub	r3,r6,r3
    4cc4:	380ed43a 	srli	r7,r7,16
    4cc8:	4105883a 	add	r2,r8,r4
    4ccc:	180dd43a 	srai	r6,r3,16
    4cd0:	113fffcc 	andi	r4,r2,65535
    4cd4:	390fc83a 	sub	r7,r7,r4
    4cd8:	398d883a 	add	r6,r7,r6
    4cdc:	300e943a 	slli	r7,r6,16
    4ce0:	18ffffcc 	andi	r3,r3,65535
    4ce4:	1008d43a 	srli	r4,r2,16
    4ce8:	38ceb03a 	or	r7,r7,r3
    4cec:	49c00015 	stw	r7,0(r9)
    4cf0:	300dd43a 	srai	r6,r6,16
    4cf4:	4a400104 	addi	r9,r9,4
    4cf8:	a17fe52e 	bgeu	r20,r5,4c90 <__alt_data_end+0xff004c90>
    4cfc:	b0800017 	ldw	r2,0(r22)
    4d00:	10000b1e 	bne	r2,zero,4d30 <quorem+0x120>
    4d04:	b0bfff04 	addi	r2,r22,-4
    4d08:	a880082e 	bgeu	r21,r2,4d2c <quorem+0x11c>
    4d0c:	b0ffff17 	ldw	r3,-4(r22)
    4d10:	18000326 	beq	r3,zero,4d20 <quorem+0x110>
    4d14:	00000506 	br	4d2c <quorem+0x11c>
    4d18:	10c00017 	ldw	r3,0(r2)
    4d1c:	1800031e 	bne	r3,zero,4d2c <quorem+0x11c>
    4d20:	10bfff04 	addi	r2,r2,-4
    4d24:	94bfffc4 	addi	r18,r18,-1
    4d28:	a8bffb36 	bltu	r21,r2,4d18 <__alt_data_end+0xff004d18>
    4d2c:	84800415 	stw	r18,16(r16)
    4d30:	b80b883a 	mov	r5,r23
    4d34:	8009883a 	mov	r4,r16
    4d38:	00085680 	call	8568 <__mcmp>
    4d3c:	10002616 	blt	r2,zero,4dd8 <quorem+0x1c8>
    4d40:	9cc00044 	addi	r19,r19,1
    4d44:	a805883a 	mov	r2,r21
    4d48:	000b883a 	mov	r5,zero
    4d4c:	11000017 	ldw	r4,0(r2)
    4d50:	89800017 	ldw	r6,0(r17)
    4d54:	10800104 	addi	r2,r2,4
    4d58:	20ffffcc 	andi	r3,r4,65535
    4d5c:	194b883a 	add	r5,r3,r5
    4d60:	30ffffcc 	andi	r3,r6,65535
    4d64:	28c7c83a 	sub	r3,r5,r3
    4d68:	300cd43a 	srli	r6,r6,16
    4d6c:	2008d43a 	srli	r4,r4,16
    4d70:	180bd43a 	srai	r5,r3,16
    4d74:	18ffffcc 	andi	r3,r3,65535
    4d78:	2189c83a 	sub	r4,r4,r6
    4d7c:	2149883a 	add	r4,r4,r5
    4d80:	200c943a 	slli	r6,r4,16
    4d84:	8c400104 	addi	r17,r17,4
    4d88:	200bd43a 	srai	r5,r4,16
    4d8c:	30c6b03a 	or	r3,r6,r3
    4d90:	10ffff15 	stw	r3,-4(r2)
    4d94:	a47fed2e 	bgeu	r20,r17,4d4c <__alt_data_end+0xff004d4c>
    4d98:	9485883a 	add	r2,r18,r18
    4d9c:	1085883a 	add	r2,r2,r2
    4da0:	a887883a 	add	r3,r21,r2
    4da4:	18800017 	ldw	r2,0(r3)
    4da8:	10000b1e 	bne	r2,zero,4dd8 <quorem+0x1c8>
    4dac:	18bfff04 	addi	r2,r3,-4
    4db0:	a880082e 	bgeu	r21,r2,4dd4 <quorem+0x1c4>
    4db4:	18ffff17 	ldw	r3,-4(r3)
    4db8:	18000326 	beq	r3,zero,4dc8 <quorem+0x1b8>
    4dbc:	00000506 	br	4dd4 <quorem+0x1c4>
    4dc0:	10c00017 	ldw	r3,0(r2)
    4dc4:	1800031e 	bne	r3,zero,4dd4 <quorem+0x1c4>
    4dc8:	10bfff04 	addi	r2,r2,-4
    4dcc:	94bfffc4 	addi	r18,r18,-1
    4dd0:	a8bffb36 	bltu	r21,r2,4dc0 <__alt_data_end+0xff004dc0>
    4dd4:	84800415 	stw	r18,16(r16)
    4dd8:	9805883a 	mov	r2,r19
    4ddc:	dfc00817 	ldw	ra,32(sp)
    4de0:	ddc00717 	ldw	r23,28(sp)
    4de4:	dd800617 	ldw	r22,24(sp)
    4de8:	dd400517 	ldw	r21,20(sp)
    4dec:	dd000417 	ldw	r20,16(sp)
    4df0:	dcc00317 	ldw	r19,12(sp)
    4df4:	dc800217 	ldw	r18,8(sp)
    4df8:	dc400117 	ldw	r17,4(sp)
    4dfc:	dc000017 	ldw	r16,0(sp)
    4e00:	dec00904 	addi	sp,sp,36
    4e04:	f800283a 	ret
    4e08:	0005883a 	mov	r2,zero
    4e0c:	003ff306 	br	4ddc <__alt_data_end+0xff004ddc>

00004e10 <_dtoa_r>:
    4e10:	20801017 	ldw	r2,64(r4)
    4e14:	deffde04 	addi	sp,sp,-136
    4e18:	df002015 	stw	fp,128(sp)
    4e1c:	dcc01b15 	stw	r19,108(sp)
    4e20:	dc801a15 	stw	r18,104(sp)
    4e24:	dc401915 	stw	r17,100(sp)
    4e28:	dc001815 	stw	r16,96(sp)
    4e2c:	dfc02115 	stw	ra,132(sp)
    4e30:	ddc01f15 	stw	r23,124(sp)
    4e34:	dd801e15 	stw	r22,120(sp)
    4e38:	dd401d15 	stw	r21,116(sp)
    4e3c:	dd001c15 	stw	r20,112(sp)
    4e40:	d9c00315 	stw	r7,12(sp)
    4e44:	2039883a 	mov	fp,r4
    4e48:	3023883a 	mov	r17,r6
    4e4c:	2825883a 	mov	r18,r5
    4e50:	dc002417 	ldw	r16,144(sp)
    4e54:	3027883a 	mov	r19,r6
    4e58:	10000826 	beq	r2,zero,4e7c <_dtoa_r+0x6c>
    4e5c:	21801117 	ldw	r6,68(r4)
    4e60:	00c00044 	movi	r3,1
    4e64:	100b883a 	mov	r5,r2
    4e68:	1986983a 	sll	r3,r3,r6
    4e6c:	11800115 	stw	r6,4(r2)
    4e70:	10c00215 	stw	r3,8(r2)
    4e74:	0007d480 	call	7d48 <_Bfree>
    4e78:	e0001015 	stw	zero,64(fp)
    4e7c:	88002e16 	blt	r17,zero,4f38 <_dtoa_r+0x128>
    4e80:	80000015 	stw	zero,0(r16)
    4e84:	889ffc2c 	andhi	r2,r17,32752
    4e88:	00dffc34 	movhi	r3,32752
    4e8c:	10c01c26 	beq	r2,r3,4f00 <_dtoa_r+0xf0>
    4e90:	000d883a 	mov	r6,zero
    4e94:	000f883a 	mov	r7,zero
    4e98:	9009883a 	mov	r4,r18
    4e9c:	980b883a 	mov	r5,r19
    4ea0:	000d2000 	call	d200 <__eqdf2>
    4ea4:	10002b1e 	bne	r2,zero,4f54 <_dtoa_r+0x144>
    4ea8:	d9c02317 	ldw	r7,140(sp)
    4eac:	00800044 	movi	r2,1
    4eb0:	38800015 	stw	r2,0(r7)
    4eb4:	d8802517 	ldw	r2,148(sp)
    4eb8:	10019e26 	beq	r2,zero,5534 <_dtoa_r+0x724>
    4ebc:	d8c02517 	ldw	r3,148(sp)
    4ec0:	00800074 	movhi	r2,1
    4ec4:	10813d44 	addi	r2,r2,1269
    4ec8:	18800015 	stw	r2,0(r3)
    4ecc:	10bfffc4 	addi	r2,r2,-1
    4ed0:	dfc02117 	ldw	ra,132(sp)
    4ed4:	df002017 	ldw	fp,128(sp)
    4ed8:	ddc01f17 	ldw	r23,124(sp)
    4edc:	dd801e17 	ldw	r22,120(sp)
    4ee0:	dd401d17 	ldw	r21,116(sp)
    4ee4:	dd001c17 	ldw	r20,112(sp)
    4ee8:	dcc01b17 	ldw	r19,108(sp)
    4eec:	dc801a17 	ldw	r18,104(sp)
    4ef0:	dc401917 	ldw	r17,100(sp)
    4ef4:	dc001817 	ldw	r16,96(sp)
    4ef8:	dec02204 	addi	sp,sp,136
    4efc:	f800283a 	ret
    4f00:	d8c02317 	ldw	r3,140(sp)
    4f04:	0089c3c4 	movi	r2,9999
    4f08:	18800015 	stw	r2,0(r3)
    4f0c:	90017726 	beq	r18,zero,54ec <_dtoa_r+0x6dc>
    4f10:	00800074 	movhi	r2,1
    4f14:	10814904 	addi	r2,r2,1316
    4f18:	d9002517 	ldw	r4,148(sp)
    4f1c:	203fec26 	beq	r4,zero,4ed0 <__alt_data_end+0xff004ed0>
    4f20:	10c000c7 	ldb	r3,3(r2)
    4f24:	1801781e 	bne	r3,zero,5508 <_dtoa_r+0x6f8>
    4f28:	10c000c4 	addi	r3,r2,3
    4f2c:	d9802517 	ldw	r6,148(sp)
    4f30:	30c00015 	stw	r3,0(r6)
    4f34:	003fe606 	br	4ed0 <__alt_data_end+0xff004ed0>
    4f38:	04e00034 	movhi	r19,32768
    4f3c:	9cffffc4 	addi	r19,r19,-1
    4f40:	00800044 	movi	r2,1
    4f44:	8ce6703a 	and	r19,r17,r19
    4f48:	80800015 	stw	r2,0(r16)
    4f4c:	9823883a 	mov	r17,r19
    4f50:	003fcc06 	br	4e84 <__alt_data_end+0xff004e84>
    4f54:	d8800204 	addi	r2,sp,8
    4f58:	d8800015 	stw	r2,0(sp)
    4f5c:	d9c00104 	addi	r7,sp,4
    4f60:	900b883a 	mov	r5,r18
    4f64:	980d883a 	mov	r6,r19
    4f68:	e009883a 	mov	r4,fp
    4f6c:	8820d53a 	srli	r16,r17,20
    4f70:	00089340 	call	8934 <__d2b>
    4f74:	d8800915 	stw	r2,36(sp)
    4f78:	8001651e 	bne	r16,zero,5510 <_dtoa_r+0x700>
    4f7c:	dd800217 	ldw	r22,8(sp)
    4f80:	dc000117 	ldw	r16,4(sp)
    4f84:	00800804 	movi	r2,32
    4f88:	b421883a 	add	r16,r22,r16
    4f8c:	80c10c84 	addi	r3,r16,1074
    4f90:	10c2d10e 	bge	r2,r3,5ad8 <_dtoa_r+0xcc8>
    4f94:	00801004 	movi	r2,64
    4f98:	81010484 	addi	r4,r16,1042
    4f9c:	10c7c83a 	sub	r3,r2,r3
    4fa0:	9108d83a 	srl	r4,r18,r4
    4fa4:	88e2983a 	sll	r17,r17,r3
    4fa8:	2448b03a 	or	r4,r4,r17
    4fac:	000e5c80 	call	e5c8 <__floatunsidf>
    4fb0:	017f8434 	movhi	r5,65040
    4fb4:	01800044 	movi	r6,1
    4fb8:	1009883a 	mov	r4,r2
    4fbc:	194b883a 	add	r5,r3,r5
    4fc0:	843fffc4 	addi	r16,r16,-1
    4fc4:	d9801115 	stw	r6,68(sp)
    4fc8:	000d883a 	mov	r6,zero
    4fcc:	01cffe34 	movhi	r7,16376
    4fd0:	000db700 	call	db70 <__subdf3>
    4fd4:	0198dbf4 	movhi	r6,25455
    4fd8:	01cff4f4 	movhi	r7,16339
    4fdc:	3190d844 	addi	r6,r6,17249
    4fe0:	39e1e9c4 	addi	r7,r7,-30809
    4fe4:	1009883a 	mov	r4,r2
    4fe8:	180b883a 	mov	r5,r3
    4fec:	000d4580 	call	d458 <__muldf3>
    4ff0:	01a2d874 	movhi	r6,35681
    4ff4:	01cff1f4 	movhi	r7,16327
    4ff8:	31b22cc4 	addi	r6,r6,-14157
    4ffc:	39e28a04 	addi	r7,r7,-30168
    5000:	180b883a 	mov	r5,r3
    5004:	1009883a 	mov	r4,r2
    5008:	000c06c0 	call	c06c <__adddf3>
    500c:	8009883a 	mov	r4,r16
    5010:	1029883a 	mov	r20,r2
    5014:	1823883a 	mov	r17,r3
    5018:	000e4ec0 	call	e4ec <__floatsidf>
    501c:	019427f4 	movhi	r6,20639
    5020:	01cff4f4 	movhi	r7,16339
    5024:	319e7ec4 	addi	r6,r6,31227
    5028:	39d104c4 	addi	r7,r7,17427
    502c:	1009883a 	mov	r4,r2
    5030:	180b883a 	mov	r5,r3
    5034:	000d4580 	call	d458 <__muldf3>
    5038:	100d883a 	mov	r6,r2
    503c:	180f883a 	mov	r7,r3
    5040:	a009883a 	mov	r4,r20
    5044:	880b883a 	mov	r5,r17
    5048:	000c06c0 	call	c06c <__adddf3>
    504c:	1009883a 	mov	r4,r2
    5050:	180b883a 	mov	r5,r3
    5054:	1029883a 	mov	r20,r2
    5058:	1823883a 	mov	r17,r3
    505c:	000e46c0 	call	e46c <__fixdfsi>
    5060:	000d883a 	mov	r6,zero
    5064:	000f883a 	mov	r7,zero
    5068:	a009883a 	mov	r4,r20
    506c:	880b883a 	mov	r5,r17
    5070:	d8800515 	stw	r2,20(sp)
    5074:	000d3640 	call	d364 <__ledf2>
    5078:	10028716 	blt	r2,zero,5a98 <_dtoa_r+0xc88>
    507c:	d8c00517 	ldw	r3,20(sp)
    5080:	00800584 	movi	r2,22
    5084:	10c27536 	bltu	r2,r3,5a5c <_dtoa_r+0xc4c>
    5088:	180490fa 	slli	r2,r3,3
    508c:	00c00074 	movhi	r3,1
    5090:	18c16504 	addi	r3,r3,1428
    5094:	1885883a 	add	r2,r3,r2
    5098:	11000017 	ldw	r4,0(r2)
    509c:	11400117 	ldw	r5,4(r2)
    50a0:	900d883a 	mov	r6,r18
    50a4:	980f883a 	mov	r7,r19
    50a8:	000d2880 	call	d288 <__gedf2>
    50ac:	00828d0e 	bge	zero,r2,5ae4 <_dtoa_r+0xcd4>
    50b0:	d9000517 	ldw	r4,20(sp)
    50b4:	d8000e15 	stw	zero,56(sp)
    50b8:	213fffc4 	addi	r4,r4,-1
    50bc:	d9000515 	stw	r4,20(sp)
    50c0:	b42dc83a 	sub	r22,r22,r16
    50c4:	b5bfffc4 	addi	r22,r22,-1
    50c8:	b0026f16 	blt	r22,zero,5a88 <_dtoa_r+0xc78>
    50cc:	d8000815 	stw	zero,32(sp)
    50d0:	d9c00517 	ldw	r7,20(sp)
    50d4:	38026416 	blt	r7,zero,5a68 <_dtoa_r+0xc58>
    50d8:	b1ed883a 	add	r22,r22,r7
    50dc:	d9c00d15 	stw	r7,52(sp)
    50e0:	d8000a15 	stw	zero,40(sp)
    50e4:	d9800317 	ldw	r6,12(sp)
    50e8:	00800244 	movi	r2,9
    50ec:	11811436 	bltu	r2,r6,5540 <_dtoa_r+0x730>
    50f0:	00800144 	movi	r2,5
    50f4:	1184e10e 	bge	r2,r6,647c <_dtoa_r+0x166c>
    50f8:	31bfff04 	addi	r6,r6,-4
    50fc:	d9800315 	stw	r6,12(sp)
    5100:	0023883a 	mov	r17,zero
    5104:	d9800317 	ldw	r6,12(sp)
    5108:	008000c4 	movi	r2,3
    510c:	30836726 	beq	r6,r2,5eac <_dtoa_r+0x109c>
    5110:	1183410e 	bge	r2,r6,5e18 <_dtoa_r+0x1008>
    5114:	d9c00317 	ldw	r7,12(sp)
    5118:	00800104 	movi	r2,4
    511c:	38827c26 	beq	r7,r2,5b10 <_dtoa_r+0xd00>
    5120:	00800144 	movi	r2,5
    5124:	3884c41e 	bne	r7,r2,6438 <_dtoa_r+0x1628>
    5128:	00800044 	movi	r2,1
    512c:	d8800b15 	stw	r2,44(sp)
    5130:	d8c00517 	ldw	r3,20(sp)
    5134:	d9002217 	ldw	r4,136(sp)
    5138:	1907883a 	add	r3,r3,r4
    513c:	19800044 	addi	r6,r3,1
    5140:	d8c00c15 	stw	r3,48(sp)
    5144:	d9800615 	stw	r6,24(sp)
    5148:	0183a40e 	bge	zero,r6,5fdc <_dtoa_r+0x11cc>
    514c:	d9800617 	ldw	r6,24(sp)
    5150:	3021883a 	mov	r16,r6
    5154:	e0001115 	stw	zero,68(fp)
    5158:	008005c4 	movi	r2,23
    515c:	1184c92e 	bgeu	r2,r6,6484 <_dtoa_r+0x1674>
    5160:	00c00044 	movi	r3,1
    5164:	00800104 	movi	r2,4
    5168:	1085883a 	add	r2,r2,r2
    516c:	11000504 	addi	r4,r2,20
    5170:	180b883a 	mov	r5,r3
    5174:	18c00044 	addi	r3,r3,1
    5178:	313ffb2e 	bgeu	r6,r4,5168 <__alt_data_end+0xff005168>
    517c:	e1401115 	stw	r5,68(fp)
    5180:	e009883a 	mov	r4,fp
    5184:	0007ca00 	call	7ca0 <_Balloc>
    5188:	d8800715 	stw	r2,28(sp)
    518c:	e0801015 	stw	r2,64(fp)
    5190:	00800384 	movi	r2,14
    5194:	1400f736 	bltu	r2,r16,5574 <_dtoa_r+0x764>
    5198:	8800f626 	beq	r17,zero,5574 <_dtoa_r+0x764>
    519c:	d9c00517 	ldw	r7,20(sp)
    51a0:	01c39a0e 	bge	zero,r7,600c <_dtoa_r+0x11fc>
    51a4:	388003cc 	andi	r2,r7,15
    51a8:	100490fa 	slli	r2,r2,3
    51ac:	382bd13a 	srai	r21,r7,4
    51b0:	00c00074 	movhi	r3,1
    51b4:	18c16504 	addi	r3,r3,1428
    51b8:	1885883a 	add	r2,r3,r2
    51bc:	a8c0040c 	andi	r3,r21,16
    51c0:	12400017 	ldw	r9,0(r2)
    51c4:	12000117 	ldw	r8,4(r2)
    51c8:	18037926 	beq	r3,zero,5fb0 <_dtoa_r+0x11a0>
    51cc:	00800074 	movhi	r2,1
    51d0:	10815b04 	addi	r2,r2,1388
    51d4:	11800817 	ldw	r6,32(r2)
    51d8:	11c00917 	ldw	r7,36(r2)
    51dc:	9009883a 	mov	r4,r18
    51e0:	980b883a 	mov	r5,r19
    51e4:	da001715 	stw	r8,92(sp)
    51e8:	da401615 	stw	r9,88(sp)
    51ec:	000c9180 	call	c918 <__divdf3>
    51f0:	da001717 	ldw	r8,92(sp)
    51f4:	da401617 	ldw	r9,88(sp)
    51f8:	ad4003cc 	andi	r21,r21,15
    51fc:	040000c4 	movi	r16,3
    5200:	1023883a 	mov	r17,r2
    5204:	1829883a 	mov	r20,r3
    5208:	a8001126 	beq	r21,zero,5250 <_dtoa_r+0x440>
    520c:	05c00074 	movhi	r23,1
    5210:	bdc15b04 	addi	r23,r23,1388
    5214:	4805883a 	mov	r2,r9
    5218:	4007883a 	mov	r3,r8
    521c:	a980004c 	andi	r6,r21,1
    5220:	1009883a 	mov	r4,r2
    5224:	a82bd07a 	srai	r21,r21,1
    5228:	180b883a 	mov	r5,r3
    522c:	30000426 	beq	r6,zero,5240 <_dtoa_r+0x430>
    5230:	b9800017 	ldw	r6,0(r23)
    5234:	b9c00117 	ldw	r7,4(r23)
    5238:	84000044 	addi	r16,r16,1
    523c:	000d4580 	call	d458 <__muldf3>
    5240:	bdc00204 	addi	r23,r23,8
    5244:	a83ff51e 	bne	r21,zero,521c <__alt_data_end+0xff00521c>
    5248:	1013883a 	mov	r9,r2
    524c:	1811883a 	mov	r8,r3
    5250:	480d883a 	mov	r6,r9
    5254:	400f883a 	mov	r7,r8
    5258:	8809883a 	mov	r4,r17
    525c:	a00b883a 	mov	r5,r20
    5260:	000c9180 	call	c918 <__divdf3>
    5264:	d8800f15 	stw	r2,60(sp)
    5268:	d8c01015 	stw	r3,64(sp)
    526c:	d8c00e17 	ldw	r3,56(sp)
    5270:	18000626 	beq	r3,zero,528c <_dtoa_r+0x47c>
    5274:	d9000f17 	ldw	r4,60(sp)
    5278:	d9401017 	ldw	r5,64(sp)
    527c:	000d883a 	mov	r6,zero
    5280:	01cffc34 	movhi	r7,16368
    5284:	000d3640 	call	d364 <__ledf2>
    5288:	10040b16 	blt	r2,zero,62b8 <_dtoa_r+0x14a8>
    528c:	8009883a 	mov	r4,r16
    5290:	000e4ec0 	call	e4ec <__floatsidf>
    5294:	d9800f17 	ldw	r6,60(sp)
    5298:	d9c01017 	ldw	r7,64(sp)
    529c:	1009883a 	mov	r4,r2
    52a0:	180b883a 	mov	r5,r3
    52a4:	000d4580 	call	d458 <__muldf3>
    52a8:	000d883a 	mov	r6,zero
    52ac:	01d00734 	movhi	r7,16412
    52b0:	1009883a 	mov	r4,r2
    52b4:	180b883a 	mov	r5,r3
    52b8:	000c06c0 	call	c06c <__adddf3>
    52bc:	1021883a 	mov	r16,r2
    52c0:	d8800617 	ldw	r2,24(sp)
    52c4:	047f3034 	movhi	r17,64704
    52c8:	1c63883a 	add	r17,r3,r17
    52cc:	10031826 	beq	r2,zero,5f30 <_dtoa_r+0x1120>
    52d0:	d8c00517 	ldw	r3,20(sp)
    52d4:	db000617 	ldw	r12,24(sp)
    52d8:	d8c01315 	stw	r3,76(sp)
    52dc:	d9000b17 	ldw	r4,44(sp)
    52e0:	20038f26 	beq	r4,zero,6120 <_dtoa_r+0x1310>
    52e4:	60bfffc4 	addi	r2,r12,-1
    52e8:	100490fa 	slli	r2,r2,3
    52ec:	00c00074 	movhi	r3,1
    52f0:	18c16504 	addi	r3,r3,1428
    52f4:	1885883a 	add	r2,r3,r2
    52f8:	11800017 	ldw	r6,0(r2)
    52fc:	11c00117 	ldw	r7,4(r2)
    5300:	d8800717 	ldw	r2,28(sp)
    5304:	0009883a 	mov	r4,zero
    5308:	014ff834 	movhi	r5,16352
    530c:	db001615 	stw	r12,88(sp)
    5310:	15c00044 	addi	r23,r2,1
    5314:	000c9180 	call	c918 <__divdf3>
    5318:	800d883a 	mov	r6,r16
    531c:	880f883a 	mov	r7,r17
    5320:	1009883a 	mov	r4,r2
    5324:	180b883a 	mov	r5,r3
    5328:	000db700 	call	db70 <__subdf3>
    532c:	d9401017 	ldw	r5,64(sp)
    5330:	d9000f17 	ldw	r4,60(sp)
    5334:	102b883a 	mov	r21,r2
    5338:	d8c01215 	stw	r3,72(sp)
    533c:	000e46c0 	call	e46c <__fixdfsi>
    5340:	1009883a 	mov	r4,r2
    5344:	1029883a 	mov	r20,r2
    5348:	000e4ec0 	call	e4ec <__floatsidf>
    534c:	d9000f17 	ldw	r4,60(sp)
    5350:	d9401017 	ldw	r5,64(sp)
    5354:	100d883a 	mov	r6,r2
    5358:	180f883a 	mov	r7,r3
    535c:	000db700 	call	db70 <__subdf3>
    5360:	1823883a 	mov	r17,r3
    5364:	d8c00717 	ldw	r3,28(sp)
    5368:	d9401217 	ldw	r5,72(sp)
    536c:	a2000c04 	addi	r8,r20,48
    5370:	1021883a 	mov	r16,r2
    5374:	1a000005 	stb	r8,0(r3)
    5378:	800d883a 	mov	r6,r16
    537c:	880f883a 	mov	r7,r17
    5380:	a809883a 	mov	r4,r21
    5384:	4029883a 	mov	r20,r8
    5388:	000d2880 	call	d288 <__gedf2>
    538c:	00841d16 	blt	zero,r2,6404 <_dtoa_r+0x15f4>
    5390:	800d883a 	mov	r6,r16
    5394:	880f883a 	mov	r7,r17
    5398:	0009883a 	mov	r4,zero
    539c:	014ffc34 	movhi	r5,16368
    53a0:	000db700 	call	db70 <__subdf3>
    53a4:	d9401217 	ldw	r5,72(sp)
    53a8:	100d883a 	mov	r6,r2
    53ac:	180f883a 	mov	r7,r3
    53b0:	a809883a 	mov	r4,r21
    53b4:	000d2880 	call	d288 <__gedf2>
    53b8:	db001617 	ldw	r12,88(sp)
    53bc:	00840e16 	blt	zero,r2,63f8 <_dtoa_r+0x15e8>
    53c0:	00800044 	movi	r2,1
    53c4:	13006b0e 	bge	r2,r12,5574 <_dtoa_r+0x764>
    53c8:	d9000717 	ldw	r4,28(sp)
    53cc:	dd800f15 	stw	r22,60(sp)
    53d0:	dcc01015 	stw	r19,64(sp)
    53d4:	2319883a 	add	r12,r4,r12
    53d8:	dcc01217 	ldw	r19,72(sp)
    53dc:	602d883a 	mov	r22,r12
    53e0:	dc801215 	stw	r18,72(sp)
    53e4:	b825883a 	mov	r18,r23
    53e8:	00000906 	br	5410 <_dtoa_r+0x600>
    53ec:	000db700 	call	db70 <__subdf3>
    53f0:	a80d883a 	mov	r6,r21
    53f4:	980f883a 	mov	r7,r19
    53f8:	1009883a 	mov	r4,r2
    53fc:	180b883a 	mov	r5,r3
    5400:	000d3640 	call	d364 <__ledf2>
    5404:	1003e816 	blt	r2,zero,63a8 <_dtoa_r+0x1598>
    5408:	b825883a 	mov	r18,r23
    540c:	bd83e926 	beq	r23,r22,63b4 <_dtoa_r+0x15a4>
    5410:	a809883a 	mov	r4,r21
    5414:	980b883a 	mov	r5,r19
    5418:	000d883a 	mov	r6,zero
    541c:	01d00934 	movhi	r7,16420
    5420:	000d4580 	call	d458 <__muldf3>
    5424:	000d883a 	mov	r6,zero
    5428:	01d00934 	movhi	r7,16420
    542c:	8009883a 	mov	r4,r16
    5430:	880b883a 	mov	r5,r17
    5434:	102b883a 	mov	r21,r2
    5438:	1827883a 	mov	r19,r3
    543c:	000d4580 	call	d458 <__muldf3>
    5440:	180b883a 	mov	r5,r3
    5444:	1009883a 	mov	r4,r2
    5448:	1821883a 	mov	r16,r3
    544c:	1023883a 	mov	r17,r2
    5450:	000e46c0 	call	e46c <__fixdfsi>
    5454:	1009883a 	mov	r4,r2
    5458:	1029883a 	mov	r20,r2
    545c:	000e4ec0 	call	e4ec <__floatsidf>
    5460:	8809883a 	mov	r4,r17
    5464:	800b883a 	mov	r5,r16
    5468:	100d883a 	mov	r6,r2
    546c:	180f883a 	mov	r7,r3
    5470:	000db700 	call	db70 <__subdf3>
    5474:	a5000c04 	addi	r20,r20,48
    5478:	a80d883a 	mov	r6,r21
    547c:	980f883a 	mov	r7,r19
    5480:	1009883a 	mov	r4,r2
    5484:	180b883a 	mov	r5,r3
    5488:	95000005 	stb	r20,0(r18)
    548c:	1021883a 	mov	r16,r2
    5490:	1823883a 	mov	r17,r3
    5494:	000d3640 	call	d364 <__ledf2>
    5498:	bdc00044 	addi	r23,r23,1
    549c:	800d883a 	mov	r6,r16
    54a0:	880f883a 	mov	r7,r17
    54a4:	0009883a 	mov	r4,zero
    54a8:	014ffc34 	movhi	r5,16368
    54ac:	103fcf0e 	bge	r2,zero,53ec <__alt_data_end+0xff0053ec>
    54b0:	d8c01317 	ldw	r3,76(sp)
    54b4:	d8c00515 	stw	r3,20(sp)
    54b8:	d9400917 	ldw	r5,36(sp)
    54bc:	e009883a 	mov	r4,fp
    54c0:	0007d480 	call	7d48 <_Bfree>
    54c4:	d9000517 	ldw	r4,20(sp)
    54c8:	d9802317 	ldw	r6,140(sp)
    54cc:	d9c02517 	ldw	r7,148(sp)
    54d0:	b8000005 	stb	zero,0(r23)
    54d4:	20800044 	addi	r2,r4,1
    54d8:	30800015 	stw	r2,0(r6)
    54dc:	3802aa26 	beq	r7,zero,5f88 <_dtoa_r+0x1178>
    54e0:	3dc00015 	stw	r23,0(r7)
    54e4:	d8800717 	ldw	r2,28(sp)
    54e8:	003e7906 	br	4ed0 <__alt_data_end+0xff004ed0>
    54ec:	00800434 	movhi	r2,16
    54f0:	10bfffc4 	addi	r2,r2,-1
    54f4:	88a2703a 	and	r17,r17,r2
    54f8:	883e851e 	bne	r17,zero,4f10 <__alt_data_end+0xff004f10>
    54fc:	00800074 	movhi	r2,1
    5500:	10814604 	addi	r2,r2,1304
    5504:	003e8406 	br	4f18 <__alt_data_end+0xff004f18>
    5508:	10c00204 	addi	r3,r2,8
    550c:	003e8706 	br	4f2c <__alt_data_end+0xff004f2c>
    5510:	01400434 	movhi	r5,16
    5514:	297fffc4 	addi	r5,r5,-1
    5518:	994a703a 	and	r5,r19,r5
    551c:	9009883a 	mov	r4,r18
    5520:	843f0044 	addi	r16,r16,-1023
    5524:	294ffc34 	orhi	r5,r5,16368
    5528:	dd800217 	ldw	r22,8(sp)
    552c:	d8001115 	stw	zero,68(sp)
    5530:	003ea506 	br	4fc8 <__alt_data_end+0xff004fc8>
    5534:	00800074 	movhi	r2,1
    5538:	10813d04 	addi	r2,r2,1268
    553c:	003e6406 	br	4ed0 <__alt_data_end+0xff004ed0>
    5540:	e0001115 	stw	zero,68(fp)
    5544:	000b883a 	mov	r5,zero
    5548:	e009883a 	mov	r4,fp
    554c:	0007ca00 	call	7ca0 <_Balloc>
    5550:	01bfffc4 	movi	r6,-1
    5554:	01c00044 	movi	r7,1
    5558:	d8800715 	stw	r2,28(sp)
    555c:	d9800c15 	stw	r6,48(sp)
    5560:	e0801015 	stw	r2,64(fp)
    5564:	d8000315 	stw	zero,12(sp)
    5568:	d9c00b15 	stw	r7,44(sp)
    556c:	d9800615 	stw	r6,24(sp)
    5570:	d8002215 	stw	zero,136(sp)
    5574:	d8800117 	ldw	r2,4(sp)
    5578:	10008916 	blt	r2,zero,57a0 <_dtoa_r+0x990>
    557c:	d9000517 	ldw	r4,20(sp)
    5580:	00c00384 	movi	r3,14
    5584:	19008616 	blt	r3,r4,57a0 <_dtoa_r+0x990>
    5588:	200490fa 	slli	r2,r4,3
    558c:	00c00074 	movhi	r3,1
    5590:	d9802217 	ldw	r6,136(sp)
    5594:	18c16504 	addi	r3,r3,1428
    5598:	1885883a 	add	r2,r3,r2
    559c:	14000017 	ldw	r16,0(r2)
    55a0:	14400117 	ldw	r17,4(r2)
    55a4:	30016316 	blt	r6,zero,5b34 <_dtoa_r+0xd24>
    55a8:	800d883a 	mov	r6,r16
    55ac:	880f883a 	mov	r7,r17
    55b0:	9009883a 	mov	r4,r18
    55b4:	980b883a 	mov	r5,r19
    55b8:	000c9180 	call	c918 <__divdf3>
    55bc:	180b883a 	mov	r5,r3
    55c0:	1009883a 	mov	r4,r2
    55c4:	000e46c0 	call	e46c <__fixdfsi>
    55c8:	1009883a 	mov	r4,r2
    55cc:	102b883a 	mov	r21,r2
    55d0:	000e4ec0 	call	e4ec <__floatsidf>
    55d4:	800d883a 	mov	r6,r16
    55d8:	880f883a 	mov	r7,r17
    55dc:	1009883a 	mov	r4,r2
    55e0:	180b883a 	mov	r5,r3
    55e4:	000d4580 	call	d458 <__muldf3>
    55e8:	100d883a 	mov	r6,r2
    55ec:	180f883a 	mov	r7,r3
    55f0:	9009883a 	mov	r4,r18
    55f4:	980b883a 	mov	r5,r19
    55f8:	000db700 	call	db70 <__subdf3>
    55fc:	d9c00717 	ldw	r7,28(sp)
    5600:	1009883a 	mov	r4,r2
    5604:	a8800c04 	addi	r2,r21,48
    5608:	38800005 	stb	r2,0(r7)
    560c:	3dc00044 	addi	r23,r7,1
    5610:	d9c00617 	ldw	r7,24(sp)
    5614:	01800044 	movi	r6,1
    5618:	180b883a 	mov	r5,r3
    561c:	2005883a 	mov	r2,r4
    5620:	39803826 	beq	r7,r6,5704 <_dtoa_r+0x8f4>
    5624:	000d883a 	mov	r6,zero
    5628:	01d00934 	movhi	r7,16420
    562c:	000d4580 	call	d458 <__muldf3>
    5630:	000d883a 	mov	r6,zero
    5634:	000f883a 	mov	r7,zero
    5638:	1009883a 	mov	r4,r2
    563c:	180b883a 	mov	r5,r3
    5640:	1025883a 	mov	r18,r2
    5644:	1827883a 	mov	r19,r3
    5648:	000d2000 	call	d200 <__eqdf2>
    564c:	103f9a26 	beq	r2,zero,54b8 <__alt_data_end+0xff0054b8>
    5650:	d9c00617 	ldw	r7,24(sp)
    5654:	d8c00717 	ldw	r3,28(sp)
    5658:	b829883a 	mov	r20,r23
    565c:	38bfffc4 	addi	r2,r7,-1
    5660:	18ad883a 	add	r22,r3,r2
    5664:	00000a06 	br	5690 <_dtoa_r+0x880>
    5668:	000d4580 	call	d458 <__muldf3>
    566c:	000d883a 	mov	r6,zero
    5670:	000f883a 	mov	r7,zero
    5674:	1009883a 	mov	r4,r2
    5678:	180b883a 	mov	r5,r3
    567c:	1025883a 	mov	r18,r2
    5680:	1827883a 	mov	r19,r3
    5684:	b829883a 	mov	r20,r23
    5688:	000d2000 	call	d200 <__eqdf2>
    568c:	103f8a26 	beq	r2,zero,54b8 <__alt_data_end+0xff0054b8>
    5690:	800d883a 	mov	r6,r16
    5694:	880f883a 	mov	r7,r17
    5698:	9009883a 	mov	r4,r18
    569c:	980b883a 	mov	r5,r19
    56a0:	000c9180 	call	c918 <__divdf3>
    56a4:	180b883a 	mov	r5,r3
    56a8:	1009883a 	mov	r4,r2
    56ac:	000e46c0 	call	e46c <__fixdfsi>
    56b0:	1009883a 	mov	r4,r2
    56b4:	102b883a 	mov	r21,r2
    56b8:	000e4ec0 	call	e4ec <__floatsidf>
    56bc:	800d883a 	mov	r6,r16
    56c0:	880f883a 	mov	r7,r17
    56c4:	1009883a 	mov	r4,r2
    56c8:	180b883a 	mov	r5,r3
    56cc:	000d4580 	call	d458 <__muldf3>
    56d0:	100d883a 	mov	r6,r2
    56d4:	180f883a 	mov	r7,r3
    56d8:	9009883a 	mov	r4,r18
    56dc:	980b883a 	mov	r5,r19
    56e0:	000db700 	call	db70 <__subdf3>
    56e4:	aa000c04 	addi	r8,r21,48
    56e8:	a2000005 	stb	r8,0(r20)
    56ec:	000d883a 	mov	r6,zero
    56f0:	01d00934 	movhi	r7,16420
    56f4:	1009883a 	mov	r4,r2
    56f8:	180b883a 	mov	r5,r3
    56fc:	a5c00044 	addi	r23,r20,1
    5700:	b53fd91e 	bne	r22,r20,5668 <__alt_data_end+0xff005668>
    5704:	100d883a 	mov	r6,r2
    5708:	180f883a 	mov	r7,r3
    570c:	1009883a 	mov	r4,r2
    5710:	180b883a 	mov	r5,r3
    5714:	000c06c0 	call	c06c <__adddf3>
    5718:	100d883a 	mov	r6,r2
    571c:	180f883a 	mov	r7,r3
    5720:	8009883a 	mov	r4,r16
    5724:	880b883a 	mov	r5,r17
    5728:	1027883a 	mov	r19,r2
    572c:	1825883a 	mov	r18,r3
    5730:	000d3640 	call	d364 <__ledf2>
    5734:	10000816 	blt	r2,zero,5758 <_dtoa_r+0x948>
    5738:	980d883a 	mov	r6,r19
    573c:	900f883a 	mov	r7,r18
    5740:	8009883a 	mov	r4,r16
    5744:	880b883a 	mov	r5,r17
    5748:	000d2000 	call	d200 <__eqdf2>
    574c:	103f5a1e 	bne	r2,zero,54b8 <__alt_data_end+0xff0054b8>
    5750:	ad40004c 	andi	r21,r21,1
    5754:	a83f5826 	beq	r21,zero,54b8 <__alt_data_end+0xff0054b8>
    5758:	bd3fffc3 	ldbu	r20,-1(r23)
    575c:	b8bfffc4 	addi	r2,r23,-1
    5760:	1007883a 	mov	r3,r2
    5764:	01400e44 	movi	r5,57
    5768:	d9800717 	ldw	r6,28(sp)
    576c:	00000506 	br	5784 <_dtoa_r+0x974>
    5770:	18ffffc4 	addi	r3,r3,-1
    5774:	11824726 	beq	r2,r6,6094 <_dtoa_r+0x1284>
    5778:	1d000003 	ldbu	r20,0(r3)
    577c:	102f883a 	mov	r23,r2
    5780:	10bfffc4 	addi	r2,r2,-1
    5784:	a1003fcc 	andi	r4,r20,255
    5788:	2100201c 	xori	r4,r4,128
    578c:	213fe004 	addi	r4,r4,-128
    5790:	217ff726 	beq	r4,r5,5770 <__alt_data_end+0xff005770>
    5794:	a2000044 	addi	r8,r20,1
    5798:	12000005 	stb	r8,0(r2)
    579c:	003f4606 	br	54b8 <__alt_data_end+0xff0054b8>
    57a0:	d9000b17 	ldw	r4,44(sp)
    57a4:	2000c826 	beq	r4,zero,5ac8 <_dtoa_r+0xcb8>
    57a8:	d9800317 	ldw	r6,12(sp)
    57ac:	00c00044 	movi	r3,1
    57b0:	1980f90e 	bge	r3,r6,5b98 <_dtoa_r+0xd88>
    57b4:	d8800617 	ldw	r2,24(sp)
    57b8:	d8c00a17 	ldw	r3,40(sp)
    57bc:	157fffc4 	addi	r21,r2,-1
    57c0:	1d41f316 	blt	r3,r21,5f90 <_dtoa_r+0x1180>
    57c4:	1d6bc83a 	sub	r21,r3,r21
    57c8:	d9c00617 	ldw	r7,24(sp)
    57cc:	3802aa16 	blt	r7,zero,6278 <_dtoa_r+0x1468>
    57d0:	dd000817 	ldw	r20,32(sp)
    57d4:	d8800617 	ldw	r2,24(sp)
    57d8:	d8c00817 	ldw	r3,32(sp)
    57dc:	01400044 	movi	r5,1
    57e0:	e009883a 	mov	r4,fp
    57e4:	1887883a 	add	r3,r3,r2
    57e8:	d8c00815 	stw	r3,32(sp)
    57ec:	b0ad883a 	add	r22,r22,r2
    57f0:	00080ac0 	call	80ac <__i2b>
    57f4:	1023883a 	mov	r17,r2
    57f8:	a0000826 	beq	r20,zero,581c <_dtoa_r+0xa0c>
    57fc:	0580070e 	bge	zero,r22,581c <_dtoa_r+0xa0c>
    5800:	a005883a 	mov	r2,r20
    5804:	b500b916 	blt	r22,r20,5aec <_dtoa_r+0xcdc>
    5808:	d9000817 	ldw	r4,32(sp)
    580c:	a0a9c83a 	sub	r20,r20,r2
    5810:	b0adc83a 	sub	r22,r22,r2
    5814:	2089c83a 	sub	r4,r4,r2
    5818:	d9000815 	stw	r4,32(sp)
    581c:	d9800a17 	ldw	r6,40(sp)
    5820:	0181810e 	bge	zero,r6,5e28 <_dtoa_r+0x1018>
    5824:	d9c00b17 	ldw	r7,44(sp)
    5828:	3800b326 	beq	r7,zero,5af8 <_dtoa_r+0xce8>
    582c:	a800b226 	beq	r21,zero,5af8 <_dtoa_r+0xce8>
    5830:	880b883a 	mov	r5,r17
    5834:	a80d883a 	mov	r6,r21
    5838:	e009883a 	mov	r4,fp
    583c:	00082e00 	call	82e0 <__pow5mult>
    5840:	d9800917 	ldw	r6,36(sp)
    5844:	100b883a 	mov	r5,r2
    5848:	e009883a 	mov	r4,fp
    584c:	1023883a 	mov	r17,r2
    5850:	00080e80 	call	80e8 <__multiply>
    5854:	1021883a 	mov	r16,r2
    5858:	d8800a17 	ldw	r2,40(sp)
    585c:	d9400917 	ldw	r5,36(sp)
    5860:	e009883a 	mov	r4,fp
    5864:	1545c83a 	sub	r2,r2,r21
    5868:	d8800a15 	stw	r2,40(sp)
    586c:	0007d480 	call	7d48 <_Bfree>
    5870:	d8c00a17 	ldw	r3,40(sp)
    5874:	18009f1e 	bne	r3,zero,5af4 <_dtoa_r+0xce4>
    5878:	05c00044 	movi	r23,1
    587c:	e009883a 	mov	r4,fp
    5880:	b80b883a 	mov	r5,r23
    5884:	00080ac0 	call	80ac <__i2b>
    5888:	d9000d17 	ldw	r4,52(sp)
    588c:	102b883a 	mov	r21,r2
    5890:	2000ce26 	beq	r4,zero,5bcc <_dtoa_r+0xdbc>
    5894:	200d883a 	mov	r6,r4
    5898:	100b883a 	mov	r5,r2
    589c:	e009883a 	mov	r4,fp
    58a0:	00082e00 	call	82e0 <__pow5mult>
    58a4:	d9800317 	ldw	r6,12(sp)
    58a8:	102b883a 	mov	r21,r2
    58ac:	b981810e 	bge	r23,r6,5eb4 <_dtoa_r+0x10a4>
    58b0:	0027883a 	mov	r19,zero
    58b4:	a8800417 	ldw	r2,16(r21)
    58b8:	05c00804 	movi	r23,32
    58bc:	10800104 	addi	r2,r2,4
    58c0:	1085883a 	add	r2,r2,r2
    58c4:	1085883a 	add	r2,r2,r2
    58c8:	a885883a 	add	r2,r21,r2
    58cc:	11000017 	ldw	r4,0(r2)
    58d0:	0007f940 	call	7f94 <__hi0bits>
    58d4:	b885c83a 	sub	r2,r23,r2
    58d8:	1585883a 	add	r2,r2,r22
    58dc:	108007cc 	andi	r2,r2,31
    58e0:	1000b326 	beq	r2,zero,5bb0 <_dtoa_r+0xda0>
    58e4:	00c00804 	movi	r3,32
    58e8:	1887c83a 	sub	r3,r3,r2
    58ec:	01000104 	movi	r4,4
    58f0:	20c2cd0e 	bge	r4,r3,6428 <_dtoa_r+0x1618>
    58f4:	00c00704 	movi	r3,28
    58f8:	1885c83a 	sub	r2,r3,r2
    58fc:	d8c00817 	ldw	r3,32(sp)
    5900:	a0a9883a 	add	r20,r20,r2
    5904:	b0ad883a 	add	r22,r22,r2
    5908:	1887883a 	add	r3,r3,r2
    590c:	d8c00815 	stw	r3,32(sp)
    5910:	d9800817 	ldw	r6,32(sp)
    5914:	0180040e 	bge	zero,r6,5928 <_dtoa_r+0xb18>
    5918:	800b883a 	mov	r5,r16
    591c:	e009883a 	mov	r4,fp
    5920:	00084200 	call	8420 <__lshift>
    5924:	1021883a 	mov	r16,r2
    5928:	0580050e 	bge	zero,r22,5940 <_dtoa_r+0xb30>
    592c:	a80b883a 	mov	r5,r21
    5930:	b00d883a 	mov	r6,r22
    5934:	e009883a 	mov	r4,fp
    5938:	00084200 	call	8420 <__lshift>
    593c:	102b883a 	mov	r21,r2
    5940:	d9c00e17 	ldw	r7,56(sp)
    5944:	3801211e 	bne	r7,zero,5dcc <_dtoa_r+0xfbc>
    5948:	d9800617 	ldw	r6,24(sp)
    594c:	0181380e 	bge	zero,r6,5e30 <_dtoa_r+0x1020>
    5950:	d8c00b17 	ldw	r3,44(sp)
    5954:	1800ab1e 	bne	r3,zero,5c04 <_dtoa_r+0xdf4>
    5958:	dc800717 	ldw	r18,28(sp)
    595c:	dcc00617 	ldw	r19,24(sp)
    5960:	9029883a 	mov	r20,r18
    5964:	00000206 	br	5970 <_dtoa_r+0xb60>
    5968:	0007d700 	call	7d70 <__multadd>
    596c:	1021883a 	mov	r16,r2
    5970:	a80b883a 	mov	r5,r21
    5974:	8009883a 	mov	r4,r16
    5978:	0004c100 	call	4c10 <quorem>
    597c:	10800c04 	addi	r2,r2,48
    5980:	90800005 	stb	r2,0(r18)
    5984:	94800044 	addi	r18,r18,1
    5988:	9507c83a 	sub	r3,r18,r20
    598c:	000f883a 	mov	r7,zero
    5990:	01800284 	movi	r6,10
    5994:	800b883a 	mov	r5,r16
    5998:	e009883a 	mov	r4,fp
    599c:	1cfff216 	blt	r3,r19,5968 <__alt_data_end+0xff005968>
    59a0:	1011883a 	mov	r8,r2
    59a4:	d8800617 	ldw	r2,24(sp)
    59a8:	0082370e 	bge	zero,r2,6288 <_dtoa_r+0x1478>
    59ac:	d9000717 	ldw	r4,28(sp)
    59b0:	0025883a 	mov	r18,zero
    59b4:	20af883a 	add	r23,r4,r2
    59b8:	01800044 	movi	r6,1
    59bc:	800b883a 	mov	r5,r16
    59c0:	e009883a 	mov	r4,fp
    59c4:	da001715 	stw	r8,92(sp)
    59c8:	00084200 	call	8420 <__lshift>
    59cc:	a80b883a 	mov	r5,r21
    59d0:	1009883a 	mov	r4,r2
    59d4:	d8800915 	stw	r2,36(sp)
    59d8:	00085680 	call	8568 <__mcmp>
    59dc:	da001717 	ldw	r8,92(sp)
    59e0:	0081800e 	bge	zero,r2,5fe4 <_dtoa_r+0x11d4>
    59e4:	b93fffc3 	ldbu	r4,-1(r23)
    59e8:	b8bfffc4 	addi	r2,r23,-1
    59ec:	1007883a 	mov	r3,r2
    59f0:	01800e44 	movi	r6,57
    59f4:	d9c00717 	ldw	r7,28(sp)
    59f8:	00000506 	br	5a10 <_dtoa_r+0xc00>
    59fc:	18ffffc4 	addi	r3,r3,-1
    5a00:	11c12326 	beq	r2,r7,5e90 <_dtoa_r+0x1080>
    5a04:	19000003 	ldbu	r4,0(r3)
    5a08:	102f883a 	mov	r23,r2
    5a0c:	10bfffc4 	addi	r2,r2,-1
    5a10:	21403fcc 	andi	r5,r4,255
    5a14:	2940201c 	xori	r5,r5,128
    5a18:	297fe004 	addi	r5,r5,-128
    5a1c:	29bff726 	beq	r5,r6,59fc <__alt_data_end+0xff0059fc>
    5a20:	21000044 	addi	r4,r4,1
    5a24:	11000005 	stb	r4,0(r2)
    5a28:	a80b883a 	mov	r5,r21
    5a2c:	e009883a 	mov	r4,fp
    5a30:	0007d480 	call	7d48 <_Bfree>
    5a34:	883ea026 	beq	r17,zero,54b8 <__alt_data_end+0xff0054b8>
    5a38:	90000426 	beq	r18,zero,5a4c <_dtoa_r+0xc3c>
    5a3c:	94400326 	beq	r18,r17,5a4c <_dtoa_r+0xc3c>
    5a40:	900b883a 	mov	r5,r18
    5a44:	e009883a 	mov	r4,fp
    5a48:	0007d480 	call	7d48 <_Bfree>
    5a4c:	880b883a 	mov	r5,r17
    5a50:	e009883a 	mov	r4,fp
    5a54:	0007d480 	call	7d48 <_Bfree>
    5a58:	003e9706 	br	54b8 <__alt_data_end+0xff0054b8>
    5a5c:	01800044 	movi	r6,1
    5a60:	d9800e15 	stw	r6,56(sp)
    5a64:	003d9606 	br	50c0 <__alt_data_end+0xff0050c0>
    5a68:	d8800817 	ldw	r2,32(sp)
    5a6c:	d8c00517 	ldw	r3,20(sp)
    5a70:	d8000d15 	stw	zero,52(sp)
    5a74:	10c5c83a 	sub	r2,r2,r3
    5a78:	00c9c83a 	sub	r4,zero,r3
    5a7c:	d8800815 	stw	r2,32(sp)
    5a80:	d9000a15 	stw	r4,40(sp)
    5a84:	003d9706 	br	50e4 <__alt_data_end+0xff0050e4>
    5a88:	05adc83a 	sub	r22,zero,r22
    5a8c:	dd800815 	stw	r22,32(sp)
    5a90:	002d883a 	mov	r22,zero
    5a94:	003d8e06 	br	50d0 <__alt_data_end+0xff0050d0>
    5a98:	d9000517 	ldw	r4,20(sp)
    5a9c:	000e4ec0 	call	e4ec <__floatsidf>
    5aa0:	100d883a 	mov	r6,r2
    5aa4:	180f883a 	mov	r7,r3
    5aa8:	a009883a 	mov	r4,r20
    5aac:	880b883a 	mov	r5,r17
    5ab0:	000d2000 	call	d200 <__eqdf2>
    5ab4:	103d7126 	beq	r2,zero,507c <__alt_data_end+0xff00507c>
    5ab8:	d9c00517 	ldw	r7,20(sp)
    5abc:	39ffffc4 	addi	r7,r7,-1
    5ac0:	d9c00515 	stw	r7,20(sp)
    5ac4:	003d6d06 	br	507c <__alt_data_end+0xff00507c>
    5ac8:	dd400a17 	ldw	r21,40(sp)
    5acc:	dd000817 	ldw	r20,32(sp)
    5ad0:	0023883a 	mov	r17,zero
    5ad4:	003f4806 	br	57f8 <__alt_data_end+0xff0057f8>
    5ad8:	10e3c83a 	sub	r17,r2,r3
    5adc:	9448983a 	sll	r4,r18,r17
    5ae0:	003d3206 	br	4fac <__alt_data_end+0xff004fac>
    5ae4:	d8000e15 	stw	zero,56(sp)
    5ae8:	003d7506 	br	50c0 <__alt_data_end+0xff0050c0>
    5aec:	b005883a 	mov	r2,r22
    5af0:	003f4506 	br	5808 <__alt_data_end+0xff005808>
    5af4:	dc000915 	stw	r16,36(sp)
    5af8:	d9800a17 	ldw	r6,40(sp)
    5afc:	d9400917 	ldw	r5,36(sp)
    5b00:	e009883a 	mov	r4,fp
    5b04:	00082e00 	call	82e0 <__pow5mult>
    5b08:	1021883a 	mov	r16,r2
    5b0c:	003f5a06 	br	5878 <__alt_data_end+0xff005878>
    5b10:	01c00044 	movi	r7,1
    5b14:	d9c00b15 	stw	r7,44(sp)
    5b18:	d8802217 	ldw	r2,136(sp)
    5b1c:	0081280e 	bge	zero,r2,5fc0 <_dtoa_r+0x11b0>
    5b20:	100d883a 	mov	r6,r2
    5b24:	1021883a 	mov	r16,r2
    5b28:	d8800c15 	stw	r2,48(sp)
    5b2c:	d8800615 	stw	r2,24(sp)
    5b30:	003d8806 	br	5154 <__alt_data_end+0xff005154>
    5b34:	d8800617 	ldw	r2,24(sp)
    5b38:	00be9b16 	blt	zero,r2,55a8 <__alt_data_end+0xff0055a8>
    5b3c:	10010f1e 	bne	r2,zero,5f7c <_dtoa_r+0x116c>
    5b40:	880b883a 	mov	r5,r17
    5b44:	000d883a 	mov	r6,zero
    5b48:	01d00534 	movhi	r7,16404
    5b4c:	8009883a 	mov	r4,r16
    5b50:	000d4580 	call	d458 <__muldf3>
    5b54:	900d883a 	mov	r6,r18
    5b58:	980f883a 	mov	r7,r19
    5b5c:	1009883a 	mov	r4,r2
    5b60:	180b883a 	mov	r5,r3
    5b64:	000d2880 	call	d288 <__gedf2>
    5b68:	002b883a 	mov	r21,zero
    5b6c:	0023883a 	mov	r17,zero
    5b70:	1000bf16 	blt	r2,zero,5e70 <_dtoa_r+0x1060>
    5b74:	d9802217 	ldw	r6,136(sp)
    5b78:	ddc00717 	ldw	r23,28(sp)
    5b7c:	018c303a 	nor	r6,zero,r6
    5b80:	d9800515 	stw	r6,20(sp)
    5b84:	a80b883a 	mov	r5,r21
    5b88:	e009883a 	mov	r4,fp
    5b8c:	0007d480 	call	7d48 <_Bfree>
    5b90:	883e4926 	beq	r17,zero,54b8 <__alt_data_end+0xff0054b8>
    5b94:	003fad06 	br	5a4c <__alt_data_end+0xff005a4c>
    5b98:	d9c01117 	ldw	r7,68(sp)
    5b9c:	3801bc26 	beq	r7,zero,6290 <_dtoa_r+0x1480>
    5ba0:	10810cc4 	addi	r2,r2,1075
    5ba4:	dd400a17 	ldw	r21,40(sp)
    5ba8:	dd000817 	ldw	r20,32(sp)
    5bac:	003f0a06 	br	57d8 <__alt_data_end+0xff0057d8>
    5bb0:	00800704 	movi	r2,28
    5bb4:	d9000817 	ldw	r4,32(sp)
    5bb8:	a0a9883a 	add	r20,r20,r2
    5bbc:	b0ad883a 	add	r22,r22,r2
    5bc0:	2089883a 	add	r4,r4,r2
    5bc4:	d9000815 	stw	r4,32(sp)
    5bc8:	003f5106 	br	5910 <__alt_data_end+0xff005910>
    5bcc:	d8c00317 	ldw	r3,12(sp)
    5bd0:	b8c1fc0e 	bge	r23,r3,63c4 <_dtoa_r+0x15b4>
    5bd4:	0027883a 	mov	r19,zero
    5bd8:	b805883a 	mov	r2,r23
    5bdc:	003f3e06 	br	58d8 <__alt_data_end+0xff0058d8>
    5be0:	880b883a 	mov	r5,r17
    5be4:	e009883a 	mov	r4,fp
    5be8:	000f883a 	mov	r7,zero
    5bec:	01800284 	movi	r6,10
    5bf0:	0007d700 	call	7d70 <__multadd>
    5bf4:	d9000c17 	ldw	r4,48(sp)
    5bf8:	1023883a 	mov	r17,r2
    5bfc:	0102040e 	bge	zero,r4,6410 <_dtoa_r+0x1600>
    5c00:	d9000615 	stw	r4,24(sp)
    5c04:	0500050e 	bge	zero,r20,5c1c <_dtoa_r+0xe0c>
    5c08:	880b883a 	mov	r5,r17
    5c0c:	a00d883a 	mov	r6,r20
    5c10:	e009883a 	mov	r4,fp
    5c14:	00084200 	call	8420 <__lshift>
    5c18:	1023883a 	mov	r17,r2
    5c1c:	9801241e 	bne	r19,zero,60b0 <_dtoa_r+0x12a0>
    5c20:	8829883a 	mov	r20,r17
    5c24:	d9000617 	ldw	r4,24(sp)
    5c28:	dcc00717 	ldw	r19,28(sp)
    5c2c:	9480004c 	andi	r18,r18,1
    5c30:	20bfffc4 	addi	r2,r4,-1
    5c34:	9885883a 	add	r2,r19,r2
    5c38:	d8800415 	stw	r2,16(sp)
    5c3c:	dc800615 	stw	r18,24(sp)
    5c40:	a80b883a 	mov	r5,r21
    5c44:	8009883a 	mov	r4,r16
    5c48:	0004c100 	call	4c10 <quorem>
    5c4c:	880b883a 	mov	r5,r17
    5c50:	8009883a 	mov	r4,r16
    5c54:	102f883a 	mov	r23,r2
    5c58:	00085680 	call	8568 <__mcmp>
    5c5c:	a80b883a 	mov	r5,r21
    5c60:	a00d883a 	mov	r6,r20
    5c64:	e009883a 	mov	r4,fp
    5c68:	102d883a 	mov	r22,r2
    5c6c:	00085c80 	call	85c8 <__mdiff>
    5c70:	1007883a 	mov	r3,r2
    5c74:	10800317 	ldw	r2,12(r2)
    5c78:	bc800c04 	addi	r18,r23,48
    5c7c:	180b883a 	mov	r5,r3
    5c80:	10004e1e 	bne	r2,zero,5dbc <_dtoa_r+0xfac>
    5c84:	8009883a 	mov	r4,r16
    5c88:	d8c01615 	stw	r3,88(sp)
    5c8c:	00085680 	call	8568 <__mcmp>
    5c90:	d8c01617 	ldw	r3,88(sp)
    5c94:	e009883a 	mov	r4,fp
    5c98:	d8801615 	stw	r2,88(sp)
    5c9c:	180b883a 	mov	r5,r3
    5ca0:	0007d480 	call	7d48 <_Bfree>
    5ca4:	d8801617 	ldw	r2,88(sp)
    5ca8:	1000041e 	bne	r2,zero,5cbc <_dtoa_r+0xeac>
    5cac:	d9800317 	ldw	r6,12(sp)
    5cb0:	3000021e 	bne	r6,zero,5cbc <_dtoa_r+0xeac>
    5cb4:	d8c00617 	ldw	r3,24(sp)
    5cb8:	18003726 	beq	r3,zero,5d98 <_dtoa_r+0xf88>
    5cbc:	b0002016 	blt	r22,zero,5d40 <_dtoa_r+0xf30>
    5cc0:	b000041e 	bne	r22,zero,5cd4 <_dtoa_r+0xec4>
    5cc4:	d9000317 	ldw	r4,12(sp)
    5cc8:	2000021e 	bne	r4,zero,5cd4 <_dtoa_r+0xec4>
    5ccc:	d8c00617 	ldw	r3,24(sp)
    5cd0:	18001b26 	beq	r3,zero,5d40 <_dtoa_r+0xf30>
    5cd4:	00810716 	blt	zero,r2,60f4 <_dtoa_r+0x12e4>
    5cd8:	d8c00417 	ldw	r3,16(sp)
    5cdc:	9d800044 	addi	r22,r19,1
    5ce0:	9c800005 	stb	r18,0(r19)
    5ce4:	b02f883a 	mov	r23,r22
    5ce8:	98c10626 	beq	r19,r3,6104 <_dtoa_r+0x12f4>
    5cec:	800b883a 	mov	r5,r16
    5cf0:	000f883a 	mov	r7,zero
    5cf4:	01800284 	movi	r6,10
    5cf8:	e009883a 	mov	r4,fp
    5cfc:	0007d700 	call	7d70 <__multadd>
    5d00:	1021883a 	mov	r16,r2
    5d04:	000f883a 	mov	r7,zero
    5d08:	01800284 	movi	r6,10
    5d0c:	880b883a 	mov	r5,r17
    5d10:	e009883a 	mov	r4,fp
    5d14:	8d002526 	beq	r17,r20,5dac <_dtoa_r+0xf9c>
    5d18:	0007d700 	call	7d70 <__multadd>
    5d1c:	a00b883a 	mov	r5,r20
    5d20:	000f883a 	mov	r7,zero
    5d24:	01800284 	movi	r6,10
    5d28:	e009883a 	mov	r4,fp
    5d2c:	1023883a 	mov	r17,r2
    5d30:	0007d700 	call	7d70 <__multadd>
    5d34:	1029883a 	mov	r20,r2
    5d38:	b027883a 	mov	r19,r22
    5d3c:	003fc006 	br	5c40 <__alt_data_end+0xff005c40>
    5d40:	9011883a 	mov	r8,r18
    5d44:	00800e0e 	bge	zero,r2,5d80 <_dtoa_r+0xf70>
    5d48:	800b883a 	mov	r5,r16
    5d4c:	01800044 	movi	r6,1
    5d50:	e009883a 	mov	r4,fp
    5d54:	da001715 	stw	r8,92(sp)
    5d58:	00084200 	call	8420 <__lshift>
    5d5c:	a80b883a 	mov	r5,r21
    5d60:	1009883a 	mov	r4,r2
    5d64:	1021883a 	mov	r16,r2
    5d68:	00085680 	call	8568 <__mcmp>
    5d6c:	da001717 	ldw	r8,92(sp)
    5d70:	0081960e 	bge	zero,r2,63cc <_dtoa_r+0x15bc>
    5d74:	00800e44 	movi	r2,57
    5d78:	40817026 	beq	r8,r2,633c <_dtoa_r+0x152c>
    5d7c:	ba000c44 	addi	r8,r23,49
    5d80:	8825883a 	mov	r18,r17
    5d84:	9dc00044 	addi	r23,r19,1
    5d88:	9a000005 	stb	r8,0(r19)
    5d8c:	a023883a 	mov	r17,r20
    5d90:	dc000915 	stw	r16,36(sp)
    5d94:	003f2406 	br	5a28 <__alt_data_end+0xff005a28>
    5d98:	00800e44 	movi	r2,57
    5d9c:	9011883a 	mov	r8,r18
    5da0:	90816626 	beq	r18,r2,633c <_dtoa_r+0x152c>
    5da4:	05bff516 	blt	zero,r22,5d7c <__alt_data_end+0xff005d7c>
    5da8:	003ff506 	br	5d80 <__alt_data_end+0xff005d80>
    5dac:	0007d700 	call	7d70 <__multadd>
    5db0:	1023883a 	mov	r17,r2
    5db4:	1029883a 	mov	r20,r2
    5db8:	003fdf06 	br	5d38 <__alt_data_end+0xff005d38>
    5dbc:	e009883a 	mov	r4,fp
    5dc0:	0007d480 	call	7d48 <_Bfree>
    5dc4:	00800044 	movi	r2,1
    5dc8:	003fbc06 	br	5cbc <__alt_data_end+0xff005cbc>
    5dcc:	a80b883a 	mov	r5,r21
    5dd0:	8009883a 	mov	r4,r16
    5dd4:	00085680 	call	8568 <__mcmp>
    5dd8:	103edb0e 	bge	r2,zero,5948 <__alt_data_end+0xff005948>
    5ddc:	800b883a 	mov	r5,r16
    5de0:	000f883a 	mov	r7,zero
    5de4:	01800284 	movi	r6,10
    5de8:	e009883a 	mov	r4,fp
    5dec:	0007d700 	call	7d70 <__multadd>
    5df0:	1021883a 	mov	r16,r2
    5df4:	d8800517 	ldw	r2,20(sp)
    5df8:	d8c00b17 	ldw	r3,44(sp)
    5dfc:	10bfffc4 	addi	r2,r2,-1
    5e00:	d8800515 	stw	r2,20(sp)
    5e04:	183f761e 	bne	r3,zero,5be0 <__alt_data_end+0xff005be0>
    5e08:	d9000c17 	ldw	r4,48(sp)
    5e0c:	0101730e 	bge	zero,r4,63dc <_dtoa_r+0x15cc>
    5e10:	d9000615 	stw	r4,24(sp)
    5e14:	003ed006 	br	5958 <__alt_data_end+0xff005958>
    5e18:	00800084 	movi	r2,2
    5e1c:	3081861e 	bne	r6,r2,6438 <_dtoa_r+0x1628>
    5e20:	d8000b15 	stw	zero,44(sp)
    5e24:	003f3c06 	br	5b18 <__alt_data_end+0xff005b18>
    5e28:	dc000917 	ldw	r16,36(sp)
    5e2c:	003e9206 	br	5878 <__alt_data_end+0xff005878>
    5e30:	d9c00317 	ldw	r7,12(sp)
    5e34:	00800084 	movi	r2,2
    5e38:	11fec50e 	bge	r2,r7,5950 <__alt_data_end+0xff005950>
    5e3c:	d9000617 	ldw	r4,24(sp)
    5e40:	20013c1e 	bne	r4,zero,6334 <_dtoa_r+0x1524>
    5e44:	a80b883a 	mov	r5,r21
    5e48:	000f883a 	mov	r7,zero
    5e4c:	01800144 	movi	r6,5
    5e50:	e009883a 	mov	r4,fp
    5e54:	0007d700 	call	7d70 <__multadd>
    5e58:	100b883a 	mov	r5,r2
    5e5c:	8009883a 	mov	r4,r16
    5e60:	102b883a 	mov	r21,r2
    5e64:	00085680 	call	8568 <__mcmp>
    5e68:	dc000915 	stw	r16,36(sp)
    5e6c:	00bf410e 	bge	zero,r2,5b74 <__alt_data_end+0xff005b74>
    5e70:	d9c00717 	ldw	r7,28(sp)
    5e74:	00800c44 	movi	r2,49
    5e78:	38800005 	stb	r2,0(r7)
    5e7c:	d8800517 	ldw	r2,20(sp)
    5e80:	3dc00044 	addi	r23,r7,1
    5e84:	10800044 	addi	r2,r2,1
    5e88:	d8800515 	stw	r2,20(sp)
    5e8c:	003f3d06 	br	5b84 <__alt_data_end+0xff005b84>
    5e90:	d9800517 	ldw	r6,20(sp)
    5e94:	d9c00717 	ldw	r7,28(sp)
    5e98:	00800c44 	movi	r2,49
    5e9c:	31800044 	addi	r6,r6,1
    5ea0:	d9800515 	stw	r6,20(sp)
    5ea4:	38800005 	stb	r2,0(r7)
    5ea8:	003edf06 	br	5a28 <__alt_data_end+0xff005a28>
    5eac:	d8000b15 	stw	zero,44(sp)
    5eb0:	003c9f06 	br	5130 <__alt_data_end+0xff005130>
    5eb4:	903e7e1e 	bne	r18,zero,58b0 <__alt_data_end+0xff0058b0>
    5eb8:	00800434 	movhi	r2,16
    5ebc:	10bfffc4 	addi	r2,r2,-1
    5ec0:	9884703a 	and	r2,r19,r2
    5ec4:	1000ea1e 	bne	r2,zero,6270 <_dtoa_r+0x1460>
    5ec8:	9cdffc2c 	andhi	r19,r19,32752
    5ecc:	9800e826 	beq	r19,zero,6270 <_dtoa_r+0x1460>
    5ed0:	d9c00817 	ldw	r7,32(sp)
    5ed4:	b5800044 	addi	r22,r22,1
    5ed8:	04c00044 	movi	r19,1
    5edc:	39c00044 	addi	r7,r7,1
    5ee0:	d9c00815 	stw	r7,32(sp)
    5ee4:	d8800d17 	ldw	r2,52(sp)
    5ee8:	103e721e 	bne	r2,zero,58b4 <__alt_data_end+0xff0058b4>
    5eec:	00800044 	movi	r2,1
    5ef0:	003e7906 	br	58d8 <__alt_data_end+0xff0058d8>
    5ef4:	8009883a 	mov	r4,r16
    5ef8:	000e4ec0 	call	e4ec <__floatsidf>
    5efc:	d9800f17 	ldw	r6,60(sp)
    5f00:	d9c01017 	ldw	r7,64(sp)
    5f04:	1009883a 	mov	r4,r2
    5f08:	180b883a 	mov	r5,r3
    5f0c:	000d4580 	call	d458 <__muldf3>
    5f10:	000d883a 	mov	r6,zero
    5f14:	01d00734 	movhi	r7,16412
    5f18:	1009883a 	mov	r4,r2
    5f1c:	180b883a 	mov	r5,r3
    5f20:	000c06c0 	call	c06c <__adddf3>
    5f24:	047f3034 	movhi	r17,64704
    5f28:	1021883a 	mov	r16,r2
    5f2c:	1c63883a 	add	r17,r3,r17
    5f30:	d9000f17 	ldw	r4,60(sp)
    5f34:	d9401017 	ldw	r5,64(sp)
    5f38:	000d883a 	mov	r6,zero
    5f3c:	01d00534 	movhi	r7,16404
    5f40:	000db700 	call	db70 <__subdf3>
    5f44:	800d883a 	mov	r6,r16
    5f48:	880f883a 	mov	r7,r17
    5f4c:	1009883a 	mov	r4,r2
    5f50:	180b883a 	mov	r5,r3
    5f54:	102b883a 	mov	r21,r2
    5f58:	1829883a 	mov	r20,r3
    5f5c:	000d2880 	call	d288 <__gedf2>
    5f60:	00806c16 	blt	zero,r2,6114 <_dtoa_r+0x1304>
    5f64:	89e0003c 	xorhi	r7,r17,32768
    5f68:	800d883a 	mov	r6,r16
    5f6c:	a809883a 	mov	r4,r21
    5f70:	a00b883a 	mov	r5,r20
    5f74:	000d3640 	call	d364 <__ledf2>
    5f78:	103d7e0e 	bge	r2,zero,5574 <__alt_data_end+0xff005574>
    5f7c:	002b883a 	mov	r21,zero
    5f80:	0023883a 	mov	r17,zero
    5f84:	003efb06 	br	5b74 <__alt_data_end+0xff005b74>
    5f88:	d8800717 	ldw	r2,28(sp)
    5f8c:	003bd006 	br	4ed0 <__alt_data_end+0xff004ed0>
    5f90:	d9000a17 	ldw	r4,40(sp)
    5f94:	d9800d17 	ldw	r6,52(sp)
    5f98:	dd400a15 	stw	r21,40(sp)
    5f9c:	a905c83a 	sub	r2,r21,r4
    5fa0:	308d883a 	add	r6,r6,r2
    5fa4:	d9800d15 	stw	r6,52(sp)
    5fa8:	002b883a 	mov	r21,zero
    5fac:	003e0606 	br	57c8 <__alt_data_end+0xff0057c8>
    5fb0:	9023883a 	mov	r17,r18
    5fb4:	9829883a 	mov	r20,r19
    5fb8:	04000084 	movi	r16,2
    5fbc:	003c9206 	br	5208 <__alt_data_end+0xff005208>
    5fc0:	04000044 	movi	r16,1
    5fc4:	dc000c15 	stw	r16,48(sp)
    5fc8:	dc000615 	stw	r16,24(sp)
    5fcc:	dc002215 	stw	r16,136(sp)
    5fd0:	e0001115 	stw	zero,68(fp)
    5fd4:	000b883a 	mov	r5,zero
    5fd8:	003c6906 	br	5180 <__alt_data_end+0xff005180>
    5fdc:	3021883a 	mov	r16,r6
    5fe0:	003ffb06 	br	5fd0 <__alt_data_end+0xff005fd0>
    5fe4:	1000021e 	bne	r2,zero,5ff0 <_dtoa_r+0x11e0>
    5fe8:	4200004c 	andi	r8,r8,1
    5fec:	403e7d1e 	bne	r8,zero,59e4 <__alt_data_end+0xff0059e4>
    5ff0:	01000c04 	movi	r4,48
    5ff4:	00000106 	br	5ffc <_dtoa_r+0x11ec>
    5ff8:	102f883a 	mov	r23,r2
    5ffc:	b8bfffc4 	addi	r2,r23,-1
    6000:	10c00007 	ldb	r3,0(r2)
    6004:	193ffc26 	beq	r3,r4,5ff8 <__alt_data_end+0xff005ff8>
    6008:	003e8706 	br	5a28 <__alt_data_end+0xff005a28>
    600c:	d8800517 	ldw	r2,20(sp)
    6010:	00a3c83a 	sub	r17,zero,r2
    6014:	8800a426 	beq	r17,zero,62a8 <_dtoa_r+0x1498>
    6018:	888003cc 	andi	r2,r17,15
    601c:	100490fa 	slli	r2,r2,3
    6020:	00c00074 	movhi	r3,1
    6024:	18c16504 	addi	r3,r3,1428
    6028:	1885883a 	add	r2,r3,r2
    602c:	11800017 	ldw	r6,0(r2)
    6030:	11c00117 	ldw	r7,4(r2)
    6034:	9009883a 	mov	r4,r18
    6038:	980b883a 	mov	r5,r19
    603c:	8823d13a 	srai	r17,r17,4
    6040:	000d4580 	call	d458 <__muldf3>
    6044:	d8800f15 	stw	r2,60(sp)
    6048:	d8c01015 	stw	r3,64(sp)
    604c:	8800e826 	beq	r17,zero,63f0 <_dtoa_r+0x15e0>
    6050:	05000074 	movhi	r20,1
    6054:	a5015b04 	addi	r20,r20,1388
    6058:	04000084 	movi	r16,2
    605c:	8980004c 	andi	r6,r17,1
    6060:	1009883a 	mov	r4,r2
    6064:	8823d07a 	srai	r17,r17,1
    6068:	180b883a 	mov	r5,r3
    606c:	30000426 	beq	r6,zero,6080 <_dtoa_r+0x1270>
    6070:	a1800017 	ldw	r6,0(r20)
    6074:	a1c00117 	ldw	r7,4(r20)
    6078:	84000044 	addi	r16,r16,1
    607c:	000d4580 	call	d458 <__muldf3>
    6080:	a5000204 	addi	r20,r20,8
    6084:	883ff51e 	bne	r17,zero,605c <__alt_data_end+0xff00605c>
    6088:	d8800f15 	stw	r2,60(sp)
    608c:	d8c01015 	stw	r3,64(sp)
    6090:	003c7606 	br	526c <__alt_data_end+0xff00526c>
    6094:	00c00c04 	movi	r3,48
    6098:	10c00005 	stb	r3,0(r2)
    609c:	d8c00517 	ldw	r3,20(sp)
    60a0:	bd3fffc3 	ldbu	r20,-1(r23)
    60a4:	18c00044 	addi	r3,r3,1
    60a8:	d8c00515 	stw	r3,20(sp)
    60ac:	003db906 	br	5794 <__alt_data_end+0xff005794>
    60b0:	89400117 	ldw	r5,4(r17)
    60b4:	e009883a 	mov	r4,fp
    60b8:	0007ca00 	call	7ca0 <_Balloc>
    60bc:	89800417 	ldw	r6,16(r17)
    60c0:	89400304 	addi	r5,r17,12
    60c4:	11000304 	addi	r4,r2,12
    60c8:	31800084 	addi	r6,r6,2
    60cc:	318d883a 	add	r6,r6,r6
    60d0:	318d883a 	add	r6,r6,r6
    60d4:	1027883a 	mov	r19,r2
    60d8:	00078d40 	call	78d4 <memcpy>
    60dc:	01800044 	movi	r6,1
    60e0:	980b883a 	mov	r5,r19
    60e4:	e009883a 	mov	r4,fp
    60e8:	00084200 	call	8420 <__lshift>
    60ec:	1029883a 	mov	r20,r2
    60f0:	003ecc06 	br	5c24 <__alt_data_end+0xff005c24>
    60f4:	00800e44 	movi	r2,57
    60f8:	90809026 	beq	r18,r2,633c <_dtoa_r+0x152c>
    60fc:	92000044 	addi	r8,r18,1
    6100:	003f1f06 	br	5d80 <__alt_data_end+0xff005d80>
    6104:	9011883a 	mov	r8,r18
    6108:	8825883a 	mov	r18,r17
    610c:	a023883a 	mov	r17,r20
    6110:	003e2906 	br	59b8 <__alt_data_end+0xff0059b8>
    6114:	002b883a 	mov	r21,zero
    6118:	0023883a 	mov	r17,zero
    611c:	003f5406 	br	5e70 <__alt_data_end+0xff005e70>
    6120:	61bfffc4 	addi	r6,r12,-1
    6124:	300490fa 	slli	r2,r6,3
    6128:	00c00074 	movhi	r3,1
    612c:	18c16504 	addi	r3,r3,1428
    6130:	1885883a 	add	r2,r3,r2
    6134:	11000017 	ldw	r4,0(r2)
    6138:	11400117 	ldw	r5,4(r2)
    613c:	d8800717 	ldw	r2,28(sp)
    6140:	880f883a 	mov	r7,r17
    6144:	d9801215 	stw	r6,72(sp)
    6148:	800d883a 	mov	r6,r16
    614c:	db001615 	stw	r12,88(sp)
    6150:	15c00044 	addi	r23,r2,1
    6154:	000d4580 	call	d458 <__muldf3>
    6158:	d9401017 	ldw	r5,64(sp)
    615c:	d9000f17 	ldw	r4,60(sp)
    6160:	d8c01515 	stw	r3,84(sp)
    6164:	d8801415 	stw	r2,80(sp)
    6168:	000e46c0 	call	e46c <__fixdfsi>
    616c:	1009883a 	mov	r4,r2
    6170:	1021883a 	mov	r16,r2
    6174:	000e4ec0 	call	e4ec <__floatsidf>
    6178:	d9000f17 	ldw	r4,60(sp)
    617c:	d9401017 	ldw	r5,64(sp)
    6180:	100d883a 	mov	r6,r2
    6184:	180f883a 	mov	r7,r3
    6188:	000db700 	call	db70 <__subdf3>
    618c:	1829883a 	mov	r20,r3
    6190:	d8c00717 	ldw	r3,28(sp)
    6194:	84000c04 	addi	r16,r16,48
    6198:	1023883a 	mov	r17,r2
    619c:	1c000005 	stb	r16,0(r3)
    61a0:	db001617 	ldw	r12,88(sp)
    61a4:	00800044 	movi	r2,1
    61a8:	60802226 	beq	r12,r2,6234 <_dtoa_r+0x1424>
    61ac:	d9c00717 	ldw	r7,28(sp)
    61b0:	8805883a 	mov	r2,r17
    61b4:	b82b883a 	mov	r21,r23
    61b8:	3b19883a 	add	r12,r7,r12
    61bc:	6023883a 	mov	r17,r12
    61c0:	a007883a 	mov	r3,r20
    61c4:	dc800f15 	stw	r18,60(sp)
    61c8:	000d883a 	mov	r6,zero
    61cc:	01d00934 	movhi	r7,16420
    61d0:	1009883a 	mov	r4,r2
    61d4:	180b883a 	mov	r5,r3
    61d8:	000d4580 	call	d458 <__muldf3>
    61dc:	180b883a 	mov	r5,r3
    61e0:	1009883a 	mov	r4,r2
    61e4:	1829883a 	mov	r20,r3
    61e8:	1025883a 	mov	r18,r2
    61ec:	000e46c0 	call	e46c <__fixdfsi>
    61f0:	1009883a 	mov	r4,r2
    61f4:	1021883a 	mov	r16,r2
    61f8:	000e4ec0 	call	e4ec <__floatsidf>
    61fc:	100d883a 	mov	r6,r2
    6200:	180f883a 	mov	r7,r3
    6204:	9009883a 	mov	r4,r18
    6208:	a00b883a 	mov	r5,r20
    620c:	84000c04 	addi	r16,r16,48
    6210:	000db700 	call	db70 <__subdf3>
    6214:	ad400044 	addi	r21,r21,1
    6218:	ac3fffc5 	stb	r16,-1(r21)
    621c:	ac7fea1e 	bne	r21,r17,61c8 <__alt_data_end+0xff0061c8>
    6220:	1023883a 	mov	r17,r2
    6224:	d8801217 	ldw	r2,72(sp)
    6228:	dc800f17 	ldw	r18,60(sp)
    622c:	1829883a 	mov	r20,r3
    6230:	b8af883a 	add	r23,r23,r2
    6234:	d9001417 	ldw	r4,80(sp)
    6238:	d9401517 	ldw	r5,84(sp)
    623c:	000d883a 	mov	r6,zero
    6240:	01cff834 	movhi	r7,16352
    6244:	000c06c0 	call	c06c <__adddf3>
    6248:	880d883a 	mov	r6,r17
    624c:	a00f883a 	mov	r7,r20
    6250:	1009883a 	mov	r4,r2
    6254:	180b883a 	mov	r5,r3
    6258:	000d3640 	call	d364 <__ledf2>
    625c:	10003e0e 	bge	r2,zero,6358 <_dtoa_r+0x1548>
    6260:	d9001317 	ldw	r4,76(sp)
    6264:	bd3fffc3 	ldbu	r20,-1(r23)
    6268:	d9000515 	stw	r4,20(sp)
    626c:	003d3b06 	br	575c <__alt_data_end+0xff00575c>
    6270:	0027883a 	mov	r19,zero
    6274:	003f1b06 	br	5ee4 <__alt_data_end+0xff005ee4>
    6278:	d8800817 	ldw	r2,32(sp)
    627c:	11e9c83a 	sub	r20,r2,r7
    6280:	0005883a 	mov	r2,zero
    6284:	003d5406 	br	57d8 <__alt_data_end+0xff0057d8>
    6288:	00800044 	movi	r2,1
    628c:	003dc706 	br	59ac <__alt_data_end+0xff0059ac>
    6290:	d8c00217 	ldw	r3,8(sp)
    6294:	00800d84 	movi	r2,54
    6298:	dd400a17 	ldw	r21,40(sp)
    629c:	10c5c83a 	sub	r2,r2,r3
    62a0:	dd000817 	ldw	r20,32(sp)
    62a4:	003d4c06 	br	57d8 <__alt_data_end+0xff0057d8>
    62a8:	dc800f15 	stw	r18,60(sp)
    62ac:	dcc01015 	stw	r19,64(sp)
    62b0:	04000084 	movi	r16,2
    62b4:	003bed06 	br	526c <__alt_data_end+0xff00526c>
    62b8:	d9000617 	ldw	r4,24(sp)
    62bc:	203f0d26 	beq	r4,zero,5ef4 <__alt_data_end+0xff005ef4>
    62c0:	d9800c17 	ldw	r6,48(sp)
    62c4:	01bcab0e 	bge	zero,r6,5574 <__alt_data_end+0xff005574>
    62c8:	d9401017 	ldw	r5,64(sp)
    62cc:	d9000f17 	ldw	r4,60(sp)
    62d0:	000d883a 	mov	r6,zero
    62d4:	01d00934 	movhi	r7,16420
    62d8:	000d4580 	call	d458 <__muldf3>
    62dc:	81000044 	addi	r4,r16,1
    62e0:	d8800f15 	stw	r2,60(sp)
    62e4:	d8c01015 	stw	r3,64(sp)
    62e8:	000e4ec0 	call	e4ec <__floatsidf>
    62ec:	d9800f17 	ldw	r6,60(sp)
    62f0:	d9c01017 	ldw	r7,64(sp)
    62f4:	1009883a 	mov	r4,r2
    62f8:	180b883a 	mov	r5,r3
    62fc:	000d4580 	call	d458 <__muldf3>
    6300:	01d00734 	movhi	r7,16412
    6304:	000d883a 	mov	r6,zero
    6308:	1009883a 	mov	r4,r2
    630c:	180b883a 	mov	r5,r3
    6310:	000c06c0 	call	c06c <__adddf3>
    6314:	d9c00517 	ldw	r7,20(sp)
    6318:	047f3034 	movhi	r17,64704
    631c:	1021883a 	mov	r16,r2
    6320:	39ffffc4 	addi	r7,r7,-1
    6324:	d9c01315 	stw	r7,76(sp)
    6328:	1c63883a 	add	r17,r3,r17
    632c:	db000c17 	ldw	r12,48(sp)
    6330:	003bea06 	br	52dc <__alt_data_end+0xff0052dc>
    6334:	dc000915 	stw	r16,36(sp)
    6338:	003e0e06 	br	5b74 <__alt_data_end+0xff005b74>
    633c:	01000e44 	movi	r4,57
    6340:	8825883a 	mov	r18,r17
    6344:	9dc00044 	addi	r23,r19,1
    6348:	99000005 	stb	r4,0(r19)
    634c:	a023883a 	mov	r17,r20
    6350:	dc000915 	stw	r16,36(sp)
    6354:	003da406 	br	59e8 <__alt_data_end+0xff0059e8>
    6358:	d9801417 	ldw	r6,80(sp)
    635c:	d9c01517 	ldw	r7,84(sp)
    6360:	0009883a 	mov	r4,zero
    6364:	014ff834 	movhi	r5,16352
    6368:	000db700 	call	db70 <__subdf3>
    636c:	880d883a 	mov	r6,r17
    6370:	a00f883a 	mov	r7,r20
    6374:	1009883a 	mov	r4,r2
    6378:	180b883a 	mov	r5,r3
    637c:	000d2880 	call	d288 <__gedf2>
    6380:	00bc7c0e 	bge	zero,r2,5574 <__alt_data_end+0xff005574>
    6384:	01000c04 	movi	r4,48
    6388:	00000106 	br	6390 <_dtoa_r+0x1580>
    638c:	102f883a 	mov	r23,r2
    6390:	b8bfffc4 	addi	r2,r23,-1
    6394:	10c00007 	ldb	r3,0(r2)
    6398:	193ffc26 	beq	r3,r4,638c <__alt_data_end+0xff00638c>
    639c:	d9801317 	ldw	r6,76(sp)
    63a0:	d9800515 	stw	r6,20(sp)
    63a4:	003c4406 	br	54b8 <__alt_data_end+0xff0054b8>
    63a8:	d9801317 	ldw	r6,76(sp)
    63ac:	d9800515 	stw	r6,20(sp)
    63b0:	003cea06 	br	575c <__alt_data_end+0xff00575c>
    63b4:	dd800f17 	ldw	r22,60(sp)
    63b8:	dcc01017 	ldw	r19,64(sp)
    63bc:	dc801217 	ldw	r18,72(sp)
    63c0:	003c6c06 	br	5574 <__alt_data_end+0xff005574>
    63c4:	903e031e 	bne	r18,zero,5bd4 <__alt_data_end+0xff005bd4>
    63c8:	003ebb06 	br	5eb8 <__alt_data_end+0xff005eb8>
    63cc:	103e6c1e 	bne	r2,zero,5d80 <__alt_data_end+0xff005d80>
    63d0:	4080004c 	andi	r2,r8,1
    63d4:	103e6a26 	beq	r2,zero,5d80 <__alt_data_end+0xff005d80>
    63d8:	003e6606 	br	5d74 <__alt_data_end+0xff005d74>
    63dc:	d8c00317 	ldw	r3,12(sp)
    63e0:	00800084 	movi	r2,2
    63e4:	10c02916 	blt	r2,r3,648c <_dtoa_r+0x167c>
    63e8:	d9000c17 	ldw	r4,48(sp)
    63ec:	003e8806 	br	5e10 <__alt_data_end+0xff005e10>
    63f0:	04000084 	movi	r16,2
    63f4:	003b9d06 	br	526c <__alt_data_end+0xff00526c>
    63f8:	d9001317 	ldw	r4,76(sp)
    63fc:	d9000515 	stw	r4,20(sp)
    6400:	003cd606 	br	575c <__alt_data_end+0xff00575c>
    6404:	d8801317 	ldw	r2,76(sp)
    6408:	d8800515 	stw	r2,20(sp)
    640c:	003c2a06 	br	54b8 <__alt_data_end+0xff0054b8>
    6410:	d9800317 	ldw	r6,12(sp)
    6414:	00800084 	movi	r2,2
    6418:	11801516 	blt	r2,r6,6470 <_dtoa_r+0x1660>
    641c:	d9c00c17 	ldw	r7,48(sp)
    6420:	d9c00615 	stw	r7,24(sp)
    6424:	003df706 	br	5c04 <__alt_data_end+0xff005c04>
    6428:	193d3926 	beq	r3,r4,5910 <__alt_data_end+0xff005910>
    642c:	00c00f04 	movi	r3,60
    6430:	1885c83a 	sub	r2,r3,r2
    6434:	003ddf06 	br	5bb4 <__alt_data_end+0xff005bb4>
    6438:	e009883a 	mov	r4,fp
    643c:	e0001115 	stw	zero,68(fp)
    6440:	000b883a 	mov	r5,zero
    6444:	0007ca00 	call	7ca0 <_Balloc>
    6448:	d8800715 	stw	r2,28(sp)
    644c:	d8c00717 	ldw	r3,28(sp)
    6450:	00bfffc4 	movi	r2,-1
    6454:	01000044 	movi	r4,1
    6458:	d8800c15 	stw	r2,48(sp)
    645c:	e0c01015 	stw	r3,64(fp)
    6460:	d9000b15 	stw	r4,44(sp)
    6464:	d8800615 	stw	r2,24(sp)
    6468:	d8002215 	stw	zero,136(sp)
    646c:	003c4106 	br	5574 <__alt_data_end+0xff005574>
    6470:	d8c00c17 	ldw	r3,48(sp)
    6474:	d8c00615 	stw	r3,24(sp)
    6478:	003e7006 	br	5e3c <__alt_data_end+0xff005e3c>
    647c:	04400044 	movi	r17,1
    6480:	003b2006 	br	5104 <__alt_data_end+0xff005104>
    6484:	000b883a 	mov	r5,zero
    6488:	003b3d06 	br	5180 <__alt_data_end+0xff005180>
    648c:	d8800c17 	ldw	r2,48(sp)
    6490:	d8800615 	stw	r2,24(sp)
    6494:	003e6906 	br	5e3c <__alt_data_end+0xff005e3c>

00006498 <__sflush_r>:
    6498:	2880030b 	ldhu	r2,12(r5)
    649c:	defffb04 	addi	sp,sp,-20
    64a0:	dcc00315 	stw	r19,12(sp)
    64a4:	dc400115 	stw	r17,4(sp)
    64a8:	dfc00415 	stw	ra,16(sp)
    64ac:	dc800215 	stw	r18,8(sp)
    64b0:	dc000015 	stw	r16,0(sp)
    64b4:	10c0020c 	andi	r3,r2,8
    64b8:	2823883a 	mov	r17,r5
    64bc:	2027883a 	mov	r19,r4
    64c0:	1800311e 	bne	r3,zero,6588 <__sflush_r+0xf0>
    64c4:	28c00117 	ldw	r3,4(r5)
    64c8:	10820014 	ori	r2,r2,2048
    64cc:	2880030d 	sth	r2,12(r5)
    64d0:	00c04b0e 	bge	zero,r3,6600 <__sflush_r+0x168>
    64d4:	8a000a17 	ldw	r8,40(r17)
    64d8:	40002326 	beq	r8,zero,6568 <__sflush_r+0xd0>
    64dc:	9c000017 	ldw	r16,0(r19)
    64e0:	10c4000c 	andi	r3,r2,4096
    64e4:	98000015 	stw	zero,0(r19)
    64e8:	18004826 	beq	r3,zero,660c <__sflush_r+0x174>
    64ec:	89801417 	ldw	r6,80(r17)
    64f0:	10c0010c 	andi	r3,r2,4
    64f4:	18000626 	beq	r3,zero,6510 <__sflush_r+0x78>
    64f8:	88c00117 	ldw	r3,4(r17)
    64fc:	88800c17 	ldw	r2,48(r17)
    6500:	30cdc83a 	sub	r6,r6,r3
    6504:	10000226 	beq	r2,zero,6510 <__sflush_r+0x78>
    6508:	88800f17 	ldw	r2,60(r17)
    650c:	308dc83a 	sub	r6,r6,r2
    6510:	89400717 	ldw	r5,28(r17)
    6514:	000f883a 	mov	r7,zero
    6518:	9809883a 	mov	r4,r19
    651c:	403ee83a 	callr	r8
    6520:	00ffffc4 	movi	r3,-1
    6524:	10c04426 	beq	r2,r3,6638 <__sflush_r+0x1a0>
    6528:	88c0030b 	ldhu	r3,12(r17)
    652c:	89000417 	ldw	r4,16(r17)
    6530:	88000115 	stw	zero,4(r17)
    6534:	197dffcc 	andi	r5,r3,63487
    6538:	8940030d 	sth	r5,12(r17)
    653c:	89000015 	stw	r4,0(r17)
    6540:	18c4000c 	andi	r3,r3,4096
    6544:	18002c1e 	bne	r3,zero,65f8 <__sflush_r+0x160>
    6548:	89400c17 	ldw	r5,48(r17)
    654c:	9c000015 	stw	r16,0(r19)
    6550:	28000526 	beq	r5,zero,6568 <__sflush_r+0xd0>
    6554:	88801004 	addi	r2,r17,64
    6558:	28800226 	beq	r5,r2,6564 <__sflush_r+0xcc>
    655c:	9809883a 	mov	r4,r19
    6560:	0006c040 	call	6c04 <_free_r>
    6564:	88000c15 	stw	zero,48(r17)
    6568:	0005883a 	mov	r2,zero
    656c:	dfc00417 	ldw	ra,16(sp)
    6570:	dcc00317 	ldw	r19,12(sp)
    6574:	dc800217 	ldw	r18,8(sp)
    6578:	dc400117 	ldw	r17,4(sp)
    657c:	dc000017 	ldw	r16,0(sp)
    6580:	dec00504 	addi	sp,sp,20
    6584:	f800283a 	ret
    6588:	2c800417 	ldw	r18,16(r5)
    658c:	903ff626 	beq	r18,zero,6568 <__alt_data_end+0xff006568>
    6590:	2c000017 	ldw	r16,0(r5)
    6594:	108000cc 	andi	r2,r2,3
    6598:	2c800015 	stw	r18,0(r5)
    659c:	84a1c83a 	sub	r16,r16,r18
    65a0:	1000131e 	bne	r2,zero,65f0 <__sflush_r+0x158>
    65a4:	28800517 	ldw	r2,20(r5)
    65a8:	88800215 	stw	r2,8(r17)
    65ac:	04000316 	blt	zero,r16,65bc <__sflush_r+0x124>
    65b0:	003fed06 	br	6568 <__alt_data_end+0xff006568>
    65b4:	90a5883a 	add	r18,r18,r2
    65b8:	043feb0e 	bge	zero,r16,6568 <__alt_data_end+0xff006568>
    65bc:	88800917 	ldw	r2,36(r17)
    65c0:	89400717 	ldw	r5,28(r17)
    65c4:	800f883a 	mov	r7,r16
    65c8:	900d883a 	mov	r6,r18
    65cc:	9809883a 	mov	r4,r19
    65d0:	103ee83a 	callr	r2
    65d4:	80a1c83a 	sub	r16,r16,r2
    65d8:	00bff616 	blt	zero,r2,65b4 <__alt_data_end+0xff0065b4>
    65dc:	88c0030b 	ldhu	r3,12(r17)
    65e0:	00bfffc4 	movi	r2,-1
    65e4:	18c01014 	ori	r3,r3,64
    65e8:	88c0030d 	sth	r3,12(r17)
    65ec:	003fdf06 	br	656c <__alt_data_end+0xff00656c>
    65f0:	0005883a 	mov	r2,zero
    65f4:	003fec06 	br	65a8 <__alt_data_end+0xff0065a8>
    65f8:	88801415 	stw	r2,80(r17)
    65fc:	003fd206 	br	6548 <__alt_data_end+0xff006548>
    6600:	28c00f17 	ldw	r3,60(r5)
    6604:	00ffb316 	blt	zero,r3,64d4 <__alt_data_end+0xff0064d4>
    6608:	003fd706 	br	6568 <__alt_data_end+0xff006568>
    660c:	89400717 	ldw	r5,28(r17)
    6610:	000d883a 	mov	r6,zero
    6614:	01c00044 	movi	r7,1
    6618:	9809883a 	mov	r4,r19
    661c:	403ee83a 	callr	r8
    6620:	100d883a 	mov	r6,r2
    6624:	00bfffc4 	movi	r2,-1
    6628:	30801426 	beq	r6,r2,667c <__sflush_r+0x1e4>
    662c:	8880030b 	ldhu	r2,12(r17)
    6630:	8a000a17 	ldw	r8,40(r17)
    6634:	003fae06 	br	64f0 <__alt_data_end+0xff0064f0>
    6638:	98c00017 	ldw	r3,0(r19)
    663c:	183fba26 	beq	r3,zero,6528 <__alt_data_end+0xff006528>
    6640:	01000744 	movi	r4,29
    6644:	19000626 	beq	r3,r4,6660 <__sflush_r+0x1c8>
    6648:	01000584 	movi	r4,22
    664c:	19000426 	beq	r3,r4,6660 <__sflush_r+0x1c8>
    6650:	88c0030b 	ldhu	r3,12(r17)
    6654:	18c01014 	ori	r3,r3,64
    6658:	88c0030d 	sth	r3,12(r17)
    665c:	003fc306 	br	656c <__alt_data_end+0xff00656c>
    6660:	8880030b 	ldhu	r2,12(r17)
    6664:	88c00417 	ldw	r3,16(r17)
    6668:	88000115 	stw	zero,4(r17)
    666c:	10bdffcc 	andi	r2,r2,63487
    6670:	8880030d 	sth	r2,12(r17)
    6674:	88c00015 	stw	r3,0(r17)
    6678:	003fb306 	br	6548 <__alt_data_end+0xff006548>
    667c:	98800017 	ldw	r2,0(r19)
    6680:	103fea26 	beq	r2,zero,662c <__alt_data_end+0xff00662c>
    6684:	00c00744 	movi	r3,29
    6688:	10c00226 	beq	r2,r3,6694 <__sflush_r+0x1fc>
    668c:	00c00584 	movi	r3,22
    6690:	10c0031e 	bne	r2,r3,66a0 <__sflush_r+0x208>
    6694:	9c000015 	stw	r16,0(r19)
    6698:	0005883a 	mov	r2,zero
    669c:	003fb306 	br	656c <__alt_data_end+0xff00656c>
    66a0:	88c0030b 	ldhu	r3,12(r17)
    66a4:	3005883a 	mov	r2,r6
    66a8:	18c01014 	ori	r3,r3,64
    66ac:	88c0030d 	sth	r3,12(r17)
    66b0:	003fae06 	br	656c <__alt_data_end+0xff00656c>

000066b4 <_fflush_r>:
    66b4:	defffd04 	addi	sp,sp,-12
    66b8:	dc000115 	stw	r16,4(sp)
    66bc:	dfc00215 	stw	ra,8(sp)
    66c0:	2021883a 	mov	r16,r4
    66c4:	20000226 	beq	r4,zero,66d0 <_fflush_r+0x1c>
    66c8:	20800e17 	ldw	r2,56(r4)
    66cc:	10000c26 	beq	r2,zero,6700 <_fflush_r+0x4c>
    66d0:	2880030f 	ldh	r2,12(r5)
    66d4:	1000051e 	bne	r2,zero,66ec <_fflush_r+0x38>
    66d8:	0005883a 	mov	r2,zero
    66dc:	dfc00217 	ldw	ra,8(sp)
    66e0:	dc000117 	ldw	r16,4(sp)
    66e4:	dec00304 	addi	sp,sp,12
    66e8:	f800283a 	ret
    66ec:	8009883a 	mov	r4,r16
    66f0:	dfc00217 	ldw	ra,8(sp)
    66f4:	dc000117 	ldw	r16,4(sp)
    66f8:	dec00304 	addi	sp,sp,12
    66fc:	00064981 	jmpi	6498 <__sflush_r>
    6700:	d9400015 	stw	r5,0(sp)
    6704:	0006a900 	call	6a90 <__sinit>
    6708:	d9400017 	ldw	r5,0(sp)
    670c:	003ff006 	br	66d0 <__alt_data_end+0xff0066d0>

00006710 <fflush>:
    6710:	20000526 	beq	r4,zero,6728 <fflush+0x18>
    6714:	00800074 	movhi	r2,1
    6718:	10889604 	addi	r2,r2,8792
    671c:	200b883a 	mov	r5,r4
    6720:	11000017 	ldw	r4,0(r2)
    6724:	00066b41 	jmpi	66b4 <_fflush_r>
    6728:	00800074 	movhi	r2,1
    672c:	10889504 	addi	r2,r2,8788
    6730:	11000017 	ldw	r4,0(r2)
    6734:	01400034 	movhi	r5,0
    6738:	2959ad04 	addi	r5,r5,26292
    673c:	00074941 	jmpi	7494 <_fwalk_reent>

00006740 <__fp_unlock>:
    6740:	0005883a 	mov	r2,zero
    6744:	f800283a 	ret

00006748 <_cleanup_r>:
    6748:	01400074 	movhi	r5,1
    674c:	296b1304 	addi	r5,r5,-21428
    6750:	00074941 	jmpi	7494 <_fwalk_reent>

00006754 <__sinit.part.1>:
    6754:	defff704 	addi	sp,sp,-36
    6758:	00c00034 	movhi	r3,0
    675c:	dfc00815 	stw	ra,32(sp)
    6760:	ddc00715 	stw	r23,28(sp)
    6764:	dd800615 	stw	r22,24(sp)
    6768:	dd400515 	stw	r21,20(sp)
    676c:	dd000415 	stw	r20,16(sp)
    6770:	dcc00315 	stw	r19,12(sp)
    6774:	dc800215 	stw	r18,8(sp)
    6778:	dc400115 	stw	r17,4(sp)
    677c:	dc000015 	stw	r16,0(sp)
    6780:	18d9d204 	addi	r3,r3,26440
    6784:	24000117 	ldw	r16,4(r4)
    6788:	20c00f15 	stw	r3,60(r4)
    678c:	2080bb04 	addi	r2,r4,748
    6790:	00c000c4 	movi	r3,3
    6794:	20c0b915 	stw	r3,740(r4)
    6798:	2080ba15 	stw	r2,744(r4)
    679c:	2000b815 	stw	zero,736(r4)
    67a0:	05c00204 	movi	r23,8
    67a4:	00800104 	movi	r2,4
    67a8:	2025883a 	mov	r18,r4
    67ac:	b80d883a 	mov	r6,r23
    67b0:	81001704 	addi	r4,r16,92
    67b4:	000b883a 	mov	r5,zero
    67b8:	80000015 	stw	zero,0(r16)
    67bc:	80000115 	stw	zero,4(r16)
    67c0:	80000215 	stw	zero,8(r16)
    67c4:	8080030d 	sth	r2,12(r16)
    67c8:	80001915 	stw	zero,100(r16)
    67cc:	8000038d 	sth	zero,14(r16)
    67d0:	80000415 	stw	zero,16(r16)
    67d4:	80000515 	stw	zero,20(r16)
    67d8:	80000615 	stw	zero,24(r16)
    67dc:	0007b780 	call	7b78 <memset>
    67e0:	05800074 	movhi	r22,1
    67e4:	94400217 	ldw	r17,8(r18)
    67e8:	05400074 	movhi	r21,1
    67ec:	05000074 	movhi	r20,1
    67f0:	04c00074 	movhi	r19,1
    67f4:	b5a49d04 	addi	r22,r22,-28044
    67f8:	ad64b404 	addi	r21,r21,-27952
    67fc:	a524d304 	addi	r20,r20,-27828
    6800:	9ce4ea04 	addi	r19,r19,-27736
    6804:	85800815 	stw	r22,32(r16)
    6808:	85400915 	stw	r21,36(r16)
    680c:	85000a15 	stw	r20,40(r16)
    6810:	84c00b15 	stw	r19,44(r16)
    6814:	84000715 	stw	r16,28(r16)
    6818:	00800284 	movi	r2,10
    681c:	8880030d 	sth	r2,12(r17)
    6820:	00800044 	movi	r2,1
    6824:	b80d883a 	mov	r6,r23
    6828:	89001704 	addi	r4,r17,92
    682c:	000b883a 	mov	r5,zero
    6830:	88000015 	stw	zero,0(r17)
    6834:	88000115 	stw	zero,4(r17)
    6838:	88000215 	stw	zero,8(r17)
    683c:	88001915 	stw	zero,100(r17)
    6840:	8880038d 	sth	r2,14(r17)
    6844:	88000415 	stw	zero,16(r17)
    6848:	88000515 	stw	zero,20(r17)
    684c:	88000615 	stw	zero,24(r17)
    6850:	0007b780 	call	7b78 <memset>
    6854:	94000317 	ldw	r16,12(r18)
    6858:	00800484 	movi	r2,18
    685c:	8c400715 	stw	r17,28(r17)
    6860:	8d800815 	stw	r22,32(r17)
    6864:	8d400915 	stw	r21,36(r17)
    6868:	8d000a15 	stw	r20,40(r17)
    686c:	8cc00b15 	stw	r19,44(r17)
    6870:	8080030d 	sth	r2,12(r16)
    6874:	00800084 	movi	r2,2
    6878:	80000015 	stw	zero,0(r16)
    687c:	80000115 	stw	zero,4(r16)
    6880:	80000215 	stw	zero,8(r16)
    6884:	80001915 	stw	zero,100(r16)
    6888:	8080038d 	sth	r2,14(r16)
    688c:	80000415 	stw	zero,16(r16)
    6890:	80000515 	stw	zero,20(r16)
    6894:	80000615 	stw	zero,24(r16)
    6898:	b80d883a 	mov	r6,r23
    689c:	000b883a 	mov	r5,zero
    68a0:	81001704 	addi	r4,r16,92
    68a4:	0007b780 	call	7b78 <memset>
    68a8:	00800044 	movi	r2,1
    68ac:	84000715 	stw	r16,28(r16)
    68b0:	85800815 	stw	r22,32(r16)
    68b4:	85400915 	stw	r21,36(r16)
    68b8:	85000a15 	stw	r20,40(r16)
    68bc:	84c00b15 	stw	r19,44(r16)
    68c0:	90800e15 	stw	r2,56(r18)
    68c4:	dfc00817 	ldw	ra,32(sp)
    68c8:	ddc00717 	ldw	r23,28(sp)
    68cc:	dd800617 	ldw	r22,24(sp)
    68d0:	dd400517 	ldw	r21,20(sp)
    68d4:	dd000417 	ldw	r20,16(sp)
    68d8:	dcc00317 	ldw	r19,12(sp)
    68dc:	dc800217 	ldw	r18,8(sp)
    68e0:	dc400117 	ldw	r17,4(sp)
    68e4:	dc000017 	ldw	r16,0(sp)
    68e8:	dec00904 	addi	sp,sp,36
    68ec:	f800283a 	ret

000068f0 <__fp_lock>:
    68f0:	0005883a 	mov	r2,zero
    68f4:	f800283a 	ret

000068f8 <__sfmoreglue>:
    68f8:	defffc04 	addi	sp,sp,-16
    68fc:	dc400115 	stw	r17,4(sp)
    6900:	2c7fffc4 	addi	r17,r5,-1
    6904:	8c401a24 	muli	r17,r17,104
    6908:	dc800215 	stw	r18,8(sp)
    690c:	2825883a 	mov	r18,r5
    6910:	89401d04 	addi	r5,r17,116
    6914:	dc000015 	stw	r16,0(sp)
    6918:	dfc00315 	stw	ra,12(sp)
    691c:	0001db40 	call	1db4 <_malloc_r>
    6920:	1021883a 	mov	r16,r2
    6924:	10000726 	beq	r2,zero,6944 <__sfmoreglue+0x4c>
    6928:	11000304 	addi	r4,r2,12
    692c:	10000015 	stw	zero,0(r2)
    6930:	14800115 	stw	r18,4(r2)
    6934:	11000215 	stw	r4,8(r2)
    6938:	89801a04 	addi	r6,r17,104
    693c:	000b883a 	mov	r5,zero
    6940:	0007b780 	call	7b78 <memset>
    6944:	8005883a 	mov	r2,r16
    6948:	dfc00317 	ldw	ra,12(sp)
    694c:	dc800217 	ldw	r18,8(sp)
    6950:	dc400117 	ldw	r17,4(sp)
    6954:	dc000017 	ldw	r16,0(sp)
    6958:	dec00404 	addi	sp,sp,16
    695c:	f800283a 	ret

00006960 <__sfp>:
    6960:	defffb04 	addi	sp,sp,-20
    6964:	dc000015 	stw	r16,0(sp)
    6968:	04000074 	movhi	r16,1
    696c:	84089504 	addi	r16,r16,8788
    6970:	dcc00315 	stw	r19,12(sp)
    6974:	2027883a 	mov	r19,r4
    6978:	81000017 	ldw	r4,0(r16)
    697c:	dfc00415 	stw	ra,16(sp)
    6980:	dc800215 	stw	r18,8(sp)
    6984:	20800e17 	ldw	r2,56(r4)
    6988:	dc400115 	stw	r17,4(sp)
    698c:	1000021e 	bne	r2,zero,6998 <__sfp+0x38>
    6990:	00067540 	call	6754 <__sinit.part.1>
    6994:	81000017 	ldw	r4,0(r16)
    6998:	2480b804 	addi	r18,r4,736
    699c:	047fffc4 	movi	r17,-1
    69a0:	91000117 	ldw	r4,4(r18)
    69a4:	94000217 	ldw	r16,8(r18)
    69a8:	213fffc4 	addi	r4,r4,-1
    69ac:	20000a16 	blt	r4,zero,69d8 <__sfp+0x78>
    69b0:	8080030f 	ldh	r2,12(r16)
    69b4:	10000c26 	beq	r2,zero,69e8 <__sfp+0x88>
    69b8:	80c01d04 	addi	r3,r16,116
    69bc:	00000206 	br	69c8 <__sfp+0x68>
    69c0:	18bfe60f 	ldh	r2,-104(r3)
    69c4:	10000826 	beq	r2,zero,69e8 <__sfp+0x88>
    69c8:	213fffc4 	addi	r4,r4,-1
    69cc:	1c3ffd04 	addi	r16,r3,-12
    69d0:	18c01a04 	addi	r3,r3,104
    69d4:	247ffa1e 	bne	r4,r17,69c0 <__alt_data_end+0xff0069c0>
    69d8:	90800017 	ldw	r2,0(r18)
    69dc:	10001d26 	beq	r2,zero,6a54 <__sfp+0xf4>
    69e0:	1025883a 	mov	r18,r2
    69e4:	003fee06 	br	69a0 <__alt_data_end+0xff0069a0>
    69e8:	00bfffc4 	movi	r2,-1
    69ec:	8080038d 	sth	r2,14(r16)
    69f0:	00800044 	movi	r2,1
    69f4:	8080030d 	sth	r2,12(r16)
    69f8:	80001915 	stw	zero,100(r16)
    69fc:	80000015 	stw	zero,0(r16)
    6a00:	80000215 	stw	zero,8(r16)
    6a04:	80000115 	stw	zero,4(r16)
    6a08:	80000415 	stw	zero,16(r16)
    6a0c:	80000515 	stw	zero,20(r16)
    6a10:	80000615 	stw	zero,24(r16)
    6a14:	01800204 	movi	r6,8
    6a18:	000b883a 	mov	r5,zero
    6a1c:	81001704 	addi	r4,r16,92
    6a20:	0007b780 	call	7b78 <memset>
    6a24:	8005883a 	mov	r2,r16
    6a28:	80000c15 	stw	zero,48(r16)
    6a2c:	80000d15 	stw	zero,52(r16)
    6a30:	80001115 	stw	zero,68(r16)
    6a34:	80001215 	stw	zero,72(r16)
    6a38:	dfc00417 	ldw	ra,16(sp)
    6a3c:	dcc00317 	ldw	r19,12(sp)
    6a40:	dc800217 	ldw	r18,8(sp)
    6a44:	dc400117 	ldw	r17,4(sp)
    6a48:	dc000017 	ldw	r16,0(sp)
    6a4c:	dec00504 	addi	sp,sp,20
    6a50:	f800283a 	ret
    6a54:	01400104 	movi	r5,4
    6a58:	9809883a 	mov	r4,r19
    6a5c:	00068f80 	call	68f8 <__sfmoreglue>
    6a60:	90800015 	stw	r2,0(r18)
    6a64:	103fde1e 	bne	r2,zero,69e0 <__alt_data_end+0xff0069e0>
    6a68:	00800304 	movi	r2,12
    6a6c:	98800015 	stw	r2,0(r19)
    6a70:	0005883a 	mov	r2,zero
    6a74:	003ff006 	br	6a38 <__alt_data_end+0xff006a38>

00006a78 <_cleanup>:
    6a78:	00800074 	movhi	r2,1
    6a7c:	10889504 	addi	r2,r2,8788
    6a80:	11000017 	ldw	r4,0(r2)
    6a84:	01400074 	movhi	r5,1
    6a88:	296b1304 	addi	r5,r5,-21428
    6a8c:	00074941 	jmpi	7494 <_fwalk_reent>

00006a90 <__sinit>:
    6a90:	20800e17 	ldw	r2,56(r4)
    6a94:	10000126 	beq	r2,zero,6a9c <__sinit+0xc>
    6a98:	f800283a 	ret
    6a9c:	00067541 	jmpi	6754 <__sinit.part.1>

00006aa0 <__sfp_lock_acquire>:
    6aa0:	f800283a 	ret

00006aa4 <__sfp_lock_release>:
    6aa4:	f800283a 	ret

00006aa8 <__sinit_lock_acquire>:
    6aa8:	f800283a 	ret

00006aac <__sinit_lock_release>:
    6aac:	f800283a 	ret

00006ab0 <__fp_lock_all>:
    6ab0:	00800074 	movhi	r2,1
    6ab4:	10889604 	addi	r2,r2,8792
    6ab8:	11000017 	ldw	r4,0(r2)
    6abc:	01400034 	movhi	r5,0
    6ac0:	295a3c04 	addi	r5,r5,26864
    6ac4:	00073d01 	jmpi	73d0 <_fwalk>

00006ac8 <__fp_unlock_all>:
    6ac8:	00800074 	movhi	r2,1
    6acc:	10889604 	addi	r2,r2,8792
    6ad0:	11000017 	ldw	r4,0(r2)
    6ad4:	01400034 	movhi	r5,0
    6ad8:	2959d004 	addi	r5,r5,26432
    6adc:	00073d01 	jmpi	73d0 <_fwalk>

00006ae0 <_malloc_trim_r>:
    6ae0:	defffb04 	addi	sp,sp,-20
    6ae4:	dcc00315 	stw	r19,12(sp)
    6ae8:	04c00074 	movhi	r19,1
    6aec:	dc800215 	stw	r18,8(sp)
    6af0:	dc400115 	stw	r17,4(sp)
    6af4:	dc000015 	stw	r16,0(sp)
    6af8:	dfc00415 	stw	ra,16(sp)
    6afc:	2821883a 	mov	r16,r5
    6b00:	9cc1e604 	addi	r19,r19,1944
    6b04:	2025883a 	mov	r18,r4
    6b08:	000ea3c0 	call	ea3c <__malloc_lock>
    6b0c:	98800217 	ldw	r2,8(r19)
    6b10:	14400117 	ldw	r17,4(r2)
    6b14:	00bfff04 	movi	r2,-4
    6b18:	88a2703a 	and	r17,r17,r2
    6b1c:	8c21c83a 	sub	r16,r17,r16
    6b20:	8403fbc4 	addi	r16,r16,4079
    6b24:	8020d33a 	srli	r16,r16,12
    6b28:	0083ffc4 	movi	r2,4095
    6b2c:	843fffc4 	addi	r16,r16,-1
    6b30:	8020933a 	slli	r16,r16,12
    6b34:	1400060e 	bge	r2,r16,6b50 <_malloc_trim_r+0x70>
    6b38:	000b883a 	mov	r5,zero
    6b3c:	9009883a 	mov	r4,r18
    6b40:	00027000 	call	2700 <_sbrk_r>
    6b44:	98c00217 	ldw	r3,8(r19)
    6b48:	1c47883a 	add	r3,r3,r17
    6b4c:	10c00a26 	beq	r2,r3,6b78 <_malloc_trim_r+0x98>
    6b50:	9009883a 	mov	r4,r18
    6b54:	000ea400 	call	ea40 <__malloc_unlock>
    6b58:	0005883a 	mov	r2,zero
    6b5c:	dfc00417 	ldw	ra,16(sp)
    6b60:	dcc00317 	ldw	r19,12(sp)
    6b64:	dc800217 	ldw	r18,8(sp)
    6b68:	dc400117 	ldw	r17,4(sp)
    6b6c:	dc000017 	ldw	r16,0(sp)
    6b70:	dec00504 	addi	sp,sp,20
    6b74:	f800283a 	ret
    6b78:	040bc83a 	sub	r5,zero,r16
    6b7c:	9009883a 	mov	r4,r18
    6b80:	00027000 	call	2700 <_sbrk_r>
    6b84:	00ffffc4 	movi	r3,-1
    6b88:	10c00d26 	beq	r2,r3,6bc0 <_malloc_trim_r+0xe0>
    6b8c:	00c00074 	movhi	r3,1
    6b90:	18cf7a04 	addi	r3,r3,15848
    6b94:	18800017 	ldw	r2,0(r3)
    6b98:	99000217 	ldw	r4,8(r19)
    6b9c:	8c23c83a 	sub	r17,r17,r16
    6ba0:	8c400054 	ori	r17,r17,1
    6ba4:	1421c83a 	sub	r16,r2,r16
    6ba8:	24400115 	stw	r17,4(r4)
    6bac:	9009883a 	mov	r4,r18
    6bb0:	1c000015 	stw	r16,0(r3)
    6bb4:	000ea400 	call	ea40 <__malloc_unlock>
    6bb8:	00800044 	movi	r2,1
    6bbc:	003fe706 	br	6b5c <__alt_data_end+0xff006b5c>
    6bc0:	000b883a 	mov	r5,zero
    6bc4:	9009883a 	mov	r4,r18
    6bc8:	00027000 	call	2700 <_sbrk_r>
    6bcc:	99000217 	ldw	r4,8(r19)
    6bd0:	014003c4 	movi	r5,15
    6bd4:	1107c83a 	sub	r3,r2,r4
    6bd8:	28ffdd0e 	bge	r5,r3,6b50 <__alt_data_end+0xff006b50>
    6bdc:	01400074 	movhi	r5,1
    6be0:	29489304 	addi	r5,r5,8780
    6be4:	29400017 	ldw	r5,0(r5)
    6be8:	18c00054 	ori	r3,r3,1
    6bec:	20c00115 	stw	r3,4(r4)
    6bf0:	00c00074 	movhi	r3,1
    6bf4:	1145c83a 	sub	r2,r2,r5
    6bf8:	18cf7a04 	addi	r3,r3,15848
    6bfc:	18800015 	stw	r2,0(r3)
    6c00:	003fd306 	br	6b50 <__alt_data_end+0xff006b50>

00006c04 <_free_r>:
    6c04:	28004126 	beq	r5,zero,6d0c <_free_r+0x108>
    6c08:	defffd04 	addi	sp,sp,-12
    6c0c:	dc400115 	stw	r17,4(sp)
    6c10:	dc000015 	stw	r16,0(sp)
    6c14:	2023883a 	mov	r17,r4
    6c18:	2821883a 	mov	r16,r5
    6c1c:	dfc00215 	stw	ra,8(sp)
    6c20:	000ea3c0 	call	ea3c <__malloc_lock>
    6c24:	81ffff17 	ldw	r7,-4(r16)
    6c28:	00bfff84 	movi	r2,-2
    6c2c:	01000074 	movhi	r4,1
    6c30:	81bffe04 	addi	r6,r16,-8
    6c34:	3884703a 	and	r2,r7,r2
    6c38:	2101e604 	addi	r4,r4,1944
    6c3c:	308b883a 	add	r5,r6,r2
    6c40:	2a400117 	ldw	r9,4(r5)
    6c44:	22000217 	ldw	r8,8(r4)
    6c48:	00ffff04 	movi	r3,-4
    6c4c:	48c6703a 	and	r3,r9,r3
    6c50:	2a005726 	beq	r5,r8,6db0 <_free_r+0x1ac>
    6c54:	28c00115 	stw	r3,4(r5)
    6c58:	39c0004c 	andi	r7,r7,1
    6c5c:	3800091e 	bne	r7,zero,6c84 <_free_r+0x80>
    6c60:	823ffe17 	ldw	r8,-8(r16)
    6c64:	22400204 	addi	r9,r4,8
    6c68:	320dc83a 	sub	r6,r6,r8
    6c6c:	31c00217 	ldw	r7,8(r6)
    6c70:	1205883a 	add	r2,r2,r8
    6c74:	3a406526 	beq	r7,r9,6e0c <_free_r+0x208>
    6c78:	32000317 	ldw	r8,12(r6)
    6c7c:	3a000315 	stw	r8,12(r7)
    6c80:	41c00215 	stw	r7,8(r8)
    6c84:	28cf883a 	add	r7,r5,r3
    6c88:	39c00117 	ldw	r7,4(r7)
    6c8c:	39c0004c 	andi	r7,r7,1
    6c90:	38003a26 	beq	r7,zero,6d7c <_free_r+0x178>
    6c94:	10c00054 	ori	r3,r2,1
    6c98:	30c00115 	stw	r3,4(r6)
    6c9c:	3087883a 	add	r3,r6,r2
    6ca0:	18800015 	stw	r2,0(r3)
    6ca4:	00c07fc4 	movi	r3,511
    6ca8:	18801936 	bltu	r3,r2,6d10 <_free_r+0x10c>
    6cac:	1004d0fa 	srli	r2,r2,3
    6cb0:	01c00044 	movi	r7,1
    6cb4:	21400117 	ldw	r5,4(r4)
    6cb8:	10c00044 	addi	r3,r2,1
    6cbc:	18c7883a 	add	r3,r3,r3
    6cc0:	1005d0ba 	srai	r2,r2,2
    6cc4:	18c7883a 	add	r3,r3,r3
    6cc8:	18c7883a 	add	r3,r3,r3
    6ccc:	1907883a 	add	r3,r3,r4
    6cd0:	3884983a 	sll	r2,r7,r2
    6cd4:	19c00017 	ldw	r7,0(r3)
    6cd8:	1a3ffe04 	addi	r8,r3,-8
    6cdc:	1144b03a 	or	r2,r2,r5
    6ce0:	32000315 	stw	r8,12(r6)
    6ce4:	31c00215 	stw	r7,8(r6)
    6ce8:	20800115 	stw	r2,4(r4)
    6cec:	19800015 	stw	r6,0(r3)
    6cf0:	39800315 	stw	r6,12(r7)
    6cf4:	8809883a 	mov	r4,r17
    6cf8:	dfc00217 	ldw	ra,8(sp)
    6cfc:	dc400117 	ldw	r17,4(sp)
    6d00:	dc000017 	ldw	r16,0(sp)
    6d04:	dec00304 	addi	sp,sp,12
    6d08:	000ea401 	jmpi	ea40 <__malloc_unlock>
    6d0c:	f800283a 	ret
    6d10:	100ad27a 	srli	r5,r2,9
    6d14:	00c00104 	movi	r3,4
    6d18:	19404a36 	bltu	r3,r5,6e44 <_free_r+0x240>
    6d1c:	100ad1ba 	srli	r5,r2,6
    6d20:	28c00e44 	addi	r3,r5,57
    6d24:	18c7883a 	add	r3,r3,r3
    6d28:	29400e04 	addi	r5,r5,56
    6d2c:	18c7883a 	add	r3,r3,r3
    6d30:	18c7883a 	add	r3,r3,r3
    6d34:	1909883a 	add	r4,r3,r4
    6d38:	20c00017 	ldw	r3,0(r4)
    6d3c:	01c00074 	movhi	r7,1
    6d40:	213ffe04 	addi	r4,r4,-8
    6d44:	39c1e604 	addi	r7,r7,1944
    6d48:	20c04426 	beq	r4,r3,6e5c <_free_r+0x258>
    6d4c:	01ffff04 	movi	r7,-4
    6d50:	19400117 	ldw	r5,4(r3)
    6d54:	29ca703a 	and	r5,r5,r7
    6d58:	1140022e 	bgeu	r2,r5,6d64 <_free_r+0x160>
    6d5c:	18c00217 	ldw	r3,8(r3)
    6d60:	20fffb1e 	bne	r4,r3,6d50 <__alt_data_end+0xff006d50>
    6d64:	19000317 	ldw	r4,12(r3)
    6d68:	31000315 	stw	r4,12(r6)
    6d6c:	30c00215 	stw	r3,8(r6)
    6d70:	21800215 	stw	r6,8(r4)
    6d74:	19800315 	stw	r6,12(r3)
    6d78:	003fde06 	br	6cf4 <__alt_data_end+0xff006cf4>
    6d7c:	29c00217 	ldw	r7,8(r5)
    6d80:	10c5883a 	add	r2,r2,r3
    6d84:	00c00074 	movhi	r3,1
    6d88:	18c1e804 	addi	r3,r3,1952
    6d8c:	38c03b26 	beq	r7,r3,6e7c <_free_r+0x278>
    6d90:	2a000317 	ldw	r8,12(r5)
    6d94:	11400054 	ori	r5,r2,1
    6d98:	3087883a 	add	r3,r6,r2
    6d9c:	3a000315 	stw	r8,12(r7)
    6da0:	41c00215 	stw	r7,8(r8)
    6da4:	31400115 	stw	r5,4(r6)
    6da8:	18800015 	stw	r2,0(r3)
    6dac:	003fbd06 	br	6ca4 <__alt_data_end+0xff006ca4>
    6db0:	39c0004c 	andi	r7,r7,1
    6db4:	10c5883a 	add	r2,r2,r3
    6db8:	3800071e 	bne	r7,zero,6dd8 <_free_r+0x1d4>
    6dbc:	81fffe17 	ldw	r7,-8(r16)
    6dc0:	31cdc83a 	sub	r6,r6,r7
    6dc4:	30c00317 	ldw	r3,12(r6)
    6dc8:	31400217 	ldw	r5,8(r6)
    6dcc:	11c5883a 	add	r2,r2,r7
    6dd0:	28c00315 	stw	r3,12(r5)
    6dd4:	19400215 	stw	r5,8(r3)
    6dd8:	10c00054 	ori	r3,r2,1
    6ddc:	30c00115 	stw	r3,4(r6)
    6de0:	00c00074 	movhi	r3,1
    6de4:	18c89404 	addi	r3,r3,8784
    6de8:	18c00017 	ldw	r3,0(r3)
    6dec:	21800215 	stw	r6,8(r4)
    6df0:	10ffc036 	bltu	r2,r3,6cf4 <__alt_data_end+0xff006cf4>
    6df4:	00800074 	movhi	r2,1
    6df8:	108f6c04 	addi	r2,r2,15792
    6dfc:	11400017 	ldw	r5,0(r2)
    6e00:	8809883a 	mov	r4,r17
    6e04:	0006ae00 	call	6ae0 <_malloc_trim_r>
    6e08:	003fba06 	br	6cf4 <__alt_data_end+0xff006cf4>
    6e0c:	28c9883a 	add	r4,r5,r3
    6e10:	21000117 	ldw	r4,4(r4)
    6e14:	2100004c 	andi	r4,r4,1
    6e18:	2000391e 	bne	r4,zero,6f00 <_free_r+0x2fc>
    6e1c:	29c00217 	ldw	r7,8(r5)
    6e20:	29000317 	ldw	r4,12(r5)
    6e24:	1885883a 	add	r2,r3,r2
    6e28:	10c00054 	ori	r3,r2,1
    6e2c:	39000315 	stw	r4,12(r7)
    6e30:	21c00215 	stw	r7,8(r4)
    6e34:	30c00115 	stw	r3,4(r6)
    6e38:	308d883a 	add	r6,r6,r2
    6e3c:	30800015 	stw	r2,0(r6)
    6e40:	003fac06 	br	6cf4 <__alt_data_end+0xff006cf4>
    6e44:	00c00504 	movi	r3,20
    6e48:	19401536 	bltu	r3,r5,6ea0 <_free_r+0x29c>
    6e4c:	28c01704 	addi	r3,r5,92
    6e50:	18c7883a 	add	r3,r3,r3
    6e54:	294016c4 	addi	r5,r5,91
    6e58:	003fb406 	br	6d2c <__alt_data_end+0xff006d2c>
    6e5c:	280bd0ba 	srai	r5,r5,2
    6e60:	00c00044 	movi	r3,1
    6e64:	38800117 	ldw	r2,4(r7)
    6e68:	194a983a 	sll	r5,r3,r5
    6e6c:	2007883a 	mov	r3,r4
    6e70:	2884b03a 	or	r2,r5,r2
    6e74:	38800115 	stw	r2,4(r7)
    6e78:	003fbb06 	br	6d68 <__alt_data_end+0xff006d68>
    6e7c:	21800515 	stw	r6,20(r4)
    6e80:	21800415 	stw	r6,16(r4)
    6e84:	10c00054 	ori	r3,r2,1
    6e88:	31c00315 	stw	r7,12(r6)
    6e8c:	31c00215 	stw	r7,8(r6)
    6e90:	30c00115 	stw	r3,4(r6)
    6e94:	308d883a 	add	r6,r6,r2
    6e98:	30800015 	stw	r2,0(r6)
    6e9c:	003f9506 	br	6cf4 <__alt_data_end+0xff006cf4>
    6ea0:	00c01504 	movi	r3,84
    6ea4:	19400536 	bltu	r3,r5,6ebc <_free_r+0x2b8>
    6ea8:	100ad33a 	srli	r5,r2,12
    6eac:	28c01bc4 	addi	r3,r5,111
    6eb0:	18c7883a 	add	r3,r3,r3
    6eb4:	29401b84 	addi	r5,r5,110
    6eb8:	003f9c06 	br	6d2c <__alt_data_end+0xff006d2c>
    6ebc:	00c05504 	movi	r3,340
    6ec0:	19400536 	bltu	r3,r5,6ed8 <_free_r+0x2d4>
    6ec4:	100ad3fa 	srli	r5,r2,15
    6ec8:	28c01e04 	addi	r3,r5,120
    6ecc:	18c7883a 	add	r3,r3,r3
    6ed0:	29401dc4 	addi	r5,r5,119
    6ed4:	003f9506 	br	6d2c <__alt_data_end+0xff006d2c>
    6ed8:	00c15504 	movi	r3,1364
    6edc:	19400536 	bltu	r3,r5,6ef4 <_free_r+0x2f0>
    6ee0:	100ad4ba 	srli	r5,r2,18
    6ee4:	28c01f44 	addi	r3,r5,125
    6ee8:	18c7883a 	add	r3,r3,r3
    6eec:	29401f04 	addi	r5,r5,124
    6ef0:	003f8e06 	br	6d2c <__alt_data_end+0xff006d2c>
    6ef4:	00c03f84 	movi	r3,254
    6ef8:	01401f84 	movi	r5,126
    6efc:	003f8b06 	br	6d2c <__alt_data_end+0xff006d2c>
    6f00:	10c00054 	ori	r3,r2,1
    6f04:	30c00115 	stw	r3,4(r6)
    6f08:	308d883a 	add	r6,r6,r2
    6f0c:	30800015 	stw	r2,0(r6)
    6f10:	003f7806 	br	6cf4 <__alt_data_end+0xff006cf4>

00006f14 <__sfvwrite_r>:
    6f14:	30800217 	ldw	r2,8(r6)
    6f18:	10006726 	beq	r2,zero,70b8 <__sfvwrite_r+0x1a4>
    6f1c:	28c0030b 	ldhu	r3,12(r5)
    6f20:	defff404 	addi	sp,sp,-48
    6f24:	dd400715 	stw	r21,28(sp)
    6f28:	dd000615 	stw	r20,24(sp)
    6f2c:	dc000215 	stw	r16,8(sp)
    6f30:	dfc00b15 	stw	ra,44(sp)
    6f34:	df000a15 	stw	fp,40(sp)
    6f38:	ddc00915 	stw	r23,36(sp)
    6f3c:	dd800815 	stw	r22,32(sp)
    6f40:	dcc00515 	stw	r19,20(sp)
    6f44:	dc800415 	stw	r18,16(sp)
    6f48:	dc400315 	stw	r17,12(sp)
    6f4c:	1880020c 	andi	r2,r3,8
    6f50:	2821883a 	mov	r16,r5
    6f54:	202b883a 	mov	r21,r4
    6f58:	3029883a 	mov	r20,r6
    6f5c:	10002726 	beq	r2,zero,6ffc <__sfvwrite_r+0xe8>
    6f60:	28800417 	ldw	r2,16(r5)
    6f64:	10002526 	beq	r2,zero,6ffc <__sfvwrite_r+0xe8>
    6f68:	1880008c 	andi	r2,r3,2
    6f6c:	a4400017 	ldw	r17,0(r20)
    6f70:	10002a26 	beq	r2,zero,701c <__sfvwrite_r+0x108>
    6f74:	05a00034 	movhi	r22,32768
    6f78:	0027883a 	mov	r19,zero
    6f7c:	0025883a 	mov	r18,zero
    6f80:	b5bf0004 	addi	r22,r22,-1024
    6f84:	980d883a 	mov	r6,r19
    6f88:	a809883a 	mov	r4,r21
    6f8c:	90004626 	beq	r18,zero,70a8 <__sfvwrite_r+0x194>
    6f90:	900f883a 	mov	r7,r18
    6f94:	b480022e 	bgeu	r22,r18,6fa0 <__sfvwrite_r+0x8c>
    6f98:	01e00034 	movhi	r7,32768
    6f9c:	39ff0004 	addi	r7,r7,-1024
    6fa0:	80800917 	ldw	r2,36(r16)
    6fa4:	81400717 	ldw	r5,28(r16)
    6fa8:	103ee83a 	callr	r2
    6fac:	0080570e 	bge	zero,r2,710c <__sfvwrite_r+0x1f8>
    6fb0:	a0c00217 	ldw	r3,8(r20)
    6fb4:	98a7883a 	add	r19,r19,r2
    6fb8:	90a5c83a 	sub	r18,r18,r2
    6fbc:	1885c83a 	sub	r2,r3,r2
    6fc0:	a0800215 	stw	r2,8(r20)
    6fc4:	103fef1e 	bne	r2,zero,6f84 <__alt_data_end+0xff006f84>
    6fc8:	0005883a 	mov	r2,zero
    6fcc:	dfc00b17 	ldw	ra,44(sp)
    6fd0:	df000a17 	ldw	fp,40(sp)
    6fd4:	ddc00917 	ldw	r23,36(sp)
    6fd8:	dd800817 	ldw	r22,32(sp)
    6fdc:	dd400717 	ldw	r21,28(sp)
    6fe0:	dd000617 	ldw	r20,24(sp)
    6fe4:	dcc00517 	ldw	r19,20(sp)
    6fe8:	dc800417 	ldw	r18,16(sp)
    6fec:	dc400317 	ldw	r17,12(sp)
    6ff0:	dc000217 	ldw	r16,8(sp)
    6ff4:	dec00c04 	addi	sp,sp,48
    6ff8:	f800283a 	ret
    6ffc:	800b883a 	mov	r5,r16
    7000:	a809883a 	mov	r4,r21
    7004:	0004abc0 	call	4abc <__swsetup_r>
    7008:	1000eb1e 	bne	r2,zero,73b8 <__sfvwrite_r+0x4a4>
    700c:	80c0030b 	ldhu	r3,12(r16)
    7010:	a4400017 	ldw	r17,0(r20)
    7014:	1880008c 	andi	r2,r3,2
    7018:	103fd61e 	bne	r2,zero,6f74 <__alt_data_end+0xff006f74>
    701c:	1880004c 	andi	r2,r3,1
    7020:	10003f1e 	bne	r2,zero,7120 <__sfvwrite_r+0x20c>
    7024:	0039883a 	mov	fp,zero
    7028:	0025883a 	mov	r18,zero
    702c:	90001a26 	beq	r18,zero,7098 <__sfvwrite_r+0x184>
    7030:	1880800c 	andi	r2,r3,512
    7034:	84c00217 	ldw	r19,8(r16)
    7038:	10002126 	beq	r2,zero,70c0 <__sfvwrite_r+0x1ac>
    703c:	982f883a 	mov	r23,r19
    7040:	94c09336 	bltu	r18,r19,7290 <__sfvwrite_r+0x37c>
    7044:	1881200c 	andi	r2,r3,1152
    7048:	10009e1e 	bne	r2,zero,72c4 <__sfvwrite_r+0x3b0>
    704c:	81000017 	ldw	r4,0(r16)
    7050:	b80d883a 	mov	r6,r23
    7054:	e00b883a 	mov	r5,fp
    7058:	0007a1c0 	call	7a1c <memmove>
    705c:	80c00217 	ldw	r3,8(r16)
    7060:	81000017 	ldw	r4,0(r16)
    7064:	9005883a 	mov	r2,r18
    7068:	1ce7c83a 	sub	r19,r3,r19
    706c:	25cf883a 	add	r7,r4,r23
    7070:	84c00215 	stw	r19,8(r16)
    7074:	81c00015 	stw	r7,0(r16)
    7078:	a0c00217 	ldw	r3,8(r20)
    707c:	e0b9883a 	add	fp,fp,r2
    7080:	90a5c83a 	sub	r18,r18,r2
    7084:	18a7c83a 	sub	r19,r3,r2
    7088:	a4c00215 	stw	r19,8(r20)
    708c:	983fce26 	beq	r19,zero,6fc8 <__alt_data_end+0xff006fc8>
    7090:	80c0030b 	ldhu	r3,12(r16)
    7094:	903fe61e 	bne	r18,zero,7030 <__alt_data_end+0xff007030>
    7098:	8f000017 	ldw	fp,0(r17)
    709c:	8c800117 	ldw	r18,4(r17)
    70a0:	8c400204 	addi	r17,r17,8
    70a4:	003fe106 	br	702c <__alt_data_end+0xff00702c>
    70a8:	8cc00017 	ldw	r19,0(r17)
    70ac:	8c800117 	ldw	r18,4(r17)
    70b0:	8c400204 	addi	r17,r17,8
    70b4:	003fb306 	br	6f84 <__alt_data_end+0xff006f84>
    70b8:	0005883a 	mov	r2,zero
    70bc:	f800283a 	ret
    70c0:	81000017 	ldw	r4,0(r16)
    70c4:	80800417 	ldw	r2,16(r16)
    70c8:	11005736 	bltu	r2,r4,7228 <__sfvwrite_r+0x314>
    70cc:	85c00517 	ldw	r23,20(r16)
    70d0:	95c05536 	bltu	r18,r23,7228 <__sfvwrite_r+0x314>
    70d4:	00a00034 	movhi	r2,32768
    70d8:	10bfffc4 	addi	r2,r2,-1
    70dc:	9009883a 	mov	r4,r18
    70e0:	1480012e 	bgeu	r2,r18,70e8 <__sfvwrite_r+0x1d4>
    70e4:	1009883a 	mov	r4,r2
    70e8:	b80b883a 	mov	r5,r23
    70ec:	000beb80 	call	beb8 <__divsi3>
    70f0:	15cf383a 	mul	r7,r2,r23
    70f4:	81400717 	ldw	r5,28(r16)
    70f8:	80800917 	ldw	r2,36(r16)
    70fc:	e00d883a 	mov	r6,fp
    7100:	a809883a 	mov	r4,r21
    7104:	103ee83a 	callr	r2
    7108:	00bfdb16 	blt	zero,r2,7078 <__alt_data_end+0xff007078>
    710c:	8080030b 	ldhu	r2,12(r16)
    7110:	10801014 	ori	r2,r2,64
    7114:	8080030d 	sth	r2,12(r16)
    7118:	00bfffc4 	movi	r2,-1
    711c:	003fab06 	br	6fcc <__alt_data_end+0xff006fcc>
    7120:	0027883a 	mov	r19,zero
    7124:	0011883a 	mov	r8,zero
    7128:	0039883a 	mov	fp,zero
    712c:	0025883a 	mov	r18,zero
    7130:	90001f26 	beq	r18,zero,71b0 <__sfvwrite_r+0x29c>
    7134:	40005a26 	beq	r8,zero,72a0 <__sfvwrite_r+0x38c>
    7138:	982d883a 	mov	r22,r19
    713c:	94c0012e 	bgeu	r18,r19,7144 <__sfvwrite_r+0x230>
    7140:	902d883a 	mov	r22,r18
    7144:	81000017 	ldw	r4,0(r16)
    7148:	80800417 	ldw	r2,16(r16)
    714c:	b02f883a 	mov	r23,r22
    7150:	81c00517 	ldw	r7,20(r16)
    7154:	1100032e 	bgeu	r2,r4,7164 <__sfvwrite_r+0x250>
    7158:	80c00217 	ldw	r3,8(r16)
    715c:	38c7883a 	add	r3,r7,r3
    7160:	1d801816 	blt	r3,r22,71c4 <__sfvwrite_r+0x2b0>
    7164:	b1c03e16 	blt	r22,r7,7260 <__sfvwrite_r+0x34c>
    7168:	80800917 	ldw	r2,36(r16)
    716c:	81400717 	ldw	r5,28(r16)
    7170:	e00d883a 	mov	r6,fp
    7174:	da000115 	stw	r8,4(sp)
    7178:	a809883a 	mov	r4,r21
    717c:	103ee83a 	callr	r2
    7180:	102f883a 	mov	r23,r2
    7184:	da000117 	ldw	r8,4(sp)
    7188:	00bfe00e 	bge	zero,r2,710c <__alt_data_end+0xff00710c>
    718c:	9de7c83a 	sub	r19,r19,r23
    7190:	98001f26 	beq	r19,zero,7210 <__sfvwrite_r+0x2fc>
    7194:	a0800217 	ldw	r2,8(r20)
    7198:	e5f9883a 	add	fp,fp,r23
    719c:	95e5c83a 	sub	r18,r18,r23
    71a0:	15efc83a 	sub	r23,r2,r23
    71a4:	a5c00215 	stw	r23,8(r20)
    71a8:	b83f8726 	beq	r23,zero,6fc8 <__alt_data_end+0xff006fc8>
    71ac:	903fe11e 	bne	r18,zero,7134 <__alt_data_end+0xff007134>
    71b0:	8f000017 	ldw	fp,0(r17)
    71b4:	8c800117 	ldw	r18,4(r17)
    71b8:	0011883a 	mov	r8,zero
    71bc:	8c400204 	addi	r17,r17,8
    71c0:	003fdb06 	br	7130 <__alt_data_end+0xff007130>
    71c4:	180d883a 	mov	r6,r3
    71c8:	e00b883a 	mov	r5,fp
    71cc:	da000115 	stw	r8,4(sp)
    71d0:	d8c00015 	stw	r3,0(sp)
    71d4:	0007a1c0 	call	7a1c <memmove>
    71d8:	d8c00017 	ldw	r3,0(sp)
    71dc:	80800017 	ldw	r2,0(r16)
    71e0:	800b883a 	mov	r5,r16
    71e4:	a809883a 	mov	r4,r21
    71e8:	10c5883a 	add	r2,r2,r3
    71ec:	80800015 	stw	r2,0(r16)
    71f0:	d8c00015 	stw	r3,0(sp)
    71f4:	00066b40 	call	66b4 <_fflush_r>
    71f8:	d8c00017 	ldw	r3,0(sp)
    71fc:	da000117 	ldw	r8,4(sp)
    7200:	103fc21e 	bne	r2,zero,710c <__alt_data_end+0xff00710c>
    7204:	182f883a 	mov	r23,r3
    7208:	9de7c83a 	sub	r19,r19,r23
    720c:	983fe11e 	bne	r19,zero,7194 <__alt_data_end+0xff007194>
    7210:	800b883a 	mov	r5,r16
    7214:	a809883a 	mov	r4,r21
    7218:	00066b40 	call	66b4 <_fflush_r>
    721c:	103fbb1e 	bne	r2,zero,710c <__alt_data_end+0xff00710c>
    7220:	0011883a 	mov	r8,zero
    7224:	003fdb06 	br	7194 <__alt_data_end+0xff007194>
    7228:	94c0012e 	bgeu	r18,r19,7230 <__sfvwrite_r+0x31c>
    722c:	9027883a 	mov	r19,r18
    7230:	980d883a 	mov	r6,r19
    7234:	e00b883a 	mov	r5,fp
    7238:	0007a1c0 	call	7a1c <memmove>
    723c:	80800217 	ldw	r2,8(r16)
    7240:	80c00017 	ldw	r3,0(r16)
    7244:	14c5c83a 	sub	r2,r2,r19
    7248:	1cc7883a 	add	r3,r3,r19
    724c:	80800215 	stw	r2,8(r16)
    7250:	80c00015 	stw	r3,0(r16)
    7254:	10004326 	beq	r2,zero,7364 <__sfvwrite_r+0x450>
    7258:	9805883a 	mov	r2,r19
    725c:	003f8606 	br	7078 <__alt_data_end+0xff007078>
    7260:	b00d883a 	mov	r6,r22
    7264:	e00b883a 	mov	r5,fp
    7268:	da000115 	stw	r8,4(sp)
    726c:	0007a1c0 	call	7a1c <memmove>
    7270:	80800217 	ldw	r2,8(r16)
    7274:	80c00017 	ldw	r3,0(r16)
    7278:	da000117 	ldw	r8,4(sp)
    727c:	1585c83a 	sub	r2,r2,r22
    7280:	1dad883a 	add	r22,r3,r22
    7284:	80800215 	stw	r2,8(r16)
    7288:	85800015 	stw	r22,0(r16)
    728c:	003fbf06 	br	718c <__alt_data_end+0xff00718c>
    7290:	81000017 	ldw	r4,0(r16)
    7294:	9027883a 	mov	r19,r18
    7298:	902f883a 	mov	r23,r18
    729c:	003f6c06 	br	7050 <__alt_data_end+0xff007050>
    72a0:	900d883a 	mov	r6,r18
    72a4:	01400284 	movi	r5,10
    72a8:	e009883a 	mov	r4,fp
    72ac:	00077f00 	call	77f0 <memchr>
    72b0:	10003e26 	beq	r2,zero,73ac <__sfvwrite_r+0x498>
    72b4:	10800044 	addi	r2,r2,1
    72b8:	1727c83a 	sub	r19,r2,fp
    72bc:	02000044 	movi	r8,1
    72c0:	003f9d06 	br	7138 <__alt_data_end+0xff007138>
    72c4:	80800517 	ldw	r2,20(r16)
    72c8:	81400417 	ldw	r5,16(r16)
    72cc:	81c00017 	ldw	r7,0(r16)
    72d0:	10a7883a 	add	r19,r2,r2
    72d4:	9885883a 	add	r2,r19,r2
    72d8:	1026d7fa 	srli	r19,r2,31
    72dc:	396dc83a 	sub	r22,r7,r5
    72e0:	b1000044 	addi	r4,r22,1
    72e4:	9885883a 	add	r2,r19,r2
    72e8:	1027d07a 	srai	r19,r2,1
    72ec:	2485883a 	add	r2,r4,r18
    72f0:	980d883a 	mov	r6,r19
    72f4:	9880022e 	bgeu	r19,r2,7300 <__sfvwrite_r+0x3ec>
    72f8:	1027883a 	mov	r19,r2
    72fc:	100d883a 	mov	r6,r2
    7300:	18c1000c 	andi	r3,r3,1024
    7304:	18001c26 	beq	r3,zero,7378 <__sfvwrite_r+0x464>
    7308:	300b883a 	mov	r5,r6
    730c:	a809883a 	mov	r4,r21
    7310:	0001db40 	call	1db4 <_malloc_r>
    7314:	102f883a 	mov	r23,r2
    7318:	10002926 	beq	r2,zero,73c0 <__sfvwrite_r+0x4ac>
    731c:	81400417 	ldw	r5,16(r16)
    7320:	b00d883a 	mov	r6,r22
    7324:	1009883a 	mov	r4,r2
    7328:	00078d40 	call	78d4 <memcpy>
    732c:	8080030b 	ldhu	r2,12(r16)
    7330:	00fedfc4 	movi	r3,-1153
    7334:	10c4703a 	and	r2,r2,r3
    7338:	10802014 	ori	r2,r2,128
    733c:	8080030d 	sth	r2,12(r16)
    7340:	bd89883a 	add	r4,r23,r22
    7344:	9d8fc83a 	sub	r7,r19,r22
    7348:	85c00415 	stw	r23,16(r16)
    734c:	84c00515 	stw	r19,20(r16)
    7350:	81000015 	stw	r4,0(r16)
    7354:	9027883a 	mov	r19,r18
    7358:	81c00215 	stw	r7,8(r16)
    735c:	902f883a 	mov	r23,r18
    7360:	003f3b06 	br	7050 <__alt_data_end+0xff007050>
    7364:	800b883a 	mov	r5,r16
    7368:	a809883a 	mov	r4,r21
    736c:	00066b40 	call	66b4 <_fflush_r>
    7370:	103fb926 	beq	r2,zero,7258 <__alt_data_end+0xff007258>
    7374:	003f6506 	br	710c <__alt_data_end+0xff00710c>
    7378:	a809883a 	mov	r4,r21
    737c:	0008c9c0 	call	8c9c <_realloc_r>
    7380:	102f883a 	mov	r23,r2
    7384:	103fee1e 	bne	r2,zero,7340 <__alt_data_end+0xff007340>
    7388:	81400417 	ldw	r5,16(r16)
    738c:	a809883a 	mov	r4,r21
    7390:	0006c040 	call	6c04 <_free_r>
    7394:	8080030b 	ldhu	r2,12(r16)
    7398:	00ffdfc4 	movi	r3,-129
    739c:	1884703a 	and	r2,r3,r2
    73a0:	00c00304 	movi	r3,12
    73a4:	a8c00015 	stw	r3,0(r21)
    73a8:	003f5906 	br	7110 <__alt_data_end+0xff007110>
    73ac:	94c00044 	addi	r19,r18,1
    73b0:	02000044 	movi	r8,1
    73b4:	003f6006 	br	7138 <__alt_data_end+0xff007138>
    73b8:	00bfffc4 	movi	r2,-1
    73bc:	003f0306 	br	6fcc <__alt_data_end+0xff006fcc>
    73c0:	00800304 	movi	r2,12
    73c4:	a8800015 	stw	r2,0(r21)
    73c8:	8080030b 	ldhu	r2,12(r16)
    73cc:	003f5006 	br	7110 <__alt_data_end+0xff007110>

000073d0 <_fwalk>:
    73d0:	defff704 	addi	sp,sp,-36
    73d4:	dd000415 	stw	r20,16(sp)
    73d8:	dfc00815 	stw	ra,32(sp)
    73dc:	ddc00715 	stw	r23,28(sp)
    73e0:	dd800615 	stw	r22,24(sp)
    73e4:	dd400515 	stw	r21,20(sp)
    73e8:	dcc00315 	stw	r19,12(sp)
    73ec:	dc800215 	stw	r18,8(sp)
    73f0:	dc400115 	stw	r17,4(sp)
    73f4:	dc000015 	stw	r16,0(sp)
    73f8:	2500b804 	addi	r20,r4,736
    73fc:	a0002326 	beq	r20,zero,748c <_fwalk+0xbc>
    7400:	282b883a 	mov	r21,r5
    7404:	002f883a 	mov	r23,zero
    7408:	05800044 	movi	r22,1
    740c:	04ffffc4 	movi	r19,-1
    7410:	a4400117 	ldw	r17,4(r20)
    7414:	a4800217 	ldw	r18,8(r20)
    7418:	8c7fffc4 	addi	r17,r17,-1
    741c:	88000d16 	blt	r17,zero,7454 <_fwalk+0x84>
    7420:	94000304 	addi	r16,r18,12
    7424:	94800384 	addi	r18,r18,14
    7428:	8080000b 	ldhu	r2,0(r16)
    742c:	8c7fffc4 	addi	r17,r17,-1
    7430:	813ffd04 	addi	r4,r16,-12
    7434:	b080042e 	bgeu	r22,r2,7448 <_fwalk+0x78>
    7438:	9080000f 	ldh	r2,0(r18)
    743c:	14c00226 	beq	r2,r19,7448 <_fwalk+0x78>
    7440:	a83ee83a 	callr	r21
    7444:	b8aeb03a 	or	r23,r23,r2
    7448:	84001a04 	addi	r16,r16,104
    744c:	94801a04 	addi	r18,r18,104
    7450:	8cfff51e 	bne	r17,r19,7428 <__alt_data_end+0xff007428>
    7454:	a5000017 	ldw	r20,0(r20)
    7458:	a03fed1e 	bne	r20,zero,7410 <__alt_data_end+0xff007410>
    745c:	b805883a 	mov	r2,r23
    7460:	dfc00817 	ldw	ra,32(sp)
    7464:	ddc00717 	ldw	r23,28(sp)
    7468:	dd800617 	ldw	r22,24(sp)
    746c:	dd400517 	ldw	r21,20(sp)
    7470:	dd000417 	ldw	r20,16(sp)
    7474:	dcc00317 	ldw	r19,12(sp)
    7478:	dc800217 	ldw	r18,8(sp)
    747c:	dc400117 	ldw	r17,4(sp)
    7480:	dc000017 	ldw	r16,0(sp)
    7484:	dec00904 	addi	sp,sp,36
    7488:	f800283a 	ret
    748c:	002f883a 	mov	r23,zero
    7490:	003ff206 	br	745c <__alt_data_end+0xff00745c>

00007494 <_fwalk_reent>:
    7494:	defff704 	addi	sp,sp,-36
    7498:	dd000415 	stw	r20,16(sp)
    749c:	dfc00815 	stw	ra,32(sp)
    74a0:	ddc00715 	stw	r23,28(sp)
    74a4:	dd800615 	stw	r22,24(sp)
    74a8:	dd400515 	stw	r21,20(sp)
    74ac:	dcc00315 	stw	r19,12(sp)
    74b0:	dc800215 	stw	r18,8(sp)
    74b4:	dc400115 	stw	r17,4(sp)
    74b8:	dc000015 	stw	r16,0(sp)
    74bc:	2500b804 	addi	r20,r4,736
    74c0:	a0002326 	beq	r20,zero,7550 <_fwalk_reent+0xbc>
    74c4:	282b883a 	mov	r21,r5
    74c8:	2027883a 	mov	r19,r4
    74cc:	002f883a 	mov	r23,zero
    74d0:	05800044 	movi	r22,1
    74d4:	04bfffc4 	movi	r18,-1
    74d8:	a4400117 	ldw	r17,4(r20)
    74dc:	a4000217 	ldw	r16,8(r20)
    74e0:	8c7fffc4 	addi	r17,r17,-1
    74e4:	88000c16 	blt	r17,zero,7518 <_fwalk_reent+0x84>
    74e8:	84000304 	addi	r16,r16,12
    74ec:	8080000b 	ldhu	r2,0(r16)
    74f0:	8c7fffc4 	addi	r17,r17,-1
    74f4:	817ffd04 	addi	r5,r16,-12
    74f8:	b080052e 	bgeu	r22,r2,7510 <_fwalk_reent+0x7c>
    74fc:	8080008f 	ldh	r2,2(r16)
    7500:	9809883a 	mov	r4,r19
    7504:	14800226 	beq	r2,r18,7510 <_fwalk_reent+0x7c>
    7508:	a83ee83a 	callr	r21
    750c:	b8aeb03a 	or	r23,r23,r2
    7510:	84001a04 	addi	r16,r16,104
    7514:	8cbff51e 	bne	r17,r18,74ec <__alt_data_end+0xff0074ec>
    7518:	a5000017 	ldw	r20,0(r20)
    751c:	a03fee1e 	bne	r20,zero,74d8 <__alt_data_end+0xff0074d8>
    7520:	b805883a 	mov	r2,r23
    7524:	dfc00817 	ldw	ra,32(sp)
    7528:	ddc00717 	ldw	r23,28(sp)
    752c:	dd800617 	ldw	r22,24(sp)
    7530:	dd400517 	ldw	r21,20(sp)
    7534:	dd000417 	ldw	r20,16(sp)
    7538:	dcc00317 	ldw	r19,12(sp)
    753c:	dc800217 	ldw	r18,8(sp)
    7540:	dc400117 	ldw	r17,4(sp)
    7544:	dc000017 	ldw	r16,0(sp)
    7548:	dec00904 	addi	sp,sp,36
    754c:	f800283a 	ret
    7550:	002f883a 	mov	r23,zero
    7554:	003ff206 	br	7520 <__alt_data_end+0xff007520>

00007558 <_setlocale_r>:
    7558:	30001b26 	beq	r6,zero,75c8 <_setlocale_r+0x70>
    755c:	01400074 	movhi	r5,1
    7560:	defffe04 	addi	sp,sp,-8
    7564:	29414b04 	addi	r5,r5,1324
    7568:	3009883a 	mov	r4,r6
    756c:	dc000015 	stw	r16,0(sp)
    7570:	dfc00115 	stw	ra,4(sp)
    7574:	3021883a 	mov	r16,r6
    7578:	00093b00 	call	93b0 <strcmp>
    757c:	1000061e 	bne	r2,zero,7598 <_setlocale_r+0x40>
    7580:	00800074 	movhi	r2,1
    7584:	10814a04 	addi	r2,r2,1320
    7588:	dfc00117 	ldw	ra,4(sp)
    758c:	dc000017 	ldw	r16,0(sp)
    7590:	dec00204 	addi	sp,sp,8
    7594:	f800283a 	ret
    7598:	01400074 	movhi	r5,1
    759c:	29414a04 	addi	r5,r5,1320
    75a0:	8009883a 	mov	r4,r16
    75a4:	00093b00 	call	93b0 <strcmp>
    75a8:	103ff526 	beq	r2,zero,7580 <__alt_data_end+0xff007580>
    75ac:	01400074 	movhi	r5,1
    75b0:	29413504 	addi	r5,r5,1236
    75b4:	8009883a 	mov	r4,r16
    75b8:	00093b00 	call	93b0 <strcmp>
    75bc:	103ff026 	beq	r2,zero,7580 <__alt_data_end+0xff007580>
    75c0:	0005883a 	mov	r2,zero
    75c4:	003ff006 	br	7588 <__alt_data_end+0xff007588>
    75c8:	00800074 	movhi	r2,1
    75cc:	10814a04 	addi	r2,r2,1320
    75d0:	f800283a 	ret

000075d4 <__locale_charset>:
    75d4:	00800074 	movhi	r2,1
    75d8:	1083f904 	addi	r2,r2,4068
    75dc:	f800283a 	ret

000075e0 <__locale_mb_cur_max>:
    75e0:	00800074 	movhi	r2,1
    75e4:	10889704 	addi	r2,r2,8796
    75e8:	10800017 	ldw	r2,0(r2)
    75ec:	f800283a 	ret

000075f0 <__locale_msgcharset>:
    75f0:	00800074 	movhi	r2,1
    75f4:	1083f104 	addi	r2,r2,4036
    75f8:	f800283a 	ret

000075fc <__locale_cjk_lang>:
    75fc:	0005883a 	mov	r2,zero
    7600:	f800283a 	ret

00007604 <_localeconv_r>:
    7604:	00800074 	movhi	r2,1
    7608:	10840104 	addi	r2,r2,4100
    760c:	f800283a 	ret

00007610 <setlocale>:
    7610:	00800074 	movhi	r2,1
    7614:	10889604 	addi	r2,r2,8792
    7618:	280d883a 	mov	r6,r5
    761c:	200b883a 	mov	r5,r4
    7620:	11000017 	ldw	r4,0(r2)
    7624:	00075581 	jmpi	7558 <_setlocale_r>

00007628 <localeconv>:
    7628:	00800074 	movhi	r2,1
    762c:	10840104 	addi	r2,r2,4100
    7630:	f800283a 	ret

00007634 <__smakebuf_r>:
    7634:	2880030b 	ldhu	r2,12(r5)
    7638:	10c0008c 	andi	r3,r2,2
    763c:	1800411e 	bne	r3,zero,7744 <__smakebuf_r+0x110>
    7640:	deffec04 	addi	sp,sp,-80
    7644:	dc000f15 	stw	r16,60(sp)
    7648:	2821883a 	mov	r16,r5
    764c:	2940038f 	ldh	r5,14(r5)
    7650:	dc401015 	stw	r17,64(sp)
    7654:	dfc01315 	stw	ra,76(sp)
    7658:	dcc01215 	stw	r19,72(sp)
    765c:	dc801115 	stw	r18,68(sp)
    7660:	2023883a 	mov	r17,r4
    7664:	28001c16 	blt	r5,zero,76d8 <__smakebuf_r+0xa4>
    7668:	d80d883a 	mov	r6,sp
    766c:	000af580 	call	af58 <_fstat_r>
    7670:	10001816 	blt	r2,zero,76d4 <__smakebuf_r+0xa0>
    7674:	d8800117 	ldw	r2,4(sp)
    7678:	00e00014 	movui	r3,32768
    767c:	10bc000c 	andi	r2,r2,61440
    7680:	14c80020 	cmpeqi	r19,r2,8192
    7684:	10c03726 	beq	r2,r3,7764 <__smakebuf_r+0x130>
    7688:	80c0030b 	ldhu	r3,12(r16)
    768c:	18c20014 	ori	r3,r3,2048
    7690:	80c0030d 	sth	r3,12(r16)
    7694:	00c80004 	movi	r3,8192
    7698:	10c0521e 	bne	r2,r3,77e4 <__smakebuf_r+0x1b0>
    769c:	8140038f 	ldh	r5,14(r16)
    76a0:	8809883a 	mov	r4,r17
    76a4:	000afb40 	call	afb4 <_isatty_r>
    76a8:	10004c26 	beq	r2,zero,77dc <__smakebuf_r+0x1a8>
    76ac:	8080030b 	ldhu	r2,12(r16)
    76b0:	80c010c4 	addi	r3,r16,67
    76b4:	80c00015 	stw	r3,0(r16)
    76b8:	10800054 	ori	r2,r2,1
    76bc:	8080030d 	sth	r2,12(r16)
    76c0:	00800044 	movi	r2,1
    76c4:	80c00415 	stw	r3,16(r16)
    76c8:	80800515 	stw	r2,20(r16)
    76cc:	04810004 	movi	r18,1024
    76d0:	00000706 	br	76f0 <__smakebuf_r+0xbc>
    76d4:	8080030b 	ldhu	r2,12(r16)
    76d8:	10c0200c 	andi	r3,r2,128
    76dc:	18001f1e 	bne	r3,zero,775c <__smakebuf_r+0x128>
    76e0:	04810004 	movi	r18,1024
    76e4:	10820014 	ori	r2,r2,2048
    76e8:	8080030d 	sth	r2,12(r16)
    76ec:	0027883a 	mov	r19,zero
    76f0:	900b883a 	mov	r5,r18
    76f4:	8809883a 	mov	r4,r17
    76f8:	0001db40 	call	1db4 <_malloc_r>
    76fc:	10002c26 	beq	r2,zero,77b0 <__smakebuf_r+0x17c>
    7700:	80c0030b 	ldhu	r3,12(r16)
    7704:	01000034 	movhi	r4,0
    7708:	2119d204 	addi	r4,r4,26440
    770c:	89000f15 	stw	r4,60(r17)
    7710:	18c02014 	ori	r3,r3,128
    7714:	80c0030d 	sth	r3,12(r16)
    7718:	80800015 	stw	r2,0(r16)
    771c:	80800415 	stw	r2,16(r16)
    7720:	84800515 	stw	r18,20(r16)
    7724:	98001a1e 	bne	r19,zero,7790 <__smakebuf_r+0x15c>
    7728:	dfc01317 	ldw	ra,76(sp)
    772c:	dcc01217 	ldw	r19,72(sp)
    7730:	dc801117 	ldw	r18,68(sp)
    7734:	dc401017 	ldw	r17,64(sp)
    7738:	dc000f17 	ldw	r16,60(sp)
    773c:	dec01404 	addi	sp,sp,80
    7740:	f800283a 	ret
    7744:	288010c4 	addi	r2,r5,67
    7748:	28800015 	stw	r2,0(r5)
    774c:	28800415 	stw	r2,16(r5)
    7750:	00800044 	movi	r2,1
    7754:	28800515 	stw	r2,20(r5)
    7758:	f800283a 	ret
    775c:	04801004 	movi	r18,64
    7760:	003fe006 	br	76e4 <__alt_data_end+0xff0076e4>
    7764:	81000a17 	ldw	r4,40(r16)
    7768:	00c00074 	movhi	r3,1
    776c:	18e4d304 	addi	r3,r3,-27828
    7770:	20ffc51e 	bne	r4,r3,7688 <__alt_data_end+0xff007688>
    7774:	8080030b 	ldhu	r2,12(r16)
    7778:	04810004 	movi	r18,1024
    777c:	84801315 	stw	r18,76(r16)
    7780:	1484b03a 	or	r2,r2,r18
    7784:	8080030d 	sth	r2,12(r16)
    7788:	0027883a 	mov	r19,zero
    778c:	003fd806 	br	76f0 <__alt_data_end+0xff0076f0>
    7790:	8140038f 	ldh	r5,14(r16)
    7794:	8809883a 	mov	r4,r17
    7798:	000afb40 	call	afb4 <_isatty_r>
    779c:	103fe226 	beq	r2,zero,7728 <__alt_data_end+0xff007728>
    77a0:	8080030b 	ldhu	r2,12(r16)
    77a4:	10800054 	ori	r2,r2,1
    77a8:	8080030d 	sth	r2,12(r16)
    77ac:	003fde06 	br	7728 <__alt_data_end+0xff007728>
    77b0:	8080030b 	ldhu	r2,12(r16)
    77b4:	10c0800c 	andi	r3,r2,512
    77b8:	183fdb1e 	bne	r3,zero,7728 <__alt_data_end+0xff007728>
    77bc:	10800094 	ori	r2,r2,2
    77c0:	80c010c4 	addi	r3,r16,67
    77c4:	8080030d 	sth	r2,12(r16)
    77c8:	00800044 	movi	r2,1
    77cc:	80c00015 	stw	r3,0(r16)
    77d0:	80c00415 	stw	r3,16(r16)
    77d4:	80800515 	stw	r2,20(r16)
    77d8:	003fd306 	br	7728 <__alt_data_end+0xff007728>
    77dc:	04810004 	movi	r18,1024
    77e0:	003fc306 	br	76f0 <__alt_data_end+0xff0076f0>
    77e4:	0027883a 	mov	r19,zero
    77e8:	04810004 	movi	r18,1024
    77ec:	003fc006 	br	76f0 <__alt_data_end+0xff0076f0>

000077f0 <memchr>:
    77f0:	208000cc 	andi	r2,r4,3
    77f4:	280f883a 	mov	r7,r5
    77f8:	10003426 	beq	r2,zero,78cc <memchr+0xdc>
    77fc:	30bfffc4 	addi	r2,r6,-1
    7800:	30001a26 	beq	r6,zero,786c <memchr+0x7c>
    7804:	20c00003 	ldbu	r3,0(r4)
    7808:	29803fcc 	andi	r6,r5,255
    780c:	30c0051e 	bne	r6,r3,7824 <memchr+0x34>
    7810:	00001806 	br	7874 <memchr+0x84>
    7814:	10001526 	beq	r2,zero,786c <memchr+0x7c>
    7818:	20c00003 	ldbu	r3,0(r4)
    781c:	10bfffc4 	addi	r2,r2,-1
    7820:	30c01426 	beq	r6,r3,7874 <memchr+0x84>
    7824:	21000044 	addi	r4,r4,1
    7828:	20c000cc 	andi	r3,r4,3
    782c:	183ff91e 	bne	r3,zero,7814 <__alt_data_end+0xff007814>
    7830:	020000c4 	movi	r8,3
    7834:	40801136 	bltu	r8,r2,787c <memchr+0x8c>
    7838:	10000c26 	beq	r2,zero,786c <memchr+0x7c>
    783c:	20c00003 	ldbu	r3,0(r4)
    7840:	29403fcc 	andi	r5,r5,255
    7844:	28c00b26 	beq	r5,r3,7874 <memchr+0x84>
    7848:	20c00044 	addi	r3,r4,1
    784c:	39803fcc 	andi	r6,r7,255
    7850:	2089883a 	add	r4,r4,r2
    7854:	00000306 	br	7864 <memchr+0x74>
    7858:	18c00044 	addi	r3,r3,1
    785c:	197fffc3 	ldbu	r5,-1(r3)
    7860:	31400526 	beq	r6,r5,7878 <memchr+0x88>
    7864:	1805883a 	mov	r2,r3
    7868:	20fffb1e 	bne	r4,r3,7858 <__alt_data_end+0xff007858>
    786c:	0005883a 	mov	r2,zero
    7870:	f800283a 	ret
    7874:	2005883a 	mov	r2,r4
    7878:	f800283a 	ret
    787c:	28c03fcc 	andi	r3,r5,255
    7880:	1812923a 	slli	r9,r3,8
    7884:	02ffbff4 	movhi	r11,65279
    7888:	02a02074 	movhi	r10,32897
    788c:	48d2b03a 	or	r9,r9,r3
    7890:	4806943a 	slli	r3,r9,16
    7894:	5affbfc4 	addi	r11,r11,-257
    7898:	52a02004 	addi	r10,r10,-32640
    789c:	48d2b03a 	or	r9,r9,r3
    78a0:	20c00017 	ldw	r3,0(r4)
    78a4:	48c6f03a 	xor	r3,r9,r3
    78a8:	1acd883a 	add	r6,r3,r11
    78ac:	00c6303a 	nor	r3,zero,r3
    78b0:	30c6703a 	and	r3,r6,r3
    78b4:	1a86703a 	and	r3,r3,r10
    78b8:	183fe01e 	bne	r3,zero,783c <__alt_data_end+0xff00783c>
    78bc:	10bfff04 	addi	r2,r2,-4
    78c0:	21000104 	addi	r4,r4,4
    78c4:	40bff636 	bltu	r8,r2,78a0 <__alt_data_end+0xff0078a0>
    78c8:	003fdb06 	br	7838 <__alt_data_end+0xff007838>
    78cc:	3005883a 	mov	r2,r6
    78d0:	003fd706 	br	7830 <__alt_data_end+0xff007830>

000078d4 <memcpy>:
    78d4:	defffd04 	addi	sp,sp,-12
    78d8:	dfc00215 	stw	ra,8(sp)
    78dc:	dc400115 	stw	r17,4(sp)
    78e0:	dc000015 	stw	r16,0(sp)
    78e4:	00c003c4 	movi	r3,15
    78e8:	2005883a 	mov	r2,r4
    78ec:	1980452e 	bgeu	r3,r6,7a04 <memcpy+0x130>
    78f0:	2906b03a 	or	r3,r5,r4
    78f4:	18c000cc 	andi	r3,r3,3
    78f8:	1800441e 	bne	r3,zero,7a0c <memcpy+0x138>
    78fc:	347ffc04 	addi	r17,r6,-16
    7900:	8822d13a 	srli	r17,r17,4
    7904:	28c00104 	addi	r3,r5,4
    7908:	23400104 	addi	r13,r4,4
    790c:	8820913a 	slli	r16,r17,4
    7910:	2b000204 	addi	r12,r5,8
    7914:	22c00204 	addi	r11,r4,8
    7918:	84000504 	addi	r16,r16,20
    791c:	2a800304 	addi	r10,r5,12
    7920:	22400304 	addi	r9,r4,12
    7924:	2c21883a 	add	r16,r5,r16
    7928:	2811883a 	mov	r8,r5
    792c:	200f883a 	mov	r7,r4
    7930:	41000017 	ldw	r4,0(r8)
    7934:	1fc00017 	ldw	ra,0(r3)
    7938:	63c00017 	ldw	r15,0(r12)
    793c:	39000015 	stw	r4,0(r7)
    7940:	53800017 	ldw	r14,0(r10)
    7944:	6fc00015 	stw	ra,0(r13)
    7948:	5bc00015 	stw	r15,0(r11)
    794c:	4b800015 	stw	r14,0(r9)
    7950:	18c00404 	addi	r3,r3,16
    7954:	39c00404 	addi	r7,r7,16
    7958:	42000404 	addi	r8,r8,16
    795c:	6b400404 	addi	r13,r13,16
    7960:	63000404 	addi	r12,r12,16
    7964:	5ac00404 	addi	r11,r11,16
    7968:	52800404 	addi	r10,r10,16
    796c:	4a400404 	addi	r9,r9,16
    7970:	1c3fef1e 	bne	r3,r16,7930 <__alt_data_end+0xff007930>
    7974:	89c00044 	addi	r7,r17,1
    7978:	380e913a 	slli	r7,r7,4
    797c:	310003cc 	andi	r4,r6,15
    7980:	02c000c4 	movi	r11,3
    7984:	11c7883a 	add	r3,r2,r7
    7988:	29cb883a 	add	r5,r5,r7
    798c:	5900212e 	bgeu	r11,r4,7a14 <memcpy+0x140>
    7990:	1813883a 	mov	r9,r3
    7994:	2811883a 	mov	r8,r5
    7998:	200f883a 	mov	r7,r4
    799c:	42800017 	ldw	r10,0(r8)
    79a0:	4a400104 	addi	r9,r9,4
    79a4:	39ffff04 	addi	r7,r7,-4
    79a8:	4abfff15 	stw	r10,-4(r9)
    79ac:	42000104 	addi	r8,r8,4
    79b0:	59fffa36 	bltu	r11,r7,799c <__alt_data_end+0xff00799c>
    79b4:	213fff04 	addi	r4,r4,-4
    79b8:	2008d0ba 	srli	r4,r4,2
    79bc:	318000cc 	andi	r6,r6,3
    79c0:	21000044 	addi	r4,r4,1
    79c4:	2109883a 	add	r4,r4,r4
    79c8:	2109883a 	add	r4,r4,r4
    79cc:	1907883a 	add	r3,r3,r4
    79d0:	290b883a 	add	r5,r5,r4
    79d4:	30000626 	beq	r6,zero,79f0 <memcpy+0x11c>
    79d8:	198d883a 	add	r6,r3,r6
    79dc:	29c00003 	ldbu	r7,0(r5)
    79e0:	18c00044 	addi	r3,r3,1
    79e4:	29400044 	addi	r5,r5,1
    79e8:	19ffffc5 	stb	r7,-1(r3)
    79ec:	19bffb1e 	bne	r3,r6,79dc <__alt_data_end+0xff0079dc>
    79f0:	dfc00217 	ldw	ra,8(sp)
    79f4:	dc400117 	ldw	r17,4(sp)
    79f8:	dc000017 	ldw	r16,0(sp)
    79fc:	dec00304 	addi	sp,sp,12
    7a00:	f800283a 	ret
    7a04:	2007883a 	mov	r3,r4
    7a08:	003ff206 	br	79d4 <__alt_data_end+0xff0079d4>
    7a0c:	2007883a 	mov	r3,r4
    7a10:	003ff106 	br	79d8 <__alt_data_end+0xff0079d8>
    7a14:	200d883a 	mov	r6,r4
    7a18:	003fee06 	br	79d4 <__alt_data_end+0xff0079d4>

00007a1c <memmove>:
    7a1c:	2005883a 	mov	r2,r4
    7a20:	29000b2e 	bgeu	r5,r4,7a50 <memmove+0x34>
    7a24:	298f883a 	add	r7,r5,r6
    7a28:	21c0092e 	bgeu	r4,r7,7a50 <memmove+0x34>
    7a2c:	2187883a 	add	r3,r4,r6
    7a30:	198bc83a 	sub	r5,r3,r6
    7a34:	30004826 	beq	r6,zero,7b58 <memmove+0x13c>
    7a38:	39ffffc4 	addi	r7,r7,-1
    7a3c:	39000003 	ldbu	r4,0(r7)
    7a40:	18ffffc4 	addi	r3,r3,-1
    7a44:	19000005 	stb	r4,0(r3)
    7a48:	28fffb1e 	bne	r5,r3,7a38 <__alt_data_end+0xff007a38>
    7a4c:	f800283a 	ret
    7a50:	00c003c4 	movi	r3,15
    7a54:	1980412e 	bgeu	r3,r6,7b5c <memmove+0x140>
    7a58:	2886b03a 	or	r3,r5,r2
    7a5c:	18c000cc 	andi	r3,r3,3
    7a60:	1800401e 	bne	r3,zero,7b64 <memmove+0x148>
    7a64:	33fffc04 	addi	r15,r6,-16
    7a68:	781ed13a 	srli	r15,r15,4
    7a6c:	28c00104 	addi	r3,r5,4
    7a70:	13400104 	addi	r13,r2,4
    7a74:	781c913a 	slli	r14,r15,4
    7a78:	2b000204 	addi	r12,r5,8
    7a7c:	12c00204 	addi	r11,r2,8
    7a80:	73800504 	addi	r14,r14,20
    7a84:	2a800304 	addi	r10,r5,12
    7a88:	12400304 	addi	r9,r2,12
    7a8c:	2b9d883a 	add	r14,r5,r14
    7a90:	2811883a 	mov	r8,r5
    7a94:	100f883a 	mov	r7,r2
    7a98:	41000017 	ldw	r4,0(r8)
    7a9c:	39c00404 	addi	r7,r7,16
    7aa0:	18c00404 	addi	r3,r3,16
    7aa4:	393ffc15 	stw	r4,-16(r7)
    7aa8:	193ffc17 	ldw	r4,-16(r3)
    7aac:	6b400404 	addi	r13,r13,16
    7ab0:	5ac00404 	addi	r11,r11,16
    7ab4:	693ffc15 	stw	r4,-16(r13)
    7ab8:	61000017 	ldw	r4,0(r12)
    7abc:	4a400404 	addi	r9,r9,16
    7ac0:	42000404 	addi	r8,r8,16
    7ac4:	593ffc15 	stw	r4,-16(r11)
    7ac8:	51000017 	ldw	r4,0(r10)
    7acc:	63000404 	addi	r12,r12,16
    7ad0:	52800404 	addi	r10,r10,16
    7ad4:	493ffc15 	stw	r4,-16(r9)
    7ad8:	1bbfef1e 	bne	r3,r14,7a98 <__alt_data_end+0xff007a98>
    7adc:	79000044 	addi	r4,r15,1
    7ae0:	2008913a 	slli	r4,r4,4
    7ae4:	328003cc 	andi	r10,r6,15
    7ae8:	02c000c4 	movi	r11,3
    7aec:	1107883a 	add	r3,r2,r4
    7af0:	290b883a 	add	r5,r5,r4
    7af4:	5a801e2e 	bgeu	r11,r10,7b70 <memmove+0x154>
    7af8:	1813883a 	mov	r9,r3
    7afc:	2811883a 	mov	r8,r5
    7b00:	500f883a 	mov	r7,r10
    7b04:	41000017 	ldw	r4,0(r8)
    7b08:	4a400104 	addi	r9,r9,4
    7b0c:	39ffff04 	addi	r7,r7,-4
    7b10:	493fff15 	stw	r4,-4(r9)
    7b14:	42000104 	addi	r8,r8,4
    7b18:	59fffa36 	bltu	r11,r7,7b04 <__alt_data_end+0xff007b04>
    7b1c:	513fff04 	addi	r4,r10,-4
    7b20:	2008d0ba 	srli	r4,r4,2
    7b24:	318000cc 	andi	r6,r6,3
    7b28:	21000044 	addi	r4,r4,1
    7b2c:	2109883a 	add	r4,r4,r4
    7b30:	2109883a 	add	r4,r4,r4
    7b34:	1907883a 	add	r3,r3,r4
    7b38:	290b883a 	add	r5,r5,r4
    7b3c:	30000b26 	beq	r6,zero,7b6c <memmove+0x150>
    7b40:	198d883a 	add	r6,r3,r6
    7b44:	29c00003 	ldbu	r7,0(r5)
    7b48:	18c00044 	addi	r3,r3,1
    7b4c:	29400044 	addi	r5,r5,1
    7b50:	19ffffc5 	stb	r7,-1(r3)
    7b54:	19bffb1e 	bne	r3,r6,7b44 <__alt_data_end+0xff007b44>
    7b58:	f800283a 	ret
    7b5c:	1007883a 	mov	r3,r2
    7b60:	003ff606 	br	7b3c <__alt_data_end+0xff007b3c>
    7b64:	1007883a 	mov	r3,r2
    7b68:	003ff506 	br	7b40 <__alt_data_end+0xff007b40>
    7b6c:	f800283a 	ret
    7b70:	500d883a 	mov	r6,r10
    7b74:	003ff106 	br	7b3c <__alt_data_end+0xff007b3c>

00007b78 <memset>:
    7b78:	20c000cc 	andi	r3,r4,3
    7b7c:	2005883a 	mov	r2,r4
    7b80:	18004426 	beq	r3,zero,7c94 <memset+0x11c>
    7b84:	31ffffc4 	addi	r7,r6,-1
    7b88:	30004026 	beq	r6,zero,7c8c <memset+0x114>
    7b8c:	2813883a 	mov	r9,r5
    7b90:	200d883a 	mov	r6,r4
    7b94:	2007883a 	mov	r3,r4
    7b98:	00000406 	br	7bac <memset+0x34>
    7b9c:	3a3fffc4 	addi	r8,r7,-1
    7ba0:	31800044 	addi	r6,r6,1
    7ba4:	38003926 	beq	r7,zero,7c8c <memset+0x114>
    7ba8:	400f883a 	mov	r7,r8
    7bac:	18c00044 	addi	r3,r3,1
    7bb0:	32400005 	stb	r9,0(r6)
    7bb4:	1a0000cc 	andi	r8,r3,3
    7bb8:	403ff81e 	bne	r8,zero,7b9c <__alt_data_end+0xff007b9c>
    7bbc:	010000c4 	movi	r4,3
    7bc0:	21c02d2e 	bgeu	r4,r7,7c78 <memset+0x100>
    7bc4:	29003fcc 	andi	r4,r5,255
    7bc8:	200c923a 	slli	r6,r4,8
    7bcc:	3108b03a 	or	r4,r6,r4
    7bd0:	200c943a 	slli	r6,r4,16
    7bd4:	218cb03a 	or	r6,r4,r6
    7bd8:	010003c4 	movi	r4,15
    7bdc:	21c0182e 	bgeu	r4,r7,7c40 <memset+0xc8>
    7be0:	3b3ffc04 	addi	r12,r7,-16
    7be4:	6018d13a 	srli	r12,r12,4
    7be8:	1a000104 	addi	r8,r3,4
    7bec:	1ac00204 	addi	r11,r3,8
    7bf0:	6008913a 	slli	r4,r12,4
    7bf4:	1a800304 	addi	r10,r3,12
    7bf8:	1813883a 	mov	r9,r3
    7bfc:	21000504 	addi	r4,r4,20
    7c00:	1909883a 	add	r4,r3,r4
    7c04:	49800015 	stw	r6,0(r9)
    7c08:	41800015 	stw	r6,0(r8)
    7c0c:	59800015 	stw	r6,0(r11)
    7c10:	51800015 	stw	r6,0(r10)
    7c14:	42000404 	addi	r8,r8,16
    7c18:	4a400404 	addi	r9,r9,16
    7c1c:	5ac00404 	addi	r11,r11,16
    7c20:	52800404 	addi	r10,r10,16
    7c24:	413ff71e 	bne	r8,r4,7c04 <__alt_data_end+0xff007c04>
    7c28:	63000044 	addi	r12,r12,1
    7c2c:	6018913a 	slli	r12,r12,4
    7c30:	39c003cc 	andi	r7,r7,15
    7c34:	010000c4 	movi	r4,3
    7c38:	1b07883a 	add	r3,r3,r12
    7c3c:	21c00e2e 	bgeu	r4,r7,7c78 <memset+0x100>
    7c40:	1813883a 	mov	r9,r3
    7c44:	3811883a 	mov	r8,r7
    7c48:	010000c4 	movi	r4,3
    7c4c:	49800015 	stw	r6,0(r9)
    7c50:	423fff04 	addi	r8,r8,-4
    7c54:	4a400104 	addi	r9,r9,4
    7c58:	223ffc36 	bltu	r4,r8,7c4c <__alt_data_end+0xff007c4c>
    7c5c:	393fff04 	addi	r4,r7,-4
    7c60:	2008d0ba 	srli	r4,r4,2
    7c64:	39c000cc 	andi	r7,r7,3
    7c68:	21000044 	addi	r4,r4,1
    7c6c:	2109883a 	add	r4,r4,r4
    7c70:	2109883a 	add	r4,r4,r4
    7c74:	1907883a 	add	r3,r3,r4
    7c78:	38000526 	beq	r7,zero,7c90 <memset+0x118>
    7c7c:	19cf883a 	add	r7,r3,r7
    7c80:	19400005 	stb	r5,0(r3)
    7c84:	18c00044 	addi	r3,r3,1
    7c88:	38fffd1e 	bne	r7,r3,7c80 <__alt_data_end+0xff007c80>
    7c8c:	f800283a 	ret
    7c90:	f800283a 	ret
    7c94:	2007883a 	mov	r3,r4
    7c98:	300f883a 	mov	r7,r6
    7c9c:	003fc706 	br	7bbc <__alt_data_end+0xff007bbc>

00007ca0 <_Balloc>:
    7ca0:	20801317 	ldw	r2,76(r4)
    7ca4:	defffc04 	addi	sp,sp,-16
    7ca8:	dc400115 	stw	r17,4(sp)
    7cac:	dc000015 	stw	r16,0(sp)
    7cb0:	dfc00315 	stw	ra,12(sp)
    7cb4:	dc800215 	stw	r18,8(sp)
    7cb8:	2023883a 	mov	r17,r4
    7cbc:	2821883a 	mov	r16,r5
    7cc0:	10000f26 	beq	r2,zero,7d00 <_Balloc+0x60>
    7cc4:	8407883a 	add	r3,r16,r16
    7cc8:	18c7883a 	add	r3,r3,r3
    7ccc:	10c7883a 	add	r3,r2,r3
    7cd0:	18800017 	ldw	r2,0(r3)
    7cd4:	10001126 	beq	r2,zero,7d1c <_Balloc+0x7c>
    7cd8:	11000017 	ldw	r4,0(r2)
    7cdc:	19000015 	stw	r4,0(r3)
    7ce0:	10000415 	stw	zero,16(r2)
    7ce4:	10000315 	stw	zero,12(r2)
    7ce8:	dfc00317 	ldw	ra,12(sp)
    7cec:	dc800217 	ldw	r18,8(sp)
    7cf0:	dc400117 	ldw	r17,4(sp)
    7cf4:	dc000017 	ldw	r16,0(sp)
    7cf8:	dec00404 	addi	sp,sp,16
    7cfc:	f800283a 	ret
    7d00:	01800844 	movi	r6,33
    7d04:	01400104 	movi	r5,4
    7d08:	000ab880 	call	ab88 <_calloc_r>
    7d0c:	88801315 	stw	r2,76(r17)
    7d10:	103fec1e 	bne	r2,zero,7cc4 <__alt_data_end+0xff007cc4>
    7d14:	0005883a 	mov	r2,zero
    7d18:	003ff306 	br	7ce8 <__alt_data_end+0xff007ce8>
    7d1c:	01400044 	movi	r5,1
    7d20:	2c24983a 	sll	r18,r5,r16
    7d24:	8809883a 	mov	r4,r17
    7d28:	91800144 	addi	r6,r18,5
    7d2c:	318d883a 	add	r6,r6,r6
    7d30:	318d883a 	add	r6,r6,r6
    7d34:	000ab880 	call	ab88 <_calloc_r>
    7d38:	103ff626 	beq	r2,zero,7d14 <__alt_data_end+0xff007d14>
    7d3c:	14000115 	stw	r16,4(r2)
    7d40:	14800215 	stw	r18,8(r2)
    7d44:	003fe606 	br	7ce0 <__alt_data_end+0xff007ce0>

00007d48 <_Bfree>:
    7d48:	28000826 	beq	r5,zero,7d6c <_Bfree+0x24>
    7d4c:	28c00117 	ldw	r3,4(r5)
    7d50:	20801317 	ldw	r2,76(r4)
    7d54:	18c7883a 	add	r3,r3,r3
    7d58:	18c7883a 	add	r3,r3,r3
    7d5c:	10c5883a 	add	r2,r2,r3
    7d60:	10c00017 	ldw	r3,0(r2)
    7d64:	28c00015 	stw	r3,0(r5)
    7d68:	11400015 	stw	r5,0(r2)
    7d6c:	f800283a 	ret

00007d70 <__multadd>:
    7d70:	defffa04 	addi	sp,sp,-24
    7d74:	dc800315 	stw	r18,12(sp)
    7d78:	dc400215 	stw	r17,8(sp)
    7d7c:	dc000115 	stw	r16,4(sp)
    7d80:	2823883a 	mov	r17,r5
    7d84:	2c000417 	ldw	r16,16(r5)
    7d88:	dfc00515 	stw	ra,20(sp)
    7d8c:	dcc00415 	stw	r19,16(sp)
    7d90:	2025883a 	mov	r18,r4
    7d94:	29400504 	addi	r5,r5,20
    7d98:	0011883a 	mov	r8,zero
    7d9c:	28c00017 	ldw	r3,0(r5)
    7da0:	29400104 	addi	r5,r5,4
    7da4:	42000044 	addi	r8,r8,1
    7da8:	18bfffcc 	andi	r2,r3,65535
    7dac:	1185383a 	mul	r2,r2,r6
    7db0:	1806d43a 	srli	r3,r3,16
    7db4:	11cf883a 	add	r7,r2,r7
    7db8:	3808d43a 	srli	r4,r7,16
    7dbc:	1987383a 	mul	r3,r3,r6
    7dc0:	38bfffcc 	andi	r2,r7,65535
    7dc4:	1907883a 	add	r3,r3,r4
    7dc8:	1808943a 	slli	r4,r3,16
    7dcc:	180ed43a 	srli	r7,r3,16
    7dd0:	2085883a 	add	r2,r4,r2
    7dd4:	28bfff15 	stw	r2,-4(r5)
    7dd8:	443ff016 	blt	r8,r16,7d9c <__alt_data_end+0xff007d9c>
    7ddc:	38000926 	beq	r7,zero,7e04 <__multadd+0x94>
    7de0:	88800217 	ldw	r2,8(r17)
    7de4:	80800f0e 	bge	r16,r2,7e24 <__multadd+0xb4>
    7de8:	80800144 	addi	r2,r16,5
    7dec:	1085883a 	add	r2,r2,r2
    7df0:	1085883a 	add	r2,r2,r2
    7df4:	8885883a 	add	r2,r17,r2
    7df8:	11c00015 	stw	r7,0(r2)
    7dfc:	84000044 	addi	r16,r16,1
    7e00:	8c000415 	stw	r16,16(r17)
    7e04:	8805883a 	mov	r2,r17
    7e08:	dfc00517 	ldw	ra,20(sp)
    7e0c:	dcc00417 	ldw	r19,16(sp)
    7e10:	dc800317 	ldw	r18,12(sp)
    7e14:	dc400217 	ldw	r17,8(sp)
    7e18:	dc000117 	ldw	r16,4(sp)
    7e1c:	dec00604 	addi	sp,sp,24
    7e20:	f800283a 	ret
    7e24:	89400117 	ldw	r5,4(r17)
    7e28:	9009883a 	mov	r4,r18
    7e2c:	d9c00015 	stw	r7,0(sp)
    7e30:	29400044 	addi	r5,r5,1
    7e34:	0007ca00 	call	7ca0 <_Balloc>
    7e38:	89800417 	ldw	r6,16(r17)
    7e3c:	89400304 	addi	r5,r17,12
    7e40:	11000304 	addi	r4,r2,12
    7e44:	31800084 	addi	r6,r6,2
    7e48:	318d883a 	add	r6,r6,r6
    7e4c:	318d883a 	add	r6,r6,r6
    7e50:	1027883a 	mov	r19,r2
    7e54:	00078d40 	call	78d4 <memcpy>
    7e58:	d9c00017 	ldw	r7,0(sp)
    7e5c:	88000a26 	beq	r17,zero,7e88 <__multadd+0x118>
    7e60:	88c00117 	ldw	r3,4(r17)
    7e64:	90801317 	ldw	r2,76(r18)
    7e68:	18c7883a 	add	r3,r3,r3
    7e6c:	18c7883a 	add	r3,r3,r3
    7e70:	10c5883a 	add	r2,r2,r3
    7e74:	10c00017 	ldw	r3,0(r2)
    7e78:	88c00015 	stw	r3,0(r17)
    7e7c:	14400015 	stw	r17,0(r2)
    7e80:	9823883a 	mov	r17,r19
    7e84:	003fd806 	br	7de8 <__alt_data_end+0xff007de8>
    7e88:	9823883a 	mov	r17,r19
    7e8c:	003fd606 	br	7de8 <__alt_data_end+0xff007de8>

00007e90 <__s2b>:
    7e90:	defff904 	addi	sp,sp,-28
    7e94:	dc400115 	stw	r17,4(sp)
    7e98:	dc000015 	stw	r16,0(sp)
    7e9c:	2023883a 	mov	r17,r4
    7ea0:	2821883a 	mov	r16,r5
    7ea4:	39000204 	addi	r4,r7,8
    7ea8:	01400244 	movi	r5,9
    7eac:	dcc00315 	stw	r19,12(sp)
    7eb0:	dc800215 	stw	r18,8(sp)
    7eb4:	dfc00615 	stw	ra,24(sp)
    7eb8:	dd400515 	stw	r21,20(sp)
    7ebc:	dd000415 	stw	r20,16(sp)
    7ec0:	3825883a 	mov	r18,r7
    7ec4:	3027883a 	mov	r19,r6
    7ec8:	000beb80 	call	beb8 <__divsi3>
    7ecc:	00c00044 	movi	r3,1
    7ed0:	000b883a 	mov	r5,zero
    7ed4:	1880030e 	bge	r3,r2,7ee4 <__s2b+0x54>
    7ed8:	18c7883a 	add	r3,r3,r3
    7edc:	29400044 	addi	r5,r5,1
    7ee0:	18bffd16 	blt	r3,r2,7ed8 <__alt_data_end+0xff007ed8>
    7ee4:	8809883a 	mov	r4,r17
    7ee8:	0007ca00 	call	7ca0 <_Balloc>
    7eec:	d8c00717 	ldw	r3,28(sp)
    7ef0:	10c00515 	stw	r3,20(r2)
    7ef4:	00c00044 	movi	r3,1
    7ef8:	10c00415 	stw	r3,16(r2)
    7efc:	00c00244 	movi	r3,9
    7f00:	1cc0210e 	bge	r3,r19,7f88 <__s2b+0xf8>
    7f04:	80eb883a 	add	r21,r16,r3
    7f08:	a829883a 	mov	r20,r21
    7f0c:	84e1883a 	add	r16,r16,r19
    7f10:	a1c00007 	ldb	r7,0(r20)
    7f14:	01800284 	movi	r6,10
    7f18:	a5000044 	addi	r20,r20,1
    7f1c:	100b883a 	mov	r5,r2
    7f20:	39fff404 	addi	r7,r7,-48
    7f24:	8809883a 	mov	r4,r17
    7f28:	0007d700 	call	7d70 <__multadd>
    7f2c:	a43ff81e 	bne	r20,r16,7f10 <__alt_data_end+0xff007f10>
    7f30:	ace1883a 	add	r16,r21,r19
    7f34:	843ffe04 	addi	r16,r16,-8
    7f38:	9c800a0e 	bge	r19,r18,7f64 <__s2b+0xd4>
    7f3c:	94e5c83a 	sub	r18,r18,r19
    7f40:	84a5883a 	add	r18,r16,r18
    7f44:	81c00007 	ldb	r7,0(r16)
    7f48:	01800284 	movi	r6,10
    7f4c:	84000044 	addi	r16,r16,1
    7f50:	100b883a 	mov	r5,r2
    7f54:	39fff404 	addi	r7,r7,-48
    7f58:	8809883a 	mov	r4,r17
    7f5c:	0007d700 	call	7d70 <__multadd>
    7f60:	84bff81e 	bne	r16,r18,7f44 <__alt_data_end+0xff007f44>
    7f64:	dfc00617 	ldw	ra,24(sp)
    7f68:	dd400517 	ldw	r21,20(sp)
    7f6c:	dd000417 	ldw	r20,16(sp)
    7f70:	dcc00317 	ldw	r19,12(sp)
    7f74:	dc800217 	ldw	r18,8(sp)
    7f78:	dc400117 	ldw	r17,4(sp)
    7f7c:	dc000017 	ldw	r16,0(sp)
    7f80:	dec00704 	addi	sp,sp,28
    7f84:	f800283a 	ret
    7f88:	84000284 	addi	r16,r16,10
    7f8c:	1827883a 	mov	r19,r3
    7f90:	003fe906 	br	7f38 <__alt_data_end+0xff007f38>

00007f94 <__hi0bits>:
    7f94:	20bfffec 	andhi	r2,r4,65535
    7f98:	1000141e 	bne	r2,zero,7fec <__hi0bits+0x58>
    7f9c:	2008943a 	slli	r4,r4,16
    7fa0:	00800404 	movi	r2,16
    7fa4:	20ffc02c 	andhi	r3,r4,65280
    7fa8:	1800021e 	bne	r3,zero,7fb4 <__hi0bits+0x20>
    7fac:	2008923a 	slli	r4,r4,8
    7fb0:	10800204 	addi	r2,r2,8
    7fb4:	20fc002c 	andhi	r3,r4,61440
    7fb8:	1800021e 	bne	r3,zero,7fc4 <__hi0bits+0x30>
    7fbc:	2008913a 	slli	r4,r4,4
    7fc0:	10800104 	addi	r2,r2,4
    7fc4:	20f0002c 	andhi	r3,r4,49152
    7fc8:	1800031e 	bne	r3,zero,7fd8 <__hi0bits+0x44>
    7fcc:	2109883a 	add	r4,r4,r4
    7fd0:	10800084 	addi	r2,r2,2
    7fd4:	2109883a 	add	r4,r4,r4
    7fd8:	20000316 	blt	r4,zero,7fe8 <__hi0bits+0x54>
    7fdc:	2110002c 	andhi	r4,r4,16384
    7fe0:	2000041e 	bne	r4,zero,7ff4 <__hi0bits+0x60>
    7fe4:	00800804 	movi	r2,32
    7fe8:	f800283a 	ret
    7fec:	0005883a 	mov	r2,zero
    7ff0:	003fec06 	br	7fa4 <__alt_data_end+0xff007fa4>
    7ff4:	10800044 	addi	r2,r2,1
    7ff8:	f800283a 	ret

00007ffc <__lo0bits>:
    7ffc:	20c00017 	ldw	r3,0(r4)
    8000:	188001cc 	andi	r2,r3,7
    8004:	10000826 	beq	r2,zero,8028 <__lo0bits+0x2c>
    8008:	1880004c 	andi	r2,r3,1
    800c:	1000211e 	bne	r2,zero,8094 <__lo0bits+0x98>
    8010:	1880008c 	andi	r2,r3,2
    8014:	1000211e 	bne	r2,zero,809c <__lo0bits+0xa0>
    8018:	1806d0ba 	srli	r3,r3,2
    801c:	00800084 	movi	r2,2
    8020:	20c00015 	stw	r3,0(r4)
    8024:	f800283a 	ret
    8028:	18bfffcc 	andi	r2,r3,65535
    802c:	10001326 	beq	r2,zero,807c <__lo0bits+0x80>
    8030:	0005883a 	mov	r2,zero
    8034:	19403fcc 	andi	r5,r3,255
    8038:	2800021e 	bne	r5,zero,8044 <__lo0bits+0x48>
    803c:	1806d23a 	srli	r3,r3,8
    8040:	10800204 	addi	r2,r2,8
    8044:	194003cc 	andi	r5,r3,15
    8048:	2800021e 	bne	r5,zero,8054 <__lo0bits+0x58>
    804c:	1806d13a 	srli	r3,r3,4
    8050:	10800104 	addi	r2,r2,4
    8054:	194000cc 	andi	r5,r3,3
    8058:	2800021e 	bne	r5,zero,8064 <__lo0bits+0x68>
    805c:	1806d0ba 	srli	r3,r3,2
    8060:	10800084 	addi	r2,r2,2
    8064:	1940004c 	andi	r5,r3,1
    8068:	2800081e 	bne	r5,zero,808c <__lo0bits+0x90>
    806c:	1806d07a 	srli	r3,r3,1
    8070:	1800051e 	bne	r3,zero,8088 <__lo0bits+0x8c>
    8074:	00800804 	movi	r2,32
    8078:	f800283a 	ret
    807c:	1806d43a 	srli	r3,r3,16
    8080:	00800404 	movi	r2,16
    8084:	003feb06 	br	8034 <__alt_data_end+0xff008034>
    8088:	10800044 	addi	r2,r2,1
    808c:	20c00015 	stw	r3,0(r4)
    8090:	f800283a 	ret
    8094:	0005883a 	mov	r2,zero
    8098:	f800283a 	ret
    809c:	1806d07a 	srli	r3,r3,1
    80a0:	00800044 	movi	r2,1
    80a4:	20c00015 	stw	r3,0(r4)
    80a8:	f800283a 	ret

000080ac <__i2b>:
    80ac:	defffd04 	addi	sp,sp,-12
    80b0:	dc000015 	stw	r16,0(sp)
    80b4:	04000044 	movi	r16,1
    80b8:	dc400115 	stw	r17,4(sp)
    80bc:	2823883a 	mov	r17,r5
    80c0:	800b883a 	mov	r5,r16
    80c4:	dfc00215 	stw	ra,8(sp)
    80c8:	0007ca00 	call	7ca0 <_Balloc>
    80cc:	14400515 	stw	r17,20(r2)
    80d0:	14000415 	stw	r16,16(r2)
    80d4:	dfc00217 	ldw	ra,8(sp)
    80d8:	dc400117 	ldw	r17,4(sp)
    80dc:	dc000017 	ldw	r16,0(sp)
    80e0:	dec00304 	addi	sp,sp,12
    80e4:	f800283a 	ret

000080e8 <__multiply>:
    80e8:	defffa04 	addi	sp,sp,-24
    80ec:	dcc00315 	stw	r19,12(sp)
    80f0:	dc800215 	stw	r18,8(sp)
    80f4:	34c00417 	ldw	r19,16(r6)
    80f8:	2c800417 	ldw	r18,16(r5)
    80fc:	dd000415 	stw	r20,16(sp)
    8100:	dc400115 	stw	r17,4(sp)
    8104:	dfc00515 	stw	ra,20(sp)
    8108:	dc000015 	stw	r16,0(sp)
    810c:	2829883a 	mov	r20,r5
    8110:	3023883a 	mov	r17,r6
    8114:	94c0050e 	bge	r18,r19,812c <__multiply+0x44>
    8118:	9007883a 	mov	r3,r18
    811c:	3029883a 	mov	r20,r6
    8120:	9825883a 	mov	r18,r19
    8124:	2823883a 	mov	r17,r5
    8128:	1827883a 	mov	r19,r3
    812c:	a0800217 	ldw	r2,8(r20)
    8130:	94e1883a 	add	r16,r18,r19
    8134:	a1400117 	ldw	r5,4(r20)
    8138:	1400010e 	bge	r2,r16,8140 <__multiply+0x58>
    813c:	29400044 	addi	r5,r5,1
    8140:	0007ca00 	call	7ca0 <_Balloc>
    8144:	8415883a 	add	r10,r16,r16
    8148:	12c00504 	addi	r11,r2,20
    814c:	5295883a 	add	r10,r10,r10
    8150:	5a95883a 	add	r10,r11,r10
    8154:	5807883a 	mov	r3,r11
    8158:	5a80032e 	bgeu	r11,r10,8168 <__multiply+0x80>
    815c:	18000015 	stw	zero,0(r3)
    8160:	18c00104 	addi	r3,r3,4
    8164:	1abffd36 	bltu	r3,r10,815c <__alt_data_end+0xff00815c>
    8168:	9ce7883a 	add	r19,r19,r19
    816c:	94a5883a 	add	r18,r18,r18
    8170:	89800504 	addi	r6,r17,20
    8174:	9ce7883a 	add	r19,r19,r19
    8178:	a3400504 	addi	r13,r20,20
    817c:	94a5883a 	add	r18,r18,r18
    8180:	34d9883a 	add	r12,r6,r19
    8184:	6c93883a 	add	r9,r13,r18
    8188:	3300422e 	bgeu	r6,r12,8294 <__multiply+0x1ac>
    818c:	37c00017 	ldw	ra,0(r6)
    8190:	fbffffcc 	andi	r15,ra,65535
    8194:	78001b26 	beq	r15,zero,8204 <__multiply+0x11c>
    8198:	5811883a 	mov	r8,r11
    819c:	681d883a 	mov	r14,r13
    81a0:	000f883a 	mov	r7,zero
    81a4:	71000017 	ldw	r4,0(r14)
    81a8:	40c00017 	ldw	r3,0(r8)
    81ac:	73800104 	addi	r14,r14,4
    81b0:	217fffcc 	andi	r5,r4,65535
    81b4:	2bcb383a 	mul	r5,r5,r15
    81b8:	2008d43a 	srli	r4,r4,16
    81bc:	1c7fffcc 	andi	r17,r3,65535
    81c0:	2c4b883a 	add	r5,r5,r17
    81c4:	29cb883a 	add	r5,r5,r7
    81c8:	23c9383a 	mul	r4,r4,r15
    81cc:	1806d43a 	srli	r3,r3,16
    81d0:	280ed43a 	srli	r7,r5,16
    81d4:	297fffcc 	andi	r5,r5,65535
    81d8:	20c7883a 	add	r3,r4,r3
    81dc:	19c7883a 	add	r3,r3,r7
    81e0:	1808943a 	slli	r4,r3,16
    81e4:	4023883a 	mov	r17,r8
    81e8:	180ed43a 	srli	r7,r3,16
    81ec:	214ab03a 	or	r5,r4,r5
    81f0:	41400015 	stw	r5,0(r8)
    81f4:	42000104 	addi	r8,r8,4
    81f8:	727fea36 	bltu	r14,r9,81a4 <__alt_data_end+0xff0081a4>
    81fc:	89c00115 	stw	r7,4(r17)
    8200:	37c00017 	ldw	ra,0(r6)
    8204:	f83ed43a 	srli	ra,ra,16
    8208:	f8001f26 	beq	ra,zero,8288 <__multiply+0x1a0>
    820c:	58c00017 	ldw	r3,0(r11)
    8210:	681d883a 	mov	r14,r13
    8214:	581f883a 	mov	r15,r11
    8218:	1811883a 	mov	r8,r3
    821c:	5825883a 	mov	r18,r11
    8220:	000f883a 	mov	r7,zero
    8224:	00000106 	br	822c <__multiply+0x144>
    8228:	8825883a 	mov	r18,r17
    822c:	7140000b 	ldhu	r5,0(r14)
    8230:	4010d43a 	srli	r8,r8,16
    8234:	193fffcc 	andi	r4,r3,65535
    8238:	2fcb383a 	mul	r5,r5,ra
    823c:	7bc00104 	addi	r15,r15,4
    8240:	73800104 	addi	r14,r14,4
    8244:	2a0b883a 	add	r5,r5,r8
    8248:	29cb883a 	add	r5,r5,r7
    824c:	2806943a 	slli	r3,r5,16
    8250:	94400104 	addi	r17,r18,4
    8254:	280ad43a 	srli	r5,r5,16
    8258:	1908b03a 	or	r4,r3,r4
    825c:	793fff15 	stw	r4,-4(r15)
    8260:	70ffff17 	ldw	r3,-4(r14)
    8264:	8a000017 	ldw	r8,0(r17)
    8268:	1806d43a 	srli	r3,r3,16
    826c:	413fffcc 	andi	r4,r8,65535
    8270:	1fc7383a 	mul	r3,r3,ra
    8274:	1907883a 	add	r3,r3,r4
    8278:	1947883a 	add	r3,r3,r5
    827c:	180ed43a 	srli	r7,r3,16
    8280:	727fe936 	bltu	r14,r9,8228 <__alt_data_end+0xff008228>
    8284:	90c00115 	stw	r3,4(r18)
    8288:	31800104 	addi	r6,r6,4
    828c:	5ac00104 	addi	r11,r11,4
    8290:	333fbe36 	bltu	r6,r12,818c <__alt_data_end+0xff00818c>
    8294:	0400090e 	bge	zero,r16,82bc <__multiply+0x1d4>
    8298:	50ffff17 	ldw	r3,-4(r10)
    829c:	52bfff04 	addi	r10,r10,-4
    82a0:	18000326 	beq	r3,zero,82b0 <__multiply+0x1c8>
    82a4:	00000506 	br	82bc <__multiply+0x1d4>
    82a8:	50c00017 	ldw	r3,0(r10)
    82ac:	1800031e 	bne	r3,zero,82bc <__multiply+0x1d4>
    82b0:	843fffc4 	addi	r16,r16,-1
    82b4:	52bfff04 	addi	r10,r10,-4
    82b8:	803ffb1e 	bne	r16,zero,82a8 <__alt_data_end+0xff0082a8>
    82bc:	14000415 	stw	r16,16(r2)
    82c0:	dfc00517 	ldw	ra,20(sp)
    82c4:	dd000417 	ldw	r20,16(sp)
    82c8:	dcc00317 	ldw	r19,12(sp)
    82cc:	dc800217 	ldw	r18,8(sp)
    82d0:	dc400117 	ldw	r17,4(sp)
    82d4:	dc000017 	ldw	r16,0(sp)
    82d8:	dec00604 	addi	sp,sp,24
    82dc:	f800283a 	ret

000082e0 <__pow5mult>:
    82e0:	defffa04 	addi	sp,sp,-24
    82e4:	dcc00315 	stw	r19,12(sp)
    82e8:	dc000015 	stw	r16,0(sp)
    82ec:	dfc00515 	stw	ra,20(sp)
    82f0:	dd000415 	stw	r20,16(sp)
    82f4:	dc800215 	stw	r18,8(sp)
    82f8:	dc400115 	stw	r17,4(sp)
    82fc:	308000cc 	andi	r2,r6,3
    8300:	3021883a 	mov	r16,r6
    8304:	2027883a 	mov	r19,r4
    8308:	10002f1e 	bne	r2,zero,83c8 <__pow5mult+0xe8>
    830c:	2825883a 	mov	r18,r5
    8310:	8021d0ba 	srai	r16,r16,2
    8314:	80001a26 	beq	r16,zero,8380 <__pow5mult+0xa0>
    8318:	9c401217 	ldw	r17,72(r19)
    831c:	8800061e 	bne	r17,zero,8338 <__pow5mult+0x58>
    8320:	00003406 	br	83f4 <__pow5mult+0x114>
    8324:	8021d07a 	srai	r16,r16,1
    8328:	80001526 	beq	r16,zero,8380 <__pow5mult+0xa0>
    832c:	88800017 	ldw	r2,0(r17)
    8330:	10001c26 	beq	r2,zero,83a4 <__pow5mult+0xc4>
    8334:	1023883a 	mov	r17,r2
    8338:	8080004c 	andi	r2,r16,1
    833c:	103ff926 	beq	r2,zero,8324 <__alt_data_end+0xff008324>
    8340:	880d883a 	mov	r6,r17
    8344:	900b883a 	mov	r5,r18
    8348:	9809883a 	mov	r4,r19
    834c:	00080e80 	call	80e8 <__multiply>
    8350:	90001b26 	beq	r18,zero,83c0 <__pow5mult+0xe0>
    8354:	91000117 	ldw	r4,4(r18)
    8358:	98c01317 	ldw	r3,76(r19)
    835c:	8021d07a 	srai	r16,r16,1
    8360:	2109883a 	add	r4,r4,r4
    8364:	2109883a 	add	r4,r4,r4
    8368:	1907883a 	add	r3,r3,r4
    836c:	19000017 	ldw	r4,0(r3)
    8370:	91000015 	stw	r4,0(r18)
    8374:	1c800015 	stw	r18,0(r3)
    8378:	1025883a 	mov	r18,r2
    837c:	803feb1e 	bne	r16,zero,832c <__alt_data_end+0xff00832c>
    8380:	9005883a 	mov	r2,r18
    8384:	dfc00517 	ldw	ra,20(sp)
    8388:	dd000417 	ldw	r20,16(sp)
    838c:	dcc00317 	ldw	r19,12(sp)
    8390:	dc800217 	ldw	r18,8(sp)
    8394:	dc400117 	ldw	r17,4(sp)
    8398:	dc000017 	ldw	r16,0(sp)
    839c:	dec00604 	addi	sp,sp,24
    83a0:	f800283a 	ret
    83a4:	880d883a 	mov	r6,r17
    83a8:	880b883a 	mov	r5,r17
    83ac:	9809883a 	mov	r4,r19
    83b0:	00080e80 	call	80e8 <__multiply>
    83b4:	88800015 	stw	r2,0(r17)
    83b8:	10000015 	stw	zero,0(r2)
    83bc:	003fdd06 	br	8334 <__alt_data_end+0xff008334>
    83c0:	1025883a 	mov	r18,r2
    83c4:	003fd706 	br	8324 <__alt_data_end+0xff008324>
    83c8:	10bfffc4 	addi	r2,r2,-1
    83cc:	1085883a 	add	r2,r2,r2
    83d0:	00c00074 	movhi	r3,1
    83d4:	18c14e04 	addi	r3,r3,1336
    83d8:	1085883a 	add	r2,r2,r2
    83dc:	1885883a 	add	r2,r3,r2
    83e0:	11800017 	ldw	r6,0(r2)
    83e4:	000f883a 	mov	r7,zero
    83e8:	0007d700 	call	7d70 <__multadd>
    83ec:	1025883a 	mov	r18,r2
    83f0:	003fc706 	br	8310 <__alt_data_end+0xff008310>
    83f4:	05000044 	movi	r20,1
    83f8:	a00b883a 	mov	r5,r20
    83fc:	9809883a 	mov	r4,r19
    8400:	0007ca00 	call	7ca0 <_Balloc>
    8404:	1023883a 	mov	r17,r2
    8408:	00809c44 	movi	r2,625
    840c:	88800515 	stw	r2,20(r17)
    8410:	8d000415 	stw	r20,16(r17)
    8414:	9c401215 	stw	r17,72(r19)
    8418:	88000015 	stw	zero,0(r17)
    841c:	003fc606 	br	8338 <__alt_data_end+0xff008338>

00008420 <__lshift>:
    8420:	defff904 	addi	sp,sp,-28
    8424:	dd400515 	stw	r21,20(sp)
    8428:	dcc00315 	stw	r19,12(sp)
    842c:	302bd17a 	srai	r21,r6,5
    8430:	2cc00417 	ldw	r19,16(r5)
    8434:	28800217 	ldw	r2,8(r5)
    8438:	dd000415 	stw	r20,16(sp)
    843c:	ace7883a 	add	r19,r21,r19
    8440:	dc800215 	stw	r18,8(sp)
    8444:	dc400115 	stw	r17,4(sp)
    8448:	dc000015 	stw	r16,0(sp)
    844c:	dfc00615 	stw	ra,24(sp)
    8450:	9c000044 	addi	r16,r19,1
    8454:	2823883a 	mov	r17,r5
    8458:	3029883a 	mov	r20,r6
    845c:	2025883a 	mov	r18,r4
    8460:	29400117 	ldw	r5,4(r5)
    8464:	1400030e 	bge	r2,r16,8474 <__lshift+0x54>
    8468:	1085883a 	add	r2,r2,r2
    846c:	29400044 	addi	r5,r5,1
    8470:	143ffd16 	blt	r2,r16,8468 <__alt_data_end+0xff008468>
    8474:	9009883a 	mov	r4,r18
    8478:	0007ca00 	call	7ca0 <_Balloc>
    847c:	10c00504 	addi	r3,r2,20
    8480:	0540070e 	bge	zero,r21,84a0 <__lshift+0x80>
    8484:	ad6b883a 	add	r21,r21,r21
    8488:	ad6b883a 	add	r21,r21,r21
    848c:	1809883a 	mov	r4,r3
    8490:	1d47883a 	add	r3,r3,r21
    8494:	20000015 	stw	zero,0(r4)
    8498:	21000104 	addi	r4,r4,4
    849c:	193ffd1e 	bne	r3,r4,8494 <__alt_data_end+0xff008494>
    84a0:	8a000417 	ldw	r8,16(r17)
    84a4:	89000504 	addi	r4,r17,20
    84a8:	a18007cc 	andi	r6,r20,31
    84ac:	4211883a 	add	r8,r8,r8
    84b0:	4211883a 	add	r8,r8,r8
    84b4:	2211883a 	add	r8,r4,r8
    84b8:	30002326 	beq	r6,zero,8548 <__lshift+0x128>
    84bc:	02400804 	movi	r9,32
    84c0:	4993c83a 	sub	r9,r9,r6
    84c4:	000b883a 	mov	r5,zero
    84c8:	21c00017 	ldw	r7,0(r4)
    84cc:	1815883a 	mov	r10,r3
    84d0:	18c00104 	addi	r3,r3,4
    84d4:	398e983a 	sll	r7,r7,r6
    84d8:	21000104 	addi	r4,r4,4
    84dc:	394ab03a 	or	r5,r7,r5
    84e0:	197fff15 	stw	r5,-4(r3)
    84e4:	217fff17 	ldw	r5,-4(r4)
    84e8:	2a4ad83a 	srl	r5,r5,r9
    84ec:	223ff636 	bltu	r4,r8,84c8 <__alt_data_end+0xff0084c8>
    84f0:	51400115 	stw	r5,4(r10)
    84f4:	28001a1e 	bne	r5,zero,8560 <__lshift+0x140>
    84f8:	843fffc4 	addi	r16,r16,-1
    84fc:	14000415 	stw	r16,16(r2)
    8500:	88000826 	beq	r17,zero,8524 <__lshift+0x104>
    8504:	89000117 	ldw	r4,4(r17)
    8508:	90c01317 	ldw	r3,76(r18)
    850c:	2109883a 	add	r4,r4,r4
    8510:	2109883a 	add	r4,r4,r4
    8514:	1907883a 	add	r3,r3,r4
    8518:	19000017 	ldw	r4,0(r3)
    851c:	89000015 	stw	r4,0(r17)
    8520:	1c400015 	stw	r17,0(r3)
    8524:	dfc00617 	ldw	ra,24(sp)
    8528:	dd400517 	ldw	r21,20(sp)
    852c:	dd000417 	ldw	r20,16(sp)
    8530:	dcc00317 	ldw	r19,12(sp)
    8534:	dc800217 	ldw	r18,8(sp)
    8538:	dc400117 	ldw	r17,4(sp)
    853c:	dc000017 	ldw	r16,0(sp)
    8540:	dec00704 	addi	sp,sp,28
    8544:	f800283a 	ret
    8548:	21400017 	ldw	r5,0(r4)
    854c:	18c00104 	addi	r3,r3,4
    8550:	21000104 	addi	r4,r4,4
    8554:	197fff15 	stw	r5,-4(r3)
    8558:	223ffb36 	bltu	r4,r8,8548 <__alt_data_end+0xff008548>
    855c:	003fe606 	br	84f8 <__alt_data_end+0xff0084f8>
    8560:	9c000084 	addi	r16,r19,2
    8564:	003fe406 	br	84f8 <__alt_data_end+0xff0084f8>

00008568 <__mcmp>:
    8568:	20800417 	ldw	r2,16(r4)
    856c:	28c00417 	ldw	r3,16(r5)
    8570:	10c5c83a 	sub	r2,r2,r3
    8574:	1000111e 	bne	r2,zero,85bc <__mcmp+0x54>
    8578:	18c7883a 	add	r3,r3,r3
    857c:	18c7883a 	add	r3,r3,r3
    8580:	21000504 	addi	r4,r4,20
    8584:	29400504 	addi	r5,r5,20
    8588:	20c5883a 	add	r2,r4,r3
    858c:	28cb883a 	add	r5,r5,r3
    8590:	00000106 	br	8598 <__mcmp+0x30>
    8594:	20800a2e 	bgeu	r4,r2,85c0 <__mcmp+0x58>
    8598:	10bfff04 	addi	r2,r2,-4
    859c:	297fff04 	addi	r5,r5,-4
    85a0:	11800017 	ldw	r6,0(r2)
    85a4:	28c00017 	ldw	r3,0(r5)
    85a8:	30fffa26 	beq	r6,r3,8594 <__alt_data_end+0xff008594>
    85ac:	30c00236 	bltu	r6,r3,85b8 <__mcmp+0x50>
    85b0:	00800044 	movi	r2,1
    85b4:	f800283a 	ret
    85b8:	00bfffc4 	movi	r2,-1
    85bc:	f800283a 	ret
    85c0:	0005883a 	mov	r2,zero
    85c4:	f800283a 	ret

000085c8 <__mdiff>:
    85c8:	28c00417 	ldw	r3,16(r5)
    85cc:	30800417 	ldw	r2,16(r6)
    85d0:	defffa04 	addi	sp,sp,-24
    85d4:	dcc00315 	stw	r19,12(sp)
    85d8:	dc800215 	stw	r18,8(sp)
    85dc:	dfc00515 	stw	ra,20(sp)
    85e0:	dd000415 	stw	r20,16(sp)
    85e4:	dc400115 	stw	r17,4(sp)
    85e8:	dc000015 	stw	r16,0(sp)
    85ec:	1887c83a 	sub	r3,r3,r2
    85f0:	2825883a 	mov	r18,r5
    85f4:	3027883a 	mov	r19,r6
    85f8:	1800141e 	bne	r3,zero,864c <__mdiff+0x84>
    85fc:	1085883a 	add	r2,r2,r2
    8600:	1085883a 	add	r2,r2,r2
    8604:	2a000504 	addi	r8,r5,20
    8608:	34000504 	addi	r16,r6,20
    860c:	4087883a 	add	r3,r8,r2
    8610:	8085883a 	add	r2,r16,r2
    8614:	00000106 	br	861c <__mdiff+0x54>
    8618:	40c0592e 	bgeu	r8,r3,8780 <__mdiff+0x1b8>
    861c:	18ffff04 	addi	r3,r3,-4
    8620:	10bfff04 	addi	r2,r2,-4
    8624:	19c00017 	ldw	r7,0(r3)
    8628:	11400017 	ldw	r5,0(r2)
    862c:	397ffa26 	beq	r7,r5,8618 <__alt_data_end+0xff008618>
    8630:	3940592e 	bgeu	r7,r5,8798 <__mdiff+0x1d0>
    8634:	9005883a 	mov	r2,r18
    8638:	4023883a 	mov	r17,r8
    863c:	9825883a 	mov	r18,r19
    8640:	05000044 	movi	r20,1
    8644:	1027883a 	mov	r19,r2
    8648:	00000406 	br	865c <__mdiff+0x94>
    864c:	18005616 	blt	r3,zero,87a8 <__mdiff+0x1e0>
    8650:	34400504 	addi	r17,r6,20
    8654:	2c000504 	addi	r16,r5,20
    8658:	0029883a 	mov	r20,zero
    865c:	91400117 	ldw	r5,4(r18)
    8660:	0007ca00 	call	7ca0 <_Balloc>
    8664:	92400417 	ldw	r9,16(r18)
    8668:	9b000417 	ldw	r12,16(r19)
    866c:	12c00504 	addi	r11,r2,20
    8670:	4a51883a 	add	r8,r9,r9
    8674:	6319883a 	add	r12,r12,r12
    8678:	4211883a 	add	r8,r8,r8
    867c:	6319883a 	add	r12,r12,r12
    8680:	15000315 	stw	r20,12(r2)
    8684:	8211883a 	add	r8,r16,r8
    8688:	8b19883a 	add	r12,r17,r12
    868c:	0007883a 	mov	r3,zero
    8690:	81400017 	ldw	r5,0(r16)
    8694:	89c00017 	ldw	r7,0(r17)
    8698:	59800104 	addi	r6,r11,4
    869c:	293fffcc 	andi	r4,r5,65535
    86a0:	20c7883a 	add	r3,r4,r3
    86a4:	393fffcc 	andi	r4,r7,65535
    86a8:	1909c83a 	sub	r4,r3,r4
    86ac:	280ad43a 	srli	r5,r5,16
    86b0:	380ed43a 	srli	r7,r7,16
    86b4:	2007d43a 	srai	r3,r4,16
    86b8:	213fffcc 	andi	r4,r4,65535
    86bc:	29cbc83a 	sub	r5,r5,r7
    86c0:	28c7883a 	add	r3,r5,r3
    86c4:	180a943a 	slli	r5,r3,16
    86c8:	8c400104 	addi	r17,r17,4
    86cc:	84000104 	addi	r16,r16,4
    86d0:	2908b03a 	or	r4,r5,r4
    86d4:	59000015 	stw	r4,0(r11)
    86d8:	1807d43a 	srai	r3,r3,16
    86dc:	3015883a 	mov	r10,r6
    86e0:	3017883a 	mov	r11,r6
    86e4:	8b3fea36 	bltu	r17,r12,8690 <__alt_data_end+0xff008690>
    86e8:	8200162e 	bgeu	r16,r8,8744 <__mdiff+0x17c>
    86ec:	8017883a 	mov	r11,r16
    86f0:	59400017 	ldw	r5,0(r11)
    86f4:	31800104 	addi	r6,r6,4
    86f8:	5ac00104 	addi	r11,r11,4
    86fc:	293fffcc 	andi	r4,r5,65535
    8700:	20c7883a 	add	r3,r4,r3
    8704:	280ed43a 	srli	r7,r5,16
    8708:	180bd43a 	srai	r5,r3,16
    870c:	193fffcc 	andi	r4,r3,65535
    8710:	3947883a 	add	r3,r7,r5
    8714:	180a943a 	slli	r5,r3,16
    8718:	1807d43a 	srai	r3,r3,16
    871c:	2908b03a 	or	r4,r5,r4
    8720:	313fff15 	stw	r4,-4(r6)
    8724:	5a3ff236 	bltu	r11,r8,86f0 <__alt_data_end+0xff0086f0>
    8728:	0406303a 	nor	r3,zero,r16
    872c:	1a07883a 	add	r3,r3,r8
    8730:	1806d0ba 	srli	r3,r3,2
    8734:	18c00044 	addi	r3,r3,1
    8738:	18c7883a 	add	r3,r3,r3
    873c:	18c7883a 	add	r3,r3,r3
    8740:	50d5883a 	add	r10,r10,r3
    8744:	50ffff04 	addi	r3,r10,-4
    8748:	2000041e 	bne	r4,zero,875c <__mdiff+0x194>
    874c:	18ffff04 	addi	r3,r3,-4
    8750:	19000017 	ldw	r4,0(r3)
    8754:	4a7fffc4 	addi	r9,r9,-1
    8758:	203ffc26 	beq	r4,zero,874c <__alt_data_end+0xff00874c>
    875c:	12400415 	stw	r9,16(r2)
    8760:	dfc00517 	ldw	ra,20(sp)
    8764:	dd000417 	ldw	r20,16(sp)
    8768:	dcc00317 	ldw	r19,12(sp)
    876c:	dc800217 	ldw	r18,8(sp)
    8770:	dc400117 	ldw	r17,4(sp)
    8774:	dc000017 	ldw	r16,0(sp)
    8778:	dec00604 	addi	sp,sp,24
    877c:	f800283a 	ret
    8780:	000b883a 	mov	r5,zero
    8784:	0007ca00 	call	7ca0 <_Balloc>
    8788:	00c00044 	movi	r3,1
    878c:	10c00415 	stw	r3,16(r2)
    8790:	10000515 	stw	zero,20(r2)
    8794:	003ff206 	br	8760 <__alt_data_end+0xff008760>
    8798:	8023883a 	mov	r17,r16
    879c:	0029883a 	mov	r20,zero
    87a0:	4021883a 	mov	r16,r8
    87a4:	003fad06 	br	865c <__alt_data_end+0xff00865c>
    87a8:	9005883a 	mov	r2,r18
    87ac:	94400504 	addi	r17,r18,20
    87b0:	9c000504 	addi	r16,r19,20
    87b4:	9825883a 	mov	r18,r19
    87b8:	05000044 	movi	r20,1
    87bc:	1027883a 	mov	r19,r2
    87c0:	003fa606 	br	865c <__alt_data_end+0xff00865c>

000087c4 <__ulp>:
    87c4:	295ffc2c 	andhi	r5,r5,32752
    87c8:	00bf3034 	movhi	r2,64704
    87cc:	2887883a 	add	r3,r5,r2
    87d0:	00c0020e 	bge	zero,r3,87dc <__ulp+0x18>
    87d4:	0005883a 	mov	r2,zero
    87d8:	f800283a 	ret
    87dc:	00c7c83a 	sub	r3,zero,r3
    87e0:	1807d53a 	srai	r3,r3,20
    87e4:	008004c4 	movi	r2,19
    87e8:	10c00b0e 	bge	r2,r3,8818 <__ulp+0x54>
    87ec:	18bffb04 	addi	r2,r3,-20
    87f0:	01000784 	movi	r4,30
    87f4:	0007883a 	mov	r3,zero
    87f8:	20800516 	blt	r4,r2,8810 <__ulp+0x4c>
    87fc:	010007c4 	movi	r4,31
    8800:	2089c83a 	sub	r4,r4,r2
    8804:	00800044 	movi	r2,1
    8808:	1104983a 	sll	r2,r2,r4
    880c:	f800283a 	ret
    8810:	00800044 	movi	r2,1
    8814:	f800283a 	ret
    8818:	01400234 	movhi	r5,8
    881c:	28c7d83a 	sra	r3,r5,r3
    8820:	0005883a 	mov	r2,zero
    8824:	f800283a 	ret

00008828 <__b2d>:
    8828:	defffa04 	addi	sp,sp,-24
    882c:	dc000015 	stw	r16,0(sp)
    8830:	24000417 	ldw	r16,16(r4)
    8834:	dc400115 	stw	r17,4(sp)
    8838:	24400504 	addi	r17,r4,20
    883c:	8421883a 	add	r16,r16,r16
    8840:	8421883a 	add	r16,r16,r16
    8844:	8c21883a 	add	r16,r17,r16
    8848:	dc800215 	stw	r18,8(sp)
    884c:	84bfff17 	ldw	r18,-4(r16)
    8850:	dd000415 	stw	r20,16(sp)
    8854:	dcc00315 	stw	r19,12(sp)
    8858:	9009883a 	mov	r4,r18
    885c:	2829883a 	mov	r20,r5
    8860:	dfc00515 	stw	ra,20(sp)
    8864:	0007f940 	call	7f94 <__hi0bits>
    8868:	00c00804 	movi	r3,32
    886c:	1889c83a 	sub	r4,r3,r2
    8870:	a1000015 	stw	r4,0(r20)
    8874:	01000284 	movi	r4,10
    8878:	84ffff04 	addi	r19,r16,-4
    887c:	20801216 	blt	r4,r2,88c8 <__b2d+0xa0>
    8880:	018002c4 	movi	r6,11
    8884:	308dc83a 	sub	r6,r6,r2
    8888:	9186d83a 	srl	r3,r18,r6
    888c:	18cffc34 	orhi	r3,r3,16368
    8890:	8cc0212e 	bgeu	r17,r19,8918 <__b2d+0xf0>
    8894:	813ffe17 	ldw	r4,-8(r16)
    8898:	218cd83a 	srl	r6,r4,r6
    889c:	10800544 	addi	r2,r2,21
    88a0:	9084983a 	sll	r2,r18,r2
    88a4:	1184b03a 	or	r2,r2,r6
    88a8:	dfc00517 	ldw	ra,20(sp)
    88ac:	dd000417 	ldw	r20,16(sp)
    88b0:	dcc00317 	ldw	r19,12(sp)
    88b4:	dc800217 	ldw	r18,8(sp)
    88b8:	dc400117 	ldw	r17,4(sp)
    88bc:	dc000017 	ldw	r16,0(sp)
    88c0:	dec00604 	addi	sp,sp,24
    88c4:	f800283a 	ret
    88c8:	8cc00f2e 	bgeu	r17,r19,8908 <__b2d+0xe0>
    88cc:	117ffd44 	addi	r5,r2,-11
    88d0:	80bffe17 	ldw	r2,-8(r16)
    88d4:	28000e26 	beq	r5,zero,8910 <__b2d+0xe8>
    88d8:	1949c83a 	sub	r4,r3,r5
    88dc:	9164983a 	sll	r18,r18,r5
    88e0:	1106d83a 	srl	r3,r2,r4
    88e4:	81bffe04 	addi	r6,r16,-8
    88e8:	948ffc34 	orhi	r18,r18,16368
    88ec:	90c6b03a 	or	r3,r18,r3
    88f0:	89800e2e 	bgeu	r17,r6,892c <__b2d+0x104>
    88f4:	81bffd17 	ldw	r6,-12(r16)
    88f8:	1144983a 	sll	r2,r2,r5
    88fc:	310ad83a 	srl	r5,r6,r4
    8900:	2884b03a 	or	r2,r5,r2
    8904:	003fe806 	br	88a8 <__alt_data_end+0xff0088a8>
    8908:	10bffd44 	addi	r2,r2,-11
    890c:	1000041e 	bne	r2,zero,8920 <__b2d+0xf8>
    8910:	90cffc34 	orhi	r3,r18,16368
    8914:	003fe406 	br	88a8 <__alt_data_end+0xff0088a8>
    8918:	000d883a 	mov	r6,zero
    891c:	003fdf06 	br	889c <__alt_data_end+0xff00889c>
    8920:	90a4983a 	sll	r18,r18,r2
    8924:	0005883a 	mov	r2,zero
    8928:	003ff906 	br	8910 <__alt_data_end+0xff008910>
    892c:	1144983a 	sll	r2,r2,r5
    8930:	003fdd06 	br	88a8 <__alt_data_end+0xff0088a8>

00008934 <__d2b>:
    8934:	defff804 	addi	sp,sp,-32
    8938:	dc000215 	stw	r16,8(sp)
    893c:	3021883a 	mov	r16,r6
    8940:	dc400315 	stw	r17,12(sp)
    8944:	8022907a 	slli	r17,r16,1
    8948:	dd000615 	stw	r20,24(sp)
    894c:	2829883a 	mov	r20,r5
    8950:	01400044 	movi	r5,1
    8954:	dcc00515 	stw	r19,20(sp)
    8958:	dc800415 	stw	r18,16(sp)
    895c:	dfc00715 	stw	ra,28(sp)
    8960:	3825883a 	mov	r18,r7
    8964:	8822d57a 	srli	r17,r17,21
    8968:	0007ca00 	call	7ca0 <_Balloc>
    896c:	1027883a 	mov	r19,r2
    8970:	00800434 	movhi	r2,16
    8974:	10bfffc4 	addi	r2,r2,-1
    8978:	808c703a 	and	r6,r16,r2
    897c:	88000126 	beq	r17,zero,8984 <__d2b+0x50>
    8980:	31800434 	orhi	r6,r6,16
    8984:	d9800015 	stw	r6,0(sp)
    8988:	a0002426 	beq	r20,zero,8a1c <__d2b+0xe8>
    898c:	d9000104 	addi	r4,sp,4
    8990:	dd000115 	stw	r20,4(sp)
    8994:	0007ffc0 	call	7ffc <__lo0bits>
    8998:	d8c00017 	ldw	r3,0(sp)
    899c:	10002f1e 	bne	r2,zero,8a5c <__d2b+0x128>
    89a0:	d9000117 	ldw	r4,4(sp)
    89a4:	99000515 	stw	r4,20(r19)
    89a8:	1821003a 	cmpeq	r16,r3,zero
    89ac:	01000084 	movi	r4,2
    89b0:	2421c83a 	sub	r16,r4,r16
    89b4:	98c00615 	stw	r3,24(r19)
    89b8:	9c000415 	stw	r16,16(r19)
    89bc:	88001f1e 	bne	r17,zero,8a3c <__d2b+0x108>
    89c0:	10bef384 	addi	r2,r2,-1074
    89c4:	90800015 	stw	r2,0(r18)
    89c8:	00900034 	movhi	r2,16384
    89cc:	10bfffc4 	addi	r2,r2,-1
    89d0:	8085883a 	add	r2,r16,r2
    89d4:	1085883a 	add	r2,r2,r2
    89d8:	1085883a 	add	r2,r2,r2
    89dc:	9885883a 	add	r2,r19,r2
    89e0:	11000517 	ldw	r4,20(r2)
    89e4:	8020917a 	slli	r16,r16,5
    89e8:	0007f940 	call	7f94 <__hi0bits>
    89ec:	d8c00817 	ldw	r3,32(sp)
    89f0:	8085c83a 	sub	r2,r16,r2
    89f4:	18800015 	stw	r2,0(r3)
    89f8:	9805883a 	mov	r2,r19
    89fc:	dfc00717 	ldw	ra,28(sp)
    8a00:	dd000617 	ldw	r20,24(sp)
    8a04:	dcc00517 	ldw	r19,20(sp)
    8a08:	dc800417 	ldw	r18,16(sp)
    8a0c:	dc400317 	ldw	r17,12(sp)
    8a10:	dc000217 	ldw	r16,8(sp)
    8a14:	dec00804 	addi	sp,sp,32
    8a18:	f800283a 	ret
    8a1c:	d809883a 	mov	r4,sp
    8a20:	0007ffc0 	call	7ffc <__lo0bits>
    8a24:	d8c00017 	ldw	r3,0(sp)
    8a28:	04000044 	movi	r16,1
    8a2c:	9c000415 	stw	r16,16(r19)
    8a30:	98c00515 	stw	r3,20(r19)
    8a34:	10800804 	addi	r2,r2,32
    8a38:	883fe126 	beq	r17,zero,89c0 <__alt_data_end+0xff0089c0>
    8a3c:	00c00d44 	movi	r3,53
    8a40:	8c7ef344 	addi	r17,r17,-1075
    8a44:	88a3883a 	add	r17,r17,r2
    8a48:	1885c83a 	sub	r2,r3,r2
    8a4c:	d8c00817 	ldw	r3,32(sp)
    8a50:	94400015 	stw	r17,0(r18)
    8a54:	18800015 	stw	r2,0(r3)
    8a58:	003fe706 	br	89f8 <__alt_data_end+0xff0089f8>
    8a5c:	01000804 	movi	r4,32
    8a60:	2089c83a 	sub	r4,r4,r2
    8a64:	1908983a 	sll	r4,r3,r4
    8a68:	d9400117 	ldw	r5,4(sp)
    8a6c:	1886d83a 	srl	r3,r3,r2
    8a70:	2148b03a 	or	r4,r4,r5
    8a74:	99000515 	stw	r4,20(r19)
    8a78:	d8c00015 	stw	r3,0(sp)
    8a7c:	003fca06 	br	89a8 <__alt_data_end+0xff0089a8>

00008a80 <__ratio>:
    8a80:	defff904 	addi	sp,sp,-28
    8a84:	dc400315 	stw	r17,12(sp)
    8a88:	2823883a 	mov	r17,r5
    8a8c:	d9400104 	addi	r5,sp,4
    8a90:	dfc00615 	stw	ra,24(sp)
    8a94:	dcc00515 	stw	r19,20(sp)
    8a98:	dc800415 	stw	r18,16(sp)
    8a9c:	2027883a 	mov	r19,r4
    8aa0:	dc000215 	stw	r16,8(sp)
    8aa4:	00088280 	call	8828 <__b2d>
    8aa8:	d80b883a 	mov	r5,sp
    8aac:	8809883a 	mov	r4,r17
    8ab0:	1025883a 	mov	r18,r2
    8ab4:	1821883a 	mov	r16,r3
    8ab8:	00088280 	call	8828 <__b2d>
    8abc:	8a000417 	ldw	r8,16(r17)
    8ac0:	99000417 	ldw	r4,16(r19)
    8ac4:	d9400117 	ldw	r5,4(sp)
    8ac8:	2209c83a 	sub	r4,r4,r8
    8acc:	2010917a 	slli	r8,r4,5
    8ad0:	d9000017 	ldw	r4,0(sp)
    8ad4:	2909c83a 	sub	r4,r5,r4
    8ad8:	4109883a 	add	r4,r8,r4
    8adc:	01000e0e 	bge	zero,r4,8b18 <__ratio+0x98>
    8ae0:	2008953a 	slli	r4,r4,20
    8ae4:	2421883a 	add	r16,r4,r16
    8ae8:	100d883a 	mov	r6,r2
    8aec:	180f883a 	mov	r7,r3
    8af0:	9009883a 	mov	r4,r18
    8af4:	800b883a 	mov	r5,r16
    8af8:	000c9180 	call	c918 <__divdf3>
    8afc:	dfc00617 	ldw	ra,24(sp)
    8b00:	dcc00517 	ldw	r19,20(sp)
    8b04:	dc800417 	ldw	r18,16(sp)
    8b08:	dc400317 	ldw	r17,12(sp)
    8b0c:	dc000217 	ldw	r16,8(sp)
    8b10:	dec00704 	addi	sp,sp,28
    8b14:	f800283a 	ret
    8b18:	2008953a 	slli	r4,r4,20
    8b1c:	1907c83a 	sub	r3,r3,r4
    8b20:	003ff106 	br	8ae8 <__alt_data_end+0xff008ae8>

00008b24 <_mprec_log10>:
    8b24:	defffe04 	addi	sp,sp,-8
    8b28:	dc000015 	stw	r16,0(sp)
    8b2c:	dfc00115 	stw	ra,4(sp)
    8b30:	008005c4 	movi	r2,23
    8b34:	2021883a 	mov	r16,r4
    8b38:	11000d0e 	bge	r2,r4,8b70 <_mprec_log10+0x4c>
    8b3c:	0005883a 	mov	r2,zero
    8b40:	00cffc34 	movhi	r3,16368
    8b44:	843fffc4 	addi	r16,r16,-1
    8b48:	000d883a 	mov	r6,zero
    8b4c:	01d00934 	movhi	r7,16420
    8b50:	1009883a 	mov	r4,r2
    8b54:	180b883a 	mov	r5,r3
    8b58:	000d4580 	call	d458 <__muldf3>
    8b5c:	803ff91e 	bne	r16,zero,8b44 <__alt_data_end+0xff008b44>
    8b60:	dfc00117 	ldw	ra,4(sp)
    8b64:	dc000017 	ldw	r16,0(sp)
    8b68:	dec00204 	addi	sp,sp,8
    8b6c:	f800283a 	ret
    8b70:	202090fa 	slli	r16,r4,3
    8b74:	00800074 	movhi	r2,1
    8b78:	10816504 	addi	r2,r2,1428
    8b7c:	1421883a 	add	r16,r2,r16
    8b80:	80800017 	ldw	r2,0(r16)
    8b84:	80c00117 	ldw	r3,4(r16)
    8b88:	dfc00117 	ldw	ra,4(sp)
    8b8c:	dc000017 	ldw	r16,0(sp)
    8b90:	dec00204 	addi	sp,sp,8
    8b94:	f800283a 	ret

00008b98 <__copybits>:
    8b98:	297fffc4 	addi	r5,r5,-1
    8b9c:	280fd17a 	srai	r7,r5,5
    8ba0:	30c00417 	ldw	r3,16(r6)
    8ba4:	30800504 	addi	r2,r6,20
    8ba8:	39c00044 	addi	r7,r7,1
    8bac:	18c7883a 	add	r3,r3,r3
    8bb0:	39cf883a 	add	r7,r7,r7
    8bb4:	18c7883a 	add	r3,r3,r3
    8bb8:	39cf883a 	add	r7,r7,r7
    8bbc:	10c7883a 	add	r3,r2,r3
    8bc0:	21cf883a 	add	r7,r4,r7
    8bc4:	10c00d2e 	bgeu	r2,r3,8bfc <__copybits+0x64>
    8bc8:	200b883a 	mov	r5,r4
    8bcc:	12000017 	ldw	r8,0(r2)
    8bd0:	29400104 	addi	r5,r5,4
    8bd4:	10800104 	addi	r2,r2,4
    8bd8:	2a3fff15 	stw	r8,-4(r5)
    8bdc:	10fffb36 	bltu	r2,r3,8bcc <__alt_data_end+0xff008bcc>
    8be0:	1985c83a 	sub	r2,r3,r6
    8be4:	10bffac4 	addi	r2,r2,-21
    8be8:	1004d0ba 	srli	r2,r2,2
    8bec:	10800044 	addi	r2,r2,1
    8bf0:	1085883a 	add	r2,r2,r2
    8bf4:	1085883a 	add	r2,r2,r2
    8bf8:	2089883a 	add	r4,r4,r2
    8bfc:	21c0032e 	bgeu	r4,r7,8c0c <__copybits+0x74>
    8c00:	20000015 	stw	zero,0(r4)
    8c04:	21000104 	addi	r4,r4,4
    8c08:	21fffd36 	bltu	r4,r7,8c00 <__alt_data_end+0xff008c00>
    8c0c:	f800283a 	ret

00008c10 <__any_on>:
    8c10:	20c00417 	ldw	r3,16(r4)
    8c14:	2805d17a 	srai	r2,r5,5
    8c18:	21000504 	addi	r4,r4,20
    8c1c:	18800d0e 	bge	r3,r2,8c54 <__any_on+0x44>
    8c20:	18c7883a 	add	r3,r3,r3
    8c24:	18c7883a 	add	r3,r3,r3
    8c28:	20c7883a 	add	r3,r4,r3
    8c2c:	20c0192e 	bgeu	r4,r3,8c94 <__any_on+0x84>
    8c30:	18bfff17 	ldw	r2,-4(r3)
    8c34:	18ffff04 	addi	r3,r3,-4
    8c38:	1000041e 	bne	r2,zero,8c4c <__any_on+0x3c>
    8c3c:	20c0142e 	bgeu	r4,r3,8c90 <__any_on+0x80>
    8c40:	18ffff04 	addi	r3,r3,-4
    8c44:	19400017 	ldw	r5,0(r3)
    8c48:	283ffc26 	beq	r5,zero,8c3c <__alt_data_end+0xff008c3c>
    8c4c:	00800044 	movi	r2,1
    8c50:	f800283a 	ret
    8c54:	10c00a0e 	bge	r2,r3,8c80 <__any_on+0x70>
    8c58:	1085883a 	add	r2,r2,r2
    8c5c:	1085883a 	add	r2,r2,r2
    8c60:	294007cc 	andi	r5,r5,31
    8c64:	2087883a 	add	r3,r4,r2
    8c68:	283ff026 	beq	r5,zero,8c2c <__alt_data_end+0xff008c2c>
    8c6c:	19800017 	ldw	r6,0(r3)
    8c70:	3144d83a 	srl	r2,r6,r5
    8c74:	114a983a 	sll	r5,r2,r5
    8c78:	317ff41e 	bne	r6,r5,8c4c <__alt_data_end+0xff008c4c>
    8c7c:	003feb06 	br	8c2c <__alt_data_end+0xff008c2c>
    8c80:	1085883a 	add	r2,r2,r2
    8c84:	1085883a 	add	r2,r2,r2
    8c88:	2087883a 	add	r3,r4,r2
    8c8c:	003fe706 	br	8c2c <__alt_data_end+0xff008c2c>
    8c90:	f800283a 	ret
    8c94:	0005883a 	mov	r2,zero
    8c98:	f800283a 	ret

00008c9c <_realloc_r>:
    8c9c:	defff604 	addi	sp,sp,-40
    8ca0:	dc800215 	stw	r18,8(sp)
    8ca4:	dfc00915 	stw	ra,36(sp)
    8ca8:	df000815 	stw	fp,32(sp)
    8cac:	ddc00715 	stw	r23,28(sp)
    8cb0:	dd800615 	stw	r22,24(sp)
    8cb4:	dd400515 	stw	r21,20(sp)
    8cb8:	dd000415 	stw	r20,16(sp)
    8cbc:	dcc00315 	stw	r19,12(sp)
    8cc0:	dc400115 	stw	r17,4(sp)
    8cc4:	dc000015 	stw	r16,0(sp)
    8cc8:	3025883a 	mov	r18,r6
    8ccc:	2800b726 	beq	r5,zero,8fac <_realloc_r+0x310>
    8cd0:	282b883a 	mov	r21,r5
    8cd4:	2029883a 	mov	r20,r4
    8cd8:	000ea3c0 	call	ea3c <__malloc_lock>
    8cdc:	a8bfff17 	ldw	r2,-4(r21)
    8ce0:	043fff04 	movi	r16,-4
    8ce4:	90c002c4 	addi	r3,r18,11
    8ce8:	01000584 	movi	r4,22
    8cec:	acfffe04 	addi	r19,r21,-8
    8cf0:	1420703a 	and	r16,r2,r16
    8cf4:	20c0332e 	bgeu	r4,r3,8dc4 <_realloc_r+0x128>
    8cf8:	047ffe04 	movi	r17,-8
    8cfc:	1c62703a 	and	r17,r3,r17
    8d00:	8807883a 	mov	r3,r17
    8d04:	88005816 	blt	r17,zero,8e68 <_realloc_r+0x1cc>
    8d08:	8c805736 	bltu	r17,r18,8e68 <_realloc_r+0x1cc>
    8d0c:	80c0300e 	bge	r16,r3,8dd0 <_realloc_r+0x134>
    8d10:	07000074 	movhi	fp,1
    8d14:	e701e604 	addi	fp,fp,1944
    8d18:	e1c00217 	ldw	r7,8(fp)
    8d1c:	9c09883a 	add	r4,r19,r16
    8d20:	22000117 	ldw	r8,4(r4)
    8d24:	21c06326 	beq	r4,r7,8eb4 <_realloc_r+0x218>
    8d28:	017fff84 	movi	r5,-2
    8d2c:	414a703a 	and	r5,r8,r5
    8d30:	214b883a 	add	r5,r4,r5
    8d34:	29800117 	ldw	r6,4(r5)
    8d38:	3180004c 	andi	r6,r6,1
    8d3c:	30003f26 	beq	r6,zero,8e3c <_realloc_r+0x1a0>
    8d40:	1080004c 	andi	r2,r2,1
    8d44:	10008326 	beq	r2,zero,8f54 <_realloc_r+0x2b8>
    8d48:	900b883a 	mov	r5,r18
    8d4c:	a009883a 	mov	r4,r20
    8d50:	0001db40 	call	1db4 <_malloc_r>
    8d54:	1025883a 	mov	r18,r2
    8d58:	10011e26 	beq	r2,zero,91d4 <_realloc_r+0x538>
    8d5c:	a93fff17 	ldw	r4,-4(r21)
    8d60:	10fffe04 	addi	r3,r2,-8
    8d64:	00bfff84 	movi	r2,-2
    8d68:	2084703a 	and	r2,r4,r2
    8d6c:	9885883a 	add	r2,r19,r2
    8d70:	1880ee26 	beq	r3,r2,912c <_realloc_r+0x490>
    8d74:	81bfff04 	addi	r6,r16,-4
    8d78:	00800904 	movi	r2,36
    8d7c:	1180b836 	bltu	r2,r6,9060 <_realloc_r+0x3c4>
    8d80:	00c004c4 	movi	r3,19
    8d84:	19809636 	bltu	r3,r6,8fe0 <_realloc_r+0x344>
    8d88:	9005883a 	mov	r2,r18
    8d8c:	a807883a 	mov	r3,r21
    8d90:	19000017 	ldw	r4,0(r3)
    8d94:	11000015 	stw	r4,0(r2)
    8d98:	19000117 	ldw	r4,4(r3)
    8d9c:	11000115 	stw	r4,4(r2)
    8da0:	18c00217 	ldw	r3,8(r3)
    8da4:	10c00215 	stw	r3,8(r2)
    8da8:	a80b883a 	mov	r5,r21
    8dac:	a009883a 	mov	r4,r20
    8db0:	0006c040 	call	6c04 <_free_r>
    8db4:	a009883a 	mov	r4,r20
    8db8:	000ea400 	call	ea40 <__malloc_unlock>
    8dbc:	9005883a 	mov	r2,r18
    8dc0:	00001206 	br	8e0c <_realloc_r+0x170>
    8dc4:	00c00404 	movi	r3,16
    8dc8:	1823883a 	mov	r17,r3
    8dcc:	003fce06 	br	8d08 <__alt_data_end+0xff008d08>
    8dd0:	a825883a 	mov	r18,r21
    8dd4:	8445c83a 	sub	r2,r16,r17
    8dd8:	00c003c4 	movi	r3,15
    8ddc:	18802636 	bltu	r3,r2,8e78 <_realloc_r+0x1dc>
    8de0:	99800117 	ldw	r6,4(r19)
    8de4:	9c07883a 	add	r3,r19,r16
    8de8:	3180004c 	andi	r6,r6,1
    8dec:	3420b03a 	or	r16,r6,r16
    8df0:	9c000115 	stw	r16,4(r19)
    8df4:	18800117 	ldw	r2,4(r3)
    8df8:	10800054 	ori	r2,r2,1
    8dfc:	18800115 	stw	r2,4(r3)
    8e00:	a009883a 	mov	r4,r20
    8e04:	000ea400 	call	ea40 <__malloc_unlock>
    8e08:	9005883a 	mov	r2,r18
    8e0c:	dfc00917 	ldw	ra,36(sp)
    8e10:	df000817 	ldw	fp,32(sp)
    8e14:	ddc00717 	ldw	r23,28(sp)
    8e18:	dd800617 	ldw	r22,24(sp)
    8e1c:	dd400517 	ldw	r21,20(sp)
    8e20:	dd000417 	ldw	r20,16(sp)
    8e24:	dcc00317 	ldw	r19,12(sp)
    8e28:	dc800217 	ldw	r18,8(sp)
    8e2c:	dc400117 	ldw	r17,4(sp)
    8e30:	dc000017 	ldw	r16,0(sp)
    8e34:	dec00a04 	addi	sp,sp,40
    8e38:	f800283a 	ret
    8e3c:	017fff04 	movi	r5,-4
    8e40:	414a703a 	and	r5,r8,r5
    8e44:	814d883a 	add	r6,r16,r5
    8e48:	30c01f16 	blt	r6,r3,8ec8 <_realloc_r+0x22c>
    8e4c:	20800317 	ldw	r2,12(r4)
    8e50:	20c00217 	ldw	r3,8(r4)
    8e54:	a825883a 	mov	r18,r21
    8e58:	3021883a 	mov	r16,r6
    8e5c:	18800315 	stw	r2,12(r3)
    8e60:	10c00215 	stw	r3,8(r2)
    8e64:	003fdb06 	br	8dd4 <__alt_data_end+0xff008dd4>
    8e68:	00800304 	movi	r2,12
    8e6c:	a0800015 	stw	r2,0(r20)
    8e70:	0005883a 	mov	r2,zero
    8e74:	003fe506 	br	8e0c <__alt_data_end+0xff008e0c>
    8e78:	98c00117 	ldw	r3,4(r19)
    8e7c:	9c4b883a 	add	r5,r19,r17
    8e80:	11000054 	ori	r4,r2,1
    8e84:	18c0004c 	andi	r3,r3,1
    8e88:	1c62b03a 	or	r17,r3,r17
    8e8c:	9c400115 	stw	r17,4(r19)
    8e90:	29000115 	stw	r4,4(r5)
    8e94:	2885883a 	add	r2,r5,r2
    8e98:	10c00117 	ldw	r3,4(r2)
    8e9c:	29400204 	addi	r5,r5,8
    8ea0:	a009883a 	mov	r4,r20
    8ea4:	18c00054 	ori	r3,r3,1
    8ea8:	10c00115 	stw	r3,4(r2)
    8eac:	0006c040 	call	6c04 <_free_r>
    8eb0:	003fd306 	br	8e00 <__alt_data_end+0xff008e00>
    8eb4:	017fff04 	movi	r5,-4
    8eb8:	414a703a 	and	r5,r8,r5
    8ebc:	89800404 	addi	r6,r17,16
    8ec0:	8151883a 	add	r8,r16,r5
    8ec4:	4180590e 	bge	r8,r6,902c <_realloc_r+0x390>
    8ec8:	1080004c 	andi	r2,r2,1
    8ecc:	103f9e1e 	bne	r2,zero,8d48 <__alt_data_end+0xff008d48>
    8ed0:	adbffe17 	ldw	r22,-8(r21)
    8ed4:	00bfff04 	movi	r2,-4
    8ed8:	9dadc83a 	sub	r22,r19,r22
    8edc:	b1800117 	ldw	r6,4(r22)
    8ee0:	3084703a 	and	r2,r6,r2
    8ee4:	20002026 	beq	r4,zero,8f68 <_realloc_r+0x2cc>
    8ee8:	80af883a 	add	r23,r16,r2
    8eec:	b96f883a 	add	r23,r23,r5
    8ef0:	21c05f26 	beq	r4,r7,9070 <_realloc_r+0x3d4>
    8ef4:	b8c01c16 	blt	r23,r3,8f68 <_realloc_r+0x2cc>
    8ef8:	20800317 	ldw	r2,12(r4)
    8efc:	20c00217 	ldw	r3,8(r4)
    8f00:	81bfff04 	addi	r6,r16,-4
    8f04:	01000904 	movi	r4,36
    8f08:	18800315 	stw	r2,12(r3)
    8f0c:	10c00215 	stw	r3,8(r2)
    8f10:	b0c00217 	ldw	r3,8(r22)
    8f14:	b0800317 	ldw	r2,12(r22)
    8f18:	b4800204 	addi	r18,r22,8
    8f1c:	18800315 	stw	r2,12(r3)
    8f20:	10c00215 	stw	r3,8(r2)
    8f24:	21801b36 	bltu	r4,r6,8f94 <_realloc_r+0x2f8>
    8f28:	008004c4 	movi	r2,19
    8f2c:	1180352e 	bgeu	r2,r6,9004 <_realloc_r+0x368>
    8f30:	a8800017 	ldw	r2,0(r21)
    8f34:	b0800215 	stw	r2,8(r22)
    8f38:	a8800117 	ldw	r2,4(r21)
    8f3c:	b0800315 	stw	r2,12(r22)
    8f40:	008006c4 	movi	r2,27
    8f44:	11807f36 	bltu	r2,r6,9144 <_realloc_r+0x4a8>
    8f48:	b0800404 	addi	r2,r22,16
    8f4c:	ad400204 	addi	r21,r21,8
    8f50:	00002d06 	br	9008 <_realloc_r+0x36c>
    8f54:	adbffe17 	ldw	r22,-8(r21)
    8f58:	00bfff04 	movi	r2,-4
    8f5c:	9dadc83a 	sub	r22,r19,r22
    8f60:	b1000117 	ldw	r4,4(r22)
    8f64:	2084703a 	and	r2,r4,r2
    8f68:	b03f7726 	beq	r22,zero,8d48 <__alt_data_end+0xff008d48>
    8f6c:	80af883a 	add	r23,r16,r2
    8f70:	b8ff7516 	blt	r23,r3,8d48 <__alt_data_end+0xff008d48>
    8f74:	b0800317 	ldw	r2,12(r22)
    8f78:	b0c00217 	ldw	r3,8(r22)
    8f7c:	81bfff04 	addi	r6,r16,-4
    8f80:	01000904 	movi	r4,36
    8f84:	18800315 	stw	r2,12(r3)
    8f88:	10c00215 	stw	r3,8(r2)
    8f8c:	b4800204 	addi	r18,r22,8
    8f90:	21bfe52e 	bgeu	r4,r6,8f28 <__alt_data_end+0xff008f28>
    8f94:	a80b883a 	mov	r5,r21
    8f98:	9009883a 	mov	r4,r18
    8f9c:	0007a1c0 	call	7a1c <memmove>
    8fa0:	b821883a 	mov	r16,r23
    8fa4:	b027883a 	mov	r19,r22
    8fa8:	003f8a06 	br	8dd4 <__alt_data_end+0xff008dd4>
    8fac:	300b883a 	mov	r5,r6
    8fb0:	dfc00917 	ldw	ra,36(sp)
    8fb4:	df000817 	ldw	fp,32(sp)
    8fb8:	ddc00717 	ldw	r23,28(sp)
    8fbc:	dd800617 	ldw	r22,24(sp)
    8fc0:	dd400517 	ldw	r21,20(sp)
    8fc4:	dd000417 	ldw	r20,16(sp)
    8fc8:	dcc00317 	ldw	r19,12(sp)
    8fcc:	dc800217 	ldw	r18,8(sp)
    8fd0:	dc400117 	ldw	r17,4(sp)
    8fd4:	dc000017 	ldw	r16,0(sp)
    8fd8:	dec00a04 	addi	sp,sp,40
    8fdc:	0001db41 	jmpi	1db4 <_malloc_r>
    8fe0:	a8c00017 	ldw	r3,0(r21)
    8fe4:	90c00015 	stw	r3,0(r18)
    8fe8:	a8c00117 	ldw	r3,4(r21)
    8fec:	90c00115 	stw	r3,4(r18)
    8ff0:	00c006c4 	movi	r3,27
    8ff4:	19804536 	bltu	r3,r6,910c <_realloc_r+0x470>
    8ff8:	90800204 	addi	r2,r18,8
    8ffc:	a8c00204 	addi	r3,r21,8
    9000:	003f6306 	br	8d90 <__alt_data_end+0xff008d90>
    9004:	9005883a 	mov	r2,r18
    9008:	a8c00017 	ldw	r3,0(r21)
    900c:	b821883a 	mov	r16,r23
    9010:	b027883a 	mov	r19,r22
    9014:	10c00015 	stw	r3,0(r2)
    9018:	a8c00117 	ldw	r3,4(r21)
    901c:	10c00115 	stw	r3,4(r2)
    9020:	a8c00217 	ldw	r3,8(r21)
    9024:	10c00215 	stw	r3,8(r2)
    9028:	003f6a06 	br	8dd4 <__alt_data_end+0xff008dd4>
    902c:	9c67883a 	add	r19,r19,r17
    9030:	4445c83a 	sub	r2,r8,r17
    9034:	e4c00215 	stw	r19,8(fp)
    9038:	10800054 	ori	r2,r2,1
    903c:	98800115 	stw	r2,4(r19)
    9040:	a8bfff17 	ldw	r2,-4(r21)
    9044:	a009883a 	mov	r4,r20
    9048:	1080004c 	andi	r2,r2,1
    904c:	1462b03a 	or	r17,r2,r17
    9050:	ac7fff15 	stw	r17,-4(r21)
    9054:	000ea400 	call	ea40 <__malloc_unlock>
    9058:	a805883a 	mov	r2,r21
    905c:	003f6b06 	br	8e0c <__alt_data_end+0xff008e0c>
    9060:	a80b883a 	mov	r5,r21
    9064:	9009883a 	mov	r4,r18
    9068:	0007a1c0 	call	7a1c <memmove>
    906c:	003f4e06 	br	8da8 <__alt_data_end+0xff008da8>
    9070:	89000404 	addi	r4,r17,16
    9074:	b93fbc16 	blt	r23,r4,8f68 <__alt_data_end+0xff008f68>
    9078:	b0800317 	ldw	r2,12(r22)
    907c:	b0c00217 	ldw	r3,8(r22)
    9080:	81bfff04 	addi	r6,r16,-4
    9084:	01000904 	movi	r4,36
    9088:	18800315 	stw	r2,12(r3)
    908c:	10c00215 	stw	r3,8(r2)
    9090:	b4800204 	addi	r18,r22,8
    9094:	21804336 	bltu	r4,r6,91a4 <_realloc_r+0x508>
    9098:	008004c4 	movi	r2,19
    909c:	11803f2e 	bgeu	r2,r6,919c <_realloc_r+0x500>
    90a0:	a8800017 	ldw	r2,0(r21)
    90a4:	b0800215 	stw	r2,8(r22)
    90a8:	a8800117 	ldw	r2,4(r21)
    90ac:	b0800315 	stw	r2,12(r22)
    90b0:	008006c4 	movi	r2,27
    90b4:	11803f36 	bltu	r2,r6,91b4 <_realloc_r+0x518>
    90b8:	b0800404 	addi	r2,r22,16
    90bc:	ad400204 	addi	r21,r21,8
    90c0:	a8c00017 	ldw	r3,0(r21)
    90c4:	10c00015 	stw	r3,0(r2)
    90c8:	a8c00117 	ldw	r3,4(r21)
    90cc:	10c00115 	stw	r3,4(r2)
    90d0:	a8c00217 	ldw	r3,8(r21)
    90d4:	10c00215 	stw	r3,8(r2)
    90d8:	b447883a 	add	r3,r22,r17
    90dc:	bc45c83a 	sub	r2,r23,r17
    90e0:	e0c00215 	stw	r3,8(fp)
    90e4:	10800054 	ori	r2,r2,1
    90e8:	18800115 	stw	r2,4(r3)
    90ec:	b0800117 	ldw	r2,4(r22)
    90f0:	a009883a 	mov	r4,r20
    90f4:	1080004c 	andi	r2,r2,1
    90f8:	1462b03a 	or	r17,r2,r17
    90fc:	b4400115 	stw	r17,4(r22)
    9100:	000ea400 	call	ea40 <__malloc_unlock>
    9104:	9005883a 	mov	r2,r18
    9108:	003f4006 	br	8e0c <__alt_data_end+0xff008e0c>
    910c:	a8c00217 	ldw	r3,8(r21)
    9110:	90c00215 	stw	r3,8(r18)
    9114:	a8c00317 	ldw	r3,12(r21)
    9118:	90c00315 	stw	r3,12(r18)
    911c:	30801126 	beq	r6,r2,9164 <_realloc_r+0x4c8>
    9120:	90800404 	addi	r2,r18,16
    9124:	a8c00404 	addi	r3,r21,16
    9128:	003f1906 	br	8d90 <__alt_data_end+0xff008d90>
    912c:	90ffff17 	ldw	r3,-4(r18)
    9130:	00bfff04 	movi	r2,-4
    9134:	a825883a 	mov	r18,r21
    9138:	1884703a 	and	r2,r3,r2
    913c:	80a1883a 	add	r16,r16,r2
    9140:	003f2406 	br	8dd4 <__alt_data_end+0xff008dd4>
    9144:	a8800217 	ldw	r2,8(r21)
    9148:	b0800415 	stw	r2,16(r22)
    914c:	a8800317 	ldw	r2,12(r21)
    9150:	b0800515 	stw	r2,20(r22)
    9154:	31000a26 	beq	r6,r4,9180 <_realloc_r+0x4e4>
    9158:	b0800604 	addi	r2,r22,24
    915c:	ad400404 	addi	r21,r21,16
    9160:	003fa906 	br	9008 <__alt_data_end+0xff009008>
    9164:	a9000417 	ldw	r4,16(r21)
    9168:	90800604 	addi	r2,r18,24
    916c:	a8c00604 	addi	r3,r21,24
    9170:	91000415 	stw	r4,16(r18)
    9174:	a9000517 	ldw	r4,20(r21)
    9178:	91000515 	stw	r4,20(r18)
    917c:	003f0406 	br	8d90 <__alt_data_end+0xff008d90>
    9180:	a8c00417 	ldw	r3,16(r21)
    9184:	ad400604 	addi	r21,r21,24
    9188:	b0800804 	addi	r2,r22,32
    918c:	b0c00615 	stw	r3,24(r22)
    9190:	a8ffff17 	ldw	r3,-4(r21)
    9194:	b0c00715 	stw	r3,28(r22)
    9198:	003f9b06 	br	9008 <__alt_data_end+0xff009008>
    919c:	9005883a 	mov	r2,r18
    91a0:	003fc706 	br	90c0 <__alt_data_end+0xff0090c0>
    91a4:	a80b883a 	mov	r5,r21
    91a8:	9009883a 	mov	r4,r18
    91ac:	0007a1c0 	call	7a1c <memmove>
    91b0:	003fc906 	br	90d8 <__alt_data_end+0xff0090d8>
    91b4:	a8800217 	ldw	r2,8(r21)
    91b8:	b0800415 	stw	r2,16(r22)
    91bc:	a8800317 	ldw	r2,12(r21)
    91c0:	b0800515 	stw	r2,20(r22)
    91c4:	31000726 	beq	r6,r4,91e4 <_realloc_r+0x548>
    91c8:	b0800604 	addi	r2,r22,24
    91cc:	ad400404 	addi	r21,r21,16
    91d0:	003fbb06 	br	90c0 <__alt_data_end+0xff0090c0>
    91d4:	a009883a 	mov	r4,r20
    91d8:	000ea400 	call	ea40 <__malloc_unlock>
    91dc:	0005883a 	mov	r2,zero
    91e0:	003f0a06 	br	8e0c <__alt_data_end+0xff008e0c>
    91e4:	a8c00417 	ldw	r3,16(r21)
    91e8:	ad400604 	addi	r21,r21,24
    91ec:	b0800804 	addi	r2,r22,32
    91f0:	b0c00615 	stw	r3,24(r22)
    91f4:	a8ffff17 	ldw	r3,-4(r21)
    91f8:	b0c00715 	stw	r3,28(r22)
    91fc:	003fb006 	br	90c0 <__alt_data_end+0xff0090c0>

00009200 <__fpclassifyd>:
    9200:	00a00034 	movhi	r2,32768
    9204:	10bfffc4 	addi	r2,r2,-1
    9208:	2884703a 	and	r2,r5,r2
    920c:	10000726 	beq	r2,zero,922c <__fpclassifyd+0x2c>
    9210:	00fffc34 	movhi	r3,65520
    9214:	019ff834 	movhi	r6,32736
    9218:	28c7883a 	add	r3,r5,r3
    921c:	31bfffc4 	addi	r6,r6,-1
    9220:	30c00536 	bltu	r6,r3,9238 <__fpclassifyd+0x38>
    9224:	00800104 	movi	r2,4
    9228:	f800283a 	ret
    922c:	2000021e 	bne	r4,zero,9238 <__fpclassifyd+0x38>
    9230:	00800084 	movi	r2,2
    9234:	f800283a 	ret
    9238:	00dffc34 	movhi	r3,32752
    923c:	019ff834 	movhi	r6,32736
    9240:	28cb883a 	add	r5,r5,r3
    9244:	31bfffc4 	addi	r6,r6,-1
    9248:	317ff62e 	bgeu	r6,r5,9224 <__alt_data_end+0xff009224>
    924c:	01400434 	movhi	r5,16
    9250:	297fffc4 	addi	r5,r5,-1
    9254:	28800236 	bltu	r5,r2,9260 <__fpclassifyd+0x60>
    9258:	008000c4 	movi	r2,3
    925c:	f800283a 	ret
    9260:	10c00226 	beq	r2,r3,926c <__fpclassifyd+0x6c>
    9264:	0005883a 	mov	r2,zero
    9268:	f800283a 	ret
    926c:	2005003a 	cmpeq	r2,r4,zero
    9270:	f800283a 	ret

00009274 <__sread>:
    9274:	defffe04 	addi	sp,sp,-8
    9278:	dc000015 	stw	r16,0(sp)
    927c:	2821883a 	mov	r16,r5
    9280:	2940038f 	ldh	r5,14(r5)
    9284:	dfc00115 	stw	ra,4(sp)
    9288:	000b0680 	call	b068 <_read_r>
    928c:	10000716 	blt	r2,zero,92ac <__sread+0x38>
    9290:	80c01417 	ldw	r3,80(r16)
    9294:	1887883a 	add	r3,r3,r2
    9298:	80c01415 	stw	r3,80(r16)
    929c:	dfc00117 	ldw	ra,4(sp)
    92a0:	dc000017 	ldw	r16,0(sp)
    92a4:	dec00204 	addi	sp,sp,8
    92a8:	f800283a 	ret
    92ac:	80c0030b 	ldhu	r3,12(r16)
    92b0:	18fbffcc 	andi	r3,r3,61439
    92b4:	80c0030d 	sth	r3,12(r16)
    92b8:	dfc00117 	ldw	ra,4(sp)
    92bc:	dc000017 	ldw	r16,0(sp)
    92c0:	dec00204 	addi	sp,sp,8
    92c4:	f800283a 	ret

000092c8 <__seofread>:
    92c8:	0005883a 	mov	r2,zero
    92cc:	f800283a 	ret

000092d0 <__swrite>:
    92d0:	2880030b 	ldhu	r2,12(r5)
    92d4:	defffb04 	addi	sp,sp,-20
    92d8:	dcc00315 	stw	r19,12(sp)
    92dc:	dc800215 	stw	r18,8(sp)
    92e0:	dc400115 	stw	r17,4(sp)
    92e4:	dc000015 	stw	r16,0(sp)
    92e8:	dfc00415 	stw	ra,16(sp)
    92ec:	10c0400c 	andi	r3,r2,256
    92f0:	2821883a 	mov	r16,r5
    92f4:	2023883a 	mov	r17,r4
    92f8:	3025883a 	mov	r18,r6
    92fc:	3827883a 	mov	r19,r7
    9300:	18000526 	beq	r3,zero,9318 <__swrite+0x48>
    9304:	2940038f 	ldh	r5,14(r5)
    9308:	01c00084 	movi	r7,2
    930c:	000d883a 	mov	r6,zero
    9310:	000b0080 	call	b008 <_lseek_r>
    9314:	8080030b 	ldhu	r2,12(r16)
    9318:	8140038f 	ldh	r5,14(r16)
    931c:	10bbffcc 	andi	r2,r2,61439
    9320:	980f883a 	mov	r7,r19
    9324:	900d883a 	mov	r6,r18
    9328:	8809883a 	mov	r4,r17
    932c:	8080030d 	sth	r2,12(r16)
    9330:	dfc00417 	ldw	ra,16(sp)
    9334:	dcc00317 	ldw	r19,12(sp)
    9338:	dc800217 	ldw	r18,8(sp)
    933c:	dc400117 	ldw	r17,4(sp)
    9340:	dc000017 	ldw	r16,0(sp)
    9344:	dec00504 	addi	sp,sp,20
    9348:	000aad41 	jmpi	aad4 <_write_r>

0000934c <__sseek>:
    934c:	defffe04 	addi	sp,sp,-8
    9350:	dc000015 	stw	r16,0(sp)
    9354:	2821883a 	mov	r16,r5
    9358:	2940038f 	ldh	r5,14(r5)
    935c:	dfc00115 	stw	ra,4(sp)
    9360:	000b0080 	call	b008 <_lseek_r>
    9364:	00ffffc4 	movi	r3,-1
    9368:	10c00826 	beq	r2,r3,938c <__sseek+0x40>
    936c:	80c0030b 	ldhu	r3,12(r16)
    9370:	80801415 	stw	r2,80(r16)
    9374:	18c40014 	ori	r3,r3,4096
    9378:	80c0030d 	sth	r3,12(r16)
    937c:	dfc00117 	ldw	ra,4(sp)
    9380:	dc000017 	ldw	r16,0(sp)
    9384:	dec00204 	addi	sp,sp,8
    9388:	f800283a 	ret
    938c:	80c0030b 	ldhu	r3,12(r16)
    9390:	18fbffcc 	andi	r3,r3,61439
    9394:	80c0030d 	sth	r3,12(r16)
    9398:	dfc00117 	ldw	ra,4(sp)
    939c:	dc000017 	ldw	r16,0(sp)
    93a0:	dec00204 	addi	sp,sp,8
    93a4:	f800283a 	ret

000093a8 <__sclose>:
    93a8:	2940038f 	ldh	r5,14(r5)
    93ac:	000ab341 	jmpi	ab34 <_close_r>

000093b0 <strcmp>:
    93b0:	2144b03a 	or	r2,r4,r5
    93b4:	108000cc 	andi	r2,r2,3
    93b8:	1000171e 	bne	r2,zero,9418 <strcmp+0x68>
    93bc:	20800017 	ldw	r2,0(r4)
    93c0:	28c00017 	ldw	r3,0(r5)
    93c4:	10c0141e 	bne	r2,r3,9418 <strcmp+0x68>
    93c8:	027fbff4 	movhi	r9,65279
    93cc:	4a7fbfc4 	addi	r9,r9,-257
    93d0:	0086303a 	nor	r3,zero,r2
    93d4:	02202074 	movhi	r8,32897
    93d8:	1245883a 	add	r2,r2,r9
    93dc:	42202004 	addi	r8,r8,-32640
    93e0:	10c4703a 	and	r2,r2,r3
    93e4:	1204703a 	and	r2,r2,r8
    93e8:	10000226 	beq	r2,zero,93f4 <strcmp+0x44>
    93ec:	00002306 	br	947c <strcmp+0xcc>
    93f0:	1000221e 	bne	r2,zero,947c <strcmp+0xcc>
    93f4:	21000104 	addi	r4,r4,4
    93f8:	20c00017 	ldw	r3,0(r4)
    93fc:	29400104 	addi	r5,r5,4
    9400:	29800017 	ldw	r6,0(r5)
    9404:	1a4f883a 	add	r7,r3,r9
    9408:	00c4303a 	nor	r2,zero,r3
    940c:	3884703a 	and	r2,r7,r2
    9410:	1204703a 	and	r2,r2,r8
    9414:	19bff626 	beq	r3,r6,93f0 <__alt_data_end+0xff0093f0>
    9418:	20800003 	ldbu	r2,0(r4)
    941c:	10c03fcc 	andi	r3,r2,255
    9420:	18c0201c 	xori	r3,r3,128
    9424:	18ffe004 	addi	r3,r3,-128
    9428:	18000c26 	beq	r3,zero,945c <strcmp+0xac>
    942c:	29800007 	ldb	r6,0(r5)
    9430:	19800326 	beq	r3,r6,9440 <strcmp+0x90>
    9434:	00001306 	br	9484 <strcmp+0xd4>
    9438:	29800007 	ldb	r6,0(r5)
    943c:	11800b1e 	bne	r2,r6,946c <strcmp+0xbc>
    9440:	21000044 	addi	r4,r4,1
    9444:	20c00003 	ldbu	r3,0(r4)
    9448:	29400044 	addi	r5,r5,1
    944c:	18803fcc 	andi	r2,r3,255
    9450:	1080201c 	xori	r2,r2,128
    9454:	10bfe004 	addi	r2,r2,-128
    9458:	103ff71e 	bne	r2,zero,9438 <__alt_data_end+0xff009438>
    945c:	0007883a 	mov	r3,zero
    9460:	28800003 	ldbu	r2,0(r5)
    9464:	1885c83a 	sub	r2,r3,r2
    9468:	f800283a 	ret
    946c:	28800003 	ldbu	r2,0(r5)
    9470:	18c03fcc 	andi	r3,r3,255
    9474:	1885c83a 	sub	r2,r3,r2
    9478:	f800283a 	ret
    947c:	0005883a 	mov	r2,zero
    9480:	f800283a 	ret
    9484:	10c03fcc 	andi	r3,r2,255
    9488:	003ff506 	br	9460 <__alt_data_end+0xff009460>

0000948c <__sprint_r.part.0>:
    948c:	28801917 	ldw	r2,100(r5)
    9490:	defff604 	addi	sp,sp,-40
    9494:	dd400515 	stw	r21,20(sp)
    9498:	dfc00915 	stw	ra,36(sp)
    949c:	df000815 	stw	fp,32(sp)
    94a0:	ddc00715 	stw	r23,28(sp)
    94a4:	dd800615 	stw	r22,24(sp)
    94a8:	dd000415 	stw	r20,16(sp)
    94ac:	dcc00315 	stw	r19,12(sp)
    94b0:	dc800215 	stw	r18,8(sp)
    94b4:	dc400115 	stw	r17,4(sp)
    94b8:	dc000015 	stw	r16,0(sp)
    94bc:	1088000c 	andi	r2,r2,8192
    94c0:	302b883a 	mov	r21,r6
    94c4:	10002e26 	beq	r2,zero,9580 <__sprint_r.part.0+0xf4>
    94c8:	30800217 	ldw	r2,8(r6)
    94cc:	35800017 	ldw	r22,0(r6)
    94d0:	10002926 	beq	r2,zero,9578 <__sprint_r.part.0+0xec>
    94d4:	2827883a 	mov	r19,r5
    94d8:	2029883a 	mov	r20,r4
    94dc:	b5c00104 	addi	r23,r22,4
    94e0:	04bfffc4 	movi	r18,-1
    94e4:	bc400017 	ldw	r17,0(r23)
    94e8:	b4000017 	ldw	r16,0(r22)
    94ec:	0039883a 	mov	fp,zero
    94f0:	8822d0ba 	srli	r17,r17,2
    94f4:	8800031e 	bne	r17,zero,9504 <__sprint_r.part.0+0x78>
    94f8:	00001806 	br	955c <__sprint_r.part.0+0xd0>
    94fc:	84000104 	addi	r16,r16,4
    9500:	8f001526 	beq	r17,fp,9558 <__sprint_r.part.0+0xcc>
    9504:	81400017 	ldw	r5,0(r16)
    9508:	980d883a 	mov	r6,r19
    950c:	a009883a 	mov	r4,r20
    9510:	000aeb40 	call	aeb4 <_fputwc_r>
    9514:	e7000044 	addi	fp,fp,1
    9518:	14bff81e 	bne	r2,r18,94fc <__alt_data_end+0xff0094fc>
    951c:	9005883a 	mov	r2,r18
    9520:	a8000215 	stw	zero,8(r21)
    9524:	a8000115 	stw	zero,4(r21)
    9528:	dfc00917 	ldw	ra,36(sp)
    952c:	df000817 	ldw	fp,32(sp)
    9530:	ddc00717 	ldw	r23,28(sp)
    9534:	dd800617 	ldw	r22,24(sp)
    9538:	dd400517 	ldw	r21,20(sp)
    953c:	dd000417 	ldw	r20,16(sp)
    9540:	dcc00317 	ldw	r19,12(sp)
    9544:	dc800217 	ldw	r18,8(sp)
    9548:	dc400117 	ldw	r17,4(sp)
    954c:	dc000017 	ldw	r16,0(sp)
    9550:	dec00a04 	addi	sp,sp,40
    9554:	f800283a 	ret
    9558:	a8800217 	ldw	r2,8(r21)
    955c:	8c63883a 	add	r17,r17,r17
    9560:	8c63883a 	add	r17,r17,r17
    9564:	1445c83a 	sub	r2,r2,r17
    9568:	a8800215 	stw	r2,8(r21)
    956c:	b5800204 	addi	r22,r22,8
    9570:	bdc00204 	addi	r23,r23,8
    9574:	103fdb1e 	bne	r2,zero,94e4 <__alt_data_end+0xff0094e4>
    9578:	0005883a 	mov	r2,zero
    957c:	003fe806 	br	9520 <__alt_data_end+0xff009520>
    9580:	0006f140 	call	6f14 <__sfvwrite_r>
    9584:	003fe606 	br	9520 <__alt_data_end+0xff009520>

00009588 <__sprint_r>:
    9588:	30c00217 	ldw	r3,8(r6)
    958c:	18000126 	beq	r3,zero,9594 <__sprint_r+0xc>
    9590:	000948c1 	jmpi	948c <__sprint_r.part.0>
    9594:	30000115 	stw	zero,4(r6)
    9598:	0005883a 	mov	r2,zero
    959c:	f800283a 	ret

000095a0 <___vfiprintf_internal_r>:
    95a0:	deffc904 	addi	sp,sp,-220
    95a4:	df003515 	stw	fp,212(sp)
    95a8:	dd003115 	stw	r20,196(sp)
    95ac:	dfc03615 	stw	ra,216(sp)
    95b0:	ddc03415 	stw	r23,208(sp)
    95b4:	dd803315 	stw	r22,204(sp)
    95b8:	dd403215 	stw	r21,200(sp)
    95bc:	dcc03015 	stw	r19,192(sp)
    95c0:	dc802f15 	stw	r18,188(sp)
    95c4:	dc402e15 	stw	r17,184(sp)
    95c8:	dc002d15 	stw	r16,180(sp)
    95cc:	d9002015 	stw	r4,128(sp)
    95d0:	d9c02215 	stw	r7,136(sp)
    95d4:	2829883a 	mov	r20,r5
    95d8:	3039883a 	mov	fp,r6
    95dc:	20000226 	beq	r4,zero,95e8 <___vfiprintf_internal_r+0x48>
    95e0:	20800e17 	ldw	r2,56(r4)
    95e4:	1000cf26 	beq	r2,zero,9924 <___vfiprintf_internal_r+0x384>
    95e8:	a080030b 	ldhu	r2,12(r20)
    95ec:	10c8000c 	andi	r3,r2,8192
    95f0:	1800061e 	bne	r3,zero,960c <___vfiprintf_internal_r+0x6c>
    95f4:	a1001917 	ldw	r4,100(r20)
    95f8:	00f7ffc4 	movi	r3,-8193
    95fc:	10880014 	ori	r2,r2,8192
    9600:	20c6703a 	and	r3,r4,r3
    9604:	a080030d 	sth	r2,12(r20)
    9608:	a0c01915 	stw	r3,100(r20)
    960c:	10c0020c 	andi	r3,r2,8
    9610:	1800a926 	beq	r3,zero,98b8 <___vfiprintf_internal_r+0x318>
    9614:	a0c00417 	ldw	r3,16(r20)
    9618:	1800a726 	beq	r3,zero,98b8 <___vfiprintf_internal_r+0x318>
    961c:	1080068c 	andi	r2,r2,26
    9620:	00c00284 	movi	r3,10
    9624:	10c0ac26 	beq	r2,r3,98d8 <___vfiprintf_internal_r+0x338>
    9628:	da801a04 	addi	r10,sp,104
    962c:	da801e15 	stw	r10,120(sp)
    9630:	d8801e17 	ldw	r2,120(sp)
    9634:	da8019c4 	addi	r10,sp,103
    9638:	05800074 	movhi	r22,1
    963c:	05c00074 	movhi	r23,1
    9640:	da801f15 	stw	r10,124(sp)
    9644:	1295c83a 	sub	r10,r2,r10
    9648:	b5819b04 	addi	r22,r22,1644
    964c:	bdc19704 	addi	r23,r23,1628
    9650:	dec01a15 	stw	sp,104(sp)
    9654:	d8001c15 	stw	zero,112(sp)
    9658:	d8001b15 	stw	zero,108(sp)
    965c:	d8002615 	stw	zero,152(sp)
    9660:	d8002315 	stw	zero,140(sp)
    9664:	da802715 	stw	r10,156(sp)
    9668:	d811883a 	mov	r8,sp
    966c:	dd002115 	stw	r20,132(sp)
    9670:	e021883a 	mov	r16,fp
    9674:	80800007 	ldb	r2,0(r16)
    9678:	1003ea26 	beq	r2,zero,a624 <___vfiprintf_internal_r+0x1084>
    967c:	00c00944 	movi	r3,37
    9680:	8025883a 	mov	r18,r16
    9684:	10c0021e 	bne	r2,r3,9690 <___vfiprintf_internal_r+0xf0>
    9688:	00001606 	br	96e4 <___vfiprintf_internal_r+0x144>
    968c:	10c00326 	beq	r2,r3,969c <___vfiprintf_internal_r+0xfc>
    9690:	94800044 	addi	r18,r18,1
    9694:	90800007 	ldb	r2,0(r18)
    9698:	103ffc1e 	bne	r2,zero,968c <__alt_data_end+0xff00968c>
    969c:	9423c83a 	sub	r17,r18,r16
    96a0:	88001026 	beq	r17,zero,96e4 <___vfiprintf_internal_r+0x144>
    96a4:	d8c01c17 	ldw	r3,112(sp)
    96a8:	d8801b17 	ldw	r2,108(sp)
    96ac:	44000015 	stw	r16,0(r8)
    96b0:	88c7883a 	add	r3,r17,r3
    96b4:	10800044 	addi	r2,r2,1
    96b8:	44400115 	stw	r17,4(r8)
    96bc:	d8c01c15 	stw	r3,112(sp)
    96c0:	d8801b15 	stw	r2,108(sp)
    96c4:	010001c4 	movi	r4,7
    96c8:	2080760e 	bge	r4,r2,98a4 <___vfiprintf_internal_r+0x304>
    96cc:	1803821e 	bne	r3,zero,a4d8 <___vfiprintf_internal_r+0xf38>
    96d0:	da802317 	ldw	r10,140(sp)
    96d4:	d8001b15 	stw	zero,108(sp)
    96d8:	d811883a 	mov	r8,sp
    96dc:	5455883a 	add	r10,r10,r17
    96e0:	da802315 	stw	r10,140(sp)
    96e4:	90800007 	ldb	r2,0(r18)
    96e8:	10044626 	beq	r2,zero,a804 <___vfiprintf_internal_r+0x1264>
    96ec:	90c00047 	ldb	r3,1(r18)
    96f0:	94000044 	addi	r16,r18,1
    96f4:	d8001d85 	stb	zero,118(sp)
    96f8:	0009883a 	mov	r4,zero
    96fc:	000f883a 	mov	r7,zero
    9700:	027fffc4 	movi	r9,-1
    9704:	0023883a 	mov	r17,zero
    9708:	0029883a 	mov	r20,zero
    970c:	01401604 	movi	r5,88
    9710:	01800244 	movi	r6,9
    9714:	03400a84 	movi	r13,42
    9718:	03001b04 	movi	r12,108
    971c:	84000044 	addi	r16,r16,1
    9720:	18bff804 	addi	r2,r3,-32
    9724:	28827336 	bltu	r5,r2,a0f4 <___vfiprintf_internal_r+0xb54>
    9728:	100490ba 	slli	r2,r2,2
    972c:	02800074 	movhi	r10,1
    9730:	52a5d004 	addi	r10,r10,-26816
    9734:	1285883a 	add	r2,r2,r10
    9738:	10800017 	ldw	r2,0(r2)
    973c:	1000683a 	jmp	r2
    9740:	00009e28 	cmpgeui	zero,zero,632
    9744:	0000a0f4 	movhi	zero,643
    9748:	0000a0f4 	movhi	zero,643
    974c:	00009e48 	cmpgei	zero,zero,633
    9750:	0000a0f4 	movhi	zero,643
    9754:	0000a0f4 	movhi	zero,643
    9758:	0000a0f4 	movhi	zero,643
    975c:	0000a0f4 	movhi	zero,643
    9760:	0000a0f4 	movhi	zero,643
    9764:	0000a0f4 	movhi	zero,643
    9768:	0000a030 	cmpltui	zero,zero,640
    976c:	0000a04c 	andi	zero,zero,641
    9770:	0000a0f4 	movhi	zero,643
    9774:	00009934 	movhi	zero,612
    9778:	0000a05c 	xori	zero,zero,641
    977c:	0000a0f4 	movhi	zero,643
    9780:	00009e54 	movui	zero,633
    9784:	00009e60 	cmpeqi	zero,zero,633
    9788:	00009e60 	cmpeqi	zero,zero,633
    978c:	00009e60 	cmpeqi	zero,zero,633
    9790:	00009e60 	cmpeqi	zero,zero,633
    9794:	00009e60 	cmpeqi	zero,zero,633
    9798:	00009e60 	cmpeqi	zero,zero,633
    979c:	00009e60 	cmpeqi	zero,zero,633
    97a0:	00009e60 	cmpeqi	zero,zero,633
    97a4:	00009e60 	cmpeqi	zero,zero,633
    97a8:	0000a0f4 	movhi	zero,643
    97ac:	0000a0f4 	movhi	zero,643
    97b0:	0000a0f4 	movhi	zero,643
    97b4:	0000a0f4 	movhi	zero,643
    97b8:	0000a0f4 	movhi	zero,643
    97bc:	0000a0f4 	movhi	zero,643
    97c0:	0000a0f4 	movhi	zero,643
    97c4:	0000a0f4 	movhi	zero,643
    97c8:	0000a0f4 	movhi	zero,643
    97cc:	0000a0f4 	movhi	zero,643
    97d0:	00009e8c 	andi	zero,zero,634
    97d4:	0000a0f4 	movhi	zero,643
    97d8:	0000a0f4 	movhi	zero,643
    97dc:	0000a0f4 	movhi	zero,643
    97e0:	0000a0f4 	movhi	zero,643
    97e4:	0000a0f4 	movhi	zero,643
    97e8:	0000a0f4 	movhi	zero,643
    97ec:	0000a0f4 	movhi	zero,643
    97f0:	0000a0f4 	movhi	zero,643
    97f4:	0000a0f4 	movhi	zero,643
    97f8:	0000a0f4 	movhi	zero,643
    97fc:	00009ec4 	movi	zero,635
    9800:	0000a0f4 	movhi	zero,643
    9804:	0000a0f4 	movhi	zero,643
    9808:	0000a0f4 	movhi	zero,643
    980c:	0000a0f4 	movhi	zero,643
    9810:	0000a0f4 	movhi	zero,643
    9814:	00009f1c 	xori	zero,zero,636
    9818:	0000a0f4 	movhi	zero,643
    981c:	0000a0f4 	movhi	zero,643
    9820:	00009f8c 	andi	zero,zero,638
    9824:	0000a0f4 	movhi	zero,643
    9828:	0000a0f4 	movhi	zero,643
    982c:	0000a0f4 	movhi	zero,643
    9830:	0000a0f4 	movhi	zero,643
    9834:	0000a0f4 	movhi	zero,643
    9838:	0000a0f4 	movhi	zero,643
    983c:	0000a0f4 	movhi	zero,643
    9840:	0000a0f4 	movhi	zero,643
    9844:	0000a0f4 	movhi	zero,643
    9848:	0000a0f4 	movhi	zero,643
    984c:	00009d38 	rdprs	zero,zero,628
    9850:	00009d64 	muli	zero,zero,629
    9854:	0000a0f4 	movhi	zero,643
    9858:	0000a0f4 	movhi	zero,643
    985c:	0000a0f4 	movhi	zero,643
    9860:	0000a09c 	xori	zero,zero,642
    9864:	00009d64 	muli	zero,zero,629
    9868:	0000a0f4 	movhi	zero,643
    986c:	0000a0f4 	movhi	zero,643
    9870:	00009bf8 	rdprs	zero,zero,623
    9874:	0000a0f4 	movhi	zero,643
    9878:	00009c08 	cmpgei	zero,zero,624
    987c:	00009c44 	movi	zero,625
    9880:	00009940 	call	994 <init_LCD+0x60>
    9884:	00009bec 	andhi	zero,zero,623
    9888:	0000a0f4 	movhi	zero,643
    988c:	00009fc8 	cmpgei	zero,zero,639
    9890:	0000a0f4 	movhi	zero,643
    9894:	0000a020 	cmpeqi	zero,zero,640
    9898:	0000a0f4 	movhi	zero,643
    989c:	0000a0f4 	movhi	zero,643
    98a0:	00009ce4 	muli	zero,zero,627
    98a4:	42000204 	addi	r8,r8,8
    98a8:	da802317 	ldw	r10,140(sp)
    98ac:	5455883a 	add	r10,r10,r17
    98b0:	da802315 	stw	r10,140(sp)
    98b4:	003f8b06 	br	96e4 <__alt_data_end+0xff0096e4>
    98b8:	d9002017 	ldw	r4,128(sp)
    98bc:	a00b883a 	mov	r5,r20
    98c0:	0004abc0 	call	4abc <__swsetup_r>
    98c4:	1003b11e 	bne	r2,zero,a78c <___vfiprintf_internal_r+0x11ec>
    98c8:	a080030b 	ldhu	r2,12(r20)
    98cc:	00c00284 	movi	r3,10
    98d0:	1080068c 	andi	r2,r2,26
    98d4:	10ff541e 	bne	r2,r3,9628 <__alt_data_end+0xff009628>
    98d8:	a080038f 	ldh	r2,14(r20)
    98dc:	103f5216 	blt	r2,zero,9628 <__alt_data_end+0xff009628>
    98e0:	d9c02217 	ldw	r7,136(sp)
    98e4:	d9002017 	ldw	r4,128(sp)
    98e8:	e00d883a 	mov	r6,fp
    98ec:	a00b883a 	mov	r5,r20
    98f0:	000aa180 	call	aa18 <__sbprintf>
    98f4:	dfc03617 	ldw	ra,216(sp)
    98f8:	df003517 	ldw	fp,212(sp)
    98fc:	ddc03417 	ldw	r23,208(sp)
    9900:	dd803317 	ldw	r22,204(sp)
    9904:	dd403217 	ldw	r21,200(sp)
    9908:	dd003117 	ldw	r20,196(sp)
    990c:	dcc03017 	ldw	r19,192(sp)
    9910:	dc802f17 	ldw	r18,188(sp)
    9914:	dc402e17 	ldw	r17,184(sp)
    9918:	dc002d17 	ldw	r16,180(sp)
    991c:	dec03704 	addi	sp,sp,220
    9920:	f800283a 	ret
    9924:	0006a900 	call	6a90 <__sinit>
    9928:	003f2f06 	br	95e8 <__alt_data_end+0xff0095e8>
    992c:	0463c83a 	sub	r17,zero,r17
    9930:	d8802215 	stw	r2,136(sp)
    9934:	a5000114 	ori	r20,r20,4
    9938:	80c00007 	ldb	r3,0(r16)
    993c:	003f7706 	br	971c <__alt_data_end+0xff00971c>
    9940:	00800c04 	movi	r2,48
    9944:	da802217 	ldw	r10,136(sp)
    9948:	d8801d05 	stb	r2,116(sp)
    994c:	00801e04 	movi	r2,120
    9950:	d8801d45 	stb	r2,117(sp)
    9954:	d8001d85 	stb	zero,118(sp)
    9958:	50c00104 	addi	r3,r10,4
    995c:	54800017 	ldw	r18,0(r10)
    9960:	0027883a 	mov	r19,zero
    9964:	a0800094 	ori	r2,r20,2
    9968:	48030b16 	blt	r9,zero,a598 <___vfiprintf_internal_r+0xff8>
    996c:	00bfdfc4 	movi	r2,-129
    9970:	a096703a 	and	r11,r20,r2
    9974:	d8c02215 	stw	r3,136(sp)
    9978:	5d000094 	ori	r20,r11,2
    997c:	90032b1e 	bne	r18,zero,a62c <___vfiprintf_internal_r+0x108c>
    9980:	00800074 	movhi	r2,1
    9984:	10813604 	addi	r2,r2,1240
    9988:	d8802615 	stw	r2,152(sp)
    998c:	0039883a 	mov	fp,zero
    9990:	48017b1e 	bne	r9,zero,9f80 <___vfiprintf_internal_r+0x9e0>
    9994:	0013883a 	mov	r9,zero
    9998:	0027883a 	mov	r19,zero
    999c:	dd401a04 	addi	r21,sp,104
    99a0:	4825883a 	mov	r18,r9
    99a4:	4cc0010e 	bge	r9,r19,99ac <___vfiprintf_internal_r+0x40c>
    99a8:	9825883a 	mov	r18,r19
    99ac:	e7003fcc 	andi	fp,fp,255
    99b0:	e700201c 	xori	fp,fp,128
    99b4:	e73fe004 	addi	fp,fp,-128
    99b8:	e0000126 	beq	fp,zero,99c0 <___vfiprintf_internal_r+0x420>
    99bc:	94800044 	addi	r18,r18,1
    99c0:	a380008c 	andi	r14,r20,2
    99c4:	70000126 	beq	r14,zero,99cc <___vfiprintf_internal_r+0x42c>
    99c8:	94800084 	addi	r18,r18,2
    99cc:	a700210c 	andi	fp,r20,132
    99d0:	e001df1e 	bne	fp,zero,a150 <___vfiprintf_internal_r+0xbb0>
    99d4:	8c87c83a 	sub	r3,r17,r18
    99d8:	00c1dd0e 	bge	zero,r3,a150 <___vfiprintf_internal_r+0xbb0>
    99dc:	01c00404 	movi	r7,16
    99e0:	d8801c17 	ldw	r2,112(sp)
    99e4:	38c3ad0e 	bge	r7,r3,a89c <___vfiprintf_internal_r+0x12fc>
    99e8:	02800074 	movhi	r10,1
    99ec:	52819b04 	addi	r10,r10,1644
    99f0:	dc002915 	stw	r16,164(sp)
    99f4:	d9801b17 	ldw	r6,108(sp)
    99f8:	da802415 	stw	r10,144(sp)
    99fc:	03c001c4 	movi	r15,7
    9a00:	da402515 	stw	r9,148(sp)
    9a04:	db802815 	stw	r14,160(sp)
    9a08:	1821883a 	mov	r16,r3
    9a0c:	00000506 	br	9a24 <___vfiprintf_internal_r+0x484>
    9a10:	31400084 	addi	r5,r6,2
    9a14:	42000204 	addi	r8,r8,8
    9a18:	200d883a 	mov	r6,r4
    9a1c:	843ffc04 	addi	r16,r16,-16
    9a20:	3c000d0e 	bge	r7,r16,9a58 <___vfiprintf_internal_r+0x4b8>
    9a24:	10800404 	addi	r2,r2,16
    9a28:	31000044 	addi	r4,r6,1
    9a2c:	45800015 	stw	r22,0(r8)
    9a30:	41c00115 	stw	r7,4(r8)
    9a34:	d8801c15 	stw	r2,112(sp)
    9a38:	d9001b15 	stw	r4,108(sp)
    9a3c:	793ff40e 	bge	r15,r4,9a10 <__alt_data_end+0xff009a10>
    9a40:	1001b51e 	bne	r2,zero,a118 <___vfiprintf_internal_r+0xb78>
    9a44:	843ffc04 	addi	r16,r16,-16
    9a48:	000d883a 	mov	r6,zero
    9a4c:	01400044 	movi	r5,1
    9a50:	d811883a 	mov	r8,sp
    9a54:	3c3ff316 	blt	r7,r16,9a24 <__alt_data_end+0xff009a24>
    9a58:	8007883a 	mov	r3,r16
    9a5c:	da402517 	ldw	r9,148(sp)
    9a60:	db802817 	ldw	r14,160(sp)
    9a64:	dc002917 	ldw	r16,164(sp)
    9a68:	da802417 	ldw	r10,144(sp)
    9a6c:	1885883a 	add	r2,r3,r2
    9a70:	40c00115 	stw	r3,4(r8)
    9a74:	42800015 	stw	r10,0(r8)
    9a78:	d8801c15 	stw	r2,112(sp)
    9a7c:	d9401b15 	stw	r5,108(sp)
    9a80:	00c001c4 	movi	r3,7
    9a84:	19426016 	blt	r3,r5,a408 <___vfiprintf_internal_r+0xe68>
    9a88:	d8c01d87 	ldb	r3,118(sp)
    9a8c:	42000204 	addi	r8,r8,8
    9a90:	29000044 	addi	r4,r5,1
    9a94:	1801b31e 	bne	r3,zero,a164 <___vfiprintf_internal_r+0xbc4>
    9a98:	7001c026 	beq	r14,zero,a19c <___vfiprintf_internal_r+0xbfc>
    9a9c:	d8c01d04 	addi	r3,sp,116
    9aa0:	10800084 	addi	r2,r2,2
    9aa4:	40c00015 	stw	r3,0(r8)
    9aa8:	00c00084 	movi	r3,2
    9aac:	40c00115 	stw	r3,4(r8)
    9ab0:	d8801c15 	stw	r2,112(sp)
    9ab4:	d9001b15 	stw	r4,108(sp)
    9ab8:	00c001c4 	movi	r3,7
    9abc:	1902650e 	bge	r3,r4,a454 <___vfiprintf_internal_r+0xeb4>
    9ac0:	10029a1e 	bne	r2,zero,a52c <___vfiprintf_internal_r+0xf8c>
    9ac4:	00c02004 	movi	r3,128
    9ac8:	01000044 	movi	r4,1
    9acc:	000b883a 	mov	r5,zero
    9ad0:	d811883a 	mov	r8,sp
    9ad4:	e0c1b31e 	bne	fp,r3,a1a4 <___vfiprintf_internal_r+0xc04>
    9ad8:	8cb9c83a 	sub	fp,r17,r18
    9adc:	0701b10e 	bge	zero,fp,a1a4 <___vfiprintf_internal_r+0xc04>
    9ae0:	01c00404 	movi	r7,16
    9ae4:	3f03890e 	bge	r7,fp,a90c <___vfiprintf_internal_r+0x136c>
    9ae8:	00c00074 	movhi	r3,1
    9aec:	18c19704 	addi	r3,r3,1628
    9af0:	d8c02415 	stw	r3,144(sp)
    9af4:	8007883a 	mov	r3,r16
    9af8:	034001c4 	movi	r13,7
    9afc:	e021883a 	mov	r16,fp
    9b00:	da402515 	stw	r9,148(sp)
    9b04:	1839883a 	mov	fp,r3
    9b08:	00000506 	br	9b20 <___vfiprintf_internal_r+0x580>
    9b0c:	29800084 	addi	r6,r5,2
    9b10:	42000204 	addi	r8,r8,8
    9b14:	180b883a 	mov	r5,r3
    9b18:	843ffc04 	addi	r16,r16,-16
    9b1c:	3c000d0e 	bge	r7,r16,9b54 <___vfiprintf_internal_r+0x5b4>
    9b20:	10800404 	addi	r2,r2,16
    9b24:	28c00044 	addi	r3,r5,1
    9b28:	45c00015 	stw	r23,0(r8)
    9b2c:	41c00115 	stw	r7,4(r8)
    9b30:	d8801c15 	stw	r2,112(sp)
    9b34:	d8c01b15 	stw	r3,108(sp)
    9b38:	68fff40e 	bge	r13,r3,9b0c <__alt_data_end+0xff009b0c>
    9b3c:	1002241e 	bne	r2,zero,a3d0 <___vfiprintf_internal_r+0xe30>
    9b40:	843ffc04 	addi	r16,r16,-16
    9b44:	01800044 	movi	r6,1
    9b48:	000b883a 	mov	r5,zero
    9b4c:	d811883a 	mov	r8,sp
    9b50:	3c3ff316 	blt	r7,r16,9b20 <__alt_data_end+0xff009b20>
    9b54:	da402517 	ldw	r9,148(sp)
    9b58:	e007883a 	mov	r3,fp
    9b5c:	8039883a 	mov	fp,r16
    9b60:	1821883a 	mov	r16,r3
    9b64:	d8c02417 	ldw	r3,144(sp)
    9b68:	1705883a 	add	r2,r2,fp
    9b6c:	47000115 	stw	fp,4(r8)
    9b70:	40c00015 	stw	r3,0(r8)
    9b74:	d8801c15 	stw	r2,112(sp)
    9b78:	d9801b15 	stw	r6,108(sp)
    9b7c:	00c001c4 	movi	r3,7
    9b80:	19827616 	blt	r3,r6,a55c <___vfiprintf_internal_r+0xfbc>
    9b84:	4cf9c83a 	sub	fp,r9,r19
    9b88:	42000204 	addi	r8,r8,8
    9b8c:	31000044 	addi	r4,r6,1
    9b90:	300b883a 	mov	r5,r6
    9b94:	07018516 	blt	zero,fp,a1ac <___vfiprintf_internal_r+0xc0c>
    9b98:	9885883a 	add	r2,r19,r2
    9b9c:	45400015 	stw	r21,0(r8)
    9ba0:	44c00115 	stw	r19,4(r8)
    9ba4:	d8801c15 	stw	r2,112(sp)
    9ba8:	d9001b15 	stw	r4,108(sp)
    9bac:	00c001c4 	movi	r3,7
    9bb0:	1901dd0e 	bge	r3,r4,a328 <___vfiprintf_internal_r+0xd88>
    9bb4:	1002401e 	bne	r2,zero,a4b8 <___vfiprintf_internal_r+0xf18>
    9bb8:	d8001b15 	stw	zero,108(sp)
    9bbc:	a2c0010c 	andi	r11,r20,4
    9bc0:	58000226 	beq	r11,zero,9bcc <___vfiprintf_internal_r+0x62c>
    9bc4:	8ca7c83a 	sub	r19,r17,r18
    9bc8:	04c2f216 	blt	zero,r19,a794 <___vfiprintf_internal_r+0x11f4>
    9bcc:	8c80010e 	bge	r17,r18,9bd4 <___vfiprintf_internal_r+0x634>
    9bd0:	9023883a 	mov	r17,r18
    9bd4:	da802317 	ldw	r10,140(sp)
    9bd8:	5455883a 	add	r10,r10,r17
    9bdc:	da802315 	stw	r10,140(sp)
    9be0:	d8001b15 	stw	zero,108(sp)
    9be4:	d811883a 	mov	r8,sp
    9be8:	003ea206 	br	9674 <__alt_data_end+0xff009674>
    9bec:	a5000814 	ori	r20,r20,32
    9bf0:	80c00007 	ldb	r3,0(r16)
    9bf4:	003ec906 	br	971c <__alt_data_end+0xff00971c>
    9bf8:	80c00007 	ldb	r3,0(r16)
    9bfc:	1b030926 	beq	r3,r12,a824 <___vfiprintf_internal_r+0x1284>
    9c00:	a5000414 	ori	r20,r20,16
    9c04:	003ec506 	br	971c <__alt_data_end+0xff00971c>
    9c08:	21003fcc 	andi	r4,r4,255
    9c0c:	20035e1e 	bne	r4,zero,a988 <___vfiprintf_internal_r+0x13e8>
    9c10:	a080080c 	andi	r2,r20,32
    9c14:	1002a526 	beq	r2,zero,a6ac <___vfiprintf_internal_r+0x110c>
    9c18:	da802217 	ldw	r10,136(sp)
    9c1c:	50800017 	ldw	r2,0(r10)
    9c20:	da802317 	ldw	r10,140(sp)
    9c24:	5007d7fa 	srai	r3,r10,31
    9c28:	da802217 	ldw	r10,136(sp)
    9c2c:	10c00115 	stw	r3,4(r2)
    9c30:	52800104 	addi	r10,r10,4
    9c34:	da802215 	stw	r10,136(sp)
    9c38:	da802317 	ldw	r10,140(sp)
    9c3c:	12800015 	stw	r10,0(r2)
    9c40:	003e8c06 	br	9674 <__alt_data_end+0xff009674>
    9c44:	21003fcc 	andi	r4,r4,255
    9c48:	2003511e 	bne	r4,zero,a990 <___vfiprintf_internal_r+0x13f0>
    9c4c:	a080080c 	andi	r2,r20,32
    9c50:	1000a126 	beq	r2,zero,9ed8 <___vfiprintf_internal_r+0x938>
    9c54:	da802217 	ldw	r10,136(sp)
    9c58:	d8001d85 	stb	zero,118(sp)
    9c5c:	50800204 	addi	r2,r10,8
    9c60:	54800017 	ldw	r18,0(r10)
    9c64:	54c00117 	ldw	r19,4(r10)
    9c68:	4802b416 	blt	r9,zero,a73c <___vfiprintf_internal_r+0x119c>
    9c6c:	013fdfc4 	movi	r4,-129
    9c70:	94c6b03a 	or	r3,r18,r19
    9c74:	d8802215 	stw	r2,136(sp)
    9c78:	a128703a 	and	r20,r20,r4
    9c7c:	1800a226 	beq	r3,zero,9f08 <___vfiprintf_internal_r+0x968>
    9c80:	0039883a 	mov	fp,zero
    9c84:	dd401a04 	addi	r21,sp,104
    9c88:	9006d0fa 	srli	r3,r18,3
    9c8c:	9808977a 	slli	r4,r19,29
    9c90:	9826d0fa 	srli	r19,r19,3
    9c94:	948001cc 	andi	r18,r18,7
    9c98:	90800c04 	addi	r2,r18,48
    9c9c:	ad7fffc4 	addi	r21,r21,-1
    9ca0:	20e4b03a 	or	r18,r4,r3
    9ca4:	a8800005 	stb	r2,0(r21)
    9ca8:	94c6b03a 	or	r3,r18,r19
    9cac:	183ff61e 	bne	r3,zero,9c88 <__alt_data_end+0xff009c88>
    9cb0:	a0c0004c 	andi	r3,r20,1
    9cb4:	18005926 	beq	r3,zero,9e1c <___vfiprintf_internal_r+0x87c>
    9cb8:	10803fcc 	andi	r2,r2,255
    9cbc:	1080201c 	xori	r2,r2,128
    9cc0:	10bfe004 	addi	r2,r2,-128
    9cc4:	00c00c04 	movi	r3,48
    9cc8:	10c05426 	beq	r2,r3,9e1c <___vfiprintf_internal_r+0x87c>
    9ccc:	da801e17 	ldw	r10,120(sp)
    9cd0:	a8bfffc4 	addi	r2,r21,-1
    9cd4:	a8ffffc5 	stb	r3,-1(r21)
    9cd8:	50a7c83a 	sub	r19,r10,r2
    9cdc:	102b883a 	mov	r21,r2
    9ce0:	003f2f06 	br	99a0 <__alt_data_end+0xff0099a0>
    9ce4:	21003fcc 	andi	r4,r4,255
    9ce8:	2003421e 	bne	r4,zero,a9f4 <___vfiprintf_internal_r+0x1454>
    9cec:	00800074 	movhi	r2,1
    9cf0:	10813604 	addi	r2,r2,1240
    9cf4:	d8802615 	stw	r2,152(sp)
    9cf8:	a080080c 	andi	r2,r20,32
    9cfc:	1000aa26 	beq	r2,zero,9fa8 <___vfiprintf_internal_r+0xa08>
    9d00:	da802217 	ldw	r10,136(sp)
    9d04:	54800017 	ldw	r18,0(r10)
    9d08:	54c00117 	ldw	r19,4(r10)
    9d0c:	52800204 	addi	r10,r10,8
    9d10:	da802215 	stw	r10,136(sp)
    9d14:	a080004c 	andi	r2,r20,1
    9d18:	1001d226 	beq	r2,zero,a464 <___vfiprintf_internal_r+0xec4>
    9d1c:	94c4b03a 	or	r2,r18,r19
    9d20:	1002351e 	bne	r2,zero,a5f8 <___vfiprintf_internal_r+0x1058>
    9d24:	d8001d85 	stb	zero,118(sp)
    9d28:	48022216 	blt	r9,zero,a5b4 <___vfiprintf_internal_r+0x1014>
    9d2c:	00bfdfc4 	movi	r2,-129
    9d30:	a0a8703a 	and	r20,r20,r2
    9d34:	003f1506 	br	998c <__alt_data_end+0xff00998c>
    9d38:	da802217 	ldw	r10,136(sp)
    9d3c:	04800044 	movi	r18,1
    9d40:	d8001d85 	stb	zero,118(sp)
    9d44:	50800017 	ldw	r2,0(r10)
    9d48:	52800104 	addi	r10,r10,4
    9d4c:	da802215 	stw	r10,136(sp)
    9d50:	d8801005 	stb	r2,64(sp)
    9d54:	9027883a 	mov	r19,r18
    9d58:	dd401004 	addi	r21,sp,64
    9d5c:	0013883a 	mov	r9,zero
    9d60:	003f1706 	br	99c0 <__alt_data_end+0xff0099c0>
    9d64:	21003fcc 	andi	r4,r4,255
    9d68:	2003201e 	bne	r4,zero,a9ec <___vfiprintf_internal_r+0x144c>
    9d6c:	a080080c 	andi	r2,r20,32
    9d70:	10004b26 	beq	r2,zero,9ea0 <___vfiprintf_internal_r+0x900>
    9d74:	da802217 	ldw	r10,136(sp)
    9d78:	50800117 	ldw	r2,4(r10)
    9d7c:	54800017 	ldw	r18,0(r10)
    9d80:	52800204 	addi	r10,r10,8
    9d84:	da802215 	stw	r10,136(sp)
    9d88:	1027883a 	mov	r19,r2
    9d8c:	10022c16 	blt	r2,zero,a640 <___vfiprintf_internal_r+0x10a0>
    9d90:	df001d83 	ldbu	fp,118(sp)
    9d94:	48007216 	blt	r9,zero,9f60 <___vfiprintf_internal_r+0x9c0>
    9d98:	00ffdfc4 	movi	r3,-129
    9d9c:	94c4b03a 	or	r2,r18,r19
    9da0:	a0e8703a 	and	r20,r20,r3
    9da4:	1000cc26 	beq	r2,zero,a0d8 <___vfiprintf_internal_r+0xb38>
    9da8:	98021026 	beq	r19,zero,a5ec <___vfiprintf_internal_r+0x104c>
    9dac:	dc402415 	stw	r17,144(sp)
    9db0:	dc002515 	stw	r16,148(sp)
    9db4:	9823883a 	mov	r17,r19
    9db8:	9021883a 	mov	r16,r18
    9dbc:	dd401a04 	addi	r21,sp,104
    9dc0:	4825883a 	mov	r18,r9
    9dc4:	4027883a 	mov	r19,r8
    9dc8:	8009883a 	mov	r4,r16
    9dcc:	880b883a 	mov	r5,r17
    9dd0:	01800284 	movi	r6,10
    9dd4:	000f883a 	mov	r7,zero
    9dd8:	000b9800 	call	b980 <__umoddi3>
    9ddc:	10800c04 	addi	r2,r2,48
    9de0:	ad7fffc4 	addi	r21,r21,-1
    9de4:	8009883a 	mov	r4,r16
    9de8:	880b883a 	mov	r5,r17
    9dec:	a8800005 	stb	r2,0(r21)
    9df0:	01800284 	movi	r6,10
    9df4:	000f883a 	mov	r7,zero
    9df8:	000b4080 	call	b408 <__udivdi3>
    9dfc:	1021883a 	mov	r16,r2
    9e00:	10c4b03a 	or	r2,r2,r3
    9e04:	1823883a 	mov	r17,r3
    9e08:	103fef1e 	bne	r2,zero,9dc8 <__alt_data_end+0xff009dc8>
    9e0c:	dc402417 	ldw	r17,144(sp)
    9e10:	dc002517 	ldw	r16,148(sp)
    9e14:	9013883a 	mov	r9,r18
    9e18:	9811883a 	mov	r8,r19
    9e1c:	da801e17 	ldw	r10,120(sp)
    9e20:	5567c83a 	sub	r19,r10,r21
    9e24:	003ede06 	br	99a0 <__alt_data_end+0xff0099a0>
    9e28:	38803fcc 	andi	r2,r7,255
    9e2c:	1080201c 	xori	r2,r2,128
    9e30:	10bfe004 	addi	r2,r2,-128
    9e34:	1002371e 	bne	r2,zero,a714 <___vfiprintf_internal_r+0x1174>
    9e38:	01000044 	movi	r4,1
    9e3c:	01c00804 	movi	r7,32
    9e40:	80c00007 	ldb	r3,0(r16)
    9e44:	003e3506 	br	971c <__alt_data_end+0xff00971c>
    9e48:	a5000054 	ori	r20,r20,1
    9e4c:	80c00007 	ldb	r3,0(r16)
    9e50:	003e3206 	br	971c <__alt_data_end+0xff00971c>
    9e54:	a5002014 	ori	r20,r20,128
    9e58:	80c00007 	ldb	r3,0(r16)
    9e5c:	003e2f06 	br	971c <__alt_data_end+0xff00971c>
    9e60:	8015883a 	mov	r10,r16
    9e64:	0023883a 	mov	r17,zero
    9e68:	18bff404 	addi	r2,r3,-48
    9e6c:	50c00007 	ldb	r3,0(r10)
    9e70:	8c4002a4 	muli	r17,r17,10
    9e74:	84000044 	addi	r16,r16,1
    9e78:	8015883a 	mov	r10,r16
    9e7c:	1463883a 	add	r17,r2,r17
    9e80:	18bff404 	addi	r2,r3,-48
    9e84:	30bff92e 	bgeu	r6,r2,9e6c <__alt_data_end+0xff009e6c>
    9e88:	003e2506 	br	9720 <__alt_data_end+0xff009720>
    9e8c:	21003fcc 	andi	r4,r4,255
    9e90:	2002d41e 	bne	r4,zero,a9e4 <___vfiprintf_internal_r+0x1444>
    9e94:	a5000414 	ori	r20,r20,16
    9e98:	a080080c 	andi	r2,r20,32
    9e9c:	103fb51e 	bne	r2,zero,9d74 <__alt_data_end+0xff009d74>
    9ea0:	a080040c 	andi	r2,r20,16
    9ea4:	1001f826 	beq	r2,zero,a688 <___vfiprintf_internal_r+0x10e8>
    9ea8:	da802217 	ldw	r10,136(sp)
    9eac:	54800017 	ldw	r18,0(r10)
    9eb0:	52800104 	addi	r10,r10,4
    9eb4:	da802215 	stw	r10,136(sp)
    9eb8:	9027d7fa 	srai	r19,r18,31
    9ebc:	9805883a 	mov	r2,r19
    9ec0:	003fb206 	br	9d8c <__alt_data_end+0xff009d8c>
    9ec4:	21003fcc 	andi	r4,r4,255
    9ec8:	2002c41e 	bne	r4,zero,a9dc <___vfiprintf_internal_r+0x143c>
    9ecc:	a5000414 	ori	r20,r20,16
    9ed0:	a080080c 	andi	r2,r20,32
    9ed4:	103f5f1e 	bne	r2,zero,9c54 <__alt_data_end+0xff009c54>
    9ed8:	a080040c 	andi	r2,r20,16
    9edc:	10020f26 	beq	r2,zero,a71c <___vfiprintf_internal_r+0x117c>
    9ee0:	da802217 	ldw	r10,136(sp)
    9ee4:	d8001d85 	stb	zero,118(sp)
    9ee8:	0027883a 	mov	r19,zero
    9eec:	50800104 	addi	r2,r10,4
    9ef0:	54800017 	ldw	r18,0(r10)
    9ef4:	48021116 	blt	r9,zero,a73c <___vfiprintf_internal_r+0x119c>
    9ef8:	00ffdfc4 	movi	r3,-129
    9efc:	d8802215 	stw	r2,136(sp)
    9f00:	a0e8703a 	and	r20,r20,r3
    9f04:	903f5e1e 	bne	r18,zero,9c80 <__alt_data_end+0xff009c80>
    9f08:	0039883a 	mov	fp,zero
    9f0c:	4802a626 	beq	r9,zero,a9a8 <___vfiprintf_internal_r+0x1408>
    9f10:	0025883a 	mov	r18,zero
    9f14:	0027883a 	mov	r19,zero
    9f18:	003f5a06 	br	9c84 <__alt_data_end+0xff009c84>
    9f1c:	21003fcc 	andi	r4,r4,255
    9f20:	20029f1e 	bne	r4,zero,a9a0 <___vfiprintf_internal_r+0x1400>
    9f24:	a5000414 	ori	r20,r20,16
    9f28:	a080080c 	andi	r2,r20,32
    9f2c:	10005e1e 	bne	r2,zero,a0a8 <___vfiprintf_internal_r+0xb08>
    9f30:	a080040c 	andi	r2,r20,16
    9f34:	1001a21e 	bne	r2,zero,a5c0 <___vfiprintf_internal_r+0x1020>
    9f38:	a080100c 	andi	r2,r20,64
    9f3c:	d8001d85 	stb	zero,118(sp)
    9f40:	da802217 	ldw	r10,136(sp)
    9f44:	1002231e 	bne	r2,zero,a7d4 <___vfiprintf_internal_r+0x1234>
    9f48:	50800104 	addi	r2,r10,4
    9f4c:	54800017 	ldw	r18,0(r10)
    9f50:	0027883a 	mov	r19,zero
    9f54:	4801a00e 	bge	r9,zero,a5d8 <___vfiprintf_internal_r+0x1038>
    9f58:	d8802215 	stw	r2,136(sp)
    9f5c:	0039883a 	mov	fp,zero
    9f60:	94c4b03a 	or	r2,r18,r19
    9f64:	103f901e 	bne	r2,zero,9da8 <__alt_data_end+0xff009da8>
    9f68:	00800044 	movi	r2,1
    9f6c:	10803fcc 	andi	r2,r2,255
    9f70:	00c00044 	movi	r3,1
    9f74:	10c05926 	beq	r2,r3,a0dc <___vfiprintf_internal_r+0xb3c>
    9f78:	00c00084 	movi	r3,2
    9f7c:	10ffe41e 	bne	r2,r3,9f10 <__alt_data_end+0xff009f10>
    9f80:	0025883a 	mov	r18,zero
    9f84:	0027883a 	mov	r19,zero
    9f88:	00013d06 	br	a480 <___vfiprintf_internal_r+0xee0>
    9f8c:	21003fcc 	andi	r4,r4,255
    9f90:	2002811e 	bne	r4,zero,a998 <___vfiprintf_internal_r+0x13f8>
    9f94:	00800074 	movhi	r2,1
    9f98:	10813104 	addi	r2,r2,1220
    9f9c:	d8802615 	stw	r2,152(sp)
    9fa0:	a080080c 	andi	r2,r20,32
    9fa4:	103f561e 	bne	r2,zero,9d00 <__alt_data_end+0xff009d00>
    9fa8:	a080040c 	andi	r2,r20,16
    9fac:	1001d126 	beq	r2,zero,a6f4 <___vfiprintf_internal_r+0x1154>
    9fb0:	da802217 	ldw	r10,136(sp)
    9fb4:	0027883a 	mov	r19,zero
    9fb8:	54800017 	ldw	r18,0(r10)
    9fbc:	52800104 	addi	r10,r10,4
    9fc0:	da802215 	stw	r10,136(sp)
    9fc4:	003f5306 	br	9d14 <__alt_data_end+0xff009d14>
    9fc8:	da802217 	ldw	r10,136(sp)
    9fcc:	d8001d85 	stb	zero,118(sp)
    9fd0:	55400017 	ldw	r21,0(r10)
    9fd4:	50c00104 	addi	r3,r10,4
    9fd8:	a8024226 	beq	r21,zero,a8e4 <___vfiprintf_internal_r+0x1344>
    9fdc:	48021816 	blt	r9,zero,a840 <___vfiprintf_internal_r+0x12a0>
    9fe0:	480d883a 	mov	r6,r9
    9fe4:	000b883a 	mov	r5,zero
    9fe8:	a809883a 	mov	r4,r21
    9fec:	d8c02a15 	stw	r3,168(sp)
    9ff0:	da002b15 	stw	r8,172(sp)
    9ff4:	da402c15 	stw	r9,176(sp)
    9ff8:	00077f00 	call	77f0 <memchr>
    9ffc:	d8c02a17 	ldw	r3,168(sp)
    a000:	da002b17 	ldw	r8,172(sp)
    a004:	da402c17 	ldw	r9,176(sp)
    a008:	10024826 	beq	r2,zero,a92c <___vfiprintf_internal_r+0x138c>
    a00c:	1567c83a 	sub	r19,r2,r21
    a010:	df001d83 	ldbu	fp,118(sp)
    a014:	d8c02215 	stw	r3,136(sp)
    a018:	0013883a 	mov	r9,zero
    a01c:	003e6006 	br	99a0 <__alt_data_end+0xff0099a0>
    a020:	21003fcc 	andi	r4,r4,255
    a024:	203fc026 	beq	r4,zero,9f28 <__alt_data_end+0xff009f28>
    a028:	d9c01d85 	stb	r7,118(sp)
    a02c:	003fbe06 	br	9f28 <__alt_data_end+0xff009f28>
    a030:	da802217 	ldw	r10,136(sp)
    a034:	54400017 	ldw	r17,0(r10)
    a038:	50800104 	addi	r2,r10,4
    a03c:	883e3b16 	blt	r17,zero,992c <__alt_data_end+0xff00992c>
    a040:	d8802215 	stw	r2,136(sp)
    a044:	80c00007 	ldb	r3,0(r16)
    a048:	003db406 	br	971c <__alt_data_end+0xff00971c>
    a04c:	01000044 	movi	r4,1
    a050:	01c00ac4 	movi	r7,43
    a054:	80c00007 	ldb	r3,0(r16)
    a058:	003db006 	br	971c <__alt_data_end+0xff00971c>
    a05c:	80c00007 	ldb	r3,0(r16)
    a060:	82800044 	addi	r10,r16,1
    a064:	1b423c26 	beq	r3,r13,a958 <___vfiprintf_internal_r+0x13b8>
    a068:	18bff404 	addi	r2,r3,-48
    a06c:	0013883a 	mov	r9,zero
    a070:	30822b36 	bltu	r6,r2,a920 <___vfiprintf_internal_r+0x1380>
    a074:	50c00007 	ldb	r3,0(r10)
    a078:	4a4002a4 	muli	r9,r9,10
    a07c:	54000044 	addi	r16,r10,1
    a080:	8015883a 	mov	r10,r16
    a084:	4893883a 	add	r9,r9,r2
    a088:	18bff404 	addi	r2,r3,-48
    a08c:	30bff92e 	bgeu	r6,r2,a074 <__alt_data_end+0xff00a074>
    a090:	483da30e 	bge	r9,zero,9720 <__alt_data_end+0xff009720>
    a094:	027fffc4 	movi	r9,-1
    a098:	003da106 	br	9720 <__alt_data_end+0xff009720>
    a09c:	a5001014 	ori	r20,r20,64
    a0a0:	80c00007 	ldb	r3,0(r16)
    a0a4:	003d9d06 	br	971c <__alt_data_end+0xff00971c>
    a0a8:	da802217 	ldw	r10,136(sp)
    a0ac:	d8001d85 	stb	zero,118(sp)
    a0b0:	50c00204 	addi	r3,r10,8
    a0b4:	54800017 	ldw	r18,0(r10)
    a0b8:	54c00117 	ldw	r19,4(r10)
    a0bc:	4801ca16 	blt	r9,zero,a7e8 <___vfiprintf_internal_r+0x1248>
    a0c0:	013fdfc4 	movi	r4,-129
    a0c4:	94c4b03a 	or	r2,r18,r19
    a0c8:	d8c02215 	stw	r3,136(sp)
    a0cc:	a128703a 	and	r20,r20,r4
    a0d0:	0039883a 	mov	fp,zero
    a0d4:	103f341e 	bne	r2,zero,9da8 <__alt_data_end+0xff009da8>
    a0d8:	483e2e26 	beq	r9,zero,9994 <__alt_data_end+0xff009994>
    a0dc:	0025883a 	mov	r18,zero
    a0e0:	94800c04 	addi	r18,r18,48
    a0e4:	dc8019c5 	stb	r18,103(sp)
    a0e8:	dcc02717 	ldw	r19,156(sp)
    a0ec:	dd4019c4 	addi	r21,sp,103
    a0f0:	003e2b06 	br	99a0 <__alt_data_end+0xff0099a0>
    a0f4:	21003fcc 	andi	r4,r4,255
    a0f8:	2002361e 	bne	r4,zero,a9d4 <___vfiprintf_internal_r+0x1434>
    a0fc:	1801c126 	beq	r3,zero,a804 <___vfiprintf_internal_r+0x1264>
    a100:	04800044 	movi	r18,1
    a104:	d8c01005 	stb	r3,64(sp)
    a108:	d8001d85 	stb	zero,118(sp)
    a10c:	9027883a 	mov	r19,r18
    a110:	dd401004 	addi	r21,sp,64
    a114:	003f1106 	br	9d5c <__alt_data_end+0xff009d5c>
    a118:	d9402117 	ldw	r5,132(sp)
    a11c:	d9002017 	ldw	r4,128(sp)
    a120:	d9801a04 	addi	r6,sp,104
    a124:	d9c02b15 	stw	r7,172(sp)
    a128:	dbc02a15 	stw	r15,168(sp)
    a12c:	000948c0 	call	948c <__sprint_r.part.0>
    a130:	d9c02b17 	ldw	r7,172(sp)
    a134:	dbc02a17 	ldw	r15,168(sp)
    a138:	10006d1e 	bne	r2,zero,a2f0 <___vfiprintf_internal_r+0xd50>
    a13c:	d9801b17 	ldw	r6,108(sp)
    a140:	d8801c17 	ldw	r2,112(sp)
    a144:	d811883a 	mov	r8,sp
    a148:	31400044 	addi	r5,r6,1
    a14c:	003e3306 	br	9a1c <__alt_data_end+0xff009a1c>
    a150:	d9401b17 	ldw	r5,108(sp)
    a154:	d8801c17 	ldw	r2,112(sp)
    a158:	29000044 	addi	r4,r5,1
    a15c:	d8c01d87 	ldb	r3,118(sp)
    a160:	183e4d26 	beq	r3,zero,9a98 <__alt_data_end+0xff009a98>
    a164:	00c00044 	movi	r3,1
    a168:	d9401d84 	addi	r5,sp,118
    a16c:	10c5883a 	add	r2,r2,r3
    a170:	41400015 	stw	r5,0(r8)
    a174:	40c00115 	stw	r3,4(r8)
    a178:	d8801c15 	stw	r2,112(sp)
    a17c:	d9001b15 	stw	r4,108(sp)
    a180:	014001c4 	movi	r5,7
    a184:	2900a90e 	bge	r5,r4,a42c <___vfiprintf_internal_r+0xe8c>
    a188:	1000da1e 	bne	r2,zero,a4f4 <___vfiprintf_internal_r+0xf54>
    a18c:	7000ab1e 	bne	r14,zero,a43c <___vfiprintf_internal_r+0xe9c>
    a190:	000b883a 	mov	r5,zero
    a194:	1809883a 	mov	r4,r3
    a198:	d811883a 	mov	r8,sp
    a19c:	00c02004 	movi	r3,128
    a1a0:	e0fe4d26 	beq	fp,r3,9ad8 <__alt_data_end+0xff009ad8>
    a1a4:	4cf9c83a 	sub	fp,r9,r19
    a1a8:	073e7b0e 	bge	zero,fp,9b98 <__alt_data_end+0xff009b98>
    a1ac:	01c00404 	movi	r7,16
    a1b0:	3f01900e 	bge	r7,fp,a7f4 <___vfiprintf_internal_r+0x1254>
    a1b4:	00c00074 	movhi	r3,1
    a1b8:	18c19704 	addi	r3,r3,1628
    a1bc:	d8c02415 	stw	r3,144(sp)
    a1c0:	034001c4 	movi	r13,7
    a1c4:	00000506 	br	a1dc <___vfiprintf_internal_r+0xc3c>
    a1c8:	29000084 	addi	r4,r5,2
    a1cc:	42000204 	addi	r8,r8,8
    a1d0:	180b883a 	mov	r5,r3
    a1d4:	e73ffc04 	addi	fp,fp,-16
    a1d8:	3f000d0e 	bge	r7,fp,a210 <___vfiprintf_internal_r+0xc70>
    a1dc:	10800404 	addi	r2,r2,16
    a1e0:	28c00044 	addi	r3,r5,1
    a1e4:	45c00015 	stw	r23,0(r8)
    a1e8:	41c00115 	stw	r7,4(r8)
    a1ec:	d8801c15 	stw	r2,112(sp)
    a1f0:	d8c01b15 	stw	r3,108(sp)
    a1f4:	68fff40e 	bge	r13,r3,a1c8 <__alt_data_end+0xff00a1c8>
    a1f8:	1000101e 	bne	r2,zero,a23c <___vfiprintf_internal_r+0xc9c>
    a1fc:	e73ffc04 	addi	fp,fp,-16
    a200:	01000044 	movi	r4,1
    a204:	000b883a 	mov	r5,zero
    a208:	d811883a 	mov	r8,sp
    a20c:	3f3ff316 	blt	r7,fp,a1dc <__alt_data_end+0xff00a1dc>
    a210:	da802417 	ldw	r10,144(sp)
    a214:	1705883a 	add	r2,r2,fp
    a218:	47000115 	stw	fp,4(r8)
    a21c:	42800015 	stw	r10,0(r8)
    a220:	d8801c15 	stw	r2,112(sp)
    a224:	d9001b15 	stw	r4,108(sp)
    a228:	00c001c4 	movi	r3,7
    a22c:	19003616 	blt	r3,r4,a308 <___vfiprintf_internal_r+0xd68>
    a230:	42000204 	addi	r8,r8,8
    a234:	21000044 	addi	r4,r4,1
    a238:	003e5706 	br	9b98 <__alt_data_end+0xff009b98>
    a23c:	d9402117 	ldw	r5,132(sp)
    a240:	d9002017 	ldw	r4,128(sp)
    a244:	d9801a04 	addi	r6,sp,104
    a248:	d9c02b15 	stw	r7,172(sp)
    a24c:	db402a15 	stw	r13,168(sp)
    a250:	000948c0 	call	948c <__sprint_r.part.0>
    a254:	d9c02b17 	ldw	r7,172(sp)
    a258:	db402a17 	ldw	r13,168(sp)
    a25c:	1000241e 	bne	r2,zero,a2f0 <___vfiprintf_internal_r+0xd50>
    a260:	d9401b17 	ldw	r5,108(sp)
    a264:	d8801c17 	ldw	r2,112(sp)
    a268:	d811883a 	mov	r8,sp
    a26c:	29000044 	addi	r4,r5,1
    a270:	003fd806 	br	a1d4 <__alt_data_end+0xff00a1d4>
    a274:	d9401b17 	ldw	r5,108(sp)
    a278:	00c00074 	movhi	r3,1
    a27c:	18c19b04 	addi	r3,r3,1644
    a280:	d8c02415 	stw	r3,144(sp)
    a284:	29400044 	addi	r5,r5,1
    a288:	d8c02417 	ldw	r3,144(sp)
    a28c:	14c5883a 	add	r2,r2,r19
    a290:	44c00115 	stw	r19,4(r8)
    a294:	40c00015 	stw	r3,0(r8)
    a298:	d8801c15 	stw	r2,112(sp)
    a29c:	d9401b15 	stw	r5,108(sp)
    a2a0:	00c001c4 	movi	r3,7
    a2a4:	1940070e 	bge	r3,r5,a2c4 <___vfiprintf_internal_r+0xd24>
    a2a8:	103e4826 	beq	r2,zero,9bcc <__alt_data_end+0xff009bcc>
    a2ac:	d9402117 	ldw	r5,132(sp)
    a2b0:	d9002017 	ldw	r4,128(sp)
    a2b4:	d9801a04 	addi	r6,sp,104
    a2b8:	000948c0 	call	948c <__sprint_r.part.0>
    a2bc:	10000c1e 	bne	r2,zero,a2f0 <___vfiprintf_internal_r+0xd50>
    a2c0:	d8801c17 	ldw	r2,112(sp)
    a2c4:	8c80010e 	bge	r17,r18,a2cc <___vfiprintf_internal_r+0xd2c>
    a2c8:	9023883a 	mov	r17,r18
    a2cc:	da802317 	ldw	r10,140(sp)
    a2d0:	5455883a 	add	r10,r10,r17
    a2d4:	da802315 	stw	r10,140(sp)
    a2d8:	103e4126 	beq	r2,zero,9be0 <__alt_data_end+0xff009be0>
    a2dc:	d9402117 	ldw	r5,132(sp)
    a2e0:	d9002017 	ldw	r4,128(sp)
    a2e4:	d9801a04 	addi	r6,sp,104
    a2e8:	000948c0 	call	948c <__sprint_r.part.0>
    a2ec:	103e3c26 	beq	r2,zero,9be0 <__alt_data_end+0xff009be0>
    a2f0:	dd002117 	ldw	r20,132(sp)
    a2f4:	a080030b 	ldhu	r2,12(r20)
    a2f8:	1080100c 	andi	r2,r2,64
    a2fc:	1001231e 	bne	r2,zero,a78c <___vfiprintf_internal_r+0x11ec>
    a300:	d8802317 	ldw	r2,140(sp)
    a304:	003d7b06 	br	98f4 <__alt_data_end+0xff0098f4>
    a308:	1000991e 	bne	r2,zero,a570 <___vfiprintf_internal_r+0xfd0>
    a30c:	00c00044 	movi	r3,1
    a310:	9805883a 	mov	r2,r19
    a314:	dd400015 	stw	r21,0(sp)
    a318:	dcc00115 	stw	r19,4(sp)
    a31c:	dcc01c15 	stw	r19,112(sp)
    a320:	d8c01b15 	stw	r3,108(sp)
    a324:	d811883a 	mov	r8,sp
    a328:	42000204 	addi	r8,r8,8
    a32c:	a2c0010c 	andi	r11,r20,4
    a330:	583fe426 	beq	r11,zero,a2c4 <__alt_data_end+0xff00a2c4>
    a334:	8ca7c83a 	sub	r19,r17,r18
    a338:	04ffe20e 	bge	zero,r19,a2c4 <__alt_data_end+0xff00a2c4>
    a33c:	01c00404 	movi	r7,16
    a340:	3cffcc0e 	bge	r7,r19,a274 <__alt_data_end+0xff00a274>
    a344:	02800074 	movhi	r10,1
    a348:	52819b04 	addi	r10,r10,1644
    a34c:	d9001b17 	ldw	r4,108(sp)
    a350:	da802415 	stw	r10,144(sp)
    a354:	382b883a 	mov	r21,r7
    a358:	050001c4 	movi	r20,7
    a35c:	df002017 	ldw	fp,128(sp)
    a360:	00000506 	br	a378 <___vfiprintf_internal_r+0xdd8>
    a364:	21400084 	addi	r5,r4,2
    a368:	42000204 	addi	r8,r8,8
    a36c:	1809883a 	mov	r4,r3
    a370:	9cfffc04 	addi	r19,r19,-16
    a374:	acffc40e 	bge	r21,r19,a288 <__alt_data_end+0xff00a288>
    a378:	10800404 	addi	r2,r2,16
    a37c:	20c00044 	addi	r3,r4,1
    a380:	45800015 	stw	r22,0(r8)
    a384:	45400115 	stw	r21,4(r8)
    a388:	d8801c15 	stw	r2,112(sp)
    a38c:	d8c01b15 	stw	r3,108(sp)
    a390:	a0fff40e 	bge	r20,r3,a364 <__alt_data_end+0xff00a364>
    a394:	1000041e 	bne	r2,zero,a3a8 <___vfiprintf_internal_r+0xe08>
    a398:	01400044 	movi	r5,1
    a39c:	0009883a 	mov	r4,zero
    a3a0:	d811883a 	mov	r8,sp
    a3a4:	003ff206 	br	a370 <__alt_data_end+0xff00a370>
    a3a8:	d9402117 	ldw	r5,132(sp)
    a3ac:	d9801a04 	addi	r6,sp,104
    a3b0:	e009883a 	mov	r4,fp
    a3b4:	000948c0 	call	948c <__sprint_r.part.0>
    a3b8:	103fcd1e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a3bc:	d9001b17 	ldw	r4,108(sp)
    a3c0:	d8801c17 	ldw	r2,112(sp)
    a3c4:	d811883a 	mov	r8,sp
    a3c8:	21400044 	addi	r5,r4,1
    a3cc:	003fe806 	br	a370 <__alt_data_end+0xff00a370>
    a3d0:	d9402117 	ldw	r5,132(sp)
    a3d4:	d9002017 	ldw	r4,128(sp)
    a3d8:	d9801a04 	addi	r6,sp,104
    a3dc:	d9c02b15 	stw	r7,172(sp)
    a3e0:	db402a15 	stw	r13,168(sp)
    a3e4:	000948c0 	call	948c <__sprint_r.part.0>
    a3e8:	d9c02b17 	ldw	r7,172(sp)
    a3ec:	db402a17 	ldw	r13,168(sp)
    a3f0:	103fbf1e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a3f4:	d9401b17 	ldw	r5,108(sp)
    a3f8:	d8801c17 	ldw	r2,112(sp)
    a3fc:	d811883a 	mov	r8,sp
    a400:	29800044 	addi	r6,r5,1
    a404:	003dc406 	br	9b18 <__alt_data_end+0xff009b18>
    a408:	1000d21e 	bne	r2,zero,a754 <___vfiprintf_internal_r+0x11b4>
    a40c:	d8c01d87 	ldb	r3,118(sp)
    a410:	18009526 	beq	r3,zero,a668 <___vfiprintf_internal_r+0x10c8>
    a414:	00800044 	movi	r2,1
    a418:	d8c01d84 	addi	r3,sp,118
    a41c:	1009883a 	mov	r4,r2
    a420:	d8c00015 	stw	r3,0(sp)
    a424:	d8800115 	stw	r2,4(sp)
    a428:	d811883a 	mov	r8,sp
    a42c:	200b883a 	mov	r5,r4
    a430:	42000204 	addi	r8,r8,8
    a434:	21000044 	addi	r4,r4,1
    a438:	003d9706 	br	9a98 <__alt_data_end+0xff009a98>
    a43c:	d9001d04 	addi	r4,sp,116
    a440:	00800084 	movi	r2,2
    a444:	d9000015 	stw	r4,0(sp)
    a448:	d8800115 	stw	r2,4(sp)
    a44c:	1809883a 	mov	r4,r3
    a450:	d811883a 	mov	r8,sp
    a454:	200b883a 	mov	r5,r4
    a458:	42000204 	addi	r8,r8,8
    a45c:	21000044 	addi	r4,r4,1
    a460:	003f4e06 	br	a19c <__alt_data_end+0xff00a19c>
    a464:	d8001d85 	stb	zero,118(sp)
    a468:	48005016 	blt	r9,zero,a5ac <___vfiprintf_internal_r+0x100c>
    a46c:	00ffdfc4 	movi	r3,-129
    a470:	94c4b03a 	or	r2,r18,r19
    a474:	a0e8703a 	and	r20,r20,r3
    a478:	103d4426 	beq	r2,zero,998c <__alt_data_end+0xff00998c>
    a47c:	0039883a 	mov	fp,zero
    a480:	d9002617 	ldw	r4,152(sp)
    a484:	dd401a04 	addi	r21,sp,104
    a488:	908003cc 	andi	r2,r18,15
    a48c:	9806973a 	slli	r3,r19,28
    a490:	2085883a 	add	r2,r4,r2
    a494:	9024d13a 	srli	r18,r18,4
    a498:	10800003 	ldbu	r2,0(r2)
    a49c:	9826d13a 	srli	r19,r19,4
    a4a0:	ad7fffc4 	addi	r21,r21,-1
    a4a4:	1ca4b03a 	or	r18,r3,r18
    a4a8:	a8800005 	stb	r2,0(r21)
    a4ac:	94c4b03a 	or	r2,r18,r19
    a4b0:	103ff51e 	bne	r2,zero,a488 <__alt_data_end+0xff00a488>
    a4b4:	003e5906 	br	9e1c <__alt_data_end+0xff009e1c>
    a4b8:	d9402117 	ldw	r5,132(sp)
    a4bc:	d9002017 	ldw	r4,128(sp)
    a4c0:	d9801a04 	addi	r6,sp,104
    a4c4:	000948c0 	call	948c <__sprint_r.part.0>
    a4c8:	103f891e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a4cc:	d8801c17 	ldw	r2,112(sp)
    a4d0:	d811883a 	mov	r8,sp
    a4d4:	003f9506 	br	a32c <__alt_data_end+0xff00a32c>
    a4d8:	d9402117 	ldw	r5,132(sp)
    a4dc:	d9002017 	ldw	r4,128(sp)
    a4e0:	d9801a04 	addi	r6,sp,104
    a4e4:	000948c0 	call	948c <__sprint_r.part.0>
    a4e8:	103f811e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a4ec:	d811883a 	mov	r8,sp
    a4f0:	003ced06 	br	98a8 <__alt_data_end+0xff0098a8>
    a4f4:	d9402117 	ldw	r5,132(sp)
    a4f8:	d9002017 	ldw	r4,128(sp)
    a4fc:	d9801a04 	addi	r6,sp,104
    a500:	da402c15 	stw	r9,176(sp)
    a504:	db802a15 	stw	r14,168(sp)
    a508:	000948c0 	call	948c <__sprint_r.part.0>
    a50c:	da402c17 	ldw	r9,176(sp)
    a510:	db802a17 	ldw	r14,168(sp)
    a514:	103f761e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a518:	d9401b17 	ldw	r5,108(sp)
    a51c:	d8801c17 	ldw	r2,112(sp)
    a520:	d811883a 	mov	r8,sp
    a524:	29000044 	addi	r4,r5,1
    a528:	003d5b06 	br	9a98 <__alt_data_end+0xff009a98>
    a52c:	d9402117 	ldw	r5,132(sp)
    a530:	d9002017 	ldw	r4,128(sp)
    a534:	d9801a04 	addi	r6,sp,104
    a538:	da402c15 	stw	r9,176(sp)
    a53c:	000948c0 	call	948c <__sprint_r.part.0>
    a540:	da402c17 	ldw	r9,176(sp)
    a544:	103f6a1e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a548:	d9401b17 	ldw	r5,108(sp)
    a54c:	d8801c17 	ldw	r2,112(sp)
    a550:	d811883a 	mov	r8,sp
    a554:	29000044 	addi	r4,r5,1
    a558:	003f1006 	br	a19c <__alt_data_end+0xff00a19c>
    a55c:	1000c31e 	bne	r2,zero,a86c <___vfiprintf_internal_r+0x12cc>
    a560:	01000044 	movi	r4,1
    a564:	000b883a 	mov	r5,zero
    a568:	d811883a 	mov	r8,sp
    a56c:	003f0d06 	br	a1a4 <__alt_data_end+0xff00a1a4>
    a570:	d9402117 	ldw	r5,132(sp)
    a574:	d9002017 	ldw	r4,128(sp)
    a578:	d9801a04 	addi	r6,sp,104
    a57c:	000948c0 	call	948c <__sprint_r.part.0>
    a580:	103f5b1e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a584:	d9001b17 	ldw	r4,108(sp)
    a588:	d8801c17 	ldw	r2,112(sp)
    a58c:	d811883a 	mov	r8,sp
    a590:	21000044 	addi	r4,r4,1
    a594:	003d8006 	br	9b98 <__alt_data_end+0xff009b98>
    a598:	01000074 	movhi	r4,1
    a59c:	21013604 	addi	r4,r4,1240
    a5a0:	d9002615 	stw	r4,152(sp)
    a5a4:	d8c02215 	stw	r3,136(sp)
    a5a8:	1029883a 	mov	r20,r2
    a5ac:	94c4b03a 	or	r2,r18,r19
    a5b0:	103fb21e 	bne	r2,zero,a47c <__alt_data_end+0xff00a47c>
    a5b4:	0039883a 	mov	fp,zero
    a5b8:	00800084 	movi	r2,2
    a5bc:	003e6b06 	br	9f6c <__alt_data_end+0xff009f6c>
    a5c0:	da802217 	ldw	r10,136(sp)
    a5c4:	d8001d85 	stb	zero,118(sp)
    a5c8:	0027883a 	mov	r19,zero
    a5cc:	50800104 	addi	r2,r10,4
    a5d0:	54800017 	ldw	r18,0(r10)
    a5d4:	483e6016 	blt	r9,zero,9f58 <__alt_data_end+0xff009f58>
    a5d8:	00ffdfc4 	movi	r3,-129
    a5dc:	d8802215 	stw	r2,136(sp)
    a5e0:	a0e8703a 	and	r20,r20,r3
    a5e4:	0039883a 	mov	fp,zero
    a5e8:	903ebb26 	beq	r18,zero,a0d8 <__alt_data_end+0xff00a0d8>
    a5ec:	00800244 	movi	r2,9
    a5f0:	14bdee36 	bltu	r2,r18,9dac <__alt_data_end+0xff009dac>
    a5f4:	003eba06 	br	a0e0 <__alt_data_end+0xff00a0e0>
    a5f8:	00800c04 	movi	r2,48
    a5fc:	d8c01d45 	stb	r3,117(sp)
    a600:	d8801d05 	stb	r2,116(sp)
    a604:	d8001d85 	stb	zero,118(sp)
    a608:	a0c00094 	ori	r3,r20,2
    a60c:	4800a916 	blt	r9,zero,a8b4 <___vfiprintf_internal_r+0x1314>
    a610:	00bfdfc4 	movi	r2,-129
    a614:	a096703a 	and	r11,r20,r2
    a618:	5d000094 	ori	r20,r11,2
    a61c:	0039883a 	mov	fp,zero
    a620:	003f9706 	br	a480 <__alt_data_end+0xff00a480>
    a624:	8025883a 	mov	r18,r16
    a628:	003c2e06 	br	96e4 <__alt_data_end+0xff0096e4>
    a62c:	00800074 	movhi	r2,1
    a630:	10813604 	addi	r2,r2,1240
    a634:	0039883a 	mov	fp,zero
    a638:	d8802615 	stw	r2,152(sp)
    a63c:	003f9006 	br	a480 <__alt_data_end+0xff00a480>
    a640:	04a5c83a 	sub	r18,zero,r18
    a644:	07000b44 	movi	fp,45
    a648:	9004c03a 	cmpne	r2,r18,zero
    a64c:	04e7c83a 	sub	r19,zero,r19
    a650:	df001d85 	stb	fp,118(sp)
    a654:	98a7c83a 	sub	r19,r19,r2
    a658:	48009f16 	blt	r9,zero,a8d8 <___vfiprintf_internal_r+0x1338>
    a65c:	00bfdfc4 	movi	r2,-129
    a660:	a0a8703a 	and	r20,r20,r2
    a664:	003dd006 	br	9da8 <__alt_data_end+0xff009da8>
    a668:	70004c26 	beq	r14,zero,a79c <___vfiprintf_internal_r+0x11fc>
    a66c:	00800084 	movi	r2,2
    a670:	d8c01d04 	addi	r3,sp,116
    a674:	d8c00015 	stw	r3,0(sp)
    a678:	d8800115 	stw	r2,4(sp)
    a67c:	01000044 	movi	r4,1
    a680:	d811883a 	mov	r8,sp
    a684:	003f7306 	br	a454 <__alt_data_end+0xff00a454>
    a688:	a080100c 	andi	r2,r20,64
    a68c:	da802217 	ldw	r10,136(sp)
    a690:	103e0626 	beq	r2,zero,9eac <__alt_data_end+0xff009eac>
    a694:	5480000f 	ldh	r18,0(r10)
    a698:	52800104 	addi	r10,r10,4
    a69c:	da802215 	stw	r10,136(sp)
    a6a0:	9027d7fa 	srai	r19,r18,31
    a6a4:	9805883a 	mov	r2,r19
    a6a8:	003db806 	br	9d8c <__alt_data_end+0xff009d8c>
    a6ac:	a080040c 	andi	r2,r20,16
    a6b0:	1000091e 	bne	r2,zero,a6d8 <___vfiprintf_internal_r+0x1138>
    a6b4:	a2c0100c 	andi	r11,r20,64
    a6b8:	58000726 	beq	r11,zero,a6d8 <___vfiprintf_internal_r+0x1138>
    a6bc:	da802217 	ldw	r10,136(sp)
    a6c0:	50800017 	ldw	r2,0(r10)
    a6c4:	52800104 	addi	r10,r10,4
    a6c8:	da802215 	stw	r10,136(sp)
    a6cc:	da802317 	ldw	r10,140(sp)
    a6d0:	1280000d 	sth	r10,0(r2)
    a6d4:	003be706 	br	9674 <__alt_data_end+0xff009674>
    a6d8:	da802217 	ldw	r10,136(sp)
    a6dc:	50800017 	ldw	r2,0(r10)
    a6e0:	52800104 	addi	r10,r10,4
    a6e4:	da802215 	stw	r10,136(sp)
    a6e8:	da802317 	ldw	r10,140(sp)
    a6ec:	12800015 	stw	r10,0(r2)
    a6f0:	003be006 	br	9674 <__alt_data_end+0xff009674>
    a6f4:	a080100c 	andi	r2,r20,64
    a6f8:	da802217 	ldw	r10,136(sp)
    a6fc:	10003026 	beq	r2,zero,a7c0 <___vfiprintf_internal_r+0x1220>
    a700:	5480000b 	ldhu	r18,0(r10)
    a704:	52800104 	addi	r10,r10,4
    a708:	0027883a 	mov	r19,zero
    a70c:	da802215 	stw	r10,136(sp)
    a710:	003d8006 	br	9d14 <__alt_data_end+0xff009d14>
    a714:	80c00007 	ldb	r3,0(r16)
    a718:	003c0006 	br	971c <__alt_data_end+0xff00971c>
    a71c:	a080100c 	andi	r2,r20,64
    a720:	d8001d85 	stb	zero,118(sp)
    a724:	da802217 	ldw	r10,136(sp)
    a728:	1000201e 	bne	r2,zero,a7ac <___vfiprintf_internal_r+0x120c>
    a72c:	50800104 	addi	r2,r10,4
    a730:	54800017 	ldw	r18,0(r10)
    a734:	0027883a 	mov	r19,zero
    a738:	483def0e 	bge	r9,zero,9ef8 <__alt_data_end+0xff009ef8>
    a73c:	94c6b03a 	or	r3,r18,r19
    a740:	d8802215 	stw	r2,136(sp)
    a744:	183d4e1e 	bne	r3,zero,9c80 <__alt_data_end+0xff009c80>
    a748:	0039883a 	mov	fp,zero
    a74c:	0005883a 	mov	r2,zero
    a750:	003e0606 	br	9f6c <__alt_data_end+0xff009f6c>
    a754:	d9402117 	ldw	r5,132(sp)
    a758:	d9002017 	ldw	r4,128(sp)
    a75c:	d9801a04 	addi	r6,sp,104
    a760:	da402c15 	stw	r9,176(sp)
    a764:	db802a15 	stw	r14,168(sp)
    a768:	000948c0 	call	948c <__sprint_r.part.0>
    a76c:	da402c17 	ldw	r9,176(sp)
    a770:	db802a17 	ldw	r14,168(sp)
    a774:	103ede1e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a778:	d9401b17 	ldw	r5,108(sp)
    a77c:	d8801c17 	ldw	r2,112(sp)
    a780:	d811883a 	mov	r8,sp
    a784:	29000044 	addi	r4,r5,1
    a788:	003e7406 	br	a15c <__alt_data_end+0xff00a15c>
    a78c:	00bfffc4 	movi	r2,-1
    a790:	003c5806 	br	98f4 <__alt_data_end+0xff0098f4>
    a794:	d811883a 	mov	r8,sp
    a798:	003ee806 	br	a33c <__alt_data_end+0xff00a33c>
    a79c:	000b883a 	mov	r5,zero
    a7a0:	01000044 	movi	r4,1
    a7a4:	d811883a 	mov	r8,sp
    a7a8:	003e7c06 	br	a19c <__alt_data_end+0xff00a19c>
    a7ac:	50800104 	addi	r2,r10,4
    a7b0:	5480000b 	ldhu	r18,0(r10)
    a7b4:	0027883a 	mov	r19,zero
    a7b8:	483dcf0e 	bge	r9,zero,9ef8 <__alt_data_end+0xff009ef8>
    a7bc:	003fdf06 	br	a73c <__alt_data_end+0xff00a73c>
    a7c0:	54800017 	ldw	r18,0(r10)
    a7c4:	52800104 	addi	r10,r10,4
    a7c8:	0027883a 	mov	r19,zero
    a7cc:	da802215 	stw	r10,136(sp)
    a7d0:	003d5006 	br	9d14 <__alt_data_end+0xff009d14>
    a7d4:	50800104 	addi	r2,r10,4
    a7d8:	5480000b 	ldhu	r18,0(r10)
    a7dc:	0027883a 	mov	r19,zero
    a7e0:	483f7d0e 	bge	r9,zero,a5d8 <__alt_data_end+0xff00a5d8>
    a7e4:	003ddc06 	br	9f58 <__alt_data_end+0xff009f58>
    a7e8:	d8c02215 	stw	r3,136(sp)
    a7ec:	0039883a 	mov	fp,zero
    a7f0:	003ddb06 	br	9f60 <__alt_data_end+0xff009f60>
    a7f4:	02800074 	movhi	r10,1
    a7f8:	52819704 	addi	r10,r10,1628
    a7fc:	da802415 	stw	r10,144(sp)
    a800:	003e8306 	br	a210 <__alt_data_end+0xff00a210>
    a804:	d8801c17 	ldw	r2,112(sp)
    a808:	dd002117 	ldw	r20,132(sp)
    a80c:	103eb926 	beq	r2,zero,a2f4 <__alt_data_end+0xff00a2f4>
    a810:	d9002017 	ldw	r4,128(sp)
    a814:	d9801a04 	addi	r6,sp,104
    a818:	a00b883a 	mov	r5,r20
    a81c:	000948c0 	call	948c <__sprint_r.part.0>
    a820:	003eb406 	br	a2f4 <__alt_data_end+0xff00a2f4>
    a824:	80c00043 	ldbu	r3,1(r16)
    a828:	a5000814 	ori	r20,r20,32
    a82c:	84000044 	addi	r16,r16,1
    a830:	18c03fcc 	andi	r3,r3,255
    a834:	18c0201c 	xori	r3,r3,128
    a838:	18ffe004 	addi	r3,r3,-128
    a83c:	003bb706 	br	971c <__alt_data_end+0xff00971c>
    a840:	a809883a 	mov	r4,r21
    a844:	d8c02a15 	stw	r3,168(sp)
    a848:	da002b15 	stw	r8,172(sp)
    a84c:	00027540 	call	2754 <strlen>
    a850:	d8c02a17 	ldw	r3,168(sp)
    a854:	1027883a 	mov	r19,r2
    a858:	df001d83 	ldbu	fp,118(sp)
    a85c:	d8c02215 	stw	r3,136(sp)
    a860:	0013883a 	mov	r9,zero
    a864:	da002b17 	ldw	r8,172(sp)
    a868:	003c4d06 	br	99a0 <__alt_data_end+0xff0099a0>
    a86c:	d9402117 	ldw	r5,132(sp)
    a870:	d9002017 	ldw	r4,128(sp)
    a874:	d9801a04 	addi	r6,sp,104
    a878:	da402c15 	stw	r9,176(sp)
    a87c:	000948c0 	call	948c <__sprint_r.part.0>
    a880:	da402c17 	ldw	r9,176(sp)
    a884:	103e9a1e 	bne	r2,zero,a2f0 <__alt_data_end+0xff00a2f0>
    a888:	d9401b17 	ldw	r5,108(sp)
    a88c:	d8801c17 	ldw	r2,112(sp)
    a890:	d811883a 	mov	r8,sp
    a894:	29000044 	addi	r4,r5,1
    a898:	003e4206 	br	a1a4 <__alt_data_end+0xff00a1a4>
    a89c:	d9401b17 	ldw	r5,108(sp)
    a8a0:	01000074 	movhi	r4,1
    a8a4:	21019b04 	addi	r4,r4,1644
    a8a8:	d9002415 	stw	r4,144(sp)
    a8ac:	29400044 	addi	r5,r5,1
    a8b0:	003c6d06 	br	9a68 <__alt_data_end+0xff009a68>
    a8b4:	0039883a 	mov	fp,zero
    a8b8:	00800084 	movi	r2,2
    a8bc:	10803fcc 	andi	r2,r2,255
    a8c0:	01000044 	movi	r4,1
    a8c4:	11001e26 	beq	r2,r4,a940 <___vfiprintf_internal_r+0x13a0>
    a8c8:	01000084 	movi	r4,2
    a8cc:	11001e1e 	bne	r2,r4,a948 <___vfiprintf_internal_r+0x13a8>
    a8d0:	1829883a 	mov	r20,r3
    a8d4:	003eea06 	br	a480 <__alt_data_end+0xff00a480>
    a8d8:	a007883a 	mov	r3,r20
    a8dc:	00800044 	movi	r2,1
    a8e0:	003ff606 	br	a8bc <__alt_data_end+0xff00a8bc>
    a8e4:	00800184 	movi	r2,6
    a8e8:	1240012e 	bgeu	r2,r9,a8f0 <___vfiprintf_internal_r+0x1350>
    a8ec:	1013883a 	mov	r9,r2
    a8f0:	4827883a 	mov	r19,r9
    a8f4:	4825883a 	mov	r18,r9
    a8f8:	48001516 	blt	r9,zero,a950 <___vfiprintf_internal_r+0x13b0>
    a8fc:	05400074 	movhi	r21,1
    a900:	d8c02215 	stw	r3,136(sp)
    a904:	ad413b04 	addi	r21,r21,1260
    a908:	003d1406 	br	9d5c <__alt_data_end+0xff009d5c>
    a90c:	02800074 	movhi	r10,1
    a910:	52819704 	addi	r10,r10,1628
    a914:	da802415 	stw	r10,144(sp)
    a918:	200d883a 	mov	r6,r4
    a91c:	003c9106 	br	9b64 <__alt_data_end+0xff009b64>
    a920:	5021883a 	mov	r16,r10
    a924:	0013883a 	mov	r9,zero
    a928:	003b7d06 	br	9720 <__alt_data_end+0xff009720>
    a92c:	4827883a 	mov	r19,r9
    a930:	df001d83 	ldbu	fp,118(sp)
    a934:	d8c02215 	stw	r3,136(sp)
    a938:	0013883a 	mov	r9,zero
    a93c:	003c1806 	br	99a0 <__alt_data_end+0xff0099a0>
    a940:	1829883a 	mov	r20,r3
    a944:	003d1806 	br	9da8 <__alt_data_end+0xff009da8>
    a948:	1829883a 	mov	r20,r3
    a94c:	003ccd06 	br	9c84 <__alt_data_end+0xff009c84>
    a950:	0025883a 	mov	r18,zero
    a954:	003fe906 	br	a8fc <__alt_data_end+0xff00a8fc>
    a958:	d8802217 	ldw	r2,136(sp)
    a95c:	80c00043 	ldbu	r3,1(r16)
    a960:	5021883a 	mov	r16,r10
    a964:	12400017 	ldw	r9,0(r2)
    a968:	10800104 	addi	r2,r2,4
    a96c:	d8802215 	stw	r2,136(sp)
    a970:	483faf0e 	bge	r9,zero,a830 <__alt_data_end+0xff00a830>
    a974:	18c03fcc 	andi	r3,r3,255
    a978:	18c0201c 	xori	r3,r3,128
    a97c:	027fffc4 	movi	r9,-1
    a980:	18ffe004 	addi	r3,r3,-128
    a984:	003b6506 	br	971c <__alt_data_end+0xff00971c>
    a988:	d9c01d85 	stb	r7,118(sp)
    a98c:	003ca006 	br	9c10 <__alt_data_end+0xff009c10>
    a990:	d9c01d85 	stb	r7,118(sp)
    a994:	003cad06 	br	9c4c <__alt_data_end+0xff009c4c>
    a998:	d9c01d85 	stb	r7,118(sp)
    a99c:	003d7d06 	br	9f94 <__alt_data_end+0xff009f94>
    a9a0:	d9c01d85 	stb	r7,118(sp)
    a9a4:	003d5f06 	br	9f24 <__alt_data_end+0xff009f24>
    a9a8:	a080004c 	andi	r2,r20,1
    a9ac:	0039883a 	mov	fp,zero
    a9b0:	10000526 	beq	r2,zero,a9c8 <___vfiprintf_internal_r+0x1428>
    a9b4:	00800c04 	movi	r2,48
    a9b8:	d88019c5 	stb	r2,103(sp)
    a9bc:	dcc02717 	ldw	r19,156(sp)
    a9c0:	dd4019c4 	addi	r21,sp,103
    a9c4:	003bf606 	br	99a0 <__alt_data_end+0xff0099a0>
    a9c8:	0027883a 	mov	r19,zero
    a9cc:	dd401a04 	addi	r21,sp,104
    a9d0:	003bf306 	br	99a0 <__alt_data_end+0xff0099a0>
    a9d4:	d9c01d85 	stb	r7,118(sp)
    a9d8:	003dc806 	br	a0fc <__alt_data_end+0xff00a0fc>
    a9dc:	d9c01d85 	stb	r7,118(sp)
    a9e0:	003d3a06 	br	9ecc <__alt_data_end+0xff009ecc>
    a9e4:	d9c01d85 	stb	r7,118(sp)
    a9e8:	003d2a06 	br	9e94 <__alt_data_end+0xff009e94>
    a9ec:	d9c01d85 	stb	r7,118(sp)
    a9f0:	003cde06 	br	9d6c <__alt_data_end+0xff009d6c>
    a9f4:	d9c01d85 	stb	r7,118(sp)
    a9f8:	003cbc06 	br	9cec <__alt_data_end+0xff009cec>

0000a9fc <__vfiprintf_internal>:
    a9fc:	00800074 	movhi	r2,1
    aa00:	10889604 	addi	r2,r2,8792
    aa04:	300f883a 	mov	r7,r6
    aa08:	280d883a 	mov	r6,r5
    aa0c:	200b883a 	mov	r5,r4
    aa10:	11000017 	ldw	r4,0(r2)
    aa14:	00095a01 	jmpi	95a0 <___vfiprintf_internal_r>

0000aa18 <__sbprintf>:
    aa18:	2880030b 	ldhu	r2,12(r5)
    aa1c:	2ac01917 	ldw	r11,100(r5)
    aa20:	2a80038b 	ldhu	r10,14(r5)
    aa24:	2a400717 	ldw	r9,28(r5)
    aa28:	2a000917 	ldw	r8,36(r5)
    aa2c:	defee204 	addi	sp,sp,-1144
    aa30:	00c10004 	movi	r3,1024
    aa34:	dc011a15 	stw	r16,1128(sp)
    aa38:	10bfff4c 	andi	r2,r2,65533
    aa3c:	2821883a 	mov	r16,r5
    aa40:	d8cb883a 	add	r5,sp,r3
    aa44:	dc811c15 	stw	r18,1136(sp)
    aa48:	dc411b15 	stw	r17,1132(sp)
    aa4c:	dfc11d15 	stw	ra,1140(sp)
    aa50:	2025883a 	mov	r18,r4
    aa54:	d881030d 	sth	r2,1036(sp)
    aa58:	dac11915 	stw	r11,1124(sp)
    aa5c:	da81038d 	sth	r10,1038(sp)
    aa60:	da410715 	stw	r9,1052(sp)
    aa64:	da010915 	stw	r8,1060(sp)
    aa68:	dec10015 	stw	sp,1024(sp)
    aa6c:	dec10415 	stw	sp,1040(sp)
    aa70:	d8c10215 	stw	r3,1032(sp)
    aa74:	d8c10515 	stw	r3,1044(sp)
    aa78:	d8010615 	stw	zero,1048(sp)
    aa7c:	00095a00 	call	95a0 <___vfiprintf_internal_r>
    aa80:	1023883a 	mov	r17,r2
    aa84:	10000416 	blt	r2,zero,aa98 <__sbprintf+0x80>
    aa88:	d9410004 	addi	r5,sp,1024
    aa8c:	9009883a 	mov	r4,r18
    aa90:	00066b40 	call	66b4 <_fflush_r>
    aa94:	10000d1e 	bne	r2,zero,aacc <__sbprintf+0xb4>
    aa98:	d881030b 	ldhu	r2,1036(sp)
    aa9c:	1080100c 	andi	r2,r2,64
    aaa0:	10000326 	beq	r2,zero,aab0 <__sbprintf+0x98>
    aaa4:	8080030b 	ldhu	r2,12(r16)
    aaa8:	10801014 	ori	r2,r2,64
    aaac:	8080030d 	sth	r2,12(r16)
    aab0:	8805883a 	mov	r2,r17
    aab4:	dfc11d17 	ldw	ra,1140(sp)
    aab8:	dc811c17 	ldw	r18,1136(sp)
    aabc:	dc411b17 	ldw	r17,1132(sp)
    aac0:	dc011a17 	ldw	r16,1128(sp)
    aac4:	dec11e04 	addi	sp,sp,1144
    aac8:	f800283a 	ret
    aacc:	047fffc4 	movi	r17,-1
    aad0:	003ff106 	br	aa98 <__alt_data_end+0xff00aa98>

0000aad4 <_write_r>:
    aad4:	defffd04 	addi	sp,sp,-12
    aad8:	2805883a 	mov	r2,r5
    aadc:	dc000015 	stw	r16,0(sp)
    aae0:	04000074 	movhi	r16,1
    aae4:	dc400115 	stw	r17,4(sp)
    aae8:	300b883a 	mov	r5,r6
    aaec:	840f6d04 	addi	r16,r16,15796
    aaf0:	2023883a 	mov	r17,r4
    aaf4:	380d883a 	mov	r6,r7
    aaf8:	1009883a 	mov	r4,r2
    aafc:	dfc00215 	stw	ra,8(sp)
    ab00:	80000015 	stw	zero,0(r16)
    ab04:	000eb800 	call	eb80 <write>
    ab08:	00ffffc4 	movi	r3,-1
    ab0c:	10c00526 	beq	r2,r3,ab24 <_write_r+0x50>
    ab10:	dfc00217 	ldw	ra,8(sp)
    ab14:	dc400117 	ldw	r17,4(sp)
    ab18:	dc000017 	ldw	r16,0(sp)
    ab1c:	dec00304 	addi	sp,sp,12
    ab20:	f800283a 	ret
    ab24:	80c00017 	ldw	r3,0(r16)
    ab28:	183ff926 	beq	r3,zero,ab10 <__alt_data_end+0xff00ab10>
    ab2c:	88c00015 	stw	r3,0(r17)
    ab30:	003ff706 	br	ab10 <__alt_data_end+0xff00ab10>

0000ab34 <_close_r>:
    ab34:	defffd04 	addi	sp,sp,-12
    ab38:	dc000015 	stw	r16,0(sp)
    ab3c:	04000074 	movhi	r16,1
    ab40:	dc400115 	stw	r17,4(sp)
    ab44:	840f6d04 	addi	r16,r16,15796
    ab48:	2023883a 	mov	r17,r4
    ab4c:	2809883a 	mov	r4,r5
    ab50:	dfc00215 	stw	ra,8(sp)
    ab54:	80000015 	stw	zero,0(r16)
    ab58:	000e6d40 	call	e6d4 <close>
    ab5c:	00ffffc4 	movi	r3,-1
    ab60:	10c00526 	beq	r2,r3,ab78 <_close_r+0x44>
    ab64:	dfc00217 	ldw	ra,8(sp)
    ab68:	dc400117 	ldw	r17,4(sp)
    ab6c:	dc000017 	ldw	r16,0(sp)
    ab70:	dec00304 	addi	sp,sp,12
    ab74:	f800283a 	ret
    ab78:	80c00017 	ldw	r3,0(r16)
    ab7c:	183ff926 	beq	r3,zero,ab64 <__alt_data_end+0xff00ab64>
    ab80:	88c00015 	stw	r3,0(r17)
    ab84:	003ff706 	br	ab64 <__alt_data_end+0xff00ab64>

0000ab88 <_calloc_r>:
    ab88:	298b383a 	mul	r5,r5,r6
    ab8c:	defffe04 	addi	sp,sp,-8
    ab90:	dfc00115 	stw	ra,4(sp)
    ab94:	dc000015 	stw	r16,0(sp)
    ab98:	0001db40 	call	1db4 <_malloc_r>
    ab9c:	10002926 	beq	r2,zero,ac44 <_calloc_r+0xbc>
    aba0:	11bfff17 	ldw	r6,-4(r2)
    aba4:	1021883a 	mov	r16,r2
    aba8:	00bfff04 	movi	r2,-4
    abac:	308c703a 	and	r6,r6,r2
    abb0:	00c00904 	movi	r3,36
    abb4:	308d883a 	add	r6,r6,r2
    abb8:	19801636 	bltu	r3,r6,ac14 <_calloc_r+0x8c>
    abbc:	008004c4 	movi	r2,19
    abc0:	11800b2e 	bgeu	r2,r6,abf0 <_calloc_r+0x68>
    abc4:	80000015 	stw	zero,0(r16)
    abc8:	80000115 	stw	zero,4(r16)
    abcc:	008006c4 	movi	r2,27
    abd0:	11801a2e 	bgeu	r2,r6,ac3c <_calloc_r+0xb4>
    abd4:	80000215 	stw	zero,8(r16)
    abd8:	80000315 	stw	zero,12(r16)
    abdc:	30c0151e 	bne	r6,r3,ac34 <_calloc_r+0xac>
    abe0:	80000415 	stw	zero,16(r16)
    abe4:	80800604 	addi	r2,r16,24
    abe8:	80000515 	stw	zero,20(r16)
    abec:	00000106 	br	abf4 <_calloc_r+0x6c>
    abf0:	8005883a 	mov	r2,r16
    abf4:	10000015 	stw	zero,0(r2)
    abf8:	10000115 	stw	zero,4(r2)
    abfc:	10000215 	stw	zero,8(r2)
    ac00:	8005883a 	mov	r2,r16
    ac04:	dfc00117 	ldw	ra,4(sp)
    ac08:	dc000017 	ldw	r16,0(sp)
    ac0c:	dec00204 	addi	sp,sp,8
    ac10:	f800283a 	ret
    ac14:	000b883a 	mov	r5,zero
    ac18:	8009883a 	mov	r4,r16
    ac1c:	0007b780 	call	7b78 <memset>
    ac20:	8005883a 	mov	r2,r16
    ac24:	dfc00117 	ldw	ra,4(sp)
    ac28:	dc000017 	ldw	r16,0(sp)
    ac2c:	dec00204 	addi	sp,sp,8
    ac30:	f800283a 	ret
    ac34:	80800404 	addi	r2,r16,16
    ac38:	003fee06 	br	abf4 <__alt_data_end+0xff00abf4>
    ac3c:	80800204 	addi	r2,r16,8
    ac40:	003fec06 	br	abf4 <__alt_data_end+0xff00abf4>
    ac44:	0005883a 	mov	r2,zero
    ac48:	003fee06 	br	ac04 <__alt_data_end+0xff00ac04>

0000ac4c <_fclose_r>:
    ac4c:	28003926 	beq	r5,zero,ad34 <_fclose_r+0xe8>
    ac50:	defffc04 	addi	sp,sp,-16
    ac54:	dc400115 	stw	r17,4(sp)
    ac58:	dc000015 	stw	r16,0(sp)
    ac5c:	dfc00315 	stw	ra,12(sp)
    ac60:	dc800215 	stw	r18,8(sp)
    ac64:	2023883a 	mov	r17,r4
    ac68:	2821883a 	mov	r16,r5
    ac6c:	20000226 	beq	r4,zero,ac78 <_fclose_r+0x2c>
    ac70:	20800e17 	ldw	r2,56(r4)
    ac74:	10002726 	beq	r2,zero,ad14 <_fclose_r+0xc8>
    ac78:	8080030f 	ldh	r2,12(r16)
    ac7c:	1000071e 	bne	r2,zero,ac9c <_fclose_r+0x50>
    ac80:	0005883a 	mov	r2,zero
    ac84:	dfc00317 	ldw	ra,12(sp)
    ac88:	dc800217 	ldw	r18,8(sp)
    ac8c:	dc400117 	ldw	r17,4(sp)
    ac90:	dc000017 	ldw	r16,0(sp)
    ac94:	dec00404 	addi	sp,sp,16
    ac98:	f800283a 	ret
    ac9c:	800b883a 	mov	r5,r16
    aca0:	8809883a 	mov	r4,r17
    aca4:	00064980 	call	6498 <__sflush_r>
    aca8:	1025883a 	mov	r18,r2
    acac:	80800b17 	ldw	r2,44(r16)
    acb0:	10000426 	beq	r2,zero,acc4 <_fclose_r+0x78>
    acb4:	81400717 	ldw	r5,28(r16)
    acb8:	8809883a 	mov	r4,r17
    acbc:	103ee83a 	callr	r2
    acc0:	10001616 	blt	r2,zero,ad1c <_fclose_r+0xd0>
    acc4:	8080030b 	ldhu	r2,12(r16)
    acc8:	1080200c 	andi	r2,r2,128
    accc:	1000151e 	bne	r2,zero,ad24 <_fclose_r+0xd8>
    acd0:	81400c17 	ldw	r5,48(r16)
    acd4:	28000526 	beq	r5,zero,acec <_fclose_r+0xa0>
    acd8:	80801004 	addi	r2,r16,64
    acdc:	28800226 	beq	r5,r2,ace8 <_fclose_r+0x9c>
    ace0:	8809883a 	mov	r4,r17
    ace4:	0006c040 	call	6c04 <_free_r>
    ace8:	80000c15 	stw	zero,48(r16)
    acec:	81401117 	ldw	r5,68(r16)
    acf0:	28000326 	beq	r5,zero,ad00 <_fclose_r+0xb4>
    acf4:	8809883a 	mov	r4,r17
    acf8:	0006c040 	call	6c04 <_free_r>
    acfc:	80001115 	stw	zero,68(r16)
    ad00:	0006aa00 	call	6aa0 <__sfp_lock_acquire>
    ad04:	8000030d 	sth	zero,12(r16)
    ad08:	0006aa40 	call	6aa4 <__sfp_lock_release>
    ad0c:	9005883a 	mov	r2,r18
    ad10:	003fdc06 	br	ac84 <__alt_data_end+0xff00ac84>
    ad14:	0006a900 	call	6a90 <__sinit>
    ad18:	003fd706 	br	ac78 <__alt_data_end+0xff00ac78>
    ad1c:	04bfffc4 	movi	r18,-1
    ad20:	003fe806 	br	acc4 <__alt_data_end+0xff00acc4>
    ad24:	81400417 	ldw	r5,16(r16)
    ad28:	8809883a 	mov	r4,r17
    ad2c:	0006c040 	call	6c04 <_free_r>
    ad30:	003fe706 	br	acd0 <__alt_data_end+0xff00acd0>
    ad34:	0005883a 	mov	r2,zero
    ad38:	f800283a 	ret

0000ad3c <fclose>:
    ad3c:	00800074 	movhi	r2,1
    ad40:	10889604 	addi	r2,r2,8792
    ad44:	200b883a 	mov	r5,r4
    ad48:	11000017 	ldw	r4,0(r2)
    ad4c:	000ac4c1 	jmpi	ac4c <_fclose_r>

0000ad50 <__fputwc>:
    ad50:	defff804 	addi	sp,sp,-32
    ad54:	dcc00415 	stw	r19,16(sp)
    ad58:	dc800315 	stw	r18,12(sp)
    ad5c:	dc000115 	stw	r16,4(sp)
    ad60:	dfc00715 	stw	ra,28(sp)
    ad64:	dd400615 	stw	r21,24(sp)
    ad68:	dd000515 	stw	r20,20(sp)
    ad6c:	dc400215 	stw	r17,8(sp)
    ad70:	2027883a 	mov	r19,r4
    ad74:	2825883a 	mov	r18,r5
    ad78:	3021883a 	mov	r16,r6
    ad7c:	00075e00 	call	75e0 <__locale_mb_cur_max>
    ad80:	00c00044 	movi	r3,1
    ad84:	10c03e26 	beq	r2,r3,ae80 <__fputwc+0x130>
    ad88:	81c01704 	addi	r7,r16,92
    ad8c:	900d883a 	mov	r6,r18
    ad90:	d80b883a 	mov	r5,sp
    ad94:	9809883a 	mov	r4,r19
    ad98:	000b2200 	call	b220 <_wcrtomb_r>
    ad9c:	1029883a 	mov	r20,r2
    ada0:	00bfffc4 	movi	r2,-1
    ada4:	a0802026 	beq	r20,r2,ae28 <__fputwc+0xd8>
    ada8:	d9400003 	ldbu	r5,0(sp)
    adac:	a0001c26 	beq	r20,zero,ae20 <__fputwc+0xd0>
    adb0:	0023883a 	mov	r17,zero
    adb4:	05400284 	movi	r21,10
    adb8:	00000906 	br	ade0 <__fputwc+0x90>
    adbc:	80800017 	ldw	r2,0(r16)
    adc0:	11400005 	stb	r5,0(r2)
    adc4:	80c00017 	ldw	r3,0(r16)
    adc8:	18c00044 	addi	r3,r3,1
    adcc:	80c00015 	stw	r3,0(r16)
    add0:	8c400044 	addi	r17,r17,1
    add4:	dc45883a 	add	r2,sp,r17
    add8:	8d00112e 	bgeu	r17,r20,ae20 <__fputwc+0xd0>
    addc:	11400003 	ldbu	r5,0(r2)
    ade0:	80c00217 	ldw	r3,8(r16)
    ade4:	18ffffc4 	addi	r3,r3,-1
    ade8:	80c00215 	stw	r3,8(r16)
    adec:	183ff30e 	bge	r3,zero,adbc <__alt_data_end+0xff00adbc>
    adf0:	80800617 	ldw	r2,24(r16)
    adf4:	18801916 	blt	r3,r2,ae5c <__fputwc+0x10c>
    adf8:	80800017 	ldw	r2,0(r16)
    adfc:	11400005 	stb	r5,0(r2)
    ae00:	80800017 	ldw	r2,0(r16)
    ae04:	10c00003 	ldbu	r3,0(r2)
    ae08:	10800044 	addi	r2,r2,1
    ae0c:	1d402326 	beq	r3,r21,ae9c <__fputwc+0x14c>
    ae10:	80800015 	stw	r2,0(r16)
    ae14:	8c400044 	addi	r17,r17,1
    ae18:	dc45883a 	add	r2,sp,r17
    ae1c:	8d3fef36 	bltu	r17,r20,addc <__alt_data_end+0xff00addc>
    ae20:	9005883a 	mov	r2,r18
    ae24:	00000406 	br	ae38 <__fputwc+0xe8>
    ae28:	80c0030b 	ldhu	r3,12(r16)
    ae2c:	a005883a 	mov	r2,r20
    ae30:	18c01014 	ori	r3,r3,64
    ae34:	80c0030d 	sth	r3,12(r16)
    ae38:	dfc00717 	ldw	ra,28(sp)
    ae3c:	dd400617 	ldw	r21,24(sp)
    ae40:	dd000517 	ldw	r20,20(sp)
    ae44:	dcc00417 	ldw	r19,16(sp)
    ae48:	dc800317 	ldw	r18,12(sp)
    ae4c:	dc400217 	ldw	r17,8(sp)
    ae50:	dc000117 	ldw	r16,4(sp)
    ae54:	dec00804 	addi	sp,sp,32
    ae58:	f800283a 	ret
    ae5c:	800d883a 	mov	r6,r16
    ae60:	29403fcc 	andi	r5,r5,255
    ae64:	9809883a 	mov	r4,r19
    ae68:	000b0c80 	call	b0c8 <__swbuf_r>
    ae6c:	10bfffe0 	cmpeqi	r2,r2,-1
    ae70:	10803fcc 	andi	r2,r2,255
    ae74:	103fd626 	beq	r2,zero,add0 <__alt_data_end+0xff00add0>
    ae78:	00bfffc4 	movi	r2,-1
    ae7c:	003fee06 	br	ae38 <__alt_data_end+0xff00ae38>
    ae80:	90ffffc4 	addi	r3,r18,-1
    ae84:	01003f84 	movi	r4,254
    ae88:	20ffbf36 	bltu	r4,r3,ad88 <__alt_data_end+0xff00ad88>
    ae8c:	900b883a 	mov	r5,r18
    ae90:	dc800005 	stb	r18,0(sp)
    ae94:	1029883a 	mov	r20,r2
    ae98:	003fc506 	br	adb0 <__alt_data_end+0xff00adb0>
    ae9c:	800d883a 	mov	r6,r16
    aea0:	a80b883a 	mov	r5,r21
    aea4:	9809883a 	mov	r4,r19
    aea8:	000b0c80 	call	b0c8 <__swbuf_r>
    aeac:	10bfffe0 	cmpeqi	r2,r2,-1
    aeb0:	003fef06 	br	ae70 <__alt_data_end+0xff00ae70>

0000aeb4 <_fputwc_r>:
    aeb4:	3080030b 	ldhu	r2,12(r6)
    aeb8:	10c8000c 	andi	r3,r2,8192
    aebc:	1800051e 	bne	r3,zero,aed4 <_fputwc_r+0x20>
    aec0:	30c01917 	ldw	r3,100(r6)
    aec4:	10880014 	ori	r2,r2,8192
    aec8:	3080030d 	sth	r2,12(r6)
    aecc:	18880014 	ori	r2,r3,8192
    aed0:	30801915 	stw	r2,100(r6)
    aed4:	000ad501 	jmpi	ad50 <__fputwc>

0000aed8 <fputwc>:
    aed8:	00800074 	movhi	r2,1
    aedc:	defffc04 	addi	sp,sp,-16
    aee0:	10889604 	addi	r2,r2,8792
    aee4:	dc000115 	stw	r16,4(sp)
    aee8:	14000017 	ldw	r16,0(r2)
    aeec:	dc400215 	stw	r17,8(sp)
    aef0:	dfc00315 	stw	ra,12(sp)
    aef4:	2023883a 	mov	r17,r4
    aef8:	80000226 	beq	r16,zero,af04 <fputwc+0x2c>
    aefc:	80800e17 	ldw	r2,56(r16)
    af00:	10001026 	beq	r2,zero,af44 <fputwc+0x6c>
    af04:	2880030b 	ldhu	r2,12(r5)
    af08:	10c8000c 	andi	r3,r2,8192
    af0c:	1800051e 	bne	r3,zero,af24 <fputwc+0x4c>
    af10:	28c01917 	ldw	r3,100(r5)
    af14:	10880014 	ori	r2,r2,8192
    af18:	2880030d 	sth	r2,12(r5)
    af1c:	18880014 	ori	r2,r3,8192
    af20:	28801915 	stw	r2,100(r5)
    af24:	280d883a 	mov	r6,r5
    af28:	8009883a 	mov	r4,r16
    af2c:	880b883a 	mov	r5,r17
    af30:	dfc00317 	ldw	ra,12(sp)
    af34:	dc400217 	ldw	r17,8(sp)
    af38:	dc000117 	ldw	r16,4(sp)
    af3c:	dec00404 	addi	sp,sp,16
    af40:	000ad501 	jmpi	ad50 <__fputwc>
    af44:	8009883a 	mov	r4,r16
    af48:	d9400015 	stw	r5,0(sp)
    af4c:	0006a900 	call	6a90 <__sinit>
    af50:	d9400017 	ldw	r5,0(sp)
    af54:	003feb06 	br	af04 <__alt_data_end+0xff00af04>

0000af58 <_fstat_r>:
    af58:	defffd04 	addi	sp,sp,-12
    af5c:	2805883a 	mov	r2,r5
    af60:	dc000015 	stw	r16,0(sp)
    af64:	04000074 	movhi	r16,1
    af68:	dc400115 	stw	r17,4(sp)
    af6c:	840f6d04 	addi	r16,r16,15796
    af70:	2023883a 	mov	r17,r4
    af74:	300b883a 	mov	r5,r6
    af78:	1009883a 	mov	r4,r2
    af7c:	dfc00215 	stw	ra,8(sp)
    af80:	80000015 	stw	zero,0(r16)
    af84:	000e7980 	call	e798 <fstat>
    af88:	00ffffc4 	movi	r3,-1
    af8c:	10c00526 	beq	r2,r3,afa4 <_fstat_r+0x4c>
    af90:	dfc00217 	ldw	ra,8(sp)
    af94:	dc400117 	ldw	r17,4(sp)
    af98:	dc000017 	ldw	r16,0(sp)
    af9c:	dec00304 	addi	sp,sp,12
    afa0:	f800283a 	ret
    afa4:	80c00017 	ldw	r3,0(r16)
    afa8:	183ff926 	beq	r3,zero,af90 <__alt_data_end+0xff00af90>
    afac:	88c00015 	stw	r3,0(r17)
    afb0:	003ff706 	br	af90 <__alt_data_end+0xff00af90>

0000afb4 <_isatty_r>:
    afb4:	defffd04 	addi	sp,sp,-12
    afb8:	dc000015 	stw	r16,0(sp)
    afbc:	04000074 	movhi	r16,1
    afc0:	dc400115 	stw	r17,4(sp)
    afc4:	840f6d04 	addi	r16,r16,15796
    afc8:	2023883a 	mov	r17,r4
    afcc:	2809883a 	mov	r4,r5
    afd0:	dfc00215 	stw	ra,8(sp)
    afd4:	80000015 	stw	zero,0(r16)
    afd8:	000e8100 	call	e810 <isatty>
    afdc:	00ffffc4 	movi	r3,-1
    afe0:	10c00526 	beq	r2,r3,aff8 <_isatty_r+0x44>
    afe4:	dfc00217 	ldw	ra,8(sp)
    afe8:	dc400117 	ldw	r17,4(sp)
    afec:	dc000017 	ldw	r16,0(sp)
    aff0:	dec00304 	addi	sp,sp,12
    aff4:	f800283a 	ret
    aff8:	80c00017 	ldw	r3,0(r16)
    affc:	183ff926 	beq	r3,zero,afe4 <__alt_data_end+0xff00afe4>
    b000:	88c00015 	stw	r3,0(r17)
    b004:	003ff706 	br	afe4 <__alt_data_end+0xff00afe4>

0000b008 <_lseek_r>:
    b008:	defffd04 	addi	sp,sp,-12
    b00c:	2805883a 	mov	r2,r5
    b010:	dc000015 	stw	r16,0(sp)
    b014:	04000074 	movhi	r16,1
    b018:	dc400115 	stw	r17,4(sp)
    b01c:	300b883a 	mov	r5,r6
    b020:	840f6d04 	addi	r16,r16,15796
    b024:	2023883a 	mov	r17,r4
    b028:	380d883a 	mov	r6,r7
    b02c:	1009883a 	mov	r4,r2
    b030:	dfc00215 	stw	ra,8(sp)
    b034:	80000015 	stw	zero,0(r16)
    b038:	000e9600 	call	e960 <lseek>
    b03c:	00ffffc4 	movi	r3,-1
    b040:	10c00526 	beq	r2,r3,b058 <_lseek_r+0x50>
    b044:	dfc00217 	ldw	ra,8(sp)
    b048:	dc400117 	ldw	r17,4(sp)
    b04c:	dc000017 	ldw	r16,0(sp)
    b050:	dec00304 	addi	sp,sp,12
    b054:	f800283a 	ret
    b058:	80c00017 	ldw	r3,0(r16)
    b05c:	183ff926 	beq	r3,zero,b044 <__alt_data_end+0xff00b044>
    b060:	88c00015 	stw	r3,0(r17)
    b064:	003ff706 	br	b044 <__alt_data_end+0xff00b044>

0000b068 <_read_r>:
    b068:	defffd04 	addi	sp,sp,-12
    b06c:	2805883a 	mov	r2,r5
    b070:	dc000015 	stw	r16,0(sp)
    b074:	04000074 	movhi	r16,1
    b078:	dc400115 	stw	r17,4(sp)
    b07c:	300b883a 	mov	r5,r6
    b080:	840f6d04 	addi	r16,r16,15796
    b084:	2023883a 	mov	r17,r4
    b088:	380d883a 	mov	r6,r7
    b08c:	1009883a 	mov	r4,r2
    b090:	dfc00215 	stw	ra,8(sp)
    b094:	80000015 	stw	zero,0(r16)
    b098:	000ea440 	call	ea44 <read>
    b09c:	00ffffc4 	movi	r3,-1
    b0a0:	10c00526 	beq	r2,r3,b0b8 <_read_r+0x50>
    b0a4:	dfc00217 	ldw	ra,8(sp)
    b0a8:	dc400117 	ldw	r17,4(sp)
    b0ac:	dc000017 	ldw	r16,0(sp)
    b0b0:	dec00304 	addi	sp,sp,12
    b0b4:	f800283a 	ret
    b0b8:	80c00017 	ldw	r3,0(r16)
    b0bc:	183ff926 	beq	r3,zero,b0a4 <__alt_data_end+0xff00b0a4>
    b0c0:	88c00015 	stw	r3,0(r17)
    b0c4:	003ff706 	br	b0a4 <__alt_data_end+0xff00b0a4>

0000b0c8 <__swbuf_r>:
    b0c8:	defffb04 	addi	sp,sp,-20
    b0cc:	dcc00315 	stw	r19,12(sp)
    b0d0:	dc800215 	stw	r18,8(sp)
    b0d4:	dc000015 	stw	r16,0(sp)
    b0d8:	dfc00415 	stw	ra,16(sp)
    b0dc:	dc400115 	stw	r17,4(sp)
    b0e0:	2025883a 	mov	r18,r4
    b0e4:	2827883a 	mov	r19,r5
    b0e8:	3021883a 	mov	r16,r6
    b0ec:	20000226 	beq	r4,zero,b0f8 <__swbuf_r+0x30>
    b0f0:	20800e17 	ldw	r2,56(r4)
    b0f4:	10004226 	beq	r2,zero,b200 <__swbuf_r+0x138>
    b0f8:	80800617 	ldw	r2,24(r16)
    b0fc:	8100030b 	ldhu	r4,12(r16)
    b100:	80800215 	stw	r2,8(r16)
    b104:	2080020c 	andi	r2,r4,8
    b108:	10003626 	beq	r2,zero,b1e4 <__swbuf_r+0x11c>
    b10c:	80c00417 	ldw	r3,16(r16)
    b110:	18003426 	beq	r3,zero,b1e4 <__swbuf_r+0x11c>
    b114:	2088000c 	andi	r2,r4,8192
    b118:	9c403fcc 	andi	r17,r19,255
    b11c:	10001a26 	beq	r2,zero,b188 <__swbuf_r+0xc0>
    b120:	80800017 	ldw	r2,0(r16)
    b124:	81000517 	ldw	r4,20(r16)
    b128:	10c7c83a 	sub	r3,r2,r3
    b12c:	1900200e 	bge	r3,r4,b1b0 <__swbuf_r+0xe8>
    b130:	18c00044 	addi	r3,r3,1
    b134:	81000217 	ldw	r4,8(r16)
    b138:	11400044 	addi	r5,r2,1
    b13c:	81400015 	stw	r5,0(r16)
    b140:	213fffc4 	addi	r4,r4,-1
    b144:	81000215 	stw	r4,8(r16)
    b148:	14c00005 	stb	r19,0(r2)
    b14c:	80800517 	ldw	r2,20(r16)
    b150:	10c01e26 	beq	r2,r3,b1cc <__swbuf_r+0x104>
    b154:	8080030b 	ldhu	r2,12(r16)
    b158:	1080004c 	andi	r2,r2,1
    b15c:	10000226 	beq	r2,zero,b168 <__swbuf_r+0xa0>
    b160:	00800284 	movi	r2,10
    b164:	88801926 	beq	r17,r2,b1cc <__swbuf_r+0x104>
    b168:	8805883a 	mov	r2,r17
    b16c:	dfc00417 	ldw	ra,16(sp)
    b170:	dcc00317 	ldw	r19,12(sp)
    b174:	dc800217 	ldw	r18,8(sp)
    b178:	dc400117 	ldw	r17,4(sp)
    b17c:	dc000017 	ldw	r16,0(sp)
    b180:	dec00504 	addi	sp,sp,20
    b184:	f800283a 	ret
    b188:	81401917 	ldw	r5,100(r16)
    b18c:	00b7ffc4 	movi	r2,-8193
    b190:	21080014 	ori	r4,r4,8192
    b194:	2884703a 	and	r2,r5,r2
    b198:	80801915 	stw	r2,100(r16)
    b19c:	80800017 	ldw	r2,0(r16)
    b1a0:	8100030d 	sth	r4,12(r16)
    b1a4:	81000517 	ldw	r4,20(r16)
    b1a8:	10c7c83a 	sub	r3,r2,r3
    b1ac:	193fe016 	blt	r3,r4,b130 <__alt_data_end+0xff00b130>
    b1b0:	800b883a 	mov	r5,r16
    b1b4:	9009883a 	mov	r4,r18
    b1b8:	00066b40 	call	66b4 <_fflush_r>
    b1bc:	1000071e 	bne	r2,zero,b1dc <__swbuf_r+0x114>
    b1c0:	80800017 	ldw	r2,0(r16)
    b1c4:	00c00044 	movi	r3,1
    b1c8:	003fda06 	br	b134 <__alt_data_end+0xff00b134>
    b1cc:	800b883a 	mov	r5,r16
    b1d0:	9009883a 	mov	r4,r18
    b1d4:	00066b40 	call	66b4 <_fflush_r>
    b1d8:	103fe326 	beq	r2,zero,b168 <__alt_data_end+0xff00b168>
    b1dc:	00bfffc4 	movi	r2,-1
    b1e0:	003fe206 	br	b16c <__alt_data_end+0xff00b16c>
    b1e4:	800b883a 	mov	r5,r16
    b1e8:	9009883a 	mov	r4,r18
    b1ec:	0004abc0 	call	4abc <__swsetup_r>
    b1f0:	103ffa1e 	bne	r2,zero,b1dc <__alt_data_end+0xff00b1dc>
    b1f4:	8100030b 	ldhu	r4,12(r16)
    b1f8:	80c00417 	ldw	r3,16(r16)
    b1fc:	003fc506 	br	b114 <__alt_data_end+0xff00b114>
    b200:	0006a900 	call	6a90 <__sinit>
    b204:	003fbc06 	br	b0f8 <__alt_data_end+0xff00b0f8>

0000b208 <__swbuf>:
    b208:	00800074 	movhi	r2,1
    b20c:	10889604 	addi	r2,r2,8792
    b210:	280d883a 	mov	r6,r5
    b214:	200b883a 	mov	r5,r4
    b218:	11000017 	ldw	r4,0(r2)
    b21c:	000b0c81 	jmpi	b0c8 <__swbuf_r>

0000b220 <_wcrtomb_r>:
    b220:	defff604 	addi	sp,sp,-40
    b224:	00800074 	movhi	r2,1
    b228:	dc800815 	stw	r18,32(sp)
    b22c:	dc400715 	stw	r17,28(sp)
    b230:	dc000615 	stw	r16,24(sp)
    b234:	10889804 	addi	r2,r2,8800
    b238:	dfc00915 	stw	ra,36(sp)
    b23c:	2021883a 	mov	r16,r4
    b240:	3823883a 	mov	r17,r7
    b244:	14800017 	ldw	r18,0(r2)
    b248:	28001426 	beq	r5,zero,b29c <_wcrtomb_r+0x7c>
    b24c:	d9400415 	stw	r5,16(sp)
    b250:	d9800515 	stw	r6,20(sp)
    b254:	00075d40 	call	75d4 <__locale_charset>
    b258:	d9800517 	ldw	r6,20(sp)
    b25c:	d9400417 	ldw	r5,16(sp)
    b260:	100f883a 	mov	r7,r2
    b264:	dc400015 	stw	r17,0(sp)
    b268:	8009883a 	mov	r4,r16
    b26c:	903ee83a 	callr	r18
    b270:	00ffffc4 	movi	r3,-1
    b274:	10c0031e 	bne	r2,r3,b284 <_wcrtomb_r+0x64>
    b278:	88000015 	stw	zero,0(r17)
    b27c:	00c02284 	movi	r3,138
    b280:	80c00015 	stw	r3,0(r16)
    b284:	dfc00917 	ldw	ra,36(sp)
    b288:	dc800817 	ldw	r18,32(sp)
    b28c:	dc400717 	ldw	r17,28(sp)
    b290:	dc000617 	ldw	r16,24(sp)
    b294:	dec00a04 	addi	sp,sp,40
    b298:	f800283a 	ret
    b29c:	00075d40 	call	75d4 <__locale_charset>
    b2a0:	100f883a 	mov	r7,r2
    b2a4:	dc400015 	stw	r17,0(sp)
    b2a8:	000d883a 	mov	r6,zero
    b2ac:	d9400104 	addi	r5,sp,4
    b2b0:	8009883a 	mov	r4,r16
    b2b4:	903ee83a 	callr	r18
    b2b8:	003fed06 	br	b270 <__alt_data_end+0xff00b270>

0000b2bc <wcrtomb>:
    b2bc:	defff604 	addi	sp,sp,-40
    b2c0:	00800074 	movhi	r2,1
    b2c4:	dc800615 	stw	r18,24(sp)
    b2c8:	dc400515 	stw	r17,20(sp)
    b2cc:	10889604 	addi	r2,r2,8792
    b2d0:	dfc00915 	stw	ra,36(sp)
    b2d4:	dd000815 	stw	r20,32(sp)
    b2d8:	dcc00715 	stw	r19,28(sp)
    b2dc:	dc000415 	stw	r16,16(sp)
    b2e0:	3025883a 	mov	r18,r6
    b2e4:	14400017 	ldw	r17,0(r2)
    b2e8:	20001926 	beq	r4,zero,b350 <wcrtomb+0x94>
    b2ec:	00800074 	movhi	r2,1
    b2f0:	10889804 	addi	r2,r2,8800
    b2f4:	15000017 	ldw	r20,0(r2)
    b2f8:	2021883a 	mov	r16,r4
    b2fc:	2827883a 	mov	r19,r5
    b300:	00075d40 	call	75d4 <__locale_charset>
    b304:	100f883a 	mov	r7,r2
    b308:	dc800015 	stw	r18,0(sp)
    b30c:	980d883a 	mov	r6,r19
    b310:	800b883a 	mov	r5,r16
    b314:	8809883a 	mov	r4,r17
    b318:	a03ee83a 	callr	r20
    b31c:	00ffffc4 	movi	r3,-1
    b320:	10c0031e 	bne	r2,r3,b330 <wcrtomb+0x74>
    b324:	90000015 	stw	zero,0(r18)
    b328:	00c02284 	movi	r3,138
    b32c:	88c00015 	stw	r3,0(r17)
    b330:	dfc00917 	ldw	ra,36(sp)
    b334:	dd000817 	ldw	r20,32(sp)
    b338:	dcc00717 	ldw	r19,28(sp)
    b33c:	dc800617 	ldw	r18,24(sp)
    b340:	dc400517 	ldw	r17,20(sp)
    b344:	dc000417 	ldw	r16,16(sp)
    b348:	dec00a04 	addi	sp,sp,40
    b34c:	f800283a 	ret
    b350:	00800074 	movhi	r2,1
    b354:	10889804 	addi	r2,r2,8800
    b358:	14000017 	ldw	r16,0(r2)
    b35c:	00075d40 	call	75d4 <__locale_charset>
    b360:	100f883a 	mov	r7,r2
    b364:	dc800015 	stw	r18,0(sp)
    b368:	000d883a 	mov	r6,zero
    b36c:	d9400104 	addi	r5,sp,4
    b370:	8809883a 	mov	r4,r17
    b374:	803ee83a 	callr	r16
    b378:	003fe806 	br	b31c <__alt_data_end+0xff00b31c>

0000b37c <__ascii_wctomb>:
    b37c:	28000526 	beq	r5,zero,b394 <__ascii_wctomb+0x18>
    b380:	00803fc4 	movi	r2,255
    b384:	11800536 	bltu	r2,r6,b39c <__ascii_wctomb+0x20>
    b388:	29800005 	stb	r6,0(r5)
    b38c:	00800044 	movi	r2,1
    b390:	f800283a 	ret
    b394:	0005883a 	mov	r2,zero
    b398:	f800283a 	ret
    b39c:	00802284 	movi	r2,138
    b3a0:	20800015 	stw	r2,0(r4)
    b3a4:	00bfffc4 	movi	r2,-1
    b3a8:	f800283a 	ret

0000b3ac <_wctomb_r>:
    b3ac:	00800074 	movhi	r2,1
    b3b0:	defff904 	addi	sp,sp,-28
    b3b4:	10889804 	addi	r2,r2,8800
    b3b8:	dfc00615 	stw	ra,24(sp)
    b3bc:	dc400515 	stw	r17,20(sp)
    b3c0:	dc000415 	stw	r16,16(sp)
    b3c4:	3823883a 	mov	r17,r7
    b3c8:	14000017 	ldw	r16,0(r2)
    b3cc:	d9000115 	stw	r4,4(sp)
    b3d0:	d9400215 	stw	r5,8(sp)
    b3d4:	d9800315 	stw	r6,12(sp)
    b3d8:	00075d40 	call	75d4 <__locale_charset>
    b3dc:	d9800317 	ldw	r6,12(sp)
    b3e0:	d9400217 	ldw	r5,8(sp)
    b3e4:	d9000117 	ldw	r4,4(sp)
    b3e8:	100f883a 	mov	r7,r2
    b3ec:	dc400015 	stw	r17,0(sp)
    b3f0:	803ee83a 	callr	r16
    b3f4:	dfc00617 	ldw	ra,24(sp)
    b3f8:	dc400517 	ldw	r17,20(sp)
    b3fc:	dc000417 	ldw	r16,16(sp)
    b400:	dec00704 	addi	sp,sp,28
    b404:	f800283a 	ret

0000b408 <__udivdi3>:
    b408:	defff504 	addi	sp,sp,-44
    b40c:	dcc00415 	stw	r19,16(sp)
    b410:	dc000115 	stw	r16,4(sp)
    b414:	dfc00a15 	stw	ra,40(sp)
    b418:	df000915 	stw	fp,36(sp)
    b41c:	ddc00815 	stw	r23,32(sp)
    b420:	dd800715 	stw	r22,28(sp)
    b424:	dd400615 	stw	r21,24(sp)
    b428:	dd000515 	stw	r20,20(sp)
    b42c:	dc800315 	stw	r18,12(sp)
    b430:	dc400215 	stw	r17,8(sp)
    b434:	2027883a 	mov	r19,r4
    b438:	2821883a 	mov	r16,r5
    b43c:	3800411e 	bne	r7,zero,b544 <__udivdi3+0x13c>
    b440:	3023883a 	mov	r17,r6
    b444:	2025883a 	mov	r18,r4
    b448:	2980522e 	bgeu	r5,r6,b594 <__udivdi3+0x18c>
    b44c:	00bfffd4 	movui	r2,65535
    b450:	282d883a 	mov	r22,r5
    b454:	1180a836 	bltu	r2,r6,b6f8 <__udivdi3+0x2f0>
    b458:	00803fc4 	movi	r2,255
    b45c:	1185803a 	cmpltu	r2,r2,r6
    b460:	100490fa 	slli	r2,r2,3
    b464:	3086d83a 	srl	r3,r6,r2
    b468:	01000074 	movhi	r4,1
    b46c:	21019f04 	addi	r4,r4,1660
    b470:	20c7883a 	add	r3,r4,r3
    b474:	18c00003 	ldbu	r3,0(r3)
    b478:	1885883a 	add	r2,r3,r2
    b47c:	00c00804 	movi	r3,32
    b480:	1887c83a 	sub	r3,r3,r2
    b484:	18000526 	beq	r3,zero,b49c <__udivdi3+0x94>
    b488:	80e0983a 	sll	r16,r16,r3
    b48c:	9884d83a 	srl	r2,r19,r2
    b490:	30e2983a 	sll	r17,r6,r3
    b494:	98e4983a 	sll	r18,r19,r3
    b498:	142cb03a 	or	r22,r2,r16
    b49c:	882ad43a 	srli	r21,r17,16
    b4a0:	b009883a 	mov	r4,r22
    b4a4:	8d3fffcc 	andi	r20,r17,65535
    b4a8:	a80b883a 	mov	r5,r21
    b4ac:	000c0140 	call	c014 <__umodsi3>
    b4b0:	b009883a 	mov	r4,r22
    b4b4:	a80b883a 	mov	r5,r21
    b4b8:	1027883a 	mov	r19,r2
    b4bc:	000bfb00 	call	bfb0 <__udivsi3>
    b4c0:	102d883a 	mov	r22,r2
    b4c4:	9826943a 	slli	r19,r19,16
    b4c8:	9004d43a 	srli	r2,r18,16
    b4cc:	a5a1383a 	mul	r16,r20,r22
    b4d0:	14c4b03a 	or	r2,r2,r19
    b4d4:	1400052e 	bgeu	r2,r16,b4ec <__udivdi3+0xe4>
    b4d8:	1445883a 	add	r2,r2,r17
    b4dc:	b0ffffc4 	addi	r3,r22,-1
    b4e0:	14400136 	bltu	r2,r17,b4e8 <__udivdi3+0xe0>
    b4e4:	14012336 	bltu	r2,r16,b974 <__udivdi3+0x56c>
    b4e8:	182d883a 	mov	r22,r3
    b4ec:	1421c83a 	sub	r16,r2,r16
    b4f0:	a80b883a 	mov	r5,r21
    b4f4:	8009883a 	mov	r4,r16
    b4f8:	000c0140 	call	c014 <__umodsi3>
    b4fc:	1027883a 	mov	r19,r2
    b500:	a80b883a 	mov	r5,r21
    b504:	8009883a 	mov	r4,r16
    b508:	000bfb00 	call	bfb0 <__udivsi3>
    b50c:	9826943a 	slli	r19,r19,16
    b510:	a0a9383a 	mul	r20,r20,r2
    b514:	94bfffcc 	andi	r18,r18,65535
    b518:	94e4b03a 	or	r18,r18,r19
    b51c:	9500052e 	bgeu	r18,r20,b534 <__udivdi3+0x12c>
    b520:	8ca5883a 	add	r18,r17,r18
    b524:	10ffffc4 	addi	r3,r2,-1
    b528:	9440f136 	bltu	r18,r17,b8f0 <__udivdi3+0x4e8>
    b52c:	9500f02e 	bgeu	r18,r20,b8f0 <__udivdi3+0x4e8>
    b530:	10bfff84 	addi	r2,r2,-2
    b534:	b00c943a 	slli	r6,r22,16
    b538:	0007883a 	mov	r3,zero
    b53c:	3084b03a 	or	r2,r6,r2
    b540:	00005906 	br	b6a8 <__udivdi3+0x2a0>
    b544:	29c05636 	bltu	r5,r7,b6a0 <__udivdi3+0x298>
    b548:	00bfffd4 	movui	r2,65535
    b54c:	11c0622e 	bgeu	r2,r7,b6d8 <__udivdi3+0x2d0>
    b550:	00804034 	movhi	r2,256
    b554:	10bfffc4 	addi	r2,r2,-1
    b558:	11c0ee36 	bltu	r2,r7,b914 <__udivdi3+0x50c>
    b55c:	00800404 	movi	r2,16
    b560:	3886d83a 	srl	r3,r7,r2
    b564:	01000074 	movhi	r4,1
    b568:	21019f04 	addi	r4,r4,1660
    b56c:	20c7883a 	add	r3,r4,r3
    b570:	18c00003 	ldbu	r3,0(r3)
    b574:	05400804 	movi	r21,32
    b578:	1885883a 	add	r2,r3,r2
    b57c:	a8abc83a 	sub	r21,r21,r2
    b580:	a800621e 	bne	r21,zero,b70c <__udivdi3+0x304>
    b584:	3c00e936 	bltu	r7,r16,b92c <__udivdi3+0x524>
    b588:	9985403a 	cmpgeu	r2,r19,r6
    b58c:	0007883a 	mov	r3,zero
    b590:	00004506 	br	b6a8 <__udivdi3+0x2a0>
    b594:	3000041e 	bne	r6,zero,b5a8 <__udivdi3+0x1a0>
    b598:	000b883a 	mov	r5,zero
    b59c:	01000044 	movi	r4,1
    b5a0:	000bfb00 	call	bfb0 <__udivsi3>
    b5a4:	1023883a 	mov	r17,r2
    b5a8:	00bfffd4 	movui	r2,65535
    b5ac:	14404e2e 	bgeu	r2,r17,b6e8 <__udivdi3+0x2e0>
    b5b0:	00804034 	movhi	r2,256
    b5b4:	10bfffc4 	addi	r2,r2,-1
    b5b8:	1440d836 	bltu	r2,r17,b91c <__udivdi3+0x514>
    b5bc:	00800404 	movi	r2,16
    b5c0:	8886d83a 	srl	r3,r17,r2
    b5c4:	01000074 	movhi	r4,1
    b5c8:	21019f04 	addi	r4,r4,1660
    b5cc:	20c7883a 	add	r3,r4,r3
    b5d0:	18c00003 	ldbu	r3,0(r3)
    b5d4:	1885883a 	add	r2,r3,r2
    b5d8:	00c00804 	movi	r3,32
    b5dc:	1887c83a 	sub	r3,r3,r2
    b5e0:	18008f1e 	bne	r3,zero,b820 <__udivdi3+0x418>
    b5e4:	882ad43a 	srli	r21,r17,16
    b5e8:	8461c83a 	sub	r16,r16,r17
    b5ec:	8d3fffcc 	andi	r20,r17,65535
    b5f0:	00c00044 	movi	r3,1
    b5f4:	8009883a 	mov	r4,r16
    b5f8:	a80b883a 	mov	r5,r21
    b5fc:	d8c00015 	stw	r3,0(sp)
    b600:	000c0140 	call	c014 <__umodsi3>
    b604:	8009883a 	mov	r4,r16
    b608:	a80b883a 	mov	r5,r21
    b60c:	1027883a 	mov	r19,r2
    b610:	000bfb00 	call	bfb0 <__udivsi3>
    b614:	9826943a 	slli	r19,r19,16
    b618:	9008d43a 	srli	r4,r18,16
    b61c:	1521383a 	mul	r16,r2,r20
    b620:	102d883a 	mov	r22,r2
    b624:	24c8b03a 	or	r4,r4,r19
    b628:	d8c00017 	ldw	r3,0(sp)
    b62c:	2400052e 	bgeu	r4,r16,b644 <__udivdi3+0x23c>
    b630:	2449883a 	add	r4,r4,r17
    b634:	b0bfffc4 	addi	r2,r22,-1
    b638:	24400136 	bltu	r4,r17,b640 <__udivdi3+0x238>
    b63c:	2400ca36 	bltu	r4,r16,b968 <__udivdi3+0x560>
    b640:	102d883a 	mov	r22,r2
    b644:	2421c83a 	sub	r16,r4,r16
    b648:	a80b883a 	mov	r5,r21
    b64c:	8009883a 	mov	r4,r16
    b650:	d8c00015 	stw	r3,0(sp)
    b654:	000c0140 	call	c014 <__umodsi3>
    b658:	1027883a 	mov	r19,r2
    b65c:	a80b883a 	mov	r5,r21
    b660:	8009883a 	mov	r4,r16
    b664:	000bfb00 	call	bfb0 <__udivsi3>
    b668:	9826943a 	slli	r19,r19,16
    b66c:	1529383a 	mul	r20,r2,r20
    b670:	94bfffcc 	andi	r18,r18,65535
    b674:	94e4b03a 	or	r18,r18,r19
    b678:	d8c00017 	ldw	r3,0(sp)
    b67c:	9500052e 	bgeu	r18,r20,b694 <__udivdi3+0x28c>
    b680:	8ca5883a 	add	r18,r17,r18
    b684:	113fffc4 	addi	r4,r2,-1
    b688:	94409736 	bltu	r18,r17,b8e8 <__udivdi3+0x4e0>
    b68c:	9500962e 	bgeu	r18,r20,b8e8 <__udivdi3+0x4e0>
    b690:	10bfff84 	addi	r2,r2,-2
    b694:	b00c943a 	slli	r6,r22,16
    b698:	3084b03a 	or	r2,r6,r2
    b69c:	00000206 	br	b6a8 <__udivdi3+0x2a0>
    b6a0:	0007883a 	mov	r3,zero
    b6a4:	0005883a 	mov	r2,zero
    b6a8:	dfc00a17 	ldw	ra,40(sp)
    b6ac:	df000917 	ldw	fp,36(sp)
    b6b0:	ddc00817 	ldw	r23,32(sp)
    b6b4:	dd800717 	ldw	r22,28(sp)
    b6b8:	dd400617 	ldw	r21,24(sp)
    b6bc:	dd000517 	ldw	r20,20(sp)
    b6c0:	dcc00417 	ldw	r19,16(sp)
    b6c4:	dc800317 	ldw	r18,12(sp)
    b6c8:	dc400217 	ldw	r17,8(sp)
    b6cc:	dc000117 	ldw	r16,4(sp)
    b6d0:	dec00b04 	addi	sp,sp,44
    b6d4:	f800283a 	ret
    b6d8:	00803fc4 	movi	r2,255
    b6dc:	11c5803a 	cmpltu	r2,r2,r7
    b6e0:	100490fa 	slli	r2,r2,3
    b6e4:	003f9e06 	br	b560 <__alt_data_end+0xff00b560>
    b6e8:	00803fc4 	movi	r2,255
    b6ec:	1445803a 	cmpltu	r2,r2,r17
    b6f0:	100490fa 	slli	r2,r2,3
    b6f4:	003fb206 	br	b5c0 <__alt_data_end+0xff00b5c0>
    b6f8:	00804034 	movhi	r2,256
    b6fc:	10bfffc4 	addi	r2,r2,-1
    b700:	11808836 	bltu	r2,r6,b924 <__udivdi3+0x51c>
    b704:	00800404 	movi	r2,16
    b708:	003f5606 	br	b464 <__alt_data_end+0xff00b464>
    b70c:	30aed83a 	srl	r23,r6,r2
    b710:	3d4e983a 	sll	r7,r7,r21
    b714:	80acd83a 	srl	r22,r16,r2
    b718:	9884d83a 	srl	r2,r19,r2
    b71c:	3deeb03a 	or	r23,r7,r23
    b720:	b824d43a 	srli	r18,r23,16
    b724:	8560983a 	sll	r16,r16,r21
    b728:	b009883a 	mov	r4,r22
    b72c:	900b883a 	mov	r5,r18
    b730:	3568983a 	sll	r20,r6,r21
    b734:	1420b03a 	or	r16,r2,r16
    b738:	000c0140 	call	c014 <__umodsi3>
    b73c:	b009883a 	mov	r4,r22
    b740:	900b883a 	mov	r5,r18
    b744:	1023883a 	mov	r17,r2
    b748:	000bfb00 	call	bfb0 <__udivsi3>
    b74c:	8808943a 	slli	r4,r17,16
    b750:	bf3fffcc 	andi	fp,r23,65535
    b754:	8006d43a 	srli	r3,r16,16
    b758:	e0a3383a 	mul	r17,fp,r2
    b75c:	100d883a 	mov	r6,r2
    b760:	1906b03a 	or	r3,r3,r4
    b764:	1c40042e 	bgeu	r3,r17,b778 <__udivdi3+0x370>
    b768:	1dc7883a 	add	r3,r3,r23
    b76c:	10bfffc4 	addi	r2,r2,-1
    b770:	1dc0752e 	bgeu	r3,r23,b948 <__udivdi3+0x540>
    b774:	100d883a 	mov	r6,r2
    b778:	1c63c83a 	sub	r17,r3,r17
    b77c:	900b883a 	mov	r5,r18
    b780:	8809883a 	mov	r4,r17
    b784:	d9800015 	stw	r6,0(sp)
    b788:	000c0140 	call	c014 <__umodsi3>
    b78c:	102d883a 	mov	r22,r2
    b790:	8809883a 	mov	r4,r17
    b794:	900b883a 	mov	r5,r18
    b798:	000bfb00 	call	bfb0 <__udivsi3>
    b79c:	b02c943a 	slli	r22,r22,16
    b7a0:	e089383a 	mul	r4,fp,r2
    b7a4:	843fffcc 	andi	r16,r16,65535
    b7a8:	85a0b03a 	or	r16,r16,r22
    b7ac:	d9800017 	ldw	r6,0(sp)
    b7b0:	8100042e 	bgeu	r16,r4,b7c4 <__udivdi3+0x3bc>
    b7b4:	85e1883a 	add	r16,r16,r23
    b7b8:	10ffffc4 	addi	r3,r2,-1
    b7bc:	85c05e2e 	bgeu	r16,r23,b938 <__udivdi3+0x530>
    b7c0:	1805883a 	mov	r2,r3
    b7c4:	300c943a 	slli	r6,r6,16
    b7c8:	a17fffcc 	andi	r5,r20,65535
    b7cc:	a028d43a 	srli	r20,r20,16
    b7d0:	3084b03a 	or	r2,r6,r2
    b7d4:	10ffffcc 	andi	r3,r2,65535
    b7d8:	100cd43a 	srli	r6,r2,16
    b7dc:	194f383a 	mul	r7,r3,r5
    b7e0:	1d07383a 	mul	r3,r3,r20
    b7e4:	314b383a 	mul	r5,r6,r5
    b7e8:	3810d43a 	srli	r8,r7,16
    b7ec:	8121c83a 	sub	r16,r16,r4
    b7f0:	1947883a 	add	r3,r3,r5
    b7f4:	40c7883a 	add	r3,r8,r3
    b7f8:	350d383a 	mul	r6,r6,r20
    b7fc:	1940022e 	bgeu	r3,r5,b808 <__udivdi3+0x400>
    b800:	01000074 	movhi	r4,1
    b804:	310d883a 	add	r6,r6,r4
    b808:	1828d43a 	srli	r20,r3,16
    b80c:	a18d883a 	add	r6,r20,r6
    b810:	81803e36 	bltu	r16,r6,b90c <__udivdi3+0x504>
    b814:	81803826 	beq	r16,r6,b8f8 <__udivdi3+0x4f0>
    b818:	0007883a 	mov	r3,zero
    b81c:	003fa206 	br	b6a8 <__alt_data_end+0xff00b6a8>
    b820:	88e2983a 	sll	r17,r17,r3
    b824:	80a8d83a 	srl	r20,r16,r2
    b828:	80e0983a 	sll	r16,r16,r3
    b82c:	882ad43a 	srli	r21,r17,16
    b830:	9884d83a 	srl	r2,r19,r2
    b834:	a009883a 	mov	r4,r20
    b838:	a80b883a 	mov	r5,r21
    b83c:	142eb03a 	or	r23,r2,r16
    b840:	98e4983a 	sll	r18,r19,r3
    b844:	000c0140 	call	c014 <__umodsi3>
    b848:	a009883a 	mov	r4,r20
    b84c:	a80b883a 	mov	r5,r21
    b850:	1021883a 	mov	r16,r2
    b854:	000bfb00 	call	bfb0 <__udivsi3>
    b858:	1039883a 	mov	fp,r2
    b85c:	8d3fffcc 	andi	r20,r17,65535
    b860:	8020943a 	slli	r16,r16,16
    b864:	b804d43a 	srli	r2,r23,16
    b868:	a72d383a 	mul	r22,r20,fp
    b86c:	1404b03a 	or	r2,r2,r16
    b870:	1580062e 	bgeu	r2,r22,b88c <__udivdi3+0x484>
    b874:	1445883a 	add	r2,r2,r17
    b878:	e0ffffc4 	addi	r3,fp,-1
    b87c:	14403836 	bltu	r2,r17,b960 <__udivdi3+0x558>
    b880:	1580372e 	bgeu	r2,r22,b960 <__udivdi3+0x558>
    b884:	e73fff84 	addi	fp,fp,-2
    b888:	1445883a 	add	r2,r2,r17
    b88c:	15adc83a 	sub	r22,r2,r22
    b890:	a80b883a 	mov	r5,r21
    b894:	b009883a 	mov	r4,r22
    b898:	000c0140 	call	c014 <__umodsi3>
    b89c:	1027883a 	mov	r19,r2
    b8a0:	b009883a 	mov	r4,r22
    b8a4:	a80b883a 	mov	r5,r21
    b8a8:	000bfb00 	call	bfb0 <__udivsi3>
    b8ac:	9826943a 	slli	r19,r19,16
    b8b0:	a0a1383a 	mul	r16,r20,r2
    b8b4:	b93fffcc 	andi	r4,r23,65535
    b8b8:	24c8b03a 	or	r4,r4,r19
    b8bc:	2400062e 	bgeu	r4,r16,b8d8 <__udivdi3+0x4d0>
    b8c0:	2449883a 	add	r4,r4,r17
    b8c4:	10ffffc4 	addi	r3,r2,-1
    b8c8:	24402336 	bltu	r4,r17,b958 <__udivdi3+0x550>
    b8cc:	2400222e 	bgeu	r4,r16,b958 <__udivdi3+0x550>
    b8d0:	10bfff84 	addi	r2,r2,-2
    b8d4:	2449883a 	add	r4,r4,r17
    b8d8:	e038943a 	slli	fp,fp,16
    b8dc:	2421c83a 	sub	r16,r4,r16
    b8e0:	e086b03a 	or	r3,fp,r2
    b8e4:	003f4306 	br	b5f4 <__alt_data_end+0xff00b5f4>
    b8e8:	2005883a 	mov	r2,r4
    b8ec:	003f6906 	br	b694 <__alt_data_end+0xff00b694>
    b8f0:	1805883a 	mov	r2,r3
    b8f4:	003f0f06 	br	b534 <__alt_data_end+0xff00b534>
    b8f8:	1806943a 	slli	r3,r3,16
    b8fc:	9d66983a 	sll	r19,r19,r21
    b900:	39ffffcc 	andi	r7,r7,65535
    b904:	19c7883a 	add	r3,r3,r7
    b908:	98ffc32e 	bgeu	r19,r3,b818 <__alt_data_end+0xff00b818>
    b90c:	10bfffc4 	addi	r2,r2,-1
    b910:	003fc106 	br	b818 <__alt_data_end+0xff00b818>
    b914:	00800604 	movi	r2,24
    b918:	003f1106 	br	b560 <__alt_data_end+0xff00b560>
    b91c:	00800604 	movi	r2,24
    b920:	003f2706 	br	b5c0 <__alt_data_end+0xff00b5c0>
    b924:	00800604 	movi	r2,24
    b928:	003ece06 	br	b464 <__alt_data_end+0xff00b464>
    b92c:	0007883a 	mov	r3,zero
    b930:	00800044 	movi	r2,1
    b934:	003f5c06 	br	b6a8 <__alt_data_end+0xff00b6a8>
    b938:	813fa12e 	bgeu	r16,r4,b7c0 <__alt_data_end+0xff00b7c0>
    b93c:	10bfff84 	addi	r2,r2,-2
    b940:	85e1883a 	add	r16,r16,r23
    b944:	003f9f06 	br	b7c4 <__alt_data_end+0xff00b7c4>
    b948:	1c7f8a2e 	bgeu	r3,r17,b774 <__alt_data_end+0xff00b774>
    b94c:	31bfff84 	addi	r6,r6,-2
    b950:	1dc7883a 	add	r3,r3,r23
    b954:	003f8806 	br	b778 <__alt_data_end+0xff00b778>
    b958:	1805883a 	mov	r2,r3
    b95c:	003fde06 	br	b8d8 <__alt_data_end+0xff00b8d8>
    b960:	1839883a 	mov	fp,r3
    b964:	003fc906 	br	b88c <__alt_data_end+0xff00b88c>
    b968:	b5bfff84 	addi	r22,r22,-2
    b96c:	2449883a 	add	r4,r4,r17
    b970:	003f3406 	br	b644 <__alt_data_end+0xff00b644>
    b974:	b5bfff84 	addi	r22,r22,-2
    b978:	1445883a 	add	r2,r2,r17
    b97c:	003edb06 	br	b4ec <__alt_data_end+0xff00b4ec>

0000b980 <__umoddi3>:
    b980:	defff404 	addi	sp,sp,-48
    b984:	df000a15 	stw	fp,40(sp)
    b988:	dc400315 	stw	r17,12(sp)
    b98c:	dc000215 	stw	r16,8(sp)
    b990:	dfc00b15 	stw	ra,44(sp)
    b994:	ddc00915 	stw	r23,36(sp)
    b998:	dd800815 	stw	r22,32(sp)
    b99c:	dd400715 	stw	r21,28(sp)
    b9a0:	dd000615 	stw	r20,24(sp)
    b9a4:	dcc00515 	stw	r19,20(sp)
    b9a8:	dc800415 	stw	r18,16(sp)
    b9ac:	2021883a 	mov	r16,r4
    b9b0:	2823883a 	mov	r17,r5
    b9b4:	2839883a 	mov	fp,r5
    b9b8:	38003c1e 	bne	r7,zero,baac <__umoddi3+0x12c>
    b9bc:	3027883a 	mov	r19,r6
    b9c0:	2029883a 	mov	r20,r4
    b9c4:	2980512e 	bgeu	r5,r6,bb0c <__umoddi3+0x18c>
    b9c8:	00bfffd4 	movui	r2,65535
    b9cc:	11809a36 	bltu	r2,r6,bc38 <__umoddi3+0x2b8>
    b9d0:	01003fc4 	movi	r4,255
    b9d4:	2189803a 	cmpltu	r4,r4,r6
    b9d8:	200890fa 	slli	r4,r4,3
    b9dc:	3104d83a 	srl	r2,r6,r4
    b9e0:	00c00074 	movhi	r3,1
    b9e4:	18c19f04 	addi	r3,r3,1660
    b9e8:	1885883a 	add	r2,r3,r2
    b9ec:	10c00003 	ldbu	r3,0(r2)
    b9f0:	00800804 	movi	r2,32
    b9f4:	1909883a 	add	r4,r3,r4
    b9f8:	1125c83a 	sub	r18,r2,r4
    b9fc:	90000526 	beq	r18,zero,ba14 <__umoddi3+0x94>
    ba00:	8ca2983a 	sll	r17,r17,r18
    ba04:	8108d83a 	srl	r4,r16,r4
    ba08:	34a6983a 	sll	r19,r6,r18
    ba0c:	84a8983a 	sll	r20,r16,r18
    ba10:	2478b03a 	or	fp,r4,r17
    ba14:	982ed43a 	srli	r23,r19,16
    ba18:	e009883a 	mov	r4,fp
    ba1c:	9dbfffcc 	andi	r22,r19,65535
    ba20:	b80b883a 	mov	r5,r23
    ba24:	000c0140 	call	c014 <__umodsi3>
    ba28:	e009883a 	mov	r4,fp
    ba2c:	b80b883a 	mov	r5,r23
    ba30:	102b883a 	mov	r21,r2
    ba34:	000bfb00 	call	bfb0 <__udivsi3>
    ba38:	a806943a 	slli	r3,r21,16
    ba3c:	a008d43a 	srli	r4,r20,16
    ba40:	b085383a 	mul	r2,r22,r2
    ba44:	20c8b03a 	or	r4,r4,r3
    ba48:	2080032e 	bgeu	r4,r2,ba58 <__umoddi3+0xd8>
    ba4c:	24c9883a 	add	r4,r4,r19
    ba50:	24c00136 	bltu	r4,r19,ba58 <__umoddi3+0xd8>
    ba54:	20811036 	bltu	r4,r2,be98 <__umoddi3+0x518>
    ba58:	20abc83a 	sub	r21,r4,r2
    ba5c:	b80b883a 	mov	r5,r23
    ba60:	a809883a 	mov	r4,r21
    ba64:	000c0140 	call	c014 <__umodsi3>
    ba68:	1023883a 	mov	r17,r2
    ba6c:	b80b883a 	mov	r5,r23
    ba70:	a809883a 	mov	r4,r21
    ba74:	000bfb00 	call	bfb0 <__udivsi3>
    ba78:	8822943a 	slli	r17,r17,16
    ba7c:	b085383a 	mul	r2,r22,r2
    ba80:	a0ffffcc 	andi	r3,r20,65535
    ba84:	1c46b03a 	or	r3,r3,r17
    ba88:	1880042e 	bgeu	r3,r2,ba9c <__umoddi3+0x11c>
    ba8c:	1cc7883a 	add	r3,r3,r19
    ba90:	1cc00236 	bltu	r3,r19,ba9c <__umoddi3+0x11c>
    ba94:	1880012e 	bgeu	r3,r2,ba9c <__umoddi3+0x11c>
    ba98:	1cc7883a 	add	r3,r3,r19
    ba9c:	1885c83a 	sub	r2,r3,r2
    baa0:	1484d83a 	srl	r2,r2,r18
    baa4:	0007883a 	mov	r3,zero
    baa8:	00004f06 	br	bbe8 <__umoddi3+0x268>
    baac:	29c04c36 	bltu	r5,r7,bbe0 <__umoddi3+0x260>
    bab0:	00bfffd4 	movui	r2,65535
    bab4:	11c0582e 	bgeu	r2,r7,bc18 <__umoddi3+0x298>
    bab8:	00804034 	movhi	r2,256
    babc:	10bfffc4 	addi	r2,r2,-1
    bac0:	11c0e736 	bltu	r2,r7,be60 <__umoddi3+0x4e0>
    bac4:	01000404 	movi	r4,16
    bac8:	3904d83a 	srl	r2,r7,r4
    bacc:	00c00074 	movhi	r3,1
    bad0:	18c19f04 	addi	r3,r3,1660
    bad4:	1885883a 	add	r2,r3,r2
    bad8:	14c00003 	ldbu	r19,0(r2)
    badc:	00c00804 	movi	r3,32
    bae0:	9927883a 	add	r19,r19,r4
    bae4:	1ce9c83a 	sub	r20,r3,r19
    bae8:	a000581e 	bne	r20,zero,bc4c <__umoddi3+0x2cc>
    baec:	3c400136 	bltu	r7,r17,baf4 <__umoddi3+0x174>
    baf0:	8180eb36 	bltu	r16,r6,bea0 <__umoddi3+0x520>
    baf4:	8185c83a 	sub	r2,r16,r6
    baf8:	89e3c83a 	sub	r17,r17,r7
    bafc:	8089803a 	cmpltu	r4,r16,r2
    bb00:	8939c83a 	sub	fp,r17,r4
    bb04:	e007883a 	mov	r3,fp
    bb08:	00003706 	br	bbe8 <__umoddi3+0x268>
    bb0c:	3000041e 	bne	r6,zero,bb20 <__umoddi3+0x1a0>
    bb10:	000b883a 	mov	r5,zero
    bb14:	01000044 	movi	r4,1
    bb18:	000bfb00 	call	bfb0 <__udivsi3>
    bb1c:	1027883a 	mov	r19,r2
    bb20:	00bfffd4 	movui	r2,65535
    bb24:	14c0402e 	bgeu	r2,r19,bc28 <__umoddi3+0x2a8>
    bb28:	00804034 	movhi	r2,256
    bb2c:	10bfffc4 	addi	r2,r2,-1
    bb30:	14c0cd36 	bltu	r2,r19,be68 <__umoddi3+0x4e8>
    bb34:	00800404 	movi	r2,16
    bb38:	9886d83a 	srl	r3,r19,r2
    bb3c:	01000074 	movhi	r4,1
    bb40:	21019f04 	addi	r4,r4,1660
    bb44:	20c7883a 	add	r3,r4,r3
    bb48:	18c00003 	ldbu	r3,0(r3)
    bb4c:	1887883a 	add	r3,r3,r2
    bb50:	00800804 	movi	r2,32
    bb54:	10e5c83a 	sub	r18,r2,r3
    bb58:	9000901e 	bne	r18,zero,bd9c <__umoddi3+0x41c>
    bb5c:	982cd43a 	srli	r22,r19,16
    bb60:	8ce3c83a 	sub	r17,r17,r19
    bb64:	9d7fffcc 	andi	r21,r19,65535
    bb68:	b00b883a 	mov	r5,r22
    bb6c:	8809883a 	mov	r4,r17
    bb70:	000c0140 	call	c014 <__umodsi3>
    bb74:	8809883a 	mov	r4,r17
    bb78:	b00b883a 	mov	r5,r22
    bb7c:	1021883a 	mov	r16,r2
    bb80:	000bfb00 	call	bfb0 <__udivsi3>
    bb84:	8006943a 	slli	r3,r16,16
    bb88:	a008d43a 	srli	r4,r20,16
    bb8c:	1545383a 	mul	r2,r2,r21
    bb90:	20c8b03a 	or	r4,r4,r3
    bb94:	2080042e 	bgeu	r4,r2,bba8 <__umoddi3+0x228>
    bb98:	24c9883a 	add	r4,r4,r19
    bb9c:	24c00236 	bltu	r4,r19,bba8 <__umoddi3+0x228>
    bba0:	2080012e 	bgeu	r4,r2,bba8 <__umoddi3+0x228>
    bba4:	24c9883a 	add	r4,r4,r19
    bba8:	20a1c83a 	sub	r16,r4,r2
    bbac:	b00b883a 	mov	r5,r22
    bbb0:	8009883a 	mov	r4,r16
    bbb4:	000c0140 	call	c014 <__umodsi3>
    bbb8:	1023883a 	mov	r17,r2
    bbbc:	b00b883a 	mov	r5,r22
    bbc0:	8009883a 	mov	r4,r16
    bbc4:	000bfb00 	call	bfb0 <__udivsi3>
    bbc8:	8822943a 	slli	r17,r17,16
    bbcc:	1545383a 	mul	r2,r2,r21
    bbd0:	a53fffcc 	andi	r20,r20,65535
    bbd4:	a446b03a 	or	r3,r20,r17
    bbd8:	18bfb02e 	bgeu	r3,r2,ba9c <__alt_data_end+0xff00ba9c>
    bbdc:	003fab06 	br	ba8c <__alt_data_end+0xff00ba8c>
    bbe0:	2005883a 	mov	r2,r4
    bbe4:	2807883a 	mov	r3,r5
    bbe8:	dfc00b17 	ldw	ra,44(sp)
    bbec:	df000a17 	ldw	fp,40(sp)
    bbf0:	ddc00917 	ldw	r23,36(sp)
    bbf4:	dd800817 	ldw	r22,32(sp)
    bbf8:	dd400717 	ldw	r21,28(sp)
    bbfc:	dd000617 	ldw	r20,24(sp)
    bc00:	dcc00517 	ldw	r19,20(sp)
    bc04:	dc800417 	ldw	r18,16(sp)
    bc08:	dc400317 	ldw	r17,12(sp)
    bc0c:	dc000217 	ldw	r16,8(sp)
    bc10:	dec00c04 	addi	sp,sp,48
    bc14:	f800283a 	ret
    bc18:	04c03fc4 	movi	r19,255
    bc1c:	99c9803a 	cmpltu	r4,r19,r7
    bc20:	200890fa 	slli	r4,r4,3
    bc24:	003fa806 	br	bac8 <__alt_data_end+0xff00bac8>
    bc28:	00803fc4 	movi	r2,255
    bc2c:	14c5803a 	cmpltu	r2,r2,r19
    bc30:	100490fa 	slli	r2,r2,3
    bc34:	003fc006 	br	bb38 <__alt_data_end+0xff00bb38>
    bc38:	00804034 	movhi	r2,256
    bc3c:	10bfffc4 	addi	r2,r2,-1
    bc40:	11808b36 	bltu	r2,r6,be70 <__umoddi3+0x4f0>
    bc44:	01000404 	movi	r4,16
    bc48:	003f6406 	br	b9dc <__alt_data_end+0xff00b9dc>
    bc4c:	34c4d83a 	srl	r2,r6,r19
    bc50:	3d0e983a 	sll	r7,r7,r20
    bc54:	8cf8d83a 	srl	fp,r17,r19
    bc58:	8d10983a 	sll	r8,r17,r20
    bc5c:	38aab03a 	or	r21,r7,r2
    bc60:	a82cd43a 	srli	r22,r21,16
    bc64:	84e2d83a 	srl	r17,r16,r19
    bc68:	e009883a 	mov	r4,fp
    bc6c:	b00b883a 	mov	r5,r22
    bc70:	8a22b03a 	or	r17,r17,r8
    bc74:	3524983a 	sll	r18,r6,r20
    bc78:	000c0140 	call	c014 <__umodsi3>
    bc7c:	e009883a 	mov	r4,fp
    bc80:	b00b883a 	mov	r5,r22
    bc84:	102f883a 	mov	r23,r2
    bc88:	000bfb00 	call	bfb0 <__udivsi3>
    bc8c:	100d883a 	mov	r6,r2
    bc90:	b808943a 	slli	r4,r23,16
    bc94:	aa3fffcc 	andi	r8,r21,65535
    bc98:	8804d43a 	srli	r2,r17,16
    bc9c:	41af383a 	mul	r23,r8,r6
    bca0:	8520983a 	sll	r16,r16,r20
    bca4:	1104b03a 	or	r2,r2,r4
    bca8:	15c0042e 	bgeu	r2,r23,bcbc <__umoddi3+0x33c>
    bcac:	1545883a 	add	r2,r2,r21
    bcb0:	30ffffc4 	addi	r3,r6,-1
    bcb4:	1540742e 	bgeu	r2,r21,be88 <__umoddi3+0x508>
    bcb8:	180d883a 	mov	r6,r3
    bcbc:	15efc83a 	sub	r23,r2,r23
    bcc0:	b00b883a 	mov	r5,r22
    bcc4:	b809883a 	mov	r4,r23
    bcc8:	d9800115 	stw	r6,4(sp)
    bccc:	da000015 	stw	r8,0(sp)
    bcd0:	000c0140 	call	c014 <__umodsi3>
    bcd4:	b00b883a 	mov	r5,r22
    bcd8:	b809883a 	mov	r4,r23
    bcdc:	1039883a 	mov	fp,r2
    bce0:	000bfb00 	call	bfb0 <__udivsi3>
    bce4:	da000017 	ldw	r8,0(sp)
    bce8:	e038943a 	slli	fp,fp,16
    bcec:	100b883a 	mov	r5,r2
    bcf0:	4089383a 	mul	r4,r8,r2
    bcf4:	8a3fffcc 	andi	r8,r17,65535
    bcf8:	4710b03a 	or	r8,r8,fp
    bcfc:	d9800117 	ldw	r6,4(sp)
    bd00:	4100042e 	bgeu	r8,r4,bd14 <__umoddi3+0x394>
    bd04:	4551883a 	add	r8,r8,r21
    bd08:	10bfffc4 	addi	r2,r2,-1
    bd0c:	45405a2e 	bgeu	r8,r21,be78 <__umoddi3+0x4f8>
    bd10:	100b883a 	mov	r5,r2
    bd14:	300c943a 	slli	r6,r6,16
    bd18:	91ffffcc 	andi	r7,r18,65535
    bd1c:	9004d43a 	srli	r2,r18,16
    bd20:	314cb03a 	or	r6,r6,r5
    bd24:	317fffcc 	andi	r5,r6,65535
    bd28:	300cd43a 	srli	r6,r6,16
    bd2c:	29d3383a 	mul	r9,r5,r7
    bd30:	288b383a 	mul	r5,r5,r2
    bd34:	31cf383a 	mul	r7,r6,r7
    bd38:	4806d43a 	srli	r3,r9,16
    bd3c:	4111c83a 	sub	r8,r8,r4
    bd40:	29cb883a 	add	r5,r5,r7
    bd44:	194b883a 	add	r5,r3,r5
    bd48:	3085383a 	mul	r2,r6,r2
    bd4c:	29c0022e 	bgeu	r5,r7,bd58 <__umoddi3+0x3d8>
    bd50:	00c00074 	movhi	r3,1
    bd54:	10c5883a 	add	r2,r2,r3
    bd58:	2808d43a 	srli	r4,r5,16
    bd5c:	280a943a 	slli	r5,r5,16
    bd60:	4a7fffcc 	andi	r9,r9,65535
    bd64:	2085883a 	add	r2,r4,r2
    bd68:	2a4b883a 	add	r5,r5,r9
    bd6c:	40803636 	bltu	r8,r2,be48 <__umoddi3+0x4c8>
    bd70:	40804d26 	beq	r8,r2,bea8 <__umoddi3+0x528>
    bd74:	4089c83a 	sub	r4,r8,r2
    bd78:	280f883a 	mov	r7,r5
    bd7c:	81cfc83a 	sub	r7,r16,r7
    bd80:	81c7803a 	cmpltu	r3,r16,r7
    bd84:	20c7c83a 	sub	r3,r4,r3
    bd88:	1cc4983a 	sll	r2,r3,r19
    bd8c:	3d0ed83a 	srl	r7,r7,r20
    bd90:	1d06d83a 	srl	r3,r3,r20
    bd94:	11c4b03a 	or	r2,r2,r7
    bd98:	003f9306 	br	bbe8 <__alt_data_end+0xff00bbe8>
    bd9c:	9ca6983a 	sll	r19,r19,r18
    bda0:	88e8d83a 	srl	r20,r17,r3
    bda4:	80c4d83a 	srl	r2,r16,r3
    bda8:	982cd43a 	srli	r22,r19,16
    bdac:	8ca2983a 	sll	r17,r17,r18
    bdb0:	a009883a 	mov	r4,r20
    bdb4:	b00b883a 	mov	r5,r22
    bdb8:	1478b03a 	or	fp,r2,r17
    bdbc:	000c0140 	call	c014 <__umodsi3>
    bdc0:	a009883a 	mov	r4,r20
    bdc4:	b00b883a 	mov	r5,r22
    bdc8:	1023883a 	mov	r17,r2
    bdcc:	000bfb00 	call	bfb0 <__udivsi3>
    bdd0:	9d7fffcc 	andi	r21,r19,65535
    bdd4:	880a943a 	slli	r5,r17,16
    bdd8:	e008d43a 	srli	r4,fp,16
    bddc:	a885383a 	mul	r2,r21,r2
    bde0:	84a8983a 	sll	r20,r16,r18
    bde4:	2148b03a 	or	r4,r4,r5
    bde8:	2080042e 	bgeu	r4,r2,bdfc <__umoddi3+0x47c>
    bdec:	24c9883a 	add	r4,r4,r19
    bdf0:	24c00236 	bltu	r4,r19,bdfc <__umoddi3+0x47c>
    bdf4:	2080012e 	bgeu	r4,r2,bdfc <__umoddi3+0x47c>
    bdf8:	24c9883a 	add	r4,r4,r19
    bdfc:	20a3c83a 	sub	r17,r4,r2
    be00:	b00b883a 	mov	r5,r22
    be04:	8809883a 	mov	r4,r17
    be08:	000c0140 	call	c014 <__umodsi3>
    be0c:	102f883a 	mov	r23,r2
    be10:	8809883a 	mov	r4,r17
    be14:	b00b883a 	mov	r5,r22
    be18:	000bfb00 	call	bfb0 <__udivsi3>
    be1c:	b82e943a 	slli	r23,r23,16
    be20:	a885383a 	mul	r2,r21,r2
    be24:	e13fffcc 	andi	r4,fp,65535
    be28:	25c8b03a 	or	r4,r4,r23
    be2c:	2080042e 	bgeu	r4,r2,be40 <__umoddi3+0x4c0>
    be30:	24c9883a 	add	r4,r4,r19
    be34:	24c00236 	bltu	r4,r19,be40 <__umoddi3+0x4c0>
    be38:	2080012e 	bgeu	r4,r2,be40 <__umoddi3+0x4c0>
    be3c:	24c9883a 	add	r4,r4,r19
    be40:	20a3c83a 	sub	r17,r4,r2
    be44:	003f4806 	br	bb68 <__alt_data_end+0xff00bb68>
    be48:	2c8fc83a 	sub	r7,r5,r18
    be4c:	1545c83a 	sub	r2,r2,r21
    be50:	29cb803a 	cmpltu	r5,r5,r7
    be54:	1145c83a 	sub	r2,r2,r5
    be58:	4089c83a 	sub	r4,r8,r2
    be5c:	003fc706 	br	bd7c <__alt_data_end+0xff00bd7c>
    be60:	01000604 	movi	r4,24
    be64:	003f1806 	br	bac8 <__alt_data_end+0xff00bac8>
    be68:	00800604 	movi	r2,24
    be6c:	003f3206 	br	bb38 <__alt_data_end+0xff00bb38>
    be70:	01000604 	movi	r4,24
    be74:	003ed906 	br	b9dc <__alt_data_end+0xff00b9dc>
    be78:	413fa52e 	bgeu	r8,r4,bd10 <__alt_data_end+0xff00bd10>
    be7c:	297fff84 	addi	r5,r5,-2
    be80:	4551883a 	add	r8,r8,r21
    be84:	003fa306 	br	bd14 <__alt_data_end+0xff00bd14>
    be88:	15ff8b2e 	bgeu	r2,r23,bcb8 <__alt_data_end+0xff00bcb8>
    be8c:	31bfff84 	addi	r6,r6,-2
    be90:	1545883a 	add	r2,r2,r21
    be94:	003f8906 	br	bcbc <__alt_data_end+0xff00bcbc>
    be98:	24c9883a 	add	r4,r4,r19
    be9c:	003eee06 	br	ba58 <__alt_data_end+0xff00ba58>
    bea0:	8005883a 	mov	r2,r16
    bea4:	003f1706 	br	bb04 <__alt_data_end+0xff00bb04>
    bea8:	817fe736 	bltu	r16,r5,be48 <__alt_data_end+0xff00be48>
    beac:	280f883a 	mov	r7,r5
    beb0:	0009883a 	mov	r4,zero
    beb4:	003fb106 	br	bd7c <__alt_data_end+0xff00bd7c>

0000beb8 <__divsi3>:
    beb8:	20001b16 	blt	r4,zero,bf28 <__divsi3+0x70>
    bebc:	000f883a 	mov	r7,zero
    bec0:	28001616 	blt	r5,zero,bf1c <__divsi3+0x64>
    bec4:	200d883a 	mov	r6,r4
    bec8:	29001a2e 	bgeu	r5,r4,bf34 <__divsi3+0x7c>
    becc:	00800804 	movi	r2,32
    bed0:	00c00044 	movi	r3,1
    bed4:	00000106 	br	bedc <__divsi3+0x24>
    bed8:	10000d26 	beq	r2,zero,bf10 <__divsi3+0x58>
    bedc:	294b883a 	add	r5,r5,r5
    bee0:	10bfffc4 	addi	r2,r2,-1
    bee4:	18c7883a 	add	r3,r3,r3
    bee8:	293ffb36 	bltu	r5,r4,bed8 <__alt_data_end+0xff00bed8>
    beec:	0005883a 	mov	r2,zero
    bef0:	18000726 	beq	r3,zero,bf10 <__divsi3+0x58>
    bef4:	0005883a 	mov	r2,zero
    bef8:	31400236 	bltu	r6,r5,bf04 <__divsi3+0x4c>
    befc:	314dc83a 	sub	r6,r6,r5
    bf00:	10c4b03a 	or	r2,r2,r3
    bf04:	1806d07a 	srli	r3,r3,1
    bf08:	280ad07a 	srli	r5,r5,1
    bf0c:	183ffa1e 	bne	r3,zero,bef8 <__alt_data_end+0xff00bef8>
    bf10:	38000126 	beq	r7,zero,bf18 <__divsi3+0x60>
    bf14:	0085c83a 	sub	r2,zero,r2
    bf18:	f800283a 	ret
    bf1c:	014bc83a 	sub	r5,zero,r5
    bf20:	39c0005c 	xori	r7,r7,1
    bf24:	003fe706 	br	bec4 <__alt_data_end+0xff00bec4>
    bf28:	0109c83a 	sub	r4,zero,r4
    bf2c:	01c00044 	movi	r7,1
    bf30:	003fe306 	br	bec0 <__alt_data_end+0xff00bec0>
    bf34:	00c00044 	movi	r3,1
    bf38:	003fee06 	br	bef4 <__alt_data_end+0xff00bef4>

0000bf3c <__modsi3>:
    bf3c:	20001716 	blt	r4,zero,bf9c <__modsi3+0x60>
    bf40:	000f883a 	mov	r7,zero
    bf44:	2005883a 	mov	r2,r4
    bf48:	28001216 	blt	r5,zero,bf94 <__modsi3+0x58>
    bf4c:	2900162e 	bgeu	r5,r4,bfa8 <__modsi3+0x6c>
    bf50:	01800804 	movi	r6,32
    bf54:	00c00044 	movi	r3,1
    bf58:	00000106 	br	bf60 <__modsi3+0x24>
    bf5c:	30000a26 	beq	r6,zero,bf88 <__modsi3+0x4c>
    bf60:	294b883a 	add	r5,r5,r5
    bf64:	31bfffc4 	addi	r6,r6,-1
    bf68:	18c7883a 	add	r3,r3,r3
    bf6c:	293ffb36 	bltu	r5,r4,bf5c <__alt_data_end+0xff00bf5c>
    bf70:	18000526 	beq	r3,zero,bf88 <__modsi3+0x4c>
    bf74:	1806d07a 	srli	r3,r3,1
    bf78:	11400136 	bltu	r2,r5,bf80 <__modsi3+0x44>
    bf7c:	1145c83a 	sub	r2,r2,r5
    bf80:	280ad07a 	srli	r5,r5,1
    bf84:	183ffb1e 	bne	r3,zero,bf74 <__alt_data_end+0xff00bf74>
    bf88:	38000126 	beq	r7,zero,bf90 <__modsi3+0x54>
    bf8c:	0085c83a 	sub	r2,zero,r2
    bf90:	f800283a 	ret
    bf94:	014bc83a 	sub	r5,zero,r5
    bf98:	003fec06 	br	bf4c <__alt_data_end+0xff00bf4c>
    bf9c:	0109c83a 	sub	r4,zero,r4
    bfa0:	01c00044 	movi	r7,1
    bfa4:	003fe706 	br	bf44 <__alt_data_end+0xff00bf44>
    bfa8:	00c00044 	movi	r3,1
    bfac:	003ff106 	br	bf74 <__alt_data_end+0xff00bf74>

0000bfb0 <__udivsi3>:
    bfb0:	200d883a 	mov	r6,r4
    bfb4:	2900152e 	bgeu	r5,r4,c00c <__udivsi3+0x5c>
    bfb8:	28001416 	blt	r5,zero,c00c <__udivsi3+0x5c>
    bfbc:	00800804 	movi	r2,32
    bfc0:	00c00044 	movi	r3,1
    bfc4:	00000206 	br	bfd0 <__udivsi3+0x20>
    bfc8:	10000e26 	beq	r2,zero,c004 <__udivsi3+0x54>
    bfcc:	28000516 	blt	r5,zero,bfe4 <__udivsi3+0x34>
    bfd0:	294b883a 	add	r5,r5,r5
    bfd4:	10bfffc4 	addi	r2,r2,-1
    bfd8:	18c7883a 	add	r3,r3,r3
    bfdc:	293ffa36 	bltu	r5,r4,bfc8 <__alt_data_end+0xff00bfc8>
    bfe0:	18000826 	beq	r3,zero,c004 <__udivsi3+0x54>
    bfe4:	0005883a 	mov	r2,zero
    bfe8:	31400236 	bltu	r6,r5,bff4 <__udivsi3+0x44>
    bfec:	314dc83a 	sub	r6,r6,r5
    bff0:	10c4b03a 	or	r2,r2,r3
    bff4:	1806d07a 	srli	r3,r3,1
    bff8:	280ad07a 	srli	r5,r5,1
    bffc:	183ffa1e 	bne	r3,zero,bfe8 <__alt_data_end+0xff00bfe8>
    c000:	f800283a 	ret
    c004:	0005883a 	mov	r2,zero
    c008:	f800283a 	ret
    c00c:	00c00044 	movi	r3,1
    c010:	003ff406 	br	bfe4 <__alt_data_end+0xff00bfe4>

0000c014 <__umodsi3>:
    c014:	2005883a 	mov	r2,r4
    c018:	2900122e 	bgeu	r5,r4,c064 <__umodsi3+0x50>
    c01c:	28001116 	blt	r5,zero,c064 <__umodsi3+0x50>
    c020:	01800804 	movi	r6,32
    c024:	00c00044 	movi	r3,1
    c028:	00000206 	br	c034 <__umodsi3+0x20>
    c02c:	30000c26 	beq	r6,zero,c060 <__umodsi3+0x4c>
    c030:	28000516 	blt	r5,zero,c048 <__umodsi3+0x34>
    c034:	294b883a 	add	r5,r5,r5
    c038:	31bfffc4 	addi	r6,r6,-1
    c03c:	18c7883a 	add	r3,r3,r3
    c040:	293ffa36 	bltu	r5,r4,c02c <__alt_data_end+0xff00c02c>
    c044:	18000626 	beq	r3,zero,c060 <__umodsi3+0x4c>
    c048:	1806d07a 	srli	r3,r3,1
    c04c:	11400136 	bltu	r2,r5,c054 <__umodsi3+0x40>
    c050:	1145c83a 	sub	r2,r2,r5
    c054:	280ad07a 	srli	r5,r5,1
    c058:	183ffb1e 	bne	r3,zero,c048 <__alt_data_end+0xff00c048>
    c05c:	f800283a 	ret
    c060:	f800283a 	ret
    c064:	00c00044 	movi	r3,1
    c068:	003ff706 	br	c048 <__alt_data_end+0xff00c048>

0000c06c <__adddf3>:
    c06c:	02c00434 	movhi	r11,16
    c070:	5affffc4 	addi	r11,r11,-1
    c074:	2806d7fa 	srli	r3,r5,31
    c078:	2ad4703a 	and	r10,r5,r11
    c07c:	3ad2703a 	and	r9,r7,r11
    c080:	3804d53a 	srli	r2,r7,20
    c084:	3018d77a 	srli	r12,r6,29
    c088:	280ad53a 	srli	r5,r5,20
    c08c:	501490fa 	slli	r10,r10,3
    c090:	2010d77a 	srli	r8,r4,29
    c094:	481290fa 	slli	r9,r9,3
    c098:	380ed7fa 	srli	r7,r7,31
    c09c:	defffb04 	addi	sp,sp,-20
    c0a0:	dc800215 	stw	r18,8(sp)
    c0a4:	dc400115 	stw	r17,4(sp)
    c0a8:	dc000015 	stw	r16,0(sp)
    c0ac:	dfc00415 	stw	ra,16(sp)
    c0b0:	dcc00315 	stw	r19,12(sp)
    c0b4:	1c803fcc 	andi	r18,r3,255
    c0b8:	2c01ffcc 	andi	r16,r5,2047
    c0bc:	5210b03a 	or	r8,r10,r8
    c0c0:	202290fa 	slli	r17,r4,3
    c0c4:	1081ffcc 	andi	r2,r2,2047
    c0c8:	4b12b03a 	or	r9,r9,r12
    c0cc:	300c90fa 	slli	r6,r6,3
    c0d0:	91c07526 	beq	r18,r7,c2a8 <__adddf3+0x23c>
    c0d4:	8087c83a 	sub	r3,r16,r2
    c0d8:	00c0ab0e 	bge	zero,r3,c388 <__adddf3+0x31c>
    c0dc:	10002a1e 	bne	r2,zero,c188 <__adddf3+0x11c>
    c0e0:	4984b03a 	or	r2,r9,r6
    c0e4:	1000961e 	bne	r2,zero,c340 <__adddf3+0x2d4>
    c0e8:	888001cc 	andi	r2,r17,7
    c0ec:	10000726 	beq	r2,zero,c10c <__adddf3+0xa0>
    c0f0:	888003cc 	andi	r2,r17,15
    c0f4:	00c00104 	movi	r3,4
    c0f8:	10c00426 	beq	r2,r3,c10c <__adddf3+0xa0>
    c0fc:	88c7883a 	add	r3,r17,r3
    c100:	1c63803a 	cmpltu	r17,r3,r17
    c104:	4451883a 	add	r8,r8,r17
    c108:	1823883a 	mov	r17,r3
    c10c:	4080202c 	andhi	r2,r8,128
    c110:	10005926 	beq	r2,zero,c278 <__adddf3+0x20c>
    c114:	84000044 	addi	r16,r16,1
    c118:	0081ffc4 	movi	r2,2047
    c11c:	8080ba26 	beq	r16,r2,c408 <__adddf3+0x39c>
    c120:	00bfe034 	movhi	r2,65408
    c124:	10bfffc4 	addi	r2,r2,-1
    c128:	4090703a 	and	r8,r8,r2
    c12c:	4004977a 	slli	r2,r8,29
    c130:	4010927a 	slli	r8,r8,9
    c134:	8822d0fa 	srli	r17,r17,3
    c138:	8401ffcc 	andi	r16,r16,2047
    c13c:	4010d33a 	srli	r8,r8,12
    c140:	9007883a 	mov	r3,r18
    c144:	1444b03a 	or	r2,r2,r17
    c148:	8401ffcc 	andi	r16,r16,2047
    c14c:	8020953a 	slli	r16,r16,20
    c150:	18c03fcc 	andi	r3,r3,255
    c154:	01000434 	movhi	r4,16
    c158:	213fffc4 	addi	r4,r4,-1
    c15c:	180697fa 	slli	r3,r3,31
    c160:	4110703a 	and	r8,r8,r4
    c164:	4410b03a 	or	r8,r8,r16
    c168:	40c6b03a 	or	r3,r8,r3
    c16c:	dfc00417 	ldw	ra,16(sp)
    c170:	dcc00317 	ldw	r19,12(sp)
    c174:	dc800217 	ldw	r18,8(sp)
    c178:	dc400117 	ldw	r17,4(sp)
    c17c:	dc000017 	ldw	r16,0(sp)
    c180:	dec00504 	addi	sp,sp,20
    c184:	f800283a 	ret
    c188:	0081ffc4 	movi	r2,2047
    c18c:	80bfd626 	beq	r16,r2,c0e8 <__alt_data_end+0xff00c0e8>
    c190:	4a402034 	orhi	r9,r9,128
    c194:	00800e04 	movi	r2,56
    c198:	10c09f16 	blt	r2,r3,c418 <__adddf3+0x3ac>
    c19c:	008007c4 	movi	r2,31
    c1a0:	10c0c216 	blt	r2,r3,c4ac <__adddf3+0x440>
    c1a4:	00800804 	movi	r2,32
    c1a8:	10c5c83a 	sub	r2,r2,r3
    c1ac:	488a983a 	sll	r5,r9,r2
    c1b0:	30c8d83a 	srl	r4,r6,r3
    c1b4:	3084983a 	sll	r2,r6,r2
    c1b8:	48c6d83a 	srl	r3,r9,r3
    c1bc:	290cb03a 	or	r6,r5,r4
    c1c0:	1004c03a 	cmpne	r2,r2,zero
    c1c4:	308cb03a 	or	r6,r6,r2
    c1c8:	898dc83a 	sub	r6,r17,r6
    c1cc:	89a3803a 	cmpltu	r17,r17,r6
    c1d0:	40d1c83a 	sub	r8,r8,r3
    c1d4:	4451c83a 	sub	r8,r8,r17
    c1d8:	3023883a 	mov	r17,r6
    c1dc:	4080202c 	andhi	r2,r8,128
    c1e0:	10002326 	beq	r2,zero,c270 <__adddf3+0x204>
    c1e4:	04c02034 	movhi	r19,128
    c1e8:	9cffffc4 	addi	r19,r19,-1
    c1ec:	44e6703a 	and	r19,r8,r19
    c1f0:	98007626 	beq	r19,zero,c3cc <__adddf3+0x360>
    c1f4:	9809883a 	mov	r4,r19
    c1f8:	000e6700 	call	e670 <__clzsi2>
    c1fc:	10fffe04 	addi	r3,r2,-8
    c200:	010007c4 	movi	r4,31
    c204:	20c07716 	blt	r4,r3,c3e4 <__adddf3+0x378>
    c208:	00800804 	movi	r2,32
    c20c:	10c5c83a 	sub	r2,r2,r3
    c210:	8884d83a 	srl	r2,r17,r2
    c214:	98d0983a 	sll	r8,r19,r3
    c218:	88e2983a 	sll	r17,r17,r3
    c21c:	1204b03a 	or	r2,r2,r8
    c220:	1c007416 	blt	r3,r16,c3f4 <__adddf3+0x388>
    c224:	1c21c83a 	sub	r16,r3,r16
    c228:	82000044 	addi	r8,r16,1
    c22c:	00c007c4 	movi	r3,31
    c230:	1a009116 	blt	r3,r8,c478 <__adddf3+0x40c>
    c234:	00c00804 	movi	r3,32
    c238:	1a07c83a 	sub	r3,r3,r8
    c23c:	8a08d83a 	srl	r4,r17,r8
    c240:	88e2983a 	sll	r17,r17,r3
    c244:	10c6983a 	sll	r3,r2,r3
    c248:	1210d83a 	srl	r8,r2,r8
    c24c:	8804c03a 	cmpne	r2,r17,zero
    c250:	1906b03a 	or	r3,r3,r4
    c254:	18a2b03a 	or	r17,r3,r2
    c258:	0021883a 	mov	r16,zero
    c25c:	003fa206 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c260:	1890b03a 	or	r8,r3,r2
    c264:	40017d26 	beq	r8,zero,c85c <__adddf3+0x7f0>
    c268:	1011883a 	mov	r8,r2
    c26c:	1823883a 	mov	r17,r3
    c270:	888001cc 	andi	r2,r17,7
    c274:	103f9e1e 	bne	r2,zero,c0f0 <__alt_data_end+0xff00c0f0>
    c278:	4004977a 	slli	r2,r8,29
    c27c:	8822d0fa 	srli	r17,r17,3
    c280:	4010d0fa 	srli	r8,r8,3
    c284:	9007883a 	mov	r3,r18
    c288:	1444b03a 	or	r2,r2,r17
    c28c:	0101ffc4 	movi	r4,2047
    c290:	81002426 	beq	r16,r4,c324 <__adddf3+0x2b8>
    c294:	8120703a 	and	r16,r16,r4
    c298:	01000434 	movhi	r4,16
    c29c:	213fffc4 	addi	r4,r4,-1
    c2a0:	4110703a 	and	r8,r8,r4
    c2a4:	003fa806 	br	c148 <__alt_data_end+0xff00c148>
    c2a8:	8089c83a 	sub	r4,r16,r2
    c2ac:	01005e0e 	bge	zero,r4,c428 <__adddf3+0x3bc>
    c2b0:	10002b26 	beq	r2,zero,c360 <__adddf3+0x2f4>
    c2b4:	0081ffc4 	movi	r2,2047
    c2b8:	80bf8b26 	beq	r16,r2,c0e8 <__alt_data_end+0xff00c0e8>
    c2bc:	4a402034 	orhi	r9,r9,128
    c2c0:	00800e04 	movi	r2,56
    c2c4:	1100a40e 	bge	r2,r4,c558 <__adddf3+0x4ec>
    c2c8:	498cb03a 	or	r6,r9,r6
    c2cc:	300ac03a 	cmpne	r5,r6,zero
    c2d0:	0013883a 	mov	r9,zero
    c2d4:	2c4b883a 	add	r5,r5,r17
    c2d8:	2c63803a 	cmpltu	r17,r5,r17
    c2dc:	4a11883a 	add	r8,r9,r8
    c2e0:	8a11883a 	add	r8,r17,r8
    c2e4:	2823883a 	mov	r17,r5
    c2e8:	4080202c 	andhi	r2,r8,128
    c2ec:	103fe026 	beq	r2,zero,c270 <__alt_data_end+0xff00c270>
    c2f0:	84000044 	addi	r16,r16,1
    c2f4:	0081ffc4 	movi	r2,2047
    c2f8:	8080d226 	beq	r16,r2,c644 <__adddf3+0x5d8>
    c2fc:	00bfe034 	movhi	r2,65408
    c300:	10bfffc4 	addi	r2,r2,-1
    c304:	4090703a 	and	r8,r8,r2
    c308:	880ad07a 	srli	r5,r17,1
    c30c:	400897fa 	slli	r4,r8,31
    c310:	88c0004c 	andi	r3,r17,1
    c314:	28e2b03a 	or	r17,r5,r3
    c318:	4010d07a 	srli	r8,r8,1
    c31c:	2462b03a 	or	r17,r4,r17
    c320:	003f7106 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c324:	4088b03a 	or	r4,r8,r2
    c328:	20014526 	beq	r4,zero,c840 <__adddf3+0x7d4>
    c32c:	01000434 	movhi	r4,16
    c330:	42000234 	orhi	r8,r8,8
    c334:	213fffc4 	addi	r4,r4,-1
    c338:	4110703a 	and	r8,r8,r4
    c33c:	003f8206 	br	c148 <__alt_data_end+0xff00c148>
    c340:	18ffffc4 	addi	r3,r3,-1
    c344:	1800491e 	bne	r3,zero,c46c <__adddf3+0x400>
    c348:	898bc83a 	sub	r5,r17,r6
    c34c:	8963803a 	cmpltu	r17,r17,r5
    c350:	4251c83a 	sub	r8,r8,r9
    c354:	4451c83a 	sub	r8,r8,r17
    c358:	2823883a 	mov	r17,r5
    c35c:	003f9f06 	br	c1dc <__alt_data_end+0xff00c1dc>
    c360:	4984b03a 	or	r2,r9,r6
    c364:	103f6026 	beq	r2,zero,c0e8 <__alt_data_end+0xff00c0e8>
    c368:	213fffc4 	addi	r4,r4,-1
    c36c:	2000931e 	bne	r4,zero,c5bc <__adddf3+0x550>
    c370:	898d883a 	add	r6,r17,r6
    c374:	3463803a 	cmpltu	r17,r6,r17
    c378:	4251883a 	add	r8,r8,r9
    c37c:	8a11883a 	add	r8,r17,r8
    c380:	3023883a 	mov	r17,r6
    c384:	003fd806 	br	c2e8 <__alt_data_end+0xff00c2e8>
    c388:	1800541e 	bne	r3,zero,c4dc <__adddf3+0x470>
    c38c:	80800044 	addi	r2,r16,1
    c390:	1081ffcc 	andi	r2,r2,2047
    c394:	00c00044 	movi	r3,1
    c398:	1880a00e 	bge	r3,r2,c61c <__adddf3+0x5b0>
    c39c:	8989c83a 	sub	r4,r17,r6
    c3a0:	8905803a 	cmpltu	r2,r17,r4
    c3a4:	4267c83a 	sub	r19,r8,r9
    c3a8:	98a7c83a 	sub	r19,r19,r2
    c3ac:	9880202c 	andhi	r2,r19,128
    c3b0:	10006326 	beq	r2,zero,c540 <__adddf3+0x4d4>
    c3b4:	3463c83a 	sub	r17,r6,r17
    c3b8:	4a07c83a 	sub	r3,r9,r8
    c3bc:	344d803a 	cmpltu	r6,r6,r17
    c3c0:	19a7c83a 	sub	r19,r3,r6
    c3c4:	3825883a 	mov	r18,r7
    c3c8:	983f8a1e 	bne	r19,zero,c1f4 <__alt_data_end+0xff00c1f4>
    c3cc:	8809883a 	mov	r4,r17
    c3d0:	000e6700 	call	e670 <__clzsi2>
    c3d4:	10800804 	addi	r2,r2,32
    c3d8:	10fffe04 	addi	r3,r2,-8
    c3dc:	010007c4 	movi	r4,31
    c3e0:	20ff890e 	bge	r4,r3,c208 <__alt_data_end+0xff00c208>
    c3e4:	10bff604 	addi	r2,r2,-40
    c3e8:	8884983a 	sll	r2,r17,r2
    c3ec:	0023883a 	mov	r17,zero
    c3f0:	1c3f8c0e 	bge	r3,r16,c224 <__alt_data_end+0xff00c224>
    c3f4:	023fe034 	movhi	r8,65408
    c3f8:	423fffc4 	addi	r8,r8,-1
    c3fc:	80e1c83a 	sub	r16,r16,r3
    c400:	1210703a 	and	r8,r2,r8
    c404:	003f3806 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c408:	9007883a 	mov	r3,r18
    c40c:	0011883a 	mov	r8,zero
    c410:	0005883a 	mov	r2,zero
    c414:	003f4c06 	br	c148 <__alt_data_end+0xff00c148>
    c418:	498cb03a 	or	r6,r9,r6
    c41c:	300cc03a 	cmpne	r6,r6,zero
    c420:	0007883a 	mov	r3,zero
    c424:	003f6806 	br	c1c8 <__alt_data_end+0xff00c1c8>
    c428:	20009c1e 	bne	r4,zero,c69c <__adddf3+0x630>
    c42c:	80800044 	addi	r2,r16,1
    c430:	1141ffcc 	andi	r5,r2,2047
    c434:	01000044 	movi	r4,1
    c438:	2140670e 	bge	r4,r5,c5d8 <__adddf3+0x56c>
    c43c:	0101ffc4 	movi	r4,2047
    c440:	11007f26 	beq	r2,r4,c640 <__adddf3+0x5d4>
    c444:	898d883a 	add	r6,r17,r6
    c448:	4247883a 	add	r3,r8,r9
    c44c:	3451803a 	cmpltu	r8,r6,r17
    c450:	40d1883a 	add	r8,r8,r3
    c454:	402297fa 	slli	r17,r8,31
    c458:	300cd07a 	srli	r6,r6,1
    c45c:	4010d07a 	srli	r8,r8,1
    c460:	1021883a 	mov	r16,r2
    c464:	89a2b03a 	or	r17,r17,r6
    c468:	003f1f06 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c46c:	0081ffc4 	movi	r2,2047
    c470:	80bf481e 	bne	r16,r2,c194 <__alt_data_end+0xff00c194>
    c474:	003f1c06 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c478:	843ff844 	addi	r16,r16,-31
    c47c:	01000804 	movi	r4,32
    c480:	1406d83a 	srl	r3,r2,r16
    c484:	41005026 	beq	r8,r4,c5c8 <__adddf3+0x55c>
    c488:	01001004 	movi	r4,64
    c48c:	2211c83a 	sub	r8,r4,r8
    c490:	1204983a 	sll	r2,r2,r8
    c494:	88a2b03a 	or	r17,r17,r2
    c498:	8822c03a 	cmpne	r17,r17,zero
    c49c:	1c62b03a 	or	r17,r3,r17
    c4a0:	0011883a 	mov	r8,zero
    c4a4:	0021883a 	mov	r16,zero
    c4a8:	003f7106 	br	c270 <__alt_data_end+0xff00c270>
    c4ac:	193ff804 	addi	r4,r3,-32
    c4b0:	00800804 	movi	r2,32
    c4b4:	4908d83a 	srl	r4,r9,r4
    c4b8:	18804526 	beq	r3,r2,c5d0 <__adddf3+0x564>
    c4bc:	00801004 	movi	r2,64
    c4c0:	10c5c83a 	sub	r2,r2,r3
    c4c4:	4886983a 	sll	r3,r9,r2
    c4c8:	198cb03a 	or	r6,r3,r6
    c4cc:	300cc03a 	cmpne	r6,r6,zero
    c4d0:	218cb03a 	or	r6,r4,r6
    c4d4:	0007883a 	mov	r3,zero
    c4d8:	003f3b06 	br	c1c8 <__alt_data_end+0xff00c1c8>
    c4dc:	80002a26 	beq	r16,zero,c588 <__adddf3+0x51c>
    c4e0:	0101ffc4 	movi	r4,2047
    c4e4:	11006826 	beq	r2,r4,c688 <__adddf3+0x61c>
    c4e8:	00c7c83a 	sub	r3,zero,r3
    c4ec:	42002034 	orhi	r8,r8,128
    c4f0:	01000e04 	movi	r4,56
    c4f4:	20c07c16 	blt	r4,r3,c6e8 <__adddf3+0x67c>
    c4f8:	010007c4 	movi	r4,31
    c4fc:	20c0da16 	blt	r4,r3,c868 <__adddf3+0x7fc>
    c500:	01000804 	movi	r4,32
    c504:	20c9c83a 	sub	r4,r4,r3
    c508:	4114983a 	sll	r10,r8,r4
    c50c:	88cad83a 	srl	r5,r17,r3
    c510:	8908983a 	sll	r4,r17,r4
    c514:	40c6d83a 	srl	r3,r8,r3
    c518:	5162b03a 	or	r17,r10,r5
    c51c:	2008c03a 	cmpne	r4,r4,zero
    c520:	8922b03a 	or	r17,r17,r4
    c524:	3463c83a 	sub	r17,r6,r17
    c528:	48c7c83a 	sub	r3,r9,r3
    c52c:	344d803a 	cmpltu	r6,r6,r17
    c530:	1991c83a 	sub	r8,r3,r6
    c534:	1021883a 	mov	r16,r2
    c538:	3825883a 	mov	r18,r7
    c53c:	003f2706 	br	c1dc <__alt_data_end+0xff00c1dc>
    c540:	24d0b03a 	or	r8,r4,r19
    c544:	40001b1e 	bne	r8,zero,c5b4 <__adddf3+0x548>
    c548:	0005883a 	mov	r2,zero
    c54c:	0007883a 	mov	r3,zero
    c550:	0021883a 	mov	r16,zero
    c554:	003f4d06 	br	c28c <__alt_data_end+0xff00c28c>
    c558:	008007c4 	movi	r2,31
    c55c:	11003c16 	blt	r2,r4,c650 <__adddf3+0x5e4>
    c560:	00800804 	movi	r2,32
    c564:	1105c83a 	sub	r2,r2,r4
    c568:	488e983a 	sll	r7,r9,r2
    c56c:	310ad83a 	srl	r5,r6,r4
    c570:	3084983a 	sll	r2,r6,r2
    c574:	4912d83a 	srl	r9,r9,r4
    c578:	394ab03a 	or	r5,r7,r5
    c57c:	1004c03a 	cmpne	r2,r2,zero
    c580:	288ab03a 	or	r5,r5,r2
    c584:	003f5306 	br	c2d4 <__alt_data_end+0xff00c2d4>
    c588:	4448b03a 	or	r4,r8,r17
    c58c:	20003e26 	beq	r4,zero,c688 <__adddf3+0x61c>
    c590:	00c6303a 	nor	r3,zero,r3
    c594:	18003a1e 	bne	r3,zero,c680 <__adddf3+0x614>
    c598:	3463c83a 	sub	r17,r6,r17
    c59c:	4a07c83a 	sub	r3,r9,r8
    c5a0:	344d803a 	cmpltu	r6,r6,r17
    c5a4:	1991c83a 	sub	r8,r3,r6
    c5a8:	1021883a 	mov	r16,r2
    c5ac:	3825883a 	mov	r18,r7
    c5b0:	003f0a06 	br	c1dc <__alt_data_end+0xff00c1dc>
    c5b4:	2023883a 	mov	r17,r4
    c5b8:	003f0d06 	br	c1f0 <__alt_data_end+0xff00c1f0>
    c5bc:	0081ffc4 	movi	r2,2047
    c5c0:	80bf3f1e 	bne	r16,r2,c2c0 <__alt_data_end+0xff00c2c0>
    c5c4:	003ec806 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c5c8:	0005883a 	mov	r2,zero
    c5cc:	003fb106 	br	c494 <__alt_data_end+0xff00c494>
    c5d0:	0007883a 	mov	r3,zero
    c5d4:	003fbc06 	br	c4c8 <__alt_data_end+0xff00c4c8>
    c5d8:	4444b03a 	or	r2,r8,r17
    c5dc:	8000871e 	bne	r16,zero,c7fc <__adddf3+0x790>
    c5e0:	1000ba26 	beq	r2,zero,c8cc <__adddf3+0x860>
    c5e4:	4984b03a 	or	r2,r9,r6
    c5e8:	103ebf26 	beq	r2,zero,c0e8 <__alt_data_end+0xff00c0e8>
    c5ec:	8985883a 	add	r2,r17,r6
    c5f0:	4247883a 	add	r3,r8,r9
    c5f4:	1451803a 	cmpltu	r8,r2,r17
    c5f8:	40d1883a 	add	r8,r8,r3
    c5fc:	40c0202c 	andhi	r3,r8,128
    c600:	1023883a 	mov	r17,r2
    c604:	183f1a26 	beq	r3,zero,c270 <__alt_data_end+0xff00c270>
    c608:	00bfe034 	movhi	r2,65408
    c60c:	10bfffc4 	addi	r2,r2,-1
    c610:	2021883a 	mov	r16,r4
    c614:	4090703a 	and	r8,r8,r2
    c618:	003eb306 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c61c:	4444b03a 	or	r2,r8,r17
    c620:	8000291e 	bne	r16,zero,c6c8 <__adddf3+0x65c>
    c624:	10004b1e 	bne	r2,zero,c754 <__adddf3+0x6e8>
    c628:	4990b03a 	or	r8,r9,r6
    c62c:	40008b26 	beq	r8,zero,c85c <__adddf3+0x7f0>
    c630:	4811883a 	mov	r8,r9
    c634:	3023883a 	mov	r17,r6
    c638:	3825883a 	mov	r18,r7
    c63c:	003eaa06 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c640:	1021883a 	mov	r16,r2
    c644:	0011883a 	mov	r8,zero
    c648:	0005883a 	mov	r2,zero
    c64c:	003f0f06 	br	c28c <__alt_data_end+0xff00c28c>
    c650:	217ff804 	addi	r5,r4,-32
    c654:	00800804 	movi	r2,32
    c658:	494ad83a 	srl	r5,r9,r5
    c65c:	20807d26 	beq	r4,r2,c854 <__adddf3+0x7e8>
    c660:	00801004 	movi	r2,64
    c664:	1109c83a 	sub	r4,r2,r4
    c668:	4912983a 	sll	r9,r9,r4
    c66c:	498cb03a 	or	r6,r9,r6
    c670:	300cc03a 	cmpne	r6,r6,zero
    c674:	298ab03a 	or	r5,r5,r6
    c678:	0013883a 	mov	r9,zero
    c67c:	003f1506 	br	c2d4 <__alt_data_end+0xff00c2d4>
    c680:	0101ffc4 	movi	r4,2047
    c684:	113f9a1e 	bne	r2,r4,c4f0 <__alt_data_end+0xff00c4f0>
    c688:	4811883a 	mov	r8,r9
    c68c:	3023883a 	mov	r17,r6
    c690:	1021883a 	mov	r16,r2
    c694:	3825883a 	mov	r18,r7
    c698:	003e9306 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c69c:	8000161e 	bne	r16,zero,c6f8 <__adddf3+0x68c>
    c6a0:	444ab03a 	or	r5,r8,r17
    c6a4:	28005126 	beq	r5,zero,c7ec <__adddf3+0x780>
    c6a8:	0108303a 	nor	r4,zero,r4
    c6ac:	20004d1e 	bne	r4,zero,c7e4 <__adddf3+0x778>
    c6b0:	89a3883a 	add	r17,r17,r6
    c6b4:	4253883a 	add	r9,r8,r9
    c6b8:	898d803a 	cmpltu	r6,r17,r6
    c6bc:	3251883a 	add	r8,r6,r9
    c6c0:	1021883a 	mov	r16,r2
    c6c4:	003f0806 	br	c2e8 <__alt_data_end+0xff00c2e8>
    c6c8:	1000301e 	bne	r2,zero,c78c <__adddf3+0x720>
    c6cc:	4984b03a 	or	r2,r9,r6
    c6d0:	10007126 	beq	r2,zero,c898 <__adddf3+0x82c>
    c6d4:	4811883a 	mov	r8,r9
    c6d8:	3023883a 	mov	r17,r6
    c6dc:	3825883a 	mov	r18,r7
    c6e0:	0401ffc4 	movi	r16,2047
    c6e4:	003e8006 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c6e8:	4462b03a 	or	r17,r8,r17
    c6ec:	8822c03a 	cmpne	r17,r17,zero
    c6f0:	0007883a 	mov	r3,zero
    c6f4:	003f8b06 	br	c524 <__alt_data_end+0xff00c524>
    c6f8:	0141ffc4 	movi	r5,2047
    c6fc:	11403b26 	beq	r2,r5,c7ec <__adddf3+0x780>
    c700:	0109c83a 	sub	r4,zero,r4
    c704:	42002034 	orhi	r8,r8,128
    c708:	01400e04 	movi	r5,56
    c70c:	29006716 	blt	r5,r4,c8ac <__adddf3+0x840>
    c710:	014007c4 	movi	r5,31
    c714:	29007016 	blt	r5,r4,c8d8 <__adddf3+0x86c>
    c718:	01400804 	movi	r5,32
    c71c:	290bc83a 	sub	r5,r5,r4
    c720:	4154983a 	sll	r10,r8,r5
    c724:	890ed83a 	srl	r7,r17,r4
    c728:	894a983a 	sll	r5,r17,r5
    c72c:	4108d83a 	srl	r4,r8,r4
    c730:	51e2b03a 	or	r17,r10,r7
    c734:	280ac03a 	cmpne	r5,r5,zero
    c738:	8962b03a 	or	r17,r17,r5
    c73c:	89a3883a 	add	r17,r17,r6
    c740:	2253883a 	add	r9,r4,r9
    c744:	898d803a 	cmpltu	r6,r17,r6
    c748:	3251883a 	add	r8,r6,r9
    c74c:	1021883a 	mov	r16,r2
    c750:	003ee506 	br	c2e8 <__alt_data_end+0xff00c2e8>
    c754:	4984b03a 	or	r2,r9,r6
    c758:	103e6326 	beq	r2,zero,c0e8 <__alt_data_end+0xff00c0e8>
    c75c:	8987c83a 	sub	r3,r17,r6
    c760:	88c9803a 	cmpltu	r4,r17,r3
    c764:	4245c83a 	sub	r2,r8,r9
    c768:	1105c83a 	sub	r2,r2,r4
    c76c:	1100202c 	andhi	r4,r2,128
    c770:	203ebb26 	beq	r4,zero,c260 <__alt_data_end+0xff00c260>
    c774:	3463c83a 	sub	r17,r6,r17
    c778:	4a07c83a 	sub	r3,r9,r8
    c77c:	344d803a 	cmpltu	r6,r6,r17
    c780:	1991c83a 	sub	r8,r3,r6
    c784:	3825883a 	mov	r18,r7
    c788:	003e5706 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c78c:	4984b03a 	or	r2,r9,r6
    c790:	10002e26 	beq	r2,zero,c84c <__adddf3+0x7e0>
    c794:	4004d0fa 	srli	r2,r8,3
    c798:	8822d0fa 	srli	r17,r17,3
    c79c:	4010977a 	slli	r8,r8,29
    c7a0:	10c0022c 	andhi	r3,r2,8
    c7a4:	4462b03a 	or	r17,r8,r17
    c7a8:	18000826 	beq	r3,zero,c7cc <__adddf3+0x760>
    c7ac:	4808d0fa 	srli	r4,r9,3
    c7b0:	20c0022c 	andhi	r3,r4,8
    c7b4:	1800051e 	bne	r3,zero,c7cc <__adddf3+0x760>
    c7b8:	300cd0fa 	srli	r6,r6,3
    c7bc:	4806977a 	slli	r3,r9,29
    c7c0:	2005883a 	mov	r2,r4
    c7c4:	3825883a 	mov	r18,r7
    c7c8:	19a2b03a 	or	r17,r3,r6
    c7cc:	8810d77a 	srli	r8,r17,29
    c7d0:	100490fa 	slli	r2,r2,3
    c7d4:	882290fa 	slli	r17,r17,3
    c7d8:	0401ffc4 	movi	r16,2047
    c7dc:	4090b03a 	or	r8,r8,r2
    c7e0:	003e4106 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c7e4:	0141ffc4 	movi	r5,2047
    c7e8:	117fc71e 	bne	r2,r5,c708 <__alt_data_end+0xff00c708>
    c7ec:	4811883a 	mov	r8,r9
    c7f0:	3023883a 	mov	r17,r6
    c7f4:	1021883a 	mov	r16,r2
    c7f8:	003e3b06 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c7fc:	10002f26 	beq	r2,zero,c8bc <__adddf3+0x850>
    c800:	4984b03a 	or	r2,r9,r6
    c804:	10001126 	beq	r2,zero,c84c <__adddf3+0x7e0>
    c808:	4004d0fa 	srli	r2,r8,3
    c80c:	8822d0fa 	srli	r17,r17,3
    c810:	4010977a 	slli	r8,r8,29
    c814:	10c0022c 	andhi	r3,r2,8
    c818:	4462b03a 	or	r17,r8,r17
    c81c:	183feb26 	beq	r3,zero,c7cc <__alt_data_end+0xff00c7cc>
    c820:	4808d0fa 	srli	r4,r9,3
    c824:	20c0022c 	andhi	r3,r4,8
    c828:	183fe81e 	bne	r3,zero,c7cc <__alt_data_end+0xff00c7cc>
    c82c:	300cd0fa 	srli	r6,r6,3
    c830:	4806977a 	slli	r3,r9,29
    c834:	2005883a 	mov	r2,r4
    c838:	19a2b03a 	or	r17,r3,r6
    c83c:	003fe306 	br	c7cc <__alt_data_end+0xff00c7cc>
    c840:	0011883a 	mov	r8,zero
    c844:	0005883a 	mov	r2,zero
    c848:	003e3f06 	br	c148 <__alt_data_end+0xff00c148>
    c84c:	0401ffc4 	movi	r16,2047
    c850:	003e2506 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c854:	0013883a 	mov	r9,zero
    c858:	003f8406 	br	c66c <__alt_data_end+0xff00c66c>
    c85c:	0005883a 	mov	r2,zero
    c860:	0007883a 	mov	r3,zero
    c864:	003e8906 	br	c28c <__alt_data_end+0xff00c28c>
    c868:	197ff804 	addi	r5,r3,-32
    c86c:	01000804 	movi	r4,32
    c870:	414ad83a 	srl	r5,r8,r5
    c874:	19002426 	beq	r3,r4,c908 <__adddf3+0x89c>
    c878:	01001004 	movi	r4,64
    c87c:	20c7c83a 	sub	r3,r4,r3
    c880:	40c6983a 	sll	r3,r8,r3
    c884:	1c46b03a 	or	r3,r3,r17
    c888:	1806c03a 	cmpne	r3,r3,zero
    c88c:	28e2b03a 	or	r17,r5,r3
    c890:	0007883a 	mov	r3,zero
    c894:	003f2306 	br	c524 <__alt_data_end+0xff00c524>
    c898:	0007883a 	mov	r3,zero
    c89c:	5811883a 	mov	r8,r11
    c8a0:	00bfffc4 	movi	r2,-1
    c8a4:	0401ffc4 	movi	r16,2047
    c8a8:	003e7806 	br	c28c <__alt_data_end+0xff00c28c>
    c8ac:	4462b03a 	or	r17,r8,r17
    c8b0:	8822c03a 	cmpne	r17,r17,zero
    c8b4:	0009883a 	mov	r4,zero
    c8b8:	003fa006 	br	c73c <__alt_data_end+0xff00c73c>
    c8bc:	4811883a 	mov	r8,r9
    c8c0:	3023883a 	mov	r17,r6
    c8c4:	0401ffc4 	movi	r16,2047
    c8c8:	003e0706 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c8cc:	4811883a 	mov	r8,r9
    c8d0:	3023883a 	mov	r17,r6
    c8d4:	003e0406 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c8d8:	21fff804 	addi	r7,r4,-32
    c8dc:	01400804 	movi	r5,32
    c8e0:	41ced83a 	srl	r7,r8,r7
    c8e4:	21400a26 	beq	r4,r5,c910 <__adddf3+0x8a4>
    c8e8:	01401004 	movi	r5,64
    c8ec:	2909c83a 	sub	r4,r5,r4
    c8f0:	4108983a 	sll	r4,r8,r4
    c8f4:	2448b03a 	or	r4,r4,r17
    c8f8:	2008c03a 	cmpne	r4,r4,zero
    c8fc:	3922b03a 	or	r17,r7,r4
    c900:	0009883a 	mov	r4,zero
    c904:	003f8d06 	br	c73c <__alt_data_end+0xff00c73c>
    c908:	0007883a 	mov	r3,zero
    c90c:	003fdd06 	br	c884 <__alt_data_end+0xff00c884>
    c910:	0009883a 	mov	r4,zero
    c914:	003ff706 	br	c8f4 <__alt_data_end+0xff00c8f4>

0000c918 <__divdf3>:
    c918:	defff204 	addi	sp,sp,-56
    c91c:	dd400915 	stw	r21,36(sp)
    c920:	282ad53a 	srli	r21,r5,20
    c924:	dd000815 	stw	r20,32(sp)
    c928:	2828d7fa 	srli	r20,r5,31
    c92c:	dc000415 	stw	r16,16(sp)
    c930:	04000434 	movhi	r16,16
    c934:	df000c15 	stw	fp,48(sp)
    c938:	843fffc4 	addi	r16,r16,-1
    c93c:	dfc00d15 	stw	ra,52(sp)
    c940:	ddc00b15 	stw	r23,44(sp)
    c944:	dd800a15 	stw	r22,40(sp)
    c948:	dcc00715 	stw	r19,28(sp)
    c94c:	dc800615 	stw	r18,24(sp)
    c950:	dc400515 	stw	r17,20(sp)
    c954:	ad41ffcc 	andi	r21,r21,2047
    c958:	2c20703a 	and	r16,r5,r16
    c95c:	a7003fcc 	andi	fp,r20,255
    c960:	a8006126 	beq	r21,zero,cae8 <__divdf3+0x1d0>
    c964:	0081ffc4 	movi	r2,2047
    c968:	2025883a 	mov	r18,r4
    c96c:	a8803726 	beq	r21,r2,ca4c <__divdf3+0x134>
    c970:	80800434 	orhi	r2,r16,16
    c974:	100490fa 	slli	r2,r2,3
    c978:	2020d77a 	srli	r16,r4,29
    c97c:	202490fa 	slli	r18,r4,3
    c980:	ad7f0044 	addi	r21,r21,-1023
    c984:	80a0b03a 	or	r16,r16,r2
    c988:	0027883a 	mov	r19,zero
    c98c:	0013883a 	mov	r9,zero
    c990:	3804d53a 	srli	r2,r7,20
    c994:	382cd7fa 	srli	r22,r7,31
    c998:	04400434 	movhi	r17,16
    c99c:	8c7fffc4 	addi	r17,r17,-1
    c9a0:	1081ffcc 	andi	r2,r2,2047
    c9a4:	3011883a 	mov	r8,r6
    c9a8:	3c62703a 	and	r17,r7,r17
    c9ac:	b5c03fcc 	andi	r23,r22,255
    c9b0:	10006c26 	beq	r2,zero,cb64 <__divdf3+0x24c>
    c9b4:	00c1ffc4 	movi	r3,2047
    c9b8:	10c06426 	beq	r2,r3,cb4c <__divdf3+0x234>
    c9bc:	88c00434 	orhi	r3,r17,16
    c9c0:	180690fa 	slli	r3,r3,3
    c9c4:	3022d77a 	srli	r17,r6,29
    c9c8:	301090fa 	slli	r8,r6,3
    c9cc:	10bf0044 	addi	r2,r2,-1023
    c9d0:	88e2b03a 	or	r17,r17,r3
    c9d4:	000f883a 	mov	r7,zero
    c9d8:	a58cf03a 	xor	r6,r20,r22
    c9dc:	3cc8b03a 	or	r4,r7,r19
    c9e0:	a8abc83a 	sub	r21,r21,r2
    c9e4:	008003c4 	movi	r2,15
    c9e8:	3007883a 	mov	r3,r6
    c9ec:	34c03fcc 	andi	r19,r6,255
    c9f0:	11009036 	bltu	r2,r4,cc34 <__divdf3+0x31c>
    c9f4:	200890ba 	slli	r4,r4,2
    c9f8:	00800074 	movhi	r2,1
    c9fc:	10b28304 	addi	r2,r2,-13812
    ca00:	2089883a 	add	r4,r4,r2
    ca04:	20800017 	ldw	r2,0(r4)
    ca08:	1000683a 	jmp	r2
    ca0c:	0000cc34 	movhi	zero,816
    ca10:	0000ca84 	movi	zero,810
    ca14:	0000cc24 	muli	zero,zero,816
    ca18:	0000ca78 	rdprs	zero,zero,809
    ca1c:	0000cc24 	muli	zero,zero,816
    ca20:	0000cbf8 	rdprs	zero,zero,815
    ca24:	0000cc24 	muli	zero,zero,816
    ca28:	0000ca78 	rdprs	zero,zero,809
    ca2c:	0000ca84 	movi	zero,810
    ca30:	0000ca84 	movi	zero,810
    ca34:	0000cbf8 	rdprs	zero,zero,815
    ca38:	0000ca78 	rdprs	zero,zero,809
    ca3c:	0000ca68 	cmpgeui	zero,zero,809
    ca40:	0000ca68 	cmpgeui	zero,zero,809
    ca44:	0000ca68 	cmpgeui	zero,zero,809
    ca48:	0000cf18 	cmpnei	zero,zero,828
    ca4c:	2404b03a 	or	r2,r4,r16
    ca50:	1000661e 	bne	r2,zero,cbec <__divdf3+0x2d4>
    ca54:	04c00204 	movi	r19,8
    ca58:	0021883a 	mov	r16,zero
    ca5c:	0025883a 	mov	r18,zero
    ca60:	02400084 	movi	r9,2
    ca64:	003fca06 	br	c990 <__alt_data_end+0xff00c990>
    ca68:	8023883a 	mov	r17,r16
    ca6c:	9011883a 	mov	r8,r18
    ca70:	e02f883a 	mov	r23,fp
    ca74:	480f883a 	mov	r7,r9
    ca78:	00800084 	movi	r2,2
    ca7c:	3881311e 	bne	r7,r2,cf44 <__divdf3+0x62c>
    ca80:	b827883a 	mov	r19,r23
    ca84:	98c0004c 	andi	r3,r19,1
    ca88:	0081ffc4 	movi	r2,2047
    ca8c:	000b883a 	mov	r5,zero
    ca90:	0025883a 	mov	r18,zero
    ca94:	1004953a 	slli	r2,r2,20
    ca98:	18c03fcc 	andi	r3,r3,255
    ca9c:	04400434 	movhi	r17,16
    caa0:	8c7fffc4 	addi	r17,r17,-1
    caa4:	180697fa 	slli	r3,r3,31
    caa8:	2c4a703a 	and	r5,r5,r17
    caac:	288ab03a 	or	r5,r5,r2
    cab0:	28c6b03a 	or	r3,r5,r3
    cab4:	9005883a 	mov	r2,r18
    cab8:	dfc00d17 	ldw	ra,52(sp)
    cabc:	df000c17 	ldw	fp,48(sp)
    cac0:	ddc00b17 	ldw	r23,44(sp)
    cac4:	dd800a17 	ldw	r22,40(sp)
    cac8:	dd400917 	ldw	r21,36(sp)
    cacc:	dd000817 	ldw	r20,32(sp)
    cad0:	dcc00717 	ldw	r19,28(sp)
    cad4:	dc800617 	ldw	r18,24(sp)
    cad8:	dc400517 	ldw	r17,20(sp)
    cadc:	dc000417 	ldw	r16,16(sp)
    cae0:	dec00e04 	addi	sp,sp,56
    cae4:	f800283a 	ret
    cae8:	2404b03a 	or	r2,r4,r16
    caec:	2027883a 	mov	r19,r4
    caf0:	10003926 	beq	r2,zero,cbd8 <__divdf3+0x2c0>
    caf4:	80012e26 	beq	r16,zero,cfb0 <__divdf3+0x698>
    caf8:	8009883a 	mov	r4,r16
    cafc:	d9800315 	stw	r6,12(sp)
    cb00:	d9c00215 	stw	r7,8(sp)
    cb04:	000e6700 	call	e670 <__clzsi2>
    cb08:	d9800317 	ldw	r6,12(sp)
    cb0c:	d9c00217 	ldw	r7,8(sp)
    cb10:	113ffd44 	addi	r4,r2,-11
    cb14:	00c00704 	movi	r3,28
    cb18:	19012116 	blt	r3,r4,cfa0 <__divdf3+0x688>
    cb1c:	00c00744 	movi	r3,29
    cb20:	147ffe04 	addi	r17,r2,-8
    cb24:	1907c83a 	sub	r3,r3,r4
    cb28:	8460983a 	sll	r16,r16,r17
    cb2c:	98c6d83a 	srl	r3,r19,r3
    cb30:	9c64983a 	sll	r18,r19,r17
    cb34:	1c20b03a 	or	r16,r3,r16
    cb38:	1080fcc4 	addi	r2,r2,1011
    cb3c:	00abc83a 	sub	r21,zero,r2
    cb40:	0027883a 	mov	r19,zero
    cb44:	0013883a 	mov	r9,zero
    cb48:	003f9106 	br	c990 <__alt_data_end+0xff00c990>
    cb4c:	3446b03a 	or	r3,r6,r17
    cb50:	18001f1e 	bne	r3,zero,cbd0 <__divdf3+0x2b8>
    cb54:	0023883a 	mov	r17,zero
    cb58:	0011883a 	mov	r8,zero
    cb5c:	01c00084 	movi	r7,2
    cb60:	003f9d06 	br	c9d8 <__alt_data_end+0xff00c9d8>
    cb64:	3446b03a 	or	r3,r6,r17
    cb68:	18001526 	beq	r3,zero,cbc0 <__divdf3+0x2a8>
    cb6c:	88011b26 	beq	r17,zero,cfdc <__divdf3+0x6c4>
    cb70:	8809883a 	mov	r4,r17
    cb74:	d9800315 	stw	r6,12(sp)
    cb78:	da400115 	stw	r9,4(sp)
    cb7c:	000e6700 	call	e670 <__clzsi2>
    cb80:	d9800317 	ldw	r6,12(sp)
    cb84:	da400117 	ldw	r9,4(sp)
    cb88:	113ffd44 	addi	r4,r2,-11
    cb8c:	00c00704 	movi	r3,28
    cb90:	19010e16 	blt	r3,r4,cfcc <__divdf3+0x6b4>
    cb94:	00c00744 	movi	r3,29
    cb98:	123ffe04 	addi	r8,r2,-8
    cb9c:	1907c83a 	sub	r3,r3,r4
    cba0:	8a22983a 	sll	r17,r17,r8
    cba4:	30c6d83a 	srl	r3,r6,r3
    cba8:	3210983a 	sll	r8,r6,r8
    cbac:	1c62b03a 	or	r17,r3,r17
    cbb0:	1080fcc4 	addi	r2,r2,1011
    cbb4:	0085c83a 	sub	r2,zero,r2
    cbb8:	000f883a 	mov	r7,zero
    cbbc:	003f8606 	br	c9d8 <__alt_data_end+0xff00c9d8>
    cbc0:	0023883a 	mov	r17,zero
    cbc4:	0011883a 	mov	r8,zero
    cbc8:	01c00044 	movi	r7,1
    cbcc:	003f8206 	br	c9d8 <__alt_data_end+0xff00c9d8>
    cbd0:	01c000c4 	movi	r7,3
    cbd4:	003f8006 	br	c9d8 <__alt_data_end+0xff00c9d8>
    cbd8:	04c00104 	movi	r19,4
    cbdc:	0021883a 	mov	r16,zero
    cbe0:	0025883a 	mov	r18,zero
    cbe4:	02400044 	movi	r9,1
    cbe8:	003f6906 	br	c990 <__alt_data_end+0xff00c990>
    cbec:	04c00304 	movi	r19,12
    cbf0:	024000c4 	movi	r9,3
    cbf4:	003f6606 	br	c990 <__alt_data_end+0xff00c990>
    cbf8:	01400434 	movhi	r5,16
    cbfc:	0007883a 	mov	r3,zero
    cc00:	297fffc4 	addi	r5,r5,-1
    cc04:	04bfffc4 	movi	r18,-1
    cc08:	0081ffc4 	movi	r2,2047
    cc0c:	003fa106 	br	ca94 <__alt_data_end+0xff00ca94>
    cc10:	00c00044 	movi	r3,1
    cc14:	1887c83a 	sub	r3,r3,r2
    cc18:	01000e04 	movi	r4,56
    cc1c:	20c1210e 	bge	r4,r3,d0a4 <__divdf3+0x78c>
    cc20:	98c0004c 	andi	r3,r19,1
    cc24:	0005883a 	mov	r2,zero
    cc28:	000b883a 	mov	r5,zero
    cc2c:	0025883a 	mov	r18,zero
    cc30:	003f9806 	br	ca94 <__alt_data_end+0xff00ca94>
    cc34:	8c00fd36 	bltu	r17,r16,d02c <__divdf3+0x714>
    cc38:	8440fb26 	beq	r16,r17,d028 <__divdf3+0x710>
    cc3c:	8007883a 	mov	r3,r16
    cc40:	ad7fffc4 	addi	r21,r21,-1
    cc44:	0021883a 	mov	r16,zero
    cc48:	4004d63a 	srli	r2,r8,24
    cc4c:	8822923a 	slli	r17,r17,8
    cc50:	1809883a 	mov	r4,r3
    cc54:	402c923a 	slli	r22,r8,8
    cc58:	88b8b03a 	or	fp,r17,r2
    cc5c:	e028d43a 	srli	r20,fp,16
    cc60:	d8c00015 	stw	r3,0(sp)
    cc64:	e5ffffcc 	andi	r23,fp,65535
    cc68:	a00b883a 	mov	r5,r20
    cc6c:	000bfb00 	call	bfb0 <__udivsi3>
    cc70:	d8c00017 	ldw	r3,0(sp)
    cc74:	a00b883a 	mov	r5,r20
    cc78:	d8800315 	stw	r2,12(sp)
    cc7c:	1809883a 	mov	r4,r3
    cc80:	000c0140 	call	c014 <__umodsi3>
    cc84:	d9800317 	ldw	r6,12(sp)
    cc88:	1006943a 	slli	r3,r2,16
    cc8c:	9004d43a 	srli	r2,r18,16
    cc90:	b9a3383a 	mul	r17,r23,r6
    cc94:	10c4b03a 	or	r2,r2,r3
    cc98:	1440062e 	bgeu	r2,r17,ccb4 <__divdf3+0x39c>
    cc9c:	1705883a 	add	r2,r2,fp
    cca0:	30ffffc4 	addi	r3,r6,-1
    cca4:	1700ee36 	bltu	r2,fp,d060 <__divdf3+0x748>
    cca8:	1440ed2e 	bgeu	r2,r17,d060 <__divdf3+0x748>
    ccac:	31bfff84 	addi	r6,r6,-2
    ccb0:	1705883a 	add	r2,r2,fp
    ccb4:	1463c83a 	sub	r17,r2,r17
    ccb8:	a00b883a 	mov	r5,r20
    ccbc:	8809883a 	mov	r4,r17
    ccc0:	d9800315 	stw	r6,12(sp)
    ccc4:	000bfb00 	call	bfb0 <__udivsi3>
    ccc8:	a00b883a 	mov	r5,r20
    cccc:	8809883a 	mov	r4,r17
    ccd0:	d8800215 	stw	r2,8(sp)
    ccd4:	000c0140 	call	c014 <__umodsi3>
    ccd8:	d9c00217 	ldw	r7,8(sp)
    ccdc:	1004943a 	slli	r2,r2,16
    cce0:	94bfffcc 	andi	r18,r18,65535
    cce4:	b9d1383a 	mul	r8,r23,r7
    cce8:	90a4b03a 	or	r18,r18,r2
    ccec:	d9800317 	ldw	r6,12(sp)
    ccf0:	9200062e 	bgeu	r18,r8,cd0c <__divdf3+0x3f4>
    ccf4:	9725883a 	add	r18,r18,fp
    ccf8:	38bfffc4 	addi	r2,r7,-1
    ccfc:	9700d636 	bltu	r18,fp,d058 <__divdf3+0x740>
    cd00:	9200d52e 	bgeu	r18,r8,d058 <__divdf3+0x740>
    cd04:	39ffff84 	addi	r7,r7,-2
    cd08:	9725883a 	add	r18,r18,fp
    cd0c:	3004943a 	slli	r2,r6,16
    cd10:	b012d43a 	srli	r9,r22,16
    cd14:	b1bfffcc 	andi	r6,r22,65535
    cd18:	11e2b03a 	or	r17,r2,r7
    cd1c:	8806d43a 	srli	r3,r17,16
    cd20:	893fffcc 	andi	r4,r17,65535
    cd24:	218b383a 	mul	r5,r4,r6
    cd28:	30c5383a 	mul	r2,r6,r3
    cd2c:	2249383a 	mul	r4,r4,r9
    cd30:	280ed43a 	srli	r7,r5,16
    cd34:	9225c83a 	sub	r18,r18,r8
    cd38:	2089883a 	add	r4,r4,r2
    cd3c:	3909883a 	add	r4,r7,r4
    cd40:	1a47383a 	mul	r3,r3,r9
    cd44:	2080022e 	bgeu	r4,r2,cd50 <__divdf3+0x438>
    cd48:	00800074 	movhi	r2,1
    cd4c:	1887883a 	add	r3,r3,r2
    cd50:	2004d43a 	srli	r2,r4,16
    cd54:	2008943a 	slli	r4,r4,16
    cd58:	297fffcc 	andi	r5,r5,65535
    cd5c:	10c7883a 	add	r3,r2,r3
    cd60:	2149883a 	add	r4,r4,r5
    cd64:	90c0a536 	bltu	r18,r3,cffc <__divdf3+0x6e4>
    cd68:	90c0bf26 	beq	r18,r3,d068 <__divdf3+0x750>
    cd6c:	90c7c83a 	sub	r3,r18,r3
    cd70:	810fc83a 	sub	r7,r16,r4
    cd74:	81e5803a 	cmpltu	r18,r16,r7
    cd78:	1ca5c83a 	sub	r18,r3,r18
    cd7c:	e480c126 	beq	fp,r18,d084 <__divdf3+0x76c>
    cd80:	a00b883a 	mov	r5,r20
    cd84:	9009883a 	mov	r4,r18
    cd88:	d9800315 	stw	r6,12(sp)
    cd8c:	d9c00215 	stw	r7,8(sp)
    cd90:	da400115 	stw	r9,4(sp)
    cd94:	000bfb00 	call	bfb0 <__udivsi3>
    cd98:	a00b883a 	mov	r5,r20
    cd9c:	9009883a 	mov	r4,r18
    cda0:	d8800015 	stw	r2,0(sp)
    cda4:	000c0140 	call	c014 <__umodsi3>
    cda8:	d9c00217 	ldw	r7,8(sp)
    cdac:	da000017 	ldw	r8,0(sp)
    cdb0:	1006943a 	slli	r3,r2,16
    cdb4:	3804d43a 	srli	r2,r7,16
    cdb8:	ba21383a 	mul	r16,r23,r8
    cdbc:	d9800317 	ldw	r6,12(sp)
    cdc0:	10c4b03a 	or	r2,r2,r3
    cdc4:	da400117 	ldw	r9,4(sp)
    cdc8:	1400062e 	bgeu	r2,r16,cde4 <__divdf3+0x4cc>
    cdcc:	1705883a 	add	r2,r2,fp
    cdd0:	40ffffc4 	addi	r3,r8,-1
    cdd4:	1700ad36 	bltu	r2,fp,d08c <__divdf3+0x774>
    cdd8:	1400ac2e 	bgeu	r2,r16,d08c <__divdf3+0x774>
    cddc:	423fff84 	addi	r8,r8,-2
    cde0:	1705883a 	add	r2,r2,fp
    cde4:	1421c83a 	sub	r16,r2,r16
    cde8:	a00b883a 	mov	r5,r20
    cdec:	8009883a 	mov	r4,r16
    cdf0:	d9800315 	stw	r6,12(sp)
    cdf4:	d9c00215 	stw	r7,8(sp)
    cdf8:	da000015 	stw	r8,0(sp)
    cdfc:	da400115 	stw	r9,4(sp)
    ce00:	000bfb00 	call	bfb0 <__udivsi3>
    ce04:	8009883a 	mov	r4,r16
    ce08:	a00b883a 	mov	r5,r20
    ce0c:	1025883a 	mov	r18,r2
    ce10:	000c0140 	call	c014 <__umodsi3>
    ce14:	d9c00217 	ldw	r7,8(sp)
    ce18:	1004943a 	slli	r2,r2,16
    ce1c:	bcaf383a 	mul	r23,r23,r18
    ce20:	393fffcc 	andi	r4,r7,65535
    ce24:	2088b03a 	or	r4,r4,r2
    ce28:	d9800317 	ldw	r6,12(sp)
    ce2c:	da000017 	ldw	r8,0(sp)
    ce30:	da400117 	ldw	r9,4(sp)
    ce34:	25c0062e 	bgeu	r4,r23,ce50 <__divdf3+0x538>
    ce38:	2709883a 	add	r4,r4,fp
    ce3c:	90bfffc4 	addi	r2,r18,-1
    ce40:	27009436 	bltu	r4,fp,d094 <__divdf3+0x77c>
    ce44:	25c0932e 	bgeu	r4,r23,d094 <__divdf3+0x77c>
    ce48:	94bfff84 	addi	r18,r18,-2
    ce4c:	2709883a 	add	r4,r4,fp
    ce50:	4004943a 	slli	r2,r8,16
    ce54:	25efc83a 	sub	r23,r4,r23
    ce58:	1490b03a 	or	r8,r2,r18
    ce5c:	4008d43a 	srli	r4,r8,16
    ce60:	40ffffcc 	andi	r3,r8,65535
    ce64:	30c5383a 	mul	r2,r6,r3
    ce68:	1a47383a 	mul	r3,r3,r9
    ce6c:	310d383a 	mul	r6,r6,r4
    ce70:	100ad43a 	srli	r5,r2,16
    ce74:	4913383a 	mul	r9,r9,r4
    ce78:	1987883a 	add	r3,r3,r6
    ce7c:	28c7883a 	add	r3,r5,r3
    ce80:	1980022e 	bgeu	r3,r6,ce8c <__divdf3+0x574>
    ce84:	01000074 	movhi	r4,1
    ce88:	4913883a 	add	r9,r9,r4
    ce8c:	1808d43a 	srli	r4,r3,16
    ce90:	1806943a 	slli	r3,r3,16
    ce94:	10bfffcc 	andi	r2,r2,65535
    ce98:	2253883a 	add	r9,r4,r9
    ce9c:	1887883a 	add	r3,r3,r2
    cea0:	ba403836 	bltu	r23,r9,cf84 <__divdf3+0x66c>
    cea4:	ba403626 	beq	r23,r9,cf80 <__divdf3+0x668>
    cea8:	42000054 	ori	r8,r8,1
    ceac:	a880ffc4 	addi	r2,r21,1023
    ceb0:	00bf570e 	bge	zero,r2,cc10 <__alt_data_end+0xff00cc10>
    ceb4:	40c001cc 	andi	r3,r8,7
    ceb8:	18000726 	beq	r3,zero,ced8 <__divdf3+0x5c0>
    cebc:	40c003cc 	andi	r3,r8,15
    cec0:	01000104 	movi	r4,4
    cec4:	19000426 	beq	r3,r4,ced8 <__divdf3+0x5c0>
    cec8:	4107883a 	add	r3,r8,r4
    cecc:	1a11803a 	cmpltu	r8,r3,r8
    ced0:	8a23883a 	add	r17,r17,r8
    ced4:	1811883a 	mov	r8,r3
    ced8:	88c0402c 	andhi	r3,r17,256
    cedc:	18000426 	beq	r3,zero,cef0 <__divdf3+0x5d8>
    cee0:	00ffc034 	movhi	r3,65280
    cee4:	18ffffc4 	addi	r3,r3,-1
    cee8:	a8810004 	addi	r2,r21,1024
    ceec:	88e2703a 	and	r17,r17,r3
    cef0:	00c1ff84 	movi	r3,2046
    cef4:	18bee316 	blt	r3,r2,ca84 <__alt_data_end+0xff00ca84>
    cef8:	8824977a 	slli	r18,r17,29
    cefc:	4010d0fa 	srli	r8,r8,3
    cf00:	8822927a 	slli	r17,r17,9
    cf04:	1081ffcc 	andi	r2,r2,2047
    cf08:	9224b03a 	or	r18,r18,r8
    cf0c:	880ad33a 	srli	r5,r17,12
    cf10:	98c0004c 	andi	r3,r19,1
    cf14:	003edf06 	br	ca94 <__alt_data_end+0xff00ca94>
    cf18:	8080022c 	andhi	r2,r16,8
    cf1c:	10001226 	beq	r2,zero,cf68 <__divdf3+0x650>
    cf20:	8880022c 	andhi	r2,r17,8
    cf24:	1000101e 	bne	r2,zero,cf68 <__divdf3+0x650>
    cf28:	00800434 	movhi	r2,16
    cf2c:	89400234 	orhi	r5,r17,8
    cf30:	10bfffc4 	addi	r2,r2,-1
    cf34:	b007883a 	mov	r3,r22
    cf38:	288a703a 	and	r5,r5,r2
    cf3c:	4025883a 	mov	r18,r8
    cf40:	003f3106 	br	cc08 <__alt_data_end+0xff00cc08>
    cf44:	008000c4 	movi	r2,3
    cf48:	3880a626 	beq	r7,r2,d1e4 <__divdf3+0x8cc>
    cf4c:	00800044 	movi	r2,1
    cf50:	3880521e 	bne	r7,r2,d09c <__divdf3+0x784>
    cf54:	b807883a 	mov	r3,r23
    cf58:	0005883a 	mov	r2,zero
    cf5c:	000b883a 	mov	r5,zero
    cf60:	0025883a 	mov	r18,zero
    cf64:	003ecb06 	br	ca94 <__alt_data_end+0xff00ca94>
    cf68:	00800434 	movhi	r2,16
    cf6c:	81400234 	orhi	r5,r16,8
    cf70:	10bfffc4 	addi	r2,r2,-1
    cf74:	a007883a 	mov	r3,r20
    cf78:	288a703a 	and	r5,r5,r2
    cf7c:	003f2206 	br	cc08 <__alt_data_end+0xff00cc08>
    cf80:	183fca26 	beq	r3,zero,ceac <__alt_data_end+0xff00ceac>
    cf84:	e5ef883a 	add	r23,fp,r23
    cf88:	40bfffc4 	addi	r2,r8,-1
    cf8c:	bf00392e 	bgeu	r23,fp,d074 <__divdf3+0x75c>
    cf90:	1011883a 	mov	r8,r2
    cf94:	ba7fc41e 	bne	r23,r9,cea8 <__alt_data_end+0xff00cea8>
    cf98:	b0ffc31e 	bne	r22,r3,cea8 <__alt_data_end+0xff00cea8>
    cf9c:	003fc306 	br	ceac <__alt_data_end+0xff00ceac>
    cfa0:	143ff604 	addi	r16,r2,-40
    cfa4:	9c20983a 	sll	r16,r19,r16
    cfa8:	0025883a 	mov	r18,zero
    cfac:	003ee206 	br	cb38 <__alt_data_end+0xff00cb38>
    cfb0:	d9800315 	stw	r6,12(sp)
    cfb4:	d9c00215 	stw	r7,8(sp)
    cfb8:	000e6700 	call	e670 <__clzsi2>
    cfbc:	10800804 	addi	r2,r2,32
    cfc0:	d9c00217 	ldw	r7,8(sp)
    cfc4:	d9800317 	ldw	r6,12(sp)
    cfc8:	003ed106 	br	cb10 <__alt_data_end+0xff00cb10>
    cfcc:	147ff604 	addi	r17,r2,-40
    cfd0:	3462983a 	sll	r17,r6,r17
    cfd4:	0011883a 	mov	r8,zero
    cfd8:	003ef506 	br	cbb0 <__alt_data_end+0xff00cbb0>
    cfdc:	3009883a 	mov	r4,r6
    cfe0:	d9800315 	stw	r6,12(sp)
    cfe4:	da400115 	stw	r9,4(sp)
    cfe8:	000e6700 	call	e670 <__clzsi2>
    cfec:	10800804 	addi	r2,r2,32
    cff0:	da400117 	ldw	r9,4(sp)
    cff4:	d9800317 	ldw	r6,12(sp)
    cff8:	003ee306 	br	cb88 <__alt_data_end+0xff00cb88>
    cffc:	85a1883a 	add	r16,r16,r22
    d000:	8585803a 	cmpltu	r2,r16,r22
    d004:	1705883a 	add	r2,r2,fp
    d008:	14a5883a 	add	r18,r2,r18
    d00c:	88bfffc4 	addi	r2,r17,-1
    d010:	e4800c2e 	bgeu	fp,r18,d044 <__divdf3+0x72c>
    d014:	90c03e36 	bltu	r18,r3,d110 <__divdf3+0x7f8>
    d018:	1c806926 	beq	r3,r18,d1c0 <__divdf3+0x8a8>
    d01c:	90c7c83a 	sub	r3,r18,r3
    d020:	1023883a 	mov	r17,r2
    d024:	003f5206 	br	cd70 <__alt_data_end+0xff00cd70>
    d028:	923f0436 	bltu	r18,r8,cc3c <__alt_data_end+0xff00cc3c>
    d02c:	800897fa 	slli	r4,r16,31
    d030:	9004d07a 	srli	r2,r18,1
    d034:	8006d07a 	srli	r3,r16,1
    d038:	902097fa 	slli	r16,r18,31
    d03c:	20a4b03a 	or	r18,r4,r2
    d040:	003f0106 	br	cc48 <__alt_data_end+0xff00cc48>
    d044:	e4bff51e 	bne	fp,r18,d01c <__alt_data_end+0xff00d01c>
    d048:	85bff22e 	bgeu	r16,r22,d014 <__alt_data_end+0xff00d014>
    d04c:	e0c7c83a 	sub	r3,fp,r3
    d050:	1023883a 	mov	r17,r2
    d054:	003f4606 	br	cd70 <__alt_data_end+0xff00cd70>
    d058:	100f883a 	mov	r7,r2
    d05c:	003f2b06 	br	cd0c <__alt_data_end+0xff00cd0c>
    d060:	180d883a 	mov	r6,r3
    d064:	003f1306 	br	ccb4 <__alt_data_end+0xff00ccb4>
    d068:	813fe436 	bltu	r16,r4,cffc <__alt_data_end+0xff00cffc>
    d06c:	0007883a 	mov	r3,zero
    d070:	003f3f06 	br	cd70 <__alt_data_end+0xff00cd70>
    d074:	ba402c36 	bltu	r23,r9,d128 <__divdf3+0x810>
    d078:	4dc05426 	beq	r9,r23,d1cc <__divdf3+0x8b4>
    d07c:	1011883a 	mov	r8,r2
    d080:	003f8906 	br	cea8 <__alt_data_end+0xff00cea8>
    d084:	023fffc4 	movi	r8,-1
    d088:	003f8806 	br	ceac <__alt_data_end+0xff00ceac>
    d08c:	1811883a 	mov	r8,r3
    d090:	003f5406 	br	cde4 <__alt_data_end+0xff00cde4>
    d094:	1025883a 	mov	r18,r2
    d098:	003f6d06 	br	ce50 <__alt_data_end+0xff00ce50>
    d09c:	b827883a 	mov	r19,r23
    d0a0:	003f8206 	br	ceac <__alt_data_end+0xff00ceac>
    d0a4:	010007c4 	movi	r4,31
    d0a8:	20c02616 	blt	r4,r3,d144 <__divdf3+0x82c>
    d0ac:	00800804 	movi	r2,32
    d0b0:	10c5c83a 	sub	r2,r2,r3
    d0b4:	888a983a 	sll	r5,r17,r2
    d0b8:	40c8d83a 	srl	r4,r8,r3
    d0bc:	4084983a 	sll	r2,r8,r2
    d0c0:	88e2d83a 	srl	r17,r17,r3
    d0c4:	2906b03a 	or	r3,r5,r4
    d0c8:	1004c03a 	cmpne	r2,r2,zero
    d0cc:	1886b03a 	or	r3,r3,r2
    d0d0:	188001cc 	andi	r2,r3,7
    d0d4:	10000726 	beq	r2,zero,d0f4 <__divdf3+0x7dc>
    d0d8:	188003cc 	andi	r2,r3,15
    d0dc:	01000104 	movi	r4,4
    d0e0:	11000426 	beq	r2,r4,d0f4 <__divdf3+0x7dc>
    d0e4:	1805883a 	mov	r2,r3
    d0e8:	10c00104 	addi	r3,r2,4
    d0ec:	1885803a 	cmpltu	r2,r3,r2
    d0f0:	88a3883a 	add	r17,r17,r2
    d0f4:	8880202c 	andhi	r2,r17,128
    d0f8:	10002726 	beq	r2,zero,d198 <__divdf3+0x880>
    d0fc:	98c0004c 	andi	r3,r19,1
    d100:	00800044 	movi	r2,1
    d104:	000b883a 	mov	r5,zero
    d108:	0025883a 	mov	r18,zero
    d10c:	003e6106 	br	ca94 <__alt_data_end+0xff00ca94>
    d110:	85a1883a 	add	r16,r16,r22
    d114:	8585803a 	cmpltu	r2,r16,r22
    d118:	1705883a 	add	r2,r2,fp
    d11c:	14a5883a 	add	r18,r2,r18
    d120:	8c7fff84 	addi	r17,r17,-2
    d124:	003f1106 	br	cd6c <__alt_data_end+0xff00cd6c>
    d128:	b589883a 	add	r4,r22,r22
    d12c:	25ad803a 	cmpltu	r22,r4,r22
    d130:	b739883a 	add	fp,r22,fp
    d134:	40bfff84 	addi	r2,r8,-2
    d138:	bf2f883a 	add	r23,r23,fp
    d13c:	202d883a 	mov	r22,r4
    d140:	003f9306 	br	cf90 <__alt_data_end+0xff00cf90>
    d144:	013ff844 	movi	r4,-31
    d148:	2085c83a 	sub	r2,r4,r2
    d14c:	8888d83a 	srl	r4,r17,r2
    d150:	00800804 	movi	r2,32
    d154:	18802126 	beq	r3,r2,d1dc <__divdf3+0x8c4>
    d158:	00801004 	movi	r2,64
    d15c:	10c5c83a 	sub	r2,r2,r3
    d160:	8884983a 	sll	r2,r17,r2
    d164:	1204b03a 	or	r2,r2,r8
    d168:	1004c03a 	cmpne	r2,r2,zero
    d16c:	2084b03a 	or	r2,r4,r2
    d170:	144001cc 	andi	r17,r2,7
    d174:	88000d1e 	bne	r17,zero,d1ac <__divdf3+0x894>
    d178:	000b883a 	mov	r5,zero
    d17c:	1024d0fa 	srli	r18,r2,3
    d180:	98c0004c 	andi	r3,r19,1
    d184:	0005883a 	mov	r2,zero
    d188:	9464b03a 	or	r18,r18,r17
    d18c:	003e4106 	br	ca94 <__alt_data_end+0xff00ca94>
    d190:	1007883a 	mov	r3,r2
    d194:	0023883a 	mov	r17,zero
    d198:	880a927a 	slli	r5,r17,9
    d19c:	1805883a 	mov	r2,r3
    d1a0:	8822977a 	slli	r17,r17,29
    d1a4:	280ad33a 	srli	r5,r5,12
    d1a8:	003ff406 	br	d17c <__alt_data_end+0xff00d17c>
    d1ac:	10c003cc 	andi	r3,r2,15
    d1b0:	01000104 	movi	r4,4
    d1b4:	193ff626 	beq	r3,r4,d190 <__alt_data_end+0xff00d190>
    d1b8:	0023883a 	mov	r17,zero
    d1bc:	003fca06 	br	d0e8 <__alt_data_end+0xff00d0e8>
    d1c0:	813fd336 	bltu	r16,r4,d110 <__alt_data_end+0xff00d110>
    d1c4:	1023883a 	mov	r17,r2
    d1c8:	003fa806 	br	d06c <__alt_data_end+0xff00d06c>
    d1cc:	b0ffd636 	bltu	r22,r3,d128 <__alt_data_end+0xff00d128>
    d1d0:	1011883a 	mov	r8,r2
    d1d4:	b0ff341e 	bne	r22,r3,cea8 <__alt_data_end+0xff00cea8>
    d1d8:	003f3406 	br	ceac <__alt_data_end+0xff00ceac>
    d1dc:	0005883a 	mov	r2,zero
    d1e0:	003fe006 	br	d164 <__alt_data_end+0xff00d164>
    d1e4:	00800434 	movhi	r2,16
    d1e8:	89400234 	orhi	r5,r17,8
    d1ec:	10bfffc4 	addi	r2,r2,-1
    d1f0:	b807883a 	mov	r3,r23
    d1f4:	288a703a 	and	r5,r5,r2
    d1f8:	4025883a 	mov	r18,r8
    d1fc:	003e8206 	br	cc08 <__alt_data_end+0xff00cc08>

0000d200 <__eqdf2>:
    d200:	2804d53a 	srli	r2,r5,20
    d204:	3806d53a 	srli	r3,r7,20
    d208:	02000434 	movhi	r8,16
    d20c:	423fffc4 	addi	r8,r8,-1
    d210:	1081ffcc 	andi	r2,r2,2047
    d214:	0281ffc4 	movi	r10,2047
    d218:	2a12703a 	and	r9,r5,r8
    d21c:	18c1ffcc 	andi	r3,r3,2047
    d220:	3a10703a 	and	r8,r7,r8
    d224:	280ad7fa 	srli	r5,r5,31
    d228:	380ed7fa 	srli	r7,r7,31
    d22c:	12801026 	beq	r2,r10,d270 <__eqdf2+0x70>
    d230:	0281ffc4 	movi	r10,2047
    d234:	1a800a26 	beq	r3,r10,d260 <__eqdf2+0x60>
    d238:	10c00226 	beq	r2,r3,d244 <__eqdf2+0x44>
    d23c:	00800044 	movi	r2,1
    d240:	f800283a 	ret
    d244:	4a3ffd1e 	bne	r9,r8,d23c <__alt_data_end+0xff00d23c>
    d248:	21bffc1e 	bne	r4,r6,d23c <__alt_data_end+0xff00d23c>
    d24c:	29c00c26 	beq	r5,r7,d280 <__eqdf2+0x80>
    d250:	103ffa1e 	bne	r2,zero,d23c <__alt_data_end+0xff00d23c>
    d254:	2244b03a 	or	r2,r4,r9
    d258:	1004c03a 	cmpne	r2,r2,zero
    d25c:	f800283a 	ret
    d260:	3214b03a 	or	r10,r6,r8
    d264:	503ff426 	beq	r10,zero,d238 <__alt_data_end+0xff00d238>
    d268:	00800044 	movi	r2,1
    d26c:	f800283a 	ret
    d270:	2254b03a 	or	r10,r4,r9
    d274:	503fee26 	beq	r10,zero,d230 <__alt_data_end+0xff00d230>
    d278:	00800044 	movi	r2,1
    d27c:	f800283a 	ret
    d280:	0005883a 	mov	r2,zero
    d284:	f800283a 	ret

0000d288 <__gedf2>:
    d288:	2804d53a 	srli	r2,r5,20
    d28c:	3806d53a 	srli	r3,r7,20
    d290:	02000434 	movhi	r8,16
    d294:	423fffc4 	addi	r8,r8,-1
    d298:	1081ffcc 	andi	r2,r2,2047
    d29c:	0241ffc4 	movi	r9,2047
    d2a0:	2a14703a 	and	r10,r5,r8
    d2a4:	18c1ffcc 	andi	r3,r3,2047
    d2a8:	3a10703a 	and	r8,r7,r8
    d2ac:	280ad7fa 	srli	r5,r5,31
    d2b0:	380ed7fa 	srli	r7,r7,31
    d2b4:	12401d26 	beq	r2,r9,d32c <__gedf2+0xa4>
    d2b8:	0241ffc4 	movi	r9,2047
    d2bc:	1a401226 	beq	r3,r9,d308 <__gedf2+0x80>
    d2c0:	1000081e 	bne	r2,zero,d2e4 <__gedf2+0x5c>
    d2c4:	2296b03a 	or	r11,r4,r10
    d2c8:	5813003a 	cmpeq	r9,r11,zero
    d2cc:	1800091e 	bne	r3,zero,d2f4 <__gedf2+0x6c>
    d2d0:	3218b03a 	or	r12,r6,r8
    d2d4:	6000071e 	bne	r12,zero,d2f4 <__gedf2+0x6c>
    d2d8:	0005883a 	mov	r2,zero
    d2dc:	5800101e 	bne	r11,zero,d320 <__gedf2+0x98>
    d2e0:	f800283a 	ret
    d2e4:	18000c1e 	bne	r3,zero,d318 <__gedf2+0x90>
    d2e8:	3212b03a 	or	r9,r6,r8
    d2ec:	48000c26 	beq	r9,zero,d320 <__gedf2+0x98>
    d2f0:	0013883a 	mov	r9,zero
    d2f4:	39c03fcc 	andi	r7,r7,255
    d2f8:	48000826 	beq	r9,zero,d31c <__gedf2+0x94>
    d2fc:	38000926 	beq	r7,zero,d324 <__gedf2+0x9c>
    d300:	00800044 	movi	r2,1
    d304:	f800283a 	ret
    d308:	3212b03a 	or	r9,r6,r8
    d30c:	483fec26 	beq	r9,zero,d2c0 <__alt_data_end+0xff00d2c0>
    d310:	00bfff84 	movi	r2,-2
    d314:	f800283a 	ret
    d318:	39c03fcc 	andi	r7,r7,255
    d31c:	29c00626 	beq	r5,r7,d338 <__gedf2+0xb0>
    d320:	283ff726 	beq	r5,zero,d300 <__alt_data_end+0xff00d300>
    d324:	00bfffc4 	movi	r2,-1
    d328:	f800283a 	ret
    d32c:	2292b03a 	or	r9,r4,r10
    d330:	483fe126 	beq	r9,zero,d2b8 <__alt_data_end+0xff00d2b8>
    d334:	003ff606 	br	d310 <__alt_data_end+0xff00d310>
    d338:	18bff916 	blt	r3,r2,d320 <__alt_data_end+0xff00d320>
    d33c:	10c00316 	blt	r2,r3,d34c <__gedf2+0xc4>
    d340:	42bff736 	bltu	r8,r10,d320 <__alt_data_end+0xff00d320>
    d344:	52000326 	beq	r10,r8,d354 <__gedf2+0xcc>
    d348:	5200042e 	bgeu	r10,r8,d35c <__gedf2+0xd4>
    d34c:	283fec1e 	bne	r5,zero,d300 <__alt_data_end+0xff00d300>
    d350:	003ff406 	br	d324 <__alt_data_end+0xff00d324>
    d354:	313ff236 	bltu	r6,r4,d320 <__alt_data_end+0xff00d320>
    d358:	21bffc36 	bltu	r4,r6,d34c <__alt_data_end+0xff00d34c>
    d35c:	0005883a 	mov	r2,zero
    d360:	f800283a 	ret

0000d364 <__ledf2>:
    d364:	2804d53a 	srli	r2,r5,20
    d368:	3810d53a 	srli	r8,r7,20
    d36c:	00c00434 	movhi	r3,16
    d370:	18ffffc4 	addi	r3,r3,-1
    d374:	1081ffcc 	andi	r2,r2,2047
    d378:	0241ffc4 	movi	r9,2047
    d37c:	28d4703a 	and	r10,r5,r3
    d380:	4201ffcc 	andi	r8,r8,2047
    d384:	38c6703a 	and	r3,r7,r3
    d388:	280ad7fa 	srli	r5,r5,31
    d38c:	380ed7fa 	srli	r7,r7,31
    d390:	12401f26 	beq	r2,r9,d410 <__ledf2+0xac>
    d394:	0241ffc4 	movi	r9,2047
    d398:	42401426 	beq	r8,r9,d3ec <__ledf2+0x88>
    d39c:	1000091e 	bne	r2,zero,d3c4 <__ledf2+0x60>
    d3a0:	2296b03a 	or	r11,r4,r10
    d3a4:	5813003a 	cmpeq	r9,r11,zero
    d3a8:	29403fcc 	andi	r5,r5,255
    d3ac:	40000a1e 	bne	r8,zero,d3d8 <__ledf2+0x74>
    d3b0:	30d8b03a 	or	r12,r6,r3
    d3b4:	6000081e 	bne	r12,zero,d3d8 <__ledf2+0x74>
    d3b8:	0005883a 	mov	r2,zero
    d3bc:	5800111e 	bne	r11,zero,d404 <__ledf2+0xa0>
    d3c0:	f800283a 	ret
    d3c4:	29403fcc 	andi	r5,r5,255
    d3c8:	40000c1e 	bne	r8,zero,d3fc <__ledf2+0x98>
    d3cc:	30d2b03a 	or	r9,r6,r3
    d3d0:	48000c26 	beq	r9,zero,d404 <__ledf2+0xa0>
    d3d4:	0013883a 	mov	r9,zero
    d3d8:	39c03fcc 	andi	r7,r7,255
    d3dc:	48000826 	beq	r9,zero,d400 <__ledf2+0x9c>
    d3e0:	38001126 	beq	r7,zero,d428 <__ledf2+0xc4>
    d3e4:	00800044 	movi	r2,1
    d3e8:	f800283a 	ret
    d3ec:	30d2b03a 	or	r9,r6,r3
    d3f0:	483fea26 	beq	r9,zero,d39c <__alt_data_end+0xff00d39c>
    d3f4:	00800084 	movi	r2,2
    d3f8:	f800283a 	ret
    d3fc:	39c03fcc 	andi	r7,r7,255
    d400:	39400726 	beq	r7,r5,d420 <__ledf2+0xbc>
    d404:	2800081e 	bne	r5,zero,d428 <__ledf2+0xc4>
    d408:	00800044 	movi	r2,1
    d40c:	f800283a 	ret
    d410:	2292b03a 	or	r9,r4,r10
    d414:	483fdf26 	beq	r9,zero,d394 <__alt_data_end+0xff00d394>
    d418:	00800084 	movi	r2,2
    d41c:	f800283a 	ret
    d420:	4080030e 	bge	r8,r2,d430 <__ledf2+0xcc>
    d424:	383fef26 	beq	r7,zero,d3e4 <__alt_data_end+0xff00d3e4>
    d428:	00bfffc4 	movi	r2,-1
    d42c:	f800283a 	ret
    d430:	123feb16 	blt	r2,r8,d3e0 <__alt_data_end+0xff00d3e0>
    d434:	1abff336 	bltu	r3,r10,d404 <__alt_data_end+0xff00d404>
    d438:	50c00326 	beq	r10,r3,d448 <__ledf2+0xe4>
    d43c:	50c0042e 	bgeu	r10,r3,d450 <__ledf2+0xec>
    d440:	283fe81e 	bne	r5,zero,d3e4 <__alt_data_end+0xff00d3e4>
    d444:	003ff806 	br	d428 <__alt_data_end+0xff00d428>
    d448:	313fee36 	bltu	r6,r4,d404 <__alt_data_end+0xff00d404>
    d44c:	21bffc36 	bltu	r4,r6,d440 <__alt_data_end+0xff00d440>
    d450:	0005883a 	mov	r2,zero
    d454:	f800283a 	ret

0000d458 <__muldf3>:
    d458:	defff304 	addi	sp,sp,-52
    d45c:	2804d53a 	srli	r2,r5,20
    d460:	dd800915 	stw	r22,36(sp)
    d464:	282cd7fa 	srli	r22,r5,31
    d468:	dc000315 	stw	r16,12(sp)
    d46c:	04000434 	movhi	r16,16
    d470:	dd400815 	stw	r21,32(sp)
    d474:	dc800515 	stw	r18,20(sp)
    d478:	843fffc4 	addi	r16,r16,-1
    d47c:	dfc00c15 	stw	ra,48(sp)
    d480:	df000b15 	stw	fp,44(sp)
    d484:	ddc00a15 	stw	r23,40(sp)
    d488:	dd000715 	stw	r20,28(sp)
    d48c:	dcc00615 	stw	r19,24(sp)
    d490:	dc400415 	stw	r17,16(sp)
    d494:	1481ffcc 	andi	r18,r2,2047
    d498:	2c20703a 	and	r16,r5,r16
    d49c:	b02b883a 	mov	r21,r22
    d4a0:	b2403fcc 	andi	r9,r22,255
    d4a4:	90006026 	beq	r18,zero,d628 <__muldf3+0x1d0>
    d4a8:	0081ffc4 	movi	r2,2047
    d4ac:	2029883a 	mov	r20,r4
    d4b0:	90803626 	beq	r18,r2,d58c <__muldf3+0x134>
    d4b4:	80800434 	orhi	r2,r16,16
    d4b8:	100490fa 	slli	r2,r2,3
    d4bc:	2020d77a 	srli	r16,r4,29
    d4c0:	202890fa 	slli	r20,r4,3
    d4c4:	94bf0044 	addi	r18,r18,-1023
    d4c8:	80a0b03a 	or	r16,r16,r2
    d4cc:	0027883a 	mov	r19,zero
    d4d0:	0039883a 	mov	fp,zero
    d4d4:	3804d53a 	srli	r2,r7,20
    d4d8:	382ed7fa 	srli	r23,r7,31
    d4dc:	04400434 	movhi	r17,16
    d4e0:	8c7fffc4 	addi	r17,r17,-1
    d4e4:	1081ffcc 	andi	r2,r2,2047
    d4e8:	3011883a 	mov	r8,r6
    d4ec:	3c62703a 	and	r17,r7,r17
    d4f0:	ba803fcc 	andi	r10,r23,255
    d4f4:	10006d26 	beq	r2,zero,d6ac <__muldf3+0x254>
    d4f8:	00c1ffc4 	movi	r3,2047
    d4fc:	10c06526 	beq	r2,r3,d694 <__muldf3+0x23c>
    d500:	88c00434 	orhi	r3,r17,16
    d504:	180690fa 	slli	r3,r3,3
    d508:	3022d77a 	srli	r17,r6,29
    d50c:	301090fa 	slli	r8,r6,3
    d510:	10bf0044 	addi	r2,r2,-1023
    d514:	88e2b03a 	or	r17,r17,r3
    d518:	000b883a 	mov	r5,zero
    d51c:	9085883a 	add	r2,r18,r2
    d520:	2cc8b03a 	or	r4,r5,r19
    d524:	00c003c4 	movi	r3,15
    d528:	bdacf03a 	xor	r22,r23,r22
    d52c:	12c00044 	addi	r11,r2,1
    d530:	19009936 	bltu	r3,r4,d798 <__muldf3+0x340>
    d534:	200890ba 	slli	r4,r4,2
    d538:	00c00074 	movhi	r3,1
    d53c:	18f55304 	addi	r3,r3,-10932
    d540:	20c9883a 	add	r4,r4,r3
    d544:	20c00017 	ldw	r3,0(r4)
    d548:	1800683a 	jmp	r3
    d54c:	0000d798 	cmpnei	zero,zero,862
    d550:	0000d5ac 	andhi	zero,zero,854
    d554:	0000d5ac 	andhi	zero,zero,854
    d558:	0000d5a8 	cmpgeui	zero,zero,854
    d55c:	0000d774 	movhi	zero,861
    d560:	0000d774 	movhi	zero,861
    d564:	0000d75c 	xori	zero,zero,861
    d568:	0000d5a8 	cmpgeui	zero,zero,854
    d56c:	0000d774 	movhi	zero,861
    d570:	0000d75c 	xori	zero,zero,861
    d574:	0000d774 	movhi	zero,861
    d578:	0000d5a8 	cmpgeui	zero,zero,854
    d57c:	0000d784 	movi	zero,862
    d580:	0000d784 	movi	zero,862
    d584:	0000d784 	movi	zero,862
    d588:	0000d9a0 	cmpeqi	zero,zero,870
    d58c:	2404b03a 	or	r2,r4,r16
    d590:	10006f1e 	bne	r2,zero,d750 <__muldf3+0x2f8>
    d594:	04c00204 	movi	r19,8
    d598:	0021883a 	mov	r16,zero
    d59c:	0029883a 	mov	r20,zero
    d5a0:	07000084 	movi	fp,2
    d5a4:	003fcb06 	br	d4d4 <__alt_data_end+0xff00d4d4>
    d5a8:	502d883a 	mov	r22,r10
    d5ac:	00800084 	movi	r2,2
    d5b0:	28805726 	beq	r5,r2,d710 <__muldf3+0x2b8>
    d5b4:	008000c4 	movi	r2,3
    d5b8:	28816626 	beq	r5,r2,db54 <__muldf3+0x6fc>
    d5bc:	00800044 	movi	r2,1
    d5c0:	2881411e 	bne	r5,r2,dac8 <__muldf3+0x670>
    d5c4:	b02b883a 	mov	r21,r22
    d5c8:	0005883a 	mov	r2,zero
    d5cc:	000b883a 	mov	r5,zero
    d5d0:	0029883a 	mov	r20,zero
    d5d4:	1004953a 	slli	r2,r2,20
    d5d8:	a8c03fcc 	andi	r3,r21,255
    d5dc:	04400434 	movhi	r17,16
    d5e0:	8c7fffc4 	addi	r17,r17,-1
    d5e4:	180697fa 	slli	r3,r3,31
    d5e8:	2c4a703a 	and	r5,r5,r17
    d5ec:	288ab03a 	or	r5,r5,r2
    d5f0:	28c6b03a 	or	r3,r5,r3
    d5f4:	a005883a 	mov	r2,r20
    d5f8:	dfc00c17 	ldw	ra,48(sp)
    d5fc:	df000b17 	ldw	fp,44(sp)
    d600:	ddc00a17 	ldw	r23,40(sp)
    d604:	dd800917 	ldw	r22,36(sp)
    d608:	dd400817 	ldw	r21,32(sp)
    d60c:	dd000717 	ldw	r20,28(sp)
    d610:	dcc00617 	ldw	r19,24(sp)
    d614:	dc800517 	ldw	r18,20(sp)
    d618:	dc400417 	ldw	r17,16(sp)
    d61c:	dc000317 	ldw	r16,12(sp)
    d620:	dec00d04 	addi	sp,sp,52
    d624:	f800283a 	ret
    d628:	2404b03a 	or	r2,r4,r16
    d62c:	2027883a 	mov	r19,r4
    d630:	10004226 	beq	r2,zero,d73c <__muldf3+0x2e4>
    d634:	8000fc26 	beq	r16,zero,da28 <__muldf3+0x5d0>
    d638:	8009883a 	mov	r4,r16
    d63c:	d9800215 	stw	r6,8(sp)
    d640:	d9c00015 	stw	r7,0(sp)
    d644:	da400115 	stw	r9,4(sp)
    d648:	000e6700 	call	e670 <__clzsi2>
    d64c:	d9800217 	ldw	r6,8(sp)
    d650:	d9c00017 	ldw	r7,0(sp)
    d654:	da400117 	ldw	r9,4(sp)
    d658:	113ffd44 	addi	r4,r2,-11
    d65c:	00c00704 	movi	r3,28
    d660:	1900ed16 	blt	r3,r4,da18 <__muldf3+0x5c0>
    d664:	00c00744 	movi	r3,29
    d668:	147ffe04 	addi	r17,r2,-8
    d66c:	1907c83a 	sub	r3,r3,r4
    d670:	8460983a 	sll	r16,r16,r17
    d674:	98c6d83a 	srl	r3,r19,r3
    d678:	9c68983a 	sll	r20,r19,r17
    d67c:	1c20b03a 	or	r16,r3,r16
    d680:	1080fcc4 	addi	r2,r2,1011
    d684:	00a5c83a 	sub	r18,zero,r2
    d688:	0027883a 	mov	r19,zero
    d68c:	0039883a 	mov	fp,zero
    d690:	003f9006 	br	d4d4 <__alt_data_end+0xff00d4d4>
    d694:	3446b03a 	or	r3,r6,r17
    d698:	1800261e 	bne	r3,zero,d734 <__muldf3+0x2dc>
    d69c:	0023883a 	mov	r17,zero
    d6a0:	0011883a 	mov	r8,zero
    d6a4:	01400084 	movi	r5,2
    d6a8:	003f9c06 	br	d51c <__alt_data_end+0xff00d51c>
    d6ac:	3446b03a 	or	r3,r6,r17
    d6b0:	18001c26 	beq	r3,zero,d724 <__muldf3+0x2cc>
    d6b4:	8800ce26 	beq	r17,zero,d9f0 <__muldf3+0x598>
    d6b8:	8809883a 	mov	r4,r17
    d6bc:	d9800215 	stw	r6,8(sp)
    d6c0:	da400115 	stw	r9,4(sp)
    d6c4:	da800015 	stw	r10,0(sp)
    d6c8:	000e6700 	call	e670 <__clzsi2>
    d6cc:	d9800217 	ldw	r6,8(sp)
    d6d0:	da400117 	ldw	r9,4(sp)
    d6d4:	da800017 	ldw	r10,0(sp)
    d6d8:	113ffd44 	addi	r4,r2,-11
    d6dc:	00c00704 	movi	r3,28
    d6e0:	1900bf16 	blt	r3,r4,d9e0 <__muldf3+0x588>
    d6e4:	00c00744 	movi	r3,29
    d6e8:	123ffe04 	addi	r8,r2,-8
    d6ec:	1907c83a 	sub	r3,r3,r4
    d6f0:	8a22983a 	sll	r17,r17,r8
    d6f4:	30c6d83a 	srl	r3,r6,r3
    d6f8:	3210983a 	sll	r8,r6,r8
    d6fc:	1c62b03a 	or	r17,r3,r17
    d700:	1080fcc4 	addi	r2,r2,1011
    d704:	0085c83a 	sub	r2,zero,r2
    d708:	000b883a 	mov	r5,zero
    d70c:	003f8306 	br	d51c <__alt_data_end+0xff00d51c>
    d710:	b02b883a 	mov	r21,r22
    d714:	0081ffc4 	movi	r2,2047
    d718:	000b883a 	mov	r5,zero
    d71c:	0029883a 	mov	r20,zero
    d720:	003fac06 	br	d5d4 <__alt_data_end+0xff00d5d4>
    d724:	0023883a 	mov	r17,zero
    d728:	0011883a 	mov	r8,zero
    d72c:	01400044 	movi	r5,1
    d730:	003f7a06 	br	d51c <__alt_data_end+0xff00d51c>
    d734:	014000c4 	movi	r5,3
    d738:	003f7806 	br	d51c <__alt_data_end+0xff00d51c>
    d73c:	04c00104 	movi	r19,4
    d740:	0021883a 	mov	r16,zero
    d744:	0029883a 	mov	r20,zero
    d748:	07000044 	movi	fp,1
    d74c:	003f6106 	br	d4d4 <__alt_data_end+0xff00d4d4>
    d750:	04c00304 	movi	r19,12
    d754:	070000c4 	movi	fp,3
    d758:	003f5e06 	br	d4d4 <__alt_data_end+0xff00d4d4>
    d75c:	01400434 	movhi	r5,16
    d760:	002b883a 	mov	r21,zero
    d764:	297fffc4 	addi	r5,r5,-1
    d768:	053fffc4 	movi	r20,-1
    d76c:	0081ffc4 	movi	r2,2047
    d770:	003f9806 	br	d5d4 <__alt_data_end+0xff00d5d4>
    d774:	8023883a 	mov	r17,r16
    d778:	a011883a 	mov	r8,r20
    d77c:	e00b883a 	mov	r5,fp
    d780:	003f8a06 	br	d5ac <__alt_data_end+0xff00d5ac>
    d784:	8023883a 	mov	r17,r16
    d788:	a011883a 	mov	r8,r20
    d78c:	482d883a 	mov	r22,r9
    d790:	e00b883a 	mov	r5,fp
    d794:	003f8506 	br	d5ac <__alt_data_end+0xff00d5ac>
    d798:	a00ad43a 	srli	r5,r20,16
    d79c:	401ad43a 	srli	r13,r8,16
    d7a0:	a53fffcc 	andi	r20,r20,65535
    d7a4:	423fffcc 	andi	r8,r8,65535
    d7a8:	4519383a 	mul	r12,r8,r20
    d7ac:	4147383a 	mul	r3,r8,r5
    d7b0:	6d09383a 	mul	r4,r13,r20
    d7b4:	600cd43a 	srli	r6,r12,16
    d7b8:	2b5d383a 	mul	r14,r5,r13
    d7bc:	20c9883a 	add	r4,r4,r3
    d7c0:	310d883a 	add	r6,r6,r4
    d7c4:	30c0022e 	bgeu	r6,r3,d7d0 <__muldf3+0x378>
    d7c8:	00c00074 	movhi	r3,1
    d7cc:	70dd883a 	add	r14,r14,r3
    d7d0:	8826d43a 	srli	r19,r17,16
    d7d4:	8bffffcc 	andi	r15,r17,65535
    d7d8:	7d23383a 	mul	r17,r15,r20
    d7dc:	7949383a 	mul	r4,r15,r5
    d7e0:	9d29383a 	mul	r20,r19,r20
    d7e4:	8814d43a 	srli	r10,r17,16
    d7e8:	3012943a 	slli	r9,r6,16
    d7ec:	a129883a 	add	r20,r20,r4
    d7f0:	633fffcc 	andi	r12,r12,65535
    d7f4:	5515883a 	add	r10,r10,r20
    d7f8:	3006d43a 	srli	r3,r6,16
    d7fc:	4b13883a 	add	r9,r9,r12
    d800:	2ccb383a 	mul	r5,r5,r19
    d804:	5100022e 	bgeu	r10,r4,d810 <__muldf3+0x3b8>
    d808:	01000074 	movhi	r4,1
    d80c:	290b883a 	add	r5,r5,r4
    d810:	802ad43a 	srli	r21,r16,16
    d814:	843fffcc 	andi	r16,r16,65535
    d818:	440d383a 	mul	r6,r8,r16
    d81c:	4565383a 	mul	r18,r8,r21
    d820:	8349383a 	mul	r4,r16,r13
    d824:	500e943a 	slli	r7,r10,16
    d828:	3010d43a 	srli	r8,r6,16
    d82c:	5028d43a 	srli	r20,r10,16
    d830:	2489883a 	add	r4,r4,r18
    d834:	8abfffcc 	andi	r10,r17,65535
    d838:	3a95883a 	add	r10,r7,r10
    d83c:	4119883a 	add	r12,r8,r4
    d840:	a169883a 	add	r20,r20,r5
    d844:	1a87883a 	add	r3,r3,r10
    d848:	6d5b383a 	mul	r13,r13,r21
    d84c:	6480022e 	bgeu	r12,r18,d858 <__muldf3+0x400>
    d850:	01000074 	movhi	r4,1
    d854:	691b883a 	add	r13,r13,r4
    d858:	7c25383a 	mul	r18,r15,r16
    d85c:	7d4b383a 	mul	r5,r15,r21
    d860:	84cf383a 	mul	r7,r16,r19
    d864:	901ed43a 	srli	r15,r18,16
    d868:	6008d43a 	srli	r4,r12,16
    d86c:	6010943a 	slli	r8,r12,16
    d870:	394f883a 	add	r7,r7,r5
    d874:	333fffcc 	andi	r12,r6,65535
    d878:	79df883a 	add	r15,r15,r7
    d87c:	235b883a 	add	r13,r4,r13
    d880:	9d63383a 	mul	r17,r19,r21
    d884:	4309883a 	add	r4,r8,r12
    d888:	7940022e 	bgeu	r15,r5,d894 <__muldf3+0x43c>
    d88c:	01400074 	movhi	r5,1
    d890:	8963883a 	add	r17,r17,r5
    d894:	780a943a 	slli	r5,r15,16
    d898:	91bfffcc 	andi	r6,r18,65535
    d89c:	70c7883a 	add	r3,r14,r3
    d8a0:	298d883a 	add	r6,r5,r6
    d8a4:	1a8f803a 	cmpltu	r7,r3,r10
    d8a8:	350b883a 	add	r5,r6,r20
    d8ac:	20c7883a 	add	r3,r4,r3
    d8b0:	3955883a 	add	r10,r7,r5
    d8b4:	1909803a 	cmpltu	r4,r3,r4
    d8b8:	6a91883a 	add	r8,r13,r10
    d8bc:	780cd43a 	srli	r6,r15,16
    d8c0:	2219883a 	add	r12,r4,r8
    d8c4:	2d0b803a 	cmpltu	r5,r5,r20
    d8c8:	51cf803a 	cmpltu	r7,r10,r7
    d8cc:	29ceb03a 	or	r7,r5,r7
    d8d0:	4351803a 	cmpltu	r8,r8,r13
    d8d4:	610b803a 	cmpltu	r5,r12,r4
    d8d8:	4148b03a 	or	r4,r8,r5
    d8dc:	398f883a 	add	r7,r7,r6
    d8e0:	3909883a 	add	r4,r7,r4
    d8e4:	1810927a 	slli	r8,r3,9
    d8e8:	2449883a 	add	r4,r4,r17
    d8ec:	2008927a 	slli	r4,r4,9
    d8f0:	6022d5fa 	srli	r17,r12,23
    d8f4:	1806d5fa 	srli	r3,r3,23
    d8f8:	4252b03a 	or	r9,r8,r9
    d8fc:	600a927a 	slli	r5,r12,9
    d900:	4810c03a 	cmpne	r8,r9,zero
    d904:	2462b03a 	or	r17,r4,r17
    d908:	40c6b03a 	or	r3,r8,r3
    d90c:	8900402c 	andhi	r4,r17,256
    d910:	1950b03a 	or	r8,r3,r5
    d914:	20000726 	beq	r4,zero,d934 <__muldf3+0x4dc>
    d918:	4006d07a 	srli	r3,r8,1
    d91c:	880497fa 	slli	r2,r17,31
    d920:	4200004c 	andi	r8,r8,1
    d924:	8822d07a 	srli	r17,r17,1
    d928:	1a10b03a 	or	r8,r3,r8
    d92c:	1210b03a 	or	r8,r2,r8
    d930:	5805883a 	mov	r2,r11
    d934:	1140ffc4 	addi	r5,r2,1023
    d938:	0140440e 	bge	zero,r5,da4c <__muldf3+0x5f4>
    d93c:	40c001cc 	andi	r3,r8,7
    d940:	18000726 	beq	r3,zero,d960 <__muldf3+0x508>
    d944:	40c003cc 	andi	r3,r8,15
    d948:	01000104 	movi	r4,4
    d94c:	19000426 	beq	r3,r4,d960 <__muldf3+0x508>
    d950:	4107883a 	add	r3,r8,r4
    d954:	1a11803a 	cmpltu	r8,r3,r8
    d958:	8a23883a 	add	r17,r17,r8
    d95c:	1811883a 	mov	r8,r3
    d960:	88c0402c 	andhi	r3,r17,256
    d964:	18000426 	beq	r3,zero,d978 <__muldf3+0x520>
    d968:	11410004 	addi	r5,r2,1024
    d96c:	00bfc034 	movhi	r2,65280
    d970:	10bfffc4 	addi	r2,r2,-1
    d974:	88a2703a 	and	r17,r17,r2
    d978:	0081ff84 	movi	r2,2046
    d97c:	117f6416 	blt	r2,r5,d710 <__alt_data_end+0xff00d710>
    d980:	8828977a 	slli	r20,r17,29
    d984:	4010d0fa 	srli	r8,r8,3
    d988:	8822927a 	slli	r17,r17,9
    d98c:	2881ffcc 	andi	r2,r5,2047
    d990:	a228b03a 	or	r20,r20,r8
    d994:	880ad33a 	srli	r5,r17,12
    d998:	b02b883a 	mov	r21,r22
    d99c:	003f0d06 	br	d5d4 <__alt_data_end+0xff00d5d4>
    d9a0:	8080022c 	andhi	r2,r16,8
    d9a4:	10000926 	beq	r2,zero,d9cc <__muldf3+0x574>
    d9a8:	8880022c 	andhi	r2,r17,8
    d9ac:	1000071e 	bne	r2,zero,d9cc <__muldf3+0x574>
    d9b0:	00800434 	movhi	r2,16
    d9b4:	89400234 	orhi	r5,r17,8
    d9b8:	10bfffc4 	addi	r2,r2,-1
    d9bc:	b82b883a 	mov	r21,r23
    d9c0:	288a703a 	and	r5,r5,r2
    d9c4:	4029883a 	mov	r20,r8
    d9c8:	003f6806 	br	d76c <__alt_data_end+0xff00d76c>
    d9cc:	00800434 	movhi	r2,16
    d9d0:	81400234 	orhi	r5,r16,8
    d9d4:	10bfffc4 	addi	r2,r2,-1
    d9d8:	288a703a 	and	r5,r5,r2
    d9dc:	003f6306 	br	d76c <__alt_data_end+0xff00d76c>
    d9e0:	147ff604 	addi	r17,r2,-40
    d9e4:	3462983a 	sll	r17,r6,r17
    d9e8:	0011883a 	mov	r8,zero
    d9ec:	003f4406 	br	d700 <__alt_data_end+0xff00d700>
    d9f0:	3009883a 	mov	r4,r6
    d9f4:	d9800215 	stw	r6,8(sp)
    d9f8:	da400115 	stw	r9,4(sp)
    d9fc:	da800015 	stw	r10,0(sp)
    da00:	000e6700 	call	e670 <__clzsi2>
    da04:	10800804 	addi	r2,r2,32
    da08:	da800017 	ldw	r10,0(sp)
    da0c:	da400117 	ldw	r9,4(sp)
    da10:	d9800217 	ldw	r6,8(sp)
    da14:	003f3006 	br	d6d8 <__alt_data_end+0xff00d6d8>
    da18:	143ff604 	addi	r16,r2,-40
    da1c:	9c20983a 	sll	r16,r19,r16
    da20:	0029883a 	mov	r20,zero
    da24:	003f1606 	br	d680 <__alt_data_end+0xff00d680>
    da28:	d9800215 	stw	r6,8(sp)
    da2c:	d9c00015 	stw	r7,0(sp)
    da30:	da400115 	stw	r9,4(sp)
    da34:	000e6700 	call	e670 <__clzsi2>
    da38:	10800804 	addi	r2,r2,32
    da3c:	da400117 	ldw	r9,4(sp)
    da40:	d9c00017 	ldw	r7,0(sp)
    da44:	d9800217 	ldw	r6,8(sp)
    da48:	003f0306 	br	d658 <__alt_data_end+0xff00d658>
    da4c:	00c00044 	movi	r3,1
    da50:	1947c83a 	sub	r3,r3,r5
    da54:	00800e04 	movi	r2,56
    da58:	10feda16 	blt	r2,r3,d5c4 <__alt_data_end+0xff00d5c4>
    da5c:	008007c4 	movi	r2,31
    da60:	10c01b16 	blt	r2,r3,dad0 <__muldf3+0x678>
    da64:	00800804 	movi	r2,32
    da68:	10c5c83a 	sub	r2,r2,r3
    da6c:	888a983a 	sll	r5,r17,r2
    da70:	40c8d83a 	srl	r4,r8,r3
    da74:	4084983a 	sll	r2,r8,r2
    da78:	88e2d83a 	srl	r17,r17,r3
    da7c:	2906b03a 	or	r3,r5,r4
    da80:	1004c03a 	cmpne	r2,r2,zero
    da84:	1886b03a 	or	r3,r3,r2
    da88:	188001cc 	andi	r2,r3,7
    da8c:	10000726 	beq	r2,zero,daac <__muldf3+0x654>
    da90:	188003cc 	andi	r2,r3,15
    da94:	01000104 	movi	r4,4
    da98:	11000426 	beq	r2,r4,daac <__muldf3+0x654>
    da9c:	1805883a 	mov	r2,r3
    daa0:	10c00104 	addi	r3,r2,4
    daa4:	1885803a 	cmpltu	r2,r3,r2
    daa8:	88a3883a 	add	r17,r17,r2
    daac:	8880202c 	andhi	r2,r17,128
    dab0:	10001c26 	beq	r2,zero,db24 <__muldf3+0x6cc>
    dab4:	b02b883a 	mov	r21,r22
    dab8:	00800044 	movi	r2,1
    dabc:	000b883a 	mov	r5,zero
    dac0:	0029883a 	mov	r20,zero
    dac4:	003ec306 	br	d5d4 <__alt_data_end+0xff00d5d4>
    dac8:	5805883a 	mov	r2,r11
    dacc:	003f9906 	br	d934 <__alt_data_end+0xff00d934>
    dad0:	00bff844 	movi	r2,-31
    dad4:	1145c83a 	sub	r2,r2,r5
    dad8:	8888d83a 	srl	r4,r17,r2
    dadc:	00800804 	movi	r2,32
    dae0:	18801a26 	beq	r3,r2,db4c <__muldf3+0x6f4>
    dae4:	00801004 	movi	r2,64
    dae8:	10c5c83a 	sub	r2,r2,r3
    daec:	8884983a 	sll	r2,r17,r2
    daf0:	1204b03a 	or	r2,r2,r8
    daf4:	1004c03a 	cmpne	r2,r2,zero
    daf8:	2084b03a 	or	r2,r4,r2
    dafc:	144001cc 	andi	r17,r2,7
    db00:	88000d1e 	bne	r17,zero,db38 <__muldf3+0x6e0>
    db04:	000b883a 	mov	r5,zero
    db08:	1028d0fa 	srli	r20,r2,3
    db0c:	b02b883a 	mov	r21,r22
    db10:	0005883a 	mov	r2,zero
    db14:	a468b03a 	or	r20,r20,r17
    db18:	003eae06 	br	d5d4 <__alt_data_end+0xff00d5d4>
    db1c:	1007883a 	mov	r3,r2
    db20:	0023883a 	mov	r17,zero
    db24:	880a927a 	slli	r5,r17,9
    db28:	1805883a 	mov	r2,r3
    db2c:	8822977a 	slli	r17,r17,29
    db30:	280ad33a 	srli	r5,r5,12
    db34:	003ff406 	br	db08 <__alt_data_end+0xff00db08>
    db38:	10c003cc 	andi	r3,r2,15
    db3c:	01000104 	movi	r4,4
    db40:	193ff626 	beq	r3,r4,db1c <__alt_data_end+0xff00db1c>
    db44:	0023883a 	mov	r17,zero
    db48:	003fd506 	br	daa0 <__alt_data_end+0xff00daa0>
    db4c:	0005883a 	mov	r2,zero
    db50:	003fe706 	br	daf0 <__alt_data_end+0xff00daf0>
    db54:	00800434 	movhi	r2,16
    db58:	89400234 	orhi	r5,r17,8
    db5c:	10bfffc4 	addi	r2,r2,-1
    db60:	b02b883a 	mov	r21,r22
    db64:	288a703a 	and	r5,r5,r2
    db68:	4029883a 	mov	r20,r8
    db6c:	003eff06 	br	d76c <__alt_data_end+0xff00d76c>

0000db70 <__subdf3>:
    db70:	02000434 	movhi	r8,16
    db74:	423fffc4 	addi	r8,r8,-1
    db78:	defffb04 	addi	sp,sp,-20
    db7c:	2a14703a 	and	r10,r5,r8
    db80:	3812d53a 	srli	r9,r7,20
    db84:	3a10703a 	and	r8,r7,r8
    db88:	2006d77a 	srli	r3,r4,29
    db8c:	3004d77a 	srli	r2,r6,29
    db90:	dc000015 	stw	r16,0(sp)
    db94:	501490fa 	slli	r10,r10,3
    db98:	2820d53a 	srli	r16,r5,20
    db9c:	401090fa 	slli	r8,r8,3
    dba0:	dc800215 	stw	r18,8(sp)
    dba4:	dc400115 	stw	r17,4(sp)
    dba8:	dfc00415 	stw	ra,16(sp)
    dbac:	202290fa 	slli	r17,r4,3
    dbb0:	dcc00315 	stw	r19,12(sp)
    dbb4:	4a41ffcc 	andi	r9,r9,2047
    dbb8:	0101ffc4 	movi	r4,2047
    dbbc:	2824d7fa 	srli	r18,r5,31
    dbc0:	8401ffcc 	andi	r16,r16,2047
    dbc4:	50c6b03a 	or	r3,r10,r3
    dbc8:	380ed7fa 	srli	r7,r7,31
    dbcc:	408ab03a 	or	r5,r8,r2
    dbd0:	300c90fa 	slli	r6,r6,3
    dbd4:	49009626 	beq	r9,r4,de30 <__subdf3+0x2c0>
    dbd8:	39c0005c 	xori	r7,r7,1
    dbdc:	8245c83a 	sub	r2,r16,r9
    dbe0:	3c807426 	beq	r7,r18,ddb4 <__subdf3+0x244>
    dbe4:	0080af0e 	bge	zero,r2,dea4 <__subdf3+0x334>
    dbe8:	48002a1e 	bne	r9,zero,dc94 <__subdf3+0x124>
    dbec:	2988b03a 	or	r4,r5,r6
    dbf0:	20009a1e 	bne	r4,zero,de5c <__subdf3+0x2ec>
    dbf4:	888001cc 	andi	r2,r17,7
    dbf8:	10000726 	beq	r2,zero,dc18 <__subdf3+0xa8>
    dbfc:	888003cc 	andi	r2,r17,15
    dc00:	01000104 	movi	r4,4
    dc04:	11000426 	beq	r2,r4,dc18 <__subdf3+0xa8>
    dc08:	890b883a 	add	r5,r17,r4
    dc0c:	2c63803a 	cmpltu	r17,r5,r17
    dc10:	1c47883a 	add	r3,r3,r17
    dc14:	2823883a 	mov	r17,r5
    dc18:	1880202c 	andhi	r2,r3,128
    dc1c:	10005926 	beq	r2,zero,dd84 <__subdf3+0x214>
    dc20:	84000044 	addi	r16,r16,1
    dc24:	0081ffc4 	movi	r2,2047
    dc28:	8080be26 	beq	r16,r2,df24 <__subdf3+0x3b4>
    dc2c:	017fe034 	movhi	r5,65408
    dc30:	297fffc4 	addi	r5,r5,-1
    dc34:	1946703a 	and	r3,r3,r5
    dc38:	1804977a 	slli	r2,r3,29
    dc3c:	1806927a 	slli	r3,r3,9
    dc40:	8822d0fa 	srli	r17,r17,3
    dc44:	8401ffcc 	andi	r16,r16,2047
    dc48:	180ad33a 	srli	r5,r3,12
    dc4c:	9100004c 	andi	r4,r18,1
    dc50:	1444b03a 	or	r2,r2,r17
    dc54:	80c1ffcc 	andi	r3,r16,2047
    dc58:	1820953a 	slli	r16,r3,20
    dc5c:	20c03fcc 	andi	r3,r4,255
    dc60:	180897fa 	slli	r4,r3,31
    dc64:	00c00434 	movhi	r3,16
    dc68:	18ffffc4 	addi	r3,r3,-1
    dc6c:	28c6703a 	and	r3,r5,r3
    dc70:	1c06b03a 	or	r3,r3,r16
    dc74:	1906b03a 	or	r3,r3,r4
    dc78:	dfc00417 	ldw	ra,16(sp)
    dc7c:	dcc00317 	ldw	r19,12(sp)
    dc80:	dc800217 	ldw	r18,8(sp)
    dc84:	dc400117 	ldw	r17,4(sp)
    dc88:	dc000017 	ldw	r16,0(sp)
    dc8c:	dec00504 	addi	sp,sp,20
    dc90:	f800283a 	ret
    dc94:	0101ffc4 	movi	r4,2047
    dc98:	813fd626 	beq	r16,r4,dbf4 <__alt_data_end+0xff00dbf4>
    dc9c:	29402034 	orhi	r5,r5,128
    dca0:	01000e04 	movi	r4,56
    dca4:	2080a316 	blt	r4,r2,df34 <__subdf3+0x3c4>
    dca8:	010007c4 	movi	r4,31
    dcac:	2080c616 	blt	r4,r2,dfc8 <__subdf3+0x458>
    dcb0:	01000804 	movi	r4,32
    dcb4:	2089c83a 	sub	r4,r4,r2
    dcb8:	2910983a 	sll	r8,r5,r4
    dcbc:	308ed83a 	srl	r7,r6,r2
    dcc0:	3108983a 	sll	r4,r6,r4
    dcc4:	2884d83a 	srl	r2,r5,r2
    dcc8:	41ccb03a 	or	r6,r8,r7
    dccc:	2008c03a 	cmpne	r4,r4,zero
    dcd0:	310cb03a 	or	r6,r6,r4
    dcd4:	898dc83a 	sub	r6,r17,r6
    dcd8:	89a3803a 	cmpltu	r17,r17,r6
    dcdc:	1887c83a 	sub	r3,r3,r2
    dce0:	1c47c83a 	sub	r3,r3,r17
    dce4:	3023883a 	mov	r17,r6
    dce8:	1880202c 	andhi	r2,r3,128
    dcec:	10002326 	beq	r2,zero,dd7c <__subdf3+0x20c>
    dcf0:	04c02034 	movhi	r19,128
    dcf4:	9cffffc4 	addi	r19,r19,-1
    dcf8:	1ce6703a 	and	r19,r3,r19
    dcfc:	98007a26 	beq	r19,zero,dee8 <__subdf3+0x378>
    dd00:	9809883a 	mov	r4,r19
    dd04:	000e6700 	call	e670 <__clzsi2>
    dd08:	113ffe04 	addi	r4,r2,-8
    dd0c:	00c007c4 	movi	r3,31
    dd10:	19007b16 	blt	r3,r4,df00 <__subdf3+0x390>
    dd14:	00800804 	movi	r2,32
    dd18:	1105c83a 	sub	r2,r2,r4
    dd1c:	8884d83a 	srl	r2,r17,r2
    dd20:	9906983a 	sll	r3,r19,r4
    dd24:	8922983a 	sll	r17,r17,r4
    dd28:	10c4b03a 	or	r2,r2,r3
    dd2c:	24007816 	blt	r4,r16,df10 <__subdf3+0x3a0>
    dd30:	2421c83a 	sub	r16,r4,r16
    dd34:	80c00044 	addi	r3,r16,1
    dd38:	010007c4 	movi	r4,31
    dd3c:	20c09516 	blt	r4,r3,df94 <__subdf3+0x424>
    dd40:	01400804 	movi	r5,32
    dd44:	28cbc83a 	sub	r5,r5,r3
    dd48:	88c8d83a 	srl	r4,r17,r3
    dd4c:	8962983a 	sll	r17,r17,r5
    dd50:	114a983a 	sll	r5,r2,r5
    dd54:	10c6d83a 	srl	r3,r2,r3
    dd58:	8804c03a 	cmpne	r2,r17,zero
    dd5c:	290ab03a 	or	r5,r5,r4
    dd60:	28a2b03a 	or	r17,r5,r2
    dd64:	0021883a 	mov	r16,zero
    dd68:	003fa206 	br	dbf4 <__alt_data_end+0xff00dbf4>
    dd6c:	2090b03a 	or	r8,r4,r2
    dd70:	40018e26 	beq	r8,zero,e3ac <__subdf3+0x83c>
    dd74:	1007883a 	mov	r3,r2
    dd78:	2023883a 	mov	r17,r4
    dd7c:	888001cc 	andi	r2,r17,7
    dd80:	103f9e1e 	bne	r2,zero,dbfc <__alt_data_end+0xff00dbfc>
    dd84:	1804977a 	slli	r2,r3,29
    dd88:	8822d0fa 	srli	r17,r17,3
    dd8c:	1810d0fa 	srli	r8,r3,3
    dd90:	9100004c 	andi	r4,r18,1
    dd94:	1444b03a 	or	r2,r2,r17
    dd98:	00c1ffc4 	movi	r3,2047
    dd9c:	80c02826 	beq	r16,r3,de40 <__subdf3+0x2d0>
    dda0:	01400434 	movhi	r5,16
    dda4:	297fffc4 	addi	r5,r5,-1
    dda8:	80e0703a 	and	r16,r16,r3
    ddac:	414a703a 	and	r5,r8,r5
    ddb0:	003fa806 	br	dc54 <__alt_data_end+0xff00dc54>
    ddb4:	0080630e 	bge	zero,r2,df44 <__subdf3+0x3d4>
    ddb8:	48003026 	beq	r9,zero,de7c <__subdf3+0x30c>
    ddbc:	0101ffc4 	movi	r4,2047
    ddc0:	813f8c26 	beq	r16,r4,dbf4 <__alt_data_end+0xff00dbf4>
    ddc4:	29402034 	orhi	r5,r5,128
    ddc8:	01000e04 	movi	r4,56
    ddcc:	2080a90e 	bge	r4,r2,e074 <__subdf3+0x504>
    ddd0:	298cb03a 	or	r6,r5,r6
    ddd4:	3012c03a 	cmpne	r9,r6,zero
    ddd8:	0005883a 	mov	r2,zero
    dddc:	4c53883a 	add	r9,r9,r17
    dde0:	4c63803a 	cmpltu	r17,r9,r17
    dde4:	10c7883a 	add	r3,r2,r3
    dde8:	88c7883a 	add	r3,r17,r3
    ddec:	4823883a 	mov	r17,r9
    ddf0:	1880202c 	andhi	r2,r3,128
    ddf4:	1000d026 	beq	r2,zero,e138 <__subdf3+0x5c8>
    ddf8:	84000044 	addi	r16,r16,1
    ddfc:	0081ffc4 	movi	r2,2047
    de00:	8080fe26 	beq	r16,r2,e1fc <__subdf3+0x68c>
    de04:	00bfe034 	movhi	r2,65408
    de08:	10bfffc4 	addi	r2,r2,-1
    de0c:	1886703a 	and	r3,r3,r2
    de10:	880ad07a 	srli	r5,r17,1
    de14:	180497fa 	slli	r2,r3,31
    de18:	8900004c 	andi	r4,r17,1
    de1c:	2922b03a 	or	r17,r5,r4
    de20:	1806d07a 	srli	r3,r3,1
    de24:	1462b03a 	or	r17,r2,r17
    de28:	3825883a 	mov	r18,r7
    de2c:	003f7106 	br	dbf4 <__alt_data_end+0xff00dbf4>
    de30:	2984b03a 	or	r2,r5,r6
    de34:	103f6826 	beq	r2,zero,dbd8 <__alt_data_end+0xff00dbd8>
    de38:	39c03fcc 	andi	r7,r7,255
    de3c:	003f6706 	br	dbdc <__alt_data_end+0xff00dbdc>
    de40:	4086b03a 	or	r3,r8,r2
    de44:	18015226 	beq	r3,zero,e390 <__subdf3+0x820>
    de48:	00c00434 	movhi	r3,16
    de4c:	41400234 	orhi	r5,r8,8
    de50:	18ffffc4 	addi	r3,r3,-1
    de54:	28ca703a 	and	r5,r5,r3
    de58:	003f7e06 	br	dc54 <__alt_data_end+0xff00dc54>
    de5c:	10bfffc4 	addi	r2,r2,-1
    de60:	1000491e 	bne	r2,zero,df88 <__subdf3+0x418>
    de64:	898fc83a 	sub	r7,r17,r6
    de68:	89e3803a 	cmpltu	r17,r17,r7
    de6c:	1947c83a 	sub	r3,r3,r5
    de70:	1c47c83a 	sub	r3,r3,r17
    de74:	3823883a 	mov	r17,r7
    de78:	003f9b06 	br	dce8 <__alt_data_end+0xff00dce8>
    de7c:	2988b03a 	or	r4,r5,r6
    de80:	203f5c26 	beq	r4,zero,dbf4 <__alt_data_end+0xff00dbf4>
    de84:	10bfffc4 	addi	r2,r2,-1
    de88:	1000931e 	bne	r2,zero,e0d8 <__subdf3+0x568>
    de8c:	898d883a 	add	r6,r17,r6
    de90:	3463803a 	cmpltu	r17,r6,r17
    de94:	1947883a 	add	r3,r3,r5
    de98:	88c7883a 	add	r3,r17,r3
    de9c:	3023883a 	mov	r17,r6
    dea0:	003fd306 	br	ddf0 <__alt_data_end+0xff00ddf0>
    dea4:	1000541e 	bne	r2,zero,dff8 <__subdf3+0x488>
    dea8:	80800044 	addi	r2,r16,1
    deac:	1081ffcc 	andi	r2,r2,2047
    deb0:	01000044 	movi	r4,1
    deb4:	2080a20e 	bge	r4,r2,e140 <__subdf3+0x5d0>
    deb8:	8989c83a 	sub	r4,r17,r6
    debc:	8905803a 	cmpltu	r2,r17,r4
    dec0:	1967c83a 	sub	r19,r3,r5
    dec4:	98a7c83a 	sub	r19,r19,r2
    dec8:	9880202c 	andhi	r2,r19,128
    decc:	10006326 	beq	r2,zero,e05c <__subdf3+0x4ec>
    ded0:	3463c83a 	sub	r17,r6,r17
    ded4:	28c7c83a 	sub	r3,r5,r3
    ded8:	344d803a 	cmpltu	r6,r6,r17
    dedc:	19a7c83a 	sub	r19,r3,r6
    dee0:	3825883a 	mov	r18,r7
    dee4:	983f861e 	bne	r19,zero,dd00 <__alt_data_end+0xff00dd00>
    dee8:	8809883a 	mov	r4,r17
    deec:	000e6700 	call	e670 <__clzsi2>
    def0:	10800804 	addi	r2,r2,32
    def4:	113ffe04 	addi	r4,r2,-8
    def8:	00c007c4 	movi	r3,31
    defc:	193f850e 	bge	r3,r4,dd14 <__alt_data_end+0xff00dd14>
    df00:	10bff604 	addi	r2,r2,-40
    df04:	8884983a 	sll	r2,r17,r2
    df08:	0023883a 	mov	r17,zero
    df0c:	243f880e 	bge	r4,r16,dd30 <__alt_data_end+0xff00dd30>
    df10:	00ffe034 	movhi	r3,65408
    df14:	18ffffc4 	addi	r3,r3,-1
    df18:	8121c83a 	sub	r16,r16,r4
    df1c:	10c6703a 	and	r3,r2,r3
    df20:	003f3406 	br	dbf4 <__alt_data_end+0xff00dbf4>
    df24:	9100004c 	andi	r4,r18,1
    df28:	000b883a 	mov	r5,zero
    df2c:	0005883a 	mov	r2,zero
    df30:	003f4806 	br	dc54 <__alt_data_end+0xff00dc54>
    df34:	298cb03a 	or	r6,r5,r6
    df38:	300cc03a 	cmpne	r6,r6,zero
    df3c:	0005883a 	mov	r2,zero
    df40:	003f6406 	br	dcd4 <__alt_data_end+0xff00dcd4>
    df44:	10009a1e 	bne	r2,zero,e1b0 <__subdf3+0x640>
    df48:	82400044 	addi	r9,r16,1
    df4c:	4881ffcc 	andi	r2,r9,2047
    df50:	02800044 	movi	r10,1
    df54:	5080670e 	bge	r10,r2,e0f4 <__subdf3+0x584>
    df58:	0081ffc4 	movi	r2,2047
    df5c:	4880af26 	beq	r9,r2,e21c <__subdf3+0x6ac>
    df60:	898d883a 	add	r6,r17,r6
    df64:	1945883a 	add	r2,r3,r5
    df68:	3447803a 	cmpltu	r3,r6,r17
    df6c:	1887883a 	add	r3,r3,r2
    df70:	182297fa 	slli	r17,r3,31
    df74:	300cd07a 	srli	r6,r6,1
    df78:	1806d07a 	srli	r3,r3,1
    df7c:	4821883a 	mov	r16,r9
    df80:	89a2b03a 	or	r17,r17,r6
    df84:	003f1b06 	br	dbf4 <__alt_data_end+0xff00dbf4>
    df88:	0101ffc4 	movi	r4,2047
    df8c:	813f441e 	bne	r16,r4,dca0 <__alt_data_end+0xff00dca0>
    df90:	003f1806 	br	dbf4 <__alt_data_end+0xff00dbf4>
    df94:	843ff844 	addi	r16,r16,-31
    df98:	01400804 	movi	r5,32
    df9c:	1408d83a 	srl	r4,r2,r16
    dfa0:	19405026 	beq	r3,r5,e0e4 <__subdf3+0x574>
    dfa4:	01401004 	movi	r5,64
    dfa8:	28c7c83a 	sub	r3,r5,r3
    dfac:	10c4983a 	sll	r2,r2,r3
    dfb0:	88a2b03a 	or	r17,r17,r2
    dfb4:	8822c03a 	cmpne	r17,r17,zero
    dfb8:	2462b03a 	or	r17,r4,r17
    dfbc:	0007883a 	mov	r3,zero
    dfc0:	0021883a 	mov	r16,zero
    dfc4:	003f6d06 	br	dd7c <__alt_data_end+0xff00dd7c>
    dfc8:	11fff804 	addi	r7,r2,-32
    dfcc:	01000804 	movi	r4,32
    dfd0:	29ced83a 	srl	r7,r5,r7
    dfd4:	11004526 	beq	r2,r4,e0ec <__subdf3+0x57c>
    dfd8:	01001004 	movi	r4,64
    dfdc:	2089c83a 	sub	r4,r4,r2
    dfe0:	2904983a 	sll	r2,r5,r4
    dfe4:	118cb03a 	or	r6,r2,r6
    dfe8:	300cc03a 	cmpne	r6,r6,zero
    dfec:	398cb03a 	or	r6,r7,r6
    dff0:	0005883a 	mov	r2,zero
    dff4:	003f3706 	br	dcd4 <__alt_data_end+0xff00dcd4>
    dff8:	80002a26 	beq	r16,zero,e0a4 <__subdf3+0x534>
    dffc:	0101ffc4 	movi	r4,2047
    e000:	49006626 	beq	r9,r4,e19c <__subdf3+0x62c>
    e004:	0085c83a 	sub	r2,zero,r2
    e008:	18c02034 	orhi	r3,r3,128
    e00c:	01000e04 	movi	r4,56
    e010:	20807e16 	blt	r4,r2,e20c <__subdf3+0x69c>
    e014:	010007c4 	movi	r4,31
    e018:	2080e716 	blt	r4,r2,e3b8 <__subdf3+0x848>
    e01c:	01000804 	movi	r4,32
    e020:	2089c83a 	sub	r4,r4,r2
    e024:	1914983a 	sll	r10,r3,r4
    e028:	8890d83a 	srl	r8,r17,r2
    e02c:	8908983a 	sll	r4,r17,r4
    e030:	1884d83a 	srl	r2,r3,r2
    e034:	5222b03a 	or	r17,r10,r8
    e038:	2006c03a 	cmpne	r3,r4,zero
    e03c:	88e2b03a 	or	r17,r17,r3
    e040:	3463c83a 	sub	r17,r6,r17
    e044:	2885c83a 	sub	r2,r5,r2
    e048:	344d803a 	cmpltu	r6,r6,r17
    e04c:	1187c83a 	sub	r3,r2,r6
    e050:	4821883a 	mov	r16,r9
    e054:	3825883a 	mov	r18,r7
    e058:	003f2306 	br	dce8 <__alt_data_end+0xff00dce8>
    e05c:	24d0b03a 	or	r8,r4,r19
    e060:	40001b1e 	bne	r8,zero,e0d0 <__subdf3+0x560>
    e064:	0005883a 	mov	r2,zero
    e068:	0009883a 	mov	r4,zero
    e06c:	0021883a 	mov	r16,zero
    e070:	003f4906 	br	dd98 <__alt_data_end+0xff00dd98>
    e074:	010007c4 	movi	r4,31
    e078:	20803a16 	blt	r4,r2,e164 <__subdf3+0x5f4>
    e07c:	01000804 	movi	r4,32
    e080:	2089c83a 	sub	r4,r4,r2
    e084:	2912983a 	sll	r9,r5,r4
    e088:	3090d83a 	srl	r8,r6,r2
    e08c:	3108983a 	sll	r4,r6,r4
    e090:	2884d83a 	srl	r2,r5,r2
    e094:	4a12b03a 	or	r9,r9,r8
    e098:	2008c03a 	cmpne	r4,r4,zero
    e09c:	4912b03a 	or	r9,r9,r4
    e0a0:	003f4e06 	br	dddc <__alt_data_end+0xff00dddc>
    e0a4:	1c48b03a 	or	r4,r3,r17
    e0a8:	20003c26 	beq	r4,zero,e19c <__subdf3+0x62c>
    e0ac:	0084303a 	nor	r2,zero,r2
    e0b0:	1000381e 	bne	r2,zero,e194 <__subdf3+0x624>
    e0b4:	3463c83a 	sub	r17,r6,r17
    e0b8:	28c5c83a 	sub	r2,r5,r3
    e0bc:	344d803a 	cmpltu	r6,r6,r17
    e0c0:	1187c83a 	sub	r3,r2,r6
    e0c4:	4821883a 	mov	r16,r9
    e0c8:	3825883a 	mov	r18,r7
    e0cc:	003f0606 	br	dce8 <__alt_data_end+0xff00dce8>
    e0d0:	2023883a 	mov	r17,r4
    e0d4:	003f0906 	br	dcfc <__alt_data_end+0xff00dcfc>
    e0d8:	0101ffc4 	movi	r4,2047
    e0dc:	813f3a1e 	bne	r16,r4,ddc8 <__alt_data_end+0xff00ddc8>
    e0e0:	003ec406 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e0e4:	0005883a 	mov	r2,zero
    e0e8:	003fb106 	br	dfb0 <__alt_data_end+0xff00dfb0>
    e0ec:	0005883a 	mov	r2,zero
    e0f0:	003fbc06 	br	dfe4 <__alt_data_end+0xff00dfe4>
    e0f4:	1c44b03a 	or	r2,r3,r17
    e0f8:	80008e1e 	bne	r16,zero,e334 <__subdf3+0x7c4>
    e0fc:	1000c826 	beq	r2,zero,e420 <__subdf3+0x8b0>
    e100:	2984b03a 	or	r2,r5,r6
    e104:	103ebb26 	beq	r2,zero,dbf4 <__alt_data_end+0xff00dbf4>
    e108:	8989883a 	add	r4,r17,r6
    e10c:	1945883a 	add	r2,r3,r5
    e110:	2447803a 	cmpltu	r3,r4,r17
    e114:	1887883a 	add	r3,r3,r2
    e118:	1880202c 	andhi	r2,r3,128
    e11c:	2023883a 	mov	r17,r4
    e120:	103f1626 	beq	r2,zero,dd7c <__alt_data_end+0xff00dd7c>
    e124:	00bfe034 	movhi	r2,65408
    e128:	10bfffc4 	addi	r2,r2,-1
    e12c:	5021883a 	mov	r16,r10
    e130:	1886703a 	and	r3,r3,r2
    e134:	003eaf06 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e138:	3825883a 	mov	r18,r7
    e13c:	003f0f06 	br	dd7c <__alt_data_end+0xff00dd7c>
    e140:	1c44b03a 	or	r2,r3,r17
    e144:	8000251e 	bne	r16,zero,e1dc <__subdf3+0x66c>
    e148:	1000661e 	bne	r2,zero,e2e4 <__subdf3+0x774>
    e14c:	2990b03a 	or	r8,r5,r6
    e150:	40009626 	beq	r8,zero,e3ac <__subdf3+0x83c>
    e154:	2807883a 	mov	r3,r5
    e158:	3023883a 	mov	r17,r6
    e15c:	3825883a 	mov	r18,r7
    e160:	003ea406 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e164:	127ff804 	addi	r9,r2,-32
    e168:	01000804 	movi	r4,32
    e16c:	2a52d83a 	srl	r9,r5,r9
    e170:	11008c26 	beq	r2,r4,e3a4 <__subdf3+0x834>
    e174:	01001004 	movi	r4,64
    e178:	2085c83a 	sub	r2,r4,r2
    e17c:	2884983a 	sll	r2,r5,r2
    e180:	118cb03a 	or	r6,r2,r6
    e184:	300cc03a 	cmpne	r6,r6,zero
    e188:	4992b03a 	or	r9,r9,r6
    e18c:	0005883a 	mov	r2,zero
    e190:	003f1206 	br	dddc <__alt_data_end+0xff00dddc>
    e194:	0101ffc4 	movi	r4,2047
    e198:	493f9c1e 	bne	r9,r4,e00c <__alt_data_end+0xff00e00c>
    e19c:	2807883a 	mov	r3,r5
    e1a0:	3023883a 	mov	r17,r6
    e1a4:	4821883a 	mov	r16,r9
    e1a8:	3825883a 	mov	r18,r7
    e1ac:	003e9106 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e1b0:	80001f1e 	bne	r16,zero,e230 <__subdf3+0x6c0>
    e1b4:	1c48b03a 	or	r4,r3,r17
    e1b8:	20005a26 	beq	r4,zero,e324 <__subdf3+0x7b4>
    e1bc:	0084303a 	nor	r2,zero,r2
    e1c0:	1000561e 	bne	r2,zero,e31c <__subdf3+0x7ac>
    e1c4:	89a3883a 	add	r17,r17,r6
    e1c8:	1945883a 	add	r2,r3,r5
    e1cc:	898d803a 	cmpltu	r6,r17,r6
    e1d0:	3087883a 	add	r3,r6,r2
    e1d4:	4821883a 	mov	r16,r9
    e1d8:	003f0506 	br	ddf0 <__alt_data_end+0xff00ddf0>
    e1dc:	10002b1e 	bne	r2,zero,e28c <__subdf3+0x71c>
    e1e0:	2984b03a 	or	r2,r5,r6
    e1e4:	10008026 	beq	r2,zero,e3e8 <__subdf3+0x878>
    e1e8:	2807883a 	mov	r3,r5
    e1ec:	3023883a 	mov	r17,r6
    e1f0:	3825883a 	mov	r18,r7
    e1f4:	0401ffc4 	movi	r16,2047
    e1f8:	003e7e06 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e1fc:	3809883a 	mov	r4,r7
    e200:	0011883a 	mov	r8,zero
    e204:	0005883a 	mov	r2,zero
    e208:	003ee306 	br	dd98 <__alt_data_end+0xff00dd98>
    e20c:	1c62b03a 	or	r17,r3,r17
    e210:	8822c03a 	cmpne	r17,r17,zero
    e214:	0005883a 	mov	r2,zero
    e218:	003f8906 	br	e040 <__alt_data_end+0xff00e040>
    e21c:	3809883a 	mov	r4,r7
    e220:	4821883a 	mov	r16,r9
    e224:	0011883a 	mov	r8,zero
    e228:	0005883a 	mov	r2,zero
    e22c:	003eda06 	br	dd98 <__alt_data_end+0xff00dd98>
    e230:	0101ffc4 	movi	r4,2047
    e234:	49003b26 	beq	r9,r4,e324 <__subdf3+0x7b4>
    e238:	0085c83a 	sub	r2,zero,r2
    e23c:	18c02034 	orhi	r3,r3,128
    e240:	01000e04 	movi	r4,56
    e244:	20806e16 	blt	r4,r2,e400 <__subdf3+0x890>
    e248:	010007c4 	movi	r4,31
    e24c:	20807716 	blt	r4,r2,e42c <__subdf3+0x8bc>
    e250:	01000804 	movi	r4,32
    e254:	2089c83a 	sub	r4,r4,r2
    e258:	1914983a 	sll	r10,r3,r4
    e25c:	8890d83a 	srl	r8,r17,r2
    e260:	8908983a 	sll	r4,r17,r4
    e264:	1884d83a 	srl	r2,r3,r2
    e268:	5222b03a 	or	r17,r10,r8
    e26c:	2006c03a 	cmpne	r3,r4,zero
    e270:	88e2b03a 	or	r17,r17,r3
    e274:	89a3883a 	add	r17,r17,r6
    e278:	1145883a 	add	r2,r2,r5
    e27c:	898d803a 	cmpltu	r6,r17,r6
    e280:	3087883a 	add	r3,r6,r2
    e284:	4821883a 	mov	r16,r9
    e288:	003ed906 	br	ddf0 <__alt_data_end+0xff00ddf0>
    e28c:	2984b03a 	or	r2,r5,r6
    e290:	10004226 	beq	r2,zero,e39c <__subdf3+0x82c>
    e294:	1808d0fa 	srli	r4,r3,3
    e298:	8822d0fa 	srli	r17,r17,3
    e29c:	1806977a 	slli	r3,r3,29
    e2a0:	2080022c 	andhi	r2,r4,8
    e2a4:	1c62b03a 	or	r17,r3,r17
    e2a8:	10000826 	beq	r2,zero,e2cc <__subdf3+0x75c>
    e2ac:	2812d0fa 	srli	r9,r5,3
    e2b0:	4880022c 	andhi	r2,r9,8
    e2b4:	1000051e 	bne	r2,zero,e2cc <__subdf3+0x75c>
    e2b8:	300cd0fa 	srli	r6,r6,3
    e2bc:	2804977a 	slli	r2,r5,29
    e2c0:	4809883a 	mov	r4,r9
    e2c4:	3825883a 	mov	r18,r7
    e2c8:	11a2b03a 	or	r17,r2,r6
    e2cc:	8806d77a 	srli	r3,r17,29
    e2d0:	200890fa 	slli	r4,r4,3
    e2d4:	882290fa 	slli	r17,r17,3
    e2d8:	0401ffc4 	movi	r16,2047
    e2dc:	1906b03a 	or	r3,r3,r4
    e2e0:	003e4406 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e2e4:	2984b03a 	or	r2,r5,r6
    e2e8:	103e4226 	beq	r2,zero,dbf4 <__alt_data_end+0xff00dbf4>
    e2ec:	8989c83a 	sub	r4,r17,r6
    e2f0:	8911803a 	cmpltu	r8,r17,r4
    e2f4:	1945c83a 	sub	r2,r3,r5
    e2f8:	1205c83a 	sub	r2,r2,r8
    e2fc:	1200202c 	andhi	r8,r2,128
    e300:	403e9a26 	beq	r8,zero,dd6c <__alt_data_end+0xff00dd6c>
    e304:	3463c83a 	sub	r17,r6,r17
    e308:	28c5c83a 	sub	r2,r5,r3
    e30c:	344d803a 	cmpltu	r6,r6,r17
    e310:	1187c83a 	sub	r3,r2,r6
    e314:	3825883a 	mov	r18,r7
    e318:	003e3606 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e31c:	0101ffc4 	movi	r4,2047
    e320:	493fc71e 	bne	r9,r4,e240 <__alt_data_end+0xff00e240>
    e324:	2807883a 	mov	r3,r5
    e328:	3023883a 	mov	r17,r6
    e32c:	4821883a 	mov	r16,r9
    e330:	003e3006 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e334:	10003626 	beq	r2,zero,e410 <__subdf3+0x8a0>
    e338:	2984b03a 	or	r2,r5,r6
    e33c:	10001726 	beq	r2,zero,e39c <__subdf3+0x82c>
    e340:	1808d0fa 	srli	r4,r3,3
    e344:	8822d0fa 	srli	r17,r17,3
    e348:	1806977a 	slli	r3,r3,29
    e34c:	2080022c 	andhi	r2,r4,8
    e350:	1c62b03a 	or	r17,r3,r17
    e354:	10000726 	beq	r2,zero,e374 <__subdf3+0x804>
    e358:	2812d0fa 	srli	r9,r5,3
    e35c:	4880022c 	andhi	r2,r9,8
    e360:	1000041e 	bne	r2,zero,e374 <__subdf3+0x804>
    e364:	300cd0fa 	srli	r6,r6,3
    e368:	2804977a 	slli	r2,r5,29
    e36c:	4809883a 	mov	r4,r9
    e370:	11a2b03a 	or	r17,r2,r6
    e374:	8806d77a 	srli	r3,r17,29
    e378:	200890fa 	slli	r4,r4,3
    e37c:	882290fa 	slli	r17,r17,3
    e380:	3825883a 	mov	r18,r7
    e384:	1906b03a 	or	r3,r3,r4
    e388:	0401ffc4 	movi	r16,2047
    e38c:	003e1906 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e390:	000b883a 	mov	r5,zero
    e394:	0005883a 	mov	r2,zero
    e398:	003e2e06 	br	dc54 <__alt_data_end+0xff00dc54>
    e39c:	0401ffc4 	movi	r16,2047
    e3a0:	003e1406 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e3a4:	0005883a 	mov	r2,zero
    e3a8:	003f7506 	br	e180 <__alt_data_end+0xff00e180>
    e3ac:	0005883a 	mov	r2,zero
    e3b0:	0009883a 	mov	r4,zero
    e3b4:	003e7806 	br	dd98 <__alt_data_end+0xff00dd98>
    e3b8:	123ff804 	addi	r8,r2,-32
    e3bc:	01000804 	movi	r4,32
    e3c0:	1a10d83a 	srl	r8,r3,r8
    e3c4:	11002526 	beq	r2,r4,e45c <__subdf3+0x8ec>
    e3c8:	01001004 	movi	r4,64
    e3cc:	2085c83a 	sub	r2,r4,r2
    e3d0:	1884983a 	sll	r2,r3,r2
    e3d4:	1444b03a 	or	r2,r2,r17
    e3d8:	1004c03a 	cmpne	r2,r2,zero
    e3dc:	40a2b03a 	or	r17,r8,r2
    e3e0:	0005883a 	mov	r2,zero
    e3e4:	003f1606 	br	e040 <__alt_data_end+0xff00e040>
    e3e8:	02000434 	movhi	r8,16
    e3ec:	0009883a 	mov	r4,zero
    e3f0:	423fffc4 	addi	r8,r8,-1
    e3f4:	00bfffc4 	movi	r2,-1
    e3f8:	0401ffc4 	movi	r16,2047
    e3fc:	003e6606 	br	dd98 <__alt_data_end+0xff00dd98>
    e400:	1c62b03a 	or	r17,r3,r17
    e404:	8822c03a 	cmpne	r17,r17,zero
    e408:	0005883a 	mov	r2,zero
    e40c:	003f9906 	br	e274 <__alt_data_end+0xff00e274>
    e410:	2807883a 	mov	r3,r5
    e414:	3023883a 	mov	r17,r6
    e418:	0401ffc4 	movi	r16,2047
    e41c:	003df506 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e420:	2807883a 	mov	r3,r5
    e424:	3023883a 	mov	r17,r6
    e428:	003df206 	br	dbf4 <__alt_data_end+0xff00dbf4>
    e42c:	123ff804 	addi	r8,r2,-32
    e430:	01000804 	movi	r4,32
    e434:	1a10d83a 	srl	r8,r3,r8
    e438:	11000a26 	beq	r2,r4,e464 <__subdf3+0x8f4>
    e43c:	01001004 	movi	r4,64
    e440:	2085c83a 	sub	r2,r4,r2
    e444:	1884983a 	sll	r2,r3,r2
    e448:	1444b03a 	or	r2,r2,r17
    e44c:	1004c03a 	cmpne	r2,r2,zero
    e450:	40a2b03a 	or	r17,r8,r2
    e454:	0005883a 	mov	r2,zero
    e458:	003f8606 	br	e274 <__alt_data_end+0xff00e274>
    e45c:	0005883a 	mov	r2,zero
    e460:	003fdc06 	br	e3d4 <__alt_data_end+0xff00e3d4>
    e464:	0005883a 	mov	r2,zero
    e468:	003ff706 	br	e448 <__alt_data_end+0xff00e448>

0000e46c <__fixdfsi>:
    e46c:	280cd53a 	srli	r6,r5,20
    e470:	00c00434 	movhi	r3,16
    e474:	18ffffc4 	addi	r3,r3,-1
    e478:	3181ffcc 	andi	r6,r6,2047
    e47c:	01c0ff84 	movi	r7,1022
    e480:	28c6703a 	and	r3,r5,r3
    e484:	280ad7fa 	srli	r5,r5,31
    e488:	3980120e 	bge	r7,r6,e4d4 <__fixdfsi+0x68>
    e48c:	00810744 	movi	r2,1053
    e490:	11800c16 	blt	r2,r6,e4c4 <__fixdfsi+0x58>
    e494:	00810cc4 	movi	r2,1075
    e498:	1185c83a 	sub	r2,r2,r6
    e49c:	01c007c4 	movi	r7,31
    e4a0:	18c00434 	orhi	r3,r3,16
    e4a4:	38800d16 	blt	r7,r2,e4dc <__fixdfsi+0x70>
    e4a8:	31befb44 	addi	r6,r6,-1043
    e4ac:	2084d83a 	srl	r2,r4,r2
    e4b0:	1986983a 	sll	r3,r3,r6
    e4b4:	1884b03a 	or	r2,r3,r2
    e4b8:	28000726 	beq	r5,zero,e4d8 <__fixdfsi+0x6c>
    e4bc:	0085c83a 	sub	r2,zero,r2
    e4c0:	f800283a 	ret
    e4c4:	00a00034 	movhi	r2,32768
    e4c8:	10bfffc4 	addi	r2,r2,-1
    e4cc:	2885883a 	add	r2,r5,r2
    e4d0:	f800283a 	ret
    e4d4:	0005883a 	mov	r2,zero
    e4d8:	f800283a 	ret
    e4dc:	008104c4 	movi	r2,1043
    e4e0:	1185c83a 	sub	r2,r2,r6
    e4e4:	1884d83a 	srl	r2,r3,r2
    e4e8:	003ff306 	br	e4b8 <__alt_data_end+0xff00e4b8>

0000e4ec <__floatsidf>:
    e4ec:	defffd04 	addi	sp,sp,-12
    e4f0:	dfc00215 	stw	ra,8(sp)
    e4f4:	dc400115 	stw	r17,4(sp)
    e4f8:	dc000015 	stw	r16,0(sp)
    e4fc:	20002b26 	beq	r4,zero,e5ac <__floatsidf+0xc0>
    e500:	2023883a 	mov	r17,r4
    e504:	2020d7fa 	srli	r16,r4,31
    e508:	20002d16 	blt	r4,zero,e5c0 <__floatsidf+0xd4>
    e50c:	8809883a 	mov	r4,r17
    e510:	000e6700 	call	e670 <__clzsi2>
    e514:	01410784 	movi	r5,1054
    e518:	288bc83a 	sub	r5,r5,r2
    e51c:	01010cc4 	movi	r4,1075
    e520:	2149c83a 	sub	r4,r4,r5
    e524:	00c007c4 	movi	r3,31
    e528:	1900160e 	bge	r3,r4,e584 <__floatsidf+0x98>
    e52c:	00c104c4 	movi	r3,1043
    e530:	1947c83a 	sub	r3,r3,r5
    e534:	88c6983a 	sll	r3,r17,r3
    e538:	00800434 	movhi	r2,16
    e53c:	10bfffc4 	addi	r2,r2,-1
    e540:	1886703a 	and	r3,r3,r2
    e544:	2941ffcc 	andi	r5,r5,2047
    e548:	800d883a 	mov	r6,r16
    e54c:	0005883a 	mov	r2,zero
    e550:	280a953a 	slli	r5,r5,20
    e554:	31803fcc 	andi	r6,r6,255
    e558:	01000434 	movhi	r4,16
    e55c:	300c97fa 	slli	r6,r6,31
    e560:	213fffc4 	addi	r4,r4,-1
    e564:	1906703a 	and	r3,r3,r4
    e568:	1946b03a 	or	r3,r3,r5
    e56c:	1986b03a 	or	r3,r3,r6
    e570:	dfc00217 	ldw	ra,8(sp)
    e574:	dc400117 	ldw	r17,4(sp)
    e578:	dc000017 	ldw	r16,0(sp)
    e57c:	dec00304 	addi	sp,sp,12
    e580:	f800283a 	ret
    e584:	00c002c4 	movi	r3,11
    e588:	1887c83a 	sub	r3,r3,r2
    e58c:	88c6d83a 	srl	r3,r17,r3
    e590:	8904983a 	sll	r2,r17,r4
    e594:	01000434 	movhi	r4,16
    e598:	213fffc4 	addi	r4,r4,-1
    e59c:	2941ffcc 	andi	r5,r5,2047
    e5a0:	1906703a 	and	r3,r3,r4
    e5a4:	800d883a 	mov	r6,r16
    e5a8:	003fe906 	br	e550 <__alt_data_end+0xff00e550>
    e5ac:	000d883a 	mov	r6,zero
    e5b0:	000b883a 	mov	r5,zero
    e5b4:	0007883a 	mov	r3,zero
    e5b8:	0005883a 	mov	r2,zero
    e5bc:	003fe406 	br	e550 <__alt_data_end+0xff00e550>
    e5c0:	0123c83a 	sub	r17,zero,r4
    e5c4:	003fd106 	br	e50c <__alt_data_end+0xff00e50c>

0000e5c8 <__floatunsidf>:
    e5c8:	defffe04 	addi	sp,sp,-8
    e5cc:	dc000015 	stw	r16,0(sp)
    e5d0:	dfc00115 	stw	ra,4(sp)
    e5d4:	2021883a 	mov	r16,r4
    e5d8:	20002226 	beq	r4,zero,e664 <__floatunsidf+0x9c>
    e5dc:	000e6700 	call	e670 <__clzsi2>
    e5e0:	01010784 	movi	r4,1054
    e5e4:	2089c83a 	sub	r4,r4,r2
    e5e8:	01810cc4 	movi	r6,1075
    e5ec:	310dc83a 	sub	r6,r6,r4
    e5f0:	00c007c4 	movi	r3,31
    e5f4:	1980120e 	bge	r3,r6,e640 <__floatunsidf+0x78>
    e5f8:	00c104c4 	movi	r3,1043
    e5fc:	1907c83a 	sub	r3,r3,r4
    e600:	80ca983a 	sll	r5,r16,r3
    e604:	00800434 	movhi	r2,16
    e608:	10bfffc4 	addi	r2,r2,-1
    e60c:	2101ffcc 	andi	r4,r4,2047
    e610:	0021883a 	mov	r16,zero
    e614:	288a703a 	and	r5,r5,r2
    e618:	2008953a 	slli	r4,r4,20
    e61c:	00c00434 	movhi	r3,16
    e620:	18ffffc4 	addi	r3,r3,-1
    e624:	28c6703a 	and	r3,r5,r3
    e628:	8005883a 	mov	r2,r16
    e62c:	1906b03a 	or	r3,r3,r4
    e630:	dfc00117 	ldw	ra,4(sp)
    e634:	dc000017 	ldw	r16,0(sp)
    e638:	dec00204 	addi	sp,sp,8
    e63c:	f800283a 	ret
    e640:	00c002c4 	movi	r3,11
    e644:	188bc83a 	sub	r5,r3,r2
    e648:	814ad83a 	srl	r5,r16,r5
    e64c:	00c00434 	movhi	r3,16
    e650:	18ffffc4 	addi	r3,r3,-1
    e654:	81a0983a 	sll	r16,r16,r6
    e658:	2101ffcc 	andi	r4,r4,2047
    e65c:	28ca703a 	and	r5,r5,r3
    e660:	003fed06 	br	e618 <__alt_data_end+0xff00e618>
    e664:	0009883a 	mov	r4,zero
    e668:	000b883a 	mov	r5,zero
    e66c:	003fea06 	br	e618 <__alt_data_end+0xff00e618>

0000e670 <__clzsi2>:
    e670:	00bfffd4 	movui	r2,65535
    e674:	11000536 	bltu	r2,r4,e68c <__clzsi2+0x1c>
    e678:	00803fc4 	movi	r2,255
    e67c:	11000f36 	bltu	r2,r4,e6bc <__clzsi2+0x4c>
    e680:	00800804 	movi	r2,32
    e684:	0007883a 	mov	r3,zero
    e688:	00000506 	br	e6a0 <__clzsi2+0x30>
    e68c:	00804034 	movhi	r2,256
    e690:	10bfffc4 	addi	r2,r2,-1
    e694:	11000c2e 	bgeu	r2,r4,e6c8 <__clzsi2+0x58>
    e698:	00800204 	movi	r2,8
    e69c:	00c00604 	movi	r3,24
    e6a0:	20c8d83a 	srl	r4,r4,r3
    e6a4:	00c00074 	movhi	r3,1
    e6a8:	18c19f04 	addi	r3,r3,1660
    e6ac:	1909883a 	add	r4,r3,r4
    e6b0:	20c00003 	ldbu	r3,0(r4)
    e6b4:	10c5c83a 	sub	r2,r2,r3
    e6b8:	f800283a 	ret
    e6bc:	00800604 	movi	r2,24
    e6c0:	00c00204 	movi	r3,8
    e6c4:	003ff606 	br	e6a0 <__alt_data_end+0xff00e6a0>
    e6c8:	00800404 	movi	r2,16
    e6cc:	1007883a 	mov	r3,r2
    e6d0:	003ff306 	br	e6a0 <__alt_data_end+0xff00e6a0>

0000e6d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e6d4:	defffd04 	addi	sp,sp,-12
    e6d8:	dfc00215 	stw	ra,8(sp)
    e6dc:	dc400115 	stw	r17,4(sp)
    e6e0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e6e4:	20001f16 	blt	r4,zero,e764 <close+0x90>
    e6e8:	20c00324 	muli	r3,r4,12
    e6ec:	00800074 	movhi	r2,1
    e6f0:	10840f04 	addi	r2,r2,4156
    e6f4:	1885883a 	add	r2,r3,r2
    e6f8:	2021883a 	mov	r16,r4

  if (fd)
    e6fc:	10001926 	beq	r2,zero,e764 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e700:	10c00017 	ldw	r3,0(r2)
    e704:	18c00417 	ldw	r3,16(r3)
    e708:	18000c26 	beq	r3,zero,e73c <close+0x68>
    e70c:	1009883a 	mov	r4,r2
    e710:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e714:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e718:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e71c:	000eb0c0 	call	eb0c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e720:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e724:	88000816 	blt	r17,zero,e748 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e728:	dfc00217 	ldw	ra,8(sp)
    e72c:	dc400117 	ldw	r17,4(sp)
    e730:	dc000017 	ldw	r16,0(sp)
    e734:	dec00304 	addi	sp,sp,12
    e738:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e73c:	000eb0c0 	call	eb0c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e740:	0005883a 	mov	r2,zero
    e744:	003ff806 	br	e728 <__alt_data_end+0xff00e728>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e748:	d0a00d17 	ldw	r2,-32716(gp)
    e74c:	10000c26 	beq	r2,zero,e780 <close+0xac>
    e750:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e754:	0463c83a 	sub	r17,zero,r17
    e758:	14400015 	stw	r17,0(r2)
      return -1;
    e75c:	00bfffc4 	movi	r2,-1
    e760:	003ff106 	br	e728 <__alt_data_end+0xff00e728>
    e764:	d0a00d17 	ldw	r2,-32716(gp)
    e768:	10000726 	beq	r2,zero,e788 <close+0xb4>
    e76c:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e770:	00c01444 	movi	r3,81
    e774:	10c00015 	stw	r3,0(r2)
    return -1;
    e778:	00bfffc4 	movi	r2,-1
    e77c:	003fea06 	br	e728 <__alt_data_end+0xff00e728>
    e780:	d0a6dc04 	addi	r2,gp,-25744
    e784:	003ff306 	br	e754 <__alt_data_end+0xff00e754>
    e788:	d0a6dc04 	addi	r2,gp,-25744
    e78c:	003ff806 	br	e770 <__alt_data_end+0xff00e770>

0000e790 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e790:	3005883a 	mov	r2,r6
    e794:	f800283a 	ret

0000e798 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e798:	20000d16 	blt	r4,zero,e7d0 <fstat+0x38>
    e79c:	21000324 	muli	r4,r4,12
    e7a0:	00800074 	movhi	r2,1
    e7a4:	10840f04 	addi	r2,r2,4156
    e7a8:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e7ac:	20000826 	beq	r4,zero,e7d0 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e7b0:	20800017 	ldw	r2,0(r4)
    e7b4:	10800817 	ldw	r2,32(r2)
    e7b8:	10000126 	beq	r2,zero,e7c0 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e7bc:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e7c0:	00880004 	movi	r2,8192
    e7c4:	28800115 	stw	r2,4(r5)
      return 0;
    e7c8:	0005883a 	mov	r2,zero
    e7cc:	f800283a 	ret
    e7d0:	d0a00d17 	ldw	r2,-32716(gp)
    e7d4:	10000926 	beq	r2,zero,e7fc <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e7d8:	deffff04 	addi	sp,sp,-4
    e7dc:	dfc00015 	stw	ra,0(sp)
    e7e0:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7e4:	00c01444 	movi	r3,81
    e7e8:	10c00015 	stw	r3,0(r2)
    return -1;
    e7ec:	00bfffc4 	movi	r2,-1
  }
}
    e7f0:	dfc00017 	ldw	ra,0(sp)
    e7f4:	dec00104 	addi	sp,sp,4
    e7f8:	f800283a 	ret
    e7fc:	d0a6dc04 	addi	r2,gp,-25744
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e800:	00c01444 	movi	r3,81
    e804:	10c00015 	stw	r3,0(r2)
    return -1;
    e808:	00bfffc4 	movi	r2,-1
  }
}
    e80c:	f800283a 	ret

0000e810 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e810:	defff004 	addi	sp,sp,-64
    e814:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e818:	20001316 	blt	r4,zero,e868 <isatty+0x58>
    e81c:	20800324 	muli	r2,r4,12
    e820:	00c00074 	movhi	r3,1
    e824:	18c40f04 	addi	r3,r3,4156
    e828:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e82c:	10000e26 	beq	r2,zero,e868 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e830:	10800017 	ldw	r2,0(r2)
    e834:	10800817 	ldw	r2,32(r2)
    e838:	10000726 	beq	r2,zero,e858 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e83c:	d80b883a 	mov	r5,sp
    e840:	000e7980 	call	e798 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e844:	d8800117 	ldw	r2,4(sp)
    e848:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e84c:	dfc00f17 	ldw	ra,60(sp)
    e850:	dec01004 	addi	sp,sp,64
    e854:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e858:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e85c:	dfc00f17 	ldw	ra,60(sp)
    e860:	dec01004 	addi	sp,sp,64
    e864:	f800283a 	ret
    e868:	d0a00d17 	ldw	r2,-32716(gp)
    e86c:	10000726 	beq	r2,zero,e88c <isatty+0x7c>
    e870:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e874:	00c01444 	movi	r3,81
    e878:	10c00015 	stw	r3,0(r2)
    return 0;
    e87c:	0005883a 	mov	r2,zero
  }
}
    e880:	dfc00f17 	ldw	ra,60(sp)
    e884:	dec01004 	addi	sp,sp,64
    e888:	f800283a 	ret
    e88c:	d0a6dc04 	addi	r2,gp,-25744
    e890:	003ff806 	br	e874 <__alt_data_end+0xff00e874>

0000e894 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e894:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e898:	01000074 	movhi	r4,1
    e89c:	01400074 	movhi	r5,1
    e8a0:	dfc00015 	stw	ra,0(sp)
    e8a4:	2101e604 	addi	r4,r4,1944
    e8a8:	2948a304 	addi	r5,r5,8844
    e8ac:	21400a26 	beq	r4,r5,e8d8 <alt_load+0x44>
  {
    while( to != end )
    e8b0:	00800074 	movhi	r2,1
    e8b4:	1088a304 	addi	r2,r2,8844
    e8b8:	20800726 	beq	r4,r2,e8d8 <alt_load+0x44>
    {
      *to++ = *from++;
    e8bc:	21800104 	addi	r6,r4,4
    e8c0:	118dc83a 	sub	r6,r2,r6
    e8c4:	300cd0ba 	srli	r6,r6,2
    e8c8:	31800044 	addi	r6,r6,1
    e8cc:	318d883a 	add	r6,r6,r6
    e8d0:	318d883a 	add	r6,r6,r6
    e8d4:	00078d40 	call	78d4 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e8d8:	01000034 	movhi	r4,0
    e8dc:	01400034 	movhi	r5,0
    e8e0:	21000804 	addi	r4,r4,32
    e8e4:	29400804 	addi	r5,r5,32
    e8e8:	21400a26 	beq	r4,r5,e914 <alt_load+0x80>
  {
    while( to != end )
    e8ec:	00800034 	movhi	r2,0
    e8f0:	10806304 	addi	r2,r2,396
    e8f4:	20800726 	beq	r4,r2,e914 <alt_load+0x80>
    {
      *to++ = *from++;
    e8f8:	21800104 	addi	r6,r4,4
    e8fc:	118dc83a 	sub	r6,r2,r6
    e900:	300cd0ba 	srli	r6,r6,2
    e904:	31800044 	addi	r6,r6,1
    e908:	318d883a 	add	r6,r6,r6
    e90c:	318d883a 	add	r6,r6,r6
    e910:	00078d40 	call	78d4 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e914:	01000074 	movhi	r4,1
    e918:	01400074 	movhi	r5,1
    e91c:	21000404 	addi	r4,r4,16
    e920:	29400404 	addi	r5,r5,16
    e924:	21400a26 	beq	r4,r5,e950 <alt_load+0xbc>
  {
    while( to != end )
    e928:	00800074 	movhi	r2,1
    e92c:	1081e604 	addi	r2,r2,1944
    e930:	20800726 	beq	r4,r2,e950 <alt_load+0xbc>
    {
      *to++ = *from++;
    e934:	21800104 	addi	r6,r4,4
    e938:	118dc83a 	sub	r6,r2,r6
    e93c:	300cd0ba 	srli	r6,r6,2
    e940:	31800044 	addi	r6,r6,1
    e944:	318d883a 	add	r6,r6,r6
    e948:	318d883a 	add	r6,r6,r6
    e94c:	00078d40 	call	78d4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e950:	000f4800 	call	f480 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e954:	dfc00017 	ldw	ra,0(sp)
    e958:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e95c:	000f5b81 	jmpi	f5b8 <alt_icache_flush_all>

0000e960 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e960:	defffe04 	addi	sp,sp,-8
    e964:	dfc00115 	stw	ra,4(sp)
    e968:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e96c:	20000e16 	blt	r4,zero,e9a8 <lseek+0x48>
    e970:	21000324 	muli	r4,r4,12
    e974:	00800074 	movhi	r2,1
    e978:	10840f04 	addi	r2,r2,4156
    e97c:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    e980:	20000926 	beq	r4,zero,e9a8 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e984:	20800017 	ldw	r2,0(r4)
    e988:	10800717 	ldw	r2,28(r2)
    e98c:	10000d26 	beq	r2,zero,e9c4 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e990:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    e994:	10000f16 	blt	r2,zero,e9d4 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    e998:	dfc00117 	ldw	ra,4(sp)
    e99c:	dc000017 	ldw	r16,0(sp)
    e9a0:	dec00204 	addi	sp,sp,8
    e9a4:	f800283a 	ret
    e9a8:	04001444 	movi	r16,81
    e9ac:	d0a00d17 	ldw	r2,-32716(gp)
    e9b0:	10000626 	beq	r2,zero,e9cc <lseek+0x6c>
    e9b4:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    e9b8:	14000015 	stw	r16,0(r2)
    rc = -1;
    e9bc:	00bfffc4 	movi	r2,-1
  }

  return rc;
    e9c0:	003ff506 	br	e998 <__alt_data_end+0xff00e998>
    e9c4:	04002184 	movi	r16,134
    e9c8:	003ff806 	br	e9ac <__alt_data_end+0xff00e9ac>
    e9cc:	d0a6dc04 	addi	r2,gp,-25744
    e9d0:	003ff906 	br	e9b8 <__alt_data_end+0xff00e9b8>
    e9d4:	00a1c83a 	sub	r16,zero,r2
    e9d8:	003ff406 	br	e9ac <__alt_data_end+0xff00e9ac>

0000e9dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e9dc:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e9e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e9e4:	dfc00115 	stw	ra,4(sp)
    e9e8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e9ec:	000ec440 	call	ec44 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e9f0:	000ec640 	call	ec64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e9f4:	01800074 	movhi	r6,1
    e9f8:	3181e204 	addi	r6,r6,1928
    e9fc:	300b883a 	mov	r5,r6
    ea00:	3009883a 	mov	r4,r6
    ea04:	000f6b80 	call	f6b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea08:	000f4f00 	call	f4f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea0c:	01000074 	movhi	r4,1
    ea10:	213d5504 	addi	r4,r4,-2732
    ea14:	000fc9c0 	call	fc9c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea18:	d1a6e017 	ldw	r6,-25728(gp)
    ea1c:	d166e117 	ldw	r5,-25724(gp)
    ea20:	d126e217 	ldw	r4,-25720(gp)
    ea24:	0000e4c0 	call	e4c <main>
  close(STDOUT_FILENO);
    ea28:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea2c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    ea30:	000e6d40 	call	e6d4 <close>
  exit (result);
    ea34:	8009883a 	mov	r4,r16
    ea38:	000fcb00 	call	fcb0 <exit>

0000ea3c <__malloc_lock>:
    ea3c:	f800283a 	ret

0000ea40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ea40:	f800283a 	ret

0000ea44 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ea44:	defffe04 	addi	sp,sp,-8
    ea48:	dfc00115 	stw	ra,4(sp)
    ea4c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea50:	20002116 	blt	r4,zero,ead8 <read+0x94>
    ea54:	21000324 	muli	r4,r4,12
    ea58:	00800074 	movhi	r2,1
    ea5c:	10840f04 	addi	r2,r2,4156
    ea60:	2089883a 	add	r4,r4,r2
  
  if (fd)
    ea64:	20001c26 	beq	r4,zero,ead8 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea68:	20800217 	ldw	r2,8(r4)
    ea6c:	00c00044 	movi	r3,1
    ea70:	108000cc 	andi	r2,r2,3
    ea74:	10c00a26 	beq	r2,r3,eaa0 <read+0x5c>
        (fd->dev->read))
    ea78:	20800017 	ldw	r2,0(r4)
    ea7c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea80:	10000726 	beq	r2,zero,eaa0 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ea84:	103ee83a 	callr	r2
    ea88:	1021883a 	mov	r16,r2
    ea8c:	10000b16 	blt	r2,zero,eabc <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ea90:	dfc00117 	ldw	ra,4(sp)
    ea94:	dc000017 	ldw	r16,0(sp)
    ea98:	dec00204 	addi	sp,sp,8
    ea9c:	f800283a 	ret
    eaa0:	d0a00d17 	ldw	r2,-32716(gp)
    eaa4:	10001326 	beq	r2,zero,eaf4 <read+0xb0>
    eaa8:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    eaac:	00c00344 	movi	r3,13
    eab0:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    eab4:	00bfffc4 	movi	r2,-1
    eab8:	003ff506 	br	ea90 <__alt_data_end+0xff00ea90>
    eabc:	d0a00d17 	ldw	r2,-32716(gp)
    eac0:	10000e26 	beq	r2,zero,eafc <read+0xb8>
    eac4:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    eac8:	0421c83a 	sub	r16,zero,r16
    eacc:	14000015 	stw	r16,0(r2)
          return -1;
    ead0:	00bfffc4 	movi	r2,-1
    ead4:	003fee06 	br	ea90 <__alt_data_end+0xff00ea90>
    ead8:	d0a00d17 	ldw	r2,-32716(gp)
    eadc:	10000926 	beq	r2,zero,eb04 <read+0xc0>
    eae0:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    eae4:	00c01444 	movi	r3,81
    eae8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eaec:	00bfffc4 	movi	r2,-1
    eaf0:	003fe706 	br	ea90 <__alt_data_end+0xff00ea90>
    eaf4:	d0a6dc04 	addi	r2,gp,-25744
    eaf8:	003fec06 	br	eaac <__alt_data_end+0xff00eaac>
    eafc:	d0a6dc04 	addi	r2,gp,-25744
    eb00:	003ff106 	br	eac8 <__alt_data_end+0xff00eac8>
    eb04:	d0a6dc04 	addi	r2,gp,-25744
    eb08:	003ff606 	br	eae4 <__alt_data_end+0xff00eae4>

0000eb0c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    eb0c:	00800084 	movi	r2,2
    eb10:	1100060e 	bge	r2,r4,eb2c <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    eb14:	21000324 	muli	r4,r4,12
    eb18:	00800074 	movhi	r2,1
    eb1c:	10840f04 	addi	r2,r2,4156
    eb20:	1109883a 	add	r4,r2,r4
    eb24:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    eb28:	20000015 	stw	zero,0(r4)
    eb2c:	f800283a 	ret

0000eb30 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb30:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb34:	00bfff84 	movi	r2,-2
    eb38:	2884703a 	and	r2,r5,r2
    eb3c:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eb40:	d0a00e17 	ldw	r2,-32712(gp)
    eb44:	00ffff04 	movi	r3,-4
    eb48:	108000c4 	addi	r2,r2,3
    eb4c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eb50:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eb54:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eb58:	1109883a 	add	r4,r2,r4
    eb5c:	18c00004 	addi	r3,r3,0
    eb60:	19000336 	bltu	r3,r4,eb70 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    eb64:	d1200e15 	stw	r4,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb68:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    eb6c:	f800283a 	ret
    eb70:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    eb74:	00bfffc4 	movi	r2,-1
    eb78:	f800283a 	ret

0000eb7c <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    eb7c:	000f4081 	jmpi	f408 <alt_busy_sleep>

0000eb80 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    eb80:	defffe04 	addi	sp,sp,-8
    eb84:	dfc00115 	stw	ra,4(sp)
    eb88:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eb8c:	20002216 	blt	r4,zero,ec18 <write+0x98>
    eb90:	21000324 	muli	r4,r4,12
    eb94:	00800074 	movhi	r2,1
    eb98:	10840f04 	addi	r2,r2,4156
    eb9c:	2089883a 	add	r4,r4,r2
  
  if (fd)
    eba0:	20001d26 	beq	r4,zero,ec18 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    eba4:	20800217 	ldw	r2,8(r4)
    eba8:	108000cc 	andi	r2,r2,3
    ebac:	10000a26 	beq	r2,zero,ebd8 <write+0x58>
    ebb0:	20800017 	ldw	r2,0(r4)
    ebb4:	10800617 	ldw	r2,24(r2)
    ebb8:	10000726 	beq	r2,zero,ebd8 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ebbc:	103ee83a 	callr	r2
    ebc0:	1021883a 	mov	r16,r2
    ebc4:	10000d16 	blt	r2,zero,ebfc <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ebc8:	dfc00117 	ldw	ra,4(sp)
    ebcc:	dc000017 	ldw	r16,0(sp)
    ebd0:	dec00204 	addi	sp,sp,8
    ebd4:	f800283a 	ret
    ebd8:	d0a00d17 	ldw	r2,-32716(gp)
    ebdc:	10000526 	beq	r2,zero,ebf4 <write+0x74>
    ebe0:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    ebe4:	00c00344 	movi	r3,13
    ebe8:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    ebec:	00bfffc4 	movi	r2,-1
    ebf0:	003ff506 	br	ebc8 <__alt_data_end+0xff00ebc8>
    ebf4:	d0a6dc04 	addi	r2,gp,-25744
    ebf8:	003ffa06 	br	ebe4 <__alt_data_end+0xff00ebe4>
    ebfc:	d0a00d17 	ldw	r2,-32716(gp)
    ec00:	10000c26 	beq	r2,zero,ec34 <write+0xb4>
    ec04:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    ec08:	0421c83a 	sub	r16,zero,r16
    ec0c:	14000015 	stw	r16,0(r2)
        return -1;
    ec10:	00bfffc4 	movi	r2,-1
    ec14:	003fec06 	br	ebc8 <__alt_data_end+0xff00ebc8>
    ec18:	d0a00d17 	ldw	r2,-32716(gp)
    ec1c:	10000726 	beq	r2,zero,ec3c <write+0xbc>
    ec20:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ec24:	00c01444 	movi	r3,81
    ec28:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    ec2c:	00bfffc4 	movi	r2,-1
    ec30:	003fe506 	br	ebc8 <__alt_data_end+0xff00ebc8>
    ec34:	d0a6dc04 	addi	r2,gp,-25744
    ec38:	003ff306 	br	ec08 <__alt_data_end+0xff00ec08>
    ec3c:	d0a6dc04 	addi	r2,gp,-25744
    ec40:	003ff806 	br	ec24 <__alt_data_end+0xff00ec24>

0000ec44 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ec44:	deffff04 	addi	sp,sp,-4
    ec48:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ec4c:	000fa5c0 	call	fa5c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ec50:	00800044 	movi	r2,1
    ec54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ec58:	dfc00017 	ldw	ra,0(sp)
    ec5c:	dec00104 	addi	sp,sp,4
    ec60:	f800283a 	ret

0000ec64 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ec64:	00804034 	movhi	r2,256
    ec68:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ec6c:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ec70:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ec74:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ec78:	0080bef4 	movhi	r2,763
    ec7c:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ec80:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ec84:	01c0fa04 	movi	r7,1000
    ec88:	21040804 	addi	r4,r4,4128
    ec8c:	01800104 	movi	r6,4
    ec90:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ec94:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ec98:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ec9c:	84048304 	addi	r16,r16,4620
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eca0:	d0a6e315 	stw	r2,-25716(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eca4:	000f2c80 	call	f2c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eca8:	8009883a 	mov	r4,r16
    ecac:	000b883a 	mov	r5,zero
    ecb0:	000d883a 	mov	r6,zero
    ecb4:	000ee600 	call	ee60 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ecb8:	d1600904 	addi	r5,gp,-32732
    ecbc:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    ecc0:	dfc00117 	ldw	ra,4(sp)
    ecc4:	dc000017 	ldw	r16,0(sp)
    ecc8:	dec00204 	addi	sp,sp,8
    eccc:	000f4841 	jmpi	f484 <alt_dev_llist_insert>

0000ecd0 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ecd0:	20800017 	ldw	r2,0(r4)
    ecd4:	21c00217 	ldw	r7,8(r4)
    ecd8:	11000a04 	addi	r4,r2,40
    ecdc:	000ef981 	jmpi	ef98 <altera_avalon_jtag_uart_read>

0000ece0 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ece0:	20800017 	ldw	r2,0(r4)
    ece4:	21c00217 	ldw	r7,8(r4)
    ece8:	11000a04 	addi	r4,r2,40
    ecec:	000f0ec1 	jmpi	f0ec <altera_avalon_jtag_uart_write>

0000ecf0 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ecf0:	20800017 	ldw	r2,0(r4)
    ecf4:	21400217 	ldw	r5,8(r4)
    ecf8:	11000a04 	addi	r4,r2,40
    ecfc:	000eed81 	jmpi	eed8 <altera_avalon_jtag_uart_close>

0000ed00 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ed00:	21000017 	ldw	r4,0(r4)
    ed04:	21000a04 	addi	r4,r4,40
    ed08:	000ef241 	jmpi	ef24 <altera_avalon_jtag_uart_ioctl>

0000ed0c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ed0c:	20800017 	ldw	r2,0(r4)
    ed10:	10800104 	addi	r2,r2,4
    ed14:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ed18:	18c1000c 	andi	r3,r3,1024
    ed1c:	1800081e 	bne	r3,zero,ed40 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ed20:	20800917 	ldw	r2,36(r4)
    ed24:	00e00034 	movhi	r3,32768
    ed28:	18ffff04 	addi	r3,r3,-4
    ed2c:	18800236 	bltu	r3,r2,ed38 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    ed30:	10800044 	addi	r2,r2,1
    ed34:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ed38:	d0a6e717 	ldw	r2,-25700(gp)
    ed3c:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ed40:	20c00817 	ldw	r3,32(r4)
    ed44:	18c10014 	ori	r3,r3,1024
    ed48:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ed4c:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ed50:	d0a6e717 	ldw	r2,-25700(gp)
    ed54:	f800283a 	ret

0000ed58 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    ed58:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ed5c:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ed60:	02bfff44 	movi	r10,-3
    ed64:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ed68:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ed6c:	3880c00c 	andi	r2,r7,768
    ed70:	10003426 	beq	r2,zero,ee44 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ed74:	3880400c 	andi	r2,r7,256
    ed78:	10001726 	beq	r2,zero,edd8 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed7c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ed80:	20c00b17 	ldw	r3,44(r4)
    ed84:	10800044 	addi	r2,r2,1
    ed88:	1081ffcc 	andi	r2,r2,2047
    ed8c:	18800d1e 	bne	r3,r2,edc4 <altera_avalon_jtag_uart_irq+0x6c>
    ed90:	00002d06 	br	ee48 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ed94:	20800a17 	ldw	r2,40(r4)
    ed98:	2085883a 	add	r2,r4,r2
    ed9c:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eda0:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    eda4:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eda8:	10800044 	addi	r2,r2,1
    edac:	1081ffcc 	andi	r2,r2,2047
    edb0:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    edb4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    edb8:	10800044 	addi	r2,r2,1
    edbc:	1081ffcc 	andi	r2,r2,2047
    edc0:	11400326 	beq	r2,r5,edd0 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    edc4:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    edc8:	18a0000c 	andi	r2,r3,32768
    edcc:	103ff11e 	bne	r2,zero,ed94 <__alt_data_end+0xff00ed94>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    edd0:	18ffffec 	andhi	r3,r3,65535
    edd4:	18001c1e 	bne	r3,zero,ee48 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    edd8:	3880800c 	andi	r2,r7,512
    eddc:	103fe226 	beq	r2,zero,ed68 <__alt_data_end+0xff00ed68>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ede0:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    ede4:	38000b1e 	bne	r7,zero,ee14 <altera_avalon_jtag_uart_irq+0xbc>
    ede8:	003fdf06 	br	ed68 <__alt_data_end+0xff00ed68>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    edec:	20800d17 	ldw	r2,52(r4)
    edf0:	2085883a 	add	r2,r4,r2
    edf4:	10820e07 	ldb	r2,2104(r2)
    edf8:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    edfc:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ee00:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee04:	10800044 	addi	r2,r2,1
    ee08:	1081ffcc 	andi	r2,r2,2047
    ee0c:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ee10:	383fd526 	beq	r7,zero,ed68 <__alt_data_end+0xff00ed68>
    ee14:	20c00d17 	ldw	r3,52(r4)
    ee18:	20800c17 	ldw	r2,48(r4)
    ee1c:	18bff31e 	bne	r3,r2,edec <__alt_data_end+0xff00edec>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ee20:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee24:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ee28:	1284703a 	and	r2,r2,r10
    ee2c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee30:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ee34:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ee38:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ee3c:	3880c00c 	andi	r2,r7,768
    ee40:	103fcc1e 	bne	r2,zero,ed74 <__alt_data_end+0xff00ed74>
    ee44:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee48:	20800817 	ldw	r2,32(r4)
    ee4c:	1244703a 	and	r2,r2,r9
    ee50:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ee54:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ee58:	40800037 	ldwio	r2,0(r8)
    ee5c:	003fde06 	br	edd8 <__alt_data_end+0xff00edd8>

0000ee60 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ee60:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ee64:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ee68:	dc000115 	stw	r16,4(sp)
    ee6c:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee70:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ee74:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee78:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ee7c:	2809883a 	mov	r4,r5
    ee80:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ee84:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ee88:	01800074 	movhi	r6,1
    ee8c:	31bb5604 	addi	r6,r6,-4776
    ee90:	800f883a 	mov	r7,r16
    ee94:	d8000015 	stw	zero,0(sp)
    ee98:	000f5c40 	call	f5c4 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ee9c:	d166e717 	ldw	r5,-25700(gp)
    eea0:	01800074 	movhi	r6,1
    eea4:	31bb4304 	addi	r6,r6,-4852
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    eea8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    eeac:	800f883a 	mov	r7,r16
    eeb0:	81000204 	addi	r4,r16,8
    eeb4:	000f3880 	call	f388 <alt_alarm_start>
    eeb8:	1000030e 	bge	r2,zero,eec8 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    eebc:	00a00034 	movhi	r2,32768
    eec0:	10bfffc4 	addi	r2,r2,-1
    eec4:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    eec8:	dfc00217 	ldw	ra,8(sp)
    eecc:	dc000117 	ldw	r16,4(sp)
    eed0:	dec00304 	addi	sp,sp,12
    eed4:	f800283a 	ret

0000eed8 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    eed8:	2890000c 	andi	r2,r5,16384
    eedc:	21c00c17 	ldw	r7,48(r4)
    eee0:	10000426 	beq	r2,zero,eef4 <altera_avalon_jtag_uart_close+0x1c>
    eee4:	00000606 	br	ef00 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eee8:	21800917 	ldw	r6,36(r4)
    eeec:	20c00117 	ldw	r3,4(r4)
    eef0:	30c00a2e 	bgeu	r6,r3,ef1c <altera_avalon_jtag_uart_close+0x44>
    eef4:	20c00d17 	ldw	r3,52(r4)
    eef8:	38fffb1e 	bne	r7,r3,eee8 <__alt_data_end+0xff00eee8>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    eefc:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ef00:	20800d17 	ldw	r2,52(r4)
    ef04:	11c00526 	beq	r2,r7,ef1c <altera_avalon_jtag_uart_close+0x44>
    ef08:	20c00917 	ldw	r3,36(r4)
    ef0c:	20800117 	ldw	r2,4(r4)
    ef10:	1880022e 	bgeu	r3,r2,ef1c <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    ef14:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    ef18:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ef1c:	0005883a 	mov	r2,zero
    ef20:	f800283a 	ret

0000ef24 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    ef24:	009a8044 	movi	r2,27137
    ef28:	28800d26 	beq	r5,r2,ef60 <altera_avalon_jtag_uart_ioctl+0x3c>
    ef2c:	009a8084 	movi	r2,27138
    ef30:	2880091e 	bne	r5,r2,ef58 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ef34:	21400117 	ldw	r5,4(r4)
    ef38:	00a00034 	movhi	r2,32768
    ef3c:	10bfffc4 	addi	r2,r2,-1
    ef40:	28800526 	beq	r5,r2,ef58 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ef44:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    ef48:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ef4c:	1947803a 	cmpltu	r3,r3,r5
    ef50:	30c00015 	stw	r3,0(r6)
    ef54:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    ef58:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    ef5c:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ef60:	20c00117 	ldw	r3,4(r4)
    ef64:	00a00034 	movhi	r2,32768
    ef68:	10bfffc4 	addi	r2,r2,-1
    ef6c:	18bffa26 	beq	r3,r2,ef58 <__alt_data_end+0xff00ef58>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ef70:	30800017 	ldw	r2,0(r6)
    ef74:	01600034 	movhi	r5,32768
    ef78:	297fff04 	addi	r5,r5,-4
    ef7c:	10ffff84 	addi	r3,r2,-2
    ef80:	28c0022e 	bgeu	r5,r3,ef8c <altera_avalon_jtag_uart_ioctl+0x68>
    ef84:	00a00034 	movhi	r2,32768
    ef88:	10bfff84 	addi	r2,r2,-2
    ef8c:	20800115 	stw	r2,4(r4)
      rc = 0;
    ef90:	0005883a 	mov	r2,zero
    ef94:	f800283a 	ret

0000ef98 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ef98:	01804e0e 	bge	zero,r6,f0d4 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ef9c:	defff504 	addi	sp,sp,-44
    efa0:	dc000115 	stw	r16,4(sp)
    efa4:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    efa8:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    efac:	dd800715 	stw	r22,28(sp)
    efb0:	dd400615 	stw	r21,24(sp)
    efb4:	dd000515 	stw	r20,20(sp)
    efb8:	dcc00415 	stw	r19,16(sp)
    efbc:	dc800315 	stw	r18,12(sp)
    efc0:	dfc00a15 	stw	ra,40(sp)
    efc4:	df000915 	stw	fp,36(sp)
    efc8:	ddc00815 	stw	r23,32(sp)
    efcc:	dc400215 	stw	r17,8(sp)
    efd0:	3027883a 	mov	r19,r6
    efd4:	2025883a 	mov	r18,r4
    efd8:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    efdc:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    efe0:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    efe4:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    efe8:	b02f883a 	mov	r23,r22
    efec:	00000a06 	br	f018 <altera_avalon_jtag_uart_read+0x80>
    eff0:	9880012e 	bgeu	r19,r2,eff8 <altera_avalon_jtag_uart_read+0x60>
    eff4:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eff8:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    effc:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f000:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f004:	00078d40 	call	78d4 <memcpy>
      ptr   += n;
      space -= n;
    f008:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f00c:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    f010:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    f014:	04c0080e 	bge	zero,r19,f038 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f018:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f01c:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    f020:	e4000136 	bltu	fp,r16,f028 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    f024:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f028:	a40b883a 	add	r5,r20,r16
    f02c:	b809883a 	mov	r4,r23
    f030:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    f034:	103fee1e 	bne	r2,zero,eff0 <__alt_data_end+0xff00eff0>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f038:	bd800d1e 	bne	r23,r22,f070 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f03c:	d8800017 	ldw	r2,0(sp)
    f040:	10000426 	beq	r2,zero,f054 <altera_avalon_jtag_uart_read+0xbc>
    f044:	00002106 	br	f0cc <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f048:	90c00917 	ldw	r3,36(r18)
    f04c:	90800117 	ldw	r2,4(r18)
    f050:	1880022e 	bgeu	r3,r2,f05c <altera_avalon_jtag_uart_read+0xc4>
    f054:	90800a17 	ldw	r2,40(r18)
    f058:	e0bffb26 	beq	fp,r2,f048 <__alt_data_end+0xff00f048>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f05c:	90800a17 	ldw	r2,40(r18)
    f060:	e0800126 	beq	fp,r2,f068 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f064:	04ffe016 	blt	zero,r19,efe8 <__alt_data_end+0xff00efe8>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    f068:	00bffec4 	movi	r2,-5
    f06c:	00000b06 	br	f09c <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f070:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f074:	00bfff84 	movi	r2,-2
    f078:	2084703a 	and	r2,r4,r2
    f07c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f080:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f084:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f088:	10800054 	ori	r2,r2,1
    f08c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f090:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f094:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    f098:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    f09c:	dfc00a17 	ldw	ra,40(sp)
    f0a0:	df000917 	ldw	fp,36(sp)
    f0a4:	ddc00817 	ldw	r23,32(sp)
    f0a8:	dd800717 	ldw	r22,28(sp)
    f0ac:	dd400617 	ldw	r21,24(sp)
    f0b0:	dd000517 	ldw	r20,20(sp)
    f0b4:	dcc00417 	ldw	r19,16(sp)
    f0b8:	dc800317 	ldw	r18,12(sp)
    f0bc:	dc400217 	ldw	r17,8(sp)
    f0c0:	dc000117 	ldw	r16,4(sp)
    f0c4:	dec00b04 	addi	sp,sp,44
    f0c8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f0cc:	00bffd44 	movi	r2,-11
    f0d0:	003ff206 	br	f09c <__alt_data_end+0xff00f09c>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    f0d4:	39d0000c 	andi	r7,r7,16384
    f0d8:	3800021e 	bne	r7,zero,f0e4 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    f0dc:	00bffec4 	movi	r2,-5
}
    f0e0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f0e4:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    f0e8:	f800283a 	ret

0000f0ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f0ec:	defff604 	addi	sp,sp,-40
    f0f0:	dc000015 	stw	r16,0(sp)
    f0f4:	dfc00915 	stw	ra,36(sp)
    f0f8:	df000815 	stw	fp,32(sp)
    f0fc:	ddc00715 	stw	r23,28(sp)
    f100:	dd800615 	stw	r22,24(sp)
    f104:	dd400515 	stw	r21,20(sp)
    f108:	dd000415 	stw	r20,16(sp)
    f10c:	dcc00315 	stw	r19,12(sp)
    f110:	dc800215 	stw	r18,8(sp)
    f114:	dc400115 	stw	r17,4(sp)
    f118:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f11c:	01804d0e 	bge	zero,r6,f254 <altera_avalon_jtag_uart_write+0x168>
    f120:	302d883a 	mov	r22,r6
    f124:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f128:	3c50000c 	andi	r17,r7,16384
    f12c:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f130:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f134:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f138:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    f13c:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    f140:	e0c03a2e 	bgeu	fp,r3,f22c <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    f144:	1dffffc4 	addi	r23,r3,-1
    f148:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    f14c:	b800131e 	bne	r23,zero,f19c <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f150:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f154:	24c4703a 	and	r2,r4,r19
    f158:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f15c:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f160:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f164:	10800094 	ori	r2,r2,2
    f168:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f16c:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f170:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f174:	8800341e 	bne	r17,zero,f248 <altera_avalon_jtag_uart_write+0x15c>
    f178:	81000917 	ldw	r4,36(r16)
    f17c:	00000206 	br	f188 <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f180:	80800117 	ldw	r2,4(r16)
    f184:	2080022e 	bgeu	r4,r2,f190 <altera_avalon_jtag_uart_write+0xa4>
    f188:	80800d17 	ldw	r2,52(r16)
    f18c:	18bffc26 	beq	r3,r2,f180 <__alt_data_end+0xff00f180>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f190:	203fe926 	beq	r4,zero,f138 <__alt_data_end+0xff00f138>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f194:	ad00181e 	bne	r21,r20,f1f8 <altera_avalon_jtag_uart_write+0x10c>
    f198:	00003a06 	br	f284 <altera_avalon_jtag_uart_write+0x198>
    f19c:	b5c0012e 	bgeu	r22,r23,f1a4 <altera_avalon_jtag_uart_write+0xb8>
    f1a0:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f1a4:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1a8:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f1ac:	a80b883a 	mov	r5,r21
    f1b0:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1b4:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f1b8:	00078d40 	call	78d4 <memcpy>
      ptr   += n;
      count -= n;
    f1bc:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f1c0:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f1c4:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f1c8:	05bfdb16 	blt	zero,r22,f138 <__alt_data_end+0xff00f138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1cc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1d0:	00bfff84 	movi	r2,-2
    f1d4:	1884703a 	and	r2,r3,r2
    f1d8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1dc:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1e0:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1e4:	10800094 	ori	r2,r2,2
    f1e8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1ec:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1f0:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f1f4:	a5402226 	beq	r20,r21,f280 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f1f8:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f1fc:	dfc00917 	ldw	ra,36(sp)
    f200:	df000817 	ldw	fp,32(sp)
    f204:	ddc00717 	ldw	r23,28(sp)
    f208:	dd800617 	ldw	r22,24(sp)
    f20c:	dd400517 	ldw	r21,20(sp)
    f210:	dd000417 	ldw	r20,16(sp)
    f214:	dcc00317 	ldw	r19,12(sp)
    f218:	dc800217 	ldw	r18,8(sp)
    f21c:	dc400117 	ldw	r17,4(sp)
    f220:	dc000017 	ldw	r16,0(sp)
    f224:	dec00a04 	addi	sp,sp,40
    f228:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f22c:	18000326 	beq	r3,zero,f23c <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f230:	00820004 	movi	r2,2048
    f234:	172fc83a 	sub	r23,r2,fp
    f238:	003fc406 	br	f14c <__alt_data_end+0xff00f14c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f23c:	0081ffc4 	movi	r2,2047
    f240:	172fc83a 	sub	r23,r2,fp
    f244:	003fc106 	br	f14c <__alt_data_end+0xff00f14c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f248:	ad3feb1e 	bne	r21,r20,f1f8 <__alt_data_end+0xff00f1f8>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f24c:	00bffd44 	movi	r2,-11
    f250:	003fea06 	br	f1fc <__alt_data_end+0xff00f1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f254:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f258:	00bfff84 	movi	r2,-2
    f25c:	1884703a 	and	r2,r3,r2
    f260:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f264:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f268:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f26c:	10800094 	ori	r2,r2,2
    f270:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f274:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f278:	1801703a 	wrctl	status,r3
    f27c:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f280:	883ff21e 	bne	r17,zero,f24c <__alt_data_end+0xff00f24c>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f284:	00bffec4 	movi	r2,-5
    f288:	003fdc06 	br	f1fc <__alt_data_end+0xff00f1fc>

0000f28c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f28c:	defffe04 	addi	sp,sp,-8
    f290:	dfc00115 	stw	ra,4(sp)
    f294:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f298:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f29c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2a0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2a4:	00bfff84 	movi	r2,-2
    f2a8:	8084703a 	and	r2,r16,r2
    f2ac:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f2b0:	000f9680 	call	f968 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2b4:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f2b8:	dfc00117 	ldw	ra,4(sp)
    f2bc:	dc000017 	ldw	r16,0(sp)
    f2c0:	dec00204 	addi	sp,sp,8
    f2c4:	f800283a 	ret

0000f2c8 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f2c8:	d0e6e717 	ldw	r3,-25700(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f2cc:	defffe04 	addi	sp,sp,-8
    f2d0:	dfc00115 	stw	ra,4(sp)
    f2d4:	2005883a 	mov	r2,r4
    f2d8:	2809883a 	mov	r4,r5
    f2dc:	300b883a 	mov	r5,r6
    f2e0:	1800011e 	bne	r3,zero,f2e8 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f2e4:	d1e6e715 	stw	r7,-25700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f2e8:	00c001c4 	movi	r3,7
    f2ec:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f2f0:	01800074 	movhi	r6,1
    f2f4:	31bca304 	addi	r6,r6,-3444
    f2f8:	d8000015 	stw	zero,0(sp)
    f2fc:	100f883a 	mov	r7,r2
    f300:	000f5c40 	call	f5c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f304:	dfc00117 	ldw	ra,4(sp)
    f308:	dec00204 	addi	sp,sp,8
    f30c:	f800283a 	ret

0000f310 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f310:	d0e6e317 	ldw	r3,-25716(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f314:	d0a6e417 	ldw	r2,-25712(gp)

  if (!altera_avalon_timer_ts_freq)
    f318:	18000a26 	beq	r3,zero,f344 <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f31c:	10c00104 	addi	r3,r2,4
    f320:	01000204 	movi	r4,8
    f324:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f328:	013fffd4 	movui	r4,65535
    f32c:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f330:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f334:	00800104 	movi	r2,4
    f338:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f33c:	0005883a 	mov	r2,zero
    f340:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f344:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f348:	f800283a 	ret

0000f34c <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f34c:	d0a6e317 	ldw	r2,-25716(gp)
    f350:	1000021e 	bne	r2,zero,f35c <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f354:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f358:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f35c:	d0e6e417 	ldw	r3,-25712(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f360:	18800404 	addi	r2,r3,16
    f364:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f368:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f36c:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f370:	1806943a 	slli	r3,r3,16
    f374:	10bfffcc 	andi	r2,r2,65535
    f378:	1884303a 	nor	r2,r3,r2
    f37c:	f800283a 	ret

0000f380 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f380:	d0a6e317 	ldw	r2,-25716(gp)
    f384:	f800283a 	ret

0000f388 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f388:	d0a6e717 	ldw	r2,-25700(gp)
    f38c:	10001a26 	beq	r2,zero,f3f8 <alt_alarm_start+0x70>
  {
    if (alarm)
    f390:	20001b26 	beq	r4,zero,f400 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f394:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f398:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f39c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3a0:	00bfff84 	movi	r2,-2
    f3a4:	1884703a 	and	r2,r3,r2
    f3a8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f3ac:	d0a6e617 	ldw	r2,-25704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f3b0:	11800044 	addi	r6,r2,1
    f3b4:	314b883a 	add	r5,r6,r5
    f3b8:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f3bc:	28800b36 	bltu	r5,r2,f3ec <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f3c0:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f3c4:	d0a01004 	addi	r2,gp,-32704
    f3c8:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f3cc:	d0a01017 	ldw	r2,-32704(gp)
    f3d0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f3d4:	d0a01017 	ldw	r2,-32704(gp)
  list->next           = entry;
    f3d8:	d1201015 	stw	r4,-32704(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f3dc:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3e0:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f3e4:	0005883a 	mov	r2,zero
    f3e8:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f3ec:	00800044 	movi	r2,1
    f3f0:	20800405 	stb	r2,16(r4)
    f3f4:	003ff306 	br	f3c4 <__alt_data_end+0xff00f3c4>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f3f8:	00bfde84 	movi	r2,-134
    f3fc:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f400:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f404:	f800283a 	ret

0000f408 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f408:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f40c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f410:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f414:	dc000015 	stw	r16,0(sp)
    f418:	dfc00115 	stw	ra,4(sp)
    f41c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f420:	000bfb00 	call	bfb0 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f424:	10001226 	beq	r2,zero,f470 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f428:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f42c:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f430:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f434:	21000044 	addi	r4,r4,1
    f438:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f43c:	297fffc4 	addi	r5,r5,-1
    f440:	283ffe1e 	bne	r5,zero,f43c <__alt_data_end+0xff00f43c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f444:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f448:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f44c:	18bffb16 	blt	r3,r2,f43c <__alt_data_end+0xff00f43c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f450:	8020913a 	slli	r16,r16,4
    f454:	843fffc4 	addi	r16,r16,-1
    f458:	803ffe1e 	bne	r16,zero,f454 <__alt_data_end+0xff00f454>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f45c:	0005883a 	mov	r2,zero
    f460:	dfc00117 	ldw	ra,4(sp)
    f464:	dc000017 	ldw	r16,0(sp)
    f468:	dec00204 	addi	sp,sp,8
    f46c:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f470:	8020913a 	slli	r16,r16,4
    f474:	843fffc4 	addi	r16,r16,-1
    f478:	043ffe16 	blt	zero,r16,f474 <__alt_data_end+0xff00f474>
    f47c:	003ff706 	br	f45c <__alt_data_end+0xff00f45c>

0000f480 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f480:	f800283a 	ret

0000f484 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f484:	20000a26 	beq	r4,zero,f4b0 <alt_dev_llist_insert+0x2c>
    f488:	20800217 	ldw	r2,8(r4)
    f48c:	10000826 	beq	r2,zero,f4b0 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f490:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f494:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f498:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f49c:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f4a0:	28c00017 	ldw	r3,0(r5)
    f4a4:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f4a8:	29000015 	stw	r4,0(r5)
    f4ac:	f800283a 	ret
    f4b0:	d0a00d17 	ldw	r2,-32716(gp)
    f4b4:	10000926 	beq	r2,zero,f4dc <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f4b8:	deffff04 	addi	sp,sp,-4
    f4bc:	dfc00015 	stw	ra,0(sp)
    f4c0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f4c4:	00c00584 	movi	r3,22
    f4c8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f4cc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f4d0:	dfc00017 	ldw	ra,0(sp)
    f4d4:	dec00104 	addi	sp,sp,4
    f4d8:	f800283a 	ret
    f4dc:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f4e0:	00c00584 	movi	r3,22
    f4e4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f4e8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f4ec:	f800283a 	ret

0000f4f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4f0:	defffc04 	addi	sp,sp,-16
    f4f4:	dc800215 	stw	r18,8(sp)
    f4f8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4fc:	04800074 	movhi	r18,1
    f500:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f504:	dfc00315 	stw	ra,12(sp)
    f508:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f50c:	84000304 	addi	r16,r16,12
    f510:	94800404 	addi	r18,r18,16
    f514:	84800936 	bltu	r16,r18,f53c <_do_ctors+0x4c>
    f518:	84a5c83a 	sub	r18,r16,r18
    f51c:	9024d0ba 	srli	r18,r18,2
    f520:	0023883a 	mov	r17,zero
    f524:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f528:	80800017 	ldw	r2,0(r16)
    f52c:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f530:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f534:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f538:	8cbffb1e 	bne	r17,r18,f528 <__alt_data_end+0xff00f528>
        (*ctor) (); 
}
    f53c:	dfc00317 	ldw	ra,12(sp)
    f540:	dc800217 	ldw	r18,8(sp)
    f544:	dc400117 	ldw	r17,4(sp)
    f548:	dc000017 	ldw	r16,0(sp)
    f54c:	dec00404 	addi	sp,sp,16
    f550:	f800283a 	ret

0000f554 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f554:	defffc04 	addi	sp,sp,-16
    f558:	dc800215 	stw	r18,8(sp)
    f55c:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f560:	04800074 	movhi	r18,1
    f564:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f568:	dfc00315 	stw	ra,12(sp)
    f56c:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f570:	84000304 	addi	r16,r16,12
    f574:	94800404 	addi	r18,r18,16
    f578:	84800936 	bltu	r16,r18,f5a0 <_do_dtors+0x4c>
    f57c:	84a5c83a 	sub	r18,r16,r18
    f580:	9024d0ba 	srli	r18,r18,2
    f584:	0023883a 	mov	r17,zero
    f588:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f58c:	80800017 	ldw	r2,0(r16)
    f590:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f594:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f598:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f59c:	8cbffb1e 	bne	r17,r18,f58c <__alt_data_end+0xff00f58c>
        (*dtor) (); 
}
    f5a0:	dfc00317 	ldw	ra,12(sp)
    f5a4:	dc800217 	ldw	r18,8(sp)
    f5a8:	dc400117 	ldw	r17,4(sp)
    f5ac:	dc000017 	ldw	r16,0(sp)
    f5b0:	dec00404 	addi	sp,sp,16
    f5b4:	f800283a 	ret

0000f5b8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f5b8:	01440004 	movi	r5,4096
    f5bc:	0009883a 	mov	r4,zero
    f5c0:	000fbd81 	jmpi	fbd8 <alt_icache_flush>

0000f5c4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f5c4:	000f6501 	jmpi	f650 <alt_iic_isr_register>

0000f5c8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5c8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5cc:	00bfff84 	movi	r2,-2
    f5d0:	2084703a 	and	r2,r4,r2
    f5d4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f5d8:	00c00044 	movi	r3,1
    f5dc:	d0a6e517 	ldw	r2,-25708(gp)
    f5e0:	194a983a 	sll	r5,r3,r5
    f5e4:	288ab03a 	or	r5,r5,r2
    f5e8:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f5ec:	d0a6e517 	ldw	r2,-25708(gp)
    f5f0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5f4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f5f8:	0005883a 	mov	r2,zero
    f5fc:	f800283a 	ret

0000f600 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f600:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f604:	00bfff84 	movi	r2,-2
    f608:	2084703a 	and	r2,r4,r2
    f60c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f610:	00ffff84 	movi	r3,-2
    f614:	d0a6e517 	ldw	r2,-25708(gp)
    f618:	194a183a 	rol	r5,r3,r5
    f61c:	288a703a 	and	r5,r5,r2
    f620:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f624:	d0a6e517 	ldw	r2,-25708(gp)
    f628:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f62c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f630:	0005883a 	mov	r2,zero
    f634:	f800283a 	ret

0000f638 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f638:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f63c:	00800044 	movi	r2,1
    f640:	1144983a 	sll	r2,r2,r5
    f644:	10c4703a 	and	r2,r2,r3
}
    f648:	1004c03a 	cmpne	r2,r2,zero
    f64c:	f800283a 	ret

0000f650 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f650:	00c007c4 	movi	r3,31
    f654:	19401616 	blt	r3,r5,f6b0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f658:	defffe04 	addi	sp,sp,-8
    f65c:	dfc00115 	stw	ra,4(sp)
    f660:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f664:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f668:	00ffff84 	movi	r3,-2
    f66c:	80c6703a 	and	r3,r16,r3
    f670:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f674:	280490fa 	slli	r2,r5,3
    f678:	00c00074 	movhi	r3,1
    f67c:	18cf8404 	addi	r3,r3,15888
    f680:	1885883a 	add	r2,r3,r2
    f684:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f688:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f68c:	30000626 	beq	r6,zero,f6a8 <alt_iic_isr_register+0x58>
    f690:	000f5c80 	call	f5c8 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f694:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f698:	dfc00117 	ldw	ra,4(sp)
    f69c:	dc000017 	ldw	r16,0(sp)
    f6a0:	dec00204 	addi	sp,sp,8
    f6a4:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f6a8:	000f6000 	call	f600 <alt_ic_irq_disable>
    f6ac:	003ff906 	br	f694 <__alt_data_end+0xff00f694>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f6b0:	00bffa84 	movi	r2,-22
    f6b4:	f800283a 	ret

0000f6b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f6b8:	defffd04 	addi	sp,sp,-12
    f6bc:	dc400115 	stw	r17,4(sp)
    f6c0:	dc000015 	stw	r16,0(sp)
    f6c4:	2823883a 	mov	r17,r5
    f6c8:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f6cc:	01400044 	movi	r5,1
    f6d0:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f6d4:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f6d8:	000f7bc0 	call	f7bc <open>

  if (old >= 0)
    f6dc:	10000c16 	blt	r2,zero,f710 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f6e0:	10c00324 	muli	r3,r2,12
    f6e4:	01400074 	movhi	r5,1
    f6e8:	29440f04 	addi	r5,r5,4156
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f6ec:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6f0:	28c5883a 	add	r2,r5,r3
    f6f4:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f6f8:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6fc:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f700:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f704:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f708:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f70c:	000eb0c0 	call	eb0c <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f710:	01807fc4 	movi	r6,511
    f714:	000b883a 	mov	r5,zero
    f718:	8809883a 	mov	r4,r17
    f71c:	000f7bc0 	call	f7bc <open>

  if (old >= 0)
    f720:	10000c16 	blt	r2,zero,f754 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f724:	10c00324 	muli	r3,r2,12
    f728:	01400074 	movhi	r5,1
    f72c:	29440f04 	addi	r5,r5,4156
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f730:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f734:	28c5883a 	add	r2,r5,r3
    f738:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f73c:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f740:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f744:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f748:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f74c:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f750:	000eb0c0 	call	eb0c <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f754:	01807fc4 	movi	r6,511
    f758:	01400044 	movi	r5,1
    f75c:	8009883a 	mov	r4,r16
    f760:	000f7bc0 	call	f7bc <open>

  if (old >= 0)
    f764:	10001016 	blt	r2,zero,f7a8 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f768:	10c00324 	muli	r3,r2,12
    f76c:	01400074 	movhi	r5,1
    f770:	29440f04 	addi	r5,r5,4156
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f774:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f778:	28c5883a 	add	r2,r5,r3
    f77c:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f780:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f784:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f788:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f78c:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f790:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f794:	dfc00217 	ldw	ra,8(sp)
    f798:	dc400117 	ldw	r17,4(sp)
    f79c:	dc000017 	ldw	r16,0(sp)
    f7a0:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f7a4:	000eb0c1 	jmpi	eb0c <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f7a8:	dfc00217 	ldw	ra,8(sp)
    f7ac:	dc400117 	ldw	r17,4(sp)
    f7b0:	dc000017 	ldw	r16,0(sp)
    f7b4:	dec00304 	addi	sp,sp,12
    f7b8:	f800283a 	ret

0000f7bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f7bc:	defffa04 	addi	sp,sp,-24
    f7c0:	dc000015 	stw	r16,0(sp)
    f7c4:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f7c8:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f7cc:	dc800215 	stw	r18,8(sp)
    f7d0:	dc400115 	stw	r17,4(sp)
    f7d4:	dfc00515 	stw	ra,20(sp)
    f7d8:	dd000415 	stw	r20,16(sp)
    f7dc:	dcc00315 	stw	r19,12(sp)
    f7e0:	2023883a 	mov	r17,r4
    f7e4:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f7e8:	000fa640 	call	fa64 <alt_find_dev>
    f7ec:	10004626 	beq	r2,zero,f908 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f7f0:	1009883a 	mov	r4,r2
    f7f4:	1029883a 	mov	r20,r2
    f7f8:	000fb880 	call	fb88 <alt_get_fd>
    f7fc:	1027883a 	mov	r19,r2
    f800:	1000090e 	bge	r2,zero,f828 <open+0x6c>
    f804:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f808:	9809883a 	mov	r4,r19
    f80c:	000eb0c0 	call	eb0c <alt_release_fd>
    f810:	d0a00d17 	ldw	r2,-32716(gp)
    f814:	10004326 	beq	r2,zero,f924 <open+0x168>
    f818:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f81c:	14000015 	stw	r16,0(r2)
    return -1;
    f820:	00bfffc4 	movi	r2,-1
    f824:	00002e06 	br	f8e0 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f828:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f82c:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f830:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f834:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f838:	10840f04 	addi	r2,r2,4156

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f83c:	80c6703a 	and	r3,r16,r3
    f840:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f844:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f848:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f84c:	d2200817 	ldw	r8,-32736(gp)
    f850:	21c00017 	ldw	r7,0(r4)
    f854:	11400204 	addi	r5,r2,8
    f858:	0007883a 	mov	r3,zero
    f85c:	00000306 	br	f86c <open+0xb0>
    f860:	10800304 	addi	r2,r2,12
    f864:	29400304 	addi	r5,r5,12
    f868:	40c01436 	bltu	r8,r3,f8bc <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f86c:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f870:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f874:	31fffa1e 	bne	r6,r7,f860 <__alt_data_end+0xff00f860>
    f878:	29800017 	ldw	r6,0(r5)
    f87c:	303ff80e 	bge	r6,zero,f860 <__alt_data_end+0xff00f860>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f880:	20bff726 	beq	r4,r2,f860 <__alt_data_end+0xff00f860>
    f884:	04000344 	movi	r16,13
    f888:	003fdf06 	br	f808 <__alt_data_end+0xff00f808>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f88c:	1009883a 	mov	r4,r2
    f890:	000fb880 	call	fb88 <alt_get_fd>
    f894:	1027883a 	mov	r19,r2
    f898:	103fda16 	blt	r2,zero,f804 <__alt_data_end+0xff00f804>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f89c:	99000324 	muli	r4,r19,12
    f8a0:	00800074 	movhi	r2,1
    f8a4:	10840f04 	addi	r2,r2,4156
    f8a8:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f8ac:	00900034 	movhi	r2,16384
    f8b0:	10bfffc4 	addi	r2,r2,-1
    f8b4:	8084703a 	and	r2,r16,r2
    f8b8:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f8bc:	a0800317 	ldw	r2,12(r20)
    f8c0:	10000f26 	beq	r2,zero,f900 <open+0x144>
    f8c4:	900f883a 	mov	r7,r18
    f8c8:	800d883a 	mov	r6,r16
    f8cc:	880b883a 	mov	r5,r17
    f8d0:	103ee83a 	callr	r2
    f8d4:	1007883a 	mov	r3,r2
    f8d8:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f8dc:	18001316 	blt	r3,zero,f92c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    f8e0:	dfc00517 	ldw	ra,20(sp)
    f8e4:	dd000417 	ldw	r20,16(sp)
    f8e8:	dcc00317 	ldw	r19,12(sp)
    f8ec:	dc800217 	ldw	r18,8(sp)
    f8f0:	dc400117 	ldw	r17,4(sp)
    f8f4:	dc000017 	ldw	r16,0(sp)
    f8f8:	dec00604 	addi	sp,sp,24
    f8fc:	f800283a 	ret
    f900:	9805883a 	mov	r2,r19
    f904:	003ff606 	br	f8e0 <__alt_data_end+0xff00f8e0>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f908:	8809883a 	mov	r4,r17
    f90c:	000fadc0 	call	fadc <alt_find_file>
    f910:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f914:	103fdd1e 	bne	r2,zero,f88c <__alt_data_end+0xff00f88c>
    f918:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f91c:	04ffffc4 	movi	r19,-1
    f920:	003fb906 	br	f808 <__alt_data_end+0xff00f808>
    f924:	d0a6dc04 	addi	r2,gp,-25744
    f928:	003fbc06 	br	f81c <__alt_data_end+0xff00f81c>
    f92c:	00e1c83a 	sub	r16,zero,r3
    f930:	003fb506 	br	f808 <__alt_data_end+0xff00f808>

0000f934 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f934:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f938:	00bfff84 	movi	r2,-2
    f93c:	1884703a 	and	r2,r3,r2
    f940:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f944:	21400117 	ldw	r5,4(r4)
    f948:	20800017 	ldw	r2,0(r4)
    f94c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    f950:	21400117 	ldw	r5,4(r4)
    f954:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f958:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    f95c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f960:	1801703a 	wrctl	status,r3
    f964:	f800283a 	ret

0000f968 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f968:	d0a6e617 	ldw	r2,-25704(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f96c:	defffa04 	addi	sp,sp,-24
    f970:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f974:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f978:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f97c:	dc800215 	stw	r18,8(sp)
    f980:	dfc00515 	stw	ra,20(sp)
    f984:	dd000415 	stw	r20,16(sp)
    f988:	dcc00315 	stw	r19,12(sp)
    f98c:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f990:	d4a01004 	addi	r18,gp,-32704

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f994:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f998:	84801126 	beq	r16,r18,f9e0 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    f99c:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9a0:	053fff84 	movi	r20,-2
    f9a4:	00000606 	br	f9c0 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    f9a8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f9ac:	d0e6e617 	ldw	r3,-25704(gp)
    f9b0:	80800217 	ldw	r2,8(r16)
    f9b4:	1880122e 	bgeu	r3,r2,fa00 <alt_tick+0x98>
    f9b8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f9bc:	8c800826 	beq	r17,r18,f9e0 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f9c0:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    f9c4:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f9c8:	103ff826 	beq	r2,zero,f9ac <__alt_data_end+0xff00f9ac>
    f9cc:	d0a6e617 	ldw	r2,-25704(gp)
    f9d0:	103ff526 	beq	r2,zero,f9a8 <__alt_data_end+0xff00f9a8>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f9d4:	d0a6e617 	ldw	r2,-25704(gp)
    f9d8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f9dc:	8cbff81e 	bne	r17,r18,f9c0 <__alt_data_end+0xff00f9c0>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    f9e0:	dfc00517 	ldw	ra,20(sp)
    f9e4:	dd000417 	ldw	r20,16(sp)
    f9e8:	dcc00317 	ldw	r19,12(sp)
    f9ec:	dc800217 	ldw	r18,8(sp)
    f9f0:	dc400117 	ldw	r17,4(sp)
    f9f4:	dc000017 	ldw	r16,0(sp)
    f9f8:	dec00604 	addi	sp,sp,24
    f9fc:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    fa00:	80800317 	ldw	r2,12(r16)
    fa04:	81000517 	ldw	r4,20(r16)
    fa08:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fa0c:	10000726 	beq	r2,zero,fa2c <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    fa10:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fa14:	d126e617 	ldw	r4,-25704(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    fa18:	10c5883a 	add	r2,r2,r3
    fa1c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fa20:	113fe52e 	bgeu	r2,r4,f9b8 <__alt_data_end+0xff00f9b8>
        {
          alarm->rollover = 1;
    fa24:	84c00405 	stb	r19,16(r16)
    fa28:	003fe306 	br	f9b8 <__alt_data_end+0xff00f9b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa2c:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa30:	1506703a 	and	r3,r2,r20
    fa34:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fa38:	81000117 	ldw	r4,4(r16)
    fa3c:	80c00017 	ldw	r3,0(r16)
    fa40:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    fa44:	81000117 	ldw	r4,4(r16)
    fa48:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fa4c:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    fa50:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa54:	1001703a 	wrctl	status,r2
    fa58:	003fd706 	br	f9b8 <__alt_data_end+0xff00f9b8>

0000fa5c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    fa5c:	000170fa 	wrctl	ienable,zero
    fa60:	f800283a 	ret

0000fa64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa64:	defffb04 	addi	sp,sp,-20
    fa68:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    fa6c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa70:	dc400115 	stw	r17,4(sp)
    fa74:	2823883a 	mov	r17,r5
    fa78:	dcc00315 	stw	r19,12(sp)
    fa7c:	dfc00415 	stw	ra,16(sp)
    fa80:	dc800215 	stw	r18,8(sp)
    fa84:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    fa88:	00027540 	call	2754 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa8c:	8c000b26 	beq	r17,r16,fabc <alt_find_dev+0x58>
    fa90:	14800044 	addi	r18,r2,1
    fa94:	00000206 	br	faa0 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fa98:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa9c:	8c000726 	beq	r17,r16,fabc <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    faa0:	81000217 	ldw	r4,8(r16)
    faa4:	900d883a 	mov	r6,r18
    faa8:	980b883a 	mov	r5,r19
    faac:	000fce80 	call	fce8 <memcmp>
    fab0:	103ff91e 	bne	r2,zero,fa98 <__alt_data_end+0xff00fa98>
    fab4:	8005883a 	mov	r2,r16
    fab8:	00000106 	br	fac0 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fabc:	0005883a 	mov	r2,zero
}
    fac0:	dfc00417 	ldw	ra,16(sp)
    fac4:	dcc00317 	ldw	r19,12(sp)
    fac8:	dc800217 	ldw	r18,8(sp)
    facc:	dc400117 	ldw	r17,4(sp)
    fad0:	dc000017 	ldw	r16,0(sp)
    fad4:	dec00504 	addi	sp,sp,20
    fad8:	f800283a 	ret

0000fadc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fadc:	defffa04 	addi	sp,sp,-24
    fae0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fae4:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fae8:	dd000415 	stw	r20,16(sp)
    faec:	dfc00515 	stw	ra,20(sp)
    faf0:	dcc00315 	stw	r19,12(sp)
    faf4:	dc800215 	stw	r18,8(sp)
    faf8:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fafc:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fb00:	85001626 	beq	r16,r20,fb5c <alt_find_file+0x80>
    fb04:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fb08:	04c00bc4 	movi	r19,47
    fb0c:	00000806 	br	fb30 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fb10:	9185883a 	add	r2,r18,r6
    fb14:	10800007 	ldb	r2,0(r2)
    fb18:	14c00126 	beq	r2,r19,fb20 <alt_find_file+0x44>
    fb1c:	1000021e 	bne	r2,zero,fb28 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    fb20:	000fce80 	call	fce8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fb24:	10001626 	beq	r2,zero,fb80 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fb28:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fb2c:	85000b26 	beq	r16,r20,fb5c <alt_find_file+0x80>
  {
    len = strlen(next->name);
    fb30:	84400217 	ldw	r17,8(r16)
    fb34:	8809883a 	mov	r4,r17
    fb38:	00027540 	call	2754 <strlen>
    fb3c:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    fb40:	8885883a 	add	r2,r17,r2
    fb44:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fb48:	900b883a 	mov	r5,r18
    fb4c:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fb50:	14ffef1e 	bne	r2,r19,fb10 <__alt_data_end+0xff00fb10>
    {
      len -= 1;
    fb54:	31bfffc4 	addi	r6,r6,-1
    fb58:	003fed06 	br	fb10 <__alt_data_end+0xff00fb10>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fb5c:	0005883a 	mov	r2,zero
}
    fb60:	dfc00517 	ldw	ra,20(sp)
    fb64:	dd000417 	ldw	r20,16(sp)
    fb68:	dcc00317 	ldw	r19,12(sp)
    fb6c:	dc800217 	ldw	r18,8(sp)
    fb70:	dc400117 	ldw	r17,4(sp)
    fb74:	dc000017 	ldw	r16,0(sp)
    fb78:	dec00604 	addi	sp,sp,24
    fb7c:	f800283a 	ret
    fb80:	8005883a 	mov	r2,r16
    fb84:	003ff606 	br	fb60 <__alt_data_end+0xff00fb60>

0000fb88 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fb88:	01c00074 	movhi	r7,1
    fb8c:	39c40f04 	addi	r7,r7,4156
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fb90:	0005883a 	mov	r2,zero
    fb94:	3807883a 	mov	r3,r7
    fb98:	01800804 	movi	r6,32
    fb9c:	00000206 	br	fba8 <alt_get_fd+0x20>
    fba0:	10800044 	addi	r2,r2,1
    fba4:	11800a26 	beq	r2,r6,fbd0 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fba8:	19400017 	ldw	r5,0(r3)
    fbac:	18c00304 	addi	r3,r3,12
    fbb0:	283ffb1e 	bne	r5,zero,fba0 <__alt_data_end+0xff00fba0>
    {
      alt_fd_list[i].dev = dev;
    fbb4:	10c00324 	muli	r3,r2,12
    fbb8:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fbbc:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fbc0:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fbc4:	1880030e 	bge	r3,r2,fbd4 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fbc8:	d0a00815 	stw	r2,-32736(gp)
    fbcc:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    fbd0:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fbd4:	f800283a 	ret

0000fbd8 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fbd8:	00840004 	movi	r2,4096
    fbdc:	1140012e 	bgeu	r2,r5,fbe4 <alt_icache_flush+0xc>
    fbe0:	100b883a 	mov	r5,r2
    fbe4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fbe8:	2005883a 	mov	r2,r4
    fbec:	2140092e 	bgeu	r4,r5,fc14 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fbf0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fbf4:	10800804 	addi	r2,r2,32
    fbf8:	117ffd36 	bltu	r2,r5,fbf0 <__alt_data_end+0xff00fbf0>
    fbfc:	0104303a 	nor	r2,zero,r4
    fc00:	2885883a 	add	r2,r5,r2
    fc04:	1004d17a 	srli	r2,r2,5
    fc08:	10800044 	addi	r2,r2,1
    fc0c:	1004917a 	slli	r2,r2,5
    fc10:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fc14:	210007cc 	andi	r4,r4,31
    fc18:	20000126 	beq	r4,zero,fc20 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fc1c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fc20:	0000203a 	flushp
    fc24:	f800283a 	ret

0000fc28 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fc28:	213ffe84 	addi	r4,r4,-6
    fc2c:	008003c4 	movi	r2,15
    fc30:	11001636 	bltu	r2,r4,fc8c <alt_exception_cause_generated_bad_addr+0x64>
    fc34:	200890ba 	slli	r4,r4,2
    fc38:	00800074 	movhi	r2,1
    fc3c:	10bf1304 	addi	r2,r2,-948
    fc40:	2089883a 	add	r4,r4,r2
    fc44:	20800017 	ldw	r2,0(r4)
    fc48:	1000683a 	jmp	r2
    fc4c:	0000fc94 	movui	zero,1010
    fc50:	0000fc94 	movui	zero,1010
    fc54:	0000fc8c 	andi	zero,zero,1010
    fc58:	0000fc8c 	andi	zero,zero,1010
    fc5c:	0000fc8c 	andi	zero,zero,1010
    fc60:	0000fc94 	movui	zero,1010
    fc64:	0000fc8c 	andi	zero,zero,1010
    fc68:	0000fc8c 	andi	zero,zero,1010
    fc6c:	0000fc94 	movui	zero,1010
    fc70:	0000fc94 	movui	zero,1010
    fc74:	0000fc8c 	andi	zero,zero,1010
    fc78:	0000fc94 	movui	zero,1010
    fc7c:	0000fc8c 	andi	zero,zero,1010
    fc80:	0000fc8c 	andi	zero,zero,1010
    fc84:	0000fc8c 	andi	zero,zero,1010
    fc88:	0000fc94 	movui	zero,1010
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fc8c:	0005883a 	mov	r2,zero
    fc90:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fc94:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fc98:	f800283a 	ret

0000fc9c <atexit>:
    fc9c:	200b883a 	mov	r5,r4
    fca0:	000f883a 	mov	r7,zero
    fca4:	000d883a 	mov	r6,zero
    fca8:	0009883a 	mov	r4,zero
    fcac:	000fd641 	jmpi	fd64 <__register_exitproc>

0000fcb0 <exit>:
    fcb0:	defffe04 	addi	sp,sp,-8
    fcb4:	000b883a 	mov	r5,zero
    fcb8:	dc000015 	stw	r16,0(sp)
    fcbc:	dfc00115 	stw	ra,4(sp)
    fcc0:	2021883a 	mov	r16,r4
    fcc4:	000fe7c0 	call	fe7c <__call_exitprocs>
    fcc8:	00800074 	movhi	r2,1
    fccc:	10889504 	addi	r2,r2,8788
    fcd0:	11000017 	ldw	r4,0(r2)
    fcd4:	20800f17 	ldw	r2,60(r4)
    fcd8:	10000126 	beq	r2,zero,fce0 <exit+0x30>
    fcdc:	103ee83a 	callr	r2
    fce0:	8009883a 	mov	r4,r16
    fce4:	000fffc0 	call	fffc <_exit>

0000fce8 <memcmp>:
    fce8:	01c000c4 	movi	r7,3
    fcec:	3980192e 	bgeu	r7,r6,fd54 <memcmp+0x6c>
    fcf0:	2144b03a 	or	r2,r4,r5
    fcf4:	11c4703a 	and	r2,r2,r7
    fcf8:	10000f26 	beq	r2,zero,fd38 <memcmp+0x50>
    fcfc:	20800003 	ldbu	r2,0(r4)
    fd00:	28c00003 	ldbu	r3,0(r5)
    fd04:	10c0151e 	bne	r2,r3,fd5c <memcmp+0x74>
    fd08:	31bfff84 	addi	r6,r6,-2
    fd0c:	01ffffc4 	movi	r7,-1
    fd10:	00000406 	br	fd24 <memcmp+0x3c>
    fd14:	20800003 	ldbu	r2,0(r4)
    fd18:	28c00003 	ldbu	r3,0(r5)
    fd1c:	31bfffc4 	addi	r6,r6,-1
    fd20:	10c00e1e 	bne	r2,r3,fd5c <memcmp+0x74>
    fd24:	21000044 	addi	r4,r4,1
    fd28:	29400044 	addi	r5,r5,1
    fd2c:	31fff91e 	bne	r6,r7,fd14 <__alt_data_end+0xff00fd14>
    fd30:	0005883a 	mov	r2,zero
    fd34:	f800283a 	ret
    fd38:	20c00017 	ldw	r3,0(r4)
    fd3c:	28800017 	ldw	r2,0(r5)
    fd40:	18bfee1e 	bne	r3,r2,fcfc <__alt_data_end+0xff00fcfc>
    fd44:	31bfff04 	addi	r6,r6,-4
    fd48:	21000104 	addi	r4,r4,4
    fd4c:	29400104 	addi	r5,r5,4
    fd50:	39bff936 	bltu	r7,r6,fd38 <__alt_data_end+0xff00fd38>
    fd54:	303fe91e 	bne	r6,zero,fcfc <__alt_data_end+0xff00fcfc>
    fd58:	003ff506 	br	fd30 <__alt_data_end+0xff00fd30>
    fd5c:	10c5c83a 	sub	r2,r2,r3
    fd60:	f800283a 	ret

0000fd64 <__register_exitproc>:
    fd64:	defffa04 	addi	sp,sp,-24
    fd68:	dc000315 	stw	r16,12(sp)
    fd6c:	04000074 	movhi	r16,1
    fd70:	84089504 	addi	r16,r16,8788
    fd74:	80c00017 	ldw	r3,0(r16)
    fd78:	dc400415 	stw	r17,16(sp)
    fd7c:	dfc00515 	stw	ra,20(sp)
    fd80:	18805217 	ldw	r2,328(r3)
    fd84:	2023883a 	mov	r17,r4
    fd88:	10003726 	beq	r2,zero,fe68 <__register_exitproc+0x104>
    fd8c:	10c00117 	ldw	r3,4(r2)
    fd90:	010007c4 	movi	r4,31
    fd94:	20c00e16 	blt	r4,r3,fdd0 <__register_exitproc+0x6c>
    fd98:	1a000044 	addi	r8,r3,1
    fd9c:	8800221e 	bne	r17,zero,fe28 <__register_exitproc+0xc4>
    fda0:	18c00084 	addi	r3,r3,2
    fda4:	18c7883a 	add	r3,r3,r3
    fda8:	18c7883a 	add	r3,r3,r3
    fdac:	12000115 	stw	r8,4(r2)
    fdb0:	10c7883a 	add	r3,r2,r3
    fdb4:	19400015 	stw	r5,0(r3)
    fdb8:	0005883a 	mov	r2,zero
    fdbc:	dfc00517 	ldw	ra,20(sp)
    fdc0:	dc400417 	ldw	r17,16(sp)
    fdc4:	dc000317 	ldw	r16,12(sp)
    fdc8:	dec00604 	addi	sp,sp,24
    fdcc:	f800283a 	ret
    fdd0:	00800034 	movhi	r2,0
    fdd4:	10876304 	addi	r2,r2,7564
    fdd8:	10002626 	beq	r2,zero,fe74 <__register_exitproc+0x110>
    fddc:	01006404 	movi	r4,400
    fde0:	d9400015 	stw	r5,0(sp)
    fde4:	d9800115 	stw	r6,4(sp)
    fde8:	d9c00215 	stw	r7,8(sp)
    fdec:	0001d8c0 	call	1d8c <malloc>
    fdf0:	d9400017 	ldw	r5,0(sp)
    fdf4:	d9800117 	ldw	r6,4(sp)
    fdf8:	d9c00217 	ldw	r7,8(sp)
    fdfc:	10001d26 	beq	r2,zero,fe74 <__register_exitproc+0x110>
    fe00:	81000017 	ldw	r4,0(r16)
    fe04:	10000115 	stw	zero,4(r2)
    fe08:	02000044 	movi	r8,1
    fe0c:	22405217 	ldw	r9,328(r4)
    fe10:	0007883a 	mov	r3,zero
    fe14:	12400015 	stw	r9,0(r2)
    fe18:	20805215 	stw	r2,328(r4)
    fe1c:	10006215 	stw	zero,392(r2)
    fe20:	10006315 	stw	zero,396(r2)
    fe24:	883fde26 	beq	r17,zero,fda0 <__alt_data_end+0xff00fda0>
    fe28:	18c9883a 	add	r4,r3,r3
    fe2c:	2109883a 	add	r4,r4,r4
    fe30:	1109883a 	add	r4,r2,r4
    fe34:	21802215 	stw	r6,136(r4)
    fe38:	01800044 	movi	r6,1
    fe3c:	12406217 	ldw	r9,392(r2)
    fe40:	30cc983a 	sll	r6,r6,r3
    fe44:	4992b03a 	or	r9,r9,r6
    fe48:	12406215 	stw	r9,392(r2)
    fe4c:	21c04215 	stw	r7,264(r4)
    fe50:	01000084 	movi	r4,2
    fe54:	893fd21e 	bne	r17,r4,fda0 <__alt_data_end+0xff00fda0>
    fe58:	11006317 	ldw	r4,396(r2)
    fe5c:	218cb03a 	or	r6,r4,r6
    fe60:	11806315 	stw	r6,396(r2)
    fe64:	003fce06 	br	fda0 <__alt_data_end+0xff00fda0>
    fe68:	18805304 	addi	r2,r3,332
    fe6c:	18805215 	stw	r2,328(r3)
    fe70:	003fc606 	br	fd8c <__alt_data_end+0xff00fd8c>
    fe74:	00bfffc4 	movi	r2,-1
    fe78:	003fd006 	br	fdbc <__alt_data_end+0xff00fdbc>

0000fe7c <__call_exitprocs>:
    fe7c:	defff504 	addi	sp,sp,-44
    fe80:	df000915 	stw	fp,36(sp)
    fe84:	dd400615 	stw	r21,24(sp)
    fe88:	dc800315 	stw	r18,12(sp)
    fe8c:	dfc00a15 	stw	ra,40(sp)
    fe90:	ddc00815 	stw	r23,32(sp)
    fe94:	dd800715 	stw	r22,28(sp)
    fe98:	dd000515 	stw	r20,20(sp)
    fe9c:	dcc00415 	stw	r19,16(sp)
    fea0:	dc400215 	stw	r17,8(sp)
    fea4:	dc000115 	stw	r16,4(sp)
    fea8:	d9000015 	stw	r4,0(sp)
    feac:	2839883a 	mov	fp,r5
    feb0:	04800044 	movi	r18,1
    feb4:	057fffc4 	movi	r21,-1
    feb8:	00800074 	movhi	r2,1
    febc:	10889504 	addi	r2,r2,8788
    fec0:	12000017 	ldw	r8,0(r2)
    fec4:	45005217 	ldw	r20,328(r8)
    fec8:	44c05204 	addi	r19,r8,328
    fecc:	a0001c26 	beq	r20,zero,ff40 <__call_exitprocs+0xc4>
    fed0:	a0800117 	ldw	r2,4(r20)
    fed4:	15ffffc4 	addi	r23,r2,-1
    fed8:	b8000d16 	blt	r23,zero,ff10 <__call_exitprocs+0x94>
    fedc:	14000044 	addi	r16,r2,1
    fee0:	8421883a 	add	r16,r16,r16
    fee4:	8421883a 	add	r16,r16,r16
    fee8:	84402004 	addi	r17,r16,128
    feec:	a463883a 	add	r17,r20,r17
    fef0:	a421883a 	add	r16,r20,r16
    fef4:	e0001e26 	beq	fp,zero,ff70 <__call_exitprocs+0xf4>
    fef8:	80804017 	ldw	r2,256(r16)
    fefc:	e0801c26 	beq	fp,r2,ff70 <__call_exitprocs+0xf4>
    ff00:	bdffffc4 	addi	r23,r23,-1
    ff04:	843fff04 	addi	r16,r16,-4
    ff08:	8c7fff04 	addi	r17,r17,-4
    ff0c:	bd7ff91e 	bne	r23,r21,fef4 <__alt_data_end+0xff00fef4>
    ff10:	00800034 	movhi	r2,0
    ff14:	10876804 	addi	r2,r2,7584
    ff18:	10000926 	beq	r2,zero,ff40 <__call_exitprocs+0xc4>
    ff1c:	a0800117 	ldw	r2,4(r20)
    ff20:	1000301e 	bne	r2,zero,ffe4 <__call_exitprocs+0x168>
    ff24:	a0800017 	ldw	r2,0(r20)
    ff28:	10003226 	beq	r2,zero,fff4 <__call_exitprocs+0x178>
    ff2c:	a009883a 	mov	r4,r20
    ff30:	98800015 	stw	r2,0(r19)
    ff34:	0001da00 	call	1da0 <free>
    ff38:	9d000017 	ldw	r20,0(r19)
    ff3c:	a03fe41e 	bne	r20,zero,fed0 <__alt_data_end+0xff00fed0>
    ff40:	dfc00a17 	ldw	ra,40(sp)
    ff44:	df000917 	ldw	fp,36(sp)
    ff48:	ddc00817 	ldw	r23,32(sp)
    ff4c:	dd800717 	ldw	r22,28(sp)
    ff50:	dd400617 	ldw	r21,24(sp)
    ff54:	dd000517 	ldw	r20,20(sp)
    ff58:	dcc00417 	ldw	r19,16(sp)
    ff5c:	dc800317 	ldw	r18,12(sp)
    ff60:	dc400217 	ldw	r17,8(sp)
    ff64:	dc000117 	ldw	r16,4(sp)
    ff68:	dec00b04 	addi	sp,sp,44
    ff6c:	f800283a 	ret
    ff70:	a0800117 	ldw	r2,4(r20)
    ff74:	80c00017 	ldw	r3,0(r16)
    ff78:	10bfffc4 	addi	r2,r2,-1
    ff7c:	15c01426 	beq	r2,r23,ffd0 <__call_exitprocs+0x154>
    ff80:	80000015 	stw	zero,0(r16)
    ff84:	183fde26 	beq	r3,zero,ff00 <__alt_data_end+0xff00ff00>
    ff88:	95c8983a 	sll	r4,r18,r23
    ff8c:	a0806217 	ldw	r2,392(r20)
    ff90:	a5800117 	ldw	r22,4(r20)
    ff94:	2084703a 	and	r2,r4,r2
    ff98:	10000b26 	beq	r2,zero,ffc8 <__call_exitprocs+0x14c>
    ff9c:	a0806317 	ldw	r2,396(r20)
    ffa0:	2088703a 	and	r4,r4,r2
    ffa4:	20000c1e 	bne	r4,zero,ffd8 <__call_exitprocs+0x15c>
    ffa8:	89400017 	ldw	r5,0(r17)
    ffac:	d9000017 	ldw	r4,0(sp)
    ffb0:	183ee83a 	callr	r3
    ffb4:	a0800117 	ldw	r2,4(r20)
    ffb8:	15bfbf1e 	bne	r2,r22,feb8 <__alt_data_end+0xff00feb8>
    ffbc:	98800017 	ldw	r2,0(r19)
    ffc0:	153fcf26 	beq	r2,r20,ff00 <__alt_data_end+0xff00ff00>
    ffc4:	003fbc06 	br	feb8 <__alt_data_end+0xff00feb8>
    ffc8:	183ee83a 	callr	r3
    ffcc:	003ff906 	br	ffb4 <__alt_data_end+0xff00ffb4>
    ffd0:	a5c00115 	stw	r23,4(r20)
    ffd4:	003feb06 	br	ff84 <__alt_data_end+0xff00ff84>
    ffd8:	89000017 	ldw	r4,0(r17)
    ffdc:	183ee83a 	callr	r3
    ffe0:	003ff406 	br	ffb4 <__alt_data_end+0xff00ffb4>
    ffe4:	a0800017 	ldw	r2,0(r20)
    ffe8:	a027883a 	mov	r19,r20
    ffec:	1029883a 	mov	r20,r2
    fff0:	003fb606 	br	fecc <__alt_data_end+0xff00fecc>
    fff4:	0005883a 	mov	r2,zero
    fff8:	003ffb06 	br	ffe8 <__alt_data_end+0xff00ffe8>

0000fffc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fffc:	20000226 	beq	r4,zero,10008 <_exit+0xc>
    ALT_SIM_FAIL();
   10000:	002af070 	cmpltui	zero,zero,43969
   10004:	003fff06 	br	10004 <__alt_data_end+0xff010004>
  } else {
    ALT_SIM_PASS();
   10008:	002af0b0 	cmpltui	zero,zero,43970
   1000c:	003ffd06 	br	10004 <__alt_data_end+0xff010004>
