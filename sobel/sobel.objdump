
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010aa4 memsz 0x00010aa4 flags r-x
    LOAD off    0x00011ac4 vaddr 0x00010ac4 paddr 0x000125b8 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000140ac vaddr 0x000140ac paddr 0x000140ac align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010180  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b8  0001030c  0001030c  0001130c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00010ac4  000125b8  00011ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  000140ac  000140ac  000140ac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  0001423c  0001423c  000135b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000135b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d8  00000000  00000000  000135e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028a55  00000000  00000000  000146b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a7df  00000000  00000000  0003d10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cd32  00000000  00000000  000478ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022bc  00000000  00000000  00054620  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003eb2  00000000  00000000  000568dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001ca81  00000000  00000000  0005a78e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00077210  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c38  00000000  00000000  00077270  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c8ea  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007c8ed  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c8f9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c8fa  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c8fb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c8ff  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c903  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007c907  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007c910  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007c919  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007c922  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0007c92d  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007c97b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007263d  00000000  00000000  00082453  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
0001030c l    d  .rodata	00000000 .rodata
00010ac4 l    d  .rwdata	00000000 .rwdata
000140ac l    d  .bss	00000000 .bss
0001423c l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010822 l     O .rodata	00000010 zeroes.4404
00004a8c l     F .text	000000bc __sbprintf
00010832 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c9c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000067cc l     F .text	00000008 __fp_unlock
000067e0 l     F .text	0000019c __sinit.part.1
0000697c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010ecc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011310 l     O .rwdata	00000020 lc_ctype_charset
000112f0 l     O .rwdata	00000020 lc_message_charset
00011330 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010864 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009518 l     F .text	000000fc __sprint_r.part.0
00010998 l     O .rodata	00000010 blanks.4348
00010988 l     O .rodata	00000010 zeroes.4349
0000aaa4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e81c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000125a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011510 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ee04 l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000ee50 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f384 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014110 g     O .bss	00000004 alt_instruction_exception_handler
00008bb0 g     F .text	00000074 _mprec_log10
00008c9c g     F .text	0000008c __any_on
0000b040 g     F .text	00000054 _isatty_r
00010870 g     O .rodata	00000028 __mprec_tinytens
0000ea68 g     F .text	00000060 alt_main
000026b8 g     F .text	000000c0 _puts_r
0001413c g     O .bss	00000100 alt_irq
0000b094 g     F .text	00000060 _lseek_r
000107c7 g     O .rodata	00000009 gy_array
000125b8 g       *ABS*	00000000 __flash_rwdata_start
0000d28c g     F .text	00000088 .hidden __eqdf2
0001423c g       *ABS*	00000000 __alt_heap_start
0000267c g     F .text	0000003c printf
0000b2ac g     F .text	0000009c _wcrtomb_r
000093d8 g     F .text	0000005c __sseek
00006b1c g     F .text	00000010 __sinit
0000b154 g     F .text	00000140 __swbuf_r
000075e4 g     F .text	0000007c _setlocale_r
00006984 g     F .text	00000068 __sfmoreglue
0000eacc g     F .text	00000004 __malloc_unlock
0000091c g     F .text	00000014 LCD_Write_Command
000140bc g     O .bss	00000004 sobel_width
000140fc g     O .bss	00000004 altera_avalon_timer_ts_freq
00007aa8 g     F .text	0000015c memmove
00000930 g     F .text	00000014 LCD_Write_Data
00006b04 g     F .text	00000018 _cleanup
00007d2c g     F .text	000000a8 _Balloc
0000d314 g     F .text	000000dc .hidden __gtdf2
0000fba8 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004f0 g     F .text	00000024 cam_get_xsize
0000afe4 g     F .text	0000005c _fstat_r
000140e0 g     O .bss	00000004 errno
00009354 g     F .text	00000008 __seofread
000140f4 g     O .bss	00000004 alt_argv
0001a570 g       *ABS*	00000000 _gp
0000ec74 g     F .text	00000004 usleep
0000ec18 g     F .text	0000005c alt_uncached_malloc
000005b0 g     F .text	00000074 cam_set_image_pointer
00011368 g     O .rwdata	00000180 alt_fd_list
00001df8 g     F .text	00000010 vga_set_pointer
0000fbb0 g     F .text	00000078 alt_find_dev
00007960 g     F .text	00000148 memcpy
000067d4 g     F .text	0000000c _cleanup_r
0000e578 g     F .text	000000dc .hidden __floatsidf
0000f804 g     F .text	00000104 alt_io_redirect
0000d3f0 g     F .text	000000f4 .hidden __ltdf2
0001030c g       *ABS*	00000000 __DTOR_END__
00002778 g     F .text	00000014 puts
0000fd74 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0000928c g     F .text	00000074 __fpclassifyd
00008b0c g     F .text	000000a4 __ratio
0000aa88 g     F .text	0000001c __vfiprintf_internal
0000f090 g     F .text	00000154 altera_avalon_jtag_uart_read
00001e18 g     F .text	00000014 malloc
0000264c g     F .text	00000030 _printf_r
00000770 g     F .text	00000008 get_grayscale_picture
0000c03c g     F .text	00000064 .hidden __udivsi3
0001036c g     O .rodata	00000128 lens_roll_off_tbl
000001d8 g     F .text	00000318 init_camera
0000e89c g     F .text	00000084 isatty
000108c0 g     O .rodata	000000c8 __mprec_tens
00007660 g     F .text	0000000c __locale_charset
0000fd24 g     F .text	00000050 alt_icache_flush
000140dc g     O .bss	00000004 __malloc_top_pad
00012588 g     O .rwdata	00000004 __mb_cur_max
00007690 g     F .text	0000000c _localeconv_r
00001514 g     F .text	00000140 sobel_x
00008138 g     F .text	0000003c __i2b
00006fa0 g     F .text	000004bc __sfvwrite_r
00000944 g     F .text	00000414 init_LCD
0000278c g     F .text	00000054 _sbrk_r
00012570 g     O .rwdata	00000004 pgy_array
00000538 g     F .text	00000078 cam_get_profiling
0000b0f4 g     F .text	00000060 _read_r
0000f578 g     F .text	00000040 alt_dcache_flush
000140c0 g     O .bss	00000004 sobel_result
00012590 g     O .rwdata	00000004 alt_max_fd
0000acd8 g     F .text	000000f0 _fclose_r
0000679c g     F .text	00000030 fflush
000140d8 g     O .bss	00000004 __malloc_max_sbrked_mem
000140b4 g     O .bss	00000004 grayscale_array
0000c0f8 g     F .text	000008ac .hidden __adddf3
00000514 g     F .text	00000024 cam_get_ysize
000088b4 g     F .text	0000010c __b2d
0000ba0c g     F .text	00000538 .hidden __umoddi3
0000e9ec g     F .text	0000007c lseek
00000838 g     F .text	0000008c i2c_short_read
00012580 g     O .rwdata	00000004 _global_impure_ptr
00008d28 g     F .text	00000564 _realloc_r
0001423c g       *ABS*	00000000 __bss_end
0000f79c g     F .text	00000068 alt_iic_isr_register
0000fab4 g     F .text	000000f4 alt_tick
0000b494 g     F .text	00000578 .hidden __udivdi3
0000af40 g     F .text	00000024 _fputwc_r
00010898 g     O .rodata	00000028 __mprec_bigtens
00007f1c g     F .text	00000104 __s2b
0000e654 g     F .text	000000a8 .hidden __floatunsidf
000085f4 g     F .text	00000060 __mcmp
00006b3c g     F .text	00000018 __fp_lock_all
0000f784 g     F .text	00000018 alt_ic_irq_enabled
000140ac g     O .bss	00000004 grayscape_height
0000fa80 g     F .text	00000034 alt_alarm_stop
00014104 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
000114e8 g     O .rwdata	00000028 alt_dev_null
00000de4 g     F .text	00000078 transfer_LCD_with_dma
00001aec g     F .text	000002fc sobel_complete
0000f5b8 g     F .text	00000018 alt_dcache_flush_all
00008020 g     F .text	00000068 __hi0bits
0000e4f8 g     F .text	00000080 .hidden __fixdfsi
000125b8 g       *ABS*	00000000 __ram_rwdata_end
00012594 g     O .rwdata	00000008 alt_dev_list
0000ec78 g     F .text	000000c4 write
0000f478 g     F .text	00000008 alt_timestamp_freq
00010ac4 g       *ABS*	00000000 __ram_rodata_end
0000e824 g     F .text	00000078 fstat
0000d3f0 g     F .text	000000f4 .hidden __ledf2
0000836c g     F .text	00000140 __pow5mult
0000962c g     F .text	0000145c ___vfiprintf_internal_r
000140ec g     O .bss	00000004 __nlocale_changed
0000c0a0 g     F .text	00000058 .hidden __umodsi3
00001de8 g     F .text	00000008 GetSobel_rgb
0001423c g       *ABS*	00000000 end
00001df0 g     F .text	00000008 GetSobelResult
00000648 g     F .text	00000020 take_picture_blocking
000006a8 g     F .text	00000014 DIPSW_get_value
000018e8 g     F .text	00000168 sobel_y_with_rgb
0000ef58 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000638 g     F .text	00000010 current_image_pointer
0001030c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f3c0 g     F .text	00000048 alt_avalon_timer_sc_init
0000e6fc g     F .text	00000064 .hidden __clzsi2
0000f1e4 g     F .text	000001a0 altera_avalon_jtag_uart_write
00006b2c g     F .text	00000004 __sfp_lock_acquire
0000787c g     F .text	000000e4 memchr
00002878 g     F .text	000021f8 ___vfprintf_internal_r
00006c90 g     F .text	00000310 _free_r
0000766c g     F .text	00000010 __locale_mb_cur_max
000017d0 g     F .text	00000118 sobel_y
00010494 g     O .rodata	00000140 noise_reduction_reg_settings_array
00010178 g     F .text	00000180 __call_exitprocs
000140e8 g     O .bss	00000004 __mlocale_changed
00012578 g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000004c _start
0001410c g     O .bss	00000004 _alt_tick_rate
000084ac g     F .text	00000148 __lshift
00014108 g     O .bss	00000004 _alt_nticks
0000ead0 g     F .text	000000c8 read
0000ed5c g     F .text	0000006c alt_sys_init
00001654 g     F .text	0000017c sobel_x_with_rgb
00010060 g     F .text	00000118 __register_exitproc
00008174 g     F .text	000001f8 __multiply
0000efd0 g     F .text	0000004c altera_avalon_jtag_uart_close
00010ac4 g       *ABS*	00000000 __ram_rwdata_start
0001030c g       *ABS*	00000000 __ram_rodata_start
00014114 g     O .bss	00000028 __malloc_current_mallinfo
000089c0 g     F .text	0000014c __d2b
000140c4 g     O .bss	00000004 sobel_height
00000668 g     F .text	00000014 enable_continues_mode
0000edc8 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00001374 g     F .text	000000e4 init_sobel_arrays
0000fcd4 g     F .text	00000050 alt_get_fd
0000f500 g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000abc0 g     F .text	00000054 _close_r
0000ffe4 g     F .text	0000007c memcmp
0000ede8 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
0001423c g       *ABS*	00000000 __alt_stack_base
0000edf8 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00004b48 g     F .text	00000154 __swsetup_r
0000c9a4 g     F .text	000008e8 .hidden __divdf3
000069ec g     F .text	00000118 __sfp
00008c24 g     F .text	00000078 __copybits
00010ac4 g     O .rwdata	00000408 __malloc_av_
00006b38 g     F .text	00000004 __sinit_lock_release
0000d4e4 g     F .text	00000718 .hidden __muldf3
00009300 g     F .text	00000054 __sread
0000fc28 g     F .text	000000ac alt_find_file
0000f5d0 g     F .text	0000006c alt_dev_llist_insert
0000eac8 g     F .text	00000004 __malloc_lock
0000ebbc g     F .text	0000004c sbrk
00006740 g     F .text	0000005c _fflush_r
0000ac14 g     F .text	000000c4 _calloc_r
000140ac g       *ABS*	00000000 __bss_start
00007c04 g     F .text	00000128 memset
00000e5c g     F .text	00000518 main
000140f0 g     O .bss	00000004 alt_envp
000140d4 g     O .bss	00000004 __malloc_max_total_mem
00000760 g     F .text	00000008 get_grayscale_width
0000edd8 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b294 g     F .text	00000018 __swbuf
000140c8 g     O .bss	00000004 sobel_x_result
00009434 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000adc8 g     F .text	00000014 fclose
0000f408 g     F .text	0000003c alt_timestamp_start
00004e9c g     F .text	00001688 _dtoa_r
00001e40 g     F .text	0000080c _malloc_r
0000b408 g     F .text	00000030 __ascii_wctomb
000125a4 g     O .rwdata	00000004 alt_errno
0000745c g     F .text	000000c4 _fwalk
0000bf44 g     F .text	00000084 .hidden __divsi3
00006b6c g     F .text	00000124 _malloc_trim_r
0001030c g       *ABS*	00000000 __CTOR_END__
000140b0 g     O .bss	00000004 grayscale_width
0000943c g     F .text	000000dc strcmp
00000d58 g     F .text	0000008c transfer_LCD_no_dma
0001030c g       *ABS*	00000000 __flash_rodata_start
0001030c g       *ABS*	00000000 __DTOR_LIST__
0000d28c g     F .text	00000088 .hidden __nedf2
000105d4 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ed3c g     F .text	00000020 alt_irq_init
0000eb98 g     F .text	00000024 alt_release_fd
00000790 g     F .text	000000a8 i2c_auto_detect
0000fe34 g     F .text	00000018 memalign
000109a8 g     O .rodata	00000100 .hidden __clz_tab
00000624 g     F .text	00000014 current_image_valid
000140e4 g     O .bss	00000004 _PathLocale
00000778 g     F .text	00000018 i2c_busy_wait
0000fde8 g     F .text	00000014 atexit
0000ab60 g     F .text	00000060 _write_r
0000769c g     F .text	00000018 setlocale
00012584 g     O .rwdata	00000004 _impure_ptr
000140f8 g     O .bss	00000004 alt_argc
00006524 g     F .text	0000021c __sflush_r
00014100 g     O .bss	00000004 altera_avalon_timer_ts_base
0000f6a0 g     F .text	00000064 _do_dtors
00007688 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00008850 g     F .text	00000064 __ulp
00006b54 g     F .text	00000018 __fp_unlock_all
0001259c g     O .rwdata	00000008 alt_fs_list
000140cc g     O .bss	00000004 sobel_y_result
000008c4 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
000140b8 g     O .bss	00000002 LCD_height
000076b4 g     F .text	0000000c localeconv
0000f444 g     F .text	00000034 alt_timestamp
00001e08 g     F .text	00000010 vga_set_swap
0000f710 g     F .text	00000004 alt_ic_isr_register
00001a50 g     F .text	0000009c sobel_threshold
000125b8 g       *ABS*	00000000 _edata
00012574 g     O .rwdata	00000004 pgx_array
0001423c g       *ABS*	00000000 _end
0000addc g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000f01c g     F .text	00000074 altera_avalon_jtag_uart_ioctl
000107d0 g     O .rodata	00000009 gx_array
0000f74c g     F .text	00000038 alt_ic_irq_disable
0000935c g     F .text	0000007c __swrite
0001257c g     O .rwdata	00000004 __malloc_trim_threshold
000140ba g     O .bss	00000002 LCD_width
000006bc g     F .text	000000a4 conv_grayscale
0000767c g     F .text	0000000c __locale_msgcharset
0000fdfc g     F .text	00000038 exit
00007520 g     F .text	000000c4 _fwalk_reent
00008654 g     F .text	000001fc __mdiff
0000bfc8 g     F .text	00000074 .hidden __modsi3
0000fe4c g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006b30 g     F .text	00000004 __sfp_lock_release
00000768 g     F .text	00000008 get_grayscale_height
000102f8 g     F .text	00000014 _exit
00001458 g     F .text	000000bc sobel_mac
0000f480 g     F .text	00000080 alt_alarm_start
000076c0 g     F .text	000001bc __smakebuf_r
000140d0 g     O .bss	00000004 sobel_rgb565
000027e0 g     F .text	00000098 strlen
0000f908 g     F .text	00000178 open
0000d314 g     F .text	000000dc .hidden __gedf2
0000ec08 g     F .text	00000010 alt_uncached_free
0001258c g     O .rwdata	00000004 __wctomb
00009614 g     F .text	00000018 __sprint_r
0000f704 g     F .text	0000000c alt_icache_flush_all
000125ac g     O .rwdata	00000004 alt_priority_mask
0000f714 g     F .text	00000038 alt_ic_irq_enable
00004a70 g     F .text	0000001c __vfprintf_internal
0000b438 g     F .text	0000005c _wctomb_r
0000dbfc g     F .text	000008fc .hidden __subdf3
00008088 g     F .text	000000b0 __lo0bits
000125b0 g     O .rwdata	00000008 alt_alarm_list
0000f63c g     F .text	00000064 _do_ctors
0000b348 g     F .text	000000c0 wcrtomb
0000e760 g     F .text	000000bc close
0000e920 g     F .text	000000cc alt_load
0000af64 g     F .text	00000080 fputwc
00001e2c g     F .text	00000014 free
00006b34 g     F .text	00000004 __sinit_lock_acquire
00007dfc g     F .text	00000120 __multadd
00007dd4 g     F .text	00000028 _Bfree
0000067c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	84104f04 	addi	r16,r16,16700
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a6e817 	ldw	r2,-25696(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     18c:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
     190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     198:	00bffd16 	blt	zero,r2,190 <__alt_data_end+0xff000190>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     19c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1a4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a8:	d6a95c14 	ori	gp,gp,42352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1ac:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1b0:	10902b14 	ori	r2,r2,16556

    movhi r3, %hi(__bss_end)
     1b4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b8:	18d08f14 	ori	r3,r3,16956

    beq r2, r3, 1f
     1bc:	10c00326 	beq	r2,r3,1cc <_start+0x40>

0:
    stw zero, (r2)
     1c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c8:	10fffd36 	bltu	r2,r3,1c0 <__alt_data_end+0xff0001c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1cc:	000e9200 	call	e920 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1d0:	000ea680 	call	ea68 <alt_main>

000001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1d4:	003fff06 	br	1d4 <__alt_data_end+0xff0001d4>

000001d8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1d8:	00804034 	movhi	r2,256
     1dc:	10842744 	addi	r2,r2,4253
     1e0:	00c00084 	movi	r3,2
     1e4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1e8:	00804034 	movhi	r2,256
     1ec:	10841304 	addi	r2,r2,4172
     1f0:	00c00044 	movi	r3,1
     1f4:	10c00025 	stbio	r3,0(r2)
     1f8:	008003f4 	movhi	r2,15
     1fc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     200:	0001883a 	nop
     204:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     208:	103ffd1e 	bne	r2,zero,200 <__alt_data_end+0xff000200>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     20c:	00804034 	movhi	r2,256
     210:	10841304 	addi	r2,r2,4172
     214:	10000025 	stbio	zero,0(r2)
     218:	008003f4 	movhi	r2,15
     21c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     220:	0001883a 	nop
     224:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     228:	103ffd1e 	bne	r2,zero,220 <__alt_data_end+0xff000220>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     230:	01800044 	movi	r6,1
     234:	014ce184 	movi	r5,13190
     238:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     23c:	dfc00315 	stw	ra,12(sp)
     240:	dc800215 	stw	r18,8(sp)
     244:	dc400115 	stw	r17,4(sp)
     248:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     24c:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     250:	000d883a 	mov	r6,zero
     254:	014ce184 	movi	r5,13190
     258:	01001e04 	movi	r4,120
     25c:	00008c40 	call	8c4 <i2c_short_write>
     260:	008003f4 	movhi	r2,15
     264:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     268:	0001883a 	nop
     26c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     270:	103ffd1e 	bne	r2,zero,268 <__alt_data_end+0xff000268>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     274:	01803104 	movi	r6,196
     278:	014c0684 	movi	r5,12314
     27c:	01001e04 	movi	r4,120
     280:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     284:	01800204 	movi	r6,8
     288:	014c8084 	movi	r5,12802
     28c:	01001e04 	movi	r4,120
     290:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     294:	0180c744 	movi	r6,797
     298:	014cfd04 	movi	r5,13300
     29c:	01001e04 	movi	r4,120
     2a0:	00008c40 	call	8c4 <i2c_short_write>
     2a4:	008000b4 	movhi	r2,2
     2a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2ac:	0001883a 	nop
     2b0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2b4:	103ffd1e 	bne	r2,zero,2ac <__alt_data_end+0xff0002ac>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2b8:	01a3c254 	movui	r6,36617
     2bc:	014d0784 	movi	r5,13342
     2c0:	01001e04 	movi	r4,120
     2c4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2c8:	01805404 	movi	r6,336
     2cc:	014d0704 	movi	r5,13340
     2d0:	01001e04 	movi	r4,120
     2d4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2d8:	01a3c254 	movui	r6,36617
     2dc:	014d0784 	movi	r5,13342
     2e0:	01001e04 	movi	r4,120
     2e4:	00008c40 	call	8c4 <i2c_short_write>
     2e8:	008000b4 	movhi	r2,2
     2ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2f0:	0001883a 	nop
     2f4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2f8:	103ffd1e 	bne	r2,zero,2f0 <__alt_data_end+0xff0002f0>
     2fc:	04000074 	movhi	r16,1
     300:	84017504 	addi	r16,r16,1492
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     304:	01a3c214 	movui	r6,36616
     308:	014d0784 	movi	r5,13342
     30c:	01001e04 	movi	r4,120
     310:	00008c40 	call	8c4 <i2c_short_write>
     314:	84400084 	addi	r17,r16,2
     318:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     31c:	8980000b 	ldhu	r6,0(r17)
     320:	8140000b 	ldhu	r5,0(r16)
     324:	01001e04 	movi	r4,120
     328:	84000104 	addi	r16,r16,4
     32c:	00008c40 	call	8c4 <i2c_short_write>
     330:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     334:	84bff91e 	bne	r16,r18,31c <__alt_data_end+0xff00031c>
     338:	04000074 	movhi	r16,1
     33c:	84012504 	addi	r16,r16,1172
     340:	84400084 	addi	r17,r16,2
     344:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     348:	8980000b 	ldhu	r6,0(r17)
     34c:	8140000b 	ldhu	r5,0(r16)
     350:	01001e04 	movi	r4,120
     354:	84000104 	addi	r16,r16,4
     358:	00008c40 	call	8c4 <i2c_short_write>
     35c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     360:	943ff91e 	bne	r18,r16,348 <__alt_data_end+0xff000348>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     364:	018164c4 	movi	r6,1427
     368:	014d6904 	movi	r5,13732
     36c:	01001e04 	movi	r4,120
     370:	00008c40 	call	8c4 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     374:	0189e644 	movi	r6,10137
     378:	014ce304 	movi	r5,13196
     37c:	01001e04 	movi	r4,120
     380:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     384:	01991004 	movi	r6,25664
     388:	014ce404 	movi	r5,13200
     38c:	01001e04 	movi	r4,120
     390:	00008c40 	call	8c4 <i2c_short_write>
     394:	008000b4 	movhi	r2,2
     398:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     39c:	0001883a 	nop
     3a0:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3a4:	103ffd1e 	bne	r2,zero,39c <__alt_data_end+0xff00039c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     3a8:	0189e6c4 	movi	r6,10139
     3ac:	014ce304 	movi	r5,13196
     3b0:	01001e04 	movi	r4,120
     3b4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3b8:	01991004 	movi	r6,25664
     3bc:	014ce404 	movi	r5,13200
     3c0:	01001e04 	movi	r4,120
     3c4:	00008c40 	call	8c4 <i2c_short_write>
     3c8:	008000b4 	movhi	r2,2
     3cc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3d0:	0001883a 	nop
     3d4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3d8:	103ffd1e 	bne	r2,zero,3d0 <__alt_data_end+0xff0003d0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3dc:	01a840d4 	movui	r6,41219
     3e0:	014ce304 	movi	r5,13196
     3e4:	01001e04 	movi	r4,120
     3e8:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3ec:	01800144 	movi	r6,5
     3f0:	014ce404 	movi	r5,13200
     3f4:	01001e04 	movi	r4,120
     3f8:	00008c40 	call	8c4 <i2c_short_write>
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     404:	0001883a 	nop
     408:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     40c:	103ffd1e 	bne	r2,zero,404 <__alt_data_end+0xff000404>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     410:	01a840d4 	movui	r6,41219
     414:	014ce304 	movi	r5,13196
     418:	01001e04 	movi	r4,120
     41c:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     420:	01800184 	movi	r6,6
     424:	014ce404 	movi	r5,13200
     428:	01001e04 	movi	r4,120
     42c:	00008c40 	call	8c4 <i2c_short_write>
     430:	008000b4 	movhi	r2,2
     434:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     438:	0001883a 	nop
     43c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     440:	103ffd1e 	bne	r2,zero,438 <__alt_data_end+0xff000438>
     444:	04000074 	movhi	r16,1
     448:	8400db04 	addi	r16,r16,876
     44c:	84400084 	addi	r17,r16,2
     450:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     454:	8980000b 	ldhu	r6,0(r17)
     458:	8140000b 	ldhu	r5,0(r16)
     45c:	01001e04 	movi	r4,120
     460:	84000104 	addi	r16,r16,4
     464:	00008c40 	call	8c4 <i2c_short_write>
     468:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     46c:	943ff91e 	bne	r18,r16,454 <__alt_data_end+0xff000454>
     470:	008003f4 	movhi	r2,15
     474:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     484:	01800804 	movi	r6,32
     488:	014ccb84 	movi	r5,13102
     48c:	01001e04 	movi	r4,120
     490:	00008c40 	call	8c4 <i2c_short_write>
     494:	008003f4 	movhi	r2,15
     498:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     49c:	0001883a 	nop
     4a0:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     4a4:	103ffd1e 	bne	r2,zero,49c <__alt_data_end+0xff00049c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     4a8:	01800884 	movi	r6,34
     4ac:	014d0104 	movi	r5,13316
     4b0:	01001e04 	movi	r4,120
     4b4:	00008c40 	call	8c4 <i2c_short_write>
     4b8:	008003f4 	movhi	r2,15
     4bc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4c0:	0001883a 	nop
     4c4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4c8:	103ffd1e 	bne	r2,zero,4c0 <__alt_data_end+0xff0004c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4cc:	018009c4 	movi	r6,39
     4d0:	014c1004 	movi	r5,12352
     4d4:	01001e04 	movi	r4,120
}
     4d8:	dfc00317 	ldw	ra,12(sp)
     4dc:	dc800217 	ldw	r18,8(sp)
     4e0:	dc400117 	ldw	r17,4(sp)
     4e4:	dc000017 	ldw	r16,0(sp)
     4e8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4ec:	00008c41 	jmpi	8c4 <i2c_short_write>

000004f0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4f0:	00c04034 	movhi	r3,256
     4f4:	18c41304 	addi	r3,r3,4172
     4f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4fc:	1080010c 	andi	r2,r2,4
     500:	103ffd26 	beq	r2,zero,4f8 <__alt_data_end+0xff0004f8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     504:	00804034 	movhi	r2,256
     508:	10841004 	addi	r2,r2,4160
}
     50c:	1080002b 	ldhuio	r2,0(r2)
     510:	f800283a 	ret

00000514 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     514:	00c04034 	movhi	r3,256
     518:	18c41304 	addi	r3,r3,4172
     51c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     520:	1080010c 	andi	r2,r2,4
     524:	103ffd26 	beq	r2,zero,51c <__alt_data_end+0xff00051c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     528:	00804034 	movhi	r2,256
     52c:	10841104 	addi	r2,r2,4164
}
     530:	1080002b 	ldhuio	r2,0(r2)
     534:	f800283a 	ret

00000538 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     538:	00c04034 	movhi	r3,256
     53c:	18c41304 	addi	r3,r3,4172
     540:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     544:	1080010c 	andi	r2,r2,4
     548:	103ffd26 	beq	r2,zero,540 <__alt_data_end+0xff000540>
	printf("Nr. of bytes each line    : %d\n",
     54c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     550:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     554:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     558:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     55c:	1140002b 	ldhuio	r5,0(r2)
     560:	01000074 	movhi	r4,1
     564:	2100c304 	addi	r4,r4,780
     568:	297fffcc 	andi	r5,r5,65535
     56c:	000267c0 	call	267c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     570:	00804034 	movhi	r2,256
     574:	10841104 	addi	r2,r2,4164
     578:	1140002b 	ldhuio	r5,0(r2)
     57c:	01000074 	movhi	r4,1
     580:	2100cb04 	addi	r4,r4,812
     584:	297fffcc 	andi	r5,r5,65535
     588:	000267c0 	call	267c <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     58c:	00804034 	movhi	r2,256
     590:	10841204 	addi	r2,r2,4168
     594:	1140002b 	ldhuio	r5,0(r2)
     598:	01000074 	movhi	r4,1
     59c:	2100d304 	addi	r4,r4,844
     5a0:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     5a4:	dfc00017 	ldw	ra,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     5ac:	000267c1 	jmpi	267c <printf>

000005b0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5b0:	21003fcc 	andi	r4,r4,255
     5b4:	2100201c 	xori	r4,r4,128
     5b8:	213fe004 	addi	r4,r4,-128
     5bc:	00800044 	movi	r2,1
     5c0:	20801226 	beq	r4,r2,60c <cam_set_image_pointer+0x5c>
     5c4:	11000c0e 	bge	r2,r4,5f8 <cam_set_image_pointer+0x48>
     5c8:	00800084 	movi	r2,2
     5cc:	20800626 	beq	r4,r2,5e8 <cam_set_image_pointer+0x38>
     5d0:	008000c4 	movi	r2,3
     5d4:	2080111e 	bne	r4,r2,61c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841704 	addi	r2,r2,4188
     5e0:	11400035 	stwio	r5,0(r2)
     5e4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5e8:	00804034 	movhi	r2,256
     5ec:	10841604 	addi	r2,r2,4184
     5f0:	11400035 	stwio	r5,0(r2)
                break;
     5f4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5f8:	2000091e 	bne	r4,zero,620 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841404 	addi	r2,r2,4176
     604:	11400035 	stwio	r5,0(r2)
	            break;
     608:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     60c:	00804034 	movhi	r2,256
     610:	10841504 	addi	r2,r2,4180
     614:	11400035 	stwio	r5,0(r2)
                break;
     618:	f800283a 	ret
     61c:	f800283a 	ret
     620:	f800283a 	ret

00000624 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     624:	00804034 	movhi	r2,256
     628:	10841304 	addi	r2,r2,4172
     62c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     630:	1080800c 	andi	r2,r2,512
     634:	f800283a 	ret

00000638 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     638:	00804034 	movhi	r2,256
     63c:	10841404 	addi	r2,r2,4176
}
     640:	10800037 	ldwio	r2,0(r2)
     644:	f800283a 	ret

00000648 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     648:	00c04034 	movhi	r3,256
     64c:	18c41304 	addi	r3,r3,4172
     650:	00800204 	movi	r2,8
     654:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     658:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     65c:	1080020c 	andi	r2,r2,8
     660:	103ffd1e 	bne	r2,zero,658 <__alt_data_end+0xff000658>
}
     664:	f800283a 	ret

00000668 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     668:	00804034 	movhi	r2,256
     66c:	10841304 	addi	r2,r2,4172
     670:	00c00404 	movi	r3,16
     674:	10c0002d 	sthio	r3,0(r2)
     678:	f800283a 	ret

0000067c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     67c:	00c04034 	movhi	r3,256
     680:	18c41304 	addi	r3,r3,4172
     684:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     688:	1080200c 	andi	r2,r2,128
     68c:	1000021e 	bne	r2,zero,698 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     690:	0005883a 	mov	r2,zero
}
     694:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     698:	00804004 	movi	r2,256
     69c:	1880002d 	sthio	r2,0(r3)
		return 1;
     6a0:	00800044 	movi	r2,1
     6a4:	f800283a 	ret

000006a8 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     6a8:	00804034 	movhi	r2,256
     6ac:	10842804 	addi	r2,r2,4256
     6b0:	10800023 	ldbuio	r2,0(r2)
}
     6b4:	0084303a 	nor	r2,zero,r2
     6b8:	f800283a 	ret

000006bc <conv_grayscale>:
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6bc:	d0a6d117 	ldw	r2,-25788(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6c0:	defffd04 	addi	sp,sp,-12
     6c4:	dc400115 	stw	r17,4(sp)
     6c8:	dc000015 	stw	r16,0(sp)
     6cc:	dfc00215 	stw	ra,8(sp)
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
     6d0:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     6d4:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6d8:	2021883a 	mov	r16,r4
  int k,gray;
  int kmax = width*height;
     6dc:	29a3383a 	mul	r17,r5,r6
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6e0:	10000226 	beq	r2,zero,6ec <conv_grayscale+0x30>
    free(grayscale_array);
     6e4:	1009883a 	mov	r4,r2
     6e8:	0001e2c0 	call	1e2c <free>
  grayscale_array = (unsigned char *) malloc(kmax);
     6ec:	8809883a 	mov	r4,r17
     6f0:	0001e180 	call	1e18 <malloc>
     6f4:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k<kmax; k++)
     6f8:	0440140e 	bge	zero,r17,74c <conv_grayscale+0x90>
     6fc:	8009883a 	mov	r4,r16
     700:	0013883a 	mov	r9,zero
     704:	00000106 	br	70c <conv_grayscale+0x50>
     708:	d0a6d117 	ldw	r2,-25788(gp)
  {
	  rgb = pixels[k];
     70c:	2200000b 	ldhu	r8,0(r4)
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
     710:	1245883a 	add	r2,r2,r9
     714:	40ffffcc 	andi	r3,r8,65535
     718:	180ed17a 	srli	r7,r3,5
     71c:	1806d2fa 	srli	r3,r3,11
     720:	420007cc 	andi	r8,r8,31
     724:	39c00fcc 	andi	r7,r7,63
     728:	39c00a24 	muli	r7,r7,40
     72c:	18c7883a 	add	r3,r3,r3
     730:	380fd13a 	srai	r7,r7,4
     734:	38c7883a 	add	r3,r7,r3
     738:	1a07883a 	add	r3,r3,r8
     73c:	10c00025 	stbio	r3,0(r2)
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
  for(k = 0; k<kmax; k++)
     740:	4a400044 	addi	r9,r9,1
     744:	21000084 	addi	r4,r4,2
     748:	8a7fef1e 	bne	r17,r9,708 <__alt_data_end+0xff000708>
  {
	  rgb = pixels[k];
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
  }
}
     74c:	dfc00217 	ldw	ra,8(sp)
     750:	dc400117 	ldw	r17,4(sp)
     754:	dc000017 	ldw	r16,0(sp)
     758:	dec00304 	addi	sp,sp,12
     75c:	f800283a 	ret

00000760 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     760:	d0a6d017 	ldw	r2,-25792(gp)
     764:	f800283a 	ret

00000768 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     768:	d0a6cf17 	ldw	r2,-25796(gp)
     76c:	f800283a 	ret

00000770 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     770:	d0a6d117 	ldw	r2,-25788(gp)
     774:	f800283a 	ret

00000778 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     778:	00c04034 	movhi	r3,256
     77c:	18c42704 	addi	r3,r3,4252
     780:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     784:	108000cc 	andi	r2,r2,3
     788:	103ffd1e 	bne	r2,zero,780 <__alt_data_end+0xff000780>
}
     78c:	f800283a 	ret

00000790 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     790:	01004034 	movhi	r4,256
     794:	21042704 	addi	r4,r4,4252
     798:	00c04034 	movhi	r3,256
     79c:	18c42704 	addi	r3,r3,4252
     7a0:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7a4:	108000cc 	andi	r2,r2,3
     7a8:	103ffb1e 	bne	r2,zero,798 <__alt_data_end+0xff000798>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     7ac:	00800104 	movi	r2,4
     7b0:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     7b4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7b8:	108000cc 	andi	r2,r2,3
     7bc:	103ffd1e 	bne	r2,zero,7b4 <__alt_data_end+0xff0007b4>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7c0:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7c4:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7c8:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7cc:	dfc00315 	stw	ra,12(sp)
     7d0:	dc800215 	stw	r18,8(sp)
     7d4:	dc400115 	stw	r17,4(sp)
     7d8:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7dc:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     7e0:	01000074 	movhi	r4,1
     7e4:	2101bb04 	addi	r4,r4,1772
     7e8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     7ec:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     7f0:	000267c0 	call	267c <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     7f4:	04800a0e 	bge	zero,r18,820 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     7f8:	04404034 	movhi	r17,256
     7fc:	8c442404 	addi	r17,r17,4240
     800:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     804:	89800037 	ldwio	r6,0(r17)
     808:	01000074 	movhi	r4,1
     80c:	800b883a 	mov	r5,r16
     810:	2101c404 	addi	r4,r4,1808
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     814:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     818:	000267c0 	call	267c <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     81c:	943ff81e 	bne	r18,r16,800 <__alt_data_end+0xff000800>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     820:	dfc00317 	ldw	ra,12(sp)
     824:	dc800217 	ldw	r18,8(sp)
     828:	dc400117 	ldw	r17,4(sp)
     82c:	dc000017 	ldw	r16,0(sp)
     830:	dec00404 	addi	sp,sp,16
     834:	f800283a 	ret

00000838 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     838:	01804034 	movhi	r6,256
     83c:	31842704 	addi	r6,r6,4252
     840:	00c04034 	movhi	r3,256
     844:	18c42704 	addi	r3,r3,4252
     848:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     84c:	108000cc 	andi	r2,r2,3
     850:	103ffb1e 	bne	r2,zero,840 <__alt_data_end+0xff000840>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     854:	00804034 	movhi	r2,256
     858:	21003fcc 	andi	r4,r4,255
     85c:	10842404 	addi	r2,r2,4240
     860:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     864:	00804034 	movhi	r2,256
     868:	10842504 	addi	r2,r2,4244
     86c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     870:	008010c4 	movi	r2,67
     874:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     878:	180b883a 	mov	r5,r3
     87c:	00c04034 	movhi	r3,256
     880:	18c42704 	addi	r3,r3,4252
     884:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     888:	108000cc 	andi	r2,r2,3
     88c:	103ffb1e 	bne	r2,zero,87c <__alt_data_end+0xff00087c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     890:	00804034 	movhi	r2,256
     894:	21000044 	addi	r4,r4,1
     898:	10842404 	addi	r2,r2,4240
     89c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     8a0:	00800884 	movi	r2,34
     8a4:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8a8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8ac:	108000cc 	andi	r2,r2,3
     8b0:	103ffd1e 	bne	r2,zero,8a8 <__alt_data_end+0xff0008a8>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     8b4:	00804034 	movhi	r2,256
     8b8:	10842604 	addi	r2,r2,4248
}
     8bc:	10800037 	ldwio	r2,0(r2)
     8c0:	f800283a 	ret

000008c4 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8c4:	01c04034 	movhi	r7,256
     8c8:	39c42704 	addi	r7,r7,4252
     8cc:	00c04034 	movhi	r3,256
     8d0:	18c42704 	addi	r3,r3,4252
     8d4:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8d8:	108000cc 	andi	r2,r2,3
     8dc:	103ffb1e 	bne	r2,zero,8cc <__alt_data_end+0xff0008cc>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8e0:	00804034 	movhi	r2,256
     8e4:	10842404 	addi	r2,r2,4240
     8e8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     8ec:	00804034 	movhi	r2,256
     8f0:	10842504 	addi	r2,r2,4244
     8f4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     8f8:	00804034 	movhi	r2,256
     8fc:	10842604 	addi	r2,r2,4248
     900:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     904:	00801084 	movi	r2,66
     908:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     90c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     910:	108000cc 	andi	r2,r2,3
     914:	103ffd1e 	bne	r2,zero,90c <__alt_data_end+0xff00090c>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     918:	f800283a 	ret

0000091c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     91c:	00804034 	movhi	r2,256
     920:	10841804 	addi	r2,r2,4192
     924:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     928:	01000284 	movi	r4,10
     92c:	000ec741 	jmpi	ec74 <usleep>

00000930 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     930:	00804034 	movhi	r2,256
     934:	10841904 	addi	r2,r2,4196
     938:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     93c:	01000284 	movi	r4,10
     940:	000ec741 	jmpi	ec74 <usleep>

00000944 <init_LCD>:
}


void init_LCD() {
     944:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     948:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     94c:	dd400515 	stw	r21,20(sp)
     950:	dfc00815 	stw	ra,32(sp)
     954:	ddc00715 	stw	r23,28(sp)
     958:	dd800615 	stw	r22,24(sp)
     95c:	dd000415 	stw	r20,16(sp)
     960:	dcc00315 	stw	r19,12(sp)
     964:	dc800215 	stw	r18,8(sp)
     968:	dc400115 	stw	r17,4(sp)
     96c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     970:	05400084 	movi	r21,2
     974:	10841a04 	addi	r2,r2,4200
     978:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     97c:	04804034 	movhi	r18,256
     980:	94841804 	addi	r18,r18,4192
     984:	00800a04 	movi	r2,40
     988:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     98c:	04000284 	movi	r16,10
     990:	8009883a 	mov	r4,r16
     994:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     998:	05c00444 	movi	r23,17
     99c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     9a0:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9a4:	04404034 	movhi	r17,256
     9a8:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     9ac:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9b0:	0027883a 	mov	r19,zero
     9b4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9b8:	8009883a 	mov	r4,r16
     9bc:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9c0:	008032c4 	movi	r2,203
     9c4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     9c8:	8009883a 	mov	r4,r16
     9cc:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d0:	00800e44 	movi	r2,57
     9d4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9d8:	8009883a 	mov	r4,r16
     9dc:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e0:	00800b04 	movi	r2,44
     9e4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9e8:	8009883a 	mov	r4,r16
     9ec:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9f0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9f4:	8009883a 	mov	r4,r16
     9f8:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9fc:	00800d04 	movi	r2,52
     a00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a04:	8009883a 	mov	r4,r16
     a08:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a0c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     a10:	8009883a 	mov	r4,r16
     a14:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a18:	008033c4 	movi	r2,207
     a1c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a20:	8009883a 	mov	r4,r16
     a24:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a28:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a2c:	8009883a 	mov	r4,r16
     a30:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a34:	05802044 	movi	r22,129
     a38:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     a3c:	8009883a 	mov	r4,r16
     a40:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a44:	00800c04 	movi	r2,48
     a48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a4c:	8009883a 	mov	r4,r16
     a50:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a54:	00803a04 	movi	r2,232
     a58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a5c:	8009883a 	mov	r4,r16
     a60:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	00802144 	movi	r2,133
     a68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a6c:	8009883a 	mov	r4,r16
     a70:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a74:	05000044 	movi	r20,1
     a78:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     a7c:	8009883a 	mov	r4,r16
     a80:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a84:	00801e44 	movi	r2,121
     a88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a8c:	8009883a 	mov	r4,r16
     a90:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a94:	00803a84 	movi	r2,234
     a98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a9c:	8009883a 	mov	r4,r16
     aa0:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa8:	8009883a 	mov	r4,r16
     aac:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	00801904 	movi	r2,100
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	008000c4 	movi	r2,3
     ad0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
     ad8:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	00800484 	movi	r2,18
     ae0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aec:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     af0:	8009883a 	mov	r4,r16
     af4:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af8:	00803dc4 	movi	r2,247
     afc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
     b04:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b08:	00800804 	movi	r2,32
     b0c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b10:	8009883a 	mov	r4,r16
     b14:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b18:	00803004 	movi	r2,192
     b1c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	05800984 	movi	r22,38
     b2c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b38:	00800104 	movi	r2,4
     b3c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b48:	00803044 	movi	r2,193
     b4c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b50:	8009883a 	mov	r4,r16
     b54:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b58:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b64:	00803144 	movi	r2,197
     b68:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00800d44 	movi	r2,53
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b84:	00800f84 	movi	r2,62
     b88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b94:	008031c4 	movi	r2,199
     b98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	00802f84 	movi	r2,190
     ba8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb4:	00802c44 	movi	r2,177
     bb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd0:	00800404 	movi	r2,16
     bd4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     be0:	00800e84 	movi	r2,58
     be4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf0:	00801544 	movi	r2,85
     bf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c00:	00802d84 	movi	r2,182
     c04:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	00802884 	movi	r2,162
     c20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c2c:	00803c84 	movi	r2,242
     c30:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     c40:	8009883a 	mov	r4,r16
     c44:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c48:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c54:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     c58:	8009883a 	mov	r4,r16
     c5c:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c60:	00800d84 	movi	r2,54
     c64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c68:	8009883a 	mov	r4,r16
     c6c:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c70:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c7c:	00800a84 	movi	r2,42
     c80:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c8c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c9c:	8009883a 	mov	r4,r16
     ca0:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb0:	00803bc4 	movi	r2,239
     cb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000ec740 	call	ec74 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc0:	00800ac4 	movi	r2,43
     cc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000ec740 	call	ec74 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd4:	8009883a 	mov	r4,r16
     cd8:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cdc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000ec740 	call	ec74 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf4:	00800fc4 	movi	r2,63
     cf8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000ec740 	call	ec74 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     d04:	00c04034 	movhi	r3,256
     d08:	00803c04 	movi	r2,240
     d0c:	18c41d04 	addi	r3,r3,4212
     d10:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     d14:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     d18:	00805004 	movi	r2,320
     d1c:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d20:	00800a44 	movi	r2,41
     d24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     d2c:	dfc00817 	ldw	ra,32(sp)
     d30:	ddc00717 	ldw	r23,28(sp)
     d34:	dd800617 	ldw	r22,24(sp)
     d38:	dd400517 	ldw	r21,20(sp)
     d3c:	dd000417 	ldw	r20,16(sp)
     d40:	dcc00317 	ldw	r19,12(sp)
     d44:	dc800217 	ldw	r18,8(sp)
     d48:	dc400117 	ldw	r17,4(sp)
     d4c:	dc000017 	ldw	r16,0(sp)
     d50:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d54:	000ec741 	jmpi	ec74 <usleep>

00000d58 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d58:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d5c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d60:	dc000015 	stw	r16,0(sp)
     d64:	dfc00415 	stw	ra,16(sp)
     d68:	dcc00315 	stw	r19,12(sp)
     d6c:	dc800215 	stw	r18,8(sp)
     d70:	dc400115 	stw	r17,4(sp)
     d74:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d78:	10841e04 	addi	r2,r2,4216
     d7c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d80:	00804034 	movhi	r2,256
     d84:	10841804 	addi	r2,r2,4192
     d88:	00c00b04 	movi	r3,44
     d8c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d90:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d94:	01000284 	movi	r4,10
     d98:	000ec740 	call	ec74 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d9c:	90000a26 	beq	r18,zero,dc8 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da0:	04c04034 	movhi	r19,256
     da4:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     da8:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dac:	8080000b 	ldhu	r2,0(r16)
     db0:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     db4:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     db8:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     dbc:	000ec740 	call	ec74 <usleep>
     dc0:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     dc4:	8cbff91e 	bne	r17,r18,dac <__alt_data_end+0xff000dac>
		LCD_Write_Data(data_array[pixels]);
}
     dc8:	dfc00417 	ldw	ra,16(sp)
     dcc:	dcc00317 	ldw	r19,12(sp)
     dd0:	dc800217 	ldw	r18,8(sp)
     dd4:	dc400117 	ldw	r17,4(sp)
     dd8:	dc000017 	ldw	r16,0(sp)
     ddc:	dec00504 	addi	sp,sp,20
     de0:	f800283a 	ret

00000de4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     de4:	d0a6d20b 	ldhu	r2,-25784(gp)
     de8:	3080010e 	bge	r6,r2,df0 <transfer_LCD_with_dma+0xc>
     dec:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     df0:	d0e6d28b 	ldhu	r3,-25782(gp)
     df4:	28c0010e 	bge	r5,r3,dfc <transfer_LCD_with_dma+0x18>
     df8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     dfc:	01804034 	movhi	r6,256
     e00:	31841e04 	addi	r6,r6,4216
     e04:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     e08:	01404034 	movhi	r5,256
     e0c:	29441b04 	addi	r5,r5,4204
     e10:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     e14:	18ffffcc 	andi	r3,r3,65535
     e18:	10bfffcc 	andi	r2,r2,65535
     e1c:	1885383a 	mul	r2,r3,r2
     e20:	00c04034 	movhi	r3,256
     e24:	18c41c04 	addi	r3,r3,4208
     e28:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     e2c:	39c03fcc 	andi	r7,r7,255
     e30:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e34:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e38:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e3c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e40:	38000326 	beq	r7,zero,e50 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e44:	00c04404 	movi	r3,272
     e48:	10c0002d 	sthio	r3,0(r2)
     e4c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e50:	00c04004 	movi	r3,256
     e54:	10c0002d 	sthio	r3,0(r2)
     e58:	f800283a 	ret

00000e5c <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     e5c:	defff204 	addi	sp,sp,-56
     e60:	dfc00d15 	stw	ra,52(sp)
     e64:	df000c15 	stw	fp,48(sp)
     e68:	dd000815 	stw	r20,32(sp)
     e6c:	dcc00715 	stw	r19,28(sp)
     e70:	dc800615 	stw	r18,24(sp)
     e74:	dc400515 	stw	r17,20(sp)
     e78:	dc000415 	stw	r16,16(sp)
     e7c:	ddc00b15 	stw	r23,44(sp)
     e80:	dd800a15 	stw	r22,40(sp)
     e84:	dd400915 	stw	r21,36(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     e88:	00009440 	call	944 <init_LCD>
  init_camera();
     e8c:	00001d80 	call	1d8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     e90:	01000604 	movi	r4,24
     e94:	0001e080 	call	1e08 <vga_set_swap>
  printf("Hello from Nios II!\n");
     e98:	01000074 	movhi	r4,1
     e9c:	2101cd04 	addi	r4,r4,1844
     ea0:	00027780 	call	2778 <puts>
  cam_get_profiling();
     ea4:	00005380 	call	538 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ea8:	00004f00 	call	4f0 <cam_get_xsize>
     eac:	1021883a 	mov	r16,r2
     eb0:	00005140 	call	514 <cam_get_ysize>
     eb4:	10bfffcc 	andi	r2,r2,65535
     eb8:	813fffcc 	andi	r4,r16,65535
     ebc:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     ec0:	05000044 	movi	r20,1
		      case 0 : transfer_LCD_with_dma(&image[16520],
     ec4:	07204414 	movui	fp,33040
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ec8:	0001e180 	call	1e18 <malloc>
     ecc:	1027883a 	mov	r19,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ed0:	00004f00 	call	4f0 <cam_get_xsize>
     ed4:	1021883a 	mov	r16,r2
     ed8:	00005140 	call	514 <cam_get_ysize>
     edc:	10bfffcc 	andi	r2,r2,65535
     ee0:	813fffcc 	andi	r4,r16,65535
     ee4:	2089383a 	mul	r4,r4,r2
     ee8:	0001e180 	call	1e18 <malloc>
     eec:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ef0:	00004f00 	call	4f0 <cam_get_xsize>
     ef4:	1021883a 	mov	r16,r2
     ef8:	00005140 	call	514 <cam_get_ysize>
     efc:	10bfffcc 	andi	r2,r2,65535
     f00:	813fffcc 	andi	r4,r16,65535
     f04:	2089383a 	mul	r4,r4,r2
     f08:	0001e180 	call	1e18 <malloc>
     f0c:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f10:	00004f00 	call	4f0 <cam_get_xsize>
     f14:	1021883a 	mov	r16,r2
     f18:	00005140 	call	514 <cam_get_ysize>
     f1c:	10bfffcc 	andi	r2,r2,65535
     f20:	813fffcc 	andi	r4,r16,65535
     f24:	2089383a 	mul	r4,r4,r2
     f28:	0001e180 	call	1e18 <malloc>
  cam_set_image_pointer(0,buffer1);
     f2c:	980b883a 	mov	r5,r19
     f30:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f34:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     f38:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     f3c:	900b883a 	mov	r5,r18
     f40:	a009883a 	mov	r4,r20
     f44:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     f48:	880b883a 	mov	r5,r17
     f4c:	01000084 	movi	r4,2
     f50:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     f54:	800b883a 	mov	r5,r16
     f58:	010000c4 	movi	r4,3
     f5c:	00005b00 	call	5b0 <cam_set_image_pointer>
  enable_continues_mode();
     f60:	00006680 	call	668 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
     f64:	00004f00 	call	4f0 <cam_get_xsize>
     f68:	1021883a 	mov	r16,r2
     f6c:	00005140 	call	514 <cam_get_ysize>
     f70:	813fffcc 	andi	r4,r16,65535
     f74:	2508d83a 	srl	r4,r4,r20
     f78:	117fffcc 	andi	r5,r2,65535
     f7c:	00013740 	call	1374 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
     f80:	000067c0 	call	67c <new_image_available>
     f84:	10803fcc 	andi	r2,r2,255
     f88:	1080201c 	xori	r2,r2,128
     f8c:	10bfe004 	addi	r2,r2,-128
     f90:	103ffb26 	beq	r2,zero,f80 <__alt_data_end+0xff000f80>
		  if (current_image_valid()!=0) {
     f94:	00006240 	call	624 <current_image_valid>
     f98:	10bfffcc 	andi	r2,r2,65535
     f9c:	10a0001c 	xori	r2,r2,32768
     fa0:	10a00004 	addi	r2,r2,-32768
     fa4:	103ff626 	beq	r2,zero,f80 <__alt_data_end+0xff000f80>
			  current_mode = DIPSW_get_value();
     fa8:	00006a80 	call	6a8 <DIPSW_get_value>
     fac:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
     fb0:	00006380 	call	638 <current_image_pointer>
     fb4:	1023883a 	mov	r17,r2
		      switch (mode) {
     fb8:	808001cc 	andi	r2,r16,7
     fbc:	15004426 	beq	r2,r20,10d0 <main+0x274>
     fc0:	1000c526 	beq	r2,zero,12d8 <main+0x47c>
     fc4:	00c00084 	movi	r3,2
     fc8:	10c09f26 	beq	r2,r3,1248 <main+0x3ec>
     fcc:	00c000c4 	movi	r3,3
     fd0:	10c0601e 	bne	r2,r3,1154 <main+0x2f8>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
     fd4:	000f4080 	call	f408 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
     fd8:	000f4440 	call	f444 <alt_timestamp>
     fdc:	102b883a 	mov	r21,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
     fe0:	00004f00 	call	4f0 <cam_get_xsize>
     fe4:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
     fe8:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
     fec:	917fffcc 	andi	r5,r18,65535
     ff0:	280ad07a 	srli	r5,r5,1
     ff4:	11bfffcc 	andi	r6,r2,65535
     ff8:	8809883a 	mov	r4,r17
     ffc:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1000:	000f4440 	call	f444 <alt_timestamp>
    1004:	1025883a 	mov	r18,r2
		               grayscale = get_grayscale_picture();
    1008:	00007700 	call	770 <get_grayscale_picture>
    100c:	1027883a 	mov	r19,r2
		               alt_timestamp_start();
    1010:	000f4080 	call	f408 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1014:	000f4440 	call	f444 <alt_timestamp>
		               sobel_x(grayscale);
    1018:	9809883a 	mov	r4,r19
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    101c:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    1020:	00015140 	call	1514 <sobel_x>
		               end_sobel_x = alt_timestamp();
    1024:	000f4440 	call	f444 <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    1028:	9809883a 	mov	r4,r19
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    102c:	1023883a 	mov	r17,r2
		               sobel_y_with_rgb(grayscale);
    1030:	00018e80 	call	18e8 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1034:	0001de80 	call	1de8 <GetSobel_rgb>
    1038:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    103c:	00004f00 	call	4f0 <cam_get_xsize>
    1040:	1027883a 	mov	r19,r2
		      		                	cam_get_ysize(),0);
    1044:	00005140 	call	514 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1048:	997fffcc 	andi	r5,r19,65535
    104c:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1050:	84003fcc 	andi	r16,r16,255
    1054:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1058:	000f883a 	mov	r7,zero
    105c:	11bfffcc 	andi	r6,r2,65535
    1060:	b709883a 	add	r4,r22,fp
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1064:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1068:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    106c:	8000ba16 	blt	r16,zero,1358 <main+0x4fc>
    1070:	9561c83a 	sub	r16,r18,r21
    1074:	8de3c83a 	sub	r17,r17,r23
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1078:	0025883a 	mov	r18,zero
    107c:	0027883a 	mov	r19,zero
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1080:	01000074 	movhi	r4,1
    1084:	2101d204 	addi	r4,r4,1864
    1088:	00027780 	call	2778 <puts>
//		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
    108c:	01000074 	movhi	r4,1
    1090:	880b883a 	mov	r5,r17
    1094:	2101da04 	addi	r4,r4,1896
    1098:	000267c0 	call	267c <printf>
		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
    109c:	01000074 	movhi	r4,1
    10a0:	980b883a 	mov	r5,r19
    10a4:	2101e004 	addi	r4,r4,1920
    10a8:	000267c0 	call	267c <printf>
		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
    10ac:	01000074 	movhi	r4,1
    10b0:	900b883a 	mov	r5,r18
    10b4:	2101e604 	addi	r4,r4,1944
    10b8:	000267c0 	call	267c <printf>
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    10bc:	01000074 	movhi	r4,1
    10c0:	800b883a 	mov	r5,r16
    10c4:	2101ec04 	addi	r4,r4,1968
    10c8:	000267c0 	call	267c <printf>
    10cc:	003fac06 	br	f80 <__alt_data_end+0xff000f80>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    10d0:	000f4080 	call	f408 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    10d4:	000f4440 	call	f444 <alt_timestamp>
    10d8:	1027883a 	mov	r19,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    10dc:	00004f00 	call	4f0 <cam_get_xsize>
    10e0:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
    10e4:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10e8:	917fffcc 	andi	r5,r18,65535
    10ec:	280ad07a 	srli	r5,r5,1
    10f0:	8809883a 	mov	r4,r17
    10f4:	11bfffcc 	andi	r6,r2,65535
    10f8:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10fc:	000f4440 	call	f444 <alt_timestamp>
    1100:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1104:	00007700 	call	770 <get_grayscale_picture>
    1108:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    110c:	00004f00 	call	4f0 <cam_get_xsize>
    1110:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    1114:	00005140 	call	514 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1118:	917fffcc 	andi	r5,r18,65535
    111c:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1120:	84003fcc 	andi	r16,r16,255
    1124:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1128:	a00f883a 	mov	r7,r20
    112c:	11bfffcc 	andi	r6,r2,65535
    1130:	a9102204 	addi	r4,r21,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1134:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1138:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    113c:	80008b16 	blt	r16,zero,136c <main+0x510>
    1140:	8ce1c83a 	sub	r16,r17,r19
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1144:	0025883a 	mov	r18,zero
    1148:	0027883a 	mov	r19,zero
    114c:	0023883a 	mov	r17,zero
    1150:	003fcb06 	br	1080 <__alt_data_end+0xff001080>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    1154:	000f4080 	call	f408 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1158:	000f4440 	call	f444 <alt_timestamp>
    115c:	d8800015 	stw	r2,0(sp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1160:	00004f00 	call	4f0 <cam_get_xsize>
    1164:	1025883a 	mov	r18,r2
	                                  cam_get_ysize());
    1168:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    116c:	917fffcc 	andi	r5,r18,65535
    1170:	280ad07a 	srli	r5,r5,1
    1174:	11bfffcc 	andi	r6,r2,65535
    1178:	8809883a 	mov	r4,r17
    117c:	00006bc0 	call	6bc <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1180:	000f4440 	call	f444 <alt_timestamp>
    1184:	d8800115 	stw	r2,4(sp)
                       grayscale = get_grayscale_picture();
    1188:	00007700 	call	770 <get_grayscale_picture>
    118c:	1025883a 	mov	r18,r2

                       alt_timestamp_start();
    1190:	000f4080 	call	f408 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    1194:	000f4440 	call	f444 <alt_timestamp>
                       sobel_x(grayscale);
    1198:	9009883a 	mov	r4,r18
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    119c:	102f883a 	mov	r23,r2
                       sobel_x(grayscale);
    11a0:	00015140 	call	1514 <sobel_x>
//                       sobel_complete(grayscale, 128);
                       end_sobel_x = alt_timestamp();
    11a4:	000f4440 	call	f444 <alt_timestamp>
    11a8:	1023883a 	mov	r17,r2

                       alt_timestamp_start();
    11ac:	000f4080 	call	f408 <alt_timestamp_start>
                       start_sobel_y = alt_timestamp();
    11b0:	000f4440 	call	f444 <alt_timestamp>
                       sobel_y(grayscale);
    11b4:	9009883a 	mov	r4,r18
                       sobel_x(grayscale);
//                       sobel_complete(grayscale, 128);
                       end_sobel_x = alt_timestamp();

                       alt_timestamp_start();
                       start_sobel_y = alt_timestamp();
    11b8:	102d883a 	mov	r22,r2
                       sobel_y(grayscale);
    11bc:	00017d00 	call	17d0 <sobel_y>
                       end_sobel_y = alt_timestamp();
    11c0:	000f4440 	call	f444 <alt_timestamp>
    11c4:	1027883a 	mov	r19,r2

                       alt_timestamp_start();
    11c8:	000f4080 	call	f408 <alt_timestamp_start>
                       start_sobel_th = alt_timestamp();
    11cc:	000f4440 	call	f444 <alt_timestamp>
                       sobel_threshold(128);
    11d0:	01002004 	movi	r4,128
                       start_sobel_y = alt_timestamp();
                       sobel_y(grayscale);
                       end_sobel_y = alt_timestamp();

                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
    11d4:	102b883a 	mov	r21,r2
                       sobel_threshold(128);
    11d8:	0001a500 	call	1a50 <sobel_threshold>
                       end_sobel_th = alt_timestamp();
    11dc:	000f4440 	call	f444 <alt_timestamp>
    11e0:	1025883a 	mov	r18,r2

                       grayscale=GetSobelResult();
    11e4:	0001df00 	call	1df0 <GetSobelResult>
    11e8:	d8800215 	stw	r2,8(sp)
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    11ec:	00004f00 	call	4f0 <cam_get_xsize>
    11f0:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    11f4:	d8c00315 	stw	r3,12(sp)
    11f8:	00005140 	call	514 <cam_get_ysize>
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11fc:	d8c00317 	ldw	r3,12(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1200:	84003fcc 	andi	r16,r16,255
    1204:	8400201c 	xori	r16,r16,128
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1208:	197fffcc 	andi	r5,r3,65535
    120c:	d8c00217 	ldw	r3,8(sp)
    1210:	280ad07a 	srli	r5,r5,1
    1214:	01c00044 	movi	r7,1
    1218:	11bfffcc 	andi	r6,r2,65535
    121c:	19102204 	addi	r4,r3,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1220:	843fe004 	addi	r16,r16,-128
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1224:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1228:	80003d16 	blt	r16,zero,1320 <main+0x4c4>
    122c:	d8c00117 	ldw	r3,4(sp)
    1230:	d8800017 	ldw	r2,0(sp)
    1234:	8de3c83a 	sub	r17,r17,r23
    1238:	9da7c83a 	sub	r19,r19,r22
    123c:	9565c83a 	sub	r18,r18,r21
    1240:	18a1c83a 	sub	r16,r3,r2
    1244:	003f8e06 	br	1080 <__alt_data_end+0xff001080>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    1248:	000f4080 	call	f408 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    124c:	000f4440 	call	f444 <alt_timestamp>
    1250:	1027883a 	mov	r19,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1254:	00004f00 	call	4f0 <cam_get_xsize>
    1258:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
    125c:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1260:	917fffcc 	andi	r5,r18,65535
    1264:	280ad07a 	srli	r5,r5,1
    1268:	11bfffcc 	andi	r6,r2,65535
    126c:	8809883a 	mov	r4,r17
    1270:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1274:	000f4440 	call	f444 <alt_timestamp>
    1278:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    127c:	00007700 	call	770 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1280:	1009883a 	mov	r4,r2
    1284:	00016540 	call	1654 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1288:	0001de80 	call	1de8 <GetSobel_rgb>
    128c:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1290:	00004f00 	call	4f0 <cam_get_xsize>
    1294:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1298:	00005140 	call	514 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    129c:	917fffcc 	andi	r5,r18,65535
    12a0:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12a4:	84003fcc 	andi	r16,r16,255
    12a8:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    12ac:	000f883a 	mov	r7,zero
    12b0:	11bfffcc 	andi	r6,r2,65535
    12b4:	af09883a 	add	r4,r21,fp
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b8:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    12bc:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12c0:	803f9f0e 	bge	r16,zero,1140 <__alt_data_end+0xff001140>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12c4:	01000204 	movi	r4,8
    12c8:	0001e080 	call	1e08 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12cc:	a809883a 	mov	r4,r21
    12d0:	0001df80 	call	1df8 <vga_set_pointer>
    12d4:	003f9a06 	br	1140 <__alt_data_end+0xff001140>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    12d8:	00004f00 	call	4f0 <cam_get_xsize>
    12dc:	1025883a 	mov	r18,r2
		                	cam_get_ysize(),0);
    12e0:	00005140 	call	514 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12e4:	917fffcc 	andi	r5,r18,65535
    12e8:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12ec:	84003fcc 	andi	r16,r16,255
    12f0:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12f4:	000f883a 	mov	r7,zero
    12f8:	11bfffcc 	andi	r6,r2,65535
    12fc:	8f09883a 	add	r4,r17,fp
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1300:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    1304:	0000de40 	call	de4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1308:	80000a16 	blt	r16,zero,1334 <main+0x4d8>
    130c:	0021883a 	mov	r16,zero
    1310:	0025883a 	mov	r18,zero
    1314:	0027883a 	mov	r19,zero
    1318:	0023883a 	mov	r17,zero
    131c:	003f5806 	br	1080 <__alt_data_end+0xff001080>
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1320:	01000604 	movi	r4,24
    1324:	0001e080 	call	1e08 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1328:	d9000217 	ldw	r4,8(sp)
    132c:	0001df80 	call	1df8 <vga_set_pointer>
    1330:	003fbe06 	br	122c <__alt_data_end+0xff00122c>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1334:	01000204 	movi	r4,8
    1338:	0001e080 	call	1e08 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    133c:	8809883a 	mov	r4,r17
    1340:	0001df80 	call	1df8 <vga_set_pointer>
    1344:	0021883a 	mov	r16,zero
    1348:	0025883a 	mov	r18,zero
    134c:	0027883a 	mov	r19,zero
    1350:	0023883a 	mov	r17,zero
    1354:	003f4a06 	br	1080 <__alt_data_end+0xff001080>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1358:	01000204 	movi	r4,8
    135c:	0001e080 	call	1e08 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1360:	b009883a 	mov	r4,r22
    1364:	0001df80 	call	1df8 <vga_set_pointer>
    1368:	003f4106 	br	1070 <__alt_data_end+0xff001070>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    136c:	01000604 	movi	r4,24
    1370:	003fd506 	br	12c8 <__alt_data_end+0xff0012c8>

00001374 <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1374:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    1378:	defffd04 	addi	sp,sp,-12
    137c:	dc400115 	stw	r17,4(sp)
    1380:	dc000015 	stw	r16,0(sp)
    1384:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    1388:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    138c:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    1390:	2023883a 	mov	r17,r4
    1394:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1398:	10000226 	beq	r2,zero,13a4 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    139c:	1009883a 	mov	r4,r2
    13a0:	0001e2c0 	call	1e2c <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    13a4:	8c21383a 	mul	r16,r17,r16
    13a8:	8423883a 	add	r17,r16,r16
    13ac:	8809883a 	mov	r4,r17
    13b0:	0001e180 	call	1e18 <malloc>
	if (sobel_y_result != NULL)
    13b4:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    13b8:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    13bc:	20000126 	beq	r4,zero,13c4 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    13c0:	0001e2c0 	call	1e2c <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    13c4:	8809883a 	mov	r4,r17
    13c8:	0001e180 	call	1e18 <malloc>
	if (sobel_result != NULL)
    13cc:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    13d0:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    13d4:	20000126 	beq	r4,zero,13dc <init_sobel_arrays+0x68>
		alt_uncached_free(sobel_result);
    13d8:	000ec080 	call	ec08 <alt_uncached_free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    13dc:	8009883a 	mov	r4,r16
    13e0:	000ec180 	call	ec18 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    13e4:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    13e8:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    13ec:	20000126 	beq	r4,zero,13f4 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    13f0:	0001e2c0 	call	1e2c <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    13f4:	8809883a 	mov	r4,r17
    13f8:	0001e180 	call	1e18 <malloc>
    13fc:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1400:	0005883a 	mov	r2,zero
    1404:	04000f0e 	bge	zero,r16,1444 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    1408:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    140c:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    1410:	d1a6d417 	ldw	r6,-25776(gp)
    1414:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1418:	40d1883a 	add	r8,r8,r3
    141c:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1420:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    1424:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1428:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    142c:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1430:	d1a6d817 	ldw	r6,-25760(gp)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1434:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1438:	30c7883a 	add	r3,r6,r3
    143c:	1800000d 	sth	zero,0(r3)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1440:	80bff11e 	bne	r16,r2,1408 <__alt_data_end+0xff001408>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1444:	dfc00217 	ldw	ra,8(sp)
    1448:	dc400117 	ldw	r17,4(sp)
    144c:	dc000017 	ldw	r16,0(sp)
    1450:	dec00304 	addi	sp,sp,12
    1454:	f800283a 	ret

00001458 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1458:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    145c:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1460:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1464:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1468:	3b8000c7 	ldb	r14,3(r7)
    146c:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1470:	5185883a 	add	r2,r10,r6
    1474:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1478:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    147c:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1480:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1484:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1488:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    148c:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1490:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1494:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    1498:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    149c:	49000043 	ldbu	r4,1(r9)
    14a0:	3a800147 	ldb	r10,5(r7)
    14a4:	139d383a 	mul	r14,r2,r14
    14a8:	60d9383a 	mul	r12,r12,r3
    14ac:	68800003 	ldbu	r2,0(r13)
    14b0:	38c001c7 	ldb	r3,7(r7)
    14b4:	5a17383a 	mul	r11,r11,r8
    14b8:	33ffffc3 	ldbu	r15,-1(r6)
    14bc:	3a000007 	ldb	r8,0(r7)
    14c0:	2295383a 	mul	r10,r4,r10
    14c4:	31000043 	ldbu	r4,1(r6)
    14c8:	39800087 	ldb	r6,2(r7)
    14cc:	730b883a 	add	r5,r14,r12
    14d0:	10d3383a 	mul	r9,r2,r3
    14d4:	6b3fffc3 	ldbu	r12,-1(r13)
    14d8:	38c00187 	ldb	r3,6(r7)
    14dc:	2acb883a 	add	r5,r5,r11
    14e0:	7a11383a 	mul	r8,r15,r8
    14e4:	6ac00043 	ldbu	r11,1(r13)
    14e8:	39c00207 	ldb	r7,8(r7)
    14ec:	2a8b883a 	add	r5,r5,r10
    14f0:	2189383a 	mul	r4,r4,r6
    14f4:	2a45883a 	add	r2,r5,r9
    14f8:	60c7383a 	mul	r3,r12,r3
    14fc:	1205883a 	add	r2,r2,r8
    1500:	59cb383a 	mul	r5,r11,r7
    1504:	1105883a 	add	r2,r2,r4
    1508:	10c5883a 	add	r2,r2,r3
}
    150c:	1145883a 	add	r2,r2,r5
    1510:	f800283a 	ret

00001514 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1514:	defff604 	addi	sp,sp,-40
    1518:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    151c:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    1520:	dfc00915 	stw	ra,36(sp)
    1524:	df000815 	stw	fp,32(sp)
    1528:	ddc00715 	stw	r23,28(sp)
    152c:	dd800615 	stw	r22,24(sp)
    1530:	dd400515 	stw	r21,20(sp)
    1534:	dd000415 	stw	r20,16(sp)
    1538:	dcc00315 	stw	r19,12(sp)
    153c:	dc800215 	stw	r18,8(sp)
    1540:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1544:	8c7fffc4 	addi	r17,r17,-1
    1548:	00800044 	movi	r2,1
    154c:	14402e0e 	bge	r2,r17,1608 <sobel_x+0xf4>
    1550:	d366d317 	ldw	r13,-25780(gp)
    1554:	d3e6d617 	ldw	r15,-25768(gp)
    1558:	03800084 	movi	r14,2
    155c:	6b65883a 	add	r18,r13,r13
    1560:	9385883a 	add	r2,r18,r14
    1564:	2359883a 	add	r12,r4,r13
    1568:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    156c:	7027883a 	mov	r19,r14
    1570:	736bc83a 	sub	r21,r14,r13
    1574:	6ba9883a 	add	r20,r13,r14
    1578:	9b402f0e 	bge	r19,r13,1638 <sobel_x+0x124>
    157c:	637f883a 	add	ra,r12,r13
    1580:	7021883a 	mov	r16,r14
    1584:	6357c83a 	sub	r11,r12,r13
    1588:	ab0b883a 	add	r5,r21,r12
    158c:	62800084 	addi	r10,r12,2
    1590:	f813883a 	mov	r9,ra
    1594:	a311883a 	add	r8,r20,r12
    1598:	780f883a 	mov	r7,r15
    159c:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    15a0:	29000003 	ldbu	r4,0(r5)
    15a4:	40c00003 	ldbu	r3,0(r8)
    15a8:	37000003 	ldbu	fp,0(r6)
    15ac:	50800003 	ldbu	r2,0(r10)
    15b0:	20c7883a 	add	r3,r4,r3
    15b4:	5dc00003 	ldbu	r23,0(r11)
    15b8:	1f07c83a 	sub	r3,r3,fp
    15bc:	4d800003 	ldbu	r22,0(r9)
    15c0:	1f09c83a 	sub	r4,r3,fp
    15c4:	1087883a 	add	r3,r2,r2
    15c8:	20c7883a 	add	r3,r4,r3
    15cc:	1dc5c83a 	sub	r2,r3,r23
    15d0:	1585c83a 	sub	r2,r2,r22
    15d4:	3880000d 	sth	r2,0(r7)
    15d8:	29400044 	addi	r5,r5,1
    15dc:	5ac00044 	addi	r11,r11,1
    15e0:	31800044 	addi	r6,r6,1
    15e4:	52800044 	addi	r10,r10,1
    15e8:	4a400044 	addi	r9,r9,1
    15ec:	42000044 	addi	r8,r8,1
    15f0:	39c00084 	addi	r7,r7,2
void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    15f4:	617fea1e 	bne	r12,r5,15a0 <__alt_data_end+0xff0015a0>
    15f8:	73800044 	addi	r14,r14,1
    15fc:	f819883a 	mov	r12,ra
    1600:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1604:	847fdc16 	blt	r16,r17,1578 <__alt_data_end+0xff001578>
//		  result += pgx_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}
    1608:	dfc00917 	ldw	ra,36(sp)
    160c:	df000817 	ldw	fp,32(sp)
    1610:	ddc00717 	ldw	r23,28(sp)
    1614:	dd800617 	ldw	r22,24(sp)
    1618:	dd400517 	ldw	r21,20(sp)
    161c:	dd000417 	ldw	r20,16(sp)
    1620:	dcc00317 	ldw	r19,12(sp)
    1624:	dc800217 	ldw	r18,8(sp)
    1628:	dc400117 	ldw	r17,4(sp)
    162c:	dc000017 	ldw	r16,0(sp)
    1630:	dec00a04 	addi	sp,sp,40
    1634:	f800283a 	ret
    1638:	7021883a 	mov	r16,r14
    163c:	637f883a 	add	ra,r12,r13
    1640:	73800044 	addi	r14,r14,1
    1644:	f819883a 	mov	r12,ra
    1648:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    164c:	847fca16 	blt	r16,r17,1578 <__alt_data_end+0xff001578>
    1650:	003fed06 	br	1608 <__alt_data_end+0xff001608>

00001654 <sobel_x_with_rgb>:
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1654:	defff504 	addi	sp,sp,-44
    1658:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    165c:	d5a6d517 	ldw	r22,-25772(gp)
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1660:	dfc00a15 	stw	ra,40(sp)
    1664:	df000915 	stw	fp,36(sp)
    1668:	ddc00815 	stw	r23,32(sp)
    166c:	dd400615 	stw	r21,24(sp)
    1670:	dd000515 	stw	r20,20(sp)
    1674:	dcc00415 	stw	r19,16(sp)
    1678:	dc800315 	stw	r18,12(sp)
    167c:	dc400215 	stw	r17,8(sp)
    1680:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1684:	b5bfffc4 	addi	r22,r22,-1
    1688:	00800044 	movi	r2,1
    168c:	1580440e 	bge	r2,r22,17a0 <sobel_x_with_rgb+0x14c>
    1690:	d7e6d317 	ldw	ra,-25780(gp)
    1694:	d4a6d617 	ldw	r18,-25768(gp)
    1698:	d466d817 	ldw	r17,-25760(gp)
    169c:	ffe9883a 	add	r20,ra,ra
    16a0:	a0800084 	addi	r2,r20,2
    16a4:	04000084 	movi	r16,2
    16a8:	90a5883a 	add	r18,r18,r2
    16ac:	88a3883a 	add	r17,r17,r2
    16b0:	fc05883a 	add	r2,ra,r16
    16b4:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16b8:	802f883a 	mov	r23,r16
    16bc:	87f9c83a 	sub	fp,r16,ra
    16c0:	d8800015 	stw	r2,0(sp)
    16c4:	bfc02f0e 	bge	r23,ra,1784 <sobel_x_with_rgb+0x130>
    16c8:	d8800017 	ldw	r2,0(sp)
    16cc:	7fe7883a 	add	r19,r15,ra
    16d0:	802b883a 	mov	r21,r16
    16d4:	7fdbc83a 	sub	r13,r15,ra
    16d8:	e3cf883a 	add	r7,fp,r15
    16dc:	7b000084 	addi	r12,r15,2
    16e0:	9817883a 	mov	r11,r19
    16e4:	13d5883a 	add	r10,r2,r15
    16e8:	881d883a 	mov	r14,r17
    16ec:	9013883a 	mov	r9,r18
    16f0:	7811883a 	mov	r8,r15
    16f4:	00000b06 	br	1724 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16f8:	180692fa 	slli	r3,r3,11
    16fc:	70c0000d 	sth	r3,0(r14)
    1700:	39c00044 	addi	r7,r7,1
    1704:	6b400044 	addi	r13,r13,1
    1708:	42000044 	addi	r8,r8,1
    170c:	63000044 	addi	r12,r12,1
    1710:	5ac00044 	addi	r11,r11,1
    1714:	52800044 	addi	r10,r10,1
    1718:	4a400084 	addi	r9,r9,2
    171c:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1720:	79c01a26 	beq	r15,r7,178c <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1724:	50800003 	ldbu	r2,0(r10)
    1728:	39400003 	ldbu	r5,0(r7)
    172c:	41800003 	ldbu	r6,0(r8)
    1730:	60c00003 	ldbu	r3,0(r12)
    1734:	288b883a 	add	r5,r5,r2
    1738:	298bc83a 	sub	r5,r5,r6
    173c:	68800003 	ldbu	r2,0(r13)
    1740:	59000003 	ldbu	r4,0(r11)
    1744:	298bc83a 	sub	r5,r5,r6
    1748:	18c7883a 	add	r3,r3,r3
    174c:	28c7883a 	add	r3,r5,r3
    1750:	1887c83a 	sub	r3,r3,r2
    1754:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1758:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    175c:	10bfffcc 	andi	r2,r2,65535
    1760:	10a0001c 	xori	r2,r2,32768
    1764:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1768:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    176c:	103fe20e 	bge	r2,zero,16f8 <__alt_data_end+0xff0016f8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1770:	0085c83a 	sub	r2,zero,r2
    1774:	1005d0ba 	srai	r2,r2,2
    1778:	1004917a 	slli	r2,r2,5
    177c:	7080000d 	sth	r2,0(r14)
    1780:	003fdf06 	br	1700 <__alt_data_end+0xff001700>
    1784:	802b883a 	mov	r21,r16
    1788:	7fe7883a 	add	r19,r15,ra
    178c:	84000044 	addi	r16,r16,1
    1790:	981f883a 	mov	r15,r19
    1794:	9525883a 	add	r18,r18,r20
    1798:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    179c:	adbfc916 	blt	r21,r22,16c4 <__alt_data_end+0xff0016c4>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    17a0:	dfc00a17 	ldw	ra,40(sp)
    17a4:	df000917 	ldw	fp,36(sp)
    17a8:	ddc00817 	ldw	r23,32(sp)
    17ac:	dd800717 	ldw	r22,28(sp)
    17b0:	dd400617 	ldw	r21,24(sp)
    17b4:	dd000517 	ldw	r20,20(sp)
    17b8:	dcc00417 	ldw	r19,16(sp)
    17bc:	dc800317 	ldw	r18,12(sp)
    17c0:	dc400217 	ldw	r17,8(sp)
    17c4:	dc000117 	ldw	r16,4(sp)
    17c8:	dec00b04 	addi	sp,sp,44
    17cc:	f800283a 	ret

000017d0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    17d0:	defff704 	addi	sp,sp,-36
    17d4:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17d8:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    17dc:	dfc00815 	stw	ra,32(sp)
    17e0:	ddc00715 	stw	r23,28(sp)
    17e4:	dd800615 	stw	r22,24(sp)
    17e8:	dd400515 	stw	r21,20(sp)
    17ec:	dd000415 	stw	r20,16(sp)
    17f0:	dcc00315 	stw	r19,12(sp)
    17f4:	dc800215 	stw	r18,8(sp)
    17f8:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17fc:	8c7fffc4 	addi	r17,r17,-1
    1800:	00800044 	movi	r2,1
    1804:	14402d0e 	bge	r2,r17,18bc <sobel_y+0xec>
    1808:	d3e6d317 	ldw	r15,-25780(gp)
    180c:	d3a6d717 	ldw	r14,-25764(gp)
    1810:	03400084 	movi	r13,2
    1814:	7bff883a 	add	ra,r15,r15
    1818:	fb67883a 	add	r19,ra,r13
    181c:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1820:	6825883a 	mov	r18,r13
    1824:	f8a9883a 	add	r20,ra,r2
    1828:	6821883a 	mov	r16,r13
    182c:	93c01f0e 	bge	r18,r15,18ac <sobel_y+0xdc>
    1830:	27cd883a 	add	r6,r4,ra
    1834:	6821883a 	mov	r16,r13
    1838:	22c00044 	addi	r11,r4,1
    183c:	22800084 	addi	r10,r4,2
    1840:	a113883a 	add	r9,r20,r4
    1844:	990b883a 	add	r5,r19,r4
    1848:	7999883a 	add	r12,r15,r6
    184c:	7011883a 	mov	r8,r14
    1850:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1854:	3d800003 	ldbu	r22,0(r7)
    1858:	50c00003 	ldbu	r3,0(r10)
    185c:	58800003 	ldbu	r2,0(r11)
    1860:	4d400003 	ldbu	r21,0(r9)
    1864:	b0c7883a 	add	r3,r22,r3
    1868:	1085883a 	add	r2,r2,r2
    186c:	35c00003 	ldbu	r23,0(r6)
    1870:	1887883a 	add	r3,r3,r2
    1874:	2d800003 	ldbu	r22,0(r5)
    1878:	1d47c83a 	sub	r3,r3,r21
    187c:	1d47c83a 	sub	r3,r3,r21
    1880:	1dc5c83a 	sub	r2,r3,r23
    1884:	1585c83a 	sub	r2,r2,r22
    1888:	4080000d 	sth	r2,0(r8)
    188c:	29400044 	addi	r5,r5,1
    1890:	39c00044 	addi	r7,r7,1
    1894:	5ac00044 	addi	r11,r11,1
    1898:	52800044 	addi	r10,r10,1
    189c:	31800044 	addi	r6,r6,1
    18a0:	4a400044 	addi	r9,r9,1
    18a4:	42000084 	addi	r8,r8,2
void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18a8:	617fea1e 	bne	r12,r5,1854 <__alt_data_end+0xff001854>
    18ac:	6b400044 	addi	r13,r13,1
    18b0:	23c9883a 	add	r4,r4,r15
    18b4:	77dd883a 	add	r14,r14,ra

void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18b8:	847fdb16 	blt	r16,r17,1828 <__alt_data_end+0xff001828>
//		  result += pgy_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}
    18bc:	dfc00817 	ldw	ra,32(sp)
    18c0:	ddc00717 	ldw	r23,28(sp)
    18c4:	dd800617 	ldw	r22,24(sp)
    18c8:	dd400517 	ldw	r21,20(sp)
    18cc:	dd000417 	ldw	r20,16(sp)
    18d0:	dcc00317 	ldw	r19,12(sp)
    18d4:	dc800217 	ldw	r18,8(sp)
    18d8:	dc400117 	ldw	r17,4(sp)
    18dc:	dc000017 	ldw	r16,0(sp)
    18e0:	dec00904 	addi	sp,sp,36
    18e4:	f800283a 	ret

000018e8 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    18e8:	defff604 	addi	sp,sp,-40
    18ec:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18f0:	d4e6d517 	ldw	r19,-25772(gp)
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    18f4:	dfc00915 	stw	ra,36(sp)
    18f8:	df000815 	stw	fp,32(sp)
    18fc:	ddc00715 	stw	r23,28(sp)
    1900:	dd800615 	stw	r22,24(sp)
    1904:	dd400515 	stw	r21,20(sp)
    1908:	dd000415 	stw	r20,16(sp)
    190c:	dc800215 	stw	r18,8(sp)
    1910:	dc400115 	stw	r17,4(sp)
    1914:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1918:	9cffffc4 	addi	r19,r19,-1
    191c:	00800044 	movi	r2,1
    1920:	14c03f0e 	bge	r2,r19,1a20 <sobel_y_with_rgb+0x138>
    1924:	d466d317 	ldw	r17,-25780(gp)
    1928:	d426d717 	ldw	r16,-25764(gp)
    192c:	d7e6d817 	ldw	ra,-25760(gp)
    1930:	8c5d883a 	add	r14,r17,r17
    1934:	75000084 	addi	r20,r14,2
    1938:	03c00084 	movi	r15,2
    193c:	8521883a 	add	r16,r16,r20
    1940:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1944:	782b883a 	mov	r21,r15
    1948:	70ad883a 	add	r22,r14,r2
    194c:	7825883a 	mov	r18,r15
    1950:	ac402e0e 	bge	r21,r17,1a0c <sobel_y_with_rgb+0x124>
    1954:	238d883a 	add	r6,r4,r14
    1958:	7825883a 	mov	r18,r15
    195c:	22c00044 	addi	r11,r4,1
    1960:	22800084 	addi	r10,r4,2
    1964:	b113883a 	add	r9,r22,r4
    1968:	a10b883a 	add	r5,r20,r4
    196c:	899b883a 	add	r13,r17,r6
    1970:	f819883a 	mov	r12,ra
    1974:	8011883a 	mov	r8,r16
    1978:	200f883a 	mov	r7,r4
    197c:	00000b06 	br	19ac <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1980:	180692fa 	slli	r3,r3,11
    1984:	60c0000d 	sth	r3,0(r12)
    1988:	29400044 	addi	r5,r5,1
    198c:	39c00044 	addi	r7,r7,1
    1990:	5ac00044 	addi	r11,r11,1
    1994:	52800044 	addi	r10,r10,1
    1998:	31800044 	addi	r6,r6,1
    199c:	4a400044 	addi	r9,r9,1
    19a0:	42000084 	addi	r8,r8,2
    19a4:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    19a8:	69401826 	beq	r13,r5,1a0c <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    19ac:	50800003 	ldbu	r2,0(r10)
    19b0:	3f000003 	ldbu	fp,0(r7)
    19b4:	58c00003 	ldbu	r3,0(r11)
    19b8:	4dc00003 	ldbu	r23,0(r9)
    19bc:	e0b9883a 	add	fp,fp,r2
    19c0:	18c7883a 	add	r3,r3,r3
    19c4:	30800003 	ldbu	r2,0(r6)
    19c8:	e0c7883a 	add	r3,fp,r3
    19cc:	1dc7c83a 	sub	r3,r3,r23
    19d0:	2f000003 	ldbu	fp,0(r5)
    19d4:	1dc7c83a 	sub	r3,r3,r23
    19d8:	1885c83a 	sub	r2,r3,r2
    19dc:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    19e0:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    19e4:	10bfffcc 	andi	r2,r2,65535
    19e8:	10a0001c 	xori	r2,r2,32768
    19ec:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    19f0:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    19f4:	103fe20e 	bge	r2,zero,1980 <__alt_data_end+0xff001980>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    19f8:	0085c83a 	sub	r2,zero,r2
    19fc:	1005d0ba 	srai	r2,r2,2
    1a00:	1004917a 	slli	r2,r2,5
    1a04:	6080000d 	sth	r2,0(r12)
    1a08:	003fdf06 	br	1988 <__alt_data_end+0xff001988>
    1a0c:	7bc00044 	addi	r15,r15,1
    1a10:	2449883a 	add	r4,r4,r17
    1a14:	83a1883a 	add	r16,r16,r14
    1a18:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a1c:	94ffcb16 	blt	r18,r19,194c <__alt_data_end+0xff00194c>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1a20:	dfc00917 	ldw	ra,36(sp)
    1a24:	df000817 	ldw	fp,32(sp)
    1a28:	ddc00717 	ldw	r23,28(sp)
    1a2c:	dd800617 	ldw	r22,24(sp)
    1a30:	dd400517 	ldw	r21,20(sp)
    1a34:	dd000417 	ldw	r20,16(sp)
    1a38:	dcc00317 	ldw	r19,12(sp)
    1a3c:	dc800217 	ldw	r18,8(sp)
    1a40:	dc400117 	ldw	r17,4(sp)
    1a44:	dc000017 	ldw	r16,0(sp)
    1a48:	dec00a04 	addi	sp,sp,40
    1a4c:	f800283a 	ret

00001a50 <sobel_threshold>:

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a50:	d0a6d317 	ldw	r2,-25780(gp)
    1a54:	d2a6d517 	ldw	r10,-25772(gp)
	for(k = 1; k<kmax; k++)
    1a58:	01800044 	movi	r6,1
}

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a5c:	5095383a 	mul	r10,r10,r2
	for(k = 1; k<kmax; k++)
    1a60:	3280210e 	bge	r6,r10,1ae8 <sobel_threshold+0x98>
    1a64:	213fffcc 	andi	r4,r4,65535
    1a68:	2120001c 	xori	r4,r4,32768
    1a6c:	21200004 	addi	r4,r4,-32768
	{
		value = sobel_x_result[k];
    1a70:	d166d617 	ldw	r5,-25768(gp)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a74:	d0e6d717 	ldw	r3,-25764(gp)
    1a78:	3185883a 	add	r2,r6,r6
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1a7c:	288b883a 	add	r5,r5,r2
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a80:	1887883a 	add	r3,r3,r2
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1a84:	2880000b 	ldhu	r2,0(r5)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a88:	1940000b 	ldhu	r5,0(r3)
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a8c:	d266d417 	ldw	r9,-25776(gp)
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a90:	11ffffcc 	andi	r7,r2,65535
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a94:	2a3fffcc 	andi	r8,r5,65535
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a98:	39e0001c 	xori	r7,r7,32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a9c:	4220001c 	xori	r8,r8,32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1aa0:	39e00004 	addi	r7,r7,-32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1aa4:	42200004 	addi	r8,r8,-32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1aa8:	380fd7fa 	srai	r7,r7,31
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1aac:	4011d7fa 	srai	r8,r8,31
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1ab0:	4993883a 	add	r9,r9,r6
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ab4:	3887883a 	add	r3,r7,r2
    1ab8:	414b883a 	add	r5,r8,r5
    1abc:	414af03a 	xor	r5,r8,r5
    1ac0:	38c4f03a 	xor	r2,r7,r3
    1ac4:	2885883a 	add	r2,r5,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1ac8:	10bfffcc 	andi	r2,r2,65535
    1acc:	10a0001c 	xori	r2,r2,32768
    1ad0:	10a00004 	addi	r2,r2,-32768
    1ad4:	2084803a 	cmplt	r2,r4,r2
    1ad8:	0085c83a 	sub	r2,zero,r2
    1adc:	48800005 	stb	r2,0(r9)

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
    1ae0:	31800044 	addi	r6,r6,1
    1ae4:	51bfe21e 	bne	r10,r6,1a70 <__alt_data_end+0xff001a70>
    1ae8:	f800283a 	ret

00001aec <sobel_complete>:
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1aec:	d0e6d517 	ldw	r3,-25772(gp)
    1af0:	00800084 	movi	r2,2
    1af4:	10c0b60e 	bge	r2,r3,1dd0 <sobel_complete+0x2e4>
    1af8:	297fffcc 	andi	r5,r5,65535
    1afc:	2960001c 	xori	r5,r5,32768
    1b00:	d3a6d317 	ldw	r14,-25780(gp)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1b04:	defff004 	addi	sp,sp,-64
    1b08:	29600004 	addi	r5,r5,-32768
    1b0c:	dfc00f15 	stw	ra,60(sp)
    1b10:	df000e15 	stw	fp,56(sp)
    1b14:	ddc00d15 	stw	r23,52(sp)
    1b18:	dd800c15 	stw	r22,48(sp)
    1b1c:	dd400b15 	stw	r21,44(sp)
    1b20:	dd000a15 	stw	r20,40(sp)
    1b24:	dcc00915 	stw	r19,36(sp)
    1b28:	dc800815 	stw	r18,32(sp)
    1b2c:	dc400715 	stw	r17,28(sp)
    1b30:	dc000615 	stw	r16,24(sp)
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b34:	d8800115 	stw	r2,4(sp)
    1b38:	d9400415 	stw	r5,16(sp)
    1b3c:	203f883a 	mov	ra,r4
    1b40:	da400117 	ldw	r9,4(sp)
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b44:	02c00084 	movi	r11,2
    1b48:	4a7fffc4 	addi	r9,r9,-1
    1b4c:	da400215 	stw	r9,8(sp)
    1b50:	5b80a00e 	bge	r11,r14,1dd4 <sobel_complete+0x2e8>
    1b54:	d8c00117 	ldw	r3,4(sp)
    1b58:	d9000117 	ldw	r4,4(sp)
    1b5c:	18ffff84 	addi	r3,r3,-2
    1b60:	d8c00315 	stw	r3,12(sp)
    1b64:	00c00044 	movi	r3,1
    1b68:	d9000515 	stw	r4,20(sp)
    1b6c:	1805883a 	mov	r2,r3
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b70:	d8c00317 	ldw	r3,12(sp)
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;
    1b74:	d9000217 	ldw	r4,8(sp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1b78:	d9800117 	ldw	r6,4(sp)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b7c:	70cb383a 	mul	r5,r14,r3
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;
    1b80:	7107383a 	mul	r3,r14,r4

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1b84:	13400044 	addi	r13,r2,1
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b88:	d1200117 	ldw	r4,-32764(gp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    1b8c:	28a5883a 	add	r18,r5,r2
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1b90:	2b63883a 	add	r17,r5,r13
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1b94:	719d383a 	mul	r14,r14,r6
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    1b98:	fca5883a 	add	r18,ra,r18
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
    1b9c:	188d883a 	add	r6,r3,r2
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1ba0:	fc63883a 	add	r17,ra,r17
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1ba4:	25400047 	ldb	r21,1(r4)
    1ba8:	8a400003 	ldbu	r9,0(r17)
    1bac:	94c00003 	ldbu	r19,0(r18)
    1bb0:	23000087 	ldb	r12,2(r4)
	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
    1bb4:	f9a9883a 	add	r20,ra,r6
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bb8:	a2000003 	ldbu	r8,0(r20)
    1bbc:	22c00107 	ldb	r11,4(r4)
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    1bc0:	1b4f883a 	add	r7,r3,r13
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bc4:	ace7383a 	mul	r19,r21,r19
    1bc8:	6259383a 	mul	r12,r12,r9
    1bcc:	22400207 	ldb	r9,8(r4)
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    1bd0:	f9ed883a 	add	r22,ra,r7
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    1bd4:	70a1883a 	add	r16,r14,r2
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bd8:	5a17383a 	mul	r11,r11,r8
    1bdc:	b1c00003 	ldbu	r7,0(r22)
    1be0:	27000147 	ldb	fp,5(r4)
    1be4:	10bfffc4 	addi	r2,r2,-1
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    1be8:	fc21883a 	add	r16,ra,r16
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    1bec:	6b9f883a 	add	r15,r13,r14
	   sobel_x_result[arrayindex] = result;
    1bf0:	25c001c7 	ldb	r23,7(r4)
    1bf4:	82800003 	ldbu	r10,0(r16)
    1bf8:	da40000d 	sth	r9,0(sp)
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    1bfc:	fbdf883a 	add	r15,ra,r15
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1c00:	288b883a 	add	r5,r5,r2
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1c04:	9b19883a 	add	r12,r19,r12
    1c08:	7a400003 	ldbu	r9,0(r15)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1c0c:	f94b883a 	add	r5,ra,r5
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    1c10:	1887883a 	add	r3,r3,r2
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1c14:	62d9883a 	add	r12,r12,r11
    1c18:	dac0000b 	ldhu	r11,0(sp)
    1c1c:	25400007 	ldb	r21,0(r4)
    1c20:	2a000003 	ldbu	r8,0(r5)

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    1c24:	f8c7883a 	add	r3,ra,r3
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1c28:	e1f9383a 	mul	fp,fp,r7
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1c2c:	7085883a 	add	r2,r14,r2
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1c30:	19c00003 	ldbu	r7,0(r3)
    1c34:	238000c7 	ldb	r14,3(r4)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1c38:	f885883a 	add	r2,ra,r2
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1c3c:	ba95383a 	mul	r10,r23,r10
    1c40:	24c00187 	ldb	r19,6(r4)
    1c44:	5a53383a 	mul	r9,r11,r9
    1c48:	11000003 	ldbu	r4,0(r2)
    1c4c:	6719883a 	add	r12,r12,fp
    1c50:	aa11383a 	mul	r8,r21,r8
    1c54:	6299883a 	add	r12,r12,r10
    1c58:	71dd383a 	mul	r14,r14,r7
    1c5c:	6253883a 	add	r9,r12,r9
    1c60:	9927383a 	mul	r19,r19,r4
    1c64:	d5e6d617 	ldw	r23,-25768(gp)
    1c68:	4a11883a 	add	r8,r9,r8
	   result = 0;

	   // sobel_y in-lining
	   result += pgy_array[0] * source[(y-1)*sobel_width+(x-1)];
    1c6c:	d2e00017 	ldw	r11,-32768(gp)
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1c70:	31b9883a 	add	fp,r6,r6
    1c74:	4389883a 	add	r4,r8,r14
    1c78:	bf2f883a 	add	r23,r23,fp
    1c7c:	24c9883a 	add	r4,r4,r19
    1c80:	b900000d 	sth	r4,0(r23)
	   result += pgy_array[3] * source[y*sobel_width+(x-1)];
	   result += pgy_array[4] * source[y*sobel_width+x];
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
    1c84:	5a800047 	ldb	r10,1(r11)
    1c88:	92400003 	ldbu	r9,0(r18)
    1c8c:	5b000087 	ldb	r12,2(r11)
    1c90:	8a000003 	ldbu	r8,0(r17)
    1c94:	5b800107 	ldb	r14,4(r11)
    1c98:	a1c00003 	ldbu	r7,0(r20)
    1c9c:	b1000003 	ldbu	r4,0(r22)
    1ca0:	5c400147 	ldb	r17,5(r11)
    1ca4:	5c8001c7 	ldb	r18,7(r11)
    1ca8:	84000003 	ldbu	r16,0(r16)
    1cac:	5253383a 	mul	r9,r10,r9
    1cb0:	6211383a 	mul	r8,r12,r8
    1cb4:	5cc00207 	ldb	r19,8(r11)
    1cb8:	7bc00003 	ldbu	r15,0(r15)
    1cbc:	71cf383a 	mul	r7,r14,r7
    1cc0:	5d000007 	ldb	r20,0(r11)
    1cc4:	2d400003 	ldbu	r21,0(r5)
    1cc8:	8923383a 	mul	r17,r17,r4
    1ccc:	594000c7 	ldb	r5,3(r11)
    1cd0:	1d800003 	ldbu	r22,0(r3)
    1cd4:	4a13883a 	add	r9,r9,r8
    1cd8:	9425383a 	mul	r18,r18,r16
    1cdc:	11000003 	ldbu	r4,0(r2)
    1ce0:	5ac00187 	ldb	r11,6(r11)
    1ce4:	49d3883a 	add	r9,r9,r7
    1ce8:	9bdf383a 	mul	r15,r19,r15
    1cec:	4c47883a 	add	r3,r9,r17
    1cf0:	a569383a 	mul	r20,r20,r21
    1cf4:	2d8b383a 	mul	r5,r5,r22
    1cf8:	1c87883a 	add	r3,r3,r18
	   sobel_y_result[arrayindex] = result;
    1cfc:	d0a6d717 	ldw	r2,-25764(gp)
	   result += pgy_array[3] * source[y*sobel_width+(x-1)];
	   result += pgy_array[4] * source[y*sobel_width+x];
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
    1d00:	5909383a 	mul	r4,r11,r4
    1d04:	1bc7883a 	add	r3,r3,r15
    1d08:	1d07883a 	add	r3,r3,r20
    1d0c:	1947883a 	add	r3,r3,r5
    1d10:	1907883a 	add	r3,r3,r4
	   sobel_y_result[arrayindex] = result;
    1d14:	1739883a 	add	fp,r2,fp
    1d18:	e0c0000d 	sth	r3,0(fp)
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
    1d1c:	b880000b 	ldhu	r2,0(r23)
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1d20:	193fffcc 	andi	r4,r3,65535
    1d24:	2120001c 	xori	r4,r4,32768
	   sobel_y_result[arrayindex] = result;
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1d28:	117fffcc 	andi	r5,r2,65535
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1d2c:	21200004 	addi	r4,r4,-32768
	   sobel_y_result[arrayindex] = result;
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1d30:	2960001c 	xori	r5,r5,32768
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1d34:	2009d7fa 	srai	r4,r4,31
	   sobel_y_result[arrayindex] = result;
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1d38:	29600004 	addi	r5,r5,-32768
    1d3c:	280bd7fa 	srai	r5,r5,31
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1d40:	1907883a 	add	r3,r3,r4
    1d44:	20c8f03a 	xor	r4,r4,r3
    1d48:	2887883a 	add	r3,r5,r2
    1d4c:	28c4f03a 	xor	r2,r5,r3
    1d50:	2085883a 	add	r2,r4,r2
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1d54:	d8c00417 	ldw	r3,16(sp)
    1d58:	10bfffcc 	andi	r2,r2,65535
    1d5c:	10a0001c 	xori	r2,r2,32768
    1d60:	10a00004 	addi	r2,r2,-32768
    1d64:	1884803a 	cmplt	r2,r3,r2
    1d68:	d0e6d417 	ldw	r3,-25776(gp)
    1d6c:	0085c83a 	sub	r2,zero,r2
    1d70:	198d883a 	add	r6,r3,r6
    1d74:	30800005 	stb	r2,0(r6)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d78:	d3a6d317 	ldw	r14,-25780(gp)
    1d7c:	6805883a 	mov	r2,r13
    1d80:	70ffffc4 	addi	r3,r14,-1
    1d84:	68ff7a16 	blt	r13,r3,1b70 <__alt_data_end+0xff001b70>
    1d88:	d0e6d517 	ldw	r3,-25772(gp)
    1d8c:	d9000117 	ldw	r4,4(sp)
    1d90:	d9800517 	ldw	r6,20(sp)
    1d94:	21000044 	addi	r4,r4,1
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d98:	18bfffc4 	addi	r2,r3,-1
    1d9c:	d9000115 	stw	r4,4(sp)
    1da0:	30bf6716 	blt	r6,r2,1b40 <__alt_data_end+0xff001b40>
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
	 }
   }
}
    1da4:	dfc00f17 	ldw	ra,60(sp)
    1da8:	df000e17 	ldw	fp,56(sp)
    1dac:	ddc00d17 	ldw	r23,52(sp)
    1db0:	dd800c17 	ldw	r22,48(sp)
    1db4:	dd400b17 	ldw	r21,44(sp)
    1db8:	dd000a17 	ldw	r20,40(sp)
    1dbc:	dcc00917 	ldw	r19,36(sp)
    1dc0:	dc800817 	ldw	r18,32(sp)
    1dc4:	dc400717 	ldw	r17,28(sp)
    1dc8:	dc000617 	ldw	r16,24(sp)
    1dcc:	dec01004 	addi	sp,sp,64
    1dd0:	f800283a 	ret
    1dd4:	d8800117 	ldw	r2,4(sp)
    1dd8:	d8800515 	stw	r2,20(sp)
    1ddc:	1009883a 	mov	r4,r2
    1de0:	100d883a 	mov	r6,r2
    1de4:	003feb06 	br	1d94 <__alt_data_end+0xff001d94>

00001de8 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1de8:	d0a6d817 	ldw	r2,-25760(gp)
    1dec:	f800283a 	ret

00001df0 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1df0:	d0a6d417 	ldw	r2,-25776(gp)
    1df4:	f800283a 	ret

00001df8 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1df8:	00804034 	movhi	r2,256
    1dfc:	10843404 	addi	r2,r2,4304
    1e00:	11000035 	stwio	r4,0(r2)
    1e04:	f800283a 	ret

00001e08 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1e08:	00804034 	movhi	r2,256
    1e0c:	10843504 	addi	r2,r2,4308
    1e10:	11000025 	stbio	r4,0(r2)
    1e14:	f800283a 	ret

00001e18 <malloc>:
    1e18:	00800074 	movhi	r2,1
    1e1c:	10896104 	addi	r2,r2,9604
    1e20:	200b883a 	mov	r5,r4
    1e24:	11000017 	ldw	r4,0(r2)
    1e28:	0001e401 	jmpi	1e40 <_malloc_r>

00001e2c <free>:
    1e2c:	00800074 	movhi	r2,1
    1e30:	10896104 	addi	r2,r2,9604
    1e34:	200b883a 	mov	r5,r4
    1e38:	11000017 	ldw	r4,0(r2)
    1e3c:	0006c901 	jmpi	6c90 <_free_r>

00001e40 <_malloc_r>:
    1e40:	defff504 	addi	sp,sp,-44
    1e44:	dc800315 	stw	r18,12(sp)
    1e48:	dfc00a15 	stw	ra,40(sp)
    1e4c:	df000915 	stw	fp,36(sp)
    1e50:	ddc00815 	stw	r23,32(sp)
    1e54:	dd800715 	stw	r22,28(sp)
    1e58:	dd400615 	stw	r21,24(sp)
    1e5c:	dd000515 	stw	r20,20(sp)
    1e60:	dcc00415 	stw	r19,16(sp)
    1e64:	dc400215 	stw	r17,8(sp)
    1e68:	dc000115 	stw	r16,4(sp)
    1e6c:	288002c4 	addi	r2,r5,11
    1e70:	00c00584 	movi	r3,22
    1e74:	2025883a 	mov	r18,r4
    1e78:	18807f2e 	bgeu	r3,r2,2078 <_malloc_r+0x238>
    1e7c:	047ffe04 	movi	r17,-8
    1e80:	1462703a 	and	r17,r2,r17
    1e84:	8800a316 	blt	r17,zero,2114 <_malloc_r+0x2d4>
    1e88:	8940a236 	bltu	r17,r5,2114 <_malloc_r+0x2d4>
    1e8c:	000eac80 	call	eac8 <__malloc_lock>
    1e90:	00807dc4 	movi	r2,503
    1e94:	1441e92e 	bgeu	r2,r17,263c <_malloc_r+0x7fc>
    1e98:	8804d27a 	srli	r2,r17,9
    1e9c:	1000a126 	beq	r2,zero,2124 <_malloc_r+0x2e4>
    1ea0:	00c00104 	movi	r3,4
    1ea4:	18811e36 	bltu	r3,r2,2320 <_malloc_r+0x4e0>
    1ea8:	8804d1ba 	srli	r2,r17,6
    1eac:	12000e44 	addi	r8,r2,57
    1eb0:	11c00e04 	addi	r7,r2,56
    1eb4:	4209883a 	add	r4,r8,r8
    1eb8:	04c00074 	movhi	r19,1
    1ebc:	2109883a 	add	r4,r4,r4
    1ec0:	9cc2b104 	addi	r19,r19,2756
    1ec4:	2109883a 	add	r4,r4,r4
    1ec8:	9909883a 	add	r4,r19,r4
    1ecc:	24000117 	ldw	r16,4(r4)
    1ed0:	213ffe04 	addi	r4,r4,-8
    1ed4:	24009726 	beq	r4,r16,2134 <_malloc_r+0x2f4>
    1ed8:	80800117 	ldw	r2,4(r16)
    1edc:	01bfff04 	movi	r6,-4
    1ee0:	014003c4 	movi	r5,15
    1ee4:	1184703a 	and	r2,r2,r6
    1ee8:	1447c83a 	sub	r3,r2,r17
    1eec:	28c00716 	blt	r5,r3,1f0c <_malloc_r+0xcc>
    1ef0:	1800920e 	bge	r3,zero,213c <_malloc_r+0x2fc>
    1ef4:	84000317 	ldw	r16,12(r16)
    1ef8:	24008e26 	beq	r4,r16,2134 <_malloc_r+0x2f4>
    1efc:	80800117 	ldw	r2,4(r16)
    1f00:	1184703a 	and	r2,r2,r6
    1f04:	1447c83a 	sub	r3,r2,r17
    1f08:	28fff90e 	bge	r5,r3,1ef0 <__alt_data_end+0xff001ef0>
    1f0c:	3809883a 	mov	r4,r7
    1f10:	01800074 	movhi	r6,1
    1f14:	9c000417 	ldw	r16,16(r19)
    1f18:	3182b104 	addi	r6,r6,2756
    1f1c:	32000204 	addi	r8,r6,8
    1f20:	82013426 	beq	r16,r8,23f4 <_malloc_r+0x5b4>
    1f24:	80c00117 	ldw	r3,4(r16)
    1f28:	00bfff04 	movi	r2,-4
    1f2c:	188e703a 	and	r7,r3,r2
    1f30:	3c45c83a 	sub	r2,r7,r17
    1f34:	00c003c4 	movi	r3,15
    1f38:	18811f16 	blt	r3,r2,23b8 <_malloc_r+0x578>
    1f3c:	32000515 	stw	r8,20(r6)
    1f40:	32000415 	stw	r8,16(r6)
    1f44:	10007f0e 	bge	r2,zero,2144 <_malloc_r+0x304>
    1f48:	00807fc4 	movi	r2,511
    1f4c:	11c0fd36 	bltu	r2,r7,2344 <_malloc_r+0x504>
    1f50:	3806d0fa 	srli	r3,r7,3
    1f54:	01c00044 	movi	r7,1
    1f58:	30800117 	ldw	r2,4(r6)
    1f5c:	19400044 	addi	r5,r3,1
    1f60:	294b883a 	add	r5,r5,r5
    1f64:	1807d0ba 	srai	r3,r3,2
    1f68:	294b883a 	add	r5,r5,r5
    1f6c:	294b883a 	add	r5,r5,r5
    1f70:	298b883a 	add	r5,r5,r6
    1f74:	38c6983a 	sll	r3,r7,r3
    1f78:	29c00017 	ldw	r7,0(r5)
    1f7c:	2a7ffe04 	addi	r9,r5,-8
    1f80:	1886b03a 	or	r3,r3,r2
    1f84:	82400315 	stw	r9,12(r16)
    1f88:	81c00215 	stw	r7,8(r16)
    1f8c:	30c00115 	stw	r3,4(r6)
    1f90:	2c000015 	stw	r16,0(r5)
    1f94:	3c000315 	stw	r16,12(r7)
    1f98:	2005d0ba 	srai	r2,r4,2
    1f9c:	01400044 	movi	r5,1
    1fa0:	288a983a 	sll	r5,r5,r2
    1fa4:	19406f36 	bltu	r3,r5,2164 <_malloc_r+0x324>
    1fa8:	28c4703a 	and	r2,r5,r3
    1fac:	10000a1e 	bne	r2,zero,1fd8 <_malloc_r+0x198>
    1fb0:	00bfff04 	movi	r2,-4
    1fb4:	294b883a 	add	r5,r5,r5
    1fb8:	2088703a 	and	r4,r4,r2
    1fbc:	28c4703a 	and	r2,r5,r3
    1fc0:	21000104 	addi	r4,r4,4
    1fc4:	1000041e 	bne	r2,zero,1fd8 <_malloc_r+0x198>
    1fc8:	294b883a 	add	r5,r5,r5
    1fcc:	28c4703a 	and	r2,r5,r3
    1fd0:	21000104 	addi	r4,r4,4
    1fd4:	103ffc26 	beq	r2,zero,1fc8 <__alt_data_end+0xff001fc8>
    1fd8:	02bfff04 	movi	r10,-4
    1fdc:	024003c4 	movi	r9,15
    1fe0:	21800044 	addi	r6,r4,1
    1fe4:	318d883a 	add	r6,r6,r6
    1fe8:	318d883a 	add	r6,r6,r6
    1fec:	318d883a 	add	r6,r6,r6
    1ff0:	998d883a 	add	r6,r19,r6
    1ff4:	333ffe04 	addi	r12,r6,-8
    1ff8:	2017883a 	mov	r11,r4
    1ffc:	31800104 	addi	r6,r6,4
    2000:	34000017 	ldw	r16,0(r6)
    2004:	31fffd04 	addi	r7,r6,-12
    2008:	81c0041e 	bne	r16,r7,201c <_malloc_r+0x1dc>
    200c:	0000fb06 	br	23fc <_malloc_r+0x5bc>
    2010:	1801030e 	bge	r3,zero,2420 <_malloc_r+0x5e0>
    2014:	84000317 	ldw	r16,12(r16)
    2018:	81c0f826 	beq	r16,r7,23fc <_malloc_r+0x5bc>
    201c:	80800117 	ldw	r2,4(r16)
    2020:	1284703a 	and	r2,r2,r10
    2024:	1447c83a 	sub	r3,r2,r17
    2028:	48fff90e 	bge	r9,r3,2010 <__alt_data_end+0xff002010>
    202c:	80800317 	ldw	r2,12(r16)
    2030:	81000217 	ldw	r4,8(r16)
    2034:	89400054 	ori	r5,r17,1
    2038:	81400115 	stw	r5,4(r16)
    203c:	20800315 	stw	r2,12(r4)
    2040:	11000215 	stw	r4,8(r2)
    2044:	8463883a 	add	r17,r16,r17
    2048:	9c400515 	stw	r17,20(r19)
    204c:	9c400415 	stw	r17,16(r19)
    2050:	18800054 	ori	r2,r3,1
    2054:	88800115 	stw	r2,4(r17)
    2058:	8a000315 	stw	r8,12(r17)
    205c:	8a000215 	stw	r8,8(r17)
    2060:	88e3883a 	add	r17,r17,r3
    2064:	88c00015 	stw	r3,0(r17)
    2068:	9009883a 	mov	r4,r18
    206c:	000eacc0 	call	eacc <__malloc_unlock>
    2070:	80800204 	addi	r2,r16,8
    2074:	00001b06 	br	20e4 <_malloc_r+0x2a4>
    2078:	04400404 	movi	r17,16
    207c:	89402536 	bltu	r17,r5,2114 <_malloc_r+0x2d4>
    2080:	000eac80 	call	eac8 <__malloc_lock>
    2084:	00800184 	movi	r2,6
    2088:	01000084 	movi	r4,2
    208c:	04c00074 	movhi	r19,1
    2090:	1085883a 	add	r2,r2,r2
    2094:	9cc2b104 	addi	r19,r19,2756
    2098:	1085883a 	add	r2,r2,r2
    209c:	9885883a 	add	r2,r19,r2
    20a0:	14000117 	ldw	r16,4(r2)
    20a4:	10fffe04 	addi	r3,r2,-8
    20a8:	80c0d926 	beq	r16,r3,2410 <_malloc_r+0x5d0>
    20ac:	80c00117 	ldw	r3,4(r16)
    20b0:	81000317 	ldw	r4,12(r16)
    20b4:	00bfff04 	movi	r2,-4
    20b8:	1884703a 	and	r2,r3,r2
    20bc:	81400217 	ldw	r5,8(r16)
    20c0:	8085883a 	add	r2,r16,r2
    20c4:	10c00117 	ldw	r3,4(r2)
    20c8:	29000315 	stw	r4,12(r5)
    20cc:	21400215 	stw	r5,8(r4)
    20d0:	18c00054 	ori	r3,r3,1
    20d4:	10c00115 	stw	r3,4(r2)
    20d8:	9009883a 	mov	r4,r18
    20dc:	000eacc0 	call	eacc <__malloc_unlock>
    20e0:	80800204 	addi	r2,r16,8
    20e4:	dfc00a17 	ldw	ra,40(sp)
    20e8:	df000917 	ldw	fp,36(sp)
    20ec:	ddc00817 	ldw	r23,32(sp)
    20f0:	dd800717 	ldw	r22,28(sp)
    20f4:	dd400617 	ldw	r21,24(sp)
    20f8:	dd000517 	ldw	r20,20(sp)
    20fc:	dcc00417 	ldw	r19,16(sp)
    2100:	dc800317 	ldw	r18,12(sp)
    2104:	dc400217 	ldw	r17,8(sp)
    2108:	dc000117 	ldw	r16,4(sp)
    210c:	dec00b04 	addi	sp,sp,44
    2110:	f800283a 	ret
    2114:	00800304 	movi	r2,12
    2118:	90800015 	stw	r2,0(r18)
    211c:	0005883a 	mov	r2,zero
    2120:	003ff006 	br	20e4 <__alt_data_end+0xff0020e4>
    2124:	01002004 	movi	r4,128
    2128:	02001004 	movi	r8,64
    212c:	01c00fc4 	movi	r7,63
    2130:	003f6106 	br	1eb8 <__alt_data_end+0xff001eb8>
    2134:	4009883a 	mov	r4,r8
    2138:	003f7506 	br	1f10 <__alt_data_end+0xff001f10>
    213c:	81000317 	ldw	r4,12(r16)
    2140:	003fde06 	br	20bc <__alt_data_end+0xff0020bc>
    2144:	81c5883a 	add	r2,r16,r7
    2148:	11400117 	ldw	r5,4(r2)
    214c:	9009883a 	mov	r4,r18
    2150:	29400054 	ori	r5,r5,1
    2154:	11400115 	stw	r5,4(r2)
    2158:	000eacc0 	call	eacc <__malloc_unlock>
    215c:	80800204 	addi	r2,r16,8
    2160:	003fe006 	br	20e4 <__alt_data_end+0xff0020e4>
    2164:	9c000217 	ldw	r16,8(r19)
    2168:	00bfff04 	movi	r2,-4
    216c:	85800117 	ldw	r22,4(r16)
    2170:	b0ac703a 	and	r22,r22,r2
    2174:	b4400336 	bltu	r22,r17,2184 <_malloc_r+0x344>
    2178:	b445c83a 	sub	r2,r22,r17
    217c:	00c003c4 	movi	r3,15
    2180:	18805d16 	blt	r3,r2,22f8 <_malloc_r+0x4b8>
    2184:	05c00074 	movhi	r23,1
    2188:	00800074 	movhi	r2,1
    218c:	10903704 	addi	r2,r2,16604
    2190:	bdc95e04 	addi	r23,r23,9592
    2194:	15400017 	ldw	r21,0(r2)
    2198:	b8c00017 	ldw	r3,0(r23)
    219c:	00bfffc4 	movi	r2,-1
    21a0:	858d883a 	add	r6,r16,r22
    21a4:	8d6b883a 	add	r21,r17,r21
    21a8:	1880ea26 	beq	r3,r2,2554 <_malloc_r+0x714>
    21ac:	ad4403c4 	addi	r21,r21,4111
    21b0:	00bc0004 	movi	r2,-4096
    21b4:	a8aa703a 	and	r21,r21,r2
    21b8:	a80b883a 	mov	r5,r21
    21bc:	9009883a 	mov	r4,r18
    21c0:	d9800015 	stw	r6,0(sp)
    21c4:	000278c0 	call	278c <_sbrk_r>
    21c8:	1029883a 	mov	r20,r2
    21cc:	00bfffc4 	movi	r2,-1
    21d0:	d9800017 	ldw	r6,0(sp)
    21d4:	a080e826 	beq	r20,r2,2578 <_malloc_r+0x738>
    21d8:	a180a636 	bltu	r20,r6,2474 <_malloc_r+0x634>
    21dc:	07000074 	movhi	fp,1
    21e0:	e7104504 	addi	fp,fp,16660
    21e4:	e0800017 	ldw	r2,0(fp)
    21e8:	a887883a 	add	r3,r21,r2
    21ec:	e0c00015 	stw	r3,0(fp)
    21f0:	3500e626 	beq	r6,r20,258c <_malloc_r+0x74c>
    21f4:	b9000017 	ldw	r4,0(r23)
    21f8:	00bfffc4 	movi	r2,-1
    21fc:	2080ee26 	beq	r4,r2,25b8 <_malloc_r+0x778>
    2200:	a185c83a 	sub	r2,r20,r6
    2204:	10c5883a 	add	r2,r2,r3
    2208:	e0800015 	stw	r2,0(fp)
    220c:	a0c001cc 	andi	r3,r20,7
    2210:	1800bc26 	beq	r3,zero,2504 <_malloc_r+0x6c4>
    2214:	a0e9c83a 	sub	r20,r20,r3
    2218:	00840204 	movi	r2,4104
    221c:	a5000204 	addi	r20,r20,8
    2220:	10c7c83a 	sub	r3,r2,r3
    2224:	a545883a 	add	r2,r20,r21
    2228:	1083ffcc 	andi	r2,r2,4095
    222c:	18abc83a 	sub	r21,r3,r2
    2230:	a80b883a 	mov	r5,r21
    2234:	9009883a 	mov	r4,r18
    2238:	000278c0 	call	278c <_sbrk_r>
    223c:	00ffffc4 	movi	r3,-1
    2240:	10c0e126 	beq	r2,r3,25c8 <_malloc_r+0x788>
    2244:	1505c83a 	sub	r2,r2,r20
    2248:	1545883a 	add	r2,r2,r21
    224c:	10800054 	ori	r2,r2,1
    2250:	e0c00017 	ldw	r3,0(fp)
    2254:	9d000215 	stw	r20,8(r19)
    2258:	a0800115 	stw	r2,4(r20)
    225c:	a8c7883a 	add	r3,r21,r3
    2260:	e0c00015 	stw	r3,0(fp)
    2264:	84c00e26 	beq	r16,r19,22a0 <_malloc_r+0x460>
    2268:	018003c4 	movi	r6,15
    226c:	3580a72e 	bgeu	r6,r22,250c <_malloc_r+0x6cc>
    2270:	81400117 	ldw	r5,4(r16)
    2274:	013ffe04 	movi	r4,-8
    2278:	b0bffd04 	addi	r2,r22,-12
    227c:	1104703a 	and	r2,r2,r4
    2280:	2900004c 	andi	r4,r5,1
    2284:	2088b03a 	or	r4,r4,r2
    2288:	81000115 	stw	r4,4(r16)
    228c:	01400144 	movi	r5,5
    2290:	8089883a 	add	r4,r16,r2
    2294:	21400115 	stw	r5,4(r4)
    2298:	21400215 	stw	r5,8(r4)
    229c:	3080cd36 	bltu	r6,r2,25d4 <_malloc_r+0x794>
    22a0:	00800074 	movhi	r2,1
    22a4:	10903604 	addi	r2,r2,16600
    22a8:	11000017 	ldw	r4,0(r2)
    22ac:	20c0012e 	bgeu	r4,r3,22b4 <_malloc_r+0x474>
    22b0:	10c00015 	stw	r3,0(r2)
    22b4:	00800074 	movhi	r2,1
    22b8:	10903504 	addi	r2,r2,16596
    22bc:	11000017 	ldw	r4,0(r2)
    22c0:	9c000217 	ldw	r16,8(r19)
    22c4:	20c0012e 	bgeu	r4,r3,22cc <_malloc_r+0x48c>
    22c8:	10c00015 	stw	r3,0(r2)
    22cc:	80c00117 	ldw	r3,4(r16)
    22d0:	00bfff04 	movi	r2,-4
    22d4:	1886703a 	and	r3,r3,r2
    22d8:	1c45c83a 	sub	r2,r3,r17
    22dc:	1c400236 	bltu	r3,r17,22e8 <_malloc_r+0x4a8>
    22e0:	00c003c4 	movi	r3,15
    22e4:	18800416 	blt	r3,r2,22f8 <_malloc_r+0x4b8>
    22e8:	9009883a 	mov	r4,r18
    22ec:	000eacc0 	call	eacc <__malloc_unlock>
    22f0:	0005883a 	mov	r2,zero
    22f4:	003f7b06 	br	20e4 <__alt_data_end+0xff0020e4>
    22f8:	88c00054 	ori	r3,r17,1
    22fc:	80c00115 	stw	r3,4(r16)
    2300:	8463883a 	add	r17,r16,r17
    2304:	10800054 	ori	r2,r2,1
    2308:	9c400215 	stw	r17,8(r19)
    230c:	88800115 	stw	r2,4(r17)
    2310:	9009883a 	mov	r4,r18
    2314:	000eacc0 	call	eacc <__malloc_unlock>
    2318:	80800204 	addi	r2,r16,8
    231c:	003f7106 	br	20e4 <__alt_data_end+0xff0020e4>
    2320:	00c00504 	movi	r3,20
    2324:	18804a2e 	bgeu	r3,r2,2450 <_malloc_r+0x610>
    2328:	00c01504 	movi	r3,84
    232c:	18806e36 	bltu	r3,r2,24e8 <_malloc_r+0x6a8>
    2330:	8804d33a 	srli	r2,r17,12
    2334:	12001bc4 	addi	r8,r2,111
    2338:	11c01b84 	addi	r7,r2,110
    233c:	4209883a 	add	r4,r8,r8
    2340:	003edd06 	br	1eb8 <__alt_data_end+0xff001eb8>
    2344:	3804d27a 	srli	r2,r7,9
    2348:	00c00104 	movi	r3,4
    234c:	1880442e 	bgeu	r3,r2,2460 <_malloc_r+0x620>
    2350:	00c00504 	movi	r3,20
    2354:	18808136 	bltu	r3,r2,255c <_malloc_r+0x71c>
    2358:	11401704 	addi	r5,r2,92
    235c:	10c016c4 	addi	r3,r2,91
    2360:	294b883a 	add	r5,r5,r5
    2364:	294b883a 	add	r5,r5,r5
    2368:	294b883a 	add	r5,r5,r5
    236c:	994b883a 	add	r5,r19,r5
    2370:	28800017 	ldw	r2,0(r5)
    2374:	01800074 	movhi	r6,1
    2378:	297ffe04 	addi	r5,r5,-8
    237c:	3182b104 	addi	r6,r6,2756
    2380:	28806526 	beq	r5,r2,2518 <_malloc_r+0x6d8>
    2384:	01bfff04 	movi	r6,-4
    2388:	10c00117 	ldw	r3,4(r2)
    238c:	1986703a 	and	r3,r3,r6
    2390:	38c0022e 	bgeu	r7,r3,239c <_malloc_r+0x55c>
    2394:	10800217 	ldw	r2,8(r2)
    2398:	28bffb1e 	bne	r5,r2,2388 <__alt_data_end+0xff002388>
    239c:	11400317 	ldw	r5,12(r2)
    23a0:	98c00117 	ldw	r3,4(r19)
    23a4:	81400315 	stw	r5,12(r16)
    23a8:	80800215 	stw	r2,8(r16)
    23ac:	2c000215 	stw	r16,8(r5)
    23b0:	14000315 	stw	r16,12(r2)
    23b4:	003ef806 	br	1f98 <__alt_data_end+0xff001f98>
    23b8:	88c00054 	ori	r3,r17,1
    23bc:	80c00115 	stw	r3,4(r16)
    23c0:	8463883a 	add	r17,r16,r17
    23c4:	34400515 	stw	r17,20(r6)
    23c8:	34400415 	stw	r17,16(r6)
    23cc:	10c00054 	ori	r3,r2,1
    23d0:	8a000315 	stw	r8,12(r17)
    23d4:	8a000215 	stw	r8,8(r17)
    23d8:	88c00115 	stw	r3,4(r17)
    23dc:	88a3883a 	add	r17,r17,r2
    23e0:	88800015 	stw	r2,0(r17)
    23e4:	9009883a 	mov	r4,r18
    23e8:	000eacc0 	call	eacc <__malloc_unlock>
    23ec:	80800204 	addi	r2,r16,8
    23f0:	003f3c06 	br	20e4 <__alt_data_end+0xff0020e4>
    23f4:	30c00117 	ldw	r3,4(r6)
    23f8:	003ee706 	br	1f98 <__alt_data_end+0xff001f98>
    23fc:	5ac00044 	addi	r11,r11,1
    2400:	588000cc 	andi	r2,r11,3
    2404:	31800204 	addi	r6,r6,8
    2408:	103efd1e 	bne	r2,zero,2000 <__alt_data_end+0xff002000>
    240c:	00002406 	br	24a0 <_malloc_r+0x660>
    2410:	14000317 	ldw	r16,12(r2)
    2414:	143f251e 	bne	r2,r16,20ac <__alt_data_end+0xff0020ac>
    2418:	21000084 	addi	r4,r4,2
    241c:	003ebc06 	br	1f10 <__alt_data_end+0xff001f10>
    2420:	8085883a 	add	r2,r16,r2
    2424:	10c00117 	ldw	r3,4(r2)
    2428:	81000317 	ldw	r4,12(r16)
    242c:	81400217 	ldw	r5,8(r16)
    2430:	18c00054 	ori	r3,r3,1
    2434:	10c00115 	stw	r3,4(r2)
    2438:	29000315 	stw	r4,12(r5)
    243c:	21400215 	stw	r5,8(r4)
    2440:	9009883a 	mov	r4,r18
    2444:	000eacc0 	call	eacc <__malloc_unlock>
    2448:	80800204 	addi	r2,r16,8
    244c:	003f2506 	br	20e4 <__alt_data_end+0xff0020e4>
    2450:	12001704 	addi	r8,r2,92
    2454:	11c016c4 	addi	r7,r2,91
    2458:	4209883a 	add	r4,r8,r8
    245c:	003e9606 	br	1eb8 <__alt_data_end+0xff001eb8>
    2460:	3804d1ba 	srli	r2,r7,6
    2464:	11400e44 	addi	r5,r2,57
    2468:	10c00e04 	addi	r3,r2,56
    246c:	294b883a 	add	r5,r5,r5
    2470:	003fbc06 	br	2364 <__alt_data_end+0xff002364>
    2474:	84ff5926 	beq	r16,r19,21dc <__alt_data_end+0xff0021dc>
    2478:	00800074 	movhi	r2,1
    247c:	1082b104 	addi	r2,r2,2756
    2480:	14000217 	ldw	r16,8(r2)
    2484:	00bfff04 	movi	r2,-4
    2488:	80c00117 	ldw	r3,4(r16)
    248c:	1886703a 	and	r3,r3,r2
    2490:	003f9106 	br	22d8 <__alt_data_end+0xff0022d8>
    2494:	60800217 	ldw	r2,8(r12)
    2498:	213fffc4 	addi	r4,r4,-1
    249c:	1300651e 	bne	r2,r12,2634 <_malloc_r+0x7f4>
    24a0:	208000cc 	andi	r2,r4,3
    24a4:	633ffe04 	addi	r12,r12,-8
    24a8:	103ffa1e 	bne	r2,zero,2494 <__alt_data_end+0xff002494>
    24ac:	98800117 	ldw	r2,4(r19)
    24b0:	0146303a 	nor	r3,zero,r5
    24b4:	1884703a 	and	r2,r3,r2
    24b8:	98800115 	stw	r2,4(r19)
    24bc:	294b883a 	add	r5,r5,r5
    24c0:	117f2836 	bltu	r2,r5,2164 <__alt_data_end+0xff002164>
    24c4:	283f2726 	beq	r5,zero,2164 <__alt_data_end+0xff002164>
    24c8:	2886703a 	and	r3,r5,r2
    24cc:	5809883a 	mov	r4,r11
    24d0:	183ec31e 	bne	r3,zero,1fe0 <__alt_data_end+0xff001fe0>
    24d4:	294b883a 	add	r5,r5,r5
    24d8:	2886703a 	and	r3,r5,r2
    24dc:	21000104 	addi	r4,r4,4
    24e0:	183ffc26 	beq	r3,zero,24d4 <__alt_data_end+0xff0024d4>
    24e4:	003ebe06 	br	1fe0 <__alt_data_end+0xff001fe0>
    24e8:	00c05504 	movi	r3,340
    24ec:	18801236 	bltu	r3,r2,2538 <_malloc_r+0x6f8>
    24f0:	8804d3fa 	srli	r2,r17,15
    24f4:	12001e04 	addi	r8,r2,120
    24f8:	11c01dc4 	addi	r7,r2,119
    24fc:	4209883a 	add	r4,r8,r8
    2500:	003e6d06 	br	1eb8 <__alt_data_end+0xff001eb8>
    2504:	00c40004 	movi	r3,4096
    2508:	003f4606 	br	2224 <__alt_data_end+0xff002224>
    250c:	00800044 	movi	r2,1
    2510:	a0800115 	stw	r2,4(r20)
    2514:	003f7406 	br	22e8 <__alt_data_end+0xff0022e8>
    2518:	1805d0ba 	srai	r2,r3,2
    251c:	01c00044 	movi	r7,1
    2520:	30c00117 	ldw	r3,4(r6)
    2524:	388e983a 	sll	r7,r7,r2
    2528:	2805883a 	mov	r2,r5
    252c:	38c6b03a 	or	r3,r7,r3
    2530:	30c00115 	stw	r3,4(r6)
    2534:	003f9b06 	br	23a4 <__alt_data_end+0xff0023a4>
    2538:	00c15504 	movi	r3,1364
    253c:	18801a36 	bltu	r3,r2,25a8 <_malloc_r+0x768>
    2540:	8804d4ba 	srli	r2,r17,18
    2544:	12001f44 	addi	r8,r2,125
    2548:	11c01f04 	addi	r7,r2,124
    254c:	4209883a 	add	r4,r8,r8
    2550:	003e5906 	br	1eb8 <__alt_data_end+0xff001eb8>
    2554:	ad400404 	addi	r21,r21,16
    2558:	003f1706 	br	21b8 <__alt_data_end+0xff0021b8>
    255c:	00c01504 	movi	r3,84
    2560:	18802336 	bltu	r3,r2,25f0 <_malloc_r+0x7b0>
    2564:	3804d33a 	srli	r2,r7,12
    2568:	11401bc4 	addi	r5,r2,111
    256c:	10c01b84 	addi	r3,r2,110
    2570:	294b883a 	add	r5,r5,r5
    2574:	003f7b06 	br	2364 <__alt_data_end+0xff002364>
    2578:	9c000217 	ldw	r16,8(r19)
    257c:	00bfff04 	movi	r2,-4
    2580:	80c00117 	ldw	r3,4(r16)
    2584:	1886703a 	and	r3,r3,r2
    2588:	003f5306 	br	22d8 <__alt_data_end+0xff0022d8>
    258c:	3083ffcc 	andi	r2,r6,4095
    2590:	103f181e 	bne	r2,zero,21f4 <__alt_data_end+0xff0021f4>
    2594:	99000217 	ldw	r4,8(r19)
    2598:	b545883a 	add	r2,r22,r21
    259c:	10800054 	ori	r2,r2,1
    25a0:	20800115 	stw	r2,4(r4)
    25a4:	003f3e06 	br	22a0 <__alt_data_end+0xff0022a0>
    25a8:	01003f84 	movi	r4,254
    25ac:	02001fc4 	movi	r8,127
    25b0:	01c01f84 	movi	r7,126
    25b4:	003e4006 	br	1eb8 <__alt_data_end+0xff001eb8>
    25b8:	00800074 	movhi	r2,1
    25bc:	10895e04 	addi	r2,r2,9592
    25c0:	15000015 	stw	r20,0(r2)
    25c4:	003f1106 	br	220c <__alt_data_end+0xff00220c>
    25c8:	00800044 	movi	r2,1
    25cc:	002b883a 	mov	r21,zero
    25d0:	003f1f06 	br	2250 <__alt_data_end+0xff002250>
    25d4:	81400204 	addi	r5,r16,8
    25d8:	9009883a 	mov	r4,r18
    25dc:	0006c900 	call	6c90 <_free_r>
    25e0:	00800074 	movhi	r2,1
    25e4:	10904504 	addi	r2,r2,16660
    25e8:	10c00017 	ldw	r3,0(r2)
    25ec:	003f2c06 	br	22a0 <__alt_data_end+0xff0022a0>
    25f0:	00c05504 	movi	r3,340
    25f4:	18800536 	bltu	r3,r2,260c <_malloc_r+0x7cc>
    25f8:	3804d3fa 	srli	r2,r7,15
    25fc:	11401e04 	addi	r5,r2,120
    2600:	10c01dc4 	addi	r3,r2,119
    2604:	294b883a 	add	r5,r5,r5
    2608:	003f5606 	br	2364 <__alt_data_end+0xff002364>
    260c:	00c15504 	movi	r3,1364
    2610:	18800536 	bltu	r3,r2,2628 <_malloc_r+0x7e8>
    2614:	3804d4ba 	srli	r2,r7,18
    2618:	11401f44 	addi	r5,r2,125
    261c:	10c01f04 	addi	r3,r2,124
    2620:	294b883a 	add	r5,r5,r5
    2624:	003f4f06 	br	2364 <__alt_data_end+0xff002364>
    2628:	01403f84 	movi	r5,254
    262c:	00c01f84 	movi	r3,126
    2630:	003f4c06 	br	2364 <__alt_data_end+0xff002364>
    2634:	98800117 	ldw	r2,4(r19)
    2638:	003fa006 	br	24bc <__alt_data_end+0xff0024bc>
    263c:	8808d0fa 	srli	r4,r17,3
    2640:	20800044 	addi	r2,r4,1
    2644:	1085883a 	add	r2,r2,r2
    2648:	003e9006 	br	208c <__alt_data_end+0xff00208c>

0000264c <_printf_r>:
    264c:	defffd04 	addi	sp,sp,-12
    2650:	2805883a 	mov	r2,r5
    2654:	dfc00015 	stw	ra,0(sp)
    2658:	d9800115 	stw	r6,4(sp)
    265c:	d9c00215 	stw	r7,8(sp)
    2660:	21400217 	ldw	r5,8(r4)
    2664:	d9c00104 	addi	r7,sp,4
    2668:	100d883a 	mov	r6,r2
    266c:	00028780 	call	2878 <___vfprintf_internal_r>
    2670:	dfc00017 	ldw	ra,0(sp)
    2674:	dec00304 	addi	sp,sp,12
    2678:	f800283a 	ret

0000267c <printf>:
    267c:	defffc04 	addi	sp,sp,-16
    2680:	dfc00015 	stw	ra,0(sp)
    2684:	d9400115 	stw	r5,4(sp)
    2688:	d9800215 	stw	r6,8(sp)
    268c:	d9c00315 	stw	r7,12(sp)
    2690:	00800074 	movhi	r2,1
    2694:	10896104 	addi	r2,r2,9604
    2698:	10800017 	ldw	r2,0(r2)
    269c:	200b883a 	mov	r5,r4
    26a0:	d9800104 	addi	r6,sp,4
    26a4:	11000217 	ldw	r4,8(r2)
    26a8:	0004a700 	call	4a70 <__vfprintf_internal>
    26ac:	dfc00017 	ldw	ra,0(sp)
    26b0:	dec00404 	addi	sp,sp,16
    26b4:	f800283a 	ret

000026b8 <_puts_r>:
    26b8:	defff604 	addi	sp,sp,-40
    26bc:	dc000715 	stw	r16,28(sp)
    26c0:	2021883a 	mov	r16,r4
    26c4:	2809883a 	mov	r4,r5
    26c8:	dc400815 	stw	r17,32(sp)
    26cc:	dfc00915 	stw	ra,36(sp)
    26d0:	2823883a 	mov	r17,r5
    26d4:	00027e00 	call	27e0 <strlen>
    26d8:	10c00044 	addi	r3,r2,1
    26dc:	d8800115 	stw	r2,4(sp)
    26e0:	00800074 	movhi	r2,1
    26e4:	1081f704 	addi	r2,r2,2012
    26e8:	d8800215 	stw	r2,8(sp)
    26ec:	00800044 	movi	r2,1
    26f0:	d8800315 	stw	r2,12(sp)
    26f4:	00800084 	movi	r2,2
    26f8:	dc400015 	stw	r17,0(sp)
    26fc:	d8c00615 	stw	r3,24(sp)
    2700:	dec00415 	stw	sp,16(sp)
    2704:	d8800515 	stw	r2,20(sp)
    2708:	80000226 	beq	r16,zero,2714 <_puts_r+0x5c>
    270c:	80800e17 	ldw	r2,56(r16)
    2710:	10001426 	beq	r2,zero,2764 <_puts_r+0xac>
    2714:	81400217 	ldw	r5,8(r16)
    2718:	2880030b 	ldhu	r2,12(r5)
    271c:	10c8000c 	andi	r3,r2,8192
    2720:	1800061e 	bne	r3,zero,273c <_puts_r+0x84>
    2724:	29001917 	ldw	r4,100(r5)
    2728:	00f7ffc4 	movi	r3,-8193
    272c:	10880014 	ori	r2,r2,8192
    2730:	20c6703a 	and	r3,r4,r3
    2734:	2880030d 	sth	r2,12(r5)
    2738:	28c01915 	stw	r3,100(r5)
    273c:	d9800404 	addi	r6,sp,16
    2740:	8009883a 	mov	r4,r16
    2744:	0006fa00 	call	6fa0 <__sfvwrite_r>
    2748:	1000091e 	bne	r2,zero,2770 <_puts_r+0xb8>
    274c:	00800284 	movi	r2,10
    2750:	dfc00917 	ldw	ra,36(sp)
    2754:	dc400817 	ldw	r17,32(sp)
    2758:	dc000717 	ldw	r16,28(sp)
    275c:	dec00a04 	addi	sp,sp,40
    2760:	f800283a 	ret
    2764:	8009883a 	mov	r4,r16
    2768:	0006b1c0 	call	6b1c <__sinit>
    276c:	003fe906 	br	2714 <__alt_data_end+0xff002714>
    2770:	00bfffc4 	movi	r2,-1
    2774:	003ff606 	br	2750 <__alt_data_end+0xff002750>

00002778 <puts>:
    2778:	00800074 	movhi	r2,1
    277c:	10896104 	addi	r2,r2,9604
    2780:	200b883a 	mov	r5,r4
    2784:	11000017 	ldw	r4,0(r2)
    2788:	00026b81 	jmpi	26b8 <_puts_r>

0000278c <_sbrk_r>:
    278c:	defffd04 	addi	sp,sp,-12
    2790:	dc000015 	stw	r16,0(sp)
    2794:	04000074 	movhi	r16,1
    2798:	dc400115 	stw	r17,4(sp)
    279c:	84103804 	addi	r16,r16,16608
    27a0:	2023883a 	mov	r17,r4
    27a4:	2809883a 	mov	r4,r5
    27a8:	dfc00215 	stw	ra,8(sp)
    27ac:	80000015 	stw	zero,0(r16)
    27b0:	000ebbc0 	call	ebbc <sbrk>
    27b4:	00ffffc4 	movi	r3,-1
    27b8:	10c00526 	beq	r2,r3,27d0 <_sbrk_r+0x44>
    27bc:	dfc00217 	ldw	ra,8(sp)
    27c0:	dc400117 	ldw	r17,4(sp)
    27c4:	dc000017 	ldw	r16,0(sp)
    27c8:	dec00304 	addi	sp,sp,12
    27cc:	f800283a 	ret
    27d0:	80c00017 	ldw	r3,0(r16)
    27d4:	183ff926 	beq	r3,zero,27bc <__alt_data_end+0xff0027bc>
    27d8:	88c00015 	stw	r3,0(r17)
    27dc:	003ff706 	br	27bc <__alt_data_end+0xff0027bc>

000027e0 <strlen>:
    27e0:	208000cc 	andi	r2,r4,3
    27e4:	10002026 	beq	r2,zero,2868 <strlen+0x88>
    27e8:	20800007 	ldb	r2,0(r4)
    27ec:	10002026 	beq	r2,zero,2870 <strlen+0x90>
    27f0:	2005883a 	mov	r2,r4
    27f4:	00000206 	br	2800 <strlen+0x20>
    27f8:	10c00007 	ldb	r3,0(r2)
    27fc:	18001826 	beq	r3,zero,2860 <strlen+0x80>
    2800:	10800044 	addi	r2,r2,1
    2804:	10c000cc 	andi	r3,r2,3
    2808:	183ffb1e 	bne	r3,zero,27f8 <__alt_data_end+0xff0027f8>
    280c:	10c00017 	ldw	r3,0(r2)
    2810:	01ffbff4 	movhi	r7,65279
    2814:	39ffbfc4 	addi	r7,r7,-257
    2818:	00ca303a 	nor	r5,zero,r3
    281c:	01a02074 	movhi	r6,32897
    2820:	19c7883a 	add	r3,r3,r7
    2824:	31a02004 	addi	r6,r6,-32640
    2828:	1946703a 	and	r3,r3,r5
    282c:	1986703a 	and	r3,r3,r6
    2830:	1800091e 	bne	r3,zero,2858 <strlen+0x78>
    2834:	10800104 	addi	r2,r2,4
    2838:	10c00017 	ldw	r3,0(r2)
    283c:	19cb883a 	add	r5,r3,r7
    2840:	00c6303a 	nor	r3,zero,r3
    2844:	28c6703a 	and	r3,r5,r3
    2848:	1986703a 	and	r3,r3,r6
    284c:	183ff926 	beq	r3,zero,2834 <__alt_data_end+0xff002834>
    2850:	00000106 	br	2858 <strlen+0x78>
    2854:	10800044 	addi	r2,r2,1
    2858:	10c00007 	ldb	r3,0(r2)
    285c:	183ffd1e 	bne	r3,zero,2854 <__alt_data_end+0xff002854>
    2860:	1105c83a 	sub	r2,r2,r4
    2864:	f800283a 	ret
    2868:	2005883a 	mov	r2,r4
    286c:	003fe706 	br	280c <__alt_data_end+0xff00280c>
    2870:	0005883a 	mov	r2,zero
    2874:	f800283a 	ret

00002878 <___vfprintf_internal_r>:
    2878:	deffb804 	addi	sp,sp,-288
    287c:	dfc04715 	stw	ra,284(sp)
    2880:	ddc04515 	stw	r23,276(sp)
    2884:	dd404315 	stw	r21,268(sp)
    2888:	d9002c15 	stw	r4,176(sp)
    288c:	282f883a 	mov	r23,r5
    2890:	302b883a 	mov	r21,r6
    2894:	d9c02d15 	stw	r7,180(sp)
    2898:	df004615 	stw	fp,280(sp)
    289c:	dd804415 	stw	r22,272(sp)
    28a0:	dd004215 	stw	r20,264(sp)
    28a4:	dcc04115 	stw	r19,260(sp)
    28a8:	dc804015 	stw	r18,256(sp)
    28ac:	dc403f15 	stw	r17,252(sp)
    28b0:	dc003e15 	stw	r16,248(sp)
    28b4:	00076900 	call	7690 <_localeconv_r>
    28b8:	10800017 	ldw	r2,0(r2)
    28bc:	1009883a 	mov	r4,r2
    28c0:	d8803415 	stw	r2,208(sp)
    28c4:	00027e00 	call	27e0 <strlen>
    28c8:	d8803715 	stw	r2,220(sp)
    28cc:	d8802c17 	ldw	r2,176(sp)
    28d0:	10000226 	beq	r2,zero,28dc <___vfprintf_internal_r+0x64>
    28d4:	10800e17 	ldw	r2,56(r2)
    28d8:	1000f926 	beq	r2,zero,2cc0 <___vfprintf_internal_r+0x448>
    28dc:	b880030b 	ldhu	r2,12(r23)
    28e0:	10c8000c 	andi	r3,r2,8192
    28e4:	1800061e 	bne	r3,zero,2900 <___vfprintf_internal_r+0x88>
    28e8:	b9001917 	ldw	r4,100(r23)
    28ec:	00f7ffc4 	movi	r3,-8193
    28f0:	10880014 	ori	r2,r2,8192
    28f4:	20c6703a 	and	r3,r4,r3
    28f8:	b880030d 	sth	r2,12(r23)
    28fc:	b8c01915 	stw	r3,100(r23)
    2900:	10c0020c 	andi	r3,r2,8
    2904:	1800c126 	beq	r3,zero,2c0c <___vfprintf_internal_r+0x394>
    2908:	b8c00417 	ldw	r3,16(r23)
    290c:	1800bf26 	beq	r3,zero,2c0c <___vfprintf_internal_r+0x394>
    2910:	1080068c 	andi	r2,r2,26
    2914:	00c00284 	movi	r3,10
    2918:	10c0c426 	beq	r2,r3,2c2c <___vfprintf_internal_r+0x3b4>
    291c:	d8c00404 	addi	r3,sp,16
    2920:	05000074 	movhi	r20,1
    2924:	d9001e04 	addi	r4,sp,120
    2928:	a5020884 	addi	r20,r20,2082
    292c:	d8c01e15 	stw	r3,120(sp)
    2930:	d8002015 	stw	zero,128(sp)
    2934:	d8001f15 	stw	zero,124(sp)
    2938:	d8003315 	stw	zero,204(sp)
    293c:	d8003615 	stw	zero,216(sp)
    2940:	d8003815 	stw	zero,224(sp)
    2944:	1811883a 	mov	r8,r3
    2948:	d8003915 	stw	zero,228(sp)
    294c:	d8003a15 	stw	zero,232(sp)
    2950:	d8002f15 	stw	zero,188(sp)
    2954:	d9002815 	stw	r4,160(sp)
    2958:	a8800007 	ldb	r2,0(r21)
    295c:	10027b26 	beq	r2,zero,334c <___vfprintf_internal_r+0xad4>
    2960:	00c00944 	movi	r3,37
    2964:	a821883a 	mov	r16,r21
    2968:	10c0021e 	bne	r2,r3,2974 <___vfprintf_internal_r+0xfc>
    296c:	00001406 	br	29c0 <___vfprintf_internal_r+0x148>
    2970:	10c00326 	beq	r2,r3,2980 <___vfprintf_internal_r+0x108>
    2974:	84000044 	addi	r16,r16,1
    2978:	80800007 	ldb	r2,0(r16)
    297c:	103ffc1e 	bne	r2,zero,2970 <__alt_data_end+0xff002970>
    2980:	8563c83a 	sub	r17,r16,r21
    2984:	88000e26 	beq	r17,zero,29c0 <___vfprintf_internal_r+0x148>
    2988:	d8c02017 	ldw	r3,128(sp)
    298c:	d8801f17 	ldw	r2,124(sp)
    2990:	45400015 	stw	r21,0(r8)
    2994:	1c47883a 	add	r3,r3,r17
    2998:	10800044 	addi	r2,r2,1
    299c:	d8c02015 	stw	r3,128(sp)
    29a0:	44400115 	stw	r17,4(r8)
    29a4:	d8801f15 	stw	r2,124(sp)
    29a8:	00c001c4 	movi	r3,7
    29ac:	1880a716 	blt	r3,r2,2c4c <___vfprintf_internal_r+0x3d4>
    29b0:	42000204 	addi	r8,r8,8
    29b4:	d9402f17 	ldw	r5,188(sp)
    29b8:	2c4b883a 	add	r5,r5,r17
    29bc:	d9402f15 	stw	r5,188(sp)
    29c0:	80800007 	ldb	r2,0(r16)
    29c4:	1000a826 	beq	r2,zero,2c68 <___vfprintf_internal_r+0x3f0>
    29c8:	84400047 	ldb	r17,1(r16)
    29cc:	00bfffc4 	movi	r2,-1
    29d0:	85400044 	addi	r21,r16,1
    29d4:	d8002785 	stb	zero,158(sp)
    29d8:	0007883a 	mov	r3,zero
    29dc:	000f883a 	mov	r7,zero
    29e0:	d8802915 	stw	r2,164(sp)
    29e4:	d8003115 	stw	zero,196(sp)
    29e8:	0025883a 	mov	r18,zero
    29ec:	01401604 	movi	r5,88
    29f0:	01800244 	movi	r6,9
    29f4:	02800a84 	movi	r10,42
    29f8:	02401b04 	movi	r9,108
    29fc:	ad400044 	addi	r21,r21,1
    2a00:	88bff804 	addi	r2,r17,-32
    2a04:	28830436 	bltu	r5,r2,3618 <___vfprintf_internal_r+0xda0>
    2a08:	100490ba 	slli	r2,r2,2
    2a0c:	01000034 	movhi	r4,0
    2a10:	210a8804 	addi	r4,r4,10784
    2a14:	1105883a 	add	r2,r2,r4
    2a18:	10800017 	ldw	r2,0(r2)
    2a1c:	1000683a 	jmp	r2
    2a20:	00003538 	rdprs	zero,zero,212
    2a24:	00003618 	cmpnei	zero,zero,216
    2a28:	00003618 	cmpnei	zero,zero,216
    2a2c:	00003558 	cmpnei	zero,zero,213
    2a30:	00003618 	cmpnei	zero,zero,216
    2a34:	00003618 	cmpnei	zero,zero,216
    2a38:	00003618 	cmpnei	zero,zero,216
    2a3c:	00003618 	cmpnei	zero,zero,216
    2a40:	00003618 	cmpnei	zero,zero,216
    2a44:	00003618 	cmpnei	zero,zero,216
    2a48:	00002ccc 	andi	zero,zero,179
    2a4c:	00003474 	movhi	zero,209
    2a50:	00003618 	cmpnei	zero,zero,216
    2a54:	00002b94 	movui	zero,174
    2a58:	00002cf4 	movhi	zero,179
    2a5c:	00003618 	cmpnei	zero,zero,216
    2a60:	00002d34 	movhi	zero,180
    2a64:	00002d40 	call	2d4 <init_camera+0xfc>
    2a68:	00002d40 	call	2d4 <init_camera+0xfc>
    2a6c:	00002d40 	call	2d4 <init_camera+0xfc>
    2a70:	00002d40 	call	2d4 <init_camera+0xfc>
    2a74:	00002d40 	call	2d4 <init_camera+0xfc>
    2a78:	00002d40 	call	2d4 <init_camera+0xfc>
    2a7c:	00002d40 	call	2d4 <init_camera+0xfc>
    2a80:	00002d40 	call	2d4 <init_camera+0xfc>
    2a84:	00002d40 	call	2d4 <init_camera+0xfc>
    2a88:	00003618 	cmpnei	zero,zero,216
    2a8c:	00003618 	cmpnei	zero,zero,216
    2a90:	00003618 	cmpnei	zero,zero,216
    2a94:	00003618 	cmpnei	zero,zero,216
    2a98:	00003618 	cmpnei	zero,zero,216
    2a9c:	00003618 	cmpnei	zero,zero,216
    2aa0:	00003618 	cmpnei	zero,zero,216
    2aa4:	00003618 	cmpnei	zero,zero,216
    2aa8:	00003618 	cmpnei	zero,zero,216
    2aac:	00003618 	cmpnei	zero,zero,216
    2ab0:	00002d74 	movhi	zero,181
    2ab4:	00002e30 	cmpltui	zero,zero,184
    2ab8:	00003618 	cmpnei	zero,zero,216
    2abc:	00002e30 	cmpltui	zero,zero,184
    2ac0:	00003618 	cmpnei	zero,zero,216
    2ac4:	00003618 	cmpnei	zero,zero,216
    2ac8:	00003618 	cmpnei	zero,zero,216
    2acc:	00003618 	cmpnei	zero,zero,216
    2ad0:	00002ed0 	cmplti	zero,zero,187
    2ad4:	00003618 	cmpnei	zero,zero,216
    2ad8:	00003618 	cmpnei	zero,zero,216
    2adc:	00002edc 	xori	zero,zero,187
    2ae0:	00003618 	cmpnei	zero,zero,216
    2ae4:	00003618 	cmpnei	zero,zero,216
    2ae8:	00003618 	cmpnei	zero,zero,216
    2aec:	00003618 	cmpnei	zero,zero,216
    2af0:	00003618 	cmpnei	zero,zero,216
    2af4:	00003354 	movui	zero,205
    2af8:	00003618 	cmpnei	zero,zero,216
    2afc:	00003618 	cmpnei	zero,zero,216
    2b00:	000033b4 	movhi	zero,206
    2b04:	00003618 	cmpnei	zero,zero,216
    2b08:	00003618 	cmpnei	zero,zero,216
    2b0c:	00003618 	cmpnei	zero,zero,216
    2b10:	00003618 	cmpnei	zero,zero,216
    2b14:	00003618 	cmpnei	zero,zero,216
    2b18:	00003618 	cmpnei	zero,zero,216
    2b1c:	00003618 	cmpnei	zero,zero,216
    2b20:	00003618 	cmpnei	zero,zero,216
    2b24:	00003618 	cmpnei	zero,zero,216
    2b28:	00003618 	cmpnei	zero,zero,216
    2b2c:	000035c4 	movi	zero,215
    2b30:	00003564 	muli	zero,zero,213
    2b34:	00002e30 	cmpltui	zero,zero,184
    2b38:	00002e30 	cmpltui	zero,zero,184
    2b3c:	00002e30 	cmpltui	zero,zero,184
    2b40:	00003574 	movhi	zero,213
    2b44:	00003564 	muli	zero,zero,213
    2b48:	00003618 	cmpnei	zero,zero,216
    2b4c:	00003618 	cmpnei	zero,zero,216
    2b50:	00003580 	call	358 <init_camera+0x180>
    2b54:	00003618 	cmpnei	zero,zero,216
    2b58:	00003590 	cmplti	zero,zero,214
    2b5c:	00003464 	muli	zero,zero,209
    2b60:	00002ba0 	cmpeqi	zero,zero,174
    2b64:	00003484 	movi	zero,210
    2b68:	00003618 	cmpnei	zero,zero,216
    2b6c:	00003490 	cmplti	zero,zero,210
    2b70:	00003618 	cmpnei	zero,zero,216
    2b74:	000034ec 	andhi	zero,zero,211
    2b78:	00003618 	cmpnei	zero,zero,216
    2b7c:	00003618 	cmpnei	zero,zero,216
    2b80:	000034fc 	xorhi	zero,zero,211
    2b84:	d9003117 	ldw	r4,196(sp)
    2b88:	d8802d15 	stw	r2,180(sp)
    2b8c:	0109c83a 	sub	r4,zero,r4
    2b90:	d9003115 	stw	r4,196(sp)
    2b94:	94800114 	ori	r18,r18,4
    2b98:	ac400007 	ldb	r17,0(r21)
    2b9c:	003f9706 	br	29fc <__alt_data_end+0xff0029fc>
    2ba0:	00800c04 	movi	r2,48
    2ba4:	d9002d17 	ldw	r4,180(sp)
    2ba8:	d9402917 	ldw	r5,164(sp)
    2bac:	d8802705 	stb	r2,156(sp)
    2bb0:	00801e04 	movi	r2,120
    2bb4:	d8802745 	stb	r2,157(sp)
    2bb8:	d8002785 	stb	zero,158(sp)
    2bbc:	20c00104 	addi	r3,r4,4
    2bc0:	24c00017 	ldw	r19,0(r4)
    2bc4:	002d883a 	mov	r22,zero
    2bc8:	90800094 	ori	r2,r18,2
    2bcc:	28029a16 	blt	r5,zero,3638 <___vfprintf_internal_r+0xdc0>
    2bd0:	00bfdfc4 	movi	r2,-129
    2bd4:	90a4703a 	and	r18,r18,r2
    2bd8:	d8c02d15 	stw	r3,180(sp)
    2bdc:	94800094 	ori	r18,r18,2
    2be0:	9802871e 	bne	r19,zero,3600 <___vfprintf_internal_r+0xd88>
    2be4:	00800074 	movhi	r2,1
    2be8:	10820104 	addi	r2,r2,2052
    2bec:	d8803915 	stw	r2,228(sp)
    2bf0:	04401e04 	movi	r17,120
    2bf4:	d8802917 	ldw	r2,164(sp)
    2bf8:	0039883a 	mov	fp,zero
    2bfc:	1001e926 	beq	r2,zero,33a4 <___vfprintf_internal_r+0xb2c>
    2c00:	0027883a 	mov	r19,zero
    2c04:	002d883a 	mov	r22,zero
    2c08:	00020506 	br	3420 <___vfprintf_internal_r+0xba8>
    2c0c:	d9002c17 	ldw	r4,176(sp)
    2c10:	b80b883a 	mov	r5,r23
    2c14:	0004b480 	call	4b48 <__swsetup_r>
    2c18:	1005ac1e 	bne	r2,zero,42cc <___vfprintf_internal_r+0x1a54>
    2c1c:	b880030b 	ldhu	r2,12(r23)
    2c20:	00c00284 	movi	r3,10
    2c24:	1080068c 	andi	r2,r2,26
    2c28:	10ff3c1e 	bne	r2,r3,291c <__alt_data_end+0xff00291c>
    2c2c:	b880038f 	ldh	r2,14(r23)
    2c30:	103f3a16 	blt	r2,zero,291c <__alt_data_end+0xff00291c>
    2c34:	d9c02d17 	ldw	r7,180(sp)
    2c38:	d9002c17 	ldw	r4,176(sp)
    2c3c:	a80d883a 	mov	r6,r21
    2c40:	b80b883a 	mov	r5,r23
    2c44:	0004a8c0 	call	4a8c <__sbprintf>
    2c48:	00001106 	br	2c90 <___vfprintf_internal_r+0x418>
    2c4c:	d9002c17 	ldw	r4,176(sp)
    2c50:	d9801e04 	addi	r6,sp,120
    2c54:	b80b883a 	mov	r5,r23
    2c58:	00096140 	call	9614 <__sprint_r>
    2c5c:	1000081e 	bne	r2,zero,2c80 <___vfprintf_internal_r+0x408>
    2c60:	da000404 	addi	r8,sp,16
    2c64:	003f5306 	br	29b4 <__alt_data_end+0xff0029b4>
    2c68:	d8802017 	ldw	r2,128(sp)
    2c6c:	10000426 	beq	r2,zero,2c80 <___vfprintf_internal_r+0x408>
    2c70:	d9002c17 	ldw	r4,176(sp)
    2c74:	d9801e04 	addi	r6,sp,120
    2c78:	b80b883a 	mov	r5,r23
    2c7c:	00096140 	call	9614 <__sprint_r>
    2c80:	b880030b 	ldhu	r2,12(r23)
    2c84:	1080100c 	andi	r2,r2,64
    2c88:	1005901e 	bne	r2,zero,42cc <___vfprintf_internal_r+0x1a54>
    2c8c:	d8802f17 	ldw	r2,188(sp)
    2c90:	dfc04717 	ldw	ra,284(sp)
    2c94:	df004617 	ldw	fp,280(sp)
    2c98:	ddc04517 	ldw	r23,276(sp)
    2c9c:	dd804417 	ldw	r22,272(sp)
    2ca0:	dd404317 	ldw	r21,268(sp)
    2ca4:	dd004217 	ldw	r20,264(sp)
    2ca8:	dcc04117 	ldw	r19,260(sp)
    2cac:	dc804017 	ldw	r18,256(sp)
    2cb0:	dc403f17 	ldw	r17,252(sp)
    2cb4:	dc003e17 	ldw	r16,248(sp)
    2cb8:	dec04804 	addi	sp,sp,288
    2cbc:	f800283a 	ret
    2cc0:	d9002c17 	ldw	r4,176(sp)
    2cc4:	0006b1c0 	call	6b1c <__sinit>
    2cc8:	003f0406 	br	28dc <__alt_data_end+0xff0028dc>
    2ccc:	d8802d17 	ldw	r2,180(sp)
    2cd0:	d9002d17 	ldw	r4,180(sp)
    2cd4:	10800017 	ldw	r2,0(r2)
    2cd8:	d8803115 	stw	r2,196(sp)
    2cdc:	20800104 	addi	r2,r4,4
    2ce0:	d9003117 	ldw	r4,196(sp)
    2ce4:	203fa716 	blt	r4,zero,2b84 <__alt_data_end+0xff002b84>
    2ce8:	d8802d15 	stw	r2,180(sp)
    2cec:	ac400007 	ldb	r17,0(r21)
    2cf0:	003f4206 	br	29fc <__alt_data_end+0xff0029fc>
    2cf4:	ac400007 	ldb	r17,0(r21)
    2cf8:	aac00044 	addi	r11,r21,1
    2cfc:	8a872826 	beq	r17,r10,49a0 <___vfprintf_internal_r+0x2128>
    2d00:	88bff404 	addi	r2,r17,-48
    2d04:	0009883a 	mov	r4,zero
    2d08:	30867d36 	bltu	r6,r2,4700 <___vfprintf_internal_r+0x1e88>
    2d0c:	5c400007 	ldb	r17,0(r11)
    2d10:	210002a4 	muli	r4,r4,10
    2d14:	5d400044 	addi	r21,r11,1
    2d18:	a817883a 	mov	r11,r21
    2d1c:	2089883a 	add	r4,r4,r2
    2d20:	88bff404 	addi	r2,r17,-48
    2d24:	30bff92e 	bgeu	r6,r2,2d0c <__alt_data_end+0xff002d0c>
    2d28:	2005c916 	blt	r4,zero,4450 <___vfprintf_internal_r+0x1bd8>
    2d2c:	d9002915 	stw	r4,164(sp)
    2d30:	003f3306 	br	2a00 <__alt_data_end+0xff002a00>
    2d34:	94802014 	ori	r18,r18,128
    2d38:	ac400007 	ldb	r17,0(r21)
    2d3c:	003f2f06 	br	29fc <__alt_data_end+0xff0029fc>
    2d40:	a809883a 	mov	r4,r21
    2d44:	d8003115 	stw	zero,196(sp)
    2d48:	88bff404 	addi	r2,r17,-48
    2d4c:	0017883a 	mov	r11,zero
    2d50:	24400007 	ldb	r17,0(r4)
    2d54:	5ac002a4 	muli	r11,r11,10
    2d58:	ad400044 	addi	r21,r21,1
    2d5c:	a809883a 	mov	r4,r21
    2d60:	12d7883a 	add	r11,r2,r11
    2d64:	88bff404 	addi	r2,r17,-48
    2d68:	30bff92e 	bgeu	r6,r2,2d50 <__alt_data_end+0xff002d50>
    2d6c:	dac03115 	stw	r11,196(sp)
    2d70:	003f2306 	br	2a00 <__alt_data_end+0xff002a00>
    2d74:	18c03fcc 	andi	r3,r3,255
    2d78:	18072b1e 	bne	r3,zero,4a28 <___vfprintf_internal_r+0x21b0>
    2d7c:	94800414 	ori	r18,r18,16
    2d80:	9080080c 	andi	r2,r18,32
    2d84:	10037b26 	beq	r2,zero,3b74 <___vfprintf_internal_r+0x12fc>
    2d88:	d9402d17 	ldw	r5,180(sp)
    2d8c:	28800117 	ldw	r2,4(r5)
    2d90:	2cc00017 	ldw	r19,0(r5)
    2d94:	29400204 	addi	r5,r5,8
    2d98:	d9402d15 	stw	r5,180(sp)
    2d9c:	102d883a 	mov	r22,r2
    2da0:	10044b16 	blt	r2,zero,3ed0 <___vfprintf_internal_r+0x1658>
    2da4:	d9402917 	ldw	r5,164(sp)
    2da8:	df002783 	ldbu	fp,158(sp)
    2dac:	2803bc16 	blt	r5,zero,3ca0 <___vfprintf_internal_r+0x1428>
    2db0:	00ffdfc4 	movi	r3,-129
    2db4:	9d84b03a 	or	r2,r19,r22
    2db8:	90e4703a 	and	r18,r18,r3
    2dbc:	10017726 	beq	r2,zero,339c <___vfprintf_internal_r+0xb24>
    2dc0:	b0038326 	beq	r22,zero,3bd0 <___vfprintf_internal_r+0x1358>
    2dc4:	dc402a15 	stw	r17,168(sp)
    2dc8:	dc001e04 	addi	r16,sp,120
    2dcc:	b023883a 	mov	r17,r22
    2dd0:	402d883a 	mov	r22,r8
    2dd4:	9809883a 	mov	r4,r19
    2dd8:	880b883a 	mov	r5,r17
    2ddc:	01800284 	movi	r6,10
    2de0:	000f883a 	mov	r7,zero
    2de4:	000ba0c0 	call	ba0c <__umoddi3>
    2de8:	10800c04 	addi	r2,r2,48
    2dec:	843fffc4 	addi	r16,r16,-1
    2df0:	9809883a 	mov	r4,r19
    2df4:	880b883a 	mov	r5,r17
    2df8:	80800005 	stb	r2,0(r16)
    2dfc:	01800284 	movi	r6,10
    2e00:	000f883a 	mov	r7,zero
    2e04:	000b4940 	call	b494 <__udivdi3>
    2e08:	1027883a 	mov	r19,r2
    2e0c:	10c4b03a 	or	r2,r2,r3
    2e10:	1823883a 	mov	r17,r3
    2e14:	103fef1e 	bne	r2,zero,2dd4 <__alt_data_end+0xff002dd4>
    2e18:	d8c02817 	ldw	r3,160(sp)
    2e1c:	dc402a17 	ldw	r17,168(sp)
    2e20:	b011883a 	mov	r8,r22
    2e24:	1c07c83a 	sub	r3,r3,r16
    2e28:	d8c02e15 	stw	r3,184(sp)
    2e2c:	00005906 	br	2f94 <___vfprintf_internal_r+0x71c>
    2e30:	18c03fcc 	andi	r3,r3,255
    2e34:	1806fa1e 	bne	r3,zero,4a20 <___vfprintf_internal_r+0x21a8>
    2e38:	9080020c 	andi	r2,r18,8
    2e3c:	10048a26 	beq	r2,zero,4068 <___vfprintf_internal_r+0x17f0>
    2e40:	d8c02d17 	ldw	r3,180(sp)
    2e44:	d9002d17 	ldw	r4,180(sp)
    2e48:	d9402d17 	ldw	r5,180(sp)
    2e4c:	18c00017 	ldw	r3,0(r3)
    2e50:	21000117 	ldw	r4,4(r4)
    2e54:	29400204 	addi	r5,r5,8
    2e58:	d8c03615 	stw	r3,216(sp)
    2e5c:	d9003815 	stw	r4,224(sp)
    2e60:	d9402d15 	stw	r5,180(sp)
    2e64:	d9003617 	ldw	r4,216(sp)
    2e68:	d9403817 	ldw	r5,224(sp)
    2e6c:	da003d15 	stw	r8,244(sp)
    2e70:	04000044 	movi	r16,1
    2e74:	000928c0 	call	928c <__fpclassifyd>
    2e78:	da003d17 	ldw	r8,244(sp)
    2e7c:	14041f1e 	bne	r2,r16,3efc <___vfprintf_internal_r+0x1684>
    2e80:	d9003617 	ldw	r4,216(sp)
    2e84:	d9403817 	ldw	r5,224(sp)
    2e88:	000d883a 	mov	r6,zero
    2e8c:	000f883a 	mov	r7,zero
    2e90:	000d3f00 	call	d3f0 <__ledf2>
    2e94:	da003d17 	ldw	r8,244(sp)
    2e98:	1005be16 	blt	r2,zero,4594 <___vfprintf_internal_r+0x1d1c>
    2e9c:	df002783 	ldbu	fp,158(sp)
    2ea0:	008011c4 	movi	r2,71
    2ea4:	1445330e 	bge	r2,r17,4374 <___vfprintf_internal_r+0x1afc>
    2ea8:	04000074 	movhi	r16,1
    2eac:	8401f904 	addi	r16,r16,2020
    2eb0:	00c000c4 	movi	r3,3
    2eb4:	00bfdfc4 	movi	r2,-129
    2eb8:	d8c02a15 	stw	r3,168(sp)
    2ebc:	90a4703a 	and	r18,r18,r2
    2ec0:	d8c02e15 	stw	r3,184(sp)
    2ec4:	d8002915 	stw	zero,164(sp)
    2ec8:	d8003215 	stw	zero,200(sp)
    2ecc:	00003706 	br	2fac <___vfprintf_internal_r+0x734>
    2ed0:	94800214 	ori	r18,r18,8
    2ed4:	ac400007 	ldb	r17,0(r21)
    2ed8:	003ec806 	br	29fc <__alt_data_end+0xff0029fc>
    2edc:	18c03fcc 	andi	r3,r3,255
    2ee0:	1806db1e 	bne	r3,zero,4a50 <___vfprintf_internal_r+0x21d8>
    2ee4:	94800414 	ori	r18,r18,16
    2ee8:	9080080c 	andi	r2,r18,32
    2eec:	1002d826 	beq	r2,zero,3a50 <___vfprintf_internal_r+0x11d8>
    2ef0:	d9402d17 	ldw	r5,180(sp)
    2ef4:	d8c02917 	ldw	r3,164(sp)
    2ef8:	d8002785 	stb	zero,158(sp)
    2efc:	28800204 	addi	r2,r5,8
    2f00:	2cc00017 	ldw	r19,0(r5)
    2f04:	2d800117 	ldw	r22,4(r5)
    2f08:	18048f16 	blt	r3,zero,4148 <___vfprintf_internal_r+0x18d0>
    2f0c:	013fdfc4 	movi	r4,-129
    2f10:	9d86b03a 	or	r3,r19,r22
    2f14:	d8802d15 	stw	r2,180(sp)
    2f18:	9124703a 	and	r18,r18,r4
    2f1c:	1802d91e 	bne	r3,zero,3a84 <___vfprintf_internal_r+0x120c>
    2f20:	d8c02917 	ldw	r3,164(sp)
    2f24:	0039883a 	mov	fp,zero
    2f28:	1805c326 	beq	r3,zero,4638 <___vfprintf_internal_r+0x1dc0>
    2f2c:	0027883a 	mov	r19,zero
    2f30:	002d883a 	mov	r22,zero
    2f34:	dc001e04 	addi	r16,sp,120
    2f38:	9806d0fa 	srli	r3,r19,3
    2f3c:	b008977a 	slli	r4,r22,29
    2f40:	b02cd0fa 	srli	r22,r22,3
    2f44:	9cc001cc 	andi	r19,r19,7
    2f48:	98800c04 	addi	r2,r19,48
    2f4c:	843fffc4 	addi	r16,r16,-1
    2f50:	20e6b03a 	or	r19,r4,r3
    2f54:	80800005 	stb	r2,0(r16)
    2f58:	9d86b03a 	or	r3,r19,r22
    2f5c:	183ff61e 	bne	r3,zero,2f38 <__alt_data_end+0xff002f38>
    2f60:	90c0004c 	andi	r3,r18,1
    2f64:	18013b26 	beq	r3,zero,3454 <___vfprintf_internal_r+0xbdc>
    2f68:	10803fcc 	andi	r2,r2,255
    2f6c:	1080201c 	xori	r2,r2,128
    2f70:	10bfe004 	addi	r2,r2,-128
    2f74:	00c00c04 	movi	r3,48
    2f78:	10c13626 	beq	r2,r3,3454 <___vfprintf_internal_r+0xbdc>
    2f7c:	80ffffc5 	stb	r3,-1(r16)
    2f80:	d8c02817 	ldw	r3,160(sp)
    2f84:	80bfffc4 	addi	r2,r16,-1
    2f88:	1021883a 	mov	r16,r2
    2f8c:	1887c83a 	sub	r3,r3,r2
    2f90:	d8c02e15 	stw	r3,184(sp)
    2f94:	d8802e17 	ldw	r2,184(sp)
    2f98:	d9002917 	ldw	r4,164(sp)
    2f9c:	1100010e 	bge	r2,r4,2fa4 <___vfprintf_internal_r+0x72c>
    2fa0:	2005883a 	mov	r2,r4
    2fa4:	d8802a15 	stw	r2,168(sp)
    2fa8:	d8003215 	stw	zero,200(sp)
    2fac:	e7003fcc 	andi	fp,fp,255
    2fb0:	e700201c 	xori	fp,fp,128
    2fb4:	e73fe004 	addi	fp,fp,-128
    2fb8:	e0000326 	beq	fp,zero,2fc8 <___vfprintf_internal_r+0x750>
    2fbc:	d8c02a17 	ldw	r3,168(sp)
    2fc0:	18c00044 	addi	r3,r3,1
    2fc4:	d8c02a15 	stw	r3,168(sp)
    2fc8:	90c0008c 	andi	r3,r18,2
    2fcc:	d8c02b15 	stw	r3,172(sp)
    2fd0:	18000326 	beq	r3,zero,2fe0 <___vfprintf_internal_r+0x768>
    2fd4:	d8c02a17 	ldw	r3,168(sp)
    2fd8:	18c00084 	addi	r3,r3,2
    2fdc:	d8c02a15 	stw	r3,168(sp)
    2fe0:	90c0210c 	andi	r3,r18,132
    2fe4:	d8c03015 	stw	r3,192(sp)
    2fe8:	1801a31e 	bne	r3,zero,3678 <___vfprintf_internal_r+0xe00>
    2fec:	d9003117 	ldw	r4,196(sp)
    2ff0:	d8c02a17 	ldw	r3,168(sp)
    2ff4:	20e7c83a 	sub	r19,r4,r3
    2ff8:	04c19f0e 	bge	zero,r19,3678 <___vfprintf_internal_r+0xe00>
    2ffc:	02400404 	movi	r9,16
    3000:	d8c02017 	ldw	r3,128(sp)
    3004:	d8801f17 	ldw	r2,124(sp)
    3008:	4cc50d0e 	bge	r9,r19,4440 <___vfprintf_internal_r+0x1bc8>
    300c:	01400074 	movhi	r5,1
    3010:	29420c84 	addi	r5,r5,2098
    3014:	dc403b15 	stw	r17,236(sp)
    3018:	d9403515 	stw	r5,212(sp)
    301c:	9823883a 	mov	r17,r19
    3020:	482d883a 	mov	r22,r9
    3024:	9027883a 	mov	r19,r18
    3028:	070001c4 	movi	fp,7
    302c:	8025883a 	mov	r18,r16
    3030:	dc002c17 	ldw	r16,176(sp)
    3034:	00000306 	br	3044 <___vfprintf_internal_r+0x7cc>
    3038:	8c7ffc04 	addi	r17,r17,-16
    303c:	42000204 	addi	r8,r8,8
    3040:	b440130e 	bge	r22,r17,3090 <___vfprintf_internal_r+0x818>
    3044:	01000074 	movhi	r4,1
    3048:	18c00404 	addi	r3,r3,16
    304c:	10800044 	addi	r2,r2,1
    3050:	21020c84 	addi	r4,r4,2098
    3054:	41000015 	stw	r4,0(r8)
    3058:	45800115 	stw	r22,4(r8)
    305c:	d8c02015 	stw	r3,128(sp)
    3060:	d8801f15 	stw	r2,124(sp)
    3064:	e0bff40e 	bge	fp,r2,3038 <__alt_data_end+0xff003038>
    3068:	d9801e04 	addi	r6,sp,120
    306c:	b80b883a 	mov	r5,r23
    3070:	8009883a 	mov	r4,r16
    3074:	00096140 	call	9614 <__sprint_r>
    3078:	103f011e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    307c:	8c7ffc04 	addi	r17,r17,-16
    3080:	d8c02017 	ldw	r3,128(sp)
    3084:	d8801f17 	ldw	r2,124(sp)
    3088:	da000404 	addi	r8,sp,16
    308c:	b47fed16 	blt	r22,r17,3044 <__alt_data_end+0xff003044>
    3090:	9021883a 	mov	r16,r18
    3094:	9825883a 	mov	r18,r19
    3098:	8827883a 	mov	r19,r17
    309c:	dc403b17 	ldw	r17,236(sp)
    30a0:	d9403517 	ldw	r5,212(sp)
    30a4:	98c7883a 	add	r3,r19,r3
    30a8:	10800044 	addi	r2,r2,1
    30ac:	41400015 	stw	r5,0(r8)
    30b0:	44c00115 	stw	r19,4(r8)
    30b4:	d8c02015 	stw	r3,128(sp)
    30b8:	d8801f15 	stw	r2,124(sp)
    30bc:	010001c4 	movi	r4,7
    30c0:	2082a316 	blt	r4,r2,3b50 <___vfprintf_internal_r+0x12d8>
    30c4:	df002787 	ldb	fp,158(sp)
    30c8:	42000204 	addi	r8,r8,8
    30cc:	e0000c26 	beq	fp,zero,3100 <___vfprintf_internal_r+0x888>
    30d0:	d8801f17 	ldw	r2,124(sp)
    30d4:	d9002784 	addi	r4,sp,158
    30d8:	18c00044 	addi	r3,r3,1
    30dc:	10800044 	addi	r2,r2,1
    30e0:	41000015 	stw	r4,0(r8)
    30e4:	01000044 	movi	r4,1
    30e8:	41000115 	stw	r4,4(r8)
    30ec:	d8c02015 	stw	r3,128(sp)
    30f0:	d8801f15 	stw	r2,124(sp)
    30f4:	010001c4 	movi	r4,7
    30f8:	20823c16 	blt	r4,r2,39ec <___vfprintf_internal_r+0x1174>
    30fc:	42000204 	addi	r8,r8,8
    3100:	d8802b17 	ldw	r2,172(sp)
    3104:	10000c26 	beq	r2,zero,3138 <___vfprintf_internal_r+0x8c0>
    3108:	d8801f17 	ldw	r2,124(sp)
    310c:	d9002704 	addi	r4,sp,156
    3110:	18c00084 	addi	r3,r3,2
    3114:	10800044 	addi	r2,r2,1
    3118:	41000015 	stw	r4,0(r8)
    311c:	01000084 	movi	r4,2
    3120:	41000115 	stw	r4,4(r8)
    3124:	d8c02015 	stw	r3,128(sp)
    3128:	d8801f15 	stw	r2,124(sp)
    312c:	010001c4 	movi	r4,7
    3130:	20823616 	blt	r4,r2,3a0c <___vfprintf_internal_r+0x1194>
    3134:	42000204 	addi	r8,r8,8
    3138:	d9003017 	ldw	r4,192(sp)
    313c:	00802004 	movi	r2,128
    3140:	20819926 	beq	r4,r2,37a8 <___vfprintf_internal_r+0xf30>
    3144:	d9402917 	ldw	r5,164(sp)
    3148:	d8802e17 	ldw	r2,184(sp)
    314c:	28adc83a 	sub	r22,r5,r2
    3150:	0580310e 	bge	zero,r22,3218 <___vfprintf_internal_r+0x9a0>
    3154:	07000404 	movi	fp,16
    3158:	d8801f17 	ldw	r2,124(sp)
    315c:	e584140e 	bge	fp,r22,41b0 <___vfprintf_internal_r+0x1938>
    3160:	01400074 	movhi	r5,1
    3164:	29420884 	addi	r5,r5,2082
    3168:	dc402915 	stw	r17,164(sp)
    316c:	d9402b15 	stw	r5,172(sp)
    3170:	b023883a 	mov	r17,r22
    3174:	04c001c4 	movi	r19,7
    3178:	a82d883a 	mov	r22,r21
    317c:	902b883a 	mov	r21,r18
    3180:	8025883a 	mov	r18,r16
    3184:	dc002c17 	ldw	r16,176(sp)
    3188:	00000306 	br	3198 <___vfprintf_internal_r+0x920>
    318c:	8c7ffc04 	addi	r17,r17,-16
    3190:	42000204 	addi	r8,r8,8
    3194:	e440110e 	bge	fp,r17,31dc <___vfprintf_internal_r+0x964>
    3198:	18c00404 	addi	r3,r3,16
    319c:	10800044 	addi	r2,r2,1
    31a0:	45000015 	stw	r20,0(r8)
    31a4:	47000115 	stw	fp,4(r8)
    31a8:	d8c02015 	stw	r3,128(sp)
    31ac:	d8801f15 	stw	r2,124(sp)
    31b0:	98bff60e 	bge	r19,r2,318c <__alt_data_end+0xff00318c>
    31b4:	d9801e04 	addi	r6,sp,120
    31b8:	b80b883a 	mov	r5,r23
    31bc:	8009883a 	mov	r4,r16
    31c0:	00096140 	call	9614 <__sprint_r>
    31c4:	103eae1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    31c8:	8c7ffc04 	addi	r17,r17,-16
    31cc:	d8c02017 	ldw	r3,128(sp)
    31d0:	d8801f17 	ldw	r2,124(sp)
    31d4:	da000404 	addi	r8,sp,16
    31d8:	e47fef16 	blt	fp,r17,3198 <__alt_data_end+0xff003198>
    31dc:	9021883a 	mov	r16,r18
    31e0:	a825883a 	mov	r18,r21
    31e4:	b02b883a 	mov	r21,r22
    31e8:	882d883a 	mov	r22,r17
    31ec:	dc402917 	ldw	r17,164(sp)
    31f0:	d9002b17 	ldw	r4,172(sp)
    31f4:	1d87883a 	add	r3,r3,r22
    31f8:	10800044 	addi	r2,r2,1
    31fc:	41000015 	stw	r4,0(r8)
    3200:	45800115 	stw	r22,4(r8)
    3204:	d8c02015 	stw	r3,128(sp)
    3208:	d8801f15 	stw	r2,124(sp)
    320c:	010001c4 	movi	r4,7
    3210:	2081ee16 	blt	r4,r2,39cc <___vfprintf_internal_r+0x1154>
    3214:	42000204 	addi	r8,r8,8
    3218:	9080400c 	andi	r2,r18,256
    321c:	1001181e 	bne	r2,zero,3680 <___vfprintf_internal_r+0xe08>
    3220:	d9402e17 	ldw	r5,184(sp)
    3224:	d8801f17 	ldw	r2,124(sp)
    3228:	44000015 	stw	r16,0(r8)
    322c:	1947883a 	add	r3,r3,r5
    3230:	10800044 	addi	r2,r2,1
    3234:	41400115 	stw	r5,4(r8)
    3238:	d8c02015 	stw	r3,128(sp)
    323c:	d8801f15 	stw	r2,124(sp)
    3240:	010001c4 	movi	r4,7
    3244:	2081d316 	blt	r4,r2,3994 <___vfprintf_internal_r+0x111c>
    3248:	42000204 	addi	r8,r8,8
    324c:	9480010c 	andi	r18,r18,4
    3250:	90003226 	beq	r18,zero,331c <___vfprintf_internal_r+0xaa4>
    3254:	d9403117 	ldw	r5,196(sp)
    3258:	d8802a17 	ldw	r2,168(sp)
    325c:	28a1c83a 	sub	r16,r5,r2
    3260:	04002e0e 	bge	zero,r16,331c <___vfprintf_internal_r+0xaa4>
    3264:	04400404 	movi	r17,16
    3268:	d8801f17 	ldw	r2,124(sp)
    326c:	8c04a20e 	bge	r17,r16,44f8 <___vfprintf_internal_r+0x1c80>
    3270:	01400074 	movhi	r5,1
    3274:	29420c84 	addi	r5,r5,2098
    3278:	d9403515 	stw	r5,212(sp)
    327c:	048001c4 	movi	r18,7
    3280:	dcc02c17 	ldw	r19,176(sp)
    3284:	00000306 	br	3294 <___vfprintf_internal_r+0xa1c>
    3288:	843ffc04 	addi	r16,r16,-16
    328c:	42000204 	addi	r8,r8,8
    3290:	8c00130e 	bge	r17,r16,32e0 <___vfprintf_internal_r+0xa68>
    3294:	01000074 	movhi	r4,1
    3298:	18c00404 	addi	r3,r3,16
    329c:	10800044 	addi	r2,r2,1
    32a0:	21020c84 	addi	r4,r4,2098
    32a4:	41000015 	stw	r4,0(r8)
    32a8:	44400115 	stw	r17,4(r8)
    32ac:	d8c02015 	stw	r3,128(sp)
    32b0:	d8801f15 	stw	r2,124(sp)
    32b4:	90bff40e 	bge	r18,r2,3288 <__alt_data_end+0xff003288>
    32b8:	d9801e04 	addi	r6,sp,120
    32bc:	b80b883a 	mov	r5,r23
    32c0:	9809883a 	mov	r4,r19
    32c4:	00096140 	call	9614 <__sprint_r>
    32c8:	103e6d1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    32cc:	843ffc04 	addi	r16,r16,-16
    32d0:	d8c02017 	ldw	r3,128(sp)
    32d4:	d8801f17 	ldw	r2,124(sp)
    32d8:	da000404 	addi	r8,sp,16
    32dc:	8c3fed16 	blt	r17,r16,3294 <__alt_data_end+0xff003294>
    32e0:	d9403517 	ldw	r5,212(sp)
    32e4:	1c07883a 	add	r3,r3,r16
    32e8:	10800044 	addi	r2,r2,1
    32ec:	41400015 	stw	r5,0(r8)
    32f0:	44000115 	stw	r16,4(r8)
    32f4:	d8c02015 	stw	r3,128(sp)
    32f8:	d8801f15 	stw	r2,124(sp)
    32fc:	010001c4 	movi	r4,7
    3300:	2080060e 	bge	r4,r2,331c <___vfprintf_internal_r+0xaa4>
    3304:	d9002c17 	ldw	r4,176(sp)
    3308:	d9801e04 	addi	r6,sp,120
    330c:	b80b883a 	mov	r5,r23
    3310:	00096140 	call	9614 <__sprint_r>
    3314:	103e5a1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3318:	d8c02017 	ldw	r3,128(sp)
    331c:	d8803117 	ldw	r2,196(sp)
    3320:	d9002a17 	ldw	r4,168(sp)
    3324:	1100010e 	bge	r2,r4,332c <___vfprintf_internal_r+0xab4>
    3328:	2005883a 	mov	r2,r4
    332c:	d9402f17 	ldw	r5,188(sp)
    3330:	288b883a 	add	r5,r5,r2
    3334:	d9402f15 	stw	r5,188(sp)
    3338:	18019e1e 	bne	r3,zero,39b4 <___vfprintf_internal_r+0x113c>
    333c:	a8800007 	ldb	r2,0(r21)
    3340:	d8001f15 	stw	zero,124(sp)
    3344:	da000404 	addi	r8,sp,16
    3348:	103d851e 	bne	r2,zero,2960 <__alt_data_end+0xff002960>
    334c:	a821883a 	mov	r16,r21
    3350:	003d9b06 	br	29c0 <__alt_data_end+0xff0029c0>
    3354:	18c03fcc 	andi	r3,r3,255
    3358:	1805c11e 	bne	r3,zero,4a60 <___vfprintf_internal_r+0x21e8>
    335c:	94800414 	ori	r18,r18,16
    3360:	9080080c 	andi	r2,r18,32
    3364:	10020c26 	beq	r2,zero,3b98 <___vfprintf_internal_r+0x1320>
    3368:	d8802d17 	ldw	r2,180(sp)
    336c:	d9002917 	ldw	r4,164(sp)
    3370:	d8002785 	stb	zero,158(sp)
    3374:	10c00204 	addi	r3,r2,8
    3378:	14c00017 	ldw	r19,0(r2)
    337c:	15800117 	ldw	r22,4(r2)
    3380:	20040f16 	blt	r4,zero,43c0 <___vfprintf_internal_r+0x1b48>
    3384:	013fdfc4 	movi	r4,-129
    3388:	9d84b03a 	or	r2,r19,r22
    338c:	d8c02d15 	stw	r3,180(sp)
    3390:	9124703a 	and	r18,r18,r4
    3394:	0039883a 	mov	fp,zero
    3398:	103e891e 	bne	r2,zero,2dc0 <__alt_data_end+0xff002dc0>
    339c:	d9002917 	ldw	r4,164(sp)
    33a0:	2002c11e 	bne	r4,zero,3ea8 <___vfprintf_internal_r+0x1630>
    33a4:	d8002915 	stw	zero,164(sp)
    33a8:	d8002e15 	stw	zero,184(sp)
    33ac:	dc001e04 	addi	r16,sp,120
    33b0:	003ef806 	br	2f94 <__alt_data_end+0xff002f94>
    33b4:	18c03fcc 	andi	r3,r3,255
    33b8:	18059d1e 	bne	r3,zero,4a30 <___vfprintf_internal_r+0x21b8>
    33bc:	01400074 	movhi	r5,1
    33c0:	2941fc04 	addi	r5,r5,2032
    33c4:	d9403915 	stw	r5,228(sp)
    33c8:	9080080c 	andi	r2,r18,32
    33cc:	10005226 	beq	r2,zero,3518 <___vfprintf_internal_r+0xca0>
    33d0:	d8802d17 	ldw	r2,180(sp)
    33d4:	14c00017 	ldw	r19,0(r2)
    33d8:	15800117 	ldw	r22,4(r2)
    33dc:	10800204 	addi	r2,r2,8
    33e0:	d8802d15 	stw	r2,180(sp)
    33e4:	9080004c 	andi	r2,r18,1
    33e8:	10019026 	beq	r2,zero,3a2c <___vfprintf_internal_r+0x11b4>
    33ec:	9d84b03a 	or	r2,r19,r22
    33f0:	10036926 	beq	r2,zero,4198 <___vfprintf_internal_r+0x1920>
    33f4:	d8c02917 	ldw	r3,164(sp)
    33f8:	00800c04 	movi	r2,48
    33fc:	d8802705 	stb	r2,156(sp)
    3400:	dc402745 	stb	r17,157(sp)
    3404:	d8002785 	stb	zero,158(sp)
    3408:	90800094 	ori	r2,r18,2
    340c:	18045d16 	blt	r3,zero,4584 <___vfprintf_internal_r+0x1d0c>
    3410:	00bfdfc4 	movi	r2,-129
    3414:	90a4703a 	and	r18,r18,r2
    3418:	94800094 	ori	r18,r18,2
    341c:	0039883a 	mov	fp,zero
    3420:	d9003917 	ldw	r4,228(sp)
    3424:	dc001e04 	addi	r16,sp,120
    3428:	988003cc 	andi	r2,r19,15
    342c:	b006973a 	slli	r3,r22,28
    3430:	2085883a 	add	r2,r4,r2
    3434:	9826d13a 	srli	r19,r19,4
    3438:	10800003 	ldbu	r2,0(r2)
    343c:	b02cd13a 	srli	r22,r22,4
    3440:	843fffc4 	addi	r16,r16,-1
    3444:	1ce6b03a 	or	r19,r3,r19
    3448:	80800005 	stb	r2,0(r16)
    344c:	9d84b03a 	or	r2,r19,r22
    3450:	103ff51e 	bne	r2,zero,3428 <__alt_data_end+0xff003428>
    3454:	d8c02817 	ldw	r3,160(sp)
    3458:	1c07c83a 	sub	r3,r3,r16
    345c:	d8c02e15 	stw	r3,184(sp)
    3460:	003ecc06 	br	2f94 <__alt_data_end+0xff002f94>
    3464:	18c03fcc 	andi	r3,r3,255
    3468:	183e9f26 	beq	r3,zero,2ee8 <__alt_data_end+0xff002ee8>
    346c:	d9c02785 	stb	r7,158(sp)
    3470:	003e9d06 	br	2ee8 <__alt_data_end+0xff002ee8>
    3474:	00c00044 	movi	r3,1
    3478:	01c00ac4 	movi	r7,43
    347c:	ac400007 	ldb	r17,0(r21)
    3480:	003d5e06 	br	29fc <__alt_data_end+0xff0029fc>
    3484:	94800814 	ori	r18,r18,32
    3488:	ac400007 	ldb	r17,0(r21)
    348c:	003d5b06 	br	29fc <__alt_data_end+0xff0029fc>
    3490:	d8c02d17 	ldw	r3,180(sp)
    3494:	d8002785 	stb	zero,158(sp)
    3498:	1c000017 	ldw	r16,0(r3)
    349c:	1cc00104 	addi	r19,r3,4
    34a0:	80041926 	beq	r16,zero,4508 <___vfprintf_internal_r+0x1c90>
    34a4:	d9002917 	ldw	r4,164(sp)
    34a8:	2003d016 	blt	r4,zero,43ec <___vfprintf_internal_r+0x1b74>
    34ac:	200d883a 	mov	r6,r4
    34b0:	000b883a 	mov	r5,zero
    34b4:	8009883a 	mov	r4,r16
    34b8:	da003d15 	stw	r8,244(sp)
    34bc:	000787c0 	call	787c <memchr>
    34c0:	da003d17 	ldw	r8,244(sp)
    34c4:	10045426 	beq	r2,zero,4618 <___vfprintf_internal_r+0x1da0>
    34c8:	1405c83a 	sub	r2,r2,r16
    34cc:	d8802e15 	stw	r2,184(sp)
    34d0:	1003cc16 	blt	r2,zero,4404 <___vfprintf_internal_r+0x1b8c>
    34d4:	df002783 	ldbu	fp,158(sp)
    34d8:	d8802a15 	stw	r2,168(sp)
    34dc:	dcc02d15 	stw	r19,180(sp)
    34e0:	d8002915 	stw	zero,164(sp)
    34e4:	d8003215 	stw	zero,200(sp)
    34e8:	003eb006 	br	2fac <__alt_data_end+0xff002fac>
    34ec:	18c03fcc 	andi	r3,r3,255
    34f0:	183f9b26 	beq	r3,zero,3360 <__alt_data_end+0xff003360>
    34f4:	d9c02785 	stb	r7,158(sp)
    34f8:	003f9906 	br	3360 <__alt_data_end+0xff003360>
    34fc:	18c03fcc 	andi	r3,r3,255
    3500:	1805551e 	bne	r3,zero,4a58 <___vfprintf_internal_r+0x21e0>
    3504:	01400074 	movhi	r5,1
    3508:	29420104 	addi	r5,r5,2052
    350c:	d9403915 	stw	r5,228(sp)
    3510:	9080080c 	andi	r2,r18,32
    3514:	103fae1e 	bne	r2,zero,33d0 <__alt_data_end+0xff0033d0>
    3518:	9080040c 	andi	r2,r18,16
    351c:	1002de26 	beq	r2,zero,4098 <___vfprintf_internal_r+0x1820>
    3520:	d8c02d17 	ldw	r3,180(sp)
    3524:	002d883a 	mov	r22,zero
    3528:	1cc00017 	ldw	r19,0(r3)
    352c:	18c00104 	addi	r3,r3,4
    3530:	d8c02d15 	stw	r3,180(sp)
    3534:	003fab06 	br	33e4 <__alt_data_end+0xff0033e4>
    3538:	38803fcc 	andi	r2,r7,255
    353c:	1080201c 	xori	r2,r2,128
    3540:	10bfe004 	addi	r2,r2,-128
    3544:	1002d21e 	bne	r2,zero,4090 <___vfprintf_internal_r+0x1818>
    3548:	00c00044 	movi	r3,1
    354c:	01c00804 	movi	r7,32
    3550:	ac400007 	ldb	r17,0(r21)
    3554:	003d2906 	br	29fc <__alt_data_end+0xff0029fc>
    3558:	94800054 	ori	r18,r18,1
    355c:	ac400007 	ldb	r17,0(r21)
    3560:	003d2606 	br	29fc <__alt_data_end+0xff0029fc>
    3564:	18c03fcc 	andi	r3,r3,255
    3568:	183e0526 	beq	r3,zero,2d80 <__alt_data_end+0xff002d80>
    356c:	d9c02785 	stb	r7,158(sp)
    3570:	003e0306 	br	2d80 <__alt_data_end+0xff002d80>
    3574:	94801014 	ori	r18,r18,64
    3578:	ac400007 	ldb	r17,0(r21)
    357c:	003d1f06 	br	29fc <__alt_data_end+0xff0029fc>
    3580:	ac400007 	ldb	r17,0(r21)
    3584:	8a438726 	beq	r17,r9,43a4 <___vfprintf_internal_r+0x1b2c>
    3588:	94800414 	ori	r18,r18,16
    358c:	003d1b06 	br	29fc <__alt_data_end+0xff0029fc>
    3590:	18c03fcc 	andi	r3,r3,255
    3594:	1805341e 	bne	r3,zero,4a68 <___vfprintf_internal_r+0x21f0>
    3598:	9080080c 	andi	r2,r18,32
    359c:	1002cd26 	beq	r2,zero,40d4 <___vfprintf_internal_r+0x185c>
    35a0:	d9402d17 	ldw	r5,180(sp)
    35a4:	d9002f17 	ldw	r4,188(sp)
    35a8:	28800017 	ldw	r2,0(r5)
    35ac:	2007d7fa 	srai	r3,r4,31
    35b0:	29400104 	addi	r5,r5,4
    35b4:	d9402d15 	stw	r5,180(sp)
    35b8:	11000015 	stw	r4,0(r2)
    35bc:	10c00115 	stw	r3,4(r2)
    35c0:	003ce506 	br	2958 <__alt_data_end+0xff002958>
    35c4:	d8c02d17 	ldw	r3,180(sp)
    35c8:	d9002d17 	ldw	r4,180(sp)
    35cc:	d8002785 	stb	zero,158(sp)
    35d0:	18800017 	ldw	r2,0(r3)
    35d4:	21000104 	addi	r4,r4,4
    35d8:	00c00044 	movi	r3,1
    35dc:	d8c02a15 	stw	r3,168(sp)
    35e0:	d8801405 	stb	r2,80(sp)
    35e4:	d9002d15 	stw	r4,180(sp)
    35e8:	d8c02e15 	stw	r3,184(sp)
    35ec:	d8002915 	stw	zero,164(sp)
    35f0:	d8003215 	stw	zero,200(sp)
    35f4:	dc001404 	addi	r16,sp,80
    35f8:	0039883a 	mov	fp,zero
    35fc:	003e7206 	br	2fc8 <__alt_data_end+0xff002fc8>
    3600:	01000074 	movhi	r4,1
    3604:	21020104 	addi	r4,r4,2052
    3608:	0039883a 	mov	fp,zero
    360c:	d9003915 	stw	r4,228(sp)
    3610:	04401e04 	movi	r17,120
    3614:	003f8206 	br	3420 <__alt_data_end+0xff003420>
    3618:	18c03fcc 	andi	r3,r3,255
    361c:	1805061e 	bne	r3,zero,4a38 <___vfprintf_internal_r+0x21c0>
    3620:	883d9126 	beq	r17,zero,2c68 <__alt_data_end+0xff002c68>
    3624:	00c00044 	movi	r3,1
    3628:	d8c02a15 	stw	r3,168(sp)
    362c:	dc401405 	stb	r17,80(sp)
    3630:	d8002785 	stb	zero,158(sp)
    3634:	003fec06 	br	35e8 <__alt_data_end+0xff0035e8>
    3638:	01400074 	movhi	r5,1
    363c:	29420104 	addi	r5,r5,2052
    3640:	d9403915 	stw	r5,228(sp)
    3644:	d8c02d15 	stw	r3,180(sp)
    3648:	1025883a 	mov	r18,r2
    364c:	04401e04 	movi	r17,120
    3650:	9d84b03a 	or	r2,r19,r22
    3654:	1000fc1e 	bne	r2,zero,3a48 <___vfprintf_internal_r+0x11d0>
    3658:	0039883a 	mov	fp,zero
    365c:	00800084 	movi	r2,2
    3660:	10803fcc 	andi	r2,r2,255
    3664:	00c00044 	movi	r3,1
    3668:	10c20f26 	beq	r2,r3,3ea8 <___vfprintf_internal_r+0x1630>
    366c:	00c00084 	movi	r3,2
    3670:	10fd6326 	beq	r2,r3,2c00 <__alt_data_end+0xff002c00>
    3674:	003e2d06 	br	2f2c <__alt_data_end+0xff002f2c>
    3678:	d8c02017 	ldw	r3,128(sp)
    367c:	003e9306 	br	30cc <__alt_data_end+0xff0030cc>
    3680:	00801944 	movi	r2,101
    3684:	14407e0e 	bge	r2,r17,3880 <___vfprintf_internal_r+0x1008>
    3688:	d9003617 	ldw	r4,216(sp)
    368c:	d9403817 	ldw	r5,224(sp)
    3690:	000d883a 	mov	r6,zero
    3694:	000f883a 	mov	r7,zero
    3698:	d8c03c15 	stw	r3,240(sp)
    369c:	da003d15 	stw	r8,244(sp)
    36a0:	000d28c0 	call	d28c <__eqdf2>
    36a4:	d8c03c17 	ldw	r3,240(sp)
    36a8:	da003d17 	ldw	r8,244(sp)
    36ac:	1000f71e 	bne	r2,zero,3a8c <___vfprintf_internal_r+0x1214>
    36b0:	d8801f17 	ldw	r2,124(sp)
    36b4:	01000074 	movhi	r4,1
    36b8:	21020804 	addi	r4,r4,2080
    36bc:	18c00044 	addi	r3,r3,1
    36c0:	10800044 	addi	r2,r2,1
    36c4:	41000015 	stw	r4,0(r8)
    36c8:	01000044 	movi	r4,1
    36cc:	41000115 	stw	r4,4(r8)
    36d0:	d8c02015 	stw	r3,128(sp)
    36d4:	d8801f15 	stw	r2,124(sp)
    36d8:	010001c4 	movi	r4,7
    36dc:	2082b816 	blt	r4,r2,41c0 <___vfprintf_internal_r+0x1948>
    36e0:	42000204 	addi	r8,r8,8
    36e4:	d8802617 	ldw	r2,152(sp)
    36e8:	d9403317 	ldw	r5,204(sp)
    36ec:	11400216 	blt	r2,r5,36f8 <___vfprintf_internal_r+0xe80>
    36f0:	9080004c 	andi	r2,r18,1
    36f4:	103ed526 	beq	r2,zero,324c <__alt_data_end+0xff00324c>
    36f8:	d8803717 	ldw	r2,220(sp)
    36fc:	d9003417 	ldw	r4,208(sp)
    3700:	d9403717 	ldw	r5,220(sp)
    3704:	1887883a 	add	r3,r3,r2
    3708:	d8801f17 	ldw	r2,124(sp)
    370c:	41000015 	stw	r4,0(r8)
    3710:	41400115 	stw	r5,4(r8)
    3714:	10800044 	addi	r2,r2,1
    3718:	d8c02015 	stw	r3,128(sp)
    371c:	d8801f15 	stw	r2,124(sp)
    3720:	010001c4 	movi	r4,7
    3724:	20832916 	blt	r4,r2,43cc <___vfprintf_internal_r+0x1b54>
    3728:	42000204 	addi	r8,r8,8
    372c:	d8803317 	ldw	r2,204(sp)
    3730:	143fffc4 	addi	r16,r2,-1
    3734:	043ec50e 	bge	zero,r16,324c <__alt_data_end+0xff00324c>
    3738:	04400404 	movi	r17,16
    373c:	d8801f17 	ldw	r2,124(sp)
    3740:	8c00880e 	bge	r17,r16,3964 <___vfprintf_internal_r+0x10ec>
    3744:	01400074 	movhi	r5,1
    3748:	29420884 	addi	r5,r5,2082
    374c:	d9402b15 	stw	r5,172(sp)
    3750:	058001c4 	movi	r22,7
    3754:	dcc02c17 	ldw	r19,176(sp)
    3758:	00000306 	br	3768 <___vfprintf_internal_r+0xef0>
    375c:	42000204 	addi	r8,r8,8
    3760:	843ffc04 	addi	r16,r16,-16
    3764:	8c00820e 	bge	r17,r16,3970 <___vfprintf_internal_r+0x10f8>
    3768:	18c00404 	addi	r3,r3,16
    376c:	10800044 	addi	r2,r2,1
    3770:	45000015 	stw	r20,0(r8)
    3774:	44400115 	stw	r17,4(r8)
    3778:	d8c02015 	stw	r3,128(sp)
    377c:	d8801f15 	stw	r2,124(sp)
    3780:	b0bff60e 	bge	r22,r2,375c <__alt_data_end+0xff00375c>
    3784:	d9801e04 	addi	r6,sp,120
    3788:	b80b883a 	mov	r5,r23
    378c:	9809883a 	mov	r4,r19
    3790:	00096140 	call	9614 <__sprint_r>
    3794:	103d3a1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3798:	d8c02017 	ldw	r3,128(sp)
    379c:	d8801f17 	ldw	r2,124(sp)
    37a0:	da000404 	addi	r8,sp,16
    37a4:	003fee06 	br	3760 <__alt_data_end+0xff003760>
    37a8:	d9403117 	ldw	r5,196(sp)
    37ac:	d8802a17 	ldw	r2,168(sp)
    37b0:	28adc83a 	sub	r22,r5,r2
    37b4:	05be630e 	bge	zero,r22,3144 <__alt_data_end+0xff003144>
    37b8:	07000404 	movi	fp,16
    37bc:	d8801f17 	ldw	r2,124(sp)
    37c0:	e5838f0e 	bge	fp,r22,4600 <___vfprintf_internal_r+0x1d88>
    37c4:	01400074 	movhi	r5,1
    37c8:	29420884 	addi	r5,r5,2082
    37cc:	dc403015 	stw	r17,192(sp)
    37d0:	d9402b15 	stw	r5,172(sp)
    37d4:	b023883a 	mov	r17,r22
    37d8:	04c001c4 	movi	r19,7
    37dc:	a82d883a 	mov	r22,r21
    37e0:	902b883a 	mov	r21,r18
    37e4:	8025883a 	mov	r18,r16
    37e8:	dc002c17 	ldw	r16,176(sp)
    37ec:	00000306 	br	37fc <___vfprintf_internal_r+0xf84>
    37f0:	8c7ffc04 	addi	r17,r17,-16
    37f4:	42000204 	addi	r8,r8,8
    37f8:	e440110e 	bge	fp,r17,3840 <___vfprintf_internal_r+0xfc8>
    37fc:	18c00404 	addi	r3,r3,16
    3800:	10800044 	addi	r2,r2,1
    3804:	45000015 	stw	r20,0(r8)
    3808:	47000115 	stw	fp,4(r8)
    380c:	d8c02015 	stw	r3,128(sp)
    3810:	d8801f15 	stw	r2,124(sp)
    3814:	98bff60e 	bge	r19,r2,37f0 <__alt_data_end+0xff0037f0>
    3818:	d9801e04 	addi	r6,sp,120
    381c:	b80b883a 	mov	r5,r23
    3820:	8009883a 	mov	r4,r16
    3824:	00096140 	call	9614 <__sprint_r>
    3828:	103d151e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    382c:	8c7ffc04 	addi	r17,r17,-16
    3830:	d8c02017 	ldw	r3,128(sp)
    3834:	d8801f17 	ldw	r2,124(sp)
    3838:	da000404 	addi	r8,sp,16
    383c:	e47fef16 	blt	fp,r17,37fc <__alt_data_end+0xff0037fc>
    3840:	9021883a 	mov	r16,r18
    3844:	a825883a 	mov	r18,r21
    3848:	b02b883a 	mov	r21,r22
    384c:	882d883a 	mov	r22,r17
    3850:	dc403017 	ldw	r17,192(sp)
    3854:	d9002b17 	ldw	r4,172(sp)
    3858:	1d87883a 	add	r3,r3,r22
    385c:	10800044 	addi	r2,r2,1
    3860:	41000015 	stw	r4,0(r8)
    3864:	45800115 	stw	r22,4(r8)
    3868:	d8c02015 	stw	r3,128(sp)
    386c:	d8801f15 	stw	r2,124(sp)
    3870:	010001c4 	movi	r4,7
    3874:	20818e16 	blt	r4,r2,3eb0 <___vfprintf_internal_r+0x1638>
    3878:	42000204 	addi	r8,r8,8
    387c:	003e3106 	br	3144 <__alt_data_end+0xff003144>
    3880:	d9403317 	ldw	r5,204(sp)
    3884:	00800044 	movi	r2,1
    3888:	18c00044 	addi	r3,r3,1
    388c:	1141530e 	bge	r2,r5,3ddc <___vfprintf_internal_r+0x1564>
    3890:	dc401f17 	ldw	r17,124(sp)
    3894:	00800044 	movi	r2,1
    3898:	40800115 	stw	r2,4(r8)
    389c:	8c400044 	addi	r17,r17,1
    38a0:	44000015 	stw	r16,0(r8)
    38a4:	d8c02015 	stw	r3,128(sp)
    38a8:	dc401f15 	stw	r17,124(sp)
    38ac:	008001c4 	movi	r2,7
    38b0:	14416b16 	blt	r2,r17,3e60 <___vfprintf_internal_r+0x15e8>
    38b4:	42000204 	addi	r8,r8,8
    38b8:	d8803717 	ldw	r2,220(sp)
    38bc:	d9003417 	ldw	r4,208(sp)
    38c0:	8c400044 	addi	r17,r17,1
    38c4:	10c7883a 	add	r3,r2,r3
    38c8:	40800115 	stw	r2,4(r8)
    38cc:	41000015 	stw	r4,0(r8)
    38d0:	d8c02015 	stw	r3,128(sp)
    38d4:	dc401f15 	stw	r17,124(sp)
    38d8:	008001c4 	movi	r2,7
    38dc:	14416916 	blt	r2,r17,3e84 <___vfprintf_internal_r+0x160c>
    38e0:	45800204 	addi	r22,r8,8
    38e4:	d9003617 	ldw	r4,216(sp)
    38e8:	d9403817 	ldw	r5,224(sp)
    38ec:	000d883a 	mov	r6,zero
    38f0:	000f883a 	mov	r7,zero
    38f4:	d8c03c15 	stw	r3,240(sp)
    38f8:	000d28c0 	call	d28c <__eqdf2>
    38fc:	d8c03c17 	ldw	r3,240(sp)
    3900:	1000bc26 	beq	r2,zero,3bf4 <___vfprintf_internal_r+0x137c>
    3904:	d9403317 	ldw	r5,204(sp)
    3908:	84000044 	addi	r16,r16,1
    390c:	8c400044 	addi	r17,r17,1
    3910:	28bfffc4 	addi	r2,r5,-1
    3914:	1887883a 	add	r3,r3,r2
    3918:	b0800115 	stw	r2,4(r22)
    391c:	b4000015 	stw	r16,0(r22)
    3920:	d8c02015 	stw	r3,128(sp)
    3924:	dc401f15 	stw	r17,124(sp)
    3928:	008001c4 	movi	r2,7
    392c:	14414316 	blt	r2,r17,3e3c <___vfprintf_internal_r+0x15c4>
    3930:	b5800204 	addi	r22,r22,8
    3934:	d9003a17 	ldw	r4,232(sp)
    3938:	df0022c4 	addi	fp,sp,139
    393c:	8c400044 	addi	r17,r17,1
    3940:	20c7883a 	add	r3,r4,r3
    3944:	b7000015 	stw	fp,0(r22)
    3948:	b1000115 	stw	r4,4(r22)
    394c:	d8c02015 	stw	r3,128(sp)
    3950:	dc401f15 	stw	r17,124(sp)
    3954:	008001c4 	movi	r2,7
    3958:	14400e16 	blt	r2,r17,3994 <___vfprintf_internal_r+0x111c>
    395c:	b2000204 	addi	r8,r22,8
    3960:	003e3a06 	br	324c <__alt_data_end+0xff00324c>
    3964:	01000074 	movhi	r4,1
    3968:	21020884 	addi	r4,r4,2082
    396c:	d9002b15 	stw	r4,172(sp)
    3970:	d9002b17 	ldw	r4,172(sp)
    3974:	1c07883a 	add	r3,r3,r16
    3978:	44000115 	stw	r16,4(r8)
    397c:	41000015 	stw	r4,0(r8)
    3980:	10800044 	addi	r2,r2,1
    3984:	d8c02015 	stw	r3,128(sp)
    3988:	d8801f15 	stw	r2,124(sp)
    398c:	010001c4 	movi	r4,7
    3990:	20be2d0e 	bge	r4,r2,3248 <__alt_data_end+0xff003248>
    3994:	d9002c17 	ldw	r4,176(sp)
    3998:	d9801e04 	addi	r6,sp,120
    399c:	b80b883a 	mov	r5,r23
    39a0:	00096140 	call	9614 <__sprint_r>
    39a4:	103cb61e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    39a8:	d8c02017 	ldw	r3,128(sp)
    39ac:	da000404 	addi	r8,sp,16
    39b0:	003e2606 	br	324c <__alt_data_end+0xff00324c>
    39b4:	d9002c17 	ldw	r4,176(sp)
    39b8:	d9801e04 	addi	r6,sp,120
    39bc:	b80b883a 	mov	r5,r23
    39c0:	00096140 	call	9614 <__sprint_r>
    39c4:	103e5d26 	beq	r2,zero,333c <__alt_data_end+0xff00333c>
    39c8:	003cad06 	br	2c80 <__alt_data_end+0xff002c80>
    39cc:	d9002c17 	ldw	r4,176(sp)
    39d0:	d9801e04 	addi	r6,sp,120
    39d4:	b80b883a 	mov	r5,r23
    39d8:	00096140 	call	9614 <__sprint_r>
    39dc:	103ca81e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    39e0:	d8c02017 	ldw	r3,128(sp)
    39e4:	da000404 	addi	r8,sp,16
    39e8:	003e0b06 	br	3218 <__alt_data_end+0xff003218>
    39ec:	d9002c17 	ldw	r4,176(sp)
    39f0:	d9801e04 	addi	r6,sp,120
    39f4:	b80b883a 	mov	r5,r23
    39f8:	00096140 	call	9614 <__sprint_r>
    39fc:	103ca01e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3a00:	d8c02017 	ldw	r3,128(sp)
    3a04:	da000404 	addi	r8,sp,16
    3a08:	003dbd06 	br	3100 <__alt_data_end+0xff003100>
    3a0c:	d9002c17 	ldw	r4,176(sp)
    3a10:	d9801e04 	addi	r6,sp,120
    3a14:	b80b883a 	mov	r5,r23
    3a18:	00096140 	call	9614 <__sprint_r>
    3a1c:	103c981e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3a20:	d8c02017 	ldw	r3,128(sp)
    3a24:	da000404 	addi	r8,sp,16
    3a28:	003dc306 	br	3138 <__alt_data_end+0xff003138>
    3a2c:	d8802917 	ldw	r2,164(sp)
    3a30:	d8002785 	stb	zero,158(sp)
    3a34:	103f0616 	blt	r2,zero,3650 <__alt_data_end+0xff003650>
    3a38:	00ffdfc4 	movi	r3,-129
    3a3c:	9d84b03a 	or	r2,r19,r22
    3a40:	90e4703a 	and	r18,r18,r3
    3a44:	103c6b26 	beq	r2,zero,2bf4 <__alt_data_end+0xff002bf4>
    3a48:	0039883a 	mov	fp,zero
    3a4c:	003e7406 	br	3420 <__alt_data_end+0xff003420>
    3a50:	9080040c 	andi	r2,r18,16
    3a54:	1001b326 	beq	r2,zero,4124 <___vfprintf_internal_r+0x18ac>
    3a58:	d9002d17 	ldw	r4,180(sp)
    3a5c:	d9402917 	ldw	r5,164(sp)
    3a60:	d8002785 	stb	zero,158(sp)
    3a64:	20800104 	addi	r2,r4,4
    3a68:	24c00017 	ldw	r19,0(r4)
    3a6c:	002d883a 	mov	r22,zero
    3a70:	2801b516 	blt	r5,zero,4148 <___vfprintf_internal_r+0x18d0>
    3a74:	00ffdfc4 	movi	r3,-129
    3a78:	d8802d15 	stw	r2,180(sp)
    3a7c:	90e4703a 	and	r18,r18,r3
    3a80:	983d2726 	beq	r19,zero,2f20 <__alt_data_end+0xff002f20>
    3a84:	0039883a 	mov	fp,zero
    3a88:	003d2a06 	br	2f34 <__alt_data_end+0xff002f34>
    3a8c:	dc402617 	ldw	r17,152(sp)
    3a90:	0441d30e 	bge	zero,r17,41e0 <___vfprintf_internal_r+0x1968>
    3a94:	dc403217 	ldw	r17,200(sp)
    3a98:	d8803317 	ldw	r2,204(sp)
    3a9c:	1440010e 	bge	r2,r17,3aa4 <___vfprintf_internal_r+0x122c>
    3aa0:	1023883a 	mov	r17,r2
    3aa4:	04400a0e 	bge	zero,r17,3ad0 <___vfprintf_internal_r+0x1258>
    3aa8:	d8801f17 	ldw	r2,124(sp)
    3aac:	1c47883a 	add	r3,r3,r17
    3ab0:	44000015 	stw	r16,0(r8)
    3ab4:	10800044 	addi	r2,r2,1
    3ab8:	44400115 	stw	r17,4(r8)
    3abc:	d8c02015 	stw	r3,128(sp)
    3ac0:	d8801f15 	stw	r2,124(sp)
    3ac4:	010001c4 	movi	r4,7
    3ac8:	20826516 	blt	r4,r2,4460 <___vfprintf_internal_r+0x1be8>
    3acc:	42000204 	addi	r8,r8,8
    3ad0:	88026116 	blt	r17,zero,4458 <___vfprintf_internal_r+0x1be0>
    3ad4:	d9003217 	ldw	r4,200(sp)
    3ad8:	2463c83a 	sub	r17,r4,r17
    3adc:	04407b0e 	bge	zero,r17,3ccc <___vfprintf_internal_r+0x1454>
    3ae0:	05800404 	movi	r22,16
    3ae4:	d8801f17 	ldw	r2,124(sp)
    3ae8:	b4419d0e 	bge	r22,r17,4160 <___vfprintf_internal_r+0x18e8>
    3aec:	01000074 	movhi	r4,1
    3af0:	21020884 	addi	r4,r4,2082
    3af4:	d9002b15 	stw	r4,172(sp)
    3af8:	070001c4 	movi	fp,7
    3afc:	dcc02c17 	ldw	r19,176(sp)
    3b00:	00000306 	br	3b10 <___vfprintf_internal_r+0x1298>
    3b04:	42000204 	addi	r8,r8,8
    3b08:	8c7ffc04 	addi	r17,r17,-16
    3b0c:	b441970e 	bge	r22,r17,416c <___vfprintf_internal_r+0x18f4>
    3b10:	18c00404 	addi	r3,r3,16
    3b14:	10800044 	addi	r2,r2,1
    3b18:	45000015 	stw	r20,0(r8)
    3b1c:	45800115 	stw	r22,4(r8)
    3b20:	d8c02015 	stw	r3,128(sp)
    3b24:	d8801f15 	stw	r2,124(sp)
    3b28:	e0bff60e 	bge	fp,r2,3b04 <__alt_data_end+0xff003b04>
    3b2c:	d9801e04 	addi	r6,sp,120
    3b30:	b80b883a 	mov	r5,r23
    3b34:	9809883a 	mov	r4,r19
    3b38:	00096140 	call	9614 <__sprint_r>
    3b3c:	103c501e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3b40:	d8c02017 	ldw	r3,128(sp)
    3b44:	d8801f17 	ldw	r2,124(sp)
    3b48:	da000404 	addi	r8,sp,16
    3b4c:	003fee06 	br	3b08 <__alt_data_end+0xff003b08>
    3b50:	d9002c17 	ldw	r4,176(sp)
    3b54:	d9801e04 	addi	r6,sp,120
    3b58:	b80b883a 	mov	r5,r23
    3b5c:	00096140 	call	9614 <__sprint_r>
    3b60:	103c471e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3b64:	d8c02017 	ldw	r3,128(sp)
    3b68:	df002787 	ldb	fp,158(sp)
    3b6c:	da000404 	addi	r8,sp,16
    3b70:	003d5606 	br	30cc <__alt_data_end+0xff0030cc>
    3b74:	9080040c 	andi	r2,r18,16
    3b78:	10016126 	beq	r2,zero,4100 <___vfprintf_internal_r+0x1888>
    3b7c:	d8802d17 	ldw	r2,180(sp)
    3b80:	14c00017 	ldw	r19,0(r2)
    3b84:	10800104 	addi	r2,r2,4
    3b88:	d8802d15 	stw	r2,180(sp)
    3b8c:	982dd7fa 	srai	r22,r19,31
    3b90:	b005883a 	mov	r2,r22
    3b94:	003c8206 	br	2da0 <__alt_data_end+0xff002da0>
    3b98:	9080040c 	andi	r2,r18,16
    3b9c:	10003526 	beq	r2,zero,3c74 <___vfprintf_internal_r+0x13fc>
    3ba0:	d9402d17 	ldw	r5,180(sp)
    3ba4:	d8c02917 	ldw	r3,164(sp)
    3ba8:	d8002785 	stb	zero,158(sp)
    3bac:	28800104 	addi	r2,r5,4
    3bb0:	2cc00017 	ldw	r19,0(r5)
    3bb4:	002d883a 	mov	r22,zero
    3bb8:	18003716 	blt	r3,zero,3c98 <___vfprintf_internal_r+0x1420>
    3bbc:	00ffdfc4 	movi	r3,-129
    3bc0:	d8802d15 	stw	r2,180(sp)
    3bc4:	90e4703a 	and	r18,r18,r3
    3bc8:	0039883a 	mov	fp,zero
    3bcc:	983df326 	beq	r19,zero,339c <__alt_data_end+0xff00339c>
    3bd0:	00800244 	movi	r2,9
    3bd4:	14fc7b36 	bltu	r2,r19,2dc4 <__alt_data_end+0xff002dc4>
    3bd8:	d8c02817 	ldw	r3,160(sp)
    3bdc:	dc001dc4 	addi	r16,sp,119
    3be0:	9cc00c04 	addi	r19,r19,48
    3be4:	1c07c83a 	sub	r3,r3,r16
    3be8:	dcc01dc5 	stb	r19,119(sp)
    3bec:	d8c02e15 	stw	r3,184(sp)
    3bf0:	003ce806 	br	2f94 <__alt_data_end+0xff002f94>
    3bf4:	d8803317 	ldw	r2,204(sp)
    3bf8:	143fffc4 	addi	r16,r2,-1
    3bfc:	043f4d0e 	bge	zero,r16,3934 <__alt_data_end+0xff003934>
    3c00:	07000404 	movi	fp,16
    3c04:	e400810e 	bge	fp,r16,3e0c <___vfprintf_internal_r+0x1594>
    3c08:	01400074 	movhi	r5,1
    3c0c:	29420884 	addi	r5,r5,2082
    3c10:	d9402b15 	stw	r5,172(sp)
    3c14:	01c001c4 	movi	r7,7
    3c18:	dcc02c17 	ldw	r19,176(sp)
    3c1c:	00000306 	br	3c2c <___vfprintf_internal_r+0x13b4>
    3c20:	b5800204 	addi	r22,r22,8
    3c24:	843ffc04 	addi	r16,r16,-16
    3c28:	e4007b0e 	bge	fp,r16,3e18 <___vfprintf_internal_r+0x15a0>
    3c2c:	18c00404 	addi	r3,r3,16
    3c30:	8c400044 	addi	r17,r17,1
    3c34:	b5000015 	stw	r20,0(r22)
    3c38:	b7000115 	stw	fp,4(r22)
    3c3c:	d8c02015 	stw	r3,128(sp)
    3c40:	dc401f15 	stw	r17,124(sp)
    3c44:	3c7ff60e 	bge	r7,r17,3c20 <__alt_data_end+0xff003c20>
    3c48:	d9801e04 	addi	r6,sp,120
    3c4c:	b80b883a 	mov	r5,r23
    3c50:	9809883a 	mov	r4,r19
    3c54:	d9c03c15 	stw	r7,240(sp)
    3c58:	00096140 	call	9614 <__sprint_r>
    3c5c:	d9c03c17 	ldw	r7,240(sp)
    3c60:	103c071e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3c64:	d8c02017 	ldw	r3,128(sp)
    3c68:	dc401f17 	ldw	r17,124(sp)
    3c6c:	dd800404 	addi	r22,sp,16
    3c70:	003fec06 	br	3c24 <__alt_data_end+0xff003c24>
    3c74:	9080100c 	andi	r2,r18,64
    3c78:	d8002785 	stb	zero,158(sp)
    3c7c:	10010e26 	beq	r2,zero,40b8 <___vfprintf_internal_r+0x1840>
    3c80:	d9002d17 	ldw	r4,180(sp)
    3c84:	d9402917 	ldw	r5,164(sp)
    3c88:	002d883a 	mov	r22,zero
    3c8c:	20800104 	addi	r2,r4,4
    3c90:	24c0000b 	ldhu	r19,0(r4)
    3c94:	283fc90e 	bge	r5,zero,3bbc <__alt_data_end+0xff003bbc>
    3c98:	d8802d15 	stw	r2,180(sp)
    3c9c:	0039883a 	mov	fp,zero
    3ca0:	9d84b03a 	or	r2,r19,r22
    3ca4:	103c461e 	bne	r2,zero,2dc0 <__alt_data_end+0xff002dc0>
    3ca8:	00800044 	movi	r2,1
    3cac:	003e6c06 	br	3660 <__alt_data_end+0xff003660>
    3cb0:	d9002c17 	ldw	r4,176(sp)
    3cb4:	d9801e04 	addi	r6,sp,120
    3cb8:	b80b883a 	mov	r5,r23
    3cbc:	00096140 	call	9614 <__sprint_r>
    3cc0:	103bef1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3cc4:	d8c02017 	ldw	r3,128(sp)
    3cc8:	da000404 	addi	r8,sp,16
    3ccc:	d9003217 	ldw	r4,200(sp)
    3cd0:	d8802617 	ldw	r2,152(sp)
    3cd4:	d9403317 	ldw	r5,204(sp)
    3cd8:	8123883a 	add	r17,r16,r4
    3cdc:	11400216 	blt	r2,r5,3ce8 <___vfprintf_internal_r+0x1470>
    3ce0:	9100004c 	andi	r4,r18,1
    3ce4:	20000d26 	beq	r4,zero,3d1c <___vfprintf_internal_r+0x14a4>
    3ce8:	d9003717 	ldw	r4,220(sp)
    3cec:	d9403417 	ldw	r5,208(sp)
    3cf0:	1907883a 	add	r3,r3,r4
    3cf4:	d9001f17 	ldw	r4,124(sp)
    3cf8:	41400015 	stw	r5,0(r8)
    3cfc:	d9403717 	ldw	r5,220(sp)
    3d00:	21000044 	addi	r4,r4,1
    3d04:	d8c02015 	stw	r3,128(sp)
    3d08:	41400115 	stw	r5,4(r8)
    3d0c:	d9001f15 	stw	r4,124(sp)
    3d10:	014001c4 	movi	r5,7
    3d14:	2901e816 	blt	r5,r4,44b8 <___vfprintf_internal_r+0x1c40>
    3d18:	42000204 	addi	r8,r8,8
    3d1c:	d9003317 	ldw	r4,204(sp)
    3d20:	8121883a 	add	r16,r16,r4
    3d24:	2085c83a 	sub	r2,r4,r2
    3d28:	8461c83a 	sub	r16,r16,r17
    3d2c:	1400010e 	bge	r2,r16,3d34 <___vfprintf_internal_r+0x14bc>
    3d30:	1021883a 	mov	r16,r2
    3d34:	04000a0e 	bge	zero,r16,3d60 <___vfprintf_internal_r+0x14e8>
    3d38:	d9001f17 	ldw	r4,124(sp)
    3d3c:	1c07883a 	add	r3,r3,r16
    3d40:	44400015 	stw	r17,0(r8)
    3d44:	21000044 	addi	r4,r4,1
    3d48:	44000115 	stw	r16,4(r8)
    3d4c:	d8c02015 	stw	r3,128(sp)
    3d50:	d9001f15 	stw	r4,124(sp)
    3d54:	014001c4 	movi	r5,7
    3d58:	2901fb16 	blt	r5,r4,4548 <___vfprintf_internal_r+0x1cd0>
    3d5c:	42000204 	addi	r8,r8,8
    3d60:	8001f716 	blt	r16,zero,4540 <___vfprintf_internal_r+0x1cc8>
    3d64:	1421c83a 	sub	r16,r2,r16
    3d68:	043d380e 	bge	zero,r16,324c <__alt_data_end+0xff00324c>
    3d6c:	04400404 	movi	r17,16
    3d70:	d8801f17 	ldw	r2,124(sp)
    3d74:	8c3efb0e 	bge	r17,r16,3964 <__alt_data_end+0xff003964>
    3d78:	01400074 	movhi	r5,1
    3d7c:	29420884 	addi	r5,r5,2082
    3d80:	d9402b15 	stw	r5,172(sp)
    3d84:	058001c4 	movi	r22,7
    3d88:	dcc02c17 	ldw	r19,176(sp)
    3d8c:	00000306 	br	3d9c <___vfprintf_internal_r+0x1524>
    3d90:	42000204 	addi	r8,r8,8
    3d94:	843ffc04 	addi	r16,r16,-16
    3d98:	8c3ef50e 	bge	r17,r16,3970 <__alt_data_end+0xff003970>
    3d9c:	18c00404 	addi	r3,r3,16
    3da0:	10800044 	addi	r2,r2,1
    3da4:	45000015 	stw	r20,0(r8)
    3da8:	44400115 	stw	r17,4(r8)
    3dac:	d8c02015 	stw	r3,128(sp)
    3db0:	d8801f15 	stw	r2,124(sp)
    3db4:	b0bff60e 	bge	r22,r2,3d90 <__alt_data_end+0xff003d90>
    3db8:	d9801e04 	addi	r6,sp,120
    3dbc:	b80b883a 	mov	r5,r23
    3dc0:	9809883a 	mov	r4,r19
    3dc4:	00096140 	call	9614 <__sprint_r>
    3dc8:	103bad1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3dcc:	d8c02017 	ldw	r3,128(sp)
    3dd0:	d8801f17 	ldw	r2,124(sp)
    3dd4:	da000404 	addi	r8,sp,16
    3dd8:	003fee06 	br	3d94 <__alt_data_end+0xff003d94>
    3ddc:	9088703a 	and	r4,r18,r2
    3de0:	203eab1e 	bne	r4,zero,3890 <__alt_data_end+0xff003890>
    3de4:	dc401f17 	ldw	r17,124(sp)
    3de8:	40800115 	stw	r2,4(r8)
    3dec:	44000015 	stw	r16,0(r8)
    3df0:	8c400044 	addi	r17,r17,1
    3df4:	d8c02015 	stw	r3,128(sp)
    3df8:	dc401f15 	stw	r17,124(sp)
    3dfc:	008001c4 	movi	r2,7
    3e00:	14400e16 	blt	r2,r17,3e3c <___vfprintf_internal_r+0x15c4>
    3e04:	45800204 	addi	r22,r8,8
    3e08:	003eca06 	br	3934 <__alt_data_end+0xff003934>
    3e0c:	01000074 	movhi	r4,1
    3e10:	21020884 	addi	r4,r4,2082
    3e14:	d9002b15 	stw	r4,172(sp)
    3e18:	d8802b17 	ldw	r2,172(sp)
    3e1c:	1c07883a 	add	r3,r3,r16
    3e20:	8c400044 	addi	r17,r17,1
    3e24:	b0800015 	stw	r2,0(r22)
    3e28:	b4000115 	stw	r16,4(r22)
    3e2c:	d8c02015 	stw	r3,128(sp)
    3e30:	dc401f15 	stw	r17,124(sp)
    3e34:	008001c4 	movi	r2,7
    3e38:	147ebd0e 	bge	r2,r17,3930 <__alt_data_end+0xff003930>
    3e3c:	d9002c17 	ldw	r4,176(sp)
    3e40:	d9801e04 	addi	r6,sp,120
    3e44:	b80b883a 	mov	r5,r23
    3e48:	00096140 	call	9614 <__sprint_r>
    3e4c:	103b8c1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3e50:	d8c02017 	ldw	r3,128(sp)
    3e54:	dc401f17 	ldw	r17,124(sp)
    3e58:	dd800404 	addi	r22,sp,16
    3e5c:	003eb506 	br	3934 <__alt_data_end+0xff003934>
    3e60:	d9002c17 	ldw	r4,176(sp)
    3e64:	d9801e04 	addi	r6,sp,120
    3e68:	b80b883a 	mov	r5,r23
    3e6c:	00096140 	call	9614 <__sprint_r>
    3e70:	103b831e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3e74:	d8c02017 	ldw	r3,128(sp)
    3e78:	dc401f17 	ldw	r17,124(sp)
    3e7c:	da000404 	addi	r8,sp,16
    3e80:	003e8d06 	br	38b8 <__alt_data_end+0xff0038b8>
    3e84:	d9002c17 	ldw	r4,176(sp)
    3e88:	d9801e04 	addi	r6,sp,120
    3e8c:	b80b883a 	mov	r5,r23
    3e90:	00096140 	call	9614 <__sprint_r>
    3e94:	103b7a1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3e98:	d8c02017 	ldw	r3,128(sp)
    3e9c:	dc401f17 	ldw	r17,124(sp)
    3ea0:	dd800404 	addi	r22,sp,16
    3ea4:	003e8f06 	br	38e4 <__alt_data_end+0xff0038e4>
    3ea8:	0027883a 	mov	r19,zero
    3eac:	003f4a06 	br	3bd8 <__alt_data_end+0xff003bd8>
    3eb0:	d9002c17 	ldw	r4,176(sp)
    3eb4:	d9801e04 	addi	r6,sp,120
    3eb8:	b80b883a 	mov	r5,r23
    3ebc:	00096140 	call	9614 <__sprint_r>
    3ec0:	103b6f1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    3ec4:	d8c02017 	ldw	r3,128(sp)
    3ec8:	da000404 	addi	r8,sp,16
    3ecc:	003c9d06 	br	3144 <__alt_data_end+0xff003144>
    3ed0:	04e7c83a 	sub	r19,zero,r19
    3ed4:	9804c03a 	cmpne	r2,r19,zero
    3ed8:	05adc83a 	sub	r22,zero,r22
    3edc:	b0adc83a 	sub	r22,r22,r2
    3ee0:	d8802917 	ldw	r2,164(sp)
    3ee4:	07000b44 	movi	fp,45
    3ee8:	df002785 	stb	fp,158(sp)
    3eec:	10017b16 	blt	r2,zero,44dc <___vfprintf_internal_r+0x1c64>
    3ef0:	00bfdfc4 	movi	r2,-129
    3ef4:	90a4703a 	and	r18,r18,r2
    3ef8:	003bb106 	br	2dc0 <__alt_data_end+0xff002dc0>
    3efc:	d9003617 	ldw	r4,216(sp)
    3f00:	d9403817 	ldw	r5,224(sp)
    3f04:	da003d15 	stw	r8,244(sp)
    3f08:	000928c0 	call	928c <__fpclassifyd>
    3f0c:	da003d17 	ldw	r8,244(sp)
    3f10:	1000f026 	beq	r2,zero,42d4 <___vfprintf_internal_r+0x1a5c>
    3f14:	d9002917 	ldw	r4,164(sp)
    3f18:	05bff7c4 	movi	r22,-33
    3f1c:	00bfffc4 	movi	r2,-1
    3f20:	8dac703a 	and	r22,r17,r22
    3f24:	20820026 	beq	r4,r2,4728 <___vfprintf_internal_r+0x1eb0>
    3f28:	008011c4 	movi	r2,71
    3f2c:	b081f726 	beq	r22,r2,470c <___vfprintf_internal_r+0x1e94>
    3f30:	d9003817 	ldw	r4,224(sp)
    3f34:	90c04014 	ori	r3,r18,256
    3f38:	d8c02b15 	stw	r3,172(sp)
    3f3c:	20021516 	blt	r4,zero,4794 <___vfprintf_internal_r+0x1f1c>
    3f40:	dcc03817 	ldw	r19,224(sp)
    3f44:	d8002a05 	stb	zero,168(sp)
    3f48:	00801984 	movi	r2,102
    3f4c:	8881f926 	beq	r17,r2,4734 <___vfprintf_internal_r+0x1ebc>
    3f50:	00801184 	movi	r2,70
    3f54:	88821c26 	beq	r17,r2,47c8 <___vfprintf_internal_r+0x1f50>
    3f58:	00801144 	movi	r2,69
    3f5c:	b081ef26 	beq	r22,r2,471c <___vfprintf_internal_r+0x1ea4>
    3f60:	d8c02917 	ldw	r3,164(sp)
    3f64:	d8802104 	addi	r2,sp,132
    3f68:	d8800315 	stw	r2,12(sp)
    3f6c:	d9403617 	ldw	r5,216(sp)
    3f70:	d8802504 	addi	r2,sp,148
    3f74:	d9002c17 	ldw	r4,176(sp)
    3f78:	d8800215 	stw	r2,8(sp)
    3f7c:	d8802604 	addi	r2,sp,152
    3f80:	d8c00015 	stw	r3,0(sp)
    3f84:	d8800115 	stw	r2,4(sp)
    3f88:	01c00084 	movi	r7,2
    3f8c:	980d883a 	mov	r6,r19
    3f90:	d8c03c15 	stw	r3,240(sp)
    3f94:	da003d15 	stw	r8,244(sp)
    3f98:	0004e9c0 	call	4e9c <_dtoa_r>
    3f9c:	1021883a 	mov	r16,r2
    3fa0:	008019c4 	movi	r2,103
    3fa4:	d8c03c17 	ldw	r3,240(sp)
    3fa8:	da003d17 	ldw	r8,244(sp)
    3fac:	88817126 	beq	r17,r2,4574 <___vfprintf_internal_r+0x1cfc>
    3fb0:	008011c4 	movi	r2,71
    3fb4:	88829226 	beq	r17,r2,4a00 <___vfprintf_internal_r+0x2188>
    3fb8:	80f9883a 	add	fp,r16,r3
    3fbc:	d9003617 	ldw	r4,216(sp)
    3fc0:	000d883a 	mov	r6,zero
    3fc4:	000f883a 	mov	r7,zero
    3fc8:	980b883a 	mov	r5,r19
    3fcc:	da003d15 	stw	r8,244(sp)
    3fd0:	000d28c0 	call	d28c <__eqdf2>
    3fd4:	da003d17 	ldw	r8,244(sp)
    3fd8:	10018d26 	beq	r2,zero,4610 <___vfprintf_internal_r+0x1d98>
    3fdc:	d8802117 	ldw	r2,132(sp)
    3fe0:	1700062e 	bgeu	r2,fp,3ffc <___vfprintf_internal_r+0x1784>
    3fe4:	01000c04 	movi	r4,48
    3fe8:	10c00044 	addi	r3,r2,1
    3fec:	d8c02115 	stw	r3,132(sp)
    3ff0:	11000005 	stb	r4,0(r2)
    3ff4:	d8802117 	ldw	r2,132(sp)
    3ff8:	173ffb36 	bltu	r2,fp,3fe8 <__alt_data_end+0xff003fe8>
    3ffc:	1405c83a 	sub	r2,r2,r16
    4000:	d8803315 	stw	r2,204(sp)
    4004:	008011c4 	movi	r2,71
    4008:	b0817626 	beq	r22,r2,45e4 <___vfprintf_internal_r+0x1d6c>
    400c:	00801944 	movi	r2,101
    4010:	1442810e 	bge	r2,r17,4a18 <___vfprintf_internal_r+0x21a0>
    4014:	d8c02617 	ldw	r3,152(sp)
    4018:	00801984 	movi	r2,102
    401c:	d8c03215 	stw	r3,200(sp)
    4020:	8881fe26 	beq	r17,r2,481c <___vfprintf_internal_r+0x1fa4>
    4024:	d8c03217 	ldw	r3,200(sp)
    4028:	d9003317 	ldw	r4,204(sp)
    402c:	1901dd16 	blt	r3,r4,47a4 <___vfprintf_internal_r+0x1f2c>
    4030:	9480004c 	andi	r18,r18,1
    4034:	90022b1e 	bne	r18,zero,48e4 <___vfprintf_internal_r+0x206c>
    4038:	1805883a 	mov	r2,r3
    403c:	18028016 	blt	r3,zero,4a40 <___vfprintf_internal_r+0x21c8>
    4040:	d8c03217 	ldw	r3,200(sp)
    4044:	044019c4 	movi	r17,103
    4048:	d8c02e15 	stw	r3,184(sp)
    404c:	df002a07 	ldb	fp,168(sp)
    4050:	e001531e 	bne	fp,zero,45a0 <___vfprintf_internal_r+0x1d28>
    4054:	df002783 	ldbu	fp,158(sp)
    4058:	d8802a15 	stw	r2,168(sp)
    405c:	dc802b17 	ldw	r18,172(sp)
    4060:	d8002915 	stw	zero,164(sp)
    4064:	003bd106 	br	2fac <__alt_data_end+0xff002fac>
    4068:	d8802d17 	ldw	r2,180(sp)
    406c:	d8c02d17 	ldw	r3,180(sp)
    4070:	d9002d17 	ldw	r4,180(sp)
    4074:	10800017 	ldw	r2,0(r2)
    4078:	18c00117 	ldw	r3,4(r3)
    407c:	21000204 	addi	r4,r4,8
    4080:	d8803615 	stw	r2,216(sp)
    4084:	d8c03815 	stw	r3,224(sp)
    4088:	d9002d15 	stw	r4,180(sp)
    408c:	003b7506 	br	2e64 <__alt_data_end+0xff002e64>
    4090:	ac400007 	ldb	r17,0(r21)
    4094:	003a5906 	br	29fc <__alt_data_end+0xff0029fc>
    4098:	9080100c 	andi	r2,r18,64
    409c:	1000a826 	beq	r2,zero,4340 <___vfprintf_internal_r+0x1ac8>
    40a0:	d9002d17 	ldw	r4,180(sp)
    40a4:	002d883a 	mov	r22,zero
    40a8:	24c0000b 	ldhu	r19,0(r4)
    40ac:	21000104 	addi	r4,r4,4
    40b0:	d9002d15 	stw	r4,180(sp)
    40b4:	003ccb06 	br	33e4 <__alt_data_end+0xff0033e4>
    40b8:	d8c02d17 	ldw	r3,180(sp)
    40bc:	d9002917 	ldw	r4,164(sp)
    40c0:	002d883a 	mov	r22,zero
    40c4:	18800104 	addi	r2,r3,4
    40c8:	1cc00017 	ldw	r19,0(r3)
    40cc:	203ebb0e 	bge	r4,zero,3bbc <__alt_data_end+0xff003bbc>
    40d0:	003ef106 	br	3c98 <__alt_data_end+0xff003c98>
    40d4:	9080040c 	andi	r2,r18,16
    40d8:	1000921e 	bne	r2,zero,4324 <___vfprintf_internal_r+0x1aac>
    40dc:	9480100c 	andi	r18,r18,64
    40e0:	90013926 	beq	r18,zero,45c8 <___vfprintf_internal_r+0x1d50>
    40e4:	d9002d17 	ldw	r4,180(sp)
    40e8:	d9402f17 	ldw	r5,188(sp)
    40ec:	20800017 	ldw	r2,0(r4)
    40f0:	21000104 	addi	r4,r4,4
    40f4:	d9002d15 	stw	r4,180(sp)
    40f8:	1140000d 	sth	r5,0(r2)
    40fc:	003a1606 	br	2958 <__alt_data_end+0xff002958>
    4100:	9080100c 	andi	r2,r18,64
    4104:	10008026 	beq	r2,zero,4308 <___vfprintf_internal_r+0x1a90>
    4108:	d8c02d17 	ldw	r3,180(sp)
    410c:	1cc0000f 	ldh	r19,0(r3)
    4110:	18c00104 	addi	r3,r3,4
    4114:	d8c02d15 	stw	r3,180(sp)
    4118:	982dd7fa 	srai	r22,r19,31
    411c:	b005883a 	mov	r2,r22
    4120:	003b1f06 	br	2da0 <__alt_data_end+0xff002da0>
    4124:	9080100c 	andi	r2,r18,64
    4128:	d8002785 	stb	zero,158(sp)
    412c:	10008a1e 	bne	r2,zero,4358 <___vfprintf_internal_r+0x1ae0>
    4130:	d9402d17 	ldw	r5,180(sp)
    4134:	d8c02917 	ldw	r3,164(sp)
    4138:	002d883a 	mov	r22,zero
    413c:	28800104 	addi	r2,r5,4
    4140:	2cc00017 	ldw	r19,0(r5)
    4144:	183e4b0e 	bge	r3,zero,3a74 <__alt_data_end+0xff003a74>
    4148:	9d86b03a 	or	r3,r19,r22
    414c:	d8802d15 	stw	r2,180(sp)
    4150:	183e4c1e 	bne	r3,zero,3a84 <__alt_data_end+0xff003a84>
    4154:	0039883a 	mov	fp,zero
    4158:	0005883a 	mov	r2,zero
    415c:	003d4006 	br	3660 <__alt_data_end+0xff003660>
    4160:	01400074 	movhi	r5,1
    4164:	29420884 	addi	r5,r5,2082
    4168:	d9402b15 	stw	r5,172(sp)
    416c:	d9402b17 	ldw	r5,172(sp)
    4170:	1c47883a 	add	r3,r3,r17
    4174:	10800044 	addi	r2,r2,1
    4178:	41400015 	stw	r5,0(r8)
    417c:	44400115 	stw	r17,4(r8)
    4180:	d8c02015 	stw	r3,128(sp)
    4184:	d8801f15 	stw	r2,124(sp)
    4188:	010001c4 	movi	r4,7
    418c:	20bec816 	blt	r4,r2,3cb0 <__alt_data_end+0xff003cb0>
    4190:	42000204 	addi	r8,r8,8
    4194:	003ecd06 	br	3ccc <__alt_data_end+0xff003ccc>
    4198:	d9002917 	ldw	r4,164(sp)
    419c:	d8002785 	stb	zero,158(sp)
    41a0:	203d2d16 	blt	r4,zero,3658 <__alt_data_end+0xff003658>
    41a4:	00bfdfc4 	movi	r2,-129
    41a8:	90a4703a 	and	r18,r18,r2
    41ac:	003a9106 	br	2bf4 <__alt_data_end+0xff002bf4>
    41b0:	01000074 	movhi	r4,1
    41b4:	21020884 	addi	r4,r4,2082
    41b8:	d9002b15 	stw	r4,172(sp)
    41bc:	003c0c06 	br	31f0 <__alt_data_end+0xff0031f0>
    41c0:	d9002c17 	ldw	r4,176(sp)
    41c4:	d9801e04 	addi	r6,sp,120
    41c8:	b80b883a 	mov	r5,r23
    41cc:	00096140 	call	9614 <__sprint_r>
    41d0:	103aab1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    41d4:	d8c02017 	ldw	r3,128(sp)
    41d8:	da000404 	addi	r8,sp,16
    41dc:	003d4106 	br	36e4 <__alt_data_end+0xff0036e4>
    41e0:	d8801f17 	ldw	r2,124(sp)
    41e4:	01400074 	movhi	r5,1
    41e8:	01000044 	movi	r4,1
    41ec:	18c00044 	addi	r3,r3,1
    41f0:	10800044 	addi	r2,r2,1
    41f4:	29420804 	addi	r5,r5,2080
    41f8:	41000115 	stw	r4,4(r8)
    41fc:	41400015 	stw	r5,0(r8)
    4200:	d8c02015 	stw	r3,128(sp)
    4204:	d8801f15 	stw	r2,124(sp)
    4208:	010001c4 	movi	r4,7
    420c:	20805c16 	blt	r4,r2,4380 <___vfprintf_internal_r+0x1b08>
    4210:	42000204 	addi	r8,r8,8
    4214:	8800041e 	bne	r17,zero,4228 <___vfprintf_internal_r+0x19b0>
    4218:	d8803317 	ldw	r2,204(sp)
    421c:	1000021e 	bne	r2,zero,4228 <___vfprintf_internal_r+0x19b0>
    4220:	9080004c 	andi	r2,r18,1
    4224:	103c0926 	beq	r2,zero,324c <__alt_data_end+0xff00324c>
    4228:	d9003717 	ldw	r4,220(sp)
    422c:	d8801f17 	ldw	r2,124(sp)
    4230:	d9403417 	ldw	r5,208(sp)
    4234:	20c7883a 	add	r3,r4,r3
    4238:	10800044 	addi	r2,r2,1
    423c:	41000115 	stw	r4,4(r8)
    4240:	41400015 	stw	r5,0(r8)
    4244:	d8c02015 	stw	r3,128(sp)
    4248:	d8801f15 	stw	r2,124(sp)
    424c:	010001c4 	movi	r4,7
    4250:	20812116 	blt	r4,r2,46d8 <___vfprintf_internal_r+0x1e60>
    4254:	42000204 	addi	r8,r8,8
    4258:	0463c83a 	sub	r17,zero,r17
    425c:	0440730e 	bge	zero,r17,442c <___vfprintf_internal_r+0x1bb4>
    4260:	05800404 	movi	r22,16
    4264:	b440860e 	bge	r22,r17,4480 <___vfprintf_internal_r+0x1c08>
    4268:	01400074 	movhi	r5,1
    426c:	29420884 	addi	r5,r5,2082
    4270:	d9402b15 	stw	r5,172(sp)
    4274:	070001c4 	movi	fp,7
    4278:	dcc02c17 	ldw	r19,176(sp)
    427c:	00000306 	br	428c <___vfprintf_internal_r+0x1a14>
    4280:	42000204 	addi	r8,r8,8
    4284:	8c7ffc04 	addi	r17,r17,-16
    4288:	b440800e 	bge	r22,r17,448c <___vfprintf_internal_r+0x1c14>
    428c:	18c00404 	addi	r3,r3,16
    4290:	10800044 	addi	r2,r2,1
    4294:	45000015 	stw	r20,0(r8)
    4298:	45800115 	stw	r22,4(r8)
    429c:	d8c02015 	stw	r3,128(sp)
    42a0:	d8801f15 	stw	r2,124(sp)
    42a4:	e0bff60e 	bge	fp,r2,4280 <__alt_data_end+0xff004280>
    42a8:	d9801e04 	addi	r6,sp,120
    42ac:	b80b883a 	mov	r5,r23
    42b0:	9809883a 	mov	r4,r19
    42b4:	00096140 	call	9614 <__sprint_r>
    42b8:	103a711e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    42bc:	d8c02017 	ldw	r3,128(sp)
    42c0:	d8801f17 	ldw	r2,124(sp)
    42c4:	da000404 	addi	r8,sp,16
    42c8:	003fee06 	br	4284 <__alt_data_end+0xff004284>
    42cc:	00bfffc4 	movi	r2,-1
    42d0:	003a6f06 	br	2c90 <__alt_data_end+0xff002c90>
    42d4:	008011c4 	movi	r2,71
    42d8:	1440b816 	blt	r2,r17,45bc <___vfprintf_internal_r+0x1d44>
    42dc:	04000074 	movhi	r16,1
    42e0:	8401fa04 	addi	r16,r16,2024
    42e4:	00c000c4 	movi	r3,3
    42e8:	00bfdfc4 	movi	r2,-129
    42ec:	d8c02a15 	stw	r3,168(sp)
    42f0:	90a4703a 	and	r18,r18,r2
    42f4:	df002783 	ldbu	fp,158(sp)
    42f8:	d8c02e15 	stw	r3,184(sp)
    42fc:	d8002915 	stw	zero,164(sp)
    4300:	d8003215 	stw	zero,200(sp)
    4304:	003b2906 	br	2fac <__alt_data_end+0xff002fac>
    4308:	d9002d17 	ldw	r4,180(sp)
    430c:	24c00017 	ldw	r19,0(r4)
    4310:	21000104 	addi	r4,r4,4
    4314:	d9002d15 	stw	r4,180(sp)
    4318:	982dd7fa 	srai	r22,r19,31
    431c:	b005883a 	mov	r2,r22
    4320:	003a9f06 	br	2da0 <__alt_data_end+0xff002da0>
    4324:	d9402d17 	ldw	r5,180(sp)
    4328:	d8c02f17 	ldw	r3,188(sp)
    432c:	28800017 	ldw	r2,0(r5)
    4330:	29400104 	addi	r5,r5,4
    4334:	d9402d15 	stw	r5,180(sp)
    4338:	10c00015 	stw	r3,0(r2)
    433c:	00398606 	br	2958 <__alt_data_end+0xff002958>
    4340:	d9402d17 	ldw	r5,180(sp)
    4344:	002d883a 	mov	r22,zero
    4348:	2cc00017 	ldw	r19,0(r5)
    434c:	29400104 	addi	r5,r5,4
    4350:	d9402d15 	stw	r5,180(sp)
    4354:	003c2306 	br	33e4 <__alt_data_end+0xff0033e4>
    4358:	d8c02d17 	ldw	r3,180(sp)
    435c:	d9002917 	ldw	r4,164(sp)
    4360:	002d883a 	mov	r22,zero
    4364:	18800104 	addi	r2,r3,4
    4368:	1cc0000b 	ldhu	r19,0(r3)
    436c:	203dc10e 	bge	r4,zero,3a74 <__alt_data_end+0xff003a74>
    4370:	003f7506 	br	4148 <__alt_data_end+0xff004148>
    4374:	04000074 	movhi	r16,1
    4378:	8401f804 	addi	r16,r16,2016
    437c:	003acc06 	br	2eb0 <__alt_data_end+0xff002eb0>
    4380:	d9002c17 	ldw	r4,176(sp)
    4384:	d9801e04 	addi	r6,sp,120
    4388:	b80b883a 	mov	r5,r23
    438c:	00096140 	call	9614 <__sprint_r>
    4390:	103a3b1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    4394:	dc402617 	ldw	r17,152(sp)
    4398:	d8c02017 	ldw	r3,128(sp)
    439c:	da000404 	addi	r8,sp,16
    43a0:	003f9c06 	br	4214 <__alt_data_end+0xff004214>
    43a4:	ac400043 	ldbu	r17,1(r21)
    43a8:	94800814 	ori	r18,r18,32
    43ac:	ad400044 	addi	r21,r21,1
    43b0:	8c403fcc 	andi	r17,r17,255
    43b4:	8c40201c 	xori	r17,r17,128
    43b8:	8c7fe004 	addi	r17,r17,-128
    43bc:	00398f06 	br	29fc <__alt_data_end+0xff0029fc>
    43c0:	d8c02d15 	stw	r3,180(sp)
    43c4:	0039883a 	mov	fp,zero
    43c8:	003e3506 	br	3ca0 <__alt_data_end+0xff003ca0>
    43cc:	d9002c17 	ldw	r4,176(sp)
    43d0:	d9801e04 	addi	r6,sp,120
    43d4:	b80b883a 	mov	r5,r23
    43d8:	00096140 	call	9614 <__sprint_r>
    43dc:	103a281e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    43e0:	d8c02017 	ldw	r3,128(sp)
    43e4:	da000404 	addi	r8,sp,16
    43e8:	003cd006 	br	372c <__alt_data_end+0xff00372c>
    43ec:	8009883a 	mov	r4,r16
    43f0:	da003d15 	stw	r8,244(sp)
    43f4:	00027e00 	call	27e0 <strlen>
    43f8:	d8802e15 	stw	r2,184(sp)
    43fc:	da003d17 	ldw	r8,244(sp)
    4400:	103c340e 	bge	r2,zero,34d4 <__alt_data_end+0xff0034d4>
    4404:	0005883a 	mov	r2,zero
    4408:	003c3206 	br	34d4 <__alt_data_end+0xff0034d4>
    440c:	d9002c17 	ldw	r4,176(sp)
    4410:	d9801e04 	addi	r6,sp,120
    4414:	b80b883a 	mov	r5,r23
    4418:	00096140 	call	9614 <__sprint_r>
    441c:	103a181e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    4420:	d8c02017 	ldw	r3,128(sp)
    4424:	d8801f17 	ldw	r2,124(sp)
    4428:	da000404 	addi	r8,sp,16
    442c:	d9403317 	ldw	r5,204(sp)
    4430:	10800044 	addi	r2,r2,1
    4434:	44000015 	stw	r16,0(r8)
    4438:	28c7883a 	add	r3,r5,r3
    443c:	003b7d06 	br	3234 <__alt_data_end+0xff003234>
    4440:	01000074 	movhi	r4,1
    4444:	21020c84 	addi	r4,r4,2098
    4448:	d9003515 	stw	r4,212(sp)
    444c:	003b1406 	br	30a0 <__alt_data_end+0xff0030a0>
    4450:	013fffc4 	movi	r4,-1
    4454:	003a3506 	br	2d2c <__alt_data_end+0xff002d2c>
    4458:	0023883a 	mov	r17,zero
    445c:	003d9d06 	br	3ad4 <__alt_data_end+0xff003ad4>
    4460:	d9002c17 	ldw	r4,176(sp)
    4464:	d9801e04 	addi	r6,sp,120
    4468:	b80b883a 	mov	r5,r23
    446c:	00096140 	call	9614 <__sprint_r>
    4470:	103a031e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    4474:	d8c02017 	ldw	r3,128(sp)
    4478:	da000404 	addi	r8,sp,16
    447c:	003d9406 	br	3ad0 <__alt_data_end+0xff003ad0>
    4480:	01000074 	movhi	r4,1
    4484:	21020884 	addi	r4,r4,2082
    4488:	d9002b15 	stw	r4,172(sp)
    448c:	d9002b17 	ldw	r4,172(sp)
    4490:	1c47883a 	add	r3,r3,r17
    4494:	10800044 	addi	r2,r2,1
    4498:	41000015 	stw	r4,0(r8)
    449c:	44400115 	stw	r17,4(r8)
    44a0:	d8c02015 	stw	r3,128(sp)
    44a4:	d8801f15 	stw	r2,124(sp)
    44a8:	010001c4 	movi	r4,7
    44ac:	20bfd716 	blt	r4,r2,440c <__alt_data_end+0xff00440c>
    44b0:	42000204 	addi	r8,r8,8
    44b4:	003fdd06 	br	442c <__alt_data_end+0xff00442c>
    44b8:	d9002c17 	ldw	r4,176(sp)
    44bc:	d9801e04 	addi	r6,sp,120
    44c0:	b80b883a 	mov	r5,r23
    44c4:	00096140 	call	9614 <__sprint_r>
    44c8:	1039ed1e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    44cc:	d8802617 	ldw	r2,152(sp)
    44d0:	d8c02017 	ldw	r3,128(sp)
    44d4:	da000404 	addi	r8,sp,16
    44d8:	003e1006 	br	3d1c <__alt_data_end+0xff003d1c>
    44dc:	00800044 	movi	r2,1
    44e0:	10803fcc 	andi	r2,r2,255
    44e4:	00c00044 	movi	r3,1
    44e8:	10fa3526 	beq	r2,r3,2dc0 <__alt_data_end+0xff002dc0>
    44ec:	00c00084 	movi	r3,2
    44f0:	10fbcb26 	beq	r2,r3,3420 <__alt_data_end+0xff003420>
    44f4:	003a8f06 	br	2f34 <__alt_data_end+0xff002f34>
    44f8:	01000074 	movhi	r4,1
    44fc:	21020c84 	addi	r4,r4,2098
    4500:	d9003515 	stw	r4,212(sp)
    4504:	003b7606 	br	32e0 <__alt_data_end+0xff0032e0>
    4508:	d8802917 	ldw	r2,164(sp)
    450c:	00c00184 	movi	r3,6
    4510:	1880012e 	bgeu	r3,r2,4518 <___vfprintf_internal_r+0x1ca0>
    4514:	1805883a 	mov	r2,r3
    4518:	d8802e15 	stw	r2,184(sp)
    451c:	1000ef16 	blt	r2,zero,48dc <___vfprintf_internal_r+0x2064>
    4520:	04000074 	movhi	r16,1
    4524:	d8802a15 	stw	r2,168(sp)
    4528:	dcc02d15 	stw	r19,180(sp)
    452c:	d8002915 	stw	zero,164(sp)
    4530:	d8003215 	stw	zero,200(sp)
    4534:	84020604 	addi	r16,r16,2072
    4538:	0039883a 	mov	fp,zero
    453c:	003aa206 	br	2fc8 <__alt_data_end+0xff002fc8>
    4540:	0021883a 	mov	r16,zero
    4544:	003e0706 	br	3d64 <__alt_data_end+0xff003d64>
    4548:	d9002c17 	ldw	r4,176(sp)
    454c:	d9801e04 	addi	r6,sp,120
    4550:	b80b883a 	mov	r5,r23
    4554:	00096140 	call	9614 <__sprint_r>
    4558:	1039c91e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    455c:	d8802617 	ldw	r2,152(sp)
    4560:	d9403317 	ldw	r5,204(sp)
    4564:	d8c02017 	ldw	r3,128(sp)
    4568:	da000404 	addi	r8,sp,16
    456c:	2885c83a 	sub	r2,r5,r2
    4570:	003dfb06 	br	3d60 <__alt_data_end+0xff003d60>
    4574:	9080004c 	andi	r2,r18,1
    4578:	103e8f1e 	bne	r2,zero,3fb8 <__alt_data_end+0xff003fb8>
    457c:	d8802117 	ldw	r2,132(sp)
    4580:	003e9e06 	br	3ffc <__alt_data_end+0xff003ffc>
    4584:	1025883a 	mov	r18,r2
    4588:	0039883a 	mov	fp,zero
    458c:	00800084 	movi	r2,2
    4590:	003fd306 	br	44e0 <__alt_data_end+0xff0044e0>
    4594:	07000b44 	movi	fp,45
    4598:	df002785 	stb	fp,158(sp)
    459c:	003a4006 	br	2ea0 <__alt_data_end+0xff002ea0>
    45a0:	00c00b44 	movi	r3,45
    45a4:	d8c02785 	stb	r3,158(sp)
    45a8:	d8802a15 	stw	r2,168(sp)
    45ac:	dc802b17 	ldw	r18,172(sp)
    45b0:	d8002915 	stw	zero,164(sp)
    45b4:	07000b44 	movi	fp,45
    45b8:	003a8006 	br	2fbc <__alt_data_end+0xff002fbc>
    45bc:	04000074 	movhi	r16,1
    45c0:	8401fb04 	addi	r16,r16,2028
    45c4:	003f4706 	br	42e4 <__alt_data_end+0xff0042e4>
    45c8:	d8c02d17 	ldw	r3,180(sp)
    45cc:	d9002f17 	ldw	r4,188(sp)
    45d0:	18800017 	ldw	r2,0(r3)
    45d4:	18c00104 	addi	r3,r3,4
    45d8:	d8c02d15 	stw	r3,180(sp)
    45dc:	11000015 	stw	r4,0(r2)
    45e0:	0038dd06 	br	2958 <__alt_data_end+0xff002958>
    45e4:	dd802617 	ldw	r22,152(sp)
    45e8:	00bfff44 	movi	r2,-3
    45ec:	b0801c16 	blt	r22,r2,4660 <___vfprintf_internal_r+0x1de8>
    45f0:	d9402917 	ldw	r5,164(sp)
    45f4:	2d801a16 	blt	r5,r22,4660 <___vfprintf_internal_r+0x1de8>
    45f8:	dd803215 	stw	r22,200(sp)
    45fc:	003e8906 	br	4024 <__alt_data_end+0xff004024>
    4600:	01000074 	movhi	r4,1
    4604:	21020884 	addi	r4,r4,2082
    4608:	d9002b15 	stw	r4,172(sp)
    460c:	003c9106 	br	3854 <__alt_data_end+0xff003854>
    4610:	e005883a 	mov	r2,fp
    4614:	003e7906 	br	3ffc <__alt_data_end+0xff003ffc>
    4618:	d9402917 	ldw	r5,164(sp)
    461c:	df002783 	ldbu	fp,158(sp)
    4620:	dcc02d15 	stw	r19,180(sp)
    4624:	d9402a15 	stw	r5,168(sp)
    4628:	d9402e15 	stw	r5,184(sp)
    462c:	d8002915 	stw	zero,164(sp)
    4630:	d8003215 	stw	zero,200(sp)
    4634:	003a5d06 	br	2fac <__alt_data_end+0xff002fac>
    4638:	9080004c 	andi	r2,r18,1
    463c:	0039883a 	mov	fp,zero
    4640:	10000426 	beq	r2,zero,4654 <___vfprintf_internal_r+0x1ddc>
    4644:	00800c04 	movi	r2,48
    4648:	dc001dc4 	addi	r16,sp,119
    464c:	d8801dc5 	stb	r2,119(sp)
    4650:	003b8006 	br	3454 <__alt_data_end+0xff003454>
    4654:	d8002e15 	stw	zero,184(sp)
    4658:	dc001e04 	addi	r16,sp,120
    465c:	003a4d06 	br	2f94 <__alt_data_end+0xff002f94>
    4660:	8c7fff84 	addi	r17,r17,-2
    4664:	b5bfffc4 	addi	r22,r22,-1
    4668:	dd802615 	stw	r22,152(sp)
    466c:	dc4022c5 	stb	r17,139(sp)
    4670:	b000bf16 	blt	r22,zero,4970 <___vfprintf_internal_r+0x20f8>
    4674:	00800ac4 	movi	r2,43
    4678:	d8802305 	stb	r2,140(sp)
    467c:	00800244 	movi	r2,9
    4680:	15807016 	blt	r2,r22,4844 <___vfprintf_internal_r+0x1fcc>
    4684:	00800c04 	movi	r2,48
    4688:	b5800c04 	addi	r22,r22,48
    468c:	d8802345 	stb	r2,141(sp)
    4690:	dd802385 	stb	r22,142(sp)
    4694:	d88023c4 	addi	r2,sp,143
    4698:	df0022c4 	addi	fp,sp,139
    469c:	d8c03317 	ldw	r3,204(sp)
    46a0:	1739c83a 	sub	fp,r2,fp
    46a4:	d9003317 	ldw	r4,204(sp)
    46a8:	e0c7883a 	add	r3,fp,r3
    46ac:	df003a15 	stw	fp,232(sp)
    46b0:	d8c02e15 	stw	r3,184(sp)
    46b4:	00800044 	movi	r2,1
    46b8:	1100b30e 	bge	r2,r4,4988 <___vfprintf_internal_r+0x2110>
    46bc:	d8c02e17 	ldw	r3,184(sp)
    46c0:	18c00044 	addi	r3,r3,1
    46c4:	d8c02e15 	stw	r3,184(sp)
    46c8:	1805883a 	mov	r2,r3
    46cc:	1800ac16 	blt	r3,zero,4980 <___vfprintf_internal_r+0x2108>
    46d0:	d8003215 	stw	zero,200(sp)
    46d4:	003e5d06 	br	404c <__alt_data_end+0xff00404c>
    46d8:	d9002c17 	ldw	r4,176(sp)
    46dc:	d9801e04 	addi	r6,sp,120
    46e0:	b80b883a 	mov	r5,r23
    46e4:	00096140 	call	9614 <__sprint_r>
    46e8:	1039651e 	bne	r2,zero,2c80 <__alt_data_end+0xff002c80>
    46ec:	dc402617 	ldw	r17,152(sp)
    46f0:	d8c02017 	ldw	r3,128(sp)
    46f4:	d8801f17 	ldw	r2,124(sp)
    46f8:	da000404 	addi	r8,sp,16
    46fc:	003ed606 	br	4258 <__alt_data_end+0xff004258>
    4700:	582b883a 	mov	r21,r11
    4704:	d8002915 	stw	zero,164(sp)
    4708:	0038bd06 	br	2a00 <__alt_data_end+0xff002a00>
    470c:	d8802917 	ldw	r2,164(sp)
    4710:	103e071e 	bne	r2,zero,3f30 <__alt_data_end+0xff003f30>
    4714:	dc002915 	stw	r16,164(sp)
    4718:	003e0506 	br	3f30 <__alt_data_end+0xff003f30>
    471c:	d9002917 	ldw	r4,164(sp)
    4720:	20c00044 	addi	r3,r4,1
    4724:	003e0f06 	br	3f64 <__alt_data_end+0xff003f64>
    4728:	01400184 	movi	r5,6
    472c:	d9402915 	stw	r5,164(sp)
    4730:	003dff06 	br	3f30 <__alt_data_end+0xff003f30>
    4734:	d8802104 	addi	r2,sp,132
    4738:	d8800315 	stw	r2,12(sp)
    473c:	d8802504 	addi	r2,sp,148
    4740:	d8800215 	stw	r2,8(sp)
    4744:	d8802604 	addi	r2,sp,152
    4748:	d8800115 	stw	r2,4(sp)
    474c:	d8802917 	ldw	r2,164(sp)
    4750:	d9403617 	ldw	r5,216(sp)
    4754:	d9002c17 	ldw	r4,176(sp)
    4758:	d8800015 	stw	r2,0(sp)
    475c:	01c000c4 	movi	r7,3
    4760:	980d883a 	mov	r6,r19
    4764:	da003d15 	stw	r8,244(sp)
    4768:	0004e9c0 	call	4e9c <_dtoa_r>
    476c:	d8c02917 	ldw	r3,164(sp)
    4770:	da003d17 	ldw	r8,244(sp)
    4774:	1021883a 	mov	r16,r2
    4778:	10f9883a 	add	fp,r2,r3
    477c:	81000007 	ldb	r4,0(r16)
    4780:	00800c04 	movi	r2,48
    4784:	20805e26 	beq	r4,r2,4900 <___vfprintf_internal_r+0x2088>
    4788:	d8c02617 	ldw	r3,152(sp)
    478c:	e0f9883a 	add	fp,fp,r3
    4790:	003e0a06 	br	3fbc <__alt_data_end+0xff003fbc>
    4794:	00c00b44 	movi	r3,45
    4798:	24e0003c 	xorhi	r19,r4,32768
    479c:	d8c02a05 	stb	r3,168(sp)
    47a0:	003de906 	br	3f48 <__alt_data_end+0xff003f48>
    47a4:	d8c03217 	ldw	r3,200(sp)
    47a8:	00c07a0e 	bge	zero,r3,4994 <___vfprintf_internal_r+0x211c>
    47ac:	00800044 	movi	r2,1
    47b0:	d9003317 	ldw	r4,204(sp)
    47b4:	1105883a 	add	r2,r2,r4
    47b8:	d8802e15 	stw	r2,184(sp)
    47bc:	10004e16 	blt	r2,zero,48f8 <___vfprintf_internal_r+0x2080>
    47c0:	044019c4 	movi	r17,103
    47c4:	003e2106 	br	404c <__alt_data_end+0xff00404c>
    47c8:	d9002917 	ldw	r4,164(sp)
    47cc:	d8802104 	addi	r2,sp,132
    47d0:	d8800315 	stw	r2,12(sp)
    47d4:	d9000015 	stw	r4,0(sp)
    47d8:	d8802504 	addi	r2,sp,148
    47dc:	d9403617 	ldw	r5,216(sp)
    47e0:	d9002c17 	ldw	r4,176(sp)
    47e4:	d8800215 	stw	r2,8(sp)
    47e8:	d8802604 	addi	r2,sp,152
    47ec:	d8800115 	stw	r2,4(sp)
    47f0:	01c000c4 	movi	r7,3
    47f4:	980d883a 	mov	r6,r19
    47f8:	da003d15 	stw	r8,244(sp)
    47fc:	0004e9c0 	call	4e9c <_dtoa_r>
    4800:	d8c02917 	ldw	r3,164(sp)
    4804:	da003d17 	ldw	r8,244(sp)
    4808:	1021883a 	mov	r16,r2
    480c:	00801184 	movi	r2,70
    4810:	80f9883a 	add	fp,r16,r3
    4814:	88bfd926 	beq	r17,r2,477c <__alt_data_end+0xff00477c>
    4818:	003de806 	br	3fbc <__alt_data_end+0xff003fbc>
    481c:	d9002917 	ldw	r4,164(sp)
    4820:	00c04d0e 	bge	zero,r3,4958 <___vfprintf_internal_r+0x20e0>
    4824:	2000441e 	bne	r4,zero,4938 <___vfprintf_internal_r+0x20c0>
    4828:	9480004c 	andi	r18,r18,1
    482c:	9000421e 	bne	r18,zero,4938 <___vfprintf_internal_r+0x20c0>
    4830:	1805883a 	mov	r2,r3
    4834:	18007016 	blt	r3,zero,49f8 <___vfprintf_internal_r+0x2180>
    4838:	d8c03217 	ldw	r3,200(sp)
    483c:	d8c02e15 	stw	r3,184(sp)
    4840:	003e0206 	br	404c <__alt_data_end+0xff00404c>
    4844:	df0022c4 	addi	fp,sp,139
    4848:	dc002915 	stw	r16,164(sp)
    484c:	4027883a 	mov	r19,r8
    4850:	e021883a 	mov	r16,fp
    4854:	b009883a 	mov	r4,r22
    4858:	01400284 	movi	r5,10
    485c:	000bfc80 	call	bfc8 <__modsi3>
    4860:	10800c04 	addi	r2,r2,48
    4864:	843fffc4 	addi	r16,r16,-1
    4868:	b009883a 	mov	r4,r22
    486c:	01400284 	movi	r5,10
    4870:	80800005 	stb	r2,0(r16)
    4874:	000bf440 	call	bf44 <__divsi3>
    4878:	102d883a 	mov	r22,r2
    487c:	00800244 	movi	r2,9
    4880:	15bff416 	blt	r2,r22,4854 <__alt_data_end+0xff004854>
    4884:	9811883a 	mov	r8,r19
    4888:	b0800c04 	addi	r2,r22,48
    488c:	8027883a 	mov	r19,r16
    4890:	997fffc4 	addi	r5,r19,-1
    4894:	98bfffc5 	stb	r2,-1(r19)
    4898:	dc002917 	ldw	r16,164(sp)
    489c:	2f006a2e 	bgeu	r5,fp,4a48 <___vfprintf_internal_r+0x21d0>
    48a0:	d9c02384 	addi	r7,sp,142
    48a4:	3ccfc83a 	sub	r7,r7,r19
    48a8:	d9002344 	addi	r4,sp,141
    48ac:	e1cf883a 	add	r7,fp,r7
    48b0:	00000106 	br	48b8 <___vfprintf_internal_r+0x2040>
    48b4:	28800003 	ldbu	r2,0(r5)
    48b8:	20800005 	stb	r2,0(r4)
    48bc:	21000044 	addi	r4,r4,1
    48c0:	29400044 	addi	r5,r5,1
    48c4:	393ffb1e 	bne	r7,r4,48b4 <__alt_data_end+0xff0048b4>
    48c8:	d8802304 	addi	r2,sp,140
    48cc:	14c5c83a 	sub	r2,r2,r19
    48d0:	d8c02344 	addi	r3,sp,141
    48d4:	1885883a 	add	r2,r3,r2
    48d8:	003f7006 	br	469c <__alt_data_end+0xff00469c>
    48dc:	0005883a 	mov	r2,zero
    48e0:	003f0f06 	br	4520 <__alt_data_end+0xff004520>
    48e4:	d8c03217 	ldw	r3,200(sp)
    48e8:	18c00044 	addi	r3,r3,1
    48ec:	d8c02e15 	stw	r3,184(sp)
    48f0:	1805883a 	mov	r2,r3
    48f4:	183fb20e 	bge	r3,zero,47c0 <__alt_data_end+0xff0047c0>
    48f8:	0005883a 	mov	r2,zero
    48fc:	003fb006 	br	47c0 <__alt_data_end+0xff0047c0>
    4900:	d9003617 	ldw	r4,216(sp)
    4904:	000d883a 	mov	r6,zero
    4908:	000f883a 	mov	r7,zero
    490c:	980b883a 	mov	r5,r19
    4910:	d8c03c15 	stw	r3,240(sp)
    4914:	da003d15 	stw	r8,244(sp)
    4918:	000d28c0 	call	d28c <__eqdf2>
    491c:	d8c03c17 	ldw	r3,240(sp)
    4920:	da003d17 	ldw	r8,244(sp)
    4924:	103f9826 	beq	r2,zero,4788 <__alt_data_end+0xff004788>
    4928:	00800044 	movi	r2,1
    492c:	10c7c83a 	sub	r3,r2,r3
    4930:	d8c02615 	stw	r3,152(sp)
    4934:	003f9506 	br	478c <__alt_data_end+0xff00478c>
    4938:	d9002917 	ldw	r4,164(sp)
    493c:	d8c03217 	ldw	r3,200(sp)
    4940:	20800044 	addi	r2,r4,1
    4944:	1885883a 	add	r2,r3,r2
    4948:	d8802e15 	stw	r2,184(sp)
    494c:	103dbf0e 	bge	r2,zero,404c <__alt_data_end+0xff00404c>
    4950:	0005883a 	mov	r2,zero
    4954:	003dbd06 	br	404c <__alt_data_end+0xff00404c>
    4958:	2000211e 	bne	r4,zero,49e0 <___vfprintf_internal_r+0x2168>
    495c:	9480004c 	andi	r18,r18,1
    4960:	90001f1e 	bne	r18,zero,49e0 <___vfprintf_internal_r+0x2168>
    4964:	00800044 	movi	r2,1
    4968:	d8802e15 	stw	r2,184(sp)
    496c:	003db706 	br	404c <__alt_data_end+0xff00404c>
    4970:	00800b44 	movi	r2,45
    4974:	05adc83a 	sub	r22,zero,r22
    4978:	d8802305 	stb	r2,140(sp)
    497c:	003f3f06 	br	467c <__alt_data_end+0xff00467c>
    4980:	0005883a 	mov	r2,zero
    4984:	003f5206 	br	46d0 <__alt_data_end+0xff0046d0>
    4988:	90a4703a 	and	r18,r18,r2
    498c:	903f4e26 	beq	r18,zero,46c8 <__alt_data_end+0xff0046c8>
    4990:	003f4a06 	br	46bc <__alt_data_end+0xff0046bc>
    4994:	00800084 	movi	r2,2
    4998:	10c5c83a 	sub	r2,r2,r3
    499c:	003f8406 	br	47b0 <__alt_data_end+0xff0047b0>
    49a0:	d8802d17 	ldw	r2,180(sp)
    49a4:	d9002d17 	ldw	r4,180(sp)
    49a8:	ac400043 	ldbu	r17,1(r21)
    49ac:	10800017 	ldw	r2,0(r2)
    49b0:	582b883a 	mov	r21,r11
    49b4:	d8802915 	stw	r2,164(sp)
    49b8:	20800104 	addi	r2,r4,4
    49bc:	d9002917 	ldw	r4,164(sp)
    49c0:	d8802d15 	stw	r2,180(sp)
    49c4:	203e7a0e 	bge	r4,zero,43b0 <__alt_data_end+0xff0043b0>
    49c8:	8c403fcc 	andi	r17,r17,255
    49cc:	00bfffc4 	movi	r2,-1
    49d0:	8c40201c 	xori	r17,r17,128
    49d4:	d8802915 	stw	r2,164(sp)
    49d8:	8c7fe004 	addi	r17,r17,-128
    49dc:	00380706 	br	29fc <__alt_data_end+0xff0029fc>
    49e0:	d8c02917 	ldw	r3,164(sp)
    49e4:	18c00084 	addi	r3,r3,2
    49e8:	d8c02e15 	stw	r3,184(sp)
    49ec:	1805883a 	mov	r2,r3
    49f0:	183d960e 	bge	r3,zero,404c <__alt_data_end+0xff00404c>
    49f4:	003fd606 	br	4950 <__alt_data_end+0xff004950>
    49f8:	0005883a 	mov	r2,zero
    49fc:	003f8e06 	br	4838 <__alt_data_end+0xff004838>
    4a00:	9080004c 	andi	r2,r18,1
    4a04:	103f811e 	bne	r2,zero,480c <__alt_data_end+0xff00480c>
    4a08:	d8802117 	ldw	r2,132(sp)
    4a0c:	1405c83a 	sub	r2,r2,r16
    4a10:	d8803315 	stw	r2,204(sp)
    4a14:	b47ef326 	beq	r22,r17,45e4 <__alt_data_end+0xff0045e4>
    4a18:	dd802617 	ldw	r22,152(sp)
    4a1c:	003f1106 	br	4664 <__alt_data_end+0xff004664>
    4a20:	d9c02785 	stb	r7,158(sp)
    4a24:	00390406 	br	2e38 <__alt_data_end+0xff002e38>
    4a28:	d9c02785 	stb	r7,158(sp)
    4a2c:	0038d306 	br	2d7c <__alt_data_end+0xff002d7c>
    4a30:	d9c02785 	stb	r7,158(sp)
    4a34:	003a6106 	br	33bc <__alt_data_end+0xff0033bc>
    4a38:	d9c02785 	stb	r7,158(sp)
    4a3c:	003af806 	br	3620 <__alt_data_end+0xff003620>
    4a40:	0005883a 	mov	r2,zero
    4a44:	003d7e06 	br	4040 <__alt_data_end+0xff004040>
    4a48:	d8802344 	addi	r2,sp,141
    4a4c:	003f1306 	br	469c <__alt_data_end+0xff00469c>
    4a50:	d9c02785 	stb	r7,158(sp)
    4a54:	00392306 	br	2ee4 <__alt_data_end+0xff002ee4>
    4a58:	d9c02785 	stb	r7,158(sp)
    4a5c:	003aa906 	br	3504 <__alt_data_end+0xff003504>
    4a60:	d9c02785 	stb	r7,158(sp)
    4a64:	003a3d06 	br	335c <__alt_data_end+0xff00335c>
    4a68:	d9c02785 	stb	r7,158(sp)
    4a6c:	003aca06 	br	3598 <__alt_data_end+0xff003598>

00004a70 <__vfprintf_internal>:
    4a70:	00800074 	movhi	r2,1
    4a74:	10896104 	addi	r2,r2,9604
    4a78:	300f883a 	mov	r7,r6
    4a7c:	280d883a 	mov	r6,r5
    4a80:	200b883a 	mov	r5,r4
    4a84:	11000017 	ldw	r4,0(r2)
    4a88:	00028781 	jmpi	2878 <___vfprintf_internal_r>

00004a8c <__sbprintf>:
    4a8c:	2880030b 	ldhu	r2,12(r5)
    4a90:	2ac01917 	ldw	r11,100(r5)
    4a94:	2a80038b 	ldhu	r10,14(r5)
    4a98:	2a400717 	ldw	r9,28(r5)
    4a9c:	2a000917 	ldw	r8,36(r5)
    4aa0:	defee204 	addi	sp,sp,-1144
    4aa4:	00c10004 	movi	r3,1024
    4aa8:	dc011a15 	stw	r16,1128(sp)
    4aac:	10bfff4c 	andi	r2,r2,65533
    4ab0:	2821883a 	mov	r16,r5
    4ab4:	d8cb883a 	add	r5,sp,r3
    4ab8:	dc811c15 	stw	r18,1136(sp)
    4abc:	dc411b15 	stw	r17,1132(sp)
    4ac0:	dfc11d15 	stw	ra,1140(sp)
    4ac4:	2025883a 	mov	r18,r4
    4ac8:	d881030d 	sth	r2,1036(sp)
    4acc:	dac11915 	stw	r11,1124(sp)
    4ad0:	da81038d 	sth	r10,1038(sp)
    4ad4:	da410715 	stw	r9,1052(sp)
    4ad8:	da010915 	stw	r8,1060(sp)
    4adc:	dec10015 	stw	sp,1024(sp)
    4ae0:	dec10415 	stw	sp,1040(sp)
    4ae4:	d8c10215 	stw	r3,1032(sp)
    4ae8:	d8c10515 	stw	r3,1044(sp)
    4aec:	d8010615 	stw	zero,1048(sp)
    4af0:	00028780 	call	2878 <___vfprintf_internal_r>
    4af4:	1023883a 	mov	r17,r2
    4af8:	10000416 	blt	r2,zero,4b0c <__sbprintf+0x80>
    4afc:	d9410004 	addi	r5,sp,1024
    4b00:	9009883a 	mov	r4,r18
    4b04:	00067400 	call	6740 <_fflush_r>
    4b08:	10000d1e 	bne	r2,zero,4b40 <__sbprintf+0xb4>
    4b0c:	d881030b 	ldhu	r2,1036(sp)
    4b10:	1080100c 	andi	r2,r2,64
    4b14:	10000326 	beq	r2,zero,4b24 <__sbprintf+0x98>
    4b18:	8080030b 	ldhu	r2,12(r16)
    4b1c:	10801014 	ori	r2,r2,64
    4b20:	8080030d 	sth	r2,12(r16)
    4b24:	8805883a 	mov	r2,r17
    4b28:	dfc11d17 	ldw	ra,1140(sp)
    4b2c:	dc811c17 	ldw	r18,1136(sp)
    4b30:	dc411b17 	ldw	r17,1132(sp)
    4b34:	dc011a17 	ldw	r16,1128(sp)
    4b38:	dec11e04 	addi	sp,sp,1144
    4b3c:	f800283a 	ret
    4b40:	047fffc4 	movi	r17,-1
    4b44:	003ff106 	br	4b0c <__alt_data_end+0xff004b0c>

00004b48 <__swsetup_r>:
    4b48:	00800074 	movhi	r2,1
    4b4c:	defffd04 	addi	sp,sp,-12
    4b50:	10896104 	addi	r2,r2,9604
    4b54:	dc400115 	stw	r17,4(sp)
    4b58:	2023883a 	mov	r17,r4
    4b5c:	11000017 	ldw	r4,0(r2)
    4b60:	dc000015 	stw	r16,0(sp)
    4b64:	dfc00215 	stw	ra,8(sp)
    4b68:	2821883a 	mov	r16,r5
    4b6c:	20000226 	beq	r4,zero,4b78 <__swsetup_r+0x30>
    4b70:	20800e17 	ldw	r2,56(r4)
    4b74:	10003126 	beq	r2,zero,4c3c <__swsetup_r+0xf4>
    4b78:	8080030b 	ldhu	r2,12(r16)
    4b7c:	10c0020c 	andi	r3,r2,8
    4b80:	1009883a 	mov	r4,r2
    4b84:	18000f26 	beq	r3,zero,4bc4 <__swsetup_r+0x7c>
    4b88:	80c00417 	ldw	r3,16(r16)
    4b8c:	18001526 	beq	r3,zero,4be4 <__swsetup_r+0x9c>
    4b90:	1100004c 	andi	r4,r2,1
    4b94:	20001c1e 	bne	r4,zero,4c08 <__swsetup_r+0xc0>
    4b98:	1080008c 	andi	r2,r2,2
    4b9c:	1000291e 	bne	r2,zero,4c44 <__swsetup_r+0xfc>
    4ba0:	80800517 	ldw	r2,20(r16)
    4ba4:	80800215 	stw	r2,8(r16)
    4ba8:	18001c26 	beq	r3,zero,4c1c <__swsetup_r+0xd4>
    4bac:	0005883a 	mov	r2,zero
    4bb0:	dfc00217 	ldw	ra,8(sp)
    4bb4:	dc400117 	ldw	r17,4(sp)
    4bb8:	dc000017 	ldw	r16,0(sp)
    4bbc:	dec00304 	addi	sp,sp,12
    4bc0:	f800283a 	ret
    4bc4:	2080040c 	andi	r2,r4,16
    4bc8:	10002e26 	beq	r2,zero,4c84 <__swsetup_r+0x13c>
    4bcc:	2080010c 	andi	r2,r4,4
    4bd0:	10001e1e 	bne	r2,zero,4c4c <__swsetup_r+0x104>
    4bd4:	80c00417 	ldw	r3,16(r16)
    4bd8:	20800214 	ori	r2,r4,8
    4bdc:	8080030d 	sth	r2,12(r16)
    4be0:	183feb1e 	bne	r3,zero,4b90 <__alt_data_end+0xff004b90>
    4be4:	1100a00c 	andi	r4,r2,640
    4be8:	01408004 	movi	r5,512
    4bec:	217fe826 	beq	r4,r5,4b90 <__alt_data_end+0xff004b90>
    4bf0:	800b883a 	mov	r5,r16
    4bf4:	8809883a 	mov	r4,r17
    4bf8:	00076c00 	call	76c0 <__smakebuf_r>
    4bfc:	8080030b 	ldhu	r2,12(r16)
    4c00:	80c00417 	ldw	r3,16(r16)
    4c04:	003fe206 	br	4b90 <__alt_data_end+0xff004b90>
    4c08:	80800517 	ldw	r2,20(r16)
    4c0c:	80000215 	stw	zero,8(r16)
    4c10:	0085c83a 	sub	r2,zero,r2
    4c14:	80800615 	stw	r2,24(r16)
    4c18:	183fe41e 	bne	r3,zero,4bac <__alt_data_end+0xff004bac>
    4c1c:	80c0030b 	ldhu	r3,12(r16)
    4c20:	0005883a 	mov	r2,zero
    4c24:	1900200c 	andi	r4,r3,128
    4c28:	203fe126 	beq	r4,zero,4bb0 <__alt_data_end+0xff004bb0>
    4c2c:	18c01014 	ori	r3,r3,64
    4c30:	80c0030d 	sth	r3,12(r16)
    4c34:	00bfffc4 	movi	r2,-1
    4c38:	003fdd06 	br	4bb0 <__alt_data_end+0xff004bb0>
    4c3c:	0006b1c0 	call	6b1c <__sinit>
    4c40:	003fcd06 	br	4b78 <__alt_data_end+0xff004b78>
    4c44:	0005883a 	mov	r2,zero
    4c48:	003fd606 	br	4ba4 <__alt_data_end+0xff004ba4>
    4c4c:	81400c17 	ldw	r5,48(r16)
    4c50:	28000626 	beq	r5,zero,4c6c <__swsetup_r+0x124>
    4c54:	80801004 	addi	r2,r16,64
    4c58:	28800326 	beq	r5,r2,4c68 <__swsetup_r+0x120>
    4c5c:	8809883a 	mov	r4,r17
    4c60:	0006c900 	call	6c90 <_free_r>
    4c64:	8100030b 	ldhu	r4,12(r16)
    4c68:	80000c15 	stw	zero,48(r16)
    4c6c:	80c00417 	ldw	r3,16(r16)
    4c70:	00bff6c4 	movi	r2,-37
    4c74:	1108703a 	and	r4,r2,r4
    4c78:	80000115 	stw	zero,4(r16)
    4c7c:	80c00015 	stw	r3,0(r16)
    4c80:	003fd506 	br	4bd8 <__alt_data_end+0xff004bd8>
    4c84:	00800244 	movi	r2,9
    4c88:	88800015 	stw	r2,0(r17)
    4c8c:	20801014 	ori	r2,r4,64
    4c90:	8080030d 	sth	r2,12(r16)
    4c94:	00bfffc4 	movi	r2,-1
    4c98:	003fc506 	br	4bb0 <__alt_data_end+0xff004bb0>

00004c9c <quorem>:
    4c9c:	defff704 	addi	sp,sp,-36
    4ca0:	dc800215 	stw	r18,8(sp)
    4ca4:	20800417 	ldw	r2,16(r4)
    4ca8:	2c800417 	ldw	r18,16(r5)
    4cac:	dfc00815 	stw	ra,32(sp)
    4cb0:	ddc00715 	stw	r23,28(sp)
    4cb4:	dd800615 	stw	r22,24(sp)
    4cb8:	dd400515 	stw	r21,20(sp)
    4cbc:	dd000415 	stw	r20,16(sp)
    4cc0:	dcc00315 	stw	r19,12(sp)
    4cc4:	dc400115 	stw	r17,4(sp)
    4cc8:	dc000015 	stw	r16,0(sp)
    4ccc:	14807116 	blt	r2,r18,4e94 <quorem+0x1f8>
    4cd0:	94bfffc4 	addi	r18,r18,-1
    4cd4:	94ad883a 	add	r22,r18,r18
    4cd8:	b5ad883a 	add	r22,r22,r22
    4cdc:	2c400504 	addi	r17,r5,20
    4ce0:	8da9883a 	add	r20,r17,r22
    4ce4:	25400504 	addi	r21,r4,20
    4ce8:	282f883a 	mov	r23,r5
    4cec:	adad883a 	add	r22,r21,r22
    4cf0:	a1400017 	ldw	r5,0(r20)
    4cf4:	2021883a 	mov	r16,r4
    4cf8:	b1000017 	ldw	r4,0(r22)
    4cfc:	29400044 	addi	r5,r5,1
    4d00:	000c03c0 	call	c03c <__udivsi3>
    4d04:	1027883a 	mov	r19,r2
    4d08:	10002c26 	beq	r2,zero,4dbc <quorem+0x120>
    4d0c:	a813883a 	mov	r9,r21
    4d10:	880b883a 	mov	r5,r17
    4d14:	0009883a 	mov	r4,zero
    4d18:	000d883a 	mov	r6,zero
    4d1c:	2a000017 	ldw	r8,0(r5)
    4d20:	49c00017 	ldw	r7,0(r9)
    4d24:	29400104 	addi	r5,r5,4
    4d28:	40bfffcc 	andi	r2,r8,65535
    4d2c:	14c5383a 	mul	r2,r2,r19
    4d30:	4010d43a 	srli	r8,r8,16
    4d34:	38ffffcc 	andi	r3,r7,65535
    4d38:	1105883a 	add	r2,r2,r4
    4d3c:	1008d43a 	srli	r4,r2,16
    4d40:	44d1383a 	mul	r8,r8,r19
    4d44:	198d883a 	add	r6,r3,r6
    4d48:	10ffffcc 	andi	r3,r2,65535
    4d4c:	30c7c83a 	sub	r3,r6,r3
    4d50:	380ed43a 	srli	r7,r7,16
    4d54:	4105883a 	add	r2,r8,r4
    4d58:	180dd43a 	srai	r6,r3,16
    4d5c:	113fffcc 	andi	r4,r2,65535
    4d60:	390fc83a 	sub	r7,r7,r4
    4d64:	398d883a 	add	r6,r7,r6
    4d68:	300e943a 	slli	r7,r6,16
    4d6c:	18ffffcc 	andi	r3,r3,65535
    4d70:	1008d43a 	srli	r4,r2,16
    4d74:	38ceb03a 	or	r7,r7,r3
    4d78:	49c00015 	stw	r7,0(r9)
    4d7c:	300dd43a 	srai	r6,r6,16
    4d80:	4a400104 	addi	r9,r9,4
    4d84:	a17fe52e 	bgeu	r20,r5,4d1c <__alt_data_end+0xff004d1c>
    4d88:	b0800017 	ldw	r2,0(r22)
    4d8c:	10000b1e 	bne	r2,zero,4dbc <quorem+0x120>
    4d90:	b0bfff04 	addi	r2,r22,-4
    4d94:	a880082e 	bgeu	r21,r2,4db8 <quorem+0x11c>
    4d98:	b0ffff17 	ldw	r3,-4(r22)
    4d9c:	18000326 	beq	r3,zero,4dac <quorem+0x110>
    4da0:	00000506 	br	4db8 <quorem+0x11c>
    4da4:	10c00017 	ldw	r3,0(r2)
    4da8:	1800031e 	bne	r3,zero,4db8 <quorem+0x11c>
    4dac:	10bfff04 	addi	r2,r2,-4
    4db0:	94bfffc4 	addi	r18,r18,-1
    4db4:	a8bffb36 	bltu	r21,r2,4da4 <__alt_data_end+0xff004da4>
    4db8:	84800415 	stw	r18,16(r16)
    4dbc:	b80b883a 	mov	r5,r23
    4dc0:	8009883a 	mov	r4,r16
    4dc4:	00085f40 	call	85f4 <__mcmp>
    4dc8:	10002616 	blt	r2,zero,4e64 <quorem+0x1c8>
    4dcc:	9cc00044 	addi	r19,r19,1
    4dd0:	a805883a 	mov	r2,r21
    4dd4:	000b883a 	mov	r5,zero
    4dd8:	11000017 	ldw	r4,0(r2)
    4ddc:	89800017 	ldw	r6,0(r17)
    4de0:	10800104 	addi	r2,r2,4
    4de4:	20ffffcc 	andi	r3,r4,65535
    4de8:	194b883a 	add	r5,r3,r5
    4dec:	30ffffcc 	andi	r3,r6,65535
    4df0:	28c7c83a 	sub	r3,r5,r3
    4df4:	300cd43a 	srli	r6,r6,16
    4df8:	2008d43a 	srli	r4,r4,16
    4dfc:	180bd43a 	srai	r5,r3,16
    4e00:	18ffffcc 	andi	r3,r3,65535
    4e04:	2189c83a 	sub	r4,r4,r6
    4e08:	2149883a 	add	r4,r4,r5
    4e0c:	200c943a 	slli	r6,r4,16
    4e10:	8c400104 	addi	r17,r17,4
    4e14:	200bd43a 	srai	r5,r4,16
    4e18:	30c6b03a 	or	r3,r6,r3
    4e1c:	10ffff15 	stw	r3,-4(r2)
    4e20:	a47fed2e 	bgeu	r20,r17,4dd8 <__alt_data_end+0xff004dd8>
    4e24:	9485883a 	add	r2,r18,r18
    4e28:	1085883a 	add	r2,r2,r2
    4e2c:	a887883a 	add	r3,r21,r2
    4e30:	18800017 	ldw	r2,0(r3)
    4e34:	10000b1e 	bne	r2,zero,4e64 <quorem+0x1c8>
    4e38:	18bfff04 	addi	r2,r3,-4
    4e3c:	a880082e 	bgeu	r21,r2,4e60 <quorem+0x1c4>
    4e40:	18ffff17 	ldw	r3,-4(r3)
    4e44:	18000326 	beq	r3,zero,4e54 <quorem+0x1b8>
    4e48:	00000506 	br	4e60 <quorem+0x1c4>
    4e4c:	10c00017 	ldw	r3,0(r2)
    4e50:	1800031e 	bne	r3,zero,4e60 <quorem+0x1c4>
    4e54:	10bfff04 	addi	r2,r2,-4
    4e58:	94bfffc4 	addi	r18,r18,-1
    4e5c:	a8bffb36 	bltu	r21,r2,4e4c <__alt_data_end+0xff004e4c>
    4e60:	84800415 	stw	r18,16(r16)
    4e64:	9805883a 	mov	r2,r19
    4e68:	dfc00817 	ldw	ra,32(sp)
    4e6c:	ddc00717 	ldw	r23,28(sp)
    4e70:	dd800617 	ldw	r22,24(sp)
    4e74:	dd400517 	ldw	r21,20(sp)
    4e78:	dd000417 	ldw	r20,16(sp)
    4e7c:	dcc00317 	ldw	r19,12(sp)
    4e80:	dc800217 	ldw	r18,8(sp)
    4e84:	dc400117 	ldw	r17,4(sp)
    4e88:	dc000017 	ldw	r16,0(sp)
    4e8c:	dec00904 	addi	sp,sp,36
    4e90:	f800283a 	ret
    4e94:	0005883a 	mov	r2,zero
    4e98:	003ff306 	br	4e68 <__alt_data_end+0xff004e68>

00004e9c <_dtoa_r>:
    4e9c:	20801017 	ldw	r2,64(r4)
    4ea0:	deffde04 	addi	sp,sp,-136
    4ea4:	df002015 	stw	fp,128(sp)
    4ea8:	dcc01b15 	stw	r19,108(sp)
    4eac:	dc801a15 	stw	r18,104(sp)
    4eb0:	dc401915 	stw	r17,100(sp)
    4eb4:	dc001815 	stw	r16,96(sp)
    4eb8:	dfc02115 	stw	ra,132(sp)
    4ebc:	ddc01f15 	stw	r23,124(sp)
    4ec0:	dd801e15 	stw	r22,120(sp)
    4ec4:	dd401d15 	stw	r21,116(sp)
    4ec8:	dd001c15 	stw	r20,112(sp)
    4ecc:	d9c00315 	stw	r7,12(sp)
    4ed0:	2039883a 	mov	fp,r4
    4ed4:	3023883a 	mov	r17,r6
    4ed8:	2825883a 	mov	r18,r5
    4edc:	dc002417 	ldw	r16,144(sp)
    4ee0:	3027883a 	mov	r19,r6
    4ee4:	10000826 	beq	r2,zero,4f08 <_dtoa_r+0x6c>
    4ee8:	21801117 	ldw	r6,68(r4)
    4eec:	00c00044 	movi	r3,1
    4ef0:	100b883a 	mov	r5,r2
    4ef4:	1986983a 	sll	r3,r3,r6
    4ef8:	11800115 	stw	r6,4(r2)
    4efc:	10c00215 	stw	r3,8(r2)
    4f00:	0007dd40 	call	7dd4 <_Bfree>
    4f04:	e0001015 	stw	zero,64(fp)
    4f08:	88002e16 	blt	r17,zero,4fc4 <_dtoa_r+0x128>
    4f0c:	80000015 	stw	zero,0(r16)
    4f10:	889ffc2c 	andhi	r2,r17,32752
    4f14:	00dffc34 	movhi	r3,32752
    4f18:	10c01c26 	beq	r2,r3,4f8c <_dtoa_r+0xf0>
    4f1c:	000d883a 	mov	r6,zero
    4f20:	000f883a 	mov	r7,zero
    4f24:	9009883a 	mov	r4,r18
    4f28:	980b883a 	mov	r5,r19
    4f2c:	000d28c0 	call	d28c <__eqdf2>
    4f30:	10002b1e 	bne	r2,zero,4fe0 <_dtoa_r+0x144>
    4f34:	d9c02317 	ldw	r7,140(sp)
    4f38:	00800044 	movi	r2,1
    4f3c:	38800015 	stw	r2,0(r7)
    4f40:	d8802517 	ldw	r2,148(sp)
    4f44:	10019e26 	beq	r2,zero,55c0 <_dtoa_r+0x724>
    4f48:	d8c02517 	ldw	r3,148(sp)
    4f4c:	00800074 	movhi	r2,1
    4f50:	10820844 	addi	r2,r2,2081
    4f54:	18800015 	stw	r2,0(r3)
    4f58:	10bfffc4 	addi	r2,r2,-1
    4f5c:	dfc02117 	ldw	ra,132(sp)
    4f60:	df002017 	ldw	fp,128(sp)
    4f64:	ddc01f17 	ldw	r23,124(sp)
    4f68:	dd801e17 	ldw	r22,120(sp)
    4f6c:	dd401d17 	ldw	r21,116(sp)
    4f70:	dd001c17 	ldw	r20,112(sp)
    4f74:	dcc01b17 	ldw	r19,108(sp)
    4f78:	dc801a17 	ldw	r18,104(sp)
    4f7c:	dc401917 	ldw	r17,100(sp)
    4f80:	dc001817 	ldw	r16,96(sp)
    4f84:	dec02204 	addi	sp,sp,136
    4f88:	f800283a 	ret
    4f8c:	d8c02317 	ldw	r3,140(sp)
    4f90:	0089c3c4 	movi	r2,9999
    4f94:	18800015 	stw	r2,0(r3)
    4f98:	90017726 	beq	r18,zero,5578 <_dtoa_r+0x6dc>
    4f9c:	00800074 	movhi	r2,1
    4fa0:	10821404 	addi	r2,r2,2128
    4fa4:	d9002517 	ldw	r4,148(sp)
    4fa8:	203fec26 	beq	r4,zero,4f5c <__alt_data_end+0xff004f5c>
    4fac:	10c000c7 	ldb	r3,3(r2)
    4fb0:	1801781e 	bne	r3,zero,5594 <_dtoa_r+0x6f8>
    4fb4:	10c000c4 	addi	r3,r2,3
    4fb8:	d9802517 	ldw	r6,148(sp)
    4fbc:	30c00015 	stw	r3,0(r6)
    4fc0:	003fe606 	br	4f5c <__alt_data_end+0xff004f5c>
    4fc4:	04e00034 	movhi	r19,32768
    4fc8:	9cffffc4 	addi	r19,r19,-1
    4fcc:	00800044 	movi	r2,1
    4fd0:	8ce6703a 	and	r19,r17,r19
    4fd4:	80800015 	stw	r2,0(r16)
    4fd8:	9823883a 	mov	r17,r19
    4fdc:	003fcc06 	br	4f10 <__alt_data_end+0xff004f10>
    4fe0:	d8800204 	addi	r2,sp,8
    4fe4:	d8800015 	stw	r2,0(sp)
    4fe8:	d9c00104 	addi	r7,sp,4
    4fec:	900b883a 	mov	r5,r18
    4ff0:	980d883a 	mov	r6,r19
    4ff4:	e009883a 	mov	r4,fp
    4ff8:	8820d53a 	srli	r16,r17,20
    4ffc:	00089c00 	call	89c0 <__d2b>
    5000:	d8800915 	stw	r2,36(sp)
    5004:	8001651e 	bne	r16,zero,559c <_dtoa_r+0x700>
    5008:	dd800217 	ldw	r22,8(sp)
    500c:	dc000117 	ldw	r16,4(sp)
    5010:	00800804 	movi	r2,32
    5014:	b421883a 	add	r16,r22,r16
    5018:	80c10c84 	addi	r3,r16,1074
    501c:	10c2d10e 	bge	r2,r3,5b64 <_dtoa_r+0xcc8>
    5020:	00801004 	movi	r2,64
    5024:	81010484 	addi	r4,r16,1042
    5028:	10c7c83a 	sub	r3,r2,r3
    502c:	9108d83a 	srl	r4,r18,r4
    5030:	88e2983a 	sll	r17,r17,r3
    5034:	2448b03a 	or	r4,r4,r17
    5038:	000e6540 	call	e654 <__floatunsidf>
    503c:	017f8434 	movhi	r5,65040
    5040:	01800044 	movi	r6,1
    5044:	1009883a 	mov	r4,r2
    5048:	194b883a 	add	r5,r3,r5
    504c:	843fffc4 	addi	r16,r16,-1
    5050:	d9801115 	stw	r6,68(sp)
    5054:	000d883a 	mov	r6,zero
    5058:	01cffe34 	movhi	r7,16376
    505c:	000dbfc0 	call	dbfc <__subdf3>
    5060:	0198dbf4 	movhi	r6,25455
    5064:	01cff4f4 	movhi	r7,16339
    5068:	3190d844 	addi	r6,r6,17249
    506c:	39e1e9c4 	addi	r7,r7,-30809
    5070:	1009883a 	mov	r4,r2
    5074:	180b883a 	mov	r5,r3
    5078:	000d4e40 	call	d4e4 <__muldf3>
    507c:	01a2d874 	movhi	r6,35681
    5080:	01cff1f4 	movhi	r7,16327
    5084:	31b22cc4 	addi	r6,r6,-14157
    5088:	39e28a04 	addi	r7,r7,-30168
    508c:	180b883a 	mov	r5,r3
    5090:	1009883a 	mov	r4,r2
    5094:	000c0f80 	call	c0f8 <__adddf3>
    5098:	8009883a 	mov	r4,r16
    509c:	1029883a 	mov	r20,r2
    50a0:	1823883a 	mov	r17,r3
    50a4:	000e5780 	call	e578 <__floatsidf>
    50a8:	019427f4 	movhi	r6,20639
    50ac:	01cff4f4 	movhi	r7,16339
    50b0:	319e7ec4 	addi	r6,r6,31227
    50b4:	39d104c4 	addi	r7,r7,17427
    50b8:	1009883a 	mov	r4,r2
    50bc:	180b883a 	mov	r5,r3
    50c0:	000d4e40 	call	d4e4 <__muldf3>
    50c4:	100d883a 	mov	r6,r2
    50c8:	180f883a 	mov	r7,r3
    50cc:	a009883a 	mov	r4,r20
    50d0:	880b883a 	mov	r5,r17
    50d4:	000c0f80 	call	c0f8 <__adddf3>
    50d8:	1009883a 	mov	r4,r2
    50dc:	180b883a 	mov	r5,r3
    50e0:	1029883a 	mov	r20,r2
    50e4:	1823883a 	mov	r17,r3
    50e8:	000e4f80 	call	e4f8 <__fixdfsi>
    50ec:	000d883a 	mov	r6,zero
    50f0:	000f883a 	mov	r7,zero
    50f4:	a009883a 	mov	r4,r20
    50f8:	880b883a 	mov	r5,r17
    50fc:	d8800515 	stw	r2,20(sp)
    5100:	000d3f00 	call	d3f0 <__ledf2>
    5104:	10028716 	blt	r2,zero,5b24 <_dtoa_r+0xc88>
    5108:	d8c00517 	ldw	r3,20(sp)
    510c:	00800584 	movi	r2,22
    5110:	10c27536 	bltu	r2,r3,5ae8 <_dtoa_r+0xc4c>
    5114:	180490fa 	slli	r2,r3,3
    5118:	00c00074 	movhi	r3,1
    511c:	18c23004 	addi	r3,r3,2240
    5120:	1885883a 	add	r2,r3,r2
    5124:	11000017 	ldw	r4,0(r2)
    5128:	11400117 	ldw	r5,4(r2)
    512c:	900d883a 	mov	r6,r18
    5130:	980f883a 	mov	r7,r19
    5134:	000d3140 	call	d314 <__gedf2>
    5138:	00828d0e 	bge	zero,r2,5b70 <_dtoa_r+0xcd4>
    513c:	d9000517 	ldw	r4,20(sp)
    5140:	d8000e15 	stw	zero,56(sp)
    5144:	213fffc4 	addi	r4,r4,-1
    5148:	d9000515 	stw	r4,20(sp)
    514c:	b42dc83a 	sub	r22,r22,r16
    5150:	b5bfffc4 	addi	r22,r22,-1
    5154:	b0026f16 	blt	r22,zero,5b14 <_dtoa_r+0xc78>
    5158:	d8000815 	stw	zero,32(sp)
    515c:	d9c00517 	ldw	r7,20(sp)
    5160:	38026416 	blt	r7,zero,5af4 <_dtoa_r+0xc58>
    5164:	b1ed883a 	add	r22,r22,r7
    5168:	d9c00d15 	stw	r7,52(sp)
    516c:	d8000a15 	stw	zero,40(sp)
    5170:	d9800317 	ldw	r6,12(sp)
    5174:	00800244 	movi	r2,9
    5178:	11811436 	bltu	r2,r6,55cc <_dtoa_r+0x730>
    517c:	00800144 	movi	r2,5
    5180:	1184e10e 	bge	r2,r6,6508 <_dtoa_r+0x166c>
    5184:	31bfff04 	addi	r6,r6,-4
    5188:	d9800315 	stw	r6,12(sp)
    518c:	0023883a 	mov	r17,zero
    5190:	d9800317 	ldw	r6,12(sp)
    5194:	008000c4 	movi	r2,3
    5198:	30836726 	beq	r6,r2,5f38 <_dtoa_r+0x109c>
    519c:	1183410e 	bge	r2,r6,5ea4 <_dtoa_r+0x1008>
    51a0:	d9c00317 	ldw	r7,12(sp)
    51a4:	00800104 	movi	r2,4
    51a8:	38827c26 	beq	r7,r2,5b9c <_dtoa_r+0xd00>
    51ac:	00800144 	movi	r2,5
    51b0:	3884c41e 	bne	r7,r2,64c4 <_dtoa_r+0x1628>
    51b4:	00800044 	movi	r2,1
    51b8:	d8800b15 	stw	r2,44(sp)
    51bc:	d8c00517 	ldw	r3,20(sp)
    51c0:	d9002217 	ldw	r4,136(sp)
    51c4:	1907883a 	add	r3,r3,r4
    51c8:	19800044 	addi	r6,r3,1
    51cc:	d8c00c15 	stw	r3,48(sp)
    51d0:	d9800615 	stw	r6,24(sp)
    51d4:	0183a40e 	bge	zero,r6,6068 <_dtoa_r+0x11cc>
    51d8:	d9800617 	ldw	r6,24(sp)
    51dc:	3021883a 	mov	r16,r6
    51e0:	e0001115 	stw	zero,68(fp)
    51e4:	008005c4 	movi	r2,23
    51e8:	1184c92e 	bgeu	r2,r6,6510 <_dtoa_r+0x1674>
    51ec:	00c00044 	movi	r3,1
    51f0:	00800104 	movi	r2,4
    51f4:	1085883a 	add	r2,r2,r2
    51f8:	11000504 	addi	r4,r2,20
    51fc:	180b883a 	mov	r5,r3
    5200:	18c00044 	addi	r3,r3,1
    5204:	313ffb2e 	bgeu	r6,r4,51f4 <__alt_data_end+0xff0051f4>
    5208:	e1401115 	stw	r5,68(fp)
    520c:	e009883a 	mov	r4,fp
    5210:	0007d2c0 	call	7d2c <_Balloc>
    5214:	d8800715 	stw	r2,28(sp)
    5218:	e0801015 	stw	r2,64(fp)
    521c:	00800384 	movi	r2,14
    5220:	1400f736 	bltu	r2,r16,5600 <_dtoa_r+0x764>
    5224:	8800f626 	beq	r17,zero,5600 <_dtoa_r+0x764>
    5228:	d9c00517 	ldw	r7,20(sp)
    522c:	01c39a0e 	bge	zero,r7,6098 <_dtoa_r+0x11fc>
    5230:	388003cc 	andi	r2,r7,15
    5234:	100490fa 	slli	r2,r2,3
    5238:	382bd13a 	srai	r21,r7,4
    523c:	00c00074 	movhi	r3,1
    5240:	18c23004 	addi	r3,r3,2240
    5244:	1885883a 	add	r2,r3,r2
    5248:	a8c0040c 	andi	r3,r21,16
    524c:	12400017 	ldw	r9,0(r2)
    5250:	12000117 	ldw	r8,4(r2)
    5254:	18037926 	beq	r3,zero,603c <_dtoa_r+0x11a0>
    5258:	00800074 	movhi	r2,1
    525c:	10822604 	addi	r2,r2,2200
    5260:	11800817 	ldw	r6,32(r2)
    5264:	11c00917 	ldw	r7,36(r2)
    5268:	9009883a 	mov	r4,r18
    526c:	980b883a 	mov	r5,r19
    5270:	da001715 	stw	r8,92(sp)
    5274:	da401615 	stw	r9,88(sp)
    5278:	000c9a40 	call	c9a4 <__divdf3>
    527c:	da001717 	ldw	r8,92(sp)
    5280:	da401617 	ldw	r9,88(sp)
    5284:	ad4003cc 	andi	r21,r21,15
    5288:	040000c4 	movi	r16,3
    528c:	1023883a 	mov	r17,r2
    5290:	1829883a 	mov	r20,r3
    5294:	a8001126 	beq	r21,zero,52dc <_dtoa_r+0x440>
    5298:	05c00074 	movhi	r23,1
    529c:	bdc22604 	addi	r23,r23,2200
    52a0:	4805883a 	mov	r2,r9
    52a4:	4007883a 	mov	r3,r8
    52a8:	a980004c 	andi	r6,r21,1
    52ac:	1009883a 	mov	r4,r2
    52b0:	a82bd07a 	srai	r21,r21,1
    52b4:	180b883a 	mov	r5,r3
    52b8:	30000426 	beq	r6,zero,52cc <_dtoa_r+0x430>
    52bc:	b9800017 	ldw	r6,0(r23)
    52c0:	b9c00117 	ldw	r7,4(r23)
    52c4:	84000044 	addi	r16,r16,1
    52c8:	000d4e40 	call	d4e4 <__muldf3>
    52cc:	bdc00204 	addi	r23,r23,8
    52d0:	a83ff51e 	bne	r21,zero,52a8 <__alt_data_end+0xff0052a8>
    52d4:	1013883a 	mov	r9,r2
    52d8:	1811883a 	mov	r8,r3
    52dc:	480d883a 	mov	r6,r9
    52e0:	400f883a 	mov	r7,r8
    52e4:	8809883a 	mov	r4,r17
    52e8:	a00b883a 	mov	r5,r20
    52ec:	000c9a40 	call	c9a4 <__divdf3>
    52f0:	d8800f15 	stw	r2,60(sp)
    52f4:	d8c01015 	stw	r3,64(sp)
    52f8:	d8c00e17 	ldw	r3,56(sp)
    52fc:	18000626 	beq	r3,zero,5318 <_dtoa_r+0x47c>
    5300:	d9000f17 	ldw	r4,60(sp)
    5304:	d9401017 	ldw	r5,64(sp)
    5308:	000d883a 	mov	r6,zero
    530c:	01cffc34 	movhi	r7,16368
    5310:	000d3f00 	call	d3f0 <__ledf2>
    5314:	10040b16 	blt	r2,zero,6344 <_dtoa_r+0x14a8>
    5318:	8009883a 	mov	r4,r16
    531c:	000e5780 	call	e578 <__floatsidf>
    5320:	d9800f17 	ldw	r6,60(sp)
    5324:	d9c01017 	ldw	r7,64(sp)
    5328:	1009883a 	mov	r4,r2
    532c:	180b883a 	mov	r5,r3
    5330:	000d4e40 	call	d4e4 <__muldf3>
    5334:	000d883a 	mov	r6,zero
    5338:	01d00734 	movhi	r7,16412
    533c:	1009883a 	mov	r4,r2
    5340:	180b883a 	mov	r5,r3
    5344:	000c0f80 	call	c0f8 <__adddf3>
    5348:	1021883a 	mov	r16,r2
    534c:	d8800617 	ldw	r2,24(sp)
    5350:	047f3034 	movhi	r17,64704
    5354:	1c63883a 	add	r17,r3,r17
    5358:	10031826 	beq	r2,zero,5fbc <_dtoa_r+0x1120>
    535c:	d8c00517 	ldw	r3,20(sp)
    5360:	db000617 	ldw	r12,24(sp)
    5364:	d8c01315 	stw	r3,76(sp)
    5368:	d9000b17 	ldw	r4,44(sp)
    536c:	20038f26 	beq	r4,zero,61ac <_dtoa_r+0x1310>
    5370:	60bfffc4 	addi	r2,r12,-1
    5374:	100490fa 	slli	r2,r2,3
    5378:	00c00074 	movhi	r3,1
    537c:	18c23004 	addi	r3,r3,2240
    5380:	1885883a 	add	r2,r3,r2
    5384:	11800017 	ldw	r6,0(r2)
    5388:	11c00117 	ldw	r7,4(r2)
    538c:	d8800717 	ldw	r2,28(sp)
    5390:	0009883a 	mov	r4,zero
    5394:	014ff834 	movhi	r5,16352
    5398:	db001615 	stw	r12,88(sp)
    539c:	15c00044 	addi	r23,r2,1
    53a0:	000c9a40 	call	c9a4 <__divdf3>
    53a4:	800d883a 	mov	r6,r16
    53a8:	880f883a 	mov	r7,r17
    53ac:	1009883a 	mov	r4,r2
    53b0:	180b883a 	mov	r5,r3
    53b4:	000dbfc0 	call	dbfc <__subdf3>
    53b8:	d9401017 	ldw	r5,64(sp)
    53bc:	d9000f17 	ldw	r4,60(sp)
    53c0:	102b883a 	mov	r21,r2
    53c4:	d8c01215 	stw	r3,72(sp)
    53c8:	000e4f80 	call	e4f8 <__fixdfsi>
    53cc:	1009883a 	mov	r4,r2
    53d0:	1029883a 	mov	r20,r2
    53d4:	000e5780 	call	e578 <__floatsidf>
    53d8:	d9000f17 	ldw	r4,60(sp)
    53dc:	d9401017 	ldw	r5,64(sp)
    53e0:	100d883a 	mov	r6,r2
    53e4:	180f883a 	mov	r7,r3
    53e8:	000dbfc0 	call	dbfc <__subdf3>
    53ec:	1823883a 	mov	r17,r3
    53f0:	d8c00717 	ldw	r3,28(sp)
    53f4:	d9401217 	ldw	r5,72(sp)
    53f8:	a2000c04 	addi	r8,r20,48
    53fc:	1021883a 	mov	r16,r2
    5400:	1a000005 	stb	r8,0(r3)
    5404:	800d883a 	mov	r6,r16
    5408:	880f883a 	mov	r7,r17
    540c:	a809883a 	mov	r4,r21
    5410:	4029883a 	mov	r20,r8
    5414:	000d3140 	call	d314 <__gedf2>
    5418:	00841d16 	blt	zero,r2,6490 <_dtoa_r+0x15f4>
    541c:	800d883a 	mov	r6,r16
    5420:	880f883a 	mov	r7,r17
    5424:	0009883a 	mov	r4,zero
    5428:	014ffc34 	movhi	r5,16368
    542c:	000dbfc0 	call	dbfc <__subdf3>
    5430:	d9401217 	ldw	r5,72(sp)
    5434:	100d883a 	mov	r6,r2
    5438:	180f883a 	mov	r7,r3
    543c:	a809883a 	mov	r4,r21
    5440:	000d3140 	call	d314 <__gedf2>
    5444:	db001617 	ldw	r12,88(sp)
    5448:	00840e16 	blt	zero,r2,6484 <_dtoa_r+0x15e8>
    544c:	00800044 	movi	r2,1
    5450:	13006b0e 	bge	r2,r12,5600 <_dtoa_r+0x764>
    5454:	d9000717 	ldw	r4,28(sp)
    5458:	dd800f15 	stw	r22,60(sp)
    545c:	dcc01015 	stw	r19,64(sp)
    5460:	2319883a 	add	r12,r4,r12
    5464:	dcc01217 	ldw	r19,72(sp)
    5468:	602d883a 	mov	r22,r12
    546c:	dc801215 	stw	r18,72(sp)
    5470:	b825883a 	mov	r18,r23
    5474:	00000906 	br	549c <_dtoa_r+0x600>
    5478:	000dbfc0 	call	dbfc <__subdf3>
    547c:	a80d883a 	mov	r6,r21
    5480:	980f883a 	mov	r7,r19
    5484:	1009883a 	mov	r4,r2
    5488:	180b883a 	mov	r5,r3
    548c:	000d3f00 	call	d3f0 <__ledf2>
    5490:	1003e816 	blt	r2,zero,6434 <_dtoa_r+0x1598>
    5494:	b825883a 	mov	r18,r23
    5498:	bd83e926 	beq	r23,r22,6440 <_dtoa_r+0x15a4>
    549c:	a809883a 	mov	r4,r21
    54a0:	980b883a 	mov	r5,r19
    54a4:	000d883a 	mov	r6,zero
    54a8:	01d00934 	movhi	r7,16420
    54ac:	000d4e40 	call	d4e4 <__muldf3>
    54b0:	000d883a 	mov	r6,zero
    54b4:	01d00934 	movhi	r7,16420
    54b8:	8009883a 	mov	r4,r16
    54bc:	880b883a 	mov	r5,r17
    54c0:	102b883a 	mov	r21,r2
    54c4:	1827883a 	mov	r19,r3
    54c8:	000d4e40 	call	d4e4 <__muldf3>
    54cc:	180b883a 	mov	r5,r3
    54d0:	1009883a 	mov	r4,r2
    54d4:	1821883a 	mov	r16,r3
    54d8:	1023883a 	mov	r17,r2
    54dc:	000e4f80 	call	e4f8 <__fixdfsi>
    54e0:	1009883a 	mov	r4,r2
    54e4:	1029883a 	mov	r20,r2
    54e8:	000e5780 	call	e578 <__floatsidf>
    54ec:	8809883a 	mov	r4,r17
    54f0:	800b883a 	mov	r5,r16
    54f4:	100d883a 	mov	r6,r2
    54f8:	180f883a 	mov	r7,r3
    54fc:	000dbfc0 	call	dbfc <__subdf3>
    5500:	a5000c04 	addi	r20,r20,48
    5504:	a80d883a 	mov	r6,r21
    5508:	980f883a 	mov	r7,r19
    550c:	1009883a 	mov	r4,r2
    5510:	180b883a 	mov	r5,r3
    5514:	95000005 	stb	r20,0(r18)
    5518:	1021883a 	mov	r16,r2
    551c:	1823883a 	mov	r17,r3
    5520:	000d3f00 	call	d3f0 <__ledf2>
    5524:	bdc00044 	addi	r23,r23,1
    5528:	800d883a 	mov	r6,r16
    552c:	880f883a 	mov	r7,r17
    5530:	0009883a 	mov	r4,zero
    5534:	014ffc34 	movhi	r5,16368
    5538:	103fcf0e 	bge	r2,zero,5478 <__alt_data_end+0xff005478>
    553c:	d8c01317 	ldw	r3,76(sp)
    5540:	d8c00515 	stw	r3,20(sp)
    5544:	d9400917 	ldw	r5,36(sp)
    5548:	e009883a 	mov	r4,fp
    554c:	0007dd40 	call	7dd4 <_Bfree>
    5550:	d9000517 	ldw	r4,20(sp)
    5554:	d9802317 	ldw	r6,140(sp)
    5558:	d9c02517 	ldw	r7,148(sp)
    555c:	b8000005 	stb	zero,0(r23)
    5560:	20800044 	addi	r2,r4,1
    5564:	30800015 	stw	r2,0(r6)
    5568:	3802aa26 	beq	r7,zero,6014 <_dtoa_r+0x1178>
    556c:	3dc00015 	stw	r23,0(r7)
    5570:	d8800717 	ldw	r2,28(sp)
    5574:	003e7906 	br	4f5c <__alt_data_end+0xff004f5c>
    5578:	00800434 	movhi	r2,16
    557c:	10bfffc4 	addi	r2,r2,-1
    5580:	88a2703a 	and	r17,r17,r2
    5584:	883e851e 	bne	r17,zero,4f9c <__alt_data_end+0xff004f9c>
    5588:	00800074 	movhi	r2,1
    558c:	10821104 	addi	r2,r2,2116
    5590:	003e8406 	br	4fa4 <__alt_data_end+0xff004fa4>
    5594:	10c00204 	addi	r3,r2,8
    5598:	003e8706 	br	4fb8 <__alt_data_end+0xff004fb8>
    559c:	01400434 	movhi	r5,16
    55a0:	297fffc4 	addi	r5,r5,-1
    55a4:	994a703a 	and	r5,r19,r5
    55a8:	9009883a 	mov	r4,r18
    55ac:	843f0044 	addi	r16,r16,-1023
    55b0:	294ffc34 	orhi	r5,r5,16368
    55b4:	dd800217 	ldw	r22,8(sp)
    55b8:	d8001115 	stw	zero,68(sp)
    55bc:	003ea506 	br	5054 <__alt_data_end+0xff005054>
    55c0:	00800074 	movhi	r2,1
    55c4:	10820804 	addi	r2,r2,2080
    55c8:	003e6406 	br	4f5c <__alt_data_end+0xff004f5c>
    55cc:	e0001115 	stw	zero,68(fp)
    55d0:	000b883a 	mov	r5,zero
    55d4:	e009883a 	mov	r4,fp
    55d8:	0007d2c0 	call	7d2c <_Balloc>
    55dc:	01bfffc4 	movi	r6,-1
    55e0:	01c00044 	movi	r7,1
    55e4:	d8800715 	stw	r2,28(sp)
    55e8:	d9800c15 	stw	r6,48(sp)
    55ec:	e0801015 	stw	r2,64(fp)
    55f0:	d8000315 	stw	zero,12(sp)
    55f4:	d9c00b15 	stw	r7,44(sp)
    55f8:	d9800615 	stw	r6,24(sp)
    55fc:	d8002215 	stw	zero,136(sp)
    5600:	d8800117 	ldw	r2,4(sp)
    5604:	10008916 	blt	r2,zero,582c <_dtoa_r+0x990>
    5608:	d9000517 	ldw	r4,20(sp)
    560c:	00c00384 	movi	r3,14
    5610:	19008616 	blt	r3,r4,582c <_dtoa_r+0x990>
    5614:	200490fa 	slli	r2,r4,3
    5618:	00c00074 	movhi	r3,1
    561c:	d9802217 	ldw	r6,136(sp)
    5620:	18c23004 	addi	r3,r3,2240
    5624:	1885883a 	add	r2,r3,r2
    5628:	14000017 	ldw	r16,0(r2)
    562c:	14400117 	ldw	r17,4(r2)
    5630:	30016316 	blt	r6,zero,5bc0 <_dtoa_r+0xd24>
    5634:	800d883a 	mov	r6,r16
    5638:	880f883a 	mov	r7,r17
    563c:	9009883a 	mov	r4,r18
    5640:	980b883a 	mov	r5,r19
    5644:	000c9a40 	call	c9a4 <__divdf3>
    5648:	180b883a 	mov	r5,r3
    564c:	1009883a 	mov	r4,r2
    5650:	000e4f80 	call	e4f8 <__fixdfsi>
    5654:	1009883a 	mov	r4,r2
    5658:	102b883a 	mov	r21,r2
    565c:	000e5780 	call	e578 <__floatsidf>
    5660:	800d883a 	mov	r6,r16
    5664:	880f883a 	mov	r7,r17
    5668:	1009883a 	mov	r4,r2
    566c:	180b883a 	mov	r5,r3
    5670:	000d4e40 	call	d4e4 <__muldf3>
    5674:	100d883a 	mov	r6,r2
    5678:	180f883a 	mov	r7,r3
    567c:	9009883a 	mov	r4,r18
    5680:	980b883a 	mov	r5,r19
    5684:	000dbfc0 	call	dbfc <__subdf3>
    5688:	d9c00717 	ldw	r7,28(sp)
    568c:	1009883a 	mov	r4,r2
    5690:	a8800c04 	addi	r2,r21,48
    5694:	38800005 	stb	r2,0(r7)
    5698:	3dc00044 	addi	r23,r7,1
    569c:	d9c00617 	ldw	r7,24(sp)
    56a0:	01800044 	movi	r6,1
    56a4:	180b883a 	mov	r5,r3
    56a8:	2005883a 	mov	r2,r4
    56ac:	39803826 	beq	r7,r6,5790 <_dtoa_r+0x8f4>
    56b0:	000d883a 	mov	r6,zero
    56b4:	01d00934 	movhi	r7,16420
    56b8:	000d4e40 	call	d4e4 <__muldf3>
    56bc:	000d883a 	mov	r6,zero
    56c0:	000f883a 	mov	r7,zero
    56c4:	1009883a 	mov	r4,r2
    56c8:	180b883a 	mov	r5,r3
    56cc:	1025883a 	mov	r18,r2
    56d0:	1827883a 	mov	r19,r3
    56d4:	000d28c0 	call	d28c <__eqdf2>
    56d8:	103f9a26 	beq	r2,zero,5544 <__alt_data_end+0xff005544>
    56dc:	d9c00617 	ldw	r7,24(sp)
    56e0:	d8c00717 	ldw	r3,28(sp)
    56e4:	b829883a 	mov	r20,r23
    56e8:	38bfffc4 	addi	r2,r7,-1
    56ec:	18ad883a 	add	r22,r3,r2
    56f0:	00000a06 	br	571c <_dtoa_r+0x880>
    56f4:	000d4e40 	call	d4e4 <__muldf3>
    56f8:	000d883a 	mov	r6,zero
    56fc:	000f883a 	mov	r7,zero
    5700:	1009883a 	mov	r4,r2
    5704:	180b883a 	mov	r5,r3
    5708:	1025883a 	mov	r18,r2
    570c:	1827883a 	mov	r19,r3
    5710:	b829883a 	mov	r20,r23
    5714:	000d28c0 	call	d28c <__eqdf2>
    5718:	103f8a26 	beq	r2,zero,5544 <__alt_data_end+0xff005544>
    571c:	800d883a 	mov	r6,r16
    5720:	880f883a 	mov	r7,r17
    5724:	9009883a 	mov	r4,r18
    5728:	980b883a 	mov	r5,r19
    572c:	000c9a40 	call	c9a4 <__divdf3>
    5730:	180b883a 	mov	r5,r3
    5734:	1009883a 	mov	r4,r2
    5738:	000e4f80 	call	e4f8 <__fixdfsi>
    573c:	1009883a 	mov	r4,r2
    5740:	102b883a 	mov	r21,r2
    5744:	000e5780 	call	e578 <__floatsidf>
    5748:	800d883a 	mov	r6,r16
    574c:	880f883a 	mov	r7,r17
    5750:	1009883a 	mov	r4,r2
    5754:	180b883a 	mov	r5,r3
    5758:	000d4e40 	call	d4e4 <__muldf3>
    575c:	100d883a 	mov	r6,r2
    5760:	180f883a 	mov	r7,r3
    5764:	9009883a 	mov	r4,r18
    5768:	980b883a 	mov	r5,r19
    576c:	000dbfc0 	call	dbfc <__subdf3>
    5770:	aa000c04 	addi	r8,r21,48
    5774:	a2000005 	stb	r8,0(r20)
    5778:	000d883a 	mov	r6,zero
    577c:	01d00934 	movhi	r7,16420
    5780:	1009883a 	mov	r4,r2
    5784:	180b883a 	mov	r5,r3
    5788:	a5c00044 	addi	r23,r20,1
    578c:	b53fd91e 	bne	r22,r20,56f4 <__alt_data_end+0xff0056f4>
    5790:	100d883a 	mov	r6,r2
    5794:	180f883a 	mov	r7,r3
    5798:	1009883a 	mov	r4,r2
    579c:	180b883a 	mov	r5,r3
    57a0:	000c0f80 	call	c0f8 <__adddf3>
    57a4:	100d883a 	mov	r6,r2
    57a8:	180f883a 	mov	r7,r3
    57ac:	8009883a 	mov	r4,r16
    57b0:	880b883a 	mov	r5,r17
    57b4:	1027883a 	mov	r19,r2
    57b8:	1825883a 	mov	r18,r3
    57bc:	000d3f00 	call	d3f0 <__ledf2>
    57c0:	10000816 	blt	r2,zero,57e4 <_dtoa_r+0x948>
    57c4:	980d883a 	mov	r6,r19
    57c8:	900f883a 	mov	r7,r18
    57cc:	8009883a 	mov	r4,r16
    57d0:	880b883a 	mov	r5,r17
    57d4:	000d28c0 	call	d28c <__eqdf2>
    57d8:	103f5a1e 	bne	r2,zero,5544 <__alt_data_end+0xff005544>
    57dc:	ad40004c 	andi	r21,r21,1
    57e0:	a83f5826 	beq	r21,zero,5544 <__alt_data_end+0xff005544>
    57e4:	bd3fffc3 	ldbu	r20,-1(r23)
    57e8:	b8bfffc4 	addi	r2,r23,-1
    57ec:	1007883a 	mov	r3,r2
    57f0:	01400e44 	movi	r5,57
    57f4:	d9800717 	ldw	r6,28(sp)
    57f8:	00000506 	br	5810 <_dtoa_r+0x974>
    57fc:	18ffffc4 	addi	r3,r3,-1
    5800:	11824726 	beq	r2,r6,6120 <_dtoa_r+0x1284>
    5804:	1d000003 	ldbu	r20,0(r3)
    5808:	102f883a 	mov	r23,r2
    580c:	10bfffc4 	addi	r2,r2,-1
    5810:	a1003fcc 	andi	r4,r20,255
    5814:	2100201c 	xori	r4,r4,128
    5818:	213fe004 	addi	r4,r4,-128
    581c:	217ff726 	beq	r4,r5,57fc <__alt_data_end+0xff0057fc>
    5820:	a2000044 	addi	r8,r20,1
    5824:	12000005 	stb	r8,0(r2)
    5828:	003f4606 	br	5544 <__alt_data_end+0xff005544>
    582c:	d9000b17 	ldw	r4,44(sp)
    5830:	2000c826 	beq	r4,zero,5b54 <_dtoa_r+0xcb8>
    5834:	d9800317 	ldw	r6,12(sp)
    5838:	00c00044 	movi	r3,1
    583c:	1980f90e 	bge	r3,r6,5c24 <_dtoa_r+0xd88>
    5840:	d8800617 	ldw	r2,24(sp)
    5844:	d8c00a17 	ldw	r3,40(sp)
    5848:	157fffc4 	addi	r21,r2,-1
    584c:	1d41f316 	blt	r3,r21,601c <_dtoa_r+0x1180>
    5850:	1d6bc83a 	sub	r21,r3,r21
    5854:	d9c00617 	ldw	r7,24(sp)
    5858:	3802aa16 	blt	r7,zero,6304 <_dtoa_r+0x1468>
    585c:	dd000817 	ldw	r20,32(sp)
    5860:	d8800617 	ldw	r2,24(sp)
    5864:	d8c00817 	ldw	r3,32(sp)
    5868:	01400044 	movi	r5,1
    586c:	e009883a 	mov	r4,fp
    5870:	1887883a 	add	r3,r3,r2
    5874:	d8c00815 	stw	r3,32(sp)
    5878:	b0ad883a 	add	r22,r22,r2
    587c:	00081380 	call	8138 <__i2b>
    5880:	1023883a 	mov	r17,r2
    5884:	a0000826 	beq	r20,zero,58a8 <_dtoa_r+0xa0c>
    5888:	0580070e 	bge	zero,r22,58a8 <_dtoa_r+0xa0c>
    588c:	a005883a 	mov	r2,r20
    5890:	b500b916 	blt	r22,r20,5b78 <_dtoa_r+0xcdc>
    5894:	d9000817 	ldw	r4,32(sp)
    5898:	a0a9c83a 	sub	r20,r20,r2
    589c:	b0adc83a 	sub	r22,r22,r2
    58a0:	2089c83a 	sub	r4,r4,r2
    58a4:	d9000815 	stw	r4,32(sp)
    58a8:	d9800a17 	ldw	r6,40(sp)
    58ac:	0181810e 	bge	zero,r6,5eb4 <_dtoa_r+0x1018>
    58b0:	d9c00b17 	ldw	r7,44(sp)
    58b4:	3800b326 	beq	r7,zero,5b84 <_dtoa_r+0xce8>
    58b8:	a800b226 	beq	r21,zero,5b84 <_dtoa_r+0xce8>
    58bc:	880b883a 	mov	r5,r17
    58c0:	a80d883a 	mov	r6,r21
    58c4:	e009883a 	mov	r4,fp
    58c8:	000836c0 	call	836c <__pow5mult>
    58cc:	d9800917 	ldw	r6,36(sp)
    58d0:	100b883a 	mov	r5,r2
    58d4:	e009883a 	mov	r4,fp
    58d8:	1023883a 	mov	r17,r2
    58dc:	00081740 	call	8174 <__multiply>
    58e0:	1021883a 	mov	r16,r2
    58e4:	d8800a17 	ldw	r2,40(sp)
    58e8:	d9400917 	ldw	r5,36(sp)
    58ec:	e009883a 	mov	r4,fp
    58f0:	1545c83a 	sub	r2,r2,r21
    58f4:	d8800a15 	stw	r2,40(sp)
    58f8:	0007dd40 	call	7dd4 <_Bfree>
    58fc:	d8c00a17 	ldw	r3,40(sp)
    5900:	18009f1e 	bne	r3,zero,5b80 <_dtoa_r+0xce4>
    5904:	05c00044 	movi	r23,1
    5908:	e009883a 	mov	r4,fp
    590c:	b80b883a 	mov	r5,r23
    5910:	00081380 	call	8138 <__i2b>
    5914:	d9000d17 	ldw	r4,52(sp)
    5918:	102b883a 	mov	r21,r2
    591c:	2000ce26 	beq	r4,zero,5c58 <_dtoa_r+0xdbc>
    5920:	200d883a 	mov	r6,r4
    5924:	100b883a 	mov	r5,r2
    5928:	e009883a 	mov	r4,fp
    592c:	000836c0 	call	836c <__pow5mult>
    5930:	d9800317 	ldw	r6,12(sp)
    5934:	102b883a 	mov	r21,r2
    5938:	b981810e 	bge	r23,r6,5f40 <_dtoa_r+0x10a4>
    593c:	0027883a 	mov	r19,zero
    5940:	a8800417 	ldw	r2,16(r21)
    5944:	05c00804 	movi	r23,32
    5948:	10800104 	addi	r2,r2,4
    594c:	1085883a 	add	r2,r2,r2
    5950:	1085883a 	add	r2,r2,r2
    5954:	a885883a 	add	r2,r21,r2
    5958:	11000017 	ldw	r4,0(r2)
    595c:	00080200 	call	8020 <__hi0bits>
    5960:	b885c83a 	sub	r2,r23,r2
    5964:	1585883a 	add	r2,r2,r22
    5968:	108007cc 	andi	r2,r2,31
    596c:	1000b326 	beq	r2,zero,5c3c <_dtoa_r+0xda0>
    5970:	00c00804 	movi	r3,32
    5974:	1887c83a 	sub	r3,r3,r2
    5978:	01000104 	movi	r4,4
    597c:	20c2cd0e 	bge	r4,r3,64b4 <_dtoa_r+0x1618>
    5980:	00c00704 	movi	r3,28
    5984:	1885c83a 	sub	r2,r3,r2
    5988:	d8c00817 	ldw	r3,32(sp)
    598c:	a0a9883a 	add	r20,r20,r2
    5990:	b0ad883a 	add	r22,r22,r2
    5994:	1887883a 	add	r3,r3,r2
    5998:	d8c00815 	stw	r3,32(sp)
    599c:	d9800817 	ldw	r6,32(sp)
    59a0:	0180040e 	bge	zero,r6,59b4 <_dtoa_r+0xb18>
    59a4:	800b883a 	mov	r5,r16
    59a8:	e009883a 	mov	r4,fp
    59ac:	00084ac0 	call	84ac <__lshift>
    59b0:	1021883a 	mov	r16,r2
    59b4:	0580050e 	bge	zero,r22,59cc <_dtoa_r+0xb30>
    59b8:	a80b883a 	mov	r5,r21
    59bc:	b00d883a 	mov	r6,r22
    59c0:	e009883a 	mov	r4,fp
    59c4:	00084ac0 	call	84ac <__lshift>
    59c8:	102b883a 	mov	r21,r2
    59cc:	d9c00e17 	ldw	r7,56(sp)
    59d0:	3801211e 	bne	r7,zero,5e58 <_dtoa_r+0xfbc>
    59d4:	d9800617 	ldw	r6,24(sp)
    59d8:	0181380e 	bge	zero,r6,5ebc <_dtoa_r+0x1020>
    59dc:	d8c00b17 	ldw	r3,44(sp)
    59e0:	1800ab1e 	bne	r3,zero,5c90 <_dtoa_r+0xdf4>
    59e4:	dc800717 	ldw	r18,28(sp)
    59e8:	dcc00617 	ldw	r19,24(sp)
    59ec:	9029883a 	mov	r20,r18
    59f0:	00000206 	br	59fc <_dtoa_r+0xb60>
    59f4:	0007dfc0 	call	7dfc <__multadd>
    59f8:	1021883a 	mov	r16,r2
    59fc:	a80b883a 	mov	r5,r21
    5a00:	8009883a 	mov	r4,r16
    5a04:	0004c9c0 	call	4c9c <quorem>
    5a08:	10800c04 	addi	r2,r2,48
    5a0c:	90800005 	stb	r2,0(r18)
    5a10:	94800044 	addi	r18,r18,1
    5a14:	9507c83a 	sub	r3,r18,r20
    5a18:	000f883a 	mov	r7,zero
    5a1c:	01800284 	movi	r6,10
    5a20:	800b883a 	mov	r5,r16
    5a24:	e009883a 	mov	r4,fp
    5a28:	1cfff216 	blt	r3,r19,59f4 <__alt_data_end+0xff0059f4>
    5a2c:	1011883a 	mov	r8,r2
    5a30:	d8800617 	ldw	r2,24(sp)
    5a34:	0082370e 	bge	zero,r2,6314 <_dtoa_r+0x1478>
    5a38:	d9000717 	ldw	r4,28(sp)
    5a3c:	0025883a 	mov	r18,zero
    5a40:	20af883a 	add	r23,r4,r2
    5a44:	01800044 	movi	r6,1
    5a48:	800b883a 	mov	r5,r16
    5a4c:	e009883a 	mov	r4,fp
    5a50:	da001715 	stw	r8,92(sp)
    5a54:	00084ac0 	call	84ac <__lshift>
    5a58:	a80b883a 	mov	r5,r21
    5a5c:	1009883a 	mov	r4,r2
    5a60:	d8800915 	stw	r2,36(sp)
    5a64:	00085f40 	call	85f4 <__mcmp>
    5a68:	da001717 	ldw	r8,92(sp)
    5a6c:	0081800e 	bge	zero,r2,6070 <_dtoa_r+0x11d4>
    5a70:	b93fffc3 	ldbu	r4,-1(r23)
    5a74:	b8bfffc4 	addi	r2,r23,-1
    5a78:	1007883a 	mov	r3,r2
    5a7c:	01800e44 	movi	r6,57
    5a80:	d9c00717 	ldw	r7,28(sp)
    5a84:	00000506 	br	5a9c <_dtoa_r+0xc00>
    5a88:	18ffffc4 	addi	r3,r3,-1
    5a8c:	11c12326 	beq	r2,r7,5f1c <_dtoa_r+0x1080>
    5a90:	19000003 	ldbu	r4,0(r3)
    5a94:	102f883a 	mov	r23,r2
    5a98:	10bfffc4 	addi	r2,r2,-1
    5a9c:	21403fcc 	andi	r5,r4,255
    5aa0:	2940201c 	xori	r5,r5,128
    5aa4:	297fe004 	addi	r5,r5,-128
    5aa8:	29bff726 	beq	r5,r6,5a88 <__alt_data_end+0xff005a88>
    5aac:	21000044 	addi	r4,r4,1
    5ab0:	11000005 	stb	r4,0(r2)
    5ab4:	a80b883a 	mov	r5,r21
    5ab8:	e009883a 	mov	r4,fp
    5abc:	0007dd40 	call	7dd4 <_Bfree>
    5ac0:	883ea026 	beq	r17,zero,5544 <__alt_data_end+0xff005544>
    5ac4:	90000426 	beq	r18,zero,5ad8 <_dtoa_r+0xc3c>
    5ac8:	94400326 	beq	r18,r17,5ad8 <_dtoa_r+0xc3c>
    5acc:	900b883a 	mov	r5,r18
    5ad0:	e009883a 	mov	r4,fp
    5ad4:	0007dd40 	call	7dd4 <_Bfree>
    5ad8:	880b883a 	mov	r5,r17
    5adc:	e009883a 	mov	r4,fp
    5ae0:	0007dd40 	call	7dd4 <_Bfree>
    5ae4:	003e9706 	br	5544 <__alt_data_end+0xff005544>
    5ae8:	01800044 	movi	r6,1
    5aec:	d9800e15 	stw	r6,56(sp)
    5af0:	003d9606 	br	514c <__alt_data_end+0xff00514c>
    5af4:	d8800817 	ldw	r2,32(sp)
    5af8:	d8c00517 	ldw	r3,20(sp)
    5afc:	d8000d15 	stw	zero,52(sp)
    5b00:	10c5c83a 	sub	r2,r2,r3
    5b04:	00c9c83a 	sub	r4,zero,r3
    5b08:	d8800815 	stw	r2,32(sp)
    5b0c:	d9000a15 	stw	r4,40(sp)
    5b10:	003d9706 	br	5170 <__alt_data_end+0xff005170>
    5b14:	05adc83a 	sub	r22,zero,r22
    5b18:	dd800815 	stw	r22,32(sp)
    5b1c:	002d883a 	mov	r22,zero
    5b20:	003d8e06 	br	515c <__alt_data_end+0xff00515c>
    5b24:	d9000517 	ldw	r4,20(sp)
    5b28:	000e5780 	call	e578 <__floatsidf>
    5b2c:	100d883a 	mov	r6,r2
    5b30:	180f883a 	mov	r7,r3
    5b34:	a009883a 	mov	r4,r20
    5b38:	880b883a 	mov	r5,r17
    5b3c:	000d28c0 	call	d28c <__eqdf2>
    5b40:	103d7126 	beq	r2,zero,5108 <__alt_data_end+0xff005108>
    5b44:	d9c00517 	ldw	r7,20(sp)
    5b48:	39ffffc4 	addi	r7,r7,-1
    5b4c:	d9c00515 	stw	r7,20(sp)
    5b50:	003d6d06 	br	5108 <__alt_data_end+0xff005108>
    5b54:	dd400a17 	ldw	r21,40(sp)
    5b58:	dd000817 	ldw	r20,32(sp)
    5b5c:	0023883a 	mov	r17,zero
    5b60:	003f4806 	br	5884 <__alt_data_end+0xff005884>
    5b64:	10e3c83a 	sub	r17,r2,r3
    5b68:	9448983a 	sll	r4,r18,r17
    5b6c:	003d3206 	br	5038 <__alt_data_end+0xff005038>
    5b70:	d8000e15 	stw	zero,56(sp)
    5b74:	003d7506 	br	514c <__alt_data_end+0xff00514c>
    5b78:	b005883a 	mov	r2,r22
    5b7c:	003f4506 	br	5894 <__alt_data_end+0xff005894>
    5b80:	dc000915 	stw	r16,36(sp)
    5b84:	d9800a17 	ldw	r6,40(sp)
    5b88:	d9400917 	ldw	r5,36(sp)
    5b8c:	e009883a 	mov	r4,fp
    5b90:	000836c0 	call	836c <__pow5mult>
    5b94:	1021883a 	mov	r16,r2
    5b98:	003f5a06 	br	5904 <__alt_data_end+0xff005904>
    5b9c:	01c00044 	movi	r7,1
    5ba0:	d9c00b15 	stw	r7,44(sp)
    5ba4:	d8802217 	ldw	r2,136(sp)
    5ba8:	0081280e 	bge	zero,r2,604c <_dtoa_r+0x11b0>
    5bac:	100d883a 	mov	r6,r2
    5bb0:	1021883a 	mov	r16,r2
    5bb4:	d8800c15 	stw	r2,48(sp)
    5bb8:	d8800615 	stw	r2,24(sp)
    5bbc:	003d8806 	br	51e0 <__alt_data_end+0xff0051e0>
    5bc0:	d8800617 	ldw	r2,24(sp)
    5bc4:	00be9b16 	blt	zero,r2,5634 <__alt_data_end+0xff005634>
    5bc8:	10010f1e 	bne	r2,zero,6008 <_dtoa_r+0x116c>
    5bcc:	880b883a 	mov	r5,r17
    5bd0:	000d883a 	mov	r6,zero
    5bd4:	01d00534 	movhi	r7,16404
    5bd8:	8009883a 	mov	r4,r16
    5bdc:	000d4e40 	call	d4e4 <__muldf3>
    5be0:	900d883a 	mov	r6,r18
    5be4:	980f883a 	mov	r7,r19
    5be8:	1009883a 	mov	r4,r2
    5bec:	180b883a 	mov	r5,r3
    5bf0:	000d3140 	call	d314 <__gedf2>
    5bf4:	002b883a 	mov	r21,zero
    5bf8:	0023883a 	mov	r17,zero
    5bfc:	1000bf16 	blt	r2,zero,5efc <_dtoa_r+0x1060>
    5c00:	d9802217 	ldw	r6,136(sp)
    5c04:	ddc00717 	ldw	r23,28(sp)
    5c08:	018c303a 	nor	r6,zero,r6
    5c0c:	d9800515 	stw	r6,20(sp)
    5c10:	a80b883a 	mov	r5,r21
    5c14:	e009883a 	mov	r4,fp
    5c18:	0007dd40 	call	7dd4 <_Bfree>
    5c1c:	883e4926 	beq	r17,zero,5544 <__alt_data_end+0xff005544>
    5c20:	003fad06 	br	5ad8 <__alt_data_end+0xff005ad8>
    5c24:	d9c01117 	ldw	r7,68(sp)
    5c28:	3801bc26 	beq	r7,zero,631c <_dtoa_r+0x1480>
    5c2c:	10810cc4 	addi	r2,r2,1075
    5c30:	dd400a17 	ldw	r21,40(sp)
    5c34:	dd000817 	ldw	r20,32(sp)
    5c38:	003f0a06 	br	5864 <__alt_data_end+0xff005864>
    5c3c:	00800704 	movi	r2,28
    5c40:	d9000817 	ldw	r4,32(sp)
    5c44:	a0a9883a 	add	r20,r20,r2
    5c48:	b0ad883a 	add	r22,r22,r2
    5c4c:	2089883a 	add	r4,r4,r2
    5c50:	d9000815 	stw	r4,32(sp)
    5c54:	003f5106 	br	599c <__alt_data_end+0xff00599c>
    5c58:	d8c00317 	ldw	r3,12(sp)
    5c5c:	b8c1fc0e 	bge	r23,r3,6450 <_dtoa_r+0x15b4>
    5c60:	0027883a 	mov	r19,zero
    5c64:	b805883a 	mov	r2,r23
    5c68:	003f3e06 	br	5964 <__alt_data_end+0xff005964>
    5c6c:	880b883a 	mov	r5,r17
    5c70:	e009883a 	mov	r4,fp
    5c74:	000f883a 	mov	r7,zero
    5c78:	01800284 	movi	r6,10
    5c7c:	0007dfc0 	call	7dfc <__multadd>
    5c80:	d9000c17 	ldw	r4,48(sp)
    5c84:	1023883a 	mov	r17,r2
    5c88:	0102040e 	bge	zero,r4,649c <_dtoa_r+0x1600>
    5c8c:	d9000615 	stw	r4,24(sp)
    5c90:	0500050e 	bge	zero,r20,5ca8 <_dtoa_r+0xe0c>
    5c94:	880b883a 	mov	r5,r17
    5c98:	a00d883a 	mov	r6,r20
    5c9c:	e009883a 	mov	r4,fp
    5ca0:	00084ac0 	call	84ac <__lshift>
    5ca4:	1023883a 	mov	r17,r2
    5ca8:	9801241e 	bne	r19,zero,613c <_dtoa_r+0x12a0>
    5cac:	8829883a 	mov	r20,r17
    5cb0:	d9000617 	ldw	r4,24(sp)
    5cb4:	dcc00717 	ldw	r19,28(sp)
    5cb8:	9480004c 	andi	r18,r18,1
    5cbc:	20bfffc4 	addi	r2,r4,-1
    5cc0:	9885883a 	add	r2,r19,r2
    5cc4:	d8800415 	stw	r2,16(sp)
    5cc8:	dc800615 	stw	r18,24(sp)
    5ccc:	a80b883a 	mov	r5,r21
    5cd0:	8009883a 	mov	r4,r16
    5cd4:	0004c9c0 	call	4c9c <quorem>
    5cd8:	880b883a 	mov	r5,r17
    5cdc:	8009883a 	mov	r4,r16
    5ce0:	102f883a 	mov	r23,r2
    5ce4:	00085f40 	call	85f4 <__mcmp>
    5ce8:	a80b883a 	mov	r5,r21
    5cec:	a00d883a 	mov	r6,r20
    5cf0:	e009883a 	mov	r4,fp
    5cf4:	102d883a 	mov	r22,r2
    5cf8:	00086540 	call	8654 <__mdiff>
    5cfc:	1007883a 	mov	r3,r2
    5d00:	10800317 	ldw	r2,12(r2)
    5d04:	bc800c04 	addi	r18,r23,48
    5d08:	180b883a 	mov	r5,r3
    5d0c:	10004e1e 	bne	r2,zero,5e48 <_dtoa_r+0xfac>
    5d10:	8009883a 	mov	r4,r16
    5d14:	d8c01615 	stw	r3,88(sp)
    5d18:	00085f40 	call	85f4 <__mcmp>
    5d1c:	d8c01617 	ldw	r3,88(sp)
    5d20:	e009883a 	mov	r4,fp
    5d24:	d8801615 	stw	r2,88(sp)
    5d28:	180b883a 	mov	r5,r3
    5d2c:	0007dd40 	call	7dd4 <_Bfree>
    5d30:	d8801617 	ldw	r2,88(sp)
    5d34:	1000041e 	bne	r2,zero,5d48 <_dtoa_r+0xeac>
    5d38:	d9800317 	ldw	r6,12(sp)
    5d3c:	3000021e 	bne	r6,zero,5d48 <_dtoa_r+0xeac>
    5d40:	d8c00617 	ldw	r3,24(sp)
    5d44:	18003726 	beq	r3,zero,5e24 <_dtoa_r+0xf88>
    5d48:	b0002016 	blt	r22,zero,5dcc <_dtoa_r+0xf30>
    5d4c:	b000041e 	bne	r22,zero,5d60 <_dtoa_r+0xec4>
    5d50:	d9000317 	ldw	r4,12(sp)
    5d54:	2000021e 	bne	r4,zero,5d60 <_dtoa_r+0xec4>
    5d58:	d8c00617 	ldw	r3,24(sp)
    5d5c:	18001b26 	beq	r3,zero,5dcc <_dtoa_r+0xf30>
    5d60:	00810716 	blt	zero,r2,6180 <_dtoa_r+0x12e4>
    5d64:	d8c00417 	ldw	r3,16(sp)
    5d68:	9d800044 	addi	r22,r19,1
    5d6c:	9c800005 	stb	r18,0(r19)
    5d70:	b02f883a 	mov	r23,r22
    5d74:	98c10626 	beq	r19,r3,6190 <_dtoa_r+0x12f4>
    5d78:	800b883a 	mov	r5,r16
    5d7c:	000f883a 	mov	r7,zero
    5d80:	01800284 	movi	r6,10
    5d84:	e009883a 	mov	r4,fp
    5d88:	0007dfc0 	call	7dfc <__multadd>
    5d8c:	1021883a 	mov	r16,r2
    5d90:	000f883a 	mov	r7,zero
    5d94:	01800284 	movi	r6,10
    5d98:	880b883a 	mov	r5,r17
    5d9c:	e009883a 	mov	r4,fp
    5da0:	8d002526 	beq	r17,r20,5e38 <_dtoa_r+0xf9c>
    5da4:	0007dfc0 	call	7dfc <__multadd>
    5da8:	a00b883a 	mov	r5,r20
    5dac:	000f883a 	mov	r7,zero
    5db0:	01800284 	movi	r6,10
    5db4:	e009883a 	mov	r4,fp
    5db8:	1023883a 	mov	r17,r2
    5dbc:	0007dfc0 	call	7dfc <__multadd>
    5dc0:	1029883a 	mov	r20,r2
    5dc4:	b027883a 	mov	r19,r22
    5dc8:	003fc006 	br	5ccc <__alt_data_end+0xff005ccc>
    5dcc:	9011883a 	mov	r8,r18
    5dd0:	00800e0e 	bge	zero,r2,5e0c <_dtoa_r+0xf70>
    5dd4:	800b883a 	mov	r5,r16
    5dd8:	01800044 	movi	r6,1
    5ddc:	e009883a 	mov	r4,fp
    5de0:	da001715 	stw	r8,92(sp)
    5de4:	00084ac0 	call	84ac <__lshift>
    5de8:	a80b883a 	mov	r5,r21
    5dec:	1009883a 	mov	r4,r2
    5df0:	1021883a 	mov	r16,r2
    5df4:	00085f40 	call	85f4 <__mcmp>
    5df8:	da001717 	ldw	r8,92(sp)
    5dfc:	0081960e 	bge	zero,r2,6458 <_dtoa_r+0x15bc>
    5e00:	00800e44 	movi	r2,57
    5e04:	40817026 	beq	r8,r2,63c8 <_dtoa_r+0x152c>
    5e08:	ba000c44 	addi	r8,r23,49
    5e0c:	8825883a 	mov	r18,r17
    5e10:	9dc00044 	addi	r23,r19,1
    5e14:	9a000005 	stb	r8,0(r19)
    5e18:	a023883a 	mov	r17,r20
    5e1c:	dc000915 	stw	r16,36(sp)
    5e20:	003f2406 	br	5ab4 <__alt_data_end+0xff005ab4>
    5e24:	00800e44 	movi	r2,57
    5e28:	9011883a 	mov	r8,r18
    5e2c:	90816626 	beq	r18,r2,63c8 <_dtoa_r+0x152c>
    5e30:	05bff516 	blt	zero,r22,5e08 <__alt_data_end+0xff005e08>
    5e34:	003ff506 	br	5e0c <__alt_data_end+0xff005e0c>
    5e38:	0007dfc0 	call	7dfc <__multadd>
    5e3c:	1023883a 	mov	r17,r2
    5e40:	1029883a 	mov	r20,r2
    5e44:	003fdf06 	br	5dc4 <__alt_data_end+0xff005dc4>
    5e48:	e009883a 	mov	r4,fp
    5e4c:	0007dd40 	call	7dd4 <_Bfree>
    5e50:	00800044 	movi	r2,1
    5e54:	003fbc06 	br	5d48 <__alt_data_end+0xff005d48>
    5e58:	a80b883a 	mov	r5,r21
    5e5c:	8009883a 	mov	r4,r16
    5e60:	00085f40 	call	85f4 <__mcmp>
    5e64:	103edb0e 	bge	r2,zero,59d4 <__alt_data_end+0xff0059d4>
    5e68:	800b883a 	mov	r5,r16
    5e6c:	000f883a 	mov	r7,zero
    5e70:	01800284 	movi	r6,10
    5e74:	e009883a 	mov	r4,fp
    5e78:	0007dfc0 	call	7dfc <__multadd>
    5e7c:	1021883a 	mov	r16,r2
    5e80:	d8800517 	ldw	r2,20(sp)
    5e84:	d8c00b17 	ldw	r3,44(sp)
    5e88:	10bfffc4 	addi	r2,r2,-1
    5e8c:	d8800515 	stw	r2,20(sp)
    5e90:	183f761e 	bne	r3,zero,5c6c <__alt_data_end+0xff005c6c>
    5e94:	d9000c17 	ldw	r4,48(sp)
    5e98:	0101730e 	bge	zero,r4,6468 <_dtoa_r+0x15cc>
    5e9c:	d9000615 	stw	r4,24(sp)
    5ea0:	003ed006 	br	59e4 <__alt_data_end+0xff0059e4>
    5ea4:	00800084 	movi	r2,2
    5ea8:	3081861e 	bne	r6,r2,64c4 <_dtoa_r+0x1628>
    5eac:	d8000b15 	stw	zero,44(sp)
    5eb0:	003f3c06 	br	5ba4 <__alt_data_end+0xff005ba4>
    5eb4:	dc000917 	ldw	r16,36(sp)
    5eb8:	003e9206 	br	5904 <__alt_data_end+0xff005904>
    5ebc:	d9c00317 	ldw	r7,12(sp)
    5ec0:	00800084 	movi	r2,2
    5ec4:	11fec50e 	bge	r2,r7,59dc <__alt_data_end+0xff0059dc>
    5ec8:	d9000617 	ldw	r4,24(sp)
    5ecc:	20013c1e 	bne	r4,zero,63c0 <_dtoa_r+0x1524>
    5ed0:	a80b883a 	mov	r5,r21
    5ed4:	000f883a 	mov	r7,zero
    5ed8:	01800144 	movi	r6,5
    5edc:	e009883a 	mov	r4,fp
    5ee0:	0007dfc0 	call	7dfc <__multadd>
    5ee4:	100b883a 	mov	r5,r2
    5ee8:	8009883a 	mov	r4,r16
    5eec:	102b883a 	mov	r21,r2
    5ef0:	00085f40 	call	85f4 <__mcmp>
    5ef4:	dc000915 	stw	r16,36(sp)
    5ef8:	00bf410e 	bge	zero,r2,5c00 <__alt_data_end+0xff005c00>
    5efc:	d9c00717 	ldw	r7,28(sp)
    5f00:	00800c44 	movi	r2,49
    5f04:	38800005 	stb	r2,0(r7)
    5f08:	d8800517 	ldw	r2,20(sp)
    5f0c:	3dc00044 	addi	r23,r7,1
    5f10:	10800044 	addi	r2,r2,1
    5f14:	d8800515 	stw	r2,20(sp)
    5f18:	003f3d06 	br	5c10 <__alt_data_end+0xff005c10>
    5f1c:	d9800517 	ldw	r6,20(sp)
    5f20:	d9c00717 	ldw	r7,28(sp)
    5f24:	00800c44 	movi	r2,49
    5f28:	31800044 	addi	r6,r6,1
    5f2c:	d9800515 	stw	r6,20(sp)
    5f30:	38800005 	stb	r2,0(r7)
    5f34:	003edf06 	br	5ab4 <__alt_data_end+0xff005ab4>
    5f38:	d8000b15 	stw	zero,44(sp)
    5f3c:	003c9f06 	br	51bc <__alt_data_end+0xff0051bc>
    5f40:	903e7e1e 	bne	r18,zero,593c <__alt_data_end+0xff00593c>
    5f44:	00800434 	movhi	r2,16
    5f48:	10bfffc4 	addi	r2,r2,-1
    5f4c:	9884703a 	and	r2,r19,r2
    5f50:	1000ea1e 	bne	r2,zero,62fc <_dtoa_r+0x1460>
    5f54:	9cdffc2c 	andhi	r19,r19,32752
    5f58:	9800e826 	beq	r19,zero,62fc <_dtoa_r+0x1460>
    5f5c:	d9c00817 	ldw	r7,32(sp)
    5f60:	b5800044 	addi	r22,r22,1
    5f64:	04c00044 	movi	r19,1
    5f68:	39c00044 	addi	r7,r7,1
    5f6c:	d9c00815 	stw	r7,32(sp)
    5f70:	d8800d17 	ldw	r2,52(sp)
    5f74:	103e721e 	bne	r2,zero,5940 <__alt_data_end+0xff005940>
    5f78:	00800044 	movi	r2,1
    5f7c:	003e7906 	br	5964 <__alt_data_end+0xff005964>
    5f80:	8009883a 	mov	r4,r16
    5f84:	000e5780 	call	e578 <__floatsidf>
    5f88:	d9800f17 	ldw	r6,60(sp)
    5f8c:	d9c01017 	ldw	r7,64(sp)
    5f90:	1009883a 	mov	r4,r2
    5f94:	180b883a 	mov	r5,r3
    5f98:	000d4e40 	call	d4e4 <__muldf3>
    5f9c:	000d883a 	mov	r6,zero
    5fa0:	01d00734 	movhi	r7,16412
    5fa4:	1009883a 	mov	r4,r2
    5fa8:	180b883a 	mov	r5,r3
    5fac:	000c0f80 	call	c0f8 <__adddf3>
    5fb0:	047f3034 	movhi	r17,64704
    5fb4:	1021883a 	mov	r16,r2
    5fb8:	1c63883a 	add	r17,r3,r17
    5fbc:	d9000f17 	ldw	r4,60(sp)
    5fc0:	d9401017 	ldw	r5,64(sp)
    5fc4:	000d883a 	mov	r6,zero
    5fc8:	01d00534 	movhi	r7,16404
    5fcc:	000dbfc0 	call	dbfc <__subdf3>
    5fd0:	800d883a 	mov	r6,r16
    5fd4:	880f883a 	mov	r7,r17
    5fd8:	1009883a 	mov	r4,r2
    5fdc:	180b883a 	mov	r5,r3
    5fe0:	102b883a 	mov	r21,r2
    5fe4:	1829883a 	mov	r20,r3
    5fe8:	000d3140 	call	d314 <__gedf2>
    5fec:	00806c16 	blt	zero,r2,61a0 <_dtoa_r+0x1304>
    5ff0:	89e0003c 	xorhi	r7,r17,32768
    5ff4:	800d883a 	mov	r6,r16
    5ff8:	a809883a 	mov	r4,r21
    5ffc:	a00b883a 	mov	r5,r20
    6000:	000d3f00 	call	d3f0 <__ledf2>
    6004:	103d7e0e 	bge	r2,zero,5600 <__alt_data_end+0xff005600>
    6008:	002b883a 	mov	r21,zero
    600c:	0023883a 	mov	r17,zero
    6010:	003efb06 	br	5c00 <__alt_data_end+0xff005c00>
    6014:	d8800717 	ldw	r2,28(sp)
    6018:	003bd006 	br	4f5c <__alt_data_end+0xff004f5c>
    601c:	d9000a17 	ldw	r4,40(sp)
    6020:	d9800d17 	ldw	r6,52(sp)
    6024:	dd400a15 	stw	r21,40(sp)
    6028:	a905c83a 	sub	r2,r21,r4
    602c:	308d883a 	add	r6,r6,r2
    6030:	d9800d15 	stw	r6,52(sp)
    6034:	002b883a 	mov	r21,zero
    6038:	003e0606 	br	5854 <__alt_data_end+0xff005854>
    603c:	9023883a 	mov	r17,r18
    6040:	9829883a 	mov	r20,r19
    6044:	04000084 	movi	r16,2
    6048:	003c9206 	br	5294 <__alt_data_end+0xff005294>
    604c:	04000044 	movi	r16,1
    6050:	dc000c15 	stw	r16,48(sp)
    6054:	dc000615 	stw	r16,24(sp)
    6058:	dc002215 	stw	r16,136(sp)
    605c:	e0001115 	stw	zero,68(fp)
    6060:	000b883a 	mov	r5,zero
    6064:	003c6906 	br	520c <__alt_data_end+0xff00520c>
    6068:	3021883a 	mov	r16,r6
    606c:	003ffb06 	br	605c <__alt_data_end+0xff00605c>
    6070:	1000021e 	bne	r2,zero,607c <_dtoa_r+0x11e0>
    6074:	4200004c 	andi	r8,r8,1
    6078:	403e7d1e 	bne	r8,zero,5a70 <__alt_data_end+0xff005a70>
    607c:	01000c04 	movi	r4,48
    6080:	00000106 	br	6088 <_dtoa_r+0x11ec>
    6084:	102f883a 	mov	r23,r2
    6088:	b8bfffc4 	addi	r2,r23,-1
    608c:	10c00007 	ldb	r3,0(r2)
    6090:	193ffc26 	beq	r3,r4,6084 <__alt_data_end+0xff006084>
    6094:	003e8706 	br	5ab4 <__alt_data_end+0xff005ab4>
    6098:	d8800517 	ldw	r2,20(sp)
    609c:	00a3c83a 	sub	r17,zero,r2
    60a0:	8800a426 	beq	r17,zero,6334 <_dtoa_r+0x1498>
    60a4:	888003cc 	andi	r2,r17,15
    60a8:	100490fa 	slli	r2,r2,3
    60ac:	00c00074 	movhi	r3,1
    60b0:	18c23004 	addi	r3,r3,2240
    60b4:	1885883a 	add	r2,r3,r2
    60b8:	11800017 	ldw	r6,0(r2)
    60bc:	11c00117 	ldw	r7,4(r2)
    60c0:	9009883a 	mov	r4,r18
    60c4:	980b883a 	mov	r5,r19
    60c8:	8823d13a 	srai	r17,r17,4
    60cc:	000d4e40 	call	d4e4 <__muldf3>
    60d0:	d8800f15 	stw	r2,60(sp)
    60d4:	d8c01015 	stw	r3,64(sp)
    60d8:	8800e826 	beq	r17,zero,647c <_dtoa_r+0x15e0>
    60dc:	05000074 	movhi	r20,1
    60e0:	a5022604 	addi	r20,r20,2200
    60e4:	04000084 	movi	r16,2
    60e8:	8980004c 	andi	r6,r17,1
    60ec:	1009883a 	mov	r4,r2
    60f0:	8823d07a 	srai	r17,r17,1
    60f4:	180b883a 	mov	r5,r3
    60f8:	30000426 	beq	r6,zero,610c <_dtoa_r+0x1270>
    60fc:	a1800017 	ldw	r6,0(r20)
    6100:	a1c00117 	ldw	r7,4(r20)
    6104:	84000044 	addi	r16,r16,1
    6108:	000d4e40 	call	d4e4 <__muldf3>
    610c:	a5000204 	addi	r20,r20,8
    6110:	883ff51e 	bne	r17,zero,60e8 <__alt_data_end+0xff0060e8>
    6114:	d8800f15 	stw	r2,60(sp)
    6118:	d8c01015 	stw	r3,64(sp)
    611c:	003c7606 	br	52f8 <__alt_data_end+0xff0052f8>
    6120:	00c00c04 	movi	r3,48
    6124:	10c00005 	stb	r3,0(r2)
    6128:	d8c00517 	ldw	r3,20(sp)
    612c:	bd3fffc3 	ldbu	r20,-1(r23)
    6130:	18c00044 	addi	r3,r3,1
    6134:	d8c00515 	stw	r3,20(sp)
    6138:	003db906 	br	5820 <__alt_data_end+0xff005820>
    613c:	89400117 	ldw	r5,4(r17)
    6140:	e009883a 	mov	r4,fp
    6144:	0007d2c0 	call	7d2c <_Balloc>
    6148:	89800417 	ldw	r6,16(r17)
    614c:	89400304 	addi	r5,r17,12
    6150:	11000304 	addi	r4,r2,12
    6154:	31800084 	addi	r6,r6,2
    6158:	318d883a 	add	r6,r6,r6
    615c:	318d883a 	add	r6,r6,r6
    6160:	1027883a 	mov	r19,r2
    6164:	00079600 	call	7960 <memcpy>
    6168:	01800044 	movi	r6,1
    616c:	980b883a 	mov	r5,r19
    6170:	e009883a 	mov	r4,fp
    6174:	00084ac0 	call	84ac <__lshift>
    6178:	1029883a 	mov	r20,r2
    617c:	003ecc06 	br	5cb0 <__alt_data_end+0xff005cb0>
    6180:	00800e44 	movi	r2,57
    6184:	90809026 	beq	r18,r2,63c8 <_dtoa_r+0x152c>
    6188:	92000044 	addi	r8,r18,1
    618c:	003f1f06 	br	5e0c <__alt_data_end+0xff005e0c>
    6190:	9011883a 	mov	r8,r18
    6194:	8825883a 	mov	r18,r17
    6198:	a023883a 	mov	r17,r20
    619c:	003e2906 	br	5a44 <__alt_data_end+0xff005a44>
    61a0:	002b883a 	mov	r21,zero
    61a4:	0023883a 	mov	r17,zero
    61a8:	003f5406 	br	5efc <__alt_data_end+0xff005efc>
    61ac:	61bfffc4 	addi	r6,r12,-1
    61b0:	300490fa 	slli	r2,r6,3
    61b4:	00c00074 	movhi	r3,1
    61b8:	18c23004 	addi	r3,r3,2240
    61bc:	1885883a 	add	r2,r3,r2
    61c0:	11000017 	ldw	r4,0(r2)
    61c4:	11400117 	ldw	r5,4(r2)
    61c8:	d8800717 	ldw	r2,28(sp)
    61cc:	880f883a 	mov	r7,r17
    61d0:	d9801215 	stw	r6,72(sp)
    61d4:	800d883a 	mov	r6,r16
    61d8:	db001615 	stw	r12,88(sp)
    61dc:	15c00044 	addi	r23,r2,1
    61e0:	000d4e40 	call	d4e4 <__muldf3>
    61e4:	d9401017 	ldw	r5,64(sp)
    61e8:	d9000f17 	ldw	r4,60(sp)
    61ec:	d8c01515 	stw	r3,84(sp)
    61f0:	d8801415 	stw	r2,80(sp)
    61f4:	000e4f80 	call	e4f8 <__fixdfsi>
    61f8:	1009883a 	mov	r4,r2
    61fc:	1021883a 	mov	r16,r2
    6200:	000e5780 	call	e578 <__floatsidf>
    6204:	d9000f17 	ldw	r4,60(sp)
    6208:	d9401017 	ldw	r5,64(sp)
    620c:	100d883a 	mov	r6,r2
    6210:	180f883a 	mov	r7,r3
    6214:	000dbfc0 	call	dbfc <__subdf3>
    6218:	1829883a 	mov	r20,r3
    621c:	d8c00717 	ldw	r3,28(sp)
    6220:	84000c04 	addi	r16,r16,48
    6224:	1023883a 	mov	r17,r2
    6228:	1c000005 	stb	r16,0(r3)
    622c:	db001617 	ldw	r12,88(sp)
    6230:	00800044 	movi	r2,1
    6234:	60802226 	beq	r12,r2,62c0 <_dtoa_r+0x1424>
    6238:	d9c00717 	ldw	r7,28(sp)
    623c:	8805883a 	mov	r2,r17
    6240:	b82b883a 	mov	r21,r23
    6244:	3b19883a 	add	r12,r7,r12
    6248:	6023883a 	mov	r17,r12
    624c:	a007883a 	mov	r3,r20
    6250:	dc800f15 	stw	r18,60(sp)
    6254:	000d883a 	mov	r6,zero
    6258:	01d00934 	movhi	r7,16420
    625c:	1009883a 	mov	r4,r2
    6260:	180b883a 	mov	r5,r3
    6264:	000d4e40 	call	d4e4 <__muldf3>
    6268:	180b883a 	mov	r5,r3
    626c:	1009883a 	mov	r4,r2
    6270:	1829883a 	mov	r20,r3
    6274:	1025883a 	mov	r18,r2
    6278:	000e4f80 	call	e4f8 <__fixdfsi>
    627c:	1009883a 	mov	r4,r2
    6280:	1021883a 	mov	r16,r2
    6284:	000e5780 	call	e578 <__floatsidf>
    6288:	100d883a 	mov	r6,r2
    628c:	180f883a 	mov	r7,r3
    6290:	9009883a 	mov	r4,r18
    6294:	a00b883a 	mov	r5,r20
    6298:	84000c04 	addi	r16,r16,48
    629c:	000dbfc0 	call	dbfc <__subdf3>
    62a0:	ad400044 	addi	r21,r21,1
    62a4:	ac3fffc5 	stb	r16,-1(r21)
    62a8:	ac7fea1e 	bne	r21,r17,6254 <__alt_data_end+0xff006254>
    62ac:	1023883a 	mov	r17,r2
    62b0:	d8801217 	ldw	r2,72(sp)
    62b4:	dc800f17 	ldw	r18,60(sp)
    62b8:	1829883a 	mov	r20,r3
    62bc:	b8af883a 	add	r23,r23,r2
    62c0:	d9001417 	ldw	r4,80(sp)
    62c4:	d9401517 	ldw	r5,84(sp)
    62c8:	000d883a 	mov	r6,zero
    62cc:	01cff834 	movhi	r7,16352
    62d0:	000c0f80 	call	c0f8 <__adddf3>
    62d4:	880d883a 	mov	r6,r17
    62d8:	a00f883a 	mov	r7,r20
    62dc:	1009883a 	mov	r4,r2
    62e0:	180b883a 	mov	r5,r3
    62e4:	000d3f00 	call	d3f0 <__ledf2>
    62e8:	10003e0e 	bge	r2,zero,63e4 <_dtoa_r+0x1548>
    62ec:	d9001317 	ldw	r4,76(sp)
    62f0:	bd3fffc3 	ldbu	r20,-1(r23)
    62f4:	d9000515 	stw	r4,20(sp)
    62f8:	003d3b06 	br	57e8 <__alt_data_end+0xff0057e8>
    62fc:	0027883a 	mov	r19,zero
    6300:	003f1b06 	br	5f70 <__alt_data_end+0xff005f70>
    6304:	d8800817 	ldw	r2,32(sp)
    6308:	11e9c83a 	sub	r20,r2,r7
    630c:	0005883a 	mov	r2,zero
    6310:	003d5406 	br	5864 <__alt_data_end+0xff005864>
    6314:	00800044 	movi	r2,1
    6318:	003dc706 	br	5a38 <__alt_data_end+0xff005a38>
    631c:	d8c00217 	ldw	r3,8(sp)
    6320:	00800d84 	movi	r2,54
    6324:	dd400a17 	ldw	r21,40(sp)
    6328:	10c5c83a 	sub	r2,r2,r3
    632c:	dd000817 	ldw	r20,32(sp)
    6330:	003d4c06 	br	5864 <__alt_data_end+0xff005864>
    6334:	dc800f15 	stw	r18,60(sp)
    6338:	dcc01015 	stw	r19,64(sp)
    633c:	04000084 	movi	r16,2
    6340:	003bed06 	br	52f8 <__alt_data_end+0xff0052f8>
    6344:	d9000617 	ldw	r4,24(sp)
    6348:	203f0d26 	beq	r4,zero,5f80 <__alt_data_end+0xff005f80>
    634c:	d9800c17 	ldw	r6,48(sp)
    6350:	01bcab0e 	bge	zero,r6,5600 <__alt_data_end+0xff005600>
    6354:	d9401017 	ldw	r5,64(sp)
    6358:	d9000f17 	ldw	r4,60(sp)
    635c:	000d883a 	mov	r6,zero
    6360:	01d00934 	movhi	r7,16420
    6364:	000d4e40 	call	d4e4 <__muldf3>
    6368:	81000044 	addi	r4,r16,1
    636c:	d8800f15 	stw	r2,60(sp)
    6370:	d8c01015 	stw	r3,64(sp)
    6374:	000e5780 	call	e578 <__floatsidf>
    6378:	d9800f17 	ldw	r6,60(sp)
    637c:	d9c01017 	ldw	r7,64(sp)
    6380:	1009883a 	mov	r4,r2
    6384:	180b883a 	mov	r5,r3
    6388:	000d4e40 	call	d4e4 <__muldf3>
    638c:	01d00734 	movhi	r7,16412
    6390:	000d883a 	mov	r6,zero
    6394:	1009883a 	mov	r4,r2
    6398:	180b883a 	mov	r5,r3
    639c:	000c0f80 	call	c0f8 <__adddf3>
    63a0:	d9c00517 	ldw	r7,20(sp)
    63a4:	047f3034 	movhi	r17,64704
    63a8:	1021883a 	mov	r16,r2
    63ac:	39ffffc4 	addi	r7,r7,-1
    63b0:	d9c01315 	stw	r7,76(sp)
    63b4:	1c63883a 	add	r17,r3,r17
    63b8:	db000c17 	ldw	r12,48(sp)
    63bc:	003bea06 	br	5368 <__alt_data_end+0xff005368>
    63c0:	dc000915 	stw	r16,36(sp)
    63c4:	003e0e06 	br	5c00 <__alt_data_end+0xff005c00>
    63c8:	01000e44 	movi	r4,57
    63cc:	8825883a 	mov	r18,r17
    63d0:	9dc00044 	addi	r23,r19,1
    63d4:	99000005 	stb	r4,0(r19)
    63d8:	a023883a 	mov	r17,r20
    63dc:	dc000915 	stw	r16,36(sp)
    63e0:	003da406 	br	5a74 <__alt_data_end+0xff005a74>
    63e4:	d9801417 	ldw	r6,80(sp)
    63e8:	d9c01517 	ldw	r7,84(sp)
    63ec:	0009883a 	mov	r4,zero
    63f0:	014ff834 	movhi	r5,16352
    63f4:	000dbfc0 	call	dbfc <__subdf3>
    63f8:	880d883a 	mov	r6,r17
    63fc:	a00f883a 	mov	r7,r20
    6400:	1009883a 	mov	r4,r2
    6404:	180b883a 	mov	r5,r3
    6408:	000d3140 	call	d314 <__gedf2>
    640c:	00bc7c0e 	bge	zero,r2,5600 <__alt_data_end+0xff005600>
    6410:	01000c04 	movi	r4,48
    6414:	00000106 	br	641c <_dtoa_r+0x1580>
    6418:	102f883a 	mov	r23,r2
    641c:	b8bfffc4 	addi	r2,r23,-1
    6420:	10c00007 	ldb	r3,0(r2)
    6424:	193ffc26 	beq	r3,r4,6418 <__alt_data_end+0xff006418>
    6428:	d9801317 	ldw	r6,76(sp)
    642c:	d9800515 	stw	r6,20(sp)
    6430:	003c4406 	br	5544 <__alt_data_end+0xff005544>
    6434:	d9801317 	ldw	r6,76(sp)
    6438:	d9800515 	stw	r6,20(sp)
    643c:	003cea06 	br	57e8 <__alt_data_end+0xff0057e8>
    6440:	dd800f17 	ldw	r22,60(sp)
    6444:	dcc01017 	ldw	r19,64(sp)
    6448:	dc801217 	ldw	r18,72(sp)
    644c:	003c6c06 	br	5600 <__alt_data_end+0xff005600>
    6450:	903e031e 	bne	r18,zero,5c60 <__alt_data_end+0xff005c60>
    6454:	003ebb06 	br	5f44 <__alt_data_end+0xff005f44>
    6458:	103e6c1e 	bne	r2,zero,5e0c <__alt_data_end+0xff005e0c>
    645c:	4080004c 	andi	r2,r8,1
    6460:	103e6a26 	beq	r2,zero,5e0c <__alt_data_end+0xff005e0c>
    6464:	003e6606 	br	5e00 <__alt_data_end+0xff005e00>
    6468:	d8c00317 	ldw	r3,12(sp)
    646c:	00800084 	movi	r2,2
    6470:	10c02916 	blt	r2,r3,6518 <_dtoa_r+0x167c>
    6474:	d9000c17 	ldw	r4,48(sp)
    6478:	003e8806 	br	5e9c <__alt_data_end+0xff005e9c>
    647c:	04000084 	movi	r16,2
    6480:	003b9d06 	br	52f8 <__alt_data_end+0xff0052f8>
    6484:	d9001317 	ldw	r4,76(sp)
    6488:	d9000515 	stw	r4,20(sp)
    648c:	003cd606 	br	57e8 <__alt_data_end+0xff0057e8>
    6490:	d8801317 	ldw	r2,76(sp)
    6494:	d8800515 	stw	r2,20(sp)
    6498:	003c2a06 	br	5544 <__alt_data_end+0xff005544>
    649c:	d9800317 	ldw	r6,12(sp)
    64a0:	00800084 	movi	r2,2
    64a4:	11801516 	blt	r2,r6,64fc <_dtoa_r+0x1660>
    64a8:	d9c00c17 	ldw	r7,48(sp)
    64ac:	d9c00615 	stw	r7,24(sp)
    64b0:	003df706 	br	5c90 <__alt_data_end+0xff005c90>
    64b4:	193d3926 	beq	r3,r4,599c <__alt_data_end+0xff00599c>
    64b8:	00c00f04 	movi	r3,60
    64bc:	1885c83a 	sub	r2,r3,r2
    64c0:	003ddf06 	br	5c40 <__alt_data_end+0xff005c40>
    64c4:	e009883a 	mov	r4,fp
    64c8:	e0001115 	stw	zero,68(fp)
    64cc:	000b883a 	mov	r5,zero
    64d0:	0007d2c0 	call	7d2c <_Balloc>
    64d4:	d8800715 	stw	r2,28(sp)
    64d8:	d8c00717 	ldw	r3,28(sp)
    64dc:	00bfffc4 	movi	r2,-1
    64e0:	01000044 	movi	r4,1
    64e4:	d8800c15 	stw	r2,48(sp)
    64e8:	e0c01015 	stw	r3,64(fp)
    64ec:	d9000b15 	stw	r4,44(sp)
    64f0:	d8800615 	stw	r2,24(sp)
    64f4:	d8002215 	stw	zero,136(sp)
    64f8:	003c4106 	br	5600 <__alt_data_end+0xff005600>
    64fc:	d8c00c17 	ldw	r3,48(sp)
    6500:	d8c00615 	stw	r3,24(sp)
    6504:	003e7006 	br	5ec8 <__alt_data_end+0xff005ec8>
    6508:	04400044 	movi	r17,1
    650c:	003b2006 	br	5190 <__alt_data_end+0xff005190>
    6510:	000b883a 	mov	r5,zero
    6514:	003b3d06 	br	520c <__alt_data_end+0xff00520c>
    6518:	d8800c17 	ldw	r2,48(sp)
    651c:	d8800615 	stw	r2,24(sp)
    6520:	003e6906 	br	5ec8 <__alt_data_end+0xff005ec8>

00006524 <__sflush_r>:
    6524:	2880030b 	ldhu	r2,12(r5)
    6528:	defffb04 	addi	sp,sp,-20
    652c:	dcc00315 	stw	r19,12(sp)
    6530:	dc400115 	stw	r17,4(sp)
    6534:	dfc00415 	stw	ra,16(sp)
    6538:	dc800215 	stw	r18,8(sp)
    653c:	dc000015 	stw	r16,0(sp)
    6540:	10c0020c 	andi	r3,r2,8
    6544:	2823883a 	mov	r17,r5
    6548:	2027883a 	mov	r19,r4
    654c:	1800311e 	bne	r3,zero,6614 <__sflush_r+0xf0>
    6550:	28c00117 	ldw	r3,4(r5)
    6554:	10820014 	ori	r2,r2,2048
    6558:	2880030d 	sth	r2,12(r5)
    655c:	00c04b0e 	bge	zero,r3,668c <__sflush_r+0x168>
    6560:	8a000a17 	ldw	r8,40(r17)
    6564:	40002326 	beq	r8,zero,65f4 <__sflush_r+0xd0>
    6568:	9c000017 	ldw	r16,0(r19)
    656c:	10c4000c 	andi	r3,r2,4096
    6570:	98000015 	stw	zero,0(r19)
    6574:	18004826 	beq	r3,zero,6698 <__sflush_r+0x174>
    6578:	89801417 	ldw	r6,80(r17)
    657c:	10c0010c 	andi	r3,r2,4
    6580:	18000626 	beq	r3,zero,659c <__sflush_r+0x78>
    6584:	88c00117 	ldw	r3,4(r17)
    6588:	88800c17 	ldw	r2,48(r17)
    658c:	30cdc83a 	sub	r6,r6,r3
    6590:	10000226 	beq	r2,zero,659c <__sflush_r+0x78>
    6594:	88800f17 	ldw	r2,60(r17)
    6598:	308dc83a 	sub	r6,r6,r2
    659c:	89400717 	ldw	r5,28(r17)
    65a0:	000f883a 	mov	r7,zero
    65a4:	9809883a 	mov	r4,r19
    65a8:	403ee83a 	callr	r8
    65ac:	00ffffc4 	movi	r3,-1
    65b0:	10c04426 	beq	r2,r3,66c4 <__sflush_r+0x1a0>
    65b4:	88c0030b 	ldhu	r3,12(r17)
    65b8:	89000417 	ldw	r4,16(r17)
    65bc:	88000115 	stw	zero,4(r17)
    65c0:	197dffcc 	andi	r5,r3,63487
    65c4:	8940030d 	sth	r5,12(r17)
    65c8:	89000015 	stw	r4,0(r17)
    65cc:	18c4000c 	andi	r3,r3,4096
    65d0:	18002c1e 	bne	r3,zero,6684 <__sflush_r+0x160>
    65d4:	89400c17 	ldw	r5,48(r17)
    65d8:	9c000015 	stw	r16,0(r19)
    65dc:	28000526 	beq	r5,zero,65f4 <__sflush_r+0xd0>
    65e0:	88801004 	addi	r2,r17,64
    65e4:	28800226 	beq	r5,r2,65f0 <__sflush_r+0xcc>
    65e8:	9809883a 	mov	r4,r19
    65ec:	0006c900 	call	6c90 <_free_r>
    65f0:	88000c15 	stw	zero,48(r17)
    65f4:	0005883a 	mov	r2,zero
    65f8:	dfc00417 	ldw	ra,16(sp)
    65fc:	dcc00317 	ldw	r19,12(sp)
    6600:	dc800217 	ldw	r18,8(sp)
    6604:	dc400117 	ldw	r17,4(sp)
    6608:	dc000017 	ldw	r16,0(sp)
    660c:	dec00504 	addi	sp,sp,20
    6610:	f800283a 	ret
    6614:	2c800417 	ldw	r18,16(r5)
    6618:	903ff626 	beq	r18,zero,65f4 <__alt_data_end+0xff0065f4>
    661c:	2c000017 	ldw	r16,0(r5)
    6620:	108000cc 	andi	r2,r2,3
    6624:	2c800015 	stw	r18,0(r5)
    6628:	84a1c83a 	sub	r16,r16,r18
    662c:	1000131e 	bne	r2,zero,667c <__sflush_r+0x158>
    6630:	28800517 	ldw	r2,20(r5)
    6634:	88800215 	stw	r2,8(r17)
    6638:	04000316 	blt	zero,r16,6648 <__sflush_r+0x124>
    663c:	003fed06 	br	65f4 <__alt_data_end+0xff0065f4>
    6640:	90a5883a 	add	r18,r18,r2
    6644:	043feb0e 	bge	zero,r16,65f4 <__alt_data_end+0xff0065f4>
    6648:	88800917 	ldw	r2,36(r17)
    664c:	89400717 	ldw	r5,28(r17)
    6650:	800f883a 	mov	r7,r16
    6654:	900d883a 	mov	r6,r18
    6658:	9809883a 	mov	r4,r19
    665c:	103ee83a 	callr	r2
    6660:	80a1c83a 	sub	r16,r16,r2
    6664:	00bff616 	blt	zero,r2,6640 <__alt_data_end+0xff006640>
    6668:	88c0030b 	ldhu	r3,12(r17)
    666c:	00bfffc4 	movi	r2,-1
    6670:	18c01014 	ori	r3,r3,64
    6674:	88c0030d 	sth	r3,12(r17)
    6678:	003fdf06 	br	65f8 <__alt_data_end+0xff0065f8>
    667c:	0005883a 	mov	r2,zero
    6680:	003fec06 	br	6634 <__alt_data_end+0xff006634>
    6684:	88801415 	stw	r2,80(r17)
    6688:	003fd206 	br	65d4 <__alt_data_end+0xff0065d4>
    668c:	28c00f17 	ldw	r3,60(r5)
    6690:	00ffb316 	blt	zero,r3,6560 <__alt_data_end+0xff006560>
    6694:	003fd706 	br	65f4 <__alt_data_end+0xff0065f4>
    6698:	89400717 	ldw	r5,28(r17)
    669c:	000d883a 	mov	r6,zero
    66a0:	01c00044 	movi	r7,1
    66a4:	9809883a 	mov	r4,r19
    66a8:	403ee83a 	callr	r8
    66ac:	100d883a 	mov	r6,r2
    66b0:	00bfffc4 	movi	r2,-1
    66b4:	30801426 	beq	r6,r2,6708 <__sflush_r+0x1e4>
    66b8:	8880030b 	ldhu	r2,12(r17)
    66bc:	8a000a17 	ldw	r8,40(r17)
    66c0:	003fae06 	br	657c <__alt_data_end+0xff00657c>
    66c4:	98c00017 	ldw	r3,0(r19)
    66c8:	183fba26 	beq	r3,zero,65b4 <__alt_data_end+0xff0065b4>
    66cc:	01000744 	movi	r4,29
    66d0:	19000626 	beq	r3,r4,66ec <__sflush_r+0x1c8>
    66d4:	01000584 	movi	r4,22
    66d8:	19000426 	beq	r3,r4,66ec <__sflush_r+0x1c8>
    66dc:	88c0030b 	ldhu	r3,12(r17)
    66e0:	18c01014 	ori	r3,r3,64
    66e4:	88c0030d 	sth	r3,12(r17)
    66e8:	003fc306 	br	65f8 <__alt_data_end+0xff0065f8>
    66ec:	8880030b 	ldhu	r2,12(r17)
    66f0:	88c00417 	ldw	r3,16(r17)
    66f4:	88000115 	stw	zero,4(r17)
    66f8:	10bdffcc 	andi	r2,r2,63487
    66fc:	8880030d 	sth	r2,12(r17)
    6700:	88c00015 	stw	r3,0(r17)
    6704:	003fb306 	br	65d4 <__alt_data_end+0xff0065d4>
    6708:	98800017 	ldw	r2,0(r19)
    670c:	103fea26 	beq	r2,zero,66b8 <__alt_data_end+0xff0066b8>
    6710:	00c00744 	movi	r3,29
    6714:	10c00226 	beq	r2,r3,6720 <__sflush_r+0x1fc>
    6718:	00c00584 	movi	r3,22
    671c:	10c0031e 	bne	r2,r3,672c <__sflush_r+0x208>
    6720:	9c000015 	stw	r16,0(r19)
    6724:	0005883a 	mov	r2,zero
    6728:	003fb306 	br	65f8 <__alt_data_end+0xff0065f8>
    672c:	88c0030b 	ldhu	r3,12(r17)
    6730:	3005883a 	mov	r2,r6
    6734:	18c01014 	ori	r3,r3,64
    6738:	88c0030d 	sth	r3,12(r17)
    673c:	003fae06 	br	65f8 <__alt_data_end+0xff0065f8>

00006740 <_fflush_r>:
    6740:	defffd04 	addi	sp,sp,-12
    6744:	dc000115 	stw	r16,4(sp)
    6748:	dfc00215 	stw	ra,8(sp)
    674c:	2021883a 	mov	r16,r4
    6750:	20000226 	beq	r4,zero,675c <_fflush_r+0x1c>
    6754:	20800e17 	ldw	r2,56(r4)
    6758:	10000c26 	beq	r2,zero,678c <_fflush_r+0x4c>
    675c:	2880030f 	ldh	r2,12(r5)
    6760:	1000051e 	bne	r2,zero,6778 <_fflush_r+0x38>
    6764:	0005883a 	mov	r2,zero
    6768:	dfc00217 	ldw	ra,8(sp)
    676c:	dc000117 	ldw	r16,4(sp)
    6770:	dec00304 	addi	sp,sp,12
    6774:	f800283a 	ret
    6778:	8009883a 	mov	r4,r16
    677c:	dfc00217 	ldw	ra,8(sp)
    6780:	dc000117 	ldw	r16,4(sp)
    6784:	dec00304 	addi	sp,sp,12
    6788:	00065241 	jmpi	6524 <__sflush_r>
    678c:	d9400015 	stw	r5,0(sp)
    6790:	0006b1c0 	call	6b1c <__sinit>
    6794:	d9400017 	ldw	r5,0(sp)
    6798:	003ff006 	br	675c <__alt_data_end+0xff00675c>

0000679c <fflush>:
    679c:	20000526 	beq	r4,zero,67b4 <fflush+0x18>
    67a0:	00800074 	movhi	r2,1
    67a4:	10896104 	addi	r2,r2,9604
    67a8:	200b883a 	mov	r5,r4
    67ac:	11000017 	ldw	r4,0(r2)
    67b0:	00067401 	jmpi	6740 <_fflush_r>
    67b4:	00800074 	movhi	r2,1
    67b8:	10896004 	addi	r2,r2,9600
    67bc:	11000017 	ldw	r4,0(r2)
    67c0:	01400034 	movhi	r5,0
    67c4:	2959d004 	addi	r5,r5,26432
    67c8:	00075201 	jmpi	7520 <_fwalk_reent>

000067cc <__fp_unlock>:
    67cc:	0005883a 	mov	r2,zero
    67d0:	f800283a 	ret

000067d4 <_cleanup_r>:
    67d4:	01400074 	movhi	r5,1
    67d8:	296b3604 	addi	r5,r5,-21288
    67dc:	00075201 	jmpi	7520 <_fwalk_reent>

000067e0 <__sinit.part.1>:
    67e0:	defff704 	addi	sp,sp,-36
    67e4:	00c00034 	movhi	r3,0
    67e8:	dfc00815 	stw	ra,32(sp)
    67ec:	ddc00715 	stw	r23,28(sp)
    67f0:	dd800615 	stw	r22,24(sp)
    67f4:	dd400515 	stw	r21,20(sp)
    67f8:	dd000415 	stw	r20,16(sp)
    67fc:	dcc00315 	stw	r19,12(sp)
    6800:	dc800215 	stw	r18,8(sp)
    6804:	dc400115 	stw	r17,4(sp)
    6808:	dc000015 	stw	r16,0(sp)
    680c:	18d9f504 	addi	r3,r3,26580
    6810:	24000117 	ldw	r16,4(r4)
    6814:	20c00f15 	stw	r3,60(r4)
    6818:	2080bb04 	addi	r2,r4,748
    681c:	00c000c4 	movi	r3,3
    6820:	20c0b915 	stw	r3,740(r4)
    6824:	2080ba15 	stw	r2,744(r4)
    6828:	2000b815 	stw	zero,736(r4)
    682c:	05c00204 	movi	r23,8
    6830:	00800104 	movi	r2,4
    6834:	2025883a 	mov	r18,r4
    6838:	b80d883a 	mov	r6,r23
    683c:	81001704 	addi	r4,r16,92
    6840:	000b883a 	mov	r5,zero
    6844:	80000015 	stw	zero,0(r16)
    6848:	80000115 	stw	zero,4(r16)
    684c:	80000215 	stw	zero,8(r16)
    6850:	8080030d 	sth	r2,12(r16)
    6854:	80001915 	stw	zero,100(r16)
    6858:	8000038d 	sth	zero,14(r16)
    685c:	80000415 	stw	zero,16(r16)
    6860:	80000515 	stw	zero,20(r16)
    6864:	80000615 	stw	zero,24(r16)
    6868:	0007c040 	call	7c04 <memset>
    686c:	05800074 	movhi	r22,1
    6870:	94400217 	ldw	r17,8(r18)
    6874:	05400074 	movhi	r21,1
    6878:	05000074 	movhi	r20,1
    687c:	04c00074 	movhi	r19,1
    6880:	b5a4c004 	addi	r22,r22,-27904
    6884:	ad64d704 	addi	r21,r21,-27812
    6888:	a524f604 	addi	r20,r20,-27688
    688c:	9ce50d04 	addi	r19,r19,-27596
    6890:	85800815 	stw	r22,32(r16)
    6894:	85400915 	stw	r21,36(r16)
    6898:	85000a15 	stw	r20,40(r16)
    689c:	84c00b15 	stw	r19,44(r16)
    68a0:	84000715 	stw	r16,28(r16)
    68a4:	00800284 	movi	r2,10
    68a8:	8880030d 	sth	r2,12(r17)
    68ac:	00800044 	movi	r2,1
    68b0:	b80d883a 	mov	r6,r23
    68b4:	89001704 	addi	r4,r17,92
    68b8:	000b883a 	mov	r5,zero
    68bc:	88000015 	stw	zero,0(r17)
    68c0:	88000115 	stw	zero,4(r17)
    68c4:	88000215 	stw	zero,8(r17)
    68c8:	88001915 	stw	zero,100(r17)
    68cc:	8880038d 	sth	r2,14(r17)
    68d0:	88000415 	stw	zero,16(r17)
    68d4:	88000515 	stw	zero,20(r17)
    68d8:	88000615 	stw	zero,24(r17)
    68dc:	0007c040 	call	7c04 <memset>
    68e0:	94000317 	ldw	r16,12(r18)
    68e4:	00800484 	movi	r2,18
    68e8:	8c400715 	stw	r17,28(r17)
    68ec:	8d800815 	stw	r22,32(r17)
    68f0:	8d400915 	stw	r21,36(r17)
    68f4:	8d000a15 	stw	r20,40(r17)
    68f8:	8cc00b15 	stw	r19,44(r17)
    68fc:	8080030d 	sth	r2,12(r16)
    6900:	00800084 	movi	r2,2
    6904:	80000015 	stw	zero,0(r16)
    6908:	80000115 	stw	zero,4(r16)
    690c:	80000215 	stw	zero,8(r16)
    6910:	80001915 	stw	zero,100(r16)
    6914:	8080038d 	sth	r2,14(r16)
    6918:	80000415 	stw	zero,16(r16)
    691c:	80000515 	stw	zero,20(r16)
    6920:	80000615 	stw	zero,24(r16)
    6924:	b80d883a 	mov	r6,r23
    6928:	000b883a 	mov	r5,zero
    692c:	81001704 	addi	r4,r16,92
    6930:	0007c040 	call	7c04 <memset>
    6934:	00800044 	movi	r2,1
    6938:	84000715 	stw	r16,28(r16)
    693c:	85800815 	stw	r22,32(r16)
    6940:	85400915 	stw	r21,36(r16)
    6944:	85000a15 	stw	r20,40(r16)
    6948:	84c00b15 	stw	r19,44(r16)
    694c:	90800e15 	stw	r2,56(r18)
    6950:	dfc00817 	ldw	ra,32(sp)
    6954:	ddc00717 	ldw	r23,28(sp)
    6958:	dd800617 	ldw	r22,24(sp)
    695c:	dd400517 	ldw	r21,20(sp)
    6960:	dd000417 	ldw	r20,16(sp)
    6964:	dcc00317 	ldw	r19,12(sp)
    6968:	dc800217 	ldw	r18,8(sp)
    696c:	dc400117 	ldw	r17,4(sp)
    6970:	dc000017 	ldw	r16,0(sp)
    6974:	dec00904 	addi	sp,sp,36
    6978:	f800283a 	ret

0000697c <__fp_lock>:
    697c:	0005883a 	mov	r2,zero
    6980:	f800283a 	ret

00006984 <__sfmoreglue>:
    6984:	defffc04 	addi	sp,sp,-16
    6988:	dc400115 	stw	r17,4(sp)
    698c:	2c7fffc4 	addi	r17,r5,-1
    6990:	8c401a24 	muli	r17,r17,104
    6994:	dc800215 	stw	r18,8(sp)
    6998:	2825883a 	mov	r18,r5
    699c:	89401d04 	addi	r5,r17,116
    69a0:	dc000015 	stw	r16,0(sp)
    69a4:	dfc00315 	stw	ra,12(sp)
    69a8:	0001e400 	call	1e40 <_malloc_r>
    69ac:	1021883a 	mov	r16,r2
    69b0:	10000726 	beq	r2,zero,69d0 <__sfmoreglue+0x4c>
    69b4:	11000304 	addi	r4,r2,12
    69b8:	10000015 	stw	zero,0(r2)
    69bc:	14800115 	stw	r18,4(r2)
    69c0:	11000215 	stw	r4,8(r2)
    69c4:	89801a04 	addi	r6,r17,104
    69c8:	000b883a 	mov	r5,zero
    69cc:	0007c040 	call	7c04 <memset>
    69d0:	8005883a 	mov	r2,r16
    69d4:	dfc00317 	ldw	ra,12(sp)
    69d8:	dc800217 	ldw	r18,8(sp)
    69dc:	dc400117 	ldw	r17,4(sp)
    69e0:	dc000017 	ldw	r16,0(sp)
    69e4:	dec00404 	addi	sp,sp,16
    69e8:	f800283a 	ret

000069ec <__sfp>:
    69ec:	defffb04 	addi	sp,sp,-20
    69f0:	dc000015 	stw	r16,0(sp)
    69f4:	04000074 	movhi	r16,1
    69f8:	84096004 	addi	r16,r16,9600
    69fc:	dcc00315 	stw	r19,12(sp)
    6a00:	2027883a 	mov	r19,r4
    6a04:	81000017 	ldw	r4,0(r16)
    6a08:	dfc00415 	stw	ra,16(sp)
    6a0c:	dc800215 	stw	r18,8(sp)
    6a10:	20800e17 	ldw	r2,56(r4)
    6a14:	dc400115 	stw	r17,4(sp)
    6a18:	1000021e 	bne	r2,zero,6a24 <__sfp+0x38>
    6a1c:	00067e00 	call	67e0 <__sinit.part.1>
    6a20:	81000017 	ldw	r4,0(r16)
    6a24:	2480b804 	addi	r18,r4,736
    6a28:	047fffc4 	movi	r17,-1
    6a2c:	91000117 	ldw	r4,4(r18)
    6a30:	94000217 	ldw	r16,8(r18)
    6a34:	213fffc4 	addi	r4,r4,-1
    6a38:	20000a16 	blt	r4,zero,6a64 <__sfp+0x78>
    6a3c:	8080030f 	ldh	r2,12(r16)
    6a40:	10000c26 	beq	r2,zero,6a74 <__sfp+0x88>
    6a44:	80c01d04 	addi	r3,r16,116
    6a48:	00000206 	br	6a54 <__sfp+0x68>
    6a4c:	18bfe60f 	ldh	r2,-104(r3)
    6a50:	10000826 	beq	r2,zero,6a74 <__sfp+0x88>
    6a54:	213fffc4 	addi	r4,r4,-1
    6a58:	1c3ffd04 	addi	r16,r3,-12
    6a5c:	18c01a04 	addi	r3,r3,104
    6a60:	247ffa1e 	bne	r4,r17,6a4c <__alt_data_end+0xff006a4c>
    6a64:	90800017 	ldw	r2,0(r18)
    6a68:	10001d26 	beq	r2,zero,6ae0 <__sfp+0xf4>
    6a6c:	1025883a 	mov	r18,r2
    6a70:	003fee06 	br	6a2c <__alt_data_end+0xff006a2c>
    6a74:	00bfffc4 	movi	r2,-1
    6a78:	8080038d 	sth	r2,14(r16)
    6a7c:	00800044 	movi	r2,1
    6a80:	8080030d 	sth	r2,12(r16)
    6a84:	80001915 	stw	zero,100(r16)
    6a88:	80000015 	stw	zero,0(r16)
    6a8c:	80000215 	stw	zero,8(r16)
    6a90:	80000115 	stw	zero,4(r16)
    6a94:	80000415 	stw	zero,16(r16)
    6a98:	80000515 	stw	zero,20(r16)
    6a9c:	80000615 	stw	zero,24(r16)
    6aa0:	01800204 	movi	r6,8
    6aa4:	000b883a 	mov	r5,zero
    6aa8:	81001704 	addi	r4,r16,92
    6aac:	0007c040 	call	7c04 <memset>
    6ab0:	8005883a 	mov	r2,r16
    6ab4:	80000c15 	stw	zero,48(r16)
    6ab8:	80000d15 	stw	zero,52(r16)
    6abc:	80001115 	stw	zero,68(r16)
    6ac0:	80001215 	stw	zero,72(r16)
    6ac4:	dfc00417 	ldw	ra,16(sp)
    6ac8:	dcc00317 	ldw	r19,12(sp)
    6acc:	dc800217 	ldw	r18,8(sp)
    6ad0:	dc400117 	ldw	r17,4(sp)
    6ad4:	dc000017 	ldw	r16,0(sp)
    6ad8:	dec00504 	addi	sp,sp,20
    6adc:	f800283a 	ret
    6ae0:	01400104 	movi	r5,4
    6ae4:	9809883a 	mov	r4,r19
    6ae8:	00069840 	call	6984 <__sfmoreglue>
    6aec:	90800015 	stw	r2,0(r18)
    6af0:	103fde1e 	bne	r2,zero,6a6c <__alt_data_end+0xff006a6c>
    6af4:	00800304 	movi	r2,12
    6af8:	98800015 	stw	r2,0(r19)
    6afc:	0005883a 	mov	r2,zero
    6b00:	003ff006 	br	6ac4 <__alt_data_end+0xff006ac4>

00006b04 <_cleanup>:
    6b04:	00800074 	movhi	r2,1
    6b08:	10896004 	addi	r2,r2,9600
    6b0c:	11000017 	ldw	r4,0(r2)
    6b10:	01400074 	movhi	r5,1
    6b14:	296b3604 	addi	r5,r5,-21288
    6b18:	00075201 	jmpi	7520 <_fwalk_reent>

00006b1c <__sinit>:
    6b1c:	20800e17 	ldw	r2,56(r4)
    6b20:	10000126 	beq	r2,zero,6b28 <__sinit+0xc>
    6b24:	f800283a 	ret
    6b28:	00067e01 	jmpi	67e0 <__sinit.part.1>

00006b2c <__sfp_lock_acquire>:
    6b2c:	f800283a 	ret

00006b30 <__sfp_lock_release>:
    6b30:	f800283a 	ret

00006b34 <__sinit_lock_acquire>:
    6b34:	f800283a 	ret

00006b38 <__sinit_lock_release>:
    6b38:	f800283a 	ret

00006b3c <__fp_lock_all>:
    6b3c:	00800074 	movhi	r2,1
    6b40:	10896104 	addi	r2,r2,9604
    6b44:	11000017 	ldw	r4,0(r2)
    6b48:	01400034 	movhi	r5,0
    6b4c:	295a5f04 	addi	r5,r5,27004
    6b50:	000745c1 	jmpi	745c <_fwalk>

00006b54 <__fp_unlock_all>:
    6b54:	00800074 	movhi	r2,1
    6b58:	10896104 	addi	r2,r2,9604
    6b5c:	11000017 	ldw	r4,0(r2)
    6b60:	01400034 	movhi	r5,0
    6b64:	2959f304 	addi	r5,r5,26572
    6b68:	000745c1 	jmpi	745c <_fwalk>

00006b6c <_malloc_trim_r>:
    6b6c:	defffb04 	addi	sp,sp,-20
    6b70:	dcc00315 	stw	r19,12(sp)
    6b74:	04c00074 	movhi	r19,1
    6b78:	dc800215 	stw	r18,8(sp)
    6b7c:	dc400115 	stw	r17,4(sp)
    6b80:	dc000015 	stw	r16,0(sp)
    6b84:	dfc00415 	stw	ra,16(sp)
    6b88:	2821883a 	mov	r16,r5
    6b8c:	9cc2b104 	addi	r19,r19,2756
    6b90:	2025883a 	mov	r18,r4
    6b94:	000eac80 	call	eac8 <__malloc_lock>
    6b98:	98800217 	ldw	r2,8(r19)
    6b9c:	14400117 	ldw	r17,4(r2)
    6ba0:	00bfff04 	movi	r2,-4
    6ba4:	88a2703a 	and	r17,r17,r2
    6ba8:	8c21c83a 	sub	r16,r17,r16
    6bac:	8403fbc4 	addi	r16,r16,4079
    6bb0:	8020d33a 	srli	r16,r16,12
    6bb4:	0083ffc4 	movi	r2,4095
    6bb8:	843fffc4 	addi	r16,r16,-1
    6bbc:	8020933a 	slli	r16,r16,12
    6bc0:	1400060e 	bge	r2,r16,6bdc <_malloc_trim_r+0x70>
    6bc4:	000b883a 	mov	r5,zero
    6bc8:	9009883a 	mov	r4,r18
    6bcc:	000278c0 	call	278c <_sbrk_r>
    6bd0:	98c00217 	ldw	r3,8(r19)
    6bd4:	1c47883a 	add	r3,r3,r17
    6bd8:	10c00a26 	beq	r2,r3,6c04 <_malloc_trim_r+0x98>
    6bdc:	9009883a 	mov	r4,r18
    6be0:	000eacc0 	call	eacc <__malloc_unlock>
    6be4:	0005883a 	mov	r2,zero
    6be8:	dfc00417 	ldw	ra,16(sp)
    6bec:	dcc00317 	ldw	r19,12(sp)
    6bf0:	dc800217 	ldw	r18,8(sp)
    6bf4:	dc400117 	ldw	r17,4(sp)
    6bf8:	dc000017 	ldw	r16,0(sp)
    6bfc:	dec00504 	addi	sp,sp,20
    6c00:	f800283a 	ret
    6c04:	040bc83a 	sub	r5,zero,r16
    6c08:	9009883a 	mov	r4,r18
    6c0c:	000278c0 	call	278c <_sbrk_r>
    6c10:	00ffffc4 	movi	r3,-1
    6c14:	10c00d26 	beq	r2,r3,6c4c <_malloc_trim_r+0xe0>
    6c18:	00c00074 	movhi	r3,1
    6c1c:	18d04504 	addi	r3,r3,16660
    6c20:	18800017 	ldw	r2,0(r3)
    6c24:	99000217 	ldw	r4,8(r19)
    6c28:	8c23c83a 	sub	r17,r17,r16
    6c2c:	8c400054 	ori	r17,r17,1
    6c30:	1421c83a 	sub	r16,r2,r16
    6c34:	24400115 	stw	r17,4(r4)
    6c38:	9009883a 	mov	r4,r18
    6c3c:	1c000015 	stw	r16,0(r3)
    6c40:	000eacc0 	call	eacc <__malloc_unlock>
    6c44:	00800044 	movi	r2,1
    6c48:	003fe706 	br	6be8 <__alt_data_end+0xff006be8>
    6c4c:	000b883a 	mov	r5,zero
    6c50:	9009883a 	mov	r4,r18
    6c54:	000278c0 	call	278c <_sbrk_r>
    6c58:	99000217 	ldw	r4,8(r19)
    6c5c:	014003c4 	movi	r5,15
    6c60:	1107c83a 	sub	r3,r2,r4
    6c64:	28ffdd0e 	bge	r5,r3,6bdc <__alt_data_end+0xff006bdc>
    6c68:	01400074 	movhi	r5,1
    6c6c:	29495e04 	addi	r5,r5,9592
    6c70:	29400017 	ldw	r5,0(r5)
    6c74:	18c00054 	ori	r3,r3,1
    6c78:	20c00115 	stw	r3,4(r4)
    6c7c:	00c00074 	movhi	r3,1
    6c80:	1145c83a 	sub	r2,r2,r5
    6c84:	18d04504 	addi	r3,r3,16660
    6c88:	18800015 	stw	r2,0(r3)
    6c8c:	003fd306 	br	6bdc <__alt_data_end+0xff006bdc>

00006c90 <_free_r>:
    6c90:	28004126 	beq	r5,zero,6d98 <_free_r+0x108>
    6c94:	defffd04 	addi	sp,sp,-12
    6c98:	dc400115 	stw	r17,4(sp)
    6c9c:	dc000015 	stw	r16,0(sp)
    6ca0:	2023883a 	mov	r17,r4
    6ca4:	2821883a 	mov	r16,r5
    6ca8:	dfc00215 	stw	ra,8(sp)
    6cac:	000eac80 	call	eac8 <__malloc_lock>
    6cb0:	81ffff17 	ldw	r7,-4(r16)
    6cb4:	00bfff84 	movi	r2,-2
    6cb8:	01000074 	movhi	r4,1
    6cbc:	81bffe04 	addi	r6,r16,-8
    6cc0:	3884703a 	and	r2,r7,r2
    6cc4:	2102b104 	addi	r4,r4,2756
    6cc8:	308b883a 	add	r5,r6,r2
    6ccc:	2a400117 	ldw	r9,4(r5)
    6cd0:	22000217 	ldw	r8,8(r4)
    6cd4:	00ffff04 	movi	r3,-4
    6cd8:	48c6703a 	and	r3,r9,r3
    6cdc:	2a005726 	beq	r5,r8,6e3c <_free_r+0x1ac>
    6ce0:	28c00115 	stw	r3,4(r5)
    6ce4:	39c0004c 	andi	r7,r7,1
    6ce8:	3800091e 	bne	r7,zero,6d10 <_free_r+0x80>
    6cec:	823ffe17 	ldw	r8,-8(r16)
    6cf0:	22400204 	addi	r9,r4,8
    6cf4:	320dc83a 	sub	r6,r6,r8
    6cf8:	31c00217 	ldw	r7,8(r6)
    6cfc:	1205883a 	add	r2,r2,r8
    6d00:	3a406526 	beq	r7,r9,6e98 <_free_r+0x208>
    6d04:	32000317 	ldw	r8,12(r6)
    6d08:	3a000315 	stw	r8,12(r7)
    6d0c:	41c00215 	stw	r7,8(r8)
    6d10:	28cf883a 	add	r7,r5,r3
    6d14:	39c00117 	ldw	r7,4(r7)
    6d18:	39c0004c 	andi	r7,r7,1
    6d1c:	38003a26 	beq	r7,zero,6e08 <_free_r+0x178>
    6d20:	10c00054 	ori	r3,r2,1
    6d24:	30c00115 	stw	r3,4(r6)
    6d28:	3087883a 	add	r3,r6,r2
    6d2c:	18800015 	stw	r2,0(r3)
    6d30:	00c07fc4 	movi	r3,511
    6d34:	18801936 	bltu	r3,r2,6d9c <_free_r+0x10c>
    6d38:	1004d0fa 	srli	r2,r2,3
    6d3c:	01c00044 	movi	r7,1
    6d40:	21400117 	ldw	r5,4(r4)
    6d44:	10c00044 	addi	r3,r2,1
    6d48:	18c7883a 	add	r3,r3,r3
    6d4c:	1005d0ba 	srai	r2,r2,2
    6d50:	18c7883a 	add	r3,r3,r3
    6d54:	18c7883a 	add	r3,r3,r3
    6d58:	1907883a 	add	r3,r3,r4
    6d5c:	3884983a 	sll	r2,r7,r2
    6d60:	19c00017 	ldw	r7,0(r3)
    6d64:	1a3ffe04 	addi	r8,r3,-8
    6d68:	1144b03a 	or	r2,r2,r5
    6d6c:	32000315 	stw	r8,12(r6)
    6d70:	31c00215 	stw	r7,8(r6)
    6d74:	20800115 	stw	r2,4(r4)
    6d78:	19800015 	stw	r6,0(r3)
    6d7c:	39800315 	stw	r6,12(r7)
    6d80:	8809883a 	mov	r4,r17
    6d84:	dfc00217 	ldw	ra,8(sp)
    6d88:	dc400117 	ldw	r17,4(sp)
    6d8c:	dc000017 	ldw	r16,0(sp)
    6d90:	dec00304 	addi	sp,sp,12
    6d94:	000eacc1 	jmpi	eacc <__malloc_unlock>
    6d98:	f800283a 	ret
    6d9c:	100ad27a 	srli	r5,r2,9
    6da0:	00c00104 	movi	r3,4
    6da4:	19404a36 	bltu	r3,r5,6ed0 <_free_r+0x240>
    6da8:	100ad1ba 	srli	r5,r2,6
    6dac:	28c00e44 	addi	r3,r5,57
    6db0:	18c7883a 	add	r3,r3,r3
    6db4:	29400e04 	addi	r5,r5,56
    6db8:	18c7883a 	add	r3,r3,r3
    6dbc:	18c7883a 	add	r3,r3,r3
    6dc0:	1909883a 	add	r4,r3,r4
    6dc4:	20c00017 	ldw	r3,0(r4)
    6dc8:	01c00074 	movhi	r7,1
    6dcc:	213ffe04 	addi	r4,r4,-8
    6dd0:	39c2b104 	addi	r7,r7,2756
    6dd4:	20c04426 	beq	r4,r3,6ee8 <_free_r+0x258>
    6dd8:	01ffff04 	movi	r7,-4
    6ddc:	19400117 	ldw	r5,4(r3)
    6de0:	29ca703a 	and	r5,r5,r7
    6de4:	1140022e 	bgeu	r2,r5,6df0 <_free_r+0x160>
    6de8:	18c00217 	ldw	r3,8(r3)
    6dec:	20fffb1e 	bne	r4,r3,6ddc <__alt_data_end+0xff006ddc>
    6df0:	19000317 	ldw	r4,12(r3)
    6df4:	31000315 	stw	r4,12(r6)
    6df8:	30c00215 	stw	r3,8(r6)
    6dfc:	21800215 	stw	r6,8(r4)
    6e00:	19800315 	stw	r6,12(r3)
    6e04:	003fde06 	br	6d80 <__alt_data_end+0xff006d80>
    6e08:	29c00217 	ldw	r7,8(r5)
    6e0c:	10c5883a 	add	r2,r2,r3
    6e10:	00c00074 	movhi	r3,1
    6e14:	18c2b304 	addi	r3,r3,2764
    6e18:	38c03b26 	beq	r7,r3,6f08 <_free_r+0x278>
    6e1c:	2a000317 	ldw	r8,12(r5)
    6e20:	11400054 	ori	r5,r2,1
    6e24:	3087883a 	add	r3,r6,r2
    6e28:	3a000315 	stw	r8,12(r7)
    6e2c:	41c00215 	stw	r7,8(r8)
    6e30:	31400115 	stw	r5,4(r6)
    6e34:	18800015 	stw	r2,0(r3)
    6e38:	003fbd06 	br	6d30 <__alt_data_end+0xff006d30>
    6e3c:	39c0004c 	andi	r7,r7,1
    6e40:	10c5883a 	add	r2,r2,r3
    6e44:	3800071e 	bne	r7,zero,6e64 <_free_r+0x1d4>
    6e48:	81fffe17 	ldw	r7,-8(r16)
    6e4c:	31cdc83a 	sub	r6,r6,r7
    6e50:	30c00317 	ldw	r3,12(r6)
    6e54:	31400217 	ldw	r5,8(r6)
    6e58:	11c5883a 	add	r2,r2,r7
    6e5c:	28c00315 	stw	r3,12(r5)
    6e60:	19400215 	stw	r5,8(r3)
    6e64:	10c00054 	ori	r3,r2,1
    6e68:	30c00115 	stw	r3,4(r6)
    6e6c:	00c00074 	movhi	r3,1
    6e70:	18c95f04 	addi	r3,r3,9596
    6e74:	18c00017 	ldw	r3,0(r3)
    6e78:	21800215 	stw	r6,8(r4)
    6e7c:	10ffc036 	bltu	r2,r3,6d80 <__alt_data_end+0xff006d80>
    6e80:	00800074 	movhi	r2,1
    6e84:	10903704 	addi	r2,r2,16604
    6e88:	11400017 	ldw	r5,0(r2)
    6e8c:	8809883a 	mov	r4,r17
    6e90:	0006b6c0 	call	6b6c <_malloc_trim_r>
    6e94:	003fba06 	br	6d80 <__alt_data_end+0xff006d80>
    6e98:	28c9883a 	add	r4,r5,r3
    6e9c:	21000117 	ldw	r4,4(r4)
    6ea0:	2100004c 	andi	r4,r4,1
    6ea4:	2000391e 	bne	r4,zero,6f8c <_free_r+0x2fc>
    6ea8:	29c00217 	ldw	r7,8(r5)
    6eac:	29000317 	ldw	r4,12(r5)
    6eb0:	1885883a 	add	r2,r3,r2
    6eb4:	10c00054 	ori	r3,r2,1
    6eb8:	39000315 	stw	r4,12(r7)
    6ebc:	21c00215 	stw	r7,8(r4)
    6ec0:	30c00115 	stw	r3,4(r6)
    6ec4:	308d883a 	add	r6,r6,r2
    6ec8:	30800015 	stw	r2,0(r6)
    6ecc:	003fac06 	br	6d80 <__alt_data_end+0xff006d80>
    6ed0:	00c00504 	movi	r3,20
    6ed4:	19401536 	bltu	r3,r5,6f2c <_free_r+0x29c>
    6ed8:	28c01704 	addi	r3,r5,92
    6edc:	18c7883a 	add	r3,r3,r3
    6ee0:	294016c4 	addi	r5,r5,91
    6ee4:	003fb406 	br	6db8 <__alt_data_end+0xff006db8>
    6ee8:	280bd0ba 	srai	r5,r5,2
    6eec:	00c00044 	movi	r3,1
    6ef0:	38800117 	ldw	r2,4(r7)
    6ef4:	194a983a 	sll	r5,r3,r5
    6ef8:	2007883a 	mov	r3,r4
    6efc:	2884b03a 	or	r2,r5,r2
    6f00:	38800115 	stw	r2,4(r7)
    6f04:	003fbb06 	br	6df4 <__alt_data_end+0xff006df4>
    6f08:	21800515 	stw	r6,20(r4)
    6f0c:	21800415 	stw	r6,16(r4)
    6f10:	10c00054 	ori	r3,r2,1
    6f14:	31c00315 	stw	r7,12(r6)
    6f18:	31c00215 	stw	r7,8(r6)
    6f1c:	30c00115 	stw	r3,4(r6)
    6f20:	308d883a 	add	r6,r6,r2
    6f24:	30800015 	stw	r2,0(r6)
    6f28:	003f9506 	br	6d80 <__alt_data_end+0xff006d80>
    6f2c:	00c01504 	movi	r3,84
    6f30:	19400536 	bltu	r3,r5,6f48 <_free_r+0x2b8>
    6f34:	100ad33a 	srli	r5,r2,12
    6f38:	28c01bc4 	addi	r3,r5,111
    6f3c:	18c7883a 	add	r3,r3,r3
    6f40:	29401b84 	addi	r5,r5,110
    6f44:	003f9c06 	br	6db8 <__alt_data_end+0xff006db8>
    6f48:	00c05504 	movi	r3,340
    6f4c:	19400536 	bltu	r3,r5,6f64 <_free_r+0x2d4>
    6f50:	100ad3fa 	srli	r5,r2,15
    6f54:	28c01e04 	addi	r3,r5,120
    6f58:	18c7883a 	add	r3,r3,r3
    6f5c:	29401dc4 	addi	r5,r5,119
    6f60:	003f9506 	br	6db8 <__alt_data_end+0xff006db8>
    6f64:	00c15504 	movi	r3,1364
    6f68:	19400536 	bltu	r3,r5,6f80 <_free_r+0x2f0>
    6f6c:	100ad4ba 	srli	r5,r2,18
    6f70:	28c01f44 	addi	r3,r5,125
    6f74:	18c7883a 	add	r3,r3,r3
    6f78:	29401f04 	addi	r5,r5,124
    6f7c:	003f8e06 	br	6db8 <__alt_data_end+0xff006db8>
    6f80:	00c03f84 	movi	r3,254
    6f84:	01401f84 	movi	r5,126
    6f88:	003f8b06 	br	6db8 <__alt_data_end+0xff006db8>
    6f8c:	10c00054 	ori	r3,r2,1
    6f90:	30c00115 	stw	r3,4(r6)
    6f94:	308d883a 	add	r6,r6,r2
    6f98:	30800015 	stw	r2,0(r6)
    6f9c:	003f7806 	br	6d80 <__alt_data_end+0xff006d80>

00006fa0 <__sfvwrite_r>:
    6fa0:	30800217 	ldw	r2,8(r6)
    6fa4:	10006726 	beq	r2,zero,7144 <__sfvwrite_r+0x1a4>
    6fa8:	28c0030b 	ldhu	r3,12(r5)
    6fac:	defff404 	addi	sp,sp,-48
    6fb0:	dd400715 	stw	r21,28(sp)
    6fb4:	dd000615 	stw	r20,24(sp)
    6fb8:	dc000215 	stw	r16,8(sp)
    6fbc:	dfc00b15 	stw	ra,44(sp)
    6fc0:	df000a15 	stw	fp,40(sp)
    6fc4:	ddc00915 	stw	r23,36(sp)
    6fc8:	dd800815 	stw	r22,32(sp)
    6fcc:	dcc00515 	stw	r19,20(sp)
    6fd0:	dc800415 	stw	r18,16(sp)
    6fd4:	dc400315 	stw	r17,12(sp)
    6fd8:	1880020c 	andi	r2,r3,8
    6fdc:	2821883a 	mov	r16,r5
    6fe0:	202b883a 	mov	r21,r4
    6fe4:	3029883a 	mov	r20,r6
    6fe8:	10002726 	beq	r2,zero,7088 <__sfvwrite_r+0xe8>
    6fec:	28800417 	ldw	r2,16(r5)
    6ff0:	10002526 	beq	r2,zero,7088 <__sfvwrite_r+0xe8>
    6ff4:	1880008c 	andi	r2,r3,2
    6ff8:	a4400017 	ldw	r17,0(r20)
    6ffc:	10002a26 	beq	r2,zero,70a8 <__sfvwrite_r+0x108>
    7000:	05a00034 	movhi	r22,32768
    7004:	0027883a 	mov	r19,zero
    7008:	0025883a 	mov	r18,zero
    700c:	b5bf0004 	addi	r22,r22,-1024
    7010:	980d883a 	mov	r6,r19
    7014:	a809883a 	mov	r4,r21
    7018:	90004626 	beq	r18,zero,7134 <__sfvwrite_r+0x194>
    701c:	900f883a 	mov	r7,r18
    7020:	b480022e 	bgeu	r22,r18,702c <__sfvwrite_r+0x8c>
    7024:	01e00034 	movhi	r7,32768
    7028:	39ff0004 	addi	r7,r7,-1024
    702c:	80800917 	ldw	r2,36(r16)
    7030:	81400717 	ldw	r5,28(r16)
    7034:	103ee83a 	callr	r2
    7038:	0080570e 	bge	zero,r2,7198 <__sfvwrite_r+0x1f8>
    703c:	a0c00217 	ldw	r3,8(r20)
    7040:	98a7883a 	add	r19,r19,r2
    7044:	90a5c83a 	sub	r18,r18,r2
    7048:	1885c83a 	sub	r2,r3,r2
    704c:	a0800215 	stw	r2,8(r20)
    7050:	103fef1e 	bne	r2,zero,7010 <__alt_data_end+0xff007010>
    7054:	0005883a 	mov	r2,zero
    7058:	dfc00b17 	ldw	ra,44(sp)
    705c:	df000a17 	ldw	fp,40(sp)
    7060:	ddc00917 	ldw	r23,36(sp)
    7064:	dd800817 	ldw	r22,32(sp)
    7068:	dd400717 	ldw	r21,28(sp)
    706c:	dd000617 	ldw	r20,24(sp)
    7070:	dcc00517 	ldw	r19,20(sp)
    7074:	dc800417 	ldw	r18,16(sp)
    7078:	dc400317 	ldw	r17,12(sp)
    707c:	dc000217 	ldw	r16,8(sp)
    7080:	dec00c04 	addi	sp,sp,48
    7084:	f800283a 	ret
    7088:	800b883a 	mov	r5,r16
    708c:	a809883a 	mov	r4,r21
    7090:	0004b480 	call	4b48 <__swsetup_r>
    7094:	1000eb1e 	bne	r2,zero,7444 <__sfvwrite_r+0x4a4>
    7098:	80c0030b 	ldhu	r3,12(r16)
    709c:	a4400017 	ldw	r17,0(r20)
    70a0:	1880008c 	andi	r2,r3,2
    70a4:	103fd61e 	bne	r2,zero,7000 <__alt_data_end+0xff007000>
    70a8:	1880004c 	andi	r2,r3,1
    70ac:	10003f1e 	bne	r2,zero,71ac <__sfvwrite_r+0x20c>
    70b0:	0039883a 	mov	fp,zero
    70b4:	0025883a 	mov	r18,zero
    70b8:	90001a26 	beq	r18,zero,7124 <__sfvwrite_r+0x184>
    70bc:	1880800c 	andi	r2,r3,512
    70c0:	84c00217 	ldw	r19,8(r16)
    70c4:	10002126 	beq	r2,zero,714c <__sfvwrite_r+0x1ac>
    70c8:	982f883a 	mov	r23,r19
    70cc:	94c09336 	bltu	r18,r19,731c <__sfvwrite_r+0x37c>
    70d0:	1881200c 	andi	r2,r3,1152
    70d4:	10009e1e 	bne	r2,zero,7350 <__sfvwrite_r+0x3b0>
    70d8:	81000017 	ldw	r4,0(r16)
    70dc:	b80d883a 	mov	r6,r23
    70e0:	e00b883a 	mov	r5,fp
    70e4:	0007aa80 	call	7aa8 <memmove>
    70e8:	80c00217 	ldw	r3,8(r16)
    70ec:	81000017 	ldw	r4,0(r16)
    70f0:	9005883a 	mov	r2,r18
    70f4:	1ce7c83a 	sub	r19,r3,r19
    70f8:	25cf883a 	add	r7,r4,r23
    70fc:	84c00215 	stw	r19,8(r16)
    7100:	81c00015 	stw	r7,0(r16)
    7104:	a0c00217 	ldw	r3,8(r20)
    7108:	e0b9883a 	add	fp,fp,r2
    710c:	90a5c83a 	sub	r18,r18,r2
    7110:	18a7c83a 	sub	r19,r3,r2
    7114:	a4c00215 	stw	r19,8(r20)
    7118:	983fce26 	beq	r19,zero,7054 <__alt_data_end+0xff007054>
    711c:	80c0030b 	ldhu	r3,12(r16)
    7120:	903fe61e 	bne	r18,zero,70bc <__alt_data_end+0xff0070bc>
    7124:	8f000017 	ldw	fp,0(r17)
    7128:	8c800117 	ldw	r18,4(r17)
    712c:	8c400204 	addi	r17,r17,8
    7130:	003fe106 	br	70b8 <__alt_data_end+0xff0070b8>
    7134:	8cc00017 	ldw	r19,0(r17)
    7138:	8c800117 	ldw	r18,4(r17)
    713c:	8c400204 	addi	r17,r17,8
    7140:	003fb306 	br	7010 <__alt_data_end+0xff007010>
    7144:	0005883a 	mov	r2,zero
    7148:	f800283a 	ret
    714c:	81000017 	ldw	r4,0(r16)
    7150:	80800417 	ldw	r2,16(r16)
    7154:	11005736 	bltu	r2,r4,72b4 <__sfvwrite_r+0x314>
    7158:	85c00517 	ldw	r23,20(r16)
    715c:	95c05536 	bltu	r18,r23,72b4 <__sfvwrite_r+0x314>
    7160:	00a00034 	movhi	r2,32768
    7164:	10bfffc4 	addi	r2,r2,-1
    7168:	9009883a 	mov	r4,r18
    716c:	1480012e 	bgeu	r2,r18,7174 <__sfvwrite_r+0x1d4>
    7170:	1009883a 	mov	r4,r2
    7174:	b80b883a 	mov	r5,r23
    7178:	000bf440 	call	bf44 <__divsi3>
    717c:	15cf383a 	mul	r7,r2,r23
    7180:	81400717 	ldw	r5,28(r16)
    7184:	80800917 	ldw	r2,36(r16)
    7188:	e00d883a 	mov	r6,fp
    718c:	a809883a 	mov	r4,r21
    7190:	103ee83a 	callr	r2
    7194:	00bfdb16 	blt	zero,r2,7104 <__alt_data_end+0xff007104>
    7198:	8080030b 	ldhu	r2,12(r16)
    719c:	10801014 	ori	r2,r2,64
    71a0:	8080030d 	sth	r2,12(r16)
    71a4:	00bfffc4 	movi	r2,-1
    71a8:	003fab06 	br	7058 <__alt_data_end+0xff007058>
    71ac:	0027883a 	mov	r19,zero
    71b0:	0011883a 	mov	r8,zero
    71b4:	0039883a 	mov	fp,zero
    71b8:	0025883a 	mov	r18,zero
    71bc:	90001f26 	beq	r18,zero,723c <__sfvwrite_r+0x29c>
    71c0:	40005a26 	beq	r8,zero,732c <__sfvwrite_r+0x38c>
    71c4:	982d883a 	mov	r22,r19
    71c8:	94c0012e 	bgeu	r18,r19,71d0 <__sfvwrite_r+0x230>
    71cc:	902d883a 	mov	r22,r18
    71d0:	81000017 	ldw	r4,0(r16)
    71d4:	80800417 	ldw	r2,16(r16)
    71d8:	b02f883a 	mov	r23,r22
    71dc:	81c00517 	ldw	r7,20(r16)
    71e0:	1100032e 	bgeu	r2,r4,71f0 <__sfvwrite_r+0x250>
    71e4:	80c00217 	ldw	r3,8(r16)
    71e8:	38c7883a 	add	r3,r7,r3
    71ec:	1d801816 	blt	r3,r22,7250 <__sfvwrite_r+0x2b0>
    71f0:	b1c03e16 	blt	r22,r7,72ec <__sfvwrite_r+0x34c>
    71f4:	80800917 	ldw	r2,36(r16)
    71f8:	81400717 	ldw	r5,28(r16)
    71fc:	e00d883a 	mov	r6,fp
    7200:	da000115 	stw	r8,4(sp)
    7204:	a809883a 	mov	r4,r21
    7208:	103ee83a 	callr	r2
    720c:	102f883a 	mov	r23,r2
    7210:	da000117 	ldw	r8,4(sp)
    7214:	00bfe00e 	bge	zero,r2,7198 <__alt_data_end+0xff007198>
    7218:	9de7c83a 	sub	r19,r19,r23
    721c:	98001f26 	beq	r19,zero,729c <__sfvwrite_r+0x2fc>
    7220:	a0800217 	ldw	r2,8(r20)
    7224:	e5f9883a 	add	fp,fp,r23
    7228:	95e5c83a 	sub	r18,r18,r23
    722c:	15efc83a 	sub	r23,r2,r23
    7230:	a5c00215 	stw	r23,8(r20)
    7234:	b83f8726 	beq	r23,zero,7054 <__alt_data_end+0xff007054>
    7238:	903fe11e 	bne	r18,zero,71c0 <__alt_data_end+0xff0071c0>
    723c:	8f000017 	ldw	fp,0(r17)
    7240:	8c800117 	ldw	r18,4(r17)
    7244:	0011883a 	mov	r8,zero
    7248:	8c400204 	addi	r17,r17,8
    724c:	003fdb06 	br	71bc <__alt_data_end+0xff0071bc>
    7250:	180d883a 	mov	r6,r3
    7254:	e00b883a 	mov	r5,fp
    7258:	da000115 	stw	r8,4(sp)
    725c:	d8c00015 	stw	r3,0(sp)
    7260:	0007aa80 	call	7aa8 <memmove>
    7264:	d8c00017 	ldw	r3,0(sp)
    7268:	80800017 	ldw	r2,0(r16)
    726c:	800b883a 	mov	r5,r16
    7270:	a809883a 	mov	r4,r21
    7274:	10c5883a 	add	r2,r2,r3
    7278:	80800015 	stw	r2,0(r16)
    727c:	d8c00015 	stw	r3,0(sp)
    7280:	00067400 	call	6740 <_fflush_r>
    7284:	d8c00017 	ldw	r3,0(sp)
    7288:	da000117 	ldw	r8,4(sp)
    728c:	103fc21e 	bne	r2,zero,7198 <__alt_data_end+0xff007198>
    7290:	182f883a 	mov	r23,r3
    7294:	9de7c83a 	sub	r19,r19,r23
    7298:	983fe11e 	bne	r19,zero,7220 <__alt_data_end+0xff007220>
    729c:	800b883a 	mov	r5,r16
    72a0:	a809883a 	mov	r4,r21
    72a4:	00067400 	call	6740 <_fflush_r>
    72a8:	103fbb1e 	bne	r2,zero,7198 <__alt_data_end+0xff007198>
    72ac:	0011883a 	mov	r8,zero
    72b0:	003fdb06 	br	7220 <__alt_data_end+0xff007220>
    72b4:	94c0012e 	bgeu	r18,r19,72bc <__sfvwrite_r+0x31c>
    72b8:	9027883a 	mov	r19,r18
    72bc:	980d883a 	mov	r6,r19
    72c0:	e00b883a 	mov	r5,fp
    72c4:	0007aa80 	call	7aa8 <memmove>
    72c8:	80800217 	ldw	r2,8(r16)
    72cc:	80c00017 	ldw	r3,0(r16)
    72d0:	14c5c83a 	sub	r2,r2,r19
    72d4:	1cc7883a 	add	r3,r3,r19
    72d8:	80800215 	stw	r2,8(r16)
    72dc:	80c00015 	stw	r3,0(r16)
    72e0:	10004326 	beq	r2,zero,73f0 <__sfvwrite_r+0x450>
    72e4:	9805883a 	mov	r2,r19
    72e8:	003f8606 	br	7104 <__alt_data_end+0xff007104>
    72ec:	b00d883a 	mov	r6,r22
    72f0:	e00b883a 	mov	r5,fp
    72f4:	da000115 	stw	r8,4(sp)
    72f8:	0007aa80 	call	7aa8 <memmove>
    72fc:	80800217 	ldw	r2,8(r16)
    7300:	80c00017 	ldw	r3,0(r16)
    7304:	da000117 	ldw	r8,4(sp)
    7308:	1585c83a 	sub	r2,r2,r22
    730c:	1dad883a 	add	r22,r3,r22
    7310:	80800215 	stw	r2,8(r16)
    7314:	85800015 	stw	r22,0(r16)
    7318:	003fbf06 	br	7218 <__alt_data_end+0xff007218>
    731c:	81000017 	ldw	r4,0(r16)
    7320:	9027883a 	mov	r19,r18
    7324:	902f883a 	mov	r23,r18
    7328:	003f6c06 	br	70dc <__alt_data_end+0xff0070dc>
    732c:	900d883a 	mov	r6,r18
    7330:	01400284 	movi	r5,10
    7334:	e009883a 	mov	r4,fp
    7338:	000787c0 	call	787c <memchr>
    733c:	10003e26 	beq	r2,zero,7438 <__sfvwrite_r+0x498>
    7340:	10800044 	addi	r2,r2,1
    7344:	1727c83a 	sub	r19,r2,fp
    7348:	02000044 	movi	r8,1
    734c:	003f9d06 	br	71c4 <__alt_data_end+0xff0071c4>
    7350:	80800517 	ldw	r2,20(r16)
    7354:	81400417 	ldw	r5,16(r16)
    7358:	81c00017 	ldw	r7,0(r16)
    735c:	10a7883a 	add	r19,r2,r2
    7360:	9885883a 	add	r2,r19,r2
    7364:	1026d7fa 	srli	r19,r2,31
    7368:	396dc83a 	sub	r22,r7,r5
    736c:	b1000044 	addi	r4,r22,1
    7370:	9885883a 	add	r2,r19,r2
    7374:	1027d07a 	srai	r19,r2,1
    7378:	2485883a 	add	r2,r4,r18
    737c:	980d883a 	mov	r6,r19
    7380:	9880022e 	bgeu	r19,r2,738c <__sfvwrite_r+0x3ec>
    7384:	1027883a 	mov	r19,r2
    7388:	100d883a 	mov	r6,r2
    738c:	18c1000c 	andi	r3,r3,1024
    7390:	18001c26 	beq	r3,zero,7404 <__sfvwrite_r+0x464>
    7394:	300b883a 	mov	r5,r6
    7398:	a809883a 	mov	r4,r21
    739c:	0001e400 	call	1e40 <_malloc_r>
    73a0:	102f883a 	mov	r23,r2
    73a4:	10002926 	beq	r2,zero,744c <__sfvwrite_r+0x4ac>
    73a8:	81400417 	ldw	r5,16(r16)
    73ac:	b00d883a 	mov	r6,r22
    73b0:	1009883a 	mov	r4,r2
    73b4:	00079600 	call	7960 <memcpy>
    73b8:	8080030b 	ldhu	r2,12(r16)
    73bc:	00fedfc4 	movi	r3,-1153
    73c0:	10c4703a 	and	r2,r2,r3
    73c4:	10802014 	ori	r2,r2,128
    73c8:	8080030d 	sth	r2,12(r16)
    73cc:	bd89883a 	add	r4,r23,r22
    73d0:	9d8fc83a 	sub	r7,r19,r22
    73d4:	85c00415 	stw	r23,16(r16)
    73d8:	84c00515 	stw	r19,20(r16)
    73dc:	81000015 	stw	r4,0(r16)
    73e0:	9027883a 	mov	r19,r18
    73e4:	81c00215 	stw	r7,8(r16)
    73e8:	902f883a 	mov	r23,r18
    73ec:	003f3b06 	br	70dc <__alt_data_end+0xff0070dc>
    73f0:	800b883a 	mov	r5,r16
    73f4:	a809883a 	mov	r4,r21
    73f8:	00067400 	call	6740 <_fflush_r>
    73fc:	103fb926 	beq	r2,zero,72e4 <__alt_data_end+0xff0072e4>
    7400:	003f6506 	br	7198 <__alt_data_end+0xff007198>
    7404:	a809883a 	mov	r4,r21
    7408:	0008d280 	call	8d28 <_realloc_r>
    740c:	102f883a 	mov	r23,r2
    7410:	103fee1e 	bne	r2,zero,73cc <__alt_data_end+0xff0073cc>
    7414:	81400417 	ldw	r5,16(r16)
    7418:	a809883a 	mov	r4,r21
    741c:	0006c900 	call	6c90 <_free_r>
    7420:	8080030b 	ldhu	r2,12(r16)
    7424:	00ffdfc4 	movi	r3,-129
    7428:	1884703a 	and	r2,r3,r2
    742c:	00c00304 	movi	r3,12
    7430:	a8c00015 	stw	r3,0(r21)
    7434:	003f5906 	br	719c <__alt_data_end+0xff00719c>
    7438:	94c00044 	addi	r19,r18,1
    743c:	02000044 	movi	r8,1
    7440:	003f6006 	br	71c4 <__alt_data_end+0xff0071c4>
    7444:	00bfffc4 	movi	r2,-1
    7448:	003f0306 	br	7058 <__alt_data_end+0xff007058>
    744c:	00800304 	movi	r2,12
    7450:	a8800015 	stw	r2,0(r21)
    7454:	8080030b 	ldhu	r2,12(r16)
    7458:	003f5006 	br	719c <__alt_data_end+0xff00719c>

0000745c <_fwalk>:
    745c:	defff704 	addi	sp,sp,-36
    7460:	dd000415 	stw	r20,16(sp)
    7464:	dfc00815 	stw	ra,32(sp)
    7468:	ddc00715 	stw	r23,28(sp)
    746c:	dd800615 	stw	r22,24(sp)
    7470:	dd400515 	stw	r21,20(sp)
    7474:	dcc00315 	stw	r19,12(sp)
    7478:	dc800215 	stw	r18,8(sp)
    747c:	dc400115 	stw	r17,4(sp)
    7480:	dc000015 	stw	r16,0(sp)
    7484:	2500b804 	addi	r20,r4,736
    7488:	a0002326 	beq	r20,zero,7518 <_fwalk+0xbc>
    748c:	282b883a 	mov	r21,r5
    7490:	002f883a 	mov	r23,zero
    7494:	05800044 	movi	r22,1
    7498:	04ffffc4 	movi	r19,-1
    749c:	a4400117 	ldw	r17,4(r20)
    74a0:	a4800217 	ldw	r18,8(r20)
    74a4:	8c7fffc4 	addi	r17,r17,-1
    74a8:	88000d16 	blt	r17,zero,74e0 <_fwalk+0x84>
    74ac:	94000304 	addi	r16,r18,12
    74b0:	94800384 	addi	r18,r18,14
    74b4:	8080000b 	ldhu	r2,0(r16)
    74b8:	8c7fffc4 	addi	r17,r17,-1
    74bc:	813ffd04 	addi	r4,r16,-12
    74c0:	b080042e 	bgeu	r22,r2,74d4 <_fwalk+0x78>
    74c4:	9080000f 	ldh	r2,0(r18)
    74c8:	14c00226 	beq	r2,r19,74d4 <_fwalk+0x78>
    74cc:	a83ee83a 	callr	r21
    74d0:	b8aeb03a 	or	r23,r23,r2
    74d4:	84001a04 	addi	r16,r16,104
    74d8:	94801a04 	addi	r18,r18,104
    74dc:	8cfff51e 	bne	r17,r19,74b4 <__alt_data_end+0xff0074b4>
    74e0:	a5000017 	ldw	r20,0(r20)
    74e4:	a03fed1e 	bne	r20,zero,749c <__alt_data_end+0xff00749c>
    74e8:	b805883a 	mov	r2,r23
    74ec:	dfc00817 	ldw	ra,32(sp)
    74f0:	ddc00717 	ldw	r23,28(sp)
    74f4:	dd800617 	ldw	r22,24(sp)
    74f8:	dd400517 	ldw	r21,20(sp)
    74fc:	dd000417 	ldw	r20,16(sp)
    7500:	dcc00317 	ldw	r19,12(sp)
    7504:	dc800217 	ldw	r18,8(sp)
    7508:	dc400117 	ldw	r17,4(sp)
    750c:	dc000017 	ldw	r16,0(sp)
    7510:	dec00904 	addi	sp,sp,36
    7514:	f800283a 	ret
    7518:	002f883a 	mov	r23,zero
    751c:	003ff206 	br	74e8 <__alt_data_end+0xff0074e8>

00007520 <_fwalk_reent>:
    7520:	defff704 	addi	sp,sp,-36
    7524:	dd000415 	stw	r20,16(sp)
    7528:	dfc00815 	stw	ra,32(sp)
    752c:	ddc00715 	stw	r23,28(sp)
    7530:	dd800615 	stw	r22,24(sp)
    7534:	dd400515 	stw	r21,20(sp)
    7538:	dcc00315 	stw	r19,12(sp)
    753c:	dc800215 	stw	r18,8(sp)
    7540:	dc400115 	stw	r17,4(sp)
    7544:	dc000015 	stw	r16,0(sp)
    7548:	2500b804 	addi	r20,r4,736
    754c:	a0002326 	beq	r20,zero,75dc <_fwalk_reent+0xbc>
    7550:	282b883a 	mov	r21,r5
    7554:	2027883a 	mov	r19,r4
    7558:	002f883a 	mov	r23,zero
    755c:	05800044 	movi	r22,1
    7560:	04bfffc4 	movi	r18,-1
    7564:	a4400117 	ldw	r17,4(r20)
    7568:	a4000217 	ldw	r16,8(r20)
    756c:	8c7fffc4 	addi	r17,r17,-1
    7570:	88000c16 	blt	r17,zero,75a4 <_fwalk_reent+0x84>
    7574:	84000304 	addi	r16,r16,12
    7578:	8080000b 	ldhu	r2,0(r16)
    757c:	8c7fffc4 	addi	r17,r17,-1
    7580:	817ffd04 	addi	r5,r16,-12
    7584:	b080052e 	bgeu	r22,r2,759c <_fwalk_reent+0x7c>
    7588:	8080008f 	ldh	r2,2(r16)
    758c:	9809883a 	mov	r4,r19
    7590:	14800226 	beq	r2,r18,759c <_fwalk_reent+0x7c>
    7594:	a83ee83a 	callr	r21
    7598:	b8aeb03a 	or	r23,r23,r2
    759c:	84001a04 	addi	r16,r16,104
    75a0:	8cbff51e 	bne	r17,r18,7578 <__alt_data_end+0xff007578>
    75a4:	a5000017 	ldw	r20,0(r20)
    75a8:	a03fee1e 	bne	r20,zero,7564 <__alt_data_end+0xff007564>
    75ac:	b805883a 	mov	r2,r23
    75b0:	dfc00817 	ldw	ra,32(sp)
    75b4:	ddc00717 	ldw	r23,28(sp)
    75b8:	dd800617 	ldw	r22,24(sp)
    75bc:	dd400517 	ldw	r21,20(sp)
    75c0:	dd000417 	ldw	r20,16(sp)
    75c4:	dcc00317 	ldw	r19,12(sp)
    75c8:	dc800217 	ldw	r18,8(sp)
    75cc:	dc400117 	ldw	r17,4(sp)
    75d0:	dc000017 	ldw	r16,0(sp)
    75d4:	dec00904 	addi	sp,sp,36
    75d8:	f800283a 	ret
    75dc:	002f883a 	mov	r23,zero
    75e0:	003ff206 	br	75ac <__alt_data_end+0xff0075ac>

000075e4 <_setlocale_r>:
    75e4:	30001b26 	beq	r6,zero,7654 <_setlocale_r+0x70>
    75e8:	01400074 	movhi	r5,1
    75ec:	defffe04 	addi	sp,sp,-8
    75f0:	29421604 	addi	r5,r5,2136
    75f4:	3009883a 	mov	r4,r6
    75f8:	dc000015 	stw	r16,0(sp)
    75fc:	dfc00115 	stw	ra,4(sp)
    7600:	3021883a 	mov	r16,r6
    7604:	000943c0 	call	943c <strcmp>
    7608:	1000061e 	bne	r2,zero,7624 <_setlocale_r+0x40>
    760c:	00800074 	movhi	r2,1
    7610:	10821504 	addi	r2,r2,2132
    7614:	dfc00117 	ldw	ra,4(sp)
    7618:	dc000017 	ldw	r16,0(sp)
    761c:	dec00204 	addi	sp,sp,8
    7620:	f800283a 	ret
    7624:	01400074 	movhi	r5,1
    7628:	29421504 	addi	r5,r5,2132
    762c:	8009883a 	mov	r4,r16
    7630:	000943c0 	call	943c <strcmp>
    7634:	103ff526 	beq	r2,zero,760c <__alt_data_end+0xff00760c>
    7638:	01400074 	movhi	r5,1
    763c:	29420004 	addi	r5,r5,2048
    7640:	8009883a 	mov	r4,r16
    7644:	000943c0 	call	943c <strcmp>
    7648:	103ff026 	beq	r2,zero,760c <__alt_data_end+0xff00760c>
    764c:	0005883a 	mov	r2,zero
    7650:	003ff006 	br	7614 <__alt_data_end+0xff007614>
    7654:	00800074 	movhi	r2,1
    7658:	10821504 	addi	r2,r2,2132
    765c:	f800283a 	ret

00007660 <__locale_charset>:
    7660:	00800074 	movhi	r2,1
    7664:	1084c404 	addi	r2,r2,4880
    7668:	f800283a 	ret

0000766c <__locale_mb_cur_max>:
    766c:	00800074 	movhi	r2,1
    7670:	10896204 	addi	r2,r2,9608
    7674:	10800017 	ldw	r2,0(r2)
    7678:	f800283a 	ret

0000767c <__locale_msgcharset>:
    767c:	00800074 	movhi	r2,1
    7680:	1084bc04 	addi	r2,r2,4848
    7684:	f800283a 	ret

00007688 <__locale_cjk_lang>:
    7688:	0005883a 	mov	r2,zero
    768c:	f800283a 	ret

00007690 <_localeconv_r>:
    7690:	00800074 	movhi	r2,1
    7694:	1084cc04 	addi	r2,r2,4912
    7698:	f800283a 	ret

0000769c <setlocale>:
    769c:	00800074 	movhi	r2,1
    76a0:	10896104 	addi	r2,r2,9604
    76a4:	280d883a 	mov	r6,r5
    76a8:	200b883a 	mov	r5,r4
    76ac:	11000017 	ldw	r4,0(r2)
    76b0:	00075e41 	jmpi	75e4 <_setlocale_r>

000076b4 <localeconv>:
    76b4:	00800074 	movhi	r2,1
    76b8:	1084cc04 	addi	r2,r2,4912
    76bc:	f800283a 	ret

000076c0 <__smakebuf_r>:
    76c0:	2880030b 	ldhu	r2,12(r5)
    76c4:	10c0008c 	andi	r3,r2,2
    76c8:	1800411e 	bne	r3,zero,77d0 <__smakebuf_r+0x110>
    76cc:	deffec04 	addi	sp,sp,-80
    76d0:	dc000f15 	stw	r16,60(sp)
    76d4:	2821883a 	mov	r16,r5
    76d8:	2940038f 	ldh	r5,14(r5)
    76dc:	dc401015 	stw	r17,64(sp)
    76e0:	dfc01315 	stw	ra,76(sp)
    76e4:	dcc01215 	stw	r19,72(sp)
    76e8:	dc801115 	stw	r18,68(sp)
    76ec:	2023883a 	mov	r17,r4
    76f0:	28001c16 	blt	r5,zero,7764 <__smakebuf_r+0xa4>
    76f4:	d80d883a 	mov	r6,sp
    76f8:	000afe40 	call	afe4 <_fstat_r>
    76fc:	10001816 	blt	r2,zero,7760 <__smakebuf_r+0xa0>
    7700:	d8800117 	ldw	r2,4(sp)
    7704:	00e00014 	movui	r3,32768
    7708:	10bc000c 	andi	r2,r2,61440
    770c:	14c80020 	cmpeqi	r19,r2,8192
    7710:	10c03726 	beq	r2,r3,77f0 <__smakebuf_r+0x130>
    7714:	80c0030b 	ldhu	r3,12(r16)
    7718:	18c20014 	ori	r3,r3,2048
    771c:	80c0030d 	sth	r3,12(r16)
    7720:	00c80004 	movi	r3,8192
    7724:	10c0521e 	bne	r2,r3,7870 <__smakebuf_r+0x1b0>
    7728:	8140038f 	ldh	r5,14(r16)
    772c:	8809883a 	mov	r4,r17
    7730:	000b0400 	call	b040 <_isatty_r>
    7734:	10004c26 	beq	r2,zero,7868 <__smakebuf_r+0x1a8>
    7738:	8080030b 	ldhu	r2,12(r16)
    773c:	80c010c4 	addi	r3,r16,67
    7740:	80c00015 	stw	r3,0(r16)
    7744:	10800054 	ori	r2,r2,1
    7748:	8080030d 	sth	r2,12(r16)
    774c:	00800044 	movi	r2,1
    7750:	80c00415 	stw	r3,16(r16)
    7754:	80800515 	stw	r2,20(r16)
    7758:	04810004 	movi	r18,1024
    775c:	00000706 	br	777c <__smakebuf_r+0xbc>
    7760:	8080030b 	ldhu	r2,12(r16)
    7764:	10c0200c 	andi	r3,r2,128
    7768:	18001f1e 	bne	r3,zero,77e8 <__smakebuf_r+0x128>
    776c:	04810004 	movi	r18,1024
    7770:	10820014 	ori	r2,r2,2048
    7774:	8080030d 	sth	r2,12(r16)
    7778:	0027883a 	mov	r19,zero
    777c:	900b883a 	mov	r5,r18
    7780:	8809883a 	mov	r4,r17
    7784:	0001e400 	call	1e40 <_malloc_r>
    7788:	10002c26 	beq	r2,zero,783c <__smakebuf_r+0x17c>
    778c:	80c0030b 	ldhu	r3,12(r16)
    7790:	01000034 	movhi	r4,0
    7794:	2119f504 	addi	r4,r4,26580
    7798:	89000f15 	stw	r4,60(r17)
    779c:	18c02014 	ori	r3,r3,128
    77a0:	80c0030d 	sth	r3,12(r16)
    77a4:	80800015 	stw	r2,0(r16)
    77a8:	80800415 	stw	r2,16(r16)
    77ac:	84800515 	stw	r18,20(r16)
    77b0:	98001a1e 	bne	r19,zero,781c <__smakebuf_r+0x15c>
    77b4:	dfc01317 	ldw	ra,76(sp)
    77b8:	dcc01217 	ldw	r19,72(sp)
    77bc:	dc801117 	ldw	r18,68(sp)
    77c0:	dc401017 	ldw	r17,64(sp)
    77c4:	dc000f17 	ldw	r16,60(sp)
    77c8:	dec01404 	addi	sp,sp,80
    77cc:	f800283a 	ret
    77d0:	288010c4 	addi	r2,r5,67
    77d4:	28800015 	stw	r2,0(r5)
    77d8:	28800415 	stw	r2,16(r5)
    77dc:	00800044 	movi	r2,1
    77e0:	28800515 	stw	r2,20(r5)
    77e4:	f800283a 	ret
    77e8:	04801004 	movi	r18,64
    77ec:	003fe006 	br	7770 <__alt_data_end+0xff007770>
    77f0:	81000a17 	ldw	r4,40(r16)
    77f4:	00c00074 	movhi	r3,1
    77f8:	18e4f604 	addi	r3,r3,-27688
    77fc:	20ffc51e 	bne	r4,r3,7714 <__alt_data_end+0xff007714>
    7800:	8080030b 	ldhu	r2,12(r16)
    7804:	04810004 	movi	r18,1024
    7808:	84801315 	stw	r18,76(r16)
    780c:	1484b03a 	or	r2,r2,r18
    7810:	8080030d 	sth	r2,12(r16)
    7814:	0027883a 	mov	r19,zero
    7818:	003fd806 	br	777c <__alt_data_end+0xff00777c>
    781c:	8140038f 	ldh	r5,14(r16)
    7820:	8809883a 	mov	r4,r17
    7824:	000b0400 	call	b040 <_isatty_r>
    7828:	103fe226 	beq	r2,zero,77b4 <__alt_data_end+0xff0077b4>
    782c:	8080030b 	ldhu	r2,12(r16)
    7830:	10800054 	ori	r2,r2,1
    7834:	8080030d 	sth	r2,12(r16)
    7838:	003fde06 	br	77b4 <__alt_data_end+0xff0077b4>
    783c:	8080030b 	ldhu	r2,12(r16)
    7840:	10c0800c 	andi	r3,r2,512
    7844:	183fdb1e 	bne	r3,zero,77b4 <__alt_data_end+0xff0077b4>
    7848:	10800094 	ori	r2,r2,2
    784c:	80c010c4 	addi	r3,r16,67
    7850:	8080030d 	sth	r2,12(r16)
    7854:	00800044 	movi	r2,1
    7858:	80c00015 	stw	r3,0(r16)
    785c:	80c00415 	stw	r3,16(r16)
    7860:	80800515 	stw	r2,20(r16)
    7864:	003fd306 	br	77b4 <__alt_data_end+0xff0077b4>
    7868:	04810004 	movi	r18,1024
    786c:	003fc306 	br	777c <__alt_data_end+0xff00777c>
    7870:	0027883a 	mov	r19,zero
    7874:	04810004 	movi	r18,1024
    7878:	003fc006 	br	777c <__alt_data_end+0xff00777c>

0000787c <memchr>:
    787c:	208000cc 	andi	r2,r4,3
    7880:	280f883a 	mov	r7,r5
    7884:	10003426 	beq	r2,zero,7958 <memchr+0xdc>
    7888:	30bfffc4 	addi	r2,r6,-1
    788c:	30001a26 	beq	r6,zero,78f8 <memchr+0x7c>
    7890:	20c00003 	ldbu	r3,0(r4)
    7894:	29803fcc 	andi	r6,r5,255
    7898:	30c0051e 	bne	r6,r3,78b0 <memchr+0x34>
    789c:	00001806 	br	7900 <memchr+0x84>
    78a0:	10001526 	beq	r2,zero,78f8 <memchr+0x7c>
    78a4:	20c00003 	ldbu	r3,0(r4)
    78a8:	10bfffc4 	addi	r2,r2,-1
    78ac:	30c01426 	beq	r6,r3,7900 <memchr+0x84>
    78b0:	21000044 	addi	r4,r4,1
    78b4:	20c000cc 	andi	r3,r4,3
    78b8:	183ff91e 	bne	r3,zero,78a0 <__alt_data_end+0xff0078a0>
    78bc:	020000c4 	movi	r8,3
    78c0:	40801136 	bltu	r8,r2,7908 <memchr+0x8c>
    78c4:	10000c26 	beq	r2,zero,78f8 <memchr+0x7c>
    78c8:	20c00003 	ldbu	r3,0(r4)
    78cc:	29403fcc 	andi	r5,r5,255
    78d0:	28c00b26 	beq	r5,r3,7900 <memchr+0x84>
    78d4:	20c00044 	addi	r3,r4,1
    78d8:	39803fcc 	andi	r6,r7,255
    78dc:	2089883a 	add	r4,r4,r2
    78e0:	00000306 	br	78f0 <memchr+0x74>
    78e4:	18c00044 	addi	r3,r3,1
    78e8:	197fffc3 	ldbu	r5,-1(r3)
    78ec:	31400526 	beq	r6,r5,7904 <memchr+0x88>
    78f0:	1805883a 	mov	r2,r3
    78f4:	20fffb1e 	bne	r4,r3,78e4 <__alt_data_end+0xff0078e4>
    78f8:	0005883a 	mov	r2,zero
    78fc:	f800283a 	ret
    7900:	2005883a 	mov	r2,r4
    7904:	f800283a 	ret
    7908:	28c03fcc 	andi	r3,r5,255
    790c:	1812923a 	slli	r9,r3,8
    7910:	02ffbff4 	movhi	r11,65279
    7914:	02a02074 	movhi	r10,32897
    7918:	48d2b03a 	or	r9,r9,r3
    791c:	4806943a 	slli	r3,r9,16
    7920:	5affbfc4 	addi	r11,r11,-257
    7924:	52a02004 	addi	r10,r10,-32640
    7928:	48d2b03a 	or	r9,r9,r3
    792c:	20c00017 	ldw	r3,0(r4)
    7930:	48c6f03a 	xor	r3,r9,r3
    7934:	1acd883a 	add	r6,r3,r11
    7938:	00c6303a 	nor	r3,zero,r3
    793c:	30c6703a 	and	r3,r6,r3
    7940:	1a86703a 	and	r3,r3,r10
    7944:	183fe01e 	bne	r3,zero,78c8 <__alt_data_end+0xff0078c8>
    7948:	10bfff04 	addi	r2,r2,-4
    794c:	21000104 	addi	r4,r4,4
    7950:	40bff636 	bltu	r8,r2,792c <__alt_data_end+0xff00792c>
    7954:	003fdb06 	br	78c4 <__alt_data_end+0xff0078c4>
    7958:	3005883a 	mov	r2,r6
    795c:	003fd706 	br	78bc <__alt_data_end+0xff0078bc>

00007960 <memcpy>:
    7960:	defffd04 	addi	sp,sp,-12
    7964:	dfc00215 	stw	ra,8(sp)
    7968:	dc400115 	stw	r17,4(sp)
    796c:	dc000015 	stw	r16,0(sp)
    7970:	00c003c4 	movi	r3,15
    7974:	2005883a 	mov	r2,r4
    7978:	1980452e 	bgeu	r3,r6,7a90 <memcpy+0x130>
    797c:	2906b03a 	or	r3,r5,r4
    7980:	18c000cc 	andi	r3,r3,3
    7984:	1800441e 	bne	r3,zero,7a98 <memcpy+0x138>
    7988:	347ffc04 	addi	r17,r6,-16
    798c:	8822d13a 	srli	r17,r17,4
    7990:	28c00104 	addi	r3,r5,4
    7994:	23400104 	addi	r13,r4,4
    7998:	8820913a 	slli	r16,r17,4
    799c:	2b000204 	addi	r12,r5,8
    79a0:	22c00204 	addi	r11,r4,8
    79a4:	84000504 	addi	r16,r16,20
    79a8:	2a800304 	addi	r10,r5,12
    79ac:	22400304 	addi	r9,r4,12
    79b0:	2c21883a 	add	r16,r5,r16
    79b4:	2811883a 	mov	r8,r5
    79b8:	200f883a 	mov	r7,r4
    79bc:	41000017 	ldw	r4,0(r8)
    79c0:	1fc00017 	ldw	ra,0(r3)
    79c4:	63c00017 	ldw	r15,0(r12)
    79c8:	39000015 	stw	r4,0(r7)
    79cc:	53800017 	ldw	r14,0(r10)
    79d0:	6fc00015 	stw	ra,0(r13)
    79d4:	5bc00015 	stw	r15,0(r11)
    79d8:	4b800015 	stw	r14,0(r9)
    79dc:	18c00404 	addi	r3,r3,16
    79e0:	39c00404 	addi	r7,r7,16
    79e4:	42000404 	addi	r8,r8,16
    79e8:	6b400404 	addi	r13,r13,16
    79ec:	63000404 	addi	r12,r12,16
    79f0:	5ac00404 	addi	r11,r11,16
    79f4:	52800404 	addi	r10,r10,16
    79f8:	4a400404 	addi	r9,r9,16
    79fc:	1c3fef1e 	bne	r3,r16,79bc <__alt_data_end+0xff0079bc>
    7a00:	89c00044 	addi	r7,r17,1
    7a04:	380e913a 	slli	r7,r7,4
    7a08:	310003cc 	andi	r4,r6,15
    7a0c:	02c000c4 	movi	r11,3
    7a10:	11c7883a 	add	r3,r2,r7
    7a14:	29cb883a 	add	r5,r5,r7
    7a18:	5900212e 	bgeu	r11,r4,7aa0 <memcpy+0x140>
    7a1c:	1813883a 	mov	r9,r3
    7a20:	2811883a 	mov	r8,r5
    7a24:	200f883a 	mov	r7,r4
    7a28:	42800017 	ldw	r10,0(r8)
    7a2c:	4a400104 	addi	r9,r9,4
    7a30:	39ffff04 	addi	r7,r7,-4
    7a34:	4abfff15 	stw	r10,-4(r9)
    7a38:	42000104 	addi	r8,r8,4
    7a3c:	59fffa36 	bltu	r11,r7,7a28 <__alt_data_end+0xff007a28>
    7a40:	213fff04 	addi	r4,r4,-4
    7a44:	2008d0ba 	srli	r4,r4,2
    7a48:	318000cc 	andi	r6,r6,3
    7a4c:	21000044 	addi	r4,r4,1
    7a50:	2109883a 	add	r4,r4,r4
    7a54:	2109883a 	add	r4,r4,r4
    7a58:	1907883a 	add	r3,r3,r4
    7a5c:	290b883a 	add	r5,r5,r4
    7a60:	30000626 	beq	r6,zero,7a7c <memcpy+0x11c>
    7a64:	198d883a 	add	r6,r3,r6
    7a68:	29c00003 	ldbu	r7,0(r5)
    7a6c:	18c00044 	addi	r3,r3,1
    7a70:	29400044 	addi	r5,r5,1
    7a74:	19ffffc5 	stb	r7,-1(r3)
    7a78:	19bffb1e 	bne	r3,r6,7a68 <__alt_data_end+0xff007a68>
    7a7c:	dfc00217 	ldw	ra,8(sp)
    7a80:	dc400117 	ldw	r17,4(sp)
    7a84:	dc000017 	ldw	r16,0(sp)
    7a88:	dec00304 	addi	sp,sp,12
    7a8c:	f800283a 	ret
    7a90:	2007883a 	mov	r3,r4
    7a94:	003ff206 	br	7a60 <__alt_data_end+0xff007a60>
    7a98:	2007883a 	mov	r3,r4
    7a9c:	003ff106 	br	7a64 <__alt_data_end+0xff007a64>
    7aa0:	200d883a 	mov	r6,r4
    7aa4:	003fee06 	br	7a60 <__alt_data_end+0xff007a60>

00007aa8 <memmove>:
    7aa8:	2005883a 	mov	r2,r4
    7aac:	29000b2e 	bgeu	r5,r4,7adc <memmove+0x34>
    7ab0:	298f883a 	add	r7,r5,r6
    7ab4:	21c0092e 	bgeu	r4,r7,7adc <memmove+0x34>
    7ab8:	2187883a 	add	r3,r4,r6
    7abc:	198bc83a 	sub	r5,r3,r6
    7ac0:	30004826 	beq	r6,zero,7be4 <memmove+0x13c>
    7ac4:	39ffffc4 	addi	r7,r7,-1
    7ac8:	39000003 	ldbu	r4,0(r7)
    7acc:	18ffffc4 	addi	r3,r3,-1
    7ad0:	19000005 	stb	r4,0(r3)
    7ad4:	28fffb1e 	bne	r5,r3,7ac4 <__alt_data_end+0xff007ac4>
    7ad8:	f800283a 	ret
    7adc:	00c003c4 	movi	r3,15
    7ae0:	1980412e 	bgeu	r3,r6,7be8 <memmove+0x140>
    7ae4:	2886b03a 	or	r3,r5,r2
    7ae8:	18c000cc 	andi	r3,r3,3
    7aec:	1800401e 	bne	r3,zero,7bf0 <memmove+0x148>
    7af0:	33fffc04 	addi	r15,r6,-16
    7af4:	781ed13a 	srli	r15,r15,4
    7af8:	28c00104 	addi	r3,r5,4
    7afc:	13400104 	addi	r13,r2,4
    7b00:	781c913a 	slli	r14,r15,4
    7b04:	2b000204 	addi	r12,r5,8
    7b08:	12c00204 	addi	r11,r2,8
    7b0c:	73800504 	addi	r14,r14,20
    7b10:	2a800304 	addi	r10,r5,12
    7b14:	12400304 	addi	r9,r2,12
    7b18:	2b9d883a 	add	r14,r5,r14
    7b1c:	2811883a 	mov	r8,r5
    7b20:	100f883a 	mov	r7,r2
    7b24:	41000017 	ldw	r4,0(r8)
    7b28:	39c00404 	addi	r7,r7,16
    7b2c:	18c00404 	addi	r3,r3,16
    7b30:	393ffc15 	stw	r4,-16(r7)
    7b34:	193ffc17 	ldw	r4,-16(r3)
    7b38:	6b400404 	addi	r13,r13,16
    7b3c:	5ac00404 	addi	r11,r11,16
    7b40:	693ffc15 	stw	r4,-16(r13)
    7b44:	61000017 	ldw	r4,0(r12)
    7b48:	4a400404 	addi	r9,r9,16
    7b4c:	42000404 	addi	r8,r8,16
    7b50:	593ffc15 	stw	r4,-16(r11)
    7b54:	51000017 	ldw	r4,0(r10)
    7b58:	63000404 	addi	r12,r12,16
    7b5c:	52800404 	addi	r10,r10,16
    7b60:	493ffc15 	stw	r4,-16(r9)
    7b64:	1bbfef1e 	bne	r3,r14,7b24 <__alt_data_end+0xff007b24>
    7b68:	79000044 	addi	r4,r15,1
    7b6c:	2008913a 	slli	r4,r4,4
    7b70:	328003cc 	andi	r10,r6,15
    7b74:	02c000c4 	movi	r11,3
    7b78:	1107883a 	add	r3,r2,r4
    7b7c:	290b883a 	add	r5,r5,r4
    7b80:	5a801e2e 	bgeu	r11,r10,7bfc <memmove+0x154>
    7b84:	1813883a 	mov	r9,r3
    7b88:	2811883a 	mov	r8,r5
    7b8c:	500f883a 	mov	r7,r10
    7b90:	41000017 	ldw	r4,0(r8)
    7b94:	4a400104 	addi	r9,r9,4
    7b98:	39ffff04 	addi	r7,r7,-4
    7b9c:	493fff15 	stw	r4,-4(r9)
    7ba0:	42000104 	addi	r8,r8,4
    7ba4:	59fffa36 	bltu	r11,r7,7b90 <__alt_data_end+0xff007b90>
    7ba8:	513fff04 	addi	r4,r10,-4
    7bac:	2008d0ba 	srli	r4,r4,2
    7bb0:	318000cc 	andi	r6,r6,3
    7bb4:	21000044 	addi	r4,r4,1
    7bb8:	2109883a 	add	r4,r4,r4
    7bbc:	2109883a 	add	r4,r4,r4
    7bc0:	1907883a 	add	r3,r3,r4
    7bc4:	290b883a 	add	r5,r5,r4
    7bc8:	30000b26 	beq	r6,zero,7bf8 <memmove+0x150>
    7bcc:	198d883a 	add	r6,r3,r6
    7bd0:	29c00003 	ldbu	r7,0(r5)
    7bd4:	18c00044 	addi	r3,r3,1
    7bd8:	29400044 	addi	r5,r5,1
    7bdc:	19ffffc5 	stb	r7,-1(r3)
    7be0:	19bffb1e 	bne	r3,r6,7bd0 <__alt_data_end+0xff007bd0>
    7be4:	f800283a 	ret
    7be8:	1007883a 	mov	r3,r2
    7bec:	003ff606 	br	7bc8 <__alt_data_end+0xff007bc8>
    7bf0:	1007883a 	mov	r3,r2
    7bf4:	003ff506 	br	7bcc <__alt_data_end+0xff007bcc>
    7bf8:	f800283a 	ret
    7bfc:	500d883a 	mov	r6,r10
    7c00:	003ff106 	br	7bc8 <__alt_data_end+0xff007bc8>

00007c04 <memset>:
    7c04:	20c000cc 	andi	r3,r4,3
    7c08:	2005883a 	mov	r2,r4
    7c0c:	18004426 	beq	r3,zero,7d20 <memset+0x11c>
    7c10:	31ffffc4 	addi	r7,r6,-1
    7c14:	30004026 	beq	r6,zero,7d18 <memset+0x114>
    7c18:	2813883a 	mov	r9,r5
    7c1c:	200d883a 	mov	r6,r4
    7c20:	2007883a 	mov	r3,r4
    7c24:	00000406 	br	7c38 <memset+0x34>
    7c28:	3a3fffc4 	addi	r8,r7,-1
    7c2c:	31800044 	addi	r6,r6,1
    7c30:	38003926 	beq	r7,zero,7d18 <memset+0x114>
    7c34:	400f883a 	mov	r7,r8
    7c38:	18c00044 	addi	r3,r3,1
    7c3c:	32400005 	stb	r9,0(r6)
    7c40:	1a0000cc 	andi	r8,r3,3
    7c44:	403ff81e 	bne	r8,zero,7c28 <__alt_data_end+0xff007c28>
    7c48:	010000c4 	movi	r4,3
    7c4c:	21c02d2e 	bgeu	r4,r7,7d04 <memset+0x100>
    7c50:	29003fcc 	andi	r4,r5,255
    7c54:	200c923a 	slli	r6,r4,8
    7c58:	3108b03a 	or	r4,r6,r4
    7c5c:	200c943a 	slli	r6,r4,16
    7c60:	218cb03a 	or	r6,r4,r6
    7c64:	010003c4 	movi	r4,15
    7c68:	21c0182e 	bgeu	r4,r7,7ccc <memset+0xc8>
    7c6c:	3b3ffc04 	addi	r12,r7,-16
    7c70:	6018d13a 	srli	r12,r12,4
    7c74:	1a000104 	addi	r8,r3,4
    7c78:	1ac00204 	addi	r11,r3,8
    7c7c:	6008913a 	slli	r4,r12,4
    7c80:	1a800304 	addi	r10,r3,12
    7c84:	1813883a 	mov	r9,r3
    7c88:	21000504 	addi	r4,r4,20
    7c8c:	1909883a 	add	r4,r3,r4
    7c90:	49800015 	stw	r6,0(r9)
    7c94:	41800015 	stw	r6,0(r8)
    7c98:	59800015 	stw	r6,0(r11)
    7c9c:	51800015 	stw	r6,0(r10)
    7ca0:	42000404 	addi	r8,r8,16
    7ca4:	4a400404 	addi	r9,r9,16
    7ca8:	5ac00404 	addi	r11,r11,16
    7cac:	52800404 	addi	r10,r10,16
    7cb0:	413ff71e 	bne	r8,r4,7c90 <__alt_data_end+0xff007c90>
    7cb4:	63000044 	addi	r12,r12,1
    7cb8:	6018913a 	slli	r12,r12,4
    7cbc:	39c003cc 	andi	r7,r7,15
    7cc0:	010000c4 	movi	r4,3
    7cc4:	1b07883a 	add	r3,r3,r12
    7cc8:	21c00e2e 	bgeu	r4,r7,7d04 <memset+0x100>
    7ccc:	1813883a 	mov	r9,r3
    7cd0:	3811883a 	mov	r8,r7
    7cd4:	010000c4 	movi	r4,3
    7cd8:	49800015 	stw	r6,0(r9)
    7cdc:	423fff04 	addi	r8,r8,-4
    7ce0:	4a400104 	addi	r9,r9,4
    7ce4:	223ffc36 	bltu	r4,r8,7cd8 <__alt_data_end+0xff007cd8>
    7ce8:	393fff04 	addi	r4,r7,-4
    7cec:	2008d0ba 	srli	r4,r4,2
    7cf0:	39c000cc 	andi	r7,r7,3
    7cf4:	21000044 	addi	r4,r4,1
    7cf8:	2109883a 	add	r4,r4,r4
    7cfc:	2109883a 	add	r4,r4,r4
    7d00:	1907883a 	add	r3,r3,r4
    7d04:	38000526 	beq	r7,zero,7d1c <memset+0x118>
    7d08:	19cf883a 	add	r7,r3,r7
    7d0c:	19400005 	stb	r5,0(r3)
    7d10:	18c00044 	addi	r3,r3,1
    7d14:	38fffd1e 	bne	r7,r3,7d0c <__alt_data_end+0xff007d0c>
    7d18:	f800283a 	ret
    7d1c:	f800283a 	ret
    7d20:	2007883a 	mov	r3,r4
    7d24:	300f883a 	mov	r7,r6
    7d28:	003fc706 	br	7c48 <__alt_data_end+0xff007c48>

00007d2c <_Balloc>:
    7d2c:	20801317 	ldw	r2,76(r4)
    7d30:	defffc04 	addi	sp,sp,-16
    7d34:	dc400115 	stw	r17,4(sp)
    7d38:	dc000015 	stw	r16,0(sp)
    7d3c:	dfc00315 	stw	ra,12(sp)
    7d40:	dc800215 	stw	r18,8(sp)
    7d44:	2023883a 	mov	r17,r4
    7d48:	2821883a 	mov	r16,r5
    7d4c:	10000f26 	beq	r2,zero,7d8c <_Balloc+0x60>
    7d50:	8407883a 	add	r3,r16,r16
    7d54:	18c7883a 	add	r3,r3,r3
    7d58:	10c7883a 	add	r3,r2,r3
    7d5c:	18800017 	ldw	r2,0(r3)
    7d60:	10001126 	beq	r2,zero,7da8 <_Balloc+0x7c>
    7d64:	11000017 	ldw	r4,0(r2)
    7d68:	19000015 	stw	r4,0(r3)
    7d6c:	10000415 	stw	zero,16(r2)
    7d70:	10000315 	stw	zero,12(r2)
    7d74:	dfc00317 	ldw	ra,12(sp)
    7d78:	dc800217 	ldw	r18,8(sp)
    7d7c:	dc400117 	ldw	r17,4(sp)
    7d80:	dc000017 	ldw	r16,0(sp)
    7d84:	dec00404 	addi	sp,sp,16
    7d88:	f800283a 	ret
    7d8c:	01800844 	movi	r6,33
    7d90:	01400104 	movi	r5,4
    7d94:	000ac140 	call	ac14 <_calloc_r>
    7d98:	88801315 	stw	r2,76(r17)
    7d9c:	103fec1e 	bne	r2,zero,7d50 <__alt_data_end+0xff007d50>
    7da0:	0005883a 	mov	r2,zero
    7da4:	003ff306 	br	7d74 <__alt_data_end+0xff007d74>
    7da8:	01400044 	movi	r5,1
    7dac:	2c24983a 	sll	r18,r5,r16
    7db0:	8809883a 	mov	r4,r17
    7db4:	91800144 	addi	r6,r18,5
    7db8:	318d883a 	add	r6,r6,r6
    7dbc:	318d883a 	add	r6,r6,r6
    7dc0:	000ac140 	call	ac14 <_calloc_r>
    7dc4:	103ff626 	beq	r2,zero,7da0 <__alt_data_end+0xff007da0>
    7dc8:	14000115 	stw	r16,4(r2)
    7dcc:	14800215 	stw	r18,8(r2)
    7dd0:	003fe606 	br	7d6c <__alt_data_end+0xff007d6c>

00007dd4 <_Bfree>:
    7dd4:	28000826 	beq	r5,zero,7df8 <_Bfree+0x24>
    7dd8:	28c00117 	ldw	r3,4(r5)
    7ddc:	20801317 	ldw	r2,76(r4)
    7de0:	18c7883a 	add	r3,r3,r3
    7de4:	18c7883a 	add	r3,r3,r3
    7de8:	10c5883a 	add	r2,r2,r3
    7dec:	10c00017 	ldw	r3,0(r2)
    7df0:	28c00015 	stw	r3,0(r5)
    7df4:	11400015 	stw	r5,0(r2)
    7df8:	f800283a 	ret

00007dfc <__multadd>:
    7dfc:	defffa04 	addi	sp,sp,-24
    7e00:	dc800315 	stw	r18,12(sp)
    7e04:	dc400215 	stw	r17,8(sp)
    7e08:	dc000115 	stw	r16,4(sp)
    7e0c:	2823883a 	mov	r17,r5
    7e10:	2c000417 	ldw	r16,16(r5)
    7e14:	dfc00515 	stw	ra,20(sp)
    7e18:	dcc00415 	stw	r19,16(sp)
    7e1c:	2025883a 	mov	r18,r4
    7e20:	29400504 	addi	r5,r5,20
    7e24:	0011883a 	mov	r8,zero
    7e28:	28c00017 	ldw	r3,0(r5)
    7e2c:	29400104 	addi	r5,r5,4
    7e30:	42000044 	addi	r8,r8,1
    7e34:	18bfffcc 	andi	r2,r3,65535
    7e38:	1185383a 	mul	r2,r2,r6
    7e3c:	1806d43a 	srli	r3,r3,16
    7e40:	11cf883a 	add	r7,r2,r7
    7e44:	3808d43a 	srli	r4,r7,16
    7e48:	1987383a 	mul	r3,r3,r6
    7e4c:	38bfffcc 	andi	r2,r7,65535
    7e50:	1907883a 	add	r3,r3,r4
    7e54:	1808943a 	slli	r4,r3,16
    7e58:	180ed43a 	srli	r7,r3,16
    7e5c:	2085883a 	add	r2,r4,r2
    7e60:	28bfff15 	stw	r2,-4(r5)
    7e64:	443ff016 	blt	r8,r16,7e28 <__alt_data_end+0xff007e28>
    7e68:	38000926 	beq	r7,zero,7e90 <__multadd+0x94>
    7e6c:	88800217 	ldw	r2,8(r17)
    7e70:	80800f0e 	bge	r16,r2,7eb0 <__multadd+0xb4>
    7e74:	80800144 	addi	r2,r16,5
    7e78:	1085883a 	add	r2,r2,r2
    7e7c:	1085883a 	add	r2,r2,r2
    7e80:	8885883a 	add	r2,r17,r2
    7e84:	11c00015 	stw	r7,0(r2)
    7e88:	84000044 	addi	r16,r16,1
    7e8c:	8c000415 	stw	r16,16(r17)
    7e90:	8805883a 	mov	r2,r17
    7e94:	dfc00517 	ldw	ra,20(sp)
    7e98:	dcc00417 	ldw	r19,16(sp)
    7e9c:	dc800317 	ldw	r18,12(sp)
    7ea0:	dc400217 	ldw	r17,8(sp)
    7ea4:	dc000117 	ldw	r16,4(sp)
    7ea8:	dec00604 	addi	sp,sp,24
    7eac:	f800283a 	ret
    7eb0:	89400117 	ldw	r5,4(r17)
    7eb4:	9009883a 	mov	r4,r18
    7eb8:	d9c00015 	stw	r7,0(sp)
    7ebc:	29400044 	addi	r5,r5,1
    7ec0:	0007d2c0 	call	7d2c <_Balloc>
    7ec4:	89800417 	ldw	r6,16(r17)
    7ec8:	89400304 	addi	r5,r17,12
    7ecc:	11000304 	addi	r4,r2,12
    7ed0:	31800084 	addi	r6,r6,2
    7ed4:	318d883a 	add	r6,r6,r6
    7ed8:	318d883a 	add	r6,r6,r6
    7edc:	1027883a 	mov	r19,r2
    7ee0:	00079600 	call	7960 <memcpy>
    7ee4:	d9c00017 	ldw	r7,0(sp)
    7ee8:	88000a26 	beq	r17,zero,7f14 <__multadd+0x118>
    7eec:	88c00117 	ldw	r3,4(r17)
    7ef0:	90801317 	ldw	r2,76(r18)
    7ef4:	18c7883a 	add	r3,r3,r3
    7ef8:	18c7883a 	add	r3,r3,r3
    7efc:	10c5883a 	add	r2,r2,r3
    7f00:	10c00017 	ldw	r3,0(r2)
    7f04:	88c00015 	stw	r3,0(r17)
    7f08:	14400015 	stw	r17,0(r2)
    7f0c:	9823883a 	mov	r17,r19
    7f10:	003fd806 	br	7e74 <__alt_data_end+0xff007e74>
    7f14:	9823883a 	mov	r17,r19
    7f18:	003fd606 	br	7e74 <__alt_data_end+0xff007e74>

00007f1c <__s2b>:
    7f1c:	defff904 	addi	sp,sp,-28
    7f20:	dc400115 	stw	r17,4(sp)
    7f24:	dc000015 	stw	r16,0(sp)
    7f28:	2023883a 	mov	r17,r4
    7f2c:	2821883a 	mov	r16,r5
    7f30:	39000204 	addi	r4,r7,8
    7f34:	01400244 	movi	r5,9
    7f38:	dcc00315 	stw	r19,12(sp)
    7f3c:	dc800215 	stw	r18,8(sp)
    7f40:	dfc00615 	stw	ra,24(sp)
    7f44:	dd400515 	stw	r21,20(sp)
    7f48:	dd000415 	stw	r20,16(sp)
    7f4c:	3825883a 	mov	r18,r7
    7f50:	3027883a 	mov	r19,r6
    7f54:	000bf440 	call	bf44 <__divsi3>
    7f58:	00c00044 	movi	r3,1
    7f5c:	000b883a 	mov	r5,zero
    7f60:	1880030e 	bge	r3,r2,7f70 <__s2b+0x54>
    7f64:	18c7883a 	add	r3,r3,r3
    7f68:	29400044 	addi	r5,r5,1
    7f6c:	18bffd16 	blt	r3,r2,7f64 <__alt_data_end+0xff007f64>
    7f70:	8809883a 	mov	r4,r17
    7f74:	0007d2c0 	call	7d2c <_Balloc>
    7f78:	d8c00717 	ldw	r3,28(sp)
    7f7c:	10c00515 	stw	r3,20(r2)
    7f80:	00c00044 	movi	r3,1
    7f84:	10c00415 	stw	r3,16(r2)
    7f88:	00c00244 	movi	r3,9
    7f8c:	1cc0210e 	bge	r3,r19,8014 <__s2b+0xf8>
    7f90:	80eb883a 	add	r21,r16,r3
    7f94:	a829883a 	mov	r20,r21
    7f98:	84e1883a 	add	r16,r16,r19
    7f9c:	a1c00007 	ldb	r7,0(r20)
    7fa0:	01800284 	movi	r6,10
    7fa4:	a5000044 	addi	r20,r20,1
    7fa8:	100b883a 	mov	r5,r2
    7fac:	39fff404 	addi	r7,r7,-48
    7fb0:	8809883a 	mov	r4,r17
    7fb4:	0007dfc0 	call	7dfc <__multadd>
    7fb8:	a43ff81e 	bne	r20,r16,7f9c <__alt_data_end+0xff007f9c>
    7fbc:	ace1883a 	add	r16,r21,r19
    7fc0:	843ffe04 	addi	r16,r16,-8
    7fc4:	9c800a0e 	bge	r19,r18,7ff0 <__s2b+0xd4>
    7fc8:	94e5c83a 	sub	r18,r18,r19
    7fcc:	84a5883a 	add	r18,r16,r18
    7fd0:	81c00007 	ldb	r7,0(r16)
    7fd4:	01800284 	movi	r6,10
    7fd8:	84000044 	addi	r16,r16,1
    7fdc:	100b883a 	mov	r5,r2
    7fe0:	39fff404 	addi	r7,r7,-48
    7fe4:	8809883a 	mov	r4,r17
    7fe8:	0007dfc0 	call	7dfc <__multadd>
    7fec:	84bff81e 	bne	r16,r18,7fd0 <__alt_data_end+0xff007fd0>
    7ff0:	dfc00617 	ldw	ra,24(sp)
    7ff4:	dd400517 	ldw	r21,20(sp)
    7ff8:	dd000417 	ldw	r20,16(sp)
    7ffc:	dcc00317 	ldw	r19,12(sp)
    8000:	dc800217 	ldw	r18,8(sp)
    8004:	dc400117 	ldw	r17,4(sp)
    8008:	dc000017 	ldw	r16,0(sp)
    800c:	dec00704 	addi	sp,sp,28
    8010:	f800283a 	ret
    8014:	84000284 	addi	r16,r16,10
    8018:	1827883a 	mov	r19,r3
    801c:	003fe906 	br	7fc4 <__alt_data_end+0xff007fc4>

00008020 <__hi0bits>:
    8020:	20bfffec 	andhi	r2,r4,65535
    8024:	1000141e 	bne	r2,zero,8078 <__hi0bits+0x58>
    8028:	2008943a 	slli	r4,r4,16
    802c:	00800404 	movi	r2,16
    8030:	20ffc02c 	andhi	r3,r4,65280
    8034:	1800021e 	bne	r3,zero,8040 <__hi0bits+0x20>
    8038:	2008923a 	slli	r4,r4,8
    803c:	10800204 	addi	r2,r2,8
    8040:	20fc002c 	andhi	r3,r4,61440
    8044:	1800021e 	bne	r3,zero,8050 <__hi0bits+0x30>
    8048:	2008913a 	slli	r4,r4,4
    804c:	10800104 	addi	r2,r2,4
    8050:	20f0002c 	andhi	r3,r4,49152
    8054:	1800031e 	bne	r3,zero,8064 <__hi0bits+0x44>
    8058:	2109883a 	add	r4,r4,r4
    805c:	10800084 	addi	r2,r2,2
    8060:	2109883a 	add	r4,r4,r4
    8064:	20000316 	blt	r4,zero,8074 <__hi0bits+0x54>
    8068:	2110002c 	andhi	r4,r4,16384
    806c:	2000041e 	bne	r4,zero,8080 <__hi0bits+0x60>
    8070:	00800804 	movi	r2,32
    8074:	f800283a 	ret
    8078:	0005883a 	mov	r2,zero
    807c:	003fec06 	br	8030 <__alt_data_end+0xff008030>
    8080:	10800044 	addi	r2,r2,1
    8084:	f800283a 	ret

00008088 <__lo0bits>:
    8088:	20c00017 	ldw	r3,0(r4)
    808c:	188001cc 	andi	r2,r3,7
    8090:	10000826 	beq	r2,zero,80b4 <__lo0bits+0x2c>
    8094:	1880004c 	andi	r2,r3,1
    8098:	1000211e 	bne	r2,zero,8120 <__lo0bits+0x98>
    809c:	1880008c 	andi	r2,r3,2
    80a0:	1000211e 	bne	r2,zero,8128 <__lo0bits+0xa0>
    80a4:	1806d0ba 	srli	r3,r3,2
    80a8:	00800084 	movi	r2,2
    80ac:	20c00015 	stw	r3,0(r4)
    80b0:	f800283a 	ret
    80b4:	18bfffcc 	andi	r2,r3,65535
    80b8:	10001326 	beq	r2,zero,8108 <__lo0bits+0x80>
    80bc:	0005883a 	mov	r2,zero
    80c0:	19403fcc 	andi	r5,r3,255
    80c4:	2800021e 	bne	r5,zero,80d0 <__lo0bits+0x48>
    80c8:	1806d23a 	srli	r3,r3,8
    80cc:	10800204 	addi	r2,r2,8
    80d0:	194003cc 	andi	r5,r3,15
    80d4:	2800021e 	bne	r5,zero,80e0 <__lo0bits+0x58>
    80d8:	1806d13a 	srli	r3,r3,4
    80dc:	10800104 	addi	r2,r2,4
    80e0:	194000cc 	andi	r5,r3,3
    80e4:	2800021e 	bne	r5,zero,80f0 <__lo0bits+0x68>
    80e8:	1806d0ba 	srli	r3,r3,2
    80ec:	10800084 	addi	r2,r2,2
    80f0:	1940004c 	andi	r5,r3,1
    80f4:	2800081e 	bne	r5,zero,8118 <__lo0bits+0x90>
    80f8:	1806d07a 	srli	r3,r3,1
    80fc:	1800051e 	bne	r3,zero,8114 <__lo0bits+0x8c>
    8100:	00800804 	movi	r2,32
    8104:	f800283a 	ret
    8108:	1806d43a 	srli	r3,r3,16
    810c:	00800404 	movi	r2,16
    8110:	003feb06 	br	80c0 <__alt_data_end+0xff0080c0>
    8114:	10800044 	addi	r2,r2,1
    8118:	20c00015 	stw	r3,0(r4)
    811c:	f800283a 	ret
    8120:	0005883a 	mov	r2,zero
    8124:	f800283a 	ret
    8128:	1806d07a 	srli	r3,r3,1
    812c:	00800044 	movi	r2,1
    8130:	20c00015 	stw	r3,0(r4)
    8134:	f800283a 	ret

00008138 <__i2b>:
    8138:	defffd04 	addi	sp,sp,-12
    813c:	dc000015 	stw	r16,0(sp)
    8140:	04000044 	movi	r16,1
    8144:	dc400115 	stw	r17,4(sp)
    8148:	2823883a 	mov	r17,r5
    814c:	800b883a 	mov	r5,r16
    8150:	dfc00215 	stw	ra,8(sp)
    8154:	0007d2c0 	call	7d2c <_Balloc>
    8158:	14400515 	stw	r17,20(r2)
    815c:	14000415 	stw	r16,16(r2)
    8160:	dfc00217 	ldw	ra,8(sp)
    8164:	dc400117 	ldw	r17,4(sp)
    8168:	dc000017 	ldw	r16,0(sp)
    816c:	dec00304 	addi	sp,sp,12
    8170:	f800283a 	ret

00008174 <__multiply>:
    8174:	defffa04 	addi	sp,sp,-24
    8178:	dcc00315 	stw	r19,12(sp)
    817c:	dc800215 	stw	r18,8(sp)
    8180:	34c00417 	ldw	r19,16(r6)
    8184:	2c800417 	ldw	r18,16(r5)
    8188:	dd000415 	stw	r20,16(sp)
    818c:	dc400115 	stw	r17,4(sp)
    8190:	dfc00515 	stw	ra,20(sp)
    8194:	dc000015 	stw	r16,0(sp)
    8198:	2829883a 	mov	r20,r5
    819c:	3023883a 	mov	r17,r6
    81a0:	94c0050e 	bge	r18,r19,81b8 <__multiply+0x44>
    81a4:	9007883a 	mov	r3,r18
    81a8:	3029883a 	mov	r20,r6
    81ac:	9825883a 	mov	r18,r19
    81b0:	2823883a 	mov	r17,r5
    81b4:	1827883a 	mov	r19,r3
    81b8:	a0800217 	ldw	r2,8(r20)
    81bc:	94e1883a 	add	r16,r18,r19
    81c0:	a1400117 	ldw	r5,4(r20)
    81c4:	1400010e 	bge	r2,r16,81cc <__multiply+0x58>
    81c8:	29400044 	addi	r5,r5,1
    81cc:	0007d2c0 	call	7d2c <_Balloc>
    81d0:	8415883a 	add	r10,r16,r16
    81d4:	12c00504 	addi	r11,r2,20
    81d8:	5295883a 	add	r10,r10,r10
    81dc:	5a95883a 	add	r10,r11,r10
    81e0:	5807883a 	mov	r3,r11
    81e4:	5a80032e 	bgeu	r11,r10,81f4 <__multiply+0x80>
    81e8:	18000015 	stw	zero,0(r3)
    81ec:	18c00104 	addi	r3,r3,4
    81f0:	1abffd36 	bltu	r3,r10,81e8 <__alt_data_end+0xff0081e8>
    81f4:	9ce7883a 	add	r19,r19,r19
    81f8:	94a5883a 	add	r18,r18,r18
    81fc:	89800504 	addi	r6,r17,20
    8200:	9ce7883a 	add	r19,r19,r19
    8204:	a3400504 	addi	r13,r20,20
    8208:	94a5883a 	add	r18,r18,r18
    820c:	34d9883a 	add	r12,r6,r19
    8210:	6c93883a 	add	r9,r13,r18
    8214:	3300422e 	bgeu	r6,r12,8320 <__multiply+0x1ac>
    8218:	37c00017 	ldw	ra,0(r6)
    821c:	fbffffcc 	andi	r15,ra,65535
    8220:	78001b26 	beq	r15,zero,8290 <__multiply+0x11c>
    8224:	5811883a 	mov	r8,r11
    8228:	681d883a 	mov	r14,r13
    822c:	000f883a 	mov	r7,zero
    8230:	71000017 	ldw	r4,0(r14)
    8234:	40c00017 	ldw	r3,0(r8)
    8238:	73800104 	addi	r14,r14,4
    823c:	217fffcc 	andi	r5,r4,65535
    8240:	2bcb383a 	mul	r5,r5,r15
    8244:	2008d43a 	srli	r4,r4,16
    8248:	1c7fffcc 	andi	r17,r3,65535
    824c:	2c4b883a 	add	r5,r5,r17
    8250:	29cb883a 	add	r5,r5,r7
    8254:	23c9383a 	mul	r4,r4,r15
    8258:	1806d43a 	srli	r3,r3,16
    825c:	280ed43a 	srli	r7,r5,16
    8260:	297fffcc 	andi	r5,r5,65535
    8264:	20c7883a 	add	r3,r4,r3
    8268:	19c7883a 	add	r3,r3,r7
    826c:	1808943a 	slli	r4,r3,16
    8270:	4023883a 	mov	r17,r8
    8274:	180ed43a 	srli	r7,r3,16
    8278:	214ab03a 	or	r5,r4,r5
    827c:	41400015 	stw	r5,0(r8)
    8280:	42000104 	addi	r8,r8,4
    8284:	727fea36 	bltu	r14,r9,8230 <__alt_data_end+0xff008230>
    8288:	89c00115 	stw	r7,4(r17)
    828c:	37c00017 	ldw	ra,0(r6)
    8290:	f83ed43a 	srli	ra,ra,16
    8294:	f8001f26 	beq	ra,zero,8314 <__multiply+0x1a0>
    8298:	58c00017 	ldw	r3,0(r11)
    829c:	681d883a 	mov	r14,r13
    82a0:	581f883a 	mov	r15,r11
    82a4:	1811883a 	mov	r8,r3
    82a8:	5825883a 	mov	r18,r11
    82ac:	000f883a 	mov	r7,zero
    82b0:	00000106 	br	82b8 <__multiply+0x144>
    82b4:	8825883a 	mov	r18,r17
    82b8:	7140000b 	ldhu	r5,0(r14)
    82bc:	4010d43a 	srli	r8,r8,16
    82c0:	193fffcc 	andi	r4,r3,65535
    82c4:	2fcb383a 	mul	r5,r5,ra
    82c8:	7bc00104 	addi	r15,r15,4
    82cc:	73800104 	addi	r14,r14,4
    82d0:	2a0b883a 	add	r5,r5,r8
    82d4:	29cb883a 	add	r5,r5,r7
    82d8:	2806943a 	slli	r3,r5,16
    82dc:	94400104 	addi	r17,r18,4
    82e0:	280ad43a 	srli	r5,r5,16
    82e4:	1908b03a 	or	r4,r3,r4
    82e8:	793fff15 	stw	r4,-4(r15)
    82ec:	70ffff17 	ldw	r3,-4(r14)
    82f0:	8a000017 	ldw	r8,0(r17)
    82f4:	1806d43a 	srli	r3,r3,16
    82f8:	413fffcc 	andi	r4,r8,65535
    82fc:	1fc7383a 	mul	r3,r3,ra
    8300:	1907883a 	add	r3,r3,r4
    8304:	1947883a 	add	r3,r3,r5
    8308:	180ed43a 	srli	r7,r3,16
    830c:	727fe936 	bltu	r14,r9,82b4 <__alt_data_end+0xff0082b4>
    8310:	90c00115 	stw	r3,4(r18)
    8314:	31800104 	addi	r6,r6,4
    8318:	5ac00104 	addi	r11,r11,4
    831c:	333fbe36 	bltu	r6,r12,8218 <__alt_data_end+0xff008218>
    8320:	0400090e 	bge	zero,r16,8348 <__multiply+0x1d4>
    8324:	50ffff17 	ldw	r3,-4(r10)
    8328:	52bfff04 	addi	r10,r10,-4
    832c:	18000326 	beq	r3,zero,833c <__multiply+0x1c8>
    8330:	00000506 	br	8348 <__multiply+0x1d4>
    8334:	50c00017 	ldw	r3,0(r10)
    8338:	1800031e 	bne	r3,zero,8348 <__multiply+0x1d4>
    833c:	843fffc4 	addi	r16,r16,-1
    8340:	52bfff04 	addi	r10,r10,-4
    8344:	803ffb1e 	bne	r16,zero,8334 <__alt_data_end+0xff008334>
    8348:	14000415 	stw	r16,16(r2)
    834c:	dfc00517 	ldw	ra,20(sp)
    8350:	dd000417 	ldw	r20,16(sp)
    8354:	dcc00317 	ldw	r19,12(sp)
    8358:	dc800217 	ldw	r18,8(sp)
    835c:	dc400117 	ldw	r17,4(sp)
    8360:	dc000017 	ldw	r16,0(sp)
    8364:	dec00604 	addi	sp,sp,24
    8368:	f800283a 	ret

0000836c <__pow5mult>:
    836c:	defffa04 	addi	sp,sp,-24
    8370:	dcc00315 	stw	r19,12(sp)
    8374:	dc000015 	stw	r16,0(sp)
    8378:	dfc00515 	stw	ra,20(sp)
    837c:	dd000415 	stw	r20,16(sp)
    8380:	dc800215 	stw	r18,8(sp)
    8384:	dc400115 	stw	r17,4(sp)
    8388:	308000cc 	andi	r2,r6,3
    838c:	3021883a 	mov	r16,r6
    8390:	2027883a 	mov	r19,r4
    8394:	10002f1e 	bne	r2,zero,8454 <__pow5mult+0xe8>
    8398:	2825883a 	mov	r18,r5
    839c:	8021d0ba 	srai	r16,r16,2
    83a0:	80001a26 	beq	r16,zero,840c <__pow5mult+0xa0>
    83a4:	9c401217 	ldw	r17,72(r19)
    83a8:	8800061e 	bne	r17,zero,83c4 <__pow5mult+0x58>
    83ac:	00003406 	br	8480 <__pow5mult+0x114>
    83b0:	8021d07a 	srai	r16,r16,1
    83b4:	80001526 	beq	r16,zero,840c <__pow5mult+0xa0>
    83b8:	88800017 	ldw	r2,0(r17)
    83bc:	10001c26 	beq	r2,zero,8430 <__pow5mult+0xc4>
    83c0:	1023883a 	mov	r17,r2
    83c4:	8080004c 	andi	r2,r16,1
    83c8:	103ff926 	beq	r2,zero,83b0 <__alt_data_end+0xff0083b0>
    83cc:	880d883a 	mov	r6,r17
    83d0:	900b883a 	mov	r5,r18
    83d4:	9809883a 	mov	r4,r19
    83d8:	00081740 	call	8174 <__multiply>
    83dc:	90001b26 	beq	r18,zero,844c <__pow5mult+0xe0>
    83e0:	91000117 	ldw	r4,4(r18)
    83e4:	98c01317 	ldw	r3,76(r19)
    83e8:	8021d07a 	srai	r16,r16,1
    83ec:	2109883a 	add	r4,r4,r4
    83f0:	2109883a 	add	r4,r4,r4
    83f4:	1907883a 	add	r3,r3,r4
    83f8:	19000017 	ldw	r4,0(r3)
    83fc:	91000015 	stw	r4,0(r18)
    8400:	1c800015 	stw	r18,0(r3)
    8404:	1025883a 	mov	r18,r2
    8408:	803feb1e 	bne	r16,zero,83b8 <__alt_data_end+0xff0083b8>
    840c:	9005883a 	mov	r2,r18
    8410:	dfc00517 	ldw	ra,20(sp)
    8414:	dd000417 	ldw	r20,16(sp)
    8418:	dcc00317 	ldw	r19,12(sp)
    841c:	dc800217 	ldw	r18,8(sp)
    8420:	dc400117 	ldw	r17,4(sp)
    8424:	dc000017 	ldw	r16,0(sp)
    8428:	dec00604 	addi	sp,sp,24
    842c:	f800283a 	ret
    8430:	880d883a 	mov	r6,r17
    8434:	880b883a 	mov	r5,r17
    8438:	9809883a 	mov	r4,r19
    843c:	00081740 	call	8174 <__multiply>
    8440:	88800015 	stw	r2,0(r17)
    8444:	10000015 	stw	zero,0(r2)
    8448:	003fdd06 	br	83c0 <__alt_data_end+0xff0083c0>
    844c:	1025883a 	mov	r18,r2
    8450:	003fd706 	br	83b0 <__alt_data_end+0xff0083b0>
    8454:	10bfffc4 	addi	r2,r2,-1
    8458:	1085883a 	add	r2,r2,r2
    845c:	00c00074 	movhi	r3,1
    8460:	18c21904 	addi	r3,r3,2148
    8464:	1085883a 	add	r2,r2,r2
    8468:	1885883a 	add	r2,r3,r2
    846c:	11800017 	ldw	r6,0(r2)
    8470:	000f883a 	mov	r7,zero
    8474:	0007dfc0 	call	7dfc <__multadd>
    8478:	1025883a 	mov	r18,r2
    847c:	003fc706 	br	839c <__alt_data_end+0xff00839c>
    8480:	05000044 	movi	r20,1
    8484:	a00b883a 	mov	r5,r20
    8488:	9809883a 	mov	r4,r19
    848c:	0007d2c0 	call	7d2c <_Balloc>
    8490:	1023883a 	mov	r17,r2
    8494:	00809c44 	movi	r2,625
    8498:	88800515 	stw	r2,20(r17)
    849c:	8d000415 	stw	r20,16(r17)
    84a0:	9c401215 	stw	r17,72(r19)
    84a4:	88000015 	stw	zero,0(r17)
    84a8:	003fc606 	br	83c4 <__alt_data_end+0xff0083c4>

000084ac <__lshift>:
    84ac:	defff904 	addi	sp,sp,-28
    84b0:	dd400515 	stw	r21,20(sp)
    84b4:	dcc00315 	stw	r19,12(sp)
    84b8:	302bd17a 	srai	r21,r6,5
    84bc:	2cc00417 	ldw	r19,16(r5)
    84c0:	28800217 	ldw	r2,8(r5)
    84c4:	dd000415 	stw	r20,16(sp)
    84c8:	ace7883a 	add	r19,r21,r19
    84cc:	dc800215 	stw	r18,8(sp)
    84d0:	dc400115 	stw	r17,4(sp)
    84d4:	dc000015 	stw	r16,0(sp)
    84d8:	dfc00615 	stw	ra,24(sp)
    84dc:	9c000044 	addi	r16,r19,1
    84e0:	2823883a 	mov	r17,r5
    84e4:	3029883a 	mov	r20,r6
    84e8:	2025883a 	mov	r18,r4
    84ec:	29400117 	ldw	r5,4(r5)
    84f0:	1400030e 	bge	r2,r16,8500 <__lshift+0x54>
    84f4:	1085883a 	add	r2,r2,r2
    84f8:	29400044 	addi	r5,r5,1
    84fc:	143ffd16 	blt	r2,r16,84f4 <__alt_data_end+0xff0084f4>
    8500:	9009883a 	mov	r4,r18
    8504:	0007d2c0 	call	7d2c <_Balloc>
    8508:	10c00504 	addi	r3,r2,20
    850c:	0540070e 	bge	zero,r21,852c <__lshift+0x80>
    8510:	ad6b883a 	add	r21,r21,r21
    8514:	ad6b883a 	add	r21,r21,r21
    8518:	1809883a 	mov	r4,r3
    851c:	1d47883a 	add	r3,r3,r21
    8520:	20000015 	stw	zero,0(r4)
    8524:	21000104 	addi	r4,r4,4
    8528:	193ffd1e 	bne	r3,r4,8520 <__alt_data_end+0xff008520>
    852c:	8a000417 	ldw	r8,16(r17)
    8530:	89000504 	addi	r4,r17,20
    8534:	a18007cc 	andi	r6,r20,31
    8538:	4211883a 	add	r8,r8,r8
    853c:	4211883a 	add	r8,r8,r8
    8540:	2211883a 	add	r8,r4,r8
    8544:	30002326 	beq	r6,zero,85d4 <__lshift+0x128>
    8548:	02400804 	movi	r9,32
    854c:	4993c83a 	sub	r9,r9,r6
    8550:	000b883a 	mov	r5,zero
    8554:	21c00017 	ldw	r7,0(r4)
    8558:	1815883a 	mov	r10,r3
    855c:	18c00104 	addi	r3,r3,4
    8560:	398e983a 	sll	r7,r7,r6
    8564:	21000104 	addi	r4,r4,4
    8568:	394ab03a 	or	r5,r7,r5
    856c:	197fff15 	stw	r5,-4(r3)
    8570:	217fff17 	ldw	r5,-4(r4)
    8574:	2a4ad83a 	srl	r5,r5,r9
    8578:	223ff636 	bltu	r4,r8,8554 <__alt_data_end+0xff008554>
    857c:	51400115 	stw	r5,4(r10)
    8580:	28001a1e 	bne	r5,zero,85ec <__lshift+0x140>
    8584:	843fffc4 	addi	r16,r16,-1
    8588:	14000415 	stw	r16,16(r2)
    858c:	88000826 	beq	r17,zero,85b0 <__lshift+0x104>
    8590:	89000117 	ldw	r4,4(r17)
    8594:	90c01317 	ldw	r3,76(r18)
    8598:	2109883a 	add	r4,r4,r4
    859c:	2109883a 	add	r4,r4,r4
    85a0:	1907883a 	add	r3,r3,r4
    85a4:	19000017 	ldw	r4,0(r3)
    85a8:	89000015 	stw	r4,0(r17)
    85ac:	1c400015 	stw	r17,0(r3)
    85b0:	dfc00617 	ldw	ra,24(sp)
    85b4:	dd400517 	ldw	r21,20(sp)
    85b8:	dd000417 	ldw	r20,16(sp)
    85bc:	dcc00317 	ldw	r19,12(sp)
    85c0:	dc800217 	ldw	r18,8(sp)
    85c4:	dc400117 	ldw	r17,4(sp)
    85c8:	dc000017 	ldw	r16,0(sp)
    85cc:	dec00704 	addi	sp,sp,28
    85d0:	f800283a 	ret
    85d4:	21400017 	ldw	r5,0(r4)
    85d8:	18c00104 	addi	r3,r3,4
    85dc:	21000104 	addi	r4,r4,4
    85e0:	197fff15 	stw	r5,-4(r3)
    85e4:	223ffb36 	bltu	r4,r8,85d4 <__alt_data_end+0xff0085d4>
    85e8:	003fe606 	br	8584 <__alt_data_end+0xff008584>
    85ec:	9c000084 	addi	r16,r19,2
    85f0:	003fe406 	br	8584 <__alt_data_end+0xff008584>

000085f4 <__mcmp>:
    85f4:	20800417 	ldw	r2,16(r4)
    85f8:	28c00417 	ldw	r3,16(r5)
    85fc:	10c5c83a 	sub	r2,r2,r3
    8600:	1000111e 	bne	r2,zero,8648 <__mcmp+0x54>
    8604:	18c7883a 	add	r3,r3,r3
    8608:	18c7883a 	add	r3,r3,r3
    860c:	21000504 	addi	r4,r4,20
    8610:	29400504 	addi	r5,r5,20
    8614:	20c5883a 	add	r2,r4,r3
    8618:	28cb883a 	add	r5,r5,r3
    861c:	00000106 	br	8624 <__mcmp+0x30>
    8620:	20800a2e 	bgeu	r4,r2,864c <__mcmp+0x58>
    8624:	10bfff04 	addi	r2,r2,-4
    8628:	297fff04 	addi	r5,r5,-4
    862c:	11800017 	ldw	r6,0(r2)
    8630:	28c00017 	ldw	r3,0(r5)
    8634:	30fffa26 	beq	r6,r3,8620 <__alt_data_end+0xff008620>
    8638:	30c00236 	bltu	r6,r3,8644 <__mcmp+0x50>
    863c:	00800044 	movi	r2,1
    8640:	f800283a 	ret
    8644:	00bfffc4 	movi	r2,-1
    8648:	f800283a 	ret
    864c:	0005883a 	mov	r2,zero
    8650:	f800283a 	ret

00008654 <__mdiff>:
    8654:	28c00417 	ldw	r3,16(r5)
    8658:	30800417 	ldw	r2,16(r6)
    865c:	defffa04 	addi	sp,sp,-24
    8660:	dcc00315 	stw	r19,12(sp)
    8664:	dc800215 	stw	r18,8(sp)
    8668:	dfc00515 	stw	ra,20(sp)
    866c:	dd000415 	stw	r20,16(sp)
    8670:	dc400115 	stw	r17,4(sp)
    8674:	dc000015 	stw	r16,0(sp)
    8678:	1887c83a 	sub	r3,r3,r2
    867c:	2825883a 	mov	r18,r5
    8680:	3027883a 	mov	r19,r6
    8684:	1800141e 	bne	r3,zero,86d8 <__mdiff+0x84>
    8688:	1085883a 	add	r2,r2,r2
    868c:	1085883a 	add	r2,r2,r2
    8690:	2a000504 	addi	r8,r5,20
    8694:	34000504 	addi	r16,r6,20
    8698:	4087883a 	add	r3,r8,r2
    869c:	8085883a 	add	r2,r16,r2
    86a0:	00000106 	br	86a8 <__mdiff+0x54>
    86a4:	40c0592e 	bgeu	r8,r3,880c <__mdiff+0x1b8>
    86a8:	18ffff04 	addi	r3,r3,-4
    86ac:	10bfff04 	addi	r2,r2,-4
    86b0:	19c00017 	ldw	r7,0(r3)
    86b4:	11400017 	ldw	r5,0(r2)
    86b8:	397ffa26 	beq	r7,r5,86a4 <__alt_data_end+0xff0086a4>
    86bc:	3940592e 	bgeu	r7,r5,8824 <__mdiff+0x1d0>
    86c0:	9005883a 	mov	r2,r18
    86c4:	4023883a 	mov	r17,r8
    86c8:	9825883a 	mov	r18,r19
    86cc:	05000044 	movi	r20,1
    86d0:	1027883a 	mov	r19,r2
    86d4:	00000406 	br	86e8 <__mdiff+0x94>
    86d8:	18005616 	blt	r3,zero,8834 <__mdiff+0x1e0>
    86dc:	34400504 	addi	r17,r6,20
    86e0:	2c000504 	addi	r16,r5,20
    86e4:	0029883a 	mov	r20,zero
    86e8:	91400117 	ldw	r5,4(r18)
    86ec:	0007d2c0 	call	7d2c <_Balloc>
    86f0:	92400417 	ldw	r9,16(r18)
    86f4:	9b000417 	ldw	r12,16(r19)
    86f8:	12c00504 	addi	r11,r2,20
    86fc:	4a51883a 	add	r8,r9,r9
    8700:	6319883a 	add	r12,r12,r12
    8704:	4211883a 	add	r8,r8,r8
    8708:	6319883a 	add	r12,r12,r12
    870c:	15000315 	stw	r20,12(r2)
    8710:	8211883a 	add	r8,r16,r8
    8714:	8b19883a 	add	r12,r17,r12
    8718:	0007883a 	mov	r3,zero
    871c:	81400017 	ldw	r5,0(r16)
    8720:	89c00017 	ldw	r7,0(r17)
    8724:	59800104 	addi	r6,r11,4
    8728:	293fffcc 	andi	r4,r5,65535
    872c:	20c7883a 	add	r3,r4,r3
    8730:	393fffcc 	andi	r4,r7,65535
    8734:	1909c83a 	sub	r4,r3,r4
    8738:	280ad43a 	srli	r5,r5,16
    873c:	380ed43a 	srli	r7,r7,16
    8740:	2007d43a 	srai	r3,r4,16
    8744:	213fffcc 	andi	r4,r4,65535
    8748:	29cbc83a 	sub	r5,r5,r7
    874c:	28c7883a 	add	r3,r5,r3
    8750:	180a943a 	slli	r5,r3,16
    8754:	8c400104 	addi	r17,r17,4
    8758:	84000104 	addi	r16,r16,4
    875c:	2908b03a 	or	r4,r5,r4
    8760:	59000015 	stw	r4,0(r11)
    8764:	1807d43a 	srai	r3,r3,16
    8768:	3015883a 	mov	r10,r6
    876c:	3017883a 	mov	r11,r6
    8770:	8b3fea36 	bltu	r17,r12,871c <__alt_data_end+0xff00871c>
    8774:	8200162e 	bgeu	r16,r8,87d0 <__mdiff+0x17c>
    8778:	8017883a 	mov	r11,r16
    877c:	59400017 	ldw	r5,0(r11)
    8780:	31800104 	addi	r6,r6,4
    8784:	5ac00104 	addi	r11,r11,4
    8788:	293fffcc 	andi	r4,r5,65535
    878c:	20c7883a 	add	r3,r4,r3
    8790:	280ed43a 	srli	r7,r5,16
    8794:	180bd43a 	srai	r5,r3,16
    8798:	193fffcc 	andi	r4,r3,65535
    879c:	3947883a 	add	r3,r7,r5
    87a0:	180a943a 	slli	r5,r3,16
    87a4:	1807d43a 	srai	r3,r3,16
    87a8:	2908b03a 	or	r4,r5,r4
    87ac:	313fff15 	stw	r4,-4(r6)
    87b0:	5a3ff236 	bltu	r11,r8,877c <__alt_data_end+0xff00877c>
    87b4:	0406303a 	nor	r3,zero,r16
    87b8:	1a07883a 	add	r3,r3,r8
    87bc:	1806d0ba 	srli	r3,r3,2
    87c0:	18c00044 	addi	r3,r3,1
    87c4:	18c7883a 	add	r3,r3,r3
    87c8:	18c7883a 	add	r3,r3,r3
    87cc:	50d5883a 	add	r10,r10,r3
    87d0:	50ffff04 	addi	r3,r10,-4
    87d4:	2000041e 	bne	r4,zero,87e8 <__mdiff+0x194>
    87d8:	18ffff04 	addi	r3,r3,-4
    87dc:	19000017 	ldw	r4,0(r3)
    87e0:	4a7fffc4 	addi	r9,r9,-1
    87e4:	203ffc26 	beq	r4,zero,87d8 <__alt_data_end+0xff0087d8>
    87e8:	12400415 	stw	r9,16(r2)
    87ec:	dfc00517 	ldw	ra,20(sp)
    87f0:	dd000417 	ldw	r20,16(sp)
    87f4:	dcc00317 	ldw	r19,12(sp)
    87f8:	dc800217 	ldw	r18,8(sp)
    87fc:	dc400117 	ldw	r17,4(sp)
    8800:	dc000017 	ldw	r16,0(sp)
    8804:	dec00604 	addi	sp,sp,24
    8808:	f800283a 	ret
    880c:	000b883a 	mov	r5,zero
    8810:	0007d2c0 	call	7d2c <_Balloc>
    8814:	00c00044 	movi	r3,1
    8818:	10c00415 	stw	r3,16(r2)
    881c:	10000515 	stw	zero,20(r2)
    8820:	003ff206 	br	87ec <__alt_data_end+0xff0087ec>
    8824:	8023883a 	mov	r17,r16
    8828:	0029883a 	mov	r20,zero
    882c:	4021883a 	mov	r16,r8
    8830:	003fad06 	br	86e8 <__alt_data_end+0xff0086e8>
    8834:	9005883a 	mov	r2,r18
    8838:	94400504 	addi	r17,r18,20
    883c:	9c000504 	addi	r16,r19,20
    8840:	9825883a 	mov	r18,r19
    8844:	05000044 	movi	r20,1
    8848:	1027883a 	mov	r19,r2
    884c:	003fa606 	br	86e8 <__alt_data_end+0xff0086e8>

00008850 <__ulp>:
    8850:	295ffc2c 	andhi	r5,r5,32752
    8854:	00bf3034 	movhi	r2,64704
    8858:	2887883a 	add	r3,r5,r2
    885c:	00c0020e 	bge	zero,r3,8868 <__ulp+0x18>
    8860:	0005883a 	mov	r2,zero
    8864:	f800283a 	ret
    8868:	00c7c83a 	sub	r3,zero,r3
    886c:	1807d53a 	srai	r3,r3,20
    8870:	008004c4 	movi	r2,19
    8874:	10c00b0e 	bge	r2,r3,88a4 <__ulp+0x54>
    8878:	18bffb04 	addi	r2,r3,-20
    887c:	01000784 	movi	r4,30
    8880:	0007883a 	mov	r3,zero
    8884:	20800516 	blt	r4,r2,889c <__ulp+0x4c>
    8888:	010007c4 	movi	r4,31
    888c:	2089c83a 	sub	r4,r4,r2
    8890:	00800044 	movi	r2,1
    8894:	1104983a 	sll	r2,r2,r4
    8898:	f800283a 	ret
    889c:	00800044 	movi	r2,1
    88a0:	f800283a 	ret
    88a4:	01400234 	movhi	r5,8
    88a8:	28c7d83a 	sra	r3,r5,r3
    88ac:	0005883a 	mov	r2,zero
    88b0:	f800283a 	ret

000088b4 <__b2d>:
    88b4:	defffa04 	addi	sp,sp,-24
    88b8:	dc000015 	stw	r16,0(sp)
    88bc:	24000417 	ldw	r16,16(r4)
    88c0:	dc400115 	stw	r17,4(sp)
    88c4:	24400504 	addi	r17,r4,20
    88c8:	8421883a 	add	r16,r16,r16
    88cc:	8421883a 	add	r16,r16,r16
    88d0:	8c21883a 	add	r16,r17,r16
    88d4:	dc800215 	stw	r18,8(sp)
    88d8:	84bfff17 	ldw	r18,-4(r16)
    88dc:	dd000415 	stw	r20,16(sp)
    88e0:	dcc00315 	stw	r19,12(sp)
    88e4:	9009883a 	mov	r4,r18
    88e8:	2829883a 	mov	r20,r5
    88ec:	dfc00515 	stw	ra,20(sp)
    88f0:	00080200 	call	8020 <__hi0bits>
    88f4:	00c00804 	movi	r3,32
    88f8:	1889c83a 	sub	r4,r3,r2
    88fc:	a1000015 	stw	r4,0(r20)
    8900:	01000284 	movi	r4,10
    8904:	84ffff04 	addi	r19,r16,-4
    8908:	20801216 	blt	r4,r2,8954 <__b2d+0xa0>
    890c:	018002c4 	movi	r6,11
    8910:	308dc83a 	sub	r6,r6,r2
    8914:	9186d83a 	srl	r3,r18,r6
    8918:	18cffc34 	orhi	r3,r3,16368
    891c:	8cc0212e 	bgeu	r17,r19,89a4 <__b2d+0xf0>
    8920:	813ffe17 	ldw	r4,-8(r16)
    8924:	218cd83a 	srl	r6,r4,r6
    8928:	10800544 	addi	r2,r2,21
    892c:	9084983a 	sll	r2,r18,r2
    8930:	1184b03a 	or	r2,r2,r6
    8934:	dfc00517 	ldw	ra,20(sp)
    8938:	dd000417 	ldw	r20,16(sp)
    893c:	dcc00317 	ldw	r19,12(sp)
    8940:	dc800217 	ldw	r18,8(sp)
    8944:	dc400117 	ldw	r17,4(sp)
    8948:	dc000017 	ldw	r16,0(sp)
    894c:	dec00604 	addi	sp,sp,24
    8950:	f800283a 	ret
    8954:	8cc00f2e 	bgeu	r17,r19,8994 <__b2d+0xe0>
    8958:	117ffd44 	addi	r5,r2,-11
    895c:	80bffe17 	ldw	r2,-8(r16)
    8960:	28000e26 	beq	r5,zero,899c <__b2d+0xe8>
    8964:	1949c83a 	sub	r4,r3,r5
    8968:	9164983a 	sll	r18,r18,r5
    896c:	1106d83a 	srl	r3,r2,r4
    8970:	81bffe04 	addi	r6,r16,-8
    8974:	948ffc34 	orhi	r18,r18,16368
    8978:	90c6b03a 	or	r3,r18,r3
    897c:	89800e2e 	bgeu	r17,r6,89b8 <__b2d+0x104>
    8980:	81bffd17 	ldw	r6,-12(r16)
    8984:	1144983a 	sll	r2,r2,r5
    8988:	310ad83a 	srl	r5,r6,r4
    898c:	2884b03a 	or	r2,r5,r2
    8990:	003fe806 	br	8934 <__alt_data_end+0xff008934>
    8994:	10bffd44 	addi	r2,r2,-11
    8998:	1000041e 	bne	r2,zero,89ac <__b2d+0xf8>
    899c:	90cffc34 	orhi	r3,r18,16368
    89a0:	003fe406 	br	8934 <__alt_data_end+0xff008934>
    89a4:	000d883a 	mov	r6,zero
    89a8:	003fdf06 	br	8928 <__alt_data_end+0xff008928>
    89ac:	90a4983a 	sll	r18,r18,r2
    89b0:	0005883a 	mov	r2,zero
    89b4:	003ff906 	br	899c <__alt_data_end+0xff00899c>
    89b8:	1144983a 	sll	r2,r2,r5
    89bc:	003fdd06 	br	8934 <__alt_data_end+0xff008934>

000089c0 <__d2b>:
    89c0:	defff804 	addi	sp,sp,-32
    89c4:	dc000215 	stw	r16,8(sp)
    89c8:	3021883a 	mov	r16,r6
    89cc:	dc400315 	stw	r17,12(sp)
    89d0:	8022907a 	slli	r17,r16,1
    89d4:	dd000615 	stw	r20,24(sp)
    89d8:	2829883a 	mov	r20,r5
    89dc:	01400044 	movi	r5,1
    89e0:	dcc00515 	stw	r19,20(sp)
    89e4:	dc800415 	stw	r18,16(sp)
    89e8:	dfc00715 	stw	ra,28(sp)
    89ec:	3825883a 	mov	r18,r7
    89f0:	8822d57a 	srli	r17,r17,21
    89f4:	0007d2c0 	call	7d2c <_Balloc>
    89f8:	1027883a 	mov	r19,r2
    89fc:	00800434 	movhi	r2,16
    8a00:	10bfffc4 	addi	r2,r2,-1
    8a04:	808c703a 	and	r6,r16,r2
    8a08:	88000126 	beq	r17,zero,8a10 <__d2b+0x50>
    8a0c:	31800434 	orhi	r6,r6,16
    8a10:	d9800015 	stw	r6,0(sp)
    8a14:	a0002426 	beq	r20,zero,8aa8 <__d2b+0xe8>
    8a18:	d9000104 	addi	r4,sp,4
    8a1c:	dd000115 	stw	r20,4(sp)
    8a20:	00080880 	call	8088 <__lo0bits>
    8a24:	d8c00017 	ldw	r3,0(sp)
    8a28:	10002f1e 	bne	r2,zero,8ae8 <__d2b+0x128>
    8a2c:	d9000117 	ldw	r4,4(sp)
    8a30:	99000515 	stw	r4,20(r19)
    8a34:	1821003a 	cmpeq	r16,r3,zero
    8a38:	01000084 	movi	r4,2
    8a3c:	2421c83a 	sub	r16,r4,r16
    8a40:	98c00615 	stw	r3,24(r19)
    8a44:	9c000415 	stw	r16,16(r19)
    8a48:	88001f1e 	bne	r17,zero,8ac8 <__d2b+0x108>
    8a4c:	10bef384 	addi	r2,r2,-1074
    8a50:	90800015 	stw	r2,0(r18)
    8a54:	00900034 	movhi	r2,16384
    8a58:	10bfffc4 	addi	r2,r2,-1
    8a5c:	8085883a 	add	r2,r16,r2
    8a60:	1085883a 	add	r2,r2,r2
    8a64:	1085883a 	add	r2,r2,r2
    8a68:	9885883a 	add	r2,r19,r2
    8a6c:	11000517 	ldw	r4,20(r2)
    8a70:	8020917a 	slli	r16,r16,5
    8a74:	00080200 	call	8020 <__hi0bits>
    8a78:	d8c00817 	ldw	r3,32(sp)
    8a7c:	8085c83a 	sub	r2,r16,r2
    8a80:	18800015 	stw	r2,0(r3)
    8a84:	9805883a 	mov	r2,r19
    8a88:	dfc00717 	ldw	ra,28(sp)
    8a8c:	dd000617 	ldw	r20,24(sp)
    8a90:	dcc00517 	ldw	r19,20(sp)
    8a94:	dc800417 	ldw	r18,16(sp)
    8a98:	dc400317 	ldw	r17,12(sp)
    8a9c:	dc000217 	ldw	r16,8(sp)
    8aa0:	dec00804 	addi	sp,sp,32
    8aa4:	f800283a 	ret
    8aa8:	d809883a 	mov	r4,sp
    8aac:	00080880 	call	8088 <__lo0bits>
    8ab0:	d8c00017 	ldw	r3,0(sp)
    8ab4:	04000044 	movi	r16,1
    8ab8:	9c000415 	stw	r16,16(r19)
    8abc:	98c00515 	stw	r3,20(r19)
    8ac0:	10800804 	addi	r2,r2,32
    8ac4:	883fe126 	beq	r17,zero,8a4c <__alt_data_end+0xff008a4c>
    8ac8:	00c00d44 	movi	r3,53
    8acc:	8c7ef344 	addi	r17,r17,-1075
    8ad0:	88a3883a 	add	r17,r17,r2
    8ad4:	1885c83a 	sub	r2,r3,r2
    8ad8:	d8c00817 	ldw	r3,32(sp)
    8adc:	94400015 	stw	r17,0(r18)
    8ae0:	18800015 	stw	r2,0(r3)
    8ae4:	003fe706 	br	8a84 <__alt_data_end+0xff008a84>
    8ae8:	01000804 	movi	r4,32
    8aec:	2089c83a 	sub	r4,r4,r2
    8af0:	1908983a 	sll	r4,r3,r4
    8af4:	d9400117 	ldw	r5,4(sp)
    8af8:	1886d83a 	srl	r3,r3,r2
    8afc:	2148b03a 	or	r4,r4,r5
    8b00:	99000515 	stw	r4,20(r19)
    8b04:	d8c00015 	stw	r3,0(sp)
    8b08:	003fca06 	br	8a34 <__alt_data_end+0xff008a34>

00008b0c <__ratio>:
    8b0c:	defff904 	addi	sp,sp,-28
    8b10:	dc400315 	stw	r17,12(sp)
    8b14:	2823883a 	mov	r17,r5
    8b18:	d9400104 	addi	r5,sp,4
    8b1c:	dfc00615 	stw	ra,24(sp)
    8b20:	dcc00515 	stw	r19,20(sp)
    8b24:	dc800415 	stw	r18,16(sp)
    8b28:	2027883a 	mov	r19,r4
    8b2c:	dc000215 	stw	r16,8(sp)
    8b30:	00088b40 	call	88b4 <__b2d>
    8b34:	d80b883a 	mov	r5,sp
    8b38:	8809883a 	mov	r4,r17
    8b3c:	1025883a 	mov	r18,r2
    8b40:	1821883a 	mov	r16,r3
    8b44:	00088b40 	call	88b4 <__b2d>
    8b48:	8a000417 	ldw	r8,16(r17)
    8b4c:	99000417 	ldw	r4,16(r19)
    8b50:	d9400117 	ldw	r5,4(sp)
    8b54:	2209c83a 	sub	r4,r4,r8
    8b58:	2010917a 	slli	r8,r4,5
    8b5c:	d9000017 	ldw	r4,0(sp)
    8b60:	2909c83a 	sub	r4,r5,r4
    8b64:	4109883a 	add	r4,r8,r4
    8b68:	01000e0e 	bge	zero,r4,8ba4 <__ratio+0x98>
    8b6c:	2008953a 	slli	r4,r4,20
    8b70:	2421883a 	add	r16,r4,r16
    8b74:	100d883a 	mov	r6,r2
    8b78:	180f883a 	mov	r7,r3
    8b7c:	9009883a 	mov	r4,r18
    8b80:	800b883a 	mov	r5,r16
    8b84:	000c9a40 	call	c9a4 <__divdf3>
    8b88:	dfc00617 	ldw	ra,24(sp)
    8b8c:	dcc00517 	ldw	r19,20(sp)
    8b90:	dc800417 	ldw	r18,16(sp)
    8b94:	dc400317 	ldw	r17,12(sp)
    8b98:	dc000217 	ldw	r16,8(sp)
    8b9c:	dec00704 	addi	sp,sp,28
    8ba0:	f800283a 	ret
    8ba4:	2008953a 	slli	r4,r4,20
    8ba8:	1907c83a 	sub	r3,r3,r4
    8bac:	003ff106 	br	8b74 <__alt_data_end+0xff008b74>

00008bb0 <_mprec_log10>:
    8bb0:	defffe04 	addi	sp,sp,-8
    8bb4:	dc000015 	stw	r16,0(sp)
    8bb8:	dfc00115 	stw	ra,4(sp)
    8bbc:	008005c4 	movi	r2,23
    8bc0:	2021883a 	mov	r16,r4
    8bc4:	11000d0e 	bge	r2,r4,8bfc <_mprec_log10+0x4c>
    8bc8:	0005883a 	mov	r2,zero
    8bcc:	00cffc34 	movhi	r3,16368
    8bd0:	843fffc4 	addi	r16,r16,-1
    8bd4:	000d883a 	mov	r6,zero
    8bd8:	01d00934 	movhi	r7,16420
    8bdc:	1009883a 	mov	r4,r2
    8be0:	180b883a 	mov	r5,r3
    8be4:	000d4e40 	call	d4e4 <__muldf3>
    8be8:	803ff91e 	bne	r16,zero,8bd0 <__alt_data_end+0xff008bd0>
    8bec:	dfc00117 	ldw	ra,4(sp)
    8bf0:	dc000017 	ldw	r16,0(sp)
    8bf4:	dec00204 	addi	sp,sp,8
    8bf8:	f800283a 	ret
    8bfc:	202090fa 	slli	r16,r4,3
    8c00:	00800074 	movhi	r2,1
    8c04:	10823004 	addi	r2,r2,2240
    8c08:	1421883a 	add	r16,r2,r16
    8c0c:	80800017 	ldw	r2,0(r16)
    8c10:	80c00117 	ldw	r3,4(r16)
    8c14:	dfc00117 	ldw	ra,4(sp)
    8c18:	dc000017 	ldw	r16,0(sp)
    8c1c:	dec00204 	addi	sp,sp,8
    8c20:	f800283a 	ret

00008c24 <__copybits>:
    8c24:	297fffc4 	addi	r5,r5,-1
    8c28:	280fd17a 	srai	r7,r5,5
    8c2c:	30c00417 	ldw	r3,16(r6)
    8c30:	30800504 	addi	r2,r6,20
    8c34:	39c00044 	addi	r7,r7,1
    8c38:	18c7883a 	add	r3,r3,r3
    8c3c:	39cf883a 	add	r7,r7,r7
    8c40:	18c7883a 	add	r3,r3,r3
    8c44:	39cf883a 	add	r7,r7,r7
    8c48:	10c7883a 	add	r3,r2,r3
    8c4c:	21cf883a 	add	r7,r4,r7
    8c50:	10c00d2e 	bgeu	r2,r3,8c88 <__copybits+0x64>
    8c54:	200b883a 	mov	r5,r4
    8c58:	12000017 	ldw	r8,0(r2)
    8c5c:	29400104 	addi	r5,r5,4
    8c60:	10800104 	addi	r2,r2,4
    8c64:	2a3fff15 	stw	r8,-4(r5)
    8c68:	10fffb36 	bltu	r2,r3,8c58 <__alt_data_end+0xff008c58>
    8c6c:	1985c83a 	sub	r2,r3,r6
    8c70:	10bffac4 	addi	r2,r2,-21
    8c74:	1004d0ba 	srli	r2,r2,2
    8c78:	10800044 	addi	r2,r2,1
    8c7c:	1085883a 	add	r2,r2,r2
    8c80:	1085883a 	add	r2,r2,r2
    8c84:	2089883a 	add	r4,r4,r2
    8c88:	21c0032e 	bgeu	r4,r7,8c98 <__copybits+0x74>
    8c8c:	20000015 	stw	zero,0(r4)
    8c90:	21000104 	addi	r4,r4,4
    8c94:	21fffd36 	bltu	r4,r7,8c8c <__alt_data_end+0xff008c8c>
    8c98:	f800283a 	ret

00008c9c <__any_on>:
    8c9c:	20c00417 	ldw	r3,16(r4)
    8ca0:	2805d17a 	srai	r2,r5,5
    8ca4:	21000504 	addi	r4,r4,20
    8ca8:	18800d0e 	bge	r3,r2,8ce0 <__any_on+0x44>
    8cac:	18c7883a 	add	r3,r3,r3
    8cb0:	18c7883a 	add	r3,r3,r3
    8cb4:	20c7883a 	add	r3,r4,r3
    8cb8:	20c0192e 	bgeu	r4,r3,8d20 <__any_on+0x84>
    8cbc:	18bfff17 	ldw	r2,-4(r3)
    8cc0:	18ffff04 	addi	r3,r3,-4
    8cc4:	1000041e 	bne	r2,zero,8cd8 <__any_on+0x3c>
    8cc8:	20c0142e 	bgeu	r4,r3,8d1c <__any_on+0x80>
    8ccc:	18ffff04 	addi	r3,r3,-4
    8cd0:	19400017 	ldw	r5,0(r3)
    8cd4:	283ffc26 	beq	r5,zero,8cc8 <__alt_data_end+0xff008cc8>
    8cd8:	00800044 	movi	r2,1
    8cdc:	f800283a 	ret
    8ce0:	10c00a0e 	bge	r2,r3,8d0c <__any_on+0x70>
    8ce4:	1085883a 	add	r2,r2,r2
    8ce8:	1085883a 	add	r2,r2,r2
    8cec:	294007cc 	andi	r5,r5,31
    8cf0:	2087883a 	add	r3,r4,r2
    8cf4:	283ff026 	beq	r5,zero,8cb8 <__alt_data_end+0xff008cb8>
    8cf8:	19800017 	ldw	r6,0(r3)
    8cfc:	3144d83a 	srl	r2,r6,r5
    8d00:	114a983a 	sll	r5,r2,r5
    8d04:	317ff41e 	bne	r6,r5,8cd8 <__alt_data_end+0xff008cd8>
    8d08:	003feb06 	br	8cb8 <__alt_data_end+0xff008cb8>
    8d0c:	1085883a 	add	r2,r2,r2
    8d10:	1085883a 	add	r2,r2,r2
    8d14:	2087883a 	add	r3,r4,r2
    8d18:	003fe706 	br	8cb8 <__alt_data_end+0xff008cb8>
    8d1c:	f800283a 	ret
    8d20:	0005883a 	mov	r2,zero
    8d24:	f800283a 	ret

00008d28 <_realloc_r>:
    8d28:	defff604 	addi	sp,sp,-40
    8d2c:	dc800215 	stw	r18,8(sp)
    8d30:	dfc00915 	stw	ra,36(sp)
    8d34:	df000815 	stw	fp,32(sp)
    8d38:	ddc00715 	stw	r23,28(sp)
    8d3c:	dd800615 	stw	r22,24(sp)
    8d40:	dd400515 	stw	r21,20(sp)
    8d44:	dd000415 	stw	r20,16(sp)
    8d48:	dcc00315 	stw	r19,12(sp)
    8d4c:	dc400115 	stw	r17,4(sp)
    8d50:	dc000015 	stw	r16,0(sp)
    8d54:	3025883a 	mov	r18,r6
    8d58:	2800b726 	beq	r5,zero,9038 <_realloc_r+0x310>
    8d5c:	282b883a 	mov	r21,r5
    8d60:	2029883a 	mov	r20,r4
    8d64:	000eac80 	call	eac8 <__malloc_lock>
    8d68:	a8bfff17 	ldw	r2,-4(r21)
    8d6c:	043fff04 	movi	r16,-4
    8d70:	90c002c4 	addi	r3,r18,11
    8d74:	01000584 	movi	r4,22
    8d78:	acfffe04 	addi	r19,r21,-8
    8d7c:	1420703a 	and	r16,r2,r16
    8d80:	20c0332e 	bgeu	r4,r3,8e50 <_realloc_r+0x128>
    8d84:	047ffe04 	movi	r17,-8
    8d88:	1c62703a 	and	r17,r3,r17
    8d8c:	8807883a 	mov	r3,r17
    8d90:	88005816 	blt	r17,zero,8ef4 <_realloc_r+0x1cc>
    8d94:	8c805736 	bltu	r17,r18,8ef4 <_realloc_r+0x1cc>
    8d98:	80c0300e 	bge	r16,r3,8e5c <_realloc_r+0x134>
    8d9c:	07000074 	movhi	fp,1
    8da0:	e702b104 	addi	fp,fp,2756
    8da4:	e1c00217 	ldw	r7,8(fp)
    8da8:	9c09883a 	add	r4,r19,r16
    8dac:	22000117 	ldw	r8,4(r4)
    8db0:	21c06326 	beq	r4,r7,8f40 <_realloc_r+0x218>
    8db4:	017fff84 	movi	r5,-2
    8db8:	414a703a 	and	r5,r8,r5
    8dbc:	214b883a 	add	r5,r4,r5
    8dc0:	29800117 	ldw	r6,4(r5)
    8dc4:	3180004c 	andi	r6,r6,1
    8dc8:	30003f26 	beq	r6,zero,8ec8 <_realloc_r+0x1a0>
    8dcc:	1080004c 	andi	r2,r2,1
    8dd0:	10008326 	beq	r2,zero,8fe0 <_realloc_r+0x2b8>
    8dd4:	900b883a 	mov	r5,r18
    8dd8:	a009883a 	mov	r4,r20
    8ddc:	0001e400 	call	1e40 <_malloc_r>
    8de0:	1025883a 	mov	r18,r2
    8de4:	10011e26 	beq	r2,zero,9260 <_realloc_r+0x538>
    8de8:	a93fff17 	ldw	r4,-4(r21)
    8dec:	10fffe04 	addi	r3,r2,-8
    8df0:	00bfff84 	movi	r2,-2
    8df4:	2084703a 	and	r2,r4,r2
    8df8:	9885883a 	add	r2,r19,r2
    8dfc:	1880ee26 	beq	r3,r2,91b8 <_realloc_r+0x490>
    8e00:	81bfff04 	addi	r6,r16,-4
    8e04:	00800904 	movi	r2,36
    8e08:	1180b836 	bltu	r2,r6,90ec <_realloc_r+0x3c4>
    8e0c:	00c004c4 	movi	r3,19
    8e10:	19809636 	bltu	r3,r6,906c <_realloc_r+0x344>
    8e14:	9005883a 	mov	r2,r18
    8e18:	a807883a 	mov	r3,r21
    8e1c:	19000017 	ldw	r4,0(r3)
    8e20:	11000015 	stw	r4,0(r2)
    8e24:	19000117 	ldw	r4,4(r3)
    8e28:	11000115 	stw	r4,4(r2)
    8e2c:	18c00217 	ldw	r3,8(r3)
    8e30:	10c00215 	stw	r3,8(r2)
    8e34:	a80b883a 	mov	r5,r21
    8e38:	a009883a 	mov	r4,r20
    8e3c:	0006c900 	call	6c90 <_free_r>
    8e40:	a009883a 	mov	r4,r20
    8e44:	000eacc0 	call	eacc <__malloc_unlock>
    8e48:	9005883a 	mov	r2,r18
    8e4c:	00001206 	br	8e98 <_realloc_r+0x170>
    8e50:	00c00404 	movi	r3,16
    8e54:	1823883a 	mov	r17,r3
    8e58:	003fce06 	br	8d94 <__alt_data_end+0xff008d94>
    8e5c:	a825883a 	mov	r18,r21
    8e60:	8445c83a 	sub	r2,r16,r17
    8e64:	00c003c4 	movi	r3,15
    8e68:	18802636 	bltu	r3,r2,8f04 <_realloc_r+0x1dc>
    8e6c:	99800117 	ldw	r6,4(r19)
    8e70:	9c07883a 	add	r3,r19,r16
    8e74:	3180004c 	andi	r6,r6,1
    8e78:	3420b03a 	or	r16,r6,r16
    8e7c:	9c000115 	stw	r16,4(r19)
    8e80:	18800117 	ldw	r2,4(r3)
    8e84:	10800054 	ori	r2,r2,1
    8e88:	18800115 	stw	r2,4(r3)
    8e8c:	a009883a 	mov	r4,r20
    8e90:	000eacc0 	call	eacc <__malloc_unlock>
    8e94:	9005883a 	mov	r2,r18
    8e98:	dfc00917 	ldw	ra,36(sp)
    8e9c:	df000817 	ldw	fp,32(sp)
    8ea0:	ddc00717 	ldw	r23,28(sp)
    8ea4:	dd800617 	ldw	r22,24(sp)
    8ea8:	dd400517 	ldw	r21,20(sp)
    8eac:	dd000417 	ldw	r20,16(sp)
    8eb0:	dcc00317 	ldw	r19,12(sp)
    8eb4:	dc800217 	ldw	r18,8(sp)
    8eb8:	dc400117 	ldw	r17,4(sp)
    8ebc:	dc000017 	ldw	r16,0(sp)
    8ec0:	dec00a04 	addi	sp,sp,40
    8ec4:	f800283a 	ret
    8ec8:	017fff04 	movi	r5,-4
    8ecc:	414a703a 	and	r5,r8,r5
    8ed0:	814d883a 	add	r6,r16,r5
    8ed4:	30c01f16 	blt	r6,r3,8f54 <_realloc_r+0x22c>
    8ed8:	20800317 	ldw	r2,12(r4)
    8edc:	20c00217 	ldw	r3,8(r4)
    8ee0:	a825883a 	mov	r18,r21
    8ee4:	3021883a 	mov	r16,r6
    8ee8:	18800315 	stw	r2,12(r3)
    8eec:	10c00215 	stw	r3,8(r2)
    8ef0:	003fdb06 	br	8e60 <__alt_data_end+0xff008e60>
    8ef4:	00800304 	movi	r2,12
    8ef8:	a0800015 	stw	r2,0(r20)
    8efc:	0005883a 	mov	r2,zero
    8f00:	003fe506 	br	8e98 <__alt_data_end+0xff008e98>
    8f04:	98c00117 	ldw	r3,4(r19)
    8f08:	9c4b883a 	add	r5,r19,r17
    8f0c:	11000054 	ori	r4,r2,1
    8f10:	18c0004c 	andi	r3,r3,1
    8f14:	1c62b03a 	or	r17,r3,r17
    8f18:	9c400115 	stw	r17,4(r19)
    8f1c:	29000115 	stw	r4,4(r5)
    8f20:	2885883a 	add	r2,r5,r2
    8f24:	10c00117 	ldw	r3,4(r2)
    8f28:	29400204 	addi	r5,r5,8
    8f2c:	a009883a 	mov	r4,r20
    8f30:	18c00054 	ori	r3,r3,1
    8f34:	10c00115 	stw	r3,4(r2)
    8f38:	0006c900 	call	6c90 <_free_r>
    8f3c:	003fd306 	br	8e8c <__alt_data_end+0xff008e8c>
    8f40:	017fff04 	movi	r5,-4
    8f44:	414a703a 	and	r5,r8,r5
    8f48:	89800404 	addi	r6,r17,16
    8f4c:	8151883a 	add	r8,r16,r5
    8f50:	4180590e 	bge	r8,r6,90b8 <_realloc_r+0x390>
    8f54:	1080004c 	andi	r2,r2,1
    8f58:	103f9e1e 	bne	r2,zero,8dd4 <__alt_data_end+0xff008dd4>
    8f5c:	adbffe17 	ldw	r22,-8(r21)
    8f60:	00bfff04 	movi	r2,-4
    8f64:	9dadc83a 	sub	r22,r19,r22
    8f68:	b1800117 	ldw	r6,4(r22)
    8f6c:	3084703a 	and	r2,r6,r2
    8f70:	20002026 	beq	r4,zero,8ff4 <_realloc_r+0x2cc>
    8f74:	80af883a 	add	r23,r16,r2
    8f78:	b96f883a 	add	r23,r23,r5
    8f7c:	21c05f26 	beq	r4,r7,90fc <_realloc_r+0x3d4>
    8f80:	b8c01c16 	blt	r23,r3,8ff4 <_realloc_r+0x2cc>
    8f84:	20800317 	ldw	r2,12(r4)
    8f88:	20c00217 	ldw	r3,8(r4)
    8f8c:	81bfff04 	addi	r6,r16,-4
    8f90:	01000904 	movi	r4,36
    8f94:	18800315 	stw	r2,12(r3)
    8f98:	10c00215 	stw	r3,8(r2)
    8f9c:	b0c00217 	ldw	r3,8(r22)
    8fa0:	b0800317 	ldw	r2,12(r22)
    8fa4:	b4800204 	addi	r18,r22,8
    8fa8:	18800315 	stw	r2,12(r3)
    8fac:	10c00215 	stw	r3,8(r2)
    8fb0:	21801b36 	bltu	r4,r6,9020 <_realloc_r+0x2f8>
    8fb4:	008004c4 	movi	r2,19
    8fb8:	1180352e 	bgeu	r2,r6,9090 <_realloc_r+0x368>
    8fbc:	a8800017 	ldw	r2,0(r21)
    8fc0:	b0800215 	stw	r2,8(r22)
    8fc4:	a8800117 	ldw	r2,4(r21)
    8fc8:	b0800315 	stw	r2,12(r22)
    8fcc:	008006c4 	movi	r2,27
    8fd0:	11807f36 	bltu	r2,r6,91d0 <_realloc_r+0x4a8>
    8fd4:	b0800404 	addi	r2,r22,16
    8fd8:	ad400204 	addi	r21,r21,8
    8fdc:	00002d06 	br	9094 <_realloc_r+0x36c>
    8fe0:	adbffe17 	ldw	r22,-8(r21)
    8fe4:	00bfff04 	movi	r2,-4
    8fe8:	9dadc83a 	sub	r22,r19,r22
    8fec:	b1000117 	ldw	r4,4(r22)
    8ff0:	2084703a 	and	r2,r4,r2
    8ff4:	b03f7726 	beq	r22,zero,8dd4 <__alt_data_end+0xff008dd4>
    8ff8:	80af883a 	add	r23,r16,r2
    8ffc:	b8ff7516 	blt	r23,r3,8dd4 <__alt_data_end+0xff008dd4>
    9000:	b0800317 	ldw	r2,12(r22)
    9004:	b0c00217 	ldw	r3,8(r22)
    9008:	81bfff04 	addi	r6,r16,-4
    900c:	01000904 	movi	r4,36
    9010:	18800315 	stw	r2,12(r3)
    9014:	10c00215 	stw	r3,8(r2)
    9018:	b4800204 	addi	r18,r22,8
    901c:	21bfe52e 	bgeu	r4,r6,8fb4 <__alt_data_end+0xff008fb4>
    9020:	a80b883a 	mov	r5,r21
    9024:	9009883a 	mov	r4,r18
    9028:	0007aa80 	call	7aa8 <memmove>
    902c:	b821883a 	mov	r16,r23
    9030:	b027883a 	mov	r19,r22
    9034:	003f8a06 	br	8e60 <__alt_data_end+0xff008e60>
    9038:	300b883a 	mov	r5,r6
    903c:	dfc00917 	ldw	ra,36(sp)
    9040:	df000817 	ldw	fp,32(sp)
    9044:	ddc00717 	ldw	r23,28(sp)
    9048:	dd800617 	ldw	r22,24(sp)
    904c:	dd400517 	ldw	r21,20(sp)
    9050:	dd000417 	ldw	r20,16(sp)
    9054:	dcc00317 	ldw	r19,12(sp)
    9058:	dc800217 	ldw	r18,8(sp)
    905c:	dc400117 	ldw	r17,4(sp)
    9060:	dc000017 	ldw	r16,0(sp)
    9064:	dec00a04 	addi	sp,sp,40
    9068:	0001e401 	jmpi	1e40 <_malloc_r>
    906c:	a8c00017 	ldw	r3,0(r21)
    9070:	90c00015 	stw	r3,0(r18)
    9074:	a8c00117 	ldw	r3,4(r21)
    9078:	90c00115 	stw	r3,4(r18)
    907c:	00c006c4 	movi	r3,27
    9080:	19804536 	bltu	r3,r6,9198 <_realloc_r+0x470>
    9084:	90800204 	addi	r2,r18,8
    9088:	a8c00204 	addi	r3,r21,8
    908c:	003f6306 	br	8e1c <__alt_data_end+0xff008e1c>
    9090:	9005883a 	mov	r2,r18
    9094:	a8c00017 	ldw	r3,0(r21)
    9098:	b821883a 	mov	r16,r23
    909c:	b027883a 	mov	r19,r22
    90a0:	10c00015 	stw	r3,0(r2)
    90a4:	a8c00117 	ldw	r3,4(r21)
    90a8:	10c00115 	stw	r3,4(r2)
    90ac:	a8c00217 	ldw	r3,8(r21)
    90b0:	10c00215 	stw	r3,8(r2)
    90b4:	003f6a06 	br	8e60 <__alt_data_end+0xff008e60>
    90b8:	9c67883a 	add	r19,r19,r17
    90bc:	4445c83a 	sub	r2,r8,r17
    90c0:	e4c00215 	stw	r19,8(fp)
    90c4:	10800054 	ori	r2,r2,1
    90c8:	98800115 	stw	r2,4(r19)
    90cc:	a8bfff17 	ldw	r2,-4(r21)
    90d0:	a009883a 	mov	r4,r20
    90d4:	1080004c 	andi	r2,r2,1
    90d8:	1462b03a 	or	r17,r2,r17
    90dc:	ac7fff15 	stw	r17,-4(r21)
    90e0:	000eacc0 	call	eacc <__malloc_unlock>
    90e4:	a805883a 	mov	r2,r21
    90e8:	003f6b06 	br	8e98 <__alt_data_end+0xff008e98>
    90ec:	a80b883a 	mov	r5,r21
    90f0:	9009883a 	mov	r4,r18
    90f4:	0007aa80 	call	7aa8 <memmove>
    90f8:	003f4e06 	br	8e34 <__alt_data_end+0xff008e34>
    90fc:	89000404 	addi	r4,r17,16
    9100:	b93fbc16 	blt	r23,r4,8ff4 <__alt_data_end+0xff008ff4>
    9104:	b0800317 	ldw	r2,12(r22)
    9108:	b0c00217 	ldw	r3,8(r22)
    910c:	81bfff04 	addi	r6,r16,-4
    9110:	01000904 	movi	r4,36
    9114:	18800315 	stw	r2,12(r3)
    9118:	10c00215 	stw	r3,8(r2)
    911c:	b4800204 	addi	r18,r22,8
    9120:	21804336 	bltu	r4,r6,9230 <_realloc_r+0x508>
    9124:	008004c4 	movi	r2,19
    9128:	11803f2e 	bgeu	r2,r6,9228 <_realloc_r+0x500>
    912c:	a8800017 	ldw	r2,0(r21)
    9130:	b0800215 	stw	r2,8(r22)
    9134:	a8800117 	ldw	r2,4(r21)
    9138:	b0800315 	stw	r2,12(r22)
    913c:	008006c4 	movi	r2,27
    9140:	11803f36 	bltu	r2,r6,9240 <_realloc_r+0x518>
    9144:	b0800404 	addi	r2,r22,16
    9148:	ad400204 	addi	r21,r21,8
    914c:	a8c00017 	ldw	r3,0(r21)
    9150:	10c00015 	stw	r3,0(r2)
    9154:	a8c00117 	ldw	r3,4(r21)
    9158:	10c00115 	stw	r3,4(r2)
    915c:	a8c00217 	ldw	r3,8(r21)
    9160:	10c00215 	stw	r3,8(r2)
    9164:	b447883a 	add	r3,r22,r17
    9168:	bc45c83a 	sub	r2,r23,r17
    916c:	e0c00215 	stw	r3,8(fp)
    9170:	10800054 	ori	r2,r2,1
    9174:	18800115 	stw	r2,4(r3)
    9178:	b0800117 	ldw	r2,4(r22)
    917c:	a009883a 	mov	r4,r20
    9180:	1080004c 	andi	r2,r2,1
    9184:	1462b03a 	or	r17,r2,r17
    9188:	b4400115 	stw	r17,4(r22)
    918c:	000eacc0 	call	eacc <__malloc_unlock>
    9190:	9005883a 	mov	r2,r18
    9194:	003f4006 	br	8e98 <__alt_data_end+0xff008e98>
    9198:	a8c00217 	ldw	r3,8(r21)
    919c:	90c00215 	stw	r3,8(r18)
    91a0:	a8c00317 	ldw	r3,12(r21)
    91a4:	90c00315 	stw	r3,12(r18)
    91a8:	30801126 	beq	r6,r2,91f0 <_realloc_r+0x4c8>
    91ac:	90800404 	addi	r2,r18,16
    91b0:	a8c00404 	addi	r3,r21,16
    91b4:	003f1906 	br	8e1c <__alt_data_end+0xff008e1c>
    91b8:	90ffff17 	ldw	r3,-4(r18)
    91bc:	00bfff04 	movi	r2,-4
    91c0:	a825883a 	mov	r18,r21
    91c4:	1884703a 	and	r2,r3,r2
    91c8:	80a1883a 	add	r16,r16,r2
    91cc:	003f2406 	br	8e60 <__alt_data_end+0xff008e60>
    91d0:	a8800217 	ldw	r2,8(r21)
    91d4:	b0800415 	stw	r2,16(r22)
    91d8:	a8800317 	ldw	r2,12(r21)
    91dc:	b0800515 	stw	r2,20(r22)
    91e0:	31000a26 	beq	r6,r4,920c <_realloc_r+0x4e4>
    91e4:	b0800604 	addi	r2,r22,24
    91e8:	ad400404 	addi	r21,r21,16
    91ec:	003fa906 	br	9094 <__alt_data_end+0xff009094>
    91f0:	a9000417 	ldw	r4,16(r21)
    91f4:	90800604 	addi	r2,r18,24
    91f8:	a8c00604 	addi	r3,r21,24
    91fc:	91000415 	stw	r4,16(r18)
    9200:	a9000517 	ldw	r4,20(r21)
    9204:	91000515 	stw	r4,20(r18)
    9208:	003f0406 	br	8e1c <__alt_data_end+0xff008e1c>
    920c:	a8c00417 	ldw	r3,16(r21)
    9210:	ad400604 	addi	r21,r21,24
    9214:	b0800804 	addi	r2,r22,32
    9218:	b0c00615 	stw	r3,24(r22)
    921c:	a8ffff17 	ldw	r3,-4(r21)
    9220:	b0c00715 	stw	r3,28(r22)
    9224:	003f9b06 	br	9094 <__alt_data_end+0xff009094>
    9228:	9005883a 	mov	r2,r18
    922c:	003fc706 	br	914c <__alt_data_end+0xff00914c>
    9230:	a80b883a 	mov	r5,r21
    9234:	9009883a 	mov	r4,r18
    9238:	0007aa80 	call	7aa8 <memmove>
    923c:	003fc906 	br	9164 <__alt_data_end+0xff009164>
    9240:	a8800217 	ldw	r2,8(r21)
    9244:	b0800415 	stw	r2,16(r22)
    9248:	a8800317 	ldw	r2,12(r21)
    924c:	b0800515 	stw	r2,20(r22)
    9250:	31000726 	beq	r6,r4,9270 <_realloc_r+0x548>
    9254:	b0800604 	addi	r2,r22,24
    9258:	ad400404 	addi	r21,r21,16
    925c:	003fbb06 	br	914c <__alt_data_end+0xff00914c>
    9260:	a009883a 	mov	r4,r20
    9264:	000eacc0 	call	eacc <__malloc_unlock>
    9268:	0005883a 	mov	r2,zero
    926c:	003f0a06 	br	8e98 <__alt_data_end+0xff008e98>
    9270:	a8c00417 	ldw	r3,16(r21)
    9274:	ad400604 	addi	r21,r21,24
    9278:	b0800804 	addi	r2,r22,32
    927c:	b0c00615 	stw	r3,24(r22)
    9280:	a8ffff17 	ldw	r3,-4(r21)
    9284:	b0c00715 	stw	r3,28(r22)
    9288:	003fb006 	br	914c <__alt_data_end+0xff00914c>

0000928c <__fpclassifyd>:
    928c:	00a00034 	movhi	r2,32768
    9290:	10bfffc4 	addi	r2,r2,-1
    9294:	2884703a 	and	r2,r5,r2
    9298:	10000726 	beq	r2,zero,92b8 <__fpclassifyd+0x2c>
    929c:	00fffc34 	movhi	r3,65520
    92a0:	019ff834 	movhi	r6,32736
    92a4:	28c7883a 	add	r3,r5,r3
    92a8:	31bfffc4 	addi	r6,r6,-1
    92ac:	30c00536 	bltu	r6,r3,92c4 <__fpclassifyd+0x38>
    92b0:	00800104 	movi	r2,4
    92b4:	f800283a 	ret
    92b8:	2000021e 	bne	r4,zero,92c4 <__fpclassifyd+0x38>
    92bc:	00800084 	movi	r2,2
    92c0:	f800283a 	ret
    92c4:	00dffc34 	movhi	r3,32752
    92c8:	019ff834 	movhi	r6,32736
    92cc:	28cb883a 	add	r5,r5,r3
    92d0:	31bfffc4 	addi	r6,r6,-1
    92d4:	317ff62e 	bgeu	r6,r5,92b0 <__alt_data_end+0xff0092b0>
    92d8:	01400434 	movhi	r5,16
    92dc:	297fffc4 	addi	r5,r5,-1
    92e0:	28800236 	bltu	r5,r2,92ec <__fpclassifyd+0x60>
    92e4:	008000c4 	movi	r2,3
    92e8:	f800283a 	ret
    92ec:	10c00226 	beq	r2,r3,92f8 <__fpclassifyd+0x6c>
    92f0:	0005883a 	mov	r2,zero
    92f4:	f800283a 	ret
    92f8:	2005003a 	cmpeq	r2,r4,zero
    92fc:	f800283a 	ret

00009300 <__sread>:
    9300:	defffe04 	addi	sp,sp,-8
    9304:	dc000015 	stw	r16,0(sp)
    9308:	2821883a 	mov	r16,r5
    930c:	2940038f 	ldh	r5,14(r5)
    9310:	dfc00115 	stw	ra,4(sp)
    9314:	000b0f40 	call	b0f4 <_read_r>
    9318:	10000716 	blt	r2,zero,9338 <__sread+0x38>
    931c:	80c01417 	ldw	r3,80(r16)
    9320:	1887883a 	add	r3,r3,r2
    9324:	80c01415 	stw	r3,80(r16)
    9328:	dfc00117 	ldw	ra,4(sp)
    932c:	dc000017 	ldw	r16,0(sp)
    9330:	dec00204 	addi	sp,sp,8
    9334:	f800283a 	ret
    9338:	80c0030b 	ldhu	r3,12(r16)
    933c:	18fbffcc 	andi	r3,r3,61439
    9340:	80c0030d 	sth	r3,12(r16)
    9344:	dfc00117 	ldw	ra,4(sp)
    9348:	dc000017 	ldw	r16,0(sp)
    934c:	dec00204 	addi	sp,sp,8
    9350:	f800283a 	ret

00009354 <__seofread>:
    9354:	0005883a 	mov	r2,zero
    9358:	f800283a 	ret

0000935c <__swrite>:
    935c:	2880030b 	ldhu	r2,12(r5)
    9360:	defffb04 	addi	sp,sp,-20
    9364:	dcc00315 	stw	r19,12(sp)
    9368:	dc800215 	stw	r18,8(sp)
    936c:	dc400115 	stw	r17,4(sp)
    9370:	dc000015 	stw	r16,0(sp)
    9374:	dfc00415 	stw	ra,16(sp)
    9378:	10c0400c 	andi	r3,r2,256
    937c:	2821883a 	mov	r16,r5
    9380:	2023883a 	mov	r17,r4
    9384:	3025883a 	mov	r18,r6
    9388:	3827883a 	mov	r19,r7
    938c:	18000526 	beq	r3,zero,93a4 <__swrite+0x48>
    9390:	2940038f 	ldh	r5,14(r5)
    9394:	01c00084 	movi	r7,2
    9398:	000d883a 	mov	r6,zero
    939c:	000b0940 	call	b094 <_lseek_r>
    93a0:	8080030b 	ldhu	r2,12(r16)
    93a4:	8140038f 	ldh	r5,14(r16)
    93a8:	10bbffcc 	andi	r2,r2,61439
    93ac:	980f883a 	mov	r7,r19
    93b0:	900d883a 	mov	r6,r18
    93b4:	8809883a 	mov	r4,r17
    93b8:	8080030d 	sth	r2,12(r16)
    93bc:	dfc00417 	ldw	ra,16(sp)
    93c0:	dcc00317 	ldw	r19,12(sp)
    93c4:	dc800217 	ldw	r18,8(sp)
    93c8:	dc400117 	ldw	r17,4(sp)
    93cc:	dc000017 	ldw	r16,0(sp)
    93d0:	dec00504 	addi	sp,sp,20
    93d4:	000ab601 	jmpi	ab60 <_write_r>

000093d8 <__sseek>:
    93d8:	defffe04 	addi	sp,sp,-8
    93dc:	dc000015 	stw	r16,0(sp)
    93e0:	2821883a 	mov	r16,r5
    93e4:	2940038f 	ldh	r5,14(r5)
    93e8:	dfc00115 	stw	ra,4(sp)
    93ec:	000b0940 	call	b094 <_lseek_r>
    93f0:	00ffffc4 	movi	r3,-1
    93f4:	10c00826 	beq	r2,r3,9418 <__sseek+0x40>
    93f8:	80c0030b 	ldhu	r3,12(r16)
    93fc:	80801415 	stw	r2,80(r16)
    9400:	18c40014 	ori	r3,r3,4096
    9404:	80c0030d 	sth	r3,12(r16)
    9408:	dfc00117 	ldw	ra,4(sp)
    940c:	dc000017 	ldw	r16,0(sp)
    9410:	dec00204 	addi	sp,sp,8
    9414:	f800283a 	ret
    9418:	80c0030b 	ldhu	r3,12(r16)
    941c:	18fbffcc 	andi	r3,r3,61439
    9420:	80c0030d 	sth	r3,12(r16)
    9424:	dfc00117 	ldw	ra,4(sp)
    9428:	dc000017 	ldw	r16,0(sp)
    942c:	dec00204 	addi	sp,sp,8
    9430:	f800283a 	ret

00009434 <__sclose>:
    9434:	2940038f 	ldh	r5,14(r5)
    9438:	000abc01 	jmpi	abc0 <_close_r>

0000943c <strcmp>:
    943c:	2144b03a 	or	r2,r4,r5
    9440:	108000cc 	andi	r2,r2,3
    9444:	1000171e 	bne	r2,zero,94a4 <strcmp+0x68>
    9448:	20800017 	ldw	r2,0(r4)
    944c:	28c00017 	ldw	r3,0(r5)
    9450:	10c0141e 	bne	r2,r3,94a4 <strcmp+0x68>
    9454:	027fbff4 	movhi	r9,65279
    9458:	4a7fbfc4 	addi	r9,r9,-257
    945c:	0086303a 	nor	r3,zero,r2
    9460:	02202074 	movhi	r8,32897
    9464:	1245883a 	add	r2,r2,r9
    9468:	42202004 	addi	r8,r8,-32640
    946c:	10c4703a 	and	r2,r2,r3
    9470:	1204703a 	and	r2,r2,r8
    9474:	10000226 	beq	r2,zero,9480 <strcmp+0x44>
    9478:	00002306 	br	9508 <strcmp+0xcc>
    947c:	1000221e 	bne	r2,zero,9508 <strcmp+0xcc>
    9480:	21000104 	addi	r4,r4,4
    9484:	20c00017 	ldw	r3,0(r4)
    9488:	29400104 	addi	r5,r5,4
    948c:	29800017 	ldw	r6,0(r5)
    9490:	1a4f883a 	add	r7,r3,r9
    9494:	00c4303a 	nor	r2,zero,r3
    9498:	3884703a 	and	r2,r7,r2
    949c:	1204703a 	and	r2,r2,r8
    94a0:	19bff626 	beq	r3,r6,947c <__alt_data_end+0xff00947c>
    94a4:	20800003 	ldbu	r2,0(r4)
    94a8:	10c03fcc 	andi	r3,r2,255
    94ac:	18c0201c 	xori	r3,r3,128
    94b0:	18ffe004 	addi	r3,r3,-128
    94b4:	18000c26 	beq	r3,zero,94e8 <strcmp+0xac>
    94b8:	29800007 	ldb	r6,0(r5)
    94bc:	19800326 	beq	r3,r6,94cc <strcmp+0x90>
    94c0:	00001306 	br	9510 <strcmp+0xd4>
    94c4:	29800007 	ldb	r6,0(r5)
    94c8:	11800b1e 	bne	r2,r6,94f8 <strcmp+0xbc>
    94cc:	21000044 	addi	r4,r4,1
    94d0:	20c00003 	ldbu	r3,0(r4)
    94d4:	29400044 	addi	r5,r5,1
    94d8:	18803fcc 	andi	r2,r3,255
    94dc:	1080201c 	xori	r2,r2,128
    94e0:	10bfe004 	addi	r2,r2,-128
    94e4:	103ff71e 	bne	r2,zero,94c4 <__alt_data_end+0xff0094c4>
    94e8:	0007883a 	mov	r3,zero
    94ec:	28800003 	ldbu	r2,0(r5)
    94f0:	1885c83a 	sub	r2,r3,r2
    94f4:	f800283a 	ret
    94f8:	28800003 	ldbu	r2,0(r5)
    94fc:	18c03fcc 	andi	r3,r3,255
    9500:	1885c83a 	sub	r2,r3,r2
    9504:	f800283a 	ret
    9508:	0005883a 	mov	r2,zero
    950c:	f800283a 	ret
    9510:	10c03fcc 	andi	r3,r2,255
    9514:	003ff506 	br	94ec <__alt_data_end+0xff0094ec>

00009518 <__sprint_r.part.0>:
    9518:	28801917 	ldw	r2,100(r5)
    951c:	defff604 	addi	sp,sp,-40
    9520:	dd400515 	stw	r21,20(sp)
    9524:	dfc00915 	stw	ra,36(sp)
    9528:	df000815 	stw	fp,32(sp)
    952c:	ddc00715 	stw	r23,28(sp)
    9530:	dd800615 	stw	r22,24(sp)
    9534:	dd000415 	stw	r20,16(sp)
    9538:	dcc00315 	stw	r19,12(sp)
    953c:	dc800215 	stw	r18,8(sp)
    9540:	dc400115 	stw	r17,4(sp)
    9544:	dc000015 	stw	r16,0(sp)
    9548:	1088000c 	andi	r2,r2,8192
    954c:	302b883a 	mov	r21,r6
    9550:	10002e26 	beq	r2,zero,960c <__sprint_r.part.0+0xf4>
    9554:	30800217 	ldw	r2,8(r6)
    9558:	35800017 	ldw	r22,0(r6)
    955c:	10002926 	beq	r2,zero,9604 <__sprint_r.part.0+0xec>
    9560:	2827883a 	mov	r19,r5
    9564:	2029883a 	mov	r20,r4
    9568:	b5c00104 	addi	r23,r22,4
    956c:	04bfffc4 	movi	r18,-1
    9570:	bc400017 	ldw	r17,0(r23)
    9574:	b4000017 	ldw	r16,0(r22)
    9578:	0039883a 	mov	fp,zero
    957c:	8822d0ba 	srli	r17,r17,2
    9580:	8800031e 	bne	r17,zero,9590 <__sprint_r.part.0+0x78>
    9584:	00001806 	br	95e8 <__sprint_r.part.0+0xd0>
    9588:	84000104 	addi	r16,r16,4
    958c:	8f001526 	beq	r17,fp,95e4 <__sprint_r.part.0+0xcc>
    9590:	81400017 	ldw	r5,0(r16)
    9594:	980d883a 	mov	r6,r19
    9598:	a009883a 	mov	r4,r20
    959c:	000af400 	call	af40 <_fputwc_r>
    95a0:	e7000044 	addi	fp,fp,1
    95a4:	14bff81e 	bne	r2,r18,9588 <__alt_data_end+0xff009588>
    95a8:	9005883a 	mov	r2,r18
    95ac:	a8000215 	stw	zero,8(r21)
    95b0:	a8000115 	stw	zero,4(r21)
    95b4:	dfc00917 	ldw	ra,36(sp)
    95b8:	df000817 	ldw	fp,32(sp)
    95bc:	ddc00717 	ldw	r23,28(sp)
    95c0:	dd800617 	ldw	r22,24(sp)
    95c4:	dd400517 	ldw	r21,20(sp)
    95c8:	dd000417 	ldw	r20,16(sp)
    95cc:	dcc00317 	ldw	r19,12(sp)
    95d0:	dc800217 	ldw	r18,8(sp)
    95d4:	dc400117 	ldw	r17,4(sp)
    95d8:	dc000017 	ldw	r16,0(sp)
    95dc:	dec00a04 	addi	sp,sp,40
    95e0:	f800283a 	ret
    95e4:	a8800217 	ldw	r2,8(r21)
    95e8:	8c63883a 	add	r17,r17,r17
    95ec:	8c63883a 	add	r17,r17,r17
    95f0:	1445c83a 	sub	r2,r2,r17
    95f4:	a8800215 	stw	r2,8(r21)
    95f8:	b5800204 	addi	r22,r22,8
    95fc:	bdc00204 	addi	r23,r23,8
    9600:	103fdb1e 	bne	r2,zero,9570 <__alt_data_end+0xff009570>
    9604:	0005883a 	mov	r2,zero
    9608:	003fe806 	br	95ac <__alt_data_end+0xff0095ac>
    960c:	0006fa00 	call	6fa0 <__sfvwrite_r>
    9610:	003fe606 	br	95ac <__alt_data_end+0xff0095ac>

00009614 <__sprint_r>:
    9614:	30c00217 	ldw	r3,8(r6)
    9618:	18000126 	beq	r3,zero,9620 <__sprint_r+0xc>
    961c:	00095181 	jmpi	9518 <__sprint_r.part.0>
    9620:	30000115 	stw	zero,4(r6)
    9624:	0005883a 	mov	r2,zero
    9628:	f800283a 	ret

0000962c <___vfiprintf_internal_r>:
    962c:	deffc904 	addi	sp,sp,-220
    9630:	df003515 	stw	fp,212(sp)
    9634:	dd003115 	stw	r20,196(sp)
    9638:	dfc03615 	stw	ra,216(sp)
    963c:	ddc03415 	stw	r23,208(sp)
    9640:	dd803315 	stw	r22,204(sp)
    9644:	dd403215 	stw	r21,200(sp)
    9648:	dcc03015 	stw	r19,192(sp)
    964c:	dc802f15 	stw	r18,188(sp)
    9650:	dc402e15 	stw	r17,184(sp)
    9654:	dc002d15 	stw	r16,180(sp)
    9658:	d9002015 	stw	r4,128(sp)
    965c:	d9c02215 	stw	r7,136(sp)
    9660:	2829883a 	mov	r20,r5
    9664:	3039883a 	mov	fp,r6
    9668:	20000226 	beq	r4,zero,9674 <___vfiprintf_internal_r+0x48>
    966c:	20800e17 	ldw	r2,56(r4)
    9670:	1000cf26 	beq	r2,zero,99b0 <___vfiprintf_internal_r+0x384>
    9674:	a080030b 	ldhu	r2,12(r20)
    9678:	10c8000c 	andi	r3,r2,8192
    967c:	1800061e 	bne	r3,zero,9698 <___vfiprintf_internal_r+0x6c>
    9680:	a1001917 	ldw	r4,100(r20)
    9684:	00f7ffc4 	movi	r3,-8193
    9688:	10880014 	ori	r2,r2,8192
    968c:	20c6703a 	and	r3,r4,r3
    9690:	a080030d 	sth	r2,12(r20)
    9694:	a0c01915 	stw	r3,100(r20)
    9698:	10c0020c 	andi	r3,r2,8
    969c:	1800a926 	beq	r3,zero,9944 <___vfiprintf_internal_r+0x318>
    96a0:	a0c00417 	ldw	r3,16(r20)
    96a4:	1800a726 	beq	r3,zero,9944 <___vfiprintf_internal_r+0x318>
    96a8:	1080068c 	andi	r2,r2,26
    96ac:	00c00284 	movi	r3,10
    96b0:	10c0ac26 	beq	r2,r3,9964 <___vfiprintf_internal_r+0x338>
    96b4:	da801a04 	addi	r10,sp,104
    96b8:	da801e15 	stw	r10,120(sp)
    96bc:	d8801e17 	ldw	r2,120(sp)
    96c0:	da8019c4 	addi	r10,sp,103
    96c4:	05800074 	movhi	r22,1
    96c8:	05c00074 	movhi	r23,1
    96cc:	da801f15 	stw	r10,124(sp)
    96d0:	1295c83a 	sub	r10,r2,r10
    96d4:	b5826604 	addi	r22,r22,2456
    96d8:	bdc26204 	addi	r23,r23,2440
    96dc:	dec01a15 	stw	sp,104(sp)
    96e0:	d8001c15 	stw	zero,112(sp)
    96e4:	d8001b15 	stw	zero,108(sp)
    96e8:	d8002615 	stw	zero,152(sp)
    96ec:	d8002315 	stw	zero,140(sp)
    96f0:	da802715 	stw	r10,156(sp)
    96f4:	d811883a 	mov	r8,sp
    96f8:	dd002115 	stw	r20,132(sp)
    96fc:	e021883a 	mov	r16,fp
    9700:	80800007 	ldb	r2,0(r16)
    9704:	1003ea26 	beq	r2,zero,a6b0 <___vfiprintf_internal_r+0x1084>
    9708:	00c00944 	movi	r3,37
    970c:	8025883a 	mov	r18,r16
    9710:	10c0021e 	bne	r2,r3,971c <___vfiprintf_internal_r+0xf0>
    9714:	00001606 	br	9770 <___vfiprintf_internal_r+0x144>
    9718:	10c00326 	beq	r2,r3,9728 <___vfiprintf_internal_r+0xfc>
    971c:	94800044 	addi	r18,r18,1
    9720:	90800007 	ldb	r2,0(r18)
    9724:	103ffc1e 	bne	r2,zero,9718 <__alt_data_end+0xff009718>
    9728:	9423c83a 	sub	r17,r18,r16
    972c:	88001026 	beq	r17,zero,9770 <___vfiprintf_internal_r+0x144>
    9730:	d8c01c17 	ldw	r3,112(sp)
    9734:	d8801b17 	ldw	r2,108(sp)
    9738:	44000015 	stw	r16,0(r8)
    973c:	88c7883a 	add	r3,r17,r3
    9740:	10800044 	addi	r2,r2,1
    9744:	44400115 	stw	r17,4(r8)
    9748:	d8c01c15 	stw	r3,112(sp)
    974c:	d8801b15 	stw	r2,108(sp)
    9750:	010001c4 	movi	r4,7
    9754:	2080760e 	bge	r4,r2,9930 <___vfiprintf_internal_r+0x304>
    9758:	1803821e 	bne	r3,zero,a564 <___vfiprintf_internal_r+0xf38>
    975c:	da802317 	ldw	r10,140(sp)
    9760:	d8001b15 	stw	zero,108(sp)
    9764:	d811883a 	mov	r8,sp
    9768:	5455883a 	add	r10,r10,r17
    976c:	da802315 	stw	r10,140(sp)
    9770:	90800007 	ldb	r2,0(r18)
    9774:	10044626 	beq	r2,zero,a890 <___vfiprintf_internal_r+0x1264>
    9778:	90c00047 	ldb	r3,1(r18)
    977c:	94000044 	addi	r16,r18,1
    9780:	d8001d85 	stb	zero,118(sp)
    9784:	0009883a 	mov	r4,zero
    9788:	000f883a 	mov	r7,zero
    978c:	027fffc4 	movi	r9,-1
    9790:	0023883a 	mov	r17,zero
    9794:	0029883a 	mov	r20,zero
    9798:	01401604 	movi	r5,88
    979c:	01800244 	movi	r6,9
    97a0:	03400a84 	movi	r13,42
    97a4:	03001b04 	movi	r12,108
    97a8:	84000044 	addi	r16,r16,1
    97ac:	18bff804 	addi	r2,r3,-32
    97b0:	28827336 	bltu	r5,r2,a180 <___vfiprintf_internal_r+0xb54>
    97b4:	100490ba 	slli	r2,r2,2
    97b8:	02800074 	movhi	r10,1
    97bc:	52a5f304 	addi	r10,r10,-26676
    97c0:	1285883a 	add	r2,r2,r10
    97c4:	10800017 	ldw	r2,0(r2)
    97c8:	1000683a 	jmp	r2
    97cc:	00009eb4 	movhi	zero,634
    97d0:	0000a180 	call	a18 <init_LCD+0xd4>
    97d4:	0000a180 	call	a18 <init_LCD+0xd4>
    97d8:	00009ed4 	movui	zero,635
    97dc:	0000a180 	call	a18 <init_LCD+0xd4>
    97e0:	0000a180 	call	a18 <init_LCD+0xd4>
    97e4:	0000a180 	call	a18 <init_LCD+0xd4>
    97e8:	0000a180 	call	a18 <init_LCD+0xd4>
    97ec:	0000a180 	call	a18 <init_LCD+0xd4>
    97f0:	0000a180 	call	a18 <init_LCD+0xd4>
    97f4:	0000a0bc 	xorhi	zero,zero,642
    97f8:	0000a0d8 	cmpnei	zero,zero,643
    97fc:	0000a180 	call	a18 <init_LCD+0xd4>
    9800:	000099c0 	call	99c <init_LCD+0x58>
    9804:	0000a0e8 	cmpgeui	zero,zero,643
    9808:	0000a180 	call	a18 <init_LCD+0xd4>
    980c:	00009ee0 	cmpeqi	zero,zero,635
    9810:	00009eec 	andhi	zero,zero,635
    9814:	00009eec 	andhi	zero,zero,635
    9818:	00009eec 	andhi	zero,zero,635
    981c:	00009eec 	andhi	zero,zero,635
    9820:	00009eec 	andhi	zero,zero,635
    9824:	00009eec 	andhi	zero,zero,635
    9828:	00009eec 	andhi	zero,zero,635
    982c:	00009eec 	andhi	zero,zero,635
    9830:	00009eec 	andhi	zero,zero,635
    9834:	0000a180 	call	a18 <init_LCD+0xd4>
    9838:	0000a180 	call	a18 <init_LCD+0xd4>
    983c:	0000a180 	call	a18 <init_LCD+0xd4>
    9840:	0000a180 	call	a18 <init_LCD+0xd4>
    9844:	0000a180 	call	a18 <init_LCD+0xd4>
    9848:	0000a180 	call	a18 <init_LCD+0xd4>
    984c:	0000a180 	call	a18 <init_LCD+0xd4>
    9850:	0000a180 	call	a18 <init_LCD+0xd4>
    9854:	0000a180 	call	a18 <init_LCD+0xd4>
    9858:	0000a180 	call	a18 <init_LCD+0xd4>
    985c:	00009f18 	cmpnei	zero,zero,636
    9860:	0000a180 	call	a18 <init_LCD+0xd4>
    9864:	0000a180 	call	a18 <init_LCD+0xd4>
    9868:	0000a180 	call	a18 <init_LCD+0xd4>
    986c:	0000a180 	call	a18 <init_LCD+0xd4>
    9870:	0000a180 	call	a18 <init_LCD+0xd4>
    9874:	0000a180 	call	a18 <init_LCD+0xd4>
    9878:	0000a180 	call	a18 <init_LCD+0xd4>
    987c:	0000a180 	call	a18 <init_LCD+0xd4>
    9880:	0000a180 	call	a18 <init_LCD+0xd4>
    9884:	0000a180 	call	a18 <init_LCD+0xd4>
    9888:	00009f50 	cmplti	zero,zero,637
    988c:	0000a180 	call	a18 <init_LCD+0xd4>
    9890:	0000a180 	call	a18 <init_LCD+0xd4>
    9894:	0000a180 	call	a18 <init_LCD+0xd4>
    9898:	0000a180 	call	a18 <init_LCD+0xd4>
    989c:	0000a180 	call	a18 <init_LCD+0xd4>
    98a0:	00009fa8 	cmpgeui	zero,zero,638
    98a4:	0000a180 	call	a18 <init_LCD+0xd4>
    98a8:	0000a180 	call	a18 <init_LCD+0xd4>
    98ac:	0000a018 	cmpnei	zero,zero,640
    98b0:	0000a180 	call	a18 <init_LCD+0xd4>
    98b4:	0000a180 	call	a18 <init_LCD+0xd4>
    98b8:	0000a180 	call	a18 <init_LCD+0xd4>
    98bc:	0000a180 	call	a18 <init_LCD+0xd4>
    98c0:	0000a180 	call	a18 <init_LCD+0xd4>
    98c4:	0000a180 	call	a18 <init_LCD+0xd4>
    98c8:	0000a180 	call	a18 <init_LCD+0xd4>
    98cc:	0000a180 	call	a18 <init_LCD+0xd4>
    98d0:	0000a180 	call	a18 <init_LCD+0xd4>
    98d4:	0000a180 	call	a18 <init_LCD+0xd4>
    98d8:	00009dc4 	movi	zero,631
    98dc:	00009df0 	cmpltui	zero,zero,631
    98e0:	0000a180 	call	a18 <init_LCD+0xd4>
    98e4:	0000a180 	call	a18 <init_LCD+0xd4>
    98e8:	0000a180 	call	a18 <init_LCD+0xd4>
    98ec:	0000a128 	cmpgeui	zero,zero,644
    98f0:	00009df0 	cmpltui	zero,zero,631
    98f4:	0000a180 	call	a18 <init_LCD+0xd4>
    98f8:	0000a180 	call	a18 <init_LCD+0xd4>
    98fc:	00009c84 	movi	zero,626
    9900:	0000a180 	call	a18 <init_LCD+0xd4>
    9904:	00009c94 	movui	zero,626
    9908:	00009cd0 	cmplti	zero,zero,627
    990c:	000099cc 	andi	zero,zero,615
    9910:	00009c78 	rdprs	zero,zero,625
    9914:	0000a180 	call	a18 <init_LCD+0xd4>
    9918:	0000a054 	movui	zero,641
    991c:	0000a180 	call	a18 <init_LCD+0xd4>
    9920:	0000a0ac 	andhi	zero,zero,642
    9924:	0000a180 	call	a18 <init_LCD+0xd4>
    9928:	0000a180 	call	a18 <init_LCD+0xd4>
    992c:	00009d70 	cmpltui	zero,zero,629
    9930:	42000204 	addi	r8,r8,8
    9934:	da802317 	ldw	r10,140(sp)
    9938:	5455883a 	add	r10,r10,r17
    993c:	da802315 	stw	r10,140(sp)
    9940:	003f8b06 	br	9770 <__alt_data_end+0xff009770>
    9944:	d9002017 	ldw	r4,128(sp)
    9948:	a00b883a 	mov	r5,r20
    994c:	0004b480 	call	4b48 <__swsetup_r>
    9950:	1003b11e 	bne	r2,zero,a818 <___vfiprintf_internal_r+0x11ec>
    9954:	a080030b 	ldhu	r2,12(r20)
    9958:	00c00284 	movi	r3,10
    995c:	1080068c 	andi	r2,r2,26
    9960:	10ff541e 	bne	r2,r3,96b4 <__alt_data_end+0xff0096b4>
    9964:	a080038f 	ldh	r2,14(r20)
    9968:	103f5216 	blt	r2,zero,96b4 <__alt_data_end+0xff0096b4>
    996c:	d9c02217 	ldw	r7,136(sp)
    9970:	d9002017 	ldw	r4,128(sp)
    9974:	e00d883a 	mov	r6,fp
    9978:	a00b883a 	mov	r5,r20
    997c:	000aaa40 	call	aaa4 <__sbprintf>
    9980:	dfc03617 	ldw	ra,216(sp)
    9984:	df003517 	ldw	fp,212(sp)
    9988:	ddc03417 	ldw	r23,208(sp)
    998c:	dd803317 	ldw	r22,204(sp)
    9990:	dd403217 	ldw	r21,200(sp)
    9994:	dd003117 	ldw	r20,196(sp)
    9998:	dcc03017 	ldw	r19,192(sp)
    999c:	dc802f17 	ldw	r18,188(sp)
    99a0:	dc402e17 	ldw	r17,184(sp)
    99a4:	dc002d17 	ldw	r16,180(sp)
    99a8:	dec03704 	addi	sp,sp,220
    99ac:	f800283a 	ret
    99b0:	0006b1c0 	call	6b1c <__sinit>
    99b4:	003f2f06 	br	9674 <__alt_data_end+0xff009674>
    99b8:	0463c83a 	sub	r17,zero,r17
    99bc:	d8802215 	stw	r2,136(sp)
    99c0:	a5000114 	ori	r20,r20,4
    99c4:	80c00007 	ldb	r3,0(r16)
    99c8:	003f7706 	br	97a8 <__alt_data_end+0xff0097a8>
    99cc:	00800c04 	movi	r2,48
    99d0:	da802217 	ldw	r10,136(sp)
    99d4:	d8801d05 	stb	r2,116(sp)
    99d8:	00801e04 	movi	r2,120
    99dc:	d8801d45 	stb	r2,117(sp)
    99e0:	d8001d85 	stb	zero,118(sp)
    99e4:	50c00104 	addi	r3,r10,4
    99e8:	54800017 	ldw	r18,0(r10)
    99ec:	0027883a 	mov	r19,zero
    99f0:	a0800094 	ori	r2,r20,2
    99f4:	48030b16 	blt	r9,zero,a624 <___vfiprintf_internal_r+0xff8>
    99f8:	00bfdfc4 	movi	r2,-129
    99fc:	a096703a 	and	r11,r20,r2
    9a00:	d8c02215 	stw	r3,136(sp)
    9a04:	5d000094 	ori	r20,r11,2
    9a08:	90032b1e 	bne	r18,zero,a6b8 <___vfiprintf_internal_r+0x108c>
    9a0c:	00800074 	movhi	r2,1
    9a10:	10820104 	addi	r2,r2,2052
    9a14:	d8802615 	stw	r2,152(sp)
    9a18:	0039883a 	mov	fp,zero
    9a1c:	48017b1e 	bne	r9,zero,a00c <___vfiprintf_internal_r+0x9e0>
    9a20:	0013883a 	mov	r9,zero
    9a24:	0027883a 	mov	r19,zero
    9a28:	dd401a04 	addi	r21,sp,104
    9a2c:	4825883a 	mov	r18,r9
    9a30:	4cc0010e 	bge	r9,r19,9a38 <___vfiprintf_internal_r+0x40c>
    9a34:	9825883a 	mov	r18,r19
    9a38:	e7003fcc 	andi	fp,fp,255
    9a3c:	e700201c 	xori	fp,fp,128
    9a40:	e73fe004 	addi	fp,fp,-128
    9a44:	e0000126 	beq	fp,zero,9a4c <___vfiprintf_internal_r+0x420>
    9a48:	94800044 	addi	r18,r18,1
    9a4c:	a380008c 	andi	r14,r20,2
    9a50:	70000126 	beq	r14,zero,9a58 <___vfiprintf_internal_r+0x42c>
    9a54:	94800084 	addi	r18,r18,2
    9a58:	a700210c 	andi	fp,r20,132
    9a5c:	e001df1e 	bne	fp,zero,a1dc <___vfiprintf_internal_r+0xbb0>
    9a60:	8c87c83a 	sub	r3,r17,r18
    9a64:	00c1dd0e 	bge	zero,r3,a1dc <___vfiprintf_internal_r+0xbb0>
    9a68:	01c00404 	movi	r7,16
    9a6c:	d8801c17 	ldw	r2,112(sp)
    9a70:	38c3ad0e 	bge	r7,r3,a928 <___vfiprintf_internal_r+0x12fc>
    9a74:	02800074 	movhi	r10,1
    9a78:	52826604 	addi	r10,r10,2456
    9a7c:	dc002915 	stw	r16,164(sp)
    9a80:	d9801b17 	ldw	r6,108(sp)
    9a84:	da802415 	stw	r10,144(sp)
    9a88:	03c001c4 	movi	r15,7
    9a8c:	da402515 	stw	r9,148(sp)
    9a90:	db802815 	stw	r14,160(sp)
    9a94:	1821883a 	mov	r16,r3
    9a98:	00000506 	br	9ab0 <___vfiprintf_internal_r+0x484>
    9a9c:	31400084 	addi	r5,r6,2
    9aa0:	42000204 	addi	r8,r8,8
    9aa4:	200d883a 	mov	r6,r4
    9aa8:	843ffc04 	addi	r16,r16,-16
    9aac:	3c000d0e 	bge	r7,r16,9ae4 <___vfiprintf_internal_r+0x4b8>
    9ab0:	10800404 	addi	r2,r2,16
    9ab4:	31000044 	addi	r4,r6,1
    9ab8:	45800015 	stw	r22,0(r8)
    9abc:	41c00115 	stw	r7,4(r8)
    9ac0:	d8801c15 	stw	r2,112(sp)
    9ac4:	d9001b15 	stw	r4,108(sp)
    9ac8:	793ff40e 	bge	r15,r4,9a9c <__alt_data_end+0xff009a9c>
    9acc:	1001b51e 	bne	r2,zero,a1a4 <___vfiprintf_internal_r+0xb78>
    9ad0:	843ffc04 	addi	r16,r16,-16
    9ad4:	000d883a 	mov	r6,zero
    9ad8:	01400044 	movi	r5,1
    9adc:	d811883a 	mov	r8,sp
    9ae0:	3c3ff316 	blt	r7,r16,9ab0 <__alt_data_end+0xff009ab0>
    9ae4:	8007883a 	mov	r3,r16
    9ae8:	da402517 	ldw	r9,148(sp)
    9aec:	db802817 	ldw	r14,160(sp)
    9af0:	dc002917 	ldw	r16,164(sp)
    9af4:	da802417 	ldw	r10,144(sp)
    9af8:	1885883a 	add	r2,r3,r2
    9afc:	40c00115 	stw	r3,4(r8)
    9b00:	42800015 	stw	r10,0(r8)
    9b04:	d8801c15 	stw	r2,112(sp)
    9b08:	d9401b15 	stw	r5,108(sp)
    9b0c:	00c001c4 	movi	r3,7
    9b10:	19426016 	blt	r3,r5,a494 <___vfiprintf_internal_r+0xe68>
    9b14:	d8c01d87 	ldb	r3,118(sp)
    9b18:	42000204 	addi	r8,r8,8
    9b1c:	29000044 	addi	r4,r5,1
    9b20:	1801b31e 	bne	r3,zero,a1f0 <___vfiprintf_internal_r+0xbc4>
    9b24:	7001c026 	beq	r14,zero,a228 <___vfiprintf_internal_r+0xbfc>
    9b28:	d8c01d04 	addi	r3,sp,116
    9b2c:	10800084 	addi	r2,r2,2
    9b30:	40c00015 	stw	r3,0(r8)
    9b34:	00c00084 	movi	r3,2
    9b38:	40c00115 	stw	r3,4(r8)
    9b3c:	d8801c15 	stw	r2,112(sp)
    9b40:	d9001b15 	stw	r4,108(sp)
    9b44:	00c001c4 	movi	r3,7
    9b48:	1902650e 	bge	r3,r4,a4e0 <___vfiprintf_internal_r+0xeb4>
    9b4c:	10029a1e 	bne	r2,zero,a5b8 <___vfiprintf_internal_r+0xf8c>
    9b50:	00c02004 	movi	r3,128
    9b54:	01000044 	movi	r4,1
    9b58:	000b883a 	mov	r5,zero
    9b5c:	d811883a 	mov	r8,sp
    9b60:	e0c1b31e 	bne	fp,r3,a230 <___vfiprintf_internal_r+0xc04>
    9b64:	8cb9c83a 	sub	fp,r17,r18
    9b68:	0701b10e 	bge	zero,fp,a230 <___vfiprintf_internal_r+0xc04>
    9b6c:	01c00404 	movi	r7,16
    9b70:	3f03890e 	bge	r7,fp,a998 <___vfiprintf_internal_r+0x136c>
    9b74:	00c00074 	movhi	r3,1
    9b78:	18c26204 	addi	r3,r3,2440
    9b7c:	d8c02415 	stw	r3,144(sp)
    9b80:	8007883a 	mov	r3,r16
    9b84:	034001c4 	movi	r13,7
    9b88:	e021883a 	mov	r16,fp
    9b8c:	da402515 	stw	r9,148(sp)
    9b90:	1839883a 	mov	fp,r3
    9b94:	00000506 	br	9bac <___vfiprintf_internal_r+0x580>
    9b98:	29800084 	addi	r6,r5,2
    9b9c:	42000204 	addi	r8,r8,8
    9ba0:	180b883a 	mov	r5,r3
    9ba4:	843ffc04 	addi	r16,r16,-16
    9ba8:	3c000d0e 	bge	r7,r16,9be0 <___vfiprintf_internal_r+0x5b4>
    9bac:	10800404 	addi	r2,r2,16
    9bb0:	28c00044 	addi	r3,r5,1
    9bb4:	45c00015 	stw	r23,0(r8)
    9bb8:	41c00115 	stw	r7,4(r8)
    9bbc:	d8801c15 	stw	r2,112(sp)
    9bc0:	d8c01b15 	stw	r3,108(sp)
    9bc4:	68fff40e 	bge	r13,r3,9b98 <__alt_data_end+0xff009b98>
    9bc8:	1002241e 	bne	r2,zero,a45c <___vfiprintf_internal_r+0xe30>
    9bcc:	843ffc04 	addi	r16,r16,-16
    9bd0:	01800044 	movi	r6,1
    9bd4:	000b883a 	mov	r5,zero
    9bd8:	d811883a 	mov	r8,sp
    9bdc:	3c3ff316 	blt	r7,r16,9bac <__alt_data_end+0xff009bac>
    9be0:	da402517 	ldw	r9,148(sp)
    9be4:	e007883a 	mov	r3,fp
    9be8:	8039883a 	mov	fp,r16
    9bec:	1821883a 	mov	r16,r3
    9bf0:	d8c02417 	ldw	r3,144(sp)
    9bf4:	1705883a 	add	r2,r2,fp
    9bf8:	47000115 	stw	fp,4(r8)
    9bfc:	40c00015 	stw	r3,0(r8)
    9c00:	d8801c15 	stw	r2,112(sp)
    9c04:	d9801b15 	stw	r6,108(sp)
    9c08:	00c001c4 	movi	r3,7
    9c0c:	19827616 	blt	r3,r6,a5e8 <___vfiprintf_internal_r+0xfbc>
    9c10:	4cf9c83a 	sub	fp,r9,r19
    9c14:	42000204 	addi	r8,r8,8
    9c18:	31000044 	addi	r4,r6,1
    9c1c:	300b883a 	mov	r5,r6
    9c20:	07018516 	blt	zero,fp,a238 <___vfiprintf_internal_r+0xc0c>
    9c24:	9885883a 	add	r2,r19,r2
    9c28:	45400015 	stw	r21,0(r8)
    9c2c:	44c00115 	stw	r19,4(r8)
    9c30:	d8801c15 	stw	r2,112(sp)
    9c34:	d9001b15 	stw	r4,108(sp)
    9c38:	00c001c4 	movi	r3,7
    9c3c:	1901dd0e 	bge	r3,r4,a3b4 <___vfiprintf_internal_r+0xd88>
    9c40:	1002401e 	bne	r2,zero,a544 <___vfiprintf_internal_r+0xf18>
    9c44:	d8001b15 	stw	zero,108(sp)
    9c48:	a2c0010c 	andi	r11,r20,4
    9c4c:	58000226 	beq	r11,zero,9c58 <___vfiprintf_internal_r+0x62c>
    9c50:	8ca7c83a 	sub	r19,r17,r18
    9c54:	04c2f216 	blt	zero,r19,a820 <___vfiprintf_internal_r+0x11f4>
    9c58:	8c80010e 	bge	r17,r18,9c60 <___vfiprintf_internal_r+0x634>
    9c5c:	9023883a 	mov	r17,r18
    9c60:	da802317 	ldw	r10,140(sp)
    9c64:	5455883a 	add	r10,r10,r17
    9c68:	da802315 	stw	r10,140(sp)
    9c6c:	d8001b15 	stw	zero,108(sp)
    9c70:	d811883a 	mov	r8,sp
    9c74:	003ea206 	br	9700 <__alt_data_end+0xff009700>
    9c78:	a5000814 	ori	r20,r20,32
    9c7c:	80c00007 	ldb	r3,0(r16)
    9c80:	003ec906 	br	97a8 <__alt_data_end+0xff0097a8>
    9c84:	80c00007 	ldb	r3,0(r16)
    9c88:	1b030926 	beq	r3,r12,a8b0 <___vfiprintf_internal_r+0x1284>
    9c8c:	a5000414 	ori	r20,r20,16
    9c90:	003ec506 	br	97a8 <__alt_data_end+0xff0097a8>
    9c94:	21003fcc 	andi	r4,r4,255
    9c98:	20035e1e 	bne	r4,zero,aa14 <___vfiprintf_internal_r+0x13e8>
    9c9c:	a080080c 	andi	r2,r20,32
    9ca0:	1002a526 	beq	r2,zero,a738 <___vfiprintf_internal_r+0x110c>
    9ca4:	da802217 	ldw	r10,136(sp)
    9ca8:	50800017 	ldw	r2,0(r10)
    9cac:	da802317 	ldw	r10,140(sp)
    9cb0:	5007d7fa 	srai	r3,r10,31
    9cb4:	da802217 	ldw	r10,136(sp)
    9cb8:	10c00115 	stw	r3,4(r2)
    9cbc:	52800104 	addi	r10,r10,4
    9cc0:	da802215 	stw	r10,136(sp)
    9cc4:	da802317 	ldw	r10,140(sp)
    9cc8:	12800015 	stw	r10,0(r2)
    9ccc:	003e8c06 	br	9700 <__alt_data_end+0xff009700>
    9cd0:	21003fcc 	andi	r4,r4,255
    9cd4:	2003511e 	bne	r4,zero,aa1c <___vfiprintf_internal_r+0x13f0>
    9cd8:	a080080c 	andi	r2,r20,32
    9cdc:	1000a126 	beq	r2,zero,9f64 <___vfiprintf_internal_r+0x938>
    9ce0:	da802217 	ldw	r10,136(sp)
    9ce4:	d8001d85 	stb	zero,118(sp)
    9ce8:	50800204 	addi	r2,r10,8
    9cec:	54800017 	ldw	r18,0(r10)
    9cf0:	54c00117 	ldw	r19,4(r10)
    9cf4:	4802b416 	blt	r9,zero,a7c8 <___vfiprintf_internal_r+0x119c>
    9cf8:	013fdfc4 	movi	r4,-129
    9cfc:	94c6b03a 	or	r3,r18,r19
    9d00:	d8802215 	stw	r2,136(sp)
    9d04:	a128703a 	and	r20,r20,r4
    9d08:	1800a226 	beq	r3,zero,9f94 <___vfiprintf_internal_r+0x968>
    9d0c:	0039883a 	mov	fp,zero
    9d10:	dd401a04 	addi	r21,sp,104
    9d14:	9006d0fa 	srli	r3,r18,3
    9d18:	9808977a 	slli	r4,r19,29
    9d1c:	9826d0fa 	srli	r19,r19,3
    9d20:	948001cc 	andi	r18,r18,7
    9d24:	90800c04 	addi	r2,r18,48
    9d28:	ad7fffc4 	addi	r21,r21,-1
    9d2c:	20e4b03a 	or	r18,r4,r3
    9d30:	a8800005 	stb	r2,0(r21)
    9d34:	94c6b03a 	or	r3,r18,r19
    9d38:	183ff61e 	bne	r3,zero,9d14 <__alt_data_end+0xff009d14>
    9d3c:	a0c0004c 	andi	r3,r20,1
    9d40:	18005926 	beq	r3,zero,9ea8 <___vfiprintf_internal_r+0x87c>
    9d44:	10803fcc 	andi	r2,r2,255
    9d48:	1080201c 	xori	r2,r2,128
    9d4c:	10bfe004 	addi	r2,r2,-128
    9d50:	00c00c04 	movi	r3,48
    9d54:	10c05426 	beq	r2,r3,9ea8 <___vfiprintf_internal_r+0x87c>
    9d58:	da801e17 	ldw	r10,120(sp)
    9d5c:	a8bfffc4 	addi	r2,r21,-1
    9d60:	a8ffffc5 	stb	r3,-1(r21)
    9d64:	50a7c83a 	sub	r19,r10,r2
    9d68:	102b883a 	mov	r21,r2
    9d6c:	003f2f06 	br	9a2c <__alt_data_end+0xff009a2c>
    9d70:	21003fcc 	andi	r4,r4,255
    9d74:	2003421e 	bne	r4,zero,aa80 <___vfiprintf_internal_r+0x1454>
    9d78:	00800074 	movhi	r2,1
    9d7c:	10820104 	addi	r2,r2,2052
    9d80:	d8802615 	stw	r2,152(sp)
    9d84:	a080080c 	andi	r2,r20,32
    9d88:	1000aa26 	beq	r2,zero,a034 <___vfiprintf_internal_r+0xa08>
    9d8c:	da802217 	ldw	r10,136(sp)
    9d90:	54800017 	ldw	r18,0(r10)
    9d94:	54c00117 	ldw	r19,4(r10)
    9d98:	52800204 	addi	r10,r10,8
    9d9c:	da802215 	stw	r10,136(sp)
    9da0:	a080004c 	andi	r2,r20,1
    9da4:	1001d226 	beq	r2,zero,a4f0 <___vfiprintf_internal_r+0xec4>
    9da8:	94c4b03a 	or	r2,r18,r19
    9dac:	1002351e 	bne	r2,zero,a684 <___vfiprintf_internal_r+0x1058>
    9db0:	d8001d85 	stb	zero,118(sp)
    9db4:	48022216 	blt	r9,zero,a640 <___vfiprintf_internal_r+0x1014>
    9db8:	00bfdfc4 	movi	r2,-129
    9dbc:	a0a8703a 	and	r20,r20,r2
    9dc0:	003f1506 	br	9a18 <__alt_data_end+0xff009a18>
    9dc4:	da802217 	ldw	r10,136(sp)
    9dc8:	04800044 	movi	r18,1
    9dcc:	d8001d85 	stb	zero,118(sp)
    9dd0:	50800017 	ldw	r2,0(r10)
    9dd4:	52800104 	addi	r10,r10,4
    9dd8:	da802215 	stw	r10,136(sp)
    9ddc:	d8801005 	stb	r2,64(sp)
    9de0:	9027883a 	mov	r19,r18
    9de4:	dd401004 	addi	r21,sp,64
    9de8:	0013883a 	mov	r9,zero
    9dec:	003f1706 	br	9a4c <__alt_data_end+0xff009a4c>
    9df0:	21003fcc 	andi	r4,r4,255
    9df4:	2003201e 	bne	r4,zero,aa78 <___vfiprintf_internal_r+0x144c>
    9df8:	a080080c 	andi	r2,r20,32
    9dfc:	10004b26 	beq	r2,zero,9f2c <___vfiprintf_internal_r+0x900>
    9e00:	da802217 	ldw	r10,136(sp)
    9e04:	50800117 	ldw	r2,4(r10)
    9e08:	54800017 	ldw	r18,0(r10)
    9e0c:	52800204 	addi	r10,r10,8
    9e10:	da802215 	stw	r10,136(sp)
    9e14:	1027883a 	mov	r19,r2
    9e18:	10022c16 	blt	r2,zero,a6cc <___vfiprintf_internal_r+0x10a0>
    9e1c:	df001d83 	ldbu	fp,118(sp)
    9e20:	48007216 	blt	r9,zero,9fec <___vfiprintf_internal_r+0x9c0>
    9e24:	00ffdfc4 	movi	r3,-129
    9e28:	94c4b03a 	or	r2,r18,r19
    9e2c:	a0e8703a 	and	r20,r20,r3
    9e30:	1000cc26 	beq	r2,zero,a164 <___vfiprintf_internal_r+0xb38>
    9e34:	98021026 	beq	r19,zero,a678 <___vfiprintf_internal_r+0x104c>
    9e38:	dc402415 	stw	r17,144(sp)
    9e3c:	dc002515 	stw	r16,148(sp)
    9e40:	9823883a 	mov	r17,r19
    9e44:	9021883a 	mov	r16,r18
    9e48:	dd401a04 	addi	r21,sp,104
    9e4c:	4825883a 	mov	r18,r9
    9e50:	4027883a 	mov	r19,r8
    9e54:	8009883a 	mov	r4,r16
    9e58:	880b883a 	mov	r5,r17
    9e5c:	01800284 	movi	r6,10
    9e60:	000f883a 	mov	r7,zero
    9e64:	000ba0c0 	call	ba0c <__umoddi3>
    9e68:	10800c04 	addi	r2,r2,48
    9e6c:	ad7fffc4 	addi	r21,r21,-1
    9e70:	8009883a 	mov	r4,r16
    9e74:	880b883a 	mov	r5,r17
    9e78:	a8800005 	stb	r2,0(r21)
    9e7c:	01800284 	movi	r6,10
    9e80:	000f883a 	mov	r7,zero
    9e84:	000b4940 	call	b494 <__udivdi3>
    9e88:	1021883a 	mov	r16,r2
    9e8c:	10c4b03a 	or	r2,r2,r3
    9e90:	1823883a 	mov	r17,r3
    9e94:	103fef1e 	bne	r2,zero,9e54 <__alt_data_end+0xff009e54>
    9e98:	dc402417 	ldw	r17,144(sp)
    9e9c:	dc002517 	ldw	r16,148(sp)
    9ea0:	9013883a 	mov	r9,r18
    9ea4:	9811883a 	mov	r8,r19
    9ea8:	da801e17 	ldw	r10,120(sp)
    9eac:	5567c83a 	sub	r19,r10,r21
    9eb0:	003ede06 	br	9a2c <__alt_data_end+0xff009a2c>
    9eb4:	38803fcc 	andi	r2,r7,255
    9eb8:	1080201c 	xori	r2,r2,128
    9ebc:	10bfe004 	addi	r2,r2,-128
    9ec0:	1002371e 	bne	r2,zero,a7a0 <___vfiprintf_internal_r+0x1174>
    9ec4:	01000044 	movi	r4,1
    9ec8:	01c00804 	movi	r7,32
    9ecc:	80c00007 	ldb	r3,0(r16)
    9ed0:	003e3506 	br	97a8 <__alt_data_end+0xff0097a8>
    9ed4:	a5000054 	ori	r20,r20,1
    9ed8:	80c00007 	ldb	r3,0(r16)
    9edc:	003e3206 	br	97a8 <__alt_data_end+0xff0097a8>
    9ee0:	a5002014 	ori	r20,r20,128
    9ee4:	80c00007 	ldb	r3,0(r16)
    9ee8:	003e2f06 	br	97a8 <__alt_data_end+0xff0097a8>
    9eec:	8015883a 	mov	r10,r16
    9ef0:	0023883a 	mov	r17,zero
    9ef4:	18bff404 	addi	r2,r3,-48
    9ef8:	50c00007 	ldb	r3,0(r10)
    9efc:	8c4002a4 	muli	r17,r17,10
    9f00:	84000044 	addi	r16,r16,1
    9f04:	8015883a 	mov	r10,r16
    9f08:	1463883a 	add	r17,r2,r17
    9f0c:	18bff404 	addi	r2,r3,-48
    9f10:	30bff92e 	bgeu	r6,r2,9ef8 <__alt_data_end+0xff009ef8>
    9f14:	003e2506 	br	97ac <__alt_data_end+0xff0097ac>
    9f18:	21003fcc 	andi	r4,r4,255
    9f1c:	2002d41e 	bne	r4,zero,aa70 <___vfiprintf_internal_r+0x1444>
    9f20:	a5000414 	ori	r20,r20,16
    9f24:	a080080c 	andi	r2,r20,32
    9f28:	103fb51e 	bne	r2,zero,9e00 <__alt_data_end+0xff009e00>
    9f2c:	a080040c 	andi	r2,r20,16
    9f30:	1001f826 	beq	r2,zero,a714 <___vfiprintf_internal_r+0x10e8>
    9f34:	da802217 	ldw	r10,136(sp)
    9f38:	54800017 	ldw	r18,0(r10)
    9f3c:	52800104 	addi	r10,r10,4
    9f40:	da802215 	stw	r10,136(sp)
    9f44:	9027d7fa 	srai	r19,r18,31
    9f48:	9805883a 	mov	r2,r19
    9f4c:	003fb206 	br	9e18 <__alt_data_end+0xff009e18>
    9f50:	21003fcc 	andi	r4,r4,255
    9f54:	2002c41e 	bne	r4,zero,aa68 <___vfiprintf_internal_r+0x143c>
    9f58:	a5000414 	ori	r20,r20,16
    9f5c:	a080080c 	andi	r2,r20,32
    9f60:	103f5f1e 	bne	r2,zero,9ce0 <__alt_data_end+0xff009ce0>
    9f64:	a080040c 	andi	r2,r20,16
    9f68:	10020f26 	beq	r2,zero,a7a8 <___vfiprintf_internal_r+0x117c>
    9f6c:	da802217 	ldw	r10,136(sp)
    9f70:	d8001d85 	stb	zero,118(sp)
    9f74:	0027883a 	mov	r19,zero
    9f78:	50800104 	addi	r2,r10,4
    9f7c:	54800017 	ldw	r18,0(r10)
    9f80:	48021116 	blt	r9,zero,a7c8 <___vfiprintf_internal_r+0x119c>
    9f84:	00ffdfc4 	movi	r3,-129
    9f88:	d8802215 	stw	r2,136(sp)
    9f8c:	a0e8703a 	and	r20,r20,r3
    9f90:	903f5e1e 	bne	r18,zero,9d0c <__alt_data_end+0xff009d0c>
    9f94:	0039883a 	mov	fp,zero
    9f98:	4802a626 	beq	r9,zero,aa34 <___vfiprintf_internal_r+0x1408>
    9f9c:	0025883a 	mov	r18,zero
    9fa0:	0027883a 	mov	r19,zero
    9fa4:	003f5a06 	br	9d10 <__alt_data_end+0xff009d10>
    9fa8:	21003fcc 	andi	r4,r4,255
    9fac:	20029f1e 	bne	r4,zero,aa2c <___vfiprintf_internal_r+0x1400>
    9fb0:	a5000414 	ori	r20,r20,16
    9fb4:	a080080c 	andi	r2,r20,32
    9fb8:	10005e1e 	bne	r2,zero,a134 <___vfiprintf_internal_r+0xb08>
    9fbc:	a080040c 	andi	r2,r20,16
    9fc0:	1001a21e 	bne	r2,zero,a64c <___vfiprintf_internal_r+0x1020>
    9fc4:	a080100c 	andi	r2,r20,64
    9fc8:	d8001d85 	stb	zero,118(sp)
    9fcc:	da802217 	ldw	r10,136(sp)
    9fd0:	1002231e 	bne	r2,zero,a860 <___vfiprintf_internal_r+0x1234>
    9fd4:	50800104 	addi	r2,r10,4
    9fd8:	54800017 	ldw	r18,0(r10)
    9fdc:	0027883a 	mov	r19,zero
    9fe0:	4801a00e 	bge	r9,zero,a664 <___vfiprintf_internal_r+0x1038>
    9fe4:	d8802215 	stw	r2,136(sp)
    9fe8:	0039883a 	mov	fp,zero
    9fec:	94c4b03a 	or	r2,r18,r19
    9ff0:	103f901e 	bne	r2,zero,9e34 <__alt_data_end+0xff009e34>
    9ff4:	00800044 	movi	r2,1
    9ff8:	10803fcc 	andi	r2,r2,255
    9ffc:	00c00044 	movi	r3,1
    a000:	10c05926 	beq	r2,r3,a168 <___vfiprintf_internal_r+0xb3c>
    a004:	00c00084 	movi	r3,2
    a008:	10ffe41e 	bne	r2,r3,9f9c <__alt_data_end+0xff009f9c>
    a00c:	0025883a 	mov	r18,zero
    a010:	0027883a 	mov	r19,zero
    a014:	00013d06 	br	a50c <___vfiprintf_internal_r+0xee0>
    a018:	21003fcc 	andi	r4,r4,255
    a01c:	2002811e 	bne	r4,zero,aa24 <___vfiprintf_internal_r+0x13f8>
    a020:	00800074 	movhi	r2,1
    a024:	1081fc04 	addi	r2,r2,2032
    a028:	d8802615 	stw	r2,152(sp)
    a02c:	a080080c 	andi	r2,r20,32
    a030:	103f561e 	bne	r2,zero,9d8c <__alt_data_end+0xff009d8c>
    a034:	a080040c 	andi	r2,r20,16
    a038:	1001d126 	beq	r2,zero,a780 <___vfiprintf_internal_r+0x1154>
    a03c:	da802217 	ldw	r10,136(sp)
    a040:	0027883a 	mov	r19,zero
    a044:	54800017 	ldw	r18,0(r10)
    a048:	52800104 	addi	r10,r10,4
    a04c:	da802215 	stw	r10,136(sp)
    a050:	003f5306 	br	9da0 <__alt_data_end+0xff009da0>
    a054:	da802217 	ldw	r10,136(sp)
    a058:	d8001d85 	stb	zero,118(sp)
    a05c:	55400017 	ldw	r21,0(r10)
    a060:	50c00104 	addi	r3,r10,4
    a064:	a8024226 	beq	r21,zero,a970 <___vfiprintf_internal_r+0x1344>
    a068:	48021816 	blt	r9,zero,a8cc <___vfiprintf_internal_r+0x12a0>
    a06c:	480d883a 	mov	r6,r9
    a070:	000b883a 	mov	r5,zero
    a074:	a809883a 	mov	r4,r21
    a078:	d8c02a15 	stw	r3,168(sp)
    a07c:	da002b15 	stw	r8,172(sp)
    a080:	da402c15 	stw	r9,176(sp)
    a084:	000787c0 	call	787c <memchr>
    a088:	d8c02a17 	ldw	r3,168(sp)
    a08c:	da002b17 	ldw	r8,172(sp)
    a090:	da402c17 	ldw	r9,176(sp)
    a094:	10024826 	beq	r2,zero,a9b8 <___vfiprintf_internal_r+0x138c>
    a098:	1567c83a 	sub	r19,r2,r21
    a09c:	df001d83 	ldbu	fp,118(sp)
    a0a0:	d8c02215 	stw	r3,136(sp)
    a0a4:	0013883a 	mov	r9,zero
    a0a8:	003e6006 	br	9a2c <__alt_data_end+0xff009a2c>
    a0ac:	21003fcc 	andi	r4,r4,255
    a0b0:	203fc026 	beq	r4,zero,9fb4 <__alt_data_end+0xff009fb4>
    a0b4:	d9c01d85 	stb	r7,118(sp)
    a0b8:	003fbe06 	br	9fb4 <__alt_data_end+0xff009fb4>
    a0bc:	da802217 	ldw	r10,136(sp)
    a0c0:	54400017 	ldw	r17,0(r10)
    a0c4:	50800104 	addi	r2,r10,4
    a0c8:	883e3b16 	blt	r17,zero,99b8 <__alt_data_end+0xff0099b8>
    a0cc:	d8802215 	stw	r2,136(sp)
    a0d0:	80c00007 	ldb	r3,0(r16)
    a0d4:	003db406 	br	97a8 <__alt_data_end+0xff0097a8>
    a0d8:	01000044 	movi	r4,1
    a0dc:	01c00ac4 	movi	r7,43
    a0e0:	80c00007 	ldb	r3,0(r16)
    a0e4:	003db006 	br	97a8 <__alt_data_end+0xff0097a8>
    a0e8:	80c00007 	ldb	r3,0(r16)
    a0ec:	82800044 	addi	r10,r16,1
    a0f0:	1b423c26 	beq	r3,r13,a9e4 <___vfiprintf_internal_r+0x13b8>
    a0f4:	18bff404 	addi	r2,r3,-48
    a0f8:	0013883a 	mov	r9,zero
    a0fc:	30822b36 	bltu	r6,r2,a9ac <___vfiprintf_internal_r+0x1380>
    a100:	50c00007 	ldb	r3,0(r10)
    a104:	4a4002a4 	muli	r9,r9,10
    a108:	54000044 	addi	r16,r10,1
    a10c:	8015883a 	mov	r10,r16
    a110:	4893883a 	add	r9,r9,r2
    a114:	18bff404 	addi	r2,r3,-48
    a118:	30bff92e 	bgeu	r6,r2,a100 <__alt_data_end+0xff00a100>
    a11c:	483da30e 	bge	r9,zero,97ac <__alt_data_end+0xff0097ac>
    a120:	027fffc4 	movi	r9,-1
    a124:	003da106 	br	97ac <__alt_data_end+0xff0097ac>
    a128:	a5001014 	ori	r20,r20,64
    a12c:	80c00007 	ldb	r3,0(r16)
    a130:	003d9d06 	br	97a8 <__alt_data_end+0xff0097a8>
    a134:	da802217 	ldw	r10,136(sp)
    a138:	d8001d85 	stb	zero,118(sp)
    a13c:	50c00204 	addi	r3,r10,8
    a140:	54800017 	ldw	r18,0(r10)
    a144:	54c00117 	ldw	r19,4(r10)
    a148:	4801ca16 	blt	r9,zero,a874 <___vfiprintf_internal_r+0x1248>
    a14c:	013fdfc4 	movi	r4,-129
    a150:	94c4b03a 	or	r2,r18,r19
    a154:	d8c02215 	stw	r3,136(sp)
    a158:	a128703a 	and	r20,r20,r4
    a15c:	0039883a 	mov	fp,zero
    a160:	103f341e 	bne	r2,zero,9e34 <__alt_data_end+0xff009e34>
    a164:	483e2e26 	beq	r9,zero,9a20 <__alt_data_end+0xff009a20>
    a168:	0025883a 	mov	r18,zero
    a16c:	94800c04 	addi	r18,r18,48
    a170:	dc8019c5 	stb	r18,103(sp)
    a174:	dcc02717 	ldw	r19,156(sp)
    a178:	dd4019c4 	addi	r21,sp,103
    a17c:	003e2b06 	br	9a2c <__alt_data_end+0xff009a2c>
    a180:	21003fcc 	andi	r4,r4,255
    a184:	2002361e 	bne	r4,zero,aa60 <___vfiprintf_internal_r+0x1434>
    a188:	1801c126 	beq	r3,zero,a890 <___vfiprintf_internal_r+0x1264>
    a18c:	04800044 	movi	r18,1
    a190:	d8c01005 	stb	r3,64(sp)
    a194:	d8001d85 	stb	zero,118(sp)
    a198:	9027883a 	mov	r19,r18
    a19c:	dd401004 	addi	r21,sp,64
    a1a0:	003f1106 	br	9de8 <__alt_data_end+0xff009de8>
    a1a4:	d9402117 	ldw	r5,132(sp)
    a1a8:	d9002017 	ldw	r4,128(sp)
    a1ac:	d9801a04 	addi	r6,sp,104
    a1b0:	d9c02b15 	stw	r7,172(sp)
    a1b4:	dbc02a15 	stw	r15,168(sp)
    a1b8:	00095180 	call	9518 <__sprint_r.part.0>
    a1bc:	d9c02b17 	ldw	r7,172(sp)
    a1c0:	dbc02a17 	ldw	r15,168(sp)
    a1c4:	10006d1e 	bne	r2,zero,a37c <___vfiprintf_internal_r+0xd50>
    a1c8:	d9801b17 	ldw	r6,108(sp)
    a1cc:	d8801c17 	ldw	r2,112(sp)
    a1d0:	d811883a 	mov	r8,sp
    a1d4:	31400044 	addi	r5,r6,1
    a1d8:	003e3306 	br	9aa8 <__alt_data_end+0xff009aa8>
    a1dc:	d9401b17 	ldw	r5,108(sp)
    a1e0:	d8801c17 	ldw	r2,112(sp)
    a1e4:	29000044 	addi	r4,r5,1
    a1e8:	d8c01d87 	ldb	r3,118(sp)
    a1ec:	183e4d26 	beq	r3,zero,9b24 <__alt_data_end+0xff009b24>
    a1f0:	00c00044 	movi	r3,1
    a1f4:	d9401d84 	addi	r5,sp,118
    a1f8:	10c5883a 	add	r2,r2,r3
    a1fc:	41400015 	stw	r5,0(r8)
    a200:	40c00115 	stw	r3,4(r8)
    a204:	d8801c15 	stw	r2,112(sp)
    a208:	d9001b15 	stw	r4,108(sp)
    a20c:	014001c4 	movi	r5,7
    a210:	2900a90e 	bge	r5,r4,a4b8 <___vfiprintf_internal_r+0xe8c>
    a214:	1000da1e 	bne	r2,zero,a580 <___vfiprintf_internal_r+0xf54>
    a218:	7000ab1e 	bne	r14,zero,a4c8 <___vfiprintf_internal_r+0xe9c>
    a21c:	000b883a 	mov	r5,zero
    a220:	1809883a 	mov	r4,r3
    a224:	d811883a 	mov	r8,sp
    a228:	00c02004 	movi	r3,128
    a22c:	e0fe4d26 	beq	fp,r3,9b64 <__alt_data_end+0xff009b64>
    a230:	4cf9c83a 	sub	fp,r9,r19
    a234:	073e7b0e 	bge	zero,fp,9c24 <__alt_data_end+0xff009c24>
    a238:	01c00404 	movi	r7,16
    a23c:	3f01900e 	bge	r7,fp,a880 <___vfiprintf_internal_r+0x1254>
    a240:	00c00074 	movhi	r3,1
    a244:	18c26204 	addi	r3,r3,2440
    a248:	d8c02415 	stw	r3,144(sp)
    a24c:	034001c4 	movi	r13,7
    a250:	00000506 	br	a268 <___vfiprintf_internal_r+0xc3c>
    a254:	29000084 	addi	r4,r5,2
    a258:	42000204 	addi	r8,r8,8
    a25c:	180b883a 	mov	r5,r3
    a260:	e73ffc04 	addi	fp,fp,-16
    a264:	3f000d0e 	bge	r7,fp,a29c <___vfiprintf_internal_r+0xc70>
    a268:	10800404 	addi	r2,r2,16
    a26c:	28c00044 	addi	r3,r5,1
    a270:	45c00015 	stw	r23,0(r8)
    a274:	41c00115 	stw	r7,4(r8)
    a278:	d8801c15 	stw	r2,112(sp)
    a27c:	d8c01b15 	stw	r3,108(sp)
    a280:	68fff40e 	bge	r13,r3,a254 <__alt_data_end+0xff00a254>
    a284:	1000101e 	bne	r2,zero,a2c8 <___vfiprintf_internal_r+0xc9c>
    a288:	e73ffc04 	addi	fp,fp,-16
    a28c:	01000044 	movi	r4,1
    a290:	000b883a 	mov	r5,zero
    a294:	d811883a 	mov	r8,sp
    a298:	3f3ff316 	blt	r7,fp,a268 <__alt_data_end+0xff00a268>
    a29c:	da802417 	ldw	r10,144(sp)
    a2a0:	1705883a 	add	r2,r2,fp
    a2a4:	47000115 	stw	fp,4(r8)
    a2a8:	42800015 	stw	r10,0(r8)
    a2ac:	d8801c15 	stw	r2,112(sp)
    a2b0:	d9001b15 	stw	r4,108(sp)
    a2b4:	00c001c4 	movi	r3,7
    a2b8:	19003616 	blt	r3,r4,a394 <___vfiprintf_internal_r+0xd68>
    a2bc:	42000204 	addi	r8,r8,8
    a2c0:	21000044 	addi	r4,r4,1
    a2c4:	003e5706 	br	9c24 <__alt_data_end+0xff009c24>
    a2c8:	d9402117 	ldw	r5,132(sp)
    a2cc:	d9002017 	ldw	r4,128(sp)
    a2d0:	d9801a04 	addi	r6,sp,104
    a2d4:	d9c02b15 	stw	r7,172(sp)
    a2d8:	db402a15 	stw	r13,168(sp)
    a2dc:	00095180 	call	9518 <__sprint_r.part.0>
    a2e0:	d9c02b17 	ldw	r7,172(sp)
    a2e4:	db402a17 	ldw	r13,168(sp)
    a2e8:	1000241e 	bne	r2,zero,a37c <___vfiprintf_internal_r+0xd50>
    a2ec:	d9401b17 	ldw	r5,108(sp)
    a2f0:	d8801c17 	ldw	r2,112(sp)
    a2f4:	d811883a 	mov	r8,sp
    a2f8:	29000044 	addi	r4,r5,1
    a2fc:	003fd806 	br	a260 <__alt_data_end+0xff00a260>
    a300:	d9401b17 	ldw	r5,108(sp)
    a304:	00c00074 	movhi	r3,1
    a308:	18c26604 	addi	r3,r3,2456
    a30c:	d8c02415 	stw	r3,144(sp)
    a310:	29400044 	addi	r5,r5,1
    a314:	d8c02417 	ldw	r3,144(sp)
    a318:	14c5883a 	add	r2,r2,r19
    a31c:	44c00115 	stw	r19,4(r8)
    a320:	40c00015 	stw	r3,0(r8)
    a324:	d8801c15 	stw	r2,112(sp)
    a328:	d9401b15 	stw	r5,108(sp)
    a32c:	00c001c4 	movi	r3,7
    a330:	1940070e 	bge	r3,r5,a350 <___vfiprintf_internal_r+0xd24>
    a334:	103e4826 	beq	r2,zero,9c58 <__alt_data_end+0xff009c58>
    a338:	d9402117 	ldw	r5,132(sp)
    a33c:	d9002017 	ldw	r4,128(sp)
    a340:	d9801a04 	addi	r6,sp,104
    a344:	00095180 	call	9518 <__sprint_r.part.0>
    a348:	10000c1e 	bne	r2,zero,a37c <___vfiprintf_internal_r+0xd50>
    a34c:	d8801c17 	ldw	r2,112(sp)
    a350:	8c80010e 	bge	r17,r18,a358 <___vfiprintf_internal_r+0xd2c>
    a354:	9023883a 	mov	r17,r18
    a358:	da802317 	ldw	r10,140(sp)
    a35c:	5455883a 	add	r10,r10,r17
    a360:	da802315 	stw	r10,140(sp)
    a364:	103e4126 	beq	r2,zero,9c6c <__alt_data_end+0xff009c6c>
    a368:	d9402117 	ldw	r5,132(sp)
    a36c:	d9002017 	ldw	r4,128(sp)
    a370:	d9801a04 	addi	r6,sp,104
    a374:	00095180 	call	9518 <__sprint_r.part.0>
    a378:	103e3c26 	beq	r2,zero,9c6c <__alt_data_end+0xff009c6c>
    a37c:	dd002117 	ldw	r20,132(sp)
    a380:	a080030b 	ldhu	r2,12(r20)
    a384:	1080100c 	andi	r2,r2,64
    a388:	1001231e 	bne	r2,zero,a818 <___vfiprintf_internal_r+0x11ec>
    a38c:	d8802317 	ldw	r2,140(sp)
    a390:	003d7b06 	br	9980 <__alt_data_end+0xff009980>
    a394:	1000991e 	bne	r2,zero,a5fc <___vfiprintf_internal_r+0xfd0>
    a398:	00c00044 	movi	r3,1
    a39c:	9805883a 	mov	r2,r19
    a3a0:	dd400015 	stw	r21,0(sp)
    a3a4:	dcc00115 	stw	r19,4(sp)
    a3a8:	dcc01c15 	stw	r19,112(sp)
    a3ac:	d8c01b15 	stw	r3,108(sp)
    a3b0:	d811883a 	mov	r8,sp
    a3b4:	42000204 	addi	r8,r8,8
    a3b8:	a2c0010c 	andi	r11,r20,4
    a3bc:	583fe426 	beq	r11,zero,a350 <__alt_data_end+0xff00a350>
    a3c0:	8ca7c83a 	sub	r19,r17,r18
    a3c4:	04ffe20e 	bge	zero,r19,a350 <__alt_data_end+0xff00a350>
    a3c8:	01c00404 	movi	r7,16
    a3cc:	3cffcc0e 	bge	r7,r19,a300 <__alt_data_end+0xff00a300>
    a3d0:	02800074 	movhi	r10,1
    a3d4:	52826604 	addi	r10,r10,2456
    a3d8:	d9001b17 	ldw	r4,108(sp)
    a3dc:	da802415 	stw	r10,144(sp)
    a3e0:	382b883a 	mov	r21,r7
    a3e4:	050001c4 	movi	r20,7
    a3e8:	df002017 	ldw	fp,128(sp)
    a3ec:	00000506 	br	a404 <___vfiprintf_internal_r+0xdd8>
    a3f0:	21400084 	addi	r5,r4,2
    a3f4:	42000204 	addi	r8,r8,8
    a3f8:	1809883a 	mov	r4,r3
    a3fc:	9cfffc04 	addi	r19,r19,-16
    a400:	acffc40e 	bge	r21,r19,a314 <__alt_data_end+0xff00a314>
    a404:	10800404 	addi	r2,r2,16
    a408:	20c00044 	addi	r3,r4,1
    a40c:	45800015 	stw	r22,0(r8)
    a410:	45400115 	stw	r21,4(r8)
    a414:	d8801c15 	stw	r2,112(sp)
    a418:	d8c01b15 	stw	r3,108(sp)
    a41c:	a0fff40e 	bge	r20,r3,a3f0 <__alt_data_end+0xff00a3f0>
    a420:	1000041e 	bne	r2,zero,a434 <___vfiprintf_internal_r+0xe08>
    a424:	01400044 	movi	r5,1
    a428:	0009883a 	mov	r4,zero
    a42c:	d811883a 	mov	r8,sp
    a430:	003ff206 	br	a3fc <__alt_data_end+0xff00a3fc>
    a434:	d9402117 	ldw	r5,132(sp)
    a438:	d9801a04 	addi	r6,sp,104
    a43c:	e009883a 	mov	r4,fp
    a440:	00095180 	call	9518 <__sprint_r.part.0>
    a444:	103fcd1e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a448:	d9001b17 	ldw	r4,108(sp)
    a44c:	d8801c17 	ldw	r2,112(sp)
    a450:	d811883a 	mov	r8,sp
    a454:	21400044 	addi	r5,r4,1
    a458:	003fe806 	br	a3fc <__alt_data_end+0xff00a3fc>
    a45c:	d9402117 	ldw	r5,132(sp)
    a460:	d9002017 	ldw	r4,128(sp)
    a464:	d9801a04 	addi	r6,sp,104
    a468:	d9c02b15 	stw	r7,172(sp)
    a46c:	db402a15 	stw	r13,168(sp)
    a470:	00095180 	call	9518 <__sprint_r.part.0>
    a474:	d9c02b17 	ldw	r7,172(sp)
    a478:	db402a17 	ldw	r13,168(sp)
    a47c:	103fbf1e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a480:	d9401b17 	ldw	r5,108(sp)
    a484:	d8801c17 	ldw	r2,112(sp)
    a488:	d811883a 	mov	r8,sp
    a48c:	29800044 	addi	r6,r5,1
    a490:	003dc406 	br	9ba4 <__alt_data_end+0xff009ba4>
    a494:	1000d21e 	bne	r2,zero,a7e0 <___vfiprintf_internal_r+0x11b4>
    a498:	d8c01d87 	ldb	r3,118(sp)
    a49c:	18009526 	beq	r3,zero,a6f4 <___vfiprintf_internal_r+0x10c8>
    a4a0:	00800044 	movi	r2,1
    a4a4:	d8c01d84 	addi	r3,sp,118
    a4a8:	1009883a 	mov	r4,r2
    a4ac:	d8c00015 	stw	r3,0(sp)
    a4b0:	d8800115 	stw	r2,4(sp)
    a4b4:	d811883a 	mov	r8,sp
    a4b8:	200b883a 	mov	r5,r4
    a4bc:	42000204 	addi	r8,r8,8
    a4c0:	21000044 	addi	r4,r4,1
    a4c4:	003d9706 	br	9b24 <__alt_data_end+0xff009b24>
    a4c8:	d9001d04 	addi	r4,sp,116
    a4cc:	00800084 	movi	r2,2
    a4d0:	d9000015 	stw	r4,0(sp)
    a4d4:	d8800115 	stw	r2,4(sp)
    a4d8:	1809883a 	mov	r4,r3
    a4dc:	d811883a 	mov	r8,sp
    a4e0:	200b883a 	mov	r5,r4
    a4e4:	42000204 	addi	r8,r8,8
    a4e8:	21000044 	addi	r4,r4,1
    a4ec:	003f4e06 	br	a228 <__alt_data_end+0xff00a228>
    a4f0:	d8001d85 	stb	zero,118(sp)
    a4f4:	48005016 	blt	r9,zero,a638 <___vfiprintf_internal_r+0x100c>
    a4f8:	00ffdfc4 	movi	r3,-129
    a4fc:	94c4b03a 	or	r2,r18,r19
    a500:	a0e8703a 	and	r20,r20,r3
    a504:	103d4426 	beq	r2,zero,9a18 <__alt_data_end+0xff009a18>
    a508:	0039883a 	mov	fp,zero
    a50c:	d9002617 	ldw	r4,152(sp)
    a510:	dd401a04 	addi	r21,sp,104
    a514:	908003cc 	andi	r2,r18,15
    a518:	9806973a 	slli	r3,r19,28
    a51c:	2085883a 	add	r2,r4,r2
    a520:	9024d13a 	srli	r18,r18,4
    a524:	10800003 	ldbu	r2,0(r2)
    a528:	9826d13a 	srli	r19,r19,4
    a52c:	ad7fffc4 	addi	r21,r21,-1
    a530:	1ca4b03a 	or	r18,r3,r18
    a534:	a8800005 	stb	r2,0(r21)
    a538:	94c4b03a 	or	r2,r18,r19
    a53c:	103ff51e 	bne	r2,zero,a514 <__alt_data_end+0xff00a514>
    a540:	003e5906 	br	9ea8 <__alt_data_end+0xff009ea8>
    a544:	d9402117 	ldw	r5,132(sp)
    a548:	d9002017 	ldw	r4,128(sp)
    a54c:	d9801a04 	addi	r6,sp,104
    a550:	00095180 	call	9518 <__sprint_r.part.0>
    a554:	103f891e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a558:	d8801c17 	ldw	r2,112(sp)
    a55c:	d811883a 	mov	r8,sp
    a560:	003f9506 	br	a3b8 <__alt_data_end+0xff00a3b8>
    a564:	d9402117 	ldw	r5,132(sp)
    a568:	d9002017 	ldw	r4,128(sp)
    a56c:	d9801a04 	addi	r6,sp,104
    a570:	00095180 	call	9518 <__sprint_r.part.0>
    a574:	103f811e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a578:	d811883a 	mov	r8,sp
    a57c:	003ced06 	br	9934 <__alt_data_end+0xff009934>
    a580:	d9402117 	ldw	r5,132(sp)
    a584:	d9002017 	ldw	r4,128(sp)
    a588:	d9801a04 	addi	r6,sp,104
    a58c:	da402c15 	stw	r9,176(sp)
    a590:	db802a15 	stw	r14,168(sp)
    a594:	00095180 	call	9518 <__sprint_r.part.0>
    a598:	da402c17 	ldw	r9,176(sp)
    a59c:	db802a17 	ldw	r14,168(sp)
    a5a0:	103f761e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a5a4:	d9401b17 	ldw	r5,108(sp)
    a5a8:	d8801c17 	ldw	r2,112(sp)
    a5ac:	d811883a 	mov	r8,sp
    a5b0:	29000044 	addi	r4,r5,1
    a5b4:	003d5b06 	br	9b24 <__alt_data_end+0xff009b24>
    a5b8:	d9402117 	ldw	r5,132(sp)
    a5bc:	d9002017 	ldw	r4,128(sp)
    a5c0:	d9801a04 	addi	r6,sp,104
    a5c4:	da402c15 	stw	r9,176(sp)
    a5c8:	00095180 	call	9518 <__sprint_r.part.0>
    a5cc:	da402c17 	ldw	r9,176(sp)
    a5d0:	103f6a1e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a5d4:	d9401b17 	ldw	r5,108(sp)
    a5d8:	d8801c17 	ldw	r2,112(sp)
    a5dc:	d811883a 	mov	r8,sp
    a5e0:	29000044 	addi	r4,r5,1
    a5e4:	003f1006 	br	a228 <__alt_data_end+0xff00a228>
    a5e8:	1000c31e 	bne	r2,zero,a8f8 <___vfiprintf_internal_r+0x12cc>
    a5ec:	01000044 	movi	r4,1
    a5f0:	000b883a 	mov	r5,zero
    a5f4:	d811883a 	mov	r8,sp
    a5f8:	003f0d06 	br	a230 <__alt_data_end+0xff00a230>
    a5fc:	d9402117 	ldw	r5,132(sp)
    a600:	d9002017 	ldw	r4,128(sp)
    a604:	d9801a04 	addi	r6,sp,104
    a608:	00095180 	call	9518 <__sprint_r.part.0>
    a60c:	103f5b1e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a610:	d9001b17 	ldw	r4,108(sp)
    a614:	d8801c17 	ldw	r2,112(sp)
    a618:	d811883a 	mov	r8,sp
    a61c:	21000044 	addi	r4,r4,1
    a620:	003d8006 	br	9c24 <__alt_data_end+0xff009c24>
    a624:	01000074 	movhi	r4,1
    a628:	21020104 	addi	r4,r4,2052
    a62c:	d9002615 	stw	r4,152(sp)
    a630:	d8c02215 	stw	r3,136(sp)
    a634:	1029883a 	mov	r20,r2
    a638:	94c4b03a 	or	r2,r18,r19
    a63c:	103fb21e 	bne	r2,zero,a508 <__alt_data_end+0xff00a508>
    a640:	0039883a 	mov	fp,zero
    a644:	00800084 	movi	r2,2
    a648:	003e6b06 	br	9ff8 <__alt_data_end+0xff009ff8>
    a64c:	da802217 	ldw	r10,136(sp)
    a650:	d8001d85 	stb	zero,118(sp)
    a654:	0027883a 	mov	r19,zero
    a658:	50800104 	addi	r2,r10,4
    a65c:	54800017 	ldw	r18,0(r10)
    a660:	483e6016 	blt	r9,zero,9fe4 <__alt_data_end+0xff009fe4>
    a664:	00ffdfc4 	movi	r3,-129
    a668:	d8802215 	stw	r2,136(sp)
    a66c:	a0e8703a 	and	r20,r20,r3
    a670:	0039883a 	mov	fp,zero
    a674:	903ebb26 	beq	r18,zero,a164 <__alt_data_end+0xff00a164>
    a678:	00800244 	movi	r2,9
    a67c:	14bdee36 	bltu	r2,r18,9e38 <__alt_data_end+0xff009e38>
    a680:	003eba06 	br	a16c <__alt_data_end+0xff00a16c>
    a684:	00800c04 	movi	r2,48
    a688:	d8c01d45 	stb	r3,117(sp)
    a68c:	d8801d05 	stb	r2,116(sp)
    a690:	d8001d85 	stb	zero,118(sp)
    a694:	a0c00094 	ori	r3,r20,2
    a698:	4800a916 	blt	r9,zero,a940 <___vfiprintf_internal_r+0x1314>
    a69c:	00bfdfc4 	movi	r2,-129
    a6a0:	a096703a 	and	r11,r20,r2
    a6a4:	5d000094 	ori	r20,r11,2
    a6a8:	0039883a 	mov	fp,zero
    a6ac:	003f9706 	br	a50c <__alt_data_end+0xff00a50c>
    a6b0:	8025883a 	mov	r18,r16
    a6b4:	003c2e06 	br	9770 <__alt_data_end+0xff009770>
    a6b8:	00800074 	movhi	r2,1
    a6bc:	10820104 	addi	r2,r2,2052
    a6c0:	0039883a 	mov	fp,zero
    a6c4:	d8802615 	stw	r2,152(sp)
    a6c8:	003f9006 	br	a50c <__alt_data_end+0xff00a50c>
    a6cc:	04a5c83a 	sub	r18,zero,r18
    a6d0:	07000b44 	movi	fp,45
    a6d4:	9004c03a 	cmpne	r2,r18,zero
    a6d8:	04e7c83a 	sub	r19,zero,r19
    a6dc:	df001d85 	stb	fp,118(sp)
    a6e0:	98a7c83a 	sub	r19,r19,r2
    a6e4:	48009f16 	blt	r9,zero,a964 <___vfiprintf_internal_r+0x1338>
    a6e8:	00bfdfc4 	movi	r2,-129
    a6ec:	a0a8703a 	and	r20,r20,r2
    a6f0:	003dd006 	br	9e34 <__alt_data_end+0xff009e34>
    a6f4:	70004c26 	beq	r14,zero,a828 <___vfiprintf_internal_r+0x11fc>
    a6f8:	00800084 	movi	r2,2
    a6fc:	d8c01d04 	addi	r3,sp,116
    a700:	d8c00015 	stw	r3,0(sp)
    a704:	d8800115 	stw	r2,4(sp)
    a708:	01000044 	movi	r4,1
    a70c:	d811883a 	mov	r8,sp
    a710:	003f7306 	br	a4e0 <__alt_data_end+0xff00a4e0>
    a714:	a080100c 	andi	r2,r20,64
    a718:	da802217 	ldw	r10,136(sp)
    a71c:	103e0626 	beq	r2,zero,9f38 <__alt_data_end+0xff009f38>
    a720:	5480000f 	ldh	r18,0(r10)
    a724:	52800104 	addi	r10,r10,4
    a728:	da802215 	stw	r10,136(sp)
    a72c:	9027d7fa 	srai	r19,r18,31
    a730:	9805883a 	mov	r2,r19
    a734:	003db806 	br	9e18 <__alt_data_end+0xff009e18>
    a738:	a080040c 	andi	r2,r20,16
    a73c:	1000091e 	bne	r2,zero,a764 <___vfiprintf_internal_r+0x1138>
    a740:	a2c0100c 	andi	r11,r20,64
    a744:	58000726 	beq	r11,zero,a764 <___vfiprintf_internal_r+0x1138>
    a748:	da802217 	ldw	r10,136(sp)
    a74c:	50800017 	ldw	r2,0(r10)
    a750:	52800104 	addi	r10,r10,4
    a754:	da802215 	stw	r10,136(sp)
    a758:	da802317 	ldw	r10,140(sp)
    a75c:	1280000d 	sth	r10,0(r2)
    a760:	003be706 	br	9700 <__alt_data_end+0xff009700>
    a764:	da802217 	ldw	r10,136(sp)
    a768:	50800017 	ldw	r2,0(r10)
    a76c:	52800104 	addi	r10,r10,4
    a770:	da802215 	stw	r10,136(sp)
    a774:	da802317 	ldw	r10,140(sp)
    a778:	12800015 	stw	r10,0(r2)
    a77c:	003be006 	br	9700 <__alt_data_end+0xff009700>
    a780:	a080100c 	andi	r2,r20,64
    a784:	da802217 	ldw	r10,136(sp)
    a788:	10003026 	beq	r2,zero,a84c <___vfiprintf_internal_r+0x1220>
    a78c:	5480000b 	ldhu	r18,0(r10)
    a790:	52800104 	addi	r10,r10,4
    a794:	0027883a 	mov	r19,zero
    a798:	da802215 	stw	r10,136(sp)
    a79c:	003d8006 	br	9da0 <__alt_data_end+0xff009da0>
    a7a0:	80c00007 	ldb	r3,0(r16)
    a7a4:	003c0006 	br	97a8 <__alt_data_end+0xff0097a8>
    a7a8:	a080100c 	andi	r2,r20,64
    a7ac:	d8001d85 	stb	zero,118(sp)
    a7b0:	da802217 	ldw	r10,136(sp)
    a7b4:	1000201e 	bne	r2,zero,a838 <___vfiprintf_internal_r+0x120c>
    a7b8:	50800104 	addi	r2,r10,4
    a7bc:	54800017 	ldw	r18,0(r10)
    a7c0:	0027883a 	mov	r19,zero
    a7c4:	483def0e 	bge	r9,zero,9f84 <__alt_data_end+0xff009f84>
    a7c8:	94c6b03a 	or	r3,r18,r19
    a7cc:	d8802215 	stw	r2,136(sp)
    a7d0:	183d4e1e 	bne	r3,zero,9d0c <__alt_data_end+0xff009d0c>
    a7d4:	0039883a 	mov	fp,zero
    a7d8:	0005883a 	mov	r2,zero
    a7dc:	003e0606 	br	9ff8 <__alt_data_end+0xff009ff8>
    a7e0:	d9402117 	ldw	r5,132(sp)
    a7e4:	d9002017 	ldw	r4,128(sp)
    a7e8:	d9801a04 	addi	r6,sp,104
    a7ec:	da402c15 	stw	r9,176(sp)
    a7f0:	db802a15 	stw	r14,168(sp)
    a7f4:	00095180 	call	9518 <__sprint_r.part.0>
    a7f8:	da402c17 	ldw	r9,176(sp)
    a7fc:	db802a17 	ldw	r14,168(sp)
    a800:	103ede1e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a804:	d9401b17 	ldw	r5,108(sp)
    a808:	d8801c17 	ldw	r2,112(sp)
    a80c:	d811883a 	mov	r8,sp
    a810:	29000044 	addi	r4,r5,1
    a814:	003e7406 	br	a1e8 <__alt_data_end+0xff00a1e8>
    a818:	00bfffc4 	movi	r2,-1
    a81c:	003c5806 	br	9980 <__alt_data_end+0xff009980>
    a820:	d811883a 	mov	r8,sp
    a824:	003ee806 	br	a3c8 <__alt_data_end+0xff00a3c8>
    a828:	000b883a 	mov	r5,zero
    a82c:	01000044 	movi	r4,1
    a830:	d811883a 	mov	r8,sp
    a834:	003e7c06 	br	a228 <__alt_data_end+0xff00a228>
    a838:	50800104 	addi	r2,r10,4
    a83c:	5480000b 	ldhu	r18,0(r10)
    a840:	0027883a 	mov	r19,zero
    a844:	483dcf0e 	bge	r9,zero,9f84 <__alt_data_end+0xff009f84>
    a848:	003fdf06 	br	a7c8 <__alt_data_end+0xff00a7c8>
    a84c:	54800017 	ldw	r18,0(r10)
    a850:	52800104 	addi	r10,r10,4
    a854:	0027883a 	mov	r19,zero
    a858:	da802215 	stw	r10,136(sp)
    a85c:	003d5006 	br	9da0 <__alt_data_end+0xff009da0>
    a860:	50800104 	addi	r2,r10,4
    a864:	5480000b 	ldhu	r18,0(r10)
    a868:	0027883a 	mov	r19,zero
    a86c:	483f7d0e 	bge	r9,zero,a664 <__alt_data_end+0xff00a664>
    a870:	003ddc06 	br	9fe4 <__alt_data_end+0xff009fe4>
    a874:	d8c02215 	stw	r3,136(sp)
    a878:	0039883a 	mov	fp,zero
    a87c:	003ddb06 	br	9fec <__alt_data_end+0xff009fec>
    a880:	02800074 	movhi	r10,1
    a884:	52826204 	addi	r10,r10,2440
    a888:	da802415 	stw	r10,144(sp)
    a88c:	003e8306 	br	a29c <__alt_data_end+0xff00a29c>
    a890:	d8801c17 	ldw	r2,112(sp)
    a894:	dd002117 	ldw	r20,132(sp)
    a898:	103eb926 	beq	r2,zero,a380 <__alt_data_end+0xff00a380>
    a89c:	d9002017 	ldw	r4,128(sp)
    a8a0:	d9801a04 	addi	r6,sp,104
    a8a4:	a00b883a 	mov	r5,r20
    a8a8:	00095180 	call	9518 <__sprint_r.part.0>
    a8ac:	003eb406 	br	a380 <__alt_data_end+0xff00a380>
    a8b0:	80c00043 	ldbu	r3,1(r16)
    a8b4:	a5000814 	ori	r20,r20,32
    a8b8:	84000044 	addi	r16,r16,1
    a8bc:	18c03fcc 	andi	r3,r3,255
    a8c0:	18c0201c 	xori	r3,r3,128
    a8c4:	18ffe004 	addi	r3,r3,-128
    a8c8:	003bb706 	br	97a8 <__alt_data_end+0xff0097a8>
    a8cc:	a809883a 	mov	r4,r21
    a8d0:	d8c02a15 	stw	r3,168(sp)
    a8d4:	da002b15 	stw	r8,172(sp)
    a8d8:	00027e00 	call	27e0 <strlen>
    a8dc:	d8c02a17 	ldw	r3,168(sp)
    a8e0:	1027883a 	mov	r19,r2
    a8e4:	df001d83 	ldbu	fp,118(sp)
    a8e8:	d8c02215 	stw	r3,136(sp)
    a8ec:	0013883a 	mov	r9,zero
    a8f0:	da002b17 	ldw	r8,172(sp)
    a8f4:	003c4d06 	br	9a2c <__alt_data_end+0xff009a2c>
    a8f8:	d9402117 	ldw	r5,132(sp)
    a8fc:	d9002017 	ldw	r4,128(sp)
    a900:	d9801a04 	addi	r6,sp,104
    a904:	da402c15 	stw	r9,176(sp)
    a908:	00095180 	call	9518 <__sprint_r.part.0>
    a90c:	da402c17 	ldw	r9,176(sp)
    a910:	103e9a1e 	bne	r2,zero,a37c <__alt_data_end+0xff00a37c>
    a914:	d9401b17 	ldw	r5,108(sp)
    a918:	d8801c17 	ldw	r2,112(sp)
    a91c:	d811883a 	mov	r8,sp
    a920:	29000044 	addi	r4,r5,1
    a924:	003e4206 	br	a230 <__alt_data_end+0xff00a230>
    a928:	d9401b17 	ldw	r5,108(sp)
    a92c:	01000074 	movhi	r4,1
    a930:	21026604 	addi	r4,r4,2456
    a934:	d9002415 	stw	r4,144(sp)
    a938:	29400044 	addi	r5,r5,1
    a93c:	003c6d06 	br	9af4 <__alt_data_end+0xff009af4>
    a940:	0039883a 	mov	fp,zero
    a944:	00800084 	movi	r2,2
    a948:	10803fcc 	andi	r2,r2,255
    a94c:	01000044 	movi	r4,1
    a950:	11001e26 	beq	r2,r4,a9cc <___vfiprintf_internal_r+0x13a0>
    a954:	01000084 	movi	r4,2
    a958:	11001e1e 	bne	r2,r4,a9d4 <___vfiprintf_internal_r+0x13a8>
    a95c:	1829883a 	mov	r20,r3
    a960:	003eea06 	br	a50c <__alt_data_end+0xff00a50c>
    a964:	a007883a 	mov	r3,r20
    a968:	00800044 	movi	r2,1
    a96c:	003ff606 	br	a948 <__alt_data_end+0xff00a948>
    a970:	00800184 	movi	r2,6
    a974:	1240012e 	bgeu	r2,r9,a97c <___vfiprintf_internal_r+0x1350>
    a978:	1013883a 	mov	r9,r2
    a97c:	4827883a 	mov	r19,r9
    a980:	4825883a 	mov	r18,r9
    a984:	48001516 	blt	r9,zero,a9dc <___vfiprintf_internal_r+0x13b0>
    a988:	05400074 	movhi	r21,1
    a98c:	d8c02215 	stw	r3,136(sp)
    a990:	ad420604 	addi	r21,r21,2072
    a994:	003d1406 	br	9de8 <__alt_data_end+0xff009de8>
    a998:	02800074 	movhi	r10,1
    a99c:	52826204 	addi	r10,r10,2440
    a9a0:	da802415 	stw	r10,144(sp)
    a9a4:	200d883a 	mov	r6,r4
    a9a8:	003c9106 	br	9bf0 <__alt_data_end+0xff009bf0>
    a9ac:	5021883a 	mov	r16,r10
    a9b0:	0013883a 	mov	r9,zero
    a9b4:	003b7d06 	br	97ac <__alt_data_end+0xff0097ac>
    a9b8:	4827883a 	mov	r19,r9
    a9bc:	df001d83 	ldbu	fp,118(sp)
    a9c0:	d8c02215 	stw	r3,136(sp)
    a9c4:	0013883a 	mov	r9,zero
    a9c8:	003c1806 	br	9a2c <__alt_data_end+0xff009a2c>
    a9cc:	1829883a 	mov	r20,r3
    a9d0:	003d1806 	br	9e34 <__alt_data_end+0xff009e34>
    a9d4:	1829883a 	mov	r20,r3
    a9d8:	003ccd06 	br	9d10 <__alt_data_end+0xff009d10>
    a9dc:	0025883a 	mov	r18,zero
    a9e0:	003fe906 	br	a988 <__alt_data_end+0xff00a988>
    a9e4:	d8802217 	ldw	r2,136(sp)
    a9e8:	80c00043 	ldbu	r3,1(r16)
    a9ec:	5021883a 	mov	r16,r10
    a9f0:	12400017 	ldw	r9,0(r2)
    a9f4:	10800104 	addi	r2,r2,4
    a9f8:	d8802215 	stw	r2,136(sp)
    a9fc:	483faf0e 	bge	r9,zero,a8bc <__alt_data_end+0xff00a8bc>
    aa00:	18c03fcc 	andi	r3,r3,255
    aa04:	18c0201c 	xori	r3,r3,128
    aa08:	027fffc4 	movi	r9,-1
    aa0c:	18ffe004 	addi	r3,r3,-128
    aa10:	003b6506 	br	97a8 <__alt_data_end+0xff0097a8>
    aa14:	d9c01d85 	stb	r7,118(sp)
    aa18:	003ca006 	br	9c9c <__alt_data_end+0xff009c9c>
    aa1c:	d9c01d85 	stb	r7,118(sp)
    aa20:	003cad06 	br	9cd8 <__alt_data_end+0xff009cd8>
    aa24:	d9c01d85 	stb	r7,118(sp)
    aa28:	003d7d06 	br	a020 <__alt_data_end+0xff00a020>
    aa2c:	d9c01d85 	stb	r7,118(sp)
    aa30:	003d5f06 	br	9fb0 <__alt_data_end+0xff009fb0>
    aa34:	a080004c 	andi	r2,r20,1
    aa38:	0039883a 	mov	fp,zero
    aa3c:	10000526 	beq	r2,zero,aa54 <___vfiprintf_internal_r+0x1428>
    aa40:	00800c04 	movi	r2,48
    aa44:	d88019c5 	stb	r2,103(sp)
    aa48:	dcc02717 	ldw	r19,156(sp)
    aa4c:	dd4019c4 	addi	r21,sp,103
    aa50:	003bf606 	br	9a2c <__alt_data_end+0xff009a2c>
    aa54:	0027883a 	mov	r19,zero
    aa58:	dd401a04 	addi	r21,sp,104
    aa5c:	003bf306 	br	9a2c <__alt_data_end+0xff009a2c>
    aa60:	d9c01d85 	stb	r7,118(sp)
    aa64:	003dc806 	br	a188 <__alt_data_end+0xff00a188>
    aa68:	d9c01d85 	stb	r7,118(sp)
    aa6c:	003d3a06 	br	9f58 <__alt_data_end+0xff009f58>
    aa70:	d9c01d85 	stb	r7,118(sp)
    aa74:	003d2a06 	br	9f20 <__alt_data_end+0xff009f20>
    aa78:	d9c01d85 	stb	r7,118(sp)
    aa7c:	003cde06 	br	9df8 <__alt_data_end+0xff009df8>
    aa80:	d9c01d85 	stb	r7,118(sp)
    aa84:	003cbc06 	br	9d78 <__alt_data_end+0xff009d78>

0000aa88 <__vfiprintf_internal>:
    aa88:	00800074 	movhi	r2,1
    aa8c:	10896104 	addi	r2,r2,9604
    aa90:	300f883a 	mov	r7,r6
    aa94:	280d883a 	mov	r6,r5
    aa98:	200b883a 	mov	r5,r4
    aa9c:	11000017 	ldw	r4,0(r2)
    aaa0:	000962c1 	jmpi	962c <___vfiprintf_internal_r>

0000aaa4 <__sbprintf>:
    aaa4:	2880030b 	ldhu	r2,12(r5)
    aaa8:	2ac01917 	ldw	r11,100(r5)
    aaac:	2a80038b 	ldhu	r10,14(r5)
    aab0:	2a400717 	ldw	r9,28(r5)
    aab4:	2a000917 	ldw	r8,36(r5)
    aab8:	defee204 	addi	sp,sp,-1144
    aabc:	00c10004 	movi	r3,1024
    aac0:	dc011a15 	stw	r16,1128(sp)
    aac4:	10bfff4c 	andi	r2,r2,65533
    aac8:	2821883a 	mov	r16,r5
    aacc:	d8cb883a 	add	r5,sp,r3
    aad0:	dc811c15 	stw	r18,1136(sp)
    aad4:	dc411b15 	stw	r17,1132(sp)
    aad8:	dfc11d15 	stw	ra,1140(sp)
    aadc:	2025883a 	mov	r18,r4
    aae0:	d881030d 	sth	r2,1036(sp)
    aae4:	dac11915 	stw	r11,1124(sp)
    aae8:	da81038d 	sth	r10,1038(sp)
    aaec:	da410715 	stw	r9,1052(sp)
    aaf0:	da010915 	stw	r8,1060(sp)
    aaf4:	dec10015 	stw	sp,1024(sp)
    aaf8:	dec10415 	stw	sp,1040(sp)
    aafc:	d8c10215 	stw	r3,1032(sp)
    ab00:	d8c10515 	stw	r3,1044(sp)
    ab04:	d8010615 	stw	zero,1048(sp)
    ab08:	000962c0 	call	962c <___vfiprintf_internal_r>
    ab0c:	1023883a 	mov	r17,r2
    ab10:	10000416 	blt	r2,zero,ab24 <__sbprintf+0x80>
    ab14:	d9410004 	addi	r5,sp,1024
    ab18:	9009883a 	mov	r4,r18
    ab1c:	00067400 	call	6740 <_fflush_r>
    ab20:	10000d1e 	bne	r2,zero,ab58 <__sbprintf+0xb4>
    ab24:	d881030b 	ldhu	r2,1036(sp)
    ab28:	1080100c 	andi	r2,r2,64
    ab2c:	10000326 	beq	r2,zero,ab3c <__sbprintf+0x98>
    ab30:	8080030b 	ldhu	r2,12(r16)
    ab34:	10801014 	ori	r2,r2,64
    ab38:	8080030d 	sth	r2,12(r16)
    ab3c:	8805883a 	mov	r2,r17
    ab40:	dfc11d17 	ldw	ra,1140(sp)
    ab44:	dc811c17 	ldw	r18,1136(sp)
    ab48:	dc411b17 	ldw	r17,1132(sp)
    ab4c:	dc011a17 	ldw	r16,1128(sp)
    ab50:	dec11e04 	addi	sp,sp,1144
    ab54:	f800283a 	ret
    ab58:	047fffc4 	movi	r17,-1
    ab5c:	003ff106 	br	ab24 <__alt_data_end+0xff00ab24>

0000ab60 <_write_r>:
    ab60:	defffd04 	addi	sp,sp,-12
    ab64:	2805883a 	mov	r2,r5
    ab68:	dc000015 	stw	r16,0(sp)
    ab6c:	04000074 	movhi	r16,1
    ab70:	dc400115 	stw	r17,4(sp)
    ab74:	300b883a 	mov	r5,r6
    ab78:	84103804 	addi	r16,r16,16608
    ab7c:	2023883a 	mov	r17,r4
    ab80:	380d883a 	mov	r6,r7
    ab84:	1009883a 	mov	r4,r2
    ab88:	dfc00215 	stw	ra,8(sp)
    ab8c:	80000015 	stw	zero,0(r16)
    ab90:	000ec780 	call	ec78 <write>
    ab94:	00ffffc4 	movi	r3,-1
    ab98:	10c00526 	beq	r2,r3,abb0 <_write_r+0x50>
    ab9c:	dfc00217 	ldw	ra,8(sp)
    aba0:	dc400117 	ldw	r17,4(sp)
    aba4:	dc000017 	ldw	r16,0(sp)
    aba8:	dec00304 	addi	sp,sp,12
    abac:	f800283a 	ret
    abb0:	80c00017 	ldw	r3,0(r16)
    abb4:	183ff926 	beq	r3,zero,ab9c <__alt_data_end+0xff00ab9c>
    abb8:	88c00015 	stw	r3,0(r17)
    abbc:	003ff706 	br	ab9c <__alt_data_end+0xff00ab9c>

0000abc0 <_close_r>:
    abc0:	defffd04 	addi	sp,sp,-12
    abc4:	dc000015 	stw	r16,0(sp)
    abc8:	04000074 	movhi	r16,1
    abcc:	dc400115 	stw	r17,4(sp)
    abd0:	84103804 	addi	r16,r16,16608
    abd4:	2023883a 	mov	r17,r4
    abd8:	2809883a 	mov	r4,r5
    abdc:	dfc00215 	stw	ra,8(sp)
    abe0:	80000015 	stw	zero,0(r16)
    abe4:	000e7600 	call	e760 <close>
    abe8:	00ffffc4 	movi	r3,-1
    abec:	10c00526 	beq	r2,r3,ac04 <_close_r+0x44>
    abf0:	dfc00217 	ldw	ra,8(sp)
    abf4:	dc400117 	ldw	r17,4(sp)
    abf8:	dc000017 	ldw	r16,0(sp)
    abfc:	dec00304 	addi	sp,sp,12
    ac00:	f800283a 	ret
    ac04:	80c00017 	ldw	r3,0(r16)
    ac08:	183ff926 	beq	r3,zero,abf0 <__alt_data_end+0xff00abf0>
    ac0c:	88c00015 	stw	r3,0(r17)
    ac10:	003ff706 	br	abf0 <__alt_data_end+0xff00abf0>

0000ac14 <_calloc_r>:
    ac14:	298b383a 	mul	r5,r5,r6
    ac18:	defffe04 	addi	sp,sp,-8
    ac1c:	dfc00115 	stw	ra,4(sp)
    ac20:	dc000015 	stw	r16,0(sp)
    ac24:	0001e400 	call	1e40 <_malloc_r>
    ac28:	10002926 	beq	r2,zero,acd0 <_calloc_r+0xbc>
    ac2c:	11bfff17 	ldw	r6,-4(r2)
    ac30:	1021883a 	mov	r16,r2
    ac34:	00bfff04 	movi	r2,-4
    ac38:	308c703a 	and	r6,r6,r2
    ac3c:	00c00904 	movi	r3,36
    ac40:	308d883a 	add	r6,r6,r2
    ac44:	19801636 	bltu	r3,r6,aca0 <_calloc_r+0x8c>
    ac48:	008004c4 	movi	r2,19
    ac4c:	11800b2e 	bgeu	r2,r6,ac7c <_calloc_r+0x68>
    ac50:	80000015 	stw	zero,0(r16)
    ac54:	80000115 	stw	zero,4(r16)
    ac58:	008006c4 	movi	r2,27
    ac5c:	11801a2e 	bgeu	r2,r6,acc8 <_calloc_r+0xb4>
    ac60:	80000215 	stw	zero,8(r16)
    ac64:	80000315 	stw	zero,12(r16)
    ac68:	30c0151e 	bne	r6,r3,acc0 <_calloc_r+0xac>
    ac6c:	80000415 	stw	zero,16(r16)
    ac70:	80800604 	addi	r2,r16,24
    ac74:	80000515 	stw	zero,20(r16)
    ac78:	00000106 	br	ac80 <_calloc_r+0x6c>
    ac7c:	8005883a 	mov	r2,r16
    ac80:	10000015 	stw	zero,0(r2)
    ac84:	10000115 	stw	zero,4(r2)
    ac88:	10000215 	stw	zero,8(r2)
    ac8c:	8005883a 	mov	r2,r16
    ac90:	dfc00117 	ldw	ra,4(sp)
    ac94:	dc000017 	ldw	r16,0(sp)
    ac98:	dec00204 	addi	sp,sp,8
    ac9c:	f800283a 	ret
    aca0:	000b883a 	mov	r5,zero
    aca4:	8009883a 	mov	r4,r16
    aca8:	0007c040 	call	7c04 <memset>
    acac:	8005883a 	mov	r2,r16
    acb0:	dfc00117 	ldw	ra,4(sp)
    acb4:	dc000017 	ldw	r16,0(sp)
    acb8:	dec00204 	addi	sp,sp,8
    acbc:	f800283a 	ret
    acc0:	80800404 	addi	r2,r16,16
    acc4:	003fee06 	br	ac80 <__alt_data_end+0xff00ac80>
    acc8:	80800204 	addi	r2,r16,8
    accc:	003fec06 	br	ac80 <__alt_data_end+0xff00ac80>
    acd0:	0005883a 	mov	r2,zero
    acd4:	003fee06 	br	ac90 <__alt_data_end+0xff00ac90>

0000acd8 <_fclose_r>:
    acd8:	28003926 	beq	r5,zero,adc0 <_fclose_r+0xe8>
    acdc:	defffc04 	addi	sp,sp,-16
    ace0:	dc400115 	stw	r17,4(sp)
    ace4:	dc000015 	stw	r16,0(sp)
    ace8:	dfc00315 	stw	ra,12(sp)
    acec:	dc800215 	stw	r18,8(sp)
    acf0:	2023883a 	mov	r17,r4
    acf4:	2821883a 	mov	r16,r5
    acf8:	20000226 	beq	r4,zero,ad04 <_fclose_r+0x2c>
    acfc:	20800e17 	ldw	r2,56(r4)
    ad00:	10002726 	beq	r2,zero,ada0 <_fclose_r+0xc8>
    ad04:	8080030f 	ldh	r2,12(r16)
    ad08:	1000071e 	bne	r2,zero,ad28 <_fclose_r+0x50>
    ad0c:	0005883a 	mov	r2,zero
    ad10:	dfc00317 	ldw	ra,12(sp)
    ad14:	dc800217 	ldw	r18,8(sp)
    ad18:	dc400117 	ldw	r17,4(sp)
    ad1c:	dc000017 	ldw	r16,0(sp)
    ad20:	dec00404 	addi	sp,sp,16
    ad24:	f800283a 	ret
    ad28:	800b883a 	mov	r5,r16
    ad2c:	8809883a 	mov	r4,r17
    ad30:	00065240 	call	6524 <__sflush_r>
    ad34:	1025883a 	mov	r18,r2
    ad38:	80800b17 	ldw	r2,44(r16)
    ad3c:	10000426 	beq	r2,zero,ad50 <_fclose_r+0x78>
    ad40:	81400717 	ldw	r5,28(r16)
    ad44:	8809883a 	mov	r4,r17
    ad48:	103ee83a 	callr	r2
    ad4c:	10001616 	blt	r2,zero,ada8 <_fclose_r+0xd0>
    ad50:	8080030b 	ldhu	r2,12(r16)
    ad54:	1080200c 	andi	r2,r2,128
    ad58:	1000151e 	bne	r2,zero,adb0 <_fclose_r+0xd8>
    ad5c:	81400c17 	ldw	r5,48(r16)
    ad60:	28000526 	beq	r5,zero,ad78 <_fclose_r+0xa0>
    ad64:	80801004 	addi	r2,r16,64
    ad68:	28800226 	beq	r5,r2,ad74 <_fclose_r+0x9c>
    ad6c:	8809883a 	mov	r4,r17
    ad70:	0006c900 	call	6c90 <_free_r>
    ad74:	80000c15 	stw	zero,48(r16)
    ad78:	81401117 	ldw	r5,68(r16)
    ad7c:	28000326 	beq	r5,zero,ad8c <_fclose_r+0xb4>
    ad80:	8809883a 	mov	r4,r17
    ad84:	0006c900 	call	6c90 <_free_r>
    ad88:	80001115 	stw	zero,68(r16)
    ad8c:	0006b2c0 	call	6b2c <__sfp_lock_acquire>
    ad90:	8000030d 	sth	zero,12(r16)
    ad94:	0006b300 	call	6b30 <__sfp_lock_release>
    ad98:	9005883a 	mov	r2,r18
    ad9c:	003fdc06 	br	ad10 <__alt_data_end+0xff00ad10>
    ada0:	0006b1c0 	call	6b1c <__sinit>
    ada4:	003fd706 	br	ad04 <__alt_data_end+0xff00ad04>
    ada8:	04bfffc4 	movi	r18,-1
    adac:	003fe806 	br	ad50 <__alt_data_end+0xff00ad50>
    adb0:	81400417 	ldw	r5,16(r16)
    adb4:	8809883a 	mov	r4,r17
    adb8:	0006c900 	call	6c90 <_free_r>
    adbc:	003fe706 	br	ad5c <__alt_data_end+0xff00ad5c>
    adc0:	0005883a 	mov	r2,zero
    adc4:	f800283a 	ret

0000adc8 <fclose>:
    adc8:	00800074 	movhi	r2,1
    adcc:	10896104 	addi	r2,r2,9604
    add0:	200b883a 	mov	r5,r4
    add4:	11000017 	ldw	r4,0(r2)
    add8:	000acd81 	jmpi	acd8 <_fclose_r>

0000addc <__fputwc>:
    addc:	defff804 	addi	sp,sp,-32
    ade0:	dcc00415 	stw	r19,16(sp)
    ade4:	dc800315 	stw	r18,12(sp)
    ade8:	dc000115 	stw	r16,4(sp)
    adec:	dfc00715 	stw	ra,28(sp)
    adf0:	dd400615 	stw	r21,24(sp)
    adf4:	dd000515 	stw	r20,20(sp)
    adf8:	dc400215 	stw	r17,8(sp)
    adfc:	2027883a 	mov	r19,r4
    ae00:	2825883a 	mov	r18,r5
    ae04:	3021883a 	mov	r16,r6
    ae08:	000766c0 	call	766c <__locale_mb_cur_max>
    ae0c:	00c00044 	movi	r3,1
    ae10:	10c03e26 	beq	r2,r3,af0c <__fputwc+0x130>
    ae14:	81c01704 	addi	r7,r16,92
    ae18:	900d883a 	mov	r6,r18
    ae1c:	d80b883a 	mov	r5,sp
    ae20:	9809883a 	mov	r4,r19
    ae24:	000b2ac0 	call	b2ac <_wcrtomb_r>
    ae28:	1029883a 	mov	r20,r2
    ae2c:	00bfffc4 	movi	r2,-1
    ae30:	a0802026 	beq	r20,r2,aeb4 <__fputwc+0xd8>
    ae34:	d9400003 	ldbu	r5,0(sp)
    ae38:	a0001c26 	beq	r20,zero,aeac <__fputwc+0xd0>
    ae3c:	0023883a 	mov	r17,zero
    ae40:	05400284 	movi	r21,10
    ae44:	00000906 	br	ae6c <__fputwc+0x90>
    ae48:	80800017 	ldw	r2,0(r16)
    ae4c:	11400005 	stb	r5,0(r2)
    ae50:	80c00017 	ldw	r3,0(r16)
    ae54:	18c00044 	addi	r3,r3,1
    ae58:	80c00015 	stw	r3,0(r16)
    ae5c:	8c400044 	addi	r17,r17,1
    ae60:	dc45883a 	add	r2,sp,r17
    ae64:	8d00112e 	bgeu	r17,r20,aeac <__fputwc+0xd0>
    ae68:	11400003 	ldbu	r5,0(r2)
    ae6c:	80c00217 	ldw	r3,8(r16)
    ae70:	18ffffc4 	addi	r3,r3,-1
    ae74:	80c00215 	stw	r3,8(r16)
    ae78:	183ff30e 	bge	r3,zero,ae48 <__alt_data_end+0xff00ae48>
    ae7c:	80800617 	ldw	r2,24(r16)
    ae80:	18801916 	blt	r3,r2,aee8 <__fputwc+0x10c>
    ae84:	80800017 	ldw	r2,0(r16)
    ae88:	11400005 	stb	r5,0(r2)
    ae8c:	80800017 	ldw	r2,0(r16)
    ae90:	10c00003 	ldbu	r3,0(r2)
    ae94:	10800044 	addi	r2,r2,1
    ae98:	1d402326 	beq	r3,r21,af28 <__fputwc+0x14c>
    ae9c:	80800015 	stw	r2,0(r16)
    aea0:	8c400044 	addi	r17,r17,1
    aea4:	dc45883a 	add	r2,sp,r17
    aea8:	8d3fef36 	bltu	r17,r20,ae68 <__alt_data_end+0xff00ae68>
    aeac:	9005883a 	mov	r2,r18
    aeb0:	00000406 	br	aec4 <__fputwc+0xe8>
    aeb4:	80c0030b 	ldhu	r3,12(r16)
    aeb8:	a005883a 	mov	r2,r20
    aebc:	18c01014 	ori	r3,r3,64
    aec0:	80c0030d 	sth	r3,12(r16)
    aec4:	dfc00717 	ldw	ra,28(sp)
    aec8:	dd400617 	ldw	r21,24(sp)
    aecc:	dd000517 	ldw	r20,20(sp)
    aed0:	dcc00417 	ldw	r19,16(sp)
    aed4:	dc800317 	ldw	r18,12(sp)
    aed8:	dc400217 	ldw	r17,8(sp)
    aedc:	dc000117 	ldw	r16,4(sp)
    aee0:	dec00804 	addi	sp,sp,32
    aee4:	f800283a 	ret
    aee8:	800d883a 	mov	r6,r16
    aeec:	29403fcc 	andi	r5,r5,255
    aef0:	9809883a 	mov	r4,r19
    aef4:	000b1540 	call	b154 <__swbuf_r>
    aef8:	10bfffe0 	cmpeqi	r2,r2,-1
    aefc:	10803fcc 	andi	r2,r2,255
    af00:	103fd626 	beq	r2,zero,ae5c <__alt_data_end+0xff00ae5c>
    af04:	00bfffc4 	movi	r2,-1
    af08:	003fee06 	br	aec4 <__alt_data_end+0xff00aec4>
    af0c:	90ffffc4 	addi	r3,r18,-1
    af10:	01003f84 	movi	r4,254
    af14:	20ffbf36 	bltu	r4,r3,ae14 <__alt_data_end+0xff00ae14>
    af18:	900b883a 	mov	r5,r18
    af1c:	dc800005 	stb	r18,0(sp)
    af20:	1029883a 	mov	r20,r2
    af24:	003fc506 	br	ae3c <__alt_data_end+0xff00ae3c>
    af28:	800d883a 	mov	r6,r16
    af2c:	a80b883a 	mov	r5,r21
    af30:	9809883a 	mov	r4,r19
    af34:	000b1540 	call	b154 <__swbuf_r>
    af38:	10bfffe0 	cmpeqi	r2,r2,-1
    af3c:	003fef06 	br	aefc <__alt_data_end+0xff00aefc>

0000af40 <_fputwc_r>:
    af40:	3080030b 	ldhu	r2,12(r6)
    af44:	10c8000c 	andi	r3,r2,8192
    af48:	1800051e 	bne	r3,zero,af60 <_fputwc_r+0x20>
    af4c:	30c01917 	ldw	r3,100(r6)
    af50:	10880014 	ori	r2,r2,8192
    af54:	3080030d 	sth	r2,12(r6)
    af58:	18880014 	ori	r2,r3,8192
    af5c:	30801915 	stw	r2,100(r6)
    af60:	000addc1 	jmpi	addc <__fputwc>

0000af64 <fputwc>:
    af64:	00800074 	movhi	r2,1
    af68:	defffc04 	addi	sp,sp,-16
    af6c:	10896104 	addi	r2,r2,9604
    af70:	dc000115 	stw	r16,4(sp)
    af74:	14000017 	ldw	r16,0(r2)
    af78:	dc400215 	stw	r17,8(sp)
    af7c:	dfc00315 	stw	ra,12(sp)
    af80:	2023883a 	mov	r17,r4
    af84:	80000226 	beq	r16,zero,af90 <fputwc+0x2c>
    af88:	80800e17 	ldw	r2,56(r16)
    af8c:	10001026 	beq	r2,zero,afd0 <fputwc+0x6c>
    af90:	2880030b 	ldhu	r2,12(r5)
    af94:	10c8000c 	andi	r3,r2,8192
    af98:	1800051e 	bne	r3,zero,afb0 <fputwc+0x4c>
    af9c:	28c01917 	ldw	r3,100(r5)
    afa0:	10880014 	ori	r2,r2,8192
    afa4:	2880030d 	sth	r2,12(r5)
    afa8:	18880014 	ori	r2,r3,8192
    afac:	28801915 	stw	r2,100(r5)
    afb0:	280d883a 	mov	r6,r5
    afb4:	8009883a 	mov	r4,r16
    afb8:	880b883a 	mov	r5,r17
    afbc:	dfc00317 	ldw	ra,12(sp)
    afc0:	dc400217 	ldw	r17,8(sp)
    afc4:	dc000117 	ldw	r16,4(sp)
    afc8:	dec00404 	addi	sp,sp,16
    afcc:	000addc1 	jmpi	addc <__fputwc>
    afd0:	8009883a 	mov	r4,r16
    afd4:	d9400015 	stw	r5,0(sp)
    afd8:	0006b1c0 	call	6b1c <__sinit>
    afdc:	d9400017 	ldw	r5,0(sp)
    afe0:	003feb06 	br	af90 <__alt_data_end+0xff00af90>

0000afe4 <_fstat_r>:
    afe4:	defffd04 	addi	sp,sp,-12
    afe8:	2805883a 	mov	r2,r5
    afec:	dc000015 	stw	r16,0(sp)
    aff0:	04000074 	movhi	r16,1
    aff4:	dc400115 	stw	r17,4(sp)
    aff8:	84103804 	addi	r16,r16,16608
    affc:	2023883a 	mov	r17,r4
    b000:	300b883a 	mov	r5,r6
    b004:	1009883a 	mov	r4,r2
    b008:	dfc00215 	stw	ra,8(sp)
    b00c:	80000015 	stw	zero,0(r16)
    b010:	000e8240 	call	e824 <fstat>
    b014:	00ffffc4 	movi	r3,-1
    b018:	10c00526 	beq	r2,r3,b030 <_fstat_r+0x4c>
    b01c:	dfc00217 	ldw	ra,8(sp)
    b020:	dc400117 	ldw	r17,4(sp)
    b024:	dc000017 	ldw	r16,0(sp)
    b028:	dec00304 	addi	sp,sp,12
    b02c:	f800283a 	ret
    b030:	80c00017 	ldw	r3,0(r16)
    b034:	183ff926 	beq	r3,zero,b01c <__alt_data_end+0xff00b01c>
    b038:	88c00015 	stw	r3,0(r17)
    b03c:	003ff706 	br	b01c <__alt_data_end+0xff00b01c>

0000b040 <_isatty_r>:
    b040:	defffd04 	addi	sp,sp,-12
    b044:	dc000015 	stw	r16,0(sp)
    b048:	04000074 	movhi	r16,1
    b04c:	dc400115 	stw	r17,4(sp)
    b050:	84103804 	addi	r16,r16,16608
    b054:	2023883a 	mov	r17,r4
    b058:	2809883a 	mov	r4,r5
    b05c:	dfc00215 	stw	ra,8(sp)
    b060:	80000015 	stw	zero,0(r16)
    b064:	000e89c0 	call	e89c <isatty>
    b068:	00ffffc4 	movi	r3,-1
    b06c:	10c00526 	beq	r2,r3,b084 <_isatty_r+0x44>
    b070:	dfc00217 	ldw	ra,8(sp)
    b074:	dc400117 	ldw	r17,4(sp)
    b078:	dc000017 	ldw	r16,0(sp)
    b07c:	dec00304 	addi	sp,sp,12
    b080:	f800283a 	ret
    b084:	80c00017 	ldw	r3,0(r16)
    b088:	183ff926 	beq	r3,zero,b070 <__alt_data_end+0xff00b070>
    b08c:	88c00015 	stw	r3,0(r17)
    b090:	003ff706 	br	b070 <__alt_data_end+0xff00b070>

0000b094 <_lseek_r>:
    b094:	defffd04 	addi	sp,sp,-12
    b098:	2805883a 	mov	r2,r5
    b09c:	dc000015 	stw	r16,0(sp)
    b0a0:	04000074 	movhi	r16,1
    b0a4:	dc400115 	stw	r17,4(sp)
    b0a8:	300b883a 	mov	r5,r6
    b0ac:	84103804 	addi	r16,r16,16608
    b0b0:	2023883a 	mov	r17,r4
    b0b4:	380d883a 	mov	r6,r7
    b0b8:	1009883a 	mov	r4,r2
    b0bc:	dfc00215 	stw	ra,8(sp)
    b0c0:	80000015 	stw	zero,0(r16)
    b0c4:	000e9ec0 	call	e9ec <lseek>
    b0c8:	00ffffc4 	movi	r3,-1
    b0cc:	10c00526 	beq	r2,r3,b0e4 <_lseek_r+0x50>
    b0d0:	dfc00217 	ldw	ra,8(sp)
    b0d4:	dc400117 	ldw	r17,4(sp)
    b0d8:	dc000017 	ldw	r16,0(sp)
    b0dc:	dec00304 	addi	sp,sp,12
    b0e0:	f800283a 	ret
    b0e4:	80c00017 	ldw	r3,0(r16)
    b0e8:	183ff926 	beq	r3,zero,b0d0 <__alt_data_end+0xff00b0d0>
    b0ec:	88c00015 	stw	r3,0(r17)
    b0f0:	003ff706 	br	b0d0 <__alt_data_end+0xff00b0d0>

0000b0f4 <_read_r>:
    b0f4:	defffd04 	addi	sp,sp,-12
    b0f8:	2805883a 	mov	r2,r5
    b0fc:	dc000015 	stw	r16,0(sp)
    b100:	04000074 	movhi	r16,1
    b104:	dc400115 	stw	r17,4(sp)
    b108:	300b883a 	mov	r5,r6
    b10c:	84103804 	addi	r16,r16,16608
    b110:	2023883a 	mov	r17,r4
    b114:	380d883a 	mov	r6,r7
    b118:	1009883a 	mov	r4,r2
    b11c:	dfc00215 	stw	ra,8(sp)
    b120:	80000015 	stw	zero,0(r16)
    b124:	000ead00 	call	ead0 <read>
    b128:	00ffffc4 	movi	r3,-1
    b12c:	10c00526 	beq	r2,r3,b144 <_read_r+0x50>
    b130:	dfc00217 	ldw	ra,8(sp)
    b134:	dc400117 	ldw	r17,4(sp)
    b138:	dc000017 	ldw	r16,0(sp)
    b13c:	dec00304 	addi	sp,sp,12
    b140:	f800283a 	ret
    b144:	80c00017 	ldw	r3,0(r16)
    b148:	183ff926 	beq	r3,zero,b130 <__alt_data_end+0xff00b130>
    b14c:	88c00015 	stw	r3,0(r17)
    b150:	003ff706 	br	b130 <__alt_data_end+0xff00b130>

0000b154 <__swbuf_r>:
    b154:	defffb04 	addi	sp,sp,-20
    b158:	dcc00315 	stw	r19,12(sp)
    b15c:	dc800215 	stw	r18,8(sp)
    b160:	dc000015 	stw	r16,0(sp)
    b164:	dfc00415 	stw	ra,16(sp)
    b168:	dc400115 	stw	r17,4(sp)
    b16c:	2025883a 	mov	r18,r4
    b170:	2827883a 	mov	r19,r5
    b174:	3021883a 	mov	r16,r6
    b178:	20000226 	beq	r4,zero,b184 <__swbuf_r+0x30>
    b17c:	20800e17 	ldw	r2,56(r4)
    b180:	10004226 	beq	r2,zero,b28c <__swbuf_r+0x138>
    b184:	80800617 	ldw	r2,24(r16)
    b188:	8100030b 	ldhu	r4,12(r16)
    b18c:	80800215 	stw	r2,8(r16)
    b190:	2080020c 	andi	r2,r4,8
    b194:	10003626 	beq	r2,zero,b270 <__swbuf_r+0x11c>
    b198:	80c00417 	ldw	r3,16(r16)
    b19c:	18003426 	beq	r3,zero,b270 <__swbuf_r+0x11c>
    b1a0:	2088000c 	andi	r2,r4,8192
    b1a4:	9c403fcc 	andi	r17,r19,255
    b1a8:	10001a26 	beq	r2,zero,b214 <__swbuf_r+0xc0>
    b1ac:	80800017 	ldw	r2,0(r16)
    b1b0:	81000517 	ldw	r4,20(r16)
    b1b4:	10c7c83a 	sub	r3,r2,r3
    b1b8:	1900200e 	bge	r3,r4,b23c <__swbuf_r+0xe8>
    b1bc:	18c00044 	addi	r3,r3,1
    b1c0:	81000217 	ldw	r4,8(r16)
    b1c4:	11400044 	addi	r5,r2,1
    b1c8:	81400015 	stw	r5,0(r16)
    b1cc:	213fffc4 	addi	r4,r4,-1
    b1d0:	81000215 	stw	r4,8(r16)
    b1d4:	14c00005 	stb	r19,0(r2)
    b1d8:	80800517 	ldw	r2,20(r16)
    b1dc:	10c01e26 	beq	r2,r3,b258 <__swbuf_r+0x104>
    b1e0:	8080030b 	ldhu	r2,12(r16)
    b1e4:	1080004c 	andi	r2,r2,1
    b1e8:	10000226 	beq	r2,zero,b1f4 <__swbuf_r+0xa0>
    b1ec:	00800284 	movi	r2,10
    b1f0:	88801926 	beq	r17,r2,b258 <__swbuf_r+0x104>
    b1f4:	8805883a 	mov	r2,r17
    b1f8:	dfc00417 	ldw	ra,16(sp)
    b1fc:	dcc00317 	ldw	r19,12(sp)
    b200:	dc800217 	ldw	r18,8(sp)
    b204:	dc400117 	ldw	r17,4(sp)
    b208:	dc000017 	ldw	r16,0(sp)
    b20c:	dec00504 	addi	sp,sp,20
    b210:	f800283a 	ret
    b214:	81401917 	ldw	r5,100(r16)
    b218:	00b7ffc4 	movi	r2,-8193
    b21c:	21080014 	ori	r4,r4,8192
    b220:	2884703a 	and	r2,r5,r2
    b224:	80801915 	stw	r2,100(r16)
    b228:	80800017 	ldw	r2,0(r16)
    b22c:	8100030d 	sth	r4,12(r16)
    b230:	81000517 	ldw	r4,20(r16)
    b234:	10c7c83a 	sub	r3,r2,r3
    b238:	193fe016 	blt	r3,r4,b1bc <__alt_data_end+0xff00b1bc>
    b23c:	800b883a 	mov	r5,r16
    b240:	9009883a 	mov	r4,r18
    b244:	00067400 	call	6740 <_fflush_r>
    b248:	1000071e 	bne	r2,zero,b268 <__swbuf_r+0x114>
    b24c:	80800017 	ldw	r2,0(r16)
    b250:	00c00044 	movi	r3,1
    b254:	003fda06 	br	b1c0 <__alt_data_end+0xff00b1c0>
    b258:	800b883a 	mov	r5,r16
    b25c:	9009883a 	mov	r4,r18
    b260:	00067400 	call	6740 <_fflush_r>
    b264:	103fe326 	beq	r2,zero,b1f4 <__alt_data_end+0xff00b1f4>
    b268:	00bfffc4 	movi	r2,-1
    b26c:	003fe206 	br	b1f8 <__alt_data_end+0xff00b1f8>
    b270:	800b883a 	mov	r5,r16
    b274:	9009883a 	mov	r4,r18
    b278:	0004b480 	call	4b48 <__swsetup_r>
    b27c:	103ffa1e 	bne	r2,zero,b268 <__alt_data_end+0xff00b268>
    b280:	8100030b 	ldhu	r4,12(r16)
    b284:	80c00417 	ldw	r3,16(r16)
    b288:	003fc506 	br	b1a0 <__alt_data_end+0xff00b1a0>
    b28c:	0006b1c0 	call	6b1c <__sinit>
    b290:	003fbc06 	br	b184 <__alt_data_end+0xff00b184>

0000b294 <__swbuf>:
    b294:	00800074 	movhi	r2,1
    b298:	10896104 	addi	r2,r2,9604
    b29c:	280d883a 	mov	r6,r5
    b2a0:	200b883a 	mov	r5,r4
    b2a4:	11000017 	ldw	r4,0(r2)
    b2a8:	000b1541 	jmpi	b154 <__swbuf_r>

0000b2ac <_wcrtomb_r>:
    b2ac:	defff604 	addi	sp,sp,-40
    b2b0:	00800074 	movhi	r2,1
    b2b4:	dc800815 	stw	r18,32(sp)
    b2b8:	dc400715 	stw	r17,28(sp)
    b2bc:	dc000615 	stw	r16,24(sp)
    b2c0:	10896304 	addi	r2,r2,9612
    b2c4:	dfc00915 	stw	ra,36(sp)
    b2c8:	2021883a 	mov	r16,r4
    b2cc:	3823883a 	mov	r17,r7
    b2d0:	14800017 	ldw	r18,0(r2)
    b2d4:	28001426 	beq	r5,zero,b328 <_wcrtomb_r+0x7c>
    b2d8:	d9400415 	stw	r5,16(sp)
    b2dc:	d9800515 	stw	r6,20(sp)
    b2e0:	00076600 	call	7660 <__locale_charset>
    b2e4:	d9800517 	ldw	r6,20(sp)
    b2e8:	d9400417 	ldw	r5,16(sp)
    b2ec:	100f883a 	mov	r7,r2
    b2f0:	dc400015 	stw	r17,0(sp)
    b2f4:	8009883a 	mov	r4,r16
    b2f8:	903ee83a 	callr	r18
    b2fc:	00ffffc4 	movi	r3,-1
    b300:	10c0031e 	bne	r2,r3,b310 <_wcrtomb_r+0x64>
    b304:	88000015 	stw	zero,0(r17)
    b308:	00c02284 	movi	r3,138
    b30c:	80c00015 	stw	r3,0(r16)
    b310:	dfc00917 	ldw	ra,36(sp)
    b314:	dc800817 	ldw	r18,32(sp)
    b318:	dc400717 	ldw	r17,28(sp)
    b31c:	dc000617 	ldw	r16,24(sp)
    b320:	dec00a04 	addi	sp,sp,40
    b324:	f800283a 	ret
    b328:	00076600 	call	7660 <__locale_charset>
    b32c:	100f883a 	mov	r7,r2
    b330:	dc400015 	stw	r17,0(sp)
    b334:	000d883a 	mov	r6,zero
    b338:	d9400104 	addi	r5,sp,4
    b33c:	8009883a 	mov	r4,r16
    b340:	903ee83a 	callr	r18
    b344:	003fed06 	br	b2fc <__alt_data_end+0xff00b2fc>

0000b348 <wcrtomb>:
    b348:	defff604 	addi	sp,sp,-40
    b34c:	00800074 	movhi	r2,1
    b350:	dc800615 	stw	r18,24(sp)
    b354:	dc400515 	stw	r17,20(sp)
    b358:	10896104 	addi	r2,r2,9604
    b35c:	dfc00915 	stw	ra,36(sp)
    b360:	dd000815 	stw	r20,32(sp)
    b364:	dcc00715 	stw	r19,28(sp)
    b368:	dc000415 	stw	r16,16(sp)
    b36c:	3025883a 	mov	r18,r6
    b370:	14400017 	ldw	r17,0(r2)
    b374:	20001926 	beq	r4,zero,b3dc <wcrtomb+0x94>
    b378:	00800074 	movhi	r2,1
    b37c:	10896304 	addi	r2,r2,9612
    b380:	15000017 	ldw	r20,0(r2)
    b384:	2021883a 	mov	r16,r4
    b388:	2827883a 	mov	r19,r5
    b38c:	00076600 	call	7660 <__locale_charset>
    b390:	100f883a 	mov	r7,r2
    b394:	dc800015 	stw	r18,0(sp)
    b398:	980d883a 	mov	r6,r19
    b39c:	800b883a 	mov	r5,r16
    b3a0:	8809883a 	mov	r4,r17
    b3a4:	a03ee83a 	callr	r20
    b3a8:	00ffffc4 	movi	r3,-1
    b3ac:	10c0031e 	bne	r2,r3,b3bc <wcrtomb+0x74>
    b3b0:	90000015 	stw	zero,0(r18)
    b3b4:	00c02284 	movi	r3,138
    b3b8:	88c00015 	stw	r3,0(r17)
    b3bc:	dfc00917 	ldw	ra,36(sp)
    b3c0:	dd000817 	ldw	r20,32(sp)
    b3c4:	dcc00717 	ldw	r19,28(sp)
    b3c8:	dc800617 	ldw	r18,24(sp)
    b3cc:	dc400517 	ldw	r17,20(sp)
    b3d0:	dc000417 	ldw	r16,16(sp)
    b3d4:	dec00a04 	addi	sp,sp,40
    b3d8:	f800283a 	ret
    b3dc:	00800074 	movhi	r2,1
    b3e0:	10896304 	addi	r2,r2,9612
    b3e4:	14000017 	ldw	r16,0(r2)
    b3e8:	00076600 	call	7660 <__locale_charset>
    b3ec:	100f883a 	mov	r7,r2
    b3f0:	dc800015 	stw	r18,0(sp)
    b3f4:	000d883a 	mov	r6,zero
    b3f8:	d9400104 	addi	r5,sp,4
    b3fc:	8809883a 	mov	r4,r17
    b400:	803ee83a 	callr	r16
    b404:	003fe806 	br	b3a8 <__alt_data_end+0xff00b3a8>

0000b408 <__ascii_wctomb>:
    b408:	28000526 	beq	r5,zero,b420 <__ascii_wctomb+0x18>
    b40c:	00803fc4 	movi	r2,255
    b410:	11800536 	bltu	r2,r6,b428 <__ascii_wctomb+0x20>
    b414:	29800005 	stb	r6,0(r5)
    b418:	00800044 	movi	r2,1
    b41c:	f800283a 	ret
    b420:	0005883a 	mov	r2,zero
    b424:	f800283a 	ret
    b428:	00802284 	movi	r2,138
    b42c:	20800015 	stw	r2,0(r4)
    b430:	00bfffc4 	movi	r2,-1
    b434:	f800283a 	ret

0000b438 <_wctomb_r>:
    b438:	00800074 	movhi	r2,1
    b43c:	defff904 	addi	sp,sp,-28
    b440:	10896304 	addi	r2,r2,9612
    b444:	dfc00615 	stw	ra,24(sp)
    b448:	dc400515 	stw	r17,20(sp)
    b44c:	dc000415 	stw	r16,16(sp)
    b450:	3823883a 	mov	r17,r7
    b454:	14000017 	ldw	r16,0(r2)
    b458:	d9000115 	stw	r4,4(sp)
    b45c:	d9400215 	stw	r5,8(sp)
    b460:	d9800315 	stw	r6,12(sp)
    b464:	00076600 	call	7660 <__locale_charset>
    b468:	d9800317 	ldw	r6,12(sp)
    b46c:	d9400217 	ldw	r5,8(sp)
    b470:	d9000117 	ldw	r4,4(sp)
    b474:	100f883a 	mov	r7,r2
    b478:	dc400015 	stw	r17,0(sp)
    b47c:	803ee83a 	callr	r16
    b480:	dfc00617 	ldw	ra,24(sp)
    b484:	dc400517 	ldw	r17,20(sp)
    b488:	dc000417 	ldw	r16,16(sp)
    b48c:	dec00704 	addi	sp,sp,28
    b490:	f800283a 	ret

0000b494 <__udivdi3>:
    b494:	defff504 	addi	sp,sp,-44
    b498:	dcc00415 	stw	r19,16(sp)
    b49c:	dc000115 	stw	r16,4(sp)
    b4a0:	dfc00a15 	stw	ra,40(sp)
    b4a4:	df000915 	stw	fp,36(sp)
    b4a8:	ddc00815 	stw	r23,32(sp)
    b4ac:	dd800715 	stw	r22,28(sp)
    b4b0:	dd400615 	stw	r21,24(sp)
    b4b4:	dd000515 	stw	r20,20(sp)
    b4b8:	dc800315 	stw	r18,12(sp)
    b4bc:	dc400215 	stw	r17,8(sp)
    b4c0:	2027883a 	mov	r19,r4
    b4c4:	2821883a 	mov	r16,r5
    b4c8:	3800411e 	bne	r7,zero,b5d0 <__udivdi3+0x13c>
    b4cc:	3023883a 	mov	r17,r6
    b4d0:	2025883a 	mov	r18,r4
    b4d4:	2980522e 	bgeu	r5,r6,b620 <__udivdi3+0x18c>
    b4d8:	00bfffd4 	movui	r2,65535
    b4dc:	282d883a 	mov	r22,r5
    b4e0:	1180a836 	bltu	r2,r6,b784 <__udivdi3+0x2f0>
    b4e4:	00803fc4 	movi	r2,255
    b4e8:	1185803a 	cmpltu	r2,r2,r6
    b4ec:	100490fa 	slli	r2,r2,3
    b4f0:	3086d83a 	srl	r3,r6,r2
    b4f4:	01000074 	movhi	r4,1
    b4f8:	21026a04 	addi	r4,r4,2472
    b4fc:	20c7883a 	add	r3,r4,r3
    b500:	18c00003 	ldbu	r3,0(r3)
    b504:	1885883a 	add	r2,r3,r2
    b508:	00c00804 	movi	r3,32
    b50c:	1887c83a 	sub	r3,r3,r2
    b510:	18000526 	beq	r3,zero,b528 <__udivdi3+0x94>
    b514:	80e0983a 	sll	r16,r16,r3
    b518:	9884d83a 	srl	r2,r19,r2
    b51c:	30e2983a 	sll	r17,r6,r3
    b520:	98e4983a 	sll	r18,r19,r3
    b524:	142cb03a 	or	r22,r2,r16
    b528:	882ad43a 	srli	r21,r17,16
    b52c:	b009883a 	mov	r4,r22
    b530:	8d3fffcc 	andi	r20,r17,65535
    b534:	a80b883a 	mov	r5,r21
    b538:	000c0a00 	call	c0a0 <__umodsi3>
    b53c:	b009883a 	mov	r4,r22
    b540:	a80b883a 	mov	r5,r21
    b544:	1027883a 	mov	r19,r2
    b548:	000c03c0 	call	c03c <__udivsi3>
    b54c:	102d883a 	mov	r22,r2
    b550:	9826943a 	slli	r19,r19,16
    b554:	9004d43a 	srli	r2,r18,16
    b558:	a5a1383a 	mul	r16,r20,r22
    b55c:	14c4b03a 	or	r2,r2,r19
    b560:	1400052e 	bgeu	r2,r16,b578 <__udivdi3+0xe4>
    b564:	1445883a 	add	r2,r2,r17
    b568:	b0ffffc4 	addi	r3,r22,-1
    b56c:	14400136 	bltu	r2,r17,b574 <__udivdi3+0xe0>
    b570:	14012336 	bltu	r2,r16,ba00 <__udivdi3+0x56c>
    b574:	182d883a 	mov	r22,r3
    b578:	1421c83a 	sub	r16,r2,r16
    b57c:	a80b883a 	mov	r5,r21
    b580:	8009883a 	mov	r4,r16
    b584:	000c0a00 	call	c0a0 <__umodsi3>
    b588:	1027883a 	mov	r19,r2
    b58c:	a80b883a 	mov	r5,r21
    b590:	8009883a 	mov	r4,r16
    b594:	000c03c0 	call	c03c <__udivsi3>
    b598:	9826943a 	slli	r19,r19,16
    b59c:	a0a9383a 	mul	r20,r20,r2
    b5a0:	94bfffcc 	andi	r18,r18,65535
    b5a4:	94e4b03a 	or	r18,r18,r19
    b5a8:	9500052e 	bgeu	r18,r20,b5c0 <__udivdi3+0x12c>
    b5ac:	8ca5883a 	add	r18,r17,r18
    b5b0:	10ffffc4 	addi	r3,r2,-1
    b5b4:	9440f136 	bltu	r18,r17,b97c <__udivdi3+0x4e8>
    b5b8:	9500f02e 	bgeu	r18,r20,b97c <__udivdi3+0x4e8>
    b5bc:	10bfff84 	addi	r2,r2,-2
    b5c0:	b00c943a 	slli	r6,r22,16
    b5c4:	0007883a 	mov	r3,zero
    b5c8:	3084b03a 	or	r2,r6,r2
    b5cc:	00005906 	br	b734 <__udivdi3+0x2a0>
    b5d0:	29c05636 	bltu	r5,r7,b72c <__udivdi3+0x298>
    b5d4:	00bfffd4 	movui	r2,65535
    b5d8:	11c0622e 	bgeu	r2,r7,b764 <__udivdi3+0x2d0>
    b5dc:	00804034 	movhi	r2,256
    b5e0:	10bfffc4 	addi	r2,r2,-1
    b5e4:	11c0ee36 	bltu	r2,r7,b9a0 <__udivdi3+0x50c>
    b5e8:	00800404 	movi	r2,16
    b5ec:	3886d83a 	srl	r3,r7,r2
    b5f0:	01000074 	movhi	r4,1
    b5f4:	21026a04 	addi	r4,r4,2472
    b5f8:	20c7883a 	add	r3,r4,r3
    b5fc:	18c00003 	ldbu	r3,0(r3)
    b600:	05400804 	movi	r21,32
    b604:	1885883a 	add	r2,r3,r2
    b608:	a8abc83a 	sub	r21,r21,r2
    b60c:	a800621e 	bne	r21,zero,b798 <__udivdi3+0x304>
    b610:	3c00e936 	bltu	r7,r16,b9b8 <__udivdi3+0x524>
    b614:	9985403a 	cmpgeu	r2,r19,r6
    b618:	0007883a 	mov	r3,zero
    b61c:	00004506 	br	b734 <__udivdi3+0x2a0>
    b620:	3000041e 	bne	r6,zero,b634 <__udivdi3+0x1a0>
    b624:	000b883a 	mov	r5,zero
    b628:	01000044 	movi	r4,1
    b62c:	000c03c0 	call	c03c <__udivsi3>
    b630:	1023883a 	mov	r17,r2
    b634:	00bfffd4 	movui	r2,65535
    b638:	14404e2e 	bgeu	r2,r17,b774 <__udivdi3+0x2e0>
    b63c:	00804034 	movhi	r2,256
    b640:	10bfffc4 	addi	r2,r2,-1
    b644:	1440d836 	bltu	r2,r17,b9a8 <__udivdi3+0x514>
    b648:	00800404 	movi	r2,16
    b64c:	8886d83a 	srl	r3,r17,r2
    b650:	01000074 	movhi	r4,1
    b654:	21026a04 	addi	r4,r4,2472
    b658:	20c7883a 	add	r3,r4,r3
    b65c:	18c00003 	ldbu	r3,0(r3)
    b660:	1885883a 	add	r2,r3,r2
    b664:	00c00804 	movi	r3,32
    b668:	1887c83a 	sub	r3,r3,r2
    b66c:	18008f1e 	bne	r3,zero,b8ac <__udivdi3+0x418>
    b670:	882ad43a 	srli	r21,r17,16
    b674:	8461c83a 	sub	r16,r16,r17
    b678:	8d3fffcc 	andi	r20,r17,65535
    b67c:	00c00044 	movi	r3,1
    b680:	8009883a 	mov	r4,r16
    b684:	a80b883a 	mov	r5,r21
    b688:	d8c00015 	stw	r3,0(sp)
    b68c:	000c0a00 	call	c0a0 <__umodsi3>
    b690:	8009883a 	mov	r4,r16
    b694:	a80b883a 	mov	r5,r21
    b698:	1027883a 	mov	r19,r2
    b69c:	000c03c0 	call	c03c <__udivsi3>
    b6a0:	9826943a 	slli	r19,r19,16
    b6a4:	9008d43a 	srli	r4,r18,16
    b6a8:	1521383a 	mul	r16,r2,r20
    b6ac:	102d883a 	mov	r22,r2
    b6b0:	24c8b03a 	or	r4,r4,r19
    b6b4:	d8c00017 	ldw	r3,0(sp)
    b6b8:	2400052e 	bgeu	r4,r16,b6d0 <__udivdi3+0x23c>
    b6bc:	2449883a 	add	r4,r4,r17
    b6c0:	b0bfffc4 	addi	r2,r22,-1
    b6c4:	24400136 	bltu	r4,r17,b6cc <__udivdi3+0x238>
    b6c8:	2400ca36 	bltu	r4,r16,b9f4 <__udivdi3+0x560>
    b6cc:	102d883a 	mov	r22,r2
    b6d0:	2421c83a 	sub	r16,r4,r16
    b6d4:	a80b883a 	mov	r5,r21
    b6d8:	8009883a 	mov	r4,r16
    b6dc:	d8c00015 	stw	r3,0(sp)
    b6e0:	000c0a00 	call	c0a0 <__umodsi3>
    b6e4:	1027883a 	mov	r19,r2
    b6e8:	a80b883a 	mov	r5,r21
    b6ec:	8009883a 	mov	r4,r16
    b6f0:	000c03c0 	call	c03c <__udivsi3>
    b6f4:	9826943a 	slli	r19,r19,16
    b6f8:	1529383a 	mul	r20,r2,r20
    b6fc:	94bfffcc 	andi	r18,r18,65535
    b700:	94e4b03a 	or	r18,r18,r19
    b704:	d8c00017 	ldw	r3,0(sp)
    b708:	9500052e 	bgeu	r18,r20,b720 <__udivdi3+0x28c>
    b70c:	8ca5883a 	add	r18,r17,r18
    b710:	113fffc4 	addi	r4,r2,-1
    b714:	94409736 	bltu	r18,r17,b974 <__udivdi3+0x4e0>
    b718:	9500962e 	bgeu	r18,r20,b974 <__udivdi3+0x4e0>
    b71c:	10bfff84 	addi	r2,r2,-2
    b720:	b00c943a 	slli	r6,r22,16
    b724:	3084b03a 	or	r2,r6,r2
    b728:	00000206 	br	b734 <__udivdi3+0x2a0>
    b72c:	0007883a 	mov	r3,zero
    b730:	0005883a 	mov	r2,zero
    b734:	dfc00a17 	ldw	ra,40(sp)
    b738:	df000917 	ldw	fp,36(sp)
    b73c:	ddc00817 	ldw	r23,32(sp)
    b740:	dd800717 	ldw	r22,28(sp)
    b744:	dd400617 	ldw	r21,24(sp)
    b748:	dd000517 	ldw	r20,20(sp)
    b74c:	dcc00417 	ldw	r19,16(sp)
    b750:	dc800317 	ldw	r18,12(sp)
    b754:	dc400217 	ldw	r17,8(sp)
    b758:	dc000117 	ldw	r16,4(sp)
    b75c:	dec00b04 	addi	sp,sp,44
    b760:	f800283a 	ret
    b764:	00803fc4 	movi	r2,255
    b768:	11c5803a 	cmpltu	r2,r2,r7
    b76c:	100490fa 	slli	r2,r2,3
    b770:	003f9e06 	br	b5ec <__alt_data_end+0xff00b5ec>
    b774:	00803fc4 	movi	r2,255
    b778:	1445803a 	cmpltu	r2,r2,r17
    b77c:	100490fa 	slli	r2,r2,3
    b780:	003fb206 	br	b64c <__alt_data_end+0xff00b64c>
    b784:	00804034 	movhi	r2,256
    b788:	10bfffc4 	addi	r2,r2,-1
    b78c:	11808836 	bltu	r2,r6,b9b0 <__udivdi3+0x51c>
    b790:	00800404 	movi	r2,16
    b794:	003f5606 	br	b4f0 <__alt_data_end+0xff00b4f0>
    b798:	30aed83a 	srl	r23,r6,r2
    b79c:	3d4e983a 	sll	r7,r7,r21
    b7a0:	80acd83a 	srl	r22,r16,r2
    b7a4:	9884d83a 	srl	r2,r19,r2
    b7a8:	3deeb03a 	or	r23,r7,r23
    b7ac:	b824d43a 	srli	r18,r23,16
    b7b0:	8560983a 	sll	r16,r16,r21
    b7b4:	b009883a 	mov	r4,r22
    b7b8:	900b883a 	mov	r5,r18
    b7bc:	3568983a 	sll	r20,r6,r21
    b7c0:	1420b03a 	or	r16,r2,r16
    b7c4:	000c0a00 	call	c0a0 <__umodsi3>
    b7c8:	b009883a 	mov	r4,r22
    b7cc:	900b883a 	mov	r5,r18
    b7d0:	1023883a 	mov	r17,r2
    b7d4:	000c03c0 	call	c03c <__udivsi3>
    b7d8:	8808943a 	slli	r4,r17,16
    b7dc:	bf3fffcc 	andi	fp,r23,65535
    b7e0:	8006d43a 	srli	r3,r16,16
    b7e4:	e0a3383a 	mul	r17,fp,r2
    b7e8:	100d883a 	mov	r6,r2
    b7ec:	1906b03a 	or	r3,r3,r4
    b7f0:	1c40042e 	bgeu	r3,r17,b804 <__udivdi3+0x370>
    b7f4:	1dc7883a 	add	r3,r3,r23
    b7f8:	10bfffc4 	addi	r2,r2,-1
    b7fc:	1dc0752e 	bgeu	r3,r23,b9d4 <__udivdi3+0x540>
    b800:	100d883a 	mov	r6,r2
    b804:	1c63c83a 	sub	r17,r3,r17
    b808:	900b883a 	mov	r5,r18
    b80c:	8809883a 	mov	r4,r17
    b810:	d9800015 	stw	r6,0(sp)
    b814:	000c0a00 	call	c0a0 <__umodsi3>
    b818:	102d883a 	mov	r22,r2
    b81c:	8809883a 	mov	r4,r17
    b820:	900b883a 	mov	r5,r18
    b824:	000c03c0 	call	c03c <__udivsi3>
    b828:	b02c943a 	slli	r22,r22,16
    b82c:	e089383a 	mul	r4,fp,r2
    b830:	843fffcc 	andi	r16,r16,65535
    b834:	85a0b03a 	or	r16,r16,r22
    b838:	d9800017 	ldw	r6,0(sp)
    b83c:	8100042e 	bgeu	r16,r4,b850 <__udivdi3+0x3bc>
    b840:	85e1883a 	add	r16,r16,r23
    b844:	10ffffc4 	addi	r3,r2,-1
    b848:	85c05e2e 	bgeu	r16,r23,b9c4 <__udivdi3+0x530>
    b84c:	1805883a 	mov	r2,r3
    b850:	300c943a 	slli	r6,r6,16
    b854:	a17fffcc 	andi	r5,r20,65535
    b858:	a028d43a 	srli	r20,r20,16
    b85c:	3084b03a 	or	r2,r6,r2
    b860:	10ffffcc 	andi	r3,r2,65535
    b864:	100cd43a 	srli	r6,r2,16
    b868:	194f383a 	mul	r7,r3,r5
    b86c:	1d07383a 	mul	r3,r3,r20
    b870:	314b383a 	mul	r5,r6,r5
    b874:	3810d43a 	srli	r8,r7,16
    b878:	8121c83a 	sub	r16,r16,r4
    b87c:	1947883a 	add	r3,r3,r5
    b880:	40c7883a 	add	r3,r8,r3
    b884:	350d383a 	mul	r6,r6,r20
    b888:	1940022e 	bgeu	r3,r5,b894 <__udivdi3+0x400>
    b88c:	01000074 	movhi	r4,1
    b890:	310d883a 	add	r6,r6,r4
    b894:	1828d43a 	srli	r20,r3,16
    b898:	a18d883a 	add	r6,r20,r6
    b89c:	81803e36 	bltu	r16,r6,b998 <__udivdi3+0x504>
    b8a0:	81803826 	beq	r16,r6,b984 <__udivdi3+0x4f0>
    b8a4:	0007883a 	mov	r3,zero
    b8a8:	003fa206 	br	b734 <__alt_data_end+0xff00b734>
    b8ac:	88e2983a 	sll	r17,r17,r3
    b8b0:	80a8d83a 	srl	r20,r16,r2
    b8b4:	80e0983a 	sll	r16,r16,r3
    b8b8:	882ad43a 	srli	r21,r17,16
    b8bc:	9884d83a 	srl	r2,r19,r2
    b8c0:	a009883a 	mov	r4,r20
    b8c4:	a80b883a 	mov	r5,r21
    b8c8:	142eb03a 	or	r23,r2,r16
    b8cc:	98e4983a 	sll	r18,r19,r3
    b8d0:	000c0a00 	call	c0a0 <__umodsi3>
    b8d4:	a009883a 	mov	r4,r20
    b8d8:	a80b883a 	mov	r5,r21
    b8dc:	1021883a 	mov	r16,r2
    b8e0:	000c03c0 	call	c03c <__udivsi3>
    b8e4:	1039883a 	mov	fp,r2
    b8e8:	8d3fffcc 	andi	r20,r17,65535
    b8ec:	8020943a 	slli	r16,r16,16
    b8f0:	b804d43a 	srli	r2,r23,16
    b8f4:	a72d383a 	mul	r22,r20,fp
    b8f8:	1404b03a 	or	r2,r2,r16
    b8fc:	1580062e 	bgeu	r2,r22,b918 <__udivdi3+0x484>
    b900:	1445883a 	add	r2,r2,r17
    b904:	e0ffffc4 	addi	r3,fp,-1
    b908:	14403836 	bltu	r2,r17,b9ec <__udivdi3+0x558>
    b90c:	1580372e 	bgeu	r2,r22,b9ec <__udivdi3+0x558>
    b910:	e73fff84 	addi	fp,fp,-2
    b914:	1445883a 	add	r2,r2,r17
    b918:	15adc83a 	sub	r22,r2,r22
    b91c:	a80b883a 	mov	r5,r21
    b920:	b009883a 	mov	r4,r22
    b924:	000c0a00 	call	c0a0 <__umodsi3>
    b928:	1027883a 	mov	r19,r2
    b92c:	b009883a 	mov	r4,r22
    b930:	a80b883a 	mov	r5,r21
    b934:	000c03c0 	call	c03c <__udivsi3>
    b938:	9826943a 	slli	r19,r19,16
    b93c:	a0a1383a 	mul	r16,r20,r2
    b940:	b93fffcc 	andi	r4,r23,65535
    b944:	24c8b03a 	or	r4,r4,r19
    b948:	2400062e 	bgeu	r4,r16,b964 <__udivdi3+0x4d0>
    b94c:	2449883a 	add	r4,r4,r17
    b950:	10ffffc4 	addi	r3,r2,-1
    b954:	24402336 	bltu	r4,r17,b9e4 <__udivdi3+0x550>
    b958:	2400222e 	bgeu	r4,r16,b9e4 <__udivdi3+0x550>
    b95c:	10bfff84 	addi	r2,r2,-2
    b960:	2449883a 	add	r4,r4,r17
    b964:	e038943a 	slli	fp,fp,16
    b968:	2421c83a 	sub	r16,r4,r16
    b96c:	e086b03a 	or	r3,fp,r2
    b970:	003f4306 	br	b680 <__alt_data_end+0xff00b680>
    b974:	2005883a 	mov	r2,r4
    b978:	003f6906 	br	b720 <__alt_data_end+0xff00b720>
    b97c:	1805883a 	mov	r2,r3
    b980:	003f0f06 	br	b5c0 <__alt_data_end+0xff00b5c0>
    b984:	1806943a 	slli	r3,r3,16
    b988:	9d66983a 	sll	r19,r19,r21
    b98c:	39ffffcc 	andi	r7,r7,65535
    b990:	19c7883a 	add	r3,r3,r7
    b994:	98ffc32e 	bgeu	r19,r3,b8a4 <__alt_data_end+0xff00b8a4>
    b998:	10bfffc4 	addi	r2,r2,-1
    b99c:	003fc106 	br	b8a4 <__alt_data_end+0xff00b8a4>
    b9a0:	00800604 	movi	r2,24
    b9a4:	003f1106 	br	b5ec <__alt_data_end+0xff00b5ec>
    b9a8:	00800604 	movi	r2,24
    b9ac:	003f2706 	br	b64c <__alt_data_end+0xff00b64c>
    b9b0:	00800604 	movi	r2,24
    b9b4:	003ece06 	br	b4f0 <__alt_data_end+0xff00b4f0>
    b9b8:	0007883a 	mov	r3,zero
    b9bc:	00800044 	movi	r2,1
    b9c0:	003f5c06 	br	b734 <__alt_data_end+0xff00b734>
    b9c4:	813fa12e 	bgeu	r16,r4,b84c <__alt_data_end+0xff00b84c>
    b9c8:	10bfff84 	addi	r2,r2,-2
    b9cc:	85e1883a 	add	r16,r16,r23
    b9d0:	003f9f06 	br	b850 <__alt_data_end+0xff00b850>
    b9d4:	1c7f8a2e 	bgeu	r3,r17,b800 <__alt_data_end+0xff00b800>
    b9d8:	31bfff84 	addi	r6,r6,-2
    b9dc:	1dc7883a 	add	r3,r3,r23
    b9e0:	003f8806 	br	b804 <__alt_data_end+0xff00b804>
    b9e4:	1805883a 	mov	r2,r3
    b9e8:	003fde06 	br	b964 <__alt_data_end+0xff00b964>
    b9ec:	1839883a 	mov	fp,r3
    b9f0:	003fc906 	br	b918 <__alt_data_end+0xff00b918>
    b9f4:	b5bfff84 	addi	r22,r22,-2
    b9f8:	2449883a 	add	r4,r4,r17
    b9fc:	003f3406 	br	b6d0 <__alt_data_end+0xff00b6d0>
    ba00:	b5bfff84 	addi	r22,r22,-2
    ba04:	1445883a 	add	r2,r2,r17
    ba08:	003edb06 	br	b578 <__alt_data_end+0xff00b578>

0000ba0c <__umoddi3>:
    ba0c:	defff404 	addi	sp,sp,-48
    ba10:	df000a15 	stw	fp,40(sp)
    ba14:	dc400315 	stw	r17,12(sp)
    ba18:	dc000215 	stw	r16,8(sp)
    ba1c:	dfc00b15 	stw	ra,44(sp)
    ba20:	ddc00915 	stw	r23,36(sp)
    ba24:	dd800815 	stw	r22,32(sp)
    ba28:	dd400715 	stw	r21,28(sp)
    ba2c:	dd000615 	stw	r20,24(sp)
    ba30:	dcc00515 	stw	r19,20(sp)
    ba34:	dc800415 	stw	r18,16(sp)
    ba38:	2021883a 	mov	r16,r4
    ba3c:	2823883a 	mov	r17,r5
    ba40:	2839883a 	mov	fp,r5
    ba44:	38003c1e 	bne	r7,zero,bb38 <__umoddi3+0x12c>
    ba48:	3027883a 	mov	r19,r6
    ba4c:	2029883a 	mov	r20,r4
    ba50:	2980512e 	bgeu	r5,r6,bb98 <__umoddi3+0x18c>
    ba54:	00bfffd4 	movui	r2,65535
    ba58:	11809a36 	bltu	r2,r6,bcc4 <__umoddi3+0x2b8>
    ba5c:	01003fc4 	movi	r4,255
    ba60:	2189803a 	cmpltu	r4,r4,r6
    ba64:	200890fa 	slli	r4,r4,3
    ba68:	3104d83a 	srl	r2,r6,r4
    ba6c:	00c00074 	movhi	r3,1
    ba70:	18c26a04 	addi	r3,r3,2472
    ba74:	1885883a 	add	r2,r3,r2
    ba78:	10c00003 	ldbu	r3,0(r2)
    ba7c:	00800804 	movi	r2,32
    ba80:	1909883a 	add	r4,r3,r4
    ba84:	1125c83a 	sub	r18,r2,r4
    ba88:	90000526 	beq	r18,zero,baa0 <__umoddi3+0x94>
    ba8c:	8ca2983a 	sll	r17,r17,r18
    ba90:	8108d83a 	srl	r4,r16,r4
    ba94:	34a6983a 	sll	r19,r6,r18
    ba98:	84a8983a 	sll	r20,r16,r18
    ba9c:	2478b03a 	or	fp,r4,r17
    baa0:	982ed43a 	srli	r23,r19,16
    baa4:	e009883a 	mov	r4,fp
    baa8:	9dbfffcc 	andi	r22,r19,65535
    baac:	b80b883a 	mov	r5,r23
    bab0:	000c0a00 	call	c0a0 <__umodsi3>
    bab4:	e009883a 	mov	r4,fp
    bab8:	b80b883a 	mov	r5,r23
    babc:	102b883a 	mov	r21,r2
    bac0:	000c03c0 	call	c03c <__udivsi3>
    bac4:	a806943a 	slli	r3,r21,16
    bac8:	a008d43a 	srli	r4,r20,16
    bacc:	b085383a 	mul	r2,r22,r2
    bad0:	20c8b03a 	or	r4,r4,r3
    bad4:	2080032e 	bgeu	r4,r2,bae4 <__umoddi3+0xd8>
    bad8:	24c9883a 	add	r4,r4,r19
    badc:	24c00136 	bltu	r4,r19,bae4 <__umoddi3+0xd8>
    bae0:	20811036 	bltu	r4,r2,bf24 <__umoddi3+0x518>
    bae4:	20abc83a 	sub	r21,r4,r2
    bae8:	b80b883a 	mov	r5,r23
    baec:	a809883a 	mov	r4,r21
    baf0:	000c0a00 	call	c0a0 <__umodsi3>
    baf4:	1023883a 	mov	r17,r2
    baf8:	b80b883a 	mov	r5,r23
    bafc:	a809883a 	mov	r4,r21
    bb00:	000c03c0 	call	c03c <__udivsi3>
    bb04:	8822943a 	slli	r17,r17,16
    bb08:	b085383a 	mul	r2,r22,r2
    bb0c:	a0ffffcc 	andi	r3,r20,65535
    bb10:	1c46b03a 	or	r3,r3,r17
    bb14:	1880042e 	bgeu	r3,r2,bb28 <__umoddi3+0x11c>
    bb18:	1cc7883a 	add	r3,r3,r19
    bb1c:	1cc00236 	bltu	r3,r19,bb28 <__umoddi3+0x11c>
    bb20:	1880012e 	bgeu	r3,r2,bb28 <__umoddi3+0x11c>
    bb24:	1cc7883a 	add	r3,r3,r19
    bb28:	1885c83a 	sub	r2,r3,r2
    bb2c:	1484d83a 	srl	r2,r2,r18
    bb30:	0007883a 	mov	r3,zero
    bb34:	00004f06 	br	bc74 <__umoddi3+0x268>
    bb38:	29c04c36 	bltu	r5,r7,bc6c <__umoddi3+0x260>
    bb3c:	00bfffd4 	movui	r2,65535
    bb40:	11c0582e 	bgeu	r2,r7,bca4 <__umoddi3+0x298>
    bb44:	00804034 	movhi	r2,256
    bb48:	10bfffc4 	addi	r2,r2,-1
    bb4c:	11c0e736 	bltu	r2,r7,beec <__umoddi3+0x4e0>
    bb50:	01000404 	movi	r4,16
    bb54:	3904d83a 	srl	r2,r7,r4
    bb58:	00c00074 	movhi	r3,1
    bb5c:	18c26a04 	addi	r3,r3,2472
    bb60:	1885883a 	add	r2,r3,r2
    bb64:	14c00003 	ldbu	r19,0(r2)
    bb68:	00c00804 	movi	r3,32
    bb6c:	9927883a 	add	r19,r19,r4
    bb70:	1ce9c83a 	sub	r20,r3,r19
    bb74:	a000581e 	bne	r20,zero,bcd8 <__umoddi3+0x2cc>
    bb78:	3c400136 	bltu	r7,r17,bb80 <__umoddi3+0x174>
    bb7c:	8180eb36 	bltu	r16,r6,bf2c <__umoddi3+0x520>
    bb80:	8185c83a 	sub	r2,r16,r6
    bb84:	89e3c83a 	sub	r17,r17,r7
    bb88:	8089803a 	cmpltu	r4,r16,r2
    bb8c:	8939c83a 	sub	fp,r17,r4
    bb90:	e007883a 	mov	r3,fp
    bb94:	00003706 	br	bc74 <__umoddi3+0x268>
    bb98:	3000041e 	bne	r6,zero,bbac <__umoddi3+0x1a0>
    bb9c:	000b883a 	mov	r5,zero
    bba0:	01000044 	movi	r4,1
    bba4:	000c03c0 	call	c03c <__udivsi3>
    bba8:	1027883a 	mov	r19,r2
    bbac:	00bfffd4 	movui	r2,65535
    bbb0:	14c0402e 	bgeu	r2,r19,bcb4 <__umoddi3+0x2a8>
    bbb4:	00804034 	movhi	r2,256
    bbb8:	10bfffc4 	addi	r2,r2,-1
    bbbc:	14c0cd36 	bltu	r2,r19,bef4 <__umoddi3+0x4e8>
    bbc0:	00800404 	movi	r2,16
    bbc4:	9886d83a 	srl	r3,r19,r2
    bbc8:	01000074 	movhi	r4,1
    bbcc:	21026a04 	addi	r4,r4,2472
    bbd0:	20c7883a 	add	r3,r4,r3
    bbd4:	18c00003 	ldbu	r3,0(r3)
    bbd8:	1887883a 	add	r3,r3,r2
    bbdc:	00800804 	movi	r2,32
    bbe0:	10e5c83a 	sub	r18,r2,r3
    bbe4:	9000901e 	bne	r18,zero,be28 <__umoddi3+0x41c>
    bbe8:	982cd43a 	srli	r22,r19,16
    bbec:	8ce3c83a 	sub	r17,r17,r19
    bbf0:	9d7fffcc 	andi	r21,r19,65535
    bbf4:	b00b883a 	mov	r5,r22
    bbf8:	8809883a 	mov	r4,r17
    bbfc:	000c0a00 	call	c0a0 <__umodsi3>
    bc00:	8809883a 	mov	r4,r17
    bc04:	b00b883a 	mov	r5,r22
    bc08:	1021883a 	mov	r16,r2
    bc0c:	000c03c0 	call	c03c <__udivsi3>
    bc10:	8006943a 	slli	r3,r16,16
    bc14:	a008d43a 	srli	r4,r20,16
    bc18:	1545383a 	mul	r2,r2,r21
    bc1c:	20c8b03a 	or	r4,r4,r3
    bc20:	2080042e 	bgeu	r4,r2,bc34 <__umoddi3+0x228>
    bc24:	24c9883a 	add	r4,r4,r19
    bc28:	24c00236 	bltu	r4,r19,bc34 <__umoddi3+0x228>
    bc2c:	2080012e 	bgeu	r4,r2,bc34 <__umoddi3+0x228>
    bc30:	24c9883a 	add	r4,r4,r19
    bc34:	20a1c83a 	sub	r16,r4,r2
    bc38:	b00b883a 	mov	r5,r22
    bc3c:	8009883a 	mov	r4,r16
    bc40:	000c0a00 	call	c0a0 <__umodsi3>
    bc44:	1023883a 	mov	r17,r2
    bc48:	b00b883a 	mov	r5,r22
    bc4c:	8009883a 	mov	r4,r16
    bc50:	000c03c0 	call	c03c <__udivsi3>
    bc54:	8822943a 	slli	r17,r17,16
    bc58:	1545383a 	mul	r2,r2,r21
    bc5c:	a53fffcc 	andi	r20,r20,65535
    bc60:	a446b03a 	or	r3,r20,r17
    bc64:	18bfb02e 	bgeu	r3,r2,bb28 <__alt_data_end+0xff00bb28>
    bc68:	003fab06 	br	bb18 <__alt_data_end+0xff00bb18>
    bc6c:	2005883a 	mov	r2,r4
    bc70:	2807883a 	mov	r3,r5
    bc74:	dfc00b17 	ldw	ra,44(sp)
    bc78:	df000a17 	ldw	fp,40(sp)
    bc7c:	ddc00917 	ldw	r23,36(sp)
    bc80:	dd800817 	ldw	r22,32(sp)
    bc84:	dd400717 	ldw	r21,28(sp)
    bc88:	dd000617 	ldw	r20,24(sp)
    bc8c:	dcc00517 	ldw	r19,20(sp)
    bc90:	dc800417 	ldw	r18,16(sp)
    bc94:	dc400317 	ldw	r17,12(sp)
    bc98:	dc000217 	ldw	r16,8(sp)
    bc9c:	dec00c04 	addi	sp,sp,48
    bca0:	f800283a 	ret
    bca4:	04c03fc4 	movi	r19,255
    bca8:	99c9803a 	cmpltu	r4,r19,r7
    bcac:	200890fa 	slli	r4,r4,3
    bcb0:	003fa806 	br	bb54 <__alt_data_end+0xff00bb54>
    bcb4:	00803fc4 	movi	r2,255
    bcb8:	14c5803a 	cmpltu	r2,r2,r19
    bcbc:	100490fa 	slli	r2,r2,3
    bcc0:	003fc006 	br	bbc4 <__alt_data_end+0xff00bbc4>
    bcc4:	00804034 	movhi	r2,256
    bcc8:	10bfffc4 	addi	r2,r2,-1
    bccc:	11808b36 	bltu	r2,r6,befc <__umoddi3+0x4f0>
    bcd0:	01000404 	movi	r4,16
    bcd4:	003f6406 	br	ba68 <__alt_data_end+0xff00ba68>
    bcd8:	34c4d83a 	srl	r2,r6,r19
    bcdc:	3d0e983a 	sll	r7,r7,r20
    bce0:	8cf8d83a 	srl	fp,r17,r19
    bce4:	8d10983a 	sll	r8,r17,r20
    bce8:	38aab03a 	or	r21,r7,r2
    bcec:	a82cd43a 	srli	r22,r21,16
    bcf0:	84e2d83a 	srl	r17,r16,r19
    bcf4:	e009883a 	mov	r4,fp
    bcf8:	b00b883a 	mov	r5,r22
    bcfc:	8a22b03a 	or	r17,r17,r8
    bd00:	3524983a 	sll	r18,r6,r20
    bd04:	000c0a00 	call	c0a0 <__umodsi3>
    bd08:	e009883a 	mov	r4,fp
    bd0c:	b00b883a 	mov	r5,r22
    bd10:	102f883a 	mov	r23,r2
    bd14:	000c03c0 	call	c03c <__udivsi3>
    bd18:	100d883a 	mov	r6,r2
    bd1c:	b808943a 	slli	r4,r23,16
    bd20:	aa3fffcc 	andi	r8,r21,65535
    bd24:	8804d43a 	srli	r2,r17,16
    bd28:	41af383a 	mul	r23,r8,r6
    bd2c:	8520983a 	sll	r16,r16,r20
    bd30:	1104b03a 	or	r2,r2,r4
    bd34:	15c0042e 	bgeu	r2,r23,bd48 <__umoddi3+0x33c>
    bd38:	1545883a 	add	r2,r2,r21
    bd3c:	30ffffc4 	addi	r3,r6,-1
    bd40:	1540742e 	bgeu	r2,r21,bf14 <__umoddi3+0x508>
    bd44:	180d883a 	mov	r6,r3
    bd48:	15efc83a 	sub	r23,r2,r23
    bd4c:	b00b883a 	mov	r5,r22
    bd50:	b809883a 	mov	r4,r23
    bd54:	d9800115 	stw	r6,4(sp)
    bd58:	da000015 	stw	r8,0(sp)
    bd5c:	000c0a00 	call	c0a0 <__umodsi3>
    bd60:	b00b883a 	mov	r5,r22
    bd64:	b809883a 	mov	r4,r23
    bd68:	1039883a 	mov	fp,r2
    bd6c:	000c03c0 	call	c03c <__udivsi3>
    bd70:	da000017 	ldw	r8,0(sp)
    bd74:	e038943a 	slli	fp,fp,16
    bd78:	100b883a 	mov	r5,r2
    bd7c:	4089383a 	mul	r4,r8,r2
    bd80:	8a3fffcc 	andi	r8,r17,65535
    bd84:	4710b03a 	or	r8,r8,fp
    bd88:	d9800117 	ldw	r6,4(sp)
    bd8c:	4100042e 	bgeu	r8,r4,bda0 <__umoddi3+0x394>
    bd90:	4551883a 	add	r8,r8,r21
    bd94:	10bfffc4 	addi	r2,r2,-1
    bd98:	45405a2e 	bgeu	r8,r21,bf04 <__umoddi3+0x4f8>
    bd9c:	100b883a 	mov	r5,r2
    bda0:	300c943a 	slli	r6,r6,16
    bda4:	91ffffcc 	andi	r7,r18,65535
    bda8:	9004d43a 	srli	r2,r18,16
    bdac:	314cb03a 	or	r6,r6,r5
    bdb0:	317fffcc 	andi	r5,r6,65535
    bdb4:	300cd43a 	srli	r6,r6,16
    bdb8:	29d3383a 	mul	r9,r5,r7
    bdbc:	288b383a 	mul	r5,r5,r2
    bdc0:	31cf383a 	mul	r7,r6,r7
    bdc4:	4806d43a 	srli	r3,r9,16
    bdc8:	4111c83a 	sub	r8,r8,r4
    bdcc:	29cb883a 	add	r5,r5,r7
    bdd0:	194b883a 	add	r5,r3,r5
    bdd4:	3085383a 	mul	r2,r6,r2
    bdd8:	29c0022e 	bgeu	r5,r7,bde4 <__umoddi3+0x3d8>
    bddc:	00c00074 	movhi	r3,1
    bde0:	10c5883a 	add	r2,r2,r3
    bde4:	2808d43a 	srli	r4,r5,16
    bde8:	280a943a 	slli	r5,r5,16
    bdec:	4a7fffcc 	andi	r9,r9,65535
    bdf0:	2085883a 	add	r2,r4,r2
    bdf4:	2a4b883a 	add	r5,r5,r9
    bdf8:	40803636 	bltu	r8,r2,bed4 <__umoddi3+0x4c8>
    bdfc:	40804d26 	beq	r8,r2,bf34 <__umoddi3+0x528>
    be00:	4089c83a 	sub	r4,r8,r2
    be04:	280f883a 	mov	r7,r5
    be08:	81cfc83a 	sub	r7,r16,r7
    be0c:	81c7803a 	cmpltu	r3,r16,r7
    be10:	20c7c83a 	sub	r3,r4,r3
    be14:	1cc4983a 	sll	r2,r3,r19
    be18:	3d0ed83a 	srl	r7,r7,r20
    be1c:	1d06d83a 	srl	r3,r3,r20
    be20:	11c4b03a 	or	r2,r2,r7
    be24:	003f9306 	br	bc74 <__alt_data_end+0xff00bc74>
    be28:	9ca6983a 	sll	r19,r19,r18
    be2c:	88e8d83a 	srl	r20,r17,r3
    be30:	80c4d83a 	srl	r2,r16,r3
    be34:	982cd43a 	srli	r22,r19,16
    be38:	8ca2983a 	sll	r17,r17,r18
    be3c:	a009883a 	mov	r4,r20
    be40:	b00b883a 	mov	r5,r22
    be44:	1478b03a 	or	fp,r2,r17
    be48:	000c0a00 	call	c0a0 <__umodsi3>
    be4c:	a009883a 	mov	r4,r20
    be50:	b00b883a 	mov	r5,r22
    be54:	1023883a 	mov	r17,r2
    be58:	000c03c0 	call	c03c <__udivsi3>
    be5c:	9d7fffcc 	andi	r21,r19,65535
    be60:	880a943a 	slli	r5,r17,16
    be64:	e008d43a 	srli	r4,fp,16
    be68:	a885383a 	mul	r2,r21,r2
    be6c:	84a8983a 	sll	r20,r16,r18
    be70:	2148b03a 	or	r4,r4,r5
    be74:	2080042e 	bgeu	r4,r2,be88 <__umoddi3+0x47c>
    be78:	24c9883a 	add	r4,r4,r19
    be7c:	24c00236 	bltu	r4,r19,be88 <__umoddi3+0x47c>
    be80:	2080012e 	bgeu	r4,r2,be88 <__umoddi3+0x47c>
    be84:	24c9883a 	add	r4,r4,r19
    be88:	20a3c83a 	sub	r17,r4,r2
    be8c:	b00b883a 	mov	r5,r22
    be90:	8809883a 	mov	r4,r17
    be94:	000c0a00 	call	c0a0 <__umodsi3>
    be98:	102f883a 	mov	r23,r2
    be9c:	8809883a 	mov	r4,r17
    bea0:	b00b883a 	mov	r5,r22
    bea4:	000c03c0 	call	c03c <__udivsi3>
    bea8:	b82e943a 	slli	r23,r23,16
    beac:	a885383a 	mul	r2,r21,r2
    beb0:	e13fffcc 	andi	r4,fp,65535
    beb4:	25c8b03a 	or	r4,r4,r23
    beb8:	2080042e 	bgeu	r4,r2,becc <__umoddi3+0x4c0>
    bebc:	24c9883a 	add	r4,r4,r19
    bec0:	24c00236 	bltu	r4,r19,becc <__umoddi3+0x4c0>
    bec4:	2080012e 	bgeu	r4,r2,becc <__umoddi3+0x4c0>
    bec8:	24c9883a 	add	r4,r4,r19
    becc:	20a3c83a 	sub	r17,r4,r2
    bed0:	003f4806 	br	bbf4 <__alt_data_end+0xff00bbf4>
    bed4:	2c8fc83a 	sub	r7,r5,r18
    bed8:	1545c83a 	sub	r2,r2,r21
    bedc:	29cb803a 	cmpltu	r5,r5,r7
    bee0:	1145c83a 	sub	r2,r2,r5
    bee4:	4089c83a 	sub	r4,r8,r2
    bee8:	003fc706 	br	be08 <__alt_data_end+0xff00be08>
    beec:	01000604 	movi	r4,24
    bef0:	003f1806 	br	bb54 <__alt_data_end+0xff00bb54>
    bef4:	00800604 	movi	r2,24
    bef8:	003f3206 	br	bbc4 <__alt_data_end+0xff00bbc4>
    befc:	01000604 	movi	r4,24
    bf00:	003ed906 	br	ba68 <__alt_data_end+0xff00ba68>
    bf04:	413fa52e 	bgeu	r8,r4,bd9c <__alt_data_end+0xff00bd9c>
    bf08:	297fff84 	addi	r5,r5,-2
    bf0c:	4551883a 	add	r8,r8,r21
    bf10:	003fa306 	br	bda0 <__alt_data_end+0xff00bda0>
    bf14:	15ff8b2e 	bgeu	r2,r23,bd44 <__alt_data_end+0xff00bd44>
    bf18:	31bfff84 	addi	r6,r6,-2
    bf1c:	1545883a 	add	r2,r2,r21
    bf20:	003f8906 	br	bd48 <__alt_data_end+0xff00bd48>
    bf24:	24c9883a 	add	r4,r4,r19
    bf28:	003eee06 	br	bae4 <__alt_data_end+0xff00bae4>
    bf2c:	8005883a 	mov	r2,r16
    bf30:	003f1706 	br	bb90 <__alt_data_end+0xff00bb90>
    bf34:	817fe736 	bltu	r16,r5,bed4 <__alt_data_end+0xff00bed4>
    bf38:	280f883a 	mov	r7,r5
    bf3c:	0009883a 	mov	r4,zero
    bf40:	003fb106 	br	be08 <__alt_data_end+0xff00be08>

0000bf44 <__divsi3>:
    bf44:	20001b16 	blt	r4,zero,bfb4 <__divsi3+0x70>
    bf48:	000f883a 	mov	r7,zero
    bf4c:	28001616 	blt	r5,zero,bfa8 <__divsi3+0x64>
    bf50:	200d883a 	mov	r6,r4
    bf54:	29001a2e 	bgeu	r5,r4,bfc0 <__divsi3+0x7c>
    bf58:	00800804 	movi	r2,32
    bf5c:	00c00044 	movi	r3,1
    bf60:	00000106 	br	bf68 <__divsi3+0x24>
    bf64:	10000d26 	beq	r2,zero,bf9c <__divsi3+0x58>
    bf68:	294b883a 	add	r5,r5,r5
    bf6c:	10bfffc4 	addi	r2,r2,-1
    bf70:	18c7883a 	add	r3,r3,r3
    bf74:	293ffb36 	bltu	r5,r4,bf64 <__alt_data_end+0xff00bf64>
    bf78:	0005883a 	mov	r2,zero
    bf7c:	18000726 	beq	r3,zero,bf9c <__divsi3+0x58>
    bf80:	0005883a 	mov	r2,zero
    bf84:	31400236 	bltu	r6,r5,bf90 <__divsi3+0x4c>
    bf88:	314dc83a 	sub	r6,r6,r5
    bf8c:	10c4b03a 	or	r2,r2,r3
    bf90:	1806d07a 	srli	r3,r3,1
    bf94:	280ad07a 	srli	r5,r5,1
    bf98:	183ffa1e 	bne	r3,zero,bf84 <__alt_data_end+0xff00bf84>
    bf9c:	38000126 	beq	r7,zero,bfa4 <__divsi3+0x60>
    bfa0:	0085c83a 	sub	r2,zero,r2
    bfa4:	f800283a 	ret
    bfa8:	014bc83a 	sub	r5,zero,r5
    bfac:	39c0005c 	xori	r7,r7,1
    bfb0:	003fe706 	br	bf50 <__alt_data_end+0xff00bf50>
    bfb4:	0109c83a 	sub	r4,zero,r4
    bfb8:	01c00044 	movi	r7,1
    bfbc:	003fe306 	br	bf4c <__alt_data_end+0xff00bf4c>
    bfc0:	00c00044 	movi	r3,1
    bfc4:	003fee06 	br	bf80 <__alt_data_end+0xff00bf80>

0000bfc8 <__modsi3>:
    bfc8:	20001716 	blt	r4,zero,c028 <__modsi3+0x60>
    bfcc:	000f883a 	mov	r7,zero
    bfd0:	2005883a 	mov	r2,r4
    bfd4:	28001216 	blt	r5,zero,c020 <__modsi3+0x58>
    bfd8:	2900162e 	bgeu	r5,r4,c034 <__modsi3+0x6c>
    bfdc:	01800804 	movi	r6,32
    bfe0:	00c00044 	movi	r3,1
    bfe4:	00000106 	br	bfec <__modsi3+0x24>
    bfe8:	30000a26 	beq	r6,zero,c014 <__modsi3+0x4c>
    bfec:	294b883a 	add	r5,r5,r5
    bff0:	31bfffc4 	addi	r6,r6,-1
    bff4:	18c7883a 	add	r3,r3,r3
    bff8:	293ffb36 	bltu	r5,r4,bfe8 <__alt_data_end+0xff00bfe8>
    bffc:	18000526 	beq	r3,zero,c014 <__modsi3+0x4c>
    c000:	1806d07a 	srli	r3,r3,1
    c004:	11400136 	bltu	r2,r5,c00c <__modsi3+0x44>
    c008:	1145c83a 	sub	r2,r2,r5
    c00c:	280ad07a 	srli	r5,r5,1
    c010:	183ffb1e 	bne	r3,zero,c000 <__alt_data_end+0xff00c000>
    c014:	38000126 	beq	r7,zero,c01c <__modsi3+0x54>
    c018:	0085c83a 	sub	r2,zero,r2
    c01c:	f800283a 	ret
    c020:	014bc83a 	sub	r5,zero,r5
    c024:	003fec06 	br	bfd8 <__alt_data_end+0xff00bfd8>
    c028:	0109c83a 	sub	r4,zero,r4
    c02c:	01c00044 	movi	r7,1
    c030:	003fe706 	br	bfd0 <__alt_data_end+0xff00bfd0>
    c034:	00c00044 	movi	r3,1
    c038:	003ff106 	br	c000 <__alt_data_end+0xff00c000>

0000c03c <__udivsi3>:
    c03c:	200d883a 	mov	r6,r4
    c040:	2900152e 	bgeu	r5,r4,c098 <__udivsi3+0x5c>
    c044:	28001416 	blt	r5,zero,c098 <__udivsi3+0x5c>
    c048:	00800804 	movi	r2,32
    c04c:	00c00044 	movi	r3,1
    c050:	00000206 	br	c05c <__udivsi3+0x20>
    c054:	10000e26 	beq	r2,zero,c090 <__udivsi3+0x54>
    c058:	28000516 	blt	r5,zero,c070 <__udivsi3+0x34>
    c05c:	294b883a 	add	r5,r5,r5
    c060:	10bfffc4 	addi	r2,r2,-1
    c064:	18c7883a 	add	r3,r3,r3
    c068:	293ffa36 	bltu	r5,r4,c054 <__alt_data_end+0xff00c054>
    c06c:	18000826 	beq	r3,zero,c090 <__udivsi3+0x54>
    c070:	0005883a 	mov	r2,zero
    c074:	31400236 	bltu	r6,r5,c080 <__udivsi3+0x44>
    c078:	314dc83a 	sub	r6,r6,r5
    c07c:	10c4b03a 	or	r2,r2,r3
    c080:	1806d07a 	srli	r3,r3,1
    c084:	280ad07a 	srli	r5,r5,1
    c088:	183ffa1e 	bne	r3,zero,c074 <__alt_data_end+0xff00c074>
    c08c:	f800283a 	ret
    c090:	0005883a 	mov	r2,zero
    c094:	f800283a 	ret
    c098:	00c00044 	movi	r3,1
    c09c:	003ff406 	br	c070 <__alt_data_end+0xff00c070>

0000c0a0 <__umodsi3>:
    c0a0:	2005883a 	mov	r2,r4
    c0a4:	2900122e 	bgeu	r5,r4,c0f0 <__umodsi3+0x50>
    c0a8:	28001116 	blt	r5,zero,c0f0 <__umodsi3+0x50>
    c0ac:	01800804 	movi	r6,32
    c0b0:	00c00044 	movi	r3,1
    c0b4:	00000206 	br	c0c0 <__umodsi3+0x20>
    c0b8:	30000c26 	beq	r6,zero,c0ec <__umodsi3+0x4c>
    c0bc:	28000516 	blt	r5,zero,c0d4 <__umodsi3+0x34>
    c0c0:	294b883a 	add	r5,r5,r5
    c0c4:	31bfffc4 	addi	r6,r6,-1
    c0c8:	18c7883a 	add	r3,r3,r3
    c0cc:	293ffa36 	bltu	r5,r4,c0b8 <__alt_data_end+0xff00c0b8>
    c0d0:	18000626 	beq	r3,zero,c0ec <__umodsi3+0x4c>
    c0d4:	1806d07a 	srli	r3,r3,1
    c0d8:	11400136 	bltu	r2,r5,c0e0 <__umodsi3+0x40>
    c0dc:	1145c83a 	sub	r2,r2,r5
    c0e0:	280ad07a 	srli	r5,r5,1
    c0e4:	183ffb1e 	bne	r3,zero,c0d4 <__alt_data_end+0xff00c0d4>
    c0e8:	f800283a 	ret
    c0ec:	f800283a 	ret
    c0f0:	00c00044 	movi	r3,1
    c0f4:	003ff706 	br	c0d4 <__alt_data_end+0xff00c0d4>

0000c0f8 <__adddf3>:
    c0f8:	02c00434 	movhi	r11,16
    c0fc:	5affffc4 	addi	r11,r11,-1
    c100:	2806d7fa 	srli	r3,r5,31
    c104:	2ad4703a 	and	r10,r5,r11
    c108:	3ad2703a 	and	r9,r7,r11
    c10c:	3804d53a 	srli	r2,r7,20
    c110:	3018d77a 	srli	r12,r6,29
    c114:	280ad53a 	srli	r5,r5,20
    c118:	501490fa 	slli	r10,r10,3
    c11c:	2010d77a 	srli	r8,r4,29
    c120:	481290fa 	slli	r9,r9,3
    c124:	380ed7fa 	srli	r7,r7,31
    c128:	defffb04 	addi	sp,sp,-20
    c12c:	dc800215 	stw	r18,8(sp)
    c130:	dc400115 	stw	r17,4(sp)
    c134:	dc000015 	stw	r16,0(sp)
    c138:	dfc00415 	stw	ra,16(sp)
    c13c:	dcc00315 	stw	r19,12(sp)
    c140:	1c803fcc 	andi	r18,r3,255
    c144:	2c01ffcc 	andi	r16,r5,2047
    c148:	5210b03a 	or	r8,r10,r8
    c14c:	202290fa 	slli	r17,r4,3
    c150:	1081ffcc 	andi	r2,r2,2047
    c154:	4b12b03a 	or	r9,r9,r12
    c158:	300c90fa 	slli	r6,r6,3
    c15c:	91c07526 	beq	r18,r7,c334 <__adddf3+0x23c>
    c160:	8087c83a 	sub	r3,r16,r2
    c164:	00c0ab0e 	bge	zero,r3,c414 <__adddf3+0x31c>
    c168:	10002a1e 	bne	r2,zero,c214 <__adddf3+0x11c>
    c16c:	4984b03a 	or	r2,r9,r6
    c170:	1000961e 	bne	r2,zero,c3cc <__adddf3+0x2d4>
    c174:	888001cc 	andi	r2,r17,7
    c178:	10000726 	beq	r2,zero,c198 <__adddf3+0xa0>
    c17c:	888003cc 	andi	r2,r17,15
    c180:	00c00104 	movi	r3,4
    c184:	10c00426 	beq	r2,r3,c198 <__adddf3+0xa0>
    c188:	88c7883a 	add	r3,r17,r3
    c18c:	1c63803a 	cmpltu	r17,r3,r17
    c190:	4451883a 	add	r8,r8,r17
    c194:	1823883a 	mov	r17,r3
    c198:	4080202c 	andhi	r2,r8,128
    c19c:	10005926 	beq	r2,zero,c304 <__adddf3+0x20c>
    c1a0:	84000044 	addi	r16,r16,1
    c1a4:	0081ffc4 	movi	r2,2047
    c1a8:	8080ba26 	beq	r16,r2,c494 <__adddf3+0x39c>
    c1ac:	00bfe034 	movhi	r2,65408
    c1b0:	10bfffc4 	addi	r2,r2,-1
    c1b4:	4090703a 	and	r8,r8,r2
    c1b8:	4004977a 	slli	r2,r8,29
    c1bc:	4010927a 	slli	r8,r8,9
    c1c0:	8822d0fa 	srli	r17,r17,3
    c1c4:	8401ffcc 	andi	r16,r16,2047
    c1c8:	4010d33a 	srli	r8,r8,12
    c1cc:	9007883a 	mov	r3,r18
    c1d0:	1444b03a 	or	r2,r2,r17
    c1d4:	8401ffcc 	andi	r16,r16,2047
    c1d8:	8020953a 	slli	r16,r16,20
    c1dc:	18c03fcc 	andi	r3,r3,255
    c1e0:	01000434 	movhi	r4,16
    c1e4:	213fffc4 	addi	r4,r4,-1
    c1e8:	180697fa 	slli	r3,r3,31
    c1ec:	4110703a 	and	r8,r8,r4
    c1f0:	4410b03a 	or	r8,r8,r16
    c1f4:	40c6b03a 	or	r3,r8,r3
    c1f8:	dfc00417 	ldw	ra,16(sp)
    c1fc:	dcc00317 	ldw	r19,12(sp)
    c200:	dc800217 	ldw	r18,8(sp)
    c204:	dc400117 	ldw	r17,4(sp)
    c208:	dc000017 	ldw	r16,0(sp)
    c20c:	dec00504 	addi	sp,sp,20
    c210:	f800283a 	ret
    c214:	0081ffc4 	movi	r2,2047
    c218:	80bfd626 	beq	r16,r2,c174 <__alt_data_end+0xff00c174>
    c21c:	4a402034 	orhi	r9,r9,128
    c220:	00800e04 	movi	r2,56
    c224:	10c09f16 	blt	r2,r3,c4a4 <__adddf3+0x3ac>
    c228:	008007c4 	movi	r2,31
    c22c:	10c0c216 	blt	r2,r3,c538 <__adddf3+0x440>
    c230:	00800804 	movi	r2,32
    c234:	10c5c83a 	sub	r2,r2,r3
    c238:	488a983a 	sll	r5,r9,r2
    c23c:	30c8d83a 	srl	r4,r6,r3
    c240:	3084983a 	sll	r2,r6,r2
    c244:	48c6d83a 	srl	r3,r9,r3
    c248:	290cb03a 	or	r6,r5,r4
    c24c:	1004c03a 	cmpne	r2,r2,zero
    c250:	308cb03a 	or	r6,r6,r2
    c254:	898dc83a 	sub	r6,r17,r6
    c258:	89a3803a 	cmpltu	r17,r17,r6
    c25c:	40d1c83a 	sub	r8,r8,r3
    c260:	4451c83a 	sub	r8,r8,r17
    c264:	3023883a 	mov	r17,r6
    c268:	4080202c 	andhi	r2,r8,128
    c26c:	10002326 	beq	r2,zero,c2fc <__adddf3+0x204>
    c270:	04c02034 	movhi	r19,128
    c274:	9cffffc4 	addi	r19,r19,-1
    c278:	44e6703a 	and	r19,r8,r19
    c27c:	98007626 	beq	r19,zero,c458 <__adddf3+0x360>
    c280:	9809883a 	mov	r4,r19
    c284:	000e6fc0 	call	e6fc <__clzsi2>
    c288:	10fffe04 	addi	r3,r2,-8
    c28c:	010007c4 	movi	r4,31
    c290:	20c07716 	blt	r4,r3,c470 <__adddf3+0x378>
    c294:	00800804 	movi	r2,32
    c298:	10c5c83a 	sub	r2,r2,r3
    c29c:	8884d83a 	srl	r2,r17,r2
    c2a0:	98d0983a 	sll	r8,r19,r3
    c2a4:	88e2983a 	sll	r17,r17,r3
    c2a8:	1204b03a 	or	r2,r2,r8
    c2ac:	1c007416 	blt	r3,r16,c480 <__adddf3+0x388>
    c2b0:	1c21c83a 	sub	r16,r3,r16
    c2b4:	82000044 	addi	r8,r16,1
    c2b8:	00c007c4 	movi	r3,31
    c2bc:	1a009116 	blt	r3,r8,c504 <__adddf3+0x40c>
    c2c0:	00c00804 	movi	r3,32
    c2c4:	1a07c83a 	sub	r3,r3,r8
    c2c8:	8a08d83a 	srl	r4,r17,r8
    c2cc:	88e2983a 	sll	r17,r17,r3
    c2d0:	10c6983a 	sll	r3,r2,r3
    c2d4:	1210d83a 	srl	r8,r2,r8
    c2d8:	8804c03a 	cmpne	r2,r17,zero
    c2dc:	1906b03a 	or	r3,r3,r4
    c2e0:	18a2b03a 	or	r17,r3,r2
    c2e4:	0021883a 	mov	r16,zero
    c2e8:	003fa206 	br	c174 <__alt_data_end+0xff00c174>
    c2ec:	1890b03a 	or	r8,r3,r2
    c2f0:	40017d26 	beq	r8,zero,c8e8 <__adddf3+0x7f0>
    c2f4:	1011883a 	mov	r8,r2
    c2f8:	1823883a 	mov	r17,r3
    c2fc:	888001cc 	andi	r2,r17,7
    c300:	103f9e1e 	bne	r2,zero,c17c <__alt_data_end+0xff00c17c>
    c304:	4004977a 	slli	r2,r8,29
    c308:	8822d0fa 	srli	r17,r17,3
    c30c:	4010d0fa 	srli	r8,r8,3
    c310:	9007883a 	mov	r3,r18
    c314:	1444b03a 	or	r2,r2,r17
    c318:	0101ffc4 	movi	r4,2047
    c31c:	81002426 	beq	r16,r4,c3b0 <__adddf3+0x2b8>
    c320:	8120703a 	and	r16,r16,r4
    c324:	01000434 	movhi	r4,16
    c328:	213fffc4 	addi	r4,r4,-1
    c32c:	4110703a 	and	r8,r8,r4
    c330:	003fa806 	br	c1d4 <__alt_data_end+0xff00c1d4>
    c334:	8089c83a 	sub	r4,r16,r2
    c338:	01005e0e 	bge	zero,r4,c4b4 <__adddf3+0x3bc>
    c33c:	10002b26 	beq	r2,zero,c3ec <__adddf3+0x2f4>
    c340:	0081ffc4 	movi	r2,2047
    c344:	80bf8b26 	beq	r16,r2,c174 <__alt_data_end+0xff00c174>
    c348:	4a402034 	orhi	r9,r9,128
    c34c:	00800e04 	movi	r2,56
    c350:	1100a40e 	bge	r2,r4,c5e4 <__adddf3+0x4ec>
    c354:	498cb03a 	or	r6,r9,r6
    c358:	300ac03a 	cmpne	r5,r6,zero
    c35c:	0013883a 	mov	r9,zero
    c360:	2c4b883a 	add	r5,r5,r17
    c364:	2c63803a 	cmpltu	r17,r5,r17
    c368:	4a11883a 	add	r8,r9,r8
    c36c:	8a11883a 	add	r8,r17,r8
    c370:	2823883a 	mov	r17,r5
    c374:	4080202c 	andhi	r2,r8,128
    c378:	103fe026 	beq	r2,zero,c2fc <__alt_data_end+0xff00c2fc>
    c37c:	84000044 	addi	r16,r16,1
    c380:	0081ffc4 	movi	r2,2047
    c384:	8080d226 	beq	r16,r2,c6d0 <__adddf3+0x5d8>
    c388:	00bfe034 	movhi	r2,65408
    c38c:	10bfffc4 	addi	r2,r2,-1
    c390:	4090703a 	and	r8,r8,r2
    c394:	880ad07a 	srli	r5,r17,1
    c398:	400897fa 	slli	r4,r8,31
    c39c:	88c0004c 	andi	r3,r17,1
    c3a0:	28e2b03a 	or	r17,r5,r3
    c3a4:	4010d07a 	srli	r8,r8,1
    c3a8:	2462b03a 	or	r17,r4,r17
    c3ac:	003f7106 	br	c174 <__alt_data_end+0xff00c174>
    c3b0:	4088b03a 	or	r4,r8,r2
    c3b4:	20014526 	beq	r4,zero,c8cc <__adddf3+0x7d4>
    c3b8:	01000434 	movhi	r4,16
    c3bc:	42000234 	orhi	r8,r8,8
    c3c0:	213fffc4 	addi	r4,r4,-1
    c3c4:	4110703a 	and	r8,r8,r4
    c3c8:	003f8206 	br	c1d4 <__alt_data_end+0xff00c1d4>
    c3cc:	18ffffc4 	addi	r3,r3,-1
    c3d0:	1800491e 	bne	r3,zero,c4f8 <__adddf3+0x400>
    c3d4:	898bc83a 	sub	r5,r17,r6
    c3d8:	8963803a 	cmpltu	r17,r17,r5
    c3dc:	4251c83a 	sub	r8,r8,r9
    c3e0:	4451c83a 	sub	r8,r8,r17
    c3e4:	2823883a 	mov	r17,r5
    c3e8:	003f9f06 	br	c268 <__alt_data_end+0xff00c268>
    c3ec:	4984b03a 	or	r2,r9,r6
    c3f0:	103f6026 	beq	r2,zero,c174 <__alt_data_end+0xff00c174>
    c3f4:	213fffc4 	addi	r4,r4,-1
    c3f8:	2000931e 	bne	r4,zero,c648 <__adddf3+0x550>
    c3fc:	898d883a 	add	r6,r17,r6
    c400:	3463803a 	cmpltu	r17,r6,r17
    c404:	4251883a 	add	r8,r8,r9
    c408:	8a11883a 	add	r8,r17,r8
    c40c:	3023883a 	mov	r17,r6
    c410:	003fd806 	br	c374 <__alt_data_end+0xff00c374>
    c414:	1800541e 	bne	r3,zero,c568 <__adddf3+0x470>
    c418:	80800044 	addi	r2,r16,1
    c41c:	1081ffcc 	andi	r2,r2,2047
    c420:	00c00044 	movi	r3,1
    c424:	1880a00e 	bge	r3,r2,c6a8 <__adddf3+0x5b0>
    c428:	8989c83a 	sub	r4,r17,r6
    c42c:	8905803a 	cmpltu	r2,r17,r4
    c430:	4267c83a 	sub	r19,r8,r9
    c434:	98a7c83a 	sub	r19,r19,r2
    c438:	9880202c 	andhi	r2,r19,128
    c43c:	10006326 	beq	r2,zero,c5cc <__adddf3+0x4d4>
    c440:	3463c83a 	sub	r17,r6,r17
    c444:	4a07c83a 	sub	r3,r9,r8
    c448:	344d803a 	cmpltu	r6,r6,r17
    c44c:	19a7c83a 	sub	r19,r3,r6
    c450:	3825883a 	mov	r18,r7
    c454:	983f8a1e 	bne	r19,zero,c280 <__alt_data_end+0xff00c280>
    c458:	8809883a 	mov	r4,r17
    c45c:	000e6fc0 	call	e6fc <__clzsi2>
    c460:	10800804 	addi	r2,r2,32
    c464:	10fffe04 	addi	r3,r2,-8
    c468:	010007c4 	movi	r4,31
    c46c:	20ff890e 	bge	r4,r3,c294 <__alt_data_end+0xff00c294>
    c470:	10bff604 	addi	r2,r2,-40
    c474:	8884983a 	sll	r2,r17,r2
    c478:	0023883a 	mov	r17,zero
    c47c:	1c3f8c0e 	bge	r3,r16,c2b0 <__alt_data_end+0xff00c2b0>
    c480:	023fe034 	movhi	r8,65408
    c484:	423fffc4 	addi	r8,r8,-1
    c488:	80e1c83a 	sub	r16,r16,r3
    c48c:	1210703a 	and	r8,r2,r8
    c490:	003f3806 	br	c174 <__alt_data_end+0xff00c174>
    c494:	9007883a 	mov	r3,r18
    c498:	0011883a 	mov	r8,zero
    c49c:	0005883a 	mov	r2,zero
    c4a0:	003f4c06 	br	c1d4 <__alt_data_end+0xff00c1d4>
    c4a4:	498cb03a 	or	r6,r9,r6
    c4a8:	300cc03a 	cmpne	r6,r6,zero
    c4ac:	0007883a 	mov	r3,zero
    c4b0:	003f6806 	br	c254 <__alt_data_end+0xff00c254>
    c4b4:	20009c1e 	bne	r4,zero,c728 <__adddf3+0x630>
    c4b8:	80800044 	addi	r2,r16,1
    c4bc:	1141ffcc 	andi	r5,r2,2047
    c4c0:	01000044 	movi	r4,1
    c4c4:	2140670e 	bge	r4,r5,c664 <__adddf3+0x56c>
    c4c8:	0101ffc4 	movi	r4,2047
    c4cc:	11007f26 	beq	r2,r4,c6cc <__adddf3+0x5d4>
    c4d0:	898d883a 	add	r6,r17,r6
    c4d4:	4247883a 	add	r3,r8,r9
    c4d8:	3451803a 	cmpltu	r8,r6,r17
    c4dc:	40d1883a 	add	r8,r8,r3
    c4e0:	402297fa 	slli	r17,r8,31
    c4e4:	300cd07a 	srli	r6,r6,1
    c4e8:	4010d07a 	srli	r8,r8,1
    c4ec:	1021883a 	mov	r16,r2
    c4f0:	89a2b03a 	or	r17,r17,r6
    c4f4:	003f1f06 	br	c174 <__alt_data_end+0xff00c174>
    c4f8:	0081ffc4 	movi	r2,2047
    c4fc:	80bf481e 	bne	r16,r2,c220 <__alt_data_end+0xff00c220>
    c500:	003f1c06 	br	c174 <__alt_data_end+0xff00c174>
    c504:	843ff844 	addi	r16,r16,-31
    c508:	01000804 	movi	r4,32
    c50c:	1406d83a 	srl	r3,r2,r16
    c510:	41005026 	beq	r8,r4,c654 <__adddf3+0x55c>
    c514:	01001004 	movi	r4,64
    c518:	2211c83a 	sub	r8,r4,r8
    c51c:	1204983a 	sll	r2,r2,r8
    c520:	88a2b03a 	or	r17,r17,r2
    c524:	8822c03a 	cmpne	r17,r17,zero
    c528:	1c62b03a 	or	r17,r3,r17
    c52c:	0011883a 	mov	r8,zero
    c530:	0021883a 	mov	r16,zero
    c534:	003f7106 	br	c2fc <__alt_data_end+0xff00c2fc>
    c538:	193ff804 	addi	r4,r3,-32
    c53c:	00800804 	movi	r2,32
    c540:	4908d83a 	srl	r4,r9,r4
    c544:	18804526 	beq	r3,r2,c65c <__adddf3+0x564>
    c548:	00801004 	movi	r2,64
    c54c:	10c5c83a 	sub	r2,r2,r3
    c550:	4886983a 	sll	r3,r9,r2
    c554:	198cb03a 	or	r6,r3,r6
    c558:	300cc03a 	cmpne	r6,r6,zero
    c55c:	218cb03a 	or	r6,r4,r6
    c560:	0007883a 	mov	r3,zero
    c564:	003f3b06 	br	c254 <__alt_data_end+0xff00c254>
    c568:	80002a26 	beq	r16,zero,c614 <__adddf3+0x51c>
    c56c:	0101ffc4 	movi	r4,2047
    c570:	11006826 	beq	r2,r4,c714 <__adddf3+0x61c>
    c574:	00c7c83a 	sub	r3,zero,r3
    c578:	42002034 	orhi	r8,r8,128
    c57c:	01000e04 	movi	r4,56
    c580:	20c07c16 	blt	r4,r3,c774 <__adddf3+0x67c>
    c584:	010007c4 	movi	r4,31
    c588:	20c0da16 	blt	r4,r3,c8f4 <__adddf3+0x7fc>
    c58c:	01000804 	movi	r4,32
    c590:	20c9c83a 	sub	r4,r4,r3
    c594:	4114983a 	sll	r10,r8,r4
    c598:	88cad83a 	srl	r5,r17,r3
    c59c:	8908983a 	sll	r4,r17,r4
    c5a0:	40c6d83a 	srl	r3,r8,r3
    c5a4:	5162b03a 	or	r17,r10,r5
    c5a8:	2008c03a 	cmpne	r4,r4,zero
    c5ac:	8922b03a 	or	r17,r17,r4
    c5b0:	3463c83a 	sub	r17,r6,r17
    c5b4:	48c7c83a 	sub	r3,r9,r3
    c5b8:	344d803a 	cmpltu	r6,r6,r17
    c5bc:	1991c83a 	sub	r8,r3,r6
    c5c0:	1021883a 	mov	r16,r2
    c5c4:	3825883a 	mov	r18,r7
    c5c8:	003f2706 	br	c268 <__alt_data_end+0xff00c268>
    c5cc:	24d0b03a 	or	r8,r4,r19
    c5d0:	40001b1e 	bne	r8,zero,c640 <__adddf3+0x548>
    c5d4:	0005883a 	mov	r2,zero
    c5d8:	0007883a 	mov	r3,zero
    c5dc:	0021883a 	mov	r16,zero
    c5e0:	003f4d06 	br	c318 <__alt_data_end+0xff00c318>
    c5e4:	008007c4 	movi	r2,31
    c5e8:	11003c16 	blt	r2,r4,c6dc <__adddf3+0x5e4>
    c5ec:	00800804 	movi	r2,32
    c5f0:	1105c83a 	sub	r2,r2,r4
    c5f4:	488e983a 	sll	r7,r9,r2
    c5f8:	310ad83a 	srl	r5,r6,r4
    c5fc:	3084983a 	sll	r2,r6,r2
    c600:	4912d83a 	srl	r9,r9,r4
    c604:	394ab03a 	or	r5,r7,r5
    c608:	1004c03a 	cmpne	r2,r2,zero
    c60c:	288ab03a 	or	r5,r5,r2
    c610:	003f5306 	br	c360 <__alt_data_end+0xff00c360>
    c614:	4448b03a 	or	r4,r8,r17
    c618:	20003e26 	beq	r4,zero,c714 <__adddf3+0x61c>
    c61c:	00c6303a 	nor	r3,zero,r3
    c620:	18003a1e 	bne	r3,zero,c70c <__adddf3+0x614>
    c624:	3463c83a 	sub	r17,r6,r17
    c628:	4a07c83a 	sub	r3,r9,r8
    c62c:	344d803a 	cmpltu	r6,r6,r17
    c630:	1991c83a 	sub	r8,r3,r6
    c634:	1021883a 	mov	r16,r2
    c638:	3825883a 	mov	r18,r7
    c63c:	003f0a06 	br	c268 <__alt_data_end+0xff00c268>
    c640:	2023883a 	mov	r17,r4
    c644:	003f0d06 	br	c27c <__alt_data_end+0xff00c27c>
    c648:	0081ffc4 	movi	r2,2047
    c64c:	80bf3f1e 	bne	r16,r2,c34c <__alt_data_end+0xff00c34c>
    c650:	003ec806 	br	c174 <__alt_data_end+0xff00c174>
    c654:	0005883a 	mov	r2,zero
    c658:	003fb106 	br	c520 <__alt_data_end+0xff00c520>
    c65c:	0007883a 	mov	r3,zero
    c660:	003fbc06 	br	c554 <__alt_data_end+0xff00c554>
    c664:	4444b03a 	or	r2,r8,r17
    c668:	8000871e 	bne	r16,zero,c888 <__adddf3+0x790>
    c66c:	1000ba26 	beq	r2,zero,c958 <__adddf3+0x860>
    c670:	4984b03a 	or	r2,r9,r6
    c674:	103ebf26 	beq	r2,zero,c174 <__alt_data_end+0xff00c174>
    c678:	8985883a 	add	r2,r17,r6
    c67c:	4247883a 	add	r3,r8,r9
    c680:	1451803a 	cmpltu	r8,r2,r17
    c684:	40d1883a 	add	r8,r8,r3
    c688:	40c0202c 	andhi	r3,r8,128
    c68c:	1023883a 	mov	r17,r2
    c690:	183f1a26 	beq	r3,zero,c2fc <__alt_data_end+0xff00c2fc>
    c694:	00bfe034 	movhi	r2,65408
    c698:	10bfffc4 	addi	r2,r2,-1
    c69c:	2021883a 	mov	r16,r4
    c6a0:	4090703a 	and	r8,r8,r2
    c6a4:	003eb306 	br	c174 <__alt_data_end+0xff00c174>
    c6a8:	4444b03a 	or	r2,r8,r17
    c6ac:	8000291e 	bne	r16,zero,c754 <__adddf3+0x65c>
    c6b0:	10004b1e 	bne	r2,zero,c7e0 <__adddf3+0x6e8>
    c6b4:	4990b03a 	or	r8,r9,r6
    c6b8:	40008b26 	beq	r8,zero,c8e8 <__adddf3+0x7f0>
    c6bc:	4811883a 	mov	r8,r9
    c6c0:	3023883a 	mov	r17,r6
    c6c4:	3825883a 	mov	r18,r7
    c6c8:	003eaa06 	br	c174 <__alt_data_end+0xff00c174>
    c6cc:	1021883a 	mov	r16,r2
    c6d0:	0011883a 	mov	r8,zero
    c6d4:	0005883a 	mov	r2,zero
    c6d8:	003f0f06 	br	c318 <__alt_data_end+0xff00c318>
    c6dc:	217ff804 	addi	r5,r4,-32
    c6e0:	00800804 	movi	r2,32
    c6e4:	494ad83a 	srl	r5,r9,r5
    c6e8:	20807d26 	beq	r4,r2,c8e0 <__adddf3+0x7e8>
    c6ec:	00801004 	movi	r2,64
    c6f0:	1109c83a 	sub	r4,r2,r4
    c6f4:	4912983a 	sll	r9,r9,r4
    c6f8:	498cb03a 	or	r6,r9,r6
    c6fc:	300cc03a 	cmpne	r6,r6,zero
    c700:	298ab03a 	or	r5,r5,r6
    c704:	0013883a 	mov	r9,zero
    c708:	003f1506 	br	c360 <__alt_data_end+0xff00c360>
    c70c:	0101ffc4 	movi	r4,2047
    c710:	113f9a1e 	bne	r2,r4,c57c <__alt_data_end+0xff00c57c>
    c714:	4811883a 	mov	r8,r9
    c718:	3023883a 	mov	r17,r6
    c71c:	1021883a 	mov	r16,r2
    c720:	3825883a 	mov	r18,r7
    c724:	003e9306 	br	c174 <__alt_data_end+0xff00c174>
    c728:	8000161e 	bne	r16,zero,c784 <__adddf3+0x68c>
    c72c:	444ab03a 	or	r5,r8,r17
    c730:	28005126 	beq	r5,zero,c878 <__adddf3+0x780>
    c734:	0108303a 	nor	r4,zero,r4
    c738:	20004d1e 	bne	r4,zero,c870 <__adddf3+0x778>
    c73c:	89a3883a 	add	r17,r17,r6
    c740:	4253883a 	add	r9,r8,r9
    c744:	898d803a 	cmpltu	r6,r17,r6
    c748:	3251883a 	add	r8,r6,r9
    c74c:	1021883a 	mov	r16,r2
    c750:	003f0806 	br	c374 <__alt_data_end+0xff00c374>
    c754:	1000301e 	bne	r2,zero,c818 <__adddf3+0x720>
    c758:	4984b03a 	or	r2,r9,r6
    c75c:	10007126 	beq	r2,zero,c924 <__adddf3+0x82c>
    c760:	4811883a 	mov	r8,r9
    c764:	3023883a 	mov	r17,r6
    c768:	3825883a 	mov	r18,r7
    c76c:	0401ffc4 	movi	r16,2047
    c770:	003e8006 	br	c174 <__alt_data_end+0xff00c174>
    c774:	4462b03a 	or	r17,r8,r17
    c778:	8822c03a 	cmpne	r17,r17,zero
    c77c:	0007883a 	mov	r3,zero
    c780:	003f8b06 	br	c5b0 <__alt_data_end+0xff00c5b0>
    c784:	0141ffc4 	movi	r5,2047
    c788:	11403b26 	beq	r2,r5,c878 <__adddf3+0x780>
    c78c:	0109c83a 	sub	r4,zero,r4
    c790:	42002034 	orhi	r8,r8,128
    c794:	01400e04 	movi	r5,56
    c798:	29006716 	blt	r5,r4,c938 <__adddf3+0x840>
    c79c:	014007c4 	movi	r5,31
    c7a0:	29007016 	blt	r5,r4,c964 <__adddf3+0x86c>
    c7a4:	01400804 	movi	r5,32
    c7a8:	290bc83a 	sub	r5,r5,r4
    c7ac:	4154983a 	sll	r10,r8,r5
    c7b0:	890ed83a 	srl	r7,r17,r4
    c7b4:	894a983a 	sll	r5,r17,r5
    c7b8:	4108d83a 	srl	r4,r8,r4
    c7bc:	51e2b03a 	or	r17,r10,r7
    c7c0:	280ac03a 	cmpne	r5,r5,zero
    c7c4:	8962b03a 	or	r17,r17,r5
    c7c8:	89a3883a 	add	r17,r17,r6
    c7cc:	2253883a 	add	r9,r4,r9
    c7d0:	898d803a 	cmpltu	r6,r17,r6
    c7d4:	3251883a 	add	r8,r6,r9
    c7d8:	1021883a 	mov	r16,r2
    c7dc:	003ee506 	br	c374 <__alt_data_end+0xff00c374>
    c7e0:	4984b03a 	or	r2,r9,r6
    c7e4:	103e6326 	beq	r2,zero,c174 <__alt_data_end+0xff00c174>
    c7e8:	8987c83a 	sub	r3,r17,r6
    c7ec:	88c9803a 	cmpltu	r4,r17,r3
    c7f0:	4245c83a 	sub	r2,r8,r9
    c7f4:	1105c83a 	sub	r2,r2,r4
    c7f8:	1100202c 	andhi	r4,r2,128
    c7fc:	203ebb26 	beq	r4,zero,c2ec <__alt_data_end+0xff00c2ec>
    c800:	3463c83a 	sub	r17,r6,r17
    c804:	4a07c83a 	sub	r3,r9,r8
    c808:	344d803a 	cmpltu	r6,r6,r17
    c80c:	1991c83a 	sub	r8,r3,r6
    c810:	3825883a 	mov	r18,r7
    c814:	003e5706 	br	c174 <__alt_data_end+0xff00c174>
    c818:	4984b03a 	or	r2,r9,r6
    c81c:	10002e26 	beq	r2,zero,c8d8 <__adddf3+0x7e0>
    c820:	4004d0fa 	srli	r2,r8,3
    c824:	8822d0fa 	srli	r17,r17,3
    c828:	4010977a 	slli	r8,r8,29
    c82c:	10c0022c 	andhi	r3,r2,8
    c830:	4462b03a 	or	r17,r8,r17
    c834:	18000826 	beq	r3,zero,c858 <__adddf3+0x760>
    c838:	4808d0fa 	srli	r4,r9,3
    c83c:	20c0022c 	andhi	r3,r4,8
    c840:	1800051e 	bne	r3,zero,c858 <__adddf3+0x760>
    c844:	300cd0fa 	srli	r6,r6,3
    c848:	4806977a 	slli	r3,r9,29
    c84c:	2005883a 	mov	r2,r4
    c850:	3825883a 	mov	r18,r7
    c854:	19a2b03a 	or	r17,r3,r6
    c858:	8810d77a 	srli	r8,r17,29
    c85c:	100490fa 	slli	r2,r2,3
    c860:	882290fa 	slli	r17,r17,3
    c864:	0401ffc4 	movi	r16,2047
    c868:	4090b03a 	or	r8,r8,r2
    c86c:	003e4106 	br	c174 <__alt_data_end+0xff00c174>
    c870:	0141ffc4 	movi	r5,2047
    c874:	117fc71e 	bne	r2,r5,c794 <__alt_data_end+0xff00c794>
    c878:	4811883a 	mov	r8,r9
    c87c:	3023883a 	mov	r17,r6
    c880:	1021883a 	mov	r16,r2
    c884:	003e3b06 	br	c174 <__alt_data_end+0xff00c174>
    c888:	10002f26 	beq	r2,zero,c948 <__adddf3+0x850>
    c88c:	4984b03a 	or	r2,r9,r6
    c890:	10001126 	beq	r2,zero,c8d8 <__adddf3+0x7e0>
    c894:	4004d0fa 	srli	r2,r8,3
    c898:	8822d0fa 	srli	r17,r17,3
    c89c:	4010977a 	slli	r8,r8,29
    c8a0:	10c0022c 	andhi	r3,r2,8
    c8a4:	4462b03a 	or	r17,r8,r17
    c8a8:	183feb26 	beq	r3,zero,c858 <__alt_data_end+0xff00c858>
    c8ac:	4808d0fa 	srli	r4,r9,3
    c8b0:	20c0022c 	andhi	r3,r4,8
    c8b4:	183fe81e 	bne	r3,zero,c858 <__alt_data_end+0xff00c858>
    c8b8:	300cd0fa 	srli	r6,r6,3
    c8bc:	4806977a 	slli	r3,r9,29
    c8c0:	2005883a 	mov	r2,r4
    c8c4:	19a2b03a 	or	r17,r3,r6
    c8c8:	003fe306 	br	c858 <__alt_data_end+0xff00c858>
    c8cc:	0011883a 	mov	r8,zero
    c8d0:	0005883a 	mov	r2,zero
    c8d4:	003e3f06 	br	c1d4 <__alt_data_end+0xff00c1d4>
    c8d8:	0401ffc4 	movi	r16,2047
    c8dc:	003e2506 	br	c174 <__alt_data_end+0xff00c174>
    c8e0:	0013883a 	mov	r9,zero
    c8e4:	003f8406 	br	c6f8 <__alt_data_end+0xff00c6f8>
    c8e8:	0005883a 	mov	r2,zero
    c8ec:	0007883a 	mov	r3,zero
    c8f0:	003e8906 	br	c318 <__alt_data_end+0xff00c318>
    c8f4:	197ff804 	addi	r5,r3,-32
    c8f8:	01000804 	movi	r4,32
    c8fc:	414ad83a 	srl	r5,r8,r5
    c900:	19002426 	beq	r3,r4,c994 <__adddf3+0x89c>
    c904:	01001004 	movi	r4,64
    c908:	20c7c83a 	sub	r3,r4,r3
    c90c:	40c6983a 	sll	r3,r8,r3
    c910:	1c46b03a 	or	r3,r3,r17
    c914:	1806c03a 	cmpne	r3,r3,zero
    c918:	28e2b03a 	or	r17,r5,r3
    c91c:	0007883a 	mov	r3,zero
    c920:	003f2306 	br	c5b0 <__alt_data_end+0xff00c5b0>
    c924:	0007883a 	mov	r3,zero
    c928:	5811883a 	mov	r8,r11
    c92c:	00bfffc4 	movi	r2,-1
    c930:	0401ffc4 	movi	r16,2047
    c934:	003e7806 	br	c318 <__alt_data_end+0xff00c318>
    c938:	4462b03a 	or	r17,r8,r17
    c93c:	8822c03a 	cmpne	r17,r17,zero
    c940:	0009883a 	mov	r4,zero
    c944:	003fa006 	br	c7c8 <__alt_data_end+0xff00c7c8>
    c948:	4811883a 	mov	r8,r9
    c94c:	3023883a 	mov	r17,r6
    c950:	0401ffc4 	movi	r16,2047
    c954:	003e0706 	br	c174 <__alt_data_end+0xff00c174>
    c958:	4811883a 	mov	r8,r9
    c95c:	3023883a 	mov	r17,r6
    c960:	003e0406 	br	c174 <__alt_data_end+0xff00c174>
    c964:	21fff804 	addi	r7,r4,-32
    c968:	01400804 	movi	r5,32
    c96c:	41ced83a 	srl	r7,r8,r7
    c970:	21400a26 	beq	r4,r5,c99c <__adddf3+0x8a4>
    c974:	01401004 	movi	r5,64
    c978:	2909c83a 	sub	r4,r5,r4
    c97c:	4108983a 	sll	r4,r8,r4
    c980:	2448b03a 	or	r4,r4,r17
    c984:	2008c03a 	cmpne	r4,r4,zero
    c988:	3922b03a 	or	r17,r7,r4
    c98c:	0009883a 	mov	r4,zero
    c990:	003f8d06 	br	c7c8 <__alt_data_end+0xff00c7c8>
    c994:	0007883a 	mov	r3,zero
    c998:	003fdd06 	br	c910 <__alt_data_end+0xff00c910>
    c99c:	0009883a 	mov	r4,zero
    c9a0:	003ff706 	br	c980 <__alt_data_end+0xff00c980>

0000c9a4 <__divdf3>:
    c9a4:	defff204 	addi	sp,sp,-56
    c9a8:	dd400915 	stw	r21,36(sp)
    c9ac:	282ad53a 	srli	r21,r5,20
    c9b0:	dd000815 	stw	r20,32(sp)
    c9b4:	2828d7fa 	srli	r20,r5,31
    c9b8:	dc000415 	stw	r16,16(sp)
    c9bc:	04000434 	movhi	r16,16
    c9c0:	df000c15 	stw	fp,48(sp)
    c9c4:	843fffc4 	addi	r16,r16,-1
    c9c8:	dfc00d15 	stw	ra,52(sp)
    c9cc:	ddc00b15 	stw	r23,44(sp)
    c9d0:	dd800a15 	stw	r22,40(sp)
    c9d4:	dcc00715 	stw	r19,28(sp)
    c9d8:	dc800615 	stw	r18,24(sp)
    c9dc:	dc400515 	stw	r17,20(sp)
    c9e0:	ad41ffcc 	andi	r21,r21,2047
    c9e4:	2c20703a 	and	r16,r5,r16
    c9e8:	a7003fcc 	andi	fp,r20,255
    c9ec:	a8006126 	beq	r21,zero,cb74 <__divdf3+0x1d0>
    c9f0:	0081ffc4 	movi	r2,2047
    c9f4:	2025883a 	mov	r18,r4
    c9f8:	a8803726 	beq	r21,r2,cad8 <__divdf3+0x134>
    c9fc:	80800434 	orhi	r2,r16,16
    ca00:	100490fa 	slli	r2,r2,3
    ca04:	2020d77a 	srli	r16,r4,29
    ca08:	202490fa 	slli	r18,r4,3
    ca0c:	ad7f0044 	addi	r21,r21,-1023
    ca10:	80a0b03a 	or	r16,r16,r2
    ca14:	0027883a 	mov	r19,zero
    ca18:	0013883a 	mov	r9,zero
    ca1c:	3804d53a 	srli	r2,r7,20
    ca20:	382cd7fa 	srli	r22,r7,31
    ca24:	04400434 	movhi	r17,16
    ca28:	8c7fffc4 	addi	r17,r17,-1
    ca2c:	1081ffcc 	andi	r2,r2,2047
    ca30:	3011883a 	mov	r8,r6
    ca34:	3c62703a 	and	r17,r7,r17
    ca38:	b5c03fcc 	andi	r23,r22,255
    ca3c:	10006c26 	beq	r2,zero,cbf0 <__divdf3+0x24c>
    ca40:	00c1ffc4 	movi	r3,2047
    ca44:	10c06426 	beq	r2,r3,cbd8 <__divdf3+0x234>
    ca48:	88c00434 	orhi	r3,r17,16
    ca4c:	180690fa 	slli	r3,r3,3
    ca50:	3022d77a 	srli	r17,r6,29
    ca54:	301090fa 	slli	r8,r6,3
    ca58:	10bf0044 	addi	r2,r2,-1023
    ca5c:	88e2b03a 	or	r17,r17,r3
    ca60:	000f883a 	mov	r7,zero
    ca64:	a58cf03a 	xor	r6,r20,r22
    ca68:	3cc8b03a 	or	r4,r7,r19
    ca6c:	a8abc83a 	sub	r21,r21,r2
    ca70:	008003c4 	movi	r2,15
    ca74:	3007883a 	mov	r3,r6
    ca78:	34c03fcc 	andi	r19,r6,255
    ca7c:	11009036 	bltu	r2,r4,ccc0 <__divdf3+0x31c>
    ca80:	200890ba 	slli	r4,r4,2
    ca84:	00800074 	movhi	r2,1
    ca88:	10b2a604 	addi	r2,r2,-13672
    ca8c:	2089883a 	add	r4,r4,r2
    ca90:	20800017 	ldw	r2,0(r4)
    ca94:	1000683a 	jmp	r2
    ca98:	0000ccc0 	call	ccc <init_LCD+0x388>
    ca9c:	0000cb10 	cmplti	zero,zero,812
    caa0:	0000ccb0 	cmpltui	zero,zero,818
    caa4:	0000cb04 	movi	zero,812
    caa8:	0000ccb0 	cmpltui	zero,zero,818
    caac:	0000cc84 	movi	zero,818
    cab0:	0000ccb0 	cmpltui	zero,zero,818
    cab4:	0000cb04 	movi	zero,812
    cab8:	0000cb10 	cmplti	zero,zero,812
    cabc:	0000cb10 	cmplti	zero,zero,812
    cac0:	0000cc84 	movi	zero,818
    cac4:	0000cb04 	movi	zero,812
    cac8:	0000caf4 	movhi	zero,811
    cacc:	0000caf4 	movhi	zero,811
    cad0:	0000caf4 	movhi	zero,811
    cad4:	0000cfa4 	muli	zero,zero,830
    cad8:	2404b03a 	or	r2,r4,r16
    cadc:	1000661e 	bne	r2,zero,cc78 <__divdf3+0x2d4>
    cae0:	04c00204 	movi	r19,8
    cae4:	0021883a 	mov	r16,zero
    cae8:	0025883a 	mov	r18,zero
    caec:	02400084 	movi	r9,2
    caf0:	003fca06 	br	ca1c <__alt_data_end+0xff00ca1c>
    caf4:	8023883a 	mov	r17,r16
    caf8:	9011883a 	mov	r8,r18
    cafc:	e02f883a 	mov	r23,fp
    cb00:	480f883a 	mov	r7,r9
    cb04:	00800084 	movi	r2,2
    cb08:	3881311e 	bne	r7,r2,cfd0 <__divdf3+0x62c>
    cb0c:	b827883a 	mov	r19,r23
    cb10:	98c0004c 	andi	r3,r19,1
    cb14:	0081ffc4 	movi	r2,2047
    cb18:	000b883a 	mov	r5,zero
    cb1c:	0025883a 	mov	r18,zero
    cb20:	1004953a 	slli	r2,r2,20
    cb24:	18c03fcc 	andi	r3,r3,255
    cb28:	04400434 	movhi	r17,16
    cb2c:	8c7fffc4 	addi	r17,r17,-1
    cb30:	180697fa 	slli	r3,r3,31
    cb34:	2c4a703a 	and	r5,r5,r17
    cb38:	288ab03a 	or	r5,r5,r2
    cb3c:	28c6b03a 	or	r3,r5,r3
    cb40:	9005883a 	mov	r2,r18
    cb44:	dfc00d17 	ldw	ra,52(sp)
    cb48:	df000c17 	ldw	fp,48(sp)
    cb4c:	ddc00b17 	ldw	r23,44(sp)
    cb50:	dd800a17 	ldw	r22,40(sp)
    cb54:	dd400917 	ldw	r21,36(sp)
    cb58:	dd000817 	ldw	r20,32(sp)
    cb5c:	dcc00717 	ldw	r19,28(sp)
    cb60:	dc800617 	ldw	r18,24(sp)
    cb64:	dc400517 	ldw	r17,20(sp)
    cb68:	dc000417 	ldw	r16,16(sp)
    cb6c:	dec00e04 	addi	sp,sp,56
    cb70:	f800283a 	ret
    cb74:	2404b03a 	or	r2,r4,r16
    cb78:	2027883a 	mov	r19,r4
    cb7c:	10003926 	beq	r2,zero,cc64 <__divdf3+0x2c0>
    cb80:	80012e26 	beq	r16,zero,d03c <__divdf3+0x698>
    cb84:	8009883a 	mov	r4,r16
    cb88:	d9800315 	stw	r6,12(sp)
    cb8c:	d9c00215 	stw	r7,8(sp)
    cb90:	000e6fc0 	call	e6fc <__clzsi2>
    cb94:	d9800317 	ldw	r6,12(sp)
    cb98:	d9c00217 	ldw	r7,8(sp)
    cb9c:	113ffd44 	addi	r4,r2,-11
    cba0:	00c00704 	movi	r3,28
    cba4:	19012116 	blt	r3,r4,d02c <__divdf3+0x688>
    cba8:	00c00744 	movi	r3,29
    cbac:	147ffe04 	addi	r17,r2,-8
    cbb0:	1907c83a 	sub	r3,r3,r4
    cbb4:	8460983a 	sll	r16,r16,r17
    cbb8:	98c6d83a 	srl	r3,r19,r3
    cbbc:	9c64983a 	sll	r18,r19,r17
    cbc0:	1c20b03a 	or	r16,r3,r16
    cbc4:	1080fcc4 	addi	r2,r2,1011
    cbc8:	00abc83a 	sub	r21,zero,r2
    cbcc:	0027883a 	mov	r19,zero
    cbd0:	0013883a 	mov	r9,zero
    cbd4:	003f9106 	br	ca1c <__alt_data_end+0xff00ca1c>
    cbd8:	3446b03a 	or	r3,r6,r17
    cbdc:	18001f1e 	bne	r3,zero,cc5c <__divdf3+0x2b8>
    cbe0:	0023883a 	mov	r17,zero
    cbe4:	0011883a 	mov	r8,zero
    cbe8:	01c00084 	movi	r7,2
    cbec:	003f9d06 	br	ca64 <__alt_data_end+0xff00ca64>
    cbf0:	3446b03a 	or	r3,r6,r17
    cbf4:	18001526 	beq	r3,zero,cc4c <__divdf3+0x2a8>
    cbf8:	88011b26 	beq	r17,zero,d068 <__divdf3+0x6c4>
    cbfc:	8809883a 	mov	r4,r17
    cc00:	d9800315 	stw	r6,12(sp)
    cc04:	da400115 	stw	r9,4(sp)
    cc08:	000e6fc0 	call	e6fc <__clzsi2>
    cc0c:	d9800317 	ldw	r6,12(sp)
    cc10:	da400117 	ldw	r9,4(sp)
    cc14:	113ffd44 	addi	r4,r2,-11
    cc18:	00c00704 	movi	r3,28
    cc1c:	19010e16 	blt	r3,r4,d058 <__divdf3+0x6b4>
    cc20:	00c00744 	movi	r3,29
    cc24:	123ffe04 	addi	r8,r2,-8
    cc28:	1907c83a 	sub	r3,r3,r4
    cc2c:	8a22983a 	sll	r17,r17,r8
    cc30:	30c6d83a 	srl	r3,r6,r3
    cc34:	3210983a 	sll	r8,r6,r8
    cc38:	1c62b03a 	or	r17,r3,r17
    cc3c:	1080fcc4 	addi	r2,r2,1011
    cc40:	0085c83a 	sub	r2,zero,r2
    cc44:	000f883a 	mov	r7,zero
    cc48:	003f8606 	br	ca64 <__alt_data_end+0xff00ca64>
    cc4c:	0023883a 	mov	r17,zero
    cc50:	0011883a 	mov	r8,zero
    cc54:	01c00044 	movi	r7,1
    cc58:	003f8206 	br	ca64 <__alt_data_end+0xff00ca64>
    cc5c:	01c000c4 	movi	r7,3
    cc60:	003f8006 	br	ca64 <__alt_data_end+0xff00ca64>
    cc64:	04c00104 	movi	r19,4
    cc68:	0021883a 	mov	r16,zero
    cc6c:	0025883a 	mov	r18,zero
    cc70:	02400044 	movi	r9,1
    cc74:	003f6906 	br	ca1c <__alt_data_end+0xff00ca1c>
    cc78:	04c00304 	movi	r19,12
    cc7c:	024000c4 	movi	r9,3
    cc80:	003f6606 	br	ca1c <__alt_data_end+0xff00ca1c>
    cc84:	01400434 	movhi	r5,16
    cc88:	0007883a 	mov	r3,zero
    cc8c:	297fffc4 	addi	r5,r5,-1
    cc90:	04bfffc4 	movi	r18,-1
    cc94:	0081ffc4 	movi	r2,2047
    cc98:	003fa106 	br	cb20 <__alt_data_end+0xff00cb20>
    cc9c:	00c00044 	movi	r3,1
    cca0:	1887c83a 	sub	r3,r3,r2
    cca4:	01000e04 	movi	r4,56
    cca8:	20c1210e 	bge	r4,r3,d130 <__divdf3+0x78c>
    ccac:	98c0004c 	andi	r3,r19,1
    ccb0:	0005883a 	mov	r2,zero
    ccb4:	000b883a 	mov	r5,zero
    ccb8:	0025883a 	mov	r18,zero
    ccbc:	003f9806 	br	cb20 <__alt_data_end+0xff00cb20>
    ccc0:	8c00fd36 	bltu	r17,r16,d0b8 <__divdf3+0x714>
    ccc4:	8440fb26 	beq	r16,r17,d0b4 <__divdf3+0x710>
    ccc8:	8007883a 	mov	r3,r16
    cccc:	ad7fffc4 	addi	r21,r21,-1
    ccd0:	0021883a 	mov	r16,zero
    ccd4:	4004d63a 	srli	r2,r8,24
    ccd8:	8822923a 	slli	r17,r17,8
    ccdc:	1809883a 	mov	r4,r3
    cce0:	402c923a 	slli	r22,r8,8
    cce4:	88b8b03a 	or	fp,r17,r2
    cce8:	e028d43a 	srli	r20,fp,16
    ccec:	d8c00015 	stw	r3,0(sp)
    ccf0:	e5ffffcc 	andi	r23,fp,65535
    ccf4:	a00b883a 	mov	r5,r20
    ccf8:	000c03c0 	call	c03c <__udivsi3>
    ccfc:	d8c00017 	ldw	r3,0(sp)
    cd00:	a00b883a 	mov	r5,r20
    cd04:	d8800315 	stw	r2,12(sp)
    cd08:	1809883a 	mov	r4,r3
    cd0c:	000c0a00 	call	c0a0 <__umodsi3>
    cd10:	d9800317 	ldw	r6,12(sp)
    cd14:	1006943a 	slli	r3,r2,16
    cd18:	9004d43a 	srli	r2,r18,16
    cd1c:	b9a3383a 	mul	r17,r23,r6
    cd20:	10c4b03a 	or	r2,r2,r3
    cd24:	1440062e 	bgeu	r2,r17,cd40 <__divdf3+0x39c>
    cd28:	1705883a 	add	r2,r2,fp
    cd2c:	30ffffc4 	addi	r3,r6,-1
    cd30:	1700ee36 	bltu	r2,fp,d0ec <__divdf3+0x748>
    cd34:	1440ed2e 	bgeu	r2,r17,d0ec <__divdf3+0x748>
    cd38:	31bfff84 	addi	r6,r6,-2
    cd3c:	1705883a 	add	r2,r2,fp
    cd40:	1463c83a 	sub	r17,r2,r17
    cd44:	a00b883a 	mov	r5,r20
    cd48:	8809883a 	mov	r4,r17
    cd4c:	d9800315 	stw	r6,12(sp)
    cd50:	000c03c0 	call	c03c <__udivsi3>
    cd54:	a00b883a 	mov	r5,r20
    cd58:	8809883a 	mov	r4,r17
    cd5c:	d8800215 	stw	r2,8(sp)
    cd60:	000c0a00 	call	c0a0 <__umodsi3>
    cd64:	d9c00217 	ldw	r7,8(sp)
    cd68:	1004943a 	slli	r2,r2,16
    cd6c:	94bfffcc 	andi	r18,r18,65535
    cd70:	b9d1383a 	mul	r8,r23,r7
    cd74:	90a4b03a 	or	r18,r18,r2
    cd78:	d9800317 	ldw	r6,12(sp)
    cd7c:	9200062e 	bgeu	r18,r8,cd98 <__divdf3+0x3f4>
    cd80:	9725883a 	add	r18,r18,fp
    cd84:	38bfffc4 	addi	r2,r7,-1
    cd88:	9700d636 	bltu	r18,fp,d0e4 <__divdf3+0x740>
    cd8c:	9200d52e 	bgeu	r18,r8,d0e4 <__divdf3+0x740>
    cd90:	39ffff84 	addi	r7,r7,-2
    cd94:	9725883a 	add	r18,r18,fp
    cd98:	3004943a 	slli	r2,r6,16
    cd9c:	b012d43a 	srli	r9,r22,16
    cda0:	b1bfffcc 	andi	r6,r22,65535
    cda4:	11e2b03a 	or	r17,r2,r7
    cda8:	8806d43a 	srli	r3,r17,16
    cdac:	893fffcc 	andi	r4,r17,65535
    cdb0:	218b383a 	mul	r5,r4,r6
    cdb4:	30c5383a 	mul	r2,r6,r3
    cdb8:	2249383a 	mul	r4,r4,r9
    cdbc:	280ed43a 	srli	r7,r5,16
    cdc0:	9225c83a 	sub	r18,r18,r8
    cdc4:	2089883a 	add	r4,r4,r2
    cdc8:	3909883a 	add	r4,r7,r4
    cdcc:	1a47383a 	mul	r3,r3,r9
    cdd0:	2080022e 	bgeu	r4,r2,cddc <__divdf3+0x438>
    cdd4:	00800074 	movhi	r2,1
    cdd8:	1887883a 	add	r3,r3,r2
    cddc:	2004d43a 	srli	r2,r4,16
    cde0:	2008943a 	slli	r4,r4,16
    cde4:	297fffcc 	andi	r5,r5,65535
    cde8:	10c7883a 	add	r3,r2,r3
    cdec:	2149883a 	add	r4,r4,r5
    cdf0:	90c0a536 	bltu	r18,r3,d088 <__divdf3+0x6e4>
    cdf4:	90c0bf26 	beq	r18,r3,d0f4 <__divdf3+0x750>
    cdf8:	90c7c83a 	sub	r3,r18,r3
    cdfc:	810fc83a 	sub	r7,r16,r4
    ce00:	81e5803a 	cmpltu	r18,r16,r7
    ce04:	1ca5c83a 	sub	r18,r3,r18
    ce08:	e480c126 	beq	fp,r18,d110 <__divdf3+0x76c>
    ce0c:	a00b883a 	mov	r5,r20
    ce10:	9009883a 	mov	r4,r18
    ce14:	d9800315 	stw	r6,12(sp)
    ce18:	d9c00215 	stw	r7,8(sp)
    ce1c:	da400115 	stw	r9,4(sp)
    ce20:	000c03c0 	call	c03c <__udivsi3>
    ce24:	a00b883a 	mov	r5,r20
    ce28:	9009883a 	mov	r4,r18
    ce2c:	d8800015 	stw	r2,0(sp)
    ce30:	000c0a00 	call	c0a0 <__umodsi3>
    ce34:	d9c00217 	ldw	r7,8(sp)
    ce38:	da000017 	ldw	r8,0(sp)
    ce3c:	1006943a 	slli	r3,r2,16
    ce40:	3804d43a 	srli	r2,r7,16
    ce44:	ba21383a 	mul	r16,r23,r8
    ce48:	d9800317 	ldw	r6,12(sp)
    ce4c:	10c4b03a 	or	r2,r2,r3
    ce50:	da400117 	ldw	r9,4(sp)
    ce54:	1400062e 	bgeu	r2,r16,ce70 <__divdf3+0x4cc>
    ce58:	1705883a 	add	r2,r2,fp
    ce5c:	40ffffc4 	addi	r3,r8,-1
    ce60:	1700ad36 	bltu	r2,fp,d118 <__divdf3+0x774>
    ce64:	1400ac2e 	bgeu	r2,r16,d118 <__divdf3+0x774>
    ce68:	423fff84 	addi	r8,r8,-2
    ce6c:	1705883a 	add	r2,r2,fp
    ce70:	1421c83a 	sub	r16,r2,r16
    ce74:	a00b883a 	mov	r5,r20
    ce78:	8009883a 	mov	r4,r16
    ce7c:	d9800315 	stw	r6,12(sp)
    ce80:	d9c00215 	stw	r7,8(sp)
    ce84:	da000015 	stw	r8,0(sp)
    ce88:	da400115 	stw	r9,4(sp)
    ce8c:	000c03c0 	call	c03c <__udivsi3>
    ce90:	8009883a 	mov	r4,r16
    ce94:	a00b883a 	mov	r5,r20
    ce98:	1025883a 	mov	r18,r2
    ce9c:	000c0a00 	call	c0a0 <__umodsi3>
    cea0:	d9c00217 	ldw	r7,8(sp)
    cea4:	1004943a 	slli	r2,r2,16
    cea8:	bcaf383a 	mul	r23,r23,r18
    ceac:	393fffcc 	andi	r4,r7,65535
    ceb0:	2088b03a 	or	r4,r4,r2
    ceb4:	d9800317 	ldw	r6,12(sp)
    ceb8:	da000017 	ldw	r8,0(sp)
    cebc:	da400117 	ldw	r9,4(sp)
    cec0:	25c0062e 	bgeu	r4,r23,cedc <__divdf3+0x538>
    cec4:	2709883a 	add	r4,r4,fp
    cec8:	90bfffc4 	addi	r2,r18,-1
    cecc:	27009436 	bltu	r4,fp,d120 <__divdf3+0x77c>
    ced0:	25c0932e 	bgeu	r4,r23,d120 <__divdf3+0x77c>
    ced4:	94bfff84 	addi	r18,r18,-2
    ced8:	2709883a 	add	r4,r4,fp
    cedc:	4004943a 	slli	r2,r8,16
    cee0:	25efc83a 	sub	r23,r4,r23
    cee4:	1490b03a 	or	r8,r2,r18
    cee8:	4008d43a 	srli	r4,r8,16
    ceec:	40ffffcc 	andi	r3,r8,65535
    cef0:	30c5383a 	mul	r2,r6,r3
    cef4:	1a47383a 	mul	r3,r3,r9
    cef8:	310d383a 	mul	r6,r6,r4
    cefc:	100ad43a 	srli	r5,r2,16
    cf00:	4913383a 	mul	r9,r9,r4
    cf04:	1987883a 	add	r3,r3,r6
    cf08:	28c7883a 	add	r3,r5,r3
    cf0c:	1980022e 	bgeu	r3,r6,cf18 <__divdf3+0x574>
    cf10:	01000074 	movhi	r4,1
    cf14:	4913883a 	add	r9,r9,r4
    cf18:	1808d43a 	srli	r4,r3,16
    cf1c:	1806943a 	slli	r3,r3,16
    cf20:	10bfffcc 	andi	r2,r2,65535
    cf24:	2253883a 	add	r9,r4,r9
    cf28:	1887883a 	add	r3,r3,r2
    cf2c:	ba403836 	bltu	r23,r9,d010 <__divdf3+0x66c>
    cf30:	ba403626 	beq	r23,r9,d00c <__divdf3+0x668>
    cf34:	42000054 	ori	r8,r8,1
    cf38:	a880ffc4 	addi	r2,r21,1023
    cf3c:	00bf570e 	bge	zero,r2,cc9c <__alt_data_end+0xff00cc9c>
    cf40:	40c001cc 	andi	r3,r8,7
    cf44:	18000726 	beq	r3,zero,cf64 <__divdf3+0x5c0>
    cf48:	40c003cc 	andi	r3,r8,15
    cf4c:	01000104 	movi	r4,4
    cf50:	19000426 	beq	r3,r4,cf64 <__divdf3+0x5c0>
    cf54:	4107883a 	add	r3,r8,r4
    cf58:	1a11803a 	cmpltu	r8,r3,r8
    cf5c:	8a23883a 	add	r17,r17,r8
    cf60:	1811883a 	mov	r8,r3
    cf64:	88c0402c 	andhi	r3,r17,256
    cf68:	18000426 	beq	r3,zero,cf7c <__divdf3+0x5d8>
    cf6c:	00ffc034 	movhi	r3,65280
    cf70:	18ffffc4 	addi	r3,r3,-1
    cf74:	a8810004 	addi	r2,r21,1024
    cf78:	88e2703a 	and	r17,r17,r3
    cf7c:	00c1ff84 	movi	r3,2046
    cf80:	18bee316 	blt	r3,r2,cb10 <__alt_data_end+0xff00cb10>
    cf84:	8824977a 	slli	r18,r17,29
    cf88:	4010d0fa 	srli	r8,r8,3
    cf8c:	8822927a 	slli	r17,r17,9
    cf90:	1081ffcc 	andi	r2,r2,2047
    cf94:	9224b03a 	or	r18,r18,r8
    cf98:	880ad33a 	srli	r5,r17,12
    cf9c:	98c0004c 	andi	r3,r19,1
    cfa0:	003edf06 	br	cb20 <__alt_data_end+0xff00cb20>
    cfa4:	8080022c 	andhi	r2,r16,8
    cfa8:	10001226 	beq	r2,zero,cff4 <__divdf3+0x650>
    cfac:	8880022c 	andhi	r2,r17,8
    cfb0:	1000101e 	bne	r2,zero,cff4 <__divdf3+0x650>
    cfb4:	00800434 	movhi	r2,16
    cfb8:	89400234 	orhi	r5,r17,8
    cfbc:	10bfffc4 	addi	r2,r2,-1
    cfc0:	b007883a 	mov	r3,r22
    cfc4:	288a703a 	and	r5,r5,r2
    cfc8:	4025883a 	mov	r18,r8
    cfcc:	003f3106 	br	cc94 <__alt_data_end+0xff00cc94>
    cfd0:	008000c4 	movi	r2,3
    cfd4:	3880a626 	beq	r7,r2,d270 <__divdf3+0x8cc>
    cfd8:	00800044 	movi	r2,1
    cfdc:	3880521e 	bne	r7,r2,d128 <__divdf3+0x784>
    cfe0:	b807883a 	mov	r3,r23
    cfe4:	0005883a 	mov	r2,zero
    cfe8:	000b883a 	mov	r5,zero
    cfec:	0025883a 	mov	r18,zero
    cff0:	003ecb06 	br	cb20 <__alt_data_end+0xff00cb20>
    cff4:	00800434 	movhi	r2,16
    cff8:	81400234 	orhi	r5,r16,8
    cffc:	10bfffc4 	addi	r2,r2,-1
    d000:	a007883a 	mov	r3,r20
    d004:	288a703a 	and	r5,r5,r2
    d008:	003f2206 	br	cc94 <__alt_data_end+0xff00cc94>
    d00c:	183fca26 	beq	r3,zero,cf38 <__alt_data_end+0xff00cf38>
    d010:	e5ef883a 	add	r23,fp,r23
    d014:	40bfffc4 	addi	r2,r8,-1
    d018:	bf00392e 	bgeu	r23,fp,d100 <__divdf3+0x75c>
    d01c:	1011883a 	mov	r8,r2
    d020:	ba7fc41e 	bne	r23,r9,cf34 <__alt_data_end+0xff00cf34>
    d024:	b0ffc31e 	bne	r22,r3,cf34 <__alt_data_end+0xff00cf34>
    d028:	003fc306 	br	cf38 <__alt_data_end+0xff00cf38>
    d02c:	143ff604 	addi	r16,r2,-40
    d030:	9c20983a 	sll	r16,r19,r16
    d034:	0025883a 	mov	r18,zero
    d038:	003ee206 	br	cbc4 <__alt_data_end+0xff00cbc4>
    d03c:	d9800315 	stw	r6,12(sp)
    d040:	d9c00215 	stw	r7,8(sp)
    d044:	000e6fc0 	call	e6fc <__clzsi2>
    d048:	10800804 	addi	r2,r2,32
    d04c:	d9c00217 	ldw	r7,8(sp)
    d050:	d9800317 	ldw	r6,12(sp)
    d054:	003ed106 	br	cb9c <__alt_data_end+0xff00cb9c>
    d058:	147ff604 	addi	r17,r2,-40
    d05c:	3462983a 	sll	r17,r6,r17
    d060:	0011883a 	mov	r8,zero
    d064:	003ef506 	br	cc3c <__alt_data_end+0xff00cc3c>
    d068:	3009883a 	mov	r4,r6
    d06c:	d9800315 	stw	r6,12(sp)
    d070:	da400115 	stw	r9,4(sp)
    d074:	000e6fc0 	call	e6fc <__clzsi2>
    d078:	10800804 	addi	r2,r2,32
    d07c:	da400117 	ldw	r9,4(sp)
    d080:	d9800317 	ldw	r6,12(sp)
    d084:	003ee306 	br	cc14 <__alt_data_end+0xff00cc14>
    d088:	85a1883a 	add	r16,r16,r22
    d08c:	8585803a 	cmpltu	r2,r16,r22
    d090:	1705883a 	add	r2,r2,fp
    d094:	14a5883a 	add	r18,r2,r18
    d098:	88bfffc4 	addi	r2,r17,-1
    d09c:	e4800c2e 	bgeu	fp,r18,d0d0 <__divdf3+0x72c>
    d0a0:	90c03e36 	bltu	r18,r3,d19c <__divdf3+0x7f8>
    d0a4:	1c806926 	beq	r3,r18,d24c <__divdf3+0x8a8>
    d0a8:	90c7c83a 	sub	r3,r18,r3
    d0ac:	1023883a 	mov	r17,r2
    d0b0:	003f5206 	br	cdfc <__alt_data_end+0xff00cdfc>
    d0b4:	923f0436 	bltu	r18,r8,ccc8 <__alt_data_end+0xff00ccc8>
    d0b8:	800897fa 	slli	r4,r16,31
    d0bc:	9004d07a 	srli	r2,r18,1
    d0c0:	8006d07a 	srli	r3,r16,1
    d0c4:	902097fa 	slli	r16,r18,31
    d0c8:	20a4b03a 	or	r18,r4,r2
    d0cc:	003f0106 	br	ccd4 <__alt_data_end+0xff00ccd4>
    d0d0:	e4bff51e 	bne	fp,r18,d0a8 <__alt_data_end+0xff00d0a8>
    d0d4:	85bff22e 	bgeu	r16,r22,d0a0 <__alt_data_end+0xff00d0a0>
    d0d8:	e0c7c83a 	sub	r3,fp,r3
    d0dc:	1023883a 	mov	r17,r2
    d0e0:	003f4606 	br	cdfc <__alt_data_end+0xff00cdfc>
    d0e4:	100f883a 	mov	r7,r2
    d0e8:	003f2b06 	br	cd98 <__alt_data_end+0xff00cd98>
    d0ec:	180d883a 	mov	r6,r3
    d0f0:	003f1306 	br	cd40 <__alt_data_end+0xff00cd40>
    d0f4:	813fe436 	bltu	r16,r4,d088 <__alt_data_end+0xff00d088>
    d0f8:	0007883a 	mov	r3,zero
    d0fc:	003f3f06 	br	cdfc <__alt_data_end+0xff00cdfc>
    d100:	ba402c36 	bltu	r23,r9,d1b4 <__divdf3+0x810>
    d104:	4dc05426 	beq	r9,r23,d258 <__divdf3+0x8b4>
    d108:	1011883a 	mov	r8,r2
    d10c:	003f8906 	br	cf34 <__alt_data_end+0xff00cf34>
    d110:	023fffc4 	movi	r8,-1
    d114:	003f8806 	br	cf38 <__alt_data_end+0xff00cf38>
    d118:	1811883a 	mov	r8,r3
    d11c:	003f5406 	br	ce70 <__alt_data_end+0xff00ce70>
    d120:	1025883a 	mov	r18,r2
    d124:	003f6d06 	br	cedc <__alt_data_end+0xff00cedc>
    d128:	b827883a 	mov	r19,r23
    d12c:	003f8206 	br	cf38 <__alt_data_end+0xff00cf38>
    d130:	010007c4 	movi	r4,31
    d134:	20c02616 	blt	r4,r3,d1d0 <__divdf3+0x82c>
    d138:	00800804 	movi	r2,32
    d13c:	10c5c83a 	sub	r2,r2,r3
    d140:	888a983a 	sll	r5,r17,r2
    d144:	40c8d83a 	srl	r4,r8,r3
    d148:	4084983a 	sll	r2,r8,r2
    d14c:	88e2d83a 	srl	r17,r17,r3
    d150:	2906b03a 	or	r3,r5,r4
    d154:	1004c03a 	cmpne	r2,r2,zero
    d158:	1886b03a 	or	r3,r3,r2
    d15c:	188001cc 	andi	r2,r3,7
    d160:	10000726 	beq	r2,zero,d180 <__divdf3+0x7dc>
    d164:	188003cc 	andi	r2,r3,15
    d168:	01000104 	movi	r4,4
    d16c:	11000426 	beq	r2,r4,d180 <__divdf3+0x7dc>
    d170:	1805883a 	mov	r2,r3
    d174:	10c00104 	addi	r3,r2,4
    d178:	1885803a 	cmpltu	r2,r3,r2
    d17c:	88a3883a 	add	r17,r17,r2
    d180:	8880202c 	andhi	r2,r17,128
    d184:	10002726 	beq	r2,zero,d224 <__divdf3+0x880>
    d188:	98c0004c 	andi	r3,r19,1
    d18c:	00800044 	movi	r2,1
    d190:	000b883a 	mov	r5,zero
    d194:	0025883a 	mov	r18,zero
    d198:	003e6106 	br	cb20 <__alt_data_end+0xff00cb20>
    d19c:	85a1883a 	add	r16,r16,r22
    d1a0:	8585803a 	cmpltu	r2,r16,r22
    d1a4:	1705883a 	add	r2,r2,fp
    d1a8:	14a5883a 	add	r18,r2,r18
    d1ac:	8c7fff84 	addi	r17,r17,-2
    d1b0:	003f1106 	br	cdf8 <__alt_data_end+0xff00cdf8>
    d1b4:	b589883a 	add	r4,r22,r22
    d1b8:	25ad803a 	cmpltu	r22,r4,r22
    d1bc:	b739883a 	add	fp,r22,fp
    d1c0:	40bfff84 	addi	r2,r8,-2
    d1c4:	bf2f883a 	add	r23,r23,fp
    d1c8:	202d883a 	mov	r22,r4
    d1cc:	003f9306 	br	d01c <__alt_data_end+0xff00d01c>
    d1d0:	013ff844 	movi	r4,-31
    d1d4:	2085c83a 	sub	r2,r4,r2
    d1d8:	8888d83a 	srl	r4,r17,r2
    d1dc:	00800804 	movi	r2,32
    d1e0:	18802126 	beq	r3,r2,d268 <__divdf3+0x8c4>
    d1e4:	00801004 	movi	r2,64
    d1e8:	10c5c83a 	sub	r2,r2,r3
    d1ec:	8884983a 	sll	r2,r17,r2
    d1f0:	1204b03a 	or	r2,r2,r8
    d1f4:	1004c03a 	cmpne	r2,r2,zero
    d1f8:	2084b03a 	or	r2,r4,r2
    d1fc:	144001cc 	andi	r17,r2,7
    d200:	88000d1e 	bne	r17,zero,d238 <__divdf3+0x894>
    d204:	000b883a 	mov	r5,zero
    d208:	1024d0fa 	srli	r18,r2,3
    d20c:	98c0004c 	andi	r3,r19,1
    d210:	0005883a 	mov	r2,zero
    d214:	9464b03a 	or	r18,r18,r17
    d218:	003e4106 	br	cb20 <__alt_data_end+0xff00cb20>
    d21c:	1007883a 	mov	r3,r2
    d220:	0023883a 	mov	r17,zero
    d224:	880a927a 	slli	r5,r17,9
    d228:	1805883a 	mov	r2,r3
    d22c:	8822977a 	slli	r17,r17,29
    d230:	280ad33a 	srli	r5,r5,12
    d234:	003ff406 	br	d208 <__alt_data_end+0xff00d208>
    d238:	10c003cc 	andi	r3,r2,15
    d23c:	01000104 	movi	r4,4
    d240:	193ff626 	beq	r3,r4,d21c <__alt_data_end+0xff00d21c>
    d244:	0023883a 	mov	r17,zero
    d248:	003fca06 	br	d174 <__alt_data_end+0xff00d174>
    d24c:	813fd336 	bltu	r16,r4,d19c <__alt_data_end+0xff00d19c>
    d250:	1023883a 	mov	r17,r2
    d254:	003fa806 	br	d0f8 <__alt_data_end+0xff00d0f8>
    d258:	b0ffd636 	bltu	r22,r3,d1b4 <__alt_data_end+0xff00d1b4>
    d25c:	1011883a 	mov	r8,r2
    d260:	b0ff341e 	bne	r22,r3,cf34 <__alt_data_end+0xff00cf34>
    d264:	003f3406 	br	cf38 <__alt_data_end+0xff00cf38>
    d268:	0005883a 	mov	r2,zero
    d26c:	003fe006 	br	d1f0 <__alt_data_end+0xff00d1f0>
    d270:	00800434 	movhi	r2,16
    d274:	89400234 	orhi	r5,r17,8
    d278:	10bfffc4 	addi	r2,r2,-1
    d27c:	b807883a 	mov	r3,r23
    d280:	288a703a 	and	r5,r5,r2
    d284:	4025883a 	mov	r18,r8
    d288:	003e8206 	br	cc94 <__alt_data_end+0xff00cc94>

0000d28c <__eqdf2>:
    d28c:	2804d53a 	srli	r2,r5,20
    d290:	3806d53a 	srli	r3,r7,20
    d294:	02000434 	movhi	r8,16
    d298:	423fffc4 	addi	r8,r8,-1
    d29c:	1081ffcc 	andi	r2,r2,2047
    d2a0:	0281ffc4 	movi	r10,2047
    d2a4:	2a12703a 	and	r9,r5,r8
    d2a8:	18c1ffcc 	andi	r3,r3,2047
    d2ac:	3a10703a 	and	r8,r7,r8
    d2b0:	280ad7fa 	srli	r5,r5,31
    d2b4:	380ed7fa 	srli	r7,r7,31
    d2b8:	12801026 	beq	r2,r10,d2fc <__eqdf2+0x70>
    d2bc:	0281ffc4 	movi	r10,2047
    d2c0:	1a800a26 	beq	r3,r10,d2ec <__eqdf2+0x60>
    d2c4:	10c00226 	beq	r2,r3,d2d0 <__eqdf2+0x44>
    d2c8:	00800044 	movi	r2,1
    d2cc:	f800283a 	ret
    d2d0:	4a3ffd1e 	bne	r9,r8,d2c8 <__alt_data_end+0xff00d2c8>
    d2d4:	21bffc1e 	bne	r4,r6,d2c8 <__alt_data_end+0xff00d2c8>
    d2d8:	29c00c26 	beq	r5,r7,d30c <__eqdf2+0x80>
    d2dc:	103ffa1e 	bne	r2,zero,d2c8 <__alt_data_end+0xff00d2c8>
    d2e0:	2244b03a 	or	r2,r4,r9
    d2e4:	1004c03a 	cmpne	r2,r2,zero
    d2e8:	f800283a 	ret
    d2ec:	3214b03a 	or	r10,r6,r8
    d2f0:	503ff426 	beq	r10,zero,d2c4 <__alt_data_end+0xff00d2c4>
    d2f4:	00800044 	movi	r2,1
    d2f8:	f800283a 	ret
    d2fc:	2254b03a 	or	r10,r4,r9
    d300:	503fee26 	beq	r10,zero,d2bc <__alt_data_end+0xff00d2bc>
    d304:	00800044 	movi	r2,1
    d308:	f800283a 	ret
    d30c:	0005883a 	mov	r2,zero
    d310:	f800283a 	ret

0000d314 <__gedf2>:
    d314:	2804d53a 	srli	r2,r5,20
    d318:	3806d53a 	srli	r3,r7,20
    d31c:	02000434 	movhi	r8,16
    d320:	423fffc4 	addi	r8,r8,-1
    d324:	1081ffcc 	andi	r2,r2,2047
    d328:	0241ffc4 	movi	r9,2047
    d32c:	2a14703a 	and	r10,r5,r8
    d330:	18c1ffcc 	andi	r3,r3,2047
    d334:	3a10703a 	and	r8,r7,r8
    d338:	280ad7fa 	srli	r5,r5,31
    d33c:	380ed7fa 	srli	r7,r7,31
    d340:	12401d26 	beq	r2,r9,d3b8 <__gedf2+0xa4>
    d344:	0241ffc4 	movi	r9,2047
    d348:	1a401226 	beq	r3,r9,d394 <__gedf2+0x80>
    d34c:	1000081e 	bne	r2,zero,d370 <__gedf2+0x5c>
    d350:	2296b03a 	or	r11,r4,r10
    d354:	5813003a 	cmpeq	r9,r11,zero
    d358:	1800091e 	bne	r3,zero,d380 <__gedf2+0x6c>
    d35c:	3218b03a 	or	r12,r6,r8
    d360:	6000071e 	bne	r12,zero,d380 <__gedf2+0x6c>
    d364:	0005883a 	mov	r2,zero
    d368:	5800101e 	bne	r11,zero,d3ac <__gedf2+0x98>
    d36c:	f800283a 	ret
    d370:	18000c1e 	bne	r3,zero,d3a4 <__gedf2+0x90>
    d374:	3212b03a 	or	r9,r6,r8
    d378:	48000c26 	beq	r9,zero,d3ac <__gedf2+0x98>
    d37c:	0013883a 	mov	r9,zero
    d380:	39c03fcc 	andi	r7,r7,255
    d384:	48000826 	beq	r9,zero,d3a8 <__gedf2+0x94>
    d388:	38000926 	beq	r7,zero,d3b0 <__gedf2+0x9c>
    d38c:	00800044 	movi	r2,1
    d390:	f800283a 	ret
    d394:	3212b03a 	or	r9,r6,r8
    d398:	483fec26 	beq	r9,zero,d34c <__alt_data_end+0xff00d34c>
    d39c:	00bfff84 	movi	r2,-2
    d3a0:	f800283a 	ret
    d3a4:	39c03fcc 	andi	r7,r7,255
    d3a8:	29c00626 	beq	r5,r7,d3c4 <__gedf2+0xb0>
    d3ac:	283ff726 	beq	r5,zero,d38c <__alt_data_end+0xff00d38c>
    d3b0:	00bfffc4 	movi	r2,-1
    d3b4:	f800283a 	ret
    d3b8:	2292b03a 	or	r9,r4,r10
    d3bc:	483fe126 	beq	r9,zero,d344 <__alt_data_end+0xff00d344>
    d3c0:	003ff606 	br	d39c <__alt_data_end+0xff00d39c>
    d3c4:	18bff916 	blt	r3,r2,d3ac <__alt_data_end+0xff00d3ac>
    d3c8:	10c00316 	blt	r2,r3,d3d8 <__gedf2+0xc4>
    d3cc:	42bff736 	bltu	r8,r10,d3ac <__alt_data_end+0xff00d3ac>
    d3d0:	52000326 	beq	r10,r8,d3e0 <__gedf2+0xcc>
    d3d4:	5200042e 	bgeu	r10,r8,d3e8 <__gedf2+0xd4>
    d3d8:	283fec1e 	bne	r5,zero,d38c <__alt_data_end+0xff00d38c>
    d3dc:	003ff406 	br	d3b0 <__alt_data_end+0xff00d3b0>
    d3e0:	313ff236 	bltu	r6,r4,d3ac <__alt_data_end+0xff00d3ac>
    d3e4:	21bffc36 	bltu	r4,r6,d3d8 <__alt_data_end+0xff00d3d8>
    d3e8:	0005883a 	mov	r2,zero
    d3ec:	f800283a 	ret

0000d3f0 <__ledf2>:
    d3f0:	2804d53a 	srli	r2,r5,20
    d3f4:	3810d53a 	srli	r8,r7,20
    d3f8:	00c00434 	movhi	r3,16
    d3fc:	18ffffc4 	addi	r3,r3,-1
    d400:	1081ffcc 	andi	r2,r2,2047
    d404:	0241ffc4 	movi	r9,2047
    d408:	28d4703a 	and	r10,r5,r3
    d40c:	4201ffcc 	andi	r8,r8,2047
    d410:	38c6703a 	and	r3,r7,r3
    d414:	280ad7fa 	srli	r5,r5,31
    d418:	380ed7fa 	srli	r7,r7,31
    d41c:	12401f26 	beq	r2,r9,d49c <__ledf2+0xac>
    d420:	0241ffc4 	movi	r9,2047
    d424:	42401426 	beq	r8,r9,d478 <__ledf2+0x88>
    d428:	1000091e 	bne	r2,zero,d450 <__ledf2+0x60>
    d42c:	2296b03a 	or	r11,r4,r10
    d430:	5813003a 	cmpeq	r9,r11,zero
    d434:	29403fcc 	andi	r5,r5,255
    d438:	40000a1e 	bne	r8,zero,d464 <__ledf2+0x74>
    d43c:	30d8b03a 	or	r12,r6,r3
    d440:	6000081e 	bne	r12,zero,d464 <__ledf2+0x74>
    d444:	0005883a 	mov	r2,zero
    d448:	5800111e 	bne	r11,zero,d490 <__ledf2+0xa0>
    d44c:	f800283a 	ret
    d450:	29403fcc 	andi	r5,r5,255
    d454:	40000c1e 	bne	r8,zero,d488 <__ledf2+0x98>
    d458:	30d2b03a 	or	r9,r6,r3
    d45c:	48000c26 	beq	r9,zero,d490 <__ledf2+0xa0>
    d460:	0013883a 	mov	r9,zero
    d464:	39c03fcc 	andi	r7,r7,255
    d468:	48000826 	beq	r9,zero,d48c <__ledf2+0x9c>
    d46c:	38001126 	beq	r7,zero,d4b4 <__ledf2+0xc4>
    d470:	00800044 	movi	r2,1
    d474:	f800283a 	ret
    d478:	30d2b03a 	or	r9,r6,r3
    d47c:	483fea26 	beq	r9,zero,d428 <__alt_data_end+0xff00d428>
    d480:	00800084 	movi	r2,2
    d484:	f800283a 	ret
    d488:	39c03fcc 	andi	r7,r7,255
    d48c:	39400726 	beq	r7,r5,d4ac <__ledf2+0xbc>
    d490:	2800081e 	bne	r5,zero,d4b4 <__ledf2+0xc4>
    d494:	00800044 	movi	r2,1
    d498:	f800283a 	ret
    d49c:	2292b03a 	or	r9,r4,r10
    d4a0:	483fdf26 	beq	r9,zero,d420 <__alt_data_end+0xff00d420>
    d4a4:	00800084 	movi	r2,2
    d4a8:	f800283a 	ret
    d4ac:	4080030e 	bge	r8,r2,d4bc <__ledf2+0xcc>
    d4b0:	383fef26 	beq	r7,zero,d470 <__alt_data_end+0xff00d470>
    d4b4:	00bfffc4 	movi	r2,-1
    d4b8:	f800283a 	ret
    d4bc:	123feb16 	blt	r2,r8,d46c <__alt_data_end+0xff00d46c>
    d4c0:	1abff336 	bltu	r3,r10,d490 <__alt_data_end+0xff00d490>
    d4c4:	50c00326 	beq	r10,r3,d4d4 <__ledf2+0xe4>
    d4c8:	50c0042e 	bgeu	r10,r3,d4dc <__ledf2+0xec>
    d4cc:	283fe81e 	bne	r5,zero,d470 <__alt_data_end+0xff00d470>
    d4d0:	003ff806 	br	d4b4 <__alt_data_end+0xff00d4b4>
    d4d4:	313fee36 	bltu	r6,r4,d490 <__alt_data_end+0xff00d490>
    d4d8:	21bffc36 	bltu	r4,r6,d4cc <__alt_data_end+0xff00d4cc>
    d4dc:	0005883a 	mov	r2,zero
    d4e0:	f800283a 	ret

0000d4e4 <__muldf3>:
    d4e4:	defff304 	addi	sp,sp,-52
    d4e8:	2804d53a 	srli	r2,r5,20
    d4ec:	dd800915 	stw	r22,36(sp)
    d4f0:	282cd7fa 	srli	r22,r5,31
    d4f4:	dc000315 	stw	r16,12(sp)
    d4f8:	04000434 	movhi	r16,16
    d4fc:	dd400815 	stw	r21,32(sp)
    d500:	dc800515 	stw	r18,20(sp)
    d504:	843fffc4 	addi	r16,r16,-1
    d508:	dfc00c15 	stw	ra,48(sp)
    d50c:	df000b15 	stw	fp,44(sp)
    d510:	ddc00a15 	stw	r23,40(sp)
    d514:	dd000715 	stw	r20,28(sp)
    d518:	dcc00615 	stw	r19,24(sp)
    d51c:	dc400415 	stw	r17,16(sp)
    d520:	1481ffcc 	andi	r18,r2,2047
    d524:	2c20703a 	and	r16,r5,r16
    d528:	b02b883a 	mov	r21,r22
    d52c:	b2403fcc 	andi	r9,r22,255
    d530:	90006026 	beq	r18,zero,d6b4 <__muldf3+0x1d0>
    d534:	0081ffc4 	movi	r2,2047
    d538:	2029883a 	mov	r20,r4
    d53c:	90803626 	beq	r18,r2,d618 <__muldf3+0x134>
    d540:	80800434 	orhi	r2,r16,16
    d544:	100490fa 	slli	r2,r2,3
    d548:	2020d77a 	srli	r16,r4,29
    d54c:	202890fa 	slli	r20,r4,3
    d550:	94bf0044 	addi	r18,r18,-1023
    d554:	80a0b03a 	or	r16,r16,r2
    d558:	0027883a 	mov	r19,zero
    d55c:	0039883a 	mov	fp,zero
    d560:	3804d53a 	srli	r2,r7,20
    d564:	382ed7fa 	srli	r23,r7,31
    d568:	04400434 	movhi	r17,16
    d56c:	8c7fffc4 	addi	r17,r17,-1
    d570:	1081ffcc 	andi	r2,r2,2047
    d574:	3011883a 	mov	r8,r6
    d578:	3c62703a 	and	r17,r7,r17
    d57c:	ba803fcc 	andi	r10,r23,255
    d580:	10006d26 	beq	r2,zero,d738 <__muldf3+0x254>
    d584:	00c1ffc4 	movi	r3,2047
    d588:	10c06526 	beq	r2,r3,d720 <__muldf3+0x23c>
    d58c:	88c00434 	orhi	r3,r17,16
    d590:	180690fa 	slli	r3,r3,3
    d594:	3022d77a 	srli	r17,r6,29
    d598:	301090fa 	slli	r8,r6,3
    d59c:	10bf0044 	addi	r2,r2,-1023
    d5a0:	88e2b03a 	or	r17,r17,r3
    d5a4:	000b883a 	mov	r5,zero
    d5a8:	9085883a 	add	r2,r18,r2
    d5ac:	2cc8b03a 	or	r4,r5,r19
    d5b0:	00c003c4 	movi	r3,15
    d5b4:	bdacf03a 	xor	r22,r23,r22
    d5b8:	12c00044 	addi	r11,r2,1
    d5bc:	19009936 	bltu	r3,r4,d824 <__muldf3+0x340>
    d5c0:	200890ba 	slli	r4,r4,2
    d5c4:	00c00074 	movhi	r3,1
    d5c8:	18f57604 	addi	r3,r3,-10792
    d5cc:	20c9883a 	add	r4,r4,r3
    d5d0:	20c00017 	ldw	r3,0(r4)
    d5d4:	1800683a 	jmp	r3
    d5d8:	0000d824 	muli	zero,zero,864
    d5dc:	0000d638 	rdprs	zero,zero,856
    d5e0:	0000d638 	rdprs	zero,zero,856
    d5e4:	0000d634 	movhi	zero,856
    d5e8:	0000d800 	call	d80 <transfer_LCD_no_dma+0x28>
    d5ec:	0000d800 	call	d80 <transfer_LCD_no_dma+0x28>
    d5f0:	0000d7e8 	cmpgeui	zero,zero,863
    d5f4:	0000d634 	movhi	zero,856
    d5f8:	0000d800 	call	d80 <transfer_LCD_no_dma+0x28>
    d5fc:	0000d7e8 	cmpgeui	zero,zero,863
    d600:	0000d800 	call	d80 <transfer_LCD_no_dma+0x28>
    d604:	0000d634 	movhi	zero,856
    d608:	0000d810 	cmplti	zero,zero,864
    d60c:	0000d810 	cmplti	zero,zero,864
    d610:	0000d810 	cmplti	zero,zero,864
    d614:	0000da2c 	andhi	zero,zero,872
    d618:	2404b03a 	or	r2,r4,r16
    d61c:	10006f1e 	bne	r2,zero,d7dc <__muldf3+0x2f8>
    d620:	04c00204 	movi	r19,8
    d624:	0021883a 	mov	r16,zero
    d628:	0029883a 	mov	r20,zero
    d62c:	07000084 	movi	fp,2
    d630:	003fcb06 	br	d560 <__alt_data_end+0xff00d560>
    d634:	502d883a 	mov	r22,r10
    d638:	00800084 	movi	r2,2
    d63c:	28805726 	beq	r5,r2,d79c <__muldf3+0x2b8>
    d640:	008000c4 	movi	r2,3
    d644:	28816626 	beq	r5,r2,dbe0 <__muldf3+0x6fc>
    d648:	00800044 	movi	r2,1
    d64c:	2881411e 	bne	r5,r2,db54 <__muldf3+0x670>
    d650:	b02b883a 	mov	r21,r22
    d654:	0005883a 	mov	r2,zero
    d658:	000b883a 	mov	r5,zero
    d65c:	0029883a 	mov	r20,zero
    d660:	1004953a 	slli	r2,r2,20
    d664:	a8c03fcc 	andi	r3,r21,255
    d668:	04400434 	movhi	r17,16
    d66c:	8c7fffc4 	addi	r17,r17,-1
    d670:	180697fa 	slli	r3,r3,31
    d674:	2c4a703a 	and	r5,r5,r17
    d678:	288ab03a 	or	r5,r5,r2
    d67c:	28c6b03a 	or	r3,r5,r3
    d680:	a005883a 	mov	r2,r20
    d684:	dfc00c17 	ldw	ra,48(sp)
    d688:	df000b17 	ldw	fp,44(sp)
    d68c:	ddc00a17 	ldw	r23,40(sp)
    d690:	dd800917 	ldw	r22,36(sp)
    d694:	dd400817 	ldw	r21,32(sp)
    d698:	dd000717 	ldw	r20,28(sp)
    d69c:	dcc00617 	ldw	r19,24(sp)
    d6a0:	dc800517 	ldw	r18,20(sp)
    d6a4:	dc400417 	ldw	r17,16(sp)
    d6a8:	dc000317 	ldw	r16,12(sp)
    d6ac:	dec00d04 	addi	sp,sp,52
    d6b0:	f800283a 	ret
    d6b4:	2404b03a 	or	r2,r4,r16
    d6b8:	2027883a 	mov	r19,r4
    d6bc:	10004226 	beq	r2,zero,d7c8 <__muldf3+0x2e4>
    d6c0:	8000fc26 	beq	r16,zero,dab4 <__muldf3+0x5d0>
    d6c4:	8009883a 	mov	r4,r16
    d6c8:	d9800215 	stw	r6,8(sp)
    d6cc:	d9c00015 	stw	r7,0(sp)
    d6d0:	da400115 	stw	r9,4(sp)
    d6d4:	000e6fc0 	call	e6fc <__clzsi2>
    d6d8:	d9800217 	ldw	r6,8(sp)
    d6dc:	d9c00017 	ldw	r7,0(sp)
    d6e0:	da400117 	ldw	r9,4(sp)
    d6e4:	113ffd44 	addi	r4,r2,-11
    d6e8:	00c00704 	movi	r3,28
    d6ec:	1900ed16 	blt	r3,r4,daa4 <__muldf3+0x5c0>
    d6f0:	00c00744 	movi	r3,29
    d6f4:	147ffe04 	addi	r17,r2,-8
    d6f8:	1907c83a 	sub	r3,r3,r4
    d6fc:	8460983a 	sll	r16,r16,r17
    d700:	98c6d83a 	srl	r3,r19,r3
    d704:	9c68983a 	sll	r20,r19,r17
    d708:	1c20b03a 	or	r16,r3,r16
    d70c:	1080fcc4 	addi	r2,r2,1011
    d710:	00a5c83a 	sub	r18,zero,r2
    d714:	0027883a 	mov	r19,zero
    d718:	0039883a 	mov	fp,zero
    d71c:	003f9006 	br	d560 <__alt_data_end+0xff00d560>
    d720:	3446b03a 	or	r3,r6,r17
    d724:	1800261e 	bne	r3,zero,d7c0 <__muldf3+0x2dc>
    d728:	0023883a 	mov	r17,zero
    d72c:	0011883a 	mov	r8,zero
    d730:	01400084 	movi	r5,2
    d734:	003f9c06 	br	d5a8 <__alt_data_end+0xff00d5a8>
    d738:	3446b03a 	or	r3,r6,r17
    d73c:	18001c26 	beq	r3,zero,d7b0 <__muldf3+0x2cc>
    d740:	8800ce26 	beq	r17,zero,da7c <__muldf3+0x598>
    d744:	8809883a 	mov	r4,r17
    d748:	d9800215 	stw	r6,8(sp)
    d74c:	da400115 	stw	r9,4(sp)
    d750:	da800015 	stw	r10,0(sp)
    d754:	000e6fc0 	call	e6fc <__clzsi2>
    d758:	d9800217 	ldw	r6,8(sp)
    d75c:	da400117 	ldw	r9,4(sp)
    d760:	da800017 	ldw	r10,0(sp)
    d764:	113ffd44 	addi	r4,r2,-11
    d768:	00c00704 	movi	r3,28
    d76c:	1900bf16 	blt	r3,r4,da6c <__muldf3+0x588>
    d770:	00c00744 	movi	r3,29
    d774:	123ffe04 	addi	r8,r2,-8
    d778:	1907c83a 	sub	r3,r3,r4
    d77c:	8a22983a 	sll	r17,r17,r8
    d780:	30c6d83a 	srl	r3,r6,r3
    d784:	3210983a 	sll	r8,r6,r8
    d788:	1c62b03a 	or	r17,r3,r17
    d78c:	1080fcc4 	addi	r2,r2,1011
    d790:	0085c83a 	sub	r2,zero,r2
    d794:	000b883a 	mov	r5,zero
    d798:	003f8306 	br	d5a8 <__alt_data_end+0xff00d5a8>
    d79c:	b02b883a 	mov	r21,r22
    d7a0:	0081ffc4 	movi	r2,2047
    d7a4:	000b883a 	mov	r5,zero
    d7a8:	0029883a 	mov	r20,zero
    d7ac:	003fac06 	br	d660 <__alt_data_end+0xff00d660>
    d7b0:	0023883a 	mov	r17,zero
    d7b4:	0011883a 	mov	r8,zero
    d7b8:	01400044 	movi	r5,1
    d7bc:	003f7a06 	br	d5a8 <__alt_data_end+0xff00d5a8>
    d7c0:	014000c4 	movi	r5,3
    d7c4:	003f7806 	br	d5a8 <__alt_data_end+0xff00d5a8>
    d7c8:	04c00104 	movi	r19,4
    d7cc:	0021883a 	mov	r16,zero
    d7d0:	0029883a 	mov	r20,zero
    d7d4:	07000044 	movi	fp,1
    d7d8:	003f6106 	br	d560 <__alt_data_end+0xff00d560>
    d7dc:	04c00304 	movi	r19,12
    d7e0:	070000c4 	movi	fp,3
    d7e4:	003f5e06 	br	d560 <__alt_data_end+0xff00d560>
    d7e8:	01400434 	movhi	r5,16
    d7ec:	002b883a 	mov	r21,zero
    d7f0:	297fffc4 	addi	r5,r5,-1
    d7f4:	053fffc4 	movi	r20,-1
    d7f8:	0081ffc4 	movi	r2,2047
    d7fc:	003f9806 	br	d660 <__alt_data_end+0xff00d660>
    d800:	8023883a 	mov	r17,r16
    d804:	a011883a 	mov	r8,r20
    d808:	e00b883a 	mov	r5,fp
    d80c:	003f8a06 	br	d638 <__alt_data_end+0xff00d638>
    d810:	8023883a 	mov	r17,r16
    d814:	a011883a 	mov	r8,r20
    d818:	482d883a 	mov	r22,r9
    d81c:	e00b883a 	mov	r5,fp
    d820:	003f8506 	br	d638 <__alt_data_end+0xff00d638>
    d824:	a00ad43a 	srli	r5,r20,16
    d828:	401ad43a 	srli	r13,r8,16
    d82c:	a53fffcc 	andi	r20,r20,65535
    d830:	423fffcc 	andi	r8,r8,65535
    d834:	4519383a 	mul	r12,r8,r20
    d838:	4147383a 	mul	r3,r8,r5
    d83c:	6d09383a 	mul	r4,r13,r20
    d840:	600cd43a 	srli	r6,r12,16
    d844:	2b5d383a 	mul	r14,r5,r13
    d848:	20c9883a 	add	r4,r4,r3
    d84c:	310d883a 	add	r6,r6,r4
    d850:	30c0022e 	bgeu	r6,r3,d85c <__muldf3+0x378>
    d854:	00c00074 	movhi	r3,1
    d858:	70dd883a 	add	r14,r14,r3
    d85c:	8826d43a 	srli	r19,r17,16
    d860:	8bffffcc 	andi	r15,r17,65535
    d864:	7d23383a 	mul	r17,r15,r20
    d868:	7949383a 	mul	r4,r15,r5
    d86c:	9d29383a 	mul	r20,r19,r20
    d870:	8814d43a 	srli	r10,r17,16
    d874:	3012943a 	slli	r9,r6,16
    d878:	a129883a 	add	r20,r20,r4
    d87c:	633fffcc 	andi	r12,r12,65535
    d880:	5515883a 	add	r10,r10,r20
    d884:	3006d43a 	srli	r3,r6,16
    d888:	4b13883a 	add	r9,r9,r12
    d88c:	2ccb383a 	mul	r5,r5,r19
    d890:	5100022e 	bgeu	r10,r4,d89c <__muldf3+0x3b8>
    d894:	01000074 	movhi	r4,1
    d898:	290b883a 	add	r5,r5,r4
    d89c:	802ad43a 	srli	r21,r16,16
    d8a0:	843fffcc 	andi	r16,r16,65535
    d8a4:	440d383a 	mul	r6,r8,r16
    d8a8:	4565383a 	mul	r18,r8,r21
    d8ac:	8349383a 	mul	r4,r16,r13
    d8b0:	500e943a 	slli	r7,r10,16
    d8b4:	3010d43a 	srli	r8,r6,16
    d8b8:	5028d43a 	srli	r20,r10,16
    d8bc:	2489883a 	add	r4,r4,r18
    d8c0:	8abfffcc 	andi	r10,r17,65535
    d8c4:	3a95883a 	add	r10,r7,r10
    d8c8:	4119883a 	add	r12,r8,r4
    d8cc:	a169883a 	add	r20,r20,r5
    d8d0:	1a87883a 	add	r3,r3,r10
    d8d4:	6d5b383a 	mul	r13,r13,r21
    d8d8:	6480022e 	bgeu	r12,r18,d8e4 <__muldf3+0x400>
    d8dc:	01000074 	movhi	r4,1
    d8e0:	691b883a 	add	r13,r13,r4
    d8e4:	7c25383a 	mul	r18,r15,r16
    d8e8:	7d4b383a 	mul	r5,r15,r21
    d8ec:	84cf383a 	mul	r7,r16,r19
    d8f0:	901ed43a 	srli	r15,r18,16
    d8f4:	6008d43a 	srli	r4,r12,16
    d8f8:	6010943a 	slli	r8,r12,16
    d8fc:	394f883a 	add	r7,r7,r5
    d900:	333fffcc 	andi	r12,r6,65535
    d904:	79df883a 	add	r15,r15,r7
    d908:	235b883a 	add	r13,r4,r13
    d90c:	9d63383a 	mul	r17,r19,r21
    d910:	4309883a 	add	r4,r8,r12
    d914:	7940022e 	bgeu	r15,r5,d920 <__muldf3+0x43c>
    d918:	01400074 	movhi	r5,1
    d91c:	8963883a 	add	r17,r17,r5
    d920:	780a943a 	slli	r5,r15,16
    d924:	91bfffcc 	andi	r6,r18,65535
    d928:	70c7883a 	add	r3,r14,r3
    d92c:	298d883a 	add	r6,r5,r6
    d930:	1a8f803a 	cmpltu	r7,r3,r10
    d934:	350b883a 	add	r5,r6,r20
    d938:	20c7883a 	add	r3,r4,r3
    d93c:	3955883a 	add	r10,r7,r5
    d940:	1909803a 	cmpltu	r4,r3,r4
    d944:	6a91883a 	add	r8,r13,r10
    d948:	780cd43a 	srli	r6,r15,16
    d94c:	2219883a 	add	r12,r4,r8
    d950:	2d0b803a 	cmpltu	r5,r5,r20
    d954:	51cf803a 	cmpltu	r7,r10,r7
    d958:	29ceb03a 	or	r7,r5,r7
    d95c:	4351803a 	cmpltu	r8,r8,r13
    d960:	610b803a 	cmpltu	r5,r12,r4
    d964:	4148b03a 	or	r4,r8,r5
    d968:	398f883a 	add	r7,r7,r6
    d96c:	3909883a 	add	r4,r7,r4
    d970:	1810927a 	slli	r8,r3,9
    d974:	2449883a 	add	r4,r4,r17
    d978:	2008927a 	slli	r4,r4,9
    d97c:	6022d5fa 	srli	r17,r12,23
    d980:	1806d5fa 	srli	r3,r3,23
    d984:	4252b03a 	or	r9,r8,r9
    d988:	600a927a 	slli	r5,r12,9
    d98c:	4810c03a 	cmpne	r8,r9,zero
    d990:	2462b03a 	or	r17,r4,r17
    d994:	40c6b03a 	or	r3,r8,r3
    d998:	8900402c 	andhi	r4,r17,256
    d99c:	1950b03a 	or	r8,r3,r5
    d9a0:	20000726 	beq	r4,zero,d9c0 <__muldf3+0x4dc>
    d9a4:	4006d07a 	srli	r3,r8,1
    d9a8:	880497fa 	slli	r2,r17,31
    d9ac:	4200004c 	andi	r8,r8,1
    d9b0:	8822d07a 	srli	r17,r17,1
    d9b4:	1a10b03a 	or	r8,r3,r8
    d9b8:	1210b03a 	or	r8,r2,r8
    d9bc:	5805883a 	mov	r2,r11
    d9c0:	1140ffc4 	addi	r5,r2,1023
    d9c4:	0140440e 	bge	zero,r5,dad8 <__muldf3+0x5f4>
    d9c8:	40c001cc 	andi	r3,r8,7
    d9cc:	18000726 	beq	r3,zero,d9ec <__muldf3+0x508>
    d9d0:	40c003cc 	andi	r3,r8,15
    d9d4:	01000104 	movi	r4,4
    d9d8:	19000426 	beq	r3,r4,d9ec <__muldf3+0x508>
    d9dc:	4107883a 	add	r3,r8,r4
    d9e0:	1a11803a 	cmpltu	r8,r3,r8
    d9e4:	8a23883a 	add	r17,r17,r8
    d9e8:	1811883a 	mov	r8,r3
    d9ec:	88c0402c 	andhi	r3,r17,256
    d9f0:	18000426 	beq	r3,zero,da04 <__muldf3+0x520>
    d9f4:	11410004 	addi	r5,r2,1024
    d9f8:	00bfc034 	movhi	r2,65280
    d9fc:	10bfffc4 	addi	r2,r2,-1
    da00:	88a2703a 	and	r17,r17,r2
    da04:	0081ff84 	movi	r2,2046
    da08:	117f6416 	blt	r2,r5,d79c <__alt_data_end+0xff00d79c>
    da0c:	8828977a 	slli	r20,r17,29
    da10:	4010d0fa 	srli	r8,r8,3
    da14:	8822927a 	slli	r17,r17,9
    da18:	2881ffcc 	andi	r2,r5,2047
    da1c:	a228b03a 	or	r20,r20,r8
    da20:	880ad33a 	srli	r5,r17,12
    da24:	b02b883a 	mov	r21,r22
    da28:	003f0d06 	br	d660 <__alt_data_end+0xff00d660>
    da2c:	8080022c 	andhi	r2,r16,8
    da30:	10000926 	beq	r2,zero,da58 <__muldf3+0x574>
    da34:	8880022c 	andhi	r2,r17,8
    da38:	1000071e 	bne	r2,zero,da58 <__muldf3+0x574>
    da3c:	00800434 	movhi	r2,16
    da40:	89400234 	orhi	r5,r17,8
    da44:	10bfffc4 	addi	r2,r2,-1
    da48:	b82b883a 	mov	r21,r23
    da4c:	288a703a 	and	r5,r5,r2
    da50:	4029883a 	mov	r20,r8
    da54:	003f6806 	br	d7f8 <__alt_data_end+0xff00d7f8>
    da58:	00800434 	movhi	r2,16
    da5c:	81400234 	orhi	r5,r16,8
    da60:	10bfffc4 	addi	r2,r2,-1
    da64:	288a703a 	and	r5,r5,r2
    da68:	003f6306 	br	d7f8 <__alt_data_end+0xff00d7f8>
    da6c:	147ff604 	addi	r17,r2,-40
    da70:	3462983a 	sll	r17,r6,r17
    da74:	0011883a 	mov	r8,zero
    da78:	003f4406 	br	d78c <__alt_data_end+0xff00d78c>
    da7c:	3009883a 	mov	r4,r6
    da80:	d9800215 	stw	r6,8(sp)
    da84:	da400115 	stw	r9,4(sp)
    da88:	da800015 	stw	r10,0(sp)
    da8c:	000e6fc0 	call	e6fc <__clzsi2>
    da90:	10800804 	addi	r2,r2,32
    da94:	da800017 	ldw	r10,0(sp)
    da98:	da400117 	ldw	r9,4(sp)
    da9c:	d9800217 	ldw	r6,8(sp)
    daa0:	003f3006 	br	d764 <__alt_data_end+0xff00d764>
    daa4:	143ff604 	addi	r16,r2,-40
    daa8:	9c20983a 	sll	r16,r19,r16
    daac:	0029883a 	mov	r20,zero
    dab0:	003f1606 	br	d70c <__alt_data_end+0xff00d70c>
    dab4:	d9800215 	stw	r6,8(sp)
    dab8:	d9c00015 	stw	r7,0(sp)
    dabc:	da400115 	stw	r9,4(sp)
    dac0:	000e6fc0 	call	e6fc <__clzsi2>
    dac4:	10800804 	addi	r2,r2,32
    dac8:	da400117 	ldw	r9,4(sp)
    dacc:	d9c00017 	ldw	r7,0(sp)
    dad0:	d9800217 	ldw	r6,8(sp)
    dad4:	003f0306 	br	d6e4 <__alt_data_end+0xff00d6e4>
    dad8:	00c00044 	movi	r3,1
    dadc:	1947c83a 	sub	r3,r3,r5
    dae0:	00800e04 	movi	r2,56
    dae4:	10feda16 	blt	r2,r3,d650 <__alt_data_end+0xff00d650>
    dae8:	008007c4 	movi	r2,31
    daec:	10c01b16 	blt	r2,r3,db5c <__muldf3+0x678>
    daf0:	00800804 	movi	r2,32
    daf4:	10c5c83a 	sub	r2,r2,r3
    daf8:	888a983a 	sll	r5,r17,r2
    dafc:	40c8d83a 	srl	r4,r8,r3
    db00:	4084983a 	sll	r2,r8,r2
    db04:	88e2d83a 	srl	r17,r17,r3
    db08:	2906b03a 	or	r3,r5,r4
    db0c:	1004c03a 	cmpne	r2,r2,zero
    db10:	1886b03a 	or	r3,r3,r2
    db14:	188001cc 	andi	r2,r3,7
    db18:	10000726 	beq	r2,zero,db38 <__muldf3+0x654>
    db1c:	188003cc 	andi	r2,r3,15
    db20:	01000104 	movi	r4,4
    db24:	11000426 	beq	r2,r4,db38 <__muldf3+0x654>
    db28:	1805883a 	mov	r2,r3
    db2c:	10c00104 	addi	r3,r2,4
    db30:	1885803a 	cmpltu	r2,r3,r2
    db34:	88a3883a 	add	r17,r17,r2
    db38:	8880202c 	andhi	r2,r17,128
    db3c:	10001c26 	beq	r2,zero,dbb0 <__muldf3+0x6cc>
    db40:	b02b883a 	mov	r21,r22
    db44:	00800044 	movi	r2,1
    db48:	000b883a 	mov	r5,zero
    db4c:	0029883a 	mov	r20,zero
    db50:	003ec306 	br	d660 <__alt_data_end+0xff00d660>
    db54:	5805883a 	mov	r2,r11
    db58:	003f9906 	br	d9c0 <__alt_data_end+0xff00d9c0>
    db5c:	00bff844 	movi	r2,-31
    db60:	1145c83a 	sub	r2,r2,r5
    db64:	8888d83a 	srl	r4,r17,r2
    db68:	00800804 	movi	r2,32
    db6c:	18801a26 	beq	r3,r2,dbd8 <__muldf3+0x6f4>
    db70:	00801004 	movi	r2,64
    db74:	10c5c83a 	sub	r2,r2,r3
    db78:	8884983a 	sll	r2,r17,r2
    db7c:	1204b03a 	or	r2,r2,r8
    db80:	1004c03a 	cmpne	r2,r2,zero
    db84:	2084b03a 	or	r2,r4,r2
    db88:	144001cc 	andi	r17,r2,7
    db8c:	88000d1e 	bne	r17,zero,dbc4 <__muldf3+0x6e0>
    db90:	000b883a 	mov	r5,zero
    db94:	1028d0fa 	srli	r20,r2,3
    db98:	b02b883a 	mov	r21,r22
    db9c:	0005883a 	mov	r2,zero
    dba0:	a468b03a 	or	r20,r20,r17
    dba4:	003eae06 	br	d660 <__alt_data_end+0xff00d660>
    dba8:	1007883a 	mov	r3,r2
    dbac:	0023883a 	mov	r17,zero
    dbb0:	880a927a 	slli	r5,r17,9
    dbb4:	1805883a 	mov	r2,r3
    dbb8:	8822977a 	slli	r17,r17,29
    dbbc:	280ad33a 	srli	r5,r5,12
    dbc0:	003ff406 	br	db94 <__alt_data_end+0xff00db94>
    dbc4:	10c003cc 	andi	r3,r2,15
    dbc8:	01000104 	movi	r4,4
    dbcc:	193ff626 	beq	r3,r4,dba8 <__alt_data_end+0xff00dba8>
    dbd0:	0023883a 	mov	r17,zero
    dbd4:	003fd506 	br	db2c <__alt_data_end+0xff00db2c>
    dbd8:	0005883a 	mov	r2,zero
    dbdc:	003fe706 	br	db7c <__alt_data_end+0xff00db7c>
    dbe0:	00800434 	movhi	r2,16
    dbe4:	89400234 	orhi	r5,r17,8
    dbe8:	10bfffc4 	addi	r2,r2,-1
    dbec:	b02b883a 	mov	r21,r22
    dbf0:	288a703a 	and	r5,r5,r2
    dbf4:	4029883a 	mov	r20,r8
    dbf8:	003eff06 	br	d7f8 <__alt_data_end+0xff00d7f8>

0000dbfc <__subdf3>:
    dbfc:	02000434 	movhi	r8,16
    dc00:	423fffc4 	addi	r8,r8,-1
    dc04:	defffb04 	addi	sp,sp,-20
    dc08:	2a14703a 	and	r10,r5,r8
    dc0c:	3812d53a 	srli	r9,r7,20
    dc10:	3a10703a 	and	r8,r7,r8
    dc14:	2006d77a 	srli	r3,r4,29
    dc18:	3004d77a 	srli	r2,r6,29
    dc1c:	dc000015 	stw	r16,0(sp)
    dc20:	501490fa 	slli	r10,r10,3
    dc24:	2820d53a 	srli	r16,r5,20
    dc28:	401090fa 	slli	r8,r8,3
    dc2c:	dc800215 	stw	r18,8(sp)
    dc30:	dc400115 	stw	r17,4(sp)
    dc34:	dfc00415 	stw	ra,16(sp)
    dc38:	202290fa 	slli	r17,r4,3
    dc3c:	dcc00315 	stw	r19,12(sp)
    dc40:	4a41ffcc 	andi	r9,r9,2047
    dc44:	0101ffc4 	movi	r4,2047
    dc48:	2824d7fa 	srli	r18,r5,31
    dc4c:	8401ffcc 	andi	r16,r16,2047
    dc50:	50c6b03a 	or	r3,r10,r3
    dc54:	380ed7fa 	srli	r7,r7,31
    dc58:	408ab03a 	or	r5,r8,r2
    dc5c:	300c90fa 	slli	r6,r6,3
    dc60:	49009626 	beq	r9,r4,debc <__subdf3+0x2c0>
    dc64:	39c0005c 	xori	r7,r7,1
    dc68:	8245c83a 	sub	r2,r16,r9
    dc6c:	3c807426 	beq	r7,r18,de40 <__subdf3+0x244>
    dc70:	0080af0e 	bge	zero,r2,df30 <__subdf3+0x334>
    dc74:	48002a1e 	bne	r9,zero,dd20 <__subdf3+0x124>
    dc78:	2988b03a 	or	r4,r5,r6
    dc7c:	20009a1e 	bne	r4,zero,dee8 <__subdf3+0x2ec>
    dc80:	888001cc 	andi	r2,r17,7
    dc84:	10000726 	beq	r2,zero,dca4 <__subdf3+0xa8>
    dc88:	888003cc 	andi	r2,r17,15
    dc8c:	01000104 	movi	r4,4
    dc90:	11000426 	beq	r2,r4,dca4 <__subdf3+0xa8>
    dc94:	890b883a 	add	r5,r17,r4
    dc98:	2c63803a 	cmpltu	r17,r5,r17
    dc9c:	1c47883a 	add	r3,r3,r17
    dca0:	2823883a 	mov	r17,r5
    dca4:	1880202c 	andhi	r2,r3,128
    dca8:	10005926 	beq	r2,zero,de10 <__subdf3+0x214>
    dcac:	84000044 	addi	r16,r16,1
    dcb0:	0081ffc4 	movi	r2,2047
    dcb4:	8080be26 	beq	r16,r2,dfb0 <__subdf3+0x3b4>
    dcb8:	017fe034 	movhi	r5,65408
    dcbc:	297fffc4 	addi	r5,r5,-1
    dcc0:	1946703a 	and	r3,r3,r5
    dcc4:	1804977a 	slli	r2,r3,29
    dcc8:	1806927a 	slli	r3,r3,9
    dccc:	8822d0fa 	srli	r17,r17,3
    dcd0:	8401ffcc 	andi	r16,r16,2047
    dcd4:	180ad33a 	srli	r5,r3,12
    dcd8:	9100004c 	andi	r4,r18,1
    dcdc:	1444b03a 	or	r2,r2,r17
    dce0:	80c1ffcc 	andi	r3,r16,2047
    dce4:	1820953a 	slli	r16,r3,20
    dce8:	20c03fcc 	andi	r3,r4,255
    dcec:	180897fa 	slli	r4,r3,31
    dcf0:	00c00434 	movhi	r3,16
    dcf4:	18ffffc4 	addi	r3,r3,-1
    dcf8:	28c6703a 	and	r3,r5,r3
    dcfc:	1c06b03a 	or	r3,r3,r16
    dd00:	1906b03a 	or	r3,r3,r4
    dd04:	dfc00417 	ldw	ra,16(sp)
    dd08:	dcc00317 	ldw	r19,12(sp)
    dd0c:	dc800217 	ldw	r18,8(sp)
    dd10:	dc400117 	ldw	r17,4(sp)
    dd14:	dc000017 	ldw	r16,0(sp)
    dd18:	dec00504 	addi	sp,sp,20
    dd1c:	f800283a 	ret
    dd20:	0101ffc4 	movi	r4,2047
    dd24:	813fd626 	beq	r16,r4,dc80 <__alt_data_end+0xff00dc80>
    dd28:	29402034 	orhi	r5,r5,128
    dd2c:	01000e04 	movi	r4,56
    dd30:	2080a316 	blt	r4,r2,dfc0 <__subdf3+0x3c4>
    dd34:	010007c4 	movi	r4,31
    dd38:	2080c616 	blt	r4,r2,e054 <__subdf3+0x458>
    dd3c:	01000804 	movi	r4,32
    dd40:	2089c83a 	sub	r4,r4,r2
    dd44:	2910983a 	sll	r8,r5,r4
    dd48:	308ed83a 	srl	r7,r6,r2
    dd4c:	3108983a 	sll	r4,r6,r4
    dd50:	2884d83a 	srl	r2,r5,r2
    dd54:	41ccb03a 	or	r6,r8,r7
    dd58:	2008c03a 	cmpne	r4,r4,zero
    dd5c:	310cb03a 	or	r6,r6,r4
    dd60:	898dc83a 	sub	r6,r17,r6
    dd64:	89a3803a 	cmpltu	r17,r17,r6
    dd68:	1887c83a 	sub	r3,r3,r2
    dd6c:	1c47c83a 	sub	r3,r3,r17
    dd70:	3023883a 	mov	r17,r6
    dd74:	1880202c 	andhi	r2,r3,128
    dd78:	10002326 	beq	r2,zero,de08 <__subdf3+0x20c>
    dd7c:	04c02034 	movhi	r19,128
    dd80:	9cffffc4 	addi	r19,r19,-1
    dd84:	1ce6703a 	and	r19,r3,r19
    dd88:	98007a26 	beq	r19,zero,df74 <__subdf3+0x378>
    dd8c:	9809883a 	mov	r4,r19
    dd90:	000e6fc0 	call	e6fc <__clzsi2>
    dd94:	113ffe04 	addi	r4,r2,-8
    dd98:	00c007c4 	movi	r3,31
    dd9c:	19007b16 	blt	r3,r4,df8c <__subdf3+0x390>
    dda0:	00800804 	movi	r2,32
    dda4:	1105c83a 	sub	r2,r2,r4
    dda8:	8884d83a 	srl	r2,r17,r2
    ddac:	9906983a 	sll	r3,r19,r4
    ddb0:	8922983a 	sll	r17,r17,r4
    ddb4:	10c4b03a 	or	r2,r2,r3
    ddb8:	24007816 	blt	r4,r16,df9c <__subdf3+0x3a0>
    ddbc:	2421c83a 	sub	r16,r4,r16
    ddc0:	80c00044 	addi	r3,r16,1
    ddc4:	010007c4 	movi	r4,31
    ddc8:	20c09516 	blt	r4,r3,e020 <__subdf3+0x424>
    ddcc:	01400804 	movi	r5,32
    ddd0:	28cbc83a 	sub	r5,r5,r3
    ddd4:	88c8d83a 	srl	r4,r17,r3
    ddd8:	8962983a 	sll	r17,r17,r5
    dddc:	114a983a 	sll	r5,r2,r5
    dde0:	10c6d83a 	srl	r3,r2,r3
    dde4:	8804c03a 	cmpne	r2,r17,zero
    dde8:	290ab03a 	or	r5,r5,r4
    ddec:	28a2b03a 	or	r17,r5,r2
    ddf0:	0021883a 	mov	r16,zero
    ddf4:	003fa206 	br	dc80 <__alt_data_end+0xff00dc80>
    ddf8:	2090b03a 	or	r8,r4,r2
    ddfc:	40018e26 	beq	r8,zero,e438 <__subdf3+0x83c>
    de00:	1007883a 	mov	r3,r2
    de04:	2023883a 	mov	r17,r4
    de08:	888001cc 	andi	r2,r17,7
    de0c:	103f9e1e 	bne	r2,zero,dc88 <__alt_data_end+0xff00dc88>
    de10:	1804977a 	slli	r2,r3,29
    de14:	8822d0fa 	srli	r17,r17,3
    de18:	1810d0fa 	srli	r8,r3,3
    de1c:	9100004c 	andi	r4,r18,1
    de20:	1444b03a 	or	r2,r2,r17
    de24:	00c1ffc4 	movi	r3,2047
    de28:	80c02826 	beq	r16,r3,decc <__subdf3+0x2d0>
    de2c:	01400434 	movhi	r5,16
    de30:	297fffc4 	addi	r5,r5,-1
    de34:	80e0703a 	and	r16,r16,r3
    de38:	414a703a 	and	r5,r8,r5
    de3c:	003fa806 	br	dce0 <__alt_data_end+0xff00dce0>
    de40:	0080630e 	bge	zero,r2,dfd0 <__subdf3+0x3d4>
    de44:	48003026 	beq	r9,zero,df08 <__subdf3+0x30c>
    de48:	0101ffc4 	movi	r4,2047
    de4c:	813f8c26 	beq	r16,r4,dc80 <__alt_data_end+0xff00dc80>
    de50:	29402034 	orhi	r5,r5,128
    de54:	01000e04 	movi	r4,56
    de58:	2080a90e 	bge	r4,r2,e100 <__subdf3+0x504>
    de5c:	298cb03a 	or	r6,r5,r6
    de60:	3012c03a 	cmpne	r9,r6,zero
    de64:	0005883a 	mov	r2,zero
    de68:	4c53883a 	add	r9,r9,r17
    de6c:	4c63803a 	cmpltu	r17,r9,r17
    de70:	10c7883a 	add	r3,r2,r3
    de74:	88c7883a 	add	r3,r17,r3
    de78:	4823883a 	mov	r17,r9
    de7c:	1880202c 	andhi	r2,r3,128
    de80:	1000d026 	beq	r2,zero,e1c4 <__subdf3+0x5c8>
    de84:	84000044 	addi	r16,r16,1
    de88:	0081ffc4 	movi	r2,2047
    de8c:	8080fe26 	beq	r16,r2,e288 <__subdf3+0x68c>
    de90:	00bfe034 	movhi	r2,65408
    de94:	10bfffc4 	addi	r2,r2,-1
    de98:	1886703a 	and	r3,r3,r2
    de9c:	880ad07a 	srli	r5,r17,1
    dea0:	180497fa 	slli	r2,r3,31
    dea4:	8900004c 	andi	r4,r17,1
    dea8:	2922b03a 	or	r17,r5,r4
    deac:	1806d07a 	srli	r3,r3,1
    deb0:	1462b03a 	or	r17,r2,r17
    deb4:	3825883a 	mov	r18,r7
    deb8:	003f7106 	br	dc80 <__alt_data_end+0xff00dc80>
    debc:	2984b03a 	or	r2,r5,r6
    dec0:	103f6826 	beq	r2,zero,dc64 <__alt_data_end+0xff00dc64>
    dec4:	39c03fcc 	andi	r7,r7,255
    dec8:	003f6706 	br	dc68 <__alt_data_end+0xff00dc68>
    decc:	4086b03a 	or	r3,r8,r2
    ded0:	18015226 	beq	r3,zero,e41c <__subdf3+0x820>
    ded4:	00c00434 	movhi	r3,16
    ded8:	41400234 	orhi	r5,r8,8
    dedc:	18ffffc4 	addi	r3,r3,-1
    dee0:	28ca703a 	and	r5,r5,r3
    dee4:	003f7e06 	br	dce0 <__alt_data_end+0xff00dce0>
    dee8:	10bfffc4 	addi	r2,r2,-1
    deec:	1000491e 	bne	r2,zero,e014 <__subdf3+0x418>
    def0:	898fc83a 	sub	r7,r17,r6
    def4:	89e3803a 	cmpltu	r17,r17,r7
    def8:	1947c83a 	sub	r3,r3,r5
    defc:	1c47c83a 	sub	r3,r3,r17
    df00:	3823883a 	mov	r17,r7
    df04:	003f9b06 	br	dd74 <__alt_data_end+0xff00dd74>
    df08:	2988b03a 	or	r4,r5,r6
    df0c:	203f5c26 	beq	r4,zero,dc80 <__alt_data_end+0xff00dc80>
    df10:	10bfffc4 	addi	r2,r2,-1
    df14:	1000931e 	bne	r2,zero,e164 <__subdf3+0x568>
    df18:	898d883a 	add	r6,r17,r6
    df1c:	3463803a 	cmpltu	r17,r6,r17
    df20:	1947883a 	add	r3,r3,r5
    df24:	88c7883a 	add	r3,r17,r3
    df28:	3023883a 	mov	r17,r6
    df2c:	003fd306 	br	de7c <__alt_data_end+0xff00de7c>
    df30:	1000541e 	bne	r2,zero,e084 <__subdf3+0x488>
    df34:	80800044 	addi	r2,r16,1
    df38:	1081ffcc 	andi	r2,r2,2047
    df3c:	01000044 	movi	r4,1
    df40:	2080a20e 	bge	r4,r2,e1cc <__subdf3+0x5d0>
    df44:	8989c83a 	sub	r4,r17,r6
    df48:	8905803a 	cmpltu	r2,r17,r4
    df4c:	1967c83a 	sub	r19,r3,r5
    df50:	98a7c83a 	sub	r19,r19,r2
    df54:	9880202c 	andhi	r2,r19,128
    df58:	10006326 	beq	r2,zero,e0e8 <__subdf3+0x4ec>
    df5c:	3463c83a 	sub	r17,r6,r17
    df60:	28c7c83a 	sub	r3,r5,r3
    df64:	344d803a 	cmpltu	r6,r6,r17
    df68:	19a7c83a 	sub	r19,r3,r6
    df6c:	3825883a 	mov	r18,r7
    df70:	983f861e 	bne	r19,zero,dd8c <__alt_data_end+0xff00dd8c>
    df74:	8809883a 	mov	r4,r17
    df78:	000e6fc0 	call	e6fc <__clzsi2>
    df7c:	10800804 	addi	r2,r2,32
    df80:	113ffe04 	addi	r4,r2,-8
    df84:	00c007c4 	movi	r3,31
    df88:	193f850e 	bge	r3,r4,dda0 <__alt_data_end+0xff00dda0>
    df8c:	10bff604 	addi	r2,r2,-40
    df90:	8884983a 	sll	r2,r17,r2
    df94:	0023883a 	mov	r17,zero
    df98:	243f880e 	bge	r4,r16,ddbc <__alt_data_end+0xff00ddbc>
    df9c:	00ffe034 	movhi	r3,65408
    dfa0:	18ffffc4 	addi	r3,r3,-1
    dfa4:	8121c83a 	sub	r16,r16,r4
    dfa8:	10c6703a 	and	r3,r2,r3
    dfac:	003f3406 	br	dc80 <__alt_data_end+0xff00dc80>
    dfb0:	9100004c 	andi	r4,r18,1
    dfb4:	000b883a 	mov	r5,zero
    dfb8:	0005883a 	mov	r2,zero
    dfbc:	003f4806 	br	dce0 <__alt_data_end+0xff00dce0>
    dfc0:	298cb03a 	or	r6,r5,r6
    dfc4:	300cc03a 	cmpne	r6,r6,zero
    dfc8:	0005883a 	mov	r2,zero
    dfcc:	003f6406 	br	dd60 <__alt_data_end+0xff00dd60>
    dfd0:	10009a1e 	bne	r2,zero,e23c <__subdf3+0x640>
    dfd4:	82400044 	addi	r9,r16,1
    dfd8:	4881ffcc 	andi	r2,r9,2047
    dfdc:	02800044 	movi	r10,1
    dfe0:	5080670e 	bge	r10,r2,e180 <__subdf3+0x584>
    dfe4:	0081ffc4 	movi	r2,2047
    dfe8:	4880af26 	beq	r9,r2,e2a8 <__subdf3+0x6ac>
    dfec:	898d883a 	add	r6,r17,r6
    dff0:	1945883a 	add	r2,r3,r5
    dff4:	3447803a 	cmpltu	r3,r6,r17
    dff8:	1887883a 	add	r3,r3,r2
    dffc:	182297fa 	slli	r17,r3,31
    e000:	300cd07a 	srli	r6,r6,1
    e004:	1806d07a 	srli	r3,r3,1
    e008:	4821883a 	mov	r16,r9
    e00c:	89a2b03a 	or	r17,r17,r6
    e010:	003f1b06 	br	dc80 <__alt_data_end+0xff00dc80>
    e014:	0101ffc4 	movi	r4,2047
    e018:	813f441e 	bne	r16,r4,dd2c <__alt_data_end+0xff00dd2c>
    e01c:	003f1806 	br	dc80 <__alt_data_end+0xff00dc80>
    e020:	843ff844 	addi	r16,r16,-31
    e024:	01400804 	movi	r5,32
    e028:	1408d83a 	srl	r4,r2,r16
    e02c:	19405026 	beq	r3,r5,e170 <__subdf3+0x574>
    e030:	01401004 	movi	r5,64
    e034:	28c7c83a 	sub	r3,r5,r3
    e038:	10c4983a 	sll	r2,r2,r3
    e03c:	88a2b03a 	or	r17,r17,r2
    e040:	8822c03a 	cmpne	r17,r17,zero
    e044:	2462b03a 	or	r17,r4,r17
    e048:	0007883a 	mov	r3,zero
    e04c:	0021883a 	mov	r16,zero
    e050:	003f6d06 	br	de08 <__alt_data_end+0xff00de08>
    e054:	11fff804 	addi	r7,r2,-32
    e058:	01000804 	movi	r4,32
    e05c:	29ced83a 	srl	r7,r5,r7
    e060:	11004526 	beq	r2,r4,e178 <__subdf3+0x57c>
    e064:	01001004 	movi	r4,64
    e068:	2089c83a 	sub	r4,r4,r2
    e06c:	2904983a 	sll	r2,r5,r4
    e070:	118cb03a 	or	r6,r2,r6
    e074:	300cc03a 	cmpne	r6,r6,zero
    e078:	398cb03a 	or	r6,r7,r6
    e07c:	0005883a 	mov	r2,zero
    e080:	003f3706 	br	dd60 <__alt_data_end+0xff00dd60>
    e084:	80002a26 	beq	r16,zero,e130 <__subdf3+0x534>
    e088:	0101ffc4 	movi	r4,2047
    e08c:	49006626 	beq	r9,r4,e228 <__subdf3+0x62c>
    e090:	0085c83a 	sub	r2,zero,r2
    e094:	18c02034 	orhi	r3,r3,128
    e098:	01000e04 	movi	r4,56
    e09c:	20807e16 	blt	r4,r2,e298 <__subdf3+0x69c>
    e0a0:	010007c4 	movi	r4,31
    e0a4:	2080e716 	blt	r4,r2,e444 <__subdf3+0x848>
    e0a8:	01000804 	movi	r4,32
    e0ac:	2089c83a 	sub	r4,r4,r2
    e0b0:	1914983a 	sll	r10,r3,r4
    e0b4:	8890d83a 	srl	r8,r17,r2
    e0b8:	8908983a 	sll	r4,r17,r4
    e0bc:	1884d83a 	srl	r2,r3,r2
    e0c0:	5222b03a 	or	r17,r10,r8
    e0c4:	2006c03a 	cmpne	r3,r4,zero
    e0c8:	88e2b03a 	or	r17,r17,r3
    e0cc:	3463c83a 	sub	r17,r6,r17
    e0d0:	2885c83a 	sub	r2,r5,r2
    e0d4:	344d803a 	cmpltu	r6,r6,r17
    e0d8:	1187c83a 	sub	r3,r2,r6
    e0dc:	4821883a 	mov	r16,r9
    e0e0:	3825883a 	mov	r18,r7
    e0e4:	003f2306 	br	dd74 <__alt_data_end+0xff00dd74>
    e0e8:	24d0b03a 	or	r8,r4,r19
    e0ec:	40001b1e 	bne	r8,zero,e15c <__subdf3+0x560>
    e0f0:	0005883a 	mov	r2,zero
    e0f4:	0009883a 	mov	r4,zero
    e0f8:	0021883a 	mov	r16,zero
    e0fc:	003f4906 	br	de24 <__alt_data_end+0xff00de24>
    e100:	010007c4 	movi	r4,31
    e104:	20803a16 	blt	r4,r2,e1f0 <__subdf3+0x5f4>
    e108:	01000804 	movi	r4,32
    e10c:	2089c83a 	sub	r4,r4,r2
    e110:	2912983a 	sll	r9,r5,r4
    e114:	3090d83a 	srl	r8,r6,r2
    e118:	3108983a 	sll	r4,r6,r4
    e11c:	2884d83a 	srl	r2,r5,r2
    e120:	4a12b03a 	or	r9,r9,r8
    e124:	2008c03a 	cmpne	r4,r4,zero
    e128:	4912b03a 	or	r9,r9,r4
    e12c:	003f4e06 	br	de68 <__alt_data_end+0xff00de68>
    e130:	1c48b03a 	or	r4,r3,r17
    e134:	20003c26 	beq	r4,zero,e228 <__subdf3+0x62c>
    e138:	0084303a 	nor	r2,zero,r2
    e13c:	1000381e 	bne	r2,zero,e220 <__subdf3+0x624>
    e140:	3463c83a 	sub	r17,r6,r17
    e144:	28c5c83a 	sub	r2,r5,r3
    e148:	344d803a 	cmpltu	r6,r6,r17
    e14c:	1187c83a 	sub	r3,r2,r6
    e150:	4821883a 	mov	r16,r9
    e154:	3825883a 	mov	r18,r7
    e158:	003f0606 	br	dd74 <__alt_data_end+0xff00dd74>
    e15c:	2023883a 	mov	r17,r4
    e160:	003f0906 	br	dd88 <__alt_data_end+0xff00dd88>
    e164:	0101ffc4 	movi	r4,2047
    e168:	813f3a1e 	bne	r16,r4,de54 <__alt_data_end+0xff00de54>
    e16c:	003ec406 	br	dc80 <__alt_data_end+0xff00dc80>
    e170:	0005883a 	mov	r2,zero
    e174:	003fb106 	br	e03c <__alt_data_end+0xff00e03c>
    e178:	0005883a 	mov	r2,zero
    e17c:	003fbc06 	br	e070 <__alt_data_end+0xff00e070>
    e180:	1c44b03a 	or	r2,r3,r17
    e184:	80008e1e 	bne	r16,zero,e3c0 <__subdf3+0x7c4>
    e188:	1000c826 	beq	r2,zero,e4ac <__subdf3+0x8b0>
    e18c:	2984b03a 	or	r2,r5,r6
    e190:	103ebb26 	beq	r2,zero,dc80 <__alt_data_end+0xff00dc80>
    e194:	8989883a 	add	r4,r17,r6
    e198:	1945883a 	add	r2,r3,r5
    e19c:	2447803a 	cmpltu	r3,r4,r17
    e1a0:	1887883a 	add	r3,r3,r2
    e1a4:	1880202c 	andhi	r2,r3,128
    e1a8:	2023883a 	mov	r17,r4
    e1ac:	103f1626 	beq	r2,zero,de08 <__alt_data_end+0xff00de08>
    e1b0:	00bfe034 	movhi	r2,65408
    e1b4:	10bfffc4 	addi	r2,r2,-1
    e1b8:	5021883a 	mov	r16,r10
    e1bc:	1886703a 	and	r3,r3,r2
    e1c0:	003eaf06 	br	dc80 <__alt_data_end+0xff00dc80>
    e1c4:	3825883a 	mov	r18,r7
    e1c8:	003f0f06 	br	de08 <__alt_data_end+0xff00de08>
    e1cc:	1c44b03a 	or	r2,r3,r17
    e1d0:	8000251e 	bne	r16,zero,e268 <__subdf3+0x66c>
    e1d4:	1000661e 	bne	r2,zero,e370 <__subdf3+0x774>
    e1d8:	2990b03a 	or	r8,r5,r6
    e1dc:	40009626 	beq	r8,zero,e438 <__subdf3+0x83c>
    e1e0:	2807883a 	mov	r3,r5
    e1e4:	3023883a 	mov	r17,r6
    e1e8:	3825883a 	mov	r18,r7
    e1ec:	003ea406 	br	dc80 <__alt_data_end+0xff00dc80>
    e1f0:	127ff804 	addi	r9,r2,-32
    e1f4:	01000804 	movi	r4,32
    e1f8:	2a52d83a 	srl	r9,r5,r9
    e1fc:	11008c26 	beq	r2,r4,e430 <__subdf3+0x834>
    e200:	01001004 	movi	r4,64
    e204:	2085c83a 	sub	r2,r4,r2
    e208:	2884983a 	sll	r2,r5,r2
    e20c:	118cb03a 	or	r6,r2,r6
    e210:	300cc03a 	cmpne	r6,r6,zero
    e214:	4992b03a 	or	r9,r9,r6
    e218:	0005883a 	mov	r2,zero
    e21c:	003f1206 	br	de68 <__alt_data_end+0xff00de68>
    e220:	0101ffc4 	movi	r4,2047
    e224:	493f9c1e 	bne	r9,r4,e098 <__alt_data_end+0xff00e098>
    e228:	2807883a 	mov	r3,r5
    e22c:	3023883a 	mov	r17,r6
    e230:	4821883a 	mov	r16,r9
    e234:	3825883a 	mov	r18,r7
    e238:	003e9106 	br	dc80 <__alt_data_end+0xff00dc80>
    e23c:	80001f1e 	bne	r16,zero,e2bc <__subdf3+0x6c0>
    e240:	1c48b03a 	or	r4,r3,r17
    e244:	20005a26 	beq	r4,zero,e3b0 <__subdf3+0x7b4>
    e248:	0084303a 	nor	r2,zero,r2
    e24c:	1000561e 	bne	r2,zero,e3a8 <__subdf3+0x7ac>
    e250:	89a3883a 	add	r17,r17,r6
    e254:	1945883a 	add	r2,r3,r5
    e258:	898d803a 	cmpltu	r6,r17,r6
    e25c:	3087883a 	add	r3,r6,r2
    e260:	4821883a 	mov	r16,r9
    e264:	003f0506 	br	de7c <__alt_data_end+0xff00de7c>
    e268:	10002b1e 	bne	r2,zero,e318 <__subdf3+0x71c>
    e26c:	2984b03a 	or	r2,r5,r6
    e270:	10008026 	beq	r2,zero,e474 <__subdf3+0x878>
    e274:	2807883a 	mov	r3,r5
    e278:	3023883a 	mov	r17,r6
    e27c:	3825883a 	mov	r18,r7
    e280:	0401ffc4 	movi	r16,2047
    e284:	003e7e06 	br	dc80 <__alt_data_end+0xff00dc80>
    e288:	3809883a 	mov	r4,r7
    e28c:	0011883a 	mov	r8,zero
    e290:	0005883a 	mov	r2,zero
    e294:	003ee306 	br	de24 <__alt_data_end+0xff00de24>
    e298:	1c62b03a 	or	r17,r3,r17
    e29c:	8822c03a 	cmpne	r17,r17,zero
    e2a0:	0005883a 	mov	r2,zero
    e2a4:	003f8906 	br	e0cc <__alt_data_end+0xff00e0cc>
    e2a8:	3809883a 	mov	r4,r7
    e2ac:	4821883a 	mov	r16,r9
    e2b0:	0011883a 	mov	r8,zero
    e2b4:	0005883a 	mov	r2,zero
    e2b8:	003eda06 	br	de24 <__alt_data_end+0xff00de24>
    e2bc:	0101ffc4 	movi	r4,2047
    e2c0:	49003b26 	beq	r9,r4,e3b0 <__subdf3+0x7b4>
    e2c4:	0085c83a 	sub	r2,zero,r2
    e2c8:	18c02034 	orhi	r3,r3,128
    e2cc:	01000e04 	movi	r4,56
    e2d0:	20806e16 	blt	r4,r2,e48c <__subdf3+0x890>
    e2d4:	010007c4 	movi	r4,31
    e2d8:	20807716 	blt	r4,r2,e4b8 <__subdf3+0x8bc>
    e2dc:	01000804 	movi	r4,32
    e2e0:	2089c83a 	sub	r4,r4,r2
    e2e4:	1914983a 	sll	r10,r3,r4
    e2e8:	8890d83a 	srl	r8,r17,r2
    e2ec:	8908983a 	sll	r4,r17,r4
    e2f0:	1884d83a 	srl	r2,r3,r2
    e2f4:	5222b03a 	or	r17,r10,r8
    e2f8:	2006c03a 	cmpne	r3,r4,zero
    e2fc:	88e2b03a 	or	r17,r17,r3
    e300:	89a3883a 	add	r17,r17,r6
    e304:	1145883a 	add	r2,r2,r5
    e308:	898d803a 	cmpltu	r6,r17,r6
    e30c:	3087883a 	add	r3,r6,r2
    e310:	4821883a 	mov	r16,r9
    e314:	003ed906 	br	de7c <__alt_data_end+0xff00de7c>
    e318:	2984b03a 	or	r2,r5,r6
    e31c:	10004226 	beq	r2,zero,e428 <__subdf3+0x82c>
    e320:	1808d0fa 	srli	r4,r3,3
    e324:	8822d0fa 	srli	r17,r17,3
    e328:	1806977a 	slli	r3,r3,29
    e32c:	2080022c 	andhi	r2,r4,8
    e330:	1c62b03a 	or	r17,r3,r17
    e334:	10000826 	beq	r2,zero,e358 <__subdf3+0x75c>
    e338:	2812d0fa 	srli	r9,r5,3
    e33c:	4880022c 	andhi	r2,r9,8
    e340:	1000051e 	bne	r2,zero,e358 <__subdf3+0x75c>
    e344:	300cd0fa 	srli	r6,r6,3
    e348:	2804977a 	slli	r2,r5,29
    e34c:	4809883a 	mov	r4,r9
    e350:	3825883a 	mov	r18,r7
    e354:	11a2b03a 	or	r17,r2,r6
    e358:	8806d77a 	srli	r3,r17,29
    e35c:	200890fa 	slli	r4,r4,3
    e360:	882290fa 	slli	r17,r17,3
    e364:	0401ffc4 	movi	r16,2047
    e368:	1906b03a 	or	r3,r3,r4
    e36c:	003e4406 	br	dc80 <__alt_data_end+0xff00dc80>
    e370:	2984b03a 	or	r2,r5,r6
    e374:	103e4226 	beq	r2,zero,dc80 <__alt_data_end+0xff00dc80>
    e378:	8989c83a 	sub	r4,r17,r6
    e37c:	8911803a 	cmpltu	r8,r17,r4
    e380:	1945c83a 	sub	r2,r3,r5
    e384:	1205c83a 	sub	r2,r2,r8
    e388:	1200202c 	andhi	r8,r2,128
    e38c:	403e9a26 	beq	r8,zero,ddf8 <__alt_data_end+0xff00ddf8>
    e390:	3463c83a 	sub	r17,r6,r17
    e394:	28c5c83a 	sub	r2,r5,r3
    e398:	344d803a 	cmpltu	r6,r6,r17
    e39c:	1187c83a 	sub	r3,r2,r6
    e3a0:	3825883a 	mov	r18,r7
    e3a4:	003e3606 	br	dc80 <__alt_data_end+0xff00dc80>
    e3a8:	0101ffc4 	movi	r4,2047
    e3ac:	493fc71e 	bne	r9,r4,e2cc <__alt_data_end+0xff00e2cc>
    e3b0:	2807883a 	mov	r3,r5
    e3b4:	3023883a 	mov	r17,r6
    e3b8:	4821883a 	mov	r16,r9
    e3bc:	003e3006 	br	dc80 <__alt_data_end+0xff00dc80>
    e3c0:	10003626 	beq	r2,zero,e49c <__subdf3+0x8a0>
    e3c4:	2984b03a 	or	r2,r5,r6
    e3c8:	10001726 	beq	r2,zero,e428 <__subdf3+0x82c>
    e3cc:	1808d0fa 	srli	r4,r3,3
    e3d0:	8822d0fa 	srli	r17,r17,3
    e3d4:	1806977a 	slli	r3,r3,29
    e3d8:	2080022c 	andhi	r2,r4,8
    e3dc:	1c62b03a 	or	r17,r3,r17
    e3e0:	10000726 	beq	r2,zero,e400 <__subdf3+0x804>
    e3e4:	2812d0fa 	srli	r9,r5,3
    e3e8:	4880022c 	andhi	r2,r9,8
    e3ec:	1000041e 	bne	r2,zero,e400 <__subdf3+0x804>
    e3f0:	300cd0fa 	srli	r6,r6,3
    e3f4:	2804977a 	slli	r2,r5,29
    e3f8:	4809883a 	mov	r4,r9
    e3fc:	11a2b03a 	or	r17,r2,r6
    e400:	8806d77a 	srli	r3,r17,29
    e404:	200890fa 	slli	r4,r4,3
    e408:	882290fa 	slli	r17,r17,3
    e40c:	3825883a 	mov	r18,r7
    e410:	1906b03a 	or	r3,r3,r4
    e414:	0401ffc4 	movi	r16,2047
    e418:	003e1906 	br	dc80 <__alt_data_end+0xff00dc80>
    e41c:	000b883a 	mov	r5,zero
    e420:	0005883a 	mov	r2,zero
    e424:	003e2e06 	br	dce0 <__alt_data_end+0xff00dce0>
    e428:	0401ffc4 	movi	r16,2047
    e42c:	003e1406 	br	dc80 <__alt_data_end+0xff00dc80>
    e430:	0005883a 	mov	r2,zero
    e434:	003f7506 	br	e20c <__alt_data_end+0xff00e20c>
    e438:	0005883a 	mov	r2,zero
    e43c:	0009883a 	mov	r4,zero
    e440:	003e7806 	br	de24 <__alt_data_end+0xff00de24>
    e444:	123ff804 	addi	r8,r2,-32
    e448:	01000804 	movi	r4,32
    e44c:	1a10d83a 	srl	r8,r3,r8
    e450:	11002526 	beq	r2,r4,e4e8 <__subdf3+0x8ec>
    e454:	01001004 	movi	r4,64
    e458:	2085c83a 	sub	r2,r4,r2
    e45c:	1884983a 	sll	r2,r3,r2
    e460:	1444b03a 	or	r2,r2,r17
    e464:	1004c03a 	cmpne	r2,r2,zero
    e468:	40a2b03a 	or	r17,r8,r2
    e46c:	0005883a 	mov	r2,zero
    e470:	003f1606 	br	e0cc <__alt_data_end+0xff00e0cc>
    e474:	02000434 	movhi	r8,16
    e478:	0009883a 	mov	r4,zero
    e47c:	423fffc4 	addi	r8,r8,-1
    e480:	00bfffc4 	movi	r2,-1
    e484:	0401ffc4 	movi	r16,2047
    e488:	003e6606 	br	de24 <__alt_data_end+0xff00de24>
    e48c:	1c62b03a 	or	r17,r3,r17
    e490:	8822c03a 	cmpne	r17,r17,zero
    e494:	0005883a 	mov	r2,zero
    e498:	003f9906 	br	e300 <__alt_data_end+0xff00e300>
    e49c:	2807883a 	mov	r3,r5
    e4a0:	3023883a 	mov	r17,r6
    e4a4:	0401ffc4 	movi	r16,2047
    e4a8:	003df506 	br	dc80 <__alt_data_end+0xff00dc80>
    e4ac:	2807883a 	mov	r3,r5
    e4b0:	3023883a 	mov	r17,r6
    e4b4:	003df206 	br	dc80 <__alt_data_end+0xff00dc80>
    e4b8:	123ff804 	addi	r8,r2,-32
    e4bc:	01000804 	movi	r4,32
    e4c0:	1a10d83a 	srl	r8,r3,r8
    e4c4:	11000a26 	beq	r2,r4,e4f0 <__subdf3+0x8f4>
    e4c8:	01001004 	movi	r4,64
    e4cc:	2085c83a 	sub	r2,r4,r2
    e4d0:	1884983a 	sll	r2,r3,r2
    e4d4:	1444b03a 	or	r2,r2,r17
    e4d8:	1004c03a 	cmpne	r2,r2,zero
    e4dc:	40a2b03a 	or	r17,r8,r2
    e4e0:	0005883a 	mov	r2,zero
    e4e4:	003f8606 	br	e300 <__alt_data_end+0xff00e300>
    e4e8:	0005883a 	mov	r2,zero
    e4ec:	003fdc06 	br	e460 <__alt_data_end+0xff00e460>
    e4f0:	0005883a 	mov	r2,zero
    e4f4:	003ff706 	br	e4d4 <__alt_data_end+0xff00e4d4>

0000e4f8 <__fixdfsi>:
    e4f8:	280cd53a 	srli	r6,r5,20
    e4fc:	00c00434 	movhi	r3,16
    e500:	18ffffc4 	addi	r3,r3,-1
    e504:	3181ffcc 	andi	r6,r6,2047
    e508:	01c0ff84 	movi	r7,1022
    e50c:	28c6703a 	and	r3,r5,r3
    e510:	280ad7fa 	srli	r5,r5,31
    e514:	3980120e 	bge	r7,r6,e560 <__fixdfsi+0x68>
    e518:	00810744 	movi	r2,1053
    e51c:	11800c16 	blt	r2,r6,e550 <__fixdfsi+0x58>
    e520:	00810cc4 	movi	r2,1075
    e524:	1185c83a 	sub	r2,r2,r6
    e528:	01c007c4 	movi	r7,31
    e52c:	18c00434 	orhi	r3,r3,16
    e530:	38800d16 	blt	r7,r2,e568 <__fixdfsi+0x70>
    e534:	31befb44 	addi	r6,r6,-1043
    e538:	2084d83a 	srl	r2,r4,r2
    e53c:	1986983a 	sll	r3,r3,r6
    e540:	1884b03a 	or	r2,r3,r2
    e544:	28000726 	beq	r5,zero,e564 <__fixdfsi+0x6c>
    e548:	0085c83a 	sub	r2,zero,r2
    e54c:	f800283a 	ret
    e550:	00a00034 	movhi	r2,32768
    e554:	10bfffc4 	addi	r2,r2,-1
    e558:	2885883a 	add	r2,r5,r2
    e55c:	f800283a 	ret
    e560:	0005883a 	mov	r2,zero
    e564:	f800283a 	ret
    e568:	008104c4 	movi	r2,1043
    e56c:	1185c83a 	sub	r2,r2,r6
    e570:	1884d83a 	srl	r2,r3,r2
    e574:	003ff306 	br	e544 <__alt_data_end+0xff00e544>

0000e578 <__floatsidf>:
    e578:	defffd04 	addi	sp,sp,-12
    e57c:	dfc00215 	stw	ra,8(sp)
    e580:	dc400115 	stw	r17,4(sp)
    e584:	dc000015 	stw	r16,0(sp)
    e588:	20002b26 	beq	r4,zero,e638 <__floatsidf+0xc0>
    e58c:	2023883a 	mov	r17,r4
    e590:	2020d7fa 	srli	r16,r4,31
    e594:	20002d16 	blt	r4,zero,e64c <__floatsidf+0xd4>
    e598:	8809883a 	mov	r4,r17
    e59c:	000e6fc0 	call	e6fc <__clzsi2>
    e5a0:	01410784 	movi	r5,1054
    e5a4:	288bc83a 	sub	r5,r5,r2
    e5a8:	01010cc4 	movi	r4,1075
    e5ac:	2149c83a 	sub	r4,r4,r5
    e5b0:	00c007c4 	movi	r3,31
    e5b4:	1900160e 	bge	r3,r4,e610 <__floatsidf+0x98>
    e5b8:	00c104c4 	movi	r3,1043
    e5bc:	1947c83a 	sub	r3,r3,r5
    e5c0:	88c6983a 	sll	r3,r17,r3
    e5c4:	00800434 	movhi	r2,16
    e5c8:	10bfffc4 	addi	r2,r2,-1
    e5cc:	1886703a 	and	r3,r3,r2
    e5d0:	2941ffcc 	andi	r5,r5,2047
    e5d4:	800d883a 	mov	r6,r16
    e5d8:	0005883a 	mov	r2,zero
    e5dc:	280a953a 	slli	r5,r5,20
    e5e0:	31803fcc 	andi	r6,r6,255
    e5e4:	01000434 	movhi	r4,16
    e5e8:	300c97fa 	slli	r6,r6,31
    e5ec:	213fffc4 	addi	r4,r4,-1
    e5f0:	1906703a 	and	r3,r3,r4
    e5f4:	1946b03a 	or	r3,r3,r5
    e5f8:	1986b03a 	or	r3,r3,r6
    e5fc:	dfc00217 	ldw	ra,8(sp)
    e600:	dc400117 	ldw	r17,4(sp)
    e604:	dc000017 	ldw	r16,0(sp)
    e608:	dec00304 	addi	sp,sp,12
    e60c:	f800283a 	ret
    e610:	00c002c4 	movi	r3,11
    e614:	1887c83a 	sub	r3,r3,r2
    e618:	88c6d83a 	srl	r3,r17,r3
    e61c:	8904983a 	sll	r2,r17,r4
    e620:	01000434 	movhi	r4,16
    e624:	213fffc4 	addi	r4,r4,-1
    e628:	2941ffcc 	andi	r5,r5,2047
    e62c:	1906703a 	and	r3,r3,r4
    e630:	800d883a 	mov	r6,r16
    e634:	003fe906 	br	e5dc <__alt_data_end+0xff00e5dc>
    e638:	000d883a 	mov	r6,zero
    e63c:	000b883a 	mov	r5,zero
    e640:	0007883a 	mov	r3,zero
    e644:	0005883a 	mov	r2,zero
    e648:	003fe406 	br	e5dc <__alt_data_end+0xff00e5dc>
    e64c:	0123c83a 	sub	r17,zero,r4
    e650:	003fd106 	br	e598 <__alt_data_end+0xff00e598>

0000e654 <__floatunsidf>:
    e654:	defffe04 	addi	sp,sp,-8
    e658:	dc000015 	stw	r16,0(sp)
    e65c:	dfc00115 	stw	ra,4(sp)
    e660:	2021883a 	mov	r16,r4
    e664:	20002226 	beq	r4,zero,e6f0 <__floatunsidf+0x9c>
    e668:	000e6fc0 	call	e6fc <__clzsi2>
    e66c:	01010784 	movi	r4,1054
    e670:	2089c83a 	sub	r4,r4,r2
    e674:	01810cc4 	movi	r6,1075
    e678:	310dc83a 	sub	r6,r6,r4
    e67c:	00c007c4 	movi	r3,31
    e680:	1980120e 	bge	r3,r6,e6cc <__floatunsidf+0x78>
    e684:	00c104c4 	movi	r3,1043
    e688:	1907c83a 	sub	r3,r3,r4
    e68c:	80ca983a 	sll	r5,r16,r3
    e690:	00800434 	movhi	r2,16
    e694:	10bfffc4 	addi	r2,r2,-1
    e698:	2101ffcc 	andi	r4,r4,2047
    e69c:	0021883a 	mov	r16,zero
    e6a0:	288a703a 	and	r5,r5,r2
    e6a4:	2008953a 	slli	r4,r4,20
    e6a8:	00c00434 	movhi	r3,16
    e6ac:	18ffffc4 	addi	r3,r3,-1
    e6b0:	28c6703a 	and	r3,r5,r3
    e6b4:	8005883a 	mov	r2,r16
    e6b8:	1906b03a 	or	r3,r3,r4
    e6bc:	dfc00117 	ldw	ra,4(sp)
    e6c0:	dc000017 	ldw	r16,0(sp)
    e6c4:	dec00204 	addi	sp,sp,8
    e6c8:	f800283a 	ret
    e6cc:	00c002c4 	movi	r3,11
    e6d0:	188bc83a 	sub	r5,r3,r2
    e6d4:	814ad83a 	srl	r5,r16,r5
    e6d8:	00c00434 	movhi	r3,16
    e6dc:	18ffffc4 	addi	r3,r3,-1
    e6e0:	81a0983a 	sll	r16,r16,r6
    e6e4:	2101ffcc 	andi	r4,r4,2047
    e6e8:	28ca703a 	and	r5,r5,r3
    e6ec:	003fed06 	br	e6a4 <__alt_data_end+0xff00e6a4>
    e6f0:	0009883a 	mov	r4,zero
    e6f4:	000b883a 	mov	r5,zero
    e6f8:	003fea06 	br	e6a4 <__alt_data_end+0xff00e6a4>

0000e6fc <__clzsi2>:
    e6fc:	00bfffd4 	movui	r2,65535
    e700:	11000536 	bltu	r2,r4,e718 <__clzsi2+0x1c>
    e704:	00803fc4 	movi	r2,255
    e708:	11000f36 	bltu	r2,r4,e748 <__clzsi2+0x4c>
    e70c:	00800804 	movi	r2,32
    e710:	0007883a 	mov	r3,zero
    e714:	00000506 	br	e72c <__clzsi2+0x30>
    e718:	00804034 	movhi	r2,256
    e71c:	10bfffc4 	addi	r2,r2,-1
    e720:	11000c2e 	bgeu	r2,r4,e754 <__clzsi2+0x58>
    e724:	00800204 	movi	r2,8
    e728:	00c00604 	movi	r3,24
    e72c:	20c8d83a 	srl	r4,r4,r3
    e730:	00c00074 	movhi	r3,1
    e734:	18c26a04 	addi	r3,r3,2472
    e738:	1909883a 	add	r4,r3,r4
    e73c:	20c00003 	ldbu	r3,0(r4)
    e740:	10c5c83a 	sub	r2,r2,r3
    e744:	f800283a 	ret
    e748:	00800604 	movi	r2,24
    e74c:	00c00204 	movi	r3,8
    e750:	003ff606 	br	e72c <__alt_data_end+0xff00e72c>
    e754:	00800404 	movi	r2,16
    e758:	1007883a 	mov	r3,r2
    e75c:	003ff306 	br	e72c <__alt_data_end+0xff00e72c>

0000e760 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e760:	defffd04 	addi	sp,sp,-12
    e764:	dfc00215 	stw	ra,8(sp)
    e768:	dc400115 	stw	r17,4(sp)
    e76c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e770:	20001f16 	blt	r4,zero,e7f0 <close+0x90>
    e774:	20c00324 	muli	r3,r4,12
    e778:	00800074 	movhi	r2,1
    e77c:	1084da04 	addi	r2,r2,4968
    e780:	1885883a 	add	r2,r3,r2
    e784:	2021883a 	mov	r16,r4

  if (fd)
    e788:	10001926 	beq	r2,zero,e7f0 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e78c:	10c00017 	ldw	r3,0(r2)
    e790:	18c00417 	ldw	r3,16(r3)
    e794:	18000c26 	beq	r3,zero,e7c8 <close+0x68>
    e798:	1009883a 	mov	r4,r2
    e79c:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e7a0:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e7a4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e7a8:	000eb980 	call	eb98 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e7ac:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e7b0:	88000816 	blt	r17,zero,e7d4 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e7b4:	dfc00217 	ldw	ra,8(sp)
    e7b8:	dc400117 	ldw	r17,4(sp)
    e7bc:	dc000017 	ldw	r16,0(sp)
    e7c0:	dec00304 	addi	sp,sp,12
    e7c4:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e7c8:	000eb980 	call	eb98 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e7cc:	0005883a 	mov	r2,zero
    e7d0:	003ff806 	br	e7b4 <__alt_data_end+0xff00e7b4>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e7d4:	d0a00d17 	ldw	r2,-32716(gp)
    e7d8:	10000c26 	beq	r2,zero,e80c <close+0xac>
    e7dc:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e7e0:	0463c83a 	sub	r17,zero,r17
    e7e4:	14400015 	stw	r17,0(r2)
      return -1;
    e7e8:	00bfffc4 	movi	r2,-1
    e7ec:	003ff106 	br	e7b4 <__alt_data_end+0xff00e7b4>
    e7f0:	d0a00d17 	ldw	r2,-32716(gp)
    e7f4:	10000726 	beq	r2,zero,e814 <close+0xb4>
    e7f8:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7fc:	00c01444 	movi	r3,81
    e800:	10c00015 	stw	r3,0(r2)
    return -1;
    e804:	00bfffc4 	movi	r2,-1
    e808:	003fea06 	br	e7b4 <__alt_data_end+0xff00e7b4>
    e80c:	d0a6dc04 	addi	r2,gp,-25744
    e810:	003ff306 	br	e7e0 <__alt_data_end+0xff00e7e0>
    e814:	d0a6dc04 	addi	r2,gp,-25744
    e818:	003ff806 	br	e7fc <__alt_data_end+0xff00e7fc>

0000e81c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e81c:	3005883a 	mov	r2,r6
    e820:	f800283a 	ret

0000e824 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e824:	20000d16 	blt	r4,zero,e85c <fstat+0x38>
    e828:	21000324 	muli	r4,r4,12
    e82c:	00800074 	movhi	r2,1
    e830:	1084da04 	addi	r2,r2,4968
    e834:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e838:	20000826 	beq	r4,zero,e85c <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e83c:	20800017 	ldw	r2,0(r4)
    e840:	10800817 	ldw	r2,32(r2)
    e844:	10000126 	beq	r2,zero,e84c <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e848:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e84c:	00880004 	movi	r2,8192
    e850:	28800115 	stw	r2,4(r5)
      return 0;
    e854:	0005883a 	mov	r2,zero
    e858:	f800283a 	ret
    e85c:	d0a00d17 	ldw	r2,-32716(gp)
    e860:	10000926 	beq	r2,zero,e888 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e864:	deffff04 	addi	sp,sp,-4
    e868:	dfc00015 	stw	ra,0(sp)
    e86c:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e870:	00c01444 	movi	r3,81
    e874:	10c00015 	stw	r3,0(r2)
    return -1;
    e878:	00bfffc4 	movi	r2,-1
  }
}
    e87c:	dfc00017 	ldw	ra,0(sp)
    e880:	dec00104 	addi	sp,sp,4
    e884:	f800283a 	ret
    e888:	d0a6dc04 	addi	r2,gp,-25744
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e88c:	00c01444 	movi	r3,81
    e890:	10c00015 	stw	r3,0(r2)
    return -1;
    e894:	00bfffc4 	movi	r2,-1
  }
}
    e898:	f800283a 	ret

0000e89c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e89c:	defff004 	addi	sp,sp,-64
    e8a0:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e8a4:	20001316 	blt	r4,zero,e8f4 <isatty+0x58>
    e8a8:	20800324 	muli	r2,r4,12
    e8ac:	00c00074 	movhi	r3,1
    e8b0:	18c4da04 	addi	r3,r3,4968
    e8b4:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e8b8:	10000e26 	beq	r2,zero,e8f4 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e8bc:	10800017 	ldw	r2,0(r2)
    e8c0:	10800817 	ldw	r2,32(r2)
    e8c4:	10000726 	beq	r2,zero,e8e4 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e8c8:	d80b883a 	mov	r5,sp
    e8cc:	000e8240 	call	e824 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e8d0:	d8800117 	ldw	r2,4(sp)
    e8d4:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e8d8:	dfc00f17 	ldw	ra,60(sp)
    e8dc:	dec01004 	addi	sp,sp,64
    e8e0:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e8e4:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e8e8:	dfc00f17 	ldw	ra,60(sp)
    e8ec:	dec01004 	addi	sp,sp,64
    e8f0:	f800283a 	ret
    e8f4:	d0a00d17 	ldw	r2,-32716(gp)
    e8f8:	10000726 	beq	r2,zero,e918 <isatty+0x7c>
    e8fc:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e900:	00c01444 	movi	r3,81
    e904:	10c00015 	stw	r3,0(r2)
    return 0;
    e908:	0005883a 	mov	r2,zero
  }
}
    e90c:	dfc00f17 	ldw	ra,60(sp)
    e910:	dec01004 	addi	sp,sp,64
    e914:	f800283a 	ret
    e918:	d0a6dc04 	addi	r2,gp,-25744
    e91c:	003ff806 	br	e900 <__alt_data_end+0xff00e900>

0000e920 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e920:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e924:	01000074 	movhi	r4,1
    e928:	01400074 	movhi	r5,1
    e92c:	dfc00015 	stw	ra,0(sp)
    e930:	2102b104 	addi	r4,r4,2756
    e934:	29496e04 	addi	r5,r5,9656
    e938:	21400a26 	beq	r4,r5,e964 <alt_load+0x44>
  {
    while( to != end )
    e93c:	00800074 	movhi	r2,1
    e940:	10896e04 	addi	r2,r2,9656
    e944:	20800726 	beq	r4,r2,e964 <alt_load+0x44>
    {
      *to++ = *from++;
    e948:	21800104 	addi	r6,r4,4
    e94c:	118dc83a 	sub	r6,r2,r6
    e950:	300cd0ba 	srli	r6,r6,2
    e954:	31800044 	addi	r6,r6,1
    e958:	318d883a 	add	r6,r6,r6
    e95c:	318d883a 	add	r6,r6,r6
    e960:	00079600 	call	7960 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e964:	01000034 	movhi	r4,0
    e968:	01400034 	movhi	r5,0
    e96c:	21000804 	addi	r4,r4,32
    e970:	29400804 	addi	r5,r5,32
    e974:	21400a26 	beq	r4,r5,e9a0 <alt_load+0x80>
  {
    while( to != end )
    e978:	00800034 	movhi	r2,0
    e97c:	10806304 	addi	r2,r2,396
    e980:	20800726 	beq	r4,r2,e9a0 <alt_load+0x80>
    {
      *to++ = *from++;
    e984:	21800104 	addi	r6,r4,4
    e988:	118dc83a 	sub	r6,r2,r6
    e98c:	300cd0ba 	srli	r6,r6,2
    e990:	31800044 	addi	r6,r6,1
    e994:	318d883a 	add	r6,r6,r6
    e998:	318d883a 	add	r6,r6,r6
    e99c:	00079600 	call	7960 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e9a0:	01000074 	movhi	r4,1
    e9a4:	01400074 	movhi	r5,1
    e9a8:	2100c304 	addi	r4,r4,780
    e9ac:	2940c304 	addi	r5,r5,780
    e9b0:	21400a26 	beq	r4,r5,e9dc <alt_load+0xbc>
  {
    while( to != end )
    e9b4:	00800074 	movhi	r2,1
    e9b8:	1082b104 	addi	r2,r2,2756
    e9bc:	20800726 	beq	r4,r2,e9dc <alt_load+0xbc>
    {
      *to++ = *from++;
    e9c0:	21800104 	addi	r6,r4,4
    e9c4:	118dc83a 	sub	r6,r2,r6
    e9c8:	300cd0ba 	srli	r6,r6,2
    e9cc:	31800044 	addi	r6,r6,1
    e9d0:	318d883a 	add	r6,r6,r6
    e9d4:	318d883a 	add	r6,r6,r6
    e9d8:	00079600 	call	7960 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e9dc:	000f5b80 	call	f5b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e9e0:	dfc00017 	ldw	ra,0(sp)
    e9e4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e9e8:	000f7041 	jmpi	f704 <alt_icache_flush_all>

0000e9ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e9ec:	defffe04 	addi	sp,sp,-8
    e9f0:	dfc00115 	stw	ra,4(sp)
    e9f4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e9f8:	20000e16 	blt	r4,zero,ea34 <lseek+0x48>
    e9fc:	21000324 	muli	r4,r4,12
    ea00:	00800074 	movhi	r2,1
    ea04:	1084da04 	addi	r2,r2,4968
    ea08:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    ea0c:	20000926 	beq	r4,zero,ea34 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    ea10:	20800017 	ldw	r2,0(r4)
    ea14:	10800717 	ldw	r2,28(r2)
    ea18:	10000d26 	beq	r2,zero,ea50 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ea1c:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    ea20:	10000f16 	blt	r2,zero,ea60 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    ea24:	dfc00117 	ldw	ra,4(sp)
    ea28:	dc000017 	ldw	r16,0(sp)
    ea2c:	dec00204 	addi	sp,sp,8
    ea30:	f800283a 	ret
    ea34:	04001444 	movi	r16,81
    ea38:	d0a00d17 	ldw	r2,-32716(gp)
    ea3c:	10000626 	beq	r2,zero,ea58 <lseek+0x6c>
    ea40:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    ea44:	14000015 	stw	r16,0(r2)
    rc = -1;
    ea48:	00bfffc4 	movi	r2,-1
  }

  return rc;
    ea4c:	003ff506 	br	ea24 <__alt_data_end+0xff00ea24>
    ea50:	04002184 	movi	r16,134
    ea54:	003ff806 	br	ea38 <__alt_data_end+0xff00ea38>
    ea58:	d0a6dc04 	addi	r2,gp,-25744
    ea5c:	003ff906 	br	ea44 <__alt_data_end+0xff00ea44>
    ea60:	00a1c83a 	sub	r16,zero,r2
    ea64:	003ff406 	br	ea38 <__alt_data_end+0xff00ea38>

0000ea68 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea68:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea6c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea70:	dfc00115 	stw	ra,4(sp)
    ea74:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea78:	000ed3c0 	call	ed3c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ea7c:	000ed5c0 	call	ed5c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ea80:	01800074 	movhi	r6,1
    ea84:	3182ad04 	addi	r6,r6,2740
    ea88:	300b883a 	mov	r5,r6
    ea8c:	3009883a 	mov	r4,r6
    ea90:	000f8040 	call	f804 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea94:	000f63c0 	call	f63c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea98:	01000074 	movhi	r4,1
    ea9c:	213da804 	addi	r4,r4,-2400
    eaa0:	000fde80 	call	fde8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    eaa4:	d1a6e017 	ldw	r6,-25728(gp)
    eaa8:	d166e117 	ldw	r5,-25724(gp)
    eaac:	d126e217 	ldw	r4,-25720(gp)
    eab0:	0000e5c0 	call	e5c <main>
  close(STDOUT_FILENO);
    eab4:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    eab8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    eabc:	000e7600 	call	e760 <close>
  exit (result);
    eac0:	8009883a 	mov	r4,r16
    eac4:	000fdfc0 	call	fdfc <exit>

0000eac8 <__malloc_lock>:
    eac8:	f800283a 	ret

0000eacc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eacc:	f800283a 	ret

0000ead0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ead0:	defffe04 	addi	sp,sp,-8
    ead4:	dfc00115 	stw	ra,4(sp)
    ead8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eadc:	20002116 	blt	r4,zero,eb64 <read+0x94>
    eae0:	21000324 	muli	r4,r4,12
    eae4:	00800074 	movhi	r2,1
    eae8:	1084da04 	addi	r2,r2,4968
    eaec:	2089883a 	add	r4,r4,r2
  
  if (fd)
    eaf0:	20001c26 	beq	r4,zero,eb64 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eaf4:	20800217 	ldw	r2,8(r4)
    eaf8:	00c00044 	movi	r3,1
    eafc:	108000cc 	andi	r2,r2,3
    eb00:	10c00a26 	beq	r2,r3,eb2c <read+0x5c>
        (fd->dev->read))
    eb04:	20800017 	ldw	r2,0(r4)
    eb08:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eb0c:	10000726 	beq	r2,zero,eb2c <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    eb10:	103ee83a 	callr	r2
    eb14:	1021883a 	mov	r16,r2
    eb18:	10000b16 	blt	r2,zero,eb48 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    eb1c:	dfc00117 	ldw	ra,4(sp)
    eb20:	dc000017 	ldw	r16,0(sp)
    eb24:	dec00204 	addi	sp,sp,8
    eb28:	f800283a 	ret
    eb2c:	d0a00d17 	ldw	r2,-32716(gp)
    eb30:	10001326 	beq	r2,zero,eb80 <read+0xb0>
    eb34:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    eb38:	00c00344 	movi	r3,13
    eb3c:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    eb40:	00bfffc4 	movi	r2,-1
    eb44:	003ff506 	br	eb1c <__alt_data_end+0xff00eb1c>
    eb48:	d0a00d17 	ldw	r2,-32716(gp)
    eb4c:	10000e26 	beq	r2,zero,eb88 <read+0xb8>
    eb50:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    eb54:	0421c83a 	sub	r16,zero,r16
    eb58:	14000015 	stw	r16,0(r2)
          return -1;
    eb5c:	00bfffc4 	movi	r2,-1
    eb60:	003fee06 	br	eb1c <__alt_data_end+0xff00eb1c>
    eb64:	d0a00d17 	ldw	r2,-32716(gp)
    eb68:	10000926 	beq	r2,zero,eb90 <read+0xc0>
    eb6c:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    eb70:	00c01444 	movi	r3,81
    eb74:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eb78:	00bfffc4 	movi	r2,-1
    eb7c:	003fe706 	br	eb1c <__alt_data_end+0xff00eb1c>
    eb80:	d0a6dc04 	addi	r2,gp,-25744
    eb84:	003fec06 	br	eb38 <__alt_data_end+0xff00eb38>
    eb88:	d0a6dc04 	addi	r2,gp,-25744
    eb8c:	003ff106 	br	eb54 <__alt_data_end+0xff00eb54>
    eb90:	d0a6dc04 	addi	r2,gp,-25744
    eb94:	003ff606 	br	eb70 <__alt_data_end+0xff00eb70>

0000eb98 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    eb98:	00800084 	movi	r2,2
    eb9c:	1100060e 	bge	r2,r4,ebb8 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    eba0:	21000324 	muli	r4,r4,12
    eba4:	00800074 	movhi	r2,1
    eba8:	1084da04 	addi	r2,r2,4968
    ebac:	1109883a 	add	r4,r2,r4
    ebb0:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    ebb4:	20000015 	stw	zero,0(r4)
    ebb8:	f800283a 	ret

0000ebbc <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebbc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebc0:	00bfff84 	movi	r2,-2
    ebc4:	2884703a 	and	r2,r5,r2
    ebc8:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ebcc:	d0a00e17 	ldw	r2,-32712(gp)
    ebd0:	00ffff04 	movi	r3,-4
    ebd4:	108000c4 	addi	r2,r2,3
    ebd8:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ebdc:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ebe0:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ebe4:	1109883a 	add	r4,r2,r4
    ebe8:	18c00004 	addi	r3,r3,0
    ebec:	19000336 	bltu	r3,r4,ebfc <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    ebf0:	d1200e15 	stw	r4,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebf4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    ebf8:	f800283a 	ret
    ebfc:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ec00:	00bfffc4 	movi	r2,-1
    ec04:	f800283a 	ret

0000ec08 <alt_uncached_free>:
void 
alt_uncached_free(volatile void* ptr)
{
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
    ec08:	00a00034 	movhi	r2,32768
    ec0c:	10bfffc4 	addi	r2,r2,-1
    ec10:	2088703a 	and	r4,r4,r2
    ec14:	0001e2c1 	jmpi	1e2c <free>

0000ec18 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ec18:	defffd04 	addi	sp,sp,-12
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ec1c:	210007c4 	addi	r4,r4,31
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ec20:	dc000015 	stw	r16,0(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ec24:	2020d17a 	srli	r16,r4,5

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    ec28:	01000804 	movi	r4,32
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ec2c:	dfc00215 	stw	ra,8(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ec30:	8020917a 	slli	r16,r16,5
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ec34:	dc400115 	stw	r17,4(sp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    ec38:	800b883a 	mov	r5,r16
    ec3c:	000fe340 	call	fe34 <memalign>

  if (ptr == NULL) {
    ec40:	10000a26 	beq	r2,zero,ec6c <alt_uncached_malloc+0x54>
    return NULL; /* Out of memory */
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    ec44:	1009883a 	mov	r4,r2
    ec48:	800b883a 	mov	r5,r16
    ec4c:	1023883a 	mov	r17,r2
    ec50:	000f5780 	call	f578 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    ec54:	88a00034 	orhi	r2,r17,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    ec58:	dfc00217 	ldw	ra,8(sp)
    ec5c:	dc400117 	ldw	r17,4(sp)
    ec60:	dc000017 	ldw	r16,0(sp)
    ec64:	dec00304 	addi	sp,sp,12
    ec68:	f800283a 	ret
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);

  if (ptr == NULL) {
    return NULL; /* Out of memory */
    ec6c:	0005883a 	mov	r2,zero
    ec70:	003ff906 	br	ec58 <__alt_data_end+0xff00ec58>

0000ec74 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    ec74:	000f5001 	jmpi	f500 <alt_busy_sleep>

0000ec78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ec78:	defffe04 	addi	sp,sp,-8
    ec7c:	dfc00115 	stw	ra,4(sp)
    ec80:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec84:	20002216 	blt	r4,zero,ed10 <write+0x98>
    ec88:	21000324 	muli	r4,r4,12
    ec8c:	00800074 	movhi	r2,1
    ec90:	1084da04 	addi	r2,r2,4968
    ec94:	2089883a 	add	r4,r4,r2
  
  if (fd)
    ec98:	20001d26 	beq	r4,zero,ed10 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ec9c:	20800217 	ldw	r2,8(r4)
    eca0:	108000cc 	andi	r2,r2,3
    eca4:	10000a26 	beq	r2,zero,ecd0 <write+0x58>
    eca8:	20800017 	ldw	r2,0(r4)
    ecac:	10800617 	ldw	r2,24(r2)
    ecb0:	10000726 	beq	r2,zero,ecd0 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ecb4:	103ee83a 	callr	r2
    ecb8:	1021883a 	mov	r16,r2
    ecbc:	10000d16 	blt	r2,zero,ecf4 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ecc0:	dfc00117 	ldw	ra,4(sp)
    ecc4:	dc000017 	ldw	r16,0(sp)
    ecc8:	dec00204 	addi	sp,sp,8
    eccc:	f800283a 	ret
    ecd0:	d0a00d17 	ldw	r2,-32716(gp)
    ecd4:	10000526 	beq	r2,zero,ecec <write+0x74>
    ecd8:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    ecdc:	00c00344 	movi	r3,13
    ece0:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    ece4:	00bfffc4 	movi	r2,-1
    ece8:	003ff506 	br	ecc0 <__alt_data_end+0xff00ecc0>
    ecec:	d0a6dc04 	addi	r2,gp,-25744
    ecf0:	003ffa06 	br	ecdc <__alt_data_end+0xff00ecdc>
    ecf4:	d0a00d17 	ldw	r2,-32716(gp)
    ecf8:	10000c26 	beq	r2,zero,ed2c <write+0xb4>
    ecfc:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    ed00:	0421c83a 	sub	r16,zero,r16
    ed04:	14000015 	stw	r16,0(r2)
        return -1;
    ed08:	00bfffc4 	movi	r2,-1
    ed0c:	003fec06 	br	ecc0 <__alt_data_end+0xff00ecc0>
    ed10:	d0a00d17 	ldw	r2,-32716(gp)
    ed14:	10000726 	beq	r2,zero,ed34 <write+0xbc>
    ed18:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ed1c:	00c01444 	movi	r3,81
    ed20:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    ed24:	00bfffc4 	movi	r2,-1
    ed28:	003fe506 	br	ecc0 <__alt_data_end+0xff00ecc0>
    ed2c:	d0a6dc04 	addi	r2,gp,-25744
    ed30:	003ff306 	br	ed00 <__alt_data_end+0xff00ed00>
    ed34:	d0a6dc04 	addi	r2,gp,-25744
    ed38:	003ff806 	br	ed1c <__alt_data_end+0xff00ed1c>

0000ed3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ed3c:	deffff04 	addi	sp,sp,-4
    ed40:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ed44:	000fba80 	call	fba8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ed48:	00800044 	movi	r2,1
    ed4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ed50:	dfc00017 	ldw	ra,0(sp)
    ed54:	dec00104 	addi	sp,sp,4
    ed58:	f800283a 	ret

0000ed5c <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ed5c:	00804034 	movhi	r2,256
    ed60:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ed64:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ed68:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ed6c:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ed70:	0080bef4 	movhi	r2,763
    ed74:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ed78:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ed7c:	01c0fa04 	movi	r7,1000
    ed80:	21040804 	addi	r4,r4,4128
    ed84:	01800104 	movi	r6,4
    ed88:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ed8c:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ed90:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ed94:	84054e04 	addi	r16,r16,5432
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ed98:	d0a6e315 	stw	r2,-25716(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ed9c:	000f3c00 	call	f3c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eda0:	8009883a 	mov	r4,r16
    eda4:	000b883a 	mov	r5,zero
    eda8:	000d883a 	mov	r6,zero
    edac:	000ef580 	call	ef58 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    edb0:	d1600904 	addi	r5,gp,-32732
    edb4:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    edb8:	dfc00117 	ldw	ra,4(sp)
    edbc:	dc000017 	ldw	r16,0(sp)
    edc0:	dec00204 	addi	sp,sp,8
    edc4:	000f5d01 	jmpi	f5d0 <alt_dev_llist_insert>

0000edc8 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    edc8:	20800017 	ldw	r2,0(r4)
    edcc:	21c00217 	ldw	r7,8(r4)
    edd0:	11000a04 	addi	r4,r2,40
    edd4:	000f0901 	jmpi	f090 <altera_avalon_jtag_uart_read>

0000edd8 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    edd8:	20800017 	ldw	r2,0(r4)
    eddc:	21c00217 	ldw	r7,8(r4)
    ede0:	11000a04 	addi	r4,r2,40
    ede4:	000f1e41 	jmpi	f1e4 <altera_avalon_jtag_uart_write>

0000ede8 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ede8:	20800017 	ldw	r2,0(r4)
    edec:	21400217 	ldw	r5,8(r4)
    edf0:	11000a04 	addi	r4,r2,40
    edf4:	000efd01 	jmpi	efd0 <altera_avalon_jtag_uart_close>

0000edf8 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    edf8:	21000017 	ldw	r4,0(r4)
    edfc:	21000a04 	addi	r4,r4,40
    ee00:	000f01c1 	jmpi	f01c <altera_avalon_jtag_uart_ioctl>

0000ee04 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ee04:	20800017 	ldw	r2,0(r4)
    ee08:	10800104 	addi	r2,r2,4
    ee0c:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ee10:	18c1000c 	andi	r3,r3,1024
    ee14:	1800081e 	bne	r3,zero,ee38 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ee18:	20800917 	ldw	r2,36(r4)
    ee1c:	00e00034 	movhi	r3,32768
    ee20:	18ffff04 	addi	r3,r3,-4
    ee24:	18800236 	bltu	r3,r2,ee30 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    ee28:	10800044 	addi	r2,r2,1
    ee2c:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ee30:	d0a6e717 	ldw	r2,-25700(gp)
    ee34:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ee38:	20c00817 	ldw	r3,32(r4)
    ee3c:	18c10014 	ori	r3,r3,1024
    ee40:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ee44:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ee48:	d0a6e717 	ldw	r2,-25700(gp)
    ee4c:	f800283a 	ret

0000ee50 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    ee50:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ee54:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ee58:	02bfff44 	movi	r10,-3
    ee5c:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ee60:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ee64:	3880c00c 	andi	r2,r7,768
    ee68:	10003426 	beq	r2,zero,ef3c <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ee6c:	3880400c 	andi	r2,r7,256
    ee70:	10001726 	beq	r2,zero,eed0 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee74:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ee78:	20c00b17 	ldw	r3,44(r4)
    ee7c:	10800044 	addi	r2,r2,1
    ee80:	1081ffcc 	andi	r2,r2,2047
    ee84:	18800d1e 	bne	r3,r2,eebc <altera_avalon_jtag_uart_irq+0x6c>
    ee88:	00002d06 	br	ef40 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ee8c:	20800a17 	ldw	r2,40(r4)
    ee90:	2085883a 	add	r2,r4,r2
    ee94:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee98:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    ee9c:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eea0:	10800044 	addi	r2,r2,1
    eea4:	1081ffcc 	andi	r2,r2,2047
    eea8:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eeac:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    eeb0:	10800044 	addi	r2,r2,1
    eeb4:	1081ffcc 	andi	r2,r2,2047
    eeb8:	11400326 	beq	r2,r5,eec8 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    eebc:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    eec0:	18a0000c 	andi	r2,r3,32768
    eec4:	103ff11e 	bne	r2,zero,ee8c <__alt_data_end+0xff00ee8c>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    eec8:	18ffffec 	andhi	r3,r3,65535
    eecc:	18001c1e 	bne	r3,zero,ef40 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    eed0:	3880800c 	andi	r2,r7,512
    eed4:	103fe226 	beq	r2,zero,ee60 <__alt_data_end+0xff00ee60>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    eed8:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    eedc:	38000b1e 	bne	r7,zero,ef0c <altera_avalon_jtag_uart_irq+0xbc>
    eee0:	003fdf06 	br	ee60 <__alt_data_end+0xff00ee60>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    eee4:	20800d17 	ldw	r2,52(r4)
    eee8:	2085883a 	add	r2,r4,r2
    eeec:	10820e07 	ldb	r2,2104(r2)
    eef0:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eef4:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    eef8:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eefc:	10800044 	addi	r2,r2,1
    ef00:	1081ffcc 	andi	r2,r2,2047
    ef04:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ef08:	383fd526 	beq	r7,zero,ee60 <__alt_data_end+0xff00ee60>
    ef0c:	20c00d17 	ldw	r3,52(r4)
    ef10:	20800c17 	ldw	r2,48(r4)
    ef14:	18bff31e 	bne	r3,r2,eee4 <__alt_data_end+0xff00eee4>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ef18:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef1c:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ef20:	1284703a 	and	r2,r2,r10
    ef24:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef28:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ef2c:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ef30:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ef34:	3880c00c 	andi	r2,r7,768
    ef38:	103fcc1e 	bne	r2,zero,ee6c <__alt_data_end+0xff00ee6c>
    ef3c:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef40:	20800817 	ldw	r2,32(r4)
    ef44:	1244703a 	and	r2,r2,r9
    ef48:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ef4c:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ef50:	40800037 	ldwio	r2,0(r8)
    ef54:	003fde06 	br	eed0 <__alt_data_end+0xff00eed0>

0000ef58 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ef58:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ef5c:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ef60:	dc000115 	stw	r16,4(sp)
    ef64:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef68:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ef6c:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef70:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ef74:	2809883a 	mov	r4,r5
    ef78:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ef7c:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ef80:	01800074 	movhi	r6,1
    ef84:	31bb9404 	addi	r6,r6,-4528
    ef88:	800f883a 	mov	r7,r16
    ef8c:	d8000015 	stw	zero,0(sp)
    ef90:	000f7100 	call	f710 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ef94:	d166e717 	ldw	r5,-25700(gp)
    ef98:	01800074 	movhi	r6,1
    ef9c:	31bb8104 	addi	r6,r6,-4604
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    efa0:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    efa4:	800f883a 	mov	r7,r16
    efa8:	81000204 	addi	r4,r16,8
    efac:	000f4800 	call	f480 <alt_alarm_start>
    efb0:	1000030e 	bge	r2,zero,efc0 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    efb4:	00a00034 	movhi	r2,32768
    efb8:	10bfffc4 	addi	r2,r2,-1
    efbc:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    efc0:	dfc00217 	ldw	ra,8(sp)
    efc4:	dc000117 	ldw	r16,4(sp)
    efc8:	dec00304 	addi	sp,sp,12
    efcc:	f800283a 	ret

0000efd0 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    efd0:	2890000c 	andi	r2,r5,16384
    efd4:	21c00c17 	ldw	r7,48(r4)
    efd8:	10000426 	beq	r2,zero,efec <altera_avalon_jtag_uart_close+0x1c>
    efdc:	00000606 	br	eff8 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    efe0:	21800917 	ldw	r6,36(r4)
    efe4:	20c00117 	ldw	r3,4(r4)
    efe8:	30c00a2e 	bgeu	r6,r3,f014 <altera_avalon_jtag_uart_close+0x44>
    efec:	20c00d17 	ldw	r3,52(r4)
    eff0:	38fffb1e 	bne	r7,r3,efe0 <__alt_data_end+0xff00efe0>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    eff4:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    eff8:	20800d17 	ldw	r2,52(r4)
    effc:	11c00526 	beq	r2,r7,f014 <altera_avalon_jtag_uart_close+0x44>
    f000:	20c00917 	ldw	r3,36(r4)
    f004:	20800117 	ldw	r2,4(r4)
    f008:	1880022e 	bgeu	r3,r2,f014 <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    f00c:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    f010:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    f014:	0005883a 	mov	r2,zero
    f018:	f800283a 	ret

0000f01c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    f01c:	009a8044 	movi	r2,27137
    f020:	28800d26 	beq	r5,r2,f058 <altera_avalon_jtag_uart_ioctl+0x3c>
    f024:	009a8084 	movi	r2,27138
    f028:	2880091e 	bne	r5,r2,f050 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    f02c:	21400117 	ldw	r5,4(r4)
    f030:	00a00034 	movhi	r2,32768
    f034:	10bfffc4 	addi	r2,r2,-1
    f038:	28800526 	beq	r5,r2,f050 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f03c:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    f040:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    f044:	1947803a 	cmpltu	r3,r3,r5
    f048:	30c00015 	stw	r3,0(r6)
    f04c:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    f050:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    f054:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    f058:	20c00117 	ldw	r3,4(r4)
    f05c:	00a00034 	movhi	r2,32768
    f060:	10bfffc4 	addi	r2,r2,-1
    f064:	18bffa26 	beq	r3,r2,f050 <__alt_data_end+0xff00f050>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    f068:	30800017 	ldw	r2,0(r6)
    f06c:	01600034 	movhi	r5,32768
    f070:	297fff04 	addi	r5,r5,-4
    f074:	10ffff84 	addi	r3,r2,-2
    f078:	28c0022e 	bgeu	r5,r3,f084 <altera_avalon_jtag_uart_ioctl+0x68>
    f07c:	00a00034 	movhi	r2,32768
    f080:	10bfff84 	addi	r2,r2,-2
    f084:	20800115 	stw	r2,4(r4)
      rc = 0;
    f088:	0005883a 	mov	r2,zero
    f08c:	f800283a 	ret

0000f090 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f090:	01804e0e 	bge	zero,r6,f1cc <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f094:	defff504 	addi	sp,sp,-44
    f098:	dc000115 	stw	r16,4(sp)
    f09c:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f0a0:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f0a4:	dd800715 	stw	r22,28(sp)
    f0a8:	dd400615 	stw	r21,24(sp)
    f0ac:	dd000515 	stw	r20,20(sp)
    f0b0:	dcc00415 	stw	r19,16(sp)
    f0b4:	dc800315 	stw	r18,12(sp)
    f0b8:	dfc00a15 	stw	ra,40(sp)
    f0bc:	df000915 	stw	fp,36(sp)
    f0c0:	ddc00815 	stw	r23,32(sp)
    f0c4:	dc400215 	stw	r17,8(sp)
    f0c8:	3027883a 	mov	r19,r6
    f0cc:	2025883a 	mov	r18,r4
    f0d0:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f0d4:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f0d8:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f0dc:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f0e0:	b02f883a 	mov	r23,r22
    f0e4:	00000a06 	br	f110 <altera_avalon_jtag_uart_read+0x80>
    f0e8:	9880012e 	bgeu	r19,r2,f0f0 <altera_avalon_jtag_uart_read+0x60>
    f0ec:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f0f0:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f0f4:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f0f8:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f0fc:	00079600 	call	7960 <memcpy>
      ptr   += n;
      space -= n;
    f100:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f104:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    f108:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    f10c:	04c0080e 	bge	zero,r19,f130 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f110:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f114:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    f118:	e4000136 	bltu	fp,r16,f120 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    f11c:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f120:	a40b883a 	add	r5,r20,r16
    f124:	b809883a 	mov	r4,r23
    f128:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    f12c:	103fee1e 	bne	r2,zero,f0e8 <__alt_data_end+0xff00f0e8>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f130:	bd800d1e 	bne	r23,r22,f168 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f134:	d8800017 	ldw	r2,0(sp)
    f138:	10000426 	beq	r2,zero,f14c <altera_avalon_jtag_uart_read+0xbc>
    f13c:	00002106 	br	f1c4 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f140:	90c00917 	ldw	r3,36(r18)
    f144:	90800117 	ldw	r2,4(r18)
    f148:	1880022e 	bgeu	r3,r2,f154 <altera_avalon_jtag_uart_read+0xc4>
    f14c:	90800a17 	ldw	r2,40(r18)
    f150:	e0bffb26 	beq	fp,r2,f140 <__alt_data_end+0xff00f140>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f154:	90800a17 	ldw	r2,40(r18)
    f158:	e0800126 	beq	fp,r2,f160 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f15c:	04ffe016 	blt	zero,r19,f0e0 <__alt_data_end+0xff00f0e0>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    f160:	00bffec4 	movi	r2,-5
    f164:	00000b06 	br	f194 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f168:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f16c:	00bfff84 	movi	r2,-2
    f170:	2084703a 	and	r2,r4,r2
    f174:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f178:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f17c:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f180:	10800054 	ori	r2,r2,1
    f184:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f188:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f18c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    f190:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    f194:	dfc00a17 	ldw	ra,40(sp)
    f198:	df000917 	ldw	fp,36(sp)
    f19c:	ddc00817 	ldw	r23,32(sp)
    f1a0:	dd800717 	ldw	r22,28(sp)
    f1a4:	dd400617 	ldw	r21,24(sp)
    f1a8:	dd000517 	ldw	r20,20(sp)
    f1ac:	dcc00417 	ldw	r19,16(sp)
    f1b0:	dc800317 	ldw	r18,12(sp)
    f1b4:	dc400217 	ldw	r17,8(sp)
    f1b8:	dc000117 	ldw	r16,4(sp)
    f1bc:	dec00b04 	addi	sp,sp,44
    f1c0:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f1c4:	00bffd44 	movi	r2,-11
    f1c8:	003ff206 	br	f194 <__alt_data_end+0xff00f194>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    f1cc:	39d0000c 	andi	r7,r7,16384
    f1d0:	3800021e 	bne	r7,zero,f1dc <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    f1d4:	00bffec4 	movi	r2,-5
}
    f1d8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f1dc:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    f1e0:	f800283a 	ret

0000f1e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f1e4:	defff604 	addi	sp,sp,-40
    f1e8:	dc000015 	stw	r16,0(sp)
    f1ec:	dfc00915 	stw	ra,36(sp)
    f1f0:	df000815 	stw	fp,32(sp)
    f1f4:	ddc00715 	stw	r23,28(sp)
    f1f8:	dd800615 	stw	r22,24(sp)
    f1fc:	dd400515 	stw	r21,20(sp)
    f200:	dd000415 	stw	r20,16(sp)
    f204:	dcc00315 	stw	r19,12(sp)
    f208:	dc800215 	stw	r18,8(sp)
    f20c:	dc400115 	stw	r17,4(sp)
    f210:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f214:	01804d0e 	bge	zero,r6,f34c <altera_avalon_jtag_uart_write+0x168>
    f218:	302d883a 	mov	r22,r6
    f21c:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f220:	3c50000c 	andi	r17,r7,16384
    f224:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f228:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f22c:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f230:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    f234:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    f238:	e0c03a2e 	bgeu	fp,r3,f324 <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    f23c:	1dffffc4 	addi	r23,r3,-1
    f240:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    f244:	b800131e 	bne	r23,zero,f294 <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f248:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f24c:	24c4703a 	and	r2,r4,r19
    f250:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f254:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f258:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f25c:	10800094 	ori	r2,r2,2
    f260:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f264:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f268:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f26c:	8800341e 	bne	r17,zero,f340 <altera_avalon_jtag_uart_write+0x15c>
    f270:	81000917 	ldw	r4,36(r16)
    f274:	00000206 	br	f280 <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f278:	80800117 	ldw	r2,4(r16)
    f27c:	2080022e 	bgeu	r4,r2,f288 <altera_avalon_jtag_uart_write+0xa4>
    f280:	80800d17 	ldw	r2,52(r16)
    f284:	18bffc26 	beq	r3,r2,f278 <__alt_data_end+0xff00f278>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f288:	203fe926 	beq	r4,zero,f230 <__alt_data_end+0xff00f230>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f28c:	ad00181e 	bne	r21,r20,f2f0 <altera_avalon_jtag_uart_write+0x10c>
    f290:	00003a06 	br	f37c <altera_avalon_jtag_uart_write+0x198>
    f294:	b5c0012e 	bgeu	r22,r23,f29c <altera_avalon_jtag_uart_write+0xb8>
    f298:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f29c:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2a0:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f2a4:	a80b883a 	mov	r5,r21
    f2a8:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2ac:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f2b0:	00079600 	call	7960 <memcpy>
      ptr   += n;
      count -= n;
    f2b4:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f2b8:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f2bc:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f2c0:	05bfdb16 	blt	zero,r22,f230 <__alt_data_end+0xff00f230>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2c4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2c8:	00bfff84 	movi	r2,-2
    f2cc:	1884703a 	and	r2,r3,r2
    f2d0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2d4:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f2d8:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2dc:	10800094 	ori	r2,r2,2
    f2e0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f2e4:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2e8:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f2ec:	a5402226 	beq	r20,r21,f378 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f2f0:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f2f4:	dfc00917 	ldw	ra,36(sp)
    f2f8:	df000817 	ldw	fp,32(sp)
    f2fc:	ddc00717 	ldw	r23,28(sp)
    f300:	dd800617 	ldw	r22,24(sp)
    f304:	dd400517 	ldw	r21,20(sp)
    f308:	dd000417 	ldw	r20,16(sp)
    f30c:	dcc00317 	ldw	r19,12(sp)
    f310:	dc800217 	ldw	r18,8(sp)
    f314:	dc400117 	ldw	r17,4(sp)
    f318:	dc000017 	ldw	r16,0(sp)
    f31c:	dec00a04 	addi	sp,sp,40
    f320:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f324:	18000326 	beq	r3,zero,f334 <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f328:	00820004 	movi	r2,2048
    f32c:	172fc83a 	sub	r23,r2,fp
    f330:	003fc406 	br	f244 <__alt_data_end+0xff00f244>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f334:	0081ffc4 	movi	r2,2047
    f338:	172fc83a 	sub	r23,r2,fp
    f33c:	003fc106 	br	f244 <__alt_data_end+0xff00f244>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f340:	ad3feb1e 	bne	r21,r20,f2f0 <__alt_data_end+0xff00f2f0>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f344:	00bffd44 	movi	r2,-11
    f348:	003fea06 	br	f2f4 <__alt_data_end+0xff00f2f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f34c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f350:	00bfff84 	movi	r2,-2
    f354:	1884703a 	and	r2,r3,r2
    f358:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f35c:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f360:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f364:	10800094 	ori	r2,r2,2
    f368:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f36c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f370:	1801703a 	wrctl	status,r3
    f374:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f378:	883ff21e 	bne	r17,zero,f344 <__alt_data_end+0xff00f344>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f37c:	00bffec4 	movi	r2,-5
    f380:	003fdc06 	br	f2f4 <__alt_data_end+0xff00f2f4>

0000f384 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f384:	defffe04 	addi	sp,sp,-8
    f388:	dfc00115 	stw	ra,4(sp)
    f38c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f390:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f394:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f398:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f39c:	00bfff84 	movi	r2,-2
    f3a0:	8084703a 	and	r2,r16,r2
    f3a4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f3a8:	000fab40 	call	fab4 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3ac:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f3b0:	dfc00117 	ldw	ra,4(sp)
    f3b4:	dc000017 	ldw	r16,0(sp)
    f3b8:	dec00204 	addi	sp,sp,8
    f3bc:	f800283a 	ret

0000f3c0 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f3c0:	d0e6e717 	ldw	r3,-25700(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f3c4:	defffe04 	addi	sp,sp,-8
    f3c8:	dfc00115 	stw	ra,4(sp)
    f3cc:	2005883a 	mov	r2,r4
    f3d0:	2809883a 	mov	r4,r5
    f3d4:	300b883a 	mov	r5,r6
    f3d8:	1800011e 	bne	r3,zero,f3e0 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f3dc:	d1e6e715 	stw	r7,-25700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f3e0:	00c001c4 	movi	r3,7
    f3e4:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f3e8:	01800074 	movhi	r6,1
    f3ec:	31bce104 	addi	r6,r6,-3196
    f3f0:	d8000015 	stw	zero,0(sp)
    f3f4:	100f883a 	mov	r7,r2
    f3f8:	000f7100 	call	f710 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f3fc:	dfc00117 	ldw	ra,4(sp)
    f400:	dec00204 	addi	sp,sp,8
    f404:	f800283a 	ret

0000f408 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f408:	d0e6e317 	ldw	r3,-25716(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f40c:	d0a6e417 	ldw	r2,-25712(gp)

  if (!altera_avalon_timer_ts_freq)
    f410:	18000a26 	beq	r3,zero,f43c <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f414:	10c00104 	addi	r3,r2,4
    f418:	01000204 	movi	r4,8
    f41c:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f420:	013fffd4 	movui	r4,65535
    f424:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f428:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f42c:	00800104 	movi	r2,4
    f430:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f434:	0005883a 	mov	r2,zero
    f438:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f43c:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f440:	f800283a 	ret

0000f444 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f444:	d0a6e317 	ldw	r2,-25716(gp)
    f448:	1000021e 	bne	r2,zero,f454 <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f44c:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f450:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f454:	d0e6e417 	ldw	r3,-25712(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f458:	18800404 	addi	r2,r3,16
    f45c:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f460:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f464:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f468:	1806943a 	slli	r3,r3,16
    f46c:	10bfffcc 	andi	r2,r2,65535
    f470:	1884303a 	nor	r2,r3,r2
    f474:	f800283a 	ret

0000f478 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f478:	d0a6e317 	ldw	r2,-25716(gp)
    f47c:	f800283a 	ret

0000f480 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f480:	d0a6e717 	ldw	r2,-25700(gp)
    f484:	10001a26 	beq	r2,zero,f4f0 <alt_alarm_start+0x70>
  {
    if (alarm)
    f488:	20001b26 	beq	r4,zero,f4f8 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f48c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f490:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f494:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f498:	00bfff84 	movi	r2,-2
    f49c:	1884703a 	and	r2,r3,r2
    f4a0:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f4a4:	d0a6e617 	ldw	r2,-25704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f4a8:	11800044 	addi	r6,r2,1
    f4ac:	314b883a 	add	r5,r6,r5
    f4b0:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f4b4:	28800b36 	bltu	r5,r2,f4e4 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f4b8:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f4bc:	d0a01004 	addi	r2,gp,-32704
    f4c0:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f4c4:	d0a01017 	ldw	r2,-32704(gp)
    f4c8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f4cc:	d0a01017 	ldw	r2,-32704(gp)
  list->next           = entry;
    f4d0:	d1201015 	stw	r4,-32704(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f4d4:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4d8:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f4dc:	0005883a 	mov	r2,zero
    f4e0:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f4e4:	00800044 	movi	r2,1
    f4e8:	20800405 	stb	r2,16(r4)
    f4ec:	003ff306 	br	f4bc <__alt_data_end+0xff00f4bc>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f4f0:	00bfde84 	movi	r2,-134
    f4f4:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f4f8:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f4fc:	f800283a 	ret

0000f500 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f500:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f504:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f508:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f50c:	dc000015 	stw	r16,0(sp)
    f510:	dfc00115 	stw	ra,4(sp)
    f514:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f518:	000c03c0 	call	c03c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f51c:	10001226 	beq	r2,zero,f568 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f520:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f524:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f528:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f52c:	21000044 	addi	r4,r4,1
    f530:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f534:	297fffc4 	addi	r5,r5,-1
    f538:	283ffe1e 	bne	r5,zero,f534 <__alt_data_end+0xff00f534>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f53c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f540:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f544:	18bffb16 	blt	r3,r2,f534 <__alt_data_end+0xff00f534>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f548:	8020913a 	slli	r16,r16,4
    f54c:	843fffc4 	addi	r16,r16,-1
    f550:	803ffe1e 	bne	r16,zero,f54c <__alt_data_end+0xff00f54c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f554:	0005883a 	mov	r2,zero
    f558:	dfc00117 	ldw	ra,4(sp)
    f55c:	dc000017 	ldw	r16,0(sp)
    f560:	dec00204 	addi	sp,sp,8
    f564:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f568:	8020913a 	slli	r16,r16,4
    f56c:	843fffc4 	addi	r16,r16,-1
    f570:	043ffe16 	blt	zero,r16,f56c <__alt_data_end+0xff00f56c>
    f574:	003ff706 	br	f554 <__alt_data_end+0xff00f554>

0000f578 <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
    f578:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f57c:	2005883a 	mov	r2,r4
    f580:	2140092e 	bgeu	r4,r5,f5a8 <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
    f584:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f588:	10800804 	addi	r2,r2,32
    f58c:	117ffd36 	bltu	r2,r5,f584 <__alt_data_end+0xff00f584>
    f590:	0104303a 	nor	r2,zero,r4
    f594:	1145883a 	add	r2,r2,r5
    f598:	1004d17a 	srli	r2,r2,5
    f59c:	10800044 	addi	r2,r2,1
    f5a0:	1004917a 	slli	r2,r2,5
    f5a4:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
    f5a8:	210007cc 	andi	r4,r4,31
    f5ac:	20000126 	beq	r4,zero,f5b4 <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
    f5b0:	1000001b 	flushda	0(r2)
    f5b4:	f800283a 	ret

0000f5b8 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f5b8:	0005883a 	mov	r2,zero
    f5bc:	00c80004 	movi	r3,8192
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f5c0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f5c4:	10800804 	addi	r2,r2,32
    f5c8:	10fffd1e 	bne	r2,r3,f5c0 <__alt_data_end+0xff00f5c0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f5cc:	f800283a 	ret

0000f5d0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f5d0:	20000a26 	beq	r4,zero,f5fc <alt_dev_llist_insert+0x2c>
    f5d4:	20800217 	ldw	r2,8(r4)
    f5d8:	10000826 	beq	r2,zero,f5fc <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f5dc:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f5e0:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f5e4:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f5e8:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f5ec:	28c00017 	ldw	r3,0(r5)
    f5f0:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f5f4:	29000015 	stw	r4,0(r5)
    f5f8:	f800283a 	ret
    f5fc:	d0a00d17 	ldw	r2,-32716(gp)
    f600:	10000926 	beq	r2,zero,f628 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f604:	deffff04 	addi	sp,sp,-4
    f608:	dfc00015 	stw	ra,0(sp)
    f60c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f610:	00c00584 	movi	r3,22
    f614:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f618:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f61c:	dfc00017 	ldw	ra,0(sp)
    f620:	dec00104 	addi	sp,sp,4
    f624:	f800283a 	ret
    f628:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f62c:	00c00584 	movi	r3,22
    f630:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f634:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f638:	f800283a 	ret

0000f63c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f63c:	defffc04 	addi	sp,sp,-16
    f640:	dc800215 	stw	r18,8(sp)
    f644:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f648:	04800074 	movhi	r18,1
    f64c:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f650:	dfc00315 	stw	ra,12(sp)
    f654:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f658:	8400c204 	addi	r16,r16,776
    f65c:	9480c304 	addi	r18,r18,780
    f660:	84800936 	bltu	r16,r18,f688 <_do_ctors+0x4c>
    f664:	84a5c83a 	sub	r18,r16,r18
    f668:	9024d0ba 	srli	r18,r18,2
    f66c:	0023883a 	mov	r17,zero
    f670:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f674:	80800017 	ldw	r2,0(r16)
    f678:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f67c:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f680:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f684:	8cbffb1e 	bne	r17,r18,f674 <__alt_data_end+0xff00f674>
        (*ctor) (); 
}
    f688:	dfc00317 	ldw	ra,12(sp)
    f68c:	dc800217 	ldw	r18,8(sp)
    f690:	dc400117 	ldw	r17,4(sp)
    f694:	dc000017 	ldw	r16,0(sp)
    f698:	dec00404 	addi	sp,sp,16
    f69c:	f800283a 	ret

0000f6a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f6a0:	defffc04 	addi	sp,sp,-16
    f6a4:	dc800215 	stw	r18,8(sp)
    f6a8:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f6ac:	04800074 	movhi	r18,1
    f6b0:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f6b4:	dfc00315 	stw	ra,12(sp)
    f6b8:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f6bc:	8400c204 	addi	r16,r16,776
    f6c0:	9480c304 	addi	r18,r18,780
    f6c4:	84800936 	bltu	r16,r18,f6ec <_do_dtors+0x4c>
    f6c8:	84a5c83a 	sub	r18,r16,r18
    f6cc:	9024d0ba 	srli	r18,r18,2
    f6d0:	0023883a 	mov	r17,zero
    f6d4:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f6d8:	80800017 	ldw	r2,0(r16)
    f6dc:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f6e0:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f6e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f6e8:	8cbffb1e 	bne	r17,r18,f6d8 <__alt_data_end+0xff00f6d8>
        (*dtor) (); 
}
    f6ec:	dfc00317 	ldw	ra,12(sp)
    f6f0:	dc800217 	ldw	r18,8(sp)
    f6f4:	dc400117 	ldw	r17,4(sp)
    f6f8:	dc000017 	ldw	r16,0(sp)
    f6fc:	dec00404 	addi	sp,sp,16
    f700:	f800283a 	ret

0000f704 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f704:	01440004 	movi	r5,4096
    f708:	0009883a 	mov	r4,zero
    f70c:	000fd241 	jmpi	fd24 <alt_icache_flush>

0000f710 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f710:	000f79c1 	jmpi	f79c <alt_iic_isr_register>

0000f714 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f714:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f718:	00bfff84 	movi	r2,-2
    f71c:	2084703a 	and	r2,r4,r2
    f720:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f724:	00c00044 	movi	r3,1
    f728:	d0a6e517 	ldw	r2,-25708(gp)
    f72c:	194a983a 	sll	r5,r3,r5
    f730:	288ab03a 	or	r5,r5,r2
    f734:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f738:	d0a6e517 	ldw	r2,-25708(gp)
    f73c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f740:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f744:	0005883a 	mov	r2,zero
    f748:	f800283a 	ret

0000f74c <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f74c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f750:	00bfff84 	movi	r2,-2
    f754:	2084703a 	and	r2,r4,r2
    f758:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f75c:	00ffff84 	movi	r3,-2
    f760:	d0a6e517 	ldw	r2,-25708(gp)
    f764:	194a183a 	rol	r5,r3,r5
    f768:	288a703a 	and	r5,r5,r2
    f76c:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f770:	d0a6e517 	ldw	r2,-25708(gp)
    f774:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f778:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f77c:	0005883a 	mov	r2,zero
    f780:	f800283a 	ret

0000f784 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f784:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f788:	00800044 	movi	r2,1
    f78c:	1144983a 	sll	r2,r2,r5
    f790:	10c4703a 	and	r2,r2,r3
}
    f794:	1004c03a 	cmpne	r2,r2,zero
    f798:	f800283a 	ret

0000f79c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f79c:	00c007c4 	movi	r3,31
    f7a0:	19401616 	blt	r3,r5,f7fc <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f7a4:	defffe04 	addi	sp,sp,-8
    f7a8:	dfc00115 	stw	ra,4(sp)
    f7ac:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f7b0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f7b4:	00ffff84 	movi	r3,-2
    f7b8:	80c6703a 	and	r3,r16,r3
    f7bc:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f7c0:	280490fa 	slli	r2,r5,3
    f7c4:	00c00074 	movhi	r3,1
    f7c8:	18d04f04 	addi	r3,r3,16700
    f7cc:	1885883a 	add	r2,r3,r2
    f7d0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f7d4:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f7d8:	30000626 	beq	r6,zero,f7f4 <alt_iic_isr_register+0x58>
    f7dc:	000f7140 	call	f714 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f7e0:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f7e4:	dfc00117 	ldw	ra,4(sp)
    f7e8:	dc000017 	ldw	r16,0(sp)
    f7ec:	dec00204 	addi	sp,sp,8
    f7f0:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f7f4:	000f74c0 	call	f74c <alt_ic_irq_disable>
    f7f8:	003ff906 	br	f7e0 <__alt_data_end+0xff00f7e0>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f7fc:	00bffa84 	movi	r2,-22
    f800:	f800283a 	ret

0000f804 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f804:	defffd04 	addi	sp,sp,-12
    f808:	dc400115 	stw	r17,4(sp)
    f80c:	dc000015 	stw	r16,0(sp)
    f810:	2823883a 	mov	r17,r5
    f814:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f818:	01400044 	movi	r5,1
    f81c:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f820:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f824:	000f9080 	call	f908 <open>

  if (old >= 0)
    f828:	10000c16 	blt	r2,zero,f85c <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f82c:	10c00324 	muli	r3,r2,12
    f830:	01400074 	movhi	r5,1
    f834:	2944da04 	addi	r5,r5,4968
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f838:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f83c:	28c5883a 	add	r2,r5,r3
    f840:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f844:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f848:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f84c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f850:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f854:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f858:	000eb980 	call	eb98 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f85c:	01807fc4 	movi	r6,511
    f860:	000b883a 	mov	r5,zero
    f864:	8809883a 	mov	r4,r17
    f868:	000f9080 	call	f908 <open>

  if (old >= 0)
    f86c:	10000c16 	blt	r2,zero,f8a0 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f870:	10c00324 	muli	r3,r2,12
    f874:	01400074 	movhi	r5,1
    f878:	2944da04 	addi	r5,r5,4968
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f87c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f880:	28c5883a 	add	r2,r5,r3
    f884:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f888:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f88c:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f890:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f894:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f898:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f89c:	000eb980 	call	eb98 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f8a0:	01807fc4 	movi	r6,511
    f8a4:	01400044 	movi	r5,1
    f8a8:	8009883a 	mov	r4,r16
    f8ac:	000f9080 	call	f908 <open>

  if (old >= 0)
    f8b0:	10001016 	blt	r2,zero,f8f4 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f8b4:	10c00324 	muli	r3,r2,12
    f8b8:	01400074 	movhi	r5,1
    f8bc:	2944da04 	addi	r5,r5,4968
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f8c0:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f8c4:	28c5883a 	add	r2,r5,r3
    f8c8:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f8cc:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f8d0:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f8d4:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f8d8:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f8dc:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f8e0:	dfc00217 	ldw	ra,8(sp)
    f8e4:	dc400117 	ldw	r17,4(sp)
    f8e8:	dc000017 	ldw	r16,0(sp)
    f8ec:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f8f0:	000eb981 	jmpi	eb98 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f8f4:	dfc00217 	ldw	ra,8(sp)
    f8f8:	dc400117 	ldw	r17,4(sp)
    f8fc:	dc000017 	ldw	r16,0(sp)
    f900:	dec00304 	addi	sp,sp,12
    f904:	f800283a 	ret

0000f908 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f908:	defffa04 	addi	sp,sp,-24
    f90c:	dc000015 	stw	r16,0(sp)
    f910:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f914:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f918:	dc800215 	stw	r18,8(sp)
    f91c:	dc400115 	stw	r17,4(sp)
    f920:	dfc00515 	stw	ra,20(sp)
    f924:	dd000415 	stw	r20,16(sp)
    f928:	dcc00315 	stw	r19,12(sp)
    f92c:	2023883a 	mov	r17,r4
    f930:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f934:	000fbb00 	call	fbb0 <alt_find_dev>
    f938:	10004626 	beq	r2,zero,fa54 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f93c:	1009883a 	mov	r4,r2
    f940:	1029883a 	mov	r20,r2
    f944:	000fcd40 	call	fcd4 <alt_get_fd>
    f948:	1027883a 	mov	r19,r2
    f94c:	1000090e 	bge	r2,zero,f974 <open+0x6c>
    f950:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f954:	9809883a 	mov	r4,r19
    f958:	000eb980 	call	eb98 <alt_release_fd>
    f95c:	d0a00d17 	ldw	r2,-32716(gp)
    f960:	10004326 	beq	r2,zero,fa70 <open+0x168>
    f964:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f968:	14000015 	stw	r16,0(r2)
    return -1;
    f96c:	00bfffc4 	movi	r2,-1
    f970:	00002e06 	br	fa2c <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f974:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f978:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f97c:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f980:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f984:	1084da04 	addi	r2,r2,4968

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f988:	80c6703a 	and	r3,r16,r3
    f98c:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f990:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f994:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f998:	d2200817 	ldw	r8,-32736(gp)
    f99c:	21c00017 	ldw	r7,0(r4)
    f9a0:	11400204 	addi	r5,r2,8
    f9a4:	0007883a 	mov	r3,zero
    f9a8:	00000306 	br	f9b8 <open+0xb0>
    f9ac:	10800304 	addi	r2,r2,12
    f9b0:	29400304 	addi	r5,r5,12
    f9b4:	40c01436 	bltu	r8,r3,fa08 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f9b8:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f9bc:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f9c0:	31fffa1e 	bne	r6,r7,f9ac <__alt_data_end+0xff00f9ac>
    f9c4:	29800017 	ldw	r6,0(r5)
    f9c8:	303ff80e 	bge	r6,zero,f9ac <__alt_data_end+0xff00f9ac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f9cc:	20bff726 	beq	r4,r2,f9ac <__alt_data_end+0xff00f9ac>
    f9d0:	04000344 	movi	r16,13
    f9d4:	003fdf06 	br	f954 <__alt_data_end+0xff00f954>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f9d8:	1009883a 	mov	r4,r2
    f9dc:	000fcd40 	call	fcd4 <alt_get_fd>
    f9e0:	1027883a 	mov	r19,r2
    f9e4:	103fda16 	blt	r2,zero,f950 <__alt_data_end+0xff00f950>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f9e8:	99000324 	muli	r4,r19,12
    f9ec:	00800074 	movhi	r2,1
    f9f0:	1084da04 	addi	r2,r2,4968
    f9f4:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f9f8:	00900034 	movhi	r2,16384
    f9fc:	10bfffc4 	addi	r2,r2,-1
    fa00:	8084703a 	and	r2,r16,r2
    fa04:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    fa08:	a0800317 	ldw	r2,12(r20)
    fa0c:	10000f26 	beq	r2,zero,fa4c <open+0x144>
    fa10:	900f883a 	mov	r7,r18
    fa14:	800d883a 	mov	r6,r16
    fa18:	880b883a 	mov	r5,r17
    fa1c:	103ee83a 	callr	r2
    fa20:	1007883a 	mov	r3,r2
    fa24:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    fa28:	18001316 	blt	r3,zero,fa78 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    fa2c:	dfc00517 	ldw	ra,20(sp)
    fa30:	dd000417 	ldw	r20,16(sp)
    fa34:	dcc00317 	ldw	r19,12(sp)
    fa38:	dc800217 	ldw	r18,8(sp)
    fa3c:	dc400117 	ldw	r17,4(sp)
    fa40:	dc000017 	ldw	r16,0(sp)
    fa44:	dec00604 	addi	sp,sp,24
    fa48:	f800283a 	ret
    fa4c:	9805883a 	mov	r2,r19
    fa50:	003ff606 	br	fa2c <__alt_data_end+0xff00fa2c>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    fa54:	8809883a 	mov	r4,r17
    fa58:	000fc280 	call	fc28 <alt_find_file>
    fa5c:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    fa60:	103fdd1e 	bne	r2,zero,f9d8 <__alt_data_end+0xff00f9d8>
    fa64:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    fa68:	04ffffc4 	movi	r19,-1
    fa6c:	003fb906 	br	f954 <__alt_data_end+0xff00f954>
    fa70:	d0a6dc04 	addi	r2,gp,-25744
    fa74:	003fbc06 	br	f968 <__alt_data_end+0xff00f968>
    fa78:	00e1c83a 	sub	r16,zero,r3
    fa7c:	003fb506 	br	f954 <__alt_data_end+0xff00f954>

0000fa80 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fa80:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa84:	00bfff84 	movi	r2,-2
    fa88:	1884703a 	and	r2,r3,r2
    fa8c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fa90:	21400117 	ldw	r5,4(r4)
    fa94:	20800017 	ldw	r2,0(r4)
    fa98:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    fa9c:	21400117 	ldw	r5,4(r4)
    faa0:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    faa4:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    faa8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    faac:	1801703a 	wrctl	status,r3
    fab0:	f800283a 	ret

0000fab4 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fab4:	d0a6e617 	ldw	r2,-25704(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fab8:	defffa04 	addi	sp,sp,-24
    fabc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fac0:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fac4:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fac8:	dc800215 	stw	r18,8(sp)
    facc:	dfc00515 	stw	ra,20(sp)
    fad0:	dd000415 	stw	r20,16(sp)
    fad4:	dcc00315 	stw	r19,12(sp)
    fad8:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fadc:	d4a01004 	addi	r18,gp,-32704

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fae0:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fae4:	84801126 	beq	r16,r18,fb2c <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    fae8:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    faec:	053fff84 	movi	r20,-2
    faf0:	00000606 	br	fb0c <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    faf4:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    faf8:	d0e6e617 	ldw	r3,-25704(gp)
    fafc:	80800217 	ldw	r2,8(r16)
    fb00:	1880122e 	bgeu	r3,r2,fb4c <alt_tick+0x98>
    fb04:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fb08:	8c800826 	beq	r17,r18,fb2c <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fb0c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    fb10:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fb14:	103ff826 	beq	r2,zero,faf8 <__alt_data_end+0xff00faf8>
    fb18:	d0a6e617 	ldw	r2,-25704(gp)
    fb1c:	103ff526 	beq	r2,zero,faf4 <__alt_data_end+0xff00faf4>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fb20:	d0a6e617 	ldw	r2,-25704(gp)
    fb24:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fb28:	8cbff81e 	bne	r17,r18,fb0c <__alt_data_end+0xff00fb0c>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    fb2c:	dfc00517 	ldw	ra,20(sp)
    fb30:	dd000417 	ldw	r20,16(sp)
    fb34:	dcc00317 	ldw	r19,12(sp)
    fb38:	dc800217 	ldw	r18,8(sp)
    fb3c:	dc400117 	ldw	r17,4(sp)
    fb40:	dc000017 	ldw	r16,0(sp)
    fb44:	dec00604 	addi	sp,sp,24
    fb48:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    fb4c:	80800317 	ldw	r2,12(r16)
    fb50:	81000517 	ldw	r4,20(r16)
    fb54:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fb58:	10000726 	beq	r2,zero,fb78 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    fb5c:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fb60:	d126e617 	ldw	r4,-25704(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    fb64:	10c5883a 	add	r2,r2,r3
    fb68:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fb6c:	113fe52e 	bgeu	r2,r4,fb04 <__alt_data_end+0xff00fb04>
        {
          alarm->rollover = 1;
    fb70:	84c00405 	stb	r19,16(r16)
    fb74:	003fe306 	br	fb04 <__alt_data_end+0xff00fb04>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb78:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb7c:	1506703a 	and	r3,r2,r20
    fb80:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fb84:	81000117 	ldw	r4,4(r16)
    fb88:	80c00017 	ldw	r3,0(r16)
    fb8c:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    fb90:	81000117 	ldw	r4,4(r16)
    fb94:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fb98:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    fb9c:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fba0:	1001703a 	wrctl	status,r2
    fba4:	003fd706 	br	fb04 <__alt_data_end+0xff00fb04>

0000fba8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    fba8:	000170fa 	wrctl	ienable,zero
    fbac:	f800283a 	ret

0000fbb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fbb0:	defffb04 	addi	sp,sp,-20
    fbb4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    fbb8:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fbbc:	dc400115 	stw	r17,4(sp)
    fbc0:	2823883a 	mov	r17,r5
    fbc4:	dcc00315 	stw	r19,12(sp)
    fbc8:	dfc00415 	stw	ra,16(sp)
    fbcc:	dc800215 	stw	r18,8(sp)
    fbd0:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    fbd4:	00027e00 	call	27e0 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fbd8:	8c000b26 	beq	r17,r16,fc08 <alt_find_dev+0x58>
    fbdc:	14800044 	addi	r18,r2,1
    fbe0:	00000206 	br	fbec <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fbe4:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fbe8:	8c000726 	beq	r17,r16,fc08 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fbec:	81000217 	ldw	r4,8(r16)
    fbf0:	900d883a 	mov	r6,r18
    fbf4:	980b883a 	mov	r5,r19
    fbf8:	000ffe40 	call	ffe4 <memcmp>
    fbfc:	103ff91e 	bne	r2,zero,fbe4 <__alt_data_end+0xff00fbe4>
    fc00:	8005883a 	mov	r2,r16
    fc04:	00000106 	br	fc0c <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fc08:	0005883a 	mov	r2,zero
}
    fc0c:	dfc00417 	ldw	ra,16(sp)
    fc10:	dcc00317 	ldw	r19,12(sp)
    fc14:	dc800217 	ldw	r18,8(sp)
    fc18:	dc400117 	ldw	r17,4(sp)
    fc1c:	dc000017 	ldw	r16,0(sp)
    fc20:	dec00504 	addi	sp,sp,20
    fc24:	f800283a 	ret

0000fc28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fc28:	defffa04 	addi	sp,sp,-24
    fc2c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fc30:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fc34:	dd000415 	stw	r20,16(sp)
    fc38:	dfc00515 	stw	ra,20(sp)
    fc3c:	dcc00315 	stw	r19,12(sp)
    fc40:	dc800215 	stw	r18,8(sp)
    fc44:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fc48:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fc4c:	85001626 	beq	r16,r20,fca8 <alt_find_file+0x80>
    fc50:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fc54:	04c00bc4 	movi	r19,47
    fc58:	00000806 	br	fc7c <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fc5c:	9185883a 	add	r2,r18,r6
    fc60:	10800007 	ldb	r2,0(r2)
    fc64:	14c00126 	beq	r2,r19,fc6c <alt_find_file+0x44>
    fc68:	1000021e 	bne	r2,zero,fc74 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    fc6c:	000ffe40 	call	ffe4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fc70:	10001626 	beq	r2,zero,fccc <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fc74:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fc78:	85000b26 	beq	r16,r20,fca8 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    fc7c:	84400217 	ldw	r17,8(r16)
    fc80:	8809883a 	mov	r4,r17
    fc84:	00027e00 	call	27e0 <strlen>
    fc88:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    fc8c:	8885883a 	add	r2,r17,r2
    fc90:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fc94:	900b883a 	mov	r5,r18
    fc98:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fc9c:	14ffef1e 	bne	r2,r19,fc5c <__alt_data_end+0xff00fc5c>
    {
      len -= 1;
    fca0:	31bfffc4 	addi	r6,r6,-1
    fca4:	003fed06 	br	fc5c <__alt_data_end+0xff00fc5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fca8:	0005883a 	mov	r2,zero
}
    fcac:	dfc00517 	ldw	ra,20(sp)
    fcb0:	dd000417 	ldw	r20,16(sp)
    fcb4:	dcc00317 	ldw	r19,12(sp)
    fcb8:	dc800217 	ldw	r18,8(sp)
    fcbc:	dc400117 	ldw	r17,4(sp)
    fcc0:	dc000017 	ldw	r16,0(sp)
    fcc4:	dec00604 	addi	sp,sp,24
    fcc8:	f800283a 	ret
    fccc:	8005883a 	mov	r2,r16
    fcd0:	003ff606 	br	fcac <__alt_data_end+0xff00fcac>

0000fcd4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fcd4:	01c00074 	movhi	r7,1
    fcd8:	39c4da04 	addi	r7,r7,4968
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fcdc:	0005883a 	mov	r2,zero
    fce0:	3807883a 	mov	r3,r7
    fce4:	01800804 	movi	r6,32
    fce8:	00000206 	br	fcf4 <alt_get_fd+0x20>
    fcec:	10800044 	addi	r2,r2,1
    fcf0:	11800a26 	beq	r2,r6,fd1c <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fcf4:	19400017 	ldw	r5,0(r3)
    fcf8:	18c00304 	addi	r3,r3,12
    fcfc:	283ffb1e 	bne	r5,zero,fcec <__alt_data_end+0xff00fcec>
    {
      alt_fd_list[i].dev = dev;
    fd00:	10c00324 	muli	r3,r2,12
    fd04:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fd08:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fd0c:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fd10:	1880030e 	bge	r3,r2,fd20 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fd14:	d0a00815 	stw	r2,-32736(gp)
    fd18:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    fd1c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fd20:	f800283a 	ret

0000fd24 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fd24:	00840004 	movi	r2,4096
    fd28:	1140012e 	bgeu	r2,r5,fd30 <alt_icache_flush+0xc>
    fd2c:	100b883a 	mov	r5,r2
    fd30:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fd34:	2005883a 	mov	r2,r4
    fd38:	2140092e 	bgeu	r4,r5,fd60 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fd3c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fd40:	10800804 	addi	r2,r2,32
    fd44:	117ffd36 	bltu	r2,r5,fd3c <__alt_data_end+0xff00fd3c>
    fd48:	0104303a 	nor	r2,zero,r4
    fd4c:	2885883a 	add	r2,r5,r2
    fd50:	1004d17a 	srli	r2,r2,5
    fd54:	10800044 	addi	r2,r2,1
    fd58:	1004917a 	slli	r2,r2,5
    fd5c:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fd60:	210007cc 	andi	r4,r4,31
    fd64:	20000126 	beq	r4,zero,fd6c <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fd68:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fd6c:	0000203a 	flushp
    fd70:	f800283a 	ret

0000fd74 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fd74:	213ffe84 	addi	r4,r4,-6
    fd78:	008003c4 	movi	r2,15
    fd7c:	11001636 	bltu	r2,r4,fdd8 <alt_exception_cause_generated_bad_addr+0x64>
    fd80:	200890ba 	slli	r4,r4,2
    fd84:	00800074 	movhi	r2,1
    fd88:	10bf6604 	addi	r2,r2,-616
    fd8c:	2089883a 	add	r4,r4,r2
    fd90:	20800017 	ldw	r2,0(r4)
    fd94:	1000683a 	jmp	r2
    fd98:	0000fde0 	cmpeqi	zero,zero,1015
    fd9c:	0000fde0 	cmpeqi	zero,zero,1015
    fda0:	0000fdd8 	cmpnei	zero,zero,1015
    fda4:	0000fdd8 	cmpnei	zero,zero,1015
    fda8:	0000fdd8 	cmpnei	zero,zero,1015
    fdac:	0000fde0 	cmpeqi	zero,zero,1015
    fdb0:	0000fdd8 	cmpnei	zero,zero,1015
    fdb4:	0000fdd8 	cmpnei	zero,zero,1015
    fdb8:	0000fde0 	cmpeqi	zero,zero,1015
    fdbc:	0000fde0 	cmpeqi	zero,zero,1015
    fdc0:	0000fdd8 	cmpnei	zero,zero,1015
    fdc4:	0000fde0 	cmpeqi	zero,zero,1015
    fdc8:	0000fdd8 	cmpnei	zero,zero,1015
    fdcc:	0000fdd8 	cmpnei	zero,zero,1015
    fdd0:	0000fdd8 	cmpnei	zero,zero,1015
    fdd4:	0000fde0 	cmpeqi	zero,zero,1015
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fdd8:	0005883a 	mov	r2,zero
    fddc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fde0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fde4:	f800283a 	ret

0000fde8 <atexit>:
    fde8:	200b883a 	mov	r5,r4
    fdec:	000f883a 	mov	r7,zero
    fdf0:	000d883a 	mov	r6,zero
    fdf4:	0009883a 	mov	r4,zero
    fdf8:	00100601 	jmpi	10060 <__register_exitproc>

0000fdfc <exit>:
    fdfc:	defffe04 	addi	sp,sp,-8
    fe00:	000b883a 	mov	r5,zero
    fe04:	dc000015 	stw	r16,0(sp)
    fe08:	dfc00115 	stw	ra,4(sp)
    fe0c:	2021883a 	mov	r16,r4
    fe10:	00101780 	call	10178 <__call_exitprocs>
    fe14:	00800074 	movhi	r2,1
    fe18:	10896004 	addi	r2,r2,9600
    fe1c:	11000017 	ldw	r4,0(r2)
    fe20:	20800f17 	ldw	r2,60(r4)
    fe24:	10000126 	beq	r2,zero,fe2c <exit+0x30>
    fe28:	103ee83a 	callr	r2
    fe2c:	8009883a 	mov	r4,r16
    fe30:	00102f80 	call	102f8 <_exit>

0000fe34 <memalign>:
    fe34:	00800074 	movhi	r2,1
    fe38:	10896104 	addi	r2,r2,9604
    fe3c:	280d883a 	mov	r6,r5
    fe40:	200b883a 	mov	r5,r4
    fe44:	11000017 	ldw	r4,0(r2)
    fe48:	000fe4c1 	jmpi	fe4c <_memalign_r>

0000fe4c <_memalign_r>:
    fe4c:	00800204 	movi	r2,8
    fe50:	1140532e 	bgeu	r2,r5,ffa0 <_memalign_r+0x154>
    fe54:	defffa04 	addi	sp,sp,-24
    fe58:	dd000415 	stw	r20,16(sp)
    fe5c:	dc400115 	stw	r17,4(sp)
    fe60:	dfc00515 	stw	ra,20(sp)
    fe64:	dcc00315 	stw	r19,12(sp)
    fe68:	dc800215 	stw	r18,8(sp)
    fe6c:	dc000015 	stw	r16,0(sp)
    fe70:	008003c4 	movi	r2,15
    fe74:	2823883a 	mov	r17,r5
    fe78:	2029883a 	mov	r20,r4
    fe7c:	11400136 	bltu	r2,r5,fe84 <_memalign_r+0x38>
    fe80:	04400404 	movi	r17,16
    fe84:	308002c4 	addi	r2,r6,11
    fe88:	00c00584 	movi	r3,22
    fe8c:	18803e2e 	bgeu	r3,r2,ff88 <_memalign_r+0x13c>
    fe90:	04bffe04 	movi	r18,-8
    fe94:	14a4703a 	and	r18,r2,r18
    fe98:	90003d16 	blt	r18,zero,ff90 <_memalign_r+0x144>
    fe9c:	91803c36 	bltu	r18,r6,ff90 <_memalign_r+0x144>
    fea0:	89400404 	addi	r5,r17,16
    fea4:	2c8b883a 	add	r5,r5,r18
    fea8:	a009883a 	mov	r4,r20
    feac:	0001e400 	call	1e40 <_malloc_r>
    feb0:	1027883a 	mov	r19,r2
    feb4:	10004926 	beq	r2,zero,ffdc <_memalign_r+0x190>
    feb8:	a009883a 	mov	r4,r20
    febc:	000eac80 	call	eac8 <__malloc_lock>
    fec0:	880b883a 	mov	r5,r17
    fec4:	9809883a 	mov	r4,r19
    fec8:	9c3ffe04 	addi	r16,r19,-8
    fecc:	000c0a00 	call	c0a0 <__umodsi3>
    fed0:	10001c26 	beq	r2,zero,ff44 <_memalign_r+0xf8>
    fed4:	88bfffc4 	addi	r2,r17,-1
    fed8:	9887883a 	add	r3,r19,r2
    fedc:	0445c83a 	sub	r2,zero,r17
    fee0:	1884703a 	and	r2,r3,r2
    fee4:	10bffe04 	addi	r2,r2,-8
    fee8:	1409c83a 	sub	r4,r2,r16
    feec:	014003c4 	movi	r5,15
    fef0:	8007883a 	mov	r3,r16
    fef4:	29002c0e 	bge	r5,r4,ffa8 <_memalign_r+0x15c>
    fef8:	1021883a 	mov	r16,r2
    fefc:	993fff17 	ldw	r4,-4(r19)
    ff00:	00bfff04 	movi	r2,-4
    ff04:	80c7c83a 	sub	r3,r16,r3
    ff08:	2084703a 	and	r2,r4,r2
    ff0c:	10c5c83a 	sub	r2,r2,r3
    ff10:	11000054 	ori	r4,r2,1
    ff14:	81000115 	stw	r4,4(r16)
    ff18:	8085883a 	add	r2,r16,r2
    ff1c:	11800117 	ldw	r6,4(r2)
    ff20:	980b883a 	mov	r5,r19
    ff24:	a009883a 	mov	r4,r20
    ff28:	31800054 	ori	r6,r6,1
    ff2c:	11800115 	stw	r6,4(r2)
    ff30:	98bfff17 	ldw	r2,-4(r19)
    ff34:	1080004c 	andi	r2,r2,1
    ff38:	10c6b03a 	or	r3,r2,r3
    ff3c:	98ffff15 	stw	r3,-4(r19)
    ff40:	0006c900 	call	6c90 <_free_r>
    ff44:	80c00117 	ldw	r3,4(r16)
    ff48:	00bfff04 	movi	r2,-4
    ff4c:	1884703a 	and	r2,r3,r2
    ff50:	1485c83a 	sub	r2,r2,r18
    ff54:	00c003c4 	movi	r3,15
    ff58:	18801516 	blt	r3,r2,ffb0 <_memalign_r+0x164>
    ff5c:	a009883a 	mov	r4,r20
    ff60:	000eacc0 	call	eacc <__malloc_unlock>
    ff64:	80800204 	addi	r2,r16,8
    ff68:	dfc00517 	ldw	ra,20(sp)
    ff6c:	dd000417 	ldw	r20,16(sp)
    ff70:	dcc00317 	ldw	r19,12(sp)
    ff74:	dc800217 	ldw	r18,8(sp)
    ff78:	dc400117 	ldw	r17,4(sp)
    ff7c:	dc000017 	ldw	r16,0(sp)
    ff80:	dec00604 	addi	sp,sp,24
    ff84:	f800283a 	ret
    ff88:	04800404 	movi	r18,16
    ff8c:	91bfc42e 	bgeu	r18,r6,fea0 <__alt_data_end+0xff00fea0>
    ff90:	00800304 	movi	r2,12
    ff94:	a0800015 	stw	r2,0(r20)
    ff98:	0005883a 	mov	r2,zero
    ff9c:	003ff206 	br	ff68 <__alt_data_end+0xff00ff68>
    ffa0:	300b883a 	mov	r5,r6
    ffa4:	0001e401 	jmpi	1e40 <_malloc_r>
    ffa8:	1461883a 	add	r16,r2,r17
    ffac:	003fd306 	br	fefc <__alt_data_end+0xff00fefc>
    ffb0:	848b883a 	add	r5,r16,r18
    ffb4:	10800054 	ori	r2,r2,1
    ffb8:	28800115 	stw	r2,4(r5)
    ffbc:	80800117 	ldw	r2,4(r16)
    ffc0:	29400204 	addi	r5,r5,8
    ffc4:	a009883a 	mov	r4,r20
    ffc8:	1080004c 	andi	r2,r2,1
    ffcc:	14a4b03a 	or	r18,r2,r18
    ffd0:	84800115 	stw	r18,4(r16)
    ffd4:	0006c900 	call	6c90 <_free_r>
    ffd8:	003fe006 	br	ff5c <__alt_data_end+0xff00ff5c>
    ffdc:	0005883a 	mov	r2,zero
    ffe0:	003fe106 	br	ff68 <__alt_data_end+0xff00ff68>

0000ffe4 <memcmp>:
    ffe4:	01c000c4 	movi	r7,3
    ffe8:	3980192e 	bgeu	r7,r6,10050 <memcmp+0x6c>
    ffec:	2144b03a 	or	r2,r4,r5
    fff0:	11c4703a 	and	r2,r2,r7
    fff4:	10000f26 	beq	r2,zero,10034 <memcmp+0x50>
    fff8:	20800003 	ldbu	r2,0(r4)
    fffc:	28c00003 	ldbu	r3,0(r5)
   10000:	10c0151e 	bne	r2,r3,10058 <memcmp+0x74>
   10004:	31bfff84 	addi	r6,r6,-2
   10008:	01ffffc4 	movi	r7,-1
   1000c:	00000406 	br	10020 <memcmp+0x3c>
   10010:	20800003 	ldbu	r2,0(r4)
   10014:	28c00003 	ldbu	r3,0(r5)
   10018:	31bfffc4 	addi	r6,r6,-1
   1001c:	10c00e1e 	bne	r2,r3,10058 <memcmp+0x74>
   10020:	21000044 	addi	r4,r4,1
   10024:	29400044 	addi	r5,r5,1
   10028:	31fff91e 	bne	r6,r7,10010 <__alt_data_end+0xff010010>
   1002c:	0005883a 	mov	r2,zero
   10030:	f800283a 	ret
   10034:	20c00017 	ldw	r3,0(r4)
   10038:	28800017 	ldw	r2,0(r5)
   1003c:	18bfee1e 	bne	r3,r2,fff8 <__alt_data_end+0xff00fff8>
   10040:	31bfff04 	addi	r6,r6,-4
   10044:	21000104 	addi	r4,r4,4
   10048:	29400104 	addi	r5,r5,4
   1004c:	39bff936 	bltu	r7,r6,10034 <__alt_data_end+0xff010034>
   10050:	303fe91e 	bne	r6,zero,fff8 <__alt_data_end+0xff00fff8>
   10054:	003ff506 	br	1002c <__alt_data_end+0xff01002c>
   10058:	10c5c83a 	sub	r2,r2,r3
   1005c:	f800283a 	ret

00010060 <__register_exitproc>:
   10060:	defffa04 	addi	sp,sp,-24
   10064:	dc000315 	stw	r16,12(sp)
   10068:	04000074 	movhi	r16,1
   1006c:	84096004 	addi	r16,r16,9600
   10070:	80c00017 	ldw	r3,0(r16)
   10074:	dc400415 	stw	r17,16(sp)
   10078:	dfc00515 	stw	ra,20(sp)
   1007c:	18805217 	ldw	r2,328(r3)
   10080:	2023883a 	mov	r17,r4
   10084:	10003726 	beq	r2,zero,10164 <__register_exitproc+0x104>
   10088:	10c00117 	ldw	r3,4(r2)
   1008c:	010007c4 	movi	r4,31
   10090:	20c00e16 	blt	r4,r3,100cc <__register_exitproc+0x6c>
   10094:	1a000044 	addi	r8,r3,1
   10098:	8800221e 	bne	r17,zero,10124 <__register_exitproc+0xc4>
   1009c:	18c00084 	addi	r3,r3,2
   100a0:	18c7883a 	add	r3,r3,r3
   100a4:	18c7883a 	add	r3,r3,r3
   100a8:	12000115 	stw	r8,4(r2)
   100ac:	10c7883a 	add	r3,r2,r3
   100b0:	19400015 	stw	r5,0(r3)
   100b4:	0005883a 	mov	r2,zero
   100b8:	dfc00517 	ldw	ra,20(sp)
   100bc:	dc400417 	ldw	r17,16(sp)
   100c0:	dc000317 	ldw	r16,12(sp)
   100c4:	dec00604 	addi	sp,sp,24
   100c8:	f800283a 	ret
   100cc:	00800034 	movhi	r2,0
   100d0:	10878604 	addi	r2,r2,7704
   100d4:	10002626 	beq	r2,zero,10170 <__register_exitproc+0x110>
   100d8:	01006404 	movi	r4,400
   100dc:	d9400015 	stw	r5,0(sp)
   100e0:	d9800115 	stw	r6,4(sp)
   100e4:	d9c00215 	stw	r7,8(sp)
   100e8:	0001e180 	call	1e18 <malloc>
   100ec:	d9400017 	ldw	r5,0(sp)
   100f0:	d9800117 	ldw	r6,4(sp)
   100f4:	d9c00217 	ldw	r7,8(sp)
   100f8:	10001d26 	beq	r2,zero,10170 <__register_exitproc+0x110>
   100fc:	81000017 	ldw	r4,0(r16)
   10100:	10000115 	stw	zero,4(r2)
   10104:	02000044 	movi	r8,1
   10108:	22405217 	ldw	r9,328(r4)
   1010c:	0007883a 	mov	r3,zero
   10110:	12400015 	stw	r9,0(r2)
   10114:	20805215 	stw	r2,328(r4)
   10118:	10006215 	stw	zero,392(r2)
   1011c:	10006315 	stw	zero,396(r2)
   10120:	883fde26 	beq	r17,zero,1009c <__alt_data_end+0xff01009c>
   10124:	18c9883a 	add	r4,r3,r3
   10128:	2109883a 	add	r4,r4,r4
   1012c:	1109883a 	add	r4,r2,r4
   10130:	21802215 	stw	r6,136(r4)
   10134:	01800044 	movi	r6,1
   10138:	12406217 	ldw	r9,392(r2)
   1013c:	30cc983a 	sll	r6,r6,r3
   10140:	4992b03a 	or	r9,r9,r6
   10144:	12406215 	stw	r9,392(r2)
   10148:	21c04215 	stw	r7,264(r4)
   1014c:	01000084 	movi	r4,2
   10150:	893fd21e 	bne	r17,r4,1009c <__alt_data_end+0xff01009c>
   10154:	11006317 	ldw	r4,396(r2)
   10158:	218cb03a 	or	r6,r4,r6
   1015c:	11806315 	stw	r6,396(r2)
   10160:	003fce06 	br	1009c <__alt_data_end+0xff01009c>
   10164:	18805304 	addi	r2,r3,332
   10168:	18805215 	stw	r2,328(r3)
   1016c:	003fc606 	br	10088 <__alt_data_end+0xff010088>
   10170:	00bfffc4 	movi	r2,-1
   10174:	003fd006 	br	100b8 <__alt_data_end+0xff0100b8>

00010178 <__call_exitprocs>:
   10178:	defff504 	addi	sp,sp,-44
   1017c:	df000915 	stw	fp,36(sp)
   10180:	dd400615 	stw	r21,24(sp)
   10184:	dc800315 	stw	r18,12(sp)
   10188:	dfc00a15 	stw	ra,40(sp)
   1018c:	ddc00815 	stw	r23,32(sp)
   10190:	dd800715 	stw	r22,28(sp)
   10194:	dd000515 	stw	r20,20(sp)
   10198:	dcc00415 	stw	r19,16(sp)
   1019c:	dc400215 	stw	r17,8(sp)
   101a0:	dc000115 	stw	r16,4(sp)
   101a4:	d9000015 	stw	r4,0(sp)
   101a8:	2839883a 	mov	fp,r5
   101ac:	04800044 	movi	r18,1
   101b0:	057fffc4 	movi	r21,-1
   101b4:	00800074 	movhi	r2,1
   101b8:	10896004 	addi	r2,r2,9600
   101bc:	12000017 	ldw	r8,0(r2)
   101c0:	45005217 	ldw	r20,328(r8)
   101c4:	44c05204 	addi	r19,r8,328
   101c8:	a0001c26 	beq	r20,zero,1023c <__call_exitprocs+0xc4>
   101cc:	a0800117 	ldw	r2,4(r20)
   101d0:	15ffffc4 	addi	r23,r2,-1
   101d4:	b8000d16 	blt	r23,zero,1020c <__call_exitprocs+0x94>
   101d8:	14000044 	addi	r16,r2,1
   101dc:	8421883a 	add	r16,r16,r16
   101e0:	8421883a 	add	r16,r16,r16
   101e4:	84402004 	addi	r17,r16,128
   101e8:	a463883a 	add	r17,r20,r17
   101ec:	a421883a 	add	r16,r20,r16
   101f0:	e0001e26 	beq	fp,zero,1026c <__call_exitprocs+0xf4>
   101f4:	80804017 	ldw	r2,256(r16)
   101f8:	e0801c26 	beq	fp,r2,1026c <__call_exitprocs+0xf4>
   101fc:	bdffffc4 	addi	r23,r23,-1
   10200:	843fff04 	addi	r16,r16,-4
   10204:	8c7fff04 	addi	r17,r17,-4
   10208:	bd7ff91e 	bne	r23,r21,101f0 <__alt_data_end+0xff0101f0>
   1020c:	00800034 	movhi	r2,0
   10210:	10878b04 	addi	r2,r2,7724
   10214:	10000926 	beq	r2,zero,1023c <__call_exitprocs+0xc4>
   10218:	a0800117 	ldw	r2,4(r20)
   1021c:	1000301e 	bne	r2,zero,102e0 <__call_exitprocs+0x168>
   10220:	a0800017 	ldw	r2,0(r20)
   10224:	10003226 	beq	r2,zero,102f0 <__call_exitprocs+0x178>
   10228:	a009883a 	mov	r4,r20
   1022c:	98800015 	stw	r2,0(r19)
   10230:	0001e2c0 	call	1e2c <free>
   10234:	9d000017 	ldw	r20,0(r19)
   10238:	a03fe41e 	bne	r20,zero,101cc <__alt_data_end+0xff0101cc>
   1023c:	dfc00a17 	ldw	ra,40(sp)
   10240:	df000917 	ldw	fp,36(sp)
   10244:	ddc00817 	ldw	r23,32(sp)
   10248:	dd800717 	ldw	r22,28(sp)
   1024c:	dd400617 	ldw	r21,24(sp)
   10250:	dd000517 	ldw	r20,20(sp)
   10254:	dcc00417 	ldw	r19,16(sp)
   10258:	dc800317 	ldw	r18,12(sp)
   1025c:	dc400217 	ldw	r17,8(sp)
   10260:	dc000117 	ldw	r16,4(sp)
   10264:	dec00b04 	addi	sp,sp,44
   10268:	f800283a 	ret
   1026c:	a0800117 	ldw	r2,4(r20)
   10270:	80c00017 	ldw	r3,0(r16)
   10274:	10bfffc4 	addi	r2,r2,-1
   10278:	15c01426 	beq	r2,r23,102cc <__call_exitprocs+0x154>
   1027c:	80000015 	stw	zero,0(r16)
   10280:	183fde26 	beq	r3,zero,101fc <__alt_data_end+0xff0101fc>
   10284:	95c8983a 	sll	r4,r18,r23
   10288:	a0806217 	ldw	r2,392(r20)
   1028c:	a5800117 	ldw	r22,4(r20)
   10290:	2084703a 	and	r2,r4,r2
   10294:	10000b26 	beq	r2,zero,102c4 <__call_exitprocs+0x14c>
   10298:	a0806317 	ldw	r2,396(r20)
   1029c:	2088703a 	and	r4,r4,r2
   102a0:	20000c1e 	bne	r4,zero,102d4 <__call_exitprocs+0x15c>
   102a4:	89400017 	ldw	r5,0(r17)
   102a8:	d9000017 	ldw	r4,0(sp)
   102ac:	183ee83a 	callr	r3
   102b0:	a0800117 	ldw	r2,4(r20)
   102b4:	15bfbf1e 	bne	r2,r22,101b4 <__alt_data_end+0xff0101b4>
   102b8:	98800017 	ldw	r2,0(r19)
   102bc:	153fcf26 	beq	r2,r20,101fc <__alt_data_end+0xff0101fc>
   102c0:	003fbc06 	br	101b4 <__alt_data_end+0xff0101b4>
   102c4:	183ee83a 	callr	r3
   102c8:	003ff906 	br	102b0 <__alt_data_end+0xff0102b0>
   102cc:	a5c00115 	stw	r23,4(r20)
   102d0:	003feb06 	br	10280 <__alt_data_end+0xff010280>
   102d4:	89000017 	ldw	r4,0(r17)
   102d8:	183ee83a 	callr	r3
   102dc:	003ff406 	br	102b0 <__alt_data_end+0xff0102b0>
   102e0:	a0800017 	ldw	r2,0(r20)
   102e4:	a027883a 	mov	r19,r20
   102e8:	1029883a 	mov	r20,r2
   102ec:	003fb606 	br	101c8 <__alt_data_end+0xff0101c8>
   102f0:	0005883a 	mov	r2,zero
   102f4:	003ffb06 	br	102e4 <__alt_data_end+0xff0102e4>

000102f8 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   102f8:	20000226 	beq	r4,zero,10304 <_exit+0xc>
    ALT_SIM_FAIL();
   102fc:	002af070 	cmpltui	zero,zero,43969
   10300:	003fff06 	br	10300 <__alt_data_end+0xff010300>
  } else {
    ALT_SIM_PASS();
   10304:	002af0b0 	cmpltui	zero,zero,43970
   10308:	003ffd06 	br	10300 <__alt_data_end+0xff010300>
