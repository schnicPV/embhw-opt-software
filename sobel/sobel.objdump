
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001082c memsz 0x0001082c flags r-x
    LOAD off    0x0001184c vaddr 0x0001084c paddr 0x00012340 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013e34 vaddr 0x00013e34 paddr 0x00013e34 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ff08  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b8  00010094  00010094  00011094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  0001084c  00012340  0001184c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00013e34  00013e34  00013e34  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00013fc4  00013fc4  00013340  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013340  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d8  00000000  00000000  00013368  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028a0e  00000000  00000000  00014440  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a81b  00000000  00000000  0003ce4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ccf5  00000000  00000000  00047669  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002274  00000000  00000000  00054360  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ec3  00000000  00000000  000565d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c263  00000000  00000000  0005a497  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000766fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c38  00000000  00000000  00076760  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007bdda  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007bddd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007bde9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007bdea  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007bdeb  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007bdef  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007bdf3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007bdf7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007be00  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007be09  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007be12  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0007be1d  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007be6b  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000786e6  00000000  00000000  00081943  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
00010094 l    d  .rodata	00000000 .rodata
0001084c l    d  .rwdata	00000000 .rwdata
00013e34 l    d  .bss	00000000 .bss
00013fc4 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000105aa l     O .rodata	00000010 zeroes.4404
00004814 l     F .text	000000bc __sbprintf
000105ba l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004a24 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006554 l     F .text	00000008 __fp_unlock
00006568 l     F .text	0000019c __sinit.part.1
00006704 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010c54 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011098 l     O .rwdata	00000020 lc_ctype_charset
00011078 l     O .rwdata	00000020 lc_message_charset
000110b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000105ec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000092a0 l     F .text	000000fc __sprint_r.part.0
00010720 l     O .rodata	00000010 blanks.4348
00010710 l     O .rodata	00000010 zeroes.4349
0000a82c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e5a4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012330 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011298 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000eb8c l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000ebd8 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f10c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013e98 g     O .bss	00000004 alt_instruction_exception_handler
00008938 g     F .text	00000074 _mprec_log10
00008a24 g     F .text	0000008c __any_on
0000adc8 g     F .text	00000054 _isatty_r
000105f8 g     O .rodata	00000028 __mprec_tinytens
0000e7f0 g     F .text	00000060 alt_main
00002440 g     F .text	000000c0 _puts_r
00013ec4 g     O .bss	00000100 alt_irq
0000ae1c g     F .text	00000060 _lseek_r
0001054f g     O .rodata	00000009 gy_array
00012340 g       *ABS*	00000000 __flash_rwdata_start
0000d014 g     F .text	00000088 .hidden __eqdf2
00013fc4 g       *ABS*	00000000 __alt_heap_start
00002404 g     F .text	0000003c printf
0000b034 g     F .text	0000009c _wcrtomb_r
00009160 g     F .text	0000005c __sseek
000068a4 g     F .text	00000010 __sinit
0000aedc g     F .text	00000140 __swbuf_r
0000736c g     F .text	0000007c _setlocale_r
0000670c g     F .text	00000068 __sfmoreglue
0000e854 g     F .text	00000004 __malloc_unlock
00000910 g     F .text	00000014 LCD_Write_Command
00013e44 g     O .bss	00000004 sobel_width
00013e84 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007830 g     F .text	0000015c memmove
00000924 g     F .text	00000014 LCD_Write_Data
0000688c g     F .text	00000018 _cleanup
00007ab4 g     F .text	000000a8 _Balloc
0000d09c g     F .text	000000dc .hidden __gtdf2
0000f930 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004f0 g     F .text	00000024 cam_get_xsize
0000ad6c g     F .text	0000005c _fstat_r
00013e68 g     O .bss	00000004 errno
000090dc g     F .text	00000008 __seofread
00013e7c g     O .bss	00000004 alt_argv
0001a2f8 g       *ABS*	00000000 _gp
0000e9fc g     F .text	00000004 usleep
0000e9a0 g     F .text	0000005c alt_uncached_malloc
000005b0 g     F .text	00000074 cam_set_image_pointer
000110f0 g     O .rwdata	00000180 alt_fd_list
00001b80 g     F .text	00000010 vga_set_pointer
0000f938 g     F .text	00000078 alt_find_dev
000076e8 g     F .text	00000148 memcpy
0000655c g     F .text	0000000c _cleanup_r
0000e300 g     F .text	000000dc .hidden __floatsidf
0000f58c g     F .text	00000104 alt_io_redirect
0000d178 g     F .text	000000f4 .hidden __ltdf2
00010094 g       *ABS*	00000000 __DTOR_END__
00002500 g     F .text	00000014 puts
0000fafc g     F .text	00000074 alt_exception_cause_generated_bad_addr
00009014 g     F .text	00000074 __fpclassifyd
00008894 g     F .text	000000a4 __ratio
0000a810 g     F .text	0000001c __vfiprintf_internal
0000ee18 g     F .text	00000154 altera_avalon_jtag_uart_read
00001ba0 g     F .text	00000014 malloc
000023d4 g     F .text	00000030 _printf_r
00000764 g     F .text	00000008 get_grayscale_picture
0000bdc4 g     F .text	00000064 .hidden __udivsi3
000100f4 g     O .rodata	00000128 lens_roll_off_tbl
000001d8 g     F .text	00000318 init_camera
0000e624 g     F .text	00000084 isatty
00010648 g     O .rodata	000000c8 __mprec_tens
000073e8 g     F .text	0000000c __locale_charset
0000faac g     F .text	00000050 alt_icache_flush
00013e64 g     O .bss	00000004 __malloc_top_pad
00012310 g     O .rwdata	00000004 __mb_cur_max
00007418 g     F .text	0000000c _localeconv_r
000014e4 g     F .text	00000140 sobel_x
00007ec0 g     F .text	0000003c __i2b
00006d28 g     F .text	000004bc __sfvwrite_r
00000938 g     F .text	00000414 init_LCD
00002514 g     F .text	00000054 _sbrk_r
000122f8 g     O .rwdata	00000004 pgy_array
00000538 g     F .text	00000078 cam_get_profiling
0000ae7c g     F .text	00000060 _read_r
0000f300 g     F .text	00000040 alt_dcache_flush
00013e48 g     O .bss	00000004 sobel_result
00012318 g     O .rwdata	00000004 alt_max_fd
0000aa60 g     F .text	000000f0 _fclose_r
00006524 g     F .text	00000030 fflush
00013e60 g     O .bss	00000004 __malloc_max_sbrked_mem
00013e3c g     O .bss	00000004 grayscale_array
0000be80 g     F .text	000008ac .hidden __adddf3
00000514 g     F .text	00000024 cam_get_ysize
0000863c g     F .text	0000010c __b2d
0000b794 g     F .text	00000538 .hidden __umoddi3
0000e774 g     F .text	0000007c lseek
0000082c g     F .text	0000008c i2c_short_read
00012308 g     O .rwdata	00000004 _global_impure_ptr
00008ab0 g     F .text	00000564 _realloc_r
00013fc4 g       *ABS*	00000000 __bss_end
0000f524 g     F .text	00000068 alt_iic_isr_register
0000f83c g     F .text	000000f4 alt_tick
0000b21c g     F .text	00000578 .hidden __udivdi3
0000acc8 g     F .text	00000024 _fputwc_r
00010620 g     O .rodata	00000028 __mprec_bigtens
00007ca4 g     F .text	00000104 __s2b
0000e3dc g     F .text	000000a8 .hidden __floatunsidf
0000837c g     F .text	00000060 __mcmp
000068c4 g     F .text	00000018 __fp_lock_all
0000f50c g     F .text	00000018 alt_ic_irq_enabled
00013e34 g     O .bss	00000004 grayscape_height
0000f808 g     F .text	00000034 alt_alarm_stop
00013e8c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
00011270 g     O .rwdata	00000028 alt_dev_null
00000dd8 g     F .text	00000078 transfer_LCD_with_dma
00001abc g     F .text	000000b4 sobel_complete
0000f340 g     F .text	00000018 alt_dcache_flush_all
00007da8 g     F .text	00000068 __hi0bits
0000e280 g     F .text	00000080 .hidden __fixdfsi
00012340 g       *ABS*	00000000 __ram_rwdata_end
0001231c g     O .rwdata	00000008 alt_dev_list
0000ea00 g     F .text	000000c4 write
0000f200 g     F .text	00000008 alt_timestamp_freq
0001084c g       *ABS*	00000000 __ram_rodata_end
0000e5ac g     F .text	00000078 fstat
0000d178 g     F .text	000000f4 .hidden __ledf2
000080f4 g     F .text	00000140 __pow5mult
000093b4 g     F .text	0000145c ___vfiprintf_internal_r
00013e74 g     O .bss	00000004 __nlocale_changed
0000be28 g     F .text	00000058 .hidden __umodsi3
00001b70 g     F .text	00000008 GetSobel_rgb
00013fc4 g       *ABS*	00000000 end
00001b78 g     F .text	00000008 GetSobelResult
00000648 g     F .text	00000020 take_picture_blocking
000006a8 g     F .text	00000014 DIPSW_get_value
000018b8 g     F .text	00000168 sobel_y_with_rgb
0000ece0 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000638 g     F .text	00000010 current_image_pointer
00010094 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f148 g     F .text	00000048 alt_avalon_timer_sc_init
0000e484 g     F .text	00000064 .hidden __clzsi2
0000ef6c g     F .text	000001a0 altera_avalon_jtag_uart_write
000068b4 g     F .text	00000004 __sfp_lock_acquire
00007604 g     F .text	000000e4 memchr
00002600 g     F .text	000021f8 ___vfprintf_internal_r
00006a18 g     F .text	00000310 _free_r
000073f4 g     F .text	00000010 __locale_mb_cur_max
000017a0 g     F .text	00000118 sobel_y
0001021c g     O .rodata	00000140 noise_reduction_reg_settings_array
0000ff00 g     F .text	00000180 __call_exitprocs
00013e70 g     O .bss	00000004 __mlocale_changed
00012300 g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000004c _start
00013e94 g     O .bss	00000004 _alt_tick_rate
00008234 g     F .text	00000148 __lshift
00013e90 g     O .bss	00000004 _alt_nticks
0000e858 g     F .text	000000c8 read
0000eae4 g     F .text	0000006c alt_sys_init
00001624 g     F .text	0000017c sobel_x_with_rgb
0000fde8 g     F .text	00000118 __register_exitproc
00007efc g     F .text	000001f8 __multiply
0000ed58 g     F .text	0000004c altera_avalon_jtag_uart_close
0001084c g       *ABS*	00000000 __ram_rwdata_start
00010094 g       *ABS*	00000000 __ram_rodata_start
00013e9c g     O .bss	00000028 __malloc_current_mallinfo
00008748 g     F .text	0000014c __d2b
00013e4c g     O .bss	00000004 sobel_height
00000668 g     F .text	00000014 enable_continues_mode
0000eb50 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00001344 g     F .text	000000e4 init_sobel_arrays
0000fa5c g     F .text	00000050 alt_get_fd
0000f288 g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000a948 g     F .text	00000054 _close_r
0000fd6c g     F .text	0000007c memcmp
0000eb70 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00013fc4 g       *ABS*	00000000 __alt_stack_base
0000eb80 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
000048d0 g     F .text	00000154 __swsetup_r
0000c72c g     F .text	000008e8 .hidden __divdf3
00006774 g     F .text	00000118 __sfp
000089ac g     F .text	00000078 __copybits
0001084c g     O .rwdata	00000408 __malloc_av_
000068c0 g     F .text	00000004 __sinit_lock_release
0000d26c g     F .text	00000718 .hidden __muldf3
00009088 g     F .text	00000054 __sread
0000f9b0 g     F .text	000000ac alt_find_file
0000f358 g     F .text	0000006c alt_dev_llist_insert
0000e850 g     F .text	00000004 __malloc_lock
0000e944 g     F .text	0000004c sbrk
000064c8 g     F .text	0000005c _fflush_r
0000a99c g     F .text	000000c4 _calloc_r
00013e34 g       *ABS*	00000000 __bss_start
0000798c g     F .text	00000128 memset
00000e50 g     F .text	000004f4 main
00013e78 g     O .bss	00000004 alt_envp
00013e5c g     O .bss	00000004 __malloc_max_total_mem
00000754 g     F .text	00000008 get_grayscale_width
0000eb60 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b01c g     F .text	00000018 __swbuf
00013e50 g     O .bss	00000004 sobel_x_result
000091bc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ab50 g     F .text	00000014 fclose
0000f190 g     F .text	0000003c alt_timestamp_start
00004c24 g     F .text	00001688 _dtoa_r
00001bc8 g     F .text	0000080c _malloc_r
0000b190 g     F .text	00000030 __ascii_wctomb
0001232c g     O .rwdata	00000004 alt_errno
000071e4 g     F .text	000000c4 _fwalk
0000bccc g     F .text	00000084 .hidden __divsi3
000068f4 g     F .text	00000124 _malloc_trim_r
00010094 g       *ABS*	00000000 __CTOR_END__
00013e38 g     O .bss	00000004 grayscale_width
000091c4 g     F .text	000000dc strcmp
00000d4c g     F .text	0000008c transfer_LCD_no_dma
00010094 g       *ABS*	00000000 __flash_rodata_start
00010094 g       *ABS*	00000000 __DTOR_LIST__
0000d014 g     F .text	00000088 .hidden __nedf2
0001035c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eac4 g     F .text	00000020 alt_irq_init
0000e920 g     F .text	00000024 alt_release_fd
00000784 g     F .text	000000a8 i2c_auto_detect
0000fbbc g     F .text	00000018 memalign
00010730 g     O .rodata	00000100 .hidden __clz_tab
00000624 g     F .text	00000014 current_image_valid
00013e6c g     O .bss	00000004 _PathLocale
0000076c g     F .text	00000018 i2c_busy_wait
0000fb70 g     F .text	00000014 atexit
0000a8e8 g     F .text	00000060 _write_r
00007424 g     F .text	00000018 setlocale
0001230c g     O .rwdata	00000004 _impure_ptr
00013e80 g     O .bss	00000004 alt_argc
000062ac g     F .text	0000021c __sflush_r
00013e88 g     O .bss	00000004 altera_avalon_timer_ts_base
0000f428 g     F .text	00000064 _do_dtors
00007410 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000085d8 g     F .text	00000064 __ulp
000068dc g     F .text	00000018 __fp_unlock_all
00012324 g     O .rwdata	00000008 alt_fs_list
00013e54 g     O .bss	00000004 sobel_y_result
000008b8 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013e40 g     O .bss	00000002 LCD_height
0000743c g     F .text	0000000c localeconv
0000f1cc g     F .text	00000034 alt_timestamp
00001b90 g     F .text	00000010 vga_set_swap
0000f498 g     F .text	00000004 alt_ic_isr_register
00001a20 g     F .text	0000009c sobel_threshold
00012340 g       *ABS*	00000000 _edata
000122fc g     O .rwdata	00000004 pgx_array
00013fc4 g       *ABS*	00000000 _end
0000ab64 g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000eda4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00010558 g     O .rodata	00000009 gx_array
0000f4d4 g     F .text	00000038 alt_ic_irq_disable
000090e4 g     F .text	0000007c __swrite
00012304 g     O .rwdata	00000004 __malloc_trim_threshold
00013e42 g     O .bss	00000002 LCD_width
000006bc g     F .text	00000098 conv_grayscale
00007404 g     F .text	0000000c __locale_msgcharset
0000fb84 g     F .text	00000038 exit
000072a8 g     F .text	000000c4 _fwalk_reent
000083dc g     F .text	000001fc __mdiff
0000bd50 g     F .text	00000074 .hidden __modsi3
0000fbd4 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000068b8 g     F .text	00000004 __sfp_lock_release
0000075c g     F .text	00000008 get_grayscale_height
00010080 g     F .text	00000014 _exit
00001428 g     F .text	000000bc sobel_mac
0000f208 g     F .text	00000080 alt_alarm_start
00007448 g     F .text	000001bc __smakebuf_r
00013e58 g     O .bss	00000004 sobel_rgb565
00002568 g     F .text	00000098 strlen
0000f690 g     F .text	00000178 open
0000d09c g     F .text	000000dc .hidden __gedf2
0000e990 g     F .text	00000010 alt_uncached_free
00012314 g     O .rwdata	00000004 __wctomb
0000939c g     F .text	00000018 __sprint_r
0000f48c g     F .text	0000000c alt_icache_flush_all
00012334 g     O .rwdata	00000004 alt_priority_mask
0000f49c g     F .text	00000038 alt_ic_irq_enable
000047f8 g     F .text	0000001c __vfprintf_internal
0000b1c0 g     F .text	0000005c _wctomb_r
0000d984 g     F .text	000008fc .hidden __subdf3
00007e10 g     F .text	000000b0 __lo0bits
00012338 g     O .rwdata	00000008 alt_alarm_list
0000f3c4 g     F .text	00000064 _do_ctors
0000b0d0 g     F .text	000000c0 wcrtomb
0000e4e8 g     F .text	000000bc close
0000e6a8 g     F .text	000000cc alt_load
0000acec g     F .text	00000080 fputwc
00001bb4 g     F .text	00000014 free
000068bc g     F .text	00000004 __sinit_lock_acquire
00007b84 g     F .text	00000120 __multadd
00007b5c g     F .text	00000028 _Bfree
0000067c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	840fb104 	addi	r16,r16,16068
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a6e817 	ldw	r2,-25696(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     18c:	00880014 	movui	r2,8192
#endif

0:
    initd 0(r2)
     190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     198:	00bffd16 	blt	zero,r2,190 <__alt_data_end+0xff000190>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     19c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1a4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a8:	d6a8be14 	ori	gp,gp,41720
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1ac:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1b0:	108f8d14 	ori	r2,r2,15924

    movhi r3, %hi(__bss_end)
     1b4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b8:	18cff114 	ori	r3,r3,16324

    beq r2, r3, 1f
     1bc:	10c00326 	beq	r2,r3,1cc <_start+0x40>

0:
    stw zero, (r2)
     1c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c8:	10fffd36 	bltu	r2,r3,1c0 <__alt_data_end+0xff0001c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1cc:	000e6a80 	call	e6a8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1d0:	000e7f00 	call	e7f0 <alt_main>

000001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1d4:	003fff06 	br	1d4 <__alt_data_end+0xff0001d4>

000001d8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1d8:	00804034 	movhi	r2,256
     1dc:	10842744 	addi	r2,r2,4253
     1e0:	00c00084 	movi	r3,2
     1e4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1e8:	00804034 	movhi	r2,256
     1ec:	10841304 	addi	r2,r2,4172
     1f0:	00c00044 	movi	r3,1
     1f4:	10c00025 	stbio	r3,0(r2)
     1f8:	008003f4 	movhi	r2,15
     1fc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     200:	0001883a 	nop
     204:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     208:	103ffd1e 	bne	r2,zero,200 <__alt_data_end+0xff000200>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     20c:	00804034 	movhi	r2,256
     210:	10841304 	addi	r2,r2,4172
     214:	10000025 	stbio	zero,0(r2)
     218:	008003f4 	movhi	r2,15
     21c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     220:	0001883a 	nop
     224:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     228:	103ffd1e 	bne	r2,zero,220 <__alt_data_end+0xff000220>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     230:	01800044 	movi	r6,1
     234:	014ce184 	movi	r5,13190
     238:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     23c:	dfc00315 	stw	ra,12(sp)
     240:	dc800215 	stw	r18,8(sp)
     244:	dc400115 	stw	r17,4(sp)
     248:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     24c:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     250:	000d883a 	mov	r6,zero
     254:	014ce184 	movi	r5,13190
     258:	01001e04 	movi	r4,120
     25c:	00008b80 	call	8b8 <i2c_short_write>
     260:	008003f4 	movhi	r2,15
     264:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     268:	0001883a 	nop
     26c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     270:	103ffd1e 	bne	r2,zero,268 <__alt_data_end+0xff000268>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     274:	01803104 	movi	r6,196
     278:	014c0684 	movi	r5,12314
     27c:	01001e04 	movi	r4,120
     280:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     284:	01800204 	movi	r6,8
     288:	014c8084 	movi	r5,12802
     28c:	01001e04 	movi	r4,120
     290:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     294:	0180c744 	movi	r6,797
     298:	014cfd04 	movi	r5,13300
     29c:	01001e04 	movi	r4,120
     2a0:	00008b80 	call	8b8 <i2c_short_write>
     2a4:	008000b4 	movhi	r2,2
     2a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2ac:	0001883a 	nop
     2b0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2b4:	103ffd1e 	bne	r2,zero,2ac <__alt_data_end+0xff0002ac>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2b8:	01a3c254 	movui	r6,36617
     2bc:	014d0784 	movi	r5,13342
     2c0:	01001e04 	movi	r4,120
     2c4:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2c8:	01805404 	movi	r6,336
     2cc:	014d0704 	movi	r5,13340
     2d0:	01001e04 	movi	r4,120
     2d4:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2d8:	01a3c254 	movui	r6,36617
     2dc:	014d0784 	movi	r5,13342
     2e0:	01001e04 	movi	r4,120
     2e4:	00008b80 	call	8b8 <i2c_short_write>
     2e8:	008000b4 	movhi	r2,2
     2ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2f0:	0001883a 	nop
     2f4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2f8:	103ffd1e 	bne	r2,zero,2f0 <__alt_data_end+0xff0002f0>
     2fc:	04000074 	movhi	r16,1
     300:	8400d704 	addi	r16,r16,860
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     304:	01a3c214 	movui	r6,36616
     308:	014d0784 	movi	r5,13342
     30c:	01001e04 	movi	r4,120
     310:	00008b80 	call	8b8 <i2c_short_write>
     314:	84400084 	addi	r17,r16,2
     318:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     31c:	8980000b 	ldhu	r6,0(r17)
     320:	8140000b 	ldhu	r5,0(r16)
     324:	01001e04 	movi	r4,120
     328:	84000104 	addi	r16,r16,4
     32c:	00008b80 	call	8b8 <i2c_short_write>
     330:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     334:	84bff91e 	bne	r16,r18,31c <__alt_data_end+0xff00031c>
     338:	04000074 	movhi	r16,1
     33c:	84008704 	addi	r16,r16,540
     340:	84400084 	addi	r17,r16,2
     344:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     348:	8980000b 	ldhu	r6,0(r17)
     34c:	8140000b 	ldhu	r5,0(r16)
     350:	01001e04 	movi	r4,120
     354:	84000104 	addi	r16,r16,4
     358:	00008b80 	call	8b8 <i2c_short_write>
     35c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     360:	943ff91e 	bne	r18,r16,348 <__alt_data_end+0xff000348>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     364:	018164c4 	movi	r6,1427
     368:	014d6904 	movi	r5,13732
     36c:	01001e04 	movi	r4,120
     370:	00008b80 	call	8b8 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     374:	0189e644 	movi	r6,10137
     378:	014ce304 	movi	r5,13196
     37c:	01001e04 	movi	r4,120
     380:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     384:	01991004 	movi	r6,25664
     388:	014ce404 	movi	r5,13200
     38c:	01001e04 	movi	r4,120
     390:	00008b80 	call	8b8 <i2c_short_write>
     394:	008000b4 	movhi	r2,2
     398:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     39c:	0001883a 	nop
     3a0:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3a4:	103ffd1e 	bne	r2,zero,39c <__alt_data_end+0xff00039c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     3a8:	0189e6c4 	movi	r6,10139
     3ac:	014ce304 	movi	r5,13196
     3b0:	01001e04 	movi	r4,120
     3b4:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3b8:	01991004 	movi	r6,25664
     3bc:	014ce404 	movi	r5,13200
     3c0:	01001e04 	movi	r4,120
     3c4:	00008b80 	call	8b8 <i2c_short_write>
     3c8:	008000b4 	movhi	r2,2
     3cc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3d0:	0001883a 	nop
     3d4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3d8:	103ffd1e 	bne	r2,zero,3d0 <__alt_data_end+0xff0003d0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3dc:	01a840d4 	movui	r6,41219
     3e0:	014ce304 	movi	r5,13196
     3e4:	01001e04 	movi	r4,120
     3e8:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3ec:	01800144 	movi	r6,5
     3f0:	014ce404 	movi	r5,13200
     3f4:	01001e04 	movi	r4,120
     3f8:	00008b80 	call	8b8 <i2c_short_write>
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     404:	0001883a 	nop
     408:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     40c:	103ffd1e 	bne	r2,zero,404 <__alt_data_end+0xff000404>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     410:	01a840d4 	movui	r6,41219
     414:	014ce304 	movi	r5,13196
     418:	01001e04 	movi	r4,120
     41c:	00008b80 	call	8b8 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     420:	01800184 	movi	r6,6
     424:	014ce404 	movi	r5,13200
     428:	01001e04 	movi	r4,120
     42c:	00008b80 	call	8b8 <i2c_short_write>
     430:	008000b4 	movhi	r2,2
     434:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     438:	0001883a 	nop
     43c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     440:	103ffd1e 	bne	r2,zero,438 <__alt_data_end+0xff000438>
     444:	04000074 	movhi	r16,1
     448:	84003d04 	addi	r16,r16,244
     44c:	84400084 	addi	r17,r16,2
     450:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     454:	8980000b 	ldhu	r6,0(r17)
     458:	8140000b 	ldhu	r5,0(r16)
     45c:	01001e04 	movi	r4,120
     460:	84000104 	addi	r16,r16,4
     464:	00008b80 	call	8b8 <i2c_short_write>
     468:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     46c:	943ff91e 	bne	r18,r16,454 <__alt_data_end+0xff000454>
     470:	008003f4 	movhi	r2,15
     474:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     484:	01800804 	movi	r6,32
     488:	014ccb84 	movi	r5,13102
     48c:	01001e04 	movi	r4,120
     490:	00008b80 	call	8b8 <i2c_short_write>
     494:	008003f4 	movhi	r2,15
     498:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     49c:	0001883a 	nop
     4a0:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     4a4:	103ffd1e 	bne	r2,zero,49c <__alt_data_end+0xff00049c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     4a8:	01800884 	movi	r6,34
     4ac:	014d0104 	movi	r5,13316
     4b0:	01001e04 	movi	r4,120
     4b4:	00008b80 	call	8b8 <i2c_short_write>
     4b8:	008003f4 	movhi	r2,15
     4bc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4c0:	0001883a 	nop
     4c4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4c8:	103ffd1e 	bne	r2,zero,4c0 <__alt_data_end+0xff0004c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4cc:	018009c4 	movi	r6,39
     4d0:	014c1004 	movi	r5,12352
     4d4:	01001e04 	movi	r4,120
}
     4d8:	dfc00317 	ldw	ra,12(sp)
     4dc:	dc800217 	ldw	r18,8(sp)
     4e0:	dc400117 	ldw	r17,4(sp)
     4e4:	dc000017 	ldw	r16,0(sp)
     4e8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4ec:	00008b81 	jmpi	8b8 <i2c_short_write>

000004f0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4f0:	00c04034 	movhi	r3,256
     4f4:	18c41304 	addi	r3,r3,4172
     4f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4fc:	1080010c 	andi	r2,r2,4
     500:	103ffd26 	beq	r2,zero,4f8 <__alt_data_end+0xff0004f8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     504:	00804034 	movhi	r2,256
     508:	10841004 	addi	r2,r2,4160
}
     50c:	1080002b 	ldhuio	r2,0(r2)
     510:	f800283a 	ret

00000514 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     514:	00c04034 	movhi	r3,256
     518:	18c41304 	addi	r3,r3,4172
     51c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     520:	1080010c 	andi	r2,r2,4
     524:	103ffd26 	beq	r2,zero,51c <__alt_data_end+0xff00051c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     528:	00804034 	movhi	r2,256
     52c:	10841104 	addi	r2,r2,4164
}
     530:	1080002b 	ldhuio	r2,0(r2)
     534:	f800283a 	ret

00000538 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     538:	00c04034 	movhi	r3,256
     53c:	18c41304 	addi	r3,r3,4172
     540:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     544:	1080010c 	andi	r2,r2,4
     548:	103ffd26 	beq	r2,zero,540 <__alt_data_end+0xff000540>
	printf("Nr. of bytes each line    : %d\n",
     54c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     550:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     554:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     558:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     55c:	1140002b 	ldhuio	r5,0(r2)
     560:	01000074 	movhi	r4,1
     564:	21002504 	addi	r4,r4,148
     568:	297fffcc 	andi	r5,r5,65535
     56c:	00024040 	call	2404 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     570:	00804034 	movhi	r2,256
     574:	10841104 	addi	r2,r2,4164
     578:	1140002b 	ldhuio	r5,0(r2)
     57c:	01000074 	movhi	r4,1
     580:	21002d04 	addi	r4,r4,180
     584:	297fffcc 	andi	r5,r5,65535
     588:	00024040 	call	2404 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     58c:	00804034 	movhi	r2,256
     590:	10841204 	addi	r2,r2,4168
     594:	1140002b 	ldhuio	r5,0(r2)
     598:	01000074 	movhi	r4,1
     59c:	21003504 	addi	r4,r4,212
     5a0:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     5a4:	dfc00017 	ldw	ra,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     5ac:	00024041 	jmpi	2404 <printf>

000005b0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5b0:	21003fcc 	andi	r4,r4,255
     5b4:	2100201c 	xori	r4,r4,128
     5b8:	213fe004 	addi	r4,r4,-128
     5bc:	00800044 	movi	r2,1
     5c0:	20801226 	beq	r4,r2,60c <cam_set_image_pointer+0x5c>
     5c4:	11000c0e 	bge	r2,r4,5f8 <cam_set_image_pointer+0x48>
     5c8:	00800084 	movi	r2,2
     5cc:	20800626 	beq	r4,r2,5e8 <cam_set_image_pointer+0x38>
     5d0:	008000c4 	movi	r2,3
     5d4:	2080111e 	bne	r4,r2,61c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841704 	addi	r2,r2,4188
     5e0:	11400035 	stwio	r5,0(r2)
     5e4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5e8:	00804034 	movhi	r2,256
     5ec:	10841604 	addi	r2,r2,4184
     5f0:	11400035 	stwio	r5,0(r2)
                break;
     5f4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5f8:	2000091e 	bne	r4,zero,620 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841404 	addi	r2,r2,4176
     604:	11400035 	stwio	r5,0(r2)
	            break;
     608:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     60c:	00804034 	movhi	r2,256
     610:	10841504 	addi	r2,r2,4180
     614:	11400035 	stwio	r5,0(r2)
                break;
     618:	f800283a 	ret
     61c:	f800283a 	ret
     620:	f800283a 	ret

00000624 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     624:	00804034 	movhi	r2,256
     628:	10841304 	addi	r2,r2,4172
     62c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     630:	1080800c 	andi	r2,r2,512
     634:	f800283a 	ret

00000638 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     638:	00804034 	movhi	r2,256
     63c:	10841404 	addi	r2,r2,4176
}
     640:	10800037 	ldwio	r2,0(r2)
     644:	f800283a 	ret

00000648 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     648:	00c04034 	movhi	r3,256
     64c:	18c41304 	addi	r3,r3,4172
     650:	00800204 	movi	r2,8
     654:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     658:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     65c:	1080020c 	andi	r2,r2,8
     660:	103ffd1e 	bne	r2,zero,658 <__alt_data_end+0xff000658>
}
     664:	f800283a 	ret

00000668 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     668:	00804034 	movhi	r2,256
     66c:	10841304 	addi	r2,r2,4172
     670:	00c00404 	movi	r3,16
     674:	10c0002d 	sthio	r3,0(r2)
     678:	f800283a 	ret

0000067c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     67c:	00c04034 	movhi	r3,256
     680:	18c41304 	addi	r3,r3,4172
     684:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     688:	1080200c 	andi	r2,r2,128
     68c:	1000021e 	bne	r2,zero,698 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     690:	0005883a 	mov	r2,zero
}
     694:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     698:	00804004 	movi	r2,256
     69c:	1880002d 	sthio	r2,0(r3)
		return 1;
     6a0:	00800044 	movi	r2,1
     6a4:	f800283a 	ret

000006a8 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     6a8:	00804034 	movhi	r2,256
     6ac:	10842804 	addi	r2,r2,4256
     6b0:	10800023 	ldbuio	r2,0(r2)
}
     6b4:	0084303a 	nor	r2,zero,r2
     6b8:	f800283a 	ret

000006bc <conv_grayscale>:
  unsigned int k,gray;
  unsigned int kmax = width*height;
  unsigned int *pixels = (unsigned int *)picture;// , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6bc:	d0a6d117 	ldw	r2,-25788(gp)
int grayscale_width = 0;
int grayscape_height = 0;

unsigned char* conv_grayscale(void *picture,
                int width,
                int height) {
     6c0:	defffd04 	addi	sp,sp,-12
     6c4:	dc400115 	stw	r17,4(sp)
     6c8:	dc000015 	stw	r16,0(sp)
     6cc:	dfc00215 	stw	ra,8(sp)
  unsigned int k,gray;
  unsigned int kmax = width*height;
  unsigned int *pixels = (unsigned int *)picture;// , rgb;
  grayscale_width = width;
     6d0:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     6d4:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

unsigned char* conv_grayscale(void *picture,
                int width,
                int height) {
     6d8:	2021883a 	mov	r16,r4
  unsigned int k,gray;
  unsigned int kmax = width*height;
     6dc:	29a3383a 	mul	r17,r5,r6
  unsigned int *pixels = (unsigned int *)picture;// , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6e0:	10000226 	beq	r2,zero,6ec <conv_grayscale+0x30>
    free(grayscale_array);
     6e4:	1009883a 	mov	r4,r2
     6e8:	0001bb40 	call	1bb4 <free>
  grayscale_array = (unsigned char *) malloc(kmax);
     6ec:	8809883a 	mov	r4,r17
     6f0:	0001ba00 	call	1ba0 <malloc>
  for(k = 0; k < (kmax>>2); k++)								// x>>2 <=> x/4
     6f4:	880ed0ba 	srli	r7,r17,2
  unsigned int *pixels = (unsigned int *)picture;// , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
     6f8:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k < (kmax>>2); k++)								// x>>2 <=> x/4
     6fc:	38001026 	beq	r7,zero,740 <conv_grayscale+0x84>
     700:	39cf883a 	add	r7,r7,r7
     704:	8009883a 	mov	r4,r16
     708:	81800104 	addi	r6,r16,4
     70c:	39cf883a 	add	r7,r7,r7
     710:	0005883a 	mov	r2,zero
  {
	  gray = ALT_CI_CUSTOM_GRAY_0(pixels[k*2], pixels[k*2+1]);
     714:	20c00017 	ldw	r3,0(r4)
     718:	31400017 	ldw	r5,0(r6)
     71c:	194bc032 	custom	0,r5,r3,r5
	  IOWR_32DIRECT(grayscale_array, k*4, gray);
     720:	d0e6d117 	ldw	r3,-25788(gp)
     724:	1887883a 	add	r3,r3,r2
     728:	19400035 	stwio	r5,0(r3)
     72c:	10800104 	addi	r2,r2,4
     730:	21000204 	addi	r4,r4,8
     734:	31800204 	addi	r6,r6,8
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
  for(k = 0; k < (kmax>>2); k++)								// x>>2 <=> x/4
     738:	38bff61e 	bne	r7,r2,714 <__alt_data_end+0xff000714>
     73c:	d0a6d117 	ldw	r2,-25788(gp)
  {
	  gray = ALT_CI_CUSTOM_GRAY_0(pixels[k*2], pixels[k*2+1]);
	  IOWR_32DIRECT(grayscale_array, k*4, gray);
  }
  return grayscale_array;
}
     740:	dfc00217 	ldw	ra,8(sp)
     744:	dc400117 	ldw	r17,4(sp)
     748:	dc000017 	ldw	r16,0(sp)
     74c:	dec00304 	addi	sp,sp,12
     750:	f800283a 	ret

00000754 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     754:	d0a6d017 	ldw	r2,-25792(gp)
     758:	f800283a 	ret

0000075c <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     75c:	d0a6cf17 	ldw	r2,-25796(gp)
     760:	f800283a 	ret

00000764 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     764:	d0a6d117 	ldw	r2,-25788(gp)
     768:	f800283a 	ret

0000076c <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     76c:	00c04034 	movhi	r3,256
     770:	18c42704 	addi	r3,r3,4252
     774:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     778:	108000cc 	andi	r2,r2,3
     77c:	103ffd1e 	bne	r2,zero,774 <__alt_data_end+0xff000774>
}
     780:	f800283a 	ret

00000784 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     784:	01004034 	movhi	r4,256
     788:	21042704 	addi	r4,r4,4252
     78c:	00c04034 	movhi	r3,256
     790:	18c42704 	addi	r3,r3,4252
     794:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     798:	108000cc 	andi	r2,r2,3
     79c:	103ffb1e 	bne	r2,zero,78c <__alt_data_end+0xff00078c>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     7a0:	00800104 	movi	r2,4
     7a4:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     7a8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7ac:	108000cc 	andi	r2,r2,3
     7b0:	103ffd1e 	bne	r2,zero,7a8 <__alt_data_end+0xff0007a8>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7b4:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7b8:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7bc:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7c0:	dfc00315 	stw	ra,12(sp)
     7c4:	dc800215 	stw	r18,8(sp)
     7c8:	dc400115 	stw	r17,4(sp)
     7cc:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7d0:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     7d4:	01000074 	movhi	r4,1
     7d8:	21011d04 	addi	r4,r4,1140
     7dc:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     7e0:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     7e4:	00024040 	call	2404 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     7e8:	04800a0e 	bge	zero,r18,814 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     7ec:	04404034 	movhi	r17,256
     7f0:	8c442404 	addi	r17,r17,4240
     7f4:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     7f8:	89800037 	ldwio	r6,0(r17)
     7fc:	01000074 	movhi	r4,1
     800:	800b883a 	mov	r5,r16
     804:	21012604 	addi	r4,r4,1176
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     808:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     80c:	00024040 	call	2404 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     810:	943ff81e 	bne	r18,r16,7f4 <__alt_data_end+0xff0007f4>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     814:	dfc00317 	ldw	ra,12(sp)
     818:	dc800217 	ldw	r18,8(sp)
     81c:	dc400117 	ldw	r17,4(sp)
     820:	dc000017 	ldw	r16,0(sp)
     824:	dec00404 	addi	sp,sp,16
     828:	f800283a 	ret

0000082c <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     82c:	01804034 	movhi	r6,256
     830:	31842704 	addi	r6,r6,4252
     834:	00c04034 	movhi	r3,256
     838:	18c42704 	addi	r3,r3,4252
     83c:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     840:	108000cc 	andi	r2,r2,3
     844:	103ffb1e 	bne	r2,zero,834 <__alt_data_end+0xff000834>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     848:	00804034 	movhi	r2,256
     84c:	21003fcc 	andi	r4,r4,255
     850:	10842404 	addi	r2,r2,4240
     854:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     858:	00804034 	movhi	r2,256
     85c:	10842504 	addi	r2,r2,4244
     860:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     864:	008010c4 	movi	r2,67
     868:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     86c:	180b883a 	mov	r5,r3
     870:	00c04034 	movhi	r3,256
     874:	18c42704 	addi	r3,r3,4252
     878:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     87c:	108000cc 	andi	r2,r2,3
     880:	103ffb1e 	bne	r2,zero,870 <__alt_data_end+0xff000870>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     884:	00804034 	movhi	r2,256
     888:	21000044 	addi	r4,r4,1
     88c:	10842404 	addi	r2,r2,4240
     890:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     894:	00800884 	movi	r2,34
     898:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     89c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8a0:	108000cc 	andi	r2,r2,3
     8a4:	103ffd1e 	bne	r2,zero,89c <__alt_data_end+0xff00089c>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     8a8:	00804034 	movhi	r2,256
     8ac:	10842604 	addi	r2,r2,4248
}
     8b0:	10800037 	ldwio	r2,0(r2)
     8b4:	f800283a 	ret

000008b8 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8b8:	01c04034 	movhi	r7,256
     8bc:	39c42704 	addi	r7,r7,4252
     8c0:	00c04034 	movhi	r3,256
     8c4:	18c42704 	addi	r3,r3,4252
     8c8:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8cc:	108000cc 	andi	r2,r2,3
     8d0:	103ffb1e 	bne	r2,zero,8c0 <__alt_data_end+0xff0008c0>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8d4:	00804034 	movhi	r2,256
     8d8:	10842404 	addi	r2,r2,4240
     8dc:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     8e0:	00804034 	movhi	r2,256
     8e4:	10842504 	addi	r2,r2,4244
     8e8:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     8ec:	00804034 	movhi	r2,256
     8f0:	10842604 	addi	r2,r2,4248
     8f4:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     8f8:	00801084 	movi	r2,66
     8fc:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     900:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     904:	108000cc 	andi	r2,r2,3
     908:	103ffd1e 	bne	r2,zero,900 <__alt_data_end+0xff000900>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     90c:	f800283a 	ret

00000910 <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     910:	00804034 	movhi	r2,256
     914:	10841804 	addi	r2,r2,4192
     918:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     91c:	01000284 	movi	r4,10
     920:	000e9fc1 	jmpi	e9fc <usleep>

00000924 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     924:	00804034 	movhi	r2,256
     928:	10841904 	addi	r2,r2,4196
     92c:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     930:	01000284 	movi	r4,10
     934:	000e9fc1 	jmpi	e9fc <usleep>

00000938 <init_LCD>:
}


void init_LCD() {
     938:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     93c:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     940:	dd400515 	stw	r21,20(sp)
     944:	dfc00815 	stw	ra,32(sp)
     948:	ddc00715 	stw	r23,28(sp)
     94c:	dd800615 	stw	r22,24(sp)
     950:	dd000415 	stw	r20,16(sp)
     954:	dcc00315 	stw	r19,12(sp)
     958:	dc800215 	stw	r18,8(sp)
     95c:	dc400115 	stw	r17,4(sp)
     960:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     964:	05400084 	movi	r21,2
     968:	10841a04 	addi	r2,r2,4200
     96c:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     970:	04804034 	movhi	r18,256
     974:	94841804 	addi	r18,r18,4192
     978:	00800a04 	movi	r2,40
     97c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     980:	04000284 	movi	r16,10
     984:	8009883a 	mov	r4,r16
     988:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     98c:	05c00444 	movi	r23,17
     990:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     994:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     998:	04404034 	movhi	r17,256
     99c:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     9a0:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9a4:	0027883a 	mov	r19,zero
     9a8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9ac:	8009883a 	mov	r4,r16
     9b0:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9b4:	008032c4 	movi	r2,203
     9b8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     9bc:	8009883a 	mov	r4,r16
     9c0:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9c4:	00800e44 	movi	r2,57
     9c8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9cc:	8009883a 	mov	r4,r16
     9d0:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d4:	00800b04 	movi	r2,44
     9d8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9dc:	8009883a 	mov	r4,r16
     9e0:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9e8:	8009883a 	mov	r4,r16
     9ec:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9f0:	00800d04 	movi	r2,52
     9f4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9f8:	8009883a 	mov	r4,r16
     9fc:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a00:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     a04:	8009883a 	mov	r4,r16
     a08:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a0c:	008033c4 	movi	r2,207
     a10:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a14:	8009883a 	mov	r4,r16
     a18:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a1c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a20:	8009883a 	mov	r4,r16
     a24:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a28:	05802044 	movi	r22,129
     a2c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     a30:	8009883a 	mov	r4,r16
     a34:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a38:	00800c04 	movi	r2,48
     a3c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a40:	8009883a 	mov	r4,r16
     a44:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a48:	00803a04 	movi	r2,232
     a4c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a50:	8009883a 	mov	r4,r16
     a54:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a58:	00802144 	movi	r2,133
     a5c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a60:	8009883a 	mov	r4,r16
     a64:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a68:	05000044 	movi	r20,1
     a6c:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     a70:	8009883a 	mov	r4,r16
     a74:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a78:	00801e44 	movi	r2,121
     a7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a80:	8009883a 	mov	r4,r16
     a84:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a88:	00803a84 	movi	r2,234
     a8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a90:	8009883a 	mov	r4,r16
     a94:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a9c:	8009883a 	mov	r4,r16
     aa0:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa8:	8009883a 	mov	r4,r16
     aac:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab0:	00801904 	movi	r2,100
     ab4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ab8:	8009883a 	mov	r4,r16
     abc:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ac0:	008000c4 	movi	r2,3
     ac4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac8:	8009883a 	mov	r4,r16
     acc:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ad0:	00800484 	movi	r2,18
     ad4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad8:	8009883a 	mov	r4,r16
     adc:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ae0:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     aec:	00803dc4 	movi	r2,247
     af0:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     af4:	8009883a 	mov	r4,r16
     af8:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     afc:	00800804 	movi	r2,32
     b00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b04:	8009883a 	mov	r4,r16
     b08:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b0c:	00803004 	movi	r2,192
     b10:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b14:	8009883a 	mov	r4,r16
     b18:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b1c:	05800984 	movi	r22,38
     b20:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b24:	8009883a 	mov	r4,r16
     b28:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b2c:	00800104 	movi	r2,4
     b30:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b34:	8009883a 	mov	r4,r16
     b38:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b3c:	00803044 	movi	r2,193
     b40:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b44:	8009883a 	mov	r4,r16
     b48:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b4c:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     b50:	8009883a 	mov	r4,r16
     b54:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b58:	00803144 	movi	r2,197
     b5c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b60:	8009883a 	mov	r4,r16
     b64:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b68:	00800d44 	movi	r2,53
     b6c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b70:	8009883a 	mov	r4,r16
     b74:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b78:	00800f84 	movi	r2,62
     b7c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b80:	8009883a 	mov	r4,r16
     b84:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b88:	008031c4 	movi	r2,199
     b8c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b90:	8009883a 	mov	r4,r16
     b94:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b98:	00802f84 	movi	r2,190
     b9c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ba0:	8009883a 	mov	r4,r16
     ba4:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ba8:	00802c44 	movi	r2,177
     bac:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bb0:	8009883a 	mov	r4,r16
     bb4:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb8:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	00800404 	movi	r2,16
     bc8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bcc:	8009883a 	mov	r4,r16
     bd0:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd4:	00800e84 	movi	r2,58
     bd8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bdc:	8009883a 	mov	r4,r16
     be0:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be4:	00801544 	movi	r2,85
     be8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bec:	8009883a 	mov	r4,r16
     bf0:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf4:	00802d84 	movi	r2,182
     bf8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bfc:	8009883a 	mov	r4,r16
     c00:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c04:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	00802884 	movi	r2,162
     c14:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c18:	8009883a 	mov	r4,r16
     c1c:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c20:	00803c84 	movi	r2,242
     c24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c28:	8009883a 	mov	r4,r16
     c2c:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c30:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c3c:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     c40:	8009883a 	mov	r4,r16
     c44:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c48:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c54:	00800d84 	movi	r2,54
     c58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c5c:	8009883a 	mov	r4,r16
     c60:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c64:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c68:	8009883a 	mov	r4,r16
     c6c:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c70:	00800a84 	movi	r2,42
     c74:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c78:	8009883a 	mov	r4,r16
     c7c:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c80:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c8c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c9c:	8009883a 	mov	r4,r16
     ca0:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca4:	00803bc4 	movi	r2,239
     ca8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cac:	8009883a 	mov	r4,r16
     cb0:	000e9fc0 	call	e9fc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cb4:	00800ac4 	movi	r2,43
     cb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cbc:	8009883a 	mov	r4,r16
     cc0:	000e9fc0 	call	e9fc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd4:	8009883a 	mov	r4,r16
     cd8:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cdc:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	000e9fc0 	call	e9fc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce8:	00800fc4 	movi	r2,63
     cec:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cf0:	8009883a 	mov	r4,r16
     cf4:	000e9fc0 	call	e9fc <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     cf8:	00c04034 	movhi	r3,256
     cfc:	00803c04 	movi	r2,240
     d00:	18c41d04 	addi	r3,r3,4212
     d04:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     d08:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     d0c:	00805004 	movi	r2,320
     d10:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d14:	00800a44 	movi	r2,41
     d18:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d1c:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     d20:	dfc00817 	ldw	ra,32(sp)
     d24:	ddc00717 	ldw	r23,28(sp)
     d28:	dd800617 	ldw	r22,24(sp)
     d2c:	dd400517 	ldw	r21,20(sp)
     d30:	dd000417 	ldw	r20,16(sp)
     d34:	dcc00317 	ldw	r19,12(sp)
     d38:	dc800217 	ldw	r18,8(sp)
     d3c:	dc400117 	ldw	r17,4(sp)
     d40:	dc000017 	ldw	r16,0(sp)
     d44:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d48:	000e9fc1 	jmpi	e9fc <usleep>

00000d4c <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d4c:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d50:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d54:	dc000015 	stw	r16,0(sp)
     d58:	dfc00415 	stw	ra,16(sp)
     d5c:	dcc00315 	stw	r19,12(sp)
     d60:	dc800215 	stw	r18,8(sp)
     d64:	dc400115 	stw	r17,4(sp)
     d68:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d6c:	10841e04 	addi	r2,r2,4216
     d70:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d74:	00804034 	movhi	r2,256
     d78:	10841804 	addi	r2,r2,4192
     d7c:	00c00b04 	movi	r3,44
     d80:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d84:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d88:	01000284 	movi	r4,10
     d8c:	000e9fc0 	call	e9fc <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d90:	90000a26 	beq	r18,zero,dbc <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d94:	04c04034 	movhi	r19,256
     d98:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d9c:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da0:	8080000b 	ldhu	r2,0(r16)
     da4:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     da8:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     dac:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     db0:	000e9fc0 	call	e9fc <usleep>
     db4:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     db8:	8cbff91e 	bne	r17,r18,da0 <__alt_data_end+0xff000da0>
		LCD_Write_Data(data_array[pixels]);
}
     dbc:	dfc00417 	ldw	ra,16(sp)
     dc0:	dcc00317 	ldw	r19,12(sp)
     dc4:	dc800217 	ldw	r18,8(sp)
     dc8:	dc400117 	ldw	r17,4(sp)
     dcc:	dc000017 	ldw	r16,0(sp)
     dd0:	dec00504 	addi	sp,sp,20
     dd4:	f800283a 	ret

00000dd8 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     dd8:	d0a6d20b 	ldhu	r2,-25784(gp)
     ddc:	3080010e 	bge	r6,r2,de4 <transfer_LCD_with_dma+0xc>
     de0:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     de4:	d0e6d28b 	ldhu	r3,-25782(gp)
     de8:	28c0010e 	bge	r5,r3,df0 <transfer_LCD_with_dma+0x18>
     dec:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     df0:	01804034 	movhi	r6,256
     df4:	31841e04 	addi	r6,r6,4216
     df8:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     dfc:	01404034 	movhi	r5,256
     e00:	29441b04 	addi	r5,r5,4204
     e04:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     e08:	18ffffcc 	andi	r3,r3,65535
     e0c:	10bfffcc 	andi	r2,r2,65535
     e10:	1885383a 	mul	r2,r3,r2
     e14:	00c04034 	movhi	r3,256
     e18:	18c41c04 	addi	r3,r3,4208
     e1c:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     e20:	39c03fcc 	andi	r7,r7,255
     e24:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e28:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e2c:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e30:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e34:	38000326 	beq	r7,zero,e44 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e38:	00c04404 	movi	r3,272
     e3c:	10c0002d 	sthio	r3,0(r2)
     e40:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e44:	00c04004 	movi	r3,256
     e48:	10c0002d 	sthio	r3,0(r2)
     e4c:	f800283a 	ret

00000e50 <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     e50:	defff404 	addi	sp,sp,-48
     e54:	dfc00b15 	stw	ra,44(sp)
     e58:	dd400715 	stw	r21,28(sp)
     e5c:	dd000615 	stw	r20,24(sp)
     e60:	dcc00515 	stw	r19,20(sp)
     e64:	dc800415 	stw	r18,16(sp)
     e68:	dc400315 	stw	r17,12(sp)
     e6c:	dc000215 	stw	r16,8(sp)
     e70:	df000a15 	stw	fp,40(sp)
     e74:	ddc00915 	stw	r23,36(sp)
     e78:	dd800815 	stw	r22,32(sp)
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;
  alt_u32 start_transfer = 0;
  alt_u32 end_transfer = 0;

  init_LCD();
     e7c:	00009380 	call	938 <init_LCD>
  init_camera();
     e80:	00001d80 	call	1d8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     e84:	01000604 	movi	r4,24
     e88:	0001b900 	call	1b90 <vga_set_swap>
  printf("Hello from Nios II!\n");
     e8c:	01000074 	movhi	r4,1
     e90:	21012f04 	addi	r4,r4,1212
     e94:	00025000 	call	2500 <puts>
  cam_get_profiling();
     e98:	00005380 	call	538 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     e9c:	00004f00 	call	4f0 <cam_get_xsize>
     ea0:	1021883a 	mov	r16,r2
     ea4:	00005140 	call	514 <cam_get_ysize>
     ea8:	10bfffcc 	andi	r2,r2,65535
     eac:	813fffcc 	andi	r4,r16,65535
     eb0:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     eb4:	05000044 	movi	r20,1
		      case 0 : transfer_LCD_with_dma(&image[16520],
     eb8:	05604414 	movui	r21,33040
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ebc:	0001ba00 	call	1ba0 <malloc>
     ec0:	1027883a 	mov	r19,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ec4:	00004f00 	call	4f0 <cam_get_xsize>
     ec8:	1021883a 	mov	r16,r2
     ecc:	00005140 	call	514 <cam_get_ysize>
     ed0:	10bfffcc 	andi	r2,r2,65535
     ed4:	813fffcc 	andi	r4,r16,65535
     ed8:	2089383a 	mul	r4,r4,r2
     edc:	0001ba00 	call	1ba0 <malloc>
     ee0:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ee4:	00004f00 	call	4f0 <cam_get_xsize>
     ee8:	1021883a 	mov	r16,r2
     eec:	00005140 	call	514 <cam_get_ysize>
     ef0:	10bfffcc 	andi	r2,r2,65535
     ef4:	813fffcc 	andi	r4,r16,65535
     ef8:	2089383a 	mul	r4,r4,r2
     efc:	0001ba00 	call	1ba0 <malloc>
     f00:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f04:	00004f00 	call	4f0 <cam_get_xsize>
     f08:	1021883a 	mov	r16,r2
     f0c:	00005140 	call	514 <cam_get_ysize>
     f10:	10bfffcc 	andi	r2,r2,65535
     f14:	813fffcc 	andi	r4,r16,65535
     f18:	2089383a 	mul	r4,r4,r2
     f1c:	0001ba00 	call	1ba0 <malloc>
  cam_set_image_pointer(0,buffer1);
     f20:	980b883a 	mov	r5,r19
     f24:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f28:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     f2c:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     f30:	900b883a 	mov	r5,r18
     f34:	a009883a 	mov	r4,r20
     f38:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     f3c:	880b883a 	mov	r5,r17
     f40:	01000084 	movi	r4,2
     f44:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     f48:	800b883a 	mov	r5,r16
     f4c:	010000c4 	movi	r4,3
     f50:	00005b00 	call	5b0 <cam_set_image_pointer>
  enable_continues_mode();
     f54:	00006680 	call	668 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
     f58:	00004f00 	call	4f0 <cam_get_xsize>
     f5c:	1021883a 	mov	r16,r2
     f60:	00005140 	call	514 <cam_get_ysize>
     f64:	813fffcc 	andi	r4,r16,65535
     f68:	2508d83a 	srl	r4,r4,r20
     f6c:	117fffcc 	andi	r5,r2,65535
     f70:	00013440 	call	1344 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
     f74:	000067c0 	call	67c <new_image_available>
     f78:	10803fcc 	andi	r2,r2,255
     f7c:	1080201c 	xori	r2,r2,128
     f80:	10bfe004 	addi	r2,r2,-128
     f84:	103ffb26 	beq	r2,zero,f74 <__alt_data_end+0xff000f74>
		  if (current_image_valid()!=0) {
     f88:	00006240 	call	624 <current_image_valid>
     f8c:	10bfffcc 	andi	r2,r2,65535
     f90:	10a0001c 	xori	r2,r2,32768
     f94:	10a00004 	addi	r2,r2,-32768
     f98:	103ff626 	beq	r2,zero,f74 <__alt_data_end+0xff000f74>
			  current_mode = DIPSW_get_value();
     f9c:	00006a80 	call	6a8 <DIPSW_get_value>
     fa0:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
     fa4:	00006380 	call	638 <current_image_pointer>
     fa8:	1025883a 	mov	r18,r2
		      switch (mode) {
     fac:	808001cc 	andi	r2,r16,7
     fb0:	15004426 	beq	r2,r20,10c4 <main+0x274>
     fb4:	1000bc26 	beq	r2,zero,12a8 <main+0x458>
     fb8:	00c00084 	movi	r3,2
     fbc:	10c09626 	beq	r2,r3,1218 <main+0x3c8>
     fc0:	00c000c4 	movi	r3,3
     fc4:	10c0601e 	bne	r2,r3,1148 <main+0x2f8>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
     fc8:	000f1900 	call	f190 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
     fcc:	000f1cc0 	call	f1cc <alt_timestamp>
     fd0:	102f883a 	mov	r23,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
     fd4:	00004f00 	call	4f0 <cam_get_xsize>
     fd8:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
     fdc:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
     fe0:	897fffcc 	andi	r5,r17,65535
     fe4:	280ad07a 	srli	r5,r5,1
     fe8:	11bfffcc 	andi	r6,r2,65535
     fec:	9009883a 	mov	r4,r18
     ff0:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
     ff4:	000f1cc0 	call	f1cc <alt_timestamp>
     ff8:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
     ffc:	00007640 	call	764 <get_grayscale_picture>
    1000:	1027883a 	mov	r19,r2
		               alt_timestamp_start();
    1004:	000f1900 	call	f190 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1008:	000f1cc0 	call	f1cc <alt_timestamp>
		               sobel_x(grayscale);
    100c:	9809883a 	mov	r4,r19
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    1010:	1039883a 	mov	fp,r2
		               sobel_x(grayscale);
    1014:	00014e40 	call	14e4 <sobel_x>
		               end_sobel_x = alt_timestamp();
    1018:	000f1cc0 	call	f1cc <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    101c:	9809883a 	mov	r4,r19
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    1020:	1025883a 	mov	r18,r2
		               sobel_y_with_rgb(grayscale);
    1024:	00018b80 	call	18b8 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1028:	0001b700 	call	1b70 <GetSobel_rgb>
    102c:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1030:	00004f00 	call	4f0 <cam_get_xsize>
    1034:	1027883a 	mov	r19,r2
		      		                	cam_get_ysize(),0);
    1038:	00005140 	call	514 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    103c:	997fffcc 	andi	r5,r19,65535
    1040:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1044:	84003fcc 	andi	r16,r16,255
    1048:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    104c:	000f883a 	mov	r7,zero
    1050:	11bfffcc 	andi	r6,r2,65535
    1054:	b549883a 	add	r4,r22,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1058:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    105c:	0000dd80 	call	dd8 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1060:	8000b116 	blt	r16,zero,1328 <main+0x4d8>
    1064:	9725c83a 	sub	r18,r18,fp
    1068:	8de3c83a 	sub	r17,r17,r23
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    106c:	0021883a 	mov	r16,zero
    1070:	0027883a 	mov	r19,zero
		      	  	   }
		      	  	   end_sobel_y = alt_timestamp();
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1074:	01000074 	movhi	r4,1
    1078:	21013404 	addi	r4,r4,1232
    107c:	00025000 	call	2500 <puts>
		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
    1080:	01000074 	movhi	r4,1
    1084:	900b883a 	mov	r5,r18
    1088:	21013c04 	addi	r4,r4,1264
    108c:	00024040 	call	2404 <printf>
//		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
//		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
//		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    1090:	01000074 	movhi	r4,1
    1094:	880b883a 	mov	r5,r17
    1098:	21014204 	addi	r4,r4,1288
    109c:	00024040 	call	2404 <printf>
		      printf("[transfer]  : dC = %d\n",end_transfer-start_transfer);
    10a0:	01000074 	movhi	r4,1
    10a4:	980b883a 	mov	r5,r19
    10a8:	21014804 	addi	r4,r4,1312
    10ac:	00024040 	call	2404 <printf>
		      printf("[vga]       : dC = %d\n",end_sobel_y-start_sobel_y);
    10b0:	01000074 	movhi	r4,1
    10b4:	800b883a 	mov	r5,r16
    10b8:	21014e04 	addi	r4,r4,1336
    10bc:	00024040 	call	2404 <printf>
    10c0:	003fac06 	br	f74 <__alt_data_end+0xff000f74>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    10c4:	000f1900 	call	f190 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    10c8:	000f1cc0 	call	f1cc <alt_timestamp>
    10cc:	102f883a 	mov	r23,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    10d0:	00004f00 	call	4f0 <cam_get_xsize>
    10d4:	1027883a 	mov	r19,r2
		    		                  cam_get_ysize());
    10d8:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10dc:	997fffcc 	andi	r5,r19,65535
    10e0:	280ad07a 	srli	r5,r5,1
    10e4:	9009883a 	mov	r4,r18
    10e8:	11bfffcc 	andi	r6,r2,65535
    10ec:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10f0:	000f1cc0 	call	f1cc <alt_timestamp>
    10f4:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    10f8:	00007640 	call	764 <get_grayscale_picture>
    10fc:	1027883a 	mov	r19,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1100:	00004f00 	call	4f0 <cam_get_xsize>
    1104:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    1108:	00005140 	call	514 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    110c:	917fffcc 	andi	r5,r18,65535
    1110:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1114:	84003fcc 	andi	r16,r16,255
    1118:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    111c:	a00f883a 	mov	r7,r20
    1120:	11bfffcc 	andi	r6,r2,65535
    1124:	99102204 	addi	r4,r19,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1128:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    112c:	0000dd80 	call	dd8 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1130:	80008216 	blt	r16,zero,133c <main+0x4ec>
    1134:	8de3c83a 	sub	r17,r17,r23
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1138:	0021883a 	mov	r16,zero
    113c:	0027883a 	mov	r19,zero
    1140:	0025883a 	mov	r18,zero
    1144:	003fcb06 	br	1074 <__alt_data_end+0xff001074>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    1148:	000f1900 	call	f190 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    114c:	000f1cc0 	call	f1cc <alt_timestamp>
    1150:	102f883a 	mov	r23,r2
		    	  	   grayscale = conv_grayscale((void *)image,
	                                  	  	  	  cam_get_xsize()>>1,
    1154:	00004f00 	call	4f0 <cam_get_xsize>
    1158:	1023883a 	mov	r17,r2
												  cam_get_ysize());
    115c:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   grayscale = conv_grayscale((void *)image,
    1160:	897fffcc 	andi	r5,r17,65535
    1164:	280ad07a 	srli	r5,r5,1
    1168:	11bfffcc 	andi	r6,r2,65535
    116c:	9009883a 	mov	r4,r18
    1170:	00006bc0 	call	6bc <conv_grayscale>
    1174:	1025883a 	mov	r18,r2
	                                  	  	  	  cam_get_xsize()>>1,
												  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1178:	000f1cc0 	call	f1cc <alt_timestamp>
    117c:	1023883a 	mov	r17,r2
//                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
    1180:	000f1900 	call	f190 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    1184:	000f1cc0 	call	f1cc <alt_timestamp>
//                       sobel_x(grayscale);
                       grayscale = sobel_complete(grayscale, 128);
    1188:	9009883a 	mov	r4,r18
    118c:	01402004 	movi	r5,128
												  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
//                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    1190:	1039883a 	mov	fp,r2
//                       sobel_x(grayscale);
                       grayscale = sobel_complete(grayscale, 128);
    1194:	0001abc0 	call	1abc <sobel_complete>
    1198:	102d883a 	mov	r22,r2
                       end_sobel_x = alt_timestamp();
    119c:	000f1cc0 	call	f1cc <alt_timestamp>
    11a0:	1025883a 	mov	r18,r2
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

//                       grayscale=GetSobelResult();
                       alt_timestamp_start();
    11a4:	000f1900 	call	f190 <alt_timestamp_start>
                       start_transfer = alt_timestamp();
    11a8:	000f1cc0 	call	f1cc <alt_timestamp>
    11ac:	d8800015 	stw	r2,0(sp)
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    11b0:	00004f00 	call	4f0 <cam_get_xsize>
    11b4:	1027883a 	mov	r19,r2
		      		                	cam_get_ysize(),1);
    11b8:	00005140 	call	514 <cam_get_ysize>
//                       end_sobel_th = alt_timestamp();

//                       grayscale=GetSobelResult();
                       alt_timestamp_start();
                       start_transfer = alt_timestamp();
		               transfer_LCD_with_dma(&grayscale[16520],
    11bc:	997fffcc 	andi	r5,r19,65535
    11c0:	280ad07a 	srli	r5,r5,1
    11c4:	01c00044 	movi	r7,1
    11c8:	11bfffcc 	andi	r6,r2,65535
    11cc:	b1102204 	addi	r4,r22,16520
    11d0:	0000dd80 	call	dd8 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		               end_transfer = alt_timestamp();
    11d4:	000f1cc0 	call	f1cc <alt_timestamp>
    11d8:	1027883a 	mov	r19,r2

		               alt_timestamp_start();
		               start_sobel_y = alt_timestamp();
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11dc:	84003fcc 	andi	r16,r16,255
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		               end_transfer = alt_timestamp();

		               alt_timestamp_start();
    11e0:	000f1900 	call	f190 <alt_timestamp_start>
		               start_sobel_y = alt_timestamp();
    11e4:	000f1cc0 	call	f1cc <alt_timestamp>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11e8:	8400201c 	xori	r16,r16,128
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		               end_transfer = alt_timestamp();

		               alt_timestamp_start();
		               start_sobel_y = alt_timestamp();
    11ec:	d8800115 	stw	r2,4(sp)
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11f0:	843fe004 	addi	r16,r16,-128
    11f4:	80003e16 	blt	r16,zero,12f0 <main+0x4a0>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   end_sobel_y = alt_timestamp();
    11f8:	000f1cc0 	call	f1cc <alt_timestamp>
    11fc:	d8c00017 	ldw	r3,0(sp)
    1200:	9725c83a 	sub	r18,r18,fp
    1204:	8de3c83a 	sub	r17,r17,r23
    1208:	98e7c83a 	sub	r19,r19,r3
    120c:	d8c00117 	ldw	r3,4(sp)
    1210:	10e1c83a 	sub	r16,r2,r3
		      	  	   break;
    1214:	003f9706 	br	1074 <__alt_data_end+0xff001074>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    1218:	000f1900 	call	f190 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    121c:	000f1cc0 	call	f1cc <alt_timestamp>
    1220:	102f883a 	mov	r23,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1224:	00004f00 	call	4f0 <cam_get_xsize>
    1228:	1027883a 	mov	r19,r2
		    		                  cam_get_ysize());
    122c:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1230:	997fffcc 	andi	r5,r19,65535
    1234:	280ad07a 	srli	r5,r5,1
    1238:	11bfffcc 	andi	r6,r2,65535
    123c:	9009883a 	mov	r4,r18
    1240:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1244:	000f1cc0 	call	f1cc <alt_timestamp>
    1248:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    124c:	00007640 	call	764 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1250:	1009883a 	mov	r4,r2
    1254:	00016240 	call	1624 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1258:	0001b700 	call	1b70 <GetSobel_rgb>
    125c:	1027883a 	mov	r19,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1260:	00004f00 	call	4f0 <cam_get_xsize>
    1264:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1268:	00005140 	call	514 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    126c:	917fffcc 	andi	r5,r18,65535
    1270:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1274:	84003fcc 	andi	r16,r16,255
    1278:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    127c:	000f883a 	mov	r7,zero
    1280:	11bfffcc 	andi	r6,r2,65535
    1284:	9d49883a 	add	r4,r19,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1288:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    128c:	0000dd80 	call	dd8 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1290:	803fa80e 	bge	r16,zero,1134 <__alt_data_end+0xff001134>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1294:	01000204 	movi	r4,8
    1298:	0001b900 	call	1b90 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    129c:	9809883a 	mov	r4,r19
    12a0:	0001b800 	call	1b80 <vga_set_pointer>
    12a4:	003fa306 	br	1134 <__alt_data_end+0xff001134>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    12a8:	00004f00 	call	4f0 <cam_get_xsize>
    12ac:	1023883a 	mov	r17,r2
		                	cam_get_ysize(),0);
    12b0:	00005140 	call	514 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12b4:	897fffcc 	andi	r5,r17,65535
    12b8:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12bc:	84003fcc 	andi	r16,r16,255
    12c0:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12c4:	000f883a 	mov	r7,zero
    12c8:	11bfffcc 	andi	r6,r2,65535
    12cc:	9549883a 	add	r4,r18,r21
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12d0:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12d4:	0000dd80 	call	dd8 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12d8:	80000a16 	blt	r16,zero,1304 <main+0x4b4>
    12dc:	0021883a 	mov	r16,zero
    12e0:	0027883a 	mov	r19,zero
    12e4:	0023883a 	mov	r17,zero
    12e8:	0025883a 	mov	r18,zero
    12ec:	003f6106 	br	1074 <__alt_data_end+0xff001074>
		               end_transfer = alt_timestamp();

		               alt_timestamp_start();
		               start_sobel_y = alt_timestamp();
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12f0:	01000604 	movi	r4,24
    12f4:	0001b900 	call	1b90 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    12f8:	b009883a 	mov	r4,r22
    12fc:	0001b800 	call	1b80 <vga_set_pointer>
    1300:	003fbd06 	br	11f8 <__alt_data_end+0xff0011f8>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1304:	01000204 	movi	r4,8
    1308:	0001b900 	call	1b90 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    130c:	9009883a 	mov	r4,r18
    1310:	0001b800 	call	1b80 <vga_set_pointer>
    1314:	0021883a 	mov	r16,zero
    1318:	0027883a 	mov	r19,zero
    131c:	0023883a 	mov	r17,zero
    1320:	0025883a 	mov	r18,zero
    1324:	003f5306 	br	1074 <__alt_data_end+0xff001074>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1328:	01000204 	movi	r4,8
    132c:	0001b900 	call	1b90 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1330:	b009883a 	mov	r4,r22
    1334:	0001b800 	call	1b80 <vga_set_pointer>
    1338:	003f4a06 	br	1064 <__alt_data_end+0xff001064>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    133c:	01000604 	movi	r4,24
    1340:	003fd506 	br	1298 <__alt_data_end+0xff001298>

00001344 <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1344:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    1348:	defffd04 	addi	sp,sp,-12
    134c:	dc400115 	stw	r17,4(sp)
    1350:	dc000015 	stw	r16,0(sp)
    1354:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    1358:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    135c:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    1360:	2023883a 	mov	r17,r4
    1364:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1368:	10000226 	beq	r2,zero,1374 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    136c:	1009883a 	mov	r4,r2
    1370:	0001bb40 	call	1bb4 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1374:	8c21383a 	mul	r16,r17,r16
    1378:	8423883a 	add	r17,r16,r16
    137c:	8809883a 	mov	r4,r17
    1380:	0001ba00 	call	1ba0 <malloc>
	if (sobel_y_result != NULL)
    1384:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1388:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    138c:	20000126 	beq	r4,zero,1394 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    1390:	0001bb40 	call	1bb4 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1394:	8809883a 	mov	r4,r17
    1398:	0001ba00 	call	1ba0 <malloc>
	if (sobel_result != NULL)
    139c:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    13a0:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    13a4:	20000126 	beq	r4,zero,13ac <init_sobel_arrays+0x68>
		alt_uncached_free(sobel_result);
    13a8:	000e9900 	call	e990 <alt_uncached_free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    13ac:	8009883a 	mov	r4,r16
    13b0:	000e9a00 	call	e9a0 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    13b4:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    13b8:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    13bc:	20000126 	beq	r4,zero,13c4 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    13c0:	0001bb40 	call	1bb4 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    13c4:	8809883a 	mov	r4,r17
    13c8:	0001ba00 	call	1ba0 <malloc>
    13cc:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    13d0:	0005883a 	mov	r2,zero
    13d4:	04000f0e 	bge	zero,r16,1414 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    13d8:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    13dc:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    13e0:	d1a6d417 	ldw	r6,-25776(gp)
    13e4:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    13e8:	40d1883a 	add	r8,r8,r3
    13ec:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    13f0:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    13f4:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    13f8:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    13fc:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1400:	d1a6d817 	ldw	r6,-25760(gp)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1404:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1408:	30c7883a 	add	r3,r6,r3
    140c:	1800000d 	sth	zero,0(r3)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1410:	80bff11e 	bne	r16,r2,13d8 <__alt_data_end+0xff0013d8>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1414:	dfc00217 	ldw	ra,8(sp)
    1418:	dc400117 	ldw	r17,4(sp)
    141c:	dc000017 	ldw	r16,0(sp)
    1420:	dec00304 	addi	sp,sp,12
    1424:	f800283a 	ret

00001428 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1428:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    142c:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1430:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1434:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1438:	3b8000c7 	ldb	r14,3(r7)
    143c:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1440:	5185883a 	add	r2,r10,r6
    1444:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1448:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    144c:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1450:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1454:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1458:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    145c:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1460:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1464:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    1468:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    146c:	49000043 	ldbu	r4,1(r9)
    1470:	3a800147 	ldb	r10,5(r7)
    1474:	139d383a 	mul	r14,r2,r14
    1478:	60d9383a 	mul	r12,r12,r3
    147c:	68800003 	ldbu	r2,0(r13)
    1480:	38c001c7 	ldb	r3,7(r7)
    1484:	5a17383a 	mul	r11,r11,r8
    1488:	33ffffc3 	ldbu	r15,-1(r6)
    148c:	3a000007 	ldb	r8,0(r7)
    1490:	2295383a 	mul	r10,r4,r10
    1494:	31000043 	ldbu	r4,1(r6)
    1498:	39800087 	ldb	r6,2(r7)
    149c:	730b883a 	add	r5,r14,r12
    14a0:	10d3383a 	mul	r9,r2,r3
    14a4:	6b3fffc3 	ldbu	r12,-1(r13)
    14a8:	38c00187 	ldb	r3,6(r7)
    14ac:	2acb883a 	add	r5,r5,r11
    14b0:	7a11383a 	mul	r8,r15,r8
    14b4:	6ac00043 	ldbu	r11,1(r13)
    14b8:	39c00207 	ldb	r7,8(r7)
    14bc:	2a8b883a 	add	r5,r5,r10
    14c0:	2189383a 	mul	r4,r4,r6
    14c4:	2a45883a 	add	r2,r5,r9
    14c8:	60c7383a 	mul	r3,r12,r3
    14cc:	1205883a 	add	r2,r2,r8
    14d0:	59cb383a 	mul	r5,r11,r7
    14d4:	1105883a 	add	r2,r2,r4
    14d8:	10c5883a 	add	r2,r2,r3
}
    14dc:	1145883a 	add	r2,r2,r5
    14e0:	f800283a 	ret

000014e4 <sobel_x>:

void sobel_x( unsigned char *source ) {
    14e4:	defff604 	addi	sp,sp,-40
    14e8:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14ec:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    14f0:	dfc00915 	stw	ra,36(sp)
    14f4:	df000815 	stw	fp,32(sp)
    14f8:	ddc00715 	stw	r23,28(sp)
    14fc:	dd800615 	stw	r22,24(sp)
    1500:	dd400515 	stw	r21,20(sp)
    1504:	dd000415 	stw	r20,16(sp)
    1508:	dcc00315 	stw	r19,12(sp)
    150c:	dc800215 	stw	r18,8(sp)
    1510:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1514:	8c7fffc4 	addi	r17,r17,-1
    1518:	00800044 	movi	r2,1
    151c:	14402e0e 	bge	r2,r17,15d8 <sobel_x+0xf4>
    1520:	d366d317 	ldw	r13,-25780(gp)
    1524:	d3e6d617 	ldw	r15,-25768(gp)
    1528:	03800084 	movi	r14,2
    152c:	6b65883a 	add	r18,r13,r13
    1530:	9385883a 	add	r2,r18,r14
    1534:	2359883a 	add	r12,r4,r13
    1538:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    153c:	7027883a 	mov	r19,r14
    1540:	736bc83a 	sub	r21,r14,r13
    1544:	6ba9883a 	add	r20,r13,r14
    1548:	9b402f0e 	bge	r19,r13,1608 <sobel_x+0x124>
    154c:	637f883a 	add	ra,r12,r13
    1550:	7021883a 	mov	r16,r14
    1554:	6357c83a 	sub	r11,r12,r13
    1558:	ab0b883a 	add	r5,r21,r12
    155c:	62800084 	addi	r10,r12,2
    1560:	f813883a 	mov	r9,ra
    1564:	a311883a 	add	r8,r20,r12
    1568:	780f883a 	mov	r7,r15
    156c:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1570:	29000003 	ldbu	r4,0(r5)
    1574:	40c00003 	ldbu	r3,0(r8)
    1578:	37000003 	ldbu	fp,0(r6)
    157c:	50800003 	ldbu	r2,0(r10)
    1580:	20c7883a 	add	r3,r4,r3
    1584:	5dc00003 	ldbu	r23,0(r11)
    1588:	1f07c83a 	sub	r3,r3,fp
    158c:	4d800003 	ldbu	r22,0(r9)
    1590:	1f09c83a 	sub	r4,r3,fp
    1594:	1087883a 	add	r3,r2,r2
    1598:	20c7883a 	add	r3,r4,r3
    159c:	1dc5c83a 	sub	r2,r3,r23
    15a0:	1585c83a 	sub	r2,r2,r22
    15a4:	3880000d 	sth	r2,0(r7)
    15a8:	29400044 	addi	r5,r5,1
    15ac:	5ac00044 	addi	r11,r11,1
    15b0:	31800044 	addi	r6,r6,1
    15b4:	52800044 	addi	r10,r10,1
    15b8:	4a400044 	addi	r9,r9,1
    15bc:	42000044 	addi	r8,r8,1
    15c0:	39c00084 	addi	r7,r7,2
void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    15c4:	617fea1e 	bne	r12,r5,1570 <__alt_data_end+0xff001570>
    15c8:	73800044 	addi	r14,r14,1
    15cc:	f819883a 	mov	r12,ra
    15d0:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15d4:	847fdc16 	blt	r16,r17,1548 <__alt_data_end+0xff001548>
//		  result += pgx_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}
    15d8:	dfc00917 	ldw	ra,36(sp)
    15dc:	df000817 	ldw	fp,32(sp)
    15e0:	ddc00717 	ldw	r23,28(sp)
    15e4:	dd800617 	ldw	r22,24(sp)
    15e8:	dd400517 	ldw	r21,20(sp)
    15ec:	dd000417 	ldw	r20,16(sp)
    15f0:	dcc00317 	ldw	r19,12(sp)
    15f4:	dc800217 	ldw	r18,8(sp)
    15f8:	dc400117 	ldw	r17,4(sp)
    15fc:	dc000017 	ldw	r16,0(sp)
    1600:	dec00a04 	addi	sp,sp,40
    1604:	f800283a 	ret
    1608:	7021883a 	mov	r16,r14
    160c:	637f883a 	add	ra,r12,r13
    1610:	73800044 	addi	r14,r14,1
    1614:	f819883a 	mov	r12,ra
    1618:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    161c:	847fca16 	blt	r16,r17,1548 <__alt_data_end+0xff001548>
    1620:	003fed06 	br	15d8 <__alt_data_end+0xff0015d8>

00001624 <sobel_x_with_rgb>:
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1624:	defff504 	addi	sp,sp,-44
    1628:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    162c:	d5a6d517 	ldw	r22,-25772(gp)
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1630:	dfc00a15 	stw	ra,40(sp)
    1634:	df000915 	stw	fp,36(sp)
    1638:	ddc00815 	stw	r23,32(sp)
    163c:	dd400615 	stw	r21,24(sp)
    1640:	dd000515 	stw	r20,20(sp)
    1644:	dcc00415 	stw	r19,16(sp)
    1648:	dc800315 	stw	r18,12(sp)
    164c:	dc400215 	stw	r17,8(sp)
    1650:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1654:	b5bfffc4 	addi	r22,r22,-1
    1658:	00800044 	movi	r2,1
    165c:	1580440e 	bge	r2,r22,1770 <sobel_x_with_rgb+0x14c>
    1660:	d7e6d317 	ldw	ra,-25780(gp)
    1664:	d4a6d617 	ldw	r18,-25768(gp)
    1668:	d466d817 	ldw	r17,-25760(gp)
    166c:	ffe9883a 	add	r20,ra,ra
    1670:	a0800084 	addi	r2,r20,2
    1674:	04000084 	movi	r16,2
    1678:	90a5883a 	add	r18,r18,r2
    167c:	88a3883a 	add	r17,r17,r2
    1680:	fc05883a 	add	r2,ra,r16
    1684:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1688:	802f883a 	mov	r23,r16
    168c:	87f9c83a 	sub	fp,r16,ra
    1690:	d8800015 	stw	r2,0(sp)
    1694:	bfc02f0e 	bge	r23,ra,1754 <sobel_x_with_rgb+0x130>
    1698:	d8800017 	ldw	r2,0(sp)
    169c:	7fe7883a 	add	r19,r15,ra
    16a0:	802b883a 	mov	r21,r16
    16a4:	7fdbc83a 	sub	r13,r15,ra
    16a8:	e3cf883a 	add	r7,fp,r15
    16ac:	7b000084 	addi	r12,r15,2
    16b0:	9817883a 	mov	r11,r19
    16b4:	13d5883a 	add	r10,r2,r15
    16b8:	881d883a 	mov	r14,r17
    16bc:	9013883a 	mov	r9,r18
    16c0:	7811883a 	mov	r8,r15
    16c4:	00000b06 	br	16f4 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16c8:	180692fa 	slli	r3,r3,11
    16cc:	70c0000d 	sth	r3,0(r14)
    16d0:	39c00044 	addi	r7,r7,1
    16d4:	6b400044 	addi	r13,r13,1
    16d8:	42000044 	addi	r8,r8,1
    16dc:	63000044 	addi	r12,r12,1
    16e0:	5ac00044 	addi	r11,r11,1
    16e4:	52800044 	addi	r10,r10,1
    16e8:	4a400084 	addi	r9,r9,2
    16ec:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16f0:	79c01a26 	beq	r15,r7,175c <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    16f4:	50800003 	ldbu	r2,0(r10)
    16f8:	39400003 	ldbu	r5,0(r7)
    16fc:	41800003 	ldbu	r6,0(r8)
    1700:	60c00003 	ldbu	r3,0(r12)
    1704:	288b883a 	add	r5,r5,r2
    1708:	298bc83a 	sub	r5,r5,r6
    170c:	68800003 	ldbu	r2,0(r13)
    1710:	59000003 	ldbu	r4,0(r11)
    1714:	298bc83a 	sub	r5,r5,r6
    1718:	18c7883a 	add	r3,r3,r3
    171c:	28c7883a 	add	r3,r5,r3
    1720:	1887c83a 	sub	r3,r3,r2
    1724:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1728:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    172c:	10bfffcc 	andi	r2,r2,65535
    1730:	10a0001c 	xori	r2,r2,32768
    1734:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1738:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    173c:	103fe20e 	bge	r2,zero,16c8 <__alt_data_end+0xff0016c8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1740:	0085c83a 	sub	r2,zero,r2
    1744:	1005d0ba 	srai	r2,r2,2
    1748:	1004917a 	slli	r2,r2,5
    174c:	7080000d 	sth	r2,0(r14)
    1750:	003fdf06 	br	16d0 <__alt_data_end+0xff0016d0>
    1754:	802b883a 	mov	r21,r16
    1758:	7fe7883a 	add	r19,r15,ra
    175c:	84000044 	addi	r16,r16,1
    1760:	981f883a 	mov	r15,r19
    1764:	9525883a 	add	r18,r18,r20
    1768:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    176c:	adbfc916 	blt	r21,r22,1694 <__alt_data_end+0xff001694>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1770:	dfc00a17 	ldw	ra,40(sp)
    1774:	df000917 	ldw	fp,36(sp)
    1778:	ddc00817 	ldw	r23,32(sp)
    177c:	dd800717 	ldw	r22,28(sp)
    1780:	dd400617 	ldw	r21,24(sp)
    1784:	dd000517 	ldw	r20,20(sp)
    1788:	dcc00417 	ldw	r19,16(sp)
    178c:	dc800317 	ldw	r18,12(sp)
    1790:	dc400217 	ldw	r17,8(sp)
    1794:	dc000117 	ldw	r16,4(sp)
    1798:	dec00b04 	addi	sp,sp,44
    179c:	f800283a 	ret

000017a0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    17a0:	defff704 	addi	sp,sp,-36
    17a4:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17a8:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    17ac:	dfc00815 	stw	ra,32(sp)
    17b0:	ddc00715 	stw	r23,28(sp)
    17b4:	dd800615 	stw	r22,24(sp)
    17b8:	dd400515 	stw	r21,20(sp)
    17bc:	dd000415 	stw	r20,16(sp)
    17c0:	dcc00315 	stw	r19,12(sp)
    17c4:	dc800215 	stw	r18,8(sp)
    17c8:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17cc:	8c7fffc4 	addi	r17,r17,-1
    17d0:	00800044 	movi	r2,1
    17d4:	14402d0e 	bge	r2,r17,188c <sobel_y+0xec>
    17d8:	d3e6d317 	ldw	r15,-25780(gp)
    17dc:	d3a6d717 	ldw	r14,-25764(gp)
    17e0:	03400084 	movi	r13,2
    17e4:	7bff883a 	add	ra,r15,r15
    17e8:	fb67883a 	add	r19,ra,r13
    17ec:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    17f0:	6825883a 	mov	r18,r13
    17f4:	f8a9883a 	add	r20,ra,r2
    17f8:	6821883a 	mov	r16,r13
    17fc:	93c01f0e 	bge	r18,r15,187c <sobel_y+0xdc>
    1800:	27cd883a 	add	r6,r4,ra
    1804:	6821883a 	mov	r16,r13
    1808:	22c00044 	addi	r11,r4,1
    180c:	22800084 	addi	r10,r4,2
    1810:	a113883a 	add	r9,r20,r4
    1814:	990b883a 	add	r5,r19,r4
    1818:	7999883a 	add	r12,r15,r6
    181c:	7011883a 	mov	r8,r14
    1820:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1824:	3d800003 	ldbu	r22,0(r7)
    1828:	50c00003 	ldbu	r3,0(r10)
    182c:	58800003 	ldbu	r2,0(r11)
    1830:	4d400003 	ldbu	r21,0(r9)
    1834:	b0c7883a 	add	r3,r22,r3
    1838:	1085883a 	add	r2,r2,r2
    183c:	35c00003 	ldbu	r23,0(r6)
    1840:	1887883a 	add	r3,r3,r2
    1844:	2d800003 	ldbu	r22,0(r5)
    1848:	1d47c83a 	sub	r3,r3,r21
    184c:	1d47c83a 	sub	r3,r3,r21
    1850:	1dc5c83a 	sub	r2,r3,r23
    1854:	1585c83a 	sub	r2,r2,r22
    1858:	4080000d 	sth	r2,0(r8)
    185c:	29400044 	addi	r5,r5,1
    1860:	39c00044 	addi	r7,r7,1
    1864:	5ac00044 	addi	r11,r11,1
    1868:	52800044 	addi	r10,r10,1
    186c:	31800044 	addi	r6,r6,1
    1870:	4a400044 	addi	r9,r9,1
    1874:	42000084 	addi	r8,r8,2
void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1878:	617fea1e 	bne	r12,r5,1824 <__alt_data_end+0xff001824>
    187c:	6b400044 	addi	r13,r13,1
    1880:	23c9883a 	add	r4,r4,r15
    1884:	77dd883a 	add	r14,r14,ra

void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1888:	847fdb16 	blt	r16,r17,17f8 <__alt_data_end+0xff0017f8>
//		  result += pgy_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}
    188c:	dfc00817 	ldw	ra,32(sp)
    1890:	ddc00717 	ldw	r23,28(sp)
    1894:	dd800617 	ldw	r22,24(sp)
    1898:	dd400517 	ldw	r21,20(sp)
    189c:	dd000417 	ldw	r20,16(sp)
    18a0:	dcc00317 	ldw	r19,12(sp)
    18a4:	dc800217 	ldw	r18,8(sp)
    18a8:	dc400117 	ldw	r17,4(sp)
    18ac:	dc000017 	ldw	r16,0(sp)
    18b0:	dec00904 	addi	sp,sp,36
    18b4:	f800283a 	ret

000018b8 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    18b8:	defff604 	addi	sp,sp,-40
    18bc:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18c0:	d4e6d517 	ldw	r19,-25772(gp)
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    18c4:	dfc00915 	stw	ra,36(sp)
    18c8:	df000815 	stw	fp,32(sp)
    18cc:	ddc00715 	stw	r23,28(sp)
    18d0:	dd800615 	stw	r22,24(sp)
    18d4:	dd400515 	stw	r21,20(sp)
    18d8:	dd000415 	stw	r20,16(sp)
    18dc:	dc800215 	stw	r18,8(sp)
    18e0:	dc400115 	stw	r17,4(sp)
    18e4:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18e8:	9cffffc4 	addi	r19,r19,-1
    18ec:	00800044 	movi	r2,1
    18f0:	14c03f0e 	bge	r2,r19,19f0 <sobel_y_with_rgb+0x138>
    18f4:	d466d317 	ldw	r17,-25780(gp)
    18f8:	d426d717 	ldw	r16,-25764(gp)
    18fc:	d7e6d817 	ldw	ra,-25760(gp)
    1900:	8c5d883a 	add	r14,r17,r17
    1904:	75000084 	addi	r20,r14,2
    1908:	03c00084 	movi	r15,2
    190c:	8521883a 	add	r16,r16,r20
    1910:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1914:	782b883a 	mov	r21,r15
    1918:	70ad883a 	add	r22,r14,r2
    191c:	7825883a 	mov	r18,r15
    1920:	ac402e0e 	bge	r21,r17,19dc <sobel_y_with_rgb+0x124>
    1924:	238d883a 	add	r6,r4,r14
    1928:	7825883a 	mov	r18,r15
    192c:	22c00044 	addi	r11,r4,1
    1930:	22800084 	addi	r10,r4,2
    1934:	b113883a 	add	r9,r22,r4
    1938:	a10b883a 	add	r5,r20,r4
    193c:	899b883a 	add	r13,r17,r6
    1940:	f819883a 	mov	r12,ra
    1944:	8011883a 	mov	r8,r16
    1948:	200f883a 	mov	r7,r4
    194c:	00000b06 	br	197c <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1950:	180692fa 	slli	r3,r3,11
    1954:	60c0000d 	sth	r3,0(r12)
    1958:	29400044 	addi	r5,r5,1
    195c:	39c00044 	addi	r7,r7,1
    1960:	5ac00044 	addi	r11,r11,1
    1964:	52800044 	addi	r10,r10,1
    1968:	31800044 	addi	r6,r6,1
    196c:	4a400044 	addi	r9,r9,1
    1970:	42000084 	addi	r8,r8,2
    1974:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1978:	69401826 	beq	r13,r5,19dc <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    197c:	50800003 	ldbu	r2,0(r10)
    1980:	3f000003 	ldbu	fp,0(r7)
    1984:	58c00003 	ldbu	r3,0(r11)
    1988:	4dc00003 	ldbu	r23,0(r9)
    198c:	e0b9883a 	add	fp,fp,r2
    1990:	18c7883a 	add	r3,r3,r3
    1994:	30800003 	ldbu	r2,0(r6)
    1998:	e0c7883a 	add	r3,fp,r3
    199c:	1dc7c83a 	sub	r3,r3,r23
    19a0:	2f000003 	ldbu	fp,0(r5)
    19a4:	1dc7c83a 	sub	r3,r3,r23
    19a8:	1885c83a 	sub	r2,r3,r2
    19ac:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    19b0:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    19b4:	10bfffcc 	andi	r2,r2,65535
    19b8:	10a0001c 	xori	r2,r2,32768
    19bc:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    19c0:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    19c4:	103fe20e 	bge	r2,zero,1950 <__alt_data_end+0xff001950>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    19c8:	0085c83a 	sub	r2,zero,r2
    19cc:	1005d0ba 	srai	r2,r2,2
    19d0:	1004917a 	slli	r2,r2,5
    19d4:	6080000d 	sth	r2,0(r12)
    19d8:	003fdf06 	br	1958 <__alt_data_end+0xff001958>
    19dc:	7bc00044 	addi	r15,r15,1
    19e0:	2449883a 	add	r4,r4,r17
    19e4:	83a1883a 	add	r16,r16,r14
    19e8:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    19ec:	94ffcb16 	blt	r18,r19,191c <__alt_data_end+0xff00191c>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    19f0:	dfc00917 	ldw	ra,36(sp)
    19f4:	df000817 	ldw	fp,32(sp)
    19f8:	ddc00717 	ldw	r23,28(sp)
    19fc:	dd800617 	ldw	r22,24(sp)
    1a00:	dd400517 	ldw	r21,20(sp)
    1a04:	dd000417 	ldw	r20,16(sp)
    1a08:	dcc00317 	ldw	r19,12(sp)
    1a0c:	dc800217 	ldw	r18,8(sp)
    1a10:	dc400117 	ldw	r17,4(sp)
    1a14:	dc000017 	ldw	r16,0(sp)
    1a18:	dec00a04 	addi	sp,sp,40
    1a1c:	f800283a 	ret

00001a20 <sobel_threshold>:

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a20:	d0a6d317 	ldw	r2,-25780(gp)
    1a24:	d2a6d517 	ldw	r10,-25772(gp)
	for(k = 1; k<kmax; k++)
    1a28:	01800044 	movi	r6,1
}

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a2c:	5095383a 	mul	r10,r10,r2
	for(k = 1; k<kmax; k++)
    1a30:	3280210e 	bge	r6,r10,1ab8 <sobel_threshold+0x98>
    1a34:	213fffcc 	andi	r4,r4,65535
    1a38:	2120001c 	xori	r4,r4,32768
    1a3c:	21200004 	addi	r4,r4,-32768
	{
		value = sobel_x_result[k];
    1a40:	d166d617 	ldw	r5,-25768(gp)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a44:	d0e6d717 	ldw	r3,-25764(gp)
    1a48:	3185883a 	add	r2,r6,r6
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1a4c:	288b883a 	add	r5,r5,r2
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a50:	1887883a 	add	r3,r3,r2
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1a54:	2880000b 	ldhu	r2,0(r5)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a58:	1940000b 	ldhu	r5,0(r3)
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a5c:	d266d417 	ldw	r9,-25776(gp)
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a60:	11ffffcc 	andi	r7,r2,65535
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a64:	2a3fffcc 	andi	r8,r5,65535
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a68:	39e0001c 	xori	r7,r7,32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a6c:	4220001c 	xori	r8,r8,32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a70:	39e00004 	addi	r7,r7,-32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a74:	42200004 	addi	r8,r8,-32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a78:	380fd7fa 	srai	r7,r7,31
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a7c:	4011d7fa 	srai	r8,r8,31
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a80:	4993883a 	add	r9,r9,r6
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a84:	3887883a 	add	r3,r7,r2
    1a88:	414b883a 	add	r5,r8,r5
    1a8c:	414af03a 	xor	r5,r8,r5
    1a90:	38c4f03a 	xor	r2,r7,r3
    1a94:	2885883a 	add	r2,r5,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a98:	10bfffcc 	andi	r2,r2,65535
    1a9c:	10a0001c 	xori	r2,r2,32768
    1aa0:	10a00004 	addi	r2,r2,-32768
    1aa4:	2084803a 	cmplt	r2,r4,r2
    1aa8:	0085c83a 	sub	r2,zero,r2
    1aac:	48800005 	stb	r2,0(r9)

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
    1ab0:	31800044 	addi	r6,r6,1
    1ab4:	51bfe21e 	bne	r10,r6,1a40 <__alt_data_end+0xff001a40>
    1ab8:	f800283a 	ret

00001abc <sobel_complete>:

unsigned char* sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   unsigned int k, a, b;
   unsigned int kmax = sobel_height*sobel_width;
    1abc:	d0a6d317 	ldw	r2,-25780(gp)
    1ac0:	d366d517 	ldw	r13,-25772(gp)
   for(k = 1; k<kmax; k++)
    1ac4:	00c00044 	movi	r3,1

unsigned char* sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   unsigned int k, a, b;
   unsigned int kmax = sobel_height*sobel_width;
    1ac8:	135b383a 	mul	r13,r2,r13
   for(k = 1; k<kmax; k++)
    1acc:	1b40262e 	bgeu	r3,r13,1b68 <sobel_complete+0xac>
    1ad0:	22c00084 	addi	r11,r4,2
    1ad4:	235b883a 	add	r13,r4,r13
    1ad8:	2019883a 	mov	r12,r4
    1adc:	011c303a 	nor	r14,zero,r4
    1ae0:	00000206 	br	1aec <sobel_complete+0x30>
    1ae4:	d0a6d317 	ldw	r2,-25780(gp)
    1ae8:	5ac00044 	addi	r11,r11,1
    1aec:	72c7883a 	add	r3,r14,r11
     // sobel_threshold in-lining
     sobel_result[k] = ((sobel_x_result[k]+sobel_y_result[k]) > threshold) ? 0xFF : 0;
     */

     // prepare 2 x 32 bit numbers which contain all pixels
     a = (source[k-sobel_width-1]<<24) + (source[k-sobel_width]<<16) + (source[k-sobel_width+1]<<8) + (source[k-1]);
    1af0:	1891c83a 	sub	r8,r3,r2
     b = (source[k+1]<<24) + (source[k+sobel_width-1]<<16) + (source[k+sobel_width]<<8) + (source[k+sobel_width+1]);
    1af4:	10c5883a 	add	r2,r2,r3
    1af8:	2085883a 	add	r2,r4,r2
     // sobel_threshold in-lining
     sobel_result[k] = ((sobel_x_result[k]+sobel_y_result[k]) > threshold) ? 0xFF : 0;
     */

     // prepare 2 x 32 bit numbers which contain all pixels
     a = (source[k-sobel_width-1]<<24) + (source[k-sobel_width]<<16) + (source[k-sobel_width+1]<<8) + (source[k-1]);
    1afc:	2211883a 	add	r8,r4,r8
     b = (source[k+1]<<24) + (source[k+sobel_width-1]<<16) + (source[k+sobel_width]<<8) + (source[k+sobel_width+1]);

     // custom instruction
     sobel_result[k] = (unsigned short) ALT_CI_CUSTOM_SOBEL_0(a, b);
    1b00:	11ffffc3 	ldbu	r7,-1(r2)
    1b04:	5a800003 	ldbu	r10,0(r11)
    1b08:	417fffc3 	ldbu	r5,-1(r8)
    1b0c:	41800003 	ldbu	r6,0(r8)
    1b10:	42400043 	ldbu	r9,1(r8)
    1b14:	12000003 	ldbu	r8,0(r2)
    1b18:	5014963a 	slli	r10,r10,24
    1b1c:	380e943a 	slli	r7,r7,16
    1b20:	4010923a 	slli	r8,r8,8
    1b24:	281e963a 	slli	r15,r5,24
    1b28:	300a943a 	slli	r5,r6,16
    1b2c:	4812923a 	slli	r9,r9,8
    1b30:	3a8f883a 	add	r7,r7,r10
    1b34:	3a0f883a 	add	r7,r7,r8
    1b38:	61800003 	ldbu	r6,0(r12)
    1b3c:	10800043 	ldbu	r2,1(r2)
    1b40:	d226d417 	ldw	r8,-25776(gp)
    1b44:	794b883a 	add	r5,r15,r5
    1b48:	2a4b883a 	add	r5,r5,r9
    1b4c:	40c7883a 	add	r3,r8,r3
    1b50:	298b883a 	add	r5,r5,r6
    1b54:	3885883a 	add	r2,r7,r2
    1b58:	2885c072 	custom	1,r2,r5,r2
    1b5c:	18800005 	stb	r2,0(r3)
    1b60:	63000044 	addi	r12,r12,1
unsigned char* sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   unsigned int k, a, b;
   unsigned int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
    1b64:	6affdf1e 	bne	r13,r11,1ae4 <__alt_data_end+0xff001ae4>
     b = (source[k+1]<<24) + (source[k+sobel_width-1]<<16) + (source[k+sobel_width]<<8) + (source[k+sobel_width+1]);

     // custom instruction
     sobel_result[k] = (unsigned short) ALT_CI_CUSTOM_SOBEL_0(a, b);
   }
   return sobel_result;
    1b68:	d0a6d417 	ldw	r2,-25776(gp)
    1b6c:	f800283a 	ret

00001b70 <GetSobel_rgb>:
}

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1b70:	d0a6d817 	ldw	r2,-25760(gp)
    1b74:	f800283a 	ret

00001b78 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1b78:	d0a6d417 	ldw	r2,-25776(gp)
    1b7c:	f800283a 	ret

00001b80 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1b80:	00804034 	movhi	r2,256
    1b84:	10843404 	addi	r2,r2,4304
    1b88:	11000035 	stwio	r4,0(r2)
    1b8c:	f800283a 	ret

00001b90 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1b90:	00804034 	movhi	r2,256
    1b94:	10843504 	addi	r2,r2,4308
    1b98:	11000025 	stbio	r4,0(r2)
    1b9c:	f800283a 	ret

00001ba0 <malloc>:
    1ba0:	00800074 	movhi	r2,1
    1ba4:	1088c304 	addi	r2,r2,8972
    1ba8:	200b883a 	mov	r5,r4
    1bac:	11000017 	ldw	r4,0(r2)
    1bb0:	0001bc81 	jmpi	1bc8 <_malloc_r>

00001bb4 <free>:
    1bb4:	00800074 	movhi	r2,1
    1bb8:	1088c304 	addi	r2,r2,8972
    1bbc:	200b883a 	mov	r5,r4
    1bc0:	11000017 	ldw	r4,0(r2)
    1bc4:	0006a181 	jmpi	6a18 <_free_r>

00001bc8 <_malloc_r>:
    1bc8:	defff504 	addi	sp,sp,-44
    1bcc:	dc800315 	stw	r18,12(sp)
    1bd0:	dfc00a15 	stw	ra,40(sp)
    1bd4:	df000915 	stw	fp,36(sp)
    1bd8:	ddc00815 	stw	r23,32(sp)
    1bdc:	dd800715 	stw	r22,28(sp)
    1be0:	dd400615 	stw	r21,24(sp)
    1be4:	dd000515 	stw	r20,20(sp)
    1be8:	dcc00415 	stw	r19,16(sp)
    1bec:	dc400215 	stw	r17,8(sp)
    1bf0:	dc000115 	stw	r16,4(sp)
    1bf4:	288002c4 	addi	r2,r5,11
    1bf8:	00c00584 	movi	r3,22
    1bfc:	2025883a 	mov	r18,r4
    1c00:	18807f2e 	bgeu	r3,r2,1e00 <_malloc_r+0x238>
    1c04:	047ffe04 	movi	r17,-8
    1c08:	1462703a 	and	r17,r2,r17
    1c0c:	8800a316 	blt	r17,zero,1e9c <_malloc_r+0x2d4>
    1c10:	8940a236 	bltu	r17,r5,1e9c <_malloc_r+0x2d4>
    1c14:	000e8500 	call	e850 <__malloc_lock>
    1c18:	00807dc4 	movi	r2,503
    1c1c:	1441e92e 	bgeu	r2,r17,23c4 <_malloc_r+0x7fc>
    1c20:	8804d27a 	srli	r2,r17,9
    1c24:	1000a126 	beq	r2,zero,1eac <_malloc_r+0x2e4>
    1c28:	00c00104 	movi	r3,4
    1c2c:	18811e36 	bltu	r3,r2,20a8 <_malloc_r+0x4e0>
    1c30:	8804d1ba 	srli	r2,r17,6
    1c34:	12000e44 	addi	r8,r2,57
    1c38:	11c00e04 	addi	r7,r2,56
    1c3c:	4209883a 	add	r4,r8,r8
    1c40:	04c00074 	movhi	r19,1
    1c44:	2109883a 	add	r4,r4,r4
    1c48:	9cc21304 	addi	r19,r19,2124
    1c4c:	2109883a 	add	r4,r4,r4
    1c50:	9909883a 	add	r4,r19,r4
    1c54:	24000117 	ldw	r16,4(r4)
    1c58:	213ffe04 	addi	r4,r4,-8
    1c5c:	24009726 	beq	r4,r16,1ebc <_malloc_r+0x2f4>
    1c60:	80800117 	ldw	r2,4(r16)
    1c64:	01bfff04 	movi	r6,-4
    1c68:	014003c4 	movi	r5,15
    1c6c:	1184703a 	and	r2,r2,r6
    1c70:	1447c83a 	sub	r3,r2,r17
    1c74:	28c00716 	blt	r5,r3,1c94 <_malloc_r+0xcc>
    1c78:	1800920e 	bge	r3,zero,1ec4 <_malloc_r+0x2fc>
    1c7c:	84000317 	ldw	r16,12(r16)
    1c80:	24008e26 	beq	r4,r16,1ebc <_malloc_r+0x2f4>
    1c84:	80800117 	ldw	r2,4(r16)
    1c88:	1184703a 	and	r2,r2,r6
    1c8c:	1447c83a 	sub	r3,r2,r17
    1c90:	28fff90e 	bge	r5,r3,1c78 <__alt_data_end+0xff001c78>
    1c94:	3809883a 	mov	r4,r7
    1c98:	01800074 	movhi	r6,1
    1c9c:	9c000417 	ldw	r16,16(r19)
    1ca0:	31821304 	addi	r6,r6,2124
    1ca4:	32000204 	addi	r8,r6,8
    1ca8:	82013426 	beq	r16,r8,217c <_malloc_r+0x5b4>
    1cac:	80c00117 	ldw	r3,4(r16)
    1cb0:	00bfff04 	movi	r2,-4
    1cb4:	188e703a 	and	r7,r3,r2
    1cb8:	3c45c83a 	sub	r2,r7,r17
    1cbc:	00c003c4 	movi	r3,15
    1cc0:	18811f16 	blt	r3,r2,2140 <_malloc_r+0x578>
    1cc4:	32000515 	stw	r8,20(r6)
    1cc8:	32000415 	stw	r8,16(r6)
    1ccc:	10007f0e 	bge	r2,zero,1ecc <_malloc_r+0x304>
    1cd0:	00807fc4 	movi	r2,511
    1cd4:	11c0fd36 	bltu	r2,r7,20cc <_malloc_r+0x504>
    1cd8:	3806d0fa 	srli	r3,r7,3
    1cdc:	01c00044 	movi	r7,1
    1ce0:	30800117 	ldw	r2,4(r6)
    1ce4:	19400044 	addi	r5,r3,1
    1ce8:	294b883a 	add	r5,r5,r5
    1cec:	1807d0ba 	srai	r3,r3,2
    1cf0:	294b883a 	add	r5,r5,r5
    1cf4:	294b883a 	add	r5,r5,r5
    1cf8:	298b883a 	add	r5,r5,r6
    1cfc:	38c6983a 	sll	r3,r7,r3
    1d00:	29c00017 	ldw	r7,0(r5)
    1d04:	2a7ffe04 	addi	r9,r5,-8
    1d08:	1886b03a 	or	r3,r3,r2
    1d0c:	82400315 	stw	r9,12(r16)
    1d10:	81c00215 	stw	r7,8(r16)
    1d14:	30c00115 	stw	r3,4(r6)
    1d18:	2c000015 	stw	r16,0(r5)
    1d1c:	3c000315 	stw	r16,12(r7)
    1d20:	2005d0ba 	srai	r2,r4,2
    1d24:	01400044 	movi	r5,1
    1d28:	288a983a 	sll	r5,r5,r2
    1d2c:	19406f36 	bltu	r3,r5,1eec <_malloc_r+0x324>
    1d30:	28c4703a 	and	r2,r5,r3
    1d34:	10000a1e 	bne	r2,zero,1d60 <_malloc_r+0x198>
    1d38:	00bfff04 	movi	r2,-4
    1d3c:	294b883a 	add	r5,r5,r5
    1d40:	2088703a 	and	r4,r4,r2
    1d44:	28c4703a 	and	r2,r5,r3
    1d48:	21000104 	addi	r4,r4,4
    1d4c:	1000041e 	bne	r2,zero,1d60 <_malloc_r+0x198>
    1d50:	294b883a 	add	r5,r5,r5
    1d54:	28c4703a 	and	r2,r5,r3
    1d58:	21000104 	addi	r4,r4,4
    1d5c:	103ffc26 	beq	r2,zero,1d50 <__alt_data_end+0xff001d50>
    1d60:	02bfff04 	movi	r10,-4
    1d64:	024003c4 	movi	r9,15
    1d68:	21800044 	addi	r6,r4,1
    1d6c:	318d883a 	add	r6,r6,r6
    1d70:	318d883a 	add	r6,r6,r6
    1d74:	318d883a 	add	r6,r6,r6
    1d78:	998d883a 	add	r6,r19,r6
    1d7c:	333ffe04 	addi	r12,r6,-8
    1d80:	2017883a 	mov	r11,r4
    1d84:	31800104 	addi	r6,r6,4
    1d88:	34000017 	ldw	r16,0(r6)
    1d8c:	31fffd04 	addi	r7,r6,-12
    1d90:	81c0041e 	bne	r16,r7,1da4 <_malloc_r+0x1dc>
    1d94:	0000fb06 	br	2184 <_malloc_r+0x5bc>
    1d98:	1801030e 	bge	r3,zero,21a8 <_malloc_r+0x5e0>
    1d9c:	84000317 	ldw	r16,12(r16)
    1da0:	81c0f826 	beq	r16,r7,2184 <_malloc_r+0x5bc>
    1da4:	80800117 	ldw	r2,4(r16)
    1da8:	1284703a 	and	r2,r2,r10
    1dac:	1447c83a 	sub	r3,r2,r17
    1db0:	48fff90e 	bge	r9,r3,1d98 <__alt_data_end+0xff001d98>
    1db4:	80800317 	ldw	r2,12(r16)
    1db8:	81000217 	ldw	r4,8(r16)
    1dbc:	89400054 	ori	r5,r17,1
    1dc0:	81400115 	stw	r5,4(r16)
    1dc4:	20800315 	stw	r2,12(r4)
    1dc8:	11000215 	stw	r4,8(r2)
    1dcc:	8463883a 	add	r17,r16,r17
    1dd0:	9c400515 	stw	r17,20(r19)
    1dd4:	9c400415 	stw	r17,16(r19)
    1dd8:	18800054 	ori	r2,r3,1
    1ddc:	88800115 	stw	r2,4(r17)
    1de0:	8a000315 	stw	r8,12(r17)
    1de4:	8a000215 	stw	r8,8(r17)
    1de8:	88e3883a 	add	r17,r17,r3
    1dec:	88c00015 	stw	r3,0(r17)
    1df0:	9009883a 	mov	r4,r18
    1df4:	000e8540 	call	e854 <__malloc_unlock>
    1df8:	80800204 	addi	r2,r16,8
    1dfc:	00001b06 	br	1e6c <_malloc_r+0x2a4>
    1e00:	04400404 	movi	r17,16
    1e04:	89402536 	bltu	r17,r5,1e9c <_malloc_r+0x2d4>
    1e08:	000e8500 	call	e850 <__malloc_lock>
    1e0c:	00800184 	movi	r2,6
    1e10:	01000084 	movi	r4,2
    1e14:	04c00074 	movhi	r19,1
    1e18:	1085883a 	add	r2,r2,r2
    1e1c:	9cc21304 	addi	r19,r19,2124
    1e20:	1085883a 	add	r2,r2,r2
    1e24:	9885883a 	add	r2,r19,r2
    1e28:	14000117 	ldw	r16,4(r2)
    1e2c:	10fffe04 	addi	r3,r2,-8
    1e30:	80c0d926 	beq	r16,r3,2198 <_malloc_r+0x5d0>
    1e34:	80c00117 	ldw	r3,4(r16)
    1e38:	81000317 	ldw	r4,12(r16)
    1e3c:	00bfff04 	movi	r2,-4
    1e40:	1884703a 	and	r2,r3,r2
    1e44:	81400217 	ldw	r5,8(r16)
    1e48:	8085883a 	add	r2,r16,r2
    1e4c:	10c00117 	ldw	r3,4(r2)
    1e50:	29000315 	stw	r4,12(r5)
    1e54:	21400215 	stw	r5,8(r4)
    1e58:	18c00054 	ori	r3,r3,1
    1e5c:	10c00115 	stw	r3,4(r2)
    1e60:	9009883a 	mov	r4,r18
    1e64:	000e8540 	call	e854 <__malloc_unlock>
    1e68:	80800204 	addi	r2,r16,8
    1e6c:	dfc00a17 	ldw	ra,40(sp)
    1e70:	df000917 	ldw	fp,36(sp)
    1e74:	ddc00817 	ldw	r23,32(sp)
    1e78:	dd800717 	ldw	r22,28(sp)
    1e7c:	dd400617 	ldw	r21,24(sp)
    1e80:	dd000517 	ldw	r20,20(sp)
    1e84:	dcc00417 	ldw	r19,16(sp)
    1e88:	dc800317 	ldw	r18,12(sp)
    1e8c:	dc400217 	ldw	r17,8(sp)
    1e90:	dc000117 	ldw	r16,4(sp)
    1e94:	dec00b04 	addi	sp,sp,44
    1e98:	f800283a 	ret
    1e9c:	00800304 	movi	r2,12
    1ea0:	90800015 	stw	r2,0(r18)
    1ea4:	0005883a 	mov	r2,zero
    1ea8:	003ff006 	br	1e6c <__alt_data_end+0xff001e6c>
    1eac:	01002004 	movi	r4,128
    1eb0:	02001004 	movi	r8,64
    1eb4:	01c00fc4 	movi	r7,63
    1eb8:	003f6106 	br	1c40 <__alt_data_end+0xff001c40>
    1ebc:	4009883a 	mov	r4,r8
    1ec0:	003f7506 	br	1c98 <__alt_data_end+0xff001c98>
    1ec4:	81000317 	ldw	r4,12(r16)
    1ec8:	003fde06 	br	1e44 <__alt_data_end+0xff001e44>
    1ecc:	81c5883a 	add	r2,r16,r7
    1ed0:	11400117 	ldw	r5,4(r2)
    1ed4:	9009883a 	mov	r4,r18
    1ed8:	29400054 	ori	r5,r5,1
    1edc:	11400115 	stw	r5,4(r2)
    1ee0:	000e8540 	call	e854 <__malloc_unlock>
    1ee4:	80800204 	addi	r2,r16,8
    1ee8:	003fe006 	br	1e6c <__alt_data_end+0xff001e6c>
    1eec:	9c000217 	ldw	r16,8(r19)
    1ef0:	00bfff04 	movi	r2,-4
    1ef4:	85800117 	ldw	r22,4(r16)
    1ef8:	b0ac703a 	and	r22,r22,r2
    1efc:	b4400336 	bltu	r22,r17,1f0c <_malloc_r+0x344>
    1f00:	b445c83a 	sub	r2,r22,r17
    1f04:	00c003c4 	movi	r3,15
    1f08:	18805d16 	blt	r3,r2,2080 <_malloc_r+0x4b8>
    1f0c:	05c00074 	movhi	r23,1
    1f10:	00800074 	movhi	r2,1
    1f14:	108f9904 	addi	r2,r2,15972
    1f18:	bdc8c004 	addi	r23,r23,8960
    1f1c:	15400017 	ldw	r21,0(r2)
    1f20:	b8c00017 	ldw	r3,0(r23)
    1f24:	00bfffc4 	movi	r2,-1
    1f28:	858d883a 	add	r6,r16,r22
    1f2c:	8d6b883a 	add	r21,r17,r21
    1f30:	1880ea26 	beq	r3,r2,22dc <_malloc_r+0x714>
    1f34:	ad4403c4 	addi	r21,r21,4111
    1f38:	00bc0004 	movi	r2,-4096
    1f3c:	a8aa703a 	and	r21,r21,r2
    1f40:	a80b883a 	mov	r5,r21
    1f44:	9009883a 	mov	r4,r18
    1f48:	d9800015 	stw	r6,0(sp)
    1f4c:	00025140 	call	2514 <_sbrk_r>
    1f50:	1029883a 	mov	r20,r2
    1f54:	00bfffc4 	movi	r2,-1
    1f58:	d9800017 	ldw	r6,0(sp)
    1f5c:	a080e826 	beq	r20,r2,2300 <_malloc_r+0x738>
    1f60:	a180a636 	bltu	r20,r6,21fc <_malloc_r+0x634>
    1f64:	07000074 	movhi	fp,1
    1f68:	e70fa704 	addi	fp,fp,16028
    1f6c:	e0800017 	ldw	r2,0(fp)
    1f70:	a887883a 	add	r3,r21,r2
    1f74:	e0c00015 	stw	r3,0(fp)
    1f78:	3500e626 	beq	r6,r20,2314 <_malloc_r+0x74c>
    1f7c:	b9000017 	ldw	r4,0(r23)
    1f80:	00bfffc4 	movi	r2,-1
    1f84:	2080ee26 	beq	r4,r2,2340 <_malloc_r+0x778>
    1f88:	a185c83a 	sub	r2,r20,r6
    1f8c:	10c5883a 	add	r2,r2,r3
    1f90:	e0800015 	stw	r2,0(fp)
    1f94:	a0c001cc 	andi	r3,r20,7
    1f98:	1800bc26 	beq	r3,zero,228c <_malloc_r+0x6c4>
    1f9c:	a0e9c83a 	sub	r20,r20,r3
    1fa0:	00840204 	movi	r2,4104
    1fa4:	a5000204 	addi	r20,r20,8
    1fa8:	10c7c83a 	sub	r3,r2,r3
    1fac:	a545883a 	add	r2,r20,r21
    1fb0:	1083ffcc 	andi	r2,r2,4095
    1fb4:	18abc83a 	sub	r21,r3,r2
    1fb8:	a80b883a 	mov	r5,r21
    1fbc:	9009883a 	mov	r4,r18
    1fc0:	00025140 	call	2514 <_sbrk_r>
    1fc4:	00ffffc4 	movi	r3,-1
    1fc8:	10c0e126 	beq	r2,r3,2350 <_malloc_r+0x788>
    1fcc:	1505c83a 	sub	r2,r2,r20
    1fd0:	1545883a 	add	r2,r2,r21
    1fd4:	10800054 	ori	r2,r2,1
    1fd8:	e0c00017 	ldw	r3,0(fp)
    1fdc:	9d000215 	stw	r20,8(r19)
    1fe0:	a0800115 	stw	r2,4(r20)
    1fe4:	a8c7883a 	add	r3,r21,r3
    1fe8:	e0c00015 	stw	r3,0(fp)
    1fec:	84c00e26 	beq	r16,r19,2028 <_malloc_r+0x460>
    1ff0:	018003c4 	movi	r6,15
    1ff4:	3580a72e 	bgeu	r6,r22,2294 <_malloc_r+0x6cc>
    1ff8:	81400117 	ldw	r5,4(r16)
    1ffc:	013ffe04 	movi	r4,-8
    2000:	b0bffd04 	addi	r2,r22,-12
    2004:	1104703a 	and	r2,r2,r4
    2008:	2900004c 	andi	r4,r5,1
    200c:	2088b03a 	or	r4,r4,r2
    2010:	81000115 	stw	r4,4(r16)
    2014:	01400144 	movi	r5,5
    2018:	8089883a 	add	r4,r16,r2
    201c:	21400115 	stw	r5,4(r4)
    2020:	21400215 	stw	r5,8(r4)
    2024:	3080cd36 	bltu	r6,r2,235c <_malloc_r+0x794>
    2028:	00800074 	movhi	r2,1
    202c:	108f9804 	addi	r2,r2,15968
    2030:	11000017 	ldw	r4,0(r2)
    2034:	20c0012e 	bgeu	r4,r3,203c <_malloc_r+0x474>
    2038:	10c00015 	stw	r3,0(r2)
    203c:	00800074 	movhi	r2,1
    2040:	108f9704 	addi	r2,r2,15964
    2044:	11000017 	ldw	r4,0(r2)
    2048:	9c000217 	ldw	r16,8(r19)
    204c:	20c0012e 	bgeu	r4,r3,2054 <_malloc_r+0x48c>
    2050:	10c00015 	stw	r3,0(r2)
    2054:	80c00117 	ldw	r3,4(r16)
    2058:	00bfff04 	movi	r2,-4
    205c:	1886703a 	and	r3,r3,r2
    2060:	1c45c83a 	sub	r2,r3,r17
    2064:	1c400236 	bltu	r3,r17,2070 <_malloc_r+0x4a8>
    2068:	00c003c4 	movi	r3,15
    206c:	18800416 	blt	r3,r2,2080 <_malloc_r+0x4b8>
    2070:	9009883a 	mov	r4,r18
    2074:	000e8540 	call	e854 <__malloc_unlock>
    2078:	0005883a 	mov	r2,zero
    207c:	003f7b06 	br	1e6c <__alt_data_end+0xff001e6c>
    2080:	88c00054 	ori	r3,r17,1
    2084:	80c00115 	stw	r3,4(r16)
    2088:	8463883a 	add	r17,r16,r17
    208c:	10800054 	ori	r2,r2,1
    2090:	9c400215 	stw	r17,8(r19)
    2094:	88800115 	stw	r2,4(r17)
    2098:	9009883a 	mov	r4,r18
    209c:	000e8540 	call	e854 <__malloc_unlock>
    20a0:	80800204 	addi	r2,r16,8
    20a4:	003f7106 	br	1e6c <__alt_data_end+0xff001e6c>
    20a8:	00c00504 	movi	r3,20
    20ac:	18804a2e 	bgeu	r3,r2,21d8 <_malloc_r+0x610>
    20b0:	00c01504 	movi	r3,84
    20b4:	18806e36 	bltu	r3,r2,2270 <_malloc_r+0x6a8>
    20b8:	8804d33a 	srli	r2,r17,12
    20bc:	12001bc4 	addi	r8,r2,111
    20c0:	11c01b84 	addi	r7,r2,110
    20c4:	4209883a 	add	r4,r8,r8
    20c8:	003edd06 	br	1c40 <__alt_data_end+0xff001c40>
    20cc:	3804d27a 	srli	r2,r7,9
    20d0:	00c00104 	movi	r3,4
    20d4:	1880442e 	bgeu	r3,r2,21e8 <_malloc_r+0x620>
    20d8:	00c00504 	movi	r3,20
    20dc:	18808136 	bltu	r3,r2,22e4 <_malloc_r+0x71c>
    20e0:	11401704 	addi	r5,r2,92
    20e4:	10c016c4 	addi	r3,r2,91
    20e8:	294b883a 	add	r5,r5,r5
    20ec:	294b883a 	add	r5,r5,r5
    20f0:	294b883a 	add	r5,r5,r5
    20f4:	994b883a 	add	r5,r19,r5
    20f8:	28800017 	ldw	r2,0(r5)
    20fc:	01800074 	movhi	r6,1
    2100:	297ffe04 	addi	r5,r5,-8
    2104:	31821304 	addi	r6,r6,2124
    2108:	28806526 	beq	r5,r2,22a0 <_malloc_r+0x6d8>
    210c:	01bfff04 	movi	r6,-4
    2110:	10c00117 	ldw	r3,4(r2)
    2114:	1986703a 	and	r3,r3,r6
    2118:	38c0022e 	bgeu	r7,r3,2124 <_malloc_r+0x55c>
    211c:	10800217 	ldw	r2,8(r2)
    2120:	28bffb1e 	bne	r5,r2,2110 <__alt_data_end+0xff002110>
    2124:	11400317 	ldw	r5,12(r2)
    2128:	98c00117 	ldw	r3,4(r19)
    212c:	81400315 	stw	r5,12(r16)
    2130:	80800215 	stw	r2,8(r16)
    2134:	2c000215 	stw	r16,8(r5)
    2138:	14000315 	stw	r16,12(r2)
    213c:	003ef806 	br	1d20 <__alt_data_end+0xff001d20>
    2140:	88c00054 	ori	r3,r17,1
    2144:	80c00115 	stw	r3,4(r16)
    2148:	8463883a 	add	r17,r16,r17
    214c:	34400515 	stw	r17,20(r6)
    2150:	34400415 	stw	r17,16(r6)
    2154:	10c00054 	ori	r3,r2,1
    2158:	8a000315 	stw	r8,12(r17)
    215c:	8a000215 	stw	r8,8(r17)
    2160:	88c00115 	stw	r3,4(r17)
    2164:	88a3883a 	add	r17,r17,r2
    2168:	88800015 	stw	r2,0(r17)
    216c:	9009883a 	mov	r4,r18
    2170:	000e8540 	call	e854 <__malloc_unlock>
    2174:	80800204 	addi	r2,r16,8
    2178:	003f3c06 	br	1e6c <__alt_data_end+0xff001e6c>
    217c:	30c00117 	ldw	r3,4(r6)
    2180:	003ee706 	br	1d20 <__alt_data_end+0xff001d20>
    2184:	5ac00044 	addi	r11,r11,1
    2188:	588000cc 	andi	r2,r11,3
    218c:	31800204 	addi	r6,r6,8
    2190:	103efd1e 	bne	r2,zero,1d88 <__alt_data_end+0xff001d88>
    2194:	00002406 	br	2228 <_malloc_r+0x660>
    2198:	14000317 	ldw	r16,12(r2)
    219c:	143f251e 	bne	r2,r16,1e34 <__alt_data_end+0xff001e34>
    21a0:	21000084 	addi	r4,r4,2
    21a4:	003ebc06 	br	1c98 <__alt_data_end+0xff001c98>
    21a8:	8085883a 	add	r2,r16,r2
    21ac:	10c00117 	ldw	r3,4(r2)
    21b0:	81000317 	ldw	r4,12(r16)
    21b4:	81400217 	ldw	r5,8(r16)
    21b8:	18c00054 	ori	r3,r3,1
    21bc:	10c00115 	stw	r3,4(r2)
    21c0:	29000315 	stw	r4,12(r5)
    21c4:	21400215 	stw	r5,8(r4)
    21c8:	9009883a 	mov	r4,r18
    21cc:	000e8540 	call	e854 <__malloc_unlock>
    21d0:	80800204 	addi	r2,r16,8
    21d4:	003f2506 	br	1e6c <__alt_data_end+0xff001e6c>
    21d8:	12001704 	addi	r8,r2,92
    21dc:	11c016c4 	addi	r7,r2,91
    21e0:	4209883a 	add	r4,r8,r8
    21e4:	003e9606 	br	1c40 <__alt_data_end+0xff001c40>
    21e8:	3804d1ba 	srli	r2,r7,6
    21ec:	11400e44 	addi	r5,r2,57
    21f0:	10c00e04 	addi	r3,r2,56
    21f4:	294b883a 	add	r5,r5,r5
    21f8:	003fbc06 	br	20ec <__alt_data_end+0xff0020ec>
    21fc:	84ff5926 	beq	r16,r19,1f64 <__alt_data_end+0xff001f64>
    2200:	00800074 	movhi	r2,1
    2204:	10821304 	addi	r2,r2,2124
    2208:	14000217 	ldw	r16,8(r2)
    220c:	00bfff04 	movi	r2,-4
    2210:	80c00117 	ldw	r3,4(r16)
    2214:	1886703a 	and	r3,r3,r2
    2218:	003f9106 	br	2060 <__alt_data_end+0xff002060>
    221c:	60800217 	ldw	r2,8(r12)
    2220:	213fffc4 	addi	r4,r4,-1
    2224:	1300651e 	bne	r2,r12,23bc <_malloc_r+0x7f4>
    2228:	208000cc 	andi	r2,r4,3
    222c:	633ffe04 	addi	r12,r12,-8
    2230:	103ffa1e 	bne	r2,zero,221c <__alt_data_end+0xff00221c>
    2234:	98800117 	ldw	r2,4(r19)
    2238:	0146303a 	nor	r3,zero,r5
    223c:	1884703a 	and	r2,r3,r2
    2240:	98800115 	stw	r2,4(r19)
    2244:	294b883a 	add	r5,r5,r5
    2248:	117f2836 	bltu	r2,r5,1eec <__alt_data_end+0xff001eec>
    224c:	283f2726 	beq	r5,zero,1eec <__alt_data_end+0xff001eec>
    2250:	2886703a 	and	r3,r5,r2
    2254:	5809883a 	mov	r4,r11
    2258:	183ec31e 	bne	r3,zero,1d68 <__alt_data_end+0xff001d68>
    225c:	294b883a 	add	r5,r5,r5
    2260:	2886703a 	and	r3,r5,r2
    2264:	21000104 	addi	r4,r4,4
    2268:	183ffc26 	beq	r3,zero,225c <__alt_data_end+0xff00225c>
    226c:	003ebe06 	br	1d68 <__alt_data_end+0xff001d68>
    2270:	00c05504 	movi	r3,340
    2274:	18801236 	bltu	r3,r2,22c0 <_malloc_r+0x6f8>
    2278:	8804d3fa 	srli	r2,r17,15
    227c:	12001e04 	addi	r8,r2,120
    2280:	11c01dc4 	addi	r7,r2,119
    2284:	4209883a 	add	r4,r8,r8
    2288:	003e6d06 	br	1c40 <__alt_data_end+0xff001c40>
    228c:	00c40004 	movi	r3,4096
    2290:	003f4606 	br	1fac <__alt_data_end+0xff001fac>
    2294:	00800044 	movi	r2,1
    2298:	a0800115 	stw	r2,4(r20)
    229c:	003f7406 	br	2070 <__alt_data_end+0xff002070>
    22a0:	1805d0ba 	srai	r2,r3,2
    22a4:	01c00044 	movi	r7,1
    22a8:	30c00117 	ldw	r3,4(r6)
    22ac:	388e983a 	sll	r7,r7,r2
    22b0:	2805883a 	mov	r2,r5
    22b4:	38c6b03a 	or	r3,r7,r3
    22b8:	30c00115 	stw	r3,4(r6)
    22bc:	003f9b06 	br	212c <__alt_data_end+0xff00212c>
    22c0:	00c15504 	movi	r3,1364
    22c4:	18801a36 	bltu	r3,r2,2330 <_malloc_r+0x768>
    22c8:	8804d4ba 	srli	r2,r17,18
    22cc:	12001f44 	addi	r8,r2,125
    22d0:	11c01f04 	addi	r7,r2,124
    22d4:	4209883a 	add	r4,r8,r8
    22d8:	003e5906 	br	1c40 <__alt_data_end+0xff001c40>
    22dc:	ad400404 	addi	r21,r21,16
    22e0:	003f1706 	br	1f40 <__alt_data_end+0xff001f40>
    22e4:	00c01504 	movi	r3,84
    22e8:	18802336 	bltu	r3,r2,2378 <_malloc_r+0x7b0>
    22ec:	3804d33a 	srli	r2,r7,12
    22f0:	11401bc4 	addi	r5,r2,111
    22f4:	10c01b84 	addi	r3,r2,110
    22f8:	294b883a 	add	r5,r5,r5
    22fc:	003f7b06 	br	20ec <__alt_data_end+0xff0020ec>
    2300:	9c000217 	ldw	r16,8(r19)
    2304:	00bfff04 	movi	r2,-4
    2308:	80c00117 	ldw	r3,4(r16)
    230c:	1886703a 	and	r3,r3,r2
    2310:	003f5306 	br	2060 <__alt_data_end+0xff002060>
    2314:	3083ffcc 	andi	r2,r6,4095
    2318:	103f181e 	bne	r2,zero,1f7c <__alt_data_end+0xff001f7c>
    231c:	99000217 	ldw	r4,8(r19)
    2320:	b545883a 	add	r2,r22,r21
    2324:	10800054 	ori	r2,r2,1
    2328:	20800115 	stw	r2,4(r4)
    232c:	003f3e06 	br	2028 <__alt_data_end+0xff002028>
    2330:	01003f84 	movi	r4,254
    2334:	02001fc4 	movi	r8,127
    2338:	01c01f84 	movi	r7,126
    233c:	003e4006 	br	1c40 <__alt_data_end+0xff001c40>
    2340:	00800074 	movhi	r2,1
    2344:	1088c004 	addi	r2,r2,8960
    2348:	15000015 	stw	r20,0(r2)
    234c:	003f1106 	br	1f94 <__alt_data_end+0xff001f94>
    2350:	00800044 	movi	r2,1
    2354:	002b883a 	mov	r21,zero
    2358:	003f1f06 	br	1fd8 <__alt_data_end+0xff001fd8>
    235c:	81400204 	addi	r5,r16,8
    2360:	9009883a 	mov	r4,r18
    2364:	0006a180 	call	6a18 <_free_r>
    2368:	00800074 	movhi	r2,1
    236c:	108fa704 	addi	r2,r2,16028
    2370:	10c00017 	ldw	r3,0(r2)
    2374:	003f2c06 	br	2028 <__alt_data_end+0xff002028>
    2378:	00c05504 	movi	r3,340
    237c:	18800536 	bltu	r3,r2,2394 <_malloc_r+0x7cc>
    2380:	3804d3fa 	srli	r2,r7,15
    2384:	11401e04 	addi	r5,r2,120
    2388:	10c01dc4 	addi	r3,r2,119
    238c:	294b883a 	add	r5,r5,r5
    2390:	003f5606 	br	20ec <__alt_data_end+0xff0020ec>
    2394:	00c15504 	movi	r3,1364
    2398:	18800536 	bltu	r3,r2,23b0 <_malloc_r+0x7e8>
    239c:	3804d4ba 	srli	r2,r7,18
    23a0:	11401f44 	addi	r5,r2,125
    23a4:	10c01f04 	addi	r3,r2,124
    23a8:	294b883a 	add	r5,r5,r5
    23ac:	003f4f06 	br	20ec <__alt_data_end+0xff0020ec>
    23b0:	01403f84 	movi	r5,254
    23b4:	00c01f84 	movi	r3,126
    23b8:	003f4c06 	br	20ec <__alt_data_end+0xff0020ec>
    23bc:	98800117 	ldw	r2,4(r19)
    23c0:	003fa006 	br	2244 <__alt_data_end+0xff002244>
    23c4:	8808d0fa 	srli	r4,r17,3
    23c8:	20800044 	addi	r2,r4,1
    23cc:	1085883a 	add	r2,r2,r2
    23d0:	003e9006 	br	1e14 <__alt_data_end+0xff001e14>

000023d4 <_printf_r>:
    23d4:	defffd04 	addi	sp,sp,-12
    23d8:	2805883a 	mov	r2,r5
    23dc:	dfc00015 	stw	ra,0(sp)
    23e0:	d9800115 	stw	r6,4(sp)
    23e4:	d9c00215 	stw	r7,8(sp)
    23e8:	21400217 	ldw	r5,8(r4)
    23ec:	d9c00104 	addi	r7,sp,4
    23f0:	100d883a 	mov	r6,r2
    23f4:	00026000 	call	2600 <___vfprintf_internal_r>
    23f8:	dfc00017 	ldw	ra,0(sp)
    23fc:	dec00304 	addi	sp,sp,12
    2400:	f800283a 	ret

00002404 <printf>:
    2404:	defffc04 	addi	sp,sp,-16
    2408:	dfc00015 	stw	ra,0(sp)
    240c:	d9400115 	stw	r5,4(sp)
    2410:	d9800215 	stw	r6,8(sp)
    2414:	d9c00315 	stw	r7,12(sp)
    2418:	00800074 	movhi	r2,1
    241c:	1088c304 	addi	r2,r2,8972
    2420:	10800017 	ldw	r2,0(r2)
    2424:	200b883a 	mov	r5,r4
    2428:	d9800104 	addi	r6,sp,4
    242c:	11000217 	ldw	r4,8(r2)
    2430:	00047f80 	call	47f8 <__vfprintf_internal>
    2434:	dfc00017 	ldw	ra,0(sp)
    2438:	dec00404 	addi	sp,sp,16
    243c:	f800283a 	ret

00002440 <_puts_r>:
    2440:	defff604 	addi	sp,sp,-40
    2444:	dc000715 	stw	r16,28(sp)
    2448:	2021883a 	mov	r16,r4
    244c:	2809883a 	mov	r4,r5
    2450:	dc400815 	stw	r17,32(sp)
    2454:	dfc00915 	stw	ra,36(sp)
    2458:	2823883a 	mov	r17,r5
    245c:	00025680 	call	2568 <strlen>
    2460:	10c00044 	addi	r3,r2,1
    2464:	d8800115 	stw	r2,4(sp)
    2468:	00800074 	movhi	r2,1
    246c:	10815904 	addi	r2,r2,1380
    2470:	d8800215 	stw	r2,8(sp)
    2474:	00800044 	movi	r2,1
    2478:	d8800315 	stw	r2,12(sp)
    247c:	00800084 	movi	r2,2
    2480:	dc400015 	stw	r17,0(sp)
    2484:	d8c00615 	stw	r3,24(sp)
    2488:	dec00415 	stw	sp,16(sp)
    248c:	d8800515 	stw	r2,20(sp)
    2490:	80000226 	beq	r16,zero,249c <_puts_r+0x5c>
    2494:	80800e17 	ldw	r2,56(r16)
    2498:	10001426 	beq	r2,zero,24ec <_puts_r+0xac>
    249c:	81400217 	ldw	r5,8(r16)
    24a0:	2880030b 	ldhu	r2,12(r5)
    24a4:	10c8000c 	andi	r3,r2,8192
    24a8:	1800061e 	bne	r3,zero,24c4 <_puts_r+0x84>
    24ac:	29001917 	ldw	r4,100(r5)
    24b0:	00f7ffc4 	movi	r3,-8193
    24b4:	10880014 	ori	r2,r2,8192
    24b8:	20c6703a 	and	r3,r4,r3
    24bc:	2880030d 	sth	r2,12(r5)
    24c0:	28c01915 	stw	r3,100(r5)
    24c4:	d9800404 	addi	r6,sp,16
    24c8:	8009883a 	mov	r4,r16
    24cc:	0006d280 	call	6d28 <__sfvwrite_r>
    24d0:	1000091e 	bne	r2,zero,24f8 <_puts_r+0xb8>
    24d4:	00800284 	movi	r2,10
    24d8:	dfc00917 	ldw	ra,36(sp)
    24dc:	dc400817 	ldw	r17,32(sp)
    24e0:	dc000717 	ldw	r16,28(sp)
    24e4:	dec00a04 	addi	sp,sp,40
    24e8:	f800283a 	ret
    24ec:	8009883a 	mov	r4,r16
    24f0:	00068a40 	call	68a4 <__sinit>
    24f4:	003fe906 	br	249c <__alt_data_end+0xff00249c>
    24f8:	00bfffc4 	movi	r2,-1
    24fc:	003ff606 	br	24d8 <__alt_data_end+0xff0024d8>

00002500 <puts>:
    2500:	00800074 	movhi	r2,1
    2504:	1088c304 	addi	r2,r2,8972
    2508:	200b883a 	mov	r5,r4
    250c:	11000017 	ldw	r4,0(r2)
    2510:	00024401 	jmpi	2440 <_puts_r>

00002514 <_sbrk_r>:
    2514:	defffd04 	addi	sp,sp,-12
    2518:	dc000015 	stw	r16,0(sp)
    251c:	04000074 	movhi	r16,1
    2520:	dc400115 	stw	r17,4(sp)
    2524:	840f9a04 	addi	r16,r16,15976
    2528:	2023883a 	mov	r17,r4
    252c:	2809883a 	mov	r4,r5
    2530:	dfc00215 	stw	ra,8(sp)
    2534:	80000015 	stw	zero,0(r16)
    2538:	000e9440 	call	e944 <sbrk>
    253c:	00ffffc4 	movi	r3,-1
    2540:	10c00526 	beq	r2,r3,2558 <_sbrk_r+0x44>
    2544:	dfc00217 	ldw	ra,8(sp)
    2548:	dc400117 	ldw	r17,4(sp)
    254c:	dc000017 	ldw	r16,0(sp)
    2550:	dec00304 	addi	sp,sp,12
    2554:	f800283a 	ret
    2558:	80c00017 	ldw	r3,0(r16)
    255c:	183ff926 	beq	r3,zero,2544 <__alt_data_end+0xff002544>
    2560:	88c00015 	stw	r3,0(r17)
    2564:	003ff706 	br	2544 <__alt_data_end+0xff002544>

00002568 <strlen>:
    2568:	208000cc 	andi	r2,r4,3
    256c:	10002026 	beq	r2,zero,25f0 <strlen+0x88>
    2570:	20800007 	ldb	r2,0(r4)
    2574:	10002026 	beq	r2,zero,25f8 <strlen+0x90>
    2578:	2005883a 	mov	r2,r4
    257c:	00000206 	br	2588 <strlen+0x20>
    2580:	10c00007 	ldb	r3,0(r2)
    2584:	18001826 	beq	r3,zero,25e8 <strlen+0x80>
    2588:	10800044 	addi	r2,r2,1
    258c:	10c000cc 	andi	r3,r2,3
    2590:	183ffb1e 	bne	r3,zero,2580 <__alt_data_end+0xff002580>
    2594:	10c00017 	ldw	r3,0(r2)
    2598:	01ffbff4 	movhi	r7,65279
    259c:	39ffbfc4 	addi	r7,r7,-257
    25a0:	00ca303a 	nor	r5,zero,r3
    25a4:	01a02074 	movhi	r6,32897
    25a8:	19c7883a 	add	r3,r3,r7
    25ac:	31a02004 	addi	r6,r6,-32640
    25b0:	1946703a 	and	r3,r3,r5
    25b4:	1986703a 	and	r3,r3,r6
    25b8:	1800091e 	bne	r3,zero,25e0 <strlen+0x78>
    25bc:	10800104 	addi	r2,r2,4
    25c0:	10c00017 	ldw	r3,0(r2)
    25c4:	19cb883a 	add	r5,r3,r7
    25c8:	00c6303a 	nor	r3,zero,r3
    25cc:	28c6703a 	and	r3,r5,r3
    25d0:	1986703a 	and	r3,r3,r6
    25d4:	183ff926 	beq	r3,zero,25bc <__alt_data_end+0xff0025bc>
    25d8:	00000106 	br	25e0 <strlen+0x78>
    25dc:	10800044 	addi	r2,r2,1
    25e0:	10c00007 	ldb	r3,0(r2)
    25e4:	183ffd1e 	bne	r3,zero,25dc <__alt_data_end+0xff0025dc>
    25e8:	1105c83a 	sub	r2,r2,r4
    25ec:	f800283a 	ret
    25f0:	2005883a 	mov	r2,r4
    25f4:	003fe706 	br	2594 <__alt_data_end+0xff002594>
    25f8:	0005883a 	mov	r2,zero
    25fc:	f800283a 	ret

00002600 <___vfprintf_internal_r>:
    2600:	deffb804 	addi	sp,sp,-288
    2604:	dfc04715 	stw	ra,284(sp)
    2608:	ddc04515 	stw	r23,276(sp)
    260c:	dd404315 	stw	r21,268(sp)
    2610:	d9002c15 	stw	r4,176(sp)
    2614:	282f883a 	mov	r23,r5
    2618:	302b883a 	mov	r21,r6
    261c:	d9c02d15 	stw	r7,180(sp)
    2620:	df004615 	stw	fp,280(sp)
    2624:	dd804415 	stw	r22,272(sp)
    2628:	dd004215 	stw	r20,264(sp)
    262c:	dcc04115 	stw	r19,260(sp)
    2630:	dc804015 	stw	r18,256(sp)
    2634:	dc403f15 	stw	r17,252(sp)
    2638:	dc003e15 	stw	r16,248(sp)
    263c:	00074180 	call	7418 <_localeconv_r>
    2640:	10800017 	ldw	r2,0(r2)
    2644:	1009883a 	mov	r4,r2
    2648:	d8803415 	stw	r2,208(sp)
    264c:	00025680 	call	2568 <strlen>
    2650:	d8803715 	stw	r2,220(sp)
    2654:	d8802c17 	ldw	r2,176(sp)
    2658:	10000226 	beq	r2,zero,2664 <___vfprintf_internal_r+0x64>
    265c:	10800e17 	ldw	r2,56(r2)
    2660:	1000f926 	beq	r2,zero,2a48 <___vfprintf_internal_r+0x448>
    2664:	b880030b 	ldhu	r2,12(r23)
    2668:	10c8000c 	andi	r3,r2,8192
    266c:	1800061e 	bne	r3,zero,2688 <___vfprintf_internal_r+0x88>
    2670:	b9001917 	ldw	r4,100(r23)
    2674:	00f7ffc4 	movi	r3,-8193
    2678:	10880014 	ori	r2,r2,8192
    267c:	20c6703a 	and	r3,r4,r3
    2680:	b880030d 	sth	r2,12(r23)
    2684:	b8c01915 	stw	r3,100(r23)
    2688:	10c0020c 	andi	r3,r2,8
    268c:	1800c126 	beq	r3,zero,2994 <___vfprintf_internal_r+0x394>
    2690:	b8c00417 	ldw	r3,16(r23)
    2694:	1800bf26 	beq	r3,zero,2994 <___vfprintf_internal_r+0x394>
    2698:	1080068c 	andi	r2,r2,26
    269c:	00c00284 	movi	r3,10
    26a0:	10c0c426 	beq	r2,r3,29b4 <___vfprintf_internal_r+0x3b4>
    26a4:	d8c00404 	addi	r3,sp,16
    26a8:	05000074 	movhi	r20,1
    26ac:	d9001e04 	addi	r4,sp,120
    26b0:	a5016a84 	addi	r20,r20,1450
    26b4:	d8c01e15 	stw	r3,120(sp)
    26b8:	d8002015 	stw	zero,128(sp)
    26bc:	d8001f15 	stw	zero,124(sp)
    26c0:	d8003315 	stw	zero,204(sp)
    26c4:	d8003615 	stw	zero,216(sp)
    26c8:	d8003815 	stw	zero,224(sp)
    26cc:	1811883a 	mov	r8,r3
    26d0:	d8003915 	stw	zero,228(sp)
    26d4:	d8003a15 	stw	zero,232(sp)
    26d8:	d8002f15 	stw	zero,188(sp)
    26dc:	d9002815 	stw	r4,160(sp)
    26e0:	a8800007 	ldb	r2,0(r21)
    26e4:	10027b26 	beq	r2,zero,30d4 <___vfprintf_internal_r+0xad4>
    26e8:	00c00944 	movi	r3,37
    26ec:	a821883a 	mov	r16,r21
    26f0:	10c0021e 	bne	r2,r3,26fc <___vfprintf_internal_r+0xfc>
    26f4:	00001406 	br	2748 <___vfprintf_internal_r+0x148>
    26f8:	10c00326 	beq	r2,r3,2708 <___vfprintf_internal_r+0x108>
    26fc:	84000044 	addi	r16,r16,1
    2700:	80800007 	ldb	r2,0(r16)
    2704:	103ffc1e 	bne	r2,zero,26f8 <__alt_data_end+0xff0026f8>
    2708:	8563c83a 	sub	r17,r16,r21
    270c:	88000e26 	beq	r17,zero,2748 <___vfprintf_internal_r+0x148>
    2710:	d8c02017 	ldw	r3,128(sp)
    2714:	d8801f17 	ldw	r2,124(sp)
    2718:	45400015 	stw	r21,0(r8)
    271c:	1c47883a 	add	r3,r3,r17
    2720:	10800044 	addi	r2,r2,1
    2724:	d8c02015 	stw	r3,128(sp)
    2728:	44400115 	stw	r17,4(r8)
    272c:	d8801f15 	stw	r2,124(sp)
    2730:	00c001c4 	movi	r3,7
    2734:	1880a716 	blt	r3,r2,29d4 <___vfprintf_internal_r+0x3d4>
    2738:	42000204 	addi	r8,r8,8
    273c:	d9402f17 	ldw	r5,188(sp)
    2740:	2c4b883a 	add	r5,r5,r17
    2744:	d9402f15 	stw	r5,188(sp)
    2748:	80800007 	ldb	r2,0(r16)
    274c:	1000a826 	beq	r2,zero,29f0 <___vfprintf_internal_r+0x3f0>
    2750:	84400047 	ldb	r17,1(r16)
    2754:	00bfffc4 	movi	r2,-1
    2758:	85400044 	addi	r21,r16,1
    275c:	d8002785 	stb	zero,158(sp)
    2760:	0007883a 	mov	r3,zero
    2764:	000f883a 	mov	r7,zero
    2768:	d8802915 	stw	r2,164(sp)
    276c:	d8003115 	stw	zero,196(sp)
    2770:	0025883a 	mov	r18,zero
    2774:	01401604 	movi	r5,88
    2778:	01800244 	movi	r6,9
    277c:	02800a84 	movi	r10,42
    2780:	02401b04 	movi	r9,108
    2784:	ad400044 	addi	r21,r21,1
    2788:	88bff804 	addi	r2,r17,-32
    278c:	28830436 	bltu	r5,r2,33a0 <___vfprintf_internal_r+0xda0>
    2790:	100490ba 	slli	r2,r2,2
    2794:	01000034 	movhi	r4,0
    2798:	2109ea04 	addi	r4,r4,10152
    279c:	1105883a 	add	r2,r2,r4
    27a0:	10800017 	ldw	r2,0(r2)
    27a4:	1000683a 	jmp	r2
    27a8:	000032c0 	call	32c <init_camera+0x154>
    27ac:	000033a0 	cmpeqi	zero,zero,206
    27b0:	000033a0 	cmpeqi	zero,zero,206
    27b4:	000032e0 	cmpeqi	zero,zero,203
    27b8:	000033a0 	cmpeqi	zero,zero,206
    27bc:	000033a0 	cmpeqi	zero,zero,206
    27c0:	000033a0 	cmpeqi	zero,zero,206
    27c4:	000033a0 	cmpeqi	zero,zero,206
    27c8:	000033a0 	cmpeqi	zero,zero,206
    27cc:	000033a0 	cmpeqi	zero,zero,206
    27d0:	00002a54 	movui	zero,169
    27d4:	000031fc 	xorhi	zero,zero,199
    27d8:	000033a0 	cmpeqi	zero,zero,206
    27dc:	0000291c 	xori	zero,zero,164
    27e0:	00002a7c 	xorhi	zero,zero,169
    27e4:	000033a0 	cmpeqi	zero,zero,206
    27e8:	00002abc 	xorhi	zero,zero,170
    27ec:	00002ac8 	cmpgei	zero,zero,171
    27f0:	00002ac8 	cmpgei	zero,zero,171
    27f4:	00002ac8 	cmpgei	zero,zero,171
    27f8:	00002ac8 	cmpgei	zero,zero,171
    27fc:	00002ac8 	cmpgei	zero,zero,171
    2800:	00002ac8 	cmpgei	zero,zero,171
    2804:	00002ac8 	cmpgei	zero,zero,171
    2808:	00002ac8 	cmpgei	zero,zero,171
    280c:	00002ac8 	cmpgei	zero,zero,171
    2810:	000033a0 	cmpeqi	zero,zero,206
    2814:	000033a0 	cmpeqi	zero,zero,206
    2818:	000033a0 	cmpeqi	zero,zero,206
    281c:	000033a0 	cmpeqi	zero,zero,206
    2820:	000033a0 	cmpeqi	zero,zero,206
    2824:	000033a0 	cmpeqi	zero,zero,206
    2828:	000033a0 	cmpeqi	zero,zero,206
    282c:	000033a0 	cmpeqi	zero,zero,206
    2830:	000033a0 	cmpeqi	zero,zero,206
    2834:	000033a0 	cmpeqi	zero,zero,206
    2838:	00002afc 	xorhi	zero,zero,171
    283c:	00002bb8 	rdprs	zero,zero,174
    2840:	000033a0 	cmpeqi	zero,zero,206
    2844:	00002bb8 	rdprs	zero,zero,174
    2848:	000033a0 	cmpeqi	zero,zero,206
    284c:	000033a0 	cmpeqi	zero,zero,206
    2850:	000033a0 	cmpeqi	zero,zero,206
    2854:	000033a0 	cmpeqi	zero,zero,206
    2858:	00002c58 	cmpnei	zero,zero,177
    285c:	000033a0 	cmpeqi	zero,zero,206
    2860:	000033a0 	cmpeqi	zero,zero,206
    2864:	00002c64 	muli	zero,zero,177
    2868:	000033a0 	cmpeqi	zero,zero,206
    286c:	000033a0 	cmpeqi	zero,zero,206
    2870:	000033a0 	cmpeqi	zero,zero,206
    2874:	000033a0 	cmpeqi	zero,zero,206
    2878:	000033a0 	cmpeqi	zero,zero,206
    287c:	000030dc 	xori	zero,zero,195
    2880:	000033a0 	cmpeqi	zero,zero,206
    2884:	000033a0 	cmpeqi	zero,zero,206
    2888:	0000313c 	xorhi	zero,zero,196
    288c:	000033a0 	cmpeqi	zero,zero,206
    2890:	000033a0 	cmpeqi	zero,zero,206
    2894:	000033a0 	cmpeqi	zero,zero,206
    2898:	000033a0 	cmpeqi	zero,zero,206
    289c:	000033a0 	cmpeqi	zero,zero,206
    28a0:	000033a0 	cmpeqi	zero,zero,206
    28a4:	000033a0 	cmpeqi	zero,zero,206
    28a8:	000033a0 	cmpeqi	zero,zero,206
    28ac:	000033a0 	cmpeqi	zero,zero,206
    28b0:	000033a0 	cmpeqi	zero,zero,206
    28b4:	0000334c 	andi	zero,zero,205
    28b8:	000032ec 	andhi	zero,zero,203
    28bc:	00002bb8 	rdprs	zero,zero,174
    28c0:	00002bb8 	rdprs	zero,zero,174
    28c4:	00002bb8 	rdprs	zero,zero,174
    28c8:	000032fc 	xorhi	zero,zero,203
    28cc:	000032ec 	andhi	zero,zero,203
    28d0:	000033a0 	cmpeqi	zero,zero,206
    28d4:	000033a0 	cmpeqi	zero,zero,206
    28d8:	00003308 	cmpgei	zero,zero,204
    28dc:	000033a0 	cmpeqi	zero,zero,206
    28e0:	00003318 	cmpnei	zero,zero,204
    28e4:	000031ec 	andhi	zero,zero,199
    28e8:	00002928 	cmpgeui	zero,zero,164
    28ec:	0000320c 	andi	zero,zero,200
    28f0:	000033a0 	cmpeqi	zero,zero,206
    28f4:	00003218 	cmpnei	zero,zero,200
    28f8:	000033a0 	cmpeqi	zero,zero,206
    28fc:	00003274 	movhi	zero,201
    2900:	000033a0 	cmpeqi	zero,zero,206
    2904:	000033a0 	cmpeqi	zero,zero,206
    2908:	00003284 	movi	zero,202
    290c:	d9003117 	ldw	r4,196(sp)
    2910:	d8802d15 	stw	r2,180(sp)
    2914:	0109c83a 	sub	r4,zero,r4
    2918:	d9003115 	stw	r4,196(sp)
    291c:	94800114 	ori	r18,r18,4
    2920:	ac400007 	ldb	r17,0(r21)
    2924:	003f9706 	br	2784 <__alt_data_end+0xff002784>
    2928:	00800c04 	movi	r2,48
    292c:	d9002d17 	ldw	r4,180(sp)
    2930:	d9402917 	ldw	r5,164(sp)
    2934:	d8802705 	stb	r2,156(sp)
    2938:	00801e04 	movi	r2,120
    293c:	d8802745 	stb	r2,157(sp)
    2940:	d8002785 	stb	zero,158(sp)
    2944:	20c00104 	addi	r3,r4,4
    2948:	24c00017 	ldw	r19,0(r4)
    294c:	002d883a 	mov	r22,zero
    2950:	90800094 	ori	r2,r18,2
    2954:	28029a16 	blt	r5,zero,33c0 <___vfprintf_internal_r+0xdc0>
    2958:	00bfdfc4 	movi	r2,-129
    295c:	90a4703a 	and	r18,r18,r2
    2960:	d8c02d15 	stw	r3,180(sp)
    2964:	94800094 	ori	r18,r18,2
    2968:	9802871e 	bne	r19,zero,3388 <___vfprintf_internal_r+0xd88>
    296c:	00800074 	movhi	r2,1
    2970:	10816304 	addi	r2,r2,1420
    2974:	d8803915 	stw	r2,228(sp)
    2978:	04401e04 	movi	r17,120
    297c:	d8802917 	ldw	r2,164(sp)
    2980:	0039883a 	mov	fp,zero
    2984:	1001e926 	beq	r2,zero,312c <___vfprintf_internal_r+0xb2c>
    2988:	0027883a 	mov	r19,zero
    298c:	002d883a 	mov	r22,zero
    2990:	00020506 	br	31a8 <___vfprintf_internal_r+0xba8>
    2994:	d9002c17 	ldw	r4,176(sp)
    2998:	b80b883a 	mov	r5,r23
    299c:	00048d00 	call	48d0 <__swsetup_r>
    29a0:	1005ac1e 	bne	r2,zero,4054 <___vfprintf_internal_r+0x1a54>
    29a4:	b880030b 	ldhu	r2,12(r23)
    29a8:	00c00284 	movi	r3,10
    29ac:	1080068c 	andi	r2,r2,26
    29b0:	10ff3c1e 	bne	r2,r3,26a4 <__alt_data_end+0xff0026a4>
    29b4:	b880038f 	ldh	r2,14(r23)
    29b8:	103f3a16 	blt	r2,zero,26a4 <__alt_data_end+0xff0026a4>
    29bc:	d9c02d17 	ldw	r7,180(sp)
    29c0:	d9002c17 	ldw	r4,176(sp)
    29c4:	a80d883a 	mov	r6,r21
    29c8:	b80b883a 	mov	r5,r23
    29cc:	00048140 	call	4814 <__sbprintf>
    29d0:	00001106 	br	2a18 <___vfprintf_internal_r+0x418>
    29d4:	d9002c17 	ldw	r4,176(sp)
    29d8:	d9801e04 	addi	r6,sp,120
    29dc:	b80b883a 	mov	r5,r23
    29e0:	000939c0 	call	939c <__sprint_r>
    29e4:	1000081e 	bne	r2,zero,2a08 <___vfprintf_internal_r+0x408>
    29e8:	da000404 	addi	r8,sp,16
    29ec:	003f5306 	br	273c <__alt_data_end+0xff00273c>
    29f0:	d8802017 	ldw	r2,128(sp)
    29f4:	10000426 	beq	r2,zero,2a08 <___vfprintf_internal_r+0x408>
    29f8:	d9002c17 	ldw	r4,176(sp)
    29fc:	d9801e04 	addi	r6,sp,120
    2a00:	b80b883a 	mov	r5,r23
    2a04:	000939c0 	call	939c <__sprint_r>
    2a08:	b880030b 	ldhu	r2,12(r23)
    2a0c:	1080100c 	andi	r2,r2,64
    2a10:	1005901e 	bne	r2,zero,4054 <___vfprintf_internal_r+0x1a54>
    2a14:	d8802f17 	ldw	r2,188(sp)
    2a18:	dfc04717 	ldw	ra,284(sp)
    2a1c:	df004617 	ldw	fp,280(sp)
    2a20:	ddc04517 	ldw	r23,276(sp)
    2a24:	dd804417 	ldw	r22,272(sp)
    2a28:	dd404317 	ldw	r21,268(sp)
    2a2c:	dd004217 	ldw	r20,264(sp)
    2a30:	dcc04117 	ldw	r19,260(sp)
    2a34:	dc804017 	ldw	r18,256(sp)
    2a38:	dc403f17 	ldw	r17,252(sp)
    2a3c:	dc003e17 	ldw	r16,248(sp)
    2a40:	dec04804 	addi	sp,sp,288
    2a44:	f800283a 	ret
    2a48:	d9002c17 	ldw	r4,176(sp)
    2a4c:	00068a40 	call	68a4 <__sinit>
    2a50:	003f0406 	br	2664 <__alt_data_end+0xff002664>
    2a54:	d8802d17 	ldw	r2,180(sp)
    2a58:	d9002d17 	ldw	r4,180(sp)
    2a5c:	10800017 	ldw	r2,0(r2)
    2a60:	d8803115 	stw	r2,196(sp)
    2a64:	20800104 	addi	r2,r4,4
    2a68:	d9003117 	ldw	r4,196(sp)
    2a6c:	203fa716 	blt	r4,zero,290c <__alt_data_end+0xff00290c>
    2a70:	d8802d15 	stw	r2,180(sp)
    2a74:	ac400007 	ldb	r17,0(r21)
    2a78:	003f4206 	br	2784 <__alt_data_end+0xff002784>
    2a7c:	ac400007 	ldb	r17,0(r21)
    2a80:	aac00044 	addi	r11,r21,1
    2a84:	8a872826 	beq	r17,r10,4728 <___vfprintf_internal_r+0x2128>
    2a88:	88bff404 	addi	r2,r17,-48
    2a8c:	0009883a 	mov	r4,zero
    2a90:	30867d36 	bltu	r6,r2,4488 <___vfprintf_internal_r+0x1e88>
    2a94:	5c400007 	ldb	r17,0(r11)
    2a98:	210002a4 	muli	r4,r4,10
    2a9c:	5d400044 	addi	r21,r11,1
    2aa0:	a817883a 	mov	r11,r21
    2aa4:	2089883a 	add	r4,r4,r2
    2aa8:	88bff404 	addi	r2,r17,-48
    2aac:	30bff92e 	bgeu	r6,r2,2a94 <__alt_data_end+0xff002a94>
    2ab0:	2005c916 	blt	r4,zero,41d8 <___vfprintf_internal_r+0x1bd8>
    2ab4:	d9002915 	stw	r4,164(sp)
    2ab8:	003f3306 	br	2788 <__alt_data_end+0xff002788>
    2abc:	94802014 	ori	r18,r18,128
    2ac0:	ac400007 	ldb	r17,0(r21)
    2ac4:	003f2f06 	br	2784 <__alt_data_end+0xff002784>
    2ac8:	a809883a 	mov	r4,r21
    2acc:	d8003115 	stw	zero,196(sp)
    2ad0:	88bff404 	addi	r2,r17,-48
    2ad4:	0017883a 	mov	r11,zero
    2ad8:	24400007 	ldb	r17,0(r4)
    2adc:	5ac002a4 	muli	r11,r11,10
    2ae0:	ad400044 	addi	r21,r21,1
    2ae4:	a809883a 	mov	r4,r21
    2ae8:	12d7883a 	add	r11,r2,r11
    2aec:	88bff404 	addi	r2,r17,-48
    2af0:	30bff92e 	bgeu	r6,r2,2ad8 <__alt_data_end+0xff002ad8>
    2af4:	dac03115 	stw	r11,196(sp)
    2af8:	003f2306 	br	2788 <__alt_data_end+0xff002788>
    2afc:	18c03fcc 	andi	r3,r3,255
    2b00:	18072b1e 	bne	r3,zero,47b0 <___vfprintf_internal_r+0x21b0>
    2b04:	94800414 	ori	r18,r18,16
    2b08:	9080080c 	andi	r2,r18,32
    2b0c:	10037b26 	beq	r2,zero,38fc <___vfprintf_internal_r+0x12fc>
    2b10:	d9402d17 	ldw	r5,180(sp)
    2b14:	28800117 	ldw	r2,4(r5)
    2b18:	2cc00017 	ldw	r19,0(r5)
    2b1c:	29400204 	addi	r5,r5,8
    2b20:	d9402d15 	stw	r5,180(sp)
    2b24:	102d883a 	mov	r22,r2
    2b28:	10044b16 	blt	r2,zero,3c58 <___vfprintf_internal_r+0x1658>
    2b2c:	d9402917 	ldw	r5,164(sp)
    2b30:	df002783 	ldbu	fp,158(sp)
    2b34:	2803bc16 	blt	r5,zero,3a28 <___vfprintf_internal_r+0x1428>
    2b38:	00ffdfc4 	movi	r3,-129
    2b3c:	9d84b03a 	or	r2,r19,r22
    2b40:	90e4703a 	and	r18,r18,r3
    2b44:	10017726 	beq	r2,zero,3124 <___vfprintf_internal_r+0xb24>
    2b48:	b0038326 	beq	r22,zero,3958 <___vfprintf_internal_r+0x1358>
    2b4c:	dc402a15 	stw	r17,168(sp)
    2b50:	dc001e04 	addi	r16,sp,120
    2b54:	b023883a 	mov	r17,r22
    2b58:	402d883a 	mov	r22,r8
    2b5c:	9809883a 	mov	r4,r19
    2b60:	880b883a 	mov	r5,r17
    2b64:	01800284 	movi	r6,10
    2b68:	000f883a 	mov	r7,zero
    2b6c:	000b7940 	call	b794 <__umoddi3>
    2b70:	10800c04 	addi	r2,r2,48
    2b74:	843fffc4 	addi	r16,r16,-1
    2b78:	9809883a 	mov	r4,r19
    2b7c:	880b883a 	mov	r5,r17
    2b80:	80800005 	stb	r2,0(r16)
    2b84:	01800284 	movi	r6,10
    2b88:	000f883a 	mov	r7,zero
    2b8c:	000b21c0 	call	b21c <__udivdi3>
    2b90:	1027883a 	mov	r19,r2
    2b94:	10c4b03a 	or	r2,r2,r3
    2b98:	1823883a 	mov	r17,r3
    2b9c:	103fef1e 	bne	r2,zero,2b5c <__alt_data_end+0xff002b5c>
    2ba0:	d8c02817 	ldw	r3,160(sp)
    2ba4:	dc402a17 	ldw	r17,168(sp)
    2ba8:	b011883a 	mov	r8,r22
    2bac:	1c07c83a 	sub	r3,r3,r16
    2bb0:	d8c02e15 	stw	r3,184(sp)
    2bb4:	00005906 	br	2d1c <___vfprintf_internal_r+0x71c>
    2bb8:	18c03fcc 	andi	r3,r3,255
    2bbc:	1806fa1e 	bne	r3,zero,47a8 <___vfprintf_internal_r+0x21a8>
    2bc0:	9080020c 	andi	r2,r18,8
    2bc4:	10048a26 	beq	r2,zero,3df0 <___vfprintf_internal_r+0x17f0>
    2bc8:	d8c02d17 	ldw	r3,180(sp)
    2bcc:	d9002d17 	ldw	r4,180(sp)
    2bd0:	d9402d17 	ldw	r5,180(sp)
    2bd4:	18c00017 	ldw	r3,0(r3)
    2bd8:	21000117 	ldw	r4,4(r4)
    2bdc:	29400204 	addi	r5,r5,8
    2be0:	d8c03615 	stw	r3,216(sp)
    2be4:	d9003815 	stw	r4,224(sp)
    2be8:	d9402d15 	stw	r5,180(sp)
    2bec:	d9003617 	ldw	r4,216(sp)
    2bf0:	d9403817 	ldw	r5,224(sp)
    2bf4:	da003d15 	stw	r8,244(sp)
    2bf8:	04000044 	movi	r16,1
    2bfc:	00090140 	call	9014 <__fpclassifyd>
    2c00:	da003d17 	ldw	r8,244(sp)
    2c04:	14041f1e 	bne	r2,r16,3c84 <___vfprintf_internal_r+0x1684>
    2c08:	d9003617 	ldw	r4,216(sp)
    2c0c:	d9403817 	ldw	r5,224(sp)
    2c10:	000d883a 	mov	r6,zero
    2c14:	000f883a 	mov	r7,zero
    2c18:	000d1780 	call	d178 <__ledf2>
    2c1c:	da003d17 	ldw	r8,244(sp)
    2c20:	1005be16 	blt	r2,zero,431c <___vfprintf_internal_r+0x1d1c>
    2c24:	df002783 	ldbu	fp,158(sp)
    2c28:	008011c4 	movi	r2,71
    2c2c:	1445330e 	bge	r2,r17,40fc <___vfprintf_internal_r+0x1afc>
    2c30:	04000074 	movhi	r16,1
    2c34:	84015b04 	addi	r16,r16,1388
    2c38:	00c000c4 	movi	r3,3
    2c3c:	00bfdfc4 	movi	r2,-129
    2c40:	d8c02a15 	stw	r3,168(sp)
    2c44:	90a4703a 	and	r18,r18,r2
    2c48:	d8c02e15 	stw	r3,184(sp)
    2c4c:	d8002915 	stw	zero,164(sp)
    2c50:	d8003215 	stw	zero,200(sp)
    2c54:	00003706 	br	2d34 <___vfprintf_internal_r+0x734>
    2c58:	94800214 	ori	r18,r18,8
    2c5c:	ac400007 	ldb	r17,0(r21)
    2c60:	003ec806 	br	2784 <__alt_data_end+0xff002784>
    2c64:	18c03fcc 	andi	r3,r3,255
    2c68:	1806db1e 	bne	r3,zero,47d8 <___vfprintf_internal_r+0x21d8>
    2c6c:	94800414 	ori	r18,r18,16
    2c70:	9080080c 	andi	r2,r18,32
    2c74:	1002d826 	beq	r2,zero,37d8 <___vfprintf_internal_r+0x11d8>
    2c78:	d9402d17 	ldw	r5,180(sp)
    2c7c:	d8c02917 	ldw	r3,164(sp)
    2c80:	d8002785 	stb	zero,158(sp)
    2c84:	28800204 	addi	r2,r5,8
    2c88:	2cc00017 	ldw	r19,0(r5)
    2c8c:	2d800117 	ldw	r22,4(r5)
    2c90:	18048f16 	blt	r3,zero,3ed0 <___vfprintf_internal_r+0x18d0>
    2c94:	013fdfc4 	movi	r4,-129
    2c98:	9d86b03a 	or	r3,r19,r22
    2c9c:	d8802d15 	stw	r2,180(sp)
    2ca0:	9124703a 	and	r18,r18,r4
    2ca4:	1802d91e 	bne	r3,zero,380c <___vfprintf_internal_r+0x120c>
    2ca8:	d8c02917 	ldw	r3,164(sp)
    2cac:	0039883a 	mov	fp,zero
    2cb0:	1805c326 	beq	r3,zero,43c0 <___vfprintf_internal_r+0x1dc0>
    2cb4:	0027883a 	mov	r19,zero
    2cb8:	002d883a 	mov	r22,zero
    2cbc:	dc001e04 	addi	r16,sp,120
    2cc0:	9806d0fa 	srli	r3,r19,3
    2cc4:	b008977a 	slli	r4,r22,29
    2cc8:	b02cd0fa 	srli	r22,r22,3
    2ccc:	9cc001cc 	andi	r19,r19,7
    2cd0:	98800c04 	addi	r2,r19,48
    2cd4:	843fffc4 	addi	r16,r16,-1
    2cd8:	20e6b03a 	or	r19,r4,r3
    2cdc:	80800005 	stb	r2,0(r16)
    2ce0:	9d86b03a 	or	r3,r19,r22
    2ce4:	183ff61e 	bne	r3,zero,2cc0 <__alt_data_end+0xff002cc0>
    2ce8:	90c0004c 	andi	r3,r18,1
    2cec:	18013b26 	beq	r3,zero,31dc <___vfprintf_internal_r+0xbdc>
    2cf0:	10803fcc 	andi	r2,r2,255
    2cf4:	1080201c 	xori	r2,r2,128
    2cf8:	10bfe004 	addi	r2,r2,-128
    2cfc:	00c00c04 	movi	r3,48
    2d00:	10c13626 	beq	r2,r3,31dc <___vfprintf_internal_r+0xbdc>
    2d04:	80ffffc5 	stb	r3,-1(r16)
    2d08:	d8c02817 	ldw	r3,160(sp)
    2d0c:	80bfffc4 	addi	r2,r16,-1
    2d10:	1021883a 	mov	r16,r2
    2d14:	1887c83a 	sub	r3,r3,r2
    2d18:	d8c02e15 	stw	r3,184(sp)
    2d1c:	d8802e17 	ldw	r2,184(sp)
    2d20:	d9002917 	ldw	r4,164(sp)
    2d24:	1100010e 	bge	r2,r4,2d2c <___vfprintf_internal_r+0x72c>
    2d28:	2005883a 	mov	r2,r4
    2d2c:	d8802a15 	stw	r2,168(sp)
    2d30:	d8003215 	stw	zero,200(sp)
    2d34:	e7003fcc 	andi	fp,fp,255
    2d38:	e700201c 	xori	fp,fp,128
    2d3c:	e73fe004 	addi	fp,fp,-128
    2d40:	e0000326 	beq	fp,zero,2d50 <___vfprintf_internal_r+0x750>
    2d44:	d8c02a17 	ldw	r3,168(sp)
    2d48:	18c00044 	addi	r3,r3,1
    2d4c:	d8c02a15 	stw	r3,168(sp)
    2d50:	90c0008c 	andi	r3,r18,2
    2d54:	d8c02b15 	stw	r3,172(sp)
    2d58:	18000326 	beq	r3,zero,2d68 <___vfprintf_internal_r+0x768>
    2d5c:	d8c02a17 	ldw	r3,168(sp)
    2d60:	18c00084 	addi	r3,r3,2
    2d64:	d8c02a15 	stw	r3,168(sp)
    2d68:	90c0210c 	andi	r3,r18,132
    2d6c:	d8c03015 	stw	r3,192(sp)
    2d70:	1801a31e 	bne	r3,zero,3400 <___vfprintf_internal_r+0xe00>
    2d74:	d9003117 	ldw	r4,196(sp)
    2d78:	d8c02a17 	ldw	r3,168(sp)
    2d7c:	20e7c83a 	sub	r19,r4,r3
    2d80:	04c19f0e 	bge	zero,r19,3400 <___vfprintf_internal_r+0xe00>
    2d84:	02400404 	movi	r9,16
    2d88:	d8c02017 	ldw	r3,128(sp)
    2d8c:	d8801f17 	ldw	r2,124(sp)
    2d90:	4cc50d0e 	bge	r9,r19,41c8 <___vfprintf_internal_r+0x1bc8>
    2d94:	01400074 	movhi	r5,1
    2d98:	29416e84 	addi	r5,r5,1466
    2d9c:	dc403b15 	stw	r17,236(sp)
    2da0:	d9403515 	stw	r5,212(sp)
    2da4:	9823883a 	mov	r17,r19
    2da8:	482d883a 	mov	r22,r9
    2dac:	9027883a 	mov	r19,r18
    2db0:	070001c4 	movi	fp,7
    2db4:	8025883a 	mov	r18,r16
    2db8:	dc002c17 	ldw	r16,176(sp)
    2dbc:	00000306 	br	2dcc <___vfprintf_internal_r+0x7cc>
    2dc0:	8c7ffc04 	addi	r17,r17,-16
    2dc4:	42000204 	addi	r8,r8,8
    2dc8:	b440130e 	bge	r22,r17,2e18 <___vfprintf_internal_r+0x818>
    2dcc:	01000074 	movhi	r4,1
    2dd0:	18c00404 	addi	r3,r3,16
    2dd4:	10800044 	addi	r2,r2,1
    2dd8:	21016e84 	addi	r4,r4,1466
    2ddc:	41000015 	stw	r4,0(r8)
    2de0:	45800115 	stw	r22,4(r8)
    2de4:	d8c02015 	stw	r3,128(sp)
    2de8:	d8801f15 	stw	r2,124(sp)
    2dec:	e0bff40e 	bge	fp,r2,2dc0 <__alt_data_end+0xff002dc0>
    2df0:	d9801e04 	addi	r6,sp,120
    2df4:	b80b883a 	mov	r5,r23
    2df8:	8009883a 	mov	r4,r16
    2dfc:	000939c0 	call	939c <__sprint_r>
    2e00:	103f011e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    2e04:	8c7ffc04 	addi	r17,r17,-16
    2e08:	d8c02017 	ldw	r3,128(sp)
    2e0c:	d8801f17 	ldw	r2,124(sp)
    2e10:	da000404 	addi	r8,sp,16
    2e14:	b47fed16 	blt	r22,r17,2dcc <__alt_data_end+0xff002dcc>
    2e18:	9021883a 	mov	r16,r18
    2e1c:	9825883a 	mov	r18,r19
    2e20:	8827883a 	mov	r19,r17
    2e24:	dc403b17 	ldw	r17,236(sp)
    2e28:	d9403517 	ldw	r5,212(sp)
    2e2c:	98c7883a 	add	r3,r19,r3
    2e30:	10800044 	addi	r2,r2,1
    2e34:	41400015 	stw	r5,0(r8)
    2e38:	44c00115 	stw	r19,4(r8)
    2e3c:	d8c02015 	stw	r3,128(sp)
    2e40:	d8801f15 	stw	r2,124(sp)
    2e44:	010001c4 	movi	r4,7
    2e48:	2082a316 	blt	r4,r2,38d8 <___vfprintf_internal_r+0x12d8>
    2e4c:	df002787 	ldb	fp,158(sp)
    2e50:	42000204 	addi	r8,r8,8
    2e54:	e0000c26 	beq	fp,zero,2e88 <___vfprintf_internal_r+0x888>
    2e58:	d8801f17 	ldw	r2,124(sp)
    2e5c:	d9002784 	addi	r4,sp,158
    2e60:	18c00044 	addi	r3,r3,1
    2e64:	10800044 	addi	r2,r2,1
    2e68:	41000015 	stw	r4,0(r8)
    2e6c:	01000044 	movi	r4,1
    2e70:	41000115 	stw	r4,4(r8)
    2e74:	d8c02015 	stw	r3,128(sp)
    2e78:	d8801f15 	stw	r2,124(sp)
    2e7c:	010001c4 	movi	r4,7
    2e80:	20823c16 	blt	r4,r2,3774 <___vfprintf_internal_r+0x1174>
    2e84:	42000204 	addi	r8,r8,8
    2e88:	d8802b17 	ldw	r2,172(sp)
    2e8c:	10000c26 	beq	r2,zero,2ec0 <___vfprintf_internal_r+0x8c0>
    2e90:	d8801f17 	ldw	r2,124(sp)
    2e94:	d9002704 	addi	r4,sp,156
    2e98:	18c00084 	addi	r3,r3,2
    2e9c:	10800044 	addi	r2,r2,1
    2ea0:	41000015 	stw	r4,0(r8)
    2ea4:	01000084 	movi	r4,2
    2ea8:	41000115 	stw	r4,4(r8)
    2eac:	d8c02015 	stw	r3,128(sp)
    2eb0:	d8801f15 	stw	r2,124(sp)
    2eb4:	010001c4 	movi	r4,7
    2eb8:	20823616 	blt	r4,r2,3794 <___vfprintf_internal_r+0x1194>
    2ebc:	42000204 	addi	r8,r8,8
    2ec0:	d9003017 	ldw	r4,192(sp)
    2ec4:	00802004 	movi	r2,128
    2ec8:	20819926 	beq	r4,r2,3530 <___vfprintf_internal_r+0xf30>
    2ecc:	d9402917 	ldw	r5,164(sp)
    2ed0:	d8802e17 	ldw	r2,184(sp)
    2ed4:	28adc83a 	sub	r22,r5,r2
    2ed8:	0580310e 	bge	zero,r22,2fa0 <___vfprintf_internal_r+0x9a0>
    2edc:	07000404 	movi	fp,16
    2ee0:	d8801f17 	ldw	r2,124(sp)
    2ee4:	e584140e 	bge	fp,r22,3f38 <___vfprintf_internal_r+0x1938>
    2ee8:	01400074 	movhi	r5,1
    2eec:	29416a84 	addi	r5,r5,1450
    2ef0:	dc402915 	stw	r17,164(sp)
    2ef4:	d9402b15 	stw	r5,172(sp)
    2ef8:	b023883a 	mov	r17,r22
    2efc:	04c001c4 	movi	r19,7
    2f00:	a82d883a 	mov	r22,r21
    2f04:	902b883a 	mov	r21,r18
    2f08:	8025883a 	mov	r18,r16
    2f0c:	dc002c17 	ldw	r16,176(sp)
    2f10:	00000306 	br	2f20 <___vfprintf_internal_r+0x920>
    2f14:	8c7ffc04 	addi	r17,r17,-16
    2f18:	42000204 	addi	r8,r8,8
    2f1c:	e440110e 	bge	fp,r17,2f64 <___vfprintf_internal_r+0x964>
    2f20:	18c00404 	addi	r3,r3,16
    2f24:	10800044 	addi	r2,r2,1
    2f28:	45000015 	stw	r20,0(r8)
    2f2c:	47000115 	stw	fp,4(r8)
    2f30:	d8c02015 	stw	r3,128(sp)
    2f34:	d8801f15 	stw	r2,124(sp)
    2f38:	98bff60e 	bge	r19,r2,2f14 <__alt_data_end+0xff002f14>
    2f3c:	d9801e04 	addi	r6,sp,120
    2f40:	b80b883a 	mov	r5,r23
    2f44:	8009883a 	mov	r4,r16
    2f48:	000939c0 	call	939c <__sprint_r>
    2f4c:	103eae1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    2f50:	8c7ffc04 	addi	r17,r17,-16
    2f54:	d8c02017 	ldw	r3,128(sp)
    2f58:	d8801f17 	ldw	r2,124(sp)
    2f5c:	da000404 	addi	r8,sp,16
    2f60:	e47fef16 	blt	fp,r17,2f20 <__alt_data_end+0xff002f20>
    2f64:	9021883a 	mov	r16,r18
    2f68:	a825883a 	mov	r18,r21
    2f6c:	b02b883a 	mov	r21,r22
    2f70:	882d883a 	mov	r22,r17
    2f74:	dc402917 	ldw	r17,164(sp)
    2f78:	d9002b17 	ldw	r4,172(sp)
    2f7c:	1d87883a 	add	r3,r3,r22
    2f80:	10800044 	addi	r2,r2,1
    2f84:	41000015 	stw	r4,0(r8)
    2f88:	45800115 	stw	r22,4(r8)
    2f8c:	d8c02015 	stw	r3,128(sp)
    2f90:	d8801f15 	stw	r2,124(sp)
    2f94:	010001c4 	movi	r4,7
    2f98:	2081ee16 	blt	r4,r2,3754 <___vfprintf_internal_r+0x1154>
    2f9c:	42000204 	addi	r8,r8,8
    2fa0:	9080400c 	andi	r2,r18,256
    2fa4:	1001181e 	bne	r2,zero,3408 <___vfprintf_internal_r+0xe08>
    2fa8:	d9402e17 	ldw	r5,184(sp)
    2fac:	d8801f17 	ldw	r2,124(sp)
    2fb0:	44000015 	stw	r16,0(r8)
    2fb4:	1947883a 	add	r3,r3,r5
    2fb8:	10800044 	addi	r2,r2,1
    2fbc:	41400115 	stw	r5,4(r8)
    2fc0:	d8c02015 	stw	r3,128(sp)
    2fc4:	d8801f15 	stw	r2,124(sp)
    2fc8:	010001c4 	movi	r4,7
    2fcc:	2081d316 	blt	r4,r2,371c <___vfprintf_internal_r+0x111c>
    2fd0:	42000204 	addi	r8,r8,8
    2fd4:	9480010c 	andi	r18,r18,4
    2fd8:	90003226 	beq	r18,zero,30a4 <___vfprintf_internal_r+0xaa4>
    2fdc:	d9403117 	ldw	r5,196(sp)
    2fe0:	d8802a17 	ldw	r2,168(sp)
    2fe4:	28a1c83a 	sub	r16,r5,r2
    2fe8:	04002e0e 	bge	zero,r16,30a4 <___vfprintf_internal_r+0xaa4>
    2fec:	04400404 	movi	r17,16
    2ff0:	d8801f17 	ldw	r2,124(sp)
    2ff4:	8c04a20e 	bge	r17,r16,4280 <___vfprintf_internal_r+0x1c80>
    2ff8:	01400074 	movhi	r5,1
    2ffc:	29416e84 	addi	r5,r5,1466
    3000:	d9403515 	stw	r5,212(sp)
    3004:	048001c4 	movi	r18,7
    3008:	dcc02c17 	ldw	r19,176(sp)
    300c:	00000306 	br	301c <___vfprintf_internal_r+0xa1c>
    3010:	843ffc04 	addi	r16,r16,-16
    3014:	42000204 	addi	r8,r8,8
    3018:	8c00130e 	bge	r17,r16,3068 <___vfprintf_internal_r+0xa68>
    301c:	01000074 	movhi	r4,1
    3020:	18c00404 	addi	r3,r3,16
    3024:	10800044 	addi	r2,r2,1
    3028:	21016e84 	addi	r4,r4,1466
    302c:	41000015 	stw	r4,0(r8)
    3030:	44400115 	stw	r17,4(r8)
    3034:	d8c02015 	stw	r3,128(sp)
    3038:	d8801f15 	stw	r2,124(sp)
    303c:	90bff40e 	bge	r18,r2,3010 <__alt_data_end+0xff003010>
    3040:	d9801e04 	addi	r6,sp,120
    3044:	b80b883a 	mov	r5,r23
    3048:	9809883a 	mov	r4,r19
    304c:	000939c0 	call	939c <__sprint_r>
    3050:	103e6d1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3054:	843ffc04 	addi	r16,r16,-16
    3058:	d8c02017 	ldw	r3,128(sp)
    305c:	d8801f17 	ldw	r2,124(sp)
    3060:	da000404 	addi	r8,sp,16
    3064:	8c3fed16 	blt	r17,r16,301c <__alt_data_end+0xff00301c>
    3068:	d9403517 	ldw	r5,212(sp)
    306c:	1c07883a 	add	r3,r3,r16
    3070:	10800044 	addi	r2,r2,1
    3074:	41400015 	stw	r5,0(r8)
    3078:	44000115 	stw	r16,4(r8)
    307c:	d8c02015 	stw	r3,128(sp)
    3080:	d8801f15 	stw	r2,124(sp)
    3084:	010001c4 	movi	r4,7
    3088:	2080060e 	bge	r4,r2,30a4 <___vfprintf_internal_r+0xaa4>
    308c:	d9002c17 	ldw	r4,176(sp)
    3090:	d9801e04 	addi	r6,sp,120
    3094:	b80b883a 	mov	r5,r23
    3098:	000939c0 	call	939c <__sprint_r>
    309c:	103e5a1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    30a0:	d8c02017 	ldw	r3,128(sp)
    30a4:	d8803117 	ldw	r2,196(sp)
    30a8:	d9002a17 	ldw	r4,168(sp)
    30ac:	1100010e 	bge	r2,r4,30b4 <___vfprintf_internal_r+0xab4>
    30b0:	2005883a 	mov	r2,r4
    30b4:	d9402f17 	ldw	r5,188(sp)
    30b8:	288b883a 	add	r5,r5,r2
    30bc:	d9402f15 	stw	r5,188(sp)
    30c0:	18019e1e 	bne	r3,zero,373c <___vfprintf_internal_r+0x113c>
    30c4:	a8800007 	ldb	r2,0(r21)
    30c8:	d8001f15 	stw	zero,124(sp)
    30cc:	da000404 	addi	r8,sp,16
    30d0:	103d851e 	bne	r2,zero,26e8 <__alt_data_end+0xff0026e8>
    30d4:	a821883a 	mov	r16,r21
    30d8:	003d9b06 	br	2748 <__alt_data_end+0xff002748>
    30dc:	18c03fcc 	andi	r3,r3,255
    30e0:	1805c11e 	bne	r3,zero,47e8 <___vfprintf_internal_r+0x21e8>
    30e4:	94800414 	ori	r18,r18,16
    30e8:	9080080c 	andi	r2,r18,32
    30ec:	10020c26 	beq	r2,zero,3920 <___vfprintf_internal_r+0x1320>
    30f0:	d8802d17 	ldw	r2,180(sp)
    30f4:	d9002917 	ldw	r4,164(sp)
    30f8:	d8002785 	stb	zero,158(sp)
    30fc:	10c00204 	addi	r3,r2,8
    3100:	14c00017 	ldw	r19,0(r2)
    3104:	15800117 	ldw	r22,4(r2)
    3108:	20040f16 	blt	r4,zero,4148 <___vfprintf_internal_r+0x1b48>
    310c:	013fdfc4 	movi	r4,-129
    3110:	9d84b03a 	or	r2,r19,r22
    3114:	d8c02d15 	stw	r3,180(sp)
    3118:	9124703a 	and	r18,r18,r4
    311c:	0039883a 	mov	fp,zero
    3120:	103e891e 	bne	r2,zero,2b48 <__alt_data_end+0xff002b48>
    3124:	d9002917 	ldw	r4,164(sp)
    3128:	2002c11e 	bne	r4,zero,3c30 <___vfprintf_internal_r+0x1630>
    312c:	d8002915 	stw	zero,164(sp)
    3130:	d8002e15 	stw	zero,184(sp)
    3134:	dc001e04 	addi	r16,sp,120
    3138:	003ef806 	br	2d1c <__alt_data_end+0xff002d1c>
    313c:	18c03fcc 	andi	r3,r3,255
    3140:	18059d1e 	bne	r3,zero,47b8 <___vfprintf_internal_r+0x21b8>
    3144:	01400074 	movhi	r5,1
    3148:	29415e04 	addi	r5,r5,1400
    314c:	d9403915 	stw	r5,228(sp)
    3150:	9080080c 	andi	r2,r18,32
    3154:	10005226 	beq	r2,zero,32a0 <___vfprintf_internal_r+0xca0>
    3158:	d8802d17 	ldw	r2,180(sp)
    315c:	14c00017 	ldw	r19,0(r2)
    3160:	15800117 	ldw	r22,4(r2)
    3164:	10800204 	addi	r2,r2,8
    3168:	d8802d15 	stw	r2,180(sp)
    316c:	9080004c 	andi	r2,r18,1
    3170:	10019026 	beq	r2,zero,37b4 <___vfprintf_internal_r+0x11b4>
    3174:	9d84b03a 	or	r2,r19,r22
    3178:	10036926 	beq	r2,zero,3f20 <___vfprintf_internal_r+0x1920>
    317c:	d8c02917 	ldw	r3,164(sp)
    3180:	00800c04 	movi	r2,48
    3184:	d8802705 	stb	r2,156(sp)
    3188:	dc402745 	stb	r17,157(sp)
    318c:	d8002785 	stb	zero,158(sp)
    3190:	90800094 	ori	r2,r18,2
    3194:	18045d16 	blt	r3,zero,430c <___vfprintf_internal_r+0x1d0c>
    3198:	00bfdfc4 	movi	r2,-129
    319c:	90a4703a 	and	r18,r18,r2
    31a0:	94800094 	ori	r18,r18,2
    31a4:	0039883a 	mov	fp,zero
    31a8:	d9003917 	ldw	r4,228(sp)
    31ac:	dc001e04 	addi	r16,sp,120
    31b0:	988003cc 	andi	r2,r19,15
    31b4:	b006973a 	slli	r3,r22,28
    31b8:	2085883a 	add	r2,r4,r2
    31bc:	9826d13a 	srli	r19,r19,4
    31c0:	10800003 	ldbu	r2,0(r2)
    31c4:	b02cd13a 	srli	r22,r22,4
    31c8:	843fffc4 	addi	r16,r16,-1
    31cc:	1ce6b03a 	or	r19,r3,r19
    31d0:	80800005 	stb	r2,0(r16)
    31d4:	9d84b03a 	or	r2,r19,r22
    31d8:	103ff51e 	bne	r2,zero,31b0 <__alt_data_end+0xff0031b0>
    31dc:	d8c02817 	ldw	r3,160(sp)
    31e0:	1c07c83a 	sub	r3,r3,r16
    31e4:	d8c02e15 	stw	r3,184(sp)
    31e8:	003ecc06 	br	2d1c <__alt_data_end+0xff002d1c>
    31ec:	18c03fcc 	andi	r3,r3,255
    31f0:	183e9f26 	beq	r3,zero,2c70 <__alt_data_end+0xff002c70>
    31f4:	d9c02785 	stb	r7,158(sp)
    31f8:	003e9d06 	br	2c70 <__alt_data_end+0xff002c70>
    31fc:	00c00044 	movi	r3,1
    3200:	01c00ac4 	movi	r7,43
    3204:	ac400007 	ldb	r17,0(r21)
    3208:	003d5e06 	br	2784 <__alt_data_end+0xff002784>
    320c:	94800814 	ori	r18,r18,32
    3210:	ac400007 	ldb	r17,0(r21)
    3214:	003d5b06 	br	2784 <__alt_data_end+0xff002784>
    3218:	d8c02d17 	ldw	r3,180(sp)
    321c:	d8002785 	stb	zero,158(sp)
    3220:	1c000017 	ldw	r16,0(r3)
    3224:	1cc00104 	addi	r19,r3,4
    3228:	80041926 	beq	r16,zero,4290 <___vfprintf_internal_r+0x1c90>
    322c:	d9002917 	ldw	r4,164(sp)
    3230:	2003d016 	blt	r4,zero,4174 <___vfprintf_internal_r+0x1b74>
    3234:	200d883a 	mov	r6,r4
    3238:	000b883a 	mov	r5,zero
    323c:	8009883a 	mov	r4,r16
    3240:	da003d15 	stw	r8,244(sp)
    3244:	00076040 	call	7604 <memchr>
    3248:	da003d17 	ldw	r8,244(sp)
    324c:	10045426 	beq	r2,zero,43a0 <___vfprintf_internal_r+0x1da0>
    3250:	1405c83a 	sub	r2,r2,r16
    3254:	d8802e15 	stw	r2,184(sp)
    3258:	1003cc16 	blt	r2,zero,418c <___vfprintf_internal_r+0x1b8c>
    325c:	df002783 	ldbu	fp,158(sp)
    3260:	d8802a15 	stw	r2,168(sp)
    3264:	dcc02d15 	stw	r19,180(sp)
    3268:	d8002915 	stw	zero,164(sp)
    326c:	d8003215 	stw	zero,200(sp)
    3270:	003eb006 	br	2d34 <__alt_data_end+0xff002d34>
    3274:	18c03fcc 	andi	r3,r3,255
    3278:	183f9b26 	beq	r3,zero,30e8 <__alt_data_end+0xff0030e8>
    327c:	d9c02785 	stb	r7,158(sp)
    3280:	003f9906 	br	30e8 <__alt_data_end+0xff0030e8>
    3284:	18c03fcc 	andi	r3,r3,255
    3288:	1805551e 	bne	r3,zero,47e0 <___vfprintf_internal_r+0x21e0>
    328c:	01400074 	movhi	r5,1
    3290:	29416304 	addi	r5,r5,1420
    3294:	d9403915 	stw	r5,228(sp)
    3298:	9080080c 	andi	r2,r18,32
    329c:	103fae1e 	bne	r2,zero,3158 <__alt_data_end+0xff003158>
    32a0:	9080040c 	andi	r2,r18,16
    32a4:	1002de26 	beq	r2,zero,3e20 <___vfprintf_internal_r+0x1820>
    32a8:	d8c02d17 	ldw	r3,180(sp)
    32ac:	002d883a 	mov	r22,zero
    32b0:	1cc00017 	ldw	r19,0(r3)
    32b4:	18c00104 	addi	r3,r3,4
    32b8:	d8c02d15 	stw	r3,180(sp)
    32bc:	003fab06 	br	316c <__alt_data_end+0xff00316c>
    32c0:	38803fcc 	andi	r2,r7,255
    32c4:	1080201c 	xori	r2,r2,128
    32c8:	10bfe004 	addi	r2,r2,-128
    32cc:	1002d21e 	bne	r2,zero,3e18 <___vfprintf_internal_r+0x1818>
    32d0:	00c00044 	movi	r3,1
    32d4:	01c00804 	movi	r7,32
    32d8:	ac400007 	ldb	r17,0(r21)
    32dc:	003d2906 	br	2784 <__alt_data_end+0xff002784>
    32e0:	94800054 	ori	r18,r18,1
    32e4:	ac400007 	ldb	r17,0(r21)
    32e8:	003d2606 	br	2784 <__alt_data_end+0xff002784>
    32ec:	18c03fcc 	andi	r3,r3,255
    32f0:	183e0526 	beq	r3,zero,2b08 <__alt_data_end+0xff002b08>
    32f4:	d9c02785 	stb	r7,158(sp)
    32f8:	003e0306 	br	2b08 <__alt_data_end+0xff002b08>
    32fc:	94801014 	ori	r18,r18,64
    3300:	ac400007 	ldb	r17,0(r21)
    3304:	003d1f06 	br	2784 <__alt_data_end+0xff002784>
    3308:	ac400007 	ldb	r17,0(r21)
    330c:	8a438726 	beq	r17,r9,412c <___vfprintf_internal_r+0x1b2c>
    3310:	94800414 	ori	r18,r18,16
    3314:	003d1b06 	br	2784 <__alt_data_end+0xff002784>
    3318:	18c03fcc 	andi	r3,r3,255
    331c:	1805341e 	bne	r3,zero,47f0 <___vfprintf_internal_r+0x21f0>
    3320:	9080080c 	andi	r2,r18,32
    3324:	1002cd26 	beq	r2,zero,3e5c <___vfprintf_internal_r+0x185c>
    3328:	d9402d17 	ldw	r5,180(sp)
    332c:	d9002f17 	ldw	r4,188(sp)
    3330:	28800017 	ldw	r2,0(r5)
    3334:	2007d7fa 	srai	r3,r4,31
    3338:	29400104 	addi	r5,r5,4
    333c:	d9402d15 	stw	r5,180(sp)
    3340:	11000015 	stw	r4,0(r2)
    3344:	10c00115 	stw	r3,4(r2)
    3348:	003ce506 	br	26e0 <__alt_data_end+0xff0026e0>
    334c:	d8c02d17 	ldw	r3,180(sp)
    3350:	d9002d17 	ldw	r4,180(sp)
    3354:	d8002785 	stb	zero,158(sp)
    3358:	18800017 	ldw	r2,0(r3)
    335c:	21000104 	addi	r4,r4,4
    3360:	00c00044 	movi	r3,1
    3364:	d8c02a15 	stw	r3,168(sp)
    3368:	d8801405 	stb	r2,80(sp)
    336c:	d9002d15 	stw	r4,180(sp)
    3370:	d8c02e15 	stw	r3,184(sp)
    3374:	d8002915 	stw	zero,164(sp)
    3378:	d8003215 	stw	zero,200(sp)
    337c:	dc001404 	addi	r16,sp,80
    3380:	0039883a 	mov	fp,zero
    3384:	003e7206 	br	2d50 <__alt_data_end+0xff002d50>
    3388:	01000074 	movhi	r4,1
    338c:	21016304 	addi	r4,r4,1420
    3390:	0039883a 	mov	fp,zero
    3394:	d9003915 	stw	r4,228(sp)
    3398:	04401e04 	movi	r17,120
    339c:	003f8206 	br	31a8 <__alt_data_end+0xff0031a8>
    33a0:	18c03fcc 	andi	r3,r3,255
    33a4:	1805061e 	bne	r3,zero,47c0 <___vfprintf_internal_r+0x21c0>
    33a8:	883d9126 	beq	r17,zero,29f0 <__alt_data_end+0xff0029f0>
    33ac:	00c00044 	movi	r3,1
    33b0:	d8c02a15 	stw	r3,168(sp)
    33b4:	dc401405 	stb	r17,80(sp)
    33b8:	d8002785 	stb	zero,158(sp)
    33bc:	003fec06 	br	3370 <__alt_data_end+0xff003370>
    33c0:	01400074 	movhi	r5,1
    33c4:	29416304 	addi	r5,r5,1420
    33c8:	d9403915 	stw	r5,228(sp)
    33cc:	d8c02d15 	stw	r3,180(sp)
    33d0:	1025883a 	mov	r18,r2
    33d4:	04401e04 	movi	r17,120
    33d8:	9d84b03a 	or	r2,r19,r22
    33dc:	1000fc1e 	bne	r2,zero,37d0 <___vfprintf_internal_r+0x11d0>
    33e0:	0039883a 	mov	fp,zero
    33e4:	00800084 	movi	r2,2
    33e8:	10803fcc 	andi	r2,r2,255
    33ec:	00c00044 	movi	r3,1
    33f0:	10c20f26 	beq	r2,r3,3c30 <___vfprintf_internal_r+0x1630>
    33f4:	00c00084 	movi	r3,2
    33f8:	10fd6326 	beq	r2,r3,2988 <__alt_data_end+0xff002988>
    33fc:	003e2d06 	br	2cb4 <__alt_data_end+0xff002cb4>
    3400:	d8c02017 	ldw	r3,128(sp)
    3404:	003e9306 	br	2e54 <__alt_data_end+0xff002e54>
    3408:	00801944 	movi	r2,101
    340c:	14407e0e 	bge	r2,r17,3608 <___vfprintf_internal_r+0x1008>
    3410:	d9003617 	ldw	r4,216(sp)
    3414:	d9403817 	ldw	r5,224(sp)
    3418:	000d883a 	mov	r6,zero
    341c:	000f883a 	mov	r7,zero
    3420:	d8c03c15 	stw	r3,240(sp)
    3424:	da003d15 	stw	r8,244(sp)
    3428:	000d0140 	call	d014 <__eqdf2>
    342c:	d8c03c17 	ldw	r3,240(sp)
    3430:	da003d17 	ldw	r8,244(sp)
    3434:	1000f71e 	bne	r2,zero,3814 <___vfprintf_internal_r+0x1214>
    3438:	d8801f17 	ldw	r2,124(sp)
    343c:	01000074 	movhi	r4,1
    3440:	21016a04 	addi	r4,r4,1448
    3444:	18c00044 	addi	r3,r3,1
    3448:	10800044 	addi	r2,r2,1
    344c:	41000015 	stw	r4,0(r8)
    3450:	01000044 	movi	r4,1
    3454:	41000115 	stw	r4,4(r8)
    3458:	d8c02015 	stw	r3,128(sp)
    345c:	d8801f15 	stw	r2,124(sp)
    3460:	010001c4 	movi	r4,7
    3464:	2082b816 	blt	r4,r2,3f48 <___vfprintf_internal_r+0x1948>
    3468:	42000204 	addi	r8,r8,8
    346c:	d8802617 	ldw	r2,152(sp)
    3470:	d9403317 	ldw	r5,204(sp)
    3474:	11400216 	blt	r2,r5,3480 <___vfprintf_internal_r+0xe80>
    3478:	9080004c 	andi	r2,r18,1
    347c:	103ed526 	beq	r2,zero,2fd4 <__alt_data_end+0xff002fd4>
    3480:	d8803717 	ldw	r2,220(sp)
    3484:	d9003417 	ldw	r4,208(sp)
    3488:	d9403717 	ldw	r5,220(sp)
    348c:	1887883a 	add	r3,r3,r2
    3490:	d8801f17 	ldw	r2,124(sp)
    3494:	41000015 	stw	r4,0(r8)
    3498:	41400115 	stw	r5,4(r8)
    349c:	10800044 	addi	r2,r2,1
    34a0:	d8c02015 	stw	r3,128(sp)
    34a4:	d8801f15 	stw	r2,124(sp)
    34a8:	010001c4 	movi	r4,7
    34ac:	20832916 	blt	r4,r2,4154 <___vfprintf_internal_r+0x1b54>
    34b0:	42000204 	addi	r8,r8,8
    34b4:	d8803317 	ldw	r2,204(sp)
    34b8:	143fffc4 	addi	r16,r2,-1
    34bc:	043ec50e 	bge	zero,r16,2fd4 <__alt_data_end+0xff002fd4>
    34c0:	04400404 	movi	r17,16
    34c4:	d8801f17 	ldw	r2,124(sp)
    34c8:	8c00880e 	bge	r17,r16,36ec <___vfprintf_internal_r+0x10ec>
    34cc:	01400074 	movhi	r5,1
    34d0:	29416a84 	addi	r5,r5,1450
    34d4:	d9402b15 	stw	r5,172(sp)
    34d8:	058001c4 	movi	r22,7
    34dc:	dcc02c17 	ldw	r19,176(sp)
    34e0:	00000306 	br	34f0 <___vfprintf_internal_r+0xef0>
    34e4:	42000204 	addi	r8,r8,8
    34e8:	843ffc04 	addi	r16,r16,-16
    34ec:	8c00820e 	bge	r17,r16,36f8 <___vfprintf_internal_r+0x10f8>
    34f0:	18c00404 	addi	r3,r3,16
    34f4:	10800044 	addi	r2,r2,1
    34f8:	45000015 	stw	r20,0(r8)
    34fc:	44400115 	stw	r17,4(r8)
    3500:	d8c02015 	stw	r3,128(sp)
    3504:	d8801f15 	stw	r2,124(sp)
    3508:	b0bff60e 	bge	r22,r2,34e4 <__alt_data_end+0xff0034e4>
    350c:	d9801e04 	addi	r6,sp,120
    3510:	b80b883a 	mov	r5,r23
    3514:	9809883a 	mov	r4,r19
    3518:	000939c0 	call	939c <__sprint_r>
    351c:	103d3a1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3520:	d8c02017 	ldw	r3,128(sp)
    3524:	d8801f17 	ldw	r2,124(sp)
    3528:	da000404 	addi	r8,sp,16
    352c:	003fee06 	br	34e8 <__alt_data_end+0xff0034e8>
    3530:	d9403117 	ldw	r5,196(sp)
    3534:	d8802a17 	ldw	r2,168(sp)
    3538:	28adc83a 	sub	r22,r5,r2
    353c:	05be630e 	bge	zero,r22,2ecc <__alt_data_end+0xff002ecc>
    3540:	07000404 	movi	fp,16
    3544:	d8801f17 	ldw	r2,124(sp)
    3548:	e5838f0e 	bge	fp,r22,4388 <___vfprintf_internal_r+0x1d88>
    354c:	01400074 	movhi	r5,1
    3550:	29416a84 	addi	r5,r5,1450
    3554:	dc403015 	stw	r17,192(sp)
    3558:	d9402b15 	stw	r5,172(sp)
    355c:	b023883a 	mov	r17,r22
    3560:	04c001c4 	movi	r19,7
    3564:	a82d883a 	mov	r22,r21
    3568:	902b883a 	mov	r21,r18
    356c:	8025883a 	mov	r18,r16
    3570:	dc002c17 	ldw	r16,176(sp)
    3574:	00000306 	br	3584 <___vfprintf_internal_r+0xf84>
    3578:	8c7ffc04 	addi	r17,r17,-16
    357c:	42000204 	addi	r8,r8,8
    3580:	e440110e 	bge	fp,r17,35c8 <___vfprintf_internal_r+0xfc8>
    3584:	18c00404 	addi	r3,r3,16
    3588:	10800044 	addi	r2,r2,1
    358c:	45000015 	stw	r20,0(r8)
    3590:	47000115 	stw	fp,4(r8)
    3594:	d8c02015 	stw	r3,128(sp)
    3598:	d8801f15 	stw	r2,124(sp)
    359c:	98bff60e 	bge	r19,r2,3578 <__alt_data_end+0xff003578>
    35a0:	d9801e04 	addi	r6,sp,120
    35a4:	b80b883a 	mov	r5,r23
    35a8:	8009883a 	mov	r4,r16
    35ac:	000939c0 	call	939c <__sprint_r>
    35b0:	103d151e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    35b4:	8c7ffc04 	addi	r17,r17,-16
    35b8:	d8c02017 	ldw	r3,128(sp)
    35bc:	d8801f17 	ldw	r2,124(sp)
    35c0:	da000404 	addi	r8,sp,16
    35c4:	e47fef16 	blt	fp,r17,3584 <__alt_data_end+0xff003584>
    35c8:	9021883a 	mov	r16,r18
    35cc:	a825883a 	mov	r18,r21
    35d0:	b02b883a 	mov	r21,r22
    35d4:	882d883a 	mov	r22,r17
    35d8:	dc403017 	ldw	r17,192(sp)
    35dc:	d9002b17 	ldw	r4,172(sp)
    35e0:	1d87883a 	add	r3,r3,r22
    35e4:	10800044 	addi	r2,r2,1
    35e8:	41000015 	stw	r4,0(r8)
    35ec:	45800115 	stw	r22,4(r8)
    35f0:	d8c02015 	stw	r3,128(sp)
    35f4:	d8801f15 	stw	r2,124(sp)
    35f8:	010001c4 	movi	r4,7
    35fc:	20818e16 	blt	r4,r2,3c38 <___vfprintf_internal_r+0x1638>
    3600:	42000204 	addi	r8,r8,8
    3604:	003e3106 	br	2ecc <__alt_data_end+0xff002ecc>
    3608:	d9403317 	ldw	r5,204(sp)
    360c:	00800044 	movi	r2,1
    3610:	18c00044 	addi	r3,r3,1
    3614:	1141530e 	bge	r2,r5,3b64 <___vfprintf_internal_r+0x1564>
    3618:	dc401f17 	ldw	r17,124(sp)
    361c:	00800044 	movi	r2,1
    3620:	40800115 	stw	r2,4(r8)
    3624:	8c400044 	addi	r17,r17,1
    3628:	44000015 	stw	r16,0(r8)
    362c:	d8c02015 	stw	r3,128(sp)
    3630:	dc401f15 	stw	r17,124(sp)
    3634:	008001c4 	movi	r2,7
    3638:	14416b16 	blt	r2,r17,3be8 <___vfprintf_internal_r+0x15e8>
    363c:	42000204 	addi	r8,r8,8
    3640:	d8803717 	ldw	r2,220(sp)
    3644:	d9003417 	ldw	r4,208(sp)
    3648:	8c400044 	addi	r17,r17,1
    364c:	10c7883a 	add	r3,r2,r3
    3650:	40800115 	stw	r2,4(r8)
    3654:	41000015 	stw	r4,0(r8)
    3658:	d8c02015 	stw	r3,128(sp)
    365c:	dc401f15 	stw	r17,124(sp)
    3660:	008001c4 	movi	r2,7
    3664:	14416916 	blt	r2,r17,3c0c <___vfprintf_internal_r+0x160c>
    3668:	45800204 	addi	r22,r8,8
    366c:	d9003617 	ldw	r4,216(sp)
    3670:	d9403817 	ldw	r5,224(sp)
    3674:	000d883a 	mov	r6,zero
    3678:	000f883a 	mov	r7,zero
    367c:	d8c03c15 	stw	r3,240(sp)
    3680:	000d0140 	call	d014 <__eqdf2>
    3684:	d8c03c17 	ldw	r3,240(sp)
    3688:	1000bc26 	beq	r2,zero,397c <___vfprintf_internal_r+0x137c>
    368c:	d9403317 	ldw	r5,204(sp)
    3690:	84000044 	addi	r16,r16,1
    3694:	8c400044 	addi	r17,r17,1
    3698:	28bfffc4 	addi	r2,r5,-1
    369c:	1887883a 	add	r3,r3,r2
    36a0:	b0800115 	stw	r2,4(r22)
    36a4:	b4000015 	stw	r16,0(r22)
    36a8:	d8c02015 	stw	r3,128(sp)
    36ac:	dc401f15 	stw	r17,124(sp)
    36b0:	008001c4 	movi	r2,7
    36b4:	14414316 	blt	r2,r17,3bc4 <___vfprintf_internal_r+0x15c4>
    36b8:	b5800204 	addi	r22,r22,8
    36bc:	d9003a17 	ldw	r4,232(sp)
    36c0:	df0022c4 	addi	fp,sp,139
    36c4:	8c400044 	addi	r17,r17,1
    36c8:	20c7883a 	add	r3,r4,r3
    36cc:	b7000015 	stw	fp,0(r22)
    36d0:	b1000115 	stw	r4,4(r22)
    36d4:	d8c02015 	stw	r3,128(sp)
    36d8:	dc401f15 	stw	r17,124(sp)
    36dc:	008001c4 	movi	r2,7
    36e0:	14400e16 	blt	r2,r17,371c <___vfprintf_internal_r+0x111c>
    36e4:	b2000204 	addi	r8,r22,8
    36e8:	003e3a06 	br	2fd4 <__alt_data_end+0xff002fd4>
    36ec:	01000074 	movhi	r4,1
    36f0:	21016a84 	addi	r4,r4,1450
    36f4:	d9002b15 	stw	r4,172(sp)
    36f8:	d9002b17 	ldw	r4,172(sp)
    36fc:	1c07883a 	add	r3,r3,r16
    3700:	44000115 	stw	r16,4(r8)
    3704:	41000015 	stw	r4,0(r8)
    3708:	10800044 	addi	r2,r2,1
    370c:	d8c02015 	stw	r3,128(sp)
    3710:	d8801f15 	stw	r2,124(sp)
    3714:	010001c4 	movi	r4,7
    3718:	20be2d0e 	bge	r4,r2,2fd0 <__alt_data_end+0xff002fd0>
    371c:	d9002c17 	ldw	r4,176(sp)
    3720:	d9801e04 	addi	r6,sp,120
    3724:	b80b883a 	mov	r5,r23
    3728:	000939c0 	call	939c <__sprint_r>
    372c:	103cb61e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3730:	d8c02017 	ldw	r3,128(sp)
    3734:	da000404 	addi	r8,sp,16
    3738:	003e2606 	br	2fd4 <__alt_data_end+0xff002fd4>
    373c:	d9002c17 	ldw	r4,176(sp)
    3740:	d9801e04 	addi	r6,sp,120
    3744:	b80b883a 	mov	r5,r23
    3748:	000939c0 	call	939c <__sprint_r>
    374c:	103e5d26 	beq	r2,zero,30c4 <__alt_data_end+0xff0030c4>
    3750:	003cad06 	br	2a08 <__alt_data_end+0xff002a08>
    3754:	d9002c17 	ldw	r4,176(sp)
    3758:	d9801e04 	addi	r6,sp,120
    375c:	b80b883a 	mov	r5,r23
    3760:	000939c0 	call	939c <__sprint_r>
    3764:	103ca81e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3768:	d8c02017 	ldw	r3,128(sp)
    376c:	da000404 	addi	r8,sp,16
    3770:	003e0b06 	br	2fa0 <__alt_data_end+0xff002fa0>
    3774:	d9002c17 	ldw	r4,176(sp)
    3778:	d9801e04 	addi	r6,sp,120
    377c:	b80b883a 	mov	r5,r23
    3780:	000939c0 	call	939c <__sprint_r>
    3784:	103ca01e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3788:	d8c02017 	ldw	r3,128(sp)
    378c:	da000404 	addi	r8,sp,16
    3790:	003dbd06 	br	2e88 <__alt_data_end+0xff002e88>
    3794:	d9002c17 	ldw	r4,176(sp)
    3798:	d9801e04 	addi	r6,sp,120
    379c:	b80b883a 	mov	r5,r23
    37a0:	000939c0 	call	939c <__sprint_r>
    37a4:	103c981e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    37a8:	d8c02017 	ldw	r3,128(sp)
    37ac:	da000404 	addi	r8,sp,16
    37b0:	003dc306 	br	2ec0 <__alt_data_end+0xff002ec0>
    37b4:	d8802917 	ldw	r2,164(sp)
    37b8:	d8002785 	stb	zero,158(sp)
    37bc:	103f0616 	blt	r2,zero,33d8 <__alt_data_end+0xff0033d8>
    37c0:	00ffdfc4 	movi	r3,-129
    37c4:	9d84b03a 	or	r2,r19,r22
    37c8:	90e4703a 	and	r18,r18,r3
    37cc:	103c6b26 	beq	r2,zero,297c <__alt_data_end+0xff00297c>
    37d0:	0039883a 	mov	fp,zero
    37d4:	003e7406 	br	31a8 <__alt_data_end+0xff0031a8>
    37d8:	9080040c 	andi	r2,r18,16
    37dc:	1001b326 	beq	r2,zero,3eac <___vfprintf_internal_r+0x18ac>
    37e0:	d9002d17 	ldw	r4,180(sp)
    37e4:	d9402917 	ldw	r5,164(sp)
    37e8:	d8002785 	stb	zero,158(sp)
    37ec:	20800104 	addi	r2,r4,4
    37f0:	24c00017 	ldw	r19,0(r4)
    37f4:	002d883a 	mov	r22,zero
    37f8:	2801b516 	blt	r5,zero,3ed0 <___vfprintf_internal_r+0x18d0>
    37fc:	00ffdfc4 	movi	r3,-129
    3800:	d8802d15 	stw	r2,180(sp)
    3804:	90e4703a 	and	r18,r18,r3
    3808:	983d2726 	beq	r19,zero,2ca8 <__alt_data_end+0xff002ca8>
    380c:	0039883a 	mov	fp,zero
    3810:	003d2a06 	br	2cbc <__alt_data_end+0xff002cbc>
    3814:	dc402617 	ldw	r17,152(sp)
    3818:	0441d30e 	bge	zero,r17,3f68 <___vfprintf_internal_r+0x1968>
    381c:	dc403217 	ldw	r17,200(sp)
    3820:	d8803317 	ldw	r2,204(sp)
    3824:	1440010e 	bge	r2,r17,382c <___vfprintf_internal_r+0x122c>
    3828:	1023883a 	mov	r17,r2
    382c:	04400a0e 	bge	zero,r17,3858 <___vfprintf_internal_r+0x1258>
    3830:	d8801f17 	ldw	r2,124(sp)
    3834:	1c47883a 	add	r3,r3,r17
    3838:	44000015 	stw	r16,0(r8)
    383c:	10800044 	addi	r2,r2,1
    3840:	44400115 	stw	r17,4(r8)
    3844:	d8c02015 	stw	r3,128(sp)
    3848:	d8801f15 	stw	r2,124(sp)
    384c:	010001c4 	movi	r4,7
    3850:	20826516 	blt	r4,r2,41e8 <___vfprintf_internal_r+0x1be8>
    3854:	42000204 	addi	r8,r8,8
    3858:	88026116 	blt	r17,zero,41e0 <___vfprintf_internal_r+0x1be0>
    385c:	d9003217 	ldw	r4,200(sp)
    3860:	2463c83a 	sub	r17,r4,r17
    3864:	04407b0e 	bge	zero,r17,3a54 <___vfprintf_internal_r+0x1454>
    3868:	05800404 	movi	r22,16
    386c:	d8801f17 	ldw	r2,124(sp)
    3870:	b4419d0e 	bge	r22,r17,3ee8 <___vfprintf_internal_r+0x18e8>
    3874:	01000074 	movhi	r4,1
    3878:	21016a84 	addi	r4,r4,1450
    387c:	d9002b15 	stw	r4,172(sp)
    3880:	070001c4 	movi	fp,7
    3884:	dcc02c17 	ldw	r19,176(sp)
    3888:	00000306 	br	3898 <___vfprintf_internal_r+0x1298>
    388c:	42000204 	addi	r8,r8,8
    3890:	8c7ffc04 	addi	r17,r17,-16
    3894:	b441970e 	bge	r22,r17,3ef4 <___vfprintf_internal_r+0x18f4>
    3898:	18c00404 	addi	r3,r3,16
    389c:	10800044 	addi	r2,r2,1
    38a0:	45000015 	stw	r20,0(r8)
    38a4:	45800115 	stw	r22,4(r8)
    38a8:	d8c02015 	stw	r3,128(sp)
    38ac:	d8801f15 	stw	r2,124(sp)
    38b0:	e0bff60e 	bge	fp,r2,388c <__alt_data_end+0xff00388c>
    38b4:	d9801e04 	addi	r6,sp,120
    38b8:	b80b883a 	mov	r5,r23
    38bc:	9809883a 	mov	r4,r19
    38c0:	000939c0 	call	939c <__sprint_r>
    38c4:	103c501e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    38c8:	d8c02017 	ldw	r3,128(sp)
    38cc:	d8801f17 	ldw	r2,124(sp)
    38d0:	da000404 	addi	r8,sp,16
    38d4:	003fee06 	br	3890 <__alt_data_end+0xff003890>
    38d8:	d9002c17 	ldw	r4,176(sp)
    38dc:	d9801e04 	addi	r6,sp,120
    38e0:	b80b883a 	mov	r5,r23
    38e4:	000939c0 	call	939c <__sprint_r>
    38e8:	103c471e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    38ec:	d8c02017 	ldw	r3,128(sp)
    38f0:	df002787 	ldb	fp,158(sp)
    38f4:	da000404 	addi	r8,sp,16
    38f8:	003d5606 	br	2e54 <__alt_data_end+0xff002e54>
    38fc:	9080040c 	andi	r2,r18,16
    3900:	10016126 	beq	r2,zero,3e88 <___vfprintf_internal_r+0x1888>
    3904:	d8802d17 	ldw	r2,180(sp)
    3908:	14c00017 	ldw	r19,0(r2)
    390c:	10800104 	addi	r2,r2,4
    3910:	d8802d15 	stw	r2,180(sp)
    3914:	982dd7fa 	srai	r22,r19,31
    3918:	b005883a 	mov	r2,r22
    391c:	003c8206 	br	2b28 <__alt_data_end+0xff002b28>
    3920:	9080040c 	andi	r2,r18,16
    3924:	10003526 	beq	r2,zero,39fc <___vfprintf_internal_r+0x13fc>
    3928:	d9402d17 	ldw	r5,180(sp)
    392c:	d8c02917 	ldw	r3,164(sp)
    3930:	d8002785 	stb	zero,158(sp)
    3934:	28800104 	addi	r2,r5,4
    3938:	2cc00017 	ldw	r19,0(r5)
    393c:	002d883a 	mov	r22,zero
    3940:	18003716 	blt	r3,zero,3a20 <___vfprintf_internal_r+0x1420>
    3944:	00ffdfc4 	movi	r3,-129
    3948:	d8802d15 	stw	r2,180(sp)
    394c:	90e4703a 	and	r18,r18,r3
    3950:	0039883a 	mov	fp,zero
    3954:	983df326 	beq	r19,zero,3124 <__alt_data_end+0xff003124>
    3958:	00800244 	movi	r2,9
    395c:	14fc7b36 	bltu	r2,r19,2b4c <__alt_data_end+0xff002b4c>
    3960:	d8c02817 	ldw	r3,160(sp)
    3964:	dc001dc4 	addi	r16,sp,119
    3968:	9cc00c04 	addi	r19,r19,48
    396c:	1c07c83a 	sub	r3,r3,r16
    3970:	dcc01dc5 	stb	r19,119(sp)
    3974:	d8c02e15 	stw	r3,184(sp)
    3978:	003ce806 	br	2d1c <__alt_data_end+0xff002d1c>
    397c:	d8803317 	ldw	r2,204(sp)
    3980:	143fffc4 	addi	r16,r2,-1
    3984:	043f4d0e 	bge	zero,r16,36bc <__alt_data_end+0xff0036bc>
    3988:	07000404 	movi	fp,16
    398c:	e400810e 	bge	fp,r16,3b94 <___vfprintf_internal_r+0x1594>
    3990:	01400074 	movhi	r5,1
    3994:	29416a84 	addi	r5,r5,1450
    3998:	d9402b15 	stw	r5,172(sp)
    399c:	01c001c4 	movi	r7,7
    39a0:	dcc02c17 	ldw	r19,176(sp)
    39a4:	00000306 	br	39b4 <___vfprintf_internal_r+0x13b4>
    39a8:	b5800204 	addi	r22,r22,8
    39ac:	843ffc04 	addi	r16,r16,-16
    39b0:	e4007b0e 	bge	fp,r16,3ba0 <___vfprintf_internal_r+0x15a0>
    39b4:	18c00404 	addi	r3,r3,16
    39b8:	8c400044 	addi	r17,r17,1
    39bc:	b5000015 	stw	r20,0(r22)
    39c0:	b7000115 	stw	fp,4(r22)
    39c4:	d8c02015 	stw	r3,128(sp)
    39c8:	dc401f15 	stw	r17,124(sp)
    39cc:	3c7ff60e 	bge	r7,r17,39a8 <__alt_data_end+0xff0039a8>
    39d0:	d9801e04 	addi	r6,sp,120
    39d4:	b80b883a 	mov	r5,r23
    39d8:	9809883a 	mov	r4,r19
    39dc:	d9c03c15 	stw	r7,240(sp)
    39e0:	000939c0 	call	939c <__sprint_r>
    39e4:	d9c03c17 	ldw	r7,240(sp)
    39e8:	103c071e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    39ec:	d8c02017 	ldw	r3,128(sp)
    39f0:	dc401f17 	ldw	r17,124(sp)
    39f4:	dd800404 	addi	r22,sp,16
    39f8:	003fec06 	br	39ac <__alt_data_end+0xff0039ac>
    39fc:	9080100c 	andi	r2,r18,64
    3a00:	d8002785 	stb	zero,158(sp)
    3a04:	10010e26 	beq	r2,zero,3e40 <___vfprintf_internal_r+0x1840>
    3a08:	d9002d17 	ldw	r4,180(sp)
    3a0c:	d9402917 	ldw	r5,164(sp)
    3a10:	002d883a 	mov	r22,zero
    3a14:	20800104 	addi	r2,r4,4
    3a18:	24c0000b 	ldhu	r19,0(r4)
    3a1c:	283fc90e 	bge	r5,zero,3944 <__alt_data_end+0xff003944>
    3a20:	d8802d15 	stw	r2,180(sp)
    3a24:	0039883a 	mov	fp,zero
    3a28:	9d84b03a 	or	r2,r19,r22
    3a2c:	103c461e 	bne	r2,zero,2b48 <__alt_data_end+0xff002b48>
    3a30:	00800044 	movi	r2,1
    3a34:	003e6c06 	br	33e8 <__alt_data_end+0xff0033e8>
    3a38:	d9002c17 	ldw	r4,176(sp)
    3a3c:	d9801e04 	addi	r6,sp,120
    3a40:	b80b883a 	mov	r5,r23
    3a44:	000939c0 	call	939c <__sprint_r>
    3a48:	103bef1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3a4c:	d8c02017 	ldw	r3,128(sp)
    3a50:	da000404 	addi	r8,sp,16
    3a54:	d9003217 	ldw	r4,200(sp)
    3a58:	d8802617 	ldw	r2,152(sp)
    3a5c:	d9403317 	ldw	r5,204(sp)
    3a60:	8123883a 	add	r17,r16,r4
    3a64:	11400216 	blt	r2,r5,3a70 <___vfprintf_internal_r+0x1470>
    3a68:	9100004c 	andi	r4,r18,1
    3a6c:	20000d26 	beq	r4,zero,3aa4 <___vfprintf_internal_r+0x14a4>
    3a70:	d9003717 	ldw	r4,220(sp)
    3a74:	d9403417 	ldw	r5,208(sp)
    3a78:	1907883a 	add	r3,r3,r4
    3a7c:	d9001f17 	ldw	r4,124(sp)
    3a80:	41400015 	stw	r5,0(r8)
    3a84:	d9403717 	ldw	r5,220(sp)
    3a88:	21000044 	addi	r4,r4,1
    3a8c:	d8c02015 	stw	r3,128(sp)
    3a90:	41400115 	stw	r5,4(r8)
    3a94:	d9001f15 	stw	r4,124(sp)
    3a98:	014001c4 	movi	r5,7
    3a9c:	2901e816 	blt	r5,r4,4240 <___vfprintf_internal_r+0x1c40>
    3aa0:	42000204 	addi	r8,r8,8
    3aa4:	d9003317 	ldw	r4,204(sp)
    3aa8:	8121883a 	add	r16,r16,r4
    3aac:	2085c83a 	sub	r2,r4,r2
    3ab0:	8461c83a 	sub	r16,r16,r17
    3ab4:	1400010e 	bge	r2,r16,3abc <___vfprintf_internal_r+0x14bc>
    3ab8:	1021883a 	mov	r16,r2
    3abc:	04000a0e 	bge	zero,r16,3ae8 <___vfprintf_internal_r+0x14e8>
    3ac0:	d9001f17 	ldw	r4,124(sp)
    3ac4:	1c07883a 	add	r3,r3,r16
    3ac8:	44400015 	stw	r17,0(r8)
    3acc:	21000044 	addi	r4,r4,1
    3ad0:	44000115 	stw	r16,4(r8)
    3ad4:	d8c02015 	stw	r3,128(sp)
    3ad8:	d9001f15 	stw	r4,124(sp)
    3adc:	014001c4 	movi	r5,7
    3ae0:	2901fb16 	blt	r5,r4,42d0 <___vfprintf_internal_r+0x1cd0>
    3ae4:	42000204 	addi	r8,r8,8
    3ae8:	8001f716 	blt	r16,zero,42c8 <___vfprintf_internal_r+0x1cc8>
    3aec:	1421c83a 	sub	r16,r2,r16
    3af0:	043d380e 	bge	zero,r16,2fd4 <__alt_data_end+0xff002fd4>
    3af4:	04400404 	movi	r17,16
    3af8:	d8801f17 	ldw	r2,124(sp)
    3afc:	8c3efb0e 	bge	r17,r16,36ec <__alt_data_end+0xff0036ec>
    3b00:	01400074 	movhi	r5,1
    3b04:	29416a84 	addi	r5,r5,1450
    3b08:	d9402b15 	stw	r5,172(sp)
    3b0c:	058001c4 	movi	r22,7
    3b10:	dcc02c17 	ldw	r19,176(sp)
    3b14:	00000306 	br	3b24 <___vfprintf_internal_r+0x1524>
    3b18:	42000204 	addi	r8,r8,8
    3b1c:	843ffc04 	addi	r16,r16,-16
    3b20:	8c3ef50e 	bge	r17,r16,36f8 <__alt_data_end+0xff0036f8>
    3b24:	18c00404 	addi	r3,r3,16
    3b28:	10800044 	addi	r2,r2,1
    3b2c:	45000015 	stw	r20,0(r8)
    3b30:	44400115 	stw	r17,4(r8)
    3b34:	d8c02015 	stw	r3,128(sp)
    3b38:	d8801f15 	stw	r2,124(sp)
    3b3c:	b0bff60e 	bge	r22,r2,3b18 <__alt_data_end+0xff003b18>
    3b40:	d9801e04 	addi	r6,sp,120
    3b44:	b80b883a 	mov	r5,r23
    3b48:	9809883a 	mov	r4,r19
    3b4c:	000939c0 	call	939c <__sprint_r>
    3b50:	103bad1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3b54:	d8c02017 	ldw	r3,128(sp)
    3b58:	d8801f17 	ldw	r2,124(sp)
    3b5c:	da000404 	addi	r8,sp,16
    3b60:	003fee06 	br	3b1c <__alt_data_end+0xff003b1c>
    3b64:	9088703a 	and	r4,r18,r2
    3b68:	203eab1e 	bne	r4,zero,3618 <__alt_data_end+0xff003618>
    3b6c:	dc401f17 	ldw	r17,124(sp)
    3b70:	40800115 	stw	r2,4(r8)
    3b74:	44000015 	stw	r16,0(r8)
    3b78:	8c400044 	addi	r17,r17,1
    3b7c:	d8c02015 	stw	r3,128(sp)
    3b80:	dc401f15 	stw	r17,124(sp)
    3b84:	008001c4 	movi	r2,7
    3b88:	14400e16 	blt	r2,r17,3bc4 <___vfprintf_internal_r+0x15c4>
    3b8c:	45800204 	addi	r22,r8,8
    3b90:	003eca06 	br	36bc <__alt_data_end+0xff0036bc>
    3b94:	01000074 	movhi	r4,1
    3b98:	21016a84 	addi	r4,r4,1450
    3b9c:	d9002b15 	stw	r4,172(sp)
    3ba0:	d8802b17 	ldw	r2,172(sp)
    3ba4:	1c07883a 	add	r3,r3,r16
    3ba8:	8c400044 	addi	r17,r17,1
    3bac:	b0800015 	stw	r2,0(r22)
    3bb0:	b4000115 	stw	r16,4(r22)
    3bb4:	d8c02015 	stw	r3,128(sp)
    3bb8:	dc401f15 	stw	r17,124(sp)
    3bbc:	008001c4 	movi	r2,7
    3bc0:	147ebd0e 	bge	r2,r17,36b8 <__alt_data_end+0xff0036b8>
    3bc4:	d9002c17 	ldw	r4,176(sp)
    3bc8:	d9801e04 	addi	r6,sp,120
    3bcc:	b80b883a 	mov	r5,r23
    3bd0:	000939c0 	call	939c <__sprint_r>
    3bd4:	103b8c1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3bd8:	d8c02017 	ldw	r3,128(sp)
    3bdc:	dc401f17 	ldw	r17,124(sp)
    3be0:	dd800404 	addi	r22,sp,16
    3be4:	003eb506 	br	36bc <__alt_data_end+0xff0036bc>
    3be8:	d9002c17 	ldw	r4,176(sp)
    3bec:	d9801e04 	addi	r6,sp,120
    3bf0:	b80b883a 	mov	r5,r23
    3bf4:	000939c0 	call	939c <__sprint_r>
    3bf8:	103b831e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3bfc:	d8c02017 	ldw	r3,128(sp)
    3c00:	dc401f17 	ldw	r17,124(sp)
    3c04:	da000404 	addi	r8,sp,16
    3c08:	003e8d06 	br	3640 <__alt_data_end+0xff003640>
    3c0c:	d9002c17 	ldw	r4,176(sp)
    3c10:	d9801e04 	addi	r6,sp,120
    3c14:	b80b883a 	mov	r5,r23
    3c18:	000939c0 	call	939c <__sprint_r>
    3c1c:	103b7a1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3c20:	d8c02017 	ldw	r3,128(sp)
    3c24:	dc401f17 	ldw	r17,124(sp)
    3c28:	dd800404 	addi	r22,sp,16
    3c2c:	003e8f06 	br	366c <__alt_data_end+0xff00366c>
    3c30:	0027883a 	mov	r19,zero
    3c34:	003f4a06 	br	3960 <__alt_data_end+0xff003960>
    3c38:	d9002c17 	ldw	r4,176(sp)
    3c3c:	d9801e04 	addi	r6,sp,120
    3c40:	b80b883a 	mov	r5,r23
    3c44:	000939c0 	call	939c <__sprint_r>
    3c48:	103b6f1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3c4c:	d8c02017 	ldw	r3,128(sp)
    3c50:	da000404 	addi	r8,sp,16
    3c54:	003c9d06 	br	2ecc <__alt_data_end+0xff002ecc>
    3c58:	04e7c83a 	sub	r19,zero,r19
    3c5c:	9804c03a 	cmpne	r2,r19,zero
    3c60:	05adc83a 	sub	r22,zero,r22
    3c64:	b0adc83a 	sub	r22,r22,r2
    3c68:	d8802917 	ldw	r2,164(sp)
    3c6c:	07000b44 	movi	fp,45
    3c70:	df002785 	stb	fp,158(sp)
    3c74:	10017b16 	blt	r2,zero,4264 <___vfprintf_internal_r+0x1c64>
    3c78:	00bfdfc4 	movi	r2,-129
    3c7c:	90a4703a 	and	r18,r18,r2
    3c80:	003bb106 	br	2b48 <__alt_data_end+0xff002b48>
    3c84:	d9003617 	ldw	r4,216(sp)
    3c88:	d9403817 	ldw	r5,224(sp)
    3c8c:	da003d15 	stw	r8,244(sp)
    3c90:	00090140 	call	9014 <__fpclassifyd>
    3c94:	da003d17 	ldw	r8,244(sp)
    3c98:	1000f026 	beq	r2,zero,405c <___vfprintf_internal_r+0x1a5c>
    3c9c:	d9002917 	ldw	r4,164(sp)
    3ca0:	05bff7c4 	movi	r22,-33
    3ca4:	00bfffc4 	movi	r2,-1
    3ca8:	8dac703a 	and	r22,r17,r22
    3cac:	20820026 	beq	r4,r2,44b0 <___vfprintf_internal_r+0x1eb0>
    3cb0:	008011c4 	movi	r2,71
    3cb4:	b081f726 	beq	r22,r2,4494 <___vfprintf_internal_r+0x1e94>
    3cb8:	d9003817 	ldw	r4,224(sp)
    3cbc:	90c04014 	ori	r3,r18,256
    3cc0:	d8c02b15 	stw	r3,172(sp)
    3cc4:	20021516 	blt	r4,zero,451c <___vfprintf_internal_r+0x1f1c>
    3cc8:	dcc03817 	ldw	r19,224(sp)
    3ccc:	d8002a05 	stb	zero,168(sp)
    3cd0:	00801984 	movi	r2,102
    3cd4:	8881f926 	beq	r17,r2,44bc <___vfprintf_internal_r+0x1ebc>
    3cd8:	00801184 	movi	r2,70
    3cdc:	88821c26 	beq	r17,r2,4550 <___vfprintf_internal_r+0x1f50>
    3ce0:	00801144 	movi	r2,69
    3ce4:	b081ef26 	beq	r22,r2,44a4 <___vfprintf_internal_r+0x1ea4>
    3ce8:	d8c02917 	ldw	r3,164(sp)
    3cec:	d8802104 	addi	r2,sp,132
    3cf0:	d8800315 	stw	r2,12(sp)
    3cf4:	d9403617 	ldw	r5,216(sp)
    3cf8:	d8802504 	addi	r2,sp,148
    3cfc:	d9002c17 	ldw	r4,176(sp)
    3d00:	d8800215 	stw	r2,8(sp)
    3d04:	d8802604 	addi	r2,sp,152
    3d08:	d8c00015 	stw	r3,0(sp)
    3d0c:	d8800115 	stw	r2,4(sp)
    3d10:	01c00084 	movi	r7,2
    3d14:	980d883a 	mov	r6,r19
    3d18:	d8c03c15 	stw	r3,240(sp)
    3d1c:	da003d15 	stw	r8,244(sp)
    3d20:	0004c240 	call	4c24 <_dtoa_r>
    3d24:	1021883a 	mov	r16,r2
    3d28:	008019c4 	movi	r2,103
    3d2c:	d8c03c17 	ldw	r3,240(sp)
    3d30:	da003d17 	ldw	r8,244(sp)
    3d34:	88817126 	beq	r17,r2,42fc <___vfprintf_internal_r+0x1cfc>
    3d38:	008011c4 	movi	r2,71
    3d3c:	88829226 	beq	r17,r2,4788 <___vfprintf_internal_r+0x2188>
    3d40:	80f9883a 	add	fp,r16,r3
    3d44:	d9003617 	ldw	r4,216(sp)
    3d48:	000d883a 	mov	r6,zero
    3d4c:	000f883a 	mov	r7,zero
    3d50:	980b883a 	mov	r5,r19
    3d54:	da003d15 	stw	r8,244(sp)
    3d58:	000d0140 	call	d014 <__eqdf2>
    3d5c:	da003d17 	ldw	r8,244(sp)
    3d60:	10018d26 	beq	r2,zero,4398 <___vfprintf_internal_r+0x1d98>
    3d64:	d8802117 	ldw	r2,132(sp)
    3d68:	1700062e 	bgeu	r2,fp,3d84 <___vfprintf_internal_r+0x1784>
    3d6c:	01000c04 	movi	r4,48
    3d70:	10c00044 	addi	r3,r2,1
    3d74:	d8c02115 	stw	r3,132(sp)
    3d78:	11000005 	stb	r4,0(r2)
    3d7c:	d8802117 	ldw	r2,132(sp)
    3d80:	173ffb36 	bltu	r2,fp,3d70 <__alt_data_end+0xff003d70>
    3d84:	1405c83a 	sub	r2,r2,r16
    3d88:	d8803315 	stw	r2,204(sp)
    3d8c:	008011c4 	movi	r2,71
    3d90:	b0817626 	beq	r22,r2,436c <___vfprintf_internal_r+0x1d6c>
    3d94:	00801944 	movi	r2,101
    3d98:	1442810e 	bge	r2,r17,47a0 <___vfprintf_internal_r+0x21a0>
    3d9c:	d8c02617 	ldw	r3,152(sp)
    3da0:	00801984 	movi	r2,102
    3da4:	d8c03215 	stw	r3,200(sp)
    3da8:	8881fe26 	beq	r17,r2,45a4 <___vfprintf_internal_r+0x1fa4>
    3dac:	d8c03217 	ldw	r3,200(sp)
    3db0:	d9003317 	ldw	r4,204(sp)
    3db4:	1901dd16 	blt	r3,r4,452c <___vfprintf_internal_r+0x1f2c>
    3db8:	9480004c 	andi	r18,r18,1
    3dbc:	90022b1e 	bne	r18,zero,466c <___vfprintf_internal_r+0x206c>
    3dc0:	1805883a 	mov	r2,r3
    3dc4:	18028016 	blt	r3,zero,47c8 <___vfprintf_internal_r+0x21c8>
    3dc8:	d8c03217 	ldw	r3,200(sp)
    3dcc:	044019c4 	movi	r17,103
    3dd0:	d8c02e15 	stw	r3,184(sp)
    3dd4:	df002a07 	ldb	fp,168(sp)
    3dd8:	e001531e 	bne	fp,zero,4328 <___vfprintf_internal_r+0x1d28>
    3ddc:	df002783 	ldbu	fp,158(sp)
    3de0:	d8802a15 	stw	r2,168(sp)
    3de4:	dc802b17 	ldw	r18,172(sp)
    3de8:	d8002915 	stw	zero,164(sp)
    3dec:	003bd106 	br	2d34 <__alt_data_end+0xff002d34>
    3df0:	d8802d17 	ldw	r2,180(sp)
    3df4:	d8c02d17 	ldw	r3,180(sp)
    3df8:	d9002d17 	ldw	r4,180(sp)
    3dfc:	10800017 	ldw	r2,0(r2)
    3e00:	18c00117 	ldw	r3,4(r3)
    3e04:	21000204 	addi	r4,r4,8
    3e08:	d8803615 	stw	r2,216(sp)
    3e0c:	d8c03815 	stw	r3,224(sp)
    3e10:	d9002d15 	stw	r4,180(sp)
    3e14:	003b7506 	br	2bec <__alt_data_end+0xff002bec>
    3e18:	ac400007 	ldb	r17,0(r21)
    3e1c:	003a5906 	br	2784 <__alt_data_end+0xff002784>
    3e20:	9080100c 	andi	r2,r18,64
    3e24:	1000a826 	beq	r2,zero,40c8 <___vfprintf_internal_r+0x1ac8>
    3e28:	d9002d17 	ldw	r4,180(sp)
    3e2c:	002d883a 	mov	r22,zero
    3e30:	24c0000b 	ldhu	r19,0(r4)
    3e34:	21000104 	addi	r4,r4,4
    3e38:	d9002d15 	stw	r4,180(sp)
    3e3c:	003ccb06 	br	316c <__alt_data_end+0xff00316c>
    3e40:	d8c02d17 	ldw	r3,180(sp)
    3e44:	d9002917 	ldw	r4,164(sp)
    3e48:	002d883a 	mov	r22,zero
    3e4c:	18800104 	addi	r2,r3,4
    3e50:	1cc00017 	ldw	r19,0(r3)
    3e54:	203ebb0e 	bge	r4,zero,3944 <__alt_data_end+0xff003944>
    3e58:	003ef106 	br	3a20 <__alt_data_end+0xff003a20>
    3e5c:	9080040c 	andi	r2,r18,16
    3e60:	1000921e 	bne	r2,zero,40ac <___vfprintf_internal_r+0x1aac>
    3e64:	9480100c 	andi	r18,r18,64
    3e68:	90013926 	beq	r18,zero,4350 <___vfprintf_internal_r+0x1d50>
    3e6c:	d9002d17 	ldw	r4,180(sp)
    3e70:	d9402f17 	ldw	r5,188(sp)
    3e74:	20800017 	ldw	r2,0(r4)
    3e78:	21000104 	addi	r4,r4,4
    3e7c:	d9002d15 	stw	r4,180(sp)
    3e80:	1140000d 	sth	r5,0(r2)
    3e84:	003a1606 	br	26e0 <__alt_data_end+0xff0026e0>
    3e88:	9080100c 	andi	r2,r18,64
    3e8c:	10008026 	beq	r2,zero,4090 <___vfprintf_internal_r+0x1a90>
    3e90:	d8c02d17 	ldw	r3,180(sp)
    3e94:	1cc0000f 	ldh	r19,0(r3)
    3e98:	18c00104 	addi	r3,r3,4
    3e9c:	d8c02d15 	stw	r3,180(sp)
    3ea0:	982dd7fa 	srai	r22,r19,31
    3ea4:	b005883a 	mov	r2,r22
    3ea8:	003b1f06 	br	2b28 <__alt_data_end+0xff002b28>
    3eac:	9080100c 	andi	r2,r18,64
    3eb0:	d8002785 	stb	zero,158(sp)
    3eb4:	10008a1e 	bne	r2,zero,40e0 <___vfprintf_internal_r+0x1ae0>
    3eb8:	d9402d17 	ldw	r5,180(sp)
    3ebc:	d8c02917 	ldw	r3,164(sp)
    3ec0:	002d883a 	mov	r22,zero
    3ec4:	28800104 	addi	r2,r5,4
    3ec8:	2cc00017 	ldw	r19,0(r5)
    3ecc:	183e4b0e 	bge	r3,zero,37fc <__alt_data_end+0xff0037fc>
    3ed0:	9d86b03a 	or	r3,r19,r22
    3ed4:	d8802d15 	stw	r2,180(sp)
    3ed8:	183e4c1e 	bne	r3,zero,380c <__alt_data_end+0xff00380c>
    3edc:	0039883a 	mov	fp,zero
    3ee0:	0005883a 	mov	r2,zero
    3ee4:	003d4006 	br	33e8 <__alt_data_end+0xff0033e8>
    3ee8:	01400074 	movhi	r5,1
    3eec:	29416a84 	addi	r5,r5,1450
    3ef0:	d9402b15 	stw	r5,172(sp)
    3ef4:	d9402b17 	ldw	r5,172(sp)
    3ef8:	1c47883a 	add	r3,r3,r17
    3efc:	10800044 	addi	r2,r2,1
    3f00:	41400015 	stw	r5,0(r8)
    3f04:	44400115 	stw	r17,4(r8)
    3f08:	d8c02015 	stw	r3,128(sp)
    3f0c:	d8801f15 	stw	r2,124(sp)
    3f10:	010001c4 	movi	r4,7
    3f14:	20bec816 	blt	r4,r2,3a38 <__alt_data_end+0xff003a38>
    3f18:	42000204 	addi	r8,r8,8
    3f1c:	003ecd06 	br	3a54 <__alt_data_end+0xff003a54>
    3f20:	d9002917 	ldw	r4,164(sp)
    3f24:	d8002785 	stb	zero,158(sp)
    3f28:	203d2d16 	blt	r4,zero,33e0 <__alt_data_end+0xff0033e0>
    3f2c:	00bfdfc4 	movi	r2,-129
    3f30:	90a4703a 	and	r18,r18,r2
    3f34:	003a9106 	br	297c <__alt_data_end+0xff00297c>
    3f38:	01000074 	movhi	r4,1
    3f3c:	21016a84 	addi	r4,r4,1450
    3f40:	d9002b15 	stw	r4,172(sp)
    3f44:	003c0c06 	br	2f78 <__alt_data_end+0xff002f78>
    3f48:	d9002c17 	ldw	r4,176(sp)
    3f4c:	d9801e04 	addi	r6,sp,120
    3f50:	b80b883a 	mov	r5,r23
    3f54:	000939c0 	call	939c <__sprint_r>
    3f58:	103aab1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    3f5c:	d8c02017 	ldw	r3,128(sp)
    3f60:	da000404 	addi	r8,sp,16
    3f64:	003d4106 	br	346c <__alt_data_end+0xff00346c>
    3f68:	d8801f17 	ldw	r2,124(sp)
    3f6c:	01400074 	movhi	r5,1
    3f70:	01000044 	movi	r4,1
    3f74:	18c00044 	addi	r3,r3,1
    3f78:	10800044 	addi	r2,r2,1
    3f7c:	29416a04 	addi	r5,r5,1448
    3f80:	41000115 	stw	r4,4(r8)
    3f84:	41400015 	stw	r5,0(r8)
    3f88:	d8c02015 	stw	r3,128(sp)
    3f8c:	d8801f15 	stw	r2,124(sp)
    3f90:	010001c4 	movi	r4,7
    3f94:	20805c16 	blt	r4,r2,4108 <___vfprintf_internal_r+0x1b08>
    3f98:	42000204 	addi	r8,r8,8
    3f9c:	8800041e 	bne	r17,zero,3fb0 <___vfprintf_internal_r+0x19b0>
    3fa0:	d8803317 	ldw	r2,204(sp)
    3fa4:	1000021e 	bne	r2,zero,3fb0 <___vfprintf_internal_r+0x19b0>
    3fa8:	9080004c 	andi	r2,r18,1
    3fac:	103c0926 	beq	r2,zero,2fd4 <__alt_data_end+0xff002fd4>
    3fb0:	d9003717 	ldw	r4,220(sp)
    3fb4:	d8801f17 	ldw	r2,124(sp)
    3fb8:	d9403417 	ldw	r5,208(sp)
    3fbc:	20c7883a 	add	r3,r4,r3
    3fc0:	10800044 	addi	r2,r2,1
    3fc4:	41000115 	stw	r4,4(r8)
    3fc8:	41400015 	stw	r5,0(r8)
    3fcc:	d8c02015 	stw	r3,128(sp)
    3fd0:	d8801f15 	stw	r2,124(sp)
    3fd4:	010001c4 	movi	r4,7
    3fd8:	20812116 	blt	r4,r2,4460 <___vfprintf_internal_r+0x1e60>
    3fdc:	42000204 	addi	r8,r8,8
    3fe0:	0463c83a 	sub	r17,zero,r17
    3fe4:	0440730e 	bge	zero,r17,41b4 <___vfprintf_internal_r+0x1bb4>
    3fe8:	05800404 	movi	r22,16
    3fec:	b440860e 	bge	r22,r17,4208 <___vfprintf_internal_r+0x1c08>
    3ff0:	01400074 	movhi	r5,1
    3ff4:	29416a84 	addi	r5,r5,1450
    3ff8:	d9402b15 	stw	r5,172(sp)
    3ffc:	070001c4 	movi	fp,7
    4000:	dcc02c17 	ldw	r19,176(sp)
    4004:	00000306 	br	4014 <___vfprintf_internal_r+0x1a14>
    4008:	42000204 	addi	r8,r8,8
    400c:	8c7ffc04 	addi	r17,r17,-16
    4010:	b440800e 	bge	r22,r17,4214 <___vfprintf_internal_r+0x1c14>
    4014:	18c00404 	addi	r3,r3,16
    4018:	10800044 	addi	r2,r2,1
    401c:	45000015 	stw	r20,0(r8)
    4020:	45800115 	stw	r22,4(r8)
    4024:	d8c02015 	stw	r3,128(sp)
    4028:	d8801f15 	stw	r2,124(sp)
    402c:	e0bff60e 	bge	fp,r2,4008 <__alt_data_end+0xff004008>
    4030:	d9801e04 	addi	r6,sp,120
    4034:	b80b883a 	mov	r5,r23
    4038:	9809883a 	mov	r4,r19
    403c:	000939c0 	call	939c <__sprint_r>
    4040:	103a711e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    4044:	d8c02017 	ldw	r3,128(sp)
    4048:	d8801f17 	ldw	r2,124(sp)
    404c:	da000404 	addi	r8,sp,16
    4050:	003fee06 	br	400c <__alt_data_end+0xff00400c>
    4054:	00bfffc4 	movi	r2,-1
    4058:	003a6f06 	br	2a18 <__alt_data_end+0xff002a18>
    405c:	008011c4 	movi	r2,71
    4060:	1440b816 	blt	r2,r17,4344 <___vfprintf_internal_r+0x1d44>
    4064:	04000074 	movhi	r16,1
    4068:	84015c04 	addi	r16,r16,1392
    406c:	00c000c4 	movi	r3,3
    4070:	00bfdfc4 	movi	r2,-129
    4074:	d8c02a15 	stw	r3,168(sp)
    4078:	90a4703a 	and	r18,r18,r2
    407c:	df002783 	ldbu	fp,158(sp)
    4080:	d8c02e15 	stw	r3,184(sp)
    4084:	d8002915 	stw	zero,164(sp)
    4088:	d8003215 	stw	zero,200(sp)
    408c:	003b2906 	br	2d34 <__alt_data_end+0xff002d34>
    4090:	d9002d17 	ldw	r4,180(sp)
    4094:	24c00017 	ldw	r19,0(r4)
    4098:	21000104 	addi	r4,r4,4
    409c:	d9002d15 	stw	r4,180(sp)
    40a0:	982dd7fa 	srai	r22,r19,31
    40a4:	b005883a 	mov	r2,r22
    40a8:	003a9f06 	br	2b28 <__alt_data_end+0xff002b28>
    40ac:	d9402d17 	ldw	r5,180(sp)
    40b0:	d8c02f17 	ldw	r3,188(sp)
    40b4:	28800017 	ldw	r2,0(r5)
    40b8:	29400104 	addi	r5,r5,4
    40bc:	d9402d15 	stw	r5,180(sp)
    40c0:	10c00015 	stw	r3,0(r2)
    40c4:	00398606 	br	26e0 <__alt_data_end+0xff0026e0>
    40c8:	d9402d17 	ldw	r5,180(sp)
    40cc:	002d883a 	mov	r22,zero
    40d0:	2cc00017 	ldw	r19,0(r5)
    40d4:	29400104 	addi	r5,r5,4
    40d8:	d9402d15 	stw	r5,180(sp)
    40dc:	003c2306 	br	316c <__alt_data_end+0xff00316c>
    40e0:	d8c02d17 	ldw	r3,180(sp)
    40e4:	d9002917 	ldw	r4,164(sp)
    40e8:	002d883a 	mov	r22,zero
    40ec:	18800104 	addi	r2,r3,4
    40f0:	1cc0000b 	ldhu	r19,0(r3)
    40f4:	203dc10e 	bge	r4,zero,37fc <__alt_data_end+0xff0037fc>
    40f8:	003f7506 	br	3ed0 <__alt_data_end+0xff003ed0>
    40fc:	04000074 	movhi	r16,1
    4100:	84015a04 	addi	r16,r16,1384
    4104:	003acc06 	br	2c38 <__alt_data_end+0xff002c38>
    4108:	d9002c17 	ldw	r4,176(sp)
    410c:	d9801e04 	addi	r6,sp,120
    4110:	b80b883a 	mov	r5,r23
    4114:	000939c0 	call	939c <__sprint_r>
    4118:	103a3b1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    411c:	dc402617 	ldw	r17,152(sp)
    4120:	d8c02017 	ldw	r3,128(sp)
    4124:	da000404 	addi	r8,sp,16
    4128:	003f9c06 	br	3f9c <__alt_data_end+0xff003f9c>
    412c:	ac400043 	ldbu	r17,1(r21)
    4130:	94800814 	ori	r18,r18,32
    4134:	ad400044 	addi	r21,r21,1
    4138:	8c403fcc 	andi	r17,r17,255
    413c:	8c40201c 	xori	r17,r17,128
    4140:	8c7fe004 	addi	r17,r17,-128
    4144:	00398f06 	br	2784 <__alt_data_end+0xff002784>
    4148:	d8c02d15 	stw	r3,180(sp)
    414c:	0039883a 	mov	fp,zero
    4150:	003e3506 	br	3a28 <__alt_data_end+0xff003a28>
    4154:	d9002c17 	ldw	r4,176(sp)
    4158:	d9801e04 	addi	r6,sp,120
    415c:	b80b883a 	mov	r5,r23
    4160:	000939c0 	call	939c <__sprint_r>
    4164:	103a281e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    4168:	d8c02017 	ldw	r3,128(sp)
    416c:	da000404 	addi	r8,sp,16
    4170:	003cd006 	br	34b4 <__alt_data_end+0xff0034b4>
    4174:	8009883a 	mov	r4,r16
    4178:	da003d15 	stw	r8,244(sp)
    417c:	00025680 	call	2568 <strlen>
    4180:	d8802e15 	stw	r2,184(sp)
    4184:	da003d17 	ldw	r8,244(sp)
    4188:	103c340e 	bge	r2,zero,325c <__alt_data_end+0xff00325c>
    418c:	0005883a 	mov	r2,zero
    4190:	003c3206 	br	325c <__alt_data_end+0xff00325c>
    4194:	d9002c17 	ldw	r4,176(sp)
    4198:	d9801e04 	addi	r6,sp,120
    419c:	b80b883a 	mov	r5,r23
    41a0:	000939c0 	call	939c <__sprint_r>
    41a4:	103a181e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    41a8:	d8c02017 	ldw	r3,128(sp)
    41ac:	d8801f17 	ldw	r2,124(sp)
    41b0:	da000404 	addi	r8,sp,16
    41b4:	d9403317 	ldw	r5,204(sp)
    41b8:	10800044 	addi	r2,r2,1
    41bc:	44000015 	stw	r16,0(r8)
    41c0:	28c7883a 	add	r3,r5,r3
    41c4:	003b7d06 	br	2fbc <__alt_data_end+0xff002fbc>
    41c8:	01000074 	movhi	r4,1
    41cc:	21016e84 	addi	r4,r4,1466
    41d0:	d9003515 	stw	r4,212(sp)
    41d4:	003b1406 	br	2e28 <__alt_data_end+0xff002e28>
    41d8:	013fffc4 	movi	r4,-1
    41dc:	003a3506 	br	2ab4 <__alt_data_end+0xff002ab4>
    41e0:	0023883a 	mov	r17,zero
    41e4:	003d9d06 	br	385c <__alt_data_end+0xff00385c>
    41e8:	d9002c17 	ldw	r4,176(sp)
    41ec:	d9801e04 	addi	r6,sp,120
    41f0:	b80b883a 	mov	r5,r23
    41f4:	000939c0 	call	939c <__sprint_r>
    41f8:	103a031e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    41fc:	d8c02017 	ldw	r3,128(sp)
    4200:	da000404 	addi	r8,sp,16
    4204:	003d9406 	br	3858 <__alt_data_end+0xff003858>
    4208:	01000074 	movhi	r4,1
    420c:	21016a84 	addi	r4,r4,1450
    4210:	d9002b15 	stw	r4,172(sp)
    4214:	d9002b17 	ldw	r4,172(sp)
    4218:	1c47883a 	add	r3,r3,r17
    421c:	10800044 	addi	r2,r2,1
    4220:	41000015 	stw	r4,0(r8)
    4224:	44400115 	stw	r17,4(r8)
    4228:	d8c02015 	stw	r3,128(sp)
    422c:	d8801f15 	stw	r2,124(sp)
    4230:	010001c4 	movi	r4,7
    4234:	20bfd716 	blt	r4,r2,4194 <__alt_data_end+0xff004194>
    4238:	42000204 	addi	r8,r8,8
    423c:	003fdd06 	br	41b4 <__alt_data_end+0xff0041b4>
    4240:	d9002c17 	ldw	r4,176(sp)
    4244:	d9801e04 	addi	r6,sp,120
    4248:	b80b883a 	mov	r5,r23
    424c:	000939c0 	call	939c <__sprint_r>
    4250:	1039ed1e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    4254:	d8802617 	ldw	r2,152(sp)
    4258:	d8c02017 	ldw	r3,128(sp)
    425c:	da000404 	addi	r8,sp,16
    4260:	003e1006 	br	3aa4 <__alt_data_end+0xff003aa4>
    4264:	00800044 	movi	r2,1
    4268:	10803fcc 	andi	r2,r2,255
    426c:	00c00044 	movi	r3,1
    4270:	10fa3526 	beq	r2,r3,2b48 <__alt_data_end+0xff002b48>
    4274:	00c00084 	movi	r3,2
    4278:	10fbcb26 	beq	r2,r3,31a8 <__alt_data_end+0xff0031a8>
    427c:	003a8f06 	br	2cbc <__alt_data_end+0xff002cbc>
    4280:	01000074 	movhi	r4,1
    4284:	21016e84 	addi	r4,r4,1466
    4288:	d9003515 	stw	r4,212(sp)
    428c:	003b7606 	br	3068 <__alt_data_end+0xff003068>
    4290:	d8802917 	ldw	r2,164(sp)
    4294:	00c00184 	movi	r3,6
    4298:	1880012e 	bgeu	r3,r2,42a0 <___vfprintf_internal_r+0x1ca0>
    429c:	1805883a 	mov	r2,r3
    42a0:	d8802e15 	stw	r2,184(sp)
    42a4:	1000ef16 	blt	r2,zero,4664 <___vfprintf_internal_r+0x2064>
    42a8:	04000074 	movhi	r16,1
    42ac:	d8802a15 	stw	r2,168(sp)
    42b0:	dcc02d15 	stw	r19,180(sp)
    42b4:	d8002915 	stw	zero,164(sp)
    42b8:	d8003215 	stw	zero,200(sp)
    42bc:	84016804 	addi	r16,r16,1440
    42c0:	0039883a 	mov	fp,zero
    42c4:	003aa206 	br	2d50 <__alt_data_end+0xff002d50>
    42c8:	0021883a 	mov	r16,zero
    42cc:	003e0706 	br	3aec <__alt_data_end+0xff003aec>
    42d0:	d9002c17 	ldw	r4,176(sp)
    42d4:	d9801e04 	addi	r6,sp,120
    42d8:	b80b883a 	mov	r5,r23
    42dc:	000939c0 	call	939c <__sprint_r>
    42e0:	1039c91e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    42e4:	d8802617 	ldw	r2,152(sp)
    42e8:	d9403317 	ldw	r5,204(sp)
    42ec:	d8c02017 	ldw	r3,128(sp)
    42f0:	da000404 	addi	r8,sp,16
    42f4:	2885c83a 	sub	r2,r5,r2
    42f8:	003dfb06 	br	3ae8 <__alt_data_end+0xff003ae8>
    42fc:	9080004c 	andi	r2,r18,1
    4300:	103e8f1e 	bne	r2,zero,3d40 <__alt_data_end+0xff003d40>
    4304:	d8802117 	ldw	r2,132(sp)
    4308:	003e9e06 	br	3d84 <__alt_data_end+0xff003d84>
    430c:	1025883a 	mov	r18,r2
    4310:	0039883a 	mov	fp,zero
    4314:	00800084 	movi	r2,2
    4318:	003fd306 	br	4268 <__alt_data_end+0xff004268>
    431c:	07000b44 	movi	fp,45
    4320:	df002785 	stb	fp,158(sp)
    4324:	003a4006 	br	2c28 <__alt_data_end+0xff002c28>
    4328:	00c00b44 	movi	r3,45
    432c:	d8c02785 	stb	r3,158(sp)
    4330:	d8802a15 	stw	r2,168(sp)
    4334:	dc802b17 	ldw	r18,172(sp)
    4338:	d8002915 	stw	zero,164(sp)
    433c:	07000b44 	movi	fp,45
    4340:	003a8006 	br	2d44 <__alt_data_end+0xff002d44>
    4344:	04000074 	movhi	r16,1
    4348:	84015d04 	addi	r16,r16,1396
    434c:	003f4706 	br	406c <__alt_data_end+0xff00406c>
    4350:	d8c02d17 	ldw	r3,180(sp)
    4354:	d9002f17 	ldw	r4,188(sp)
    4358:	18800017 	ldw	r2,0(r3)
    435c:	18c00104 	addi	r3,r3,4
    4360:	d8c02d15 	stw	r3,180(sp)
    4364:	11000015 	stw	r4,0(r2)
    4368:	0038dd06 	br	26e0 <__alt_data_end+0xff0026e0>
    436c:	dd802617 	ldw	r22,152(sp)
    4370:	00bfff44 	movi	r2,-3
    4374:	b0801c16 	blt	r22,r2,43e8 <___vfprintf_internal_r+0x1de8>
    4378:	d9402917 	ldw	r5,164(sp)
    437c:	2d801a16 	blt	r5,r22,43e8 <___vfprintf_internal_r+0x1de8>
    4380:	dd803215 	stw	r22,200(sp)
    4384:	003e8906 	br	3dac <__alt_data_end+0xff003dac>
    4388:	01000074 	movhi	r4,1
    438c:	21016a84 	addi	r4,r4,1450
    4390:	d9002b15 	stw	r4,172(sp)
    4394:	003c9106 	br	35dc <__alt_data_end+0xff0035dc>
    4398:	e005883a 	mov	r2,fp
    439c:	003e7906 	br	3d84 <__alt_data_end+0xff003d84>
    43a0:	d9402917 	ldw	r5,164(sp)
    43a4:	df002783 	ldbu	fp,158(sp)
    43a8:	dcc02d15 	stw	r19,180(sp)
    43ac:	d9402a15 	stw	r5,168(sp)
    43b0:	d9402e15 	stw	r5,184(sp)
    43b4:	d8002915 	stw	zero,164(sp)
    43b8:	d8003215 	stw	zero,200(sp)
    43bc:	003a5d06 	br	2d34 <__alt_data_end+0xff002d34>
    43c0:	9080004c 	andi	r2,r18,1
    43c4:	0039883a 	mov	fp,zero
    43c8:	10000426 	beq	r2,zero,43dc <___vfprintf_internal_r+0x1ddc>
    43cc:	00800c04 	movi	r2,48
    43d0:	dc001dc4 	addi	r16,sp,119
    43d4:	d8801dc5 	stb	r2,119(sp)
    43d8:	003b8006 	br	31dc <__alt_data_end+0xff0031dc>
    43dc:	d8002e15 	stw	zero,184(sp)
    43e0:	dc001e04 	addi	r16,sp,120
    43e4:	003a4d06 	br	2d1c <__alt_data_end+0xff002d1c>
    43e8:	8c7fff84 	addi	r17,r17,-2
    43ec:	b5bfffc4 	addi	r22,r22,-1
    43f0:	dd802615 	stw	r22,152(sp)
    43f4:	dc4022c5 	stb	r17,139(sp)
    43f8:	b000bf16 	blt	r22,zero,46f8 <___vfprintf_internal_r+0x20f8>
    43fc:	00800ac4 	movi	r2,43
    4400:	d8802305 	stb	r2,140(sp)
    4404:	00800244 	movi	r2,9
    4408:	15807016 	blt	r2,r22,45cc <___vfprintf_internal_r+0x1fcc>
    440c:	00800c04 	movi	r2,48
    4410:	b5800c04 	addi	r22,r22,48
    4414:	d8802345 	stb	r2,141(sp)
    4418:	dd802385 	stb	r22,142(sp)
    441c:	d88023c4 	addi	r2,sp,143
    4420:	df0022c4 	addi	fp,sp,139
    4424:	d8c03317 	ldw	r3,204(sp)
    4428:	1739c83a 	sub	fp,r2,fp
    442c:	d9003317 	ldw	r4,204(sp)
    4430:	e0c7883a 	add	r3,fp,r3
    4434:	df003a15 	stw	fp,232(sp)
    4438:	d8c02e15 	stw	r3,184(sp)
    443c:	00800044 	movi	r2,1
    4440:	1100b30e 	bge	r2,r4,4710 <___vfprintf_internal_r+0x2110>
    4444:	d8c02e17 	ldw	r3,184(sp)
    4448:	18c00044 	addi	r3,r3,1
    444c:	d8c02e15 	stw	r3,184(sp)
    4450:	1805883a 	mov	r2,r3
    4454:	1800ac16 	blt	r3,zero,4708 <___vfprintf_internal_r+0x2108>
    4458:	d8003215 	stw	zero,200(sp)
    445c:	003e5d06 	br	3dd4 <__alt_data_end+0xff003dd4>
    4460:	d9002c17 	ldw	r4,176(sp)
    4464:	d9801e04 	addi	r6,sp,120
    4468:	b80b883a 	mov	r5,r23
    446c:	000939c0 	call	939c <__sprint_r>
    4470:	1039651e 	bne	r2,zero,2a08 <__alt_data_end+0xff002a08>
    4474:	dc402617 	ldw	r17,152(sp)
    4478:	d8c02017 	ldw	r3,128(sp)
    447c:	d8801f17 	ldw	r2,124(sp)
    4480:	da000404 	addi	r8,sp,16
    4484:	003ed606 	br	3fe0 <__alt_data_end+0xff003fe0>
    4488:	582b883a 	mov	r21,r11
    448c:	d8002915 	stw	zero,164(sp)
    4490:	0038bd06 	br	2788 <__alt_data_end+0xff002788>
    4494:	d8802917 	ldw	r2,164(sp)
    4498:	103e071e 	bne	r2,zero,3cb8 <__alt_data_end+0xff003cb8>
    449c:	dc002915 	stw	r16,164(sp)
    44a0:	003e0506 	br	3cb8 <__alt_data_end+0xff003cb8>
    44a4:	d9002917 	ldw	r4,164(sp)
    44a8:	20c00044 	addi	r3,r4,1
    44ac:	003e0f06 	br	3cec <__alt_data_end+0xff003cec>
    44b0:	01400184 	movi	r5,6
    44b4:	d9402915 	stw	r5,164(sp)
    44b8:	003dff06 	br	3cb8 <__alt_data_end+0xff003cb8>
    44bc:	d8802104 	addi	r2,sp,132
    44c0:	d8800315 	stw	r2,12(sp)
    44c4:	d8802504 	addi	r2,sp,148
    44c8:	d8800215 	stw	r2,8(sp)
    44cc:	d8802604 	addi	r2,sp,152
    44d0:	d8800115 	stw	r2,4(sp)
    44d4:	d8802917 	ldw	r2,164(sp)
    44d8:	d9403617 	ldw	r5,216(sp)
    44dc:	d9002c17 	ldw	r4,176(sp)
    44e0:	d8800015 	stw	r2,0(sp)
    44e4:	01c000c4 	movi	r7,3
    44e8:	980d883a 	mov	r6,r19
    44ec:	da003d15 	stw	r8,244(sp)
    44f0:	0004c240 	call	4c24 <_dtoa_r>
    44f4:	d8c02917 	ldw	r3,164(sp)
    44f8:	da003d17 	ldw	r8,244(sp)
    44fc:	1021883a 	mov	r16,r2
    4500:	10f9883a 	add	fp,r2,r3
    4504:	81000007 	ldb	r4,0(r16)
    4508:	00800c04 	movi	r2,48
    450c:	20805e26 	beq	r4,r2,4688 <___vfprintf_internal_r+0x2088>
    4510:	d8c02617 	ldw	r3,152(sp)
    4514:	e0f9883a 	add	fp,fp,r3
    4518:	003e0a06 	br	3d44 <__alt_data_end+0xff003d44>
    451c:	00c00b44 	movi	r3,45
    4520:	24e0003c 	xorhi	r19,r4,32768
    4524:	d8c02a05 	stb	r3,168(sp)
    4528:	003de906 	br	3cd0 <__alt_data_end+0xff003cd0>
    452c:	d8c03217 	ldw	r3,200(sp)
    4530:	00c07a0e 	bge	zero,r3,471c <___vfprintf_internal_r+0x211c>
    4534:	00800044 	movi	r2,1
    4538:	d9003317 	ldw	r4,204(sp)
    453c:	1105883a 	add	r2,r2,r4
    4540:	d8802e15 	stw	r2,184(sp)
    4544:	10004e16 	blt	r2,zero,4680 <___vfprintf_internal_r+0x2080>
    4548:	044019c4 	movi	r17,103
    454c:	003e2106 	br	3dd4 <__alt_data_end+0xff003dd4>
    4550:	d9002917 	ldw	r4,164(sp)
    4554:	d8802104 	addi	r2,sp,132
    4558:	d8800315 	stw	r2,12(sp)
    455c:	d9000015 	stw	r4,0(sp)
    4560:	d8802504 	addi	r2,sp,148
    4564:	d9403617 	ldw	r5,216(sp)
    4568:	d9002c17 	ldw	r4,176(sp)
    456c:	d8800215 	stw	r2,8(sp)
    4570:	d8802604 	addi	r2,sp,152
    4574:	d8800115 	stw	r2,4(sp)
    4578:	01c000c4 	movi	r7,3
    457c:	980d883a 	mov	r6,r19
    4580:	da003d15 	stw	r8,244(sp)
    4584:	0004c240 	call	4c24 <_dtoa_r>
    4588:	d8c02917 	ldw	r3,164(sp)
    458c:	da003d17 	ldw	r8,244(sp)
    4590:	1021883a 	mov	r16,r2
    4594:	00801184 	movi	r2,70
    4598:	80f9883a 	add	fp,r16,r3
    459c:	88bfd926 	beq	r17,r2,4504 <__alt_data_end+0xff004504>
    45a0:	003de806 	br	3d44 <__alt_data_end+0xff003d44>
    45a4:	d9002917 	ldw	r4,164(sp)
    45a8:	00c04d0e 	bge	zero,r3,46e0 <___vfprintf_internal_r+0x20e0>
    45ac:	2000441e 	bne	r4,zero,46c0 <___vfprintf_internal_r+0x20c0>
    45b0:	9480004c 	andi	r18,r18,1
    45b4:	9000421e 	bne	r18,zero,46c0 <___vfprintf_internal_r+0x20c0>
    45b8:	1805883a 	mov	r2,r3
    45bc:	18007016 	blt	r3,zero,4780 <___vfprintf_internal_r+0x2180>
    45c0:	d8c03217 	ldw	r3,200(sp)
    45c4:	d8c02e15 	stw	r3,184(sp)
    45c8:	003e0206 	br	3dd4 <__alt_data_end+0xff003dd4>
    45cc:	df0022c4 	addi	fp,sp,139
    45d0:	dc002915 	stw	r16,164(sp)
    45d4:	4027883a 	mov	r19,r8
    45d8:	e021883a 	mov	r16,fp
    45dc:	b009883a 	mov	r4,r22
    45e0:	01400284 	movi	r5,10
    45e4:	000bd500 	call	bd50 <__modsi3>
    45e8:	10800c04 	addi	r2,r2,48
    45ec:	843fffc4 	addi	r16,r16,-1
    45f0:	b009883a 	mov	r4,r22
    45f4:	01400284 	movi	r5,10
    45f8:	80800005 	stb	r2,0(r16)
    45fc:	000bccc0 	call	bccc <__divsi3>
    4600:	102d883a 	mov	r22,r2
    4604:	00800244 	movi	r2,9
    4608:	15bff416 	blt	r2,r22,45dc <__alt_data_end+0xff0045dc>
    460c:	9811883a 	mov	r8,r19
    4610:	b0800c04 	addi	r2,r22,48
    4614:	8027883a 	mov	r19,r16
    4618:	997fffc4 	addi	r5,r19,-1
    461c:	98bfffc5 	stb	r2,-1(r19)
    4620:	dc002917 	ldw	r16,164(sp)
    4624:	2f006a2e 	bgeu	r5,fp,47d0 <___vfprintf_internal_r+0x21d0>
    4628:	d9c02384 	addi	r7,sp,142
    462c:	3ccfc83a 	sub	r7,r7,r19
    4630:	d9002344 	addi	r4,sp,141
    4634:	e1cf883a 	add	r7,fp,r7
    4638:	00000106 	br	4640 <___vfprintf_internal_r+0x2040>
    463c:	28800003 	ldbu	r2,0(r5)
    4640:	20800005 	stb	r2,0(r4)
    4644:	21000044 	addi	r4,r4,1
    4648:	29400044 	addi	r5,r5,1
    464c:	393ffb1e 	bne	r7,r4,463c <__alt_data_end+0xff00463c>
    4650:	d8802304 	addi	r2,sp,140
    4654:	14c5c83a 	sub	r2,r2,r19
    4658:	d8c02344 	addi	r3,sp,141
    465c:	1885883a 	add	r2,r3,r2
    4660:	003f7006 	br	4424 <__alt_data_end+0xff004424>
    4664:	0005883a 	mov	r2,zero
    4668:	003f0f06 	br	42a8 <__alt_data_end+0xff0042a8>
    466c:	d8c03217 	ldw	r3,200(sp)
    4670:	18c00044 	addi	r3,r3,1
    4674:	d8c02e15 	stw	r3,184(sp)
    4678:	1805883a 	mov	r2,r3
    467c:	183fb20e 	bge	r3,zero,4548 <__alt_data_end+0xff004548>
    4680:	0005883a 	mov	r2,zero
    4684:	003fb006 	br	4548 <__alt_data_end+0xff004548>
    4688:	d9003617 	ldw	r4,216(sp)
    468c:	000d883a 	mov	r6,zero
    4690:	000f883a 	mov	r7,zero
    4694:	980b883a 	mov	r5,r19
    4698:	d8c03c15 	stw	r3,240(sp)
    469c:	da003d15 	stw	r8,244(sp)
    46a0:	000d0140 	call	d014 <__eqdf2>
    46a4:	d8c03c17 	ldw	r3,240(sp)
    46a8:	da003d17 	ldw	r8,244(sp)
    46ac:	103f9826 	beq	r2,zero,4510 <__alt_data_end+0xff004510>
    46b0:	00800044 	movi	r2,1
    46b4:	10c7c83a 	sub	r3,r2,r3
    46b8:	d8c02615 	stw	r3,152(sp)
    46bc:	003f9506 	br	4514 <__alt_data_end+0xff004514>
    46c0:	d9002917 	ldw	r4,164(sp)
    46c4:	d8c03217 	ldw	r3,200(sp)
    46c8:	20800044 	addi	r2,r4,1
    46cc:	1885883a 	add	r2,r3,r2
    46d0:	d8802e15 	stw	r2,184(sp)
    46d4:	103dbf0e 	bge	r2,zero,3dd4 <__alt_data_end+0xff003dd4>
    46d8:	0005883a 	mov	r2,zero
    46dc:	003dbd06 	br	3dd4 <__alt_data_end+0xff003dd4>
    46e0:	2000211e 	bne	r4,zero,4768 <___vfprintf_internal_r+0x2168>
    46e4:	9480004c 	andi	r18,r18,1
    46e8:	90001f1e 	bne	r18,zero,4768 <___vfprintf_internal_r+0x2168>
    46ec:	00800044 	movi	r2,1
    46f0:	d8802e15 	stw	r2,184(sp)
    46f4:	003db706 	br	3dd4 <__alt_data_end+0xff003dd4>
    46f8:	00800b44 	movi	r2,45
    46fc:	05adc83a 	sub	r22,zero,r22
    4700:	d8802305 	stb	r2,140(sp)
    4704:	003f3f06 	br	4404 <__alt_data_end+0xff004404>
    4708:	0005883a 	mov	r2,zero
    470c:	003f5206 	br	4458 <__alt_data_end+0xff004458>
    4710:	90a4703a 	and	r18,r18,r2
    4714:	903f4e26 	beq	r18,zero,4450 <__alt_data_end+0xff004450>
    4718:	003f4a06 	br	4444 <__alt_data_end+0xff004444>
    471c:	00800084 	movi	r2,2
    4720:	10c5c83a 	sub	r2,r2,r3
    4724:	003f8406 	br	4538 <__alt_data_end+0xff004538>
    4728:	d8802d17 	ldw	r2,180(sp)
    472c:	d9002d17 	ldw	r4,180(sp)
    4730:	ac400043 	ldbu	r17,1(r21)
    4734:	10800017 	ldw	r2,0(r2)
    4738:	582b883a 	mov	r21,r11
    473c:	d8802915 	stw	r2,164(sp)
    4740:	20800104 	addi	r2,r4,4
    4744:	d9002917 	ldw	r4,164(sp)
    4748:	d8802d15 	stw	r2,180(sp)
    474c:	203e7a0e 	bge	r4,zero,4138 <__alt_data_end+0xff004138>
    4750:	8c403fcc 	andi	r17,r17,255
    4754:	00bfffc4 	movi	r2,-1
    4758:	8c40201c 	xori	r17,r17,128
    475c:	d8802915 	stw	r2,164(sp)
    4760:	8c7fe004 	addi	r17,r17,-128
    4764:	00380706 	br	2784 <__alt_data_end+0xff002784>
    4768:	d8c02917 	ldw	r3,164(sp)
    476c:	18c00084 	addi	r3,r3,2
    4770:	d8c02e15 	stw	r3,184(sp)
    4774:	1805883a 	mov	r2,r3
    4778:	183d960e 	bge	r3,zero,3dd4 <__alt_data_end+0xff003dd4>
    477c:	003fd606 	br	46d8 <__alt_data_end+0xff0046d8>
    4780:	0005883a 	mov	r2,zero
    4784:	003f8e06 	br	45c0 <__alt_data_end+0xff0045c0>
    4788:	9080004c 	andi	r2,r18,1
    478c:	103f811e 	bne	r2,zero,4594 <__alt_data_end+0xff004594>
    4790:	d8802117 	ldw	r2,132(sp)
    4794:	1405c83a 	sub	r2,r2,r16
    4798:	d8803315 	stw	r2,204(sp)
    479c:	b47ef326 	beq	r22,r17,436c <__alt_data_end+0xff00436c>
    47a0:	dd802617 	ldw	r22,152(sp)
    47a4:	003f1106 	br	43ec <__alt_data_end+0xff0043ec>
    47a8:	d9c02785 	stb	r7,158(sp)
    47ac:	00390406 	br	2bc0 <__alt_data_end+0xff002bc0>
    47b0:	d9c02785 	stb	r7,158(sp)
    47b4:	0038d306 	br	2b04 <__alt_data_end+0xff002b04>
    47b8:	d9c02785 	stb	r7,158(sp)
    47bc:	003a6106 	br	3144 <__alt_data_end+0xff003144>
    47c0:	d9c02785 	stb	r7,158(sp)
    47c4:	003af806 	br	33a8 <__alt_data_end+0xff0033a8>
    47c8:	0005883a 	mov	r2,zero
    47cc:	003d7e06 	br	3dc8 <__alt_data_end+0xff003dc8>
    47d0:	d8802344 	addi	r2,sp,141
    47d4:	003f1306 	br	4424 <__alt_data_end+0xff004424>
    47d8:	d9c02785 	stb	r7,158(sp)
    47dc:	00392306 	br	2c6c <__alt_data_end+0xff002c6c>
    47e0:	d9c02785 	stb	r7,158(sp)
    47e4:	003aa906 	br	328c <__alt_data_end+0xff00328c>
    47e8:	d9c02785 	stb	r7,158(sp)
    47ec:	003a3d06 	br	30e4 <__alt_data_end+0xff0030e4>
    47f0:	d9c02785 	stb	r7,158(sp)
    47f4:	003aca06 	br	3320 <__alt_data_end+0xff003320>

000047f8 <__vfprintf_internal>:
    47f8:	00800074 	movhi	r2,1
    47fc:	1088c304 	addi	r2,r2,8972
    4800:	300f883a 	mov	r7,r6
    4804:	280d883a 	mov	r6,r5
    4808:	200b883a 	mov	r5,r4
    480c:	11000017 	ldw	r4,0(r2)
    4810:	00026001 	jmpi	2600 <___vfprintf_internal_r>

00004814 <__sbprintf>:
    4814:	2880030b 	ldhu	r2,12(r5)
    4818:	2ac01917 	ldw	r11,100(r5)
    481c:	2a80038b 	ldhu	r10,14(r5)
    4820:	2a400717 	ldw	r9,28(r5)
    4824:	2a000917 	ldw	r8,36(r5)
    4828:	defee204 	addi	sp,sp,-1144
    482c:	00c10004 	movi	r3,1024
    4830:	dc011a15 	stw	r16,1128(sp)
    4834:	10bfff4c 	andi	r2,r2,65533
    4838:	2821883a 	mov	r16,r5
    483c:	d8cb883a 	add	r5,sp,r3
    4840:	dc811c15 	stw	r18,1136(sp)
    4844:	dc411b15 	stw	r17,1132(sp)
    4848:	dfc11d15 	stw	ra,1140(sp)
    484c:	2025883a 	mov	r18,r4
    4850:	d881030d 	sth	r2,1036(sp)
    4854:	dac11915 	stw	r11,1124(sp)
    4858:	da81038d 	sth	r10,1038(sp)
    485c:	da410715 	stw	r9,1052(sp)
    4860:	da010915 	stw	r8,1060(sp)
    4864:	dec10015 	stw	sp,1024(sp)
    4868:	dec10415 	stw	sp,1040(sp)
    486c:	d8c10215 	stw	r3,1032(sp)
    4870:	d8c10515 	stw	r3,1044(sp)
    4874:	d8010615 	stw	zero,1048(sp)
    4878:	00026000 	call	2600 <___vfprintf_internal_r>
    487c:	1023883a 	mov	r17,r2
    4880:	10000416 	blt	r2,zero,4894 <__sbprintf+0x80>
    4884:	d9410004 	addi	r5,sp,1024
    4888:	9009883a 	mov	r4,r18
    488c:	00064c80 	call	64c8 <_fflush_r>
    4890:	10000d1e 	bne	r2,zero,48c8 <__sbprintf+0xb4>
    4894:	d881030b 	ldhu	r2,1036(sp)
    4898:	1080100c 	andi	r2,r2,64
    489c:	10000326 	beq	r2,zero,48ac <__sbprintf+0x98>
    48a0:	8080030b 	ldhu	r2,12(r16)
    48a4:	10801014 	ori	r2,r2,64
    48a8:	8080030d 	sth	r2,12(r16)
    48ac:	8805883a 	mov	r2,r17
    48b0:	dfc11d17 	ldw	ra,1140(sp)
    48b4:	dc811c17 	ldw	r18,1136(sp)
    48b8:	dc411b17 	ldw	r17,1132(sp)
    48bc:	dc011a17 	ldw	r16,1128(sp)
    48c0:	dec11e04 	addi	sp,sp,1144
    48c4:	f800283a 	ret
    48c8:	047fffc4 	movi	r17,-1
    48cc:	003ff106 	br	4894 <__alt_data_end+0xff004894>

000048d0 <__swsetup_r>:
    48d0:	00800074 	movhi	r2,1
    48d4:	defffd04 	addi	sp,sp,-12
    48d8:	1088c304 	addi	r2,r2,8972
    48dc:	dc400115 	stw	r17,4(sp)
    48e0:	2023883a 	mov	r17,r4
    48e4:	11000017 	ldw	r4,0(r2)
    48e8:	dc000015 	stw	r16,0(sp)
    48ec:	dfc00215 	stw	ra,8(sp)
    48f0:	2821883a 	mov	r16,r5
    48f4:	20000226 	beq	r4,zero,4900 <__swsetup_r+0x30>
    48f8:	20800e17 	ldw	r2,56(r4)
    48fc:	10003126 	beq	r2,zero,49c4 <__swsetup_r+0xf4>
    4900:	8080030b 	ldhu	r2,12(r16)
    4904:	10c0020c 	andi	r3,r2,8
    4908:	1009883a 	mov	r4,r2
    490c:	18000f26 	beq	r3,zero,494c <__swsetup_r+0x7c>
    4910:	80c00417 	ldw	r3,16(r16)
    4914:	18001526 	beq	r3,zero,496c <__swsetup_r+0x9c>
    4918:	1100004c 	andi	r4,r2,1
    491c:	20001c1e 	bne	r4,zero,4990 <__swsetup_r+0xc0>
    4920:	1080008c 	andi	r2,r2,2
    4924:	1000291e 	bne	r2,zero,49cc <__swsetup_r+0xfc>
    4928:	80800517 	ldw	r2,20(r16)
    492c:	80800215 	stw	r2,8(r16)
    4930:	18001c26 	beq	r3,zero,49a4 <__swsetup_r+0xd4>
    4934:	0005883a 	mov	r2,zero
    4938:	dfc00217 	ldw	ra,8(sp)
    493c:	dc400117 	ldw	r17,4(sp)
    4940:	dc000017 	ldw	r16,0(sp)
    4944:	dec00304 	addi	sp,sp,12
    4948:	f800283a 	ret
    494c:	2080040c 	andi	r2,r4,16
    4950:	10002e26 	beq	r2,zero,4a0c <__swsetup_r+0x13c>
    4954:	2080010c 	andi	r2,r4,4
    4958:	10001e1e 	bne	r2,zero,49d4 <__swsetup_r+0x104>
    495c:	80c00417 	ldw	r3,16(r16)
    4960:	20800214 	ori	r2,r4,8
    4964:	8080030d 	sth	r2,12(r16)
    4968:	183feb1e 	bne	r3,zero,4918 <__alt_data_end+0xff004918>
    496c:	1100a00c 	andi	r4,r2,640
    4970:	01408004 	movi	r5,512
    4974:	217fe826 	beq	r4,r5,4918 <__alt_data_end+0xff004918>
    4978:	800b883a 	mov	r5,r16
    497c:	8809883a 	mov	r4,r17
    4980:	00074480 	call	7448 <__smakebuf_r>
    4984:	8080030b 	ldhu	r2,12(r16)
    4988:	80c00417 	ldw	r3,16(r16)
    498c:	003fe206 	br	4918 <__alt_data_end+0xff004918>
    4990:	80800517 	ldw	r2,20(r16)
    4994:	80000215 	stw	zero,8(r16)
    4998:	0085c83a 	sub	r2,zero,r2
    499c:	80800615 	stw	r2,24(r16)
    49a0:	183fe41e 	bne	r3,zero,4934 <__alt_data_end+0xff004934>
    49a4:	80c0030b 	ldhu	r3,12(r16)
    49a8:	0005883a 	mov	r2,zero
    49ac:	1900200c 	andi	r4,r3,128
    49b0:	203fe126 	beq	r4,zero,4938 <__alt_data_end+0xff004938>
    49b4:	18c01014 	ori	r3,r3,64
    49b8:	80c0030d 	sth	r3,12(r16)
    49bc:	00bfffc4 	movi	r2,-1
    49c0:	003fdd06 	br	4938 <__alt_data_end+0xff004938>
    49c4:	00068a40 	call	68a4 <__sinit>
    49c8:	003fcd06 	br	4900 <__alt_data_end+0xff004900>
    49cc:	0005883a 	mov	r2,zero
    49d0:	003fd606 	br	492c <__alt_data_end+0xff00492c>
    49d4:	81400c17 	ldw	r5,48(r16)
    49d8:	28000626 	beq	r5,zero,49f4 <__swsetup_r+0x124>
    49dc:	80801004 	addi	r2,r16,64
    49e0:	28800326 	beq	r5,r2,49f0 <__swsetup_r+0x120>
    49e4:	8809883a 	mov	r4,r17
    49e8:	0006a180 	call	6a18 <_free_r>
    49ec:	8100030b 	ldhu	r4,12(r16)
    49f0:	80000c15 	stw	zero,48(r16)
    49f4:	80c00417 	ldw	r3,16(r16)
    49f8:	00bff6c4 	movi	r2,-37
    49fc:	1108703a 	and	r4,r2,r4
    4a00:	80000115 	stw	zero,4(r16)
    4a04:	80c00015 	stw	r3,0(r16)
    4a08:	003fd506 	br	4960 <__alt_data_end+0xff004960>
    4a0c:	00800244 	movi	r2,9
    4a10:	88800015 	stw	r2,0(r17)
    4a14:	20801014 	ori	r2,r4,64
    4a18:	8080030d 	sth	r2,12(r16)
    4a1c:	00bfffc4 	movi	r2,-1
    4a20:	003fc506 	br	4938 <__alt_data_end+0xff004938>

00004a24 <quorem>:
    4a24:	defff704 	addi	sp,sp,-36
    4a28:	dc800215 	stw	r18,8(sp)
    4a2c:	20800417 	ldw	r2,16(r4)
    4a30:	2c800417 	ldw	r18,16(r5)
    4a34:	dfc00815 	stw	ra,32(sp)
    4a38:	ddc00715 	stw	r23,28(sp)
    4a3c:	dd800615 	stw	r22,24(sp)
    4a40:	dd400515 	stw	r21,20(sp)
    4a44:	dd000415 	stw	r20,16(sp)
    4a48:	dcc00315 	stw	r19,12(sp)
    4a4c:	dc400115 	stw	r17,4(sp)
    4a50:	dc000015 	stw	r16,0(sp)
    4a54:	14807116 	blt	r2,r18,4c1c <quorem+0x1f8>
    4a58:	94bfffc4 	addi	r18,r18,-1
    4a5c:	94ad883a 	add	r22,r18,r18
    4a60:	b5ad883a 	add	r22,r22,r22
    4a64:	2c400504 	addi	r17,r5,20
    4a68:	8da9883a 	add	r20,r17,r22
    4a6c:	25400504 	addi	r21,r4,20
    4a70:	282f883a 	mov	r23,r5
    4a74:	adad883a 	add	r22,r21,r22
    4a78:	a1400017 	ldw	r5,0(r20)
    4a7c:	2021883a 	mov	r16,r4
    4a80:	b1000017 	ldw	r4,0(r22)
    4a84:	29400044 	addi	r5,r5,1
    4a88:	000bdc40 	call	bdc4 <__udivsi3>
    4a8c:	1027883a 	mov	r19,r2
    4a90:	10002c26 	beq	r2,zero,4b44 <quorem+0x120>
    4a94:	a813883a 	mov	r9,r21
    4a98:	880b883a 	mov	r5,r17
    4a9c:	0009883a 	mov	r4,zero
    4aa0:	000d883a 	mov	r6,zero
    4aa4:	2a000017 	ldw	r8,0(r5)
    4aa8:	49c00017 	ldw	r7,0(r9)
    4aac:	29400104 	addi	r5,r5,4
    4ab0:	40bfffcc 	andi	r2,r8,65535
    4ab4:	14c5383a 	mul	r2,r2,r19
    4ab8:	4010d43a 	srli	r8,r8,16
    4abc:	38ffffcc 	andi	r3,r7,65535
    4ac0:	1105883a 	add	r2,r2,r4
    4ac4:	1008d43a 	srli	r4,r2,16
    4ac8:	44d1383a 	mul	r8,r8,r19
    4acc:	198d883a 	add	r6,r3,r6
    4ad0:	10ffffcc 	andi	r3,r2,65535
    4ad4:	30c7c83a 	sub	r3,r6,r3
    4ad8:	380ed43a 	srli	r7,r7,16
    4adc:	4105883a 	add	r2,r8,r4
    4ae0:	180dd43a 	srai	r6,r3,16
    4ae4:	113fffcc 	andi	r4,r2,65535
    4ae8:	390fc83a 	sub	r7,r7,r4
    4aec:	398d883a 	add	r6,r7,r6
    4af0:	300e943a 	slli	r7,r6,16
    4af4:	18ffffcc 	andi	r3,r3,65535
    4af8:	1008d43a 	srli	r4,r2,16
    4afc:	38ceb03a 	or	r7,r7,r3
    4b00:	49c00015 	stw	r7,0(r9)
    4b04:	300dd43a 	srai	r6,r6,16
    4b08:	4a400104 	addi	r9,r9,4
    4b0c:	a17fe52e 	bgeu	r20,r5,4aa4 <__alt_data_end+0xff004aa4>
    4b10:	b0800017 	ldw	r2,0(r22)
    4b14:	10000b1e 	bne	r2,zero,4b44 <quorem+0x120>
    4b18:	b0bfff04 	addi	r2,r22,-4
    4b1c:	a880082e 	bgeu	r21,r2,4b40 <quorem+0x11c>
    4b20:	b0ffff17 	ldw	r3,-4(r22)
    4b24:	18000326 	beq	r3,zero,4b34 <quorem+0x110>
    4b28:	00000506 	br	4b40 <quorem+0x11c>
    4b2c:	10c00017 	ldw	r3,0(r2)
    4b30:	1800031e 	bne	r3,zero,4b40 <quorem+0x11c>
    4b34:	10bfff04 	addi	r2,r2,-4
    4b38:	94bfffc4 	addi	r18,r18,-1
    4b3c:	a8bffb36 	bltu	r21,r2,4b2c <__alt_data_end+0xff004b2c>
    4b40:	84800415 	stw	r18,16(r16)
    4b44:	b80b883a 	mov	r5,r23
    4b48:	8009883a 	mov	r4,r16
    4b4c:	000837c0 	call	837c <__mcmp>
    4b50:	10002616 	blt	r2,zero,4bec <quorem+0x1c8>
    4b54:	9cc00044 	addi	r19,r19,1
    4b58:	a805883a 	mov	r2,r21
    4b5c:	000b883a 	mov	r5,zero
    4b60:	11000017 	ldw	r4,0(r2)
    4b64:	89800017 	ldw	r6,0(r17)
    4b68:	10800104 	addi	r2,r2,4
    4b6c:	20ffffcc 	andi	r3,r4,65535
    4b70:	194b883a 	add	r5,r3,r5
    4b74:	30ffffcc 	andi	r3,r6,65535
    4b78:	28c7c83a 	sub	r3,r5,r3
    4b7c:	300cd43a 	srli	r6,r6,16
    4b80:	2008d43a 	srli	r4,r4,16
    4b84:	180bd43a 	srai	r5,r3,16
    4b88:	18ffffcc 	andi	r3,r3,65535
    4b8c:	2189c83a 	sub	r4,r4,r6
    4b90:	2149883a 	add	r4,r4,r5
    4b94:	200c943a 	slli	r6,r4,16
    4b98:	8c400104 	addi	r17,r17,4
    4b9c:	200bd43a 	srai	r5,r4,16
    4ba0:	30c6b03a 	or	r3,r6,r3
    4ba4:	10ffff15 	stw	r3,-4(r2)
    4ba8:	a47fed2e 	bgeu	r20,r17,4b60 <__alt_data_end+0xff004b60>
    4bac:	9485883a 	add	r2,r18,r18
    4bb0:	1085883a 	add	r2,r2,r2
    4bb4:	a887883a 	add	r3,r21,r2
    4bb8:	18800017 	ldw	r2,0(r3)
    4bbc:	10000b1e 	bne	r2,zero,4bec <quorem+0x1c8>
    4bc0:	18bfff04 	addi	r2,r3,-4
    4bc4:	a880082e 	bgeu	r21,r2,4be8 <quorem+0x1c4>
    4bc8:	18ffff17 	ldw	r3,-4(r3)
    4bcc:	18000326 	beq	r3,zero,4bdc <quorem+0x1b8>
    4bd0:	00000506 	br	4be8 <quorem+0x1c4>
    4bd4:	10c00017 	ldw	r3,0(r2)
    4bd8:	1800031e 	bne	r3,zero,4be8 <quorem+0x1c4>
    4bdc:	10bfff04 	addi	r2,r2,-4
    4be0:	94bfffc4 	addi	r18,r18,-1
    4be4:	a8bffb36 	bltu	r21,r2,4bd4 <__alt_data_end+0xff004bd4>
    4be8:	84800415 	stw	r18,16(r16)
    4bec:	9805883a 	mov	r2,r19
    4bf0:	dfc00817 	ldw	ra,32(sp)
    4bf4:	ddc00717 	ldw	r23,28(sp)
    4bf8:	dd800617 	ldw	r22,24(sp)
    4bfc:	dd400517 	ldw	r21,20(sp)
    4c00:	dd000417 	ldw	r20,16(sp)
    4c04:	dcc00317 	ldw	r19,12(sp)
    4c08:	dc800217 	ldw	r18,8(sp)
    4c0c:	dc400117 	ldw	r17,4(sp)
    4c10:	dc000017 	ldw	r16,0(sp)
    4c14:	dec00904 	addi	sp,sp,36
    4c18:	f800283a 	ret
    4c1c:	0005883a 	mov	r2,zero
    4c20:	003ff306 	br	4bf0 <__alt_data_end+0xff004bf0>

00004c24 <_dtoa_r>:
    4c24:	20801017 	ldw	r2,64(r4)
    4c28:	deffde04 	addi	sp,sp,-136
    4c2c:	df002015 	stw	fp,128(sp)
    4c30:	dcc01b15 	stw	r19,108(sp)
    4c34:	dc801a15 	stw	r18,104(sp)
    4c38:	dc401915 	stw	r17,100(sp)
    4c3c:	dc001815 	stw	r16,96(sp)
    4c40:	dfc02115 	stw	ra,132(sp)
    4c44:	ddc01f15 	stw	r23,124(sp)
    4c48:	dd801e15 	stw	r22,120(sp)
    4c4c:	dd401d15 	stw	r21,116(sp)
    4c50:	dd001c15 	stw	r20,112(sp)
    4c54:	d9c00315 	stw	r7,12(sp)
    4c58:	2039883a 	mov	fp,r4
    4c5c:	3023883a 	mov	r17,r6
    4c60:	2825883a 	mov	r18,r5
    4c64:	dc002417 	ldw	r16,144(sp)
    4c68:	3027883a 	mov	r19,r6
    4c6c:	10000826 	beq	r2,zero,4c90 <_dtoa_r+0x6c>
    4c70:	21801117 	ldw	r6,68(r4)
    4c74:	00c00044 	movi	r3,1
    4c78:	100b883a 	mov	r5,r2
    4c7c:	1986983a 	sll	r3,r3,r6
    4c80:	11800115 	stw	r6,4(r2)
    4c84:	10c00215 	stw	r3,8(r2)
    4c88:	0007b5c0 	call	7b5c <_Bfree>
    4c8c:	e0001015 	stw	zero,64(fp)
    4c90:	88002e16 	blt	r17,zero,4d4c <_dtoa_r+0x128>
    4c94:	80000015 	stw	zero,0(r16)
    4c98:	889ffc2c 	andhi	r2,r17,32752
    4c9c:	00dffc34 	movhi	r3,32752
    4ca0:	10c01c26 	beq	r2,r3,4d14 <_dtoa_r+0xf0>
    4ca4:	000d883a 	mov	r6,zero
    4ca8:	000f883a 	mov	r7,zero
    4cac:	9009883a 	mov	r4,r18
    4cb0:	980b883a 	mov	r5,r19
    4cb4:	000d0140 	call	d014 <__eqdf2>
    4cb8:	10002b1e 	bne	r2,zero,4d68 <_dtoa_r+0x144>
    4cbc:	d9c02317 	ldw	r7,140(sp)
    4cc0:	00800044 	movi	r2,1
    4cc4:	38800015 	stw	r2,0(r7)
    4cc8:	d8802517 	ldw	r2,148(sp)
    4ccc:	10019e26 	beq	r2,zero,5348 <_dtoa_r+0x724>
    4cd0:	d8c02517 	ldw	r3,148(sp)
    4cd4:	00800074 	movhi	r2,1
    4cd8:	10816a44 	addi	r2,r2,1449
    4cdc:	18800015 	stw	r2,0(r3)
    4ce0:	10bfffc4 	addi	r2,r2,-1
    4ce4:	dfc02117 	ldw	ra,132(sp)
    4ce8:	df002017 	ldw	fp,128(sp)
    4cec:	ddc01f17 	ldw	r23,124(sp)
    4cf0:	dd801e17 	ldw	r22,120(sp)
    4cf4:	dd401d17 	ldw	r21,116(sp)
    4cf8:	dd001c17 	ldw	r20,112(sp)
    4cfc:	dcc01b17 	ldw	r19,108(sp)
    4d00:	dc801a17 	ldw	r18,104(sp)
    4d04:	dc401917 	ldw	r17,100(sp)
    4d08:	dc001817 	ldw	r16,96(sp)
    4d0c:	dec02204 	addi	sp,sp,136
    4d10:	f800283a 	ret
    4d14:	d8c02317 	ldw	r3,140(sp)
    4d18:	0089c3c4 	movi	r2,9999
    4d1c:	18800015 	stw	r2,0(r3)
    4d20:	90017726 	beq	r18,zero,5300 <_dtoa_r+0x6dc>
    4d24:	00800074 	movhi	r2,1
    4d28:	10817604 	addi	r2,r2,1496
    4d2c:	d9002517 	ldw	r4,148(sp)
    4d30:	203fec26 	beq	r4,zero,4ce4 <__alt_data_end+0xff004ce4>
    4d34:	10c000c7 	ldb	r3,3(r2)
    4d38:	1801781e 	bne	r3,zero,531c <_dtoa_r+0x6f8>
    4d3c:	10c000c4 	addi	r3,r2,3
    4d40:	d9802517 	ldw	r6,148(sp)
    4d44:	30c00015 	stw	r3,0(r6)
    4d48:	003fe606 	br	4ce4 <__alt_data_end+0xff004ce4>
    4d4c:	04e00034 	movhi	r19,32768
    4d50:	9cffffc4 	addi	r19,r19,-1
    4d54:	00800044 	movi	r2,1
    4d58:	8ce6703a 	and	r19,r17,r19
    4d5c:	80800015 	stw	r2,0(r16)
    4d60:	9823883a 	mov	r17,r19
    4d64:	003fcc06 	br	4c98 <__alt_data_end+0xff004c98>
    4d68:	d8800204 	addi	r2,sp,8
    4d6c:	d8800015 	stw	r2,0(sp)
    4d70:	d9c00104 	addi	r7,sp,4
    4d74:	900b883a 	mov	r5,r18
    4d78:	980d883a 	mov	r6,r19
    4d7c:	e009883a 	mov	r4,fp
    4d80:	8820d53a 	srli	r16,r17,20
    4d84:	00087480 	call	8748 <__d2b>
    4d88:	d8800915 	stw	r2,36(sp)
    4d8c:	8001651e 	bne	r16,zero,5324 <_dtoa_r+0x700>
    4d90:	dd800217 	ldw	r22,8(sp)
    4d94:	dc000117 	ldw	r16,4(sp)
    4d98:	00800804 	movi	r2,32
    4d9c:	b421883a 	add	r16,r22,r16
    4da0:	80c10c84 	addi	r3,r16,1074
    4da4:	10c2d10e 	bge	r2,r3,58ec <_dtoa_r+0xcc8>
    4da8:	00801004 	movi	r2,64
    4dac:	81010484 	addi	r4,r16,1042
    4db0:	10c7c83a 	sub	r3,r2,r3
    4db4:	9108d83a 	srl	r4,r18,r4
    4db8:	88e2983a 	sll	r17,r17,r3
    4dbc:	2448b03a 	or	r4,r4,r17
    4dc0:	000e3dc0 	call	e3dc <__floatunsidf>
    4dc4:	017f8434 	movhi	r5,65040
    4dc8:	01800044 	movi	r6,1
    4dcc:	1009883a 	mov	r4,r2
    4dd0:	194b883a 	add	r5,r3,r5
    4dd4:	843fffc4 	addi	r16,r16,-1
    4dd8:	d9801115 	stw	r6,68(sp)
    4ddc:	000d883a 	mov	r6,zero
    4de0:	01cffe34 	movhi	r7,16376
    4de4:	000d9840 	call	d984 <__subdf3>
    4de8:	0198dbf4 	movhi	r6,25455
    4dec:	01cff4f4 	movhi	r7,16339
    4df0:	3190d844 	addi	r6,r6,17249
    4df4:	39e1e9c4 	addi	r7,r7,-30809
    4df8:	1009883a 	mov	r4,r2
    4dfc:	180b883a 	mov	r5,r3
    4e00:	000d26c0 	call	d26c <__muldf3>
    4e04:	01a2d874 	movhi	r6,35681
    4e08:	01cff1f4 	movhi	r7,16327
    4e0c:	31b22cc4 	addi	r6,r6,-14157
    4e10:	39e28a04 	addi	r7,r7,-30168
    4e14:	180b883a 	mov	r5,r3
    4e18:	1009883a 	mov	r4,r2
    4e1c:	000be800 	call	be80 <__adddf3>
    4e20:	8009883a 	mov	r4,r16
    4e24:	1029883a 	mov	r20,r2
    4e28:	1823883a 	mov	r17,r3
    4e2c:	000e3000 	call	e300 <__floatsidf>
    4e30:	019427f4 	movhi	r6,20639
    4e34:	01cff4f4 	movhi	r7,16339
    4e38:	319e7ec4 	addi	r6,r6,31227
    4e3c:	39d104c4 	addi	r7,r7,17427
    4e40:	1009883a 	mov	r4,r2
    4e44:	180b883a 	mov	r5,r3
    4e48:	000d26c0 	call	d26c <__muldf3>
    4e4c:	100d883a 	mov	r6,r2
    4e50:	180f883a 	mov	r7,r3
    4e54:	a009883a 	mov	r4,r20
    4e58:	880b883a 	mov	r5,r17
    4e5c:	000be800 	call	be80 <__adddf3>
    4e60:	1009883a 	mov	r4,r2
    4e64:	180b883a 	mov	r5,r3
    4e68:	1029883a 	mov	r20,r2
    4e6c:	1823883a 	mov	r17,r3
    4e70:	000e2800 	call	e280 <__fixdfsi>
    4e74:	000d883a 	mov	r6,zero
    4e78:	000f883a 	mov	r7,zero
    4e7c:	a009883a 	mov	r4,r20
    4e80:	880b883a 	mov	r5,r17
    4e84:	d8800515 	stw	r2,20(sp)
    4e88:	000d1780 	call	d178 <__ledf2>
    4e8c:	10028716 	blt	r2,zero,58ac <_dtoa_r+0xc88>
    4e90:	d8c00517 	ldw	r3,20(sp)
    4e94:	00800584 	movi	r2,22
    4e98:	10c27536 	bltu	r2,r3,5870 <_dtoa_r+0xc4c>
    4e9c:	180490fa 	slli	r2,r3,3
    4ea0:	00c00074 	movhi	r3,1
    4ea4:	18c19204 	addi	r3,r3,1608
    4ea8:	1885883a 	add	r2,r3,r2
    4eac:	11000017 	ldw	r4,0(r2)
    4eb0:	11400117 	ldw	r5,4(r2)
    4eb4:	900d883a 	mov	r6,r18
    4eb8:	980f883a 	mov	r7,r19
    4ebc:	000d09c0 	call	d09c <__gedf2>
    4ec0:	00828d0e 	bge	zero,r2,58f8 <_dtoa_r+0xcd4>
    4ec4:	d9000517 	ldw	r4,20(sp)
    4ec8:	d8000e15 	stw	zero,56(sp)
    4ecc:	213fffc4 	addi	r4,r4,-1
    4ed0:	d9000515 	stw	r4,20(sp)
    4ed4:	b42dc83a 	sub	r22,r22,r16
    4ed8:	b5bfffc4 	addi	r22,r22,-1
    4edc:	b0026f16 	blt	r22,zero,589c <_dtoa_r+0xc78>
    4ee0:	d8000815 	stw	zero,32(sp)
    4ee4:	d9c00517 	ldw	r7,20(sp)
    4ee8:	38026416 	blt	r7,zero,587c <_dtoa_r+0xc58>
    4eec:	b1ed883a 	add	r22,r22,r7
    4ef0:	d9c00d15 	stw	r7,52(sp)
    4ef4:	d8000a15 	stw	zero,40(sp)
    4ef8:	d9800317 	ldw	r6,12(sp)
    4efc:	00800244 	movi	r2,9
    4f00:	11811436 	bltu	r2,r6,5354 <_dtoa_r+0x730>
    4f04:	00800144 	movi	r2,5
    4f08:	1184e10e 	bge	r2,r6,6290 <_dtoa_r+0x166c>
    4f0c:	31bfff04 	addi	r6,r6,-4
    4f10:	d9800315 	stw	r6,12(sp)
    4f14:	0023883a 	mov	r17,zero
    4f18:	d9800317 	ldw	r6,12(sp)
    4f1c:	008000c4 	movi	r2,3
    4f20:	30836726 	beq	r6,r2,5cc0 <_dtoa_r+0x109c>
    4f24:	1183410e 	bge	r2,r6,5c2c <_dtoa_r+0x1008>
    4f28:	d9c00317 	ldw	r7,12(sp)
    4f2c:	00800104 	movi	r2,4
    4f30:	38827c26 	beq	r7,r2,5924 <_dtoa_r+0xd00>
    4f34:	00800144 	movi	r2,5
    4f38:	3884c41e 	bne	r7,r2,624c <_dtoa_r+0x1628>
    4f3c:	00800044 	movi	r2,1
    4f40:	d8800b15 	stw	r2,44(sp)
    4f44:	d8c00517 	ldw	r3,20(sp)
    4f48:	d9002217 	ldw	r4,136(sp)
    4f4c:	1907883a 	add	r3,r3,r4
    4f50:	19800044 	addi	r6,r3,1
    4f54:	d8c00c15 	stw	r3,48(sp)
    4f58:	d9800615 	stw	r6,24(sp)
    4f5c:	0183a40e 	bge	zero,r6,5df0 <_dtoa_r+0x11cc>
    4f60:	d9800617 	ldw	r6,24(sp)
    4f64:	3021883a 	mov	r16,r6
    4f68:	e0001115 	stw	zero,68(fp)
    4f6c:	008005c4 	movi	r2,23
    4f70:	1184c92e 	bgeu	r2,r6,6298 <_dtoa_r+0x1674>
    4f74:	00c00044 	movi	r3,1
    4f78:	00800104 	movi	r2,4
    4f7c:	1085883a 	add	r2,r2,r2
    4f80:	11000504 	addi	r4,r2,20
    4f84:	180b883a 	mov	r5,r3
    4f88:	18c00044 	addi	r3,r3,1
    4f8c:	313ffb2e 	bgeu	r6,r4,4f7c <__alt_data_end+0xff004f7c>
    4f90:	e1401115 	stw	r5,68(fp)
    4f94:	e009883a 	mov	r4,fp
    4f98:	0007ab40 	call	7ab4 <_Balloc>
    4f9c:	d8800715 	stw	r2,28(sp)
    4fa0:	e0801015 	stw	r2,64(fp)
    4fa4:	00800384 	movi	r2,14
    4fa8:	1400f736 	bltu	r2,r16,5388 <_dtoa_r+0x764>
    4fac:	8800f626 	beq	r17,zero,5388 <_dtoa_r+0x764>
    4fb0:	d9c00517 	ldw	r7,20(sp)
    4fb4:	01c39a0e 	bge	zero,r7,5e20 <_dtoa_r+0x11fc>
    4fb8:	388003cc 	andi	r2,r7,15
    4fbc:	100490fa 	slli	r2,r2,3
    4fc0:	382bd13a 	srai	r21,r7,4
    4fc4:	00c00074 	movhi	r3,1
    4fc8:	18c19204 	addi	r3,r3,1608
    4fcc:	1885883a 	add	r2,r3,r2
    4fd0:	a8c0040c 	andi	r3,r21,16
    4fd4:	12400017 	ldw	r9,0(r2)
    4fd8:	12000117 	ldw	r8,4(r2)
    4fdc:	18037926 	beq	r3,zero,5dc4 <_dtoa_r+0x11a0>
    4fe0:	00800074 	movhi	r2,1
    4fe4:	10818804 	addi	r2,r2,1568
    4fe8:	11800817 	ldw	r6,32(r2)
    4fec:	11c00917 	ldw	r7,36(r2)
    4ff0:	9009883a 	mov	r4,r18
    4ff4:	980b883a 	mov	r5,r19
    4ff8:	da001715 	stw	r8,92(sp)
    4ffc:	da401615 	stw	r9,88(sp)
    5000:	000c72c0 	call	c72c <__divdf3>
    5004:	da001717 	ldw	r8,92(sp)
    5008:	da401617 	ldw	r9,88(sp)
    500c:	ad4003cc 	andi	r21,r21,15
    5010:	040000c4 	movi	r16,3
    5014:	1023883a 	mov	r17,r2
    5018:	1829883a 	mov	r20,r3
    501c:	a8001126 	beq	r21,zero,5064 <_dtoa_r+0x440>
    5020:	05c00074 	movhi	r23,1
    5024:	bdc18804 	addi	r23,r23,1568
    5028:	4805883a 	mov	r2,r9
    502c:	4007883a 	mov	r3,r8
    5030:	a980004c 	andi	r6,r21,1
    5034:	1009883a 	mov	r4,r2
    5038:	a82bd07a 	srai	r21,r21,1
    503c:	180b883a 	mov	r5,r3
    5040:	30000426 	beq	r6,zero,5054 <_dtoa_r+0x430>
    5044:	b9800017 	ldw	r6,0(r23)
    5048:	b9c00117 	ldw	r7,4(r23)
    504c:	84000044 	addi	r16,r16,1
    5050:	000d26c0 	call	d26c <__muldf3>
    5054:	bdc00204 	addi	r23,r23,8
    5058:	a83ff51e 	bne	r21,zero,5030 <__alt_data_end+0xff005030>
    505c:	1013883a 	mov	r9,r2
    5060:	1811883a 	mov	r8,r3
    5064:	480d883a 	mov	r6,r9
    5068:	400f883a 	mov	r7,r8
    506c:	8809883a 	mov	r4,r17
    5070:	a00b883a 	mov	r5,r20
    5074:	000c72c0 	call	c72c <__divdf3>
    5078:	d8800f15 	stw	r2,60(sp)
    507c:	d8c01015 	stw	r3,64(sp)
    5080:	d8c00e17 	ldw	r3,56(sp)
    5084:	18000626 	beq	r3,zero,50a0 <_dtoa_r+0x47c>
    5088:	d9000f17 	ldw	r4,60(sp)
    508c:	d9401017 	ldw	r5,64(sp)
    5090:	000d883a 	mov	r6,zero
    5094:	01cffc34 	movhi	r7,16368
    5098:	000d1780 	call	d178 <__ledf2>
    509c:	10040b16 	blt	r2,zero,60cc <_dtoa_r+0x14a8>
    50a0:	8009883a 	mov	r4,r16
    50a4:	000e3000 	call	e300 <__floatsidf>
    50a8:	d9800f17 	ldw	r6,60(sp)
    50ac:	d9c01017 	ldw	r7,64(sp)
    50b0:	1009883a 	mov	r4,r2
    50b4:	180b883a 	mov	r5,r3
    50b8:	000d26c0 	call	d26c <__muldf3>
    50bc:	000d883a 	mov	r6,zero
    50c0:	01d00734 	movhi	r7,16412
    50c4:	1009883a 	mov	r4,r2
    50c8:	180b883a 	mov	r5,r3
    50cc:	000be800 	call	be80 <__adddf3>
    50d0:	1021883a 	mov	r16,r2
    50d4:	d8800617 	ldw	r2,24(sp)
    50d8:	047f3034 	movhi	r17,64704
    50dc:	1c63883a 	add	r17,r3,r17
    50e0:	10031826 	beq	r2,zero,5d44 <_dtoa_r+0x1120>
    50e4:	d8c00517 	ldw	r3,20(sp)
    50e8:	db000617 	ldw	r12,24(sp)
    50ec:	d8c01315 	stw	r3,76(sp)
    50f0:	d9000b17 	ldw	r4,44(sp)
    50f4:	20038f26 	beq	r4,zero,5f34 <_dtoa_r+0x1310>
    50f8:	60bfffc4 	addi	r2,r12,-1
    50fc:	100490fa 	slli	r2,r2,3
    5100:	00c00074 	movhi	r3,1
    5104:	18c19204 	addi	r3,r3,1608
    5108:	1885883a 	add	r2,r3,r2
    510c:	11800017 	ldw	r6,0(r2)
    5110:	11c00117 	ldw	r7,4(r2)
    5114:	d8800717 	ldw	r2,28(sp)
    5118:	0009883a 	mov	r4,zero
    511c:	014ff834 	movhi	r5,16352
    5120:	db001615 	stw	r12,88(sp)
    5124:	15c00044 	addi	r23,r2,1
    5128:	000c72c0 	call	c72c <__divdf3>
    512c:	800d883a 	mov	r6,r16
    5130:	880f883a 	mov	r7,r17
    5134:	1009883a 	mov	r4,r2
    5138:	180b883a 	mov	r5,r3
    513c:	000d9840 	call	d984 <__subdf3>
    5140:	d9401017 	ldw	r5,64(sp)
    5144:	d9000f17 	ldw	r4,60(sp)
    5148:	102b883a 	mov	r21,r2
    514c:	d8c01215 	stw	r3,72(sp)
    5150:	000e2800 	call	e280 <__fixdfsi>
    5154:	1009883a 	mov	r4,r2
    5158:	1029883a 	mov	r20,r2
    515c:	000e3000 	call	e300 <__floatsidf>
    5160:	d9000f17 	ldw	r4,60(sp)
    5164:	d9401017 	ldw	r5,64(sp)
    5168:	100d883a 	mov	r6,r2
    516c:	180f883a 	mov	r7,r3
    5170:	000d9840 	call	d984 <__subdf3>
    5174:	1823883a 	mov	r17,r3
    5178:	d8c00717 	ldw	r3,28(sp)
    517c:	d9401217 	ldw	r5,72(sp)
    5180:	a2000c04 	addi	r8,r20,48
    5184:	1021883a 	mov	r16,r2
    5188:	1a000005 	stb	r8,0(r3)
    518c:	800d883a 	mov	r6,r16
    5190:	880f883a 	mov	r7,r17
    5194:	a809883a 	mov	r4,r21
    5198:	4029883a 	mov	r20,r8
    519c:	000d09c0 	call	d09c <__gedf2>
    51a0:	00841d16 	blt	zero,r2,6218 <_dtoa_r+0x15f4>
    51a4:	800d883a 	mov	r6,r16
    51a8:	880f883a 	mov	r7,r17
    51ac:	0009883a 	mov	r4,zero
    51b0:	014ffc34 	movhi	r5,16368
    51b4:	000d9840 	call	d984 <__subdf3>
    51b8:	d9401217 	ldw	r5,72(sp)
    51bc:	100d883a 	mov	r6,r2
    51c0:	180f883a 	mov	r7,r3
    51c4:	a809883a 	mov	r4,r21
    51c8:	000d09c0 	call	d09c <__gedf2>
    51cc:	db001617 	ldw	r12,88(sp)
    51d0:	00840e16 	blt	zero,r2,620c <_dtoa_r+0x15e8>
    51d4:	00800044 	movi	r2,1
    51d8:	13006b0e 	bge	r2,r12,5388 <_dtoa_r+0x764>
    51dc:	d9000717 	ldw	r4,28(sp)
    51e0:	dd800f15 	stw	r22,60(sp)
    51e4:	dcc01015 	stw	r19,64(sp)
    51e8:	2319883a 	add	r12,r4,r12
    51ec:	dcc01217 	ldw	r19,72(sp)
    51f0:	602d883a 	mov	r22,r12
    51f4:	dc801215 	stw	r18,72(sp)
    51f8:	b825883a 	mov	r18,r23
    51fc:	00000906 	br	5224 <_dtoa_r+0x600>
    5200:	000d9840 	call	d984 <__subdf3>
    5204:	a80d883a 	mov	r6,r21
    5208:	980f883a 	mov	r7,r19
    520c:	1009883a 	mov	r4,r2
    5210:	180b883a 	mov	r5,r3
    5214:	000d1780 	call	d178 <__ledf2>
    5218:	1003e816 	blt	r2,zero,61bc <_dtoa_r+0x1598>
    521c:	b825883a 	mov	r18,r23
    5220:	bd83e926 	beq	r23,r22,61c8 <_dtoa_r+0x15a4>
    5224:	a809883a 	mov	r4,r21
    5228:	980b883a 	mov	r5,r19
    522c:	000d883a 	mov	r6,zero
    5230:	01d00934 	movhi	r7,16420
    5234:	000d26c0 	call	d26c <__muldf3>
    5238:	000d883a 	mov	r6,zero
    523c:	01d00934 	movhi	r7,16420
    5240:	8009883a 	mov	r4,r16
    5244:	880b883a 	mov	r5,r17
    5248:	102b883a 	mov	r21,r2
    524c:	1827883a 	mov	r19,r3
    5250:	000d26c0 	call	d26c <__muldf3>
    5254:	180b883a 	mov	r5,r3
    5258:	1009883a 	mov	r4,r2
    525c:	1821883a 	mov	r16,r3
    5260:	1023883a 	mov	r17,r2
    5264:	000e2800 	call	e280 <__fixdfsi>
    5268:	1009883a 	mov	r4,r2
    526c:	1029883a 	mov	r20,r2
    5270:	000e3000 	call	e300 <__floatsidf>
    5274:	8809883a 	mov	r4,r17
    5278:	800b883a 	mov	r5,r16
    527c:	100d883a 	mov	r6,r2
    5280:	180f883a 	mov	r7,r3
    5284:	000d9840 	call	d984 <__subdf3>
    5288:	a5000c04 	addi	r20,r20,48
    528c:	a80d883a 	mov	r6,r21
    5290:	980f883a 	mov	r7,r19
    5294:	1009883a 	mov	r4,r2
    5298:	180b883a 	mov	r5,r3
    529c:	95000005 	stb	r20,0(r18)
    52a0:	1021883a 	mov	r16,r2
    52a4:	1823883a 	mov	r17,r3
    52a8:	000d1780 	call	d178 <__ledf2>
    52ac:	bdc00044 	addi	r23,r23,1
    52b0:	800d883a 	mov	r6,r16
    52b4:	880f883a 	mov	r7,r17
    52b8:	0009883a 	mov	r4,zero
    52bc:	014ffc34 	movhi	r5,16368
    52c0:	103fcf0e 	bge	r2,zero,5200 <__alt_data_end+0xff005200>
    52c4:	d8c01317 	ldw	r3,76(sp)
    52c8:	d8c00515 	stw	r3,20(sp)
    52cc:	d9400917 	ldw	r5,36(sp)
    52d0:	e009883a 	mov	r4,fp
    52d4:	0007b5c0 	call	7b5c <_Bfree>
    52d8:	d9000517 	ldw	r4,20(sp)
    52dc:	d9802317 	ldw	r6,140(sp)
    52e0:	d9c02517 	ldw	r7,148(sp)
    52e4:	b8000005 	stb	zero,0(r23)
    52e8:	20800044 	addi	r2,r4,1
    52ec:	30800015 	stw	r2,0(r6)
    52f0:	3802aa26 	beq	r7,zero,5d9c <_dtoa_r+0x1178>
    52f4:	3dc00015 	stw	r23,0(r7)
    52f8:	d8800717 	ldw	r2,28(sp)
    52fc:	003e7906 	br	4ce4 <__alt_data_end+0xff004ce4>
    5300:	00800434 	movhi	r2,16
    5304:	10bfffc4 	addi	r2,r2,-1
    5308:	88a2703a 	and	r17,r17,r2
    530c:	883e851e 	bne	r17,zero,4d24 <__alt_data_end+0xff004d24>
    5310:	00800074 	movhi	r2,1
    5314:	10817304 	addi	r2,r2,1484
    5318:	003e8406 	br	4d2c <__alt_data_end+0xff004d2c>
    531c:	10c00204 	addi	r3,r2,8
    5320:	003e8706 	br	4d40 <__alt_data_end+0xff004d40>
    5324:	01400434 	movhi	r5,16
    5328:	297fffc4 	addi	r5,r5,-1
    532c:	994a703a 	and	r5,r19,r5
    5330:	9009883a 	mov	r4,r18
    5334:	843f0044 	addi	r16,r16,-1023
    5338:	294ffc34 	orhi	r5,r5,16368
    533c:	dd800217 	ldw	r22,8(sp)
    5340:	d8001115 	stw	zero,68(sp)
    5344:	003ea506 	br	4ddc <__alt_data_end+0xff004ddc>
    5348:	00800074 	movhi	r2,1
    534c:	10816a04 	addi	r2,r2,1448
    5350:	003e6406 	br	4ce4 <__alt_data_end+0xff004ce4>
    5354:	e0001115 	stw	zero,68(fp)
    5358:	000b883a 	mov	r5,zero
    535c:	e009883a 	mov	r4,fp
    5360:	0007ab40 	call	7ab4 <_Balloc>
    5364:	01bfffc4 	movi	r6,-1
    5368:	01c00044 	movi	r7,1
    536c:	d8800715 	stw	r2,28(sp)
    5370:	d9800c15 	stw	r6,48(sp)
    5374:	e0801015 	stw	r2,64(fp)
    5378:	d8000315 	stw	zero,12(sp)
    537c:	d9c00b15 	stw	r7,44(sp)
    5380:	d9800615 	stw	r6,24(sp)
    5384:	d8002215 	stw	zero,136(sp)
    5388:	d8800117 	ldw	r2,4(sp)
    538c:	10008916 	blt	r2,zero,55b4 <_dtoa_r+0x990>
    5390:	d9000517 	ldw	r4,20(sp)
    5394:	00c00384 	movi	r3,14
    5398:	19008616 	blt	r3,r4,55b4 <_dtoa_r+0x990>
    539c:	200490fa 	slli	r2,r4,3
    53a0:	00c00074 	movhi	r3,1
    53a4:	d9802217 	ldw	r6,136(sp)
    53a8:	18c19204 	addi	r3,r3,1608
    53ac:	1885883a 	add	r2,r3,r2
    53b0:	14000017 	ldw	r16,0(r2)
    53b4:	14400117 	ldw	r17,4(r2)
    53b8:	30016316 	blt	r6,zero,5948 <_dtoa_r+0xd24>
    53bc:	800d883a 	mov	r6,r16
    53c0:	880f883a 	mov	r7,r17
    53c4:	9009883a 	mov	r4,r18
    53c8:	980b883a 	mov	r5,r19
    53cc:	000c72c0 	call	c72c <__divdf3>
    53d0:	180b883a 	mov	r5,r3
    53d4:	1009883a 	mov	r4,r2
    53d8:	000e2800 	call	e280 <__fixdfsi>
    53dc:	1009883a 	mov	r4,r2
    53e0:	102b883a 	mov	r21,r2
    53e4:	000e3000 	call	e300 <__floatsidf>
    53e8:	800d883a 	mov	r6,r16
    53ec:	880f883a 	mov	r7,r17
    53f0:	1009883a 	mov	r4,r2
    53f4:	180b883a 	mov	r5,r3
    53f8:	000d26c0 	call	d26c <__muldf3>
    53fc:	100d883a 	mov	r6,r2
    5400:	180f883a 	mov	r7,r3
    5404:	9009883a 	mov	r4,r18
    5408:	980b883a 	mov	r5,r19
    540c:	000d9840 	call	d984 <__subdf3>
    5410:	d9c00717 	ldw	r7,28(sp)
    5414:	1009883a 	mov	r4,r2
    5418:	a8800c04 	addi	r2,r21,48
    541c:	38800005 	stb	r2,0(r7)
    5420:	3dc00044 	addi	r23,r7,1
    5424:	d9c00617 	ldw	r7,24(sp)
    5428:	01800044 	movi	r6,1
    542c:	180b883a 	mov	r5,r3
    5430:	2005883a 	mov	r2,r4
    5434:	39803826 	beq	r7,r6,5518 <_dtoa_r+0x8f4>
    5438:	000d883a 	mov	r6,zero
    543c:	01d00934 	movhi	r7,16420
    5440:	000d26c0 	call	d26c <__muldf3>
    5444:	000d883a 	mov	r6,zero
    5448:	000f883a 	mov	r7,zero
    544c:	1009883a 	mov	r4,r2
    5450:	180b883a 	mov	r5,r3
    5454:	1025883a 	mov	r18,r2
    5458:	1827883a 	mov	r19,r3
    545c:	000d0140 	call	d014 <__eqdf2>
    5460:	103f9a26 	beq	r2,zero,52cc <__alt_data_end+0xff0052cc>
    5464:	d9c00617 	ldw	r7,24(sp)
    5468:	d8c00717 	ldw	r3,28(sp)
    546c:	b829883a 	mov	r20,r23
    5470:	38bfffc4 	addi	r2,r7,-1
    5474:	18ad883a 	add	r22,r3,r2
    5478:	00000a06 	br	54a4 <_dtoa_r+0x880>
    547c:	000d26c0 	call	d26c <__muldf3>
    5480:	000d883a 	mov	r6,zero
    5484:	000f883a 	mov	r7,zero
    5488:	1009883a 	mov	r4,r2
    548c:	180b883a 	mov	r5,r3
    5490:	1025883a 	mov	r18,r2
    5494:	1827883a 	mov	r19,r3
    5498:	b829883a 	mov	r20,r23
    549c:	000d0140 	call	d014 <__eqdf2>
    54a0:	103f8a26 	beq	r2,zero,52cc <__alt_data_end+0xff0052cc>
    54a4:	800d883a 	mov	r6,r16
    54a8:	880f883a 	mov	r7,r17
    54ac:	9009883a 	mov	r4,r18
    54b0:	980b883a 	mov	r5,r19
    54b4:	000c72c0 	call	c72c <__divdf3>
    54b8:	180b883a 	mov	r5,r3
    54bc:	1009883a 	mov	r4,r2
    54c0:	000e2800 	call	e280 <__fixdfsi>
    54c4:	1009883a 	mov	r4,r2
    54c8:	102b883a 	mov	r21,r2
    54cc:	000e3000 	call	e300 <__floatsidf>
    54d0:	800d883a 	mov	r6,r16
    54d4:	880f883a 	mov	r7,r17
    54d8:	1009883a 	mov	r4,r2
    54dc:	180b883a 	mov	r5,r3
    54e0:	000d26c0 	call	d26c <__muldf3>
    54e4:	100d883a 	mov	r6,r2
    54e8:	180f883a 	mov	r7,r3
    54ec:	9009883a 	mov	r4,r18
    54f0:	980b883a 	mov	r5,r19
    54f4:	000d9840 	call	d984 <__subdf3>
    54f8:	aa000c04 	addi	r8,r21,48
    54fc:	a2000005 	stb	r8,0(r20)
    5500:	000d883a 	mov	r6,zero
    5504:	01d00934 	movhi	r7,16420
    5508:	1009883a 	mov	r4,r2
    550c:	180b883a 	mov	r5,r3
    5510:	a5c00044 	addi	r23,r20,1
    5514:	b53fd91e 	bne	r22,r20,547c <__alt_data_end+0xff00547c>
    5518:	100d883a 	mov	r6,r2
    551c:	180f883a 	mov	r7,r3
    5520:	1009883a 	mov	r4,r2
    5524:	180b883a 	mov	r5,r3
    5528:	000be800 	call	be80 <__adddf3>
    552c:	100d883a 	mov	r6,r2
    5530:	180f883a 	mov	r7,r3
    5534:	8009883a 	mov	r4,r16
    5538:	880b883a 	mov	r5,r17
    553c:	1027883a 	mov	r19,r2
    5540:	1825883a 	mov	r18,r3
    5544:	000d1780 	call	d178 <__ledf2>
    5548:	10000816 	blt	r2,zero,556c <_dtoa_r+0x948>
    554c:	980d883a 	mov	r6,r19
    5550:	900f883a 	mov	r7,r18
    5554:	8009883a 	mov	r4,r16
    5558:	880b883a 	mov	r5,r17
    555c:	000d0140 	call	d014 <__eqdf2>
    5560:	103f5a1e 	bne	r2,zero,52cc <__alt_data_end+0xff0052cc>
    5564:	ad40004c 	andi	r21,r21,1
    5568:	a83f5826 	beq	r21,zero,52cc <__alt_data_end+0xff0052cc>
    556c:	bd3fffc3 	ldbu	r20,-1(r23)
    5570:	b8bfffc4 	addi	r2,r23,-1
    5574:	1007883a 	mov	r3,r2
    5578:	01400e44 	movi	r5,57
    557c:	d9800717 	ldw	r6,28(sp)
    5580:	00000506 	br	5598 <_dtoa_r+0x974>
    5584:	18ffffc4 	addi	r3,r3,-1
    5588:	11824726 	beq	r2,r6,5ea8 <_dtoa_r+0x1284>
    558c:	1d000003 	ldbu	r20,0(r3)
    5590:	102f883a 	mov	r23,r2
    5594:	10bfffc4 	addi	r2,r2,-1
    5598:	a1003fcc 	andi	r4,r20,255
    559c:	2100201c 	xori	r4,r4,128
    55a0:	213fe004 	addi	r4,r4,-128
    55a4:	217ff726 	beq	r4,r5,5584 <__alt_data_end+0xff005584>
    55a8:	a2000044 	addi	r8,r20,1
    55ac:	12000005 	stb	r8,0(r2)
    55b0:	003f4606 	br	52cc <__alt_data_end+0xff0052cc>
    55b4:	d9000b17 	ldw	r4,44(sp)
    55b8:	2000c826 	beq	r4,zero,58dc <_dtoa_r+0xcb8>
    55bc:	d9800317 	ldw	r6,12(sp)
    55c0:	00c00044 	movi	r3,1
    55c4:	1980f90e 	bge	r3,r6,59ac <_dtoa_r+0xd88>
    55c8:	d8800617 	ldw	r2,24(sp)
    55cc:	d8c00a17 	ldw	r3,40(sp)
    55d0:	157fffc4 	addi	r21,r2,-1
    55d4:	1d41f316 	blt	r3,r21,5da4 <_dtoa_r+0x1180>
    55d8:	1d6bc83a 	sub	r21,r3,r21
    55dc:	d9c00617 	ldw	r7,24(sp)
    55e0:	3802aa16 	blt	r7,zero,608c <_dtoa_r+0x1468>
    55e4:	dd000817 	ldw	r20,32(sp)
    55e8:	d8800617 	ldw	r2,24(sp)
    55ec:	d8c00817 	ldw	r3,32(sp)
    55f0:	01400044 	movi	r5,1
    55f4:	e009883a 	mov	r4,fp
    55f8:	1887883a 	add	r3,r3,r2
    55fc:	d8c00815 	stw	r3,32(sp)
    5600:	b0ad883a 	add	r22,r22,r2
    5604:	0007ec00 	call	7ec0 <__i2b>
    5608:	1023883a 	mov	r17,r2
    560c:	a0000826 	beq	r20,zero,5630 <_dtoa_r+0xa0c>
    5610:	0580070e 	bge	zero,r22,5630 <_dtoa_r+0xa0c>
    5614:	a005883a 	mov	r2,r20
    5618:	b500b916 	blt	r22,r20,5900 <_dtoa_r+0xcdc>
    561c:	d9000817 	ldw	r4,32(sp)
    5620:	a0a9c83a 	sub	r20,r20,r2
    5624:	b0adc83a 	sub	r22,r22,r2
    5628:	2089c83a 	sub	r4,r4,r2
    562c:	d9000815 	stw	r4,32(sp)
    5630:	d9800a17 	ldw	r6,40(sp)
    5634:	0181810e 	bge	zero,r6,5c3c <_dtoa_r+0x1018>
    5638:	d9c00b17 	ldw	r7,44(sp)
    563c:	3800b326 	beq	r7,zero,590c <_dtoa_r+0xce8>
    5640:	a800b226 	beq	r21,zero,590c <_dtoa_r+0xce8>
    5644:	880b883a 	mov	r5,r17
    5648:	a80d883a 	mov	r6,r21
    564c:	e009883a 	mov	r4,fp
    5650:	00080f40 	call	80f4 <__pow5mult>
    5654:	d9800917 	ldw	r6,36(sp)
    5658:	100b883a 	mov	r5,r2
    565c:	e009883a 	mov	r4,fp
    5660:	1023883a 	mov	r17,r2
    5664:	0007efc0 	call	7efc <__multiply>
    5668:	1021883a 	mov	r16,r2
    566c:	d8800a17 	ldw	r2,40(sp)
    5670:	d9400917 	ldw	r5,36(sp)
    5674:	e009883a 	mov	r4,fp
    5678:	1545c83a 	sub	r2,r2,r21
    567c:	d8800a15 	stw	r2,40(sp)
    5680:	0007b5c0 	call	7b5c <_Bfree>
    5684:	d8c00a17 	ldw	r3,40(sp)
    5688:	18009f1e 	bne	r3,zero,5908 <_dtoa_r+0xce4>
    568c:	05c00044 	movi	r23,1
    5690:	e009883a 	mov	r4,fp
    5694:	b80b883a 	mov	r5,r23
    5698:	0007ec00 	call	7ec0 <__i2b>
    569c:	d9000d17 	ldw	r4,52(sp)
    56a0:	102b883a 	mov	r21,r2
    56a4:	2000ce26 	beq	r4,zero,59e0 <_dtoa_r+0xdbc>
    56a8:	200d883a 	mov	r6,r4
    56ac:	100b883a 	mov	r5,r2
    56b0:	e009883a 	mov	r4,fp
    56b4:	00080f40 	call	80f4 <__pow5mult>
    56b8:	d9800317 	ldw	r6,12(sp)
    56bc:	102b883a 	mov	r21,r2
    56c0:	b981810e 	bge	r23,r6,5cc8 <_dtoa_r+0x10a4>
    56c4:	0027883a 	mov	r19,zero
    56c8:	a8800417 	ldw	r2,16(r21)
    56cc:	05c00804 	movi	r23,32
    56d0:	10800104 	addi	r2,r2,4
    56d4:	1085883a 	add	r2,r2,r2
    56d8:	1085883a 	add	r2,r2,r2
    56dc:	a885883a 	add	r2,r21,r2
    56e0:	11000017 	ldw	r4,0(r2)
    56e4:	0007da80 	call	7da8 <__hi0bits>
    56e8:	b885c83a 	sub	r2,r23,r2
    56ec:	1585883a 	add	r2,r2,r22
    56f0:	108007cc 	andi	r2,r2,31
    56f4:	1000b326 	beq	r2,zero,59c4 <_dtoa_r+0xda0>
    56f8:	00c00804 	movi	r3,32
    56fc:	1887c83a 	sub	r3,r3,r2
    5700:	01000104 	movi	r4,4
    5704:	20c2cd0e 	bge	r4,r3,623c <_dtoa_r+0x1618>
    5708:	00c00704 	movi	r3,28
    570c:	1885c83a 	sub	r2,r3,r2
    5710:	d8c00817 	ldw	r3,32(sp)
    5714:	a0a9883a 	add	r20,r20,r2
    5718:	b0ad883a 	add	r22,r22,r2
    571c:	1887883a 	add	r3,r3,r2
    5720:	d8c00815 	stw	r3,32(sp)
    5724:	d9800817 	ldw	r6,32(sp)
    5728:	0180040e 	bge	zero,r6,573c <_dtoa_r+0xb18>
    572c:	800b883a 	mov	r5,r16
    5730:	e009883a 	mov	r4,fp
    5734:	00082340 	call	8234 <__lshift>
    5738:	1021883a 	mov	r16,r2
    573c:	0580050e 	bge	zero,r22,5754 <_dtoa_r+0xb30>
    5740:	a80b883a 	mov	r5,r21
    5744:	b00d883a 	mov	r6,r22
    5748:	e009883a 	mov	r4,fp
    574c:	00082340 	call	8234 <__lshift>
    5750:	102b883a 	mov	r21,r2
    5754:	d9c00e17 	ldw	r7,56(sp)
    5758:	3801211e 	bne	r7,zero,5be0 <_dtoa_r+0xfbc>
    575c:	d9800617 	ldw	r6,24(sp)
    5760:	0181380e 	bge	zero,r6,5c44 <_dtoa_r+0x1020>
    5764:	d8c00b17 	ldw	r3,44(sp)
    5768:	1800ab1e 	bne	r3,zero,5a18 <_dtoa_r+0xdf4>
    576c:	dc800717 	ldw	r18,28(sp)
    5770:	dcc00617 	ldw	r19,24(sp)
    5774:	9029883a 	mov	r20,r18
    5778:	00000206 	br	5784 <_dtoa_r+0xb60>
    577c:	0007b840 	call	7b84 <__multadd>
    5780:	1021883a 	mov	r16,r2
    5784:	a80b883a 	mov	r5,r21
    5788:	8009883a 	mov	r4,r16
    578c:	0004a240 	call	4a24 <quorem>
    5790:	10800c04 	addi	r2,r2,48
    5794:	90800005 	stb	r2,0(r18)
    5798:	94800044 	addi	r18,r18,1
    579c:	9507c83a 	sub	r3,r18,r20
    57a0:	000f883a 	mov	r7,zero
    57a4:	01800284 	movi	r6,10
    57a8:	800b883a 	mov	r5,r16
    57ac:	e009883a 	mov	r4,fp
    57b0:	1cfff216 	blt	r3,r19,577c <__alt_data_end+0xff00577c>
    57b4:	1011883a 	mov	r8,r2
    57b8:	d8800617 	ldw	r2,24(sp)
    57bc:	0082370e 	bge	zero,r2,609c <_dtoa_r+0x1478>
    57c0:	d9000717 	ldw	r4,28(sp)
    57c4:	0025883a 	mov	r18,zero
    57c8:	20af883a 	add	r23,r4,r2
    57cc:	01800044 	movi	r6,1
    57d0:	800b883a 	mov	r5,r16
    57d4:	e009883a 	mov	r4,fp
    57d8:	da001715 	stw	r8,92(sp)
    57dc:	00082340 	call	8234 <__lshift>
    57e0:	a80b883a 	mov	r5,r21
    57e4:	1009883a 	mov	r4,r2
    57e8:	d8800915 	stw	r2,36(sp)
    57ec:	000837c0 	call	837c <__mcmp>
    57f0:	da001717 	ldw	r8,92(sp)
    57f4:	0081800e 	bge	zero,r2,5df8 <_dtoa_r+0x11d4>
    57f8:	b93fffc3 	ldbu	r4,-1(r23)
    57fc:	b8bfffc4 	addi	r2,r23,-1
    5800:	1007883a 	mov	r3,r2
    5804:	01800e44 	movi	r6,57
    5808:	d9c00717 	ldw	r7,28(sp)
    580c:	00000506 	br	5824 <_dtoa_r+0xc00>
    5810:	18ffffc4 	addi	r3,r3,-1
    5814:	11c12326 	beq	r2,r7,5ca4 <_dtoa_r+0x1080>
    5818:	19000003 	ldbu	r4,0(r3)
    581c:	102f883a 	mov	r23,r2
    5820:	10bfffc4 	addi	r2,r2,-1
    5824:	21403fcc 	andi	r5,r4,255
    5828:	2940201c 	xori	r5,r5,128
    582c:	297fe004 	addi	r5,r5,-128
    5830:	29bff726 	beq	r5,r6,5810 <__alt_data_end+0xff005810>
    5834:	21000044 	addi	r4,r4,1
    5838:	11000005 	stb	r4,0(r2)
    583c:	a80b883a 	mov	r5,r21
    5840:	e009883a 	mov	r4,fp
    5844:	0007b5c0 	call	7b5c <_Bfree>
    5848:	883ea026 	beq	r17,zero,52cc <__alt_data_end+0xff0052cc>
    584c:	90000426 	beq	r18,zero,5860 <_dtoa_r+0xc3c>
    5850:	94400326 	beq	r18,r17,5860 <_dtoa_r+0xc3c>
    5854:	900b883a 	mov	r5,r18
    5858:	e009883a 	mov	r4,fp
    585c:	0007b5c0 	call	7b5c <_Bfree>
    5860:	880b883a 	mov	r5,r17
    5864:	e009883a 	mov	r4,fp
    5868:	0007b5c0 	call	7b5c <_Bfree>
    586c:	003e9706 	br	52cc <__alt_data_end+0xff0052cc>
    5870:	01800044 	movi	r6,1
    5874:	d9800e15 	stw	r6,56(sp)
    5878:	003d9606 	br	4ed4 <__alt_data_end+0xff004ed4>
    587c:	d8800817 	ldw	r2,32(sp)
    5880:	d8c00517 	ldw	r3,20(sp)
    5884:	d8000d15 	stw	zero,52(sp)
    5888:	10c5c83a 	sub	r2,r2,r3
    588c:	00c9c83a 	sub	r4,zero,r3
    5890:	d8800815 	stw	r2,32(sp)
    5894:	d9000a15 	stw	r4,40(sp)
    5898:	003d9706 	br	4ef8 <__alt_data_end+0xff004ef8>
    589c:	05adc83a 	sub	r22,zero,r22
    58a0:	dd800815 	stw	r22,32(sp)
    58a4:	002d883a 	mov	r22,zero
    58a8:	003d8e06 	br	4ee4 <__alt_data_end+0xff004ee4>
    58ac:	d9000517 	ldw	r4,20(sp)
    58b0:	000e3000 	call	e300 <__floatsidf>
    58b4:	100d883a 	mov	r6,r2
    58b8:	180f883a 	mov	r7,r3
    58bc:	a009883a 	mov	r4,r20
    58c0:	880b883a 	mov	r5,r17
    58c4:	000d0140 	call	d014 <__eqdf2>
    58c8:	103d7126 	beq	r2,zero,4e90 <__alt_data_end+0xff004e90>
    58cc:	d9c00517 	ldw	r7,20(sp)
    58d0:	39ffffc4 	addi	r7,r7,-1
    58d4:	d9c00515 	stw	r7,20(sp)
    58d8:	003d6d06 	br	4e90 <__alt_data_end+0xff004e90>
    58dc:	dd400a17 	ldw	r21,40(sp)
    58e0:	dd000817 	ldw	r20,32(sp)
    58e4:	0023883a 	mov	r17,zero
    58e8:	003f4806 	br	560c <__alt_data_end+0xff00560c>
    58ec:	10e3c83a 	sub	r17,r2,r3
    58f0:	9448983a 	sll	r4,r18,r17
    58f4:	003d3206 	br	4dc0 <__alt_data_end+0xff004dc0>
    58f8:	d8000e15 	stw	zero,56(sp)
    58fc:	003d7506 	br	4ed4 <__alt_data_end+0xff004ed4>
    5900:	b005883a 	mov	r2,r22
    5904:	003f4506 	br	561c <__alt_data_end+0xff00561c>
    5908:	dc000915 	stw	r16,36(sp)
    590c:	d9800a17 	ldw	r6,40(sp)
    5910:	d9400917 	ldw	r5,36(sp)
    5914:	e009883a 	mov	r4,fp
    5918:	00080f40 	call	80f4 <__pow5mult>
    591c:	1021883a 	mov	r16,r2
    5920:	003f5a06 	br	568c <__alt_data_end+0xff00568c>
    5924:	01c00044 	movi	r7,1
    5928:	d9c00b15 	stw	r7,44(sp)
    592c:	d8802217 	ldw	r2,136(sp)
    5930:	0081280e 	bge	zero,r2,5dd4 <_dtoa_r+0x11b0>
    5934:	100d883a 	mov	r6,r2
    5938:	1021883a 	mov	r16,r2
    593c:	d8800c15 	stw	r2,48(sp)
    5940:	d8800615 	stw	r2,24(sp)
    5944:	003d8806 	br	4f68 <__alt_data_end+0xff004f68>
    5948:	d8800617 	ldw	r2,24(sp)
    594c:	00be9b16 	blt	zero,r2,53bc <__alt_data_end+0xff0053bc>
    5950:	10010f1e 	bne	r2,zero,5d90 <_dtoa_r+0x116c>
    5954:	880b883a 	mov	r5,r17
    5958:	000d883a 	mov	r6,zero
    595c:	01d00534 	movhi	r7,16404
    5960:	8009883a 	mov	r4,r16
    5964:	000d26c0 	call	d26c <__muldf3>
    5968:	900d883a 	mov	r6,r18
    596c:	980f883a 	mov	r7,r19
    5970:	1009883a 	mov	r4,r2
    5974:	180b883a 	mov	r5,r3
    5978:	000d09c0 	call	d09c <__gedf2>
    597c:	002b883a 	mov	r21,zero
    5980:	0023883a 	mov	r17,zero
    5984:	1000bf16 	blt	r2,zero,5c84 <_dtoa_r+0x1060>
    5988:	d9802217 	ldw	r6,136(sp)
    598c:	ddc00717 	ldw	r23,28(sp)
    5990:	018c303a 	nor	r6,zero,r6
    5994:	d9800515 	stw	r6,20(sp)
    5998:	a80b883a 	mov	r5,r21
    599c:	e009883a 	mov	r4,fp
    59a0:	0007b5c0 	call	7b5c <_Bfree>
    59a4:	883e4926 	beq	r17,zero,52cc <__alt_data_end+0xff0052cc>
    59a8:	003fad06 	br	5860 <__alt_data_end+0xff005860>
    59ac:	d9c01117 	ldw	r7,68(sp)
    59b0:	3801bc26 	beq	r7,zero,60a4 <_dtoa_r+0x1480>
    59b4:	10810cc4 	addi	r2,r2,1075
    59b8:	dd400a17 	ldw	r21,40(sp)
    59bc:	dd000817 	ldw	r20,32(sp)
    59c0:	003f0a06 	br	55ec <__alt_data_end+0xff0055ec>
    59c4:	00800704 	movi	r2,28
    59c8:	d9000817 	ldw	r4,32(sp)
    59cc:	a0a9883a 	add	r20,r20,r2
    59d0:	b0ad883a 	add	r22,r22,r2
    59d4:	2089883a 	add	r4,r4,r2
    59d8:	d9000815 	stw	r4,32(sp)
    59dc:	003f5106 	br	5724 <__alt_data_end+0xff005724>
    59e0:	d8c00317 	ldw	r3,12(sp)
    59e4:	b8c1fc0e 	bge	r23,r3,61d8 <_dtoa_r+0x15b4>
    59e8:	0027883a 	mov	r19,zero
    59ec:	b805883a 	mov	r2,r23
    59f0:	003f3e06 	br	56ec <__alt_data_end+0xff0056ec>
    59f4:	880b883a 	mov	r5,r17
    59f8:	e009883a 	mov	r4,fp
    59fc:	000f883a 	mov	r7,zero
    5a00:	01800284 	movi	r6,10
    5a04:	0007b840 	call	7b84 <__multadd>
    5a08:	d9000c17 	ldw	r4,48(sp)
    5a0c:	1023883a 	mov	r17,r2
    5a10:	0102040e 	bge	zero,r4,6224 <_dtoa_r+0x1600>
    5a14:	d9000615 	stw	r4,24(sp)
    5a18:	0500050e 	bge	zero,r20,5a30 <_dtoa_r+0xe0c>
    5a1c:	880b883a 	mov	r5,r17
    5a20:	a00d883a 	mov	r6,r20
    5a24:	e009883a 	mov	r4,fp
    5a28:	00082340 	call	8234 <__lshift>
    5a2c:	1023883a 	mov	r17,r2
    5a30:	9801241e 	bne	r19,zero,5ec4 <_dtoa_r+0x12a0>
    5a34:	8829883a 	mov	r20,r17
    5a38:	d9000617 	ldw	r4,24(sp)
    5a3c:	dcc00717 	ldw	r19,28(sp)
    5a40:	9480004c 	andi	r18,r18,1
    5a44:	20bfffc4 	addi	r2,r4,-1
    5a48:	9885883a 	add	r2,r19,r2
    5a4c:	d8800415 	stw	r2,16(sp)
    5a50:	dc800615 	stw	r18,24(sp)
    5a54:	a80b883a 	mov	r5,r21
    5a58:	8009883a 	mov	r4,r16
    5a5c:	0004a240 	call	4a24 <quorem>
    5a60:	880b883a 	mov	r5,r17
    5a64:	8009883a 	mov	r4,r16
    5a68:	102f883a 	mov	r23,r2
    5a6c:	000837c0 	call	837c <__mcmp>
    5a70:	a80b883a 	mov	r5,r21
    5a74:	a00d883a 	mov	r6,r20
    5a78:	e009883a 	mov	r4,fp
    5a7c:	102d883a 	mov	r22,r2
    5a80:	00083dc0 	call	83dc <__mdiff>
    5a84:	1007883a 	mov	r3,r2
    5a88:	10800317 	ldw	r2,12(r2)
    5a8c:	bc800c04 	addi	r18,r23,48
    5a90:	180b883a 	mov	r5,r3
    5a94:	10004e1e 	bne	r2,zero,5bd0 <_dtoa_r+0xfac>
    5a98:	8009883a 	mov	r4,r16
    5a9c:	d8c01615 	stw	r3,88(sp)
    5aa0:	000837c0 	call	837c <__mcmp>
    5aa4:	d8c01617 	ldw	r3,88(sp)
    5aa8:	e009883a 	mov	r4,fp
    5aac:	d8801615 	stw	r2,88(sp)
    5ab0:	180b883a 	mov	r5,r3
    5ab4:	0007b5c0 	call	7b5c <_Bfree>
    5ab8:	d8801617 	ldw	r2,88(sp)
    5abc:	1000041e 	bne	r2,zero,5ad0 <_dtoa_r+0xeac>
    5ac0:	d9800317 	ldw	r6,12(sp)
    5ac4:	3000021e 	bne	r6,zero,5ad0 <_dtoa_r+0xeac>
    5ac8:	d8c00617 	ldw	r3,24(sp)
    5acc:	18003726 	beq	r3,zero,5bac <_dtoa_r+0xf88>
    5ad0:	b0002016 	blt	r22,zero,5b54 <_dtoa_r+0xf30>
    5ad4:	b000041e 	bne	r22,zero,5ae8 <_dtoa_r+0xec4>
    5ad8:	d9000317 	ldw	r4,12(sp)
    5adc:	2000021e 	bne	r4,zero,5ae8 <_dtoa_r+0xec4>
    5ae0:	d8c00617 	ldw	r3,24(sp)
    5ae4:	18001b26 	beq	r3,zero,5b54 <_dtoa_r+0xf30>
    5ae8:	00810716 	blt	zero,r2,5f08 <_dtoa_r+0x12e4>
    5aec:	d8c00417 	ldw	r3,16(sp)
    5af0:	9d800044 	addi	r22,r19,1
    5af4:	9c800005 	stb	r18,0(r19)
    5af8:	b02f883a 	mov	r23,r22
    5afc:	98c10626 	beq	r19,r3,5f18 <_dtoa_r+0x12f4>
    5b00:	800b883a 	mov	r5,r16
    5b04:	000f883a 	mov	r7,zero
    5b08:	01800284 	movi	r6,10
    5b0c:	e009883a 	mov	r4,fp
    5b10:	0007b840 	call	7b84 <__multadd>
    5b14:	1021883a 	mov	r16,r2
    5b18:	000f883a 	mov	r7,zero
    5b1c:	01800284 	movi	r6,10
    5b20:	880b883a 	mov	r5,r17
    5b24:	e009883a 	mov	r4,fp
    5b28:	8d002526 	beq	r17,r20,5bc0 <_dtoa_r+0xf9c>
    5b2c:	0007b840 	call	7b84 <__multadd>
    5b30:	a00b883a 	mov	r5,r20
    5b34:	000f883a 	mov	r7,zero
    5b38:	01800284 	movi	r6,10
    5b3c:	e009883a 	mov	r4,fp
    5b40:	1023883a 	mov	r17,r2
    5b44:	0007b840 	call	7b84 <__multadd>
    5b48:	1029883a 	mov	r20,r2
    5b4c:	b027883a 	mov	r19,r22
    5b50:	003fc006 	br	5a54 <__alt_data_end+0xff005a54>
    5b54:	9011883a 	mov	r8,r18
    5b58:	00800e0e 	bge	zero,r2,5b94 <_dtoa_r+0xf70>
    5b5c:	800b883a 	mov	r5,r16
    5b60:	01800044 	movi	r6,1
    5b64:	e009883a 	mov	r4,fp
    5b68:	da001715 	stw	r8,92(sp)
    5b6c:	00082340 	call	8234 <__lshift>
    5b70:	a80b883a 	mov	r5,r21
    5b74:	1009883a 	mov	r4,r2
    5b78:	1021883a 	mov	r16,r2
    5b7c:	000837c0 	call	837c <__mcmp>
    5b80:	da001717 	ldw	r8,92(sp)
    5b84:	0081960e 	bge	zero,r2,61e0 <_dtoa_r+0x15bc>
    5b88:	00800e44 	movi	r2,57
    5b8c:	40817026 	beq	r8,r2,6150 <_dtoa_r+0x152c>
    5b90:	ba000c44 	addi	r8,r23,49
    5b94:	8825883a 	mov	r18,r17
    5b98:	9dc00044 	addi	r23,r19,1
    5b9c:	9a000005 	stb	r8,0(r19)
    5ba0:	a023883a 	mov	r17,r20
    5ba4:	dc000915 	stw	r16,36(sp)
    5ba8:	003f2406 	br	583c <__alt_data_end+0xff00583c>
    5bac:	00800e44 	movi	r2,57
    5bb0:	9011883a 	mov	r8,r18
    5bb4:	90816626 	beq	r18,r2,6150 <_dtoa_r+0x152c>
    5bb8:	05bff516 	blt	zero,r22,5b90 <__alt_data_end+0xff005b90>
    5bbc:	003ff506 	br	5b94 <__alt_data_end+0xff005b94>
    5bc0:	0007b840 	call	7b84 <__multadd>
    5bc4:	1023883a 	mov	r17,r2
    5bc8:	1029883a 	mov	r20,r2
    5bcc:	003fdf06 	br	5b4c <__alt_data_end+0xff005b4c>
    5bd0:	e009883a 	mov	r4,fp
    5bd4:	0007b5c0 	call	7b5c <_Bfree>
    5bd8:	00800044 	movi	r2,1
    5bdc:	003fbc06 	br	5ad0 <__alt_data_end+0xff005ad0>
    5be0:	a80b883a 	mov	r5,r21
    5be4:	8009883a 	mov	r4,r16
    5be8:	000837c0 	call	837c <__mcmp>
    5bec:	103edb0e 	bge	r2,zero,575c <__alt_data_end+0xff00575c>
    5bf0:	800b883a 	mov	r5,r16
    5bf4:	000f883a 	mov	r7,zero
    5bf8:	01800284 	movi	r6,10
    5bfc:	e009883a 	mov	r4,fp
    5c00:	0007b840 	call	7b84 <__multadd>
    5c04:	1021883a 	mov	r16,r2
    5c08:	d8800517 	ldw	r2,20(sp)
    5c0c:	d8c00b17 	ldw	r3,44(sp)
    5c10:	10bfffc4 	addi	r2,r2,-1
    5c14:	d8800515 	stw	r2,20(sp)
    5c18:	183f761e 	bne	r3,zero,59f4 <__alt_data_end+0xff0059f4>
    5c1c:	d9000c17 	ldw	r4,48(sp)
    5c20:	0101730e 	bge	zero,r4,61f0 <_dtoa_r+0x15cc>
    5c24:	d9000615 	stw	r4,24(sp)
    5c28:	003ed006 	br	576c <__alt_data_end+0xff00576c>
    5c2c:	00800084 	movi	r2,2
    5c30:	3081861e 	bne	r6,r2,624c <_dtoa_r+0x1628>
    5c34:	d8000b15 	stw	zero,44(sp)
    5c38:	003f3c06 	br	592c <__alt_data_end+0xff00592c>
    5c3c:	dc000917 	ldw	r16,36(sp)
    5c40:	003e9206 	br	568c <__alt_data_end+0xff00568c>
    5c44:	d9c00317 	ldw	r7,12(sp)
    5c48:	00800084 	movi	r2,2
    5c4c:	11fec50e 	bge	r2,r7,5764 <__alt_data_end+0xff005764>
    5c50:	d9000617 	ldw	r4,24(sp)
    5c54:	20013c1e 	bne	r4,zero,6148 <_dtoa_r+0x1524>
    5c58:	a80b883a 	mov	r5,r21
    5c5c:	000f883a 	mov	r7,zero
    5c60:	01800144 	movi	r6,5
    5c64:	e009883a 	mov	r4,fp
    5c68:	0007b840 	call	7b84 <__multadd>
    5c6c:	100b883a 	mov	r5,r2
    5c70:	8009883a 	mov	r4,r16
    5c74:	102b883a 	mov	r21,r2
    5c78:	000837c0 	call	837c <__mcmp>
    5c7c:	dc000915 	stw	r16,36(sp)
    5c80:	00bf410e 	bge	zero,r2,5988 <__alt_data_end+0xff005988>
    5c84:	d9c00717 	ldw	r7,28(sp)
    5c88:	00800c44 	movi	r2,49
    5c8c:	38800005 	stb	r2,0(r7)
    5c90:	d8800517 	ldw	r2,20(sp)
    5c94:	3dc00044 	addi	r23,r7,1
    5c98:	10800044 	addi	r2,r2,1
    5c9c:	d8800515 	stw	r2,20(sp)
    5ca0:	003f3d06 	br	5998 <__alt_data_end+0xff005998>
    5ca4:	d9800517 	ldw	r6,20(sp)
    5ca8:	d9c00717 	ldw	r7,28(sp)
    5cac:	00800c44 	movi	r2,49
    5cb0:	31800044 	addi	r6,r6,1
    5cb4:	d9800515 	stw	r6,20(sp)
    5cb8:	38800005 	stb	r2,0(r7)
    5cbc:	003edf06 	br	583c <__alt_data_end+0xff00583c>
    5cc0:	d8000b15 	stw	zero,44(sp)
    5cc4:	003c9f06 	br	4f44 <__alt_data_end+0xff004f44>
    5cc8:	903e7e1e 	bne	r18,zero,56c4 <__alt_data_end+0xff0056c4>
    5ccc:	00800434 	movhi	r2,16
    5cd0:	10bfffc4 	addi	r2,r2,-1
    5cd4:	9884703a 	and	r2,r19,r2
    5cd8:	1000ea1e 	bne	r2,zero,6084 <_dtoa_r+0x1460>
    5cdc:	9cdffc2c 	andhi	r19,r19,32752
    5ce0:	9800e826 	beq	r19,zero,6084 <_dtoa_r+0x1460>
    5ce4:	d9c00817 	ldw	r7,32(sp)
    5ce8:	b5800044 	addi	r22,r22,1
    5cec:	04c00044 	movi	r19,1
    5cf0:	39c00044 	addi	r7,r7,1
    5cf4:	d9c00815 	stw	r7,32(sp)
    5cf8:	d8800d17 	ldw	r2,52(sp)
    5cfc:	103e721e 	bne	r2,zero,56c8 <__alt_data_end+0xff0056c8>
    5d00:	00800044 	movi	r2,1
    5d04:	003e7906 	br	56ec <__alt_data_end+0xff0056ec>
    5d08:	8009883a 	mov	r4,r16
    5d0c:	000e3000 	call	e300 <__floatsidf>
    5d10:	d9800f17 	ldw	r6,60(sp)
    5d14:	d9c01017 	ldw	r7,64(sp)
    5d18:	1009883a 	mov	r4,r2
    5d1c:	180b883a 	mov	r5,r3
    5d20:	000d26c0 	call	d26c <__muldf3>
    5d24:	000d883a 	mov	r6,zero
    5d28:	01d00734 	movhi	r7,16412
    5d2c:	1009883a 	mov	r4,r2
    5d30:	180b883a 	mov	r5,r3
    5d34:	000be800 	call	be80 <__adddf3>
    5d38:	047f3034 	movhi	r17,64704
    5d3c:	1021883a 	mov	r16,r2
    5d40:	1c63883a 	add	r17,r3,r17
    5d44:	d9000f17 	ldw	r4,60(sp)
    5d48:	d9401017 	ldw	r5,64(sp)
    5d4c:	000d883a 	mov	r6,zero
    5d50:	01d00534 	movhi	r7,16404
    5d54:	000d9840 	call	d984 <__subdf3>
    5d58:	800d883a 	mov	r6,r16
    5d5c:	880f883a 	mov	r7,r17
    5d60:	1009883a 	mov	r4,r2
    5d64:	180b883a 	mov	r5,r3
    5d68:	102b883a 	mov	r21,r2
    5d6c:	1829883a 	mov	r20,r3
    5d70:	000d09c0 	call	d09c <__gedf2>
    5d74:	00806c16 	blt	zero,r2,5f28 <_dtoa_r+0x1304>
    5d78:	89e0003c 	xorhi	r7,r17,32768
    5d7c:	800d883a 	mov	r6,r16
    5d80:	a809883a 	mov	r4,r21
    5d84:	a00b883a 	mov	r5,r20
    5d88:	000d1780 	call	d178 <__ledf2>
    5d8c:	103d7e0e 	bge	r2,zero,5388 <__alt_data_end+0xff005388>
    5d90:	002b883a 	mov	r21,zero
    5d94:	0023883a 	mov	r17,zero
    5d98:	003efb06 	br	5988 <__alt_data_end+0xff005988>
    5d9c:	d8800717 	ldw	r2,28(sp)
    5da0:	003bd006 	br	4ce4 <__alt_data_end+0xff004ce4>
    5da4:	d9000a17 	ldw	r4,40(sp)
    5da8:	d9800d17 	ldw	r6,52(sp)
    5dac:	dd400a15 	stw	r21,40(sp)
    5db0:	a905c83a 	sub	r2,r21,r4
    5db4:	308d883a 	add	r6,r6,r2
    5db8:	d9800d15 	stw	r6,52(sp)
    5dbc:	002b883a 	mov	r21,zero
    5dc0:	003e0606 	br	55dc <__alt_data_end+0xff0055dc>
    5dc4:	9023883a 	mov	r17,r18
    5dc8:	9829883a 	mov	r20,r19
    5dcc:	04000084 	movi	r16,2
    5dd0:	003c9206 	br	501c <__alt_data_end+0xff00501c>
    5dd4:	04000044 	movi	r16,1
    5dd8:	dc000c15 	stw	r16,48(sp)
    5ddc:	dc000615 	stw	r16,24(sp)
    5de0:	dc002215 	stw	r16,136(sp)
    5de4:	e0001115 	stw	zero,68(fp)
    5de8:	000b883a 	mov	r5,zero
    5dec:	003c6906 	br	4f94 <__alt_data_end+0xff004f94>
    5df0:	3021883a 	mov	r16,r6
    5df4:	003ffb06 	br	5de4 <__alt_data_end+0xff005de4>
    5df8:	1000021e 	bne	r2,zero,5e04 <_dtoa_r+0x11e0>
    5dfc:	4200004c 	andi	r8,r8,1
    5e00:	403e7d1e 	bne	r8,zero,57f8 <__alt_data_end+0xff0057f8>
    5e04:	01000c04 	movi	r4,48
    5e08:	00000106 	br	5e10 <_dtoa_r+0x11ec>
    5e0c:	102f883a 	mov	r23,r2
    5e10:	b8bfffc4 	addi	r2,r23,-1
    5e14:	10c00007 	ldb	r3,0(r2)
    5e18:	193ffc26 	beq	r3,r4,5e0c <__alt_data_end+0xff005e0c>
    5e1c:	003e8706 	br	583c <__alt_data_end+0xff00583c>
    5e20:	d8800517 	ldw	r2,20(sp)
    5e24:	00a3c83a 	sub	r17,zero,r2
    5e28:	8800a426 	beq	r17,zero,60bc <_dtoa_r+0x1498>
    5e2c:	888003cc 	andi	r2,r17,15
    5e30:	100490fa 	slli	r2,r2,3
    5e34:	00c00074 	movhi	r3,1
    5e38:	18c19204 	addi	r3,r3,1608
    5e3c:	1885883a 	add	r2,r3,r2
    5e40:	11800017 	ldw	r6,0(r2)
    5e44:	11c00117 	ldw	r7,4(r2)
    5e48:	9009883a 	mov	r4,r18
    5e4c:	980b883a 	mov	r5,r19
    5e50:	8823d13a 	srai	r17,r17,4
    5e54:	000d26c0 	call	d26c <__muldf3>
    5e58:	d8800f15 	stw	r2,60(sp)
    5e5c:	d8c01015 	stw	r3,64(sp)
    5e60:	8800e826 	beq	r17,zero,6204 <_dtoa_r+0x15e0>
    5e64:	05000074 	movhi	r20,1
    5e68:	a5018804 	addi	r20,r20,1568
    5e6c:	04000084 	movi	r16,2
    5e70:	8980004c 	andi	r6,r17,1
    5e74:	1009883a 	mov	r4,r2
    5e78:	8823d07a 	srai	r17,r17,1
    5e7c:	180b883a 	mov	r5,r3
    5e80:	30000426 	beq	r6,zero,5e94 <_dtoa_r+0x1270>
    5e84:	a1800017 	ldw	r6,0(r20)
    5e88:	a1c00117 	ldw	r7,4(r20)
    5e8c:	84000044 	addi	r16,r16,1
    5e90:	000d26c0 	call	d26c <__muldf3>
    5e94:	a5000204 	addi	r20,r20,8
    5e98:	883ff51e 	bne	r17,zero,5e70 <__alt_data_end+0xff005e70>
    5e9c:	d8800f15 	stw	r2,60(sp)
    5ea0:	d8c01015 	stw	r3,64(sp)
    5ea4:	003c7606 	br	5080 <__alt_data_end+0xff005080>
    5ea8:	00c00c04 	movi	r3,48
    5eac:	10c00005 	stb	r3,0(r2)
    5eb0:	d8c00517 	ldw	r3,20(sp)
    5eb4:	bd3fffc3 	ldbu	r20,-1(r23)
    5eb8:	18c00044 	addi	r3,r3,1
    5ebc:	d8c00515 	stw	r3,20(sp)
    5ec0:	003db906 	br	55a8 <__alt_data_end+0xff0055a8>
    5ec4:	89400117 	ldw	r5,4(r17)
    5ec8:	e009883a 	mov	r4,fp
    5ecc:	0007ab40 	call	7ab4 <_Balloc>
    5ed0:	89800417 	ldw	r6,16(r17)
    5ed4:	89400304 	addi	r5,r17,12
    5ed8:	11000304 	addi	r4,r2,12
    5edc:	31800084 	addi	r6,r6,2
    5ee0:	318d883a 	add	r6,r6,r6
    5ee4:	318d883a 	add	r6,r6,r6
    5ee8:	1027883a 	mov	r19,r2
    5eec:	00076e80 	call	76e8 <memcpy>
    5ef0:	01800044 	movi	r6,1
    5ef4:	980b883a 	mov	r5,r19
    5ef8:	e009883a 	mov	r4,fp
    5efc:	00082340 	call	8234 <__lshift>
    5f00:	1029883a 	mov	r20,r2
    5f04:	003ecc06 	br	5a38 <__alt_data_end+0xff005a38>
    5f08:	00800e44 	movi	r2,57
    5f0c:	90809026 	beq	r18,r2,6150 <_dtoa_r+0x152c>
    5f10:	92000044 	addi	r8,r18,1
    5f14:	003f1f06 	br	5b94 <__alt_data_end+0xff005b94>
    5f18:	9011883a 	mov	r8,r18
    5f1c:	8825883a 	mov	r18,r17
    5f20:	a023883a 	mov	r17,r20
    5f24:	003e2906 	br	57cc <__alt_data_end+0xff0057cc>
    5f28:	002b883a 	mov	r21,zero
    5f2c:	0023883a 	mov	r17,zero
    5f30:	003f5406 	br	5c84 <__alt_data_end+0xff005c84>
    5f34:	61bfffc4 	addi	r6,r12,-1
    5f38:	300490fa 	slli	r2,r6,3
    5f3c:	00c00074 	movhi	r3,1
    5f40:	18c19204 	addi	r3,r3,1608
    5f44:	1885883a 	add	r2,r3,r2
    5f48:	11000017 	ldw	r4,0(r2)
    5f4c:	11400117 	ldw	r5,4(r2)
    5f50:	d8800717 	ldw	r2,28(sp)
    5f54:	880f883a 	mov	r7,r17
    5f58:	d9801215 	stw	r6,72(sp)
    5f5c:	800d883a 	mov	r6,r16
    5f60:	db001615 	stw	r12,88(sp)
    5f64:	15c00044 	addi	r23,r2,1
    5f68:	000d26c0 	call	d26c <__muldf3>
    5f6c:	d9401017 	ldw	r5,64(sp)
    5f70:	d9000f17 	ldw	r4,60(sp)
    5f74:	d8c01515 	stw	r3,84(sp)
    5f78:	d8801415 	stw	r2,80(sp)
    5f7c:	000e2800 	call	e280 <__fixdfsi>
    5f80:	1009883a 	mov	r4,r2
    5f84:	1021883a 	mov	r16,r2
    5f88:	000e3000 	call	e300 <__floatsidf>
    5f8c:	d9000f17 	ldw	r4,60(sp)
    5f90:	d9401017 	ldw	r5,64(sp)
    5f94:	100d883a 	mov	r6,r2
    5f98:	180f883a 	mov	r7,r3
    5f9c:	000d9840 	call	d984 <__subdf3>
    5fa0:	1829883a 	mov	r20,r3
    5fa4:	d8c00717 	ldw	r3,28(sp)
    5fa8:	84000c04 	addi	r16,r16,48
    5fac:	1023883a 	mov	r17,r2
    5fb0:	1c000005 	stb	r16,0(r3)
    5fb4:	db001617 	ldw	r12,88(sp)
    5fb8:	00800044 	movi	r2,1
    5fbc:	60802226 	beq	r12,r2,6048 <_dtoa_r+0x1424>
    5fc0:	d9c00717 	ldw	r7,28(sp)
    5fc4:	8805883a 	mov	r2,r17
    5fc8:	b82b883a 	mov	r21,r23
    5fcc:	3b19883a 	add	r12,r7,r12
    5fd0:	6023883a 	mov	r17,r12
    5fd4:	a007883a 	mov	r3,r20
    5fd8:	dc800f15 	stw	r18,60(sp)
    5fdc:	000d883a 	mov	r6,zero
    5fe0:	01d00934 	movhi	r7,16420
    5fe4:	1009883a 	mov	r4,r2
    5fe8:	180b883a 	mov	r5,r3
    5fec:	000d26c0 	call	d26c <__muldf3>
    5ff0:	180b883a 	mov	r5,r3
    5ff4:	1009883a 	mov	r4,r2
    5ff8:	1829883a 	mov	r20,r3
    5ffc:	1025883a 	mov	r18,r2
    6000:	000e2800 	call	e280 <__fixdfsi>
    6004:	1009883a 	mov	r4,r2
    6008:	1021883a 	mov	r16,r2
    600c:	000e3000 	call	e300 <__floatsidf>
    6010:	100d883a 	mov	r6,r2
    6014:	180f883a 	mov	r7,r3
    6018:	9009883a 	mov	r4,r18
    601c:	a00b883a 	mov	r5,r20
    6020:	84000c04 	addi	r16,r16,48
    6024:	000d9840 	call	d984 <__subdf3>
    6028:	ad400044 	addi	r21,r21,1
    602c:	ac3fffc5 	stb	r16,-1(r21)
    6030:	ac7fea1e 	bne	r21,r17,5fdc <__alt_data_end+0xff005fdc>
    6034:	1023883a 	mov	r17,r2
    6038:	d8801217 	ldw	r2,72(sp)
    603c:	dc800f17 	ldw	r18,60(sp)
    6040:	1829883a 	mov	r20,r3
    6044:	b8af883a 	add	r23,r23,r2
    6048:	d9001417 	ldw	r4,80(sp)
    604c:	d9401517 	ldw	r5,84(sp)
    6050:	000d883a 	mov	r6,zero
    6054:	01cff834 	movhi	r7,16352
    6058:	000be800 	call	be80 <__adddf3>
    605c:	880d883a 	mov	r6,r17
    6060:	a00f883a 	mov	r7,r20
    6064:	1009883a 	mov	r4,r2
    6068:	180b883a 	mov	r5,r3
    606c:	000d1780 	call	d178 <__ledf2>
    6070:	10003e0e 	bge	r2,zero,616c <_dtoa_r+0x1548>
    6074:	d9001317 	ldw	r4,76(sp)
    6078:	bd3fffc3 	ldbu	r20,-1(r23)
    607c:	d9000515 	stw	r4,20(sp)
    6080:	003d3b06 	br	5570 <__alt_data_end+0xff005570>
    6084:	0027883a 	mov	r19,zero
    6088:	003f1b06 	br	5cf8 <__alt_data_end+0xff005cf8>
    608c:	d8800817 	ldw	r2,32(sp)
    6090:	11e9c83a 	sub	r20,r2,r7
    6094:	0005883a 	mov	r2,zero
    6098:	003d5406 	br	55ec <__alt_data_end+0xff0055ec>
    609c:	00800044 	movi	r2,1
    60a0:	003dc706 	br	57c0 <__alt_data_end+0xff0057c0>
    60a4:	d8c00217 	ldw	r3,8(sp)
    60a8:	00800d84 	movi	r2,54
    60ac:	dd400a17 	ldw	r21,40(sp)
    60b0:	10c5c83a 	sub	r2,r2,r3
    60b4:	dd000817 	ldw	r20,32(sp)
    60b8:	003d4c06 	br	55ec <__alt_data_end+0xff0055ec>
    60bc:	dc800f15 	stw	r18,60(sp)
    60c0:	dcc01015 	stw	r19,64(sp)
    60c4:	04000084 	movi	r16,2
    60c8:	003bed06 	br	5080 <__alt_data_end+0xff005080>
    60cc:	d9000617 	ldw	r4,24(sp)
    60d0:	203f0d26 	beq	r4,zero,5d08 <__alt_data_end+0xff005d08>
    60d4:	d9800c17 	ldw	r6,48(sp)
    60d8:	01bcab0e 	bge	zero,r6,5388 <__alt_data_end+0xff005388>
    60dc:	d9401017 	ldw	r5,64(sp)
    60e0:	d9000f17 	ldw	r4,60(sp)
    60e4:	000d883a 	mov	r6,zero
    60e8:	01d00934 	movhi	r7,16420
    60ec:	000d26c0 	call	d26c <__muldf3>
    60f0:	81000044 	addi	r4,r16,1
    60f4:	d8800f15 	stw	r2,60(sp)
    60f8:	d8c01015 	stw	r3,64(sp)
    60fc:	000e3000 	call	e300 <__floatsidf>
    6100:	d9800f17 	ldw	r6,60(sp)
    6104:	d9c01017 	ldw	r7,64(sp)
    6108:	1009883a 	mov	r4,r2
    610c:	180b883a 	mov	r5,r3
    6110:	000d26c0 	call	d26c <__muldf3>
    6114:	01d00734 	movhi	r7,16412
    6118:	000d883a 	mov	r6,zero
    611c:	1009883a 	mov	r4,r2
    6120:	180b883a 	mov	r5,r3
    6124:	000be800 	call	be80 <__adddf3>
    6128:	d9c00517 	ldw	r7,20(sp)
    612c:	047f3034 	movhi	r17,64704
    6130:	1021883a 	mov	r16,r2
    6134:	39ffffc4 	addi	r7,r7,-1
    6138:	d9c01315 	stw	r7,76(sp)
    613c:	1c63883a 	add	r17,r3,r17
    6140:	db000c17 	ldw	r12,48(sp)
    6144:	003bea06 	br	50f0 <__alt_data_end+0xff0050f0>
    6148:	dc000915 	stw	r16,36(sp)
    614c:	003e0e06 	br	5988 <__alt_data_end+0xff005988>
    6150:	01000e44 	movi	r4,57
    6154:	8825883a 	mov	r18,r17
    6158:	9dc00044 	addi	r23,r19,1
    615c:	99000005 	stb	r4,0(r19)
    6160:	a023883a 	mov	r17,r20
    6164:	dc000915 	stw	r16,36(sp)
    6168:	003da406 	br	57fc <__alt_data_end+0xff0057fc>
    616c:	d9801417 	ldw	r6,80(sp)
    6170:	d9c01517 	ldw	r7,84(sp)
    6174:	0009883a 	mov	r4,zero
    6178:	014ff834 	movhi	r5,16352
    617c:	000d9840 	call	d984 <__subdf3>
    6180:	880d883a 	mov	r6,r17
    6184:	a00f883a 	mov	r7,r20
    6188:	1009883a 	mov	r4,r2
    618c:	180b883a 	mov	r5,r3
    6190:	000d09c0 	call	d09c <__gedf2>
    6194:	00bc7c0e 	bge	zero,r2,5388 <__alt_data_end+0xff005388>
    6198:	01000c04 	movi	r4,48
    619c:	00000106 	br	61a4 <_dtoa_r+0x1580>
    61a0:	102f883a 	mov	r23,r2
    61a4:	b8bfffc4 	addi	r2,r23,-1
    61a8:	10c00007 	ldb	r3,0(r2)
    61ac:	193ffc26 	beq	r3,r4,61a0 <__alt_data_end+0xff0061a0>
    61b0:	d9801317 	ldw	r6,76(sp)
    61b4:	d9800515 	stw	r6,20(sp)
    61b8:	003c4406 	br	52cc <__alt_data_end+0xff0052cc>
    61bc:	d9801317 	ldw	r6,76(sp)
    61c0:	d9800515 	stw	r6,20(sp)
    61c4:	003cea06 	br	5570 <__alt_data_end+0xff005570>
    61c8:	dd800f17 	ldw	r22,60(sp)
    61cc:	dcc01017 	ldw	r19,64(sp)
    61d0:	dc801217 	ldw	r18,72(sp)
    61d4:	003c6c06 	br	5388 <__alt_data_end+0xff005388>
    61d8:	903e031e 	bne	r18,zero,59e8 <__alt_data_end+0xff0059e8>
    61dc:	003ebb06 	br	5ccc <__alt_data_end+0xff005ccc>
    61e0:	103e6c1e 	bne	r2,zero,5b94 <__alt_data_end+0xff005b94>
    61e4:	4080004c 	andi	r2,r8,1
    61e8:	103e6a26 	beq	r2,zero,5b94 <__alt_data_end+0xff005b94>
    61ec:	003e6606 	br	5b88 <__alt_data_end+0xff005b88>
    61f0:	d8c00317 	ldw	r3,12(sp)
    61f4:	00800084 	movi	r2,2
    61f8:	10c02916 	blt	r2,r3,62a0 <_dtoa_r+0x167c>
    61fc:	d9000c17 	ldw	r4,48(sp)
    6200:	003e8806 	br	5c24 <__alt_data_end+0xff005c24>
    6204:	04000084 	movi	r16,2
    6208:	003b9d06 	br	5080 <__alt_data_end+0xff005080>
    620c:	d9001317 	ldw	r4,76(sp)
    6210:	d9000515 	stw	r4,20(sp)
    6214:	003cd606 	br	5570 <__alt_data_end+0xff005570>
    6218:	d8801317 	ldw	r2,76(sp)
    621c:	d8800515 	stw	r2,20(sp)
    6220:	003c2a06 	br	52cc <__alt_data_end+0xff0052cc>
    6224:	d9800317 	ldw	r6,12(sp)
    6228:	00800084 	movi	r2,2
    622c:	11801516 	blt	r2,r6,6284 <_dtoa_r+0x1660>
    6230:	d9c00c17 	ldw	r7,48(sp)
    6234:	d9c00615 	stw	r7,24(sp)
    6238:	003df706 	br	5a18 <__alt_data_end+0xff005a18>
    623c:	193d3926 	beq	r3,r4,5724 <__alt_data_end+0xff005724>
    6240:	00c00f04 	movi	r3,60
    6244:	1885c83a 	sub	r2,r3,r2
    6248:	003ddf06 	br	59c8 <__alt_data_end+0xff0059c8>
    624c:	e009883a 	mov	r4,fp
    6250:	e0001115 	stw	zero,68(fp)
    6254:	000b883a 	mov	r5,zero
    6258:	0007ab40 	call	7ab4 <_Balloc>
    625c:	d8800715 	stw	r2,28(sp)
    6260:	d8c00717 	ldw	r3,28(sp)
    6264:	00bfffc4 	movi	r2,-1
    6268:	01000044 	movi	r4,1
    626c:	d8800c15 	stw	r2,48(sp)
    6270:	e0c01015 	stw	r3,64(fp)
    6274:	d9000b15 	stw	r4,44(sp)
    6278:	d8800615 	stw	r2,24(sp)
    627c:	d8002215 	stw	zero,136(sp)
    6280:	003c4106 	br	5388 <__alt_data_end+0xff005388>
    6284:	d8c00c17 	ldw	r3,48(sp)
    6288:	d8c00615 	stw	r3,24(sp)
    628c:	003e7006 	br	5c50 <__alt_data_end+0xff005c50>
    6290:	04400044 	movi	r17,1
    6294:	003b2006 	br	4f18 <__alt_data_end+0xff004f18>
    6298:	000b883a 	mov	r5,zero
    629c:	003b3d06 	br	4f94 <__alt_data_end+0xff004f94>
    62a0:	d8800c17 	ldw	r2,48(sp)
    62a4:	d8800615 	stw	r2,24(sp)
    62a8:	003e6906 	br	5c50 <__alt_data_end+0xff005c50>

000062ac <__sflush_r>:
    62ac:	2880030b 	ldhu	r2,12(r5)
    62b0:	defffb04 	addi	sp,sp,-20
    62b4:	dcc00315 	stw	r19,12(sp)
    62b8:	dc400115 	stw	r17,4(sp)
    62bc:	dfc00415 	stw	ra,16(sp)
    62c0:	dc800215 	stw	r18,8(sp)
    62c4:	dc000015 	stw	r16,0(sp)
    62c8:	10c0020c 	andi	r3,r2,8
    62cc:	2823883a 	mov	r17,r5
    62d0:	2027883a 	mov	r19,r4
    62d4:	1800311e 	bne	r3,zero,639c <__sflush_r+0xf0>
    62d8:	28c00117 	ldw	r3,4(r5)
    62dc:	10820014 	ori	r2,r2,2048
    62e0:	2880030d 	sth	r2,12(r5)
    62e4:	00c04b0e 	bge	zero,r3,6414 <__sflush_r+0x168>
    62e8:	8a000a17 	ldw	r8,40(r17)
    62ec:	40002326 	beq	r8,zero,637c <__sflush_r+0xd0>
    62f0:	9c000017 	ldw	r16,0(r19)
    62f4:	10c4000c 	andi	r3,r2,4096
    62f8:	98000015 	stw	zero,0(r19)
    62fc:	18004826 	beq	r3,zero,6420 <__sflush_r+0x174>
    6300:	89801417 	ldw	r6,80(r17)
    6304:	10c0010c 	andi	r3,r2,4
    6308:	18000626 	beq	r3,zero,6324 <__sflush_r+0x78>
    630c:	88c00117 	ldw	r3,4(r17)
    6310:	88800c17 	ldw	r2,48(r17)
    6314:	30cdc83a 	sub	r6,r6,r3
    6318:	10000226 	beq	r2,zero,6324 <__sflush_r+0x78>
    631c:	88800f17 	ldw	r2,60(r17)
    6320:	308dc83a 	sub	r6,r6,r2
    6324:	89400717 	ldw	r5,28(r17)
    6328:	000f883a 	mov	r7,zero
    632c:	9809883a 	mov	r4,r19
    6330:	403ee83a 	callr	r8
    6334:	00ffffc4 	movi	r3,-1
    6338:	10c04426 	beq	r2,r3,644c <__sflush_r+0x1a0>
    633c:	88c0030b 	ldhu	r3,12(r17)
    6340:	89000417 	ldw	r4,16(r17)
    6344:	88000115 	stw	zero,4(r17)
    6348:	197dffcc 	andi	r5,r3,63487
    634c:	8940030d 	sth	r5,12(r17)
    6350:	89000015 	stw	r4,0(r17)
    6354:	18c4000c 	andi	r3,r3,4096
    6358:	18002c1e 	bne	r3,zero,640c <__sflush_r+0x160>
    635c:	89400c17 	ldw	r5,48(r17)
    6360:	9c000015 	stw	r16,0(r19)
    6364:	28000526 	beq	r5,zero,637c <__sflush_r+0xd0>
    6368:	88801004 	addi	r2,r17,64
    636c:	28800226 	beq	r5,r2,6378 <__sflush_r+0xcc>
    6370:	9809883a 	mov	r4,r19
    6374:	0006a180 	call	6a18 <_free_r>
    6378:	88000c15 	stw	zero,48(r17)
    637c:	0005883a 	mov	r2,zero
    6380:	dfc00417 	ldw	ra,16(sp)
    6384:	dcc00317 	ldw	r19,12(sp)
    6388:	dc800217 	ldw	r18,8(sp)
    638c:	dc400117 	ldw	r17,4(sp)
    6390:	dc000017 	ldw	r16,0(sp)
    6394:	dec00504 	addi	sp,sp,20
    6398:	f800283a 	ret
    639c:	2c800417 	ldw	r18,16(r5)
    63a0:	903ff626 	beq	r18,zero,637c <__alt_data_end+0xff00637c>
    63a4:	2c000017 	ldw	r16,0(r5)
    63a8:	108000cc 	andi	r2,r2,3
    63ac:	2c800015 	stw	r18,0(r5)
    63b0:	84a1c83a 	sub	r16,r16,r18
    63b4:	1000131e 	bne	r2,zero,6404 <__sflush_r+0x158>
    63b8:	28800517 	ldw	r2,20(r5)
    63bc:	88800215 	stw	r2,8(r17)
    63c0:	04000316 	blt	zero,r16,63d0 <__sflush_r+0x124>
    63c4:	003fed06 	br	637c <__alt_data_end+0xff00637c>
    63c8:	90a5883a 	add	r18,r18,r2
    63cc:	043feb0e 	bge	zero,r16,637c <__alt_data_end+0xff00637c>
    63d0:	88800917 	ldw	r2,36(r17)
    63d4:	89400717 	ldw	r5,28(r17)
    63d8:	800f883a 	mov	r7,r16
    63dc:	900d883a 	mov	r6,r18
    63e0:	9809883a 	mov	r4,r19
    63e4:	103ee83a 	callr	r2
    63e8:	80a1c83a 	sub	r16,r16,r2
    63ec:	00bff616 	blt	zero,r2,63c8 <__alt_data_end+0xff0063c8>
    63f0:	88c0030b 	ldhu	r3,12(r17)
    63f4:	00bfffc4 	movi	r2,-1
    63f8:	18c01014 	ori	r3,r3,64
    63fc:	88c0030d 	sth	r3,12(r17)
    6400:	003fdf06 	br	6380 <__alt_data_end+0xff006380>
    6404:	0005883a 	mov	r2,zero
    6408:	003fec06 	br	63bc <__alt_data_end+0xff0063bc>
    640c:	88801415 	stw	r2,80(r17)
    6410:	003fd206 	br	635c <__alt_data_end+0xff00635c>
    6414:	28c00f17 	ldw	r3,60(r5)
    6418:	00ffb316 	blt	zero,r3,62e8 <__alt_data_end+0xff0062e8>
    641c:	003fd706 	br	637c <__alt_data_end+0xff00637c>
    6420:	89400717 	ldw	r5,28(r17)
    6424:	000d883a 	mov	r6,zero
    6428:	01c00044 	movi	r7,1
    642c:	9809883a 	mov	r4,r19
    6430:	403ee83a 	callr	r8
    6434:	100d883a 	mov	r6,r2
    6438:	00bfffc4 	movi	r2,-1
    643c:	30801426 	beq	r6,r2,6490 <__sflush_r+0x1e4>
    6440:	8880030b 	ldhu	r2,12(r17)
    6444:	8a000a17 	ldw	r8,40(r17)
    6448:	003fae06 	br	6304 <__alt_data_end+0xff006304>
    644c:	98c00017 	ldw	r3,0(r19)
    6450:	183fba26 	beq	r3,zero,633c <__alt_data_end+0xff00633c>
    6454:	01000744 	movi	r4,29
    6458:	19000626 	beq	r3,r4,6474 <__sflush_r+0x1c8>
    645c:	01000584 	movi	r4,22
    6460:	19000426 	beq	r3,r4,6474 <__sflush_r+0x1c8>
    6464:	88c0030b 	ldhu	r3,12(r17)
    6468:	18c01014 	ori	r3,r3,64
    646c:	88c0030d 	sth	r3,12(r17)
    6470:	003fc306 	br	6380 <__alt_data_end+0xff006380>
    6474:	8880030b 	ldhu	r2,12(r17)
    6478:	88c00417 	ldw	r3,16(r17)
    647c:	88000115 	stw	zero,4(r17)
    6480:	10bdffcc 	andi	r2,r2,63487
    6484:	8880030d 	sth	r2,12(r17)
    6488:	88c00015 	stw	r3,0(r17)
    648c:	003fb306 	br	635c <__alt_data_end+0xff00635c>
    6490:	98800017 	ldw	r2,0(r19)
    6494:	103fea26 	beq	r2,zero,6440 <__alt_data_end+0xff006440>
    6498:	00c00744 	movi	r3,29
    649c:	10c00226 	beq	r2,r3,64a8 <__sflush_r+0x1fc>
    64a0:	00c00584 	movi	r3,22
    64a4:	10c0031e 	bne	r2,r3,64b4 <__sflush_r+0x208>
    64a8:	9c000015 	stw	r16,0(r19)
    64ac:	0005883a 	mov	r2,zero
    64b0:	003fb306 	br	6380 <__alt_data_end+0xff006380>
    64b4:	88c0030b 	ldhu	r3,12(r17)
    64b8:	3005883a 	mov	r2,r6
    64bc:	18c01014 	ori	r3,r3,64
    64c0:	88c0030d 	sth	r3,12(r17)
    64c4:	003fae06 	br	6380 <__alt_data_end+0xff006380>

000064c8 <_fflush_r>:
    64c8:	defffd04 	addi	sp,sp,-12
    64cc:	dc000115 	stw	r16,4(sp)
    64d0:	dfc00215 	stw	ra,8(sp)
    64d4:	2021883a 	mov	r16,r4
    64d8:	20000226 	beq	r4,zero,64e4 <_fflush_r+0x1c>
    64dc:	20800e17 	ldw	r2,56(r4)
    64e0:	10000c26 	beq	r2,zero,6514 <_fflush_r+0x4c>
    64e4:	2880030f 	ldh	r2,12(r5)
    64e8:	1000051e 	bne	r2,zero,6500 <_fflush_r+0x38>
    64ec:	0005883a 	mov	r2,zero
    64f0:	dfc00217 	ldw	ra,8(sp)
    64f4:	dc000117 	ldw	r16,4(sp)
    64f8:	dec00304 	addi	sp,sp,12
    64fc:	f800283a 	ret
    6500:	8009883a 	mov	r4,r16
    6504:	dfc00217 	ldw	ra,8(sp)
    6508:	dc000117 	ldw	r16,4(sp)
    650c:	dec00304 	addi	sp,sp,12
    6510:	00062ac1 	jmpi	62ac <__sflush_r>
    6514:	d9400015 	stw	r5,0(sp)
    6518:	00068a40 	call	68a4 <__sinit>
    651c:	d9400017 	ldw	r5,0(sp)
    6520:	003ff006 	br	64e4 <__alt_data_end+0xff0064e4>

00006524 <fflush>:
    6524:	20000526 	beq	r4,zero,653c <fflush+0x18>
    6528:	00800074 	movhi	r2,1
    652c:	1088c304 	addi	r2,r2,8972
    6530:	200b883a 	mov	r5,r4
    6534:	11000017 	ldw	r4,0(r2)
    6538:	00064c81 	jmpi	64c8 <_fflush_r>
    653c:	00800074 	movhi	r2,1
    6540:	1088c204 	addi	r2,r2,8968
    6544:	11000017 	ldw	r4,0(r2)
    6548:	01400034 	movhi	r5,0
    654c:	29593204 	addi	r5,r5,25800
    6550:	00072a81 	jmpi	72a8 <_fwalk_reent>

00006554 <__fp_unlock>:
    6554:	0005883a 	mov	r2,zero
    6558:	f800283a 	ret

0000655c <_cleanup_r>:
    655c:	01400074 	movhi	r5,1
    6560:	296a9804 	addi	r5,r5,-21920
    6564:	00072a81 	jmpi	72a8 <_fwalk_reent>

00006568 <__sinit.part.1>:
    6568:	defff704 	addi	sp,sp,-36
    656c:	00c00034 	movhi	r3,0
    6570:	dfc00815 	stw	ra,32(sp)
    6574:	ddc00715 	stw	r23,28(sp)
    6578:	dd800615 	stw	r22,24(sp)
    657c:	dd400515 	stw	r21,20(sp)
    6580:	dd000415 	stw	r20,16(sp)
    6584:	dcc00315 	stw	r19,12(sp)
    6588:	dc800215 	stw	r18,8(sp)
    658c:	dc400115 	stw	r17,4(sp)
    6590:	dc000015 	stw	r16,0(sp)
    6594:	18d95704 	addi	r3,r3,25948
    6598:	24000117 	ldw	r16,4(r4)
    659c:	20c00f15 	stw	r3,60(r4)
    65a0:	2080bb04 	addi	r2,r4,748
    65a4:	00c000c4 	movi	r3,3
    65a8:	20c0b915 	stw	r3,740(r4)
    65ac:	2080ba15 	stw	r2,744(r4)
    65b0:	2000b815 	stw	zero,736(r4)
    65b4:	05c00204 	movi	r23,8
    65b8:	00800104 	movi	r2,4
    65bc:	2025883a 	mov	r18,r4
    65c0:	b80d883a 	mov	r6,r23
    65c4:	81001704 	addi	r4,r16,92
    65c8:	000b883a 	mov	r5,zero
    65cc:	80000015 	stw	zero,0(r16)
    65d0:	80000115 	stw	zero,4(r16)
    65d4:	80000215 	stw	zero,8(r16)
    65d8:	8080030d 	sth	r2,12(r16)
    65dc:	80001915 	stw	zero,100(r16)
    65e0:	8000038d 	sth	zero,14(r16)
    65e4:	80000415 	stw	zero,16(r16)
    65e8:	80000515 	stw	zero,20(r16)
    65ec:	80000615 	stw	zero,24(r16)
    65f0:	000798c0 	call	798c <memset>
    65f4:	05800074 	movhi	r22,1
    65f8:	94400217 	ldw	r17,8(r18)
    65fc:	05400074 	movhi	r21,1
    6600:	05000074 	movhi	r20,1
    6604:	04c00074 	movhi	r19,1
    6608:	b5a42204 	addi	r22,r22,-28536
    660c:	ad643904 	addi	r21,r21,-28444
    6610:	a5245804 	addi	r20,r20,-28320
    6614:	9ce46f04 	addi	r19,r19,-28228
    6618:	85800815 	stw	r22,32(r16)
    661c:	85400915 	stw	r21,36(r16)
    6620:	85000a15 	stw	r20,40(r16)
    6624:	84c00b15 	stw	r19,44(r16)
    6628:	84000715 	stw	r16,28(r16)
    662c:	00800284 	movi	r2,10
    6630:	8880030d 	sth	r2,12(r17)
    6634:	00800044 	movi	r2,1
    6638:	b80d883a 	mov	r6,r23
    663c:	89001704 	addi	r4,r17,92
    6640:	000b883a 	mov	r5,zero
    6644:	88000015 	stw	zero,0(r17)
    6648:	88000115 	stw	zero,4(r17)
    664c:	88000215 	stw	zero,8(r17)
    6650:	88001915 	stw	zero,100(r17)
    6654:	8880038d 	sth	r2,14(r17)
    6658:	88000415 	stw	zero,16(r17)
    665c:	88000515 	stw	zero,20(r17)
    6660:	88000615 	stw	zero,24(r17)
    6664:	000798c0 	call	798c <memset>
    6668:	94000317 	ldw	r16,12(r18)
    666c:	00800484 	movi	r2,18
    6670:	8c400715 	stw	r17,28(r17)
    6674:	8d800815 	stw	r22,32(r17)
    6678:	8d400915 	stw	r21,36(r17)
    667c:	8d000a15 	stw	r20,40(r17)
    6680:	8cc00b15 	stw	r19,44(r17)
    6684:	8080030d 	sth	r2,12(r16)
    6688:	00800084 	movi	r2,2
    668c:	80000015 	stw	zero,0(r16)
    6690:	80000115 	stw	zero,4(r16)
    6694:	80000215 	stw	zero,8(r16)
    6698:	80001915 	stw	zero,100(r16)
    669c:	8080038d 	sth	r2,14(r16)
    66a0:	80000415 	stw	zero,16(r16)
    66a4:	80000515 	stw	zero,20(r16)
    66a8:	80000615 	stw	zero,24(r16)
    66ac:	b80d883a 	mov	r6,r23
    66b0:	000b883a 	mov	r5,zero
    66b4:	81001704 	addi	r4,r16,92
    66b8:	000798c0 	call	798c <memset>
    66bc:	00800044 	movi	r2,1
    66c0:	84000715 	stw	r16,28(r16)
    66c4:	85800815 	stw	r22,32(r16)
    66c8:	85400915 	stw	r21,36(r16)
    66cc:	85000a15 	stw	r20,40(r16)
    66d0:	84c00b15 	stw	r19,44(r16)
    66d4:	90800e15 	stw	r2,56(r18)
    66d8:	dfc00817 	ldw	ra,32(sp)
    66dc:	ddc00717 	ldw	r23,28(sp)
    66e0:	dd800617 	ldw	r22,24(sp)
    66e4:	dd400517 	ldw	r21,20(sp)
    66e8:	dd000417 	ldw	r20,16(sp)
    66ec:	dcc00317 	ldw	r19,12(sp)
    66f0:	dc800217 	ldw	r18,8(sp)
    66f4:	dc400117 	ldw	r17,4(sp)
    66f8:	dc000017 	ldw	r16,0(sp)
    66fc:	dec00904 	addi	sp,sp,36
    6700:	f800283a 	ret

00006704 <__fp_lock>:
    6704:	0005883a 	mov	r2,zero
    6708:	f800283a 	ret

0000670c <__sfmoreglue>:
    670c:	defffc04 	addi	sp,sp,-16
    6710:	dc400115 	stw	r17,4(sp)
    6714:	2c7fffc4 	addi	r17,r5,-1
    6718:	8c401a24 	muli	r17,r17,104
    671c:	dc800215 	stw	r18,8(sp)
    6720:	2825883a 	mov	r18,r5
    6724:	89401d04 	addi	r5,r17,116
    6728:	dc000015 	stw	r16,0(sp)
    672c:	dfc00315 	stw	ra,12(sp)
    6730:	0001bc80 	call	1bc8 <_malloc_r>
    6734:	1021883a 	mov	r16,r2
    6738:	10000726 	beq	r2,zero,6758 <__sfmoreglue+0x4c>
    673c:	11000304 	addi	r4,r2,12
    6740:	10000015 	stw	zero,0(r2)
    6744:	14800115 	stw	r18,4(r2)
    6748:	11000215 	stw	r4,8(r2)
    674c:	89801a04 	addi	r6,r17,104
    6750:	000b883a 	mov	r5,zero
    6754:	000798c0 	call	798c <memset>
    6758:	8005883a 	mov	r2,r16
    675c:	dfc00317 	ldw	ra,12(sp)
    6760:	dc800217 	ldw	r18,8(sp)
    6764:	dc400117 	ldw	r17,4(sp)
    6768:	dc000017 	ldw	r16,0(sp)
    676c:	dec00404 	addi	sp,sp,16
    6770:	f800283a 	ret

00006774 <__sfp>:
    6774:	defffb04 	addi	sp,sp,-20
    6778:	dc000015 	stw	r16,0(sp)
    677c:	04000074 	movhi	r16,1
    6780:	8408c204 	addi	r16,r16,8968
    6784:	dcc00315 	stw	r19,12(sp)
    6788:	2027883a 	mov	r19,r4
    678c:	81000017 	ldw	r4,0(r16)
    6790:	dfc00415 	stw	ra,16(sp)
    6794:	dc800215 	stw	r18,8(sp)
    6798:	20800e17 	ldw	r2,56(r4)
    679c:	dc400115 	stw	r17,4(sp)
    67a0:	1000021e 	bne	r2,zero,67ac <__sfp+0x38>
    67a4:	00065680 	call	6568 <__sinit.part.1>
    67a8:	81000017 	ldw	r4,0(r16)
    67ac:	2480b804 	addi	r18,r4,736
    67b0:	047fffc4 	movi	r17,-1
    67b4:	91000117 	ldw	r4,4(r18)
    67b8:	94000217 	ldw	r16,8(r18)
    67bc:	213fffc4 	addi	r4,r4,-1
    67c0:	20000a16 	blt	r4,zero,67ec <__sfp+0x78>
    67c4:	8080030f 	ldh	r2,12(r16)
    67c8:	10000c26 	beq	r2,zero,67fc <__sfp+0x88>
    67cc:	80c01d04 	addi	r3,r16,116
    67d0:	00000206 	br	67dc <__sfp+0x68>
    67d4:	18bfe60f 	ldh	r2,-104(r3)
    67d8:	10000826 	beq	r2,zero,67fc <__sfp+0x88>
    67dc:	213fffc4 	addi	r4,r4,-1
    67e0:	1c3ffd04 	addi	r16,r3,-12
    67e4:	18c01a04 	addi	r3,r3,104
    67e8:	247ffa1e 	bne	r4,r17,67d4 <__alt_data_end+0xff0067d4>
    67ec:	90800017 	ldw	r2,0(r18)
    67f0:	10001d26 	beq	r2,zero,6868 <__sfp+0xf4>
    67f4:	1025883a 	mov	r18,r2
    67f8:	003fee06 	br	67b4 <__alt_data_end+0xff0067b4>
    67fc:	00bfffc4 	movi	r2,-1
    6800:	8080038d 	sth	r2,14(r16)
    6804:	00800044 	movi	r2,1
    6808:	8080030d 	sth	r2,12(r16)
    680c:	80001915 	stw	zero,100(r16)
    6810:	80000015 	stw	zero,0(r16)
    6814:	80000215 	stw	zero,8(r16)
    6818:	80000115 	stw	zero,4(r16)
    681c:	80000415 	stw	zero,16(r16)
    6820:	80000515 	stw	zero,20(r16)
    6824:	80000615 	stw	zero,24(r16)
    6828:	01800204 	movi	r6,8
    682c:	000b883a 	mov	r5,zero
    6830:	81001704 	addi	r4,r16,92
    6834:	000798c0 	call	798c <memset>
    6838:	8005883a 	mov	r2,r16
    683c:	80000c15 	stw	zero,48(r16)
    6840:	80000d15 	stw	zero,52(r16)
    6844:	80001115 	stw	zero,68(r16)
    6848:	80001215 	stw	zero,72(r16)
    684c:	dfc00417 	ldw	ra,16(sp)
    6850:	dcc00317 	ldw	r19,12(sp)
    6854:	dc800217 	ldw	r18,8(sp)
    6858:	dc400117 	ldw	r17,4(sp)
    685c:	dc000017 	ldw	r16,0(sp)
    6860:	dec00504 	addi	sp,sp,20
    6864:	f800283a 	ret
    6868:	01400104 	movi	r5,4
    686c:	9809883a 	mov	r4,r19
    6870:	000670c0 	call	670c <__sfmoreglue>
    6874:	90800015 	stw	r2,0(r18)
    6878:	103fde1e 	bne	r2,zero,67f4 <__alt_data_end+0xff0067f4>
    687c:	00800304 	movi	r2,12
    6880:	98800015 	stw	r2,0(r19)
    6884:	0005883a 	mov	r2,zero
    6888:	003ff006 	br	684c <__alt_data_end+0xff00684c>

0000688c <_cleanup>:
    688c:	00800074 	movhi	r2,1
    6890:	1088c204 	addi	r2,r2,8968
    6894:	11000017 	ldw	r4,0(r2)
    6898:	01400074 	movhi	r5,1
    689c:	296a9804 	addi	r5,r5,-21920
    68a0:	00072a81 	jmpi	72a8 <_fwalk_reent>

000068a4 <__sinit>:
    68a4:	20800e17 	ldw	r2,56(r4)
    68a8:	10000126 	beq	r2,zero,68b0 <__sinit+0xc>
    68ac:	f800283a 	ret
    68b0:	00065681 	jmpi	6568 <__sinit.part.1>

000068b4 <__sfp_lock_acquire>:
    68b4:	f800283a 	ret

000068b8 <__sfp_lock_release>:
    68b8:	f800283a 	ret

000068bc <__sinit_lock_acquire>:
    68bc:	f800283a 	ret

000068c0 <__sinit_lock_release>:
    68c0:	f800283a 	ret

000068c4 <__fp_lock_all>:
    68c4:	00800074 	movhi	r2,1
    68c8:	1088c304 	addi	r2,r2,8972
    68cc:	11000017 	ldw	r4,0(r2)
    68d0:	01400034 	movhi	r5,0
    68d4:	2959c104 	addi	r5,r5,26372
    68d8:	00071e41 	jmpi	71e4 <_fwalk>

000068dc <__fp_unlock_all>:
    68dc:	00800074 	movhi	r2,1
    68e0:	1088c304 	addi	r2,r2,8972
    68e4:	11000017 	ldw	r4,0(r2)
    68e8:	01400034 	movhi	r5,0
    68ec:	29595504 	addi	r5,r5,25940
    68f0:	00071e41 	jmpi	71e4 <_fwalk>

000068f4 <_malloc_trim_r>:
    68f4:	defffb04 	addi	sp,sp,-20
    68f8:	dcc00315 	stw	r19,12(sp)
    68fc:	04c00074 	movhi	r19,1
    6900:	dc800215 	stw	r18,8(sp)
    6904:	dc400115 	stw	r17,4(sp)
    6908:	dc000015 	stw	r16,0(sp)
    690c:	dfc00415 	stw	ra,16(sp)
    6910:	2821883a 	mov	r16,r5
    6914:	9cc21304 	addi	r19,r19,2124
    6918:	2025883a 	mov	r18,r4
    691c:	000e8500 	call	e850 <__malloc_lock>
    6920:	98800217 	ldw	r2,8(r19)
    6924:	14400117 	ldw	r17,4(r2)
    6928:	00bfff04 	movi	r2,-4
    692c:	88a2703a 	and	r17,r17,r2
    6930:	8c21c83a 	sub	r16,r17,r16
    6934:	8403fbc4 	addi	r16,r16,4079
    6938:	8020d33a 	srli	r16,r16,12
    693c:	0083ffc4 	movi	r2,4095
    6940:	843fffc4 	addi	r16,r16,-1
    6944:	8020933a 	slli	r16,r16,12
    6948:	1400060e 	bge	r2,r16,6964 <_malloc_trim_r+0x70>
    694c:	000b883a 	mov	r5,zero
    6950:	9009883a 	mov	r4,r18
    6954:	00025140 	call	2514 <_sbrk_r>
    6958:	98c00217 	ldw	r3,8(r19)
    695c:	1c47883a 	add	r3,r3,r17
    6960:	10c00a26 	beq	r2,r3,698c <_malloc_trim_r+0x98>
    6964:	9009883a 	mov	r4,r18
    6968:	000e8540 	call	e854 <__malloc_unlock>
    696c:	0005883a 	mov	r2,zero
    6970:	dfc00417 	ldw	ra,16(sp)
    6974:	dcc00317 	ldw	r19,12(sp)
    6978:	dc800217 	ldw	r18,8(sp)
    697c:	dc400117 	ldw	r17,4(sp)
    6980:	dc000017 	ldw	r16,0(sp)
    6984:	dec00504 	addi	sp,sp,20
    6988:	f800283a 	ret
    698c:	040bc83a 	sub	r5,zero,r16
    6990:	9009883a 	mov	r4,r18
    6994:	00025140 	call	2514 <_sbrk_r>
    6998:	00ffffc4 	movi	r3,-1
    699c:	10c00d26 	beq	r2,r3,69d4 <_malloc_trim_r+0xe0>
    69a0:	00c00074 	movhi	r3,1
    69a4:	18cfa704 	addi	r3,r3,16028
    69a8:	18800017 	ldw	r2,0(r3)
    69ac:	99000217 	ldw	r4,8(r19)
    69b0:	8c23c83a 	sub	r17,r17,r16
    69b4:	8c400054 	ori	r17,r17,1
    69b8:	1421c83a 	sub	r16,r2,r16
    69bc:	24400115 	stw	r17,4(r4)
    69c0:	9009883a 	mov	r4,r18
    69c4:	1c000015 	stw	r16,0(r3)
    69c8:	000e8540 	call	e854 <__malloc_unlock>
    69cc:	00800044 	movi	r2,1
    69d0:	003fe706 	br	6970 <__alt_data_end+0xff006970>
    69d4:	000b883a 	mov	r5,zero
    69d8:	9009883a 	mov	r4,r18
    69dc:	00025140 	call	2514 <_sbrk_r>
    69e0:	99000217 	ldw	r4,8(r19)
    69e4:	014003c4 	movi	r5,15
    69e8:	1107c83a 	sub	r3,r2,r4
    69ec:	28ffdd0e 	bge	r5,r3,6964 <__alt_data_end+0xff006964>
    69f0:	01400074 	movhi	r5,1
    69f4:	2948c004 	addi	r5,r5,8960
    69f8:	29400017 	ldw	r5,0(r5)
    69fc:	18c00054 	ori	r3,r3,1
    6a00:	20c00115 	stw	r3,4(r4)
    6a04:	00c00074 	movhi	r3,1
    6a08:	1145c83a 	sub	r2,r2,r5
    6a0c:	18cfa704 	addi	r3,r3,16028
    6a10:	18800015 	stw	r2,0(r3)
    6a14:	003fd306 	br	6964 <__alt_data_end+0xff006964>

00006a18 <_free_r>:
    6a18:	28004126 	beq	r5,zero,6b20 <_free_r+0x108>
    6a1c:	defffd04 	addi	sp,sp,-12
    6a20:	dc400115 	stw	r17,4(sp)
    6a24:	dc000015 	stw	r16,0(sp)
    6a28:	2023883a 	mov	r17,r4
    6a2c:	2821883a 	mov	r16,r5
    6a30:	dfc00215 	stw	ra,8(sp)
    6a34:	000e8500 	call	e850 <__malloc_lock>
    6a38:	81ffff17 	ldw	r7,-4(r16)
    6a3c:	00bfff84 	movi	r2,-2
    6a40:	01000074 	movhi	r4,1
    6a44:	81bffe04 	addi	r6,r16,-8
    6a48:	3884703a 	and	r2,r7,r2
    6a4c:	21021304 	addi	r4,r4,2124
    6a50:	308b883a 	add	r5,r6,r2
    6a54:	2a400117 	ldw	r9,4(r5)
    6a58:	22000217 	ldw	r8,8(r4)
    6a5c:	00ffff04 	movi	r3,-4
    6a60:	48c6703a 	and	r3,r9,r3
    6a64:	2a005726 	beq	r5,r8,6bc4 <_free_r+0x1ac>
    6a68:	28c00115 	stw	r3,4(r5)
    6a6c:	39c0004c 	andi	r7,r7,1
    6a70:	3800091e 	bne	r7,zero,6a98 <_free_r+0x80>
    6a74:	823ffe17 	ldw	r8,-8(r16)
    6a78:	22400204 	addi	r9,r4,8
    6a7c:	320dc83a 	sub	r6,r6,r8
    6a80:	31c00217 	ldw	r7,8(r6)
    6a84:	1205883a 	add	r2,r2,r8
    6a88:	3a406526 	beq	r7,r9,6c20 <_free_r+0x208>
    6a8c:	32000317 	ldw	r8,12(r6)
    6a90:	3a000315 	stw	r8,12(r7)
    6a94:	41c00215 	stw	r7,8(r8)
    6a98:	28cf883a 	add	r7,r5,r3
    6a9c:	39c00117 	ldw	r7,4(r7)
    6aa0:	39c0004c 	andi	r7,r7,1
    6aa4:	38003a26 	beq	r7,zero,6b90 <_free_r+0x178>
    6aa8:	10c00054 	ori	r3,r2,1
    6aac:	30c00115 	stw	r3,4(r6)
    6ab0:	3087883a 	add	r3,r6,r2
    6ab4:	18800015 	stw	r2,0(r3)
    6ab8:	00c07fc4 	movi	r3,511
    6abc:	18801936 	bltu	r3,r2,6b24 <_free_r+0x10c>
    6ac0:	1004d0fa 	srli	r2,r2,3
    6ac4:	01c00044 	movi	r7,1
    6ac8:	21400117 	ldw	r5,4(r4)
    6acc:	10c00044 	addi	r3,r2,1
    6ad0:	18c7883a 	add	r3,r3,r3
    6ad4:	1005d0ba 	srai	r2,r2,2
    6ad8:	18c7883a 	add	r3,r3,r3
    6adc:	18c7883a 	add	r3,r3,r3
    6ae0:	1907883a 	add	r3,r3,r4
    6ae4:	3884983a 	sll	r2,r7,r2
    6ae8:	19c00017 	ldw	r7,0(r3)
    6aec:	1a3ffe04 	addi	r8,r3,-8
    6af0:	1144b03a 	or	r2,r2,r5
    6af4:	32000315 	stw	r8,12(r6)
    6af8:	31c00215 	stw	r7,8(r6)
    6afc:	20800115 	stw	r2,4(r4)
    6b00:	19800015 	stw	r6,0(r3)
    6b04:	39800315 	stw	r6,12(r7)
    6b08:	8809883a 	mov	r4,r17
    6b0c:	dfc00217 	ldw	ra,8(sp)
    6b10:	dc400117 	ldw	r17,4(sp)
    6b14:	dc000017 	ldw	r16,0(sp)
    6b18:	dec00304 	addi	sp,sp,12
    6b1c:	000e8541 	jmpi	e854 <__malloc_unlock>
    6b20:	f800283a 	ret
    6b24:	100ad27a 	srli	r5,r2,9
    6b28:	00c00104 	movi	r3,4
    6b2c:	19404a36 	bltu	r3,r5,6c58 <_free_r+0x240>
    6b30:	100ad1ba 	srli	r5,r2,6
    6b34:	28c00e44 	addi	r3,r5,57
    6b38:	18c7883a 	add	r3,r3,r3
    6b3c:	29400e04 	addi	r5,r5,56
    6b40:	18c7883a 	add	r3,r3,r3
    6b44:	18c7883a 	add	r3,r3,r3
    6b48:	1909883a 	add	r4,r3,r4
    6b4c:	20c00017 	ldw	r3,0(r4)
    6b50:	01c00074 	movhi	r7,1
    6b54:	213ffe04 	addi	r4,r4,-8
    6b58:	39c21304 	addi	r7,r7,2124
    6b5c:	20c04426 	beq	r4,r3,6c70 <_free_r+0x258>
    6b60:	01ffff04 	movi	r7,-4
    6b64:	19400117 	ldw	r5,4(r3)
    6b68:	29ca703a 	and	r5,r5,r7
    6b6c:	1140022e 	bgeu	r2,r5,6b78 <_free_r+0x160>
    6b70:	18c00217 	ldw	r3,8(r3)
    6b74:	20fffb1e 	bne	r4,r3,6b64 <__alt_data_end+0xff006b64>
    6b78:	19000317 	ldw	r4,12(r3)
    6b7c:	31000315 	stw	r4,12(r6)
    6b80:	30c00215 	stw	r3,8(r6)
    6b84:	21800215 	stw	r6,8(r4)
    6b88:	19800315 	stw	r6,12(r3)
    6b8c:	003fde06 	br	6b08 <__alt_data_end+0xff006b08>
    6b90:	29c00217 	ldw	r7,8(r5)
    6b94:	10c5883a 	add	r2,r2,r3
    6b98:	00c00074 	movhi	r3,1
    6b9c:	18c21504 	addi	r3,r3,2132
    6ba0:	38c03b26 	beq	r7,r3,6c90 <_free_r+0x278>
    6ba4:	2a000317 	ldw	r8,12(r5)
    6ba8:	11400054 	ori	r5,r2,1
    6bac:	3087883a 	add	r3,r6,r2
    6bb0:	3a000315 	stw	r8,12(r7)
    6bb4:	41c00215 	stw	r7,8(r8)
    6bb8:	31400115 	stw	r5,4(r6)
    6bbc:	18800015 	stw	r2,0(r3)
    6bc0:	003fbd06 	br	6ab8 <__alt_data_end+0xff006ab8>
    6bc4:	39c0004c 	andi	r7,r7,1
    6bc8:	10c5883a 	add	r2,r2,r3
    6bcc:	3800071e 	bne	r7,zero,6bec <_free_r+0x1d4>
    6bd0:	81fffe17 	ldw	r7,-8(r16)
    6bd4:	31cdc83a 	sub	r6,r6,r7
    6bd8:	30c00317 	ldw	r3,12(r6)
    6bdc:	31400217 	ldw	r5,8(r6)
    6be0:	11c5883a 	add	r2,r2,r7
    6be4:	28c00315 	stw	r3,12(r5)
    6be8:	19400215 	stw	r5,8(r3)
    6bec:	10c00054 	ori	r3,r2,1
    6bf0:	30c00115 	stw	r3,4(r6)
    6bf4:	00c00074 	movhi	r3,1
    6bf8:	18c8c104 	addi	r3,r3,8964
    6bfc:	18c00017 	ldw	r3,0(r3)
    6c00:	21800215 	stw	r6,8(r4)
    6c04:	10ffc036 	bltu	r2,r3,6b08 <__alt_data_end+0xff006b08>
    6c08:	00800074 	movhi	r2,1
    6c0c:	108f9904 	addi	r2,r2,15972
    6c10:	11400017 	ldw	r5,0(r2)
    6c14:	8809883a 	mov	r4,r17
    6c18:	00068f40 	call	68f4 <_malloc_trim_r>
    6c1c:	003fba06 	br	6b08 <__alt_data_end+0xff006b08>
    6c20:	28c9883a 	add	r4,r5,r3
    6c24:	21000117 	ldw	r4,4(r4)
    6c28:	2100004c 	andi	r4,r4,1
    6c2c:	2000391e 	bne	r4,zero,6d14 <_free_r+0x2fc>
    6c30:	29c00217 	ldw	r7,8(r5)
    6c34:	29000317 	ldw	r4,12(r5)
    6c38:	1885883a 	add	r2,r3,r2
    6c3c:	10c00054 	ori	r3,r2,1
    6c40:	39000315 	stw	r4,12(r7)
    6c44:	21c00215 	stw	r7,8(r4)
    6c48:	30c00115 	stw	r3,4(r6)
    6c4c:	308d883a 	add	r6,r6,r2
    6c50:	30800015 	stw	r2,0(r6)
    6c54:	003fac06 	br	6b08 <__alt_data_end+0xff006b08>
    6c58:	00c00504 	movi	r3,20
    6c5c:	19401536 	bltu	r3,r5,6cb4 <_free_r+0x29c>
    6c60:	28c01704 	addi	r3,r5,92
    6c64:	18c7883a 	add	r3,r3,r3
    6c68:	294016c4 	addi	r5,r5,91
    6c6c:	003fb406 	br	6b40 <__alt_data_end+0xff006b40>
    6c70:	280bd0ba 	srai	r5,r5,2
    6c74:	00c00044 	movi	r3,1
    6c78:	38800117 	ldw	r2,4(r7)
    6c7c:	194a983a 	sll	r5,r3,r5
    6c80:	2007883a 	mov	r3,r4
    6c84:	2884b03a 	or	r2,r5,r2
    6c88:	38800115 	stw	r2,4(r7)
    6c8c:	003fbb06 	br	6b7c <__alt_data_end+0xff006b7c>
    6c90:	21800515 	stw	r6,20(r4)
    6c94:	21800415 	stw	r6,16(r4)
    6c98:	10c00054 	ori	r3,r2,1
    6c9c:	31c00315 	stw	r7,12(r6)
    6ca0:	31c00215 	stw	r7,8(r6)
    6ca4:	30c00115 	stw	r3,4(r6)
    6ca8:	308d883a 	add	r6,r6,r2
    6cac:	30800015 	stw	r2,0(r6)
    6cb0:	003f9506 	br	6b08 <__alt_data_end+0xff006b08>
    6cb4:	00c01504 	movi	r3,84
    6cb8:	19400536 	bltu	r3,r5,6cd0 <_free_r+0x2b8>
    6cbc:	100ad33a 	srli	r5,r2,12
    6cc0:	28c01bc4 	addi	r3,r5,111
    6cc4:	18c7883a 	add	r3,r3,r3
    6cc8:	29401b84 	addi	r5,r5,110
    6ccc:	003f9c06 	br	6b40 <__alt_data_end+0xff006b40>
    6cd0:	00c05504 	movi	r3,340
    6cd4:	19400536 	bltu	r3,r5,6cec <_free_r+0x2d4>
    6cd8:	100ad3fa 	srli	r5,r2,15
    6cdc:	28c01e04 	addi	r3,r5,120
    6ce0:	18c7883a 	add	r3,r3,r3
    6ce4:	29401dc4 	addi	r5,r5,119
    6ce8:	003f9506 	br	6b40 <__alt_data_end+0xff006b40>
    6cec:	00c15504 	movi	r3,1364
    6cf0:	19400536 	bltu	r3,r5,6d08 <_free_r+0x2f0>
    6cf4:	100ad4ba 	srli	r5,r2,18
    6cf8:	28c01f44 	addi	r3,r5,125
    6cfc:	18c7883a 	add	r3,r3,r3
    6d00:	29401f04 	addi	r5,r5,124
    6d04:	003f8e06 	br	6b40 <__alt_data_end+0xff006b40>
    6d08:	00c03f84 	movi	r3,254
    6d0c:	01401f84 	movi	r5,126
    6d10:	003f8b06 	br	6b40 <__alt_data_end+0xff006b40>
    6d14:	10c00054 	ori	r3,r2,1
    6d18:	30c00115 	stw	r3,4(r6)
    6d1c:	308d883a 	add	r6,r6,r2
    6d20:	30800015 	stw	r2,0(r6)
    6d24:	003f7806 	br	6b08 <__alt_data_end+0xff006b08>

00006d28 <__sfvwrite_r>:
    6d28:	30800217 	ldw	r2,8(r6)
    6d2c:	10006726 	beq	r2,zero,6ecc <__sfvwrite_r+0x1a4>
    6d30:	28c0030b 	ldhu	r3,12(r5)
    6d34:	defff404 	addi	sp,sp,-48
    6d38:	dd400715 	stw	r21,28(sp)
    6d3c:	dd000615 	stw	r20,24(sp)
    6d40:	dc000215 	stw	r16,8(sp)
    6d44:	dfc00b15 	stw	ra,44(sp)
    6d48:	df000a15 	stw	fp,40(sp)
    6d4c:	ddc00915 	stw	r23,36(sp)
    6d50:	dd800815 	stw	r22,32(sp)
    6d54:	dcc00515 	stw	r19,20(sp)
    6d58:	dc800415 	stw	r18,16(sp)
    6d5c:	dc400315 	stw	r17,12(sp)
    6d60:	1880020c 	andi	r2,r3,8
    6d64:	2821883a 	mov	r16,r5
    6d68:	202b883a 	mov	r21,r4
    6d6c:	3029883a 	mov	r20,r6
    6d70:	10002726 	beq	r2,zero,6e10 <__sfvwrite_r+0xe8>
    6d74:	28800417 	ldw	r2,16(r5)
    6d78:	10002526 	beq	r2,zero,6e10 <__sfvwrite_r+0xe8>
    6d7c:	1880008c 	andi	r2,r3,2
    6d80:	a4400017 	ldw	r17,0(r20)
    6d84:	10002a26 	beq	r2,zero,6e30 <__sfvwrite_r+0x108>
    6d88:	05a00034 	movhi	r22,32768
    6d8c:	0027883a 	mov	r19,zero
    6d90:	0025883a 	mov	r18,zero
    6d94:	b5bf0004 	addi	r22,r22,-1024
    6d98:	980d883a 	mov	r6,r19
    6d9c:	a809883a 	mov	r4,r21
    6da0:	90004626 	beq	r18,zero,6ebc <__sfvwrite_r+0x194>
    6da4:	900f883a 	mov	r7,r18
    6da8:	b480022e 	bgeu	r22,r18,6db4 <__sfvwrite_r+0x8c>
    6dac:	01e00034 	movhi	r7,32768
    6db0:	39ff0004 	addi	r7,r7,-1024
    6db4:	80800917 	ldw	r2,36(r16)
    6db8:	81400717 	ldw	r5,28(r16)
    6dbc:	103ee83a 	callr	r2
    6dc0:	0080570e 	bge	zero,r2,6f20 <__sfvwrite_r+0x1f8>
    6dc4:	a0c00217 	ldw	r3,8(r20)
    6dc8:	98a7883a 	add	r19,r19,r2
    6dcc:	90a5c83a 	sub	r18,r18,r2
    6dd0:	1885c83a 	sub	r2,r3,r2
    6dd4:	a0800215 	stw	r2,8(r20)
    6dd8:	103fef1e 	bne	r2,zero,6d98 <__alt_data_end+0xff006d98>
    6ddc:	0005883a 	mov	r2,zero
    6de0:	dfc00b17 	ldw	ra,44(sp)
    6de4:	df000a17 	ldw	fp,40(sp)
    6de8:	ddc00917 	ldw	r23,36(sp)
    6dec:	dd800817 	ldw	r22,32(sp)
    6df0:	dd400717 	ldw	r21,28(sp)
    6df4:	dd000617 	ldw	r20,24(sp)
    6df8:	dcc00517 	ldw	r19,20(sp)
    6dfc:	dc800417 	ldw	r18,16(sp)
    6e00:	dc400317 	ldw	r17,12(sp)
    6e04:	dc000217 	ldw	r16,8(sp)
    6e08:	dec00c04 	addi	sp,sp,48
    6e0c:	f800283a 	ret
    6e10:	800b883a 	mov	r5,r16
    6e14:	a809883a 	mov	r4,r21
    6e18:	00048d00 	call	48d0 <__swsetup_r>
    6e1c:	1000eb1e 	bne	r2,zero,71cc <__sfvwrite_r+0x4a4>
    6e20:	80c0030b 	ldhu	r3,12(r16)
    6e24:	a4400017 	ldw	r17,0(r20)
    6e28:	1880008c 	andi	r2,r3,2
    6e2c:	103fd61e 	bne	r2,zero,6d88 <__alt_data_end+0xff006d88>
    6e30:	1880004c 	andi	r2,r3,1
    6e34:	10003f1e 	bne	r2,zero,6f34 <__sfvwrite_r+0x20c>
    6e38:	0039883a 	mov	fp,zero
    6e3c:	0025883a 	mov	r18,zero
    6e40:	90001a26 	beq	r18,zero,6eac <__sfvwrite_r+0x184>
    6e44:	1880800c 	andi	r2,r3,512
    6e48:	84c00217 	ldw	r19,8(r16)
    6e4c:	10002126 	beq	r2,zero,6ed4 <__sfvwrite_r+0x1ac>
    6e50:	982f883a 	mov	r23,r19
    6e54:	94c09336 	bltu	r18,r19,70a4 <__sfvwrite_r+0x37c>
    6e58:	1881200c 	andi	r2,r3,1152
    6e5c:	10009e1e 	bne	r2,zero,70d8 <__sfvwrite_r+0x3b0>
    6e60:	81000017 	ldw	r4,0(r16)
    6e64:	b80d883a 	mov	r6,r23
    6e68:	e00b883a 	mov	r5,fp
    6e6c:	00078300 	call	7830 <memmove>
    6e70:	80c00217 	ldw	r3,8(r16)
    6e74:	81000017 	ldw	r4,0(r16)
    6e78:	9005883a 	mov	r2,r18
    6e7c:	1ce7c83a 	sub	r19,r3,r19
    6e80:	25cf883a 	add	r7,r4,r23
    6e84:	84c00215 	stw	r19,8(r16)
    6e88:	81c00015 	stw	r7,0(r16)
    6e8c:	a0c00217 	ldw	r3,8(r20)
    6e90:	e0b9883a 	add	fp,fp,r2
    6e94:	90a5c83a 	sub	r18,r18,r2
    6e98:	18a7c83a 	sub	r19,r3,r2
    6e9c:	a4c00215 	stw	r19,8(r20)
    6ea0:	983fce26 	beq	r19,zero,6ddc <__alt_data_end+0xff006ddc>
    6ea4:	80c0030b 	ldhu	r3,12(r16)
    6ea8:	903fe61e 	bne	r18,zero,6e44 <__alt_data_end+0xff006e44>
    6eac:	8f000017 	ldw	fp,0(r17)
    6eb0:	8c800117 	ldw	r18,4(r17)
    6eb4:	8c400204 	addi	r17,r17,8
    6eb8:	003fe106 	br	6e40 <__alt_data_end+0xff006e40>
    6ebc:	8cc00017 	ldw	r19,0(r17)
    6ec0:	8c800117 	ldw	r18,4(r17)
    6ec4:	8c400204 	addi	r17,r17,8
    6ec8:	003fb306 	br	6d98 <__alt_data_end+0xff006d98>
    6ecc:	0005883a 	mov	r2,zero
    6ed0:	f800283a 	ret
    6ed4:	81000017 	ldw	r4,0(r16)
    6ed8:	80800417 	ldw	r2,16(r16)
    6edc:	11005736 	bltu	r2,r4,703c <__sfvwrite_r+0x314>
    6ee0:	85c00517 	ldw	r23,20(r16)
    6ee4:	95c05536 	bltu	r18,r23,703c <__sfvwrite_r+0x314>
    6ee8:	00a00034 	movhi	r2,32768
    6eec:	10bfffc4 	addi	r2,r2,-1
    6ef0:	9009883a 	mov	r4,r18
    6ef4:	1480012e 	bgeu	r2,r18,6efc <__sfvwrite_r+0x1d4>
    6ef8:	1009883a 	mov	r4,r2
    6efc:	b80b883a 	mov	r5,r23
    6f00:	000bccc0 	call	bccc <__divsi3>
    6f04:	15cf383a 	mul	r7,r2,r23
    6f08:	81400717 	ldw	r5,28(r16)
    6f0c:	80800917 	ldw	r2,36(r16)
    6f10:	e00d883a 	mov	r6,fp
    6f14:	a809883a 	mov	r4,r21
    6f18:	103ee83a 	callr	r2
    6f1c:	00bfdb16 	blt	zero,r2,6e8c <__alt_data_end+0xff006e8c>
    6f20:	8080030b 	ldhu	r2,12(r16)
    6f24:	10801014 	ori	r2,r2,64
    6f28:	8080030d 	sth	r2,12(r16)
    6f2c:	00bfffc4 	movi	r2,-1
    6f30:	003fab06 	br	6de0 <__alt_data_end+0xff006de0>
    6f34:	0027883a 	mov	r19,zero
    6f38:	0011883a 	mov	r8,zero
    6f3c:	0039883a 	mov	fp,zero
    6f40:	0025883a 	mov	r18,zero
    6f44:	90001f26 	beq	r18,zero,6fc4 <__sfvwrite_r+0x29c>
    6f48:	40005a26 	beq	r8,zero,70b4 <__sfvwrite_r+0x38c>
    6f4c:	982d883a 	mov	r22,r19
    6f50:	94c0012e 	bgeu	r18,r19,6f58 <__sfvwrite_r+0x230>
    6f54:	902d883a 	mov	r22,r18
    6f58:	81000017 	ldw	r4,0(r16)
    6f5c:	80800417 	ldw	r2,16(r16)
    6f60:	b02f883a 	mov	r23,r22
    6f64:	81c00517 	ldw	r7,20(r16)
    6f68:	1100032e 	bgeu	r2,r4,6f78 <__sfvwrite_r+0x250>
    6f6c:	80c00217 	ldw	r3,8(r16)
    6f70:	38c7883a 	add	r3,r7,r3
    6f74:	1d801816 	blt	r3,r22,6fd8 <__sfvwrite_r+0x2b0>
    6f78:	b1c03e16 	blt	r22,r7,7074 <__sfvwrite_r+0x34c>
    6f7c:	80800917 	ldw	r2,36(r16)
    6f80:	81400717 	ldw	r5,28(r16)
    6f84:	e00d883a 	mov	r6,fp
    6f88:	da000115 	stw	r8,4(sp)
    6f8c:	a809883a 	mov	r4,r21
    6f90:	103ee83a 	callr	r2
    6f94:	102f883a 	mov	r23,r2
    6f98:	da000117 	ldw	r8,4(sp)
    6f9c:	00bfe00e 	bge	zero,r2,6f20 <__alt_data_end+0xff006f20>
    6fa0:	9de7c83a 	sub	r19,r19,r23
    6fa4:	98001f26 	beq	r19,zero,7024 <__sfvwrite_r+0x2fc>
    6fa8:	a0800217 	ldw	r2,8(r20)
    6fac:	e5f9883a 	add	fp,fp,r23
    6fb0:	95e5c83a 	sub	r18,r18,r23
    6fb4:	15efc83a 	sub	r23,r2,r23
    6fb8:	a5c00215 	stw	r23,8(r20)
    6fbc:	b83f8726 	beq	r23,zero,6ddc <__alt_data_end+0xff006ddc>
    6fc0:	903fe11e 	bne	r18,zero,6f48 <__alt_data_end+0xff006f48>
    6fc4:	8f000017 	ldw	fp,0(r17)
    6fc8:	8c800117 	ldw	r18,4(r17)
    6fcc:	0011883a 	mov	r8,zero
    6fd0:	8c400204 	addi	r17,r17,8
    6fd4:	003fdb06 	br	6f44 <__alt_data_end+0xff006f44>
    6fd8:	180d883a 	mov	r6,r3
    6fdc:	e00b883a 	mov	r5,fp
    6fe0:	da000115 	stw	r8,4(sp)
    6fe4:	d8c00015 	stw	r3,0(sp)
    6fe8:	00078300 	call	7830 <memmove>
    6fec:	d8c00017 	ldw	r3,0(sp)
    6ff0:	80800017 	ldw	r2,0(r16)
    6ff4:	800b883a 	mov	r5,r16
    6ff8:	a809883a 	mov	r4,r21
    6ffc:	10c5883a 	add	r2,r2,r3
    7000:	80800015 	stw	r2,0(r16)
    7004:	d8c00015 	stw	r3,0(sp)
    7008:	00064c80 	call	64c8 <_fflush_r>
    700c:	d8c00017 	ldw	r3,0(sp)
    7010:	da000117 	ldw	r8,4(sp)
    7014:	103fc21e 	bne	r2,zero,6f20 <__alt_data_end+0xff006f20>
    7018:	182f883a 	mov	r23,r3
    701c:	9de7c83a 	sub	r19,r19,r23
    7020:	983fe11e 	bne	r19,zero,6fa8 <__alt_data_end+0xff006fa8>
    7024:	800b883a 	mov	r5,r16
    7028:	a809883a 	mov	r4,r21
    702c:	00064c80 	call	64c8 <_fflush_r>
    7030:	103fbb1e 	bne	r2,zero,6f20 <__alt_data_end+0xff006f20>
    7034:	0011883a 	mov	r8,zero
    7038:	003fdb06 	br	6fa8 <__alt_data_end+0xff006fa8>
    703c:	94c0012e 	bgeu	r18,r19,7044 <__sfvwrite_r+0x31c>
    7040:	9027883a 	mov	r19,r18
    7044:	980d883a 	mov	r6,r19
    7048:	e00b883a 	mov	r5,fp
    704c:	00078300 	call	7830 <memmove>
    7050:	80800217 	ldw	r2,8(r16)
    7054:	80c00017 	ldw	r3,0(r16)
    7058:	14c5c83a 	sub	r2,r2,r19
    705c:	1cc7883a 	add	r3,r3,r19
    7060:	80800215 	stw	r2,8(r16)
    7064:	80c00015 	stw	r3,0(r16)
    7068:	10004326 	beq	r2,zero,7178 <__sfvwrite_r+0x450>
    706c:	9805883a 	mov	r2,r19
    7070:	003f8606 	br	6e8c <__alt_data_end+0xff006e8c>
    7074:	b00d883a 	mov	r6,r22
    7078:	e00b883a 	mov	r5,fp
    707c:	da000115 	stw	r8,4(sp)
    7080:	00078300 	call	7830 <memmove>
    7084:	80800217 	ldw	r2,8(r16)
    7088:	80c00017 	ldw	r3,0(r16)
    708c:	da000117 	ldw	r8,4(sp)
    7090:	1585c83a 	sub	r2,r2,r22
    7094:	1dad883a 	add	r22,r3,r22
    7098:	80800215 	stw	r2,8(r16)
    709c:	85800015 	stw	r22,0(r16)
    70a0:	003fbf06 	br	6fa0 <__alt_data_end+0xff006fa0>
    70a4:	81000017 	ldw	r4,0(r16)
    70a8:	9027883a 	mov	r19,r18
    70ac:	902f883a 	mov	r23,r18
    70b0:	003f6c06 	br	6e64 <__alt_data_end+0xff006e64>
    70b4:	900d883a 	mov	r6,r18
    70b8:	01400284 	movi	r5,10
    70bc:	e009883a 	mov	r4,fp
    70c0:	00076040 	call	7604 <memchr>
    70c4:	10003e26 	beq	r2,zero,71c0 <__sfvwrite_r+0x498>
    70c8:	10800044 	addi	r2,r2,1
    70cc:	1727c83a 	sub	r19,r2,fp
    70d0:	02000044 	movi	r8,1
    70d4:	003f9d06 	br	6f4c <__alt_data_end+0xff006f4c>
    70d8:	80800517 	ldw	r2,20(r16)
    70dc:	81400417 	ldw	r5,16(r16)
    70e0:	81c00017 	ldw	r7,0(r16)
    70e4:	10a7883a 	add	r19,r2,r2
    70e8:	9885883a 	add	r2,r19,r2
    70ec:	1026d7fa 	srli	r19,r2,31
    70f0:	396dc83a 	sub	r22,r7,r5
    70f4:	b1000044 	addi	r4,r22,1
    70f8:	9885883a 	add	r2,r19,r2
    70fc:	1027d07a 	srai	r19,r2,1
    7100:	2485883a 	add	r2,r4,r18
    7104:	980d883a 	mov	r6,r19
    7108:	9880022e 	bgeu	r19,r2,7114 <__sfvwrite_r+0x3ec>
    710c:	1027883a 	mov	r19,r2
    7110:	100d883a 	mov	r6,r2
    7114:	18c1000c 	andi	r3,r3,1024
    7118:	18001c26 	beq	r3,zero,718c <__sfvwrite_r+0x464>
    711c:	300b883a 	mov	r5,r6
    7120:	a809883a 	mov	r4,r21
    7124:	0001bc80 	call	1bc8 <_malloc_r>
    7128:	102f883a 	mov	r23,r2
    712c:	10002926 	beq	r2,zero,71d4 <__sfvwrite_r+0x4ac>
    7130:	81400417 	ldw	r5,16(r16)
    7134:	b00d883a 	mov	r6,r22
    7138:	1009883a 	mov	r4,r2
    713c:	00076e80 	call	76e8 <memcpy>
    7140:	8080030b 	ldhu	r2,12(r16)
    7144:	00fedfc4 	movi	r3,-1153
    7148:	10c4703a 	and	r2,r2,r3
    714c:	10802014 	ori	r2,r2,128
    7150:	8080030d 	sth	r2,12(r16)
    7154:	bd89883a 	add	r4,r23,r22
    7158:	9d8fc83a 	sub	r7,r19,r22
    715c:	85c00415 	stw	r23,16(r16)
    7160:	84c00515 	stw	r19,20(r16)
    7164:	81000015 	stw	r4,0(r16)
    7168:	9027883a 	mov	r19,r18
    716c:	81c00215 	stw	r7,8(r16)
    7170:	902f883a 	mov	r23,r18
    7174:	003f3b06 	br	6e64 <__alt_data_end+0xff006e64>
    7178:	800b883a 	mov	r5,r16
    717c:	a809883a 	mov	r4,r21
    7180:	00064c80 	call	64c8 <_fflush_r>
    7184:	103fb926 	beq	r2,zero,706c <__alt_data_end+0xff00706c>
    7188:	003f6506 	br	6f20 <__alt_data_end+0xff006f20>
    718c:	a809883a 	mov	r4,r21
    7190:	0008ab00 	call	8ab0 <_realloc_r>
    7194:	102f883a 	mov	r23,r2
    7198:	103fee1e 	bne	r2,zero,7154 <__alt_data_end+0xff007154>
    719c:	81400417 	ldw	r5,16(r16)
    71a0:	a809883a 	mov	r4,r21
    71a4:	0006a180 	call	6a18 <_free_r>
    71a8:	8080030b 	ldhu	r2,12(r16)
    71ac:	00ffdfc4 	movi	r3,-129
    71b0:	1884703a 	and	r2,r3,r2
    71b4:	00c00304 	movi	r3,12
    71b8:	a8c00015 	stw	r3,0(r21)
    71bc:	003f5906 	br	6f24 <__alt_data_end+0xff006f24>
    71c0:	94c00044 	addi	r19,r18,1
    71c4:	02000044 	movi	r8,1
    71c8:	003f6006 	br	6f4c <__alt_data_end+0xff006f4c>
    71cc:	00bfffc4 	movi	r2,-1
    71d0:	003f0306 	br	6de0 <__alt_data_end+0xff006de0>
    71d4:	00800304 	movi	r2,12
    71d8:	a8800015 	stw	r2,0(r21)
    71dc:	8080030b 	ldhu	r2,12(r16)
    71e0:	003f5006 	br	6f24 <__alt_data_end+0xff006f24>

000071e4 <_fwalk>:
    71e4:	defff704 	addi	sp,sp,-36
    71e8:	dd000415 	stw	r20,16(sp)
    71ec:	dfc00815 	stw	ra,32(sp)
    71f0:	ddc00715 	stw	r23,28(sp)
    71f4:	dd800615 	stw	r22,24(sp)
    71f8:	dd400515 	stw	r21,20(sp)
    71fc:	dcc00315 	stw	r19,12(sp)
    7200:	dc800215 	stw	r18,8(sp)
    7204:	dc400115 	stw	r17,4(sp)
    7208:	dc000015 	stw	r16,0(sp)
    720c:	2500b804 	addi	r20,r4,736
    7210:	a0002326 	beq	r20,zero,72a0 <_fwalk+0xbc>
    7214:	282b883a 	mov	r21,r5
    7218:	002f883a 	mov	r23,zero
    721c:	05800044 	movi	r22,1
    7220:	04ffffc4 	movi	r19,-1
    7224:	a4400117 	ldw	r17,4(r20)
    7228:	a4800217 	ldw	r18,8(r20)
    722c:	8c7fffc4 	addi	r17,r17,-1
    7230:	88000d16 	blt	r17,zero,7268 <_fwalk+0x84>
    7234:	94000304 	addi	r16,r18,12
    7238:	94800384 	addi	r18,r18,14
    723c:	8080000b 	ldhu	r2,0(r16)
    7240:	8c7fffc4 	addi	r17,r17,-1
    7244:	813ffd04 	addi	r4,r16,-12
    7248:	b080042e 	bgeu	r22,r2,725c <_fwalk+0x78>
    724c:	9080000f 	ldh	r2,0(r18)
    7250:	14c00226 	beq	r2,r19,725c <_fwalk+0x78>
    7254:	a83ee83a 	callr	r21
    7258:	b8aeb03a 	or	r23,r23,r2
    725c:	84001a04 	addi	r16,r16,104
    7260:	94801a04 	addi	r18,r18,104
    7264:	8cfff51e 	bne	r17,r19,723c <__alt_data_end+0xff00723c>
    7268:	a5000017 	ldw	r20,0(r20)
    726c:	a03fed1e 	bne	r20,zero,7224 <__alt_data_end+0xff007224>
    7270:	b805883a 	mov	r2,r23
    7274:	dfc00817 	ldw	ra,32(sp)
    7278:	ddc00717 	ldw	r23,28(sp)
    727c:	dd800617 	ldw	r22,24(sp)
    7280:	dd400517 	ldw	r21,20(sp)
    7284:	dd000417 	ldw	r20,16(sp)
    7288:	dcc00317 	ldw	r19,12(sp)
    728c:	dc800217 	ldw	r18,8(sp)
    7290:	dc400117 	ldw	r17,4(sp)
    7294:	dc000017 	ldw	r16,0(sp)
    7298:	dec00904 	addi	sp,sp,36
    729c:	f800283a 	ret
    72a0:	002f883a 	mov	r23,zero
    72a4:	003ff206 	br	7270 <__alt_data_end+0xff007270>

000072a8 <_fwalk_reent>:
    72a8:	defff704 	addi	sp,sp,-36
    72ac:	dd000415 	stw	r20,16(sp)
    72b0:	dfc00815 	stw	ra,32(sp)
    72b4:	ddc00715 	stw	r23,28(sp)
    72b8:	dd800615 	stw	r22,24(sp)
    72bc:	dd400515 	stw	r21,20(sp)
    72c0:	dcc00315 	stw	r19,12(sp)
    72c4:	dc800215 	stw	r18,8(sp)
    72c8:	dc400115 	stw	r17,4(sp)
    72cc:	dc000015 	stw	r16,0(sp)
    72d0:	2500b804 	addi	r20,r4,736
    72d4:	a0002326 	beq	r20,zero,7364 <_fwalk_reent+0xbc>
    72d8:	282b883a 	mov	r21,r5
    72dc:	2027883a 	mov	r19,r4
    72e0:	002f883a 	mov	r23,zero
    72e4:	05800044 	movi	r22,1
    72e8:	04bfffc4 	movi	r18,-1
    72ec:	a4400117 	ldw	r17,4(r20)
    72f0:	a4000217 	ldw	r16,8(r20)
    72f4:	8c7fffc4 	addi	r17,r17,-1
    72f8:	88000c16 	blt	r17,zero,732c <_fwalk_reent+0x84>
    72fc:	84000304 	addi	r16,r16,12
    7300:	8080000b 	ldhu	r2,0(r16)
    7304:	8c7fffc4 	addi	r17,r17,-1
    7308:	817ffd04 	addi	r5,r16,-12
    730c:	b080052e 	bgeu	r22,r2,7324 <_fwalk_reent+0x7c>
    7310:	8080008f 	ldh	r2,2(r16)
    7314:	9809883a 	mov	r4,r19
    7318:	14800226 	beq	r2,r18,7324 <_fwalk_reent+0x7c>
    731c:	a83ee83a 	callr	r21
    7320:	b8aeb03a 	or	r23,r23,r2
    7324:	84001a04 	addi	r16,r16,104
    7328:	8cbff51e 	bne	r17,r18,7300 <__alt_data_end+0xff007300>
    732c:	a5000017 	ldw	r20,0(r20)
    7330:	a03fee1e 	bne	r20,zero,72ec <__alt_data_end+0xff0072ec>
    7334:	b805883a 	mov	r2,r23
    7338:	dfc00817 	ldw	ra,32(sp)
    733c:	ddc00717 	ldw	r23,28(sp)
    7340:	dd800617 	ldw	r22,24(sp)
    7344:	dd400517 	ldw	r21,20(sp)
    7348:	dd000417 	ldw	r20,16(sp)
    734c:	dcc00317 	ldw	r19,12(sp)
    7350:	dc800217 	ldw	r18,8(sp)
    7354:	dc400117 	ldw	r17,4(sp)
    7358:	dc000017 	ldw	r16,0(sp)
    735c:	dec00904 	addi	sp,sp,36
    7360:	f800283a 	ret
    7364:	002f883a 	mov	r23,zero
    7368:	003ff206 	br	7334 <__alt_data_end+0xff007334>

0000736c <_setlocale_r>:
    736c:	30001b26 	beq	r6,zero,73dc <_setlocale_r+0x70>
    7370:	01400074 	movhi	r5,1
    7374:	defffe04 	addi	sp,sp,-8
    7378:	29417804 	addi	r5,r5,1504
    737c:	3009883a 	mov	r4,r6
    7380:	dc000015 	stw	r16,0(sp)
    7384:	dfc00115 	stw	ra,4(sp)
    7388:	3021883a 	mov	r16,r6
    738c:	00091c40 	call	91c4 <strcmp>
    7390:	1000061e 	bne	r2,zero,73ac <_setlocale_r+0x40>
    7394:	00800074 	movhi	r2,1
    7398:	10817704 	addi	r2,r2,1500
    739c:	dfc00117 	ldw	ra,4(sp)
    73a0:	dc000017 	ldw	r16,0(sp)
    73a4:	dec00204 	addi	sp,sp,8
    73a8:	f800283a 	ret
    73ac:	01400074 	movhi	r5,1
    73b0:	29417704 	addi	r5,r5,1500
    73b4:	8009883a 	mov	r4,r16
    73b8:	00091c40 	call	91c4 <strcmp>
    73bc:	103ff526 	beq	r2,zero,7394 <__alt_data_end+0xff007394>
    73c0:	01400074 	movhi	r5,1
    73c4:	29416204 	addi	r5,r5,1416
    73c8:	8009883a 	mov	r4,r16
    73cc:	00091c40 	call	91c4 <strcmp>
    73d0:	103ff026 	beq	r2,zero,7394 <__alt_data_end+0xff007394>
    73d4:	0005883a 	mov	r2,zero
    73d8:	003ff006 	br	739c <__alt_data_end+0xff00739c>
    73dc:	00800074 	movhi	r2,1
    73e0:	10817704 	addi	r2,r2,1500
    73e4:	f800283a 	ret

000073e8 <__locale_charset>:
    73e8:	00800074 	movhi	r2,1
    73ec:	10842604 	addi	r2,r2,4248
    73f0:	f800283a 	ret

000073f4 <__locale_mb_cur_max>:
    73f4:	00800074 	movhi	r2,1
    73f8:	1088c404 	addi	r2,r2,8976
    73fc:	10800017 	ldw	r2,0(r2)
    7400:	f800283a 	ret

00007404 <__locale_msgcharset>:
    7404:	00800074 	movhi	r2,1
    7408:	10841e04 	addi	r2,r2,4216
    740c:	f800283a 	ret

00007410 <__locale_cjk_lang>:
    7410:	0005883a 	mov	r2,zero
    7414:	f800283a 	ret

00007418 <_localeconv_r>:
    7418:	00800074 	movhi	r2,1
    741c:	10842e04 	addi	r2,r2,4280
    7420:	f800283a 	ret

00007424 <setlocale>:
    7424:	00800074 	movhi	r2,1
    7428:	1088c304 	addi	r2,r2,8972
    742c:	280d883a 	mov	r6,r5
    7430:	200b883a 	mov	r5,r4
    7434:	11000017 	ldw	r4,0(r2)
    7438:	000736c1 	jmpi	736c <_setlocale_r>

0000743c <localeconv>:
    743c:	00800074 	movhi	r2,1
    7440:	10842e04 	addi	r2,r2,4280
    7444:	f800283a 	ret

00007448 <__smakebuf_r>:
    7448:	2880030b 	ldhu	r2,12(r5)
    744c:	10c0008c 	andi	r3,r2,2
    7450:	1800411e 	bne	r3,zero,7558 <__smakebuf_r+0x110>
    7454:	deffec04 	addi	sp,sp,-80
    7458:	dc000f15 	stw	r16,60(sp)
    745c:	2821883a 	mov	r16,r5
    7460:	2940038f 	ldh	r5,14(r5)
    7464:	dc401015 	stw	r17,64(sp)
    7468:	dfc01315 	stw	ra,76(sp)
    746c:	dcc01215 	stw	r19,72(sp)
    7470:	dc801115 	stw	r18,68(sp)
    7474:	2023883a 	mov	r17,r4
    7478:	28001c16 	blt	r5,zero,74ec <__smakebuf_r+0xa4>
    747c:	d80d883a 	mov	r6,sp
    7480:	000ad6c0 	call	ad6c <_fstat_r>
    7484:	10001816 	blt	r2,zero,74e8 <__smakebuf_r+0xa0>
    7488:	d8800117 	ldw	r2,4(sp)
    748c:	00e00014 	movui	r3,32768
    7490:	10bc000c 	andi	r2,r2,61440
    7494:	14c80020 	cmpeqi	r19,r2,8192
    7498:	10c03726 	beq	r2,r3,7578 <__smakebuf_r+0x130>
    749c:	80c0030b 	ldhu	r3,12(r16)
    74a0:	18c20014 	ori	r3,r3,2048
    74a4:	80c0030d 	sth	r3,12(r16)
    74a8:	00c80004 	movi	r3,8192
    74ac:	10c0521e 	bne	r2,r3,75f8 <__smakebuf_r+0x1b0>
    74b0:	8140038f 	ldh	r5,14(r16)
    74b4:	8809883a 	mov	r4,r17
    74b8:	000adc80 	call	adc8 <_isatty_r>
    74bc:	10004c26 	beq	r2,zero,75f0 <__smakebuf_r+0x1a8>
    74c0:	8080030b 	ldhu	r2,12(r16)
    74c4:	80c010c4 	addi	r3,r16,67
    74c8:	80c00015 	stw	r3,0(r16)
    74cc:	10800054 	ori	r2,r2,1
    74d0:	8080030d 	sth	r2,12(r16)
    74d4:	00800044 	movi	r2,1
    74d8:	80c00415 	stw	r3,16(r16)
    74dc:	80800515 	stw	r2,20(r16)
    74e0:	04810004 	movi	r18,1024
    74e4:	00000706 	br	7504 <__smakebuf_r+0xbc>
    74e8:	8080030b 	ldhu	r2,12(r16)
    74ec:	10c0200c 	andi	r3,r2,128
    74f0:	18001f1e 	bne	r3,zero,7570 <__smakebuf_r+0x128>
    74f4:	04810004 	movi	r18,1024
    74f8:	10820014 	ori	r2,r2,2048
    74fc:	8080030d 	sth	r2,12(r16)
    7500:	0027883a 	mov	r19,zero
    7504:	900b883a 	mov	r5,r18
    7508:	8809883a 	mov	r4,r17
    750c:	0001bc80 	call	1bc8 <_malloc_r>
    7510:	10002c26 	beq	r2,zero,75c4 <__smakebuf_r+0x17c>
    7514:	80c0030b 	ldhu	r3,12(r16)
    7518:	01000034 	movhi	r4,0
    751c:	21195704 	addi	r4,r4,25948
    7520:	89000f15 	stw	r4,60(r17)
    7524:	18c02014 	ori	r3,r3,128
    7528:	80c0030d 	sth	r3,12(r16)
    752c:	80800015 	stw	r2,0(r16)
    7530:	80800415 	stw	r2,16(r16)
    7534:	84800515 	stw	r18,20(r16)
    7538:	98001a1e 	bne	r19,zero,75a4 <__smakebuf_r+0x15c>
    753c:	dfc01317 	ldw	ra,76(sp)
    7540:	dcc01217 	ldw	r19,72(sp)
    7544:	dc801117 	ldw	r18,68(sp)
    7548:	dc401017 	ldw	r17,64(sp)
    754c:	dc000f17 	ldw	r16,60(sp)
    7550:	dec01404 	addi	sp,sp,80
    7554:	f800283a 	ret
    7558:	288010c4 	addi	r2,r5,67
    755c:	28800015 	stw	r2,0(r5)
    7560:	28800415 	stw	r2,16(r5)
    7564:	00800044 	movi	r2,1
    7568:	28800515 	stw	r2,20(r5)
    756c:	f800283a 	ret
    7570:	04801004 	movi	r18,64
    7574:	003fe006 	br	74f8 <__alt_data_end+0xff0074f8>
    7578:	81000a17 	ldw	r4,40(r16)
    757c:	00c00074 	movhi	r3,1
    7580:	18e45804 	addi	r3,r3,-28320
    7584:	20ffc51e 	bne	r4,r3,749c <__alt_data_end+0xff00749c>
    7588:	8080030b 	ldhu	r2,12(r16)
    758c:	04810004 	movi	r18,1024
    7590:	84801315 	stw	r18,76(r16)
    7594:	1484b03a 	or	r2,r2,r18
    7598:	8080030d 	sth	r2,12(r16)
    759c:	0027883a 	mov	r19,zero
    75a0:	003fd806 	br	7504 <__alt_data_end+0xff007504>
    75a4:	8140038f 	ldh	r5,14(r16)
    75a8:	8809883a 	mov	r4,r17
    75ac:	000adc80 	call	adc8 <_isatty_r>
    75b0:	103fe226 	beq	r2,zero,753c <__alt_data_end+0xff00753c>
    75b4:	8080030b 	ldhu	r2,12(r16)
    75b8:	10800054 	ori	r2,r2,1
    75bc:	8080030d 	sth	r2,12(r16)
    75c0:	003fde06 	br	753c <__alt_data_end+0xff00753c>
    75c4:	8080030b 	ldhu	r2,12(r16)
    75c8:	10c0800c 	andi	r3,r2,512
    75cc:	183fdb1e 	bne	r3,zero,753c <__alt_data_end+0xff00753c>
    75d0:	10800094 	ori	r2,r2,2
    75d4:	80c010c4 	addi	r3,r16,67
    75d8:	8080030d 	sth	r2,12(r16)
    75dc:	00800044 	movi	r2,1
    75e0:	80c00015 	stw	r3,0(r16)
    75e4:	80c00415 	stw	r3,16(r16)
    75e8:	80800515 	stw	r2,20(r16)
    75ec:	003fd306 	br	753c <__alt_data_end+0xff00753c>
    75f0:	04810004 	movi	r18,1024
    75f4:	003fc306 	br	7504 <__alt_data_end+0xff007504>
    75f8:	0027883a 	mov	r19,zero
    75fc:	04810004 	movi	r18,1024
    7600:	003fc006 	br	7504 <__alt_data_end+0xff007504>

00007604 <memchr>:
    7604:	208000cc 	andi	r2,r4,3
    7608:	280f883a 	mov	r7,r5
    760c:	10003426 	beq	r2,zero,76e0 <memchr+0xdc>
    7610:	30bfffc4 	addi	r2,r6,-1
    7614:	30001a26 	beq	r6,zero,7680 <memchr+0x7c>
    7618:	20c00003 	ldbu	r3,0(r4)
    761c:	29803fcc 	andi	r6,r5,255
    7620:	30c0051e 	bne	r6,r3,7638 <memchr+0x34>
    7624:	00001806 	br	7688 <memchr+0x84>
    7628:	10001526 	beq	r2,zero,7680 <memchr+0x7c>
    762c:	20c00003 	ldbu	r3,0(r4)
    7630:	10bfffc4 	addi	r2,r2,-1
    7634:	30c01426 	beq	r6,r3,7688 <memchr+0x84>
    7638:	21000044 	addi	r4,r4,1
    763c:	20c000cc 	andi	r3,r4,3
    7640:	183ff91e 	bne	r3,zero,7628 <__alt_data_end+0xff007628>
    7644:	020000c4 	movi	r8,3
    7648:	40801136 	bltu	r8,r2,7690 <memchr+0x8c>
    764c:	10000c26 	beq	r2,zero,7680 <memchr+0x7c>
    7650:	20c00003 	ldbu	r3,0(r4)
    7654:	29403fcc 	andi	r5,r5,255
    7658:	28c00b26 	beq	r5,r3,7688 <memchr+0x84>
    765c:	20c00044 	addi	r3,r4,1
    7660:	39803fcc 	andi	r6,r7,255
    7664:	2089883a 	add	r4,r4,r2
    7668:	00000306 	br	7678 <memchr+0x74>
    766c:	18c00044 	addi	r3,r3,1
    7670:	197fffc3 	ldbu	r5,-1(r3)
    7674:	31400526 	beq	r6,r5,768c <memchr+0x88>
    7678:	1805883a 	mov	r2,r3
    767c:	20fffb1e 	bne	r4,r3,766c <__alt_data_end+0xff00766c>
    7680:	0005883a 	mov	r2,zero
    7684:	f800283a 	ret
    7688:	2005883a 	mov	r2,r4
    768c:	f800283a 	ret
    7690:	28c03fcc 	andi	r3,r5,255
    7694:	1812923a 	slli	r9,r3,8
    7698:	02ffbff4 	movhi	r11,65279
    769c:	02a02074 	movhi	r10,32897
    76a0:	48d2b03a 	or	r9,r9,r3
    76a4:	4806943a 	slli	r3,r9,16
    76a8:	5affbfc4 	addi	r11,r11,-257
    76ac:	52a02004 	addi	r10,r10,-32640
    76b0:	48d2b03a 	or	r9,r9,r3
    76b4:	20c00017 	ldw	r3,0(r4)
    76b8:	48c6f03a 	xor	r3,r9,r3
    76bc:	1acd883a 	add	r6,r3,r11
    76c0:	00c6303a 	nor	r3,zero,r3
    76c4:	30c6703a 	and	r3,r6,r3
    76c8:	1a86703a 	and	r3,r3,r10
    76cc:	183fe01e 	bne	r3,zero,7650 <__alt_data_end+0xff007650>
    76d0:	10bfff04 	addi	r2,r2,-4
    76d4:	21000104 	addi	r4,r4,4
    76d8:	40bff636 	bltu	r8,r2,76b4 <__alt_data_end+0xff0076b4>
    76dc:	003fdb06 	br	764c <__alt_data_end+0xff00764c>
    76e0:	3005883a 	mov	r2,r6
    76e4:	003fd706 	br	7644 <__alt_data_end+0xff007644>

000076e8 <memcpy>:
    76e8:	defffd04 	addi	sp,sp,-12
    76ec:	dfc00215 	stw	ra,8(sp)
    76f0:	dc400115 	stw	r17,4(sp)
    76f4:	dc000015 	stw	r16,0(sp)
    76f8:	00c003c4 	movi	r3,15
    76fc:	2005883a 	mov	r2,r4
    7700:	1980452e 	bgeu	r3,r6,7818 <memcpy+0x130>
    7704:	2906b03a 	or	r3,r5,r4
    7708:	18c000cc 	andi	r3,r3,3
    770c:	1800441e 	bne	r3,zero,7820 <memcpy+0x138>
    7710:	347ffc04 	addi	r17,r6,-16
    7714:	8822d13a 	srli	r17,r17,4
    7718:	28c00104 	addi	r3,r5,4
    771c:	23400104 	addi	r13,r4,4
    7720:	8820913a 	slli	r16,r17,4
    7724:	2b000204 	addi	r12,r5,8
    7728:	22c00204 	addi	r11,r4,8
    772c:	84000504 	addi	r16,r16,20
    7730:	2a800304 	addi	r10,r5,12
    7734:	22400304 	addi	r9,r4,12
    7738:	2c21883a 	add	r16,r5,r16
    773c:	2811883a 	mov	r8,r5
    7740:	200f883a 	mov	r7,r4
    7744:	41000017 	ldw	r4,0(r8)
    7748:	1fc00017 	ldw	ra,0(r3)
    774c:	63c00017 	ldw	r15,0(r12)
    7750:	39000015 	stw	r4,0(r7)
    7754:	53800017 	ldw	r14,0(r10)
    7758:	6fc00015 	stw	ra,0(r13)
    775c:	5bc00015 	stw	r15,0(r11)
    7760:	4b800015 	stw	r14,0(r9)
    7764:	18c00404 	addi	r3,r3,16
    7768:	39c00404 	addi	r7,r7,16
    776c:	42000404 	addi	r8,r8,16
    7770:	6b400404 	addi	r13,r13,16
    7774:	63000404 	addi	r12,r12,16
    7778:	5ac00404 	addi	r11,r11,16
    777c:	52800404 	addi	r10,r10,16
    7780:	4a400404 	addi	r9,r9,16
    7784:	1c3fef1e 	bne	r3,r16,7744 <__alt_data_end+0xff007744>
    7788:	89c00044 	addi	r7,r17,1
    778c:	380e913a 	slli	r7,r7,4
    7790:	310003cc 	andi	r4,r6,15
    7794:	02c000c4 	movi	r11,3
    7798:	11c7883a 	add	r3,r2,r7
    779c:	29cb883a 	add	r5,r5,r7
    77a0:	5900212e 	bgeu	r11,r4,7828 <memcpy+0x140>
    77a4:	1813883a 	mov	r9,r3
    77a8:	2811883a 	mov	r8,r5
    77ac:	200f883a 	mov	r7,r4
    77b0:	42800017 	ldw	r10,0(r8)
    77b4:	4a400104 	addi	r9,r9,4
    77b8:	39ffff04 	addi	r7,r7,-4
    77bc:	4abfff15 	stw	r10,-4(r9)
    77c0:	42000104 	addi	r8,r8,4
    77c4:	59fffa36 	bltu	r11,r7,77b0 <__alt_data_end+0xff0077b0>
    77c8:	213fff04 	addi	r4,r4,-4
    77cc:	2008d0ba 	srli	r4,r4,2
    77d0:	318000cc 	andi	r6,r6,3
    77d4:	21000044 	addi	r4,r4,1
    77d8:	2109883a 	add	r4,r4,r4
    77dc:	2109883a 	add	r4,r4,r4
    77e0:	1907883a 	add	r3,r3,r4
    77e4:	290b883a 	add	r5,r5,r4
    77e8:	30000626 	beq	r6,zero,7804 <memcpy+0x11c>
    77ec:	198d883a 	add	r6,r3,r6
    77f0:	29c00003 	ldbu	r7,0(r5)
    77f4:	18c00044 	addi	r3,r3,1
    77f8:	29400044 	addi	r5,r5,1
    77fc:	19ffffc5 	stb	r7,-1(r3)
    7800:	19bffb1e 	bne	r3,r6,77f0 <__alt_data_end+0xff0077f0>
    7804:	dfc00217 	ldw	ra,8(sp)
    7808:	dc400117 	ldw	r17,4(sp)
    780c:	dc000017 	ldw	r16,0(sp)
    7810:	dec00304 	addi	sp,sp,12
    7814:	f800283a 	ret
    7818:	2007883a 	mov	r3,r4
    781c:	003ff206 	br	77e8 <__alt_data_end+0xff0077e8>
    7820:	2007883a 	mov	r3,r4
    7824:	003ff106 	br	77ec <__alt_data_end+0xff0077ec>
    7828:	200d883a 	mov	r6,r4
    782c:	003fee06 	br	77e8 <__alt_data_end+0xff0077e8>

00007830 <memmove>:
    7830:	2005883a 	mov	r2,r4
    7834:	29000b2e 	bgeu	r5,r4,7864 <memmove+0x34>
    7838:	298f883a 	add	r7,r5,r6
    783c:	21c0092e 	bgeu	r4,r7,7864 <memmove+0x34>
    7840:	2187883a 	add	r3,r4,r6
    7844:	198bc83a 	sub	r5,r3,r6
    7848:	30004826 	beq	r6,zero,796c <memmove+0x13c>
    784c:	39ffffc4 	addi	r7,r7,-1
    7850:	39000003 	ldbu	r4,0(r7)
    7854:	18ffffc4 	addi	r3,r3,-1
    7858:	19000005 	stb	r4,0(r3)
    785c:	28fffb1e 	bne	r5,r3,784c <__alt_data_end+0xff00784c>
    7860:	f800283a 	ret
    7864:	00c003c4 	movi	r3,15
    7868:	1980412e 	bgeu	r3,r6,7970 <memmove+0x140>
    786c:	2886b03a 	or	r3,r5,r2
    7870:	18c000cc 	andi	r3,r3,3
    7874:	1800401e 	bne	r3,zero,7978 <memmove+0x148>
    7878:	33fffc04 	addi	r15,r6,-16
    787c:	781ed13a 	srli	r15,r15,4
    7880:	28c00104 	addi	r3,r5,4
    7884:	13400104 	addi	r13,r2,4
    7888:	781c913a 	slli	r14,r15,4
    788c:	2b000204 	addi	r12,r5,8
    7890:	12c00204 	addi	r11,r2,8
    7894:	73800504 	addi	r14,r14,20
    7898:	2a800304 	addi	r10,r5,12
    789c:	12400304 	addi	r9,r2,12
    78a0:	2b9d883a 	add	r14,r5,r14
    78a4:	2811883a 	mov	r8,r5
    78a8:	100f883a 	mov	r7,r2
    78ac:	41000017 	ldw	r4,0(r8)
    78b0:	39c00404 	addi	r7,r7,16
    78b4:	18c00404 	addi	r3,r3,16
    78b8:	393ffc15 	stw	r4,-16(r7)
    78bc:	193ffc17 	ldw	r4,-16(r3)
    78c0:	6b400404 	addi	r13,r13,16
    78c4:	5ac00404 	addi	r11,r11,16
    78c8:	693ffc15 	stw	r4,-16(r13)
    78cc:	61000017 	ldw	r4,0(r12)
    78d0:	4a400404 	addi	r9,r9,16
    78d4:	42000404 	addi	r8,r8,16
    78d8:	593ffc15 	stw	r4,-16(r11)
    78dc:	51000017 	ldw	r4,0(r10)
    78e0:	63000404 	addi	r12,r12,16
    78e4:	52800404 	addi	r10,r10,16
    78e8:	493ffc15 	stw	r4,-16(r9)
    78ec:	1bbfef1e 	bne	r3,r14,78ac <__alt_data_end+0xff0078ac>
    78f0:	79000044 	addi	r4,r15,1
    78f4:	2008913a 	slli	r4,r4,4
    78f8:	328003cc 	andi	r10,r6,15
    78fc:	02c000c4 	movi	r11,3
    7900:	1107883a 	add	r3,r2,r4
    7904:	290b883a 	add	r5,r5,r4
    7908:	5a801e2e 	bgeu	r11,r10,7984 <memmove+0x154>
    790c:	1813883a 	mov	r9,r3
    7910:	2811883a 	mov	r8,r5
    7914:	500f883a 	mov	r7,r10
    7918:	41000017 	ldw	r4,0(r8)
    791c:	4a400104 	addi	r9,r9,4
    7920:	39ffff04 	addi	r7,r7,-4
    7924:	493fff15 	stw	r4,-4(r9)
    7928:	42000104 	addi	r8,r8,4
    792c:	59fffa36 	bltu	r11,r7,7918 <__alt_data_end+0xff007918>
    7930:	513fff04 	addi	r4,r10,-4
    7934:	2008d0ba 	srli	r4,r4,2
    7938:	318000cc 	andi	r6,r6,3
    793c:	21000044 	addi	r4,r4,1
    7940:	2109883a 	add	r4,r4,r4
    7944:	2109883a 	add	r4,r4,r4
    7948:	1907883a 	add	r3,r3,r4
    794c:	290b883a 	add	r5,r5,r4
    7950:	30000b26 	beq	r6,zero,7980 <memmove+0x150>
    7954:	198d883a 	add	r6,r3,r6
    7958:	29c00003 	ldbu	r7,0(r5)
    795c:	18c00044 	addi	r3,r3,1
    7960:	29400044 	addi	r5,r5,1
    7964:	19ffffc5 	stb	r7,-1(r3)
    7968:	19bffb1e 	bne	r3,r6,7958 <__alt_data_end+0xff007958>
    796c:	f800283a 	ret
    7970:	1007883a 	mov	r3,r2
    7974:	003ff606 	br	7950 <__alt_data_end+0xff007950>
    7978:	1007883a 	mov	r3,r2
    797c:	003ff506 	br	7954 <__alt_data_end+0xff007954>
    7980:	f800283a 	ret
    7984:	500d883a 	mov	r6,r10
    7988:	003ff106 	br	7950 <__alt_data_end+0xff007950>

0000798c <memset>:
    798c:	20c000cc 	andi	r3,r4,3
    7990:	2005883a 	mov	r2,r4
    7994:	18004426 	beq	r3,zero,7aa8 <memset+0x11c>
    7998:	31ffffc4 	addi	r7,r6,-1
    799c:	30004026 	beq	r6,zero,7aa0 <memset+0x114>
    79a0:	2813883a 	mov	r9,r5
    79a4:	200d883a 	mov	r6,r4
    79a8:	2007883a 	mov	r3,r4
    79ac:	00000406 	br	79c0 <memset+0x34>
    79b0:	3a3fffc4 	addi	r8,r7,-1
    79b4:	31800044 	addi	r6,r6,1
    79b8:	38003926 	beq	r7,zero,7aa0 <memset+0x114>
    79bc:	400f883a 	mov	r7,r8
    79c0:	18c00044 	addi	r3,r3,1
    79c4:	32400005 	stb	r9,0(r6)
    79c8:	1a0000cc 	andi	r8,r3,3
    79cc:	403ff81e 	bne	r8,zero,79b0 <__alt_data_end+0xff0079b0>
    79d0:	010000c4 	movi	r4,3
    79d4:	21c02d2e 	bgeu	r4,r7,7a8c <memset+0x100>
    79d8:	29003fcc 	andi	r4,r5,255
    79dc:	200c923a 	slli	r6,r4,8
    79e0:	3108b03a 	or	r4,r6,r4
    79e4:	200c943a 	slli	r6,r4,16
    79e8:	218cb03a 	or	r6,r4,r6
    79ec:	010003c4 	movi	r4,15
    79f0:	21c0182e 	bgeu	r4,r7,7a54 <memset+0xc8>
    79f4:	3b3ffc04 	addi	r12,r7,-16
    79f8:	6018d13a 	srli	r12,r12,4
    79fc:	1a000104 	addi	r8,r3,4
    7a00:	1ac00204 	addi	r11,r3,8
    7a04:	6008913a 	slli	r4,r12,4
    7a08:	1a800304 	addi	r10,r3,12
    7a0c:	1813883a 	mov	r9,r3
    7a10:	21000504 	addi	r4,r4,20
    7a14:	1909883a 	add	r4,r3,r4
    7a18:	49800015 	stw	r6,0(r9)
    7a1c:	41800015 	stw	r6,0(r8)
    7a20:	59800015 	stw	r6,0(r11)
    7a24:	51800015 	stw	r6,0(r10)
    7a28:	42000404 	addi	r8,r8,16
    7a2c:	4a400404 	addi	r9,r9,16
    7a30:	5ac00404 	addi	r11,r11,16
    7a34:	52800404 	addi	r10,r10,16
    7a38:	413ff71e 	bne	r8,r4,7a18 <__alt_data_end+0xff007a18>
    7a3c:	63000044 	addi	r12,r12,1
    7a40:	6018913a 	slli	r12,r12,4
    7a44:	39c003cc 	andi	r7,r7,15
    7a48:	010000c4 	movi	r4,3
    7a4c:	1b07883a 	add	r3,r3,r12
    7a50:	21c00e2e 	bgeu	r4,r7,7a8c <memset+0x100>
    7a54:	1813883a 	mov	r9,r3
    7a58:	3811883a 	mov	r8,r7
    7a5c:	010000c4 	movi	r4,3
    7a60:	49800015 	stw	r6,0(r9)
    7a64:	423fff04 	addi	r8,r8,-4
    7a68:	4a400104 	addi	r9,r9,4
    7a6c:	223ffc36 	bltu	r4,r8,7a60 <__alt_data_end+0xff007a60>
    7a70:	393fff04 	addi	r4,r7,-4
    7a74:	2008d0ba 	srli	r4,r4,2
    7a78:	39c000cc 	andi	r7,r7,3
    7a7c:	21000044 	addi	r4,r4,1
    7a80:	2109883a 	add	r4,r4,r4
    7a84:	2109883a 	add	r4,r4,r4
    7a88:	1907883a 	add	r3,r3,r4
    7a8c:	38000526 	beq	r7,zero,7aa4 <memset+0x118>
    7a90:	19cf883a 	add	r7,r3,r7
    7a94:	19400005 	stb	r5,0(r3)
    7a98:	18c00044 	addi	r3,r3,1
    7a9c:	38fffd1e 	bne	r7,r3,7a94 <__alt_data_end+0xff007a94>
    7aa0:	f800283a 	ret
    7aa4:	f800283a 	ret
    7aa8:	2007883a 	mov	r3,r4
    7aac:	300f883a 	mov	r7,r6
    7ab0:	003fc706 	br	79d0 <__alt_data_end+0xff0079d0>

00007ab4 <_Balloc>:
    7ab4:	20801317 	ldw	r2,76(r4)
    7ab8:	defffc04 	addi	sp,sp,-16
    7abc:	dc400115 	stw	r17,4(sp)
    7ac0:	dc000015 	stw	r16,0(sp)
    7ac4:	dfc00315 	stw	ra,12(sp)
    7ac8:	dc800215 	stw	r18,8(sp)
    7acc:	2023883a 	mov	r17,r4
    7ad0:	2821883a 	mov	r16,r5
    7ad4:	10000f26 	beq	r2,zero,7b14 <_Balloc+0x60>
    7ad8:	8407883a 	add	r3,r16,r16
    7adc:	18c7883a 	add	r3,r3,r3
    7ae0:	10c7883a 	add	r3,r2,r3
    7ae4:	18800017 	ldw	r2,0(r3)
    7ae8:	10001126 	beq	r2,zero,7b30 <_Balloc+0x7c>
    7aec:	11000017 	ldw	r4,0(r2)
    7af0:	19000015 	stw	r4,0(r3)
    7af4:	10000415 	stw	zero,16(r2)
    7af8:	10000315 	stw	zero,12(r2)
    7afc:	dfc00317 	ldw	ra,12(sp)
    7b00:	dc800217 	ldw	r18,8(sp)
    7b04:	dc400117 	ldw	r17,4(sp)
    7b08:	dc000017 	ldw	r16,0(sp)
    7b0c:	dec00404 	addi	sp,sp,16
    7b10:	f800283a 	ret
    7b14:	01800844 	movi	r6,33
    7b18:	01400104 	movi	r5,4
    7b1c:	000a99c0 	call	a99c <_calloc_r>
    7b20:	88801315 	stw	r2,76(r17)
    7b24:	103fec1e 	bne	r2,zero,7ad8 <__alt_data_end+0xff007ad8>
    7b28:	0005883a 	mov	r2,zero
    7b2c:	003ff306 	br	7afc <__alt_data_end+0xff007afc>
    7b30:	01400044 	movi	r5,1
    7b34:	2c24983a 	sll	r18,r5,r16
    7b38:	8809883a 	mov	r4,r17
    7b3c:	91800144 	addi	r6,r18,5
    7b40:	318d883a 	add	r6,r6,r6
    7b44:	318d883a 	add	r6,r6,r6
    7b48:	000a99c0 	call	a99c <_calloc_r>
    7b4c:	103ff626 	beq	r2,zero,7b28 <__alt_data_end+0xff007b28>
    7b50:	14000115 	stw	r16,4(r2)
    7b54:	14800215 	stw	r18,8(r2)
    7b58:	003fe606 	br	7af4 <__alt_data_end+0xff007af4>

00007b5c <_Bfree>:
    7b5c:	28000826 	beq	r5,zero,7b80 <_Bfree+0x24>
    7b60:	28c00117 	ldw	r3,4(r5)
    7b64:	20801317 	ldw	r2,76(r4)
    7b68:	18c7883a 	add	r3,r3,r3
    7b6c:	18c7883a 	add	r3,r3,r3
    7b70:	10c5883a 	add	r2,r2,r3
    7b74:	10c00017 	ldw	r3,0(r2)
    7b78:	28c00015 	stw	r3,0(r5)
    7b7c:	11400015 	stw	r5,0(r2)
    7b80:	f800283a 	ret

00007b84 <__multadd>:
    7b84:	defffa04 	addi	sp,sp,-24
    7b88:	dc800315 	stw	r18,12(sp)
    7b8c:	dc400215 	stw	r17,8(sp)
    7b90:	dc000115 	stw	r16,4(sp)
    7b94:	2823883a 	mov	r17,r5
    7b98:	2c000417 	ldw	r16,16(r5)
    7b9c:	dfc00515 	stw	ra,20(sp)
    7ba0:	dcc00415 	stw	r19,16(sp)
    7ba4:	2025883a 	mov	r18,r4
    7ba8:	29400504 	addi	r5,r5,20
    7bac:	0011883a 	mov	r8,zero
    7bb0:	28c00017 	ldw	r3,0(r5)
    7bb4:	29400104 	addi	r5,r5,4
    7bb8:	42000044 	addi	r8,r8,1
    7bbc:	18bfffcc 	andi	r2,r3,65535
    7bc0:	1185383a 	mul	r2,r2,r6
    7bc4:	1806d43a 	srli	r3,r3,16
    7bc8:	11cf883a 	add	r7,r2,r7
    7bcc:	3808d43a 	srli	r4,r7,16
    7bd0:	1987383a 	mul	r3,r3,r6
    7bd4:	38bfffcc 	andi	r2,r7,65535
    7bd8:	1907883a 	add	r3,r3,r4
    7bdc:	1808943a 	slli	r4,r3,16
    7be0:	180ed43a 	srli	r7,r3,16
    7be4:	2085883a 	add	r2,r4,r2
    7be8:	28bfff15 	stw	r2,-4(r5)
    7bec:	443ff016 	blt	r8,r16,7bb0 <__alt_data_end+0xff007bb0>
    7bf0:	38000926 	beq	r7,zero,7c18 <__multadd+0x94>
    7bf4:	88800217 	ldw	r2,8(r17)
    7bf8:	80800f0e 	bge	r16,r2,7c38 <__multadd+0xb4>
    7bfc:	80800144 	addi	r2,r16,5
    7c00:	1085883a 	add	r2,r2,r2
    7c04:	1085883a 	add	r2,r2,r2
    7c08:	8885883a 	add	r2,r17,r2
    7c0c:	11c00015 	stw	r7,0(r2)
    7c10:	84000044 	addi	r16,r16,1
    7c14:	8c000415 	stw	r16,16(r17)
    7c18:	8805883a 	mov	r2,r17
    7c1c:	dfc00517 	ldw	ra,20(sp)
    7c20:	dcc00417 	ldw	r19,16(sp)
    7c24:	dc800317 	ldw	r18,12(sp)
    7c28:	dc400217 	ldw	r17,8(sp)
    7c2c:	dc000117 	ldw	r16,4(sp)
    7c30:	dec00604 	addi	sp,sp,24
    7c34:	f800283a 	ret
    7c38:	89400117 	ldw	r5,4(r17)
    7c3c:	9009883a 	mov	r4,r18
    7c40:	d9c00015 	stw	r7,0(sp)
    7c44:	29400044 	addi	r5,r5,1
    7c48:	0007ab40 	call	7ab4 <_Balloc>
    7c4c:	89800417 	ldw	r6,16(r17)
    7c50:	89400304 	addi	r5,r17,12
    7c54:	11000304 	addi	r4,r2,12
    7c58:	31800084 	addi	r6,r6,2
    7c5c:	318d883a 	add	r6,r6,r6
    7c60:	318d883a 	add	r6,r6,r6
    7c64:	1027883a 	mov	r19,r2
    7c68:	00076e80 	call	76e8 <memcpy>
    7c6c:	d9c00017 	ldw	r7,0(sp)
    7c70:	88000a26 	beq	r17,zero,7c9c <__multadd+0x118>
    7c74:	88c00117 	ldw	r3,4(r17)
    7c78:	90801317 	ldw	r2,76(r18)
    7c7c:	18c7883a 	add	r3,r3,r3
    7c80:	18c7883a 	add	r3,r3,r3
    7c84:	10c5883a 	add	r2,r2,r3
    7c88:	10c00017 	ldw	r3,0(r2)
    7c8c:	88c00015 	stw	r3,0(r17)
    7c90:	14400015 	stw	r17,0(r2)
    7c94:	9823883a 	mov	r17,r19
    7c98:	003fd806 	br	7bfc <__alt_data_end+0xff007bfc>
    7c9c:	9823883a 	mov	r17,r19
    7ca0:	003fd606 	br	7bfc <__alt_data_end+0xff007bfc>

00007ca4 <__s2b>:
    7ca4:	defff904 	addi	sp,sp,-28
    7ca8:	dc400115 	stw	r17,4(sp)
    7cac:	dc000015 	stw	r16,0(sp)
    7cb0:	2023883a 	mov	r17,r4
    7cb4:	2821883a 	mov	r16,r5
    7cb8:	39000204 	addi	r4,r7,8
    7cbc:	01400244 	movi	r5,9
    7cc0:	dcc00315 	stw	r19,12(sp)
    7cc4:	dc800215 	stw	r18,8(sp)
    7cc8:	dfc00615 	stw	ra,24(sp)
    7ccc:	dd400515 	stw	r21,20(sp)
    7cd0:	dd000415 	stw	r20,16(sp)
    7cd4:	3825883a 	mov	r18,r7
    7cd8:	3027883a 	mov	r19,r6
    7cdc:	000bccc0 	call	bccc <__divsi3>
    7ce0:	00c00044 	movi	r3,1
    7ce4:	000b883a 	mov	r5,zero
    7ce8:	1880030e 	bge	r3,r2,7cf8 <__s2b+0x54>
    7cec:	18c7883a 	add	r3,r3,r3
    7cf0:	29400044 	addi	r5,r5,1
    7cf4:	18bffd16 	blt	r3,r2,7cec <__alt_data_end+0xff007cec>
    7cf8:	8809883a 	mov	r4,r17
    7cfc:	0007ab40 	call	7ab4 <_Balloc>
    7d00:	d8c00717 	ldw	r3,28(sp)
    7d04:	10c00515 	stw	r3,20(r2)
    7d08:	00c00044 	movi	r3,1
    7d0c:	10c00415 	stw	r3,16(r2)
    7d10:	00c00244 	movi	r3,9
    7d14:	1cc0210e 	bge	r3,r19,7d9c <__s2b+0xf8>
    7d18:	80eb883a 	add	r21,r16,r3
    7d1c:	a829883a 	mov	r20,r21
    7d20:	84e1883a 	add	r16,r16,r19
    7d24:	a1c00007 	ldb	r7,0(r20)
    7d28:	01800284 	movi	r6,10
    7d2c:	a5000044 	addi	r20,r20,1
    7d30:	100b883a 	mov	r5,r2
    7d34:	39fff404 	addi	r7,r7,-48
    7d38:	8809883a 	mov	r4,r17
    7d3c:	0007b840 	call	7b84 <__multadd>
    7d40:	a43ff81e 	bne	r20,r16,7d24 <__alt_data_end+0xff007d24>
    7d44:	ace1883a 	add	r16,r21,r19
    7d48:	843ffe04 	addi	r16,r16,-8
    7d4c:	9c800a0e 	bge	r19,r18,7d78 <__s2b+0xd4>
    7d50:	94e5c83a 	sub	r18,r18,r19
    7d54:	84a5883a 	add	r18,r16,r18
    7d58:	81c00007 	ldb	r7,0(r16)
    7d5c:	01800284 	movi	r6,10
    7d60:	84000044 	addi	r16,r16,1
    7d64:	100b883a 	mov	r5,r2
    7d68:	39fff404 	addi	r7,r7,-48
    7d6c:	8809883a 	mov	r4,r17
    7d70:	0007b840 	call	7b84 <__multadd>
    7d74:	84bff81e 	bne	r16,r18,7d58 <__alt_data_end+0xff007d58>
    7d78:	dfc00617 	ldw	ra,24(sp)
    7d7c:	dd400517 	ldw	r21,20(sp)
    7d80:	dd000417 	ldw	r20,16(sp)
    7d84:	dcc00317 	ldw	r19,12(sp)
    7d88:	dc800217 	ldw	r18,8(sp)
    7d8c:	dc400117 	ldw	r17,4(sp)
    7d90:	dc000017 	ldw	r16,0(sp)
    7d94:	dec00704 	addi	sp,sp,28
    7d98:	f800283a 	ret
    7d9c:	84000284 	addi	r16,r16,10
    7da0:	1827883a 	mov	r19,r3
    7da4:	003fe906 	br	7d4c <__alt_data_end+0xff007d4c>

00007da8 <__hi0bits>:
    7da8:	20bfffec 	andhi	r2,r4,65535
    7dac:	1000141e 	bne	r2,zero,7e00 <__hi0bits+0x58>
    7db0:	2008943a 	slli	r4,r4,16
    7db4:	00800404 	movi	r2,16
    7db8:	20ffc02c 	andhi	r3,r4,65280
    7dbc:	1800021e 	bne	r3,zero,7dc8 <__hi0bits+0x20>
    7dc0:	2008923a 	slli	r4,r4,8
    7dc4:	10800204 	addi	r2,r2,8
    7dc8:	20fc002c 	andhi	r3,r4,61440
    7dcc:	1800021e 	bne	r3,zero,7dd8 <__hi0bits+0x30>
    7dd0:	2008913a 	slli	r4,r4,4
    7dd4:	10800104 	addi	r2,r2,4
    7dd8:	20f0002c 	andhi	r3,r4,49152
    7ddc:	1800031e 	bne	r3,zero,7dec <__hi0bits+0x44>
    7de0:	2109883a 	add	r4,r4,r4
    7de4:	10800084 	addi	r2,r2,2
    7de8:	2109883a 	add	r4,r4,r4
    7dec:	20000316 	blt	r4,zero,7dfc <__hi0bits+0x54>
    7df0:	2110002c 	andhi	r4,r4,16384
    7df4:	2000041e 	bne	r4,zero,7e08 <__hi0bits+0x60>
    7df8:	00800804 	movi	r2,32
    7dfc:	f800283a 	ret
    7e00:	0005883a 	mov	r2,zero
    7e04:	003fec06 	br	7db8 <__alt_data_end+0xff007db8>
    7e08:	10800044 	addi	r2,r2,1
    7e0c:	f800283a 	ret

00007e10 <__lo0bits>:
    7e10:	20c00017 	ldw	r3,0(r4)
    7e14:	188001cc 	andi	r2,r3,7
    7e18:	10000826 	beq	r2,zero,7e3c <__lo0bits+0x2c>
    7e1c:	1880004c 	andi	r2,r3,1
    7e20:	1000211e 	bne	r2,zero,7ea8 <__lo0bits+0x98>
    7e24:	1880008c 	andi	r2,r3,2
    7e28:	1000211e 	bne	r2,zero,7eb0 <__lo0bits+0xa0>
    7e2c:	1806d0ba 	srli	r3,r3,2
    7e30:	00800084 	movi	r2,2
    7e34:	20c00015 	stw	r3,0(r4)
    7e38:	f800283a 	ret
    7e3c:	18bfffcc 	andi	r2,r3,65535
    7e40:	10001326 	beq	r2,zero,7e90 <__lo0bits+0x80>
    7e44:	0005883a 	mov	r2,zero
    7e48:	19403fcc 	andi	r5,r3,255
    7e4c:	2800021e 	bne	r5,zero,7e58 <__lo0bits+0x48>
    7e50:	1806d23a 	srli	r3,r3,8
    7e54:	10800204 	addi	r2,r2,8
    7e58:	194003cc 	andi	r5,r3,15
    7e5c:	2800021e 	bne	r5,zero,7e68 <__lo0bits+0x58>
    7e60:	1806d13a 	srli	r3,r3,4
    7e64:	10800104 	addi	r2,r2,4
    7e68:	194000cc 	andi	r5,r3,3
    7e6c:	2800021e 	bne	r5,zero,7e78 <__lo0bits+0x68>
    7e70:	1806d0ba 	srli	r3,r3,2
    7e74:	10800084 	addi	r2,r2,2
    7e78:	1940004c 	andi	r5,r3,1
    7e7c:	2800081e 	bne	r5,zero,7ea0 <__lo0bits+0x90>
    7e80:	1806d07a 	srli	r3,r3,1
    7e84:	1800051e 	bne	r3,zero,7e9c <__lo0bits+0x8c>
    7e88:	00800804 	movi	r2,32
    7e8c:	f800283a 	ret
    7e90:	1806d43a 	srli	r3,r3,16
    7e94:	00800404 	movi	r2,16
    7e98:	003feb06 	br	7e48 <__alt_data_end+0xff007e48>
    7e9c:	10800044 	addi	r2,r2,1
    7ea0:	20c00015 	stw	r3,0(r4)
    7ea4:	f800283a 	ret
    7ea8:	0005883a 	mov	r2,zero
    7eac:	f800283a 	ret
    7eb0:	1806d07a 	srli	r3,r3,1
    7eb4:	00800044 	movi	r2,1
    7eb8:	20c00015 	stw	r3,0(r4)
    7ebc:	f800283a 	ret

00007ec0 <__i2b>:
    7ec0:	defffd04 	addi	sp,sp,-12
    7ec4:	dc000015 	stw	r16,0(sp)
    7ec8:	04000044 	movi	r16,1
    7ecc:	dc400115 	stw	r17,4(sp)
    7ed0:	2823883a 	mov	r17,r5
    7ed4:	800b883a 	mov	r5,r16
    7ed8:	dfc00215 	stw	ra,8(sp)
    7edc:	0007ab40 	call	7ab4 <_Balloc>
    7ee0:	14400515 	stw	r17,20(r2)
    7ee4:	14000415 	stw	r16,16(r2)
    7ee8:	dfc00217 	ldw	ra,8(sp)
    7eec:	dc400117 	ldw	r17,4(sp)
    7ef0:	dc000017 	ldw	r16,0(sp)
    7ef4:	dec00304 	addi	sp,sp,12
    7ef8:	f800283a 	ret

00007efc <__multiply>:
    7efc:	defffa04 	addi	sp,sp,-24
    7f00:	dcc00315 	stw	r19,12(sp)
    7f04:	dc800215 	stw	r18,8(sp)
    7f08:	34c00417 	ldw	r19,16(r6)
    7f0c:	2c800417 	ldw	r18,16(r5)
    7f10:	dd000415 	stw	r20,16(sp)
    7f14:	dc400115 	stw	r17,4(sp)
    7f18:	dfc00515 	stw	ra,20(sp)
    7f1c:	dc000015 	stw	r16,0(sp)
    7f20:	2829883a 	mov	r20,r5
    7f24:	3023883a 	mov	r17,r6
    7f28:	94c0050e 	bge	r18,r19,7f40 <__multiply+0x44>
    7f2c:	9007883a 	mov	r3,r18
    7f30:	3029883a 	mov	r20,r6
    7f34:	9825883a 	mov	r18,r19
    7f38:	2823883a 	mov	r17,r5
    7f3c:	1827883a 	mov	r19,r3
    7f40:	a0800217 	ldw	r2,8(r20)
    7f44:	94e1883a 	add	r16,r18,r19
    7f48:	a1400117 	ldw	r5,4(r20)
    7f4c:	1400010e 	bge	r2,r16,7f54 <__multiply+0x58>
    7f50:	29400044 	addi	r5,r5,1
    7f54:	0007ab40 	call	7ab4 <_Balloc>
    7f58:	8415883a 	add	r10,r16,r16
    7f5c:	12c00504 	addi	r11,r2,20
    7f60:	5295883a 	add	r10,r10,r10
    7f64:	5a95883a 	add	r10,r11,r10
    7f68:	5807883a 	mov	r3,r11
    7f6c:	5a80032e 	bgeu	r11,r10,7f7c <__multiply+0x80>
    7f70:	18000015 	stw	zero,0(r3)
    7f74:	18c00104 	addi	r3,r3,4
    7f78:	1abffd36 	bltu	r3,r10,7f70 <__alt_data_end+0xff007f70>
    7f7c:	9ce7883a 	add	r19,r19,r19
    7f80:	94a5883a 	add	r18,r18,r18
    7f84:	89800504 	addi	r6,r17,20
    7f88:	9ce7883a 	add	r19,r19,r19
    7f8c:	a3400504 	addi	r13,r20,20
    7f90:	94a5883a 	add	r18,r18,r18
    7f94:	34d9883a 	add	r12,r6,r19
    7f98:	6c93883a 	add	r9,r13,r18
    7f9c:	3300422e 	bgeu	r6,r12,80a8 <__multiply+0x1ac>
    7fa0:	37c00017 	ldw	ra,0(r6)
    7fa4:	fbffffcc 	andi	r15,ra,65535
    7fa8:	78001b26 	beq	r15,zero,8018 <__multiply+0x11c>
    7fac:	5811883a 	mov	r8,r11
    7fb0:	681d883a 	mov	r14,r13
    7fb4:	000f883a 	mov	r7,zero
    7fb8:	71000017 	ldw	r4,0(r14)
    7fbc:	40c00017 	ldw	r3,0(r8)
    7fc0:	73800104 	addi	r14,r14,4
    7fc4:	217fffcc 	andi	r5,r4,65535
    7fc8:	2bcb383a 	mul	r5,r5,r15
    7fcc:	2008d43a 	srli	r4,r4,16
    7fd0:	1c7fffcc 	andi	r17,r3,65535
    7fd4:	2c4b883a 	add	r5,r5,r17
    7fd8:	29cb883a 	add	r5,r5,r7
    7fdc:	23c9383a 	mul	r4,r4,r15
    7fe0:	1806d43a 	srli	r3,r3,16
    7fe4:	280ed43a 	srli	r7,r5,16
    7fe8:	297fffcc 	andi	r5,r5,65535
    7fec:	20c7883a 	add	r3,r4,r3
    7ff0:	19c7883a 	add	r3,r3,r7
    7ff4:	1808943a 	slli	r4,r3,16
    7ff8:	4023883a 	mov	r17,r8
    7ffc:	180ed43a 	srli	r7,r3,16
    8000:	214ab03a 	or	r5,r4,r5
    8004:	41400015 	stw	r5,0(r8)
    8008:	42000104 	addi	r8,r8,4
    800c:	727fea36 	bltu	r14,r9,7fb8 <__alt_data_end+0xff007fb8>
    8010:	89c00115 	stw	r7,4(r17)
    8014:	37c00017 	ldw	ra,0(r6)
    8018:	f83ed43a 	srli	ra,ra,16
    801c:	f8001f26 	beq	ra,zero,809c <__multiply+0x1a0>
    8020:	58c00017 	ldw	r3,0(r11)
    8024:	681d883a 	mov	r14,r13
    8028:	581f883a 	mov	r15,r11
    802c:	1811883a 	mov	r8,r3
    8030:	5825883a 	mov	r18,r11
    8034:	000f883a 	mov	r7,zero
    8038:	00000106 	br	8040 <__multiply+0x144>
    803c:	8825883a 	mov	r18,r17
    8040:	7140000b 	ldhu	r5,0(r14)
    8044:	4010d43a 	srli	r8,r8,16
    8048:	193fffcc 	andi	r4,r3,65535
    804c:	2fcb383a 	mul	r5,r5,ra
    8050:	7bc00104 	addi	r15,r15,4
    8054:	73800104 	addi	r14,r14,4
    8058:	2a0b883a 	add	r5,r5,r8
    805c:	29cb883a 	add	r5,r5,r7
    8060:	2806943a 	slli	r3,r5,16
    8064:	94400104 	addi	r17,r18,4
    8068:	280ad43a 	srli	r5,r5,16
    806c:	1908b03a 	or	r4,r3,r4
    8070:	793fff15 	stw	r4,-4(r15)
    8074:	70ffff17 	ldw	r3,-4(r14)
    8078:	8a000017 	ldw	r8,0(r17)
    807c:	1806d43a 	srli	r3,r3,16
    8080:	413fffcc 	andi	r4,r8,65535
    8084:	1fc7383a 	mul	r3,r3,ra
    8088:	1907883a 	add	r3,r3,r4
    808c:	1947883a 	add	r3,r3,r5
    8090:	180ed43a 	srli	r7,r3,16
    8094:	727fe936 	bltu	r14,r9,803c <__alt_data_end+0xff00803c>
    8098:	90c00115 	stw	r3,4(r18)
    809c:	31800104 	addi	r6,r6,4
    80a0:	5ac00104 	addi	r11,r11,4
    80a4:	333fbe36 	bltu	r6,r12,7fa0 <__alt_data_end+0xff007fa0>
    80a8:	0400090e 	bge	zero,r16,80d0 <__multiply+0x1d4>
    80ac:	50ffff17 	ldw	r3,-4(r10)
    80b0:	52bfff04 	addi	r10,r10,-4
    80b4:	18000326 	beq	r3,zero,80c4 <__multiply+0x1c8>
    80b8:	00000506 	br	80d0 <__multiply+0x1d4>
    80bc:	50c00017 	ldw	r3,0(r10)
    80c0:	1800031e 	bne	r3,zero,80d0 <__multiply+0x1d4>
    80c4:	843fffc4 	addi	r16,r16,-1
    80c8:	52bfff04 	addi	r10,r10,-4
    80cc:	803ffb1e 	bne	r16,zero,80bc <__alt_data_end+0xff0080bc>
    80d0:	14000415 	stw	r16,16(r2)
    80d4:	dfc00517 	ldw	ra,20(sp)
    80d8:	dd000417 	ldw	r20,16(sp)
    80dc:	dcc00317 	ldw	r19,12(sp)
    80e0:	dc800217 	ldw	r18,8(sp)
    80e4:	dc400117 	ldw	r17,4(sp)
    80e8:	dc000017 	ldw	r16,0(sp)
    80ec:	dec00604 	addi	sp,sp,24
    80f0:	f800283a 	ret

000080f4 <__pow5mult>:
    80f4:	defffa04 	addi	sp,sp,-24
    80f8:	dcc00315 	stw	r19,12(sp)
    80fc:	dc000015 	stw	r16,0(sp)
    8100:	dfc00515 	stw	ra,20(sp)
    8104:	dd000415 	stw	r20,16(sp)
    8108:	dc800215 	stw	r18,8(sp)
    810c:	dc400115 	stw	r17,4(sp)
    8110:	308000cc 	andi	r2,r6,3
    8114:	3021883a 	mov	r16,r6
    8118:	2027883a 	mov	r19,r4
    811c:	10002f1e 	bne	r2,zero,81dc <__pow5mult+0xe8>
    8120:	2825883a 	mov	r18,r5
    8124:	8021d0ba 	srai	r16,r16,2
    8128:	80001a26 	beq	r16,zero,8194 <__pow5mult+0xa0>
    812c:	9c401217 	ldw	r17,72(r19)
    8130:	8800061e 	bne	r17,zero,814c <__pow5mult+0x58>
    8134:	00003406 	br	8208 <__pow5mult+0x114>
    8138:	8021d07a 	srai	r16,r16,1
    813c:	80001526 	beq	r16,zero,8194 <__pow5mult+0xa0>
    8140:	88800017 	ldw	r2,0(r17)
    8144:	10001c26 	beq	r2,zero,81b8 <__pow5mult+0xc4>
    8148:	1023883a 	mov	r17,r2
    814c:	8080004c 	andi	r2,r16,1
    8150:	103ff926 	beq	r2,zero,8138 <__alt_data_end+0xff008138>
    8154:	880d883a 	mov	r6,r17
    8158:	900b883a 	mov	r5,r18
    815c:	9809883a 	mov	r4,r19
    8160:	0007efc0 	call	7efc <__multiply>
    8164:	90001b26 	beq	r18,zero,81d4 <__pow5mult+0xe0>
    8168:	91000117 	ldw	r4,4(r18)
    816c:	98c01317 	ldw	r3,76(r19)
    8170:	8021d07a 	srai	r16,r16,1
    8174:	2109883a 	add	r4,r4,r4
    8178:	2109883a 	add	r4,r4,r4
    817c:	1907883a 	add	r3,r3,r4
    8180:	19000017 	ldw	r4,0(r3)
    8184:	91000015 	stw	r4,0(r18)
    8188:	1c800015 	stw	r18,0(r3)
    818c:	1025883a 	mov	r18,r2
    8190:	803feb1e 	bne	r16,zero,8140 <__alt_data_end+0xff008140>
    8194:	9005883a 	mov	r2,r18
    8198:	dfc00517 	ldw	ra,20(sp)
    819c:	dd000417 	ldw	r20,16(sp)
    81a0:	dcc00317 	ldw	r19,12(sp)
    81a4:	dc800217 	ldw	r18,8(sp)
    81a8:	dc400117 	ldw	r17,4(sp)
    81ac:	dc000017 	ldw	r16,0(sp)
    81b0:	dec00604 	addi	sp,sp,24
    81b4:	f800283a 	ret
    81b8:	880d883a 	mov	r6,r17
    81bc:	880b883a 	mov	r5,r17
    81c0:	9809883a 	mov	r4,r19
    81c4:	0007efc0 	call	7efc <__multiply>
    81c8:	88800015 	stw	r2,0(r17)
    81cc:	10000015 	stw	zero,0(r2)
    81d0:	003fdd06 	br	8148 <__alt_data_end+0xff008148>
    81d4:	1025883a 	mov	r18,r2
    81d8:	003fd706 	br	8138 <__alt_data_end+0xff008138>
    81dc:	10bfffc4 	addi	r2,r2,-1
    81e0:	1085883a 	add	r2,r2,r2
    81e4:	00c00074 	movhi	r3,1
    81e8:	18c17b04 	addi	r3,r3,1516
    81ec:	1085883a 	add	r2,r2,r2
    81f0:	1885883a 	add	r2,r3,r2
    81f4:	11800017 	ldw	r6,0(r2)
    81f8:	000f883a 	mov	r7,zero
    81fc:	0007b840 	call	7b84 <__multadd>
    8200:	1025883a 	mov	r18,r2
    8204:	003fc706 	br	8124 <__alt_data_end+0xff008124>
    8208:	05000044 	movi	r20,1
    820c:	a00b883a 	mov	r5,r20
    8210:	9809883a 	mov	r4,r19
    8214:	0007ab40 	call	7ab4 <_Balloc>
    8218:	1023883a 	mov	r17,r2
    821c:	00809c44 	movi	r2,625
    8220:	88800515 	stw	r2,20(r17)
    8224:	8d000415 	stw	r20,16(r17)
    8228:	9c401215 	stw	r17,72(r19)
    822c:	88000015 	stw	zero,0(r17)
    8230:	003fc606 	br	814c <__alt_data_end+0xff00814c>

00008234 <__lshift>:
    8234:	defff904 	addi	sp,sp,-28
    8238:	dd400515 	stw	r21,20(sp)
    823c:	dcc00315 	stw	r19,12(sp)
    8240:	302bd17a 	srai	r21,r6,5
    8244:	2cc00417 	ldw	r19,16(r5)
    8248:	28800217 	ldw	r2,8(r5)
    824c:	dd000415 	stw	r20,16(sp)
    8250:	ace7883a 	add	r19,r21,r19
    8254:	dc800215 	stw	r18,8(sp)
    8258:	dc400115 	stw	r17,4(sp)
    825c:	dc000015 	stw	r16,0(sp)
    8260:	dfc00615 	stw	ra,24(sp)
    8264:	9c000044 	addi	r16,r19,1
    8268:	2823883a 	mov	r17,r5
    826c:	3029883a 	mov	r20,r6
    8270:	2025883a 	mov	r18,r4
    8274:	29400117 	ldw	r5,4(r5)
    8278:	1400030e 	bge	r2,r16,8288 <__lshift+0x54>
    827c:	1085883a 	add	r2,r2,r2
    8280:	29400044 	addi	r5,r5,1
    8284:	143ffd16 	blt	r2,r16,827c <__alt_data_end+0xff00827c>
    8288:	9009883a 	mov	r4,r18
    828c:	0007ab40 	call	7ab4 <_Balloc>
    8290:	10c00504 	addi	r3,r2,20
    8294:	0540070e 	bge	zero,r21,82b4 <__lshift+0x80>
    8298:	ad6b883a 	add	r21,r21,r21
    829c:	ad6b883a 	add	r21,r21,r21
    82a0:	1809883a 	mov	r4,r3
    82a4:	1d47883a 	add	r3,r3,r21
    82a8:	20000015 	stw	zero,0(r4)
    82ac:	21000104 	addi	r4,r4,4
    82b0:	193ffd1e 	bne	r3,r4,82a8 <__alt_data_end+0xff0082a8>
    82b4:	8a000417 	ldw	r8,16(r17)
    82b8:	89000504 	addi	r4,r17,20
    82bc:	a18007cc 	andi	r6,r20,31
    82c0:	4211883a 	add	r8,r8,r8
    82c4:	4211883a 	add	r8,r8,r8
    82c8:	2211883a 	add	r8,r4,r8
    82cc:	30002326 	beq	r6,zero,835c <__lshift+0x128>
    82d0:	02400804 	movi	r9,32
    82d4:	4993c83a 	sub	r9,r9,r6
    82d8:	000b883a 	mov	r5,zero
    82dc:	21c00017 	ldw	r7,0(r4)
    82e0:	1815883a 	mov	r10,r3
    82e4:	18c00104 	addi	r3,r3,4
    82e8:	398e983a 	sll	r7,r7,r6
    82ec:	21000104 	addi	r4,r4,4
    82f0:	394ab03a 	or	r5,r7,r5
    82f4:	197fff15 	stw	r5,-4(r3)
    82f8:	217fff17 	ldw	r5,-4(r4)
    82fc:	2a4ad83a 	srl	r5,r5,r9
    8300:	223ff636 	bltu	r4,r8,82dc <__alt_data_end+0xff0082dc>
    8304:	51400115 	stw	r5,4(r10)
    8308:	28001a1e 	bne	r5,zero,8374 <__lshift+0x140>
    830c:	843fffc4 	addi	r16,r16,-1
    8310:	14000415 	stw	r16,16(r2)
    8314:	88000826 	beq	r17,zero,8338 <__lshift+0x104>
    8318:	89000117 	ldw	r4,4(r17)
    831c:	90c01317 	ldw	r3,76(r18)
    8320:	2109883a 	add	r4,r4,r4
    8324:	2109883a 	add	r4,r4,r4
    8328:	1907883a 	add	r3,r3,r4
    832c:	19000017 	ldw	r4,0(r3)
    8330:	89000015 	stw	r4,0(r17)
    8334:	1c400015 	stw	r17,0(r3)
    8338:	dfc00617 	ldw	ra,24(sp)
    833c:	dd400517 	ldw	r21,20(sp)
    8340:	dd000417 	ldw	r20,16(sp)
    8344:	dcc00317 	ldw	r19,12(sp)
    8348:	dc800217 	ldw	r18,8(sp)
    834c:	dc400117 	ldw	r17,4(sp)
    8350:	dc000017 	ldw	r16,0(sp)
    8354:	dec00704 	addi	sp,sp,28
    8358:	f800283a 	ret
    835c:	21400017 	ldw	r5,0(r4)
    8360:	18c00104 	addi	r3,r3,4
    8364:	21000104 	addi	r4,r4,4
    8368:	197fff15 	stw	r5,-4(r3)
    836c:	223ffb36 	bltu	r4,r8,835c <__alt_data_end+0xff00835c>
    8370:	003fe606 	br	830c <__alt_data_end+0xff00830c>
    8374:	9c000084 	addi	r16,r19,2
    8378:	003fe406 	br	830c <__alt_data_end+0xff00830c>

0000837c <__mcmp>:
    837c:	20800417 	ldw	r2,16(r4)
    8380:	28c00417 	ldw	r3,16(r5)
    8384:	10c5c83a 	sub	r2,r2,r3
    8388:	1000111e 	bne	r2,zero,83d0 <__mcmp+0x54>
    838c:	18c7883a 	add	r3,r3,r3
    8390:	18c7883a 	add	r3,r3,r3
    8394:	21000504 	addi	r4,r4,20
    8398:	29400504 	addi	r5,r5,20
    839c:	20c5883a 	add	r2,r4,r3
    83a0:	28cb883a 	add	r5,r5,r3
    83a4:	00000106 	br	83ac <__mcmp+0x30>
    83a8:	20800a2e 	bgeu	r4,r2,83d4 <__mcmp+0x58>
    83ac:	10bfff04 	addi	r2,r2,-4
    83b0:	297fff04 	addi	r5,r5,-4
    83b4:	11800017 	ldw	r6,0(r2)
    83b8:	28c00017 	ldw	r3,0(r5)
    83bc:	30fffa26 	beq	r6,r3,83a8 <__alt_data_end+0xff0083a8>
    83c0:	30c00236 	bltu	r6,r3,83cc <__mcmp+0x50>
    83c4:	00800044 	movi	r2,1
    83c8:	f800283a 	ret
    83cc:	00bfffc4 	movi	r2,-1
    83d0:	f800283a 	ret
    83d4:	0005883a 	mov	r2,zero
    83d8:	f800283a 	ret

000083dc <__mdiff>:
    83dc:	28c00417 	ldw	r3,16(r5)
    83e0:	30800417 	ldw	r2,16(r6)
    83e4:	defffa04 	addi	sp,sp,-24
    83e8:	dcc00315 	stw	r19,12(sp)
    83ec:	dc800215 	stw	r18,8(sp)
    83f0:	dfc00515 	stw	ra,20(sp)
    83f4:	dd000415 	stw	r20,16(sp)
    83f8:	dc400115 	stw	r17,4(sp)
    83fc:	dc000015 	stw	r16,0(sp)
    8400:	1887c83a 	sub	r3,r3,r2
    8404:	2825883a 	mov	r18,r5
    8408:	3027883a 	mov	r19,r6
    840c:	1800141e 	bne	r3,zero,8460 <__mdiff+0x84>
    8410:	1085883a 	add	r2,r2,r2
    8414:	1085883a 	add	r2,r2,r2
    8418:	2a000504 	addi	r8,r5,20
    841c:	34000504 	addi	r16,r6,20
    8420:	4087883a 	add	r3,r8,r2
    8424:	8085883a 	add	r2,r16,r2
    8428:	00000106 	br	8430 <__mdiff+0x54>
    842c:	40c0592e 	bgeu	r8,r3,8594 <__mdiff+0x1b8>
    8430:	18ffff04 	addi	r3,r3,-4
    8434:	10bfff04 	addi	r2,r2,-4
    8438:	19c00017 	ldw	r7,0(r3)
    843c:	11400017 	ldw	r5,0(r2)
    8440:	397ffa26 	beq	r7,r5,842c <__alt_data_end+0xff00842c>
    8444:	3940592e 	bgeu	r7,r5,85ac <__mdiff+0x1d0>
    8448:	9005883a 	mov	r2,r18
    844c:	4023883a 	mov	r17,r8
    8450:	9825883a 	mov	r18,r19
    8454:	05000044 	movi	r20,1
    8458:	1027883a 	mov	r19,r2
    845c:	00000406 	br	8470 <__mdiff+0x94>
    8460:	18005616 	blt	r3,zero,85bc <__mdiff+0x1e0>
    8464:	34400504 	addi	r17,r6,20
    8468:	2c000504 	addi	r16,r5,20
    846c:	0029883a 	mov	r20,zero
    8470:	91400117 	ldw	r5,4(r18)
    8474:	0007ab40 	call	7ab4 <_Balloc>
    8478:	92400417 	ldw	r9,16(r18)
    847c:	9b000417 	ldw	r12,16(r19)
    8480:	12c00504 	addi	r11,r2,20
    8484:	4a51883a 	add	r8,r9,r9
    8488:	6319883a 	add	r12,r12,r12
    848c:	4211883a 	add	r8,r8,r8
    8490:	6319883a 	add	r12,r12,r12
    8494:	15000315 	stw	r20,12(r2)
    8498:	8211883a 	add	r8,r16,r8
    849c:	8b19883a 	add	r12,r17,r12
    84a0:	0007883a 	mov	r3,zero
    84a4:	81400017 	ldw	r5,0(r16)
    84a8:	89c00017 	ldw	r7,0(r17)
    84ac:	59800104 	addi	r6,r11,4
    84b0:	293fffcc 	andi	r4,r5,65535
    84b4:	20c7883a 	add	r3,r4,r3
    84b8:	393fffcc 	andi	r4,r7,65535
    84bc:	1909c83a 	sub	r4,r3,r4
    84c0:	280ad43a 	srli	r5,r5,16
    84c4:	380ed43a 	srli	r7,r7,16
    84c8:	2007d43a 	srai	r3,r4,16
    84cc:	213fffcc 	andi	r4,r4,65535
    84d0:	29cbc83a 	sub	r5,r5,r7
    84d4:	28c7883a 	add	r3,r5,r3
    84d8:	180a943a 	slli	r5,r3,16
    84dc:	8c400104 	addi	r17,r17,4
    84e0:	84000104 	addi	r16,r16,4
    84e4:	2908b03a 	or	r4,r5,r4
    84e8:	59000015 	stw	r4,0(r11)
    84ec:	1807d43a 	srai	r3,r3,16
    84f0:	3015883a 	mov	r10,r6
    84f4:	3017883a 	mov	r11,r6
    84f8:	8b3fea36 	bltu	r17,r12,84a4 <__alt_data_end+0xff0084a4>
    84fc:	8200162e 	bgeu	r16,r8,8558 <__mdiff+0x17c>
    8500:	8017883a 	mov	r11,r16
    8504:	59400017 	ldw	r5,0(r11)
    8508:	31800104 	addi	r6,r6,4
    850c:	5ac00104 	addi	r11,r11,4
    8510:	293fffcc 	andi	r4,r5,65535
    8514:	20c7883a 	add	r3,r4,r3
    8518:	280ed43a 	srli	r7,r5,16
    851c:	180bd43a 	srai	r5,r3,16
    8520:	193fffcc 	andi	r4,r3,65535
    8524:	3947883a 	add	r3,r7,r5
    8528:	180a943a 	slli	r5,r3,16
    852c:	1807d43a 	srai	r3,r3,16
    8530:	2908b03a 	or	r4,r5,r4
    8534:	313fff15 	stw	r4,-4(r6)
    8538:	5a3ff236 	bltu	r11,r8,8504 <__alt_data_end+0xff008504>
    853c:	0406303a 	nor	r3,zero,r16
    8540:	1a07883a 	add	r3,r3,r8
    8544:	1806d0ba 	srli	r3,r3,2
    8548:	18c00044 	addi	r3,r3,1
    854c:	18c7883a 	add	r3,r3,r3
    8550:	18c7883a 	add	r3,r3,r3
    8554:	50d5883a 	add	r10,r10,r3
    8558:	50ffff04 	addi	r3,r10,-4
    855c:	2000041e 	bne	r4,zero,8570 <__mdiff+0x194>
    8560:	18ffff04 	addi	r3,r3,-4
    8564:	19000017 	ldw	r4,0(r3)
    8568:	4a7fffc4 	addi	r9,r9,-1
    856c:	203ffc26 	beq	r4,zero,8560 <__alt_data_end+0xff008560>
    8570:	12400415 	stw	r9,16(r2)
    8574:	dfc00517 	ldw	ra,20(sp)
    8578:	dd000417 	ldw	r20,16(sp)
    857c:	dcc00317 	ldw	r19,12(sp)
    8580:	dc800217 	ldw	r18,8(sp)
    8584:	dc400117 	ldw	r17,4(sp)
    8588:	dc000017 	ldw	r16,0(sp)
    858c:	dec00604 	addi	sp,sp,24
    8590:	f800283a 	ret
    8594:	000b883a 	mov	r5,zero
    8598:	0007ab40 	call	7ab4 <_Balloc>
    859c:	00c00044 	movi	r3,1
    85a0:	10c00415 	stw	r3,16(r2)
    85a4:	10000515 	stw	zero,20(r2)
    85a8:	003ff206 	br	8574 <__alt_data_end+0xff008574>
    85ac:	8023883a 	mov	r17,r16
    85b0:	0029883a 	mov	r20,zero
    85b4:	4021883a 	mov	r16,r8
    85b8:	003fad06 	br	8470 <__alt_data_end+0xff008470>
    85bc:	9005883a 	mov	r2,r18
    85c0:	94400504 	addi	r17,r18,20
    85c4:	9c000504 	addi	r16,r19,20
    85c8:	9825883a 	mov	r18,r19
    85cc:	05000044 	movi	r20,1
    85d0:	1027883a 	mov	r19,r2
    85d4:	003fa606 	br	8470 <__alt_data_end+0xff008470>

000085d8 <__ulp>:
    85d8:	295ffc2c 	andhi	r5,r5,32752
    85dc:	00bf3034 	movhi	r2,64704
    85e0:	2887883a 	add	r3,r5,r2
    85e4:	00c0020e 	bge	zero,r3,85f0 <__ulp+0x18>
    85e8:	0005883a 	mov	r2,zero
    85ec:	f800283a 	ret
    85f0:	00c7c83a 	sub	r3,zero,r3
    85f4:	1807d53a 	srai	r3,r3,20
    85f8:	008004c4 	movi	r2,19
    85fc:	10c00b0e 	bge	r2,r3,862c <__ulp+0x54>
    8600:	18bffb04 	addi	r2,r3,-20
    8604:	01000784 	movi	r4,30
    8608:	0007883a 	mov	r3,zero
    860c:	20800516 	blt	r4,r2,8624 <__ulp+0x4c>
    8610:	010007c4 	movi	r4,31
    8614:	2089c83a 	sub	r4,r4,r2
    8618:	00800044 	movi	r2,1
    861c:	1104983a 	sll	r2,r2,r4
    8620:	f800283a 	ret
    8624:	00800044 	movi	r2,1
    8628:	f800283a 	ret
    862c:	01400234 	movhi	r5,8
    8630:	28c7d83a 	sra	r3,r5,r3
    8634:	0005883a 	mov	r2,zero
    8638:	f800283a 	ret

0000863c <__b2d>:
    863c:	defffa04 	addi	sp,sp,-24
    8640:	dc000015 	stw	r16,0(sp)
    8644:	24000417 	ldw	r16,16(r4)
    8648:	dc400115 	stw	r17,4(sp)
    864c:	24400504 	addi	r17,r4,20
    8650:	8421883a 	add	r16,r16,r16
    8654:	8421883a 	add	r16,r16,r16
    8658:	8c21883a 	add	r16,r17,r16
    865c:	dc800215 	stw	r18,8(sp)
    8660:	84bfff17 	ldw	r18,-4(r16)
    8664:	dd000415 	stw	r20,16(sp)
    8668:	dcc00315 	stw	r19,12(sp)
    866c:	9009883a 	mov	r4,r18
    8670:	2829883a 	mov	r20,r5
    8674:	dfc00515 	stw	ra,20(sp)
    8678:	0007da80 	call	7da8 <__hi0bits>
    867c:	00c00804 	movi	r3,32
    8680:	1889c83a 	sub	r4,r3,r2
    8684:	a1000015 	stw	r4,0(r20)
    8688:	01000284 	movi	r4,10
    868c:	84ffff04 	addi	r19,r16,-4
    8690:	20801216 	blt	r4,r2,86dc <__b2d+0xa0>
    8694:	018002c4 	movi	r6,11
    8698:	308dc83a 	sub	r6,r6,r2
    869c:	9186d83a 	srl	r3,r18,r6
    86a0:	18cffc34 	orhi	r3,r3,16368
    86a4:	8cc0212e 	bgeu	r17,r19,872c <__b2d+0xf0>
    86a8:	813ffe17 	ldw	r4,-8(r16)
    86ac:	218cd83a 	srl	r6,r4,r6
    86b0:	10800544 	addi	r2,r2,21
    86b4:	9084983a 	sll	r2,r18,r2
    86b8:	1184b03a 	or	r2,r2,r6
    86bc:	dfc00517 	ldw	ra,20(sp)
    86c0:	dd000417 	ldw	r20,16(sp)
    86c4:	dcc00317 	ldw	r19,12(sp)
    86c8:	dc800217 	ldw	r18,8(sp)
    86cc:	dc400117 	ldw	r17,4(sp)
    86d0:	dc000017 	ldw	r16,0(sp)
    86d4:	dec00604 	addi	sp,sp,24
    86d8:	f800283a 	ret
    86dc:	8cc00f2e 	bgeu	r17,r19,871c <__b2d+0xe0>
    86e0:	117ffd44 	addi	r5,r2,-11
    86e4:	80bffe17 	ldw	r2,-8(r16)
    86e8:	28000e26 	beq	r5,zero,8724 <__b2d+0xe8>
    86ec:	1949c83a 	sub	r4,r3,r5
    86f0:	9164983a 	sll	r18,r18,r5
    86f4:	1106d83a 	srl	r3,r2,r4
    86f8:	81bffe04 	addi	r6,r16,-8
    86fc:	948ffc34 	orhi	r18,r18,16368
    8700:	90c6b03a 	or	r3,r18,r3
    8704:	89800e2e 	bgeu	r17,r6,8740 <__b2d+0x104>
    8708:	81bffd17 	ldw	r6,-12(r16)
    870c:	1144983a 	sll	r2,r2,r5
    8710:	310ad83a 	srl	r5,r6,r4
    8714:	2884b03a 	or	r2,r5,r2
    8718:	003fe806 	br	86bc <__alt_data_end+0xff0086bc>
    871c:	10bffd44 	addi	r2,r2,-11
    8720:	1000041e 	bne	r2,zero,8734 <__b2d+0xf8>
    8724:	90cffc34 	orhi	r3,r18,16368
    8728:	003fe406 	br	86bc <__alt_data_end+0xff0086bc>
    872c:	000d883a 	mov	r6,zero
    8730:	003fdf06 	br	86b0 <__alt_data_end+0xff0086b0>
    8734:	90a4983a 	sll	r18,r18,r2
    8738:	0005883a 	mov	r2,zero
    873c:	003ff906 	br	8724 <__alt_data_end+0xff008724>
    8740:	1144983a 	sll	r2,r2,r5
    8744:	003fdd06 	br	86bc <__alt_data_end+0xff0086bc>

00008748 <__d2b>:
    8748:	defff804 	addi	sp,sp,-32
    874c:	dc000215 	stw	r16,8(sp)
    8750:	3021883a 	mov	r16,r6
    8754:	dc400315 	stw	r17,12(sp)
    8758:	8022907a 	slli	r17,r16,1
    875c:	dd000615 	stw	r20,24(sp)
    8760:	2829883a 	mov	r20,r5
    8764:	01400044 	movi	r5,1
    8768:	dcc00515 	stw	r19,20(sp)
    876c:	dc800415 	stw	r18,16(sp)
    8770:	dfc00715 	stw	ra,28(sp)
    8774:	3825883a 	mov	r18,r7
    8778:	8822d57a 	srli	r17,r17,21
    877c:	0007ab40 	call	7ab4 <_Balloc>
    8780:	1027883a 	mov	r19,r2
    8784:	00800434 	movhi	r2,16
    8788:	10bfffc4 	addi	r2,r2,-1
    878c:	808c703a 	and	r6,r16,r2
    8790:	88000126 	beq	r17,zero,8798 <__d2b+0x50>
    8794:	31800434 	orhi	r6,r6,16
    8798:	d9800015 	stw	r6,0(sp)
    879c:	a0002426 	beq	r20,zero,8830 <__d2b+0xe8>
    87a0:	d9000104 	addi	r4,sp,4
    87a4:	dd000115 	stw	r20,4(sp)
    87a8:	0007e100 	call	7e10 <__lo0bits>
    87ac:	d8c00017 	ldw	r3,0(sp)
    87b0:	10002f1e 	bne	r2,zero,8870 <__d2b+0x128>
    87b4:	d9000117 	ldw	r4,4(sp)
    87b8:	99000515 	stw	r4,20(r19)
    87bc:	1821003a 	cmpeq	r16,r3,zero
    87c0:	01000084 	movi	r4,2
    87c4:	2421c83a 	sub	r16,r4,r16
    87c8:	98c00615 	stw	r3,24(r19)
    87cc:	9c000415 	stw	r16,16(r19)
    87d0:	88001f1e 	bne	r17,zero,8850 <__d2b+0x108>
    87d4:	10bef384 	addi	r2,r2,-1074
    87d8:	90800015 	stw	r2,0(r18)
    87dc:	00900034 	movhi	r2,16384
    87e0:	10bfffc4 	addi	r2,r2,-1
    87e4:	8085883a 	add	r2,r16,r2
    87e8:	1085883a 	add	r2,r2,r2
    87ec:	1085883a 	add	r2,r2,r2
    87f0:	9885883a 	add	r2,r19,r2
    87f4:	11000517 	ldw	r4,20(r2)
    87f8:	8020917a 	slli	r16,r16,5
    87fc:	0007da80 	call	7da8 <__hi0bits>
    8800:	d8c00817 	ldw	r3,32(sp)
    8804:	8085c83a 	sub	r2,r16,r2
    8808:	18800015 	stw	r2,0(r3)
    880c:	9805883a 	mov	r2,r19
    8810:	dfc00717 	ldw	ra,28(sp)
    8814:	dd000617 	ldw	r20,24(sp)
    8818:	dcc00517 	ldw	r19,20(sp)
    881c:	dc800417 	ldw	r18,16(sp)
    8820:	dc400317 	ldw	r17,12(sp)
    8824:	dc000217 	ldw	r16,8(sp)
    8828:	dec00804 	addi	sp,sp,32
    882c:	f800283a 	ret
    8830:	d809883a 	mov	r4,sp
    8834:	0007e100 	call	7e10 <__lo0bits>
    8838:	d8c00017 	ldw	r3,0(sp)
    883c:	04000044 	movi	r16,1
    8840:	9c000415 	stw	r16,16(r19)
    8844:	98c00515 	stw	r3,20(r19)
    8848:	10800804 	addi	r2,r2,32
    884c:	883fe126 	beq	r17,zero,87d4 <__alt_data_end+0xff0087d4>
    8850:	00c00d44 	movi	r3,53
    8854:	8c7ef344 	addi	r17,r17,-1075
    8858:	88a3883a 	add	r17,r17,r2
    885c:	1885c83a 	sub	r2,r3,r2
    8860:	d8c00817 	ldw	r3,32(sp)
    8864:	94400015 	stw	r17,0(r18)
    8868:	18800015 	stw	r2,0(r3)
    886c:	003fe706 	br	880c <__alt_data_end+0xff00880c>
    8870:	01000804 	movi	r4,32
    8874:	2089c83a 	sub	r4,r4,r2
    8878:	1908983a 	sll	r4,r3,r4
    887c:	d9400117 	ldw	r5,4(sp)
    8880:	1886d83a 	srl	r3,r3,r2
    8884:	2148b03a 	or	r4,r4,r5
    8888:	99000515 	stw	r4,20(r19)
    888c:	d8c00015 	stw	r3,0(sp)
    8890:	003fca06 	br	87bc <__alt_data_end+0xff0087bc>

00008894 <__ratio>:
    8894:	defff904 	addi	sp,sp,-28
    8898:	dc400315 	stw	r17,12(sp)
    889c:	2823883a 	mov	r17,r5
    88a0:	d9400104 	addi	r5,sp,4
    88a4:	dfc00615 	stw	ra,24(sp)
    88a8:	dcc00515 	stw	r19,20(sp)
    88ac:	dc800415 	stw	r18,16(sp)
    88b0:	2027883a 	mov	r19,r4
    88b4:	dc000215 	stw	r16,8(sp)
    88b8:	000863c0 	call	863c <__b2d>
    88bc:	d80b883a 	mov	r5,sp
    88c0:	8809883a 	mov	r4,r17
    88c4:	1025883a 	mov	r18,r2
    88c8:	1821883a 	mov	r16,r3
    88cc:	000863c0 	call	863c <__b2d>
    88d0:	8a000417 	ldw	r8,16(r17)
    88d4:	99000417 	ldw	r4,16(r19)
    88d8:	d9400117 	ldw	r5,4(sp)
    88dc:	2209c83a 	sub	r4,r4,r8
    88e0:	2010917a 	slli	r8,r4,5
    88e4:	d9000017 	ldw	r4,0(sp)
    88e8:	2909c83a 	sub	r4,r5,r4
    88ec:	4109883a 	add	r4,r8,r4
    88f0:	01000e0e 	bge	zero,r4,892c <__ratio+0x98>
    88f4:	2008953a 	slli	r4,r4,20
    88f8:	2421883a 	add	r16,r4,r16
    88fc:	100d883a 	mov	r6,r2
    8900:	180f883a 	mov	r7,r3
    8904:	9009883a 	mov	r4,r18
    8908:	800b883a 	mov	r5,r16
    890c:	000c72c0 	call	c72c <__divdf3>
    8910:	dfc00617 	ldw	ra,24(sp)
    8914:	dcc00517 	ldw	r19,20(sp)
    8918:	dc800417 	ldw	r18,16(sp)
    891c:	dc400317 	ldw	r17,12(sp)
    8920:	dc000217 	ldw	r16,8(sp)
    8924:	dec00704 	addi	sp,sp,28
    8928:	f800283a 	ret
    892c:	2008953a 	slli	r4,r4,20
    8930:	1907c83a 	sub	r3,r3,r4
    8934:	003ff106 	br	88fc <__alt_data_end+0xff0088fc>

00008938 <_mprec_log10>:
    8938:	defffe04 	addi	sp,sp,-8
    893c:	dc000015 	stw	r16,0(sp)
    8940:	dfc00115 	stw	ra,4(sp)
    8944:	008005c4 	movi	r2,23
    8948:	2021883a 	mov	r16,r4
    894c:	11000d0e 	bge	r2,r4,8984 <_mprec_log10+0x4c>
    8950:	0005883a 	mov	r2,zero
    8954:	00cffc34 	movhi	r3,16368
    8958:	843fffc4 	addi	r16,r16,-1
    895c:	000d883a 	mov	r6,zero
    8960:	01d00934 	movhi	r7,16420
    8964:	1009883a 	mov	r4,r2
    8968:	180b883a 	mov	r5,r3
    896c:	000d26c0 	call	d26c <__muldf3>
    8970:	803ff91e 	bne	r16,zero,8958 <__alt_data_end+0xff008958>
    8974:	dfc00117 	ldw	ra,4(sp)
    8978:	dc000017 	ldw	r16,0(sp)
    897c:	dec00204 	addi	sp,sp,8
    8980:	f800283a 	ret
    8984:	202090fa 	slli	r16,r4,3
    8988:	00800074 	movhi	r2,1
    898c:	10819204 	addi	r2,r2,1608
    8990:	1421883a 	add	r16,r2,r16
    8994:	80800017 	ldw	r2,0(r16)
    8998:	80c00117 	ldw	r3,4(r16)
    899c:	dfc00117 	ldw	ra,4(sp)
    89a0:	dc000017 	ldw	r16,0(sp)
    89a4:	dec00204 	addi	sp,sp,8
    89a8:	f800283a 	ret

000089ac <__copybits>:
    89ac:	297fffc4 	addi	r5,r5,-1
    89b0:	280fd17a 	srai	r7,r5,5
    89b4:	30c00417 	ldw	r3,16(r6)
    89b8:	30800504 	addi	r2,r6,20
    89bc:	39c00044 	addi	r7,r7,1
    89c0:	18c7883a 	add	r3,r3,r3
    89c4:	39cf883a 	add	r7,r7,r7
    89c8:	18c7883a 	add	r3,r3,r3
    89cc:	39cf883a 	add	r7,r7,r7
    89d0:	10c7883a 	add	r3,r2,r3
    89d4:	21cf883a 	add	r7,r4,r7
    89d8:	10c00d2e 	bgeu	r2,r3,8a10 <__copybits+0x64>
    89dc:	200b883a 	mov	r5,r4
    89e0:	12000017 	ldw	r8,0(r2)
    89e4:	29400104 	addi	r5,r5,4
    89e8:	10800104 	addi	r2,r2,4
    89ec:	2a3fff15 	stw	r8,-4(r5)
    89f0:	10fffb36 	bltu	r2,r3,89e0 <__alt_data_end+0xff0089e0>
    89f4:	1985c83a 	sub	r2,r3,r6
    89f8:	10bffac4 	addi	r2,r2,-21
    89fc:	1004d0ba 	srli	r2,r2,2
    8a00:	10800044 	addi	r2,r2,1
    8a04:	1085883a 	add	r2,r2,r2
    8a08:	1085883a 	add	r2,r2,r2
    8a0c:	2089883a 	add	r4,r4,r2
    8a10:	21c0032e 	bgeu	r4,r7,8a20 <__copybits+0x74>
    8a14:	20000015 	stw	zero,0(r4)
    8a18:	21000104 	addi	r4,r4,4
    8a1c:	21fffd36 	bltu	r4,r7,8a14 <__alt_data_end+0xff008a14>
    8a20:	f800283a 	ret

00008a24 <__any_on>:
    8a24:	20c00417 	ldw	r3,16(r4)
    8a28:	2805d17a 	srai	r2,r5,5
    8a2c:	21000504 	addi	r4,r4,20
    8a30:	18800d0e 	bge	r3,r2,8a68 <__any_on+0x44>
    8a34:	18c7883a 	add	r3,r3,r3
    8a38:	18c7883a 	add	r3,r3,r3
    8a3c:	20c7883a 	add	r3,r4,r3
    8a40:	20c0192e 	bgeu	r4,r3,8aa8 <__any_on+0x84>
    8a44:	18bfff17 	ldw	r2,-4(r3)
    8a48:	18ffff04 	addi	r3,r3,-4
    8a4c:	1000041e 	bne	r2,zero,8a60 <__any_on+0x3c>
    8a50:	20c0142e 	bgeu	r4,r3,8aa4 <__any_on+0x80>
    8a54:	18ffff04 	addi	r3,r3,-4
    8a58:	19400017 	ldw	r5,0(r3)
    8a5c:	283ffc26 	beq	r5,zero,8a50 <__alt_data_end+0xff008a50>
    8a60:	00800044 	movi	r2,1
    8a64:	f800283a 	ret
    8a68:	10c00a0e 	bge	r2,r3,8a94 <__any_on+0x70>
    8a6c:	1085883a 	add	r2,r2,r2
    8a70:	1085883a 	add	r2,r2,r2
    8a74:	294007cc 	andi	r5,r5,31
    8a78:	2087883a 	add	r3,r4,r2
    8a7c:	283ff026 	beq	r5,zero,8a40 <__alt_data_end+0xff008a40>
    8a80:	19800017 	ldw	r6,0(r3)
    8a84:	3144d83a 	srl	r2,r6,r5
    8a88:	114a983a 	sll	r5,r2,r5
    8a8c:	317ff41e 	bne	r6,r5,8a60 <__alt_data_end+0xff008a60>
    8a90:	003feb06 	br	8a40 <__alt_data_end+0xff008a40>
    8a94:	1085883a 	add	r2,r2,r2
    8a98:	1085883a 	add	r2,r2,r2
    8a9c:	2087883a 	add	r3,r4,r2
    8aa0:	003fe706 	br	8a40 <__alt_data_end+0xff008a40>
    8aa4:	f800283a 	ret
    8aa8:	0005883a 	mov	r2,zero
    8aac:	f800283a 	ret

00008ab0 <_realloc_r>:
    8ab0:	defff604 	addi	sp,sp,-40
    8ab4:	dc800215 	stw	r18,8(sp)
    8ab8:	dfc00915 	stw	ra,36(sp)
    8abc:	df000815 	stw	fp,32(sp)
    8ac0:	ddc00715 	stw	r23,28(sp)
    8ac4:	dd800615 	stw	r22,24(sp)
    8ac8:	dd400515 	stw	r21,20(sp)
    8acc:	dd000415 	stw	r20,16(sp)
    8ad0:	dcc00315 	stw	r19,12(sp)
    8ad4:	dc400115 	stw	r17,4(sp)
    8ad8:	dc000015 	stw	r16,0(sp)
    8adc:	3025883a 	mov	r18,r6
    8ae0:	2800b726 	beq	r5,zero,8dc0 <_realloc_r+0x310>
    8ae4:	282b883a 	mov	r21,r5
    8ae8:	2029883a 	mov	r20,r4
    8aec:	000e8500 	call	e850 <__malloc_lock>
    8af0:	a8bfff17 	ldw	r2,-4(r21)
    8af4:	043fff04 	movi	r16,-4
    8af8:	90c002c4 	addi	r3,r18,11
    8afc:	01000584 	movi	r4,22
    8b00:	acfffe04 	addi	r19,r21,-8
    8b04:	1420703a 	and	r16,r2,r16
    8b08:	20c0332e 	bgeu	r4,r3,8bd8 <_realloc_r+0x128>
    8b0c:	047ffe04 	movi	r17,-8
    8b10:	1c62703a 	and	r17,r3,r17
    8b14:	8807883a 	mov	r3,r17
    8b18:	88005816 	blt	r17,zero,8c7c <_realloc_r+0x1cc>
    8b1c:	8c805736 	bltu	r17,r18,8c7c <_realloc_r+0x1cc>
    8b20:	80c0300e 	bge	r16,r3,8be4 <_realloc_r+0x134>
    8b24:	07000074 	movhi	fp,1
    8b28:	e7021304 	addi	fp,fp,2124
    8b2c:	e1c00217 	ldw	r7,8(fp)
    8b30:	9c09883a 	add	r4,r19,r16
    8b34:	22000117 	ldw	r8,4(r4)
    8b38:	21c06326 	beq	r4,r7,8cc8 <_realloc_r+0x218>
    8b3c:	017fff84 	movi	r5,-2
    8b40:	414a703a 	and	r5,r8,r5
    8b44:	214b883a 	add	r5,r4,r5
    8b48:	29800117 	ldw	r6,4(r5)
    8b4c:	3180004c 	andi	r6,r6,1
    8b50:	30003f26 	beq	r6,zero,8c50 <_realloc_r+0x1a0>
    8b54:	1080004c 	andi	r2,r2,1
    8b58:	10008326 	beq	r2,zero,8d68 <_realloc_r+0x2b8>
    8b5c:	900b883a 	mov	r5,r18
    8b60:	a009883a 	mov	r4,r20
    8b64:	0001bc80 	call	1bc8 <_malloc_r>
    8b68:	1025883a 	mov	r18,r2
    8b6c:	10011e26 	beq	r2,zero,8fe8 <_realloc_r+0x538>
    8b70:	a93fff17 	ldw	r4,-4(r21)
    8b74:	10fffe04 	addi	r3,r2,-8
    8b78:	00bfff84 	movi	r2,-2
    8b7c:	2084703a 	and	r2,r4,r2
    8b80:	9885883a 	add	r2,r19,r2
    8b84:	1880ee26 	beq	r3,r2,8f40 <_realloc_r+0x490>
    8b88:	81bfff04 	addi	r6,r16,-4
    8b8c:	00800904 	movi	r2,36
    8b90:	1180b836 	bltu	r2,r6,8e74 <_realloc_r+0x3c4>
    8b94:	00c004c4 	movi	r3,19
    8b98:	19809636 	bltu	r3,r6,8df4 <_realloc_r+0x344>
    8b9c:	9005883a 	mov	r2,r18
    8ba0:	a807883a 	mov	r3,r21
    8ba4:	19000017 	ldw	r4,0(r3)
    8ba8:	11000015 	stw	r4,0(r2)
    8bac:	19000117 	ldw	r4,4(r3)
    8bb0:	11000115 	stw	r4,4(r2)
    8bb4:	18c00217 	ldw	r3,8(r3)
    8bb8:	10c00215 	stw	r3,8(r2)
    8bbc:	a80b883a 	mov	r5,r21
    8bc0:	a009883a 	mov	r4,r20
    8bc4:	0006a180 	call	6a18 <_free_r>
    8bc8:	a009883a 	mov	r4,r20
    8bcc:	000e8540 	call	e854 <__malloc_unlock>
    8bd0:	9005883a 	mov	r2,r18
    8bd4:	00001206 	br	8c20 <_realloc_r+0x170>
    8bd8:	00c00404 	movi	r3,16
    8bdc:	1823883a 	mov	r17,r3
    8be0:	003fce06 	br	8b1c <__alt_data_end+0xff008b1c>
    8be4:	a825883a 	mov	r18,r21
    8be8:	8445c83a 	sub	r2,r16,r17
    8bec:	00c003c4 	movi	r3,15
    8bf0:	18802636 	bltu	r3,r2,8c8c <_realloc_r+0x1dc>
    8bf4:	99800117 	ldw	r6,4(r19)
    8bf8:	9c07883a 	add	r3,r19,r16
    8bfc:	3180004c 	andi	r6,r6,1
    8c00:	3420b03a 	or	r16,r6,r16
    8c04:	9c000115 	stw	r16,4(r19)
    8c08:	18800117 	ldw	r2,4(r3)
    8c0c:	10800054 	ori	r2,r2,1
    8c10:	18800115 	stw	r2,4(r3)
    8c14:	a009883a 	mov	r4,r20
    8c18:	000e8540 	call	e854 <__malloc_unlock>
    8c1c:	9005883a 	mov	r2,r18
    8c20:	dfc00917 	ldw	ra,36(sp)
    8c24:	df000817 	ldw	fp,32(sp)
    8c28:	ddc00717 	ldw	r23,28(sp)
    8c2c:	dd800617 	ldw	r22,24(sp)
    8c30:	dd400517 	ldw	r21,20(sp)
    8c34:	dd000417 	ldw	r20,16(sp)
    8c38:	dcc00317 	ldw	r19,12(sp)
    8c3c:	dc800217 	ldw	r18,8(sp)
    8c40:	dc400117 	ldw	r17,4(sp)
    8c44:	dc000017 	ldw	r16,0(sp)
    8c48:	dec00a04 	addi	sp,sp,40
    8c4c:	f800283a 	ret
    8c50:	017fff04 	movi	r5,-4
    8c54:	414a703a 	and	r5,r8,r5
    8c58:	814d883a 	add	r6,r16,r5
    8c5c:	30c01f16 	blt	r6,r3,8cdc <_realloc_r+0x22c>
    8c60:	20800317 	ldw	r2,12(r4)
    8c64:	20c00217 	ldw	r3,8(r4)
    8c68:	a825883a 	mov	r18,r21
    8c6c:	3021883a 	mov	r16,r6
    8c70:	18800315 	stw	r2,12(r3)
    8c74:	10c00215 	stw	r3,8(r2)
    8c78:	003fdb06 	br	8be8 <__alt_data_end+0xff008be8>
    8c7c:	00800304 	movi	r2,12
    8c80:	a0800015 	stw	r2,0(r20)
    8c84:	0005883a 	mov	r2,zero
    8c88:	003fe506 	br	8c20 <__alt_data_end+0xff008c20>
    8c8c:	98c00117 	ldw	r3,4(r19)
    8c90:	9c4b883a 	add	r5,r19,r17
    8c94:	11000054 	ori	r4,r2,1
    8c98:	18c0004c 	andi	r3,r3,1
    8c9c:	1c62b03a 	or	r17,r3,r17
    8ca0:	9c400115 	stw	r17,4(r19)
    8ca4:	29000115 	stw	r4,4(r5)
    8ca8:	2885883a 	add	r2,r5,r2
    8cac:	10c00117 	ldw	r3,4(r2)
    8cb0:	29400204 	addi	r5,r5,8
    8cb4:	a009883a 	mov	r4,r20
    8cb8:	18c00054 	ori	r3,r3,1
    8cbc:	10c00115 	stw	r3,4(r2)
    8cc0:	0006a180 	call	6a18 <_free_r>
    8cc4:	003fd306 	br	8c14 <__alt_data_end+0xff008c14>
    8cc8:	017fff04 	movi	r5,-4
    8ccc:	414a703a 	and	r5,r8,r5
    8cd0:	89800404 	addi	r6,r17,16
    8cd4:	8151883a 	add	r8,r16,r5
    8cd8:	4180590e 	bge	r8,r6,8e40 <_realloc_r+0x390>
    8cdc:	1080004c 	andi	r2,r2,1
    8ce0:	103f9e1e 	bne	r2,zero,8b5c <__alt_data_end+0xff008b5c>
    8ce4:	adbffe17 	ldw	r22,-8(r21)
    8ce8:	00bfff04 	movi	r2,-4
    8cec:	9dadc83a 	sub	r22,r19,r22
    8cf0:	b1800117 	ldw	r6,4(r22)
    8cf4:	3084703a 	and	r2,r6,r2
    8cf8:	20002026 	beq	r4,zero,8d7c <_realloc_r+0x2cc>
    8cfc:	80af883a 	add	r23,r16,r2
    8d00:	b96f883a 	add	r23,r23,r5
    8d04:	21c05f26 	beq	r4,r7,8e84 <_realloc_r+0x3d4>
    8d08:	b8c01c16 	blt	r23,r3,8d7c <_realloc_r+0x2cc>
    8d0c:	20800317 	ldw	r2,12(r4)
    8d10:	20c00217 	ldw	r3,8(r4)
    8d14:	81bfff04 	addi	r6,r16,-4
    8d18:	01000904 	movi	r4,36
    8d1c:	18800315 	stw	r2,12(r3)
    8d20:	10c00215 	stw	r3,8(r2)
    8d24:	b0c00217 	ldw	r3,8(r22)
    8d28:	b0800317 	ldw	r2,12(r22)
    8d2c:	b4800204 	addi	r18,r22,8
    8d30:	18800315 	stw	r2,12(r3)
    8d34:	10c00215 	stw	r3,8(r2)
    8d38:	21801b36 	bltu	r4,r6,8da8 <_realloc_r+0x2f8>
    8d3c:	008004c4 	movi	r2,19
    8d40:	1180352e 	bgeu	r2,r6,8e18 <_realloc_r+0x368>
    8d44:	a8800017 	ldw	r2,0(r21)
    8d48:	b0800215 	stw	r2,8(r22)
    8d4c:	a8800117 	ldw	r2,4(r21)
    8d50:	b0800315 	stw	r2,12(r22)
    8d54:	008006c4 	movi	r2,27
    8d58:	11807f36 	bltu	r2,r6,8f58 <_realloc_r+0x4a8>
    8d5c:	b0800404 	addi	r2,r22,16
    8d60:	ad400204 	addi	r21,r21,8
    8d64:	00002d06 	br	8e1c <_realloc_r+0x36c>
    8d68:	adbffe17 	ldw	r22,-8(r21)
    8d6c:	00bfff04 	movi	r2,-4
    8d70:	9dadc83a 	sub	r22,r19,r22
    8d74:	b1000117 	ldw	r4,4(r22)
    8d78:	2084703a 	and	r2,r4,r2
    8d7c:	b03f7726 	beq	r22,zero,8b5c <__alt_data_end+0xff008b5c>
    8d80:	80af883a 	add	r23,r16,r2
    8d84:	b8ff7516 	blt	r23,r3,8b5c <__alt_data_end+0xff008b5c>
    8d88:	b0800317 	ldw	r2,12(r22)
    8d8c:	b0c00217 	ldw	r3,8(r22)
    8d90:	81bfff04 	addi	r6,r16,-4
    8d94:	01000904 	movi	r4,36
    8d98:	18800315 	stw	r2,12(r3)
    8d9c:	10c00215 	stw	r3,8(r2)
    8da0:	b4800204 	addi	r18,r22,8
    8da4:	21bfe52e 	bgeu	r4,r6,8d3c <__alt_data_end+0xff008d3c>
    8da8:	a80b883a 	mov	r5,r21
    8dac:	9009883a 	mov	r4,r18
    8db0:	00078300 	call	7830 <memmove>
    8db4:	b821883a 	mov	r16,r23
    8db8:	b027883a 	mov	r19,r22
    8dbc:	003f8a06 	br	8be8 <__alt_data_end+0xff008be8>
    8dc0:	300b883a 	mov	r5,r6
    8dc4:	dfc00917 	ldw	ra,36(sp)
    8dc8:	df000817 	ldw	fp,32(sp)
    8dcc:	ddc00717 	ldw	r23,28(sp)
    8dd0:	dd800617 	ldw	r22,24(sp)
    8dd4:	dd400517 	ldw	r21,20(sp)
    8dd8:	dd000417 	ldw	r20,16(sp)
    8ddc:	dcc00317 	ldw	r19,12(sp)
    8de0:	dc800217 	ldw	r18,8(sp)
    8de4:	dc400117 	ldw	r17,4(sp)
    8de8:	dc000017 	ldw	r16,0(sp)
    8dec:	dec00a04 	addi	sp,sp,40
    8df0:	0001bc81 	jmpi	1bc8 <_malloc_r>
    8df4:	a8c00017 	ldw	r3,0(r21)
    8df8:	90c00015 	stw	r3,0(r18)
    8dfc:	a8c00117 	ldw	r3,4(r21)
    8e00:	90c00115 	stw	r3,4(r18)
    8e04:	00c006c4 	movi	r3,27
    8e08:	19804536 	bltu	r3,r6,8f20 <_realloc_r+0x470>
    8e0c:	90800204 	addi	r2,r18,8
    8e10:	a8c00204 	addi	r3,r21,8
    8e14:	003f6306 	br	8ba4 <__alt_data_end+0xff008ba4>
    8e18:	9005883a 	mov	r2,r18
    8e1c:	a8c00017 	ldw	r3,0(r21)
    8e20:	b821883a 	mov	r16,r23
    8e24:	b027883a 	mov	r19,r22
    8e28:	10c00015 	stw	r3,0(r2)
    8e2c:	a8c00117 	ldw	r3,4(r21)
    8e30:	10c00115 	stw	r3,4(r2)
    8e34:	a8c00217 	ldw	r3,8(r21)
    8e38:	10c00215 	stw	r3,8(r2)
    8e3c:	003f6a06 	br	8be8 <__alt_data_end+0xff008be8>
    8e40:	9c67883a 	add	r19,r19,r17
    8e44:	4445c83a 	sub	r2,r8,r17
    8e48:	e4c00215 	stw	r19,8(fp)
    8e4c:	10800054 	ori	r2,r2,1
    8e50:	98800115 	stw	r2,4(r19)
    8e54:	a8bfff17 	ldw	r2,-4(r21)
    8e58:	a009883a 	mov	r4,r20
    8e5c:	1080004c 	andi	r2,r2,1
    8e60:	1462b03a 	or	r17,r2,r17
    8e64:	ac7fff15 	stw	r17,-4(r21)
    8e68:	000e8540 	call	e854 <__malloc_unlock>
    8e6c:	a805883a 	mov	r2,r21
    8e70:	003f6b06 	br	8c20 <__alt_data_end+0xff008c20>
    8e74:	a80b883a 	mov	r5,r21
    8e78:	9009883a 	mov	r4,r18
    8e7c:	00078300 	call	7830 <memmove>
    8e80:	003f4e06 	br	8bbc <__alt_data_end+0xff008bbc>
    8e84:	89000404 	addi	r4,r17,16
    8e88:	b93fbc16 	blt	r23,r4,8d7c <__alt_data_end+0xff008d7c>
    8e8c:	b0800317 	ldw	r2,12(r22)
    8e90:	b0c00217 	ldw	r3,8(r22)
    8e94:	81bfff04 	addi	r6,r16,-4
    8e98:	01000904 	movi	r4,36
    8e9c:	18800315 	stw	r2,12(r3)
    8ea0:	10c00215 	stw	r3,8(r2)
    8ea4:	b4800204 	addi	r18,r22,8
    8ea8:	21804336 	bltu	r4,r6,8fb8 <_realloc_r+0x508>
    8eac:	008004c4 	movi	r2,19
    8eb0:	11803f2e 	bgeu	r2,r6,8fb0 <_realloc_r+0x500>
    8eb4:	a8800017 	ldw	r2,0(r21)
    8eb8:	b0800215 	stw	r2,8(r22)
    8ebc:	a8800117 	ldw	r2,4(r21)
    8ec0:	b0800315 	stw	r2,12(r22)
    8ec4:	008006c4 	movi	r2,27
    8ec8:	11803f36 	bltu	r2,r6,8fc8 <_realloc_r+0x518>
    8ecc:	b0800404 	addi	r2,r22,16
    8ed0:	ad400204 	addi	r21,r21,8
    8ed4:	a8c00017 	ldw	r3,0(r21)
    8ed8:	10c00015 	stw	r3,0(r2)
    8edc:	a8c00117 	ldw	r3,4(r21)
    8ee0:	10c00115 	stw	r3,4(r2)
    8ee4:	a8c00217 	ldw	r3,8(r21)
    8ee8:	10c00215 	stw	r3,8(r2)
    8eec:	b447883a 	add	r3,r22,r17
    8ef0:	bc45c83a 	sub	r2,r23,r17
    8ef4:	e0c00215 	stw	r3,8(fp)
    8ef8:	10800054 	ori	r2,r2,1
    8efc:	18800115 	stw	r2,4(r3)
    8f00:	b0800117 	ldw	r2,4(r22)
    8f04:	a009883a 	mov	r4,r20
    8f08:	1080004c 	andi	r2,r2,1
    8f0c:	1462b03a 	or	r17,r2,r17
    8f10:	b4400115 	stw	r17,4(r22)
    8f14:	000e8540 	call	e854 <__malloc_unlock>
    8f18:	9005883a 	mov	r2,r18
    8f1c:	003f4006 	br	8c20 <__alt_data_end+0xff008c20>
    8f20:	a8c00217 	ldw	r3,8(r21)
    8f24:	90c00215 	stw	r3,8(r18)
    8f28:	a8c00317 	ldw	r3,12(r21)
    8f2c:	90c00315 	stw	r3,12(r18)
    8f30:	30801126 	beq	r6,r2,8f78 <_realloc_r+0x4c8>
    8f34:	90800404 	addi	r2,r18,16
    8f38:	a8c00404 	addi	r3,r21,16
    8f3c:	003f1906 	br	8ba4 <__alt_data_end+0xff008ba4>
    8f40:	90ffff17 	ldw	r3,-4(r18)
    8f44:	00bfff04 	movi	r2,-4
    8f48:	a825883a 	mov	r18,r21
    8f4c:	1884703a 	and	r2,r3,r2
    8f50:	80a1883a 	add	r16,r16,r2
    8f54:	003f2406 	br	8be8 <__alt_data_end+0xff008be8>
    8f58:	a8800217 	ldw	r2,8(r21)
    8f5c:	b0800415 	stw	r2,16(r22)
    8f60:	a8800317 	ldw	r2,12(r21)
    8f64:	b0800515 	stw	r2,20(r22)
    8f68:	31000a26 	beq	r6,r4,8f94 <_realloc_r+0x4e4>
    8f6c:	b0800604 	addi	r2,r22,24
    8f70:	ad400404 	addi	r21,r21,16
    8f74:	003fa906 	br	8e1c <__alt_data_end+0xff008e1c>
    8f78:	a9000417 	ldw	r4,16(r21)
    8f7c:	90800604 	addi	r2,r18,24
    8f80:	a8c00604 	addi	r3,r21,24
    8f84:	91000415 	stw	r4,16(r18)
    8f88:	a9000517 	ldw	r4,20(r21)
    8f8c:	91000515 	stw	r4,20(r18)
    8f90:	003f0406 	br	8ba4 <__alt_data_end+0xff008ba4>
    8f94:	a8c00417 	ldw	r3,16(r21)
    8f98:	ad400604 	addi	r21,r21,24
    8f9c:	b0800804 	addi	r2,r22,32
    8fa0:	b0c00615 	stw	r3,24(r22)
    8fa4:	a8ffff17 	ldw	r3,-4(r21)
    8fa8:	b0c00715 	stw	r3,28(r22)
    8fac:	003f9b06 	br	8e1c <__alt_data_end+0xff008e1c>
    8fb0:	9005883a 	mov	r2,r18
    8fb4:	003fc706 	br	8ed4 <__alt_data_end+0xff008ed4>
    8fb8:	a80b883a 	mov	r5,r21
    8fbc:	9009883a 	mov	r4,r18
    8fc0:	00078300 	call	7830 <memmove>
    8fc4:	003fc906 	br	8eec <__alt_data_end+0xff008eec>
    8fc8:	a8800217 	ldw	r2,8(r21)
    8fcc:	b0800415 	stw	r2,16(r22)
    8fd0:	a8800317 	ldw	r2,12(r21)
    8fd4:	b0800515 	stw	r2,20(r22)
    8fd8:	31000726 	beq	r6,r4,8ff8 <_realloc_r+0x548>
    8fdc:	b0800604 	addi	r2,r22,24
    8fe0:	ad400404 	addi	r21,r21,16
    8fe4:	003fbb06 	br	8ed4 <__alt_data_end+0xff008ed4>
    8fe8:	a009883a 	mov	r4,r20
    8fec:	000e8540 	call	e854 <__malloc_unlock>
    8ff0:	0005883a 	mov	r2,zero
    8ff4:	003f0a06 	br	8c20 <__alt_data_end+0xff008c20>
    8ff8:	a8c00417 	ldw	r3,16(r21)
    8ffc:	ad400604 	addi	r21,r21,24
    9000:	b0800804 	addi	r2,r22,32
    9004:	b0c00615 	stw	r3,24(r22)
    9008:	a8ffff17 	ldw	r3,-4(r21)
    900c:	b0c00715 	stw	r3,28(r22)
    9010:	003fb006 	br	8ed4 <__alt_data_end+0xff008ed4>

00009014 <__fpclassifyd>:
    9014:	00a00034 	movhi	r2,32768
    9018:	10bfffc4 	addi	r2,r2,-1
    901c:	2884703a 	and	r2,r5,r2
    9020:	10000726 	beq	r2,zero,9040 <__fpclassifyd+0x2c>
    9024:	00fffc34 	movhi	r3,65520
    9028:	019ff834 	movhi	r6,32736
    902c:	28c7883a 	add	r3,r5,r3
    9030:	31bfffc4 	addi	r6,r6,-1
    9034:	30c00536 	bltu	r6,r3,904c <__fpclassifyd+0x38>
    9038:	00800104 	movi	r2,4
    903c:	f800283a 	ret
    9040:	2000021e 	bne	r4,zero,904c <__fpclassifyd+0x38>
    9044:	00800084 	movi	r2,2
    9048:	f800283a 	ret
    904c:	00dffc34 	movhi	r3,32752
    9050:	019ff834 	movhi	r6,32736
    9054:	28cb883a 	add	r5,r5,r3
    9058:	31bfffc4 	addi	r6,r6,-1
    905c:	317ff62e 	bgeu	r6,r5,9038 <__alt_data_end+0xff009038>
    9060:	01400434 	movhi	r5,16
    9064:	297fffc4 	addi	r5,r5,-1
    9068:	28800236 	bltu	r5,r2,9074 <__fpclassifyd+0x60>
    906c:	008000c4 	movi	r2,3
    9070:	f800283a 	ret
    9074:	10c00226 	beq	r2,r3,9080 <__fpclassifyd+0x6c>
    9078:	0005883a 	mov	r2,zero
    907c:	f800283a 	ret
    9080:	2005003a 	cmpeq	r2,r4,zero
    9084:	f800283a 	ret

00009088 <__sread>:
    9088:	defffe04 	addi	sp,sp,-8
    908c:	dc000015 	stw	r16,0(sp)
    9090:	2821883a 	mov	r16,r5
    9094:	2940038f 	ldh	r5,14(r5)
    9098:	dfc00115 	stw	ra,4(sp)
    909c:	000ae7c0 	call	ae7c <_read_r>
    90a0:	10000716 	blt	r2,zero,90c0 <__sread+0x38>
    90a4:	80c01417 	ldw	r3,80(r16)
    90a8:	1887883a 	add	r3,r3,r2
    90ac:	80c01415 	stw	r3,80(r16)
    90b0:	dfc00117 	ldw	ra,4(sp)
    90b4:	dc000017 	ldw	r16,0(sp)
    90b8:	dec00204 	addi	sp,sp,8
    90bc:	f800283a 	ret
    90c0:	80c0030b 	ldhu	r3,12(r16)
    90c4:	18fbffcc 	andi	r3,r3,61439
    90c8:	80c0030d 	sth	r3,12(r16)
    90cc:	dfc00117 	ldw	ra,4(sp)
    90d0:	dc000017 	ldw	r16,0(sp)
    90d4:	dec00204 	addi	sp,sp,8
    90d8:	f800283a 	ret

000090dc <__seofread>:
    90dc:	0005883a 	mov	r2,zero
    90e0:	f800283a 	ret

000090e4 <__swrite>:
    90e4:	2880030b 	ldhu	r2,12(r5)
    90e8:	defffb04 	addi	sp,sp,-20
    90ec:	dcc00315 	stw	r19,12(sp)
    90f0:	dc800215 	stw	r18,8(sp)
    90f4:	dc400115 	stw	r17,4(sp)
    90f8:	dc000015 	stw	r16,0(sp)
    90fc:	dfc00415 	stw	ra,16(sp)
    9100:	10c0400c 	andi	r3,r2,256
    9104:	2821883a 	mov	r16,r5
    9108:	2023883a 	mov	r17,r4
    910c:	3025883a 	mov	r18,r6
    9110:	3827883a 	mov	r19,r7
    9114:	18000526 	beq	r3,zero,912c <__swrite+0x48>
    9118:	2940038f 	ldh	r5,14(r5)
    911c:	01c00084 	movi	r7,2
    9120:	000d883a 	mov	r6,zero
    9124:	000ae1c0 	call	ae1c <_lseek_r>
    9128:	8080030b 	ldhu	r2,12(r16)
    912c:	8140038f 	ldh	r5,14(r16)
    9130:	10bbffcc 	andi	r2,r2,61439
    9134:	980f883a 	mov	r7,r19
    9138:	900d883a 	mov	r6,r18
    913c:	8809883a 	mov	r4,r17
    9140:	8080030d 	sth	r2,12(r16)
    9144:	dfc00417 	ldw	ra,16(sp)
    9148:	dcc00317 	ldw	r19,12(sp)
    914c:	dc800217 	ldw	r18,8(sp)
    9150:	dc400117 	ldw	r17,4(sp)
    9154:	dc000017 	ldw	r16,0(sp)
    9158:	dec00504 	addi	sp,sp,20
    915c:	000a8e81 	jmpi	a8e8 <_write_r>

00009160 <__sseek>:
    9160:	defffe04 	addi	sp,sp,-8
    9164:	dc000015 	stw	r16,0(sp)
    9168:	2821883a 	mov	r16,r5
    916c:	2940038f 	ldh	r5,14(r5)
    9170:	dfc00115 	stw	ra,4(sp)
    9174:	000ae1c0 	call	ae1c <_lseek_r>
    9178:	00ffffc4 	movi	r3,-1
    917c:	10c00826 	beq	r2,r3,91a0 <__sseek+0x40>
    9180:	80c0030b 	ldhu	r3,12(r16)
    9184:	80801415 	stw	r2,80(r16)
    9188:	18c40014 	ori	r3,r3,4096
    918c:	80c0030d 	sth	r3,12(r16)
    9190:	dfc00117 	ldw	ra,4(sp)
    9194:	dc000017 	ldw	r16,0(sp)
    9198:	dec00204 	addi	sp,sp,8
    919c:	f800283a 	ret
    91a0:	80c0030b 	ldhu	r3,12(r16)
    91a4:	18fbffcc 	andi	r3,r3,61439
    91a8:	80c0030d 	sth	r3,12(r16)
    91ac:	dfc00117 	ldw	ra,4(sp)
    91b0:	dc000017 	ldw	r16,0(sp)
    91b4:	dec00204 	addi	sp,sp,8
    91b8:	f800283a 	ret

000091bc <__sclose>:
    91bc:	2940038f 	ldh	r5,14(r5)
    91c0:	000a9481 	jmpi	a948 <_close_r>

000091c4 <strcmp>:
    91c4:	2144b03a 	or	r2,r4,r5
    91c8:	108000cc 	andi	r2,r2,3
    91cc:	1000171e 	bne	r2,zero,922c <strcmp+0x68>
    91d0:	20800017 	ldw	r2,0(r4)
    91d4:	28c00017 	ldw	r3,0(r5)
    91d8:	10c0141e 	bne	r2,r3,922c <strcmp+0x68>
    91dc:	027fbff4 	movhi	r9,65279
    91e0:	4a7fbfc4 	addi	r9,r9,-257
    91e4:	0086303a 	nor	r3,zero,r2
    91e8:	02202074 	movhi	r8,32897
    91ec:	1245883a 	add	r2,r2,r9
    91f0:	42202004 	addi	r8,r8,-32640
    91f4:	10c4703a 	and	r2,r2,r3
    91f8:	1204703a 	and	r2,r2,r8
    91fc:	10000226 	beq	r2,zero,9208 <strcmp+0x44>
    9200:	00002306 	br	9290 <strcmp+0xcc>
    9204:	1000221e 	bne	r2,zero,9290 <strcmp+0xcc>
    9208:	21000104 	addi	r4,r4,4
    920c:	20c00017 	ldw	r3,0(r4)
    9210:	29400104 	addi	r5,r5,4
    9214:	29800017 	ldw	r6,0(r5)
    9218:	1a4f883a 	add	r7,r3,r9
    921c:	00c4303a 	nor	r2,zero,r3
    9220:	3884703a 	and	r2,r7,r2
    9224:	1204703a 	and	r2,r2,r8
    9228:	19bff626 	beq	r3,r6,9204 <__alt_data_end+0xff009204>
    922c:	20800003 	ldbu	r2,0(r4)
    9230:	10c03fcc 	andi	r3,r2,255
    9234:	18c0201c 	xori	r3,r3,128
    9238:	18ffe004 	addi	r3,r3,-128
    923c:	18000c26 	beq	r3,zero,9270 <strcmp+0xac>
    9240:	29800007 	ldb	r6,0(r5)
    9244:	19800326 	beq	r3,r6,9254 <strcmp+0x90>
    9248:	00001306 	br	9298 <strcmp+0xd4>
    924c:	29800007 	ldb	r6,0(r5)
    9250:	11800b1e 	bne	r2,r6,9280 <strcmp+0xbc>
    9254:	21000044 	addi	r4,r4,1
    9258:	20c00003 	ldbu	r3,0(r4)
    925c:	29400044 	addi	r5,r5,1
    9260:	18803fcc 	andi	r2,r3,255
    9264:	1080201c 	xori	r2,r2,128
    9268:	10bfe004 	addi	r2,r2,-128
    926c:	103ff71e 	bne	r2,zero,924c <__alt_data_end+0xff00924c>
    9270:	0007883a 	mov	r3,zero
    9274:	28800003 	ldbu	r2,0(r5)
    9278:	1885c83a 	sub	r2,r3,r2
    927c:	f800283a 	ret
    9280:	28800003 	ldbu	r2,0(r5)
    9284:	18c03fcc 	andi	r3,r3,255
    9288:	1885c83a 	sub	r2,r3,r2
    928c:	f800283a 	ret
    9290:	0005883a 	mov	r2,zero
    9294:	f800283a 	ret
    9298:	10c03fcc 	andi	r3,r2,255
    929c:	003ff506 	br	9274 <__alt_data_end+0xff009274>

000092a0 <__sprint_r.part.0>:
    92a0:	28801917 	ldw	r2,100(r5)
    92a4:	defff604 	addi	sp,sp,-40
    92a8:	dd400515 	stw	r21,20(sp)
    92ac:	dfc00915 	stw	ra,36(sp)
    92b0:	df000815 	stw	fp,32(sp)
    92b4:	ddc00715 	stw	r23,28(sp)
    92b8:	dd800615 	stw	r22,24(sp)
    92bc:	dd000415 	stw	r20,16(sp)
    92c0:	dcc00315 	stw	r19,12(sp)
    92c4:	dc800215 	stw	r18,8(sp)
    92c8:	dc400115 	stw	r17,4(sp)
    92cc:	dc000015 	stw	r16,0(sp)
    92d0:	1088000c 	andi	r2,r2,8192
    92d4:	302b883a 	mov	r21,r6
    92d8:	10002e26 	beq	r2,zero,9394 <__sprint_r.part.0+0xf4>
    92dc:	30800217 	ldw	r2,8(r6)
    92e0:	35800017 	ldw	r22,0(r6)
    92e4:	10002926 	beq	r2,zero,938c <__sprint_r.part.0+0xec>
    92e8:	2827883a 	mov	r19,r5
    92ec:	2029883a 	mov	r20,r4
    92f0:	b5c00104 	addi	r23,r22,4
    92f4:	04bfffc4 	movi	r18,-1
    92f8:	bc400017 	ldw	r17,0(r23)
    92fc:	b4000017 	ldw	r16,0(r22)
    9300:	0039883a 	mov	fp,zero
    9304:	8822d0ba 	srli	r17,r17,2
    9308:	8800031e 	bne	r17,zero,9318 <__sprint_r.part.0+0x78>
    930c:	00001806 	br	9370 <__sprint_r.part.0+0xd0>
    9310:	84000104 	addi	r16,r16,4
    9314:	8f001526 	beq	r17,fp,936c <__sprint_r.part.0+0xcc>
    9318:	81400017 	ldw	r5,0(r16)
    931c:	980d883a 	mov	r6,r19
    9320:	a009883a 	mov	r4,r20
    9324:	000acc80 	call	acc8 <_fputwc_r>
    9328:	e7000044 	addi	fp,fp,1
    932c:	14bff81e 	bne	r2,r18,9310 <__alt_data_end+0xff009310>
    9330:	9005883a 	mov	r2,r18
    9334:	a8000215 	stw	zero,8(r21)
    9338:	a8000115 	stw	zero,4(r21)
    933c:	dfc00917 	ldw	ra,36(sp)
    9340:	df000817 	ldw	fp,32(sp)
    9344:	ddc00717 	ldw	r23,28(sp)
    9348:	dd800617 	ldw	r22,24(sp)
    934c:	dd400517 	ldw	r21,20(sp)
    9350:	dd000417 	ldw	r20,16(sp)
    9354:	dcc00317 	ldw	r19,12(sp)
    9358:	dc800217 	ldw	r18,8(sp)
    935c:	dc400117 	ldw	r17,4(sp)
    9360:	dc000017 	ldw	r16,0(sp)
    9364:	dec00a04 	addi	sp,sp,40
    9368:	f800283a 	ret
    936c:	a8800217 	ldw	r2,8(r21)
    9370:	8c63883a 	add	r17,r17,r17
    9374:	8c63883a 	add	r17,r17,r17
    9378:	1445c83a 	sub	r2,r2,r17
    937c:	a8800215 	stw	r2,8(r21)
    9380:	b5800204 	addi	r22,r22,8
    9384:	bdc00204 	addi	r23,r23,8
    9388:	103fdb1e 	bne	r2,zero,92f8 <__alt_data_end+0xff0092f8>
    938c:	0005883a 	mov	r2,zero
    9390:	003fe806 	br	9334 <__alt_data_end+0xff009334>
    9394:	0006d280 	call	6d28 <__sfvwrite_r>
    9398:	003fe606 	br	9334 <__alt_data_end+0xff009334>

0000939c <__sprint_r>:
    939c:	30c00217 	ldw	r3,8(r6)
    93a0:	18000126 	beq	r3,zero,93a8 <__sprint_r+0xc>
    93a4:	00092a01 	jmpi	92a0 <__sprint_r.part.0>
    93a8:	30000115 	stw	zero,4(r6)
    93ac:	0005883a 	mov	r2,zero
    93b0:	f800283a 	ret

000093b4 <___vfiprintf_internal_r>:
    93b4:	deffc904 	addi	sp,sp,-220
    93b8:	df003515 	stw	fp,212(sp)
    93bc:	dd003115 	stw	r20,196(sp)
    93c0:	dfc03615 	stw	ra,216(sp)
    93c4:	ddc03415 	stw	r23,208(sp)
    93c8:	dd803315 	stw	r22,204(sp)
    93cc:	dd403215 	stw	r21,200(sp)
    93d0:	dcc03015 	stw	r19,192(sp)
    93d4:	dc802f15 	stw	r18,188(sp)
    93d8:	dc402e15 	stw	r17,184(sp)
    93dc:	dc002d15 	stw	r16,180(sp)
    93e0:	d9002015 	stw	r4,128(sp)
    93e4:	d9c02215 	stw	r7,136(sp)
    93e8:	2829883a 	mov	r20,r5
    93ec:	3039883a 	mov	fp,r6
    93f0:	20000226 	beq	r4,zero,93fc <___vfiprintf_internal_r+0x48>
    93f4:	20800e17 	ldw	r2,56(r4)
    93f8:	1000cf26 	beq	r2,zero,9738 <___vfiprintf_internal_r+0x384>
    93fc:	a080030b 	ldhu	r2,12(r20)
    9400:	10c8000c 	andi	r3,r2,8192
    9404:	1800061e 	bne	r3,zero,9420 <___vfiprintf_internal_r+0x6c>
    9408:	a1001917 	ldw	r4,100(r20)
    940c:	00f7ffc4 	movi	r3,-8193
    9410:	10880014 	ori	r2,r2,8192
    9414:	20c6703a 	and	r3,r4,r3
    9418:	a080030d 	sth	r2,12(r20)
    941c:	a0c01915 	stw	r3,100(r20)
    9420:	10c0020c 	andi	r3,r2,8
    9424:	1800a926 	beq	r3,zero,96cc <___vfiprintf_internal_r+0x318>
    9428:	a0c00417 	ldw	r3,16(r20)
    942c:	1800a726 	beq	r3,zero,96cc <___vfiprintf_internal_r+0x318>
    9430:	1080068c 	andi	r2,r2,26
    9434:	00c00284 	movi	r3,10
    9438:	10c0ac26 	beq	r2,r3,96ec <___vfiprintf_internal_r+0x338>
    943c:	da801a04 	addi	r10,sp,104
    9440:	da801e15 	stw	r10,120(sp)
    9444:	d8801e17 	ldw	r2,120(sp)
    9448:	da8019c4 	addi	r10,sp,103
    944c:	05800074 	movhi	r22,1
    9450:	05c00074 	movhi	r23,1
    9454:	da801f15 	stw	r10,124(sp)
    9458:	1295c83a 	sub	r10,r2,r10
    945c:	b581c804 	addi	r22,r22,1824
    9460:	bdc1c404 	addi	r23,r23,1808
    9464:	dec01a15 	stw	sp,104(sp)
    9468:	d8001c15 	stw	zero,112(sp)
    946c:	d8001b15 	stw	zero,108(sp)
    9470:	d8002615 	stw	zero,152(sp)
    9474:	d8002315 	stw	zero,140(sp)
    9478:	da802715 	stw	r10,156(sp)
    947c:	d811883a 	mov	r8,sp
    9480:	dd002115 	stw	r20,132(sp)
    9484:	e021883a 	mov	r16,fp
    9488:	80800007 	ldb	r2,0(r16)
    948c:	1003ea26 	beq	r2,zero,a438 <___vfiprintf_internal_r+0x1084>
    9490:	00c00944 	movi	r3,37
    9494:	8025883a 	mov	r18,r16
    9498:	10c0021e 	bne	r2,r3,94a4 <___vfiprintf_internal_r+0xf0>
    949c:	00001606 	br	94f8 <___vfiprintf_internal_r+0x144>
    94a0:	10c00326 	beq	r2,r3,94b0 <___vfiprintf_internal_r+0xfc>
    94a4:	94800044 	addi	r18,r18,1
    94a8:	90800007 	ldb	r2,0(r18)
    94ac:	103ffc1e 	bne	r2,zero,94a0 <__alt_data_end+0xff0094a0>
    94b0:	9423c83a 	sub	r17,r18,r16
    94b4:	88001026 	beq	r17,zero,94f8 <___vfiprintf_internal_r+0x144>
    94b8:	d8c01c17 	ldw	r3,112(sp)
    94bc:	d8801b17 	ldw	r2,108(sp)
    94c0:	44000015 	stw	r16,0(r8)
    94c4:	88c7883a 	add	r3,r17,r3
    94c8:	10800044 	addi	r2,r2,1
    94cc:	44400115 	stw	r17,4(r8)
    94d0:	d8c01c15 	stw	r3,112(sp)
    94d4:	d8801b15 	stw	r2,108(sp)
    94d8:	010001c4 	movi	r4,7
    94dc:	2080760e 	bge	r4,r2,96b8 <___vfiprintf_internal_r+0x304>
    94e0:	1803821e 	bne	r3,zero,a2ec <___vfiprintf_internal_r+0xf38>
    94e4:	da802317 	ldw	r10,140(sp)
    94e8:	d8001b15 	stw	zero,108(sp)
    94ec:	d811883a 	mov	r8,sp
    94f0:	5455883a 	add	r10,r10,r17
    94f4:	da802315 	stw	r10,140(sp)
    94f8:	90800007 	ldb	r2,0(r18)
    94fc:	10044626 	beq	r2,zero,a618 <___vfiprintf_internal_r+0x1264>
    9500:	90c00047 	ldb	r3,1(r18)
    9504:	94000044 	addi	r16,r18,1
    9508:	d8001d85 	stb	zero,118(sp)
    950c:	0009883a 	mov	r4,zero
    9510:	000f883a 	mov	r7,zero
    9514:	027fffc4 	movi	r9,-1
    9518:	0023883a 	mov	r17,zero
    951c:	0029883a 	mov	r20,zero
    9520:	01401604 	movi	r5,88
    9524:	01800244 	movi	r6,9
    9528:	03400a84 	movi	r13,42
    952c:	03001b04 	movi	r12,108
    9530:	84000044 	addi	r16,r16,1
    9534:	18bff804 	addi	r2,r3,-32
    9538:	28827336 	bltu	r5,r2,9f08 <___vfiprintf_internal_r+0xb54>
    953c:	100490ba 	slli	r2,r2,2
    9540:	02800074 	movhi	r10,1
    9544:	52a55504 	addi	r10,r10,-27308
    9548:	1285883a 	add	r2,r2,r10
    954c:	10800017 	ldw	r2,0(r2)
    9550:	1000683a 	jmp	r2
    9554:	00009c3c 	xorhi	zero,zero,624
    9558:	00009f08 	cmpgei	zero,zero,636
    955c:	00009f08 	cmpgei	zero,zero,636
    9560:	00009c5c 	xori	zero,zero,625
    9564:	00009f08 	cmpgei	zero,zero,636
    9568:	00009f08 	cmpgei	zero,zero,636
    956c:	00009f08 	cmpgei	zero,zero,636
    9570:	00009f08 	cmpgei	zero,zero,636
    9574:	00009f08 	cmpgei	zero,zero,636
    9578:	00009f08 	cmpgei	zero,zero,636
    957c:	00009e44 	movi	zero,633
    9580:	00009e60 	cmpeqi	zero,zero,633
    9584:	00009f08 	cmpgei	zero,zero,636
    9588:	00009748 	cmpgei	zero,zero,605
    958c:	00009e70 	cmpltui	zero,zero,633
    9590:	00009f08 	cmpgei	zero,zero,636
    9594:	00009c68 	cmpgeui	zero,zero,625
    9598:	00009c74 	movhi	zero,625
    959c:	00009c74 	movhi	zero,625
    95a0:	00009c74 	movhi	zero,625
    95a4:	00009c74 	movhi	zero,625
    95a8:	00009c74 	movhi	zero,625
    95ac:	00009c74 	movhi	zero,625
    95b0:	00009c74 	movhi	zero,625
    95b4:	00009c74 	movhi	zero,625
    95b8:	00009c74 	movhi	zero,625
    95bc:	00009f08 	cmpgei	zero,zero,636
    95c0:	00009f08 	cmpgei	zero,zero,636
    95c4:	00009f08 	cmpgei	zero,zero,636
    95c8:	00009f08 	cmpgei	zero,zero,636
    95cc:	00009f08 	cmpgei	zero,zero,636
    95d0:	00009f08 	cmpgei	zero,zero,636
    95d4:	00009f08 	cmpgei	zero,zero,636
    95d8:	00009f08 	cmpgei	zero,zero,636
    95dc:	00009f08 	cmpgei	zero,zero,636
    95e0:	00009f08 	cmpgei	zero,zero,636
    95e4:	00009ca0 	cmpeqi	zero,zero,626
    95e8:	00009f08 	cmpgei	zero,zero,636
    95ec:	00009f08 	cmpgei	zero,zero,636
    95f0:	00009f08 	cmpgei	zero,zero,636
    95f4:	00009f08 	cmpgei	zero,zero,636
    95f8:	00009f08 	cmpgei	zero,zero,636
    95fc:	00009f08 	cmpgei	zero,zero,636
    9600:	00009f08 	cmpgei	zero,zero,636
    9604:	00009f08 	cmpgei	zero,zero,636
    9608:	00009f08 	cmpgei	zero,zero,636
    960c:	00009f08 	cmpgei	zero,zero,636
    9610:	00009cd8 	cmpnei	zero,zero,627
    9614:	00009f08 	cmpgei	zero,zero,636
    9618:	00009f08 	cmpgei	zero,zero,636
    961c:	00009f08 	cmpgei	zero,zero,636
    9620:	00009f08 	cmpgei	zero,zero,636
    9624:	00009f08 	cmpgei	zero,zero,636
    9628:	00009d30 	cmpltui	zero,zero,628
    962c:	00009f08 	cmpgei	zero,zero,636
    9630:	00009f08 	cmpgei	zero,zero,636
    9634:	00009da0 	cmpeqi	zero,zero,630
    9638:	00009f08 	cmpgei	zero,zero,636
    963c:	00009f08 	cmpgei	zero,zero,636
    9640:	00009f08 	cmpgei	zero,zero,636
    9644:	00009f08 	cmpgei	zero,zero,636
    9648:	00009f08 	cmpgei	zero,zero,636
    964c:	00009f08 	cmpgei	zero,zero,636
    9650:	00009f08 	cmpgei	zero,zero,636
    9654:	00009f08 	cmpgei	zero,zero,636
    9658:	00009f08 	cmpgei	zero,zero,636
    965c:	00009f08 	cmpgei	zero,zero,636
    9660:	00009b4c 	andi	zero,zero,621
    9664:	00009b78 	rdprs	zero,zero,621
    9668:	00009f08 	cmpgei	zero,zero,636
    966c:	00009f08 	cmpgei	zero,zero,636
    9670:	00009f08 	cmpgei	zero,zero,636
    9674:	00009eb0 	cmpltui	zero,zero,634
    9678:	00009b78 	rdprs	zero,zero,621
    967c:	00009f08 	cmpgei	zero,zero,636
    9680:	00009f08 	cmpgei	zero,zero,636
    9684:	00009a0c 	andi	zero,zero,616
    9688:	00009f08 	cmpgei	zero,zero,636
    968c:	00009a1c 	xori	zero,zero,616
    9690:	00009a58 	cmpnei	zero,zero,617
    9694:	00009754 	movui	zero,605
    9698:	00009a00 	call	9a0 <init_LCD+0x68>
    969c:	00009f08 	cmpgei	zero,zero,636
    96a0:	00009ddc 	xori	zero,zero,631
    96a4:	00009f08 	cmpgei	zero,zero,636
    96a8:	00009e34 	movhi	zero,632
    96ac:	00009f08 	cmpgei	zero,zero,636
    96b0:	00009f08 	cmpgei	zero,zero,636
    96b4:	00009af8 	rdprs	zero,zero,619
    96b8:	42000204 	addi	r8,r8,8
    96bc:	da802317 	ldw	r10,140(sp)
    96c0:	5455883a 	add	r10,r10,r17
    96c4:	da802315 	stw	r10,140(sp)
    96c8:	003f8b06 	br	94f8 <__alt_data_end+0xff0094f8>
    96cc:	d9002017 	ldw	r4,128(sp)
    96d0:	a00b883a 	mov	r5,r20
    96d4:	00048d00 	call	48d0 <__swsetup_r>
    96d8:	1003b11e 	bne	r2,zero,a5a0 <___vfiprintf_internal_r+0x11ec>
    96dc:	a080030b 	ldhu	r2,12(r20)
    96e0:	00c00284 	movi	r3,10
    96e4:	1080068c 	andi	r2,r2,26
    96e8:	10ff541e 	bne	r2,r3,943c <__alt_data_end+0xff00943c>
    96ec:	a080038f 	ldh	r2,14(r20)
    96f0:	103f5216 	blt	r2,zero,943c <__alt_data_end+0xff00943c>
    96f4:	d9c02217 	ldw	r7,136(sp)
    96f8:	d9002017 	ldw	r4,128(sp)
    96fc:	e00d883a 	mov	r6,fp
    9700:	a00b883a 	mov	r5,r20
    9704:	000a82c0 	call	a82c <__sbprintf>
    9708:	dfc03617 	ldw	ra,216(sp)
    970c:	df003517 	ldw	fp,212(sp)
    9710:	ddc03417 	ldw	r23,208(sp)
    9714:	dd803317 	ldw	r22,204(sp)
    9718:	dd403217 	ldw	r21,200(sp)
    971c:	dd003117 	ldw	r20,196(sp)
    9720:	dcc03017 	ldw	r19,192(sp)
    9724:	dc802f17 	ldw	r18,188(sp)
    9728:	dc402e17 	ldw	r17,184(sp)
    972c:	dc002d17 	ldw	r16,180(sp)
    9730:	dec03704 	addi	sp,sp,220
    9734:	f800283a 	ret
    9738:	00068a40 	call	68a4 <__sinit>
    973c:	003f2f06 	br	93fc <__alt_data_end+0xff0093fc>
    9740:	0463c83a 	sub	r17,zero,r17
    9744:	d8802215 	stw	r2,136(sp)
    9748:	a5000114 	ori	r20,r20,4
    974c:	80c00007 	ldb	r3,0(r16)
    9750:	003f7706 	br	9530 <__alt_data_end+0xff009530>
    9754:	00800c04 	movi	r2,48
    9758:	da802217 	ldw	r10,136(sp)
    975c:	d8801d05 	stb	r2,116(sp)
    9760:	00801e04 	movi	r2,120
    9764:	d8801d45 	stb	r2,117(sp)
    9768:	d8001d85 	stb	zero,118(sp)
    976c:	50c00104 	addi	r3,r10,4
    9770:	54800017 	ldw	r18,0(r10)
    9774:	0027883a 	mov	r19,zero
    9778:	a0800094 	ori	r2,r20,2
    977c:	48030b16 	blt	r9,zero,a3ac <___vfiprintf_internal_r+0xff8>
    9780:	00bfdfc4 	movi	r2,-129
    9784:	a096703a 	and	r11,r20,r2
    9788:	d8c02215 	stw	r3,136(sp)
    978c:	5d000094 	ori	r20,r11,2
    9790:	90032b1e 	bne	r18,zero,a440 <___vfiprintf_internal_r+0x108c>
    9794:	00800074 	movhi	r2,1
    9798:	10816304 	addi	r2,r2,1420
    979c:	d8802615 	stw	r2,152(sp)
    97a0:	0039883a 	mov	fp,zero
    97a4:	48017b1e 	bne	r9,zero,9d94 <___vfiprintf_internal_r+0x9e0>
    97a8:	0013883a 	mov	r9,zero
    97ac:	0027883a 	mov	r19,zero
    97b0:	dd401a04 	addi	r21,sp,104
    97b4:	4825883a 	mov	r18,r9
    97b8:	4cc0010e 	bge	r9,r19,97c0 <___vfiprintf_internal_r+0x40c>
    97bc:	9825883a 	mov	r18,r19
    97c0:	e7003fcc 	andi	fp,fp,255
    97c4:	e700201c 	xori	fp,fp,128
    97c8:	e73fe004 	addi	fp,fp,-128
    97cc:	e0000126 	beq	fp,zero,97d4 <___vfiprintf_internal_r+0x420>
    97d0:	94800044 	addi	r18,r18,1
    97d4:	a380008c 	andi	r14,r20,2
    97d8:	70000126 	beq	r14,zero,97e0 <___vfiprintf_internal_r+0x42c>
    97dc:	94800084 	addi	r18,r18,2
    97e0:	a700210c 	andi	fp,r20,132
    97e4:	e001df1e 	bne	fp,zero,9f64 <___vfiprintf_internal_r+0xbb0>
    97e8:	8c87c83a 	sub	r3,r17,r18
    97ec:	00c1dd0e 	bge	zero,r3,9f64 <___vfiprintf_internal_r+0xbb0>
    97f0:	01c00404 	movi	r7,16
    97f4:	d8801c17 	ldw	r2,112(sp)
    97f8:	38c3ad0e 	bge	r7,r3,a6b0 <___vfiprintf_internal_r+0x12fc>
    97fc:	02800074 	movhi	r10,1
    9800:	5281c804 	addi	r10,r10,1824
    9804:	dc002915 	stw	r16,164(sp)
    9808:	d9801b17 	ldw	r6,108(sp)
    980c:	da802415 	stw	r10,144(sp)
    9810:	03c001c4 	movi	r15,7
    9814:	da402515 	stw	r9,148(sp)
    9818:	db802815 	stw	r14,160(sp)
    981c:	1821883a 	mov	r16,r3
    9820:	00000506 	br	9838 <___vfiprintf_internal_r+0x484>
    9824:	31400084 	addi	r5,r6,2
    9828:	42000204 	addi	r8,r8,8
    982c:	200d883a 	mov	r6,r4
    9830:	843ffc04 	addi	r16,r16,-16
    9834:	3c000d0e 	bge	r7,r16,986c <___vfiprintf_internal_r+0x4b8>
    9838:	10800404 	addi	r2,r2,16
    983c:	31000044 	addi	r4,r6,1
    9840:	45800015 	stw	r22,0(r8)
    9844:	41c00115 	stw	r7,4(r8)
    9848:	d8801c15 	stw	r2,112(sp)
    984c:	d9001b15 	stw	r4,108(sp)
    9850:	793ff40e 	bge	r15,r4,9824 <__alt_data_end+0xff009824>
    9854:	1001b51e 	bne	r2,zero,9f2c <___vfiprintf_internal_r+0xb78>
    9858:	843ffc04 	addi	r16,r16,-16
    985c:	000d883a 	mov	r6,zero
    9860:	01400044 	movi	r5,1
    9864:	d811883a 	mov	r8,sp
    9868:	3c3ff316 	blt	r7,r16,9838 <__alt_data_end+0xff009838>
    986c:	8007883a 	mov	r3,r16
    9870:	da402517 	ldw	r9,148(sp)
    9874:	db802817 	ldw	r14,160(sp)
    9878:	dc002917 	ldw	r16,164(sp)
    987c:	da802417 	ldw	r10,144(sp)
    9880:	1885883a 	add	r2,r3,r2
    9884:	40c00115 	stw	r3,4(r8)
    9888:	42800015 	stw	r10,0(r8)
    988c:	d8801c15 	stw	r2,112(sp)
    9890:	d9401b15 	stw	r5,108(sp)
    9894:	00c001c4 	movi	r3,7
    9898:	19426016 	blt	r3,r5,a21c <___vfiprintf_internal_r+0xe68>
    989c:	d8c01d87 	ldb	r3,118(sp)
    98a0:	42000204 	addi	r8,r8,8
    98a4:	29000044 	addi	r4,r5,1
    98a8:	1801b31e 	bne	r3,zero,9f78 <___vfiprintf_internal_r+0xbc4>
    98ac:	7001c026 	beq	r14,zero,9fb0 <___vfiprintf_internal_r+0xbfc>
    98b0:	d8c01d04 	addi	r3,sp,116
    98b4:	10800084 	addi	r2,r2,2
    98b8:	40c00015 	stw	r3,0(r8)
    98bc:	00c00084 	movi	r3,2
    98c0:	40c00115 	stw	r3,4(r8)
    98c4:	d8801c15 	stw	r2,112(sp)
    98c8:	d9001b15 	stw	r4,108(sp)
    98cc:	00c001c4 	movi	r3,7
    98d0:	1902650e 	bge	r3,r4,a268 <___vfiprintf_internal_r+0xeb4>
    98d4:	10029a1e 	bne	r2,zero,a340 <___vfiprintf_internal_r+0xf8c>
    98d8:	00c02004 	movi	r3,128
    98dc:	01000044 	movi	r4,1
    98e0:	000b883a 	mov	r5,zero
    98e4:	d811883a 	mov	r8,sp
    98e8:	e0c1b31e 	bne	fp,r3,9fb8 <___vfiprintf_internal_r+0xc04>
    98ec:	8cb9c83a 	sub	fp,r17,r18
    98f0:	0701b10e 	bge	zero,fp,9fb8 <___vfiprintf_internal_r+0xc04>
    98f4:	01c00404 	movi	r7,16
    98f8:	3f03890e 	bge	r7,fp,a720 <___vfiprintf_internal_r+0x136c>
    98fc:	00c00074 	movhi	r3,1
    9900:	18c1c404 	addi	r3,r3,1808
    9904:	d8c02415 	stw	r3,144(sp)
    9908:	8007883a 	mov	r3,r16
    990c:	034001c4 	movi	r13,7
    9910:	e021883a 	mov	r16,fp
    9914:	da402515 	stw	r9,148(sp)
    9918:	1839883a 	mov	fp,r3
    991c:	00000506 	br	9934 <___vfiprintf_internal_r+0x580>
    9920:	29800084 	addi	r6,r5,2
    9924:	42000204 	addi	r8,r8,8
    9928:	180b883a 	mov	r5,r3
    992c:	843ffc04 	addi	r16,r16,-16
    9930:	3c000d0e 	bge	r7,r16,9968 <___vfiprintf_internal_r+0x5b4>
    9934:	10800404 	addi	r2,r2,16
    9938:	28c00044 	addi	r3,r5,1
    993c:	45c00015 	stw	r23,0(r8)
    9940:	41c00115 	stw	r7,4(r8)
    9944:	d8801c15 	stw	r2,112(sp)
    9948:	d8c01b15 	stw	r3,108(sp)
    994c:	68fff40e 	bge	r13,r3,9920 <__alt_data_end+0xff009920>
    9950:	1002241e 	bne	r2,zero,a1e4 <___vfiprintf_internal_r+0xe30>
    9954:	843ffc04 	addi	r16,r16,-16
    9958:	01800044 	movi	r6,1
    995c:	000b883a 	mov	r5,zero
    9960:	d811883a 	mov	r8,sp
    9964:	3c3ff316 	blt	r7,r16,9934 <__alt_data_end+0xff009934>
    9968:	da402517 	ldw	r9,148(sp)
    996c:	e007883a 	mov	r3,fp
    9970:	8039883a 	mov	fp,r16
    9974:	1821883a 	mov	r16,r3
    9978:	d8c02417 	ldw	r3,144(sp)
    997c:	1705883a 	add	r2,r2,fp
    9980:	47000115 	stw	fp,4(r8)
    9984:	40c00015 	stw	r3,0(r8)
    9988:	d8801c15 	stw	r2,112(sp)
    998c:	d9801b15 	stw	r6,108(sp)
    9990:	00c001c4 	movi	r3,7
    9994:	19827616 	blt	r3,r6,a370 <___vfiprintf_internal_r+0xfbc>
    9998:	4cf9c83a 	sub	fp,r9,r19
    999c:	42000204 	addi	r8,r8,8
    99a0:	31000044 	addi	r4,r6,1
    99a4:	300b883a 	mov	r5,r6
    99a8:	07018516 	blt	zero,fp,9fc0 <___vfiprintf_internal_r+0xc0c>
    99ac:	9885883a 	add	r2,r19,r2
    99b0:	45400015 	stw	r21,0(r8)
    99b4:	44c00115 	stw	r19,4(r8)
    99b8:	d8801c15 	stw	r2,112(sp)
    99bc:	d9001b15 	stw	r4,108(sp)
    99c0:	00c001c4 	movi	r3,7
    99c4:	1901dd0e 	bge	r3,r4,a13c <___vfiprintf_internal_r+0xd88>
    99c8:	1002401e 	bne	r2,zero,a2cc <___vfiprintf_internal_r+0xf18>
    99cc:	d8001b15 	stw	zero,108(sp)
    99d0:	a2c0010c 	andi	r11,r20,4
    99d4:	58000226 	beq	r11,zero,99e0 <___vfiprintf_internal_r+0x62c>
    99d8:	8ca7c83a 	sub	r19,r17,r18
    99dc:	04c2f216 	blt	zero,r19,a5a8 <___vfiprintf_internal_r+0x11f4>
    99e0:	8c80010e 	bge	r17,r18,99e8 <___vfiprintf_internal_r+0x634>
    99e4:	9023883a 	mov	r17,r18
    99e8:	da802317 	ldw	r10,140(sp)
    99ec:	5455883a 	add	r10,r10,r17
    99f0:	da802315 	stw	r10,140(sp)
    99f4:	d8001b15 	stw	zero,108(sp)
    99f8:	d811883a 	mov	r8,sp
    99fc:	003ea206 	br	9488 <__alt_data_end+0xff009488>
    9a00:	a5000814 	ori	r20,r20,32
    9a04:	80c00007 	ldb	r3,0(r16)
    9a08:	003ec906 	br	9530 <__alt_data_end+0xff009530>
    9a0c:	80c00007 	ldb	r3,0(r16)
    9a10:	1b030926 	beq	r3,r12,a638 <___vfiprintf_internal_r+0x1284>
    9a14:	a5000414 	ori	r20,r20,16
    9a18:	003ec506 	br	9530 <__alt_data_end+0xff009530>
    9a1c:	21003fcc 	andi	r4,r4,255
    9a20:	20035e1e 	bne	r4,zero,a79c <___vfiprintf_internal_r+0x13e8>
    9a24:	a080080c 	andi	r2,r20,32
    9a28:	1002a526 	beq	r2,zero,a4c0 <___vfiprintf_internal_r+0x110c>
    9a2c:	da802217 	ldw	r10,136(sp)
    9a30:	50800017 	ldw	r2,0(r10)
    9a34:	da802317 	ldw	r10,140(sp)
    9a38:	5007d7fa 	srai	r3,r10,31
    9a3c:	da802217 	ldw	r10,136(sp)
    9a40:	10c00115 	stw	r3,4(r2)
    9a44:	52800104 	addi	r10,r10,4
    9a48:	da802215 	stw	r10,136(sp)
    9a4c:	da802317 	ldw	r10,140(sp)
    9a50:	12800015 	stw	r10,0(r2)
    9a54:	003e8c06 	br	9488 <__alt_data_end+0xff009488>
    9a58:	21003fcc 	andi	r4,r4,255
    9a5c:	2003511e 	bne	r4,zero,a7a4 <___vfiprintf_internal_r+0x13f0>
    9a60:	a080080c 	andi	r2,r20,32
    9a64:	1000a126 	beq	r2,zero,9cec <___vfiprintf_internal_r+0x938>
    9a68:	da802217 	ldw	r10,136(sp)
    9a6c:	d8001d85 	stb	zero,118(sp)
    9a70:	50800204 	addi	r2,r10,8
    9a74:	54800017 	ldw	r18,0(r10)
    9a78:	54c00117 	ldw	r19,4(r10)
    9a7c:	4802b416 	blt	r9,zero,a550 <___vfiprintf_internal_r+0x119c>
    9a80:	013fdfc4 	movi	r4,-129
    9a84:	94c6b03a 	or	r3,r18,r19
    9a88:	d8802215 	stw	r2,136(sp)
    9a8c:	a128703a 	and	r20,r20,r4
    9a90:	1800a226 	beq	r3,zero,9d1c <___vfiprintf_internal_r+0x968>
    9a94:	0039883a 	mov	fp,zero
    9a98:	dd401a04 	addi	r21,sp,104
    9a9c:	9006d0fa 	srli	r3,r18,3
    9aa0:	9808977a 	slli	r4,r19,29
    9aa4:	9826d0fa 	srli	r19,r19,3
    9aa8:	948001cc 	andi	r18,r18,7
    9aac:	90800c04 	addi	r2,r18,48
    9ab0:	ad7fffc4 	addi	r21,r21,-1
    9ab4:	20e4b03a 	or	r18,r4,r3
    9ab8:	a8800005 	stb	r2,0(r21)
    9abc:	94c6b03a 	or	r3,r18,r19
    9ac0:	183ff61e 	bne	r3,zero,9a9c <__alt_data_end+0xff009a9c>
    9ac4:	a0c0004c 	andi	r3,r20,1
    9ac8:	18005926 	beq	r3,zero,9c30 <___vfiprintf_internal_r+0x87c>
    9acc:	10803fcc 	andi	r2,r2,255
    9ad0:	1080201c 	xori	r2,r2,128
    9ad4:	10bfe004 	addi	r2,r2,-128
    9ad8:	00c00c04 	movi	r3,48
    9adc:	10c05426 	beq	r2,r3,9c30 <___vfiprintf_internal_r+0x87c>
    9ae0:	da801e17 	ldw	r10,120(sp)
    9ae4:	a8bfffc4 	addi	r2,r21,-1
    9ae8:	a8ffffc5 	stb	r3,-1(r21)
    9aec:	50a7c83a 	sub	r19,r10,r2
    9af0:	102b883a 	mov	r21,r2
    9af4:	003f2f06 	br	97b4 <__alt_data_end+0xff0097b4>
    9af8:	21003fcc 	andi	r4,r4,255
    9afc:	2003421e 	bne	r4,zero,a808 <___vfiprintf_internal_r+0x1454>
    9b00:	00800074 	movhi	r2,1
    9b04:	10816304 	addi	r2,r2,1420
    9b08:	d8802615 	stw	r2,152(sp)
    9b0c:	a080080c 	andi	r2,r20,32
    9b10:	1000aa26 	beq	r2,zero,9dbc <___vfiprintf_internal_r+0xa08>
    9b14:	da802217 	ldw	r10,136(sp)
    9b18:	54800017 	ldw	r18,0(r10)
    9b1c:	54c00117 	ldw	r19,4(r10)
    9b20:	52800204 	addi	r10,r10,8
    9b24:	da802215 	stw	r10,136(sp)
    9b28:	a080004c 	andi	r2,r20,1
    9b2c:	1001d226 	beq	r2,zero,a278 <___vfiprintf_internal_r+0xec4>
    9b30:	94c4b03a 	or	r2,r18,r19
    9b34:	1002351e 	bne	r2,zero,a40c <___vfiprintf_internal_r+0x1058>
    9b38:	d8001d85 	stb	zero,118(sp)
    9b3c:	48022216 	blt	r9,zero,a3c8 <___vfiprintf_internal_r+0x1014>
    9b40:	00bfdfc4 	movi	r2,-129
    9b44:	a0a8703a 	and	r20,r20,r2
    9b48:	003f1506 	br	97a0 <__alt_data_end+0xff0097a0>
    9b4c:	da802217 	ldw	r10,136(sp)
    9b50:	04800044 	movi	r18,1
    9b54:	d8001d85 	stb	zero,118(sp)
    9b58:	50800017 	ldw	r2,0(r10)
    9b5c:	52800104 	addi	r10,r10,4
    9b60:	da802215 	stw	r10,136(sp)
    9b64:	d8801005 	stb	r2,64(sp)
    9b68:	9027883a 	mov	r19,r18
    9b6c:	dd401004 	addi	r21,sp,64
    9b70:	0013883a 	mov	r9,zero
    9b74:	003f1706 	br	97d4 <__alt_data_end+0xff0097d4>
    9b78:	21003fcc 	andi	r4,r4,255
    9b7c:	2003201e 	bne	r4,zero,a800 <___vfiprintf_internal_r+0x144c>
    9b80:	a080080c 	andi	r2,r20,32
    9b84:	10004b26 	beq	r2,zero,9cb4 <___vfiprintf_internal_r+0x900>
    9b88:	da802217 	ldw	r10,136(sp)
    9b8c:	50800117 	ldw	r2,4(r10)
    9b90:	54800017 	ldw	r18,0(r10)
    9b94:	52800204 	addi	r10,r10,8
    9b98:	da802215 	stw	r10,136(sp)
    9b9c:	1027883a 	mov	r19,r2
    9ba0:	10022c16 	blt	r2,zero,a454 <___vfiprintf_internal_r+0x10a0>
    9ba4:	df001d83 	ldbu	fp,118(sp)
    9ba8:	48007216 	blt	r9,zero,9d74 <___vfiprintf_internal_r+0x9c0>
    9bac:	00ffdfc4 	movi	r3,-129
    9bb0:	94c4b03a 	or	r2,r18,r19
    9bb4:	a0e8703a 	and	r20,r20,r3
    9bb8:	1000cc26 	beq	r2,zero,9eec <___vfiprintf_internal_r+0xb38>
    9bbc:	98021026 	beq	r19,zero,a400 <___vfiprintf_internal_r+0x104c>
    9bc0:	dc402415 	stw	r17,144(sp)
    9bc4:	dc002515 	stw	r16,148(sp)
    9bc8:	9823883a 	mov	r17,r19
    9bcc:	9021883a 	mov	r16,r18
    9bd0:	dd401a04 	addi	r21,sp,104
    9bd4:	4825883a 	mov	r18,r9
    9bd8:	4027883a 	mov	r19,r8
    9bdc:	8009883a 	mov	r4,r16
    9be0:	880b883a 	mov	r5,r17
    9be4:	01800284 	movi	r6,10
    9be8:	000f883a 	mov	r7,zero
    9bec:	000b7940 	call	b794 <__umoddi3>
    9bf0:	10800c04 	addi	r2,r2,48
    9bf4:	ad7fffc4 	addi	r21,r21,-1
    9bf8:	8009883a 	mov	r4,r16
    9bfc:	880b883a 	mov	r5,r17
    9c00:	a8800005 	stb	r2,0(r21)
    9c04:	01800284 	movi	r6,10
    9c08:	000f883a 	mov	r7,zero
    9c0c:	000b21c0 	call	b21c <__udivdi3>
    9c10:	1021883a 	mov	r16,r2
    9c14:	10c4b03a 	or	r2,r2,r3
    9c18:	1823883a 	mov	r17,r3
    9c1c:	103fef1e 	bne	r2,zero,9bdc <__alt_data_end+0xff009bdc>
    9c20:	dc402417 	ldw	r17,144(sp)
    9c24:	dc002517 	ldw	r16,148(sp)
    9c28:	9013883a 	mov	r9,r18
    9c2c:	9811883a 	mov	r8,r19
    9c30:	da801e17 	ldw	r10,120(sp)
    9c34:	5567c83a 	sub	r19,r10,r21
    9c38:	003ede06 	br	97b4 <__alt_data_end+0xff0097b4>
    9c3c:	38803fcc 	andi	r2,r7,255
    9c40:	1080201c 	xori	r2,r2,128
    9c44:	10bfe004 	addi	r2,r2,-128
    9c48:	1002371e 	bne	r2,zero,a528 <___vfiprintf_internal_r+0x1174>
    9c4c:	01000044 	movi	r4,1
    9c50:	01c00804 	movi	r7,32
    9c54:	80c00007 	ldb	r3,0(r16)
    9c58:	003e3506 	br	9530 <__alt_data_end+0xff009530>
    9c5c:	a5000054 	ori	r20,r20,1
    9c60:	80c00007 	ldb	r3,0(r16)
    9c64:	003e3206 	br	9530 <__alt_data_end+0xff009530>
    9c68:	a5002014 	ori	r20,r20,128
    9c6c:	80c00007 	ldb	r3,0(r16)
    9c70:	003e2f06 	br	9530 <__alt_data_end+0xff009530>
    9c74:	8015883a 	mov	r10,r16
    9c78:	0023883a 	mov	r17,zero
    9c7c:	18bff404 	addi	r2,r3,-48
    9c80:	50c00007 	ldb	r3,0(r10)
    9c84:	8c4002a4 	muli	r17,r17,10
    9c88:	84000044 	addi	r16,r16,1
    9c8c:	8015883a 	mov	r10,r16
    9c90:	1463883a 	add	r17,r2,r17
    9c94:	18bff404 	addi	r2,r3,-48
    9c98:	30bff92e 	bgeu	r6,r2,9c80 <__alt_data_end+0xff009c80>
    9c9c:	003e2506 	br	9534 <__alt_data_end+0xff009534>
    9ca0:	21003fcc 	andi	r4,r4,255
    9ca4:	2002d41e 	bne	r4,zero,a7f8 <___vfiprintf_internal_r+0x1444>
    9ca8:	a5000414 	ori	r20,r20,16
    9cac:	a080080c 	andi	r2,r20,32
    9cb0:	103fb51e 	bne	r2,zero,9b88 <__alt_data_end+0xff009b88>
    9cb4:	a080040c 	andi	r2,r20,16
    9cb8:	1001f826 	beq	r2,zero,a49c <___vfiprintf_internal_r+0x10e8>
    9cbc:	da802217 	ldw	r10,136(sp)
    9cc0:	54800017 	ldw	r18,0(r10)
    9cc4:	52800104 	addi	r10,r10,4
    9cc8:	da802215 	stw	r10,136(sp)
    9ccc:	9027d7fa 	srai	r19,r18,31
    9cd0:	9805883a 	mov	r2,r19
    9cd4:	003fb206 	br	9ba0 <__alt_data_end+0xff009ba0>
    9cd8:	21003fcc 	andi	r4,r4,255
    9cdc:	2002c41e 	bne	r4,zero,a7f0 <___vfiprintf_internal_r+0x143c>
    9ce0:	a5000414 	ori	r20,r20,16
    9ce4:	a080080c 	andi	r2,r20,32
    9ce8:	103f5f1e 	bne	r2,zero,9a68 <__alt_data_end+0xff009a68>
    9cec:	a080040c 	andi	r2,r20,16
    9cf0:	10020f26 	beq	r2,zero,a530 <___vfiprintf_internal_r+0x117c>
    9cf4:	da802217 	ldw	r10,136(sp)
    9cf8:	d8001d85 	stb	zero,118(sp)
    9cfc:	0027883a 	mov	r19,zero
    9d00:	50800104 	addi	r2,r10,4
    9d04:	54800017 	ldw	r18,0(r10)
    9d08:	48021116 	blt	r9,zero,a550 <___vfiprintf_internal_r+0x119c>
    9d0c:	00ffdfc4 	movi	r3,-129
    9d10:	d8802215 	stw	r2,136(sp)
    9d14:	a0e8703a 	and	r20,r20,r3
    9d18:	903f5e1e 	bne	r18,zero,9a94 <__alt_data_end+0xff009a94>
    9d1c:	0039883a 	mov	fp,zero
    9d20:	4802a626 	beq	r9,zero,a7bc <___vfiprintf_internal_r+0x1408>
    9d24:	0025883a 	mov	r18,zero
    9d28:	0027883a 	mov	r19,zero
    9d2c:	003f5a06 	br	9a98 <__alt_data_end+0xff009a98>
    9d30:	21003fcc 	andi	r4,r4,255
    9d34:	20029f1e 	bne	r4,zero,a7b4 <___vfiprintf_internal_r+0x1400>
    9d38:	a5000414 	ori	r20,r20,16
    9d3c:	a080080c 	andi	r2,r20,32
    9d40:	10005e1e 	bne	r2,zero,9ebc <___vfiprintf_internal_r+0xb08>
    9d44:	a080040c 	andi	r2,r20,16
    9d48:	1001a21e 	bne	r2,zero,a3d4 <___vfiprintf_internal_r+0x1020>
    9d4c:	a080100c 	andi	r2,r20,64
    9d50:	d8001d85 	stb	zero,118(sp)
    9d54:	da802217 	ldw	r10,136(sp)
    9d58:	1002231e 	bne	r2,zero,a5e8 <___vfiprintf_internal_r+0x1234>
    9d5c:	50800104 	addi	r2,r10,4
    9d60:	54800017 	ldw	r18,0(r10)
    9d64:	0027883a 	mov	r19,zero
    9d68:	4801a00e 	bge	r9,zero,a3ec <___vfiprintf_internal_r+0x1038>
    9d6c:	d8802215 	stw	r2,136(sp)
    9d70:	0039883a 	mov	fp,zero
    9d74:	94c4b03a 	or	r2,r18,r19
    9d78:	103f901e 	bne	r2,zero,9bbc <__alt_data_end+0xff009bbc>
    9d7c:	00800044 	movi	r2,1
    9d80:	10803fcc 	andi	r2,r2,255
    9d84:	00c00044 	movi	r3,1
    9d88:	10c05926 	beq	r2,r3,9ef0 <___vfiprintf_internal_r+0xb3c>
    9d8c:	00c00084 	movi	r3,2
    9d90:	10ffe41e 	bne	r2,r3,9d24 <__alt_data_end+0xff009d24>
    9d94:	0025883a 	mov	r18,zero
    9d98:	0027883a 	mov	r19,zero
    9d9c:	00013d06 	br	a294 <___vfiprintf_internal_r+0xee0>
    9da0:	21003fcc 	andi	r4,r4,255
    9da4:	2002811e 	bne	r4,zero,a7ac <___vfiprintf_internal_r+0x13f8>
    9da8:	00800074 	movhi	r2,1
    9dac:	10815e04 	addi	r2,r2,1400
    9db0:	d8802615 	stw	r2,152(sp)
    9db4:	a080080c 	andi	r2,r20,32
    9db8:	103f561e 	bne	r2,zero,9b14 <__alt_data_end+0xff009b14>
    9dbc:	a080040c 	andi	r2,r20,16
    9dc0:	1001d126 	beq	r2,zero,a508 <___vfiprintf_internal_r+0x1154>
    9dc4:	da802217 	ldw	r10,136(sp)
    9dc8:	0027883a 	mov	r19,zero
    9dcc:	54800017 	ldw	r18,0(r10)
    9dd0:	52800104 	addi	r10,r10,4
    9dd4:	da802215 	stw	r10,136(sp)
    9dd8:	003f5306 	br	9b28 <__alt_data_end+0xff009b28>
    9ddc:	da802217 	ldw	r10,136(sp)
    9de0:	d8001d85 	stb	zero,118(sp)
    9de4:	55400017 	ldw	r21,0(r10)
    9de8:	50c00104 	addi	r3,r10,4
    9dec:	a8024226 	beq	r21,zero,a6f8 <___vfiprintf_internal_r+0x1344>
    9df0:	48021816 	blt	r9,zero,a654 <___vfiprintf_internal_r+0x12a0>
    9df4:	480d883a 	mov	r6,r9
    9df8:	000b883a 	mov	r5,zero
    9dfc:	a809883a 	mov	r4,r21
    9e00:	d8c02a15 	stw	r3,168(sp)
    9e04:	da002b15 	stw	r8,172(sp)
    9e08:	da402c15 	stw	r9,176(sp)
    9e0c:	00076040 	call	7604 <memchr>
    9e10:	d8c02a17 	ldw	r3,168(sp)
    9e14:	da002b17 	ldw	r8,172(sp)
    9e18:	da402c17 	ldw	r9,176(sp)
    9e1c:	10024826 	beq	r2,zero,a740 <___vfiprintf_internal_r+0x138c>
    9e20:	1567c83a 	sub	r19,r2,r21
    9e24:	df001d83 	ldbu	fp,118(sp)
    9e28:	d8c02215 	stw	r3,136(sp)
    9e2c:	0013883a 	mov	r9,zero
    9e30:	003e6006 	br	97b4 <__alt_data_end+0xff0097b4>
    9e34:	21003fcc 	andi	r4,r4,255
    9e38:	203fc026 	beq	r4,zero,9d3c <__alt_data_end+0xff009d3c>
    9e3c:	d9c01d85 	stb	r7,118(sp)
    9e40:	003fbe06 	br	9d3c <__alt_data_end+0xff009d3c>
    9e44:	da802217 	ldw	r10,136(sp)
    9e48:	54400017 	ldw	r17,0(r10)
    9e4c:	50800104 	addi	r2,r10,4
    9e50:	883e3b16 	blt	r17,zero,9740 <__alt_data_end+0xff009740>
    9e54:	d8802215 	stw	r2,136(sp)
    9e58:	80c00007 	ldb	r3,0(r16)
    9e5c:	003db406 	br	9530 <__alt_data_end+0xff009530>
    9e60:	01000044 	movi	r4,1
    9e64:	01c00ac4 	movi	r7,43
    9e68:	80c00007 	ldb	r3,0(r16)
    9e6c:	003db006 	br	9530 <__alt_data_end+0xff009530>
    9e70:	80c00007 	ldb	r3,0(r16)
    9e74:	82800044 	addi	r10,r16,1
    9e78:	1b423c26 	beq	r3,r13,a76c <___vfiprintf_internal_r+0x13b8>
    9e7c:	18bff404 	addi	r2,r3,-48
    9e80:	0013883a 	mov	r9,zero
    9e84:	30822b36 	bltu	r6,r2,a734 <___vfiprintf_internal_r+0x1380>
    9e88:	50c00007 	ldb	r3,0(r10)
    9e8c:	4a4002a4 	muli	r9,r9,10
    9e90:	54000044 	addi	r16,r10,1
    9e94:	8015883a 	mov	r10,r16
    9e98:	4893883a 	add	r9,r9,r2
    9e9c:	18bff404 	addi	r2,r3,-48
    9ea0:	30bff92e 	bgeu	r6,r2,9e88 <__alt_data_end+0xff009e88>
    9ea4:	483da30e 	bge	r9,zero,9534 <__alt_data_end+0xff009534>
    9ea8:	027fffc4 	movi	r9,-1
    9eac:	003da106 	br	9534 <__alt_data_end+0xff009534>
    9eb0:	a5001014 	ori	r20,r20,64
    9eb4:	80c00007 	ldb	r3,0(r16)
    9eb8:	003d9d06 	br	9530 <__alt_data_end+0xff009530>
    9ebc:	da802217 	ldw	r10,136(sp)
    9ec0:	d8001d85 	stb	zero,118(sp)
    9ec4:	50c00204 	addi	r3,r10,8
    9ec8:	54800017 	ldw	r18,0(r10)
    9ecc:	54c00117 	ldw	r19,4(r10)
    9ed0:	4801ca16 	blt	r9,zero,a5fc <___vfiprintf_internal_r+0x1248>
    9ed4:	013fdfc4 	movi	r4,-129
    9ed8:	94c4b03a 	or	r2,r18,r19
    9edc:	d8c02215 	stw	r3,136(sp)
    9ee0:	a128703a 	and	r20,r20,r4
    9ee4:	0039883a 	mov	fp,zero
    9ee8:	103f341e 	bne	r2,zero,9bbc <__alt_data_end+0xff009bbc>
    9eec:	483e2e26 	beq	r9,zero,97a8 <__alt_data_end+0xff0097a8>
    9ef0:	0025883a 	mov	r18,zero
    9ef4:	94800c04 	addi	r18,r18,48
    9ef8:	dc8019c5 	stb	r18,103(sp)
    9efc:	dcc02717 	ldw	r19,156(sp)
    9f00:	dd4019c4 	addi	r21,sp,103
    9f04:	003e2b06 	br	97b4 <__alt_data_end+0xff0097b4>
    9f08:	21003fcc 	andi	r4,r4,255
    9f0c:	2002361e 	bne	r4,zero,a7e8 <___vfiprintf_internal_r+0x1434>
    9f10:	1801c126 	beq	r3,zero,a618 <___vfiprintf_internal_r+0x1264>
    9f14:	04800044 	movi	r18,1
    9f18:	d8c01005 	stb	r3,64(sp)
    9f1c:	d8001d85 	stb	zero,118(sp)
    9f20:	9027883a 	mov	r19,r18
    9f24:	dd401004 	addi	r21,sp,64
    9f28:	003f1106 	br	9b70 <__alt_data_end+0xff009b70>
    9f2c:	d9402117 	ldw	r5,132(sp)
    9f30:	d9002017 	ldw	r4,128(sp)
    9f34:	d9801a04 	addi	r6,sp,104
    9f38:	d9c02b15 	stw	r7,172(sp)
    9f3c:	dbc02a15 	stw	r15,168(sp)
    9f40:	00092a00 	call	92a0 <__sprint_r.part.0>
    9f44:	d9c02b17 	ldw	r7,172(sp)
    9f48:	dbc02a17 	ldw	r15,168(sp)
    9f4c:	10006d1e 	bne	r2,zero,a104 <___vfiprintf_internal_r+0xd50>
    9f50:	d9801b17 	ldw	r6,108(sp)
    9f54:	d8801c17 	ldw	r2,112(sp)
    9f58:	d811883a 	mov	r8,sp
    9f5c:	31400044 	addi	r5,r6,1
    9f60:	003e3306 	br	9830 <__alt_data_end+0xff009830>
    9f64:	d9401b17 	ldw	r5,108(sp)
    9f68:	d8801c17 	ldw	r2,112(sp)
    9f6c:	29000044 	addi	r4,r5,1
    9f70:	d8c01d87 	ldb	r3,118(sp)
    9f74:	183e4d26 	beq	r3,zero,98ac <__alt_data_end+0xff0098ac>
    9f78:	00c00044 	movi	r3,1
    9f7c:	d9401d84 	addi	r5,sp,118
    9f80:	10c5883a 	add	r2,r2,r3
    9f84:	41400015 	stw	r5,0(r8)
    9f88:	40c00115 	stw	r3,4(r8)
    9f8c:	d8801c15 	stw	r2,112(sp)
    9f90:	d9001b15 	stw	r4,108(sp)
    9f94:	014001c4 	movi	r5,7
    9f98:	2900a90e 	bge	r5,r4,a240 <___vfiprintf_internal_r+0xe8c>
    9f9c:	1000da1e 	bne	r2,zero,a308 <___vfiprintf_internal_r+0xf54>
    9fa0:	7000ab1e 	bne	r14,zero,a250 <___vfiprintf_internal_r+0xe9c>
    9fa4:	000b883a 	mov	r5,zero
    9fa8:	1809883a 	mov	r4,r3
    9fac:	d811883a 	mov	r8,sp
    9fb0:	00c02004 	movi	r3,128
    9fb4:	e0fe4d26 	beq	fp,r3,98ec <__alt_data_end+0xff0098ec>
    9fb8:	4cf9c83a 	sub	fp,r9,r19
    9fbc:	073e7b0e 	bge	zero,fp,99ac <__alt_data_end+0xff0099ac>
    9fc0:	01c00404 	movi	r7,16
    9fc4:	3f01900e 	bge	r7,fp,a608 <___vfiprintf_internal_r+0x1254>
    9fc8:	00c00074 	movhi	r3,1
    9fcc:	18c1c404 	addi	r3,r3,1808
    9fd0:	d8c02415 	stw	r3,144(sp)
    9fd4:	034001c4 	movi	r13,7
    9fd8:	00000506 	br	9ff0 <___vfiprintf_internal_r+0xc3c>
    9fdc:	29000084 	addi	r4,r5,2
    9fe0:	42000204 	addi	r8,r8,8
    9fe4:	180b883a 	mov	r5,r3
    9fe8:	e73ffc04 	addi	fp,fp,-16
    9fec:	3f000d0e 	bge	r7,fp,a024 <___vfiprintf_internal_r+0xc70>
    9ff0:	10800404 	addi	r2,r2,16
    9ff4:	28c00044 	addi	r3,r5,1
    9ff8:	45c00015 	stw	r23,0(r8)
    9ffc:	41c00115 	stw	r7,4(r8)
    a000:	d8801c15 	stw	r2,112(sp)
    a004:	d8c01b15 	stw	r3,108(sp)
    a008:	68fff40e 	bge	r13,r3,9fdc <__alt_data_end+0xff009fdc>
    a00c:	1000101e 	bne	r2,zero,a050 <___vfiprintf_internal_r+0xc9c>
    a010:	e73ffc04 	addi	fp,fp,-16
    a014:	01000044 	movi	r4,1
    a018:	000b883a 	mov	r5,zero
    a01c:	d811883a 	mov	r8,sp
    a020:	3f3ff316 	blt	r7,fp,9ff0 <__alt_data_end+0xff009ff0>
    a024:	da802417 	ldw	r10,144(sp)
    a028:	1705883a 	add	r2,r2,fp
    a02c:	47000115 	stw	fp,4(r8)
    a030:	42800015 	stw	r10,0(r8)
    a034:	d8801c15 	stw	r2,112(sp)
    a038:	d9001b15 	stw	r4,108(sp)
    a03c:	00c001c4 	movi	r3,7
    a040:	19003616 	blt	r3,r4,a11c <___vfiprintf_internal_r+0xd68>
    a044:	42000204 	addi	r8,r8,8
    a048:	21000044 	addi	r4,r4,1
    a04c:	003e5706 	br	99ac <__alt_data_end+0xff0099ac>
    a050:	d9402117 	ldw	r5,132(sp)
    a054:	d9002017 	ldw	r4,128(sp)
    a058:	d9801a04 	addi	r6,sp,104
    a05c:	d9c02b15 	stw	r7,172(sp)
    a060:	db402a15 	stw	r13,168(sp)
    a064:	00092a00 	call	92a0 <__sprint_r.part.0>
    a068:	d9c02b17 	ldw	r7,172(sp)
    a06c:	db402a17 	ldw	r13,168(sp)
    a070:	1000241e 	bne	r2,zero,a104 <___vfiprintf_internal_r+0xd50>
    a074:	d9401b17 	ldw	r5,108(sp)
    a078:	d8801c17 	ldw	r2,112(sp)
    a07c:	d811883a 	mov	r8,sp
    a080:	29000044 	addi	r4,r5,1
    a084:	003fd806 	br	9fe8 <__alt_data_end+0xff009fe8>
    a088:	d9401b17 	ldw	r5,108(sp)
    a08c:	00c00074 	movhi	r3,1
    a090:	18c1c804 	addi	r3,r3,1824
    a094:	d8c02415 	stw	r3,144(sp)
    a098:	29400044 	addi	r5,r5,1
    a09c:	d8c02417 	ldw	r3,144(sp)
    a0a0:	14c5883a 	add	r2,r2,r19
    a0a4:	44c00115 	stw	r19,4(r8)
    a0a8:	40c00015 	stw	r3,0(r8)
    a0ac:	d8801c15 	stw	r2,112(sp)
    a0b0:	d9401b15 	stw	r5,108(sp)
    a0b4:	00c001c4 	movi	r3,7
    a0b8:	1940070e 	bge	r3,r5,a0d8 <___vfiprintf_internal_r+0xd24>
    a0bc:	103e4826 	beq	r2,zero,99e0 <__alt_data_end+0xff0099e0>
    a0c0:	d9402117 	ldw	r5,132(sp)
    a0c4:	d9002017 	ldw	r4,128(sp)
    a0c8:	d9801a04 	addi	r6,sp,104
    a0cc:	00092a00 	call	92a0 <__sprint_r.part.0>
    a0d0:	10000c1e 	bne	r2,zero,a104 <___vfiprintf_internal_r+0xd50>
    a0d4:	d8801c17 	ldw	r2,112(sp)
    a0d8:	8c80010e 	bge	r17,r18,a0e0 <___vfiprintf_internal_r+0xd2c>
    a0dc:	9023883a 	mov	r17,r18
    a0e0:	da802317 	ldw	r10,140(sp)
    a0e4:	5455883a 	add	r10,r10,r17
    a0e8:	da802315 	stw	r10,140(sp)
    a0ec:	103e4126 	beq	r2,zero,99f4 <__alt_data_end+0xff0099f4>
    a0f0:	d9402117 	ldw	r5,132(sp)
    a0f4:	d9002017 	ldw	r4,128(sp)
    a0f8:	d9801a04 	addi	r6,sp,104
    a0fc:	00092a00 	call	92a0 <__sprint_r.part.0>
    a100:	103e3c26 	beq	r2,zero,99f4 <__alt_data_end+0xff0099f4>
    a104:	dd002117 	ldw	r20,132(sp)
    a108:	a080030b 	ldhu	r2,12(r20)
    a10c:	1080100c 	andi	r2,r2,64
    a110:	1001231e 	bne	r2,zero,a5a0 <___vfiprintf_internal_r+0x11ec>
    a114:	d8802317 	ldw	r2,140(sp)
    a118:	003d7b06 	br	9708 <__alt_data_end+0xff009708>
    a11c:	1000991e 	bne	r2,zero,a384 <___vfiprintf_internal_r+0xfd0>
    a120:	00c00044 	movi	r3,1
    a124:	9805883a 	mov	r2,r19
    a128:	dd400015 	stw	r21,0(sp)
    a12c:	dcc00115 	stw	r19,4(sp)
    a130:	dcc01c15 	stw	r19,112(sp)
    a134:	d8c01b15 	stw	r3,108(sp)
    a138:	d811883a 	mov	r8,sp
    a13c:	42000204 	addi	r8,r8,8
    a140:	a2c0010c 	andi	r11,r20,4
    a144:	583fe426 	beq	r11,zero,a0d8 <__alt_data_end+0xff00a0d8>
    a148:	8ca7c83a 	sub	r19,r17,r18
    a14c:	04ffe20e 	bge	zero,r19,a0d8 <__alt_data_end+0xff00a0d8>
    a150:	01c00404 	movi	r7,16
    a154:	3cffcc0e 	bge	r7,r19,a088 <__alt_data_end+0xff00a088>
    a158:	02800074 	movhi	r10,1
    a15c:	5281c804 	addi	r10,r10,1824
    a160:	d9001b17 	ldw	r4,108(sp)
    a164:	da802415 	stw	r10,144(sp)
    a168:	382b883a 	mov	r21,r7
    a16c:	050001c4 	movi	r20,7
    a170:	df002017 	ldw	fp,128(sp)
    a174:	00000506 	br	a18c <___vfiprintf_internal_r+0xdd8>
    a178:	21400084 	addi	r5,r4,2
    a17c:	42000204 	addi	r8,r8,8
    a180:	1809883a 	mov	r4,r3
    a184:	9cfffc04 	addi	r19,r19,-16
    a188:	acffc40e 	bge	r21,r19,a09c <__alt_data_end+0xff00a09c>
    a18c:	10800404 	addi	r2,r2,16
    a190:	20c00044 	addi	r3,r4,1
    a194:	45800015 	stw	r22,0(r8)
    a198:	45400115 	stw	r21,4(r8)
    a19c:	d8801c15 	stw	r2,112(sp)
    a1a0:	d8c01b15 	stw	r3,108(sp)
    a1a4:	a0fff40e 	bge	r20,r3,a178 <__alt_data_end+0xff00a178>
    a1a8:	1000041e 	bne	r2,zero,a1bc <___vfiprintf_internal_r+0xe08>
    a1ac:	01400044 	movi	r5,1
    a1b0:	0009883a 	mov	r4,zero
    a1b4:	d811883a 	mov	r8,sp
    a1b8:	003ff206 	br	a184 <__alt_data_end+0xff00a184>
    a1bc:	d9402117 	ldw	r5,132(sp)
    a1c0:	d9801a04 	addi	r6,sp,104
    a1c4:	e009883a 	mov	r4,fp
    a1c8:	00092a00 	call	92a0 <__sprint_r.part.0>
    a1cc:	103fcd1e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a1d0:	d9001b17 	ldw	r4,108(sp)
    a1d4:	d8801c17 	ldw	r2,112(sp)
    a1d8:	d811883a 	mov	r8,sp
    a1dc:	21400044 	addi	r5,r4,1
    a1e0:	003fe806 	br	a184 <__alt_data_end+0xff00a184>
    a1e4:	d9402117 	ldw	r5,132(sp)
    a1e8:	d9002017 	ldw	r4,128(sp)
    a1ec:	d9801a04 	addi	r6,sp,104
    a1f0:	d9c02b15 	stw	r7,172(sp)
    a1f4:	db402a15 	stw	r13,168(sp)
    a1f8:	00092a00 	call	92a0 <__sprint_r.part.0>
    a1fc:	d9c02b17 	ldw	r7,172(sp)
    a200:	db402a17 	ldw	r13,168(sp)
    a204:	103fbf1e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a208:	d9401b17 	ldw	r5,108(sp)
    a20c:	d8801c17 	ldw	r2,112(sp)
    a210:	d811883a 	mov	r8,sp
    a214:	29800044 	addi	r6,r5,1
    a218:	003dc406 	br	992c <__alt_data_end+0xff00992c>
    a21c:	1000d21e 	bne	r2,zero,a568 <___vfiprintf_internal_r+0x11b4>
    a220:	d8c01d87 	ldb	r3,118(sp)
    a224:	18009526 	beq	r3,zero,a47c <___vfiprintf_internal_r+0x10c8>
    a228:	00800044 	movi	r2,1
    a22c:	d8c01d84 	addi	r3,sp,118
    a230:	1009883a 	mov	r4,r2
    a234:	d8c00015 	stw	r3,0(sp)
    a238:	d8800115 	stw	r2,4(sp)
    a23c:	d811883a 	mov	r8,sp
    a240:	200b883a 	mov	r5,r4
    a244:	42000204 	addi	r8,r8,8
    a248:	21000044 	addi	r4,r4,1
    a24c:	003d9706 	br	98ac <__alt_data_end+0xff0098ac>
    a250:	d9001d04 	addi	r4,sp,116
    a254:	00800084 	movi	r2,2
    a258:	d9000015 	stw	r4,0(sp)
    a25c:	d8800115 	stw	r2,4(sp)
    a260:	1809883a 	mov	r4,r3
    a264:	d811883a 	mov	r8,sp
    a268:	200b883a 	mov	r5,r4
    a26c:	42000204 	addi	r8,r8,8
    a270:	21000044 	addi	r4,r4,1
    a274:	003f4e06 	br	9fb0 <__alt_data_end+0xff009fb0>
    a278:	d8001d85 	stb	zero,118(sp)
    a27c:	48005016 	blt	r9,zero,a3c0 <___vfiprintf_internal_r+0x100c>
    a280:	00ffdfc4 	movi	r3,-129
    a284:	94c4b03a 	or	r2,r18,r19
    a288:	a0e8703a 	and	r20,r20,r3
    a28c:	103d4426 	beq	r2,zero,97a0 <__alt_data_end+0xff0097a0>
    a290:	0039883a 	mov	fp,zero
    a294:	d9002617 	ldw	r4,152(sp)
    a298:	dd401a04 	addi	r21,sp,104
    a29c:	908003cc 	andi	r2,r18,15
    a2a0:	9806973a 	slli	r3,r19,28
    a2a4:	2085883a 	add	r2,r4,r2
    a2a8:	9024d13a 	srli	r18,r18,4
    a2ac:	10800003 	ldbu	r2,0(r2)
    a2b0:	9826d13a 	srli	r19,r19,4
    a2b4:	ad7fffc4 	addi	r21,r21,-1
    a2b8:	1ca4b03a 	or	r18,r3,r18
    a2bc:	a8800005 	stb	r2,0(r21)
    a2c0:	94c4b03a 	or	r2,r18,r19
    a2c4:	103ff51e 	bne	r2,zero,a29c <__alt_data_end+0xff00a29c>
    a2c8:	003e5906 	br	9c30 <__alt_data_end+0xff009c30>
    a2cc:	d9402117 	ldw	r5,132(sp)
    a2d0:	d9002017 	ldw	r4,128(sp)
    a2d4:	d9801a04 	addi	r6,sp,104
    a2d8:	00092a00 	call	92a0 <__sprint_r.part.0>
    a2dc:	103f891e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a2e0:	d8801c17 	ldw	r2,112(sp)
    a2e4:	d811883a 	mov	r8,sp
    a2e8:	003f9506 	br	a140 <__alt_data_end+0xff00a140>
    a2ec:	d9402117 	ldw	r5,132(sp)
    a2f0:	d9002017 	ldw	r4,128(sp)
    a2f4:	d9801a04 	addi	r6,sp,104
    a2f8:	00092a00 	call	92a0 <__sprint_r.part.0>
    a2fc:	103f811e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a300:	d811883a 	mov	r8,sp
    a304:	003ced06 	br	96bc <__alt_data_end+0xff0096bc>
    a308:	d9402117 	ldw	r5,132(sp)
    a30c:	d9002017 	ldw	r4,128(sp)
    a310:	d9801a04 	addi	r6,sp,104
    a314:	da402c15 	stw	r9,176(sp)
    a318:	db802a15 	stw	r14,168(sp)
    a31c:	00092a00 	call	92a0 <__sprint_r.part.0>
    a320:	da402c17 	ldw	r9,176(sp)
    a324:	db802a17 	ldw	r14,168(sp)
    a328:	103f761e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a32c:	d9401b17 	ldw	r5,108(sp)
    a330:	d8801c17 	ldw	r2,112(sp)
    a334:	d811883a 	mov	r8,sp
    a338:	29000044 	addi	r4,r5,1
    a33c:	003d5b06 	br	98ac <__alt_data_end+0xff0098ac>
    a340:	d9402117 	ldw	r5,132(sp)
    a344:	d9002017 	ldw	r4,128(sp)
    a348:	d9801a04 	addi	r6,sp,104
    a34c:	da402c15 	stw	r9,176(sp)
    a350:	00092a00 	call	92a0 <__sprint_r.part.0>
    a354:	da402c17 	ldw	r9,176(sp)
    a358:	103f6a1e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a35c:	d9401b17 	ldw	r5,108(sp)
    a360:	d8801c17 	ldw	r2,112(sp)
    a364:	d811883a 	mov	r8,sp
    a368:	29000044 	addi	r4,r5,1
    a36c:	003f1006 	br	9fb0 <__alt_data_end+0xff009fb0>
    a370:	1000c31e 	bne	r2,zero,a680 <___vfiprintf_internal_r+0x12cc>
    a374:	01000044 	movi	r4,1
    a378:	000b883a 	mov	r5,zero
    a37c:	d811883a 	mov	r8,sp
    a380:	003f0d06 	br	9fb8 <__alt_data_end+0xff009fb8>
    a384:	d9402117 	ldw	r5,132(sp)
    a388:	d9002017 	ldw	r4,128(sp)
    a38c:	d9801a04 	addi	r6,sp,104
    a390:	00092a00 	call	92a0 <__sprint_r.part.0>
    a394:	103f5b1e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a398:	d9001b17 	ldw	r4,108(sp)
    a39c:	d8801c17 	ldw	r2,112(sp)
    a3a0:	d811883a 	mov	r8,sp
    a3a4:	21000044 	addi	r4,r4,1
    a3a8:	003d8006 	br	99ac <__alt_data_end+0xff0099ac>
    a3ac:	01000074 	movhi	r4,1
    a3b0:	21016304 	addi	r4,r4,1420
    a3b4:	d9002615 	stw	r4,152(sp)
    a3b8:	d8c02215 	stw	r3,136(sp)
    a3bc:	1029883a 	mov	r20,r2
    a3c0:	94c4b03a 	or	r2,r18,r19
    a3c4:	103fb21e 	bne	r2,zero,a290 <__alt_data_end+0xff00a290>
    a3c8:	0039883a 	mov	fp,zero
    a3cc:	00800084 	movi	r2,2
    a3d0:	003e6b06 	br	9d80 <__alt_data_end+0xff009d80>
    a3d4:	da802217 	ldw	r10,136(sp)
    a3d8:	d8001d85 	stb	zero,118(sp)
    a3dc:	0027883a 	mov	r19,zero
    a3e0:	50800104 	addi	r2,r10,4
    a3e4:	54800017 	ldw	r18,0(r10)
    a3e8:	483e6016 	blt	r9,zero,9d6c <__alt_data_end+0xff009d6c>
    a3ec:	00ffdfc4 	movi	r3,-129
    a3f0:	d8802215 	stw	r2,136(sp)
    a3f4:	a0e8703a 	and	r20,r20,r3
    a3f8:	0039883a 	mov	fp,zero
    a3fc:	903ebb26 	beq	r18,zero,9eec <__alt_data_end+0xff009eec>
    a400:	00800244 	movi	r2,9
    a404:	14bdee36 	bltu	r2,r18,9bc0 <__alt_data_end+0xff009bc0>
    a408:	003eba06 	br	9ef4 <__alt_data_end+0xff009ef4>
    a40c:	00800c04 	movi	r2,48
    a410:	d8c01d45 	stb	r3,117(sp)
    a414:	d8801d05 	stb	r2,116(sp)
    a418:	d8001d85 	stb	zero,118(sp)
    a41c:	a0c00094 	ori	r3,r20,2
    a420:	4800a916 	blt	r9,zero,a6c8 <___vfiprintf_internal_r+0x1314>
    a424:	00bfdfc4 	movi	r2,-129
    a428:	a096703a 	and	r11,r20,r2
    a42c:	5d000094 	ori	r20,r11,2
    a430:	0039883a 	mov	fp,zero
    a434:	003f9706 	br	a294 <__alt_data_end+0xff00a294>
    a438:	8025883a 	mov	r18,r16
    a43c:	003c2e06 	br	94f8 <__alt_data_end+0xff0094f8>
    a440:	00800074 	movhi	r2,1
    a444:	10816304 	addi	r2,r2,1420
    a448:	0039883a 	mov	fp,zero
    a44c:	d8802615 	stw	r2,152(sp)
    a450:	003f9006 	br	a294 <__alt_data_end+0xff00a294>
    a454:	04a5c83a 	sub	r18,zero,r18
    a458:	07000b44 	movi	fp,45
    a45c:	9004c03a 	cmpne	r2,r18,zero
    a460:	04e7c83a 	sub	r19,zero,r19
    a464:	df001d85 	stb	fp,118(sp)
    a468:	98a7c83a 	sub	r19,r19,r2
    a46c:	48009f16 	blt	r9,zero,a6ec <___vfiprintf_internal_r+0x1338>
    a470:	00bfdfc4 	movi	r2,-129
    a474:	a0a8703a 	and	r20,r20,r2
    a478:	003dd006 	br	9bbc <__alt_data_end+0xff009bbc>
    a47c:	70004c26 	beq	r14,zero,a5b0 <___vfiprintf_internal_r+0x11fc>
    a480:	00800084 	movi	r2,2
    a484:	d8c01d04 	addi	r3,sp,116
    a488:	d8c00015 	stw	r3,0(sp)
    a48c:	d8800115 	stw	r2,4(sp)
    a490:	01000044 	movi	r4,1
    a494:	d811883a 	mov	r8,sp
    a498:	003f7306 	br	a268 <__alt_data_end+0xff00a268>
    a49c:	a080100c 	andi	r2,r20,64
    a4a0:	da802217 	ldw	r10,136(sp)
    a4a4:	103e0626 	beq	r2,zero,9cc0 <__alt_data_end+0xff009cc0>
    a4a8:	5480000f 	ldh	r18,0(r10)
    a4ac:	52800104 	addi	r10,r10,4
    a4b0:	da802215 	stw	r10,136(sp)
    a4b4:	9027d7fa 	srai	r19,r18,31
    a4b8:	9805883a 	mov	r2,r19
    a4bc:	003db806 	br	9ba0 <__alt_data_end+0xff009ba0>
    a4c0:	a080040c 	andi	r2,r20,16
    a4c4:	1000091e 	bne	r2,zero,a4ec <___vfiprintf_internal_r+0x1138>
    a4c8:	a2c0100c 	andi	r11,r20,64
    a4cc:	58000726 	beq	r11,zero,a4ec <___vfiprintf_internal_r+0x1138>
    a4d0:	da802217 	ldw	r10,136(sp)
    a4d4:	50800017 	ldw	r2,0(r10)
    a4d8:	52800104 	addi	r10,r10,4
    a4dc:	da802215 	stw	r10,136(sp)
    a4e0:	da802317 	ldw	r10,140(sp)
    a4e4:	1280000d 	sth	r10,0(r2)
    a4e8:	003be706 	br	9488 <__alt_data_end+0xff009488>
    a4ec:	da802217 	ldw	r10,136(sp)
    a4f0:	50800017 	ldw	r2,0(r10)
    a4f4:	52800104 	addi	r10,r10,4
    a4f8:	da802215 	stw	r10,136(sp)
    a4fc:	da802317 	ldw	r10,140(sp)
    a500:	12800015 	stw	r10,0(r2)
    a504:	003be006 	br	9488 <__alt_data_end+0xff009488>
    a508:	a080100c 	andi	r2,r20,64
    a50c:	da802217 	ldw	r10,136(sp)
    a510:	10003026 	beq	r2,zero,a5d4 <___vfiprintf_internal_r+0x1220>
    a514:	5480000b 	ldhu	r18,0(r10)
    a518:	52800104 	addi	r10,r10,4
    a51c:	0027883a 	mov	r19,zero
    a520:	da802215 	stw	r10,136(sp)
    a524:	003d8006 	br	9b28 <__alt_data_end+0xff009b28>
    a528:	80c00007 	ldb	r3,0(r16)
    a52c:	003c0006 	br	9530 <__alt_data_end+0xff009530>
    a530:	a080100c 	andi	r2,r20,64
    a534:	d8001d85 	stb	zero,118(sp)
    a538:	da802217 	ldw	r10,136(sp)
    a53c:	1000201e 	bne	r2,zero,a5c0 <___vfiprintf_internal_r+0x120c>
    a540:	50800104 	addi	r2,r10,4
    a544:	54800017 	ldw	r18,0(r10)
    a548:	0027883a 	mov	r19,zero
    a54c:	483def0e 	bge	r9,zero,9d0c <__alt_data_end+0xff009d0c>
    a550:	94c6b03a 	or	r3,r18,r19
    a554:	d8802215 	stw	r2,136(sp)
    a558:	183d4e1e 	bne	r3,zero,9a94 <__alt_data_end+0xff009a94>
    a55c:	0039883a 	mov	fp,zero
    a560:	0005883a 	mov	r2,zero
    a564:	003e0606 	br	9d80 <__alt_data_end+0xff009d80>
    a568:	d9402117 	ldw	r5,132(sp)
    a56c:	d9002017 	ldw	r4,128(sp)
    a570:	d9801a04 	addi	r6,sp,104
    a574:	da402c15 	stw	r9,176(sp)
    a578:	db802a15 	stw	r14,168(sp)
    a57c:	00092a00 	call	92a0 <__sprint_r.part.0>
    a580:	da402c17 	ldw	r9,176(sp)
    a584:	db802a17 	ldw	r14,168(sp)
    a588:	103ede1e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a58c:	d9401b17 	ldw	r5,108(sp)
    a590:	d8801c17 	ldw	r2,112(sp)
    a594:	d811883a 	mov	r8,sp
    a598:	29000044 	addi	r4,r5,1
    a59c:	003e7406 	br	9f70 <__alt_data_end+0xff009f70>
    a5a0:	00bfffc4 	movi	r2,-1
    a5a4:	003c5806 	br	9708 <__alt_data_end+0xff009708>
    a5a8:	d811883a 	mov	r8,sp
    a5ac:	003ee806 	br	a150 <__alt_data_end+0xff00a150>
    a5b0:	000b883a 	mov	r5,zero
    a5b4:	01000044 	movi	r4,1
    a5b8:	d811883a 	mov	r8,sp
    a5bc:	003e7c06 	br	9fb0 <__alt_data_end+0xff009fb0>
    a5c0:	50800104 	addi	r2,r10,4
    a5c4:	5480000b 	ldhu	r18,0(r10)
    a5c8:	0027883a 	mov	r19,zero
    a5cc:	483dcf0e 	bge	r9,zero,9d0c <__alt_data_end+0xff009d0c>
    a5d0:	003fdf06 	br	a550 <__alt_data_end+0xff00a550>
    a5d4:	54800017 	ldw	r18,0(r10)
    a5d8:	52800104 	addi	r10,r10,4
    a5dc:	0027883a 	mov	r19,zero
    a5e0:	da802215 	stw	r10,136(sp)
    a5e4:	003d5006 	br	9b28 <__alt_data_end+0xff009b28>
    a5e8:	50800104 	addi	r2,r10,4
    a5ec:	5480000b 	ldhu	r18,0(r10)
    a5f0:	0027883a 	mov	r19,zero
    a5f4:	483f7d0e 	bge	r9,zero,a3ec <__alt_data_end+0xff00a3ec>
    a5f8:	003ddc06 	br	9d6c <__alt_data_end+0xff009d6c>
    a5fc:	d8c02215 	stw	r3,136(sp)
    a600:	0039883a 	mov	fp,zero
    a604:	003ddb06 	br	9d74 <__alt_data_end+0xff009d74>
    a608:	02800074 	movhi	r10,1
    a60c:	5281c404 	addi	r10,r10,1808
    a610:	da802415 	stw	r10,144(sp)
    a614:	003e8306 	br	a024 <__alt_data_end+0xff00a024>
    a618:	d8801c17 	ldw	r2,112(sp)
    a61c:	dd002117 	ldw	r20,132(sp)
    a620:	103eb926 	beq	r2,zero,a108 <__alt_data_end+0xff00a108>
    a624:	d9002017 	ldw	r4,128(sp)
    a628:	d9801a04 	addi	r6,sp,104
    a62c:	a00b883a 	mov	r5,r20
    a630:	00092a00 	call	92a0 <__sprint_r.part.0>
    a634:	003eb406 	br	a108 <__alt_data_end+0xff00a108>
    a638:	80c00043 	ldbu	r3,1(r16)
    a63c:	a5000814 	ori	r20,r20,32
    a640:	84000044 	addi	r16,r16,1
    a644:	18c03fcc 	andi	r3,r3,255
    a648:	18c0201c 	xori	r3,r3,128
    a64c:	18ffe004 	addi	r3,r3,-128
    a650:	003bb706 	br	9530 <__alt_data_end+0xff009530>
    a654:	a809883a 	mov	r4,r21
    a658:	d8c02a15 	stw	r3,168(sp)
    a65c:	da002b15 	stw	r8,172(sp)
    a660:	00025680 	call	2568 <strlen>
    a664:	d8c02a17 	ldw	r3,168(sp)
    a668:	1027883a 	mov	r19,r2
    a66c:	df001d83 	ldbu	fp,118(sp)
    a670:	d8c02215 	stw	r3,136(sp)
    a674:	0013883a 	mov	r9,zero
    a678:	da002b17 	ldw	r8,172(sp)
    a67c:	003c4d06 	br	97b4 <__alt_data_end+0xff0097b4>
    a680:	d9402117 	ldw	r5,132(sp)
    a684:	d9002017 	ldw	r4,128(sp)
    a688:	d9801a04 	addi	r6,sp,104
    a68c:	da402c15 	stw	r9,176(sp)
    a690:	00092a00 	call	92a0 <__sprint_r.part.0>
    a694:	da402c17 	ldw	r9,176(sp)
    a698:	103e9a1e 	bne	r2,zero,a104 <__alt_data_end+0xff00a104>
    a69c:	d9401b17 	ldw	r5,108(sp)
    a6a0:	d8801c17 	ldw	r2,112(sp)
    a6a4:	d811883a 	mov	r8,sp
    a6a8:	29000044 	addi	r4,r5,1
    a6ac:	003e4206 	br	9fb8 <__alt_data_end+0xff009fb8>
    a6b0:	d9401b17 	ldw	r5,108(sp)
    a6b4:	01000074 	movhi	r4,1
    a6b8:	2101c804 	addi	r4,r4,1824
    a6bc:	d9002415 	stw	r4,144(sp)
    a6c0:	29400044 	addi	r5,r5,1
    a6c4:	003c6d06 	br	987c <__alt_data_end+0xff00987c>
    a6c8:	0039883a 	mov	fp,zero
    a6cc:	00800084 	movi	r2,2
    a6d0:	10803fcc 	andi	r2,r2,255
    a6d4:	01000044 	movi	r4,1
    a6d8:	11001e26 	beq	r2,r4,a754 <___vfiprintf_internal_r+0x13a0>
    a6dc:	01000084 	movi	r4,2
    a6e0:	11001e1e 	bne	r2,r4,a75c <___vfiprintf_internal_r+0x13a8>
    a6e4:	1829883a 	mov	r20,r3
    a6e8:	003eea06 	br	a294 <__alt_data_end+0xff00a294>
    a6ec:	a007883a 	mov	r3,r20
    a6f0:	00800044 	movi	r2,1
    a6f4:	003ff606 	br	a6d0 <__alt_data_end+0xff00a6d0>
    a6f8:	00800184 	movi	r2,6
    a6fc:	1240012e 	bgeu	r2,r9,a704 <___vfiprintf_internal_r+0x1350>
    a700:	1013883a 	mov	r9,r2
    a704:	4827883a 	mov	r19,r9
    a708:	4825883a 	mov	r18,r9
    a70c:	48001516 	blt	r9,zero,a764 <___vfiprintf_internal_r+0x13b0>
    a710:	05400074 	movhi	r21,1
    a714:	d8c02215 	stw	r3,136(sp)
    a718:	ad416804 	addi	r21,r21,1440
    a71c:	003d1406 	br	9b70 <__alt_data_end+0xff009b70>
    a720:	02800074 	movhi	r10,1
    a724:	5281c404 	addi	r10,r10,1808
    a728:	da802415 	stw	r10,144(sp)
    a72c:	200d883a 	mov	r6,r4
    a730:	003c9106 	br	9978 <__alt_data_end+0xff009978>
    a734:	5021883a 	mov	r16,r10
    a738:	0013883a 	mov	r9,zero
    a73c:	003b7d06 	br	9534 <__alt_data_end+0xff009534>
    a740:	4827883a 	mov	r19,r9
    a744:	df001d83 	ldbu	fp,118(sp)
    a748:	d8c02215 	stw	r3,136(sp)
    a74c:	0013883a 	mov	r9,zero
    a750:	003c1806 	br	97b4 <__alt_data_end+0xff0097b4>
    a754:	1829883a 	mov	r20,r3
    a758:	003d1806 	br	9bbc <__alt_data_end+0xff009bbc>
    a75c:	1829883a 	mov	r20,r3
    a760:	003ccd06 	br	9a98 <__alt_data_end+0xff009a98>
    a764:	0025883a 	mov	r18,zero
    a768:	003fe906 	br	a710 <__alt_data_end+0xff00a710>
    a76c:	d8802217 	ldw	r2,136(sp)
    a770:	80c00043 	ldbu	r3,1(r16)
    a774:	5021883a 	mov	r16,r10
    a778:	12400017 	ldw	r9,0(r2)
    a77c:	10800104 	addi	r2,r2,4
    a780:	d8802215 	stw	r2,136(sp)
    a784:	483faf0e 	bge	r9,zero,a644 <__alt_data_end+0xff00a644>
    a788:	18c03fcc 	andi	r3,r3,255
    a78c:	18c0201c 	xori	r3,r3,128
    a790:	027fffc4 	movi	r9,-1
    a794:	18ffe004 	addi	r3,r3,-128
    a798:	003b6506 	br	9530 <__alt_data_end+0xff009530>
    a79c:	d9c01d85 	stb	r7,118(sp)
    a7a0:	003ca006 	br	9a24 <__alt_data_end+0xff009a24>
    a7a4:	d9c01d85 	stb	r7,118(sp)
    a7a8:	003cad06 	br	9a60 <__alt_data_end+0xff009a60>
    a7ac:	d9c01d85 	stb	r7,118(sp)
    a7b0:	003d7d06 	br	9da8 <__alt_data_end+0xff009da8>
    a7b4:	d9c01d85 	stb	r7,118(sp)
    a7b8:	003d5f06 	br	9d38 <__alt_data_end+0xff009d38>
    a7bc:	a080004c 	andi	r2,r20,1
    a7c0:	0039883a 	mov	fp,zero
    a7c4:	10000526 	beq	r2,zero,a7dc <___vfiprintf_internal_r+0x1428>
    a7c8:	00800c04 	movi	r2,48
    a7cc:	d88019c5 	stb	r2,103(sp)
    a7d0:	dcc02717 	ldw	r19,156(sp)
    a7d4:	dd4019c4 	addi	r21,sp,103
    a7d8:	003bf606 	br	97b4 <__alt_data_end+0xff0097b4>
    a7dc:	0027883a 	mov	r19,zero
    a7e0:	dd401a04 	addi	r21,sp,104
    a7e4:	003bf306 	br	97b4 <__alt_data_end+0xff0097b4>
    a7e8:	d9c01d85 	stb	r7,118(sp)
    a7ec:	003dc806 	br	9f10 <__alt_data_end+0xff009f10>
    a7f0:	d9c01d85 	stb	r7,118(sp)
    a7f4:	003d3a06 	br	9ce0 <__alt_data_end+0xff009ce0>
    a7f8:	d9c01d85 	stb	r7,118(sp)
    a7fc:	003d2a06 	br	9ca8 <__alt_data_end+0xff009ca8>
    a800:	d9c01d85 	stb	r7,118(sp)
    a804:	003cde06 	br	9b80 <__alt_data_end+0xff009b80>
    a808:	d9c01d85 	stb	r7,118(sp)
    a80c:	003cbc06 	br	9b00 <__alt_data_end+0xff009b00>

0000a810 <__vfiprintf_internal>:
    a810:	00800074 	movhi	r2,1
    a814:	1088c304 	addi	r2,r2,8972
    a818:	300f883a 	mov	r7,r6
    a81c:	280d883a 	mov	r6,r5
    a820:	200b883a 	mov	r5,r4
    a824:	11000017 	ldw	r4,0(r2)
    a828:	00093b41 	jmpi	93b4 <___vfiprintf_internal_r>

0000a82c <__sbprintf>:
    a82c:	2880030b 	ldhu	r2,12(r5)
    a830:	2ac01917 	ldw	r11,100(r5)
    a834:	2a80038b 	ldhu	r10,14(r5)
    a838:	2a400717 	ldw	r9,28(r5)
    a83c:	2a000917 	ldw	r8,36(r5)
    a840:	defee204 	addi	sp,sp,-1144
    a844:	00c10004 	movi	r3,1024
    a848:	dc011a15 	stw	r16,1128(sp)
    a84c:	10bfff4c 	andi	r2,r2,65533
    a850:	2821883a 	mov	r16,r5
    a854:	d8cb883a 	add	r5,sp,r3
    a858:	dc811c15 	stw	r18,1136(sp)
    a85c:	dc411b15 	stw	r17,1132(sp)
    a860:	dfc11d15 	stw	ra,1140(sp)
    a864:	2025883a 	mov	r18,r4
    a868:	d881030d 	sth	r2,1036(sp)
    a86c:	dac11915 	stw	r11,1124(sp)
    a870:	da81038d 	sth	r10,1038(sp)
    a874:	da410715 	stw	r9,1052(sp)
    a878:	da010915 	stw	r8,1060(sp)
    a87c:	dec10015 	stw	sp,1024(sp)
    a880:	dec10415 	stw	sp,1040(sp)
    a884:	d8c10215 	stw	r3,1032(sp)
    a888:	d8c10515 	stw	r3,1044(sp)
    a88c:	d8010615 	stw	zero,1048(sp)
    a890:	00093b40 	call	93b4 <___vfiprintf_internal_r>
    a894:	1023883a 	mov	r17,r2
    a898:	10000416 	blt	r2,zero,a8ac <__sbprintf+0x80>
    a89c:	d9410004 	addi	r5,sp,1024
    a8a0:	9009883a 	mov	r4,r18
    a8a4:	00064c80 	call	64c8 <_fflush_r>
    a8a8:	10000d1e 	bne	r2,zero,a8e0 <__sbprintf+0xb4>
    a8ac:	d881030b 	ldhu	r2,1036(sp)
    a8b0:	1080100c 	andi	r2,r2,64
    a8b4:	10000326 	beq	r2,zero,a8c4 <__sbprintf+0x98>
    a8b8:	8080030b 	ldhu	r2,12(r16)
    a8bc:	10801014 	ori	r2,r2,64
    a8c0:	8080030d 	sth	r2,12(r16)
    a8c4:	8805883a 	mov	r2,r17
    a8c8:	dfc11d17 	ldw	ra,1140(sp)
    a8cc:	dc811c17 	ldw	r18,1136(sp)
    a8d0:	dc411b17 	ldw	r17,1132(sp)
    a8d4:	dc011a17 	ldw	r16,1128(sp)
    a8d8:	dec11e04 	addi	sp,sp,1144
    a8dc:	f800283a 	ret
    a8e0:	047fffc4 	movi	r17,-1
    a8e4:	003ff106 	br	a8ac <__alt_data_end+0xff00a8ac>

0000a8e8 <_write_r>:
    a8e8:	defffd04 	addi	sp,sp,-12
    a8ec:	2805883a 	mov	r2,r5
    a8f0:	dc000015 	stw	r16,0(sp)
    a8f4:	04000074 	movhi	r16,1
    a8f8:	dc400115 	stw	r17,4(sp)
    a8fc:	300b883a 	mov	r5,r6
    a900:	840f9a04 	addi	r16,r16,15976
    a904:	2023883a 	mov	r17,r4
    a908:	380d883a 	mov	r6,r7
    a90c:	1009883a 	mov	r4,r2
    a910:	dfc00215 	stw	ra,8(sp)
    a914:	80000015 	stw	zero,0(r16)
    a918:	000ea000 	call	ea00 <write>
    a91c:	00ffffc4 	movi	r3,-1
    a920:	10c00526 	beq	r2,r3,a938 <_write_r+0x50>
    a924:	dfc00217 	ldw	ra,8(sp)
    a928:	dc400117 	ldw	r17,4(sp)
    a92c:	dc000017 	ldw	r16,0(sp)
    a930:	dec00304 	addi	sp,sp,12
    a934:	f800283a 	ret
    a938:	80c00017 	ldw	r3,0(r16)
    a93c:	183ff926 	beq	r3,zero,a924 <__alt_data_end+0xff00a924>
    a940:	88c00015 	stw	r3,0(r17)
    a944:	003ff706 	br	a924 <__alt_data_end+0xff00a924>

0000a948 <_close_r>:
    a948:	defffd04 	addi	sp,sp,-12
    a94c:	dc000015 	stw	r16,0(sp)
    a950:	04000074 	movhi	r16,1
    a954:	dc400115 	stw	r17,4(sp)
    a958:	840f9a04 	addi	r16,r16,15976
    a95c:	2023883a 	mov	r17,r4
    a960:	2809883a 	mov	r4,r5
    a964:	dfc00215 	stw	ra,8(sp)
    a968:	80000015 	stw	zero,0(r16)
    a96c:	000e4e80 	call	e4e8 <close>
    a970:	00ffffc4 	movi	r3,-1
    a974:	10c00526 	beq	r2,r3,a98c <_close_r+0x44>
    a978:	dfc00217 	ldw	ra,8(sp)
    a97c:	dc400117 	ldw	r17,4(sp)
    a980:	dc000017 	ldw	r16,0(sp)
    a984:	dec00304 	addi	sp,sp,12
    a988:	f800283a 	ret
    a98c:	80c00017 	ldw	r3,0(r16)
    a990:	183ff926 	beq	r3,zero,a978 <__alt_data_end+0xff00a978>
    a994:	88c00015 	stw	r3,0(r17)
    a998:	003ff706 	br	a978 <__alt_data_end+0xff00a978>

0000a99c <_calloc_r>:
    a99c:	298b383a 	mul	r5,r5,r6
    a9a0:	defffe04 	addi	sp,sp,-8
    a9a4:	dfc00115 	stw	ra,4(sp)
    a9a8:	dc000015 	stw	r16,0(sp)
    a9ac:	0001bc80 	call	1bc8 <_malloc_r>
    a9b0:	10002926 	beq	r2,zero,aa58 <_calloc_r+0xbc>
    a9b4:	11bfff17 	ldw	r6,-4(r2)
    a9b8:	1021883a 	mov	r16,r2
    a9bc:	00bfff04 	movi	r2,-4
    a9c0:	308c703a 	and	r6,r6,r2
    a9c4:	00c00904 	movi	r3,36
    a9c8:	308d883a 	add	r6,r6,r2
    a9cc:	19801636 	bltu	r3,r6,aa28 <_calloc_r+0x8c>
    a9d0:	008004c4 	movi	r2,19
    a9d4:	11800b2e 	bgeu	r2,r6,aa04 <_calloc_r+0x68>
    a9d8:	80000015 	stw	zero,0(r16)
    a9dc:	80000115 	stw	zero,4(r16)
    a9e0:	008006c4 	movi	r2,27
    a9e4:	11801a2e 	bgeu	r2,r6,aa50 <_calloc_r+0xb4>
    a9e8:	80000215 	stw	zero,8(r16)
    a9ec:	80000315 	stw	zero,12(r16)
    a9f0:	30c0151e 	bne	r6,r3,aa48 <_calloc_r+0xac>
    a9f4:	80000415 	stw	zero,16(r16)
    a9f8:	80800604 	addi	r2,r16,24
    a9fc:	80000515 	stw	zero,20(r16)
    aa00:	00000106 	br	aa08 <_calloc_r+0x6c>
    aa04:	8005883a 	mov	r2,r16
    aa08:	10000015 	stw	zero,0(r2)
    aa0c:	10000115 	stw	zero,4(r2)
    aa10:	10000215 	stw	zero,8(r2)
    aa14:	8005883a 	mov	r2,r16
    aa18:	dfc00117 	ldw	ra,4(sp)
    aa1c:	dc000017 	ldw	r16,0(sp)
    aa20:	dec00204 	addi	sp,sp,8
    aa24:	f800283a 	ret
    aa28:	000b883a 	mov	r5,zero
    aa2c:	8009883a 	mov	r4,r16
    aa30:	000798c0 	call	798c <memset>
    aa34:	8005883a 	mov	r2,r16
    aa38:	dfc00117 	ldw	ra,4(sp)
    aa3c:	dc000017 	ldw	r16,0(sp)
    aa40:	dec00204 	addi	sp,sp,8
    aa44:	f800283a 	ret
    aa48:	80800404 	addi	r2,r16,16
    aa4c:	003fee06 	br	aa08 <__alt_data_end+0xff00aa08>
    aa50:	80800204 	addi	r2,r16,8
    aa54:	003fec06 	br	aa08 <__alt_data_end+0xff00aa08>
    aa58:	0005883a 	mov	r2,zero
    aa5c:	003fee06 	br	aa18 <__alt_data_end+0xff00aa18>

0000aa60 <_fclose_r>:
    aa60:	28003926 	beq	r5,zero,ab48 <_fclose_r+0xe8>
    aa64:	defffc04 	addi	sp,sp,-16
    aa68:	dc400115 	stw	r17,4(sp)
    aa6c:	dc000015 	stw	r16,0(sp)
    aa70:	dfc00315 	stw	ra,12(sp)
    aa74:	dc800215 	stw	r18,8(sp)
    aa78:	2023883a 	mov	r17,r4
    aa7c:	2821883a 	mov	r16,r5
    aa80:	20000226 	beq	r4,zero,aa8c <_fclose_r+0x2c>
    aa84:	20800e17 	ldw	r2,56(r4)
    aa88:	10002726 	beq	r2,zero,ab28 <_fclose_r+0xc8>
    aa8c:	8080030f 	ldh	r2,12(r16)
    aa90:	1000071e 	bne	r2,zero,aab0 <_fclose_r+0x50>
    aa94:	0005883a 	mov	r2,zero
    aa98:	dfc00317 	ldw	ra,12(sp)
    aa9c:	dc800217 	ldw	r18,8(sp)
    aaa0:	dc400117 	ldw	r17,4(sp)
    aaa4:	dc000017 	ldw	r16,0(sp)
    aaa8:	dec00404 	addi	sp,sp,16
    aaac:	f800283a 	ret
    aab0:	800b883a 	mov	r5,r16
    aab4:	8809883a 	mov	r4,r17
    aab8:	00062ac0 	call	62ac <__sflush_r>
    aabc:	1025883a 	mov	r18,r2
    aac0:	80800b17 	ldw	r2,44(r16)
    aac4:	10000426 	beq	r2,zero,aad8 <_fclose_r+0x78>
    aac8:	81400717 	ldw	r5,28(r16)
    aacc:	8809883a 	mov	r4,r17
    aad0:	103ee83a 	callr	r2
    aad4:	10001616 	blt	r2,zero,ab30 <_fclose_r+0xd0>
    aad8:	8080030b 	ldhu	r2,12(r16)
    aadc:	1080200c 	andi	r2,r2,128
    aae0:	1000151e 	bne	r2,zero,ab38 <_fclose_r+0xd8>
    aae4:	81400c17 	ldw	r5,48(r16)
    aae8:	28000526 	beq	r5,zero,ab00 <_fclose_r+0xa0>
    aaec:	80801004 	addi	r2,r16,64
    aaf0:	28800226 	beq	r5,r2,aafc <_fclose_r+0x9c>
    aaf4:	8809883a 	mov	r4,r17
    aaf8:	0006a180 	call	6a18 <_free_r>
    aafc:	80000c15 	stw	zero,48(r16)
    ab00:	81401117 	ldw	r5,68(r16)
    ab04:	28000326 	beq	r5,zero,ab14 <_fclose_r+0xb4>
    ab08:	8809883a 	mov	r4,r17
    ab0c:	0006a180 	call	6a18 <_free_r>
    ab10:	80001115 	stw	zero,68(r16)
    ab14:	00068b40 	call	68b4 <__sfp_lock_acquire>
    ab18:	8000030d 	sth	zero,12(r16)
    ab1c:	00068b80 	call	68b8 <__sfp_lock_release>
    ab20:	9005883a 	mov	r2,r18
    ab24:	003fdc06 	br	aa98 <__alt_data_end+0xff00aa98>
    ab28:	00068a40 	call	68a4 <__sinit>
    ab2c:	003fd706 	br	aa8c <__alt_data_end+0xff00aa8c>
    ab30:	04bfffc4 	movi	r18,-1
    ab34:	003fe806 	br	aad8 <__alt_data_end+0xff00aad8>
    ab38:	81400417 	ldw	r5,16(r16)
    ab3c:	8809883a 	mov	r4,r17
    ab40:	0006a180 	call	6a18 <_free_r>
    ab44:	003fe706 	br	aae4 <__alt_data_end+0xff00aae4>
    ab48:	0005883a 	mov	r2,zero
    ab4c:	f800283a 	ret

0000ab50 <fclose>:
    ab50:	00800074 	movhi	r2,1
    ab54:	1088c304 	addi	r2,r2,8972
    ab58:	200b883a 	mov	r5,r4
    ab5c:	11000017 	ldw	r4,0(r2)
    ab60:	000aa601 	jmpi	aa60 <_fclose_r>

0000ab64 <__fputwc>:
    ab64:	defff804 	addi	sp,sp,-32
    ab68:	dcc00415 	stw	r19,16(sp)
    ab6c:	dc800315 	stw	r18,12(sp)
    ab70:	dc000115 	stw	r16,4(sp)
    ab74:	dfc00715 	stw	ra,28(sp)
    ab78:	dd400615 	stw	r21,24(sp)
    ab7c:	dd000515 	stw	r20,20(sp)
    ab80:	dc400215 	stw	r17,8(sp)
    ab84:	2027883a 	mov	r19,r4
    ab88:	2825883a 	mov	r18,r5
    ab8c:	3021883a 	mov	r16,r6
    ab90:	00073f40 	call	73f4 <__locale_mb_cur_max>
    ab94:	00c00044 	movi	r3,1
    ab98:	10c03e26 	beq	r2,r3,ac94 <__fputwc+0x130>
    ab9c:	81c01704 	addi	r7,r16,92
    aba0:	900d883a 	mov	r6,r18
    aba4:	d80b883a 	mov	r5,sp
    aba8:	9809883a 	mov	r4,r19
    abac:	000b0340 	call	b034 <_wcrtomb_r>
    abb0:	1029883a 	mov	r20,r2
    abb4:	00bfffc4 	movi	r2,-1
    abb8:	a0802026 	beq	r20,r2,ac3c <__fputwc+0xd8>
    abbc:	d9400003 	ldbu	r5,0(sp)
    abc0:	a0001c26 	beq	r20,zero,ac34 <__fputwc+0xd0>
    abc4:	0023883a 	mov	r17,zero
    abc8:	05400284 	movi	r21,10
    abcc:	00000906 	br	abf4 <__fputwc+0x90>
    abd0:	80800017 	ldw	r2,0(r16)
    abd4:	11400005 	stb	r5,0(r2)
    abd8:	80c00017 	ldw	r3,0(r16)
    abdc:	18c00044 	addi	r3,r3,1
    abe0:	80c00015 	stw	r3,0(r16)
    abe4:	8c400044 	addi	r17,r17,1
    abe8:	dc45883a 	add	r2,sp,r17
    abec:	8d00112e 	bgeu	r17,r20,ac34 <__fputwc+0xd0>
    abf0:	11400003 	ldbu	r5,0(r2)
    abf4:	80c00217 	ldw	r3,8(r16)
    abf8:	18ffffc4 	addi	r3,r3,-1
    abfc:	80c00215 	stw	r3,8(r16)
    ac00:	183ff30e 	bge	r3,zero,abd0 <__alt_data_end+0xff00abd0>
    ac04:	80800617 	ldw	r2,24(r16)
    ac08:	18801916 	blt	r3,r2,ac70 <__fputwc+0x10c>
    ac0c:	80800017 	ldw	r2,0(r16)
    ac10:	11400005 	stb	r5,0(r2)
    ac14:	80800017 	ldw	r2,0(r16)
    ac18:	10c00003 	ldbu	r3,0(r2)
    ac1c:	10800044 	addi	r2,r2,1
    ac20:	1d402326 	beq	r3,r21,acb0 <__fputwc+0x14c>
    ac24:	80800015 	stw	r2,0(r16)
    ac28:	8c400044 	addi	r17,r17,1
    ac2c:	dc45883a 	add	r2,sp,r17
    ac30:	8d3fef36 	bltu	r17,r20,abf0 <__alt_data_end+0xff00abf0>
    ac34:	9005883a 	mov	r2,r18
    ac38:	00000406 	br	ac4c <__fputwc+0xe8>
    ac3c:	80c0030b 	ldhu	r3,12(r16)
    ac40:	a005883a 	mov	r2,r20
    ac44:	18c01014 	ori	r3,r3,64
    ac48:	80c0030d 	sth	r3,12(r16)
    ac4c:	dfc00717 	ldw	ra,28(sp)
    ac50:	dd400617 	ldw	r21,24(sp)
    ac54:	dd000517 	ldw	r20,20(sp)
    ac58:	dcc00417 	ldw	r19,16(sp)
    ac5c:	dc800317 	ldw	r18,12(sp)
    ac60:	dc400217 	ldw	r17,8(sp)
    ac64:	dc000117 	ldw	r16,4(sp)
    ac68:	dec00804 	addi	sp,sp,32
    ac6c:	f800283a 	ret
    ac70:	800d883a 	mov	r6,r16
    ac74:	29403fcc 	andi	r5,r5,255
    ac78:	9809883a 	mov	r4,r19
    ac7c:	000aedc0 	call	aedc <__swbuf_r>
    ac80:	10bfffe0 	cmpeqi	r2,r2,-1
    ac84:	10803fcc 	andi	r2,r2,255
    ac88:	103fd626 	beq	r2,zero,abe4 <__alt_data_end+0xff00abe4>
    ac8c:	00bfffc4 	movi	r2,-1
    ac90:	003fee06 	br	ac4c <__alt_data_end+0xff00ac4c>
    ac94:	90ffffc4 	addi	r3,r18,-1
    ac98:	01003f84 	movi	r4,254
    ac9c:	20ffbf36 	bltu	r4,r3,ab9c <__alt_data_end+0xff00ab9c>
    aca0:	900b883a 	mov	r5,r18
    aca4:	dc800005 	stb	r18,0(sp)
    aca8:	1029883a 	mov	r20,r2
    acac:	003fc506 	br	abc4 <__alt_data_end+0xff00abc4>
    acb0:	800d883a 	mov	r6,r16
    acb4:	a80b883a 	mov	r5,r21
    acb8:	9809883a 	mov	r4,r19
    acbc:	000aedc0 	call	aedc <__swbuf_r>
    acc0:	10bfffe0 	cmpeqi	r2,r2,-1
    acc4:	003fef06 	br	ac84 <__alt_data_end+0xff00ac84>

0000acc8 <_fputwc_r>:
    acc8:	3080030b 	ldhu	r2,12(r6)
    accc:	10c8000c 	andi	r3,r2,8192
    acd0:	1800051e 	bne	r3,zero,ace8 <_fputwc_r+0x20>
    acd4:	30c01917 	ldw	r3,100(r6)
    acd8:	10880014 	ori	r2,r2,8192
    acdc:	3080030d 	sth	r2,12(r6)
    ace0:	18880014 	ori	r2,r3,8192
    ace4:	30801915 	stw	r2,100(r6)
    ace8:	000ab641 	jmpi	ab64 <__fputwc>

0000acec <fputwc>:
    acec:	00800074 	movhi	r2,1
    acf0:	defffc04 	addi	sp,sp,-16
    acf4:	1088c304 	addi	r2,r2,8972
    acf8:	dc000115 	stw	r16,4(sp)
    acfc:	14000017 	ldw	r16,0(r2)
    ad00:	dc400215 	stw	r17,8(sp)
    ad04:	dfc00315 	stw	ra,12(sp)
    ad08:	2023883a 	mov	r17,r4
    ad0c:	80000226 	beq	r16,zero,ad18 <fputwc+0x2c>
    ad10:	80800e17 	ldw	r2,56(r16)
    ad14:	10001026 	beq	r2,zero,ad58 <fputwc+0x6c>
    ad18:	2880030b 	ldhu	r2,12(r5)
    ad1c:	10c8000c 	andi	r3,r2,8192
    ad20:	1800051e 	bne	r3,zero,ad38 <fputwc+0x4c>
    ad24:	28c01917 	ldw	r3,100(r5)
    ad28:	10880014 	ori	r2,r2,8192
    ad2c:	2880030d 	sth	r2,12(r5)
    ad30:	18880014 	ori	r2,r3,8192
    ad34:	28801915 	stw	r2,100(r5)
    ad38:	280d883a 	mov	r6,r5
    ad3c:	8009883a 	mov	r4,r16
    ad40:	880b883a 	mov	r5,r17
    ad44:	dfc00317 	ldw	ra,12(sp)
    ad48:	dc400217 	ldw	r17,8(sp)
    ad4c:	dc000117 	ldw	r16,4(sp)
    ad50:	dec00404 	addi	sp,sp,16
    ad54:	000ab641 	jmpi	ab64 <__fputwc>
    ad58:	8009883a 	mov	r4,r16
    ad5c:	d9400015 	stw	r5,0(sp)
    ad60:	00068a40 	call	68a4 <__sinit>
    ad64:	d9400017 	ldw	r5,0(sp)
    ad68:	003feb06 	br	ad18 <__alt_data_end+0xff00ad18>

0000ad6c <_fstat_r>:
    ad6c:	defffd04 	addi	sp,sp,-12
    ad70:	2805883a 	mov	r2,r5
    ad74:	dc000015 	stw	r16,0(sp)
    ad78:	04000074 	movhi	r16,1
    ad7c:	dc400115 	stw	r17,4(sp)
    ad80:	840f9a04 	addi	r16,r16,15976
    ad84:	2023883a 	mov	r17,r4
    ad88:	300b883a 	mov	r5,r6
    ad8c:	1009883a 	mov	r4,r2
    ad90:	dfc00215 	stw	ra,8(sp)
    ad94:	80000015 	stw	zero,0(r16)
    ad98:	000e5ac0 	call	e5ac <fstat>
    ad9c:	00ffffc4 	movi	r3,-1
    ada0:	10c00526 	beq	r2,r3,adb8 <_fstat_r+0x4c>
    ada4:	dfc00217 	ldw	ra,8(sp)
    ada8:	dc400117 	ldw	r17,4(sp)
    adac:	dc000017 	ldw	r16,0(sp)
    adb0:	dec00304 	addi	sp,sp,12
    adb4:	f800283a 	ret
    adb8:	80c00017 	ldw	r3,0(r16)
    adbc:	183ff926 	beq	r3,zero,ada4 <__alt_data_end+0xff00ada4>
    adc0:	88c00015 	stw	r3,0(r17)
    adc4:	003ff706 	br	ada4 <__alt_data_end+0xff00ada4>

0000adc8 <_isatty_r>:
    adc8:	defffd04 	addi	sp,sp,-12
    adcc:	dc000015 	stw	r16,0(sp)
    add0:	04000074 	movhi	r16,1
    add4:	dc400115 	stw	r17,4(sp)
    add8:	840f9a04 	addi	r16,r16,15976
    addc:	2023883a 	mov	r17,r4
    ade0:	2809883a 	mov	r4,r5
    ade4:	dfc00215 	stw	ra,8(sp)
    ade8:	80000015 	stw	zero,0(r16)
    adec:	000e6240 	call	e624 <isatty>
    adf0:	00ffffc4 	movi	r3,-1
    adf4:	10c00526 	beq	r2,r3,ae0c <_isatty_r+0x44>
    adf8:	dfc00217 	ldw	ra,8(sp)
    adfc:	dc400117 	ldw	r17,4(sp)
    ae00:	dc000017 	ldw	r16,0(sp)
    ae04:	dec00304 	addi	sp,sp,12
    ae08:	f800283a 	ret
    ae0c:	80c00017 	ldw	r3,0(r16)
    ae10:	183ff926 	beq	r3,zero,adf8 <__alt_data_end+0xff00adf8>
    ae14:	88c00015 	stw	r3,0(r17)
    ae18:	003ff706 	br	adf8 <__alt_data_end+0xff00adf8>

0000ae1c <_lseek_r>:
    ae1c:	defffd04 	addi	sp,sp,-12
    ae20:	2805883a 	mov	r2,r5
    ae24:	dc000015 	stw	r16,0(sp)
    ae28:	04000074 	movhi	r16,1
    ae2c:	dc400115 	stw	r17,4(sp)
    ae30:	300b883a 	mov	r5,r6
    ae34:	840f9a04 	addi	r16,r16,15976
    ae38:	2023883a 	mov	r17,r4
    ae3c:	380d883a 	mov	r6,r7
    ae40:	1009883a 	mov	r4,r2
    ae44:	dfc00215 	stw	ra,8(sp)
    ae48:	80000015 	stw	zero,0(r16)
    ae4c:	000e7740 	call	e774 <lseek>
    ae50:	00ffffc4 	movi	r3,-1
    ae54:	10c00526 	beq	r2,r3,ae6c <_lseek_r+0x50>
    ae58:	dfc00217 	ldw	ra,8(sp)
    ae5c:	dc400117 	ldw	r17,4(sp)
    ae60:	dc000017 	ldw	r16,0(sp)
    ae64:	dec00304 	addi	sp,sp,12
    ae68:	f800283a 	ret
    ae6c:	80c00017 	ldw	r3,0(r16)
    ae70:	183ff926 	beq	r3,zero,ae58 <__alt_data_end+0xff00ae58>
    ae74:	88c00015 	stw	r3,0(r17)
    ae78:	003ff706 	br	ae58 <__alt_data_end+0xff00ae58>

0000ae7c <_read_r>:
    ae7c:	defffd04 	addi	sp,sp,-12
    ae80:	2805883a 	mov	r2,r5
    ae84:	dc000015 	stw	r16,0(sp)
    ae88:	04000074 	movhi	r16,1
    ae8c:	dc400115 	stw	r17,4(sp)
    ae90:	300b883a 	mov	r5,r6
    ae94:	840f9a04 	addi	r16,r16,15976
    ae98:	2023883a 	mov	r17,r4
    ae9c:	380d883a 	mov	r6,r7
    aea0:	1009883a 	mov	r4,r2
    aea4:	dfc00215 	stw	ra,8(sp)
    aea8:	80000015 	stw	zero,0(r16)
    aeac:	000e8580 	call	e858 <read>
    aeb0:	00ffffc4 	movi	r3,-1
    aeb4:	10c00526 	beq	r2,r3,aecc <_read_r+0x50>
    aeb8:	dfc00217 	ldw	ra,8(sp)
    aebc:	dc400117 	ldw	r17,4(sp)
    aec0:	dc000017 	ldw	r16,0(sp)
    aec4:	dec00304 	addi	sp,sp,12
    aec8:	f800283a 	ret
    aecc:	80c00017 	ldw	r3,0(r16)
    aed0:	183ff926 	beq	r3,zero,aeb8 <__alt_data_end+0xff00aeb8>
    aed4:	88c00015 	stw	r3,0(r17)
    aed8:	003ff706 	br	aeb8 <__alt_data_end+0xff00aeb8>

0000aedc <__swbuf_r>:
    aedc:	defffb04 	addi	sp,sp,-20
    aee0:	dcc00315 	stw	r19,12(sp)
    aee4:	dc800215 	stw	r18,8(sp)
    aee8:	dc000015 	stw	r16,0(sp)
    aeec:	dfc00415 	stw	ra,16(sp)
    aef0:	dc400115 	stw	r17,4(sp)
    aef4:	2025883a 	mov	r18,r4
    aef8:	2827883a 	mov	r19,r5
    aefc:	3021883a 	mov	r16,r6
    af00:	20000226 	beq	r4,zero,af0c <__swbuf_r+0x30>
    af04:	20800e17 	ldw	r2,56(r4)
    af08:	10004226 	beq	r2,zero,b014 <__swbuf_r+0x138>
    af0c:	80800617 	ldw	r2,24(r16)
    af10:	8100030b 	ldhu	r4,12(r16)
    af14:	80800215 	stw	r2,8(r16)
    af18:	2080020c 	andi	r2,r4,8
    af1c:	10003626 	beq	r2,zero,aff8 <__swbuf_r+0x11c>
    af20:	80c00417 	ldw	r3,16(r16)
    af24:	18003426 	beq	r3,zero,aff8 <__swbuf_r+0x11c>
    af28:	2088000c 	andi	r2,r4,8192
    af2c:	9c403fcc 	andi	r17,r19,255
    af30:	10001a26 	beq	r2,zero,af9c <__swbuf_r+0xc0>
    af34:	80800017 	ldw	r2,0(r16)
    af38:	81000517 	ldw	r4,20(r16)
    af3c:	10c7c83a 	sub	r3,r2,r3
    af40:	1900200e 	bge	r3,r4,afc4 <__swbuf_r+0xe8>
    af44:	18c00044 	addi	r3,r3,1
    af48:	81000217 	ldw	r4,8(r16)
    af4c:	11400044 	addi	r5,r2,1
    af50:	81400015 	stw	r5,0(r16)
    af54:	213fffc4 	addi	r4,r4,-1
    af58:	81000215 	stw	r4,8(r16)
    af5c:	14c00005 	stb	r19,0(r2)
    af60:	80800517 	ldw	r2,20(r16)
    af64:	10c01e26 	beq	r2,r3,afe0 <__swbuf_r+0x104>
    af68:	8080030b 	ldhu	r2,12(r16)
    af6c:	1080004c 	andi	r2,r2,1
    af70:	10000226 	beq	r2,zero,af7c <__swbuf_r+0xa0>
    af74:	00800284 	movi	r2,10
    af78:	88801926 	beq	r17,r2,afe0 <__swbuf_r+0x104>
    af7c:	8805883a 	mov	r2,r17
    af80:	dfc00417 	ldw	ra,16(sp)
    af84:	dcc00317 	ldw	r19,12(sp)
    af88:	dc800217 	ldw	r18,8(sp)
    af8c:	dc400117 	ldw	r17,4(sp)
    af90:	dc000017 	ldw	r16,0(sp)
    af94:	dec00504 	addi	sp,sp,20
    af98:	f800283a 	ret
    af9c:	81401917 	ldw	r5,100(r16)
    afa0:	00b7ffc4 	movi	r2,-8193
    afa4:	21080014 	ori	r4,r4,8192
    afa8:	2884703a 	and	r2,r5,r2
    afac:	80801915 	stw	r2,100(r16)
    afb0:	80800017 	ldw	r2,0(r16)
    afb4:	8100030d 	sth	r4,12(r16)
    afb8:	81000517 	ldw	r4,20(r16)
    afbc:	10c7c83a 	sub	r3,r2,r3
    afc0:	193fe016 	blt	r3,r4,af44 <__alt_data_end+0xff00af44>
    afc4:	800b883a 	mov	r5,r16
    afc8:	9009883a 	mov	r4,r18
    afcc:	00064c80 	call	64c8 <_fflush_r>
    afd0:	1000071e 	bne	r2,zero,aff0 <__swbuf_r+0x114>
    afd4:	80800017 	ldw	r2,0(r16)
    afd8:	00c00044 	movi	r3,1
    afdc:	003fda06 	br	af48 <__alt_data_end+0xff00af48>
    afe0:	800b883a 	mov	r5,r16
    afe4:	9009883a 	mov	r4,r18
    afe8:	00064c80 	call	64c8 <_fflush_r>
    afec:	103fe326 	beq	r2,zero,af7c <__alt_data_end+0xff00af7c>
    aff0:	00bfffc4 	movi	r2,-1
    aff4:	003fe206 	br	af80 <__alt_data_end+0xff00af80>
    aff8:	800b883a 	mov	r5,r16
    affc:	9009883a 	mov	r4,r18
    b000:	00048d00 	call	48d0 <__swsetup_r>
    b004:	103ffa1e 	bne	r2,zero,aff0 <__alt_data_end+0xff00aff0>
    b008:	8100030b 	ldhu	r4,12(r16)
    b00c:	80c00417 	ldw	r3,16(r16)
    b010:	003fc506 	br	af28 <__alt_data_end+0xff00af28>
    b014:	00068a40 	call	68a4 <__sinit>
    b018:	003fbc06 	br	af0c <__alt_data_end+0xff00af0c>

0000b01c <__swbuf>:
    b01c:	00800074 	movhi	r2,1
    b020:	1088c304 	addi	r2,r2,8972
    b024:	280d883a 	mov	r6,r5
    b028:	200b883a 	mov	r5,r4
    b02c:	11000017 	ldw	r4,0(r2)
    b030:	000aedc1 	jmpi	aedc <__swbuf_r>

0000b034 <_wcrtomb_r>:
    b034:	defff604 	addi	sp,sp,-40
    b038:	00800074 	movhi	r2,1
    b03c:	dc800815 	stw	r18,32(sp)
    b040:	dc400715 	stw	r17,28(sp)
    b044:	dc000615 	stw	r16,24(sp)
    b048:	1088c504 	addi	r2,r2,8980
    b04c:	dfc00915 	stw	ra,36(sp)
    b050:	2021883a 	mov	r16,r4
    b054:	3823883a 	mov	r17,r7
    b058:	14800017 	ldw	r18,0(r2)
    b05c:	28001426 	beq	r5,zero,b0b0 <_wcrtomb_r+0x7c>
    b060:	d9400415 	stw	r5,16(sp)
    b064:	d9800515 	stw	r6,20(sp)
    b068:	00073e80 	call	73e8 <__locale_charset>
    b06c:	d9800517 	ldw	r6,20(sp)
    b070:	d9400417 	ldw	r5,16(sp)
    b074:	100f883a 	mov	r7,r2
    b078:	dc400015 	stw	r17,0(sp)
    b07c:	8009883a 	mov	r4,r16
    b080:	903ee83a 	callr	r18
    b084:	00ffffc4 	movi	r3,-1
    b088:	10c0031e 	bne	r2,r3,b098 <_wcrtomb_r+0x64>
    b08c:	88000015 	stw	zero,0(r17)
    b090:	00c02284 	movi	r3,138
    b094:	80c00015 	stw	r3,0(r16)
    b098:	dfc00917 	ldw	ra,36(sp)
    b09c:	dc800817 	ldw	r18,32(sp)
    b0a0:	dc400717 	ldw	r17,28(sp)
    b0a4:	dc000617 	ldw	r16,24(sp)
    b0a8:	dec00a04 	addi	sp,sp,40
    b0ac:	f800283a 	ret
    b0b0:	00073e80 	call	73e8 <__locale_charset>
    b0b4:	100f883a 	mov	r7,r2
    b0b8:	dc400015 	stw	r17,0(sp)
    b0bc:	000d883a 	mov	r6,zero
    b0c0:	d9400104 	addi	r5,sp,4
    b0c4:	8009883a 	mov	r4,r16
    b0c8:	903ee83a 	callr	r18
    b0cc:	003fed06 	br	b084 <__alt_data_end+0xff00b084>

0000b0d0 <wcrtomb>:
    b0d0:	defff604 	addi	sp,sp,-40
    b0d4:	00800074 	movhi	r2,1
    b0d8:	dc800615 	stw	r18,24(sp)
    b0dc:	dc400515 	stw	r17,20(sp)
    b0e0:	1088c304 	addi	r2,r2,8972
    b0e4:	dfc00915 	stw	ra,36(sp)
    b0e8:	dd000815 	stw	r20,32(sp)
    b0ec:	dcc00715 	stw	r19,28(sp)
    b0f0:	dc000415 	stw	r16,16(sp)
    b0f4:	3025883a 	mov	r18,r6
    b0f8:	14400017 	ldw	r17,0(r2)
    b0fc:	20001926 	beq	r4,zero,b164 <wcrtomb+0x94>
    b100:	00800074 	movhi	r2,1
    b104:	1088c504 	addi	r2,r2,8980
    b108:	15000017 	ldw	r20,0(r2)
    b10c:	2021883a 	mov	r16,r4
    b110:	2827883a 	mov	r19,r5
    b114:	00073e80 	call	73e8 <__locale_charset>
    b118:	100f883a 	mov	r7,r2
    b11c:	dc800015 	stw	r18,0(sp)
    b120:	980d883a 	mov	r6,r19
    b124:	800b883a 	mov	r5,r16
    b128:	8809883a 	mov	r4,r17
    b12c:	a03ee83a 	callr	r20
    b130:	00ffffc4 	movi	r3,-1
    b134:	10c0031e 	bne	r2,r3,b144 <wcrtomb+0x74>
    b138:	90000015 	stw	zero,0(r18)
    b13c:	00c02284 	movi	r3,138
    b140:	88c00015 	stw	r3,0(r17)
    b144:	dfc00917 	ldw	ra,36(sp)
    b148:	dd000817 	ldw	r20,32(sp)
    b14c:	dcc00717 	ldw	r19,28(sp)
    b150:	dc800617 	ldw	r18,24(sp)
    b154:	dc400517 	ldw	r17,20(sp)
    b158:	dc000417 	ldw	r16,16(sp)
    b15c:	dec00a04 	addi	sp,sp,40
    b160:	f800283a 	ret
    b164:	00800074 	movhi	r2,1
    b168:	1088c504 	addi	r2,r2,8980
    b16c:	14000017 	ldw	r16,0(r2)
    b170:	00073e80 	call	73e8 <__locale_charset>
    b174:	100f883a 	mov	r7,r2
    b178:	dc800015 	stw	r18,0(sp)
    b17c:	000d883a 	mov	r6,zero
    b180:	d9400104 	addi	r5,sp,4
    b184:	8809883a 	mov	r4,r17
    b188:	803ee83a 	callr	r16
    b18c:	003fe806 	br	b130 <__alt_data_end+0xff00b130>

0000b190 <__ascii_wctomb>:
    b190:	28000526 	beq	r5,zero,b1a8 <__ascii_wctomb+0x18>
    b194:	00803fc4 	movi	r2,255
    b198:	11800536 	bltu	r2,r6,b1b0 <__ascii_wctomb+0x20>
    b19c:	29800005 	stb	r6,0(r5)
    b1a0:	00800044 	movi	r2,1
    b1a4:	f800283a 	ret
    b1a8:	0005883a 	mov	r2,zero
    b1ac:	f800283a 	ret
    b1b0:	00802284 	movi	r2,138
    b1b4:	20800015 	stw	r2,0(r4)
    b1b8:	00bfffc4 	movi	r2,-1
    b1bc:	f800283a 	ret

0000b1c0 <_wctomb_r>:
    b1c0:	00800074 	movhi	r2,1
    b1c4:	defff904 	addi	sp,sp,-28
    b1c8:	1088c504 	addi	r2,r2,8980
    b1cc:	dfc00615 	stw	ra,24(sp)
    b1d0:	dc400515 	stw	r17,20(sp)
    b1d4:	dc000415 	stw	r16,16(sp)
    b1d8:	3823883a 	mov	r17,r7
    b1dc:	14000017 	ldw	r16,0(r2)
    b1e0:	d9000115 	stw	r4,4(sp)
    b1e4:	d9400215 	stw	r5,8(sp)
    b1e8:	d9800315 	stw	r6,12(sp)
    b1ec:	00073e80 	call	73e8 <__locale_charset>
    b1f0:	d9800317 	ldw	r6,12(sp)
    b1f4:	d9400217 	ldw	r5,8(sp)
    b1f8:	d9000117 	ldw	r4,4(sp)
    b1fc:	100f883a 	mov	r7,r2
    b200:	dc400015 	stw	r17,0(sp)
    b204:	803ee83a 	callr	r16
    b208:	dfc00617 	ldw	ra,24(sp)
    b20c:	dc400517 	ldw	r17,20(sp)
    b210:	dc000417 	ldw	r16,16(sp)
    b214:	dec00704 	addi	sp,sp,28
    b218:	f800283a 	ret

0000b21c <__udivdi3>:
    b21c:	defff504 	addi	sp,sp,-44
    b220:	dcc00415 	stw	r19,16(sp)
    b224:	dc000115 	stw	r16,4(sp)
    b228:	dfc00a15 	stw	ra,40(sp)
    b22c:	df000915 	stw	fp,36(sp)
    b230:	ddc00815 	stw	r23,32(sp)
    b234:	dd800715 	stw	r22,28(sp)
    b238:	dd400615 	stw	r21,24(sp)
    b23c:	dd000515 	stw	r20,20(sp)
    b240:	dc800315 	stw	r18,12(sp)
    b244:	dc400215 	stw	r17,8(sp)
    b248:	2027883a 	mov	r19,r4
    b24c:	2821883a 	mov	r16,r5
    b250:	3800411e 	bne	r7,zero,b358 <__udivdi3+0x13c>
    b254:	3023883a 	mov	r17,r6
    b258:	2025883a 	mov	r18,r4
    b25c:	2980522e 	bgeu	r5,r6,b3a8 <__udivdi3+0x18c>
    b260:	00bfffd4 	movui	r2,65535
    b264:	282d883a 	mov	r22,r5
    b268:	1180a836 	bltu	r2,r6,b50c <__udivdi3+0x2f0>
    b26c:	00803fc4 	movi	r2,255
    b270:	1185803a 	cmpltu	r2,r2,r6
    b274:	100490fa 	slli	r2,r2,3
    b278:	3086d83a 	srl	r3,r6,r2
    b27c:	01000074 	movhi	r4,1
    b280:	2101cc04 	addi	r4,r4,1840
    b284:	20c7883a 	add	r3,r4,r3
    b288:	18c00003 	ldbu	r3,0(r3)
    b28c:	1885883a 	add	r2,r3,r2
    b290:	00c00804 	movi	r3,32
    b294:	1887c83a 	sub	r3,r3,r2
    b298:	18000526 	beq	r3,zero,b2b0 <__udivdi3+0x94>
    b29c:	80e0983a 	sll	r16,r16,r3
    b2a0:	9884d83a 	srl	r2,r19,r2
    b2a4:	30e2983a 	sll	r17,r6,r3
    b2a8:	98e4983a 	sll	r18,r19,r3
    b2ac:	142cb03a 	or	r22,r2,r16
    b2b0:	882ad43a 	srli	r21,r17,16
    b2b4:	b009883a 	mov	r4,r22
    b2b8:	8d3fffcc 	andi	r20,r17,65535
    b2bc:	a80b883a 	mov	r5,r21
    b2c0:	000be280 	call	be28 <__umodsi3>
    b2c4:	b009883a 	mov	r4,r22
    b2c8:	a80b883a 	mov	r5,r21
    b2cc:	1027883a 	mov	r19,r2
    b2d0:	000bdc40 	call	bdc4 <__udivsi3>
    b2d4:	102d883a 	mov	r22,r2
    b2d8:	9826943a 	slli	r19,r19,16
    b2dc:	9004d43a 	srli	r2,r18,16
    b2e0:	a5a1383a 	mul	r16,r20,r22
    b2e4:	14c4b03a 	or	r2,r2,r19
    b2e8:	1400052e 	bgeu	r2,r16,b300 <__udivdi3+0xe4>
    b2ec:	1445883a 	add	r2,r2,r17
    b2f0:	b0ffffc4 	addi	r3,r22,-1
    b2f4:	14400136 	bltu	r2,r17,b2fc <__udivdi3+0xe0>
    b2f8:	14012336 	bltu	r2,r16,b788 <__udivdi3+0x56c>
    b2fc:	182d883a 	mov	r22,r3
    b300:	1421c83a 	sub	r16,r2,r16
    b304:	a80b883a 	mov	r5,r21
    b308:	8009883a 	mov	r4,r16
    b30c:	000be280 	call	be28 <__umodsi3>
    b310:	1027883a 	mov	r19,r2
    b314:	a80b883a 	mov	r5,r21
    b318:	8009883a 	mov	r4,r16
    b31c:	000bdc40 	call	bdc4 <__udivsi3>
    b320:	9826943a 	slli	r19,r19,16
    b324:	a0a9383a 	mul	r20,r20,r2
    b328:	94bfffcc 	andi	r18,r18,65535
    b32c:	94e4b03a 	or	r18,r18,r19
    b330:	9500052e 	bgeu	r18,r20,b348 <__udivdi3+0x12c>
    b334:	8ca5883a 	add	r18,r17,r18
    b338:	10ffffc4 	addi	r3,r2,-1
    b33c:	9440f136 	bltu	r18,r17,b704 <__udivdi3+0x4e8>
    b340:	9500f02e 	bgeu	r18,r20,b704 <__udivdi3+0x4e8>
    b344:	10bfff84 	addi	r2,r2,-2
    b348:	b00c943a 	slli	r6,r22,16
    b34c:	0007883a 	mov	r3,zero
    b350:	3084b03a 	or	r2,r6,r2
    b354:	00005906 	br	b4bc <__udivdi3+0x2a0>
    b358:	29c05636 	bltu	r5,r7,b4b4 <__udivdi3+0x298>
    b35c:	00bfffd4 	movui	r2,65535
    b360:	11c0622e 	bgeu	r2,r7,b4ec <__udivdi3+0x2d0>
    b364:	00804034 	movhi	r2,256
    b368:	10bfffc4 	addi	r2,r2,-1
    b36c:	11c0ee36 	bltu	r2,r7,b728 <__udivdi3+0x50c>
    b370:	00800404 	movi	r2,16
    b374:	3886d83a 	srl	r3,r7,r2
    b378:	01000074 	movhi	r4,1
    b37c:	2101cc04 	addi	r4,r4,1840
    b380:	20c7883a 	add	r3,r4,r3
    b384:	18c00003 	ldbu	r3,0(r3)
    b388:	05400804 	movi	r21,32
    b38c:	1885883a 	add	r2,r3,r2
    b390:	a8abc83a 	sub	r21,r21,r2
    b394:	a800621e 	bne	r21,zero,b520 <__udivdi3+0x304>
    b398:	3c00e936 	bltu	r7,r16,b740 <__udivdi3+0x524>
    b39c:	9985403a 	cmpgeu	r2,r19,r6
    b3a0:	0007883a 	mov	r3,zero
    b3a4:	00004506 	br	b4bc <__udivdi3+0x2a0>
    b3a8:	3000041e 	bne	r6,zero,b3bc <__udivdi3+0x1a0>
    b3ac:	000b883a 	mov	r5,zero
    b3b0:	01000044 	movi	r4,1
    b3b4:	000bdc40 	call	bdc4 <__udivsi3>
    b3b8:	1023883a 	mov	r17,r2
    b3bc:	00bfffd4 	movui	r2,65535
    b3c0:	14404e2e 	bgeu	r2,r17,b4fc <__udivdi3+0x2e0>
    b3c4:	00804034 	movhi	r2,256
    b3c8:	10bfffc4 	addi	r2,r2,-1
    b3cc:	1440d836 	bltu	r2,r17,b730 <__udivdi3+0x514>
    b3d0:	00800404 	movi	r2,16
    b3d4:	8886d83a 	srl	r3,r17,r2
    b3d8:	01000074 	movhi	r4,1
    b3dc:	2101cc04 	addi	r4,r4,1840
    b3e0:	20c7883a 	add	r3,r4,r3
    b3e4:	18c00003 	ldbu	r3,0(r3)
    b3e8:	1885883a 	add	r2,r3,r2
    b3ec:	00c00804 	movi	r3,32
    b3f0:	1887c83a 	sub	r3,r3,r2
    b3f4:	18008f1e 	bne	r3,zero,b634 <__udivdi3+0x418>
    b3f8:	882ad43a 	srli	r21,r17,16
    b3fc:	8461c83a 	sub	r16,r16,r17
    b400:	8d3fffcc 	andi	r20,r17,65535
    b404:	00c00044 	movi	r3,1
    b408:	8009883a 	mov	r4,r16
    b40c:	a80b883a 	mov	r5,r21
    b410:	d8c00015 	stw	r3,0(sp)
    b414:	000be280 	call	be28 <__umodsi3>
    b418:	8009883a 	mov	r4,r16
    b41c:	a80b883a 	mov	r5,r21
    b420:	1027883a 	mov	r19,r2
    b424:	000bdc40 	call	bdc4 <__udivsi3>
    b428:	9826943a 	slli	r19,r19,16
    b42c:	9008d43a 	srli	r4,r18,16
    b430:	1521383a 	mul	r16,r2,r20
    b434:	102d883a 	mov	r22,r2
    b438:	24c8b03a 	or	r4,r4,r19
    b43c:	d8c00017 	ldw	r3,0(sp)
    b440:	2400052e 	bgeu	r4,r16,b458 <__udivdi3+0x23c>
    b444:	2449883a 	add	r4,r4,r17
    b448:	b0bfffc4 	addi	r2,r22,-1
    b44c:	24400136 	bltu	r4,r17,b454 <__udivdi3+0x238>
    b450:	2400ca36 	bltu	r4,r16,b77c <__udivdi3+0x560>
    b454:	102d883a 	mov	r22,r2
    b458:	2421c83a 	sub	r16,r4,r16
    b45c:	a80b883a 	mov	r5,r21
    b460:	8009883a 	mov	r4,r16
    b464:	d8c00015 	stw	r3,0(sp)
    b468:	000be280 	call	be28 <__umodsi3>
    b46c:	1027883a 	mov	r19,r2
    b470:	a80b883a 	mov	r5,r21
    b474:	8009883a 	mov	r4,r16
    b478:	000bdc40 	call	bdc4 <__udivsi3>
    b47c:	9826943a 	slli	r19,r19,16
    b480:	1529383a 	mul	r20,r2,r20
    b484:	94bfffcc 	andi	r18,r18,65535
    b488:	94e4b03a 	or	r18,r18,r19
    b48c:	d8c00017 	ldw	r3,0(sp)
    b490:	9500052e 	bgeu	r18,r20,b4a8 <__udivdi3+0x28c>
    b494:	8ca5883a 	add	r18,r17,r18
    b498:	113fffc4 	addi	r4,r2,-1
    b49c:	94409736 	bltu	r18,r17,b6fc <__udivdi3+0x4e0>
    b4a0:	9500962e 	bgeu	r18,r20,b6fc <__udivdi3+0x4e0>
    b4a4:	10bfff84 	addi	r2,r2,-2
    b4a8:	b00c943a 	slli	r6,r22,16
    b4ac:	3084b03a 	or	r2,r6,r2
    b4b0:	00000206 	br	b4bc <__udivdi3+0x2a0>
    b4b4:	0007883a 	mov	r3,zero
    b4b8:	0005883a 	mov	r2,zero
    b4bc:	dfc00a17 	ldw	ra,40(sp)
    b4c0:	df000917 	ldw	fp,36(sp)
    b4c4:	ddc00817 	ldw	r23,32(sp)
    b4c8:	dd800717 	ldw	r22,28(sp)
    b4cc:	dd400617 	ldw	r21,24(sp)
    b4d0:	dd000517 	ldw	r20,20(sp)
    b4d4:	dcc00417 	ldw	r19,16(sp)
    b4d8:	dc800317 	ldw	r18,12(sp)
    b4dc:	dc400217 	ldw	r17,8(sp)
    b4e0:	dc000117 	ldw	r16,4(sp)
    b4e4:	dec00b04 	addi	sp,sp,44
    b4e8:	f800283a 	ret
    b4ec:	00803fc4 	movi	r2,255
    b4f0:	11c5803a 	cmpltu	r2,r2,r7
    b4f4:	100490fa 	slli	r2,r2,3
    b4f8:	003f9e06 	br	b374 <__alt_data_end+0xff00b374>
    b4fc:	00803fc4 	movi	r2,255
    b500:	1445803a 	cmpltu	r2,r2,r17
    b504:	100490fa 	slli	r2,r2,3
    b508:	003fb206 	br	b3d4 <__alt_data_end+0xff00b3d4>
    b50c:	00804034 	movhi	r2,256
    b510:	10bfffc4 	addi	r2,r2,-1
    b514:	11808836 	bltu	r2,r6,b738 <__udivdi3+0x51c>
    b518:	00800404 	movi	r2,16
    b51c:	003f5606 	br	b278 <__alt_data_end+0xff00b278>
    b520:	30aed83a 	srl	r23,r6,r2
    b524:	3d4e983a 	sll	r7,r7,r21
    b528:	80acd83a 	srl	r22,r16,r2
    b52c:	9884d83a 	srl	r2,r19,r2
    b530:	3deeb03a 	or	r23,r7,r23
    b534:	b824d43a 	srli	r18,r23,16
    b538:	8560983a 	sll	r16,r16,r21
    b53c:	b009883a 	mov	r4,r22
    b540:	900b883a 	mov	r5,r18
    b544:	3568983a 	sll	r20,r6,r21
    b548:	1420b03a 	or	r16,r2,r16
    b54c:	000be280 	call	be28 <__umodsi3>
    b550:	b009883a 	mov	r4,r22
    b554:	900b883a 	mov	r5,r18
    b558:	1023883a 	mov	r17,r2
    b55c:	000bdc40 	call	bdc4 <__udivsi3>
    b560:	8808943a 	slli	r4,r17,16
    b564:	bf3fffcc 	andi	fp,r23,65535
    b568:	8006d43a 	srli	r3,r16,16
    b56c:	e0a3383a 	mul	r17,fp,r2
    b570:	100d883a 	mov	r6,r2
    b574:	1906b03a 	or	r3,r3,r4
    b578:	1c40042e 	bgeu	r3,r17,b58c <__udivdi3+0x370>
    b57c:	1dc7883a 	add	r3,r3,r23
    b580:	10bfffc4 	addi	r2,r2,-1
    b584:	1dc0752e 	bgeu	r3,r23,b75c <__udivdi3+0x540>
    b588:	100d883a 	mov	r6,r2
    b58c:	1c63c83a 	sub	r17,r3,r17
    b590:	900b883a 	mov	r5,r18
    b594:	8809883a 	mov	r4,r17
    b598:	d9800015 	stw	r6,0(sp)
    b59c:	000be280 	call	be28 <__umodsi3>
    b5a0:	102d883a 	mov	r22,r2
    b5a4:	8809883a 	mov	r4,r17
    b5a8:	900b883a 	mov	r5,r18
    b5ac:	000bdc40 	call	bdc4 <__udivsi3>
    b5b0:	b02c943a 	slli	r22,r22,16
    b5b4:	e089383a 	mul	r4,fp,r2
    b5b8:	843fffcc 	andi	r16,r16,65535
    b5bc:	85a0b03a 	or	r16,r16,r22
    b5c0:	d9800017 	ldw	r6,0(sp)
    b5c4:	8100042e 	bgeu	r16,r4,b5d8 <__udivdi3+0x3bc>
    b5c8:	85e1883a 	add	r16,r16,r23
    b5cc:	10ffffc4 	addi	r3,r2,-1
    b5d0:	85c05e2e 	bgeu	r16,r23,b74c <__udivdi3+0x530>
    b5d4:	1805883a 	mov	r2,r3
    b5d8:	300c943a 	slli	r6,r6,16
    b5dc:	a17fffcc 	andi	r5,r20,65535
    b5e0:	a028d43a 	srli	r20,r20,16
    b5e4:	3084b03a 	or	r2,r6,r2
    b5e8:	10ffffcc 	andi	r3,r2,65535
    b5ec:	100cd43a 	srli	r6,r2,16
    b5f0:	194f383a 	mul	r7,r3,r5
    b5f4:	1d07383a 	mul	r3,r3,r20
    b5f8:	314b383a 	mul	r5,r6,r5
    b5fc:	3810d43a 	srli	r8,r7,16
    b600:	8121c83a 	sub	r16,r16,r4
    b604:	1947883a 	add	r3,r3,r5
    b608:	40c7883a 	add	r3,r8,r3
    b60c:	350d383a 	mul	r6,r6,r20
    b610:	1940022e 	bgeu	r3,r5,b61c <__udivdi3+0x400>
    b614:	01000074 	movhi	r4,1
    b618:	310d883a 	add	r6,r6,r4
    b61c:	1828d43a 	srli	r20,r3,16
    b620:	a18d883a 	add	r6,r20,r6
    b624:	81803e36 	bltu	r16,r6,b720 <__udivdi3+0x504>
    b628:	81803826 	beq	r16,r6,b70c <__udivdi3+0x4f0>
    b62c:	0007883a 	mov	r3,zero
    b630:	003fa206 	br	b4bc <__alt_data_end+0xff00b4bc>
    b634:	88e2983a 	sll	r17,r17,r3
    b638:	80a8d83a 	srl	r20,r16,r2
    b63c:	80e0983a 	sll	r16,r16,r3
    b640:	882ad43a 	srli	r21,r17,16
    b644:	9884d83a 	srl	r2,r19,r2
    b648:	a009883a 	mov	r4,r20
    b64c:	a80b883a 	mov	r5,r21
    b650:	142eb03a 	or	r23,r2,r16
    b654:	98e4983a 	sll	r18,r19,r3
    b658:	000be280 	call	be28 <__umodsi3>
    b65c:	a009883a 	mov	r4,r20
    b660:	a80b883a 	mov	r5,r21
    b664:	1021883a 	mov	r16,r2
    b668:	000bdc40 	call	bdc4 <__udivsi3>
    b66c:	1039883a 	mov	fp,r2
    b670:	8d3fffcc 	andi	r20,r17,65535
    b674:	8020943a 	slli	r16,r16,16
    b678:	b804d43a 	srli	r2,r23,16
    b67c:	a72d383a 	mul	r22,r20,fp
    b680:	1404b03a 	or	r2,r2,r16
    b684:	1580062e 	bgeu	r2,r22,b6a0 <__udivdi3+0x484>
    b688:	1445883a 	add	r2,r2,r17
    b68c:	e0ffffc4 	addi	r3,fp,-1
    b690:	14403836 	bltu	r2,r17,b774 <__udivdi3+0x558>
    b694:	1580372e 	bgeu	r2,r22,b774 <__udivdi3+0x558>
    b698:	e73fff84 	addi	fp,fp,-2
    b69c:	1445883a 	add	r2,r2,r17
    b6a0:	15adc83a 	sub	r22,r2,r22
    b6a4:	a80b883a 	mov	r5,r21
    b6a8:	b009883a 	mov	r4,r22
    b6ac:	000be280 	call	be28 <__umodsi3>
    b6b0:	1027883a 	mov	r19,r2
    b6b4:	b009883a 	mov	r4,r22
    b6b8:	a80b883a 	mov	r5,r21
    b6bc:	000bdc40 	call	bdc4 <__udivsi3>
    b6c0:	9826943a 	slli	r19,r19,16
    b6c4:	a0a1383a 	mul	r16,r20,r2
    b6c8:	b93fffcc 	andi	r4,r23,65535
    b6cc:	24c8b03a 	or	r4,r4,r19
    b6d0:	2400062e 	bgeu	r4,r16,b6ec <__udivdi3+0x4d0>
    b6d4:	2449883a 	add	r4,r4,r17
    b6d8:	10ffffc4 	addi	r3,r2,-1
    b6dc:	24402336 	bltu	r4,r17,b76c <__udivdi3+0x550>
    b6e0:	2400222e 	bgeu	r4,r16,b76c <__udivdi3+0x550>
    b6e4:	10bfff84 	addi	r2,r2,-2
    b6e8:	2449883a 	add	r4,r4,r17
    b6ec:	e038943a 	slli	fp,fp,16
    b6f0:	2421c83a 	sub	r16,r4,r16
    b6f4:	e086b03a 	or	r3,fp,r2
    b6f8:	003f4306 	br	b408 <__alt_data_end+0xff00b408>
    b6fc:	2005883a 	mov	r2,r4
    b700:	003f6906 	br	b4a8 <__alt_data_end+0xff00b4a8>
    b704:	1805883a 	mov	r2,r3
    b708:	003f0f06 	br	b348 <__alt_data_end+0xff00b348>
    b70c:	1806943a 	slli	r3,r3,16
    b710:	9d66983a 	sll	r19,r19,r21
    b714:	39ffffcc 	andi	r7,r7,65535
    b718:	19c7883a 	add	r3,r3,r7
    b71c:	98ffc32e 	bgeu	r19,r3,b62c <__alt_data_end+0xff00b62c>
    b720:	10bfffc4 	addi	r2,r2,-1
    b724:	003fc106 	br	b62c <__alt_data_end+0xff00b62c>
    b728:	00800604 	movi	r2,24
    b72c:	003f1106 	br	b374 <__alt_data_end+0xff00b374>
    b730:	00800604 	movi	r2,24
    b734:	003f2706 	br	b3d4 <__alt_data_end+0xff00b3d4>
    b738:	00800604 	movi	r2,24
    b73c:	003ece06 	br	b278 <__alt_data_end+0xff00b278>
    b740:	0007883a 	mov	r3,zero
    b744:	00800044 	movi	r2,1
    b748:	003f5c06 	br	b4bc <__alt_data_end+0xff00b4bc>
    b74c:	813fa12e 	bgeu	r16,r4,b5d4 <__alt_data_end+0xff00b5d4>
    b750:	10bfff84 	addi	r2,r2,-2
    b754:	85e1883a 	add	r16,r16,r23
    b758:	003f9f06 	br	b5d8 <__alt_data_end+0xff00b5d8>
    b75c:	1c7f8a2e 	bgeu	r3,r17,b588 <__alt_data_end+0xff00b588>
    b760:	31bfff84 	addi	r6,r6,-2
    b764:	1dc7883a 	add	r3,r3,r23
    b768:	003f8806 	br	b58c <__alt_data_end+0xff00b58c>
    b76c:	1805883a 	mov	r2,r3
    b770:	003fde06 	br	b6ec <__alt_data_end+0xff00b6ec>
    b774:	1839883a 	mov	fp,r3
    b778:	003fc906 	br	b6a0 <__alt_data_end+0xff00b6a0>
    b77c:	b5bfff84 	addi	r22,r22,-2
    b780:	2449883a 	add	r4,r4,r17
    b784:	003f3406 	br	b458 <__alt_data_end+0xff00b458>
    b788:	b5bfff84 	addi	r22,r22,-2
    b78c:	1445883a 	add	r2,r2,r17
    b790:	003edb06 	br	b300 <__alt_data_end+0xff00b300>

0000b794 <__umoddi3>:
    b794:	defff404 	addi	sp,sp,-48
    b798:	df000a15 	stw	fp,40(sp)
    b79c:	dc400315 	stw	r17,12(sp)
    b7a0:	dc000215 	stw	r16,8(sp)
    b7a4:	dfc00b15 	stw	ra,44(sp)
    b7a8:	ddc00915 	stw	r23,36(sp)
    b7ac:	dd800815 	stw	r22,32(sp)
    b7b0:	dd400715 	stw	r21,28(sp)
    b7b4:	dd000615 	stw	r20,24(sp)
    b7b8:	dcc00515 	stw	r19,20(sp)
    b7bc:	dc800415 	stw	r18,16(sp)
    b7c0:	2021883a 	mov	r16,r4
    b7c4:	2823883a 	mov	r17,r5
    b7c8:	2839883a 	mov	fp,r5
    b7cc:	38003c1e 	bne	r7,zero,b8c0 <__umoddi3+0x12c>
    b7d0:	3027883a 	mov	r19,r6
    b7d4:	2029883a 	mov	r20,r4
    b7d8:	2980512e 	bgeu	r5,r6,b920 <__umoddi3+0x18c>
    b7dc:	00bfffd4 	movui	r2,65535
    b7e0:	11809a36 	bltu	r2,r6,ba4c <__umoddi3+0x2b8>
    b7e4:	01003fc4 	movi	r4,255
    b7e8:	2189803a 	cmpltu	r4,r4,r6
    b7ec:	200890fa 	slli	r4,r4,3
    b7f0:	3104d83a 	srl	r2,r6,r4
    b7f4:	00c00074 	movhi	r3,1
    b7f8:	18c1cc04 	addi	r3,r3,1840
    b7fc:	1885883a 	add	r2,r3,r2
    b800:	10c00003 	ldbu	r3,0(r2)
    b804:	00800804 	movi	r2,32
    b808:	1909883a 	add	r4,r3,r4
    b80c:	1125c83a 	sub	r18,r2,r4
    b810:	90000526 	beq	r18,zero,b828 <__umoddi3+0x94>
    b814:	8ca2983a 	sll	r17,r17,r18
    b818:	8108d83a 	srl	r4,r16,r4
    b81c:	34a6983a 	sll	r19,r6,r18
    b820:	84a8983a 	sll	r20,r16,r18
    b824:	2478b03a 	or	fp,r4,r17
    b828:	982ed43a 	srli	r23,r19,16
    b82c:	e009883a 	mov	r4,fp
    b830:	9dbfffcc 	andi	r22,r19,65535
    b834:	b80b883a 	mov	r5,r23
    b838:	000be280 	call	be28 <__umodsi3>
    b83c:	e009883a 	mov	r4,fp
    b840:	b80b883a 	mov	r5,r23
    b844:	102b883a 	mov	r21,r2
    b848:	000bdc40 	call	bdc4 <__udivsi3>
    b84c:	a806943a 	slli	r3,r21,16
    b850:	a008d43a 	srli	r4,r20,16
    b854:	b085383a 	mul	r2,r22,r2
    b858:	20c8b03a 	or	r4,r4,r3
    b85c:	2080032e 	bgeu	r4,r2,b86c <__umoddi3+0xd8>
    b860:	24c9883a 	add	r4,r4,r19
    b864:	24c00136 	bltu	r4,r19,b86c <__umoddi3+0xd8>
    b868:	20811036 	bltu	r4,r2,bcac <__umoddi3+0x518>
    b86c:	20abc83a 	sub	r21,r4,r2
    b870:	b80b883a 	mov	r5,r23
    b874:	a809883a 	mov	r4,r21
    b878:	000be280 	call	be28 <__umodsi3>
    b87c:	1023883a 	mov	r17,r2
    b880:	b80b883a 	mov	r5,r23
    b884:	a809883a 	mov	r4,r21
    b888:	000bdc40 	call	bdc4 <__udivsi3>
    b88c:	8822943a 	slli	r17,r17,16
    b890:	b085383a 	mul	r2,r22,r2
    b894:	a0ffffcc 	andi	r3,r20,65535
    b898:	1c46b03a 	or	r3,r3,r17
    b89c:	1880042e 	bgeu	r3,r2,b8b0 <__umoddi3+0x11c>
    b8a0:	1cc7883a 	add	r3,r3,r19
    b8a4:	1cc00236 	bltu	r3,r19,b8b0 <__umoddi3+0x11c>
    b8a8:	1880012e 	bgeu	r3,r2,b8b0 <__umoddi3+0x11c>
    b8ac:	1cc7883a 	add	r3,r3,r19
    b8b0:	1885c83a 	sub	r2,r3,r2
    b8b4:	1484d83a 	srl	r2,r2,r18
    b8b8:	0007883a 	mov	r3,zero
    b8bc:	00004f06 	br	b9fc <__umoddi3+0x268>
    b8c0:	29c04c36 	bltu	r5,r7,b9f4 <__umoddi3+0x260>
    b8c4:	00bfffd4 	movui	r2,65535
    b8c8:	11c0582e 	bgeu	r2,r7,ba2c <__umoddi3+0x298>
    b8cc:	00804034 	movhi	r2,256
    b8d0:	10bfffc4 	addi	r2,r2,-1
    b8d4:	11c0e736 	bltu	r2,r7,bc74 <__umoddi3+0x4e0>
    b8d8:	01000404 	movi	r4,16
    b8dc:	3904d83a 	srl	r2,r7,r4
    b8e0:	00c00074 	movhi	r3,1
    b8e4:	18c1cc04 	addi	r3,r3,1840
    b8e8:	1885883a 	add	r2,r3,r2
    b8ec:	14c00003 	ldbu	r19,0(r2)
    b8f0:	00c00804 	movi	r3,32
    b8f4:	9927883a 	add	r19,r19,r4
    b8f8:	1ce9c83a 	sub	r20,r3,r19
    b8fc:	a000581e 	bne	r20,zero,ba60 <__umoddi3+0x2cc>
    b900:	3c400136 	bltu	r7,r17,b908 <__umoddi3+0x174>
    b904:	8180eb36 	bltu	r16,r6,bcb4 <__umoddi3+0x520>
    b908:	8185c83a 	sub	r2,r16,r6
    b90c:	89e3c83a 	sub	r17,r17,r7
    b910:	8089803a 	cmpltu	r4,r16,r2
    b914:	8939c83a 	sub	fp,r17,r4
    b918:	e007883a 	mov	r3,fp
    b91c:	00003706 	br	b9fc <__umoddi3+0x268>
    b920:	3000041e 	bne	r6,zero,b934 <__umoddi3+0x1a0>
    b924:	000b883a 	mov	r5,zero
    b928:	01000044 	movi	r4,1
    b92c:	000bdc40 	call	bdc4 <__udivsi3>
    b930:	1027883a 	mov	r19,r2
    b934:	00bfffd4 	movui	r2,65535
    b938:	14c0402e 	bgeu	r2,r19,ba3c <__umoddi3+0x2a8>
    b93c:	00804034 	movhi	r2,256
    b940:	10bfffc4 	addi	r2,r2,-1
    b944:	14c0cd36 	bltu	r2,r19,bc7c <__umoddi3+0x4e8>
    b948:	00800404 	movi	r2,16
    b94c:	9886d83a 	srl	r3,r19,r2
    b950:	01000074 	movhi	r4,1
    b954:	2101cc04 	addi	r4,r4,1840
    b958:	20c7883a 	add	r3,r4,r3
    b95c:	18c00003 	ldbu	r3,0(r3)
    b960:	1887883a 	add	r3,r3,r2
    b964:	00800804 	movi	r2,32
    b968:	10e5c83a 	sub	r18,r2,r3
    b96c:	9000901e 	bne	r18,zero,bbb0 <__umoddi3+0x41c>
    b970:	982cd43a 	srli	r22,r19,16
    b974:	8ce3c83a 	sub	r17,r17,r19
    b978:	9d7fffcc 	andi	r21,r19,65535
    b97c:	b00b883a 	mov	r5,r22
    b980:	8809883a 	mov	r4,r17
    b984:	000be280 	call	be28 <__umodsi3>
    b988:	8809883a 	mov	r4,r17
    b98c:	b00b883a 	mov	r5,r22
    b990:	1021883a 	mov	r16,r2
    b994:	000bdc40 	call	bdc4 <__udivsi3>
    b998:	8006943a 	slli	r3,r16,16
    b99c:	a008d43a 	srli	r4,r20,16
    b9a0:	1545383a 	mul	r2,r2,r21
    b9a4:	20c8b03a 	or	r4,r4,r3
    b9a8:	2080042e 	bgeu	r4,r2,b9bc <__umoddi3+0x228>
    b9ac:	24c9883a 	add	r4,r4,r19
    b9b0:	24c00236 	bltu	r4,r19,b9bc <__umoddi3+0x228>
    b9b4:	2080012e 	bgeu	r4,r2,b9bc <__umoddi3+0x228>
    b9b8:	24c9883a 	add	r4,r4,r19
    b9bc:	20a1c83a 	sub	r16,r4,r2
    b9c0:	b00b883a 	mov	r5,r22
    b9c4:	8009883a 	mov	r4,r16
    b9c8:	000be280 	call	be28 <__umodsi3>
    b9cc:	1023883a 	mov	r17,r2
    b9d0:	b00b883a 	mov	r5,r22
    b9d4:	8009883a 	mov	r4,r16
    b9d8:	000bdc40 	call	bdc4 <__udivsi3>
    b9dc:	8822943a 	slli	r17,r17,16
    b9e0:	1545383a 	mul	r2,r2,r21
    b9e4:	a53fffcc 	andi	r20,r20,65535
    b9e8:	a446b03a 	or	r3,r20,r17
    b9ec:	18bfb02e 	bgeu	r3,r2,b8b0 <__alt_data_end+0xff00b8b0>
    b9f0:	003fab06 	br	b8a0 <__alt_data_end+0xff00b8a0>
    b9f4:	2005883a 	mov	r2,r4
    b9f8:	2807883a 	mov	r3,r5
    b9fc:	dfc00b17 	ldw	ra,44(sp)
    ba00:	df000a17 	ldw	fp,40(sp)
    ba04:	ddc00917 	ldw	r23,36(sp)
    ba08:	dd800817 	ldw	r22,32(sp)
    ba0c:	dd400717 	ldw	r21,28(sp)
    ba10:	dd000617 	ldw	r20,24(sp)
    ba14:	dcc00517 	ldw	r19,20(sp)
    ba18:	dc800417 	ldw	r18,16(sp)
    ba1c:	dc400317 	ldw	r17,12(sp)
    ba20:	dc000217 	ldw	r16,8(sp)
    ba24:	dec00c04 	addi	sp,sp,48
    ba28:	f800283a 	ret
    ba2c:	04c03fc4 	movi	r19,255
    ba30:	99c9803a 	cmpltu	r4,r19,r7
    ba34:	200890fa 	slli	r4,r4,3
    ba38:	003fa806 	br	b8dc <__alt_data_end+0xff00b8dc>
    ba3c:	00803fc4 	movi	r2,255
    ba40:	14c5803a 	cmpltu	r2,r2,r19
    ba44:	100490fa 	slli	r2,r2,3
    ba48:	003fc006 	br	b94c <__alt_data_end+0xff00b94c>
    ba4c:	00804034 	movhi	r2,256
    ba50:	10bfffc4 	addi	r2,r2,-1
    ba54:	11808b36 	bltu	r2,r6,bc84 <__umoddi3+0x4f0>
    ba58:	01000404 	movi	r4,16
    ba5c:	003f6406 	br	b7f0 <__alt_data_end+0xff00b7f0>
    ba60:	34c4d83a 	srl	r2,r6,r19
    ba64:	3d0e983a 	sll	r7,r7,r20
    ba68:	8cf8d83a 	srl	fp,r17,r19
    ba6c:	8d10983a 	sll	r8,r17,r20
    ba70:	38aab03a 	or	r21,r7,r2
    ba74:	a82cd43a 	srli	r22,r21,16
    ba78:	84e2d83a 	srl	r17,r16,r19
    ba7c:	e009883a 	mov	r4,fp
    ba80:	b00b883a 	mov	r5,r22
    ba84:	8a22b03a 	or	r17,r17,r8
    ba88:	3524983a 	sll	r18,r6,r20
    ba8c:	000be280 	call	be28 <__umodsi3>
    ba90:	e009883a 	mov	r4,fp
    ba94:	b00b883a 	mov	r5,r22
    ba98:	102f883a 	mov	r23,r2
    ba9c:	000bdc40 	call	bdc4 <__udivsi3>
    baa0:	100d883a 	mov	r6,r2
    baa4:	b808943a 	slli	r4,r23,16
    baa8:	aa3fffcc 	andi	r8,r21,65535
    baac:	8804d43a 	srli	r2,r17,16
    bab0:	41af383a 	mul	r23,r8,r6
    bab4:	8520983a 	sll	r16,r16,r20
    bab8:	1104b03a 	or	r2,r2,r4
    babc:	15c0042e 	bgeu	r2,r23,bad0 <__umoddi3+0x33c>
    bac0:	1545883a 	add	r2,r2,r21
    bac4:	30ffffc4 	addi	r3,r6,-1
    bac8:	1540742e 	bgeu	r2,r21,bc9c <__umoddi3+0x508>
    bacc:	180d883a 	mov	r6,r3
    bad0:	15efc83a 	sub	r23,r2,r23
    bad4:	b00b883a 	mov	r5,r22
    bad8:	b809883a 	mov	r4,r23
    badc:	d9800115 	stw	r6,4(sp)
    bae0:	da000015 	stw	r8,0(sp)
    bae4:	000be280 	call	be28 <__umodsi3>
    bae8:	b00b883a 	mov	r5,r22
    baec:	b809883a 	mov	r4,r23
    baf0:	1039883a 	mov	fp,r2
    baf4:	000bdc40 	call	bdc4 <__udivsi3>
    baf8:	da000017 	ldw	r8,0(sp)
    bafc:	e038943a 	slli	fp,fp,16
    bb00:	100b883a 	mov	r5,r2
    bb04:	4089383a 	mul	r4,r8,r2
    bb08:	8a3fffcc 	andi	r8,r17,65535
    bb0c:	4710b03a 	or	r8,r8,fp
    bb10:	d9800117 	ldw	r6,4(sp)
    bb14:	4100042e 	bgeu	r8,r4,bb28 <__umoddi3+0x394>
    bb18:	4551883a 	add	r8,r8,r21
    bb1c:	10bfffc4 	addi	r2,r2,-1
    bb20:	45405a2e 	bgeu	r8,r21,bc8c <__umoddi3+0x4f8>
    bb24:	100b883a 	mov	r5,r2
    bb28:	300c943a 	slli	r6,r6,16
    bb2c:	91ffffcc 	andi	r7,r18,65535
    bb30:	9004d43a 	srli	r2,r18,16
    bb34:	314cb03a 	or	r6,r6,r5
    bb38:	317fffcc 	andi	r5,r6,65535
    bb3c:	300cd43a 	srli	r6,r6,16
    bb40:	29d3383a 	mul	r9,r5,r7
    bb44:	288b383a 	mul	r5,r5,r2
    bb48:	31cf383a 	mul	r7,r6,r7
    bb4c:	4806d43a 	srli	r3,r9,16
    bb50:	4111c83a 	sub	r8,r8,r4
    bb54:	29cb883a 	add	r5,r5,r7
    bb58:	194b883a 	add	r5,r3,r5
    bb5c:	3085383a 	mul	r2,r6,r2
    bb60:	29c0022e 	bgeu	r5,r7,bb6c <__umoddi3+0x3d8>
    bb64:	00c00074 	movhi	r3,1
    bb68:	10c5883a 	add	r2,r2,r3
    bb6c:	2808d43a 	srli	r4,r5,16
    bb70:	280a943a 	slli	r5,r5,16
    bb74:	4a7fffcc 	andi	r9,r9,65535
    bb78:	2085883a 	add	r2,r4,r2
    bb7c:	2a4b883a 	add	r5,r5,r9
    bb80:	40803636 	bltu	r8,r2,bc5c <__umoddi3+0x4c8>
    bb84:	40804d26 	beq	r8,r2,bcbc <__umoddi3+0x528>
    bb88:	4089c83a 	sub	r4,r8,r2
    bb8c:	280f883a 	mov	r7,r5
    bb90:	81cfc83a 	sub	r7,r16,r7
    bb94:	81c7803a 	cmpltu	r3,r16,r7
    bb98:	20c7c83a 	sub	r3,r4,r3
    bb9c:	1cc4983a 	sll	r2,r3,r19
    bba0:	3d0ed83a 	srl	r7,r7,r20
    bba4:	1d06d83a 	srl	r3,r3,r20
    bba8:	11c4b03a 	or	r2,r2,r7
    bbac:	003f9306 	br	b9fc <__alt_data_end+0xff00b9fc>
    bbb0:	9ca6983a 	sll	r19,r19,r18
    bbb4:	88e8d83a 	srl	r20,r17,r3
    bbb8:	80c4d83a 	srl	r2,r16,r3
    bbbc:	982cd43a 	srli	r22,r19,16
    bbc0:	8ca2983a 	sll	r17,r17,r18
    bbc4:	a009883a 	mov	r4,r20
    bbc8:	b00b883a 	mov	r5,r22
    bbcc:	1478b03a 	or	fp,r2,r17
    bbd0:	000be280 	call	be28 <__umodsi3>
    bbd4:	a009883a 	mov	r4,r20
    bbd8:	b00b883a 	mov	r5,r22
    bbdc:	1023883a 	mov	r17,r2
    bbe0:	000bdc40 	call	bdc4 <__udivsi3>
    bbe4:	9d7fffcc 	andi	r21,r19,65535
    bbe8:	880a943a 	slli	r5,r17,16
    bbec:	e008d43a 	srli	r4,fp,16
    bbf0:	a885383a 	mul	r2,r21,r2
    bbf4:	84a8983a 	sll	r20,r16,r18
    bbf8:	2148b03a 	or	r4,r4,r5
    bbfc:	2080042e 	bgeu	r4,r2,bc10 <__umoddi3+0x47c>
    bc00:	24c9883a 	add	r4,r4,r19
    bc04:	24c00236 	bltu	r4,r19,bc10 <__umoddi3+0x47c>
    bc08:	2080012e 	bgeu	r4,r2,bc10 <__umoddi3+0x47c>
    bc0c:	24c9883a 	add	r4,r4,r19
    bc10:	20a3c83a 	sub	r17,r4,r2
    bc14:	b00b883a 	mov	r5,r22
    bc18:	8809883a 	mov	r4,r17
    bc1c:	000be280 	call	be28 <__umodsi3>
    bc20:	102f883a 	mov	r23,r2
    bc24:	8809883a 	mov	r4,r17
    bc28:	b00b883a 	mov	r5,r22
    bc2c:	000bdc40 	call	bdc4 <__udivsi3>
    bc30:	b82e943a 	slli	r23,r23,16
    bc34:	a885383a 	mul	r2,r21,r2
    bc38:	e13fffcc 	andi	r4,fp,65535
    bc3c:	25c8b03a 	or	r4,r4,r23
    bc40:	2080042e 	bgeu	r4,r2,bc54 <__umoddi3+0x4c0>
    bc44:	24c9883a 	add	r4,r4,r19
    bc48:	24c00236 	bltu	r4,r19,bc54 <__umoddi3+0x4c0>
    bc4c:	2080012e 	bgeu	r4,r2,bc54 <__umoddi3+0x4c0>
    bc50:	24c9883a 	add	r4,r4,r19
    bc54:	20a3c83a 	sub	r17,r4,r2
    bc58:	003f4806 	br	b97c <__alt_data_end+0xff00b97c>
    bc5c:	2c8fc83a 	sub	r7,r5,r18
    bc60:	1545c83a 	sub	r2,r2,r21
    bc64:	29cb803a 	cmpltu	r5,r5,r7
    bc68:	1145c83a 	sub	r2,r2,r5
    bc6c:	4089c83a 	sub	r4,r8,r2
    bc70:	003fc706 	br	bb90 <__alt_data_end+0xff00bb90>
    bc74:	01000604 	movi	r4,24
    bc78:	003f1806 	br	b8dc <__alt_data_end+0xff00b8dc>
    bc7c:	00800604 	movi	r2,24
    bc80:	003f3206 	br	b94c <__alt_data_end+0xff00b94c>
    bc84:	01000604 	movi	r4,24
    bc88:	003ed906 	br	b7f0 <__alt_data_end+0xff00b7f0>
    bc8c:	413fa52e 	bgeu	r8,r4,bb24 <__alt_data_end+0xff00bb24>
    bc90:	297fff84 	addi	r5,r5,-2
    bc94:	4551883a 	add	r8,r8,r21
    bc98:	003fa306 	br	bb28 <__alt_data_end+0xff00bb28>
    bc9c:	15ff8b2e 	bgeu	r2,r23,bacc <__alt_data_end+0xff00bacc>
    bca0:	31bfff84 	addi	r6,r6,-2
    bca4:	1545883a 	add	r2,r2,r21
    bca8:	003f8906 	br	bad0 <__alt_data_end+0xff00bad0>
    bcac:	24c9883a 	add	r4,r4,r19
    bcb0:	003eee06 	br	b86c <__alt_data_end+0xff00b86c>
    bcb4:	8005883a 	mov	r2,r16
    bcb8:	003f1706 	br	b918 <__alt_data_end+0xff00b918>
    bcbc:	817fe736 	bltu	r16,r5,bc5c <__alt_data_end+0xff00bc5c>
    bcc0:	280f883a 	mov	r7,r5
    bcc4:	0009883a 	mov	r4,zero
    bcc8:	003fb106 	br	bb90 <__alt_data_end+0xff00bb90>

0000bccc <__divsi3>:
    bccc:	20001b16 	blt	r4,zero,bd3c <__divsi3+0x70>
    bcd0:	000f883a 	mov	r7,zero
    bcd4:	28001616 	blt	r5,zero,bd30 <__divsi3+0x64>
    bcd8:	200d883a 	mov	r6,r4
    bcdc:	29001a2e 	bgeu	r5,r4,bd48 <__divsi3+0x7c>
    bce0:	00800804 	movi	r2,32
    bce4:	00c00044 	movi	r3,1
    bce8:	00000106 	br	bcf0 <__divsi3+0x24>
    bcec:	10000d26 	beq	r2,zero,bd24 <__divsi3+0x58>
    bcf0:	294b883a 	add	r5,r5,r5
    bcf4:	10bfffc4 	addi	r2,r2,-1
    bcf8:	18c7883a 	add	r3,r3,r3
    bcfc:	293ffb36 	bltu	r5,r4,bcec <__alt_data_end+0xff00bcec>
    bd00:	0005883a 	mov	r2,zero
    bd04:	18000726 	beq	r3,zero,bd24 <__divsi3+0x58>
    bd08:	0005883a 	mov	r2,zero
    bd0c:	31400236 	bltu	r6,r5,bd18 <__divsi3+0x4c>
    bd10:	314dc83a 	sub	r6,r6,r5
    bd14:	10c4b03a 	or	r2,r2,r3
    bd18:	1806d07a 	srli	r3,r3,1
    bd1c:	280ad07a 	srli	r5,r5,1
    bd20:	183ffa1e 	bne	r3,zero,bd0c <__alt_data_end+0xff00bd0c>
    bd24:	38000126 	beq	r7,zero,bd2c <__divsi3+0x60>
    bd28:	0085c83a 	sub	r2,zero,r2
    bd2c:	f800283a 	ret
    bd30:	014bc83a 	sub	r5,zero,r5
    bd34:	39c0005c 	xori	r7,r7,1
    bd38:	003fe706 	br	bcd8 <__alt_data_end+0xff00bcd8>
    bd3c:	0109c83a 	sub	r4,zero,r4
    bd40:	01c00044 	movi	r7,1
    bd44:	003fe306 	br	bcd4 <__alt_data_end+0xff00bcd4>
    bd48:	00c00044 	movi	r3,1
    bd4c:	003fee06 	br	bd08 <__alt_data_end+0xff00bd08>

0000bd50 <__modsi3>:
    bd50:	20001716 	blt	r4,zero,bdb0 <__modsi3+0x60>
    bd54:	000f883a 	mov	r7,zero
    bd58:	2005883a 	mov	r2,r4
    bd5c:	28001216 	blt	r5,zero,bda8 <__modsi3+0x58>
    bd60:	2900162e 	bgeu	r5,r4,bdbc <__modsi3+0x6c>
    bd64:	01800804 	movi	r6,32
    bd68:	00c00044 	movi	r3,1
    bd6c:	00000106 	br	bd74 <__modsi3+0x24>
    bd70:	30000a26 	beq	r6,zero,bd9c <__modsi3+0x4c>
    bd74:	294b883a 	add	r5,r5,r5
    bd78:	31bfffc4 	addi	r6,r6,-1
    bd7c:	18c7883a 	add	r3,r3,r3
    bd80:	293ffb36 	bltu	r5,r4,bd70 <__alt_data_end+0xff00bd70>
    bd84:	18000526 	beq	r3,zero,bd9c <__modsi3+0x4c>
    bd88:	1806d07a 	srli	r3,r3,1
    bd8c:	11400136 	bltu	r2,r5,bd94 <__modsi3+0x44>
    bd90:	1145c83a 	sub	r2,r2,r5
    bd94:	280ad07a 	srli	r5,r5,1
    bd98:	183ffb1e 	bne	r3,zero,bd88 <__alt_data_end+0xff00bd88>
    bd9c:	38000126 	beq	r7,zero,bda4 <__modsi3+0x54>
    bda0:	0085c83a 	sub	r2,zero,r2
    bda4:	f800283a 	ret
    bda8:	014bc83a 	sub	r5,zero,r5
    bdac:	003fec06 	br	bd60 <__alt_data_end+0xff00bd60>
    bdb0:	0109c83a 	sub	r4,zero,r4
    bdb4:	01c00044 	movi	r7,1
    bdb8:	003fe706 	br	bd58 <__alt_data_end+0xff00bd58>
    bdbc:	00c00044 	movi	r3,1
    bdc0:	003ff106 	br	bd88 <__alt_data_end+0xff00bd88>

0000bdc4 <__udivsi3>:
    bdc4:	200d883a 	mov	r6,r4
    bdc8:	2900152e 	bgeu	r5,r4,be20 <__udivsi3+0x5c>
    bdcc:	28001416 	blt	r5,zero,be20 <__udivsi3+0x5c>
    bdd0:	00800804 	movi	r2,32
    bdd4:	00c00044 	movi	r3,1
    bdd8:	00000206 	br	bde4 <__udivsi3+0x20>
    bddc:	10000e26 	beq	r2,zero,be18 <__udivsi3+0x54>
    bde0:	28000516 	blt	r5,zero,bdf8 <__udivsi3+0x34>
    bde4:	294b883a 	add	r5,r5,r5
    bde8:	10bfffc4 	addi	r2,r2,-1
    bdec:	18c7883a 	add	r3,r3,r3
    bdf0:	293ffa36 	bltu	r5,r4,bddc <__alt_data_end+0xff00bddc>
    bdf4:	18000826 	beq	r3,zero,be18 <__udivsi3+0x54>
    bdf8:	0005883a 	mov	r2,zero
    bdfc:	31400236 	bltu	r6,r5,be08 <__udivsi3+0x44>
    be00:	314dc83a 	sub	r6,r6,r5
    be04:	10c4b03a 	or	r2,r2,r3
    be08:	1806d07a 	srli	r3,r3,1
    be0c:	280ad07a 	srli	r5,r5,1
    be10:	183ffa1e 	bne	r3,zero,bdfc <__alt_data_end+0xff00bdfc>
    be14:	f800283a 	ret
    be18:	0005883a 	mov	r2,zero
    be1c:	f800283a 	ret
    be20:	00c00044 	movi	r3,1
    be24:	003ff406 	br	bdf8 <__alt_data_end+0xff00bdf8>

0000be28 <__umodsi3>:
    be28:	2005883a 	mov	r2,r4
    be2c:	2900122e 	bgeu	r5,r4,be78 <__umodsi3+0x50>
    be30:	28001116 	blt	r5,zero,be78 <__umodsi3+0x50>
    be34:	01800804 	movi	r6,32
    be38:	00c00044 	movi	r3,1
    be3c:	00000206 	br	be48 <__umodsi3+0x20>
    be40:	30000c26 	beq	r6,zero,be74 <__umodsi3+0x4c>
    be44:	28000516 	blt	r5,zero,be5c <__umodsi3+0x34>
    be48:	294b883a 	add	r5,r5,r5
    be4c:	31bfffc4 	addi	r6,r6,-1
    be50:	18c7883a 	add	r3,r3,r3
    be54:	293ffa36 	bltu	r5,r4,be40 <__alt_data_end+0xff00be40>
    be58:	18000626 	beq	r3,zero,be74 <__umodsi3+0x4c>
    be5c:	1806d07a 	srli	r3,r3,1
    be60:	11400136 	bltu	r2,r5,be68 <__umodsi3+0x40>
    be64:	1145c83a 	sub	r2,r2,r5
    be68:	280ad07a 	srli	r5,r5,1
    be6c:	183ffb1e 	bne	r3,zero,be5c <__alt_data_end+0xff00be5c>
    be70:	f800283a 	ret
    be74:	f800283a 	ret
    be78:	00c00044 	movi	r3,1
    be7c:	003ff706 	br	be5c <__alt_data_end+0xff00be5c>

0000be80 <__adddf3>:
    be80:	02c00434 	movhi	r11,16
    be84:	5affffc4 	addi	r11,r11,-1
    be88:	2806d7fa 	srli	r3,r5,31
    be8c:	2ad4703a 	and	r10,r5,r11
    be90:	3ad2703a 	and	r9,r7,r11
    be94:	3804d53a 	srli	r2,r7,20
    be98:	3018d77a 	srli	r12,r6,29
    be9c:	280ad53a 	srli	r5,r5,20
    bea0:	501490fa 	slli	r10,r10,3
    bea4:	2010d77a 	srli	r8,r4,29
    bea8:	481290fa 	slli	r9,r9,3
    beac:	380ed7fa 	srli	r7,r7,31
    beb0:	defffb04 	addi	sp,sp,-20
    beb4:	dc800215 	stw	r18,8(sp)
    beb8:	dc400115 	stw	r17,4(sp)
    bebc:	dc000015 	stw	r16,0(sp)
    bec0:	dfc00415 	stw	ra,16(sp)
    bec4:	dcc00315 	stw	r19,12(sp)
    bec8:	1c803fcc 	andi	r18,r3,255
    becc:	2c01ffcc 	andi	r16,r5,2047
    bed0:	5210b03a 	or	r8,r10,r8
    bed4:	202290fa 	slli	r17,r4,3
    bed8:	1081ffcc 	andi	r2,r2,2047
    bedc:	4b12b03a 	or	r9,r9,r12
    bee0:	300c90fa 	slli	r6,r6,3
    bee4:	91c07526 	beq	r18,r7,c0bc <__adddf3+0x23c>
    bee8:	8087c83a 	sub	r3,r16,r2
    beec:	00c0ab0e 	bge	zero,r3,c19c <__adddf3+0x31c>
    bef0:	10002a1e 	bne	r2,zero,bf9c <__adddf3+0x11c>
    bef4:	4984b03a 	or	r2,r9,r6
    bef8:	1000961e 	bne	r2,zero,c154 <__adddf3+0x2d4>
    befc:	888001cc 	andi	r2,r17,7
    bf00:	10000726 	beq	r2,zero,bf20 <__adddf3+0xa0>
    bf04:	888003cc 	andi	r2,r17,15
    bf08:	00c00104 	movi	r3,4
    bf0c:	10c00426 	beq	r2,r3,bf20 <__adddf3+0xa0>
    bf10:	88c7883a 	add	r3,r17,r3
    bf14:	1c63803a 	cmpltu	r17,r3,r17
    bf18:	4451883a 	add	r8,r8,r17
    bf1c:	1823883a 	mov	r17,r3
    bf20:	4080202c 	andhi	r2,r8,128
    bf24:	10005926 	beq	r2,zero,c08c <__adddf3+0x20c>
    bf28:	84000044 	addi	r16,r16,1
    bf2c:	0081ffc4 	movi	r2,2047
    bf30:	8080ba26 	beq	r16,r2,c21c <__adddf3+0x39c>
    bf34:	00bfe034 	movhi	r2,65408
    bf38:	10bfffc4 	addi	r2,r2,-1
    bf3c:	4090703a 	and	r8,r8,r2
    bf40:	4004977a 	slli	r2,r8,29
    bf44:	4010927a 	slli	r8,r8,9
    bf48:	8822d0fa 	srli	r17,r17,3
    bf4c:	8401ffcc 	andi	r16,r16,2047
    bf50:	4010d33a 	srli	r8,r8,12
    bf54:	9007883a 	mov	r3,r18
    bf58:	1444b03a 	or	r2,r2,r17
    bf5c:	8401ffcc 	andi	r16,r16,2047
    bf60:	8020953a 	slli	r16,r16,20
    bf64:	18c03fcc 	andi	r3,r3,255
    bf68:	01000434 	movhi	r4,16
    bf6c:	213fffc4 	addi	r4,r4,-1
    bf70:	180697fa 	slli	r3,r3,31
    bf74:	4110703a 	and	r8,r8,r4
    bf78:	4410b03a 	or	r8,r8,r16
    bf7c:	40c6b03a 	or	r3,r8,r3
    bf80:	dfc00417 	ldw	ra,16(sp)
    bf84:	dcc00317 	ldw	r19,12(sp)
    bf88:	dc800217 	ldw	r18,8(sp)
    bf8c:	dc400117 	ldw	r17,4(sp)
    bf90:	dc000017 	ldw	r16,0(sp)
    bf94:	dec00504 	addi	sp,sp,20
    bf98:	f800283a 	ret
    bf9c:	0081ffc4 	movi	r2,2047
    bfa0:	80bfd626 	beq	r16,r2,befc <__alt_data_end+0xff00befc>
    bfa4:	4a402034 	orhi	r9,r9,128
    bfa8:	00800e04 	movi	r2,56
    bfac:	10c09f16 	blt	r2,r3,c22c <__adddf3+0x3ac>
    bfb0:	008007c4 	movi	r2,31
    bfb4:	10c0c216 	blt	r2,r3,c2c0 <__adddf3+0x440>
    bfb8:	00800804 	movi	r2,32
    bfbc:	10c5c83a 	sub	r2,r2,r3
    bfc0:	488a983a 	sll	r5,r9,r2
    bfc4:	30c8d83a 	srl	r4,r6,r3
    bfc8:	3084983a 	sll	r2,r6,r2
    bfcc:	48c6d83a 	srl	r3,r9,r3
    bfd0:	290cb03a 	or	r6,r5,r4
    bfd4:	1004c03a 	cmpne	r2,r2,zero
    bfd8:	308cb03a 	or	r6,r6,r2
    bfdc:	898dc83a 	sub	r6,r17,r6
    bfe0:	89a3803a 	cmpltu	r17,r17,r6
    bfe4:	40d1c83a 	sub	r8,r8,r3
    bfe8:	4451c83a 	sub	r8,r8,r17
    bfec:	3023883a 	mov	r17,r6
    bff0:	4080202c 	andhi	r2,r8,128
    bff4:	10002326 	beq	r2,zero,c084 <__adddf3+0x204>
    bff8:	04c02034 	movhi	r19,128
    bffc:	9cffffc4 	addi	r19,r19,-1
    c000:	44e6703a 	and	r19,r8,r19
    c004:	98007626 	beq	r19,zero,c1e0 <__adddf3+0x360>
    c008:	9809883a 	mov	r4,r19
    c00c:	000e4840 	call	e484 <__clzsi2>
    c010:	10fffe04 	addi	r3,r2,-8
    c014:	010007c4 	movi	r4,31
    c018:	20c07716 	blt	r4,r3,c1f8 <__adddf3+0x378>
    c01c:	00800804 	movi	r2,32
    c020:	10c5c83a 	sub	r2,r2,r3
    c024:	8884d83a 	srl	r2,r17,r2
    c028:	98d0983a 	sll	r8,r19,r3
    c02c:	88e2983a 	sll	r17,r17,r3
    c030:	1204b03a 	or	r2,r2,r8
    c034:	1c007416 	blt	r3,r16,c208 <__adddf3+0x388>
    c038:	1c21c83a 	sub	r16,r3,r16
    c03c:	82000044 	addi	r8,r16,1
    c040:	00c007c4 	movi	r3,31
    c044:	1a009116 	blt	r3,r8,c28c <__adddf3+0x40c>
    c048:	00c00804 	movi	r3,32
    c04c:	1a07c83a 	sub	r3,r3,r8
    c050:	8a08d83a 	srl	r4,r17,r8
    c054:	88e2983a 	sll	r17,r17,r3
    c058:	10c6983a 	sll	r3,r2,r3
    c05c:	1210d83a 	srl	r8,r2,r8
    c060:	8804c03a 	cmpne	r2,r17,zero
    c064:	1906b03a 	or	r3,r3,r4
    c068:	18a2b03a 	or	r17,r3,r2
    c06c:	0021883a 	mov	r16,zero
    c070:	003fa206 	br	befc <__alt_data_end+0xff00befc>
    c074:	1890b03a 	or	r8,r3,r2
    c078:	40017d26 	beq	r8,zero,c670 <__adddf3+0x7f0>
    c07c:	1011883a 	mov	r8,r2
    c080:	1823883a 	mov	r17,r3
    c084:	888001cc 	andi	r2,r17,7
    c088:	103f9e1e 	bne	r2,zero,bf04 <__alt_data_end+0xff00bf04>
    c08c:	4004977a 	slli	r2,r8,29
    c090:	8822d0fa 	srli	r17,r17,3
    c094:	4010d0fa 	srli	r8,r8,3
    c098:	9007883a 	mov	r3,r18
    c09c:	1444b03a 	or	r2,r2,r17
    c0a0:	0101ffc4 	movi	r4,2047
    c0a4:	81002426 	beq	r16,r4,c138 <__adddf3+0x2b8>
    c0a8:	8120703a 	and	r16,r16,r4
    c0ac:	01000434 	movhi	r4,16
    c0b0:	213fffc4 	addi	r4,r4,-1
    c0b4:	4110703a 	and	r8,r8,r4
    c0b8:	003fa806 	br	bf5c <__alt_data_end+0xff00bf5c>
    c0bc:	8089c83a 	sub	r4,r16,r2
    c0c0:	01005e0e 	bge	zero,r4,c23c <__adddf3+0x3bc>
    c0c4:	10002b26 	beq	r2,zero,c174 <__adddf3+0x2f4>
    c0c8:	0081ffc4 	movi	r2,2047
    c0cc:	80bf8b26 	beq	r16,r2,befc <__alt_data_end+0xff00befc>
    c0d0:	4a402034 	orhi	r9,r9,128
    c0d4:	00800e04 	movi	r2,56
    c0d8:	1100a40e 	bge	r2,r4,c36c <__adddf3+0x4ec>
    c0dc:	498cb03a 	or	r6,r9,r6
    c0e0:	300ac03a 	cmpne	r5,r6,zero
    c0e4:	0013883a 	mov	r9,zero
    c0e8:	2c4b883a 	add	r5,r5,r17
    c0ec:	2c63803a 	cmpltu	r17,r5,r17
    c0f0:	4a11883a 	add	r8,r9,r8
    c0f4:	8a11883a 	add	r8,r17,r8
    c0f8:	2823883a 	mov	r17,r5
    c0fc:	4080202c 	andhi	r2,r8,128
    c100:	103fe026 	beq	r2,zero,c084 <__alt_data_end+0xff00c084>
    c104:	84000044 	addi	r16,r16,1
    c108:	0081ffc4 	movi	r2,2047
    c10c:	8080d226 	beq	r16,r2,c458 <__adddf3+0x5d8>
    c110:	00bfe034 	movhi	r2,65408
    c114:	10bfffc4 	addi	r2,r2,-1
    c118:	4090703a 	and	r8,r8,r2
    c11c:	880ad07a 	srli	r5,r17,1
    c120:	400897fa 	slli	r4,r8,31
    c124:	88c0004c 	andi	r3,r17,1
    c128:	28e2b03a 	or	r17,r5,r3
    c12c:	4010d07a 	srli	r8,r8,1
    c130:	2462b03a 	or	r17,r4,r17
    c134:	003f7106 	br	befc <__alt_data_end+0xff00befc>
    c138:	4088b03a 	or	r4,r8,r2
    c13c:	20014526 	beq	r4,zero,c654 <__adddf3+0x7d4>
    c140:	01000434 	movhi	r4,16
    c144:	42000234 	orhi	r8,r8,8
    c148:	213fffc4 	addi	r4,r4,-1
    c14c:	4110703a 	and	r8,r8,r4
    c150:	003f8206 	br	bf5c <__alt_data_end+0xff00bf5c>
    c154:	18ffffc4 	addi	r3,r3,-1
    c158:	1800491e 	bne	r3,zero,c280 <__adddf3+0x400>
    c15c:	898bc83a 	sub	r5,r17,r6
    c160:	8963803a 	cmpltu	r17,r17,r5
    c164:	4251c83a 	sub	r8,r8,r9
    c168:	4451c83a 	sub	r8,r8,r17
    c16c:	2823883a 	mov	r17,r5
    c170:	003f9f06 	br	bff0 <__alt_data_end+0xff00bff0>
    c174:	4984b03a 	or	r2,r9,r6
    c178:	103f6026 	beq	r2,zero,befc <__alt_data_end+0xff00befc>
    c17c:	213fffc4 	addi	r4,r4,-1
    c180:	2000931e 	bne	r4,zero,c3d0 <__adddf3+0x550>
    c184:	898d883a 	add	r6,r17,r6
    c188:	3463803a 	cmpltu	r17,r6,r17
    c18c:	4251883a 	add	r8,r8,r9
    c190:	8a11883a 	add	r8,r17,r8
    c194:	3023883a 	mov	r17,r6
    c198:	003fd806 	br	c0fc <__alt_data_end+0xff00c0fc>
    c19c:	1800541e 	bne	r3,zero,c2f0 <__adddf3+0x470>
    c1a0:	80800044 	addi	r2,r16,1
    c1a4:	1081ffcc 	andi	r2,r2,2047
    c1a8:	00c00044 	movi	r3,1
    c1ac:	1880a00e 	bge	r3,r2,c430 <__adddf3+0x5b0>
    c1b0:	8989c83a 	sub	r4,r17,r6
    c1b4:	8905803a 	cmpltu	r2,r17,r4
    c1b8:	4267c83a 	sub	r19,r8,r9
    c1bc:	98a7c83a 	sub	r19,r19,r2
    c1c0:	9880202c 	andhi	r2,r19,128
    c1c4:	10006326 	beq	r2,zero,c354 <__adddf3+0x4d4>
    c1c8:	3463c83a 	sub	r17,r6,r17
    c1cc:	4a07c83a 	sub	r3,r9,r8
    c1d0:	344d803a 	cmpltu	r6,r6,r17
    c1d4:	19a7c83a 	sub	r19,r3,r6
    c1d8:	3825883a 	mov	r18,r7
    c1dc:	983f8a1e 	bne	r19,zero,c008 <__alt_data_end+0xff00c008>
    c1e0:	8809883a 	mov	r4,r17
    c1e4:	000e4840 	call	e484 <__clzsi2>
    c1e8:	10800804 	addi	r2,r2,32
    c1ec:	10fffe04 	addi	r3,r2,-8
    c1f0:	010007c4 	movi	r4,31
    c1f4:	20ff890e 	bge	r4,r3,c01c <__alt_data_end+0xff00c01c>
    c1f8:	10bff604 	addi	r2,r2,-40
    c1fc:	8884983a 	sll	r2,r17,r2
    c200:	0023883a 	mov	r17,zero
    c204:	1c3f8c0e 	bge	r3,r16,c038 <__alt_data_end+0xff00c038>
    c208:	023fe034 	movhi	r8,65408
    c20c:	423fffc4 	addi	r8,r8,-1
    c210:	80e1c83a 	sub	r16,r16,r3
    c214:	1210703a 	and	r8,r2,r8
    c218:	003f3806 	br	befc <__alt_data_end+0xff00befc>
    c21c:	9007883a 	mov	r3,r18
    c220:	0011883a 	mov	r8,zero
    c224:	0005883a 	mov	r2,zero
    c228:	003f4c06 	br	bf5c <__alt_data_end+0xff00bf5c>
    c22c:	498cb03a 	or	r6,r9,r6
    c230:	300cc03a 	cmpne	r6,r6,zero
    c234:	0007883a 	mov	r3,zero
    c238:	003f6806 	br	bfdc <__alt_data_end+0xff00bfdc>
    c23c:	20009c1e 	bne	r4,zero,c4b0 <__adddf3+0x630>
    c240:	80800044 	addi	r2,r16,1
    c244:	1141ffcc 	andi	r5,r2,2047
    c248:	01000044 	movi	r4,1
    c24c:	2140670e 	bge	r4,r5,c3ec <__adddf3+0x56c>
    c250:	0101ffc4 	movi	r4,2047
    c254:	11007f26 	beq	r2,r4,c454 <__adddf3+0x5d4>
    c258:	898d883a 	add	r6,r17,r6
    c25c:	4247883a 	add	r3,r8,r9
    c260:	3451803a 	cmpltu	r8,r6,r17
    c264:	40d1883a 	add	r8,r8,r3
    c268:	402297fa 	slli	r17,r8,31
    c26c:	300cd07a 	srli	r6,r6,1
    c270:	4010d07a 	srli	r8,r8,1
    c274:	1021883a 	mov	r16,r2
    c278:	89a2b03a 	or	r17,r17,r6
    c27c:	003f1f06 	br	befc <__alt_data_end+0xff00befc>
    c280:	0081ffc4 	movi	r2,2047
    c284:	80bf481e 	bne	r16,r2,bfa8 <__alt_data_end+0xff00bfa8>
    c288:	003f1c06 	br	befc <__alt_data_end+0xff00befc>
    c28c:	843ff844 	addi	r16,r16,-31
    c290:	01000804 	movi	r4,32
    c294:	1406d83a 	srl	r3,r2,r16
    c298:	41005026 	beq	r8,r4,c3dc <__adddf3+0x55c>
    c29c:	01001004 	movi	r4,64
    c2a0:	2211c83a 	sub	r8,r4,r8
    c2a4:	1204983a 	sll	r2,r2,r8
    c2a8:	88a2b03a 	or	r17,r17,r2
    c2ac:	8822c03a 	cmpne	r17,r17,zero
    c2b0:	1c62b03a 	or	r17,r3,r17
    c2b4:	0011883a 	mov	r8,zero
    c2b8:	0021883a 	mov	r16,zero
    c2bc:	003f7106 	br	c084 <__alt_data_end+0xff00c084>
    c2c0:	193ff804 	addi	r4,r3,-32
    c2c4:	00800804 	movi	r2,32
    c2c8:	4908d83a 	srl	r4,r9,r4
    c2cc:	18804526 	beq	r3,r2,c3e4 <__adddf3+0x564>
    c2d0:	00801004 	movi	r2,64
    c2d4:	10c5c83a 	sub	r2,r2,r3
    c2d8:	4886983a 	sll	r3,r9,r2
    c2dc:	198cb03a 	or	r6,r3,r6
    c2e0:	300cc03a 	cmpne	r6,r6,zero
    c2e4:	218cb03a 	or	r6,r4,r6
    c2e8:	0007883a 	mov	r3,zero
    c2ec:	003f3b06 	br	bfdc <__alt_data_end+0xff00bfdc>
    c2f0:	80002a26 	beq	r16,zero,c39c <__adddf3+0x51c>
    c2f4:	0101ffc4 	movi	r4,2047
    c2f8:	11006826 	beq	r2,r4,c49c <__adddf3+0x61c>
    c2fc:	00c7c83a 	sub	r3,zero,r3
    c300:	42002034 	orhi	r8,r8,128
    c304:	01000e04 	movi	r4,56
    c308:	20c07c16 	blt	r4,r3,c4fc <__adddf3+0x67c>
    c30c:	010007c4 	movi	r4,31
    c310:	20c0da16 	blt	r4,r3,c67c <__adddf3+0x7fc>
    c314:	01000804 	movi	r4,32
    c318:	20c9c83a 	sub	r4,r4,r3
    c31c:	4114983a 	sll	r10,r8,r4
    c320:	88cad83a 	srl	r5,r17,r3
    c324:	8908983a 	sll	r4,r17,r4
    c328:	40c6d83a 	srl	r3,r8,r3
    c32c:	5162b03a 	or	r17,r10,r5
    c330:	2008c03a 	cmpne	r4,r4,zero
    c334:	8922b03a 	or	r17,r17,r4
    c338:	3463c83a 	sub	r17,r6,r17
    c33c:	48c7c83a 	sub	r3,r9,r3
    c340:	344d803a 	cmpltu	r6,r6,r17
    c344:	1991c83a 	sub	r8,r3,r6
    c348:	1021883a 	mov	r16,r2
    c34c:	3825883a 	mov	r18,r7
    c350:	003f2706 	br	bff0 <__alt_data_end+0xff00bff0>
    c354:	24d0b03a 	or	r8,r4,r19
    c358:	40001b1e 	bne	r8,zero,c3c8 <__adddf3+0x548>
    c35c:	0005883a 	mov	r2,zero
    c360:	0007883a 	mov	r3,zero
    c364:	0021883a 	mov	r16,zero
    c368:	003f4d06 	br	c0a0 <__alt_data_end+0xff00c0a0>
    c36c:	008007c4 	movi	r2,31
    c370:	11003c16 	blt	r2,r4,c464 <__adddf3+0x5e4>
    c374:	00800804 	movi	r2,32
    c378:	1105c83a 	sub	r2,r2,r4
    c37c:	488e983a 	sll	r7,r9,r2
    c380:	310ad83a 	srl	r5,r6,r4
    c384:	3084983a 	sll	r2,r6,r2
    c388:	4912d83a 	srl	r9,r9,r4
    c38c:	394ab03a 	or	r5,r7,r5
    c390:	1004c03a 	cmpne	r2,r2,zero
    c394:	288ab03a 	or	r5,r5,r2
    c398:	003f5306 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c39c:	4448b03a 	or	r4,r8,r17
    c3a0:	20003e26 	beq	r4,zero,c49c <__adddf3+0x61c>
    c3a4:	00c6303a 	nor	r3,zero,r3
    c3a8:	18003a1e 	bne	r3,zero,c494 <__adddf3+0x614>
    c3ac:	3463c83a 	sub	r17,r6,r17
    c3b0:	4a07c83a 	sub	r3,r9,r8
    c3b4:	344d803a 	cmpltu	r6,r6,r17
    c3b8:	1991c83a 	sub	r8,r3,r6
    c3bc:	1021883a 	mov	r16,r2
    c3c0:	3825883a 	mov	r18,r7
    c3c4:	003f0a06 	br	bff0 <__alt_data_end+0xff00bff0>
    c3c8:	2023883a 	mov	r17,r4
    c3cc:	003f0d06 	br	c004 <__alt_data_end+0xff00c004>
    c3d0:	0081ffc4 	movi	r2,2047
    c3d4:	80bf3f1e 	bne	r16,r2,c0d4 <__alt_data_end+0xff00c0d4>
    c3d8:	003ec806 	br	befc <__alt_data_end+0xff00befc>
    c3dc:	0005883a 	mov	r2,zero
    c3e0:	003fb106 	br	c2a8 <__alt_data_end+0xff00c2a8>
    c3e4:	0007883a 	mov	r3,zero
    c3e8:	003fbc06 	br	c2dc <__alt_data_end+0xff00c2dc>
    c3ec:	4444b03a 	or	r2,r8,r17
    c3f0:	8000871e 	bne	r16,zero,c610 <__adddf3+0x790>
    c3f4:	1000ba26 	beq	r2,zero,c6e0 <__adddf3+0x860>
    c3f8:	4984b03a 	or	r2,r9,r6
    c3fc:	103ebf26 	beq	r2,zero,befc <__alt_data_end+0xff00befc>
    c400:	8985883a 	add	r2,r17,r6
    c404:	4247883a 	add	r3,r8,r9
    c408:	1451803a 	cmpltu	r8,r2,r17
    c40c:	40d1883a 	add	r8,r8,r3
    c410:	40c0202c 	andhi	r3,r8,128
    c414:	1023883a 	mov	r17,r2
    c418:	183f1a26 	beq	r3,zero,c084 <__alt_data_end+0xff00c084>
    c41c:	00bfe034 	movhi	r2,65408
    c420:	10bfffc4 	addi	r2,r2,-1
    c424:	2021883a 	mov	r16,r4
    c428:	4090703a 	and	r8,r8,r2
    c42c:	003eb306 	br	befc <__alt_data_end+0xff00befc>
    c430:	4444b03a 	or	r2,r8,r17
    c434:	8000291e 	bne	r16,zero,c4dc <__adddf3+0x65c>
    c438:	10004b1e 	bne	r2,zero,c568 <__adddf3+0x6e8>
    c43c:	4990b03a 	or	r8,r9,r6
    c440:	40008b26 	beq	r8,zero,c670 <__adddf3+0x7f0>
    c444:	4811883a 	mov	r8,r9
    c448:	3023883a 	mov	r17,r6
    c44c:	3825883a 	mov	r18,r7
    c450:	003eaa06 	br	befc <__alt_data_end+0xff00befc>
    c454:	1021883a 	mov	r16,r2
    c458:	0011883a 	mov	r8,zero
    c45c:	0005883a 	mov	r2,zero
    c460:	003f0f06 	br	c0a0 <__alt_data_end+0xff00c0a0>
    c464:	217ff804 	addi	r5,r4,-32
    c468:	00800804 	movi	r2,32
    c46c:	494ad83a 	srl	r5,r9,r5
    c470:	20807d26 	beq	r4,r2,c668 <__adddf3+0x7e8>
    c474:	00801004 	movi	r2,64
    c478:	1109c83a 	sub	r4,r2,r4
    c47c:	4912983a 	sll	r9,r9,r4
    c480:	498cb03a 	or	r6,r9,r6
    c484:	300cc03a 	cmpne	r6,r6,zero
    c488:	298ab03a 	or	r5,r5,r6
    c48c:	0013883a 	mov	r9,zero
    c490:	003f1506 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c494:	0101ffc4 	movi	r4,2047
    c498:	113f9a1e 	bne	r2,r4,c304 <__alt_data_end+0xff00c304>
    c49c:	4811883a 	mov	r8,r9
    c4a0:	3023883a 	mov	r17,r6
    c4a4:	1021883a 	mov	r16,r2
    c4a8:	3825883a 	mov	r18,r7
    c4ac:	003e9306 	br	befc <__alt_data_end+0xff00befc>
    c4b0:	8000161e 	bne	r16,zero,c50c <__adddf3+0x68c>
    c4b4:	444ab03a 	or	r5,r8,r17
    c4b8:	28005126 	beq	r5,zero,c600 <__adddf3+0x780>
    c4bc:	0108303a 	nor	r4,zero,r4
    c4c0:	20004d1e 	bne	r4,zero,c5f8 <__adddf3+0x778>
    c4c4:	89a3883a 	add	r17,r17,r6
    c4c8:	4253883a 	add	r9,r8,r9
    c4cc:	898d803a 	cmpltu	r6,r17,r6
    c4d0:	3251883a 	add	r8,r6,r9
    c4d4:	1021883a 	mov	r16,r2
    c4d8:	003f0806 	br	c0fc <__alt_data_end+0xff00c0fc>
    c4dc:	1000301e 	bne	r2,zero,c5a0 <__adddf3+0x720>
    c4e0:	4984b03a 	or	r2,r9,r6
    c4e4:	10007126 	beq	r2,zero,c6ac <__adddf3+0x82c>
    c4e8:	4811883a 	mov	r8,r9
    c4ec:	3023883a 	mov	r17,r6
    c4f0:	3825883a 	mov	r18,r7
    c4f4:	0401ffc4 	movi	r16,2047
    c4f8:	003e8006 	br	befc <__alt_data_end+0xff00befc>
    c4fc:	4462b03a 	or	r17,r8,r17
    c500:	8822c03a 	cmpne	r17,r17,zero
    c504:	0007883a 	mov	r3,zero
    c508:	003f8b06 	br	c338 <__alt_data_end+0xff00c338>
    c50c:	0141ffc4 	movi	r5,2047
    c510:	11403b26 	beq	r2,r5,c600 <__adddf3+0x780>
    c514:	0109c83a 	sub	r4,zero,r4
    c518:	42002034 	orhi	r8,r8,128
    c51c:	01400e04 	movi	r5,56
    c520:	29006716 	blt	r5,r4,c6c0 <__adddf3+0x840>
    c524:	014007c4 	movi	r5,31
    c528:	29007016 	blt	r5,r4,c6ec <__adddf3+0x86c>
    c52c:	01400804 	movi	r5,32
    c530:	290bc83a 	sub	r5,r5,r4
    c534:	4154983a 	sll	r10,r8,r5
    c538:	890ed83a 	srl	r7,r17,r4
    c53c:	894a983a 	sll	r5,r17,r5
    c540:	4108d83a 	srl	r4,r8,r4
    c544:	51e2b03a 	or	r17,r10,r7
    c548:	280ac03a 	cmpne	r5,r5,zero
    c54c:	8962b03a 	or	r17,r17,r5
    c550:	89a3883a 	add	r17,r17,r6
    c554:	2253883a 	add	r9,r4,r9
    c558:	898d803a 	cmpltu	r6,r17,r6
    c55c:	3251883a 	add	r8,r6,r9
    c560:	1021883a 	mov	r16,r2
    c564:	003ee506 	br	c0fc <__alt_data_end+0xff00c0fc>
    c568:	4984b03a 	or	r2,r9,r6
    c56c:	103e6326 	beq	r2,zero,befc <__alt_data_end+0xff00befc>
    c570:	8987c83a 	sub	r3,r17,r6
    c574:	88c9803a 	cmpltu	r4,r17,r3
    c578:	4245c83a 	sub	r2,r8,r9
    c57c:	1105c83a 	sub	r2,r2,r4
    c580:	1100202c 	andhi	r4,r2,128
    c584:	203ebb26 	beq	r4,zero,c074 <__alt_data_end+0xff00c074>
    c588:	3463c83a 	sub	r17,r6,r17
    c58c:	4a07c83a 	sub	r3,r9,r8
    c590:	344d803a 	cmpltu	r6,r6,r17
    c594:	1991c83a 	sub	r8,r3,r6
    c598:	3825883a 	mov	r18,r7
    c59c:	003e5706 	br	befc <__alt_data_end+0xff00befc>
    c5a0:	4984b03a 	or	r2,r9,r6
    c5a4:	10002e26 	beq	r2,zero,c660 <__adddf3+0x7e0>
    c5a8:	4004d0fa 	srli	r2,r8,3
    c5ac:	8822d0fa 	srli	r17,r17,3
    c5b0:	4010977a 	slli	r8,r8,29
    c5b4:	10c0022c 	andhi	r3,r2,8
    c5b8:	4462b03a 	or	r17,r8,r17
    c5bc:	18000826 	beq	r3,zero,c5e0 <__adddf3+0x760>
    c5c0:	4808d0fa 	srli	r4,r9,3
    c5c4:	20c0022c 	andhi	r3,r4,8
    c5c8:	1800051e 	bne	r3,zero,c5e0 <__adddf3+0x760>
    c5cc:	300cd0fa 	srli	r6,r6,3
    c5d0:	4806977a 	slli	r3,r9,29
    c5d4:	2005883a 	mov	r2,r4
    c5d8:	3825883a 	mov	r18,r7
    c5dc:	19a2b03a 	or	r17,r3,r6
    c5e0:	8810d77a 	srli	r8,r17,29
    c5e4:	100490fa 	slli	r2,r2,3
    c5e8:	882290fa 	slli	r17,r17,3
    c5ec:	0401ffc4 	movi	r16,2047
    c5f0:	4090b03a 	or	r8,r8,r2
    c5f4:	003e4106 	br	befc <__alt_data_end+0xff00befc>
    c5f8:	0141ffc4 	movi	r5,2047
    c5fc:	117fc71e 	bne	r2,r5,c51c <__alt_data_end+0xff00c51c>
    c600:	4811883a 	mov	r8,r9
    c604:	3023883a 	mov	r17,r6
    c608:	1021883a 	mov	r16,r2
    c60c:	003e3b06 	br	befc <__alt_data_end+0xff00befc>
    c610:	10002f26 	beq	r2,zero,c6d0 <__adddf3+0x850>
    c614:	4984b03a 	or	r2,r9,r6
    c618:	10001126 	beq	r2,zero,c660 <__adddf3+0x7e0>
    c61c:	4004d0fa 	srli	r2,r8,3
    c620:	8822d0fa 	srli	r17,r17,3
    c624:	4010977a 	slli	r8,r8,29
    c628:	10c0022c 	andhi	r3,r2,8
    c62c:	4462b03a 	or	r17,r8,r17
    c630:	183feb26 	beq	r3,zero,c5e0 <__alt_data_end+0xff00c5e0>
    c634:	4808d0fa 	srli	r4,r9,3
    c638:	20c0022c 	andhi	r3,r4,8
    c63c:	183fe81e 	bne	r3,zero,c5e0 <__alt_data_end+0xff00c5e0>
    c640:	300cd0fa 	srli	r6,r6,3
    c644:	4806977a 	slli	r3,r9,29
    c648:	2005883a 	mov	r2,r4
    c64c:	19a2b03a 	or	r17,r3,r6
    c650:	003fe306 	br	c5e0 <__alt_data_end+0xff00c5e0>
    c654:	0011883a 	mov	r8,zero
    c658:	0005883a 	mov	r2,zero
    c65c:	003e3f06 	br	bf5c <__alt_data_end+0xff00bf5c>
    c660:	0401ffc4 	movi	r16,2047
    c664:	003e2506 	br	befc <__alt_data_end+0xff00befc>
    c668:	0013883a 	mov	r9,zero
    c66c:	003f8406 	br	c480 <__alt_data_end+0xff00c480>
    c670:	0005883a 	mov	r2,zero
    c674:	0007883a 	mov	r3,zero
    c678:	003e8906 	br	c0a0 <__alt_data_end+0xff00c0a0>
    c67c:	197ff804 	addi	r5,r3,-32
    c680:	01000804 	movi	r4,32
    c684:	414ad83a 	srl	r5,r8,r5
    c688:	19002426 	beq	r3,r4,c71c <__adddf3+0x89c>
    c68c:	01001004 	movi	r4,64
    c690:	20c7c83a 	sub	r3,r4,r3
    c694:	40c6983a 	sll	r3,r8,r3
    c698:	1c46b03a 	or	r3,r3,r17
    c69c:	1806c03a 	cmpne	r3,r3,zero
    c6a0:	28e2b03a 	or	r17,r5,r3
    c6a4:	0007883a 	mov	r3,zero
    c6a8:	003f2306 	br	c338 <__alt_data_end+0xff00c338>
    c6ac:	0007883a 	mov	r3,zero
    c6b0:	5811883a 	mov	r8,r11
    c6b4:	00bfffc4 	movi	r2,-1
    c6b8:	0401ffc4 	movi	r16,2047
    c6bc:	003e7806 	br	c0a0 <__alt_data_end+0xff00c0a0>
    c6c0:	4462b03a 	or	r17,r8,r17
    c6c4:	8822c03a 	cmpne	r17,r17,zero
    c6c8:	0009883a 	mov	r4,zero
    c6cc:	003fa006 	br	c550 <__alt_data_end+0xff00c550>
    c6d0:	4811883a 	mov	r8,r9
    c6d4:	3023883a 	mov	r17,r6
    c6d8:	0401ffc4 	movi	r16,2047
    c6dc:	003e0706 	br	befc <__alt_data_end+0xff00befc>
    c6e0:	4811883a 	mov	r8,r9
    c6e4:	3023883a 	mov	r17,r6
    c6e8:	003e0406 	br	befc <__alt_data_end+0xff00befc>
    c6ec:	21fff804 	addi	r7,r4,-32
    c6f0:	01400804 	movi	r5,32
    c6f4:	41ced83a 	srl	r7,r8,r7
    c6f8:	21400a26 	beq	r4,r5,c724 <__adddf3+0x8a4>
    c6fc:	01401004 	movi	r5,64
    c700:	2909c83a 	sub	r4,r5,r4
    c704:	4108983a 	sll	r4,r8,r4
    c708:	2448b03a 	or	r4,r4,r17
    c70c:	2008c03a 	cmpne	r4,r4,zero
    c710:	3922b03a 	or	r17,r7,r4
    c714:	0009883a 	mov	r4,zero
    c718:	003f8d06 	br	c550 <__alt_data_end+0xff00c550>
    c71c:	0007883a 	mov	r3,zero
    c720:	003fdd06 	br	c698 <__alt_data_end+0xff00c698>
    c724:	0009883a 	mov	r4,zero
    c728:	003ff706 	br	c708 <__alt_data_end+0xff00c708>

0000c72c <__divdf3>:
    c72c:	defff204 	addi	sp,sp,-56
    c730:	dd400915 	stw	r21,36(sp)
    c734:	282ad53a 	srli	r21,r5,20
    c738:	dd000815 	stw	r20,32(sp)
    c73c:	2828d7fa 	srli	r20,r5,31
    c740:	dc000415 	stw	r16,16(sp)
    c744:	04000434 	movhi	r16,16
    c748:	df000c15 	stw	fp,48(sp)
    c74c:	843fffc4 	addi	r16,r16,-1
    c750:	dfc00d15 	stw	ra,52(sp)
    c754:	ddc00b15 	stw	r23,44(sp)
    c758:	dd800a15 	stw	r22,40(sp)
    c75c:	dcc00715 	stw	r19,28(sp)
    c760:	dc800615 	stw	r18,24(sp)
    c764:	dc400515 	stw	r17,20(sp)
    c768:	ad41ffcc 	andi	r21,r21,2047
    c76c:	2c20703a 	and	r16,r5,r16
    c770:	a7003fcc 	andi	fp,r20,255
    c774:	a8006126 	beq	r21,zero,c8fc <__divdf3+0x1d0>
    c778:	0081ffc4 	movi	r2,2047
    c77c:	2025883a 	mov	r18,r4
    c780:	a8803726 	beq	r21,r2,c860 <__divdf3+0x134>
    c784:	80800434 	orhi	r2,r16,16
    c788:	100490fa 	slli	r2,r2,3
    c78c:	2020d77a 	srli	r16,r4,29
    c790:	202490fa 	slli	r18,r4,3
    c794:	ad7f0044 	addi	r21,r21,-1023
    c798:	80a0b03a 	or	r16,r16,r2
    c79c:	0027883a 	mov	r19,zero
    c7a0:	0013883a 	mov	r9,zero
    c7a4:	3804d53a 	srli	r2,r7,20
    c7a8:	382cd7fa 	srli	r22,r7,31
    c7ac:	04400434 	movhi	r17,16
    c7b0:	8c7fffc4 	addi	r17,r17,-1
    c7b4:	1081ffcc 	andi	r2,r2,2047
    c7b8:	3011883a 	mov	r8,r6
    c7bc:	3c62703a 	and	r17,r7,r17
    c7c0:	b5c03fcc 	andi	r23,r22,255
    c7c4:	10006c26 	beq	r2,zero,c978 <__divdf3+0x24c>
    c7c8:	00c1ffc4 	movi	r3,2047
    c7cc:	10c06426 	beq	r2,r3,c960 <__divdf3+0x234>
    c7d0:	88c00434 	orhi	r3,r17,16
    c7d4:	180690fa 	slli	r3,r3,3
    c7d8:	3022d77a 	srli	r17,r6,29
    c7dc:	301090fa 	slli	r8,r6,3
    c7e0:	10bf0044 	addi	r2,r2,-1023
    c7e4:	88e2b03a 	or	r17,r17,r3
    c7e8:	000f883a 	mov	r7,zero
    c7ec:	a58cf03a 	xor	r6,r20,r22
    c7f0:	3cc8b03a 	or	r4,r7,r19
    c7f4:	a8abc83a 	sub	r21,r21,r2
    c7f8:	008003c4 	movi	r2,15
    c7fc:	3007883a 	mov	r3,r6
    c800:	34c03fcc 	andi	r19,r6,255
    c804:	11009036 	bltu	r2,r4,ca48 <__divdf3+0x31c>
    c808:	200890ba 	slli	r4,r4,2
    c80c:	00800074 	movhi	r2,1
    c810:	10b20804 	addi	r2,r2,-14304
    c814:	2089883a 	add	r4,r4,r2
    c818:	20800017 	ldw	r2,0(r4)
    c81c:	1000683a 	jmp	r2
    c820:	0000ca48 	cmpgei	zero,zero,809
    c824:	0000c898 	cmpnei	zero,zero,802
    c828:	0000ca38 	rdprs	zero,zero,808
    c82c:	0000c88c 	andi	zero,zero,802
    c830:	0000ca38 	rdprs	zero,zero,808
    c834:	0000ca0c 	andi	zero,zero,808
    c838:	0000ca38 	rdprs	zero,zero,808
    c83c:	0000c88c 	andi	zero,zero,802
    c840:	0000c898 	cmpnei	zero,zero,802
    c844:	0000c898 	cmpnei	zero,zero,802
    c848:	0000ca0c 	andi	zero,zero,808
    c84c:	0000c88c 	andi	zero,zero,802
    c850:	0000c87c 	xorhi	zero,zero,801
    c854:	0000c87c 	xorhi	zero,zero,801
    c858:	0000c87c 	xorhi	zero,zero,801
    c85c:	0000cd2c 	andhi	zero,zero,820
    c860:	2404b03a 	or	r2,r4,r16
    c864:	1000661e 	bne	r2,zero,ca00 <__divdf3+0x2d4>
    c868:	04c00204 	movi	r19,8
    c86c:	0021883a 	mov	r16,zero
    c870:	0025883a 	mov	r18,zero
    c874:	02400084 	movi	r9,2
    c878:	003fca06 	br	c7a4 <__alt_data_end+0xff00c7a4>
    c87c:	8023883a 	mov	r17,r16
    c880:	9011883a 	mov	r8,r18
    c884:	e02f883a 	mov	r23,fp
    c888:	480f883a 	mov	r7,r9
    c88c:	00800084 	movi	r2,2
    c890:	3881311e 	bne	r7,r2,cd58 <__divdf3+0x62c>
    c894:	b827883a 	mov	r19,r23
    c898:	98c0004c 	andi	r3,r19,1
    c89c:	0081ffc4 	movi	r2,2047
    c8a0:	000b883a 	mov	r5,zero
    c8a4:	0025883a 	mov	r18,zero
    c8a8:	1004953a 	slli	r2,r2,20
    c8ac:	18c03fcc 	andi	r3,r3,255
    c8b0:	04400434 	movhi	r17,16
    c8b4:	8c7fffc4 	addi	r17,r17,-1
    c8b8:	180697fa 	slli	r3,r3,31
    c8bc:	2c4a703a 	and	r5,r5,r17
    c8c0:	288ab03a 	or	r5,r5,r2
    c8c4:	28c6b03a 	or	r3,r5,r3
    c8c8:	9005883a 	mov	r2,r18
    c8cc:	dfc00d17 	ldw	ra,52(sp)
    c8d0:	df000c17 	ldw	fp,48(sp)
    c8d4:	ddc00b17 	ldw	r23,44(sp)
    c8d8:	dd800a17 	ldw	r22,40(sp)
    c8dc:	dd400917 	ldw	r21,36(sp)
    c8e0:	dd000817 	ldw	r20,32(sp)
    c8e4:	dcc00717 	ldw	r19,28(sp)
    c8e8:	dc800617 	ldw	r18,24(sp)
    c8ec:	dc400517 	ldw	r17,20(sp)
    c8f0:	dc000417 	ldw	r16,16(sp)
    c8f4:	dec00e04 	addi	sp,sp,56
    c8f8:	f800283a 	ret
    c8fc:	2404b03a 	or	r2,r4,r16
    c900:	2027883a 	mov	r19,r4
    c904:	10003926 	beq	r2,zero,c9ec <__divdf3+0x2c0>
    c908:	80012e26 	beq	r16,zero,cdc4 <__divdf3+0x698>
    c90c:	8009883a 	mov	r4,r16
    c910:	d9800315 	stw	r6,12(sp)
    c914:	d9c00215 	stw	r7,8(sp)
    c918:	000e4840 	call	e484 <__clzsi2>
    c91c:	d9800317 	ldw	r6,12(sp)
    c920:	d9c00217 	ldw	r7,8(sp)
    c924:	113ffd44 	addi	r4,r2,-11
    c928:	00c00704 	movi	r3,28
    c92c:	19012116 	blt	r3,r4,cdb4 <__divdf3+0x688>
    c930:	00c00744 	movi	r3,29
    c934:	147ffe04 	addi	r17,r2,-8
    c938:	1907c83a 	sub	r3,r3,r4
    c93c:	8460983a 	sll	r16,r16,r17
    c940:	98c6d83a 	srl	r3,r19,r3
    c944:	9c64983a 	sll	r18,r19,r17
    c948:	1c20b03a 	or	r16,r3,r16
    c94c:	1080fcc4 	addi	r2,r2,1011
    c950:	00abc83a 	sub	r21,zero,r2
    c954:	0027883a 	mov	r19,zero
    c958:	0013883a 	mov	r9,zero
    c95c:	003f9106 	br	c7a4 <__alt_data_end+0xff00c7a4>
    c960:	3446b03a 	or	r3,r6,r17
    c964:	18001f1e 	bne	r3,zero,c9e4 <__divdf3+0x2b8>
    c968:	0023883a 	mov	r17,zero
    c96c:	0011883a 	mov	r8,zero
    c970:	01c00084 	movi	r7,2
    c974:	003f9d06 	br	c7ec <__alt_data_end+0xff00c7ec>
    c978:	3446b03a 	or	r3,r6,r17
    c97c:	18001526 	beq	r3,zero,c9d4 <__divdf3+0x2a8>
    c980:	88011b26 	beq	r17,zero,cdf0 <__divdf3+0x6c4>
    c984:	8809883a 	mov	r4,r17
    c988:	d9800315 	stw	r6,12(sp)
    c98c:	da400115 	stw	r9,4(sp)
    c990:	000e4840 	call	e484 <__clzsi2>
    c994:	d9800317 	ldw	r6,12(sp)
    c998:	da400117 	ldw	r9,4(sp)
    c99c:	113ffd44 	addi	r4,r2,-11
    c9a0:	00c00704 	movi	r3,28
    c9a4:	19010e16 	blt	r3,r4,cde0 <__divdf3+0x6b4>
    c9a8:	00c00744 	movi	r3,29
    c9ac:	123ffe04 	addi	r8,r2,-8
    c9b0:	1907c83a 	sub	r3,r3,r4
    c9b4:	8a22983a 	sll	r17,r17,r8
    c9b8:	30c6d83a 	srl	r3,r6,r3
    c9bc:	3210983a 	sll	r8,r6,r8
    c9c0:	1c62b03a 	or	r17,r3,r17
    c9c4:	1080fcc4 	addi	r2,r2,1011
    c9c8:	0085c83a 	sub	r2,zero,r2
    c9cc:	000f883a 	mov	r7,zero
    c9d0:	003f8606 	br	c7ec <__alt_data_end+0xff00c7ec>
    c9d4:	0023883a 	mov	r17,zero
    c9d8:	0011883a 	mov	r8,zero
    c9dc:	01c00044 	movi	r7,1
    c9e0:	003f8206 	br	c7ec <__alt_data_end+0xff00c7ec>
    c9e4:	01c000c4 	movi	r7,3
    c9e8:	003f8006 	br	c7ec <__alt_data_end+0xff00c7ec>
    c9ec:	04c00104 	movi	r19,4
    c9f0:	0021883a 	mov	r16,zero
    c9f4:	0025883a 	mov	r18,zero
    c9f8:	02400044 	movi	r9,1
    c9fc:	003f6906 	br	c7a4 <__alt_data_end+0xff00c7a4>
    ca00:	04c00304 	movi	r19,12
    ca04:	024000c4 	movi	r9,3
    ca08:	003f6606 	br	c7a4 <__alt_data_end+0xff00c7a4>
    ca0c:	01400434 	movhi	r5,16
    ca10:	0007883a 	mov	r3,zero
    ca14:	297fffc4 	addi	r5,r5,-1
    ca18:	04bfffc4 	movi	r18,-1
    ca1c:	0081ffc4 	movi	r2,2047
    ca20:	003fa106 	br	c8a8 <__alt_data_end+0xff00c8a8>
    ca24:	00c00044 	movi	r3,1
    ca28:	1887c83a 	sub	r3,r3,r2
    ca2c:	01000e04 	movi	r4,56
    ca30:	20c1210e 	bge	r4,r3,ceb8 <__divdf3+0x78c>
    ca34:	98c0004c 	andi	r3,r19,1
    ca38:	0005883a 	mov	r2,zero
    ca3c:	000b883a 	mov	r5,zero
    ca40:	0025883a 	mov	r18,zero
    ca44:	003f9806 	br	c8a8 <__alt_data_end+0xff00c8a8>
    ca48:	8c00fd36 	bltu	r17,r16,ce40 <__divdf3+0x714>
    ca4c:	8440fb26 	beq	r16,r17,ce3c <__divdf3+0x710>
    ca50:	8007883a 	mov	r3,r16
    ca54:	ad7fffc4 	addi	r21,r21,-1
    ca58:	0021883a 	mov	r16,zero
    ca5c:	4004d63a 	srli	r2,r8,24
    ca60:	8822923a 	slli	r17,r17,8
    ca64:	1809883a 	mov	r4,r3
    ca68:	402c923a 	slli	r22,r8,8
    ca6c:	88b8b03a 	or	fp,r17,r2
    ca70:	e028d43a 	srli	r20,fp,16
    ca74:	d8c00015 	stw	r3,0(sp)
    ca78:	e5ffffcc 	andi	r23,fp,65535
    ca7c:	a00b883a 	mov	r5,r20
    ca80:	000bdc40 	call	bdc4 <__udivsi3>
    ca84:	d8c00017 	ldw	r3,0(sp)
    ca88:	a00b883a 	mov	r5,r20
    ca8c:	d8800315 	stw	r2,12(sp)
    ca90:	1809883a 	mov	r4,r3
    ca94:	000be280 	call	be28 <__umodsi3>
    ca98:	d9800317 	ldw	r6,12(sp)
    ca9c:	1006943a 	slli	r3,r2,16
    caa0:	9004d43a 	srli	r2,r18,16
    caa4:	b9a3383a 	mul	r17,r23,r6
    caa8:	10c4b03a 	or	r2,r2,r3
    caac:	1440062e 	bgeu	r2,r17,cac8 <__divdf3+0x39c>
    cab0:	1705883a 	add	r2,r2,fp
    cab4:	30ffffc4 	addi	r3,r6,-1
    cab8:	1700ee36 	bltu	r2,fp,ce74 <__divdf3+0x748>
    cabc:	1440ed2e 	bgeu	r2,r17,ce74 <__divdf3+0x748>
    cac0:	31bfff84 	addi	r6,r6,-2
    cac4:	1705883a 	add	r2,r2,fp
    cac8:	1463c83a 	sub	r17,r2,r17
    cacc:	a00b883a 	mov	r5,r20
    cad0:	8809883a 	mov	r4,r17
    cad4:	d9800315 	stw	r6,12(sp)
    cad8:	000bdc40 	call	bdc4 <__udivsi3>
    cadc:	a00b883a 	mov	r5,r20
    cae0:	8809883a 	mov	r4,r17
    cae4:	d8800215 	stw	r2,8(sp)
    cae8:	000be280 	call	be28 <__umodsi3>
    caec:	d9c00217 	ldw	r7,8(sp)
    caf0:	1004943a 	slli	r2,r2,16
    caf4:	94bfffcc 	andi	r18,r18,65535
    caf8:	b9d1383a 	mul	r8,r23,r7
    cafc:	90a4b03a 	or	r18,r18,r2
    cb00:	d9800317 	ldw	r6,12(sp)
    cb04:	9200062e 	bgeu	r18,r8,cb20 <__divdf3+0x3f4>
    cb08:	9725883a 	add	r18,r18,fp
    cb0c:	38bfffc4 	addi	r2,r7,-1
    cb10:	9700d636 	bltu	r18,fp,ce6c <__divdf3+0x740>
    cb14:	9200d52e 	bgeu	r18,r8,ce6c <__divdf3+0x740>
    cb18:	39ffff84 	addi	r7,r7,-2
    cb1c:	9725883a 	add	r18,r18,fp
    cb20:	3004943a 	slli	r2,r6,16
    cb24:	b012d43a 	srli	r9,r22,16
    cb28:	b1bfffcc 	andi	r6,r22,65535
    cb2c:	11e2b03a 	or	r17,r2,r7
    cb30:	8806d43a 	srli	r3,r17,16
    cb34:	893fffcc 	andi	r4,r17,65535
    cb38:	218b383a 	mul	r5,r4,r6
    cb3c:	30c5383a 	mul	r2,r6,r3
    cb40:	2249383a 	mul	r4,r4,r9
    cb44:	280ed43a 	srli	r7,r5,16
    cb48:	9225c83a 	sub	r18,r18,r8
    cb4c:	2089883a 	add	r4,r4,r2
    cb50:	3909883a 	add	r4,r7,r4
    cb54:	1a47383a 	mul	r3,r3,r9
    cb58:	2080022e 	bgeu	r4,r2,cb64 <__divdf3+0x438>
    cb5c:	00800074 	movhi	r2,1
    cb60:	1887883a 	add	r3,r3,r2
    cb64:	2004d43a 	srli	r2,r4,16
    cb68:	2008943a 	slli	r4,r4,16
    cb6c:	297fffcc 	andi	r5,r5,65535
    cb70:	10c7883a 	add	r3,r2,r3
    cb74:	2149883a 	add	r4,r4,r5
    cb78:	90c0a536 	bltu	r18,r3,ce10 <__divdf3+0x6e4>
    cb7c:	90c0bf26 	beq	r18,r3,ce7c <__divdf3+0x750>
    cb80:	90c7c83a 	sub	r3,r18,r3
    cb84:	810fc83a 	sub	r7,r16,r4
    cb88:	81e5803a 	cmpltu	r18,r16,r7
    cb8c:	1ca5c83a 	sub	r18,r3,r18
    cb90:	e480c126 	beq	fp,r18,ce98 <__divdf3+0x76c>
    cb94:	a00b883a 	mov	r5,r20
    cb98:	9009883a 	mov	r4,r18
    cb9c:	d9800315 	stw	r6,12(sp)
    cba0:	d9c00215 	stw	r7,8(sp)
    cba4:	da400115 	stw	r9,4(sp)
    cba8:	000bdc40 	call	bdc4 <__udivsi3>
    cbac:	a00b883a 	mov	r5,r20
    cbb0:	9009883a 	mov	r4,r18
    cbb4:	d8800015 	stw	r2,0(sp)
    cbb8:	000be280 	call	be28 <__umodsi3>
    cbbc:	d9c00217 	ldw	r7,8(sp)
    cbc0:	da000017 	ldw	r8,0(sp)
    cbc4:	1006943a 	slli	r3,r2,16
    cbc8:	3804d43a 	srli	r2,r7,16
    cbcc:	ba21383a 	mul	r16,r23,r8
    cbd0:	d9800317 	ldw	r6,12(sp)
    cbd4:	10c4b03a 	or	r2,r2,r3
    cbd8:	da400117 	ldw	r9,4(sp)
    cbdc:	1400062e 	bgeu	r2,r16,cbf8 <__divdf3+0x4cc>
    cbe0:	1705883a 	add	r2,r2,fp
    cbe4:	40ffffc4 	addi	r3,r8,-1
    cbe8:	1700ad36 	bltu	r2,fp,cea0 <__divdf3+0x774>
    cbec:	1400ac2e 	bgeu	r2,r16,cea0 <__divdf3+0x774>
    cbf0:	423fff84 	addi	r8,r8,-2
    cbf4:	1705883a 	add	r2,r2,fp
    cbf8:	1421c83a 	sub	r16,r2,r16
    cbfc:	a00b883a 	mov	r5,r20
    cc00:	8009883a 	mov	r4,r16
    cc04:	d9800315 	stw	r6,12(sp)
    cc08:	d9c00215 	stw	r7,8(sp)
    cc0c:	da000015 	stw	r8,0(sp)
    cc10:	da400115 	stw	r9,4(sp)
    cc14:	000bdc40 	call	bdc4 <__udivsi3>
    cc18:	8009883a 	mov	r4,r16
    cc1c:	a00b883a 	mov	r5,r20
    cc20:	1025883a 	mov	r18,r2
    cc24:	000be280 	call	be28 <__umodsi3>
    cc28:	d9c00217 	ldw	r7,8(sp)
    cc2c:	1004943a 	slli	r2,r2,16
    cc30:	bcaf383a 	mul	r23,r23,r18
    cc34:	393fffcc 	andi	r4,r7,65535
    cc38:	2088b03a 	or	r4,r4,r2
    cc3c:	d9800317 	ldw	r6,12(sp)
    cc40:	da000017 	ldw	r8,0(sp)
    cc44:	da400117 	ldw	r9,4(sp)
    cc48:	25c0062e 	bgeu	r4,r23,cc64 <__divdf3+0x538>
    cc4c:	2709883a 	add	r4,r4,fp
    cc50:	90bfffc4 	addi	r2,r18,-1
    cc54:	27009436 	bltu	r4,fp,cea8 <__divdf3+0x77c>
    cc58:	25c0932e 	bgeu	r4,r23,cea8 <__divdf3+0x77c>
    cc5c:	94bfff84 	addi	r18,r18,-2
    cc60:	2709883a 	add	r4,r4,fp
    cc64:	4004943a 	slli	r2,r8,16
    cc68:	25efc83a 	sub	r23,r4,r23
    cc6c:	1490b03a 	or	r8,r2,r18
    cc70:	4008d43a 	srli	r4,r8,16
    cc74:	40ffffcc 	andi	r3,r8,65535
    cc78:	30c5383a 	mul	r2,r6,r3
    cc7c:	1a47383a 	mul	r3,r3,r9
    cc80:	310d383a 	mul	r6,r6,r4
    cc84:	100ad43a 	srli	r5,r2,16
    cc88:	4913383a 	mul	r9,r9,r4
    cc8c:	1987883a 	add	r3,r3,r6
    cc90:	28c7883a 	add	r3,r5,r3
    cc94:	1980022e 	bgeu	r3,r6,cca0 <__divdf3+0x574>
    cc98:	01000074 	movhi	r4,1
    cc9c:	4913883a 	add	r9,r9,r4
    cca0:	1808d43a 	srli	r4,r3,16
    cca4:	1806943a 	slli	r3,r3,16
    cca8:	10bfffcc 	andi	r2,r2,65535
    ccac:	2253883a 	add	r9,r4,r9
    ccb0:	1887883a 	add	r3,r3,r2
    ccb4:	ba403836 	bltu	r23,r9,cd98 <__divdf3+0x66c>
    ccb8:	ba403626 	beq	r23,r9,cd94 <__divdf3+0x668>
    ccbc:	42000054 	ori	r8,r8,1
    ccc0:	a880ffc4 	addi	r2,r21,1023
    ccc4:	00bf570e 	bge	zero,r2,ca24 <__alt_data_end+0xff00ca24>
    ccc8:	40c001cc 	andi	r3,r8,7
    cccc:	18000726 	beq	r3,zero,ccec <__divdf3+0x5c0>
    ccd0:	40c003cc 	andi	r3,r8,15
    ccd4:	01000104 	movi	r4,4
    ccd8:	19000426 	beq	r3,r4,ccec <__divdf3+0x5c0>
    ccdc:	4107883a 	add	r3,r8,r4
    cce0:	1a11803a 	cmpltu	r8,r3,r8
    cce4:	8a23883a 	add	r17,r17,r8
    cce8:	1811883a 	mov	r8,r3
    ccec:	88c0402c 	andhi	r3,r17,256
    ccf0:	18000426 	beq	r3,zero,cd04 <__divdf3+0x5d8>
    ccf4:	00ffc034 	movhi	r3,65280
    ccf8:	18ffffc4 	addi	r3,r3,-1
    ccfc:	a8810004 	addi	r2,r21,1024
    cd00:	88e2703a 	and	r17,r17,r3
    cd04:	00c1ff84 	movi	r3,2046
    cd08:	18bee316 	blt	r3,r2,c898 <__alt_data_end+0xff00c898>
    cd0c:	8824977a 	slli	r18,r17,29
    cd10:	4010d0fa 	srli	r8,r8,3
    cd14:	8822927a 	slli	r17,r17,9
    cd18:	1081ffcc 	andi	r2,r2,2047
    cd1c:	9224b03a 	or	r18,r18,r8
    cd20:	880ad33a 	srli	r5,r17,12
    cd24:	98c0004c 	andi	r3,r19,1
    cd28:	003edf06 	br	c8a8 <__alt_data_end+0xff00c8a8>
    cd2c:	8080022c 	andhi	r2,r16,8
    cd30:	10001226 	beq	r2,zero,cd7c <__divdf3+0x650>
    cd34:	8880022c 	andhi	r2,r17,8
    cd38:	1000101e 	bne	r2,zero,cd7c <__divdf3+0x650>
    cd3c:	00800434 	movhi	r2,16
    cd40:	89400234 	orhi	r5,r17,8
    cd44:	10bfffc4 	addi	r2,r2,-1
    cd48:	b007883a 	mov	r3,r22
    cd4c:	288a703a 	and	r5,r5,r2
    cd50:	4025883a 	mov	r18,r8
    cd54:	003f3106 	br	ca1c <__alt_data_end+0xff00ca1c>
    cd58:	008000c4 	movi	r2,3
    cd5c:	3880a626 	beq	r7,r2,cff8 <__divdf3+0x8cc>
    cd60:	00800044 	movi	r2,1
    cd64:	3880521e 	bne	r7,r2,ceb0 <__divdf3+0x784>
    cd68:	b807883a 	mov	r3,r23
    cd6c:	0005883a 	mov	r2,zero
    cd70:	000b883a 	mov	r5,zero
    cd74:	0025883a 	mov	r18,zero
    cd78:	003ecb06 	br	c8a8 <__alt_data_end+0xff00c8a8>
    cd7c:	00800434 	movhi	r2,16
    cd80:	81400234 	orhi	r5,r16,8
    cd84:	10bfffc4 	addi	r2,r2,-1
    cd88:	a007883a 	mov	r3,r20
    cd8c:	288a703a 	and	r5,r5,r2
    cd90:	003f2206 	br	ca1c <__alt_data_end+0xff00ca1c>
    cd94:	183fca26 	beq	r3,zero,ccc0 <__alt_data_end+0xff00ccc0>
    cd98:	e5ef883a 	add	r23,fp,r23
    cd9c:	40bfffc4 	addi	r2,r8,-1
    cda0:	bf00392e 	bgeu	r23,fp,ce88 <__divdf3+0x75c>
    cda4:	1011883a 	mov	r8,r2
    cda8:	ba7fc41e 	bne	r23,r9,ccbc <__alt_data_end+0xff00ccbc>
    cdac:	b0ffc31e 	bne	r22,r3,ccbc <__alt_data_end+0xff00ccbc>
    cdb0:	003fc306 	br	ccc0 <__alt_data_end+0xff00ccc0>
    cdb4:	143ff604 	addi	r16,r2,-40
    cdb8:	9c20983a 	sll	r16,r19,r16
    cdbc:	0025883a 	mov	r18,zero
    cdc0:	003ee206 	br	c94c <__alt_data_end+0xff00c94c>
    cdc4:	d9800315 	stw	r6,12(sp)
    cdc8:	d9c00215 	stw	r7,8(sp)
    cdcc:	000e4840 	call	e484 <__clzsi2>
    cdd0:	10800804 	addi	r2,r2,32
    cdd4:	d9c00217 	ldw	r7,8(sp)
    cdd8:	d9800317 	ldw	r6,12(sp)
    cddc:	003ed106 	br	c924 <__alt_data_end+0xff00c924>
    cde0:	147ff604 	addi	r17,r2,-40
    cde4:	3462983a 	sll	r17,r6,r17
    cde8:	0011883a 	mov	r8,zero
    cdec:	003ef506 	br	c9c4 <__alt_data_end+0xff00c9c4>
    cdf0:	3009883a 	mov	r4,r6
    cdf4:	d9800315 	stw	r6,12(sp)
    cdf8:	da400115 	stw	r9,4(sp)
    cdfc:	000e4840 	call	e484 <__clzsi2>
    ce00:	10800804 	addi	r2,r2,32
    ce04:	da400117 	ldw	r9,4(sp)
    ce08:	d9800317 	ldw	r6,12(sp)
    ce0c:	003ee306 	br	c99c <__alt_data_end+0xff00c99c>
    ce10:	85a1883a 	add	r16,r16,r22
    ce14:	8585803a 	cmpltu	r2,r16,r22
    ce18:	1705883a 	add	r2,r2,fp
    ce1c:	14a5883a 	add	r18,r2,r18
    ce20:	88bfffc4 	addi	r2,r17,-1
    ce24:	e4800c2e 	bgeu	fp,r18,ce58 <__divdf3+0x72c>
    ce28:	90c03e36 	bltu	r18,r3,cf24 <__divdf3+0x7f8>
    ce2c:	1c806926 	beq	r3,r18,cfd4 <__divdf3+0x8a8>
    ce30:	90c7c83a 	sub	r3,r18,r3
    ce34:	1023883a 	mov	r17,r2
    ce38:	003f5206 	br	cb84 <__alt_data_end+0xff00cb84>
    ce3c:	923f0436 	bltu	r18,r8,ca50 <__alt_data_end+0xff00ca50>
    ce40:	800897fa 	slli	r4,r16,31
    ce44:	9004d07a 	srli	r2,r18,1
    ce48:	8006d07a 	srli	r3,r16,1
    ce4c:	902097fa 	slli	r16,r18,31
    ce50:	20a4b03a 	or	r18,r4,r2
    ce54:	003f0106 	br	ca5c <__alt_data_end+0xff00ca5c>
    ce58:	e4bff51e 	bne	fp,r18,ce30 <__alt_data_end+0xff00ce30>
    ce5c:	85bff22e 	bgeu	r16,r22,ce28 <__alt_data_end+0xff00ce28>
    ce60:	e0c7c83a 	sub	r3,fp,r3
    ce64:	1023883a 	mov	r17,r2
    ce68:	003f4606 	br	cb84 <__alt_data_end+0xff00cb84>
    ce6c:	100f883a 	mov	r7,r2
    ce70:	003f2b06 	br	cb20 <__alt_data_end+0xff00cb20>
    ce74:	180d883a 	mov	r6,r3
    ce78:	003f1306 	br	cac8 <__alt_data_end+0xff00cac8>
    ce7c:	813fe436 	bltu	r16,r4,ce10 <__alt_data_end+0xff00ce10>
    ce80:	0007883a 	mov	r3,zero
    ce84:	003f3f06 	br	cb84 <__alt_data_end+0xff00cb84>
    ce88:	ba402c36 	bltu	r23,r9,cf3c <__divdf3+0x810>
    ce8c:	4dc05426 	beq	r9,r23,cfe0 <__divdf3+0x8b4>
    ce90:	1011883a 	mov	r8,r2
    ce94:	003f8906 	br	ccbc <__alt_data_end+0xff00ccbc>
    ce98:	023fffc4 	movi	r8,-1
    ce9c:	003f8806 	br	ccc0 <__alt_data_end+0xff00ccc0>
    cea0:	1811883a 	mov	r8,r3
    cea4:	003f5406 	br	cbf8 <__alt_data_end+0xff00cbf8>
    cea8:	1025883a 	mov	r18,r2
    ceac:	003f6d06 	br	cc64 <__alt_data_end+0xff00cc64>
    ceb0:	b827883a 	mov	r19,r23
    ceb4:	003f8206 	br	ccc0 <__alt_data_end+0xff00ccc0>
    ceb8:	010007c4 	movi	r4,31
    cebc:	20c02616 	blt	r4,r3,cf58 <__divdf3+0x82c>
    cec0:	00800804 	movi	r2,32
    cec4:	10c5c83a 	sub	r2,r2,r3
    cec8:	888a983a 	sll	r5,r17,r2
    cecc:	40c8d83a 	srl	r4,r8,r3
    ced0:	4084983a 	sll	r2,r8,r2
    ced4:	88e2d83a 	srl	r17,r17,r3
    ced8:	2906b03a 	or	r3,r5,r4
    cedc:	1004c03a 	cmpne	r2,r2,zero
    cee0:	1886b03a 	or	r3,r3,r2
    cee4:	188001cc 	andi	r2,r3,7
    cee8:	10000726 	beq	r2,zero,cf08 <__divdf3+0x7dc>
    ceec:	188003cc 	andi	r2,r3,15
    cef0:	01000104 	movi	r4,4
    cef4:	11000426 	beq	r2,r4,cf08 <__divdf3+0x7dc>
    cef8:	1805883a 	mov	r2,r3
    cefc:	10c00104 	addi	r3,r2,4
    cf00:	1885803a 	cmpltu	r2,r3,r2
    cf04:	88a3883a 	add	r17,r17,r2
    cf08:	8880202c 	andhi	r2,r17,128
    cf0c:	10002726 	beq	r2,zero,cfac <__divdf3+0x880>
    cf10:	98c0004c 	andi	r3,r19,1
    cf14:	00800044 	movi	r2,1
    cf18:	000b883a 	mov	r5,zero
    cf1c:	0025883a 	mov	r18,zero
    cf20:	003e6106 	br	c8a8 <__alt_data_end+0xff00c8a8>
    cf24:	85a1883a 	add	r16,r16,r22
    cf28:	8585803a 	cmpltu	r2,r16,r22
    cf2c:	1705883a 	add	r2,r2,fp
    cf30:	14a5883a 	add	r18,r2,r18
    cf34:	8c7fff84 	addi	r17,r17,-2
    cf38:	003f1106 	br	cb80 <__alt_data_end+0xff00cb80>
    cf3c:	b589883a 	add	r4,r22,r22
    cf40:	25ad803a 	cmpltu	r22,r4,r22
    cf44:	b739883a 	add	fp,r22,fp
    cf48:	40bfff84 	addi	r2,r8,-2
    cf4c:	bf2f883a 	add	r23,r23,fp
    cf50:	202d883a 	mov	r22,r4
    cf54:	003f9306 	br	cda4 <__alt_data_end+0xff00cda4>
    cf58:	013ff844 	movi	r4,-31
    cf5c:	2085c83a 	sub	r2,r4,r2
    cf60:	8888d83a 	srl	r4,r17,r2
    cf64:	00800804 	movi	r2,32
    cf68:	18802126 	beq	r3,r2,cff0 <__divdf3+0x8c4>
    cf6c:	00801004 	movi	r2,64
    cf70:	10c5c83a 	sub	r2,r2,r3
    cf74:	8884983a 	sll	r2,r17,r2
    cf78:	1204b03a 	or	r2,r2,r8
    cf7c:	1004c03a 	cmpne	r2,r2,zero
    cf80:	2084b03a 	or	r2,r4,r2
    cf84:	144001cc 	andi	r17,r2,7
    cf88:	88000d1e 	bne	r17,zero,cfc0 <__divdf3+0x894>
    cf8c:	000b883a 	mov	r5,zero
    cf90:	1024d0fa 	srli	r18,r2,3
    cf94:	98c0004c 	andi	r3,r19,1
    cf98:	0005883a 	mov	r2,zero
    cf9c:	9464b03a 	or	r18,r18,r17
    cfa0:	003e4106 	br	c8a8 <__alt_data_end+0xff00c8a8>
    cfa4:	1007883a 	mov	r3,r2
    cfa8:	0023883a 	mov	r17,zero
    cfac:	880a927a 	slli	r5,r17,9
    cfb0:	1805883a 	mov	r2,r3
    cfb4:	8822977a 	slli	r17,r17,29
    cfb8:	280ad33a 	srli	r5,r5,12
    cfbc:	003ff406 	br	cf90 <__alt_data_end+0xff00cf90>
    cfc0:	10c003cc 	andi	r3,r2,15
    cfc4:	01000104 	movi	r4,4
    cfc8:	193ff626 	beq	r3,r4,cfa4 <__alt_data_end+0xff00cfa4>
    cfcc:	0023883a 	mov	r17,zero
    cfd0:	003fca06 	br	cefc <__alt_data_end+0xff00cefc>
    cfd4:	813fd336 	bltu	r16,r4,cf24 <__alt_data_end+0xff00cf24>
    cfd8:	1023883a 	mov	r17,r2
    cfdc:	003fa806 	br	ce80 <__alt_data_end+0xff00ce80>
    cfe0:	b0ffd636 	bltu	r22,r3,cf3c <__alt_data_end+0xff00cf3c>
    cfe4:	1011883a 	mov	r8,r2
    cfe8:	b0ff341e 	bne	r22,r3,ccbc <__alt_data_end+0xff00ccbc>
    cfec:	003f3406 	br	ccc0 <__alt_data_end+0xff00ccc0>
    cff0:	0005883a 	mov	r2,zero
    cff4:	003fe006 	br	cf78 <__alt_data_end+0xff00cf78>
    cff8:	00800434 	movhi	r2,16
    cffc:	89400234 	orhi	r5,r17,8
    d000:	10bfffc4 	addi	r2,r2,-1
    d004:	b807883a 	mov	r3,r23
    d008:	288a703a 	and	r5,r5,r2
    d00c:	4025883a 	mov	r18,r8
    d010:	003e8206 	br	ca1c <__alt_data_end+0xff00ca1c>

0000d014 <__eqdf2>:
    d014:	2804d53a 	srli	r2,r5,20
    d018:	3806d53a 	srli	r3,r7,20
    d01c:	02000434 	movhi	r8,16
    d020:	423fffc4 	addi	r8,r8,-1
    d024:	1081ffcc 	andi	r2,r2,2047
    d028:	0281ffc4 	movi	r10,2047
    d02c:	2a12703a 	and	r9,r5,r8
    d030:	18c1ffcc 	andi	r3,r3,2047
    d034:	3a10703a 	and	r8,r7,r8
    d038:	280ad7fa 	srli	r5,r5,31
    d03c:	380ed7fa 	srli	r7,r7,31
    d040:	12801026 	beq	r2,r10,d084 <__eqdf2+0x70>
    d044:	0281ffc4 	movi	r10,2047
    d048:	1a800a26 	beq	r3,r10,d074 <__eqdf2+0x60>
    d04c:	10c00226 	beq	r2,r3,d058 <__eqdf2+0x44>
    d050:	00800044 	movi	r2,1
    d054:	f800283a 	ret
    d058:	4a3ffd1e 	bne	r9,r8,d050 <__alt_data_end+0xff00d050>
    d05c:	21bffc1e 	bne	r4,r6,d050 <__alt_data_end+0xff00d050>
    d060:	29c00c26 	beq	r5,r7,d094 <__eqdf2+0x80>
    d064:	103ffa1e 	bne	r2,zero,d050 <__alt_data_end+0xff00d050>
    d068:	2244b03a 	or	r2,r4,r9
    d06c:	1004c03a 	cmpne	r2,r2,zero
    d070:	f800283a 	ret
    d074:	3214b03a 	or	r10,r6,r8
    d078:	503ff426 	beq	r10,zero,d04c <__alt_data_end+0xff00d04c>
    d07c:	00800044 	movi	r2,1
    d080:	f800283a 	ret
    d084:	2254b03a 	or	r10,r4,r9
    d088:	503fee26 	beq	r10,zero,d044 <__alt_data_end+0xff00d044>
    d08c:	00800044 	movi	r2,1
    d090:	f800283a 	ret
    d094:	0005883a 	mov	r2,zero
    d098:	f800283a 	ret

0000d09c <__gedf2>:
    d09c:	2804d53a 	srli	r2,r5,20
    d0a0:	3806d53a 	srli	r3,r7,20
    d0a4:	02000434 	movhi	r8,16
    d0a8:	423fffc4 	addi	r8,r8,-1
    d0ac:	1081ffcc 	andi	r2,r2,2047
    d0b0:	0241ffc4 	movi	r9,2047
    d0b4:	2a14703a 	and	r10,r5,r8
    d0b8:	18c1ffcc 	andi	r3,r3,2047
    d0bc:	3a10703a 	and	r8,r7,r8
    d0c0:	280ad7fa 	srli	r5,r5,31
    d0c4:	380ed7fa 	srli	r7,r7,31
    d0c8:	12401d26 	beq	r2,r9,d140 <__gedf2+0xa4>
    d0cc:	0241ffc4 	movi	r9,2047
    d0d0:	1a401226 	beq	r3,r9,d11c <__gedf2+0x80>
    d0d4:	1000081e 	bne	r2,zero,d0f8 <__gedf2+0x5c>
    d0d8:	2296b03a 	or	r11,r4,r10
    d0dc:	5813003a 	cmpeq	r9,r11,zero
    d0e0:	1800091e 	bne	r3,zero,d108 <__gedf2+0x6c>
    d0e4:	3218b03a 	or	r12,r6,r8
    d0e8:	6000071e 	bne	r12,zero,d108 <__gedf2+0x6c>
    d0ec:	0005883a 	mov	r2,zero
    d0f0:	5800101e 	bne	r11,zero,d134 <__gedf2+0x98>
    d0f4:	f800283a 	ret
    d0f8:	18000c1e 	bne	r3,zero,d12c <__gedf2+0x90>
    d0fc:	3212b03a 	or	r9,r6,r8
    d100:	48000c26 	beq	r9,zero,d134 <__gedf2+0x98>
    d104:	0013883a 	mov	r9,zero
    d108:	39c03fcc 	andi	r7,r7,255
    d10c:	48000826 	beq	r9,zero,d130 <__gedf2+0x94>
    d110:	38000926 	beq	r7,zero,d138 <__gedf2+0x9c>
    d114:	00800044 	movi	r2,1
    d118:	f800283a 	ret
    d11c:	3212b03a 	or	r9,r6,r8
    d120:	483fec26 	beq	r9,zero,d0d4 <__alt_data_end+0xff00d0d4>
    d124:	00bfff84 	movi	r2,-2
    d128:	f800283a 	ret
    d12c:	39c03fcc 	andi	r7,r7,255
    d130:	29c00626 	beq	r5,r7,d14c <__gedf2+0xb0>
    d134:	283ff726 	beq	r5,zero,d114 <__alt_data_end+0xff00d114>
    d138:	00bfffc4 	movi	r2,-1
    d13c:	f800283a 	ret
    d140:	2292b03a 	or	r9,r4,r10
    d144:	483fe126 	beq	r9,zero,d0cc <__alt_data_end+0xff00d0cc>
    d148:	003ff606 	br	d124 <__alt_data_end+0xff00d124>
    d14c:	18bff916 	blt	r3,r2,d134 <__alt_data_end+0xff00d134>
    d150:	10c00316 	blt	r2,r3,d160 <__gedf2+0xc4>
    d154:	42bff736 	bltu	r8,r10,d134 <__alt_data_end+0xff00d134>
    d158:	52000326 	beq	r10,r8,d168 <__gedf2+0xcc>
    d15c:	5200042e 	bgeu	r10,r8,d170 <__gedf2+0xd4>
    d160:	283fec1e 	bne	r5,zero,d114 <__alt_data_end+0xff00d114>
    d164:	003ff406 	br	d138 <__alt_data_end+0xff00d138>
    d168:	313ff236 	bltu	r6,r4,d134 <__alt_data_end+0xff00d134>
    d16c:	21bffc36 	bltu	r4,r6,d160 <__alt_data_end+0xff00d160>
    d170:	0005883a 	mov	r2,zero
    d174:	f800283a 	ret

0000d178 <__ledf2>:
    d178:	2804d53a 	srli	r2,r5,20
    d17c:	3810d53a 	srli	r8,r7,20
    d180:	00c00434 	movhi	r3,16
    d184:	18ffffc4 	addi	r3,r3,-1
    d188:	1081ffcc 	andi	r2,r2,2047
    d18c:	0241ffc4 	movi	r9,2047
    d190:	28d4703a 	and	r10,r5,r3
    d194:	4201ffcc 	andi	r8,r8,2047
    d198:	38c6703a 	and	r3,r7,r3
    d19c:	280ad7fa 	srli	r5,r5,31
    d1a0:	380ed7fa 	srli	r7,r7,31
    d1a4:	12401f26 	beq	r2,r9,d224 <__ledf2+0xac>
    d1a8:	0241ffc4 	movi	r9,2047
    d1ac:	42401426 	beq	r8,r9,d200 <__ledf2+0x88>
    d1b0:	1000091e 	bne	r2,zero,d1d8 <__ledf2+0x60>
    d1b4:	2296b03a 	or	r11,r4,r10
    d1b8:	5813003a 	cmpeq	r9,r11,zero
    d1bc:	29403fcc 	andi	r5,r5,255
    d1c0:	40000a1e 	bne	r8,zero,d1ec <__ledf2+0x74>
    d1c4:	30d8b03a 	or	r12,r6,r3
    d1c8:	6000081e 	bne	r12,zero,d1ec <__ledf2+0x74>
    d1cc:	0005883a 	mov	r2,zero
    d1d0:	5800111e 	bne	r11,zero,d218 <__ledf2+0xa0>
    d1d4:	f800283a 	ret
    d1d8:	29403fcc 	andi	r5,r5,255
    d1dc:	40000c1e 	bne	r8,zero,d210 <__ledf2+0x98>
    d1e0:	30d2b03a 	or	r9,r6,r3
    d1e4:	48000c26 	beq	r9,zero,d218 <__ledf2+0xa0>
    d1e8:	0013883a 	mov	r9,zero
    d1ec:	39c03fcc 	andi	r7,r7,255
    d1f0:	48000826 	beq	r9,zero,d214 <__ledf2+0x9c>
    d1f4:	38001126 	beq	r7,zero,d23c <__ledf2+0xc4>
    d1f8:	00800044 	movi	r2,1
    d1fc:	f800283a 	ret
    d200:	30d2b03a 	or	r9,r6,r3
    d204:	483fea26 	beq	r9,zero,d1b0 <__alt_data_end+0xff00d1b0>
    d208:	00800084 	movi	r2,2
    d20c:	f800283a 	ret
    d210:	39c03fcc 	andi	r7,r7,255
    d214:	39400726 	beq	r7,r5,d234 <__ledf2+0xbc>
    d218:	2800081e 	bne	r5,zero,d23c <__ledf2+0xc4>
    d21c:	00800044 	movi	r2,1
    d220:	f800283a 	ret
    d224:	2292b03a 	or	r9,r4,r10
    d228:	483fdf26 	beq	r9,zero,d1a8 <__alt_data_end+0xff00d1a8>
    d22c:	00800084 	movi	r2,2
    d230:	f800283a 	ret
    d234:	4080030e 	bge	r8,r2,d244 <__ledf2+0xcc>
    d238:	383fef26 	beq	r7,zero,d1f8 <__alt_data_end+0xff00d1f8>
    d23c:	00bfffc4 	movi	r2,-1
    d240:	f800283a 	ret
    d244:	123feb16 	blt	r2,r8,d1f4 <__alt_data_end+0xff00d1f4>
    d248:	1abff336 	bltu	r3,r10,d218 <__alt_data_end+0xff00d218>
    d24c:	50c00326 	beq	r10,r3,d25c <__ledf2+0xe4>
    d250:	50c0042e 	bgeu	r10,r3,d264 <__ledf2+0xec>
    d254:	283fe81e 	bne	r5,zero,d1f8 <__alt_data_end+0xff00d1f8>
    d258:	003ff806 	br	d23c <__alt_data_end+0xff00d23c>
    d25c:	313fee36 	bltu	r6,r4,d218 <__alt_data_end+0xff00d218>
    d260:	21bffc36 	bltu	r4,r6,d254 <__alt_data_end+0xff00d254>
    d264:	0005883a 	mov	r2,zero
    d268:	f800283a 	ret

0000d26c <__muldf3>:
    d26c:	defff304 	addi	sp,sp,-52
    d270:	2804d53a 	srli	r2,r5,20
    d274:	dd800915 	stw	r22,36(sp)
    d278:	282cd7fa 	srli	r22,r5,31
    d27c:	dc000315 	stw	r16,12(sp)
    d280:	04000434 	movhi	r16,16
    d284:	dd400815 	stw	r21,32(sp)
    d288:	dc800515 	stw	r18,20(sp)
    d28c:	843fffc4 	addi	r16,r16,-1
    d290:	dfc00c15 	stw	ra,48(sp)
    d294:	df000b15 	stw	fp,44(sp)
    d298:	ddc00a15 	stw	r23,40(sp)
    d29c:	dd000715 	stw	r20,28(sp)
    d2a0:	dcc00615 	stw	r19,24(sp)
    d2a4:	dc400415 	stw	r17,16(sp)
    d2a8:	1481ffcc 	andi	r18,r2,2047
    d2ac:	2c20703a 	and	r16,r5,r16
    d2b0:	b02b883a 	mov	r21,r22
    d2b4:	b2403fcc 	andi	r9,r22,255
    d2b8:	90006026 	beq	r18,zero,d43c <__muldf3+0x1d0>
    d2bc:	0081ffc4 	movi	r2,2047
    d2c0:	2029883a 	mov	r20,r4
    d2c4:	90803626 	beq	r18,r2,d3a0 <__muldf3+0x134>
    d2c8:	80800434 	orhi	r2,r16,16
    d2cc:	100490fa 	slli	r2,r2,3
    d2d0:	2020d77a 	srli	r16,r4,29
    d2d4:	202890fa 	slli	r20,r4,3
    d2d8:	94bf0044 	addi	r18,r18,-1023
    d2dc:	80a0b03a 	or	r16,r16,r2
    d2e0:	0027883a 	mov	r19,zero
    d2e4:	0039883a 	mov	fp,zero
    d2e8:	3804d53a 	srli	r2,r7,20
    d2ec:	382ed7fa 	srli	r23,r7,31
    d2f0:	04400434 	movhi	r17,16
    d2f4:	8c7fffc4 	addi	r17,r17,-1
    d2f8:	1081ffcc 	andi	r2,r2,2047
    d2fc:	3011883a 	mov	r8,r6
    d300:	3c62703a 	and	r17,r7,r17
    d304:	ba803fcc 	andi	r10,r23,255
    d308:	10006d26 	beq	r2,zero,d4c0 <__muldf3+0x254>
    d30c:	00c1ffc4 	movi	r3,2047
    d310:	10c06526 	beq	r2,r3,d4a8 <__muldf3+0x23c>
    d314:	88c00434 	orhi	r3,r17,16
    d318:	180690fa 	slli	r3,r3,3
    d31c:	3022d77a 	srli	r17,r6,29
    d320:	301090fa 	slli	r8,r6,3
    d324:	10bf0044 	addi	r2,r2,-1023
    d328:	88e2b03a 	or	r17,r17,r3
    d32c:	000b883a 	mov	r5,zero
    d330:	9085883a 	add	r2,r18,r2
    d334:	2cc8b03a 	or	r4,r5,r19
    d338:	00c003c4 	movi	r3,15
    d33c:	bdacf03a 	xor	r22,r23,r22
    d340:	12c00044 	addi	r11,r2,1
    d344:	19009936 	bltu	r3,r4,d5ac <__muldf3+0x340>
    d348:	200890ba 	slli	r4,r4,2
    d34c:	00c00074 	movhi	r3,1
    d350:	18f4d804 	addi	r3,r3,-11424
    d354:	20c9883a 	add	r4,r4,r3
    d358:	20c00017 	ldw	r3,0(r4)
    d35c:	1800683a 	jmp	r3
    d360:	0000d5ac 	andhi	zero,zero,854
    d364:	0000d3c0 	call	d3c <init_LCD+0x404>
    d368:	0000d3c0 	call	d3c <init_LCD+0x404>
    d36c:	0000d3bc 	xorhi	zero,zero,846
    d370:	0000d588 	cmpgei	zero,zero,854
    d374:	0000d588 	cmpgei	zero,zero,854
    d378:	0000d570 	cmpltui	zero,zero,853
    d37c:	0000d3bc 	xorhi	zero,zero,846
    d380:	0000d588 	cmpgei	zero,zero,854
    d384:	0000d570 	cmpltui	zero,zero,853
    d388:	0000d588 	cmpgei	zero,zero,854
    d38c:	0000d3bc 	xorhi	zero,zero,846
    d390:	0000d598 	cmpnei	zero,zero,854
    d394:	0000d598 	cmpnei	zero,zero,854
    d398:	0000d598 	cmpnei	zero,zero,854
    d39c:	0000d7b4 	movhi	zero,862
    d3a0:	2404b03a 	or	r2,r4,r16
    d3a4:	10006f1e 	bne	r2,zero,d564 <__muldf3+0x2f8>
    d3a8:	04c00204 	movi	r19,8
    d3ac:	0021883a 	mov	r16,zero
    d3b0:	0029883a 	mov	r20,zero
    d3b4:	07000084 	movi	fp,2
    d3b8:	003fcb06 	br	d2e8 <__alt_data_end+0xff00d2e8>
    d3bc:	502d883a 	mov	r22,r10
    d3c0:	00800084 	movi	r2,2
    d3c4:	28805726 	beq	r5,r2,d524 <__muldf3+0x2b8>
    d3c8:	008000c4 	movi	r2,3
    d3cc:	28816626 	beq	r5,r2,d968 <__muldf3+0x6fc>
    d3d0:	00800044 	movi	r2,1
    d3d4:	2881411e 	bne	r5,r2,d8dc <__muldf3+0x670>
    d3d8:	b02b883a 	mov	r21,r22
    d3dc:	0005883a 	mov	r2,zero
    d3e0:	000b883a 	mov	r5,zero
    d3e4:	0029883a 	mov	r20,zero
    d3e8:	1004953a 	slli	r2,r2,20
    d3ec:	a8c03fcc 	andi	r3,r21,255
    d3f0:	04400434 	movhi	r17,16
    d3f4:	8c7fffc4 	addi	r17,r17,-1
    d3f8:	180697fa 	slli	r3,r3,31
    d3fc:	2c4a703a 	and	r5,r5,r17
    d400:	288ab03a 	or	r5,r5,r2
    d404:	28c6b03a 	or	r3,r5,r3
    d408:	a005883a 	mov	r2,r20
    d40c:	dfc00c17 	ldw	ra,48(sp)
    d410:	df000b17 	ldw	fp,44(sp)
    d414:	ddc00a17 	ldw	r23,40(sp)
    d418:	dd800917 	ldw	r22,36(sp)
    d41c:	dd400817 	ldw	r21,32(sp)
    d420:	dd000717 	ldw	r20,28(sp)
    d424:	dcc00617 	ldw	r19,24(sp)
    d428:	dc800517 	ldw	r18,20(sp)
    d42c:	dc400417 	ldw	r17,16(sp)
    d430:	dc000317 	ldw	r16,12(sp)
    d434:	dec00d04 	addi	sp,sp,52
    d438:	f800283a 	ret
    d43c:	2404b03a 	or	r2,r4,r16
    d440:	2027883a 	mov	r19,r4
    d444:	10004226 	beq	r2,zero,d550 <__muldf3+0x2e4>
    d448:	8000fc26 	beq	r16,zero,d83c <__muldf3+0x5d0>
    d44c:	8009883a 	mov	r4,r16
    d450:	d9800215 	stw	r6,8(sp)
    d454:	d9c00015 	stw	r7,0(sp)
    d458:	da400115 	stw	r9,4(sp)
    d45c:	000e4840 	call	e484 <__clzsi2>
    d460:	d9800217 	ldw	r6,8(sp)
    d464:	d9c00017 	ldw	r7,0(sp)
    d468:	da400117 	ldw	r9,4(sp)
    d46c:	113ffd44 	addi	r4,r2,-11
    d470:	00c00704 	movi	r3,28
    d474:	1900ed16 	blt	r3,r4,d82c <__muldf3+0x5c0>
    d478:	00c00744 	movi	r3,29
    d47c:	147ffe04 	addi	r17,r2,-8
    d480:	1907c83a 	sub	r3,r3,r4
    d484:	8460983a 	sll	r16,r16,r17
    d488:	98c6d83a 	srl	r3,r19,r3
    d48c:	9c68983a 	sll	r20,r19,r17
    d490:	1c20b03a 	or	r16,r3,r16
    d494:	1080fcc4 	addi	r2,r2,1011
    d498:	00a5c83a 	sub	r18,zero,r2
    d49c:	0027883a 	mov	r19,zero
    d4a0:	0039883a 	mov	fp,zero
    d4a4:	003f9006 	br	d2e8 <__alt_data_end+0xff00d2e8>
    d4a8:	3446b03a 	or	r3,r6,r17
    d4ac:	1800261e 	bne	r3,zero,d548 <__muldf3+0x2dc>
    d4b0:	0023883a 	mov	r17,zero
    d4b4:	0011883a 	mov	r8,zero
    d4b8:	01400084 	movi	r5,2
    d4bc:	003f9c06 	br	d330 <__alt_data_end+0xff00d330>
    d4c0:	3446b03a 	or	r3,r6,r17
    d4c4:	18001c26 	beq	r3,zero,d538 <__muldf3+0x2cc>
    d4c8:	8800ce26 	beq	r17,zero,d804 <__muldf3+0x598>
    d4cc:	8809883a 	mov	r4,r17
    d4d0:	d9800215 	stw	r6,8(sp)
    d4d4:	da400115 	stw	r9,4(sp)
    d4d8:	da800015 	stw	r10,0(sp)
    d4dc:	000e4840 	call	e484 <__clzsi2>
    d4e0:	d9800217 	ldw	r6,8(sp)
    d4e4:	da400117 	ldw	r9,4(sp)
    d4e8:	da800017 	ldw	r10,0(sp)
    d4ec:	113ffd44 	addi	r4,r2,-11
    d4f0:	00c00704 	movi	r3,28
    d4f4:	1900bf16 	blt	r3,r4,d7f4 <__muldf3+0x588>
    d4f8:	00c00744 	movi	r3,29
    d4fc:	123ffe04 	addi	r8,r2,-8
    d500:	1907c83a 	sub	r3,r3,r4
    d504:	8a22983a 	sll	r17,r17,r8
    d508:	30c6d83a 	srl	r3,r6,r3
    d50c:	3210983a 	sll	r8,r6,r8
    d510:	1c62b03a 	or	r17,r3,r17
    d514:	1080fcc4 	addi	r2,r2,1011
    d518:	0085c83a 	sub	r2,zero,r2
    d51c:	000b883a 	mov	r5,zero
    d520:	003f8306 	br	d330 <__alt_data_end+0xff00d330>
    d524:	b02b883a 	mov	r21,r22
    d528:	0081ffc4 	movi	r2,2047
    d52c:	000b883a 	mov	r5,zero
    d530:	0029883a 	mov	r20,zero
    d534:	003fac06 	br	d3e8 <__alt_data_end+0xff00d3e8>
    d538:	0023883a 	mov	r17,zero
    d53c:	0011883a 	mov	r8,zero
    d540:	01400044 	movi	r5,1
    d544:	003f7a06 	br	d330 <__alt_data_end+0xff00d330>
    d548:	014000c4 	movi	r5,3
    d54c:	003f7806 	br	d330 <__alt_data_end+0xff00d330>
    d550:	04c00104 	movi	r19,4
    d554:	0021883a 	mov	r16,zero
    d558:	0029883a 	mov	r20,zero
    d55c:	07000044 	movi	fp,1
    d560:	003f6106 	br	d2e8 <__alt_data_end+0xff00d2e8>
    d564:	04c00304 	movi	r19,12
    d568:	070000c4 	movi	fp,3
    d56c:	003f5e06 	br	d2e8 <__alt_data_end+0xff00d2e8>
    d570:	01400434 	movhi	r5,16
    d574:	002b883a 	mov	r21,zero
    d578:	297fffc4 	addi	r5,r5,-1
    d57c:	053fffc4 	movi	r20,-1
    d580:	0081ffc4 	movi	r2,2047
    d584:	003f9806 	br	d3e8 <__alt_data_end+0xff00d3e8>
    d588:	8023883a 	mov	r17,r16
    d58c:	a011883a 	mov	r8,r20
    d590:	e00b883a 	mov	r5,fp
    d594:	003f8a06 	br	d3c0 <__alt_data_end+0xff00d3c0>
    d598:	8023883a 	mov	r17,r16
    d59c:	a011883a 	mov	r8,r20
    d5a0:	482d883a 	mov	r22,r9
    d5a4:	e00b883a 	mov	r5,fp
    d5a8:	003f8506 	br	d3c0 <__alt_data_end+0xff00d3c0>
    d5ac:	a00ad43a 	srli	r5,r20,16
    d5b0:	401ad43a 	srli	r13,r8,16
    d5b4:	a53fffcc 	andi	r20,r20,65535
    d5b8:	423fffcc 	andi	r8,r8,65535
    d5bc:	4519383a 	mul	r12,r8,r20
    d5c0:	4147383a 	mul	r3,r8,r5
    d5c4:	6d09383a 	mul	r4,r13,r20
    d5c8:	600cd43a 	srli	r6,r12,16
    d5cc:	2b5d383a 	mul	r14,r5,r13
    d5d0:	20c9883a 	add	r4,r4,r3
    d5d4:	310d883a 	add	r6,r6,r4
    d5d8:	30c0022e 	bgeu	r6,r3,d5e4 <__muldf3+0x378>
    d5dc:	00c00074 	movhi	r3,1
    d5e0:	70dd883a 	add	r14,r14,r3
    d5e4:	8826d43a 	srli	r19,r17,16
    d5e8:	8bffffcc 	andi	r15,r17,65535
    d5ec:	7d23383a 	mul	r17,r15,r20
    d5f0:	7949383a 	mul	r4,r15,r5
    d5f4:	9d29383a 	mul	r20,r19,r20
    d5f8:	8814d43a 	srli	r10,r17,16
    d5fc:	3012943a 	slli	r9,r6,16
    d600:	a129883a 	add	r20,r20,r4
    d604:	633fffcc 	andi	r12,r12,65535
    d608:	5515883a 	add	r10,r10,r20
    d60c:	3006d43a 	srli	r3,r6,16
    d610:	4b13883a 	add	r9,r9,r12
    d614:	2ccb383a 	mul	r5,r5,r19
    d618:	5100022e 	bgeu	r10,r4,d624 <__muldf3+0x3b8>
    d61c:	01000074 	movhi	r4,1
    d620:	290b883a 	add	r5,r5,r4
    d624:	802ad43a 	srli	r21,r16,16
    d628:	843fffcc 	andi	r16,r16,65535
    d62c:	440d383a 	mul	r6,r8,r16
    d630:	4565383a 	mul	r18,r8,r21
    d634:	8349383a 	mul	r4,r16,r13
    d638:	500e943a 	slli	r7,r10,16
    d63c:	3010d43a 	srli	r8,r6,16
    d640:	5028d43a 	srli	r20,r10,16
    d644:	2489883a 	add	r4,r4,r18
    d648:	8abfffcc 	andi	r10,r17,65535
    d64c:	3a95883a 	add	r10,r7,r10
    d650:	4119883a 	add	r12,r8,r4
    d654:	a169883a 	add	r20,r20,r5
    d658:	1a87883a 	add	r3,r3,r10
    d65c:	6d5b383a 	mul	r13,r13,r21
    d660:	6480022e 	bgeu	r12,r18,d66c <__muldf3+0x400>
    d664:	01000074 	movhi	r4,1
    d668:	691b883a 	add	r13,r13,r4
    d66c:	7c25383a 	mul	r18,r15,r16
    d670:	7d4b383a 	mul	r5,r15,r21
    d674:	84cf383a 	mul	r7,r16,r19
    d678:	901ed43a 	srli	r15,r18,16
    d67c:	6008d43a 	srli	r4,r12,16
    d680:	6010943a 	slli	r8,r12,16
    d684:	394f883a 	add	r7,r7,r5
    d688:	333fffcc 	andi	r12,r6,65535
    d68c:	79df883a 	add	r15,r15,r7
    d690:	235b883a 	add	r13,r4,r13
    d694:	9d63383a 	mul	r17,r19,r21
    d698:	4309883a 	add	r4,r8,r12
    d69c:	7940022e 	bgeu	r15,r5,d6a8 <__muldf3+0x43c>
    d6a0:	01400074 	movhi	r5,1
    d6a4:	8963883a 	add	r17,r17,r5
    d6a8:	780a943a 	slli	r5,r15,16
    d6ac:	91bfffcc 	andi	r6,r18,65535
    d6b0:	70c7883a 	add	r3,r14,r3
    d6b4:	298d883a 	add	r6,r5,r6
    d6b8:	1a8f803a 	cmpltu	r7,r3,r10
    d6bc:	350b883a 	add	r5,r6,r20
    d6c0:	20c7883a 	add	r3,r4,r3
    d6c4:	3955883a 	add	r10,r7,r5
    d6c8:	1909803a 	cmpltu	r4,r3,r4
    d6cc:	6a91883a 	add	r8,r13,r10
    d6d0:	780cd43a 	srli	r6,r15,16
    d6d4:	2219883a 	add	r12,r4,r8
    d6d8:	2d0b803a 	cmpltu	r5,r5,r20
    d6dc:	51cf803a 	cmpltu	r7,r10,r7
    d6e0:	29ceb03a 	or	r7,r5,r7
    d6e4:	4351803a 	cmpltu	r8,r8,r13
    d6e8:	610b803a 	cmpltu	r5,r12,r4
    d6ec:	4148b03a 	or	r4,r8,r5
    d6f0:	398f883a 	add	r7,r7,r6
    d6f4:	3909883a 	add	r4,r7,r4
    d6f8:	1810927a 	slli	r8,r3,9
    d6fc:	2449883a 	add	r4,r4,r17
    d700:	2008927a 	slli	r4,r4,9
    d704:	6022d5fa 	srli	r17,r12,23
    d708:	1806d5fa 	srli	r3,r3,23
    d70c:	4252b03a 	or	r9,r8,r9
    d710:	600a927a 	slli	r5,r12,9
    d714:	4810c03a 	cmpne	r8,r9,zero
    d718:	2462b03a 	or	r17,r4,r17
    d71c:	40c6b03a 	or	r3,r8,r3
    d720:	8900402c 	andhi	r4,r17,256
    d724:	1950b03a 	or	r8,r3,r5
    d728:	20000726 	beq	r4,zero,d748 <__muldf3+0x4dc>
    d72c:	4006d07a 	srli	r3,r8,1
    d730:	880497fa 	slli	r2,r17,31
    d734:	4200004c 	andi	r8,r8,1
    d738:	8822d07a 	srli	r17,r17,1
    d73c:	1a10b03a 	or	r8,r3,r8
    d740:	1210b03a 	or	r8,r2,r8
    d744:	5805883a 	mov	r2,r11
    d748:	1140ffc4 	addi	r5,r2,1023
    d74c:	0140440e 	bge	zero,r5,d860 <__muldf3+0x5f4>
    d750:	40c001cc 	andi	r3,r8,7
    d754:	18000726 	beq	r3,zero,d774 <__muldf3+0x508>
    d758:	40c003cc 	andi	r3,r8,15
    d75c:	01000104 	movi	r4,4
    d760:	19000426 	beq	r3,r4,d774 <__muldf3+0x508>
    d764:	4107883a 	add	r3,r8,r4
    d768:	1a11803a 	cmpltu	r8,r3,r8
    d76c:	8a23883a 	add	r17,r17,r8
    d770:	1811883a 	mov	r8,r3
    d774:	88c0402c 	andhi	r3,r17,256
    d778:	18000426 	beq	r3,zero,d78c <__muldf3+0x520>
    d77c:	11410004 	addi	r5,r2,1024
    d780:	00bfc034 	movhi	r2,65280
    d784:	10bfffc4 	addi	r2,r2,-1
    d788:	88a2703a 	and	r17,r17,r2
    d78c:	0081ff84 	movi	r2,2046
    d790:	117f6416 	blt	r2,r5,d524 <__alt_data_end+0xff00d524>
    d794:	8828977a 	slli	r20,r17,29
    d798:	4010d0fa 	srli	r8,r8,3
    d79c:	8822927a 	slli	r17,r17,9
    d7a0:	2881ffcc 	andi	r2,r5,2047
    d7a4:	a228b03a 	or	r20,r20,r8
    d7a8:	880ad33a 	srli	r5,r17,12
    d7ac:	b02b883a 	mov	r21,r22
    d7b0:	003f0d06 	br	d3e8 <__alt_data_end+0xff00d3e8>
    d7b4:	8080022c 	andhi	r2,r16,8
    d7b8:	10000926 	beq	r2,zero,d7e0 <__muldf3+0x574>
    d7bc:	8880022c 	andhi	r2,r17,8
    d7c0:	1000071e 	bne	r2,zero,d7e0 <__muldf3+0x574>
    d7c4:	00800434 	movhi	r2,16
    d7c8:	89400234 	orhi	r5,r17,8
    d7cc:	10bfffc4 	addi	r2,r2,-1
    d7d0:	b82b883a 	mov	r21,r23
    d7d4:	288a703a 	and	r5,r5,r2
    d7d8:	4029883a 	mov	r20,r8
    d7dc:	003f6806 	br	d580 <__alt_data_end+0xff00d580>
    d7e0:	00800434 	movhi	r2,16
    d7e4:	81400234 	orhi	r5,r16,8
    d7e8:	10bfffc4 	addi	r2,r2,-1
    d7ec:	288a703a 	and	r5,r5,r2
    d7f0:	003f6306 	br	d580 <__alt_data_end+0xff00d580>
    d7f4:	147ff604 	addi	r17,r2,-40
    d7f8:	3462983a 	sll	r17,r6,r17
    d7fc:	0011883a 	mov	r8,zero
    d800:	003f4406 	br	d514 <__alt_data_end+0xff00d514>
    d804:	3009883a 	mov	r4,r6
    d808:	d9800215 	stw	r6,8(sp)
    d80c:	da400115 	stw	r9,4(sp)
    d810:	da800015 	stw	r10,0(sp)
    d814:	000e4840 	call	e484 <__clzsi2>
    d818:	10800804 	addi	r2,r2,32
    d81c:	da800017 	ldw	r10,0(sp)
    d820:	da400117 	ldw	r9,4(sp)
    d824:	d9800217 	ldw	r6,8(sp)
    d828:	003f3006 	br	d4ec <__alt_data_end+0xff00d4ec>
    d82c:	143ff604 	addi	r16,r2,-40
    d830:	9c20983a 	sll	r16,r19,r16
    d834:	0029883a 	mov	r20,zero
    d838:	003f1606 	br	d494 <__alt_data_end+0xff00d494>
    d83c:	d9800215 	stw	r6,8(sp)
    d840:	d9c00015 	stw	r7,0(sp)
    d844:	da400115 	stw	r9,4(sp)
    d848:	000e4840 	call	e484 <__clzsi2>
    d84c:	10800804 	addi	r2,r2,32
    d850:	da400117 	ldw	r9,4(sp)
    d854:	d9c00017 	ldw	r7,0(sp)
    d858:	d9800217 	ldw	r6,8(sp)
    d85c:	003f0306 	br	d46c <__alt_data_end+0xff00d46c>
    d860:	00c00044 	movi	r3,1
    d864:	1947c83a 	sub	r3,r3,r5
    d868:	00800e04 	movi	r2,56
    d86c:	10feda16 	blt	r2,r3,d3d8 <__alt_data_end+0xff00d3d8>
    d870:	008007c4 	movi	r2,31
    d874:	10c01b16 	blt	r2,r3,d8e4 <__muldf3+0x678>
    d878:	00800804 	movi	r2,32
    d87c:	10c5c83a 	sub	r2,r2,r3
    d880:	888a983a 	sll	r5,r17,r2
    d884:	40c8d83a 	srl	r4,r8,r3
    d888:	4084983a 	sll	r2,r8,r2
    d88c:	88e2d83a 	srl	r17,r17,r3
    d890:	2906b03a 	or	r3,r5,r4
    d894:	1004c03a 	cmpne	r2,r2,zero
    d898:	1886b03a 	or	r3,r3,r2
    d89c:	188001cc 	andi	r2,r3,7
    d8a0:	10000726 	beq	r2,zero,d8c0 <__muldf3+0x654>
    d8a4:	188003cc 	andi	r2,r3,15
    d8a8:	01000104 	movi	r4,4
    d8ac:	11000426 	beq	r2,r4,d8c0 <__muldf3+0x654>
    d8b0:	1805883a 	mov	r2,r3
    d8b4:	10c00104 	addi	r3,r2,4
    d8b8:	1885803a 	cmpltu	r2,r3,r2
    d8bc:	88a3883a 	add	r17,r17,r2
    d8c0:	8880202c 	andhi	r2,r17,128
    d8c4:	10001c26 	beq	r2,zero,d938 <__muldf3+0x6cc>
    d8c8:	b02b883a 	mov	r21,r22
    d8cc:	00800044 	movi	r2,1
    d8d0:	000b883a 	mov	r5,zero
    d8d4:	0029883a 	mov	r20,zero
    d8d8:	003ec306 	br	d3e8 <__alt_data_end+0xff00d3e8>
    d8dc:	5805883a 	mov	r2,r11
    d8e0:	003f9906 	br	d748 <__alt_data_end+0xff00d748>
    d8e4:	00bff844 	movi	r2,-31
    d8e8:	1145c83a 	sub	r2,r2,r5
    d8ec:	8888d83a 	srl	r4,r17,r2
    d8f0:	00800804 	movi	r2,32
    d8f4:	18801a26 	beq	r3,r2,d960 <__muldf3+0x6f4>
    d8f8:	00801004 	movi	r2,64
    d8fc:	10c5c83a 	sub	r2,r2,r3
    d900:	8884983a 	sll	r2,r17,r2
    d904:	1204b03a 	or	r2,r2,r8
    d908:	1004c03a 	cmpne	r2,r2,zero
    d90c:	2084b03a 	or	r2,r4,r2
    d910:	144001cc 	andi	r17,r2,7
    d914:	88000d1e 	bne	r17,zero,d94c <__muldf3+0x6e0>
    d918:	000b883a 	mov	r5,zero
    d91c:	1028d0fa 	srli	r20,r2,3
    d920:	b02b883a 	mov	r21,r22
    d924:	0005883a 	mov	r2,zero
    d928:	a468b03a 	or	r20,r20,r17
    d92c:	003eae06 	br	d3e8 <__alt_data_end+0xff00d3e8>
    d930:	1007883a 	mov	r3,r2
    d934:	0023883a 	mov	r17,zero
    d938:	880a927a 	slli	r5,r17,9
    d93c:	1805883a 	mov	r2,r3
    d940:	8822977a 	slli	r17,r17,29
    d944:	280ad33a 	srli	r5,r5,12
    d948:	003ff406 	br	d91c <__alt_data_end+0xff00d91c>
    d94c:	10c003cc 	andi	r3,r2,15
    d950:	01000104 	movi	r4,4
    d954:	193ff626 	beq	r3,r4,d930 <__alt_data_end+0xff00d930>
    d958:	0023883a 	mov	r17,zero
    d95c:	003fd506 	br	d8b4 <__alt_data_end+0xff00d8b4>
    d960:	0005883a 	mov	r2,zero
    d964:	003fe706 	br	d904 <__alt_data_end+0xff00d904>
    d968:	00800434 	movhi	r2,16
    d96c:	89400234 	orhi	r5,r17,8
    d970:	10bfffc4 	addi	r2,r2,-1
    d974:	b02b883a 	mov	r21,r22
    d978:	288a703a 	and	r5,r5,r2
    d97c:	4029883a 	mov	r20,r8
    d980:	003eff06 	br	d580 <__alt_data_end+0xff00d580>

0000d984 <__subdf3>:
    d984:	02000434 	movhi	r8,16
    d988:	423fffc4 	addi	r8,r8,-1
    d98c:	defffb04 	addi	sp,sp,-20
    d990:	2a14703a 	and	r10,r5,r8
    d994:	3812d53a 	srli	r9,r7,20
    d998:	3a10703a 	and	r8,r7,r8
    d99c:	2006d77a 	srli	r3,r4,29
    d9a0:	3004d77a 	srli	r2,r6,29
    d9a4:	dc000015 	stw	r16,0(sp)
    d9a8:	501490fa 	slli	r10,r10,3
    d9ac:	2820d53a 	srli	r16,r5,20
    d9b0:	401090fa 	slli	r8,r8,3
    d9b4:	dc800215 	stw	r18,8(sp)
    d9b8:	dc400115 	stw	r17,4(sp)
    d9bc:	dfc00415 	stw	ra,16(sp)
    d9c0:	202290fa 	slli	r17,r4,3
    d9c4:	dcc00315 	stw	r19,12(sp)
    d9c8:	4a41ffcc 	andi	r9,r9,2047
    d9cc:	0101ffc4 	movi	r4,2047
    d9d0:	2824d7fa 	srli	r18,r5,31
    d9d4:	8401ffcc 	andi	r16,r16,2047
    d9d8:	50c6b03a 	or	r3,r10,r3
    d9dc:	380ed7fa 	srli	r7,r7,31
    d9e0:	408ab03a 	or	r5,r8,r2
    d9e4:	300c90fa 	slli	r6,r6,3
    d9e8:	49009626 	beq	r9,r4,dc44 <__subdf3+0x2c0>
    d9ec:	39c0005c 	xori	r7,r7,1
    d9f0:	8245c83a 	sub	r2,r16,r9
    d9f4:	3c807426 	beq	r7,r18,dbc8 <__subdf3+0x244>
    d9f8:	0080af0e 	bge	zero,r2,dcb8 <__subdf3+0x334>
    d9fc:	48002a1e 	bne	r9,zero,daa8 <__subdf3+0x124>
    da00:	2988b03a 	or	r4,r5,r6
    da04:	20009a1e 	bne	r4,zero,dc70 <__subdf3+0x2ec>
    da08:	888001cc 	andi	r2,r17,7
    da0c:	10000726 	beq	r2,zero,da2c <__subdf3+0xa8>
    da10:	888003cc 	andi	r2,r17,15
    da14:	01000104 	movi	r4,4
    da18:	11000426 	beq	r2,r4,da2c <__subdf3+0xa8>
    da1c:	890b883a 	add	r5,r17,r4
    da20:	2c63803a 	cmpltu	r17,r5,r17
    da24:	1c47883a 	add	r3,r3,r17
    da28:	2823883a 	mov	r17,r5
    da2c:	1880202c 	andhi	r2,r3,128
    da30:	10005926 	beq	r2,zero,db98 <__subdf3+0x214>
    da34:	84000044 	addi	r16,r16,1
    da38:	0081ffc4 	movi	r2,2047
    da3c:	8080be26 	beq	r16,r2,dd38 <__subdf3+0x3b4>
    da40:	017fe034 	movhi	r5,65408
    da44:	297fffc4 	addi	r5,r5,-1
    da48:	1946703a 	and	r3,r3,r5
    da4c:	1804977a 	slli	r2,r3,29
    da50:	1806927a 	slli	r3,r3,9
    da54:	8822d0fa 	srli	r17,r17,3
    da58:	8401ffcc 	andi	r16,r16,2047
    da5c:	180ad33a 	srli	r5,r3,12
    da60:	9100004c 	andi	r4,r18,1
    da64:	1444b03a 	or	r2,r2,r17
    da68:	80c1ffcc 	andi	r3,r16,2047
    da6c:	1820953a 	slli	r16,r3,20
    da70:	20c03fcc 	andi	r3,r4,255
    da74:	180897fa 	slli	r4,r3,31
    da78:	00c00434 	movhi	r3,16
    da7c:	18ffffc4 	addi	r3,r3,-1
    da80:	28c6703a 	and	r3,r5,r3
    da84:	1c06b03a 	or	r3,r3,r16
    da88:	1906b03a 	or	r3,r3,r4
    da8c:	dfc00417 	ldw	ra,16(sp)
    da90:	dcc00317 	ldw	r19,12(sp)
    da94:	dc800217 	ldw	r18,8(sp)
    da98:	dc400117 	ldw	r17,4(sp)
    da9c:	dc000017 	ldw	r16,0(sp)
    daa0:	dec00504 	addi	sp,sp,20
    daa4:	f800283a 	ret
    daa8:	0101ffc4 	movi	r4,2047
    daac:	813fd626 	beq	r16,r4,da08 <__alt_data_end+0xff00da08>
    dab0:	29402034 	orhi	r5,r5,128
    dab4:	01000e04 	movi	r4,56
    dab8:	2080a316 	blt	r4,r2,dd48 <__subdf3+0x3c4>
    dabc:	010007c4 	movi	r4,31
    dac0:	2080c616 	blt	r4,r2,dddc <__subdf3+0x458>
    dac4:	01000804 	movi	r4,32
    dac8:	2089c83a 	sub	r4,r4,r2
    dacc:	2910983a 	sll	r8,r5,r4
    dad0:	308ed83a 	srl	r7,r6,r2
    dad4:	3108983a 	sll	r4,r6,r4
    dad8:	2884d83a 	srl	r2,r5,r2
    dadc:	41ccb03a 	or	r6,r8,r7
    dae0:	2008c03a 	cmpne	r4,r4,zero
    dae4:	310cb03a 	or	r6,r6,r4
    dae8:	898dc83a 	sub	r6,r17,r6
    daec:	89a3803a 	cmpltu	r17,r17,r6
    daf0:	1887c83a 	sub	r3,r3,r2
    daf4:	1c47c83a 	sub	r3,r3,r17
    daf8:	3023883a 	mov	r17,r6
    dafc:	1880202c 	andhi	r2,r3,128
    db00:	10002326 	beq	r2,zero,db90 <__subdf3+0x20c>
    db04:	04c02034 	movhi	r19,128
    db08:	9cffffc4 	addi	r19,r19,-1
    db0c:	1ce6703a 	and	r19,r3,r19
    db10:	98007a26 	beq	r19,zero,dcfc <__subdf3+0x378>
    db14:	9809883a 	mov	r4,r19
    db18:	000e4840 	call	e484 <__clzsi2>
    db1c:	113ffe04 	addi	r4,r2,-8
    db20:	00c007c4 	movi	r3,31
    db24:	19007b16 	blt	r3,r4,dd14 <__subdf3+0x390>
    db28:	00800804 	movi	r2,32
    db2c:	1105c83a 	sub	r2,r2,r4
    db30:	8884d83a 	srl	r2,r17,r2
    db34:	9906983a 	sll	r3,r19,r4
    db38:	8922983a 	sll	r17,r17,r4
    db3c:	10c4b03a 	or	r2,r2,r3
    db40:	24007816 	blt	r4,r16,dd24 <__subdf3+0x3a0>
    db44:	2421c83a 	sub	r16,r4,r16
    db48:	80c00044 	addi	r3,r16,1
    db4c:	010007c4 	movi	r4,31
    db50:	20c09516 	blt	r4,r3,dda8 <__subdf3+0x424>
    db54:	01400804 	movi	r5,32
    db58:	28cbc83a 	sub	r5,r5,r3
    db5c:	88c8d83a 	srl	r4,r17,r3
    db60:	8962983a 	sll	r17,r17,r5
    db64:	114a983a 	sll	r5,r2,r5
    db68:	10c6d83a 	srl	r3,r2,r3
    db6c:	8804c03a 	cmpne	r2,r17,zero
    db70:	290ab03a 	or	r5,r5,r4
    db74:	28a2b03a 	or	r17,r5,r2
    db78:	0021883a 	mov	r16,zero
    db7c:	003fa206 	br	da08 <__alt_data_end+0xff00da08>
    db80:	2090b03a 	or	r8,r4,r2
    db84:	40018e26 	beq	r8,zero,e1c0 <__subdf3+0x83c>
    db88:	1007883a 	mov	r3,r2
    db8c:	2023883a 	mov	r17,r4
    db90:	888001cc 	andi	r2,r17,7
    db94:	103f9e1e 	bne	r2,zero,da10 <__alt_data_end+0xff00da10>
    db98:	1804977a 	slli	r2,r3,29
    db9c:	8822d0fa 	srli	r17,r17,3
    dba0:	1810d0fa 	srli	r8,r3,3
    dba4:	9100004c 	andi	r4,r18,1
    dba8:	1444b03a 	or	r2,r2,r17
    dbac:	00c1ffc4 	movi	r3,2047
    dbb0:	80c02826 	beq	r16,r3,dc54 <__subdf3+0x2d0>
    dbb4:	01400434 	movhi	r5,16
    dbb8:	297fffc4 	addi	r5,r5,-1
    dbbc:	80e0703a 	and	r16,r16,r3
    dbc0:	414a703a 	and	r5,r8,r5
    dbc4:	003fa806 	br	da68 <__alt_data_end+0xff00da68>
    dbc8:	0080630e 	bge	zero,r2,dd58 <__subdf3+0x3d4>
    dbcc:	48003026 	beq	r9,zero,dc90 <__subdf3+0x30c>
    dbd0:	0101ffc4 	movi	r4,2047
    dbd4:	813f8c26 	beq	r16,r4,da08 <__alt_data_end+0xff00da08>
    dbd8:	29402034 	orhi	r5,r5,128
    dbdc:	01000e04 	movi	r4,56
    dbe0:	2080a90e 	bge	r4,r2,de88 <__subdf3+0x504>
    dbe4:	298cb03a 	or	r6,r5,r6
    dbe8:	3012c03a 	cmpne	r9,r6,zero
    dbec:	0005883a 	mov	r2,zero
    dbf0:	4c53883a 	add	r9,r9,r17
    dbf4:	4c63803a 	cmpltu	r17,r9,r17
    dbf8:	10c7883a 	add	r3,r2,r3
    dbfc:	88c7883a 	add	r3,r17,r3
    dc00:	4823883a 	mov	r17,r9
    dc04:	1880202c 	andhi	r2,r3,128
    dc08:	1000d026 	beq	r2,zero,df4c <__subdf3+0x5c8>
    dc0c:	84000044 	addi	r16,r16,1
    dc10:	0081ffc4 	movi	r2,2047
    dc14:	8080fe26 	beq	r16,r2,e010 <__subdf3+0x68c>
    dc18:	00bfe034 	movhi	r2,65408
    dc1c:	10bfffc4 	addi	r2,r2,-1
    dc20:	1886703a 	and	r3,r3,r2
    dc24:	880ad07a 	srli	r5,r17,1
    dc28:	180497fa 	slli	r2,r3,31
    dc2c:	8900004c 	andi	r4,r17,1
    dc30:	2922b03a 	or	r17,r5,r4
    dc34:	1806d07a 	srli	r3,r3,1
    dc38:	1462b03a 	or	r17,r2,r17
    dc3c:	3825883a 	mov	r18,r7
    dc40:	003f7106 	br	da08 <__alt_data_end+0xff00da08>
    dc44:	2984b03a 	or	r2,r5,r6
    dc48:	103f6826 	beq	r2,zero,d9ec <__alt_data_end+0xff00d9ec>
    dc4c:	39c03fcc 	andi	r7,r7,255
    dc50:	003f6706 	br	d9f0 <__alt_data_end+0xff00d9f0>
    dc54:	4086b03a 	or	r3,r8,r2
    dc58:	18015226 	beq	r3,zero,e1a4 <__subdf3+0x820>
    dc5c:	00c00434 	movhi	r3,16
    dc60:	41400234 	orhi	r5,r8,8
    dc64:	18ffffc4 	addi	r3,r3,-1
    dc68:	28ca703a 	and	r5,r5,r3
    dc6c:	003f7e06 	br	da68 <__alt_data_end+0xff00da68>
    dc70:	10bfffc4 	addi	r2,r2,-1
    dc74:	1000491e 	bne	r2,zero,dd9c <__subdf3+0x418>
    dc78:	898fc83a 	sub	r7,r17,r6
    dc7c:	89e3803a 	cmpltu	r17,r17,r7
    dc80:	1947c83a 	sub	r3,r3,r5
    dc84:	1c47c83a 	sub	r3,r3,r17
    dc88:	3823883a 	mov	r17,r7
    dc8c:	003f9b06 	br	dafc <__alt_data_end+0xff00dafc>
    dc90:	2988b03a 	or	r4,r5,r6
    dc94:	203f5c26 	beq	r4,zero,da08 <__alt_data_end+0xff00da08>
    dc98:	10bfffc4 	addi	r2,r2,-1
    dc9c:	1000931e 	bne	r2,zero,deec <__subdf3+0x568>
    dca0:	898d883a 	add	r6,r17,r6
    dca4:	3463803a 	cmpltu	r17,r6,r17
    dca8:	1947883a 	add	r3,r3,r5
    dcac:	88c7883a 	add	r3,r17,r3
    dcb0:	3023883a 	mov	r17,r6
    dcb4:	003fd306 	br	dc04 <__alt_data_end+0xff00dc04>
    dcb8:	1000541e 	bne	r2,zero,de0c <__subdf3+0x488>
    dcbc:	80800044 	addi	r2,r16,1
    dcc0:	1081ffcc 	andi	r2,r2,2047
    dcc4:	01000044 	movi	r4,1
    dcc8:	2080a20e 	bge	r4,r2,df54 <__subdf3+0x5d0>
    dccc:	8989c83a 	sub	r4,r17,r6
    dcd0:	8905803a 	cmpltu	r2,r17,r4
    dcd4:	1967c83a 	sub	r19,r3,r5
    dcd8:	98a7c83a 	sub	r19,r19,r2
    dcdc:	9880202c 	andhi	r2,r19,128
    dce0:	10006326 	beq	r2,zero,de70 <__subdf3+0x4ec>
    dce4:	3463c83a 	sub	r17,r6,r17
    dce8:	28c7c83a 	sub	r3,r5,r3
    dcec:	344d803a 	cmpltu	r6,r6,r17
    dcf0:	19a7c83a 	sub	r19,r3,r6
    dcf4:	3825883a 	mov	r18,r7
    dcf8:	983f861e 	bne	r19,zero,db14 <__alt_data_end+0xff00db14>
    dcfc:	8809883a 	mov	r4,r17
    dd00:	000e4840 	call	e484 <__clzsi2>
    dd04:	10800804 	addi	r2,r2,32
    dd08:	113ffe04 	addi	r4,r2,-8
    dd0c:	00c007c4 	movi	r3,31
    dd10:	193f850e 	bge	r3,r4,db28 <__alt_data_end+0xff00db28>
    dd14:	10bff604 	addi	r2,r2,-40
    dd18:	8884983a 	sll	r2,r17,r2
    dd1c:	0023883a 	mov	r17,zero
    dd20:	243f880e 	bge	r4,r16,db44 <__alt_data_end+0xff00db44>
    dd24:	00ffe034 	movhi	r3,65408
    dd28:	18ffffc4 	addi	r3,r3,-1
    dd2c:	8121c83a 	sub	r16,r16,r4
    dd30:	10c6703a 	and	r3,r2,r3
    dd34:	003f3406 	br	da08 <__alt_data_end+0xff00da08>
    dd38:	9100004c 	andi	r4,r18,1
    dd3c:	000b883a 	mov	r5,zero
    dd40:	0005883a 	mov	r2,zero
    dd44:	003f4806 	br	da68 <__alt_data_end+0xff00da68>
    dd48:	298cb03a 	or	r6,r5,r6
    dd4c:	300cc03a 	cmpne	r6,r6,zero
    dd50:	0005883a 	mov	r2,zero
    dd54:	003f6406 	br	dae8 <__alt_data_end+0xff00dae8>
    dd58:	10009a1e 	bne	r2,zero,dfc4 <__subdf3+0x640>
    dd5c:	82400044 	addi	r9,r16,1
    dd60:	4881ffcc 	andi	r2,r9,2047
    dd64:	02800044 	movi	r10,1
    dd68:	5080670e 	bge	r10,r2,df08 <__subdf3+0x584>
    dd6c:	0081ffc4 	movi	r2,2047
    dd70:	4880af26 	beq	r9,r2,e030 <__subdf3+0x6ac>
    dd74:	898d883a 	add	r6,r17,r6
    dd78:	1945883a 	add	r2,r3,r5
    dd7c:	3447803a 	cmpltu	r3,r6,r17
    dd80:	1887883a 	add	r3,r3,r2
    dd84:	182297fa 	slli	r17,r3,31
    dd88:	300cd07a 	srli	r6,r6,1
    dd8c:	1806d07a 	srli	r3,r3,1
    dd90:	4821883a 	mov	r16,r9
    dd94:	89a2b03a 	or	r17,r17,r6
    dd98:	003f1b06 	br	da08 <__alt_data_end+0xff00da08>
    dd9c:	0101ffc4 	movi	r4,2047
    dda0:	813f441e 	bne	r16,r4,dab4 <__alt_data_end+0xff00dab4>
    dda4:	003f1806 	br	da08 <__alt_data_end+0xff00da08>
    dda8:	843ff844 	addi	r16,r16,-31
    ddac:	01400804 	movi	r5,32
    ddb0:	1408d83a 	srl	r4,r2,r16
    ddb4:	19405026 	beq	r3,r5,def8 <__subdf3+0x574>
    ddb8:	01401004 	movi	r5,64
    ddbc:	28c7c83a 	sub	r3,r5,r3
    ddc0:	10c4983a 	sll	r2,r2,r3
    ddc4:	88a2b03a 	or	r17,r17,r2
    ddc8:	8822c03a 	cmpne	r17,r17,zero
    ddcc:	2462b03a 	or	r17,r4,r17
    ddd0:	0007883a 	mov	r3,zero
    ddd4:	0021883a 	mov	r16,zero
    ddd8:	003f6d06 	br	db90 <__alt_data_end+0xff00db90>
    dddc:	11fff804 	addi	r7,r2,-32
    dde0:	01000804 	movi	r4,32
    dde4:	29ced83a 	srl	r7,r5,r7
    dde8:	11004526 	beq	r2,r4,df00 <__subdf3+0x57c>
    ddec:	01001004 	movi	r4,64
    ddf0:	2089c83a 	sub	r4,r4,r2
    ddf4:	2904983a 	sll	r2,r5,r4
    ddf8:	118cb03a 	or	r6,r2,r6
    ddfc:	300cc03a 	cmpne	r6,r6,zero
    de00:	398cb03a 	or	r6,r7,r6
    de04:	0005883a 	mov	r2,zero
    de08:	003f3706 	br	dae8 <__alt_data_end+0xff00dae8>
    de0c:	80002a26 	beq	r16,zero,deb8 <__subdf3+0x534>
    de10:	0101ffc4 	movi	r4,2047
    de14:	49006626 	beq	r9,r4,dfb0 <__subdf3+0x62c>
    de18:	0085c83a 	sub	r2,zero,r2
    de1c:	18c02034 	orhi	r3,r3,128
    de20:	01000e04 	movi	r4,56
    de24:	20807e16 	blt	r4,r2,e020 <__subdf3+0x69c>
    de28:	010007c4 	movi	r4,31
    de2c:	2080e716 	blt	r4,r2,e1cc <__subdf3+0x848>
    de30:	01000804 	movi	r4,32
    de34:	2089c83a 	sub	r4,r4,r2
    de38:	1914983a 	sll	r10,r3,r4
    de3c:	8890d83a 	srl	r8,r17,r2
    de40:	8908983a 	sll	r4,r17,r4
    de44:	1884d83a 	srl	r2,r3,r2
    de48:	5222b03a 	or	r17,r10,r8
    de4c:	2006c03a 	cmpne	r3,r4,zero
    de50:	88e2b03a 	or	r17,r17,r3
    de54:	3463c83a 	sub	r17,r6,r17
    de58:	2885c83a 	sub	r2,r5,r2
    de5c:	344d803a 	cmpltu	r6,r6,r17
    de60:	1187c83a 	sub	r3,r2,r6
    de64:	4821883a 	mov	r16,r9
    de68:	3825883a 	mov	r18,r7
    de6c:	003f2306 	br	dafc <__alt_data_end+0xff00dafc>
    de70:	24d0b03a 	or	r8,r4,r19
    de74:	40001b1e 	bne	r8,zero,dee4 <__subdf3+0x560>
    de78:	0005883a 	mov	r2,zero
    de7c:	0009883a 	mov	r4,zero
    de80:	0021883a 	mov	r16,zero
    de84:	003f4906 	br	dbac <__alt_data_end+0xff00dbac>
    de88:	010007c4 	movi	r4,31
    de8c:	20803a16 	blt	r4,r2,df78 <__subdf3+0x5f4>
    de90:	01000804 	movi	r4,32
    de94:	2089c83a 	sub	r4,r4,r2
    de98:	2912983a 	sll	r9,r5,r4
    de9c:	3090d83a 	srl	r8,r6,r2
    dea0:	3108983a 	sll	r4,r6,r4
    dea4:	2884d83a 	srl	r2,r5,r2
    dea8:	4a12b03a 	or	r9,r9,r8
    deac:	2008c03a 	cmpne	r4,r4,zero
    deb0:	4912b03a 	or	r9,r9,r4
    deb4:	003f4e06 	br	dbf0 <__alt_data_end+0xff00dbf0>
    deb8:	1c48b03a 	or	r4,r3,r17
    debc:	20003c26 	beq	r4,zero,dfb0 <__subdf3+0x62c>
    dec0:	0084303a 	nor	r2,zero,r2
    dec4:	1000381e 	bne	r2,zero,dfa8 <__subdf3+0x624>
    dec8:	3463c83a 	sub	r17,r6,r17
    decc:	28c5c83a 	sub	r2,r5,r3
    ded0:	344d803a 	cmpltu	r6,r6,r17
    ded4:	1187c83a 	sub	r3,r2,r6
    ded8:	4821883a 	mov	r16,r9
    dedc:	3825883a 	mov	r18,r7
    dee0:	003f0606 	br	dafc <__alt_data_end+0xff00dafc>
    dee4:	2023883a 	mov	r17,r4
    dee8:	003f0906 	br	db10 <__alt_data_end+0xff00db10>
    deec:	0101ffc4 	movi	r4,2047
    def0:	813f3a1e 	bne	r16,r4,dbdc <__alt_data_end+0xff00dbdc>
    def4:	003ec406 	br	da08 <__alt_data_end+0xff00da08>
    def8:	0005883a 	mov	r2,zero
    defc:	003fb106 	br	ddc4 <__alt_data_end+0xff00ddc4>
    df00:	0005883a 	mov	r2,zero
    df04:	003fbc06 	br	ddf8 <__alt_data_end+0xff00ddf8>
    df08:	1c44b03a 	or	r2,r3,r17
    df0c:	80008e1e 	bne	r16,zero,e148 <__subdf3+0x7c4>
    df10:	1000c826 	beq	r2,zero,e234 <__subdf3+0x8b0>
    df14:	2984b03a 	or	r2,r5,r6
    df18:	103ebb26 	beq	r2,zero,da08 <__alt_data_end+0xff00da08>
    df1c:	8989883a 	add	r4,r17,r6
    df20:	1945883a 	add	r2,r3,r5
    df24:	2447803a 	cmpltu	r3,r4,r17
    df28:	1887883a 	add	r3,r3,r2
    df2c:	1880202c 	andhi	r2,r3,128
    df30:	2023883a 	mov	r17,r4
    df34:	103f1626 	beq	r2,zero,db90 <__alt_data_end+0xff00db90>
    df38:	00bfe034 	movhi	r2,65408
    df3c:	10bfffc4 	addi	r2,r2,-1
    df40:	5021883a 	mov	r16,r10
    df44:	1886703a 	and	r3,r3,r2
    df48:	003eaf06 	br	da08 <__alt_data_end+0xff00da08>
    df4c:	3825883a 	mov	r18,r7
    df50:	003f0f06 	br	db90 <__alt_data_end+0xff00db90>
    df54:	1c44b03a 	or	r2,r3,r17
    df58:	8000251e 	bne	r16,zero,dff0 <__subdf3+0x66c>
    df5c:	1000661e 	bne	r2,zero,e0f8 <__subdf3+0x774>
    df60:	2990b03a 	or	r8,r5,r6
    df64:	40009626 	beq	r8,zero,e1c0 <__subdf3+0x83c>
    df68:	2807883a 	mov	r3,r5
    df6c:	3023883a 	mov	r17,r6
    df70:	3825883a 	mov	r18,r7
    df74:	003ea406 	br	da08 <__alt_data_end+0xff00da08>
    df78:	127ff804 	addi	r9,r2,-32
    df7c:	01000804 	movi	r4,32
    df80:	2a52d83a 	srl	r9,r5,r9
    df84:	11008c26 	beq	r2,r4,e1b8 <__subdf3+0x834>
    df88:	01001004 	movi	r4,64
    df8c:	2085c83a 	sub	r2,r4,r2
    df90:	2884983a 	sll	r2,r5,r2
    df94:	118cb03a 	or	r6,r2,r6
    df98:	300cc03a 	cmpne	r6,r6,zero
    df9c:	4992b03a 	or	r9,r9,r6
    dfa0:	0005883a 	mov	r2,zero
    dfa4:	003f1206 	br	dbf0 <__alt_data_end+0xff00dbf0>
    dfa8:	0101ffc4 	movi	r4,2047
    dfac:	493f9c1e 	bne	r9,r4,de20 <__alt_data_end+0xff00de20>
    dfb0:	2807883a 	mov	r3,r5
    dfb4:	3023883a 	mov	r17,r6
    dfb8:	4821883a 	mov	r16,r9
    dfbc:	3825883a 	mov	r18,r7
    dfc0:	003e9106 	br	da08 <__alt_data_end+0xff00da08>
    dfc4:	80001f1e 	bne	r16,zero,e044 <__subdf3+0x6c0>
    dfc8:	1c48b03a 	or	r4,r3,r17
    dfcc:	20005a26 	beq	r4,zero,e138 <__subdf3+0x7b4>
    dfd0:	0084303a 	nor	r2,zero,r2
    dfd4:	1000561e 	bne	r2,zero,e130 <__subdf3+0x7ac>
    dfd8:	89a3883a 	add	r17,r17,r6
    dfdc:	1945883a 	add	r2,r3,r5
    dfe0:	898d803a 	cmpltu	r6,r17,r6
    dfe4:	3087883a 	add	r3,r6,r2
    dfe8:	4821883a 	mov	r16,r9
    dfec:	003f0506 	br	dc04 <__alt_data_end+0xff00dc04>
    dff0:	10002b1e 	bne	r2,zero,e0a0 <__subdf3+0x71c>
    dff4:	2984b03a 	or	r2,r5,r6
    dff8:	10008026 	beq	r2,zero,e1fc <__subdf3+0x878>
    dffc:	2807883a 	mov	r3,r5
    e000:	3023883a 	mov	r17,r6
    e004:	3825883a 	mov	r18,r7
    e008:	0401ffc4 	movi	r16,2047
    e00c:	003e7e06 	br	da08 <__alt_data_end+0xff00da08>
    e010:	3809883a 	mov	r4,r7
    e014:	0011883a 	mov	r8,zero
    e018:	0005883a 	mov	r2,zero
    e01c:	003ee306 	br	dbac <__alt_data_end+0xff00dbac>
    e020:	1c62b03a 	or	r17,r3,r17
    e024:	8822c03a 	cmpne	r17,r17,zero
    e028:	0005883a 	mov	r2,zero
    e02c:	003f8906 	br	de54 <__alt_data_end+0xff00de54>
    e030:	3809883a 	mov	r4,r7
    e034:	4821883a 	mov	r16,r9
    e038:	0011883a 	mov	r8,zero
    e03c:	0005883a 	mov	r2,zero
    e040:	003eda06 	br	dbac <__alt_data_end+0xff00dbac>
    e044:	0101ffc4 	movi	r4,2047
    e048:	49003b26 	beq	r9,r4,e138 <__subdf3+0x7b4>
    e04c:	0085c83a 	sub	r2,zero,r2
    e050:	18c02034 	orhi	r3,r3,128
    e054:	01000e04 	movi	r4,56
    e058:	20806e16 	blt	r4,r2,e214 <__subdf3+0x890>
    e05c:	010007c4 	movi	r4,31
    e060:	20807716 	blt	r4,r2,e240 <__subdf3+0x8bc>
    e064:	01000804 	movi	r4,32
    e068:	2089c83a 	sub	r4,r4,r2
    e06c:	1914983a 	sll	r10,r3,r4
    e070:	8890d83a 	srl	r8,r17,r2
    e074:	8908983a 	sll	r4,r17,r4
    e078:	1884d83a 	srl	r2,r3,r2
    e07c:	5222b03a 	or	r17,r10,r8
    e080:	2006c03a 	cmpne	r3,r4,zero
    e084:	88e2b03a 	or	r17,r17,r3
    e088:	89a3883a 	add	r17,r17,r6
    e08c:	1145883a 	add	r2,r2,r5
    e090:	898d803a 	cmpltu	r6,r17,r6
    e094:	3087883a 	add	r3,r6,r2
    e098:	4821883a 	mov	r16,r9
    e09c:	003ed906 	br	dc04 <__alt_data_end+0xff00dc04>
    e0a0:	2984b03a 	or	r2,r5,r6
    e0a4:	10004226 	beq	r2,zero,e1b0 <__subdf3+0x82c>
    e0a8:	1808d0fa 	srli	r4,r3,3
    e0ac:	8822d0fa 	srli	r17,r17,3
    e0b0:	1806977a 	slli	r3,r3,29
    e0b4:	2080022c 	andhi	r2,r4,8
    e0b8:	1c62b03a 	or	r17,r3,r17
    e0bc:	10000826 	beq	r2,zero,e0e0 <__subdf3+0x75c>
    e0c0:	2812d0fa 	srli	r9,r5,3
    e0c4:	4880022c 	andhi	r2,r9,8
    e0c8:	1000051e 	bne	r2,zero,e0e0 <__subdf3+0x75c>
    e0cc:	300cd0fa 	srli	r6,r6,3
    e0d0:	2804977a 	slli	r2,r5,29
    e0d4:	4809883a 	mov	r4,r9
    e0d8:	3825883a 	mov	r18,r7
    e0dc:	11a2b03a 	or	r17,r2,r6
    e0e0:	8806d77a 	srli	r3,r17,29
    e0e4:	200890fa 	slli	r4,r4,3
    e0e8:	882290fa 	slli	r17,r17,3
    e0ec:	0401ffc4 	movi	r16,2047
    e0f0:	1906b03a 	or	r3,r3,r4
    e0f4:	003e4406 	br	da08 <__alt_data_end+0xff00da08>
    e0f8:	2984b03a 	or	r2,r5,r6
    e0fc:	103e4226 	beq	r2,zero,da08 <__alt_data_end+0xff00da08>
    e100:	8989c83a 	sub	r4,r17,r6
    e104:	8911803a 	cmpltu	r8,r17,r4
    e108:	1945c83a 	sub	r2,r3,r5
    e10c:	1205c83a 	sub	r2,r2,r8
    e110:	1200202c 	andhi	r8,r2,128
    e114:	403e9a26 	beq	r8,zero,db80 <__alt_data_end+0xff00db80>
    e118:	3463c83a 	sub	r17,r6,r17
    e11c:	28c5c83a 	sub	r2,r5,r3
    e120:	344d803a 	cmpltu	r6,r6,r17
    e124:	1187c83a 	sub	r3,r2,r6
    e128:	3825883a 	mov	r18,r7
    e12c:	003e3606 	br	da08 <__alt_data_end+0xff00da08>
    e130:	0101ffc4 	movi	r4,2047
    e134:	493fc71e 	bne	r9,r4,e054 <__alt_data_end+0xff00e054>
    e138:	2807883a 	mov	r3,r5
    e13c:	3023883a 	mov	r17,r6
    e140:	4821883a 	mov	r16,r9
    e144:	003e3006 	br	da08 <__alt_data_end+0xff00da08>
    e148:	10003626 	beq	r2,zero,e224 <__subdf3+0x8a0>
    e14c:	2984b03a 	or	r2,r5,r6
    e150:	10001726 	beq	r2,zero,e1b0 <__subdf3+0x82c>
    e154:	1808d0fa 	srli	r4,r3,3
    e158:	8822d0fa 	srli	r17,r17,3
    e15c:	1806977a 	slli	r3,r3,29
    e160:	2080022c 	andhi	r2,r4,8
    e164:	1c62b03a 	or	r17,r3,r17
    e168:	10000726 	beq	r2,zero,e188 <__subdf3+0x804>
    e16c:	2812d0fa 	srli	r9,r5,3
    e170:	4880022c 	andhi	r2,r9,8
    e174:	1000041e 	bne	r2,zero,e188 <__subdf3+0x804>
    e178:	300cd0fa 	srli	r6,r6,3
    e17c:	2804977a 	slli	r2,r5,29
    e180:	4809883a 	mov	r4,r9
    e184:	11a2b03a 	or	r17,r2,r6
    e188:	8806d77a 	srli	r3,r17,29
    e18c:	200890fa 	slli	r4,r4,3
    e190:	882290fa 	slli	r17,r17,3
    e194:	3825883a 	mov	r18,r7
    e198:	1906b03a 	or	r3,r3,r4
    e19c:	0401ffc4 	movi	r16,2047
    e1a0:	003e1906 	br	da08 <__alt_data_end+0xff00da08>
    e1a4:	000b883a 	mov	r5,zero
    e1a8:	0005883a 	mov	r2,zero
    e1ac:	003e2e06 	br	da68 <__alt_data_end+0xff00da68>
    e1b0:	0401ffc4 	movi	r16,2047
    e1b4:	003e1406 	br	da08 <__alt_data_end+0xff00da08>
    e1b8:	0005883a 	mov	r2,zero
    e1bc:	003f7506 	br	df94 <__alt_data_end+0xff00df94>
    e1c0:	0005883a 	mov	r2,zero
    e1c4:	0009883a 	mov	r4,zero
    e1c8:	003e7806 	br	dbac <__alt_data_end+0xff00dbac>
    e1cc:	123ff804 	addi	r8,r2,-32
    e1d0:	01000804 	movi	r4,32
    e1d4:	1a10d83a 	srl	r8,r3,r8
    e1d8:	11002526 	beq	r2,r4,e270 <__subdf3+0x8ec>
    e1dc:	01001004 	movi	r4,64
    e1e0:	2085c83a 	sub	r2,r4,r2
    e1e4:	1884983a 	sll	r2,r3,r2
    e1e8:	1444b03a 	or	r2,r2,r17
    e1ec:	1004c03a 	cmpne	r2,r2,zero
    e1f0:	40a2b03a 	or	r17,r8,r2
    e1f4:	0005883a 	mov	r2,zero
    e1f8:	003f1606 	br	de54 <__alt_data_end+0xff00de54>
    e1fc:	02000434 	movhi	r8,16
    e200:	0009883a 	mov	r4,zero
    e204:	423fffc4 	addi	r8,r8,-1
    e208:	00bfffc4 	movi	r2,-1
    e20c:	0401ffc4 	movi	r16,2047
    e210:	003e6606 	br	dbac <__alt_data_end+0xff00dbac>
    e214:	1c62b03a 	or	r17,r3,r17
    e218:	8822c03a 	cmpne	r17,r17,zero
    e21c:	0005883a 	mov	r2,zero
    e220:	003f9906 	br	e088 <__alt_data_end+0xff00e088>
    e224:	2807883a 	mov	r3,r5
    e228:	3023883a 	mov	r17,r6
    e22c:	0401ffc4 	movi	r16,2047
    e230:	003df506 	br	da08 <__alt_data_end+0xff00da08>
    e234:	2807883a 	mov	r3,r5
    e238:	3023883a 	mov	r17,r6
    e23c:	003df206 	br	da08 <__alt_data_end+0xff00da08>
    e240:	123ff804 	addi	r8,r2,-32
    e244:	01000804 	movi	r4,32
    e248:	1a10d83a 	srl	r8,r3,r8
    e24c:	11000a26 	beq	r2,r4,e278 <__subdf3+0x8f4>
    e250:	01001004 	movi	r4,64
    e254:	2085c83a 	sub	r2,r4,r2
    e258:	1884983a 	sll	r2,r3,r2
    e25c:	1444b03a 	or	r2,r2,r17
    e260:	1004c03a 	cmpne	r2,r2,zero
    e264:	40a2b03a 	or	r17,r8,r2
    e268:	0005883a 	mov	r2,zero
    e26c:	003f8606 	br	e088 <__alt_data_end+0xff00e088>
    e270:	0005883a 	mov	r2,zero
    e274:	003fdc06 	br	e1e8 <__alt_data_end+0xff00e1e8>
    e278:	0005883a 	mov	r2,zero
    e27c:	003ff706 	br	e25c <__alt_data_end+0xff00e25c>

0000e280 <__fixdfsi>:
    e280:	280cd53a 	srli	r6,r5,20
    e284:	00c00434 	movhi	r3,16
    e288:	18ffffc4 	addi	r3,r3,-1
    e28c:	3181ffcc 	andi	r6,r6,2047
    e290:	01c0ff84 	movi	r7,1022
    e294:	28c6703a 	and	r3,r5,r3
    e298:	280ad7fa 	srli	r5,r5,31
    e29c:	3980120e 	bge	r7,r6,e2e8 <__fixdfsi+0x68>
    e2a0:	00810744 	movi	r2,1053
    e2a4:	11800c16 	blt	r2,r6,e2d8 <__fixdfsi+0x58>
    e2a8:	00810cc4 	movi	r2,1075
    e2ac:	1185c83a 	sub	r2,r2,r6
    e2b0:	01c007c4 	movi	r7,31
    e2b4:	18c00434 	orhi	r3,r3,16
    e2b8:	38800d16 	blt	r7,r2,e2f0 <__fixdfsi+0x70>
    e2bc:	31befb44 	addi	r6,r6,-1043
    e2c0:	2084d83a 	srl	r2,r4,r2
    e2c4:	1986983a 	sll	r3,r3,r6
    e2c8:	1884b03a 	or	r2,r3,r2
    e2cc:	28000726 	beq	r5,zero,e2ec <__fixdfsi+0x6c>
    e2d0:	0085c83a 	sub	r2,zero,r2
    e2d4:	f800283a 	ret
    e2d8:	00a00034 	movhi	r2,32768
    e2dc:	10bfffc4 	addi	r2,r2,-1
    e2e0:	2885883a 	add	r2,r5,r2
    e2e4:	f800283a 	ret
    e2e8:	0005883a 	mov	r2,zero
    e2ec:	f800283a 	ret
    e2f0:	008104c4 	movi	r2,1043
    e2f4:	1185c83a 	sub	r2,r2,r6
    e2f8:	1884d83a 	srl	r2,r3,r2
    e2fc:	003ff306 	br	e2cc <__alt_data_end+0xff00e2cc>

0000e300 <__floatsidf>:
    e300:	defffd04 	addi	sp,sp,-12
    e304:	dfc00215 	stw	ra,8(sp)
    e308:	dc400115 	stw	r17,4(sp)
    e30c:	dc000015 	stw	r16,0(sp)
    e310:	20002b26 	beq	r4,zero,e3c0 <__floatsidf+0xc0>
    e314:	2023883a 	mov	r17,r4
    e318:	2020d7fa 	srli	r16,r4,31
    e31c:	20002d16 	blt	r4,zero,e3d4 <__floatsidf+0xd4>
    e320:	8809883a 	mov	r4,r17
    e324:	000e4840 	call	e484 <__clzsi2>
    e328:	01410784 	movi	r5,1054
    e32c:	288bc83a 	sub	r5,r5,r2
    e330:	01010cc4 	movi	r4,1075
    e334:	2149c83a 	sub	r4,r4,r5
    e338:	00c007c4 	movi	r3,31
    e33c:	1900160e 	bge	r3,r4,e398 <__floatsidf+0x98>
    e340:	00c104c4 	movi	r3,1043
    e344:	1947c83a 	sub	r3,r3,r5
    e348:	88c6983a 	sll	r3,r17,r3
    e34c:	00800434 	movhi	r2,16
    e350:	10bfffc4 	addi	r2,r2,-1
    e354:	1886703a 	and	r3,r3,r2
    e358:	2941ffcc 	andi	r5,r5,2047
    e35c:	800d883a 	mov	r6,r16
    e360:	0005883a 	mov	r2,zero
    e364:	280a953a 	slli	r5,r5,20
    e368:	31803fcc 	andi	r6,r6,255
    e36c:	01000434 	movhi	r4,16
    e370:	300c97fa 	slli	r6,r6,31
    e374:	213fffc4 	addi	r4,r4,-1
    e378:	1906703a 	and	r3,r3,r4
    e37c:	1946b03a 	or	r3,r3,r5
    e380:	1986b03a 	or	r3,r3,r6
    e384:	dfc00217 	ldw	ra,8(sp)
    e388:	dc400117 	ldw	r17,4(sp)
    e38c:	dc000017 	ldw	r16,0(sp)
    e390:	dec00304 	addi	sp,sp,12
    e394:	f800283a 	ret
    e398:	00c002c4 	movi	r3,11
    e39c:	1887c83a 	sub	r3,r3,r2
    e3a0:	88c6d83a 	srl	r3,r17,r3
    e3a4:	8904983a 	sll	r2,r17,r4
    e3a8:	01000434 	movhi	r4,16
    e3ac:	213fffc4 	addi	r4,r4,-1
    e3b0:	2941ffcc 	andi	r5,r5,2047
    e3b4:	1906703a 	and	r3,r3,r4
    e3b8:	800d883a 	mov	r6,r16
    e3bc:	003fe906 	br	e364 <__alt_data_end+0xff00e364>
    e3c0:	000d883a 	mov	r6,zero
    e3c4:	000b883a 	mov	r5,zero
    e3c8:	0007883a 	mov	r3,zero
    e3cc:	0005883a 	mov	r2,zero
    e3d0:	003fe406 	br	e364 <__alt_data_end+0xff00e364>
    e3d4:	0123c83a 	sub	r17,zero,r4
    e3d8:	003fd106 	br	e320 <__alt_data_end+0xff00e320>

0000e3dc <__floatunsidf>:
    e3dc:	defffe04 	addi	sp,sp,-8
    e3e0:	dc000015 	stw	r16,0(sp)
    e3e4:	dfc00115 	stw	ra,4(sp)
    e3e8:	2021883a 	mov	r16,r4
    e3ec:	20002226 	beq	r4,zero,e478 <__floatunsidf+0x9c>
    e3f0:	000e4840 	call	e484 <__clzsi2>
    e3f4:	01010784 	movi	r4,1054
    e3f8:	2089c83a 	sub	r4,r4,r2
    e3fc:	01810cc4 	movi	r6,1075
    e400:	310dc83a 	sub	r6,r6,r4
    e404:	00c007c4 	movi	r3,31
    e408:	1980120e 	bge	r3,r6,e454 <__floatunsidf+0x78>
    e40c:	00c104c4 	movi	r3,1043
    e410:	1907c83a 	sub	r3,r3,r4
    e414:	80ca983a 	sll	r5,r16,r3
    e418:	00800434 	movhi	r2,16
    e41c:	10bfffc4 	addi	r2,r2,-1
    e420:	2101ffcc 	andi	r4,r4,2047
    e424:	0021883a 	mov	r16,zero
    e428:	288a703a 	and	r5,r5,r2
    e42c:	2008953a 	slli	r4,r4,20
    e430:	00c00434 	movhi	r3,16
    e434:	18ffffc4 	addi	r3,r3,-1
    e438:	28c6703a 	and	r3,r5,r3
    e43c:	8005883a 	mov	r2,r16
    e440:	1906b03a 	or	r3,r3,r4
    e444:	dfc00117 	ldw	ra,4(sp)
    e448:	dc000017 	ldw	r16,0(sp)
    e44c:	dec00204 	addi	sp,sp,8
    e450:	f800283a 	ret
    e454:	00c002c4 	movi	r3,11
    e458:	188bc83a 	sub	r5,r3,r2
    e45c:	814ad83a 	srl	r5,r16,r5
    e460:	00c00434 	movhi	r3,16
    e464:	18ffffc4 	addi	r3,r3,-1
    e468:	81a0983a 	sll	r16,r16,r6
    e46c:	2101ffcc 	andi	r4,r4,2047
    e470:	28ca703a 	and	r5,r5,r3
    e474:	003fed06 	br	e42c <__alt_data_end+0xff00e42c>
    e478:	0009883a 	mov	r4,zero
    e47c:	000b883a 	mov	r5,zero
    e480:	003fea06 	br	e42c <__alt_data_end+0xff00e42c>

0000e484 <__clzsi2>:
    e484:	00bfffd4 	movui	r2,65535
    e488:	11000536 	bltu	r2,r4,e4a0 <__clzsi2+0x1c>
    e48c:	00803fc4 	movi	r2,255
    e490:	11000f36 	bltu	r2,r4,e4d0 <__clzsi2+0x4c>
    e494:	00800804 	movi	r2,32
    e498:	0007883a 	mov	r3,zero
    e49c:	00000506 	br	e4b4 <__clzsi2+0x30>
    e4a0:	00804034 	movhi	r2,256
    e4a4:	10bfffc4 	addi	r2,r2,-1
    e4a8:	11000c2e 	bgeu	r2,r4,e4dc <__clzsi2+0x58>
    e4ac:	00800204 	movi	r2,8
    e4b0:	00c00604 	movi	r3,24
    e4b4:	20c8d83a 	srl	r4,r4,r3
    e4b8:	00c00074 	movhi	r3,1
    e4bc:	18c1cc04 	addi	r3,r3,1840
    e4c0:	1909883a 	add	r4,r3,r4
    e4c4:	20c00003 	ldbu	r3,0(r4)
    e4c8:	10c5c83a 	sub	r2,r2,r3
    e4cc:	f800283a 	ret
    e4d0:	00800604 	movi	r2,24
    e4d4:	00c00204 	movi	r3,8
    e4d8:	003ff606 	br	e4b4 <__alt_data_end+0xff00e4b4>
    e4dc:	00800404 	movi	r2,16
    e4e0:	1007883a 	mov	r3,r2
    e4e4:	003ff306 	br	e4b4 <__alt_data_end+0xff00e4b4>

0000e4e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e4e8:	defffd04 	addi	sp,sp,-12
    e4ec:	dfc00215 	stw	ra,8(sp)
    e4f0:	dc400115 	stw	r17,4(sp)
    e4f4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e4f8:	20001f16 	blt	r4,zero,e578 <close+0x90>
    e4fc:	20c00324 	muli	r3,r4,12
    e500:	00800074 	movhi	r2,1
    e504:	10843c04 	addi	r2,r2,4336
    e508:	1885883a 	add	r2,r3,r2
    e50c:	2021883a 	mov	r16,r4

  if (fd)
    e510:	10001926 	beq	r2,zero,e578 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e514:	10c00017 	ldw	r3,0(r2)
    e518:	18c00417 	ldw	r3,16(r3)
    e51c:	18000c26 	beq	r3,zero,e550 <close+0x68>
    e520:	1009883a 	mov	r4,r2
    e524:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e528:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e52c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e530:	000e9200 	call	e920 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e534:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e538:	88000816 	blt	r17,zero,e55c <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e53c:	dfc00217 	ldw	ra,8(sp)
    e540:	dc400117 	ldw	r17,4(sp)
    e544:	dc000017 	ldw	r16,0(sp)
    e548:	dec00304 	addi	sp,sp,12
    e54c:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e550:	000e9200 	call	e920 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e554:	0005883a 	mov	r2,zero
    e558:	003ff806 	br	e53c <__alt_data_end+0xff00e53c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e55c:	d0a00d17 	ldw	r2,-32716(gp)
    e560:	10000c26 	beq	r2,zero,e594 <close+0xac>
    e564:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e568:	0463c83a 	sub	r17,zero,r17
    e56c:	14400015 	stw	r17,0(r2)
      return -1;
    e570:	00bfffc4 	movi	r2,-1
    e574:	003ff106 	br	e53c <__alt_data_end+0xff00e53c>
    e578:	d0a00d17 	ldw	r2,-32716(gp)
    e57c:	10000726 	beq	r2,zero,e59c <close+0xb4>
    e580:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e584:	00c01444 	movi	r3,81
    e588:	10c00015 	stw	r3,0(r2)
    return -1;
    e58c:	00bfffc4 	movi	r2,-1
    e590:	003fea06 	br	e53c <__alt_data_end+0xff00e53c>
    e594:	d0a6dc04 	addi	r2,gp,-25744
    e598:	003ff306 	br	e568 <__alt_data_end+0xff00e568>
    e59c:	d0a6dc04 	addi	r2,gp,-25744
    e5a0:	003ff806 	br	e584 <__alt_data_end+0xff00e584>

0000e5a4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e5a4:	3005883a 	mov	r2,r6
    e5a8:	f800283a 	ret

0000e5ac <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e5ac:	20000d16 	blt	r4,zero,e5e4 <fstat+0x38>
    e5b0:	21000324 	muli	r4,r4,12
    e5b4:	00800074 	movhi	r2,1
    e5b8:	10843c04 	addi	r2,r2,4336
    e5bc:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e5c0:	20000826 	beq	r4,zero,e5e4 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e5c4:	20800017 	ldw	r2,0(r4)
    e5c8:	10800817 	ldw	r2,32(r2)
    e5cc:	10000126 	beq	r2,zero,e5d4 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e5d0:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e5d4:	00880004 	movi	r2,8192
    e5d8:	28800115 	stw	r2,4(r5)
      return 0;
    e5dc:	0005883a 	mov	r2,zero
    e5e0:	f800283a 	ret
    e5e4:	d0a00d17 	ldw	r2,-32716(gp)
    e5e8:	10000926 	beq	r2,zero,e610 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e5ec:	deffff04 	addi	sp,sp,-4
    e5f0:	dfc00015 	stw	ra,0(sp)
    e5f4:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e5f8:	00c01444 	movi	r3,81
    e5fc:	10c00015 	stw	r3,0(r2)
    return -1;
    e600:	00bfffc4 	movi	r2,-1
  }
}
    e604:	dfc00017 	ldw	ra,0(sp)
    e608:	dec00104 	addi	sp,sp,4
    e60c:	f800283a 	ret
    e610:	d0a6dc04 	addi	r2,gp,-25744
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e614:	00c01444 	movi	r3,81
    e618:	10c00015 	stw	r3,0(r2)
    return -1;
    e61c:	00bfffc4 	movi	r2,-1
  }
}
    e620:	f800283a 	ret

0000e624 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e624:	defff004 	addi	sp,sp,-64
    e628:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e62c:	20001316 	blt	r4,zero,e67c <isatty+0x58>
    e630:	20800324 	muli	r2,r4,12
    e634:	00c00074 	movhi	r3,1
    e638:	18c43c04 	addi	r3,r3,4336
    e63c:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e640:	10000e26 	beq	r2,zero,e67c <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e644:	10800017 	ldw	r2,0(r2)
    e648:	10800817 	ldw	r2,32(r2)
    e64c:	10000726 	beq	r2,zero,e66c <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e650:	d80b883a 	mov	r5,sp
    e654:	000e5ac0 	call	e5ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e658:	d8800117 	ldw	r2,4(sp)
    e65c:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e660:	dfc00f17 	ldw	ra,60(sp)
    e664:	dec01004 	addi	sp,sp,64
    e668:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e66c:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e670:	dfc00f17 	ldw	ra,60(sp)
    e674:	dec01004 	addi	sp,sp,64
    e678:	f800283a 	ret
    e67c:	d0a00d17 	ldw	r2,-32716(gp)
    e680:	10000726 	beq	r2,zero,e6a0 <isatty+0x7c>
    e684:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e688:	00c01444 	movi	r3,81
    e68c:	10c00015 	stw	r3,0(r2)
    return 0;
    e690:	0005883a 	mov	r2,zero
  }
}
    e694:	dfc00f17 	ldw	ra,60(sp)
    e698:	dec01004 	addi	sp,sp,64
    e69c:	f800283a 	ret
    e6a0:	d0a6dc04 	addi	r2,gp,-25744
    e6a4:	003ff806 	br	e688 <__alt_data_end+0xff00e688>

0000e6a8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e6a8:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e6ac:	01000074 	movhi	r4,1
    e6b0:	01400074 	movhi	r5,1
    e6b4:	dfc00015 	stw	ra,0(sp)
    e6b8:	21021304 	addi	r4,r4,2124
    e6bc:	2948d004 	addi	r5,r5,9024
    e6c0:	21400a26 	beq	r4,r5,e6ec <alt_load+0x44>
  {
    while( to != end )
    e6c4:	00800074 	movhi	r2,1
    e6c8:	1088d004 	addi	r2,r2,9024
    e6cc:	20800726 	beq	r4,r2,e6ec <alt_load+0x44>
    {
      *to++ = *from++;
    e6d0:	21800104 	addi	r6,r4,4
    e6d4:	118dc83a 	sub	r6,r2,r6
    e6d8:	300cd0ba 	srli	r6,r6,2
    e6dc:	31800044 	addi	r6,r6,1
    e6e0:	318d883a 	add	r6,r6,r6
    e6e4:	318d883a 	add	r6,r6,r6
    e6e8:	00076e80 	call	76e8 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e6ec:	01000034 	movhi	r4,0
    e6f0:	01400034 	movhi	r5,0
    e6f4:	21000804 	addi	r4,r4,32
    e6f8:	29400804 	addi	r5,r5,32
    e6fc:	21400a26 	beq	r4,r5,e728 <alt_load+0x80>
  {
    while( to != end )
    e700:	00800034 	movhi	r2,0
    e704:	10806304 	addi	r2,r2,396
    e708:	20800726 	beq	r4,r2,e728 <alt_load+0x80>
    {
      *to++ = *from++;
    e70c:	21800104 	addi	r6,r4,4
    e710:	118dc83a 	sub	r6,r2,r6
    e714:	300cd0ba 	srli	r6,r6,2
    e718:	31800044 	addi	r6,r6,1
    e71c:	318d883a 	add	r6,r6,r6
    e720:	318d883a 	add	r6,r6,r6
    e724:	00076e80 	call	76e8 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e728:	01000074 	movhi	r4,1
    e72c:	01400074 	movhi	r5,1
    e730:	21002504 	addi	r4,r4,148
    e734:	29402504 	addi	r5,r5,148
    e738:	21400a26 	beq	r4,r5,e764 <alt_load+0xbc>
  {
    while( to != end )
    e73c:	00800074 	movhi	r2,1
    e740:	10821304 	addi	r2,r2,2124
    e744:	20800726 	beq	r4,r2,e764 <alt_load+0xbc>
    {
      *to++ = *from++;
    e748:	21800104 	addi	r6,r4,4
    e74c:	118dc83a 	sub	r6,r2,r6
    e750:	300cd0ba 	srli	r6,r6,2
    e754:	31800044 	addi	r6,r6,1
    e758:	318d883a 	add	r6,r6,r6
    e75c:	318d883a 	add	r6,r6,r6
    e760:	00076e80 	call	76e8 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e764:	000f3400 	call	f340 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e768:	dfc00017 	ldw	ra,0(sp)
    e76c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e770:	000f48c1 	jmpi	f48c <alt_icache_flush_all>

0000e774 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e774:	defffe04 	addi	sp,sp,-8
    e778:	dfc00115 	stw	ra,4(sp)
    e77c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e780:	20000e16 	blt	r4,zero,e7bc <lseek+0x48>
    e784:	21000324 	muli	r4,r4,12
    e788:	00800074 	movhi	r2,1
    e78c:	10843c04 	addi	r2,r2,4336
    e790:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    e794:	20000926 	beq	r4,zero,e7bc <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e798:	20800017 	ldw	r2,0(r4)
    e79c:	10800717 	ldw	r2,28(r2)
    e7a0:	10000d26 	beq	r2,zero,e7d8 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e7a4:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    e7a8:	10000f16 	blt	r2,zero,e7e8 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    e7ac:	dfc00117 	ldw	ra,4(sp)
    e7b0:	dc000017 	ldw	r16,0(sp)
    e7b4:	dec00204 	addi	sp,sp,8
    e7b8:	f800283a 	ret
    e7bc:	04001444 	movi	r16,81
    e7c0:	d0a00d17 	ldw	r2,-32716(gp)
    e7c4:	10000626 	beq	r2,zero,e7e0 <lseek+0x6c>
    e7c8:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    e7cc:	14000015 	stw	r16,0(r2)
    rc = -1;
    e7d0:	00bfffc4 	movi	r2,-1
  }

  return rc;
    e7d4:	003ff506 	br	e7ac <__alt_data_end+0xff00e7ac>
    e7d8:	04002184 	movi	r16,134
    e7dc:	003ff806 	br	e7c0 <__alt_data_end+0xff00e7c0>
    e7e0:	d0a6dc04 	addi	r2,gp,-25744
    e7e4:	003ff906 	br	e7cc <__alt_data_end+0xff00e7cc>
    e7e8:	00a1c83a 	sub	r16,zero,r2
    e7ec:	003ff406 	br	e7c0 <__alt_data_end+0xff00e7c0>

0000e7f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e7f0:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e7f4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e7f8:	dfc00115 	stw	ra,4(sp)
    e7fc:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e800:	000eac40 	call	eac4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e804:	000eae40 	call	eae4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e808:	01800074 	movhi	r6,1
    e80c:	31820f04 	addi	r6,r6,2108
    e810:	300b883a 	mov	r5,r6
    e814:	3009883a 	mov	r4,r6
    e818:	000f58c0 	call	f58c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e81c:	000f3c40 	call	f3c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e820:	01000074 	movhi	r4,1
    e824:	213d0a04 	addi	r4,r4,-3032
    e828:	000fb700 	call	fb70 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e82c:	d1a6e017 	ldw	r6,-25728(gp)
    e830:	d166e117 	ldw	r5,-25724(gp)
    e834:	d126e217 	ldw	r4,-25720(gp)
    e838:	0000e500 	call	e50 <main>
  close(STDOUT_FILENO);
    e83c:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e840:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    e844:	000e4e80 	call	e4e8 <close>
  exit (result);
    e848:	8009883a 	mov	r4,r16
    e84c:	000fb840 	call	fb84 <exit>

0000e850 <__malloc_lock>:
    e850:	f800283a 	ret

0000e854 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e854:	f800283a 	ret

0000e858 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e858:	defffe04 	addi	sp,sp,-8
    e85c:	dfc00115 	stw	ra,4(sp)
    e860:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e864:	20002116 	blt	r4,zero,e8ec <read+0x94>
    e868:	21000324 	muli	r4,r4,12
    e86c:	00800074 	movhi	r2,1
    e870:	10843c04 	addi	r2,r2,4336
    e874:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e878:	20001c26 	beq	r4,zero,e8ec <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e87c:	20800217 	ldw	r2,8(r4)
    e880:	00c00044 	movi	r3,1
    e884:	108000cc 	andi	r2,r2,3
    e888:	10c00a26 	beq	r2,r3,e8b4 <read+0x5c>
        (fd->dev->read))
    e88c:	20800017 	ldw	r2,0(r4)
    e890:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e894:	10000726 	beq	r2,zero,e8b4 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e898:	103ee83a 	callr	r2
    e89c:	1021883a 	mov	r16,r2
    e8a0:	10000b16 	blt	r2,zero,e8d0 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    e8a4:	dfc00117 	ldw	ra,4(sp)
    e8a8:	dc000017 	ldw	r16,0(sp)
    e8ac:	dec00204 	addi	sp,sp,8
    e8b0:	f800283a 	ret
    e8b4:	d0a00d17 	ldw	r2,-32716(gp)
    e8b8:	10001326 	beq	r2,zero,e908 <read+0xb0>
    e8bc:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    e8c0:	00c00344 	movi	r3,13
    e8c4:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    e8c8:	00bfffc4 	movi	r2,-1
    e8cc:	003ff506 	br	e8a4 <__alt_data_end+0xff00e8a4>
    e8d0:	d0a00d17 	ldw	r2,-32716(gp)
    e8d4:	10000e26 	beq	r2,zero,e910 <read+0xb8>
    e8d8:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    e8dc:	0421c83a 	sub	r16,zero,r16
    e8e0:	14000015 	stw	r16,0(r2)
          return -1;
    e8e4:	00bfffc4 	movi	r2,-1
    e8e8:	003fee06 	br	e8a4 <__alt_data_end+0xff00e8a4>
    e8ec:	d0a00d17 	ldw	r2,-32716(gp)
    e8f0:	10000926 	beq	r2,zero,e918 <read+0xc0>
    e8f4:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e8f8:	00c01444 	movi	r3,81
    e8fc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    e900:	00bfffc4 	movi	r2,-1
    e904:	003fe706 	br	e8a4 <__alt_data_end+0xff00e8a4>
    e908:	d0a6dc04 	addi	r2,gp,-25744
    e90c:	003fec06 	br	e8c0 <__alt_data_end+0xff00e8c0>
    e910:	d0a6dc04 	addi	r2,gp,-25744
    e914:	003ff106 	br	e8dc <__alt_data_end+0xff00e8dc>
    e918:	d0a6dc04 	addi	r2,gp,-25744
    e91c:	003ff606 	br	e8f8 <__alt_data_end+0xff00e8f8>

0000e920 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    e920:	00800084 	movi	r2,2
    e924:	1100060e 	bge	r2,r4,e940 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    e928:	21000324 	muli	r4,r4,12
    e92c:	00800074 	movhi	r2,1
    e930:	10843c04 	addi	r2,r2,4336
    e934:	1109883a 	add	r4,r2,r4
    e938:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    e93c:	20000015 	stw	zero,0(r4)
    e940:	f800283a 	ret

0000e944 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e944:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e948:	00bfff84 	movi	r2,-2
    e94c:	2884703a 	and	r2,r5,r2
    e950:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e954:	d0a00e17 	ldw	r2,-32712(gp)
    e958:	00ffff04 	movi	r3,-4
    e95c:	108000c4 	addi	r2,r2,3
    e960:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e964:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e968:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e96c:	1109883a 	add	r4,r2,r4
    e970:	18c00004 	addi	r3,r3,0
    e974:	19000336 	bltu	r3,r4,e984 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    e978:	d1200e15 	stw	r4,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e97c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    e980:	f800283a 	ret
    e984:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e988:	00bfffc4 	movi	r2,-1
    e98c:	f800283a 	ret

0000e990 <alt_uncached_free>:
void 
alt_uncached_free(volatile void* ptr)
{
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
    e990:	00a00034 	movhi	r2,32768
    e994:	10bfffc4 	addi	r2,r2,-1
    e998:	2088703a 	and	r4,r4,r2
    e99c:	0001bb41 	jmpi	1bb4 <free>

0000e9a0 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    e9a0:	defffd04 	addi	sp,sp,-12
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    e9a4:	210007c4 	addi	r4,r4,31
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    e9a8:	dc000015 	stw	r16,0(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    e9ac:	2020d17a 	srli	r16,r4,5

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    e9b0:	01000804 	movi	r4,32
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    e9b4:	dfc00215 	stw	ra,8(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    e9b8:	8020917a 	slli	r16,r16,5
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    e9bc:	dc400115 	stw	r17,4(sp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    e9c0:	800b883a 	mov	r5,r16
    e9c4:	000fbbc0 	call	fbbc <memalign>

  if (ptr == NULL) {
    e9c8:	10000a26 	beq	r2,zero,e9f4 <alt_uncached_malloc+0x54>
    return NULL; /* Out of memory */
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    e9cc:	1009883a 	mov	r4,r2
    e9d0:	800b883a 	mov	r5,r16
    e9d4:	1023883a 	mov	r17,r2
    e9d8:	000f3000 	call	f300 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    e9dc:	88a00034 	orhi	r2,r17,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    e9e0:	dfc00217 	ldw	ra,8(sp)
    e9e4:	dc400117 	ldw	r17,4(sp)
    e9e8:	dc000017 	ldw	r16,0(sp)
    e9ec:	dec00304 	addi	sp,sp,12
    e9f0:	f800283a 	ret
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);

  if (ptr == NULL) {
    return NULL; /* Out of memory */
    e9f4:	0005883a 	mov	r2,zero
    e9f8:	003ff906 	br	e9e0 <__alt_data_end+0xff00e9e0>

0000e9fc <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    e9fc:	000f2881 	jmpi	f288 <alt_busy_sleep>

0000ea00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ea00:	defffe04 	addi	sp,sp,-8
    ea04:	dfc00115 	stw	ra,4(sp)
    ea08:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea0c:	20002216 	blt	r4,zero,ea98 <write+0x98>
    ea10:	21000324 	muli	r4,r4,12
    ea14:	00800074 	movhi	r2,1
    ea18:	10843c04 	addi	r2,r2,4336
    ea1c:	2089883a 	add	r4,r4,r2
  
  if (fd)
    ea20:	20001d26 	beq	r4,zero,ea98 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ea24:	20800217 	ldw	r2,8(r4)
    ea28:	108000cc 	andi	r2,r2,3
    ea2c:	10000a26 	beq	r2,zero,ea58 <write+0x58>
    ea30:	20800017 	ldw	r2,0(r4)
    ea34:	10800617 	ldw	r2,24(r2)
    ea38:	10000726 	beq	r2,zero,ea58 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ea3c:	103ee83a 	callr	r2
    ea40:	1021883a 	mov	r16,r2
    ea44:	10000d16 	blt	r2,zero,ea7c <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ea48:	dfc00117 	ldw	ra,4(sp)
    ea4c:	dc000017 	ldw	r16,0(sp)
    ea50:	dec00204 	addi	sp,sp,8
    ea54:	f800283a 	ret
    ea58:	d0a00d17 	ldw	r2,-32716(gp)
    ea5c:	10000526 	beq	r2,zero,ea74 <write+0x74>
    ea60:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    ea64:	00c00344 	movi	r3,13
    ea68:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    ea6c:	00bfffc4 	movi	r2,-1
    ea70:	003ff506 	br	ea48 <__alt_data_end+0xff00ea48>
    ea74:	d0a6dc04 	addi	r2,gp,-25744
    ea78:	003ffa06 	br	ea64 <__alt_data_end+0xff00ea64>
    ea7c:	d0a00d17 	ldw	r2,-32716(gp)
    ea80:	10000c26 	beq	r2,zero,eab4 <write+0xb4>
    ea84:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    ea88:	0421c83a 	sub	r16,zero,r16
    ea8c:	14000015 	stw	r16,0(r2)
        return -1;
    ea90:	00bfffc4 	movi	r2,-1
    ea94:	003fec06 	br	ea48 <__alt_data_end+0xff00ea48>
    ea98:	d0a00d17 	ldw	r2,-32716(gp)
    ea9c:	10000726 	beq	r2,zero,eabc <write+0xbc>
    eaa0:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    eaa4:	00c01444 	movi	r3,81
    eaa8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eaac:	00bfffc4 	movi	r2,-1
    eab0:	003fe506 	br	ea48 <__alt_data_end+0xff00ea48>
    eab4:	d0a6dc04 	addi	r2,gp,-25744
    eab8:	003ff306 	br	ea88 <__alt_data_end+0xff00ea88>
    eabc:	d0a6dc04 	addi	r2,gp,-25744
    eac0:	003ff806 	br	eaa4 <__alt_data_end+0xff00eaa4>

0000eac4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eac4:	deffff04 	addi	sp,sp,-4
    eac8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    eacc:	000f9300 	call	f930 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ead0:	00800044 	movi	r2,1
    ead4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ead8:	dfc00017 	ldw	ra,0(sp)
    eadc:	dec00104 	addi	sp,sp,4
    eae0:	f800283a 	ret

0000eae4 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eae4:	00804034 	movhi	r2,256
    eae8:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eaec:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eaf0:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eaf4:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eaf8:	0080bef4 	movhi	r2,763
    eafc:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eb00:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eb04:	01c0fa04 	movi	r7,1000
    eb08:	21040804 	addi	r4,r4,4128
    eb0c:	01800104 	movi	r6,4
    eb10:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eb14:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eb18:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eb1c:	8404b004 	addi	r16,r16,4800
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    eb20:	d0a6e315 	stw	r2,-25716(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    eb24:	000f1480 	call	f148 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    eb28:	8009883a 	mov	r4,r16
    eb2c:	000b883a 	mov	r5,zero
    eb30:	000d883a 	mov	r6,zero
    eb34:	000ece00 	call	ece0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    eb38:	d1600904 	addi	r5,gp,-32732
    eb3c:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    eb40:	dfc00117 	ldw	ra,4(sp)
    eb44:	dc000017 	ldw	r16,0(sp)
    eb48:	dec00204 	addi	sp,sp,8
    eb4c:	000f3581 	jmpi	f358 <alt_dev_llist_insert>

0000eb50 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    eb50:	20800017 	ldw	r2,0(r4)
    eb54:	21c00217 	ldw	r7,8(r4)
    eb58:	11000a04 	addi	r4,r2,40
    eb5c:	000ee181 	jmpi	ee18 <altera_avalon_jtag_uart_read>

0000eb60 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    eb60:	20800017 	ldw	r2,0(r4)
    eb64:	21c00217 	ldw	r7,8(r4)
    eb68:	11000a04 	addi	r4,r2,40
    eb6c:	000ef6c1 	jmpi	ef6c <altera_avalon_jtag_uart_write>

0000eb70 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    eb70:	20800017 	ldw	r2,0(r4)
    eb74:	21400217 	ldw	r5,8(r4)
    eb78:	11000a04 	addi	r4,r2,40
    eb7c:	000ed581 	jmpi	ed58 <altera_avalon_jtag_uart_close>

0000eb80 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    eb80:	21000017 	ldw	r4,0(r4)
    eb84:	21000a04 	addi	r4,r4,40
    eb88:	000eda41 	jmpi	eda4 <altera_avalon_jtag_uart_ioctl>

0000eb8c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    eb8c:	20800017 	ldw	r2,0(r4)
    eb90:	10800104 	addi	r2,r2,4
    eb94:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    eb98:	18c1000c 	andi	r3,r3,1024
    eb9c:	1800081e 	bne	r3,zero,ebc0 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    eba0:	20800917 	ldw	r2,36(r4)
    eba4:	00e00034 	movhi	r3,32768
    eba8:	18ffff04 	addi	r3,r3,-4
    ebac:	18800236 	bltu	r3,r2,ebb8 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    ebb0:	10800044 	addi	r2,r2,1
    ebb4:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ebb8:	d0a6e717 	ldw	r2,-25700(gp)
    ebbc:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ebc0:	20c00817 	ldw	r3,32(r4)
    ebc4:	18c10014 	ori	r3,r3,1024
    ebc8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ebcc:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ebd0:	d0a6e717 	ldw	r2,-25700(gp)
    ebd4:	f800283a 	ret

0000ebd8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    ebd8:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ebdc:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ebe0:	02bfff44 	movi	r10,-3
    ebe4:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ebe8:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ebec:	3880c00c 	andi	r2,r7,768
    ebf0:	10003426 	beq	r2,zero,ecc4 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ebf4:	3880400c 	andi	r2,r7,256
    ebf8:	10001726 	beq	r2,zero,ec58 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ebfc:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ec00:	20c00b17 	ldw	r3,44(r4)
    ec04:	10800044 	addi	r2,r2,1
    ec08:	1081ffcc 	andi	r2,r2,2047
    ec0c:	18800d1e 	bne	r3,r2,ec44 <altera_avalon_jtag_uart_irq+0x6c>
    ec10:	00002d06 	br	ecc8 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ec14:	20800a17 	ldw	r2,40(r4)
    ec18:	2085883a 	add	r2,r4,r2
    ec1c:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec20:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    ec24:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec28:	10800044 	addi	r2,r2,1
    ec2c:	1081ffcc 	andi	r2,r2,2047
    ec30:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec34:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ec38:	10800044 	addi	r2,r2,1
    ec3c:	1081ffcc 	andi	r2,r2,2047
    ec40:	11400326 	beq	r2,r5,ec50 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ec44:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ec48:	18a0000c 	andi	r2,r3,32768
    ec4c:	103ff11e 	bne	r2,zero,ec14 <__alt_data_end+0xff00ec14>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ec50:	18ffffec 	andhi	r3,r3,65535
    ec54:	18001c1e 	bne	r3,zero,ecc8 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ec58:	3880800c 	andi	r2,r7,512
    ec5c:	103fe226 	beq	r2,zero,ebe8 <__alt_data_end+0xff00ebe8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ec60:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    ec64:	38000b1e 	bne	r7,zero,ec94 <altera_avalon_jtag_uart_irq+0xbc>
    ec68:	003fdf06 	br	ebe8 <__alt_data_end+0xff00ebe8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ec6c:	20800d17 	ldw	r2,52(r4)
    ec70:	2085883a 	add	r2,r4,r2
    ec74:	10820e07 	ldb	r2,2104(r2)
    ec78:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec7c:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ec80:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ec84:	10800044 	addi	r2,r2,1
    ec88:	1081ffcc 	andi	r2,r2,2047
    ec8c:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ec90:	383fd526 	beq	r7,zero,ebe8 <__alt_data_end+0xff00ebe8>
    ec94:	20c00d17 	ldw	r3,52(r4)
    ec98:	20800c17 	ldw	r2,48(r4)
    ec9c:	18bff31e 	bne	r3,r2,ec6c <__alt_data_end+0xff00ec6c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eca0:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eca4:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eca8:	1284703a 	and	r2,r2,r10
    ecac:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ecb0:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ecb4:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ecb8:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ecbc:	3880c00c 	andi	r2,r7,768
    ecc0:	103fcc1e 	bne	r2,zero,ebf4 <__alt_data_end+0xff00ebf4>
    ecc4:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ecc8:	20800817 	ldw	r2,32(r4)
    eccc:	1244703a 	and	r2,r2,r9
    ecd0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    ecd4:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ecd8:	40800037 	ldwio	r2,0(r8)
    ecdc:	003fde06 	br	ec58 <__alt_data_end+0xff00ec58>

0000ece0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ece0:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ece4:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ece8:	dc000115 	stw	r16,4(sp)
    ecec:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ecf0:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ecf4:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ecf8:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ecfc:	2809883a 	mov	r4,r5
    ed00:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ed04:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ed08:	01800074 	movhi	r6,1
    ed0c:	31baf604 	addi	r6,r6,-5160
    ed10:	800f883a 	mov	r7,r16
    ed14:	d8000015 	stw	zero,0(sp)
    ed18:	000f4980 	call	f498 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ed1c:	d166e717 	ldw	r5,-25700(gp)
    ed20:	01800074 	movhi	r6,1
    ed24:	31bae304 	addi	r6,r6,-5236
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ed28:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ed2c:	800f883a 	mov	r7,r16
    ed30:	81000204 	addi	r4,r16,8
    ed34:	000f2080 	call	f208 <alt_alarm_start>
    ed38:	1000030e 	bge	r2,zero,ed48 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ed3c:	00a00034 	movhi	r2,32768
    ed40:	10bfffc4 	addi	r2,r2,-1
    ed44:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ed48:	dfc00217 	ldw	ra,8(sp)
    ed4c:	dc000117 	ldw	r16,4(sp)
    ed50:	dec00304 	addi	sp,sp,12
    ed54:	f800283a 	ret

0000ed58 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    ed58:	2890000c 	andi	r2,r5,16384
    ed5c:	21c00c17 	ldw	r7,48(r4)
    ed60:	10000426 	beq	r2,zero,ed74 <altera_avalon_jtag_uart_close+0x1c>
    ed64:	00000606 	br	ed80 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ed68:	21800917 	ldw	r6,36(r4)
    ed6c:	20c00117 	ldw	r3,4(r4)
    ed70:	30c00a2e 	bgeu	r6,r3,ed9c <altera_avalon_jtag_uart_close+0x44>
    ed74:	20c00d17 	ldw	r3,52(r4)
    ed78:	38fffb1e 	bne	r7,r3,ed68 <__alt_data_end+0xff00ed68>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    ed7c:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ed80:	20800d17 	ldw	r2,52(r4)
    ed84:	11c00526 	beq	r2,r7,ed9c <altera_avalon_jtag_uart_close+0x44>
    ed88:	20c00917 	ldw	r3,36(r4)
    ed8c:	20800117 	ldw	r2,4(r4)
    ed90:	1880022e 	bgeu	r3,r2,ed9c <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    ed94:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    ed98:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ed9c:	0005883a 	mov	r2,zero
    eda0:	f800283a 	ret

0000eda4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    eda4:	009a8044 	movi	r2,27137
    eda8:	28800d26 	beq	r5,r2,ede0 <altera_avalon_jtag_uart_ioctl+0x3c>
    edac:	009a8084 	movi	r2,27138
    edb0:	2880091e 	bne	r5,r2,edd8 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    edb4:	21400117 	ldw	r5,4(r4)
    edb8:	00a00034 	movhi	r2,32768
    edbc:	10bfffc4 	addi	r2,r2,-1
    edc0:	28800526 	beq	r5,r2,edd8 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    edc4:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    edc8:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    edcc:	1947803a 	cmpltu	r3,r3,r5
    edd0:	30c00015 	stw	r3,0(r6)
    edd4:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    edd8:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    eddc:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ede0:	20c00117 	ldw	r3,4(r4)
    ede4:	00a00034 	movhi	r2,32768
    ede8:	10bfffc4 	addi	r2,r2,-1
    edec:	18bffa26 	beq	r3,r2,edd8 <__alt_data_end+0xff00edd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    edf0:	30800017 	ldw	r2,0(r6)
    edf4:	01600034 	movhi	r5,32768
    edf8:	297fff04 	addi	r5,r5,-4
    edfc:	10ffff84 	addi	r3,r2,-2
    ee00:	28c0022e 	bgeu	r5,r3,ee0c <altera_avalon_jtag_uart_ioctl+0x68>
    ee04:	00a00034 	movhi	r2,32768
    ee08:	10bfff84 	addi	r2,r2,-2
    ee0c:	20800115 	stw	r2,4(r4)
      rc = 0;
    ee10:	0005883a 	mov	r2,zero
    ee14:	f800283a 	ret

0000ee18 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    ee18:	01804e0e 	bge	zero,r6,ef54 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ee1c:	defff504 	addi	sp,sp,-44
    ee20:	dc000115 	stw	r16,4(sp)
    ee24:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ee28:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ee2c:	dd800715 	stw	r22,28(sp)
    ee30:	dd400615 	stw	r21,24(sp)
    ee34:	dd000515 	stw	r20,20(sp)
    ee38:	dcc00415 	stw	r19,16(sp)
    ee3c:	dc800315 	stw	r18,12(sp)
    ee40:	dfc00a15 	stw	ra,40(sp)
    ee44:	df000915 	stw	fp,36(sp)
    ee48:	ddc00815 	stw	r23,32(sp)
    ee4c:	dc400215 	stw	r17,8(sp)
    ee50:	3027883a 	mov	r19,r6
    ee54:	2025883a 	mov	r18,r4
    ee58:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ee5c:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ee60:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ee64:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ee68:	b02f883a 	mov	r23,r22
    ee6c:	00000a06 	br	ee98 <altera_avalon_jtag_uart_read+0x80>
    ee70:	9880012e 	bgeu	r19,r2,ee78 <altera_avalon_jtag_uart_read+0x60>
    ee74:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee78:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ee7c:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee80:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ee84:	00076e80 	call	76e8 <memcpy>
      ptr   += n;
      space -= n;
    ee88:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee8c:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    ee90:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    ee94:	04c0080e 	bge	zero,r19,eeb8 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ee98:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ee9c:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    eea0:	e4000136 	bltu	fp,r16,eea8 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    eea4:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    eea8:	a40b883a 	add	r5,r20,r16
    eeac:	b809883a 	mov	r4,r23
    eeb0:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    eeb4:	103fee1e 	bne	r2,zero,ee70 <__alt_data_end+0xff00ee70>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    eeb8:	bd800d1e 	bne	r23,r22,eef0 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    eebc:	d8800017 	ldw	r2,0(sp)
    eec0:	10000426 	beq	r2,zero,eed4 <altera_avalon_jtag_uart_read+0xbc>
    eec4:	00002106 	br	ef4c <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    eec8:	90c00917 	ldw	r3,36(r18)
    eecc:	90800117 	ldw	r2,4(r18)
    eed0:	1880022e 	bgeu	r3,r2,eedc <altera_avalon_jtag_uart_read+0xc4>
    eed4:	90800a17 	ldw	r2,40(r18)
    eed8:	e0bffb26 	beq	fp,r2,eec8 <__alt_data_end+0xff00eec8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    eedc:	90800a17 	ldw	r2,40(r18)
    eee0:	e0800126 	beq	fp,r2,eee8 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    eee4:	04ffe016 	blt	zero,r19,ee68 <__alt_data_end+0xff00ee68>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    eee8:	00bffec4 	movi	r2,-5
    eeec:	00000b06 	br	ef1c <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eef0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eef4:	00bfff84 	movi	r2,-2
    eef8:	2084703a 	and	r2,r4,r2
    eefc:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef00:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef04:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ef08:	10800054 	ori	r2,r2,1
    ef0c:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ef10:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef14:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    ef18:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    ef1c:	dfc00a17 	ldw	ra,40(sp)
    ef20:	df000917 	ldw	fp,36(sp)
    ef24:	ddc00817 	ldw	r23,32(sp)
    ef28:	dd800717 	ldw	r22,28(sp)
    ef2c:	dd400617 	ldw	r21,24(sp)
    ef30:	dd000517 	ldw	r20,20(sp)
    ef34:	dcc00417 	ldw	r19,16(sp)
    ef38:	dc800317 	ldw	r18,12(sp)
    ef3c:	dc400217 	ldw	r17,8(sp)
    ef40:	dc000117 	ldw	r16,4(sp)
    ef44:	dec00b04 	addi	sp,sp,44
    ef48:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    ef4c:	00bffd44 	movi	r2,-11
    ef50:	003ff206 	br	ef1c <__alt_data_end+0xff00ef1c>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    ef54:	39d0000c 	andi	r7,r7,16384
    ef58:	3800021e 	bne	r7,zero,ef64 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    ef5c:	00bffec4 	movi	r2,-5
}
    ef60:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    ef64:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    ef68:	f800283a 	ret

0000ef6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ef6c:	defff604 	addi	sp,sp,-40
    ef70:	dc000015 	stw	r16,0(sp)
    ef74:	dfc00915 	stw	ra,36(sp)
    ef78:	df000815 	stw	fp,32(sp)
    ef7c:	ddc00715 	stw	r23,28(sp)
    ef80:	dd800615 	stw	r22,24(sp)
    ef84:	dd400515 	stw	r21,20(sp)
    ef88:	dd000415 	stw	r20,16(sp)
    ef8c:	dcc00315 	stw	r19,12(sp)
    ef90:	dc800215 	stw	r18,8(sp)
    ef94:	dc400115 	stw	r17,4(sp)
    ef98:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ef9c:	01804d0e 	bge	zero,r6,f0d4 <altera_avalon_jtag_uart_write+0x168>
    efa0:	302d883a 	mov	r22,r6
    efa4:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    efa8:	3c50000c 	andi	r17,r7,16384
    efac:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efb0:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    efb4:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    efb8:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    efbc:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    efc0:	e0c03a2e 	bgeu	fp,r3,f0ac <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    efc4:	1dffffc4 	addi	r23,r3,-1
    efc8:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    efcc:	b800131e 	bne	r23,zero,f01c <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efd0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efd4:	24c4703a 	and	r2,r4,r19
    efd8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    efdc:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    efe0:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    efe4:	10800094 	ori	r2,r2,2
    efe8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    efec:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eff0:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    eff4:	8800341e 	bne	r17,zero,f0c8 <altera_avalon_jtag_uart_write+0x15c>
    eff8:	81000917 	ldw	r4,36(r16)
    effc:	00000206 	br	f008 <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f000:	80800117 	ldw	r2,4(r16)
    f004:	2080022e 	bgeu	r4,r2,f010 <altera_avalon_jtag_uart_write+0xa4>
    f008:	80800d17 	ldw	r2,52(r16)
    f00c:	18bffc26 	beq	r3,r2,f000 <__alt_data_end+0xff00f000>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f010:	203fe926 	beq	r4,zero,efb8 <__alt_data_end+0xff00efb8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f014:	ad00181e 	bne	r21,r20,f078 <altera_avalon_jtag_uart_write+0x10c>
    f018:	00003a06 	br	f104 <altera_avalon_jtag_uart_write+0x198>
    f01c:	b5c0012e 	bgeu	r22,r23,f024 <altera_avalon_jtag_uart_write+0xb8>
    f020:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f024:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f028:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f02c:	a80b883a 	mov	r5,r21
    f030:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f034:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f038:	00076e80 	call	76e8 <memcpy>
      ptr   += n;
      count -= n;
    f03c:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f040:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f044:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f048:	05bfdb16 	blt	zero,r22,efb8 <__alt_data_end+0xff00efb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f04c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f050:	00bfff84 	movi	r2,-2
    f054:	1884703a 	and	r2,r3,r2
    f058:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f05c:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f060:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f064:	10800094 	ori	r2,r2,2
    f068:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f06c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f070:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f074:	a5402226 	beq	r20,r21,f100 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f078:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f07c:	dfc00917 	ldw	ra,36(sp)
    f080:	df000817 	ldw	fp,32(sp)
    f084:	ddc00717 	ldw	r23,28(sp)
    f088:	dd800617 	ldw	r22,24(sp)
    f08c:	dd400517 	ldw	r21,20(sp)
    f090:	dd000417 	ldw	r20,16(sp)
    f094:	dcc00317 	ldw	r19,12(sp)
    f098:	dc800217 	ldw	r18,8(sp)
    f09c:	dc400117 	ldw	r17,4(sp)
    f0a0:	dc000017 	ldw	r16,0(sp)
    f0a4:	dec00a04 	addi	sp,sp,40
    f0a8:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f0ac:	18000326 	beq	r3,zero,f0bc <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f0b0:	00820004 	movi	r2,2048
    f0b4:	172fc83a 	sub	r23,r2,fp
    f0b8:	003fc406 	br	efcc <__alt_data_end+0xff00efcc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f0bc:	0081ffc4 	movi	r2,2047
    f0c0:	172fc83a 	sub	r23,r2,fp
    f0c4:	003fc106 	br	efcc <__alt_data_end+0xff00efcc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f0c8:	ad3feb1e 	bne	r21,r20,f078 <__alt_data_end+0xff00f078>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f0cc:	00bffd44 	movi	r2,-11
    f0d0:	003fea06 	br	f07c <__alt_data_end+0xff00f07c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0d4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0d8:	00bfff84 	movi	r2,-2
    f0dc:	1884703a 	and	r2,r3,r2
    f0e0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0e4:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0e8:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0ec:	10800094 	ori	r2,r2,2
    f0f0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0f4:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0f8:	1801703a 	wrctl	status,r3
    f0fc:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f100:	883ff21e 	bne	r17,zero,f0cc <__alt_data_end+0xff00f0cc>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f104:	00bffec4 	movi	r2,-5
    f108:	003fdc06 	br	f07c <__alt_data_end+0xff00f07c>

0000f10c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f10c:	defffe04 	addi	sp,sp,-8
    f110:	dfc00115 	stw	ra,4(sp)
    f114:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f118:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f11c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f120:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f124:	00bfff84 	movi	r2,-2
    f128:	8084703a 	and	r2,r16,r2
    f12c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f130:	000f83c0 	call	f83c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f134:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f138:	dfc00117 	ldw	ra,4(sp)
    f13c:	dc000017 	ldw	r16,0(sp)
    f140:	dec00204 	addi	sp,sp,8
    f144:	f800283a 	ret

0000f148 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f148:	d0e6e717 	ldw	r3,-25700(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f14c:	defffe04 	addi	sp,sp,-8
    f150:	dfc00115 	stw	ra,4(sp)
    f154:	2005883a 	mov	r2,r4
    f158:	2809883a 	mov	r4,r5
    f15c:	300b883a 	mov	r5,r6
    f160:	1800011e 	bne	r3,zero,f168 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f164:	d1e6e715 	stw	r7,-25700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f168:	00c001c4 	movi	r3,7
    f16c:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f170:	01800074 	movhi	r6,1
    f174:	31bc4304 	addi	r6,r6,-3828
    f178:	d8000015 	stw	zero,0(sp)
    f17c:	100f883a 	mov	r7,r2
    f180:	000f4980 	call	f498 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f184:	dfc00117 	ldw	ra,4(sp)
    f188:	dec00204 	addi	sp,sp,8
    f18c:	f800283a 	ret

0000f190 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f190:	d0e6e317 	ldw	r3,-25716(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f194:	d0a6e417 	ldw	r2,-25712(gp)

  if (!altera_avalon_timer_ts_freq)
    f198:	18000a26 	beq	r3,zero,f1c4 <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f19c:	10c00104 	addi	r3,r2,4
    f1a0:	01000204 	movi	r4,8
    f1a4:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f1a8:	013fffd4 	movui	r4,65535
    f1ac:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f1b0:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f1b4:	00800104 	movi	r2,4
    f1b8:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f1bc:	0005883a 	mov	r2,zero
    f1c0:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f1c4:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f1c8:	f800283a 	ret

0000f1cc <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f1cc:	d0a6e317 	ldw	r2,-25716(gp)
    f1d0:	1000021e 	bne	r2,zero,f1dc <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f1d4:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f1d8:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f1dc:	d0e6e417 	ldw	r3,-25712(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f1e0:	18800404 	addi	r2,r3,16
    f1e4:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f1e8:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f1ec:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f1f0:	1806943a 	slli	r3,r3,16
    f1f4:	10bfffcc 	andi	r2,r2,65535
    f1f8:	1884303a 	nor	r2,r3,r2
    f1fc:	f800283a 	ret

0000f200 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f200:	d0a6e317 	ldw	r2,-25716(gp)
    f204:	f800283a 	ret

0000f208 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f208:	d0a6e717 	ldw	r2,-25700(gp)
    f20c:	10001a26 	beq	r2,zero,f278 <alt_alarm_start+0x70>
  {
    if (alarm)
    f210:	20001b26 	beq	r4,zero,f280 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f214:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f218:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f21c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f220:	00bfff84 	movi	r2,-2
    f224:	1884703a 	and	r2,r3,r2
    f228:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f22c:	d0a6e617 	ldw	r2,-25704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f230:	11800044 	addi	r6,r2,1
    f234:	314b883a 	add	r5,r6,r5
    f238:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f23c:	28800b36 	bltu	r5,r2,f26c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f240:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f244:	d0a01004 	addi	r2,gp,-32704
    f248:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f24c:	d0a01017 	ldw	r2,-32704(gp)
    f250:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f254:	d0a01017 	ldw	r2,-32704(gp)
  list->next           = entry;
    f258:	d1201015 	stw	r4,-32704(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f25c:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f260:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f264:	0005883a 	mov	r2,zero
    f268:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f26c:	00800044 	movi	r2,1
    f270:	20800405 	stb	r2,16(r4)
    f274:	003ff306 	br	f244 <__alt_data_end+0xff00f244>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f278:	00bfde84 	movi	r2,-134
    f27c:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f280:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f284:	f800283a 	ret

0000f288 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f288:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f28c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f290:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f294:	dc000015 	stw	r16,0(sp)
    f298:	dfc00115 	stw	ra,4(sp)
    f29c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f2a0:	000bdc40 	call	bdc4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f2a4:	10001226 	beq	r2,zero,f2f0 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2a8:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f2ac:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2b0:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f2b4:	21000044 	addi	r4,r4,1
    f2b8:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f2bc:	297fffc4 	addi	r5,r5,-1
    f2c0:	283ffe1e 	bne	r5,zero,f2bc <__alt_data_end+0xff00f2bc>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f2c4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f2c8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f2cc:	18bffb16 	blt	r3,r2,f2bc <__alt_data_end+0xff00f2bc>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f2d0:	8020913a 	slli	r16,r16,4
    f2d4:	843fffc4 	addi	r16,r16,-1
    f2d8:	803ffe1e 	bne	r16,zero,f2d4 <__alt_data_end+0xff00f2d4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f2dc:	0005883a 	mov	r2,zero
    f2e0:	dfc00117 	ldw	ra,4(sp)
    f2e4:	dc000017 	ldw	r16,0(sp)
    f2e8:	dec00204 	addi	sp,sp,8
    f2ec:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f2f0:	8020913a 	slli	r16,r16,4
    f2f4:	843fffc4 	addi	r16,r16,-1
    f2f8:	043ffe16 	blt	zero,r16,f2f4 <__alt_data_end+0xff00f2f4>
    f2fc:	003ff706 	br	f2dc <__alt_data_end+0xff00f2dc>

0000f300 <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
    f300:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f304:	2005883a 	mov	r2,r4
    f308:	2140092e 	bgeu	r4,r5,f330 <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
    f30c:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f310:	10800804 	addi	r2,r2,32
    f314:	117ffd36 	bltu	r2,r5,f30c <__alt_data_end+0xff00f30c>
    f318:	0104303a 	nor	r2,zero,r4
    f31c:	1145883a 	add	r2,r2,r5
    f320:	1004d17a 	srli	r2,r2,5
    f324:	10800044 	addi	r2,r2,1
    f328:	1004917a 	slli	r2,r2,5
    f32c:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
    f330:	210007cc 	andi	r4,r4,31
    f334:	20000126 	beq	r4,zero,f33c <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
    f338:	1000001b 	flushda	0(r2)
    f33c:	f800283a 	ret

0000f340 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f340:	0005883a 	mov	r2,zero
    f344:	00c80004 	movi	r3,8192
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f348:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f34c:	10800804 	addi	r2,r2,32
    f350:	10fffd1e 	bne	r2,r3,f348 <__alt_data_end+0xff00f348>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f354:	f800283a 	ret

0000f358 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f358:	20000a26 	beq	r4,zero,f384 <alt_dev_llist_insert+0x2c>
    f35c:	20800217 	ldw	r2,8(r4)
    f360:	10000826 	beq	r2,zero,f384 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f364:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f368:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f36c:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f370:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f374:	28c00017 	ldw	r3,0(r5)
    f378:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f37c:	29000015 	stw	r4,0(r5)
    f380:	f800283a 	ret
    f384:	d0a00d17 	ldw	r2,-32716(gp)
    f388:	10000926 	beq	r2,zero,f3b0 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f38c:	deffff04 	addi	sp,sp,-4
    f390:	dfc00015 	stw	ra,0(sp)
    f394:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f398:	00c00584 	movi	r3,22
    f39c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f3a0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f3a4:	dfc00017 	ldw	ra,0(sp)
    f3a8:	dec00104 	addi	sp,sp,4
    f3ac:	f800283a 	ret
    f3b0:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f3b4:	00c00584 	movi	r3,22
    f3b8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f3bc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f3c0:	f800283a 	ret

0000f3c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f3c4:	defffc04 	addi	sp,sp,-16
    f3c8:	dc800215 	stw	r18,8(sp)
    f3cc:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f3d0:	04800074 	movhi	r18,1
    f3d4:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f3d8:	dfc00315 	stw	ra,12(sp)
    f3dc:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f3e0:	84002404 	addi	r16,r16,144
    f3e4:	94802504 	addi	r18,r18,148
    f3e8:	84800936 	bltu	r16,r18,f410 <_do_ctors+0x4c>
    f3ec:	84a5c83a 	sub	r18,r16,r18
    f3f0:	9024d0ba 	srli	r18,r18,2
    f3f4:	0023883a 	mov	r17,zero
    f3f8:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f3fc:	80800017 	ldw	r2,0(r16)
    f400:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f404:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f408:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f40c:	8cbffb1e 	bne	r17,r18,f3fc <__alt_data_end+0xff00f3fc>
        (*ctor) (); 
}
    f410:	dfc00317 	ldw	ra,12(sp)
    f414:	dc800217 	ldw	r18,8(sp)
    f418:	dc400117 	ldw	r17,4(sp)
    f41c:	dc000017 	ldw	r16,0(sp)
    f420:	dec00404 	addi	sp,sp,16
    f424:	f800283a 	ret

0000f428 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f428:	defffc04 	addi	sp,sp,-16
    f42c:	dc800215 	stw	r18,8(sp)
    f430:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f434:	04800074 	movhi	r18,1
    f438:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f43c:	dfc00315 	stw	ra,12(sp)
    f440:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f444:	84002404 	addi	r16,r16,144
    f448:	94802504 	addi	r18,r18,148
    f44c:	84800936 	bltu	r16,r18,f474 <_do_dtors+0x4c>
    f450:	84a5c83a 	sub	r18,r16,r18
    f454:	9024d0ba 	srli	r18,r18,2
    f458:	0023883a 	mov	r17,zero
    f45c:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f460:	80800017 	ldw	r2,0(r16)
    f464:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f468:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f46c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f470:	8cbffb1e 	bne	r17,r18,f460 <__alt_data_end+0xff00f460>
        (*dtor) (); 
}
    f474:	dfc00317 	ldw	ra,12(sp)
    f478:	dc800217 	ldw	r18,8(sp)
    f47c:	dc400117 	ldw	r17,4(sp)
    f480:	dc000017 	ldw	r16,0(sp)
    f484:	dec00404 	addi	sp,sp,16
    f488:	f800283a 	ret

0000f48c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f48c:	01440004 	movi	r5,4096
    f490:	0009883a 	mov	r4,zero
    f494:	000faac1 	jmpi	faac <alt_icache_flush>

0000f498 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f498:	000f5241 	jmpi	f524 <alt_iic_isr_register>

0000f49c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f49c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f4a0:	00bfff84 	movi	r2,-2
    f4a4:	2084703a 	and	r2,r4,r2
    f4a8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f4ac:	00c00044 	movi	r3,1
    f4b0:	d0a6e517 	ldw	r2,-25708(gp)
    f4b4:	194a983a 	sll	r5,r3,r5
    f4b8:	288ab03a 	or	r5,r5,r2
    f4bc:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f4c0:	d0a6e517 	ldw	r2,-25708(gp)
    f4c4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4c8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f4cc:	0005883a 	mov	r2,zero
    f4d0:	f800283a 	ret

0000f4d4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f4d4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f4d8:	00bfff84 	movi	r2,-2
    f4dc:	2084703a 	and	r2,r4,r2
    f4e0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f4e4:	00ffff84 	movi	r3,-2
    f4e8:	d0a6e517 	ldw	r2,-25708(gp)
    f4ec:	194a183a 	rol	r5,r3,r5
    f4f0:	288a703a 	and	r5,r5,r2
    f4f4:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f4f8:	d0a6e517 	ldw	r2,-25708(gp)
    f4fc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f500:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f504:	0005883a 	mov	r2,zero
    f508:	f800283a 	ret

0000f50c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f50c:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f510:	00800044 	movi	r2,1
    f514:	1144983a 	sll	r2,r2,r5
    f518:	10c4703a 	and	r2,r2,r3
}
    f51c:	1004c03a 	cmpne	r2,r2,zero
    f520:	f800283a 	ret

0000f524 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f524:	00c007c4 	movi	r3,31
    f528:	19401616 	blt	r3,r5,f584 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f52c:	defffe04 	addi	sp,sp,-8
    f530:	dfc00115 	stw	ra,4(sp)
    f534:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f538:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f53c:	00ffff84 	movi	r3,-2
    f540:	80c6703a 	and	r3,r16,r3
    f544:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f548:	280490fa 	slli	r2,r5,3
    f54c:	00c00074 	movhi	r3,1
    f550:	18cfb104 	addi	r3,r3,16068
    f554:	1885883a 	add	r2,r3,r2
    f558:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f55c:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f560:	30000626 	beq	r6,zero,f57c <alt_iic_isr_register+0x58>
    f564:	000f49c0 	call	f49c <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f568:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f56c:	dfc00117 	ldw	ra,4(sp)
    f570:	dc000017 	ldw	r16,0(sp)
    f574:	dec00204 	addi	sp,sp,8
    f578:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f57c:	000f4d40 	call	f4d4 <alt_ic_irq_disable>
    f580:	003ff906 	br	f568 <__alt_data_end+0xff00f568>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f584:	00bffa84 	movi	r2,-22
    f588:	f800283a 	ret

0000f58c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f58c:	defffd04 	addi	sp,sp,-12
    f590:	dc400115 	stw	r17,4(sp)
    f594:	dc000015 	stw	r16,0(sp)
    f598:	2823883a 	mov	r17,r5
    f59c:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f5a0:	01400044 	movi	r5,1
    f5a4:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f5a8:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f5ac:	000f6900 	call	f690 <open>

  if (old >= 0)
    f5b0:	10000c16 	blt	r2,zero,f5e4 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f5b4:	10c00324 	muli	r3,r2,12
    f5b8:	01400074 	movhi	r5,1
    f5bc:	29443c04 	addi	r5,r5,4336
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f5c0:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f5c4:	28c5883a 	add	r2,r5,r3
    f5c8:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f5cc:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f5d0:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f5d4:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f5d8:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f5dc:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f5e0:	000e9200 	call	e920 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f5e4:	01807fc4 	movi	r6,511
    f5e8:	000b883a 	mov	r5,zero
    f5ec:	8809883a 	mov	r4,r17
    f5f0:	000f6900 	call	f690 <open>

  if (old >= 0)
    f5f4:	10000c16 	blt	r2,zero,f628 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f5f8:	10c00324 	muli	r3,r2,12
    f5fc:	01400074 	movhi	r5,1
    f600:	29443c04 	addi	r5,r5,4336
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f604:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f608:	28c5883a 	add	r2,r5,r3
    f60c:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f610:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f614:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f618:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f61c:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f620:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f624:	000e9200 	call	e920 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f628:	01807fc4 	movi	r6,511
    f62c:	01400044 	movi	r5,1
    f630:	8009883a 	mov	r4,r16
    f634:	000f6900 	call	f690 <open>

  if (old >= 0)
    f638:	10001016 	blt	r2,zero,f67c <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f63c:	10c00324 	muli	r3,r2,12
    f640:	01400074 	movhi	r5,1
    f644:	29443c04 	addi	r5,r5,4336
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f648:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f64c:	28c5883a 	add	r2,r5,r3
    f650:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f654:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f658:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f65c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f660:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f664:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f668:	dfc00217 	ldw	ra,8(sp)
    f66c:	dc400117 	ldw	r17,4(sp)
    f670:	dc000017 	ldw	r16,0(sp)
    f674:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f678:	000e9201 	jmpi	e920 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f67c:	dfc00217 	ldw	ra,8(sp)
    f680:	dc400117 	ldw	r17,4(sp)
    f684:	dc000017 	ldw	r16,0(sp)
    f688:	dec00304 	addi	sp,sp,12
    f68c:	f800283a 	ret

0000f690 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f690:	defffa04 	addi	sp,sp,-24
    f694:	dc000015 	stw	r16,0(sp)
    f698:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f69c:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f6a0:	dc800215 	stw	r18,8(sp)
    f6a4:	dc400115 	stw	r17,4(sp)
    f6a8:	dfc00515 	stw	ra,20(sp)
    f6ac:	dd000415 	stw	r20,16(sp)
    f6b0:	dcc00315 	stw	r19,12(sp)
    f6b4:	2023883a 	mov	r17,r4
    f6b8:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f6bc:	000f9380 	call	f938 <alt_find_dev>
    f6c0:	10004626 	beq	r2,zero,f7dc <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f6c4:	1009883a 	mov	r4,r2
    f6c8:	1029883a 	mov	r20,r2
    f6cc:	000fa5c0 	call	fa5c <alt_get_fd>
    f6d0:	1027883a 	mov	r19,r2
    f6d4:	1000090e 	bge	r2,zero,f6fc <open+0x6c>
    f6d8:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f6dc:	9809883a 	mov	r4,r19
    f6e0:	000e9200 	call	e920 <alt_release_fd>
    f6e4:	d0a00d17 	ldw	r2,-32716(gp)
    f6e8:	10004326 	beq	r2,zero,f7f8 <open+0x168>
    f6ec:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f6f0:	14000015 	stw	r16,0(r2)
    return -1;
    f6f4:	00bfffc4 	movi	r2,-1
    f6f8:	00002e06 	br	f7b4 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f6fc:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f700:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f704:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f708:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f70c:	10843c04 	addi	r2,r2,4336

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f710:	80c6703a 	and	r3,r16,r3
    f714:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f718:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f71c:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f720:	d2200817 	ldw	r8,-32736(gp)
    f724:	21c00017 	ldw	r7,0(r4)
    f728:	11400204 	addi	r5,r2,8
    f72c:	0007883a 	mov	r3,zero
    f730:	00000306 	br	f740 <open+0xb0>
    f734:	10800304 	addi	r2,r2,12
    f738:	29400304 	addi	r5,r5,12
    f73c:	40c01436 	bltu	r8,r3,f790 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f740:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f744:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f748:	31fffa1e 	bne	r6,r7,f734 <__alt_data_end+0xff00f734>
    f74c:	29800017 	ldw	r6,0(r5)
    f750:	303ff80e 	bge	r6,zero,f734 <__alt_data_end+0xff00f734>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f754:	20bff726 	beq	r4,r2,f734 <__alt_data_end+0xff00f734>
    f758:	04000344 	movi	r16,13
    f75c:	003fdf06 	br	f6dc <__alt_data_end+0xff00f6dc>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f760:	1009883a 	mov	r4,r2
    f764:	000fa5c0 	call	fa5c <alt_get_fd>
    f768:	1027883a 	mov	r19,r2
    f76c:	103fda16 	blt	r2,zero,f6d8 <__alt_data_end+0xff00f6d8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f770:	99000324 	muli	r4,r19,12
    f774:	00800074 	movhi	r2,1
    f778:	10843c04 	addi	r2,r2,4336
    f77c:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f780:	00900034 	movhi	r2,16384
    f784:	10bfffc4 	addi	r2,r2,-1
    f788:	8084703a 	and	r2,r16,r2
    f78c:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f790:	a0800317 	ldw	r2,12(r20)
    f794:	10000f26 	beq	r2,zero,f7d4 <open+0x144>
    f798:	900f883a 	mov	r7,r18
    f79c:	800d883a 	mov	r6,r16
    f7a0:	880b883a 	mov	r5,r17
    f7a4:	103ee83a 	callr	r2
    f7a8:	1007883a 	mov	r3,r2
    f7ac:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f7b0:	18001316 	blt	r3,zero,f800 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    f7b4:	dfc00517 	ldw	ra,20(sp)
    f7b8:	dd000417 	ldw	r20,16(sp)
    f7bc:	dcc00317 	ldw	r19,12(sp)
    f7c0:	dc800217 	ldw	r18,8(sp)
    f7c4:	dc400117 	ldw	r17,4(sp)
    f7c8:	dc000017 	ldw	r16,0(sp)
    f7cc:	dec00604 	addi	sp,sp,24
    f7d0:	f800283a 	ret
    f7d4:	9805883a 	mov	r2,r19
    f7d8:	003ff606 	br	f7b4 <__alt_data_end+0xff00f7b4>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f7dc:	8809883a 	mov	r4,r17
    f7e0:	000f9b00 	call	f9b0 <alt_find_file>
    f7e4:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f7e8:	103fdd1e 	bne	r2,zero,f760 <__alt_data_end+0xff00f760>
    f7ec:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f7f0:	04ffffc4 	movi	r19,-1
    f7f4:	003fb906 	br	f6dc <__alt_data_end+0xff00f6dc>
    f7f8:	d0a6dc04 	addi	r2,gp,-25744
    f7fc:	003fbc06 	br	f6f0 <__alt_data_end+0xff00f6f0>
    f800:	00e1c83a 	sub	r16,zero,r3
    f804:	003fb506 	br	f6dc <__alt_data_end+0xff00f6dc>

0000f808 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f808:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f80c:	00bfff84 	movi	r2,-2
    f810:	1884703a 	and	r2,r3,r2
    f814:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f818:	21400117 	ldw	r5,4(r4)
    f81c:	20800017 	ldw	r2,0(r4)
    f820:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    f824:	21400117 	ldw	r5,4(r4)
    f828:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f82c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    f830:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f834:	1801703a 	wrctl	status,r3
    f838:	f800283a 	ret

0000f83c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f83c:	d0a6e617 	ldw	r2,-25704(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f840:	defffa04 	addi	sp,sp,-24
    f844:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f848:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f84c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f850:	dc800215 	stw	r18,8(sp)
    f854:	dfc00515 	stw	ra,20(sp)
    f858:	dd000415 	stw	r20,16(sp)
    f85c:	dcc00315 	stw	r19,12(sp)
    f860:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f864:	d4a01004 	addi	r18,gp,-32704

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f868:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f86c:	84801126 	beq	r16,r18,f8b4 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    f870:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f874:	053fff84 	movi	r20,-2
    f878:	00000606 	br	f894 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    f87c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f880:	d0e6e617 	ldw	r3,-25704(gp)
    f884:	80800217 	ldw	r2,8(r16)
    f888:	1880122e 	bgeu	r3,r2,f8d4 <alt_tick+0x98>
    f88c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f890:	8c800826 	beq	r17,r18,f8b4 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f894:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    f898:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f89c:	103ff826 	beq	r2,zero,f880 <__alt_data_end+0xff00f880>
    f8a0:	d0a6e617 	ldw	r2,-25704(gp)
    f8a4:	103ff526 	beq	r2,zero,f87c <__alt_data_end+0xff00f87c>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f8a8:	d0a6e617 	ldw	r2,-25704(gp)
    f8ac:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f8b0:	8cbff81e 	bne	r17,r18,f894 <__alt_data_end+0xff00f894>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    f8b4:	dfc00517 	ldw	ra,20(sp)
    f8b8:	dd000417 	ldw	r20,16(sp)
    f8bc:	dcc00317 	ldw	r19,12(sp)
    f8c0:	dc800217 	ldw	r18,8(sp)
    f8c4:	dc400117 	ldw	r17,4(sp)
    f8c8:	dc000017 	ldw	r16,0(sp)
    f8cc:	dec00604 	addi	sp,sp,24
    f8d0:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    f8d4:	80800317 	ldw	r2,12(r16)
    f8d8:	81000517 	ldw	r4,20(r16)
    f8dc:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f8e0:	10000726 	beq	r2,zero,f900 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f8e4:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f8e8:	d126e617 	ldw	r4,-25704(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f8ec:	10c5883a 	add	r2,r2,r3
    f8f0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f8f4:	113fe52e 	bgeu	r2,r4,f88c <__alt_data_end+0xff00f88c>
        {
          alarm->rollover = 1;
    f8f8:	84c00405 	stb	r19,16(r16)
    f8fc:	003fe306 	br	f88c <__alt_data_end+0xff00f88c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f900:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f904:	1506703a 	and	r3,r2,r20
    f908:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f90c:	81000117 	ldw	r4,4(r16)
    f910:	80c00017 	ldw	r3,0(r16)
    f914:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    f918:	81000117 	ldw	r4,4(r16)
    f91c:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f920:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    f924:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f928:	1001703a 	wrctl	status,r2
    f92c:	003fd706 	br	f88c <__alt_data_end+0xff00f88c>

0000f930 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    f930:	000170fa 	wrctl	ienable,zero
    f934:	f800283a 	ret

0000f938 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f938:	defffb04 	addi	sp,sp,-20
    f93c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    f940:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f944:	dc400115 	stw	r17,4(sp)
    f948:	2823883a 	mov	r17,r5
    f94c:	dcc00315 	stw	r19,12(sp)
    f950:	dfc00415 	stw	ra,16(sp)
    f954:	dc800215 	stw	r18,8(sp)
    f958:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    f95c:	00025680 	call	2568 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f960:	8c000b26 	beq	r17,r16,f990 <alt_find_dev+0x58>
    f964:	14800044 	addi	r18,r2,1
    f968:	00000206 	br	f974 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    f96c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f970:	8c000726 	beq	r17,r16,f990 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f974:	81000217 	ldw	r4,8(r16)
    f978:	900d883a 	mov	r6,r18
    f97c:	980b883a 	mov	r5,r19
    f980:	000fd6c0 	call	fd6c <memcmp>
    f984:	103ff91e 	bne	r2,zero,f96c <__alt_data_end+0xff00f96c>
    f988:	8005883a 	mov	r2,r16
    f98c:	00000106 	br	f994 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f990:	0005883a 	mov	r2,zero
}
    f994:	dfc00417 	ldw	ra,16(sp)
    f998:	dcc00317 	ldw	r19,12(sp)
    f99c:	dc800217 	ldw	r18,8(sp)
    f9a0:	dc400117 	ldw	r17,4(sp)
    f9a4:	dc000017 	ldw	r16,0(sp)
    f9a8:	dec00504 	addi	sp,sp,20
    f9ac:	f800283a 	ret

0000f9b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f9b0:	defffa04 	addi	sp,sp,-24
    f9b4:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f9b8:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f9bc:	dd000415 	stw	r20,16(sp)
    f9c0:	dfc00515 	stw	ra,20(sp)
    f9c4:	dcc00315 	stw	r19,12(sp)
    f9c8:	dc800215 	stw	r18,8(sp)
    f9cc:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f9d0:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f9d4:	85001626 	beq	r16,r20,fa30 <alt_find_file+0x80>
    f9d8:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    f9dc:	04c00bc4 	movi	r19,47
    f9e0:	00000806 	br	fa04 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f9e4:	9185883a 	add	r2,r18,r6
    f9e8:	10800007 	ldb	r2,0(r2)
    f9ec:	14c00126 	beq	r2,r19,f9f4 <alt_find_file+0x44>
    f9f0:	1000021e 	bne	r2,zero,f9fc <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    f9f4:	000fd6c0 	call	fd6c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f9f8:	10001626 	beq	r2,zero,fa54 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    f9fc:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fa00:	85000b26 	beq	r16,r20,fa30 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    fa04:	84400217 	ldw	r17,8(r16)
    fa08:	8809883a 	mov	r4,r17
    fa0c:	00025680 	call	2568 <strlen>
    fa10:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    fa14:	8885883a 	add	r2,r17,r2
    fa18:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fa1c:	900b883a 	mov	r5,r18
    fa20:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fa24:	14ffef1e 	bne	r2,r19,f9e4 <__alt_data_end+0xff00f9e4>
    {
      len -= 1;
    fa28:	31bfffc4 	addi	r6,r6,-1
    fa2c:	003fed06 	br	f9e4 <__alt_data_end+0xff00f9e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fa30:	0005883a 	mov	r2,zero
}
    fa34:	dfc00517 	ldw	ra,20(sp)
    fa38:	dd000417 	ldw	r20,16(sp)
    fa3c:	dcc00317 	ldw	r19,12(sp)
    fa40:	dc800217 	ldw	r18,8(sp)
    fa44:	dc400117 	ldw	r17,4(sp)
    fa48:	dc000017 	ldw	r16,0(sp)
    fa4c:	dec00604 	addi	sp,sp,24
    fa50:	f800283a 	ret
    fa54:	8005883a 	mov	r2,r16
    fa58:	003ff606 	br	fa34 <__alt_data_end+0xff00fa34>

0000fa5c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fa5c:	01c00074 	movhi	r7,1
    fa60:	39c43c04 	addi	r7,r7,4336
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fa64:	0005883a 	mov	r2,zero
    fa68:	3807883a 	mov	r3,r7
    fa6c:	01800804 	movi	r6,32
    fa70:	00000206 	br	fa7c <alt_get_fd+0x20>
    fa74:	10800044 	addi	r2,r2,1
    fa78:	11800a26 	beq	r2,r6,faa4 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fa7c:	19400017 	ldw	r5,0(r3)
    fa80:	18c00304 	addi	r3,r3,12
    fa84:	283ffb1e 	bne	r5,zero,fa74 <__alt_data_end+0xff00fa74>
    {
      alt_fd_list[i].dev = dev;
    fa88:	10c00324 	muli	r3,r2,12
    fa8c:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fa90:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fa94:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fa98:	1880030e 	bge	r3,r2,faa8 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fa9c:	d0a00815 	stw	r2,-32736(gp)
    faa0:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    faa4:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    faa8:	f800283a 	ret

0000faac <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    faac:	00840004 	movi	r2,4096
    fab0:	1140012e 	bgeu	r2,r5,fab8 <alt_icache_flush+0xc>
    fab4:	100b883a 	mov	r5,r2
    fab8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fabc:	2005883a 	mov	r2,r4
    fac0:	2140092e 	bgeu	r4,r5,fae8 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fac4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fac8:	10800804 	addi	r2,r2,32
    facc:	117ffd36 	bltu	r2,r5,fac4 <__alt_data_end+0xff00fac4>
    fad0:	0104303a 	nor	r2,zero,r4
    fad4:	2885883a 	add	r2,r5,r2
    fad8:	1004d17a 	srli	r2,r2,5
    fadc:	10800044 	addi	r2,r2,1
    fae0:	1004917a 	slli	r2,r2,5
    fae4:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fae8:	210007cc 	andi	r4,r4,31
    faec:	20000126 	beq	r4,zero,faf4 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    faf0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    faf4:	0000203a 	flushp
    faf8:	f800283a 	ret

0000fafc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fafc:	213ffe84 	addi	r4,r4,-6
    fb00:	008003c4 	movi	r2,15
    fb04:	11001636 	bltu	r2,r4,fb60 <alt_exception_cause_generated_bad_addr+0x64>
    fb08:	200890ba 	slli	r4,r4,2
    fb0c:	00800074 	movhi	r2,1
    fb10:	10bec804 	addi	r2,r2,-1248
    fb14:	2089883a 	add	r4,r4,r2
    fb18:	20800017 	ldw	r2,0(r4)
    fb1c:	1000683a 	jmp	r2
    fb20:	0000fb68 	cmpgeui	zero,zero,1005
    fb24:	0000fb68 	cmpgeui	zero,zero,1005
    fb28:	0000fb60 	cmpeqi	zero,zero,1005
    fb2c:	0000fb60 	cmpeqi	zero,zero,1005
    fb30:	0000fb60 	cmpeqi	zero,zero,1005
    fb34:	0000fb68 	cmpgeui	zero,zero,1005
    fb38:	0000fb60 	cmpeqi	zero,zero,1005
    fb3c:	0000fb60 	cmpeqi	zero,zero,1005
    fb40:	0000fb68 	cmpgeui	zero,zero,1005
    fb44:	0000fb68 	cmpgeui	zero,zero,1005
    fb48:	0000fb60 	cmpeqi	zero,zero,1005
    fb4c:	0000fb68 	cmpgeui	zero,zero,1005
    fb50:	0000fb60 	cmpeqi	zero,zero,1005
    fb54:	0000fb60 	cmpeqi	zero,zero,1005
    fb58:	0000fb60 	cmpeqi	zero,zero,1005
    fb5c:	0000fb68 	cmpgeui	zero,zero,1005
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fb60:	0005883a 	mov	r2,zero
    fb64:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fb68:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fb6c:	f800283a 	ret

0000fb70 <atexit>:
    fb70:	200b883a 	mov	r5,r4
    fb74:	000f883a 	mov	r7,zero
    fb78:	000d883a 	mov	r6,zero
    fb7c:	0009883a 	mov	r4,zero
    fb80:	000fde81 	jmpi	fde8 <__register_exitproc>

0000fb84 <exit>:
    fb84:	defffe04 	addi	sp,sp,-8
    fb88:	000b883a 	mov	r5,zero
    fb8c:	dc000015 	stw	r16,0(sp)
    fb90:	dfc00115 	stw	ra,4(sp)
    fb94:	2021883a 	mov	r16,r4
    fb98:	000ff000 	call	ff00 <__call_exitprocs>
    fb9c:	00800074 	movhi	r2,1
    fba0:	1088c204 	addi	r2,r2,8968
    fba4:	11000017 	ldw	r4,0(r2)
    fba8:	20800f17 	ldw	r2,60(r4)
    fbac:	10000126 	beq	r2,zero,fbb4 <exit+0x30>
    fbb0:	103ee83a 	callr	r2
    fbb4:	8009883a 	mov	r4,r16
    fbb8:	00100800 	call	10080 <_exit>

0000fbbc <memalign>:
    fbbc:	00800074 	movhi	r2,1
    fbc0:	1088c304 	addi	r2,r2,8972
    fbc4:	280d883a 	mov	r6,r5
    fbc8:	200b883a 	mov	r5,r4
    fbcc:	11000017 	ldw	r4,0(r2)
    fbd0:	000fbd41 	jmpi	fbd4 <_memalign_r>

0000fbd4 <_memalign_r>:
    fbd4:	00800204 	movi	r2,8
    fbd8:	1140532e 	bgeu	r2,r5,fd28 <_memalign_r+0x154>
    fbdc:	defffa04 	addi	sp,sp,-24
    fbe0:	dd000415 	stw	r20,16(sp)
    fbe4:	dc400115 	stw	r17,4(sp)
    fbe8:	dfc00515 	stw	ra,20(sp)
    fbec:	dcc00315 	stw	r19,12(sp)
    fbf0:	dc800215 	stw	r18,8(sp)
    fbf4:	dc000015 	stw	r16,0(sp)
    fbf8:	008003c4 	movi	r2,15
    fbfc:	2823883a 	mov	r17,r5
    fc00:	2029883a 	mov	r20,r4
    fc04:	11400136 	bltu	r2,r5,fc0c <_memalign_r+0x38>
    fc08:	04400404 	movi	r17,16
    fc0c:	308002c4 	addi	r2,r6,11
    fc10:	00c00584 	movi	r3,22
    fc14:	18803e2e 	bgeu	r3,r2,fd10 <_memalign_r+0x13c>
    fc18:	04bffe04 	movi	r18,-8
    fc1c:	14a4703a 	and	r18,r2,r18
    fc20:	90003d16 	blt	r18,zero,fd18 <_memalign_r+0x144>
    fc24:	91803c36 	bltu	r18,r6,fd18 <_memalign_r+0x144>
    fc28:	89400404 	addi	r5,r17,16
    fc2c:	2c8b883a 	add	r5,r5,r18
    fc30:	a009883a 	mov	r4,r20
    fc34:	0001bc80 	call	1bc8 <_malloc_r>
    fc38:	1027883a 	mov	r19,r2
    fc3c:	10004926 	beq	r2,zero,fd64 <_memalign_r+0x190>
    fc40:	a009883a 	mov	r4,r20
    fc44:	000e8500 	call	e850 <__malloc_lock>
    fc48:	880b883a 	mov	r5,r17
    fc4c:	9809883a 	mov	r4,r19
    fc50:	9c3ffe04 	addi	r16,r19,-8
    fc54:	000be280 	call	be28 <__umodsi3>
    fc58:	10001c26 	beq	r2,zero,fccc <_memalign_r+0xf8>
    fc5c:	88bfffc4 	addi	r2,r17,-1
    fc60:	9887883a 	add	r3,r19,r2
    fc64:	0445c83a 	sub	r2,zero,r17
    fc68:	1884703a 	and	r2,r3,r2
    fc6c:	10bffe04 	addi	r2,r2,-8
    fc70:	1409c83a 	sub	r4,r2,r16
    fc74:	014003c4 	movi	r5,15
    fc78:	8007883a 	mov	r3,r16
    fc7c:	29002c0e 	bge	r5,r4,fd30 <_memalign_r+0x15c>
    fc80:	1021883a 	mov	r16,r2
    fc84:	993fff17 	ldw	r4,-4(r19)
    fc88:	00bfff04 	movi	r2,-4
    fc8c:	80c7c83a 	sub	r3,r16,r3
    fc90:	2084703a 	and	r2,r4,r2
    fc94:	10c5c83a 	sub	r2,r2,r3
    fc98:	11000054 	ori	r4,r2,1
    fc9c:	81000115 	stw	r4,4(r16)
    fca0:	8085883a 	add	r2,r16,r2
    fca4:	11800117 	ldw	r6,4(r2)
    fca8:	980b883a 	mov	r5,r19
    fcac:	a009883a 	mov	r4,r20
    fcb0:	31800054 	ori	r6,r6,1
    fcb4:	11800115 	stw	r6,4(r2)
    fcb8:	98bfff17 	ldw	r2,-4(r19)
    fcbc:	1080004c 	andi	r2,r2,1
    fcc0:	10c6b03a 	or	r3,r2,r3
    fcc4:	98ffff15 	stw	r3,-4(r19)
    fcc8:	0006a180 	call	6a18 <_free_r>
    fccc:	80c00117 	ldw	r3,4(r16)
    fcd0:	00bfff04 	movi	r2,-4
    fcd4:	1884703a 	and	r2,r3,r2
    fcd8:	1485c83a 	sub	r2,r2,r18
    fcdc:	00c003c4 	movi	r3,15
    fce0:	18801516 	blt	r3,r2,fd38 <_memalign_r+0x164>
    fce4:	a009883a 	mov	r4,r20
    fce8:	000e8540 	call	e854 <__malloc_unlock>
    fcec:	80800204 	addi	r2,r16,8
    fcf0:	dfc00517 	ldw	ra,20(sp)
    fcf4:	dd000417 	ldw	r20,16(sp)
    fcf8:	dcc00317 	ldw	r19,12(sp)
    fcfc:	dc800217 	ldw	r18,8(sp)
    fd00:	dc400117 	ldw	r17,4(sp)
    fd04:	dc000017 	ldw	r16,0(sp)
    fd08:	dec00604 	addi	sp,sp,24
    fd0c:	f800283a 	ret
    fd10:	04800404 	movi	r18,16
    fd14:	91bfc42e 	bgeu	r18,r6,fc28 <__alt_data_end+0xff00fc28>
    fd18:	00800304 	movi	r2,12
    fd1c:	a0800015 	stw	r2,0(r20)
    fd20:	0005883a 	mov	r2,zero
    fd24:	003ff206 	br	fcf0 <__alt_data_end+0xff00fcf0>
    fd28:	300b883a 	mov	r5,r6
    fd2c:	0001bc81 	jmpi	1bc8 <_malloc_r>
    fd30:	1461883a 	add	r16,r2,r17
    fd34:	003fd306 	br	fc84 <__alt_data_end+0xff00fc84>
    fd38:	848b883a 	add	r5,r16,r18
    fd3c:	10800054 	ori	r2,r2,1
    fd40:	28800115 	stw	r2,4(r5)
    fd44:	80800117 	ldw	r2,4(r16)
    fd48:	29400204 	addi	r5,r5,8
    fd4c:	a009883a 	mov	r4,r20
    fd50:	1080004c 	andi	r2,r2,1
    fd54:	14a4b03a 	or	r18,r2,r18
    fd58:	84800115 	stw	r18,4(r16)
    fd5c:	0006a180 	call	6a18 <_free_r>
    fd60:	003fe006 	br	fce4 <__alt_data_end+0xff00fce4>
    fd64:	0005883a 	mov	r2,zero
    fd68:	003fe106 	br	fcf0 <__alt_data_end+0xff00fcf0>

0000fd6c <memcmp>:
    fd6c:	01c000c4 	movi	r7,3
    fd70:	3980192e 	bgeu	r7,r6,fdd8 <memcmp+0x6c>
    fd74:	2144b03a 	or	r2,r4,r5
    fd78:	11c4703a 	and	r2,r2,r7
    fd7c:	10000f26 	beq	r2,zero,fdbc <memcmp+0x50>
    fd80:	20800003 	ldbu	r2,0(r4)
    fd84:	28c00003 	ldbu	r3,0(r5)
    fd88:	10c0151e 	bne	r2,r3,fde0 <memcmp+0x74>
    fd8c:	31bfff84 	addi	r6,r6,-2
    fd90:	01ffffc4 	movi	r7,-1
    fd94:	00000406 	br	fda8 <memcmp+0x3c>
    fd98:	20800003 	ldbu	r2,0(r4)
    fd9c:	28c00003 	ldbu	r3,0(r5)
    fda0:	31bfffc4 	addi	r6,r6,-1
    fda4:	10c00e1e 	bne	r2,r3,fde0 <memcmp+0x74>
    fda8:	21000044 	addi	r4,r4,1
    fdac:	29400044 	addi	r5,r5,1
    fdb0:	31fff91e 	bne	r6,r7,fd98 <__alt_data_end+0xff00fd98>
    fdb4:	0005883a 	mov	r2,zero
    fdb8:	f800283a 	ret
    fdbc:	20c00017 	ldw	r3,0(r4)
    fdc0:	28800017 	ldw	r2,0(r5)
    fdc4:	18bfee1e 	bne	r3,r2,fd80 <__alt_data_end+0xff00fd80>
    fdc8:	31bfff04 	addi	r6,r6,-4
    fdcc:	21000104 	addi	r4,r4,4
    fdd0:	29400104 	addi	r5,r5,4
    fdd4:	39bff936 	bltu	r7,r6,fdbc <__alt_data_end+0xff00fdbc>
    fdd8:	303fe91e 	bne	r6,zero,fd80 <__alt_data_end+0xff00fd80>
    fddc:	003ff506 	br	fdb4 <__alt_data_end+0xff00fdb4>
    fde0:	10c5c83a 	sub	r2,r2,r3
    fde4:	f800283a 	ret

0000fde8 <__register_exitproc>:
    fde8:	defffa04 	addi	sp,sp,-24
    fdec:	dc000315 	stw	r16,12(sp)
    fdf0:	04000074 	movhi	r16,1
    fdf4:	8408c204 	addi	r16,r16,8968
    fdf8:	80c00017 	ldw	r3,0(r16)
    fdfc:	dc400415 	stw	r17,16(sp)
    fe00:	dfc00515 	stw	ra,20(sp)
    fe04:	18805217 	ldw	r2,328(r3)
    fe08:	2023883a 	mov	r17,r4
    fe0c:	10003726 	beq	r2,zero,feec <__register_exitproc+0x104>
    fe10:	10c00117 	ldw	r3,4(r2)
    fe14:	010007c4 	movi	r4,31
    fe18:	20c00e16 	blt	r4,r3,fe54 <__register_exitproc+0x6c>
    fe1c:	1a000044 	addi	r8,r3,1
    fe20:	8800221e 	bne	r17,zero,feac <__register_exitproc+0xc4>
    fe24:	18c00084 	addi	r3,r3,2
    fe28:	18c7883a 	add	r3,r3,r3
    fe2c:	18c7883a 	add	r3,r3,r3
    fe30:	12000115 	stw	r8,4(r2)
    fe34:	10c7883a 	add	r3,r2,r3
    fe38:	19400015 	stw	r5,0(r3)
    fe3c:	0005883a 	mov	r2,zero
    fe40:	dfc00517 	ldw	ra,20(sp)
    fe44:	dc400417 	ldw	r17,16(sp)
    fe48:	dc000317 	ldw	r16,12(sp)
    fe4c:	dec00604 	addi	sp,sp,24
    fe50:	f800283a 	ret
    fe54:	00800034 	movhi	r2,0
    fe58:	1086e804 	addi	r2,r2,7072
    fe5c:	10002626 	beq	r2,zero,fef8 <__register_exitproc+0x110>
    fe60:	01006404 	movi	r4,400
    fe64:	d9400015 	stw	r5,0(sp)
    fe68:	d9800115 	stw	r6,4(sp)
    fe6c:	d9c00215 	stw	r7,8(sp)
    fe70:	0001ba00 	call	1ba0 <malloc>
    fe74:	d9400017 	ldw	r5,0(sp)
    fe78:	d9800117 	ldw	r6,4(sp)
    fe7c:	d9c00217 	ldw	r7,8(sp)
    fe80:	10001d26 	beq	r2,zero,fef8 <__register_exitproc+0x110>
    fe84:	81000017 	ldw	r4,0(r16)
    fe88:	10000115 	stw	zero,4(r2)
    fe8c:	02000044 	movi	r8,1
    fe90:	22405217 	ldw	r9,328(r4)
    fe94:	0007883a 	mov	r3,zero
    fe98:	12400015 	stw	r9,0(r2)
    fe9c:	20805215 	stw	r2,328(r4)
    fea0:	10006215 	stw	zero,392(r2)
    fea4:	10006315 	stw	zero,396(r2)
    fea8:	883fde26 	beq	r17,zero,fe24 <__alt_data_end+0xff00fe24>
    feac:	18c9883a 	add	r4,r3,r3
    feb0:	2109883a 	add	r4,r4,r4
    feb4:	1109883a 	add	r4,r2,r4
    feb8:	21802215 	stw	r6,136(r4)
    febc:	01800044 	movi	r6,1
    fec0:	12406217 	ldw	r9,392(r2)
    fec4:	30cc983a 	sll	r6,r6,r3
    fec8:	4992b03a 	or	r9,r9,r6
    fecc:	12406215 	stw	r9,392(r2)
    fed0:	21c04215 	stw	r7,264(r4)
    fed4:	01000084 	movi	r4,2
    fed8:	893fd21e 	bne	r17,r4,fe24 <__alt_data_end+0xff00fe24>
    fedc:	11006317 	ldw	r4,396(r2)
    fee0:	218cb03a 	or	r6,r4,r6
    fee4:	11806315 	stw	r6,396(r2)
    fee8:	003fce06 	br	fe24 <__alt_data_end+0xff00fe24>
    feec:	18805304 	addi	r2,r3,332
    fef0:	18805215 	stw	r2,328(r3)
    fef4:	003fc606 	br	fe10 <__alt_data_end+0xff00fe10>
    fef8:	00bfffc4 	movi	r2,-1
    fefc:	003fd006 	br	fe40 <__alt_data_end+0xff00fe40>

0000ff00 <__call_exitprocs>:
    ff00:	defff504 	addi	sp,sp,-44
    ff04:	df000915 	stw	fp,36(sp)
    ff08:	dd400615 	stw	r21,24(sp)
    ff0c:	dc800315 	stw	r18,12(sp)
    ff10:	dfc00a15 	stw	ra,40(sp)
    ff14:	ddc00815 	stw	r23,32(sp)
    ff18:	dd800715 	stw	r22,28(sp)
    ff1c:	dd000515 	stw	r20,20(sp)
    ff20:	dcc00415 	stw	r19,16(sp)
    ff24:	dc400215 	stw	r17,8(sp)
    ff28:	dc000115 	stw	r16,4(sp)
    ff2c:	d9000015 	stw	r4,0(sp)
    ff30:	2839883a 	mov	fp,r5
    ff34:	04800044 	movi	r18,1
    ff38:	057fffc4 	movi	r21,-1
    ff3c:	00800074 	movhi	r2,1
    ff40:	1088c204 	addi	r2,r2,8968
    ff44:	12000017 	ldw	r8,0(r2)
    ff48:	45005217 	ldw	r20,328(r8)
    ff4c:	44c05204 	addi	r19,r8,328
    ff50:	a0001c26 	beq	r20,zero,ffc4 <__call_exitprocs+0xc4>
    ff54:	a0800117 	ldw	r2,4(r20)
    ff58:	15ffffc4 	addi	r23,r2,-1
    ff5c:	b8000d16 	blt	r23,zero,ff94 <__call_exitprocs+0x94>
    ff60:	14000044 	addi	r16,r2,1
    ff64:	8421883a 	add	r16,r16,r16
    ff68:	8421883a 	add	r16,r16,r16
    ff6c:	84402004 	addi	r17,r16,128
    ff70:	a463883a 	add	r17,r20,r17
    ff74:	a421883a 	add	r16,r20,r16
    ff78:	e0001e26 	beq	fp,zero,fff4 <__call_exitprocs+0xf4>
    ff7c:	80804017 	ldw	r2,256(r16)
    ff80:	e0801c26 	beq	fp,r2,fff4 <__call_exitprocs+0xf4>
    ff84:	bdffffc4 	addi	r23,r23,-1
    ff88:	843fff04 	addi	r16,r16,-4
    ff8c:	8c7fff04 	addi	r17,r17,-4
    ff90:	bd7ff91e 	bne	r23,r21,ff78 <__alt_data_end+0xff00ff78>
    ff94:	00800034 	movhi	r2,0
    ff98:	1086ed04 	addi	r2,r2,7092
    ff9c:	10000926 	beq	r2,zero,ffc4 <__call_exitprocs+0xc4>
    ffa0:	a0800117 	ldw	r2,4(r20)
    ffa4:	1000301e 	bne	r2,zero,10068 <__call_exitprocs+0x168>
    ffa8:	a0800017 	ldw	r2,0(r20)
    ffac:	10003226 	beq	r2,zero,10078 <__call_exitprocs+0x178>
    ffb0:	a009883a 	mov	r4,r20
    ffb4:	98800015 	stw	r2,0(r19)
    ffb8:	0001bb40 	call	1bb4 <free>
    ffbc:	9d000017 	ldw	r20,0(r19)
    ffc0:	a03fe41e 	bne	r20,zero,ff54 <__alt_data_end+0xff00ff54>
    ffc4:	dfc00a17 	ldw	ra,40(sp)
    ffc8:	df000917 	ldw	fp,36(sp)
    ffcc:	ddc00817 	ldw	r23,32(sp)
    ffd0:	dd800717 	ldw	r22,28(sp)
    ffd4:	dd400617 	ldw	r21,24(sp)
    ffd8:	dd000517 	ldw	r20,20(sp)
    ffdc:	dcc00417 	ldw	r19,16(sp)
    ffe0:	dc800317 	ldw	r18,12(sp)
    ffe4:	dc400217 	ldw	r17,8(sp)
    ffe8:	dc000117 	ldw	r16,4(sp)
    ffec:	dec00b04 	addi	sp,sp,44
    fff0:	f800283a 	ret
    fff4:	a0800117 	ldw	r2,4(r20)
    fff8:	80c00017 	ldw	r3,0(r16)
    fffc:	10bfffc4 	addi	r2,r2,-1
   10000:	15c01426 	beq	r2,r23,10054 <__call_exitprocs+0x154>
   10004:	80000015 	stw	zero,0(r16)
   10008:	183fde26 	beq	r3,zero,ff84 <__alt_data_end+0xff00ff84>
   1000c:	95c8983a 	sll	r4,r18,r23
   10010:	a0806217 	ldw	r2,392(r20)
   10014:	a5800117 	ldw	r22,4(r20)
   10018:	2084703a 	and	r2,r4,r2
   1001c:	10000b26 	beq	r2,zero,1004c <__call_exitprocs+0x14c>
   10020:	a0806317 	ldw	r2,396(r20)
   10024:	2088703a 	and	r4,r4,r2
   10028:	20000c1e 	bne	r4,zero,1005c <__call_exitprocs+0x15c>
   1002c:	89400017 	ldw	r5,0(r17)
   10030:	d9000017 	ldw	r4,0(sp)
   10034:	183ee83a 	callr	r3
   10038:	a0800117 	ldw	r2,4(r20)
   1003c:	15bfbf1e 	bne	r2,r22,ff3c <__alt_data_end+0xff00ff3c>
   10040:	98800017 	ldw	r2,0(r19)
   10044:	153fcf26 	beq	r2,r20,ff84 <__alt_data_end+0xff00ff84>
   10048:	003fbc06 	br	ff3c <__alt_data_end+0xff00ff3c>
   1004c:	183ee83a 	callr	r3
   10050:	003ff906 	br	10038 <__alt_data_end+0xff010038>
   10054:	a5c00115 	stw	r23,4(r20)
   10058:	003feb06 	br	10008 <__alt_data_end+0xff010008>
   1005c:	89000017 	ldw	r4,0(r17)
   10060:	183ee83a 	callr	r3
   10064:	003ff406 	br	10038 <__alt_data_end+0xff010038>
   10068:	a0800017 	ldw	r2,0(r20)
   1006c:	a027883a 	mov	r19,r20
   10070:	1029883a 	mov	r20,r2
   10074:	003fb606 	br	ff50 <__alt_data_end+0xff00ff50>
   10078:	0005883a 	mov	r2,zero
   1007c:	003ffb06 	br	1006c <__alt_data_end+0xff01006c>

00010080 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10080:	20000226 	beq	r4,zero,1008c <_exit+0xc>
    ALT_SIM_FAIL();
   10084:	002af070 	cmpltui	zero,zero,43969
   10088:	003fff06 	br	10088 <__alt_data_end+0xff010088>
  } else {
    ALT_SIM_PASS();
   1008c:	002af0b0 	cmpltui	zero,zero,43970
   10090:	003ffd06 	br	10088 <__alt_data_end+0xff010088>
