
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000109dc memsz 0x000109dc flags r-x
    LOAD off    0x000119fc vaddr 0x000109fc paddr 0x000124f0 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013fe4 vaddr 0x00013fe4 paddr 0x00013fe4 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000100e8  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000788  00010274  00010274  00011274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  000109fc  000124f0  000119fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00013fe4  00013fe4  00013fe4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014174  00014174  000134f0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000134f0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d8  00000000  00000000  00013518  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002896c  00000000  00000000  000145f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a7df  00000000  00000000  0003cf5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cd23  00000000  00000000  0004773b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022bc  00000000  00000000  00054460  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003eb2  00000000  00000000  0005671c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c8b2  00000000  00000000  0005a5ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00076e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c38  00000000  00000000  00076ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007c55a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007c55d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007c569  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007c56a  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007c56b  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007c56f  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007c573  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007c577  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007c580  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007c589  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007c592  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0007c59d  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007c5eb  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007263d  00000000  00000000  000820c3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
00010274 l    d  .rodata	00000000 .rodata
000109fc l    d  .rwdata	00000000 .rwdata
00013fe4 l    d  .bss	00000000 .bss
00014174 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001075a l     O .rodata	00000010 zeroes.4404
000049f4 l     F .text	000000bc __sbprintf
0001076a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c04 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006734 l     F .text	00000008 __fp_unlock
00006748 l     F .text	0000019c __sinit.part.1
000068e4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010e04 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00011248 l     O .rwdata	00000020 lc_ctype_charset
00011228 l     O .rwdata	00000020 lc_message_charset
00011268 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001079c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009480 l     F .text	000000fc __sprint_r.part.0
000108d0 l     O .rodata	00000010 blanks.4348
000108c0 l     O .rodata	00000010 zeroes.4349
0000aa0c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e784 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000124e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011448 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ed6c l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000edb8 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f2ec l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00014048 g     O .bss	00000004 alt_instruction_exception_handler
00008b18 g     F .text	00000074 _mprec_log10
00008c04 g     F .text	0000008c __any_on
0000afa8 g     F .text	00000054 _isatty_r
000107a8 g     O .rodata	00000028 __mprec_tinytens
0000e9d0 g     F .text	00000060 alt_main
00002620 g     F .text	000000c0 _puts_r
00014074 g     O .bss	00000100 alt_irq
0000affc g     F .text	00000060 _lseek_r
000106ff g     O .rodata	00000009 gy_array
000124f0 g       *ABS*	00000000 __flash_rwdata_start
0000d1f4 g     F .text	00000088 .hidden __eqdf2
00014174 g       *ABS*	00000000 __alt_heap_start
000025e4 g     F .text	0000003c printf
0000b214 g     F .text	0000009c _wcrtomb_r
00009340 g     F .text	0000005c __sseek
00006a84 g     F .text	00000010 __sinit
0000b0bc g     F .text	00000140 __swbuf_r
0000754c g     F .text	0000007c _setlocale_r
000068ec g     F .text	00000068 __sfmoreglue
0000ea34 g     F .text	00000004 __malloc_unlock
0000091c g     F .text	00000014 LCD_Write_Command
00013ff4 g     O .bss	00000004 sobel_width
00014034 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a10 g     F .text	0000015c memmove
00000930 g     F .text	00000014 LCD_Write_Data
00006a6c g     F .text	00000018 _cleanup
00007c94 g     F .text	000000a8 _Balloc
0000d27c g     F .text	000000dc .hidden __gtdf2
0000fb10 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004f0 g     F .text	00000024 cam_get_xsize
0000af4c g     F .text	0000005c _fstat_r
00014018 g     O .bss	00000004 errno
000092bc g     F .text	00000008 __seofread
0001402c g     O .bss	00000004 alt_argv
0001a4a8 g       *ABS*	00000000 _gp
0000ebdc g     F .text	00000004 usleep
0000eb80 g     F .text	0000005c alt_uncached_malloc
000005b0 g     F .text	00000074 cam_set_image_pointer
000112a0 g     O .rwdata	00000180 alt_fd_list
00001d60 g     F .text	00000010 vga_set_pointer
0000fb18 g     F .text	00000078 alt_find_dev
000078c8 g     F .text	00000148 memcpy
0000673c g     F .text	0000000c _cleanup_r
0000e4e0 g     F .text	000000dc .hidden __floatsidf
0000f76c g     F .text	00000104 alt_io_redirect
0000d358 g     F .text	000000f4 .hidden __ltdf2
00010274 g       *ABS*	00000000 __DTOR_END__
000026e0 g     F .text	00000014 puts
0000fcdc g     F .text	00000074 alt_exception_cause_generated_bad_addr
000091f4 g     F .text	00000074 __fpclassifyd
00008a74 g     F .text	000000a4 __ratio
0000a9f0 g     F .text	0000001c __vfiprintf_internal
0000eff8 g     F .text	00000154 altera_avalon_jtag_uart_read
00001d80 g     F .text	00000014 malloc
000025b4 g     F .text	00000030 _printf_r
00000770 g     F .text	00000008 get_grayscale_picture
0000bfa4 g     F .text	00000064 .hidden __udivsi3
000102d4 g     O .rodata	00000128 lens_roll_off_tbl
000001d8 g     F .text	00000318 init_camera
0000e804 g     F .text	00000084 isatty
000107f8 g     O .rodata	000000c8 __mprec_tens
000075c8 g     F .text	0000000c __locale_charset
0000fc8c g     F .text	00000050 alt_icache_flush
00014014 g     O .bss	00000004 __malloc_top_pad
000124c0 g     O .rwdata	00000004 __mb_cur_max
000075f8 g     F .text	0000000c _localeconv_r
0000147c g     F .text	00000140 sobel_x
000080a0 g     F .text	0000003c __i2b
00006f08 g     F .text	000004bc __sfvwrite_r
00000944 g     F .text	00000414 init_LCD
000026f4 g     F .text	00000054 _sbrk_r
000124a8 g     O .rwdata	00000004 pgy_array
00000538 g     F .text	00000078 cam_get_profiling
0000b05c g     F .text	00000060 _read_r
0000f4e0 g     F .text	00000040 alt_dcache_flush
00013ff8 g     O .bss	00000004 sobel_result
000124c8 g     O .rwdata	00000004 alt_max_fd
0000ac40 g     F .text	000000f0 _fclose_r
00006704 g     F .text	00000030 fflush
00014010 g     O .bss	00000004 __malloc_max_sbrked_mem
00013fec g     O .bss	00000004 grayscale_array
0000c060 g     F .text	000008ac .hidden __adddf3
00000514 g     F .text	00000024 cam_get_ysize
0000881c g     F .text	0000010c __b2d
0000b974 g     F .text	00000538 .hidden __umoddi3
0000e954 g     F .text	0000007c lseek
00000838 g     F .text	0000008c i2c_short_read
000124b8 g     O .rwdata	00000004 _global_impure_ptr
00008c90 g     F .text	00000564 _realloc_r
00014174 g       *ABS*	00000000 __bss_end
0000f704 g     F .text	00000068 alt_iic_isr_register
0000fa1c g     F .text	000000f4 alt_tick
0000b3fc g     F .text	00000578 .hidden __udivdi3
0000aea8 g     F .text	00000024 _fputwc_r
000107d0 g     O .rodata	00000028 __mprec_bigtens
00007e84 g     F .text	00000104 __s2b
0000e5bc g     F .text	000000a8 .hidden __floatunsidf
0000855c g     F .text	00000060 __mcmp
00006aa4 g     F .text	00000018 __fp_lock_all
0000f6ec g     F .text	00000018 alt_ic_irq_enabled
00013fe4 g     O .bss	00000004 grayscape_height
0000f9e8 g     F .text	00000034 alt_alarm_stop
0001403c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
00011420 g     O .rwdata	00000028 alt_dev_null
00000de4 g     F .text	00000078 transfer_LCD_with_dma
00001a54 g     F .text	000002fc sobel_complete
0000f520 g     F .text	00000018 alt_dcache_flush_all
00007f88 g     F .text	00000068 __hi0bits
0000e460 g     F .text	00000080 .hidden __fixdfsi
000124f0 g       *ABS*	00000000 __ram_rwdata_end
000124cc g     O .rwdata	00000008 alt_dev_list
0000ebe0 g     F .text	000000c4 write
0000f3e0 g     F .text	00000008 alt_timestamp_freq
000109fc g       *ABS*	00000000 __ram_rodata_end
0000e78c g     F .text	00000078 fstat
0000d358 g     F .text	000000f4 .hidden __ledf2
000082d4 g     F .text	00000140 __pow5mult
00009594 g     F .text	0000145c ___vfiprintf_internal_r
00014024 g     O .bss	00000004 __nlocale_changed
0000c008 g     F .text	00000058 .hidden __umodsi3
00001d50 g     F .text	00000008 GetSobel_rgb
00014174 g       *ABS*	00000000 end
00001d58 g     F .text	00000008 GetSobelResult
00000648 g     F .text	00000020 take_picture_blocking
000006a8 g     F .text	00000014 DIPSW_get_value
00001850 g     F .text	00000168 sobel_y_with_rgb
0000eec0 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000638 g     F .text	00000010 current_image_pointer
00010274 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f328 g     F .text	00000048 alt_avalon_timer_sc_init
0000e664 g     F .text	00000064 .hidden __clzsi2
0000f14c g     F .text	000001a0 altera_avalon_jtag_uart_write
00006a94 g     F .text	00000004 __sfp_lock_acquire
000077e4 g     F .text	000000e4 memchr
000027e0 g     F .text	000021f8 ___vfprintf_internal_r
00006bf8 g     F .text	00000310 _free_r
000075d4 g     F .text	00000010 __locale_mb_cur_max
00001738 g     F .text	00000118 sobel_y
000103fc g     O .rodata	00000140 noise_reduction_reg_settings_array
000100e0 g     F .text	00000180 __call_exitprocs
00014020 g     O .bss	00000004 __mlocale_changed
000124b0 g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000004c _start
00014044 g     O .bss	00000004 _alt_tick_rate
00008414 g     F .text	00000148 __lshift
00014040 g     O .bss	00000004 _alt_nticks
0000ea38 g     F .text	000000c8 read
0000ecc4 g     F .text	0000006c alt_sys_init
000015bc g     F .text	0000017c sobel_x_with_rgb
0000ffc8 g     F .text	00000118 __register_exitproc
000080dc g     F .text	000001f8 __multiply
0000ef38 g     F .text	0000004c altera_avalon_jtag_uart_close
000109fc g       *ABS*	00000000 __ram_rwdata_start
00010274 g       *ABS*	00000000 __ram_rodata_start
0001404c g     O .bss	00000028 __malloc_current_mallinfo
00008928 g     F .text	0000014c __d2b
00013ffc g     O .bss	00000004 sobel_height
00000668 g     F .text	00000014 enable_continues_mode
0000ed30 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
000012dc g     F .text	000000e4 init_sobel_arrays
0000fc3c g     F .text	00000050 alt_get_fd
0000f468 g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ab28 g     F .text	00000054 _close_r
0000ff4c g     F .text	0000007c memcmp
0000ed50 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00014174 g       *ABS*	00000000 __alt_stack_base
0000ed60 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00004ab0 g     F .text	00000154 __swsetup_r
0000c90c g     F .text	000008e8 .hidden __divdf3
00006954 g     F .text	00000118 __sfp
00008b8c g     F .text	00000078 __copybits
000109fc g     O .rwdata	00000408 __malloc_av_
00006aa0 g     F .text	00000004 __sinit_lock_release
0000d44c g     F .text	00000718 .hidden __muldf3
00009268 g     F .text	00000054 __sread
0000fb90 g     F .text	000000ac alt_find_file
0000f538 g     F .text	0000006c alt_dev_llist_insert
0000ea30 g     F .text	00000004 __malloc_lock
0000eb24 g     F .text	0000004c sbrk
000066a8 g     F .text	0000005c _fflush_r
0000ab7c g     F .text	000000c4 _calloc_r
00013fe4 g       *ABS*	00000000 __bss_start
00007b6c g     F .text	00000128 memset
00000e5c g     F .text	00000480 main
00014028 g     O .bss	00000004 alt_envp
0001400c g     O .bss	00000004 __malloc_max_total_mem
00000760 g     F .text	00000008 get_grayscale_width
0000ed40 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b1fc g     F .text	00000018 __swbuf
00014000 g     O .bss	00000004 sobel_x_result
0000939c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ad30 g     F .text	00000014 fclose
0000f370 g     F .text	0000003c alt_timestamp_start
00004e04 g     F .text	00001688 _dtoa_r
00001da8 g     F .text	0000080c _malloc_r
0000b370 g     F .text	00000030 __ascii_wctomb
000124dc g     O .rwdata	00000004 alt_errno
000073c4 g     F .text	000000c4 _fwalk
0000beac g     F .text	00000084 .hidden __divsi3
00006ad4 g     F .text	00000124 _malloc_trim_r
00010274 g       *ABS*	00000000 __CTOR_END__
00013fe8 g     O .bss	00000004 grayscale_width
000093a4 g     F .text	000000dc strcmp
00000d58 g     F .text	0000008c transfer_LCD_no_dma
00010274 g       *ABS*	00000000 __flash_rodata_start
00010274 g       *ABS*	00000000 __DTOR_LIST__
0000d1f4 g     F .text	00000088 .hidden __nedf2
0001053c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eca4 g     F .text	00000020 alt_irq_init
0000eb00 g     F .text	00000024 alt_release_fd
00000790 g     F .text	000000a8 i2c_auto_detect
0000fd9c g     F .text	00000018 memalign
000108e0 g     O .rodata	00000100 .hidden __clz_tab
00000624 g     F .text	00000014 current_image_valid
0001401c g     O .bss	00000004 _PathLocale
00000778 g     F .text	00000018 i2c_busy_wait
0000fd50 g     F .text	00000014 atexit
0000aac8 g     F .text	00000060 _write_r
00007604 g     F .text	00000018 setlocale
000124bc g     O .rwdata	00000004 _impure_ptr
00014030 g     O .bss	00000004 alt_argc
0000648c g     F .text	0000021c __sflush_r
00014038 g     O .bss	00000004 altera_avalon_timer_ts_base
0000f608 g     F .text	00000064 _do_dtors
000075f0 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000087b8 g     F .text	00000064 __ulp
00006abc g     F .text	00000018 __fp_unlock_all
000124d4 g     O .rwdata	00000008 alt_fs_list
00014004 g     O .bss	00000004 sobel_y_result
000008c4 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013ff0 g     O .bss	00000002 LCD_height
0000761c g     F .text	0000000c localeconv
0000f3ac g     F .text	00000034 alt_timestamp
00001d70 g     F .text	00000010 vga_set_swap
0000f678 g     F .text	00000004 alt_ic_isr_register
000019b8 g     F .text	0000009c sobel_threshold
000124f0 g       *ABS*	00000000 _edata
000124ac g     O .rwdata	00000004 pgx_array
00014174 g       *ABS*	00000000 _end
0000ad44 g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000ef84 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00010708 g     O .rodata	00000009 gx_array
0000f6b4 g     F .text	00000038 alt_ic_irq_disable
000092c4 g     F .text	0000007c __swrite
000124b4 g     O .rwdata	00000004 __malloc_trim_threshold
00013ff2 g     O .bss	00000002 LCD_width
000006bc g     F .text	000000a4 conv_grayscale
000075e4 g     F .text	0000000c __locale_msgcharset
0000fd64 g     F .text	00000038 exit
00007488 g     F .text	000000c4 _fwalk_reent
000085bc g     F .text	000001fc __mdiff
0000bf30 g     F .text	00000074 .hidden __modsi3
0000fdb4 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006a98 g     F .text	00000004 __sfp_lock_release
00000768 g     F .text	00000008 get_grayscale_height
00010260 g     F .text	00000014 _exit
000013c0 g     F .text	000000bc sobel_mac
0000f3e8 g     F .text	00000080 alt_alarm_start
00007628 g     F .text	000001bc __smakebuf_r
00014008 g     O .bss	00000004 sobel_rgb565
00002748 g     F .text	00000098 strlen
0000f870 g     F .text	00000178 open
0000d27c g     F .text	000000dc .hidden __gedf2
0000eb70 g     F .text	00000010 alt_uncached_free
000124c4 g     O .rwdata	00000004 __wctomb
0000957c g     F .text	00000018 __sprint_r
0000f66c g     F .text	0000000c alt_icache_flush_all
000124e4 g     O .rwdata	00000004 alt_priority_mask
0000f67c g     F .text	00000038 alt_ic_irq_enable
000049d8 g     F .text	0000001c __vfprintf_internal
0000b3a0 g     F .text	0000005c _wctomb_r
0000db64 g     F .text	000008fc .hidden __subdf3
00007ff0 g     F .text	000000b0 __lo0bits
000124e8 g     O .rwdata	00000008 alt_alarm_list
0000f5a4 g     F .text	00000064 _do_ctors
0000b2b0 g     F .text	000000c0 wcrtomb
0000e6c8 g     F .text	000000bc close
0000e888 g     F .text	000000cc alt_load
0000aecc g     F .text	00000080 fputwc
00001d94 g     F .text	00000014 free
00006a9c g     F .text	00000004 __sinit_lock_acquire
00007d64 g     F .text	00000120 __multadd
00007d3c g     F .text	00000028 _Bfree
0000067c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	84101d04 	addi	r16,r16,16500
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a6e817 	ldw	r2,-25696(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     18c:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
     190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     198:	00bffd16 	blt	zero,r2,190 <__alt_data_end+0xff000190>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     19c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1a4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a8:	d6a92a14 	ori	gp,gp,42152
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1ac:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1b0:	108ff914 	ori	r2,r2,16356

    movhi r3, %hi(__bss_end)
     1b4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b8:	18d05d14 	ori	r3,r3,16756

    beq r2, r3, 1f
     1bc:	10c00326 	beq	r2,r3,1cc <_start+0x40>

0:
    stw zero, (r2)
     1c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c8:	10fffd36 	bltu	r2,r3,1c0 <__alt_data_end+0xff0001c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1cc:	000e8880 	call	e888 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1d0:	000e9d00 	call	e9d0 <alt_main>

000001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1d4:	003fff06 	br	1d4 <__alt_data_end+0xff0001d4>

000001d8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1d8:	00804034 	movhi	r2,256
     1dc:	10842744 	addi	r2,r2,4253
     1e0:	00c00084 	movi	r3,2
     1e4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1e8:	00804034 	movhi	r2,256
     1ec:	10841304 	addi	r2,r2,4172
     1f0:	00c00044 	movi	r3,1
     1f4:	10c00025 	stbio	r3,0(r2)
     1f8:	008003f4 	movhi	r2,15
     1fc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     200:	0001883a 	nop
     204:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     208:	103ffd1e 	bne	r2,zero,200 <__alt_data_end+0xff000200>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     20c:	00804034 	movhi	r2,256
     210:	10841304 	addi	r2,r2,4172
     214:	10000025 	stbio	zero,0(r2)
     218:	008003f4 	movhi	r2,15
     21c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     220:	0001883a 	nop
     224:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     228:	103ffd1e 	bne	r2,zero,220 <__alt_data_end+0xff000220>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     230:	01800044 	movi	r6,1
     234:	014ce184 	movi	r5,13190
     238:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     23c:	dfc00315 	stw	ra,12(sp)
     240:	dc800215 	stw	r18,8(sp)
     244:	dc400115 	stw	r17,4(sp)
     248:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     24c:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     250:	000d883a 	mov	r6,zero
     254:	014ce184 	movi	r5,13190
     258:	01001e04 	movi	r4,120
     25c:	00008c40 	call	8c4 <i2c_short_write>
     260:	008003f4 	movhi	r2,15
     264:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     268:	0001883a 	nop
     26c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     270:	103ffd1e 	bne	r2,zero,268 <__alt_data_end+0xff000268>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     274:	01803104 	movi	r6,196
     278:	014c0684 	movi	r5,12314
     27c:	01001e04 	movi	r4,120
     280:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     284:	01800204 	movi	r6,8
     288:	014c8084 	movi	r5,12802
     28c:	01001e04 	movi	r4,120
     290:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     294:	0180c744 	movi	r6,797
     298:	014cfd04 	movi	r5,13300
     29c:	01001e04 	movi	r4,120
     2a0:	00008c40 	call	8c4 <i2c_short_write>
     2a4:	008000b4 	movhi	r2,2
     2a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2ac:	0001883a 	nop
     2b0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2b4:	103ffd1e 	bne	r2,zero,2ac <__alt_data_end+0xff0002ac>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2b8:	01a3c254 	movui	r6,36617
     2bc:	014d0784 	movi	r5,13342
     2c0:	01001e04 	movi	r4,120
     2c4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2c8:	01805404 	movi	r6,336
     2cc:	014d0704 	movi	r5,13340
     2d0:	01001e04 	movi	r4,120
     2d4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2d8:	01a3c254 	movui	r6,36617
     2dc:	014d0784 	movi	r5,13342
     2e0:	01001e04 	movi	r4,120
     2e4:	00008c40 	call	8c4 <i2c_short_write>
     2e8:	008000b4 	movhi	r2,2
     2ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2f0:	0001883a 	nop
     2f4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2f8:	103ffd1e 	bne	r2,zero,2f0 <__alt_data_end+0xff0002f0>
     2fc:	04000074 	movhi	r16,1
     300:	84014f04 	addi	r16,r16,1340
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     304:	01a3c214 	movui	r6,36616
     308:	014d0784 	movi	r5,13342
     30c:	01001e04 	movi	r4,120
     310:	00008c40 	call	8c4 <i2c_short_write>
     314:	84400084 	addi	r17,r16,2
     318:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     31c:	8980000b 	ldhu	r6,0(r17)
     320:	8140000b 	ldhu	r5,0(r16)
     324:	01001e04 	movi	r4,120
     328:	84000104 	addi	r16,r16,4
     32c:	00008c40 	call	8c4 <i2c_short_write>
     330:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     334:	84bff91e 	bne	r16,r18,31c <__alt_data_end+0xff00031c>
     338:	04000074 	movhi	r16,1
     33c:	8400ff04 	addi	r16,r16,1020
     340:	84400084 	addi	r17,r16,2
     344:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     348:	8980000b 	ldhu	r6,0(r17)
     34c:	8140000b 	ldhu	r5,0(r16)
     350:	01001e04 	movi	r4,120
     354:	84000104 	addi	r16,r16,4
     358:	00008c40 	call	8c4 <i2c_short_write>
     35c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     360:	943ff91e 	bne	r18,r16,348 <__alt_data_end+0xff000348>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     364:	018164c4 	movi	r6,1427
     368:	014d6904 	movi	r5,13732
     36c:	01001e04 	movi	r4,120
     370:	00008c40 	call	8c4 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     374:	0189e644 	movi	r6,10137
     378:	014ce304 	movi	r5,13196
     37c:	01001e04 	movi	r4,120
     380:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     384:	01991004 	movi	r6,25664
     388:	014ce404 	movi	r5,13200
     38c:	01001e04 	movi	r4,120
     390:	00008c40 	call	8c4 <i2c_short_write>
     394:	008000b4 	movhi	r2,2
     398:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     39c:	0001883a 	nop
     3a0:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3a4:	103ffd1e 	bne	r2,zero,39c <__alt_data_end+0xff00039c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     3a8:	0189e6c4 	movi	r6,10139
     3ac:	014ce304 	movi	r5,13196
     3b0:	01001e04 	movi	r4,120
     3b4:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3b8:	01991004 	movi	r6,25664
     3bc:	014ce404 	movi	r5,13200
     3c0:	01001e04 	movi	r4,120
     3c4:	00008c40 	call	8c4 <i2c_short_write>
     3c8:	008000b4 	movhi	r2,2
     3cc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3d0:	0001883a 	nop
     3d4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3d8:	103ffd1e 	bne	r2,zero,3d0 <__alt_data_end+0xff0003d0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3dc:	01a840d4 	movui	r6,41219
     3e0:	014ce304 	movi	r5,13196
     3e4:	01001e04 	movi	r4,120
     3e8:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3ec:	01800144 	movi	r6,5
     3f0:	014ce404 	movi	r5,13200
     3f4:	01001e04 	movi	r4,120
     3f8:	00008c40 	call	8c4 <i2c_short_write>
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     404:	0001883a 	nop
     408:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     40c:	103ffd1e 	bne	r2,zero,404 <__alt_data_end+0xff000404>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     410:	01a840d4 	movui	r6,41219
     414:	014ce304 	movi	r5,13196
     418:	01001e04 	movi	r4,120
     41c:	00008c40 	call	8c4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     420:	01800184 	movi	r6,6
     424:	014ce404 	movi	r5,13200
     428:	01001e04 	movi	r4,120
     42c:	00008c40 	call	8c4 <i2c_short_write>
     430:	008000b4 	movhi	r2,2
     434:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     438:	0001883a 	nop
     43c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     440:	103ffd1e 	bne	r2,zero,438 <__alt_data_end+0xff000438>
     444:	04000074 	movhi	r16,1
     448:	8400b504 	addi	r16,r16,724
     44c:	84400084 	addi	r17,r16,2
     450:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     454:	8980000b 	ldhu	r6,0(r17)
     458:	8140000b 	ldhu	r5,0(r16)
     45c:	01001e04 	movi	r4,120
     460:	84000104 	addi	r16,r16,4
     464:	00008c40 	call	8c4 <i2c_short_write>
     468:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     46c:	943ff91e 	bne	r18,r16,454 <__alt_data_end+0xff000454>
     470:	008003f4 	movhi	r2,15
     474:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     484:	01800804 	movi	r6,32
     488:	014ccb84 	movi	r5,13102
     48c:	01001e04 	movi	r4,120
     490:	00008c40 	call	8c4 <i2c_short_write>
     494:	008003f4 	movhi	r2,15
     498:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     49c:	0001883a 	nop
     4a0:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     4a4:	103ffd1e 	bne	r2,zero,49c <__alt_data_end+0xff00049c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     4a8:	01800884 	movi	r6,34
     4ac:	014d0104 	movi	r5,13316
     4b0:	01001e04 	movi	r4,120
     4b4:	00008c40 	call	8c4 <i2c_short_write>
     4b8:	008003f4 	movhi	r2,15
     4bc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4c0:	0001883a 	nop
     4c4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4c8:	103ffd1e 	bne	r2,zero,4c0 <__alt_data_end+0xff0004c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4cc:	018009c4 	movi	r6,39
     4d0:	014c1004 	movi	r5,12352
     4d4:	01001e04 	movi	r4,120
}
     4d8:	dfc00317 	ldw	ra,12(sp)
     4dc:	dc800217 	ldw	r18,8(sp)
     4e0:	dc400117 	ldw	r17,4(sp)
     4e4:	dc000017 	ldw	r16,0(sp)
     4e8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4ec:	00008c41 	jmpi	8c4 <i2c_short_write>

000004f0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4f0:	00c04034 	movhi	r3,256
     4f4:	18c41304 	addi	r3,r3,4172
     4f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4fc:	1080010c 	andi	r2,r2,4
     500:	103ffd26 	beq	r2,zero,4f8 <__alt_data_end+0xff0004f8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     504:	00804034 	movhi	r2,256
     508:	10841004 	addi	r2,r2,4160
}
     50c:	1080002b 	ldhuio	r2,0(r2)
     510:	f800283a 	ret

00000514 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     514:	00c04034 	movhi	r3,256
     518:	18c41304 	addi	r3,r3,4172
     51c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     520:	1080010c 	andi	r2,r2,4
     524:	103ffd26 	beq	r2,zero,51c <__alt_data_end+0xff00051c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     528:	00804034 	movhi	r2,256
     52c:	10841104 	addi	r2,r2,4164
}
     530:	1080002b 	ldhuio	r2,0(r2)
     534:	f800283a 	ret

00000538 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     538:	00c04034 	movhi	r3,256
     53c:	18c41304 	addi	r3,r3,4172
     540:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     544:	1080010c 	andi	r2,r2,4
     548:	103ffd26 	beq	r2,zero,540 <__alt_data_end+0xff000540>
	printf("Nr. of bytes each line    : %d\n",
     54c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     550:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     554:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     558:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     55c:	1140002b 	ldhuio	r5,0(r2)
     560:	01000074 	movhi	r4,1
     564:	21009d04 	addi	r4,r4,628
     568:	297fffcc 	andi	r5,r5,65535
     56c:	00025e40 	call	25e4 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     570:	00804034 	movhi	r2,256
     574:	10841104 	addi	r2,r2,4164
     578:	1140002b 	ldhuio	r5,0(r2)
     57c:	01000074 	movhi	r4,1
     580:	2100a504 	addi	r4,r4,660
     584:	297fffcc 	andi	r5,r5,65535
     588:	00025e40 	call	25e4 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     58c:	00804034 	movhi	r2,256
     590:	10841204 	addi	r2,r2,4168
     594:	1140002b 	ldhuio	r5,0(r2)
     598:	01000074 	movhi	r4,1
     59c:	2100ad04 	addi	r4,r4,692
     5a0:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     5a4:	dfc00017 	ldw	ra,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     5ac:	00025e41 	jmpi	25e4 <printf>

000005b0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5b0:	21003fcc 	andi	r4,r4,255
     5b4:	2100201c 	xori	r4,r4,128
     5b8:	213fe004 	addi	r4,r4,-128
     5bc:	00800044 	movi	r2,1
     5c0:	20801226 	beq	r4,r2,60c <cam_set_image_pointer+0x5c>
     5c4:	11000c0e 	bge	r2,r4,5f8 <cam_set_image_pointer+0x48>
     5c8:	00800084 	movi	r2,2
     5cc:	20800626 	beq	r4,r2,5e8 <cam_set_image_pointer+0x38>
     5d0:	008000c4 	movi	r2,3
     5d4:	2080111e 	bne	r4,r2,61c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841704 	addi	r2,r2,4188
     5e0:	11400035 	stwio	r5,0(r2)
     5e4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5e8:	00804034 	movhi	r2,256
     5ec:	10841604 	addi	r2,r2,4184
     5f0:	11400035 	stwio	r5,0(r2)
                break;
     5f4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5f8:	2000091e 	bne	r4,zero,620 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841404 	addi	r2,r2,4176
     604:	11400035 	stwio	r5,0(r2)
	            break;
     608:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     60c:	00804034 	movhi	r2,256
     610:	10841504 	addi	r2,r2,4180
     614:	11400035 	stwio	r5,0(r2)
                break;
     618:	f800283a 	ret
     61c:	f800283a 	ret
     620:	f800283a 	ret

00000624 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     624:	00804034 	movhi	r2,256
     628:	10841304 	addi	r2,r2,4172
     62c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     630:	1080800c 	andi	r2,r2,512
     634:	f800283a 	ret

00000638 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     638:	00804034 	movhi	r2,256
     63c:	10841404 	addi	r2,r2,4176
}
     640:	10800037 	ldwio	r2,0(r2)
     644:	f800283a 	ret

00000648 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     648:	00c04034 	movhi	r3,256
     64c:	18c41304 	addi	r3,r3,4172
     650:	00800204 	movi	r2,8
     654:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     658:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     65c:	1080020c 	andi	r2,r2,8
     660:	103ffd1e 	bne	r2,zero,658 <__alt_data_end+0xff000658>
}
     664:	f800283a 	ret

00000668 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     668:	00804034 	movhi	r2,256
     66c:	10841304 	addi	r2,r2,4172
     670:	00c00404 	movi	r3,16
     674:	10c0002d 	sthio	r3,0(r2)
     678:	f800283a 	ret

0000067c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     67c:	00c04034 	movhi	r3,256
     680:	18c41304 	addi	r3,r3,4172
     684:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     688:	1080200c 	andi	r2,r2,128
     68c:	1000021e 	bne	r2,zero,698 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     690:	0005883a 	mov	r2,zero
}
     694:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     698:	00804004 	movi	r2,256
     69c:	1880002d 	sthio	r2,0(r3)
		return 1;
     6a0:	00800044 	movi	r2,1
     6a4:	f800283a 	ret

000006a8 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     6a8:	00804034 	movhi	r2,256
     6ac:	10842804 	addi	r2,r2,4256
     6b0:	10800023 	ldbuio	r2,0(r2)
}
     6b4:	0084303a 	nor	r2,zero,r2
     6b8:	f800283a 	ret

000006bc <conv_grayscale>:
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6bc:	d0a6d117 	ldw	r2,-25788(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6c0:	defffd04 	addi	sp,sp,-12
     6c4:	dc400115 	stw	r17,4(sp)
     6c8:	dc000015 	stw	r16,0(sp)
     6cc:	dfc00215 	stw	ra,8(sp)
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
     6d0:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     6d4:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6d8:	2021883a 	mov	r16,r4
  int k,gray;
  int kmax = width*height;
     6dc:	29a3383a 	mul	r17,r5,r6
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6e0:	10000226 	beq	r2,zero,6ec <conv_grayscale+0x30>
    free(grayscale_array);
     6e4:	1009883a 	mov	r4,r2
     6e8:	0001d940 	call	1d94 <free>
  grayscale_array = (unsigned char *) malloc(kmax);
     6ec:	8809883a 	mov	r4,r17
     6f0:	0001d800 	call	1d80 <malloc>
     6f4:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k<kmax; k++)
     6f8:	0440140e 	bge	zero,r17,74c <conv_grayscale+0x90>
     6fc:	8009883a 	mov	r4,r16
     700:	0013883a 	mov	r9,zero
     704:	00000106 	br	70c <conv_grayscale+0x50>
     708:	d0a6d117 	ldw	r2,-25788(gp)
  {
	  rgb = pixels[k];
     70c:	2200000b 	ldhu	r8,0(r4)
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
     710:	1245883a 	add	r2,r2,r9
     714:	40ffffcc 	andi	r3,r8,65535
     718:	180ed17a 	srli	r7,r3,5
     71c:	1806d2fa 	srli	r3,r3,11
     720:	420007cc 	andi	r8,r8,31
     724:	39c00fcc 	andi	r7,r7,63
     728:	39c00a24 	muli	r7,r7,40
     72c:	18c7883a 	add	r3,r3,r3
     730:	380fd13a 	srai	r7,r7,4
     734:	38c7883a 	add	r3,r7,r3
     738:	1a07883a 	add	r3,r3,r8
     73c:	10c00025 	stbio	r3,0(r2)
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
  for(k = 0; k<kmax; k++)
     740:	4a400044 	addi	r9,r9,1
     744:	21000084 	addi	r4,r4,2
     748:	8a7fef1e 	bne	r17,r9,708 <__alt_data_end+0xff000708>
  {
	  rgb = pixels[k];
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
  }
}
     74c:	dfc00217 	ldw	ra,8(sp)
     750:	dc400117 	ldw	r17,4(sp)
     754:	dc000017 	ldw	r16,0(sp)
     758:	dec00304 	addi	sp,sp,12
     75c:	f800283a 	ret

00000760 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     760:	d0a6d017 	ldw	r2,-25792(gp)
     764:	f800283a 	ret

00000768 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     768:	d0a6cf17 	ldw	r2,-25796(gp)
     76c:	f800283a 	ret

00000770 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     770:	d0a6d117 	ldw	r2,-25788(gp)
     774:	f800283a 	ret

00000778 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     778:	00c04034 	movhi	r3,256
     77c:	18c42704 	addi	r3,r3,4252
     780:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     784:	108000cc 	andi	r2,r2,3
     788:	103ffd1e 	bne	r2,zero,780 <__alt_data_end+0xff000780>
}
     78c:	f800283a 	ret

00000790 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     790:	01004034 	movhi	r4,256
     794:	21042704 	addi	r4,r4,4252
     798:	00c04034 	movhi	r3,256
     79c:	18c42704 	addi	r3,r3,4252
     7a0:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7a4:	108000cc 	andi	r2,r2,3
     7a8:	103ffb1e 	bne	r2,zero,798 <__alt_data_end+0xff000798>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     7ac:	00800104 	movi	r2,4
     7b0:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     7b4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7b8:	108000cc 	andi	r2,r2,3
     7bc:	103ffd1e 	bne	r2,zero,7b4 <__alt_data_end+0xff0007b4>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7c0:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7c4:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7c8:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7cc:	dfc00315 	stw	ra,12(sp)
     7d0:	dc800215 	stw	r18,8(sp)
     7d4:	dc400115 	stw	r17,4(sp)
     7d8:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7dc:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     7e0:	01000074 	movhi	r4,1
     7e4:	21019504 	addi	r4,r4,1620
     7e8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     7ec:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     7f0:	00025e40 	call	25e4 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     7f4:	04800a0e 	bge	zero,r18,820 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     7f8:	04404034 	movhi	r17,256
     7fc:	8c442404 	addi	r17,r17,4240
     800:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     804:	89800037 	ldwio	r6,0(r17)
     808:	01000074 	movhi	r4,1
     80c:	800b883a 	mov	r5,r16
     810:	21019e04 	addi	r4,r4,1656
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     814:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     818:	00025e40 	call	25e4 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     81c:	943ff81e 	bne	r18,r16,800 <__alt_data_end+0xff000800>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     820:	dfc00317 	ldw	ra,12(sp)
     824:	dc800217 	ldw	r18,8(sp)
     828:	dc400117 	ldw	r17,4(sp)
     82c:	dc000017 	ldw	r16,0(sp)
     830:	dec00404 	addi	sp,sp,16
     834:	f800283a 	ret

00000838 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     838:	01804034 	movhi	r6,256
     83c:	31842704 	addi	r6,r6,4252
     840:	00c04034 	movhi	r3,256
     844:	18c42704 	addi	r3,r3,4252
     848:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     84c:	108000cc 	andi	r2,r2,3
     850:	103ffb1e 	bne	r2,zero,840 <__alt_data_end+0xff000840>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     854:	00804034 	movhi	r2,256
     858:	21003fcc 	andi	r4,r4,255
     85c:	10842404 	addi	r2,r2,4240
     860:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     864:	00804034 	movhi	r2,256
     868:	10842504 	addi	r2,r2,4244
     86c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     870:	008010c4 	movi	r2,67
     874:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     878:	180b883a 	mov	r5,r3
     87c:	00c04034 	movhi	r3,256
     880:	18c42704 	addi	r3,r3,4252
     884:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     888:	108000cc 	andi	r2,r2,3
     88c:	103ffb1e 	bne	r2,zero,87c <__alt_data_end+0xff00087c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     890:	00804034 	movhi	r2,256
     894:	21000044 	addi	r4,r4,1
     898:	10842404 	addi	r2,r2,4240
     89c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     8a0:	00800884 	movi	r2,34
     8a4:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8a8:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8ac:	108000cc 	andi	r2,r2,3
     8b0:	103ffd1e 	bne	r2,zero,8a8 <__alt_data_end+0xff0008a8>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     8b4:	00804034 	movhi	r2,256
     8b8:	10842604 	addi	r2,r2,4248
}
     8bc:	10800037 	ldwio	r2,0(r2)
     8c0:	f800283a 	ret

000008c4 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8c4:	01c04034 	movhi	r7,256
     8c8:	39c42704 	addi	r7,r7,4252
     8cc:	00c04034 	movhi	r3,256
     8d0:	18c42704 	addi	r3,r3,4252
     8d4:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8d8:	108000cc 	andi	r2,r2,3
     8dc:	103ffb1e 	bne	r2,zero,8cc <__alt_data_end+0xff0008cc>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8e0:	00804034 	movhi	r2,256
     8e4:	10842404 	addi	r2,r2,4240
     8e8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     8ec:	00804034 	movhi	r2,256
     8f0:	10842504 	addi	r2,r2,4244
     8f4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     8f8:	00804034 	movhi	r2,256
     8fc:	10842604 	addi	r2,r2,4248
     900:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     904:	00801084 	movi	r2,66
     908:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     90c:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     910:	108000cc 	andi	r2,r2,3
     914:	103ffd1e 	bne	r2,zero,90c <__alt_data_end+0xff00090c>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     918:	f800283a 	ret

0000091c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     91c:	00804034 	movhi	r2,256
     920:	10841804 	addi	r2,r2,4192
     924:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     928:	01000284 	movi	r4,10
     92c:	000ebdc1 	jmpi	ebdc <usleep>

00000930 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     930:	00804034 	movhi	r2,256
     934:	10841904 	addi	r2,r2,4196
     938:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     93c:	01000284 	movi	r4,10
     940:	000ebdc1 	jmpi	ebdc <usleep>

00000944 <init_LCD>:
}


void init_LCD() {
     944:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     948:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     94c:	dd400515 	stw	r21,20(sp)
     950:	dfc00815 	stw	ra,32(sp)
     954:	ddc00715 	stw	r23,28(sp)
     958:	dd800615 	stw	r22,24(sp)
     95c:	dd000415 	stw	r20,16(sp)
     960:	dcc00315 	stw	r19,12(sp)
     964:	dc800215 	stw	r18,8(sp)
     968:	dc400115 	stw	r17,4(sp)
     96c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     970:	05400084 	movi	r21,2
     974:	10841a04 	addi	r2,r2,4200
     978:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     97c:	04804034 	movhi	r18,256
     980:	94841804 	addi	r18,r18,4192
     984:	00800a04 	movi	r2,40
     988:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     98c:	04000284 	movi	r16,10
     990:	8009883a 	mov	r4,r16
     994:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     998:	05c00444 	movi	r23,17
     99c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     9a0:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9a4:	04404034 	movhi	r17,256
     9a8:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     9ac:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9b0:	0027883a 	mov	r19,zero
     9b4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9b8:	8009883a 	mov	r4,r16
     9bc:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9c0:	008032c4 	movi	r2,203
     9c4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     9c8:	8009883a 	mov	r4,r16
     9cc:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d0:	00800e44 	movi	r2,57
     9d4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9d8:	8009883a 	mov	r4,r16
     9dc:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e0:	00800b04 	movi	r2,44
     9e4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9e8:	8009883a 	mov	r4,r16
     9ec:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9f0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9f4:	8009883a 	mov	r4,r16
     9f8:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9fc:	00800d04 	movi	r2,52
     a00:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a04:	8009883a 	mov	r4,r16
     a08:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a0c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     a10:	8009883a 	mov	r4,r16
     a14:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a18:	008033c4 	movi	r2,207
     a1c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a20:	8009883a 	mov	r4,r16
     a24:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a28:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a2c:	8009883a 	mov	r4,r16
     a30:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a34:	05802044 	movi	r22,129
     a38:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     a3c:	8009883a 	mov	r4,r16
     a40:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a44:	00800c04 	movi	r2,48
     a48:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a4c:	8009883a 	mov	r4,r16
     a50:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a54:	00803a04 	movi	r2,232
     a58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a5c:	8009883a 	mov	r4,r16
     a60:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	00802144 	movi	r2,133
     a68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a6c:	8009883a 	mov	r4,r16
     a70:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a74:	05000044 	movi	r20,1
     a78:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     a7c:	8009883a 	mov	r4,r16
     a80:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a84:	00801e44 	movi	r2,121
     a88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a8c:	8009883a 	mov	r4,r16
     a90:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a94:	00803a84 	movi	r2,234
     a98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a9c:	8009883a 	mov	r4,r16
     aa0:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa8:	8009883a 	mov	r4,r16
     aac:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ab0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	00801904 	movi	r2,100
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	008000c4 	movi	r2,3
     ad0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
     ad8:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	00800484 	movi	r2,18
     ae0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ae4:	8009883a 	mov	r4,r16
     ae8:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aec:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     af0:	8009883a 	mov	r4,r16
     af4:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     af8:	00803dc4 	movi	r2,247
     afc:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
     b04:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b08:	00800804 	movi	r2,32
     b0c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b10:	8009883a 	mov	r4,r16
     b14:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b18:	00803004 	movi	r2,192
     b1c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	05800984 	movi	r22,38
     b2c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b38:	00800104 	movi	r2,4
     b3c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b48:	00803044 	movi	r2,193
     b4c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b50:	8009883a 	mov	r4,r16
     b54:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b58:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b64:	00803144 	movi	r2,197
     b68:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00800d44 	movi	r2,53
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b84:	00800f84 	movi	r2,62
     b88:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b94:	008031c4 	movi	r2,199
     b98:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ba4:	00802f84 	movi	r2,190
     ba8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bb4:	00802c44 	movi	r2,177
     bb8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bbc:	8009883a 	mov	r4,r16
     bc0:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bd0:	00800404 	movi	r2,16
     bd4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     be0:	00800e84 	movi	r2,58
     be4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bf0:	00801544 	movi	r2,85
     bf4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c00:	00802d84 	movi	r2,182
     c04:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c08:	8009883a 	mov	r4,r16
     c0c:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c10:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c1c:	00802884 	movi	r2,162
     c20:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c2c:	00803c84 	movi	r2,242
     c30:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c34:	8009883a 	mov	r4,r16
     c38:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c3c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     c40:	8009883a 	mov	r4,r16
     c44:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c48:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     c4c:	8009883a 	mov	r4,r16
     c50:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c54:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     c58:	8009883a 	mov	r4,r16
     c5c:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c60:	00800d84 	movi	r2,54
     c64:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c68:	8009883a 	mov	r4,r16
     c6c:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c70:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c7c:	00800a84 	movi	r2,42
     c80:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c84:	8009883a 	mov	r4,r16
     c88:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c8c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c90:	8009883a 	mov	r4,r16
     c94:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c98:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c9c:	8009883a 	mov	r4,r16
     ca0:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cb0:	00803bc4 	movi	r2,239
     cb4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000ebdc0 	call	ebdc <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cc0:	00800ac4 	movi	r2,43
     cc4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cc8:	8009883a 	mov	r4,r16
     ccc:	000ebdc0 	call	ebdc <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd4:	8009883a 	mov	r4,r16
     cd8:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cdc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     ce0:	8009883a 	mov	r4,r16
     ce4:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000ebdc0 	call	ebdc <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cf4:	00800fc4 	movi	r2,63
     cf8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cfc:	8009883a 	mov	r4,r16
     d00:	000ebdc0 	call	ebdc <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     d04:	00c04034 	movhi	r3,256
     d08:	00803c04 	movi	r2,240
     d0c:	18c41d04 	addi	r3,r3,4212
     d10:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     d14:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     d18:	00805004 	movi	r2,320
     d1c:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d20:	00800a44 	movi	r2,41
     d24:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d28:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     d2c:	dfc00817 	ldw	ra,32(sp)
     d30:	ddc00717 	ldw	r23,28(sp)
     d34:	dd800617 	ldw	r22,24(sp)
     d38:	dd400517 	ldw	r21,20(sp)
     d3c:	dd000417 	ldw	r20,16(sp)
     d40:	dcc00317 	ldw	r19,12(sp)
     d44:	dc800217 	ldw	r18,8(sp)
     d48:	dc400117 	ldw	r17,4(sp)
     d4c:	dc000017 	ldw	r16,0(sp)
     d50:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d54:	000ebdc1 	jmpi	ebdc <usleep>

00000d58 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d58:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d5c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d60:	dc000015 	stw	r16,0(sp)
     d64:	dfc00415 	stw	ra,16(sp)
     d68:	dcc00315 	stw	r19,12(sp)
     d6c:	dc800215 	stw	r18,8(sp)
     d70:	dc400115 	stw	r17,4(sp)
     d74:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d78:	10841e04 	addi	r2,r2,4216
     d7c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d80:	00804034 	movhi	r2,256
     d84:	10841804 	addi	r2,r2,4192
     d88:	00c00b04 	movi	r3,44
     d8c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d90:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d94:	01000284 	movi	r4,10
     d98:	000ebdc0 	call	ebdc <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d9c:	90000a26 	beq	r18,zero,dc8 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     da0:	04c04034 	movhi	r19,256
     da4:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     da8:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     dac:	8080000b 	ldhu	r2,0(r16)
     db0:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     db4:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     db8:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     dbc:	000ebdc0 	call	ebdc <usleep>
     dc0:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     dc4:	8cbff91e 	bne	r17,r18,dac <__alt_data_end+0xff000dac>
		LCD_Write_Data(data_array[pixels]);
}
     dc8:	dfc00417 	ldw	ra,16(sp)
     dcc:	dcc00317 	ldw	r19,12(sp)
     dd0:	dc800217 	ldw	r18,8(sp)
     dd4:	dc400117 	ldw	r17,4(sp)
     dd8:	dc000017 	ldw	r16,0(sp)
     ddc:	dec00504 	addi	sp,sp,20
     de0:	f800283a 	ret

00000de4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     de4:	d0a6d20b 	ldhu	r2,-25784(gp)
     de8:	3080010e 	bge	r6,r2,df0 <transfer_LCD_with_dma+0xc>
     dec:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     df0:	d0e6d28b 	ldhu	r3,-25782(gp)
     df4:	28c0010e 	bge	r5,r3,dfc <transfer_LCD_with_dma+0x18>
     df8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     dfc:	01804034 	movhi	r6,256
     e00:	31841e04 	addi	r6,r6,4216
     e04:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     e08:	01404034 	movhi	r5,256
     e0c:	29441b04 	addi	r5,r5,4204
     e10:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     e14:	18ffffcc 	andi	r3,r3,65535
     e18:	10bfffcc 	andi	r2,r2,65535
     e1c:	1885383a 	mul	r2,r3,r2
     e20:	00c04034 	movhi	r3,256
     e24:	18c41c04 	addi	r3,r3,4208
     e28:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     e2c:	39c03fcc 	andi	r7,r7,255
     e30:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e34:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e38:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e3c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e40:	38000326 	beq	r7,zero,e50 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e44:	00c04404 	movi	r3,272
     e48:	10c0002d 	sthio	r3,0(r2)
     e4c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e50:	00c04004 	movi	r3,256
     e54:	10c0002d 	sthio	r3,0(r2)
     e58:	f800283a 	ret

00000e5c <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     e5c:	defff504 	addi	sp,sp,-44
     e60:	dfc00a15 	stw	ra,40(sp)
     e64:	dd800715 	stw	r22,28(sp)
     e68:	dd400615 	stw	r21,24(sp)
     e6c:	dd000515 	stw	r20,20(sp)
     e70:	dcc00415 	stw	r19,16(sp)
     e74:	dc800315 	stw	r18,12(sp)
     e78:	dc400215 	stw	r17,8(sp)
     e7c:	dc000115 	stw	r16,4(sp)
     e80:	df000915 	stw	fp,36(sp)
     e84:	ddc00815 	stw	r23,32(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     e88:	00009440 	call	944 <init_LCD>
  init_camera();
     e8c:	00001d80 	call	1d8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     e90:	01000604 	movi	r4,24
     e94:	0001d700 	call	1d70 <vga_set_swap>
  printf("Hello from Nios II!\n");
     e98:	01000074 	movhi	r4,1
     e9c:	2101a704 	addi	r4,r4,1692
     ea0:	00026e00 	call	26e0 <puts>
  cam_get_profiling();
     ea4:	00005380 	call	538 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ea8:	00004f00 	call	4f0 <cam_get_xsize>
     eac:	1021883a 	mov	r16,r2
     eb0:	00005140 	call	514 <cam_get_ysize>
     eb4:	10bfffcc 	andi	r2,r2,65535
     eb8:	813fffcc 	andi	r4,r16,65535
     ebc:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     ec0:	04c00044 	movi	r19,1
     ec4:	05000084 	movi	r20,2
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ec8:	0001d800 	call	1d80 <malloc>
     ecc:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ed0:	00004f00 	call	4f0 <cam_get_xsize>
     ed4:	1021883a 	mov	r16,r2
     ed8:	00005140 	call	514 <cam_get_ysize>
     edc:	10bfffcc 	andi	r2,r2,65535
     ee0:	813fffcc 	andi	r4,r16,65535
     ee4:	2089383a 	mul	r4,r4,r2
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     ee8:	05604414 	movui	r21,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     eec:	0001d800 	call	1d80 <malloc>
     ef0:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ef4:	00004f00 	call	4f0 <cam_get_xsize>
     ef8:	1021883a 	mov	r16,r2
     efc:	00005140 	call	514 <cam_get_ysize>
     f00:	10bfffcc 	andi	r2,r2,65535
     f04:	813fffcc 	andi	r4,r16,65535
     f08:	2089383a 	mul	r4,r4,r2
     f0c:	0001d800 	call	1d80 <malloc>
     f10:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f14:	00004f00 	call	4f0 <cam_get_xsize>
     f18:	1021883a 	mov	r16,r2
     f1c:	00005140 	call	514 <cam_get_ysize>
     f20:	10bfffcc 	andi	r2,r2,65535
     f24:	813fffcc 	andi	r4,r16,65535
     f28:	2089383a 	mul	r4,r4,r2
     f2c:	0001d800 	call	1d80 <malloc>
  cam_set_image_pointer(0,buffer1);
     f30:	b00b883a 	mov	r5,r22
     f34:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f38:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     f3c:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     f40:	900b883a 	mov	r5,r18
     f44:	9809883a 	mov	r4,r19
     f48:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     f4c:	880b883a 	mov	r5,r17
     f50:	a009883a 	mov	r4,r20
     f54:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     f58:	800b883a 	mov	r5,r16
     f5c:	010000c4 	movi	r4,3
     f60:	00005b00 	call	5b0 <cam_set_image_pointer>
  enable_continues_mode();
     f64:	00006680 	call	668 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
     f68:	00004f00 	call	4f0 <cam_get_xsize>
     f6c:	1021883a 	mov	r16,r2
     f70:	00005140 	call	514 <cam_get_ysize>
     f74:	813fffcc 	andi	r4,r16,65535
     f78:	24c8d83a 	srl	r4,r4,r19
     f7c:	117fffcc 	andi	r5,r2,65535
     f80:	00012dc0 	call	12dc <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
     f84:	000067c0 	call	67c <new_image_available>
     f88:	10803fcc 	andi	r2,r2,255
     f8c:	1080201c 	xori	r2,r2,128
     f90:	10bfe004 	addi	r2,r2,-128
     f94:	103ffb26 	beq	r2,zero,f84 <__alt_data_end+0xff000f84>
		  if (current_image_valid()!=0) {
     f98:	00006240 	call	624 <current_image_valid>
     f9c:	10bfffcc 	andi	r2,r2,65535
     fa0:	10a0001c 	xori	r2,r2,32768
     fa4:	10a00004 	addi	r2,r2,-32768
     fa8:	103ff626 	beq	r2,zero,f84 <__alt_data_end+0xff000f84>
			  current_mode = DIPSW_get_value();
     fac:	00006a80 	call	6a8 <DIPSW_get_value>
     fb0:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
     fb4:	00006380 	call	638 <current_image_pointer>
     fb8:	1025883a 	mov	r18,r2
		      switch (mode) {
     fbc:	808001cc 	andi	r2,r16,7
     fc0:	14c03b26 	beq	r2,r19,10b0 <main+0x254>
     fc4:	1000aa26 	beq	r2,zero,1270 <main+0x414>
     fc8:	15008526 	beq	r2,r20,11e0 <main+0x384>
     fcc:	00c000c4 	movi	r3,3
     fd0:	10c0561e 	bne	r2,r3,112c <main+0x2d0>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
     fd4:	000f3700 	call	f370 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
     fd8:	000f3ac0 	call	f3ac <alt_timestamp>
     fdc:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
     fe0:	00004f00 	call	4f0 <cam_get_xsize>
     fe4:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
     fe8:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
     fec:	897fffcc 	andi	r5,r17,65535
     ff0:	280ad07a 	srli	r5,r5,1
     ff4:	11bfffcc 	andi	r6,r2,65535
     ff8:	9009883a 	mov	r4,r18
     ffc:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1000:	000f3ac0 	call	f3ac <alt_timestamp>
    1004:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1008:	00007700 	call	770 <get_grayscale_picture>
    100c:	1039883a 	mov	fp,r2
		               alt_timestamp_start();
    1010:	000f3700 	call	f370 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1014:	000f3ac0 	call	f3ac <alt_timestamp>
		               sobel_x(grayscale);
    1018:	e009883a 	mov	r4,fp
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    101c:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    1020:	000147c0 	call	147c <sobel_x>
		               end_sobel_x = alt_timestamp();
    1024:	000f3ac0 	call	f3ac <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    1028:	e009883a 	mov	r4,fp
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    102c:	1025883a 	mov	r18,r2
		               sobel_y_with_rgb(grayscale);
    1030:	00018500 	call	1850 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1034:	0001d500 	call	1d50 <GetSobel_rgb>
    1038:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    103c:	00004f00 	call	4f0 <cam_get_xsize>
    1040:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),0);
    1044:	d8c00015 	stw	r3,0(sp)
    1048:	00005140 	call	514 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    104c:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1050:	84003fcc 	andi	r16,r16,255
    1054:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1058:	197fffcc 	andi	r5,r3,65535
    105c:	280ad07a 	srli	r5,r5,1
    1060:	000f883a 	mov	r7,zero
    1064:	11bfffcc 	andi	r6,r2,65535
    1068:	e549883a 	add	r4,fp,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    106c:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1070:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1074:	80008e16 	blt	r16,zero,12b0 <main+0x454>
    1078:	95e5c83a 	sub	r18,r18,r23
    107c:	8da3c83a 	sub	r17,r17,r22
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1080:	01000074 	movhi	r4,1
    1084:	2101ac04 	addi	r4,r4,1712
    1088:	00026e00 	call	26e0 <puts>
		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
    108c:	01000074 	movhi	r4,1
    1090:	900b883a 	mov	r5,r18
    1094:	2101b404 	addi	r4,r4,1744
    1098:	00025e40 	call	25e4 <printf>
//		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
//		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
//		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    109c:	01000074 	movhi	r4,1
    10a0:	880b883a 	mov	r5,r17
    10a4:	2101ba04 	addi	r4,r4,1768
    10a8:	00025e40 	call	25e4 <printf>
    10ac:	003fb506 	br	f84 <__alt_data_end+0xff000f84>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    10b0:	000f3700 	call	f370 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    10b4:	000f3ac0 	call	f3ac <alt_timestamp>
    10b8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    10bc:	00004f00 	call	4f0 <cam_get_xsize>
    10c0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    10c4:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10c8:	897fffcc 	andi	r5,r17,65535
    10cc:	280ad07a 	srli	r5,r5,1
    10d0:	9009883a 	mov	r4,r18
    10d4:	11bfffcc 	andi	r6,r2,65535
    10d8:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10dc:	000f3ac0 	call	f3ac <alt_timestamp>
    10e0:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    10e4:	00007700 	call	770 <get_grayscale_picture>
    10e8:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    10ec:	00004f00 	call	4f0 <cam_get_xsize>
    10f0:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    10f4:	00005140 	call	514 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    10f8:	917fffcc 	andi	r5,r18,65535
    10fc:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1100:	84003fcc 	andi	r16,r16,255
    1104:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1108:	980f883a 	mov	r7,r19
    110c:	11bfffcc 	andi	r6,r2,65535
    1110:	b9102204 	addi	r4,r23,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1114:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1118:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    111c:	80006616 	blt	r16,zero,12b8 <main+0x45c>
    1120:	8da3c83a 	sub	r17,r17,r22
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1124:	0025883a 	mov	r18,zero
    1128:	003fd506 	br	1080 <__alt_data_end+0xff001080>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    112c:	000f3700 	call	f370 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1130:	000f3ac0 	call	f3ac <alt_timestamp>
    1134:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1138:	00004f00 	call	4f0 <cam_get_xsize>
    113c:	1023883a 	mov	r17,r2
	                                  cam_get_ysize());
    1140:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1144:	897fffcc 	andi	r5,r17,65535
    1148:	280ad07a 	srli	r5,r5,1
    114c:	11bfffcc 	andi	r6,r2,65535
    1150:	9009883a 	mov	r4,r18
    1154:	00006bc0 	call	6bc <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1158:	000f3ac0 	call	f3ac <alt_timestamp>
    115c:	1023883a 	mov	r17,r2
                       grayscale = get_grayscale_picture();
    1160:	00007700 	call	770 <get_grayscale_picture>
    1164:	1025883a 	mov	r18,r2

                       alt_timestamp_start();
    1168:	000f3700 	call	f370 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    116c:	000f3ac0 	call	f3ac <alt_timestamp>
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    1170:	9009883a 	mov	r4,r18
    1174:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    1178:	102f883a 	mov	r23,r2
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    117c:	0001a540 	call	1a54 <sobel_complete>
                       end_sobel_x = alt_timestamp();
    1180:	000f3ac0 	call	f3ac <alt_timestamp>
    1184:	1025883a 	mov	r18,r2
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
    1188:	0001d580 	call	1d58 <GetSobelResult>
    118c:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1190:	00004f00 	call	4f0 <cam_get_xsize>
    1194:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    1198:	d8c00015 	stw	r3,0(sp)
    119c:	00005140 	call	514 <cam_get_ysize>
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11a0:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11a4:	84003fcc 	andi	r16,r16,255
    11a8:	8400201c 	xori	r16,r16,128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11ac:	197fffcc 	andi	r5,r3,65535
    11b0:	280ad07a 	srli	r5,r5,1
    11b4:	01c00044 	movi	r7,1
    11b8:	11bfffcc 	andi	r6,r2,65535
    11bc:	e1102204 	addi	r4,fp,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11c0:	843fe004 	addi	r16,r16,-128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11c4:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11c8:	803fab0e 	bge	r16,zero,1078 <__alt_data_end+0xff001078>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    11cc:	01000604 	movi	r4,24
    11d0:	0001d700 	call	1d70 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    11d4:	e009883a 	mov	r4,fp
    11d8:	0001d600 	call	1d60 <vga_set_pointer>
    11dc:	003fa606 	br	1078 <__alt_data_end+0xff001078>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    11e0:	000f3700 	call	f370 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    11e4:	000f3ac0 	call	f3ac <alt_timestamp>
    11e8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11ec:	00004f00 	call	4f0 <cam_get_xsize>
    11f0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    11f4:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    11f8:	897fffcc 	andi	r5,r17,65535
    11fc:	280ad07a 	srli	r5,r5,1
    1200:	11bfffcc 	andi	r6,r2,65535
    1204:	9009883a 	mov	r4,r18
    1208:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    120c:	000f3ac0 	call	f3ac <alt_timestamp>
    1210:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1214:	00007700 	call	770 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1218:	1009883a 	mov	r4,r2
    121c:	00015bc0 	call	15bc <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1220:	0001d500 	call	1d50 <GetSobel_rgb>
    1224:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1228:	00004f00 	call	4f0 <cam_get_xsize>
    122c:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1230:	00005140 	call	514 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1234:	917fffcc 	andi	r5,r18,65535
    1238:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    123c:	84003fcc 	andi	r16,r16,255
    1240:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1244:	000f883a 	mov	r7,zero
    1248:	11bfffcc 	andi	r6,r2,65535
    124c:	bd49883a 	add	r4,r23,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1250:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1254:	0000de40 	call	de4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1258:	803fb10e 	bge	r16,zero,1120 <__alt_data_end+0xff001120>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    125c:	01000204 	movi	r4,8
    1260:	0001d700 	call	1d70 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1264:	b809883a 	mov	r4,r23
    1268:	0001d600 	call	1d60 <vga_set_pointer>
    126c:	003fac06 	br	1120 <__alt_data_end+0xff001120>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1270:	00004f00 	call	4f0 <cam_get_xsize>
    1274:	1023883a 	mov	r17,r2
		                	cam_get_ysize(),0);
    1278:	00005140 	call	514 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    127c:	897fffcc 	andi	r5,r17,65535
    1280:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1284:	84003fcc 	andi	r16,r16,255
    1288:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    128c:	000f883a 	mov	r7,zero
    1290:	11bfffcc 	andi	r6,r2,65535
    1294:	9549883a 	add	r4,r18,r21
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1298:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    129c:	0000de40 	call	de4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12a0:	80000716 	blt	r16,zero,12c0 <main+0x464>
    12a4:	0023883a 	mov	r17,zero
    12a8:	0025883a 	mov	r18,zero
    12ac:	003f7406 	br	1080 <__alt_data_end+0xff001080>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12b0:	01000204 	movi	r4,8
    12b4:	003fc606 	br	11d0 <__alt_data_end+0xff0011d0>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12b8:	01000604 	movi	r4,24
    12bc:	003fe806 	br	1260 <__alt_data_end+0xff001260>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12c0:	01000204 	movi	r4,8
    12c4:	0001d700 	call	1d70 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12c8:	9009883a 	mov	r4,r18
    12cc:	0001d600 	call	1d60 <vga_set_pointer>
    12d0:	0023883a 	mov	r17,zero
    12d4:	0025883a 	mov	r18,zero
    12d8:	003f6906 	br	1080 <__alt_data_end+0xff001080>

000012dc <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12dc:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    12e0:	defffd04 	addi	sp,sp,-12
    12e4:	dc400115 	stw	r17,4(sp)
    12e8:	dc000015 	stw	r16,0(sp)
    12ec:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    12f0:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    12f4:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    12f8:	2023883a 	mov	r17,r4
    12fc:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1300:	10000226 	beq	r2,zero,130c <init_sobel_arrays+0x30>
		free(sobel_x_result);
    1304:	1009883a 	mov	r4,r2
    1308:	0001d940 	call	1d94 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    130c:	8c21383a 	mul	r16,r17,r16
    1310:	8423883a 	add	r17,r16,r16
    1314:	8809883a 	mov	r4,r17
    1318:	0001d800 	call	1d80 <malloc>
	if (sobel_y_result != NULL)
    131c:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1320:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    1324:	20000126 	beq	r4,zero,132c <init_sobel_arrays+0x50>
		free(sobel_y_result);
    1328:	0001d940 	call	1d94 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    132c:	8809883a 	mov	r4,r17
    1330:	0001d800 	call	1d80 <malloc>
	if (sobel_result != NULL)
    1334:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1338:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    133c:	20000126 	beq	r4,zero,1344 <init_sobel_arrays+0x68>
		alt_uncached_free(sobel_result);
    1340:	000eb700 	call	eb70 <alt_uncached_free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1344:	8009883a 	mov	r4,r16
    1348:	000eb800 	call	eb80 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    134c:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1350:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    1354:	20000126 	beq	r4,zero,135c <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1358:	0001d940 	call	1d94 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    135c:	8809883a 	mov	r4,r17
    1360:	0001d800 	call	1d80 <malloc>
    1364:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1368:	0005883a 	mov	r2,zero
    136c:	04000f0e 	bge	zero,r16,13ac <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    1370:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    1374:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    1378:	d1a6d417 	ldw	r6,-25776(gp)
    137c:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1380:	40d1883a 	add	r8,r8,r3
    1384:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1388:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    138c:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1390:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    1394:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1398:	d1a6d817 	ldw	r6,-25760(gp)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    139c:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    13a0:	30c7883a 	add	r3,r6,r3
    13a4:	1800000d 	sth	zero,0(r3)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    13a8:	80bff11e 	bne	r16,r2,1370 <__alt_data_end+0xff001370>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    13ac:	dfc00217 	ldw	ra,8(sp)
    13b0:	dc400117 	ldw	r17,4(sp)
    13b4:	dc000017 	ldw	r16,0(sp)
    13b8:	dec00304 	addi	sp,sp,12
    13bc:	f800283a 	ret

000013c0 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    13c0:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13c4:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13c8:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13cc:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13d0:	3b8000c7 	ldb	r14,3(r7)
    13d4:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13d8:	5185883a 	add	r2,r10,r6
    13dc:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13e0:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    13e4:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13e8:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13ec:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13f0:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13f4:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13f8:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13fc:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    1400:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1404:	49000043 	ldbu	r4,1(r9)
    1408:	3a800147 	ldb	r10,5(r7)
    140c:	139d383a 	mul	r14,r2,r14
    1410:	60d9383a 	mul	r12,r12,r3
    1414:	68800003 	ldbu	r2,0(r13)
    1418:	38c001c7 	ldb	r3,7(r7)
    141c:	5a17383a 	mul	r11,r11,r8
    1420:	33ffffc3 	ldbu	r15,-1(r6)
    1424:	3a000007 	ldb	r8,0(r7)
    1428:	2295383a 	mul	r10,r4,r10
    142c:	31000043 	ldbu	r4,1(r6)
    1430:	39800087 	ldb	r6,2(r7)
    1434:	730b883a 	add	r5,r14,r12
    1438:	10d3383a 	mul	r9,r2,r3
    143c:	6b3fffc3 	ldbu	r12,-1(r13)
    1440:	38c00187 	ldb	r3,6(r7)
    1444:	2acb883a 	add	r5,r5,r11
    1448:	7a11383a 	mul	r8,r15,r8
    144c:	6ac00043 	ldbu	r11,1(r13)
    1450:	39c00207 	ldb	r7,8(r7)
    1454:	2a8b883a 	add	r5,r5,r10
    1458:	2189383a 	mul	r4,r4,r6
    145c:	2a45883a 	add	r2,r5,r9
    1460:	60c7383a 	mul	r3,r12,r3
    1464:	1205883a 	add	r2,r2,r8
    1468:	59cb383a 	mul	r5,r11,r7
    146c:	1105883a 	add	r2,r2,r4
    1470:	10c5883a 	add	r2,r2,r3
}
    1474:	1145883a 	add	r2,r2,r5
    1478:	f800283a 	ret

0000147c <sobel_x>:

void sobel_x( unsigned char *source ) {
    147c:	defff604 	addi	sp,sp,-40
    1480:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1484:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    1488:	dfc00915 	stw	ra,36(sp)
    148c:	df000815 	stw	fp,32(sp)
    1490:	ddc00715 	stw	r23,28(sp)
    1494:	dd800615 	stw	r22,24(sp)
    1498:	dd400515 	stw	r21,20(sp)
    149c:	dd000415 	stw	r20,16(sp)
    14a0:	dcc00315 	stw	r19,12(sp)
    14a4:	dc800215 	stw	r18,8(sp)
    14a8:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    14ac:	8c7fffc4 	addi	r17,r17,-1
    14b0:	00800044 	movi	r2,1
    14b4:	14402e0e 	bge	r2,r17,1570 <sobel_x+0xf4>
    14b8:	d366d317 	ldw	r13,-25780(gp)
    14bc:	d3e6d617 	ldw	r15,-25768(gp)
    14c0:	03800084 	movi	r14,2
    14c4:	6b65883a 	add	r18,r13,r13
    14c8:	9385883a 	add	r2,r18,r14
    14cc:	2359883a 	add	r12,r4,r13
    14d0:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    14d4:	7027883a 	mov	r19,r14
    14d8:	736bc83a 	sub	r21,r14,r13
    14dc:	6ba9883a 	add	r20,r13,r14
    14e0:	9b402f0e 	bge	r19,r13,15a0 <sobel_x+0x124>
    14e4:	637f883a 	add	ra,r12,r13
    14e8:	7021883a 	mov	r16,r14
    14ec:	6357c83a 	sub	r11,r12,r13
    14f0:	ab0b883a 	add	r5,r21,r12
    14f4:	62800084 	addi	r10,r12,2
    14f8:	f813883a 	mov	r9,ra
    14fc:	a311883a 	add	r8,r20,r12
    1500:	780f883a 	mov	r7,r15
    1504:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1508:	29000003 	ldbu	r4,0(r5)
    150c:	40c00003 	ldbu	r3,0(r8)
    1510:	37000003 	ldbu	fp,0(r6)
    1514:	50800003 	ldbu	r2,0(r10)
    1518:	20c7883a 	add	r3,r4,r3
    151c:	5dc00003 	ldbu	r23,0(r11)
    1520:	1f07c83a 	sub	r3,r3,fp
    1524:	4d800003 	ldbu	r22,0(r9)
    1528:	1f09c83a 	sub	r4,r3,fp
    152c:	1087883a 	add	r3,r2,r2
    1530:	20c7883a 	add	r3,r4,r3
    1534:	1dc5c83a 	sub	r2,r3,r23
    1538:	1585c83a 	sub	r2,r2,r22
    153c:	3880000d 	sth	r2,0(r7)
    1540:	29400044 	addi	r5,r5,1
    1544:	5ac00044 	addi	r11,r11,1
    1548:	31800044 	addi	r6,r6,1
    154c:	52800044 	addi	r10,r10,1
    1550:	4a400044 	addi	r9,r9,1
    1554:	42000044 	addi	r8,r8,1
    1558:	39c00084 	addi	r7,r7,2
void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    155c:	617fea1e 	bne	r12,r5,1508 <__alt_data_end+0xff001508>
    1560:	73800044 	addi	r14,r14,1
    1564:	f819883a 	mov	r12,ra
    1568:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    156c:	847fdc16 	blt	r16,r17,14e0 <__alt_data_end+0xff0014e0>
//		  result += pgx_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}
    1570:	dfc00917 	ldw	ra,36(sp)
    1574:	df000817 	ldw	fp,32(sp)
    1578:	ddc00717 	ldw	r23,28(sp)
    157c:	dd800617 	ldw	r22,24(sp)
    1580:	dd400517 	ldw	r21,20(sp)
    1584:	dd000417 	ldw	r20,16(sp)
    1588:	dcc00317 	ldw	r19,12(sp)
    158c:	dc800217 	ldw	r18,8(sp)
    1590:	dc400117 	ldw	r17,4(sp)
    1594:	dc000017 	ldw	r16,0(sp)
    1598:	dec00a04 	addi	sp,sp,40
    159c:	f800283a 	ret
    15a0:	7021883a 	mov	r16,r14
    15a4:	637f883a 	add	ra,r12,r13
    15a8:	73800044 	addi	r14,r14,1
    15ac:	f819883a 	mov	r12,ra
    15b0:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15b4:	847fca16 	blt	r16,r17,14e0 <__alt_data_end+0xff0014e0>
    15b8:	003fed06 	br	1570 <__alt_data_end+0xff001570>

000015bc <sobel_x_with_rgb>:
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15bc:	defff504 	addi	sp,sp,-44
    15c0:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15c4:	d5a6d517 	ldw	r22,-25772(gp)
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15c8:	dfc00a15 	stw	ra,40(sp)
    15cc:	df000915 	stw	fp,36(sp)
    15d0:	ddc00815 	stw	r23,32(sp)
    15d4:	dd400615 	stw	r21,24(sp)
    15d8:	dd000515 	stw	r20,20(sp)
    15dc:	dcc00415 	stw	r19,16(sp)
    15e0:	dc800315 	stw	r18,12(sp)
    15e4:	dc400215 	stw	r17,8(sp)
    15e8:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15ec:	b5bfffc4 	addi	r22,r22,-1
    15f0:	00800044 	movi	r2,1
    15f4:	1580440e 	bge	r2,r22,1708 <sobel_x_with_rgb+0x14c>
    15f8:	d7e6d317 	ldw	ra,-25780(gp)
    15fc:	d4a6d617 	ldw	r18,-25768(gp)
    1600:	d466d817 	ldw	r17,-25760(gp)
    1604:	ffe9883a 	add	r20,ra,ra
    1608:	a0800084 	addi	r2,r20,2
    160c:	04000084 	movi	r16,2
    1610:	90a5883a 	add	r18,r18,r2
    1614:	88a3883a 	add	r17,r17,r2
    1618:	fc05883a 	add	r2,ra,r16
    161c:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1620:	802f883a 	mov	r23,r16
    1624:	87f9c83a 	sub	fp,r16,ra
    1628:	d8800015 	stw	r2,0(sp)
    162c:	bfc02f0e 	bge	r23,ra,16ec <sobel_x_with_rgb+0x130>
    1630:	d8800017 	ldw	r2,0(sp)
    1634:	7fe7883a 	add	r19,r15,ra
    1638:	802b883a 	mov	r21,r16
    163c:	7fdbc83a 	sub	r13,r15,ra
    1640:	e3cf883a 	add	r7,fp,r15
    1644:	7b000084 	addi	r12,r15,2
    1648:	9817883a 	mov	r11,r19
    164c:	13d5883a 	add	r10,r2,r15
    1650:	881d883a 	mov	r14,r17
    1654:	9013883a 	mov	r9,r18
    1658:	7811883a 	mov	r8,r15
    165c:	00000b06 	br	168c <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1660:	180692fa 	slli	r3,r3,11
    1664:	70c0000d 	sth	r3,0(r14)
    1668:	39c00044 	addi	r7,r7,1
    166c:	6b400044 	addi	r13,r13,1
    1670:	42000044 	addi	r8,r8,1
    1674:	63000044 	addi	r12,r12,1
    1678:	5ac00044 	addi	r11,r11,1
    167c:	52800044 	addi	r10,r10,1
    1680:	4a400084 	addi	r9,r9,2
    1684:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1688:	79c01a26 	beq	r15,r7,16f4 <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    168c:	50800003 	ldbu	r2,0(r10)
    1690:	39400003 	ldbu	r5,0(r7)
    1694:	41800003 	ldbu	r6,0(r8)
    1698:	60c00003 	ldbu	r3,0(r12)
    169c:	288b883a 	add	r5,r5,r2
    16a0:	298bc83a 	sub	r5,r5,r6
    16a4:	68800003 	ldbu	r2,0(r13)
    16a8:	59000003 	ldbu	r4,0(r11)
    16ac:	298bc83a 	sub	r5,r5,r6
    16b0:	18c7883a 	add	r3,r3,r3
    16b4:	28c7883a 	add	r3,r5,r3
    16b8:	1887c83a 	sub	r3,r3,r2
    16bc:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    16c0:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    16c4:	10bfffcc 	andi	r2,r2,65535
    16c8:	10a0001c 	xori	r2,r2,32768
    16cc:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16d0:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    16d4:	103fe20e 	bge	r2,zero,1660 <__alt_data_end+0xff001660>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    16d8:	0085c83a 	sub	r2,zero,r2
    16dc:	1005d0ba 	srai	r2,r2,2
    16e0:	1004917a 	slli	r2,r2,5
    16e4:	7080000d 	sth	r2,0(r14)
    16e8:	003fdf06 	br	1668 <__alt_data_end+0xff001668>
    16ec:	802b883a 	mov	r21,r16
    16f0:	7fe7883a 	add	r19,r15,ra
    16f4:	84000044 	addi	r16,r16,1
    16f8:	981f883a 	mov	r15,r19
    16fc:	9525883a 	add	r18,r18,r20
    1700:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1704:	adbfc916 	blt	r21,r22,162c <__alt_data_end+0xff00162c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1708:	dfc00a17 	ldw	ra,40(sp)
    170c:	df000917 	ldw	fp,36(sp)
    1710:	ddc00817 	ldw	r23,32(sp)
    1714:	dd800717 	ldw	r22,28(sp)
    1718:	dd400617 	ldw	r21,24(sp)
    171c:	dd000517 	ldw	r20,20(sp)
    1720:	dcc00417 	ldw	r19,16(sp)
    1724:	dc800317 	ldw	r18,12(sp)
    1728:	dc400217 	ldw	r17,8(sp)
    172c:	dc000117 	ldw	r16,4(sp)
    1730:	dec00b04 	addi	sp,sp,44
    1734:	f800283a 	ret

00001738 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1738:	defff704 	addi	sp,sp,-36
    173c:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1740:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1744:	dfc00815 	stw	ra,32(sp)
    1748:	ddc00715 	stw	r23,28(sp)
    174c:	dd800615 	stw	r22,24(sp)
    1750:	dd400515 	stw	r21,20(sp)
    1754:	dd000415 	stw	r20,16(sp)
    1758:	dcc00315 	stw	r19,12(sp)
    175c:	dc800215 	stw	r18,8(sp)
    1760:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1764:	8c7fffc4 	addi	r17,r17,-1
    1768:	00800044 	movi	r2,1
    176c:	14402d0e 	bge	r2,r17,1824 <sobel_y+0xec>
    1770:	d3e6d317 	ldw	r15,-25780(gp)
    1774:	d3a6d717 	ldw	r14,-25764(gp)
    1778:	03400084 	movi	r13,2
    177c:	7bff883a 	add	ra,r15,r15
    1780:	fb67883a 	add	r19,ra,r13
    1784:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1788:	6825883a 	mov	r18,r13
    178c:	f8a9883a 	add	r20,ra,r2
    1790:	6821883a 	mov	r16,r13
    1794:	93c01f0e 	bge	r18,r15,1814 <sobel_y+0xdc>
    1798:	27cd883a 	add	r6,r4,ra
    179c:	6821883a 	mov	r16,r13
    17a0:	22c00044 	addi	r11,r4,1
    17a4:	22800084 	addi	r10,r4,2
    17a8:	a113883a 	add	r9,r20,r4
    17ac:	990b883a 	add	r5,r19,r4
    17b0:	7999883a 	add	r12,r15,r6
    17b4:	7011883a 	mov	r8,r14
    17b8:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    17bc:	3d800003 	ldbu	r22,0(r7)
    17c0:	50c00003 	ldbu	r3,0(r10)
    17c4:	58800003 	ldbu	r2,0(r11)
    17c8:	4d400003 	ldbu	r21,0(r9)
    17cc:	b0c7883a 	add	r3,r22,r3
    17d0:	1085883a 	add	r2,r2,r2
    17d4:	35c00003 	ldbu	r23,0(r6)
    17d8:	1887883a 	add	r3,r3,r2
    17dc:	2d800003 	ldbu	r22,0(r5)
    17e0:	1d47c83a 	sub	r3,r3,r21
    17e4:	1d47c83a 	sub	r3,r3,r21
    17e8:	1dc5c83a 	sub	r2,r3,r23
    17ec:	1585c83a 	sub	r2,r2,r22
    17f0:	4080000d 	sth	r2,0(r8)
    17f4:	29400044 	addi	r5,r5,1
    17f8:	39c00044 	addi	r7,r7,1
    17fc:	5ac00044 	addi	r11,r11,1
    1800:	52800044 	addi	r10,r10,1
    1804:	31800044 	addi	r6,r6,1
    1808:	4a400044 	addi	r9,r9,1
    180c:	42000084 	addi	r8,r8,2
void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1810:	617fea1e 	bne	r12,r5,17bc <__alt_data_end+0xff0017bc>
    1814:	6b400044 	addi	r13,r13,1
    1818:	23c9883a 	add	r4,r4,r15
    181c:	77dd883a 	add	r14,r14,ra

void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1820:	847fdb16 	blt	r16,r17,1790 <__alt_data_end+0xff001790>
//		  result += pgy_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}
    1824:	dfc00817 	ldw	ra,32(sp)
    1828:	ddc00717 	ldw	r23,28(sp)
    182c:	dd800617 	ldw	r22,24(sp)
    1830:	dd400517 	ldw	r21,20(sp)
    1834:	dd000417 	ldw	r20,16(sp)
    1838:	dcc00317 	ldw	r19,12(sp)
    183c:	dc800217 	ldw	r18,8(sp)
    1840:	dc400117 	ldw	r17,4(sp)
    1844:	dc000017 	ldw	r16,0(sp)
    1848:	dec00904 	addi	sp,sp,36
    184c:	f800283a 	ret

00001850 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1850:	defff604 	addi	sp,sp,-40
    1854:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1858:	d4e6d517 	ldw	r19,-25772(gp)
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    185c:	dfc00915 	stw	ra,36(sp)
    1860:	df000815 	stw	fp,32(sp)
    1864:	ddc00715 	stw	r23,28(sp)
    1868:	dd800615 	stw	r22,24(sp)
    186c:	dd400515 	stw	r21,20(sp)
    1870:	dd000415 	stw	r20,16(sp)
    1874:	dc800215 	stw	r18,8(sp)
    1878:	dc400115 	stw	r17,4(sp)
    187c:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1880:	9cffffc4 	addi	r19,r19,-1
    1884:	00800044 	movi	r2,1
    1888:	14c03f0e 	bge	r2,r19,1988 <sobel_y_with_rgb+0x138>
    188c:	d466d317 	ldw	r17,-25780(gp)
    1890:	d426d717 	ldw	r16,-25764(gp)
    1894:	d7e6d817 	ldw	ra,-25760(gp)
    1898:	8c5d883a 	add	r14,r17,r17
    189c:	75000084 	addi	r20,r14,2
    18a0:	03c00084 	movi	r15,2
    18a4:	8521883a 	add	r16,r16,r20
    18a8:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    18ac:	782b883a 	mov	r21,r15
    18b0:	70ad883a 	add	r22,r14,r2
    18b4:	7825883a 	mov	r18,r15
    18b8:	ac402e0e 	bge	r21,r17,1974 <sobel_y_with_rgb+0x124>
    18bc:	238d883a 	add	r6,r4,r14
    18c0:	7825883a 	mov	r18,r15
    18c4:	22c00044 	addi	r11,r4,1
    18c8:	22800084 	addi	r10,r4,2
    18cc:	b113883a 	add	r9,r22,r4
    18d0:	a10b883a 	add	r5,r20,r4
    18d4:	899b883a 	add	r13,r17,r6
    18d8:	f819883a 	mov	r12,ra
    18dc:	8011883a 	mov	r8,r16
    18e0:	200f883a 	mov	r7,r4
    18e4:	00000b06 	br	1914 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    18e8:	180692fa 	slli	r3,r3,11
    18ec:	60c0000d 	sth	r3,0(r12)
    18f0:	29400044 	addi	r5,r5,1
    18f4:	39c00044 	addi	r7,r7,1
    18f8:	5ac00044 	addi	r11,r11,1
    18fc:	52800044 	addi	r10,r10,1
    1900:	31800044 	addi	r6,r6,1
    1904:	4a400044 	addi	r9,r9,1
    1908:	42000084 	addi	r8,r8,2
    190c:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1910:	69401826 	beq	r13,r5,1974 <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1914:	50800003 	ldbu	r2,0(r10)
    1918:	3f000003 	ldbu	fp,0(r7)
    191c:	58c00003 	ldbu	r3,0(r11)
    1920:	4dc00003 	ldbu	r23,0(r9)
    1924:	e0b9883a 	add	fp,fp,r2
    1928:	18c7883a 	add	r3,r3,r3
    192c:	30800003 	ldbu	r2,0(r6)
    1930:	e0c7883a 	add	r3,fp,r3
    1934:	1dc7c83a 	sub	r3,r3,r23
    1938:	2f000003 	ldbu	fp,0(r5)
    193c:	1dc7c83a 	sub	r3,r3,r23
    1940:	1885c83a 	sub	r2,r3,r2
    1944:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1948:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    194c:	10bfffcc 	andi	r2,r2,65535
    1950:	10a0001c 	xori	r2,r2,32768
    1954:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1958:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    195c:	103fe20e 	bge	r2,zero,18e8 <__alt_data_end+0xff0018e8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1960:	0085c83a 	sub	r2,zero,r2
    1964:	1005d0ba 	srai	r2,r2,2
    1968:	1004917a 	slli	r2,r2,5
    196c:	6080000d 	sth	r2,0(r12)
    1970:	003fdf06 	br	18f0 <__alt_data_end+0xff0018f0>
    1974:	7bc00044 	addi	r15,r15,1
    1978:	2449883a 	add	r4,r4,r17
    197c:	83a1883a 	add	r16,r16,r14
    1980:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1984:	94ffcb16 	blt	r18,r19,18b4 <__alt_data_end+0xff0018b4>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1988:	dfc00917 	ldw	ra,36(sp)
    198c:	df000817 	ldw	fp,32(sp)
    1990:	ddc00717 	ldw	r23,28(sp)
    1994:	dd800617 	ldw	r22,24(sp)
    1998:	dd400517 	ldw	r21,20(sp)
    199c:	dd000417 	ldw	r20,16(sp)
    19a0:	dcc00317 	ldw	r19,12(sp)
    19a4:	dc800217 	ldw	r18,8(sp)
    19a8:	dc400117 	ldw	r17,4(sp)
    19ac:	dc000017 	ldw	r16,0(sp)
    19b0:	dec00a04 	addi	sp,sp,40
    19b4:	f800283a 	ret

000019b8 <sobel_threshold>:

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    19b8:	d0a6d317 	ldw	r2,-25780(gp)
    19bc:	d2a6d517 	ldw	r10,-25772(gp)
	for(k = 1; k<kmax; k++)
    19c0:	01800044 	movi	r6,1
}

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    19c4:	5095383a 	mul	r10,r10,r2
	for(k = 1; k<kmax; k++)
    19c8:	3280210e 	bge	r6,r10,1a50 <sobel_threshold+0x98>
    19cc:	213fffcc 	andi	r4,r4,65535
    19d0:	2120001c 	xori	r4,r4,32768
    19d4:	21200004 	addi	r4,r4,-32768
	{
		value = sobel_x_result[k];
    19d8:	d166d617 	ldw	r5,-25768(gp)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19dc:	d0e6d717 	ldw	r3,-25764(gp)
    19e0:	3185883a 	add	r2,r6,r6
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    19e4:	288b883a 	add	r5,r5,r2
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19e8:	1887883a 	add	r3,r3,r2
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    19ec:	2880000b 	ldhu	r2,0(r5)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19f0:	1940000b 	ldhu	r5,0(r3)
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    19f4:	d266d417 	ldw	r9,-25776(gp)
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19f8:	11ffffcc 	andi	r7,r2,65535
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19fc:	2a3fffcc 	andi	r8,r5,65535
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a00:	39e0001c 	xori	r7,r7,32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a04:	4220001c 	xori	r8,r8,32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a08:	39e00004 	addi	r7,r7,-32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a0c:	42200004 	addi	r8,r8,-32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a10:	380fd7fa 	srai	r7,r7,31
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a14:	4011d7fa 	srai	r8,r8,31
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a18:	4993883a 	add	r9,r9,r6
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a1c:	3887883a 	add	r3,r7,r2
    1a20:	414b883a 	add	r5,r8,r5
    1a24:	414af03a 	xor	r5,r8,r5
    1a28:	38c4f03a 	xor	r2,r7,r3
    1a2c:	2885883a 	add	r2,r5,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a30:	10bfffcc 	andi	r2,r2,65535
    1a34:	10a0001c 	xori	r2,r2,32768
    1a38:	10a00004 	addi	r2,r2,-32768
    1a3c:	2084803a 	cmplt	r2,r4,r2
    1a40:	0085c83a 	sub	r2,zero,r2
    1a44:	48800005 	stb	r2,0(r9)

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
    1a48:	31800044 	addi	r6,r6,1
    1a4c:	51bfe21e 	bne	r10,r6,19d8 <__alt_data_end+0xff0019d8>
    1a50:	f800283a 	ret

00001a54 <sobel_complete>:
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a54:	d0e6d517 	ldw	r3,-25772(gp)
    1a58:	00800084 	movi	r2,2
    1a5c:	10c0b60e 	bge	r2,r3,1d38 <sobel_complete+0x2e4>
    1a60:	297fffcc 	andi	r5,r5,65535
    1a64:	2960001c 	xori	r5,r5,32768
    1a68:	d3a6d317 	ldw	r14,-25780(gp)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a6c:	defff004 	addi	sp,sp,-64
    1a70:	29600004 	addi	r5,r5,-32768
    1a74:	dfc00f15 	stw	ra,60(sp)
    1a78:	df000e15 	stw	fp,56(sp)
    1a7c:	ddc00d15 	stw	r23,52(sp)
    1a80:	dd800c15 	stw	r22,48(sp)
    1a84:	dd400b15 	stw	r21,44(sp)
    1a88:	dd000a15 	stw	r20,40(sp)
    1a8c:	dcc00915 	stw	r19,36(sp)
    1a90:	dc800815 	stw	r18,32(sp)
    1a94:	dc400715 	stw	r17,28(sp)
    1a98:	dc000615 	stw	r16,24(sp)
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a9c:	d8800115 	stw	r2,4(sp)
    1aa0:	d9400415 	stw	r5,16(sp)
    1aa4:	203f883a 	mov	ra,r4
    1aa8:	da400117 	ldw	r9,4(sp)
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1aac:	02c00084 	movi	r11,2
    1ab0:	4a7fffc4 	addi	r9,r9,-1
    1ab4:	da400215 	stw	r9,8(sp)
    1ab8:	5b80a00e 	bge	r11,r14,1d3c <sobel_complete+0x2e8>
    1abc:	d8c00117 	ldw	r3,4(sp)
    1ac0:	d9000117 	ldw	r4,4(sp)
    1ac4:	18ffff84 	addi	r3,r3,-2
    1ac8:	d8c00315 	stw	r3,12(sp)
    1acc:	00c00044 	movi	r3,1
    1ad0:	d9000515 	stw	r4,20(sp)
    1ad4:	1805883a 	mov	r2,r3
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1ad8:	d8c00317 	ldw	r3,12(sp)
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;
    1adc:	d9000217 	ldw	r4,8(sp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1ae0:	d9800117 	ldw	r6,4(sp)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1ae4:	70cb383a 	mul	r5,r14,r3
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;
    1ae8:	7107383a 	mul	r3,r14,r4

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1aec:	13400044 	addi	r13,r2,1
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1af0:	d1200117 	ldw	r4,-32764(gp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    1af4:	28a5883a 	add	r18,r5,r2
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1af8:	2b63883a 	add	r17,r5,r13
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1afc:	719d383a 	mul	r14,r14,r6
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    1b00:	fca5883a 	add	r18,ra,r18
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
    1b04:	188d883a 	add	r6,r3,r2
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    1b08:	fc63883a 	add	r17,ra,r17
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b0c:	25400047 	ldb	r21,1(r4)
    1b10:	8a400003 	ldbu	r9,0(r17)
    1b14:	94c00003 	ldbu	r19,0(r18)
    1b18:	23000087 	ldb	r12,2(r4)
	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
    1b1c:	f9a9883a 	add	r20,ra,r6
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b20:	a2000003 	ldbu	r8,0(r20)
    1b24:	22c00107 	ldb	r11,4(r4)
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    1b28:	1b4f883a 	add	r7,r3,r13
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b2c:	ace7383a 	mul	r19,r21,r19
    1b30:	6259383a 	mul	r12,r12,r9
    1b34:	22400207 	ldb	r9,8(r4)
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    1b38:	f9ed883a 	add	r22,ra,r7
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    1b3c:	70a1883a 	add	r16,r14,r2
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b40:	5a17383a 	mul	r11,r11,r8
    1b44:	b1c00003 	ldbu	r7,0(r22)
    1b48:	27000147 	ldb	fp,5(r4)
    1b4c:	10bfffc4 	addi	r2,r2,-1
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    1b50:	fc21883a 	add	r16,ra,r16
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    1b54:	6b9f883a 	add	r15,r13,r14
	   sobel_x_result[arrayindex] = result;
    1b58:	25c001c7 	ldb	r23,7(r4)
    1b5c:	82800003 	ldbu	r10,0(r16)
    1b60:	da40000d 	sth	r9,0(sp)
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    1b64:	fbdf883a 	add	r15,ra,r15
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b68:	288b883a 	add	r5,r5,r2
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b6c:	9b19883a 	add	r12,r19,r12
    1b70:	7a400003 	ldbu	r9,0(r15)
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
	   arrayindex = (y*sobel_width)+x;

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    1b74:	f94b883a 	add	r5,ra,r5
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    1b78:	1887883a 	add	r3,r3,r2
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b7c:	62d9883a 	add	r12,r12,r11
    1b80:	dac0000b 	ldhu	r11,0(sp)
    1b84:	25400007 	ldb	r21,0(r4)
    1b88:	2a000003 	ldbu	r8,0(r5)

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    1b8c:	f8c7883a 	add	r3,ra,r3
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b90:	e1f9383a 	mul	fp,fp,r7
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1b94:	7085883a 	add	r2,r14,r2
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1b98:	19c00003 	ldbu	r7,0(r3)
    1b9c:	238000c7 	ldb	r14,3(r4)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    1ba0:	f885883a 	add	r2,ra,r2
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1ba4:	ba95383a 	mul	r10,r23,r10
    1ba8:	24c00187 	ldb	r19,6(r4)
    1bac:	5a53383a 	mul	r9,r11,r9
    1bb0:	11000003 	ldbu	r4,0(r2)
    1bb4:	6719883a 	add	r12,r12,fp
    1bb8:	aa11383a 	mul	r8,r21,r8
    1bbc:	6299883a 	add	r12,r12,r10
    1bc0:	71dd383a 	mul	r14,r14,r7
    1bc4:	6253883a 	add	r9,r12,r9
    1bc8:	9927383a 	mul	r19,r19,r4
    1bcc:	d5e6d617 	ldw	r23,-25768(gp)
    1bd0:	4a11883a 	add	r8,r9,r8
	   result = 0;

	   // sobel_y in-lining
	   result += pgy_array[0] * source[(y-1)*sobel_width+(x-1)];
    1bd4:	d2e00017 	ldw	r11,-32768(gp)
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bd8:	31b9883a 	add	fp,r6,r6
    1bdc:	4389883a 	add	r4,r8,r14
    1be0:	bf2f883a 	add	r23,r23,fp
    1be4:	24c9883a 	add	r4,r4,r19
    1be8:	b900000d 	sth	r4,0(r23)
	   result += pgy_array[3] * source[y*sobel_width+(x-1)];
	   result += pgy_array[4] * source[y*sobel_width+x];
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
    1bec:	5a800047 	ldb	r10,1(r11)
    1bf0:	92400003 	ldbu	r9,0(r18)
    1bf4:	5b000087 	ldb	r12,2(r11)
    1bf8:	8a000003 	ldbu	r8,0(r17)
    1bfc:	5b800107 	ldb	r14,4(r11)
    1c00:	a1c00003 	ldbu	r7,0(r20)
    1c04:	b1000003 	ldbu	r4,0(r22)
    1c08:	5c400147 	ldb	r17,5(r11)
    1c0c:	5c8001c7 	ldb	r18,7(r11)
    1c10:	84000003 	ldbu	r16,0(r16)
    1c14:	5253383a 	mul	r9,r10,r9
    1c18:	6211383a 	mul	r8,r12,r8
    1c1c:	5cc00207 	ldb	r19,8(r11)
    1c20:	7bc00003 	ldbu	r15,0(r15)
    1c24:	71cf383a 	mul	r7,r14,r7
    1c28:	5d000007 	ldb	r20,0(r11)
    1c2c:	2d400003 	ldbu	r21,0(r5)
    1c30:	8923383a 	mul	r17,r17,r4
    1c34:	594000c7 	ldb	r5,3(r11)
    1c38:	1d800003 	ldbu	r22,0(r3)
    1c3c:	4a13883a 	add	r9,r9,r8
    1c40:	9425383a 	mul	r18,r18,r16
    1c44:	11000003 	ldbu	r4,0(r2)
    1c48:	5ac00187 	ldb	r11,6(r11)
    1c4c:	49d3883a 	add	r9,r9,r7
    1c50:	9bdf383a 	mul	r15,r19,r15
    1c54:	4c47883a 	add	r3,r9,r17
    1c58:	a569383a 	mul	r20,r20,r21
    1c5c:	2d8b383a 	mul	r5,r5,r22
    1c60:	1c87883a 	add	r3,r3,r18
	   sobel_y_result[arrayindex] = result;
    1c64:	d0a6d717 	ldw	r2,-25764(gp)
	   result += pgy_array[3] * source[y*sobel_width+(x-1)];
	   result += pgy_array[4] * source[y*sobel_width+x];
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
    1c68:	5909383a 	mul	r4,r11,r4
    1c6c:	1bc7883a 	add	r3,r3,r15
    1c70:	1d07883a 	add	r3,r3,r20
    1c74:	1947883a 	add	r3,r3,r5
    1c78:	1907883a 	add	r3,r3,r4
	   sobel_y_result[arrayindex] = result;
    1c7c:	1739883a 	add	fp,r2,fp
    1c80:	e0c0000d 	sth	r3,0(fp)
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
    1c84:	b880000b 	ldhu	r2,0(r23)
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1c88:	193fffcc 	andi	r4,r3,65535
    1c8c:	2120001c 	xori	r4,r4,32768
	   sobel_y_result[arrayindex] = result;
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1c90:	117fffcc 	andi	r5,r2,65535
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1c94:	21200004 	addi	r4,r4,-32768
	   sobel_y_result[arrayindex] = result;
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1c98:	2960001c 	xori	r5,r5,32768
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1c9c:	2009d7fa 	srai	r4,r4,31
	   sobel_y_result[arrayindex] = result;
	   result = 0;

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
	   sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ca0:	29600004 	addi	r5,r5,-32768
    1ca4:	280bd7fa 	srai	r5,r5,31
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1ca8:	1907883a 	add	r3,r3,r4
    1cac:	20c8f03a 	xor	r4,r4,r3
    1cb0:	2887883a 	add	r3,r5,r2
    1cb4:	28c4f03a 	xor	r2,r5,r3
    1cb8:	2085883a 	add	r2,r4,r2
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    1cbc:	d8c00417 	ldw	r3,16(sp)
    1cc0:	10bfffcc 	andi	r2,r2,65535
    1cc4:	10a0001c 	xori	r2,r2,32768
    1cc8:	10a00004 	addi	r2,r2,-32768
    1ccc:	1884803a 	cmplt	r2,r3,r2
    1cd0:	d0e6d417 	ldw	r3,-25776(gp)
    1cd4:	0085c83a 	sub	r2,zero,r2
    1cd8:	198d883a 	add	r6,r3,r6
    1cdc:	30800005 	stb	r2,0(r6)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ce0:	d3a6d317 	ldw	r14,-25780(gp)
    1ce4:	6805883a 	mov	r2,r13
    1ce8:	70ffffc4 	addi	r3,r14,-1
    1cec:	68ff7a16 	blt	r13,r3,1ad8 <__alt_data_end+0xff001ad8>
    1cf0:	d0e6d517 	ldw	r3,-25772(gp)
    1cf4:	d9000117 	ldw	r4,4(sp)
    1cf8:	d9800517 	ldw	r6,20(sp)
    1cfc:	21000044 	addi	r4,r4,1
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d00:	18bfffc4 	addi	r2,r3,-1
    1d04:	d9000115 	stw	r4,4(sp)
    1d08:	30bf6716 	blt	r6,r2,1aa8 <__alt_data_end+0xff001aa8>
	   value = sobel_y_result[arrayindex];
	   sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
	 }
   }
}
    1d0c:	dfc00f17 	ldw	ra,60(sp)
    1d10:	df000e17 	ldw	fp,56(sp)
    1d14:	ddc00d17 	ldw	r23,52(sp)
    1d18:	dd800c17 	ldw	r22,48(sp)
    1d1c:	dd400b17 	ldw	r21,44(sp)
    1d20:	dd000a17 	ldw	r20,40(sp)
    1d24:	dcc00917 	ldw	r19,36(sp)
    1d28:	dc800817 	ldw	r18,32(sp)
    1d2c:	dc400717 	ldw	r17,28(sp)
    1d30:	dc000617 	ldw	r16,24(sp)
    1d34:	dec01004 	addi	sp,sp,64
    1d38:	f800283a 	ret
    1d3c:	d8800117 	ldw	r2,4(sp)
    1d40:	d8800515 	stw	r2,20(sp)
    1d44:	1009883a 	mov	r4,r2
    1d48:	100d883a 	mov	r6,r2
    1d4c:	003feb06 	br	1cfc <__alt_data_end+0xff001cfc>

00001d50 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1d50:	d0a6d817 	ldw	r2,-25760(gp)
    1d54:	f800283a 	ret

00001d58 <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1d58:	d0a6d417 	ldw	r2,-25776(gp)
    1d5c:	f800283a 	ret

00001d60 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1d60:	00804034 	movhi	r2,256
    1d64:	10843404 	addi	r2,r2,4304
    1d68:	11000035 	stwio	r4,0(r2)
    1d6c:	f800283a 	ret

00001d70 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1d70:	00804034 	movhi	r2,256
    1d74:	10843504 	addi	r2,r2,4308
    1d78:	11000025 	stbio	r4,0(r2)
    1d7c:	f800283a 	ret

00001d80 <malloc>:
    1d80:	00800074 	movhi	r2,1
    1d84:	10892f04 	addi	r2,r2,9404
    1d88:	200b883a 	mov	r5,r4
    1d8c:	11000017 	ldw	r4,0(r2)
    1d90:	0001da81 	jmpi	1da8 <_malloc_r>

00001d94 <free>:
    1d94:	00800074 	movhi	r2,1
    1d98:	10892f04 	addi	r2,r2,9404
    1d9c:	200b883a 	mov	r5,r4
    1da0:	11000017 	ldw	r4,0(r2)
    1da4:	0006bf81 	jmpi	6bf8 <_free_r>

00001da8 <_malloc_r>:
    1da8:	defff504 	addi	sp,sp,-44
    1dac:	dc800315 	stw	r18,12(sp)
    1db0:	dfc00a15 	stw	ra,40(sp)
    1db4:	df000915 	stw	fp,36(sp)
    1db8:	ddc00815 	stw	r23,32(sp)
    1dbc:	dd800715 	stw	r22,28(sp)
    1dc0:	dd400615 	stw	r21,24(sp)
    1dc4:	dd000515 	stw	r20,20(sp)
    1dc8:	dcc00415 	stw	r19,16(sp)
    1dcc:	dc400215 	stw	r17,8(sp)
    1dd0:	dc000115 	stw	r16,4(sp)
    1dd4:	288002c4 	addi	r2,r5,11
    1dd8:	00c00584 	movi	r3,22
    1ddc:	2025883a 	mov	r18,r4
    1de0:	18807f2e 	bgeu	r3,r2,1fe0 <_malloc_r+0x238>
    1de4:	047ffe04 	movi	r17,-8
    1de8:	1462703a 	and	r17,r2,r17
    1dec:	8800a316 	blt	r17,zero,207c <_malloc_r+0x2d4>
    1df0:	8940a236 	bltu	r17,r5,207c <_malloc_r+0x2d4>
    1df4:	000ea300 	call	ea30 <__malloc_lock>
    1df8:	00807dc4 	movi	r2,503
    1dfc:	1441e92e 	bgeu	r2,r17,25a4 <_malloc_r+0x7fc>
    1e00:	8804d27a 	srli	r2,r17,9
    1e04:	1000a126 	beq	r2,zero,208c <_malloc_r+0x2e4>
    1e08:	00c00104 	movi	r3,4
    1e0c:	18811e36 	bltu	r3,r2,2288 <_malloc_r+0x4e0>
    1e10:	8804d1ba 	srli	r2,r17,6
    1e14:	12000e44 	addi	r8,r2,57
    1e18:	11c00e04 	addi	r7,r2,56
    1e1c:	4209883a 	add	r4,r8,r8
    1e20:	04c00074 	movhi	r19,1
    1e24:	2109883a 	add	r4,r4,r4
    1e28:	9cc27f04 	addi	r19,r19,2556
    1e2c:	2109883a 	add	r4,r4,r4
    1e30:	9909883a 	add	r4,r19,r4
    1e34:	24000117 	ldw	r16,4(r4)
    1e38:	213ffe04 	addi	r4,r4,-8
    1e3c:	24009726 	beq	r4,r16,209c <_malloc_r+0x2f4>
    1e40:	80800117 	ldw	r2,4(r16)
    1e44:	01bfff04 	movi	r6,-4
    1e48:	014003c4 	movi	r5,15
    1e4c:	1184703a 	and	r2,r2,r6
    1e50:	1447c83a 	sub	r3,r2,r17
    1e54:	28c00716 	blt	r5,r3,1e74 <_malloc_r+0xcc>
    1e58:	1800920e 	bge	r3,zero,20a4 <_malloc_r+0x2fc>
    1e5c:	84000317 	ldw	r16,12(r16)
    1e60:	24008e26 	beq	r4,r16,209c <_malloc_r+0x2f4>
    1e64:	80800117 	ldw	r2,4(r16)
    1e68:	1184703a 	and	r2,r2,r6
    1e6c:	1447c83a 	sub	r3,r2,r17
    1e70:	28fff90e 	bge	r5,r3,1e58 <__alt_data_end+0xff001e58>
    1e74:	3809883a 	mov	r4,r7
    1e78:	01800074 	movhi	r6,1
    1e7c:	9c000417 	ldw	r16,16(r19)
    1e80:	31827f04 	addi	r6,r6,2556
    1e84:	32000204 	addi	r8,r6,8
    1e88:	82013426 	beq	r16,r8,235c <_malloc_r+0x5b4>
    1e8c:	80c00117 	ldw	r3,4(r16)
    1e90:	00bfff04 	movi	r2,-4
    1e94:	188e703a 	and	r7,r3,r2
    1e98:	3c45c83a 	sub	r2,r7,r17
    1e9c:	00c003c4 	movi	r3,15
    1ea0:	18811f16 	blt	r3,r2,2320 <_malloc_r+0x578>
    1ea4:	32000515 	stw	r8,20(r6)
    1ea8:	32000415 	stw	r8,16(r6)
    1eac:	10007f0e 	bge	r2,zero,20ac <_malloc_r+0x304>
    1eb0:	00807fc4 	movi	r2,511
    1eb4:	11c0fd36 	bltu	r2,r7,22ac <_malloc_r+0x504>
    1eb8:	3806d0fa 	srli	r3,r7,3
    1ebc:	01c00044 	movi	r7,1
    1ec0:	30800117 	ldw	r2,4(r6)
    1ec4:	19400044 	addi	r5,r3,1
    1ec8:	294b883a 	add	r5,r5,r5
    1ecc:	1807d0ba 	srai	r3,r3,2
    1ed0:	294b883a 	add	r5,r5,r5
    1ed4:	294b883a 	add	r5,r5,r5
    1ed8:	298b883a 	add	r5,r5,r6
    1edc:	38c6983a 	sll	r3,r7,r3
    1ee0:	29c00017 	ldw	r7,0(r5)
    1ee4:	2a7ffe04 	addi	r9,r5,-8
    1ee8:	1886b03a 	or	r3,r3,r2
    1eec:	82400315 	stw	r9,12(r16)
    1ef0:	81c00215 	stw	r7,8(r16)
    1ef4:	30c00115 	stw	r3,4(r6)
    1ef8:	2c000015 	stw	r16,0(r5)
    1efc:	3c000315 	stw	r16,12(r7)
    1f00:	2005d0ba 	srai	r2,r4,2
    1f04:	01400044 	movi	r5,1
    1f08:	288a983a 	sll	r5,r5,r2
    1f0c:	19406f36 	bltu	r3,r5,20cc <_malloc_r+0x324>
    1f10:	28c4703a 	and	r2,r5,r3
    1f14:	10000a1e 	bne	r2,zero,1f40 <_malloc_r+0x198>
    1f18:	00bfff04 	movi	r2,-4
    1f1c:	294b883a 	add	r5,r5,r5
    1f20:	2088703a 	and	r4,r4,r2
    1f24:	28c4703a 	and	r2,r5,r3
    1f28:	21000104 	addi	r4,r4,4
    1f2c:	1000041e 	bne	r2,zero,1f40 <_malloc_r+0x198>
    1f30:	294b883a 	add	r5,r5,r5
    1f34:	28c4703a 	and	r2,r5,r3
    1f38:	21000104 	addi	r4,r4,4
    1f3c:	103ffc26 	beq	r2,zero,1f30 <__alt_data_end+0xff001f30>
    1f40:	02bfff04 	movi	r10,-4
    1f44:	024003c4 	movi	r9,15
    1f48:	21800044 	addi	r6,r4,1
    1f4c:	318d883a 	add	r6,r6,r6
    1f50:	318d883a 	add	r6,r6,r6
    1f54:	318d883a 	add	r6,r6,r6
    1f58:	998d883a 	add	r6,r19,r6
    1f5c:	333ffe04 	addi	r12,r6,-8
    1f60:	2017883a 	mov	r11,r4
    1f64:	31800104 	addi	r6,r6,4
    1f68:	34000017 	ldw	r16,0(r6)
    1f6c:	31fffd04 	addi	r7,r6,-12
    1f70:	81c0041e 	bne	r16,r7,1f84 <_malloc_r+0x1dc>
    1f74:	0000fb06 	br	2364 <_malloc_r+0x5bc>
    1f78:	1801030e 	bge	r3,zero,2388 <_malloc_r+0x5e0>
    1f7c:	84000317 	ldw	r16,12(r16)
    1f80:	81c0f826 	beq	r16,r7,2364 <_malloc_r+0x5bc>
    1f84:	80800117 	ldw	r2,4(r16)
    1f88:	1284703a 	and	r2,r2,r10
    1f8c:	1447c83a 	sub	r3,r2,r17
    1f90:	48fff90e 	bge	r9,r3,1f78 <__alt_data_end+0xff001f78>
    1f94:	80800317 	ldw	r2,12(r16)
    1f98:	81000217 	ldw	r4,8(r16)
    1f9c:	89400054 	ori	r5,r17,1
    1fa0:	81400115 	stw	r5,4(r16)
    1fa4:	20800315 	stw	r2,12(r4)
    1fa8:	11000215 	stw	r4,8(r2)
    1fac:	8463883a 	add	r17,r16,r17
    1fb0:	9c400515 	stw	r17,20(r19)
    1fb4:	9c400415 	stw	r17,16(r19)
    1fb8:	18800054 	ori	r2,r3,1
    1fbc:	88800115 	stw	r2,4(r17)
    1fc0:	8a000315 	stw	r8,12(r17)
    1fc4:	8a000215 	stw	r8,8(r17)
    1fc8:	88e3883a 	add	r17,r17,r3
    1fcc:	88c00015 	stw	r3,0(r17)
    1fd0:	9009883a 	mov	r4,r18
    1fd4:	000ea340 	call	ea34 <__malloc_unlock>
    1fd8:	80800204 	addi	r2,r16,8
    1fdc:	00001b06 	br	204c <_malloc_r+0x2a4>
    1fe0:	04400404 	movi	r17,16
    1fe4:	89402536 	bltu	r17,r5,207c <_malloc_r+0x2d4>
    1fe8:	000ea300 	call	ea30 <__malloc_lock>
    1fec:	00800184 	movi	r2,6
    1ff0:	01000084 	movi	r4,2
    1ff4:	04c00074 	movhi	r19,1
    1ff8:	1085883a 	add	r2,r2,r2
    1ffc:	9cc27f04 	addi	r19,r19,2556
    2000:	1085883a 	add	r2,r2,r2
    2004:	9885883a 	add	r2,r19,r2
    2008:	14000117 	ldw	r16,4(r2)
    200c:	10fffe04 	addi	r3,r2,-8
    2010:	80c0d926 	beq	r16,r3,2378 <_malloc_r+0x5d0>
    2014:	80c00117 	ldw	r3,4(r16)
    2018:	81000317 	ldw	r4,12(r16)
    201c:	00bfff04 	movi	r2,-4
    2020:	1884703a 	and	r2,r3,r2
    2024:	81400217 	ldw	r5,8(r16)
    2028:	8085883a 	add	r2,r16,r2
    202c:	10c00117 	ldw	r3,4(r2)
    2030:	29000315 	stw	r4,12(r5)
    2034:	21400215 	stw	r5,8(r4)
    2038:	18c00054 	ori	r3,r3,1
    203c:	10c00115 	stw	r3,4(r2)
    2040:	9009883a 	mov	r4,r18
    2044:	000ea340 	call	ea34 <__malloc_unlock>
    2048:	80800204 	addi	r2,r16,8
    204c:	dfc00a17 	ldw	ra,40(sp)
    2050:	df000917 	ldw	fp,36(sp)
    2054:	ddc00817 	ldw	r23,32(sp)
    2058:	dd800717 	ldw	r22,28(sp)
    205c:	dd400617 	ldw	r21,24(sp)
    2060:	dd000517 	ldw	r20,20(sp)
    2064:	dcc00417 	ldw	r19,16(sp)
    2068:	dc800317 	ldw	r18,12(sp)
    206c:	dc400217 	ldw	r17,8(sp)
    2070:	dc000117 	ldw	r16,4(sp)
    2074:	dec00b04 	addi	sp,sp,44
    2078:	f800283a 	ret
    207c:	00800304 	movi	r2,12
    2080:	90800015 	stw	r2,0(r18)
    2084:	0005883a 	mov	r2,zero
    2088:	003ff006 	br	204c <__alt_data_end+0xff00204c>
    208c:	01002004 	movi	r4,128
    2090:	02001004 	movi	r8,64
    2094:	01c00fc4 	movi	r7,63
    2098:	003f6106 	br	1e20 <__alt_data_end+0xff001e20>
    209c:	4009883a 	mov	r4,r8
    20a0:	003f7506 	br	1e78 <__alt_data_end+0xff001e78>
    20a4:	81000317 	ldw	r4,12(r16)
    20a8:	003fde06 	br	2024 <__alt_data_end+0xff002024>
    20ac:	81c5883a 	add	r2,r16,r7
    20b0:	11400117 	ldw	r5,4(r2)
    20b4:	9009883a 	mov	r4,r18
    20b8:	29400054 	ori	r5,r5,1
    20bc:	11400115 	stw	r5,4(r2)
    20c0:	000ea340 	call	ea34 <__malloc_unlock>
    20c4:	80800204 	addi	r2,r16,8
    20c8:	003fe006 	br	204c <__alt_data_end+0xff00204c>
    20cc:	9c000217 	ldw	r16,8(r19)
    20d0:	00bfff04 	movi	r2,-4
    20d4:	85800117 	ldw	r22,4(r16)
    20d8:	b0ac703a 	and	r22,r22,r2
    20dc:	b4400336 	bltu	r22,r17,20ec <_malloc_r+0x344>
    20e0:	b445c83a 	sub	r2,r22,r17
    20e4:	00c003c4 	movi	r3,15
    20e8:	18805d16 	blt	r3,r2,2260 <_malloc_r+0x4b8>
    20ec:	05c00074 	movhi	r23,1
    20f0:	00800074 	movhi	r2,1
    20f4:	10900504 	addi	r2,r2,16404
    20f8:	bdc92c04 	addi	r23,r23,9392
    20fc:	15400017 	ldw	r21,0(r2)
    2100:	b8c00017 	ldw	r3,0(r23)
    2104:	00bfffc4 	movi	r2,-1
    2108:	858d883a 	add	r6,r16,r22
    210c:	8d6b883a 	add	r21,r17,r21
    2110:	1880ea26 	beq	r3,r2,24bc <_malloc_r+0x714>
    2114:	ad4403c4 	addi	r21,r21,4111
    2118:	00bc0004 	movi	r2,-4096
    211c:	a8aa703a 	and	r21,r21,r2
    2120:	a80b883a 	mov	r5,r21
    2124:	9009883a 	mov	r4,r18
    2128:	d9800015 	stw	r6,0(sp)
    212c:	00026f40 	call	26f4 <_sbrk_r>
    2130:	1029883a 	mov	r20,r2
    2134:	00bfffc4 	movi	r2,-1
    2138:	d9800017 	ldw	r6,0(sp)
    213c:	a080e826 	beq	r20,r2,24e0 <_malloc_r+0x738>
    2140:	a180a636 	bltu	r20,r6,23dc <_malloc_r+0x634>
    2144:	07000074 	movhi	fp,1
    2148:	e7101304 	addi	fp,fp,16460
    214c:	e0800017 	ldw	r2,0(fp)
    2150:	a887883a 	add	r3,r21,r2
    2154:	e0c00015 	stw	r3,0(fp)
    2158:	3500e626 	beq	r6,r20,24f4 <_malloc_r+0x74c>
    215c:	b9000017 	ldw	r4,0(r23)
    2160:	00bfffc4 	movi	r2,-1
    2164:	2080ee26 	beq	r4,r2,2520 <_malloc_r+0x778>
    2168:	a185c83a 	sub	r2,r20,r6
    216c:	10c5883a 	add	r2,r2,r3
    2170:	e0800015 	stw	r2,0(fp)
    2174:	a0c001cc 	andi	r3,r20,7
    2178:	1800bc26 	beq	r3,zero,246c <_malloc_r+0x6c4>
    217c:	a0e9c83a 	sub	r20,r20,r3
    2180:	00840204 	movi	r2,4104
    2184:	a5000204 	addi	r20,r20,8
    2188:	10c7c83a 	sub	r3,r2,r3
    218c:	a545883a 	add	r2,r20,r21
    2190:	1083ffcc 	andi	r2,r2,4095
    2194:	18abc83a 	sub	r21,r3,r2
    2198:	a80b883a 	mov	r5,r21
    219c:	9009883a 	mov	r4,r18
    21a0:	00026f40 	call	26f4 <_sbrk_r>
    21a4:	00ffffc4 	movi	r3,-1
    21a8:	10c0e126 	beq	r2,r3,2530 <_malloc_r+0x788>
    21ac:	1505c83a 	sub	r2,r2,r20
    21b0:	1545883a 	add	r2,r2,r21
    21b4:	10800054 	ori	r2,r2,1
    21b8:	e0c00017 	ldw	r3,0(fp)
    21bc:	9d000215 	stw	r20,8(r19)
    21c0:	a0800115 	stw	r2,4(r20)
    21c4:	a8c7883a 	add	r3,r21,r3
    21c8:	e0c00015 	stw	r3,0(fp)
    21cc:	84c00e26 	beq	r16,r19,2208 <_malloc_r+0x460>
    21d0:	018003c4 	movi	r6,15
    21d4:	3580a72e 	bgeu	r6,r22,2474 <_malloc_r+0x6cc>
    21d8:	81400117 	ldw	r5,4(r16)
    21dc:	013ffe04 	movi	r4,-8
    21e0:	b0bffd04 	addi	r2,r22,-12
    21e4:	1104703a 	and	r2,r2,r4
    21e8:	2900004c 	andi	r4,r5,1
    21ec:	2088b03a 	or	r4,r4,r2
    21f0:	81000115 	stw	r4,4(r16)
    21f4:	01400144 	movi	r5,5
    21f8:	8089883a 	add	r4,r16,r2
    21fc:	21400115 	stw	r5,4(r4)
    2200:	21400215 	stw	r5,8(r4)
    2204:	3080cd36 	bltu	r6,r2,253c <_malloc_r+0x794>
    2208:	00800074 	movhi	r2,1
    220c:	10900404 	addi	r2,r2,16400
    2210:	11000017 	ldw	r4,0(r2)
    2214:	20c0012e 	bgeu	r4,r3,221c <_malloc_r+0x474>
    2218:	10c00015 	stw	r3,0(r2)
    221c:	00800074 	movhi	r2,1
    2220:	10900304 	addi	r2,r2,16396
    2224:	11000017 	ldw	r4,0(r2)
    2228:	9c000217 	ldw	r16,8(r19)
    222c:	20c0012e 	bgeu	r4,r3,2234 <_malloc_r+0x48c>
    2230:	10c00015 	stw	r3,0(r2)
    2234:	80c00117 	ldw	r3,4(r16)
    2238:	00bfff04 	movi	r2,-4
    223c:	1886703a 	and	r3,r3,r2
    2240:	1c45c83a 	sub	r2,r3,r17
    2244:	1c400236 	bltu	r3,r17,2250 <_malloc_r+0x4a8>
    2248:	00c003c4 	movi	r3,15
    224c:	18800416 	blt	r3,r2,2260 <_malloc_r+0x4b8>
    2250:	9009883a 	mov	r4,r18
    2254:	000ea340 	call	ea34 <__malloc_unlock>
    2258:	0005883a 	mov	r2,zero
    225c:	003f7b06 	br	204c <__alt_data_end+0xff00204c>
    2260:	88c00054 	ori	r3,r17,1
    2264:	80c00115 	stw	r3,4(r16)
    2268:	8463883a 	add	r17,r16,r17
    226c:	10800054 	ori	r2,r2,1
    2270:	9c400215 	stw	r17,8(r19)
    2274:	88800115 	stw	r2,4(r17)
    2278:	9009883a 	mov	r4,r18
    227c:	000ea340 	call	ea34 <__malloc_unlock>
    2280:	80800204 	addi	r2,r16,8
    2284:	003f7106 	br	204c <__alt_data_end+0xff00204c>
    2288:	00c00504 	movi	r3,20
    228c:	18804a2e 	bgeu	r3,r2,23b8 <_malloc_r+0x610>
    2290:	00c01504 	movi	r3,84
    2294:	18806e36 	bltu	r3,r2,2450 <_malloc_r+0x6a8>
    2298:	8804d33a 	srli	r2,r17,12
    229c:	12001bc4 	addi	r8,r2,111
    22a0:	11c01b84 	addi	r7,r2,110
    22a4:	4209883a 	add	r4,r8,r8
    22a8:	003edd06 	br	1e20 <__alt_data_end+0xff001e20>
    22ac:	3804d27a 	srli	r2,r7,9
    22b0:	00c00104 	movi	r3,4
    22b4:	1880442e 	bgeu	r3,r2,23c8 <_malloc_r+0x620>
    22b8:	00c00504 	movi	r3,20
    22bc:	18808136 	bltu	r3,r2,24c4 <_malloc_r+0x71c>
    22c0:	11401704 	addi	r5,r2,92
    22c4:	10c016c4 	addi	r3,r2,91
    22c8:	294b883a 	add	r5,r5,r5
    22cc:	294b883a 	add	r5,r5,r5
    22d0:	294b883a 	add	r5,r5,r5
    22d4:	994b883a 	add	r5,r19,r5
    22d8:	28800017 	ldw	r2,0(r5)
    22dc:	01800074 	movhi	r6,1
    22e0:	297ffe04 	addi	r5,r5,-8
    22e4:	31827f04 	addi	r6,r6,2556
    22e8:	28806526 	beq	r5,r2,2480 <_malloc_r+0x6d8>
    22ec:	01bfff04 	movi	r6,-4
    22f0:	10c00117 	ldw	r3,4(r2)
    22f4:	1986703a 	and	r3,r3,r6
    22f8:	38c0022e 	bgeu	r7,r3,2304 <_malloc_r+0x55c>
    22fc:	10800217 	ldw	r2,8(r2)
    2300:	28bffb1e 	bne	r5,r2,22f0 <__alt_data_end+0xff0022f0>
    2304:	11400317 	ldw	r5,12(r2)
    2308:	98c00117 	ldw	r3,4(r19)
    230c:	81400315 	stw	r5,12(r16)
    2310:	80800215 	stw	r2,8(r16)
    2314:	2c000215 	stw	r16,8(r5)
    2318:	14000315 	stw	r16,12(r2)
    231c:	003ef806 	br	1f00 <__alt_data_end+0xff001f00>
    2320:	88c00054 	ori	r3,r17,1
    2324:	80c00115 	stw	r3,4(r16)
    2328:	8463883a 	add	r17,r16,r17
    232c:	34400515 	stw	r17,20(r6)
    2330:	34400415 	stw	r17,16(r6)
    2334:	10c00054 	ori	r3,r2,1
    2338:	8a000315 	stw	r8,12(r17)
    233c:	8a000215 	stw	r8,8(r17)
    2340:	88c00115 	stw	r3,4(r17)
    2344:	88a3883a 	add	r17,r17,r2
    2348:	88800015 	stw	r2,0(r17)
    234c:	9009883a 	mov	r4,r18
    2350:	000ea340 	call	ea34 <__malloc_unlock>
    2354:	80800204 	addi	r2,r16,8
    2358:	003f3c06 	br	204c <__alt_data_end+0xff00204c>
    235c:	30c00117 	ldw	r3,4(r6)
    2360:	003ee706 	br	1f00 <__alt_data_end+0xff001f00>
    2364:	5ac00044 	addi	r11,r11,1
    2368:	588000cc 	andi	r2,r11,3
    236c:	31800204 	addi	r6,r6,8
    2370:	103efd1e 	bne	r2,zero,1f68 <__alt_data_end+0xff001f68>
    2374:	00002406 	br	2408 <_malloc_r+0x660>
    2378:	14000317 	ldw	r16,12(r2)
    237c:	143f251e 	bne	r2,r16,2014 <__alt_data_end+0xff002014>
    2380:	21000084 	addi	r4,r4,2
    2384:	003ebc06 	br	1e78 <__alt_data_end+0xff001e78>
    2388:	8085883a 	add	r2,r16,r2
    238c:	10c00117 	ldw	r3,4(r2)
    2390:	81000317 	ldw	r4,12(r16)
    2394:	81400217 	ldw	r5,8(r16)
    2398:	18c00054 	ori	r3,r3,1
    239c:	10c00115 	stw	r3,4(r2)
    23a0:	29000315 	stw	r4,12(r5)
    23a4:	21400215 	stw	r5,8(r4)
    23a8:	9009883a 	mov	r4,r18
    23ac:	000ea340 	call	ea34 <__malloc_unlock>
    23b0:	80800204 	addi	r2,r16,8
    23b4:	003f2506 	br	204c <__alt_data_end+0xff00204c>
    23b8:	12001704 	addi	r8,r2,92
    23bc:	11c016c4 	addi	r7,r2,91
    23c0:	4209883a 	add	r4,r8,r8
    23c4:	003e9606 	br	1e20 <__alt_data_end+0xff001e20>
    23c8:	3804d1ba 	srli	r2,r7,6
    23cc:	11400e44 	addi	r5,r2,57
    23d0:	10c00e04 	addi	r3,r2,56
    23d4:	294b883a 	add	r5,r5,r5
    23d8:	003fbc06 	br	22cc <__alt_data_end+0xff0022cc>
    23dc:	84ff5926 	beq	r16,r19,2144 <__alt_data_end+0xff002144>
    23e0:	00800074 	movhi	r2,1
    23e4:	10827f04 	addi	r2,r2,2556
    23e8:	14000217 	ldw	r16,8(r2)
    23ec:	00bfff04 	movi	r2,-4
    23f0:	80c00117 	ldw	r3,4(r16)
    23f4:	1886703a 	and	r3,r3,r2
    23f8:	003f9106 	br	2240 <__alt_data_end+0xff002240>
    23fc:	60800217 	ldw	r2,8(r12)
    2400:	213fffc4 	addi	r4,r4,-1
    2404:	1300651e 	bne	r2,r12,259c <_malloc_r+0x7f4>
    2408:	208000cc 	andi	r2,r4,3
    240c:	633ffe04 	addi	r12,r12,-8
    2410:	103ffa1e 	bne	r2,zero,23fc <__alt_data_end+0xff0023fc>
    2414:	98800117 	ldw	r2,4(r19)
    2418:	0146303a 	nor	r3,zero,r5
    241c:	1884703a 	and	r2,r3,r2
    2420:	98800115 	stw	r2,4(r19)
    2424:	294b883a 	add	r5,r5,r5
    2428:	117f2836 	bltu	r2,r5,20cc <__alt_data_end+0xff0020cc>
    242c:	283f2726 	beq	r5,zero,20cc <__alt_data_end+0xff0020cc>
    2430:	2886703a 	and	r3,r5,r2
    2434:	5809883a 	mov	r4,r11
    2438:	183ec31e 	bne	r3,zero,1f48 <__alt_data_end+0xff001f48>
    243c:	294b883a 	add	r5,r5,r5
    2440:	2886703a 	and	r3,r5,r2
    2444:	21000104 	addi	r4,r4,4
    2448:	183ffc26 	beq	r3,zero,243c <__alt_data_end+0xff00243c>
    244c:	003ebe06 	br	1f48 <__alt_data_end+0xff001f48>
    2450:	00c05504 	movi	r3,340
    2454:	18801236 	bltu	r3,r2,24a0 <_malloc_r+0x6f8>
    2458:	8804d3fa 	srli	r2,r17,15
    245c:	12001e04 	addi	r8,r2,120
    2460:	11c01dc4 	addi	r7,r2,119
    2464:	4209883a 	add	r4,r8,r8
    2468:	003e6d06 	br	1e20 <__alt_data_end+0xff001e20>
    246c:	00c40004 	movi	r3,4096
    2470:	003f4606 	br	218c <__alt_data_end+0xff00218c>
    2474:	00800044 	movi	r2,1
    2478:	a0800115 	stw	r2,4(r20)
    247c:	003f7406 	br	2250 <__alt_data_end+0xff002250>
    2480:	1805d0ba 	srai	r2,r3,2
    2484:	01c00044 	movi	r7,1
    2488:	30c00117 	ldw	r3,4(r6)
    248c:	388e983a 	sll	r7,r7,r2
    2490:	2805883a 	mov	r2,r5
    2494:	38c6b03a 	or	r3,r7,r3
    2498:	30c00115 	stw	r3,4(r6)
    249c:	003f9b06 	br	230c <__alt_data_end+0xff00230c>
    24a0:	00c15504 	movi	r3,1364
    24a4:	18801a36 	bltu	r3,r2,2510 <_malloc_r+0x768>
    24a8:	8804d4ba 	srli	r2,r17,18
    24ac:	12001f44 	addi	r8,r2,125
    24b0:	11c01f04 	addi	r7,r2,124
    24b4:	4209883a 	add	r4,r8,r8
    24b8:	003e5906 	br	1e20 <__alt_data_end+0xff001e20>
    24bc:	ad400404 	addi	r21,r21,16
    24c0:	003f1706 	br	2120 <__alt_data_end+0xff002120>
    24c4:	00c01504 	movi	r3,84
    24c8:	18802336 	bltu	r3,r2,2558 <_malloc_r+0x7b0>
    24cc:	3804d33a 	srli	r2,r7,12
    24d0:	11401bc4 	addi	r5,r2,111
    24d4:	10c01b84 	addi	r3,r2,110
    24d8:	294b883a 	add	r5,r5,r5
    24dc:	003f7b06 	br	22cc <__alt_data_end+0xff0022cc>
    24e0:	9c000217 	ldw	r16,8(r19)
    24e4:	00bfff04 	movi	r2,-4
    24e8:	80c00117 	ldw	r3,4(r16)
    24ec:	1886703a 	and	r3,r3,r2
    24f0:	003f5306 	br	2240 <__alt_data_end+0xff002240>
    24f4:	3083ffcc 	andi	r2,r6,4095
    24f8:	103f181e 	bne	r2,zero,215c <__alt_data_end+0xff00215c>
    24fc:	99000217 	ldw	r4,8(r19)
    2500:	b545883a 	add	r2,r22,r21
    2504:	10800054 	ori	r2,r2,1
    2508:	20800115 	stw	r2,4(r4)
    250c:	003f3e06 	br	2208 <__alt_data_end+0xff002208>
    2510:	01003f84 	movi	r4,254
    2514:	02001fc4 	movi	r8,127
    2518:	01c01f84 	movi	r7,126
    251c:	003e4006 	br	1e20 <__alt_data_end+0xff001e20>
    2520:	00800074 	movhi	r2,1
    2524:	10892c04 	addi	r2,r2,9392
    2528:	15000015 	stw	r20,0(r2)
    252c:	003f1106 	br	2174 <__alt_data_end+0xff002174>
    2530:	00800044 	movi	r2,1
    2534:	002b883a 	mov	r21,zero
    2538:	003f1f06 	br	21b8 <__alt_data_end+0xff0021b8>
    253c:	81400204 	addi	r5,r16,8
    2540:	9009883a 	mov	r4,r18
    2544:	0006bf80 	call	6bf8 <_free_r>
    2548:	00800074 	movhi	r2,1
    254c:	10901304 	addi	r2,r2,16460
    2550:	10c00017 	ldw	r3,0(r2)
    2554:	003f2c06 	br	2208 <__alt_data_end+0xff002208>
    2558:	00c05504 	movi	r3,340
    255c:	18800536 	bltu	r3,r2,2574 <_malloc_r+0x7cc>
    2560:	3804d3fa 	srli	r2,r7,15
    2564:	11401e04 	addi	r5,r2,120
    2568:	10c01dc4 	addi	r3,r2,119
    256c:	294b883a 	add	r5,r5,r5
    2570:	003f5606 	br	22cc <__alt_data_end+0xff0022cc>
    2574:	00c15504 	movi	r3,1364
    2578:	18800536 	bltu	r3,r2,2590 <_malloc_r+0x7e8>
    257c:	3804d4ba 	srli	r2,r7,18
    2580:	11401f44 	addi	r5,r2,125
    2584:	10c01f04 	addi	r3,r2,124
    2588:	294b883a 	add	r5,r5,r5
    258c:	003f4f06 	br	22cc <__alt_data_end+0xff0022cc>
    2590:	01403f84 	movi	r5,254
    2594:	00c01f84 	movi	r3,126
    2598:	003f4c06 	br	22cc <__alt_data_end+0xff0022cc>
    259c:	98800117 	ldw	r2,4(r19)
    25a0:	003fa006 	br	2424 <__alt_data_end+0xff002424>
    25a4:	8808d0fa 	srli	r4,r17,3
    25a8:	20800044 	addi	r2,r4,1
    25ac:	1085883a 	add	r2,r2,r2
    25b0:	003e9006 	br	1ff4 <__alt_data_end+0xff001ff4>

000025b4 <_printf_r>:
    25b4:	defffd04 	addi	sp,sp,-12
    25b8:	2805883a 	mov	r2,r5
    25bc:	dfc00015 	stw	ra,0(sp)
    25c0:	d9800115 	stw	r6,4(sp)
    25c4:	d9c00215 	stw	r7,8(sp)
    25c8:	21400217 	ldw	r5,8(r4)
    25cc:	d9c00104 	addi	r7,sp,4
    25d0:	100d883a 	mov	r6,r2
    25d4:	00027e00 	call	27e0 <___vfprintf_internal_r>
    25d8:	dfc00017 	ldw	ra,0(sp)
    25dc:	dec00304 	addi	sp,sp,12
    25e0:	f800283a 	ret

000025e4 <printf>:
    25e4:	defffc04 	addi	sp,sp,-16
    25e8:	dfc00015 	stw	ra,0(sp)
    25ec:	d9400115 	stw	r5,4(sp)
    25f0:	d9800215 	stw	r6,8(sp)
    25f4:	d9c00315 	stw	r7,12(sp)
    25f8:	00800074 	movhi	r2,1
    25fc:	10892f04 	addi	r2,r2,9404
    2600:	10800017 	ldw	r2,0(r2)
    2604:	200b883a 	mov	r5,r4
    2608:	d9800104 	addi	r6,sp,4
    260c:	11000217 	ldw	r4,8(r2)
    2610:	00049d80 	call	49d8 <__vfprintf_internal>
    2614:	dfc00017 	ldw	ra,0(sp)
    2618:	dec00404 	addi	sp,sp,16
    261c:	f800283a 	ret

00002620 <_puts_r>:
    2620:	defff604 	addi	sp,sp,-40
    2624:	dc000715 	stw	r16,28(sp)
    2628:	2021883a 	mov	r16,r4
    262c:	2809883a 	mov	r4,r5
    2630:	dc400815 	stw	r17,32(sp)
    2634:	dfc00915 	stw	ra,36(sp)
    2638:	2823883a 	mov	r17,r5
    263c:	00027480 	call	2748 <strlen>
    2640:	10c00044 	addi	r3,r2,1
    2644:	d8800115 	stw	r2,4(sp)
    2648:	00800074 	movhi	r2,1
    264c:	1081c504 	addi	r2,r2,1812
    2650:	d8800215 	stw	r2,8(sp)
    2654:	00800044 	movi	r2,1
    2658:	d8800315 	stw	r2,12(sp)
    265c:	00800084 	movi	r2,2
    2660:	dc400015 	stw	r17,0(sp)
    2664:	d8c00615 	stw	r3,24(sp)
    2668:	dec00415 	stw	sp,16(sp)
    266c:	d8800515 	stw	r2,20(sp)
    2670:	80000226 	beq	r16,zero,267c <_puts_r+0x5c>
    2674:	80800e17 	ldw	r2,56(r16)
    2678:	10001426 	beq	r2,zero,26cc <_puts_r+0xac>
    267c:	81400217 	ldw	r5,8(r16)
    2680:	2880030b 	ldhu	r2,12(r5)
    2684:	10c8000c 	andi	r3,r2,8192
    2688:	1800061e 	bne	r3,zero,26a4 <_puts_r+0x84>
    268c:	29001917 	ldw	r4,100(r5)
    2690:	00f7ffc4 	movi	r3,-8193
    2694:	10880014 	ori	r2,r2,8192
    2698:	20c6703a 	and	r3,r4,r3
    269c:	2880030d 	sth	r2,12(r5)
    26a0:	28c01915 	stw	r3,100(r5)
    26a4:	d9800404 	addi	r6,sp,16
    26a8:	8009883a 	mov	r4,r16
    26ac:	0006f080 	call	6f08 <__sfvwrite_r>
    26b0:	1000091e 	bne	r2,zero,26d8 <_puts_r+0xb8>
    26b4:	00800284 	movi	r2,10
    26b8:	dfc00917 	ldw	ra,36(sp)
    26bc:	dc400817 	ldw	r17,32(sp)
    26c0:	dc000717 	ldw	r16,28(sp)
    26c4:	dec00a04 	addi	sp,sp,40
    26c8:	f800283a 	ret
    26cc:	8009883a 	mov	r4,r16
    26d0:	0006a840 	call	6a84 <__sinit>
    26d4:	003fe906 	br	267c <__alt_data_end+0xff00267c>
    26d8:	00bfffc4 	movi	r2,-1
    26dc:	003ff606 	br	26b8 <__alt_data_end+0xff0026b8>

000026e0 <puts>:
    26e0:	00800074 	movhi	r2,1
    26e4:	10892f04 	addi	r2,r2,9404
    26e8:	200b883a 	mov	r5,r4
    26ec:	11000017 	ldw	r4,0(r2)
    26f0:	00026201 	jmpi	2620 <_puts_r>

000026f4 <_sbrk_r>:
    26f4:	defffd04 	addi	sp,sp,-12
    26f8:	dc000015 	stw	r16,0(sp)
    26fc:	04000074 	movhi	r16,1
    2700:	dc400115 	stw	r17,4(sp)
    2704:	84100604 	addi	r16,r16,16408
    2708:	2023883a 	mov	r17,r4
    270c:	2809883a 	mov	r4,r5
    2710:	dfc00215 	stw	ra,8(sp)
    2714:	80000015 	stw	zero,0(r16)
    2718:	000eb240 	call	eb24 <sbrk>
    271c:	00ffffc4 	movi	r3,-1
    2720:	10c00526 	beq	r2,r3,2738 <_sbrk_r+0x44>
    2724:	dfc00217 	ldw	ra,8(sp)
    2728:	dc400117 	ldw	r17,4(sp)
    272c:	dc000017 	ldw	r16,0(sp)
    2730:	dec00304 	addi	sp,sp,12
    2734:	f800283a 	ret
    2738:	80c00017 	ldw	r3,0(r16)
    273c:	183ff926 	beq	r3,zero,2724 <__alt_data_end+0xff002724>
    2740:	88c00015 	stw	r3,0(r17)
    2744:	003ff706 	br	2724 <__alt_data_end+0xff002724>

00002748 <strlen>:
    2748:	208000cc 	andi	r2,r4,3
    274c:	10002026 	beq	r2,zero,27d0 <strlen+0x88>
    2750:	20800007 	ldb	r2,0(r4)
    2754:	10002026 	beq	r2,zero,27d8 <strlen+0x90>
    2758:	2005883a 	mov	r2,r4
    275c:	00000206 	br	2768 <strlen+0x20>
    2760:	10c00007 	ldb	r3,0(r2)
    2764:	18001826 	beq	r3,zero,27c8 <strlen+0x80>
    2768:	10800044 	addi	r2,r2,1
    276c:	10c000cc 	andi	r3,r2,3
    2770:	183ffb1e 	bne	r3,zero,2760 <__alt_data_end+0xff002760>
    2774:	10c00017 	ldw	r3,0(r2)
    2778:	01ffbff4 	movhi	r7,65279
    277c:	39ffbfc4 	addi	r7,r7,-257
    2780:	00ca303a 	nor	r5,zero,r3
    2784:	01a02074 	movhi	r6,32897
    2788:	19c7883a 	add	r3,r3,r7
    278c:	31a02004 	addi	r6,r6,-32640
    2790:	1946703a 	and	r3,r3,r5
    2794:	1986703a 	and	r3,r3,r6
    2798:	1800091e 	bne	r3,zero,27c0 <strlen+0x78>
    279c:	10800104 	addi	r2,r2,4
    27a0:	10c00017 	ldw	r3,0(r2)
    27a4:	19cb883a 	add	r5,r3,r7
    27a8:	00c6303a 	nor	r3,zero,r3
    27ac:	28c6703a 	and	r3,r5,r3
    27b0:	1986703a 	and	r3,r3,r6
    27b4:	183ff926 	beq	r3,zero,279c <__alt_data_end+0xff00279c>
    27b8:	00000106 	br	27c0 <strlen+0x78>
    27bc:	10800044 	addi	r2,r2,1
    27c0:	10c00007 	ldb	r3,0(r2)
    27c4:	183ffd1e 	bne	r3,zero,27bc <__alt_data_end+0xff0027bc>
    27c8:	1105c83a 	sub	r2,r2,r4
    27cc:	f800283a 	ret
    27d0:	2005883a 	mov	r2,r4
    27d4:	003fe706 	br	2774 <__alt_data_end+0xff002774>
    27d8:	0005883a 	mov	r2,zero
    27dc:	f800283a 	ret

000027e0 <___vfprintf_internal_r>:
    27e0:	deffb804 	addi	sp,sp,-288
    27e4:	dfc04715 	stw	ra,284(sp)
    27e8:	ddc04515 	stw	r23,276(sp)
    27ec:	dd404315 	stw	r21,268(sp)
    27f0:	d9002c15 	stw	r4,176(sp)
    27f4:	282f883a 	mov	r23,r5
    27f8:	302b883a 	mov	r21,r6
    27fc:	d9c02d15 	stw	r7,180(sp)
    2800:	df004615 	stw	fp,280(sp)
    2804:	dd804415 	stw	r22,272(sp)
    2808:	dd004215 	stw	r20,264(sp)
    280c:	dcc04115 	stw	r19,260(sp)
    2810:	dc804015 	stw	r18,256(sp)
    2814:	dc403f15 	stw	r17,252(sp)
    2818:	dc003e15 	stw	r16,248(sp)
    281c:	00075f80 	call	75f8 <_localeconv_r>
    2820:	10800017 	ldw	r2,0(r2)
    2824:	1009883a 	mov	r4,r2
    2828:	d8803415 	stw	r2,208(sp)
    282c:	00027480 	call	2748 <strlen>
    2830:	d8803715 	stw	r2,220(sp)
    2834:	d8802c17 	ldw	r2,176(sp)
    2838:	10000226 	beq	r2,zero,2844 <___vfprintf_internal_r+0x64>
    283c:	10800e17 	ldw	r2,56(r2)
    2840:	1000f926 	beq	r2,zero,2c28 <___vfprintf_internal_r+0x448>
    2844:	b880030b 	ldhu	r2,12(r23)
    2848:	10c8000c 	andi	r3,r2,8192
    284c:	1800061e 	bne	r3,zero,2868 <___vfprintf_internal_r+0x88>
    2850:	b9001917 	ldw	r4,100(r23)
    2854:	00f7ffc4 	movi	r3,-8193
    2858:	10880014 	ori	r2,r2,8192
    285c:	20c6703a 	and	r3,r4,r3
    2860:	b880030d 	sth	r2,12(r23)
    2864:	b8c01915 	stw	r3,100(r23)
    2868:	10c0020c 	andi	r3,r2,8
    286c:	1800c126 	beq	r3,zero,2b74 <___vfprintf_internal_r+0x394>
    2870:	b8c00417 	ldw	r3,16(r23)
    2874:	1800bf26 	beq	r3,zero,2b74 <___vfprintf_internal_r+0x394>
    2878:	1080068c 	andi	r2,r2,26
    287c:	00c00284 	movi	r3,10
    2880:	10c0c426 	beq	r2,r3,2b94 <___vfprintf_internal_r+0x3b4>
    2884:	d8c00404 	addi	r3,sp,16
    2888:	05000074 	movhi	r20,1
    288c:	d9001e04 	addi	r4,sp,120
    2890:	a501d684 	addi	r20,r20,1882
    2894:	d8c01e15 	stw	r3,120(sp)
    2898:	d8002015 	stw	zero,128(sp)
    289c:	d8001f15 	stw	zero,124(sp)
    28a0:	d8003315 	stw	zero,204(sp)
    28a4:	d8003615 	stw	zero,216(sp)
    28a8:	d8003815 	stw	zero,224(sp)
    28ac:	1811883a 	mov	r8,r3
    28b0:	d8003915 	stw	zero,228(sp)
    28b4:	d8003a15 	stw	zero,232(sp)
    28b8:	d8002f15 	stw	zero,188(sp)
    28bc:	d9002815 	stw	r4,160(sp)
    28c0:	a8800007 	ldb	r2,0(r21)
    28c4:	10027b26 	beq	r2,zero,32b4 <___vfprintf_internal_r+0xad4>
    28c8:	00c00944 	movi	r3,37
    28cc:	a821883a 	mov	r16,r21
    28d0:	10c0021e 	bne	r2,r3,28dc <___vfprintf_internal_r+0xfc>
    28d4:	00001406 	br	2928 <___vfprintf_internal_r+0x148>
    28d8:	10c00326 	beq	r2,r3,28e8 <___vfprintf_internal_r+0x108>
    28dc:	84000044 	addi	r16,r16,1
    28e0:	80800007 	ldb	r2,0(r16)
    28e4:	103ffc1e 	bne	r2,zero,28d8 <__alt_data_end+0xff0028d8>
    28e8:	8563c83a 	sub	r17,r16,r21
    28ec:	88000e26 	beq	r17,zero,2928 <___vfprintf_internal_r+0x148>
    28f0:	d8c02017 	ldw	r3,128(sp)
    28f4:	d8801f17 	ldw	r2,124(sp)
    28f8:	45400015 	stw	r21,0(r8)
    28fc:	1c47883a 	add	r3,r3,r17
    2900:	10800044 	addi	r2,r2,1
    2904:	d8c02015 	stw	r3,128(sp)
    2908:	44400115 	stw	r17,4(r8)
    290c:	d8801f15 	stw	r2,124(sp)
    2910:	00c001c4 	movi	r3,7
    2914:	1880a716 	blt	r3,r2,2bb4 <___vfprintf_internal_r+0x3d4>
    2918:	42000204 	addi	r8,r8,8
    291c:	d9402f17 	ldw	r5,188(sp)
    2920:	2c4b883a 	add	r5,r5,r17
    2924:	d9402f15 	stw	r5,188(sp)
    2928:	80800007 	ldb	r2,0(r16)
    292c:	1000a826 	beq	r2,zero,2bd0 <___vfprintf_internal_r+0x3f0>
    2930:	84400047 	ldb	r17,1(r16)
    2934:	00bfffc4 	movi	r2,-1
    2938:	85400044 	addi	r21,r16,1
    293c:	d8002785 	stb	zero,158(sp)
    2940:	0007883a 	mov	r3,zero
    2944:	000f883a 	mov	r7,zero
    2948:	d8802915 	stw	r2,164(sp)
    294c:	d8003115 	stw	zero,196(sp)
    2950:	0025883a 	mov	r18,zero
    2954:	01401604 	movi	r5,88
    2958:	01800244 	movi	r6,9
    295c:	02800a84 	movi	r10,42
    2960:	02401b04 	movi	r9,108
    2964:	ad400044 	addi	r21,r21,1
    2968:	88bff804 	addi	r2,r17,-32
    296c:	28830436 	bltu	r5,r2,3580 <___vfprintf_internal_r+0xda0>
    2970:	100490ba 	slli	r2,r2,2
    2974:	01000034 	movhi	r4,0
    2978:	210a6204 	addi	r4,r4,10632
    297c:	1105883a 	add	r2,r2,r4
    2980:	10800017 	ldw	r2,0(r2)
    2984:	1000683a 	jmp	r2
    2988:	000034a0 	cmpeqi	zero,zero,210
    298c:	00003580 	call	358 <init_camera+0x180>
    2990:	00003580 	call	358 <init_camera+0x180>
    2994:	000034c0 	call	34c <init_camera+0x174>
    2998:	00003580 	call	358 <init_camera+0x180>
    299c:	00003580 	call	358 <init_camera+0x180>
    29a0:	00003580 	call	358 <init_camera+0x180>
    29a4:	00003580 	call	358 <init_camera+0x180>
    29a8:	00003580 	call	358 <init_camera+0x180>
    29ac:	00003580 	call	358 <init_camera+0x180>
    29b0:	00002c34 	movhi	zero,176
    29b4:	000033dc 	xori	zero,zero,207
    29b8:	00003580 	call	358 <init_camera+0x180>
    29bc:	00002afc 	xorhi	zero,zero,171
    29c0:	00002c5c 	xori	zero,zero,177
    29c4:	00003580 	call	358 <init_camera+0x180>
    29c8:	00002c9c 	xori	zero,zero,178
    29cc:	00002ca8 	cmpgeui	zero,zero,178
    29d0:	00002ca8 	cmpgeui	zero,zero,178
    29d4:	00002ca8 	cmpgeui	zero,zero,178
    29d8:	00002ca8 	cmpgeui	zero,zero,178
    29dc:	00002ca8 	cmpgeui	zero,zero,178
    29e0:	00002ca8 	cmpgeui	zero,zero,178
    29e4:	00002ca8 	cmpgeui	zero,zero,178
    29e8:	00002ca8 	cmpgeui	zero,zero,178
    29ec:	00002ca8 	cmpgeui	zero,zero,178
    29f0:	00003580 	call	358 <init_camera+0x180>
    29f4:	00003580 	call	358 <init_camera+0x180>
    29f8:	00003580 	call	358 <init_camera+0x180>
    29fc:	00003580 	call	358 <init_camera+0x180>
    2a00:	00003580 	call	358 <init_camera+0x180>
    2a04:	00003580 	call	358 <init_camera+0x180>
    2a08:	00003580 	call	358 <init_camera+0x180>
    2a0c:	00003580 	call	358 <init_camera+0x180>
    2a10:	00003580 	call	358 <init_camera+0x180>
    2a14:	00003580 	call	358 <init_camera+0x180>
    2a18:	00002cdc 	xori	zero,zero,179
    2a1c:	00002d98 	cmpnei	zero,zero,182
    2a20:	00003580 	call	358 <init_camera+0x180>
    2a24:	00002d98 	cmpnei	zero,zero,182
    2a28:	00003580 	call	358 <init_camera+0x180>
    2a2c:	00003580 	call	358 <init_camera+0x180>
    2a30:	00003580 	call	358 <init_camera+0x180>
    2a34:	00003580 	call	358 <init_camera+0x180>
    2a38:	00002e38 	rdprs	zero,zero,184
    2a3c:	00003580 	call	358 <init_camera+0x180>
    2a40:	00003580 	call	358 <init_camera+0x180>
    2a44:	00002e44 	movi	zero,185
    2a48:	00003580 	call	358 <init_camera+0x180>
    2a4c:	00003580 	call	358 <init_camera+0x180>
    2a50:	00003580 	call	358 <init_camera+0x180>
    2a54:	00003580 	call	358 <init_camera+0x180>
    2a58:	00003580 	call	358 <init_camera+0x180>
    2a5c:	000032bc 	xorhi	zero,zero,202
    2a60:	00003580 	call	358 <init_camera+0x180>
    2a64:	00003580 	call	358 <init_camera+0x180>
    2a68:	0000331c 	xori	zero,zero,204
    2a6c:	00003580 	call	358 <init_camera+0x180>
    2a70:	00003580 	call	358 <init_camera+0x180>
    2a74:	00003580 	call	358 <init_camera+0x180>
    2a78:	00003580 	call	358 <init_camera+0x180>
    2a7c:	00003580 	call	358 <init_camera+0x180>
    2a80:	00003580 	call	358 <init_camera+0x180>
    2a84:	00003580 	call	358 <init_camera+0x180>
    2a88:	00003580 	call	358 <init_camera+0x180>
    2a8c:	00003580 	call	358 <init_camera+0x180>
    2a90:	00003580 	call	358 <init_camera+0x180>
    2a94:	0000352c 	andhi	zero,zero,212
    2a98:	000034cc 	andi	zero,zero,211
    2a9c:	00002d98 	cmpnei	zero,zero,182
    2aa0:	00002d98 	cmpnei	zero,zero,182
    2aa4:	00002d98 	cmpnei	zero,zero,182
    2aa8:	000034dc 	xori	zero,zero,211
    2aac:	000034cc 	andi	zero,zero,211
    2ab0:	00003580 	call	358 <init_camera+0x180>
    2ab4:	00003580 	call	358 <init_camera+0x180>
    2ab8:	000034e8 	cmpgeui	zero,zero,211
    2abc:	00003580 	call	358 <init_camera+0x180>
    2ac0:	000034f8 	rdprs	zero,zero,211
    2ac4:	000033cc 	andi	zero,zero,207
    2ac8:	00002b08 	cmpgei	zero,zero,172
    2acc:	000033ec 	andhi	zero,zero,207
    2ad0:	00003580 	call	358 <init_camera+0x180>
    2ad4:	000033f8 	rdprs	zero,zero,207
    2ad8:	00003580 	call	358 <init_camera+0x180>
    2adc:	00003454 	movui	zero,209
    2ae0:	00003580 	call	358 <init_camera+0x180>
    2ae4:	00003580 	call	358 <init_camera+0x180>
    2ae8:	00003464 	muli	zero,zero,209
    2aec:	d9003117 	ldw	r4,196(sp)
    2af0:	d8802d15 	stw	r2,180(sp)
    2af4:	0109c83a 	sub	r4,zero,r4
    2af8:	d9003115 	stw	r4,196(sp)
    2afc:	94800114 	ori	r18,r18,4
    2b00:	ac400007 	ldb	r17,0(r21)
    2b04:	003f9706 	br	2964 <__alt_data_end+0xff002964>
    2b08:	00800c04 	movi	r2,48
    2b0c:	d9002d17 	ldw	r4,180(sp)
    2b10:	d9402917 	ldw	r5,164(sp)
    2b14:	d8802705 	stb	r2,156(sp)
    2b18:	00801e04 	movi	r2,120
    2b1c:	d8802745 	stb	r2,157(sp)
    2b20:	d8002785 	stb	zero,158(sp)
    2b24:	20c00104 	addi	r3,r4,4
    2b28:	24c00017 	ldw	r19,0(r4)
    2b2c:	002d883a 	mov	r22,zero
    2b30:	90800094 	ori	r2,r18,2
    2b34:	28029a16 	blt	r5,zero,35a0 <___vfprintf_internal_r+0xdc0>
    2b38:	00bfdfc4 	movi	r2,-129
    2b3c:	90a4703a 	and	r18,r18,r2
    2b40:	d8c02d15 	stw	r3,180(sp)
    2b44:	94800094 	ori	r18,r18,2
    2b48:	9802871e 	bne	r19,zero,3568 <___vfprintf_internal_r+0xd88>
    2b4c:	00800074 	movhi	r2,1
    2b50:	1081cf04 	addi	r2,r2,1852
    2b54:	d8803915 	stw	r2,228(sp)
    2b58:	04401e04 	movi	r17,120
    2b5c:	d8802917 	ldw	r2,164(sp)
    2b60:	0039883a 	mov	fp,zero
    2b64:	1001e926 	beq	r2,zero,330c <___vfprintf_internal_r+0xb2c>
    2b68:	0027883a 	mov	r19,zero
    2b6c:	002d883a 	mov	r22,zero
    2b70:	00020506 	br	3388 <___vfprintf_internal_r+0xba8>
    2b74:	d9002c17 	ldw	r4,176(sp)
    2b78:	b80b883a 	mov	r5,r23
    2b7c:	0004ab00 	call	4ab0 <__swsetup_r>
    2b80:	1005ac1e 	bne	r2,zero,4234 <___vfprintf_internal_r+0x1a54>
    2b84:	b880030b 	ldhu	r2,12(r23)
    2b88:	00c00284 	movi	r3,10
    2b8c:	1080068c 	andi	r2,r2,26
    2b90:	10ff3c1e 	bne	r2,r3,2884 <__alt_data_end+0xff002884>
    2b94:	b880038f 	ldh	r2,14(r23)
    2b98:	103f3a16 	blt	r2,zero,2884 <__alt_data_end+0xff002884>
    2b9c:	d9c02d17 	ldw	r7,180(sp)
    2ba0:	d9002c17 	ldw	r4,176(sp)
    2ba4:	a80d883a 	mov	r6,r21
    2ba8:	b80b883a 	mov	r5,r23
    2bac:	00049f40 	call	49f4 <__sbprintf>
    2bb0:	00001106 	br	2bf8 <___vfprintf_internal_r+0x418>
    2bb4:	d9002c17 	ldw	r4,176(sp)
    2bb8:	d9801e04 	addi	r6,sp,120
    2bbc:	b80b883a 	mov	r5,r23
    2bc0:	000957c0 	call	957c <__sprint_r>
    2bc4:	1000081e 	bne	r2,zero,2be8 <___vfprintf_internal_r+0x408>
    2bc8:	da000404 	addi	r8,sp,16
    2bcc:	003f5306 	br	291c <__alt_data_end+0xff00291c>
    2bd0:	d8802017 	ldw	r2,128(sp)
    2bd4:	10000426 	beq	r2,zero,2be8 <___vfprintf_internal_r+0x408>
    2bd8:	d9002c17 	ldw	r4,176(sp)
    2bdc:	d9801e04 	addi	r6,sp,120
    2be0:	b80b883a 	mov	r5,r23
    2be4:	000957c0 	call	957c <__sprint_r>
    2be8:	b880030b 	ldhu	r2,12(r23)
    2bec:	1080100c 	andi	r2,r2,64
    2bf0:	1005901e 	bne	r2,zero,4234 <___vfprintf_internal_r+0x1a54>
    2bf4:	d8802f17 	ldw	r2,188(sp)
    2bf8:	dfc04717 	ldw	ra,284(sp)
    2bfc:	df004617 	ldw	fp,280(sp)
    2c00:	ddc04517 	ldw	r23,276(sp)
    2c04:	dd804417 	ldw	r22,272(sp)
    2c08:	dd404317 	ldw	r21,268(sp)
    2c0c:	dd004217 	ldw	r20,264(sp)
    2c10:	dcc04117 	ldw	r19,260(sp)
    2c14:	dc804017 	ldw	r18,256(sp)
    2c18:	dc403f17 	ldw	r17,252(sp)
    2c1c:	dc003e17 	ldw	r16,248(sp)
    2c20:	dec04804 	addi	sp,sp,288
    2c24:	f800283a 	ret
    2c28:	d9002c17 	ldw	r4,176(sp)
    2c2c:	0006a840 	call	6a84 <__sinit>
    2c30:	003f0406 	br	2844 <__alt_data_end+0xff002844>
    2c34:	d8802d17 	ldw	r2,180(sp)
    2c38:	d9002d17 	ldw	r4,180(sp)
    2c3c:	10800017 	ldw	r2,0(r2)
    2c40:	d8803115 	stw	r2,196(sp)
    2c44:	20800104 	addi	r2,r4,4
    2c48:	d9003117 	ldw	r4,196(sp)
    2c4c:	203fa716 	blt	r4,zero,2aec <__alt_data_end+0xff002aec>
    2c50:	d8802d15 	stw	r2,180(sp)
    2c54:	ac400007 	ldb	r17,0(r21)
    2c58:	003f4206 	br	2964 <__alt_data_end+0xff002964>
    2c5c:	ac400007 	ldb	r17,0(r21)
    2c60:	aac00044 	addi	r11,r21,1
    2c64:	8a872826 	beq	r17,r10,4908 <___vfprintf_internal_r+0x2128>
    2c68:	88bff404 	addi	r2,r17,-48
    2c6c:	0009883a 	mov	r4,zero
    2c70:	30867d36 	bltu	r6,r2,4668 <___vfprintf_internal_r+0x1e88>
    2c74:	5c400007 	ldb	r17,0(r11)
    2c78:	210002a4 	muli	r4,r4,10
    2c7c:	5d400044 	addi	r21,r11,1
    2c80:	a817883a 	mov	r11,r21
    2c84:	2089883a 	add	r4,r4,r2
    2c88:	88bff404 	addi	r2,r17,-48
    2c8c:	30bff92e 	bgeu	r6,r2,2c74 <__alt_data_end+0xff002c74>
    2c90:	2005c916 	blt	r4,zero,43b8 <___vfprintf_internal_r+0x1bd8>
    2c94:	d9002915 	stw	r4,164(sp)
    2c98:	003f3306 	br	2968 <__alt_data_end+0xff002968>
    2c9c:	94802014 	ori	r18,r18,128
    2ca0:	ac400007 	ldb	r17,0(r21)
    2ca4:	003f2f06 	br	2964 <__alt_data_end+0xff002964>
    2ca8:	a809883a 	mov	r4,r21
    2cac:	d8003115 	stw	zero,196(sp)
    2cb0:	88bff404 	addi	r2,r17,-48
    2cb4:	0017883a 	mov	r11,zero
    2cb8:	24400007 	ldb	r17,0(r4)
    2cbc:	5ac002a4 	muli	r11,r11,10
    2cc0:	ad400044 	addi	r21,r21,1
    2cc4:	a809883a 	mov	r4,r21
    2cc8:	12d7883a 	add	r11,r2,r11
    2ccc:	88bff404 	addi	r2,r17,-48
    2cd0:	30bff92e 	bgeu	r6,r2,2cb8 <__alt_data_end+0xff002cb8>
    2cd4:	dac03115 	stw	r11,196(sp)
    2cd8:	003f2306 	br	2968 <__alt_data_end+0xff002968>
    2cdc:	18c03fcc 	andi	r3,r3,255
    2ce0:	18072b1e 	bne	r3,zero,4990 <___vfprintf_internal_r+0x21b0>
    2ce4:	94800414 	ori	r18,r18,16
    2ce8:	9080080c 	andi	r2,r18,32
    2cec:	10037b26 	beq	r2,zero,3adc <___vfprintf_internal_r+0x12fc>
    2cf0:	d9402d17 	ldw	r5,180(sp)
    2cf4:	28800117 	ldw	r2,4(r5)
    2cf8:	2cc00017 	ldw	r19,0(r5)
    2cfc:	29400204 	addi	r5,r5,8
    2d00:	d9402d15 	stw	r5,180(sp)
    2d04:	102d883a 	mov	r22,r2
    2d08:	10044b16 	blt	r2,zero,3e38 <___vfprintf_internal_r+0x1658>
    2d0c:	d9402917 	ldw	r5,164(sp)
    2d10:	df002783 	ldbu	fp,158(sp)
    2d14:	2803bc16 	blt	r5,zero,3c08 <___vfprintf_internal_r+0x1428>
    2d18:	00ffdfc4 	movi	r3,-129
    2d1c:	9d84b03a 	or	r2,r19,r22
    2d20:	90e4703a 	and	r18,r18,r3
    2d24:	10017726 	beq	r2,zero,3304 <___vfprintf_internal_r+0xb24>
    2d28:	b0038326 	beq	r22,zero,3b38 <___vfprintf_internal_r+0x1358>
    2d2c:	dc402a15 	stw	r17,168(sp)
    2d30:	dc001e04 	addi	r16,sp,120
    2d34:	b023883a 	mov	r17,r22
    2d38:	402d883a 	mov	r22,r8
    2d3c:	9809883a 	mov	r4,r19
    2d40:	880b883a 	mov	r5,r17
    2d44:	01800284 	movi	r6,10
    2d48:	000f883a 	mov	r7,zero
    2d4c:	000b9740 	call	b974 <__umoddi3>
    2d50:	10800c04 	addi	r2,r2,48
    2d54:	843fffc4 	addi	r16,r16,-1
    2d58:	9809883a 	mov	r4,r19
    2d5c:	880b883a 	mov	r5,r17
    2d60:	80800005 	stb	r2,0(r16)
    2d64:	01800284 	movi	r6,10
    2d68:	000f883a 	mov	r7,zero
    2d6c:	000b3fc0 	call	b3fc <__udivdi3>
    2d70:	1027883a 	mov	r19,r2
    2d74:	10c4b03a 	or	r2,r2,r3
    2d78:	1823883a 	mov	r17,r3
    2d7c:	103fef1e 	bne	r2,zero,2d3c <__alt_data_end+0xff002d3c>
    2d80:	d8c02817 	ldw	r3,160(sp)
    2d84:	dc402a17 	ldw	r17,168(sp)
    2d88:	b011883a 	mov	r8,r22
    2d8c:	1c07c83a 	sub	r3,r3,r16
    2d90:	d8c02e15 	stw	r3,184(sp)
    2d94:	00005906 	br	2efc <___vfprintf_internal_r+0x71c>
    2d98:	18c03fcc 	andi	r3,r3,255
    2d9c:	1806fa1e 	bne	r3,zero,4988 <___vfprintf_internal_r+0x21a8>
    2da0:	9080020c 	andi	r2,r18,8
    2da4:	10048a26 	beq	r2,zero,3fd0 <___vfprintf_internal_r+0x17f0>
    2da8:	d8c02d17 	ldw	r3,180(sp)
    2dac:	d9002d17 	ldw	r4,180(sp)
    2db0:	d9402d17 	ldw	r5,180(sp)
    2db4:	18c00017 	ldw	r3,0(r3)
    2db8:	21000117 	ldw	r4,4(r4)
    2dbc:	29400204 	addi	r5,r5,8
    2dc0:	d8c03615 	stw	r3,216(sp)
    2dc4:	d9003815 	stw	r4,224(sp)
    2dc8:	d9402d15 	stw	r5,180(sp)
    2dcc:	d9003617 	ldw	r4,216(sp)
    2dd0:	d9403817 	ldw	r5,224(sp)
    2dd4:	da003d15 	stw	r8,244(sp)
    2dd8:	04000044 	movi	r16,1
    2ddc:	00091f40 	call	91f4 <__fpclassifyd>
    2de0:	da003d17 	ldw	r8,244(sp)
    2de4:	14041f1e 	bne	r2,r16,3e64 <___vfprintf_internal_r+0x1684>
    2de8:	d9003617 	ldw	r4,216(sp)
    2dec:	d9403817 	ldw	r5,224(sp)
    2df0:	000d883a 	mov	r6,zero
    2df4:	000f883a 	mov	r7,zero
    2df8:	000d3580 	call	d358 <__ledf2>
    2dfc:	da003d17 	ldw	r8,244(sp)
    2e00:	1005be16 	blt	r2,zero,44fc <___vfprintf_internal_r+0x1d1c>
    2e04:	df002783 	ldbu	fp,158(sp)
    2e08:	008011c4 	movi	r2,71
    2e0c:	1445330e 	bge	r2,r17,42dc <___vfprintf_internal_r+0x1afc>
    2e10:	04000074 	movhi	r16,1
    2e14:	8401c704 	addi	r16,r16,1820
    2e18:	00c000c4 	movi	r3,3
    2e1c:	00bfdfc4 	movi	r2,-129
    2e20:	d8c02a15 	stw	r3,168(sp)
    2e24:	90a4703a 	and	r18,r18,r2
    2e28:	d8c02e15 	stw	r3,184(sp)
    2e2c:	d8002915 	stw	zero,164(sp)
    2e30:	d8003215 	stw	zero,200(sp)
    2e34:	00003706 	br	2f14 <___vfprintf_internal_r+0x734>
    2e38:	94800214 	ori	r18,r18,8
    2e3c:	ac400007 	ldb	r17,0(r21)
    2e40:	003ec806 	br	2964 <__alt_data_end+0xff002964>
    2e44:	18c03fcc 	andi	r3,r3,255
    2e48:	1806db1e 	bne	r3,zero,49b8 <___vfprintf_internal_r+0x21d8>
    2e4c:	94800414 	ori	r18,r18,16
    2e50:	9080080c 	andi	r2,r18,32
    2e54:	1002d826 	beq	r2,zero,39b8 <___vfprintf_internal_r+0x11d8>
    2e58:	d9402d17 	ldw	r5,180(sp)
    2e5c:	d8c02917 	ldw	r3,164(sp)
    2e60:	d8002785 	stb	zero,158(sp)
    2e64:	28800204 	addi	r2,r5,8
    2e68:	2cc00017 	ldw	r19,0(r5)
    2e6c:	2d800117 	ldw	r22,4(r5)
    2e70:	18048f16 	blt	r3,zero,40b0 <___vfprintf_internal_r+0x18d0>
    2e74:	013fdfc4 	movi	r4,-129
    2e78:	9d86b03a 	or	r3,r19,r22
    2e7c:	d8802d15 	stw	r2,180(sp)
    2e80:	9124703a 	and	r18,r18,r4
    2e84:	1802d91e 	bne	r3,zero,39ec <___vfprintf_internal_r+0x120c>
    2e88:	d8c02917 	ldw	r3,164(sp)
    2e8c:	0039883a 	mov	fp,zero
    2e90:	1805c326 	beq	r3,zero,45a0 <___vfprintf_internal_r+0x1dc0>
    2e94:	0027883a 	mov	r19,zero
    2e98:	002d883a 	mov	r22,zero
    2e9c:	dc001e04 	addi	r16,sp,120
    2ea0:	9806d0fa 	srli	r3,r19,3
    2ea4:	b008977a 	slli	r4,r22,29
    2ea8:	b02cd0fa 	srli	r22,r22,3
    2eac:	9cc001cc 	andi	r19,r19,7
    2eb0:	98800c04 	addi	r2,r19,48
    2eb4:	843fffc4 	addi	r16,r16,-1
    2eb8:	20e6b03a 	or	r19,r4,r3
    2ebc:	80800005 	stb	r2,0(r16)
    2ec0:	9d86b03a 	or	r3,r19,r22
    2ec4:	183ff61e 	bne	r3,zero,2ea0 <__alt_data_end+0xff002ea0>
    2ec8:	90c0004c 	andi	r3,r18,1
    2ecc:	18013b26 	beq	r3,zero,33bc <___vfprintf_internal_r+0xbdc>
    2ed0:	10803fcc 	andi	r2,r2,255
    2ed4:	1080201c 	xori	r2,r2,128
    2ed8:	10bfe004 	addi	r2,r2,-128
    2edc:	00c00c04 	movi	r3,48
    2ee0:	10c13626 	beq	r2,r3,33bc <___vfprintf_internal_r+0xbdc>
    2ee4:	80ffffc5 	stb	r3,-1(r16)
    2ee8:	d8c02817 	ldw	r3,160(sp)
    2eec:	80bfffc4 	addi	r2,r16,-1
    2ef0:	1021883a 	mov	r16,r2
    2ef4:	1887c83a 	sub	r3,r3,r2
    2ef8:	d8c02e15 	stw	r3,184(sp)
    2efc:	d8802e17 	ldw	r2,184(sp)
    2f00:	d9002917 	ldw	r4,164(sp)
    2f04:	1100010e 	bge	r2,r4,2f0c <___vfprintf_internal_r+0x72c>
    2f08:	2005883a 	mov	r2,r4
    2f0c:	d8802a15 	stw	r2,168(sp)
    2f10:	d8003215 	stw	zero,200(sp)
    2f14:	e7003fcc 	andi	fp,fp,255
    2f18:	e700201c 	xori	fp,fp,128
    2f1c:	e73fe004 	addi	fp,fp,-128
    2f20:	e0000326 	beq	fp,zero,2f30 <___vfprintf_internal_r+0x750>
    2f24:	d8c02a17 	ldw	r3,168(sp)
    2f28:	18c00044 	addi	r3,r3,1
    2f2c:	d8c02a15 	stw	r3,168(sp)
    2f30:	90c0008c 	andi	r3,r18,2
    2f34:	d8c02b15 	stw	r3,172(sp)
    2f38:	18000326 	beq	r3,zero,2f48 <___vfprintf_internal_r+0x768>
    2f3c:	d8c02a17 	ldw	r3,168(sp)
    2f40:	18c00084 	addi	r3,r3,2
    2f44:	d8c02a15 	stw	r3,168(sp)
    2f48:	90c0210c 	andi	r3,r18,132
    2f4c:	d8c03015 	stw	r3,192(sp)
    2f50:	1801a31e 	bne	r3,zero,35e0 <___vfprintf_internal_r+0xe00>
    2f54:	d9003117 	ldw	r4,196(sp)
    2f58:	d8c02a17 	ldw	r3,168(sp)
    2f5c:	20e7c83a 	sub	r19,r4,r3
    2f60:	04c19f0e 	bge	zero,r19,35e0 <___vfprintf_internal_r+0xe00>
    2f64:	02400404 	movi	r9,16
    2f68:	d8c02017 	ldw	r3,128(sp)
    2f6c:	d8801f17 	ldw	r2,124(sp)
    2f70:	4cc50d0e 	bge	r9,r19,43a8 <___vfprintf_internal_r+0x1bc8>
    2f74:	01400074 	movhi	r5,1
    2f78:	2941da84 	addi	r5,r5,1898
    2f7c:	dc403b15 	stw	r17,236(sp)
    2f80:	d9403515 	stw	r5,212(sp)
    2f84:	9823883a 	mov	r17,r19
    2f88:	482d883a 	mov	r22,r9
    2f8c:	9027883a 	mov	r19,r18
    2f90:	070001c4 	movi	fp,7
    2f94:	8025883a 	mov	r18,r16
    2f98:	dc002c17 	ldw	r16,176(sp)
    2f9c:	00000306 	br	2fac <___vfprintf_internal_r+0x7cc>
    2fa0:	8c7ffc04 	addi	r17,r17,-16
    2fa4:	42000204 	addi	r8,r8,8
    2fa8:	b440130e 	bge	r22,r17,2ff8 <___vfprintf_internal_r+0x818>
    2fac:	01000074 	movhi	r4,1
    2fb0:	18c00404 	addi	r3,r3,16
    2fb4:	10800044 	addi	r2,r2,1
    2fb8:	2101da84 	addi	r4,r4,1898
    2fbc:	41000015 	stw	r4,0(r8)
    2fc0:	45800115 	stw	r22,4(r8)
    2fc4:	d8c02015 	stw	r3,128(sp)
    2fc8:	d8801f15 	stw	r2,124(sp)
    2fcc:	e0bff40e 	bge	fp,r2,2fa0 <__alt_data_end+0xff002fa0>
    2fd0:	d9801e04 	addi	r6,sp,120
    2fd4:	b80b883a 	mov	r5,r23
    2fd8:	8009883a 	mov	r4,r16
    2fdc:	000957c0 	call	957c <__sprint_r>
    2fe0:	103f011e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    2fe4:	8c7ffc04 	addi	r17,r17,-16
    2fe8:	d8c02017 	ldw	r3,128(sp)
    2fec:	d8801f17 	ldw	r2,124(sp)
    2ff0:	da000404 	addi	r8,sp,16
    2ff4:	b47fed16 	blt	r22,r17,2fac <__alt_data_end+0xff002fac>
    2ff8:	9021883a 	mov	r16,r18
    2ffc:	9825883a 	mov	r18,r19
    3000:	8827883a 	mov	r19,r17
    3004:	dc403b17 	ldw	r17,236(sp)
    3008:	d9403517 	ldw	r5,212(sp)
    300c:	98c7883a 	add	r3,r19,r3
    3010:	10800044 	addi	r2,r2,1
    3014:	41400015 	stw	r5,0(r8)
    3018:	44c00115 	stw	r19,4(r8)
    301c:	d8c02015 	stw	r3,128(sp)
    3020:	d8801f15 	stw	r2,124(sp)
    3024:	010001c4 	movi	r4,7
    3028:	2082a316 	blt	r4,r2,3ab8 <___vfprintf_internal_r+0x12d8>
    302c:	df002787 	ldb	fp,158(sp)
    3030:	42000204 	addi	r8,r8,8
    3034:	e0000c26 	beq	fp,zero,3068 <___vfprintf_internal_r+0x888>
    3038:	d8801f17 	ldw	r2,124(sp)
    303c:	d9002784 	addi	r4,sp,158
    3040:	18c00044 	addi	r3,r3,1
    3044:	10800044 	addi	r2,r2,1
    3048:	41000015 	stw	r4,0(r8)
    304c:	01000044 	movi	r4,1
    3050:	41000115 	stw	r4,4(r8)
    3054:	d8c02015 	stw	r3,128(sp)
    3058:	d8801f15 	stw	r2,124(sp)
    305c:	010001c4 	movi	r4,7
    3060:	20823c16 	blt	r4,r2,3954 <___vfprintf_internal_r+0x1174>
    3064:	42000204 	addi	r8,r8,8
    3068:	d8802b17 	ldw	r2,172(sp)
    306c:	10000c26 	beq	r2,zero,30a0 <___vfprintf_internal_r+0x8c0>
    3070:	d8801f17 	ldw	r2,124(sp)
    3074:	d9002704 	addi	r4,sp,156
    3078:	18c00084 	addi	r3,r3,2
    307c:	10800044 	addi	r2,r2,1
    3080:	41000015 	stw	r4,0(r8)
    3084:	01000084 	movi	r4,2
    3088:	41000115 	stw	r4,4(r8)
    308c:	d8c02015 	stw	r3,128(sp)
    3090:	d8801f15 	stw	r2,124(sp)
    3094:	010001c4 	movi	r4,7
    3098:	20823616 	blt	r4,r2,3974 <___vfprintf_internal_r+0x1194>
    309c:	42000204 	addi	r8,r8,8
    30a0:	d9003017 	ldw	r4,192(sp)
    30a4:	00802004 	movi	r2,128
    30a8:	20819926 	beq	r4,r2,3710 <___vfprintf_internal_r+0xf30>
    30ac:	d9402917 	ldw	r5,164(sp)
    30b0:	d8802e17 	ldw	r2,184(sp)
    30b4:	28adc83a 	sub	r22,r5,r2
    30b8:	0580310e 	bge	zero,r22,3180 <___vfprintf_internal_r+0x9a0>
    30bc:	07000404 	movi	fp,16
    30c0:	d8801f17 	ldw	r2,124(sp)
    30c4:	e584140e 	bge	fp,r22,4118 <___vfprintf_internal_r+0x1938>
    30c8:	01400074 	movhi	r5,1
    30cc:	2941d684 	addi	r5,r5,1882
    30d0:	dc402915 	stw	r17,164(sp)
    30d4:	d9402b15 	stw	r5,172(sp)
    30d8:	b023883a 	mov	r17,r22
    30dc:	04c001c4 	movi	r19,7
    30e0:	a82d883a 	mov	r22,r21
    30e4:	902b883a 	mov	r21,r18
    30e8:	8025883a 	mov	r18,r16
    30ec:	dc002c17 	ldw	r16,176(sp)
    30f0:	00000306 	br	3100 <___vfprintf_internal_r+0x920>
    30f4:	8c7ffc04 	addi	r17,r17,-16
    30f8:	42000204 	addi	r8,r8,8
    30fc:	e440110e 	bge	fp,r17,3144 <___vfprintf_internal_r+0x964>
    3100:	18c00404 	addi	r3,r3,16
    3104:	10800044 	addi	r2,r2,1
    3108:	45000015 	stw	r20,0(r8)
    310c:	47000115 	stw	fp,4(r8)
    3110:	d8c02015 	stw	r3,128(sp)
    3114:	d8801f15 	stw	r2,124(sp)
    3118:	98bff60e 	bge	r19,r2,30f4 <__alt_data_end+0xff0030f4>
    311c:	d9801e04 	addi	r6,sp,120
    3120:	b80b883a 	mov	r5,r23
    3124:	8009883a 	mov	r4,r16
    3128:	000957c0 	call	957c <__sprint_r>
    312c:	103eae1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3130:	8c7ffc04 	addi	r17,r17,-16
    3134:	d8c02017 	ldw	r3,128(sp)
    3138:	d8801f17 	ldw	r2,124(sp)
    313c:	da000404 	addi	r8,sp,16
    3140:	e47fef16 	blt	fp,r17,3100 <__alt_data_end+0xff003100>
    3144:	9021883a 	mov	r16,r18
    3148:	a825883a 	mov	r18,r21
    314c:	b02b883a 	mov	r21,r22
    3150:	882d883a 	mov	r22,r17
    3154:	dc402917 	ldw	r17,164(sp)
    3158:	d9002b17 	ldw	r4,172(sp)
    315c:	1d87883a 	add	r3,r3,r22
    3160:	10800044 	addi	r2,r2,1
    3164:	41000015 	stw	r4,0(r8)
    3168:	45800115 	stw	r22,4(r8)
    316c:	d8c02015 	stw	r3,128(sp)
    3170:	d8801f15 	stw	r2,124(sp)
    3174:	010001c4 	movi	r4,7
    3178:	2081ee16 	blt	r4,r2,3934 <___vfprintf_internal_r+0x1154>
    317c:	42000204 	addi	r8,r8,8
    3180:	9080400c 	andi	r2,r18,256
    3184:	1001181e 	bne	r2,zero,35e8 <___vfprintf_internal_r+0xe08>
    3188:	d9402e17 	ldw	r5,184(sp)
    318c:	d8801f17 	ldw	r2,124(sp)
    3190:	44000015 	stw	r16,0(r8)
    3194:	1947883a 	add	r3,r3,r5
    3198:	10800044 	addi	r2,r2,1
    319c:	41400115 	stw	r5,4(r8)
    31a0:	d8c02015 	stw	r3,128(sp)
    31a4:	d8801f15 	stw	r2,124(sp)
    31a8:	010001c4 	movi	r4,7
    31ac:	2081d316 	blt	r4,r2,38fc <___vfprintf_internal_r+0x111c>
    31b0:	42000204 	addi	r8,r8,8
    31b4:	9480010c 	andi	r18,r18,4
    31b8:	90003226 	beq	r18,zero,3284 <___vfprintf_internal_r+0xaa4>
    31bc:	d9403117 	ldw	r5,196(sp)
    31c0:	d8802a17 	ldw	r2,168(sp)
    31c4:	28a1c83a 	sub	r16,r5,r2
    31c8:	04002e0e 	bge	zero,r16,3284 <___vfprintf_internal_r+0xaa4>
    31cc:	04400404 	movi	r17,16
    31d0:	d8801f17 	ldw	r2,124(sp)
    31d4:	8c04a20e 	bge	r17,r16,4460 <___vfprintf_internal_r+0x1c80>
    31d8:	01400074 	movhi	r5,1
    31dc:	2941da84 	addi	r5,r5,1898
    31e0:	d9403515 	stw	r5,212(sp)
    31e4:	048001c4 	movi	r18,7
    31e8:	dcc02c17 	ldw	r19,176(sp)
    31ec:	00000306 	br	31fc <___vfprintf_internal_r+0xa1c>
    31f0:	843ffc04 	addi	r16,r16,-16
    31f4:	42000204 	addi	r8,r8,8
    31f8:	8c00130e 	bge	r17,r16,3248 <___vfprintf_internal_r+0xa68>
    31fc:	01000074 	movhi	r4,1
    3200:	18c00404 	addi	r3,r3,16
    3204:	10800044 	addi	r2,r2,1
    3208:	2101da84 	addi	r4,r4,1898
    320c:	41000015 	stw	r4,0(r8)
    3210:	44400115 	stw	r17,4(r8)
    3214:	d8c02015 	stw	r3,128(sp)
    3218:	d8801f15 	stw	r2,124(sp)
    321c:	90bff40e 	bge	r18,r2,31f0 <__alt_data_end+0xff0031f0>
    3220:	d9801e04 	addi	r6,sp,120
    3224:	b80b883a 	mov	r5,r23
    3228:	9809883a 	mov	r4,r19
    322c:	000957c0 	call	957c <__sprint_r>
    3230:	103e6d1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3234:	843ffc04 	addi	r16,r16,-16
    3238:	d8c02017 	ldw	r3,128(sp)
    323c:	d8801f17 	ldw	r2,124(sp)
    3240:	da000404 	addi	r8,sp,16
    3244:	8c3fed16 	blt	r17,r16,31fc <__alt_data_end+0xff0031fc>
    3248:	d9403517 	ldw	r5,212(sp)
    324c:	1c07883a 	add	r3,r3,r16
    3250:	10800044 	addi	r2,r2,1
    3254:	41400015 	stw	r5,0(r8)
    3258:	44000115 	stw	r16,4(r8)
    325c:	d8c02015 	stw	r3,128(sp)
    3260:	d8801f15 	stw	r2,124(sp)
    3264:	010001c4 	movi	r4,7
    3268:	2080060e 	bge	r4,r2,3284 <___vfprintf_internal_r+0xaa4>
    326c:	d9002c17 	ldw	r4,176(sp)
    3270:	d9801e04 	addi	r6,sp,120
    3274:	b80b883a 	mov	r5,r23
    3278:	000957c0 	call	957c <__sprint_r>
    327c:	103e5a1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3280:	d8c02017 	ldw	r3,128(sp)
    3284:	d8803117 	ldw	r2,196(sp)
    3288:	d9002a17 	ldw	r4,168(sp)
    328c:	1100010e 	bge	r2,r4,3294 <___vfprintf_internal_r+0xab4>
    3290:	2005883a 	mov	r2,r4
    3294:	d9402f17 	ldw	r5,188(sp)
    3298:	288b883a 	add	r5,r5,r2
    329c:	d9402f15 	stw	r5,188(sp)
    32a0:	18019e1e 	bne	r3,zero,391c <___vfprintf_internal_r+0x113c>
    32a4:	a8800007 	ldb	r2,0(r21)
    32a8:	d8001f15 	stw	zero,124(sp)
    32ac:	da000404 	addi	r8,sp,16
    32b0:	103d851e 	bne	r2,zero,28c8 <__alt_data_end+0xff0028c8>
    32b4:	a821883a 	mov	r16,r21
    32b8:	003d9b06 	br	2928 <__alt_data_end+0xff002928>
    32bc:	18c03fcc 	andi	r3,r3,255
    32c0:	1805c11e 	bne	r3,zero,49c8 <___vfprintf_internal_r+0x21e8>
    32c4:	94800414 	ori	r18,r18,16
    32c8:	9080080c 	andi	r2,r18,32
    32cc:	10020c26 	beq	r2,zero,3b00 <___vfprintf_internal_r+0x1320>
    32d0:	d8802d17 	ldw	r2,180(sp)
    32d4:	d9002917 	ldw	r4,164(sp)
    32d8:	d8002785 	stb	zero,158(sp)
    32dc:	10c00204 	addi	r3,r2,8
    32e0:	14c00017 	ldw	r19,0(r2)
    32e4:	15800117 	ldw	r22,4(r2)
    32e8:	20040f16 	blt	r4,zero,4328 <___vfprintf_internal_r+0x1b48>
    32ec:	013fdfc4 	movi	r4,-129
    32f0:	9d84b03a 	or	r2,r19,r22
    32f4:	d8c02d15 	stw	r3,180(sp)
    32f8:	9124703a 	and	r18,r18,r4
    32fc:	0039883a 	mov	fp,zero
    3300:	103e891e 	bne	r2,zero,2d28 <__alt_data_end+0xff002d28>
    3304:	d9002917 	ldw	r4,164(sp)
    3308:	2002c11e 	bne	r4,zero,3e10 <___vfprintf_internal_r+0x1630>
    330c:	d8002915 	stw	zero,164(sp)
    3310:	d8002e15 	stw	zero,184(sp)
    3314:	dc001e04 	addi	r16,sp,120
    3318:	003ef806 	br	2efc <__alt_data_end+0xff002efc>
    331c:	18c03fcc 	andi	r3,r3,255
    3320:	18059d1e 	bne	r3,zero,4998 <___vfprintf_internal_r+0x21b8>
    3324:	01400074 	movhi	r5,1
    3328:	2941ca04 	addi	r5,r5,1832
    332c:	d9403915 	stw	r5,228(sp)
    3330:	9080080c 	andi	r2,r18,32
    3334:	10005226 	beq	r2,zero,3480 <___vfprintf_internal_r+0xca0>
    3338:	d8802d17 	ldw	r2,180(sp)
    333c:	14c00017 	ldw	r19,0(r2)
    3340:	15800117 	ldw	r22,4(r2)
    3344:	10800204 	addi	r2,r2,8
    3348:	d8802d15 	stw	r2,180(sp)
    334c:	9080004c 	andi	r2,r18,1
    3350:	10019026 	beq	r2,zero,3994 <___vfprintf_internal_r+0x11b4>
    3354:	9d84b03a 	or	r2,r19,r22
    3358:	10036926 	beq	r2,zero,4100 <___vfprintf_internal_r+0x1920>
    335c:	d8c02917 	ldw	r3,164(sp)
    3360:	00800c04 	movi	r2,48
    3364:	d8802705 	stb	r2,156(sp)
    3368:	dc402745 	stb	r17,157(sp)
    336c:	d8002785 	stb	zero,158(sp)
    3370:	90800094 	ori	r2,r18,2
    3374:	18045d16 	blt	r3,zero,44ec <___vfprintf_internal_r+0x1d0c>
    3378:	00bfdfc4 	movi	r2,-129
    337c:	90a4703a 	and	r18,r18,r2
    3380:	94800094 	ori	r18,r18,2
    3384:	0039883a 	mov	fp,zero
    3388:	d9003917 	ldw	r4,228(sp)
    338c:	dc001e04 	addi	r16,sp,120
    3390:	988003cc 	andi	r2,r19,15
    3394:	b006973a 	slli	r3,r22,28
    3398:	2085883a 	add	r2,r4,r2
    339c:	9826d13a 	srli	r19,r19,4
    33a0:	10800003 	ldbu	r2,0(r2)
    33a4:	b02cd13a 	srli	r22,r22,4
    33a8:	843fffc4 	addi	r16,r16,-1
    33ac:	1ce6b03a 	or	r19,r3,r19
    33b0:	80800005 	stb	r2,0(r16)
    33b4:	9d84b03a 	or	r2,r19,r22
    33b8:	103ff51e 	bne	r2,zero,3390 <__alt_data_end+0xff003390>
    33bc:	d8c02817 	ldw	r3,160(sp)
    33c0:	1c07c83a 	sub	r3,r3,r16
    33c4:	d8c02e15 	stw	r3,184(sp)
    33c8:	003ecc06 	br	2efc <__alt_data_end+0xff002efc>
    33cc:	18c03fcc 	andi	r3,r3,255
    33d0:	183e9f26 	beq	r3,zero,2e50 <__alt_data_end+0xff002e50>
    33d4:	d9c02785 	stb	r7,158(sp)
    33d8:	003e9d06 	br	2e50 <__alt_data_end+0xff002e50>
    33dc:	00c00044 	movi	r3,1
    33e0:	01c00ac4 	movi	r7,43
    33e4:	ac400007 	ldb	r17,0(r21)
    33e8:	003d5e06 	br	2964 <__alt_data_end+0xff002964>
    33ec:	94800814 	ori	r18,r18,32
    33f0:	ac400007 	ldb	r17,0(r21)
    33f4:	003d5b06 	br	2964 <__alt_data_end+0xff002964>
    33f8:	d8c02d17 	ldw	r3,180(sp)
    33fc:	d8002785 	stb	zero,158(sp)
    3400:	1c000017 	ldw	r16,0(r3)
    3404:	1cc00104 	addi	r19,r3,4
    3408:	80041926 	beq	r16,zero,4470 <___vfprintf_internal_r+0x1c90>
    340c:	d9002917 	ldw	r4,164(sp)
    3410:	2003d016 	blt	r4,zero,4354 <___vfprintf_internal_r+0x1b74>
    3414:	200d883a 	mov	r6,r4
    3418:	000b883a 	mov	r5,zero
    341c:	8009883a 	mov	r4,r16
    3420:	da003d15 	stw	r8,244(sp)
    3424:	00077e40 	call	77e4 <memchr>
    3428:	da003d17 	ldw	r8,244(sp)
    342c:	10045426 	beq	r2,zero,4580 <___vfprintf_internal_r+0x1da0>
    3430:	1405c83a 	sub	r2,r2,r16
    3434:	d8802e15 	stw	r2,184(sp)
    3438:	1003cc16 	blt	r2,zero,436c <___vfprintf_internal_r+0x1b8c>
    343c:	df002783 	ldbu	fp,158(sp)
    3440:	d8802a15 	stw	r2,168(sp)
    3444:	dcc02d15 	stw	r19,180(sp)
    3448:	d8002915 	stw	zero,164(sp)
    344c:	d8003215 	stw	zero,200(sp)
    3450:	003eb006 	br	2f14 <__alt_data_end+0xff002f14>
    3454:	18c03fcc 	andi	r3,r3,255
    3458:	183f9b26 	beq	r3,zero,32c8 <__alt_data_end+0xff0032c8>
    345c:	d9c02785 	stb	r7,158(sp)
    3460:	003f9906 	br	32c8 <__alt_data_end+0xff0032c8>
    3464:	18c03fcc 	andi	r3,r3,255
    3468:	1805551e 	bne	r3,zero,49c0 <___vfprintf_internal_r+0x21e0>
    346c:	01400074 	movhi	r5,1
    3470:	2941cf04 	addi	r5,r5,1852
    3474:	d9403915 	stw	r5,228(sp)
    3478:	9080080c 	andi	r2,r18,32
    347c:	103fae1e 	bne	r2,zero,3338 <__alt_data_end+0xff003338>
    3480:	9080040c 	andi	r2,r18,16
    3484:	1002de26 	beq	r2,zero,4000 <___vfprintf_internal_r+0x1820>
    3488:	d8c02d17 	ldw	r3,180(sp)
    348c:	002d883a 	mov	r22,zero
    3490:	1cc00017 	ldw	r19,0(r3)
    3494:	18c00104 	addi	r3,r3,4
    3498:	d8c02d15 	stw	r3,180(sp)
    349c:	003fab06 	br	334c <__alt_data_end+0xff00334c>
    34a0:	38803fcc 	andi	r2,r7,255
    34a4:	1080201c 	xori	r2,r2,128
    34a8:	10bfe004 	addi	r2,r2,-128
    34ac:	1002d21e 	bne	r2,zero,3ff8 <___vfprintf_internal_r+0x1818>
    34b0:	00c00044 	movi	r3,1
    34b4:	01c00804 	movi	r7,32
    34b8:	ac400007 	ldb	r17,0(r21)
    34bc:	003d2906 	br	2964 <__alt_data_end+0xff002964>
    34c0:	94800054 	ori	r18,r18,1
    34c4:	ac400007 	ldb	r17,0(r21)
    34c8:	003d2606 	br	2964 <__alt_data_end+0xff002964>
    34cc:	18c03fcc 	andi	r3,r3,255
    34d0:	183e0526 	beq	r3,zero,2ce8 <__alt_data_end+0xff002ce8>
    34d4:	d9c02785 	stb	r7,158(sp)
    34d8:	003e0306 	br	2ce8 <__alt_data_end+0xff002ce8>
    34dc:	94801014 	ori	r18,r18,64
    34e0:	ac400007 	ldb	r17,0(r21)
    34e4:	003d1f06 	br	2964 <__alt_data_end+0xff002964>
    34e8:	ac400007 	ldb	r17,0(r21)
    34ec:	8a438726 	beq	r17,r9,430c <___vfprintf_internal_r+0x1b2c>
    34f0:	94800414 	ori	r18,r18,16
    34f4:	003d1b06 	br	2964 <__alt_data_end+0xff002964>
    34f8:	18c03fcc 	andi	r3,r3,255
    34fc:	1805341e 	bne	r3,zero,49d0 <___vfprintf_internal_r+0x21f0>
    3500:	9080080c 	andi	r2,r18,32
    3504:	1002cd26 	beq	r2,zero,403c <___vfprintf_internal_r+0x185c>
    3508:	d9402d17 	ldw	r5,180(sp)
    350c:	d9002f17 	ldw	r4,188(sp)
    3510:	28800017 	ldw	r2,0(r5)
    3514:	2007d7fa 	srai	r3,r4,31
    3518:	29400104 	addi	r5,r5,4
    351c:	d9402d15 	stw	r5,180(sp)
    3520:	11000015 	stw	r4,0(r2)
    3524:	10c00115 	stw	r3,4(r2)
    3528:	003ce506 	br	28c0 <__alt_data_end+0xff0028c0>
    352c:	d8c02d17 	ldw	r3,180(sp)
    3530:	d9002d17 	ldw	r4,180(sp)
    3534:	d8002785 	stb	zero,158(sp)
    3538:	18800017 	ldw	r2,0(r3)
    353c:	21000104 	addi	r4,r4,4
    3540:	00c00044 	movi	r3,1
    3544:	d8c02a15 	stw	r3,168(sp)
    3548:	d8801405 	stb	r2,80(sp)
    354c:	d9002d15 	stw	r4,180(sp)
    3550:	d8c02e15 	stw	r3,184(sp)
    3554:	d8002915 	stw	zero,164(sp)
    3558:	d8003215 	stw	zero,200(sp)
    355c:	dc001404 	addi	r16,sp,80
    3560:	0039883a 	mov	fp,zero
    3564:	003e7206 	br	2f30 <__alt_data_end+0xff002f30>
    3568:	01000074 	movhi	r4,1
    356c:	2101cf04 	addi	r4,r4,1852
    3570:	0039883a 	mov	fp,zero
    3574:	d9003915 	stw	r4,228(sp)
    3578:	04401e04 	movi	r17,120
    357c:	003f8206 	br	3388 <__alt_data_end+0xff003388>
    3580:	18c03fcc 	andi	r3,r3,255
    3584:	1805061e 	bne	r3,zero,49a0 <___vfprintf_internal_r+0x21c0>
    3588:	883d9126 	beq	r17,zero,2bd0 <__alt_data_end+0xff002bd0>
    358c:	00c00044 	movi	r3,1
    3590:	d8c02a15 	stw	r3,168(sp)
    3594:	dc401405 	stb	r17,80(sp)
    3598:	d8002785 	stb	zero,158(sp)
    359c:	003fec06 	br	3550 <__alt_data_end+0xff003550>
    35a0:	01400074 	movhi	r5,1
    35a4:	2941cf04 	addi	r5,r5,1852
    35a8:	d9403915 	stw	r5,228(sp)
    35ac:	d8c02d15 	stw	r3,180(sp)
    35b0:	1025883a 	mov	r18,r2
    35b4:	04401e04 	movi	r17,120
    35b8:	9d84b03a 	or	r2,r19,r22
    35bc:	1000fc1e 	bne	r2,zero,39b0 <___vfprintf_internal_r+0x11d0>
    35c0:	0039883a 	mov	fp,zero
    35c4:	00800084 	movi	r2,2
    35c8:	10803fcc 	andi	r2,r2,255
    35cc:	00c00044 	movi	r3,1
    35d0:	10c20f26 	beq	r2,r3,3e10 <___vfprintf_internal_r+0x1630>
    35d4:	00c00084 	movi	r3,2
    35d8:	10fd6326 	beq	r2,r3,2b68 <__alt_data_end+0xff002b68>
    35dc:	003e2d06 	br	2e94 <__alt_data_end+0xff002e94>
    35e0:	d8c02017 	ldw	r3,128(sp)
    35e4:	003e9306 	br	3034 <__alt_data_end+0xff003034>
    35e8:	00801944 	movi	r2,101
    35ec:	14407e0e 	bge	r2,r17,37e8 <___vfprintf_internal_r+0x1008>
    35f0:	d9003617 	ldw	r4,216(sp)
    35f4:	d9403817 	ldw	r5,224(sp)
    35f8:	000d883a 	mov	r6,zero
    35fc:	000f883a 	mov	r7,zero
    3600:	d8c03c15 	stw	r3,240(sp)
    3604:	da003d15 	stw	r8,244(sp)
    3608:	000d1f40 	call	d1f4 <__eqdf2>
    360c:	d8c03c17 	ldw	r3,240(sp)
    3610:	da003d17 	ldw	r8,244(sp)
    3614:	1000f71e 	bne	r2,zero,39f4 <___vfprintf_internal_r+0x1214>
    3618:	d8801f17 	ldw	r2,124(sp)
    361c:	01000074 	movhi	r4,1
    3620:	2101d604 	addi	r4,r4,1880
    3624:	18c00044 	addi	r3,r3,1
    3628:	10800044 	addi	r2,r2,1
    362c:	41000015 	stw	r4,0(r8)
    3630:	01000044 	movi	r4,1
    3634:	41000115 	stw	r4,4(r8)
    3638:	d8c02015 	stw	r3,128(sp)
    363c:	d8801f15 	stw	r2,124(sp)
    3640:	010001c4 	movi	r4,7
    3644:	2082b816 	blt	r4,r2,4128 <___vfprintf_internal_r+0x1948>
    3648:	42000204 	addi	r8,r8,8
    364c:	d8802617 	ldw	r2,152(sp)
    3650:	d9403317 	ldw	r5,204(sp)
    3654:	11400216 	blt	r2,r5,3660 <___vfprintf_internal_r+0xe80>
    3658:	9080004c 	andi	r2,r18,1
    365c:	103ed526 	beq	r2,zero,31b4 <__alt_data_end+0xff0031b4>
    3660:	d8803717 	ldw	r2,220(sp)
    3664:	d9003417 	ldw	r4,208(sp)
    3668:	d9403717 	ldw	r5,220(sp)
    366c:	1887883a 	add	r3,r3,r2
    3670:	d8801f17 	ldw	r2,124(sp)
    3674:	41000015 	stw	r4,0(r8)
    3678:	41400115 	stw	r5,4(r8)
    367c:	10800044 	addi	r2,r2,1
    3680:	d8c02015 	stw	r3,128(sp)
    3684:	d8801f15 	stw	r2,124(sp)
    3688:	010001c4 	movi	r4,7
    368c:	20832916 	blt	r4,r2,4334 <___vfprintf_internal_r+0x1b54>
    3690:	42000204 	addi	r8,r8,8
    3694:	d8803317 	ldw	r2,204(sp)
    3698:	143fffc4 	addi	r16,r2,-1
    369c:	043ec50e 	bge	zero,r16,31b4 <__alt_data_end+0xff0031b4>
    36a0:	04400404 	movi	r17,16
    36a4:	d8801f17 	ldw	r2,124(sp)
    36a8:	8c00880e 	bge	r17,r16,38cc <___vfprintf_internal_r+0x10ec>
    36ac:	01400074 	movhi	r5,1
    36b0:	2941d684 	addi	r5,r5,1882
    36b4:	d9402b15 	stw	r5,172(sp)
    36b8:	058001c4 	movi	r22,7
    36bc:	dcc02c17 	ldw	r19,176(sp)
    36c0:	00000306 	br	36d0 <___vfprintf_internal_r+0xef0>
    36c4:	42000204 	addi	r8,r8,8
    36c8:	843ffc04 	addi	r16,r16,-16
    36cc:	8c00820e 	bge	r17,r16,38d8 <___vfprintf_internal_r+0x10f8>
    36d0:	18c00404 	addi	r3,r3,16
    36d4:	10800044 	addi	r2,r2,1
    36d8:	45000015 	stw	r20,0(r8)
    36dc:	44400115 	stw	r17,4(r8)
    36e0:	d8c02015 	stw	r3,128(sp)
    36e4:	d8801f15 	stw	r2,124(sp)
    36e8:	b0bff60e 	bge	r22,r2,36c4 <__alt_data_end+0xff0036c4>
    36ec:	d9801e04 	addi	r6,sp,120
    36f0:	b80b883a 	mov	r5,r23
    36f4:	9809883a 	mov	r4,r19
    36f8:	000957c0 	call	957c <__sprint_r>
    36fc:	103d3a1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3700:	d8c02017 	ldw	r3,128(sp)
    3704:	d8801f17 	ldw	r2,124(sp)
    3708:	da000404 	addi	r8,sp,16
    370c:	003fee06 	br	36c8 <__alt_data_end+0xff0036c8>
    3710:	d9403117 	ldw	r5,196(sp)
    3714:	d8802a17 	ldw	r2,168(sp)
    3718:	28adc83a 	sub	r22,r5,r2
    371c:	05be630e 	bge	zero,r22,30ac <__alt_data_end+0xff0030ac>
    3720:	07000404 	movi	fp,16
    3724:	d8801f17 	ldw	r2,124(sp)
    3728:	e5838f0e 	bge	fp,r22,4568 <___vfprintf_internal_r+0x1d88>
    372c:	01400074 	movhi	r5,1
    3730:	2941d684 	addi	r5,r5,1882
    3734:	dc403015 	stw	r17,192(sp)
    3738:	d9402b15 	stw	r5,172(sp)
    373c:	b023883a 	mov	r17,r22
    3740:	04c001c4 	movi	r19,7
    3744:	a82d883a 	mov	r22,r21
    3748:	902b883a 	mov	r21,r18
    374c:	8025883a 	mov	r18,r16
    3750:	dc002c17 	ldw	r16,176(sp)
    3754:	00000306 	br	3764 <___vfprintf_internal_r+0xf84>
    3758:	8c7ffc04 	addi	r17,r17,-16
    375c:	42000204 	addi	r8,r8,8
    3760:	e440110e 	bge	fp,r17,37a8 <___vfprintf_internal_r+0xfc8>
    3764:	18c00404 	addi	r3,r3,16
    3768:	10800044 	addi	r2,r2,1
    376c:	45000015 	stw	r20,0(r8)
    3770:	47000115 	stw	fp,4(r8)
    3774:	d8c02015 	stw	r3,128(sp)
    3778:	d8801f15 	stw	r2,124(sp)
    377c:	98bff60e 	bge	r19,r2,3758 <__alt_data_end+0xff003758>
    3780:	d9801e04 	addi	r6,sp,120
    3784:	b80b883a 	mov	r5,r23
    3788:	8009883a 	mov	r4,r16
    378c:	000957c0 	call	957c <__sprint_r>
    3790:	103d151e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3794:	8c7ffc04 	addi	r17,r17,-16
    3798:	d8c02017 	ldw	r3,128(sp)
    379c:	d8801f17 	ldw	r2,124(sp)
    37a0:	da000404 	addi	r8,sp,16
    37a4:	e47fef16 	blt	fp,r17,3764 <__alt_data_end+0xff003764>
    37a8:	9021883a 	mov	r16,r18
    37ac:	a825883a 	mov	r18,r21
    37b0:	b02b883a 	mov	r21,r22
    37b4:	882d883a 	mov	r22,r17
    37b8:	dc403017 	ldw	r17,192(sp)
    37bc:	d9002b17 	ldw	r4,172(sp)
    37c0:	1d87883a 	add	r3,r3,r22
    37c4:	10800044 	addi	r2,r2,1
    37c8:	41000015 	stw	r4,0(r8)
    37cc:	45800115 	stw	r22,4(r8)
    37d0:	d8c02015 	stw	r3,128(sp)
    37d4:	d8801f15 	stw	r2,124(sp)
    37d8:	010001c4 	movi	r4,7
    37dc:	20818e16 	blt	r4,r2,3e18 <___vfprintf_internal_r+0x1638>
    37e0:	42000204 	addi	r8,r8,8
    37e4:	003e3106 	br	30ac <__alt_data_end+0xff0030ac>
    37e8:	d9403317 	ldw	r5,204(sp)
    37ec:	00800044 	movi	r2,1
    37f0:	18c00044 	addi	r3,r3,1
    37f4:	1141530e 	bge	r2,r5,3d44 <___vfprintf_internal_r+0x1564>
    37f8:	dc401f17 	ldw	r17,124(sp)
    37fc:	00800044 	movi	r2,1
    3800:	40800115 	stw	r2,4(r8)
    3804:	8c400044 	addi	r17,r17,1
    3808:	44000015 	stw	r16,0(r8)
    380c:	d8c02015 	stw	r3,128(sp)
    3810:	dc401f15 	stw	r17,124(sp)
    3814:	008001c4 	movi	r2,7
    3818:	14416b16 	blt	r2,r17,3dc8 <___vfprintf_internal_r+0x15e8>
    381c:	42000204 	addi	r8,r8,8
    3820:	d8803717 	ldw	r2,220(sp)
    3824:	d9003417 	ldw	r4,208(sp)
    3828:	8c400044 	addi	r17,r17,1
    382c:	10c7883a 	add	r3,r2,r3
    3830:	40800115 	stw	r2,4(r8)
    3834:	41000015 	stw	r4,0(r8)
    3838:	d8c02015 	stw	r3,128(sp)
    383c:	dc401f15 	stw	r17,124(sp)
    3840:	008001c4 	movi	r2,7
    3844:	14416916 	blt	r2,r17,3dec <___vfprintf_internal_r+0x160c>
    3848:	45800204 	addi	r22,r8,8
    384c:	d9003617 	ldw	r4,216(sp)
    3850:	d9403817 	ldw	r5,224(sp)
    3854:	000d883a 	mov	r6,zero
    3858:	000f883a 	mov	r7,zero
    385c:	d8c03c15 	stw	r3,240(sp)
    3860:	000d1f40 	call	d1f4 <__eqdf2>
    3864:	d8c03c17 	ldw	r3,240(sp)
    3868:	1000bc26 	beq	r2,zero,3b5c <___vfprintf_internal_r+0x137c>
    386c:	d9403317 	ldw	r5,204(sp)
    3870:	84000044 	addi	r16,r16,1
    3874:	8c400044 	addi	r17,r17,1
    3878:	28bfffc4 	addi	r2,r5,-1
    387c:	1887883a 	add	r3,r3,r2
    3880:	b0800115 	stw	r2,4(r22)
    3884:	b4000015 	stw	r16,0(r22)
    3888:	d8c02015 	stw	r3,128(sp)
    388c:	dc401f15 	stw	r17,124(sp)
    3890:	008001c4 	movi	r2,7
    3894:	14414316 	blt	r2,r17,3da4 <___vfprintf_internal_r+0x15c4>
    3898:	b5800204 	addi	r22,r22,8
    389c:	d9003a17 	ldw	r4,232(sp)
    38a0:	df0022c4 	addi	fp,sp,139
    38a4:	8c400044 	addi	r17,r17,1
    38a8:	20c7883a 	add	r3,r4,r3
    38ac:	b7000015 	stw	fp,0(r22)
    38b0:	b1000115 	stw	r4,4(r22)
    38b4:	d8c02015 	stw	r3,128(sp)
    38b8:	dc401f15 	stw	r17,124(sp)
    38bc:	008001c4 	movi	r2,7
    38c0:	14400e16 	blt	r2,r17,38fc <___vfprintf_internal_r+0x111c>
    38c4:	b2000204 	addi	r8,r22,8
    38c8:	003e3a06 	br	31b4 <__alt_data_end+0xff0031b4>
    38cc:	01000074 	movhi	r4,1
    38d0:	2101d684 	addi	r4,r4,1882
    38d4:	d9002b15 	stw	r4,172(sp)
    38d8:	d9002b17 	ldw	r4,172(sp)
    38dc:	1c07883a 	add	r3,r3,r16
    38e0:	44000115 	stw	r16,4(r8)
    38e4:	41000015 	stw	r4,0(r8)
    38e8:	10800044 	addi	r2,r2,1
    38ec:	d8c02015 	stw	r3,128(sp)
    38f0:	d8801f15 	stw	r2,124(sp)
    38f4:	010001c4 	movi	r4,7
    38f8:	20be2d0e 	bge	r4,r2,31b0 <__alt_data_end+0xff0031b0>
    38fc:	d9002c17 	ldw	r4,176(sp)
    3900:	d9801e04 	addi	r6,sp,120
    3904:	b80b883a 	mov	r5,r23
    3908:	000957c0 	call	957c <__sprint_r>
    390c:	103cb61e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3910:	d8c02017 	ldw	r3,128(sp)
    3914:	da000404 	addi	r8,sp,16
    3918:	003e2606 	br	31b4 <__alt_data_end+0xff0031b4>
    391c:	d9002c17 	ldw	r4,176(sp)
    3920:	d9801e04 	addi	r6,sp,120
    3924:	b80b883a 	mov	r5,r23
    3928:	000957c0 	call	957c <__sprint_r>
    392c:	103e5d26 	beq	r2,zero,32a4 <__alt_data_end+0xff0032a4>
    3930:	003cad06 	br	2be8 <__alt_data_end+0xff002be8>
    3934:	d9002c17 	ldw	r4,176(sp)
    3938:	d9801e04 	addi	r6,sp,120
    393c:	b80b883a 	mov	r5,r23
    3940:	000957c0 	call	957c <__sprint_r>
    3944:	103ca81e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3948:	d8c02017 	ldw	r3,128(sp)
    394c:	da000404 	addi	r8,sp,16
    3950:	003e0b06 	br	3180 <__alt_data_end+0xff003180>
    3954:	d9002c17 	ldw	r4,176(sp)
    3958:	d9801e04 	addi	r6,sp,120
    395c:	b80b883a 	mov	r5,r23
    3960:	000957c0 	call	957c <__sprint_r>
    3964:	103ca01e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3968:	d8c02017 	ldw	r3,128(sp)
    396c:	da000404 	addi	r8,sp,16
    3970:	003dbd06 	br	3068 <__alt_data_end+0xff003068>
    3974:	d9002c17 	ldw	r4,176(sp)
    3978:	d9801e04 	addi	r6,sp,120
    397c:	b80b883a 	mov	r5,r23
    3980:	000957c0 	call	957c <__sprint_r>
    3984:	103c981e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3988:	d8c02017 	ldw	r3,128(sp)
    398c:	da000404 	addi	r8,sp,16
    3990:	003dc306 	br	30a0 <__alt_data_end+0xff0030a0>
    3994:	d8802917 	ldw	r2,164(sp)
    3998:	d8002785 	stb	zero,158(sp)
    399c:	103f0616 	blt	r2,zero,35b8 <__alt_data_end+0xff0035b8>
    39a0:	00ffdfc4 	movi	r3,-129
    39a4:	9d84b03a 	or	r2,r19,r22
    39a8:	90e4703a 	and	r18,r18,r3
    39ac:	103c6b26 	beq	r2,zero,2b5c <__alt_data_end+0xff002b5c>
    39b0:	0039883a 	mov	fp,zero
    39b4:	003e7406 	br	3388 <__alt_data_end+0xff003388>
    39b8:	9080040c 	andi	r2,r18,16
    39bc:	1001b326 	beq	r2,zero,408c <___vfprintf_internal_r+0x18ac>
    39c0:	d9002d17 	ldw	r4,180(sp)
    39c4:	d9402917 	ldw	r5,164(sp)
    39c8:	d8002785 	stb	zero,158(sp)
    39cc:	20800104 	addi	r2,r4,4
    39d0:	24c00017 	ldw	r19,0(r4)
    39d4:	002d883a 	mov	r22,zero
    39d8:	2801b516 	blt	r5,zero,40b0 <___vfprintf_internal_r+0x18d0>
    39dc:	00ffdfc4 	movi	r3,-129
    39e0:	d8802d15 	stw	r2,180(sp)
    39e4:	90e4703a 	and	r18,r18,r3
    39e8:	983d2726 	beq	r19,zero,2e88 <__alt_data_end+0xff002e88>
    39ec:	0039883a 	mov	fp,zero
    39f0:	003d2a06 	br	2e9c <__alt_data_end+0xff002e9c>
    39f4:	dc402617 	ldw	r17,152(sp)
    39f8:	0441d30e 	bge	zero,r17,4148 <___vfprintf_internal_r+0x1968>
    39fc:	dc403217 	ldw	r17,200(sp)
    3a00:	d8803317 	ldw	r2,204(sp)
    3a04:	1440010e 	bge	r2,r17,3a0c <___vfprintf_internal_r+0x122c>
    3a08:	1023883a 	mov	r17,r2
    3a0c:	04400a0e 	bge	zero,r17,3a38 <___vfprintf_internal_r+0x1258>
    3a10:	d8801f17 	ldw	r2,124(sp)
    3a14:	1c47883a 	add	r3,r3,r17
    3a18:	44000015 	stw	r16,0(r8)
    3a1c:	10800044 	addi	r2,r2,1
    3a20:	44400115 	stw	r17,4(r8)
    3a24:	d8c02015 	stw	r3,128(sp)
    3a28:	d8801f15 	stw	r2,124(sp)
    3a2c:	010001c4 	movi	r4,7
    3a30:	20826516 	blt	r4,r2,43c8 <___vfprintf_internal_r+0x1be8>
    3a34:	42000204 	addi	r8,r8,8
    3a38:	88026116 	blt	r17,zero,43c0 <___vfprintf_internal_r+0x1be0>
    3a3c:	d9003217 	ldw	r4,200(sp)
    3a40:	2463c83a 	sub	r17,r4,r17
    3a44:	04407b0e 	bge	zero,r17,3c34 <___vfprintf_internal_r+0x1454>
    3a48:	05800404 	movi	r22,16
    3a4c:	d8801f17 	ldw	r2,124(sp)
    3a50:	b4419d0e 	bge	r22,r17,40c8 <___vfprintf_internal_r+0x18e8>
    3a54:	01000074 	movhi	r4,1
    3a58:	2101d684 	addi	r4,r4,1882
    3a5c:	d9002b15 	stw	r4,172(sp)
    3a60:	070001c4 	movi	fp,7
    3a64:	dcc02c17 	ldw	r19,176(sp)
    3a68:	00000306 	br	3a78 <___vfprintf_internal_r+0x1298>
    3a6c:	42000204 	addi	r8,r8,8
    3a70:	8c7ffc04 	addi	r17,r17,-16
    3a74:	b441970e 	bge	r22,r17,40d4 <___vfprintf_internal_r+0x18f4>
    3a78:	18c00404 	addi	r3,r3,16
    3a7c:	10800044 	addi	r2,r2,1
    3a80:	45000015 	stw	r20,0(r8)
    3a84:	45800115 	stw	r22,4(r8)
    3a88:	d8c02015 	stw	r3,128(sp)
    3a8c:	d8801f15 	stw	r2,124(sp)
    3a90:	e0bff60e 	bge	fp,r2,3a6c <__alt_data_end+0xff003a6c>
    3a94:	d9801e04 	addi	r6,sp,120
    3a98:	b80b883a 	mov	r5,r23
    3a9c:	9809883a 	mov	r4,r19
    3aa0:	000957c0 	call	957c <__sprint_r>
    3aa4:	103c501e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3aa8:	d8c02017 	ldw	r3,128(sp)
    3aac:	d8801f17 	ldw	r2,124(sp)
    3ab0:	da000404 	addi	r8,sp,16
    3ab4:	003fee06 	br	3a70 <__alt_data_end+0xff003a70>
    3ab8:	d9002c17 	ldw	r4,176(sp)
    3abc:	d9801e04 	addi	r6,sp,120
    3ac0:	b80b883a 	mov	r5,r23
    3ac4:	000957c0 	call	957c <__sprint_r>
    3ac8:	103c471e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3acc:	d8c02017 	ldw	r3,128(sp)
    3ad0:	df002787 	ldb	fp,158(sp)
    3ad4:	da000404 	addi	r8,sp,16
    3ad8:	003d5606 	br	3034 <__alt_data_end+0xff003034>
    3adc:	9080040c 	andi	r2,r18,16
    3ae0:	10016126 	beq	r2,zero,4068 <___vfprintf_internal_r+0x1888>
    3ae4:	d8802d17 	ldw	r2,180(sp)
    3ae8:	14c00017 	ldw	r19,0(r2)
    3aec:	10800104 	addi	r2,r2,4
    3af0:	d8802d15 	stw	r2,180(sp)
    3af4:	982dd7fa 	srai	r22,r19,31
    3af8:	b005883a 	mov	r2,r22
    3afc:	003c8206 	br	2d08 <__alt_data_end+0xff002d08>
    3b00:	9080040c 	andi	r2,r18,16
    3b04:	10003526 	beq	r2,zero,3bdc <___vfprintf_internal_r+0x13fc>
    3b08:	d9402d17 	ldw	r5,180(sp)
    3b0c:	d8c02917 	ldw	r3,164(sp)
    3b10:	d8002785 	stb	zero,158(sp)
    3b14:	28800104 	addi	r2,r5,4
    3b18:	2cc00017 	ldw	r19,0(r5)
    3b1c:	002d883a 	mov	r22,zero
    3b20:	18003716 	blt	r3,zero,3c00 <___vfprintf_internal_r+0x1420>
    3b24:	00ffdfc4 	movi	r3,-129
    3b28:	d8802d15 	stw	r2,180(sp)
    3b2c:	90e4703a 	and	r18,r18,r3
    3b30:	0039883a 	mov	fp,zero
    3b34:	983df326 	beq	r19,zero,3304 <__alt_data_end+0xff003304>
    3b38:	00800244 	movi	r2,9
    3b3c:	14fc7b36 	bltu	r2,r19,2d2c <__alt_data_end+0xff002d2c>
    3b40:	d8c02817 	ldw	r3,160(sp)
    3b44:	dc001dc4 	addi	r16,sp,119
    3b48:	9cc00c04 	addi	r19,r19,48
    3b4c:	1c07c83a 	sub	r3,r3,r16
    3b50:	dcc01dc5 	stb	r19,119(sp)
    3b54:	d8c02e15 	stw	r3,184(sp)
    3b58:	003ce806 	br	2efc <__alt_data_end+0xff002efc>
    3b5c:	d8803317 	ldw	r2,204(sp)
    3b60:	143fffc4 	addi	r16,r2,-1
    3b64:	043f4d0e 	bge	zero,r16,389c <__alt_data_end+0xff00389c>
    3b68:	07000404 	movi	fp,16
    3b6c:	e400810e 	bge	fp,r16,3d74 <___vfprintf_internal_r+0x1594>
    3b70:	01400074 	movhi	r5,1
    3b74:	2941d684 	addi	r5,r5,1882
    3b78:	d9402b15 	stw	r5,172(sp)
    3b7c:	01c001c4 	movi	r7,7
    3b80:	dcc02c17 	ldw	r19,176(sp)
    3b84:	00000306 	br	3b94 <___vfprintf_internal_r+0x13b4>
    3b88:	b5800204 	addi	r22,r22,8
    3b8c:	843ffc04 	addi	r16,r16,-16
    3b90:	e4007b0e 	bge	fp,r16,3d80 <___vfprintf_internal_r+0x15a0>
    3b94:	18c00404 	addi	r3,r3,16
    3b98:	8c400044 	addi	r17,r17,1
    3b9c:	b5000015 	stw	r20,0(r22)
    3ba0:	b7000115 	stw	fp,4(r22)
    3ba4:	d8c02015 	stw	r3,128(sp)
    3ba8:	dc401f15 	stw	r17,124(sp)
    3bac:	3c7ff60e 	bge	r7,r17,3b88 <__alt_data_end+0xff003b88>
    3bb0:	d9801e04 	addi	r6,sp,120
    3bb4:	b80b883a 	mov	r5,r23
    3bb8:	9809883a 	mov	r4,r19
    3bbc:	d9c03c15 	stw	r7,240(sp)
    3bc0:	000957c0 	call	957c <__sprint_r>
    3bc4:	d9c03c17 	ldw	r7,240(sp)
    3bc8:	103c071e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3bcc:	d8c02017 	ldw	r3,128(sp)
    3bd0:	dc401f17 	ldw	r17,124(sp)
    3bd4:	dd800404 	addi	r22,sp,16
    3bd8:	003fec06 	br	3b8c <__alt_data_end+0xff003b8c>
    3bdc:	9080100c 	andi	r2,r18,64
    3be0:	d8002785 	stb	zero,158(sp)
    3be4:	10010e26 	beq	r2,zero,4020 <___vfprintf_internal_r+0x1840>
    3be8:	d9002d17 	ldw	r4,180(sp)
    3bec:	d9402917 	ldw	r5,164(sp)
    3bf0:	002d883a 	mov	r22,zero
    3bf4:	20800104 	addi	r2,r4,4
    3bf8:	24c0000b 	ldhu	r19,0(r4)
    3bfc:	283fc90e 	bge	r5,zero,3b24 <__alt_data_end+0xff003b24>
    3c00:	d8802d15 	stw	r2,180(sp)
    3c04:	0039883a 	mov	fp,zero
    3c08:	9d84b03a 	or	r2,r19,r22
    3c0c:	103c461e 	bne	r2,zero,2d28 <__alt_data_end+0xff002d28>
    3c10:	00800044 	movi	r2,1
    3c14:	003e6c06 	br	35c8 <__alt_data_end+0xff0035c8>
    3c18:	d9002c17 	ldw	r4,176(sp)
    3c1c:	d9801e04 	addi	r6,sp,120
    3c20:	b80b883a 	mov	r5,r23
    3c24:	000957c0 	call	957c <__sprint_r>
    3c28:	103bef1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3c2c:	d8c02017 	ldw	r3,128(sp)
    3c30:	da000404 	addi	r8,sp,16
    3c34:	d9003217 	ldw	r4,200(sp)
    3c38:	d8802617 	ldw	r2,152(sp)
    3c3c:	d9403317 	ldw	r5,204(sp)
    3c40:	8123883a 	add	r17,r16,r4
    3c44:	11400216 	blt	r2,r5,3c50 <___vfprintf_internal_r+0x1470>
    3c48:	9100004c 	andi	r4,r18,1
    3c4c:	20000d26 	beq	r4,zero,3c84 <___vfprintf_internal_r+0x14a4>
    3c50:	d9003717 	ldw	r4,220(sp)
    3c54:	d9403417 	ldw	r5,208(sp)
    3c58:	1907883a 	add	r3,r3,r4
    3c5c:	d9001f17 	ldw	r4,124(sp)
    3c60:	41400015 	stw	r5,0(r8)
    3c64:	d9403717 	ldw	r5,220(sp)
    3c68:	21000044 	addi	r4,r4,1
    3c6c:	d8c02015 	stw	r3,128(sp)
    3c70:	41400115 	stw	r5,4(r8)
    3c74:	d9001f15 	stw	r4,124(sp)
    3c78:	014001c4 	movi	r5,7
    3c7c:	2901e816 	blt	r5,r4,4420 <___vfprintf_internal_r+0x1c40>
    3c80:	42000204 	addi	r8,r8,8
    3c84:	d9003317 	ldw	r4,204(sp)
    3c88:	8121883a 	add	r16,r16,r4
    3c8c:	2085c83a 	sub	r2,r4,r2
    3c90:	8461c83a 	sub	r16,r16,r17
    3c94:	1400010e 	bge	r2,r16,3c9c <___vfprintf_internal_r+0x14bc>
    3c98:	1021883a 	mov	r16,r2
    3c9c:	04000a0e 	bge	zero,r16,3cc8 <___vfprintf_internal_r+0x14e8>
    3ca0:	d9001f17 	ldw	r4,124(sp)
    3ca4:	1c07883a 	add	r3,r3,r16
    3ca8:	44400015 	stw	r17,0(r8)
    3cac:	21000044 	addi	r4,r4,1
    3cb0:	44000115 	stw	r16,4(r8)
    3cb4:	d8c02015 	stw	r3,128(sp)
    3cb8:	d9001f15 	stw	r4,124(sp)
    3cbc:	014001c4 	movi	r5,7
    3cc0:	2901fb16 	blt	r5,r4,44b0 <___vfprintf_internal_r+0x1cd0>
    3cc4:	42000204 	addi	r8,r8,8
    3cc8:	8001f716 	blt	r16,zero,44a8 <___vfprintf_internal_r+0x1cc8>
    3ccc:	1421c83a 	sub	r16,r2,r16
    3cd0:	043d380e 	bge	zero,r16,31b4 <__alt_data_end+0xff0031b4>
    3cd4:	04400404 	movi	r17,16
    3cd8:	d8801f17 	ldw	r2,124(sp)
    3cdc:	8c3efb0e 	bge	r17,r16,38cc <__alt_data_end+0xff0038cc>
    3ce0:	01400074 	movhi	r5,1
    3ce4:	2941d684 	addi	r5,r5,1882
    3ce8:	d9402b15 	stw	r5,172(sp)
    3cec:	058001c4 	movi	r22,7
    3cf0:	dcc02c17 	ldw	r19,176(sp)
    3cf4:	00000306 	br	3d04 <___vfprintf_internal_r+0x1524>
    3cf8:	42000204 	addi	r8,r8,8
    3cfc:	843ffc04 	addi	r16,r16,-16
    3d00:	8c3ef50e 	bge	r17,r16,38d8 <__alt_data_end+0xff0038d8>
    3d04:	18c00404 	addi	r3,r3,16
    3d08:	10800044 	addi	r2,r2,1
    3d0c:	45000015 	stw	r20,0(r8)
    3d10:	44400115 	stw	r17,4(r8)
    3d14:	d8c02015 	stw	r3,128(sp)
    3d18:	d8801f15 	stw	r2,124(sp)
    3d1c:	b0bff60e 	bge	r22,r2,3cf8 <__alt_data_end+0xff003cf8>
    3d20:	d9801e04 	addi	r6,sp,120
    3d24:	b80b883a 	mov	r5,r23
    3d28:	9809883a 	mov	r4,r19
    3d2c:	000957c0 	call	957c <__sprint_r>
    3d30:	103bad1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3d34:	d8c02017 	ldw	r3,128(sp)
    3d38:	d8801f17 	ldw	r2,124(sp)
    3d3c:	da000404 	addi	r8,sp,16
    3d40:	003fee06 	br	3cfc <__alt_data_end+0xff003cfc>
    3d44:	9088703a 	and	r4,r18,r2
    3d48:	203eab1e 	bne	r4,zero,37f8 <__alt_data_end+0xff0037f8>
    3d4c:	dc401f17 	ldw	r17,124(sp)
    3d50:	40800115 	stw	r2,4(r8)
    3d54:	44000015 	stw	r16,0(r8)
    3d58:	8c400044 	addi	r17,r17,1
    3d5c:	d8c02015 	stw	r3,128(sp)
    3d60:	dc401f15 	stw	r17,124(sp)
    3d64:	008001c4 	movi	r2,7
    3d68:	14400e16 	blt	r2,r17,3da4 <___vfprintf_internal_r+0x15c4>
    3d6c:	45800204 	addi	r22,r8,8
    3d70:	003eca06 	br	389c <__alt_data_end+0xff00389c>
    3d74:	01000074 	movhi	r4,1
    3d78:	2101d684 	addi	r4,r4,1882
    3d7c:	d9002b15 	stw	r4,172(sp)
    3d80:	d8802b17 	ldw	r2,172(sp)
    3d84:	1c07883a 	add	r3,r3,r16
    3d88:	8c400044 	addi	r17,r17,1
    3d8c:	b0800015 	stw	r2,0(r22)
    3d90:	b4000115 	stw	r16,4(r22)
    3d94:	d8c02015 	stw	r3,128(sp)
    3d98:	dc401f15 	stw	r17,124(sp)
    3d9c:	008001c4 	movi	r2,7
    3da0:	147ebd0e 	bge	r2,r17,3898 <__alt_data_end+0xff003898>
    3da4:	d9002c17 	ldw	r4,176(sp)
    3da8:	d9801e04 	addi	r6,sp,120
    3dac:	b80b883a 	mov	r5,r23
    3db0:	000957c0 	call	957c <__sprint_r>
    3db4:	103b8c1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3db8:	d8c02017 	ldw	r3,128(sp)
    3dbc:	dc401f17 	ldw	r17,124(sp)
    3dc0:	dd800404 	addi	r22,sp,16
    3dc4:	003eb506 	br	389c <__alt_data_end+0xff00389c>
    3dc8:	d9002c17 	ldw	r4,176(sp)
    3dcc:	d9801e04 	addi	r6,sp,120
    3dd0:	b80b883a 	mov	r5,r23
    3dd4:	000957c0 	call	957c <__sprint_r>
    3dd8:	103b831e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3ddc:	d8c02017 	ldw	r3,128(sp)
    3de0:	dc401f17 	ldw	r17,124(sp)
    3de4:	da000404 	addi	r8,sp,16
    3de8:	003e8d06 	br	3820 <__alt_data_end+0xff003820>
    3dec:	d9002c17 	ldw	r4,176(sp)
    3df0:	d9801e04 	addi	r6,sp,120
    3df4:	b80b883a 	mov	r5,r23
    3df8:	000957c0 	call	957c <__sprint_r>
    3dfc:	103b7a1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3e00:	d8c02017 	ldw	r3,128(sp)
    3e04:	dc401f17 	ldw	r17,124(sp)
    3e08:	dd800404 	addi	r22,sp,16
    3e0c:	003e8f06 	br	384c <__alt_data_end+0xff00384c>
    3e10:	0027883a 	mov	r19,zero
    3e14:	003f4a06 	br	3b40 <__alt_data_end+0xff003b40>
    3e18:	d9002c17 	ldw	r4,176(sp)
    3e1c:	d9801e04 	addi	r6,sp,120
    3e20:	b80b883a 	mov	r5,r23
    3e24:	000957c0 	call	957c <__sprint_r>
    3e28:	103b6f1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    3e2c:	d8c02017 	ldw	r3,128(sp)
    3e30:	da000404 	addi	r8,sp,16
    3e34:	003c9d06 	br	30ac <__alt_data_end+0xff0030ac>
    3e38:	04e7c83a 	sub	r19,zero,r19
    3e3c:	9804c03a 	cmpne	r2,r19,zero
    3e40:	05adc83a 	sub	r22,zero,r22
    3e44:	b0adc83a 	sub	r22,r22,r2
    3e48:	d8802917 	ldw	r2,164(sp)
    3e4c:	07000b44 	movi	fp,45
    3e50:	df002785 	stb	fp,158(sp)
    3e54:	10017b16 	blt	r2,zero,4444 <___vfprintf_internal_r+0x1c64>
    3e58:	00bfdfc4 	movi	r2,-129
    3e5c:	90a4703a 	and	r18,r18,r2
    3e60:	003bb106 	br	2d28 <__alt_data_end+0xff002d28>
    3e64:	d9003617 	ldw	r4,216(sp)
    3e68:	d9403817 	ldw	r5,224(sp)
    3e6c:	da003d15 	stw	r8,244(sp)
    3e70:	00091f40 	call	91f4 <__fpclassifyd>
    3e74:	da003d17 	ldw	r8,244(sp)
    3e78:	1000f026 	beq	r2,zero,423c <___vfprintf_internal_r+0x1a5c>
    3e7c:	d9002917 	ldw	r4,164(sp)
    3e80:	05bff7c4 	movi	r22,-33
    3e84:	00bfffc4 	movi	r2,-1
    3e88:	8dac703a 	and	r22,r17,r22
    3e8c:	20820026 	beq	r4,r2,4690 <___vfprintf_internal_r+0x1eb0>
    3e90:	008011c4 	movi	r2,71
    3e94:	b081f726 	beq	r22,r2,4674 <___vfprintf_internal_r+0x1e94>
    3e98:	d9003817 	ldw	r4,224(sp)
    3e9c:	90c04014 	ori	r3,r18,256
    3ea0:	d8c02b15 	stw	r3,172(sp)
    3ea4:	20021516 	blt	r4,zero,46fc <___vfprintf_internal_r+0x1f1c>
    3ea8:	dcc03817 	ldw	r19,224(sp)
    3eac:	d8002a05 	stb	zero,168(sp)
    3eb0:	00801984 	movi	r2,102
    3eb4:	8881f926 	beq	r17,r2,469c <___vfprintf_internal_r+0x1ebc>
    3eb8:	00801184 	movi	r2,70
    3ebc:	88821c26 	beq	r17,r2,4730 <___vfprintf_internal_r+0x1f50>
    3ec0:	00801144 	movi	r2,69
    3ec4:	b081ef26 	beq	r22,r2,4684 <___vfprintf_internal_r+0x1ea4>
    3ec8:	d8c02917 	ldw	r3,164(sp)
    3ecc:	d8802104 	addi	r2,sp,132
    3ed0:	d8800315 	stw	r2,12(sp)
    3ed4:	d9403617 	ldw	r5,216(sp)
    3ed8:	d8802504 	addi	r2,sp,148
    3edc:	d9002c17 	ldw	r4,176(sp)
    3ee0:	d8800215 	stw	r2,8(sp)
    3ee4:	d8802604 	addi	r2,sp,152
    3ee8:	d8c00015 	stw	r3,0(sp)
    3eec:	d8800115 	stw	r2,4(sp)
    3ef0:	01c00084 	movi	r7,2
    3ef4:	980d883a 	mov	r6,r19
    3ef8:	d8c03c15 	stw	r3,240(sp)
    3efc:	da003d15 	stw	r8,244(sp)
    3f00:	0004e040 	call	4e04 <_dtoa_r>
    3f04:	1021883a 	mov	r16,r2
    3f08:	008019c4 	movi	r2,103
    3f0c:	d8c03c17 	ldw	r3,240(sp)
    3f10:	da003d17 	ldw	r8,244(sp)
    3f14:	88817126 	beq	r17,r2,44dc <___vfprintf_internal_r+0x1cfc>
    3f18:	008011c4 	movi	r2,71
    3f1c:	88829226 	beq	r17,r2,4968 <___vfprintf_internal_r+0x2188>
    3f20:	80f9883a 	add	fp,r16,r3
    3f24:	d9003617 	ldw	r4,216(sp)
    3f28:	000d883a 	mov	r6,zero
    3f2c:	000f883a 	mov	r7,zero
    3f30:	980b883a 	mov	r5,r19
    3f34:	da003d15 	stw	r8,244(sp)
    3f38:	000d1f40 	call	d1f4 <__eqdf2>
    3f3c:	da003d17 	ldw	r8,244(sp)
    3f40:	10018d26 	beq	r2,zero,4578 <___vfprintf_internal_r+0x1d98>
    3f44:	d8802117 	ldw	r2,132(sp)
    3f48:	1700062e 	bgeu	r2,fp,3f64 <___vfprintf_internal_r+0x1784>
    3f4c:	01000c04 	movi	r4,48
    3f50:	10c00044 	addi	r3,r2,1
    3f54:	d8c02115 	stw	r3,132(sp)
    3f58:	11000005 	stb	r4,0(r2)
    3f5c:	d8802117 	ldw	r2,132(sp)
    3f60:	173ffb36 	bltu	r2,fp,3f50 <__alt_data_end+0xff003f50>
    3f64:	1405c83a 	sub	r2,r2,r16
    3f68:	d8803315 	stw	r2,204(sp)
    3f6c:	008011c4 	movi	r2,71
    3f70:	b0817626 	beq	r22,r2,454c <___vfprintf_internal_r+0x1d6c>
    3f74:	00801944 	movi	r2,101
    3f78:	1442810e 	bge	r2,r17,4980 <___vfprintf_internal_r+0x21a0>
    3f7c:	d8c02617 	ldw	r3,152(sp)
    3f80:	00801984 	movi	r2,102
    3f84:	d8c03215 	stw	r3,200(sp)
    3f88:	8881fe26 	beq	r17,r2,4784 <___vfprintf_internal_r+0x1fa4>
    3f8c:	d8c03217 	ldw	r3,200(sp)
    3f90:	d9003317 	ldw	r4,204(sp)
    3f94:	1901dd16 	blt	r3,r4,470c <___vfprintf_internal_r+0x1f2c>
    3f98:	9480004c 	andi	r18,r18,1
    3f9c:	90022b1e 	bne	r18,zero,484c <___vfprintf_internal_r+0x206c>
    3fa0:	1805883a 	mov	r2,r3
    3fa4:	18028016 	blt	r3,zero,49a8 <___vfprintf_internal_r+0x21c8>
    3fa8:	d8c03217 	ldw	r3,200(sp)
    3fac:	044019c4 	movi	r17,103
    3fb0:	d8c02e15 	stw	r3,184(sp)
    3fb4:	df002a07 	ldb	fp,168(sp)
    3fb8:	e001531e 	bne	fp,zero,4508 <___vfprintf_internal_r+0x1d28>
    3fbc:	df002783 	ldbu	fp,158(sp)
    3fc0:	d8802a15 	stw	r2,168(sp)
    3fc4:	dc802b17 	ldw	r18,172(sp)
    3fc8:	d8002915 	stw	zero,164(sp)
    3fcc:	003bd106 	br	2f14 <__alt_data_end+0xff002f14>
    3fd0:	d8802d17 	ldw	r2,180(sp)
    3fd4:	d8c02d17 	ldw	r3,180(sp)
    3fd8:	d9002d17 	ldw	r4,180(sp)
    3fdc:	10800017 	ldw	r2,0(r2)
    3fe0:	18c00117 	ldw	r3,4(r3)
    3fe4:	21000204 	addi	r4,r4,8
    3fe8:	d8803615 	stw	r2,216(sp)
    3fec:	d8c03815 	stw	r3,224(sp)
    3ff0:	d9002d15 	stw	r4,180(sp)
    3ff4:	003b7506 	br	2dcc <__alt_data_end+0xff002dcc>
    3ff8:	ac400007 	ldb	r17,0(r21)
    3ffc:	003a5906 	br	2964 <__alt_data_end+0xff002964>
    4000:	9080100c 	andi	r2,r18,64
    4004:	1000a826 	beq	r2,zero,42a8 <___vfprintf_internal_r+0x1ac8>
    4008:	d9002d17 	ldw	r4,180(sp)
    400c:	002d883a 	mov	r22,zero
    4010:	24c0000b 	ldhu	r19,0(r4)
    4014:	21000104 	addi	r4,r4,4
    4018:	d9002d15 	stw	r4,180(sp)
    401c:	003ccb06 	br	334c <__alt_data_end+0xff00334c>
    4020:	d8c02d17 	ldw	r3,180(sp)
    4024:	d9002917 	ldw	r4,164(sp)
    4028:	002d883a 	mov	r22,zero
    402c:	18800104 	addi	r2,r3,4
    4030:	1cc00017 	ldw	r19,0(r3)
    4034:	203ebb0e 	bge	r4,zero,3b24 <__alt_data_end+0xff003b24>
    4038:	003ef106 	br	3c00 <__alt_data_end+0xff003c00>
    403c:	9080040c 	andi	r2,r18,16
    4040:	1000921e 	bne	r2,zero,428c <___vfprintf_internal_r+0x1aac>
    4044:	9480100c 	andi	r18,r18,64
    4048:	90013926 	beq	r18,zero,4530 <___vfprintf_internal_r+0x1d50>
    404c:	d9002d17 	ldw	r4,180(sp)
    4050:	d9402f17 	ldw	r5,188(sp)
    4054:	20800017 	ldw	r2,0(r4)
    4058:	21000104 	addi	r4,r4,4
    405c:	d9002d15 	stw	r4,180(sp)
    4060:	1140000d 	sth	r5,0(r2)
    4064:	003a1606 	br	28c0 <__alt_data_end+0xff0028c0>
    4068:	9080100c 	andi	r2,r18,64
    406c:	10008026 	beq	r2,zero,4270 <___vfprintf_internal_r+0x1a90>
    4070:	d8c02d17 	ldw	r3,180(sp)
    4074:	1cc0000f 	ldh	r19,0(r3)
    4078:	18c00104 	addi	r3,r3,4
    407c:	d8c02d15 	stw	r3,180(sp)
    4080:	982dd7fa 	srai	r22,r19,31
    4084:	b005883a 	mov	r2,r22
    4088:	003b1f06 	br	2d08 <__alt_data_end+0xff002d08>
    408c:	9080100c 	andi	r2,r18,64
    4090:	d8002785 	stb	zero,158(sp)
    4094:	10008a1e 	bne	r2,zero,42c0 <___vfprintf_internal_r+0x1ae0>
    4098:	d9402d17 	ldw	r5,180(sp)
    409c:	d8c02917 	ldw	r3,164(sp)
    40a0:	002d883a 	mov	r22,zero
    40a4:	28800104 	addi	r2,r5,4
    40a8:	2cc00017 	ldw	r19,0(r5)
    40ac:	183e4b0e 	bge	r3,zero,39dc <__alt_data_end+0xff0039dc>
    40b0:	9d86b03a 	or	r3,r19,r22
    40b4:	d8802d15 	stw	r2,180(sp)
    40b8:	183e4c1e 	bne	r3,zero,39ec <__alt_data_end+0xff0039ec>
    40bc:	0039883a 	mov	fp,zero
    40c0:	0005883a 	mov	r2,zero
    40c4:	003d4006 	br	35c8 <__alt_data_end+0xff0035c8>
    40c8:	01400074 	movhi	r5,1
    40cc:	2941d684 	addi	r5,r5,1882
    40d0:	d9402b15 	stw	r5,172(sp)
    40d4:	d9402b17 	ldw	r5,172(sp)
    40d8:	1c47883a 	add	r3,r3,r17
    40dc:	10800044 	addi	r2,r2,1
    40e0:	41400015 	stw	r5,0(r8)
    40e4:	44400115 	stw	r17,4(r8)
    40e8:	d8c02015 	stw	r3,128(sp)
    40ec:	d8801f15 	stw	r2,124(sp)
    40f0:	010001c4 	movi	r4,7
    40f4:	20bec816 	blt	r4,r2,3c18 <__alt_data_end+0xff003c18>
    40f8:	42000204 	addi	r8,r8,8
    40fc:	003ecd06 	br	3c34 <__alt_data_end+0xff003c34>
    4100:	d9002917 	ldw	r4,164(sp)
    4104:	d8002785 	stb	zero,158(sp)
    4108:	203d2d16 	blt	r4,zero,35c0 <__alt_data_end+0xff0035c0>
    410c:	00bfdfc4 	movi	r2,-129
    4110:	90a4703a 	and	r18,r18,r2
    4114:	003a9106 	br	2b5c <__alt_data_end+0xff002b5c>
    4118:	01000074 	movhi	r4,1
    411c:	2101d684 	addi	r4,r4,1882
    4120:	d9002b15 	stw	r4,172(sp)
    4124:	003c0c06 	br	3158 <__alt_data_end+0xff003158>
    4128:	d9002c17 	ldw	r4,176(sp)
    412c:	d9801e04 	addi	r6,sp,120
    4130:	b80b883a 	mov	r5,r23
    4134:	000957c0 	call	957c <__sprint_r>
    4138:	103aab1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    413c:	d8c02017 	ldw	r3,128(sp)
    4140:	da000404 	addi	r8,sp,16
    4144:	003d4106 	br	364c <__alt_data_end+0xff00364c>
    4148:	d8801f17 	ldw	r2,124(sp)
    414c:	01400074 	movhi	r5,1
    4150:	01000044 	movi	r4,1
    4154:	18c00044 	addi	r3,r3,1
    4158:	10800044 	addi	r2,r2,1
    415c:	2941d604 	addi	r5,r5,1880
    4160:	41000115 	stw	r4,4(r8)
    4164:	41400015 	stw	r5,0(r8)
    4168:	d8c02015 	stw	r3,128(sp)
    416c:	d8801f15 	stw	r2,124(sp)
    4170:	010001c4 	movi	r4,7
    4174:	20805c16 	blt	r4,r2,42e8 <___vfprintf_internal_r+0x1b08>
    4178:	42000204 	addi	r8,r8,8
    417c:	8800041e 	bne	r17,zero,4190 <___vfprintf_internal_r+0x19b0>
    4180:	d8803317 	ldw	r2,204(sp)
    4184:	1000021e 	bne	r2,zero,4190 <___vfprintf_internal_r+0x19b0>
    4188:	9080004c 	andi	r2,r18,1
    418c:	103c0926 	beq	r2,zero,31b4 <__alt_data_end+0xff0031b4>
    4190:	d9003717 	ldw	r4,220(sp)
    4194:	d8801f17 	ldw	r2,124(sp)
    4198:	d9403417 	ldw	r5,208(sp)
    419c:	20c7883a 	add	r3,r4,r3
    41a0:	10800044 	addi	r2,r2,1
    41a4:	41000115 	stw	r4,4(r8)
    41a8:	41400015 	stw	r5,0(r8)
    41ac:	d8c02015 	stw	r3,128(sp)
    41b0:	d8801f15 	stw	r2,124(sp)
    41b4:	010001c4 	movi	r4,7
    41b8:	20812116 	blt	r4,r2,4640 <___vfprintf_internal_r+0x1e60>
    41bc:	42000204 	addi	r8,r8,8
    41c0:	0463c83a 	sub	r17,zero,r17
    41c4:	0440730e 	bge	zero,r17,4394 <___vfprintf_internal_r+0x1bb4>
    41c8:	05800404 	movi	r22,16
    41cc:	b440860e 	bge	r22,r17,43e8 <___vfprintf_internal_r+0x1c08>
    41d0:	01400074 	movhi	r5,1
    41d4:	2941d684 	addi	r5,r5,1882
    41d8:	d9402b15 	stw	r5,172(sp)
    41dc:	070001c4 	movi	fp,7
    41e0:	dcc02c17 	ldw	r19,176(sp)
    41e4:	00000306 	br	41f4 <___vfprintf_internal_r+0x1a14>
    41e8:	42000204 	addi	r8,r8,8
    41ec:	8c7ffc04 	addi	r17,r17,-16
    41f0:	b440800e 	bge	r22,r17,43f4 <___vfprintf_internal_r+0x1c14>
    41f4:	18c00404 	addi	r3,r3,16
    41f8:	10800044 	addi	r2,r2,1
    41fc:	45000015 	stw	r20,0(r8)
    4200:	45800115 	stw	r22,4(r8)
    4204:	d8c02015 	stw	r3,128(sp)
    4208:	d8801f15 	stw	r2,124(sp)
    420c:	e0bff60e 	bge	fp,r2,41e8 <__alt_data_end+0xff0041e8>
    4210:	d9801e04 	addi	r6,sp,120
    4214:	b80b883a 	mov	r5,r23
    4218:	9809883a 	mov	r4,r19
    421c:	000957c0 	call	957c <__sprint_r>
    4220:	103a711e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    4224:	d8c02017 	ldw	r3,128(sp)
    4228:	d8801f17 	ldw	r2,124(sp)
    422c:	da000404 	addi	r8,sp,16
    4230:	003fee06 	br	41ec <__alt_data_end+0xff0041ec>
    4234:	00bfffc4 	movi	r2,-1
    4238:	003a6f06 	br	2bf8 <__alt_data_end+0xff002bf8>
    423c:	008011c4 	movi	r2,71
    4240:	1440b816 	blt	r2,r17,4524 <___vfprintf_internal_r+0x1d44>
    4244:	04000074 	movhi	r16,1
    4248:	8401c804 	addi	r16,r16,1824
    424c:	00c000c4 	movi	r3,3
    4250:	00bfdfc4 	movi	r2,-129
    4254:	d8c02a15 	stw	r3,168(sp)
    4258:	90a4703a 	and	r18,r18,r2
    425c:	df002783 	ldbu	fp,158(sp)
    4260:	d8c02e15 	stw	r3,184(sp)
    4264:	d8002915 	stw	zero,164(sp)
    4268:	d8003215 	stw	zero,200(sp)
    426c:	003b2906 	br	2f14 <__alt_data_end+0xff002f14>
    4270:	d9002d17 	ldw	r4,180(sp)
    4274:	24c00017 	ldw	r19,0(r4)
    4278:	21000104 	addi	r4,r4,4
    427c:	d9002d15 	stw	r4,180(sp)
    4280:	982dd7fa 	srai	r22,r19,31
    4284:	b005883a 	mov	r2,r22
    4288:	003a9f06 	br	2d08 <__alt_data_end+0xff002d08>
    428c:	d9402d17 	ldw	r5,180(sp)
    4290:	d8c02f17 	ldw	r3,188(sp)
    4294:	28800017 	ldw	r2,0(r5)
    4298:	29400104 	addi	r5,r5,4
    429c:	d9402d15 	stw	r5,180(sp)
    42a0:	10c00015 	stw	r3,0(r2)
    42a4:	00398606 	br	28c0 <__alt_data_end+0xff0028c0>
    42a8:	d9402d17 	ldw	r5,180(sp)
    42ac:	002d883a 	mov	r22,zero
    42b0:	2cc00017 	ldw	r19,0(r5)
    42b4:	29400104 	addi	r5,r5,4
    42b8:	d9402d15 	stw	r5,180(sp)
    42bc:	003c2306 	br	334c <__alt_data_end+0xff00334c>
    42c0:	d8c02d17 	ldw	r3,180(sp)
    42c4:	d9002917 	ldw	r4,164(sp)
    42c8:	002d883a 	mov	r22,zero
    42cc:	18800104 	addi	r2,r3,4
    42d0:	1cc0000b 	ldhu	r19,0(r3)
    42d4:	203dc10e 	bge	r4,zero,39dc <__alt_data_end+0xff0039dc>
    42d8:	003f7506 	br	40b0 <__alt_data_end+0xff0040b0>
    42dc:	04000074 	movhi	r16,1
    42e0:	8401c604 	addi	r16,r16,1816
    42e4:	003acc06 	br	2e18 <__alt_data_end+0xff002e18>
    42e8:	d9002c17 	ldw	r4,176(sp)
    42ec:	d9801e04 	addi	r6,sp,120
    42f0:	b80b883a 	mov	r5,r23
    42f4:	000957c0 	call	957c <__sprint_r>
    42f8:	103a3b1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    42fc:	dc402617 	ldw	r17,152(sp)
    4300:	d8c02017 	ldw	r3,128(sp)
    4304:	da000404 	addi	r8,sp,16
    4308:	003f9c06 	br	417c <__alt_data_end+0xff00417c>
    430c:	ac400043 	ldbu	r17,1(r21)
    4310:	94800814 	ori	r18,r18,32
    4314:	ad400044 	addi	r21,r21,1
    4318:	8c403fcc 	andi	r17,r17,255
    431c:	8c40201c 	xori	r17,r17,128
    4320:	8c7fe004 	addi	r17,r17,-128
    4324:	00398f06 	br	2964 <__alt_data_end+0xff002964>
    4328:	d8c02d15 	stw	r3,180(sp)
    432c:	0039883a 	mov	fp,zero
    4330:	003e3506 	br	3c08 <__alt_data_end+0xff003c08>
    4334:	d9002c17 	ldw	r4,176(sp)
    4338:	d9801e04 	addi	r6,sp,120
    433c:	b80b883a 	mov	r5,r23
    4340:	000957c0 	call	957c <__sprint_r>
    4344:	103a281e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    4348:	d8c02017 	ldw	r3,128(sp)
    434c:	da000404 	addi	r8,sp,16
    4350:	003cd006 	br	3694 <__alt_data_end+0xff003694>
    4354:	8009883a 	mov	r4,r16
    4358:	da003d15 	stw	r8,244(sp)
    435c:	00027480 	call	2748 <strlen>
    4360:	d8802e15 	stw	r2,184(sp)
    4364:	da003d17 	ldw	r8,244(sp)
    4368:	103c340e 	bge	r2,zero,343c <__alt_data_end+0xff00343c>
    436c:	0005883a 	mov	r2,zero
    4370:	003c3206 	br	343c <__alt_data_end+0xff00343c>
    4374:	d9002c17 	ldw	r4,176(sp)
    4378:	d9801e04 	addi	r6,sp,120
    437c:	b80b883a 	mov	r5,r23
    4380:	000957c0 	call	957c <__sprint_r>
    4384:	103a181e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    4388:	d8c02017 	ldw	r3,128(sp)
    438c:	d8801f17 	ldw	r2,124(sp)
    4390:	da000404 	addi	r8,sp,16
    4394:	d9403317 	ldw	r5,204(sp)
    4398:	10800044 	addi	r2,r2,1
    439c:	44000015 	stw	r16,0(r8)
    43a0:	28c7883a 	add	r3,r5,r3
    43a4:	003b7d06 	br	319c <__alt_data_end+0xff00319c>
    43a8:	01000074 	movhi	r4,1
    43ac:	2101da84 	addi	r4,r4,1898
    43b0:	d9003515 	stw	r4,212(sp)
    43b4:	003b1406 	br	3008 <__alt_data_end+0xff003008>
    43b8:	013fffc4 	movi	r4,-1
    43bc:	003a3506 	br	2c94 <__alt_data_end+0xff002c94>
    43c0:	0023883a 	mov	r17,zero
    43c4:	003d9d06 	br	3a3c <__alt_data_end+0xff003a3c>
    43c8:	d9002c17 	ldw	r4,176(sp)
    43cc:	d9801e04 	addi	r6,sp,120
    43d0:	b80b883a 	mov	r5,r23
    43d4:	000957c0 	call	957c <__sprint_r>
    43d8:	103a031e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    43dc:	d8c02017 	ldw	r3,128(sp)
    43e0:	da000404 	addi	r8,sp,16
    43e4:	003d9406 	br	3a38 <__alt_data_end+0xff003a38>
    43e8:	01000074 	movhi	r4,1
    43ec:	2101d684 	addi	r4,r4,1882
    43f0:	d9002b15 	stw	r4,172(sp)
    43f4:	d9002b17 	ldw	r4,172(sp)
    43f8:	1c47883a 	add	r3,r3,r17
    43fc:	10800044 	addi	r2,r2,1
    4400:	41000015 	stw	r4,0(r8)
    4404:	44400115 	stw	r17,4(r8)
    4408:	d8c02015 	stw	r3,128(sp)
    440c:	d8801f15 	stw	r2,124(sp)
    4410:	010001c4 	movi	r4,7
    4414:	20bfd716 	blt	r4,r2,4374 <__alt_data_end+0xff004374>
    4418:	42000204 	addi	r8,r8,8
    441c:	003fdd06 	br	4394 <__alt_data_end+0xff004394>
    4420:	d9002c17 	ldw	r4,176(sp)
    4424:	d9801e04 	addi	r6,sp,120
    4428:	b80b883a 	mov	r5,r23
    442c:	000957c0 	call	957c <__sprint_r>
    4430:	1039ed1e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    4434:	d8802617 	ldw	r2,152(sp)
    4438:	d8c02017 	ldw	r3,128(sp)
    443c:	da000404 	addi	r8,sp,16
    4440:	003e1006 	br	3c84 <__alt_data_end+0xff003c84>
    4444:	00800044 	movi	r2,1
    4448:	10803fcc 	andi	r2,r2,255
    444c:	00c00044 	movi	r3,1
    4450:	10fa3526 	beq	r2,r3,2d28 <__alt_data_end+0xff002d28>
    4454:	00c00084 	movi	r3,2
    4458:	10fbcb26 	beq	r2,r3,3388 <__alt_data_end+0xff003388>
    445c:	003a8f06 	br	2e9c <__alt_data_end+0xff002e9c>
    4460:	01000074 	movhi	r4,1
    4464:	2101da84 	addi	r4,r4,1898
    4468:	d9003515 	stw	r4,212(sp)
    446c:	003b7606 	br	3248 <__alt_data_end+0xff003248>
    4470:	d8802917 	ldw	r2,164(sp)
    4474:	00c00184 	movi	r3,6
    4478:	1880012e 	bgeu	r3,r2,4480 <___vfprintf_internal_r+0x1ca0>
    447c:	1805883a 	mov	r2,r3
    4480:	d8802e15 	stw	r2,184(sp)
    4484:	1000ef16 	blt	r2,zero,4844 <___vfprintf_internal_r+0x2064>
    4488:	04000074 	movhi	r16,1
    448c:	d8802a15 	stw	r2,168(sp)
    4490:	dcc02d15 	stw	r19,180(sp)
    4494:	d8002915 	stw	zero,164(sp)
    4498:	d8003215 	stw	zero,200(sp)
    449c:	8401d404 	addi	r16,r16,1872
    44a0:	0039883a 	mov	fp,zero
    44a4:	003aa206 	br	2f30 <__alt_data_end+0xff002f30>
    44a8:	0021883a 	mov	r16,zero
    44ac:	003e0706 	br	3ccc <__alt_data_end+0xff003ccc>
    44b0:	d9002c17 	ldw	r4,176(sp)
    44b4:	d9801e04 	addi	r6,sp,120
    44b8:	b80b883a 	mov	r5,r23
    44bc:	000957c0 	call	957c <__sprint_r>
    44c0:	1039c91e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    44c4:	d8802617 	ldw	r2,152(sp)
    44c8:	d9403317 	ldw	r5,204(sp)
    44cc:	d8c02017 	ldw	r3,128(sp)
    44d0:	da000404 	addi	r8,sp,16
    44d4:	2885c83a 	sub	r2,r5,r2
    44d8:	003dfb06 	br	3cc8 <__alt_data_end+0xff003cc8>
    44dc:	9080004c 	andi	r2,r18,1
    44e0:	103e8f1e 	bne	r2,zero,3f20 <__alt_data_end+0xff003f20>
    44e4:	d8802117 	ldw	r2,132(sp)
    44e8:	003e9e06 	br	3f64 <__alt_data_end+0xff003f64>
    44ec:	1025883a 	mov	r18,r2
    44f0:	0039883a 	mov	fp,zero
    44f4:	00800084 	movi	r2,2
    44f8:	003fd306 	br	4448 <__alt_data_end+0xff004448>
    44fc:	07000b44 	movi	fp,45
    4500:	df002785 	stb	fp,158(sp)
    4504:	003a4006 	br	2e08 <__alt_data_end+0xff002e08>
    4508:	00c00b44 	movi	r3,45
    450c:	d8c02785 	stb	r3,158(sp)
    4510:	d8802a15 	stw	r2,168(sp)
    4514:	dc802b17 	ldw	r18,172(sp)
    4518:	d8002915 	stw	zero,164(sp)
    451c:	07000b44 	movi	fp,45
    4520:	003a8006 	br	2f24 <__alt_data_end+0xff002f24>
    4524:	04000074 	movhi	r16,1
    4528:	8401c904 	addi	r16,r16,1828
    452c:	003f4706 	br	424c <__alt_data_end+0xff00424c>
    4530:	d8c02d17 	ldw	r3,180(sp)
    4534:	d9002f17 	ldw	r4,188(sp)
    4538:	18800017 	ldw	r2,0(r3)
    453c:	18c00104 	addi	r3,r3,4
    4540:	d8c02d15 	stw	r3,180(sp)
    4544:	11000015 	stw	r4,0(r2)
    4548:	0038dd06 	br	28c0 <__alt_data_end+0xff0028c0>
    454c:	dd802617 	ldw	r22,152(sp)
    4550:	00bfff44 	movi	r2,-3
    4554:	b0801c16 	blt	r22,r2,45c8 <___vfprintf_internal_r+0x1de8>
    4558:	d9402917 	ldw	r5,164(sp)
    455c:	2d801a16 	blt	r5,r22,45c8 <___vfprintf_internal_r+0x1de8>
    4560:	dd803215 	stw	r22,200(sp)
    4564:	003e8906 	br	3f8c <__alt_data_end+0xff003f8c>
    4568:	01000074 	movhi	r4,1
    456c:	2101d684 	addi	r4,r4,1882
    4570:	d9002b15 	stw	r4,172(sp)
    4574:	003c9106 	br	37bc <__alt_data_end+0xff0037bc>
    4578:	e005883a 	mov	r2,fp
    457c:	003e7906 	br	3f64 <__alt_data_end+0xff003f64>
    4580:	d9402917 	ldw	r5,164(sp)
    4584:	df002783 	ldbu	fp,158(sp)
    4588:	dcc02d15 	stw	r19,180(sp)
    458c:	d9402a15 	stw	r5,168(sp)
    4590:	d9402e15 	stw	r5,184(sp)
    4594:	d8002915 	stw	zero,164(sp)
    4598:	d8003215 	stw	zero,200(sp)
    459c:	003a5d06 	br	2f14 <__alt_data_end+0xff002f14>
    45a0:	9080004c 	andi	r2,r18,1
    45a4:	0039883a 	mov	fp,zero
    45a8:	10000426 	beq	r2,zero,45bc <___vfprintf_internal_r+0x1ddc>
    45ac:	00800c04 	movi	r2,48
    45b0:	dc001dc4 	addi	r16,sp,119
    45b4:	d8801dc5 	stb	r2,119(sp)
    45b8:	003b8006 	br	33bc <__alt_data_end+0xff0033bc>
    45bc:	d8002e15 	stw	zero,184(sp)
    45c0:	dc001e04 	addi	r16,sp,120
    45c4:	003a4d06 	br	2efc <__alt_data_end+0xff002efc>
    45c8:	8c7fff84 	addi	r17,r17,-2
    45cc:	b5bfffc4 	addi	r22,r22,-1
    45d0:	dd802615 	stw	r22,152(sp)
    45d4:	dc4022c5 	stb	r17,139(sp)
    45d8:	b000bf16 	blt	r22,zero,48d8 <___vfprintf_internal_r+0x20f8>
    45dc:	00800ac4 	movi	r2,43
    45e0:	d8802305 	stb	r2,140(sp)
    45e4:	00800244 	movi	r2,9
    45e8:	15807016 	blt	r2,r22,47ac <___vfprintf_internal_r+0x1fcc>
    45ec:	00800c04 	movi	r2,48
    45f0:	b5800c04 	addi	r22,r22,48
    45f4:	d8802345 	stb	r2,141(sp)
    45f8:	dd802385 	stb	r22,142(sp)
    45fc:	d88023c4 	addi	r2,sp,143
    4600:	df0022c4 	addi	fp,sp,139
    4604:	d8c03317 	ldw	r3,204(sp)
    4608:	1739c83a 	sub	fp,r2,fp
    460c:	d9003317 	ldw	r4,204(sp)
    4610:	e0c7883a 	add	r3,fp,r3
    4614:	df003a15 	stw	fp,232(sp)
    4618:	d8c02e15 	stw	r3,184(sp)
    461c:	00800044 	movi	r2,1
    4620:	1100b30e 	bge	r2,r4,48f0 <___vfprintf_internal_r+0x2110>
    4624:	d8c02e17 	ldw	r3,184(sp)
    4628:	18c00044 	addi	r3,r3,1
    462c:	d8c02e15 	stw	r3,184(sp)
    4630:	1805883a 	mov	r2,r3
    4634:	1800ac16 	blt	r3,zero,48e8 <___vfprintf_internal_r+0x2108>
    4638:	d8003215 	stw	zero,200(sp)
    463c:	003e5d06 	br	3fb4 <__alt_data_end+0xff003fb4>
    4640:	d9002c17 	ldw	r4,176(sp)
    4644:	d9801e04 	addi	r6,sp,120
    4648:	b80b883a 	mov	r5,r23
    464c:	000957c0 	call	957c <__sprint_r>
    4650:	1039651e 	bne	r2,zero,2be8 <__alt_data_end+0xff002be8>
    4654:	dc402617 	ldw	r17,152(sp)
    4658:	d8c02017 	ldw	r3,128(sp)
    465c:	d8801f17 	ldw	r2,124(sp)
    4660:	da000404 	addi	r8,sp,16
    4664:	003ed606 	br	41c0 <__alt_data_end+0xff0041c0>
    4668:	582b883a 	mov	r21,r11
    466c:	d8002915 	stw	zero,164(sp)
    4670:	0038bd06 	br	2968 <__alt_data_end+0xff002968>
    4674:	d8802917 	ldw	r2,164(sp)
    4678:	103e071e 	bne	r2,zero,3e98 <__alt_data_end+0xff003e98>
    467c:	dc002915 	stw	r16,164(sp)
    4680:	003e0506 	br	3e98 <__alt_data_end+0xff003e98>
    4684:	d9002917 	ldw	r4,164(sp)
    4688:	20c00044 	addi	r3,r4,1
    468c:	003e0f06 	br	3ecc <__alt_data_end+0xff003ecc>
    4690:	01400184 	movi	r5,6
    4694:	d9402915 	stw	r5,164(sp)
    4698:	003dff06 	br	3e98 <__alt_data_end+0xff003e98>
    469c:	d8802104 	addi	r2,sp,132
    46a0:	d8800315 	stw	r2,12(sp)
    46a4:	d8802504 	addi	r2,sp,148
    46a8:	d8800215 	stw	r2,8(sp)
    46ac:	d8802604 	addi	r2,sp,152
    46b0:	d8800115 	stw	r2,4(sp)
    46b4:	d8802917 	ldw	r2,164(sp)
    46b8:	d9403617 	ldw	r5,216(sp)
    46bc:	d9002c17 	ldw	r4,176(sp)
    46c0:	d8800015 	stw	r2,0(sp)
    46c4:	01c000c4 	movi	r7,3
    46c8:	980d883a 	mov	r6,r19
    46cc:	da003d15 	stw	r8,244(sp)
    46d0:	0004e040 	call	4e04 <_dtoa_r>
    46d4:	d8c02917 	ldw	r3,164(sp)
    46d8:	da003d17 	ldw	r8,244(sp)
    46dc:	1021883a 	mov	r16,r2
    46e0:	10f9883a 	add	fp,r2,r3
    46e4:	81000007 	ldb	r4,0(r16)
    46e8:	00800c04 	movi	r2,48
    46ec:	20805e26 	beq	r4,r2,4868 <___vfprintf_internal_r+0x2088>
    46f0:	d8c02617 	ldw	r3,152(sp)
    46f4:	e0f9883a 	add	fp,fp,r3
    46f8:	003e0a06 	br	3f24 <__alt_data_end+0xff003f24>
    46fc:	00c00b44 	movi	r3,45
    4700:	24e0003c 	xorhi	r19,r4,32768
    4704:	d8c02a05 	stb	r3,168(sp)
    4708:	003de906 	br	3eb0 <__alt_data_end+0xff003eb0>
    470c:	d8c03217 	ldw	r3,200(sp)
    4710:	00c07a0e 	bge	zero,r3,48fc <___vfprintf_internal_r+0x211c>
    4714:	00800044 	movi	r2,1
    4718:	d9003317 	ldw	r4,204(sp)
    471c:	1105883a 	add	r2,r2,r4
    4720:	d8802e15 	stw	r2,184(sp)
    4724:	10004e16 	blt	r2,zero,4860 <___vfprintf_internal_r+0x2080>
    4728:	044019c4 	movi	r17,103
    472c:	003e2106 	br	3fb4 <__alt_data_end+0xff003fb4>
    4730:	d9002917 	ldw	r4,164(sp)
    4734:	d8802104 	addi	r2,sp,132
    4738:	d8800315 	stw	r2,12(sp)
    473c:	d9000015 	stw	r4,0(sp)
    4740:	d8802504 	addi	r2,sp,148
    4744:	d9403617 	ldw	r5,216(sp)
    4748:	d9002c17 	ldw	r4,176(sp)
    474c:	d8800215 	stw	r2,8(sp)
    4750:	d8802604 	addi	r2,sp,152
    4754:	d8800115 	stw	r2,4(sp)
    4758:	01c000c4 	movi	r7,3
    475c:	980d883a 	mov	r6,r19
    4760:	da003d15 	stw	r8,244(sp)
    4764:	0004e040 	call	4e04 <_dtoa_r>
    4768:	d8c02917 	ldw	r3,164(sp)
    476c:	da003d17 	ldw	r8,244(sp)
    4770:	1021883a 	mov	r16,r2
    4774:	00801184 	movi	r2,70
    4778:	80f9883a 	add	fp,r16,r3
    477c:	88bfd926 	beq	r17,r2,46e4 <__alt_data_end+0xff0046e4>
    4780:	003de806 	br	3f24 <__alt_data_end+0xff003f24>
    4784:	d9002917 	ldw	r4,164(sp)
    4788:	00c04d0e 	bge	zero,r3,48c0 <___vfprintf_internal_r+0x20e0>
    478c:	2000441e 	bne	r4,zero,48a0 <___vfprintf_internal_r+0x20c0>
    4790:	9480004c 	andi	r18,r18,1
    4794:	9000421e 	bne	r18,zero,48a0 <___vfprintf_internal_r+0x20c0>
    4798:	1805883a 	mov	r2,r3
    479c:	18007016 	blt	r3,zero,4960 <___vfprintf_internal_r+0x2180>
    47a0:	d8c03217 	ldw	r3,200(sp)
    47a4:	d8c02e15 	stw	r3,184(sp)
    47a8:	003e0206 	br	3fb4 <__alt_data_end+0xff003fb4>
    47ac:	df0022c4 	addi	fp,sp,139
    47b0:	dc002915 	stw	r16,164(sp)
    47b4:	4027883a 	mov	r19,r8
    47b8:	e021883a 	mov	r16,fp
    47bc:	b009883a 	mov	r4,r22
    47c0:	01400284 	movi	r5,10
    47c4:	000bf300 	call	bf30 <__modsi3>
    47c8:	10800c04 	addi	r2,r2,48
    47cc:	843fffc4 	addi	r16,r16,-1
    47d0:	b009883a 	mov	r4,r22
    47d4:	01400284 	movi	r5,10
    47d8:	80800005 	stb	r2,0(r16)
    47dc:	000beac0 	call	beac <__divsi3>
    47e0:	102d883a 	mov	r22,r2
    47e4:	00800244 	movi	r2,9
    47e8:	15bff416 	blt	r2,r22,47bc <__alt_data_end+0xff0047bc>
    47ec:	9811883a 	mov	r8,r19
    47f0:	b0800c04 	addi	r2,r22,48
    47f4:	8027883a 	mov	r19,r16
    47f8:	997fffc4 	addi	r5,r19,-1
    47fc:	98bfffc5 	stb	r2,-1(r19)
    4800:	dc002917 	ldw	r16,164(sp)
    4804:	2f006a2e 	bgeu	r5,fp,49b0 <___vfprintf_internal_r+0x21d0>
    4808:	d9c02384 	addi	r7,sp,142
    480c:	3ccfc83a 	sub	r7,r7,r19
    4810:	d9002344 	addi	r4,sp,141
    4814:	e1cf883a 	add	r7,fp,r7
    4818:	00000106 	br	4820 <___vfprintf_internal_r+0x2040>
    481c:	28800003 	ldbu	r2,0(r5)
    4820:	20800005 	stb	r2,0(r4)
    4824:	21000044 	addi	r4,r4,1
    4828:	29400044 	addi	r5,r5,1
    482c:	393ffb1e 	bne	r7,r4,481c <__alt_data_end+0xff00481c>
    4830:	d8802304 	addi	r2,sp,140
    4834:	14c5c83a 	sub	r2,r2,r19
    4838:	d8c02344 	addi	r3,sp,141
    483c:	1885883a 	add	r2,r3,r2
    4840:	003f7006 	br	4604 <__alt_data_end+0xff004604>
    4844:	0005883a 	mov	r2,zero
    4848:	003f0f06 	br	4488 <__alt_data_end+0xff004488>
    484c:	d8c03217 	ldw	r3,200(sp)
    4850:	18c00044 	addi	r3,r3,1
    4854:	d8c02e15 	stw	r3,184(sp)
    4858:	1805883a 	mov	r2,r3
    485c:	183fb20e 	bge	r3,zero,4728 <__alt_data_end+0xff004728>
    4860:	0005883a 	mov	r2,zero
    4864:	003fb006 	br	4728 <__alt_data_end+0xff004728>
    4868:	d9003617 	ldw	r4,216(sp)
    486c:	000d883a 	mov	r6,zero
    4870:	000f883a 	mov	r7,zero
    4874:	980b883a 	mov	r5,r19
    4878:	d8c03c15 	stw	r3,240(sp)
    487c:	da003d15 	stw	r8,244(sp)
    4880:	000d1f40 	call	d1f4 <__eqdf2>
    4884:	d8c03c17 	ldw	r3,240(sp)
    4888:	da003d17 	ldw	r8,244(sp)
    488c:	103f9826 	beq	r2,zero,46f0 <__alt_data_end+0xff0046f0>
    4890:	00800044 	movi	r2,1
    4894:	10c7c83a 	sub	r3,r2,r3
    4898:	d8c02615 	stw	r3,152(sp)
    489c:	003f9506 	br	46f4 <__alt_data_end+0xff0046f4>
    48a0:	d9002917 	ldw	r4,164(sp)
    48a4:	d8c03217 	ldw	r3,200(sp)
    48a8:	20800044 	addi	r2,r4,1
    48ac:	1885883a 	add	r2,r3,r2
    48b0:	d8802e15 	stw	r2,184(sp)
    48b4:	103dbf0e 	bge	r2,zero,3fb4 <__alt_data_end+0xff003fb4>
    48b8:	0005883a 	mov	r2,zero
    48bc:	003dbd06 	br	3fb4 <__alt_data_end+0xff003fb4>
    48c0:	2000211e 	bne	r4,zero,4948 <___vfprintf_internal_r+0x2168>
    48c4:	9480004c 	andi	r18,r18,1
    48c8:	90001f1e 	bne	r18,zero,4948 <___vfprintf_internal_r+0x2168>
    48cc:	00800044 	movi	r2,1
    48d0:	d8802e15 	stw	r2,184(sp)
    48d4:	003db706 	br	3fb4 <__alt_data_end+0xff003fb4>
    48d8:	00800b44 	movi	r2,45
    48dc:	05adc83a 	sub	r22,zero,r22
    48e0:	d8802305 	stb	r2,140(sp)
    48e4:	003f3f06 	br	45e4 <__alt_data_end+0xff0045e4>
    48e8:	0005883a 	mov	r2,zero
    48ec:	003f5206 	br	4638 <__alt_data_end+0xff004638>
    48f0:	90a4703a 	and	r18,r18,r2
    48f4:	903f4e26 	beq	r18,zero,4630 <__alt_data_end+0xff004630>
    48f8:	003f4a06 	br	4624 <__alt_data_end+0xff004624>
    48fc:	00800084 	movi	r2,2
    4900:	10c5c83a 	sub	r2,r2,r3
    4904:	003f8406 	br	4718 <__alt_data_end+0xff004718>
    4908:	d8802d17 	ldw	r2,180(sp)
    490c:	d9002d17 	ldw	r4,180(sp)
    4910:	ac400043 	ldbu	r17,1(r21)
    4914:	10800017 	ldw	r2,0(r2)
    4918:	582b883a 	mov	r21,r11
    491c:	d8802915 	stw	r2,164(sp)
    4920:	20800104 	addi	r2,r4,4
    4924:	d9002917 	ldw	r4,164(sp)
    4928:	d8802d15 	stw	r2,180(sp)
    492c:	203e7a0e 	bge	r4,zero,4318 <__alt_data_end+0xff004318>
    4930:	8c403fcc 	andi	r17,r17,255
    4934:	00bfffc4 	movi	r2,-1
    4938:	8c40201c 	xori	r17,r17,128
    493c:	d8802915 	stw	r2,164(sp)
    4940:	8c7fe004 	addi	r17,r17,-128
    4944:	00380706 	br	2964 <__alt_data_end+0xff002964>
    4948:	d8c02917 	ldw	r3,164(sp)
    494c:	18c00084 	addi	r3,r3,2
    4950:	d8c02e15 	stw	r3,184(sp)
    4954:	1805883a 	mov	r2,r3
    4958:	183d960e 	bge	r3,zero,3fb4 <__alt_data_end+0xff003fb4>
    495c:	003fd606 	br	48b8 <__alt_data_end+0xff0048b8>
    4960:	0005883a 	mov	r2,zero
    4964:	003f8e06 	br	47a0 <__alt_data_end+0xff0047a0>
    4968:	9080004c 	andi	r2,r18,1
    496c:	103f811e 	bne	r2,zero,4774 <__alt_data_end+0xff004774>
    4970:	d8802117 	ldw	r2,132(sp)
    4974:	1405c83a 	sub	r2,r2,r16
    4978:	d8803315 	stw	r2,204(sp)
    497c:	b47ef326 	beq	r22,r17,454c <__alt_data_end+0xff00454c>
    4980:	dd802617 	ldw	r22,152(sp)
    4984:	003f1106 	br	45cc <__alt_data_end+0xff0045cc>
    4988:	d9c02785 	stb	r7,158(sp)
    498c:	00390406 	br	2da0 <__alt_data_end+0xff002da0>
    4990:	d9c02785 	stb	r7,158(sp)
    4994:	0038d306 	br	2ce4 <__alt_data_end+0xff002ce4>
    4998:	d9c02785 	stb	r7,158(sp)
    499c:	003a6106 	br	3324 <__alt_data_end+0xff003324>
    49a0:	d9c02785 	stb	r7,158(sp)
    49a4:	003af806 	br	3588 <__alt_data_end+0xff003588>
    49a8:	0005883a 	mov	r2,zero
    49ac:	003d7e06 	br	3fa8 <__alt_data_end+0xff003fa8>
    49b0:	d8802344 	addi	r2,sp,141
    49b4:	003f1306 	br	4604 <__alt_data_end+0xff004604>
    49b8:	d9c02785 	stb	r7,158(sp)
    49bc:	00392306 	br	2e4c <__alt_data_end+0xff002e4c>
    49c0:	d9c02785 	stb	r7,158(sp)
    49c4:	003aa906 	br	346c <__alt_data_end+0xff00346c>
    49c8:	d9c02785 	stb	r7,158(sp)
    49cc:	003a3d06 	br	32c4 <__alt_data_end+0xff0032c4>
    49d0:	d9c02785 	stb	r7,158(sp)
    49d4:	003aca06 	br	3500 <__alt_data_end+0xff003500>

000049d8 <__vfprintf_internal>:
    49d8:	00800074 	movhi	r2,1
    49dc:	10892f04 	addi	r2,r2,9404
    49e0:	300f883a 	mov	r7,r6
    49e4:	280d883a 	mov	r6,r5
    49e8:	200b883a 	mov	r5,r4
    49ec:	11000017 	ldw	r4,0(r2)
    49f0:	00027e01 	jmpi	27e0 <___vfprintf_internal_r>

000049f4 <__sbprintf>:
    49f4:	2880030b 	ldhu	r2,12(r5)
    49f8:	2ac01917 	ldw	r11,100(r5)
    49fc:	2a80038b 	ldhu	r10,14(r5)
    4a00:	2a400717 	ldw	r9,28(r5)
    4a04:	2a000917 	ldw	r8,36(r5)
    4a08:	defee204 	addi	sp,sp,-1144
    4a0c:	00c10004 	movi	r3,1024
    4a10:	dc011a15 	stw	r16,1128(sp)
    4a14:	10bfff4c 	andi	r2,r2,65533
    4a18:	2821883a 	mov	r16,r5
    4a1c:	d8cb883a 	add	r5,sp,r3
    4a20:	dc811c15 	stw	r18,1136(sp)
    4a24:	dc411b15 	stw	r17,1132(sp)
    4a28:	dfc11d15 	stw	ra,1140(sp)
    4a2c:	2025883a 	mov	r18,r4
    4a30:	d881030d 	sth	r2,1036(sp)
    4a34:	dac11915 	stw	r11,1124(sp)
    4a38:	da81038d 	sth	r10,1038(sp)
    4a3c:	da410715 	stw	r9,1052(sp)
    4a40:	da010915 	stw	r8,1060(sp)
    4a44:	dec10015 	stw	sp,1024(sp)
    4a48:	dec10415 	stw	sp,1040(sp)
    4a4c:	d8c10215 	stw	r3,1032(sp)
    4a50:	d8c10515 	stw	r3,1044(sp)
    4a54:	d8010615 	stw	zero,1048(sp)
    4a58:	00027e00 	call	27e0 <___vfprintf_internal_r>
    4a5c:	1023883a 	mov	r17,r2
    4a60:	10000416 	blt	r2,zero,4a74 <__sbprintf+0x80>
    4a64:	d9410004 	addi	r5,sp,1024
    4a68:	9009883a 	mov	r4,r18
    4a6c:	00066a80 	call	66a8 <_fflush_r>
    4a70:	10000d1e 	bne	r2,zero,4aa8 <__sbprintf+0xb4>
    4a74:	d881030b 	ldhu	r2,1036(sp)
    4a78:	1080100c 	andi	r2,r2,64
    4a7c:	10000326 	beq	r2,zero,4a8c <__sbprintf+0x98>
    4a80:	8080030b 	ldhu	r2,12(r16)
    4a84:	10801014 	ori	r2,r2,64
    4a88:	8080030d 	sth	r2,12(r16)
    4a8c:	8805883a 	mov	r2,r17
    4a90:	dfc11d17 	ldw	ra,1140(sp)
    4a94:	dc811c17 	ldw	r18,1136(sp)
    4a98:	dc411b17 	ldw	r17,1132(sp)
    4a9c:	dc011a17 	ldw	r16,1128(sp)
    4aa0:	dec11e04 	addi	sp,sp,1144
    4aa4:	f800283a 	ret
    4aa8:	047fffc4 	movi	r17,-1
    4aac:	003ff106 	br	4a74 <__alt_data_end+0xff004a74>

00004ab0 <__swsetup_r>:
    4ab0:	00800074 	movhi	r2,1
    4ab4:	defffd04 	addi	sp,sp,-12
    4ab8:	10892f04 	addi	r2,r2,9404
    4abc:	dc400115 	stw	r17,4(sp)
    4ac0:	2023883a 	mov	r17,r4
    4ac4:	11000017 	ldw	r4,0(r2)
    4ac8:	dc000015 	stw	r16,0(sp)
    4acc:	dfc00215 	stw	ra,8(sp)
    4ad0:	2821883a 	mov	r16,r5
    4ad4:	20000226 	beq	r4,zero,4ae0 <__swsetup_r+0x30>
    4ad8:	20800e17 	ldw	r2,56(r4)
    4adc:	10003126 	beq	r2,zero,4ba4 <__swsetup_r+0xf4>
    4ae0:	8080030b 	ldhu	r2,12(r16)
    4ae4:	10c0020c 	andi	r3,r2,8
    4ae8:	1009883a 	mov	r4,r2
    4aec:	18000f26 	beq	r3,zero,4b2c <__swsetup_r+0x7c>
    4af0:	80c00417 	ldw	r3,16(r16)
    4af4:	18001526 	beq	r3,zero,4b4c <__swsetup_r+0x9c>
    4af8:	1100004c 	andi	r4,r2,1
    4afc:	20001c1e 	bne	r4,zero,4b70 <__swsetup_r+0xc0>
    4b00:	1080008c 	andi	r2,r2,2
    4b04:	1000291e 	bne	r2,zero,4bac <__swsetup_r+0xfc>
    4b08:	80800517 	ldw	r2,20(r16)
    4b0c:	80800215 	stw	r2,8(r16)
    4b10:	18001c26 	beq	r3,zero,4b84 <__swsetup_r+0xd4>
    4b14:	0005883a 	mov	r2,zero
    4b18:	dfc00217 	ldw	ra,8(sp)
    4b1c:	dc400117 	ldw	r17,4(sp)
    4b20:	dc000017 	ldw	r16,0(sp)
    4b24:	dec00304 	addi	sp,sp,12
    4b28:	f800283a 	ret
    4b2c:	2080040c 	andi	r2,r4,16
    4b30:	10002e26 	beq	r2,zero,4bec <__swsetup_r+0x13c>
    4b34:	2080010c 	andi	r2,r4,4
    4b38:	10001e1e 	bne	r2,zero,4bb4 <__swsetup_r+0x104>
    4b3c:	80c00417 	ldw	r3,16(r16)
    4b40:	20800214 	ori	r2,r4,8
    4b44:	8080030d 	sth	r2,12(r16)
    4b48:	183feb1e 	bne	r3,zero,4af8 <__alt_data_end+0xff004af8>
    4b4c:	1100a00c 	andi	r4,r2,640
    4b50:	01408004 	movi	r5,512
    4b54:	217fe826 	beq	r4,r5,4af8 <__alt_data_end+0xff004af8>
    4b58:	800b883a 	mov	r5,r16
    4b5c:	8809883a 	mov	r4,r17
    4b60:	00076280 	call	7628 <__smakebuf_r>
    4b64:	8080030b 	ldhu	r2,12(r16)
    4b68:	80c00417 	ldw	r3,16(r16)
    4b6c:	003fe206 	br	4af8 <__alt_data_end+0xff004af8>
    4b70:	80800517 	ldw	r2,20(r16)
    4b74:	80000215 	stw	zero,8(r16)
    4b78:	0085c83a 	sub	r2,zero,r2
    4b7c:	80800615 	stw	r2,24(r16)
    4b80:	183fe41e 	bne	r3,zero,4b14 <__alt_data_end+0xff004b14>
    4b84:	80c0030b 	ldhu	r3,12(r16)
    4b88:	0005883a 	mov	r2,zero
    4b8c:	1900200c 	andi	r4,r3,128
    4b90:	203fe126 	beq	r4,zero,4b18 <__alt_data_end+0xff004b18>
    4b94:	18c01014 	ori	r3,r3,64
    4b98:	80c0030d 	sth	r3,12(r16)
    4b9c:	00bfffc4 	movi	r2,-1
    4ba0:	003fdd06 	br	4b18 <__alt_data_end+0xff004b18>
    4ba4:	0006a840 	call	6a84 <__sinit>
    4ba8:	003fcd06 	br	4ae0 <__alt_data_end+0xff004ae0>
    4bac:	0005883a 	mov	r2,zero
    4bb0:	003fd606 	br	4b0c <__alt_data_end+0xff004b0c>
    4bb4:	81400c17 	ldw	r5,48(r16)
    4bb8:	28000626 	beq	r5,zero,4bd4 <__swsetup_r+0x124>
    4bbc:	80801004 	addi	r2,r16,64
    4bc0:	28800326 	beq	r5,r2,4bd0 <__swsetup_r+0x120>
    4bc4:	8809883a 	mov	r4,r17
    4bc8:	0006bf80 	call	6bf8 <_free_r>
    4bcc:	8100030b 	ldhu	r4,12(r16)
    4bd0:	80000c15 	stw	zero,48(r16)
    4bd4:	80c00417 	ldw	r3,16(r16)
    4bd8:	00bff6c4 	movi	r2,-37
    4bdc:	1108703a 	and	r4,r2,r4
    4be0:	80000115 	stw	zero,4(r16)
    4be4:	80c00015 	stw	r3,0(r16)
    4be8:	003fd506 	br	4b40 <__alt_data_end+0xff004b40>
    4bec:	00800244 	movi	r2,9
    4bf0:	88800015 	stw	r2,0(r17)
    4bf4:	20801014 	ori	r2,r4,64
    4bf8:	8080030d 	sth	r2,12(r16)
    4bfc:	00bfffc4 	movi	r2,-1
    4c00:	003fc506 	br	4b18 <__alt_data_end+0xff004b18>

00004c04 <quorem>:
    4c04:	defff704 	addi	sp,sp,-36
    4c08:	dc800215 	stw	r18,8(sp)
    4c0c:	20800417 	ldw	r2,16(r4)
    4c10:	2c800417 	ldw	r18,16(r5)
    4c14:	dfc00815 	stw	ra,32(sp)
    4c18:	ddc00715 	stw	r23,28(sp)
    4c1c:	dd800615 	stw	r22,24(sp)
    4c20:	dd400515 	stw	r21,20(sp)
    4c24:	dd000415 	stw	r20,16(sp)
    4c28:	dcc00315 	stw	r19,12(sp)
    4c2c:	dc400115 	stw	r17,4(sp)
    4c30:	dc000015 	stw	r16,0(sp)
    4c34:	14807116 	blt	r2,r18,4dfc <quorem+0x1f8>
    4c38:	94bfffc4 	addi	r18,r18,-1
    4c3c:	94ad883a 	add	r22,r18,r18
    4c40:	b5ad883a 	add	r22,r22,r22
    4c44:	2c400504 	addi	r17,r5,20
    4c48:	8da9883a 	add	r20,r17,r22
    4c4c:	25400504 	addi	r21,r4,20
    4c50:	282f883a 	mov	r23,r5
    4c54:	adad883a 	add	r22,r21,r22
    4c58:	a1400017 	ldw	r5,0(r20)
    4c5c:	2021883a 	mov	r16,r4
    4c60:	b1000017 	ldw	r4,0(r22)
    4c64:	29400044 	addi	r5,r5,1
    4c68:	000bfa40 	call	bfa4 <__udivsi3>
    4c6c:	1027883a 	mov	r19,r2
    4c70:	10002c26 	beq	r2,zero,4d24 <quorem+0x120>
    4c74:	a813883a 	mov	r9,r21
    4c78:	880b883a 	mov	r5,r17
    4c7c:	0009883a 	mov	r4,zero
    4c80:	000d883a 	mov	r6,zero
    4c84:	2a000017 	ldw	r8,0(r5)
    4c88:	49c00017 	ldw	r7,0(r9)
    4c8c:	29400104 	addi	r5,r5,4
    4c90:	40bfffcc 	andi	r2,r8,65535
    4c94:	14c5383a 	mul	r2,r2,r19
    4c98:	4010d43a 	srli	r8,r8,16
    4c9c:	38ffffcc 	andi	r3,r7,65535
    4ca0:	1105883a 	add	r2,r2,r4
    4ca4:	1008d43a 	srli	r4,r2,16
    4ca8:	44d1383a 	mul	r8,r8,r19
    4cac:	198d883a 	add	r6,r3,r6
    4cb0:	10ffffcc 	andi	r3,r2,65535
    4cb4:	30c7c83a 	sub	r3,r6,r3
    4cb8:	380ed43a 	srli	r7,r7,16
    4cbc:	4105883a 	add	r2,r8,r4
    4cc0:	180dd43a 	srai	r6,r3,16
    4cc4:	113fffcc 	andi	r4,r2,65535
    4cc8:	390fc83a 	sub	r7,r7,r4
    4ccc:	398d883a 	add	r6,r7,r6
    4cd0:	300e943a 	slli	r7,r6,16
    4cd4:	18ffffcc 	andi	r3,r3,65535
    4cd8:	1008d43a 	srli	r4,r2,16
    4cdc:	38ceb03a 	or	r7,r7,r3
    4ce0:	49c00015 	stw	r7,0(r9)
    4ce4:	300dd43a 	srai	r6,r6,16
    4ce8:	4a400104 	addi	r9,r9,4
    4cec:	a17fe52e 	bgeu	r20,r5,4c84 <__alt_data_end+0xff004c84>
    4cf0:	b0800017 	ldw	r2,0(r22)
    4cf4:	10000b1e 	bne	r2,zero,4d24 <quorem+0x120>
    4cf8:	b0bfff04 	addi	r2,r22,-4
    4cfc:	a880082e 	bgeu	r21,r2,4d20 <quorem+0x11c>
    4d00:	b0ffff17 	ldw	r3,-4(r22)
    4d04:	18000326 	beq	r3,zero,4d14 <quorem+0x110>
    4d08:	00000506 	br	4d20 <quorem+0x11c>
    4d0c:	10c00017 	ldw	r3,0(r2)
    4d10:	1800031e 	bne	r3,zero,4d20 <quorem+0x11c>
    4d14:	10bfff04 	addi	r2,r2,-4
    4d18:	94bfffc4 	addi	r18,r18,-1
    4d1c:	a8bffb36 	bltu	r21,r2,4d0c <__alt_data_end+0xff004d0c>
    4d20:	84800415 	stw	r18,16(r16)
    4d24:	b80b883a 	mov	r5,r23
    4d28:	8009883a 	mov	r4,r16
    4d2c:	000855c0 	call	855c <__mcmp>
    4d30:	10002616 	blt	r2,zero,4dcc <quorem+0x1c8>
    4d34:	9cc00044 	addi	r19,r19,1
    4d38:	a805883a 	mov	r2,r21
    4d3c:	000b883a 	mov	r5,zero
    4d40:	11000017 	ldw	r4,0(r2)
    4d44:	89800017 	ldw	r6,0(r17)
    4d48:	10800104 	addi	r2,r2,4
    4d4c:	20ffffcc 	andi	r3,r4,65535
    4d50:	194b883a 	add	r5,r3,r5
    4d54:	30ffffcc 	andi	r3,r6,65535
    4d58:	28c7c83a 	sub	r3,r5,r3
    4d5c:	300cd43a 	srli	r6,r6,16
    4d60:	2008d43a 	srli	r4,r4,16
    4d64:	180bd43a 	srai	r5,r3,16
    4d68:	18ffffcc 	andi	r3,r3,65535
    4d6c:	2189c83a 	sub	r4,r4,r6
    4d70:	2149883a 	add	r4,r4,r5
    4d74:	200c943a 	slli	r6,r4,16
    4d78:	8c400104 	addi	r17,r17,4
    4d7c:	200bd43a 	srai	r5,r4,16
    4d80:	30c6b03a 	or	r3,r6,r3
    4d84:	10ffff15 	stw	r3,-4(r2)
    4d88:	a47fed2e 	bgeu	r20,r17,4d40 <__alt_data_end+0xff004d40>
    4d8c:	9485883a 	add	r2,r18,r18
    4d90:	1085883a 	add	r2,r2,r2
    4d94:	a887883a 	add	r3,r21,r2
    4d98:	18800017 	ldw	r2,0(r3)
    4d9c:	10000b1e 	bne	r2,zero,4dcc <quorem+0x1c8>
    4da0:	18bfff04 	addi	r2,r3,-4
    4da4:	a880082e 	bgeu	r21,r2,4dc8 <quorem+0x1c4>
    4da8:	18ffff17 	ldw	r3,-4(r3)
    4dac:	18000326 	beq	r3,zero,4dbc <quorem+0x1b8>
    4db0:	00000506 	br	4dc8 <quorem+0x1c4>
    4db4:	10c00017 	ldw	r3,0(r2)
    4db8:	1800031e 	bne	r3,zero,4dc8 <quorem+0x1c4>
    4dbc:	10bfff04 	addi	r2,r2,-4
    4dc0:	94bfffc4 	addi	r18,r18,-1
    4dc4:	a8bffb36 	bltu	r21,r2,4db4 <__alt_data_end+0xff004db4>
    4dc8:	84800415 	stw	r18,16(r16)
    4dcc:	9805883a 	mov	r2,r19
    4dd0:	dfc00817 	ldw	ra,32(sp)
    4dd4:	ddc00717 	ldw	r23,28(sp)
    4dd8:	dd800617 	ldw	r22,24(sp)
    4ddc:	dd400517 	ldw	r21,20(sp)
    4de0:	dd000417 	ldw	r20,16(sp)
    4de4:	dcc00317 	ldw	r19,12(sp)
    4de8:	dc800217 	ldw	r18,8(sp)
    4dec:	dc400117 	ldw	r17,4(sp)
    4df0:	dc000017 	ldw	r16,0(sp)
    4df4:	dec00904 	addi	sp,sp,36
    4df8:	f800283a 	ret
    4dfc:	0005883a 	mov	r2,zero
    4e00:	003ff306 	br	4dd0 <__alt_data_end+0xff004dd0>

00004e04 <_dtoa_r>:
    4e04:	20801017 	ldw	r2,64(r4)
    4e08:	deffde04 	addi	sp,sp,-136
    4e0c:	df002015 	stw	fp,128(sp)
    4e10:	dcc01b15 	stw	r19,108(sp)
    4e14:	dc801a15 	stw	r18,104(sp)
    4e18:	dc401915 	stw	r17,100(sp)
    4e1c:	dc001815 	stw	r16,96(sp)
    4e20:	dfc02115 	stw	ra,132(sp)
    4e24:	ddc01f15 	stw	r23,124(sp)
    4e28:	dd801e15 	stw	r22,120(sp)
    4e2c:	dd401d15 	stw	r21,116(sp)
    4e30:	dd001c15 	stw	r20,112(sp)
    4e34:	d9c00315 	stw	r7,12(sp)
    4e38:	2039883a 	mov	fp,r4
    4e3c:	3023883a 	mov	r17,r6
    4e40:	2825883a 	mov	r18,r5
    4e44:	dc002417 	ldw	r16,144(sp)
    4e48:	3027883a 	mov	r19,r6
    4e4c:	10000826 	beq	r2,zero,4e70 <_dtoa_r+0x6c>
    4e50:	21801117 	ldw	r6,68(r4)
    4e54:	00c00044 	movi	r3,1
    4e58:	100b883a 	mov	r5,r2
    4e5c:	1986983a 	sll	r3,r3,r6
    4e60:	11800115 	stw	r6,4(r2)
    4e64:	10c00215 	stw	r3,8(r2)
    4e68:	0007d3c0 	call	7d3c <_Bfree>
    4e6c:	e0001015 	stw	zero,64(fp)
    4e70:	88002e16 	blt	r17,zero,4f2c <_dtoa_r+0x128>
    4e74:	80000015 	stw	zero,0(r16)
    4e78:	889ffc2c 	andhi	r2,r17,32752
    4e7c:	00dffc34 	movhi	r3,32752
    4e80:	10c01c26 	beq	r2,r3,4ef4 <_dtoa_r+0xf0>
    4e84:	000d883a 	mov	r6,zero
    4e88:	000f883a 	mov	r7,zero
    4e8c:	9009883a 	mov	r4,r18
    4e90:	980b883a 	mov	r5,r19
    4e94:	000d1f40 	call	d1f4 <__eqdf2>
    4e98:	10002b1e 	bne	r2,zero,4f48 <_dtoa_r+0x144>
    4e9c:	d9c02317 	ldw	r7,140(sp)
    4ea0:	00800044 	movi	r2,1
    4ea4:	38800015 	stw	r2,0(r7)
    4ea8:	d8802517 	ldw	r2,148(sp)
    4eac:	10019e26 	beq	r2,zero,5528 <_dtoa_r+0x724>
    4eb0:	d8c02517 	ldw	r3,148(sp)
    4eb4:	00800074 	movhi	r2,1
    4eb8:	1081d644 	addi	r2,r2,1881
    4ebc:	18800015 	stw	r2,0(r3)
    4ec0:	10bfffc4 	addi	r2,r2,-1
    4ec4:	dfc02117 	ldw	ra,132(sp)
    4ec8:	df002017 	ldw	fp,128(sp)
    4ecc:	ddc01f17 	ldw	r23,124(sp)
    4ed0:	dd801e17 	ldw	r22,120(sp)
    4ed4:	dd401d17 	ldw	r21,116(sp)
    4ed8:	dd001c17 	ldw	r20,112(sp)
    4edc:	dcc01b17 	ldw	r19,108(sp)
    4ee0:	dc801a17 	ldw	r18,104(sp)
    4ee4:	dc401917 	ldw	r17,100(sp)
    4ee8:	dc001817 	ldw	r16,96(sp)
    4eec:	dec02204 	addi	sp,sp,136
    4ef0:	f800283a 	ret
    4ef4:	d8c02317 	ldw	r3,140(sp)
    4ef8:	0089c3c4 	movi	r2,9999
    4efc:	18800015 	stw	r2,0(r3)
    4f00:	90017726 	beq	r18,zero,54e0 <_dtoa_r+0x6dc>
    4f04:	00800074 	movhi	r2,1
    4f08:	1081e204 	addi	r2,r2,1928
    4f0c:	d9002517 	ldw	r4,148(sp)
    4f10:	203fec26 	beq	r4,zero,4ec4 <__alt_data_end+0xff004ec4>
    4f14:	10c000c7 	ldb	r3,3(r2)
    4f18:	1801781e 	bne	r3,zero,54fc <_dtoa_r+0x6f8>
    4f1c:	10c000c4 	addi	r3,r2,3
    4f20:	d9802517 	ldw	r6,148(sp)
    4f24:	30c00015 	stw	r3,0(r6)
    4f28:	003fe606 	br	4ec4 <__alt_data_end+0xff004ec4>
    4f2c:	04e00034 	movhi	r19,32768
    4f30:	9cffffc4 	addi	r19,r19,-1
    4f34:	00800044 	movi	r2,1
    4f38:	8ce6703a 	and	r19,r17,r19
    4f3c:	80800015 	stw	r2,0(r16)
    4f40:	9823883a 	mov	r17,r19
    4f44:	003fcc06 	br	4e78 <__alt_data_end+0xff004e78>
    4f48:	d8800204 	addi	r2,sp,8
    4f4c:	d8800015 	stw	r2,0(sp)
    4f50:	d9c00104 	addi	r7,sp,4
    4f54:	900b883a 	mov	r5,r18
    4f58:	980d883a 	mov	r6,r19
    4f5c:	e009883a 	mov	r4,fp
    4f60:	8820d53a 	srli	r16,r17,20
    4f64:	00089280 	call	8928 <__d2b>
    4f68:	d8800915 	stw	r2,36(sp)
    4f6c:	8001651e 	bne	r16,zero,5504 <_dtoa_r+0x700>
    4f70:	dd800217 	ldw	r22,8(sp)
    4f74:	dc000117 	ldw	r16,4(sp)
    4f78:	00800804 	movi	r2,32
    4f7c:	b421883a 	add	r16,r22,r16
    4f80:	80c10c84 	addi	r3,r16,1074
    4f84:	10c2d10e 	bge	r2,r3,5acc <_dtoa_r+0xcc8>
    4f88:	00801004 	movi	r2,64
    4f8c:	81010484 	addi	r4,r16,1042
    4f90:	10c7c83a 	sub	r3,r2,r3
    4f94:	9108d83a 	srl	r4,r18,r4
    4f98:	88e2983a 	sll	r17,r17,r3
    4f9c:	2448b03a 	or	r4,r4,r17
    4fa0:	000e5bc0 	call	e5bc <__floatunsidf>
    4fa4:	017f8434 	movhi	r5,65040
    4fa8:	01800044 	movi	r6,1
    4fac:	1009883a 	mov	r4,r2
    4fb0:	194b883a 	add	r5,r3,r5
    4fb4:	843fffc4 	addi	r16,r16,-1
    4fb8:	d9801115 	stw	r6,68(sp)
    4fbc:	000d883a 	mov	r6,zero
    4fc0:	01cffe34 	movhi	r7,16376
    4fc4:	000db640 	call	db64 <__subdf3>
    4fc8:	0198dbf4 	movhi	r6,25455
    4fcc:	01cff4f4 	movhi	r7,16339
    4fd0:	3190d844 	addi	r6,r6,17249
    4fd4:	39e1e9c4 	addi	r7,r7,-30809
    4fd8:	1009883a 	mov	r4,r2
    4fdc:	180b883a 	mov	r5,r3
    4fe0:	000d44c0 	call	d44c <__muldf3>
    4fe4:	01a2d874 	movhi	r6,35681
    4fe8:	01cff1f4 	movhi	r7,16327
    4fec:	31b22cc4 	addi	r6,r6,-14157
    4ff0:	39e28a04 	addi	r7,r7,-30168
    4ff4:	180b883a 	mov	r5,r3
    4ff8:	1009883a 	mov	r4,r2
    4ffc:	000c0600 	call	c060 <__adddf3>
    5000:	8009883a 	mov	r4,r16
    5004:	1029883a 	mov	r20,r2
    5008:	1823883a 	mov	r17,r3
    500c:	000e4e00 	call	e4e0 <__floatsidf>
    5010:	019427f4 	movhi	r6,20639
    5014:	01cff4f4 	movhi	r7,16339
    5018:	319e7ec4 	addi	r6,r6,31227
    501c:	39d104c4 	addi	r7,r7,17427
    5020:	1009883a 	mov	r4,r2
    5024:	180b883a 	mov	r5,r3
    5028:	000d44c0 	call	d44c <__muldf3>
    502c:	100d883a 	mov	r6,r2
    5030:	180f883a 	mov	r7,r3
    5034:	a009883a 	mov	r4,r20
    5038:	880b883a 	mov	r5,r17
    503c:	000c0600 	call	c060 <__adddf3>
    5040:	1009883a 	mov	r4,r2
    5044:	180b883a 	mov	r5,r3
    5048:	1029883a 	mov	r20,r2
    504c:	1823883a 	mov	r17,r3
    5050:	000e4600 	call	e460 <__fixdfsi>
    5054:	000d883a 	mov	r6,zero
    5058:	000f883a 	mov	r7,zero
    505c:	a009883a 	mov	r4,r20
    5060:	880b883a 	mov	r5,r17
    5064:	d8800515 	stw	r2,20(sp)
    5068:	000d3580 	call	d358 <__ledf2>
    506c:	10028716 	blt	r2,zero,5a8c <_dtoa_r+0xc88>
    5070:	d8c00517 	ldw	r3,20(sp)
    5074:	00800584 	movi	r2,22
    5078:	10c27536 	bltu	r2,r3,5a50 <_dtoa_r+0xc4c>
    507c:	180490fa 	slli	r2,r3,3
    5080:	00c00074 	movhi	r3,1
    5084:	18c1fe04 	addi	r3,r3,2040
    5088:	1885883a 	add	r2,r3,r2
    508c:	11000017 	ldw	r4,0(r2)
    5090:	11400117 	ldw	r5,4(r2)
    5094:	900d883a 	mov	r6,r18
    5098:	980f883a 	mov	r7,r19
    509c:	000d27c0 	call	d27c <__gedf2>
    50a0:	00828d0e 	bge	zero,r2,5ad8 <_dtoa_r+0xcd4>
    50a4:	d9000517 	ldw	r4,20(sp)
    50a8:	d8000e15 	stw	zero,56(sp)
    50ac:	213fffc4 	addi	r4,r4,-1
    50b0:	d9000515 	stw	r4,20(sp)
    50b4:	b42dc83a 	sub	r22,r22,r16
    50b8:	b5bfffc4 	addi	r22,r22,-1
    50bc:	b0026f16 	blt	r22,zero,5a7c <_dtoa_r+0xc78>
    50c0:	d8000815 	stw	zero,32(sp)
    50c4:	d9c00517 	ldw	r7,20(sp)
    50c8:	38026416 	blt	r7,zero,5a5c <_dtoa_r+0xc58>
    50cc:	b1ed883a 	add	r22,r22,r7
    50d0:	d9c00d15 	stw	r7,52(sp)
    50d4:	d8000a15 	stw	zero,40(sp)
    50d8:	d9800317 	ldw	r6,12(sp)
    50dc:	00800244 	movi	r2,9
    50e0:	11811436 	bltu	r2,r6,5534 <_dtoa_r+0x730>
    50e4:	00800144 	movi	r2,5
    50e8:	1184e10e 	bge	r2,r6,6470 <_dtoa_r+0x166c>
    50ec:	31bfff04 	addi	r6,r6,-4
    50f0:	d9800315 	stw	r6,12(sp)
    50f4:	0023883a 	mov	r17,zero
    50f8:	d9800317 	ldw	r6,12(sp)
    50fc:	008000c4 	movi	r2,3
    5100:	30836726 	beq	r6,r2,5ea0 <_dtoa_r+0x109c>
    5104:	1183410e 	bge	r2,r6,5e0c <_dtoa_r+0x1008>
    5108:	d9c00317 	ldw	r7,12(sp)
    510c:	00800104 	movi	r2,4
    5110:	38827c26 	beq	r7,r2,5b04 <_dtoa_r+0xd00>
    5114:	00800144 	movi	r2,5
    5118:	3884c41e 	bne	r7,r2,642c <_dtoa_r+0x1628>
    511c:	00800044 	movi	r2,1
    5120:	d8800b15 	stw	r2,44(sp)
    5124:	d8c00517 	ldw	r3,20(sp)
    5128:	d9002217 	ldw	r4,136(sp)
    512c:	1907883a 	add	r3,r3,r4
    5130:	19800044 	addi	r6,r3,1
    5134:	d8c00c15 	stw	r3,48(sp)
    5138:	d9800615 	stw	r6,24(sp)
    513c:	0183a40e 	bge	zero,r6,5fd0 <_dtoa_r+0x11cc>
    5140:	d9800617 	ldw	r6,24(sp)
    5144:	3021883a 	mov	r16,r6
    5148:	e0001115 	stw	zero,68(fp)
    514c:	008005c4 	movi	r2,23
    5150:	1184c92e 	bgeu	r2,r6,6478 <_dtoa_r+0x1674>
    5154:	00c00044 	movi	r3,1
    5158:	00800104 	movi	r2,4
    515c:	1085883a 	add	r2,r2,r2
    5160:	11000504 	addi	r4,r2,20
    5164:	180b883a 	mov	r5,r3
    5168:	18c00044 	addi	r3,r3,1
    516c:	313ffb2e 	bgeu	r6,r4,515c <__alt_data_end+0xff00515c>
    5170:	e1401115 	stw	r5,68(fp)
    5174:	e009883a 	mov	r4,fp
    5178:	0007c940 	call	7c94 <_Balloc>
    517c:	d8800715 	stw	r2,28(sp)
    5180:	e0801015 	stw	r2,64(fp)
    5184:	00800384 	movi	r2,14
    5188:	1400f736 	bltu	r2,r16,5568 <_dtoa_r+0x764>
    518c:	8800f626 	beq	r17,zero,5568 <_dtoa_r+0x764>
    5190:	d9c00517 	ldw	r7,20(sp)
    5194:	01c39a0e 	bge	zero,r7,6000 <_dtoa_r+0x11fc>
    5198:	388003cc 	andi	r2,r7,15
    519c:	100490fa 	slli	r2,r2,3
    51a0:	382bd13a 	srai	r21,r7,4
    51a4:	00c00074 	movhi	r3,1
    51a8:	18c1fe04 	addi	r3,r3,2040
    51ac:	1885883a 	add	r2,r3,r2
    51b0:	a8c0040c 	andi	r3,r21,16
    51b4:	12400017 	ldw	r9,0(r2)
    51b8:	12000117 	ldw	r8,4(r2)
    51bc:	18037926 	beq	r3,zero,5fa4 <_dtoa_r+0x11a0>
    51c0:	00800074 	movhi	r2,1
    51c4:	1081f404 	addi	r2,r2,2000
    51c8:	11800817 	ldw	r6,32(r2)
    51cc:	11c00917 	ldw	r7,36(r2)
    51d0:	9009883a 	mov	r4,r18
    51d4:	980b883a 	mov	r5,r19
    51d8:	da001715 	stw	r8,92(sp)
    51dc:	da401615 	stw	r9,88(sp)
    51e0:	000c90c0 	call	c90c <__divdf3>
    51e4:	da001717 	ldw	r8,92(sp)
    51e8:	da401617 	ldw	r9,88(sp)
    51ec:	ad4003cc 	andi	r21,r21,15
    51f0:	040000c4 	movi	r16,3
    51f4:	1023883a 	mov	r17,r2
    51f8:	1829883a 	mov	r20,r3
    51fc:	a8001126 	beq	r21,zero,5244 <_dtoa_r+0x440>
    5200:	05c00074 	movhi	r23,1
    5204:	bdc1f404 	addi	r23,r23,2000
    5208:	4805883a 	mov	r2,r9
    520c:	4007883a 	mov	r3,r8
    5210:	a980004c 	andi	r6,r21,1
    5214:	1009883a 	mov	r4,r2
    5218:	a82bd07a 	srai	r21,r21,1
    521c:	180b883a 	mov	r5,r3
    5220:	30000426 	beq	r6,zero,5234 <_dtoa_r+0x430>
    5224:	b9800017 	ldw	r6,0(r23)
    5228:	b9c00117 	ldw	r7,4(r23)
    522c:	84000044 	addi	r16,r16,1
    5230:	000d44c0 	call	d44c <__muldf3>
    5234:	bdc00204 	addi	r23,r23,8
    5238:	a83ff51e 	bne	r21,zero,5210 <__alt_data_end+0xff005210>
    523c:	1013883a 	mov	r9,r2
    5240:	1811883a 	mov	r8,r3
    5244:	480d883a 	mov	r6,r9
    5248:	400f883a 	mov	r7,r8
    524c:	8809883a 	mov	r4,r17
    5250:	a00b883a 	mov	r5,r20
    5254:	000c90c0 	call	c90c <__divdf3>
    5258:	d8800f15 	stw	r2,60(sp)
    525c:	d8c01015 	stw	r3,64(sp)
    5260:	d8c00e17 	ldw	r3,56(sp)
    5264:	18000626 	beq	r3,zero,5280 <_dtoa_r+0x47c>
    5268:	d9000f17 	ldw	r4,60(sp)
    526c:	d9401017 	ldw	r5,64(sp)
    5270:	000d883a 	mov	r6,zero
    5274:	01cffc34 	movhi	r7,16368
    5278:	000d3580 	call	d358 <__ledf2>
    527c:	10040b16 	blt	r2,zero,62ac <_dtoa_r+0x14a8>
    5280:	8009883a 	mov	r4,r16
    5284:	000e4e00 	call	e4e0 <__floatsidf>
    5288:	d9800f17 	ldw	r6,60(sp)
    528c:	d9c01017 	ldw	r7,64(sp)
    5290:	1009883a 	mov	r4,r2
    5294:	180b883a 	mov	r5,r3
    5298:	000d44c0 	call	d44c <__muldf3>
    529c:	000d883a 	mov	r6,zero
    52a0:	01d00734 	movhi	r7,16412
    52a4:	1009883a 	mov	r4,r2
    52a8:	180b883a 	mov	r5,r3
    52ac:	000c0600 	call	c060 <__adddf3>
    52b0:	1021883a 	mov	r16,r2
    52b4:	d8800617 	ldw	r2,24(sp)
    52b8:	047f3034 	movhi	r17,64704
    52bc:	1c63883a 	add	r17,r3,r17
    52c0:	10031826 	beq	r2,zero,5f24 <_dtoa_r+0x1120>
    52c4:	d8c00517 	ldw	r3,20(sp)
    52c8:	db000617 	ldw	r12,24(sp)
    52cc:	d8c01315 	stw	r3,76(sp)
    52d0:	d9000b17 	ldw	r4,44(sp)
    52d4:	20038f26 	beq	r4,zero,6114 <_dtoa_r+0x1310>
    52d8:	60bfffc4 	addi	r2,r12,-1
    52dc:	100490fa 	slli	r2,r2,3
    52e0:	00c00074 	movhi	r3,1
    52e4:	18c1fe04 	addi	r3,r3,2040
    52e8:	1885883a 	add	r2,r3,r2
    52ec:	11800017 	ldw	r6,0(r2)
    52f0:	11c00117 	ldw	r7,4(r2)
    52f4:	d8800717 	ldw	r2,28(sp)
    52f8:	0009883a 	mov	r4,zero
    52fc:	014ff834 	movhi	r5,16352
    5300:	db001615 	stw	r12,88(sp)
    5304:	15c00044 	addi	r23,r2,1
    5308:	000c90c0 	call	c90c <__divdf3>
    530c:	800d883a 	mov	r6,r16
    5310:	880f883a 	mov	r7,r17
    5314:	1009883a 	mov	r4,r2
    5318:	180b883a 	mov	r5,r3
    531c:	000db640 	call	db64 <__subdf3>
    5320:	d9401017 	ldw	r5,64(sp)
    5324:	d9000f17 	ldw	r4,60(sp)
    5328:	102b883a 	mov	r21,r2
    532c:	d8c01215 	stw	r3,72(sp)
    5330:	000e4600 	call	e460 <__fixdfsi>
    5334:	1009883a 	mov	r4,r2
    5338:	1029883a 	mov	r20,r2
    533c:	000e4e00 	call	e4e0 <__floatsidf>
    5340:	d9000f17 	ldw	r4,60(sp)
    5344:	d9401017 	ldw	r5,64(sp)
    5348:	100d883a 	mov	r6,r2
    534c:	180f883a 	mov	r7,r3
    5350:	000db640 	call	db64 <__subdf3>
    5354:	1823883a 	mov	r17,r3
    5358:	d8c00717 	ldw	r3,28(sp)
    535c:	d9401217 	ldw	r5,72(sp)
    5360:	a2000c04 	addi	r8,r20,48
    5364:	1021883a 	mov	r16,r2
    5368:	1a000005 	stb	r8,0(r3)
    536c:	800d883a 	mov	r6,r16
    5370:	880f883a 	mov	r7,r17
    5374:	a809883a 	mov	r4,r21
    5378:	4029883a 	mov	r20,r8
    537c:	000d27c0 	call	d27c <__gedf2>
    5380:	00841d16 	blt	zero,r2,63f8 <_dtoa_r+0x15f4>
    5384:	800d883a 	mov	r6,r16
    5388:	880f883a 	mov	r7,r17
    538c:	0009883a 	mov	r4,zero
    5390:	014ffc34 	movhi	r5,16368
    5394:	000db640 	call	db64 <__subdf3>
    5398:	d9401217 	ldw	r5,72(sp)
    539c:	100d883a 	mov	r6,r2
    53a0:	180f883a 	mov	r7,r3
    53a4:	a809883a 	mov	r4,r21
    53a8:	000d27c0 	call	d27c <__gedf2>
    53ac:	db001617 	ldw	r12,88(sp)
    53b0:	00840e16 	blt	zero,r2,63ec <_dtoa_r+0x15e8>
    53b4:	00800044 	movi	r2,1
    53b8:	13006b0e 	bge	r2,r12,5568 <_dtoa_r+0x764>
    53bc:	d9000717 	ldw	r4,28(sp)
    53c0:	dd800f15 	stw	r22,60(sp)
    53c4:	dcc01015 	stw	r19,64(sp)
    53c8:	2319883a 	add	r12,r4,r12
    53cc:	dcc01217 	ldw	r19,72(sp)
    53d0:	602d883a 	mov	r22,r12
    53d4:	dc801215 	stw	r18,72(sp)
    53d8:	b825883a 	mov	r18,r23
    53dc:	00000906 	br	5404 <_dtoa_r+0x600>
    53e0:	000db640 	call	db64 <__subdf3>
    53e4:	a80d883a 	mov	r6,r21
    53e8:	980f883a 	mov	r7,r19
    53ec:	1009883a 	mov	r4,r2
    53f0:	180b883a 	mov	r5,r3
    53f4:	000d3580 	call	d358 <__ledf2>
    53f8:	1003e816 	blt	r2,zero,639c <_dtoa_r+0x1598>
    53fc:	b825883a 	mov	r18,r23
    5400:	bd83e926 	beq	r23,r22,63a8 <_dtoa_r+0x15a4>
    5404:	a809883a 	mov	r4,r21
    5408:	980b883a 	mov	r5,r19
    540c:	000d883a 	mov	r6,zero
    5410:	01d00934 	movhi	r7,16420
    5414:	000d44c0 	call	d44c <__muldf3>
    5418:	000d883a 	mov	r6,zero
    541c:	01d00934 	movhi	r7,16420
    5420:	8009883a 	mov	r4,r16
    5424:	880b883a 	mov	r5,r17
    5428:	102b883a 	mov	r21,r2
    542c:	1827883a 	mov	r19,r3
    5430:	000d44c0 	call	d44c <__muldf3>
    5434:	180b883a 	mov	r5,r3
    5438:	1009883a 	mov	r4,r2
    543c:	1821883a 	mov	r16,r3
    5440:	1023883a 	mov	r17,r2
    5444:	000e4600 	call	e460 <__fixdfsi>
    5448:	1009883a 	mov	r4,r2
    544c:	1029883a 	mov	r20,r2
    5450:	000e4e00 	call	e4e0 <__floatsidf>
    5454:	8809883a 	mov	r4,r17
    5458:	800b883a 	mov	r5,r16
    545c:	100d883a 	mov	r6,r2
    5460:	180f883a 	mov	r7,r3
    5464:	000db640 	call	db64 <__subdf3>
    5468:	a5000c04 	addi	r20,r20,48
    546c:	a80d883a 	mov	r6,r21
    5470:	980f883a 	mov	r7,r19
    5474:	1009883a 	mov	r4,r2
    5478:	180b883a 	mov	r5,r3
    547c:	95000005 	stb	r20,0(r18)
    5480:	1021883a 	mov	r16,r2
    5484:	1823883a 	mov	r17,r3
    5488:	000d3580 	call	d358 <__ledf2>
    548c:	bdc00044 	addi	r23,r23,1
    5490:	800d883a 	mov	r6,r16
    5494:	880f883a 	mov	r7,r17
    5498:	0009883a 	mov	r4,zero
    549c:	014ffc34 	movhi	r5,16368
    54a0:	103fcf0e 	bge	r2,zero,53e0 <__alt_data_end+0xff0053e0>
    54a4:	d8c01317 	ldw	r3,76(sp)
    54a8:	d8c00515 	stw	r3,20(sp)
    54ac:	d9400917 	ldw	r5,36(sp)
    54b0:	e009883a 	mov	r4,fp
    54b4:	0007d3c0 	call	7d3c <_Bfree>
    54b8:	d9000517 	ldw	r4,20(sp)
    54bc:	d9802317 	ldw	r6,140(sp)
    54c0:	d9c02517 	ldw	r7,148(sp)
    54c4:	b8000005 	stb	zero,0(r23)
    54c8:	20800044 	addi	r2,r4,1
    54cc:	30800015 	stw	r2,0(r6)
    54d0:	3802aa26 	beq	r7,zero,5f7c <_dtoa_r+0x1178>
    54d4:	3dc00015 	stw	r23,0(r7)
    54d8:	d8800717 	ldw	r2,28(sp)
    54dc:	003e7906 	br	4ec4 <__alt_data_end+0xff004ec4>
    54e0:	00800434 	movhi	r2,16
    54e4:	10bfffc4 	addi	r2,r2,-1
    54e8:	88a2703a 	and	r17,r17,r2
    54ec:	883e851e 	bne	r17,zero,4f04 <__alt_data_end+0xff004f04>
    54f0:	00800074 	movhi	r2,1
    54f4:	1081df04 	addi	r2,r2,1916
    54f8:	003e8406 	br	4f0c <__alt_data_end+0xff004f0c>
    54fc:	10c00204 	addi	r3,r2,8
    5500:	003e8706 	br	4f20 <__alt_data_end+0xff004f20>
    5504:	01400434 	movhi	r5,16
    5508:	297fffc4 	addi	r5,r5,-1
    550c:	994a703a 	and	r5,r19,r5
    5510:	9009883a 	mov	r4,r18
    5514:	843f0044 	addi	r16,r16,-1023
    5518:	294ffc34 	orhi	r5,r5,16368
    551c:	dd800217 	ldw	r22,8(sp)
    5520:	d8001115 	stw	zero,68(sp)
    5524:	003ea506 	br	4fbc <__alt_data_end+0xff004fbc>
    5528:	00800074 	movhi	r2,1
    552c:	1081d604 	addi	r2,r2,1880
    5530:	003e6406 	br	4ec4 <__alt_data_end+0xff004ec4>
    5534:	e0001115 	stw	zero,68(fp)
    5538:	000b883a 	mov	r5,zero
    553c:	e009883a 	mov	r4,fp
    5540:	0007c940 	call	7c94 <_Balloc>
    5544:	01bfffc4 	movi	r6,-1
    5548:	01c00044 	movi	r7,1
    554c:	d8800715 	stw	r2,28(sp)
    5550:	d9800c15 	stw	r6,48(sp)
    5554:	e0801015 	stw	r2,64(fp)
    5558:	d8000315 	stw	zero,12(sp)
    555c:	d9c00b15 	stw	r7,44(sp)
    5560:	d9800615 	stw	r6,24(sp)
    5564:	d8002215 	stw	zero,136(sp)
    5568:	d8800117 	ldw	r2,4(sp)
    556c:	10008916 	blt	r2,zero,5794 <_dtoa_r+0x990>
    5570:	d9000517 	ldw	r4,20(sp)
    5574:	00c00384 	movi	r3,14
    5578:	19008616 	blt	r3,r4,5794 <_dtoa_r+0x990>
    557c:	200490fa 	slli	r2,r4,3
    5580:	00c00074 	movhi	r3,1
    5584:	d9802217 	ldw	r6,136(sp)
    5588:	18c1fe04 	addi	r3,r3,2040
    558c:	1885883a 	add	r2,r3,r2
    5590:	14000017 	ldw	r16,0(r2)
    5594:	14400117 	ldw	r17,4(r2)
    5598:	30016316 	blt	r6,zero,5b28 <_dtoa_r+0xd24>
    559c:	800d883a 	mov	r6,r16
    55a0:	880f883a 	mov	r7,r17
    55a4:	9009883a 	mov	r4,r18
    55a8:	980b883a 	mov	r5,r19
    55ac:	000c90c0 	call	c90c <__divdf3>
    55b0:	180b883a 	mov	r5,r3
    55b4:	1009883a 	mov	r4,r2
    55b8:	000e4600 	call	e460 <__fixdfsi>
    55bc:	1009883a 	mov	r4,r2
    55c0:	102b883a 	mov	r21,r2
    55c4:	000e4e00 	call	e4e0 <__floatsidf>
    55c8:	800d883a 	mov	r6,r16
    55cc:	880f883a 	mov	r7,r17
    55d0:	1009883a 	mov	r4,r2
    55d4:	180b883a 	mov	r5,r3
    55d8:	000d44c0 	call	d44c <__muldf3>
    55dc:	100d883a 	mov	r6,r2
    55e0:	180f883a 	mov	r7,r3
    55e4:	9009883a 	mov	r4,r18
    55e8:	980b883a 	mov	r5,r19
    55ec:	000db640 	call	db64 <__subdf3>
    55f0:	d9c00717 	ldw	r7,28(sp)
    55f4:	1009883a 	mov	r4,r2
    55f8:	a8800c04 	addi	r2,r21,48
    55fc:	38800005 	stb	r2,0(r7)
    5600:	3dc00044 	addi	r23,r7,1
    5604:	d9c00617 	ldw	r7,24(sp)
    5608:	01800044 	movi	r6,1
    560c:	180b883a 	mov	r5,r3
    5610:	2005883a 	mov	r2,r4
    5614:	39803826 	beq	r7,r6,56f8 <_dtoa_r+0x8f4>
    5618:	000d883a 	mov	r6,zero
    561c:	01d00934 	movhi	r7,16420
    5620:	000d44c0 	call	d44c <__muldf3>
    5624:	000d883a 	mov	r6,zero
    5628:	000f883a 	mov	r7,zero
    562c:	1009883a 	mov	r4,r2
    5630:	180b883a 	mov	r5,r3
    5634:	1025883a 	mov	r18,r2
    5638:	1827883a 	mov	r19,r3
    563c:	000d1f40 	call	d1f4 <__eqdf2>
    5640:	103f9a26 	beq	r2,zero,54ac <__alt_data_end+0xff0054ac>
    5644:	d9c00617 	ldw	r7,24(sp)
    5648:	d8c00717 	ldw	r3,28(sp)
    564c:	b829883a 	mov	r20,r23
    5650:	38bfffc4 	addi	r2,r7,-1
    5654:	18ad883a 	add	r22,r3,r2
    5658:	00000a06 	br	5684 <_dtoa_r+0x880>
    565c:	000d44c0 	call	d44c <__muldf3>
    5660:	000d883a 	mov	r6,zero
    5664:	000f883a 	mov	r7,zero
    5668:	1009883a 	mov	r4,r2
    566c:	180b883a 	mov	r5,r3
    5670:	1025883a 	mov	r18,r2
    5674:	1827883a 	mov	r19,r3
    5678:	b829883a 	mov	r20,r23
    567c:	000d1f40 	call	d1f4 <__eqdf2>
    5680:	103f8a26 	beq	r2,zero,54ac <__alt_data_end+0xff0054ac>
    5684:	800d883a 	mov	r6,r16
    5688:	880f883a 	mov	r7,r17
    568c:	9009883a 	mov	r4,r18
    5690:	980b883a 	mov	r5,r19
    5694:	000c90c0 	call	c90c <__divdf3>
    5698:	180b883a 	mov	r5,r3
    569c:	1009883a 	mov	r4,r2
    56a0:	000e4600 	call	e460 <__fixdfsi>
    56a4:	1009883a 	mov	r4,r2
    56a8:	102b883a 	mov	r21,r2
    56ac:	000e4e00 	call	e4e0 <__floatsidf>
    56b0:	800d883a 	mov	r6,r16
    56b4:	880f883a 	mov	r7,r17
    56b8:	1009883a 	mov	r4,r2
    56bc:	180b883a 	mov	r5,r3
    56c0:	000d44c0 	call	d44c <__muldf3>
    56c4:	100d883a 	mov	r6,r2
    56c8:	180f883a 	mov	r7,r3
    56cc:	9009883a 	mov	r4,r18
    56d0:	980b883a 	mov	r5,r19
    56d4:	000db640 	call	db64 <__subdf3>
    56d8:	aa000c04 	addi	r8,r21,48
    56dc:	a2000005 	stb	r8,0(r20)
    56e0:	000d883a 	mov	r6,zero
    56e4:	01d00934 	movhi	r7,16420
    56e8:	1009883a 	mov	r4,r2
    56ec:	180b883a 	mov	r5,r3
    56f0:	a5c00044 	addi	r23,r20,1
    56f4:	b53fd91e 	bne	r22,r20,565c <__alt_data_end+0xff00565c>
    56f8:	100d883a 	mov	r6,r2
    56fc:	180f883a 	mov	r7,r3
    5700:	1009883a 	mov	r4,r2
    5704:	180b883a 	mov	r5,r3
    5708:	000c0600 	call	c060 <__adddf3>
    570c:	100d883a 	mov	r6,r2
    5710:	180f883a 	mov	r7,r3
    5714:	8009883a 	mov	r4,r16
    5718:	880b883a 	mov	r5,r17
    571c:	1027883a 	mov	r19,r2
    5720:	1825883a 	mov	r18,r3
    5724:	000d3580 	call	d358 <__ledf2>
    5728:	10000816 	blt	r2,zero,574c <_dtoa_r+0x948>
    572c:	980d883a 	mov	r6,r19
    5730:	900f883a 	mov	r7,r18
    5734:	8009883a 	mov	r4,r16
    5738:	880b883a 	mov	r5,r17
    573c:	000d1f40 	call	d1f4 <__eqdf2>
    5740:	103f5a1e 	bne	r2,zero,54ac <__alt_data_end+0xff0054ac>
    5744:	ad40004c 	andi	r21,r21,1
    5748:	a83f5826 	beq	r21,zero,54ac <__alt_data_end+0xff0054ac>
    574c:	bd3fffc3 	ldbu	r20,-1(r23)
    5750:	b8bfffc4 	addi	r2,r23,-1
    5754:	1007883a 	mov	r3,r2
    5758:	01400e44 	movi	r5,57
    575c:	d9800717 	ldw	r6,28(sp)
    5760:	00000506 	br	5778 <_dtoa_r+0x974>
    5764:	18ffffc4 	addi	r3,r3,-1
    5768:	11824726 	beq	r2,r6,6088 <_dtoa_r+0x1284>
    576c:	1d000003 	ldbu	r20,0(r3)
    5770:	102f883a 	mov	r23,r2
    5774:	10bfffc4 	addi	r2,r2,-1
    5778:	a1003fcc 	andi	r4,r20,255
    577c:	2100201c 	xori	r4,r4,128
    5780:	213fe004 	addi	r4,r4,-128
    5784:	217ff726 	beq	r4,r5,5764 <__alt_data_end+0xff005764>
    5788:	a2000044 	addi	r8,r20,1
    578c:	12000005 	stb	r8,0(r2)
    5790:	003f4606 	br	54ac <__alt_data_end+0xff0054ac>
    5794:	d9000b17 	ldw	r4,44(sp)
    5798:	2000c826 	beq	r4,zero,5abc <_dtoa_r+0xcb8>
    579c:	d9800317 	ldw	r6,12(sp)
    57a0:	00c00044 	movi	r3,1
    57a4:	1980f90e 	bge	r3,r6,5b8c <_dtoa_r+0xd88>
    57a8:	d8800617 	ldw	r2,24(sp)
    57ac:	d8c00a17 	ldw	r3,40(sp)
    57b0:	157fffc4 	addi	r21,r2,-1
    57b4:	1d41f316 	blt	r3,r21,5f84 <_dtoa_r+0x1180>
    57b8:	1d6bc83a 	sub	r21,r3,r21
    57bc:	d9c00617 	ldw	r7,24(sp)
    57c0:	3802aa16 	blt	r7,zero,626c <_dtoa_r+0x1468>
    57c4:	dd000817 	ldw	r20,32(sp)
    57c8:	d8800617 	ldw	r2,24(sp)
    57cc:	d8c00817 	ldw	r3,32(sp)
    57d0:	01400044 	movi	r5,1
    57d4:	e009883a 	mov	r4,fp
    57d8:	1887883a 	add	r3,r3,r2
    57dc:	d8c00815 	stw	r3,32(sp)
    57e0:	b0ad883a 	add	r22,r22,r2
    57e4:	00080a00 	call	80a0 <__i2b>
    57e8:	1023883a 	mov	r17,r2
    57ec:	a0000826 	beq	r20,zero,5810 <_dtoa_r+0xa0c>
    57f0:	0580070e 	bge	zero,r22,5810 <_dtoa_r+0xa0c>
    57f4:	a005883a 	mov	r2,r20
    57f8:	b500b916 	blt	r22,r20,5ae0 <_dtoa_r+0xcdc>
    57fc:	d9000817 	ldw	r4,32(sp)
    5800:	a0a9c83a 	sub	r20,r20,r2
    5804:	b0adc83a 	sub	r22,r22,r2
    5808:	2089c83a 	sub	r4,r4,r2
    580c:	d9000815 	stw	r4,32(sp)
    5810:	d9800a17 	ldw	r6,40(sp)
    5814:	0181810e 	bge	zero,r6,5e1c <_dtoa_r+0x1018>
    5818:	d9c00b17 	ldw	r7,44(sp)
    581c:	3800b326 	beq	r7,zero,5aec <_dtoa_r+0xce8>
    5820:	a800b226 	beq	r21,zero,5aec <_dtoa_r+0xce8>
    5824:	880b883a 	mov	r5,r17
    5828:	a80d883a 	mov	r6,r21
    582c:	e009883a 	mov	r4,fp
    5830:	00082d40 	call	82d4 <__pow5mult>
    5834:	d9800917 	ldw	r6,36(sp)
    5838:	100b883a 	mov	r5,r2
    583c:	e009883a 	mov	r4,fp
    5840:	1023883a 	mov	r17,r2
    5844:	00080dc0 	call	80dc <__multiply>
    5848:	1021883a 	mov	r16,r2
    584c:	d8800a17 	ldw	r2,40(sp)
    5850:	d9400917 	ldw	r5,36(sp)
    5854:	e009883a 	mov	r4,fp
    5858:	1545c83a 	sub	r2,r2,r21
    585c:	d8800a15 	stw	r2,40(sp)
    5860:	0007d3c0 	call	7d3c <_Bfree>
    5864:	d8c00a17 	ldw	r3,40(sp)
    5868:	18009f1e 	bne	r3,zero,5ae8 <_dtoa_r+0xce4>
    586c:	05c00044 	movi	r23,1
    5870:	e009883a 	mov	r4,fp
    5874:	b80b883a 	mov	r5,r23
    5878:	00080a00 	call	80a0 <__i2b>
    587c:	d9000d17 	ldw	r4,52(sp)
    5880:	102b883a 	mov	r21,r2
    5884:	2000ce26 	beq	r4,zero,5bc0 <_dtoa_r+0xdbc>
    5888:	200d883a 	mov	r6,r4
    588c:	100b883a 	mov	r5,r2
    5890:	e009883a 	mov	r4,fp
    5894:	00082d40 	call	82d4 <__pow5mult>
    5898:	d9800317 	ldw	r6,12(sp)
    589c:	102b883a 	mov	r21,r2
    58a0:	b981810e 	bge	r23,r6,5ea8 <_dtoa_r+0x10a4>
    58a4:	0027883a 	mov	r19,zero
    58a8:	a8800417 	ldw	r2,16(r21)
    58ac:	05c00804 	movi	r23,32
    58b0:	10800104 	addi	r2,r2,4
    58b4:	1085883a 	add	r2,r2,r2
    58b8:	1085883a 	add	r2,r2,r2
    58bc:	a885883a 	add	r2,r21,r2
    58c0:	11000017 	ldw	r4,0(r2)
    58c4:	0007f880 	call	7f88 <__hi0bits>
    58c8:	b885c83a 	sub	r2,r23,r2
    58cc:	1585883a 	add	r2,r2,r22
    58d0:	108007cc 	andi	r2,r2,31
    58d4:	1000b326 	beq	r2,zero,5ba4 <_dtoa_r+0xda0>
    58d8:	00c00804 	movi	r3,32
    58dc:	1887c83a 	sub	r3,r3,r2
    58e0:	01000104 	movi	r4,4
    58e4:	20c2cd0e 	bge	r4,r3,641c <_dtoa_r+0x1618>
    58e8:	00c00704 	movi	r3,28
    58ec:	1885c83a 	sub	r2,r3,r2
    58f0:	d8c00817 	ldw	r3,32(sp)
    58f4:	a0a9883a 	add	r20,r20,r2
    58f8:	b0ad883a 	add	r22,r22,r2
    58fc:	1887883a 	add	r3,r3,r2
    5900:	d8c00815 	stw	r3,32(sp)
    5904:	d9800817 	ldw	r6,32(sp)
    5908:	0180040e 	bge	zero,r6,591c <_dtoa_r+0xb18>
    590c:	800b883a 	mov	r5,r16
    5910:	e009883a 	mov	r4,fp
    5914:	00084140 	call	8414 <__lshift>
    5918:	1021883a 	mov	r16,r2
    591c:	0580050e 	bge	zero,r22,5934 <_dtoa_r+0xb30>
    5920:	a80b883a 	mov	r5,r21
    5924:	b00d883a 	mov	r6,r22
    5928:	e009883a 	mov	r4,fp
    592c:	00084140 	call	8414 <__lshift>
    5930:	102b883a 	mov	r21,r2
    5934:	d9c00e17 	ldw	r7,56(sp)
    5938:	3801211e 	bne	r7,zero,5dc0 <_dtoa_r+0xfbc>
    593c:	d9800617 	ldw	r6,24(sp)
    5940:	0181380e 	bge	zero,r6,5e24 <_dtoa_r+0x1020>
    5944:	d8c00b17 	ldw	r3,44(sp)
    5948:	1800ab1e 	bne	r3,zero,5bf8 <_dtoa_r+0xdf4>
    594c:	dc800717 	ldw	r18,28(sp)
    5950:	dcc00617 	ldw	r19,24(sp)
    5954:	9029883a 	mov	r20,r18
    5958:	00000206 	br	5964 <_dtoa_r+0xb60>
    595c:	0007d640 	call	7d64 <__multadd>
    5960:	1021883a 	mov	r16,r2
    5964:	a80b883a 	mov	r5,r21
    5968:	8009883a 	mov	r4,r16
    596c:	0004c040 	call	4c04 <quorem>
    5970:	10800c04 	addi	r2,r2,48
    5974:	90800005 	stb	r2,0(r18)
    5978:	94800044 	addi	r18,r18,1
    597c:	9507c83a 	sub	r3,r18,r20
    5980:	000f883a 	mov	r7,zero
    5984:	01800284 	movi	r6,10
    5988:	800b883a 	mov	r5,r16
    598c:	e009883a 	mov	r4,fp
    5990:	1cfff216 	blt	r3,r19,595c <__alt_data_end+0xff00595c>
    5994:	1011883a 	mov	r8,r2
    5998:	d8800617 	ldw	r2,24(sp)
    599c:	0082370e 	bge	zero,r2,627c <_dtoa_r+0x1478>
    59a0:	d9000717 	ldw	r4,28(sp)
    59a4:	0025883a 	mov	r18,zero
    59a8:	20af883a 	add	r23,r4,r2
    59ac:	01800044 	movi	r6,1
    59b0:	800b883a 	mov	r5,r16
    59b4:	e009883a 	mov	r4,fp
    59b8:	da001715 	stw	r8,92(sp)
    59bc:	00084140 	call	8414 <__lshift>
    59c0:	a80b883a 	mov	r5,r21
    59c4:	1009883a 	mov	r4,r2
    59c8:	d8800915 	stw	r2,36(sp)
    59cc:	000855c0 	call	855c <__mcmp>
    59d0:	da001717 	ldw	r8,92(sp)
    59d4:	0081800e 	bge	zero,r2,5fd8 <_dtoa_r+0x11d4>
    59d8:	b93fffc3 	ldbu	r4,-1(r23)
    59dc:	b8bfffc4 	addi	r2,r23,-1
    59e0:	1007883a 	mov	r3,r2
    59e4:	01800e44 	movi	r6,57
    59e8:	d9c00717 	ldw	r7,28(sp)
    59ec:	00000506 	br	5a04 <_dtoa_r+0xc00>
    59f0:	18ffffc4 	addi	r3,r3,-1
    59f4:	11c12326 	beq	r2,r7,5e84 <_dtoa_r+0x1080>
    59f8:	19000003 	ldbu	r4,0(r3)
    59fc:	102f883a 	mov	r23,r2
    5a00:	10bfffc4 	addi	r2,r2,-1
    5a04:	21403fcc 	andi	r5,r4,255
    5a08:	2940201c 	xori	r5,r5,128
    5a0c:	297fe004 	addi	r5,r5,-128
    5a10:	29bff726 	beq	r5,r6,59f0 <__alt_data_end+0xff0059f0>
    5a14:	21000044 	addi	r4,r4,1
    5a18:	11000005 	stb	r4,0(r2)
    5a1c:	a80b883a 	mov	r5,r21
    5a20:	e009883a 	mov	r4,fp
    5a24:	0007d3c0 	call	7d3c <_Bfree>
    5a28:	883ea026 	beq	r17,zero,54ac <__alt_data_end+0xff0054ac>
    5a2c:	90000426 	beq	r18,zero,5a40 <_dtoa_r+0xc3c>
    5a30:	94400326 	beq	r18,r17,5a40 <_dtoa_r+0xc3c>
    5a34:	900b883a 	mov	r5,r18
    5a38:	e009883a 	mov	r4,fp
    5a3c:	0007d3c0 	call	7d3c <_Bfree>
    5a40:	880b883a 	mov	r5,r17
    5a44:	e009883a 	mov	r4,fp
    5a48:	0007d3c0 	call	7d3c <_Bfree>
    5a4c:	003e9706 	br	54ac <__alt_data_end+0xff0054ac>
    5a50:	01800044 	movi	r6,1
    5a54:	d9800e15 	stw	r6,56(sp)
    5a58:	003d9606 	br	50b4 <__alt_data_end+0xff0050b4>
    5a5c:	d8800817 	ldw	r2,32(sp)
    5a60:	d8c00517 	ldw	r3,20(sp)
    5a64:	d8000d15 	stw	zero,52(sp)
    5a68:	10c5c83a 	sub	r2,r2,r3
    5a6c:	00c9c83a 	sub	r4,zero,r3
    5a70:	d8800815 	stw	r2,32(sp)
    5a74:	d9000a15 	stw	r4,40(sp)
    5a78:	003d9706 	br	50d8 <__alt_data_end+0xff0050d8>
    5a7c:	05adc83a 	sub	r22,zero,r22
    5a80:	dd800815 	stw	r22,32(sp)
    5a84:	002d883a 	mov	r22,zero
    5a88:	003d8e06 	br	50c4 <__alt_data_end+0xff0050c4>
    5a8c:	d9000517 	ldw	r4,20(sp)
    5a90:	000e4e00 	call	e4e0 <__floatsidf>
    5a94:	100d883a 	mov	r6,r2
    5a98:	180f883a 	mov	r7,r3
    5a9c:	a009883a 	mov	r4,r20
    5aa0:	880b883a 	mov	r5,r17
    5aa4:	000d1f40 	call	d1f4 <__eqdf2>
    5aa8:	103d7126 	beq	r2,zero,5070 <__alt_data_end+0xff005070>
    5aac:	d9c00517 	ldw	r7,20(sp)
    5ab0:	39ffffc4 	addi	r7,r7,-1
    5ab4:	d9c00515 	stw	r7,20(sp)
    5ab8:	003d6d06 	br	5070 <__alt_data_end+0xff005070>
    5abc:	dd400a17 	ldw	r21,40(sp)
    5ac0:	dd000817 	ldw	r20,32(sp)
    5ac4:	0023883a 	mov	r17,zero
    5ac8:	003f4806 	br	57ec <__alt_data_end+0xff0057ec>
    5acc:	10e3c83a 	sub	r17,r2,r3
    5ad0:	9448983a 	sll	r4,r18,r17
    5ad4:	003d3206 	br	4fa0 <__alt_data_end+0xff004fa0>
    5ad8:	d8000e15 	stw	zero,56(sp)
    5adc:	003d7506 	br	50b4 <__alt_data_end+0xff0050b4>
    5ae0:	b005883a 	mov	r2,r22
    5ae4:	003f4506 	br	57fc <__alt_data_end+0xff0057fc>
    5ae8:	dc000915 	stw	r16,36(sp)
    5aec:	d9800a17 	ldw	r6,40(sp)
    5af0:	d9400917 	ldw	r5,36(sp)
    5af4:	e009883a 	mov	r4,fp
    5af8:	00082d40 	call	82d4 <__pow5mult>
    5afc:	1021883a 	mov	r16,r2
    5b00:	003f5a06 	br	586c <__alt_data_end+0xff00586c>
    5b04:	01c00044 	movi	r7,1
    5b08:	d9c00b15 	stw	r7,44(sp)
    5b0c:	d8802217 	ldw	r2,136(sp)
    5b10:	0081280e 	bge	zero,r2,5fb4 <_dtoa_r+0x11b0>
    5b14:	100d883a 	mov	r6,r2
    5b18:	1021883a 	mov	r16,r2
    5b1c:	d8800c15 	stw	r2,48(sp)
    5b20:	d8800615 	stw	r2,24(sp)
    5b24:	003d8806 	br	5148 <__alt_data_end+0xff005148>
    5b28:	d8800617 	ldw	r2,24(sp)
    5b2c:	00be9b16 	blt	zero,r2,559c <__alt_data_end+0xff00559c>
    5b30:	10010f1e 	bne	r2,zero,5f70 <_dtoa_r+0x116c>
    5b34:	880b883a 	mov	r5,r17
    5b38:	000d883a 	mov	r6,zero
    5b3c:	01d00534 	movhi	r7,16404
    5b40:	8009883a 	mov	r4,r16
    5b44:	000d44c0 	call	d44c <__muldf3>
    5b48:	900d883a 	mov	r6,r18
    5b4c:	980f883a 	mov	r7,r19
    5b50:	1009883a 	mov	r4,r2
    5b54:	180b883a 	mov	r5,r3
    5b58:	000d27c0 	call	d27c <__gedf2>
    5b5c:	002b883a 	mov	r21,zero
    5b60:	0023883a 	mov	r17,zero
    5b64:	1000bf16 	blt	r2,zero,5e64 <_dtoa_r+0x1060>
    5b68:	d9802217 	ldw	r6,136(sp)
    5b6c:	ddc00717 	ldw	r23,28(sp)
    5b70:	018c303a 	nor	r6,zero,r6
    5b74:	d9800515 	stw	r6,20(sp)
    5b78:	a80b883a 	mov	r5,r21
    5b7c:	e009883a 	mov	r4,fp
    5b80:	0007d3c0 	call	7d3c <_Bfree>
    5b84:	883e4926 	beq	r17,zero,54ac <__alt_data_end+0xff0054ac>
    5b88:	003fad06 	br	5a40 <__alt_data_end+0xff005a40>
    5b8c:	d9c01117 	ldw	r7,68(sp)
    5b90:	3801bc26 	beq	r7,zero,6284 <_dtoa_r+0x1480>
    5b94:	10810cc4 	addi	r2,r2,1075
    5b98:	dd400a17 	ldw	r21,40(sp)
    5b9c:	dd000817 	ldw	r20,32(sp)
    5ba0:	003f0a06 	br	57cc <__alt_data_end+0xff0057cc>
    5ba4:	00800704 	movi	r2,28
    5ba8:	d9000817 	ldw	r4,32(sp)
    5bac:	a0a9883a 	add	r20,r20,r2
    5bb0:	b0ad883a 	add	r22,r22,r2
    5bb4:	2089883a 	add	r4,r4,r2
    5bb8:	d9000815 	stw	r4,32(sp)
    5bbc:	003f5106 	br	5904 <__alt_data_end+0xff005904>
    5bc0:	d8c00317 	ldw	r3,12(sp)
    5bc4:	b8c1fc0e 	bge	r23,r3,63b8 <_dtoa_r+0x15b4>
    5bc8:	0027883a 	mov	r19,zero
    5bcc:	b805883a 	mov	r2,r23
    5bd0:	003f3e06 	br	58cc <__alt_data_end+0xff0058cc>
    5bd4:	880b883a 	mov	r5,r17
    5bd8:	e009883a 	mov	r4,fp
    5bdc:	000f883a 	mov	r7,zero
    5be0:	01800284 	movi	r6,10
    5be4:	0007d640 	call	7d64 <__multadd>
    5be8:	d9000c17 	ldw	r4,48(sp)
    5bec:	1023883a 	mov	r17,r2
    5bf0:	0102040e 	bge	zero,r4,6404 <_dtoa_r+0x1600>
    5bf4:	d9000615 	stw	r4,24(sp)
    5bf8:	0500050e 	bge	zero,r20,5c10 <_dtoa_r+0xe0c>
    5bfc:	880b883a 	mov	r5,r17
    5c00:	a00d883a 	mov	r6,r20
    5c04:	e009883a 	mov	r4,fp
    5c08:	00084140 	call	8414 <__lshift>
    5c0c:	1023883a 	mov	r17,r2
    5c10:	9801241e 	bne	r19,zero,60a4 <_dtoa_r+0x12a0>
    5c14:	8829883a 	mov	r20,r17
    5c18:	d9000617 	ldw	r4,24(sp)
    5c1c:	dcc00717 	ldw	r19,28(sp)
    5c20:	9480004c 	andi	r18,r18,1
    5c24:	20bfffc4 	addi	r2,r4,-1
    5c28:	9885883a 	add	r2,r19,r2
    5c2c:	d8800415 	stw	r2,16(sp)
    5c30:	dc800615 	stw	r18,24(sp)
    5c34:	a80b883a 	mov	r5,r21
    5c38:	8009883a 	mov	r4,r16
    5c3c:	0004c040 	call	4c04 <quorem>
    5c40:	880b883a 	mov	r5,r17
    5c44:	8009883a 	mov	r4,r16
    5c48:	102f883a 	mov	r23,r2
    5c4c:	000855c0 	call	855c <__mcmp>
    5c50:	a80b883a 	mov	r5,r21
    5c54:	a00d883a 	mov	r6,r20
    5c58:	e009883a 	mov	r4,fp
    5c5c:	102d883a 	mov	r22,r2
    5c60:	00085bc0 	call	85bc <__mdiff>
    5c64:	1007883a 	mov	r3,r2
    5c68:	10800317 	ldw	r2,12(r2)
    5c6c:	bc800c04 	addi	r18,r23,48
    5c70:	180b883a 	mov	r5,r3
    5c74:	10004e1e 	bne	r2,zero,5db0 <_dtoa_r+0xfac>
    5c78:	8009883a 	mov	r4,r16
    5c7c:	d8c01615 	stw	r3,88(sp)
    5c80:	000855c0 	call	855c <__mcmp>
    5c84:	d8c01617 	ldw	r3,88(sp)
    5c88:	e009883a 	mov	r4,fp
    5c8c:	d8801615 	stw	r2,88(sp)
    5c90:	180b883a 	mov	r5,r3
    5c94:	0007d3c0 	call	7d3c <_Bfree>
    5c98:	d8801617 	ldw	r2,88(sp)
    5c9c:	1000041e 	bne	r2,zero,5cb0 <_dtoa_r+0xeac>
    5ca0:	d9800317 	ldw	r6,12(sp)
    5ca4:	3000021e 	bne	r6,zero,5cb0 <_dtoa_r+0xeac>
    5ca8:	d8c00617 	ldw	r3,24(sp)
    5cac:	18003726 	beq	r3,zero,5d8c <_dtoa_r+0xf88>
    5cb0:	b0002016 	blt	r22,zero,5d34 <_dtoa_r+0xf30>
    5cb4:	b000041e 	bne	r22,zero,5cc8 <_dtoa_r+0xec4>
    5cb8:	d9000317 	ldw	r4,12(sp)
    5cbc:	2000021e 	bne	r4,zero,5cc8 <_dtoa_r+0xec4>
    5cc0:	d8c00617 	ldw	r3,24(sp)
    5cc4:	18001b26 	beq	r3,zero,5d34 <_dtoa_r+0xf30>
    5cc8:	00810716 	blt	zero,r2,60e8 <_dtoa_r+0x12e4>
    5ccc:	d8c00417 	ldw	r3,16(sp)
    5cd0:	9d800044 	addi	r22,r19,1
    5cd4:	9c800005 	stb	r18,0(r19)
    5cd8:	b02f883a 	mov	r23,r22
    5cdc:	98c10626 	beq	r19,r3,60f8 <_dtoa_r+0x12f4>
    5ce0:	800b883a 	mov	r5,r16
    5ce4:	000f883a 	mov	r7,zero
    5ce8:	01800284 	movi	r6,10
    5cec:	e009883a 	mov	r4,fp
    5cf0:	0007d640 	call	7d64 <__multadd>
    5cf4:	1021883a 	mov	r16,r2
    5cf8:	000f883a 	mov	r7,zero
    5cfc:	01800284 	movi	r6,10
    5d00:	880b883a 	mov	r5,r17
    5d04:	e009883a 	mov	r4,fp
    5d08:	8d002526 	beq	r17,r20,5da0 <_dtoa_r+0xf9c>
    5d0c:	0007d640 	call	7d64 <__multadd>
    5d10:	a00b883a 	mov	r5,r20
    5d14:	000f883a 	mov	r7,zero
    5d18:	01800284 	movi	r6,10
    5d1c:	e009883a 	mov	r4,fp
    5d20:	1023883a 	mov	r17,r2
    5d24:	0007d640 	call	7d64 <__multadd>
    5d28:	1029883a 	mov	r20,r2
    5d2c:	b027883a 	mov	r19,r22
    5d30:	003fc006 	br	5c34 <__alt_data_end+0xff005c34>
    5d34:	9011883a 	mov	r8,r18
    5d38:	00800e0e 	bge	zero,r2,5d74 <_dtoa_r+0xf70>
    5d3c:	800b883a 	mov	r5,r16
    5d40:	01800044 	movi	r6,1
    5d44:	e009883a 	mov	r4,fp
    5d48:	da001715 	stw	r8,92(sp)
    5d4c:	00084140 	call	8414 <__lshift>
    5d50:	a80b883a 	mov	r5,r21
    5d54:	1009883a 	mov	r4,r2
    5d58:	1021883a 	mov	r16,r2
    5d5c:	000855c0 	call	855c <__mcmp>
    5d60:	da001717 	ldw	r8,92(sp)
    5d64:	0081960e 	bge	zero,r2,63c0 <_dtoa_r+0x15bc>
    5d68:	00800e44 	movi	r2,57
    5d6c:	40817026 	beq	r8,r2,6330 <_dtoa_r+0x152c>
    5d70:	ba000c44 	addi	r8,r23,49
    5d74:	8825883a 	mov	r18,r17
    5d78:	9dc00044 	addi	r23,r19,1
    5d7c:	9a000005 	stb	r8,0(r19)
    5d80:	a023883a 	mov	r17,r20
    5d84:	dc000915 	stw	r16,36(sp)
    5d88:	003f2406 	br	5a1c <__alt_data_end+0xff005a1c>
    5d8c:	00800e44 	movi	r2,57
    5d90:	9011883a 	mov	r8,r18
    5d94:	90816626 	beq	r18,r2,6330 <_dtoa_r+0x152c>
    5d98:	05bff516 	blt	zero,r22,5d70 <__alt_data_end+0xff005d70>
    5d9c:	003ff506 	br	5d74 <__alt_data_end+0xff005d74>
    5da0:	0007d640 	call	7d64 <__multadd>
    5da4:	1023883a 	mov	r17,r2
    5da8:	1029883a 	mov	r20,r2
    5dac:	003fdf06 	br	5d2c <__alt_data_end+0xff005d2c>
    5db0:	e009883a 	mov	r4,fp
    5db4:	0007d3c0 	call	7d3c <_Bfree>
    5db8:	00800044 	movi	r2,1
    5dbc:	003fbc06 	br	5cb0 <__alt_data_end+0xff005cb0>
    5dc0:	a80b883a 	mov	r5,r21
    5dc4:	8009883a 	mov	r4,r16
    5dc8:	000855c0 	call	855c <__mcmp>
    5dcc:	103edb0e 	bge	r2,zero,593c <__alt_data_end+0xff00593c>
    5dd0:	800b883a 	mov	r5,r16
    5dd4:	000f883a 	mov	r7,zero
    5dd8:	01800284 	movi	r6,10
    5ddc:	e009883a 	mov	r4,fp
    5de0:	0007d640 	call	7d64 <__multadd>
    5de4:	1021883a 	mov	r16,r2
    5de8:	d8800517 	ldw	r2,20(sp)
    5dec:	d8c00b17 	ldw	r3,44(sp)
    5df0:	10bfffc4 	addi	r2,r2,-1
    5df4:	d8800515 	stw	r2,20(sp)
    5df8:	183f761e 	bne	r3,zero,5bd4 <__alt_data_end+0xff005bd4>
    5dfc:	d9000c17 	ldw	r4,48(sp)
    5e00:	0101730e 	bge	zero,r4,63d0 <_dtoa_r+0x15cc>
    5e04:	d9000615 	stw	r4,24(sp)
    5e08:	003ed006 	br	594c <__alt_data_end+0xff00594c>
    5e0c:	00800084 	movi	r2,2
    5e10:	3081861e 	bne	r6,r2,642c <_dtoa_r+0x1628>
    5e14:	d8000b15 	stw	zero,44(sp)
    5e18:	003f3c06 	br	5b0c <__alt_data_end+0xff005b0c>
    5e1c:	dc000917 	ldw	r16,36(sp)
    5e20:	003e9206 	br	586c <__alt_data_end+0xff00586c>
    5e24:	d9c00317 	ldw	r7,12(sp)
    5e28:	00800084 	movi	r2,2
    5e2c:	11fec50e 	bge	r2,r7,5944 <__alt_data_end+0xff005944>
    5e30:	d9000617 	ldw	r4,24(sp)
    5e34:	20013c1e 	bne	r4,zero,6328 <_dtoa_r+0x1524>
    5e38:	a80b883a 	mov	r5,r21
    5e3c:	000f883a 	mov	r7,zero
    5e40:	01800144 	movi	r6,5
    5e44:	e009883a 	mov	r4,fp
    5e48:	0007d640 	call	7d64 <__multadd>
    5e4c:	100b883a 	mov	r5,r2
    5e50:	8009883a 	mov	r4,r16
    5e54:	102b883a 	mov	r21,r2
    5e58:	000855c0 	call	855c <__mcmp>
    5e5c:	dc000915 	stw	r16,36(sp)
    5e60:	00bf410e 	bge	zero,r2,5b68 <__alt_data_end+0xff005b68>
    5e64:	d9c00717 	ldw	r7,28(sp)
    5e68:	00800c44 	movi	r2,49
    5e6c:	38800005 	stb	r2,0(r7)
    5e70:	d8800517 	ldw	r2,20(sp)
    5e74:	3dc00044 	addi	r23,r7,1
    5e78:	10800044 	addi	r2,r2,1
    5e7c:	d8800515 	stw	r2,20(sp)
    5e80:	003f3d06 	br	5b78 <__alt_data_end+0xff005b78>
    5e84:	d9800517 	ldw	r6,20(sp)
    5e88:	d9c00717 	ldw	r7,28(sp)
    5e8c:	00800c44 	movi	r2,49
    5e90:	31800044 	addi	r6,r6,1
    5e94:	d9800515 	stw	r6,20(sp)
    5e98:	38800005 	stb	r2,0(r7)
    5e9c:	003edf06 	br	5a1c <__alt_data_end+0xff005a1c>
    5ea0:	d8000b15 	stw	zero,44(sp)
    5ea4:	003c9f06 	br	5124 <__alt_data_end+0xff005124>
    5ea8:	903e7e1e 	bne	r18,zero,58a4 <__alt_data_end+0xff0058a4>
    5eac:	00800434 	movhi	r2,16
    5eb0:	10bfffc4 	addi	r2,r2,-1
    5eb4:	9884703a 	and	r2,r19,r2
    5eb8:	1000ea1e 	bne	r2,zero,6264 <_dtoa_r+0x1460>
    5ebc:	9cdffc2c 	andhi	r19,r19,32752
    5ec0:	9800e826 	beq	r19,zero,6264 <_dtoa_r+0x1460>
    5ec4:	d9c00817 	ldw	r7,32(sp)
    5ec8:	b5800044 	addi	r22,r22,1
    5ecc:	04c00044 	movi	r19,1
    5ed0:	39c00044 	addi	r7,r7,1
    5ed4:	d9c00815 	stw	r7,32(sp)
    5ed8:	d8800d17 	ldw	r2,52(sp)
    5edc:	103e721e 	bne	r2,zero,58a8 <__alt_data_end+0xff0058a8>
    5ee0:	00800044 	movi	r2,1
    5ee4:	003e7906 	br	58cc <__alt_data_end+0xff0058cc>
    5ee8:	8009883a 	mov	r4,r16
    5eec:	000e4e00 	call	e4e0 <__floatsidf>
    5ef0:	d9800f17 	ldw	r6,60(sp)
    5ef4:	d9c01017 	ldw	r7,64(sp)
    5ef8:	1009883a 	mov	r4,r2
    5efc:	180b883a 	mov	r5,r3
    5f00:	000d44c0 	call	d44c <__muldf3>
    5f04:	000d883a 	mov	r6,zero
    5f08:	01d00734 	movhi	r7,16412
    5f0c:	1009883a 	mov	r4,r2
    5f10:	180b883a 	mov	r5,r3
    5f14:	000c0600 	call	c060 <__adddf3>
    5f18:	047f3034 	movhi	r17,64704
    5f1c:	1021883a 	mov	r16,r2
    5f20:	1c63883a 	add	r17,r3,r17
    5f24:	d9000f17 	ldw	r4,60(sp)
    5f28:	d9401017 	ldw	r5,64(sp)
    5f2c:	000d883a 	mov	r6,zero
    5f30:	01d00534 	movhi	r7,16404
    5f34:	000db640 	call	db64 <__subdf3>
    5f38:	800d883a 	mov	r6,r16
    5f3c:	880f883a 	mov	r7,r17
    5f40:	1009883a 	mov	r4,r2
    5f44:	180b883a 	mov	r5,r3
    5f48:	102b883a 	mov	r21,r2
    5f4c:	1829883a 	mov	r20,r3
    5f50:	000d27c0 	call	d27c <__gedf2>
    5f54:	00806c16 	blt	zero,r2,6108 <_dtoa_r+0x1304>
    5f58:	89e0003c 	xorhi	r7,r17,32768
    5f5c:	800d883a 	mov	r6,r16
    5f60:	a809883a 	mov	r4,r21
    5f64:	a00b883a 	mov	r5,r20
    5f68:	000d3580 	call	d358 <__ledf2>
    5f6c:	103d7e0e 	bge	r2,zero,5568 <__alt_data_end+0xff005568>
    5f70:	002b883a 	mov	r21,zero
    5f74:	0023883a 	mov	r17,zero
    5f78:	003efb06 	br	5b68 <__alt_data_end+0xff005b68>
    5f7c:	d8800717 	ldw	r2,28(sp)
    5f80:	003bd006 	br	4ec4 <__alt_data_end+0xff004ec4>
    5f84:	d9000a17 	ldw	r4,40(sp)
    5f88:	d9800d17 	ldw	r6,52(sp)
    5f8c:	dd400a15 	stw	r21,40(sp)
    5f90:	a905c83a 	sub	r2,r21,r4
    5f94:	308d883a 	add	r6,r6,r2
    5f98:	d9800d15 	stw	r6,52(sp)
    5f9c:	002b883a 	mov	r21,zero
    5fa0:	003e0606 	br	57bc <__alt_data_end+0xff0057bc>
    5fa4:	9023883a 	mov	r17,r18
    5fa8:	9829883a 	mov	r20,r19
    5fac:	04000084 	movi	r16,2
    5fb0:	003c9206 	br	51fc <__alt_data_end+0xff0051fc>
    5fb4:	04000044 	movi	r16,1
    5fb8:	dc000c15 	stw	r16,48(sp)
    5fbc:	dc000615 	stw	r16,24(sp)
    5fc0:	dc002215 	stw	r16,136(sp)
    5fc4:	e0001115 	stw	zero,68(fp)
    5fc8:	000b883a 	mov	r5,zero
    5fcc:	003c6906 	br	5174 <__alt_data_end+0xff005174>
    5fd0:	3021883a 	mov	r16,r6
    5fd4:	003ffb06 	br	5fc4 <__alt_data_end+0xff005fc4>
    5fd8:	1000021e 	bne	r2,zero,5fe4 <_dtoa_r+0x11e0>
    5fdc:	4200004c 	andi	r8,r8,1
    5fe0:	403e7d1e 	bne	r8,zero,59d8 <__alt_data_end+0xff0059d8>
    5fe4:	01000c04 	movi	r4,48
    5fe8:	00000106 	br	5ff0 <_dtoa_r+0x11ec>
    5fec:	102f883a 	mov	r23,r2
    5ff0:	b8bfffc4 	addi	r2,r23,-1
    5ff4:	10c00007 	ldb	r3,0(r2)
    5ff8:	193ffc26 	beq	r3,r4,5fec <__alt_data_end+0xff005fec>
    5ffc:	003e8706 	br	5a1c <__alt_data_end+0xff005a1c>
    6000:	d8800517 	ldw	r2,20(sp)
    6004:	00a3c83a 	sub	r17,zero,r2
    6008:	8800a426 	beq	r17,zero,629c <_dtoa_r+0x1498>
    600c:	888003cc 	andi	r2,r17,15
    6010:	100490fa 	slli	r2,r2,3
    6014:	00c00074 	movhi	r3,1
    6018:	18c1fe04 	addi	r3,r3,2040
    601c:	1885883a 	add	r2,r3,r2
    6020:	11800017 	ldw	r6,0(r2)
    6024:	11c00117 	ldw	r7,4(r2)
    6028:	9009883a 	mov	r4,r18
    602c:	980b883a 	mov	r5,r19
    6030:	8823d13a 	srai	r17,r17,4
    6034:	000d44c0 	call	d44c <__muldf3>
    6038:	d8800f15 	stw	r2,60(sp)
    603c:	d8c01015 	stw	r3,64(sp)
    6040:	8800e826 	beq	r17,zero,63e4 <_dtoa_r+0x15e0>
    6044:	05000074 	movhi	r20,1
    6048:	a501f404 	addi	r20,r20,2000
    604c:	04000084 	movi	r16,2
    6050:	8980004c 	andi	r6,r17,1
    6054:	1009883a 	mov	r4,r2
    6058:	8823d07a 	srai	r17,r17,1
    605c:	180b883a 	mov	r5,r3
    6060:	30000426 	beq	r6,zero,6074 <_dtoa_r+0x1270>
    6064:	a1800017 	ldw	r6,0(r20)
    6068:	a1c00117 	ldw	r7,4(r20)
    606c:	84000044 	addi	r16,r16,1
    6070:	000d44c0 	call	d44c <__muldf3>
    6074:	a5000204 	addi	r20,r20,8
    6078:	883ff51e 	bne	r17,zero,6050 <__alt_data_end+0xff006050>
    607c:	d8800f15 	stw	r2,60(sp)
    6080:	d8c01015 	stw	r3,64(sp)
    6084:	003c7606 	br	5260 <__alt_data_end+0xff005260>
    6088:	00c00c04 	movi	r3,48
    608c:	10c00005 	stb	r3,0(r2)
    6090:	d8c00517 	ldw	r3,20(sp)
    6094:	bd3fffc3 	ldbu	r20,-1(r23)
    6098:	18c00044 	addi	r3,r3,1
    609c:	d8c00515 	stw	r3,20(sp)
    60a0:	003db906 	br	5788 <__alt_data_end+0xff005788>
    60a4:	89400117 	ldw	r5,4(r17)
    60a8:	e009883a 	mov	r4,fp
    60ac:	0007c940 	call	7c94 <_Balloc>
    60b0:	89800417 	ldw	r6,16(r17)
    60b4:	89400304 	addi	r5,r17,12
    60b8:	11000304 	addi	r4,r2,12
    60bc:	31800084 	addi	r6,r6,2
    60c0:	318d883a 	add	r6,r6,r6
    60c4:	318d883a 	add	r6,r6,r6
    60c8:	1027883a 	mov	r19,r2
    60cc:	00078c80 	call	78c8 <memcpy>
    60d0:	01800044 	movi	r6,1
    60d4:	980b883a 	mov	r5,r19
    60d8:	e009883a 	mov	r4,fp
    60dc:	00084140 	call	8414 <__lshift>
    60e0:	1029883a 	mov	r20,r2
    60e4:	003ecc06 	br	5c18 <__alt_data_end+0xff005c18>
    60e8:	00800e44 	movi	r2,57
    60ec:	90809026 	beq	r18,r2,6330 <_dtoa_r+0x152c>
    60f0:	92000044 	addi	r8,r18,1
    60f4:	003f1f06 	br	5d74 <__alt_data_end+0xff005d74>
    60f8:	9011883a 	mov	r8,r18
    60fc:	8825883a 	mov	r18,r17
    6100:	a023883a 	mov	r17,r20
    6104:	003e2906 	br	59ac <__alt_data_end+0xff0059ac>
    6108:	002b883a 	mov	r21,zero
    610c:	0023883a 	mov	r17,zero
    6110:	003f5406 	br	5e64 <__alt_data_end+0xff005e64>
    6114:	61bfffc4 	addi	r6,r12,-1
    6118:	300490fa 	slli	r2,r6,3
    611c:	00c00074 	movhi	r3,1
    6120:	18c1fe04 	addi	r3,r3,2040
    6124:	1885883a 	add	r2,r3,r2
    6128:	11000017 	ldw	r4,0(r2)
    612c:	11400117 	ldw	r5,4(r2)
    6130:	d8800717 	ldw	r2,28(sp)
    6134:	880f883a 	mov	r7,r17
    6138:	d9801215 	stw	r6,72(sp)
    613c:	800d883a 	mov	r6,r16
    6140:	db001615 	stw	r12,88(sp)
    6144:	15c00044 	addi	r23,r2,1
    6148:	000d44c0 	call	d44c <__muldf3>
    614c:	d9401017 	ldw	r5,64(sp)
    6150:	d9000f17 	ldw	r4,60(sp)
    6154:	d8c01515 	stw	r3,84(sp)
    6158:	d8801415 	stw	r2,80(sp)
    615c:	000e4600 	call	e460 <__fixdfsi>
    6160:	1009883a 	mov	r4,r2
    6164:	1021883a 	mov	r16,r2
    6168:	000e4e00 	call	e4e0 <__floatsidf>
    616c:	d9000f17 	ldw	r4,60(sp)
    6170:	d9401017 	ldw	r5,64(sp)
    6174:	100d883a 	mov	r6,r2
    6178:	180f883a 	mov	r7,r3
    617c:	000db640 	call	db64 <__subdf3>
    6180:	1829883a 	mov	r20,r3
    6184:	d8c00717 	ldw	r3,28(sp)
    6188:	84000c04 	addi	r16,r16,48
    618c:	1023883a 	mov	r17,r2
    6190:	1c000005 	stb	r16,0(r3)
    6194:	db001617 	ldw	r12,88(sp)
    6198:	00800044 	movi	r2,1
    619c:	60802226 	beq	r12,r2,6228 <_dtoa_r+0x1424>
    61a0:	d9c00717 	ldw	r7,28(sp)
    61a4:	8805883a 	mov	r2,r17
    61a8:	b82b883a 	mov	r21,r23
    61ac:	3b19883a 	add	r12,r7,r12
    61b0:	6023883a 	mov	r17,r12
    61b4:	a007883a 	mov	r3,r20
    61b8:	dc800f15 	stw	r18,60(sp)
    61bc:	000d883a 	mov	r6,zero
    61c0:	01d00934 	movhi	r7,16420
    61c4:	1009883a 	mov	r4,r2
    61c8:	180b883a 	mov	r5,r3
    61cc:	000d44c0 	call	d44c <__muldf3>
    61d0:	180b883a 	mov	r5,r3
    61d4:	1009883a 	mov	r4,r2
    61d8:	1829883a 	mov	r20,r3
    61dc:	1025883a 	mov	r18,r2
    61e0:	000e4600 	call	e460 <__fixdfsi>
    61e4:	1009883a 	mov	r4,r2
    61e8:	1021883a 	mov	r16,r2
    61ec:	000e4e00 	call	e4e0 <__floatsidf>
    61f0:	100d883a 	mov	r6,r2
    61f4:	180f883a 	mov	r7,r3
    61f8:	9009883a 	mov	r4,r18
    61fc:	a00b883a 	mov	r5,r20
    6200:	84000c04 	addi	r16,r16,48
    6204:	000db640 	call	db64 <__subdf3>
    6208:	ad400044 	addi	r21,r21,1
    620c:	ac3fffc5 	stb	r16,-1(r21)
    6210:	ac7fea1e 	bne	r21,r17,61bc <__alt_data_end+0xff0061bc>
    6214:	1023883a 	mov	r17,r2
    6218:	d8801217 	ldw	r2,72(sp)
    621c:	dc800f17 	ldw	r18,60(sp)
    6220:	1829883a 	mov	r20,r3
    6224:	b8af883a 	add	r23,r23,r2
    6228:	d9001417 	ldw	r4,80(sp)
    622c:	d9401517 	ldw	r5,84(sp)
    6230:	000d883a 	mov	r6,zero
    6234:	01cff834 	movhi	r7,16352
    6238:	000c0600 	call	c060 <__adddf3>
    623c:	880d883a 	mov	r6,r17
    6240:	a00f883a 	mov	r7,r20
    6244:	1009883a 	mov	r4,r2
    6248:	180b883a 	mov	r5,r3
    624c:	000d3580 	call	d358 <__ledf2>
    6250:	10003e0e 	bge	r2,zero,634c <_dtoa_r+0x1548>
    6254:	d9001317 	ldw	r4,76(sp)
    6258:	bd3fffc3 	ldbu	r20,-1(r23)
    625c:	d9000515 	stw	r4,20(sp)
    6260:	003d3b06 	br	5750 <__alt_data_end+0xff005750>
    6264:	0027883a 	mov	r19,zero
    6268:	003f1b06 	br	5ed8 <__alt_data_end+0xff005ed8>
    626c:	d8800817 	ldw	r2,32(sp)
    6270:	11e9c83a 	sub	r20,r2,r7
    6274:	0005883a 	mov	r2,zero
    6278:	003d5406 	br	57cc <__alt_data_end+0xff0057cc>
    627c:	00800044 	movi	r2,1
    6280:	003dc706 	br	59a0 <__alt_data_end+0xff0059a0>
    6284:	d8c00217 	ldw	r3,8(sp)
    6288:	00800d84 	movi	r2,54
    628c:	dd400a17 	ldw	r21,40(sp)
    6290:	10c5c83a 	sub	r2,r2,r3
    6294:	dd000817 	ldw	r20,32(sp)
    6298:	003d4c06 	br	57cc <__alt_data_end+0xff0057cc>
    629c:	dc800f15 	stw	r18,60(sp)
    62a0:	dcc01015 	stw	r19,64(sp)
    62a4:	04000084 	movi	r16,2
    62a8:	003bed06 	br	5260 <__alt_data_end+0xff005260>
    62ac:	d9000617 	ldw	r4,24(sp)
    62b0:	203f0d26 	beq	r4,zero,5ee8 <__alt_data_end+0xff005ee8>
    62b4:	d9800c17 	ldw	r6,48(sp)
    62b8:	01bcab0e 	bge	zero,r6,5568 <__alt_data_end+0xff005568>
    62bc:	d9401017 	ldw	r5,64(sp)
    62c0:	d9000f17 	ldw	r4,60(sp)
    62c4:	000d883a 	mov	r6,zero
    62c8:	01d00934 	movhi	r7,16420
    62cc:	000d44c0 	call	d44c <__muldf3>
    62d0:	81000044 	addi	r4,r16,1
    62d4:	d8800f15 	stw	r2,60(sp)
    62d8:	d8c01015 	stw	r3,64(sp)
    62dc:	000e4e00 	call	e4e0 <__floatsidf>
    62e0:	d9800f17 	ldw	r6,60(sp)
    62e4:	d9c01017 	ldw	r7,64(sp)
    62e8:	1009883a 	mov	r4,r2
    62ec:	180b883a 	mov	r5,r3
    62f0:	000d44c0 	call	d44c <__muldf3>
    62f4:	01d00734 	movhi	r7,16412
    62f8:	000d883a 	mov	r6,zero
    62fc:	1009883a 	mov	r4,r2
    6300:	180b883a 	mov	r5,r3
    6304:	000c0600 	call	c060 <__adddf3>
    6308:	d9c00517 	ldw	r7,20(sp)
    630c:	047f3034 	movhi	r17,64704
    6310:	1021883a 	mov	r16,r2
    6314:	39ffffc4 	addi	r7,r7,-1
    6318:	d9c01315 	stw	r7,76(sp)
    631c:	1c63883a 	add	r17,r3,r17
    6320:	db000c17 	ldw	r12,48(sp)
    6324:	003bea06 	br	52d0 <__alt_data_end+0xff0052d0>
    6328:	dc000915 	stw	r16,36(sp)
    632c:	003e0e06 	br	5b68 <__alt_data_end+0xff005b68>
    6330:	01000e44 	movi	r4,57
    6334:	8825883a 	mov	r18,r17
    6338:	9dc00044 	addi	r23,r19,1
    633c:	99000005 	stb	r4,0(r19)
    6340:	a023883a 	mov	r17,r20
    6344:	dc000915 	stw	r16,36(sp)
    6348:	003da406 	br	59dc <__alt_data_end+0xff0059dc>
    634c:	d9801417 	ldw	r6,80(sp)
    6350:	d9c01517 	ldw	r7,84(sp)
    6354:	0009883a 	mov	r4,zero
    6358:	014ff834 	movhi	r5,16352
    635c:	000db640 	call	db64 <__subdf3>
    6360:	880d883a 	mov	r6,r17
    6364:	a00f883a 	mov	r7,r20
    6368:	1009883a 	mov	r4,r2
    636c:	180b883a 	mov	r5,r3
    6370:	000d27c0 	call	d27c <__gedf2>
    6374:	00bc7c0e 	bge	zero,r2,5568 <__alt_data_end+0xff005568>
    6378:	01000c04 	movi	r4,48
    637c:	00000106 	br	6384 <_dtoa_r+0x1580>
    6380:	102f883a 	mov	r23,r2
    6384:	b8bfffc4 	addi	r2,r23,-1
    6388:	10c00007 	ldb	r3,0(r2)
    638c:	193ffc26 	beq	r3,r4,6380 <__alt_data_end+0xff006380>
    6390:	d9801317 	ldw	r6,76(sp)
    6394:	d9800515 	stw	r6,20(sp)
    6398:	003c4406 	br	54ac <__alt_data_end+0xff0054ac>
    639c:	d9801317 	ldw	r6,76(sp)
    63a0:	d9800515 	stw	r6,20(sp)
    63a4:	003cea06 	br	5750 <__alt_data_end+0xff005750>
    63a8:	dd800f17 	ldw	r22,60(sp)
    63ac:	dcc01017 	ldw	r19,64(sp)
    63b0:	dc801217 	ldw	r18,72(sp)
    63b4:	003c6c06 	br	5568 <__alt_data_end+0xff005568>
    63b8:	903e031e 	bne	r18,zero,5bc8 <__alt_data_end+0xff005bc8>
    63bc:	003ebb06 	br	5eac <__alt_data_end+0xff005eac>
    63c0:	103e6c1e 	bne	r2,zero,5d74 <__alt_data_end+0xff005d74>
    63c4:	4080004c 	andi	r2,r8,1
    63c8:	103e6a26 	beq	r2,zero,5d74 <__alt_data_end+0xff005d74>
    63cc:	003e6606 	br	5d68 <__alt_data_end+0xff005d68>
    63d0:	d8c00317 	ldw	r3,12(sp)
    63d4:	00800084 	movi	r2,2
    63d8:	10c02916 	blt	r2,r3,6480 <_dtoa_r+0x167c>
    63dc:	d9000c17 	ldw	r4,48(sp)
    63e0:	003e8806 	br	5e04 <__alt_data_end+0xff005e04>
    63e4:	04000084 	movi	r16,2
    63e8:	003b9d06 	br	5260 <__alt_data_end+0xff005260>
    63ec:	d9001317 	ldw	r4,76(sp)
    63f0:	d9000515 	stw	r4,20(sp)
    63f4:	003cd606 	br	5750 <__alt_data_end+0xff005750>
    63f8:	d8801317 	ldw	r2,76(sp)
    63fc:	d8800515 	stw	r2,20(sp)
    6400:	003c2a06 	br	54ac <__alt_data_end+0xff0054ac>
    6404:	d9800317 	ldw	r6,12(sp)
    6408:	00800084 	movi	r2,2
    640c:	11801516 	blt	r2,r6,6464 <_dtoa_r+0x1660>
    6410:	d9c00c17 	ldw	r7,48(sp)
    6414:	d9c00615 	stw	r7,24(sp)
    6418:	003df706 	br	5bf8 <__alt_data_end+0xff005bf8>
    641c:	193d3926 	beq	r3,r4,5904 <__alt_data_end+0xff005904>
    6420:	00c00f04 	movi	r3,60
    6424:	1885c83a 	sub	r2,r3,r2
    6428:	003ddf06 	br	5ba8 <__alt_data_end+0xff005ba8>
    642c:	e009883a 	mov	r4,fp
    6430:	e0001115 	stw	zero,68(fp)
    6434:	000b883a 	mov	r5,zero
    6438:	0007c940 	call	7c94 <_Balloc>
    643c:	d8800715 	stw	r2,28(sp)
    6440:	d8c00717 	ldw	r3,28(sp)
    6444:	00bfffc4 	movi	r2,-1
    6448:	01000044 	movi	r4,1
    644c:	d8800c15 	stw	r2,48(sp)
    6450:	e0c01015 	stw	r3,64(fp)
    6454:	d9000b15 	stw	r4,44(sp)
    6458:	d8800615 	stw	r2,24(sp)
    645c:	d8002215 	stw	zero,136(sp)
    6460:	003c4106 	br	5568 <__alt_data_end+0xff005568>
    6464:	d8c00c17 	ldw	r3,48(sp)
    6468:	d8c00615 	stw	r3,24(sp)
    646c:	003e7006 	br	5e30 <__alt_data_end+0xff005e30>
    6470:	04400044 	movi	r17,1
    6474:	003b2006 	br	50f8 <__alt_data_end+0xff0050f8>
    6478:	000b883a 	mov	r5,zero
    647c:	003b3d06 	br	5174 <__alt_data_end+0xff005174>
    6480:	d8800c17 	ldw	r2,48(sp)
    6484:	d8800615 	stw	r2,24(sp)
    6488:	003e6906 	br	5e30 <__alt_data_end+0xff005e30>

0000648c <__sflush_r>:
    648c:	2880030b 	ldhu	r2,12(r5)
    6490:	defffb04 	addi	sp,sp,-20
    6494:	dcc00315 	stw	r19,12(sp)
    6498:	dc400115 	stw	r17,4(sp)
    649c:	dfc00415 	stw	ra,16(sp)
    64a0:	dc800215 	stw	r18,8(sp)
    64a4:	dc000015 	stw	r16,0(sp)
    64a8:	10c0020c 	andi	r3,r2,8
    64ac:	2823883a 	mov	r17,r5
    64b0:	2027883a 	mov	r19,r4
    64b4:	1800311e 	bne	r3,zero,657c <__sflush_r+0xf0>
    64b8:	28c00117 	ldw	r3,4(r5)
    64bc:	10820014 	ori	r2,r2,2048
    64c0:	2880030d 	sth	r2,12(r5)
    64c4:	00c04b0e 	bge	zero,r3,65f4 <__sflush_r+0x168>
    64c8:	8a000a17 	ldw	r8,40(r17)
    64cc:	40002326 	beq	r8,zero,655c <__sflush_r+0xd0>
    64d0:	9c000017 	ldw	r16,0(r19)
    64d4:	10c4000c 	andi	r3,r2,4096
    64d8:	98000015 	stw	zero,0(r19)
    64dc:	18004826 	beq	r3,zero,6600 <__sflush_r+0x174>
    64e0:	89801417 	ldw	r6,80(r17)
    64e4:	10c0010c 	andi	r3,r2,4
    64e8:	18000626 	beq	r3,zero,6504 <__sflush_r+0x78>
    64ec:	88c00117 	ldw	r3,4(r17)
    64f0:	88800c17 	ldw	r2,48(r17)
    64f4:	30cdc83a 	sub	r6,r6,r3
    64f8:	10000226 	beq	r2,zero,6504 <__sflush_r+0x78>
    64fc:	88800f17 	ldw	r2,60(r17)
    6500:	308dc83a 	sub	r6,r6,r2
    6504:	89400717 	ldw	r5,28(r17)
    6508:	000f883a 	mov	r7,zero
    650c:	9809883a 	mov	r4,r19
    6510:	403ee83a 	callr	r8
    6514:	00ffffc4 	movi	r3,-1
    6518:	10c04426 	beq	r2,r3,662c <__sflush_r+0x1a0>
    651c:	88c0030b 	ldhu	r3,12(r17)
    6520:	89000417 	ldw	r4,16(r17)
    6524:	88000115 	stw	zero,4(r17)
    6528:	197dffcc 	andi	r5,r3,63487
    652c:	8940030d 	sth	r5,12(r17)
    6530:	89000015 	stw	r4,0(r17)
    6534:	18c4000c 	andi	r3,r3,4096
    6538:	18002c1e 	bne	r3,zero,65ec <__sflush_r+0x160>
    653c:	89400c17 	ldw	r5,48(r17)
    6540:	9c000015 	stw	r16,0(r19)
    6544:	28000526 	beq	r5,zero,655c <__sflush_r+0xd0>
    6548:	88801004 	addi	r2,r17,64
    654c:	28800226 	beq	r5,r2,6558 <__sflush_r+0xcc>
    6550:	9809883a 	mov	r4,r19
    6554:	0006bf80 	call	6bf8 <_free_r>
    6558:	88000c15 	stw	zero,48(r17)
    655c:	0005883a 	mov	r2,zero
    6560:	dfc00417 	ldw	ra,16(sp)
    6564:	dcc00317 	ldw	r19,12(sp)
    6568:	dc800217 	ldw	r18,8(sp)
    656c:	dc400117 	ldw	r17,4(sp)
    6570:	dc000017 	ldw	r16,0(sp)
    6574:	dec00504 	addi	sp,sp,20
    6578:	f800283a 	ret
    657c:	2c800417 	ldw	r18,16(r5)
    6580:	903ff626 	beq	r18,zero,655c <__alt_data_end+0xff00655c>
    6584:	2c000017 	ldw	r16,0(r5)
    6588:	108000cc 	andi	r2,r2,3
    658c:	2c800015 	stw	r18,0(r5)
    6590:	84a1c83a 	sub	r16,r16,r18
    6594:	1000131e 	bne	r2,zero,65e4 <__sflush_r+0x158>
    6598:	28800517 	ldw	r2,20(r5)
    659c:	88800215 	stw	r2,8(r17)
    65a0:	04000316 	blt	zero,r16,65b0 <__sflush_r+0x124>
    65a4:	003fed06 	br	655c <__alt_data_end+0xff00655c>
    65a8:	90a5883a 	add	r18,r18,r2
    65ac:	043feb0e 	bge	zero,r16,655c <__alt_data_end+0xff00655c>
    65b0:	88800917 	ldw	r2,36(r17)
    65b4:	89400717 	ldw	r5,28(r17)
    65b8:	800f883a 	mov	r7,r16
    65bc:	900d883a 	mov	r6,r18
    65c0:	9809883a 	mov	r4,r19
    65c4:	103ee83a 	callr	r2
    65c8:	80a1c83a 	sub	r16,r16,r2
    65cc:	00bff616 	blt	zero,r2,65a8 <__alt_data_end+0xff0065a8>
    65d0:	88c0030b 	ldhu	r3,12(r17)
    65d4:	00bfffc4 	movi	r2,-1
    65d8:	18c01014 	ori	r3,r3,64
    65dc:	88c0030d 	sth	r3,12(r17)
    65e0:	003fdf06 	br	6560 <__alt_data_end+0xff006560>
    65e4:	0005883a 	mov	r2,zero
    65e8:	003fec06 	br	659c <__alt_data_end+0xff00659c>
    65ec:	88801415 	stw	r2,80(r17)
    65f0:	003fd206 	br	653c <__alt_data_end+0xff00653c>
    65f4:	28c00f17 	ldw	r3,60(r5)
    65f8:	00ffb316 	blt	zero,r3,64c8 <__alt_data_end+0xff0064c8>
    65fc:	003fd706 	br	655c <__alt_data_end+0xff00655c>
    6600:	89400717 	ldw	r5,28(r17)
    6604:	000d883a 	mov	r6,zero
    6608:	01c00044 	movi	r7,1
    660c:	9809883a 	mov	r4,r19
    6610:	403ee83a 	callr	r8
    6614:	100d883a 	mov	r6,r2
    6618:	00bfffc4 	movi	r2,-1
    661c:	30801426 	beq	r6,r2,6670 <__sflush_r+0x1e4>
    6620:	8880030b 	ldhu	r2,12(r17)
    6624:	8a000a17 	ldw	r8,40(r17)
    6628:	003fae06 	br	64e4 <__alt_data_end+0xff0064e4>
    662c:	98c00017 	ldw	r3,0(r19)
    6630:	183fba26 	beq	r3,zero,651c <__alt_data_end+0xff00651c>
    6634:	01000744 	movi	r4,29
    6638:	19000626 	beq	r3,r4,6654 <__sflush_r+0x1c8>
    663c:	01000584 	movi	r4,22
    6640:	19000426 	beq	r3,r4,6654 <__sflush_r+0x1c8>
    6644:	88c0030b 	ldhu	r3,12(r17)
    6648:	18c01014 	ori	r3,r3,64
    664c:	88c0030d 	sth	r3,12(r17)
    6650:	003fc306 	br	6560 <__alt_data_end+0xff006560>
    6654:	8880030b 	ldhu	r2,12(r17)
    6658:	88c00417 	ldw	r3,16(r17)
    665c:	88000115 	stw	zero,4(r17)
    6660:	10bdffcc 	andi	r2,r2,63487
    6664:	8880030d 	sth	r2,12(r17)
    6668:	88c00015 	stw	r3,0(r17)
    666c:	003fb306 	br	653c <__alt_data_end+0xff00653c>
    6670:	98800017 	ldw	r2,0(r19)
    6674:	103fea26 	beq	r2,zero,6620 <__alt_data_end+0xff006620>
    6678:	00c00744 	movi	r3,29
    667c:	10c00226 	beq	r2,r3,6688 <__sflush_r+0x1fc>
    6680:	00c00584 	movi	r3,22
    6684:	10c0031e 	bne	r2,r3,6694 <__sflush_r+0x208>
    6688:	9c000015 	stw	r16,0(r19)
    668c:	0005883a 	mov	r2,zero
    6690:	003fb306 	br	6560 <__alt_data_end+0xff006560>
    6694:	88c0030b 	ldhu	r3,12(r17)
    6698:	3005883a 	mov	r2,r6
    669c:	18c01014 	ori	r3,r3,64
    66a0:	88c0030d 	sth	r3,12(r17)
    66a4:	003fae06 	br	6560 <__alt_data_end+0xff006560>

000066a8 <_fflush_r>:
    66a8:	defffd04 	addi	sp,sp,-12
    66ac:	dc000115 	stw	r16,4(sp)
    66b0:	dfc00215 	stw	ra,8(sp)
    66b4:	2021883a 	mov	r16,r4
    66b8:	20000226 	beq	r4,zero,66c4 <_fflush_r+0x1c>
    66bc:	20800e17 	ldw	r2,56(r4)
    66c0:	10000c26 	beq	r2,zero,66f4 <_fflush_r+0x4c>
    66c4:	2880030f 	ldh	r2,12(r5)
    66c8:	1000051e 	bne	r2,zero,66e0 <_fflush_r+0x38>
    66cc:	0005883a 	mov	r2,zero
    66d0:	dfc00217 	ldw	ra,8(sp)
    66d4:	dc000117 	ldw	r16,4(sp)
    66d8:	dec00304 	addi	sp,sp,12
    66dc:	f800283a 	ret
    66e0:	8009883a 	mov	r4,r16
    66e4:	dfc00217 	ldw	ra,8(sp)
    66e8:	dc000117 	ldw	r16,4(sp)
    66ec:	dec00304 	addi	sp,sp,12
    66f0:	000648c1 	jmpi	648c <__sflush_r>
    66f4:	d9400015 	stw	r5,0(sp)
    66f8:	0006a840 	call	6a84 <__sinit>
    66fc:	d9400017 	ldw	r5,0(sp)
    6700:	003ff006 	br	66c4 <__alt_data_end+0xff0066c4>

00006704 <fflush>:
    6704:	20000526 	beq	r4,zero,671c <fflush+0x18>
    6708:	00800074 	movhi	r2,1
    670c:	10892f04 	addi	r2,r2,9404
    6710:	200b883a 	mov	r5,r4
    6714:	11000017 	ldw	r4,0(r2)
    6718:	00066a81 	jmpi	66a8 <_fflush_r>
    671c:	00800074 	movhi	r2,1
    6720:	10892e04 	addi	r2,r2,9400
    6724:	11000017 	ldw	r4,0(r2)
    6728:	01400034 	movhi	r5,0
    672c:	2959aa04 	addi	r5,r5,26280
    6730:	00074881 	jmpi	7488 <_fwalk_reent>

00006734 <__fp_unlock>:
    6734:	0005883a 	mov	r2,zero
    6738:	f800283a 	ret

0000673c <_cleanup_r>:
    673c:	01400074 	movhi	r5,1
    6740:	296b1004 	addi	r5,r5,-21440
    6744:	00074881 	jmpi	7488 <_fwalk_reent>

00006748 <__sinit.part.1>:
    6748:	defff704 	addi	sp,sp,-36
    674c:	00c00034 	movhi	r3,0
    6750:	dfc00815 	stw	ra,32(sp)
    6754:	ddc00715 	stw	r23,28(sp)
    6758:	dd800615 	stw	r22,24(sp)
    675c:	dd400515 	stw	r21,20(sp)
    6760:	dd000415 	stw	r20,16(sp)
    6764:	dcc00315 	stw	r19,12(sp)
    6768:	dc800215 	stw	r18,8(sp)
    676c:	dc400115 	stw	r17,4(sp)
    6770:	dc000015 	stw	r16,0(sp)
    6774:	18d9cf04 	addi	r3,r3,26428
    6778:	24000117 	ldw	r16,4(r4)
    677c:	20c00f15 	stw	r3,60(r4)
    6780:	2080bb04 	addi	r2,r4,748
    6784:	00c000c4 	movi	r3,3
    6788:	20c0b915 	stw	r3,740(r4)
    678c:	2080ba15 	stw	r2,744(r4)
    6790:	2000b815 	stw	zero,736(r4)
    6794:	05c00204 	movi	r23,8
    6798:	00800104 	movi	r2,4
    679c:	2025883a 	mov	r18,r4
    67a0:	b80d883a 	mov	r6,r23
    67a4:	81001704 	addi	r4,r16,92
    67a8:	000b883a 	mov	r5,zero
    67ac:	80000015 	stw	zero,0(r16)
    67b0:	80000115 	stw	zero,4(r16)
    67b4:	80000215 	stw	zero,8(r16)
    67b8:	8080030d 	sth	r2,12(r16)
    67bc:	80001915 	stw	zero,100(r16)
    67c0:	8000038d 	sth	zero,14(r16)
    67c4:	80000415 	stw	zero,16(r16)
    67c8:	80000515 	stw	zero,20(r16)
    67cc:	80000615 	stw	zero,24(r16)
    67d0:	0007b6c0 	call	7b6c <memset>
    67d4:	05800074 	movhi	r22,1
    67d8:	94400217 	ldw	r17,8(r18)
    67dc:	05400074 	movhi	r21,1
    67e0:	05000074 	movhi	r20,1
    67e4:	04c00074 	movhi	r19,1
    67e8:	b5a49a04 	addi	r22,r22,-28056
    67ec:	ad64b104 	addi	r21,r21,-27964
    67f0:	a524d004 	addi	r20,r20,-27840
    67f4:	9ce4e704 	addi	r19,r19,-27748
    67f8:	85800815 	stw	r22,32(r16)
    67fc:	85400915 	stw	r21,36(r16)
    6800:	85000a15 	stw	r20,40(r16)
    6804:	84c00b15 	stw	r19,44(r16)
    6808:	84000715 	stw	r16,28(r16)
    680c:	00800284 	movi	r2,10
    6810:	8880030d 	sth	r2,12(r17)
    6814:	00800044 	movi	r2,1
    6818:	b80d883a 	mov	r6,r23
    681c:	89001704 	addi	r4,r17,92
    6820:	000b883a 	mov	r5,zero
    6824:	88000015 	stw	zero,0(r17)
    6828:	88000115 	stw	zero,4(r17)
    682c:	88000215 	stw	zero,8(r17)
    6830:	88001915 	stw	zero,100(r17)
    6834:	8880038d 	sth	r2,14(r17)
    6838:	88000415 	stw	zero,16(r17)
    683c:	88000515 	stw	zero,20(r17)
    6840:	88000615 	stw	zero,24(r17)
    6844:	0007b6c0 	call	7b6c <memset>
    6848:	94000317 	ldw	r16,12(r18)
    684c:	00800484 	movi	r2,18
    6850:	8c400715 	stw	r17,28(r17)
    6854:	8d800815 	stw	r22,32(r17)
    6858:	8d400915 	stw	r21,36(r17)
    685c:	8d000a15 	stw	r20,40(r17)
    6860:	8cc00b15 	stw	r19,44(r17)
    6864:	8080030d 	sth	r2,12(r16)
    6868:	00800084 	movi	r2,2
    686c:	80000015 	stw	zero,0(r16)
    6870:	80000115 	stw	zero,4(r16)
    6874:	80000215 	stw	zero,8(r16)
    6878:	80001915 	stw	zero,100(r16)
    687c:	8080038d 	sth	r2,14(r16)
    6880:	80000415 	stw	zero,16(r16)
    6884:	80000515 	stw	zero,20(r16)
    6888:	80000615 	stw	zero,24(r16)
    688c:	b80d883a 	mov	r6,r23
    6890:	000b883a 	mov	r5,zero
    6894:	81001704 	addi	r4,r16,92
    6898:	0007b6c0 	call	7b6c <memset>
    689c:	00800044 	movi	r2,1
    68a0:	84000715 	stw	r16,28(r16)
    68a4:	85800815 	stw	r22,32(r16)
    68a8:	85400915 	stw	r21,36(r16)
    68ac:	85000a15 	stw	r20,40(r16)
    68b0:	84c00b15 	stw	r19,44(r16)
    68b4:	90800e15 	stw	r2,56(r18)
    68b8:	dfc00817 	ldw	ra,32(sp)
    68bc:	ddc00717 	ldw	r23,28(sp)
    68c0:	dd800617 	ldw	r22,24(sp)
    68c4:	dd400517 	ldw	r21,20(sp)
    68c8:	dd000417 	ldw	r20,16(sp)
    68cc:	dcc00317 	ldw	r19,12(sp)
    68d0:	dc800217 	ldw	r18,8(sp)
    68d4:	dc400117 	ldw	r17,4(sp)
    68d8:	dc000017 	ldw	r16,0(sp)
    68dc:	dec00904 	addi	sp,sp,36
    68e0:	f800283a 	ret

000068e4 <__fp_lock>:
    68e4:	0005883a 	mov	r2,zero
    68e8:	f800283a 	ret

000068ec <__sfmoreglue>:
    68ec:	defffc04 	addi	sp,sp,-16
    68f0:	dc400115 	stw	r17,4(sp)
    68f4:	2c7fffc4 	addi	r17,r5,-1
    68f8:	8c401a24 	muli	r17,r17,104
    68fc:	dc800215 	stw	r18,8(sp)
    6900:	2825883a 	mov	r18,r5
    6904:	89401d04 	addi	r5,r17,116
    6908:	dc000015 	stw	r16,0(sp)
    690c:	dfc00315 	stw	ra,12(sp)
    6910:	0001da80 	call	1da8 <_malloc_r>
    6914:	1021883a 	mov	r16,r2
    6918:	10000726 	beq	r2,zero,6938 <__sfmoreglue+0x4c>
    691c:	11000304 	addi	r4,r2,12
    6920:	10000015 	stw	zero,0(r2)
    6924:	14800115 	stw	r18,4(r2)
    6928:	11000215 	stw	r4,8(r2)
    692c:	89801a04 	addi	r6,r17,104
    6930:	000b883a 	mov	r5,zero
    6934:	0007b6c0 	call	7b6c <memset>
    6938:	8005883a 	mov	r2,r16
    693c:	dfc00317 	ldw	ra,12(sp)
    6940:	dc800217 	ldw	r18,8(sp)
    6944:	dc400117 	ldw	r17,4(sp)
    6948:	dc000017 	ldw	r16,0(sp)
    694c:	dec00404 	addi	sp,sp,16
    6950:	f800283a 	ret

00006954 <__sfp>:
    6954:	defffb04 	addi	sp,sp,-20
    6958:	dc000015 	stw	r16,0(sp)
    695c:	04000074 	movhi	r16,1
    6960:	84092e04 	addi	r16,r16,9400
    6964:	dcc00315 	stw	r19,12(sp)
    6968:	2027883a 	mov	r19,r4
    696c:	81000017 	ldw	r4,0(r16)
    6970:	dfc00415 	stw	ra,16(sp)
    6974:	dc800215 	stw	r18,8(sp)
    6978:	20800e17 	ldw	r2,56(r4)
    697c:	dc400115 	stw	r17,4(sp)
    6980:	1000021e 	bne	r2,zero,698c <__sfp+0x38>
    6984:	00067480 	call	6748 <__sinit.part.1>
    6988:	81000017 	ldw	r4,0(r16)
    698c:	2480b804 	addi	r18,r4,736
    6990:	047fffc4 	movi	r17,-1
    6994:	91000117 	ldw	r4,4(r18)
    6998:	94000217 	ldw	r16,8(r18)
    699c:	213fffc4 	addi	r4,r4,-1
    69a0:	20000a16 	blt	r4,zero,69cc <__sfp+0x78>
    69a4:	8080030f 	ldh	r2,12(r16)
    69a8:	10000c26 	beq	r2,zero,69dc <__sfp+0x88>
    69ac:	80c01d04 	addi	r3,r16,116
    69b0:	00000206 	br	69bc <__sfp+0x68>
    69b4:	18bfe60f 	ldh	r2,-104(r3)
    69b8:	10000826 	beq	r2,zero,69dc <__sfp+0x88>
    69bc:	213fffc4 	addi	r4,r4,-1
    69c0:	1c3ffd04 	addi	r16,r3,-12
    69c4:	18c01a04 	addi	r3,r3,104
    69c8:	247ffa1e 	bne	r4,r17,69b4 <__alt_data_end+0xff0069b4>
    69cc:	90800017 	ldw	r2,0(r18)
    69d0:	10001d26 	beq	r2,zero,6a48 <__sfp+0xf4>
    69d4:	1025883a 	mov	r18,r2
    69d8:	003fee06 	br	6994 <__alt_data_end+0xff006994>
    69dc:	00bfffc4 	movi	r2,-1
    69e0:	8080038d 	sth	r2,14(r16)
    69e4:	00800044 	movi	r2,1
    69e8:	8080030d 	sth	r2,12(r16)
    69ec:	80001915 	stw	zero,100(r16)
    69f0:	80000015 	stw	zero,0(r16)
    69f4:	80000215 	stw	zero,8(r16)
    69f8:	80000115 	stw	zero,4(r16)
    69fc:	80000415 	stw	zero,16(r16)
    6a00:	80000515 	stw	zero,20(r16)
    6a04:	80000615 	stw	zero,24(r16)
    6a08:	01800204 	movi	r6,8
    6a0c:	000b883a 	mov	r5,zero
    6a10:	81001704 	addi	r4,r16,92
    6a14:	0007b6c0 	call	7b6c <memset>
    6a18:	8005883a 	mov	r2,r16
    6a1c:	80000c15 	stw	zero,48(r16)
    6a20:	80000d15 	stw	zero,52(r16)
    6a24:	80001115 	stw	zero,68(r16)
    6a28:	80001215 	stw	zero,72(r16)
    6a2c:	dfc00417 	ldw	ra,16(sp)
    6a30:	dcc00317 	ldw	r19,12(sp)
    6a34:	dc800217 	ldw	r18,8(sp)
    6a38:	dc400117 	ldw	r17,4(sp)
    6a3c:	dc000017 	ldw	r16,0(sp)
    6a40:	dec00504 	addi	sp,sp,20
    6a44:	f800283a 	ret
    6a48:	01400104 	movi	r5,4
    6a4c:	9809883a 	mov	r4,r19
    6a50:	00068ec0 	call	68ec <__sfmoreglue>
    6a54:	90800015 	stw	r2,0(r18)
    6a58:	103fde1e 	bne	r2,zero,69d4 <__alt_data_end+0xff0069d4>
    6a5c:	00800304 	movi	r2,12
    6a60:	98800015 	stw	r2,0(r19)
    6a64:	0005883a 	mov	r2,zero
    6a68:	003ff006 	br	6a2c <__alt_data_end+0xff006a2c>

00006a6c <_cleanup>:
    6a6c:	00800074 	movhi	r2,1
    6a70:	10892e04 	addi	r2,r2,9400
    6a74:	11000017 	ldw	r4,0(r2)
    6a78:	01400074 	movhi	r5,1
    6a7c:	296b1004 	addi	r5,r5,-21440
    6a80:	00074881 	jmpi	7488 <_fwalk_reent>

00006a84 <__sinit>:
    6a84:	20800e17 	ldw	r2,56(r4)
    6a88:	10000126 	beq	r2,zero,6a90 <__sinit+0xc>
    6a8c:	f800283a 	ret
    6a90:	00067481 	jmpi	6748 <__sinit.part.1>

00006a94 <__sfp_lock_acquire>:
    6a94:	f800283a 	ret

00006a98 <__sfp_lock_release>:
    6a98:	f800283a 	ret

00006a9c <__sinit_lock_acquire>:
    6a9c:	f800283a 	ret

00006aa0 <__sinit_lock_release>:
    6aa0:	f800283a 	ret

00006aa4 <__fp_lock_all>:
    6aa4:	00800074 	movhi	r2,1
    6aa8:	10892f04 	addi	r2,r2,9404
    6aac:	11000017 	ldw	r4,0(r2)
    6ab0:	01400034 	movhi	r5,0
    6ab4:	295a3904 	addi	r5,r5,26852
    6ab8:	00073c41 	jmpi	73c4 <_fwalk>

00006abc <__fp_unlock_all>:
    6abc:	00800074 	movhi	r2,1
    6ac0:	10892f04 	addi	r2,r2,9404
    6ac4:	11000017 	ldw	r4,0(r2)
    6ac8:	01400034 	movhi	r5,0
    6acc:	2959cd04 	addi	r5,r5,26420
    6ad0:	00073c41 	jmpi	73c4 <_fwalk>

00006ad4 <_malloc_trim_r>:
    6ad4:	defffb04 	addi	sp,sp,-20
    6ad8:	dcc00315 	stw	r19,12(sp)
    6adc:	04c00074 	movhi	r19,1
    6ae0:	dc800215 	stw	r18,8(sp)
    6ae4:	dc400115 	stw	r17,4(sp)
    6ae8:	dc000015 	stw	r16,0(sp)
    6aec:	dfc00415 	stw	ra,16(sp)
    6af0:	2821883a 	mov	r16,r5
    6af4:	9cc27f04 	addi	r19,r19,2556
    6af8:	2025883a 	mov	r18,r4
    6afc:	000ea300 	call	ea30 <__malloc_lock>
    6b00:	98800217 	ldw	r2,8(r19)
    6b04:	14400117 	ldw	r17,4(r2)
    6b08:	00bfff04 	movi	r2,-4
    6b0c:	88a2703a 	and	r17,r17,r2
    6b10:	8c21c83a 	sub	r16,r17,r16
    6b14:	8403fbc4 	addi	r16,r16,4079
    6b18:	8020d33a 	srli	r16,r16,12
    6b1c:	0083ffc4 	movi	r2,4095
    6b20:	843fffc4 	addi	r16,r16,-1
    6b24:	8020933a 	slli	r16,r16,12
    6b28:	1400060e 	bge	r2,r16,6b44 <_malloc_trim_r+0x70>
    6b2c:	000b883a 	mov	r5,zero
    6b30:	9009883a 	mov	r4,r18
    6b34:	00026f40 	call	26f4 <_sbrk_r>
    6b38:	98c00217 	ldw	r3,8(r19)
    6b3c:	1c47883a 	add	r3,r3,r17
    6b40:	10c00a26 	beq	r2,r3,6b6c <_malloc_trim_r+0x98>
    6b44:	9009883a 	mov	r4,r18
    6b48:	000ea340 	call	ea34 <__malloc_unlock>
    6b4c:	0005883a 	mov	r2,zero
    6b50:	dfc00417 	ldw	ra,16(sp)
    6b54:	dcc00317 	ldw	r19,12(sp)
    6b58:	dc800217 	ldw	r18,8(sp)
    6b5c:	dc400117 	ldw	r17,4(sp)
    6b60:	dc000017 	ldw	r16,0(sp)
    6b64:	dec00504 	addi	sp,sp,20
    6b68:	f800283a 	ret
    6b6c:	040bc83a 	sub	r5,zero,r16
    6b70:	9009883a 	mov	r4,r18
    6b74:	00026f40 	call	26f4 <_sbrk_r>
    6b78:	00ffffc4 	movi	r3,-1
    6b7c:	10c00d26 	beq	r2,r3,6bb4 <_malloc_trim_r+0xe0>
    6b80:	00c00074 	movhi	r3,1
    6b84:	18d01304 	addi	r3,r3,16460
    6b88:	18800017 	ldw	r2,0(r3)
    6b8c:	99000217 	ldw	r4,8(r19)
    6b90:	8c23c83a 	sub	r17,r17,r16
    6b94:	8c400054 	ori	r17,r17,1
    6b98:	1421c83a 	sub	r16,r2,r16
    6b9c:	24400115 	stw	r17,4(r4)
    6ba0:	9009883a 	mov	r4,r18
    6ba4:	1c000015 	stw	r16,0(r3)
    6ba8:	000ea340 	call	ea34 <__malloc_unlock>
    6bac:	00800044 	movi	r2,1
    6bb0:	003fe706 	br	6b50 <__alt_data_end+0xff006b50>
    6bb4:	000b883a 	mov	r5,zero
    6bb8:	9009883a 	mov	r4,r18
    6bbc:	00026f40 	call	26f4 <_sbrk_r>
    6bc0:	99000217 	ldw	r4,8(r19)
    6bc4:	014003c4 	movi	r5,15
    6bc8:	1107c83a 	sub	r3,r2,r4
    6bcc:	28ffdd0e 	bge	r5,r3,6b44 <__alt_data_end+0xff006b44>
    6bd0:	01400074 	movhi	r5,1
    6bd4:	29492c04 	addi	r5,r5,9392
    6bd8:	29400017 	ldw	r5,0(r5)
    6bdc:	18c00054 	ori	r3,r3,1
    6be0:	20c00115 	stw	r3,4(r4)
    6be4:	00c00074 	movhi	r3,1
    6be8:	1145c83a 	sub	r2,r2,r5
    6bec:	18d01304 	addi	r3,r3,16460
    6bf0:	18800015 	stw	r2,0(r3)
    6bf4:	003fd306 	br	6b44 <__alt_data_end+0xff006b44>

00006bf8 <_free_r>:
    6bf8:	28004126 	beq	r5,zero,6d00 <_free_r+0x108>
    6bfc:	defffd04 	addi	sp,sp,-12
    6c00:	dc400115 	stw	r17,4(sp)
    6c04:	dc000015 	stw	r16,0(sp)
    6c08:	2023883a 	mov	r17,r4
    6c0c:	2821883a 	mov	r16,r5
    6c10:	dfc00215 	stw	ra,8(sp)
    6c14:	000ea300 	call	ea30 <__malloc_lock>
    6c18:	81ffff17 	ldw	r7,-4(r16)
    6c1c:	00bfff84 	movi	r2,-2
    6c20:	01000074 	movhi	r4,1
    6c24:	81bffe04 	addi	r6,r16,-8
    6c28:	3884703a 	and	r2,r7,r2
    6c2c:	21027f04 	addi	r4,r4,2556
    6c30:	308b883a 	add	r5,r6,r2
    6c34:	2a400117 	ldw	r9,4(r5)
    6c38:	22000217 	ldw	r8,8(r4)
    6c3c:	00ffff04 	movi	r3,-4
    6c40:	48c6703a 	and	r3,r9,r3
    6c44:	2a005726 	beq	r5,r8,6da4 <_free_r+0x1ac>
    6c48:	28c00115 	stw	r3,4(r5)
    6c4c:	39c0004c 	andi	r7,r7,1
    6c50:	3800091e 	bne	r7,zero,6c78 <_free_r+0x80>
    6c54:	823ffe17 	ldw	r8,-8(r16)
    6c58:	22400204 	addi	r9,r4,8
    6c5c:	320dc83a 	sub	r6,r6,r8
    6c60:	31c00217 	ldw	r7,8(r6)
    6c64:	1205883a 	add	r2,r2,r8
    6c68:	3a406526 	beq	r7,r9,6e00 <_free_r+0x208>
    6c6c:	32000317 	ldw	r8,12(r6)
    6c70:	3a000315 	stw	r8,12(r7)
    6c74:	41c00215 	stw	r7,8(r8)
    6c78:	28cf883a 	add	r7,r5,r3
    6c7c:	39c00117 	ldw	r7,4(r7)
    6c80:	39c0004c 	andi	r7,r7,1
    6c84:	38003a26 	beq	r7,zero,6d70 <_free_r+0x178>
    6c88:	10c00054 	ori	r3,r2,1
    6c8c:	30c00115 	stw	r3,4(r6)
    6c90:	3087883a 	add	r3,r6,r2
    6c94:	18800015 	stw	r2,0(r3)
    6c98:	00c07fc4 	movi	r3,511
    6c9c:	18801936 	bltu	r3,r2,6d04 <_free_r+0x10c>
    6ca0:	1004d0fa 	srli	r2,r2,3
    6ca4:	01c00044 	movi	r7,1
    6ca8:	21400117 	ldw	r5,4(r4)
    6cac:	10c00044 	addi	r3,r2,1
    6cb0:	18c7883a 	add	r3,r3,r3
    6cb4:	1005d0ba 	srai	r2,r2,2
    6cb8:	18c7883a 	add	r3,r3,r3
    6cbc:	18c7883a 	add	r3,r3,r3
    6cc0:	1907883a 	add	r3,r3,r4
    6cc4:	3884983a 	sll	r2,r7,r2
    6cc8:	19c00017 	ldw	r7,0(r3)
    6ccc:	1a3ffe04 	addi	r8,r3,-8
    6cd0:	1144b03a 	or	r2,r2,r5
    6cd4:	32000315 	stw	r8,12(r6)
    6cd8:	31c00215 	stw	r7,8(r6)
    6cdc:	20800115 	stw	r2,4(r4)
    6ce0:	19800015 	stw	r6,0(r3)
    6ce4:	39800315 	stw	r6,12(r7)
    6ce8:	8809883a 	mov	r4,r17
    6cec:	dfc00217 	ldw	ra,8(sp)
    6cf0:	dc400117 	ldw	r17,4(sp)
    6cf4:	dc000017 	ldw	r16,0(sp)
    6cf8:	dec00304 	addi	sp,sp,12
    6cfc:	000ea341 	jmpi	ea34 <__malloc_unlock>
    6d00:	f800283a 	ret
    6d04:	100ad27a 	srli	r5,r2,9
    6d08:	00c00104 	movi	r3,4
    6d0c:	19404a36 	bltu	r3,r5,6e38 <_free_r+0x240>
    6d10:	100ad1ba 	srli	r5,r2,6
    6d14:	28c00e44 	addi	r3,r5,57
    6d18:	18c7883a 	add	r3,r3,r3
    6d1c:	29400e04 	addi	r5,r5,56
    6d20:	18c7883a 	add	r3,r3,r3
    6d24:	18c7883a 	add	r3,r3,r3
    6d28:	1909883a 	add	r4,r3,r4
    6d2c:	20c00017 	ldw	r3,0(r4)
    6d30:	01c00074 	movhi	r7,1
    6d34:	213ffe04 	addi	r4,r4,-8
    6d38:	39c27f04 	addi	r7,r7,2556
    6d3c:	20c04426 	beq	r4,r3,6e50 <_free_r+0x258>
    6d40:	01ffff04 	movi	r7,-4
    6d44:	19400117 	ldw	r5,4(r3)
    6d48:	29ca703a 	and	r5,r5,r7
    6d4c:	1140022e 	bgeu	r2,r5,6d58 <_free_r+0x160>
    6d50:	18c00217 	ldw	r3,8(r3)
    6d54:	20fffb1e 	bne	r4,r3,6d44 <__alt_data_end+0xff006d44>
    6d58:	19000317 	ldw	r4,12(r3)
    6d5c:	31000315 	stw	r4,12(r6)
    6d60:	30c00215 	stw	r3,8(r6)
    6d64:	21800215 	stw	r6,8(r4)
    6d68:	19800315 	stw	r6,12(r3)
    6d6c:	003fde06 	br	6ce8 <__alt_data_end+0xff006ce8>
    6d70:	29c00217 	ldw	r7,8(r5)
    6d74:	10c5883a 	add	r2,r2,r3
    6d78:	00c00074 	movhi	r3,1
    6d7c:	18c28104 	addi	r3,r3,2564
    6d80:	38c03b26 	beq	r7,r3,6e70 <_free_r+0x278>
    6d84:	2a000317 	ldw	r8,12(r5)
    6d88:	11400054 	ori	r5,r2,1
    6d8c:	3087883a 	add	r3,r6,r2
    6d90:	3a000315 	stw	r8,12(r7)
    6d94:	41c00215 	stw	r7,8(r8)
    6d98:	31400115 	stw	r5,4(r6)
    6d9c:	18800015 	stw	r2,0(r3)
    6da0:	003fbd06 	br	6c98 <__alt_data_end+0xff006c98>
    6da4:	39c0004c 	andi	r7,r7,1
    6da8:	10c5883a 	add	r2,r2,r3
    6dac:	3800071e 	bne	r7,zero,6dcc <_free_r+0x1d4>
    6db0:	81fffe17 	ldw	r7,-8(r16)
    6db4:	31cdc83a 	sub	r6,r6,r7
    6db8:	30c00317 	ldw	r3,12(r6)
    6dbc:	31400217 	ldw	r5,8(r6)
    6dc0:	11c5883a 	add	r2,r2,r7
    6dc4:	28c00315 	stw	r3,12(r5)
    6dc8:	19400215 	stw	r5,8(r3)
    6dcc:	10c00054 	ori	r3,r2,1
    6dd0:	30c00115 	stw	r3,4(r6)
    6dd4:	00c00074 	movhi	r3,1
    6dd8:	18c92d04 	addi	r3,r3,9396
    6ddc:	18c00017 	ldw	r3,0(r3)
    6de0:	21800215 	stw	r6,8(r4)
    6de4:	10ffc036 	bltu	r2,r3,6ce8 <__alt_data_end+0xff006ce8>
    6de8:	00800074 	movhi	r2,1
    6dec:	10900504 	addi	r2,r2,16404
    6df0:	11400017 	ldw	r5,0(r2)
    6df4:	8809883a 	mov	r4,r17
    6df8:	0006ad40 	call	6ad4 <_malloc_trim_r>
    6dfc:	003fba06 	br	6ce8 <__alt_data_end+0xff006ce8>
    6e00:	28c9883a 	add	r4,r5,r3
    6e04:	21000117 	ldw	r4,4(r4)
    6e08:	2100004c 	andi	r4,r4,1
    6e0c:	2000391e 	bne	r4,zero,6ef4 <_free_r+0x2fc>
    6e10:	29c00217 	ldw	r7,8(r5)
    6e14:	29000317 	ldw	r4,12(r5)
    6e18:	1885883a 	add	r2,r3,r2
    6e1c:	10c00054 	ori	r3,r2,1
    6e20:	39000315 	stw	r4,12(r7)
    6e24:	21c00215 	stw	r7,8(r4)
    6e28:	30c00115 	stw	r3,4(r6)
    6e2c:	308d883a 	add	r6,r6,r2
    6e30:	30800015 	stw	r2,0(r6)
    6e34:	003fac06 	br	6ce8 <__alt_data_end+0xff006ce8>
    6e38:	00c00504 	movi	r3,20
    6e3c:	19401536 	bltu	r3,r5,6e94 <_free_r+0x29c>
    6e40:	28c01704 	addi	r3,r5,92
    6e44:	18c7883a 	add	r3,r3,r3
    6e48:	294016c4 	addi	r5,r5,91
    6e4c:	003fb406 	br	6d20 <__alt_data_end+0xff006d20>
    6e50:	280bd0ba 	srai	r5,r5,2
    6e54:	00c00044 	movi	r3,1
    6e58:	38800117 	ldw	r2,4(r7)
    6e5c:	194a983a 	sll	r5,r3,r5
    6e60:	2007883a 	mov	r3,r4
    6e64:	2884b03a 	or	r2,r5,r2
    6e68:	38800115 	stw	r2,4(r7)
    6e6c:	003fbb06 	br	6d5c <__alt_data_end+0xff006d5c>
    6e70:	21800515 	stw	r6,20(r4)
    6e74:	21800415 	stw	r6,16(r4)
    6e78:	10c00054 	ori	r3,r2,1
    6e7c:	31c00315 	stw	r7,12(r6)
    6e80:	31c00215 	stw	r7,8(r6)
    6e84:	30c00115 	stw	r3,4(r6)
    6e88:	308d883a 	add	r6,r6,r2
    6e8c:	30800015 	stw	r2,0(r6)
    6e90:	003f9506 	br	6ce8 <__alt_data_end+0xff006ce8>
    6e94:	00c01504 	movi	r3,84
    6e98:	19400536 	bltu	r3,r5,6eb0 <_free_r+0x2b8>
    6e9c:	100ad33a 	srli	r5,r2,12
    6ea0:	28c01bc4 	addi	r3,r5,111
    6ea4:	18c7883a 	add	r3,r3,r3
    6ea8:	29401b84 	addi	r5,r5,110
    6eac:	003f9c06 	br	6d20 <__alt_data_end+0xff006d20>
    6eb0:	00c05504 	movi	r3,340
    6eb4:	19400536 	bltu	r3,r5,6ecc <_free_r+0x2d4>
    6eb8:	100ad3fa 	srli	r5,r2,15
    6ebc:	28c01e04 	addi	r3,r5,120
    6ec0:	18c7883a 	add	r3,r3,r3
    6ec4:	29401dc4 	addi	r5,r5,119
    6ec8:	003f9506 	br	6d20 <__alt_data_end+0xff006d20>
    6ecc:	00c15504 	movi	r3,1364
    6ed0:	19400536 	bltu	r3,r5,6ee8 <_free_r+0x2f0>
    6ed4:	100ad4ba 	srli	r5,r2,18
    6ed8:	28c01f44 	addi	r3,r5,125
    6edc:	18c7883a 	add	r3,r3,r3
    6ee0:	29401f04 	addi	r5,r5,124
    6ee4:	003f8e06 	br	6d20 <__alt_data_end+0xff006d20>
    6ee8:	00c03f84 	movi	r3,254
    6eec:	01401f84 	movi	r5,126
    6ef0:	003f8b06 	br	6d20 <__alt_data_end+0xff006d20>
    6ef4:	10c00054 	ori	r3,r2,1
    6ef8:	30c00115 	stw	r3,4(r6)
    6efc:	308d883a 	add	r6,r6,r2
    6f00:	30800015 	stw	r2,0(r6)
    6f04:	003f7806 	br	6ce8 <__alt_data_end+0xff006ce8>

00006f08 <__sfvwrite_r>:
    6f08:	30800217 	ldw	r2,8(r6)
    6f0c:	10006726 	beq	r2,zero,70ac <__sfvwrite_r+0x1a4>
    6f10:	28c0030b 	ldhu	r3,12(r5)
    6f14:	defff404 	addi	sp,sp,-48
    6f18:	dd400715 	stw	r21,28(sp)
    6f1c:	dd000615 	stw	r20,24(sp)
    6f20:	dc000215 	stw	r16,8(sp)
    6f24:	dfc00b15 	stw	ra,44(sp)
    6f28:	df000a15 	stw	fp,40(sp)
    6f2c:	ddc00915 	stw	r23,36(sp)
    6f30:	dd800815 	stw	r22,32(sp)
    6f34:	dcc00515 	stw	r19,20(sp)
    6f38:	dc800415 	stw	r18,16(sp)
    6f3c:	dc400315 	stw	r17,12(sp)
    6f40:	1880020c 	andi	r2,r3,8
    6f44:	2821883a 	mov	r16,r5
    6f48:	202b883a 	mov	r21,r4
    6f4c:	3029883a 	mov	r20,r6
    6f50:	10002726 	beq	r2,zero,6ff0 <__sfvwrite_r+0xe8>
    6f54:	28800417 	ldw	r2,16(r5)
    6f58:	10002526 	beq	r2,zero,6ff0 <__sfvwrite_r+0xe8>
    6f5c:	1880008c 	andi	r2,r3,2
    6f60:	a4400017 	ldw	r17,0(r20)
    6f64:	10002a26 	beq	r2,zero,7010 <__sfvwrite_r+0x108>
    6f68:	05a00034 	movhi	r22,32768
    6f6c:	0027883a 	mov	r19,zero
    6f70:	0025883a 	mov	r18,zero
    6f74:	b5bf0004 	addi	r22,r22,-1024
    6f78:	980d883a 	mov	r6,r19
    6f7c:	a809883a 	mov	r4,r21
    6f80:	90004626 	beq	r18,zero,709c <__sfvwrite_r+0x194>
    6f84:	900f883a 	mov	r7,r18
    6f88:	b480022e 	bgeu	r22,r18,6f94 <__sfvwrite_r+0x8c>
    6f8c:	01e00034 	movhi	r7,32768
    6f90:	39ff0004 	addi	r7,r7,-1024
    6f94:	80800917 	ldw	r2,36(r16)
    6f98:	81400717 	ldw	r5,28(r16)
    6f9c:	103ee83a 	callr	r2
    6fa0:	0080570e 	bge	zero,r2,7100 <__sfvwrite_r+0x1f8>
    6fa4:	a0c00217 	ldw	r3,8(r20)
    6fa8:	98a7883a 	add	r19,r19,r2
    6fac:	90a5c83a 	sub	r18,r18,r2
    6fb0:	1885c83a 	sub	r2,r3,r2
    6fb4:	a0800215 	stw	r2,8(r20)
    6fb8:	103fef1e 	bne	r2,zero,6f78 <__alt_data_end+0xff006f78>
    6fbc:	0005883a 	mov	r2,zero
    6fc0:	dfc00b17 	ldw	ra,44(sp)
    6fc4:	df000a17 	ldw	fp,40(sp)
    6fc8:	ddc00917 	ldw	r23,36(sp)
    6fcc:	dd800817 	ldw	r22,32(sp)
    6fd0:	dd400717 	ldw	r21,28(sp)
    6fd4:	dd000617 	ldw	r20,24(sp)
    6fd8:	dcc00517 	ldw	r19,20(sp)
    6fdc:	dc800417 	ldw	r18,16(sp)
    6fe0:	dc400317 	ldw	r17,12(sp)
    6fe4:	dc000217 	ldw	r16,8(sp)
    6fe8:	dec00c04 	addi	sp,sp,48
    6fec:	f800283a 	ret
    6ff0:	800b883a 	mov	r5,r16
    6ff4:	a809883a 	mov	r4,r21
    6ff8:	0004ab00 	call	4ab0 <__swsetup_r>
    6ffc:	1000eb1e 	bne	r2,zero,73ac <__sfvwrite_r+0x4a4>
    7000:	80c0030b 	ldhu	r3,12(r16)
    7004:	a4400017 	ldw	r17,0(r20)
    7008:	1880008c 	andi	r2,r3,2
    700c:	103fd61e 	bne	r2,zero,6f68 <__alt_data_end+0xff006f68>
    7010:	1880004c 	andi	r2,r3,1
    7014:	10003f1e 	bne	r2,zero,7114 <__sfvwrite_r+0x20c>
    7018:	0039883a 	mov	fp,zero
    701c:	0025883a 	mov	r18,zero
    7020:	90001a26 	beq	r18,zero,708c <__sfvwrite_r+0x184>
    7024:	1880800c 	andi	r2,r3,512
    7028:	84c00217 	ldw	r19,8(r16)
    702c:	10002126 	beq	r2,zero,70b4 <__sfvwrite_r+0x1ac>
    7030:	982f883a 	mov	r23,r19
    7034:	94c09336 	bltu	r18,r19,7284 <__sfvwrite_r+0x37c>
    7038:	1881200c 	andi	r2,r3,1152
    703c:	10009e1e 	bne	r2,zero,72b8 <__sfvwrite_r+0x3b0>
    7040:	81000017 	ldw	r4,0(r16)
    7044:	b80d883a 	mov	r6,r23
    7048:	e00b883a 	mov	r5,fp
    704c:	0007a100 	call	7a10 <memmove>
    7050:	80c00217 	ldw	r3,8(r16)
    7054:	81000017 	ldw	r4,0(r16)
    7058:	9005883a 	mov	r2,r18
    705c:	1ce7c83a 	sub	r19,r3,r19
    7060:	25cf883a 	add	r7,r4,r23
    7064:	84c00215 	stw	r19,8(r16)
    7068:	81c00015 	stw	r7,0(r16)
    706c:	a0c00217 	ldw	r3,8(r20)
    7070:	e0b9883a 	add	fp,fp,r2
    7074:	90a5c83a 	sub	r18,r18,r2
    7078:	18a7c83a 	sub	r19,r3,r2
    707c:	a4c00215 	stw	r19,8(r20)
    7080:	983fce26 	beq	r19,zero,6fbc <__alt_data_end+0xff006fbc>
    7084:	80c0030b 	ldhu	r3,12(r16)
    7088:	903fe61e 	bne	r18,zero,7024 <__alt_data_end+0xff007024>
    708c:	8f000017 	ldw	fp,0(r17)
    7090:	8c800117 	ldw	r18,4(r17)
    7094:	8c400204 	addi	r17,r17,8
    7098:	003fe106 	br	7020 <__alt_data_end+0xff007020>
    709c:	8cc00017 	ldw	r19,0(r17)
    70a0:	8c800117 	ldw	r18,4(r17)
    70a4:	8c400204 	addi	r17,r17,8
    70a8:	003fb306 	br	6f78 <__alt_data_end+0xff006f78>
    70ac:	0005883a 	mov	r2,zero
    70b0:	f800283a 	ret
    70b4:	81000017 	ldw	r4,0(r16)
    70b8:	80800417 	ldw	r2,16(r16)
    70bc:	11005736 	bltu	r2,r4,721c <__sfvwrite_r+0x314>
    70c0:	85c00517 	ldw	r23,20(r16)
    70c4:	95c05536 	bltu	r18,r23,721c <__sfvwrite_r+0x314>
    70c8:	00a00034 	movhi	r2,32768
    70cc:	10bfffc4 	addi	r2,r2,-1
    70d0:	9009883a 	mov	r4,r18
    70d4:	1480012e 	bgeu	r2,r18,70dc <__sfvwrite_r+0x1d4>
    70d8:	1009883a 	mov	r4,r2
    70dc:	b80b883a 	mov	r5,r23
    70e0:	000beac0 	call	beac <__divsi3>
    70e4:	15cf383a 	mul	r7,r2,r23
    70e8:	81400717 	ldw	r5,28(r16)
    70ec:	80800917 	ldw	r2,36(r16)
    70f0:	e00d883a 	mov	r6,fp
    70f4:	a809883a 	mov	r4,r21
    70f8:	103ee83a 	callr	r2
    70fc:	00bfdb16 	blt	zero,r2,706c <__alt_data_end+0xff00706c>
    7100:	8080030b 	ldhu	r2,12(r16)
    7104:	10801014 	ori	r2,r2,64
    7108:	8080030d 	sth	r2,12(r16)
    710c:	00bfffc4 	movi	r2,-1
    7110:	003fab06 	br	6fc0 <__alt_data_end+0xff006fc0>
    7114:	0027883a 	mov	r19,zero
    7118:	0011883a 	mov	r8,zero
    711c:	0039883a 	mov	fp,zero
    7120:	0025883a 	mov	r18,zero
    7124:	90001f26 	beq	r18,zero,71a4 <__sfvwrite_r+0x29c>
    7128:	40005a26 	beq	r8,zero,7294 <__sfvwrite_r+0x38c>
    712c:	982d883a 	mov	r22,r19
    7130:	94c0012e 	bgeu	r18,r19,7138 <__sfvwrite_r+0x230>
    7134:	902d883a 	mov	r22,r18
    7138:	81000017 	ldw	r4,0(r16)
    713c:	80800417 	ldw	r2,16(r16)
    7140:	b02f883a 	mov	r23,r22
    7144:	81c00517 	ldw	r7,20(r16)
    7148:	1100032e 	bgeu	r2,r4,7158 <__sfvwrite_r+0x250>
    714c:	80c00217 	ldw	r3,8(r16)
    7150:	38c7883a 	add	r3,r7,r3
    7154:	1d801816 	blt	r3,r22,71b8 <__sfvwrite_r+0x2b0>
    7158:	b1c03e16 	blt	r22,r7,7254 <__sfvwrite_r+0x34c>
    715c:	80800917 	ldw	r2,36(r16)
    7160:	81400717 	ldw	r5,28(r16)
    7164:	e00d883a 	mov	r6,fp
    7168:	da000115 	stw	r8,4(sp)
    716c:	a809883a 	mov	r4,r21
    7170:	103ee83a 	callr	r2
    7174:	102f883a 	mov	r23,r2
    7178:	da000117 	ldw	r8,4(sp)
    717c:	00bfe00e 	bge	zero,r2,7100 <__alt_data_end+0xff007100>
    7180:	9de7c83a 	sub	r19,r19,r23
    7184:	98001f26 	beq	r19,zero,7204 <__sfvwrite_r+0x2fc>
    7188:	a0800217 	ldw	r2,8(r20)
    718c:	e5f9883a 	add	fp,fp,r23
    7190:	95e5c83a 	sub	r18,r18,r23
    7194:	15efc83a 	sub	r23,r2,r23
    7198:	a5c00215 	stw	r23,8(r20)
    719c:	b83f8726 	beq	r23,zero,6fbc <__alt_data_end+0xff006fbc>
    71a0:	903fe11e 	bne	r18,zero,7128 <__alt_data_end+0xff007128>
    71a4:	8f000017 	ldw	fp,0(r17)
    71a8:	8c800117 	ldw	r18,4(r17)
    71ac:	0011883a 	mov	r8,zero
    71b0:	8c400204 	addi	r17,r17,8
    71b4:	003fdb06 	br	7124 <__alt_data_end+0xff007124>
    71b8:	180d883a 	mov	r6,r3
    71bc:	e00b883a 	mov	r5,fp
    71c0:	da000115 	stw	r8,4(sp)
    71c4:	d8c00015 	stw	r3,0(sp)
    71c8:	0007a100 	call	7a10 <memmove>
    71cc:	d8c00017 	ldw	r3,0(sp)
    71d0:	80800017 	ldw	r2,0(r16)
    71d4:	800b883a 	mov	r5,r16
    71d8:	a809883a 	mov	r4,r21
    71dc:	10c5883a 	add	r2,r2,r3
    71e0:	80800015 	stw	r2,0(r16)
    71e4:	d8c00015 	stw	r3,0(sp)
    71e8:	00066a80 	call	66a8 <_fflush_r>
    71ec:	d8c00017 	ldw	r3,0(sp)
    71f0:	da000117 	ldw	r8,4(sp)
    71f4:	103fc21e 	bne	r2,zero,7100 <__alt_data_end+0xff007100>
    71f8:	182f883a 	mov	r23,r3
    71fc:	9de7c83a 	sub	r19,r19,r23
    7200:	983fe11e 	bne	r19,zero,7188 <__alt_data_end+0xff007188>
    7204:	800b883a 	mov	r5,r16
    7208:	a809883a 	mov	r4,r21
    720c:	00066a80 	call	66a8 <_fflush_r>
    7210:	103fbb1e 	bne	r2,zero,7100 <__alt_data_end+0xff007100>
    7214:	0011883a 	mov	r8,zero
    7218:	003fdb06 	br	7188 <__alt_data_end+0xff007188>
    721c:	94c0012e 	bgeu	r18,r19,7224 <__sfvwrite_r+0x31c>
    7220:	9027883a 	mov	r19,r18
    7224:	980d883a 	mov	r6,r19
    7228:	e00b883a 	mov	r5,fp
    722c:	0007a100 	call	7a10 <memmove>
    7230:	80800217 	ldw	r2,8(r16)
    7234:	80c00017 	ldw	r3,0(r16)
    7238:	14c5c83a 	sub	r2,r2,r19
    723c:	1cc7883a 	add	r3,r3,r19
    7240:	80800215 	stw	r2,8(r16)
    7244:	80c00015 	stw	r3,0(r16)
    7248:	10004326 	beq	r2,zero,7358 <__sfvwrite_r+0x450>
    724c:	9805883a 	mov	r2,r19
    7250:	003f8606 	br	706c <__alt_data_end+0xff00706c>
    7254:	b00d883a 	mov	r6,r22
    7258:	e00b883a 	mov	r5,fp
    725c:	da000115 	stw	r8,4(sp)
    7260:	0007a100 	call	7a10 <memmove>
    7264:	80800217 	ldw	r2,8(r16)
    7268:	80c00017 	ldw	r3,0(r16)
    726c:	da000117 	ldw	r8,4(sp)
    7270:	1585c83a 	sub	r2,r2,r22
    7274:	1dad883a 	add	r22,r3,r22
    7278:	80800215 	stw	r2,8(r16)
    727c:	85800015 	stw	r22,0(r16)
    7280:	003fbf06 	br	7180 <__alt_data_end+0xff007180>
    7284:	81000017 	ldw	r4,0(r16)
    7288:	9027883a 	mov	r19,r18
    728c:	902f883a 	mov	r23,r18
    7290:	003f6c06 	br	7044 <__alt_data_end+0xff007044>
    7294:	900d883a 	mov	r6,r18
    7298:	01400284 	movi	r5,10
    729c:	e009883a 	mov	r4,fp
    72a0:	00077e40 	call	77e4 <memchr>
    72a4:	10003e26 	beq	r2,zero,73a0 <__sfvwrite_r+0x498>
    72a8:	10800044 	addi	r2,r2,1
    72ac:	1727c83a 	sub	r19,r2,fp
    72b0:	02000044 	movi	r8,1
    72b4:	003f9d06 	br	712c <__alt_data_end+0xff00712c>
    72b8:	80800517 	ldw	r2,20(r16)
    72bc:	81400417 	ldw	r5,16(r16)
    72c0:	81c00017 	ldw	r7,0(r16)
    72c4:	10a7883a 	add	r19,r2,r2
    72c8:	9885883a 	add	r2,r19,r2
    72cc:	1026d7fa 	srli	r19,r2,31
    72d0:	396dc83a 	sub	r22,r7,r5
    72d4:	b1000044 	addi	r4,r22,1
    72d8:	9885883a 	add	r2,r19,r2
    72dc:	1027d07a 	srai	r19,r2,1
    72e0:	2485883a 	add	r2,r4,r18
    72e4:	980d883a 	mov	r6,r19
    72e8:	9880022e 	bgeu	r19,r2,72f4 <__sfvwrite_r+0x3ec>
    72ec:	1027883a 	mov	r19,r2
    72f0:	100d883a 	mov	r6,r2
    72f4:	18c1000c 	andi	r3,r3,1024
    72f8:	18001c26 	beq	r3,zero,736c <__sfvwrite_r+0x464>
    72fc:	300b883a 	mov	r5,r6
    7300:	a809883a 	mov	r4,r21
    7304:	0001da80 	call	1da8 <_malloc_r>
    7308:	102f883a 	mov	r23,r2
    730c:	10002926 	beq	r2,zero,73b4 <__sfvwrite_r+0x4ac>
    7310:	81400417 	ldw	r5,16(r16)
    7314:	b00d883a 	mov	r6,r22
    7318:	1009883a 	mov	r4,r2
    731c:	00078c80 	call	78c8 <memcpy>
    7320:	8080030b 	ldhu	r2,12(r16)
    7324:	00fedfc4 	movi	r3,-1153
    7328:	10c4703a 	and	r2,r2,r3
    732c:	10802014 	ori	r2,r2,128
    7330:	8080030d 	sth	r2,12(r16)
    7334:	bd89883a 	add	r4,r23,r22
    7338:	9d8fc83a 	sub	r7,r19,r22
    733c:	85c00415 	stw	r23,16(r16)
    7340:	84c00515 	stw	r19,20(r16)
    7344:	81000015 	stw	r4,0(r16)
    7348:	9027883a 	mov	r19,r18
    734c:	81c00215 	stw	r7,8(r16)
    7350:	902f883a 	mov	r23,r18
    7354:	003f3b06 	br	7044 <__alt_data_end+0xff007044>
    7358:	800b883a 	mov	r5,r16
    735c:	a809883a 	mov	r4,r21
    7360:	00066a80 	call	66a8 <_fflush_r>
    7364:	103fb926 	beq	r2,zero,724c <__alt_data_end+0xff00724c>
    7368:	003f6506 	br	7100 <__alt_data_end+0xff007100>
    736c:	a809883a 	mov	r4,r21
    7370:	0008c900 	call	8c90 <_realloc_r>
    7374:	102f883a 	mov	r23,r2
    7378:	103fee1e 	bne	r2,zero,7334 <__alt_data_end+0xff007334>
    737c:	81400417 	ldw	r5,16(r16)
    7380:	a809883a 	mov	r4,r21
    7384:	0006bf80 	call	6bf8 <_free_r>
    7388:	8080030b 	ldhu	r2,12(r16)
    738c:	00ffdfc4 	movi	r3,-129
    7390:	1884703a 	and	r2,r3,r2
    7394:	00c00304 	movi	r3,12
    7398:	a8c00015 	stw	r3,0(r21)
    739c:	003f5906 	br	7104 <__alt_data_end+0xff007104>
    73a0:	94c00044 	addi	r19,r18,1
    73a4:	02000044 	movi	r8,1
    73a8:	003f6006 	br	712c <__alt_data_end+0xff00712c>
    73ac:	00bfffc4 	movi	r2,-1
    73b0:	003f0306 	br	6fc0 <__alt_data_end+0xff006fc0>
    73b4:	00800304 	movi	r2,12
    73b8:	a8800015 	stw	r2,0(r21)
    73bc:	8080030b 	ldhu	r2,12(r16)
    73c0:	003f5006 	br	7104 <__alt_data_end+0xff007104>

000073c4 <_fwalk>:
    73c4:	defff704 	addi	sp,sp,-36
    73c8:	dd000415 	stw	r20,16(sp)
    73cc:	dfc00815 	stw	ra,32(sp)
    73d0:	ddc00715 	stw	r23,28(sp)
    73d4:	dd800615 	stw	r22,24(sp)
    73d8:	dd400515 	stw	r21,20(sp)
    73dc:	dcc00315 	stw	r19,12(sp)
    73e0:	dc800215 	stw	r18,8(sp)
    73e4:	dc400115 	stw	r17,4(sp)
    73e8:	dc000015 	stw	r16,0(sp)
    73ec:	2500b804 	addi	r20,r4,736
    73f0:	a0002326 	beq	r20,zero,7480 <_fwalk+0xbc>
    73f4:	282b883a 	mov	r21,r5
    73f8:	002f883a 	mov	r23,zero
    73fc:	05800044 	movi	r22,1
    7400:	04ffffc4 	movi	r19,-1
    7404:	a4400117 	ldw	r17,4(r20)
    7408:	a4800217 	ldw	r18,8(r20)
    740c:	8c7fffc4 	addi	r17,r17,-1
    7410:	88000d16 	blt	r17,zero,7448 <_fwalk+0x84>
    7414:	94000304 	addi	r16,r18,12
    7418:	94800384 	addi	r18,r18,14
    741c:	8080000b 	ldhu	r2,0(r16)
    7420:	8c7fffc4 	addi	r17,r17,-1
    7424:	813ffd04 	addi	r4,r16,-12
    7428:	b080042e 	bgeu	r22,r2,743c <_fwalk+0x78>
    742c:	9080000f 	ldh	r2,0(r18)
    7430:	14c00226 	beq	r2,r19,743c <_fwalk+0x78>
    7434:	a83ee83a 	callr	r21
    7438:	b8aeb03a 	or	r23,r23,r2
    743c:	84001a04 	addi	r16,r16,104
    7440:	94801a04 	addi	r18,r18,104
    7444:	8cfff51e 	bne	r17,r19,741c <__alt_data_end+0xff00741c>
    7448:	a5000017 	ldw	r20,0(r20)
    744c:	a03fed1e 	bne	r20,zero,7404 <__alt_data_end+0xff007404>
    7450:	b805883a 	mov	r2,r23
    7454:	dfc00817 	ldw	ra,32(sp)
    7458:	ddc00717 	ldw	r23,28(sp)
    745c:	dd800617 	ldw	r22,24(sp)
    7460:	dd400517 	ldw	r21,20(sp)
    7464:	dd000417 	ldw	r20,16(sp)
    7468:	dcc00317 	ldw	r19,12(sp)
    746c:	dc800217 	ldw	r18,8(sp)
    7470:	dc400117 	ldw	r17,4(sp)
    7474:	dc000017 	ldw	r16,0(sp)
    7478:	dec00904 	addi	sp,sp,36
    747c:	f800283a 	ret
    7480:	002f883a 	mov	r23,zero
    7484:	003ff206 	br	7450 <__alt_data_end+0xff007450>

00007488 <_fwalk_reent>:
    7488:	defff704 	addi	sp,sp,-36
    748c:	dd000415 	stw	r20,16(sp)
    7490:	dfc00815 	stw	ra,32(sp)
    7494:	ddc00715 	stw	r23,28(sp)
    7498:	dd800615 	stw	r22,24(sp)
    749c:	dd400515 	stw	r21,20(sp)
    74a0:	dcc00315 	stw	r19,12(sp)
    74a4:	dc800215 	stw	r18,8(sp)
    74a8:	dc400115 	stw	r17,4(sp)
    74ac:	dc000015 	stw	r16,0(sp)
    74b0:	2500b804 	addi	r20,r4,736
    74b4:	a0002326 	beq	r20,zero,7544 <_fwalk_reent+0xbc>
    74b8:	282b883a 	mov	r21,r5
    74bc:	2027883a 	mov	r19,r4
    74c0:	002f883a 	mov	r23,zero
    74c4:	05800044 	movi	r22,1
    74c8:	04bfffc4 	movi	r18,-1
    74cc:	a4400117 	ldw	r17,4(r20)
    74d0:	a4000217 	ldw	r16,8(r20)
    74d4:	8c7fffc4 	addi	r17,r17,-1
    74d8:	88000c16 	blt	r17,zero,750c <_fwalk_reent+0x84>
    74dc:	84000304 	addi	r16,r16,12
    74e0:	8080000b 	ldhu	r2,0(r16)
    74e4:	8c7fffc4 	addi	r17,r17,-1
    74e8:	817ffd04 	addi	r5,r16,-12
    74ec:	b080052e 	bgeu	r22,r2,7504 <_fwalk_reent+0x7c>
    74f0:	8080008f 	ldh	r2,2(r16)
    74f4:	9809883a 	mov	r4,r19
    74f8:	14800226 	beq	r2,r18,7504 <_fwalk_reent+0x7c>
    74fc:	a83ee83a 	callr	r21
    7500:	b8aeb03a 	or	r23,r23,r2
    7504:	84001a04 	addi	r16,r16,104
    7508:	8cbff51e 	bne	r17,r18,74e0 <__alt_data_end+0xff0074e0>
    750c:	a5000017 	ldw	r20,0(r20)
    7510:	a03fee1e 	bne	r20,zero,74cc <__alt_data_end+0xff0074cc>
    7514:	b805883a 	mov	r2,r23
    7518:	dfc00817 	ldw	ra,32(sp)
    751c:	ddc00717 	ldw	r23,28(sp)
    7520:	dd800617 	ldw	r22,24(sp)
    7524:	dd400517 	ldw	r21,20(sp)
    7528:	dd000417 	ldw	r20,16(sp)
    752c:	dcc00317 	ldw	r19,12(sp)
    7530:	dc800217 	ldw	r18,8(sp)
    7534:	dc400117 	ldw	r17,4(sp)
    7538:	dc000017 	ldw	r16,0(sp)
    753c:	dec00904 	addi	sp,sp,36
    7540:	f800283a 	ret
    7544:	002f883a 	mov	r23,zero
    7548:	003ff206 	br	7514 <__alt_data_end+0xff007514>

0000754c <_setlocale_r>:
    754c:	30001b26 	beq	r6,zero,75bc <_setlocale_r+0x70>
    7550:	01400074 	movhi	r5,1
    7554:	defffe04 	addi	sp,sp,-8
    7558:	2941e404 	addi	r5,r5,1936
    755c:	3009883a 	mov	r4,r6
    7560:	dc000015 	stw	r16,0(sp)
    7564:	dfc00115 	stw	ra,4(sp)
    7568:	3021883a 	mov	r16,r6
    756c:	00093a40 	call	93a4 <strcmp>
    7570:	1000061e 	bne	r2,zero,758c <_setlocale_r+0x40>
    7574:	00800074 	movhi	r2,1
    7578:	1081e304 	addi	r2,r2,1932
    757c:	dfc00117 	ldw	ra,4(sp)
    7580:	dc000017 	ldw	r16,0(sp)
    7584:	dec00204 	addi	sp,sp,8
    7588:	f800283a 	ret
    758c:	01400074 	movhi	r5,1
    7590:	2941e304 	addi	r5,r5,1932
    7594:	8009883a 	mov	r4,r16
    7598:	00093a40 	call	93a4 <strcmp>
    759c:	103ff526 	beq	r2,zero,7574 <__alt_data_end+0xff007574>
    75a0:	01400074 	movhi	r5,1
    75a4:	2941ce04 	addi	r5,r5,1848
    75a8:	8009883a 	mov	r4,r16
    75ac:	00093a40 	call	93a4 <strcmp>
    75b0:	103ff026 	beq	r2,zero,7574 <__alt_data_end+0xff007574>
    75b4:	0005883a 	mov	r2,zero
    75b8:	003ff006 	br	757c <__alt_data_end+0xff00757c>
    75bc:	00800074 	movhi	r2,1
    75c0:	1081e304 	addi	r2,r2,1932
    75c4:	f800283a 	ret

000075c8 <__locale_charset>:
    75c8:	00800074 	movhi	r2,1
    75cc:	10849204 	addi	r2,r2,4680
    75d0:	f800283a 	ret

000075d4 <__locale_mb_cur_max>:
    75d4:	00800074 	movhi	r2,1
    75d8:	10893004 	addi	r2,r2,9408
    75dc:	10800017 	ldw	r2,0(r2)
    75e0:	f800283a 	ret

000075e4 <__locale_msgcharset>:
    75e4:	00800074 	movhi	r2,1
    75e8:	10848a04 	addi	r2,r2,4648
    75ec:	f800283a 	ret

000075f0 <__locale_cjk_lang>:
    75f0:	0005883a 	mov	r2,zero
    75f4:	f800283a 	ret

000075f8 <_localeconv_r>:
    75f8:	00800074 	movhi	r2,1
    75fc:	10849a04 	addi	r2,r2,4712
    7600:	f800283a 	ret

00007604 <setlocale>:
    7604:	00800074 	movhi	r2,1
    7608:	10892f04 	addi	r2,r2,9404
    760c:	280d883a 	mov	r6,r5
    7610:	200b883a 	mov	r5,r4
    7614:	11000017 	ldw	r4,0(r2)
    7618:	000754c1 	jmpi	754c <_setlocale_r>

0000761c <localeconv>:
    761c:	00800074 	movhi	r2,1
    7620:	10849a04 	addi	r2,r2,4712
    7624:	f800283a 	ret

00007628 <__smakebuf_r>:
    7628:	2880030b 	ldhu	r2,12(r5)
    762c:	10c0008c 	andi	r3,r2,2
    7630:	1800411e 	bne	r3,zero,7738 <__smakebuf_r+0x110>
    7634:	deffec04 	addi	sp,sp,-80
    7638:	dc000f15 	stw	r16,60(sp)
    763c:	2821883a 	mov	r16,r5
    7640:	2940038f 	ldh	r5,14(r5)
    7644:	dc401015 	stw	r17,64(sp)
    7648:	dfc01315 	stw	ra,76(sp)
    764c:	dcc01215 	stw	r19,72(sp)
    7650:	dc801115 	stw	r18,68(sp)
    7654:	2023883a 	mov	r17,r4
    7658:	28001c16 	blt	r5,zero,76cc <__smakebuf_r+0xa4>
    765c:	d80d883a 	mov	r6,sp
    7660:	000af4c0 	call	af4c <_fstat_r>
    7664:	10001816 	blt	r2,zero,76c8 <__smakebuf_r+0xa0>
    7668:	d8800117 	ldw	r2,4(sp)
    766c:	00e00014 	movui	r3,32768
    7670:	10bc000c 	andi	r2,r2,61440
    7674:	14c80020 	cmpeqi	r19,r2,8192
    7678:	10c03726 	beq	r2,r3,7758 <__smakebuf_r+0x130>
    767c:	80c0030b 	ldhu	r3,12(r16)
    7680:	18c20014 	ori	r3,r3,2048
    7684:	80c0030d 	sth	r3,12(r16)
    7688:	00c80004 	movi	r3,8192
    768c:	10c0521e 	bne	r2,r3,77d8 <__smakebuf_r+0x1b0>
    7690:	8140038f 	ldh	r5,14(r16)
    7694:	8809883a 	mov	r4,r17
    7698:	000afa80 	call	afa8 <_isatty_r>
    769c:	10004c26 	beq	r2,zero,77d0 <__smakebuf_r+0x1a8>
    76a0:	8080030b 	ldhu	r2,12(r16)
    76a4:	80c010c4 	addi	r3,r16,67
    76a8:	80c00015 	stw	r3,0(r16)
    76ac:	10800054 	ori	r2,r2,1
    76b0:	8080030d 	sth	r2,12(r16)
    76b4:	00800044 	movi	r2,1
    76b8:	80c00415 	stw	r3,16(r16)
    76bc:	80800515 	stw	r2,20(r16)
    76c0:	04810004 	movi	r18,1024
    76c4:	00000706 	br	76e4 <__smakebuf_r+0xbc>
    76c8:	8080030b 	ldhu	r2,12(r16)
    76cc:	10c0200c 	andi	r3,r2,128
    76d0:	18001f1e 	bne	r3,zero,7750 <__smakebuf_r+0x128>
    76d4:	04810004 	movi	r18,1024
    76d8:	10820014 	ori	r2,r2,2048
    76dc:	8080030d 	sth	r2,12(r16)
    76e0:	0027883a 	mov	r19,zero
    76e4:	900b883a 	mov	r5,r18
    76e8:	8809883a 	mov	r4,r17
    76ec:	0001da80 	call	1da8 <_malloc_r>
    76f0:	10002c26 	beq	r2,zero,77a4 <__smakebuf_r+0x17c>
    76f4:	80c0030b 	ldhu	r3,12(r16)
    76f8:	01000034 	movhi	r4,0
    76fc:	2119cf04 	addi	r4,r4,26428
    7700:	89000f15 	stw	r4,60(r17)
    7704:	18c02014 	ori	r3,r3,128
    7708:	80c0030d 	sth	r3,12(r16)
    770c:	80800015 	stw	r2,0(r16)
    7710:	80800415 	stw	r2,16(r16)
    7714:	84800515 	stw	r18,20(r16)
    7718:	98001a1e 	bne	r19,zero,7784 <__smakebuf_r+0x15c>
    771c:	dfc01317 	ldw	ra,76(sp)
    7720:	dcc01217 	ldw	r19,72(sp)
    7724:	dc801117 	ldw	r18,68(sp)
    7728:	dc401017 	ldw	r17,64(sp)
    772c:	dc000f17 	ldw	r16,60(sp)
    7730:	dec01404 	addi	sp,sp,80
    7734:	f800283a 	ret
    7738:	288010c4 	addi	r2,r5,67
    773c:	28800015 	stw	r2,0(r5)
    7740:	28800415 	stw	r2,16(r5)
    7744:	00800044 	movi	r2,1
    7748:	28800515 	stw	r2,20(r5)
    774c:	f800283a 	ret
    7750:	04801004 	movi	r18,64
    7754:	003fe006 	br	76d8 <__alt_data_end+0xff0076d8>
    7758:	81000a17 	ldw	r4,40(r16)
    775c:	00c00074 	movhi	r3,1
    7760:	18e4d004 	addi	r3,r3,-27840
    7764:	20ffc51e 	bne	r4,r3,767c <__alt_data_end+0xff00767c>
    7768:	8080030b 	ldhu	r2,12(r16)
    776c:	04810004 	movi	r18,1024
    7770:	84801315 	stw	r18,76(r16)
    7774:	1484b03a 	or	r2,r2,r18
    7778:	8080030d 	sth	r2,12(r16)
    777c:	0027883a 	mov	r19,zero
    7780:	003fd806 	br	76e4 <__alt_data_end+0xff0076e4>
    7784:	8140038f 	ldh	r5,14(r16)
    7788:	8809883a 	mov	r4,r17
    778c:	000afa80 	call	afa8 <_isatty_r>
    7790:	103fe226 	beq	r2,zero,771c <__alt_data_end+0xff00771c>
    7794:	8080030b 	ldhu	r2,12(r16)
    7798:	10800054 	ori	r2,r2,1
    779c:	8080030d 	sth	r2,12(r16)
    77a0:	003fde06 	br	771c <__alt_data_end+0xff00771c>
    77a4:	8080030b 	ldhu	r2,12(r16)
    77a8:	10c0800c 	andi	r3,r2,512
    77ac:	183fdb1e 	bne	r3,zero,771c <__alt_data_end+0xff00771c>
    77b0:	10800094 	ori	r2,r2,2
    77b4:	80c010c4 	addi	r3,r16,67
    77b8:	8080030d 	sth	r2,12(r16)
    77bc:	00800044 	movi	r2,1
    77c0:	80c00015 	stw	r3,0(r16)
    77c4:	80c00415 	stw	r3,16(r16)
    77c8:	80800515 	stw	r2,20(r16)
    77cc:	003fd306 	br	771c <__alt_data_end+0xff00771c>
    77d0:	04810004 	movi	r18,1024
    77d4:	003fc306 	br	76e4 <__alt_data_end+0xff0076e4>
    77d8:	0027883a 	mov	r19,zero
    77dc:	04810004 	movi	r18,1024
    77e0:	003fc006 	br	76e4 <__alt_data_end+0xff0076e4>

000077e4 <memchr>:
    77e4:	208000cc 	andi	r2,r4,3
    77e8:	280f883a 	mov	r7,r5
    77ec:	10003426 	beq	r2,zero,78c0 <memchr+0xdc>
    77f0:	30bfffc4 	addi	r2,r6,-1
    77f4:	30001a26 	beq	r6,zero,7860 <memchr+0x7c>
    77f8:	20c00003 	ldbu	r3,0(r4)
    77fc:	29803fcc 	andi	r6,r5,255
    7800:	30c0051e 	bne	r6,r3,7818 <memchr+0x34>
    7804:	00001806 	br	7868 <memchr+0x84>
    7808:	10001526 	beq	r2,zero,7860 <memchr+0x7c>
    780c:	20c00003 	ldbu	r3,0(r4)
    7810:	10bfffc4 	addi	r2,r2,-1
    7814:	30c01426 	beq	r6,r3,7868 <memchr+0x84>
    7818:	21000044 	addi	r4,r4,1
    781c:	20c000cc 	andi	r3,r4,3
    7820:	183ff91e 	bne	r3,zero,7808 <__alt_data_end+0xff007808>
    7824:	020000c4 	movi	r8,3
    7828:	40801136 	bltu	r8,r2,7870 <memchr+0x8c>
    782c:	10000c26 	beq	r2,zero,7860 <memchr+0x7c>
    7830:	20c00003 	ldbu	r3,0(r4)
    7834:	29403fcc 	andi	r5,r5,255
    7838:	28c00b26 	beq	r5,r3,7868 <memchr+0x84>
    783c:	20c00044 	addi	r3,r4,1
    7840:	39803fcc 	andi	r6,r7,255
    7844:	2089883a 	add	r4,r4,r2
    7848:	00000306 	br	7858 <memchr+0x74>
    784c:	18c00044 	addi	r3,r3,1
    7850:	197fffc3 	ldbu	r5,-1(r3)
    7854:	31400526 	beq	r6,r5,786c <memchr+0x88>
    7858:	1805883a 	mov	r2,r3
    785c:	20fffb1e 	bne	r4,r3,784c <__alt_data_end+0xff00784c>
    7860:	0005883a 	mov	r2,zero
    7864:	f800283a 	ret
    7868:	2005883a 	mov	r2,r4
    786c:	f800283a 	ret
    7870:	28c03fcc 	andi	r3,r5,255
    7874:	1812923a 	slli	r9,r3,8
    7878:	02ffbff4 	movhi	r11,65279
    787c:	02a02074 	movhi	r10,32897
    7880:	48d2b03a 	or	r9,r9,r3
    7884:	4806943a 	slli	r3,r9,16
    7888:	5affbfc4 	addi	r11,r11,-257
    788c:	52a02004 	addi	r10,r10,-32640
    7890:	48d2b03a 	or	r9,r9,r3
    7894:	20c00017 	ldw	r3,0(r4)
    7898:	48c6f03a 	xor	r3,r9,r3
    789c:	1acd883a 	add	r6,r3,r11
    78a0:	00c6303a 	nor	r3,zero,r3
    78a4:	30c6703a 	and	r3,r6,r3
    78a8:	1a86703a 	and	r3,r3,r10
    78ac:	183fe01e 	bne	r3,zero,7830 <__alt_data_end+0xff007830>
    78b0:	10bfff04 	addi	r2,r2,-4
    78b4:	21000104 	addi	r4,r4,4
    78b8:	40bff636 	bltu	r8,r2,7894 <__alt_data_end+0xff007894>
    78bc:	003fdb06 	br	782c <__alt_data_end+0xff00782c>
    78c0:	3005883a 	mov	r2,r6
    78c4:	003fd706 	br	7824 <__alt_data_end+0xff007824>

000078c8 <memcpy>:
    78c8:	defffd04 	addi	sp,sp,-12
    78cc:	dfc00215 	stw	ra,8(sp)
    78d0:	dc400115 	stw	r17,4(sp)
    78d4:	dc000015 	stw	r16,0(sp)
    78d8:	00c003c4 	movi	r3,15
    78dc:	2005883a 	mov	r2,r4
    78e0:	1980452e 	bgeu	r3,r6,79f8 <memcpy+0x130>
    78e4:	2906b03a 	or	r3,r5,r4
    78e8:	18c000cc 	andi	r3,r3,3
    78ec:	1800441e 	bne	r3,zero,7a00 <memcpy+0x138>
    78f0:	347ffc04 	addi	r17,r6,-16
    78f4:	8822d13a 	srli	r17,r17,4
    78f8:	28c00104 	addi	r3,r5,4
    78fc:	23400104 	addi	r13,r4,4
    7900:	8820913a 	slli	r16,r17,4
    7904:	2b000204 	addi	r12,r5,8
    7908:	22c00204 	addi	r11,r4,8
    790c:	84000504 	addi	r16,r16,20
    7910:	2a800304 	addi	r10,r5,12
    7914:	22400304 	addi	r9,r4,12
    7918:	2c21883a 	add	r16,r5,r16
    791c:	2811883a 	mov	r8,r5
    7920:	200f883a 	mov	r7,r4
    7924:	41000017 	ldw	r4,0(r8)
    7928:	1fc00017 	ldw	ra,0(r3)
    792c:	63c00017 	ldw	r15,0(r12)
    7930:	39000015 	stw	r4,0(r7)
    7934:	53800017 	ldw	r14,0(r10)
    7938:	6fc00015 	stw	ra,0(r13)
    793c:	5bc00015 	stw	r15,0(r11)
    7940:	4b800015 	stw	r14,0(r9)
    7944:	18c00404 	addi	r3,r3,16
    7948:	39c00404 	addi	r7,r7,16
    794c:	42000404 	addi	r8,r8,16
    7950:	6b400404 	addi	r13,r13,16
    7954:	63000404 	addi	r12,r12,16
    7958:	5ac00404 	addi	r11,r11,16
    795c:	52800404 	addi	r10,r10,16
    7960:	4a400404 	addi	r9,r9,16
    7964:	1c3fef1e 	bne	r3,r16,7924 <__alt_data_end+0xff007924>
    7968:	89c00044 	addi	r7,r17,1
    796c:	380e913a 	slli	r7,r7,4
    7970:	310003cc 	andi	r4,r6,15
    7974:	02c000c4 	movi	r11,3
    7978:	11c7883a 	add	r3,r2,r7
    797c:	29cb883a 	add	r5,r5,r7
    7980:	5900212e 	bgeu	r11,r4,7a08 <memcpy+0x140>
    7984:	1813883a 	mov	r9,r3
    7988:	2811883a 	mov	r8,r5
    798c:	200f883a 	mov	r7,r4
    7990:	42800017 	ldw	r10,0(r8)
    7994:	4a400104 	addi	r9,r9,4
    7998:	39ffff04 	addi	r7,r7,-4
    799c:	4abfff15 	stw	r10,-4(r9)
    79a0:	42000104 	addi	r8,r8,4
    79a4:	59fffa36 	bltu	r11,r7,7990 <__alt_data_end+0xff007990>
    79a8:	213fff04 	addi	r4,r4,-4
    79ac:	2008d0ba 	srli	r4,r4,2
    79b0:	318000cc 	andi	r6,r6,3
    79b4:	21000044 	addi	r4,r4,1
    79b8:	2109883a 	add	r4,r4,r4
    79bc:	2109883a 	add	r4,r4,r4
    79c0:	1907883a 	add	r3,r3,r4
    79c4:	290b883a 	add	r5,r5,r4
    79c8:	30000626 	beq	r6,zero,79e4 <memcpy+0x11c>
    79cc:	198d883a 	add	r6,r3,r6
    79d0:	29c00003 	ldbu	r7,0(r5)
    79d4:	18c00044 	addi	r3,r3,1
    79d8:	29400044 	addi	r5,r5,1
    79dc:	19ffffc5 	stb	r7,-1(r3)
    79e0:	19bffb1e 	bne	r3,r6,79d0 <__alt_data_end+0xff0079d0>
    79e4:	dfc00217 	ldw	ra,8(sp)
    79e8:	dc400117 	ldw	r17,4(sp)
    79ec:	dc000017 	ldw	r16,0(sp)
    79f0:	dec00304 	addi	sp,sp,12
    79f4:	f800283a 	ret
    79f8:	2007883a 	mov	r3,r4
    79fc:	003ff206 	br	79c8 <__alt_data_end+0xff0079c8>
    7a00:	2007883a 	mov	r3,r4
    7a04:	003ff106 	br	79cc <__alt_data_end+0xff0079cc>
    7a08:	200d883a 	mov	r6,r4
    7a0c:	003fee06 	br	79c8 <__alt_data_end+0xff0079c8>

00007a10 <memmove>:
    7a10:	2005883a 	mov	r2,r4
    7a14:	29000b2e 	bgeu	r5,r4,7a44 <memmove+0x34>
    7a18:	298f883a 	add	r7,r5,r6
    7a1c:	21c0092e 	bgeu	r4,r7,7a44 <memmove+0x34>
    7a20:	2187883a 	add	r3,r4,r6
    7a24:	198bc83a 	sub	r5,r3,r6
    7a28:	30004826 	beq	r6,zero,7b4c <memmove+0x13c>
    7a2c:	39ffffc4 	addi	r7,r7,-1
    7a30:	39000003 	ldbu	r4,0(r7)
    7a34:	18ffffc4 	addi	r3,r3,-1
    7a38:	19000005 	stb	r4,0(r3)
    7a3c:	28fffb1e 	bne	r5,r3,7a2c <__alt_data_end+0xff007a2c>
    7a40:	f800283a 	ret
    7a44:	00c003c4 	movi	r3,15
    7a48:	1980412e 	bgeu	r3,r6,7b50 <memmove+0x140>
    7a4c:	2886b03a 	or	r3,r5,r2
    7a50:	18c000cc 	andi	r3,r3,3
    7a54:	1800401e 	bne	r3,zero,7b58 <memmove+0x148>
    7a58:	33fffc04 	addi	r15,r6,-16
    7a5c:	781ed13a 	srli	r15,r15,4
    7a60:	28c00104 	addi	r3,r5,4
    7a64:	13400104 	addi	r13,r2,4
    7a68:	781c913a 	slli	r14,r15,4
    7a6c:	2b000204 	addi	r12,r5,8
    7a70:	12c00204 	addi	r11,r2,8
    7a74:	73800504 	addi	r14,r14,20
    7a78:	2a800304 	addi	r10,r5,12
    7a7c:	12400304 	addi	r9,r2,12
    7a80:	2b9d883a 	add	r14,r5,r14
    7a84:	2811883a 	mov	r8,r5
    7a88:	100f883a 	mov	r7,r2
    7a8c:	41000017 	ldw	r4,0(r8)
    7a90:	39c00404 	addi	r7,r7,16
    7a94:	18c00404 	addi	r3,r3,16
    7a98:	393ffc15 	stw	r4,-16(r7)
    7a9c:	193ffc17 	ldw	r4,-16(r3)
    7aa0:	6b400404 	addi	r13,r13,16
    7aa4:	5ac00404 	addi	r11,r11,16
    7aa8:	693ffc15 	stw	r4,-16(r13)
    7aac:	61000017 	ldw	r4,0(r12)
    7ab0:	4a400404 	addi	r9,r9,16
    7ab4:	42000404 	addi	r8,r8,16
    7ab8:	593ffc15 	stw	r4,-16(r11)
    7abc:	51000017 	ldw	r4,0(r10)
    7ac0:	63000404 	addi	r12,r12,16
    7ac4:	52800404 	addi	r10,r10,16
    7ac8:	493ffc15 	stw	r4,-16(r9)
    7acc:	1bbfef1e 	bne	r3,r14,7a8c <__alt_data_end+0xff007a8c>
    7ad0:	79000044 	addi	r4,r15,1
    7ad4:	2008913a 	slli	r4,r4,4
    7ad8:	328003cc 	andi	r10,r6,15
    7adc:	02c000c4 	movi	r11,3
    7ae0:	1107883a 	add	r3,r2,r4
    7ae4:	290b883a 	add	r5,r5,r4
    7ae8:	5a801e2e 	bgeu	r11,r10,7b64 <memmove+0x154>
    7aec:	1813883a 	mov	r9,r3
    7af0:	2811883a 	mov	r8,r5
    7af4:	500f883a 	mov	r7,r10
    7af8:	41000017 	ldw	r4,0(r8)
    7afc:	4a400104 	addi	r9,r9,4
    7b00:	39ffff04 	addi	r7,r7,-4
    7b04:	493fff15 	stw	r4,-4(r9)
    7b08:	42000104 	addi	r8,r8,4
    7b0c:	59fffa36 	bltu	r11,r7,7af8 <__alt_data_end+0xff007af8>
    7b10:	513fff04 	addi	r4,r10,-4
    7b14:	2008d0ba 	srli	r4,r4,2
    7b18:	318000cc 	andi	r6,r6,3
    7b1c:	21000044 	addi	r4,r4,1
    7b20:	2109883a 	add	r4,r4,r4
    7b24:	2109883a 	add	r4,r4,r4
    7b28:	1907883a 	add	r3,r3,r4
    7b2c:	290b883a 	add	r5,r5,r4
    7b30:	30000b26 	beq	r6,zero,7b60 <memmove+0x150>
    7b34:	198d883a 	add	r6,r3,r6
    7b38:	29c00003 	ldbu	r7,0(r5)
    7b3c:	18c00044 	addi	r3,r3,1
    7b40:	29400044 	addi	r5,r5,1
    7b44:	19ffffc5 	stb	r7,-1(r3)
    7b48:	19bffb1e 	bne	r3,r6,7b38 <__alt_data_end+0xff007b38>
    7b4c:	f800283a 	ret
    7b50:	1007883a 	mov	r3,r2
    7b54:	003ff606 	br	7b30 <__alt_data_end+0xff007b30>
    7b58:	1007883a 	mov	r3,r2
    7b5c:	003ff506 	br	7b34 <__alt_data_end+0xff007b34>
    7b60:	f800283a 	ret
    7b64:	500d883a 	mov	r6,r10
    7b68:	003ff106 	br	7b30 <__alt_data_end+0xff007b30>

00007b6c <memset>:
    7b6c:	20c000cc 	andi	r3,r4,3
    7b70:	2005883a 	mov	r2,r4
    7b74:	18004426 	beq	r3,zero,7c88 <memset+0x11c>
    7b78:	31ffffc4 	addi	r7,r6,-1
    7b7c:	30004026 	beq	r6,zero,7c80 <memset+0x114>
    7b80:	2813883a 	mov	r9,r5
    7b84:	200d883a 	mov	r6,r4
    7b88:	2007883a 	mov	r3,r4
    7b8c:	00000406 	br	7ba0 <memset+0x34>
    7b90:	3a3fffc4 	addi	r8,r7,-1
    7b94:	31800044 	addi	r6,r6,1
    7b98:	38003926 	beq	r7,zero,7c80 <memset+0x114>
    7b9c:	400f883a 	mov	r7,r8
    7ba0:	18c00044 	addi	r3,r3,1
    7ba4:	32400005 	stb	r9,0(r6)
    7ba8:	1a0000cc 	andi	r8,r3,3
    7bac:	403ff81e 	bne	r8,zero,7b90 <__alt_data_end+0xff007b90>
    7bb0:	010000c4 	movi	r4,3
    7bb4:	21c02d2e 	bgeu	r4,r7,7c6c <memset+0x100>
    7bb8:	29003fcc 	andi	r4,r5,255
    7bbc:	200c923a 	slli	r6,r4,8
    7bc0:	3108b03a 	or	r4,r6,r4
    7bc4:	200c943a 	slli	r6,r4,16
    7bc8:	218cb03a 	or	r6,r4,r6
    7bcc:	010003c4 	movi	r4,15
    7bd0:	21c0182e 	bgeu	r4,r7,7c34 <memset+0xc8>
    7bd4:	3b3ffc04 	addi	r12,r7,-16
    7bd8:	6018d13a 	srli	r12,r12,4
    7bdc:	1a000104 	addi	r8,r3,4
    7be0:	1ac00204 	addi	r11,r3,8
    7be4:	6008913a 	slli	r4,r12,4
    7be8:	1a800304 	addi	r10,r3,12
    7bec:	1813883a 	mov	r9,r3
    7bf0:	21000504 	addi	r4,r4,20
    7bf4:	1909883a 	add	r4,r3,r4
    7bf8:	49800015 	stw	r6,0(r9)
    7bfc:	41800015 	stw	r6,0(r8)
    7c00:	59800015 	stw	r6,0(r11)
    7c04:	51800015 	stw	r6,0(r10)
    7c08:	42000404 	addi	r8,r8,16
    7c0c:	4a400404 	addi	r9,r9,16
    7c10:	5ac00404 	addi	r11,r11,16
    7c14:	52800404 	addi	r10,r10,16
    7c18:	413ff71e 	bne	r8,r4,7bf8 <__alt_data_end+0xff007bf8>
    7c1c:	63000044 	addi	r12,r12,1
    7c20:	6018913a 	slli	r12,r12,4
    7c24:	39c003cc 	andi	r7,r7,15
    7c28:	010000c4 	movi	r4,3
    7c2c:	1b07883a 	add	r3,r3,r12
    7c30:	21c00e2e 	bgeu	r4,r7,7c6c <memset+0x100>
    7c34:	1813883a 	mov	r9,r3
    7c38:	3811883a 	mov	r8,r7
    7c3c:	010000c4 	movi	r4,3
    7c40:	49800015 	stw	r6,0(r9)
    7c44:	423fff04 	addi	r8,r8,-4
    7c48:	4a400104 	addi	r9,r9,4
    7c4c:	223ffc36 	bltu	r4,r8,7c40 <__alt_data_end+0xff007c40>
    7c50:	393fff04 	addi	r4,r7,-4
    7c54:	2008d0ba 	srli	r4,r4,2
    7c58:	39c000cc 	andi	r7,r7,3
    7c5c:	21000044 	addi	r4,r4,1
    7c60:	2109883a 	add	r4,r4,r4
    7c64:	2109883a 	add	r4,r4,r4
    7c68:	1907883a 	add	r3,r3,r4
    7c6c:	38000526 	beq	r7,zero,7c84 <memset+0x118>
    7c70:	19cf883a 	add	r7,r3,r7
    7c74:	19400005 	stb	r5,0(r3)
    7c78:	18c00044 	addi	r3,r3,1
    7c7c:	38fffd1e 	bne	r7,r3,7c74 <__alt_data_end+0xff007c74>
    7c80:	f800283a 	ret
    7c84:	f800283a 	ret
    7c88:	2007883a 	mov	r3,r4
    7c8c:	300f883a 	mov	r7,r6
    7c90:	003fc706 	br	7bb0 <__alt_data_end+0xff007bb0>

00007c94 <_Balloc>:
    7c94:	20801317 	ldw	r2,76(r4)
    7c98:	defffc04 	addi	sp,sp,-16
    7c9c:	dc400115 	stw	r17,4(sp)
    7ca0:	dc000015 	stw	r16,0(sp)
    7ca4:	dfc00315 	stw	ra,12(sp)
    7ca8:	dc800215 	stw	r18,8(sp)
    7cac:	2023883a 	mov	r17,r4
    7cb0:	2821883a 	mov	r16,r5
    7cb4:	10000f26 	beq	r2,zero,7cf4 <_Balloc+0x60>
    7cb8:	8407883a 	add	r3,r16,r16
    7cbc:	18c7883a 	add	r3,r3,r3
    7cc0:	10c7883a 	add	r3,r2,r3
    7cc4:	18800017 	ldw	r2,0(r3)
    7cc8:	10001126 	beq	r2,zero,7d10 <_Balloc+0x7c>
    7ccc:	11000017 	ldw	r4,0(r2)
    7cd0:	19000015 	stw	r4,0(r3)
    7cd4:	10000415 	stw	zero,16(r2)
    7cd8:	10000315 	stw	zero,12(r2)
    7cdc:	dfc00317 	ldw	ra,12(sp)
    7ce0:	dc800217 	ldw	r18,8(sp)
    7ce4:	dc400117 	ldw	r17,4(sp)
    7ce8:	dc000017 	ldw	r16,0(sp)
    7cec:	dec00404 	addi	sp,sp,16
    7cf0:	f800283a 	ret
    7cf4:	01800844 	movi	r6,33
    7cf8:	01400104 	movi	r5,4
    7cfc:	000ab7c0 	call	ab7c <_calloc_r>
    7d00:	88801315 	stw	r2,76(r17)
    7d04:	103fec1e 	bne	r2,zero,7cb8 <__alt_data_end+0xff007cb8>
    7d08:	0005883a 	mov	r2,zero
    7d0c:	003ff306 	br	7cdc <__alt_data_end+0xff007cdc>
    7d10:	01400044 	movi	r5,1
    7d14:	2c24983a 	sll	r18,r5,r16
    7d18:	8809883a 	mov	r4,r17
    7d1c:	91800144 	addi	r6,r18,5
    7d20:	318d883a 	add	r6,r6,r6
    7d24:	318d883a 	add	r6,r6,r6
    7d28:	000ab7c0 	call	ab7c <_calloc_r>
    7d2c:	103ff626 	beq	r2,zero,7d08 <__alt_data_end+0xff007d08>
    7d30:	14000115 	stw	r16,4(r2)
    7d34:	14800215 	stw	r18,8(r2)
    7d38:	003fe606 	br	7cd4 <__alt_data_end+0xff007cd4>

00007d3c <_Bfree>:
    7d3c:	28000826 	beq	r5,zero,7d60 <_Bfree+0x24>
    7d40:	28c00117 	ldw	r3,4(r5)
    7d44:	20801317 	ldw	r2,76(r4)
    7d48:	18c7883a 	add	r3,r3,r3
    7d4c:	18c7883a 	add	r3,r3,r3
    7d50:	10c5883a 	add	r2,r2,r3
    7d54:	10c00017 	ldw	r3,0(r2)
    7d58:	28c00015 	stw	r3,0(r5)
    7d5c:	11400015 	stw	r5,0(r2)
    7d60:	f800283a 	ret

00007d64 <__multadd>:
    7d64:	defffa04 	addi	sp,sp,-24
    7d68:	dc800315 	stw	r18,12(sp)
    7d6c:	dc400215 	stw	r17,8(sp)
    7d70:	dc000115 	stw	r16,4(sp)
    7d74:	2823883a 	mov	r17,r5
    7d78:	2c000417 	ldw	r16,16(r5)
    7d7c:	dfc00515 	stw	ra,20(sp)
    7d80:	dcc00415 	stw	r19,16(sp)
    7d84:	2025883a 	mov	r18,r4
    7d88:	29400504 	addi	r5,r5,20
    7d8c:	0011883a 	mov	r8,zero
    7d90:	28c00017 	ldw	r3,0(r5)
    7d94:	29400104 	addi	r5,r5,4
    7d98:	42000044 	addi	r8,r8,1
    7d9c:	18bfffcc 	andi	r2,r3,65535
    7da0:	1185383a 	mul	r2,r2,r6
    7da4:	1806d43a 	srli	r3,r3,16
    7da8:	11cf883a 	add	r7,r2,r7
    7dac:	3808d43a 	srli	r4,r7,16
    7db0:	1987383a 	mul	r3,r3,r6
    7db4:	38bfffcc 	andi	r2,r7,65535
    7db8:	1907883a 	add	r3,r3,r4
    7dbc:	1808943a 	slli	r4,r3,16
    7dc0:	180ed43a 	srli	r7,r3,16
    7dc4:	2085883a 	add	r2,r4,r2
    7dc8:	28bfff15 	stw	r2,-4(r5)
    7dcc:	443ff016 	blt	r8,r16,7d90 <__alt_data_end+0xff007d90>
    7dd0:	38000926 	beq	r7,zero,7df8 <__multadd+0x94>
    7dd4:	88800217 	ldw	r2,8(r17)
    7dd8:	80800f0e 	bge	r16,r2,7e18 <__multadd+0xb4>
    7ddc:	80800144 	addi	r2,r16,5
    7de0:	1085883a 	add	r2,r2,r2
    7de4:	1085883a 	add	r2,r2,r2
    7de8:	8885883a 	add	r2,r17,r2
    7dec:	11c00015 	stw	r7,0(r2)
    7df0:	84000044 	addi	r16,r16,1
    7df4:	8c000415 	stw	r16,16(r17)
    7df8:	8805883a 	mov	r2,r17
    7dfc:	dfc00517 	ldw	ra,20(sp)
    7e00:	dcc00417 	ldw	r19,16(sp)
    7e04:	dc800317 	ldw	r18,12(sp)
    7e08:	dc400217 	ldw	r17,8(sp)
    7e0c:	dc000117 	ldw	r16,4(sp)
    7e10:	dec00604 	addi	sp,sp,24
    7e14:	f800283a 	ret
    7e18:	89400117 	ldw	r5,4(r17)
    7e1c:	9009883a 	mov	r4,r18
    7e20:	d9c00015 	stw	r7,0(sp)
    7e24:	29400044 	addi	r5,r5,1
    7e28:	0007c940 	call	7c94 <_Balloc>
    7e2c:	89800417 	ldw	r6,16(r17)
    7e30:	89400304 	addi	r5,r17,12
    7e34:	11000304 	addi	r4,r2,12
    7e38:	31800084 	addi	r6,r6,2
    7e3c:	318d883a 	add	r6,r6,r6
    7e40:	318d883a 	add	r6,r6,r6
    7e44:	1027883a 	mov	r19,r2
    7e48:	00078c80 	call	78c8 <memcpy>
    7e4c:	d9c00017 	ldw	r7,0(sp)
    7e50:	88000a26 	beq	r17,zero,7e7c <__multadd+0x118>
    7e54:	88c00117 	ldw	r3,4(r17)
    7e58:	90801317 	ldw	r2,76(r18)
    7e5c:	18c7883a 	add	r3,r3,r3
    7e60:	18c7883a 	add	r3,r3,r3
    7e64:	10c5883a 	add	r2,r2,r3
    7e68:	10c00017 	ldw	r3,0(r2)
    7e6c:	88c00015 	stw	r3,0(r17)
    7e70:	14400015 	stw	r17,0(r2)
    7e74:	9823883a 	mov	r17,r19
    7e78:	003fd806 	br	7ddc <__alt_data_end+0xff007ddc>
    7e7c:	9823883a 	mov	r17,r19
    7e80:	003fd606 	br	7ddc <__alt_data_end+0xff007ddc>

00007e84 <__s2b>:
    7e84:	defff904 	addi	sp,sp,-28
    7e88:	dc400115 	stw	r17,4(sp)
    7e8c:	dc000015 	stw	r16,0(sp)
    7e90:	2023883a 	mov	r17,r4
    7e94:	2821883a 	mov	r16,r5
    7e98:	39000204 	addi	r4,r7,8
    7e9c:	01400244 	movi	r5,9
    7ea0:	dcc00315 	stw	r19,12(sp)
    7ea4:	dc800215 	stw	r18,8(sp)
    7ea8:	dfc00615 	stw	ra,24(sp)
    7eac:	dd400515 	stw	r21,20(sp)
    7eb0:	dd000415 	stw	r20,16(sp)
    7eb4:	3825883a 	mov	r18,r7
    7eb8:	3027883a 	mov	r19,r6
    7ebc:	000beac0 	call	beac <__divsi3>
    7ec0:	00c00044 	movi	r3,1
    7ec4:	000b883a 	mov	r5,zero
    7ec8:	1880030e 	bge	r3,r2,7ed8 <__s2b+0x54>
    7ecc:	18c7883a 	add	r3,r3,r3
    7ed0:	29400044 	addi	r5,r5,1
    7ed4:	18bffd16 	blt	r3,r2,7ecc <__alt_data_end+0xff007ecc>
    7ed8:	8809883a 	mov	r4,r17
    7edc:	0007c940 	call	7c94 <_Balloc>
    7ee0:	d8c00717 	ldw	r3,28(sp)
    7ee4:	10c00515 	stw	r3,20(r2)
    7ee8:	00c00044 	movi	r3,1
    7eec:	10c00415 	stw	r3,16(r2)
    7ef0:	00c00244 	movi	r3,9
    7ef4:	1cc0210e 	bge	r3,r19,7f7c <__s2b+0xf8>
    7ef8:	80eb883a 	add	r21,r16,r3
    7efc:	a829883a 	mov	r20,r21
    7f00:	84e1883a 	add	r16,r16,r19
    7f04:	a1c00007 	ldb	r7,0(r20)
    7f08:	01800284 	movi	r6,10
    7f0c:	a5000044 	addi	r20,r20,1
    7f10:	100b883a 	mov	r5,r2
    7f14:	39fff404 	addi	r7,r7,-48
    7f18:	8809883a 	mov	r4,r17
    7f1c:	0007d640 	call	7d64 <__multadd>
    7f20:	a43ff81e 	bne	r20,r16,7f04 <__alt_data_end+0xff007f04>
    7f24:	ace1883a 	add	r16,r21,r19
    7f28:	843ffe04 	addi	r16,r16,-8
    7f2c:	9c800a0e 	bge	r19,r18,7f58 <__s2b+0xd4>
    7f30:	94e5c83a 	sub	r18,r18,r19
    7f34:	84a5883a 	add	r18,r16,r18
    7f38:	81c00007 	ldb	r7,0(r16)
    7f3c:	01800284 	movi	r6,10
    7f40:	84000044 	addi	r16,r16,1
    7f44:	100b883a 	mov	r5,r2
    7f48:	39fff404 	addi	r7,r7,-48
    7f4c:	8809883a 	mov	r4,r17
    7f50:	0007d640 	call	7d64 <__multadd>
    7f54:	84bff81e 	bne	r16,r18,7f38 <__alt_data_end+0xff007f38>
    7f58:	dfc00617 	ldw	ra,24(sp)
    7f5c:	dd400517 	ldw	r21,20(sp)
    7f60:	dd000417 	ldw	r20,16(sp)
    7f64:	dcc00317 	ldw	r19,12(sp)
    7f68:	dc800217 	ldw	r18,8(sp)
    7f6c:	dc400117 	ldw	r17,4(sp)
    7f70:	dc000017 	ldw	r16,0(sp)
    7f74:	dec00704 	addi	sp,sp,28
    7f78:	f800283a 	ret
    7f7c:	84000284 	addi	r16,r16,10
    7f80:	1827883a 	mov	r19,r3
    7f84:	003fe906 	br	7f2c <__alt_data_end+0xff007f2c>

00007f88 <__hi0bits>:
    7f88:	20bfffec 	andhi	r2,r4,65535
    7f8c:	1000141e 	bne	r2,zero,7fe0 <__hi0bits+0x58>
    7f90:	2008943a 	slli	r4,r4,16
    7f94:	00800404 	movi	r2,16
    7f98:	20ffc02c 	andhi	r3,r4,65280
    7f9c:	1800021e 	bne	r3,zero,7fa8 <__hi0bits+0x20>
    7fa0:	2008923a 	slli	r4,r4,8
    7fa4:	10800204 	addi	r2,r2,8
    7fa8:	20fc002c 	andhi	r3,r4,61440
    7fac:	1800021e 	bne	r3,zero,7fb8 <__hi0bits+0x30>
    7fb0:	2008913a 	slli	r4,r4,4
    7fb4:	10800104 	addi	r2,r2,4
    7fb8:	20f0002c 	andhi	r3,r4,49152
    7fbc:	1800031e 	bne	r3,zero,7fcc <__hi0bits+0x44>
    7fc0:	2109883a 	add	r4,r4,r4
    7fc4:	10800084 	addi	r2,r2,2
    7fc8:	2109883a 	add	r4,r4,r4
    7fcc:	20000316 	blt	r4,zero,7fdc <__hi0bits+0x54>
    7fd0:	2110002c 	andhi	r4,r4,16384
    7fd4:	2000041e 	bne	r4,zero,7fe8 <__hi0bits+0x60>
    7fd8:	00800804 	movi	r2,32
    7fdc:	f800283a 	ret
    7fe0:	0005883a 	mov	r2,zero
    7fe4:	003fec06 	br	7f98 <__alt_data_end+0xff007f98>
    7fe8:	10800044 	addi	r2,r2,1
    7fec:	f800283a 	ret

00007ff0 <__lo0bits>:
    7ff0:	20c00017 	ldw	r3,0(r4)
    7ff4:	188001cc 	andi	r2,r3,7
    7ff8:	10000826 	beq	r2,zero,801c <__lo0bits+0x2c>
    7ffc:	1880004c 	andi	r2,r3,1
    8000:	1000211e 	bne	r2,zero,8088 <__lo0bits+0x98>
    8004:	1880008c 	andi	r2,r3,2
    8008:	1000211e 	bne	r2,zero,8090 <__lo0bits+0xa0>
    800c:	1806d0ba 	srli	r3,r3,2
    8010:	00800084 	movi	r2,2
    8014:	20c00015 	stw	r3,0(r4)
    8018:	f800283a 	ret
    801c:	18bfffcc 	andi	r2,r3,65535
    8020:	10001326 	beq	r2,zero,8070 <__lo0bits+0x80>
    8024:	0005883a 	mov	r2,zero
    8028:	19403fcc 	andi	r5,r3,255
    802c:	2800021e 	bne	r5,zero,8038 <__lo0bits+0x48>
    8030:	1806d23a 	srli	r3,r3,8
    8034:	10800204 	addi	r2,r2,8
    8038:	194003cc 	andi	r5,r3,15
    803c:	2800021e 	bne	r5,zero,8048 <__lo0bits+0x58>
    8040:	1806d13a 	srli	r3,r3,4
    8044:	10800104 	addi	r2,r2,4
    8048:	194000cc 	andi	r5,r3,3
    804c:	2800021e 	bne	r5,zero,8058 <__lo0bits+0x68>
    8050:	1806d0ba 	srli	r3,r3,2
    8054:	10800084 	addi	r2,r2,2
    8058:	1940004c 	andi	r5,r3,1
    805c:	2800081e 	bne	r5,zero,8080 <__lo0bits+0x90>
    8060:	1806d07a 	srli	r3,r3,1
    8064:	1800051e 	bne	r3,zero,807c <__lo0bits+0x8c>
    8068:	00800804 	movi	r2,32
    806c:	f800283a 	ret
    8070:	1806d43a 	srli	r3,r3,16
    8074:	00800404 	movi	r2,16
    8078:	003feb06 	br	8028 <__alt_data_end+0xff008028>
    807c:	10800044 	addi	r2,r2,1
    8080:	20c00015 	stw	r3,0(r4)
    8084:	f800283a 	ret
    8088:	0005883a 	mov	r2,zero
    808c:	f800283a 	ret
    8090:	1806d07a 	srli	r3,r3,1
    8094:	00800044 	movi	r2,1
    8098:	20c00015 	stw	r3,0(r4)
    809c:	f800283a 	ret

000080a0 <__i2b>:
    80a0:	defffd04 	addi	sp,sp,-12
    80a4:	dc000015 	stw	r16,0(sp)
    80a8:	04000044 	movi	r16,1
    80ac:	dc400115 	stw	r17,4(sp)
    80b0:	2823883a 	mov	r17,r5
    80b4:	800b883a 	mov	r5,r16
    80b8:	dfc00215 	stw	ra,8(sp)
    80bc:	0007c940 	call	7c94 <_Balloc>
    80c0:	14400515 	stw	r17,20(r2)
    80c4:	14000415 	stw	r16,16(r2)
    80c8:	dfc00217 	ldw	ra,8(sp)
    80cc:	dc400117 	ldw	r17,4(sp)
    80d0:	dc000017 	ldw	r16,0(sp)
    80d4:	dec00304 	addi	sp,sp,12
    80d8:	f800283a 	ret

000080dc <__multiply>:
    80dc:	defffa04 	addi	sp,sp,-24
    80e0:	dcc00315 	stw	r19,12(sp)
    80e4:	dc800215 	stw	r18,8(sp)
    80e8:	34c00417 	ldw	r19,16(r6)
    80ec:	2c800417 	ldw	r18,16(r5)
    80f0:	dd000415 	stw	r20,16(sp)
    80f4:	dc400115 	stw	r17,4(sp)
    80f8:	dfc00515 	stw	ra,20(sp)
    80fc:	dc000015 	stw	r16,0(sp)
    8100:	2829883a 	mov	r20,r5
    8104:	3023883a 	mov	r17,r6
    8108:	94c0050e 	bge	r18,r19,8120 <__multiply+0x44>
    810c:	9007883a 	mov	r3,r18
    8110:	3029883a 	mov	r20,r6
    8114:	9825883a 	mov	r18,r19
    8118:	2823883a 	mov	r17,r5
    811c:	1827883a 	mov	r19,r3
    8120:	a0800217 	ldw	r2,8(r20)
    8124:	94e1883a 	add	r16,r18,r19
    8128:	a1400117 	ldw	r5,4(r20)
    812c:	1400010e 	bge	r2,r16,8134 <__multiply+0x58>
    8130:	29400044 	addi	r5,r5,1
    8134:	0007c940 	call	7c94 <_Balloc>
    8138:	8415883a 	add	r10,r16,r16
    813c:	12c00504 	addi	r11,r2,20
    8140:	5295883a 	add	r10,r10,r10
    8144:	5a95883a 	add	r10,r11,r10
    8148:	5807883a 	mov	r3,r11
    814c:	5a80032e 	bgeu	r11,r10,815c <__multiply+0x80>
    8150:	18000015 	stw	zero,0(r3)
    8154:	18c00104 	addi	r3,r3,4
    8158:	1abffd36 	bltu	r3,r10,8150 <__alt_data_end+0xff008150>
    815c:	9ce7883a 	add	r19,r19,r19
    8160:	94a5883a 	add	r18,r18,r18
    8164:	89800504 	addi	r6,r17,20
    8168:	9ce7883a 	add	r19,r19,r19
    816c:	a3400504 	addi	r13,r20,20
    8170:	94a5883a 	add	r18,r18,r18
    8174:	34d9883a 	add	r12,r6,r19
    8178:	6c93883a 	add	r9,r13,r18
    817c:	3300422e 	bgeu	r6,r12,8288 <__multiply+0x1ac>
    8180:	37c00017 	ldw	ra,0(r6)
    8184:	fbffffcc 	andi	r15,ra,65535
    8188:	78001b26 	beq	r15,zero,81f8 <__multiply+0x11c>
    818c:	5811883a 	mov	r8,r11
    8190:	681d883a 	mov	r14,r13
    8194:	000f883a 	mov	r7,zero
    8198:	71000017 	ldw	r4,0(r14)
    819c:	40c00017 	ldw	r3,0(r8)
    81a0:	73800104 	addi	r14,r14,4
    81a4:	217fffcc 	andi	r5,r4,65535
    81a8:	2bcb383a 	mul	r5,r5,r15
    81ac:	2008d43a 	srli	r4,r4,16
    81b0:	1c7fffcc 	andi	r17,r3,65535
    81b4:	2c4b883a 	add	r5,r5,r17
    81b8:	29cb883a 	add	r5,r5,r7
    81bc:	23c9383a 	mul	r4,r4,r15
    81c0:	1806d43a 	srli	r3,r3,16
    81c4:	280ed43a 	srli	r7,r5,16
    81c8:	297fffcc 	andi	r5,r5,65535
    81cc:	20c7883a 	add	r3,r4,r3
    81d0:	19c7883a 	add	r3,r3,r7
    81d4:	1808943a 	slli	r4,r3,16
    81d8:	4023883a 	mov	r17,r8
    81dc:	180ed43a 	srli	r7,r3,16
    81e0:	214ab03a 	or	r5,r4,r5
    81e4:	41400015 	stw	r5,0(r8)
    81e8:	42000104 	addi	r8,r8,4
    81ec:	727fea36 	bltu	r14,r9,8198 <__alt_data_end+0xff008198>
    81f0:	89c00115 	stw	r7,4(r17)
    81f4:	37c00017 	ldw	ra,0(r6)
    81f8:	f83ed43a 	srli	ra,ra,16
    81fc:	f8001f26 	beq	ra,zero,827c <__multiply+0x1a0>
    8200:	58c00017 	ldw	r3,0(r11)
    8204:	681d883a 	mov	r14,r13
    8208:	581f883a 	mov	r15,r11
    820c:	1811883a 	mov	r8,r3
    8210:	5825883a 	mov	r18,r11
    8214:	000f883a 	mov	r7,zero
    8218:	00000106 	br	8220 <__multiply+0x144>
    821c:	8825883a 	mov	r18,r17
    8220:	7140000b 	ldhu	r5,0(r14)
    8224:	4010d43a 	srli	r8,r8,16
    8228:	193fffcc 	andi	r4,r3,65535
    822c:	2fcb383a 	mul	r5,r5,ra
    8230:	7bc00104 	addi	r15,r15,4
    8234:	73800104 	addi	r14,r14,4
    8238:	2a0b883a 	add	r5,r5,r8
    823c:	29cb883a 	add	r5,r5,r7
    8240:	2806943a 	slli	r3,r5,16
    8244:	94400104 	addi	r17,r18,4
    8248:	280ad43a 	srli	r5,r5,16
    824c:	1908b03a 	or	r4,r3,r4
    8250:	793fff15 	stw	r4,-4(r15)
    8254:	70ffff17 	ldw	r3,-4(r14)
    8258:	8a000017 	ldw	r8,0(r17)
    825c:	1806d43a 	srli	r3,r3,16
    8260:	413fffcc 	andi	r4,r8,65535
    8264:	1fc7383a 	mul	r3,r3,ra
    8268:	1907883a 	add	r3,r3,r4
    826c:	1947883a 	add	r3,r3,r5
    8270:	180ed43a 	srli	r7,r3,16
    8274:	727fe936 	bltu	r14,r9,821c <__alt_data_end+0xff00821c>
    8278:	90c00115 	stw	r3,4(r18)
    827c:	31800104 	addi	r6,r6,4
    8280:	5ac00104 	addi	r11,r11,4
    8284:	333fbe36 	bltu	r6,r12,8180 <__alt_data_end+0xff008180>
    8288:	0400090e 	bge	zero,r16,82b0 <__multiply+0x1d4>
    828c:	50ffff17 	ldw	r3,-4(r10)
    8290:	52bfff04 	addi	r10,r10,-4
    8294:	18000326 	beq	r3,zero,82a4 <__multiply+0x1c8>
    8298:	00000506 	br	82b0 <__multiply+0x1d4>
    829c:	50c00017 	ldw	r3,0(r10)
    82a0:	1800031e 	bne	r3,zero,82b0 <__multiply+0x1d4>
    82a4:	843fffc4 	addi	r16,r16,-1
    82a8:	52bfff04 	addi	r10,r10,-4
    82ac:	803ffb1e 	bne	r16,zero,829c <__alt_data_end+0xff00829c>
    82b0:	14000415 	stw	r16,16(r2)
    82b4:	dfc00517 	ldw	ra,20(sp)
    82b8:	dd000417 	ldw	r20,16(sp)
    82bc:	dcc00317 	ldw	r19,12(sp)
    82c0:	dc800217 	ldw	r18,8(sp)
    82c4:	dc400117 	ldw	r17,4(sp)
    82c8:	dc000017 	ldw	r16,0(sp)
    82cc:	dec00604 	addi	sp,sp,24
    82d0:	f800283a 	ret

000082d4 <__pow5mult>:
    82d4:	defffa04 	addi	sp,sp,-24
    82d8:	dcc00315 	stw	r19,12(sp)
    82dc:	dc000015 	stw	r16,0(sp)
    82e0:	dfc00515 	stw	ra,20(sp)
    82e4:	dd000415 	stw	r20,16(sp)
    82e8:	dc800215 	stw	r18,8(sp)
    82ec:	dc400115 	stw	r17,4(sp)
    82f0:	308000cc 	andi	r2,r6,3
    82f4:	3021883a 	mov	r16,r6
    82f8:	2027883a 	mov	r19,r4
    82fc:	10002f1e 	bne	r2,zero,83bc <__pow5mult+0xe8>
    8300:	2825883a 	mov	r18,r5
    8304:	8021d0ba 	srai	r16,r16,2
    8308:	80001a26 	beq	r16,zero,8374 <__pow5mult+0xa0>
    830c:	9c401217 	ldw	r17,72(r19)
    8310:	8800061e 	bne	r17,zero,832c <__pow5mult+0x58>
    8314:	00003406 	br	83e8 <__pow5mult+0x114>
    8318:	8021d07a 	srai	r16,r16,1
    831c:	80001526 	beq	r16,zero,8374 <__pow5mult+0xa0>
    8320:	88800017 	ldw	r2,0(r17)
    8324:	10001c26 	beq	r2,zero,8398 <__pow5mult+0xc4>
    8328:	1023883a 	mov	r17,r2
    832c:	8080004c 	andi	r2,r16,1
    8330:	103ff926 	beq	r2,zero,8318 <__alt_data_end+0xff008318>
    8334:	880d883a 	mov	r6,r17
    8338:	900b883a 	mov	r5,r18
    833c:	9809883a 	mov	r4,r19
    8340:	00080dc0 	call	80dc <__multiply>
    8344:	90001b26 	beq	r18,zero,83b4 <__pow5mult+0xe0>
    8348:	91000117 	ldw	r4,4(r18)
    834c:	98c01317 	ldw	r3,76(r19)
    8350:	8021d07a 	srai	r16,r16,1
    8354:	2109883a 	add	r4,r4,r4
    8358:	2109883a 	add	r4,r4,r4
    835c:	1907883a 	add	r3,r3,r4
    8360:	19000017 	ldw	r4,0(r3)
    8364:	91000015 	stw	r4,0(r18)
    8368:	1c800015 	stw	r18,0(r3)
    836c:	1025883a 	mov	r18,r2
    8370:	803feb1e 	bne	r16,zero,8320 <__alt_data_end+0xff008320>
    8374:	9005883a 	mov	r2,r18
    8378:	dfc00517 	ldw	ra,20(sp)
    837c:	dd000417 	ldw	r20,16(sp)
    8380:	dcc00317 	ldw	r19,12(sp)
    8384:	dc800217 	ldw	r18,8(sp)
    8388:	dc400117 	ldw	r17,4(sp)
    838c:	dc000017 	ldw	r16,0(sp)
    8390:	dec00604 	addi	sp,sp,24
    8394:	f800283a 	ret
    8398:	880d883a 	mov	r6,r17
    839c:	880b883a 	mov	r5,r17
    83a0:	9809883a 	mov	r4,r19
    83a4:	00080dc0 	call	80dc <__multiply>
    83a8:	88800015 	stw	r2,0(r17)
    83ac:	10000015 	stw	zero,0(r2)
    83b0:	003fdd06 	br	8328 <__alt_data_end+0xff008328>
    83b4:	1025883a 	mov	r18,r2
    83b8:	003fd706 	br	8318 <__alt_data_end+0xff008318>
    83bc:	10bfffc4 	addi	r2,r2,-1
    83c0:	1085883a 	add	r2,r2,r2
    83c4:	00c00074 	movhi	r3,1
    83c8:	18c1e704 	addi	r3,r3,1948
    83cc:	1085883a 	add	r2,r2,r2
    83d0:	1885883a 	add	r2,r3,r2
    83d4:	11800017 	ldw	r6,0(r2)
    83d8:	000f883a 	mov	r7,zero
    83dc:	0007d640 	call	7d64 <__multadd>
    83e0:	1025883a 	mov	r18,r2
    83e4:	003fc706 	br	8304 <__alt_data_end+0xff008304>
    83e8:	05000044 	movi	r20,1
    83ec:	a00b883a 	mov	r5,r20
    83f0:	9809883a 	mov	r4,r19
    83f4:	0007c940 	call	7c94 <_Balloc>
    83f8:	1023883a 	mov	r17,r2
    83fc:	00809c44 	movi	r2,625
    8400:	88800515 	stw	r2,20(r17)
    8404:	8d000415 	stw	r20,16(r17)
    8408:	9c401215 	stw	r17,72(r19)
    840c:	88000015 	stw	zero,0(r17)
    8410:	003fc606 	br	832c <__alt_data_end+0xff00832c>

00008414 <__lshift>:
    8414:	defff904 	addi	sp,sp,-28
    8418:	dd400515 	stw	r21,20(sp)
    841c:	dcc00315 	stw	r19,12(sp)
    8420:	302bd17a 	srai	r21,r6,5
    8424:	2cc00417 	ldw	r19,16(r5)
    8428:	28800217 	ldw	r2,8(r5)
    842c:	dd000415 	stw	r20,16(sp)
    8430:	ace7883a 	add	r19,r21,r19
    8434:	dc800215 	stw	r18,8(sp)
    8438:	dc400115 	stw	r17,4(sp)
    843c:	dc000015 	stw	r16,0(sp)
    8440:	dfc00615 	stw	ra,24(sp)
    8444:	9c000044 	addi	r16,r19,1
    8448:	2823883a 	mov	r17,r5
    844c:	3029883a 	mov	r20,r6
    8450:	2025883a 	mov	r18,r4
    8454:	29400117 	ldw	r5,4(r5)
    8458:	1400030e 	bge	r2,r16,8468 <__lshift+0x54>
    845c:	1085883a 	add	r2,r2,r2
    8460:	29400044 	addi	r5,r5,1
    8464:	143ffd16 	blt	r2,r16,845c <__alt_data_end+0xff00845c>
    8468:	9009883a 	mov	r4,r18
    846c:	0007c940 	call	7c94 <_Balloc>
    8470:	10c00504 	addi	r3,r2,20
    8474:	0540070e 	bge	zero,r21,8494 <__lshift+0x80>
    8478:	ad6b883a 	add	r21,r21,r21
    847c:	ad6b883a 	add	r21,r21,r21
    8480:	1809883a 	mov	r4,r3
    8484:	1d47883a 	add	r3,r3,r21
    8488:	20000015 	stw	zero,0(r4)
    848c:	21000104 	addi	r4,r4,4
    8490:	193ffd1e 	bne	r3,r4,8488 <__alt_data_end+0xff008488>
    8494:	8a000417 	ldw	r8,16(r17)
    8498:	89000504 	addi	r4,r17,20
    849c:	a18007cc 	andi	r6,r20,31
    84a0:	4211883a 	add	r8,r8,r8
    84a4:	4211883a 	add	r8,r8,r8
    84a8:	2211883a 	add	r8,r4,r8
    84ac:	30002326 	beq	r6,zero,853c <__lshift+0x128>
    84b0:	02400804 	movi	r9,32
    84b4:	4993c83a 	sub	r9,r9,r6
    84b8:	000b883a 	mov	r5,zero
    84bc:	21c00017 	ldw	r7,0(r4)
    84c0:	1815883a 	mov	r10,r3
    84c4:	18c00104 	addi	r3,r3,4
    84c8:	398e983a 	sll	r7,r7,r6
    84cc:	21000104 	addi	r4,r4,4
    84d0:	394ab03a 	or	r5,r7,r5
    84d4:	197fff15 	stw	r5,-4(r3)
    84d8:	217fff17 	ldw	r5,-4(r4)
    84dc:	2a4ad83a 	srl	r5,r5,r9
    84e0:	223ff636 	bltu	r4,r8,84bc <__alt_data_end+0xff0084bc>
    84e4:	51400115 	stw	r5,4(r10)
    84e8:	28001a1e 	bne	r5,zero,8554 <__lshift+0x140>
    84ec:	843fffc4 	addi	r16,r16,-1
    84f0:	14000415 	stw	r16,16(r2)
    84f4:	88000826 	beq	r17,zero,8518 <__lshift+0x104>
    84f8:	89000117 	ldw	r4,4(r17)
    84fc:	90c01317 	ldw	r3,76(r18)
    8500:	2109883a 	add	r4,r4,r4
    8504:	2109883a 	add	r4,r4,r4
    8508:	1907883a 	add	r3,r3,r4
    850c:	19000017 	ldw	r4,0(r3)
    8510:	89000015 	stw	r4,0(r17)
    8514:	1c400015 	stw	r17,0(r3)
    8518:	dfc00617 	ldw	ra,24(sp)
    851c:	dd400517 	ldw	r21,20(sp)
    8520:	dd000417 	ldw	r20,16(sp)
    8524:	dcc00317 	ldw	r19,12(sp)
    8528:	dc800217 	ldw	r18,8(sp)
    852c:	dc400117 	ldw	r17,4(sp)
    8530:	dc000017 	ldw	r16,0(sp)
    8534:	dec00704 	addi	sp,sp,28
    8538:	f800283a 	ret
    853c:	21400017 	ldw	r5,0(r4)
    8540:	18c00104 	addi	r3,r3,4
    8544:	21000104 	addi	r4,r4,4
    8548:	197fff15 	stw	r5,-4(r3)
    854c:	223ffb36 	bltu	r4,r8,853c <__alt_data_end+0xff00853c>
    8550:	003fe606 	br	84ec <__alt_data_end+0xff0084ec>
    8554:	9c000084 	addi	r16,r19,2
    8558:	003fe406 	br	84ec <__alt_data_end+0xff0084ec>

0000855c <__mcmp>:
    855c:	20800417 	ldw	r2,16(r4)
    8560:	28c00417 	ldw	r3,16(r5)
    8564:	10c5c83a 	sub	r2,r2,r3
    8568:	1000111e 	bne	r2,zero,85b0 <__mcmp+0x54>
    856c:	18c7883a 	add	r3,r3,r3
    8570:	18c7883a 	add	r3,r3,r3
    8574:	21000504 	addi	r4,r4,20
    8578:	29400504 	addi	r5,r5,20
    857c:	20c5883a 	add	r2,r4,r3
    8580:	28cb883a 	add	r5,r5,r3
    8584:	00000106 	br	858c <__mcmp+0x30>
    8588:	20800a2e 	bgeu	r4,r2,85b4 <__mcmp+0x58>
    858c:	10bfff04 	addi	r2,r2,-4
    8590:	297fff04 	addi	r5,r5,-4
    8594:	11800017 	ldw	r6,0(r2)
    8598:	28c00017 	ldw	r3,0(r5)
    859c:	30fffa26 	beq	r6,r3,8588 <__alt_data_end+0xff008588>
    85a0:	30c00236 	bltu	r6,r3,85ac <__mcmp+0x50>
    85a4:	00800044 	movi	r2,1
    85a8:	f800283a 	ret
    85ac:	00bfffc4 	movi	r2,-1
    85b0:	f800283a 	ret
    85b4:	0005883a 	mov	r2,zero
    85b8:	f800283a 	ret

000085bc <__mdiff>:
    85bc:	28c00417 	ldw	r3,16(r5)
    85c0:	30800417 	ldw	r2,16(r6)
    85c4:	defffa04 	addi	sp,sp,-24
    85c8:	dcc00315 	stw	r19,12(sp)
    85cc:	dc800215 	stw	r18,8(sp)
    85d0:	dfc00515 	stw	ra,20(sp)
    85d4:	dd000415 	stw	r20,16(sp)
    85d8:	dc400115 	stw	r17,4(sp)
    85dc:	dc000015 	stw	r16,0(sp)
    85e0:	1887c83a 	sub	r3,r3,r2
    85e4:	2825883a 	mov	r18,r5
    85e8:	3027883a 	mov	r19,r6
    85ec:	1800141e 	bne	r3,zero,8640 <__mdiff+0x84>
    85f0:	1085883a 	add	r2,r2,r2
    85f4:	1085883a 	add	r2,r2,r2
    85f8:	2a000504 	addi	r8,r5,20
    85fc:	34000504 	addi	r16,r6,20
    8600:	4087883a 	add	r3,r8,r2
    8604:	8085883a 	add	r2,r16,r2
    8608:	00000106 	br	8610 <__mdiff+0x54>
    860c:	40c0592e 	bgeu	r8,r3,8774 <__mdiff+0x1b8>
    8610:	18ffff04 	addi	r3,r3,-4
    8614:	10bfff04 	addi	r2,r2,-4
    8618:	19c00017 	ldw	r7,0(r3)
    861c:	11400017 	ldw	r5,0(r2)
    8620:	397ffa26 	beq	r7,r5,860c <__alt_data_end+0xff00860c>
    8624:	3940592e 	bgeu	r7,r5,878c <__mdiff+0x1d0>
    8628:	9005883a 	mov	r2,r18
    862c:	4023883a 	mov	r17,r8
    8630:	9825883a 	mov	r18,r19
    8634:	05000044 	movi	r20,1
    8638:	1027883a 	mov	r19,r2
    863c:	00000406 	br	8650 <__mdiff+0x94>
    8640:	18005616 	blt	r3,zero,879c <__mdiff+0x1e0>
    8644:	34400504 	addi	r17,r6,20
    8648:	2c000504 	addi	r16,r5,20
    864c:	0029883a 	mov	r20,zero
    8650:	91400117 	ldw	r5,4(r18)
    8654:	0007c940 	call	7c94 <_Balloc>
    8658:	92400417 	ldw	r9,16(r18)
    865c:	9b000417 	ldw	r12,16(r19)
    8660:	12c00504 	addi	r11,r2,20
    8664:	4a51883a 	add	r8,r9,r9
    8668:	6319883a 	add	r12,r12,r12
    866c:	4211883a 	add	r8,r8,r8
    8670:	6319883a 	add	r12,r12,r12
    8674:	15000315 	stw	r20,12(r2)
    8678:	8211883a 	add	r8,r16,r8
    867c:	8b19883a 	add	r12,r17,r12
    8680:	0007883a 	mov	r3,zero
    8684:	81400017 	ldw	r5,0(r16)
    8688:	89c00017 	ldw	r7,0(r17)
    868c:	59800104 	addi	r6,r11,4
    8690:	293fffcc 	andi	r4,r5,65535
    8694:	20c7883a 	add	r3,r4,r3
    8698:	393fffcc 	andi	r4,r7,65535
    869c:	1909c83a 	sub	r4,r3,r4
    86a0:	280ad43a 	srli	r5,r5,16
    86a4:	380ed43a 	srli	r7,r7,16
    86a8:	2007d43a 	srai	r3,r4,16
    86ac:	213fffcc 	andi	r4,r4,65535
    86b0:	29cbc83a 	sub	r5,r5,r7
    86b4:	28c7883a 	add	r3,r5,r3
    86b8:	180a943a 	slli	r5,r3,16
    86bc:	8c400104 	addi	r17,r17,4
    86c0:	84000104 	addi	r16,r16,4
    86c4:	2908b03a 	or	r4,r5,r4
    86c8:	59000015 	stw	r4,0(r11)
    86cc:	1807d43a 	srai	r3,r3,16
    86d0:	3015883a 	mov	r10,r6
    86d4:	3017883a 	mov	r11,r6
    86d8:	8b3fea36 	bltu	r17,r12,8684 <__alt_data_end+0xff008684>
    86dc:	8200162e 	bgeu	r16,r8,8738 <__mdiff+0x17c>
    86e0:	8017883a 	mov	r11,r16
    86e4:	59400017 	ldw	r5,0(r11)
    86e8:	31800104 	addi	r6,r6,4
    86ec:	5ac00104 	addi	r11,r11,4
    86f0:	293fffcc 	andi	r4,r5,65535
    86f4:	20c7883a 	add	r3,r4,r3
    86f8:	280ed43a 	srli	r7,r5,16
    86fc:	180bd43a 	srai	r5,r3,16
    8700:	193fffcc 	andi	r4,r3,65535
    8704:	3947883a 	add	r3,r7,r5
    8708:	180a943a 	slli	r5,r3,16
    870c:	1807d43a 	srai	r3,r3,16
    8710:	2908b03a 	or	r4,r5,r4
    8714:	313fff15 	stw	r4,-4(r6)
    8718:	5a3ff236 	bltu	r11,r8,86e4 <__alt_data_end+0xff0086e4>
    871c:	0406303a 	nor	r3,zero,r16
    8720:	1a07883a 	add	r3,r3,r8
    8724:	1806d0ba 	srli	r3,r3,2
    8728:	18c00044 	addi	r3,r3,1
    872c:	18c7883a 	add	r3,r3,r3
    8730:	18c7883a 	add	r3,r3,r3
    8734:	50d5883a 	add	r10,r10,r3
    8738:	50ffff04 	addi	r3,r10,-4
    873c:	2000041e 	bne	r4,zero,8750 <__mdiff+0x194>
    8740:	18ffff04 	addi	r3,r3,-4
    8744:	19000017 	ldw	r4,0(r3)
    8748:	4a7fffc4 	addi	r9,r9,-1
    874c:	203ffc26 	beq	r4,zero,8740 <__alt_data_end+0xff008740>
    8750:	12400415 	stw	r9,16(r2)
    8754:	dfc00517 	ldw	ra,20(sp)
    8758:	dd000417 	ldw	r20,16(sp)
    875c:	dcc00317 	ldw	r19,12(sp)
    8760:	dc800217 	ldw	r18,8(sp)
    8764:	dc400117 	ldw	r17,4(sp)
    8768:	dc000017 	ldw	r16,0(sp)
    876c:	dec00604 	addi	sp,sp,24
    8770:	f800283a 	ret
    8774:	000b883a 	mov	r5,zero
    8778:	0007c940 	call	7c94 <_Balloc>
    877c:	00c00044 	movi	r3,1
    8780:	10c00415 	stw	r3,16(r2)
    8784:	10000515 	stw	zero,20(r2)
    8788:	003ff206 	br	8754 <__alt_data_end+0xff008754>
    878c:	8023883a 	mov	r17,r16
    8790:	0029883a 	mov	r20,zero
    8794:	4021883a 	mov	r16,r8
    8798:	003fad06 	br	8650 <__alt_data_end+0xff008650>
    879c:	9005883a 	mov	r2,r18
    87a0:	94400504 	addi	r17,r18,20
    87a4:	9c000504 	addi	r16,r19,20
    87a8:	9825883a 	mov	r18,r19
    87ac:	05000044 	movi	r20,1
    87b0:	1027883a 	mov	r19,r2
    87b4:	003fa606 	br	8650 <__alt_data_end+0xff008650>

000087b8 <__ulp>:
    87b8:	295ffc2c 	andhi	r5,r5,32752
    87bc:	00bf3034 	movhi	r2,64704
    87c0:	2887883a 	add	r3,r5,r2
    87c4:	00c0020e 	bge	zero,r3,87d0 <__ulp+0x18>
    87c8:	0005883a 	mov	r2,zero
    87cc:	f800283a 	ret
    87d0:	00c7c83a 	sub	r3,zero,r3
    87d4:	1807d53a 	srai	r3,r3,20
    87d8:	008004c4 	movi	r2,19
    87dc:	10c00b0e 	bge	r2,r3,880c <__ulp+0x54>
    87e0:	18bffb04 	addi	r2,r3,-20
    87e4:	01000784 	movi	r4,30
    87e8:	0007883a 	mov	r3,zero
    87ec:	20800516 	blt	r4,r2,8804 <__ulp+0x4c>
    87f0:	010007c4 	movi	r4,31
    87f4:	2089c83a 	sub	r4,r4,r2
    87f8:	00800044 	movi	r2,1
    87fc:	1104983a 	sll	r2,r2,r4
    8800:	f800283a 	ret
    8804:	00800044 	movi	r2,1
    8808:	f800283a 	ret
    880c:	01400234 	movhi	r5,8
    8810:	28c7d83a 	sra	r3,r5,r3
    8814:	0005883a 	mov	r2,zero
    8818:	f800283a 	ret

0000881c <__b2d>:
    881c:	defffa04 	addi	sp,sp,-24
    8820:	dc000015 	stw	r16,0(sp)
    8824:	24000417 	ldw	r16,16(r4)
    8828:	dc400115 	stw	r17,4(sp)
    882c:	24400504 	addi	r17,r4,20
    8830:	8421883a 	add	r16,r16,r16
    8834:	8421883a 	add	r16,r16,r16
    8838:	8c21883a 	add	r16,r17,r16
    883c:	dc800215 	stw	r18,8(sp)
    8840:	84bfff17 	ldw	r18,-4(r16)
    8844:	dd000415 	stw	r20,16(sp)
    8848:	dcc00315 	stw	r19,12(sp)
    884c:	9009883a 	mov	r4,r18
    8850:	2829883a 	mov	r20,r5
    8854:	dfc00515 	stw	ra,20(sp)
    8858:	0007f880 	call	7f88 <__hi0bits>
    885c:	00c00804 	movi	r3,32
    8860:	1889c83a 	sub	r4,r3,r2
    8864:	a1000015 	stw	r4,0(r20)
    8868:	01000284 	movi	r4,10
    886c:	84ffff04 	addi	r19,r16,-4
    8870:	20801216 	blt	r4,r2,88bc <__b2d+0xa0>
    8874:	018002c4 	movi	r6,11
    8878:	308dc83a 	sub	r6,r6,r2
    887c:	9186d83a 	srl	r3,r18,r6
    8880:	18cffc34 	orhi	r3,r3,16368
    8884:	8cc0212e 	bgeu	r17,r19,890c <__b2d+0xf0>
    8888:	813ffe17 	ldw	r4,-8(r16)
    888c:	218cd83a 	srl	r6,r4,r6
    8890:	10800544 	addi	r2,r2,21
    8894:	9084983a 	sll	r2,r18,r2
    8898:	1184b03a 	or	r2,r2,r6
    889c:	dfc00517 	ldw	ra,20(sp)
    88a0:	dd000417 	ldw	r20,16(sp)
    88a4:	dcc00317 	ldw	r19,12(sp)
    88a8:	dc800217 	ldw	r18,8(sp)
    88ac:	dc400117 	ldw	r17,4(sp)
    88b0:	dc000017 	ldw	r16,0(sp)
    88b4:	dec00604 	addi	sp,sp,24
    88b8:	f800283a 	ret
    88bc:	8cc00f2e 	bgeu	r17,r19,88fc <__b2d+0xe0>
    88c0:	117ffd44 	addi	r5,r2,-11
    88c4:	80bffe17 	ldw	r2,-8(r16)
    88c8:	28000e26 	beq	r5,zero,8904 <__b2d+0xe8>
    88cc:	1949c83a 	sub	r4,r3,r5
    88d0:	9164983a 	sll	r18,r18,r5
    88d4:	1106d83a 	srl	r3,r2,r4
    88d8:	81bffe04 	addi	r6,r16,-8
    88dc:	948ffc34 	orhi	r18,r18,16368
    88e0:	90c6b03a 	or	r3,r18,r3
    88e4:	89800e2e 	bgeu	r17,r6,8920 <__b2d+0x104>
    88e8:	81bffd17 	ldw	r6,-12(r16)
    88ec:	1144983a 	sll	r2,r2,r5
    88f0:	310ad83a 	srl	r5,r6,r4
    88f4:	2884b03a 	or	r2,r5,r2
    88f8:	003fe806 	br	889c <__alt_data_end+0xff00889c>
    88fc:	10bffd44 	addi	r2,r2,-11
    8900:	1000041e 	bne	r2,zero,8914 <__b2d+0xf8>
    8904:	90cffc34 	orhi	r3,r18,16368
    8908:	003fe406 	br	889c <__alt_data_end+0xff00889c>
    890c:	000d883a 	mov	r6,zero
    8910:	003fdf06 	br	8890 <__alt_data_end+0xff008890>
    8914:	90a4983a 	sll	r18,r18,r2
    8918:	0005883a 	mov	r2,zero
    891c:	003ff906 	br	8904 <__alt_data_end+0xff008904>
    8920:	1144983a 	sll	r2,r2,r5
    8924:	003fdd06 	br	889c <__alt_data_end+0xff00889c>

00008928 <__d2b>:
    8928:	defff804 	addi	sp,sp,-32
    892c:	dc000215 	stw	r16,8(sp)
    8930:	3021883a 	mov	r16,r6
    8934:	dc400315 	stw	r17,12(sp)
    8938:	8022907a 	slli	r17,r16,1
    893c:	dd000615 	stw	r20,24(sp)
    8940:	2829883a 	mov	r20,r5
    8944:	01400044 	movi	r5,1
    8948:	dcc00515 	stw	r19,20(sp)
    894c:	dc800415 	stw	r18,16(sp)
    8950:	dfc00715 	stw	ra,28(sp)
    8954:	3825883a 	mov	r18,r7
    8958:	8822d57a 	srli	r17,r17,21
    895c:	0007c940 	call	7c94 <_Balloc>
    8960:	1027883a 	mov	r19,r2
    8964:	00800434 	movhi	r2,16
    8968:	10bfffc4 	addi	r2,r2,-1
    896c:	808c703a 	and	r6,r16,r2
    8970:	88000126 	beq	r17,zero,8978 <__d2b+0x50>
    8974:	31800434 	orhi	r6,r6,16
    8978:	d9800015 	stw	r6,0(sp)
    897c:	a0002426 	beq	r20,zero,8a10 <__d2b+0xe8>
    8980:	d9000104 	addi	r4,sp,4
    8984:	dd000115 	stw	r20,4(sp)
    8988:	0007ff00 	call	7ff0 <__lo0bits>
    898c:	d8c00017 	ldw	r3,0(sp)
    8990:	10002f1e 	bne	r2,zero,8a50 <__d2b+0x128>
    8994:	d9000117 	ldw	r4,4(sp)
    8998:	99000515 	stw	r4,20(r19)
    899c:	1821003a 	cmpeq	r16,r3,zero
    89a0:	01000084 	movi	r4,2
    89a4:	2421c83a 	sub	r16,r4,r16
    89a8:	98c00615 	stw	r3,24(r19)
    89ac:	9c000415 	stw	r16,16(r19)
    89b0:	88001f1e 	bne	r17,zero,8a30 <__d2b+0x108>
    89b4:	10bef384 	addi	r2,r2,-1074
    89b8:	90800015 	stw	r2,0(r18)
    89bc:	00900034 	movhi	r2,16384
    89c0:	10bfffc4 	addi	r2,r2,-1
    89c4:	8085883a 	add	r2,r16,r2
    89c8:	1085883a 	add	r2,r2,r2
    89cc:	1085883a 	add	r2,r2,r2
    89d0:	9885883a 	add	r2,r19,r2
    89d4:	11000517 	ldw	r4,20(r2)
    89d8:	8020917a 	slli	r16,r16,5
    89dc:	0007f880 	call	7f88 <__hi0bits>
    89e0:	d8c00817 	ldw	r3,32(sp)
    89e4:	8085c83a 	sub	r2,r16,r2
    89e8:	18800015 	stw	r2,0(r3)
    89ec:	9805883a 	mov	r2,r19
    89f0:	dfc00717 	ldw	ra,28(sp)
    89f4:	dd000617 	ldw	r20,24(sp)
    89f8:	dcc00517 	ldw	r19,20(sp)
    89fc:	dc800417 	ldw	r18,16(sp)
    8a00:	dc400317 	ldw	r17,12(sp)
    8a04:	dc000217 	ldw	r16,8(sp)
    8a08:	dec00804 	addi	sp,sp,32
    8a0c:	f800283a 	ret
    8a10:	d809883a 	mov	r4,sp
    8a14:	0007ff00 	call	7ff0 <__lo0bits>
    8a18:	d8c00017 	ldw	r3,0(sp)
    8a1c:	04000044 	movi	r16,1
    8a20:	9c000415 	stw	r16,16(r19)
    8a24:	98c00515 	stw	r3,20(r19)
    8a28:	10800804 	addi	r2,r2,32
    8a2c:	883fe126 	beq	r17,zero,89b4 <__alt_data_end+0xff0089b4>
    8a30:	00c00d44 	movi	r3,53
    8a34:	8c7ef344 	addi	r17,r17,-1075
    8a38:	88a3883a 	add	r17,r17,r2
    8a3c:	1885c83a 	sub	r2,r3,r2
    8a40:	d8c00817 	ldw	r3,32(sp)
    8a44:	94400015 	stw	r17,0(r18)
    8a48:	18800015 	stw	r2,0(r3)
    8a4c:	003fe706 	br	89ec <__alt_data_end+0xff0089ec>
    8a50:	01000804 	movi	r4,32
    8a54:	2089c83a 	sub	r4,r4,r2
    8a58:	1908983a 	sll	r4,r3,r4
    8a5c:	d9400117 	ldw	r5,4(sp)
    8a60:	1886d83a 	srl	r3,r3,r2
    8a64:	2148b03a 	or	r4,r4,r5
    8a68:	99000515 	stw	r4,20(r19)
    8a6c:	d8c00015 	stw	r3,0(sp)
    8a70:	003fca06 	br	899c <__alt_data_end+0xff00899c>

00008a74 <__ratio>:
    8a74:	defff904 	addi	sp,sp,-28
    8a78:	dc400315 	stw	r17,12(sp)
    8a7c:	2823883a 	mov	r17,r5
    8a80:	d9400104 	addi	r5,sp,4
    8a84:	dfc00615 	stw	ra,24(sp)
    8a88:	dcc00515 	stw	r19,20(sp)
    8a8c:	dc800415 	stw	r18,16(sp)
    8a90:	2027883a 	mov	r19,r4
    8a94:	dc000215 	stw	r16,8(sp)
    8a98:	000881c0 	call	881c <__b2d>
    8a9c:	d80b883a 	mov	r5,sp
    8aa0:	8809883a 	mov	r4,r17
    8aa4:	1025883a 	mov	r18,r2
    8aa8:	1821883a 	mov	r16,r3
    8aac:	000881c0 	call	881c <__b2d>
    8ab0:	8a000417 	ldw	r8,16(r17)
    8ab4:	99000417 	ldw	r4,16(r19)
    8ab8:	d9400117 	ldw	r5,4(sp)
    8abc:	2209c83a 	sub	r4,r4,r8
    8ac0:	2010917a 	slli	r8,r4,5
    8ac4:	d9000017 	ldw	r4,0(sp)
    8ac8:	2909c83a 	sub	r4,r5,r4
    8acc:	4109883a 	add	r4,r8,r4
    8ad0:	01000e0e 	bge	zero,r4,8b0c <__ratio+0x98>
    8ad4:	2008953a 	slli	r4,r4,20
    8ad8:	2421883a 	add	r16,r4,r16
    8adc:	100d883a 	mov	r6,r2
    8ae0:	180f883a 	mov	r7,r3
    8ae4:	9009883a 	mov	r4,r18
    8ae8:	800b883a 	mov	r5,r16
    8aec:	000c90c0 	call	c90c <__divdf3>
    8af0:	dfc00617 	ldw	ra,24(sp)
    8af4:	dcc00517 	ldw	r19,20(sp)
    8af8:	dc800417 	ldw	r18,16(sp)
    8afc:	dc400317 	ldw	r17,12(sp)
    8b00:	dc000217 	ldw	r16,8(sp)
    8b04:	dec00704 	addi	sp,sp,28
    8b08:	f800283a 	ret
    8b0c:	2008953a 	slli	r4,r4,20
    8b10:	1907c83a 	sub	r3,r3,r4
    8b14:	003ff106 	br	8adc <__alt_data_end+0xff008adc>

00008b18 <_mprec_log10>:
    8b18:	defffe04 	addi	sp,sp,-8
    8b1c:	dc000015 	stw	r16,0(sp)
    8b20:	dfc00115 	stw	ra,4(sp)
    8b24:	008005c4 	movi	r2,23
    8b28:	2021883a 	mov	r16,r4
    8b2c:	11000d0e 	bge	r2,r4,8b64 <_mprec_log10+0x4c>
    8b30:	0005883a 	mov	r2,zero
    8b34:	00cffc34 	movhi	r3,16368
    8b38:	843fffc4 	addi	r16,r16,-1
    8b3c:	000d883a 	mov	r6,zero
    8b40:	01d00934 	movhi	r7,16420
    8b44:	1009883a 	mov	r4,r2
    8b48:	180b883a 	mov	r5,r3
    8b4c:	000d44c0 	call	d44c <__muldf3>
    8b50:	803ff91e 	bne	r16,zero,8b38 <__alt_data_end+0xff008b38>
    8b54:	dfc00117 	ldw	ra,4(sp)
    8b58:	dc000017 	ldw	r16,0(sp)
    8b5c:	dec00204 	addi	sp,sp,8
    8b60:	f800283a 	ret
    8b64:	202090fa 	slli	r16,r4,3
    8b68:	00800074 	movhi	r2,1
    8b6c:	1081fe04 	addi	r2,r2,2040
    8b70:	1421883a 	add	r16,r2,r16
    8b74:	80800017 	ldw	r2,0(r16)
    8b78:	80c00117 	ldw	r3,4(r16)
    8b7c:	dfc00117 	ldw	ra,4(sp)
    8b80:	dc000017 	ldw	r16,0(sp)
    8b84:	dec00204 	addi	sp,sp,8
    8b88:	f800283a 	ret

00008b8c <__copybits>:
    8b8c:	297fffc4 	addi	r5,r5,-1
    8b90:	280fd17a 	srai	r7,r5,5
    8b94:	30c00417 	ldw	r3,16(r6)
    8b98:	30800504 	addi	r2,r6,20
    8b9c:	39c00044 	addi	r7,r7,1
    8ba0:	18c7883a 	add	r3,r3,r3
    8ba4:	39cf883a 	add	r7,r7,r7
    8ba8:	18c7883a 	add	r3,r3,r3
    8bac:	39cf883a 	add	r7,r7,r7
    8bb0:	10c7883a 	add	r3,r2,r3
    8bb4:	21cf883a 	add	r7,r4,r7
    8bb8:	10c00d2e 	bgeu	r2,r3,8bf0 <__copybits+0x64>
    8bbc:	200b883a 	mov	r5,r4
    8bc0:	12000017 	ldw	r8,0(r2)
    8bc4:	29400104 	addi	r5,r5,4
    8bc8:	10800104 	addi	r2,r2,4
    8bcc:	2a3fff15 	stw	r8,-4(r5)
    8bd0:	10fffb36 	bltu	r2,r3,8bc0 <__alt_data_end+0xff008bc0>
    8bd4:	1985c83a 	sub	r2,r3,r6
    8bd8:	10bffac4 	addi	r2,r2,-21
    8bdc:	1004d0ba 	srli	r2,r2,2
    8be0:	10800044 	addi	r2,r2,1
    8be4:	1085883a 	add	r2,r2,r2
    8be8:	1085883a 	add	r2,r2,r2
    8bec:	2089883a 	add	r4,r4,r2
    8bf0:	21c0032e 	bgeu	r4,r7,8c00 <__copybits+0x74>
    8bf4:	20000015 	stw	zero,0(r4)
    8bf8:	21000104 	addi	r4,r4,4
    8bfc:	21fffd36 	bltu	r4,r7,8bf4 <__alt_data_end+0xff008bf4>
    8c00:	f800283a 	ret

00008c04 <__any_on>:
    8c04:	20c00417 	ldw	r3,16(r4)
    8c08:	2805d17a 	srai	r2,r5,5
    8c0c:	21000504 	addi	r4,r4,20
    8c10:	18800d0e 	bge	r3,r2,8c48 <__any_on+0x44>
    8c14:	18c7883a 	add	r3,r3,r3
    8c18:	18c7883a 	add	r3,r3,r3
    8c1c:	20c7883a 	add	r3,r4,r3
    8c20:	20c0192e 	bgeu	r4,r3,8c88 <__any_on+0x84>
    8c24:	18bfff17 	ldw	r2,-4(r3)
    8c28:	18ffff04 	addi	r3,r3,-4
    8c2c:	1000041e 	bne	r2,zero,8c40 <__any_on+0x3c>
    8c30:	20c0142e 	bgeu	r4,r3,8c84 <__any_on+0x80>
    8c34:	18ffff04 	addi	r3,r3,-4
    8c38:	19400017 	ldw	r5,0(r3)
    8c3c:	283ffc26 	beq	r5,zero,8c30 <__alt_data_end+0xff008c30>
    8c40:	00800044 	movi	r2,1
    8c44:	f800283a 	ret
    8c48:	10c00a0e 	bge	r2,r3,8c74 <__any_on+0x70>
    8c4c:	1085883a 	add	r2,r2,r2
    8c50:	1085883a 	add	r2,r2,r2
    8c54:	294007cc 	andi	r5,r5,31
    8c58:	2087883a 	add	r3,r4,r2
    8c5c:	283ff026 	beq	r5,zero,8c20 <__alt_data_end+0xff008c20>
    8c60:	19800017 	ldw	r6,0(r3)
    8c64:	3144d83a 	srl	r2,r6,r5
    8c68:	114a983a 	sll	r5,r2,r5
    8c6c:	317ff41e 	bne	r6,r5,8c40 <__alt_data_end+0xff008c40>
    8c70:	003feb06 	br	8c20 <__alt_data_end+0xff008c20>
    8c74:	1085883a 	add	r2,r2,r2
    8c78:	1085883a 	add	r2,r2,r2
    8c7c:	2087883a 	add	r3,r4,r2
    8c80:	003fe706 	br	8c20 <__alt_data_end+0xff008c20>
    8c84:	f800283a 	ret
    8c88:	0005883a 	mov	r2,zero
    8c8c:	f800283a 	ret

00008c90 <_realloc_r>:
    8c90:	defff604 	addi	sp,sp,-40
    8c94:	dc800215 	stw	r18,8(sp)
    8c98:	dfc00915 	stw	ra,36(sp)
    8c9c:	df000815 	stw	fp,32(sp)
    8ca0:	ddc00715 	stw	r23,28(sp)
    8ca4:	dd800615 	stw	r22,24(sp)
    8ca8:	dd400515 	stw	r21,20(sp)
    8cac:	dd000415 	stw	r20,16(sp)
    8cb0:	dcc00315 	stw	r19,12(sp)
    8cb4:	dc400115 	stw	r17,4(sp)
    8cb8:	dc000015 	stw	r16,0(sp)
    8cbc:	3025883a 	mov	r18,r6
    8cc0:	2800b726 	beq	r5,zero,8fa0 <_realloc_r+0x310>
    8cc4:	282b883a 	mov	r21,r5
    8cc8:	2029883a 	mov	r20,r4
    8ccc:	000ea300 	call	ea30 <__malloc_lock>
    8cd0:	a8bfff17 	ldw	r2,-4(r21)
    8cd4:	043fff04 	movi	r16,-4
    8cd8:	90c002c4 	addi	r3,r18,11
    8cdc:	01000584 	movi	r4,22
    8ce0:	acfffe04 	addi	r19,r21,-8
    8ce4:	1420703a 	and	r16,r2,r16
    8ce8:	20c0332e 	bgeu	r4,r3,8db8 <_realloc_r+0x128>
    8cec:	047ffe04 	movi	r17,-8
    8cf0:	1c62703a 	and	r17,r3,r17
    8cf4:	8807883a 	mov	r3,r17
    8cf8:	88005816 	blt	r17,zero,8e5c <_realloc_r+0x1cc>
    8cfc:	8c805736 	bltu	r17,r18,8e5c <_realloc_r+0x1cc>
    8d00:	80c0300e 	bge	r16,r3,8dc4 <_realloc_r+0x134>
    8d04:	07000074 	movhi	fp,1
    8d08:	e7027f04 	addi	fp,fp,2556
    8d0c:	e1c00217 	ldw	r7,8(fp)
    8d10:	9c09883a 	add	r4,r19,r16
    8d14:	22000117 	ldw	r8,4(r4)
    8d18:	21c06326 	beq	r4,r7,8ea8 <_realloc_r+0x218>
    8d1c:	017fff84 	movi	r5,-2
    8d20:	414a703a 	and	r5,r8,r5
    8d24:	214b883a 	add	r5,r4,r5
    8d28:	29800117 	ldw	r6,4(r5)
    8d2c:	3180004c 	andi	r6,r6,1
    8d30:	30003f26 	beq	r6,zero,8e30 <_realloc_r+0x1a0>
    8d34:	1080004c 	andi	r2,r2,1
    8d38:	10008326 	beq	r2,zero,8f48 <_realloc_r+0x2b8>
    8d3c:	900b883a 	mov	r5,r18
    8d40:	a009883a 	mov	r4,r20
    8d44:	0001da80 	call	1da8 <_malloc_r>
    8d48:	1025883a 	mov	r18,r2
    8d4c:	10011e26 	beq	r2,zero,91c8 <_realloc_r+0x538>
    8d50:	a93fff17 	ldw	r4,-4(r21)
    8d54:	10fffe04 	addi	r3,r2,-8
    8d58:	00bfff84 	movi	r2,-2
    8d5c:	2084703a 	and	r2,r4,r2
    8d60:	9885883a 	add	r2,r19,r2
    8d64:	1880ee26 	beq	r3,r2,9120 <_realloc_r+0x490>
    8d68:	81bfff04 	addi	r6,r16,-4
    8d6c:	00800904 	movi	r2,36
    8d70:	1180b836 	bltu	r2,r6,9054 <_realloc_r+0x3c4>
    8d74:	00c004c4 	movi	r3,19
    8d78:	19809636 	bltu	r3,r6,8fd4 <_realloc_r+0x344>
    8d7c:	9005883a 	mov	r2,r18
    8d80:	a807883a 	mov	r3,r21
    8d84:	19000017 	ldw	r4,0(r3)
    8d88:	11000015 	stw	r4,0(r2)
    8d8c:	19000117 	ldw	r4,4(r3)
    8d90:	11000115 	stw	r4,4(r2)
    8d94:	18c00217 	ldw	r3,8(r3)
    8d98:	10c00215 	stw	r3,8(r2)
    8d9c:	a80b883a 	mov	r5,r21
    8da0:	a009883a 	mov	r4,r20
    8da4:	0006bf80 	call	6bf8 <_free_r>
    8da8:	a009883a 	mov	r4,r20
    8dac:	000ea340 	call	ea34 <__malloc_unlock>
    8db0:	9005883a 	mov	r2,r18
    8db4:	00001206 	br	8e00 <_realloc_r+0x170>
    8db8:	00c00404 	movi	r3,16
    8dbc:	1823883a 	mov	r17,r3
    8dc0:	003fce06 	br	8cfc <__alt_data_end+0xff008cfc>
    8dc4:	a825883a 	mov	r18,r21
    8dc8:	8445c83a 	sub	r2,r16,r17
    8dcc:	00c003c4 	movi	r3,15
    8dd0:	18802636 	bltu	r3,r2,8e6c <_realloc_r+0x1dc>
    8dd4:	99800117 	ldw	r6,4(r19)
    8dd8:	9c07883a 	add	r3,r19,r16
    8ddc:	3180004c 	andi	r6,r6,1
    8de0:	3420b03a 	or	r16,r6,r16
    8de4:	9c000115 	stw	r16,4(r19)
    8de8:	18800117 	ldw	r2,4(r3)
    8dec:	10800054 	ori	r2,r2,1
    8df0:	18800115 	stw	r2,4(r3)
    8df4:	a009883a 	mov	r4,r20
    8df8:	000ea340 	call	ea34 <__malloc_unlock>
    8dfc:	9005883a 	mov	r2,r18
    8e00:	dfc00917 	ldw	ra,36(sp)
    8e04:	df000817 	ldw	fp,32(sp)
    8e08:	ddc00717 	ldw	r23,28(sp)
    8e0c:	dd800617 	ldw	r22,24(sp)
    8e10:	dd400517 	ldw	r21,20(sp)
    8e14:	dd000417 	ldw	r20,16(sp)
    8e18:	dcc00317 	ldw	r19,12(sp)
    8e1c:	dc800217 	ldw	r18,8(sp)
    8e20:	dc400117 	ldw	r17,4(sp)
    8e24:	dc000017 	ldw	r16,0(sp)
    8e28:	dec00a04 	addi	sp,sp,40
    8e2c:	f800283a 	ret
    8e30:	017fff04 	movi	r5,-4
    8e34:	414a703a 	and	r5,r8,r5
    8e38:	814d883a 	add	r6,r16,r5
    8e3c:	30c01f16 	blt	r6,r3,8ebc <_realloc_r+0x22c>
    8e40:	20800317 	ldw	r2,12(r4)
    8e44:	20c00217 	ldw	r3,8(r4)
    8e48:	a825883a 	mov	r18,r21
    8e4c:	3021883a 	mov	r16,r6
    8e50:	18800315 	stw	r2,12(r3)
    8e54:	10c00215 	stw	r3,8(r2)
    8e58:	003fdb06 	br	8dc8 <__alt_data_end+0xff008dc8>
    8e5c:	00800304 	movi	r2,12
    8e60:	a0800015 	stw	r2,0(r20)
    8e64:	0005883a 	mov	r2,zero
    8e68:	003fe506 	br	8e00 <__alt_data_end+0xff008e00>
    8e6c:	98c00117 	ldw	r3,4(r19)
    8e70:	9c4b883a 	add	r5,r19,r17
    8e74:	11000054 	ori	r4,r2,1
    8e78:	18c0004c 	andi	r3,r3,1
    8e7c:	1c62b03a 	or	r17,r3,r17
    8e80:	9c400115 	stw	r17,4(r19)
    8e84:	29000115 	stw	r4,4(r5)
    8e88:	2885883a 	add	r2,r5,r2
    8e8c:	10c00117 	ldw	r3,4(r2)
    8e90:	29400204 	addi	r5,r5,8
    8e94:	a009883a 	mov	r4,r20
    8e98:	18c00054 	ori	r3,r3,1
    8e9c:	10c00115 	stw	r3,4(r2)
    8ea0:	0006bf80 	call	6bf8 <_free_r>
    8ea4:	003fd306 	br	8df4 <__alt_data_end+0xff008df4>
    8ea8:	017fff04 	movi	r5,-4
    8eac:	414a703a 	and	r5,r8,r5
    8eb0:	89800404 	addi	r6,r17,16
    8eb4:	8151883a 	add	r8,r16,r5
    8eb8:	4180590e 	bge	r8,r6,9020 <_realloc_r+0x390>
    8ebc:	1080004c 	andi	r2,r2,1
    8ec0:	103f9e1e 	bne	r2,zero,8d3c <__alt_data_end+0xff008d3c>
    8ec4:	adbffe17 	ldw	r22,-8(r21)
    8ec8:	00bfff04 	movi	r2,-4
    8ecc:	9dadc83a 	sub	r22,r19,r22
    8ed0:	b1800117 	ldw	r6,4(r22)
    8ed4:	3084703a 	and	r2,r6,r2
    8ed8:	20002026 	beq	r4,zero,8f5c <_realloc_r+0x2cc>
    8edc:	80af883a 	add	r23,r16,r2
    8ee0:	b96f883a 	add	r23,r23,r5
    8ee4:	21c05f26 	beq	r4,r7,9064 <_realloc_r+0x3d4>
    8ee8:	b8c01c16 	blt	r23,r3,8f5c <_realloc_r+0x2cc>
    8eec:	20800317 	ldw	r2,12(r4)
    8ef0:	20c00217 	ldw	r3,8(r4)
    8ef4:	81bfff04 	addi	r6,r16,-4
    8ef8:	01000904 	movi	r4,36
    8efc:	18800315 	stw	r2,12(r3)
    8f00:	10c00215 	stw	r3,8(r2)
    8f04:	b0c00217 	ldw	r3,8(r22)
    8f08:	b0800317 	ldw	r2,12(r22)
    8f0c:	b4800204 	addi	r18,r22,8
    8f10:	18800315 	stw	r2,12(r3)
    8f14:	10c00215 	stw	r3,8(r2)
    8f18:	21801b36 	bltu	r4,r6,8f88 <_realloc_r+0x2f8>
    8f1c:	008004c4 	movi	r2,19
    8f20:	1180352e 	bgeu	r2,r6,8ff8 <_realloc_r+0x368>
    8f24:	a8800017 	ldw	r2,0(r21)
    8f28:	b0800215 	stw	r2,8(r22)
    8f2c:	a8800117 	ldw	r2,4(r21)
    8f30:	b0800315 	stw	r2,12(r22)
    8f34:	008006c4 	movi	r2,27
    8f38:	11807f36 	bltu	r2,r6,9138 <_realloc_r+0x4a8>
    8f3c:	b0800404 	addi	r2,r22,16
    8f40:	ad400204 	addi	r21,r21,8
    8f44:	00002d06 	br	8ffc <_realloc_r+0x36c>
    8f48:	adbffe17 	ldw	r22,-8(r21)
    8f4c:	00bfff04 	movi	r2,-4
    8f50:	9dadc83a 	sub	r22,r19,r22
    8f54:	b1000117 	ldw	r4,4(r22)
    8f58:	2084703a 	and	r2,r4,r2
    8f5c:	b03f7726 	beq	r22,zero,8d3c <__alt_data_end+0xff008d3c>
    8f60:	80af883a 	add	r23,r16,r2
    8f64:	b8ff7516 	blt	r23,r3,8d3c <__alt_data_end+0xff008d3c>
    8f68:	b0800317 	ldw	r2,12(r22)
    8f6c:	b0c00217 	ldw	r3,8(r22)
    8f70:	81bfff04 	addi	r6,r16,-4
    8f74:	01000904 	movi	r4,36
    8f78:	18800315 	stw	r2,12(r3)
    8f7c:	10c00215 	stw	r3,8(r2)
    8f80:	b4800204 	addi	r18,r22,8
    8f84:	21bfe52e 	bgeu	r4,r6,8f1c <__alt_data_end+0xff008f1c>
    8f88:	a80b883a 	mov	r5,r21
    8f8c:	9009883a 	mov	r4,r18
    8f90:	0007a100 	call	7a10 <memmove>
    8f94:	b821883a 	mov	r16,r23
    8f98:	b027883a 	mov	r19,r22
    8f9c:	003f8a06 	br	8dc8 <__alt_data_end+0xff008dc8>
    8fa0:	300b883a 	mov	r5,r6
    8fa4:	dfc00917 	ldw	ra,36(sp)
    8fa8:	df000817 	ldw	fp,32(sp)
    8fac:	ddc00717 	ldw	r23,28(sp)
    8fb0:	dd800617 	ldw	r22,24(sp)
    8fb4:	dd400517 	ldw	r21,20(sp)
    8fb8:	dd000417 	ldw	r20,16(sp)
    8fbc:	dcc00317 	ldw	r19,12(sp)
    8fc0:	dc800217 	ldw	r18,8(sp)
    8fc4:	dc400117 	ldw	r17,4(sp)
    8fc8:	dc000017 	ldw	r16,0(sp)
    8fcc:	dec00a04 	addi	sp,sp,40
    8fd0:	0001da81 	jmpi	1da8 <_malloc_r>
    8fd4:	a8c00017 	ldw	r3,0(r21)
    8fd8:	90c00015 	stw	r3,0(r18)
    8fdc:	a8c00117 	ldw	r3,4(r21)
    8fe0:	90c00115 	stw	r3,4(r18)
    8fe4:	00c006c4 	movi	r3,27
    8fe8:	19804536 	bltu	r3,r6,9100 <_realloc_r+0x470>
    8fec:	90800204 	addi	r2,r18,8
    8ff0:	a8c00204 	addi	r3,r21,8
    8ff4:	003f6306 	br	8d84 <__alt_data_end+0xff008d84>
    8ff8:	9005883a 	mov	r2,r18
    8ffc:	a8c00017 	ldw	r3,0(r21)
    9000:	b821883a 	mov	r16,r23
    9004:	b027883a 	mov	r19,r22
    9008:	10c00015 	stw	r3,0(r2)
    900c:	a8c00117 	ldw	r3,4(r21)
    9010:	10c00115 	stw	r3,4(r2)
    9014:	a8c00217 	ldw	r3,8(r21)
    9018:	10c00215 	stw	r3,8(r2)
    901c:	003f6a06 	br	8dc8 <__alt_data_end+0xff008dc8>
    9020:	9c67883a 	add	r19,r19,r17
    9024:	4445c83a 	sub	r2,r8,r17
    9028:	e4c00215 	stw	r19,8(fp)
    902c:	10800054 	ori	r2,r2,1
    9030:	98800115 	stw	r2,4(r19)
    9034:	a8bfff17 	ldw	r2,-4(r21)
    9038:	a009883a 	mov	r4,r20
    903c:	1080004c 	andi	r2,r2,1
    9040:	1462b03a 	or	r17,r2,r17
    9044:	ac7fff15 	stw	r17,-4(r21)
    9048:	000ea340 	call	ea34 <__malloc_unlock>
    904c:	a805883a 	mov	r2,r21
    9050:	003f6b06 	br	8e00 <__alt_data_end+0xff008e00>
    9054:	a80b883a 	mov	r5,r21
    9058:	9009883a 	mov	r4,r18
    905c:	0007a100 	call	7a10 <memmove>
    9060:	003f4e06 	br	8d9c <__alt_data_end+0xff008d9c>
    9064:	89000404 	addi	r4,r17,16
    9068:	b93fbc16 	blt	r23,r4,8f5c <__alt_data_end+0xff008f5c>
    906c:	b0800317 	ldw	r2,12(r22)
    9070:	b0c00217 	ldw	r3,8(r22)
    9074:	81bfff04 	addi	r6,r16,-4
    9078:	01000904 	movi	r4,36
    907c:	18800315 	stw	r2,12(r3)
    9080:	10c00215 	stw	r3,8(r2)
    9084:	b4800204 	addi	r18,r22,8
    9088:	21804336 	bltu	r4,r6,9198 <_realloc_r+0x508>
    908c:	008004c4 	movi	r2,19
    9090:	11803f2e 	bgeu	r2,r6,9190 <_realloc_r+0x500>
    9094:	a8800017 	ldw	r2,0(r21)
    9098:	b0800215 	stw	r2,8(r22)
    909c:	a8800117 	ldw	r2,4(r21)
    90a0:	b0800315 	stw	r2,12(r22)
    90a4:	008006c4 	movi	r2,27
    90a8:	11803f36 	bltu	r2,r6,91a8 <_realloc_r+0x518>
    90ac:	b0800404 	addi	r2,r22,16
    90b0:	ad400204 	addi	r21,r21,8
    90b4:	a8c00017 	ldw	r3,0(r21)
    90b8:	10c00015 	stw	r3,0(r2)
    90bc:	a8c00117 	ldw	r3,4(r21)
    90c0:	10c00115 	stw	r3,4(r2)
    90c4:	a8c00217 	ldw	r3,8(r21)
    90c8:	10c00215 	stw	r3,8(r2)
    90cc:	b447883a 	add	r3,r22,r17
    90d0:	bc45c83a 	sub	r2,r23,r17
    90d4:	e0c00215 	stw	r3,8(fp)
    90d8:	10800054 	ori	r2,r2,1
    90dc:	18800115 	stw	r2,4(r3)
    90e0:	b0800117 	ldw	r2,4(r22)
    90e4:	a009883a 	mov	r4,r20
    90e8:	1080004c 	andi	r2,r2,1
    90ec:	1462b03a 	or	r17,r2,r17
    90f0:	b4400115 	stw	r17,4(r22)
    90f4:	000ea340 	call	ea34 <__malloc_unlock>
    90f8:	9005883a 	mov	r2,r18
    90fc:	003f4006 	br	8e00 <__alt_data_end+0xff008e00>
    9100:	a8c00217 	ldw	r3,8(r21)
    9104:	90c00215 	stw	r3,8(r18)
    9108:	a8c00317 	ldw	r3,12(r21)
    910c:	90c00315 	stw	r3,12(r18)
    9110:	30801126 	beq	r6,r2,9158 <_realloc_r+0x4c8>
    9114:	90800404 	addi	r2,r18,16
    9118:	a8c00404 	addi	r3,r21,16
    911c:	003f1906 	br	8d84 <__alt_data_end+0xff008d84>
    9120:	90ffff17 	ldw	r3,-4(r18)
    9124:	00bfff04 	movi	r2,-4
    9128:	a825883a 	mov	r18,r21
    912c:	1884703a 	and	r2,r3,r2
    9130:	80a1883a 	add	r16,r16,r2
    9134:	003f2406 	br	8dc8 <__alt_data_end+0xff008dc8>
    9138:	a8800217 	ldw	r2,8(r21)
    913c:	b0800415 	stw	r2,16(r22)
    9140:	a8800317 	ldw	r2,12(r21)
    9144:	b0800515 	stw	r2,20(r22)
    9148:	31000a26 	beq	r6,r4,9174 <_realloc_r+0x4e4>
    914c:	b0800604 	addi	r2,r22,24
    9150:	ad400404 	addi	r21,r21,16
    9154:	003fa906 	br	8ffc <__alt_data_end+0xff008ffc>
    9158:	a9000417 	ldw	r4,16(r21)
    915c:	90800604 	addi	r2,r18,24
    9160:	a8c00604 	addi	r3,r21,24
    9164:	91000415 	stw	r4,16(r18)
    9168:	a9000517 	ldw	r4,20(r21)
    916c:	91000515 	stw	r4,20(r18)
    9170:	003f0406 	br	8d84 <__alt_data_end+0xff008d84>
    9174:	a8c00417 	ldw	r3,16(r21)
    9178:	ad400604 	addi	r21,r21,24
    917c:	b0800804 	addi	r2,r22,32
    9180:	b0c00615 	stw	r3,24(r22)
    9184:	a8ffff17 	ldw	r3,-4(r21)
    9188:	b0c00715 	stw	r3,28(r22)
    918c:	003f9b06 	br	8ffc <__alt_data_end+0xff008ffc>
    9190:	9005883a 	mov	r2,r18
    9194:	003fc706 	br	90b4 <__alt_data_end+0xff0090b4>
    9198:	a80b883a 	mov	r5,r21
    919c:	9009883a 	mov	r4,r18
    91a0:	0007a100 	call	7a10 <memmove>
    91a4:	003fc906 	br	90cc <__alt_data_end+0xff0090cc>
    91a8:	a8800217 	ldw	r2,8(r21)
    91ac:	b0800415 	stw	r2,16(r22)
    91b0:	a8800317 	ldw	r2,12(r21)
    91b4:	b0800515 	stw	r2,20(r22)
    91b8:	31000726 	beq	r6,r4,91d8 <_realloc_r+0x548>
    91bc:	b0800604 	addi	r2,r22,24
    91c0:	ad400404 	addi	r21,r21,16
    91c4:	003fbb06 	br	90b4 <__alt_data_end+0xff0090b4>
    91c8:	a009883a 	mov	r4,r20
    91cc:	000ea340 	call	ea34 <__malloc_unlock>
    91d0:	0005883a 	mov	r2,zero
    91d4:	003f0a06 	br	8e00 <__alt_data_end+0xff008e00>
    91d8:	a8c00417 	ldw	r3,16(r21)
    91dc:	ad400604 	addi	r21,r21,24
    91e0:	b0800804 	addi	r2,r22,32
    91e4:	b0c00615 	stw	r3,24(r22)
    91e8:	a8ffff17 	ldw	r3,-4(r21)
    91ec:	b0c00715 	stw	r3,28(r22)
    91f0:	003fb006 	br	90b4 <__alt_data_end+0xff0090b4>

000091f4 <__fpclassifyd>:
    91f4:	00a00034 	movhi	r2,32768
    91f8:	10bfffc4 	addi	r2,r2,-1
    91fc:	2884703a 	and	r2,r5,r2
    9200:	10000726 	beq	r2,zero,9220 <__fpclassifyd+0x2c>
    9204:	00fffc34 	movhi	r3,65520
    9208:	019ff834 	movhi	r6,32736
    920c:	28c7883a 	add	r3,r5,r3
    9210:	31bfffc4 	addi	r6,r6,-1
    9214:	30c00536 	bltu	r6,r3,922c <__fpclassifyd+0x38>
    9218:	00800104 	movi	r2,4
    921c:	f800283a 	ret
    9220:	2000021e 	bne	r4,zero,922c <__fpclassifyd+0x38>
    9224:	00800084 	movi	r2,2
    9228:	f800283a 	ret
    922c:	00dffc34 	movhi	r3,32752
    9230:	019ff834 	movhi	r6,32736
    9234:	28cb883a 	add	r5,r5,r3
    9238:	31bfffc4 	addi	r6,r6,-1
    923c:	317ff62e 	bgeu	r6,r5,9218 <__alt_data_end+0xff009218>
    9240:	01400434 	movhi	r5,16
    9244:	297fffc4 	addi	r5,r5,-1
    9248:	28800236 	bltu	r5,r2,9254 <__fpclassifyd+0x60>
    924c:	008000c4 	movi	r2,3
    9250:	f800283a 	ret
    9254:	10c00226 	beq	r2,r3,9260 <__fpclassifyd+0x6c>
    9258:	0005883a 	mov	r2,zero
    925c:	f800283a 	ret
    9260:	2005003a 	cmpeq	r2,r4,zero
    9264:	f800283a 	ret

00009268 <__sread>:
    9268:	defffe04 	addi	sp,sp,-8
    926c:	dc000015 	stw	r16,0(sp)
    9270:	2821883a 	mov	r16,r5
    9274:	2940038f 	ldh	r5,14(r5)
    9278:	dfc00115 	stw	ra,4(sp)
    927c:	000b05c0 	call	b05c <_read_r>
    9280:	10000716 	blt	r2,zero,92a0 <__sread+0x38>
    9284:	80c01417 	ldw	r3,80(r16)
    9288:	1887883a 	add	r3,r3,r2
    928c:	80c01415 	stw	r3,80(r16)
    9290:	dfc00117 	ldw	ra,4(sp)
    9294:	dc000017 	ldw	r16,0(sp)
    9298:	dec00204 	addi	sp,sp,8
    929c:	f800283a 	ret
    92a0:	80c0030b 	ldhu	r3,12(r16)
    92a4:	18fbffcc 	andi	r3,r3,61439
    92a8:	80c0030d 	sth	r3,12(r16)
    92ac:	dfc00117 	ldw	ra,4(sp)
    92b0:	dc000017 	ldw	r16,0(sp)
    92b4:	dec00204 	addi	sp,sp,8
    92b8:	f800283a 	ret

000092bc <__seofread>:
    92bc:	0005883a 	mov	r2,zero
    92c0:	f800283a 	ret

000092c4 <__swrite>:
    92c4:	2880030b 	ldhu	r2,12(r5)
    92c8:	defffb04 	addi	sp,sp,-20
    92cc:	dcc00315 	stw	r19,12(sp)
    92d0:	dc800215 	stw	r18,8(sp)
    92d4:	dc400115 	stw	r17,4(sp)
    92d8:	dc000015 	stw	r16,0(sp)
    92dc:	dfc00415 	stw	ra,16(sp)
    92e0:	10c0400c 	andi	r3,r2,256
    92e4:	2821883a 	mov	r16,r5
    92e8:	2023883a 	mov	r17,r4
    92ec:	3025883a 	mov	r18,r6
    92f0:	3827883a 	mov	r19,r7
    92f4:	18000526 	beq	r3,zero,930c <__swrite+0x48>
    92f8:	2940038f 	ldh	r5,14(r5)
    92fc:	01c00084 	movi	r7,2
    9300:	000d883a 	mov	r6,zero
    9304:	000affc0 	call	affc <_lseek_r>
    9308:	8080030b 	ldhu	r2,12(r16)
    930c:	8140038f 	ldh	r5,14(r16)
    9310:	10bbffcc 	andi	r2,r2,61439
    9314:	980f883a 	mov	r7,r19
    9318:	900d883a 	mov	r6,r18
    931c:	8809883a 	mov	r4,r17
    9320:	8080030d 	sth	r2,12(r16)
    9324:	dfc00417 	ldw	ra,16(sp)
    9328:	dcc00317 	ldw	r19,12(sp)
    932c:	dc800217 	ldw	r18,8(sp)
    9330:	dc400117 	ldw	r17,4(sp)
    9334:	dc000017 	ldw	r16,0(sp)
    9338:	dec00504 	addi	sp,sp,20
    933c:	000aac81 	jmpi	aac8 <_write_r>

00009340 <__sseek>:
    9340:	defffe04 	addi	sp,sp,-8
    9344:	dc000015 	stw	r16,0(sp)
    9348:	2821883a 	mov	r16,r5
    934c:	2940038f 	ldh	r5,14(r5)
    9350:	dfc00115 	stw	ra,4(sp)
    9354:	000affc0 	call	affc <_lseek_r>
    9358:	00ffffc4 	movi	r3,-1
    935c:	10c00826 	beq	r2,r3,9380 <__sseek+0x40>
    9360:	80c0030b 	ldhu	r3,12(r16)
    9364:	80801415 	stw	r2,80(r16)
    9368:	18c40014 	ori	r3,r3,4096
    936c:	80c0030d 	sth	r3,12(r16)
    9370:	dfc00117 	ldw	ra,4(sp)
    9374:	dc000017 	ldw	r16,0(sp)
    9378:	dec00204 	addi	sp,sp,8
    937c:	f800283a 	ret
    9380:	80c0030b 	ldhu	r3,12(r16)
    9384:	18fbffcc 	andi	r3,r3,61439
    9388:	80c0030d 	sth	r3,12(r16)
    938c:	dfc00117 	ldw	ra,4(sp)
    9390:	dc000017 	ldw	r16,0(sp)
    9394:	dec00204 	addi	sp,sp,8
    9398:	f800283a 	ret

0000939c <__sclose>:
    939c:	2940038f 	ldh	r5,14(r5)
    93a0:	000ab281 	jmpi	ab28 <_close_r>

000093a4 <strcmp>:
    93a4:	2144b03a 	or	r2,r4,r5
    93a8:	108000cc 	andi	r2,r2,3
    93ac:	1000171e 	bne	r2,zero,940c <strcmp+0x68>
    93b0:	20800017 	ldw	r2,0(r4)
    93b4:	28c00017 	ldw	r3,0(r5)
    93b8:	10c0141e 	bne	r2,r3,940c <strcmp+0x68>
    93bc:	027fbff4 	movhi	r9,65279
    93c0:	4a7fbfc4 	addi	r9,r9,-257
    93c4:	0086303a 	nor	r3,zero,r2
    93c8:	02202074 	movhi	r8,32897
    93cc:	1245883a 	add	r2,r2,r9
    93d0:	42202004 	addi	r8,r8,-32640
    93d4:	10c4703a 	and	r2,r2,r3
    93d8:	1204703a 	and	r2,r2,r8
    93dc:	10000226 	beq	r2,zero,93e8 <strcmp+0x44>
    93e0:	00002306 	br	9470 <strcmp+0xcc>
    93e4:	1000221e 	bne	r2,zero,9470 <strcmp+0xcc>
    93e8:	21000104 	addi	r4,r4,4
    93ec:	20c00017 	ldw	r3,0(r4)
    93f0:	29400104 	addi	r5,r5,4
    93f4:	29800017 	ldw	r6,0(r5)
    93f8:	1a4f883a 	add	r7,r3,r9
    93fc:	00c4303a 	nor	r2,zero,r3
    9400:	3884703a 	and	r2,r7,r2
    9404:	1204703a 	and	r2,r2,r8
    9408:	19bff626 	beq	r3,r6,93e4 <__alt_data_end+0xff0093e4>
    940c:	20800003 	ldbu	r2,0(r4)
    9410:	10c03fcc 	andi	r3,r2,255
    9414:	18c0201c 	xori	r3,r3,128
    9418:	18ffe004 	addi	r3,r3,-128
    941c:	18000c26 	beq	r3,zero,9450 <strcmp+0xac>
    9420:	29800007 	ldb	r6,0(r5)
    9424:	19800326 	beq	r3,r6,9434 <strcmp+0x90>
    9428:	00001306 	br	9478 <strcmp+0xd4>
    942c:	29800007 	ldb	r6,0(r5)
    9430:	11800b1e 	bne	r2,r6,9460 <strcmp+0xbc>
    9434:	21000044 	addi	r4,r4,1
    9438:	20c00003 	ldbu	r3,0(r4)
    943c:	29400044 	addi	r5,r5,1
    9440:	18803fcc 	andi	r2,r3,255
    9444:	1080201c 	xori	r2,r2,128
    9448:	10bfe004 	addi	r2,r2,-128
    944c:	103ff71e 	bne	r2,zero,942c <__alt_data_end+0xff00942c>
    9450:	0007883a 	mov	r3,zero
    9454:	28800003 	ldbu	r2,0(r5)
    9458:	1885c83a 	sub	r2,r3,r2
    945c:	f800283a 	ret
    9460:	28800003 	ldbu	r2,0(r5)
    9464:	18c03fcc 	andi	r3,r3,255
    9468:	1885c83a 	sub	r2,r3,r2
    946c:	f800283a 	ret
    9470:	0005883a 	mov	r2,zero
    9474:	f800283a 	ret
    9478:	10c03fcc 	andi	r3,r2,255
    947c:	003ff506 	br	9454 <__alt_data_end+0xff009454>

00009480 <__sprint_r.part.0>:
    9480:	28801917 	ldw	r2,100(r5)
    9484:	defff604 	addi	sp,sp,-40
    9488:	dd400515 	stw	r21,20(sp)
    948c:	dfc00915 	stw	ra,36(sp)
    9490:	df000815 	stw	fp,32(sp)
    9494:	ddc00715 	stw	r23,28(sp)
    9498:	dd800615 	stw	r22,24(sp)
    949c:	dd000415 	stw	r20,16(sp)
    94a0:	dcc00315 	stw	r19,12(sp)
    94a4:	dc800215 	stw	r18,8(sp)
    94a8:	dc400115 	stw	r17,4(sp)
    94ac:	dc000015 	stw	r16,0(sp)
    94b0:	1088000c 	andi	r2,r2,8192
    94b4:	302b883a 	mov	r21,r6
    94b8:	10002e26 	beq	r2,zero,9574 <__sprint_r.part.0+0xf4>
    94bc:	30800217 	ldw	r2,8(r6)
    94c0:	35800017 	ldw	r22,0(r6)
    94c4:	10002926 	beq	r2,zero,956c <__sprint_r.part.0+0xec>
    94c8:	2827883a 	mov	r19,r5
    94cc:	2029883a 	mov	r20,r4
    94d0:	b5c00104 	addi	r23,r22,4
    94d4:	04bfffc4 	movi	r18,-1
    94d8:	bc400017 	ldw	r17,0(r23)
    94dc:	b4000017 	ldw	r16,0(r22)
    94e0:	0039883a 	mov	fp,zero
    94e4:	8822d0ba 	srli	r17,r17,2
    94e8:	8800031e 	bne	r17,zero,94f8 <__sprint_r.part.0+0x78>
    94ec:	00001806 	br	9550 <__sprint_r.part.0+0xd0>
    94f0:	84000104 	addi	r16,r16,4
    94f4:	8f001526 	beq	r17,fp,954c <__sprint_r.part.0+0xcc>
    94f8:	81400017 	ldw	r5,0(r16)
    94fc:	980d883a 	mov	r6,r19
    9500:	a009883a 	mov	r4,r20
    9504:	000aea80 	call	aea8 <_fputwc_r>
    9508:	e7000044 	addi	fp,fp,1
    950c:	14bff81e 	bne	r2,r18,94f0 <__alt_data_end+0xff0094f0>
    9510:	9005883a 	mov	r2,r18
    9514:	a8000215 	stw	zero,8(r21)
    9518:	a8000115 	stw	zero,4(r21)
    951c:	dfc00917 	ldw	ra,36(sp)
    9520:	df000817 	ldw	fp,32(sp)
    9524:	ddc00717 	ldw	r23,28(sp)
    9528:	dd800617 	ldw	r22,24(sp)
    952c:	dd400517 	ldw	r21,20(sp)
    9530:	dd000417 	ldw	r20,16(sp)
    9534:	dcc00317 	ldw	r19,12(sp)
    9538:	dc800217 	ldw	r18,8(sp)
    953c:	dc400117 	ldw	r17,4(sp)
    9540:	dc000017 	ldw	r16,0(sp)
    9544:	dec00a04 	addi	sp,sp,40
    9548:	f800283a 	ret
    954c:	a8800217 	ldw	r2,8(r21)
    9550:	8c63883a 	add	r17,r17,r17
    9554:	8c63883a 	add	r17,r17,r17
    9558:	1445c83a 	sub	r2,r2,r17
    955c:	a8800215 	stw	r2,8(r21)
    9560:	b5800204 	addi	r22,r22,8
    9564:	bdc00204 	addi	r23,r23,8
    9568:	103fdb1e 	bne	r2,zero,94d8 <__alt_data_end+0xff0094d8>
    956c:	0005883a 	mov	r2,zero
    9570:	003fe806 	br	9514 <__alt_data_end+0xff009514>
    9574:	0006f080 	call	6f08 <__sfvwrite_r>
    9578:	003fe606 	br	9514 <__alt_data_end+0xff009514>

0000957c <__sprint_r>:
    957c:	30c00217 	ldw	r3,8(r6)
    9580:	18000126 	beq	r3,zero,9588 <__sprint_r+0xc>
    9584:	00094801 	jmpi	9480 <__sprint_r.part.0>
    9588:	30000115 	stw	zero,4(r6)
    958c:	0005883a 	mov	r2,zero
    9590:	f800283a 	ret

00009594 <___vfiprintf_internal_r>:
    9594:	deffc904 	addi	sp,sp,-220
    9598:	df003515 	stw	fp,212(sp)
    959c:	dd003115 	stw	r20,196(sp)
    95a0:	dfc03615 	stw	ra,216(sp)
    95a4:	ddc03415 	stw	r23,208(sp)
    95a8:	dd803315 	stw	r22,204(sp)
    95ac:	dd403215 	stw	r21,200(sp)
    95b0:	dcc03015 	stw	r19,192(sp)
    95b4:	dc802f15 	stw	r18,188(sp)
    95b8:	dc402e15 	stw	r17,184(sp)
    95bc:	dc002d15 	stw	r16,180(sp)
    95c0:	d9002015 	stw	r4,128(sp)
    95c4:	d9c02215 	stw	r7,136(sp)
    95c8:	2829883a 	mov	r20,r5
    95cc:	3039883a 	mov	fp,r6
    95d0:	20000226 	beq	r4,zero,95dc <___vfiprintf_internal_r+0x48>
    95d4:	20800e17 	ldw	r2,56(r4)
    95d8:	1000cf26 	beq	r2,zero,9918 <___vfiprintf_internal_r+0x384>
    95dc:	a080030b 	ldhu	r2,12(r20)
    95e0:	10c8000c 	andi	r3,r2,8192
    95e4:	1800061e 	bne	r3,zero,9600 <___vfiprintf_internal_r+0x6c>
    95e8:	a1001917 	ldw	r4,100(r20)
    95ec:	00f7ffc4 	movi	r3,-8193
    95f0:	10880014 	ori	r2,r2,8192
    95f4:	20c6703a 	and	r3,r4,r3
    95f8:	a080030d 	sth	r2,12(r20)
    95fc:	a0c01915 	stw	r3,100(r20)
    9600:	10c0020c 	andi	r3,r2,8
    9604:	1800a926 	beq	r3,zero,98ac <___vfiprintf_internal_r+0x318>
    9608:	a0c00417 	ldw	r3,16(r20)
    960c:	1800a726 	beq	r3,zero,98ac <___vfiprintf_internal_r+0x318>
    9610:	1080068c 	andi	r2,r2,26
    9614:	00c00284 	movi	r3,10
    9618:	10c0ac26 	beq	r2,r3,98cc <___vfiprintf_internal_r+0x338>
    961c:	da801a04 	addi	r10,sp,104
    9620:	da801e15 	stw	r10,120(sp)
    9624:	d8801e17 	ldw	r2,120(sp)
    9628:	da8019c4 	addi	r10,sp,103
    962c:	05800074 	movhi	r22,1
    9630:	05c00074 	movhi	r23,1
    9634:	da801f15 	stw	r10,124(sp)
    9638:	1295c83a 	sub	r10,r2,r10
    963c:	b5823404 	addi	r22,r22,2256
    9640:	bdc23004 	addi	r23,r23,2240
    9644:	dec01a15 	stw	sp,104(sp)
    9648:	d8001c15 	stw	zero,112(sp)
    964c:	d8001b15 	stw	zero,108(sp)
    9650:	d8002615 	stw	zero,152(sp)
    9654:	d8002315 	stw	zero,140(sp)
    9658:	da802715 	stw	r10,156(sp)
    965c:	d811883a 	mov	r8,sp
    9660:	dd002115 	stw	r20,132(sp)
    9664:	e021883a 	mov	r16,fp
    9668:	80800007 	ldb	r2,0(r16)
    966c:	1003ea26 	beq	r2,zero,a618 <___vfiprintf_internal_r+0x1084>
    9670:	00c00944 	movi	r3,37
    9674:	8025883a 	mov	r18,r16
    9678:	10c0021e 	bne	r2,r3,9684 <___vfiprintf_internal_r+0xf0>
    967c:	00001606 	br	96d8 <___vfiprintf_internal_r+0x144>
    9680:	10c00326 	beq	r2,r3,9690 <___vfiprintf_internal_r+0xfc>
    9684:	94800044 	addi	r18,r18,1
    9688:	90800007 	ldb	r2,0(r18)
    968c:	103ffc1e 	bne	r2,zero,9680 <__alt_data_end+0xff009680>
    9690:	9423c83a 	sub	r17,r18,r16
    9694:	88001026 	beq	r17,zero,96d8 <___vfiprintf_internal_r+0x144>
    9698:	d8c01c17 	ldw	r3,112(sp)
    969c:	d8801b17 	ldw	r2,108(sp)
    96a0:	44000015 	stw	r16,0(r8)
    96a4:	88c7883a 	add	r3,r17,r3
    96a8:	10800044 	addi	r2,r2,1
    96ac:	44400115 	stw	r17,4(r8)
    96b0:	d8c01c15 	stw	r3,112(sp)
    96b4:	d8801b15 	stw	r2,108(sp)
    96b8:	010001c4 	movi	r4,7
    96bc:	2080760e 	bge	r4,r2,9898 <___vfiprintf_internal_r+0x304>
    96c0:	1803821e 	bne	r3,zero,a4cc <___vfiprintf_internal_r+0xf38>
    96c4:	da802317 	ldw	r10,140(sp)
    96c8:	d8001b15 	stw	zero,108(sp)
    96cc:	d811883a 	mov	r8,sp
    96d0:	5455883a 	add	r10,r10,r17
    96d4:	da802315 	stw	r10,140(sp)
    96d8:	90800007 	ldb	r2,0(r18)
    96dc:	10044626 	beq	r2,zero,a7f8 <___vfiprintf_internal_r+0x1264>
    96e0:	90c00047 	ldb	r3,1(r18)
    96e4:	94000044 	addi	r16,r18,1
    96e8:	d8001d85 	stb	zero,118(sp)
    96ec:	0009883a 	mov	r4,zero
    96f0:	000f883a 	mov	r7,zero
    96f4:	027fffc4 	movi	r9,-1
    96f8:	0023883a 	mov	r17,zero
    96fc:	0029883a 	mov	r20,zero
    9700:	01401604 	movi	r5,88
    9704:	01800244 	movi	r6,9
    9708:	03400a84 	movi	r13,42
    970c:	03001b04 	movi	r12,108
    9710:	84000044 	addi	r16,r16,1
    9714:	18bff804 	addi	r2,r3,-32
    9718:	28827336 	bltu	r5,r2,a0e8 <___vfiprintf_internal_r+0xb54>
    971c:	100490ba 	slli	r2,r2,2
    9720:	02800074 	movhi	r10,1
    9724:	52a5cd04 	addi	r10,r10,-26828
    9728:	1285883a 	add	r2,r2,r10
    972c:	10800017 	ldw	r2,0(r2)
    9730:	1000683a 	jmp	r2
    9734:	00009e1c 	xori	zero,zero,632
    9738:	0000a0e8 	cmpgeui	zero,zero,643
    973c:	0000a0e8 	cmpgeui	zero,zero,643
    9740:	00009e3c 	xorhi	zero,zero,632
    9744:	0000a0e8 	cmpgeui	zero,zero,643
    9748:	0000a0e8 	cmpgeui	zero,zero,643
    974c:	0000a0e8 	cmpgeui	zero,zero,643
    9750:	0000a0e8 	cmpgeui	zero,zero,643
    9754:	0000a0e8 	cmpgeui	zero,zero,643
    9758:	0000a0e8 	cmpgeui	zero,zero,643
    975c:	0000a024 	muli	zero,zero,640
    9760:	0000a040 	call	a04 <init_LCD+0xc0>
    9764:	0000a0e8 	cmpgeui	zero,zero,643
    9768:	00009928 	cmpgeui	zero,zero,612
    976c:	0000a050 	cmplti	zero,zero,641
    9770:	0000a0e8 	cmpgeui	zero,zero,643
    9774:	00009e48 	cmpgei	zero,zero,633
    9778:	00009e54 	movui	zero,633
    977c:	00009e54 	movui	zero,633
    9780:	00009e54 	movui	zero,633
    9784:	00009e54 	movui	zero,633
    9788:	00009e54 	movui	zero,633
    978c:	00009e54 	movui	zero,633
    9790:	00009e54 	movui	zero,633
    9794:	00009e54 	movui	zero,633
    9798:	00009e54 	movui	zero,633
    979c:	0000a0e8 	cmpgeui	zero,zero,643
    97a0:	0000a0e8 	cmpgeui	zero,zero,643
    97a4:	0000a0e8 	cmpgeui	zero,zero,643
    97a8:	0000a0e8 	cmpgeui	zero,zero,643
    97ac:	0000a0e8 	cmpgeui	zero,zero,643
    97b0:	0000a0e8 	cmpgeui	zero,zero,643
    97b4:	0000a0e8 	cmpgeui	zero,zero,643
    97b8:	0000a0e8 	cmpgeui	zero,zero,643
    97bc:	0000a0e8 	cmpgeui	zero,zero,643
    97c0:	0000a0e8 	cmpgeui	zero,zero,643
    97c4:	00009e80 	call	9e8 <init_LCD+0xa4>
    97c8:	0000a0e8 	cmpgeui	zero,zero,643
    97cc:	0000a0e8 	cmpgeui	zero,zero,643
    97d0:	0000a0e8 	cmpgeui	zero,zero,643
    97d4:	0000a0e8 	cmpgeui	zero,zero,643
    97d8:	0000a0e8 	cmpgeui	zero,zero,643
    97dc:	0000a0e8 	cmpgeui	zero,zero,643
    97e0:	0000a0e8 	cmpgeui	zero,zero,643
    97e4:	0000a0e8 	cmpgeui	zero,zero,643
    97e8:	0000a0e8 	cmpgeui	zero,zero,643
    97ec:	0000a0e8 	cmpgeui	zero,zero,643
    97f0:	00009eb8 	rdprs	zero,zero,634
    97f4:	0000a0e8 	cmpgeui	zero,zero,643
    97f8:	0000a0e8 	cmpgeui	zero,zero,643
    97fc:	0000a0e8 	cmpgeui	zero,zero,643
    9800:	0000a0e8 	cmpgeui	zero,zero,643
    9804:	0000a0e8 	cmpgeui	zero,zero,643
    9808:	00009f10 	cmplti	zero,zero,636
    980c:	0000a0e8 	cmpgeui	zero,zero,643
    9810:	0000a0e8 	cmpgeui	zero,zero,643
    9814:	00009f80 	call	9f8 <init_LCD+0xb4>
    9818:	0000a0e8 	cmpgeui	zero,zero,643
    981c:	0000a0e8 	cmpgeui	zero,zero,643
    9820:	0000a0e8 	cmpgeui	zero,zero,643
    9824:	0000a0e8 	cmpgeui	zero,zero,643
    9828:	0000a0e8 	cmpgeui	zero,zero,643
    982c:	0000a0e8 	cmpgeui	zero,zero,643
    9830:	0000a0e8 	cmpgeui	zero,zero,643
    9834:	0000a0e8 	cmpgeui	zero,zero,643
    9838:	0000a0e8 	cmpgeui	zero,zero,643
    983c:	0000a0e8 	cmpgeui	zero,zero,643
    9840:	00009d2c 	andhi	zero,zero,628
    9844:	00009d58 	cmpnei	zero,zero,629
    9848:	0000a0e8 	cmpgeui	zero,zero,643
    984c:	0000a0e8 	cmpgeui	zero,zero,643
    9850:	0000a0e8 	cmpgeui	zero,zero,643
    9854:	0000a090 	cmplti	zero,zero,642
    9858:	00009d58 	cmpnei	zero,zero,629
    985c:	0000a0e8 	cmpgeui	zero,zero,643
    9860:	0000a0e8 	cmpgeui	zero,zero,643
    9864:	00009bec 	andhi	zero,zero,623
    9868:	0000a0e8 	cmpgeui	zero,zero,643
    986c:	00009bfc 	xorhi	zero,zero,623
    9870:	00009c38 	rdprs	zero,zero,624
    9874:	00009934 	movhi	zero,612
    9878:	00009be0 	cmpeqi	zero,zero,623
    987c:	0000a0e8 	cmpgeui	zero,zero,643
    9880:	00009fbc 	xorhi	zero,zero,638
    9884:	0000a0e8 	cmpgeui	zero,zero,643
    9888:	0000a014 	movui	zero,640
    988c:	0000a0e8 	cmpgeui	zero,zero,643
    9890:	0000a0e8 	cmpgeui	zero,zero,643
    9894:	00009cd8 	cmpnei	zero,zero,627
    9898:	42000204 	addi	r8,r8,8
    989c:	da802317 	ldw	r10,140(sp)
    98a0:	5455883a 	add	r10,r10,r17
    98a4:	da802315 	stw	r10,140(sp)
    98a8:	003f8b06 	br	96d8 <__alt_data_end+0xff0096d8>
    98ac:	d9002017 	ldw	r4,128(sp)
    98b0:	a00b883a 	mov	r5,r20
    98b4:	0004ab00 	call	4ab0 <__swsetup_r>
    98b8:	1003b11e 	bne	r2,zero,a780 <___vfiprintf_internal_r+0x11ec>
    98bc:	a080030b 	ldhu	r2,12(r20)
    98c0:	00c00284 	movi	r3,10
    98c4:	1080068c 	andi	r2,r2,26
    98c8:	10ff541e 	bne	r2,r3,961c <__alt_data_end+0xff00961c>
    98cc:	a080038f 	ldh	r2,14(r20)
    98d0:	103f5216 	blt	r2,zero,961c <__alt_data_end+0xff00961c>
    98d4:	d9c02217 	ldw	r7,136(sp)
    98d8:	d9002017 	ldw	r4,128(sp)
    98dc:	e00d883a 	mov	r6,fp
    98e0:	a00b883a 	mov	r5,r20
    98e4:	000aa0c0 	call	aa0c <__sbprintf>
    98e8:	dfc03617 	ldw	ra,216(sp)
    98ec:	df003517 	ldw	fp,212(sp)
    98f0:	ddc03417 	ldw	r23,208(sp)
    98f4:	dd803317 	ldw	r22,204(sp)
    98f8:	dd403217 	ldw	r21,200(sp)
    98fc:	dd003117 	ldw	r20,196(sp)
    9900:	dcc03017 	ldw	r19,192(sp)
    9904:	dc802f17 	ldw	r18,188(sp)
    9908:	dc402e17 	ldw	r17,184(sp)
    990c:	dc002d17 	ldw	r16,180(sp)
    9910:	dec03704 	addi	sp,sp,220
    9914:	f800283a 	ret
    9918:	0006a840 	call	6a84 <__sinit>
    991c:	003f2f06 	br	95dc <__alt_data_end+0xff0095dc>
    9920:	0463c83a 	sub	r17,zero,r17
    9924:	d8802215 	stw	r2,136(sp)
    9928:	a5000114 	ori	r20,r20,4
    992c:	80c00007 	ldb	r3,0(r16)
    9930:	003f7706 	br	9710 <__alt_data_end+0xff009710>
    9934:	00800c04 	movi	r2,48
    9938:	da802217 	ldw	r10,136(sp)
    993c:	d8801d05 	stb	r2,116(sp)
    9940:	00801e04 	movi	r2,120
    9944:	d8801d45 	stb	r2,117(sp)
    9948:	d8001d85 	stb	zero,118(sp)
    994c:	50c00104 	addi	r3,r10,4
    9950:	54800017 	ldw	r18,0(r10)
    9954:	0027883a 	mov	r19,zero
    9958:	a0800094 	ori	r2,r20,2
    995c:	48030b16 	blt	r9,zero,a58c <___vfiprintf_internal_r+0xff8>
    9960:	00bfdfc4 	movi	r2,-129
    9964:	a096703a 	and	r11,r20,r2
    9968:	d8c02215 	stw	r3,136(sp)
    996c:	5d000094 	ori	r20,r11,2
    9970:	90032b1e 	bne	r18,zero,a620 <___vfiprintf_internal_r+0x108c>
    9974:	00800074 	movhi	r2,1
    9978:	1081cf04 	addi	r2,r2,1852
    997c:	d8802615 	stw	r2,152(sp)
    9980:	0039883a 	mov	fp,zero
    9984:	48017b1e 	bne	r9,zero,9f74 <___vfiprintf_internal_r+0x9e0>
    9988:	0013883a 	mov	r9,zero
    998c:	0027883a 	mov	r19,zero
    9990:	dd401a04 	addi	r21,sp,104
    9994:	4825883a 	mov	r18,r9
    9998:	4cc0010e 	bge	r9,r19,99a0 <___vfiprintf_internal_r+0x40c>
    999c:	9825883a 	mov	r18,r19
    99a0:	e7003fcc 	andi	fp,fp,255
    99a4:	e700201c 	xori	fp,fp,128
    99a8:	e73fe004 	addi	fp,fp,-128
    99ac:	e0000126 	beq	fp,zero,99b4 <___vfiprintf_internal_r+0x420>
    99b0:	94800044 	addi	r18,r18,1
    99b4:	a380008c 	andi	r14,r20,2
    99b8:	70000126 	beq	r14,zero,99c0 <___vfiprintf_internal_r+0x42c>
    99bc:	94800084 	addi	r18,r18,2
    99c0:	a700210c 	andi	fp,r20,132
    99c4:	e001df1e 	bne	fp,zero,a144 <___vfiprintf_internal_r+0xbb0>
    99c8:	8c87c83a 	sub	r3,r17,r18
    99cc:	00c1dd0e 	bge	zero,r3,a144 <___vfiprintf_internal_r+0xbb0>
    99d0:	01c00404 	movi	r7,16
    99d4:	d8801c17 	ldw	r2,112(sp)
    99d8:	38c3ad0e 	bge	r7,r3,a890 <___vfiprintf_internal_r+0x12fc>
    99dc:	02800074 	movhi	r10,1
    99e0:	52823404 	addi	r10,r10,2256
    99e4:	dc002915 	stw	r16,164(sp)
    99e8:	d9801b17 	ldw	r6,108(sp)
    99ec:	da802415 	stw	r10,144(sp)
    99f0:	03c001c4 	movi	r15,7
    99f4:	da402515 	stw	r9,148(sp)
    99f8:	db802815 	stw	r14,160(sp)
    99fc:	1821883a 	mov	r16,r3
    9a00:	00000506 	br	9a18 <___vfiprintf_internal_r+0x484>
    9a04:	31400084 	addi	r5,r6,2
    9a08:	42000204 	addi	r8,r8,8
    9a0c:	200d883a 	mov	r6,r4
    9a10:	843ffc04 	addi	r16,r16,-16
    9a14:	3c000d0e 	bge	r7,r16,9a4c <___vfiprintf_internal_r+0x4b8>
    9a18:	10800404 	addi	r2,r2,16
    9a1c:	31000044 	addi	r4,r6,1
    9a20:	45800015 	stw	r22,0(r8)
    9a24:	41c00115 	stw	r7,4(r8)
    9a28:	d8801c15 	stw	r2,112(sp)
    9a2c:	d9001b15 	stw	r4,108(sp)
    9a30:	793ff40e 	bge	r15,r4,9a04 <__alt_data_end+0xff009a04>
    9a34:	1001b51e 	bne	r2,zero,a10c <___vfiprintf_internal_r+0xb78>
    9a38:	843ffc04 	addi	r16,r16,-16
    9a3c:	000d883a 	mov	r6,zero
    9a40:	01400044 	movi	r5,1
    9a44:	d811883a 	mov	r8,sp
    9a48:	3c3ff316 	blt	r7,r16,9a18 <__alt_data_end+0xff009a18>
    9a4c:	8007883a 	mov	r3,r16
    9a50:	da402517 	ldw	r9,148(sp)
    9a54:	db802817 	ldw	r14,160(sp)
    9a58:	dc002917 	ldw	r16,164(sp)
    9a5c:	da802417 	ldw	r10,144(sp)
    9a60:	1885883a 	add	r2,r3,r2
    9a64:	40c00115 	stw	r3,4(r8)
    9a68:	42800015 	stw	r10,0(r8)
    9a6c:	d8801c15 	stw	r2,112(sp)
    9a70:	d9401b15 	stw	r5,108(sp)
    9a74:	00c001c4 	movi	r3,7
    9a78:	19426016 	blt	r3,r5,a3fc <___vfiprintf_internal_r+0xe68>
    9a7c:	d8c01d87 	ldb	r3,118(sp)
    9a80:	42000204 	addi	r8,r8,8
    9a84:	29000044 	addi	r4,r5,1
    9a88:	1801b31e 	bne	r3,zero,a158 <___vfiprintf_internal_r+0xbc4>
    9a8c:	7001c026 	beq	r14,zero,a190 <___vfiprintf_internal_r+0xbfc>
    9a90:	d8c01d04 	addi	r3,sp,116
    9a94:	10800084 	addi	r2,r2,2
    9a98:	40c00015 	stw	r3,0(r8)
    9a9c:	00c00084 	movi	r3,2
    9aa0:	40c00115 	stw	r3,4(r8)
    9aa4:	d8801c15 	stw	r2,112(sp)
    9aa8:	d9001b15 	stw	r4,108(sp)
    9aac:	00c001c4 	movi	r3,7
    9ab0:	1902650e 	bge	r3,r4,a448 <___vfiprintf_internal_r+0xeb4>
    9ab4:	10029a1e 	bne	r2,zero,a520 <___vfiprintf_internal_r+0xf8c>
    9ab8:	00c02004 	movi	r3,128
    9abc:	01000044 	movi	r4,1
    9ac0:	000b883a 	mov	r5,zero
    9ac4:	d811883a 	mov	r8,sp
    9ac8:	e0c1b31e 	bne	fp,r3,a198 <___vfiprintf_internal_r+0xc04>
    9acc:	8cb9c83a 	sub	fp,r17,r18
    9ad0:	0701b10e 	bge	zero,fp,a198 <___vfiprintf_internal_r+0xc04>
    9ad4:	01c00404 	movi	r7,16
    9ad8:	3f03890e 	bge	r7,fp,a900 <___vfiprintf_internal_r+0x136c>
    9adc:	00c00074 	movhi	r3,1
    9ae0:	18c23004 	addi	r3,r3,2240
    9ae4:	d8c02415 	stw	r3,144(sp)
    9ae8:	8007883a 	mov	r3,r16
    9aec:	034001c4 	movi	r13,7
    9af0:	e021883a 	mov	r16,fp
    9af4:	da402515 	stw	r9,148(sp)
    9af8:	1839883a 	mov	fp,r3
    9afc:	00000506 	br	9b14 <___vfiprintf_internal_r+0x580>
    9b00:	29800084 	addi	r6,r5,2
    9b04:	42000204 	addi	r8,r8,8
    9b08:	180b883a 	mov	r5,r3
    9b0c:	843ffc04 	addi	r16,r16,-16
    9b10:	3c000d0e 	bge	r7,r16,9b48 <___vfiprintf_internal_r+0x5b4>
    9b14:	10800404 	addi	r2,r2,16
    9b18:	28c00044 	addi	r3,r5,1
    9b1c:	45c00015 	stw	r23,0(r8)
    9b20:	41c00115 	stw	r7,4(r8)
    9b24:	d8801c15 	stw	r2,112(sp)
    9b28:	d8c01b15 	stw	r3,108(sp)
    9b2c:	68fff40e 	bge	r13,r3,9b00 <__alt_data_end+0xff009b00>
    9b30:	1002241e 	bne	r2,zero,a3c4 <___vfiprintf_internal_r+0xe30>
    9b34:	843ffc04 	addi	r16,r16,-16
    9b38:	01800044 	movi	r6,1
    9b3c:	000b883a 	mov	r5,zero
    9b40:	d811883a 	mov	r8,sp
    9b44:	3c3ff316 	blt	r7,r16,9b14 <__alt_data_end+0xff009b14>
    9b48:	da402517 	ldw	r9,148(sp)
    9b4c:	e007883a 	mov	r3,fp
    9b50:	8039883a 	mov	fp,r16
    9b54:	1821883a 	mov	r16,r3
    9b58:	d8c02417 	ldw	r3,144(sp)
    9b5c:	1705883a 	add	r2,r2,fp
    9b60:	47000115 	stw	fp,4(r8)
    9b64:	40c00015 	stw	r3,0(r8)
    9b68:	d8801c15 	stw	r2,112(sp)
    9b6c:	d9801b15 	stw	r6,108(sp)
    9b70:	00c001c4 	movi	r3,7
    9b74:	19827616 	blt	r3,r6,a550 <___vfiprintf_internal_r+0xfbc>
    9b78:	4cf9c83a 	sub	fp,r9,r19
    9b7c:	42000204 	addi	r8,r8,8
    9b80:	31000044 	addi	r4,r6,1
    9b84:	300b883a 	mov	r5,r6
    9b88:	07018516 	blt	zero,fp,a1a0 <___vfiprintf_internal_r+0xc0c>
    9b8c:	9885883a 	add	r2,r19,r2
    9b90:	45400015 	stw	r21,0(r8)
    9b94:	44c00115 	stw	r19,4(r8)
    9b98:	d8801c15 	stw	r2,112(sp)
    9b9c:	d9001b15 	stw	r4,108(sp)
    9ba0:	00c001c4 	movi	r3,7
    9ba4:	1901dd0e 	bge	r3,r4,a31c <___vfiprintf_internal_r+0xd88>
    9ba8:	1002401e 	bne	r2,zero,a4ac <___vfiprintf_internal_r+0xf18>
    9bac:	d8001b15 	stw	zero,108(sp)
    9bb0:	a2c0010c 	andi	r11,r20,4
    9bb4:	58000226 	beq	r11,zero,9bc0 <___vfiprintf_internal_r+0x62c>
    9bb8:	8ca7c83a 	sub	r19,r17,r18
    9bbc:	04c2f216 	blt	zero,r19,a788 <___vfiprintf_internal_r+0x11f4>
    9bc0:	8c80010e 	bge	r17,r18,9bc8 <___vfiprintf_internal_r+0x634>
    9bc4:	9023883a 	mov	r17,r18
    9bc8:	da802317 	ldw	r10,140(sp)
    9bcc:	5455883a 	add	r10,r10,r17
    9bd0:	da802315 	stw	r10,140(sp)
    9bd4:	d8001b15 	stw	zero,108(sp)
    9bd8:	d811883a 	mov	r8,sp
    9bdc:	003ea206 	br	9668 <__alt_data_end+0xff009668>
    9be0:	a5000814 	ori	r20,r20,32
    9be4:	80c00007 	ldb	r3,0(r16)
    9be8:	003ec906 	br	9710 <__alt_data_end+0xff009710>
    9bec:	80c00007 	ldb	r3,0(r16)
    9bf0:	1b030926 	beq	r3,r12,a818 <___vfiprintf_internal_r+0x1284>
    9bf4:	a5000414 	ori	r20,r20,16
    9bf8:	003ec506 	br	9710 <__alt_data_end+0xff009710>
    9bfc:	21003fcc 	andi	r4,r4,255
    9c00:	20035e1e 	bne	r4,zero,a97c <___vfiprintf_internal_r+0x13e8>
    9c04:	a080080c 	andi	r2,r20,32
    9c08:	1002a526 	beq	r2,zero,a6a0 <___vfiprintf_internal_r+0x110c>
    9c0c:	da802217 	ldw	r10,136(sp)
    9c10:	50800017 	ldw	r2,0(r10)
    9c14:	da802317 	ldw	r10,140(sp)
    9c18:	5007d7fa 	srai	r3,r10,31
    9c1c:	da802217 	ldw	r10,136(sp)
    9c20:	10c00115 	stw	r3,4(r2)
    9c24:	52800104 	addi	r10,r10,4
    9c28:	da802215 	stw	r10,136(sp)
    9c2c:	da802317 	ldw	r10,140(sp)
    9c30:	12800015 	stw	r10,0(r2)
    9c34:	003e8c06 	br	9668 <__alt_data_end+0xff009668>
    9c38:	21003fcc 	andi	r4,r4,255
    9c3c:	2003511e 	bne	r4,zero,a984 <___vfiprintf_internal_r+0x13f0>
    9c40:	a080080c 	andi	r2,r20,32
    9c44:	1000a126 	beq	r2,zero,9ecc <___vfiprintf_internal_r+0x938>
    9c48:	da802217 	ldw	r10,136(sp)
    9c4c:	d8001d85 	stb	zero,118(sp)
    9c50:	50800204 	addi	r2,r10,8
    9c54:	54800017 	ldw	r18,0(r10)
    9c58:	54c00117 	ldw	r19,4(r10)
    9c5c:	4802b416 	blt	r9,zero,a730 <___vfiprintf_internal_r+0x119c>
    9c60:	013fdfc4 	movi	r4,-129
    9c64:	94c6b03a 	or	r3,r18,r19
    9c68:	d8802215 	stw	r2,136(sp)
    9c6c:	a128703a 	and	r20,r20,r4
    9c70:	1800a226 	beq	r3,zero,9efc <___vfiprintf_internal_r+0x968>
    9c74:	0039883a 	mov	fp,zero
    9c78:	dd401a04 	addi	r21,sp,104
    9c7c:	9006d0fa 	srli	r3,r18,3
    9c80:	9808977a 	slli	r4,r19,29
    9c84:	9826d0fa 	srli	r19,r19,3
    9c88:	948001cc 	andi	r18,r18,7
    9c8c:	90800c04 	addi	r2,r18,48
    9c90:	ad7fffc4 	addi	r21,r21,-1
    9c94:	20e4b03a 	or	r18,r4,r3
    9c98:	a8800005 	stb	r2,0(r21)
    9c9c:	94c6b03a 	or	r3,r18,r19
    9ca0:	183ff61e 	bne	r3,zero,9c7c <__alt_data_end+0xff009c7c>
    9ca4:	a0c0004c 	andi	r3,r20,1
    9ca8:	18005926 	beq	r3,zero,9e10 <___vfiprintf_internal_r+0x87c>
    9cac:	10803fcc 	andi	r2,r2,255
    9cb0:	1080201c 	xori	r2,r2,128
    9cb4:	10bfe004 	addi	r2,r2,-128
    9cb8:	00c00c04 	movi	r3,48
    9cbc:	10c05426 	beq	r2,r3,9e10 <___vfiprintf_internal_r+0x87c>
    9cc0:	da801e17 	ldw	r10,120(sp)
    9cc4:	a8bfffc4 	addi	r2,r21,-1
    9cc8:	a8ffffc5 	stb	r3,-1(r21)
    9ccc:	50a7c83a 	sub	r19,r10,r2
    9cd0:	102b883a 	mov	r21,r2
    9cd4:	003f2f06 	br	9994 <__alt_data_end+0xff009994>
    9cd8:	21003fcc 	andi	r4,r4,255
    9cdc:	2003421e 	bne	r4,zero,a9e8 <___vfiprintf_internal_r+0x1454>
    9ce0:	00800074 	movhi	r2,1
    9ce4:	1081cf04 	addi	r2,r2,1852
    9ce8:	d8802615 	stw	r2,152(sp)
    9cec:	a080080c 	andi	r2,r20,32
    9cf0:	1000aa26 	beq	r2,zero,9f9c <___vfiprintf_internal_r+0xa08>
    9cf4:	da802217 	ldw	r10,136(sp)
    9cf8:	54800017 	ldw	r18,0(r10)
    9cfc:	54c00117 	ldw	r19,4(r10)
    9d00:	52800204 	addi	r10,r10,8
    9d04:	da802215 	stw	r10,136(sp)
    9d08:	a080004c 	andi	r2,r20,1
    9d0c:	1001d226 	beq	r2,zero,a458 <___vfiprintf_internal_r+0xec4>
    9d10:	94c4b03a 	or	r2,r18,r19
    9d14:	1002351e 	bne	r2,zero,a5ec <___vfiprintf_internal_r+0x1058>
    9d18:	d8001d85 	stb	zero,118(sp)
    9d1c:	48022216 	blt	r9,zero,a5a8 <___vfiprintf_internal_r+0x1014>
    9d20:	00bfdfc4 	movi	r2,-129
    9d24:	a0a8703a 	and	r20,r20,r2
    9d28:	003f1506 	br	9980 <__alt_data_end+0xff009980>
    9d2c:	da802217 	ldw	r10,136(sp)
    9d30:	04800044 	movi	r18,1
    9d34:	d8001d85 	stb	zero,118(sp)
    9d38:	50800017 	ldw	r2,0(r10)
    9d3c:	52800104 	addi	r10,r10,4
    9d40:	da802215 	stw	r10,136(sp)
    9d44:	d8801005 	stb	r2,64(sp)
    9d48:	9027883a 	mov	r19,r18
    9d4c:	dd401004 	addi	r21,sp,64
    9d50:	0013883a 	mov	r9,zero
    9d54:	003f1706 	br	99b4 <__alt_data_end+0xff0099b4>
    9d58:	21003fcc 	andi	r4,r4,255
    9d5c:	2003201e 	bne	r4,zero,a9e0 <___vfiprintf_internal_r+0x144c>
    9d60:	a080080c 	andi	r2,r20,32
    9d64:	10004b26 	beq	r2,zero,9e94 <___vfiprintf_internal_r+0x900>
    9d68:	da802217 	ldw	r10,136(sp)
    9d6c:	50800117 	ldw	r2,4(r10)
    9d70:	54800017 	ldw	r18,0(r10)
    9d74:	52800204 	addi	r10,r10,8
    9d78:	da802215 	stw	r10,136(sp)
    9d7c:	1027883a 	mov	r19,r2
    9d80:	10022c16 	blt	r2,zero,a634 <___vfiprintf_internal_r+0x10a0>
    9d84:	df001d83 	ldbu	fp,118(sp)
    9d88:	48007216 	blt	r9,zero,9f54 <___vfiprintf_internal_r+0x9c0>
    9d8c:	00ffdfc4 	movi	r3,-129
    9d90:	94c4b03a 	or	r2,r18,r19
    9d94:	a0e8703a 	and	r20,r20,r3
    9d98:	1000cc26 	beq	r2,zero,a0cc <___vfiprintf_internal_r+0xb38>
    9d9c:	98021026 	beq	r19,zero,a5e0 <___vfiprintf_internal_r+0x104c>
    9da0:	dc402415 	stw	r17,144(sp)
    9da4:	dc002515 	stw	r16,148(sp)
    9da8:	9823883a 	mov	r17,r19
    9dac:	9021883a 	mov	r16,r18
    9db0:	dd401a04 	addi	r21,sp,104
    9db4:	4825883a 	mov	r18,r9
    9db8:	4027883a 	mov	r19,r8
    9dbc:	8009883a 	mov	r4,r16
    9dc0:	880b883a 	mov	r5,r17
    9dc4:	01800284 	movi	r6,10
    9dc8:	000f883a 	mov	r7,zero
    9dcc:	000b9740 	call	b974 <__umoddi3>
    9dd0:	10800c04 	addi	r2,r2,48
    9dd4:	ad7fffc4 	addi	r21,r21,-1
    9dd8:	8009883a 	mov	r4,r16
    9ddc:	880b883a 	mov	r5,r17
    9de0:	a8800005 	stb	r2,0(r21)
    9de4:	01800284 	movi	r6,10
    9de8:	000f883a 	mov	r7,zero
    9dec:	000b3fc0 	call	b3fc <__udivdi3>
    9df0:	1021883a 	mov	r16,r2
    9df4:	10c4b03a 	or	r2,r2,r3
    9df8:	1823883a 	mov	r17,r3
    9dfc:	103fef1e 	bne	r2,zero,9dbc <__alt_data_end+0xff009dbc>
    9e00:	dc402417 	ldw	r17,144(sp)
    9e04:	dc002517 	ldw	r16,148(sp)
    9e08:	9013883a 	mov	r9,r18
    9e0c:	9811883a 	mov	r8,r19
    9e10:	da801e17 	ldw	r10,120(sp)
    9e14:	5567c83a 	sub	r19,r10,r21
    9e18:	003ede06 	br	9994 <__alt_data_end+0xff009994>
    9e1c:	38803fcc 	andi	r2,r7,255
    9e20:	1080201c 	xori	r2,r2,128
    9e24:	10bfe004 	addi	r2,r2,-128
    9e28:	1002371e 	bne	r2,zero,a708 <___vfiprintf_internal_r+0x1174>
    9e2c:	01000044 	movi	r4,1
    9e30:	01c00804 	movi	r7,32
    9e34:	80c00007 	ldb	r3,0(r16)
    9e38:	003e3506 	br	9710 <__alt_data_end+0xff009710>
    9e3c:	a5000054 	ori	r20,r20,1
    9e40:	80c00007 	ldb	r3,0(r16)
    9e44:	003e3206 	br	9710 <__alt_data_end+0xff009710>
    9e48:	a5002014 	ori	r20,r20,128
    9e4c:	80c00007 	ldb	r3,0(r16)
    9e50:	003e2f06 	br	9710 <__alt_data_end+0xff009710>
    9e54:	8015883a 	mov	r10,r16
    9e58:	0023883a 	mov	r17,zero
    9e5c:	18bff404 	addi	r2,r3,-48
    9e60:	50c00007 	ldb	r3,0(r10)
    9e64:	8c4002a4 	muli	r17,r17,10
    9e68:	84000044 	addi	r16,r16,1
    9e6c:	8015883a 	mov	r10,r16
    9e70:	1463883a 	add	r17,r2,r17
    9e74:	18bff404 	addi	r2,r3,-48
    9e78:	30bff92e 	bgeu	r6,r2,9e60 <__alt_data_end+0xff009e60>
    9e7c:	003e2506 	br	9714 <__alt_data_end+0xff009714>
    9e80:	21003fcc 	andi	r4,r4,255
    9e84:	2002d41e 	bne	r4,zero,a9d8 <___vfiprintf_internal_r+0x1444>
    9e88:	a5000414 	ori	r20,r20,16
    9e8c:	a080080c 	andi	r2,r20,32
    9e90:	103fb51e 	bne	r2,zero,9d68 <__alt_data_end+0xff009d68>
    9e94:	a080040c 	andi	r2,r20,16
    9e98:	1001f826 	beq	r2,zero,a67c <___vfiprintf_internal_r+0x10e8>
    9e9c:	da802217 	ldw	r10,136(sp)
    9ea0:	54800017 	ldw	r18,0(r10)
    9ea4:	52800104 	addi	r10,r10,4
    9ea8:	da802215 	stw	r10,136(sp)
    9eac:	9027d7fa 	srai	r19,r18,31
    9eb0:	9805883a 	mov	r2,r19
    9eb4:	003fb206 	br	9d80 <__alt_data_end+0xff009d80>
    9eb8:	21003fcc 	andi	r4,r4,255
    9ebc:	2002c41e 	bne	r4,zero,a9d0 <___vfiprintf_internal_r+0x143c>
    9ec0:	a5000414 	ori	r20,r20,16
    9ec4:	a080080c 	andi	r2,r20,32
    9ec8:	103f5f1e 	bne	r2,zero,9c48 <__alt_data_end+0xff009c48>
    9ecc:	a080040c 	andi	r2,r20,16
    9ed0:	10020f26 	beq	r2,zero,a710 <___vfiprintf_internal_r+0x117c>
    9ed4:	da802217 	ldw	r10,136(sp)
    9ed8:	d8001d85 	stb	zero,118(sp)
    9edc:	0027883a 	mov	r19,zero
    9ee0:	50800104 	addi	r2,r10,4
    9ee4:	54800017 	ldw	r18,0(r10)
    9ee8:	48021116 	blt	r9,zero,a730 <___vfiprintf_internal_r+0x119c>
    9eec:	00ffdfc4 	movi	r3,-129
    9ef0:	d8802215 	stw	r2,136(sp)
    9ef4:	a0e8703a 	and	r20,r20,r3
    9ef8:	903f5e1e 	bne	r18,zero,9c74 <__alt_data_end+0xff009c74>
    9efc:	0039883a 	mov	fp,zero
    9f00:	4802a626 	beq	r9,zero,a99c <___vfiprintf_internal_r+0x1408>
    9f04:	0025883a 	mov	r18,zero
    9f08:	0027883a 	mov	r19,zero
    9f0c:	003f5a06 	br	9c78 <__alt_data_end+0xff009c78>
    9f10:	21003fcc 	andi	r4,r4,255
    9f14:	20029f1e 	bne	r4,zero,a994 <___vfiprintf_internal_r+0x1400>
    9f18:	a5000414 	ori	r20,r20,16
    9f1c:	a080080c 	andi	r2,r20,32
    9f20:	10005e1e 	bne	r2,zero,a09c <___vfiprintf_internal_r+0xb08>
    9f24:	a080040c 	andi	r2,r20,16
    9f28:	1001a21e 	bne	r2,zero,a5b4 <___vfiprintf_internal_r+0x1020>
    9f2c:	a080100c 	andi	r2,r20,64
    9f30:	d8001d85 	stb	zero,118(sp)
    9f34:	da802217 	ldw	r10,136(sp)
    9f38:	1002231e 	bne	r2,zero,a7c8 <___vfiprintf_internal_r+0x1234>
    9f3c:	50800104 	addi	r2,r10,4
    9f40:	54800017 	ldw	r18,0(r10)
    9f44:	0027883a 	mov	r19,zero
    9f48:	4801a00e 	bge	r9,zero,a5cc <___vfiprintf_internal_r+0x1038>
    9f4c:	d8802215 	stw	r2,136(sp)
    9f50:	0039883a 	mov	fp,zero
    9f54:	94c4b03a 	or	r2,r18,r19
    9f58:	103f901e 	bne	r2,zero,9d9c <__alt_data_end+0xff009d9c>
    9f5c:	00800044 	movi	r2,1
    9f60:	10803fcc 	andi	r2,r2,255
    9f64:	00c00044 	movi	r3,1
    9f68:	10c05926 	beq	r2,r3,a0d0 <___vfiprintf_internal_r+0xb3c>
    9f6c:	00c00084 	movi	r3,2
    9f70:	10ffe41e 	bne	r2,r3,9f04 <__alt_data_end+0xff009f04>
    9f74:	0025883a 	mov	r18,zero
    9f78:	0027883a 	mov	r19,zero
    9f7c:	00013d06 	br	a474 <___vfiprintf_internal_r+0xee0>
    9f80:	21003fcc 	andi	r4,r4,255
    9f84:	2002811e 	bne	r4,zero,a98c <___vfiprintf_internal_r+0x13f8>
    9f88:	00800074 	movhi	r2,1
    9f8c:	1081ca04 	addi	r2,r2,1832
    9f90:	d8802615 	stw	r2,152(sp)
    9f94:	a080080c 	andi	r2,r20,32
    9f98:	103f561e 	bne	r2,zero,9cf4 <__alt_data_end+0xff009cf4>
    9f9c:	a080040c 	andi	r2,r20,16
    9fa0:	1001d126 	beq	r2,zero,a6e8 <___vfiprintf_internal_r+0x1154>
    9fa4:	da802217 	ldw	r10,136(sp)
    9fa8:	0027883a 	mov	r19,zero
    9fac:	54800017 	ldw	r18,0(r10)
    9fb0:	52800104 	addi	r10,r10,4
    9fb4:	da802215 	stw	r10,136(sp)
    9fb8:	003f5306 	br	9d08 <__alt_data_end+0xff009d08>
    9fbc:	da802217 	ldw	r10,136(sp)
    9fc0:	d8001d85 	stb	zero,118(sp)
    9fc4:	55400017 	ldw	r21,0(r10)
    9fc8:	50c00104 	addi	r3,r10,4
    9fcc:	a8024226 	beq	r21,zero,a8d8 <___vfiprintf_internal_r+0x1344>
    9fd0:	48021816 	blt	r9,zero,a834 <___vfiprintf_internal_r+0x12a0>
    9fd4:	480d883a 	mov	r6,r9
    9fd8:	000b883a 	mov	r5,zero
    9fdc:	a809883a 	mov	r4,r21
    9fe0:	d8c02a15 	stw	r3,168(sp)
    9fe4:	da002b15 	stw	r8,172(sp)
    9fe8:	da402c15 	stw	r9,176(sp)
    9fec:	00077e40 	call	77e4 <memchr>
    9ff0:	d8c02a17 	ldw	r3,168(sp)
    9ff4:	da002b17 	ldw	r8,172(sp)
    9ff8:	da402c17 	ldw	r9,176(sp)
    9ffc:	10024826 	beq	r2,zero,a920 <___vfiprintf_internal_r+0x138c>
    a000:	1567c83a 	sub	r19,r2,r21
    a004:	df001d83 	ldbu	fp,118(sp)
    a008:	d8c02215 	stw	r3,136(sp)
    a00c:	0013883a 	mov	r9,zero
    a010:	003e6006 	br	9994 <__alt_data_end+0xff009994>
    a014:	21003fcc 	andi	r4,r4,255
    a018:	203fc026 	beq	r4,zero,9f1c <__alt_data_end+0xff009f1c>
    a01c:	d9c01d85 	stb	r7,118(sp)
    a020:	003fbe06 	br	9f1c <__alt_data_end+0xff009f1c>
    a024:	da802217 	ldw	r10,136(sp)
    a028:	54400017 	ldw	r17,0(r10)
    a02c:	50800104 	addi	r2,r10,4
    a030:	883e3b16 	blt	r17,zero,9920 <__alt_data_end+0xff009920>
    a034:	d8802215 	stw	r2,136(sp)
    a038:	80c00007 	ldb	r3,0(r16)
    a03c:	003db406 	br	9710 <__alt_data_end+0xff009710>
    a040:	01000044 	movi	r4,1
    a044:	01c00ac4 	movi	r7,43
    a048:	80c00007 	ldb	r3,0(r16)
    a04c:	003db006 	br	9710 <__alt_data_end+0xff009710>
    a050:	80c00007 	ldb	r3,0(r16)
    a054:	82800044 	addi	r10,r16,1
    a058:	1b423c26 	beq	r3,r13,a94c <___vfiprintf_internal_r+0x13b8>
    a05c:	18bff404 	addi	r2,r3,-48
    a060:	0013883a 	mov	r9,zero
    a064:	30822b36 	bltu	r6,r2,a914 <___vfiprintf_internal_r+0x1380>
    a068:	50c00007 	ldb	r3,0(r10)
    a06c:	4a4002a4 	muli	r9,r9,10
    a070:	54000044 	addi	r16,r10,1
    a074:	8015883a 	mov	r10,r16
    a078:	4893883a 	add	r9,r9,r2
    a07c:	18bff404 	addi	r2,r3,-48
    a080:	30bff92e 	bgeu	r6,r2,a068 <__alt_data_end+0xff00a068>
    a084:	483da30e 	bge	r9,zero,9714 <__alt_data_end+0xff009714>
    a088:	027fffc4 	movi	r9,-1
    a08c:	003da106 	br	9714 <__alt_data_end+0xff009714>
    a090:	a5001014 	ori	r20,r20,64
    a094:	80c00007 	ldb	r3,0(r16)
    a098:	003d9d06 	br	9710 <__alt_data_end+0xff009710>
    a09c:	da802217 	ldw	r10,136(sp)
    a0a0:	d8001d85 	stb	zero,118(sp)
    a0a4:	50c00204 	addi	r3,r10,8
    a0a8:	54800017 	ldw	r18,0(r10)
    a0ac:	54c00117 	ldw	r19,4(r10)
    a0b0:	4801ca16 	blt	r9,zero,a7dc <___vfiprintf_internal_r+0x1248>
    a0b4:	013fdfc4 	movi	r4,-129
    a0b8:	94c4b03a 	or	r2,r18,r19
    a0bc:	d8c02215 	stw	r3,136(sp)
    a0c0:	a128703a 	and	r20,r20,r4
    a0c4:	0039883a 	mov	fp,zero
    a0c8:	103f341e 	bne	r2,zero,9d9c <__alt_data_end+0xff009d9c>
    a0cc:	483e2e26 	beq	r9,zero,9988 <__alt_data_end+0xff009988>
    a0d0:	0025883a 	mov	r18,zero
    a0d4:	94800c04 	addi	r18,r18,48
    a0d8:	dc8019c5 	stb	r18,103(sp)
    a0dc:	dcc02717 	ldw	r19,156(sp)
    a0e0:	dd4019c4 	addi	r21,sp,103
    a0e4:	003e2b06 	br	9994 <__alt_data_end+0xff009994>
    a0e8:	21003fcc 	andi	r4,r4,255
    a0ec:	2002361e 	bne	r4,zero,a9c8 <___vfiprintf_internal_r+0x1434>
    a0f0:	1801c126 	beq	r3,zero,a7f8 <___vfiprintf_internal_r+0x1264>
    a0f4:	04800044 	movi	r18,1
    a0f8:	d8c01005 	stb	r3,64(sp)
    a0fc:	d8001d85 	stb	zero,118(sp)
    a100:	9027883a 	mov	r19,r18
    a104:	dd401004 	addi	r21,sp,64
    a108:	003f1106 	br	9d50 <__alt_data_end+0xff009d50>
    a10c:	d9402117 	ldw	r5,132(sp)
    a110:	d9002017 	ldw	r4,128(sp)
    a114:	d9801a04 	addi	r6,sp,104
    a118:	d9c02b15 	stw	r7,172(sp)
    a11c:	dbc02a15 	stw	r15,168(sp)
    a120:	00094800 	call	9480 <__sprint_r.part.0>
    a124:	d9c02b17 	ldw	r7,172(sp)
    a128:	dbc02a17 	ldw	r15,168(sp)
    a12c:	10006d1e 	bne	r2,zero,a2e4 <___vfiprintf_internal_r+0xd50>
    a130:	d9801b17 	ldw	r6,108(sp)
    a134:	d8801c17 	ldw	r2,112(sp)
    a138:	d811883a 	mov	r8,sp
    a13c:	31400044 	addi	r5,r6,1
    a140:	003e3306 	br	9a10 <__alt_data_end+0xff009a10>
    a144:	d9401b17 	ldw	r5,108(sp)
    a148:	d8801c17 	ldw	r2,112(sp)
    a14c:	29000044 	addi	r4,r5,1
    a150:	d8c01d87 	ldb	r3,118(sp)
    a154:	183e4d26 	beq	r3,zero,9a8c <__alt_data_end+0xff009a8c>
    a158:	00c00044 	movi	r3,1
    a15c:	d9401d84 	addi	r5,sp,118
    a160:	10c5883a 	add	r2,r2,r3
    a164:	41400015 	stw	r5,0(r8)
    a168:	40c00115 	stw	r3,4(r8)
    a16c:	d8801c15 	stw	r2,112(sp)
    a170:	d9001b15 	stw	r4,108(sp)
    a174:	014001c4 	movi	r5,7
    a178:	2900a90e 	bge	r5,r4,a420 <___vfiprintf_internal_r+0xe8c>
    a17c:	1000da1e 	bne	r2,zero,a4e8 <___vfiprintf_internal_r+0xf54>
    a180:	7000ab1e 	bne	r14,zero,a430 <___vfiprintf_internal_r+0xe9c>
    a184:	000b883a 	mov	r5,zero
    a188:	1809883a 	mov	r4,r3
    a18c:	d811883a 	mov	r8,sp
    a190:	00c02004 	movi	r3,128
    a194:	e0fe4d26 	beq	fp,r3,9acc <__alt_data_end+0xff009acc>
    a198:	4cf9c83a 	sub	fp,r9,r19
    a19c:	073e7b0e 	bge	zero,fp,9b8c <__alt_data_end+0xff009b8c>
    a1a0:	01c00404 	movi	r7,16
    a1a4:	3f01900e 	bge	r7,fp,a7e8 <___vfiprintf_internal_r+0x1254>
    a1a8:	00c00074 	movhi	r3,1
    a1ac:	18c23004 	addi	r3,r3,2240
    a1b0:	d8c02415 	stw	r3,144(sp)
    a1b4:	034001c4 	movi	r13,7
    a1b8:	00000506 	br	a1d0 <___vfiprintf_internal_r+0xc3c>
    a1bc:	29000084 	addi	r4,r5,2
    a1c0:	42000204 	addi	r8,r8,8
    a1c4:	180b883a 	mov	r5,r3
    a1c8:	e73ffc04 	addi	fp,fp,-16
    a1cc:	3f000d0e 	bge	r7,fp,a204 <___vfiprintf_internal_r+0xc70>
    a1d0:	10800404 	addi	r2,r2,16
    a1d4:	28c00044 	addi	r3,r5,1
    a1d8:	45c00015 	stw	r23,0(r8)
    a1dc:	41c00115 	stw	r7,4(r8)
    a1e0:	d8801c15 	stw	r2,112(sp)
    a1e4:	d8c01b15 	stw	r3,108(sp)
    a1e8:	68fff40e 	bge	r13,r3,a1bc <__alt_data_end+0xff00a1bc>
    a1ec:	1000101e 	bne	r2,zero,a230 <___vfiprintf_internal_r+0xc9c>
    a1f0:	e73ffc04 	addi	fp,fp,-16
    a1f4:	01000044 	movi	r4,1
    a1f8:	000b883a 	mov	r5,zero
    a1fc:	d811883a 	mov	r8,sp
    a200:	3f3ff316 	blt	r7,fp,a1d0 <__alt_data_end+0xff00a1d0>
    a204:	da802417 	ldw	r10,144(sp)
    a208:	1705883a 	add	r2,r2,fp
    a20c:	47000115 	stw	fp,4(r8)
    a210:	42800015 	stw	r10,0(r8)
    a214:	d8801c15 	stw	r2,112(sp)
    a218:	d9001b15 	stw	r4,108(sp)
    a21c:	00c001c4 	movi	r3,7
    a220:	19003616 	blt	r3,r4,a2fc <___vfiprintf_internal_r+0xd68>
    a224:	42000204 	addi	r8,r8,8
    a228:	21000044 	addi	r4,r4,1
    a22c:	003e5706 	br	9b8c <__alt_data_end+0xff009b8c>
    a230:	d9402117 	ldw	r5,132(sp)
    a234:	d9002017 	ldw	r4,128(sp)
    a238:	d9801a04 	addi	r6,sp,104
    a23c:	d9c02b15 	stw	r7,172(sp)
    a240:	db402a15 	stw	r13,168(sp)
    a244:	00094800 	call	9480 <__sprint_r.part.0>
    a248:	d9c02b17 	ldw	r7,172(sp)
    a24c:	db402a17 	ldw	r13,168(sp)
    a250:	1000241e 	bne	r2,zero,a2e4 <___vfiprintf_internal_r+0xd50>
    a254:	d9401b17 	ldw	r5,108(sp)
    a258:	d8801c17 	ldw	r2,112(sp)
    a25c:	d811883a 	mov	r8,sp
    a260:	29000044 	addi	r4,r5,1
    a264:	003fd806 	br	a1c8 <__alt_data_end+0xff00a1c8>
    a268:	d9401b17 	ldw	r5,108(sp)
    a26c:	00c00074 	movhi	r3,1
    a270:	18c23404 	addi	r3,r3,2256
    a274:	d8c02415 	stw	r3,144(sp)
    a278:	29400044 	addi	r5,r5,1
    a27c:	d8c02417 	ldw	r3,144(sp)
    a280:	14c5883a 	add	r2,r2,r19
    a284:	44c00115 	stw	r19,4(r8)
    a288:	40c00015 	stw	r3,0(r8)
    a28c:	d8801c15 	stw	r2,112(sp)
    a290:	d9401b15 	stw	r5,108(sp)
    a294:	00c001c4 	movi	r3,7
    a298:	1940070e 	bge	r3,r5,a2b8 <___vfiprintf_internal_r+0xd24>
    a29c:	103e4826 	beq	r2,zero,9bc0 <__alt_data_end+0xff009bc0>
    a2a0:	d9402117 	ldw	r5,132(sp)
    a2a4:	d9002017 	ldw	r4,128(sp)
    a2a8:	d9801a04 	addi	r6,sp,104
    a2ac:	00094800 	call	9480 <__sprint_r.part.0>
    a2b0:	10000c1e 	bne	r2,zero,a2e4 <___vfiprintf_internal_r+0xd50>
    a2b4:	d8801c17 	ldw	r2,112(sp)
    a2b8:	8c80010e 	bge	r17,r18,a2c0 <___vfiprintf_internal_r+0xd2c>
    a2bc:	9023883a 	mov	r17,r18
    a2c0:	da802317 	ldw	r10,140(sp)
    a2c4:	5455883a 	add	r10,r10,r17
    a2c8:	da802315 	stw	r10,140(sp)
    a2cc:	103e4126 	beq	r2,zero,9bd4 <__alt_data_end+0xff009bd4>
    a2d0:	d9402117 	ldw	r5,132(sp)
    a2d4:	d9002017 	ldw	r4,128(sp)
    a2d8:	d9801a04 	addi	r6,sp,104
    a2dc:	00094800 	call	9480 <__sprint_r.part.0>
    a2e0:	103e3c26 	beq	r2,zero,9bd4 <__alt_data_end+0xff009bd4>
    a2e4:	dd002117 	ldw	r20,132(sp)
    a2e8:	a080030b 	ldhu	r2,12(r20)
    a2ec:	1080100c 	andi	r2,r2,64
    a2f0:	1001231e 	bne	r2,zero,a780 <___vfiprintf_internal_r+0x11ec>
    a2f4:	d8802317 	ldw	r2,140(sp)
    a2f8:	003d7b06 	br	98e8 <__alt_data_end+0xff0098e8>
    a2fc:	1000991e 	bne	r2,zero,a564 <___vfiprintf_internal_r+0xfd0>
    a300:	00c00044 	movi	r3,1
    a304:	9805883a 	mov	r2,r19
    a308:	dd400015 	stw	r21,0(sp)
    a30c:	dcc00115 	stw	r19,4(sp)
    a310:	dcc01c15 	stw	r19,112(sp)
    a314:	d8c01b15 	stw	r3,108(sp)
    a318:	d811883a 	mov	r8,sp
    a31c:	42000204 	addi	r8,r8,8
    a320:	a2c0010c 	andi	r11,r20,4
    a324:	583fe426 	beq	r11,zero,a2b8 <__alt_data_end+0xff00a2b8>
    a328:	8ca7c83a 	sub	r19,r17,r18
    a32c:	04ffe20e 	bge	zero,r19,a2b8 <__alt_data_end+0xff00a2b8>
    a330:	01c00404 	movi	r7,16
    a334:	3cffcc0e 	bge	r7,r19,a268 <__alt_data_end+0xff00a268>
    a338:	02800074 	movhi	r10,1
    a33c:	52823404 	addi	r10,r10,2256
    a340:	d9001b17 	ldw	r4,108(sp)
    a344:	da802415 	stw	r10,144(sp)
    a348:	382b883a 	mov	r21,r7
    a34c:	050001c4 	movi	r20,7
    a350:	df002017 	ldw	fp,128(sp)
    a354:	00000506 	br	a36c <___vfiprintf_internal_r+0xdd8>
    a358:	21400084 	addi	r5,r4,2
    a35c:	42000204 	addi	r8,r8,8
    a360:	1809883a 	mov	r4,r3
    a364:	9cfffc04 	addi	r19,r19,-16
    a368:	acffc40e 	bge	r21,r19,a27c <__alt_data_end+0xff00a27c>
    a36c:	10800404 	addi	r2,r2,16
    a370:	20c00044 	addi	r3,r4,1
    a374:	45800015 	stw	r22,0(r8)
    a378:	45400115 	stw	r21,4(r8)
    a37c:	d8801c15 	stw	r2,112(sp)
    a380:	d8c01b15 	stw	r3,108(sp)
    a384:	a0fff40e 	bge	r20,r3,a358 <__alt_data_end+0xff00a358>
    a388:	1000041e 	bne	r2,zero,a39c <___vfiprintf_internal_r+0xe08>
    a38c:	01400044 	movi	r5,1
    a390:	0009883a 	mov	r4,zero
    a394:	d811883a 	mov	r8,sp
    a398:	003ff206 	br	a364 <__alt_data_end+0xff00a364>
    a39c:	d9402117 	ldw	r5,132(sp)
    a3a0:	d9801a04 	addi	r6,sp,104
    a3a4:	e009883a 	mov	r4,fp
    a3a8:	00094800 	call	9480 <__sprint_r.part.0>
    a3ac:	103fcd1e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a3b0:	d9001b17 	ldw	r4,108(sp)
    a3b4:	d8801c17 	ldw	r2,112(sp)
    a3b8:	d811883a 	mov	r8,sp
    a3bc:	21400044 	addi	r5,r4,1
    a3c0:	003fe806 	br	a364 <__alt_data_end+0xff00a364>
    a3c4:	d9402117 	ldw	r5,132(sp)
    a3c8:	d9002017 	ldw	r4,128(sp)
    a3cc:	d9801a04 	addi	r6,sp,104
    a3d0:	d9c02b15 	stw	r7,172(sp)
    a3d4:	db402a15 	stw	r13,168(sp)
    a3d8:	00094800 	call	9480 <__sprint_r.part.0>
    a3dc:	d9c02b17 	ldw	r7,172(sp)
    a3e0:	db402a17 	ldw	r13,168(sp)
    a3e4:	103fbf1e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a3e8:	d9401b17 	ldw	r5,108(sp)
    a3ec:	d8801c17 	ldw	r2,112(sp)
    a3f0:	d811883a 	mov	r8,sp
    a3f4:	29800044 	addi	r6,r5,1
    a3f8:	003dc406 	br	9b0c <__alt_data_end+0xff009b0c>
    a3fc:	1000d21e 	bne	r2,zero,a748 <___vfiprintf_internal_r+0x11b4>
    a400:	d8c01d87 	ldb	r3,118(sp)
    a404:	18009526 	beq	r3,zero,a65c <___vfiprintf_internal_r+0x10c8>
    a408:	00800044 	movi	r2,1
    a40c:	d8c01d84 	addi	r3,sp,118
    a410:	1009883a 	mov	r4,r2
    a414:	d8c00015 	stw	r3,0(sp)
    a418:	d8800115 	stw	r2,4(sp)
    a41c:	d811883a 	mov	r8,sp
    a420:	200b883a 	mov	r5,r4
    a424:	42000204 	addi	r8,r8,8
    a428:	21000044 	addi	r4,r4,1
    a42c:	003d9706 	br	9a8c <__alt_data_end+0xff009a8c>
    a430:	d9001d04 	addi	r4,sp,116
    a434:	00800084 	movi	r2,2
    a438:	d9000015 	stw	r4,0(sp)
    a43c:	d8800115 	stw	r2,4(sp)
    a440:	1809883a 	mov	r4,r3
    a444:	d811883a 	mov	r8,sp
    a448:	200b883a 	mov	r5,r4
    a44c:	42000204 	addi	r8,r8,8
    a450:	21000044 	addi	r4,r4,1
    a454:	003f4e06 	br	a190 <__alt_data_end+0xff00a190>
    a458:	d8001d85 	stb	zero,118(sp)
    a45c:	48005016 	blt	r9,zero,a5a0 <___vfiprintf_internal_r+0x100c>
    a460:	00ffdfc4 	movi	r3,-129
    a464:	94c4b03a 	or	r2,r18,r19
    a468:	a0e8703a 	and	r20,r20,r3
    a46c:	103d4426 	beq	r2,zero,9980 <__alt_data_end+0xff009980>
    a470:	0039883a 	mov	fp,zero
    a474:	d9002617 	ldw	r4,152(sp)
    a478:	dd401a04 	addi	r21,sp,104
    a47c:	908003cc 	andi	r2,r18,15
    a480:	9806973a 	slli	r3,r19,28
    a484:	2085883a 	add	r2,r4,r2
    a488:	9024d13a 	srli	r18,r18,4
    a48c:	10800003 	ldbu	r2,0(r2)
    a490:	9826d13a 	srli	r19,r19,4
    a494:	ad7fffc4 	addi	r21,r21,-1
    a498:	1ca4b03a 	or	r18,r3,r18
    a49c:	a8800005 	stb	r2,0(r21)
    a4a0:	94c4b03a 	or	r2,r18,r19
    a4a4:	103ff51e 	bne	r2,zero,a47c <__alt_data_end+0xff00a47c>
    a4a8:	003e5906 	br	9e10 <__alt_data_end+0xff009e10>
    a4ac:	d9402117 	ldw	r5,132(sp)
    a4b0:	d9002017 	ldw	r4,128(sp)
    a4b4:	d9801a04 	addi	r6,sp,104
    a4b8:	00094800 	call	9480 <__sprint_r.part.0>
    a4bc:	103f891e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a4c0:	d8801c17 	ldw	r2,112(sp)
    a4c4:	d811883a 	mov	r8,sp
    a4c8:	003f9506 	br	a320 <__alt_data_end+0xff00a320>
    a4cc:	d9402117 	ldw	r5,132(sp)
    a4d0:	d9002017 	ldw	r4,128(sp)
    a4d4:	d9801a04 	addi	r6,sp,104
    a4d8:	00094800 	call	9480 <__sprint_r.part.0>
    a4dc:	103f811e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a4e0:	d811883a 	mov	r8,sp
    a4e4:	003ced06 	br	989c <__alt_data_end+0xff00989c>
    a4e8:	d9402117 	ldw	r5,132(sp)
    a4ec:	d9002017 	ldw	r4,128(sp)
    a4f0:	d9801a04 	addi	r6,sp,104
    a4f4:	da402c15 	stw	r9,176(sp)
    a4f8:	db802a15 	stw	r14,168(sp)
    a4fc:	00094800 	call	9480 <__sprint_r.part.0>
    a500:	da402c17 	ldw	r9,176(sp)
    a504:	db802a17 	ldw	r14,168(sp)
    a508:	103f761e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a50c:	d9401b17 	ldw	r5,108(sp)
    a510:	d8801c17 	ldw	r2,112(sp)
    a514:	d811883a 	mov	r8,sp
    a518:	29000044 	addi	r4,r5,1
    a51c:	003d5b06 	br	9a8c <__alt_data_end+0xff009a8c>
    a520:	d9402117 	ldw	r5,132(sp)
    a524:	d9002017 	ldw	r4,128(sp)
    a528:	d9801a04 	addi	r6,sp,104
    a52c:	da402c15 	stw	r9,176(sp)
    a530:	00094800 	call	9480 <__sprint_r.part.0>
    a534:	da402c17 	ldw	r9,176(sp)
    a538:	103f6a1e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a53c:	d9401b17 	ldw	r5,108(sp)
    a540:	d8801c17 	ldw	r2,112(sp)
    a544:	d811883a 	mov	r8,sp
    a548:	29000044 	addi	r4,r5,1
    a54c:	003f1006 	br	a190 <__alt_data_end+0xff00a190>
    a550:	1000c31e 	bne	r2,zero,a860 <___vfiprintf_internal_r+0x12cc>
    a554:	01000044 	movi	r4,1
    a558:	000b883a 	mov	r5,zero
    a55c:	d811883a 	mov	r8,sp
    a560:	003f0d06 	br	a198 <__alt_data_end+0xff00a198>
    a564:	d9402117 	ldw	r5,132(sp)
    a568:	d9002017 	ldw	r4,128(sp)
    a56c:	d9801a04 	addi	r6,sp,104
    a570:	00094800 	call	9480 <__sprint_r.part.0>
    a574:	103f5b1e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a578:	d9001b17 	ldw	r4,108(sp)
    a57c:	d8801c17 	ldw	r2,112(sp)
    a580:	d811883a 	mov	r8,sp
    a584:	21000044 	addi	r4,r4,1
    a588:	003d8006 	br	9b8c <__alt_data_end+0xff009b8c>
    a58c:	01000074 	movhi	r4,1
    a590:	2101cf04 	addi	r4,r4,1852
    a594:	d9002615 	stw	r4,152(sp)
    a598:	d8c02215 	stw	r3,136(sp)
    a59c:	1029883a 	mov	r20,r2
    a5a0:	94c4b03a 	or	r2,r18,r19
    a5a4:	103fb21e 	bne	r2,zero,a470 <__alt_data_end+0xff00a470>
    a5a8:	0039883a 	mov	fp,zero
    a5ac:	00800084 	movi	r2,2
    a5b0:	003e6b06 	br	9f60 <__alt_data_end+0xff009f60>
    a5b4:	da802217 	ldw	r10,136(sp)
    a5b8:	d8001d85 	stb	zero,118(sp)
    a5bc:	0027883a 	mov	r19,zero
    a5c0:	50800104 	addi	r2,r10,4
    a5c4:	54800017 	ldw	r18,0(r10)
    a5c8:	483e6016 	blt	r9,zero,9f4c <__alt_data_end+0xff009f4c>
    a5cc:	00ffdfc4 	movi	r3,-129
    a5d0:	d8802215 	stw	r2,136(sp)
    a5d4:	a0e8703a 	and	r20,r20,r3
    a5d8:	0039883a 	mov	fp,zero
    a5dc:	903ebb26 	beq	r18,zero,a0cc <__alt_data_end+0xff00a0cc>
    a5e0:	00800244 	movi	r2,9
    a5e4:	14bdee36 	bltu	r2,r18,9da0 <__alt_data_end+0xff009da0>
    a5e8:	003eba06 	br	a0d4 <__alt_data_end+0xff00a0d4>
    a5ec:	00800c04 	movi	r2,48
    a5f0:	d8c01d45 	stb	r3,117(sp)
    a5f4:	d8801d05 	stb	r2,116(sp)
    a5f8:	d8001d85 	stb	zero,118(sp)
    a5fc:	a0c00094 	ori	r3,r20,2
    a600:	4800a916 	blt	r9,zero,a8a8 <___vfiprintf_internal_r+0x1314>
    a604:	00bfdfc4 	movi	r2,-129
    a608:	a096703a 	and	r11,r20,r2
    a60c:	5d000094 	ori	r20,r11,2
    a610:	0039883a 	mov	fp,zero
    a614:	003f9706 	br	a474 <__alt_data_end+0xff00a474>
    a618:	8025883a 	mov	r18,r16
    a61c:	003c2e06 	br	96d8 <__alt_data_end+0xff0096d8>
    a620:	00800074 	movhi	r2,1
    a624:	1081cf04 	addi	r2,r2,1852
    a628:	0039883a 	mov	fp,zero
    a62c:	d8802615 	stw	r2,152(sp)
    a630:	003f9006 	br	a474 <__alt_data_end+0xff00a474>
    a634:	04a5c83a 	sub	r18,zero,r18
    a638:	07000b44 	movi	fp,45
    a63c:	9004c03a 	cmpne	r2,r18,zero
    a640:	04e7c83a 	sub	r19,zero,r19
    a644:	df001d85 	stb	fp,118(sp)
    a648:	98a7c83a 	sub	r19,r19,r2
    a64c:	48009f16 	blt	r9,zero,a8cc <___vfiprintf_internal_r+0x1338>
    a650:	00bfdfc4 	movi	r2,-129
    a654:	a0a8703a 	and	r20,r20,r2
    a658:	003dd006 	br	9d9c <__alt_data_end+0xff009d9c>
    a65c:	70004c26 	beq	r14,zero,a790 <___vfiprintf_internal_r+0x11fc>
    a660:	00800084 	movi	r2,2
    a664:	d8c01d04 	addi	r3,sp,116
    a668:	d8c00015 	stw	r3,0(sp)
    a66c:	d8800115 	stw	r2,4(sp)
    a670:	01000044 	movi	r4,1
    a674:	d811883a 	mov	r8,sp
    a678:	003f7306 	br	a448 <__alt_data_end+0xff00a448>
    a67c:	a080100c 	andi	r2,r20,64
    a680:	da802217 	ldw	r10,136(sp)
    a684:	103e0626 	beq	r2,zero,9ea0 <__alt_data_end+0xff009ea0>
    a688:	5480000f 	ldh	r18,0(r10)
    a68c:	52800104 	addi	r10,r10,4
    a690:	da802215 	stw	r10,136(sp)
    a694:	9027d7fa 	srai	r19,r18,31
    a698:	9805883a 	mov	r2,r19
    a69c:	003db806 	br	9d80 <__alt_data_end+0xff009d80>
    a6a0:	a080040c 	andi	r2,r20,16
    a6a4:	1000091e 	bne	r2,zero,a6cc <___vfiprintf_internal_r+0x1138>
    a6a8:	a2c0100c 	andi	r11,r20,64
    a6ac:	58000726 	beq	r11,zero,a6cc <___vfiprintf_internal_r+0x1138>
    a6b0:	da802217 	ldw	r10,136(sp)
    a6b4:	50800017 	ldw	r2,0(r10)
    a6b8:	52800104 	addi	r10,r10,4
    a6bc:	da802215 	stw	r10,136(sp)
    a6c0:	da802317 	ldw	r10,140(sp)
    a6c4:	1280000d 	sth	r10,0(r2)
    a6c8:	003be706 	br	9668 <__alt_data_end+0xff009668>
    a6cc:	da802217 	ldw	r10,136(sp)
    a6d0:	50800017 	ldw	r2,0(r10)
    a6d4:	52800104 	addi	r10,r10,4
    a6d8:	da802215 	stw	r10,136(sp)
    a6dc:	da802317 	ldw	r10,140(sp)
    a6e0:	12800015 	stw	r10,0(r2)
    a6e4:	003be006 	br	9668 <__alt_data_end+0xff009668>
    a6e8:	a080100c 	andi	r2,r20,64
    a6ec:	da802217 	ldw	r10,136(sp)
    a6f0:	10003026 	beq	r2,zero,a7b4 <___vfiprintf_internal_r+0x1220>
    a6f4:	5480000b 	ldhu	r18,0(r10)
    a6f8:	52800104 	addi	r10,r10,4
    a6fc:	0027883a 	mov	r19,zero
    a700:	da802215 	stw	r10,136(sp)
    a704:	003d8006 	br	9d08 <__alt_data_end+0xff009d08>
    a708:	80c00007 	ldb	r3,0(r16)
    a70c:	003c0006 	br	9710 <__alt_data_end+0xff009710>
    a710:	a080100c 	andi	r2,r20,64
    a714:	d8001d85 	stb	zero,118(sp)
    a718:	da802217 	ldw	r10,136(sp)
    a71c:	1000201e 	bne	r2,zero,a7a0 <___vfiprintf_internal_r+0x120c>
    a720:	50800104 	addi	r2,r10,4
    a724:	54800017 	ldw	r18,0(r10)
    a728:	0027883a 	mov	r19,zero
    a72c:	483def0e 	bge	r9,zero,9eec <__alt_data_end+0xff009eec>
    a730:	94c6b03a 	or	r3,r18,r19
    a734:	d8802215 	stw	r2,136(sp)
    a738:	183d4e1e 	bne	r3,zero,9c74 <__alt_data_end+0xff009c74>
    a73c:	0039883a 	mov	fp,zero
    a740:	0005883a 	mov	r2,zero
    a744:	003e0606 	br	9f60 <__alt_data_end+0xff009f60>
    a748:	d9402117 	ldw	r5,132(sp)
    a74c:	d9002017 	ldw	r4,128(sp)
    a750:	d9801a04 	addi	r6,sp,104
    a754:	da402c15 	stw	r9,176(sp)
    a758:	db802a15 	stw	r14,168(sp)
    a75c:	00094800 	call	9480 <__sprint_r.part.0>
    a760:	da402c17 	ldw	r9,176(sp)
    a764:	db802a17 	ldw	r14,168(sp)
    a768:	103ede1e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a76c:	d9401b17 	ldw	r5,108(sp)
    a770:	d8801c17 	ldw	r2,112(sp)
    a774:	d811883a 	mov	r8,sp
    a778:	29000044 	addi	r4,r5,1
    a77c:	003e7406 	br	a150 <__alt_data_end+0xff00a150>
    a780:	00bfffc4 	movi	r2,-1
    a784:	003c5806 	br	98e8 <__alt_data_end+0xff0098e8>
    a788:	d811883a 	mov	r8,sp
    a78c:	003ee806 	br	a330 <__alt_data_end+0xff00a330>
    a790:	000b883a 	mov	r5,zero
    a794:	01000044 	movi	r4,1
    a798:	d811883a 	mov	r8,sp
    a79c:	003e7c06 	br	a190 <__alt_data_end+0xff00a190>
    a7a0:	50800104 	addi	r2,r10,4
    a7a4:	5480000b 	ldhu	r18,0(r10)
    a7a8:	0027883a 	mov	r19,zero
    a7ac:	483dcf0e 	bge	r9,zero,9eec <__alt_data_end+0xff009eec>
    a7b0:	003fdf06 	br	a730 <__alt_data_end+0xff00a730>
    a7b4:	54800017 	ldw	r18,0(r10)
    a7b8:	52800104 	addi	r10,r10,4
    a7bc:	0027883a 	mov	r19,zero
    a7c0:	da802215 	stw	r10,136(sp)
    a7c4:	003d5006 	br	9d08 <__alt_data_end+0xff009d08>
    a7c8:	50800104 	addi	r2,r10,4
    a7cc:	5480000b 	ldhu	r18,0(r10)
    a7d0:	0027883a 	mov	r19,zero
    a7d4:	483f7d0e 	bge	r9,zero,a5cc <__alt_data_end+0xff00a5cc>
    a7d8:	003ddc06 	br	9f4c <__alt_data_end+0xff009f4c>
    a7dc:	d8c02215 	stw	r3,136(sp)
    a7e0:	0039883a 	mov	fp,zero
    a7e4:	003ddb06 	br	9f54 <__alt_data_end+0xff009f54>
    a7e8:	02800074 	movhi	r10,1
    a7ec:	52823004 	addi	r10,r10,2240
    a7f0:	da802415 	stw	r10,144(sp)
    a7f4:	003e8306 	br	a204 <__alt_data_end+0xff00a204>
    a7f8:	d8801c17 	ldw	r2,112(sp)
    a7fc:	dd002117 	ldw	r20,132(sp)
    a800:	103eb926 	beq	r2,zero,a2e8 <__alt_data_end+0xff00a2e8>
    a804:	d9002017 	ldw	r4,128(sp)
    a808:	d9801a04 	addi	r6,sp,104
    a80c:	a00b883a 	mov	r5,r20
    a810:	00094800 	call	9480 <__sprint_r.part.0>
    a814:	003eb406 	br	a2e8 <__alt_data_end+0xff00a2e8>
    a818:	80c00043 	ldbu	r3,1(r16)
    a81c:	a5000814 	ori	r20,r20,32
    a820:	84000044 	addi	r16,r16,1
    a824:	18c03fcc 	andi	r3,r3,255
    a828:	18c0201c 	xori	r3,r3,128
    a82c:	18ffe004 	addi	r3,r3,-128
    a830:	003bb706 	br	9710 <__alt_data_end+0xff009710>
    a834:	a809883a 	mov	r4,r21
    a838:	d8c02a15 	stw	r3,168(sp)
    a83c:	da002b15 	stw	r8,172(sp)
    a840:	00027480 	call	2748 <strlen>
    a844:	d8c02a17 	ldw	r3,168(sp)
    a848:	1027883a 	mov	r19,r2
    a84c:	df001d83 	ldbu	fp,118(sp)
    a850:	d8c02215 	stw	r3,136(sp)
    a854:	0013883a 	mov	r9,zero
    a858:	da002b17 	ldw	r8,172(sp)
    a85c:	003c4d06 	br	9994 <__alt_data_end+0xff009994>
    a860:	d9402117 	ldw	r5,132(sp)
    a864:	d9002017 	ldw	r4,128(sp)
    a868:	d9801a04 	addi	r6,sp,104
    a86c:	da402c15 	stw	r9,176(sp)
    a870:	00094800 	call	9480 <__sprint_r.part.0>
    a874:	da402c17 	ldw	r9,176(sp)
    a878:	103e9a1e 	bne	r2,zero,a2e4 <__alt_data_end+0xff00a2e4>
    a87c:	d9401b17 	ldw	r5,108(sp)
    a880:	d8801c17 	ldw	r2,112(sp)
    a884:	d811883a 	mov	r8,sp
    a888:	29000044 	addi	r4,r5,1
    a88c:	003e4206 	br	a198 <__alt_data_end+0xff00a198>
    a890:	d9401b17 	ldw	r5,108(sp)
    a894:	01000074 	movhi	r4,1
    a898:	21023404 	addi	r4,r4,2256
    a89c:	d9002415 	stw	r4,144(sp)
    a8a0:	29400044 	addi	r5,r5,1
    a8a4:	003c6d06 	br	9a5c <__alt_data_end+0xff009a5c>
    a8a8:	0039883a 	mov	fp,zero
    a8ac:	00800084 	movi	r2,2
    a8b0:	10803fcc 	andi	r2,r2,255
    a8b4:	01000044 	movi	r4,1
    a8b8:	11001e26 	beq	r2,r4,a934 <___vfiprintf_internal_r+0x13a0>
    a8bc:	01000084 	movi	r4,2
    a8c0:	11001e1e 	bne	r2,r4,a93c <___vfiprintf_internal_r+0x13a8>
    a8c4:	1829883a 	mov	r20,r3
    a8c8:	003eea06 	br	a474 <__alt_data_end+0xff00a474>
    a8cc:	a007883a 	mov	r3,r20
    a8d0:	00800044 	movi	r2,1
    a8d4:	003ff606 	br	a8b0 <__alt_data_end+0xff00a8b0>
    a8d8:	00800184 	movi	r2,6
    a8dc:	1240012e 	bgeu	r2,r9,a8e4 <___vfiprintf_internal_r+0x1350>
    a8e0:	1013883a 	mov	r9,r2
    a8e4:	4827883a 	mov	r19,r9
    a8e8:	4825883a 	mov	r18,r9
    a8ec:	48001516 	blt	r9,zero,a944 <___vfiprintf_internal_r+0x13b0>
    a8f0:	05400074 	movhi	r21,1
    a8f4:	d8c02215 	stw	r3,136(sp)
    a8f8:	ad41d404 	addi	r21,r21,1872
    a8fc:	003d1406 	br	9d50 <__alt_data_end+0xff009d50>
    a900:	02800074 	movhi	r10,1
    a904:	52823004 	addi	r10,r10,2240
    a908:	da802415 	stw	r10,144(sp)
    a90c:	200d883a 	mov	r6,r4
    a910:	003c9106 	br	9b58 <__alt_data_end+0xff009b58>
    a914:	5021883a 	mov	r16,r10
    a918:	0013883a 	mov	r9,zero
    a91c:	003b7d06 	br	9714 <__alt_data_end+0xff009714>
    a920:	4827883a 	mov	r19,r9
    a924:	df001d83 	ldbu	fp,118(sp)
    a928:	d8c02215 	stw	r3,136(sp)
    a92c:	0013883a 	mov	r9,zero
    a930:	003c1806 	br	9994 <__alt_data_end+0xff009994>
    a934:	1829883a 	mov	r20,r3
    a938:	003d1806 	br	9d9c <__alt_data_end+0xff009d9c>
    a93c:	1829883a 	mov	r20,r3
    a940:	003ccd06 	br	9c78 <__alt_data_end+0xff009c78>
    a944:	0025883a 	mov	r18,zero
    a948:	003fe906 	br	a8f0 <__alt_data_end+0xff00a8f0>
    a94c:	d8802217 	ldw	r2,136(sp)
    a950:	80c00043 	ldbu	r3,1(r16)
    a954:	5021883a 	mov	r16,r10
    a958:	12400017 	ldw	r9,0(r2)
    a95c:	10800104 	addi	r2,r2,4
    a960:	d8802215 	stw	r2,136(sp)
    a964:	483faf0e 	bge	r9,zero,a824 <__alt_data_end+0xff00a824>
    a968:	18c03fcc 	andi	r3,r3,255
    a96c:	18c0201c 	xori	r3,r3,128
    a970:	027fffc4 	movi	r9,-1
    a974:	18ffe004 	addi	r3,r3,-128
    a978:	003b6506 	br	9710 <__alt_data_end+0xff009710>
    a97c:	d9c01d85 	stb	r7,118(sp)
    a980:	003ca006 	br	9c04 <__alt_data_end+0xff009c04>
    a984:	d9c01d85 	stb	r7,118(sp)
    a988:	003cad06 	br	9c40 <__alt_data_end+0xff009c40>
    a98c:	d9c01d85 	stb	r7,118(sp)
    a990:	003d7d06 	br	9f88 <__alt_data_end+0xff009f88>
    a994:	d9c01d85 	stb	r7,118(sp)
    a998:	003d5f06 	br	9f18 <__alt_data_end+0xff009f18>
    a99c:	a080004c 	andi	r2,r20,1
    a9a0:	0039883a 	mov	fp,zero
    a9a4:	10000526 	beq	r2,zero,a9bc <___vfiprintf_internal_r+0x1428>
    a9a8:	00800c04 	movi	r2,48
    a9ac:	d88019c5 	stb	r2,103(sp)
    a9b0:	dcc02717 	ldw	r19,156(sp)
    a9b4:	dd4019c4 	addi	r21,sp,103
    a9b8:	003bf606 	br	9994 <__alt_data_end+0xff009994>
    a9bc:	0027883a 	mov	r19,zero
    a9c0:	dd401a04 	addi	r21,sp,104
    a9c4:	003bf306 	br	9994 <__alt_data_end+0xff009994>
    a9c8:	d9c01d85 	stb	r7,118(sp)
    a9cc:	003dc806 	br	a0f0 <__alt_data_end+0xff00a0f0>
    a9d0:	d9c01d85 	stb	r7,118(sp)
    a9d4:	003d3a06 	br	9ec0 <__alt_data_end+0xff009ec0>
    a9d8:	d9c01d85 	stb	r7,118(sp)
    a9dc:	003d2a06 	br	9e88 <__alt_data_end+0xff009e88>
    a9e0:	d9c01d85 	stb	r7,118(sp)
    a9e4:	003cde06 	br	9d60 <__alt_data_end+0xff009d60>
    a9e8:	d9c01d85 	stb	r7,118(sp)
    a9ec:	003cbc06 	br	9ce0 <__alt_data_end+0xff009ce0>

0000a9f0 <__vfiprintf_internal>:
    a9f0:	00800074 	movhi	r2,1
    a9f4:	10892f04 	addi	r2,r2,9404
    a9f8:	300f883a 	mov	r7,r6
    a9fc:	280d883a 	mov	r6,r5
    aa00:	200b883a 	mov	r5,r4
    aa04:	11000017 	ldw	r4,0(r2)
    aa08:	00095941 	jmpi	9594 <___vfiprintf_internal_r>

0000aa0c <__sbprintf>:
    aa0c:	2880030b 	ldhu	r2,12(r5)
    aa10:	2ac01917 	ldw	r11,100(r5)
    aa14:	2a80038b 	ldhu	r10,14(r5)
    aa18:	2a400717 	ldw	r9,28(r5)
    aa1c:	2a000917 	ldw	r8,36(r5)
    aa20:	defee204 	addi	sp,sp,-1144
    aa24:	00c10004 	movi	r3,1024
    aa28:	dc011a15 	stw	r16,1128(sp)
    aa2c:	10bfff4c 	andi	r2,r2,65533
    aa30:	2821883a 	mov	r16,r5
    aa34:	d8cb883a 	add	r5,sp,r3
    aa38:	dc811c15 	stw	r18,1136(sp)
    aa3c:	dc411b15 	stw	r17,1132(sp)
    aa40:	dfc11d15 	stw	ra,1140(sp)
    aa44:	2025883a 	mov	r18,r4
    aa48:	d881030d 	sth	r2,1036(sp)
    aa4c:	dac11915 	stw	r11,1124(sp)
    aa50:	da81038d 	sth	r10,1038(sp)
    aa54:	da410715 	stw	r9,1052(sp)
    aa58:	da010915 	stw	r8,1060(sp)
    aa5c:	dec10015 	stw	sp,1024(sp)
    aa60:	dec10415 	stw	sp,1040(sp)
    aa64:	d8c10215 	stw	r3,1032(sp)
    aa68:	d8c10515 	stw	r3,1044(sp)
    aa6c:	d8010615 	stw	zero,1048(sp)
    aa70:	00095940 	call	9594 <___vfiprintf_internal_r>
    aa74:	1023883a 	mov	r17,r2
    aa78:	10000416 	blt	r2,zero,aa8c <__sbprintf+0x80>
    aa7c:	d9410004 	addi	r5,sp,1024
    aa80:	9009883a 	mov	r4,r18
    aa84:	00066a80 	call	66a8 <_fflush_r>
    aa88:	10000d1e 	bne	r2,zero,aac0 <__sbprintf+0xb4>
    aa8c:	d881030b 	ldhu	r2,1036(sp)
    aa90:	1080100c 	andi	r2,r2,64
    aa94:	10000326 	beq	r2,zero,aaa4 <__sbprintf+0x98>
    aa98:	8080030b 	ldhu	r2,12(r16)
    aa9c:	10801014 	ori	r2,r2,64
    aaa0:	8080030d 	sth	r2,12(r16)
    aaa4:	8805883a 	mov	r2,r17
    aaa8:	dfc11d17 	ldw	ra,1140(sp)
    aaac:	dc811c17 	ldw	r18,1136(sp)
    aab0:	dc411b17 	ldw	r17,1132(sp)
    aab4:	dc011a17 	ldw	r16,1128(sp)
    aab8:	dec11e04 	addi	sp,sp,1144
    aabc:	f800283a 	ret
    aac0:	047fffc4 	movi	r17,-1
    aac4:	003ff106 	br	aa8c <__alt_data_end+0xff00aa8c>

0000aac8 <_write_r>:
    aac8:	defffd04 	addi	sp,sp,-12
    aacc:	2805883a 	mov	r2,r5
    aad0:	dc000015 	stw	r16,0(sp)
    aad4:	04000074 	movhi	r16,1
    aad8:	dc400115 	stw	r17,4(sp)
    aadc:	300b883a 	mov	r5,r6
    aae0:	84100604 	addi	r16,r16,16408
    aae4:	2023883a 	mov	r17,r4
    aae8:	380d883a 	mov	r6,r7
    aaec:	1009883a 	mov	r4,r2
    aaf0:	dfc00215 	stw	ra,8(sp)
    aaf4:	80000015 	stw	zero,0(r16)
    aaf8:	000ebe00 	call	ebe0 <write>
    aafc:	00ffffc4 	movi	r3,-1
    ab00:	10c00526 	beq	r2,r3,ab18 <_write_r+0x50>
    ab04:	dfc00217 	ldw	ra,8(sp)
    ab08:	dc400117 	ldw	r17,4(sp)
    ab0c:	dc000017 	ldw	r16,0(sp)
    ab10:	dec00304 	addi	sp,sp,12
    ab14:	f800283a 	ret
    ab18:	80c00017 	ldw	r3,0(r16)
    ab1c:	183ff926 	beq	r3,zero,ab04 <__alt_data_end+0xff00ab04>
    ab20:	88c00015 	stw	r3,0(r17)
    ab24:	003ff706 	br	ab04 <__alt_data_end+0xff00ab04>

0000ab28 <_close_r>:
    ab28:	defffd04 	addi	sp,sp,-12
    ab2c:	dc000015 	stw	r16,0(sp)
    ab30:	04000074 	movhi	r16,1
    ab34:	dc400115 	stw	r17,4(sp)
    ab38:	84100604 	addi	r16,r16,16408
    ab3c:	2023883a 	mov	r17,r4
    ab40:	2809883a 	mov	r4,r5
    ab44:	dfc00215 	stw	ra,8(sp)
    ab48:	80000015 	stw	zero,0(r16)
    ab4c:	000e6c80 	call	e6c8 <close>
    ab50:	00ffffc4 	movi	r3,-1
    ab54:	10c00526 	beq	r2,r3,ab6c <_close_r+0x44>
    ab58:	dfc00217 	ldw	ra,8(sp)
    ab5c:	dc400117 	ldw	r17,4(sp)
    ab60:	dc000017 	ldw	r16,0(sp)
    ab64:	dec00304 	addi	sp,sp,12
    ab68:	f800283a 	ret
    ab6c:	80c00017 	ldw	r3,0(r16)
    ab70:	183ff926 	beq	r3,zero,ab58 <__alt_data_end+0xff00ab58>
    ab74:	88c00015 	stw	r3,0(r17)
    ab78:	003ff706 	br	ab58 <__alt_data_end+0xff00ab58>

0000ab7c <_calloc_r>:
    ab7c:	298b383a 	mul	r5,r5,r6
    ab80:	defffe04 	addi	sp,sp,-8
    ab84:	dfc00115 	stw	ra,4(sp)
    ab88:	dc000015 	stw	r16,0(sp)
    ab8c:	0001da80 	call	1da8 <_malloc_r>
    ab90:	10002926 	beq	r2,zero,ac38 <_calloc_r+0xbc>
    ab94:	11bfff17 	ldw	r6,-4(r2)
    ab98:	1021883a 	mov	r16,r2
    ab9c:	00bfff04 	movi	r2,-4
    aba0:	308c703a 	and	r6,r6,r2
    aba4:	00c00904 	movi	r3,36
    aba8:	308d883a 	add	r6,r6,r2
    abac:	19801636 	bltu	r3,r6,ac08 <_calloc_r+0x8c>
    abb0:	008004c4 	movi	r2,19
    abb4:	11800b2e 	bgeu	r2,r6,abe4 <_calloc_r+0x68>
    abb8:	80000015 	stw	zero,0(r16)
    abbc:	80000115 	stw	zero,4(r16)
    abc0:	008006c4 	movi	r2,27
    abc4:	11801a2e 	bgeu	r2,r6,ac30 <_calloc_r+0xb4>
    abc8:	80000215 	stw	zero,8(r16)
    abcc:	80000315 	stw	zero,12(r16)
    abd0:	30c0151e 	bne	r6,r3,ac28 <_calloc_r+0xac>
    abd4:	80000415 	stw	zero,16(r16)
    abd8:	80800604 	addi	r2,r16,24
    abdc:	80000515 	stw	zero,20(r16)
    abe0:	00000106 	br	abe8 <_calloc_r+0x6c>
    abe4:	8005883a 	mov	r2,r16
    abe8:	10000015 	stw	zero,0(r2)
    abec:	10000115 	stw	zero,4(r2)
    abf0:	10000215 	stw	zero,8(r2)
    abf4:	8005883a 	mov	r2,r16
    abf8:	dfc00117 	ldw	ra,4(sp)
    abfc:	dc000017 	ldw	r16,0(sp)
    ac00:	dec00204 	addi	sp,sp,8
    ac04:	f800283a 	ret
    ac08:	000b883a 	mov	r5,zero
    ac0c:	8009883a 	mov	r4,r16
    ac10:	0007b6c0 	call	7b6c <memset>
    ac14:	8005883a 	mov	r2,r16
    ac18:	dfc00117 	ldw	ra,4(sp)
    ac1c:	dc000017 	ldw	r16,0(sp)
    ac20:	dec00204 	addi	sp,sp,8
    ac24:	f800283a 	ret
    ac28:	80800404 	addi	r2,r16,16
    ac2c:	003fee06 	br	abe8 <__alt_data_end+0xff00abe8>
    ac30:	80800204 	addi	r2,r16,8
    ac34:	003fec06 	br	abe8 <__alt_data_end+0xff00abe8>
    ac38:	0005883a 	mov	r2,zero
    ac3c:	003fee06 	br	abf8 <__alt_data_end+0xff00abf8>

0000ac40 <_fclose_r>:
    ac40:	28003926 	beq	r5,zero,ad28 <_fclose_r+0xe8>
    ac44:	defffc04 	addi	sp,sp,-16
    ac48:	dc400115 	stw	r17,4(sp)
    ac4c:	dc000015 	stw	r16,0(sp)
    ac50:	dfc00315 	stw	ra,12(sp)
    ac54:	dc800215 	stw	r18,8(sp)
    ac58:	2023883a 	mov	r17,r4
    ac5c:	2821883a 	mov	r16,r5
    ac60:	20000226 	beq	r4,zero,ac6c <_fclose_r+0x2c>
    ac64:	20800e17 	ldw	r2,56(r4)
    ac68:	10002726 	beq	r2,zero,ad08 <_fclose_r+0xc8>
    ac6c:	8080030f 	ldh	r2,12(r16)
    ac70:	1000071e 	bne	r2,zero,ac90 <_fclose_r+0x50>
    ac74:	0005883a 	mov	r2,zero
    ac78:	dfc00317 	ldw	ra,12(sp)
    ac7c:	dc800217 	ldw	r18,8(sp)
    ac80:	dc400117 	ldw	r17,4(sp)
    ac84:	dc000017 	ldw	r16,0(sp)
    ac88:	dec00404 	addi	sp,sp,16
    ac8c:	f800283a 	ret
    ac90:	800b883a 	mov	r5,r16
    ac94:	8809883a 	mov	r4,r17
    ac98:	000648c0 	call	648c <__sflush_r>
    ac9c:	1025883a 	mov	r18,r2
    aca0:	80800b17 	ldw	r2,44(r16)
    aca4:	10000426 	beq	r2,zero,acb8 <_fclose_r+0x78>
    aca8:	81400717 	ldw	r5,28(r16)
    acac:	8809883a 	mov	r4,r17
    acb0:	103ee83a 	callr	r2
    acb4:	10001616 	blt	r2,zero,ad10 <_fclose_r+0xd0>
    acb8:	8080030b 	ldhu	r2,12(r16)
    acbc:	1080200c 	andi	r2,r2,128
    acc0:	1000151e 	bne	r2,zero,ad18 <_fclose_r+0xd8>
    acc4:	81400c17 	ldw	r5,48(r16)
    acc8:	28000526 	beq	r5,zero,ace0 <_fclose_r+0xa0>
    accc:	80801004 	addi	r2,r16,64
    acd0:	28800226 	beq	r5,r2,acdc <_fclose_r+0x9c>
    acd4:	8809883a 	mov	r4,r17
    acd8:	0006bf80 	call	6bf8 <_free_r>
    acdc:	80000c15 	stw	zero,48(r16)
    ace0:	81401117 	ldw	r5,68(r16)
    ace4:	28000326 	beq	r5,zero,acf4 <_fclose_r+0xb4>
    ace8:	8809883a 	mov	r4,r17
    acec:	0006bf80 	call	6bf8 <_free_r>
    acf0:	80001115 	stw	zero,68(r16)
    acf4:	0006a940 	call	6a94 <__sfp_lock_acquire>
    acf8:	8000030d 	sth	zero,12(r16)
    acfc:	0006a980 	call	6a98 <__sfp_lock_release>
    ad00:	9005883a 	mov	r2,r18
    ad04:	003fdc06 	br	ac78 <__alt_data_end+0xff00ac78>
    ad08:	0006a840 	call	6a84 <__sinit>
    ad0c:	003fd706 	br	ac6c <__alt_data_end+0xff00ac6c>
    ad10:	04bfffc4 	movi	r18,-1
    ad14:	003fe806 	br	acb8 <__alt_data_end+0xff00acb8>
    ad18:	81400417 	ldw	r5,16(r16)
    ad1c:	8809883a 	mov	r4,r17
    ad20:	0006bf80 	call	6bf8 <_free_r>
    ad24:	003fe706 	br	acc4 <__alt_data_end+0xff00acc4>
    ad28:	0005883a 	mov	r2,zero
    ad2c:	f800283a 	ret

0000ad30 <fclose>:
    ad30:	00800074 	movhi	r2,1
    ad34:	10892f04 	addi	r2,r2,9404
    ad38:	200b883a 	mov	r5,r4
    ad3c:	11000017 	ldw	r4,0(r2)
    ad40:	000ac401 	jmpi	ac40 <_fclose_r>

0000ad44 <__fputwc>:
    ad44:	defff804 	addi	sp,sp,-32
    ad48:	dcc00415 	stw	r19,16(sp)
    ad4c:	dc800315 	stw	r18,12(sp)
    ad50:	dc000115 	stw	r16,4(sp)
    ad54:	dfc00715 	stw	ra,28(sp)
    ad58:	dd400615 	stw	r21,24(sp)
    ad5c:	dd000515 	stw	r20,20(sp)
    ad60:	dc400215 	stw	r17,8(sp)
    ad64:	2027883a 	mov	r19,r4
    ad68:	2825883a 	mov	r18,r5
    ad6c:	3021883a 	mov	r16,r6
    ad70:	00075d40 	call	75d4 <__locale_mb_cur_max>
    ad74:	00c00044 	movi	r3,1
    ad78:	10c03e26 	beq	r2,r3,ae74 <__fputwc+0x130>
    ad7c:	81c01704 	addi	r7,r16,92
    ad80:	900d883a 	mov	r6,r18
    ad84:	d80b883a 	mov	r5,sp
    ad88:	9809883a 	mov	r4,r19
    ad8c:	000b2140 	call	b214 <_wcrtomb_r>
    ad90:	1029883a 	mov	r20,r2
    ad94:	00bfffc4 	movi	r2,-1
    ad98:	a0802026 	beq	r20,r2,ae1c <__fputwc+0xd8>
    ad9c:	d9400003 	ldbu	r5,0(sp)
    ada0:	a0001c26 	beq	r20,zero,ae14 <__fputwc+0xd0>
    ada4:	0023883a 	mov	r17,zero
    ada8:	05400284 	movi	r21,10
    adac:	00000906 	br	add4 <__fputwc+0x90>
    adb0:	80800017 	ldw	r2,0(r16)
    adb4:	11400005 	stb	r5,0(r2)
    adb8:	80c00017 	ldw	r3,0(r16)
    adbc:	18c00044 	addi	r3,r3,1
    adc0:	80c00015 	stw	r3,0(r16)
    adc4:	8c400044 	addi	r17,r17,1
    adc8:	dc45883a 	add	r2,sp,r17
    adcc:	8d00112e 	bgeu	r17,r20,ae14 <__fputwc+0xd0>
    add0:	11400003 	ldbu	r5,0(r2)
    add4:	80c00217 	ldw	r3,8(r16)
    add8:	18ffffc4 	addi	r3,r3,-1
    addc:	80c00215 	stw	r3,8(r16)
    ade0:	183ff30e 	bge	r3,zero,adb0 <__alt_data_end+0xff00adb0>
    ade4:	80800617 	ldw	r2,24(r16)
    ade8:	18801916 	blt	r3,r2,ae50 <__fputwc+0x10c>
    adec:	80800017 	ldw	r2,0(r16)
    adf0:	11400005 	stb	r5,0(r2)
    adf4:	80800017 	ldw	r2,0(r16)
    adf8:	10c00003 	ldbu	r3,0(r2)
    adfc:	10800044 	addi	r2,r2,1
    ae00:	1d402326 	beq	r3,r21,ae90 <__fputwc+0x14c>
    ae04:	80800015 	stw	r2,0(r16)
    ae08:	8c400044 	addi	r17,r17,1
    ae0c:	dc45883a 	add	r2,sp,r17
    ae10:	8d3fef36 	bltu	r17,r20,add0 <__alt_data_end+0xff00add0>
    ae14:	9005883a 	mov	r2,r18
    ae18:	00000406 	br	ae2c <__fputwc+0xe8>
    ae1c:	80c0030b 	ldhu	r3,12(r16)
    ae20:	a005883a 	mov	r2,r20
    ae24:	18c01014 	ori	r3,r3,64
    ae28:	80c0030d 	sth	r3,12(r16)
    ae2c:	dfc00717 	ldw	ra,28(sp)
    ae30:	dd400617 	ldw	r21,24(sp)
    ae34:	dd000517 	ldw	r20,20(sp)
    ae38:	dcc00417 	ldw	r19,16(sp)
    ae3c:	dc800317 	ldw	r18,12(sp)
    ae40:	dc400217 	ldw	r17,8(sp)
    ae44:	dc000117 	ldw	r16,4(sp)
    ae48:	dec00804 	addi	sp,sp,32
    ae4c:	f800283a 	ret
    ae50:	800d883a 	mov	r6,r16
    ae54:	29403fcc 	andi	r5,r5,255
    ae58:	9809883a 	mov	r4,r19
    ae5c:	000b0bc0 	call	b0bc <__swbuf_r>
    ae60:	10bfffe0 	cmpeqi	r2,r2,-1
    ae64:	10803fcc 	andi	r2,r2,255
    ae68:	103fd626 	beq	r2,zero,adc4 <__alt_data_end+0xff00adc4>
    ae6c:	00bfffc4 	movi	r2,-1
    ae70:	003fee06 	br	ae2c <__alt_data_end+0xff00ae2c>
    ae74:	90ffffc4 	addi	r3,r18,-1
    ae78:	01003f84 	movi	r4,254
    ae7c:	20ffbf36 	bltu	r4,r3,ad7c <__alt_data_end+0xff00ad7c>
    ae80:	900b883a 	mov	r5,r18
    ae84:	dc800005 	stb	r18,0(sp)
    ae88:	1029883a 	mov	r20,r2
    ae8c:	003fc506 	br	ada4 <__alt_data_end+0xff00ada4>
    ae90:	800d883a 	mov	r6,r16
    ae94:	a80b883a 	mov	r5,r21
    ae98:	9809883a 	mov	r4,r19
    ae9c:	000b0bc0 	call	b0bc <__swbuf_r>
    aea0:	10bfffe0 	cmpeqi	r2,r2,-1
    aea4:	003fef06 	br	ae64 <__alt_data_end+0xff00ae64>

0000aea8 <_fputwc_r>:
    aea8:	3080030b 	ldhu	r2,12(r6)
    aeac:	10c8000c 	andi	r3,r2,8192
    aeb0:	1800051e 	bne	r3,zero,aec8 <_fputwc_r+0x20>
    aeb4:	30c01917 	ldw	r3,100(r6)
    aeb8:	10880014 	ori	r2,r2,8192
    aebc:	3080030d 	sth	r2,12(r6)
    aec0:	18880014 	ori	r2,r3,8192
    aec4:	30801915 	stw	r2,100(r6)
    aec8:	000ad441 	jmpi	ad44 <__fputwc>

0000aecc <fputwc>:
    aecc:	00800074 	movhi	r2,1
    aed0:	defffc04 	addi	sp,sp,-16
    aed4:	10892f04 	addi	r2,r2,9404
    aed8:	dc000115 	stw	r16,4(sp)
    aedc:	14000017 	ldw	r16,0(r2)
    aee0:	dc400215 	stw	r17,8(sp)
    aee4:	dfc00315 	stw	ra,12(sp)
    aee8:	2023883a 	mov	r17,r4
    aeec:	80000226 	beq	r16,zero,aef8 <fputwc+0x2c>
    aef0:	80800e17 	ldw	r2,56(r16)
    aef4:	10001026 	beq	r2,zero,af38 <fputwc+0x6c>
    aef8:	2880030b 	ldhu	r2,12(r5)
    aefc:	10c8000c 	andi	r3,r2,8192
    af00:	1800051e 	bne	r3,zero,af18 <fputwc+0x4c>
    af04:	28c01917 	ldw	r3,100(r5)
    af08:	10880014 	ori	r2,r2,8192
    af0c:	2880030d 	sth	r2,12(r5)
    af10:	18880014 	ori	r2,r3,8192
    af14:	28801915 	stw	r2,100(r5)
    af18:	280d883a 	mov	r6,r5
    af1c:	8009883a 	mov	r4,r16
    af20:	880b883a 	mov	r5,r17
    af24:	dfc00317 	ldw	ra,12(sp)
    af28:	dc400217 	ldw	r17,8(sp)
    af2c:	dc000117 	ldw	r16,4(sp)
    af30:	dec00404 	addi	sp,sp,16
    af34:	000ad441 	jmpi	ad44 <__fputwc>
    af38:	8009883a 	mov	r4,r16
    af3c:	d9400015 	stw	r5,0(sp)
    af40:	0006a840 	call	6a84 <__sinit>
    af44:	d9400017 	ldw	r5,0(sp)
    af48:	003feb06 	br	aef8 <__alt_data_end+0xff00aef8>

0000af4c <_fstat_r>:
    af4c:	defffd04 	addi	sp,sp,-12
    af50:	2805883a 	mov	r2,r5
    af54:	dc000015 	stw	r16,0(sp)
    af58:	04000074 	movhi	r16,1
    af5c:	dc400115 	stw	r17,4(sp)
    af60:	84100604 	addi	r16,r16,16408
    af64:	2023883a 	mov	r17,r4
    af68:	300b883a 	mov	r5,r6
    af6c:	1009883a 	mov	r4,r2
    af70:	dfc00215 	stw	ra,8(sp)
    af74:	80000015 	stw	zero,0(r16)
    af78:	000e78c0 	call	e78c <fstat>
    af7c:	00ffffc4 	movi	r3,-1
    af80:	10c00526 	beq	r2,r3,af98 <_fstat_r+0x4c>
    af84:	dfc00217 	ldw	ra,8(sp)
    af88:	dc400117 	ldw	r17,4(sp)
    af8c:	dc000017 	ldw	r16,0(sp)
    af90:	dec00304 	addi	sp,sp,12
    af94:	f800283a 	ret
    af98:	80c00017 	ldw	r3,0(r16)
    af9c:	183ff926 	beq	r3,zero,af84 <__alt_data_end+0xff00af84>
    afa0:	88c00015 	stw	r3,0(r17)
    afa4:	003ff706 	br	af84 <__alt_data_end+0xff00af84>

0000afa8 <_isatty_r>:
    afa8:	defffd04 	addi	sp,sp,-12
    afac:	dc000015 	stw	r16,0(sp)
    afb0:	04000074 	movhi	r16,1
    afb4:	dc400115 	stw	r17,4(sp)
    afb8:	84100604 	addi	r16,r16,16408
    afbc:	2023883a 	mov	r17,r4
    afc0:	2809883a 	mov	r4,r5
    afc4:	dfc00215 	stw	ra,8(sp)
    afc8:	80000015 	stw	zero,0(r16)
    afcc:	000e8040 	call	e804 <isatty>
    afd0:	00ffffc4 	movi	r3,-1
    afd4:	10c00526 	beq	r2,r3,afec <_isatty_r+0x44>
    afd8:	dfc00217 	ldw	ra,8(sp)
    afdc:	dc400117 	ldw	r17,4(sp)
    afe0:	dc000017 	ldw	r16,0(sp)
    afe4:	dec00304 	addi	sp,sp,12
    afe8:	f800283a 	ret
    afec:	80c00017 	ldw	r3,0(r16)
    aff0:	183ff926 	beq	r3,zero,afd8 <__alt_data_end+0xff00afd8>
    aff4:	88c00015 	stw	r3,0(r17)
    aff8:	003ff706 	br	afd8 <__alt_data_end+0xff00afd8>

0000affc <_lseek_r>:
    affc:	defffd04 	addi	sp,sp,-12
    b000:	2805883a 	mov	r2,r5
    b004:	dc000015 	stw	r16,0(sp)
    b008:	04000074 	movhi	r16,1
    b00c:	dc400115 	stw	r17,4(sp)
    b010:	300b883a 	mov	r5,r6
    b014:	84100604 	addi	r16,r16,16408
    b018:	2023883a 	mov	r17,r4
    b01c:	380d883a 	mov	r6,r7
    b020:	1009883a 	mov	r4,r2
    b024:	dfc00215 	stw	ra,8(sp)
    b028:	80000015 	stw	zero,0(r16)
    b02c:	000e9540 	call	e954 <lseek>
    b030:	00ffffc4 	movi	r3,-1
    b034:	10c00526 	beq	r2,r3,b04c <_lseek_r+0x50>
    b038:	dfc00217 	ldw	ra,8(sp)
    b03c:	dc400117 	ldw	r17,4(sp)
    b040:	dc000017 	ldw	r16,0(sp)
    b044:	dec00304 	addi	sp,sp,12
    b048:	f800283a 	ret
    b04c:	80c00017 	ldw	r3,0(r16)
    b050:	183ff926 	beq	r3,zero,b038 <__alt_data_end+0xff00b038>
    b054:	88c00015 	stw	r3,0(r17)
    b058:	003ff706 	br	b038 <__alt_data_end+0xff00b038>

0000b05c <_read_r>:
    b05c:	defffd04 	addi	sp,sp,-12
    b060:	2805883a 	mov	r2,r5
    b064:	dc000015 	stw	r16,0(sp)
    b068:	04000074 	movhi	r16,1
    b06c:	dc400115 	stw	r17,4(sp)
    b070:	300b883a 	mov	r5,r6
    b074:	84100604 	addi	r16,r16,16408
    b078:	2023883a 	mov	r17,r4
    b07c:	380d883a 	mov	r6,r7
    b080:	1009883a 	mov	r4,r2
    b084:	dfc00215 	stw	ra,8(sp)
    b088:	80000015 	stw	zero,0(r16)
    b08c:	000ea380 	call	ea38 <read>
    b090:	00ffffc4 	movi	r3,-1
    b094:	10c00526 	beq	r2,r3,b0ac <_read_r+0x50>
    b098:	dfc00217 	ldw	ra,8(sp)
    b09c:	dc400117 	ldw	r17,4(sp)
    b0a0:	dc000017 	ldw	r16,0(sp)
    b0a4:	dec00304 	addi	sp,sp,12
    b0a8:	f800283a 	ret
    b0ac:	80c00017 	ldw	r3,0(r16)
    b0b0:	183ff926 	beq	r3,zero,b098 <__alt_data_end+0xff00b098>
    b0b4:	88c00015 	stw	r3,0(r17)
    b0b8:	003ff706 	br	b098 <__alt_data_end+0xff00b098>

0000b0bc <__swbuf_r>:
    b0bc:	defffb04 	addi	sp,sp,-20
    b0c0:	dcc00315 	stw	r19,12(sp)
    b0c4:	dc800215 	stw	r18,8(sp)
    b0c8:	dc000015 	stw	r16,0(sp)
    b0cc:	dfc00415 	stw	ra,16(sp)
    b0d0:	dc400115 	stw	r17,4(sp)
    b0d4:	2025883a 	mov	r18,r4
    b0d8:	2827883a 	mov	r19,r5
    b0dc:	3021883a 	mov	r16,r6
    b0e0:	20000226 	beq	r4,zero,b0ec <__swbuf_r+0x30>
    b0e4:	20800e17 	ldw	r2,56(r4)
    b0e8:	10004226 	beq	r2,zero,b1f4 <__swbuf_r+0x138>
    b0ec:	80800617 	ldw	r2,24(r16)
    b0f0:	8100030b 	ldhu	r4,12(r16)
    b0f4:	80800215 	stw	r2,8(r16)
    b0f8:	2080020c 	andi	r2,r4,8
    b0fc:	10003626 	beq	r2,zero,b1d8 <__swbuf_r+0x11c>
    b100:	80c00417 	ldw	r3,16(r16)
    b104:	18003426 	beq	r3,zero,b1d8 <__swbuf_r+0x11c>
    b108:	2088000c 	andi	r2,r4,8192
    b10c:	9c403fcc 	andi	r17,r19,255
    b110:	10001a26 	beq	r2,zero,b17c <__swbuf_r+0xc0>
    b114:	80800017 	ldw	r2,0(r16)
    b118:	81000517 	ldw	r4,20(r16)
    b11c:	10c7c83a 	sub	r3,r2,r3
    b120:	1900200e 	bge	r3,r4,b1a4 <__swbuf_r+0xe8>
    b124:	18c00044 	addi	r3,r3,1
    b128:	81000217 	ldw	r4,8(r16)
    b12c:	11400044 	addi	r5,r2,1
    b130:	81400015 	stw	r5,0(r16)
    b134:	213fffc4 	addi	r4,r4,-1
    b138:	81000215 	stw	r4,8(r16)
    b13c:	14c00005 	stb	r19,0(r2)
    b140:	80800517 	ldw	r2,20(r16)
    b144:	10c01e26 	beq	r2,r3,b1c0 <__swbuf_r+0x104>
    b148:	8080030b 	ldhu	r2,12(r16)
    b14c:	1080004c 	andi	r2,r2,1
    b150:	10000226 	beq	r2,zero,b15c <__swbuf_r+0xa0>
    b154:	00800284 	movi	r2,10
    b158:	88801926 	beq	r17,r2,b1c0 <__swbuf_r+0x104>
    b15c:	8805883a 	mov	r2,r17
    b160:	dfc00417 	ldw	ra,16(sp)
    b164:	dcc00317 	ldw	r19,12(sp)
    b168:	dc800217 	ldw	r18,8(sp)
    b16c:	dc400117 	ldw	r17,4(sp)
    b170:	dc000017 	ldw	r16,0(sp)
    b174:	dec00504 	addi	sp,sp,20
    b178:	f800283a 	ret
    b17c:	81401917 	ldw	r5,100(r16)
    b180:	00b7ffc4 	movi	r2,-8193
    b184:	21080014 	ori	r4,r4,8192
    b188:	2884703a 	and	r2,r5,r2
    b18c:	80801915 	stw	r2,100(r16)
    b190:	80800017 	ldw	r2,0(r16)
    b194:	8100030d 	sth	r4,12(r16)
    b198:	81000517 	ldw	r4,20(r16)
    b19c:	10c7c83a 	sub	r3,r2,r3
    b1a0:	193fe016 	blt	r3,r4,b124 <__alt_data_end+0xff00b124>
    b1a4:	800b883a 	mov	r5,r16
    b1a8:	9009883a 	mov	r4,r18
    b1ac:	00066a80 	call	66a8 <_fflush_r>
    b1b0:	1000071e 	bne	r2,zero,b1d0 <__swbuf_r+0x114>
    b1b4:	80800017 	ldw	r2,0(r16)
    b1b8:	00c00044 	movi	r3,1
    b1bc:	003fda06 	br	b128 <__alt_data_end+0xff00b128>
    b1c0:	800b883a 	mov	r5,r16
    b1c4:	9009883a 	mov	r4,r18
    b1c8:	00066a80 	call	66a8 <_fflush_r>
    b1cc:	103fe326 	beq	r2,zero,b15c <__alt_data_end+0xff00b15c>
    b1d0:	00bfffc4 	movi	r2,-1
    b1d4:	003fe206 	br	b160 <__alt_data_end+0xff00b160>
    b1d8:	800b883a 	mov	r5,r16
    b1dc:	9009883a 	mov	r4,r18
    b1e0:	0004ab00 	call	4ab0 <__swsetup_r>
    b1e4:	103ffa1e 	bne	r2,zero,b1d0 <__alt_data_end+0xff00b1d0>
    b1e8:	8100030b 	ldhu	r4,12(r16)
    b1ec:	80c00417 	ldw	r3,16(r16)
    b1f0:	003fc506 	br	b108 <__alt_data_end+0xff00b108>
    b1f4:	0006a840 	call	6a84 <__sinit>
    b1f8:	003fbc06 	br	b0ec <__alt_data_end+0xff00b0ec>

0000b1fc <__swbuf>:
    b1fc:	00800074 	movhi	r2,1
    b200:	10892f04 	addi	r2,r2,9404
    b204:	280d883a 	mov	r6,r5
    b208:	200b883a 	mov	r5,r4
    b20c:	11000017 	ldw	r4,0(r2)
    b210:	000b0bc1 	jmpi	b0bc <__swbuf_r>

0000b214 <_wcrtomb_r>:
    b214:	defff604 	addi	sp,sp,-40
    b218:	00800074 	movhi	r2,1
    b21c:	dc800815 	stw	r18,32(sp)
    b220:	dc400715 	stw	r17,28(sp)
    b224:	dc000615 	stw	r16,24(sp)
    b228:	10893104 	addi	r2,r2,9412
    b22c:	dfc00915 	stw	ra,36(sp)
    b230:	2021883a 	mov	r16,r4
    b234:	3823883a 	mov	r17,r7
    b238:	14800017 	ldw	r18,0(r2)
    b23c:	28001426 	beq	r5,zero,b290 <_wcrtomb_r+0x7c>
    b240:	d9400415 	stw	r5,16(sp)
    b244:	d9800515 	stw	r6,20(sp)
    b248:	00075c80 	call	75c8 <__locale_charset>
    b24c:	d9800517 	ldw	r6,20(sp)
    b250:	d9400417 	ldw	r5,16(sp)
    b254:	100f883a 	mov	r7,r2
    b258:	dc400015 	stw	r17,0(sp)
    b25c:	8009883a 	mov	r4,r16
    b260:	903ee83a 	callr	r18
    b264:	00ffffc4 	movi	r3,-1
    b268:	10c0031e 	bne	r2,r3,b278 <_wcrtomb_r+0x64>
    b26c:	88000015 	stw	zero,0(r17)
    b270:	00c02284 	movi	r3,138
    b274:	80c00015 	stw	r3,0(r16)
    b278:	dfc00917 	ldw	ra,36(sp)
    b27c:	dc800817 	ldw	r18,32(sp)
    b280:	dc400717 	ldw	r17,28(sp)
    b284:	dc000617 	ldw	r16,24(sp)
    b288:	dec00a04 	addi	sp,sp,40
    b28c:	f800283a 	ret
    b290:	00075c80 	call	75c8 <__locale_charset>
    b294:	100f883a 	mov	r7,r2
    b298:	dc400015 	stw	r17,0(sp)
    b29c:	000d883a 	mov	r6,zero
    b2a0:	d9400104 	addi	r5,sp,4
    b2a4:	8009883a 	mov	r4,r16
    b2a8:	903ee83a 	callr	r18
    b2ac:	003fed06 	br	b264 <__alt_data_end+0xff00b264>

0000b2b0 <wcrtomb>:
    b2b0:	defff604 	addi	sp,sp,-40
    b2b4:	00800074 	movhi	r2,1
    b2b8:	dc800615 	stw	r18,24(sp)
    b2bc:	dc400515 	stw	r17,20(sp)
    b2c0:	10892f04 	addi	r2,r2,9404
    b2c4:	dfc00915 	stw	ra,36(sp)
    b2c8:	dd000815 	stw	r20,32(sp)
    b2cc:	dcc00715 	stw	r19,28(sp)
    b2d0:	dc000415 	stw	r16,16(sp)
    b2d4:	3025883a 	mov	r18,r6
    b2d8:	14400017 	ldw	r17,0(r2)
    b2dc:	20001926 	beq	r4,zero,b344 <wcrtomb+0x94>
    b2e0:	00800074 	movhi	r2,1
    b2e4:	10893104 	addi	r2,r2,9412
    b2e8:	15000017 	ldw	r20,0(r2)
    b2ec:	2021883a 	mov	r16,r4
    b2f0:	2827883a 	mov	r19,r5
    b2f4:	00075c80 	call	75c8 <__locale_charset>
    b2f8:	100f883a 	mov	r7,r2
    b2fc:	dc800015 	stw	r18,0(sp)
    b300:	980d883a 	mov	r6,r19
    b304:	800b883a 	mov	r5,r16
    b308:	8809883a 	mov	r4,r17
    b30c:	a03ee83a 	callr	r20
    b310:	00ffffc4 	movi	r3,-1
    b314:	10c0031e 	bne	r2,r3,b324 <wcrtomb+0x74>
    b318:	90000015 	stw	zero,0(r18)
    b31c:	00c02284 	movi	r3,138
    b320:	88c00015 	stw	r3,0(r17)
    b324:	dfc00917 	ldw	ra,36(sp)
    b328:	dd000817 	ldw	r20,32(sp)
    b32c:	dcc00717 	ldw	r19,28(sp)
    b330:	dc800617 	ldw	r18,24(sp)
    b334:	dc400517 	ldw	r17,20(sp)
    b338:	dc000417 	ldw	r16,16(sp)
    b33c:	dec00a04 	addi	sp,sp,40
    b340:	f800283a 	ret
    b344:	00800074 	movhi	r2,1
    b348:	10893104 	addi	r2,r2,9412
    b34c:	14000017 	ldw	r16,0(r2)
    b350:	00075c80 	call	75c8 <__locale_charset>
    b354:	100f883a 	mov	r7,r2
    b358:	dc800015 	stw	r18,0(sp)
    b35c:	000d883a 	mov	r6,zero
    b360:	d9400104 	addi	r5,sp,4
    b364:	8809883a 	mov	r4,r17
    b368:	803ee83a 	callr	r16
    b36c:	003fe806 	br	b310 <__alt_data_end+0xff00b310>

0000b370 <__ascii_wctomb>:
    b370:	28000526 	beq	r5,zero,b388 <__ascii_wctomb+0x18>
    b374:	00803fc4 	movi	r2,255
    b378:	11800536 	bltu	r2,r6,b390 <__ascii_wctomb+0x20>
    b37c:	29800005 	stb	r6,0(r5)
    b380:	00800044 	movi	r2,1
    b384:	f800283a 	ret
    b388:	0005883a 	mov	r2,zero
    b38c:	f800283a 	ret
    b390:	00802284 	movi	r2,138
    b394:	20800015 	stw	r2,0(r4)
    b398:	00bfffc4 	movi	r2,-1
    b39c:	f800283a 	ret

0000b3a0 <_wctomb_r>:
    b3a0:	00800074 	movhi	r2,1
    b3a4:	defff904 	addi	sp,sp,-28
    b3a8:	10893104 	addi	r2,r2,9412
    b3ac:	dfc00615 	stw	ra,24(sp)
    b3b0:	dc400515 	stw	r17,20(sp)
    b3b4:	dc000415 	stw	r16,16(sp)
    b3b8:	3823883a 	mov	r17,r7
    b3bc:	14000017 	ldw	r16,0(r2)
    b3c0:	d9000115 	stw	r4,4(sp)
    b3c4:	d9400215 	stw	r5,8(sp)
    b3c8:	d9800315 	stw	r6,12(sp)
    b3cc:	00075c80 	call	75c8 <__locale_charset>
    b3d0:	d9800317 	ldw	r6,12(sp)
    b3d4:	d9400217 	ldw	r5,8(sp)
    b3d8:	d9000117 	ldw	r4,4(sp)
    b3dc:	100f883a 	mov	r7,r2
    b3e0:	dc400015 	stw	r17,0(sp)
    b3e4:	803ee83a 	callr	r16
    b3e8:	dfc00617 	ldw	ra,24(sp)
    b3ec:	dc400517 	ldw	r17,20(sp)
    b3f0:	dc000417 	ldw	r16,16(sp)
    b3f4:	dec00704 	addi	sp,sp,28
    b3f8:	f800283a 	ret

0000b3fc <__udivdi3>:
    b3fc:	defff504 	addi	sp,sp,-44
    b400:	dcc00415 	stw	r19,16(sp)
    b404:	dc000115 	stw	r16,4(sp)
    b408:	dfc00a15 	stw	ra,40(sp)
    b40c:	df000915 	stw	fp,36(sp)
    b410:	ddc00815 	stw	r23,32(sp)
    b414:	dd800715 	stw	r22,28(sp)
    b418:	dd400615 	stw	r21,24(sp)
    b41c:	dd000515 	stw	r20,20(sp)
    b420:	dc800315 	stw	r18,12(sp)
    b424:	dc400215 	stw	r17,8(sp)
    b428:	2027883a 	mov	r19,r4
    b42c:	2821883a 	mov	r16,r5
    b430:	3800411e 	bne	r7,zero,b538 <__udivdi3+0x13c>
    b434:	3023883a 	mov	r17,r6
    b438:	2025883a 	mov	r18,r4
    b43c:	2980522e 	bgeu	r5,r6,b588 <__udivdi3+0x18c>
    b440:	00bfffd4 	movui	r2,65535
    b444:	282d883a 	mov	r22,r5
    b448:	1180a836 	bltu	r2,r6,b6ec <__udivdi3+0x2f0>
    b44c:	00803fc4 	movi	r2,255
    b450:	1185803a 	cmpltu	r2,r2,r6
    b454:	100490fa 	slli	r2,r2,3
    b458:	3086d83a 	srl	r3,r6,r2
    b45c:	01000074 	movhi	r4,1
    b460:	21023804 	addi	r4,r4,2272
    b464:	20c7883a 	add	r3,r4,r3
    b468:	18c00003 	ldbu	r3,0(r3)
    b46c:	1885883a 	add	r2,r3,r2
    b470:	00c00804 	movi	r3,32
    b474:	1887c83a 	sub	r3,r3,r2
    b478:	18000526 	beq	r3,zero,b490 <__udivdi3+0x94>
    b47c:	80e0983a 	sll	r16,r16,r3
    b480:	9884d83a 	srl	r2,r19,r2
    b484:	30e2983a 	sll	r17,r6,r3
    b488:	98e4983a 	sll	r18,r19,r3
    b48c:	142cb03a 	or	r22,r2,r16
    b490:	882ad43a 	srli	r21,r17,16
    b494:	b009883a 	mov	r4,r22
    b498:	8d3fffcc 	andi	r20,r17,65535
    b49c:	a80b883a 	mov	r5,r21
    b4a0:	000c0080 	call	c008 <__umodsi3>
    b4a4:	b009883a 	mov	r4,r22
    b4a8:	a80b883a 	mov	r5,r21
    b4ac:	1027883a 	mov	r19,r2
    b4b0:	000bfa40 	call	bfa4 <__udivsi3>
    b4b4:	102d883a 	mov	r22,r2
    b4b8:	9826943a 	slli	r19,r19,16
    b4bc:	9004d43a 	srli	r2,r18,16
    b4c0:	a5a1383a 	mul	r16,r20,r22
    b4c4:	14c4b03a 	or	r2,r2,r19
    b4c8:	1400052e 	bgeu	r2,r16,b4e0 <__udivdi3+0xe4>
    b4cc:	1445883a 	add	r2,r2,r17
    b4d0:	b0ffffc4 	addi	r3,r22,-1
    b4d4:	14400136 	bltu	r2,r17,b4dc <__udivdi3+0xe0>
    b4d8:	14012336 	bltu	r2,r16,b968 <__udivdi3+0x56c>
    b4dc:	182d883a 	mov	r22,r3
    b4e0:	1421c83a 	sub	r16,r2,r16
    b4e4:	a80b883a 	mov	r5,r21
    b4e8:	8009883a 	mov	r4,r16
    b4ec:	000c0080 	call	c008 <__umodsi3>
    b4f0:	1027883a 	mov	r19,r2
    b4f4:	a80b883a 	mov	r5,r21
    b4f8:	8009883a 	mov	r4,r16
    b4fc:	000bfa40 	call	bfa4 <__udivsi3>
    b500:	9826943a 	slli	r19,r19,16
    b504:	a0a9383a 	mul	r20,r20,r2
    b508:	94bfffcc 	andi	r18,r18,65535
    b50c:	94e4b03a 	or	r18,r18,r19
    b510:	9500052e 	bgeu	r18,r20,b528 <__udivdi3+0x12c>
    b514:	8ca5883a 	add	r18,r17,r18
    b518:	10ffffc4 	addi	r3,r2,-1
    b51c:	9440f136 	bltu	r18,r17,b8e4 <__udivdi3+0x4e8>
    b520:	9500f02e 	bgeu	r18,r20,b8e4 <__udivdi3+0x4e8>
    b524:	10bfff84 	addi	r2,r2,-2
    b528:	b00c943a 	slli	r6,r22,16
    b52c:	0007883a 	mov	r3,zero
    b530:	3084b03a 	or	r2,r6,r2
    b534:	00005906 	br	b69c <__udivdi3+0x2a0>
    b538:	29c05636 	bltu	r5,r7,b694 <__udivdi3+0x298>
    b53c:	00bfffd4 	movui	r2,65535
    b540:	11c0622e 	bgeu	r2,r7,b6cc <__udivdi3+0x2d0>
    b544:	00804034 	movhi	r2,256
    b548:	10bfffc4 	addi	r2,r2,-1
    b54c:	11c0ee36 	bltu	r2,r7,b908 <__udivdi3+0x50c>
    b550:	00800404 	movi	r2,16
    b554:	3886d83a 	srl	r3,r7,r2
    b558:	01000074 	movhi	r4,1
    b55c:	21023804 	addi	r4,r4,2272
    b560:	20c7883a 	add	r3,r4,r3
    b564:	18c00003 	ldbu	r3,0(r3)
    b568:	05400804 	movi	r21,32
    b56c:	1885883a 	add	r2,r3,r2
    b570:	a8abc83a 	sub	r21,r21,r2
    b574:	a800621e 	bne	r21,zero,b700 <__udivdi3+0x304>
    b578:	3c00e936 	bltu	r7,r16,b920 <__udivdi3+0x524>
    b57c:	9985403a 	cmpgeu	r2,r19,r6
    b580:	0007883a 	mov	r3,zero
    b584:	00004506 	br	b69c <__udivdi3+0x2a0>
    b588:	3000041e 	bne	r6,zero,b59c <__udivdi3+0x1a0>
    b58c:	000b883a 	mov	r5,zero
    b590:	01000044 	movi	r4,1
    b594:	000bfa40 	call	bfa4 <__udivsi3>
    b598:	1023883a 	mov	r17,r2
    b59c:	00bfffd4 	movui	r2,65535
    b5a0:	14404e2e 	bgeu	r2,r17,b6dc <__udivdi3+0x2e0>
    b5a4:	00804034 	movhi	r2,256
    b5a8:	10bfffc4 	addi	r2,r2,-1
    b5ac:	1440d836 	bltu	r2,r17,b910 <__udivdi3+0x514>
    b5b0:	00800404 	movi	r2,16
    b5b4:	8886d83a 	srl	r3,r17,r2
    b5b8:	01000074 	movhi	r4,1
    b5bc:	21023804 	addi	r4,r4,2272
    b5c0:	20c7883a 	add	r3,r4,r3
    b5c4:	18c00003 	ldbu	r3,0(r3)
    b5c8:	1885883a 	add	r2,r3,r2
    b5cc:	00c00804 	movi	r3,32
    b5d0:	1887c83a 	sub	r3,r3,r2
    b5d4:	18008f1e 	bne	r3,zero,b814 <__udivdi3+0x418>
    b5d8:	882ad43a 	srli	r21,r17,16
    b5dc:	8461c83a 	sub	r16,r16,r17
    b5e0:	8d3fffcc 	andi	r20,r17,65535
    b5e4:	00c00044 	movi	r3,1
    b5e8:	8009883a 	mov	r4,r16
    b5ec:	a80b883a 	mov	r5,r21
    b5f0:	d8c00015 	stw	r3,0(sp)
    b5f4:	000c0080 	call	c008 <__umodsi3>
    b5f8:	8009883a 	mov	r4,r16
    b5fc:	a80b883a 	mov	r5,r21
    b600:	1027883a 	mov	r19,r2
    b604:	000bfa40 	call	bfa4 <__udivsi3>
    b608:	9826943a 	slli	r19,r19,16
    b60c:	9008d43a 	srli	r4,r18,16
    b610:	1521383a 	mul	r16,r2,r20
    b614:	102d883a 	mov	r22,r2
    b618:	24c8b03a 	or	r4,r4,r19
    b61c:	d8c00017 	ldw	r3,0(sp)
    b620:	2400052e 	bgeu	r4,r16,b638 <__udivdi3+0x23c>
    b624:	2449883a 	add	r4,r4,r17
    b628:	b0bfffc4 	addi	r2,r22,-1
    b62c:	24400136 	bltu	r4,r17,b634 <__udivdi3+0x238>
    b630:	2400ca36 	bltu	r4,r16,b95c <__udivdi3+0x560>
    b634:	102d883a 	mov	r22,r2
    b638:	2421c83a 	sub	r16,r4,r16
    b63c:	a80b883a 	mov	r5,r21
    b640:	8009883a 	mov	r4,r16
    b644:	d8c00015 	stw	r3,0(sp)
    b648:	000c0080 	call	c008 <__umodsi3>
    b64c:	1027883a 	mov	r19,r2
    b650:	a80b883a 	mov	r5,r21
    b654:	8009883a 	mov	r4,r16
    b658:	000bfa40 	call	bfa4 <__udivsi3>
    b65c:	9826943a 	slli	r19,r19,16
    b660:	1529383a 	mul	r20,r2,r20
    b664:	94bfffcc 	andi	r18,r18,65535
    b668:	94e4b03a 	or	r18,r18,r19
    b66c:	d8c00017 	ldw	r3,0(sp)
    b670:	9500052e 	bgeu	r18,r20,b688 <__udivdi3+0x28c>
    b674:	8ca5883a 	add	r18,r17,r18
    b678:	113fffc4 	addi	r4,r2,-1
    b67c:	94409736 	bltu	r18,r17,b8dc <__udivdi3+0x4e0>
    b680:	9500962e 	bgeu	r18,r20,b8dc <__udivdi3+0x4e0>
    b684:	10bfff84 	addi	r2,r2,-2
    b688:	b00c943a 	slli	r6,r22,16
    b68c:	3084b03a 	or	r2,r6,r2
    b690:	00000206 	br	b69c <__udivdi3+0x2a0>
    b694:	0007883a 	mov	r3,zero
    b698:	0005883a 	mov	r2,zero
    b69c:	dfc00a17 	ldw	ra,40(sp)
    b6a0:	df000917 	ldw	fp,36(sp)
    b6a4:	ddc00817 	ldw	r23,32(sp)
    b6a8:	dd800717 	ldw	r22,28(sp)
    b6ac:	dd400617 	ldw	r21,24(sp)
    b6b0:	dd000517 	ldw	r20,20(sp)
    b6b4:	dcc00417 	ldw	r19,16(sp)
    b6b8:	dc800317 	ldw	r18,12(sp)
    b6bc:	dc400217 	ldw	r17,8(sp)
    b6c0:	dc000117 	ldw	r16,4(sp)
    b6c4:	dec00b04 	addi	sp,sp,44
    b6c8:	f800283a 	ret
    b6cc:	00803fc4 	movi	r2,255
    b6d0:	11c5803a 	cmpltu	r2,r2,r7
    b6d4:	100490fa 	slli	r2,r2,3
    b6d8:	003f9e06 	br	b554 <__alt_data_end+0xff00b554>
    b6dc:	00803fc4 	movi	r2,255
    b6e0:	1445803a 	cmpltu	r2,r2,r17
    b6e4:	100490fa 	slli	r2,r2,3
    b6e8:	003fb206 	br	b5b4 <__alt_data_end+0xff00b5b4>
    b6ec:	00804034 	movhi	r2,256
    b6f0:	10bfffc4 	addi	r2,r2,-1
    b6f4:	11808836 	bltu	r2,r6,b918 <__udivdi3+0x51c>
    b6f8:	00800404 	movi	r2,16
    b6fc:	003f5606 	br	b458 <__alt_data_end+0xff00b458>
    b700:	30aed83a 	srl	r23,r6,r2
    b704:	3d4e983a 	sll	r7,r7,r21
    b708:	80acd83a 	srl	r22,r16,r2
    b70c:	9884d83a 	srl	r2,r19,r2
    b710:	3deeb03a 	or	r23,r7,r23
    b714:	b824d43a 	srli	r18,r23,16
    b718:	8560983a 	sll	r16,r16,r21
    b71c:	b009883a 	mov	r4,r22
    b720:	900b883a 	mov	r5,r18
    b724:	3568983a 	sll	r20,r6,r21
    b728:	1420b03a 	or	r16,r2,r16
    b72c:	000c0080 	call	c008 <__umodsi3>
    b730:	b009883a 	mov	r4,r22
    b734:	900b883a 	mov	r5,r18
    b738:	1023883a 	mov	r17,r2
    b73c:	000bfa40 	call	bfa4 <__udivsi3>
    b740:	8808943a 	slli	r4,r17,16
    b744:	bf3fffcc 	andi	fp,r23,65535
    b748:	8006d43a 	srli	r3,r16,16
    b74c:	e0a3383a 	mul	r17,fp,r2
    b750:	100d883a 	mov	r6,r2
    b754:	1906b03a 	or	r3,r3,r4
    b758:	1c40042e 	bgeu	r3,r17,b76c <__udivdi3+0x370>
    b75c:	1dc7883a 	add	r3,r3,r23
    b760:	10bfffc4 	addi	r2,r2,-1
    b764:	1dc0752e 	bgeu	r3,r23,b93c <__udivdi3+0x540>
    b768:	100d883a 	mov	r6,r2
    b76c:	1c63c83a 	sub	r17,r3,r17
    b770:	900b883a 	mov	r5,r18
    b774:	8809883a 	mov	r4,r17
    b778:	d9800015 	stw	r6,0(sp)
    b77c:	000c0080 	call	c008 <__umodsi3>
    b780:	102d883a 	mov	r22,r2
    b784:	8809883a 	mov	r4,r17
    b788:	900b883a 	mov	r5,r18
    b78c:	000bfa40 	call	bfa4 <__udivsi3>
    b790:	b02c943a 	slli	r22,r22,16
    b794:	e089383a 	mul	r4,fp,r2
    b798:	843fffcc 	andi	r16,r16,65535
    b79c:	85a0b03a 	or	r16,r16,r22
    b7a0:	d9800017 	ldw	r6,0(sp)
    b7a4:	8100042e 	bgeu	r16,r4,b7b8 <__udivdi3+0x3bc>
    b7a8:	85e1883a 	add	r16,r16,r23
    b7ac:	10ffffc4 	addi	r3,r2,-1
    b7b0:	85c05e2e 	bgeu	r16,r23,b92c <__udivdi3+0x530>
    b7b4:	1805883a 	mov	r2,r3
    b7b8:	300c943a 	slli	r6,r6,16
    b7bc:	a17fffcc 	andi	r5,r20,65535
    b7c0:	a028d43a 	srli	r20,r20,16
    b7c4:	3084b03a 	or	r2,r6,r2
    b7c8:	10ffffcc 	andi	r3,r2,65535
    b7cc:	100cd43a 	srli	r6,r2,16
    b7d0:	194f383a 	mul	r7,r3,r5
    b7d4:	1d07383a 	mul	r3,r3,r20
    b7d8:	314b383a 	mul	r5,r6,r5
    b7dc:	3810d43a 	srli	r8,r7,16
    b7e0:	8121c83a 	sub	r16,r16,r4
    b7e4:	1947883a 	add	r3,r3,r5
    b7e8:	40c7883a 	add	r3,r8,r3
    b7ec:	350d383a 	mul	r6,r6,r20
    b7f0:	1940022e 	bgeu	r3,r5,b7fc <__udivdi3+0x400>
    b7f4:	01000074 	movhi	r4,1
    b7f8:	310d883a 	add	r6,r6,r4
    b7fc:	1828d43a 	srli	r20,r3,16
    b800:	a18d883a 	add	r6,r20,r6
    b804:	81803e36 	bltu	r16,r6,b900 <__udivdi3+0x504>
    b808:	81803826 	beq	r16,r6,b8ec <__udivdi3+0x4f0>
    b80c:	0007883a 	mov	r3,zero
    b810:	003fa206 	br	b69c <__alt_data_end+0xff00b69c>
    b814:	88e2983a 	sll	r17,r17,r3
    b818:	80a8d83a 	srl	r20,r16,r2
    b81c:	80e0983a 	sll	r16,r16,r3
    b820:	882ad43a 	srli	r21,r17,16
    b824:	9884d83a 	srl	r2,r19,r2
    b828:	a009883a 	mov	r4,r20
    b82c:	a80b883a 	mov	r5,r21
    b830:	142eb03a 	or	r23,r2,r16
    b834:	98e4983a 	sll	r18,r19,r3
    b838:	000c0080 	call	c008 <__umodsi3>
    b83c:	a009883a 	mov	r4,r20
    b840:	a80b883a 	mov	r5,r21
    b844:	1021883a 	mov	r16,r2
    b848:	000bfa40 	call	bfa4 <__udivsi3>
    b84c:	1039883a 	mov	fp,r2
    b850:	8d3fffcc 	andi	r20,r17,65535
    b854:	8020943a 	slli	r16,r16,16
    b858:	b804d43a 	srli	r2,r23,16
    b85c:	a72d383a 	mul	r22,r20,fp
    b860:	1404b03a 	or	r2,r2,r16
    b864:	1580062e 	bgeu	r2,r22,b880 <__udivdi3+0x484>
    b868:	1445883a 	add	r2,r2,r17
    b86c:	e0ffffc4 	addi	r3,fp,-1
    b870:	14403836 	bltu	r2,r17,b954 <__udivdi3+0x558>
    b874:	1580372e 	bgeu	r2,r22,b954 <__udivdi3+0x558>
    b878:	e73fff84 	addi	fp,fp,-2
    b87c:	1445883a 	add	r2,r2,r17
    b880:	15adc83a 	sub	r22,r2,r22
    b884:	a80b883a 	mov	r5,r21
    b888:	b009883a 	mov	r4,r22
    b88c:	000c0080 	call	c008 <__umodsi3>
    b890:	1027883a 	mov	r19,r2
    b894:	b009883a 	mov	r4,r22
    b898:	a80b883a 	mov	r5,r21
    b89c:	000bfa40 	call	bfa4 <__udivsi3>
    b8a0:	9826943a 	slli	r19,r19,16
    b8a4:	a0a1383a 	mul	r16,r20,r2
    b8a8:	b93fffcc 	andi	r4,r23,65535
    b8ac:	24c8b03a 	or	r4,r4,r19
    b8b0:	2400062e 	bgeu	r4,r16,b8cc <__udivdi3+0x4d0>
    b8b4:	2449883a 	add	r4,r4,r17
    b8b8:	10ffffc4 	addi	r3,r2,-1
    b8bc:	24402336 	bltu	r4,r17,b94c <__udivdi3+0x550>
    b8c0:	2400222e 	bgeu	r4,r16,b94c <__udivdi3+0x550>
    b8c4:	10bfff84 	addi	r2,r2,-2
    b8c8:	2449883a 	add	r4,r4,r17
    b8cc:	e038943a 	slli	fp,fp,16
    b8d0:	2421c83a 	sub	r16,r4,r16
    b8d4:	e086b03a 	or	r3,fp,r2
    b8d8:	003f4306 	br	b5e8 <__alt_data_end+0xff00b5e8>
    b8dc:	2005883a 	mov	r2,r4
    b8e0:	003f6906 	br	b688 <__alt_data_end+0xff00b688>
    b8e4:	1805883a 	mov	r2,r3
    b8e8:	003f0f06 	br	b528 <__alt_data_end+0xff00b528>
    b8ec:	1806943a 	slli	r3,r3,16
    b8f0:	9d66983a 	sll	r19,r19,r21
    b8f4:	39ffffcc 	andi	r7,r7,65535
    b8f8:	19c7883a 	add	r3,r3,r7
    b8fc:	98ffc32e 	bgeu	r19,r3,b80c <__alt_data_end+0xff00b80c>
    b900:	10bfffc4 	addi	r2,r2,-1
    b904:	003fc106 	br	b80c <__alt_data_end+0xff00b80c>
    b908:	00800604 	movi	r2,24
    b90c:	003f1106 	br	b554 <__alt_data_end+0xff00b554>
    b910:	00800604 	movi	r2,24
    b914:	003f2706 	br	b5b4 <__alt_data_end+0xff00b5b4>
    b918:	00800604 	movi	r2,24
    b91c:	003ece06 	br	b458 <__alt_data_end+0xff00b458>
    b920:	0007883a 	mov	r3,zero
    b924:	00800044 	movi	r2,1
    b928:	003f5c06 	br	b69c <__alt_data_end+0xff00b69c>
    b92c:	813fa12e 	bgeu	r16,r4,b7b4 <__alt_data_end+0xff00b7b4>
    b930:	10bfff84 	addi	r2,r2,-2
    b934:	85e1883a 	add	r16,r16,r23
    b938:	003f9f06 	br	b7b8 <__alt_data_end+0xff00b7b8>
    b93c:	1c7f8a2e 	bgeu	r3,r17,b768 <__alt_data_end+0xff00b768>
    b940:	31bfff84 	addi	r6,r6,-2
    b944:	1dc7883a 	add	r3,r3,r23
    b948:	003f8806 	br	b76c <__alt_data_end+0xff00b76c>
    b94c:	1805883a 	mov	r2,r3
    b950:	003fde06 	br	b8cc <__alt_data_end+0xff00b8cc>
    b954:	1839883a 	mov	fp,r3
    b958:	003fc906 	br	b880 <__alt_data_end+0xff00b880>
    b95c:	b5bfff84 	addi	r22,r22,-2
    b960:	2449883a 	add	r4,r4,r17
    b964:	003f3406 	br	b638 <__alt_data_end+0xff00b638>
    b968:	b5bfff84 	addi	r22,r22,-2
    b96c:	1445883a 	add	r2,r2,r17
    b970:	003edb06 	br	b4e0 <__alt_data_end+0xff00b4e0>

0000b974 <__umoddi3>:
    b974:	defff404 	addi	sp,sp,-48
    b978:	df000a15 	stw	fp,40(sp)
    b97c:	dc400315 	stw	r17,12(sp)
    b980:	dc000215 	stw	r16,8(sp)
    b984:	dfc00b15 	stw	ra,44(sp)
    b988:	ddc00915 	stw	r23,36(sp)
    b98c:	dd800815 	stw	r22,32(sp)
    b990:	dd400715 	stw	r21,28(sp)
    b994:	dd000615 	stw	r20,24(sp)
    b998:	dcc00515 	stw	r19,20(sp)
    b99c:	dc800415 	stw	r18,16(sp)
    b9a0:	2021883a 	mov	r16,r4
    b9a4:	2823883a 	mov	r17,r5
    b9a8:	2839883a 	mov	fp,r5
    b9ac:	38003c1e 	bne	r7,zero,baa0 <__umoddi3+0x12c>
    b9b0:	3027883a 	mov	r19,r6
    b9b4:	2029883a 	mov	r20,r4
    b9b8:	2980512e 	bgeu	r5,r6,bb00 <__umoddi3+0x18c>
    b9bc:	00bfffd4 	movui	r2,65535
    b9c0:	11809a36 	bltu	r2,r6,bc2c <__umoddi3+0x2b8>
    b9c4:	01003fc4 	movi	r4,255
    b9c8:	2189803a 	cmpltu	r4,r4,r6
    b9cc:	200890fa 	slli	r4,r4,3
    b9d0:	3104d83a 	srl	r2,r6,r4
    b9d4:	00c00074 	movhi	r3,1
    b9d8:	18c23804 	addi	r3,r3,2272
    b9dc:	1885883a 	add	r2,r3,r2
    b9e0:	10c00003 	ldbu	r3,0(r2)
    b9e4:	00800804 	movi	r2,32
    b9e8:	1909883a 	add	r4,r3,r4
    b9ec:	1125c83a 	sub	r18,r2,r4
    b9f0:	90000526 	beq	r18,zero,ba08 <__umoddi3+0x94>
    b9f4:	8ca2983a 	sll	r17,r17,r18
    b9f8:	8108d83a 	srl	r4,r16,r4
    b9fc:	34a6983a 	sll	r19,r6,r18
    ba00:	84a8983a 	sll	r20,r16,r18
    ba04:	2478b03a 	or	fp,r4,r17
    ba08:	982ed43a 	srli	r23,r19,16
    ba0c:	e009883a 	mov	r4,fp
    ba10:	9dbfffcc 	andi	r22,r19,65535
    ba14:	b80b883a 	mov	r5,r23
    ba18:	000c0080 	call	c008 <__umodsi3>
    ba1c:	e009883a 	mov	r4,fp
    ba20:	b80b883a 	mov	r5,r23
    ba24:	102b883a 	mov	r21,r2
    ba28:	000bfa40 	call	bfa4 <__udivsi3>
    ba2c:	a806943a 	slli	r3,r21,16
    ba30:	a008d43a 	srli	r4,r20,16
    ba34:	b085383a 	mul	r2,r22,r2
    ba38:	20c8b03a 	or	r4,r4,r3
    ba3c:	2080032e 	bgeu	r4,r2,ba4c <__umoddi3+0xd8>
    ba40:	24c9883a 	add	r4,r4,r19
    ba44:	24c00136 	bltu	r4,r19,ba4c <__umoddi3+0xd8>
    ba48:	20811036 	bltu	r4,r2,be8c <__umoddi3+0x518>
    ba4c:	20abc83a 	sub	r21,r4,r2
    ba50:	b80b883a 	mov	r5,r23
    ba54:	a809883a 	mov	r4,r21
    ba58:	000c0080 	call	c008 <__umodsi3>
    ba5c:	1023883a 	mov	r17,r2
    ba60:	b80b883a 	mov	r5,r23
    ba64:	a809883a 	mov	r4,r21
    ba68:	000bfa40 	call	bfa4 <__udivsi3>
    ba6c:	8822943a 	slli	r17,r17,16
    ba70:	b085383a 	mul	r2,r22,r2
    ba74:	a0ffffcc 	andi	r3,r20,65535
    ba78:	1c46b03a 	or	r3,r3,r17
    ba7c:	1880042e 	bgeu	r3,r2,ba90 <__umoddi3+0x11c>
    ba80:	1cc7883a 	add	r3,r3,r19
    ba84:	1cc00236 	bltu	r3,r19,ba90 <__umoddi3+0x11c>
    ba88:	1880012e 	bgeu	r3,r2,ba90 <__umoddi3+0x11c>
    ba8c:	1cc7883a 	add	r3,r3,r19
    ba90:	1885c83a 	sub	r2,r3,r2
    ba94:	1484d83a 	srl	r2,r2,r18
    ba98:	0007883a 	mov	r3,zero
    ba9c:	00004f06 	br	bbdc <__umoddi3+0x268>
    baa0:	29c04c36 	bltu	r5,r7,bbd4 <__umoddi3+0x260>
    baa4:	00bfffd4 	movui	r2,65535
    baa8:	11c0582e 	bgeu	r2,r7,bc0c <__umoddi3+0x298>
    baac:	00804034 	movhi	r2,256
    bab0:	10bfffc4 	addi	r2,r2,-1
    bab4:	11c0e736 	bltu	r2,r7,be54 <__umoddi3+0x4e0>
    bab8:	01000404 	movi	r4,16
    babc:	3904d83a 	srl	r2,r7,r4
    bac0:	00c00074 	movhi	r3,1
    bac4:	18c23804 	addi	r3,r3,2272
    bac8:	1885883a 	add	r2,r3,r2
    bacc:	14c00003 	ldbu	r19,0(r2)
    bad0:	00c00804 	movi	r3,32
    bad4:	9927883a 	add	r19,r19,r4
    bad8:	1ce9c83a 	sub	r20,r3,r19
    badc:	a000581e 	bne	r20,zero,bc40 <__umoddi3+0x2cc>
    bae0:	3c400136 	bltu	r7,r17,bae8 <__umoddi3+0x174>
    bae4:	8180eb36 	bltu	r16,r6,be94 <__umoddi3+0x520>
    bae8:	8185c83a 	sub	r2,r16,r6
    baec:	89e3c83a 	sub	r17,r17,r7
    baf0:	8089803a 	cmpltu	r4,r16,r2
    baf4:	8939c83a 	sub	fp,r17,r4
    baf8:	e007883a 	mov	r3,fp
    bafc:	00003706 	br	bbdc <__umoddi3+0x268>
    bb00:	3000041e 	bne	r6,zero,bb14 <__umoddi3+0x1a0>
    bb04:	000b883a 	mov	r5,zero
    bb08:	01000044 	movi	r4,1
    bb0c:	000bfa40 	call	bfa4 <__udivsi3>
    bb10:	1027883a 	mov	r19,r2
    bb14:	00bfffd4 	movui	r2,65535
    bb18:	14c0402e 	bgeu	r2,r19,bc1c <__umoddi3+0x2a8>
    bb1c:	00804034 	movhi	r2,256
    bb20:	10bfffc4 	addi	r2,r2,-1
    bb24:	14c0cd36 	bltu	r2,r19,be5c <__umoddi3+0x4e8>
    bb28:	00800404 	movi	r2,16
    bb2c:	9886d83a 	srl	r3,r19,r2
    bb30:	01000074 	movhi	r4,1
    bb34:	21023804 	addi	r4,r4,2272
    bb38:	20c7883a 	add	r3,r4,r3
    bb3c:	18c00003 	ldbu	r3,0(r3)
    bb40:	1887883a 	add	r3,r3,r2
    bb44:	00800804 	movi	r2,32
    bb48:	10e5c83a 	sub	r18,r2,r3
    bb4c:	9000901e 	bne	r18,zero,bd90 <__umoddi3+0x41c>
    bb50:	982cd43a 	srli	r22,r19,16
    bb54:	8ce3c83a 	sub	r17,r17,r19
    bb58:	9d7fffcc 	andi	r21,r19,65535
    bb5c:	b00b883a 	mov	r5,r22
    bb60:	8809883a 	mov	r4,r17
    bb64:	000c0080 	call	c008 <__umodsi3>
    bb68:	8809883a 	mov	r4,r17
    bb6c:	b00b883a 	mov	r5,r22
    bb70:	1021883a 	mov	r16,r2
    bb74:	000bfa40 	call	bfa4 <__udivsi3>
    bb78:	8006943a 	slli	r3,r16,16
    bb7c:	a008d43a 	srli	r4,r20,16
    bb80:	1545383a 	mul	r2,r2,r21
    bb84:	20c8b03a 	or	r4,r4,r3
    bb88:	2080042e 	bgeu	r4,r2,bb9c <__umoddi3+0x228>
    bb8c:	24c9883a 	add	r4,r4,r19
    bb90:	24c00236 	bltu	r4,r19,bb9c <__umoddi3+0x228>
    bb94:	2080012e 	bgeu	r4,r2,bb9c <__umoddi3+0x228>
    bb98:	24c9883a 	add	r4,r4,r19
    bb9c:	20a1c83a 	sub	r16,r4,r2
    bba0:	b00b883a 	mov	r5,r22
    bba4:	8009883a 	mov	r4,r16
    bba8:	000c0080 	call	c008 <__umodsi3>
    bbac:	1023883a 	mov	r17,r2
    bbb0:	b00b883a 	mov	r5,r22
    bbb4:	8009883a 	mov	r4,r16
    bbb8:	000bfa40 	call	bfa4 <__udivsi3>
    bbbc:	8822943a 	slli	r17,r17,16
    bbc0:	1545383a 	mul	r2,r2,r21
    bbc4:	a53fffcc 	andi	r20,r20,65535
    bbc8:	a446b03a 	or	r3,r20,r17
    bbcc:	18bfb02e 	bgeu	r3,r2,ba90 <__alt_data_end+0xff00ba90>
    bbd0:	003fab06 	br	ba80 <__alt_data_end+0xff00ba80>
    bbd4:	2005883a 	mov	r2,r4
    bbd8:	2807883a 	mov	r3,r5
    bbdc:	dfc00b17 	ldw	ra,44(sp)
    bbe0:	df000a17 	ldw	fp,40(sp)
    bbe4:	ddc00917 	ldw	r23,36(sp)
    bbe8:	dd800817 	ldw	r22,32(sp)
    bbec:	dd400717 	ldw	r21,28(sp)
    bbf0:	dd000617 	ldw	r20,24(sp)
    bbf4:	dcc00517 	ldw	r19,20(sp)
    bbf8:	dc800417 	ldw	r18,16(sp)
    bbfc:	dc400317 	ldw	r17,12(sp)
    bc00:	dc000217 	ldw	r16,8(sp)
    bc04:	dec00c04 	addi	sp,sp,48
    bc08:	f800283a 	ret
    bc0c:	04c03fc4 	movi	r19,255
    bc10:	99c9803a 	cmpltu	r4,r19,r7
    bc14:	200890fa 	slli	r4,r4,3
    bc18:	003fa806 	br	babc <__alt_data_end+0xff00babc>
    bc1c:	00803fc4 	movi	r2,255
    bc20:	14c5803a 	cmpltu	r2,r2,r19
    bc24:	100490fa 	slli	r2,r2,3
    bc28:	003fc006 	br	bb2c <__alt_data_end+0xff00bb2c>
    bc2c:	00804034 	movhi	r2,256
    bc30:	10bfffc4 	addi	r2,r2,-1
    bc34:	11808b36 	bltu	r2,r6,be64 <__umoddi3+0x4f0>
    bc38:	01000404 	movi	r4,16
    bc3c:	003f6406 	br	b9d0 <__alt_data_end+0xff00b9d0>
    bc40:	34c4d83a 	srl	r2,r6,r19
    bc44:	3d0e983a 	sll	r7,r7,r20
    bc48:	8cf8d83a 	srl	fp,r17,r19
    bc4c:	8d10983a 	sll	r8,r17,r20
    bc50:	38aab03a 	or	r21,r7,r2
    bc54:	a82cd43a 	srli	r22,r21,16
    bc58:	84e2d83a 	srl	r17,r16,r19
    bc5c:	e009883a 	mov	r4,fp
    bc60:	b00b883a 	mov	r5,r22
    bc64:	8a22b03a 	or	r17,r17,r8
    bc68:	3524983a 	sll	r18,r6,r20
    bc6c:	000c0080 	call	c008 <__umodsi3>
    bc70:	e009883a 	mov	r4,fp
    bc74:	b00b883a 	mov	r5,r22
    bc78:	102f883a 	mov	r23,r2
    bc7c:	000bfa40 	call	bfa4 <__udivsi3>
    bc80:	100d883a 	mov	r6,r2
    bc84:	b808943a 	slli	r4,r23,16
    bc88:	aa3fffcc 	andi	r8,r21,65535
    bc8c:	8804d43a 	srli	r2,r17,16
    bc90:	41af383a 	mul	r23,r8,r6
    bc94:	8520983a 	sll	r16,r16,r20
    bc98:	1104b03a 	or	r2,r2,r4
    bc9c:	15c0042e 	bgeu	r2,r23,bcb0 <__umoddi3+0x33c>
    bca0:	1545883a 	add	r2,r2,r21
    bca4:	30ffffc4 	addi	r3,r6,-1
    bca8:	1540742e 	bgeu	r2,r21,be7c <__umoddi3+0x508>
    bcac:	180d883a 	mov	r6,r3
    bcb0:	15efc83a 	sub	r23,r2,r23
    bcb4:	b00b883a 	mov	r5,r22
    bcb8:	b809883a 	mov	r4,r23
    bcbc:	d9800115 	stw	r6,4(sp)
    bcc0:	da000015 	stw	r8,0(sp)
    bcc4:	000c0080 	call	c008 <__umodsi3>
    bcc8:	b00b883a 	mov	r5,r22
    bccc:	b809883a 	mov	r4,r23
    bcd0:	1039883a 	mov	fp,r2
    bcd4:	000bfa40 	call	bfa4 <__udivsi3>
    bcd8:	da000017 	ldw	r8,0(sp)
    bcdc:	e038943a 	slli	fp,fp,16
    bce0:	100b883a 	mov	r5,r2
    bce4:	4089383a 	mul	r4,r8,r2
    bce8:	8a3fffcc 	andi	r8,r17,65535
    bcec:	4710b03a 	or	r8,r8,fp
    bcf0:	d9800117 	ldw	r6,4(sp)
    bcf4:	4100042e 	bgeu	r8,r4,bd08 <__umoddi3+0x394>
    bcf8:	4551883a 	add	r8,r8,r21
    bcfc:	10bfffc4 	addi	r2,r2,-1
    bd00:	45405a2e 	bgeu	r8,r21,be6c <__umoddi3+0x4f8>
    bd04:	100b883a 	mov	r5,r2
    bd08:	300c943a 	slli	r6,r6,16
    bd0c:	91ffffcc 	andi	r7,r18,65535
    bd10:	9004d43a 	srli	r2,r18,16
    bd14:	314cb03a 	or	r6,r6,r5
    bd18:	317fffcc 	andi	r5,r6,65535
    bd1c:	300cd43a 	srli	r6,r6,16
    bd20:	29d3383a 	mul	r9,r5,r7
    bd24:	288b383a 	mul	r5,r5,r2
    bd28:	31cf383a 	mul	r7,r6,r7
    bd2c:	4806d43a 	srli	r3,r9,16
    bd30:	4111c83a 	sub	r8,r8,r4
    bd34:	29cb883a 	add	r5,r5,r7
    bd38:	194b883a 	add	r5,r3,r5
    bd3c:	3085383a 	mul	r2,r6,r2
    bd40:	29c0022e 	bgeu	r5,r7,bd4c <__umoddi3+0x3d8>
    bd44:	00c00074 	movhi	r3,1
    bd48:	10c5883a 	add	r2,r2,r3
    bd4c:	2808d43a 	srli	r4,r5,16
    bd50:	280a943a 	slli	r5,r5,16
    bd54:	4a7fffcc 	andi	r9,r9,65535
    bd58:	2085883a 	add	r2,r4,r2
    bd5c:	2a4b883a 	add	r5,r5,r9
    bd60:	40803636 	bltu	r8,r2,be3c <__umoddi3+0x4c8>
    bd64:	40804d26 	beq	r8,r2,be9c <__umoddi3+0x528>
    bd68:	4089c83a 	sub	r4,r8,r2
    bd6c:	280f883a 	mov	r7,r5
    bd70:	81cfc83a 	sub	r7,r16,r7
    bd74:	81c7803a 	cmpltu	r3,r16,r7
    bd78:	20c7c83a 	sub	r3,r4,r3
    bd7c:	1cc4983a 	sll	r2,r3,r19
    bd80:	3d0ed83a 	srl	r7,r7,r20
    bd84:	1d06d83a 	srl	r3,r3,r20
    bd88:	11c4b03a 	or	r2,r2,r7
    bd8c:	003f9306 	br	bbdc <__alt_data_end+0xff00bbdc>
    bd90:	9ca6983a 	sll	r19,r19,r18
    bd94:	88e8d83a 	srl	r20,r17,r3
    bd98:	80c4d83a 	srl	r2,r16,r3
    bd9c:	982cd43a 	srli	r22,r19,16
    bda0:	8ca2983a 	sll	r17,r17,r18
    bda4:	a009883a 	mov	r4,r20
    bda8:	b00b883a 	mov	r5,r22
    bdac:	1478b03a 	or	fp,r2,r17
    bdb0:	000c0080 	call	c008 <__umodsi3>
    bdb4:	a009883a 	mov	r4,r20
    bdb8:	b00b883a 	mov	r5,r22
    bdbc:	1023883a 	mov	r17,r2
    bdc0:	000bfa40 	call	bfa4 <__udivsi3>
    bdc4:	9d7fffcc 	andi	r21,r19,65535
    bdc8:	880a943a 	slli	r5,r17,16
    bdcc:	e008d43a 	srli	r4,fp,16
    bdd0:	a885383a 	mul	r2,r21,r2
    bdd4:	84a8983a 	sll	r20,r16,r18
    bdd8:	2148b03a 	or	r4,r4,r5
    bddc:	2080042e 	bgeu	r4,r2,bdf0 <__umoddi3+0x47c>
    bde0:	24c9883a 	add	r4,r4,r19
    bde4:	24c00236 	bltu	r4,r19,bdf0 <__umoddi3+0x47c>
    bde8:	2080012e 	bgeu	r4,r2,bdf0 <__umoddi3+0x47c>
    bdec:	24c9883a 	add	r4,r4,r19
    bdf0:	20a3c83a 	sub	r17,r4,r2
    bdf4:	b00b883a 	mov	r5,r22
    bdf8:	8809883a 	mov	r4,r17
    bdfc:	000c0080 	call	c008 <__umodsi3>
    be00:	102f883a 	mov	r23,r2
    be04:	8809883a 	mov	r4,r17
    be08:	b00b883a 	mov	r5,r22
    be0c:	000bfa40 	call	bfa4 <__udivsi3>
    be10:	b82e943a 	slli	r23,r23,16
    be14:	a885383a 	mul	r2,r21,r2
    be18:	e13fffcc 	andi	r4,fp,65535
    be1c:	25c8b03a 	or	r4,r4,r23
    be20:	2080042e 	bgeu	r4,r2,be34 <__umoddi3+0x4c0>
    be24:	24c9883a 	add	r4,r4,r19
    be28:	24c00236 	bltu	r4,r19,be34 <__umoddi3+0x4c0>
    be2c:	2080012e 	bgeu	r4,r2,be34 <__umoddi3+0x4c0>
    be30:	24c9883a 	add	r4,r4,r19
    be34:	20a3c83a 	sub	r17,r4,r2
    be38:	003f4806 	br	bb5c <__alt_data_end+0xff00bb5c>
    be3c:	2c8fc83a 	sub	r7,r5,r18
    be40:	1545c83a 	sub	r2,r2,r21
    be44:	29cb803a 	cmpltu	r5,r5,r7
    be48:	1145c83a 	sub	r2,r2,r5
    be4c:	4089c83a 	sub	r4,r8,r2
    be50:	003fc706 	br	bd70 <__alt_data_end+0xff00bd70>
    be54:	01000604 	movi	r4,24
    be58:	003f1806 	br	babc <__alt_data_end+0xff00babc>
    be5c:	00800604 	movi	r2,24
    be60:	003f3206 	br	bb2c <__alt_data_end+0xff00bb2c>
    be64:	01000604 	movi	r4,24
    be68:	003ed906 	br	b9d0 <__alt_data_end+0xff00b9d0>
    be6c:	413fa52e 	bgeu	r8,r4,bd04 <__alt_data_end+0xff00bd04>
    be70:	297fff84 	addi	r5,r5,-2
    be74:	4551883a 	add	r8,r8,r21
    be78:	003fa306 	br	bd08 <__alt_data_end+0xff00bd08>
    be7c:	15ff8b2e 	bgeu	r2,r23,bcac <__alt_data_end+0xff00bcac>
    be80:	31bfff84 	addi	r6,r6,-2
    be84:	1545883a 	add	r2,r2,r21
    be88:	003f8906 	br	bcb0 <__alt_data_end+0xff00bcb0>
    be8c:	24c9883a 	add	r4,r4,r19
    be90:	003eee06 	br	ba4c <__alt_data_end+0xff00ba4c>
    be94:	8005883a 	mov	r2,r16
    be98:	003f1706 	br	baf8 <__alt_data_end+0xff00baf8>
    be9c:	817fe736 	bltu	r16,r5,be3c <__alt_data_end+0xff00be3c>
    bea0:	280f883a 	mov	r7,r5
    bea4:	0009883a 	mov	r4,zero
    bea8:	003fb106 	br	bd70 <__alt_data_end+0xff00bd70>

0000beac <__divsi3>:
    beac:	20001b16 	blt	r4,zero,bf1c <__divsi3+0x70>
    beb0:	000f883a 	mov	r7,zero
    beb4:	28001616 	blt	r5,zero,bf10 <__divsi3+0x64>
    beb8:	200d883a 	mov	r6,r4
    bebc:	29001a2e 	bgeu	r5,r4,bf28 <__divsi3+0x7c>
    bec0:	00800804 	movi	r2,32
    bec4:	00c00044 	movi	r3,1
    bec8:	00000106 	br	bed0 <__divsi3+0x24>
    becc:	10000d26 	beq	r2,zero,bf04 <__divsi3+0x58>
    bed0:	294b883a 	add	r5,r5,r5
    bed4:	10bfffc4 	addi	r2,r2,-1
    bed8:	18c7883a 	add	r3,r3,r3
    bedc:	293ffb36 	bltu	r5,r4,becc <__alt_data_end+0xff00becc>
    bee0:	0005883a 	mov	r2,zero
    bee4:	18000726 	beq	r3,zero,bf04 <__divsi3+0x58>
    bee8:	0005883a 	mov	r2,zero
    beec:	31400236 	bltu	r6,r5,bef8 <__divsi3+0x4c>
    bef0:	314dc83a 	sub	r6,r6,r5
    bef4:	10c4b03a 	or	r2,r2,r3
    bef8:	1806d07a 	srli	r3,r3,1
    befc:	280ad07a 	srli	r5,r5,1
    bf00:	183ffa1e 	bne	r3,zero,beec <__alt_data_end+0xff00beec>
    bf04:	38000126 	beq	r7,zero,bf0c <__divsi3+0x60>
    bf08:	0085c83a 	sub	r2,zero,r2
    bf0c:	f800283a 	ret
    bf10:	014bc83a 	sub	r5,zero,r5
    bf14:	39c0005c 	xori	r7,r7,1
    bf18:	003fe706 	br	beb8 <__alt_data_end+0xff00beb8>
    bf1c:	0109c83a 	sub	r4,zero,r4
    bf20:	01c00044 	movi	r7,1
    bf24:	003fe306 	br	beb4 <__alt_data_end+0xff00beb4>
    bf28:	00c00044 	movi	r3,1
    bf2c:	003fee06 	br	bee8 <__alt_data_end+0xff00bee8>

0000bf30 <__modsi3>:
    bf30:	20001716 	blt	r4,zero,bf90 <__modsi3+0x60>
    bf34:	000f883a 	mov	r7,zero
    bf38:	2005883a 	mov	r2,r4
    bf3c:	28001216 	blt	r5,zero,bf88 <__modsi3+0x58>
    bf40:	2900162e 	bgeu	r5,r4,bf9c <__modsi3+0x6c>
    bf44:	01800804 	movi	r6,32
    bf48:	00c00044 	movi	r3,1
    bf4c:	00000106 	br	bf54 <__modsi3+0x24>
    bf50:	30000a26 	beq	r6,zero,bf7c <__modsi3+0x4c>
    bf54:	294b883a 	add	r5,r5,r5
    bf58:	31bfffc4 	addi	r6,r6,-1
    bf5c:	18c7883a 	add	r3,r3,r3
    bf60:	293ffb36 	bltu	r5,r4,bf50 <__alt_data_end+0xff00bf50>
    bf64:	18000526 	beq	r3,zero,bf7c <__modsi3+0x4c>
    bf68:	1806d07a 	srli	r3,r3,1
    bf6c:	11400136 	bltu	r2,r5,bf74 <__modsi3+0x44>
    bf70:	1145c83a 	sub	r2,r2,r5
    bf74:	280ad07a 	srli	r5,r5,1
    bf78:	183ffb1e 	bne	r3,zero,bf68 <__alt_data_end+0xff00bf68>
    bf7c:	38000126 	beq	r7,zero,bf84 <__modsi3+0x54>
    bf80:	0085c83a 	sub	r2,zero,r2
    bf84:	f800283a 	ret
    bf88:	014bc83a 	sub	r5,zero,r5
    bf8c:	003fec06 	br	bf40 <__alt_data_end+0xff00bf40>
    bf90:	0109c83a 	sub	r4,zero,r4
    bf94:	01c00044 	movi	r7,1
    bf98:	003fe706 	br	bf38 <__alt_data_end+0xff00bf38>
    bf9c:	00c00044 	movi	r3,1
    bfa0:	003ff106 	br	bf68 <__alt_data_end+0xff00bf68>

0000bfa4 <__udivsi3>:
    bfa4:	200d883a 	mov	r6,r4
    bfa8:	2900152e 	bgeu	r5,r4,c000 <__udivsi3+0x5c>
    bfac:	28001416 	blt	r5,zero,c000 <__udivsi3+0x5c>
    bfb0:	00800804 	movi	r2,32
    bfb4:	00c00044 	movi	r3,1
    bfb8:	00000206 	br	bfc4 <__udivsi3+0x20>
    bfbc:	10000e26 	beq	r2,zero,bff8 <__udivsi3+0x54>
    bfc0:	28000516 	blt	r5,zero,bfd8 <__udivsi3+0x34>
    bfc4:	294b883a 	add	r5,r5,r5
    bfc8:	10bfffc4 	addi	r2,r2,-1
    bfcc:	18c7883a 	add	r3,r3,r3
    bfd0:	293ffa36 	bltu	r5,r4,bfbc <__alt_data_end+0xff00bfbc>
    bfd4:	18000826 	beq	r3,zero,bff8 <__udivsi3+0x54>
    bfd8:	0005883a 	mov	r2,zero
    bfdc:	31400236 	bltu	r6,r5,bfe8 <__udivsi3+0x44>
    bfe0:	314dc83a 	sub	r6,r6,r5
    bfe4:	10c4b03a 	or	r2,r2,r3
    bfe8:	1806d07a 	srli	r3,r3,1
    bfec:	280ad07a 	srli	r5,r5,1
    bff0:	183ffa1e 	bne	r3,zero,bfdc <__alt_data_end+0xff00bfdc>
    bff4:	f800283a 	ret
    bff8:	0005883a 	mov	r2,zero
    bffc:	f800283a 	ret
    c000:	00c00044 	movi	r3,1
    c004:	003ff406 	br	bfd8 <__alt_data_end+0xff00bfd8>

0000c008 <__umodsi3>:
    c008:	2005883a 	mov	r2,r4
    c00c:	2900122e 	bgeu	r5,r4,c058 <__umodsi3+0x50>
    c010:	28001116 	blt	r5,zero,c058 <__umodsi3+0x50>
    c014:	01800804 	movi	r6,32
    c018:	00c00044 	movi	r3,1
    c01c:	00000206 	br	c028 <__umodsi3+0x20>
    c020:	30000c26 	beq	r6,zero,c054 <__umodsi3+0x4c>
    c024:	28000516 	blt	r5,zero,c03c <__umodsi3+0x34>
    c028:	294b883a 	add	r5,r5,r5
    c02c:	31bfffc4 	addi	r6,r6,-1
    c030:	18c7883a 	add	r3,r3,r3
    c034:	293ffa36 	bltu	r5,r4,c020 <__alt_data_end+0xff00c020>
    c038:	18000626 	beq	r3,zero,c054 <__umodsi3+0x4c>
    c03c:	1806d07a 	srli	r3,r3,1
    c040:	11400136 	bltu	r2,r5,c048 <__umodsi3+0x40>
    c044:	1145c83a 	sub	r2,r2,r5
    c048:	280ad07a 	srli	r5,r5,1
    c04c:	183ffb1e 	bne	r3,zero,c03c <__alt_data_end+0xff00c03c>
    c050:	f800283a 	ret
    c054:	f800283a 	ret
    c058:	00c00044 	movi	r3,1
    c05c:	003ff706 	br	c03c <__alt_data_end+0xff00c03c>

0000c060 <__adddf3>:
    c060:	02c00434 	movhi	r11,16
    c064:	5affffc4 	addi	r11,r11,-1
    c068:	2806d7fa 	srli	r3,r5,31
    c06c:	2ad4703a 	and	r10,r5,r11
    c070:	3ad2703a 	and	r9,r7,r11
    c074:	3804d53a 	srli	r2,r7,20
    c078:	3018d77a 	srli	r12,r6,29
    c07c:	280ad53a 	srli	r5,r5,20
    c080:	501490fa 	slli	r10,r10,3
    c084:	2010d77a 	srli	r8,r4,29
    c088:	481290fa 	slli	r9,r9,3
    c08c:	380ed7fa 	srli	r7,r7,31
    c090:	defffb04 	addi	sp,sp,-20
    c094:	dc800215 	stw	r18,8(sp)
    c098:	dc400115 	stw	r17,4(sp)
    c09c:	dc000015 	stw	r16,0(sp)
    c0a0:	dfc00415 	stw	ra,16(sp)
    c0a4:	dcc00315 	stw	r19,12(sp)
    c0a8:	1c803fcc 	andi	r18,r3,255
    c0ac:	2c01ffcc 	andi	r16,r5,2047
    c0b0:	5210b03a 	or	r8,r10,r8
    c0b4:	202290fa 	slli	r17,r4,3
    c0b8:	1081ffcc 	andi	r2,r2,2047
    c0bc:	4b12b03a 	or	r9,r9,r12
    c0c0:	300c90fa 	slli	r6,r6,3
    c0c4:	91c07526 	beq	r18,r7,c29c <__adddf3+0x23c>
    c0c8:	8087c83a 	sub	r3,r16,r2
    c0cc:	00c0ab0e 	bge	zero,r3,c37c <__adddf3+0x31c>
    c0d0:	10002a1e 	bne	r2,zero,c17c <__adddf3+0x11c>
    c0d4:	4984b03a 	or	r2,r9,r6
    c0d8:	1000961e 	bne	r2,zero,c334 <__adddf3+0x2d4>
    c0dc:	888001cc 	andi	r2,r17,7
    c0e0:	10000726 	beq	r2,zero,c100 <__adddf3+0xa0>
    c0e4:	888003cc 	andi	r2,r17,15
    c0e8:	00c00104 	movi	r3,4
    c0ec:	10c00426 	beq	r2,r3,c100 <__adddf3+0xa0>
    c0f0:	88c7883a 	add	r3,r17,r3
    c0f4:	1c63803a 	cmpltu	r17,r3,r17
    c0f8:	4451883a 	add	r8,r8,r17
    c0fc:	1823883a 	mov	r17,r3
    c100:	4080202c 	andhi	r2,r8,128
    c104:	10005926 	beq	r2,zero,c26c <__adddf3+0x20c>
    c108:	84000044 	addi	r16,r16,1
    c10c:	0081ffc4 	movi	r2,2047
    c110:	8080ba26 	beq	r16,r2,c3fc <__adddf3+0x39c>
    c114:	00bfe034 	movhi	r2,65408
    c118:	10bfffc4 	addi	r2,r2,-1
    c11c:	4090703a 	and	r8,r8,r2
    c120:	4004977a 	slli	r2,r8,29
    c124:	4010927a 	slli	r8,r8,9
    c128:	8822d0fa 	srli	r17,r17,3
    c12c:	8401ffcc 	andi	r16,r16,2047
    c130:	4010d33a 	srli	r8,r8,12
    c134:	9007883a 	mov	r3,r18
    c138:	1444b03a 	or	r2,r2,r17
    c13c:	8401ffcc 	andi	r16,r16,2047
    c140:	8020953a 	slli	r16,r16,20
    c144:	18c03fcc 	andi	r3,r3,255
    c148:	01000434 	movhi	r4,16
    c14c:	213fffc4 	addi	r4,r4,-1
    c150:	180697fa 	slli	r3,r3,31
    c154:	4110703a 	and	r8,r8,r4
    c158:	4410b03a 	or	r8,r8,r16
    c15c:	40c6b03a 	or	r3,r8,r3
    c160:	dfc00417 	ldw	ra,16(sp)
    c164:	dcc00317 	ldw	r19,12(sp)
    c168:	dc800217 	ldw	r18,8(sp)
    c16c:	dc400117 	ldw	r17,4(sp)
    c170:	dc000017 	ldw	r16,0(sp)
    c174:	dec00504 	addi	sp,sp,20
    c178:	f800283a 	ret
    c17c:	0081ffc4 	movi	r2,2047
    c180:	80bfd626 	beq	r16,r2,c0dc <__alt_data_end+0xff00c0dc>
    c184:	4a402034 	orhi	r9,r9,128
    c188:	00800e04 	movi	r2,56
    c18c:	10c09f16 	blt	r2,r3,c40c <__adddf3+0x3ac>
    c190:	008007c4 	movi	r2,31
    c194:	10c0c216 	blt	r2,r3,c4a0 <__adddf3+0x440>
    c198:	00800804 	movi	r2,32
    c19c:	10c5c83a 	sub	r2,r2,r3
    c1a0:	488a983a 	sll	r5,r9,r2
    c1a4:	30c8d83a 	srl	r4,r6,r3
    c1a8:	3084983a 	sll	r2,r6,r2
    c1ac:	48c6d83a 	srl	r3,r9,r3
    c1b0:	290cb03a 	or	r6,r5,r4
    c1b4:	1004c03a 	cmpne	r2,r2,zero
    c1b8:	308cb03a 	or	r6,r6,r2
    c1bc:	898dc83a 	sub	r6,r17,r6
    c1c0:	89a3803a 	cmpltu	r17,r17,r6
    c1c4:	40d1c83a 	sub	r8,r8,r3
    c1c8:	4451c83a 	sub	r8,r8,r17
    c1cc:	3023883a 	mov	r17,r6
    c1d0:	4080202c 	andhi	r2,r8,128
    c1d4:	10002326 	beq	r2,zero,c264 <__adddf3+0x204>
    c1d8:	04c02034 	movhi	r19,128
    c1dc:	9cffffc4 	addi	r19,r19,-1
    c1e0:	44e6703a 	and	r19,r8,r19
    c1e4:	98007626 	beq	r19,zero,c3c0 <__adddf3+0x360>
    c1e8:	9809883a 	mov	r4,r19
    c1ec:	000e6640 	call	e664 <__clzsi2>
    c1f0:	10fffe04 	addi	r3,r2,-8
    c1f4:	010007c4 	movi	r4,31
    c1f8:	20c07716 	blt	r4,r3,c3d8 <__adddf3+0x378>
    c1fc:	00800804 	movi	r2,32
    c200:	10c5c83a 	sub	r2,r2,r3
    c204:	8884d83a 	srl	r2,r17,r2
    c208:	98d0983a 	sll	r8,r19,r3
    c20c:	88e2983a 	sll	r17,r17,r3
    c210:	1204b03a 	or	r2,r2,r8
    c214:	1c007416 	blt	r3,r16,c3e8 <__adddf3+0x388>
    c218:	1c21c83a 	sub	r16,r3,r16
    c21c:	82000044 	addi	r8,r16,1
    c220:	00c007c4 	movi	r3,31
    c224:	1a009116 	blt	r3,r8,c46c <__adddf3+0x40c>
    c228:	00c00804 	movi	r3,32
    c22c:	1a07c83a 	sub	r3,r3,r8
    c230:	8a08d83a 	srl	r4,r17,r8
    c234:	88e2983a 	sll	r17,r17,r3
    c238:	10c6983a 	sll	r3,r2,r3
    c23c:	1210d83a 	srl	r8,r2,r8
    c240:	8804c03a 	cmpne	r2,r17,zero
    c244:	1906b03a 	or	r3,r3,r4
    c248:	18a2b03a 	or	r17,r3,r2
    c24c:	0021883a 	mov	r16,zero
    c250:	003fa206 	br	c0dc <__alt_data_end+0xff00c0dc>
    c254:	1890b03a 	or	r8,r3,r2
    c258:	40017d26 	beq	r8,zero,c850 <__adddf3+0x7f0>
    c25c:	1011883a 	mov	r8,r2
    c260:	1823883a 	mov	r17,r3
    c264:	888001cc 	andi	r2,r17,7
    c268:	103f9e1e 	bne	r2,zero,c0e4 <__alt_data_end+0xff00c0e4>
    c26c:	4004977a 	slli	r2,r8,29
    c270:	8822d0fa 	srli	r17,r17,3
    c274:	4010d0fa 	srli	r8,r8,3
    c278:	9007883a 	mov	r3,r18
    c27c:	1444b03a 	or	r2,r2,r17
    c280:	0101ffc4 	movi	r4,2047
    c284:	81002426 	beq	r16,r4,c318 <__adddf3+0x2b8>
    c288:	8120703a 	and	r16,r16,r4
    c28c:	01000434 	movhi	r4,16
    c290:	213fffc4 	addi	r4,r4,-1
    c294:	4110703a 	and	r8,r8,r4
    c298:	003fa806 	br	c13c <__alt_data_end+0xff00c13c>
    c29c:	8089c83a 	sub	r4,r16,r2
    c2a0:	01005e0e 	bge	zero,r4,c41c <__adddf3+0x3bc>
    c2a4:	10002b26 	beq	r2,zero,c354 <__adddf3+0x2f4>
    c2a8:	0081ffc4 	movi	r2,2047
    c2ac:	80bf8b26 	beq	r16,r2,c0dc <__alt_data_end+0xff00c0dc>
    c2b0:	4a402034 	orhi	r9,r9,128
    c2b4:	00800e04 	movi	r2,56
    c2b8:	1100a40e 	bge	r2,r4,c54c <__adddf3+0x4ec>
    c2bc:	498cb03a 	or	r6,r9,r6
    c2c0:	300ac03a 	cmpne	r5,r6,zero
    c2c4:	0013883a 	mov	r9,zero
    c2c8:	2c4b883a 	add	r5,r5,r17
    c2cc:	2c63803a 	cmpltu	r17,r5,r17
    c2d0:	4a11883a 	add	r8,r9,r8
    c2d4:	8a11883a 	add	r8,r17,r8
    c2d8:	2823883a 	mov	r17,r5
    c2dc:	4080202c 	andhi	r2,r8,128
    c2e0:	103fe026 	beq	r2,zero,c264 <__alt_data_end+0xff00c264>
    c2e4:	84000044 	addi	r16,r16,1
    c2e8:	0081ffc4 	movi	r2,2047
    c2ec:	8080d226 	beq	r16,r2,c638 <__adddf3+0x5d8>
    c2f0:	00bfe034 	movhi	r2,65408
    c2f4:	10bfffc4 	addi	r2,r2,-1
    c2f8:	4090703a 	and	r8,r8,r2
    c2fc:	880ad07a 	srli	r5,r17,1
    c300:	400897fa 	slli	r4,r8,31
    c304:	88c0004c 	andi	r3,r17,1
    c308:	28e2b03a 	or	r17,r5,r3
    c30c:	4010d07a 	srli	r8,r8,1
    c310:	2462b03a 	or	r17,r4,r17
    c314:	003f7106 	br	c0dc <__alt_data_end+0xff00c0dc>
    c318:	4088b03a 	or	r4,r8,r2
    c31c:	20014526 	beq	r4,zero,c834 <__adddf3+0x7d4>
    c320:	01000434 	movhi	r4,16
    c324:	42000234 	orhi	r8,r8,8
    c328:	213fffc4 	addi	r4,r4,-1
    c32c:	4110703a 	and	r8,r8,r4
    c330:	003f8206 	br	c13c <__alt_data_end+0xff00c13c>
    c334:	18ffffc4 	addi	r3,r3,-1
    c338:	1800491e 	bne	r3,zero,c460 <__adddf3+0x400>
    c33c:	898bc83a 	sub	r5,r17,r6
    c340:	8963803a 	cmpltu	r17,r17,r5
    c344:	4251c83a 	sub	r8,r8,r9
    c348:	4451c83a 	sub	r8,r8,r17
    c34c:	2823883a 	mov	r17,r5
    c350:	003f9f06 	br	c1d0 <__alt_data_end+0xff00c1d0>
    c354:	4984b03a 	or	r2,r9,r6
    c358:	103f6026 	beq	r2,zero,c0dc <__alt_data_end+0xff00c0dc>
    c35c:	213fffc4 	addi	r4,r4,-1
    c360:	2000931e 	bne	r4,zero,c5b0 <__adddf3+0x550>
    c364:	898d883a 	add	r6,r17,r6
    c368:	3463803a 	cmpltu	r17,r6,r17
    c36c:	4251883a 	add	r8,r8,r9
    c370:	8a11883a 	add	r8,r17,r8
    c374:	3023883a 	mov	r17,r6
    c378:	003fd806 	br	c2dc <__alt_data_end+0xff00c2dc>
    c37c:	1800541e 	bne	r3,zero,c4d0 <__adddf3+0x470>
    c380:	80800044 	addi	r2,r16,1
    c384:	1081ffcc 	andi	r2,r2,2047
    c388:	00c00044 	movi	r3,1
    c38c:	1880a00e 	bge	r3,r2,c610 <__adddf3+0x5b0>
    c390:	8989c83a 	sub	r4,r17,r6
    c394:	8905803a 	cmpltu	r2,r17,r4
    c398:	4267c83a 	sub	r19,r8,r9
    c39c:	98a7c83a 	sub	r19,r19,r2
    c3a0:	9880202c 	andhi	r2,r19,128
    c3a4:	10006326 	beq	r2,zero,c534 <__adddf3+0x4d4>
    c3a8:	3463c83a 	sub	r17,r6,r17
    c3ac:	4a07c83a 	sub	r3,r9,r8
    c3b0:	344d803a 	cmpltu	r6,r6,r17
    c3b4:	19a7c83a 	sub	r19,r3,r6
    c3b8:	3825883a 	mov	r18,r7
    c3bc:	983f8a1e 	bne	r19,zero,c1e8 <__alt_data_end+0xff00c1e8>
    c3c0:	8809883a 	mov	r4,r17
    c3c4:	000e6640 	call	e664 <__clzsi2>
    c3c8:	10800804 	addi	r2,r2,32
    c3cc:	10fffe04 	addi	r3,r2,-8
    c3d0:	010007c4 	movi	r4,31
    c3d4:	20ff890e 	bge	r4,r3,c1fc <__alt_data_end+0xff00c1fc>
    c3d8:	10bff604 	addi	r2,r2,-40
    c3dc:	8884983a 	sll	r2,r17,r2
    c3e0:	0023883a 	mov	r17,zero
    c3e4:	1c3f8c0e 	bge	r3,r16,c218 <__alt_data_end+0xff00c218>
    c3e8:	023fe034 	movhi	r8,65408
    c3ec:	423fffc4 	addi	r8,r8,-1
    c3f0:	80e1c83a 	sub	r16,r16,r3
    c3f4:	1210703a 	and	r8,r2,r8
    c3f8:	003f3806 	br	c0dc <__alt_data_end+0xff00c0dc>
    c3fc:	9007883a 	mov	r3,r18
    c400:	0011883a 	mov	r8,zero
    c404:	0005883a 	mov	r2,zero
    c408:	003f4c06 	br	c13c <__alt_data_end+0xff00c13c>
    c40c:	498cb03a 	or	r6,r9,r6
    c410:	300cc03a 	cmpne	r6,r6,zero
    c414:	0007883a 	mov	r3,zero
    c418:	003f6806 	br	c1bc <__alt_data_end+0xff00c1bc>
    c41c:	20009c1e 	bne	r4,zero,c690 <__adddf3+0x630>
    c420:	80800044 	addi	r2,r16,1
    c424:	1141ffcc 	andi	r5,r2,2047
    c428:	01000044 	movi	r4,1
    c42c:	2140670e 	bge	r4,r5,c5cc <__adddf3+0x56c>
    c430:	0101ffc4 	movi	r4,2047
    c434:	11007f26 	beq	r2,r4,c634 <__adddf3+0x5d4>
    c438:	898d883a 	add	r6,r17,r6
    c43c:	4247883a 	add	r3,r8,r9
    c440:	3451803a 	cmpltu	r8,r6,r17
    c444:	40d1883a 	add	r8,r8,r3
    c448:	402297fa 	slli	r17,r8,31
    c44c:	300cd07a 	srli	r6,r6,1
    c450:	4010d07a 	srli	r8,r8,1
    c454:	1021883a 	mov	r16,r2
    c458:	89a2b03a 	or	r17,r17,r6
    c45c:	003f1f06 	br	c0dc <__alt_data_end+0xff00c0dc>
    c460:	0081ffc4 	movi	r2,2047
    c464:	80bf481e 	bne	r16,r2,c188 <__alt_data_end+0xff00c188>
    c468:	003f1c06 	br	c0dc <__alt_data_end+0xff00c0dc>
    c46c:	843ff844 	addi	r16,r16,-31
    c470:	01000804 	movi	r4,32
    c474:	1406d83a 	srl	r3,r2,r16
    c478:	41005026 	beq	r8,r4,c5bc <__adddf3+0x55c>
    c47c:	01001004 	movi	r4,64
    c480:	2211c83a 	sub	r8,r4,r8
    c484:	1204983a 	sll	r2,r2,r8
    c488:	88a2b03a 	or	r17,r17,r2
    c48c:	8822c03a 	cmpne	r17,r17,zero
    c490:	1c62b03a 	or	r17,r3,r17
    c494:	0011883a 	mov	r8,zero
    c498:	0021883a 	mov	r16,zero
    c49c:	003f7106 	br	c264 <__alt_data_end+0xff00c264>
    c4a0:	193ff804 	addi	r4,r3,-32
    c4a4:	00800804 	movi	r2,32
    c4a8:	4908d83a 	srl	r4,r9,r4
    c4ac:	18804526 	beq	r3,r2,c5c4 <__adddf3+0x564>
    c4b0:	00801004 	movi	r2,64
    c4b4:	10c5c83a 	sub	r2,r2,r3
    c4b8:	4886983a 	sll	r3,r9,r2
    c4bc:	198cb03a 	or	r6,r3,r6
    c4c0:	300cc03a 	cmpne	r6,r6,zero
    c4c4:	218cb03a 	or	r6,r4,r6
    c4c8:	0007883a 	mov	r3,zero
    c4cc:	003f3b06 	br	c1bc <__alt_data_end+0xff00c1bc>
    c4d0:	80002a26 	beq	r16,zero,c57c <__adddf3+0x51c>
    c4d4:	0101ffc4 	movi	r4,2047
    c4d8:	11006826 	beq	r2,r4,c67c <__adddf3+0x61c>
    c4dc:	00c7c83a 	sub	r3,zero,r3
    c4e0:	42002034 	orhi	r8,r8,128
    c4e4:	01000e04 	movi	r4,56
    c4e8:	20c07c16 	blt	r4,r3,c6dc <__adddf3+0x67c>
    c4ec:	010007c4 	movi	r4,31
    c4f0:	20c0da16 	blt	r4,r3,c85c <__adddf3+0x7fc>
    c4f4:	01000804 	movi	r4,32
    c4f8:	20c9c83a 	sub	r4,r4,r3
    c4fc:	4114983a 	sll	r10,r8,r4
    c500:	88cad83a 	srl	r5,r17,r3
    c504:	8908983a 	sll	r4,r17,r4
    c508:	40c6d83a 	srl	r3,r8,r3
    c50c:	5162b03a 	or	r17,r10,r5
    c510:	2008c03a 	cmpne	r4,r4,zero
    c514:	8922b03a 	or	r17,r17,r4
    c518:	3463c83a 	sub	r17,r6,r17
    c51c:	48c7c83a 	sub	r3,r9,r3
    c520:	344d803a 	cmpltu	r6,r6,r17
    c524:	1991c83a 	sub	r8,r3,r6
    c528:	1021883a 	mov	r16,r2
    c52c:	3825883a 	mov	r18,r7
    c530:	003f2706 	br	c1d0 <__alt_data_end+0xff00c1d0>
    c534:	24d0b03a 	or	r8,r4,r19
    c538:	40001b1e 	bne	r8,zero,c5a8 <__adddf3+0x548>
    c53c:	0005883a 	mov	r2,zero
    c540:	0007883a 	mov	r3,zero
    c544:	0021883a 	mov	r16,zero
    c548:	003f4d06 	br	c280 <__alt_data_end+0xff00c280>
    c54c:	008007c4 	movi	r2,31
    c550:	11003c16 	blt	r2,r4,c644 <__adddf3+0x5e4>
    c554:	00800804 	movi	r2,32
    c558:	1105c83a 	sub	r2,r2,r4
    c55c:	488e983a 	sll	r7,r9,r2
    c560:	310ad83a 	srl	r5,r6,r4
    c564:	3084983a 	sll	r2,r6,r2
    c568:	4912d83a 	srl	r9,r9,r4
    c56c:	394ab03a 	or	r5,r7,r5
    c570:	1004c03a 	cmpne	r2,r2,zero
    c574:	288ab03a 	or	r5,r5,r2
    c578:	003f5306 	br	c2c8 <__alt_data_end+0xff00c2c8>
    c57c:	4448b03a 	or	r4,r8,r17
    c580:	20003e26 	beq	r4,zero,c67c <__adddf3+0x61c>
    c584:	00c6303a 	nor	r3,zero,r3
    c588:	18003a1e 	bne	r3,zero,c674 <__adddf3+0x614>
    c58c:	3463c83a 	sub	r17,r6,r17
    c590:	4a07c83a 	sub	r3,r9,r8
    c594:	344d803a 	cmpltu	r6,r6,r17
    c598:	1991c83a 	sub	r8,r3,r6
    c59c:	1021883a 	mov	r16,r2
    c5a0:	3825883a 	mov	r18,r7
    c5a4:	003f0a06 	br	c1d0 <__alt_data_end+0xff00c1d0>
    c5a8:	2023883a 	mov	r17,r4
    c5ac:	003f0d06 	br	c1e4 <__alt_data_end+0xff00c1e4>
    c5b0:	0081ffc4 	movi	r2,2047
    c5b4:	80bf3f1e 	bne	r16,r2,c2b4 <__alt_data_end+0xff00c2b4>
    c5b8:	003ec806 	br	c0dc <__alt_data_end+0xff00c0dc>
    c5bc:	0005883a 	mov	r2,zero
    c5c0:	003fb106 	br	c488 <__alt_data_end+0xff00c488>
    c5c4:	0007883a 	mov	r3,zero
    c5c8:	003fbc06 	br	c4bc <__alt_data_end+0xff00c4bc>
    c5cc:	4444b03a 	or	r2,r8,r17
    c5d0:	8000871e 	bne	r16,zero,c7f0 <__adddf3+0x790>
    c5d4:	1000ba26 	beq	r2,zero,c8c0 <__adddf3+0x860>
    c5d8:	4984b03a 	or	r2,r9,r6
    c5dc:	103ebf26 	beq	r2,zero,c0dc <__alt_data_end+0xff00c0dc>
    c5e0:	8985883a 	add	r2,r17,r6
    c5e4:	4247883a 	add	r3,r8,r9
    c5e8:	1451803a 	cmpltu	r8,r2,r17
    c5ec:	40d1883a 	add	r8,r8,r3
    c5f0:	40c0202c 	andhi	r3,r8,128
    c5f4:	1023883a 	mov	r17,r2
    c5f8:	183f1a26 	beq	r3,zero,c264 <__alt_data_end+0xff00c264>
    c5fc:	00bfe034 	movhi	r2,65408
    c600:	10bfffc4 	addi	r2,r2,-1
    c604:	2021883a 	mov	r16,r4
    c608:	4090703a 	and	r8,r8,r2
    c60c:	003eb306 	br	c0dc <__alt_data_end+0xff00c0dc>
    c610:	4444b03a 	or	r2,r8,r17
    c614:	8000291e 	bne	r16,zero,c6bc <__adddf3+0x65c>
    c618:	10004b1e 	bne	r2,zero,c748 <__adddf3+0x6e8>
    c61c:	4990b03a 	or	r8,r9,r6
    c620:	40008b26 	beq	r8,zero,c850 <__adddf3+0x7f0>
    c624:	4811883a 	mov	r8,r9
    c628:	3023883a 	mov	r17,r6
    c62c:	3825883a 	mov	r18,r7
    c630:	003eaa06 	br	c0dc <__alt_data_end+0xff00c0dc>
    c634:	1021883a 	mov	r16,r2
    c638:	0011883a 	mov	r8,zero
    c63c:	0005883a 	mov	r2,zero
    c640:	003f0f06 	br	c280 <__alt_data_end+0xff00c280>
    c644:	217ff804 	addi	r5,r4,-32
    c648:	00800804 	movi	r2,32
    c64c:	494ad83a 	srl	r5,r9,r5
    c650:	20807d26 	beq	r4,r2,c848 <__adddf3+0x7e8>
    c654:	00801004 	movi	r2,64
    c658:	1109c83a 	sub	r4,r2,r4
    c65c:	4912983a 	sll	r9,r9,r4
    c660:	498cb03a 	or	r6,r9,r6
    c664:	300cc03a 	cmpne	r6,r6,zero
    c668:	298ab03a 	or	r5,r5,r6
    c66c:	0013883a 	mov	r9,zero
    c670:	003f1506 	br	c2c8 <__alt_data_end+0xff00c2c8>
    c674:	0101ffc4 	movi	r4,2047
    c678:	113f9a1e 	bne	r2,r4,c4e4 <__alt_data_end+0xff00c4e4>
    c67c:	4811883a 	mov	r8,r9
    c680:	3023883a 	mov	r17,r6
    c684:	1021883a 	mov	r16,r2
    c688:	3825883a 	mov	r18,r7
    c68c:	003e9306 	br	c0dc <__alt_data_end+0xff00c0dc>
    c690:	8000161e 	bne	r16,zero,c6ec <__adddf3+0x68c>
    c694:	444ab03a 	or	r5,r8,r17
    c698:	28005126 	beq	r5,zero,c7e0 <__adddf3+0x780>
    c69c:	0108303a 	nor	r4,zero,r4
    c6a0:	20004d1e 	bne	r4,zero,c7d8 <__adddf3+0x778>
    c6a4:	89a3883a 	add	r17,r17,r6
    c6a8:	4253883a 	add	r9,r8,r9
    c6ac:	898d803a 	cmpltu	r6,r17,r6
    c6b0:	3251883a 	add	r8,r6,r9
    c6b4:	1021883a 	mov	r16,r2
    c6b8:	003f0806 	br	c2dc <__alt_data_end+0xff00c2dc>
    c6bc:	1000301e 	bne	r2,zero,c780 <__adddf3+0x720>
    c6c0:	4984b03a 	or	r2,r9,r6
    c6c4:	10007126 	beq	r2,zero,c88c <__adddf3+0x82c>
    c6c8:	4811883a 	mov	r8,r9
    c6cc:	3023883a 	mov	r17,r6
    c6d0:	3825883a 	mov	r18,r7
    c6d4:	0401ffc4 	movi	r16,2047
    c6d8:	003e8006 	br	c0dc <__alt_data_end+0xff00c0dc>
    c6dc:	4462b03a 	or	r17,r8,r17
    c6e0:	8822c03a 	cmpne	r17,r17,zero
    c6e4:	0007883a 	mov	r3,zero
    c6e8:	003f8b06 	br	c518 <__alt_data_end+0xff00c518>
    c6ec:	0141ffc4 	movi	r5,2047
    c6f0:	11403b26 	beq	r2,r5,c7e0 <__adddf3+0x780>
    c6f4:	0109c83a 	sub	r4,zero,r4
    c6f8:	42002034 	orhi	r8,r8,128
    c6fc:	01400e04 	movi	r5,56
    c700:	29006716 	blt	r5,r4,c8a0 <__adddf3+0x840>
    c704:	014007c4 	movi	r5,31
    c708:	29007016 	blt	r5,r4,c8cc <__adddf3+0x86c>
    c70c:	01400804 	movi	r5,32
    c710:	290bc83a 	sub	r5,r5,r4
    c714:	4154983a 	sll	r10,r8,r5
    c718:	890ed83a 	srl	r7,r17,r4
    c71c:	894a983a 	sll	r5,r17,r5
    c720:	4108d83a 	srl	r4,r8,r4
    c724:	51e2b03a 	or	r17,r10,r7
    c728:	280ac03a 	cmpne	r5,r5,zero
    c72c:	8962b03a 	or	r17,r17,r5
    c730:	89a3883a 	add	r17,r17,r6
    c734:	2253883a 	add	r9,r4,r9
    c738:	898d803a 	cmpltu	r6,r17,r6
    c73c:	3251883a 	add	r8,r6,r9
    c740:	1021883a 	mov	r16,r2
    c744:	003ee506 	br	c2dc <__alt_data_end+0xff00c2dc>
    c748:	4984b03a 	or	r2,r9,r6
    c74c:	103e6326 	beq	r2,zero,c0dc <__alt_data_end+0xff00c0dc>
    c750:	8987c83a 	sub	r3,r17,r6
    c754:	88c9803a 	cmpltu	r4,r17,r3
    c758:	4245c83a 	sub	r2,r8,r9
    c75c:	1105c83a 	sub	r2,r2,r4
    c760:	1100202c 	andhi	r4,r2,128
    c764:	203ebb26 	beq	r4,zero,c254 <__alt_data_end+0xff00c254>
    c768:	3463c83a 	sub	r17,r6,r17
    c76c:	4a07c83a 	sub	r3,r9,r8
    c770:	344d803a 	cmpltu	r6,r6,r17
    c774:	1991c83a 	sub	r8,r3,r6
    c778:	3825883a 	mov	r18,r7
    c77c:	003e5706 	br	c0dc <__alt_data_end+0xff00c0dc>
    c780:	4984b03a 	or	r2,r9,r6
    c784:	10002e26 	beq	r2,zero,c840 <__adddf3+0x7e0>
    c788:	4004d0fa 	srli	r2,r8,3
    c78c:	8822d0fa 	srli	r17,r17,3
    c790:	4010977a 	slli	r8,r8,29
    c794:	10c0022c 	andhi	r3,r2,8
    c798:	4462b03a 	or	r17,r8,r17
    c79c:	18000826 	beq	r3,zero,c7c0 <__adddf3+0x760>
    c7a0:	4808d0fa 	srli	r4,r9,3
    c7a4:	20c0022c 	andhi	r3,r4,8
    c7a8:	1800051e 	bne	r3,zero,c7c0 <__adddf3+0x760>
    c7ac:	300cd0fa 	srli	r6,r6,3
    c7b0:	4806977a 	slli	r3,r9,29
    c7b4:	2005883a 	mov	r2,r4
    c7b8:	3825883a 	mov	r18,r7
    c7bc:	19a2b03a 	or	r17,r3,r6
    c7c0:	8810d77a 	srli	r8,r17,29
    c7c4:	100490fa 	slli	r2,r2,3
    c7c8:	882290fa 	slli	r17,r17,3
    c7cc:	0401ffc4 	movi	r16,2047
    c7d0:	4090b03a 	or	r8,r8,r2
    c7d4:	003e4106 	br	c0dc <__alt_data_end+0xff00c0dc>
    c7d8:	0141ffc4 	movi	r5,2047
    c7dc:	117fc71e 	bne	r2,r5,c6fc <__alt_data_end+0xff00c6fc>
    c7e0:	4811883a 	mov	r8,r9
    c7e4:	3023883a 	mov	r17,r6
    c7e8:	1021883a 	mov	r16,r2
    c7ec:	003e3b06 	br	c0dc <__alt_data_end+0xff00c0dc>
    c7f0:	10002f26 	beq	r2,zero,c8b0 <__adddf3+0x850>
    c7f4:	4984b03a 	or	r2,r9,r6
    c7f8:	10001126 	beq	r2,zero,c840 <__adddf3+0x7e0>
    c7fc:	4004d0fa 	srli	r2,r8,3
    c800:	8822d0fa 	srli	r17,r17,3
    c804:	4010977a 	slli	r8,r8,29
    c808:	10c0022c 	andhi	r3,r2,8
    c80c:	4462b03a 	or	r17,r8,r17
    c810:	183feb26 	beq	r3,zero,c7c0 <__alt_data_end+0xff00c7c0>
    c814:	4808d0fa 	srli	r4,r9,3
    c818:	20c0022c 	andhi	r3,r4,8
    c81c:	183fe81e 	bne	r3,zero,c7c0 <__alt_data_end+0xff00c7c0>
    c820:	300cd0fa 	srli	r6,r6,3
    c824:	4806977a 	slli	r3,r9,29
    c828:	2005883a 	mov	r2,r4
    c82c:	19a2b03a 	or	r17,r3,r6
    c830:	003fe306 	br	c7c0 <__alt_data_end+0xff00c7c0>
    c834:	0011883a 	mov	r8,zero
    c838:	0005883a 	mov	r2,zero
    c83c:	003e3f06 	br	c13c <__alt_data_end+0xff00c13c>
    c840:	0401ffc4 	movi	r16,2047
    c844:	003e2506 	br	c0dc <__alt_data_end+0xff00c0dc>
    c848:	0013883a 	mov	r9,zero
    c84c:	003f8406 	br	c660 <__alt_data_end+0xff00c660>
    c850:	0005883a 	mov	r2,zero
    c854:	0007883a 	mov	r3,zero
    c858:	003e8906 	br	c280 <__alt_data_end+0xff00c280>
    c85c:	197ff804 	addi	r5,r3,-32
    c860:	01000804 	movi	r4,32
    c864:	414ad83a 	srl	r5,r8,r5
    c868:	19002426 	beq	r3,r4,c8fc <__adddf3+0x89c>
    c86c:	01001004 	movi	r4,64
    c870:	20c7c83a 	sub	r3,r4,r3
    c874:	40c6983a 	sll	r3,r8,r3
    c878:	1c46b03a 	or	r3,r3,r17
    c87c:	1806c03a 	cmpne	r3,r3,zero
    c880:	28e2b03a 	or	r17,r5,r3
    c884:	0007883a 	mov	r3,zero
    c888:	003f2306 	br	c518 <__alt_data_end+0xff00c518>
    c88c:	0007883a 	mov	r3,zero
    c890:	5811883a 	mov	r8,r11
    c894:	00bfffc4 	movi	r2,-1
    c898:	0401ffc4 	movi	r16,2047
    c89c:	003e7806 	br	c280 <__alt_data_end+0xff00c280>
    c8a0:	4462b03a 	or	r17,r8,r17
    c8a4:	8822c03a 	cmpne	r17,r17,zero
    c8a8:	0009883a 	mov	r4,zero
    c8ac:	003fa006 	br	c730 <__alt_data_end+0xff00c730>
    c8b0:	4811883a 	mov	r8,r9
    c8b4:	3023883a 	mov	r17,r6
    c8b8:	0401ffc4 	movi	r16,2047
    c8bc:	003e0706 	br	c0dc <__alt_data_end+0xff00c0dc>
    c8c0:	4811883a 	mov	r8,r9
    c8c4:	3023883a 	mov	r17,r6
    c8c8:	003e0406 	br	c0dc <__alt_data_end+0xff00c0dc>
    c8cc:	21fff804 	addi	r7,r4,-32
    c8d0:	01400804 	movi	r5,32
    c8d4:	41ced83a 	srl	r7,r8,r7
    c8d8:	21400a26 	beq	r4,r5,c904 <__adddf3+0x8a4>
    c8dc:	01401004 	movi	r5,64
    c8e0:	2909c83a 	sub	r4,r5,r4
    c8e4:	4108983a 	sll	r4,r8,r4
    c8e8:	2448b03a 	or	r4,r4,r17
    c8ec:	2008c03a 	cmpne	r4,r4,zero
    c8f0:	3922b03a 	or	r17,r7,r4
    c8f4:	0009883a 	mov	r4,zero
    c8f8:	003f8d06 	br	c730 <__alt_data_end+0xff00c730>
    c8fc:	0007883a 	mov	r3,zero
    c900:	003fdd06 	br	c878 <__alt_data_end+0xff00c878>
    c904:	0009883a 	mov	r4,zero
    c908:	003ff706 	br	c8e8 <__alt_data_end+0xff00c8e8>

0000c90c <__divdf3>:
    c90c:	defff204 	addi	sp,sp,-56
    c910:	dd400915 	stw	r21,36(sp)
    c914:	282ad53a 	srli	r21,r5,20
    c918:	dd000815 	stw	r20,32(sp)
    c91c:	2828d7fa 	srli	r20,r5,31
    c920:	dc000415 	stw	r16,16(sp)
    c924:	04000434 	movhi	r16,16
    c928:	df000c15 	stw	fp,48(sp)
    c92c:	843fffc4 	addi	r16,r16,-1
    c930:	dfc00d15 	stw	ra,52(sp)
    c934:	ddc00b15 	stw	r23,44(sp)
    c938:	dd800a15 	stw	r22,40(sp)
    c93c:	dcc00715 	stw	r19,28(sp)
    c940:	dc800615 	stw	r18,24(sp)
    c944:	dc400515 	stw	r17,20(sp)
    c948:	ad41ffcc 	andi	r21,r21,2047
    c94c:	2c20703a 	and	r16,r5,r16
    c950:	a7003fcc 	andi	fp,r20,255
    c954:	a8006126 	beq	r21,zero,cadc <__divdf3+0x1d0>
    c958:	0081ffc4 	movi	r2,2047
    c95c:	2025883a 	mov	r18,r4
    c960:	a8803726 	beq	r21,r2,ca40 <__divdf3+0x134>
    c964:	80800434 	orhi	r2,r16,16
    c968:	100490fa 	slli	r2,r2,3
    c96c:	2020d77a 	srli	r16,r4,29
    c970:	202490fa 	slli	r18,r4,3
    c974:	ad7f0044 	addi	r21,r21,-1023
    c978:	80a0b03a 	or	r16,r16,r2
    c97c:	0027883a 	mov	r19,zero
    c980:	0013883a 	mov	r9,zero
    c984:	3804d53a 	srli	r2,r7,20
    c988:	382cd7fa 	srli	r22,r7,31
    c98c:	04400434 	movhi	r17,16
    c990:	8c7fffc4 	addi	r17,r17,-1
    c994:	1081ffcc 	andi	r2,r2,2047
    c998:	3011883a 	mov	r8,r6
    c99c:	3c62703a 	and	r17,r7,r17
    c9a0:	b5c03fcc 	andi	r23,r22,255
    c9a4:	10006c26 	beq	r2,zero,cb58 <__divdf3+0x24c>
    c9a8:	00c1ffc4 	movi	r3,2047
    c9ac:	10c06426 	beq	r2,r3,cb40 <__divdf3+0x234>
    c9b0:	88c00434 	orhi	r3,r17,16
    c9b4:	180690fa 	slli	r3,r3,3
    c9b8:	3022d77a 	srli	r17,r6,29
    c9bc:	301090fa 	slli	r8,r6,3
    c9c0:	10bf0044 	addi	r2,r2,-1023
    c9c4:	88e2b03a 	or	r17,r17,r3
    c9c8:	000f883a 	mov	r7,zero
    c9cc:	a58cf03a 	xor	r6,r20,r22
    c9d0:	3cc8b03a 	or	r4,r7,r19
    c9d4:	a8abc83a 	sub	r21,r21,r2
    c9d8:	008003c4 	movi	r2,15
    c9dc:	3007883a 	mov	r3,r6
    c9e0:	34c03fcc 	andi	r19,r6,255
    c9e4:	11009036 	bltu	r2,r4,cc28 <__divdf3+0x31c>
    c9e8:	200890ba 	slli	r4,r4,2
    c9ec:	00800074 	movhi	r2,1
    c9f0:	10b28004 	addi	r2,r2,-13824
    c9f4:	2089883a 	add	r4,r4,r2
    c9f8:	20800017 	ldw	r2,0(r4)
    c9fc:	1000683a 	jmp	r2
    ca00:	0000cc28 	cmpgeui	zero,zero,816
    ca04:	0000ca78 	rdprs	zero,zero,809
    ca08:	0000cc18 	cmpnei	zero,zero,816
    ca0c:	0000ca6c 	andhi	zero,zero,809
    ca10:	0000cc18 	cmpnei	zero,zero,816
    ca14:	0000cbec 	andhi	zero,zero,815
    ca18:	0000cc18 	cmpnei	zero,zero,816
    ca1c:	0000ca6c 	andhi	zero,zero,809
    ca20:	0000ca78 	rdprs	zero,zero,809
    ca24:	0000ca78 	rdprs	zero,zero,809
    ca28:	0000cbec 	andhi	zero,zero,815
    ca2c:	0000ca6c 	andhi	zero,zero,809
    ca30:	0000ca5c 	xori	zero,zero,809
    ca34:	0000ca5c 	xori	zero,zero,809
    ca38:	0000ca5c 	xori	zero,zero,809
    ca3c:	0000cf0c 	andi	zero,zero,828
    ca40:	2404b03a 	or	r2,r4,r16
    ca44:	1000661e 	bne	r2,zero,cbe0 <__divdf3+0x2d4>
    ca48:	04c00204 	movi	r19,8
    ca4c:	0021883a 	mov	r16,zero
    ca50:	0025883a 	mov	r18,zero
    ca54:	02400084 	movi	r9,2
    ca58:	003fca06 	br	c984 <__alt_data_end+0xff00c984>
    ca5c:	8023883a 	mov	r17,r16
    ca60:	9011883a 	mov	r8,r18
    ca64:	e02f883a 	mov	r23,fp
    ca68:	480f883a 	mov	r7,r9
    ca6c:	00800084 	movi	r2,2
    ca70:	3881311e 	bne	r7,r2,cf38 <__divdf3+0x62c>
    ca74:	b827883a 	mov	r19,r23
    ca78:	98c0004c 	andi	r3,r19,1
    ca7c:	0081ffc4 	movi	r2,2047
    ca80:	000b883a 	mov	r5,zero
    ca84:	0025883a 	mov	r18,zero
    ca88:	1004953a 	slli	r2,r2,20
    ca8c:	18c03fcc 	andi	r3,r3,255
    ca90:	04400434 	movhi	r17,16
    ca94:	8c7fffc4 	addi	r17,r17,-1
    ca98:	180697fa 	slli	r3,r3,31
    ca9c:	2c4a703a 	and	r5,r5,r17
    caa0:	288ab03a 	or	r5,r5,r2
    caa4:	28c6b03a 	or	r3,r5,r3
    caa8:	9005883a 	mov	r2,r18
    caac:	dfc00d17 	ldw	ra,52(sp)
    cab0:	df000c17 	ldw	fp,48(sp)
    cab4:	ddc00b17 	ldw	r23,44(sp)
    cab8:	dd800a17 	ldw	r22,40(sp)
    cabc:	dd400917 	ldw	r21,36(sp)
    cac0:	dd000817 	ldw	r20,32(sp)
    cac4:	dcc00717 	ldw	r19,28(sp)
    cac8:	dc800617 	ldw	r18,24(sp)
    cacc:	dc400517 	ldw	r17,20(sp)
    cad0:	dc000417 	ldw	r16,16(sp)
    cad4:	dec00e04 	addi	sp,sp,56
    cad8:	f800283a 	ret
    cadc:	2404b03a 	or	r2,r4,r16
    cae0:	2027883a 	mov	r19,r4
    cae4:	10003926 	beq	r2,zero,cbcc <__divdf3+0x2c0>
    cae8:	80012e26 	beq	r16,zero,cfa4 <__divdf3+0x698>
    caec:	8009883a 	mov	r4,r16
    caf0:	d9800315 	stw	r6,12(sp)
    caf4:	d9c00215 	stw	r7,8(sp)
    caf8:	000e6640 	call	e664 <__clzsi2>
    cafc:	d9800317 	ldw	r6,12(sp)
    cb00:	d9c00217 	ldw	r7,8(sp)
    cb04:	113ffd44 	addi	r4,r2,-11
    cb08:	00c00704 	movi	r3,28
    cb0c:	19012116 	blt	r3,r4,cf94 <__divdf3+0x688>
    cb10:	00c00744 	movi	r3,29
    cb14:	147ffe04 	addi	r17,r2,-8
    cb18:	1907c83a 	sub	r3,r3,r4
    cb1c:	8460983a 	sll	r16,r16,r17
    cb20:	98c6d83a 	srl	r3,r19,r3
    cb24:	9c64983a 	sll	r18,r19,r17
    cb28:	1c20b03a 	or	r16,r3,r16
    cb2c:	1080fcc4 	addi	r2,r2,1011
    cb30:	00abc83a 	sub	r21,zero,r2
    cb34:	0027883a 	mov	r19,zero
    cb38:	0013883a 	mov	r9,zero
    cb3c:	003f9106 	br	c984 <__alt_data_end+0xff00c984>
    cb40:	3446b03a 	or	r3,r6,r17
    cb44:	18001f1e 	bne	r3,zero,cbc4 <__divdf3+0x2b8>
    cb48:	0023883a 	mov	r17,zero
    cb4c:	0011883a 	mov	r8,zero
    cb50:	01c00084 	movi	r7,2
    cb54:	003f9d06 	br	c9cc <__alt_data_end+0xff00c9cc>
    cb58:	3446b03a 	or	r3,r6,r17
    cb5c:	18001526 	beq	r3,zero,cbb4 <__divdf3+0x2a8>
    cb60:	88011b26 	beq	r17,zero,cfd0 <__divdf3+0x6c4>
    cb64:	8809883a 	mov	r4,r17
    cb68:	d9800315 	stw	r6,12(sp)
    cb6c:	da400115 	stw	r9,4(sp)
    cb70:	000e6640 	call	e664 <__clzsi2>
    cb74:	d9800317 	ldw	r6,12(sp)
    cb78:	da400117 	ldw	r9,4(sp)
    cb7c:	113ffd44 	addi	r4,r2,-11
    cb80:	00c00704 	movi	r3,28
    cb84:	19010e16 	blt	r3,r4,cfc0 <__divdf3+0x6b4>
    cb88:	00c00744 	movi	r3,29
    cb8c:	123ffe04 	addi	r8,r2,-8
    cb90:	1907c83a 	sub	r3,r3,r4
    cb94:	8a22983a 	sll	r17,r17,r8
    cb98:	30c6d83a 	srl	r3,r6,r3
    cb9c:	3210983a 	sll	r8,r6,r8
    cba0:	1c62b03a 	or	r17,r3,r17
    cba4:	1080fcc4 	addi	r2,r2,1011
    cba8:	0085c83a 	sub	r2,zero,r2
    cbac:	000f883a 	mov	r7,zero
    cbb0:	003f8606 	br	c9cc <__alt_data_end+0xff00c9cc>
    cbb4:	0023883a 	mov	r17,zero
    cbb8:	0011883a 	mov	r8,zero
    cbbc:	01c00044 	movi	r7,1
    cbc0:	003f8206 	br	c9cc <__alt_data_end+0xff00c9cc>
    cbc4:	01c000c4 	movi	r7,3
    cbc8:	003f8006 	br	c9cc <__alt_data_end+0xff00c9cc>
    cbcc:	04c00104 	movi	r19,4
    cbd0:	0021883a 	mov	r16,zero
    cbd4:	0025883a 	mov	r18,zero
    cbd8:	02400044 	movi	r9,1
    cbdc:	003f6906 	br	c984 <__alt_data_end+0xff00c984>
    cbe0:	04c00304 	movi	r19,12
    cbe4:	024000c4 	movi	r9,3
    cbe8:	003f6606 	br	c984 <__alt_data_end+0xff00c984>
    cbec:	01400434 	movhi	r5,16
    cbf0:	0007883a 	mov	r3,zero
    cbf4:	297fffc4 	addi	r5,r5,-1
    cbf8:	04bfffc4 	movi	r18,-1
    cbfc:	0081ffc4 	movi	r2,2047
    cc00:	003fa106 	br	ca88 <__alt_data_end+0xff00ca88>
    cc04:	00c00044 	movi	r3,1
    cc08:	1887c83a 	sub	r3,r3,r2
    cc0c:	01000e04 	movi	r4,56
    cc10:	20c1210e 	bge	r4,r3,d098 <__divdf3+0x78c>
    cc14:	98c0004c 	andi	r3,r19,1
    cc18:	0005883a 	mov	r2,zero
    cc1c:	000b883a 	mov	r5,zero
    cc20:	0025883a 	mov	r18,zero
    cc24:	003f9806 	br	ca88 <__alt_data_end+0xff00ca88>
    cc28:	8c00fd36 	bltu	r17,r16,d020 <__divdf3+0x714>
    cc2c:	8440fb26 	beq	r16,r17,d01c <__divdf3+0x710>
    cc30:	8007883a 	mov	r3,r16
    cc34:	ad7fffc4 	addi	r21,r21,-1
    cc38:	0021883a 	mov	r16,zero
    cc3c:	4004d63a 	srli	r2,r8,24
    cc40:	8822923a 	slli	r17,r17,8
    cc44:	1809883a 	mov	r4,r3
    cc48:	402c923a 	slli	r22,r8,8
    cc4c:	88b8b03a 	or	fp,r17,r2
    cc50:	e028d43a 	srli	r20,fp,16
    cc54:	d8c00015 	stw	r3,0(sp)
    cc58:	e5ffffcc 	andi	r23,fp,65535
    cc5c:	a00b883a 	mov	r5,r20
    cc60:	000bfa40 	call	bfa4 <__udivsi3>
    cc64:	d8c00017 	ldw	r3,0(sp)
    cc68:	a00b883a 	mov	r5,r20
    cc6c:	d8800315 	stw	r2,12(sp)
    cc70:	1809883a 	mov	r4,r3
    cc74:	000c0080 	call	c008 <__umodsi3>
    cc78:	d9800317 	ldw	r6,12(sp)
    cc7c:	1006943a 	slli	r3,r2,16
    cc80:	9004d43a 	srli	r2,r18,16
    cc84:	b9a3383a 	mul	r17,r23,r6
    cc88:	10c4b03a 	or	r2,r2,r3
    cc8c:	1440062e 	bgeu	r2,r17,cca8 <__divdf3+0x39c>
    cc90:	1705883a 	add	r2,r2,fp
    cc94:	30ffffc4 	addi	r3,r6,-1
    cc98:	1700ee36 	bltu	r2,fp,d054 <__divdf3+0x748>
    cc9c:	1440ed2e 	bgeu	r2,r17,d054 <__divdf3+0x748>
    cca0:	31bfff84 	addi	r6,r6,-2
    cca4:	1705883a 	add	r2,r2,fp
    cca8:	1463c83a 	sub	r17,r2,r17
    ccac:	a00b883a 	mov	r5,r20
    ccb0:	8809883a 	mov	r4,r17
    ccb4:	d9800315 	stw	r6,12(sp)
    ccb8:	000bfa40 	call	bfa4 <__udivsi3>
    ccbc:	a00b883a 	mov	r5,r20
    ccc0:	8809883a 	mov	r4,r17
    ccc4:	d8800215 	stw	r2,8(sp)
    ccc8:	000c0080 	call	c008 <__umodsi3>
    cccc:	d9c00217 	ldw	r7,8(sp)
    ccd0:	1004943a 	slli	r2,r2,16
    ccd4:	94bfffcc 	andi	r18,r18,65535
    ccd8:	b9d1383a 	mul	r8,r23,r7
    ccdc:	90a4b03a 	or	r18,r18,r2
    cce0:	d9800317 	ldw	r6,12(sp)
    cce4:	9200062e 	bgeu	r18,r8,cd00 <__divdf3+0x3f4>
    cce8:	9725883a 	add	r18,r18,fp
    ccec:	38bfffc4 	addi	r2,r7,-1
    ccf0:	9700d636 	bltu	r18,fp,d04c <__divdf3+0x740>
    ccf4:	9200d52e 	bgeu	r18,r8,d04c <__divdf3+0x740>
    ccf8:	39ffff84 	addi	r7,r7,-2
    ccfc:	9725883a 	add	r18,r18,fp
    cd00:	3004943a 	slli	r2,r6,16
    cd04:	b012d43a 	srli	r9,r22,16
    cd08:	b1bfffcc 	andi	r6,r22,65535
    cd0c:	11e2b03a 	or	r17,r2,r7
    cd10:	8806d43a 	srli	r3,r17,16
    cd14:	893fffcc 	andi	r4,r17,65535
    cd18:	218b383a 	mul	r5,r4,r6
    cd1c:	30c5383a 	mul	r2,r6,r3
    cd20:	2249383a 	mul	r4,r4,r9
    cd24:	280ed43a 	srli	r7,r5,16
    cd28:	9225c83a 	sub	r18,r18,r8
    cd2c:	2089883a 	add	r4,r4,r2
    cd30:	3909883a 	add	r4,r7,r4
    cd34:	1a47383a 	mul	r3,r3,r9
    cd38:	2080022e 	bgeu	r4,r2,cd44 <__divdf3+0x438>
    cd3c:	00800074 	movhi	r2,1
    cd40:	1887883a 	add	r3,r3,r2
    cd44:	2004d43a 	srli	r2,r4,16
    cd48:	2008943a 	slli	r4,r4,16
    cd4c:	297fffcc 	andi	r5,r5,65535
    cd50:	10c7883a 	add	r3,r2,r3
    cd54:	2149883a 	add	r4,r4,r5
    cd58:	90c0a536 	bltu	r18,r3,cff0 <__divdf3+0x6e4>
    cd5c:	90c0bf26 	beq	r18,r3,d05c <__divdf3+0x750>
    cd60:	90c7c83a 	sub	r3,r18,r3
    cd64:	810fc83a 	sub	r7,r16,r4
    cd68:	81e5803a 	cmpltu	r18,r16,r7
    cd6c:	1ca5c83a 	sub	r18,r3,r18
    cd70:	e480c126 	beq	fp,r18,d078 <__divdf3+0x76c>
    cd74:	a00b883a 	mov	r5,r20
    cd78:	9009883a 	mov	r4,r18
    cd7c:	d9800315 	stw	r6,12(sp)
    cd80:	d9c00215 	stw	r7,8(sp)
    cd84:	da400115 	stw	r9,4(sp)
    cd88:	000bfa40 	call	bfa4 <__udivsi3>
    cd8c:	a00b883a 	mov	r5,r20
    cd90:	9009883a 	mov	r4,r18
    cd94:	d8800015 	stw	r2,0(sp)
    cd98:	000c0080 	call	c008 <__umodsi3>
    cd9c:	d9c00217 	ldw	r7,8(sp)
    cda0:	da000017 	ldw	r8,0(sp)
    cda4:	1006943a 	slli	r3,r2,16
    cda8:	3804d43a 	srli	r2,r7,16
    cdac:	ba21383a 	mul	r16,r23,r8
    cdb0:	d9800317 	ldw	r6,12(sp)
    cdb4:	10c4b03a 	or	r2,r2,r3
    cdb8:	da400117 	ldw	r9,4(sp)
    cdbc:	1400062e 	bgeu	r2,r16,cdd8 <__divdf3+0x4cc>
    cdc0:	1705883a 	add	r2,r2,fp
    cdc4:	40ffffc4 	addi	r3,r8,-1
    cdc8:	1700ad36 	bltu	r2,fp,d080 <__divdf3+0x774>
    cdcc:	1400ac2e 	bgeu	r2,r16,d080 <__divdf3+0x774>
    cdd0:	423fff84 	addi	r8,r8,-2
    cdd4:	1705883a 	add	r2,r2,fp
    cdd8:	1421c83a 	sub	r16,r2,r16
    cddc:	a00b883a 	mov	r5,r20
    cde0:	8009883a 	mov	r4,r16
    cde4:	d9800315 	stw	r6,12(sp)
    cde8:	d9c00215 	stw	r7,8(sp)
    cdec:	da000015 	stw	r8,0(sp)
    cdf0:	da400115 	stw	r9,4(sp)
    cdf4:	000bfa40 	call	bfa4 <__udivsi3>
    cdf8:	8009883a 	mov	r4,r16
    cdfc:	a00b883a 	mov	r5,r20
    ce00:	1025883a 	mov	r18,r2
    ce04:	000c0080 	call	c008 <__umodsi3>
    ce08:	d9c00217 	ldw	r7,8(sp)
    ce0c:	1004943a 	slli	r2,r2,16
    ce10:	bcaf383a 	mul	r23,r23,r18
    ce14:	393fffcc 	andi	r4,r7,65535
    ce18:	2088b03a 	or	r4,r4,r2
    ce1c:	d9800317 	ldw	r6,12(sp)
    ce20:	da000017 	ldw	r8,0(sp)
    ce24:	da400117 	ldw	r9,4(sp)
    ce28:	25c0062e 	bgeu	r4,r23,ce44 <__divdf3+0x538>
    ce2c:	2709883a 	add	r4,r4,fp
    ce30:	90bfffc4 	addi	r2,r18,-1
    ce34:	27009436 	bltu	r4,fp,d088 <__divdf3+0x77c>
    ce38:	25c0932e 	bgeu	r4,r23,d088 <__divdf3+0x77c>
    ce3c:	94bfff84 	addi	r18,r18,-2
    ce40:	2709883a 	add	r4,r4,fp
    ce44:	4004943a 	slli	r2,r8,16
    ce48:	25efc83a 	sub	r23,r4,r23
    ce4c:	1490b03a 	or	r8,r2,r18
    ce50:	4008d43a 	srli	r4,r8,16
    ce54:	40ffffcc 	andi	r3,r8,65535
    ce58:	30c5383a 	mul	r2,r6,r3
    ce5c:	1a47383a 	mul	r3,r3,r9
    ce60:	310d383a 	mul	r6,r6,r4
    ce64:	100ad43a 	srli	r5,r2,16
    ce68:	4913383a 	mul	r9,r9,r4
    ce6c:	1987883a 	add	r3,r3,r6
    ce70:	28c7883a 	add	r3,r5,r3
    ce74:	1980022e 	bgeu	r3,r6,ce80 <__divdf3+0x574>
    ce78:	01000074 	movhi	r4,1
    ce7c:	4913883a 	add	r9,r9,r4
    ce80:	1808d43a 	srli	r4,r3,16
    ce84:	1806943a 	slli	r3,r3,16
    ce88:	10bfffcc 	andi	r2,r2,65535
    ce8c:	2253883a 	add	r9,r4,r9
    ce90:	1887883a 	add	r3,r3,r2
    ce94:	ba403836 	bltu	r23,r9,cf78 <__divdf3+0x66c>
    ce98:	ba403626 	beq	r23,r9,cf74 <__divdf3+0x668>
    ce9c:	42000054 	ori	r8,r8,1
    cea0:	a880ffc4 	addi	r2,r21,1023
    cea4:	00bf570e 	bge	zero,r2,cc04 <__alt_data_end+0xff00cc04>
    cea8:	40c001cc 	andi	r3,r8,7
    ceac:	18000726 	beq	r3,zero,cecc <__divdf3+0x5c0>
    ceb0:	40c003cc 	andi	r3,r8,15
    ceb4:	01000104 	movi	r4,4
    ceb8:	19000426 	beq	r3,r4,cecc <__divdf3+0x5c0>
    cebc:	4107883a 	add	r3,r8,r4
    cec0:	1a11803a 	cmpltu	r8,r3,r8
    cec4:	8a23883a 	add	r17,r17,r8
    cec8:	1811883a 	mov	r8,r3
    cecc:	88c0402c 	andhi	r3,r17,256
    ced0:	18000426 	beq	r3,zero,cee4 <__divdf3+0x5d8>
    ced4:	00ffc034 	movhi	r3,65280
    ced8:	18ffffc4 	addi	r3,r3,-1
    cedc:	a8810004 	addi	r2,r21,1024
    cee0:	88e2703a 	and	r17,r17,r3
    cee4:	00c1ff84 	movi	r3,2046
    cee8:	18bee316 	blt	r3,r2,ca78 <__alt_data_end+0xff00ca78>
    ceec:	8824977a 	slli	r18,r17,29
    cef0:	4010d0fa 	srli	r8,r8,3
    cef4:	8822927a 	slli	r17,r17,9
    cef8:	1081ffcc 	andi	r2,r2,2047
    cefc:	9224b03a 	or	r18,r18,r8
    cf00:	880ad33a 	srli	r5,r17,12
    cf04:	98c0004c 	andi	r3,r19,1
    cf08:	003edf06 	br	ca88 <__alt_data_end+0xff00ca88>
    cf0c:	8080022c 	andhi	r2,r16,8
    cf10:	10001226 	beq	r2,zero,cf5c <__divdf3+0x650>
    cf14:	8880022c 	andhi	r2,r17,8
    cf18:	1000101e 	bne	r2,zero,cf5c <__divdf3+0x650>
    cf1c:	00800434 	movhi	r2,16
    cf20:	89400234 	orhi	r5,r17,8
    cf24:	10bfffc4 	addi	r2,r2,-1
    cf28:	b007883a 	mov	r3,r22
    cf2c:	288a703a 	and	r5,r5,r2
    cf30:	4025883a 	mov	r18,r8
    cf34:	003f3106 	br	cbfc <__alt_data_end+0xff00cbfc>
    cf38:	008000c4 	movi	r2,3
    cf3c:	3880a626 	beq	r7,r2,d1d8 <__divdf3+0x8cc>
    cf40:	00800044 	movi	r2,1
    cf44:	3880521e 	bne	r7,r2,d090 <__divdf3+0x784>
    cf48:	b807883a 	mov	r3,r23
    cf4c:	0005883a 	mov	r2,zero
    cf50:	000b883a 	mov	r5,zero
    cf54:	0025883a 	mov	r18,zero
    cf58:	003ecb06 	br	ca88 <__alt_data_end+0xff00ca88>
    cf5c:	00800434 	movhi	r2,16
    cf60:	81400234 	orhi	r5,r16,8
    cf64:	10bfffc4 	addi	r2,r2,-1
    cf68:	a007883a 	mov	r3,r20
    cf6c:	288a703a 	and	r5,r5,r2
    cf70:	003f2206 	br	cbfc <__alt_data_end+0xff00cbfc>
    cf74:	183fca26 	beq	r3,zero,cea0 <__alt_data_end+0xff00cea0>
    cf78:	e5ef883a 	add	r23,fp,r23
    cf7c:	40bfffc4 	addi	r2,r8,-1
    cf80:	bf00392e 	bgeu	r23,fp,d068 <__divdf3+0x75c>
    cf84:	1011883a 	mov	r8,r2
    cf88:	ba7fc41e 	bne	r23,r9,ce9c <__alt_data_end+0xff00ce9c>
    cf8c:	b0ffc31e 	bne	r22,r3,ce9c <__alt_data_end+0xff00ce9c>
    cf90:	003fc306 	br	cea0 <__alt_data_end+0xff00cea0>
    cf94:	143ff604 	addi	r16,r2,-40
    cf98:	9c20983a 	sll	r16,r19,r16
    cf9c:	0025883a 	mov	r18,zero
    cfa0:	003ee206 	br	cb2c <__alt_data_end+0xff00cb2c>
    cfa4:	d9800315 	stw	r6,12(sp)
    cfa8:	d9c00215 	stw	r7,8(sp)
    cfac:	000e6640 	call	e664 <__clzsi2>
    cfb0:	10800804 	addi	r2,r2,32
    cfb4:	d9c00217 	ldw	r7,8(sp)
    cfb8:	d9800317 	ldw	r6,12(sp)
    cfbc:	003ed106 	br	cb04 <__alt_data_end+0xff00cb04>
    cfc0:	147ff604 	addi	r17,r2,-40
    cfc4:	3462983a 	sll	r17,r6,r17
    cfc8:	0011883a 	mov	r8,zero
    cfcc:	003ef506 	br	cba4 <__alt_data_end+0xff00cba4>
    cfd0:	3009883a 	mov	r4,r6
    cfd4:	d9800315 	stw	r6,12(sp)
    cfd8:	da400115 	stw	r9,4(sp)
    cfdc:	000e6640 	call	e664 <__clzsi2>
    cfe0:	10800804 	addi	r2,r2,32
    cfe4:	da400117 	ldw	r9,4(sp)
    cfe8:	d9800317 	ldw	r6,12(sp)
    cfec:	003ee306 	br	cb7c <__alt_data_end+0xff00cb7c>
    cff0:	85a1883a 	add	r16,r16,r22
    cff4:	8585803a 	cmpltu	r2,r16,r22
    cff8:	1705883a 	add	r2,r2,fp
    cffc:	14a5883a 	add	r18,r2,r18
    d000:	88bfffc4 	addi	r2,r17,-1
    d004:	e4800c2e 	bgeu	fp,r18,d038 <__divdf3+0x72c>
    d008:	90c03e36 	bltu	r18,r3,d104 <__divdf3+0x7f8>
    d00c:	1c806926 	beq	r3,r18,d1b4 <__divdf3+0x8a8>
    d010:	90c7c83a 	sub	r3,r18,r3
    d014:	1023883a 	mov	r17,r2
    d018:	003f5206 	br	cd64 <__alt_data_end+0xff00cd64>
    d01c:	923f0436 	bltu	r18,r8,cc30 <__alt_data_end+0xff00cc30>
    d020:	800897fa 	slli	r4,r16,31
    d024:	9004d07a 	srli	r2,r18,1
    d028:	8006d07a 	srli	r3,r16,1
    d02c:	902097fa 	slli	r16,r18,31
    d030:	20a4b03a 	or	r18,r4,r2
    d034:	003f0106 	br	cc3c <__alt_data_end+0xff00cc3c>
    d038:	e4bff51e 	bne	fp,r18,d010 <__alt_data_end+0xff00d010>
    d03c:	85bff22e 	bgeu	r16,r22,d008 <__alt_data_end+0xff00d008>
    d040:	e0c7c83a 	sub	r3,fp,r3
    d044:	1023883a 	mov	r17,r2
    d048:	003f4606 	br	cd64 <__alt_data_end+0xff00cd64>
    d04c:	100f883a 	mov	r7,r2
    d050:	003f2b06 	br	cd00 <__alt_data_end+0xff00cd00>
    d054:	180d883a 	mov	r6,r3
    d058:	003f1306 	br	cca8 <__alt_data_end+0xff00cca8>
    d05c:	813fe436 	bltu	r16,r4,cff0 <__alt_data_end+0xff00cff0>
    d060:	0007883a 	mov	r3,zero
    d064:	003f3f06 	br	cd64 <__alt_data_end+0xff00cd64>
    d068:	ba402c36 	bltu	r23,r9,d11c <__divdf3+0x810>
    d06c:	4dc05426 	beq	r9,r23,d1c0 <__divdf3+0x8b4>
    d070:	1011883a 	mov	r8,r2
    d074:	003f8906 	br	ce9c <__alt_data_end+0xff00ce9c>
    d078:	023fffc4 	movi	r8,-1
    d07c:	003f8806 	br	cea0 <__alt_data_end+0xff00cea0>
    d080:	1811883a 	mov	r8,r3
    d084:	003f5406 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d088:	1025883a 	mov	r18,r2
    d08c:	003f6d06 	br	ce44 <__alt_data_end+0xff00ce44>
    d090:	b827883a 	mov	r19,r23
    d094:	003f8206 	br	cea0 <__alt_data_end+0xff00cea0>
    d098:	010007c4 	movi	r4,31
    d09c:	20c02616 	blt	r4,r3,d138 <__divdf3+0x82c>
    d0a0:	00800804 	movi	r2,32
    d0a4:	10c5c83a 	sub	r2,r2,r3
    d0a8:	888a983a 	sll	r5,r17,r2
    d0ac:	40c8d83a 	srl	r4,r8,r3
    d0b0:	4084983a 	sll	r2,r8,r2
    d0b4:	88e2d83a 	srl	r17,r17,r3
    d0b8:	2906b03a 	or	r3,r5,r4
    d0bc:	1004c03a 	cmpne	r2,r2,zero
    d0c0:	1886b03a 	or	r3,r3,r2
    d0c4:	188001cc 	andi	r2,r3,7
    d0c8:	10000726 	beq	r2,zero,d0e8 <__divdf3+0x7dc>
    d0cc:	188003cc 	andi	r2,r3,15
    d0d0:	01000104 	movi	r4,4
    d0d4:	11000426 	beq	r2,r4,d0e8 <__divdf3+0x7dc>
    d0d8:	1805883a 	mov	r2,r3
    d0dc:	10c00104 	addi	r3,r2,4
    d0e0:	1885803a 	cmpltu	r2,r3,r2
    d0e4:	88a3883a 	add	r17,r17,r2
    d0e8:	8880202c 	andhi	r2,r17,128
    d0ec:	10002726 	beq	r2,zero,d18c <__divdf3+0x880>
    d0f0:	98c0004c 	andi	r3,r19,1
    d0f4:	00800044 	movi	r2,1
    d0f8:	000b883a 	mov	r5,zero
    d0fc:	0025883a 	mov	r18,zero
    d100:	003e6106 	br	ca88 <__alt_data_end+0xff00ca88>
    d104:	85a1883a 	add	r16,r16,r22
    d108:	8585803a 	cmpltu	r2,r16,r22
    d10c:	1705883a 	add	r2,r2,fp
    d110:	14a5883a 	add	r18,r2,r18
    d114:	8c7fff84 	addi	r17,r17,-2
    d118:	003f1106 	br	cd60 <__alt_data_end+0xff00cd60>
    d11c:	b589883a 	add	r4,r22,r22
    d120:	25ad803a 	cmpltu	r22,r4,r22
    d124:	b739883a 	add	fp,r22,fp
    d128:	40bfff84 	addi	r2,r8,-2
    d12c:	bf2f883a 	add	r23,r23,fp
    d130:	202d883a 	mov	r22,r4
    d134:	003f9306 	br	cf84 <__alt_data_end+0xff00cf84>
    d138:	013ff844 	movi	r4,-31
    d13c:	2085c83a 	sub	r2,r4,r2
    d140:	8888d83a 	srl	r4,r17,r2
    d144:	00800804 	movi	r2,32
    d148:	18802126 	beq	r3,r2,d1d0 <__divdf3+0x8c4>
    d14c:	00801004 	movi	r2,64
    d150:	10c5c83a 	sub	r2,r2,r3
    d154:	8884983a 	sll	r2,r17,r2
    d158:	1204b03a 	or	r2,r2,r8
    d15c:	1004c03a 	cmpne	r2,r2,zero
    d160:	2084b03a 	or	r2,r4,r2
    d164:	144001cc 	andi	r17,r2,7
    d168:	88000d1e 	bne	r17,zero,d1a0 <__divdf3+0x894>
    d16c:	000b883a 	mov	r5,zero
    d170:	1024d0fa 	srli	r18,r2,3
    d174:	98c0004c 	andi	r3,r19,1
    d178:	0005883a 	mov	r2,zero
    d17c:	9464b03a 	or	r18,r18,r17
    d180:	003e4106 	br	ca88 <__alt_data_end+0xff00ca88>
    d184:	1007883a 	mov	r3,r2
    d188:	0023883a 	mov	r17,zero
    d18c:	880a927a 	slli	r5,r17,9
    d190:	1805883a 	mov	r2,r3
    d194:	8822977a 	slli	r17,r17,29
    d198:	280ad33a 	srli	r5,r5,12
    d19c:	003ff406 	br	d170 <__alt_data_end+0xff00d170>
    d1a0:	10c003cc 	andi	r3,r2,15
    d1a4:	01000104 	movi	r4,4
    d1a8:	193ff626 	beq	r3,r4,d184 <__alt_data_end+0xff00d184>
    d1ac:	0023883a 	mov	r17,zero
    d1b0:	003fca06 	br	d0dc <__alt_data_end+0xff00d0dc>
    d1b4:	813fd336 	bltu	r16,r4,d104 <__alt_data_end+0xff00d104>
    d1b8:	1023883a 	mov	r17,r2
    d1bc:	003fa806 	br	d060 <__alt_data_end+0xff00d060>
    d1c0:	b0ffd636 	bltu	r22,r3,d11c <__alt_data_end+0xff00d11c>
    d1c4:	1011883a 	mov	r8,r2
    d1c8:	b0ff341e 	bne	r22,r3,ce9c <__alt_data_end+0xff00ce9c>
    d1cc:	003f3406 	br	cea0 <__alt_data_end+0xff00cea0>
    d1d0:	0005883a 	mov	r2,zero
    d1d4:	003fe006 	br	d158 <__alt_data_end+0xff00d158>
    d1d8:	00800434 	movhi	r2,16
    d1dc:	89400234 	orhi	r5,r17,8
    d1e0:	10bfffc4 	addi	r2,r2,-1
    d1e4:	b807883a 	mov	r3,r23
    d1e8:	288a703a 	and	r5,r5,r2
    d1ec:	4025883a 	mov	r18,r8
    d1f0:	003e8206 	br	cbfc <__alt_data_end+0xff00cbfc>

0000d1f4 <__eqdf2>:
    d1f4:	2804d53a 	srli	r2,r5,20
    d1f8:	3806d53a 	srli	r3,r7,20
    d1fc:	02000434 	movhi	r8,16
    d200:	423fffc4 	addi	r8,r8,-1
    d204:	1081ffcc 	andi	r2,r2,2047
    d208:	0281ffc4 	movi	r10,2047
    d20c:	2a12703a 	and	r9,r5,r8
    d210:	18c1ffcc 	andi	r3,r3,2047
    d214:	3a10703a 	and	r8,r7,r8
    d218:	280ad7fa 	srli	r5,r5,31
    d21c:	380ed7fa 	srli	r7,r7,31
    d220:	12801026 	beq	r2,r10,d264 <__eqdf2+0x70>
    d224:	0281ffc4 	movi	r10,2047
    d228:	1a800a26 	beq	r3,r10,d254 <__eqdf2+0x60>
    d22c:	10c00226 	beq	r2,r3,d238 <__eqdf2+0x44>
    d230:	00800044 	movi	r2,1
    d234:	f800283a 	ret
    d238:	4a3ffd1e 	bne	r9,r8,d230 <__alt_data_end+0xff00d230>
    d23c:	21bffc1e 	bne	r4,r6,d230 <__alt_data_end+0xff00d230>
    d240:	29c00c26 	beq	r5,r7,d274 <__eqdf2+0x80>
    d244:	103ffa1e 	bne	r2,zero,d230 <__alt_data_end+0xff00d230>
    d248:	2244b03a 	or	r2,r4,r9
    d24c:	1004c03a 	cmpne	r2,r2,zero
    d250:	f800283a 	ret
    d254:	3214b03a 	or	r10,r6,r8
    d258:	503ff426 	beq	r10,zero,d22c <__alt_data_end+0xff00d22c>
    d25c:	00800044 	movi	r2,1
    d260:	f800283a 	ret
    d264:	2254b03a 	or	r10,r4,r9
    d268:	503fee26 	beq	r10,zero,d224 <__alt_data_end+0xff00d224>
    d26c:	00800044 	movi	r2,1
    d270:	f800283a 	ret
    d274:	0005883a 	mov	r2,zero
    d278:	f800283a 	ret

0000d27c <__gedf2>:
    d27c:	2804d53a 	srli	r2,r5,20
    d280:	3806d53a 	srli	r3,r7,20
    d284:	02000434 	movhi	r8,16
    d288:	423fffc4 	addi	r8,r8,-1
    d28c:	1081ffcc 	andi	r2,r2,2047
    d290:	0241ffc4 	movi	r9,2047
    d294:	2a14703a 	and	r10,r5,r8
    d298:	18c1ffcc 	andi	r3,r3,2047
    d29c:	3a10703a 	and	r8,r7,r8
    d2a0:	280ad7fa 	srli	r5,r5,31
    d2a4:	380ed7fa 	srli	r7,r7,31
    d2a8:	12401d26 	beq	r2,r9,d320 <__gedf2+0xa4>
    d2ac:	0241ffc4 	movi	r9,2047
    d2b0:	1a401226 	beq	r3,r9,d2fc <__gedf2+0x80>
    d2b4:	1000081e 	bne	r2,zero,d2d8 <__gedf2+0x5c>
    d2b8:	2296b03a 	or	r11,r4,r10
    d2bc:	5813003a 	cmpeq	r9,r11,zero
    d2c0:	1800091e 	bne	r3,zero,d2e8 <__gedf2+0x6c>
    d2c4:	3218b03a 	or	r12,r6,r8
    d2c8:	6000071e 	bne	r12,zero,d2e8 <__gedf2+0x6c>
    d2cc:	0005883a 	mov	r2,zero
    d2d0:	5800101e 	bne	r11,zero,d314 <__gedf2+0x98>
    d2d4:	f800283a 	ret
    d2d8:	18000c1e 	bne	r3,zero,d30c <__gedf2+0x90>
    d2dc:	3212b03a 	or	r9,r6,r8
    d2e0:	48000c26 	beq	r9,zero,d314 <__gedf2+0x98>
    d2e4:	0013883a 	mov	r9,zero
    d2e8:	39c03fcc 	andi	r7,r7,255
    d2ec:	48000826 	beq	r9,zero,d310 <__gedf2+0x94>
    d2f0:	38000926 	beq	r7,zero,d318 <__gedf2+0x9c>
    d2f4:	00800044 	movi	r2,1
    d2f8:	f800283a 	ret
    d2fc:	3212b03a 	or	r9,r6,r8
    d300:	483fec26 	beq	r9,zero,d2b4 <__alt_data_end+0xff00d2b4>
    d304:	00bfff84 	movi	r2,-2
    d308:	f800283a 	ret
    d30c:	39c03fcc 	andi	r7,r7,255
    d310:	29c00626 	beq	r5,r7,d32c <__gedf2+0xb0>
    d314:	283ff726 	beq	r5,zero,d2f4 <__alt_data_end+0xff00d2f4>
    d318:	00bfffc4 	movi	r2,-1
    d31c:	f800283a 	ret
    d320:	2292b03a 	or	r9,r4,r10
    d324:	483fe126 	beq	r9,zero,d2ac <__alt_data_end+0xff00d2ac>
    d328:	003ff606 	br	d304 <__alt_data_end+0xff00d304>
    d32c:	18bff916 	blt	r3,r2,d314 <__alt_data_end+0xff00d314>
    d330:	10c00316 	blt	r2,r3,d340 <__gedf2+0xc4>
    d334:	42bff736 	bltu	r8,r10,d314 <__alt_data_end+0xff00d314>
    d338:	52000326 	beq	r10,r8,d348 <__gedf2+0xcc>
    d33c:	5200042e 	bgeu	r10,r8,d350 <__gedf2+0xd4>
    d340:	283fec1e 	bne	r5,zero,d2f4 <__alt_data_end+0xff00d2f4>
    d344:	003ff406 	br	d318 <__alt_data_end+0xff00d318>
    d348:	313ff236 	bltu	r6,r4,d314 <__alt_data_end+0xff00d314>
    d34c:	21bffc36 	bltu	r4,r6,d340 <__alt_data_end+0xff00d340>
    d350:	0005883a 	mov	r2,zero
    d354:	f800283a 	ret

0000d358 <__ledf2>:
    d358:	2804d53a 	srli	r2,r5,20
    d35c:	3810d53a 	srli	r8,r7,20
    d360:	00c00434 	movhi	r3,16
    d364:	18ffffc4 	addi	r3,r3,-1
    d368:	1081ffcc 	andi	r2,r2,2047
    d36c:	0241ffc4 	movi	r9,2047
    d370:	28d4703a 	and	r10,r5,r3
    d374:	4201ffcc 	andi	r8,r8,2047
    d378:	38c6703a 	and	r3,r7,r3
    d37c:	280ad7fa 	srli	r5,r5,31
    d380:	380ed7fa 	srli	r7,r7,31
    d384:	12401f26 	beq	r2,r9,d404 <__ledf2+0xac>
    d388:	0241ffc4 	movi	r9,2047
    d38c:	42401426 	beq	r8,r9,d3e0 <__ledf2+0x88>
    d390:	1000091e 	bne	r2,zero,d3b8 <__ledf2+0x60>
    d394:	2296b03a 	or	r11,r4,r10
    d398:	5813003a 	cmpeq	r9,r11,zero
    d39c:	29403fcc 	andi	r5,r5,255
    d3a0:	40000a1e 	bne	r8,zero,d3cc <__ledf2+0x74>
    d3a4:	30d8b03a 	or	r12,r6,r3
    d3a8:	6000081e 	bne	r12,zero,d3cc <__ledf2+0x74>
    d3ac:	0005883a 	mov	r2,zero
    d3b0:	5800111e 	bne	r11,zero,d3f8 <__ledf2+0xa0>
    d3b4:	f800283a 	ret
    d3b8:	29403fcc 	andi	r5,r5,255
    d3bc:	40000c1e 	bne	r8,zero,d3f0 <__ledf2+0x98>
    d3c0:	30d2b03a 	or	r9,r6,r3
    d3c4:	48000c26 	beq	r9,zero,d3f8 <__ledf2+0xa0>
    d3c8:	0013883a 	mov	r9,zero
    d3cc:	39c03fcc 	andi	r7,r7,255
    d3d0:	48000826 	beq	r9,zero,d3f4 <__ledf2+0x9c>
    d3d4:	38001126 	beq	r7,zero,d41c <__ledf2+0xc4>
    d3d8:	00800044 	movi	r2,1
    d3dc:	f800283a 	ret
    d3e0:	30d2b03a 	or	r9,r6,r3
    d3e4:	483fea26 	beq	r9,zero,d390 <__alt_data_end+0xff00d390>
    d3e8:	00800084 	movi	r2,2
    d3ec:	f800283a 	ret
    d3f0:	39c03fcc 	andi	r7,r7,255
    d3f4:	39400726 	beq	r7,r5,d414 <__ledf2+0xbc>
    d3f8:	2800081e 	bne	r5,zero,d41c <__ledf2+0xc4>
    d3fc:	00800044 	movi	r2,1
    d400:	f800283a 	ret
    d404:	2292b03a 	or	r9,r4,r10
    d408:	483fdf26 	beq	r9,zero,d388 <__alt_data_end+0xff00d388>
    d40c:	00800084 	movi	r2,2
    d410:	f800283a 	ret
    d414:	4080030e 	bge	r8,r2,d424 <__ledf2+0xcc>
    d418:	383fef26 	beq	r7,zero,d3d8 <__alt_data_end+0xff00d3d8>
    d41c:	00bfffc4 	movi	r2,-1
    d420:	f800283a 	ret
    d424:	123feb16 	blt	r2,r8,d3d4 <__alt_data_end+0xff00d3d4>
    d428:	1abff336 	bltu	r3,r10,d3f8 <__alt_data_end+0xff00d3f8>
    d42c:	50c00326 	beq	r10,r3,d43c <__ledf2+0xe4>
    d430:	50c0042e 	bgeu	r10,r3,d444 <__ledf2+0xec>
    d434:	283fe81e 	bne	r5,zero,d3d8 <__alt_data_end+0xff00d3d8>
    d438:	003ff806 	br	d41c <__alt_data_end+0xff00d41c>
    d43c:	313fee36 	bltu	r6,r4,d3f8 <__alt_data_end+0xff00d3f8>
    d440:	21bffc36 	bltu	r4,r6,d434 <__alt_data_end+0xff00d434>
    d444:	0005883a 	mov	r2,zero
    d448:	f800283a 	ret

0000d44c <__muldf3>:
    d44c:	defff304 	addi	sp,sp,-52
    d450:	2804d53a 	srli	r2,r5,20
    d454:	dd800915 	stw	r22,36(sp)
    d458:	282cd7fa 	srli	r22,r5,31
    d45c:	dc000315 	stw	r16,12(sp)
    d460:	04000434 	movhi	r16,16
    d464:	dd400815 	stw	r21,32(sp)
    d468:	dc800515 	stw	r18,20(sp)
    d46c:	843fffc4 	addi	r16,r16,-1
    d470:	dfc00c15 	stw	ra,48(sp)
    d474:	df000b15 	stw	fp,44(sp)
    d478:	ddc00a15 	stw	r23,40(sp)
    d47c:	dd000715 	stw	r20,28(sp)
    d480:	dcc00615 	stw	r19,24(sp)
    d484:	dc400415 	stw	r17,16(sp)
    d488:	1481ffcc 	andi	r18,r2,2047
    d48c:	2c20703a 	and	r16,r5,r16
    d490:	b02b883a 	mov	r21,r22
    d494:	b2403fcc 	andi	r9,r22,255
    d498:	90006026 	beq	r18,zero,d61c <__muldf3+0x1d0>
    d49c:	0081ffc4 	movi	r2,2047
    d4a0:	2029883a 	mov	r20,r4
    d4a4:	90803626 	beq	r18,r2,d580 <__muldf3+0x134>
    d4a8:	80800434 	orhi	r2,r16,16
    d4ac:	100490fa 	slli	r2,r2,3
    d4b0:	2020d77a 	srli	r16,r4,29
    d4b4:	202890fa 	slli	r20,r4,3
    d4b8:	94bf0044 	addi	r18,r18,-1023
    d4bc:	80a0b03a 	or	r16,r16,r2
    d4c0:	0027883a 	mov	r19,zero
    d4c4:	0039883a 	mov	fp,zero
    d4c8:	3804d53a 	srli	r2,r7,20
    d4cc:	382ed7fa 	srli	r23,r7,31
    d4d0:	04400434 	movhi	r17,16
    d4d4:	8c7fffc4 	addi	r17,r17,-1
    d4d8:	1081ffcc 	andi	r2,r2,2047
    d4dc:	3011883a 	mov	r8,r6
    d4e0:	3c62703a 	and	r17,r7,r17
    d4e4:	ba803fcc 	andi	r10,r23,255
    d4e8:	10006d26 	beq	r2,zero,d6a0 <__muldf3+0x254>
    d4ec:	00c1ffc4 	movi	r3,2047
    d4f0:	10c06526 	beq	r2,r3,d688 <__muldf3+0x23c>
    d4f4:	88c00434 	orhi	r3,r17,16
    d4f8:	180690fa 	slli	r3,r3,3
    d4fc:	3022d77a 	srli	r17,r6,29
    d500:	301090fa 	slli	r8,r6,3
    d504:	10bf0044 	addi	r2,r2,-1023
    d508:	88e2b03a 	or	r17,r17,r3
    d50c:	000b883a 	mov	r5,zero
    d510:	9085883a 	add	r2,r18,r2
    d514:	2cc8b03a 	or	r4,r5,r19
    d518:	00c003c4 	movi	r3,15
    d51c:	bdacf03a 	xor	r22,r23,r22
    d520:	12c00044 	addi	r11,r2,1
    d524:	19009936 	bltu	r3,r4,d78c <__muldf3+0x340>
    d528:	200890ba 	slli	r4,r4,2
    d52c:	00c00074 	movhi	r3,1
    d530:	18f55004 	addi	r3,r3,-10944
    d534:	20c9883a 	add	r4,r4,r3
    d538:	20c00017 	ldw	r3,0(r4)
    d53c:	1800683a 	jmp	r3
    d540:	0000d78c 	andi	zero,zero,862
    d544:	0000d5a0 	cmpeqi	zero,zero,854
    d548:	0000d5a0 	cmpeqi	zero,zero,854
    d54c:	0000d59c 	xori	zero,zero,854
    d550:	0000d768 	cmpgeui	zero,zero,861
    d554:	0000d768 	cmpgeui	zero,zero,861
    d558:	0000d750 	cmplti	zero,zero,861
    d55c:	0000d59c 	xori	zero,zero,854
    d560:	0000d768 	cmpgeui	zero,zero,861
    d564:	0000d750 	cmplti	zero,zero,861
    d568:	0000d768 	cmpgeui	zero,zero,861
    d56c:	0000d59c 	xori	zero,zero,854
    d570:	0000d778 	rdprs	zero,zero,861
    d574:	0000d778 	rdprs	zero,zero,861
    d578:	0000d778 	rdprs	zero,zero,861
    d57c:	0000d994 	movui	zero,870
    d580:	2404b03a 	or	r2,r4,r16
    d584:	10006f1e 	bne	r2,zero,d744 <__muldf3+0x2f8>
    d588:	04c00204 	movi	r19,8
    d58c:	0021883a 	mov	r16,zero
    d590:	0029883a 	mov	r20,zero
    d594:	07000084 	movi	fp,2
    d598:	003fcb06 	br	d4c8 <__alt_data_end+0xff00d4c8>
    d59c:	502d883a 	mov	r22,r10
    d5a0:	00800084 	movi	r2,2
    d5a4:	28805726 	beq	r5,r2,d704 <__muldf3+0x2b8>
    d5a8:	008000c4 	movi	r2,3
    d5ac:	28816626 	beq	r5,r2,db48 <__muldf3+0x6fc>
    d5b0:	00800044 	movi	r2,1
    d5b4:	2881411e 	bne	r5,r2,dabc <__muldf3+0x670>
    d5b8:	b02b883a 	mov	r21,r22
    d5bc:	0005883a 	mov	r2,zero
    d5c0:	000b883a 	mov	r5,zero
    d5c4:	0029883a 	mov	r20,zero
    d5c8:	1004953a 	slli	r2,r2,20
    d5cc:	a8c03fcc 	andi	r3,r21,255
    d5d0:	04400434 	movhi	r17,16
    d5d4:	8c7fffc4 	addi	r17,r17,-1
    d5d8:	180697fa 	slli	r3,r3,31
    d5dc:	2c4a703a 	and	r5,r5,r17
    d5e0:	288ab03a 	or	r5,r5,r2
    d5e4:	28c6b03a 	or	r3,r5,r3
    d5e8:	a005883a 	mov	r2,r20
    d5ec:	dfc00c17 	ldw	ra,48(sp)
    d5f0:	df000b17 	ldw	fp,44(sp)
    d5f4:	ddc00a17 	ldw	r23,40(sp)
    d5f8:	dd800917 	ldw	r22,36(sp)
    d5fc:	dd400817 	ldw	r21,32(sp)
    d600:	dd000717 	ldw	r20,28(sp)
    d604:	dcc00617 	ldw	r19,24(sp)
    d608:	dc800517 	ldw	r18,20(sp)
    d60c:	dc400417 	ldw	r17,16(sp)
    d610:	dc000317 	ldw	r16,12(sp)
    d614:	dec00d04 	addi	sp,sp,52
    d618:	f800283a 	ret
    d61c:	2404b03a 	or	r2,r4,r16
    d620:	2027883a 	mov	r19,r4
    d624:	10004226 	beq	r2,zero,d730 <__muldf3+0x2e4>
    d628:	8000fc26 	beq	r16,zero,da1c <__muldf3+0x5d0>
    d62c:	8009883a 	mov	r4,r16
    d630:	d9800215 	stw	r6,8(sp)
    d634:	d9c00015 	stw	r7,0(sp)
    d638:	da400115 	stw	r9,4(sp)
    d63c:	000e6640 	call	e664 <__clzsi2>
    d640:	d9800217 	ldw	r6,8(sp)
    d644:	d9c00017 	ldw	r7,0(sp)
    d648:	da400117 	ldw	r9,4(sp)
    d64c:	113ffd44 	addi	r4,r2,-11
    d650:	00c00704 	movi	r3,28
    d654:	1900ed16 	blt	r3,r4,da0c <__muldf3+0x5c0>
    d658:	00c00744 	movi	r3,29
    d65c:	147ffe04 	addi	r17,r2,-8
    d660:	1907c83a 	sub	r3,r3,r4
    d664:	8460983a 	sll	r16,r16,r17
    d668:	98c6d83a 	srl	r3,r19,r3
    d66c:	9c68983a 	sll	r20,r19,r17
    d670:	1c20b03a 	or	r16,r3,r16
    d674:	1080fcc4 	addi	r2,r2,1011
    d678:	00a5c83a 	sub	r18,zero,r2
    d67c:	0027883a 	mov	r19,zero
    d680:	0039883a 	mov	fp,zero
    d684:	003f9006 	br	d4c8 <__alt_data_end+0xff00d4c8>
    d688:	3446b03a 	or	r3,r6,r17
    d68c:	1800261e 	bne	r3,zero,d728 <__muldf3+0x2dc>
    d690:	0023883a 	mov	r17,zero
    d694:	0011883a 	mov	r8,zero
    d698:	01400084 	movi	r5,2
    d69c:	003f9c06 	br	d510 <__alt_data_end+0xff00d510>
    d6a0:	3446b03a 	or	r3,r6,r17
    d6a4:	18001c26 	beq	r3,zero,d718 <__muldf3+0x2cc>
    d6a8:	8800ce26 	beq	r17,zero,d9e4 <__muldf3+0x598>
    d6ac:	8809883a 	mov	r4,r17
    d6b0:	d9800215 	stw	r6,8(sp)
    d6b4:	da400115 	stw	r9,4(sp)
    d6b8:	da800015 	stw	r10,0(sp)
    d6bc:	000e6640 	call	e664 <__clzsi2>
    d6c0:	d9800217 	ldw	r6,8(sp)
    d6c4:	da400117 	ldw	r9,4(sp)
    d6c8:	da800017 	ldw	r10,0(sp)
    d6cc:	113ffd44 	addi	r4,r2,-11
    d6d0:	00c00704 	movi	r3,28
    d6d4:	1900bf16 	blt	r3,r4,d9d4 <__muldf3+0x588>
    d6d8:	00c00744 	movi	r3,29
    d6dc:	123ffe04 	addi	r8,r2,-8
    d6e0:	1907c83a 	sub	r3,r3,r4
    d6e4:	8a22983a 	sll	r17,r17,r8
    d6e8:	30c6d83a 	srl	r3,r6,r3
    d6ec:	3210983a 	sll	r8,r6,r8
    d6f0:	1c62b03a 	or	r17,r3,r17
    d6f4:	1080fcc4 	addi	r2,r2,1011
    d6f8:	0085c83a 	sub	r2,zero,r2
    d6fc:	000b883a 	mov	r5,zero
    d700:	003f8306 	br	d510 <__alt_data_end+0xff00d510>
    d704:	b02b883a 	mov	r21,r22
    d708:	0081ffc4 	movi	r2,2047
    d70c:	000b883a 	mov	r5,zero
    d710:	0029883a 	mov	r20,zero
    d714:	003fac06 	br	d5c8 <__alt_data_end+0xff00d5c8>
    d718:	0023883a 	mov	r17,zero
    d71c:	0011883a 	mov	r8,zero
    d720:	01400044 	movi	r5,1
    d724:	003f7a06 	br	d510 <__alt_data_end+0xff00d510>
    d728:	014000c4 	movi	r5,3
    d72c:	003f7806 	br	d510 <__alt_data_end+0xff00d510>
    d730:	04c00104 	movi	r19,4
    d734:	0021883a 	mov	r16,zero
    d738:	0029883a 	mov	r20,zero
    d73c:	07000044 	movi	fp,1
    d740:	003f6106 	br	d4c8 <__alt_data_end+0xff00d4c8>
    d744:	04c00304 	movi	r19,12
    d748:	070000c4 	movi	fp,3
    d74c:	003f5e06 	br	d4c8 <__alt_data_end+0xff00d4c8>
    d750:	01400434 	movhi	r5,16
    d754:	002b883a 	mov	r21,zero
    d758:	297fffc4 	addi	r5,r5,-1
    d75c:	053fffc4 	movi	r20,-1
    d760:	0081ffc4 	movi	r2,2047
    d764:	003f9806 	br	d5c8 <__alt_data_end+0xff00d5c8>
    d768:	8023883a 	mov	r17,r16
    d76c:	a011883a 	mov	r8,r20
    d770:	e00b883a 	mov	r5,fp
    d774:	003f8a06 	br	d5a0 <__alt_data_end+0xff00d5a0>
    d778:	8023883a 	mov	r17,r16
    d77c:	a011883a 	mov	r8,r20
    d780:	482d883a 	mov	r22,r9
    d784:	e00b883a 	mov	r5,fp
    d788:	003f8506 	br	d5a0 <__alt_data_end+0xff00d5a0>
    d78c:	a00ad43a 	srli	r5,r20,16
    d790:	401ad43a 	srli	r13,r8,16
    d794:	a53fffcc 	andi	r20,r20,65535
    d798:	423fffcc 	andi	r8,r8,65535
    d79c:	4519383a 	mul	r12,r8,r20
    d7a0:	4147383a 	mul	r3,r8,r5
    d7a4:	6d09383a 	mul	r4,r13,r20
    d7a8:	600cd43a 	srli	r6,r12,16
    d7ac:	2b5d383a 	mul	r14,r5,r13
    d7b0:	20c9883a 	add	r4,r4,r3
    d7b4:	310d883a 	add	r6,r6,r4
    d7b8:	30c0022e 	bgeu	r6,r3,d7c4 <__muldf3+0x378>
    d7bc:	00c00074 	movhi	r3,1
    d7c0:	70dd883a 	add	r14,r14,r3
    d7c4:	8826d43a 	srli	r19,r17,16
    d7c8:	8bffffcc 	andi	r15,r17,65535
    d7cc:	7d23383a 	mul	r17,r15,r20
    d7d0:	7949383a 	mul	r4,r15,r5
    d7d4:	9d29383a 	mul	r20,r19,r20
    d7d8:	8814d43a 	srli	r10,r17,16
    d7dc:	3012943a 	slli	r9,r6,16
    d7e0:	a129883a 	add	r20,r20,r4
    d7e4:	633fffcc 	andi	r12,r12,65535
    d7e8:	5515883a 	add	r10,r10,r20
    d7ec:	3006d43a 	srli	r3,r6,16
    d7f0:	4b13883a 	add	r9,r9,r12
    d7f4:	2ccb383a 	mul	r5,r5,r19
    d7f8:	5100022e 	bgeu	r10,r4,d804 <__muldf3+0x3b8>
    d7fc:	01000074 	movhi	r4,1
    d800:	290b883a 	add	r5,r5,r4
    d804:	802ad43a 	srli	r21,r16,16
    d808:	843fffcc 	andi	r16,r16,65535
    d80c:	440d383a 	mul	r6,r8,r16
    d810:	4565383a 	mul	r18,r8,r21
    d814:	8349383a 	mul	r4,r16,r13
    d818:	500e943a 	slli	r7,r10,16
    d81c:	3010d43a 	srli	r8,r6,16
    d820:	5028d43a 	srli	r20,r10,16
    d824:	2489883a 	add	r4,r4,r18
    d828:	8abfffcc 	andi	r10,r17,65535
    d82c:	3a95883a 	add	r10,r7,r10
    d830:	4119883a 	add	r12,r8,r4
    d834:	a169883a 	add	r20,r20,r5
    d838:	1a87883a 	add	r3,r3,r10
    d83c:	6d5b383a 	mul	r13,r13,r21
    d840:	6480022e 	bgeu	r12,r18,d84c <__muldf3+0x400>
    d844:	01000074 	movhi	r4,1
    d848:	691b883a 	add	r13,r13,r4
    d84c:	7c25383a 	mul	r18,r15,r16
    d850:	7d4b383a 	mul	r5,r15,r21
    d854:	84cf383a 	mul	r7,r16,r19
    d858:	901ed43a 	srli	r15,r18,16
    d85c:	6008d43a 	srli	r4,r12,16
    d860:	6010943a 	slli	r8,r12,16
    d864:	394f883a 	add	r7,r7,r5
    d868:	333fffcc 	andi	r12,r6,65535
    d86c:	79df883a 	add	r15,r15,r7
    d870:	235b883a 	add	r13,r4,r13
    d874:	9d63383a 	mul	r17,r19,r21
    d878:	4309883a 	add	r4,r8,r12
    d87c:	7940022e 	bgeu	r15,r5,d888 <__muldf3+0x43c>
    d880:	01400074 	movhi	r5,1
    d884:	8963883a 	add	r17,r17,r5
    d888:	780a943a 	slli	r5,r15,16
    d88c:	91bfffcc 	andi	r6,r18,65535
    d890:	70c7883a 	add	r3,r14,r3
    d894:	298d883a 	add	r6,r5,r6
    d898:	1a8f803a 	cmpltu	r7,r3,r10
    d89c:	350b883a 	add	r5,r6,r20
    d8a0:	20c7883a 	add	r3,r4,r3
    d8a4:	3955883a 	add	r10,r7,r5
    d8a8:	1909803a 	cmpltu	r4,r3,r4
    d8ac:	6a91883a 	add	r8,r13,r10
    d8b0:	780cd43a 	srli	r6,r15,16
    d8b4:	2219883a 	add	r12,r4,r8
    d8b8:	2d0b803a 	cmpltu	r5,r5,r20
    d8bc:	51cf803a 	cmpltu	r7,r10,r7
    d8c0:	29ceb03a 	or	r7,r5,r7
    d8c4:	4351803a 	cmpltu	r8,r8,r13
    d8c8:	610b803a 	cmpltu	r5,r12,r4
    d8cc:	4148b03a 	or	r4,r8,r5
    d8d0:	398f883a 	add	r7,r7,r6
    d8d4:	3909883a 	add	r4,r7,r4
    d8d8:	1810927a 	slli	r8,r3,9
    d8dc:	2449883a 	add	r4,r4,r17
    d8e0:	2008927a 	slli	r4,r4,9
    d8e4:	6022d5fa 	srli	r17,r12,23
    d8e8:	1806d5fa 	srli	r3,r3,23
    d8ec:	4252b03a 	or	r9,r8,r9
    d8f0:	600a927a 	slli	r5,r12,9
    d8f4:	4810c03a 	cmpne	r8,r9,zero
    d8f8:	2462b03a 	or	r17,r4,r17
    d8fc:	40c6b03a 	or	r3,r8,r3
    d900:	8900402c 	andhi	r4,r17,256
    d904:	1950b03a 	or	r8,r3,r5
    d908:	20000726 	beq	r4,zero,d928 <__muldf3+0x4dc>
    d90c:	4006d07a 	srli	r3,r8,1
    d910:	880497fa 	slli	r2,r17,31
    d914:	4200004c 	andi	r8,r8,1
    d918:	8822d07a 	srli	r17,r17,1
    d91c:	1a10b03a 	or	r8,r3,r8
    d920:	1210b03a 	or	r8,r2,r8
    d924:	5805883a 	mov	r2,r11
    d928:	1140ffc4 	addi	r5,r2,1023
    d92c:	0140440e 	bge	zero,r5,da40 <__muldf3+0x5f4>
    d930:	40c001cc 	andi	r3,r8,7
    d934:	18000726 	beq	r3,zero,d954 <__muldf3+0x508>
    d938:	40c003cc 	andi	r3,r8,15
    d93c:	01000104 	movi	r4,4
    d940:	19000426 	beq	r3,r4,d954 <__muldf3+0x508>
    d944:	4107883a 	add	r3,r8,r4
    d948:	1a11803a 	cmpltu	r8,r3,r8
    d94c:	8a23883a 	add	r17,r17,r8
    d950:	1811883a 	mov	r8,r3
    d954:	88c0402c 	andhi	r3,r17,256
    d958:	18000426 	beq	r3,zero,d96c <__muldf3+0x520>
    d95c:	11410004 	addi	r5,r2,1024
    d960:	00bfc034 	movhi	r2,65280
    d964:	10bfffc4 	addi	r2,r2,-1
    d968:	88a2703a 	and	r17,r17,r2
    d96c:	0081ff84 	movi	r2,2046
    d970:	117f6416 	blt	r2,r5,d704 <__alt_data_end+0xff00d704>
    d974:	8828977a 	slli	r20,r17,29
    d978:	4010d0fa 	srli	r8,r8,3
    d97c:	8822927a 	slli	r17,r17,9
    d980:	2881ffcc 	andi	r2,r5,2047
    d984:	a228b03a 	or	r20,r20,r8
    d988:	880ad33a 	srli	r5,r17,12
    d98c:	b02b883a 	mov	r21,r22
    d990:	003f0d06 	br	d5c8 <__alt_data_end+0xff00d5c8>
    d994:	8080022c 	andhi	r2,r16,8
    d998:	10000926 	beq	r2,zero,d9c0 <__muldf3+0x574>
    d99c:	8880022c 	andhi	r2,r17,8
    d9a0:	1000071e 	bne	r2,zero,d9c0 <__muldf3+0x574>
    d9a4:	00800434 	movhi	r2,16
    d9a8:	89400234 	orhi	r5,r17,8
    d9ac:	10bfffc4 	addi	r2,r2,-1
    d9b0:	b82b883a 	mov	r21,r23
    d9b4:	288a703a 	and	r5,r5,r2
    d9b8:	4029883a 	mov	r20,r8
    d9bc:	003f6806 	br	d760 <__alt_data_end+0xff00d760>
    d9c0:	00800434 	movhi	r2,16
    d9c4:	81400234 	orhi	r5,r16,8
    d9c8:	10bfffc4 	addi	r2,r2,-1
    d9cc:	288a703a 	and	r5,r5,r2
    d9d0:	003f6306 	br	d760 <__alt_data_end+0xff00d760>
    d9d4:	147ff604 	addi	r17,r2,-40
    d9d8:	3462983a 	sll	r17,r6,r17
    d9dc:	0011883a 	mov	r8,zero
    d9e0:	003f4406 	br	d6f4 <__alt_data_end+0xff00d6f4>
    d9e4:	3009883a 	mov	r4,r6
    d9e8:	d9800215 	stw	r6,8(sp)
    d9ec:	da400115 	stw	r9,4(sp)
    d9f0:	da800015 	stw	r10,0(sp)
    d9f4:	000e6640 	call	e664 <__clzsi2>
    d9f8:	10800804 	addi	r2,r2,32
    d9fc:	da800017 	ldw	r10,0(sp)
    da00:	da400117 	ldw	r9,4(sp)
    da04:	d9800217 	ldw	r6,8(sp)
    da08:	003f3006 	br	d6cc <__alt_data_end+0xff00d6cc>
    da0c:	143ff604 	addi	r16,r2,-40
    da10:	9c20983a 	sll	r16,r19,r16
    da14:	0029883a 	mov	r20,zero
    da18:	003f1606 	br	d674 <__alt_data_end+0xff00d674>
    da1c:	d9800215 	stw	r6,8(sp)
    da20:	d9c00015 	stw	r7,0(sp)
    da24:	da400115 	stw	r9,4(sp)
    da28:	000e6640 	call	e664 <__clzsi2>
    da2c:	10800804 	addi	r2,r2,32
    da30:	da400117 	ldw	r9,4(sp)
    da34:	d9c00017 	ldw	r7,0(sp)
    da38:	d9800217 	ldw	r6,8(sp)
    da3c:	003f0306 	br	d64c <__alt_data_end+0xff00d64c>
    da40:	00c00044 	movi	r3,1
    da44:	1947c83a 	sub	r3,r3,r5
    da48:	00800e04 	movi	r2,56
    da4c:	10feda16 	blt	r2,r3,d5b8 <__alt_data_end+0xff00d5b8>
    da50:	008007c4 	movi	r2,31
    da54:	10c01b16 	blt	r2,r3,dac4 <__muldf3+0x678>
    da58:	00800804 	movi	r2,32
    da5c:	10c5c83a 	sub	r2,r2,r3
    da60:	888a983a 	sll	r5,r17,r2
    da64:	40c8d83a 	srl	r4,r8,r3
    da68:	4084983a 	sll	r2,r8,r2
    da6c:	88e2d83a 	srl	r17,r17,r3
    da70:	2906b03a 	or	r3,r5,r4
    da74:	1004c03a 	cmpne	r2,r2,zero
    da78:	1886b03a 	or	r3,r3,r2
    da7c:	188001cc 	andi	r2,r3,7
    da80:	10000726 	beq	r2,zero,daa0 <__muldf3+0x654>
    da84:	188003cc 	andi	r2,r3,15
    da88:	01000104 	movi	r4,4
    da8c:	11000426 	beq	r2,r4,daa0 <__muldf3+0x654>
    da90:	1805883a 	mov	r2,r3
    da94:	10c00104 	addi	r3,r2,4
    da98:	1885803a 	cmpltu	r2,r3,r2
    da9c:	88a3883a 	add	r17,r17,r2
    daa0:	8880202c 	andhi	r2,r17,128
    daa4:	10001c26 	beq	r2,zero,db18 <__muldf3+0x6cc>
    daa8:	b02b883a 	mov	r21,r22
    daac:	00800044 	movi	r2,1
    dab0:	000b883a 	mov	r5,zero
    dab4:	0029883a 	mov	r20,zero
    dab8:	003ec306 	br	d5c8 <__alt_data_end+0xff00d5c8>
    dabc:	5805883a 	mov	r2,r11
    dac0:	003f9906 	br	d928 <__alt_data_end+0xff00d928>
    dac4:	00bff844 	movi	r2,-31
    dac8:	1145c83a 	sub	r2,r2,r5
    dacc:	8888d83a 	srl	r4,r17,r2
    dad0:	00800804 	movi	r2,32
    dad4:	18801a26 	beq	r3,r2,db40 <__muldf3+0x6f4>
    dad8:	00801004 	movi	r2,64
    dadc:	10c5c83a 	sub	r2,r2,r3
    dae0:	8884983a 	sll	r2,r17,r2
    dae4:	1204b03a 	or	r2,r2,r8
    dae8:	1004c03a 	cmpne	r2,r2,zero
    daec:	2084b03a 	or	r2,r4,r2
    daf0:	144001cc 	andi	r17,r2,7
    daf4:	88000d1e 	bne	r17,zero,db2c <__muldf3+0x6e0>
    daf8:	000b883a 	mov	r5,zero
    dafc:	1028d0fa 	srli	r20,r2,3
    db00:	b02b883a 	mov	r21,r22
    db04:	0005883a 	mov	r2,zero
    db08:	a468b03a 	or	r20,r20,r17
    db0c:	003eae06 	br	d5c8 <__alt_data_end+0xff00d5c8>
    db10:	1007883a 	mov	r3,r2
    db14:	0023883a 	mov	r17,zero
    db18:	880a927a 	slli	r5,r17,9
    db1c:	1805883a 	mov	r2,r3
    db20:	8822977a 	slli	r17,r17,29
    db24:	280ad33a 	srli	r5,r5,12
    db28:	003ff406 	br	dafc <__alt_data_end+0xff00dafc>
    db2c:	10c003cc 	andi	r3,r2,15
    db30:	01000104 	movi	r4,4
    db34:	193ff626 	beq	r3,r4,db10 <__alt_data_end+0xff00db10>
    db38:	0023883a 	mov	r17,zero
    db3c:	003fd506 	br	da94 <__alt_data_end+0xff00da94>
    db40:	0005883a 	mov	r2,zero
    db44:	003fe706 	br	dae4 <__alt_data_end+0xff00dae4>
    db48:	00800434 	movhi	r2,16
    db4c:	89400234 	orhi	r5,r17,8
    db50:	10bfffc4 	addi	r2,r2,-1
    db54:	b02b883a 	mov	r21,r22
    db58:	288a703a 	and	r5,r5,r2
    db5c:	4029883a 	mov	r20,r8
    db60:	003eff06 	br	d760 <__alt_data_end+0xff00d760>

0000db64 <__subdf3>:
    db64:	02000434 	movhi	r8,16
    db68:	423fffc4 	addi	r8,r8,-1
    db6c:	defffb04 	addi	sp,sp,-20
    db70:	2a14703a 	and	r10,r5,r8
    db74:	3812d53a 	srli	r9,r7,20
    db78:	3a10703a 	and	r8,r7,r8
    db7c:	2006d77a 	srli	r3,r4,29
    db80:	3004d77a 	srli	r2,r6,29
    db84:	dc000015 	stw	r16,0(sp)
    db88:	501490fa 	slli	r10,r10,3
    db8c:	2820d53a 	srli	r16,r5,20
    db90:	401090fa 	slli	r8,r8,3
    db94:	dc800215 	stw	r18,8(sp)
    db98:	dc400115 	stw	r17,4(sp)
    db9c:	dfc00415 	stw	ra,16(sp)
    dba0:	202290fa 	slli	r17,r4,3
    dba4:	dcc00315 	stw	r19,12(sp)
    dba8:	4a41ffcc 	andi	r9,r9,2047
    dbac:	0101ffc4 	movi	r4,2047
    dbb0:	2824d7fa 	srli	r18,r5,31
    dbb4:	8401ffcc 	andi	r16,r16,2047
    dbb8:	50c6b03a 	or	r3,r10,r3
    dbbc:	380ed7fa 	srli	r7,r7,31
    dbc0:	408ab03a 	or	r5,r8,r2
    dbc4:	300c90fa 	slli	r6,r6,3
    dbc8:	49009626 	beq	r9,r4,de24 <__subdf3+0x2c0>
    dbcc:	39c0005c 	xori	r7,r7,1
    dbd0:	8245c83a 	sub	r2,r16,r9
    dbd4:	3c807426 	beq	r7,r18,dda8 <__subdf3+0x244>
    dbd8:	0080af0e 	bge	zero,r2,de98 <__subdf3+0x334>
    dbdc:	48002a1e 	bne	r9,zero,dc88 <__subdf3+0x124>
    dbe0:	2988b03a 	or	r4,r5,r6
    dbe4:	20009a1e 	bne	r4,zero,de50 <__subdf3+0x2ec>
    dbe8:	888001cc 	andi	r2,r17,7
    dbec:	10000726 	beq	r2,zero,dc0c <__subdf3+0xa8>
    dbf0:	888003cc 	andi	r2,r17,15
    dbf4:	01000104 	movi	r4,4
    dbf8:	11000426 	beq	r2,r4,dc0c <__subdf3+0xa8>
    dbfc:	890b883a 	add	r5,r17,r4
    dc00:	2c63803a 	cmpltu	r17,r5,r17
    dc04:	1c47883a 	add	r3,r3,r17
    dc08:	2823883a 	mov	r17,r5
    dc0c:	1880202c 	andhi	r2,r3,128
    dc10:	10005926 	beq	r2,zero,dd78 <__subdf3+0x214>
    dc14:	84000044 	addi	r16,r16,1
    dc18:	0081ffc4 	movi	r2,2047
    dc1c:	8080be26 	beq	r16,r2,df18 <__subdf3+0x3b4>
    dc20:	017fe034 	movhi	r5,65408
    dc24:	297fffc4 	addi	r5,r5,-1
    dc28:	1946703a 	and	r3,r3,r5
    dc2c:	1804977a 	slli	r2,r3,29
    dc30:	1806927a 	slli	r3,r3,9
    dc34:	8822d0fa 	srli	r17,r17,3
    dc38:	8401ffcc 	andi	r16,r16,2047
    dc3c:	180ad33a 	srli	r5,r3,12
    dc40:	9100004c 	andi	r4,r18,1
    dc44:	1444b03a 	or	r2,r2,r17
    dc48:	80c1ffcc 	andi	r3,r16,2047
    dc4c:	1820953a 	slli	r16,r3,20
    dc50:	20c03fcc 	andi	r3,r4,255
    dc54:	180897fa 	slli	r4,r3,31
    dc58:	00c00434 	movhi	r3,16
    dc5c:	18ffffc4 	addi	r3,r3,-1
    dc60:	28c6703a 	and	r3,r5,r3
    dc64:	1c06b03a 	or	r3,r3,r16
    dc68:	1906b03a 	or	r3,r3,r4
    dc6c:	dfc00417 	ldw	ra,16(sp)
    dc70:	dcc00317 	ldw	r19,12(sp)
    dc74:	dc800217 	ldw	r18,8(sp)
    dc78:	dc400117 	ldw	r17,4(sp)
    dc7c:	dc000017 	ldw	r16,0(sp)
    dc80:	dec00504 	addi	sp,sp,20
    dc84:	f800283a 	ret
    dc88:	0101ffc4 	movi	r4,2047
    dc8c:	813fd626 	beq	r16,r4,dbe8 <__alt_data_end+0xff00dbe8>
    dc90:	29402034 	orhi	r5,r5,128
    dc94:	01000e04 	movi	r4,56
    dc98:	2080a316 	blt	r4,r2,df28 <__subdf3+0x3c4>
    dc9c:	010007c4 	movi	r4,31
    dca0:	2080c616 	blt	r4,r2,dfbc <__subdf3+0x458>
    dca4:	01000804 	movi	r4,32
    dca8:	2089c83a 	sub	r4,r4,r2
    dcac:	2910983a 	sll	r8,r5,r4
    dcb0:	308ed83a 	srl	r7,r6,r2
    dcb4:	3108983a 	sll	r4,r6,r4
    dcb8:	2884d83a 	srl	r2,r5,r2
    dcbc:	41ccb03a 	or	r6,r8,r7
    dcc0:	2008c03a 	cmpne	r4,r4,zero
    dcc4:	310cb03a 	or	r6,r6,r4
    dcc8:	898dc83a 	sub	r6,r17,r6
    dccc:	89a3803a 	cmpltu	r17,r17,r6
    dcd0:	1887c83a 	sub	r3,r3,r2
    dcd4:	1c47c83a 	sub	r3,r3,r17
    dcd8:	3023883a 	mov	r17,r6
    dcdc:	1880202c 	andhi	r2,r3,128
    dce0:	10002326 	beq	r2,zero,dd70 <__subdf3+0x20c>
    dce4:	04c02034 	movhi	r19,128
    dce8:	9cffffc4 	addi	r19,r19,-1
    dcec:	1ce6703a 	and	r19,r3,r19
    dcf0:	98007a26 	beq	r19,zero,dedc <__subdf3+0x378>
    dcf4:	9809883a 	mov	r4,r19
    dcf8:	000e6640 	call	e664 <__clzsi2>
    dcfc:	113ffe04 	addi	r4,r2,-8
    dd00:	00c007c4 	movi	r3,31
    dd04:	19007b16 	blt	r3,r4,def4 <__subdf3+0x390>
    dd08:	00800804 	movi	r2,32
    dd0c:	1105c83a 	sub	r2,r2,r4
    dd10:	8884d83a 	srl	r2,r17,r2
    dd14:	9906983a 	sll	r3,r19,r4
    dd18:	8922983a 	sll	r17,r17,r4
    dd1c:	10c4b03a 	or	r2,r2,r3
    dd20:	24007816 	blt	r4,r16,df04 <__subdf3+0x3a0>
    dd24:	2421c83a 	sub	r16,r4,r16
    dd28:	80c00044 	addi	r3,r16,1
    dd2c:	010007c4 	movi	r4,31
    dd30:	20c09516 	blt	r4,r3,df88 <__subdf3+0x424>
    dd34:	01400804 	movi	r5,32
    dd38:	28cbc83a 	sub	r5,r5,r3
    dd3c:	88c8d83a 	srl	r4,r17,r3
    dd40:	8962983a 	sll	r17,r17,r5
    dd44:	114a983a 	sll	r5,r2,r5
    dd48:	10c6d83a 	srl	r3,r2,r3
    dd4c:	8804c03a 	cmpne	r2,r17,zero
    dd50:	290ab03a 	or	r5,r5,r4
    dd54:	28a2b03a 	or	r17,r5,r2
    dd58:	0021883a 	mov	r16,zero
    dd5c:	003fa206 	br	dbe8 <__alt_data_end+0xff00dbe8>
    dd60:	2090b03a 	or	r8,r4,r2
    dd64:	40018e26 	beq	r8,zero,e3a0 <__subdf3+0x83c>
    dd68:	1007883a 	mov	r3,r2
    dd6c:	2023883a 	mov	r17,r4
    dd70:	888001cc 	andi	r2,r17,7
    dd74:	103f9e1e 	bne	r2,zero,dbf0 <__alt_data_end+0xff00dbf0>
    dd78:	1804977a 	slli	r2,r3,29
    dd7c:	8822d0fa 	srli	r17,r17,3
    dd80:	1810d0fa 	srli	r8,r3,3
    dd84:	9100004c 	andi	r4,r18,1
    dd88:	1444b03a 	or	r2,r2,r17
    dd8c:	00c1ffc4 	movi	r3,2047
    dd90:	80c02826 	beq	r16,r3,de34 <__subdf3+0x2d0>
    dd94:	01400434 	movhi	r5,16
    dd98:	297fffc4 	addi	r5,r5,-1
    dd9c:	80e0703a 	and	r16,r16,r3
    dda0:	414a703a 	and	r5,r8,r5
    dda4:	003fa806 	br	dc48 <__alt_data_end+0xff00dc48>
    dda8:	0080630e 	bge	zero,r2,df38 <__subdf3+0x3d4>
    ddac:	48003026 	beq	r9,zero,de70 <__subdf3+0x30c>
    ddb0:	0101ffc4 	movi	r4,2047
    ddb4:	813f8c26 	beq	r16,r4,dbe8 <__alt_data_end+0xff00dbe8>
    ddb8:	29402034 	orhi	r5,r5,128
    ddbc:	01000e04 	movi	r4,56
    ddc0:	2080a90e 	bge	r4,r2,e068 <__subdf3+0x504>
    ddc4:	298cb03a 	or	r6,r5,r6
    ddc8:	3012c03a 	cmpne	r9,r6,zero
    ddcc:	0005883a 	mov	r2,zero
    ddd0:	4c53883a 	add	r9,r9,r17
    ddd4:	4c63803a 	cmpltu	r17,r9,r17
    ddd8:	10c7883a 	add	r3,r2,r3
    dddc:	88c7883a 	add	r3,r17,r3
    dde0:	4823883a 	mov	r17,r9
    dde4:	1880202c 	andhi	r2,r3,128
    dde8:	1000d026 	beq	r2,zero,e12c <__subdf3+0x5c8>
    ddec:	84000044 	addi	r16,r16,1
    ddf0:	0081ffc4 	movi	r2,2047
    ddf4:	8080fe26 	beq	r16,r2,e1f0 <__subdf3+0x68c>
    ddf8:	00bfe034 	movhi	r2,65408
    ddfc:	10bfffc4 	addi	r2,r2,-1
    de00:	1886703a 	and	r3,r3,r2
    de04:	880ad07a 	srli	r5,r17,1
    de08:	180497fa 	slli	r2,r3,31
    de0c:	8900004c 	andi	r4,r17,1
    de10:	2922b03a 	or	r17,r5,r4
    de14:	1806d07a 	srli	r3,r3,1
    de18:	1462b03a 	or	r17,r2,r17
    de1c:	3825883a 	mov	r18,r7
    de20:	003f7106 	br	dbe8 <__alt_data_end+0xff00dbe8>
    de24:	2984b03a 	or	r2,r5,r6
    de28:	103f6826 	beq	r2,zero,dbcc <__alt_data_end+0xff00dbcc>
    de2c:	39c03fcc 	andi	r7,r7,255
    de30:	003f6706 	br	dbd0 <__alt_data_end+0xff00dbd0>
    de34:	4086b03a 	or	r3,r8,r2
    de38:	18015226 	beq	r3,zero,e384 <__subdf3+0x820>
    de3c:	00c00434 	movhi	r3,16
    de40:	41400234 	orhi	r5,r8,8
    de44:	18ffffc4 	addi	r3,r3,-1
    de48:	28ca703a 	and	r5,r5,r3
    de4c:	003f7e06 	br	dc48 <__alt_data_end+0xff00dc48>
    de50:	10bfffc4 	addi	r2,r2,-1
    de54:	1000491e 	bne	r2,zero,df7c <__subdf3+0x418>
    de58:	898fc83a 	sub	r7,r17,r6
    de5c:	89e3803a 	cmpltu	r17,r17,r7
    de60:	1947c83a 	sub	r3,r3,r5
    de64:	1c47c83a 	sub	r3,r3,r17
    de68:	3823883a 	mov	r17,r7
    de6c:	003f9b06 	br	dcdc <__alt_data_end+0xff00dcdc>
    de70:	2988b03a 	or	r4,r5,r6
    de74:	203f5c26 	beq	r4,zero,dbe8 <__alt_data_end+0xff00dbe8>
    de78:	10bfffc4 	addi	r2,r2,-1
    de7c:	1000931e 	bne	r2,zero,e0cc <__subdf3+0x568>
    de80:	898d883a 	add	r6,r17,r6
    de84:	3463803a 	cmpltu	r17,r6,r17
    de88:	1947883a 	add	r3,r3,r5
    de8c:	88c7883a 	add	r3,r17,r3
    de90:	3023883a 	mov	r17,r6
    de94:	003fd306 	br	dde4 <__alt_data_end+0xff00dde4>
    de98:	1000541e 	bne	r2,zero,dfec <__subdf3+0x488>
    de9c:	80800044 	addi	r2,r16,1
    dea0:	1081ffcc 	andi	r2,r2,2047
    dea4:	01000044 	movi	r4,1
    dea8:	2080a20e 	bge	r4,r2,e134 <__subdf3+0x5d0>
    deac:	8989c83a 	sub	r4,r17,r6
    deb0:	8905803a 	cmpltu	r2,r17,r4
    deb4:	1967c83a 	sub	r19,r3,r5
    deb8:	98a7c83a 	sub	r19,r19,r2
    debc:	9880202c 	andhi	r2,r19,128
    dec0:	10006326 	beq	r2,zero,e050 <__subdf3+0x4ec>
    dec4:	3463c83a 	sub	r17,r6,r17
    dec8:	28c7c83a 	sub	r3,r5,r3
    decc:	344d803a 	cmpltu	r6,r6,r17
    ded0:	19a7c83a 	sub	r19,r3,r6
    ded4:	3825883a 	mov	r18,r7
    ded8:	983f861e 	bne	r19,zero,dcf4 <__alt_data_end+0xff00dcf4>
    dedc:	8809883a 	mov	r4,r17
    dee0:	000e6640 	call	e664 <__clzsi2>
    dee4:	10800804 	addi	r2,r2,32
    dee8:	113ffe04 	addi	r4,r2,-8
    deec:	00c007c4 	movi	r3,31
    def0:	193f850e 	bge	r3,r4,dd08 <__alt_data_end+0xff00dd08>
    def4:	10bff604 	addi	r2,r2,-40
    def8:	8884983a 	sll	r2,r17,r2
    defc:	0023883a 	mov	r17,zero
    df00:	243f880e 	bge	r4,r16,dd24 <__alt_data_end+0xff00dd24>
    df04:	00ffe034 	movhi	r3,65408
    df08:	18ffffc4 	addi	r3,r3,-1
    df0c:	8121c83a 	sub	r16,r16,r4
    df10:	10c6703a 	and	r3,r2,r3
    df14:	003f3406 	br	dbe8 <__alt_data_end+0xff00dbe8>
    df18:	9100004c 	andi	r4,r18,1
    df1c:	000b883a 	mov	r5,zero
    df20:	0005883a 	mov	r2,zero
    df24:	003f4806 	br	dc48 <__alt_data_end+0xff00dc48>
    df28:	298cb03a 	or	r6,r5,r6
    df2c:	300cc03a 	cmpne	r6,r6,zero
    df30:	0005883a 	mov	r2,zero
    df34:	003f6406 	br	dcc8 <__alt_data_end+0xff00dcc8>
    df38:	10009a1e 	bne	r2,zero,e1a4 <__subdf3+0x640>
    df3c:	82400044 	addi	r9,r16,1
    df40:	4881ffcc 	andi	r2,r9,2047
    df44:	02800044 	movi	r10,1
    df48:	5080670e 	bge	r10,r2,e0e8 <__subdf3+0x584>
    df4c:	0081ffc4 	movi	r2,2047
    df50:	4880af26 	beq	r9,r2,e210 <__subdf3+0x6ac>
    df54:	898d883a 	add	r6,r17,r6
    df58:	1945883a 	add	r2,r3,r5
    df5c:	3447803a 	cmpltu	r3,r6,r17
    df60:	1887883a 	add	r3,r3,r2
    df64:	182297fa 	slli	r17,r3,31
    df68:	300cd07a 	srli	r6,r6,1
    df6c:	1806d07a 	srli	r3,r3,1
    df70:	4821883a 	mov	r16,r9
    df74:	89a2b03a 	or	r17,r17,r6
    df78:	003f1b06 	br	dbe8 <__alt_data_end+0xff00dbe8>
    df7c:	0101ffc4 	movi	r4,2047
    df80:	813f441e 	bne	r16,r4,dc94 <__alt_data_end+0xff00dc94>
    df84:	003f1806 	br	dbe8 <__alt_data_end+0xff00dbe8>
    df88:	843ff844 	addi	r16,r16,-31
    df8c:	01400804 	movi	r5,32
    df90:	1408d83a 	srl	r4,r2,r16
    df94:	19405026 	beq	r3,r5,e0d8 <__subdf3+0x574>
    df98:	01401004 	movi	r5,64
    df9c:	28c7c83a 	sub	r3,r5,r3
    dfa0:	10c4983a 	sll	r2,r2,r3
    dfa4:	88a2b03a 	or	r17,r17,r2
    dfa8:	8822c03a 	cmpne	r17,r17,zero
    dfac:	2462b03a 	or	r17,r4,r17
    dfb0:	0007883a 	mov	r3,zero
    dfb4:	0021883a 	mov	r16,zero
    dfb8:	003f6d06 	br	dd70 <__alt_data_end+0xff00dd70>
    dfbc:	11fff804 	addi	r7,r2,-32
    dfc0:	01000804 	movi	r4,32
    dfc4:	29ced83a 	srl	r7,r5,r7
    dfc8:	11004526 	beq	r2,r4,e0e0 <__subdf3+0x57c>
    dfcc:	01001004 	movi	r4,64
    dfd0:	2089c83a 	sub	r4,r4,r2
    dfd4:	2904983a 	sll	r2,r5,r4
    dfd8:	118cb03a 	or	r6,r2,r6
    dfdc:	300cc03a 	cmpne	r6,r6,zero
    dfe0:	398cb03a 	or	r6,r7,r6
    dfe4:	0005883a 	mov	r2,zero
    dfe8:	003f3706 	br	dcc8 <__alt_data_end+0xff00dcc8>
    dfec:	80002a26 	beq	r16,zero,e098 <__subdf3+0x534>
    dff0:	0101ffc4 	movi	r4,2047
    dff4:	49006626 	beq	r9,r4,e190 <__subdf3+0x62c>
    dff8:	0085c83a 	sub	r2,zero,r2
    dffc:	18c02034 	orhi	r3,r3,128
    e000:	01000e04 	movi	r4,56
    e004:	20807e16 	blt	r4,r2,e200 <__subdf3+0x69c>
    e008:	010007c4 	movi	r4,31
    e00c:	2080e716 	blt	r4,r2,e3ac <__subdf3+0x848>
    e010:	01000804 	movi	r4,32
    e014:	2089c83a 	sub	r4,r4,r2
    e018:	1914983a 	sll	r10,r3,r4
    e01c:	8890d83a 	srl	r8,r17,r2
    e020:	8908983a 	sll	r4,r17,r4
    e024:	1884d83a 	srl	r2,r3,r2
    e028:	5222b03a 	or	r17,r10,r8
    e02c:	2006c03a 	cmpne	r3,r4,zero
    e030:	88e2b03a 	or	r17,r17,r3
    e034:	3463c83a 	sub	r17,r6,r17
    e038:	2885c83a 	sub	r2,r5,r2
    e03c:	344d803a 	cmpltu	r6,r6,r17
    e040:	1187c83a 	sub	r3,r2,r6
    e044:	4821883a 	mov	r16,r9
    e048:	3825883a 	mov	r18,r7
    e04c:	003f2306 	br	dcdc <__alt_data_end+0xff00dcdc>
    e050:	24d0b03a 	or	r8,r4,r19
    e054:	40001b1e 	bne	r8,zero,e0c4 <__subdf3+0x560>
    e058:	0005883a 	mov	r2,zero
    e05c:	0009883a 	mov	r4,zero
    e060:	0021883a 	mov	r16,zero
    e064:	003f4906 	br	dd8c <__alt_data_end+0xff00dd8c>
    e068:	010007c4 	movi	r4,31
    e06c:	20803a16 	blt	r4,r2,e158 <__subdf3+0x5f4>
    e070:	01000804 	movi	r4,32
    e074:	2089c83a 	sub	r4,r4,r2
    e078:	2912983a 	sll	r9,r5,r4
    e07c:	3090d83a 	srl	r8,r6,r2
    e080:	3108983a 	sll	r4,r6,r4
    e084:	2884d83a 	srl	r2,r5,r2
    e088:	4a12b03a 	or	r9,r9,r8
    e08c:	2008c03a 	cmpne	r4,r4,zero
    e090:	4912b03a 	or	r9,r9,r4
    e094:	003f4e06 	br	ddd0 <__alt_data_end+0xff00ddd0>
    e098:	1c48b03a 	or	r4,r3,r17
    e09c:	20003c26 	beq	r4,zero,e190 <__subdf3+0x62c>
    e0a0:	0084303a 	nor	r2,zero,r2
    e0a4:	1000381e 	bne	r2,zero,e188 <__subdf3+0x624>
    e0a8:	3463c83a 	sub	r17,r6,r17
    e0ac:	28c5c83a 	sub	r2,r5,r3
    e0b0:	344d803a 	cmpltu	r6,r6,r17
    e0b4:	1187c83a 	sub	r3,r2,r6
    e0b8:	4821883a 	mov	r16,r9
    e0bc:	3825883a 	mov	r18,r7
    e0c0:	003f0606 	br	dcdc <__alt_data_end+0xff00dcdc>
    e0c4:	2023883a 	mov	r17,r4
    e0c8:	003f0906 	br	dcf0 <__alt_data_end+0xff00dcf0>
    e0cc:	0101ffc4 	movi	r4,2047
    e0d0:	813f3a1e 	bne	r16,r4,ddbc <__alt_data_end+0xff00ddbc>
    e0d4:	003ec406 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e0d8:	0005883a 	mov	r2,zero
    e0dc:	003fb106 	br	dfa4 <__alt_data_end+0xff00dfa4>
    e0e0:	0005883a 	mov	r2,zero
    e0e4:	003fbc06 	br	dfd8 <__alt_data_end+0xff00dfd8>
    e0e8:	1c44b03a 	or	r2,r3,r17
    e0ec:	80008e1e 	bne	r16,zero,e328 <__subdf3+0x7c4>
    e0f0:	1000c826 	beq	r2,zero,e414 <__subdf3+0x8b0>
    e0f4:	2984b03a 	or	r2,r5,r6
    e0f8:	103ebb26 	beq	r2,zero,dbe8 <__alt_data_end+0xff00dbe8>
    e0fc:	8989883a 	add	r4,r17,r6
    e100:	1945883a 	add	r2,r3,r5
    e104:	2447803a 	cmpltu	r3,r4,r17
    e108:	1887883a 	add	r3,r3,r2
    e10c:	1880202c 	andhi	r2,r3,128
    e110:	2023883a 	mov	r17,r4
    e114:	103f1626 	beq	r2,zero,dd70 <__alt_data_end+0xff00dd70>
    e118:	00bfe034 	movhi	r2,65408
    e11c:	10bfffc4 	addi	r2,r2,-1
    e120:	5021883a 	mov	r16,r10
    e124:	1886703a 	and	r3,r3,r2
    e128:	003eaf06 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e12c:	3825883a 	mov	r18,r7
    e130:	003f0f06 	br	dd70 <__alt_data_end+0xff00dd70>
    e134:	1c44b03a 	or	r2,r3,r17
    e138:	8000251e 	bne	r16,zero,e1d0 <__subdf3+0x66c>
    e13c:	1000661e 	bne	r2,zero,e2d8 <__subdf3+0x774>
    e140:	2990b03a 	or	r8,r5,r6
    e144:	40009626 	beq	r8,zero,e3a0 <__subdf3+0x83c>
    e148:	2807883a 	mov	r3,r5
    e14c:	3023883a 	mov	r17,r6
    e150:	3825883a 	mov	r18,r7
    e154:	003ea406 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e158:	127ff804 	addi	r9,r2,-32
    e15c:	01000804 	movi	r4,32
    e160:	2a52d83a 	srl	r9,r5,r9
    e164:	11008c26 	beq	r2,r4,e398 <__subdf3+0x834>
    e168:	01001004 	movi	r4,64
    e16c:	2085c83a 	sub	r2,r4,r2
    e170:	2884983a 	sll	r2,r5,r2
    e174:	118cb03a 	or	r6,r2,r6
    e178:	300cc03a 	cmpne	r6,r6,zero
    e17c:	4992b03a 	or	r9,r9,r6
    e180:	0005883a 	mov	r2,zero
    e184:	003f1206 	br	ddd0 <__alt_data_end+0xff00ddd0>
    e188:	0101ffc4 	movi	r4,2047
    e18c:	493f9c1e 	bne	r9,r4,e000 <__alt_data_end+0xff00e000>
    e190:	2807883a 	mov	r3,r5
    e194:	3023883a 	mov	r17,r6
    e198:	4821883a 	mov	r16,r9
    e19c:	3825883a 	mov	r18,r7
    e1a0:	003e9106 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e1a4:	80001f1e 	bne	r16,zero,e224 <__subdf3+0x6c0>
    e1a8:	1c48b03a 	or	r4,r3,r17
    e1ac:	20005a26 	beq	r4,zero,e318 <__subdf3+0x7b4>
    e1b0:	0084303a 	nor	r2,zero,r2
    e1b4:	1000561e 	bne	r2,zero,e310 <__subdf3+0x7ac>
    e1b8:	89a3883a 	add	r17,r17,r6
    e1bc:	1945883a 	add	r2,r3,r5
    e1c0:	898d803a 	cmpltu	r6,r17,r6
    e1c4:	3087883a 	add	r3,r6,r2
    e1c8:	4821883a 	mov	r16,r9
    e1cc:	003f0506 	br	dde4 <__alt_data_end+0xff00dde4>
    e1d0:	10002b1e 	bne	r2,zero,e280 <__subdf3+0x71c>
    e1d4:	2984b03a 	or	r2,r5,r6
    e1d8:	10008026 	beq	r2,zero,e3dc <__subdf3+0x878>
    e1dc:	2807883a 	mov	r3,r5
    e1e0:	3023883a 	mov	r17,r6
    e1e4:	3825883a 	mov	r18,r7
    e1e8:	0401ffc4 	movi	r16,2047
    e1ec:	003e7e06 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e1f0:	3809883a 	mov	r4,r7
    e1f4:	0011883a 	mov	r8,zero
    e1f8:	0005883a 	mov	r2,zero
    e1fc:	003ee306 	br	dd8c <__alt_data_end+0xff00dd8c>
    e200:	1c62b03a 	or	r17,r3,r17
    e204:	8822c03a 	cmpne	r17,r17,zero
    e208:	0005883a 	mov	r2,zero
    e20c:	003f8906 	br	e034 <__alt_data_end+0xff00e034>
    e210:	3809883a 	mov	r4,r7
    e214:	4821883a 	mov	r16,r9
    e218:	0011883a 	mov	r8,zero
    e21c:	0005883a 	mov	r2,zero
    e220:	003eda06 	br	dd8c <__alt_data_end+0xff00dd8c>
    e224:	0101ffc4 	movi	r4,2047
    e228:	49003b26 	beq	r9,r4,e318 <__subdf3+0x7b4>
    e22c:	0085c83a 	sub	r2,zero,r2
    e230:	18c02034 	orhi	r3,r3,128
    e234:	01000e04 	movi	r4,56
    e238:	20806e16 	blt	r4,r2,e3f4 <__subdf3+0x890>
    e23c:	010007c4 	movi	r4,31
    e240:	20807716 	blt	r4,r2,e420 <__subdf3+0x8bc>
    e244:	01000804 	movi	r4,32
    e248:	2089c83a 	sub	r4,r4,r2
    e24c:	1914983a 	sll	r10,r3,r4
    e250:	8890d83a 	srl	r8,r17,r2
    e254:	8908983a 	sll	r4,r17,r4
    e258:	1884d83a 	srl	r2,r3,r2
    e25c:	5222b03a 	or	r17,r10,r8
    e260:	2006c03a 	cmpne	r3,r4,zero
    e264:	88e2b03a 	or	r17,r17,r3
    e268:	89a3883a 	add	r17,r17,r6
    e26c:	1145883a 	add	r2,r2,r5
    e270:	898d803a 	cmpltu	r6,r17,r6
    e274:	3087883a 	add	r3,r6,r2
    e278:	4821883a 	mov	r16,r9
    e27c:	003ed906 	br	dde4 <__alt_data_end+0xff00dde4>
    e280:	2984b03a 	or	r2,r5,r6
    e284:	10004226 	beq	r2,zero,e390 <__subdf3+0x82c>
    e288:	1808d0fa 	srli	r4,r3,3
    e28c:	8822d0fa 	srli	r17,r17,3
    e290:	1806977a 	slli	r3,r3,29
    e294:	2080022c 	andhi	r2,r4,8
    e298:	1c62b03a 	or	r17,r3,r17
    e29c:	10000826 	beq	r2,zero,e2c0 <__subdf3+0x75c>
    e2a0:	2812d0fa 	srli	r9,r5,3
    e2a4:	4880022c 	andhi	r2,r9,8
    e2a8:	1000051e 	bne	r2,zero,e2c0 <__subdf3+0x75c>
    e2ac:	300cd0fa 	srli	r6,r6,3
    e2b0:	2804977a 	slli	r2,r5,29
    e2b4:	4809883a 	mov	r4,r9
    e2b8:	3825883a 	mov	r18,r7
    e2bc:	11a2b03a 	or	r17,r2,r6
    e2c0:	8806d77a 	srli	r3,r17,29
    e2c4:	200890fa 	slli	r4,r4,3
    e2c8:	882290fa 	slli	r17,r17,3
    e2cc:	0401ffc4 	movi	r16,2047
    e2d0:	1906b03a 	or	r3,r3,r4
    e2d4:	003e4406 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e2d8:	2984b03a 	or	r2,r5,r6
    e2dc:	103e4226 	beq	r2,zero,dbe8 <__alt_data_end+0xff00dbe8>
    e2e0:	8989c83a 	sub	r4,r17,r6
    e2e4:	8911803a 	cmpltu	r8,r17,r4
    e2e8:	1945c83a 	sub	r2,r3,r5
    e2ec:	1205c83a 	sub	r2,r2,r8
    e2f0:	1200202c 	andhi	r8,r2,128
    e2f4:	403e9a26 	beq	r8,zero,dd60 <__alt_data_end+0xff00dd60>
    e2f8:	3463c83a 	sub	r17,r6,r17
    e2fc:	28c5c83a 	sub	r2,r5,r3
    e300:	344d803a 	cmpltu	r6,r6,r17
    e304:	1187c83a 	sub	r3,r2,r6
    e308:	3825883a 	mov	r18,r7
    e30c:	003e3606 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e310:	0101ffc4 	movi	r4,2047
    e314:	493fc71e 	bne	r9,r4,e234 <__alt_data_end+0xff00e234>
    e318:	2807883a 	mov	r3,r5
    e31c:	3023883a 	mov	r17,r6
    e320:	4821883a 	mov	r16,r9
    e324:	003e3006 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e328:	10003626 	beq	r2,zero,e404 <__subdf3+0x8a0>
    e32c:	2984b03a 	or	r2,r5,r6
    e330:	10001726 	beq	r2,zero,e390 <__subdf3+0x82c>
    e334:	1808d0fa 	srli	r4,r3,3
    e338:	8822d0fa 	srli	r17,r17,3
    e33c:	1806977a 	slli	r3,r3,29
    e340:	2080022c 	andhi	r2,r4,8
    e344:	1c62b03a 	or	r17,r3,r17
    e348:	10000726 	beq	r2,zero,e368 <__subdf3+0x804>
    e34c:	2812d0fa 	srli	r9,r5,3
    e350:	4880022c 	andhi	r2,r9,8
    e354:	1000041e 	bne	r2,zero,e368 <__subdf3+0x804>
    e358:	300cd0fa 	srli	r6,r6,3
    e35c:	2804977a 	slli	r2,r5,29
    e360:	4809883a 	mov	r4,r9
    e364:	11a2b03a 	or	r17,r2,r6
    e368:	8806d77a 	srli	r3,r17,29
    e36c:	200890fa 	slli	r4,r4,3
    e370:	882290fa 	slli	r17,r17,3
    e374:	3825883a 	mov	r18,r7
    e378:	1906b03a 	or	r3,r3,r4
    e37c:	0401ffc4 	movi	r16,2047
    e380:	003e1906 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e384:	000b883a 	mov	r5,zero
    e388:	0005883a 	mov	r2,zero
    e38c:	003e2e06 	br	dc48 <__alt_data_end+0xff00dc48>
    e390:	0401ffc4 	movi	r16,2047
    e394:	003e1406 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e398:	0005883a 	mov	r2,zero
    e39c:	003f7506 	br	e174 <__alt_data_end+0xff00e174>
    e3a0:	0005883a 	mov	r2,zero
    e3a4:	0009883a 	mov	r4,zero
    e3a8:	003e7806 	br	dd8c <__alt_data_end+0xff00dd8c>
    e3ac:	123ff804 	addi	r8,r2,-32
    e3b0:	01000804 	movi	r4,32
    e3b4:	1a10d83a 	srl	r8,r3,r8
    e3b8:	11002526 	beq	r2,r4,e450 <__subdf3+0x8ec>
    e3bc:	01001004 	movi	r4,64
    e3c0:	2085c83a 	sub	r2,r4,r2
    e3c4:	1884983a 	sll	r2,r3,r2
    e3c8:	1444b03a 	or	r2,r2,r17
    e3cc:	1004c03a 	cmpne	r2,r2,zero
    e3d0:	40a2b03a 	or	r17,r8,r2
    e3d4:	0005883a 	mov	r2,zero
    e3d8:	003f1606 	br	e034 <__alt_data_end+0xff00e034>
    e3dc:	02000434 	movhi	r8,16
    e3e0:	0009883a 	mov	r4,zero
    e3e4:	423fffc4 	addi	r8,r8,-1
    e3e8:	00bfffc4 	movi	r2,-1
    e3ec:	0401ffc4 	movi	r16,2047
    e3f0:	003e6606 	br	dd8c <__alt_data_end+0xff00dd8c>
    e3f4:	1c62b03a 	or	r17,r3,r17
    e3f8:	8822c03a 	cmpne	r17,r17,zero
    e3fc:	0005883a 	mov	r2,zero
    e400:	003f9906 	br	e268 <__alt_data_end+0xff00e268>
    e404:	2807883a 	mov	r3,r5
    e408:	3023883a 	mov	r17,r6
    e40c:	0401ffc4 	movi	r16,2047
    e410:	003df506 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e414:	2807883a 	mov	r3,r5
    e418:	3023883a 	mov	r17,r6
    e41c:	003df206 	br	dbe8 <__alt_data_end+0xff00dbe8>
    e420:	123ff804 	addi	r8,r2,-32
    e424:	01000804 	movi	r4,32
    e428:	1a10d83a 	srl	r8,r3,r8
    e42c:	11000a26 	beq	r2,r4,e458 <__subdf3+0x8f4>
    e430:	01001004 	movi	r4,64
    e434:	2085c83a 	sub	r2,r4,r2
    e438:	1884983a 	sll	r2,r3,r2
    e43c:	1444b03a 	or	r2,r2,r17
    e440:	1004c03a 	cmpne	r2,r2,zero
    e444:	40a2b03a 	or	r17,r8,r2
    e448:	0005883a 	mov	r2,zero
    e44c:	003f8606 	br	e268 <__alt_data_end+0xff00e268>
    e450:	0005883a 	mov	r2,zero
    e454:	003fdc06 	br	e3c8 <__alt_data_end+0xff00e3c8>
    e458:	0005883a 	mov	r2,zero
    e45c:	003ff706 	br	e43c <__alt_data_end+0xff00e43c>

0000e460 <__fixdfsi>:
    e460:	280cd53a 	srli	r6,r5,20
    e464:	00c00434 	movhi	r3,16
    e468:	18ffffc4 	addi	r3,r3,-1
    e46c:	3181ffcc 	andi	r6,r6,2047
    e470:	01c0ff84 	movi	r7,1022
    e474:	28c6703a 	and	r3,r5,r3
    e478:	280ad7fa 	srli	r5,r5,31
    e47c:	3980120e 	bge	r7,r6,e4c8 <__fixdfsi+0x68>
    e480:	00810744 	movi	r2,1053
    e484:	11800c16 	blt	r2,r6,e4b8 <__fixdfsi+0x58>
    e488:	00810cc4 	movi	r2,1075
    e48c:	1185c83a 	sub	r2,r2,r6
    e490:	01c007c4 	movi	r7,31
    e494:	18c00434 	orhi	r3,r3,16
    e498:	38800d16 	blt	r7,r2,e4d0 <__fixdfsi+0x70>
    e49c:	31befb44 	addi	r6,r6,-1043
    e4a0:	2084d83a 	srl	r2,r4,r2
    e4a4:	1986983a 	sll	r3,r3,r6
    e4a8:	1884b03a 	or	r2,r3,r2
    e4ac:	28000726 	beq	r5,zero,e4cc <__fixdfsi+0x6c>
    e4b0:	0085c83a 	sub	r2,zero,r2
    e4b4:	f800283a 	ret
    e4b8:	00a00034 	movhi	r2,32768
    e4bc:	10bfffc4 	addi	r2,r2,-1
    e4c0:	2885883a 	add	r2,r5,r2
    e4c4:	f800283a 	ret
    e4c8:	0005883a 	mov	r2,zero
    e4cc:	f800283a 	ret
    e4d0:	008104c4 	movi	r2,1043
    e4d4:	1185c83a 	sub	r2,r2,r6
    e4d8:	1884d83a 	srl	r2,r3,r2
    e4dc:	003ff306 	br	e4ac <__alt_data_end+0xff00e4ac>

0000e4e0 <__floatsidf>:
    e4e0:	defffd04 	addi	sp,sp,-12
    e4e4:	dfc00215 	stw	ra,8(sp)
    e4e8:	dc400115 	stw	r17,4(sp)
    e4ec:	dc000015 	stw	r16,0(sp)
    e4f0:	20002b26 	beq	r4,zero,e5a0 <__floatsidf+0xc0>
    e4f4:	2023883a 	mov	r17,r4
    e4f8:	2020d7fa 	srli	r16,r4,31
    e4fc:	20002d16 	blt	r4,zero,e5b4 <__floatsidf+0xd4>
    e500:	8809883a 	mov	r4,r17
    e504:	000e6640 	call	e664 <__clzsi2>
    e508:	01410784 	movi	r5,1054
    e50c:	288bc83a 	sub	r5,r5,r2
    e510:	01010cc4 	movi	r4,1075
    e514:	2149c83a 	sub	r4,r4,r5
    e518:	00c007c4 	movi	r3,31
    e51c:	1900160e 	bge	r3,r4,e578 <__floatsidf+0x98>
    e520:	00c104c4 	movi	r3,1043
    e524:	1947c83a 	sub	r3,r3,r5
    e528:	88c6983a 	sll	r3,r17,r3
    e52c:	00800434 	movhi	r2,16
    e530:	10bfffc4 	addi	r2,r2,-1
    e534:	1886703a 	and	r3,r3,r2
    e538:	2941ffcc 	andi	r5,r5,2047
    e53c:	800d883a 	mov	r6,r16
    e540:	0005883a 	mov	r2,zero
    e544:	280a953a 	slli	r5,r5,20
    e548:	31803fcc 	andi	r6,r6,255
    e54c:	01000434 	movhi	r4,16
    e550:	300c97fa 	slli	r6,r6,31
    e554:	213fffc4 	addi	r4,r4,-1
    e558:	1906703a 	and	r3,r3,r4
    e55c:	1946b03a 	or	r3,r3,r5
    e560:	1986b03a 	or	r3,r3,r6
    e564:	dfc00217 	ldw	ra,8(sp)
    e568:	dc400117 	ldw	r17,4(sp)
    e56c:	dc000017 	ldw	r16,0(sp)
    e570:	dec00304 	addi	sp,sp,12
    e574:	f800283a 	ret
    e578:	00c002c4 	movi	r3,11
    e57c:	1887c83a 	sub	r3,r3,r2
    e580:	88c6d83a 	srl	r3,r17,r3
    e584:	8904983a 	sll	r2,r17,r4
    e588:	01000434 	movhi	r4,16
    e58c:	213fffc4 	addi	r4,r4,-1
    e590:	2941ffcc 	andi	r5,r5,2047
    e594:	1906703a 	and	r3,r3,r4
    e598:	800d883a 	mov	r6,r16
    e59c:	003fe906 	br	e544 <__alt_data_end+0xff00e544>
    e5a0:	000d883a 	mov	r6,zero
    e5a4:	000b883a 	mov	r5,zero
    e5a8:	0007883a 	mov	r3,zero
    e5ac:	0005883a 	mov	r2,zero
    e5b0:	003fe406 	br	e544 <__alt_data_end+0xff00e544>
    e5b4:	0123c83a 	sub	r17,zero,r4
    e5b8:	003fd106 	br	e500 <__alt_data_end+0xff00e500>

0000e5bc <__floatunsidf>:
    e5bc:	defffe04 	addi	sp,sp,-8
    e5c0:	dc000015 	stw	r16,0(sp)
    e5c4:	dfc00115 	stw	ra,4(sp)
    e5c8:	2021883a 	mov	r16,r4
    e5cc:	20002226 	beq	r4,zero,e658 <__floatunsidf+0x9c>
    e5d0:	000e6640 	call	e664 <__clzsi2>
    e5d4:	01010784 	movi	r4,1054
    e5d8:	2089c83a 	sub	r4,r4,r2
    e5dc:	01810cc4 	movi	r6,1075
    e5e0:	310dc83a 	sub	r6,r6,r4
    e5e4:	00c007c4 	movi	r3,31
    e5e8:	1980120e 	bge	r3,r6,e634 <__floatunsidf+0x78>
    e5ec:	00c104c4 	movi	r3,1043
    e5f0:	1907c83a 	sub	r3,r3,r4
    e5f4:	80ca983a 	sll	r5,r16,r3
    e5f8:	00800434 	movhi	r2,16
    e5fc:	10bfffc4 	addi	r2,r2,-1
    e600:	2101ffcc 	andi	r4,r4,2047
    e604:	0021883a 	mov	r16,zero
    e608:	288a703a 	and	r5,r5,r2
    e60c:	2008953a 	slli	r4,r4,20
    e610:	00c00434 	movhi	r3,16
    e614:	18ffffc4 	addi	r3,r3,-1
    e618:	28c6703a 	and	r3,r5,r3
    e61c:	8005883a 	mov	r2,r16
    e620:	1906b03a 	or	r3,r3,r4
    e624:	dfc00117 	ldw	ra,4(sp)
    e628:	dc000017 	ldw	r16,0(sp)
    e62c:	dec00204 	addi	sp,sp,8
    e630:	f800283a 	ret
    e634:	00c002c4 	movi	r3,11
    e638:	188bc83a 	sub	r5,r3,r2
    e63c:	814ad83a 	srl	r5,r16,r5
    e640:	00c00434 	movhi	r3,16
    e644:	18ffffc4 	addi	r3,r3,-1
    e648:	81a0983a 	sll	r16,r16,r6
    e64c:	2101ffcc 	andi	r4,r4,2047
    e650:	28ca703a 	and	r5,r5,r3
    e654:	003fed06 	br	e60c <__alt_data_end+0xff00e60c>
    e658:	0009883a 	mov	r4,zero
    e65c:	000b883a 	mov	r5,zero
    e660:	003fea06 	br	e60c <__alt_data_end+0xff00e60c>

0000e664 <__clzsi2>:
    e664:	00bfffd4 	movui	r2,65535
    e668:	11000536 	bltu	r2,r4,e680 <__clzsi2+0x1c>
    e66c:	00803fc4 	movi	r2,255
    e670:	11000f36 	bltu	r2,r4,e6b0 <__clzsi2+0x4c>
    e674:	00800804 	movi	r2,32
    e678:	0007883a 	mov	r3,zero
    e67c:	00000506 	br	e694 <__clzsi2+0x30>
    e680:	00804034 	movhi	r2,256
    e684:	10bfffc4 	addi	r2,r2,-1
    e688:	11000c2e 	bgeu	r2,r4,e6bc <__clzsi2+0x58>
    e68c:	00800204 	movi	r2,8
    e690:	00c00604 	movi	r3,24
    e694:	20c8d83a 	srl	r4,r4,r3
    e698:	00c00074 	movhi	r3,1
    e69c:	18c23804 	addi	r3,r3,2272
    e6a0:	1909883a 	add	r4,r3,r4
    e6a4:	20c00003 	ldbu	r3,0(r4)
    e6a8:	10c5c83a 	sub	r2,r2,r3
    e6ac:	f800283a 	ret
    e6b0:	00800604 	movi	r2,24
    e6b4:	00c00204 	movi	r3,8
    e6b8:	003ff606 	br	e694 <__alt_data_end+0xff00e694>
    e6bc:	00800404 	movi	r2,16
    e6c0:	1007883a 	mov	r3,r2
    e6c4:	003ff306 	br	e694 <__alt_data_end+0xff00e694>

0000e6c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e6c8:	defffd04 	addi	sp,sp,-12
    e6cc:	dfc00215 	stw	ra,8(sp)
    e6d0:	dc400115 	stw	r17,4(sp)
    e6d4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e6d8:	20001f16 	blt	r4,zero,e758 <close+0x90>
    e6dc:	20c00324 	muli	r3,r4,12
    e6e0:	00800074 	movhi	r2,1
    e6e4:	1084a804 	addi	r2,r2,4768
    e6e8:	1885883a 	add	r2,r3,r2
    e6ec:	2021883a 	mov	r16,r4

  if (fd)
    e6f0:	10001926 	beq	r2,zero,e758 <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e6f4:	10c00017 	ldw	r3,0(r2)
    e6f8:	18c00417 	ldw	r3,16(r3)
    e6fc:	18000c26 	beq	r3,zero,e730 <close+0x68>
    e700:	1009883a 	mov	r4,r2
    e704:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e708:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e70c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e710:	000eb000 	call	eb00 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e714:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e718:	88000816 	blt	r17,zero,e73c <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e71c:	dfc00217 	ldw	ra,8(sp)
    e720:	dc400117 	ldw	r17,4(sp)
    e724:	dc000017 	ldw	r16,0(sp)
    e728:	dec00304 	addi	sp,sp,12
    e72c:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e730:	000eb000 	call	eb00 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e734:	0005883a 	mov	r2,zero
    e738:	003ff806 	br	e71c <__alt_data_end+0xff00e71c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e73c:	d0a00d17 	ldw	r2,-32716(gp)
    e740:	10000c26 	beq	r2,zero,e774 <close+0xac>
    e744:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e748:	0463c83a 	sub	r17,zero,r17
    e74c:	14400015 	stw	r17,0(r2)
      return -1;
    e750:	00bfffc4 	movi	r2,-1
    e754:	003ff106 	br	e71c <__alt_data_end+0xff00e71c>
    e758:	d0a00d17 	ldw	r2,-32716(gp)
    e75c:	10000726 	beq	r2,zero,e77c <close+0xb4>
    e760:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e764:	00c01444 	movi	r3,81
    e768:	10c00015 	stw	r3,0(r2)
    return -1;
    e76c:	00bfffc4 	movi	r2,-1
    e770:	003fea06 	br	e71c <__alt_data_end+0xff00e71c>
    e774:	d0a6dc04 	addi	r2,gp,-25744
    e778:	003ff306 	br	e748 <__alt_data_end+0xff00e748>
    e77c:	d0a6dc04 	addi	r2,gp,-25744
    e780:	003ff806 	br	e764 <__alt_data_end+0xff00e764>

0000e784 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e784:	3005883a 	mov	r2,r6
    e788:	f800283a 	ret

0000e78c <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e78c:	20000d16 	blt	r4,zero,e7c4 <fstat+0x38>
    e790:	21000324 	muli	r4,r4,12
    e794:	00800074 	movhi	r2,1
    e798:	1084a804 	addi	r2,r2,4768
    e79c:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e7a0:	20000826 	beq	r4,zero,e7c4 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e7a4:	20800017 	ldw	r2,0(r4)
    e7a8:	10800817 	ldw	r2,32(r2)
    e7ac:	10000126 	beq	r2,zero,e7b4 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e7b0:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e7b4:	00880004 	movi	r2,8192
    e7b8:	28800115 	stw	r2,4(r5)
      return 0;
    e7bc:	0005883a 	mov	r2,zero
    e7c0:	f800283a 	ret
    e7c4:	d0a00d17 	ldw	r2,-32716(gp)
    e7c8:	10000926 	beq	r2,zero,e7f0 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e7cc:	deffff04 	addi	sp,sp,-4
    e7d0:	dfc00015 	stw	ra,0(sp)
    e7d4:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7d8:	00c01444 	movi	r3,81
    e7dc:	10c00015 	stw	r3,0(r2)
    return -1;
    e7e0:	00bfffc4 	movi	r2,-1
  }
}
    e7e4:	dfc00017 	ldw	ra,0(sp)
    e7e8:	dec00104 	addi	sp,sp,4
    e7ec:	f800283a 	ret
    e7f0:	d0a6dc04 	addi	r2,gp,-25744
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7f4:	00c01444 	movi	r3,81
    e7f8:	10c00015 	stw	r3,0(r2)
    return -1;
    e7fc:	00bfffc4 	movi	r2,-1
  }
}
    e800:	f800283a 	ret

0000e804 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e804:	defff004 	addi	sp,sp,-64
    e808:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e80c:	20001316 	blt	r4,zero,e85c <isatty+0x58>
    e810:	20800324 	muli	r2,r4,12
    e814:	00c00074 	movhi	r3,1
    e818:	18c4a804 	addi	r3,r3,4768
    e81c:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e820:	10000e26 	beq	r2,zero,e85c <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e824:	10800017 	ldw	r2,0(r2)
    e828:	10800817 	ldw	r2,32(r2)
    e82c:	10000726 	beq	r2,zero,e84c <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e830:	d80b883a 	mov	r5,sp
    e834:	000e78c0 	call	e78c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e838:	d8800117 	ldw	r2,4(sp)
    e83c:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e840:	dfc00f17 	ldw	ra,60(sp)
    e844:	dec01004 	addi	sp,sp,64
    e848:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e84c:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e850:	dfc00f17 	ldw	ra,60(sp)
    e854:	dec01004 	addi	sp,sp,64
    e858:	f800283a 	ret
    e85c:	d0a00d17 	ldw	r2,-32716(gp)
    e860:	10000726 	beq	r2,zero,e880 <isatty+0x7c>
    e864:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e868:	00c01444 	movi	r3,81
    e86c:	10c00015 	stw	r3,0(r2)
    return 0;
    e870:	0005883a 	mov	r2,zero
  }
}
    e874:	dfc00f17 	ldw	ra,60(sp)
    e878:	dec01004 	addi	sp,sp,64
    e87c:	f800283a 	ret
    e880:	d0a6dc04 	addi	r2,gp,-25744
    e884:	003ff806 	br	e868 <__alt_data_end+0xff00e868>

0000e888 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e888:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e88c:	01000074 	movhi	r4,1
    e890:	01400074 	movhi	r5,1
    e894:	dfc00015 	stw	ra,0(sp)
    e898:	21027f04 	addi	r4,r4,2556
    e89c:	29493c04 	addi	r5,r5,9456
    e8a0:	21400a26 	beq	r4,r5,e8cc <alt_load+0x44>
  {
    while( to != end )
    e8a4:	00800074 	movhi	r2,1
    e8a8:	10893c04 	addi	r2,r2,9456
    e8ac:	20800726 	beq	r4,r2,e8cc <alt_load+0x44>
    {
      *to++ = *from++;
    e8b0:	21800104 	addi	r6,r4,4
    e8b4:	118dc83a 	sub	r6,r2,r6
    e8b8:	300cd0ba 	srli	r6,r6,2
    e8bc:	31800044 	addi	r6,r6,1
    e8c0:	318d883a 	add	r6,r6,r6
    e8c4:	318d883a 	add	r6,r6,r6
    e8c8:	00078c80 	call	78c8 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e8cc:	01000034 	movhi	r4,0
    e8d0:	01400034 	movhi	r5,0
    e8d4:	21000804 	addi	r4,r4,32
    e8d8:	29400804 	addi	r5,r5,32
    e8dc:	21400a26 	beq	r4,r5,e908 <alt_load+0x80>
  {
    while( to != end )
    e8e0:	00800034 	movhi	r2,0
    e8e4:	10806304 	addi	r2,r2,396
    e8e8:	20800726 	beq	r4,r2,e908 <alt_load+0x80>
    {
      *to++ = *from++;
    e8ec:	21800104 	addi	r6,r4,4
    e8f0:	118dc83a 	sub	r6,r2,r6
    e8f4:	300cd0ba 	srli	r6,r6,2
    e8f8:	31800044 	addi	r6,r6,1
    e8fc:	318d883a 	add	r6,r6,r6
    e900:	318d883a 	add	r6,r6,r6
    e904:	00078c80 	call	78c8 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e908:	01000074 	movhi	r4,1
    e90c:	01400074 	movhi	r5,1
    e910:	21009d04 	addi	r4,r4,628
    e914:	29409d04 	addi	r5,r5,628
    e918:	21400a26 	beq	r4,r5,e944 <alt_load+0xbc>
  {
    while( to != end )
    e91c:	00800074 	movhi	r2,1
    e920:	10827f04 	addi	r2,r2,2556
    e924:	20800726 	beq	r4,r2,e944 <alt_load+0xbc>
    {
      *to++ = *from++;
    e928:	21800104 	addi	r6,r4,4
    e92c:	118dc83a 	sub	r6,r2,r6
    e930:	300cd0ba 	srli	r6,r6,2
    e934:	31800044 	addi	r6,r6,1
    e938:	318d883a 	add	r6,r6,r6
    e93c:	318d883a 	add	r6,r6,r6
    e940:	00078c80 	call	78c8 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e944:	000f5200 	call	f520 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e948:	dfc00017 	ldw	ra,0(sp)
    e94c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e950:	000f66c1 	jmpi	f66c <alt_icache_flush_all>

0000e954 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e954:	defffe04 	addi	sp,sp,-8
    e958:	dfc00115 	stw	ra,4(sp)
    e95c:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e960:	20000e16 	blt	r4,zero,e99c <lseek+0x48>
    e964:	21000324 	muli	r4,r4,12
    e968:	00800074 	movhi	r2,1
    e96c:	1084a804 	addi	r2,r2,4768
    e970:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    e974:	20000926 	beq	r4,zero,e99c <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e978:	20800017 	ldw	r2,0(r4)
    e97c:	10800717 	ldw	r2,28(r2)
    e980:	10000d26 	beq	r2,zero,e9b8 <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e984:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    e988:	10000f16 	blt	r2,zero,e9c8 <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    e98c:	dfc00117 	ldw	ra,4(sp)
    e990:	dc000017 	ldw	r16,0(sp)
    e994:	dec00204 	addi	sp,sp,8
    e998:	f800283a 	ret
    e99c:	04001444 	movi	r16,81
    e9a0:	d0a00d17 	ldw	r2,-32716(gp)
    e9a4:	10000626 	beq	r2,zero,e9c0 <lseek+0x6c>
    e9a8:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    e9ac:	14000015 	stw	r16,0(r2)
    rc = -1;
    e9b0:	00bfffc4 	movi	r2,-1
  }

  return rc;
    e9b4:	003ff506 	br	e98c <__alt_data_end+0xff00e98c>
    e9b8:	04002184 	movi	r16,134
    e9bc:	003ff806 	br	e9a0 <__alt_data_end+0xff00e9a0>
    e9c0:	d0a6dc04 	addi	r2,gp,-25744
    e9c4:	003ff906 	br	e9ac <__alt_data_end+0xff00e9ac>
    e9c8:	00a1c83a 	sub	r16,zero,r2
    e9cc:	003ff406 	br	e9a0 <__alt_data_end+0xff00e9a0>

0000e9d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e9d0:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e9d4:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e9d8:	dfc00115 	stw	ra,4(sp)
    e9dc:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e9e0:	000eca40 	call	eca4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e9e4:	000ecc40 	call	ecc4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e9e8:	01800074 	movhi	r6,1
    e9ec:	31827b04 	addi	r6,r6,2540
    e9f0:	300b883a 	mov	r5,r6
    e9f4:	3009883a 	mov	r4,r6
    e9f8:	000f76c0 	call	f76c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e9fc:	000f5a40 	call	f5a4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea00:	01000074 	movhi	r4,1
    ea04:	213d8204 	addi	r4,r4,-2552
    ea08:	000fd500 	call	fd50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea0c:	d1a6e017 	ldw	r6,-25728(gp)
    ea10:	d166e117 	ldw	r5,-25724(gp)
    ea14:	d126e217 	ldw	r4,-25720(gp)
    ea18:	0000e5c0 	call	e5c <main>
  close(STDOUT_FILENO);
    ea1c:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea20:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    ea24:	000e6c80 	call	e6c8 <close>
  exit (result);
    ea28:	8009883a 	mov	r4,r16
    ea2c:	000fd640 	call	fd64 <exit>

0000ea30 <__malloc_lock>:
    ea30:	f800283a 	ret

0000ea34 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    ea34:	f800283a 	ret

0000ea38 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    ea38:	defffe04 	addi	sp,sp,-8
    ea3c:	dfc00115 	stw	ra,4(sp)
    ea40:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ea44:	20002116 	blt	r4,zero,eacc <read+0x94>
    ea48:	21000324 	muli	r4,r4,12
    ea4c:	00800074 	movhi	r2,1
    ea50:	1084a804 	addi	r2,r2,4768
    ea54:	2089883a 	add	r4,r4,r2
  
  if (fd)
    ea58:	20001c26 	beq	r4,zero,eacc <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea5c:	20800217 	ldw	r2,8(r4)
    ea60:	00c00044 	movi	r3,1
    ea64:	108000cc 	andi	r2,r2,3
    ea68:	10c00a26 	beq	r2,r3,ea94 <read+0x5c>
        (fd->dev->read))
    ea6c:	20800017 	ldw	r2,0(r4)
    ea70:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    ea74:	10000726 	beq	r2,zero,ea94 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ea78:	103ee83a 	callr	r2
    ea7c:	1021883a 	mov	r16,r2
    ea80:	10000b16 	blt	r2,zero,eab0 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ea84:	dfc00117 	ldw	ra,4(sp)
    ea88:	dc000017 	ldw	r16,0(sp)
    ea8c:	dec00204 	addi	sp,sp,8
    ea90:	f800283a 	ret
    ea94:	d0a00d17 	ldw	r2,-32716(gp)
    ea98:	10001326 	beq	r2,zero,eae8 <read+0xb0>
    ea9c:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    eaa0:	00c00344 	movi	r3,13
    eaa4:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    eaa8:	00bfffc4 	movi	r2,-1
    eaac:	003ff506 	br	ea84 <__alt_data_end+0xff00ea84>
    eab0:	d0a00d17 	ldw	r2,-32716(gp)
    eab4:	10000e26 	beq	r2,zero,eaf0 <read+0xb8>
    eab8:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    eabc:	0421c83a 	sub	r16,zero,r16
    eac0:	14000015 	stw	r16,0(r2)
          return -1;
    eac4:	00bfffc4 	movi	r2,-1
    eac8:	003fee06 	br	ea84 <__alt_data_end+0xff00ea84>
    eacc:	d0a00d17 	ldw	r2,-32716(gp)
    ead0:	10000926 	beq	r2,zero,eaf8 <read+0xc0>
    ead4:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    ead8:	00c01444 	movi	r3,81
    eadc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eae0:	00bfffc4 	movi	r2,-1
    eae4:	003fe706 	br	ea84 <__alt_data_end+0xff00ea84>
    eae8:	d0a6dc04 	addi	r2,gp,-25744
    eaec:	003fec06 	br	eaa0 <__alt_data_end+0xff00eaa0>
    eaf0:	d0a6dc04 	addi	r2,gp,-25744
    eaf4:	003ff106 	br	eabc <__alt_data_end+0xff00eabc>
    eaf8:	d0a6dc04 	addi	r2,gp,-25744
    eafc:	003ff606 	br	ead8 <__alt_data_end+0xff00ead8>

0000eb00 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    eb00:	00800084 	movi	r2,2
    eb04:	1100060e 	bge	r2,r4,eb20 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    eb08:	21000324 	muli	r4,r4,12
    eb0c:	00800074 	movhi	r2,1
    eb10:	1084a804 	addi	r2,r2,4768
    eb14:	1109883a 	add	r4,r2,r4
    eb18:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    eb1c:	20000015 	stw	zero,0(r4)
    eb20:	f800283a 	ret

0000eb24 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb24:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb28:	00bfff84 	movi	r2,-2
    eb2c:	2884703a 	and	r2,r5,r2
    eb30:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eb34:	d0a00e17 	ldw	r2,-32712(gp)
    eb38:	00ffff04 	movi	r3,-4
    eb3c:	108000c4 	addi	r2,r2,3
    eb40:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eb44:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    eb48:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    eb4c:	1109883a 	add	r4,r2,r4
    eb50:	18c00004 	addi	r3,r3,0
    eb54:	19000336 	bltu	r3,r4,eb64 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    eb58:	d1200e15 	stw	r4,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb5c:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    eb60:	f800283a 	ret
    eb64:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    eb68:	00bfffc4 	movi	r2,-1
    eb6c:	f800283a 	ret

0000eb70 <alt_uncached_free>:
void 
alt_uncached_free(volatile void* ptr)
{
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
    eb70:	00a00034 	movhi	r2,32768
    eb74:	10bfffc4 	addi	r2,r2,-1
    eb78:	2088703a 	and	r4,r4,r2
    eb7c:	0001d941 	jmpi	1d94 <free>

0000eb80 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eb80:	defffd04 	addi	sp,sp,-12
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    eb84:	210007c4 	addi	r4,r4,31
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eb88:	dc000015 	stw	r16,0(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    eb8c:	2020d17a 	srli	r16,r4,5

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    eb90:	01000804 	movi	r4,32
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eb94:	dfc00215 	stw	ra,8(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    eb98:	8020917a 	slli	r16,r16,5
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eb9c:	dc400115 	stw	r17,4(sp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    eba0:	800b883a 	mov	r5,r16
    eba4:	000fd9c0 	call	fd9c <memalign>

  if (ptr == NULL) {
    eba8:	10000a26 	beq	r2,zero,ebd4 <alt_uncached_malloc+0x54>
    return NULL; /* Out of memory */
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    ebac:	1009883a 	mov	r4,r2
    ebb0:	800b883a 	mov	r5,r16
    ebb4:	1023883a 	mov	r17,r2
    ebb8:	000f4e00 	call	f4e0 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    ebbc:	88a00034 	orhi	r2,r17,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    ebc0:	dfc00217 	ldw	ra,8(sp)
    ebc4:	dc400117 	ldw	r17,4(sp)
    ebc8:	dc000017 	ldw	r16,0(sp)
    ebcc:	dec00304 	addi	sp,sp,12
    ebd0:	f800283a 	ret
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);

  if (ptr == NULL) {
    return NULL; /* Out of memory */
    ebd4:	0005883a 	mov	r2,zero
    ebd8:	003ff906 	br	ebc0 <__alt_data_end+0xff00ebc0>

0000ebdc <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    ebdc:	000f4681 	jmpi	f468 <alt_busy_sleep>

0000ebe0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ebe0:	defffe04 	addi	sp,sp,-8
    ebe4:	dfc00115 	stw	ra,4(sp)
    ebe8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ebec:	20002216 	blt	r4,zero,ec78 <write+0x98>
    ebf0:	21000324 	muli	r4,r4,12
    ebf4:	00800074 	movhi	r2,1
    ebf8:	1084a804 	addi	r2,r2,4768
    ebfc:	2089883a 	add	r4,r4,r2
  
  if (fd)
    ec00:	20001d26 	beq	r4,zero,ec78 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ec04:	20800217 	ldw	r2,8(r4)
    ec08:	108000cc 	andi	r2,r2,3
    ec0c:	10000a26 	beq	r2,zero,ec38 <write+0x58>
    ec10:	20800017 	ldw	r2,0(r4)
    ec14:	10800617 	ldw	r2,24(r2)
    ec18:	10000726 	beq	r2,zero,ec38 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ec1c:	103ee83a 	callr	r2
    ec20:	1021883a 	mov	r16,r2
    ec24:	10000d16 	blt	r2,zero,ec5c <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ec28:	dfc00117 	ldw	ra,4(sp)
    ec2c:	dc000017 	ldw	r16,0(sp)
    ec30:	dec00204 	addi	sp,sp,8
    ec34:	f800283a 	ret
    ec38:	d0a00d17 	ldw	r2,-32716(gp)
    ec3c:	10000526 	beq	r2,zero,ec54 <write+0x74>
    ec40:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    ec44:	00c00344 	movi	r3,13
    ec48:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    ec4c:	00bfffc4 	movi	r2,-1
    ec50:	003ff506 	br	ec28 <__alt_data_end+0xff00ec28>
    ec54:	d0a6dc04 	addi	r2,gp,-25744
    ec58:	003ffa06 	br	ec44 <__alt_data_end+0xff00ec44>
    ec5c:	d0a00d17 	ldw	r2,-32716(gp)
    ec60:	10000c26 	beq	r2,zero,ec94 <write+0xb4>
    ec64:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    ec68:	0421c83a 	sub	r16,zero,r16
    ec6c:	14000015 	stw	r16,0(r2)
        return -1;
    ec70:	00bfffc4 	movi	r2,-1
    ec74:	003fec06 	br	ec28 <__alt_data_end+0xff00ec28>
    ec78:	d0a00d17 	ldw	r2,-32716(gp)
    ec7c:	10000726 	beq	r2,zero,ec9c <write+0xbc>
    ec80:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ec84:	00c01444 	movi	r3,81
    ec88:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    ec8c:	00bfffc4 	movi	r2,-1
    ec90:	003fe506 	br	ec28 <__alt_data_end+0xff00ec28>
    ec94:	d0a6dc04 	addi	r2,gp,-25744
    ec98:	003ff306 	br	ec68 <__alt_data_end+0xff00ec68>
    ec9c:	d0a6dc04 	addi	r2,gp,-25744
    eca0:	003ff806 	br	ec84 <__alt_data_end+0xff00ec84>

0000eca4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eca4:	deffff04 	addi	sp,sp,-4
    eca8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ecac:	000fb100 	call	fb10 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ecb0:	00800044 	movi	r2,1
    ecb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ecb8:	dfc00017 	ldw	ra,0(sp)
    ecbc:	dec00104 	addi	sp,sp,4
    ecc0:	f800283a 	ret

0000ecc4 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ecc4:	00804034 	movhi	r2,256
    ecc8:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    eccc:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ecd0:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ecd4:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ecd8:	0080bef4 	movhi	r2,763
    ecdc:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ece0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ece4:	01c0fa04 	movi	r7,1000
    ece8:	21040804 	addi	r4,r4,4128
    ecec:	01800104 	movi	r6,4
    ecf0:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ecf4:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ecf8:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ecfc:	84051c04 	addi	r16,r16,5232
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ed00:	d0a6e315 	stw	r2,-25716(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ed04:	000f3280 	call	f328 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ed08:	8009883a 	mov	r4,r16
    ed0c:	000b883a 	mov	r5,zero
    ed10:	000d883a 	mov	r6,zero
    ed14:	000eec00 	call	eec0 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ed18:	d1600904 	addi	r5,gp,-32732
    ed1c:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    ed20:	dfc00117 	ldw	ra,4(sp)
    ed24:	dc000017 	ldw	r16,0(sp)
    ed28:	dec00204 	addi	sp,sp,8
    ed2c:	000f5381 	jmpi	f538 <alt_dev_llist_insert>

0000ed30 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ed30:	20800017 	ldw	r2,0(r4)
    ed34:	21c00217 	ldw	r7,8(r4)
    ed38:	11000a04 	addi	r4,r2,40
    ed3c:	000eff81 	jmpi	eff8 <altera_avalon_jtag_uart_read>

0000ed40 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ed40:	20800017 	ldw	r2,0(r4)
    ed44:	21c00217 	ldw	r7,8(r4)
    ed48:	11000a04 	addi	r4,r2,40
    ed4c:	000f14c1 	jmpi	f14c <altera_avalon_jtag_uart_write>

0000ed50 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ed50:	20800017 	ldw	r2,0(r4)
    ed54:	21400217 	ldw	r5,8(r4)
    ed58:	11000a04 	addi	r4,r2,40
    ed5c:	000ef381 	jmpi	ef38 <altera_avalon_jtag_uart_close>

0000ed60 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ed60:	21000017 	ldw	r4,0(r4)
    ed64:	21000a04 	addi	r4,r4,40
    ed68:	000ef841 	jmpi	ef84 <altera_avalon_jtag_uart_ioctl>

0000ed6c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ed6c:	20800017 	ldw	r2,0(r4)
    ed70:	10800104 	addi	r2,r2,4
    ed74:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ed78:	18c1000c 	andi	r3,r3,1024
    ed7c:	1800081e 	bne	r3,zero,eda0 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ed80:	20800917 	ldw	r2,36(r4)
    ed84:	00e00034 	movhi	r3,32768
    ed88:	18ffff04 	addi	r3,r3,-4
    ed8c:	18800236 	bltu	r3,r2,ed98 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    ed90:	10800044 	addi	r2,r2,1
    ed94:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ed98:	d0a6e717 	ldw	r2,-25700(gp)
    ed9c:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    eda0:	20c00817 	ldw	r3,32(r4)
    eda4:	18c10014 	ori	r3,r3,1024
    eda8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    edac:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    edb0:	d0a6e717 	ldw	r2,-25700(gp)
    edb4:	f800283a 	ret

0000edb8 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    edb8:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    edbc:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    edc0:	02bfff44 	movi	r10,-3
    edc4:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    edc8:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    edcc:	3880c00c 	andi	r2,r7,768
    edd0:	10003426 	beq	r2,zero,eea4 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    edd4:	3880400c 	andi	r2,r7,256
    edd8:	10001726 	beq	r2,zero,ee38 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eddc:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ede0:	20c00b17 	ldw	r3,44(r4)
    ede4:	10800044 	addi	r2,r2,1
    ede8:	1081ffcc 	andi	r2,r2,2047
    edec:	18800d1e 	bne	r3,r2,ee24 <altera_avalon_jtag_uart_irq+0x6c>
    edf0:	00002d06 	br	eea8 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    edf4:	20800a17 	ldw	r2,40(r4)
    edf8:	2085883a 	add	r2,r4,r2
    edfc:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee00:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    ee04:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee08:	10800044 	addi	r2,r2,1
    ee0c:	1081ffcc 	andi	r2,r2,2047
    ee10:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee14:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ee18:	10800044 	addi	r2,r2,1
    ee1c:	1081ffcc 	andi	r2,r2,2047
    ee20:	11400326 	beq	r2,r5,ee30 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ee24:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ee28:	18a0000c 	andi	r2,r3,32768
    ee2c:	103ff11e 	bne	r2,zero,edf4 <__alt_data_end+0xff00edf4>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ee30:	18ffffec 	andhi	r3,r3,65535
    ee34:	18001c1e 	bne	r3,zero,eea8 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ee38:	3880800c 	andi	r2,r7,512
    ee3c:	103fe226 	beq	r2,zero,edc8 <__alt_data_end+0xff00edc8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ee40:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    ee44:	38000b1e 	bne	r7,zero,ee74 <altera_avalon_jtag_uart_irq+0xbc>
    ee48:	003fdf06 	br	edc8 <__alt_data_end+0xff00edc8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ee4c:	20800d17 	ldw	r2,52(r4)
    ee50:	2085883a 	add	r2,r4,r2
    ee54:	10820e07 	ldb	r2,2104(r2)
    ee58:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee5c:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ee60:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee64:	10800044 	addi	r2,r2,1
    ee68:	1081ffcc 	andi	r2,r2,2047
    ee6c:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ee70:	383fd526 	beq	r7,zero,edc8 <__alt_data_end+0xff00edc8>
    ee74:	20c00d17 	ldw	r3,52(r4)
    ee78:	20800c17 	ldw	r2,48(r4)
    ee7c:	18bff31e 	bne	r3,r2,ee4c <__alt_data_end+0xff00ee4c>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ee80:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee84:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ee88:	1284703a 	and	r2,r2,r10
    ee8c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee90:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ee94:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ee98:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ee9c:	3880c00c 	andi	r2,r7,768
    eea0:	103fcc1e 	bne	r2,zero,edd4 <__alt_data_end+0xff00edd4>
    eea4:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eea8:	20800817 	ldw	r2,32(r4)
    eeac:	1244703a 	and	r2,r2,r9
    eeb0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    eeb4:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eeb8:	40800037 	ldwio	r2,0(r8)
    eebc:	003fde06 	br	ee38 <__alt_data_end+0xff00ee38>

0000eec0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eec0:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    eec4:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eec8:	dc000115 	stw	r16,4(sp)
    eecc:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eed0:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eed4:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eed8:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eedc:	2809883a 	mov	r4,r5
    eee0:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    eee4:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    eee8:	01800074 	movhi	r6,1
    eeec:	31bb6e04 	addi	r6,r6,-4680
    eef0:	800f883a 	mov	r7,r16
    eef4:	d8000015 	stw	zero,0(sp)
    eef8:	000f6780 	call	f678 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    eefc:	d166e717 	ldw	r5,-25700(gp)
    ef00:	01800074 	movhi	r6,1
    ef04:	31bb5b04 	addi	r6,r6,-4756
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ef08:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ef0c:	800f883a 	mov	r7,r16
    ef10:	81000204 	addi	r4,r16,8
    ef14:	000f3e80 	call	f3e8 <alt_alarm_start>
    ef18:	1000030e 	bge	r2,zero,ef28 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ef1c:	00a00034 	movhi	r2,32768
    ef20:	10bfffc4 	addi	r2,r2,-1
    ef24:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ef28:	dfc00217 	ldw	ra,8(sp)
    ef2c:	dc000117 	ldw	r16,4(sp)
    ef30:	dec00304 	addi	sp,sp,12
    ef34:	f800283a 	ret

0000ef38 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    ef38:	2890000c 	andi	r2,r5,16384
    ef3c:	21c00c17 	ldw	r7,48(r4)
    ef40:	10000426 	beq	r2,zero,ef54 <altera_avalon_jtag_uart_close+0x1c>
    ef44:	00000606 	br	ef60 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ef48:	21800917 	ldw	r6,36(r4)
    ef4c:	20c00117 	ldw	r3,4(r4)
    ef50:	30c00a2e 	bgeu	r6,r3,ef7c <altera_avalon_jtag_uart_close+0x44>
    ef54:	20c00d17 	ldw	r3,52(r4)
    ef58:	38fffb1e 	bne	r7,r3,ef48 <__alt_data_end+0xff00ef48>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    ef5c:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ef60:	20800d17 	ldw	r2,52(r4)
    ef64:	11c00526 	beq	r2,r7,ef7c <altera_avalon_jtag_uart_close+0x44>
    ef68:	20c00917 	ldw	r3,36(r4)
    ef6c:	20800117 	ldw	r2,4(r4)
    ef70:	1880022e 	bgeu	r3,r2,ef7c <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    ef74:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    ef78:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ef7c:	0005883a 	mov	r2,zero
    ef80:	f800283a 	ret

0000ef84 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    ef84:	009a8044 	movi	r2,27137
    ef88:	28800d26 	beq	r5,r2,efc0 <altera_avalon_jtag_uart_ioctl+0x3c>
    ef8c:	009a8084 	movi	r2,27138
    ef90:	2880091e 	bne	r5,r2,efb8 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ef94:	21400117 	ldw	r5,4(r4)
    ef98:	00a00034 	movhi	r2,32768
    ef9c:	10bfffc4 	addi	r2,r2,-1
    efa0:	28800526 	beq	r5,r2,efb8 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    efa4:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    efa8:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    efac:	1947803a 	cmpltu	r3,r3,r5
    efb0:	30c00015 	stw	r3,0(r6)
    efb4:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    efb8:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    efbc:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    efc0:	20c00117 	ldw	r3,4(r4)
    efc4:	00a00034 	movhi	r2,32768
    efc8:	10bfffc4 	addi	r2,r2,-1
    efcc:	18bffa26 	beq	r3,r2,efb8 <__alt_data_end+0xff00efb8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    efd0:	30800017 	ldw	r2,0(r6)
    efd4:	01600034 	movhi	r5,32768
    efd8:	297fff04 	addi	r5,r5,-4
    efdc:	10ffff84 	addi	r3,r2,-2
    efe0:	28c0022e 	bgeu	r5,r3,efec <altera_avalon_jtag_uart_ioctl+0x68>
    efe4:	00a00034 	movhi	r2,32768
    efe8:	10bfff84 	addi	r2,r2,-2
    efec:	20800115 	stw	r2,4(r4)
      rc = 0;
    eff0:	0005883a 	mov	r2,zero
    eff4:	f800283a 	ret

0000eff8 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    eff8:	01804e0e 	bge	zero,r6,f134 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    effc:	defff504 	addi	sp,sp,-44
    f000:	dc000115 	stw	r16,4(sp)
    f004:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f008:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f00c:	dd800715 	stw	r22,28(sp)
    f010:	dd400615 	stw	r21,24(sp)
    f014:	dd000515 	stw	r20,20(sp)
    f018:	dcc00415 	stw	r19,16(sp)
    f01c:	dc800315 	stw	r18,12(sp)
    f020:	dfc00a15 	stw	ra,40(sp)
    f024:	df000915 	stw	fp,36(sp)
    f028:	ddc00815 	stw	r23,32(sp)
    f02c:	dc400215 	stw	r17,8(sp)
    f030:	3027883a 	mov	r19,r6
    f034:	2025883a 	mov	r18,r4
    f038:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f03c:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f040:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f044:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f048:	b02f883a 	mov	r23,r22
    f04c:	00000a06 	br	f078 <altera_avalon_jtag_uart_read+0x80>
    f050:	9880012e 	bgeu	r19,r2,f058 <altera_avalon_jtag_uart_read+0x60>
    f054:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f058:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f05c:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f060:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f064:	00078c80 	call	78c8 <memcpy>
      ptr   += n;
      space -= n;
    f068:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f06c:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    f070:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    f074:	04c0080e 	bge	zero,r19,f098 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f078:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f07c:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    f080:	e4000136 	bltu	fp,r16,f088 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    f084:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f088:	a40b883a 	add	r5,r20,r16
    f08c:	b809883a 	mov	r4,r23
    f090:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    f094:	103fee1e 	bne	r2,zero,f050 <__alt_data_end+0xff00f050>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f098:	bd800d1e 	bne	r23,r22,f0d0 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f09c:	d8800017 	ldw	r2,0(sp)
    f0a0:	10000426 	beq	r2,zero,f0b4 <altera_avalon_jtag_uart_read+0xbc>
    f0a4:	00002106 	br	f12c <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f0a8:	90c00917 	ldw	r3,36(r18)
    f0ac:	90800117 	ldw	r2,4(r18)
    f0b0:	1880022e 	bgeu	r3,r2,f0bc <altera_avalon_jtag_uart_read+0xc4>
    f0b4:	90800a17 	ldw	r2,40(r18)
    f0b8:	e0bffb26 	beq	fp,r2,f0a8 <__alt_data_end+0xff00f0a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f0bc:	90800a17 	ldw	r2,40(r18)
    f0c0:	e0800126 	beq	fp,r2,f0c8 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f0c4:	04ffe016 	blt	zero,r19,f048 <__alt_data_end+0xff00f048>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    f0c8:	00bffec4 	movi	r2,-5
    f0cc:	00000b06 	br	f0fc <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0d0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0d4:	00bfff84 	movi	r2,-2
    f0d8:	2084703a 	and	r2,r4,r2
    f0dc:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f0e0:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0e4:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f0e8:	10800054 	ori	r2,r2,1
    f0ec:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0f0:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0f4:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    f0f8:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    f0fc:	dfc00a17 	ldw	ra,40(sp)
    f100:	df000917 	ldw	fp,36(sp)
    f104:	ddc00817 	ldw	r23,32(sp)
    f108:	dd800717 	ldw	r22,28(sp)
    f10c:	dd400617 	ldw	r21,24(sp)
    f110:	dd000517 	ldw	r20,20(sp)
    f114:	dcc00417 	ldw	r19,16(sp)
    f118:	dc800317 	ldw	r18,12(sp)
    f11c:	dc400217 	ldw	r17,8(sp)
    f120:	dc000117 	ldw	r16,4(sp)
    f124:	dec00b04 	addi	sp,sp,44
    f128:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f12c:	00bffd44 	movi	r2,-11
    f130:	003ff206 	br	f0fc <__alt_data_end+0xff00f0fc>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    f134:	39d0000c 	andi	r7,r7,16384
    f138:	3800021e 	bne	r7,zero,f144 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    f13c:	00bffec4 	movi	r2,-5
}
    f140:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f144:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    f148:	f800283a 	ret

0000f14c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f14c:	defff604 	addi	sp,sp,-40
    f150:	dc000015 	stw	r16,0(sp)
    f154:	dfc00915 	stw	ra,36(sp)
    f158:	df000815 	stw	fp,32(sp)
    f15c:	ddc00715 	stw	r23,28(sp)
    f160:	dd800615 	stw	r22,24(sp)
    f164:	dd400515 	stw	r21,20(sp)
    f168:	dd000415 	stw	r20,16(sp)
    f16c:	dcc00315 	stw	r19,12(sp)
    f170:	dc800215 	stw	r18,8(sp)
    f174:	dc400115 	stw	r17,4(sp)
    f178:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f17c:	01804d0e 	bge	zero,r6,f2b4 <altera_avalon_jtag_uart_write+0x168>
    f180:	302d883a 	mov	r22,r6
    f184:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f188:	3c50000c 	andi	r17,r7,16384
    f18c:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f190:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f194:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f198:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    f19c:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    f1a0:	e0c03a2e 	bgeu	fp,r3,f28c <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    f1a4:	1dffffc4 	addi	r23,r3,-1
    f1a8:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    f1ac:	b800131e 	bne	r23,zero,f1fc <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1b0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1b4:	24c4703a 	and	r2,r4,r19
    f1b8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1bc:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1c0:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1c4:	10800094 	ori	r2,r2,2
    f1c8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1cc:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1d0:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f1d4:	8800341e 	bne	r17,zero,f2a8 <altera_avalon_jtag_uart_write+0x15c>
    f1d8:	81000917 	ldw	r4,36(r16)
    f1dc:	00000206 	br	f1e8 <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f1e0:	80800117 	ldw	r2,4(r16)
    f1e4:	2080022e 	bgeu	r4,r2,f1f0 <altera_avalon_jtag_uart_write+0xa4>
    f1e8:	80800d17 	ldw	r2,52(r16)
    f1ec:	18bffc26 	beq	r3,r2,f1e0 <__alt_data_end+0xff00f1e0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f1f0:	203fe926 	beq	r4,zero,f198 <__alt_data_end+0xff00f198>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f1f4:	ad00181e 	bne	r21,r20,f258 <altera_avalon_jtag_uart_write+0x10c>
    f1f8:	00003a06 	br	f2e4 <altera_avalon_jtag_uart_write+0x198>
    f1fc:	b5c0012e 	bgeu	r22,r23,f204 <altera_avalon_jtag_uart_write+0xb8>
    f200:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f204:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f208:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f20c:	a80b883a 	mov	r5,r21
    f210:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f214:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f218:	00078c80 	call	78c8 <memcpy>
      ptr   += n;
      count -= n;
    f21c:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f220:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f224:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f228:	05bfdb16 	blt	zero,r22,f198 <__alt_data_end+0xff00f198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f22c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f230:	00bfff84 	movi	r2,-2
    f234:	1884703a 	and	r2,r3,r2
    f238:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f23c:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f240:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f244:	10800094 	ori	r2,r2,2
    f248:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f24c:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f250:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f254:	a5402226 	beq	r20,r21,f2e0 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f258:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f25c:	dfc00917 	ldw	ra,36(sp)
    f260:	df000817 	ldw	fp,32(sp)
    f264:	ddc00717 	ldw	r23,28(sp)
    f268:	dd800617 	ldw	r22,24(sp)
    f26c:	dd400517 	ldw	r21,20(sp)
    f270:	dd000417 	ldw	r20,16(sp)
    f274:	dcc00317 	ldw	r19,12(sp)
    f278:	dc800217 	ldw	r18,8(sp)
    f27c:	dc400117 	ldw	r17,4(sp)
    f280:	dc000017 	ldw	r16,0(sp)
    f284:	dec00a04 	addi	sp,sp,40
    f288:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f28c:	18000326 	beq	r3,zero,f29c <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f290:	00820004 	movi	r2,2048
    f294:	172fc83a 	sub	r23,r2,fp
    f298:	003fc406 	br	f1ac <__alt_data_end+0xff00f1ac>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f29c:	0081ffc4 	movi	r2,2047
    f2a0:	172fc83a 	sub	r23,r2,fp
    f2a4:	003fc106 	br	f1ac <__alt_data_end+0xff00f1ac>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f2a8:	ad3feb1e 	bne	r21,r20,f258 <__alt_data_end+0xff00f258>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f2ac:	00bffd44 	movi	r2,-11
    f2b0:	003fea06 	br	f25c <__alt_data_end+0xff00f25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2b4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2b8:	00bfff84 	movi	r2,-2
    f2bc:	1884703a 	and	r2,r3,r2
    f2c0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2c4:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f2c8:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2cc:	10800094 	ori	r2,r2,2
    f2d0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f2d4:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2d8:	1801703a 	wrctl	status,r3
    f2dc:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f2e0:	883ff21e 	bne	r17,zero,f2ac <__alt_data_end+0xff00f2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f2e4:	00bffec4 	movi	r2,-5
    f2e8:	003fdc06 	br	f25c <__alt_data_end+0xff00f25c>

0000f2ec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f2ec:	defffe04 	addi	sp,sp,-8
    f2f0:	dfc00115 	stw	ra,4(sp)
    f2f4:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f2f8:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f2fc:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f300:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f304:	00bfff84 	movi	r2,-2
    f308:	8084703a 	and	r2,r16,r2
    f30c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f310:	000fa1c0 	call	fa1c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f314:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f318:	dfc00117 	ldw	ra,4(sp)
    f31c:	dc000017 	ldw	r16,0(sp)
    f320:	dec00204 	addi	sp,sp,8
    f324:	f800283a 	ret

0000f328 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f328:	d0e6e717 	ldw	r3,-25700(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f32c:	defffe04 	addi	sp,sp,-8
    f330:	dfc00115 	stw	ra,4(sp)
    f334:	2005883a 	mov	r2,r4
    f338:	2809883a 	mov	r4,r5
    f33c:	300b883a 	mov	r5,r6
    f340:	1800011e 	bne	r3,zero,f348 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f344:	d1e6e715 	stw	r7,-25700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f348:	00c001c4 	movi	r3,7
    f34c:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f350:	01800074 	movhi	r6,1
    f354:	31bcbb04 	addi	r6,r6,-3348
    f358:	d8000015 	stw	zero,0(sp)
    f35c:	100f883a 	mov	r7,r2
    f360:	000f6780 	call	f678 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f364:	dfc00117 	ldw	ra,4(sp)
    f368:	dec00204 	addi	sp,sp,8
    f36c:	f800283a 	ret

0000f370 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f370:	d0e6e317 	ldw	r3,-25716(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f374:	d0a6e417 	ldw	r2,-25712(gp)

  if (!altera_avalon_timer_ts_freq)
    f378:	18000a26 	beq	r3,zero,f3a4 <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f37c:	10c00104 	addi	r3,r2,4
    f380:	01000204 	movi	r4,8
    f384:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f388:	013fffd4 	movui	r4,65535
    f38c:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f390:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f394:	00800104 	movi	r2,4
    f398:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f39c:	0005883a 	mov	r2,zero
    f3a0:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f3a4:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f3a8:	f800283a 	ret

0000f3ac <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f3ac:	d0a6e317 	ldw	r2,-25716(gp)
    f3b0:	1000021e 	bne	r2,zero,f3bc <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f3b4:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f3b8:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f3bc:	d0e6e417 	ldw	r3,-25712(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f3c0:	18800404 	addi	r2,r3,16
    f3c4:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f3c8:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f3cc:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f3d0:	1806943a 	slli	r3,r3,16
    f3d4:	10bfffcc 	andi	r2,r2,65535
    f3d8:	1884303a 	nor	r2,r3,r2
    f3dc:	f800283a 	ret

0000f3e0 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f3e0:	d0a6e317 	ldw	r2,-25716(gp)
    f3e4:	f800283a 	ret

0000f3e8 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f3e8:	d0a6e717 	ldw	r2,-25700(gp)
    f3ec:	10001a26 	beq	r2,zero,f458 <alt_alarm_start+0x70>
  {
    if (alarm)
    f3f0:	20001b26 	beq	r4,zero,f460 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f3f4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f3f8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3fc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f400:	00bfff84 	movi	r2,-2
    f404:	1884703a 	and	r2,r3,r2
    f408:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f40c:	d0a6e617 	ldw	r2,-25704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f410:	11800044 	addi	r6,r2,1
    f414:	314b883a 	add	r5,r6,r5
    f418:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f41c:	28800b36 	bltu	r5,r2,f44c <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f420:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f424:	d0a01004 	addi	r2,gp,-32704
    f428:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f42c:	d0a01017 	ldw	r2,-32704(gp)
    f430:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f434:	d0a01017 	ldw	r2,-32704(gp)
  list->next           = entry;
    f438:	d1201015 	stw	r4,-32704(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f43c:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f440:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f444:	0005883a 	mov	r2,zero
    f448:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f44c:	00800044 	movi	r2,1
    f450:	20800405 	stb	r2,16(r4)
    f454:	003ff306 	br	f424 <__alt_data_end+0xff00f424>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f458:	00bfde84 	movi	r2,-134
    f45c:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f460:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f464:	f800283a 	ret

0000f468 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f468:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f46c:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f470:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f474:	dc000015 	stw	r16,0(sp)
    f478:	dfc00115 	stw	ra,4(sp)
    f47c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f480:	000bfa40 	call	bfa4 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f484:	10001226 	beq	r2,zero,f4d0 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f488:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f48c:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f490:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f494:	21000044 	addi	r4,r4,1
    f498:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f49c:	297fffc4 	addi	r5,r5,-1
    f4a0:	283ffe1e 	bne	r5,zero,f49c <__alt_data_end+0xff00f49c>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f4a4:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f4a8:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f4ac:	18bffb16 	blt	r3,r2,f49c <__alt_data_end+0xff00f49c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f4b0:	8020913a 	slli	r16,r16,4
    f4b4:	843fffc4 	addi	r16,r16,-1
    f4b8:	803ffe1e 	bne	r16,zero,f4b4 <__alt_data_end+0xff00f4b4>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f4bc:	0005883a 	mov	r2,zero
    f4c0:	dfc00117 	ldw	ra,4(sp)
    f4c4:	dc000017 	ldw	r16,0(sp)
    f4c8:	dec00204 	addi	sp,sp,8
    f4cc:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f4d0:	8020913a 	slli	r16,r16,4
    f4d4:	843fffc4 	addi	r16,r16,-1
    f4d8:	043ffe16 	blt	zero,r16,f4d4 <__alt_data_end+0xff00f4d4>
    f4dc:	003ff706 	br	f4bc <__alt_data_end+0xff00f4bc>

0000f4e0 <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
    f4e0:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f4e4:	2005883a 	mov	r2,r4
    f4e8:	2140092e 	bgeu	r4,r5,f510 <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
    f4ec:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f4f0:	10800804 	addi	r2,r2,32
    f4f4:	117ffd36 	bltu	r2,r5,f4ec <__alt_data_end+0xff00f4ec>
    f4f8:	0104303a 	nor	r2,zero,r4
    f4fc:	1145883a 	add	r2,r2,r5
    f500:	1004d17a 	srli	r2,r2,5
    f504:	10800044 	addi	r2,r2,1
    f508:	1004917a 	slli	r2,r2,5
    f50c:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
    f510:	210007cc 	andi	r4,r4,31
    f514:	20000126 	beq	r4,zero,f51c <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
    f518:	1000001b 	flushda	0(r2)
    f51c:	f800283a 	ret

0000f520 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f520:	0005883a 	mov	r2,zero
    f524:	00c40004 	movi	r3,4096
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f528:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f52c:	10800804 	addi	r2,r2,32
    f530:	10fffd1e 	bne	r2,r3,f528 <__alt_data_end+0xff00f528>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f534:	f800283a 	ret

0000f538 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f538:	20000a26 	beq	r4,zero,f564 <alt_dev_llist_insert+0x2c>
    f53c:	20800217 	ldw	r2,8(r4)
    f540:	10000826 	beq	r2,zero,f564 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f544:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f548:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f54c:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f550:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f554:	28c00017 	ldw	r3,0(r5)
    f558:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f55c:	29000015 	stw	r4,0(r5)
    f560:	f800283a 	ret
    f564:	d0a00d17 	ldw	r2,-32716(gp)
    f568:	10000926 	beq	r2,zero,f590 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f56c:	deffff04 	addi	sp,sp,-4
    f570:	dfc00015 	stw	ra,0(sp)
    f574:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f578:	00c00584 	movi	r3,22
    f57c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f580:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f584:	dfc00017 	ldw	ra,0(sp)
    f588:	dec00104 	addi	sp,sp,4
    f58c:	f800283a 	ret
    f590:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f594:	00c00584 	movi	r3,22
    f598:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f59c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f5a0:	f800283a 	ret

0000f5a4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f5a4:	defffc04 	addi	sp,sp,-16
    f5a8:	dc800215 	stw	r18,8(sp)
    f5ac:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f5b0:	04800074 	movhi	r18,1
    f5b4:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f5b8:	dfc00315 	stw	ra,12(sp)
    f5bc:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f5c0:	84009c04 	addi	r16,r16,624
    f5c4:	94809d04 	addi	r18,r18,628
    f5c8:	84800936 	bltu	r16,r18,f5f0 <_do_ctors+0x4c>
    f5cc:	84a5c83a 	sub	r18,r16,r18
    f5d0:	9024d0ba 	srli	r18,r18,2
    f5d4:	0023883a 	mov	r17,zero
    f5d8:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f5dc:	80800017 	ldw	r2,0(r16)
    f5e0:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f5e4:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f5e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f5ec:	8cbffb1e 	bne	r17,r18,f5dc <__alt_data_end+0xff00f5dc>
        (*ctor) (); 
}
    f5f0:	dfc00317 	ldw	ra,12(sp)
    f5f4:	dc800217 	ldw	r18,8(sp)
    f5f8:	dc400117 	ldw	r17,4(sp)
    f5fc:	dc000017 	ldw	r16,0(sp)
    f600:	dec00404 	addi	sp,sp,16
    f604:	f800283a 	ret

0000f608 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f608:	defffc04 	addi	sp,sp,-16
    f60c:	dc800215 	stw	r18,8(sp)
    f610:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f614:	04800074 	movhi	r18,1
    f618:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f61c:	dfc00315 	stw	ra,12(sp)
    f620:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f624:	84009c04 	addi	r16,r16,624
    f628:	94809d04 	addi	r18,r18,628
    f62c:	84800936 	bltu	r16,r18,f654 <_do_dtors+0x4c>
    f630:	84a5c83a 	sub	r18,r16,r18
    f634:	9024d0ba 	srli	r18,r18,2
    f638:	0023883a 	mov	r17,zero
    f63c:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f640:	80800017 	ldw	r2,0(r16)
    f644:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f648:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f64c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f650:	8cbffb1e 	bne	r17,r18,f640 <__alt_data_end+0xff00f640>
        (*dtor) (); 
}
    f654:	dfc00317 	ldw	ra,12(sp)
    f658:	dc800217 	ldw	r18,8(sp)
    f65c:	dc400117 	ldw	r17,4(sp)
    f660:	dc000017 	ldw	r16,0(sp)
    f664:	dec00404 	addi	sp,sp,16
    f668:	f800283a 	ret

0000f66c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f66c:	01440004 	movi	r5,4096
    f670:	0009883a 	mov	r4,zero
    f674:	000fc8c1 	jmpi	fc8c <alt_icache_flush>

0000f678 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f678:	000f7041 	jmpi	f704 <alt_iic_isr_register>

0000f67c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f67c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f680:	00bfff84 	movi	r2,-2
    f684:	2084703a 	and	r2,r4,r2
    f688:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f68c:	00c00044 	movi	r3,1
    f690:	d0a6e517 	ldw	r2,-25708(gp)
    f694:	194a983a 	sll	r5,r3,r5
    f698:	288ab03a 	or	r5,r5,r2
    f69c:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f6a0:	d0a6e517 	ldw	r2,-25708(gp)
    f6a4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6a8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f6ac:	0005883a 	mov	r2,zero
    f6b0:	f800283a 	ret

0000f6b4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6b4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6b8:	00bfff84 	movi	r2,-2
    f6bc:	2084703a 	and	r2,r4,r2
    f6c0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f6c4:	00ffff84 	movi	r3,-2
    f6c8:	d0a6e517 	ldw	r2,-25708(gp)
    f6cc:	194a183a 	rol	r5,r3,r5
    f6d0:	288a703a 	and	r5,r5,r2
    f6d4:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f6d8:	d0a6e517 	ldw	r2,-25708(gp)
    f6dc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6e0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f6e4:	0005883a 	mov	r2,zero
    f6e8:	f800283a 	ret

0000f6ec <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f6ec:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f6f0:	00800044 	movi	r2,1
    f6f4:	1144983a 	sll	r2,r2,r5
    f6f8:	10c4703a 	and	r2,r2,r3
}
    f6fc:	1004c03a 	cmpne	r2,r2,zero
    f700:	f800283a 	ret

0000f704 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f704:	00c007c4 	movi	r3,31
    f708:	19401616 	blt	r3,r5,f764 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f70c:	defffe04 	addi	sp,sp,-8
    f710:	dfc00115 	stw	ra,4(sp)
    f714:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f718:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f71c:	00ffff84 	movi	r3,-2
    f720:	80c6703a 	and	r3,r16,r3
    f724:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f728:	280490fa 	slli	r2,r5,3
    f72c:	00c00074 	movhi	r3,1
    f730:	18d01d04 	addi	r3,r3,16500
    f734:	1885883a 	add	r2,r3,r2
    f738:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f73c:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f740:	30000626 	beq	r6,zero,f75c <alt_iic_isr_register+0x58>
    f744:	000f67c0 	call	f67c <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f748:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f74c:	dfc00117 	ldw	ra,4(sp)
    f750:	dc000017 	ldw	r16,0(sp)
    f754:	dec00204 	addi	sp,sp,8
    f758:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f75c:	000f6b40 	call	f6b4 <alt_ic_irq_disable>
    f760:	003ff906 	br	f748 <__alt_data_end+0xff00f748>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f764:	00bffa84 	movi	r2,-22
    f768:	f800283a 	ret

0000f76c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f76c:	defffd04 	addi	sp,sp,-12
    f770:	dc400115 	stw	r17,4(sp)
    f774:	dc000015 	stw	r16,0(sp)
    f778:	2823883a 	mov	r17,r5
    f77c:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f780:	01400044 	movi	r5,1
    f784:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f788:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f78c:	000f8700 	call	f870 <open>

  if (old >= 0)
    f790:	10000c16 	blt	r2,zero,f7c4 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f794:	10c00324 	muli	r3,r2,12
    f798:	01400074 	movhi	r5,1
    f79c:	2944a804 	addi	r5,r5,4768
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f7a0:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7a4:	28c5883a 	add	r2,r5,r3
    f7a8:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f7ac:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7b0:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f7b4:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f7b8:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f7bc:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f7c0:	000eb000 	call	eb00 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f7c4:	01807fc4 	movi	r6,511
    f7c8:	000b883a 	mov	r5,zero
    f7cc:	8809883a 	mov	r4,r17
    f7d0:	000f8700 	call	f870 <open>

  if (old >= 0)
    f7d4:	10000c16 	blt	r2,zero,f808 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f7d8:	10c00324 	muli	r3,r2,12
    f7dc:	01400074 	movhi	r5,1
    f7e0:	2944a804 	addi	r5,r5,4768
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f7e4:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7e8:	28c5883a 	add	r2,r5,r3
    f7ec:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f7f0:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7f4:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f7f8:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f7fc:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f800:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f804:	000eb000 	call	eb00 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f808:	01807fc4 	movi	r6,511
    f80c:	01400044 	movi	r5,1
    f810:	8009883a 	mov	r4,r16
    f814:	000f8700 	call	f870 <open>

  if (old >= 0)
    f818:	10001016 	blt	r2,zero,f85c <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f81c:	10c00324 	muli	r3,r2,12
    f820:	01400074 	movhi	r5,1
    f824:	2944a804 	addi	r5,r5,4768
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f828:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f82c:	28c5883a 	add	r2,r5,r3
    f830:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f834:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f838:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f83c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f840:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f844:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f848:	dfc00217 	ldw	ra,8(sp)
    f84c:	dc400117 	ldw	r17,4(sp)
    f850:	dc000017 	ldw	r16,0(sp)
    f854:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f858:	000eb001 	jmpi	eb00 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f85c:	dfc00217 	ldw	ra,8(sp)
    f860:	dc400117 	ldw	r17,4(sp)
    f864:	dc000017 	ldw	r16,0(sp)
    f868:	dec00304 	addi	sp,sp,12
    f86c:	f800283a 	ret

0000f870 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f870:	defffa04 	addi	sp,sp,-24
    f874:	dc000015 	stw	r16,0(sp)
    f878:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f87c:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f880:	dc800215 	stw	r18,8(sp)
    f884:	dc400115 	stw	r17,4(sp)
    f888:	dfc00515 	stw	ra,20(sp)
    f88c:	dd000415 	stw	r20,16(sp)
    f890:	dcc00315 	stw	r19,12(sp)
    f894:	2023883a 	mov	r17,r4
    f898:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f89c:	000fb180 	call	fb18 <alt_find_dev>
    f8a0:	10004626 	beq	r2,zero,f9bc <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f8a4:	1009883a 	mov	r4,r2
    f8a8:	1029883a 	mov	r20,r2
    f8ac:	000fc3c0 	call	fc3c <alt_get_fd>
    f8b0:	1027883a 	mov	r19,r2
    f8b4:	1000090e 	bge	r2,zero,f8dc <open+0x6c>
    f8b8:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f8bc:	9809883a 	mov	r4,r19
    f8c0:	000eb000 	call	eb00 <alt_release_fd>
    f8c4:	d0a00d17 	ldw	r2,-32716(gp)
    f8c8:	10004326 	beq	r2,zero,f9d8 <open+0x168>
    f8cc:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f8d0:	14000015 	stw	r16,0(r2)
    return -1;
    f8d4:	00bfffc4 	movi	r2,-1
    f8d8:	00002e06 	br	f994 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8dc:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8e0:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8e4:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8e8:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8ec:	1084a804 	addi	r2,r2,4768

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8f0:	80c6703a 	and	r3,r16,r3
    f8f4:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8f8:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8fc:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f900:	d2200817 	ldw	r8,-32736(gp)
    f904:	21c00017 	ldw	r7,0(r4)
    f908:	11400204 	addi	r5,r2,8
    f90c:	0007883a 	mov	r3,zero
    f910:	00000306 	br	f920 <open+0xb0>
    f914:	10800304 	addi	r2,r2,12
    f918:	29400304 	addi	r5,r5,12
    f91c:	40c01436 	bltu	r8,r3,f970 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f920:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f924:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f928:	31fffa1e 	bne	r6,r7,f914 <__alt_data_end+0xff00f914>
    f92c:	29800017 	ldw	r6,0(r5)
    f930:	303ff80e 	bge	r6,zero,f914 <__alt_data_end+0xff00f914>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f934:	20bff726 	beq	r4,r2,f914 <__alt_data_end+0xff00f914>
    f938:	04000344 	movi	r16,13
    f93c:	003fdf06 	br	f8bc <__alt_data_end+0xff00f8bc>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f940:	1009883a 	mov	r4,r2
    f944:	000fc3c0 	call	fc3c <alt_get_fd>
    f948:	1027883a 	mov	r19,r2
    f94c:	103fda16 	blt	r2,zero,f8b8 <__alt_data_end+0xff00f8b8>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f950:	99000324 	muli	r4,r19,12
    f954:	00800074 	movhi	r2,1
    f958:	1084a804 	addi	r2,r2,4768
    f95c:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f960:	00900034 	movhi	r2,16384
    f964:	10bfffc4 	addi	r2,r2,-1
    f968:	8084703a 	and	r2,r16,r2
    f96c:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f970:	a0800317 	ldw	r2,12(r20)
    f974:	10000f26 	beq	r2,zero,f9b4 <open+0x144>
    f978:	900f883a 	mov	r7,r18
    f97c:	800d883a 	mov	r6,r16
    f980:	880b883a 	mov	r5,r17
    f984:	103ee83a 	callr	r2
    f988:	1007883a 	mov	r3,r2
    f98c:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f990:	18001316 	blt	r3,zero,f9e0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    f994:	dfc00517 	ldw	ra,20(sp)
    f998:	dd000417 	ldw	r20,16(sp)
    f99c:	dcc00317 	ldw	r19,12(sp)
    f9a0:	dc800217 	ldw	r18,8(sp)
    f9a4:	dc400117 	ldw	r17,4(sp)
    f9a8:	dc000017 	ldw	r16,0(sp)
    f9ac:	dec00604 	addi	sp,sp,24
    f9b0:	f800283a 	ret
    f9b4:	9805883a 	mov	r2,r19
    f9b8:	003ff606 	br	f994 <__alt_data_end+0xff00f994>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f9bc:	8809883a 	mov	r4,r17
    f9c0:	000fb900 	call	fb90 <alt_find_file>
    f9c4:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f9c8:	103fdd1e 	bne	r2,zero,f940 <__alt_data_end+0xff00f940>
    f9cc:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f9d0:	04ffffc4 	movi	r19,-1
    f9d4:	003fb906 	br	f8bc <__alt_data_end+0xff00f8bc>
    f9d8:	d0a6dc04 	addi	r2,gp,-25744
    f9dc:	003fbc06 	br	f8d0 <__alt_data_end+0xff00f8d0>
    f9e0:	00e1c83a 	sub	r16,zero,r3
    f9e4:	003fb506 	br	f8bc <__alt_data_end+0xff00f8bc>

0000f9e8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9e8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9ec:	00bfff84 	movi	r2,-2
    f9f0:	1884703a 	and	r2,r3,r2
    f9f4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f9f8:	21400117 	ldw	r5,4(r4)
    f9fc:	20800017 	ldw	r2,0(r4)
    fa00:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    fa04:	21400117 	ldw	r5,4(r4)
    fa08:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fa0c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    fa10:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa14:	1801703a 	wrctl	status,r3
    fa18:	f800283a 	ret

0000fa1c <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fa1c:	d0a6e617 	ldw	r2,-25704(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fa20:	defffa04 	addi	sp,sp,-24
    fa24:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fa28:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fa2c:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    fa30:	dc800215 	stw	r18,8(sp)
    fa34:	dfc00515 	stw	ra,20(sp)
    fa38:	dd000415 	stw	r20,16(sp)
    fa3c:	dcc00315 	stw	r19,12(sp)
    fa40:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fa44:	d4a01004 	addi	r18,gp,-32704

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fa48:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa4c:	84801126 	beq	r16,r18,fa94 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    fa50:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa54:	053fff84 	movi	r20,-2
    fa58:	00000606 	br	fa74 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    fa5c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fa60:	d0e6e617 	ldw	r3,-25704(gp)
    fa64:	80800217 	ldw	r2,8(r16)
    fa68:	1880122e 	bgeu	r3,r2,fab4 <alt_tick+0x98>
    fa6c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa70:	8c800826 	beq	r17,r18,fa94 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fa74:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    fa78:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fa7c:	103ff826 	beq	r2,zero,fa60 <__alt_data_end+0xff00fa60>
    fa80:	d0a6e617 	ldw	r2,-25704(gp)
    fa84:	103ff526 	beq	r2,zero,fa5c <__alt_data_end+0xff00fa5c>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fa88:	d0a6e617 	ldw	r2,-25704(gp)
    fa8c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa90:	8cbff81e 	bne	r17,r18,fa74 <__alt_data_end+0xff00fa74>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    fa94:	dfc00517 	ldw	ra,20(sp)
    fa98:	dd000417 	ldw	r20,16(sp)
    fa9c:	dcc00317 	ldw	r19,12(sp)
    faa0:	dc800217 	ldw	r18,8(sp)
    faa4:	dc400117 	ldw	r17,4(sp)
    faa8:	dc000017 	ldw	r16,0(sp)
    faac:	dec00604 	addi	sp,sp,24
    fab0:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    fab4:	80800317 	ldw	r2,12(r16)
    fab8:	81000517 	ldw	r4,20(r16)
    fabc:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fac0:	10000726 	beq	r2,zero,fae0 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    fac4:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fac8:	d126e617 	ldw	r4,-25704(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    facc:	10c5883a 	add	r2,r2,r3
    fad0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fad4:	113fe52e 	bgeu	r2,r4,fa6c <__alt_data_end+0xff00fa6c>
        {
          alarm->rollover = 1;
    fad8:	84c00405 	stb	r19,16(r16)
    fadc:	003fe306 	br	fa6c <__alt_data_end+0xff00fa6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fae0:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fae4:	1506703a 	and	r3,r2,r20
    fae8:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    faec:	81000117 	ldw	r4,4(r16)
    faf0:	80c00017 	ldw	r3,0(r16)
    faf4:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    faf8:	81000117 	ldw	r4,4(r16)
    fafc:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fb00:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    fb04:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb08:	1001703a 	wrctl	status,r2
    fb0c:	003fd706 	br	fa6c <__alt_data_end+0xff00fa6c>

0000fb10 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    fb10:	000170fa 	wrctl	ienable,zero
    fb14:	f800283a 	ret

0000fb18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fb18:	defffb04 	addi	sp,sp,-20
    fb1c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    fb20:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fb24:	dc400115 	stw	r17,4(sp)
    fb28:	2823883a 	mov	r17,r5
    fb2c:	dcc00315 	stw	r19,12(sp)
    fb30:	dfc00415 	stw	ra,16(sp)
    fb34:	dc800215 	stw	r18,8(sp)
    fb38:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    fb3c:	00027480 	call	2748 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fb40:	8c000b26 	beq	r17,r16,fb70 <alt_find_dev+0x58>
    fb44:	14800044 	addi	r18,r2,1
    fb48:	00000206 	br	fb54 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fb4c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fb50:	8c000726 	beq	r17,r16,fb70 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fb54:	81000217 	ldw	r4,8(r16)
    fb58:	900d883a 	mov	r6,r18
    fb5c:	980b883a 	mov	r5,r19
    fb60:	000ff4c0 	call	ff4c <memcmp>
    fb64:	103ff91e 	bne	r2,zero,fb4c <__alt_data_end+0xff00fb4c>
    fb68:	8005883a 	mov	r2,r16
    fb6c:	00000106 	br	fb74 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fb70:	0005883a 	mov	r2,zero
}
    fb74:	dfc00417 	ldw	ra,16(sp)
    fb78:	dcc00317 	ldw	r19,12(sp)
    fb7c:	dc800217 	ldw	r18,8(sp)
    fb80:	dc400117 	ldw	r17,4(sp)
    fb84:	dc000017 	ldw	r16,0(sp)
    fb88:	dec00504 	addi	sp,sp,20
    fb8c:	f800283a 	ret

0000fb90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fb90:	defffa04 	addi	sp,sp,-24
    fb94:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fb98:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fb9c:	dd000415 	stw	r20,16(sp)
    fba0:	dfc00515 	stw	ra,20(sp)
    fba4:	dcc00315 	stw	r19,12(sp)
    fba8:	dc800215 	stw	r18,8(sp)
    fbac:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fbb0:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fbb4:	85001626 	beq	r16,r20,fc10 <alt_find_file+0x80>
    fbb8:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fbbc:	04c00bc4 	movi	r19,47
    fbc0:	00000806 	br	fbe4 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fbc4:	9185883a 	add	r2,r18,r6
    fbc8:	10800007 	ldb	r2,0(r2)
    fbcc:	14c00126 	beq	r2,r19,fbd4 <alt_find_file+0x44>
    fbd0:	1000021e 	bne	r2,zero,fbdc <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    fbd4:	000ff4c0 	call	ff4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fbd8:	10001626 	beq	r2,zero,fc34 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fbdc:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fbe0:	85000b26 	beq	r16,r20,fc10 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    fbe4:	84400217 	ldw	r17,8(r16)
    fbe8:	8809883a 	mov	r4,r17
    fbec:	00027480 	call	2748 <strlen>
    fbf0:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    fbf4:	8885883a 	add	r2,r17,r2
    fbf8:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fbfc:	900b883a 	mov	r5,r18
    fc00:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fc04:	14ffef1e 	bne	r2,r19,fbc4 <__alt_data_end+0xff00fbc4>
    {
      len -= 1;
    fc08:	31bfffc4 	addi	r6,r6,-1
    fc0c:	003fed06 	br	fbc4 <__alt_data_end+0xff00fbc4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fc10:	0005883a 	mov	r2,zero
}
    fc14:	dfc00517 	ldw	ra,20(sp)
    fc18:	dd000417 	ldw	r20,16(sp)
    fc1c:	dcc00317 	ldw	r19,12(sp)
    fc20:	dc800217 	ldw	r18,8(sp)
    fc24:	dc400117 	ldw	r17,4(sp)
    fc28:	dc000017 	ldw	r16,0(sp)
    fc2c:	dec00604 	addi	sp,sp,24
    fc30:	f800283a 	ret
    fc34:	8005883a 	mov	r2,r16
    fc38:	003ff606 	br	fc14 <__alt_data_end+0xff00fc14>

0000fc3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fc3c:	01c00074 	movhi	r7,1
    fc40:	39c4a804 	addi	r7,r7,4768
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fc44:	0005883a 	mov	r2,zero
    fc48:	3807883a 	mov	r3,r7
    fc4c:	01800804 	movi	r6,32
    fc50:	00000206 	br	fc5c <alt_get_fd+0x20>
    fc54:	10800044 	addi	r2,r2,1
    fc58:	11800a26 	beq	r2,r6,fc84 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fc5c:	19400017 	ldw	r5,0(r3)
    fc60:	18c00304 	addi	r3,r3,12
    fc64:	283ffb1e 	bne	r5,zero,fc54 <__alt_data_end+0xff00fc54>
    {
      alt_fd_list[i].dev = dev;
    fc68:	10c00324 	muli	r3,r2,12
    fc6c:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fc70:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fc74:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fc78:	1880030e 	bge	r3,r2,fc88 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fc7c:	d0a00815 	stw	r2,-32736(gp)
    fc80:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    fc84:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fc88:	f800283a 	ret

0000fc8c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fc8c:	00840004 	movi	r2,4096
    fc90:	1140012e 	bgeu	r2,r5,fc98 <alt_icache_flush+0xc>
    fc94:	100b883a 	mov	r5,r2
    fc98:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fc9c:	2005883a 	mov	r2,r4
    fca0:	2140092e 	bgeu	r4,r5,fcc8 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fca4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fca8:	10800804 	addi	r2,r2,32
    fcac:	117ffd36 	bltu	r2,r5,fca4 <__alt_data_end+0xff00fca4>
    fcb0:	0104303a 	nor	r2,zero,r4
    fcb4:	2885883a 	add	r2,r5,r2
    fcb8:	1004d17a 	srli	r2,r2,5
    fcbc:	10800044 	addi	r2,r2,1
    fcc0:	1004917a 	slli	r2,r2,5
    fcc4:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fcc8:	210007cc 	andi	r4,r4,31
    fccc:	20000126 	beq	r4,zero,fcd4 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fcd0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fcd4:	0000203a 	flushp
    fcd8:	f800283a 	ret

0000fcdc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fcdc:	213ffe84 	addi	r4,r4,-6
    fce0:	008003c4 	movi	r2,15
    fce4:	11001636 	bltu	r2,r4,fd40 <alt_exception_cause_generated_bad_addr+0x64>
    fce8:	200890ba 	slli	r4,r4,2
    fcec:	00800074 	movhi	r2,1
    fcf0:	10bf4004 	addi	r2,r2,-768
    fcf4:	2089883a 	add	r4,r4,r2
    fcf8:	20800017 	ldw	r2,0(r4)
    fcfc:	1000683a 	jmp	r2
    fd00:	0000fd48 	cmpgei	zero,zero,1013
    fd04:	0000fd48 	cmpgei	zero,zero,1013
    fd08:	0000fd40 	call	fd4 <main+0x178>
    fd0c:	0000fd40 	call	fd4 <main+0x178>
    fd10:	0000fd40 	call	fd4 <main+0x178>
    fd14:	0000fd48 	cmpgei	zero,zero,1013
    fd18:	0000fd40 	call	fd4 <main+0x178>
    fd1c:	0000fd40 	call	fd4 <main+0x178>
    fd20:	0000fd48 	cmpgei	zero,zero,1013
    fd24:	0000fd48 	cmpgei	zero,zero,1013
    fd28:	0000fd40 	call	fd4 <main+0x178>
    fd2c:	0000fd48 	cmpgei	zero,zero,1013
    fd30:	0000fd40 	call	fd4 <main+0x178>
    fd34:	0000fd40 	call	fd4 <main+0x178>
    fd38:	0000fd40 	call	fd4 <main+0x178>
    fd3c:	0000fd48 	cmpgei	zero,zero,1013
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fd40:	0005883a 	mov	r2,zero
    fd44:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fd48:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fd4c:	f800283a 	ret

0000fd50 <atexit>:
    fd50:	200b883a 	mov	r5,r4
    fd54:	000f883a 	mov	r7,zero
    fd58:	000d883a 	mov	r6,zero
    fd5c:	0009883a 	mov	r4,zero
    fd60:	000ffc81 	jmpi	ffc8 <__register_exitproc>

0000fd64 <exit>:
    fd64:	defffe04 	addi	sp,sp,-8
    fd68:	000b883a 	mov	r5,zero
    fd6c:	dc000015 	stw	r16,0(sp)
    fd70:	dfc00115 	stw	ra,4(sp)
    fd74:	2021883a 	mov	r16,r4
    fd78:	00100e00 	call	100e0 <__call_exitprocs>
    fd7c:	00800074 	movhi	r2,1
    fd80:	10892e04 	addi	r2,r2,9400
    fd84:	11000017 	ldw	r4,0(r2)
    fd88:	20800f17 	ldw	r2,60(r4)
    fd8c:	10000126 	beq	r2,zero,fd94 <exit+0x30>
    fd90:	103ee83a 	callr	r2
    fd94:	8009883a 	mov	r4,r16
    fd98:	00102600 	call	10260 <_exit>

0000fd9c <memalign>:
    fd9c:	00800074 	movhi	r2,1
    fda0:	10892f04 	addi	r2,r2,9404
    fda4:	280d883a 	mov	r6,r5
    fda8:	200b883a 	mov	r5,r4
    fdac:	11000017 	ldw	r4,0(r2)
    fdb0:	000fdb41 	jmpi	fdb4 <_memalign_r>

0000fdb4 <_memalign_r>:
    fdb4:	00800204 	movi	r2,8
    fdb8:	1140532e 	bgeu	r2,r5,ff08 <_memalign_r+0x154>
    fdbc:	defffa04 	addi	sp,sp,-24
    fdc0:	dd000415 	stw	r20,16(sp)
    fdc4:	dc400115 	stw	r17,4(sp)
    fdc8:	dfc00515 	stw	ra,20(sp)
    fdcc:	dcc00315 	stw	r19,12(sp)
    fdd0:	dc800215 	stw	r18,8(sp)
    fdd4:	dc000015 	stw	r16,0(sp)
    fdd8:	008003c4 	movi	r2,15
    fddc:	2823883a 	mov	r17,r5
    fde0:	2029883a 	mov	r20,r4
    fde4:	11400136 	bltu	r2,r5,fdec <_memalign_r+0x38>
    fde8:	04400404 	movi	r17,16
    fdec:	308002c4 	addi	r2,r6,11
    fdf0:	00c00584 	movi	r3,22
    fdf4:	18803e2e 	bgeu	r3,r2,fef0 <_memalign_r+0x13c>
    fdf8:	04bffe04 	movi	r18,-8
    fdfc:	14a4703a 	and	r18,r2,r18
    fe00:	90003d16 	blt	r18,zero,fef8 <_memalign_r+0x144>
    fe04:	91803c36 	bltu	r18,r6,fef8 <_memalign_r+0x144>
    fe08:	89400404 	addi	r5,r17,16
    fe0c:	2c8b883a 	add	r5,r5,r18
    fe10:	a009883a 	mov	r4,r20
    fe14:	0001da80 	call	1da8 <_malloc_r>
    fe18:	1027883a 	mov	r19,r2
    fe1c:	10004926 	beq	r2,zero,ff44 <_memalign_r+0x190>
    fe20:	a009883a 	mov	r4,r20
    fe24:	000ea300 	call	ea30 <__malloc_lock>
    fe28:	880b883a 	mov	r5,r17
    fe2c:	9809883a 	mov	r4,r19
    fe30:	9c3ffe04 	addi	r16,r19,-8
    fe34:	000c0080 	call	c008 <__umodsi3>
    fe38:	10001c26 	beq	r2,zero,feac <_memalign_r+0xf8>
    fe3c:	88bfffc4 	addi	r2,r17,-1
    fe40:	9887883a 	add	r3,r19,r2
    fe44:	0445c83a 	sub	r2,zero,r17
    fe48:	1884703a 	and	r2,r3,r2
    fe4c:	10bffe04 	addi	r2,r2,-8
    fe50:	1409c83a 	sub	r4,r2,r16
    fe54:	014003c4 	movi	r5,15
    fe58:	8007883a 	mov	r3,r16
    fe5c:	29002c0e 	bge	r5,r4,ff10 <_memalign_r+0x15c>
    fe60:	1021883a 	mov	r16,r2
    fe64:	993fff17 	ldw	r4,-4(r19)
    fe68:	00bfff04 	movi	r2,-4
    fe6c:	80c7c83a 	sub	r3,r16,r3
    fe70:	2084703a 	and	r2,r4,r2
    fe74:	10c5c83a 	sub	r2,r2,r3
    fe78:	11000054 	ori	r4,r2,1
    fe7c:	81000115 	stw	r4,4(r16)
    fe80:	8085883a 	add	r2,r16,r2
    fe84:	11800117 	ldw	r6,4(r2)
    fe88:	980b883a 	mov	r5,r19
    fe8c:	a009883a 	mov	r4,r20
    fe90:	31800054 	ori	r6,r6,1
    fe94:	11800115 	stw	r6,4(r2)
    fe98:	98bfff17 	ldw	r2,-4(r19)
    fe9c:	1080004c 	andi	r2,r2,1
    fea0:	10c6b03a 	or	r3,r2,r3
    fea4:	98ffff15 	stw	r3,-4(r19)
    fea8:	0006bf80 	call	6bf8 <_free_r>
    feac:	80c00117 	ldw	r3,4(r16)
    feb0:	00bfff04 	movi	r2,-4
    feb4:	1884703a 	and	r2,r3,r2
    feb8:	1485c83a 	sub	r2,r2,r18
    febc:	00c003c4 	movi	r3,15
    fec0:	18801516 	blt	r3,r2,ff18 <_memalign_r+0x164>
    fec4:	a009883a 	mov	r4,r20
    fec8:	000ea340 	call	ea34 <__malloc_unlock>
    fecc:	80800204 	addi	r2,r16,8
    fed0:	dfc00517 	ldw	ra,20(sp)
    fed4:	dd000417 	ldw	r20,16(sp)
    fed8:	dcc00317 	ldw	r19,12(sp)
    fedc:	dc800217 	ldw	r18,8(sp)
    fee0:	dc400117 	ldw	r17,4(sp)
    fee4:	dc000017 	ldw	r16,0(sp)
    fee8:	dec00604 	addi	sp,sp,24
    feec:	f800283a 	ret
    fef0:	04800404 	movi	r18,16
    fef4:	91bfc42e 	bgeu	r18,r6,fe08 <__alt_data_end+0xff00fe08>
    fef8:	00800304 	movi	r2,12
    fefc:	a0800015 	stw	r2,0(r20)
    ff00:	0005883a 	mov	r2,zero
    ff04:	003ff206 	br	fed0 <__alt_data_end+0xff00fed0>
    ff08:	300b883a 	mov	r5,r6
    ff0c:	0001da81 	jmpi	1da8 <_malloc_r>
    ff10:	1461883a 	add	r16,r2,r17
    ff14:	003fd306 	br	fe64 <__alt_data_end+0xff00fe64>
    ff18:	848b883a 	add	r5,r16,r18
    ff1c:	10800054 	ori	r2,r2,1
    ff20:	28800115 	stw	r2,4(r5)
    ff24:	80800117 	ldw	r2,4(r16)
    ff28:	29400204 	addi	r5,r5,8
    ff2c:	a009883a 	mov	r4,r20
    ff30:	1080004c 	andi	r2,r2,1
    ff34:	14a4b03a 	or	r18,r2,r18
    ff38:	84800115 	stw	r18,4(r16)
    ff3c:	0006bf80 	call	6bf8 <_free_r>
    ff40:	003fe006 	br	fec4 <__alt_data_end+0xff00fec4>
    ff44:	0005883a 	mov	r2,zero
    ff48:	003fe106 	br	fed0 <__alt_data_end+0xff00fed0>

0000ff4c <memcmp>:
    ff4c:	01c000c4 	movi	r7,3
    ff50:	3980192e 	bgeu	r7,r6,ffb8 <memcmp+0x6c>
    ff54:	2144b03a 	or	r2,r4,r5
    ff58:	11c4703a 	and	r2,r2,r7
    ff5c:	10000f26 	beq	r2,zero,ff9c <memcmp+0x50>
    ff60:	20800003 	ldbu	r2,0(r4)
    ff64:	28c00003 	ldbu	r3,0(r5)
    ff68:	10c0151e 	bne	r2,r3,ffc0 <memcmp+0x74>
    ff6c:	31bfff84 	addi	r6,r6,-2
    ff70:	01ffffc4 	movi	r7,-1
    ff74:	00000406 	br	ff88 <memcmp+0x3c>
    ff78:	20800003 	ldbu	r2,0(r4)
    ff7c:	28c00003 	ldbu	r3,0(r5)
    ff80:	31bfffc4 	addi	r6,r6,-1
    ff84:	10c00e1e 	bne	r2,r3,ffc0 <memcmp+0x74>
    ff88:	21000044 	addi	r4,r4,1
    ff8c:	29400044 	addi	r5,r5,1
    ff90:	31fff91e 	bne	r6,r7,ff78 <__alt_data_end+0xff00ff78>
    ff94:	0005883a 	mov	r2,zero
    ff98:	f800283a 	ret
    ff9c:	20c00017 	ldw	r3,0(r4)
    ffa0:	28800017 	ldw	r2,0(r5)
    ffa4:	18bfee1e 	bne	r3,r2,ff60 <__alt_data_end+0xff00ff60>
    ffa8:	31bfff04 	addi	r6,r6,-4
    ffac:	21000104 	addi	r4,r4,4
    ffb0:	29400104 	addi	r5,r5,4
    ffb4:	39bff936 	bltu	r7,r6,ff9c <__alt_data_end+0xff00ff9c>
    ffb8:	303fe91e 	bne	r6,zero,ff60 <__alt_data_end+0xff00ff60>
    ffbc:	003ff506 	br	ff94 <__alt_data_end+0xff00ff94>
    ffc0:	10c5c83a 	sub	r2,r2,r3
    ffc4:	f800283a 	ret

0000ffc8 <__register_exitproc>:
    ffc8:	defffa04 	addi	sp,sp,-24
    ffcc:	dc000315 	stw	r16,12(sp)
    ffd0:	04000074 	movhi	r16,1
    ffd4:	84092e04 	addi	r16,r16,9400
    ffd8:	80c00017 	ldw	r3,0(r16)
    ffdc:	dc400415 	stw	r17,16(sp)
    ffe0:	dfc00515 	stw	ra,20(sp)
    ffe4:	18805217 	ldw	r2,328(r3)
    ffe8:	2023883a 	mov	r17,r4
    ffec:	10003726 	beq	r2,zero,100cc <__register_exitproc+0x104>
    fff0:	10c00117 	ldw	r3,4(r2)
    fff4:	010007c4 	movi	r4,31
    fff8:	20c00e16 	blt	r4,r3,10034 <__register_exitproc+0x6c>
    fffc:	1a000044 	addi	r8,r3,1
   10000:	8800221e 	bne	r17,zero,1008c <__register_exitproc+0xc4>
   10004:	18c00084 	addi	r3,r3,2
   10008:	18c7883a 	add	r3,r3,r3
   1000c:	18c7883a 	add	r3,r3,r3
   10010:	12000115 	stw	r8,4(r2)
   10014:	10c7883a 	add	r3,r2,r3
   10018:	19400015 	stw	r5,0(r3)
   1001c:	0005883a 	mov	r2,zero
   10020:	dfc00517 	ldw	ra,20(sp)
   10024:	dc400417 	ldw	r17,16(sp)
   10028:	dc000317 	ldw	r16,12(sp)
   1002c:	dec00604 	addi	sp,sp,24
   10030:	f800283a 	ret
   10034:	00800034 	movhi	r2,0
   10038:	10876004 	addi	r2,r2,7552
   1003c:	10002626 	beq	r2,zero,100d8 <__register_exitproc+0x110>
   10040:	01006404 	movi	r4,400
   10044:	d9400015 	stw	r5,0(sp)
   10048:	d9800115 	stw	r6,4(sp)
   1004c:	d9c00215 	stw	r7,8(sp)
   10050:	0001d800 	call	1d80 <malloc>
   10054:	d9400017 	ldw	r5,0(sp)
   10058:	d9800117 	ldw	r6,4(sp)
   1005c:	d9c00217 	ldw	r7,8(sp)
   10060:	10001d26 	beq	r2,zero,100d8 <__register_exitproc+0x110>
   10064:	81000017 	ldw	r4,0(r16)
   10068:	10000115 	stw	zero,4(r2)
   1006c:	02000044 	movi	r8,1
   10070:	22405217 	ldw	r9,328(r4)
   10074:	0007883a 	mov	r3,zero
   10078:	12400015 	stw	r9,0(r2)
   1007c:	20805215 	stw	r2,328(r4)
   10080:	10006215 	stw	zero,392(r2)
   10084:	10006315 	stw	zero,396(r2)
   10088:	883fde26 	beq	r17,zero,10004 <__alt_data_end+0xff010004>
   1008c:	18c9883a 	add	r4,r3,r3
   10090:	2109883a 	add	r4,r4,r4
   10094:	1109883a 	add	r4,r2,r4
   10098:	21802215 	stw	r6,136(r4)
   1009c:	01800044 	movi	r6,1
   100a0:	12406217 	ldw	r9,392(r2)
   100a4:	30cc983a 	sll	r6,r6,r3
   100a8:	4992b03a 	or	r9,r9,r6
   100ac:	12406215 	stw	r9,392(r2)
   100b0:	21c04215 	stw	r7,264(r4)
   100b4:	01000084 	movi	r4,2
   100b8:	893fd21e 	bne	r17,r4,10004 <__alt_data_end+0xff010004>
   100bc:	11006317 	ldw	r4,396(r2)
   100c0:	218cb03a 	or	r6,r4,r6
   100c4:	11806315 	stw	r6,396(r2)
   100c8:	003fce06 	br	10004 <__alt_data_end+0xff010004>
   100cc:	18805304 	addi	r2,r3,332
   100d0:	18805215 	stw	r2,328(r3)
   100d4:	003fc606 	br	fff0 <__alt_data_end+0xff00fff0>
   100d8:	00bfffc4 	movi	r2,-1
   100dc:	003fd006 	br	10020 <__alt_data_end+0xff010020>

000100e0 <__call_exitprocs>:
   100e0:	defff504 	addi	sp,sp,-44
   100e4:	df000915 	stw	fp,36(sp)
   100e8:	dd400615 	stw	r21,24(sp)
   100ec:	dc800315 	stw	r18,12(sp)
   100f0:	dfc00a15 	stw	ra,40(sp)
   100f4:	ddc00815 	stw	r23,32(sp)
   100f8:	dd800715 	stw	r22,28(sp)
   100fc:	dd000515 	stw	r20,20(sp)
   10100:	dcc00415 	stw	r19,16(sp)
   10104:	dc400215 	stw	r17,8(sp)
   10108:	dc000115 	stw	r16,4(sp)
   1010c:	d9000015 	stw	r4,0(sp)
   10110:	2839883a 	mov	fp,r5
   10114:	04800044 	movi	r18,1
   10118:	057fffc4 	movi	r21,-1
   1011c:	00800074 	movhi	r2,1
   10120:	10892e04 	addi	r2,r2,9400
   10124:	12000017 	ldw	r8,0(r2)
   10128:	45005217 	ldw	r20,328(r8)
   1012c:	44c05204 	addi	r19,r8,328
   10130:	a0001c26 	beq	r20,zero,101a4 <__call_exitprocs+0xc4>
   10134:	a0800117 	ldw	r2,4(r20)
   10138:	15ffffc4 	addi	r23,r2,-1
   1013c:	b8000d16 	blt	r23,zero,10174 <__call_exitprocs+0x94>
   10140:	14000044 	addi	r16,r2,1
   10144:	8421883a 	add	r16,r16,r16
   10148:	8421883a 	add	r16,r16,r16
   1014c:	84402004 	addi	r17,r16,128
   10150:	a463883a 	add	r17,r20,r17
   10154:	a421883a 	add	r16,r20,r16
   10158:	e0001e26 	beq	fp,zero,101d4 <__call_exitprocs+0xf4>
   1015c:	80804017 	ldw	r2,256(r16)
   10160:	e0801c26 	beq	fp,r2,101d4 <__call_exitprocs+0xf4>
   10164:	bdffffc4 	addi	r23,r23,-1
   10168:	843fff04 	addi	r16,r16,-4
   1016c:	8c7fff04 	addi	r17,r17,-4
   10170:	bd7ff91e 	bne	r23,r21,10158 <__alt_data_end+0xff010158>
   10174:	00800034 	movhi	r2,0
   10178:	10876504 	addi	r2,r2,7572
   1017c:	10000926 	beq	r2,zero,101a4 <__call_exitprocs+0xc4>
   10180:	a0800117 	ldw	r2,4(r20)
   10184:	1000301e 	bne	r2,zero,10248 <__call_exitprocs+0x168>
   10188:	a0800017 	ldw	r2,0(r20)
   1018c:	10003226 	beq	r2,zero,10258 <__call_exitprocs+0x178>
   10190:	a009883a 	mov	r4,r20
   10194:	98800015 	stw	r2,0(r19)
   10198:	0001d940 	call	1d94 <free>
   1019c:	9d000017 	ldw	r20,0(r19)
   101a0:	a03fe41e 	bne	r20,zero,10134 <__alt_data_end+0xff010134>
   101a4:	dfc00a17 	ldw	ra,40(sp)
   101a8:	df000917 	ldw	fp,36(sp)
   101ac:	ddc00817 	ldw	r23,32(sp)
   101b0:	dd800717 	ldw	r22,28(sp)
   101b4:	dd400617 	ldw	r21,24(sp)
   101b8:	dd000517 	ldw	r20,20(sp)
   101bc:	dcc00417 	ldw	r19,16(sp)
   101c0:	dc800317 	ldw	r18,12(sp)
   101c4:	dc400217 	ldw	r17,8(sp)
   101c8:	dc000117 	ldw	r16,4(sp)
   101cc:	dec00b04 	addi	sp,sp,44
   101d0:	f800283a 	ret
   101d4:	a0800117 	ldw	r2,4(r20)
   101d8:	80c00017 	ldw	r3,0(r16)
   101dc:	10bfffc4 	addi	r2,r2,-1
   101e0:	15c01426 	beq	r2,r23,10234 <__call_exitprocs+0x154>
   101e4:	80000015 	stw	zero,0(r16)
   101e8:	183fde26 	beq	r3,zero,10164 <__alt_data_end+0xff010164>
   101ec:	95c8983a 	sll	r4,r18,r23
   101f0:	a0806217 	ldw	r2,392(r20)
   101f4:	a5800117 	ldw	r22,4(r20)
   101f8:	2084703a 	and	r2,r4,r2
   101fc:	10000b26 	beq	r2,zero,1022c <__call_exitprocs+0x14c>
   10200:	a0806317 	ldw	r2,396(r20)
   10204:	2088703a 	and	r4,r4,r2
   10208:	20000c1e 	bne	r4,zero,1023c <__call_exitprocs+0x15c>
   1020c:	89400017 	ldw	r5,0(r17)
   10210:	d9000017 	ldw	r4,0(sp)
   10214:	183ee83a 	callr	r3
   10218:	a0800117 	ldw	r2,4(r20)
   1021c:	15bfbf1e 	bne	r2,r22,1011c <__alt_data_end+0xff01011c>
   10220:	98800017 	ldw	r2,0(r19)
   10224:	153fcf26 	beq	r2,r20,10164 <__alt_data_end+0xff010164>
   10228:	003fbc06 	br	1011c <__alt_data_end+0xff01011c>
   1022c:	183ee83a 	callr	r3
   10230:	003ff906 	br	10218 <__alt_data_end+0xff010218>
   10234:	a5c00115 	stw	r23,4(r20)
   10238:	003feb06 	br	101e8 <__alt_data_end+0xff0101e8>
   1023c:	89000017 	ldw	r4,0(r17)
   10240:	183ee83a 	callr	r3
   10244:	003ff406 	br	10218 <__alt_data_end+0xff010218>
   10248:	a0800017 	ldw	r2,0(r20)
   1024c:	a027883a 	mov	r19,r20
   10250:	1029883a 	mov	r20,r2
   10254:	003fb606 	br	10130 <__alt_data_end+0xff010130>
   10258:	0005883a 	mov	r2,zero
   1025c:	003ffb06 	br	1024c <__alt_data_end+0xff01024c>

00010260 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10260:	20000226 	beq	r4,zero,1026c <_exit+0xc>
    ALT_SIM_FAIL();
   10264:	002af070 	cmpltui	zero,zero,43969
   10268:	003fff06 	br	10268 <__alt_data_end+0xff010268>
  } else {
    ALT_SIM_PASS();
   1026c:	002af0b0 	cmpltui	zero,zero,43970
   10270:	003ffd06 	br	10268 <__alt_data_end+0xff010268>
