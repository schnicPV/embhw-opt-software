
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000125b4 memsz 0x000125b4 flags r-x
    LOAD off    0x000135d4 vaddr 0x000125d4 paddr 0x000140c8 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00015bbc vaddr 0x00015bbc paddr 0x00015bbc align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011bf8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000798  00011e3c  00011e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  000125d4  000140c8  000135d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00015bbc  00015bbc  00015bbc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015d4c  00015d4c  000150c8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000150c8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  000150f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025017  00000000  00000000  00016128  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000995f  00000000  00000000  0003b13f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c26e  00000000  00000000  00044a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000274c  00000000  00000000  00050d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d9e  00000000  00000000  00053458  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  000571f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006eab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006eb08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00073e06  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00073e09  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00073e15  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00073e16  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00073e17  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00073e1b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00073e1f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00073e23  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00073e2c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00073e35  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00073e3e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  00073e49  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00073e97  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007996f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011e3c l    d  .rodata	00000000 .rodata
000125d4 l    d  .rwdata	00000000 .rwdata
00015bbc l    d  .bss	00000000 .bss
00015d4c l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012422 l     O .rodata	00000010 zeroes.4404
00006000 l     F .text	000000bc __sbprintf
00012432 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00006210 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007d40 l     F .text	00000008 __fp_unlock
00007d54 l     F .text	0000019c __sinit.part.1
00007ef0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000129dc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012e20 l     O .rwdata	00000020 lc_ctype_charset
00012e00 l     O .rwdata	00000020 lc_message_charset
00012e40 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012464 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000aa8c l     F .text	000000fc __sprint_r.part.0
00012598 l     O .rodata	00000010 blanks.4348
00012588 l     O .rodata	00000010 zeroes.4349
0000c018 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f508 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f700 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f7ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f9c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000140b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fc3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fd70 l     F .text	00000034 alt_dev_reg
00013020 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001007c l     F .text	0000020c altera_avalon_jtag_uart_irq
00010288 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000108c0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010d70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000111e4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011324 l     F .text	0000003c alt_get_errno
00011360 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015c20 g     O .bss	00000004 alt_instruction_exception_handler
0000a124 g     F .text	00000074 _mprec_log10
0000a210 g     F .text	0000008c __any_on
0000c5b4 g     F .text	00000054 _isatty_r
00012470 g     O .rodata	00000028 __mprec_tinytens
0000f8fc g     F .text	0000007c alt_main
00003c2c g     F .text	000000c0 _puts_r
00015c4c g     O .bss	00000100 alt_irq
0000c608 g     F .text	00000060 _lseek_r
000122d0 g     O .rodata	00000009 gy_array
000140c8 g       *ABS*	00000000 __flash_rwdata_start
0000e800 g     F .text	00000088 .hidden __eqdf2
00015d4c g       *ABS*	00000000 __alt_heap_start
00003bf0 g     F .text	0000003c printf
0000c820 g     F .text	0000009c _wcrtomb_r
0000a94c g     F .text	0000005c __sseek
00008090 g     F .text	00000010 __sinit
0000c6c8 g     F .text	00000140 __swbuf_r
00008b58 g     F .text	0000007c _setlocale_r
00007ef8 g     F .text	00000068 __sfmoreglue
0000f99c g     F .text	00000024 __malloc_unlock
00000edc g     F .text	00000044 LCD_Write_Command
00015bcc g     O .bss	00000004 sobel_width
00015c10 g     O .bss	00000004 altera_avalon_timer_ts_freq
0000901c g     F .text	0000015c memmove
00000f20 g     F .text	00000044 LCD_Write_Data
00008078 g     F .text	00000018 _cleanup
000092a0 g     F .text	000000a8 _Balloc
0000e888 g     F .text	000000dc .hidden __gtdf2
0001171c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000764 g     F .text	0000004c cam_get_xsize
0000c558 g     F .text	0000005c _fstat_r
00015bf0 g     O .bss	00000004 errno
0000a8c8 g     F .text	00000008 __seofread
00015c04 g     O .bss	00000004 alt_argv
0001c080 g       *ABS*	00000000 _gp
0000fc0c g     F .text	00000030 usleep
000008a4 g     F .text	000000a8 cam_set_image_pointer
00012ea0 g     O .rwdata	00000180 alt_fd_list
00002a48 g     F .text	00000034 vga_set_pointer
00011740 g     F .text	00000090 alt_find_dev
00008ed4 g     F .text	00000148 memcpy
00007d48 g     F .text	0000000c _cleanup_r
0000324c g     F .text	000000dc .hidden __floatsidf
000112a8 g     F .text	0000007c alt_io_redirect
0000e964 g     F .text	000000f4 .hidden __ltdf2
00011e3c g       *ABS*	00000000 __DTOR_END__
00003cec g     F .text	00000014 puts
00011a0c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a800 g     F .text	00000074 __fpclassifyd
0000a080 g     F .text	000000a4 __ratio
0000bffc g     F .text	0000001c __vfiprintf_internal
00010480 g     F .text	0000021c altera_avalon_jtag_uart_read
0000338c g     F .text	00000014 malloc
00003bc0 g     F .text	00000030 _printf_r
00000ca8 g     F .text	00000020 get_grayscale_picture
0000d5b0 g     F .text	00000064 .hidden __udivsi3
00000280 g     F .text	000004e4 init_camera
00012094 g     O .rodata	00000128 lens_roll_off_tbl
0000f65c g     F .text	000000a4 isatty
000124c0 g     O .rodata	000000c8 __mprec_tens
00008bd4 g     F .text	0000000c __locale_charset
0001197c g     F .text	00000090 alt_icache_flush
00015bec g     O .bss	00000004 __malloc_top_pad
00014098 g     O .rwdata	00000004 __mb_cur_max
00008c04 g     F .text	0000000c _localeconv_r
00001d58 g     F .text	000000c8 sobel_x
000096ac g     F .text	0000003c __i2b
00008514 g     F .text	000004bc __sfvwrite_r
00000f64 g     F .text	00000240 init_LCD
00003d00 g     F .text	00000054 _sbrk_r
00014084 g     O .rwdata	00000004 pgy_array
000007fc g     F .text	000000a8 cam_get_profiling
0000c668 g     F .text	00000060 _read_r
00015bd0 g     O .bss	00000004 sobel_result
000140b0 g     O .rwdata	00000004 alt_max_fd
0000c24c g     F .text	000000f0 _fclose_r
00007d10 g     F .text	00000030 fflush
00015be8 g     O .bss	00000004 __malloc_max_sbrked_mem
00015bc4 g     O .bss	00000004 grayscale_array
0000d66c g     F .text	000008ac .hidden __adddf3
000007b0 g     F .text	0000004c cam_get_ysize
00009e28 g     F .text	0000010c __b2d
0000cf80 g     F .text	00000538 .hidden __umoddi3
0000f828 g     F .text	000000d4 lseek
00000db8 g     F .text	000000a0 i2c_short_read
00014090 g     O .rwdata	00000004 _global_impure_ptr
0000a29c g     F .text	00000564 _realloc_r
00015d4c g       *ABS*	00000000 __bss_end
000110f4 g     F .text	000000f0 alt_iic_isr_register
00011614 g     F .text	00000108 alt_tick
0000ca08 g     F .text	00000578 .hidden __udivdi3
0000c4b4 g     F .text	00000024 _fputwc_r
00012498 g     O .rodata	00000028 __mprec_bigtens
00009490 g     F .text	00000104 __s2b
0000f354 g     F .text	000000a8 .hidden __floatunsidf
00009b68 g     F .text	00000060 __mcmp
000080b0 g     F .text	00000018 __fp_lock_all
000110a8 g     F .text	0000004c alt_ic_irq_enabled
00015bc0 g     O .bss	00000004 grayscape_height
00011578 g     F .text	0000009c alt_alarm_stop
00015c14 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012e78 g     O .rwdata	00000028 alt_dev_null
00001248 g     F .text	000000c8 transfer_LCD_with_dma
00002274 g     F .text	00000794 sobel_complete
00010d50 g     F .text	00000020 alt_dcache_flush_all
00009594 g     F .text	00000068 __hi0bits
000031cc g     F .text	00000080 .hidden __fixdfsi
000140c8 g       *ABS*	00000000 __ram_rwdata_end
000140a8 g     O .rwdata	00000008 alt_dev_list
0000fc78 g     F .text	000000f8 write
00010aac g     F .text	00000020 alt_timestamp_freq
000125d4 g       *ABS*	00000000 __ram_rodata_end
0000f570 g     F .text	000000b0 fstat
0000e964 g     F .text	000000f4 .hidden __ledf2
000098e0 g     F .text	00000140 __pow5mult
0000aba0 g     F .text	0000145c ___vfiprintf_internal_r
00015bfc g     O .bss	00000004 __nlocale_changed
0000d614 g     F .text	00000058 .hidden __umodsi3
00002a08 g     F .text	00000020 GetSobel_rgb
00015d4c g       *ABS*	00000000 end
00002a28 g     F .text	00000020 GetSobelResult
000009ac g     F .text	00000050 take_picture_blocking
00000a84 g     F .text	00000030 DIPSW_get_value
00002024 g     F .text	0000013c sobel_y_with_rgb
0000ffbc g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000984 g     F .text	00000028 current_image_pointer
00011e3c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010938 g     F .text	0000007c alt_avalon_timer_sc_init
00003328 g     F .text	00000064 .hidden __clzsi2
0001069c g     F .text	00000224 altera_avalon_jtag_uart_write
000080a0 g     F .text	00000004 __sfp_lock_acquire
00008df0 g     F .text	000000e4 memchr
00003dec g     F .text	000021f8 ___vfprintf_internal_r
00008204 g     F .text	00000310 _free_r
00008be0 g     F .text	00000010 __locale_mb_cur_max
00001f5c g     F .text	000000c8 sobel_y
00011f54 g     O .rodata	00000140 noise_reduction_reg_settings_array
00011c88 g     F .text	00000180 __call_exitprocs
00015bf8 g     O .bss	00000004 __mlocale_changed
00014088 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00015c18 g     O .bss	00000004 _alt_tick_rate
00009a20 g     F .text	00000148 __lshift
00015c1c g     O .bss	00000004 _alt_nticks
0000f9fc g     F .text	000000fc read
0000fddc g     F .text	0000007c alt_sys_init
00001e20 g     F .text	0000013c sobel_x_with_rgb
00011b70 g     F .text	00000118 __register_exitproc
000096e8 g     F .text	000001f8 __multiply
00010328 g     F .text	00000068 altera_avalon_jtag_uart_close
000125d4 g       *ABS*	00000000 __ram_rwdata_start
00011e3c g       *ABS*	00000000 __ram_rodata_start
00015c24 g     O .bss	00000028 __malloc_current_mallinfo
00009f34 g     F .text	0000014c __d2b
00015bd4 g     O .bss	00000004 sobel_height
000009fc g     F .text	00000030 enable_continues_mode
0000fe58 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000018a0 g     F .text	00000170 init_sobel_arrays
000118d8 g     F .text	000000a4 alt_get_fd
00010bf8 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000c134 g     F .text	00000054 _close_r
00011af4 g     F .text	0000007c memcmp
0000ff18 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d4c g       *ABS*	00000000 __alt_stack_base
0000ff68 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000060bc g     F .text	00000154 __swsetup_r
0000df18 g     F .text	000008e8 .hidden __divdf3
00007f60 g     F .text	00000118 __sfp
0000a198 g     F .text	00000078 __copybits
000125d4 g     O .rwdata	00000408 __malloc_av_
000080ac g     F .text	00000004 __sinit_lock_release
00002ab4 g     F .text	00000718 .hidden __muldf3
0000a874 g     F .text	00000054 __sread
000117d0 g     F .text	00000108 alt_find_file
00010dac g     F .text	000000a4 alt_dev_llist_insert
0000f978 g     F .text	00000024 __malloc_lock
0000fb5c g     F .text	000000b0 sbrk
00007cb4 g     F .text	0000005c _fflush_r
0000c188 g     F .text	000000c4 _calloc_r
00015bbc g       *ABS*	00000000 __bss_start
00009178 g     F .text	00000128 memset
00001310 g     F .text	00000590 main
00015c08 g     O .bss	00000004 alt_envp
00015be4 g     O .bss	00000004 __malloc_max_total_mem
00000c68 g     F .text	00000020 get_grayscale_width
0000feb8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c808 g     F .text	00000018 __swbuf
00015bd8 g     O .bss	00000004 sobel_x_result
0000a9a8 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000c33c g     F .text	00000014 fclose
000109b4 g     F .text	00000078 alt_timestamp_start
00006410 g     F .text	00001688 _dtoa_r
000033b4 g     F .text	0000080c _malloc_r
0000c97c g     F .text	00000030 __ascii_wctomb
000140b4 g     O .rwdata	00000004 alt_errno
000089d0 g     F .text	000000c4 _fwalk
0000d4b8 g     F .text	00000084 .hidden __divsi3
000080e0 g     F .text	00000124 _malloc_trim_r
00011e3c g       *ABS*	00000000 __CTOR_END__
00015bbc g     O .bss	00000004 grayscale_width
0000a9b0 g     F .text	000000dc strcmp
000011a4 g     F .text	000000a4 transfer_LCD_no_dma
00011e3c g       *ABS*	00000000 __flash_rodata_start
00011e3c g       *ABS*	00000000 __DTOR_LIST__
0000e800 g     F .text	00000088 .hidden __nedf2
00011e3c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000fda4 g     F .text	00000038 alt_irq_init
0000faf8 g     F .text	00000064 alt_release_fd
00000d04 g     F .text	000000b4 i2c_auto_detect
000122d9 g     O .rodata	00000100 .hidden __clz_tab
0000094c g     F .text	00000038 current_image_valid
00015bf4 g     O .bss	00000004 _PathLocale
00000cc8 g     F .text	0000003c i2c_busy_wait
00011aa8 g     F .text	00000014 atexit
0000c0d4 g     F .text	00000060 _write_r
00008c10 g     F .text	00000018 setlocale
00014094 g     O .rwdata	00000004 _impure_ptr
00015c00 g     O .bss	00000004 alt_argc
00007a98 g     F .text	0000021c __sflush_r
00015c0c g     O .bss	00000004 altera_avalon_timer_ts_base
00010eb0 g     F .text	00000060 _do_dtors
00008bfc g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009dc4 g     F .text	00000064 __ulp
000080c8 g     F .text	00000018 __fp_unlock_all
000140a0 g     O .rwdata	00000008 alt_fs_list
00015bdc g     O .bss	00000004 sobel_y_result
00000e58 g     F .text	00000084 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015bc8 g     O .bss	00000002 LCD_height
00008c28 g     F .text	0000000c localeconv
00010a2c g     F .text	00000080 alt_timestamp
00002a7c g     F .text	00000038 vga_set_swap
00010f44 g     F .text	00000050 alt_ic_isr_register
00002160 g     F .text	00000114 sobel_threshold
000140c8 g       *ABS*	00000000 _edata
00014080 g     O .rwdata	00000004 pgx_array
00015d4c g       *ABS*	00000000 _end
0000c350 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00010390 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000122c7 g     O .rodata	00000009 gx_array
0001101c g     F .text	0000008c alt_ic_irq_disable
0000a8d0 g     F .text	0000007c __swrite
0001408c g     O .rwdata	00000004 __malloc_trim_threshold
00015bca g     O .bss	00000002 LCD_width
00000ab4 g     F .text	000001b4 conv_grayscale
00008bf0 g     F .text	0000000c __locale_msgcharset
00011abc g     F .text	00000038 exit
00008a94 g     F .text	000000c4 _fwalk_reent
00009bc8 g     F .text	000001fc __mdiff
0000d53c g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000080a4 g     F .text	00000004 __sfp_lock_release
00000c88 g     F .text	00000020 get_grayscale_height
00011e08 g     F .text	00000034 _exit
00001a10 g     F .text	00000348 sobel_mac
00010acc g     F .text	0000012c alt_alarm_start
00008c34 g     F .text	000001bc __smakebuf_r
00015be0 g     O .bss	00000004 sobel_rgb565
00003d54 g     F .text	00000098 strlen
00011424 g     F .text	00000154 open
0000e888 g     F .text	000000dc .hidden __gedf2
0001409c g     O .rwdata	00000004 __wctomb
0000ab88 g     F .text	00000018 __sprint_r
00010f10 g     F .text	00000034 alt_icache_flush_all
000140bc g     O .rwdata	00000004 alt_priority_mask
00010f94 g     F .text	00000088 alt_ic_irq_enable
00005fe4 g     F .text	0000001c __vfprintf_internal
0000c9ac g     F .text	0000005c _wctomb_r
0000ea58 g     F .text	000008fc .hidden __subdf3
000095fc g     F .text	000000b0 __lo0bits
000140c0 g     O .rwdata	00000008 alt_alarm_list
00010e50 g     F .text	00000060 _do_ctors
0000c8bc g     F .text	000000c0 wcrtomb
0000f438 g     F .text	000000d0 close
0000f768 g     F .text	00000084 alt_load
0000c4d8 g     F .text	00000080 fputwc
000033a0 g     F .text	00000014 free
000080a8 g     F .text	00000004 __sinit_lock_acquire
00009370 g     F .text	00000120 __multadd
00009348 g     F .text	00000028 _Bfree
00000a2c g     F .text	00000058 new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10971304 	addi	r2,r2,23628
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10971304 	addi	r2,r2,23628
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e817 	ldw	r2,-25696(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e817 	ldw	r2,-25696(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6b02014 	ori	gp,gp,49280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1096ef14 	ori	r2,r2,23484

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d75314 	ori	r3,r3,23884

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000f7680 	call	f768 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000f8fc0 	call	f8fc <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     280:	defffd04 	addi	sp,sp,-12
     284:	dfc00215 	stw	ra,8(sp)
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00c00084 	movi	r3,2
     294:	00804034 	movhi	r2,256
     298:	10842744 	addi	r2,r2,4253
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00c00044 	movi	r3,1
     2a4:	00804034 	movhi	r2,256
     2a8:	10841304 	addi	r2,r2,4172
     2ac:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000406 	br	2c8 <init_camera+0x48>
		asm volatile ("nop");
     2b8:	0001883a 	nop

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bfff15 	stw	r2,-4(fp)
     2c8:	e0ffff17 	ldw	r3,-4(fp)
     2cc:	008003f4 	movhi	r2,15
     2d0:	10908fc4 	addi	r2,r2,16959
     2d4:	10fff80e 	bge	r2,r3,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2d8:	0007883a 	mov	r3,zero
     2dc:	00804034 	movhi	r2,256
     2e0:	10841304 	addi	r2,r2,4172
     2e4:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2e8:	e03fff15 	stw	zero,-4(fp)
     2ec:	00000406 	br	300 <init_camera+0x80>
		asm volatile ("nop");
     2f0:	0001883a 	nop
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bfff15 	stw	r2,-4(fp)
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	008003f4 	movhi	r2,15
     308:	10908fc4 	addi	r2,r2,16959
     30c:	10fff80e 	bge	r2,r3,2f0 <__alt_data_end+0xff0002f0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     310:	01800044 	movi	r6,1
     314:	014ce184 	movi	r5,13190
     318:	01001e04 	movi	r4,120
     31c:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     320:	000d883a 	mov	r6,zero
     324:	014ce184 	movi	r5,13190
     328:	01001e04 	movi	r4,120
     32c:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     330:	e03fff15 	stw	zero,-4(fp)
     334:	00000406 	br	348 <init_camera+0xc8>
		asm volatile ("nop");
     338:	0001883a 	nop
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bfff15 	stw	r2,-4(fp)
     348:	e0ffff17 	ldw	r3,-4(fp)
     34c:	008003f4 	movhi	r2,15
     350:	10908fc4 	addi	r2,r2,16959
     354:	10fff80e 	bge	r2,r3,338 <__alt_data_end+0xff000338>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     358:	01803104 	movi	r6,196
     35c:	014c0684 	movi	r5,12314
     360:	01001e04 	movi	r4,120
     364:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     368:	01800204 	movi	r6,8
     36c:	014c8084 	movi	r5,12802
     370:	01001e04 	movi	r4,120
     374:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     378:	0180c744 	movi	r6,797
     37c:	014cfd04 	movi	r5,13300
     380:	01001e04 	movi	r4,120
     384:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     388:	e03fff15 	stw	zero,-4(fp)
     38c:	00000406 	br	3a0 <init_camera+0x120>
		asm volatile ("nop");
     390:	0001883a 	nop
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bfff15 	stw	r2,-4(fp)
     3a0:	e0ffff17 	ldw	r3,-4(fp)
     3a4:	008000b4 	movhi	r2,2
     3a8:	10a1a7c4 	addi	r2,r2,-31073
     3ac:	10fff80e 	bge	r2,r3,390 <__alt_data_end+0xff000390>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3b0:	01a3c254 	movui	r6,36617
     3b4:	014d0784 	movi	r5,13342
     3b8:	01001e04 	movi	r4,120
     3bc:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3c0:	01805404 	movi	r6,336
     3c4:	014d0704 	movi	r5,13340
     3c8:	01001e04 	movi	r4,120
     3cc:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3d0:	01a3c254 	movui	r6,36617
     3d4:	014d0784 	movi	r5,13342
     3d8:	01001e04 	movi	r4,120
     3dc:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     3e0:	e03fff15 	stw	zero,-4(fp)
     3e4:	00000406 	br	3f8 <init_camera+0x178>
		asm volatile ("nop");
     3e8:	0001883a 	nop
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800044 	addi	r2,r2,1
     3f4:	e0bfff15 	stw	r2,-4(fp)
     3f8:	e0ffff17 	ldw	r3,-4(fp)
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a7c4 	addi	r2,r2,-31073
     404:	10fff80e 	bge	r2,r3,3e8 <__alt_data_end+0xff0003e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     408:	01a3c214 	movui	r6,36616
     40c:	014d0784 	movi	r5,13342
     410:	01001e04 	movi	r4,120
     414:	0000e580 	call	e58 <i2c_short_write>
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     418:	e03fff15 	stw	zero,-4(fp)
     41c:	00001806 	br	480 <init_camera+0x200>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
     420:	00800074 	movhi	r2,1
     424:	10878f04 	addi	r2,r2,7740
     428:	e0ffff17 	ldw	r3,-4(fp)
     42c:	18c7883a 	add	r3,r3,r3
     430:	18c7883a 	add	r3,r3,r3
     434:	10c5883a 	add	r2,r2,r3
     438:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     43c:	113fffcc 	andi	r4,r2,65535
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
     440:	00800074 	movhi	r2,1
     444:	10878f04 	addi	r2,r2,7740
     448:	e0ffff17 	ldw	r3,-4(fp)
     44c:	18c7883a 	add	r3,r3,r3
     450:	18c7883a 	add	r3,r3,r3
     454:	10c5883a 	add	r2,r2,r3
     458:	10800084 	addi	r2,r2,2
     45c:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     460:	10bfffcc 	andi	r2,r2,65535
     464:	100d883a 	mov	r6,r2
     468:	200b883a 	mov	r5,r4
     46c:	01001e04 	movi	r4,120
     470:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bfff15 	stw	r2,-4(fp)
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	108011b0 	cmpltui	r2,r2,70
     488:	103fe51e 	bne	r2,zero,420 <__alt_data_end+0xff000420>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     48c:	e03fff15 	stw	zero,-4(fp)
     490:	00001806 	br	4f4 <init_camera+0x274>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
     494:	00800074 	movhi	r2,1
     498:	1087d504 	addi	r2,r2,8020
     49c:	e0ffff17 	ldw	r3,-4(fp)
     4a0:	18c7883a 	add	r3,r3,r3
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	10c5883a 	add	r2,r2,r3
     4ac:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4b0:	113fffcc 	andi	r4,r2,65535
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
     4b4:	00800074 	movhi	r2,1
     4b8:	1087d504 	addi	r2,r2,8020
     4bc:	e0ffff17 	ldw	r3,-4(fp)
     4c0:	18c7883a 	add	r3,r3,r3
     4c4:	18c7883a 	add	r3,r3,r3
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800084 	addi	r2,r2,2
     4d0:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4d4:	10bfffcc 	andi	r2,r2,65535
     4d8:	100d883a 	mov	r6,r2
     4dc:	200b883a 	mov	r5,r4
     4e0:	01001e04 	movi	r4,120
     4e4:	0000e580 	call	e58 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10801430 	cmpltui	r2,r2,80
     4fc:	103fe51e 	bne	r2,zero,494 <__alt_data_end+0xff000494>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     500:	018164c4 	movi	r6,1427
     504:	014d6904 	movi	r5,13732
     508:	01001e04 	movi	r4,120
     50c:	0000e580 	call	e58 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     510:	0189e644 	movi	r6,10137
     514:	014ce304 	movi	r5,13196
     518:	01001e04 	movi	r4,120
     51c:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     520:	01991004 	movi	r6,25664
     524:	014ce404 	movi	r5,13200
     528:	01001e04 	movi	r4,120
     52c:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     530:	e03fff15 	stw	zero,-4(fp)
     534:	00000406 	br	548 <init_camera+0x2c8>
		asm volatile ("nop");
     538:	0001883a 	nop
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bfff15 	stw	r2,-4(fp)
     548:	e0ffff17 	ldw	r3,-4(fp)
     54c:	008000b4 	movhi	r2,2
     550:	10a1a7c4 	addi	r2,r2,-31073
     554:	10fff80e 	bge	r2,r3,538 <__alt_data_end+0xff000538>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     558:	0189e6c4 	movi	r6,10139
     55c:	014ce304 	movi	r5,13196
     560:	01001e04 	movi	r4,120
     564:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     568:	01991004 	movi	r6,25664
     56c:	014ce404 	movi	r5,13200
     570:	01001e04 	movi	r4,120
     574:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     578:	e03fff15 	stw	zero,-4(fp)
     57c:	00000406 	br	590 <init_camera+0x310>
		asm volatile ("nop");
     580:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bfff15 	stw	r2,-4(fp)
     590:	e0ffff17 	ldw	r3,-4(fp)
     594:	008000b4 	movhi	r2,2
     598:	10a1a7c4 	addi	r2,r2,-31073
     59c:	10fff80e 	bge	r2,r3,580 <__alt_data_end+0xff000580>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5a0:	01a840d4 	movui	r6,41219
     5a4:	014ce304 	movi	r5,13196
     5a8:	01001e04 	movi	r4,120
     5ac:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     5b0:	01800144 	movi	r6,5
     5b4:	014ce404 	movi	r5,13200
     5b8:	01001e04 	movi	r4,120
     5bc:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     5c0:	e03fff15 	stw	zero,-4(fp)
     5c4:	00000406 	br	5d8 <init_camera+0x358>
		asm volatile ("nop");
     5c8:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	e0bfff15 	stw	r2,-4(fp)
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	008000b4 	movhi	r2,2
     5e0:	10a1a7c4 	addi	r2,r2,-31073
     5e4:	10fff80e 	bge	r2,r3,5c8 <__alt_data_end+0xff0005c8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5e8:	01a840d4 	movui	r6,41219
     5ec:	014ce304 	movi	r5,13196
     5f0:	01001e04 	movi	r4,120
     5f4:	0000e580 	call	e58 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     5f8:	01800184 	movi	r6,6
     5fc:	014ce404 	movi	r5,13200
     600:	01001e04 	movi	r4,120
     604:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     608:	e03fff15 	stw	zero,-4(fp)
     60c:	00000406 	br	620 <init_camera+0x3a0>
		asm volatile ("nop");
     610:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	10800044 	addi	r2,r2,1
     61c:	e0bfff15 	stw	r2,-4(fp)
     620:	e0ffff17 	ldw	r3,-4(fp)
     624:	008000b4 	movhi	r2,2
     628:	10a1a7c4 	addi	r2,r2,-31073
     62c:	10fff80e 	bge	r2,r3,610 <__alt_data_end+0xff000610>
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     630:	e03fff15 	stw	zero,-4(fp)
     634:	00001806 	br	698 <init_camera+0x418>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
     638:	00800074 	movhi	r2,1
     63c:	10882504 	addi	r2,r2,8340
     640:	e0ffff17 	ldw	r3,-4(fp)
     644:	18c7883a 	add	r3,r3,r3
     648:	18c7883a 	add	r3,r3,r3
     64c:	10c5883a 	add	r2,r2,r3
     650:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     654:	113fffcc 	andi	r4,r2,65535
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
     658:	00800074 	movhi	r2,1
     65c:	10882504 	addi	r2,r2,8340
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	18c7883a 	add	r3,r3,r3
     668:	18c7883a 	add	r3,r3,r3
     66c:	10c5883a 	add	r2,r2,r3
     670:	10800084 	addi	r2,r2,2
     674:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	100d883a 	mov	r6,r2
     680:	200b883a 	mov	r5,r4
     684:	01001e04 	movi	r4,120
     688:	0000e580 	call	e58 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     68c:	e0bfff17 	ldw	r2,-4(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	108012b0 	cmpltui	r2,r2,74
     6a0:	103fe51e 	bne	r2,zero,638 <__alt_data_end+0xff000638>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6a4:	e03fff15 	stw	zero,-4(fp)
     6a8:	00000406 	br	6bc <init_camera+0x43c>
		asm volatile ("nop");
     6ac:	0001883a 	nop
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bfff15 	stw	r2,-4(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	008003f4 	movhi	r2,15
     6c4:	10908fc4 	addi	r2,r2,16959
     6c8:	10fff80e 	bge	r2,r3,6ac <__alt_data_end+0xff0006ac>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     6cc:	01800804 	movi	r6,32
     6d0:	014ccb84 	movi	r5,13102
     6d4:	01001e04 	movi	r4,120
     6d8:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	00000406 	br	6f4 <init_camera+0x474>
		asm volatile ("nop");
     6e4:	0001883a 	nop
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfff15 	stw	r2,-4(fp)
     6f4:	e0ffff17 	ldw	r3,-4(fp)
     6f8:	008003f4 	movhi	r2,15
     6fc:	10908fc4 	addi	r2,r2,16959
     700:	10fff80e 	bge	r2,r3,6e4 <__alt_data_end+0xff0006e4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     704:	01800884 	movi	r6,34
     708:	014d0104 	movi	r5,13316
     70c:	01001e04 	movi	r4,120
     710:	0000e580 	call	e58 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     714:	e03fff15 	stw	zero,-4(fp)
     718:	00000406 	br	72c <init_camera+0x4ac>
		asm volatile ("nop");
     71c:	0001883a 	nop
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bfff15 	stw	r2,-4(fp)
     72c:	e0ffff17 	ldw	r3,-4(fp)
     730:	008003f4 	movhi	r2,15
     734:	10908fc4 	addi	r2,r2,16959
     738:	10fff80e 	bge	r2,r3,71c <__alt_data_end+0xff00071c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     73c:	018009c4 	movi	r6,39
     740:	014c1004 	movi	r5,12352
     744:	01001e04 	movi	r4,120
     748:	0000e580 	call	e58 <i2c_short_write>
}
     74c:	0001883a 	nop
     750:	e037883a 	mov	sp,fp
     754:	dfc00117 	ldw	ra,4(sp)
     758:	df000017 	ldw	fp,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret

00000764 <cam_get_xsize>:

unsigned short cam_get_xsize(){
     764:	defffe04 	addi	sp,sp,-8
     768:	df000115 	stw	fp,4(sp)
     76c:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     770:	00804034 	movhi	r2,256
     774:	10841304 	addi	r2,r2,4172
     778:	10800023 	ldbuio	r2,0(r2)
     77c:	10803fcc 	andi	r2,r2,255
     780:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     784:	e0bfff03 	ldbu	r2,-4(fp)
     788:	1080010c 	andi	r2,r2,4
     78c:	103ff826 	beq	r2,zero,770 <__alt_data_end+0xff000770>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     790:	00804034 	movhi	r2,256
     794:	10841004 	addi	r2,r2,4160
     798:	1080002b 	ldhuio	r2,0(r2)
     79c:	10bfffcc 	andi	r2,r2,65535
}
     7a0:	e037883a 	mov	sp,fp
     7a4:	df000017 	ldw	fp,0(sp)
     7a8:	dec00104 	addi	sp,sp,4
     7ac:	f800283a 	ret

000007b0 <cam_get_ysize>:

unsigned short cam_get_ysize() {
     7b0:	defffe04 	addi	sp,sp,-8
     7b4:	df000115 	stw	fp,4(sp)
     7b8:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     7bc:	00804034 	movhi	r2,256
     7c0:	10841304 	addi	r2,r2,4172
     7c4:	10800023 	ldbuio	r2,0(r2)
     7c8:	10803fcc 	andi	r2,r2,255
     7cc:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     7d0:	e0bfff03 	ldbu	r2,-4(fp)
     7d4:	1080010c 	andi	r2,r2,4
     7d8:	103ff826 	beq	r2,zero,7bc <__alt_data_end+0xff0007bc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     7dc:	00804034 	movhi	r2,256
     7e0:	10841104 	addi	r2,r2,4164
     7e4:	1080002b 	ldhuio	r2,0(r2)
     7e8:	10bfffcc 	andi	r2,r2,65535
}
     7ec:	e037883a 	mov	sp,fp
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00104 	addi	sp,sp,4
     7f8:	f800283a 	ret

000007fc <cam_get_profiling>:

void cam_get_profiling() {
     7fc:	defffd04 	addi	sp,sp,-12
     800:	dfc00215 	stw	ra,8(sp)
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     80c:	00804034 	movhi	r2,256
     810:	10841304 	addi	r2,r2,4172
     814:	10800023 	ldbuio	r2,0(r2)
     818:	10803fcc 	andi	r2,r2,255
     81c:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     820:	e0bfff03 	ldbu	r2,-4(fp)
     824:	1080010c 	andi	r2,r2,4
     828:	103ff826 	beq	r2,zero,80c <__alt_data_end+0xff00080c>
	printf("Nr. of bytes each line    : %d\n",
     82c:	00804034 	movhi	r2,256
     830:	10841004 	addi	r2,r2,4160
     834:	1080002b 	ldhuio	r2,0(r2)
     838:	10bfffcc 	andi	r2,r2,65535
     83c:	100b883a 	mov	r5,r2
     840:	01000074 	movhi	r4,1
     844:	21086f04 	addi	r4,r4,8636
     848:	0003bf00 	call	3bf0 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     84c:	00804034 	movhi	r2,256
     850:	10841104 	addi	r2,r2,4164
     854:	1080002b 	ldhuio	r2,0(r2)
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	100b883a 	mov	r5,r2
     860:	01000074 	movhi	r4,1
     864:	21087704 	addi	r4,r4,8668
     868:	0003bf00 	call	3bf0 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     86c:	00804034 	movhi	r2,256
     870:	10841204 	addi	r2,r2,4168
     874:	1080002b 	ldhuio	r2,0(r2)
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	100b883a 	mov	r5,r2
     880:	01000074 	movhi	r4,1
     884:	21087f04 	addi	r4,r4,8700
     888:	0003bf00 	call	3bf0 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     88c:	0001883a 	nop
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <cam_set_image_pointer>:

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
     8a4:	defffd04 	addi	sp,sp,-12
     8a8:	df000215 	stw	fp,8(sp)
     8ac:	df000204 	addi	fp,sp,8
     8b0:	2005883a 	mov	r2,r4
     8b4:	e17fff15 	stw	r5,-4(fp)
     8b8:	e0bffe05 	stb	r2,-8(fp)
	switch (pointer_id) {
     8bc:	e0bffe07 	ldb	r2,-8(fp)
     8c0:	10c00060 	cmpeqi	r3,r2,1
     8c4:	18000e1e 	bne	r3,zero,900 <cam_set_image_pointer+0x5c>
     8c8:	10c00088 	cmpgei	r3,r2,2
     8cc:	1800021e 	bne	r3,zero,8d8 <cam_set_image_pointer+0x34>
     8d0:	10000626 	beq	r2,zero,8ec <cam_set_image_pointer+0x48>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8d4:	00001906 	br	93c <cam_set_image_pointer+0x98>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     8d8:	10c000a0 	cmpeqi	r3,r2,2
     8dc:	18000d1e 	bne	r3,zero,914 <cam_set_image_pointer+0x70>
     8e0:	108000e0 	cmpeqi	r2,r2,3
     8e4:	1000101e 	bne	r2,zero,928 <cam_set_image_pointer+0x84>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8e8:	00001406 	br	93c <cam_set_image_pointer+0x98>
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     8ec:	e0ffff17 	ldw	r3,-4(fp)
     8f0:	00804034 	movhi	r2,256
     8f4:	10841404 	addi	r2,r2,4176
     8f8:	10c00035 	stwio	r3,0(r2)
	            break;
     8fc:	00000f06 	br	93c <cam_set_image_pointer+0x98>
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     900:	e0ffff17 	ldw	r3,-4(fp)
     904:	00804034 	movhi	r2,256
     908:	10841504 	addi	r2,r2,4180
     90c:	10c00035 	stwio	r3,0(r2)
                break;
     910:	00000a06 	br	93c <cam_set_image_pointer+0x98>
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     914:	e0ffff17 	ldw	r3,-4(fp)
     918:	00804034 	movhi	r2,256
     91c:	10841604 	addi	r2,r2,4184
     920:	10c00035 	stwio	r3,0(r2)
                break;
     924:	00000506 	br	93c <cam_set_image_pointer+0x98>
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     928:	e0ffff17 	ldw	r3,-4(fp)
     92c:	00804034 	movhi	r2,256
     930:	10841704 	addi	r2,r2,4188
     934:	10c00035 	stwio	r3,0(r2)
                break;
     938:	0001883a 	nop
	   default: return;
	}
}
     93c:	e037883a 	mov	sp,fp
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00104 	addi	sp,sp,4
     948:	f800283a 	ret

0000094c <current_image_valid>:

short current_image_valid() {
     94c:	defffe04 	addi	sp,sp,-8
     950:	df000115 	stw	fp,4(sp)
     954:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     958:	00804034 	movhi	r2,256
     95c:	10841304 	addi	r2,r2,4172
     960:	1080002b 	ldhuio	r2,0(r2)
     964:	10bfffcc 	andi	r2,r2,65535
     968:	e0bfff0d 	sth	r2,-4(fp)
	return (value&CAM_Current_Image_Valid);
     96c:	e0bfff0b 	ldhu	r2,-4(fp)
     970:	1080800c 	andi	r2,r2,512
}
     974:	e037883a 	mov	sp,fp
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00104 	addi	sp,sp,4
     980:	f800283a 	ret

00000984 <current_image_pointer>:

void *current_image_pointer() {
     984:	deffff04 	addi	sp,sp,-4
     988:	df000015 	stw	fp,0(sp)
     98c:	d839883a 	mov	fp,sp
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     990:	00804034 	movhi	r2,256
     994:	10841404 	addi	r2,r2,4176
     998:	10800037 	ldwio	r2,0(r2)
}
     99c:	e037883a 	mov	sp,fp
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00104 	addi	sp,sp,4
     9a8:	f800283a 	ret

000009ac <take_picture_blocking>:

void take_picture_blocking() {
     9ac:	defffe04 	addi	sp,sp,-8
     9b0:	df000115 	stw	fp,4(sp)
     9b4:	df000104 	addi	fp,sp,4
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9b8:	00c00204 	movi	r3,8
     9bc:	00804034 	movhi	r2,256
     9c0:	10841304 	addi	r2,r2,4172
     9c4:	10c0002d 	sthio	r3,0(r2)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c8:	00804034 	movhi	r2,256
     9cc:	10841304 	addi	r2,r2,4172
     9d0:	1080002b 	ldhuio	r2,0(r2)
     9d4:	10bfffcc 	andi	r2,r2,65535
     9d8:	e0bfff0d 	sth	r2,-4(fp)
	} while ((value&CAM_Busy)!= 0);
     9dc:	e0bfff0b 	ldhu	r2,-4(fp)
     9e0:	1080020c 	andi	r2,r2,8
     9e4:	103ff81e 	bne	r2,zero,9c8 <__alt_data_end+0xff0009c8>
}
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00104 	addi	sp,sp,4
     9f8:	f800283a 	ret

000009fc <enable_continues_mode>:

void enable_continues_mode() {
     9fc:	deffff04 	addi	sp,sp,-4
     a00:	df000015 	stw	fp,0(sp)
     a04:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     a08:	00c00404 	movi	r3,16
     a0c:	00804034 	movhi	r2,256
     a10:	10841304 	addi	r2,r2,4172
     a14:	10c0002d 	sthio	r3,0(r2)
}
     a18:	0001883a 	nop
     a1c:	e037883a 	mov	sp,fp
     a20:	df000017 	ldw	fp,0(sp)
     a24:	dec00104 	addi	sp,sp,4
     a28:	f800283a 	ret

00000a2c <new_image_available>:

char new_image_available() {
     a2c:	defffe04 	addi	sp,sp,-8
     a30:	df000115 	stw	fp,4(sp)
     a34:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a38:	00804034 	movhi	r2,256
     a3c:	10841304 	addi	r2,r2,4172
     a40:	1080002b 	ldhuio	r2,0(r2)
     a44:	10bfffcc 	andi	r2,r2,65535
     a48:	e0bfff0d 	sth	r2,-4(fp)
	if ((value&CAM_IRQ_Generated)!=0) {
     a4c:	e0bfff0b 	ldhu	r2,-4(fp)
     a50:	1080200c 	andi	r2,r2,128
     a54:	10000626 	beq	r2,zero,a70 <new_image_available+0x44>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a58:	00c04004 	movi	r3,256
     a5c:	00804034 	movhi	r2,256
     a60:	10841304 	addi	r2,r2,4172
     a64:	10c0002d 	sthio	r3,0(r2)
		return 1;
     a68:	00800044 	movi	r2,1
     a6c:	00000106 	br	a74 <new_image_available+0x48>
	} else return 0;
     a70:	0005883a 	mov	r2,zero
}
     a74:	e037883a 	mov	sp,fp
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00104 	addi	sp,sp,4
     a80:	f800283a 	ret

00000a84 <DIPSW_get_value>:
 */

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
     a84:	deffff04 	addi	sp,sp,-4
     a88:	df000015 	stw	fp,0(sp)
     a8c:	d839883a 	mov	fp,sp
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     a90:	00804034 	movhi	r2,256
     a94:	10842804 	addi	r2,r2,4256
     a98:	10800023 	ldbuio	r2,0(r2)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	0084303a 	nor	r2,zero,r2
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     ab4:	defff604 	addi	sp,sp,-40
     ab8:	dfc00915 	stw	ra,36(sp)
     abc:	df000815 	stw	fp,32(sp)
     ac0:	df000804 	addi	fp,sp,32
     ac4:	e13ffd15 	stw	r4,-12(fp)
     ac8:	e17ffe15 	stw	r5,-8(fp)
     acc:	e1bfff15 	stw	r6,-4(fp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	e0bffa15 	stw	r2,-24(fp)
	grayscale_width = width;
     ad8:	e0bffe17 	ldw	r2,-8(fp)
     adc:	d0a6cf15 	stw	r2,-25796(gp)
	grayscape_height = height;
     ae0:	e0bfff17 	ldw	r2,-4(fp)
     ae4:	d0a6d015 	stw	r2,-25792(gp)
	if (grayscale_array != NULL)
     ae8:	d0a6d117 	ldw	r2,-25788(gp)
     aec:	10000326 	beq	r2,zero,afc <conv_grayscale+0x48>
		free(grayscale_array);
     af0:	d0a6d117 	ldw	r2,-25788(gp)
     af4:	1009883a 	mov	r4,r2
     af8:	00033a00 	call	33a0 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     afc:	e0fffe17 	ldw	r3,-8(fp)
     b00:	e0bfff17 	ldw	r2,-4(fp)
     b04:	1885383a 	mul	r2,r3,r2
     b08:	1009883a 	mov	r4,r2
     b0c:	000338c0 	call	338c <malloc>
     b10:	d0a6d115 	stw	r2,-25788(gp)
	for (y = 0 ; y < height ; y++) {
     b14:	e03ff915 	stw	zero,-28(fp)
     b18:	00004a06 	br	c44 <conv_grayscale+0x190>
		for (x = 0 ; x < width ; x++) {
     b1c:	e03ff815 	stw	zero,-32(fp)
     b20:	00004206 	br	c2c <conv_grayscale+0x178>
			rgb = pixels[y*width+x];
     b24:	e0fff917 	ldw	r3,-28(fp)
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	1887383a 	mul	r3,r3,r2
     b30:	e0bff817 	ldw	r2,-32(fp)
     b34:	1885883a 	add	r2,r3,r2
     b38:	1085883a 	add	r2,r2,r2
     b3c:	1007883a 	mov	r3,r2
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10c5883a 	add	r2,r2,r3
     b48:	1080000b 	ldhu	r2,0(r2)
     b4c:	e0bffb0d 	sth	r2,-20(fp)
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     b50:	e0bffb0b 	ldhu	r2,-20(fp)
     b54:	1004d2fa 	srli	r2,r2,11
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	100490fa 	slli	r2,r2,3
     b60:	10803fcc 	andi	r2,r2,255
     b64:	10800564 	muli	r2,r2,21
     b68:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     b6c:	e0bffb0b 	ldhu	r2,-20(fp)
     b70:	1004d17a 	srli	r2,r2,5
     b74:	10bfffcc 	andi	r2,r2,65535
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	10803fcc 	andi	r2,r2,255
     b84:	10801224 	muli	r2,r2,72
     b88:	e0fffc17 	ldw	r3,-16(fp)
     b8c:	1885883a 	add	r2,r3,r2
     b90:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     b94:	e0bffb0b 	ldhu	r2,-20(fp)
     b98:	100490fa 	slli	r2,r2,3
     b9c:	10803fcc 	andi	r2,r2,255
     ba0:	108001e4 	muli	r2,r2,7
     ba4:	e0fffc17 	ldw	r3,-16(fp)
     ba8:	1885883a 	add	r2,r3,r2
     bac:	e0bffc15 	stw	r2,-16(fp)
			gray *= 0.01;
     bb0:	e13ffc17 	ldw	r4,-16(fp)
     bb4:	000324c0 	call	324c <__floatsidf>
     bb8:	1011883a 	mov	r8,r2
     bbc:	1813883a 	mov	r9,r3
     bc0:	0191ebb4 	movhi	r6,18350
     bc4:	31851ec4 	addi	r6,r6,5243
     bc8:	01cfe134 	movhi	r7,16260
     bcc:	39deb844 	addi	r7,r7,31457
     bd0:	4009883a 	mov	r4,r8
     bd4:	480b883a 	mov	r5,r9
     bd8:	0002ab40 	call	2ab4 <__muldf3>
     bdc:	1009883a 	mov	r4,r2
     be0:	180b883a 	mov	r5,r3
     be4:	2005883a 	mov	r2,r4
     be8:	2807883a 	mov	r3,r5
     bec:	1009883a 	mov	r4,r2
     bf0:	180b883a 	mov	r5,r3
     bf4:	00031cc0 	call	31cc <__fixdfsi>
     bf8:	e0bffc15 	stw	r2,-16(fp)
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     bfc:	d0a6d117 	ldw	r2,-25788(gp)
     c00:	e13ff917 	ldw	r4,-28(fp)
     c04:	e0fffe17 	ldw	r3,-8(fp)
     c08:	20c9383a 	mul	r4,r4,r3
     c0c:	e0fff817 	ldw	r3,-32(fp)
     c10:	20c7883a 	add	r3,r4,r3
     c14:	10c5883a 	add	r2,r2,r3
     c18:	e0fffc03 	ldbu	r3,-16(fp)
     c1c:	10c00025 	stbio	r3,0(r2)
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     c20:	e0bff817 	ldw	r2,-32(fp)
     c24:	10800044 	addi	r2,r2,1
     c28:	e0bff815 	stw	r2,-32(fp)
     c2c:	e0fff817 	ldw	r3,-32(fp)
     c30:	e0bffe17 	ldw	r2,-8(fp)
     c34:	18bfbb16 	blt	r3,r2,b24 <__alt_data_end+0xff000b24>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     c38:	e0bff917 	ldw	r2,-28(fp)
     c3c:	10800044 	addi	r2,r2,1
     c40:	e0bff915 	stw	r2,-28(fp)
     c44:	e0fff917 	ldw	r3,-28(fp)
     c48:	e0bfff17 	ldw	r2,-4(fp)
     c4c:	18bfb316 	blt	r3,r2,b1c <__alt_data_end+0xff000b1c>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray *= 0.01;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     c50:	0001883a 	nop
     c54:	e037883a 	mov	sp,fp
     c58:	dfc00117 	ldw	ra,4(sp)
     c5c:	df000017 	ldw	fp,0(sp)
     c60:	dec00204 	addi	sp,sp,8
     c64:	f800283a 	ret

00000c68 <get_grayscale_width>:


int get_grayscale_width() {
     c68:	deffff04 	addi	sp,sp,-4
     c6c:	df000015 	stw	fp,0(sp)
     c70:	d839883a 	mov	fp,sp
	return grayscale_width;
     c74:	d0a6cf17 	ldw	r2,-25796(gp)
}
     c78:	e037883a 	mov	sp,fp
     c7c:	df000017 	ldw	fp,0(sp)
     c80:	dec00104 	addi	sp,sp,4
     c84:	f800283a 	ret

00000c88 <get_grayscale_height>:

int get_grayscale_height() {
     c88:	deffff04 	addi	sp,sp,-4
     c8c:	df000015 	stw	fp,0(sp)
     c90:	d839883a 	mov	fp,sp
	return grayscape_height;
     c94:	d0a6d017 	ldw	r2,-25792(gp)
}
     c98:	e037883a 	mov	sp,fp
     c9c:	df000017 	ldw	fp,0(sp)
     ca0:	dec00104 	addi	sp,sp,4
     ca4:	f800283a 	ret

00000ca8 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
     ca8:	deffff04 	addi	sp,sp,-4
     cac:	df000015 	stw	fp,0(sp)
     cb0:	d839883a 	mov	fp,sp
	return grayscale_array;
     cb4:	d0a6d117 	ldw	r2,-25788(gp)
}
     cb8:	e037883a 	mov	sp,fp
     cbc:	df000017 	ldw	fp,0(sp)
     cc0:	dec00104 	addi	sp,sp,4
     cc4:	f800283a 	ret

00000cc8 <i2c_busy_wait>:

#include <system.h>
#include <io.h>
#include "i2c.h"

void i2c_busy_wait() {
     cc8:	defffe04 	addi	sp,sp,-8
     ccc:	df000115 	stw	fp,4(sp)
     cd0:	df000104 	addi	fp,sp,4
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     cd4:	00804034 	movhi	r2,256
     cd8:	10842704 	addi	r2,r2,4252
     cdc:	10800037 	ldwio	r2,0(r2)
     ce0:	e0bfff15 	stw	r2,-4(fp)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     ce4:	e0bfff17 	ldw	r2,-4(fp)
     ce8:	108000cc 	andi	r2,r2,3
     cec:	103ff91e 	bne	r2,zero,cd4 <__alt_data_end+0xff000cd4>
}
     cf0:	0001883a 	nop
     cf4:	e037883a 	mov	sp,fp
     cf8:	df000017 	ldw	fp,0(sp)
     cfc:	dec00104 	addi	sp,sp,4
     d00:	f800283a 	ret

00000d04 <i2c_auto_detect>:

void i2c_auto_detect() {
     d04:	defffb04 	addi	sp,sp,-20
     d08:	dfc00415 	stw	ra,16(sp)
     d0c:	df000315 	stw	fp,12(sp)
     d10:	df000304 	addi	fp,sp,12
	int nrdef,loop,value;
    i2c_busy_wait();
     d14:	0000cc80 	call	cc8 <i2c_busy_wait>
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     d18:	00c00104 	movi	r3,4
     d1c:	00804034 	movhi	r2,256
     d20:	10842704 	addi	r2,r2,4252
     d24:	10c00035 	stwio	r3,0(r2)
    i2c_busy_wait();
     d28:	0000cc80 	call	cc8 <i2c_busy_wait>
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     d2c:	00804034 	movhi	r2,256
     d30:	10842504 	addi	r2,r2,4244
     d34:	10800037 	ldwio	r2,0(r2)
     d38:	e0bffe15 	stw	r2,-8(fp)
    printf("Number of I2C devices detected: %d\n",nrdef);
     d3c:	e17ffe17 	ldw	r5,-8(fp)
     d40:	01000074 	movhi	r4,1
     d44:	21088704 	addi	r4,r4,8732
     d48:	0003bf00 	call	3bf0 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     d4c:	e03ffd15 	stw	zero,-12(fp)
     d50:	00001006 	br	d94 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d54:	00804034 	movhi	r2,256
     d58:	10842404 	addi	r2,r2,4240
     d5c:	e0fffd17 	ldw	r3,-12(fp)
     d60:	10c00035 	stwio	r3,0(r2)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
     d64:	00804034 	movhi	r2,256
     d68:	10842404 	addi	r2,r2,4240
     d6c:	10800037 	ldwio	r2,0(r2)
     d70:	e0bfff15 	stw	r2,-4(fp)
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d74:	e1bfff17 	ldw	r6,-4(fp)
     d78:	e17ffd17 	ldw	r5,-12(fp)
     d7c:	01000074 	movhi	r4,1
     d80:	21089004 	addi	r4,r4,8768
     d84:	0003bf00 	call	3bf0 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d88:	e0bffd17 	ldw	r2,-12(fp)
     d8c:	10800044 	addi	r2,r2,1
     d90:	e0bffd15 	stw	r2,-12(fp)
     d94:	e0fffd17 	ldw	r3,-12(fp)
     d98:	e0bffe17 	ldw	r2,-8(fp)
     d9c:	18bfed16 	blt	r3,r2,d54 <__alt_data_end+0xff000d54>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     da0:	0001883a 	nop
     da4:	e037883a 	mov	sp,fp
     da8:	dfc00117 	ldw	ra,4(sp)
     dac:	df000017 	ldw	fp,0(sp)
     db0:	dec00204 	addi	sp,sp,8
     db4:	f800283a 	ret

00000db8 <i2c_short_read>:

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
     db8:	defffc04 	addi	sp,sp,-16
     dbc:	dfc00315 	stw	ra,12(sp)
     dc0:	df000215 	stw	fp,8(sp)
     dc4:	df000204 	addi	fp,sp,8
     dc8:	2007883a 	mov	r3,r4
     dcc:	2805883a 	mov	r2,r5
     dd0:	e0fffe05 	stb	r3,-8(fp)
     dd4:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     dd8:	0000cc80 	call	cc8 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     ddc:	e0fffe03 	ldbu	r3,-8(fp)
     de0:	00804034 	movhi	r2,256
     de4:	10842404 	addi	r2,r2,4240
     de8:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     dec:	e0ffff0b 	ldhu	r3,-4(fp)
     df0:	00804034 	movhi	r2,256
     df4:	10842504 	addi	r2,r2,4244
     df8:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dfc:	00c010c4 	movi	r3,67
     e00:	00804034 	movhi	r2,256
     e04:	10842704 	addi	r2,r2,4252
     e08:	10c00025 	stbio	r3,0(r2)
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     e0c:	0000cc80 	call	cc8 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     e10:	e0bffe03 	ldbu	r2,-8(fp)
     e14:	10c00044 	addi	r3,r2,1
     e18:	00804034 	movhi	r2,256
     e1c:	10842404 	addi	r2,r2,4240
     e20:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     e24:	00c00884 	movi	r3,34
     e28:	00804034 	movhi	r2,256
     e2c:	10842704 	addi	r2,r2,4252
     e30:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
     e34:	0000cc80 	call	cc8 <i2c_busy_wait>
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     e38:	00804034 	movhi	r2,256
     e3c:	10842604 	addi	r2,r2,4248
     e40:	10800037 	ldwio	r2,0(r2)
}
     e44:	e037883a 	mov	sp,fp
     e48:	dfc00117 	ldw	ra,4(sp)
     e4c:	df000017 	ldw	fp,0(sp)
     e50:	dec00204 	addi	sp,sp,8
     e54:	f800283a 	ret

00000e58 <i2c_short_write>:

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
     e58:	defffb04 	addi	sp,sp,-20
     e5c:	dfc00415 	stw	ra,16(sp)
     e60:	df000315 	stw	fp,12(sp)
     e64:	df000304 	addi	fp,sp,12
     e68:	2807883a 	mov	r3,r5
     e6c:	3005883a 	mov	r2,r6
     e70:	e13ffd05 	stb	r4,-12(fp)
     e74:	e0fffe0d 	sth	r3,-8(fp)
     e78:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     e7c:	0000cc80 	call	cc8 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     e80:	e0fffd03 	ldbu	r3,-12(fp)
     e84:	00804034 	movhi	r2,256
     e88:	10842404 	addi	r2,r2,4240
     e8c:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     e90:	e0fffe0b 	ldhu	r3,-8(fp)
     e94:	00804034 	movhi	r2,256
     e98:	10842504 	addi	r2,r2,4244
     e9c:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     ea0:	e0ffff0b 	ldhu	r3,-4(fp)
     ea4:	00804034 	movhi	r2,256
     ea8:	10842604 	addi	r2,r2,4248
     eac:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     eb0:	00c01084 	movi	r3,66
     eb4:	00804034 	movhi	r2,256
     eb8:	10842704 	addi	r2,r2,4252
     ebc:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     ec0:	0000cc80 	call	cc8 <i2c_busy_wait>
}
     ec4:	0001883a 	nop
     ec8:	e037883a 	mov	sp,fp
     ecc:	dfc00117 	ldw	ra,4(sp)
     ed0:	df000017 	ldw	fp,0(sp)
     ed4:	dec00204 	addi	sp,sp,8
     ed8:	f800283a 	ret

00000edc <LCD_Write_Command>:
#include "lcd_simple.h"

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
     edc:	defffd04 	addi	sp,sp,-12
     ee0:	dfc00215 	stw	ra,8(sp)
     ee4:	df000115 	stw	fp,4(sp)
     ee8:	df000104 	addi	fp,sp,4
     eec:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ef0:	00804034 	movhi	r2,256
     ef4:	10841804 	addi	r2,r2,4192
     ef8:	e0ffff0b 	ldhu	r3,-4(fp)
     efc:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     f00:	01000284 	movi	r4,10
     f04:	000fc0c0 	call	fc0c <usleep>
}
     f08:	0001883a 	nop
     f0c:	e037883a 	mov	sp,fp
     f10:	dfc00117 	ldw	ra,4(sp)
     f14:	df000017 	ldw	fp,0(sp)
     f18:	dec00204 	addi	sp,sp,8
     f1c:	f800283a 	ret

00000f20 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
     f20:	defffd04 	addi	sp,sp,-12
     f24:	dfc00215 	stw	ra,8(sp)
     f28:	df000115 	stw	fp,4(sp)
     f2c:	df000104 	addi	fp,sp,4
     f30:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     f34:	00804034 	movhi	r2,256
     f38:	10841904 	addi	r2,r2,4196
     f3c:	e0ffff0b 	ldhu	r3,-4(fp)
     f40:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     f44:	01000284 	movi	r4,10
     f48:	000fc0c0 	call	fc0c <usleep>
}
     f4c:	0001883a 	nop
     f50:	e037883a 	mov	sp,fp
     f54:	dfc00117 	ldw	ra,4(sp)
     f58:	df000017 	ldw	fp,0(sp)
     f5c:	dec00204 	addi	sp,sp,8
     f60:	f800283a 	ret

00000f64 <init_LCD>:


void init_LCD() {
     f64:	defffe04 	addi	sp,sp,-8
     f68:	dfc00115 	stw	ra,4(sp)
     f6c:	df000015 	stw	fp,0(sp)
     f70:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f74:	00c00084 	movi	r3,2
     f78:	00804034 	movhi	r2,256
     f7c:	10841a04 	addi	r2,r2,4200
     f80:	10c0002d 	sthio	r3,0(r2)
			         LCD_Sixteen_Bit|LCD_Reset|
			         LCD_RGB565_Mode|LCD_Color_Image); // Set 16 bit transfer mode and reset
	LCD_Write_Command(0x0028); 	//display OFF
     f84:	01000a04 	movi	r4,40
     f88:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Command(0x0011); 	//exit SLEEP mode
     f8c:	01000444 	movi	r4,17
     f90:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0000);
     f94:	0009883a 	mov	r4,zero
     f98:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00CB); 	//Power Control A
     f9c:	010032c4 	movi	r4,203
     fa0:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0039); 	//always 0x39
     fa4:	01000e44 	movi	r4,57
     fa8:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x002C); 	//always 0x2C
     fac:	01000b04 	movi	r4,44
     fb0:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0000); 	//always 0x00
     fb4:	0009883a 	mov	r4,zero
     fb8:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0034); 	//Vcore = 1.6V
     fbc:	01000d04 	movi	r4,52
     fc0:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0002); 	//DDVDH = 5.6V
     fc4:	01000084 	movi	r4,2
     fc8:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00CF); 	//Power Control B
     fcc:	010033c4 	movi	r4,207
     fd0:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0000); 	//always 0x00
     fd4:	0009883a 	mov	r4,zero
     fd8:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0081); 	//PCEQ off
     fdc:	01002044 	movi	r4,129
     fe0:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0030); 	//ESD protection
     fe4:	01000c04 	movi	r4,48
     fe8:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00E8); 	//Driver timing control A
     fec:	01003a04 	movi	r4,232
     ff0:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0085); 	//non - overlap
     ff4:	01002144 	movi	r4,133
     ff8:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0001); 	//EQ timing
     ffc:	01000044 	movi	r4,1
    1000:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0079); 	//Pre-chargetiming
    1004:	01001e44 	movi	r4,121
    1008:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Command(0x00EA); 	//Driver timing control B
    100c:	01003a84 	movi	r4,234
    1010:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0000);		//Gate driver timing
    1014:	0009883a 	mov	r4,zero
    1018:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//always 0x00
    101c:	0009883a 	mov	r4,zero
    1020:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0064);		//soft start 
    1024:	01001904 	movi	r4,100
    1028:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0003);		//power on sequence 
    102c:	010000c4 	movi	r4,3
    1030:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0012);		//power on sequence 
    1034:	01000484 	movi	r4,18
    1038:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0081);		//DDVDH enhance on 
    103c:	01002044 	movi	r4,129
    1040:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00F7); 	//Pump ratio control 
    1044:	01003dc4 	movi	r4,247
    1048:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0020); 	//DDVDH=2xVCI 
    104c:	01000804 	movi	r4,32
    1050:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);	//power control 1 
    1054:	01003004 	movi	r4,192
    1058:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0026);
    105c:	01000984 	movi	r4,38
    1060:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0004); 	//second parameter for ILI9340 (ignored by ILI9341) 
    1064:	01000104 	movi	r4,4
    1068:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00C1); 	//power control 2 
    106c:	01003044 	movi	r4,193
    1070:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0011);
    1074:	01000444 	movi	r4,17
    1078:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00C5); 	//VCOM control 1 
    107c:	01003144 	movi	r4,197
    1080:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0035);
    1084:	01000d44 	movi	r4,53
    1088:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
    108c:	01000f84 	movi	r4,62
    1090:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00C7); 	//VCOM control 2 
    1094:	010031c4 	movi	r4,199
    1098:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
    109c:	01002f84 	movi	r4,190
    10a0:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00B1); 	//frame rate control 
    10a4:	01002c44 	movi	r4,177
    10a8:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10ac:	0009883a 	mov	r4,zero
    10b0:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
    10b4:	01000404 	movi	r4,16
    10b8:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x003A);	//pixel format = 16 bit per pixel 
    10bc:	01000e84 	movi	r4,58
    10c0:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0055);
    10c4:	01001544 	movi	r4,85
    10c8:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00B6); 	//display function control 
    10cc:	01002d84 	movi	r4,182
    10d0:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x000A);
    10d4:	01000284 	movi	r4,10
    10d8:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
    10dc:	01002884 	movi	r4,162
    10e0:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x00F2); 	//3G Gamma control 
    10e4:	01003c84 	movi	r4,242
    10e8:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0002);	 	//off 
    10ec:	01000084 	movi	r4,2
    10f0:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x0026); 	//Gamma curve 3 
    10f4:	01000984 	movi	r4,38
    10f8:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0001);
    10fc:	01000044 	movi	r4,1
    1100:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x0036); 	//memory access control = BGR 
    1104:	01000d84 	movi	r4,54
    1108:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    110c:	0009883a 	mov	r4,zero
    1110:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x002A); 	//column address set 
    1114:	01000a84 	movi	r4,42
    1118:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    111c:	0009883a 	mov	r4,zero
    1120:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    1124:	0009883a 	mov	r4,zero
    1128:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
    112c:	0009883a 	mov	r4,zero
    1130:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);		//end 0x00EF 
    1134:	01003bc4 	movi	r4,239
    1138:	0000f200 	call	f20 <LCD_Write_Data>

	LCD_Write_Command(0x002B);	//page address set 
    113c:	01000ac4 	movi	r4,43
    1140:	0000edc0 	call	edc <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    1144:	0009883a 	mov	r4,zero
    1148:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    114c:	0009883a 	mov	r4,zero
    1150:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
    1154:	01000044 	movi	r4,1
    1158:	0000f200 	call	f20 <LCD_Write_Data>
	LCD_Write_Data(0x003F);		//end 0x013F 
    115c:	01000fc4 	movi	r4,63
    1160:	0000f200 	call	f20 <LCD_Write_Data>
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    1164:	00c03c04 	movi	r3,240
    1168:	00804034 	movhi	r2,256
    116c:	10841d04 	addi	r2,r2,4212
    1170:	10c00035 	stwio	r3,0(r2)
	LCD_width = 240;
    1174:	00803c04 	movi	r2,240
    1178:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
    117c:	00805004 	movi	r2,320
    1180:	d0a6d20d 	sth	r2,-25784(gp)


	LCD_Write_Command(0x0029);
    1184:	01000a44 	movi	r4,41
    1188:	0000edc0 	call	edc <LCD_Write_Command>

}
    118c:	0001883a 	nop
    1190:	e037883a 	mov	sp,fp
    1194:	dfc00117 	ldw	ra,4(sp)
    1198:	df000017 	ldw	fp,0(sp)
    119c:	dec00204 	addi	sp,sp,8
    11a0:	f800283a 	ret

000011a4 <transfer_LCD_no_dma>:

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    11a4:	defff904 	addi	sp,sp,-28
    11a8:	dfc00615 	stw	ra,24(sp)
    11ac:	df000515 	stw	fp,20(sp)
    11b0:	df000504 	addi	fp,sp,20
    11b4:	e13ffd15 	stw	r4,-12(fp)
    11b8:	e17ffe15 	stw	r5,-8(fp)
    11bc:	e1bfff15 	stw	r6,-4(fp)
	unsigned short *data_array = (unsigned short *)array;
    11c0:	e0bffd17 	ldw	r2,-12(fp)
    11c4:	e0bffc15 	stw	r2,-16(fp)
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    11c8:	00804034 	movhi	r2,256
    11cc:	10841e04 	addi	r2,r2,4216
    11d0:	e0fffe17 	ldw	r3,-8(fp)
    11d4:	10c00035 	stwio	r3,0(r2)
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
    11d8:	01000b04 	movi	r4,44
    11dc:	0000edc0 	call	edc <LCD_Write_Command>
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11e0:	e03ffb15 	stw	zero,-20(fp)
    11e4:	00000c06 	br	1218 <transfer_LCD_no_dma+0x74>
		LCD_Write_Data(data_array[pixels]);
    11e8:	e0bffb17 	ldw	r2,-20(fp)
    11ec:	1085883a 	add	r2,r2,r2
    11f0:	1007883a 	mov	r3,r2
    11f4:	e0bffc17 	ldw	r2,-16(fp)
    11f8:	10c5883a 	add	r2,r2,r3
    11fc:	1080000b 	ldhu	r2,0(r2)
    1200:	10bfffcc 	andi	r2,r2,65535
    1204:	1009883a 	mov	r4,r2
    1208:	0000f200 	call	f20 <LCD_Write_Data>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    120c:	e0bffb17 	ldw	r2,-20(fp)
    1210:	10800044 	addi	r2,r2,1
    1214:	e0bffb15 	stw	r2,-20(fp)
    1218:	e0fffe17 	ldw	r3,-8(fp)
    121c:	e0bfff17 	ldw	r2,-4(fp)
    1220:	1885383a 	mul	r2,r3,r2
    1224:	1007883a 	mov	r3,r2
    1228:	e0bffb17 	ldw	r2,-20(fp)
    122c:	10ffee36 	bltu	r2,r3,11e8 <__alt_data_end+0xff0011e8>
		LCD_Write_Data(data_array[pixels]);
}
    1230:	0001883a 	nop
    1234:	e037883a 	mov	sp,fp
    1238:	dfc00117 	ldw	ra,4(sp)
    123c:	df000017 	ldw	fp,0(sp)
    1240:	dec00204 	addi	sp,sp,8
    1244:	f800283a 	ret

00001248 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
    1248:	defffa04 	addi	sp,sp,-24
    124c:	df000515 	stw	fp,20(sp)
    1250:	df000504 	addi	fp,sp,20
    1254:	e13ffc15 	stw	r4,-16(fp)
    1258:	e17ffd15 	stw	r5,-12(fp)
    125c:	e1bffe15 	stw	r6,-8(fp)
    1260:	3805883a 	mov	r2,r7
    1264:	e0bfff05 	stb	r2,-4(fp)
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    1268:	d0a6d20b 	ldhu	r2,-25784(gp)
    126c:	10bfffcc 	andi	r2,r2,65535
    1270:	e0fffe17 	ldw	r3,-8(fp)
    1274:	1880010e 	bge	r3,r2,127c <transfer_LCD_with_dma+0x34>
    1278:	1805883a 	mov	r2,r3
    127c:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    1280:	d0a6d28b 	ldhu	r2,-25782(gp)
    1284:	10bfffcc 	andi	r2,r2,65535
    1288:	e0fffd17 	ldw	r3,-12(fp)
    128c:	1880010e 	bge	r3,r2,1294 <transfer_LCD_with_dma+0x4c>
    1290:	1805883a 	mov	r2,r3
    1294:	e0bffb8d 	sth	r2,-18(fp)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1298:	00804034 	movhi	r2,256
    129c:	10841e04 	addi	r2,r2,4216
    12a0:	e0fffd17 	ldw	r3,-12(fp)
    12a4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    12a8:	e0fffc17 	ldw	r3,-16(fp)
    12ac:	00804034 	movhi	r2,256
    12b0:	10841b04 	addi	r2,r2,4204
    12b4:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    12b8:	e0fffb8b 	ldhu	r3,-18(fp)
    12bc:	e0bffb0b 	ldhu	r2,-20(fp)
    12c0:	1887383a 	mul	r3,r3,r2
    12c4:	00804034 	movhi	r2,256
    12c8:	10841c04 	addi	r2,r2,4208
    12cc:	10c00035 	stwio	r3,0(r2)
	if (grayscale==0)
    12d0:	e0bfff07 	ldb	r2,-4(fp)
    12d4:	1000051e 	bne	r2,zero,12ec <transfer_LCD_with_dma+0xa4>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12d8:	00c04004 	movi	r3,256
    12dc:	00804034 	movhi	r2,256
    12e0:	10841a04 	addi	r2,r2,4200
    12e4:	10c0002d 	sthio	r3,0(r2)
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12e8:	00000406 	br	12fc <transfer_LCD_with_dma+0xb4>
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12ec:	00c04404 	movi	r3,272
    12f0:	00804034 	movhi	r2,256
    12f4:	10841a04 	addi	r2,r2,4200
    12f8:	10c0002d 	sthio	r3,0(r2)
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12fc:	0001883a 	nop
    1300:	e037883a 	mov	sp,fp
    1304:	df000017 	ldw	fp,0(sp)
    1308:	dec00104 	addi	sp,sp,4
    130c:	f800283a 	ret

00001310 <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
    1310:	deffeb04 	addi	sp,sp,-84
    1314:	dfc01415 	stw	ra,80(sp)
    1318:	df001315 	stw	fp,76(sp)
    131c:	dc401215 	stw	r17,72(sp)
    1320:	dc001115 	stw	r16,68(sp)
    1324:	df001304 	addi	fp,sp,76
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  int wait_cnt = 0; 		// wait at the end of loop so that printf shows result of current execution
    1328:	e03ff115 	stw	zero,-60(fp)
  int max_wait = 100000;	// wait until wait_cnt reaches this value
    132c:	008000b4 	movhi	r2,2
    1330:	10a1a804 	addi	r2,r2,-31072
    1334:	e0bff215 	stw	r2,-56(fp)

  //timer values for profiling
  alt_u32 start_sobel_x = 0;
    1338:	e03fed15 	stw	zero,-76(fp)
  alt_u32 end_sobel_x = 0;
    133c:	e03fee15 	stw	zero,-72(fp)
  alt_u32 start_sobel_y = 0;
    1340:	e03ff315 	stw	zero,-52(fp)
  alt_u32 end_sobel_y = 0;
    1344:	e03ff415 	stw	zero,-48(fp)
  alt_u32 start_sobel_th = 0;
    1348:	e03ff515 	stw	zero,-44(fp)
  alt_u32 end_sobel_th = 0;
    134c:	e03ff615 	stw	zero,-40(fp)
  alt_u32 start_grayscale = 0;
    1350:	e03fef15 	stw	zero,-68(fp)
  alt_u32 end_grayscale = 0;
    1354:	e03ff015 	stw	zero,-64(fp)

  init_LCD();
    1358:	0000f640 	call	f64 <init_LCD>
  init_camera();
    135c:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1360:	01000604 	movi	r4,24
    1364:	0002a7c0 	call	2a7c <vga_set_swap>
  printf("Hello from Nios II!\n");
    1368:	01000074 	movhi	r4,1
    136c:	21089904 	addi	r4,r4,8804
    1370:	0003cec0 	call	3cec <puts>
  cam_get_profiling();
    1374:	00007fc0 	call	7fc <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1378:	00007640 	call	764 <cam_get_xsize>
    137c:	143fffcc 	andi	r16,r2,65535
    1380:	00007b00 	call	7b0 <cam_get_ysize>
    1384:	10bfffcc 	andi	r2,r2,65535
    1388:	8085383a 	mul	r2,r16,r2
    138c:	1009883a 	mov	r4,r2
    1390:	000338c0 	call	338c <malloc>
    1394:	e0bff715 	stw	r2,-36(fp)
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1398:	00007640 	call	764 <cam_get_xsize>
    139c:	143fffcc 	andi	r16,r2,65535
    13a0:	00007b00 	call	7b0 <cam_get_ysize>
    13a4:	10bfffcc 	andi	r2,r2,65535
    13a8:	8085383a 	mul	r2,r16,r2
    13ac:	1009883a 	mov	r4,r2
    13b0:	000338c0 	call	338c <malloc>
    13b4:	e0bff815 	stw	r2,-32(fp)
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    13b8:	00007640 	call	764 <cam_get_xsize>
    13bc:	143fffcc 	andi	r16,r2,65535
    13c0:	00007b00 	call	7b0 <cam_get_ysize>
    13c4:	10bfffcc 	andi	r2,r2,65535
    13c8:	8085383a 	mul	r2,r16,r2
    13cc:	1009883a 	mov	r4,r2
    13d0:	000338c0 	call	338c <malloc>
    13d4:	e0bff915 	stw	r2,-28(fp)
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    13d8:	00007640 	call	764 <cam_get_xsize>
    13dc:	143fffcc 	andi	r16,r2,65535
    13e0:	00007b00 	call	7b0 <cam_get_ysize>
    13e4:	10bfffcc 	andi	r2,r2,65535
    13e8:	8085383a 	mul	r2,r16,r2
    13ec:	1009883a 	mov	r4,r2
    13f0:	000338c0 	call	338c <malloc>
    13f4:	e0bffa15 	stw	r2,-24(fp)
  cam_set_image_pointer(0,buffer1);
    13f8:	e17ff717 	ldw	r5,-36(fp)
    13fc:	0009883a 	mov	r4,zero
    1400:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    1404:	e17ff817 	ldw	r5,-32(fp)
    1408:	01000044 	movi	r4,1
    140c:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    1410:	e17ff917 	ldw	r5,-28(fp)
    1414:	01000084 	movi	r4,2
    1418:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    141c:	e17ffa17 	ldw	r5,-24(fp)
    1420:	010000c4 	movi	r4,3
    1424:	00008a40 	call	8a4 <cam_set_image_pointer>
  enable_continues_mode();
    1428:	00009fc0 	call	9fc <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    142c:	00007640 	call	764 <cam_get_xsize>
    1430:	10bfffcc 	andi	r2,r2,65535
    1434:	1004d07a 	srli	r2,r2,1
    1438:	143fffcc 	andi	r16,r2,65535
    143c:	00007b00 	call	7b0 <cam_get_ysize>
    1440:	10bfffcc 	andi	r2,r2,65535
    1444:	100b883a 	mov	r5,r2
    1448:	8009883a 	mov	r4,r16
    144c:	00018a00 	call	18a0 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    1450:	0000a2c0 	call	a2c <new_image_available>
    1454:	10803fcc 	andi	r2,r2,255
    1458:	1080201c 	xori	r2,r2,128
    145c:	10bfe004 	addi	r2,r2,-128
    1460:	103ffb26 	beq	r2,zero,1450 <__alt_data_end+0xff001450>
		  if (current_image_valid()!=0) {
    1464:	000094c0 	call	94c <current_image_valid>
    1468:	10bfffcc 	andi	r2,r2,65535
    146c:	10a0001c 	xori	r2,r2,32768
    1470:	10a00004 	addi	r2,r2,-32768
    1474:	103ff626 	beq	r2,zero,1450 <__alt_data_end+0xff001450>
			  current_mode = DIPSW_get_value();
    1478:	0000a840 	call	a84 <DIPSW_get_value>
    147c:	e0bffb05 	stb	r2,-20(fp)
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    1480:	e0bffb03 	ldbu	r2,-20(fp)
    1484:	108001cc 	andi	r2,r2,7
    1488:	e0bffb45 	stb	r2,-19(fp)
			  image = (unsigned short*)current_image_pointer();
    148c:	00009840 	call	984 <current_image_pointer>
    1490:	e0bffc15 	stw	r2,-16(fp)
		      switch (mode) {
    1494:	e0bffb43 	ldbu	r2,-19(fp)
    1498:	10c00060 	cmpeqi	r3,r2,1
    149c:	1800211e 	bne	r3,zero,1524 <main+0x214>
    14a0:	10c00088 	cmpgei	r3,r2,2
    14a4:	1800021e 	bne	r3,zero,14b0 <main+0x1a0>
    14a8:	10000626 	beq	r2,zero,14c4 <main+0x1b4>
    14ac:	0000a606 	br	1748 <main+0x438>
    14b0:	10c000a0 	cmpeqi	r3,r2,2
    14b4:	1800431e 	bne	r3,zero,15c4 <main+0x2b4>
    14b8:	108000e0 	cmpeqi	r2,r2,3
    14bc:	10006e1e 	bne	r2,zero,1678 <main+0x368>
    14c0:	0000a106 	br	1748 <main+0x438>
		      case 0 : transfer_LCD_with_dma(&image[16520],
    14c4:	e0fffc17 	ldw	r3,-16(fp)
    14c8:	00a04414 	movui	r2,33040
    14cc:	18a1883a 	add	r16,r3,r2
		                	cam_get_xsize()>>1,
    14d0:	00007640 	call	764 <cam_get_xsize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    14d4:	10bfffcc 	andi	r2,r2,65535
    14d8:	1004d07a 	srli	r2,r2,1
    14dc:	147fffcc 	andi	r17,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
    14e0:	00007b00 	call	7b0 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    14e4:	10bfffcc 	andi	r2,r2,65535
    14e8:	000f883a 	mov	r7,zero
    14ec:	100d883a 	mov	r6,r2
    14f0:	880b883a 	mov	r5,r17
    14f4:	8009883a 	mov	r4,r16
    14f8:	00012480 	call	1248 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    14fc:	e0bffb03 	ldbu	r2,-20(fp)
    1500:	10803fcc 	andi	r2,r2,255
    1504:	1080201c 	xori	r2,r2,128
    1508:	10bfe004 	addi	r2,r2,-128
    150c:	1000c00e 	bge	r2,zero,1810 <main+0x500>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1510:	01000204 	movi	r4,8
    1514:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1518:	e13ffc17 	ldw	r4,-16(fp)
    151c:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1520:	0000bb06 	br	1810 <main+0x500>
		      case 1 : alt_timestamp_start();
    1524:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1528:	0010a2c0 	call	10a2c <alt_timestamp>
    152c:	e0bfef15 	stw	r2,-68(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1530:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1534:	10bfffcc 	andi	r2,r2,65535
    1538:	1004d07a 	srli	r2,r2,1
    153c:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1540:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1544:	10bfffcc 	andi	r2,r2,65535
    1548:	100d883a 	mov	r6,r2
    154c:	800b883a 	mov	r5,r16
    1550:	e13ffc17 	ldw	r4,-16(fp)
    1554:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1558:	0010a2c0 	call	10a2c <alt_timestamp>
    155c:	e0bff015 	stw	r2,-64(fp)
		               grayscale = get_grayscale_picture();
    1560:	0000ca80 	call	ca8 <get_grayscale_picture>
    1564:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    1568:	e0bffd17 	ldw	r2,-12(fp)
    156c:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    1570:	00007640 	call	764 <cam_get_xsize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1574:	10bfffcc 	andi	r2,r2,65535
    1578:	1004d07a 	srli	r2,r2,1
    157c:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    1580:	00007b00 	call	7b0 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1584:	10bfffcc 	andi	r2,r2,65535
    1588:	01c00044 	movi	r7,1
    158c:	100d883a 	mov	r6,r2
    1590:	880b883a 	mov	r5,r17
    1594:	8009883a 	mov	r4,r16
    1598:	00012480 	call	1248 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    159c:	e0bffb03 	ldbu	r2,-20(fp)
    15a0:	10803fcc 	andi	r2,r2,255
    15a4:	1080201c 	xori	r2,r2,128
    15a8:	10bfe004 	addi	r2,r2,-128
    15ac:	10009a0e 	bge	r2,zero,1818 <main+0x508>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    15b0:	01000604 	movi	r4,24
    15b4:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    15b8:	e13ffd17 	ldw	r4,-12(fp)
    15bc:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    15c0:	00009506 	br	1818 <main+0x508>
		      case 2 : alt_timestamp_start();
    15c4:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    15c8:	0010a2c0 	call	10a2c <alt_timestamp>
    15cc:	e0bfef15 	stw	r2,-68(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    15d0:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    15d4:	10bfffcc 	andi	r2,r2,65535
    15d8:	1004d07a 	srli	r2,r2,1
    15dc:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    15e0:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    15e4:	10bfffcc 	andi	r2,r2,65535
    15e8:	100d883a 	mov	r6,r2
    15ec:	800b883a 	mov	r5,r16
    15f0:	e13ffc17 	ldw	r4,-16(fp)
    15f4:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    15f8:	0010a2c0 	call	10a2c <alt_timestamp>
    15fc:	e0bff015 	stw	r2,-64(fp)
		               grayscale = get_grayscale_picture();
    1600:	0000ca80 	call	ca8 <get_grayscale_picture>
    1604:	e0bffd15 	stw	r2,-12(fp)
		               sobel_x_with_rgb(grayscale);
    1608:	e13ffd17 	ldw	r4,-12(fp)
    160c:	0001e200 	call	1e20 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1610:	0002a080 	call	2a08 <GetSobel_rgb>
    1614:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    1618:	e0fffc17 	ldw	r3,-16(fp)
    161c:	00a04414 	movui	r2,33040
    1620:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    1624:	00007640 	call	764 <cam_get_xsize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1628:	10bfffcc 	andi	r2,r2,65535
    162c:	1004d07a 	srli	r2,r2,1
    1630:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    1634:	00007b00 	call	7b0 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1638:	10bfffcc 	andi	r2,r2,65535
    163c:	000f883a 	mov	r7,zero
    1640:	100d883a 	mov	r6,r2
    1644:	880b883a 	mov	r5,r17
    1648:	8009883a 	mov	r4,r16
    164c:	00012480 	call	1248 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1650:	e0bffb03 	ldbu	r2,-20(fp)
    1654:	10803fcc 	andi	r2,r2,255
    1658:	1080201c 	xori	r2,r2,128
    165c:	10bfe004 	addi	r2,r2,-128
    1660:	10006f0e 	bge	r2,zero,1820 <main+0x510>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1664:	01000204 	movi	r4,8
    1668:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    166c:	e13ffc17 	ldw	r4,-16(fp)
    1670:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1674:	00006a06 	br	1820 <main+0x510>
		      case 3 : alt_timestamp_start();
    1678:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    167c:	0010a2c0 	call	10a2c <alt_timestamp>
    1680:	e0bfef15 	stw	r2,-68(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1684:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1688:	10bfffcc 	andi	r2,r2,65535
    168c:	1004d07a 	srli	r2,r2,1
    1690:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1694:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1698:	10bfffcc 	andi	r2,r2,65535
    169c:	100d883a 	mov	r6,r2
    16a0:	800b883a 	mov	r5,r16
    16a4:	e13ffc17 	ldw	r4,-16(fp)
    16a8:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    16ac:	0010a2c0 	call	10a2c <alt_timestamp>
    16b0:	e0bff015 	stw	r2,-64(fp)
		               grayscale = get_grayscale_picture();
    16b4:	0000ca80 	call	ca8 <get_grayscale_picture>
    16b8:	e0bffd15 	stw	r2,-12(fp)
		               alt_timestamp_start();
    16bc:	00109b40 	call	109b4 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    16c0:	0010a2c0 	call	10a2c <alt_timestamp>
    16c4:	e0bfed15 	stw	r2,-76(fp)
		               sobel_x(grayscale);
    16c8:	e13ffd17 	ldw	r4,-12(fp)
    16cc:	0001d580 	call	1d58 <sobel_x>
		               end_sobel_x = alt_timestamp();
    16d0:	0010a2c0 	call	10a2c <alt_timestamp>
    16d4:	e0bfee15 	stw	r2,-72(fp)
		               sobel_y_with_rgb(grayscale);
    16d8:	e13ffd17 	ldw	r4,-12(fp)
    16dc:	00020240 	call	2024 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    16e0:	0002a080 	call	2a08 <GetSobel_rgb>
    16e4:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    16e8:	e0fffc17 	ldw	r3,-16(fp)
    16ec:	00a04414 	movui	r2,33040
    16f0:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    16f4:	00007640 	call	764 <cam_get_xsize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    16f8:	10bfffcc 	andi	r2,r2,65535
    16fc:	1004d07a 	srli	r2,r2,1
    1700:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    1704:	00007b00 	call	7b0 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1708:	10bfffcc 	andi	r2,r2,65535
    170c:	000f883a 	mov	r7,zero
    1710:	100d883a 	mov	r6,r2
    1714:	880b883a 	mov	r5,r17
    1718:	8009883a 	mov	r4,r16
    171c:	00012480 	call	1248 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1720:	e0bffb03 	ldbu	r2,-20(fp)
    1724:	10803fcc 	andi	r2,r2,255
    1728:	1080201c 	xori	r2,r2,128
    172c:	10bfe004 	addi	r2,r2,-128
    1730:	10003d0e 	bge	r2,zero,1828 <main+0x518>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1734:	01000204 	movi	r4,8
    1738:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    173c:	e13ffc17 	ldw	r4,-16(fp)
    1740:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1744:	00003806 	br	1828 <main+0x518>
		      default: alt_timestamp_start();
    1748:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    174c:	0010a2c0 	call	10a2c <alt_timestamp>
    1750:	e0bfef15 	stw	r2,-68(fp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1754:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1758:	10bfffcc 	andi	r2,r2,65535
    175c:	1004d07a 	srli	r2,r2,1
    1760:	143fffcc 	andi	r16,r2,65535
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
    1764:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1768:	10bfffcc 	andi	r2,r2,65535
    176c:	100d883a 	mov	r6,r2
    1770:	800b883a 	mov	r5,r16
    1774:	e13ffc17 	ldw	r4,-16(fp)
    1778:	0000ab40 	call	ab4 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    177c:	0010a2c0 	call	10a2c <alt_timestamp>
    1780:	e0bff015 	stw	r2,-64(fp)
                       grayscale = get_grayscale_picture();
    1784:	0000ca80 	call	ca8 <get_grayscale_picture>
    1788:	e0bffd15 	stw	r2,-12(fp)

                       alt_timestamp_start();
    178c:	00109b40 	call	109b4 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    1790:	0010a2c0 	call	10a2c <alt_timestamp>
    1794:	e0bfed15 	stw	r2,-76(fp)
                           result += pgx_array[7] * grayscale[(y+1)*sobel_width+x];
                           result += pgx_array[8] * grayscale[(y+1)*sobel_width+(x+1)];
                           sobel_x_result[y*sobel_width+x] = result; 	//sobel_mac(source,x,y,gx_array,sobel_width);
                         }
                       } // end sobel_x in-lining*/
                       sobel_complete(grayscale, 128);
    1798:	01402004 	movi	r5,128
    179c:	e13ffd17 	ldw	r4,-12(fp)
    17a0:	00022740 	call	2274 <sobel_complete>
                       end_sobel_x = alt_timestamp();
    17a4:	0010a2c0 	call	10a2c <alt_timestamp>
    17a8:	e0bfee15 	stw	r2,-72(fp)

//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
    17ac:	0002a280 	call	2a28 <GetSobelResult>
    17b0:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    17b4:	e0bffd17 	ldw	r2,-12(fp)
    17b8:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    17bc:	00007640 	call	764 <cam_get_xsize>
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    17c0:	10bfffcc 	andi	r2,r2,65535
    17c4:	1004d07a 	srli	r2,r2,1
    17c8:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    17cc:	00007b00 	call	7b0 <cam_get_ysize>
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    17d0:	10bfffcc 	andi	r2,r2,65535
    17d4:	01c00044 	movi	r7,1
    17d8:	100d883a 	mov	r6,r2
    17dc:	880b883a 	mov	r5,r17
    17e0:	8009883a 	mov	r4,r16
    17e4:	00012480 	call	1248 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    17e8:	e0bffb03 	ldbu	r2,-20(fp)
    17ec:	10803fcc 	andi	r2,r2,255
    17f0:	1080201c 	xori	r2,r2,128
    17f4:	10bfe004 	addi	r2,r2,-128
    17f8:	10000d0e 	bge	r2,zero,1830 <main+0x520>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    17fc:	01000604 	movi	r4,24
    1800:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1804:	e13ffd17 	ldw	r4,-12(fp)
    1808:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    180c:	00000806 	br	1830 <main+0x520>
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    1810:	0001883a 	nop
    1814:	00000706 	br	1834 <main+0x524>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    1818:	0001883a 	nop
    181c:	00000506 	br	1834 <main+0x524>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    1820:	0001883a 	nop
    1824:	00000306 	br	1834 <main+0x524>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    1828:	0001883a 	nop
    182c:	00000106 	br	1834 <main+0x524>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    1830:	0001883a 	nop
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1834:	01000074 	movhi	r4,1
    1838:	21089e04 	addi	r4,r4,8824
    183c:	0003cec0 	call	3cec <puts>
		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
    1840:	e0ffee17 	ldw	r3,-72(fp)
    1844:	e0bfed17 	ldw	r2,-76(fp)
    1848:	1885c83a 	sub	r2,r3,r2
    184c:	100b883a 	mov	r5,r2
    1850:	01000074 	movhi	r4,1
    1854:	2108a604 	addi	r4,r4,8856
    1858:	0003bf00 	call	3bf0 <printf>
//		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
//		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    185c:	e0fff017 	ldw	r3,-64(fp)
    1860:	e0bfef17 	ldw	r2,-68(fp)
    1864:	1885c83a 	sub	r2,r3,r2
    1868:	100b883a 	mov	r5,r2
    186c:	01000074 	movhi	r4,1
    1870:	2108ac04 	addi	r4,r4,8880
    1874:	0003bf00 	call	3bf0 <printf>

		      //while(wait_cnt < max_wait) { wait_cnt++; }

		      // reset timervalues
		      start_sobel_x = 0;
    1878:	e03fed15 	stw	zero,-76(fp)
		      end_sobel_x = 0;
    187c:	e03fee15 	stw	zero,-72(fp)
			  start_sobel_y = 0;
    1880:	e03ff315 	stw	zero,-52(fp)
			  end_sobel_y = 0;
    1884:	e03ff415 	stw	zero,-48(fp)
			  start_sobel_th = 0;
    1888:	e03ff515 	stw	zero,-44(fp)
			  end_sobel_th = 0;
    188c:	e03ff615 	stw	zero,-40(fp)
			  start_grayscale = 0;
    1890:	e03fef15 	stw	zero,-68(fp)
			  end_grayscale = 0;
    1894:	e03ff015 	stw	zero,-64(fp)
			  wait_cnt = 0;
    1898:	e03ff115 	stw	zero,-60(fp)
		  }
	  }
  } while (1);
    189c:	003eec06 	br	1450 <__alt_data_end+0xff001450>

000018a0 <init_sobel_arrays>:
                   {-1,-2,-1}};

const char * pgx_array = &gx_array;
const char * pgy_array = &gy_array;

void init_sobel_arrays(int width , int height) {
    18a0:	defffb04 	addi	sp,sp,-20
    18a4:	dfc00415 	stw	ra,16(sp)
    18a8:	df000315 	stw	fp,12(sp)
    18ac:	df000304 	addi	fp,sp,12
    18b0:	e13ffe15 	stw	r4,-8(fp)
    18b4:	e17fff15 	stw	r5,-4(fp)
	int loop;
	sobel_width = width;
    18b8:	e0bffe17 	ldw	r2,-8(fp)
    18bc:	d0a6d315 	stw	r2,-25780(gp)
	sobel_height = height;
    18c0:	e0bfff17 	ldw	r2,-4(fp)
    18c4:	d0a6d515 	stw	r2,-25772(gp)
	if (sobel_x_result != NULL)
    18c8:	d0a6d617 	ldw	r2,-25768(gp)
    18cc:	10000326 	beq	r2,zero,18dc <init_sobel_arrays+0x3c>
		free(sobel_x_result);
    18d0:	d0a6d617 	ldw	r2,-25768(gp)
    18d4:	1009883a 	mov	r4,r2
    18d8:	00033a00 	call	33a0 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    18dc:	e0fffe17 	ldw	r3,-8(fp)
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	1885383a 	mul	r2,r3,r2
    18e8:	1085883a 	add	r2,r2,r2
    18ec:	1009883a 	mov	r4,r2
    18f0:	000338c0 	call	338c <malloc>
    18f4:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    18f8:	d0a6d717 	ldw	r2,-25764(gp)
    18fc:	10000326 	beq	r2,zero,190c <init_sobel_arrays+0x6c>
		free(sobel_y_result);
    1900:	d0a6d717 	ldw	r2,-25764(gp)
    1904:	1009883a 	mov	r4,r2
    1908:	00033a00 	call	33a0 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    190c:	e0fffe17 	ldw	r3,-8(fp)
    1910:	e0bfff17 	ldw	r2,-4(fp)
    1914:	1885383a 	mul	r2,r3,r2
    1918:	1085883a 	add	r2,r2,r2
    191c:	1009883a 	mov	r4,r2
    1920:	000338c0 	call	338c <malloc>
    1924:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    1928:	d0a6d417 	ldw	r2,-25776(gp)
    192c:	10000326 	beq	r2,zero,193c <init_sobel_arrays+0x9c>
		free(sobel_result);
    1930:	d0a6d417 	ldw	r2,-25776(gp)
    1934:	1009883a 	mov	r4,r2
    1938:	00033a00 	call	33a0 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    193c:	e0fffe17 	ldw	r3,-8(fp)
    1940:	e0bfff17 	ldw	r2,-4(fp)
    1944:	1885383a 	mul	r2,r3,r2
    1948:	1009883a 	mov	r4,r2
    194c:	000338c0 	call	338c <malloc>
    1950:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    1954:	d0a6d817 	ldw	r2,-25760(gp)
    1958:	10000326 	beq	r2,zero,1968 <init_sobel_arrays+0xc8>
		free(sobel_rgb565);
    195c:	d0a6d817 	ldw	r2,-25760(gp)
    1960:	1009883a 	mov	r4,r2
    1964:	00033a00 	call	33a0 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1968:	e0fffe17 	ldw	r3,-8(fp)
    196c:	e0bfff17 	ldw	r2,-4(fp)
    1970:	1885383a 	mul	r2,r3,r2
    1974:	1085883a 	add	r2,r2,r2
    1978:	1009883a 	mov	r4,r2
    197c:	000338c0 	call	338c <malloc>
    1980:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1984:	e03ffd15 	stw	zero,-12(fp)
    1988:	00001606 	br	19e4 <init_sobel_arrays+0x144>
		sobel_x_result[loop] = 0;
    198c:	d0e6d617 	ldw	r3,-25768(gp)
    1990:	e0bffd17 	ldw	r2,-12(fp)
    1994:	1085883a 	add	r2,r2,r2
    1998:	1885883a 	add	r2,r3,r2
    199c:	1000000d 	sth	zero,0(r2)
		sobel_y_result[loop] = 0;
    19a0:	d0e6d717 	ldw	r3,-25764(gp)
    19a4:	e0bffd17 	ldw	r2,-12(fp)
    19a8:	1085883a 	add	r2,r2,r2
    19ac:	1885883a 	add	r2,r3,r2
    19b0:	1000000d 	sth	zero,0(r2)
		sobel_result[loop] = 0;
    19b4:	d0e6d417 	ldw	r3,-25776(gp)
    19b8:	e0bffd17 	ldw	r2,-12(fp)
    19bc:	1885883a 	add	r2,r3,r2
    19c0:	10000005 	stb	zero,0(r2)
		sobel_rgb565[loop] = 0;
    19c4:	d0e6d817 	ldw	r3,-25760(gp)
    19c8:	e0bffd17 	ldw	r2,-12(fp)
    19cc:	1085883a 	add	r2,r2,r2
    19d0:	1885883a 	add	r2,r3,r2
    19d4:	1000000d 	sth	zero,0(r2)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    19d8:	e0bffd17 	ldw	r2,-12(fp)
    19dc:	10800044 	addi	r2,r2,1
    19e0:	e0bffd15 	stw	r2,-12(fp)
    19e4:	e0fffe17 	ldw	r3,-8(fp)
    19e8:	e0bfff17 	ldw	r2,-4(fp)
    19ec:	1885383a 	mul	r2,r3,r2
    19f0:	e0fffd17 	ldw	r3,-12(fp)
    19f4:	18bfe516 	blt	r3,r2,198c <__alt_data_end+0xff00198c>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    19f8:	0001883a 	nop
    19fc:	e037883a 	mov	sp,fp
    1a00:	dfc00117 	ldw	ra,4(sp)
    1a04:	df000017 	ldw	fp,0(sp)
    1a08:	dec00204 	addi	sp,sp,8
    1a0c:	f800283a 	ret

00001a10 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1a10:	defffa04 	addi	sp,sp,-24
    1a14:	df000515 	stw	fp,20(sp)
    1a18:	df000504 	addi	fp,sp,20
    1a1c:	e13ffc15 	stw	r4,-16(fp)
    1a20:	e17ffd15 	stw	r5,-12(fp)
    1a24:	e1bffe15 	stw	r6,-8(fp)
    1a28:	e1ffff15 	stw	r7,-4(fp)
	short result = 0;
    1a2c:	e03ffb0d 	sth	zero,-20(fp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1a30:	e0bfff17 	ldw	r2,-4(fp)
    1a34:	10800003 	ldbu	r2,0(r2)
    1a38:	10c03fcc 	andi	r3,r2,255
    1a3c:	18c0201c 	xori	r3,r3,128
    1a40:	18ffe004 	addi	r3,r3,-128
    1a44:	e0bffe17 	ldw	r2,-8(fp)
    1a48:	10bfffc4 	addi	r2,r2,-1
    1a4c:	1009883a 	mov	r4,r2
    1a50:	e0800117 	ldw	r2,4(fp)
    1a54:	2089383a 	mul	r4,r4,r2
    1a58:	e0bffd17 	ldw	r2,-12(fp)
    1a5c:	2085883a 	add	r2,r4,r2
    1a60:	10bfffc4 	addi	r2,r2,-1
    1a64:	e13ffc17 	ldw	r4,-16(fp)
    1a68:	2085883a 	add	r2,r4,r2
    1a6c:	10800003 	ldbu	r2,0(r2)
    1a70:	10803fcc 	andi	r2,r2,255
    1a74:	1885383a 	mul	r2,r3,r2
    1a78:	1007883a 	mov	r3,r2
    1a7c:	e0bffb0b 	ldhu	r2,-20(fp)
    1a80:	1885883a 	add	r2,r3,r2
    1a84:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    1a88:	e0bfff17 	ldw	r2,-4(fp)
    1a8c:	10800044 	addi	r2,r2,1
    1a90:	10800003 	ldbu	r2,0(r2)
    1a94:	10c03fcc 	andi	r3,r2,255
    1a98:	18c0201c 	xori	r3,r3,128
    1a9c:	18ffe004 	addi	r3,r3,-128
    1aa0:	e0bffe17 	ldw	r2,-8(fp)
    1aa4:	10bfffc4 	addi	r2,r2,-1
    1aa8:	1009883a 	mov	r4,r2
    1aac:	e0800117 	ldw	r2,4(fp)
    1ab0:	2089383a 	mul	r4,r4,r2
    1ab4:	e0bffd17 	ldw	r2,-12(fp)
    1ab8:	2085883a 	add	r2,r4,r2
    1abc:	e13ffc17 	ldw	r4,-16(fp)
    1ac0:	2085883a 	add	r2,r4,r2
    1ac4:	10800003 	ldbu	r2,0(r2)
    1ac8:	10803fcc 	andi	r2,r2,255
    1acc:	1885383a 	mul	r2,r3,r2
    1ad0:	1007883a 	mov	r3,r2
    1ad4:	e0bffb0b 	ldhu	r2,-20(fp)
    1ad8:	1885883a 	add	r2,r3,r2
    1adc:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
    1ae0:	e0bfff17 	ldw	r2,-4(fp)
    1ae4:	10800084 	addi	r2,r2,2
    1ae8:	10800003 	ldbu	r2,0(r2)
    1aec:	10c03fcc 	andi	r3,r2,255
    1af0:	18c0201c 	xori	r3,r3,128
    1af4:	18ffe004 	addi	r3,r3,-128
    1af8:	e0bffe17 	ldw	r2,-8(fp)
    1afc:	10bfffc4 	addi	r2,r2,-1
    1b00:	1009883a 	mov	r4,r2
    1b04:	e0800117 	ldw	r2,4(fp)
    1b08:	2089383a 	mul	r4,r4,r2
    1b0c:	e0bffd17 	ldw	r2,-12(fp)
    1b10:	2085883a 	add	r2,r4,r2
    1b14:	10800044 	addi	r2,r2,1
    1b18:	e13ffc17 	ldw	r4,-16(fp)
    1b1c:	2085883a 	add	r2,r4,r2
    1b20:	10800003 	ldbu	r2,0(r2)
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1885383a 	mul	r2,r3,r2
    1b2c:	1007883a 	mov	r3,r2
    1b30:	e0bffb0b 	ldhu	r2,-20(fp)
    1b34:	1885883a 	add	r2,r3,r2
    1b38:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1b3c:	e0bfff17 	ldw	r2,-4(fp)
    1b40:	108000c4 	addi	r2,r2,3
    1b44:	10800003 	ldbu	r2,0(r2)
    1b48:	10c03fcc 	andi	r3,r2,255
    1b4c:	18c0201c 	xori	r3,r3,128
    1b50:	18ffe004 	addi	r3,r3,-128
    1b54:	e13ffe17 	ldw	r4,-8(fp)
    1b58:	e0800117 	ldw	r2,4(fp)
    1b5c:	2089383a 	mul	r4,r4,r2
    1b60:	e0bffd17 	ldw	r2,-12(fp)
    1b64:	2085883a 	add	r2,r4,r2
    1b68:	10bfffc4 	addi	r2,r2,-1
    1b6c:	e13ffc17 	ldw	r4,-16(fp)
    1b70:	2085883a 	add	r2,r4,r2
    1b74:	10800003 	ldbu	r2,0(r2)
    1b78:	10803fcc 	andi	r2,r2,255
    1b7c:	1885383a 	mul	r2,r3,r2
    1b80:	1007883a 	mov	r3,r2
    1b84:	e0bffb0b 	ldhu	r2,-20(fp)
    1b88:	1885883a 	add	r2,r3,r2
    1b8c:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
    1b90:	e0bfff17 	ldw	r2,-4(fp)
    1b94:	10800104 	addi	r2,r2,4
    1b98:	10800003 	ldbu	r2,0(r2)
    1b9c:	10c03fcc 	andi	r3,r2,255
    1ba0:	18c0201c 	xori	r3,r3,128
    1ba4:	18ffe004 	addi	r3,r3,-128
    1ba8:	e13ffe17 	ldw	r4,-8(fp)
    1bac:	e0800117 	ldw	r2,4(fp)
    1bb0:	2089383a 	mul	r4,r4,r2
    1bb4:	e0bffd17 	ldw	r2,-12(fp)
    1bb8:	2085883a 	add	r2,r4,r2
    1bbc:	e13ffc17 	ldw	r4,-16(fp)
    1bc0:	2085883a 	add	r2,r4,r2
    1bc4:	10800003 	ldbu	r2,0(r2)
    1bc8:	10803fcc 	andi	r2,r2,255
    1bcc:	1885383a 	mul	r2,r3,r2
    1bd0:	1007883a 	mov	r3,r2
    1bd4:	e0bffb0b 	ldhu	r2,-20(fp)
    1bd8:	1885883a 	add	r2,r3,r2
    1bdc:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
    1be0:	e0bfff17 	ldw	r2,-4(fp)
    1be4:	10800144 	addi	r2,r2,5
    1be8:	10800003 	ldbu	r2,0(r2)
    1bec:	10c03fcc 	andi	r3,r2,255
    1bf0:	18c0201c 	xori	r3,r3,128
    1bf4:	18ffe004 	addi	r3,r3,-128
    1bf8:	e13ffe17 	ldw	r4,-8(fp)
    1bfc:	e0800117 	ldw	r2,4(fp)
    1c00:	2089383a 	mul	r4,r4,r2
    1c04:	e0bffd17 	ldw	r2,-12(fp)
    1c08:	2085883a 	add	r2,r4,r2
    1c0c:	10800044 	addi	r2,r2,1
    1c10:	e13ffc17 	ldw	r4,-16(fp)
    1c14:	2085883a 	add	r2,r4,r2
    1c18:	10800003 	ldbu	r2,0(r2)
    1c1c:	10803fcc 	andi	r2,r2,255
    1c20:	1885383a 	mul	r2,r3,r2
    1c24:	1007883a 	mov	r3,r2
    1c28:	e0bffb0b 	ldhu	r2,-20(fp)
    1c2c:	1885883a 	add	r2,r3,r2
    1c30:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1c34:	e0bfff17 	ldw	r2,-4(fp)
    1c38:	10800184 	addi	r2,r2,6
    1c3c:	10800003 	ldbu	r2,0(r2)
    1c40:	10c03fcc 	andi	r3,r2,255
    1c44:	18c0201c 	xori	r3,r3,128
    1c48:	18ffe004 	addi	r3,r3,-128
    1c4c:	e0bffe17 	ldw	r2,-8(fp)
    1c50:	10800044 	addi	r2,r2,1
    1c54:	1009883a 	mov	r4,r2
    1c58:	e0800117 	ldw	r2,4(fp)
    1c5c:	2089383a 	mul	r4,r4,r2
    1c60:	e0bffd17 	ldw	r2,-12(fp)
    1c64:	2085883a 	add	r2,r4,r2
    1c68:	10bfffc4 	addi	r2,r2,-1
    1c6c:	e13ffc17 	ldw	r4,-16(fp)
    1c70:	2085883a 	add	r2,r4,r2
    1c74:	10800003 	ldbu	r2,0(r2)
    1c78:	10803fcc 	andi	r2,r2,255
    1c7c:	1885383a 	mul	r2,r3,r2
    1c80:	1007883a 	mov	r3,r2
    1c84:	e0bffb0b 	ldhu	r2,-20(fp)
    1c88:	1885883a 	add	r2,r3,r2
    1c8c:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    1c90:	e0bfff17 	ldw	r2,-4(fp)
    1c94:	108001c4 	addi	r2,r2,7
    1c98:	10800003 	ldbu	r2,0(r2)
    1c9c:	10c03fcc 	andi	r3,r2,255
    1ca0:	18c0201c 	xori	r3,r3,128
    1ca4:	18ffe004 	addi	r3,r3,-128
    1ca8:	e0bffe17 	ldw	r2,-8(fp)
    1cac:	10800044 	addi	r2,r2,1
    1cb0:	1009883a 	mov	r4,r2
    1cb4:	e0800117 	ldw	r2,4(fp)
    1cb8:	2089383a 	mul	r4,r4,r2
    1cbc:	e0bffd17 	ldw	r2,-12(fp)
    1cc0:	2085883a 	add	r2,r4,r2
    1cc4:	e13ffc17 	ldw	r4,-16(fp)
    1cc8:	2085883a 	add	r2,r4,r2
    1ccc:	10800003 	ldbu	r2,0(r2)
    1cd0:	10803fcc 	andi	r2,r2,255
    1cd4:	1885383a 	mul	r2,r3,r2
    1cd8:	1007883a 	mov	r3,r2
    1cdc:	e0bffb0b 	ldhu	r2,-20(fp)
    1ce0:	1885883a 	add	r2,r3,r2
    1ce4:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1ce8:	e0bfff17 	ldw	r2,-4(fp)
    1cec:	10800204 	addi	r2,r2,8
    1cf0:	10800003 	ldbu	r2,0(r2)
    1cf4:	10c03fcc 	andi	r3,r2,255
    1cf8:	18c0201c 	xori	r3,r3,128
    1cfc:	18ffe004 	addi	r3,r3,-128
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10800044 	addi	r2,r2,1
    1d08:	1009883a 	mov	r4,r2
    1d0c:	e0800117 	ldw	r2,4(fp)
    1d10:	2089383a 	mul	r4,r4,r2
    1d14:	e0bffd17 	ldw	r2,-12(fp)
    1d18:	2085883a 	add	r2,r4,r2
    1d1c:	10800044 	addi	r2,r2,1
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	2085883a 	add	r2,r4,r2
    1d28:	10800003 	ldbu	r2,0(r2)
    1d2c:	10803fcc 	andi	r2,r2,255
    1d30:	1885383a 	mul	r2,r3,r2
    1d34:	1007883a 	mov	r3,r2
    1d38:	e0bffb0b 	ldhu	r2,-20(fp)
    1d3c:	1885883a 	add	r2,r3,r2
    1d40:	e0bffb0d 	sth	r2,-20(fp)
	return result;
    1d44:	e0bffb0b 	ldhu	r2,-20(fp)
}
    1d48:	e037883a 	mov	sp,fp
    1d4c:	df000017 	ldw	fp,0(sp)
    1d50:	dec00104 	addi	sp,sp,4
    1d54:	f800283a 	ret

00001d58 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1d58:	defff904 	addi	sp,sp,-28
    1d5c:	dfc00615 	stw	ra,24(sp)
    1d60:	df000515 	stw	fp,20(sp)
    1d64:	dc000415 	stw	r16,16(sp)
    1d68:	df000504 	addi	fp,sp,20
    1d6c:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d70:	00800044 	movi	r2,1
    1d74:	e0bffd15 	stw	r2,-12(fp)
    1d78:	00001e06 	br	1df4 <sobel_x+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d7c:	00800044 	movi	r2,1
    1d80:	e0bffc15 	stw	r2,-16(fp)
    1d84:	00001406 	br	1dd8 <sobel_x+0x80>
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1d88:	d0e6d617 	ldw	r3,-25768(gp)
    1d8c:	d126d317 	ldw	r4,-25780(gp)
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	2089383a 	mul	r4,r4,r2
    1d98:	e0bffc17 	ldw	r2,-16(fp)
    1d9c:	2085883a 	add	r2,r4,r2
    1da0:	1085883a 	add	r2,r2,r2
    1da4:	18a1883a 	add	r16,r3,r2
    1da8:	d0a6d317 	ldw	r2,-25780(gp)
    1dac:	d8800015 	stw	r2,0(sp)
    1db0:	01c00074 	movhi	r7,1
    1db4:	39c8b1c4 	addi	r7,r7,8903
    1db8:	e1bffd17 	ldw	r6,-12(fp)
    1dbc:	e17ffc17 	ldw	r5,-16(fp)
    1dc0:	e13ffe17 	ldw	r4,-8(fp)
    1dc4:	0001a100 	call	1a10 <sobel_mac>
    1dc8:	8080000d 	sth	r2,0(r16)

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1dcc:	e0bffc17 	ldw	r2,-16(fp)
    1dd0:	10800044 	addi	r2,r2,1
    1dd4:	e0bffc15 	stw	r2,-16(fp)
    1dd8:	d0a6d317 	ldw	r2,-25780(gp)
    1ddc:	10bfffc4 	addi	r2,r2,-1
    1de0:	e0fffc17 	ldw	r3,-16(fp)
    1de4:	18bfe816 	blt	r3,r2,1d88 <__alt_data_end+0xff001d88>
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1de8:	e0bffd17 	ldw	r2,-12(fp)
    1dec:	10800044 	addi	r2,r2,1
    1df0:	e0bffd15 	stw	r2,-12(fp)
    1df4:	d0a6d517 	ldw	r2,-25772(gp)
    1df8:	10bfffc4 	addi	r2,r2,-1
    1dfc:	e0fffd17 	ldw	r3,-12(fp)
    1e00:	18bfde16 	blt	r3,r2,1d7c <__alt_data_end+0xff001d7c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1e04:	0001883a 	nop
    1e08:	e6ffff04 	addi	sp,fp,-4
    1e0c:	dfc00217 	ldw	ra,8(sp)
    1e10:	df000117 	ldw	fp,4(sp)
    1e14:	dc000017 	ldw	r16,0(sp)
    1e18:	dec00304 	addi	sp,sp,12
    1e1c:	f800283a 	ret

00001e20 <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    1e20:	defff904 	addi	sp,sp,-28
    1e24:	dfc00615 	stw	ra,24(sp)
    1e28:	df000515 	stw	fp,20(sp)
    1e2c:	df000504 	addi	fp,sp,20
    1e30:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e34:	00800044 	movi	r2,1
    1e38:	e0bffd15 	stw	r2,-12(fp)
    1e3c:	00003d06 	br	1f34 <sobel_x_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1e40:	00800044 	movi	r2,1
    1e44:	e0bffc15 	stw	r2,-16(fp)
    1e48:	00003306 	br	1f18 <sobel_x_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
    1e4c:	d0a6d317 	ldw	r2,-25780(gp)
    1e50:	d8800015 	stw	r2,0(sp)
    1e54:	01c00074 	movhi	r7,1
    1e58:	39c8b1c4 	addi	r7,r7,8903
    1e5c:	e1bffd17 	ldw	r6,-12(fp)
    1e60:	e17ffc17 	ldw	r5,-16(fp)
    1e64:	e13fff17 	ldw	r4,-4(fp)
    1e68:	0001a100 	call	1a10 <sobel_mac>
    1e6c:	e0bffe0d 	sth	r2,-8(fp)
          sobel_x_result[y*sobel_width+x] = result;
    1e70:	d0e6d617 	ldw	r3,-25768(gp)
    1e74:	d126d317 	ldw	r4,-25780(gp)
    1e78:	e0bffd17 	ldw	r2,-12(fp)
    1e7c:	2089383a 	mul	r4,r4,r2
    1e80:	e0bffc17 	ldw	r2,-16(fp)
    1e84:	2085883a 	add	r2,r4,r2
    1e88:	1085883a 	add	r2,r2,r2
    1e8c:	1885883a 	add	r2,r3,r2
    1e90:	e0fffe0b 	ldhu	r3,-8(fp)
    1e94:	10c0000d 	sth	r3,0(r2)
          if (result < 0) {
    1e98:	e0bffe0f 	ldh	r2,-8(fp)
    1e9c:	10000e0e 	bge	r2,zero,1ed8 <sobel_x_with_rgb+0xb8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ea0:	d0e6d817 	ldw	r3,-25760(gp)
    1ea4:	d126d317 	ldw	r4,-25780(gp)
    1ea8:	e0bffd17 	ldw	r2,-12(fp)
    1eac:	2089383a 	mul	r4,r4,r2
    1eb0:	e0bffc17 	ldw	r2,-16(fp)
    1eb4:	2085883a 	add	r2,r4,r2
    1eb8:	1085883a 	add	r2,r2,r2
    1ebc:	1885883a 	add	r2,r3,r2
    1ec0:	e0fffe0f 	ldh	r3,-8(fp)
    1ec4:	00c7c83a 	sub	r3,zero,r3
    1ec8:	1807d0ba 	srai	r3,r3,2
    1ecc:	1806917a 	slli	r3,r3,5
    1ed0:	10c0000d 	sth	r3,0(r2)
    1ed4:	00000d06 	br	1f0c <sobel_x_with_rgb+0xec>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1ed8:	d0e6d817 	ldw	r3,-25760(gp)
    1edc:	d126d317 	ldw	r4,-25780(gp)
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	2089383a 	mul	r4,r4,r2
    1ee8:	e0bffc17 	ldw	r2,-16(fp)
    1eec:	2085883a 	add	r2,r4,r2
    1ef0:	1085883a 	add	r2,r2,r2
    1ef4:	1885883a 	add	r2,r3,r2
    1ef8:	e0fffe0f 	ldh	r3,-8(fp)
    1efc:	1807d0fa 	srai	r3,r3,3
    1f00:	18ffffcc 	andi	r3,r3,65535
    1f04:	180692fa 	slli	r3,r3,11
    1f08:	10c0000d 	sth	r3,0(r2)
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f0c:	e0bffc17 	ldw	r2,-16(fp)
    1f10:	10800044 	addi	r2,r2,1
    1f14:	e0bffc15 	stw	r2,-16(fp)
    1f18:	d0a6d317 	ldw	r2,-25780(gp)
    1f1c:	10bfffc4 	addi	r2,r2,-1
    1f20:	e0fffc17 	ldw	r3,-16(fp)
    1f24:	18bfc916 	blt	r3,r2,1e4c <__alt_data_end+0xff001e4c>

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1f28:	e0bffd17 	ldw	r2,-12(fp)
    1f2c:	10800044 	addi	r2,r2,1
    1f30:	e0bffd15 	stw	r2,-12(fp)
    1f34:	d0a6d517 	ldw	r2,-25772(gp)
    1f38:	10bfffc4 	addi	r2,r2,-1
    1f3c:	e0fffd17 	ldw	r3,-12(fp)
    1f40:	18bfbf16 	blt	r3,r2,1e40 <__alt_data_end+0xff001e40>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1f44:	0001883a 	nop
    1f48:	e037883a 	mov	sp,fp
    1f4c:	dfc00117 	ldw	ra,4(sp)
    1f50:	df000017 	ldw	fp,0(sp)
    1f54:	dec00204 	addi	sp,sp,8
    1f58:	f800283a 	ret

00001f5c <sobel_y>:

void sobel_y( unsigned char *source ) {
    1f5c:	defff904 	addi	sp,sp,-28
    1f60:	dfc00615 	stw	ra,24(sp)
    1f64:	df000515 	stw	fp,20(sp)
    1f68:	dc000415 	stw	r16,16(sp)
    1f6c:	df000504 	addi	fp,sp,20
    1f70:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1f74:	00800044 	movi	r2,1
    1f78:	e0bffd15 	stw	r2,-12(fp)
    1f7c:	00001e06 	br	1ff8 <sobel_y+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f80:	00800044 	movi	r2,1
    1f84:	e0bffc15 	stw	r2,-16(fp)
    1f88:	00001406 	br	1fdc <sobel_y+0x80>
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1f8c:	d0e6d717 	ldw	r3,-25764(gp)
    1f90:	d126d317 	ldw	r4,-25780(gp)
    1f94:	e0bffd17 	ldw	r2,-12(fp)
    1f98:	2089383a 	mul	r4,r4,r2
    1f9c:	e0bffc17 	ldw	r2,-16(fp)
    1fa0:	2085883a 	add	r2,r4,r2
    1fa4:	1085883a 	add	r2,r2,r2
    1fa8:	18a1883a 	add	r16,r3,r2
    1fac:	d0a6d317 	ldw	r2,-25780(gp)
    1fb0:	d8800015 	stw	r2,0(sp)
    1fb4:	01c00074 	movhi	r7,1
    1fb8:	39c8b404 	addi	r7,r7,8912
    1fbc:	e1bffd17 	ldw	r6,-12(fp)
    1fc0:	e17ffc17 	ldw	r5,-16(fp)
    1fc4:	e13ffe17 	ldw	r4,-8(fp)
    1fc8:	0001a100 	call	1a10 <sobel_mac>
    1fcc:	8080000d 	sth	r2,0(r16)

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1fd0:	e0bffc17 	ldw	r2,-16(fp)
    1fd4:	10800044 	addi	r2,r2,1
    1fd8:	e0bffc15 	stw	r2,-16(fp)
    1fdc:	d0a6d317 	ldw	r2,-25780(gp)
    1fe0:	10bfffc4 	addi	r2,r2,-1
    1fe4:	e0fffc17 	ldw	r3,-16(fp)
    1fe8:	18bfe816 	blt	r3,r2,1f8c <__alt_data_end+0xff001f8c>
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1fec:	e0bffd17 	ldw	r2,-12(fp)
    1ff0:	10800044 	addi	r2,r2,1
    1ff4:	e0bffd15 	stw	r2,-12(fp)
    1ff8:	d0a6d517 	ldw	r2,-25772(gp)
    1ffc:	10bfffc4 	addi	r2,r2,-1
    2000:	e0fffd17 	ldw	r3,-12(fp)
    2004:	18bfde16 	blt	r3,r2,1f80 <__alt_data_end+0xff001f80>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    2008:	0001883a 	nop
    200c:	e6ffff04 	addi	sp,fp,-4
    2010:	dfc00217 	ldw	ra,8(sp)
    2014:	df000117 	ldw	fp,4(sp)
    2018:	dc000017 	ldw	r16,0(sp)
    201c:	dec00304 	addi	sp,sp,12
    2020:	f800283a 	ret

00002024 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    2024:	defff904 	addi	sp,sp,-28
    2028:	dfc00615 	stw	ra,24(sp)
    202c:	df000515 	stw	fp,20(sp)
    2030:	df000504 	addi	fp,sp,20
    2034:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2038:	00800044 	movi	r2,1
    203c:	e0bffd15 	stw	r2,-12(fp)
    2040:	00003d06 	br	2138 <sobel_y_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2044:	00800044 	movi	r2,1
    2048:	e0bffc15 	stw	r2,-16(fp)
    204c:	00003306 	br	211c <sobel_y_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
    2050:	d0a6d317 	ldw	r2,-25780(gp)
    2054:	d8800015 	stw	r2,0(sp)
    2058:	01c00074 	movhi	r7,1
    205c:	39c8b404 	addi	r7,r7,8912
    2060:	e1bffd17 	ldw	r6,-12(fp)
    2064:	e17ffc17 	ldw	r5,-16(fp)
    2068:	e13fff17 	ldw	r4,-4(fp)
    206c:	0001a100 	call	1a10 <sobel_mac>
    2070:	e0bffe0d 	sth	r2,-8(fp)
         sobel_y_result[y*sobel_width+x] = result;
    2074:	d0e6d717 	ldw	r3,-25764(gp)
    2078:	d126d317 	ldw	r4,-25780(gp)
    207c:	e0bffd17 	ldw	r2,-12(fp)
    2080:	2089383a 	mul	r4,r4,r2
    2084:	e0bffc17 	ldw	r2,-16(fp)
    2088:	2085883a 	add	r2,r4,r2
    208c:	1085883a 	add	r2,r2,r2
    2090:	1885883a 	add	r2,r3,r2
    2094:	e0fffe0b 	ldhu	r3,-8(fp)
    2098:	10c0000d 	sth	r3,0(r2)
         if (result < 0) {
    209c:	e0bffe0f 	ldh	r2,-8(fp)
    20a0:	10000e0e 	bge	r2,zero,20dc <sobel_y_with_rgb+0xb8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    20a4:	d0e6d817 	ldw	r3,-25760(gp)
    20a8:	d126d317 	ldw	r4,-25780(gp)
    20ac:	e0bffd17 	ldw	r2,-12(fp)
    20b0:	2089383a 	mul	r4,r4,r2
    20b4:	e0bffc17 	ldw	r2,-16(fp)
    20b8:	2085883a 	add	r2,r4,r2
    20bc:	1085883a 	add	r2,r2,r2
    20c0:	1885883a 	add	r2,r3,r2
    20c4:	e0fffe0f 	ldh	r3,-8(fp)
    20c8:	00c7c83a 	sub	r3,zero,r3
    20cc:	1807d0ba 	srai	r3,r3,2
    20d0:	1806917a 	slli	r3,r3,5
    20d4:	10c0000d 	sth	r3,0(r2)
    20d8:	00000d06 	br	2110 <sobel_y_with_rgb+0xec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    20dc:	d0e6d817 	ldw	r3,-25760(gp)
    20e0:	d126d317 	ldw	r4,-25780(gp)
    20e4:	e0bffd17 	ldw	r2,-12(fp)
    20e8:	2089383a 	mul	r4,r4,r2
    20ec:	e0bffc17 	ldw	r2,-16(fp)
    20f0:	2085883a 	add	r2,r4,r2
    20f4:	1085883a 	add	r2,r2,r2
    20f8:	1885883a 	add	r2,r3,r2
    20fc:	e0fffe0f 	ldh	r3,-8(fp)
    2100:	1807d0fa 	srai	r3,r3,3
    2104:	18ffffcc 	andi	r3,r3,65535
    2108:	180692fa 	slli	r3,r3,11
    210c:	10c0000d 	sth	r3,0(r2)
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2110:	e0bffc17 	ldw	r2,-16(fp)
    2114:	10800044 	addi	r2,r2,1
    2118:	e0bffc15 	stw	r2,-16(fp)
    211c:	d0a6d317 	ldw	r2,-25780(gp)
    2120:	10bfffc4 	addi	r2,r2,-1
    2124:	e0fffc17 	ldw	r3,-16(fp)
    2128:	18bfc916 	blt	r3,r2,2050 <__alt_data_end+0xff002050>

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    212c:	e0bffd17 	ldw	r2,-12(fp)
    2130:	10800044 	addi	r2,r2,1
    2134:	e0bffd15 	stw	r2,-12(fp)
    2138:	d0a6d517 	ldw	r2,-25772(gp)
    213c:	10bfffc4 	addi	r2,r2,-1
    2140:	e0fffd17 	ldw	r3,-12(fp)
    2144:	18bfbf16 	blt	r3,r2,2044 <__alt_data_end+0xff002044>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    2148:	0001883a 	nop
    214c:	e037883a 	mov	sp,fp
    2150:	dfc00117 	ldw	ra,4(sp)
    2154:	df000017 	ldw	fp,0(sp)
    2158:	dec00204 	addi	sp,sp,8
    215c:	f800283a 	ret

00002160 <sobel_threshold>:

void sobel_threshold(short threshold) {
    2160:	defffa04 	addi	sp,sp,-24
    2164:	df000515 	stw	fp,20(sp)
    2168:	df000504 	addi	fp,sp,20
    216c:	2005883a 	mov	r2,r4
    2170:	e0bfff0d 	sth	r2,-4(fp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2174:	00800044 	movi	r2,1
    2178:	e0bffc15 	stw	r2,-16(fp)
    217c:	00003406 	br	2250 <sobel_threshold+0xf0>
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2180:	00800044 	movi	r2,1
    2184:	e0bffb15 	stw	r2,-20(fp)
    2188:	00002a06 	br	2234 <sobel_threshold+0xd4>
			arrayindex = (y*sobel_width)+x;
    218c:	d0e6d317 	ldw	r3,-25780(gp)
    2190:	e0bffc17 	ldw	r2,-16(fp)
    2194:	1887383a 	mul	r3,r3,r2
    2198:	e0bffb17 	ldw	r2,-20(fp)
    219c:	1885883a 	add	r2,r3,r2
    21a0:	e0bffd15 	stw	r2,-12(fp)
			value = sobel_x_result[arrayindex];
    21a4:	d0e6d617 	ldw	r3,-25768(gp)
    21a8:	e0bffd17 	ldw	r2,-12(fp)
    21ac:	1085883a 	add	r2,r2,r2
    21b0:	1885883a 	add	r2,r3,r2
    21b4:	1080000b 	ldhu	r2,0(r2)
    21b8:	e0bffe0d 	sth	r2,-8(fp)
			sum = (value < 0) ? -value : value;
    21bc:	e0bffe0f 	ldh	r2,-8(fp)
    21c0:	1000010e 	bge	r2,zero,21c8 <sobel_threshold+0x68>
    21c4:	0085c83a 	sub	r2,zero,r2
    21c8:	e0bffe8d 	sth	r2,-6(fp)
			value = sobel_y_result[arrayindex];
    21cc:	d0e6d717 	ldw	r3,-25764(gp)
    21d0:	e0bffd17 	ldw	r2,-12(fp)
    21d4:	1085883a 	add	r2,r2,r2
    21d8:	1885883a 	add	r2,r3,r2
    21dc:	1080000b 	ldhu	r2,0(r2)
    21e0:	e0bffe0d 	sth	r2,-8(fp)
			sum += (value < 0) ? -value : value;
    21e4:	e0bffe0f 	ldh	r2,-8(fp)
    21e8:	1000010e 	bge	r2,zero,21f0 <sobel_threshold+0x90>
    21ec:	0085c83a 	sub	r2,zero,r2
    21f0:	1007883a 	mov	r3,r2
    21f4:	e0bffe8b 	ldhu	r2,-6(fp)
    21f8:	1885883a 	add	r2,r3,r2
    21fc:	e0bffe8d 	sth	r2,-6(fp)
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2200:	d0e6d417 	ldw	r3,-25776(gp)
    2204:	e0bffd17 	ldw	r2,-12(fp)
    2208:	1887883a 	add	r3,r3,r2
    220c:	e0bffe8f 	ldh	r2,-6(fp)
    2210:	e13fff0f 	ldh	r4,-4(fp)
    2214:	2080020e 	bge	r4,r2,2220 <sobel_threshold+0xc0>
    2218:	00bfffc4 	movi	r2,-1
    221c:	00000106 	br	2224 <sobel_threshold+0xc4>
    2220:	0005883a 	mov	r2,zero
    2224:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2228:	e0bffb17 	ldw	r2,-20(fp)
    222c:	10800044 	addi	r2,r2,1
    2230:	e0bffb15 	stw	r2,-20(fp)
    2234:	d0a6d317 	ldw	r2,-25780(gp)
    2238:	10bfffc4 	addi	r2,r2,-1
    223c:	e0fffb17 	ldw	r3,-20(fp)
    2240:	18bfd216 	blt	r3,r2,218c <__alt_data_end+0xff00218c>
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2244:	e0bffc17 	ldw	r2,-16(fp)
    2248:	10800044 	addi	r2,r2,1
    224c:	e0bffc15 	stw	r2,-16(fp)
    2250:	d0a6d517 	ldw	r2,-25772(gp)
    2254:	10bfffc4 	addi	r2,r2,-1
    2258:	e0fffc17 	ldw	r3,-16(fp)
    225c:	18bfc816 	blt	r3,r2,2180 <__alt_data_end+0xff002180>
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
    2260:	0001883a 	nop
    2264:	e037883a 	mov	sp,fp
    2268:	df000017 	ldw	fp,0(sp)
    226c:	dec00104 	addi	sp,sp,4
    2270:	f800283a 	ret

00002274 <sobel_complete>:

void sobel_complete( unsigned char *source, short threshold)
{
    2274:	defff804 	addi	sp,sp,-32
    2278:	df000715 	stw	fp,28(sp)
    227c:	df000704 	addi	fp,sp,28
    2280:	e13ffe15 	stw	r4,-8(fp)
    2284:	2805883a 	mov	r2,r5
    2288:	e0bfff0d 	sth	r2,-4(fp)
   short result = 0;
    228c:	e03ff90d 	sth	zero,-28(fp)
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2290:	00800044 	movi	r2,1
    2294:	e0bffb15 	stw	r2,-20(fp)
    2298:	0001d206 	br	29e4 <sobel_complete+0x770>
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    229c:	00800044 	movi	r2,1
    22a0:	e0bffa15 	stw	r2,-24(fp)
    22a4:	0001c806 	br	29c8 <sobel_complete+0x754>
	   arrayindex = (y*sobel_width)+x;
    22a8:	d0e6d317 	ldw	r3,-25780(gp)
    22ac:	e0bffb17 	ldw	r2,-20(fp)
    22b0:	1887383a 	mul	r3,r3,r2
    22b4:	e0bffa17 	ldw	r2,-24(fp)
    22b8:	1885883a 	add	r2,r3,r2
    22bc:	e0bffc15 	stw	r2,-16(fp)

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    22c0:	d0a00017 	ldw	r2,-32768(gp)
    22c4:	10800003 	ldbu	r2,0(r2)
    22c8:	10c03fcc 	andi	r3,r2,255
    22cc:	18c0201c 	xori	r3,r3,128
    22d0:	18ffe004 	addi	r3,r3,-128
    22d4:	e0bffb17 	ldw	r2,-20(fp)
    22d8:	113fffc4 	addi	r4,r2,-1
    22dc:	d0a6d317 	ldw	r2,-25780(gp)
    22e0:	2089383a 	mul	r4,r4,r2
    22e4:	e0bffa17 	ldw	r2,-24(fp)
    22e8:	10bfffc4 	addi	r2,r2,-1
    22ec:	2085883a 	add	r2,r4,r2
    22f0:	1009883a 	mov	r4,r2
    22f4:	e0bffe17 	ldw	r2,-8(fp)
    22f8:	1105883a 	add	r2,r2,r4
    22fc:	10800003 	ldbu	r2,0(r2)
    2300:	10803fcc 	andi	r2,r2,255
    2304:	1885383a 	mul	r2,r3,r2
    2308:	1007883a 	mov	r3,r2
    230c:	e0bff90b 	ldhu	r2,-28(fp)
    2310:	1885883a 	add	r2,r3,r2
    2314:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    2318:	d0a00017 	ldw	r2,-32768(gp)
    231c:	10800044 	addi	r2,r2,1
    2320:	10800003 	ldbu	r2,0(r2)
    2324:	10c03fcc 	andi	r3,r2,255
    2328:	18c0201c 	xori	r3,r3,128
    232c:	18ffe004 	addi	r3,r3,-128
    2330:	e0bffb17 	ldw	r2,-20(fp)
    2334:	113fffc4 	addi	r4,r2,-1
    2338:	d0a6d317 	ldw	r2,-25780(gp)
    233c:	2089383a 	mul	r4,r4,r2
    2340:	e0bffa17 	ldw	r2,-24(fp)
    2344:	2085883a 	add	r2,r4,r2
    2348:	1009883a 	mov	r4,r2
    234c:	e0bffe17 	ldw	r2,-8(fp)
    2350:	1105883a 	add	r2,r2,r4
    2354:	10800003 	ldbu	r2,0(r2)
    2358:	10803fcc 	andi	r2,r2,255
    235c:	1885383a 	mul	r2,r3,r2
    2360:	1007883a 	mov	r3,r2
    2364:	e0bff90b 	ldhu	r2,-28(fp)
    2368:	1885883a 	add	r2,r3,r2
    236c:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    2370:	d0a00017 	ldw	r2,-32768(gp)
    2374:	10800084 	addi	r2,r2,2
    2378:	10800003 	ldbu	r2,0(r2)
    237c:	10c03fcc 	andi	r3,r2,255
    2380:	18c0201c 	xori	r3,r3,128
    2384:	18ffe004 	addi	r3,r3,-128
    2388:	e0bffb17 	ldw	r2,-20(fp)
    238c:	113fffc4 	addi	r4,r2,-1
    2390:	d0a6d317 	ldw	r2,-25780(gp)
    2394:	2089383a 	mul	r4,r4,r2
    2398:	e0bffa17 	ldw	r2,-24(fp)
    239c:	10800044 	addi	r2,r2,1
    23a0:	2085883a 	add	r2,r4,r2
    23a4:	1009883a 	mov	r4,r2
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	1105883a 	add	r2,r2,r4
    23b0:	10800003 	ldbu	r2,0(r2)
    23b4:	10803fcc 	andi	r2,r2,255
    23b8:	1885383a 	mul	r2,r3,r2
    23bc:	1007883a 	mov	r3,r2
    23c0:	e0bff90b 	ldhu	r2,-28(fp)
    23c4:	1885883a 	add	r2,r3,r2
    23c8:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    23cc:	d0a00017 	ldw	r2,-32768(gp)
    23d0:	108000c4 	addi	r2,r2,3
    23d4:	10800003 	ldbu	r2,0(r2)
    23d8:	10c03fcc 	andi	r3,r2,255
    23dc:	18c0201c 	xori	r3,r3,128
    23e0:	18ffe004 	addi	r3,r3,-128
    23e4:	d126d317 	ldw	r4,-25780(gp)
    23e8:	e0bffb17 	ldw	r2,-20(fp)
    23ec:	2089383a 	mul	r4,r4,r2
    23f0:	e0bffa17 	ldw	r2,-24(fp)
    23f4:	10bfffc4 	addi	r2,r2,-1
    23f8:	2085883a 	add	r2,r4,r2
    23fc:	1009883a 	mov	r4,r2
    2400:	e0bffe17 	ldw	r2,-8(fp)
    2404:	1105883a 	add	r2,r2,r4
    2408:	10800003 	ldbu	r2,0(r2)
    240c:	10803fcc 	andi	r2,r2,255
    2410:	1885383a 	mul	r2,r3,r2
    2414:	1007883a 	mov	r3,r2
    2418:	e0bff90b 	ldhu	r2,-28(fp)
    241c:	1885883a 	add	r2,r3,r2
    2420:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[4] * source[y*sobel_width+x];
    2424:	d0a00017 	ldw	r2,-32768(gp)
    2428:	10800104 	addi	r2,r2,4
    242c:	10800003 	ldbu	r2,0(r2)
    2430:	10c03fcc 	andi	r3,r2,255
    2434:	18c0201c 	xori	r3,r3,128
    2438:	18ffe004 	addi	r3,r3,-128
    243c:	d126d317 	ldw	r4,-25780(gp)
    2440:	e0bffb17 	ldw	r2,-20(fp)
    2444:	2089383a 	mul	r4,r4,r2
    2448:	e0bffa17 	ldw	r2,-24(fp)
    244c:	2085883a 	add	r2,r4,r2
    2450:	1009883a 	mov	r4,r2
    2454:	e0bffe17 	ldw	r2,-8(fp)
    2458:	1105883a 	add	r2,r2,r4
    245c:	10800003 	ldbu	r2,0(r2)
    2460:	10803fcc 	andi	r2,r2,255
    2464:	1885383a 	mul	r2,r3,r2
    2468:	1007883a 	mov	r3,r2
    246c:	e0bff90b 	ldhu	r2,-28(fp)
    2470:	1885883a 	add	r2,r3,r2
    2474:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    2478:	d0a00017 	ldw	r2,-32768(gp)
    247c:	10800144 	addi	r2,r2,5
    2480:	10800003 	ldbu	r2,0(r2)
    2484:	10c03fcc 	andi	r3,r2,255
    2488:	18c0201c 	xori	r3,r3,128
    248c:	18ffe004 	addi	r3,r3,-128
    2490:	d126d317 	ldw	r4,-25780(gp)
    2494:	e0bffb17 	ldw	r2,-20(fp)
    2498:	2089383a 	mul	r4,r4,r2
    249c:	e0bffa17 	ldw	r2,-24(fp)
    24a0:	10800044 	addi	r2,r2,1
    24a4:	2085883a 	add	r2,r4,r2
    24a8:	1009883a 	mov	r4,r2
    24ac:	e0bffe17 	ldw	r2,-8(fp)
    24b0:	1105883a 	add	r2,r2,r4
    24b4:	10800003 	ldbu	r2,0(r2)
    24b8:	10803fcc 	andi	r2,r2,255
    24bc:	1885383a 	mul	r2,r3,r2
    24c0:	1007883a 	mov	r3,r2
    24c4:	e0bff90b 	ldhu	r2,-28(fp)
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    24d0:	d0a00017 	ldw	r2,-32768(gp)
    24d4:	10800184 	addi	r2,r2,6
    24d8:	10800003 	ldbu	r2,0(r2)
    24dc:	10c03fcc 	andi	r3,r2,255
    24e0:	18c0201c 	xori	r3,r3,128
    24e4:	18ffe004 	addi	r3,r3,-128
    24e8:	e0bffb17 	ldw	r2,-20(fp)
    24ec:	11000044 	addi	r4,r2,1
    24f0:	d0a6d317 	ldw	r2,-25780(gp)
    24f4:	2089383a 	mul	r4,r4,r2
    24f8:	e0bffa17 	ldw	r2,-24(fp)
    24fc:	10bfffc4 	addi	r2,r2,-1
    2500:	2085883a 	add	r2,r4,r2
    2504:	1009883a 	mov	r4,r2
    2508:	e0bffe17 	ldw	r2,-8(fp)
    250c:	1105883a 	add	r2,r2,r4
    2510:	10800003 	ldbu	r2,0(r2)
    2514:	10803fcc 	andi	r2,r2,255
    2518:	1885383a 	mul	r2,r3,r2
    251c:	1007883a 	mov	r3,r2
    2520:	e0bff90b 	ldhu	r2,-28(fp)
    2524:	1885883a 	add	r2,r3,r2
    2528:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    252c:	d0a00017 	ldw	r2,-32768(gp)
    2530:	108001c4 	addi	r2,r2,7
    2534:	10800003 	ldbu	r2,0(r2)
    2538:	10c03fcc 	andi	r3,r2,255
    253c:	18c0201c 	xori	r3,r3,128
    2540:	18ffe004 	addi	r3,r3,-128
    2544:	e0bffb17 	ldw	r2,-20(fp)
    2548:	11000044 	addi	r4,r2,1
    254c:	d0a6d317 	ldw	r2,-25780(gp)
    2550:	2089383a 	mul	r4,r4,r2
    2554:	e0bffa17 	ldw	r2,-24(fp)
    2558:	2085883a 	add	r2,r4,r2
    255c:	1009883a 	mov	r4,r2
    2560:	e0bffe17 	ldw	r2,-8(fp)
    2564:	1105883a 	add	r2,r2,r4
    2568:	10800003 	ldbu	r2,0(r2)
    256c:	10803fcc 	andi	r2,r2,255
    2570:	1885383a 	mul	r2,r3,r2
    2574:	1007883a 	mov	r3,r2
    2578:	e0bff90b 	ldhu	r2,-28(fp)
    257c:	1885883a 	add	r2,r3,r2
    2580:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    2584:	d0a00017 	ldw	r2,-32768(gp)
    2588:	10800204 	addi	r2,r2,8
    258c:	10800003 	ldbu	r2,0(r2)
    2590:	10c03fcc 	andi	r3,r2,255
    2594:	18c0201c 	xori	r3,r3,128
    2598:	18ffe004 	addi	r3,r3,-128
    259c:	e0bffb17 	ldw	r2,-20(fp)
    25a0:	11000044 	addi	r4,r2,1
    25a4:	d0a6d317 	ldw	r2,-25780(gp)
    25a8:	2089383a 	mul	r4,r4,r2
    25ac:	e0bffa17 	ldw	r2,-24(fp)
    25b0:	10800044 	addi	r2,r2,1
    25b4:	2085883a 	add	r2,r4,r2
    25b8:	1009883a 	mov	r4,r2
    25bc:	e0bffe17 	ldw	r2,-8(fp)
    25c0:	1105883a 	add	r2,r2,r4
    25c4:	10800003 	ldbu	r2,0(r2)
    25c8:	10803fcc 	andi	r2,r2,255
    25cc:	1885383a 	mul	r2,r3,r2
    25d0:	1007883a 	mov	r3,r2
    25d4:	e0bff90b 	ldhu	r2,-28(fp)
    25d8:	1885883a 	add	r2,r3,r2
    25dc:	e0bff90d 	sth	r2,-28(fp)
	   sobel_x_result[arrayindex] = result;
    25e0:	d0e6d617 	ldw	r3,-25768(gp)
    25e4:	e0bffc17 	ldw	r2,-16(fp)
    25e8:	1085883a 	add	r2,r2,r2
    25ec:	1885883a 	add	r2,r3,r2
    25f0:	e0fff90b 	ldhu	r3,-28(fp)
    25f4:	10c0000d 	sth	r3,0(r2)
	   result = 0;
    25f8:	e03ff90d 	sth	zero,-28(fp)

	   // sobel_y in-lining
	   result += pgy_array[0] * source[(y-1)*sobel_width+(x-1)];
    25fc:	d0a00117 	ldw	r2,-32764(gp)
    2600:	10800003 	ldbu	r2,0(r2)
    2604:	10c03fcc 	andi	r3,r2,255
    2608:	18c0201c 	xori	r3,r3,128
    260c:	18ffe004 	addi	r3,r3,-128
    2610:	e0bffb17 	ldw	r2,-20(fp)
    2614:	113fffc4 	addi	r4,r2,-1
    2618:	d0a6d317 	ldw	r2,-25780(gp)
    261c:	2089383a 	mul	r4,r4,r2
    2620:	e0bffa17 	ldw	r2,-24(fp)
    2624:	10bfffc4 	addi	r2,r2,-1
    2628:	2085883a 	add	r2,r4,r2
    262c:	1009883a 	mov	r4,r2
    2630:	e0bffe17 	ldw	r2,-8(fp)
    2634:	1105883a 	add	r2,r2,r4
    2638:	10800003 	ldbu	r2,0(r2)
    263c:	10803fcc 	andi	r2,r2,255
    2640:	1885383a 	mul	r2,r3,r2
    2644:	1007883a 	mov	r3,r2
    2648:	e0bff90b 	ldhu	r2,-28(fp)
    264c:	1885883a 	add	r2,r3,r2
    2650:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[1] * source[(y-1)*sobel_width+x];
    2654:	d0a00117 	ldw	r2,-32764(gp)
    2658:	10800044 	addi	r2,r2,1
    265c:	10800003 	ldbu	r2,0(r2)
    2660:	10c03fcc 	andi	r3,r2,255
    2664:	18c0201c 	xori	r3,r3,128
    2668:	18ffe004 	addi	r3,r3,-128
    266c:	e0bffb17 	ldw	r2,-20(fp)
    2670:	113fffc4 	addi	r4,r2,-1
    2674:	d0a6d317 	ldw	r2,-25780(gp)
    2678:	2089383a 	mul	r4,r4,r2
    267c:	e0bffa17 	ldw	r2,-24(fp)
    2680:	2085883a 	add	r2,r4,r2
    2684:	1009883a 	mov	r4,r2
    2688:	e0bffe17 	ldw	r2,-8(fp)
    268c:	1105883a 	add	r2,r2,r4
    2690:	10800003 	ldbu	r2,0(r2)
    2694:	10803fcc 	andi	r2,r2,255
    2698:	1885383a 	mul	r2,r3,r2
    269c:	1007883a 	mov	r3,r2
    26a0:	e0bff90b 	ldhu	r2,-28(fp)
    26a4:	1885883a 	add	r2,r3,r2
    26a8:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[2] * source[(y-1)*sobel_width+(x+1)];
    26ac:	d0a00117 	ldw	r2,-32764(gp)
    26b0:	10800084 	addi	r2,r2,2
    26b4:	10800003 	ldbu	r2,0(r2)
    26b8:	10c03fcc 	andi	r3,r2,255
    26bc:	18c0201c 	xori	r3,r3,128
    26c0:	18ffe004 	addi	r3,r3,-128
    26c4:	e0bffb17 	ldw	r2,-20(fp)
    26c8:	113fffc4 	addi	r4,r2,-1
    26cc:	d0a6d317 	ldw	r2,-25780(gp)
    26d0:	2089383a 	mul	r4,r4,r2
    26d4:	e0bffa17 	ldw	r2,-24(fp)
    26d8:	10800044 	addi	r2,r2,1
    26dc:	2085883a 	add	r2,r4,r2
    26e0:	1009883a 	mov	r4,r2
    26e4:	e0bffe17 	ldw	r2,-8(fp)
    26e8:	1105883a 	add	r2,r2,r4
    26ec:	10800003 	ldbu	r2,0(r2)
    26f0:	10803fcc 	andi	r2,r2,255
    26f4:	1885383a 	mul	r2,r3,r2
    26f8:	1007883a 	mov	r3,r2
    26fc:	e0bff90b 	ldhu	r2,-28(fp)
    2700:	1885883a 	add	r2,r3,r2
    2704:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[3] * source[y*sobel_width+(x-1)];
    2708:	d0a00117 	ldw	r2,-32764(gp)
    270c:	108000c4 	addi	r2,r2,3
    2710:	10800003 	ldbu	r2,0(r2)
    2714:	10c03fcc 	andi	r3,r2,255
    2718:	18c0201c 	xori	r3,r3,128
    271c:	18ffe004 	addi	r3,r3,-128
    2720:	d126d317 	ldw	r4,-25780(gp)
    2724:	e0bffb17 	ldw	r2,-20(fp)
    2728:	2089383a 	mul	r4,r4,r2
    272c:	e0bffa17 	ldw	r2,-24(fp)
    2730:	10bfffc4 	addi	r2,r2,-1
    2734:	2085883a 	add	r2,r4,r2
    2738:	1009883a 	mov	r4,r2
    273c:	e0bffe17 	ldw	r2,-8(fp)
    2740:	1105883a 	add	r2,r2,r4
    2744:	10800003 	ldbu	r2,0(r2)
    2748:	10803fcc 	andi	r2,r2,255
    274c:	1885383a 	mul	r2,r3,r2
    2750:	1007883a 	mov	r3,r2
    2754:	e0bff90b 	ldhu	r2,-28(fp)
    2758:	1885883a 	add	r2,r3,r2
    275c:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[4] * source[y*sobel_width+x];
    2760:	d0a00117 	ldw	r2,-32764(gp)
    2764:	10800104 	addi	r2,r2,4
    2768:	10800003 	ldbu	r2,0(r2)
    276c:	10c03fcc 	andi	r3,r2,255
    2770:	18c0201c 	xori	r3,r3,128
    2774:	18ffe004 	addi	r3,r3,-128
    2778:	d126d317 	ldw	r4,-25780(gp)
    277c:	e0bffb17 	ldw	r2,-20(fp)
    2780:	2089383a 	mul	r4,r4,r2
    2784:	e0bffa17 	ldw	r2,-24(fp)
    2788:	2085883a 	add	r2,r4,r2
    278c:	1009883a 	mov	r4,r2
    2790:	e0bffe17 	ldw	r2,-8(fp)
    2794:	1105883a 	add	r2,r2,r4
    2798:	10800003 	ldbu	r2,0(r2)
    279c:	10803fcc 	andi	r2,r2,255
    27a0:	1885383a 	mul	r2,r3,r2
    27a4:	1007883a 	mov	r3,r2
    27a8:	e0bff90b 	ldhu	r2,-28(fp)
    27ac:	1885883a 	add	r2,r3,r2
    27b0:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
    27b4:	d0a00117 	ldw	r2,-32764(gp)
    27b8:	10800144 	addi	r2,r2,5
    27bc:	10800003 	ldbu	r2,0(r2)
    27c0:	10c03fcc 	andi	r3,r2,255
    27c4:	18c0201c 	xori	r3,r3,128
    27c8:	18ffe004 	addi	r3,r3,-128
    27cc:	d126d317 	ldw	r4,-25780(gp)
    27d0:	e0bffb17 	ldw	r2,-20(fp)
    27d4:	2089383a 	mul	r4,r4,r2
    27d8:	e0bffa17 	ldw	r2,-24(fp)
    27dc:	10800044 	addi	r2,r2,1
    27e0:	2085883a 	add	r2,r4,r2
    27e4:	1009883a 	mov	r4,r2
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	1105883a 	add	r2,r2,r4
    27f0:	10800003 	ldbu	r2,0(r2)
    27f4:	10803fcc 	andi	r2,r2,255
    27f8:	1885383a 	mul	r2,r3,r2
    27fc:	1007883a 	mov	r3,r2
    2800:	e0bff90b 	ldhu	r2,-28(fp)
    2804:	1885883a 	add	r2,r3,r2
    2808:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
    280c:	d0a00117 	ldw	r2,-32764(gp)
    2810:	10800184 	addi	r2,r2,6
    2814:	10800003 	ldbu	r2,0(r2)
    2818:	10c03fcc 	andi	r3,r2,255
    281c:	18c0201c 	xori	r3,r3,128
    2820:	18ffe004 	addi	r3,r3,-128
    2824:	e0bffb17 	ldw	r2,-20(fp)
    2828:	11000044 	addi	r4,r2,1
    282c:	d0a6d317 	ldw	r2,-25780(gp)
    2830:	2089383a 	mul	r4,r4,r2
    2834:	e0bffa17 	ldw	r2,-24(fp)
    2838:	10bfffc4 	addi	r2,r2,-1
    283c:	2085883a 	add	r2,r4,r2
    2840:	1009883a 	mov	r4,r2
    2844:	e0bffe17 	ldw	r2,-8(fp)
    2848:	1105883a 	add	r2,r2,r4
    284c:	10800003 	ldbu	r2,0(r2)
    2850:	10803fcc 	andi	r2,r2,255
    2854:	1885383a 	mul	r2,r3,r2
    2858:	1007883a 	mov	r3,r2
    285c:	e0bff90b 	ldhu	r2,-28(fp)
    2860:	1885883a 	add	r2,r3,r2
    2864:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
    2868:	d0a00117 	ldw	r2,-32764(gp)
    286c:	108001c4 	addi	r2,r2,7
    2870:	10800003 	ldbu	r2,0(r2)
    2874:	10c03fcc 	andi	r3,r2,255
    2878:	18c0201c 	xori	r3,r3,128
    287c:	18ffe004 	addi	r3,r3,-128
    2880:	e0bffb17 	ldw	r2,-20(fp)
    2884:	11000044 	addi	r4,r2,1
    2888:	d0a6d317 	ldw	r2,-25780(gp)
    288c:	2089383a 	mul	r4,r4,r2
    2890:	e0bffa17 	ldw	r2,-24(fp)
    2894:	2085883a 	add	r2,r4,r2
    2898:	1009883a 	mov	r4,r2
    289c:	e0bffe17 	ldw	r2,-8(fp)
    28a0:	1105883a 	add	r2,r2,r4
    28a4:	10800003 	ldbu	r2,0(r2)
    28a8:	10803fcc 	andi	r2,r2,255
    28ac:	1885383a 	mul	r2,r3,r2
    28b0:	1007883a 	mov	r3,r2
    28b4:	e0bff90b 	ldhu	r2,-28(fp)
    28b8:	1885883a 	add	r2,r3,r2
    28bc:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
    28c0:	d0a00117 	ldw	r2,-32764(gp)
    28c4:	10800204 	addi	r2,r2,8
    28c8:	10800003 	ldbu	r2,0(r2)
    28cc:	10c03fcc 	andi	r3,r2,255
    28d0:	18c0201c 	xori	r3,r3,128
    28d4:	18ffe004 	addi	r3,r3,-128
    28d8:	e0bffb17 	ldw	r2,-20(fp)
    28dc:	11000044 	addi	r4,r2,1
    28e0:	d0a6d317 	ldw	r2,-25780(gp)
    28e4:	2089383a 	mul	r4,r4,r2
    28e8:	e0bffa17 	ldw	r2,-24(fp)
    28ec:	10800044 	addi	r2,r2,1
    28f0:	2085883a 	add	r2,r4,r2
    28f4:	1009883a 	mov	r4,r2
    28f8:	e0bffe17 	ldw	r2,-8(fp)
    28fc:	1105883a 	add	r2,r2,r4
    2900:	10800003 	ldbu	r2,0(r2)
    2904:	10803fcc 	andi	r2,r2,255
    2908:	1885383a 	mul	r2,r3,r2
    290c:	1007883a 	mov	r3,r2
    2910:	e0bff90b 	ldhu	r2,-28(fp)
    2914:	1885883a 	add	r2,r3,r2
    2918:	e0bff90d 	sth	r2,-28(fp)
	   sobel_y_result[arrayindex] = result;
    291c:	d0e6d717 	ldw	r3,-25764(gp)
    2920:	e0bffc17 	ldw	r2,-16(fp)
    2924:	1085883a 	add	r2,r2,r2
    2928:	1885883a 	add	r2,r3,r2
    292c:	e0fff90b 	ldhu	r3,-28(fp)
    2930:	10c0000d 	sth	r3,0(r2)
	   result = 0;
    2934:	e03ff90d 	sth	zero,-28(fp)

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
    2938:	d0e6d617 	ldw	r3,-25768(gp)
    293c:	e0bffc17 	ldw	r2,-16(fp)
    2940:	1085883a 	add	r2,r2,r2
    2944:	1885883a 	add	r2,r3,r2
    2948:	1080000b 	ldhu	r2,0(r2)
    294c:	e0bffd0d 	sth	r2,-12(fp)
	   sum = (value < 0) ? -value : value;
    2950:	e0bffd0f 	ldh	r2,-12(fp)
    2954:	1000010e 	bge	r2,zero,295c <sobel_complete+0x6e8>
    2958:	0085c83a 	sub	r2,zero,r2
    295c:	e0bffd8d 	sth	r2,-10(fp)
	   value = sobel_y_result[arrayindex];
    2960:	d0e6d717 	ldw	r3,-25764(gp)
    2964:	e0bffc17 	ldw	r2,-16(fp)
    2968:	1085883a 	add	r2,r2,r2
    296c:	1885883a 	add	r2,r3,r2
    2970:	1080000b 	ldhu	r2,0(r2)
    2974:	e0bffd0d 	sth	r2,-12(fp)
	   sum += (value < 0) ? -value : value;
    2978:	e0bffd0f 	ldh	r2,-12(fp)
    297c:	1000010e 	bge	r2,zero,2984 <sobel_complete+0x710>
    2980:	0085c83a 	sub	r2,zero,r2
    2984:	1007883a 	mov	r3,r2
    2988:	e0bffd8b 	ldhu	r2,-10(fp)
    298c:	1885883a 	add	r2,r3,r2
    2990:	e0bffd8d 	sth	r2,-10(fp)
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2994:	d0e6d417 	ldw	r3,-25776(gp)
    2998:	e0bffc17 	ldw	r2,-16(fp)
    299c:	1887883a 	add	r3,r3,r2
    29a0:	e0bffd8f 	ldh	r2,-10(fp)
    29a4:	e13fff0f 	ldh	r4,-4(fp)
    29a8:	2080020e 	bge	r4,r2,29b4 <sobel_complete+0x740>
    29ac:	00bfffc4 	movi	r2,-1
    29b0:	00000106 	br	29b8 <sobel_complete+0x744>
    29b4:	0005883a 	mov	r2,zero
    29b8:	18800005 	stb	r2,0(r3)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    29bc:	e0bffa17 	ldw	r2,-24(fp)
    29c0:	10800044 	addi	r2,r2,1
    29c4:	e0bffa15 	stw	r2,-24(fp)
    29c8:	d0a6d317 	ldw	r2,-25780(gp)
    29cc:	10bfffc4 	addi	r2,r2,-1
    29d0:	e0fffa17 	ldw	r3,-24(fp)
    29d4:	18be3416 	blt	r3,r2,22a8 <__alt_data_end+0xff0022a8>
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    29d8:	e0bffb17 	ldw	r2,-20(fp)
    29dc:	10800044 	addi	r2,r2,1
    29e0:	e0bffb15 	stw	r2,-20(fp)
    29e4:	d0a6d517 	ldw	r2,-25772(gp)
    29e8:	10bfffc4 	addi	r2,r2,-1
    29ec:	e0fffb17 	ldw	r3,-20(fp)
    29f0:	18be2a16 	blt	r3,r2,229c <__alt_data_end+0xff00229c>
	   value = sobel_y_result[arrayindex];
	   sum += (value < 0) ? -value : value;
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
	 }
   }
}
    29f4:	0001883a 	nop
    29f8:	e037883a 	mov	sp,fp
    29fc:	df000017 	ldw	fp,0(sp)
    2a00:	dec00104 	addi	sp,sp,4
    2a04:	f800283a 	ret

00002a08 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
    2a08:	deffff04 	addi	sp,sp,-4
    2a0c:	df000015 	stw	fp,0(sp)
    2a10:	d839883a 	mov	fp,sp
	return sobel_rgb565;
    2a14:	d0a6d817 	ldw	r2,-25760(gp)
}
    2a18:	e037883a 	mov	sp,fp
    2a1c:	df000017 	ldw	fp,0(sp)
    2a20:	dec00104 	addi	sp,sp,4
    2a24:	f800283a 	ret

00002a28 <GetSobelResult>:

unsigned char *GetSobelResult() {
    2a28:	deffff04 	addi	sp,sp,-4
    2a2c:	df000015 	stw	fp,0(sp)
    2a30:	d839883a 	mov	fp,sp
	return sobel_result;
    2a34:	d0a6d417 	ldw	r2,-25776(gp)
}
    2a38:	e037883a 	mov	sp,fp
    2a3c:	df000017 	ldw	fp,0(sp)
    2a40:	dec00104 	addi	sp,sp,4
    2a44:	f800283a 	ret

00002a48 <vga_set_pointer>:
 */

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
    2a48:	defffe04 	addi	sp,sp,-8
    2a4c:	df000115 	stw	fp,4(sp)
    2a50:	df000104 	addi	fp,sp,4
    2a54:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2a58:	e0ffff17 	ldw	r3,-4(fp)
    2a5c:	00804034 	movhi	r2,256
    2a60:	10843404 	addi	r2,r2,4304
    2a64:	10c00035 	stwio	r3,0(r2)
}
    2a68:	0001883a 	nop
    2a6c:	e037883a 	mov	sp,fp
    2a70:	df000017 	ldw	fp,0(sp)
    2a74:	dec00104 	addi	sp,sp,4
    2a78:	f800283a 	ret

00002a7c <vga_set_swap>:

void vga_set_swap(char swap) {
    2a7c:	defffe04 	addi	sp,sp,-8
    2a80:	df000115 	stw	fp,4(sp)
    2a84:	df000104 	addi	fp,sp,4
    2a88:	2005883a 	mov	r2,r4
    2a8c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2a90:	e0ffff07 	ldb	r3,-4(fp)
    2a94:	00804034 	movhi	r2,256
    2a98:	10843504 	addi	r2,r2,4308
    2a9c:	10c00025 	stbio	r3,0(r2)
}
    2aa0:	0001883a 	nop
    2aa4:	e037883a 	mov	sp,fp
    2aa8:	df000017 	ldw	fp,0(sp)
    2aac:	dec00104 	addi	sp,sp,4
    2ab0:	f800283a 	ret

00002ab4 <__muldf3>:
    2ab4:	defff304 	addi	sp,sp,-52
    2ab8:	2804d53a 	srli	r2,r5,20
    2abc:	dd800915 	stw	r22,36(sp)
    2ac0:	282cd7fa 	srli	r22,r5,31
    2ac4:	dc000315 	stw	r16,12(sp)
    2ac8:	04000434 	movhi	r16,16
    2acc:	dd400815 	stw	r21,32(sp)
    2ad0:	dc800515 	stw	r18,20(sp)
    2ad4:	843fffc4 	addi	r16,r16,-1
    2ad8:	dfc00c15 	stw	ra,48(sp)
    2adc:	df000b15 	stw	fp,44(sp)
    2ae0:	ddc00a15 	stw	r23,40(sp)
    2ae4:	dd000715 	stw	r20,28(sp)
    2ae8:	dcc00615 	stw	r19,24(sp)
    2aec:	dc400415 	stw	r17,16(sp)
    2af0:	1481ffcc 	andi	r18,r2,2047
    2af4:	2c20703a 	and	r16,r5,r16
    2af8:	b02b883a 	mov	r21,r22
    2afc:	b2403fcc 	andi	r9,r22,255
    2b00:	90006026 	beq	r18,zero,2c84 <__muldf3+0x1d0>
    2b04:	0081ffc4 	movi	r2,2047
    2b08:	2029883a 	mov	r20,r4
    2b0c:	90803626 	beq	r18,r2,2be8 <__muldf3+0x134>
    2b10:	80800434 	orhi	r2,r16,16
    2b14:	100490fa 	slli	r2,r2,3
    2b18:	2020d77a 	srli	r16,r4,29
    2b1c:	202890fa 	slli	r20,r4,3
    2b20:	94bf0044 	addi	r18,r18,-1023
    2b24:	80a0b03a 	or	r16,r16,r2
    2b28:	0027883a 	mov	r19,zero
    2b2c:	0039883a 	mov	fp,zero
    2b30:	3804d53a 	srli	r2,r7,20
    2b34:	382ed7fa 	srli	r23,r7,31
    2b38:	04400434 	movhi	r17,16
    2b3c:	8c7fffc4 	addi	r17,r17,-1
    2b40:	1081ffcc 	andi	r2,r2,2047
    2b44:	3011883a 	mov	r8,r6
    2b48:	3c62703a 	and	r17,r7,r17
    2b4c:	ba803fcc 	andi	r10,r23,255
    2b50:	10006d26 	beq	r2,zero,2d08 <__muldf3+0x254>
    2b54:	00c1ffc4 	movi	r3,2047
    2b58:	10c06526 	beq	r2,r3,2cf0 <__muldf3+0x23c>
    2b5c:	88c00434 	orhi	r3,r17,16
    2b60:	180690fa 	slli	r3,r3,3
    2b64:	3022d77a 	srli	r17,r6,29
    2b68:	301090fa 	slli	r8,r6,3
    2b6c:	10bf0044 	addi	r2,r2,-1023
    2b70:	88e2b03a 	or	r17,r17,r3
    2b74:	000b883a 	mov	r5,zero
    2b78:	9085883a 	add	r2,r18,r2
    2b7c:	2cc8b03a 	or	r4,r5,r19
    2b80:	00c003c4 	movi	r3,15
    2b84:	bdacf03a 	xor	r22,r23,r22
    2b88:	12c00044 	addi	r11,r2,1
    2b8c:	19009936 	bltu	r3,r4,2df4 <__muldf3+0x340>
    2b90:	200890ba 	slli	r4,r4,2
    2b94:	00c00034 	movhi	r3,0
    2b98:	18caea04 	addi	r3,r3,11176
    2b9c:	20c9883a 	add	r4,r4,r3
    2ba0:	20c00017 	ldw	r3,0(r4)
    2ba4:	1800683a 	jmp	r3
    2ba8:	00002df4 	movhi	zero,183
    2bac:	00002c08 	cmpgei	zero,zero,176
    2bb0:	00002c08 	cmpgei	zero,zero,176
    2bb4:	00002c04 	movi	zero,176
    2bb8:	00002dd0 	cmplti	zero,zero,183
    2bbc:	00002dd0 	cmplti	zero,zero,183
    2bc0:	00002db8 	rdprs	zero,zero,182
    2bc4:	00002c04 	movi	zero,176
    2bc8:	00002dd0 	cmplti	zero,zero,183
    2bcc:	00002db8 	rdprs	zero,zero,182
    2bd0:	00002dd0 	cmplti	zero,zero,183
    2bd4:	00002c04 	movi	zero,176
    2bd8:	00002de0 	cmpeqi	zero,zero,183
    2bdc:	00002de0 	cmpeqi	zero,zero,183
    2be0:	00002de0 	cmpeqi	zero,zero,183
    2be4:	00002ffc 	xorhi	zero,zero,191
    2be8:	2404b03a 	or	r2,r4,r16
    2bec:	10006f1e 	bne	r2,zero,2dac <__muldf3+0x2f8>
    2bf0:	04c00204 	movi	r19,8
    2bf4:	0021883a 	mov	r16,zero
    2bf8:	0029883a 	mov	r20,zero
    2bfc:	07000084 	movi	fp,2
    2c00:	003fcb06 	br	2b30 <__alt_data_end+0xff002b30>
    2c04:	502d883a 	mov	r22,r10
    2c08:	00800084 	movi	r2,2
    2c0c:	28805726 	beq	r5,r2,2d6c <__muldf3+0x2b8>
    2c10:	008000c4 	movi	r2,3
    2c14:	28816626 	beq	r5,r2,31b0 <__muldf3+0x6fc>
    2c18:	00800044 	movi	r2,1
    2c1c:	2881411e 	bne	r5,r2,3124 <__muldf3+0x670>
    2c20:	b02b883a 	mov	r21,r22
    2c24:	0005883a 	mov	r2,zero
    2c28:	000b883a 	mov	r5,zero
    2c2c:	0029883a 	mov	r20,zero
    2c30:	1004953a 	slli	r2,r2,20
    2c34:	a8c03fcc 	andi	r3,r21,255
    2c38:	04400434 	movhi	r17,16
    2c3c:	8c7fffc4 	addi	r17,r17,-1
    2c40:	180697fa 	slli	r3,r3,31
    2c44:	2c4a703a 	and	r5,r5,r17
    2c48:	288ab03a 	or	r5,r5,r2
    2c4c:	28c6b03a 	or	r3,r5,r3
    2c50:	a005883a 	mov	r2,r20
    2c54:	dfc00c17 	ldw	ra,48(sp)
    2c58:	df000b17 	ldw	fp,44(sp)
    2c5c:	ddc00a17 	ldw	r23,40(sp)
    2c60:	dd800917 	ldw	r22,36(sp)
    2c64:	dd400817 	ldw	r21,32(sp)
    2c68:	dd000717 	ldw	r20,28(sp)
    2c6c:	dcc00617 	ldw	r19,24(sp)
    2c70:	dc800517 	ldw	r18,20(sp)
    2c74:	dc400417 	ldw	r17,16(sp)
    2c78:	dc000317 	ldw	r16,12(sp)
    2c7c:	dec00d04 	addi	sp,sp,52
    2c80:	f800283a 	ret
    2c84:	2404b03a 	or	r2,r4,r16
    2c88:	2027883a 	mov	r19,r4
    2c8c:	10004226 	beq	r2,zero,2d98 <__muldf3+0x2e4>
    2c90:	8000fc26 	beq	r16,zero,3084 <__muldf3+0x5d0>
    2c94:	8009883a 	mov	r4,r16
    2c98:	d9800215 	stw	r6,8(sp)
    2c9c:	d9c00015 	stw	r7,0(sp)
    2ca0:	da400115 	stw	r9,4(sp)
    2ca4:	00033280 	call	3328 <__clzsi2>
    2ca8:	d9800217 	ldw	r6,8(sp)
    2cac:	d9c00017 	ldw	r7,0(sp)
    2cb0:	da400117 	ldw	r9,4(sp)
    2cb4:	113ffd44 	addi	r4,r2,-11
    2cb8:	00c00704 	movi	r3,28
    2cbc:	1900ed16 	blt	r3,r4,3074 <__muldf3+0x5c0>
    2cc0:	00c00744 	movi	r3,29
    2cc4:	147ffe04 	addi	r17,r2,-8
    2cc8:	1907c83a 	sub	r3,r3,r4
    2ccc:	8460983a 	sll	r16,r16,r17
    2cd0:	98c6d83a 	srl	r3,r19,r3
    2cd4:	9c68983a 	sll	r20,r19,r17
    2cd8:	1c20b03a 	or	r16,r3,r16
    2cdc:	1080fcc4 	addi	r2,r2,1011
    2ce0:	00a5c83a 	sub	r18,zero,r2
    2ce4:	0027883a 	mov	r19,zero
    2ce8:	0039883a 	mov	fp,zero
    2cec:	003f9006 	br	2b30 <__alt_data_end+0xff002b30>
    2cf0:	3446b03a 	or	r3,r6,r17
    2cf4:	1800261e 	bne	r3,zero,2d90 <__muldf3+0x2dc>
    2cf8:	0023883a 	mov	r17,zero
    2cfc:	0011883a 	mov	r8,zero
    2d00:	01400084 	movi	r5,2
    2d04:	003f9c06 	br	2b78 <__alt_data_end+0xff002b78>
    2d08:	3446b03a 	or	r3,r6,r17
    2d0c:	18001c26 	beq	r3,zero,2d80 <__muldf3+0x2cc>
    2d10:	8800ce26 	beq	r17,zero,304c <__muldf3+0x598>
    2d14:	8809883a 	mov	r4,r17
    2d18:	d9800215 	stw	r6,8(sp)
    2d1c:	da400115 	stw	r9,4(sp)
    2d20:	da800015 	stw	r10,0(sp)
    2d24:	00033280 	call	3328 <__clzsi2>
    2d28:	d9800217 	ldw	r6,8(sp)
    2d2c:	da400117 	ldw	r9,4(sp)
    2d30:	da800017 	ldw	r10,0(sp)
    2d34:	113ffd44 	addi	r4,r2,-11
    2d38:	00c00704 	movi	r3,28
    2d3c:	1900bf16 	blt	r3,r4,303c <__muldf3+0x588>
    2d40:	00c00744 	movi	r3,29
    2d44:	123ffe04 	addi	r8,r2,-8
    2d48:	1907c83a 	sub	r3,r3,r4
    2d4c:	8a22983a 	sll	r17,r17,r8
    2d50:	30c6d83a 	srl	r3,r6,r3
    2d54:	3210983a 	sll	r8,r6,r8
    2d58:	1c62b03a 	or	r17,r3,r17
    2d5c:	1080fcc4 	addi	r2,r2,1011
    2d60:	0085c83a 	sub	r2,zero,r2
    2d64:	000b883a 	mov	r5,zero
    2d68:	003f8306 	br	2b78 <__alt_data_end+0xff002b78>
    2d6c:	b02b883a 	mov	r21,r22
    2d70:	0081ffc4 	movi	r2,2047
    2d74:	000b883a 	mov	r5,zero
    2d78:	0029883a 	mov	r20,zero
    2d7c:	003fac06 	br	2c30 <__alt_data_end+0xff002c30>
    2d80:	0023883a 	mov	r17,zero
    2d84:	0011883a 	mov	r8,zero
    2d88:	01400044 	movi	r5,1
    2d8c:	003f7a06 	br	2b78 <__alt_data_end+0xff002b78>
    2d90:	014000c4 	movi	r5,3
    2d94:	003f7806 	br	2b78 <__alt_data_end+0xff002b78>
    2d98:	04c00104 	movi	r19,4
    2d9c:	0021883a 	mov	r16,zero
    2da0:	0029883a 	mov	r20,zero
    2da4:	07000044 	movi	fp,1
    2da8:	003f6106 	br	2b30 <__alt_data_end+0xff002b30>
    2dac:	04c00304 	movi	r19,12
    2db0:	070000c4 	movi	fp,3
    2db4:	003f5e06 	br	2b30 <__alt_data_end+0xff002b30>
    2db8:	01400434 	movhi	r5,16
    2dbc:	002b883a 	mov	r21,zero
    2dc0:	297fffc4 	addi	r5,r5,-1
    2dc4:	053fffc4 	movi	r20,-1
    2dc8:	0081ffc4 	movi	r2,2047
    2dcc:	003f9806 	br	2c30 <__alt_data_end+0xff002c30>
    2dd0:	8023883a 	mov	r17,r16
    2dd4:	a011883a 	mov	r8,r20
    2dd8:	e00b883a 	mov	r5,fp
    2ddc:	003f8a06 	br	2c08 <__alt_data_end+0xff002c08>
    2de0:	8023883a 	mov	r17,r16
    2de4:	a011883a 	mov	r8,r20
    2de8:	482d883a 	mov	r22,r9
    2dec:	e00b883a 	mov	r5,fp
    2df0:	003f8506 	br	2c08 <__alt_data_end+0xff002c08>
    2df4:	a00ad43a 	srli	r5,r20,16
    2df8:	401ad43a 	srli	r13,r8,16
    2dfc:	a53fffcc 	andi	r20,r20,65535
    2e00:	423fffcc 	andi	r8,r8,65535
    2e04:	4519383a 	mul	r12,r8,r20
    2e08:	4147383a 	mul	r3,r8,r5
    2e0c:	6d09383a 	mul	r4,r13,r20
    2e10:	600cd43a 	srli	r6,r12,16
    2e14:	2b5d383a 	mul	r14,r5,r13
    2e18:	20c9883a 	add	r4,r4,r3
    2e1c:	310d883a 	add	r6,r6,r4
    2e20:	30c0022e 	bgeu	r6,r3,2e2c <__muldf3+0x378>
    2e24:	00c00074 	movhi	r3,1
    2e28:	70dd883a 	add	r14,r14,r3
    2e2c:	8826d43a 	srli	r19,r17,16
    2e30:	8bffffcc 	andi	r15,r17,65535
    2e34:	7d23383a 	mul	r17,r15,r20
    2e38:	7949383a 	mul	r4,r15,r5
    2e3c:	9d29383a 	mul	r20,r19,r20
    2e40:	8814d43a 	srli	r10,r17,16
    2e44:	3012943a 	slli	r9,r6,16
    2e48:	a129883a 	add	r20,r20,r4
    2e4c:	633fffcc 	andi	r12,r12,65535
    2e50:	5515883a 	add	r10,r10,r20
    2e54:	3006d43a 	srli	r3,r6,16
    2e58:	4b13883a 	add	r9,r9,r12
    2e5c:	2ccb383a 	mul	r5,r5,r19
    2e60:	5100022e 	bgeu	r10,r4,2e6c <__muldf3+0x3b8>
    2e64:	01000074 	movhi	r4,1
    2e68:	290b883a 	add	r5,r5,r4
    2e6c:	802ad43a 	srli	r21,r16,16
    2e70:	843fffcc 	andi	r16,r16,65535
    2e74:	440d383a 	mul	r6,r8,r16
    2e78:	4565383a 	mul	r18,r8,r21
    2e7c:	8349383a 	mul	r4,r16,r13
    2e80:	500e943a 	slli	r7,r10,16
    2e84:	3010d43a 	srli	r8,r6,16
    2e88:	5028d43a 	srli	r20,r10,16
    2e8c:	2489883a 	add	r4,r4,r18
    2e90:	8abfffcc 	andi	r10,r17,65535
    2e94:	3a95883a 	add	r10,r7,r10
    2e98:	4119883a 	add	r12,r8,r4
    2e9c:	a169883a 	add	r20,r20,r5
    2ea0:	1a87883a 	add	r3,r3,r10
    2ea4:	6d5b383a 	mul	r13,r13,r21
    2ea8:	6480022e 	bgeu	r12,r18,2eb4 <__muldf3+0x400>
    2eac:	01000074 	movhi	r4,1
    2eb0:	691b883a 	add	r13,r13,r4
    2eb4:	7c25383a 	mul	r18,r15,r16
    2eb8:	7d4b383a 	mul	r5,r15,r21
    2ebc:	84cf383a 	mul	r7,r16,r19
    2ec0:	901ed43a 	srli	r15,r18,16
    2ec4:	6008d43a 	srli	r4,r12,16
    2ec8:	6010943a 	slli	r8,r12,16
    2ecc:	394f883a 	add	r7,r7,r5
    2ed0:	333fffcc 	andi	r12,r6,65535
    2ed4:	79df883a 	add	r15,r15,r7
    2ed8:	235b883a 	add	r13,r4,r13
    2edc:	9d63383a 	mul	r17,r19,r21
    2ee0:	4309883a 	add	r4,r8,r12
    2ee4:	7940022e 	bgeu	r15,r5,2ef0 <__muldf3+0x43c>
    2ee8:	01400074 	movhi	r5,1
    2eec:	8963883a 	add	r17,r17,r5
    2ef0:	780a943a 	slli	r5,r15,16
    2ef4:	91bfffcc 	andi	r6,r18,65535
    2ef8:	70c7883a 	add	r3,r14,r3
    2efc:	298d883a 	add	r6,r5,r6
    2f00:	1a8f803a 	cmpltu	r7,r3,r10
    2f04:	350b883a 	add	r5,r6,r20
    2f08:	20c7883a 	add	r3,r4,r3
    2f0c:	3955883a 	add	r10,r7,r5
    2f10:	1909803a 	cmpltu	r4,r3,r4
    2f14:	6a91883a 	add	r8,r13,r10
    2f18:	780cd43a 	srli	r6,r15,16
    2f1c:	2219883a 	add	r12,r4,r8
    2f20:	2d0b803a 	cmpltu	r5,r5,r20
    2f24:	51cf803a 	cmpltu	r7,r10,r7
    2f28:	29ceb03a 	or	r7,r5,r7
    2f2c:	4351803a 	cmpltu	r8,r8,r13
    2f30:	610b803a 	cmpltu	r5,r12,r4
    2f34:	4148b03a 	or	r4,r8,r5
    2f38:	398f883a 	add	r7,r7,r6
    2f3c:	3909883a 	add	r4,r7,r4
    2f40:	1810927a 	slli	r8,r3,9
    2f44:	2449883a 	add	r4,r4,r17
    2f48:	2008927a 	slli	r4,r4,9
    2f4c:	6022d5fa 	srli	r17,r12,23
    2f50:	1806d5fa 	srli	r3,r3,23
    2f54:	4252b03a 	or	r9,r8,r9
    2f58:	600a927a 	slli	r5,r12,9
    2f5c:	4810c03a 	cmpne	r8,r9,zero
    2f60:	2462b03a 	or	r17,r4,r17
    2f64:	40c6b03a 	or	r3,r8,r3
    2f68:	8900402c 	andhi	r4,r17,256
    2f6c:	1950b03a 	or	r8,r3,r5
    2f70:	20000726 	beq	r4,zero,2f90 <__muldf3+0x4dc>
    2f74:	4006d07a 	srli	r3,r8,1
    2f78:	880497fa 	slli	r2,r17,31
    2f7c:	4200004c 	andi	r8,r8,1
    2f80:	8822d07a 	srli	r17,r17,1
    2f84:	1a10b03a 	or	r8,r3,r8
    2f88:	1210b03a 	or	r8,r2,r8
    2f8c:	5805883a 	mov	r2,r11
    2f90:	1140ffc4 	addi	r5,r2,1023
    2f94:	0140440e 	bge	zero,r5,30a8 <__muldf3+0x5f4>
    2f98:	40c001cc 	andi	r3,r8,7
    2f9c:	18000726 	beq	r3,zero,2fbc <__muldf3+0x508>
    2fa0:	40c003cc 	andi	r3,r8,15
    2fa4:	01000104 	movi	r4,4
    2fa8:	19000426 	beq	r3,r4,2fbc <__muldf3+0x508>
    2fac:	4107883a 	add	r3,r8,r4
    2fb0:	1a11803a 	cmpltu	r8,r3,r8
    2fb4:	8a23883a 	add	r17,r17,r8
    2fb8:	1811883a 	mov	r8,r3
    2fbc:	88c0402c 	andhi	r3,r17,256
    2fc0:	18000426 	beq	r3,zero,2fd4 <__muldf3+0x520>
    2fc4:	11410004 	addi	r5,r2,1024
    2fc8:	00bfc034 	movhi	r2,65280
    2fcc:	10bfffc4 	addi	r2,r2,-1
    2fd0:	88a2703a 	and	r17,r17,r2
    2fd4:	0081ff84 	movi	r2,2046
    2fd8:	117f6416 	blt	r2,r5,2d6c <__alt_data_end+0xff002d6c>
    2fdc:	8828977a 	slli	r20,r17,29
    2fe0:	4010d0fa 	srli	r8,r8,3
    2fe4:	8822927a 	slli	r17,r17,9
    2fe8:	2881ffcc 	andi	r2,r5,2047
    2fec:	a228b03a 	or	r20,r20,r8
    2ff0:	880ad33a 	srli	r5,r17,12
    2ff4:	b02b883a 	mov	r21,r22
    2ff8:	003f0d06 	br	2c30 <__alt_data_end+0xff002c30>
    2ffc:	8080022c 	andhi	r2,r16,8
    3000:	10000926 	beq	r2,zero,3028 <__muldf3+0x574>
    3004:	8880022c 	andhi	r2,r17,8
    3008:	1000071e 	bne	r2,zero,3028 <__muldf3+0x574>
    300c:	00800434 	movhi	r2,16
    3010:	89400234 	orhi	r5,r17,8
    3014:	10bfffc4 	addi	r2,r2,-1
    3018:	b82b883a 	mov	r21,r23
    301c:	288a703a 	and	r5,r5,r2
    3020:	4029883a 	mov	r20,r8
    3024:	003f6806 	br	2dc8 <__alt_data_end+0xff002dc8>
    3028:	00800434 	movhi	r2,16
    302c:	81400234 	orhi	r5,r16,8
    3030:	10bfffc4 	addi	r2,r2,-1
    3034:	288a703a 	and	r5,r5,r2
    3038:	003f6306 	br	2dc8 <__alt_data_end+0xff002dc8>
    303c:	147ff604 	addi	r17,r2,-40
    3040:	3462983a 	sll	r17,r6,r17
    3044:	0011883a 	mov	r8,zero
    3048:	003f4406 	br	2d5c <__alt_data_end+0xff002d5c>
    304c:	3009883a 	mov	r4,r6
    3050:	d9800215 	stw	r6,8(sp)
    3054:	da400115 	stw	r9,4(sp)
    3058:	da800015 	stw	r10,0(sp)
    305c:	00033280 	call	3328 <__clzsi2>
    3060:	10800804 	addi	r2,r2,32
    3064:	da800017 	ldw	r10,0(sp)
    3068:	da400117 	ldw	r9,4(sp)
    306c:	d9800217 	ldw	r6,8(sp)
    3070:	003f3006 	br	2d34 <__alt_data_end+0xff002d34>
    3074:	143ff604 	addi	r16,r2,-40
    3078:	9c20983a 	sll	r16,r19,r16
    307c:	0029883a 	mov	r20,zero
    3080:	003f1606 	br	2cdc <__alt_data_end+0xff002cdc>
    3084:	d9800215 	stw	r6,8(sp)
    3088:	d9c00015 	stw	r7,0(sp)
    308c:	da400115 	stw	r9,4(sp)
    3090:	00033280 	call	3328 <__clzsi2>
    3094:	10800804 	addi	r2,r2,32
    3098:	da400117 	ldw	r9,4(sp)
    309c:	d9c00017 	ldw	r7,0(sp)
    30a0:	d9800217 	ldw	r6,8(sp)
    30a4:	003f0306 	br	2cb4 <__alt_data_end+0xff002cb4>
    30a8:	00c00044 	movi	r3,1
    30ac:	1947c83a 	sub	r3,r3,r5
    30b0:	00800e04 	movi	r2,56
    30b4:	10feda16 	blt	r2,r3,2c20 <__alt_data_end+0xff002c20>
    30b8:	008007c4 	movi	r2,31
    30bc:	10c01b16 	blt	r2,r3,312c <__muldf3+0x678>
    30c0:	00800804 	movi	r2,32
    30c4:	10c5c83a 	sub	r2,r2,r3
    30c8:	888a983a 	sll	r5,r17,r2
    30cc:	40c8d83a 	srl	r4,r8,r3
    30d0:	4084983a 	sll	r2,r8,r2
    30d4:	88e2d83a 	srl	r17,r17,r3
    30d8:	2906b03a 	or	r3,r5,r4
    30dc:	1004c03a 	cmpne	r2,r2,zero
    30e0:	1886b03a 	or	r3,r3,r2
    30e4:	188001cc 	andi	r2,r3,7
    30e8:	10000726 	beq	r2,zero,3108 <__muldf3+0x654>
    30ec:	188003cc 	andi	r2,r3,15
    30f0:	01000104 	movi	r4,4
    30f4:	11000426 	beq	r2,r4,3108 <__muldf3+0x654>
    30f8:	1805883a 	mov	r2,r3
    30fc:	10c00104 	addi	r3,r2,4
    3100:	1885803a 	cmpltu	r2,r3,r2
    3104:	88a3883a 	add	r17,r17,r2
    3108:	8880202c 	andhi	r2,r17,128
    310c:	10001c26 	beq	r2,zero,3180 <__muldf3+0x6cc>
    3110:	b02b883a 	mov	r21,r22
    3114:	00800044 	movi	r2,1
    3118:	000b883a 	mov	r5,zero
    311c:	0029883a 	mov	r20,zero
    3120:	003ec306 	br	2c30 <__alt_data_end+0xff002c30>
    3124:	5805883a 	mov	r2,r11
    3128:	003f9906 	br	2f90 <__alt_data_end+0xff002f90>
    312c:	00bff844 	movi	r2,-31
    3130:	1145c83a 	sub	r2,r2,r5
    3134:	8888d83a 	srl	r4,r17,r2
    3138:	00800804 	movi	r2,32
    313c:	18801a26 	beq	r3,r2,31a8 <__muldf3+0x6f4>
    3140:	00801004 	movi	r2,64
    3144:	10c5c83a 	sub	r2,r2,r3
    3148:	8884983a 	sll	r2,r17,r2
    314c:	1204b03a 	or	r2,r2,r8
    3150:	1004c03a 	cmpne	r2,r2,zero
    3154:	2084b03a 	or	r2,r4,r2
    3158:	144001cc 	andi	r17,r2,7
    315c:	88000d1e 	bne	r17,zero,3194 <__muldf3+0x6e0>
    3160:	000b883a 	mov	r5,zero
    3164:	1028d0fa 	srli	r20,r2,3
    3168:	b02b883a 	mov	r21,r22
    316c:	0005883a 	mov	r2,zero
    3170:	a468b03a 	or	r20,r20,r17
    3174:	003eae06 	br	2c30 <__alt_data_end+0xff002c30>
    3178:	1007883a 	mov	r3,r2
    317c:	0023883a 	mov	r17,zero
    3180:	880a927a 	slli	r5,r17,9
    3184:	1805883a 	mov	r2,r3
    3188:	8822977a 	slli	r17,r17,29
    318c:	280ad33a 	srli	r5,r5,12
    3190:	003ff406 	br	3164 <__alt_data_end+0xff003164>
    3194:	10c003cc 	andi	r3,r2,15
    3198:	01000104 	movi	r4,4
    319c:	193ff626 	beq	r3,r4,3178 <__alt_data_end+0xff003178>
    31a0:	0023883a 	mov	r17,zero
    31a4:	003fd506 	br	30fc <__alt_data_end+0xff0030fc>
    31a8:	0005883a 	mov	r2,zero
    31ac:	003fe706 	br	314c <__alt_data_end+0xff00314c>
    31b0:	00800434 	movhi	r2,16
    31b4:	89400234 	orhi	r5,r17,8
    31b8:	10bfffc4 	addi	r2,r2,-1
    31bc:	b02b883a 	mov	r21,r22
    31c0:	288a703a 	and	r5,r5,r2
    31c4:	4029883a 	mov	r20,r8
    31c8:	003eff06 	br	2dc8 <__alt_data_end+0xff002dc8>

000031cc <__fixdfsi>:
    31cc:	280cd53a 	srli	r6,r5,20
    31d0:	00c00434 	movhi	r3,16
    31d4:	18ffffc4 	addi	r3,r3,-1
    31d8:	3181ffcc 	andi	r6,r6,2047
    31dc:	01c0ff84 	movi	r7,1022
    31e0:	28c6703a 	and	r3,r5,r3
    31e4:	280ad7fa 	srli	r5,r5,31
    31e8:	3980120e 	bge	r7,r6,3234 <__fixdfsi+0x68>
    31ec:	00810744 	movi	r2,1053
    31f0:	11800c16 	blt	r2,r6,3224 <__fixdfsi+0x58>
    31f4:	00810cc4 	movi	r2,1075
    31f8:	1185c83a 	sub	r2,r2,r6
    31fc:	01c007c4 	movi	r7,31
    3200:	18c00434 	orhi	r3,r3,16
    3204:	38800d16 	blt	r7,r2,323c <__fixdfsi+0x70>
    3208:	31befb44 	addi	r6,r6,-1043
    320c:	2084d83a 	srl	r2,r4,r2
    3210:	1986983a 	sll	r3,r3,r6
    3214:	1884b03a 	or	r2,r3,r2
    3218:	28000726 	beq	r5,zero,3238 <__fixdfsi+0x6c>
    321c:	0085c83a 	sub	r2,zero,r2
    3220:	f800283a 	ret
    3224:	00a00034 	movhi	r2,32768
    3228:	10bfffc4 	addi	r2,r2,-1
    322c:	2885883a 	add	r2,r5,r2
    3230:	f800283a 	ret
    3234:	0005883a 	mov	r2,zero
    3238:	f800283a 	ret
    323c:	008104c4 	movi	r2,1043
    3240:	1185c83a 	sub	r2,r2,r6
    3244:	1884d83a 	srl	r2,r3,r2
    3248:	003ff306 	br	3218 <__alt_data_end+0xff003218>

0000324c <__floatsidf>:
    324c:	defffd04 	addi	sp,sp,-12
    3250:	dfc00215 	stw	ra,8(sp)
    3254:	dc400115 	stw	r17,4(sp)
    3258:	dc000015 	stw	r16,0(sp)
    325c:	20002b26 	beq	r4,zero,330c <__floatsidf+0xc0>
    3260:	2023883a 	mov	r17,r4
    3264:	2020d7fa 	srli	r16,r4,31
    3268:	20002d16 	blt	r4,zero,3320 <__floatsidf+0xd4>
    326c:	8809883a 	mov	r4,r17
    3270:	00033280 	call	3328 <__clzsi2>
    3274:	01410784 	movi	r5,1054
    3278:	288bc83a 	sub	r5,r5,r2
    327c:	01010cc4 	movi	r4,1075
    3280:	2149c83a 	sub	r4,r4,r5
    3284:	00c007c4 	movi	r3,31
    3288:	1900160e 	bge	r3,r4,32e4 <__floatsidf+0x98>
    328c:	00c104c4 	movi	r3,1043
    3290:	1947c83a 	sub	r3,r3,r5
    3294:	88c6983a 	sll	r3,r17,r3
    3298:	00800434 	movhi	r2,16
    329c:	10bfffc4 	addi	r2,r2,-1
    32a0:	1886703a 	and	r3,r3,r2
    32a4:	2941ffcc 	andi	r5,r5,2047
    32a8:	800d883a 	mov	r6,r16
    32ac:	0005883a 	mov	r2,zero
    32b0:	280a953a 	slli	r5,r5,20
    32b4:	31803fcc 	andi	r6,r6,255
    32b8:	01000434 	movhi	r4,16
    32bc:	300c97fa 	slli	r6,r6,31
    32c0:	213fffc4 	addi	r4,r4,-1
    32c4:	1906703a 	and	r3,r3,r4
    32c8:	1946b03a 	or	r3,r3,r5
    32cc:	1986b03a 	or	r3,r3,r6
    32d0:	dfc00217 	ldw	ra,8(sp)
    32d4:	dc400117 	ldw	r17,4(sp)
    32d8:	dc000017 	ldw	r16,0(sp)
    32dc:	dec00304 	addi	sp,sp,12
    32e0:	f800283a 	ret
    32e4:	00c002c4 	movi	r3,11
    32e8:	1887c83a 	sub	r3,r3,r2
    32ec:	88c6d83a 	srl	r3,r17,r3
    32f0:	8904983a 	sll	r2,r17,r4
    32f4:	01000434 	movhi	r4,16
    32f8:	213fffc4 	addi	r4,r4,-1
    32fc:	2941ffcc 	andi	r5,r5,2047
    3300:	1906703a 	and	r3,r3,r4
    3304:	800d883a 	mov	r6,r16
    3308:	003fe906 	br	32b0 <__alt_data_end+0xff0032b0>
    330c:	000d883a 	mov	r6,zero
    3310:	000b883a 	mov	r5,zero
    3314:	0007883a 	mov	r3,zero
    3318:	0005883a 	mov	r2,zero
    331c:	003fe406 	br	32b0 <__alt_data_end+0xff0032b0>
    3320:	0123c83a 	sub	r17,zero,r4
    3324:	003fd106 	br	326c <__alt_data_end+0xff00326c>

00003328 <__clzsi2>:
    3328:	00bfffd4 	movui	r2,65535
    332c:	11000536 	bltu	r2,r4,3344 <__clzsi2+0x1c>
    3330:	00803fc4 	movi	r2,255
    3334:	11000f36 	bltu	r2,r4,3374 <__clzsi2+0x4c>
    3338:	00800804 	movi	r2,32
    333c:	0007883a 	mov	r3,zero
    3340:	00000506 	br	3358 <__clzsi2+0x30>
    3344:	00804034 	movhi	r2,256
    3348:	10bfffc4 	addi	r2,r2,-1
    334c:	11000c2e 	bgeu	r2,r4,3380 <__clzsi2+0x58>
    3350:	00800204 	movi	r2,8
    3354:	00c00604 	movi	r3,24
    3358:	20c8d83a 	srl	r4,r4,r3
    335c:	00c00074 	movhi	r3,1
    3360:	18c8b644 	addi	r3,r3,8921
    3364:	1909883a 	add	r4,r3,r4
    3368:	20c00003 	ldbu	r3,0(r4)
    336c:	10c5c83a 	sub	r2,r2,r3
    3370:	f800283a 	ret
    3374:	00800604 	movi	r2,24
    3378:	00c00204 	movi	r3,8
    337c:	003ff606 	br	3358 <__alt_data_end+0xff003358>
    3380:	00800404 	movi	r2,16
    3384:	1007883a 	mov	r3,r2
    3388:	003ff306 	br	3358 <__alt_data_end+0xff003358>

0000338c <malloc>:
    338c:	00800074 	movhi	r2,1
    3390:	10902504 	addi	r2,r2,16532
    3394:	200b883a 	mov	r5,r4
    3398:	11000017 	ldw	r4,0(r2)
    339c:	00033b41 	jmpi	33b4 <_malloc_r>

000033a0 <free>:
    33a0:	00800074 	movhi	r2,1
    33a4:	10902504 	addi	r2,r2,16532
    33a8:	200b883a 	mov	r5,r4
    33ac:	11000017 	ldw	r4,0(r2)
    33b0:	00082041 	jmpi	8204 <_free_r>

000033b4 <_malloc_r>:
    33b4:	defff504 	addi	sp,sp,-44
    33b8:	dc800315 	stw	r18,12(sp)
    33bc:	dfc00a15 	stw	ra,40(sp)
    33c0:	df000915 	stw	fp,36(sp)
    33c4:	ddc00815 	stw	r23,32(sp)
    33c8:	dd800715 	stw	r22,28(sp)
    33cc:	dd400615 	stw	r21,24(sp)
    33d0:	dd000515 	stw	r20,20(sp)
    33d4:	dcc00415 	stw	r19,16(sp)
    33d8:	dc400215 	stw	r17,8(sp)
    33dc:	dc000115 	stw	r16,4(sp)
    33e0:	288002c4 	addi	r2,r5,11
    33e4:	00c00584 	movi	r3,22
    33e8:	2025883a 	mov	r18,r4
    33ec:	18807f2e 	bgeu	r3,r2,35ec <_malloc_r+0x238>
    33f0:	047ffe04 	movi	r17,-8
    33f4:	1462703a 	and	r17,r2,r17
    33f8:	8800a316 	blt	r17,zero,3688 <_malloc_r+0x2d4>
    33fc:	8940a236 	bltu	r17,r5,3688 <_malloc_r+0x2d4>
    3400:	000f9780 	call	f978 <__malloc_lock>
    3404:	00807dc4 	movi	r2,503
    3408:	1441e92e 	bgeu	r2,r17,3bb0 <_malloc_r+0x7fc>
    340c:	8804d27a 	srli	r2,r17,9
    3410:	1000a126 	beq	r2,zero,3698 <_malloc_r+0x2e4>
    3414:	00c00104 	movi	r3,4
    3418:	18811e36 	bltu	r3,r2,3894 <_malloc_r+0x4e0>
    341c:	8804d1ba 	srli	r2,r17,6
    3420:	12000e44 	addi	r8,r2,57
    3424:	11c00e04 	addi	r7,r2,56
    3428:	4209883a 	add	r4,r8,r8
    342c:	04c00074 	movhi	r19,1
    3430:	2109883a 	add	r4,r4,r4
    3434:	9cc97504 	addi	r19,r19,9684
    3438:	2109883a 	add	r4,r4,r4
    343c:	9909883a 	add	r4,r19,r4
    3440:	24000117 	ldw	r16,4(r4)
    3444:	213ffe04 	addi	r4,r4,-8
    3448:	24009726 	beq	r4,r16,36a8 <_malloc_r+0x2f4>
    344c:	80800117 	ldw	r2,4(r16)
    3450:	01bfff04 	movi	r6,-4
    3454:	014003c4 	movi	r5,15
    3458:	1184703a 	and	r2,r2,r6
    345c:	1447c83a 	sub	r3,r2,r17
    3460:	28c00716 	blt	r5,r3,3480 <_malloc_r+0xcc>
    3464:	1800920e 	bge	r3,zero,36b0 <_malloc_r+0x2fc>
    3468:	84000317 	ldw	r16,12(r16)
    346c:	24008e26 	beq	r4,r16,36a8 <_malloc_r+0x2f4>
    3470:	80800117 	ldw	r2,4(r16)
    3474:	1184703a 	and	r2,r2,r6
    3478:	1447c83a 	sub	r3,r2,r17
    347c:	28fff90e 	bge	r5,r3,3464 <__alt_data_end+0xff003464>
    3480:	3809883a 	mov	r4,r7
    3484:	01800074 	movhi	r6,1
    3488:	9c000417 	ldw	r16,16(r19)
    348c:	31897504 	addi	r6,r6,9684
    3490:	32000204 	addi	r8,r6,8
    3494:	82013426 	beq	r16,r8,3968 <_malloc_r+0x5b4>
    3498:	80c00117 	ldw	r3,4(r16)
    349c:	00bfff04 	movi	r2,-4
    34a0:	188e703a 	and	r7,r3,r2
    34a4:	3c45c83a 	sub	r2,r7,r17
    34a8:	00c003c4 	movi	r3,15
    34ac:	18811f16 	blt	r3,r2,392c <_malloc_r+0x578>
    34b0:	32000515 	stw	r8,20(r6)
    34b4:	32000415 	stw	r8,16(r6)
    34b8:	10007f0e 	bge	r2,zero,36b8 <_malloc_r+0x304>
    34bc:	00807fc4 	movi	r2,511
    34c0:	11c0fd36 	bltu	r2,r7,38b8 <_malloc_r+0x504>
    34c4:	3806d0fa 	srli	r3,r7,3
    34c8:	01c00044 	movi	r7,1
    34cc:	30800117 	ldw	r2,4(r6)
    34d0:	19400044 	addi	r5,r3,1
    34d4:	294b883a 	add	r5,r5,r5
    34d8:	1807d0ba 	srai	r3,r3,2
    34dc:	294b883a 	add	r5,r5,r5
    34e0:	294b883a 	add	r5,r5,r5
    34e4:	298b883a 	add	r5,r5,r6
    34e8:	38c6983a 	sll	r3,r7,r3
    34ec:	29c00017 	ldw	r7,0(r5)
    34f0:	2a7ffe04 	addi	r9,r5,-8
    34f4:	1886b03a 	or	r3,r3,r2
    34f8:	82400315 	stw	r9,12(r16)
    34fc:	81c00215 	stw	r7,8(r16)
    3500:	30c00115 	stw	r3,4(r6)
    3504:	2c000015 	stw	r16,0(r5)
    3508:	3c000315 	stw	r16,12(r7)
    350c:	2005d0ba 	srai	r2,r4,2
    3510:	01400044 	movi	r5,1
    3514:	288a983a 	sll	r5,r5,r2
    3518:	19406f36 	bltu	r3,r5,36d8 <_malloc_r+0x324>
    351c:	28c4703a 	and	r2,r5,r3
    3520:	10000a1e 	bne	r2,zero,354c <_malloc_r+0x198>
    3524:	00bfff04 	movi	r2,-4
    3528:	294b883a 	add	r5,r5,r5
    352c:	2088703a 	and	r4,r4,r2
    3530:	28c4703a 	and	r2,r5,r3
    3534:	21000104 	addi	r4,r4,4
    3538:	1000041e 	bne	r2,zero,354c <_malloc_r+0x198>
    353c:	294b883a 	add	r5,r5,r5
    3540:	28c4703a 	and	r2,r5,r3
    3544:	21000104 	addi	r4,r4,4
    3548:	103ffc26 	beq	r2,zero,353c <__alt_data_end+0xff00353c>
    354c:	02bfff04 	movi	r10,-4
    3550:	024003c4 	movi	r9,15
    3554:	21800044 	addi	r6,r4,1
    3558:	318d883a 	add	r6,r6,r6
    355c:	318d883a 	add	r6,r6,r6
    3560:	318d883a 	add	r6,r6,r6
    3564:	998d883a 	add	r6,r19,r6
    3568:	333ffe04 	addi	r12,r6,-8
    356c:	2017883a 	mov	r11,r4
    3570:	31800104 	addi	r6,r6,4
    3574:	34000017 	ldw	r16,0(r6)
    3578:	31fffd04 	addi	r7,r6,-12
    357c:	81c0041e 	bne	r16,r7,3590 <_malloc_r+0x1dc>
    3580:	0000fb06 	br	3970 <_malloc_r+0x5bc>
    3584:	1801030e 	bge	r3,zero,3994 <_malloc_r+0x5e0>
    3588:	84000317 	ldw	r16,12(r16)
    358c:	81c0f826 	beq	r16,r7,3970 <_malloc_r+0x5bc>
    3590:	80800117 	ldw	r2,4(r16)
    3594:	1284703a 	and	r2,r2,r10
    3598:	1447c83a 	sub	r3,r2,r17
    359c:	48fff90e 	bge	r9,r3,3584 <__alt_data_end+0xff003584>
    35a0:	80800317 	ldw	r2,12(r16)
    35a4:	81000217 	ldw	r4,8(r16)
    35a8:	89400054 	ori	r5,r17,1
    35ac:	81400115 	stw	r5,4(r16)
    35b0:	20800315 	stw	r2,12(r4)
    35b4:	11000215 	stw	r4,8(r2)
    35b8:	8463883a 	add	r17,r16,r17
    35bc:	9c400515 	stw	r17,20(r19)
    35c0:	9c400415 	stw	r17,16(r19)
    35c4:	18800054 	ori	r2,r3,1
    35c8:	88800115 	stw	r2,4(r17)
    35cc:	8a000315 	stw	r8,12(r17)
    35d0:	8a000215 	stw	r8,8(r17)
    35d4:	88e3883a 	add	r17,r17,r3
    35d8:	88c00015 	stw	r3,0(r17)
    35dc:	9009883a 	mov	r4,r18
    35e0:	000f99c0 	call	f99c <__malloc_unlock>
    35e4:	80800204 	addi	r2,r16,8
    35e8:	00001b06 	br	3658 <_malloc_r+0x2a4>
    35ec:	04400404 	movi	r17,16
    35f0:	89402536 	bltu	r17,r5,3688 <_malloc_r+0x2d4>
    35f4:	000f9780 	call	f978 <__malloc_lock>
    35f8:	00800184 	movi	r2,6
    35fc:	01000084 	movi	r4,2
    3600:	04c00074 	movhi	r19,1
    3604:	1085883a 	add	r2,r2,r2
    3608:	9cc97504 	addi	r19,r19,9684
    360c:	1085883a 	add	r2,r2,r2
    3610:	9885883a 	add	r2,r19,r2
    3614:	14000117 	ldw	r16,4(r2)
    3618:	10fffe04 	addi	r3,r2,-8
    361c:	80c0d926 	beq	r16,r3,3984 <_malloc_r+0x5d0>
    3620:	80c00117 	ldw	r3,4(r16)
    3624:	81000317 	ldw	r4,12(r16)
    3628:	00bfff04 	movi	r2,-4
    362c:	1884703a 	and	r2,r3,r2
    3630:	81400217 	ldw	r5,8(r16)
    3634:	8085883a 	add	r2,r16,r2
    3638:	10c00117 	ldw	r3,4(r2)
    363c:	29000315 	stw	r4,12(r5)
    3640:	21400215 	stw	r5,8(r4)
    3644:	18c00054 	ori	r3,r3,1
    3648:	10c00115 	stw	r3,4(r2)
    364c:	9009883a 	mov	r4,r18
    3650:	000f99c0 	call	f99c <__malloc_unlock>
    3654:	80800204 	addi	r2,r16,8
    3658:	dfc00a17 	ldw	ra,40(sp)
    365c:	df000917 	ldw	fp,36(sp)
    3660:	ddc00817 	ldw	r23,32(sp)
    3664:	dd800717 	ldw	r22,28(sp)
    3668:	dd400617 	ldw	r21,24(sp)
    366c:	dd000517 	ldw	r20,20(sp)
    3670:	dcc00417 	ldw	r19,16(sp)
    3674:	dc800317 	ldw	r18,12(sp)
    3678:	dc400217 	ldw	r17,8(sp)
    367c:	dc000117 	ldw	r16,4(sp)
    3680:	dec00b04 	addi	sp,sp,44
    3684:	f800283a 	ret
    3688:	00800304 	movi	r2,12
    368c:	90800015 	stw	r2,0(r18)
    3690:	0005883a 	mov	r2,zero
    3694:	003ff006 	br	3658 <__alt_data_end+0xff003658>
    3698:	01002004 	movi	r4,128
    369c:	02001004 	movi	r8,64
    36a0:	01c00fc4 	movi	r7,63
    36a4:	003f6106 	br	342c <__alt_data_end+0xff00342c>
    36a8:	4009883a 	mov	r4,r8
    36ac:	003f7506 	br	3484 <__alt_data_end+0xff003484>
    36b0:	81000317 	ldw	r4,12(r16)
    36b4:	003fde06 	br	3630 <__alt_data_end+0xff003630>
    36b8:	81c5883a 	add	r2,r16,r7
    36bc:	11400117 	ldw	r5,4(r2)
    36c0:	9009883a 	mov	r4,r18
    36c4:	29400054 	ori	r5,r5,1
    36c8:	11400115 	stw	r5,4(r2)
    36cc:	000f99c0 	call	f99c <__malloc_unlock>
    36d0:	80800204 	addi	r2,r16,8
    36d4:	003fe006 	br	3658 <__alt_data_end+0xff003658>
    36d8:	9c000217 	ldw	r16,8(r19)
    36dc:	00bfff04 	movi	r2,-4
    36e0:	85800117 	ldw	r22,4(r16)
    36e4:	b0ac703a 	and	r22,r22,r2
    36e8:	b4400336 	bltu	r22,r17,36f8 <_malloc_r+0x344>
    36ec:	b445c83a 	sub	r2,r22,r17
    36f0:	00c003c4 	movi	r3,15
    36f4:	18805d16 	blt	r3,r2,386c <_malloc_r+0x4b8>
    36f8:	05c00074 	movhi	r23,1
    36fc:	00800074 	movhi	r2,1
    3700:	1096fb04 	addi	r2,r2,23532
    3704:	bdd02204 	addi	r23,r23,16520
    3708:	15400017 	ldw	r21,0(r2)
    370c:	b8c00017 	ldw	r3,0(r23)
    3710:	00bfffc4 	movi	r2,-1
    3714:	858d883a 	add	r6,r16,r22
    3718:	8d6b883a 	add	r21,r17,r21
    371c:	1880ea26 	beq	r3,r2,3ac8 <_malloc_r+0x714>
    3720:	ad4403c4 	addi	r21,r21,4111
    3724:	00bc0004 	movi	r2,-4096
    3728:	a8aa703a 	and	r21,r21,r2
    372c:	a80b883a 	mov	r5,r21
    3730:	9009883a 	mov	r4,r18
    3734:	d9800015 	stw	r6,0(sp)
    3738:	0003d000 	call	3d00 <_sbrk_r>
    373c:	1029883a 	mov	r20,r2
    3740:	00bfffc4 	movi	r2,-1
    3744:	d9800017 	ldw	r6,0(sp)
    3748:	a080e826 	beq	r20,r2,3aec <_malloc_r+0x738>
    374c:	a180a636 	bltu	r20,r6,39e8 <_malloc_r+0x634>
    3750:	07000074 	movhi	fp,1
    3754:	e7170904 	addi	fp,fp,23588
    3758:	e0800017 	ldw	r2,0(fp)
    375c:	a887883a 	add	r3,r21,r2
    3760:	e0c00015 	stw	r3,0(fp)
    3764:	3500e626 	beq	r6,r20,3b00 <_malloc_r+0x74c>
    3768:	b9000017 	ldw	r4,0(r23)
    376c:	00bfffc4 	movi	r2,-1
    3770:	2080ee26 	beq	r4,r2,3b2c <_malloc_r+0x778>
    3774:	a185c83a 	sub	r2,r20,r6
    3778:	10c5883a 	add	r2,r2,r3
    377c:	e0800015 	stw	r2,0(fp)
    3780:	a0c001cc 	andi	r3,r20,7
    3784:	1800bc26 	beq	r3,zero,3a78 <_malloc_r+0x6c4>
    3788:	a0e9c83a 	sub	r20,r20,r3
    378c:	00840204 	movi	r2,4104
    3790:	a5000204 	addi	r20,r20,8
    3794:	10c7c83a 	sub	r3,r2,r3
    3798:	a545883a 	add	r2,r20,r21
    379c:	1083ffcc 	andi	r2,r2,4095
    37a0:	18abc83a 	sub	r21,r3,r2
    37a4:	a80b883a 	mov	r5,r21
    37a8:	9009883a 	mov	r4,r18
    37ac:	0003d000 	call	3d00 <_sbrk_r>
    37b0:	00ffffc4 	movi	r3,-1
    37b4:	10c0e126 	beq	r2,r3,3b3c <_malloc_r+0x788>
    37b8:	1505c83a 	sub	r2,r2,r20
    37bc:	1545883a 	add	r2,r2,r21
    37c0:	10800054 	ori	r2,r2,1
    37c4:	e0c00017 	ldw	r3,0(fp)
    37c8:	9d000215 	stw	r20,8(r19)
    37cc:	a0800115 	stw	r2,4(r20)
    37d0:	a8c7883a 	add	r3,r21,r3
    37d4:	e0c00015 	stw	r3,0(fp)
    37d8:	84c00e26 	beq	r16,r19,3814 <_malloc_r+0x460>
    37dc:	018003c4 	movi	r6,15
    37e0:	3580a72e 	bgeu	r6,r22,3a80 <_malloc_r+0x6cc>
    37e4:	81400117 	ldw	r5,4(r16)
    37e8:	013ffe04 	movi	r4,-8
    37ec:	b0bffd04 	addi	r2,r22,-12
    37f0:	1104703a 	and	r2,r2,r4
    37f4:	2900004c 	andi	r4,r5,1
    37f8:	2088b03a 	or	r4,r4,r2
    37fc:	81000115 	stw	r4,4(r16)
    3800:	01400144 	movi	r5,5
    3804:	8089883a 	add	r4,r16,r2
    3808:	21400115 	stw	r5,4(r4)
    380c:	21400215 	stw	r5,8(r4)
    3810:	3080cd36 	bltu	r6,r2,3b48 <_malloc_r+0x794>
    3814:	00800074 	movhi	r2,1
    3818:	1096fa04 	addi	r2,r2,23528
    381c:	11000017 	ldw	r4,0(r2)
    3820:	20c0012e 	bgeu	r4,r3,3828 <_malloc_r+0x474>
    3824:	10c00015 	stw	r3,0(r2)
    3828:	00800074 	movhi	r2,1
    382c:	1096f904 	addi	r2,r2,23524
    3830:	11000017 	ldw	r4,0(r2)
    3834:	9c000217 	ldw	r16,8(r19)
    3838:	20c0012e 	bgeu	r4,r3,3840 <_malloc_r+0x48c>
    383c:	10c00015 	stw	r3,0(r2)
    3840:	80c00117 	ldw	r3,4(r16)
    3844:	00bfff04 	movi	r2,-4
    3848:	1886703a 	and	r3,r3,r2
    384c:	1c45c83a 	sub	r2,r3,r17
    3850:	1c400236 	bltu	r3,r17,385c <_malloc_r+0x4a8>
    3854:	00c003c4 	movi	r3,15
    3858:	18800416 	blt	r3,r2,386c <_malloc_r+0x4b8>
    385c:	9009883a 	mov	r4,r18
    3860:	000f99c0 	call	f99c <__malloc_unlock>
    3864:	0005883a 	mov	r2,zero
    3868:	003f7b06 	br	3658 <__alt_data_end+0xff003658>
    386c:	88c00054 	ori	r3,r17,1
    3870:	80c00115 	stw	r3,4(r16)
    3874:	8463883a 	add	r17,r16,r17
    3878:	10800054 	ori	r2,r2,1
    387c:	9c400215 	stw	r17,8(r19)
    3880:	88800115 	stw	r2,4(r17)
    3884:	9009883a 	mov	r4,r18
    3888:	000f99c0 	call	f99c <__malloc_unlock>
    388c:	80800204 	addi	r2,r16,8
    3890:	003f7106 	br	3658 <__alt_data_end+0xff003658>
    3894:	00c00504 	movi	r3,20
    3898:	18804a2e 	bgeu	r3,r2,39c4 <_malloc_r+0x610>
    389c:	00c01504 	movi	r3,84
    38a0:	18806e36 	bltu	r3,r2,3a5c <_malloc_r+0x6a8>
    38a4:	8804d33a 	srli	r2,r17,12
    38a8:	12001bc4 	addi	r8,r2,111
    38ac:	11c01b84 	addi	r7,r2,110
    38b0:	4209883a 	add	r4,r8,r8
    38b4:	003edd06 	br	342c <__alt_data_end+0xff00342c>
    38b8:	3804d27a 	srli	r2,r7,9
    38bc:	00c00104 	movi	r3,4
    38c0:	1880442e 	bgeu	r3,r2,39d4 <_malloc_r+0x620>
    38c4:	00c00504 	movi	r3,20
    38c8:	18808136 	bltu	r3,r2,3ad0 <_malloc_r+0x71c>
    38cc:	11401704 	addi	r5,r2,92
    38d0:	10c016c4 	addi	r3,r2,91
    38d4:	294b883a 	add	r5,r5,r5
    38d8:	294b883a 	add	r5,r5,r5
    38dc:	294b883a 	add	r5,r5,r5
    38e0:	994b883a 	add	r5,r19,r5
    38e4:	28800017 	ldw	r2,0(r5)
    38e8:	01800074 	movhi	r6,1
    38ec:	297ffe04 	addi	r5,r5,-8
    38f0:	31897504 	addi	r6,r6,9684
    38f4:	28806526 	beq	r5,r2,3a8c <_malloc_r+0x6d8>
    38f8:	01bfff04 	movi	r6,-4
    38fc:	10c00117 	ldw	r3,4(r2)
    3900:	1986703a 	and	r3,r3,r6
    3904:	38c0022e 	bgeu	r7,r3,3910 <_malloc_r+0x55c>
    3908:	10800217 	ldw	r2,8(r2)
    390c:	28bffb1e 	bne	r5,r2,38fc <__alt_data_end+0xff0038fc>
    3910:	11400317 	ldw	r5,12(r2)
    3914:	98c00117 	ldw	r3,4(r19)
    3918:	81400315 	stw	r5,12(r16)
    391c:	80800215 	stw	r2,8(r16)
    3920:	2c000215 	stw	r16,8(r5)
    3924:	14000315 	stw	r16,12(r2)
    3928:	003ef806 	br	350c <__alt_data_end+0xff00350c>
    392c:	88c00054 	ori	r3,r17,1
    3930:	80c00115 	stw	r3,4(r16)
    3934:	8463883a 	add	r17,r16,r17
    3938:	34400515 	stw	r17,20(r6)
    393c:	34400415 	stw	r17,16(r6)
    3940:	10c00054 	ori	r3,r2,1
    3944:	8a000315 	stw	r8,12(r17)
    3948:	8a000215 	stw	r8,8(r17)
    394c:	88c00115 	stw	r3,4(r17)
    3950:	88a3883a 	add	r17,r17,r2
    3954:	88800015 	stw	r2,0(r17)
    3958:	9009883a 	mov	r4,r18
    395c:	000f99c0 	call	f99c <__malloc_unlock>
    3960:	80800204 	addi	r2,r16,8
    3964:	003f3c06 	br	3658 <__alt_data_end+0xff003658>
    3968:	30c00117 	ldw	r3,4(r6)
    396c:	003ee706 	br	350c <__alt_data_end+0xff00350c>
    3970:	5ac00044 	addi	r11,r11,1
    3974:	588000cc 	andi	r2,r11,3
    3978:	31800204 	addi	r6,r6,8
    397c:	103efd1e 	bne	r2,zero,3574 <__alt_data_end+0xff003574>
    3980:	00002406 	br	3a14 <_malloc_r+0x660>
    3984:	14000317 	ldw	r16,12(r2)
    3988:	143f251e 	bne	r2,r16,3620 <__alt_data_end+0xff003620>
    398c:	21000084 	addi	r4,r4,2
    3990:	003ebc06 	br	3484 <__alt_data_end+0xff003484>
    3994:	8085883a 	add	r2,r16,r2
    3998:	10c00117 	ldw	r3,4(r2)
    399c:	81000317 	ldw	r4,12(r16)
    39a0:	81400217 	ldw	r5,8(r16)
    39a4:	18c00054 	ori	r3,r3,1
    39a8:	10c00115 	stw	r3,4(r2)
    39ac:	29000315 	stw	r4,12(r5)
    39b0:	21400215 	stw	r5,8(r4)
    39b4:	9009883a 	mov	r4,r18
    39b8:	000f99c0 	call	f99c <__malloc_unlock>
    39bc:	80800204 	addi	r2,r16,8
    39c0:	003f2506 	br	3658 <__alt_data_end+0xff003658>
    39c4:	12001704 	addi	r8,r2,92
    39c8:	11c016c4 	addi	r7,r2,91
    39cc:	4209883a 	add	r4,r8,r8
    39d0:	003e9606 	br	342c <__alt_data_end+0xff00342c>
    39d4:	3804d1ba 	srli	r2,r7,6
    39d8:	11400e44 	addi	r5,r2,57
    39dc:	10c00e04 	addi	r3,r2,56
    39e0:	294b883a 	add	r5,r5,r5
    39e4:	003fbc06 	br	38d8 <__alt_data_end+0xff0038d8>
    39e8:	84ff5926 	beq	r16,r19,3750 <__alt_data_end+0xff003750>
    39ec:	00800074 	movhi	r2,1
    39f0:	10897504 	addi	r2,r2,9684
    39f4:	14000217 	ldw	r16,8(r2)
    39f8:	00bfff04 	movi	r2,-4
    39fc:	80c00117 	ldw	r3,4(r16)
    3a00:	1886703a 	and	r3,r3,r2
    3a04:	003f9106 	br	384c <__alt_data_end+0xff00384c>
    3a08:	60800217 	ldw	r2,8(r12)
    3a0c:	213fffc4 	addi	r4,r4,-1
    3a10:	1300651e 	bne	r2,r12,3ba8 <_malloc_r+0x7f4>
    3a14:	208000cc 	andi	r2,r4,3
    3a18:	633ffe04 	addi	r12,r12,-8
    3a1c:	103ffa1e 	bne	r2,zero,3a08 <__alt_data_end+0xff003a08>
    3a20:	98800117 	ldw	r2,4(r19)
    3a24:	0146303a 	nor	r3,zero,r5
    3a28:	1884703a 	and	r2,r3,r2
    3a2c:	98800115 	stw	r2,4(r19)
    3a30:	294b883a 	add	r5,r5,r5
    3a34:	117f2836 	bltu	r2,r5,36d8 <__alt_data_end+0xff0036d8>
    3a38:	283f2726 	beq	r5,zero,36d8 <__alt_data_end+0xff0036d8>
    3a3c:	2886703a 	and	r3,r5,r2
    3a40:	5809883a 	mov	r4,r11
    3a44:	183ec31e 	bne	r3,zero,3554 <__alt_data_end+0xff003554>
    3a48:	294b883a 	add	r5,r5,r5
    3a4c:	2886703a 	and	r3,r5,r2
    3a50:	21000104 	addi	r4,r4,4
    3a54:	183ffc26 	beq	r3,zero,3a48 <__alt_data_end+0xff003a48>
    3a58:	003ebe06 	br	3554 <__alt_data_end+0xff003554>
    3a5c:	00c05504 	movi	r3,340
    3a60:	18801236 	bltu	r3,r2,3aac <_malloc_r+0x6f8>
    3a64:	8804d3fa 	srli	r2,r17,15
    3a68:	12001e04 	addi	r8,r2,120
    3a6c:	11c01dc4 	addi	r7,r2,119
    3a70:	4209883a 	add	r4,r8,r8
    3a74:	003e6d06 	br	342c <__alt_data_end+0xff00342c>
    3a78:	00c40004 	movi	r3,4096
    3a7c:	003f4606 	br	3798 <__alt_data_end+0xff003798>
    3a80:	00800044 	movi	r2,1
    3a84:	a0800115 	stw	r2,4(r20)
    3a88:	003f7406 	br	385c <__alt_data_end+0xff00385c>
    3a8c:	1805d0ba 	srai	r2,r3,2
    3a90:	01c00044 	movi	r7,1
    3a94:	30c00117 	ldw	r3,4(r6)
    3a98:	388e983a 	sll	r7,r7,r2
    3a9c:	2805883a 	mov	r2,r5
    3aa0:	38c6b03a 	or	r3,r7,r3
    3aa4:	30c00115 	stw	r3,4(r6)
    3aa8:	003f9b06 	br	3918 <__alt_data_end+0xff003918>
    3aac:	00c15504 	movi	r3,1364
    3ab0:	18801a36 	bltu	r3,r2,3b1c <_malloc_r+0x768>
    3ab4:	8804d4ba 	srli	r2,r17,18
    3ab8:	12001f44 	addi	r8,r2,125
    3abc:	11c01f04 	addi	r7,r2,124
    3ac0:	4209883a 	add	r4,r8,r8
    3ac4:	003e5906 	br	342c <__alt_data_end+0xff00342c>
    3ac8:	ad400404 	addi	r21,r21,16
    3acc:	003f1706 	br	372c <__alt_data_end+0xff00372c>
    3ad0:	00c01504 	movi	r3,84
    3ad4:	18802336 	bltu	r3,r2,3b64 <_malloc_r+0x7b0>
    3ad8:	3804d33a 	srli	r2,r7,12
    3adc:	11401bc4 	addi	r5,r2,111
    3ae0:	10c01b84 	addi	r3,r2,110
    3ae4:	294b883a 	add	r5,r5,r5
    3ae8:	003f7b06 	br	38d8 <__alt_data_end+0xff0038d8>
    3aec:	9c000217 	ldw	r16,8(r19)
    3af0:	00bfff04 	movi	r2,-4
    3af4:	80c00117 	ldw	r3,4(r16)
    3af8:	1886703a 	and	r3,r3,r2
    3afc:	003f5306 	br	384c <__alt_data_end+0xff00384c>
    3b00:	3083ffcc 	andi	r2,r6,4095
    3b04:	103f181e 	bne	r2,zero,3768 <__alt_data_end+0xff003768>
    3b08:	99000217 	ldw	r4,8(r19)
    3b0c:	b545883a 	add	r2,r22,r21
    3b10:	10800054 	ori	r2,r2,1
    3b14:	20800115 	stw	r2,4(r4)
    3b18:	003f3e06 	br	3814 <__alt_data_end+0xff003814>
    3b1c:	01003f84 	movi	r4,254
    3b20:	02001fc4 	movi	r8,127
    3b24:	01c01f84 	movi	r7,126
    3b28:	003e4006 	br	342c <__alt_data_end+0xff00342c>
    3b2c:	00800074 	movhi	r2,1
    3b30:	10902204 	addi	r2,r2,16520
    3b34:	15000015 	stw	r20,0(r2)
    3b38:	003f1106 	br	3780 <__alt_data_end+0xff003780>
    3b3c:	00800044 	movi	r2,1
    3b40:	002b883a 	mov	r21,zero
    3b44:	003f1f06 	br	37c4 <__alt_data_end+0xff0037c4>
    3b48:	81400204 	addi	r5,r16,8
    3b4c:	9009883a 	mov	r4,r18
    3b50:	00082040 	call	8204 <_free_r>
    3b54:	00800074 	movhi	r2,1
    3b58:	10970904 	addi	r2,r2,23588
    3b5c:	10c00017 	ldw	r3,0(r2)
    3b60:	003f2c06 	br	3814 <__alt_data_end+0xff003814>
    3b64:	00c05504 	movi	r3,340
    3b68:	18800536 	bltu	r3,r2,3b80 <_malloc_r+0x7cc>
    3b6c:	3804d3fa 	srli	r2,r7,15
    3b70:	11401e04 	addi	r5,r2,120
    3b74:	10c01dc4 	addi	r3,r2,119
    3b78:	294b883a 	add	r5,r5,r5
    3b7c:	003f5606 	br	38d8 <__alt_data_end+0xff0038d8>
    3b80:	00c15504 	movi	r3,1364
    3b84:	18800536 	bltu	r3,r2,3b9c <_malloc_r+0x7e8>
    3b88:	3804d4ba 	srli	r2,r7,18
    3b8c:	11401f44 	addi	r5,r2,125
    3b90:	10c01f04 	addi	r3,r2,124
    3b94:	294b883a 	add	r5,r5,r5
    3b98:	003f4f06 	br	38d8 <__alt_data_end+0xff0038d8>
    3b9c:	01403f84 	movi	r5,254
    3ba0:	00c01f84 	movi	r3,126
    3ba4:	003f4c06 	br	38d8 <__alt_data_end+0xff0038d8>
    3ba8:	98800117 	ldw	r2,4(r19)
    3bac:	003fa006 	br	3a30 <__alt_data_end+0xff003a30>
    3bb0:	8808d0fa 	srli	r4,r17,3
    3bb4:	20800044 	addi	r2,r4,1
    3bb8:	1085883a 	add	r2,r2,r2
    3bbc:	003e9006 	br	3600 <__alt_data_end+0xff003600>

00003bc0 <_printf_r>:
    3bc0:	defffd04 	addi	sp,sp,-12
    3bc4:	2805883a 	mov	r2,r5
    3bc8:	dfc00015 	stw	ra,0(sp)
    3bcc:	d9800115 	stw	r6,4(sp)
    3bd0:	d9c00215 	stw	r7,8(sp)
    3bd4:	21400217 	ldw	r5,8(r4)
    3bd8:	d9c00104 	addi	r7,sp,4
    3bdc:	100d883a 	mov	r6,r2
    3be0:	0003dec0 	call	3dec <___vfprintf_internal_r>
    3be4:	dfc00017 	ldw	ra,0(sp)
    3be8:	dec00304 	addi	sp,sp,12
    3bec:	f800283a 	ret

00003bf0 <printf>:
    3bf0:	defffc04 	addi	sp,sp,-16
    3bf4:	dfc00015 	stw	ra,0(sp)
    3bf8:	d9400115 	stw	r5,4(sp)
    3bfc:	d9800215 	stw	r6,8(sp)
    3c00:	d9c00315 	stw	r7,12(sp)
    3c04:	00800074 	movhi	r2,1
    3c08:	10902504 	addi	r2,r2,16532
    3c0c:	10800017 	ldw	r2,0(r2)
    3c10:	200b883a 	mov	r5,r4
    3c14:	d9800104 	addi	r6,sp,4
    3c18:	11000217 	ldw	r4,8(r2)
    3c1c:	0005fe40 	call	5fe4 <__vfprintf_internal>
    3c20:	dfc00017 	ldw	ra,0(sp)
    3c24:	dec00404 	addi	sp,sp,16
    3c28:	f800283a 	ret

00003c2c <_puts_r>:
    3c2c:	defff604 	addi	sp,sp,-40
    3c30:	dc000715 	stw	r16,28(sp)
    3c34:	2021883a 	mov	r16,r4
    3c38:	2809883a 	mov	r4,r5
    3c3c:	dc400815 	stw	r17,32(sp)
    3c40:	dfc00915 	stw	ra,36(sp)
    3c44:	2823883a 	mov	r17,r5
    3c48:	0003d540 	call	3d54 <strlen>
    3c4c:	10c00044 	addi	r3,r2,1
    3c50:	d8800115 	stw	r2,4(sp)
    3c54:	00800074 	movhi	r2,1
    3c58:	1088f704 	addi	r2,r2,9180
    3c5c:	d8800215 	stw	r2,8(sp)
    3c60:	00800044 	movi	r2,1
    3c64:	d8800315 	stw	r2,12(sp)
    3c68:	00800084 	movi	r2,2
    3c6c:	dc400015 	stw	r17,0(sp)
    3c70:	d8c00615 	stw	r3,24(sp)
    3c74:	dec00415 	stw	sp,16(sp)
    3c78:	d8800515 	stw	r2,20(sp)
    3c7c:	80000226 	beq	r16,zero,3c88 <_puts_r+0x5c>
    3c80:	80800e17 	ldw	r2,56(r16)
    3c84:	10001426 	beq	r2,zero,3cd8 <_puts_r+0xac>
    3c88:	81400217 	ldw	r5,8(r16)
    3c8c:	2880030b 	ldhu	r2,12(r5)
    3c90:	10c8000c 	andi	r3,r2,8192
    3c94:	1800061e 	bne	r3,zero,3cb0 <_puts_r+0x84>
    3c98:	29001917 	ldw	r4,100(r5)
    3c9c:	00f7ffc4 	movi	r3,-8193
    3ca0:	10880014 	ori	r2,r2,8192
    3ca4:	20c6703a 	and	r3,r4,r3
    3ca8:	2880030d 	sth	r2,12(r5)
    3cac:	28c01915 	stw	r3,100(r5)
    3cb0:	d9800404 	addi	r6,sp,16
    3cb4:	8009883a 	mov	r4,r16
    3cb8:	00085140 	call	8514 <__sfvwrite_r>
    3cbc:	1000091e 	bne	r2,zero,3ce4 <_puts_r+0xb8>
    3cc0:	00800284 	movi	r2,10
    3cc4:	dfc00917 	ldw	ra,36(sp)
    3cc8:	dc400817 	ldw	r17,32(sp)
    3ccc:	dc000717 	ldw	r16,28(sp)
    3cd0:	dec00a04 	addi	sp,sp,40
    3cd4:	f800283a 	ret
    3cd8:	8009883a 	mov	r4,r16
    3cdc:	00080900 	call	8090 <__sinit>
    3ce0:	003fe906 	br	3c88 <__alt_data_end+0xff003c88>
    3ce4:	00bfffc4 	movi	r2,-1
    3ce8:	003ff606 	br	3cc4 <__alt_data_end+0xff003cc4>

00003cec <puts>:
    3cec:	00800074 	movhi	r2,1
    3cf0:	10902504 	addi	r2,r2,16532
    3cf4:	200b883a 	mov	r5,r4
    3cf8:	11000017 	ldw	r4,0(r2)
    3cfc:	0003c2c1 	jmpi	3c2c <_puts_r>

00003d00 <_sbrk_r>:
    3d00:	defffd04 	addi	sp,sp,-12
    3d04:	dc000015 	stw	r16,0(sp)
    3d08:	04000074 	movhi	r16,1
    3d0c:	dc400115 	stw	r17,4(sp)
    3d10:	8416fc04 	addi	r16,r16,23536
    3d14:	2023883a 	mov	r17,r4
    3d18:	2809883a 	mov	r4,r5
    3d1c:	dfc00215 	stw	ra,8(sp)
    3d20:	80000015 	stw	zero,0(r16)
    3d24:	000fb5c0 	call	fb5c <sbrk>
    3d28:	00ffffc4 	movi	r3,-1
    3d2c:	10c00526 	beq	r2,r3,3d44 <_sbrk_r+0x44>
    3d30:	dfc00217 	ldw	ra,8(sp)
    3d34:	dc400117 	ldw	r17,4(sp)
    3d38:	dc000017 	ldw	r16,0(sp)
    3d3c:	dec00304 	addi	sp,sp,12
    3d40:	f800283a 	ret
    3d44:	80c00017 	ldw	r3,0(r16)
    3d48:	183ff926 	beq	r3,zero,3d30 <__alt_data_end+0xff003d30>
    3d4c:	88c00015 	stw	r3,0(r17)
    3d50:	003ff706 	br	3d30 <__alt_data_end+0xff003d30>

00003d54 <strlen>:
    3d54:	208000cc 	andi	r2,r4,3
    3d58:	10002026 	beq	r2,zero,3ddc <strlen+0x88>
    3d5c:	20800007 	ldb	r2,0(r4)
    3d60:	10002026 	beq	r2,zero,3de4 <strlen+0x90>
    3d64:	2005883a 	mov	r2,r4
    3d68:	00000206 	br	3d74 <strlen+0x20>
    3d6c:	10c00007 	ldb	r3,0(r2)
    3d70:	18001826 	beq	r3,zero,3dd4 <strlen+0x80>
    3d74:	10800044 	addi	r2,r2,1
    3d78:	10c000cc 	andi	r3,r2,3
    3d7c:	183ffb1e 	bne	r3,zero,3d6c <__alt_data_end+0xff003d6c>
    3d80:	10c00017 	ldw	r3,0(r2)
    3d84:	01ffbff4 	movhi	r7,65279
    3d88:	39ffbfc4 	addi	r7,r7,-257
    3d8c:	00ca303a 	nor	r5,zero,r3
    3d90:	01a02074 	movhi	r6,32897
    3d94:	19c7883a 	add	r3,r3,r7
    3d98:	31a02004 	addi	r6,r6,-32640
    3d9c:	1946703a 	and	r3,r3,r5
    3da0:	1986703a 	and	r3,r3,r6
    3da4:	1800091e 	bne	r3,zero,3dcc <strlen+0x78>
    3da8:	10800104 	addi	r2,r2,4
    3dac:	10c00017 	ldw	r3,0(r2)
    3db0:	19cb883a 	add	r5,r3,r7
    3db4:	00c6303a 	nor	r3,zero,r3
    3db8:	28c6703a 	and	r3,r5,r3
    3dbc:	1986703a 	and	r3,r3,r6
    3dc0:	183ff926 	beq	r3,zero,3da8 <__alt_data_end+0xff003da8>
    3dc4:	00000106 	br	3dcc <strlen+0x78>
    3dc8:	10800044 	addi	r2,r2,1
    3dcc:	10c00007 	ldb	r3,0(r2)
    3dd0:	183ffd1e 	bne	r3,zero,3dc8 <__alt_data_end+0xff003dc8>
    3dd4:	1105c83a 	sub	r2,r2,r4
    3dd8:	f800283a 	ret
    3ddc:	2005883a 	mov	r2,r4
    3de0:	003fe706 	br	3d80 <__alt_data_end+0xff003d80>
    3de4:	0005883a 	mov	r2,zero
    3de8:	f800283a 	ret

00003dec <___vfprintf_internal_r>:
    3dec:	deffb804 	addi	sp,sp,-288
    3df0:	dfc04715 	stw	ra,284(sp)
    3df4:	ddc04515 	stw	r23,276(sp)
    3df8:	dd404315 	stw	r21,268(sp)
    3dfc:	d9002c15 	stw	r4,176(sp)
    3e00:	282f883a 	mov	r23,r5
    3e04:	302b883a 	mov	r21,r6
    3e08:	d9c02d15 	stw	r7,180(sp)
    3e0c:	df004615 	stw	fp,280(sp)
    3e10:	dd804415 	stw	r22,272(sp)
    3e14:	dd004215 	stw	r20,264(sp)
    3e18:	dcc04115 	stw	r19,260(sp)
    3e1c:	dc804015 	stw	r18,256(sp)
    3e20:	dc403f15 	stw	r17,252(sp)
    3e24:	dc003e15 	stw	r16,248(sp)
    3e28:	0008c040 	call	8c04 <_localeconv_r>
    3e2c:	10800017 	ldw	r2,0(r2)
    3e30:	1009883a 	mov	r4,r2
    3e34:	d8803415 	stw	r2,208(sp)
    3e38:	0003d540 	call	3d54 <strlen>
    3e3c:	d8803715 	stw	r2,220(sp)
    3e40:	d8802c17 	ldw	r2,176(sp)
    3e44:	10000226 	beq	r2,zero,3e50 <___vfprintf_internal_r+0x64>
    3e48:	10800e17 	ldw	r2,56(r2)
    3e4c:	1000f926 	beq	r2,zero,4234 <___vfprintf_internal_r+0x448>
    3e50:	b880030b 	ldhu	r2,12(r23)
    3e54:	10c8000c 	andi	r3,r2,8192
    3e58:	1800061e 	bne	r3,zero,3e74 <___vfprintf_internal_r+0x88>
    3e5c:	b9001917 	ldw	r4,100(r23)
    3e60:	00f7ffc4 	movi	r3,-8193
    3e64:	10880014 	ori	r2,r2,8192
    3e68:	20c6703a 	and	r3,r4,r3
    3e6c:	b880030d 	sth	r2,12(r23)
    3e70:	b8c01915 	stw	r3,100(r23)
    3e74:	10c0020c 	andi	r3,r2,8
    3e78:	1800c126 	beq	r3,zero,4180 <___vfprintf_internal_r+0x394>
    3e7c:	b8c00417 	ldw	r3,16(r23)
    3e80:	1800bf26 	beq	r3,zero,4180 <___vfprintf_internal_r+0x394>
    3e84:	1080068c 	andi	r2,r2,26
    3e88:	00c00284 	movi	r3,10
    3e8c:	10c0c426 	beq	r2,r3,41a0 <___vfprintf_internal_r+0x3b4>
    3e90:	d8c00404 	addi	r3,sp,16
    3e94:	05000074 	movhi	r20,1
    3e98:	d9001e04 	addi	r4,sp,120
    3e9c:	a5090884 	addi	r20,r20,9250
    3ea0:	d8c01e15 	stw	r3,120(sp)
    3ea4:	d8002015 	stw	zero,128(sp)
    3ea8:	d8001f15 	stw	zero,124(sp)
    3eac:	d8003315 	stw	zero,204(sp)
    3eb0:	d8003615 	stw	zero,216(sp)
    3eb4:	d8003815 	stw	zero,224(sp)
    3eb8:	1811883a 	mov	r8,r3
    3ebc:	d8003915 	stw	zero,228(sp)
    3ec0:	d8003a15 	stw	zero,232(sp)
    3ec4:	d8002f15 	stw	zero,188(sp)
    3ec8:	d9002815 	stw	r4,160(sp)
    3ecc:	a8800007 	ldb	r2,0(r21)
    3ed0:	10027b26 	beq	r2,zero,48c0 <___vfprintf_internal_r+0xad4>
    3ed4:	00c00944 	movi	r3,37
    3ed8:	a821883a 	mov	r16,r21
    3edc:	10c0021e 	bne	r2,r3,3ee8 <___vfprintf_internal_r+0xfc>
    3ee0:	00001406 	br	3f34 <___vfprintf_internal_r+0x148>
    3ee4:	10c00326 	beq	r2,r3,3ef4 <___vfprintf_internal_r+0x108>
    3ee8:	84000044 	addi	r16,r16,1
    3eec:	80800007 	ldb	r2,0(r16)
    3ef0:	103ffc1e 	bne	r2,zero,3ee4 <__alt_data_end+0xff003ee4>
    3ef4:	8563c83a 	sub	r17,r16,r21
    3ef8:	88000e26 	beq	r17,zero,3f34 <___vfprintf_internal_r+0x148>
    3efc:	d8c02017 	ldw	r3,128(sp)
    3f00:	d8801f17 	ldw	r2,124(sp)
    3f04:	45400015 	stw	r21,0(r8)
    3f08:	1c47883a 	add	r3,r3,r17
    3f0c:	10800044 	addi	r2,r2,1
    3f10:	d8c02015 	stw	r3,128(sp)
    3f14:	44400115 	stw	r17,4(r8)
    3f18:	d8801f15 	stw	r2,124(sp)
    3f1c:	00c001c4 	movi	r3,7
    3f20:	1880a716 	blt	r3,r2,41c0 <___vfprintf_internal_r+0x3d4>
    3f24:	42000204 	addi	r8,r8,8
    3f28:	d9402f17 	ldw	r5,188(sp)
    3f2c:	2c4b883a 	add	r5,r5,r17
    3f30:	d9402f15 	stw	r5,188(sp)
    3f34:	80800007 	ldb	r2,0(r16)
    3f38:	1000a826 	beq	r2,zero,41dc <___vfprintf_internal_r+0x3f0>
    3f3c:	84400047 	ldb	r17,1(r16)
    3f40:	00bfffc4 	movi	r2,-1
    3f44:	85400044 	addi	r21,r16,1
    3f48:	d8002785 	stb	zero,158(sp)
    3f4c:	0007883a 	mov	r3,zero
    3f50:	000f883a 	mov	r7,zero
    3f54:	d8802915 	stw	r2,164(sp)
    3f58:	d8003115 	stw	zero,196(sp)
    3f5c:	0025883a 	mov	r18,zero
    3f60:	01401604 	movi	r5,88
    3f64:	01800244 	movi	r6,9
    3f68:	02800a84 	movi	r10,42
    3f6c:	02401b04 	movi	r9,108
    3f70:	ad400044 	addi	r21,r21,1
    3f74:	88bff804 	addi	r2,r17,-32
    3f78:	28830436 	bltu	r5,r2,4b8c <___vfprintf_internal_r+0xda0>
    3f7c:	100490ba 	slli	r2,r2,2
    3f80:	01000034 	movhi	r4,0
    3f84:	210fe504 	addi	r4,r4,16276
    3f88:	1105883a 	add	r2,r2,r4
    3f8c:	10800017 	ldw	r2,0(r2)
    3f90:	1000683a 	jmp	r2
    3f94:	00004aac 	andhi	zero,zero,298
    3f98:	00004b8c 	andi	zero,zero,302
    3f9c:	00004b8c 	andi	zero,zero,302
    3fa0:	00004acc 	andi	zero,zero,299
    3fa4:	00004b8c 	andi	zero,zero,302
    3fa8:	00004b8c 	andi	zero,zero,302
    3fac:	00004b8c 	andi	zero,zero,302
    3fb0:	00004b8c 	andi	zero,zero,302
    3fb4:	00004b8c 	andi	zero,zero,302
    3fb8:	00004b8c 	andi	zero,zero,302
    3fbc:	00004240 	call	424 <init_camera+0x1a4>
    3fc0:	000049e8 	cmpgeui	zero,zero,295
    3fc4:	00004b8c 	andi	zero,zero,302
    3fc8:	00004108 	cmpgei	zero,zero,260
    3fcc:	00004268 	cmpgeui	zero,zero,265
    3fd0:	00004b8c 	andi	zero,zero,302
    3fd4:	000042a8 	cmpgeui	zero,zero,266
    3fd8:	000042b4 	movhi	zero,266
    3fdc:	000042b4 	movhi	zero,266
    3fe0:	000042b4 	movhi	zero,266
    3fe4:	000042b4 	movhi	zero,266
    3fe8:	000042b4 	movhi	zero,266
    3fec:	000042b4 	movhi	zero,266
    3ff0:	000042b4 	movhi	zero,266
    3ff4:	000042b4 	movhi	zero,266
    3ff8:	000042b4 	movhi	zero,266
    3ffc:	00004b8c 	andi	zero,zero,302
    4000:	00004b8c 	andi	zero,zero,302
    4004:	00004b8c 	andi	zero,zero,302
    4008:	00004b8c 	andi	zero,zero,302
    400c:	00004b8c 	andi	zero,zero,302
    4010:	00004b8c 	andi	zero,zero,302
    4014:	00004b8c 	andi	zero,zero,302
    4018:	00004b8c 	andi	zero,zero,302
    401c:	00004b8c 	andi	zero,zero,302
    4020:	00004b8c 	andi	zero,zero,302
    4024:	000042e8 	cmpgeui	zero,zero,267
    4028:	000043a4 	muli	zero,zero,270
    402c:	00004b8c 	andi	zero,zero,302
    4030:	000043a4 	muli	zero,zero,270
    4034:	00004b8c 	andi	zero,zero,302
    4038:	00004b8c 	andi	zero,zero,302
    403c:	00004b8c 	andi	zero,zero,302
    4040:	00004b8c 	andi	zero,zero,302
    4044:	00004444 	movi	zero,273
    4048:	00004b8c 	andi	zero,zero,302
    404c:	00004b8c 	andi	zero,zero,302
    4050:	00004450 	cmplti	zero,zero,273
    4054:	00004b8c 	andi	zero,zero,302
    4058:	00004b8c 	andi	zero,zero,302
    405c:	00004b8c 	andi	zero,zero,302
    4060:	00004b8c 	andi	zero,zero,302
    4064:	00004b8c 	andi	zero,zero,302
    4068:	000048c8 	cmpgei	zero,zero,291
    406c:	00004b8c 	andi	zero,zero,302
    4070:	00004b8c 	andi	zero,zero,302
    4074:	00004928 	cmpgeui	zero,zero,292
    4078:	00004b8c 	andi	zero,zero,302
    407c:	00004b8c 	andi	zero,zero,302
    4080:	00004b8c 	andi	zero,zero,302
    4084:	00004b8c 	andi	zero,zero,302
    4088:	00004b8c 	andi	zero,zero,302
    408c:	00004b8c 	andi	zero,zero,302
    4090:	00004b8c 	andi	zero,zero,302
    4094:	00004b8c 	andi	zero,zero,302
    4098:	00004b8c 	andi	zero,zero,302
    409c:	00004b8c 	andi	zero,zero,302
    40a0:	00004b38 	rdprs	zero,zero,300
    40a4:	00004ad8 	cmpnei	zero,zero,299
    40a8:	000043a4 	muli	zero,zero,270
    40ac:	000043a4 	muli	zero,zero,270
    40b0:	000043a4 	muli	zero,zero,270
    40b4:	00004ae8 	cmpgeui	zero,zero,299
    40b8:	00004ad8 	cmpnei	zero,zero,299
    40bc:	00004b8c 	andi	zero,zero,302
    40c0:	00004b8c 	andi	zero,zero,302
    40c4:	00004af4 	movhi	zero,299
    40c8:	00004b8c 	andi	zero,zero,302
    40cc:	00004b04 	movi	zero,300
    40d0:	000049d8 	cmpnei	zero,zero,295
    40d4:	00004114 	movui	zero,260
    40d8:	000049f8 	rdprs	zero,zero,295
    40dc:	00004b8c 	andi	zero,zero,302
    40e0:	00004a04 	movi	zero,296
    40e4:	00004b8c 	andi	zero,zero,302
    40e8:	00004a60 	cmpeqi	zero,zero,297
    40ec:	00004b8c 	andi	zero,zero,302
    40f0:	00004b8c 	andi	zero,zero,302
    40f4:	00004a70 	cmpltui	zero,zero,297
    40f8:	d9003117 	ldw	r4,196(sp)
    40fc:	d8802d15 	stw	r2,180(sp)
    4100:	0109c83a 	sub	r4,zero,r4
    4104:	d9003115 	stw	r4,196(sp)
    4108:	94800114 	ori	r18,r18,4
    410c:	ac400007 	ldb	r17,0(r21)
    4110:	003f9706 	br	3f70 <__alt_data_end+0xff003f70>
    4114:	00800c04 	movi	r2,48
    4118:	d9002d17 	ldw	r4,180(sp)
    411c:	d9402917 	ldw	r5,164(sp)
    4120:	d8802705 	stb	r2,156(sp)
    4124:	00801e04 	movi	r2,120
    4128:	d8802745 	stb	r2,157(sp)
    412c:	d8002785 	stb	zero,158(sp)
    4130:	20c00104 	addi	r3,r4,4
    4134:	24c00017 	ldw	r19,0(r4)
    4138:	002d883a 	mov	r22,zero
    413c:	90800094 	ori	r2,r18,2
    4140:	28029a16 	blt	r5,zero,4bac <___vfprintf_internal_r+0xdc0>
    4144:	00bfdfc4 	movi	r2,-129
    4148:	90a4703a 	and	r18,r18,r2
    414c:	d8c02d15 	stw	r3,180(sp)
    4150:	94800094 	ori	r18,r18,2
    4154:	9802871e 	bne	r19,zero,4b74 <___vfprintf_internal_r+0xd88>
    4158:	00800074 	movhi	r2,1
    415c:	10890104 	addi	r2,r2,9220
    4160:	d8803915 	stw	r2,228(sp)
    4164:	04401e04 	movi	r17,120
    4168:	d8802917 	ldw	r2,164(sp)
    416c:	0039883a 	mov	fp,zero
    4170:	1001e926 	beq	r2,zero,4918 <___vfprintf_internal_r+0xb2c>
    4174:	0027883a 	mov	r19,zero
    4178:	002d883a 	mov	r22,zero
    417c:	00020506 	br	4994 <___vfprintf_internal_r+0xba8>
    4180:	d9002c17 	ldw	r4,176(sp)
    4184:	b80b883a 	mov	r5,r23
    4188:	00060bc0 	call	60bc <__swsetup_r>
    418c:	1005ac1e 	bne	r2,zero,5840 <___vfprintf_internal_r+0x1a54>
    4190:	b880030b 	ldhu	r2,12(r23)
    4194:	00c00284 	movi	r3,10
    4198:	1080068c 	andi	r2,r2,26
    419c:	10ff3c1e 	bne	r2,r3,3e90 <__alt_data_end+0xff003e90>
    41a0:	b880038f 	ldh	r2,14(r23)
    41a4:	103f3a16 	blt	r2,zero,3e90 <__alt_data_end+0xff003e90>
    41a8:	d9c02d17 	ldw	r7,180(sp)
    41ac:	d9002c17 	ldw	r4,176(sp)
    41b0:	a80d883a 	mov	r6,r21
    41b4:	b80b883a 	mov	r5,r23
    41b8:	00060000 	call	6000 <__sbprintf>
    41bc:	00001106 	br	4204 <___vfprintf_internal_r+0x418>
    41c0:	d9002c17 	ldw	r4,176(sp)
    41c4:	d9801e04 	addi	r6,sp,120
    41c8:	b80b883a 	mov	r5,r23
    41cc:	000ab880 	call	ab88 <__sprint_r>
    41d0:	1000081e 	bne	r2,zero,41f4 <___vfprintf_internal_r+0x408>
    41d4:	da000404 	addi	r8,sp,16
    41d8:	003f5306 	br	3f28 <__alt_data_end+0xff003f28>
    41dc:	d8802017 	ldw	r2,128(sp)
    41e0:	10000426 	beq	r2,zero,41f4 <___vfprintf_internal_r+0x408>
    41e4:	d9002c17 	ldw	r4,176(sp)
    41e8:	d9801e04 	addi	r6,sp,120
    41ec:	b80b883a 	mov	r5,r23
    41f0:	000ab880 	call	ab88 <__sprint_r>
    41f4:	b880030b 	ldhu	r2,12(r23)
    41f8:	1080100c 	andi	r2,r2,64
    41fc:	1005901e 	bne	r2,zero,5840 <___vfprintf_internal_r+0x1a54>
    4200:	d8802f17 	ldw	r2,188(sp)
    4204:	dfc04717 	ldw	ra,284(sp)
    4208:	df004617 	ldw	fp,280(sp)
    420c:	ddc04517 	ldw	r23,276(sp)
    4210:	dd804417 	ldw	r22,272(sp)
    4214:	dd404317 	ldw	r21,268(sp)
    4218:	dd004217 	ldw	r20,264(sp)
    421c:	dcc04117 	ldw	r19,260(sp)
    4220:	dc804017 	ldw	r18,256(sp)
    4224:	dc403f17 	ldw	r17,252(sp)
    4228:	dc003e17 	ldw	r16,248(sp)
    422c:	dec04804 	addi	sp,sp,288
    4230:	f800283a 	ret
    4234:	d9002c17 	ldw	r4,176(sp)
    4238:	00080900 	call	8090 <__sinit>
    423c:	003f0406 	br	3e50 <__alt_data_end+0xff003e50>
    4240:	d8802d17 	ldw	r2,180(sp)
    4244:	d9002d17 	ldw	r4,180(sp)
    4248:	10800017 	ldw	r2,0(r2)
    424c:	d8803115 	stw	r2,196(sp)
    4250:	20800104 	addi	r2,r4,4
    4254:	d9003117 	ldw	r4,196(sp)
    4258:	203fa716 	blt	r4,zero,40f8 <__alt_data_end+0xff0040f8>
    425c:	d8802d15 	stw	r2,180(sp)
    4260:	ac400007 	ldb	r17,0(r21)
    4264:	003f4206 	br	3f70 <__alt_data_end+0xff003f70>
    4268:	ac400007 	ldb	r17,0(r21)
    426c:	aac00044 	addi	r11,r21,1
    4270:	8a872826 	beq	r17,r10,5f14 <___vfprintf_internal_r+0x2128>
    4274:	88bff404 	addi	r2,r17,-48
    4278:	0009883a 	mov	r4,zero
    427c:	30867d36 	bltu	r6,r2,5c74 <___vfprintf_internal_r+0x1e88>
    4280:	5c400007 	ldb	r17,0(r11)
    4284:	210002a4 	muli	r4,r4,10
    4288:	5d400044 	addi	r21,r11,1
    428c:	a817883a 	mov	r11,r21
    4290:	2089883a 	add	r4,r4,r2
    4294:	88bff404 	addi	r2,r17,-48
    4298:	30bff92e 	bgeu	r6,r2,4280 <__alt_data_end+0xff004280>
    429c:	2005c916 	blt	r4,zero,59c4 <___vfprintf_internal_r+0x1bd8>
    42a0:	d9002915 	stw	r4,164(sp)
    42a4:	003f3306 	br	3f74 <__alt_data_end+0xff003f74>
    42a8:	94802014 	ori	r18,r18,128
    42ac:	ac400007 	ldb	r17,0(r21)
    42b0:	003f2f06 	br	3f70 <__alt_data_end+0xff003f70>
    42b4:	a809883a 	mov	r4,r21
    42b8:	d8003115 	stw	zero,196(sp)
    42bc:	88bff404 	addi	r2,r17,-48
    42c0:	0017883a 	mov	r11,zero
    42c4:	24400007 	ldb	r17,0(r4)
    42c8:	5ac002a4 	muli	r11,r11,10
    42cc:	ad400044 	addi	r21,r21,1
    42d0:	a809883a 	mov	r4,r21
    42d4:	12d7883a 	add	r11,r2,r11
    42d8:	88bff404 	addi	r2,r17,-48
    42dc:	30bff92e 	bgeu	r6,r2,42c4 <__alt_data_end+0xff0042c4>
    42e0:	dac03115 	stw	r11,196(sp)
    42e4:	003f2306 	br	3f74 <__alt_data_end+0xff003f74>
    42e8:	18c03fcc 	andi	r3,r3,255
    42ec:	18072b1e 	bne	r3,zero,5f9c <___vfprintf_internal_r+0x21b0>
    42f0:	94800414 	ori	r18,r18,16
    42f4:	9080080c 	andi	r2,r18,32
    42f8:	10037b26 	beq	r2,zero,50e8 <___vfprintf_internal_r+0x12fc>
    42fc:	d9402d17 	ldw	r5,180(sp)
    4300:	28800117 	ldw	r2,4(r5)
    4304:	2cc00017 	ldw	r19,0(r5)
    4308:	29400204 	addi	r5,r5,8
    430c:	d9402d15 	stw	r5,180(sp)
    4310:	102d883a 	mov	r22,r2
    4314:	10044b16 	blt	r2,zero,5444 <___vfprintf_internal_r+0x1658>
    4318:	d9402917 	ldw	r5,164(sp)
    431c:	df002783 	ldbu	fp,158(sp)
    4320:	2803bc16 	blt	r5,zero,5214 <___vfprintf_internal_r+0x1428>
    4324:	00ffdfc4 	movi	r3,-129
    4328:	9d84b03a 	or	r2,r19,r22
    432c:	90e4703a 	and	r18,r18,r3
    4330:	10017726 	beq	r2,zero,4910 <___vfprintf_internal_r+0xb24>
    4334:	b0038326 	beq	r22,zero,5144 <___vfprintf_internal_r+0x1358>
    4338:	dc402a15 	stw	r17,168(sp)
    433c:	dc001e04 	addi	r16,sp,120
    4340:	b023883a 	mov	r17,r22
    4344:	402d883a 	mov	r22,r8
    4348:	9809883a 	mov	r4,r19
    434c:	880b883a 	mov	r5,r17
    4350:	01800284 	movi	r6,10
    4354:	000f883a 	mov	r7,zero
    4358:	000cf800 	call	cf80 <__umoddi3>
    435c:	10800c04 	addi	r2,r2,48
    4360:	843fffc4 	addi	r16,r16,-1
    4364:	9809883a 	mov	r4,r19
    4368:	880b883a 	mov	r5,r17
    436c:	80800005 	stb	r2,0(r16)
    4370:	01800284 	movi	r6,10
    4374:	000f883a 	mov	r7,zero
    4378:	000ca080 	call	ca08 <__udivdi3>
    437c:	1027883a 	mov	r19,r2
    4380:	10c4b03a 	or	r2,r2,r3
    4384:	1823883a 	mov	r17,r3
    4388:	103fef1e 	bne	r2,zero,4348 <__alt_data_end+0xff004348>
    438c:	d8c02817 	ldw	r3,160(sp)
    4390:	dc402a17 	ldw	r17,168(sp)
    4394:	b011883a 	mov	r8,r22
    4398:	1c07c83a 	sub	r3,r3,r16
    439c:	d8c02e15 	stw	r3,184(sp)
    43a0:	00005906 	br	4508 <___vfprintf_internal_r+0x71c>
    43a4:	18c03fcc 	andi	r3,r3,255
    43a8:	1806fa1e 	bne	r3,zero,5f94 <___vfprintf_internal_r+0x21a8>
    43ac:	9080020c 	andi	r2,r18,8
    43b0:	10048a26 	beq	r2,zero,55dc <___vfprintf_internal_r+0x17f0>
    43b4:	d8c02d17 	ldw	r3,180(sp)
    43b8:	d9002d17 	ldw	r4,180(sp)
    43bc:	d9402d17 	ldw	r5,180(sp)
    43c0:	18c00017 	ldw	r3,0(r3)
    43c4:	21000117 	ldw	r4,4(r4)
    43c8:	29400204 	addi	r5,r5,8
    43cc:	d8c03615 	stw	r3,216(sp)
    43d0:	d9003815 	stw	r4,224(sp)
    43d4:	d9402d15 	stw	r5,180(sp)
    43d8:	d9003617 	ldw	r4,216(sp)
    43dc:	d9403817 	ldw	r5,224(sp)
    43e0:	da003d15 	stw	r8,244(sp)
    43e4:	04000044 	movi	r16,1
    43e8:	000a8000 	call	a800 <__fpclassifyd>
    43ec:	da003d17 	ldw	r8,244(sp)
    43f0:	14041f1e 	bne	r2,r16,5470 <___vfprintf_internal_r+0x1684>
    43f4:	d9003617 	ldw	r4,216(sp)
    43f8:	d9403817 	ldw	r5,224(sp)
    43fc:	000d883a 	mov	r6,zero
    4400:	000f883a 	mov	r7,zero
    4404:	000e9640 	call	e964 <__ledf2>
    4408:	da003d17 	ldw	r8,244(sp)
    440c:	1005be16 	blt	r2,zero,5b08 <___vfprintf_internal_r+0x1d1c>
    4410:	df002783 	ldbu	fp,158(sp)
    4414:	008011c4 	movi	r2,71
    4418:	1445330e 	bge	r2,r17,58e8 <___vfprintf_internal_r+0x1afc>
    441c:	04000074 	movhi	r16,1
    4420:	8408f904 	addi	r16,r16,9188
    4424:	00c000c4 	movi	r3,3
    4428:	00bfdfc4 	movi	r2,-129
    442c:	d8c02a15 	stw	r3,168(sp)
    4430:	90a4703a 	and	r18,r18,r2
    4434:	d8c02e15 	stw	r3,184(sp)
    4438:	d8002915 	stw	zero,164(sp)
    443c:	d8003215 	stw	zero,200(sp)
    4440:	00003706 	br	4520 <___vfprintf_internal_r+0x734>
    4444:	94800214 	ori	r18,r18,8
    4448:	ac400007 	ldb	r17,0(r21)
    444c:	003ec806 	br	3f70 <__alt_data_end+0xff003f70>
    4450:	18c03fcc 	andi	r3,r3,255
    4454:	1806db1e 	bne	r3,zero,5fc4 <___vfprintf_internal_r+0x21d8>
    4458:	94800414 	ori	r18,r18,16
    445c:	9080080c 	andi	r2,r18,32
    4460:	1002d826 	beq	r2,zero,4fc4 <___vfprintf_internal_r+0x11d8>
    4464:	d9402d17 	ldw	r5,180(sp)
    4468:	d8c02917 	ldw	r3,164(sp)
    446c:	d8002785 	stb	zero,158(sp)
    4470:	28800204 	addi	r2,r5,8
    4474:	2cc00017 	ldw	r19,0(r5)
    4478:	2d800117 	ldw	r22,4(r5)
    447c:	18048f16 	blt	r3,zero,56bc <___vfprintf_internal_r+0x18d0>
    4480:	013fdfc4 	movi	r4,-129
    4484:	9d86b03a 	or	r3,r19,r22
    4488:	d8802d15 	stw	r2,180(sp)
    448c:	9124703a 	and	r18,r18,r4
    4490:	1802d91e 	bne	r3,zero,4ff8 <___vfprintf_internal_r+0x120c>
    4494:	d8c02917 	ldw	r3,164(sp)
    4498:	0039883a 	mov	fp,zero
    449c:	1805c326 	beq	r3,zero,5bac <___vfprintf_internal_r+0x1dc0>
    44a0:	0027883a 	mov	r19,zero
    44a4:	002d883a 	mov	r22,zero
    44a8:	dc001e04 	addi	r16,sp,120
    44ac:	9806d0fa 	srli	r3,r19,3
    44b0:	b008977a 	slli	r4,r22,29
    44b4:	b02cd0fa 	srli	r22,r22,3
    44b8:	9cc001cc 	andi	r19,r19,7
    44bc:	98800c04 	addi	r2,r19,48
    44c0:	843fffc4 	addi	r16,r16,-1
    44c4:	20e6b03a 	or	r19,r4,r3
    44c8:	80800005 	stb	r2,0(r16)
    44cc:	9d86b03a 	or	r3,r19,r22
    44d0:	183ff61e 	bne	r3,zero,44ac <__alt_data_end+0xff0044ac>
    44d4:	90c0004c 	andi	r3,r18,1
    44d8:	18013b26 	beq	r3,zero,49c8 <___vfprintf_internal_r+0xbdc>
    44dc:	10803fcc 	andi	r2,r2,255
    44e0:	1080201c 	xori	r2,r2,128
    44e4:	10bfe004 	addi	r2,r2,-128
    44e8:	00c00c04 	movi	r3,48
    44ec:	10c13626 	beq	r2,r3,49c8 <___vfprintf_internal_r+0xbdc>
    44f0:	80ffffc5 	stb	r3,-1(r16)
    44f4:	d8c02817 	ldw	r3,160(sp)
    44f8:	80bfffc4 	addi	r2,r16,-1
    44fc:	1021883a 	mov	r16,r2
    4500:	1887c83a 	sub	r3,r3,r2
    4504:	d8c02e15 	stw	r3,184(sp)
    4508:	d8802e17 	ldw	r2,184(sp)
    450c:	d9002917 	ldw	r4,164(sp)
    4510:	1100010e 	bge	r2,r4,4518 <___vfprintf_internal_r+0x72c>
    4514:	2005883a 	mov	r2,r4
    4518:	d8802a15 	stw	r2,168(sp)
    451c:	d8003215 	stw	zero,200(sp)
    4520:	e7003fcc 	andi	fp,fp,255
    4524:	e700201c 	xori	fp,fp,128
    4528:	e73fe004 	addi	fp,fp,-128
    452c:	e0000326 	beq	fp,zero,453c <___vfprintf_internal_r+0x750>
    4530:	d8c02a17 	ldw	r3,168(sp)
    4534:	18c00044 	addi	r3,r3,1
    4538:	d8c02a15 	stw	r3,168(sp)
    453c:	90c0008c 	andi	r3,r18,2
    4540:	d8c02b15 	stw	r3,172(sp)
    4544:	18000326 	beq	r3,zero,4554 <___vfprintf_internal_r+0x768>
    4548:	d8c02a17 	ldw	r3,168(sp)
    454c:	18c00084 	addi	r3,r3,2
    4550:	d8c02a15 	stw	r3,168(sp)
    4554:	90c0210c 	andi	r3,r18,132
    4558:	d8c03015 	stw	r3,192(sp)
    455c:	1801a31e 	bne	r3,zero,4bec <___vfprintf_internal_r+0xe00>
    4560:	d9003117 	ldw	r4,196(sp)
    4564:	d8c02a17 	ldw	r3,168(sp)
    4568:	20e7c83a 	sub	r19,r4,r3
    456c:	04c19f0e 	bge	zero,r19,4bec <___vfprintf_internal_r+0xe00>
    4570:	02400404 	movi	r9,16
    4574:	d8c02017 	ldw	r3,128(sp)
    4578:	d8801f17 	ldw	r2,124(sp)
    457c:	4cc50d0e 	bge	r9,r19,59b4 <___vfprintf_internal_r+0x1bc8>
    4580:	01400074 	movhi	r5,1
    4584:	29490c84 	addi	r5,r5,9266
    4588:	dc403b15 	stw	r17,236(sp)
    458c:	d9403515 	stw	r5,212(sp)
    4590:	9823883a 	mov	r17,r19
    4594:	482d883a 	mov	r22,r9
    4598:	9027883a 	mov	r19,r18
    459c:	070001c4 	movi	fp,7
    45a0:	8025883a 	mov	r18,r16
    45a4:	dc002c17 	ldw	r16,176(sp)
    45a8:	00000306 	br	45b8 <___vfprintf_internal_r+0x7cc>
    45ac:	8c7ffc04 	addi	r17,r17,-16
    45b0:	42000204 	addi	r8,r8,8
    45b4:	b440130e 	bge	r22,r17,4604 <___vfprintf_internal_r+0x818>
    45b8:	01000074 	movhi	r4,1
    45bc:	18c00404 	addi	r3,r3,16
    45c0:	10800044 	addi	r2,r2,1
    45c4:	21090c84 	addi	r4,r4,9266
    45c8:	41000015 	stw	r4,0(r8)
    45cc:	45800115 	stw	r22,4(r8)
    45d0:	d8c02015 	stw	r3,128(sp)
    45d4:	d8801f15 	stw	r2,124(sp)
    45d8:	e0bff40e 	bge	fp,r2,45ac <__alt_data_end+0xff0045ac>
    45dc:	d9801e04 	addi	r6,sp,120
    45e0:	b80b883a 	mov	r5,r23
    45e4:	8009883a 	mov	r4,r16
    45e8:	000ab880 	call	ab88 <__sprint_r>
    45ec:	103f011e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    45f0:	8c7ffc04 	addi	r17,r17,-16
    45f4:	d8c02017 	ldw	r3,128(sp)
    45f8:	d8801f17 	ldw	r2,124(sp)
    45fc:	da000404 	addi	r8,sp,16
    4600:	b47fed16 	blt	r22,r17,45b8 <__alt_data_end+0xff0045b8>
    4604:	9021883a 	mov	r16,r18
    4608:	9825883a 	mov	r18,r19
    460c:	8827883a 	mov	r19,r17
    4610:	dc403b17 	ldw	r17,236(sp)
    4614:	d9403517 	ldw	r5,212(sp)
    4618:	98c7883a 	add	r3,r19,r3
    461c:	10800044 	addi	r2,r2,1
    4620:	41400015 	stw	r5,0(r8)
    4624:	44c00115 	stw	r19,4(r8)
    4628:	d8c02015 	stw	r3,128(sp)
    462c:	d8801f15 	stw	r2,124(sp)
    4630:	010001c4 	movi	r4,7
    4634:	2082a316 	blt	r4,r2,50c4 <___vfprintf_internal_r+0x12d8>
    4638:	df002787 	ldb	fp,158(sp)
    463c:	42000204 	addi	r8,r8,8
    4640:	e0000c26 	beq	fp,zero,4674 <___vfprintf_internal_r+0x888>
    4644:	d8801f17 	ldw	r2,124(sp)
    4648:	d9002784 	addi	r4,sp,158
    464c:	18c00044 	addi	r3,r3,1
    4650:	10800044 	addi	r2,r2,1
    4654:	41000015 	stw	r4,0(r8)
    4658:	01000044 	movi	r4,1
    465c:	41000115 	stw	r4,4(r8)
    4660:	d8c02015 	stw	r3,128(sp)
    4664:	d8801f15 	stw	r2,124(sp)
    4668:	010001c4 	movi	r4,7
    466c:	20823c16 	blt	r4,r2,4f60 <___vfprintf_internal_r+0x1174>
    4670:	42000204 	addi	r8,r8,8
    4674:	d8802b17 	ldw	r2,172(sp)
    4678:	10000c26 	beq	r2,zero,46ac <___vfprintf_internal_r+0x8c0>
    467c:	d8801f17 	ldw	r2,124(sp)
    4680:	d9002704 	addi	r4,sp,156
    4684:	18c00084 	addi	r3,r3,2
    4688:	10800044 	addi	r2,r2,1
    468c:	41000015 	stw	r4,0(r8)
    4690:	01000084 	movi	r4,2
    4694:	41000115 	stw	r4,4(r8)
    4698:	d8c02015 	stw	r3,128(sp)
    469c:	d8801f15 	stw	r2,124(sp)
    46a0:	010001c4 	movi	r4,7
    46a4:	20823616 	blt	r4,r2,4f80 <___vfprintf_internal_r+0x1194>
    46a8:	42000204 	addi	r8,r8,8
    46ac:	d9003017 	ldw	r4,192(sp)
    46b0:	00802004 	movi	r2,128
    46b4:	20819926 	beq	r4,r2,4d1c <___vfprintf_internal_r+0xf30>
    46b8:	d9402917 	ldw	r5,164(sp)
    46bc:	d8802e17 	ldw	r2,184(sp)
    46c0:	28adc83a 	sub	r22,r5,r2
    46c4:	0580310e 	bge	zero,r22,478c <___vfprintf_internal_r+0x9a0>
    46c8:	07000404 	movi	fp,16
    46cc:	d8801f17 	ldw	r2,124(sp)
    46d0:	e584140e 	bge	fp,r22,5724 <___vfprintf_internal_r+0x1938>
    46d4:	01400074 	movhi	r5,1
    46d8:	29490884 	addi	r5,r5,9250
    46dc:	dc402915 	stw	r17,164(sp)
    46e0:	d9402b15 	stw	r5,172(sp)
    46e4:	b023883a 	mov	r17,r22
    46e8:	04c001c4 	movi	r19,7
    46ec:	a82d883a 	mov	r22,r21
    46f0:	902b883a 	mov	r21,r18
    46f4:	8025883a 	mov	r18,r16
    46f8:	dc002c17 	ldw	r16,176(sp)
    46fc:	00000306 	br	470c <___vfprintf_internal_r+0x920>
    4700:	8c7ffc04 	addi	r17,r17,-16
    4704:	42000204 	addi	r8,r8,8
    4708:	e440110e 	bge	fp,r17,4750 <___vfprintf_internal_r+0x964>
    470c:	18c00404 	addi	r3,r3,16
    4710:	10800044 	addi	r2,r2,1
    4714:	45000015 	stw	r20,0(r8)
    4718:	47000115 	stw	fp,4(r8)
    471c:	d8c02015 	stw	r3,128(sp)
    4720:	d8801f15 	stw	r2,124(sp)
    4724:	98bff60e 	bge	r19,r2,4700 <__alt_data_end+0xff004700>
    4728:	d9801e04 	addi	r6,sp,120
    472c:	b80b883a 	mov	r5,r23
    4730:	8009883a 	mov	r4,r16
    4734:	000ab880 	call	ab88 <__sprint_r>
    4738:	103eae1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    473c:	8c7ffc04 	addi	r17,r17,-16
    4740:	d8c02017 	ldw	r3,128(sp)
    4744:	d8801f17 	ldw	r2,124(sp)
    4748:	da000404 	addi	r8,sp,16
    474c:	e47fef16 	blt	fp,r17,470c <__alt_data_end+0xff00470c>
    4750:	9021883a 	mov	r16,r18
    4754:	a825883a 	mov	r18,r21
    4758:	b02b883a 	mov	r21,r22
    475c:	882d883a 	mov	r22,r17
    4760:	dc402917 	ldw	r17,164(sp)
    4764:	d9002b17 	ldw	r4,172(sp)
    4768:	1d87883a 	add	r3,r3,r22
    476c:	10800044 	addi	r2,r2,1
    4770:	41000015 	stw	r4,0(r8)
    4774:	45800115 	stw	r22,4(r8)
    4778:	d8c02015 	stw	r3,128(sp)
    477c:	d8801f15 	stw	r2,124(sp)
    4780:	010001c4 	movi	r4,7
    4784:	2081ee16 	blt	r4,r2,4f40 <___vfprintf_internal_r+0x1154>
    4788:	42000204 	addi	r8,r8,8
    478c:	9080400c 	andi	r2,r18,256
    4790:	1001181e 	bne	r2,zero,4bf4 <___vfprintf_internal_r+0xe08>
    4794:	d9402e17 	ldw	r5,184(sp)
    4798:	d8801f17 	ldw	r2,124(sp)
    479c:	44000015 	stw	r16,0(r8)
    47a0:	1947883a 	add	r3,r3,r5
    47a4:	10800044 	addi	r2,r2,1
    47a8:	41400115 	stw	r5,4(r8)
    47ac:	d8c02015 	stw	r3,128(sp)
    47b0:	d8801f15 	stw	r2,124(sp)
    47b4:	010001c4 	movi	r4,7
    47b8:	2081d316 	blt	r4,r2,4f08 <___vfprintf_internal_r+0x111c>
    47bc:	42000204 	addi	r8,r8,8
    47c0:	9480010c 	andi	r18,r18,4
    47c4:	90003226 	beq	r18,zero,4890 <___vfprintf_internal_r+0xaa4>
    47c8:	d9403117 	ldw	r5,196(sp)
    47cc:	d8802a17 	ldw	r2,168(sp)
    47d0:	28a1c83a 	sub	r16,r5,r2
    47d4:	04002e0e 	bge	zero,r16,4890 <___vfprintf_internal_r+0xaa4>
    47d8:	04400404 	movi	r17,16
    47dc:	d8801f17 	ldw	r2,124(sp)
    47e0:	8c04a20e 	bge	r17,r16,5a6c <___vfprintf_internal_r+0x1c80>
    47e4:	01400074 	movhi	r5,1
    47e8:	29490c84 	addi	r5,r5,9266
    47ec:	d9403515 	stw	r5,212(sp)
    47f0:	048001c4 	movi	r18,7
    47f4:	dcc02c17 	ldw	r19,176(sp)
    47f8:	00000306 	br	4808 <___vfprintf_internal_r+0xa1c>
    47fc:	843ffc04 	addi	r16,r16,-16
    4800:	42000204 	addi	r8,r8,8
    4804:	8c00130e 	bge	r17,r16,4854 <___vfprintf_internal_r+0xa68>
    4808:	01000074 	movhi	r4,1
    480c:	18c00404 	addi	r3,r3,16
    4810:	10800044 	addi	r2,r2,1
    4814:	21090c84 	addi	r4,r4,9266
    4818:	41000015 	stw	r4,0(r8)
    481c:	44400115 	stw	r17,4(r8)
    4820:	d8c02015 	stw	r3,128(sp)
    4824:	d8801f15 	stw	r2,124(sp)
    4828:	90bff40e 	bge	r18,r2,47fc <__alt_data_end+0xff0047fc>
    482c:	d9801e04 	addi	r6,sp,120
    4830:	b80b883a 	mov	r5,r23
    4834:	9809883a 	mov	r4,r19
    4838:	000ab880 	call	ab88 <__sprint_r>
    483c:	103e6d1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    4840:	843ffc04 	addi	r16,r16,-16
    4844:	d8c02017 	ldw	r3,128(sp)
    4848:	d8801f17 	ldw	r2,124(sp)
    484c:	da000404 	addi	r8,sp,16
    4850:	8c3fed16 	blt	r17,r16,4808 <__alt_data_end+0xff004808>
    4854:	d9403517 	ldw	r5,212(sp)
    4858:	1c07883a 	add	r3,r3,r16
    485c:	10800044 	addi	r2,r2,1
    4860:	41400015 	stw	r5,0(r8)
    4864:	44000115 	stw	r16,4(r8)
    4868:	d8c02015 	stw	r3,128(sp)
    486c:	d8801f15 	stw	r2,124(sp)
    4870:	010001c4 	movi	r4,7
    4874:	2080060e 	bge	r4,r2,4890 <___vfprintf_internal_r+0xaa4>
    4878:	d9002c17 	ldw	r4,176(sp)
    487c:	d9801e04 	addi	r6,sp,120
    4880:	b80b883a 	mov	r5,r23
    4884:	000ab880 	call	ab88 <__sprint_r>
    4888:	103e5a1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    488c:	d8c02017 	ldw	r3,128(sp)
    4890:	d8803117 	ldw	r2,196(sp)
    4894:	d9002a17 	ldw	r4,168(sp)
    4898:	1100010e 	bge	r2,r4,48a0 <___vfprintf_internal_r+0xab4>
    489c:	2005883a 	mov	r2,r4
    48a0:	d9402f17 	ldw	r5,188(sp)
    48a4:	288b883a 	add	r5,r5,r2
    48a8:	d9402f15 	stw	r5,188(sp)
    48ac:	18019e1e 	bne	r3,zero,4f28 <___vfprintf_internal_r+0x113c>
    48b0:	a8800007 	ldb	r2,0(r21)
    48b4:	d8001f15 	stw	zero,124(sp)
    48b8:	da000404 	addi	r8,sp,16
    48bc:	103d851e 	bne	r2,zero,3ed4 <__alt_data_end+0xff003ed4>
    48c0:	a821883a 	mov	r16,r21
    48c4:	003d9b06 	br	3f34 <__alt_data_end+0xff003f34>
    48c8:	18c03fcc 	andi	r3,r3,255
    48cc:	1805c11e 	bne	r3,zero,5fd4 <___vfprintf_internal_r+0x21e8>
    48d0:	94800414 	ori	r18,r18,16
    48d4:	9080080c 	andi	r2,r18,32
    48d8:	10020c26 	beq	r2,zero,510c <___vfprintf_internal_r+0x1320>
    48dc:	d8802d17 	ldw	r2,180(sp)
    48e0:	d9002917 	ldw	r4,164(sp)
    48e4:	d8002785 	stb	zero,158(sp)
    48e8:	10c00204 	addi	r3,r2,8
    48ec:	14c00017 	ldw	r19,0(r2)
    48f0:	15800117 	ldw	r22,4(r2)
    48f4:	20040f16 	blt	r4,zero,5934 <___vfprintf_internal_r+0x1b48>
    48f8:	013fdfc4 	movi	r4,-129
    48fc:	9d84b03a 	or	r2,r19,r22
    4900:	d8c02d15 	stw	r3,180(sp)
    4904:	9124703a 	and	r18,r18,r4
    4908:	0039883a 	mov	fp,zero
    490c:	103e891e 	bne	r2,zero,4334 <__alt_data_end+0xff004334>
    4910:	d9002917 	ldw	r4,164(sp)
    4914:	2002c11e 	bne	r4,zero,541c <___vfprintf_internal_r+0x1630>
    4918:	d8002915 	stw	zero,164(sp)
    491c:	d8002e15 	stw	zero,184(sp)
    4920:	dc001e04 	addi	r16,sp,120
    4924:	003ef806 	br	4508 <__alt_data_end+0xff004508>
    4928:	18c03fcc 	andi	r3,r3,255
    492c:	18059d1e 	bne	r3,zero,5fa4 <___vfprintf_internal_r+0x21b8>
    4930:	01400074 	movhi	r5,1
    4934:	2948fc04 	addi	r5,r5,9200
    4938:	d9403915 	stw	r5,228(sp)
    493c:	9080080c 	andi	r2,r18,32
    4940:	10005226 	beq	r2,zero,4a8c <___vfprintf_internal_r+0xca0>
    4944:	d8802d17 	ldw	r2,180(sp)
    4948:	14c00017 	ldw	r19,0(r2)
    494c:	15800117 	ldw	r22,4(r2)
    4950:	10800204 	addi	r2,r2,8
    4954:	d8802d15 	stw	r2,180(sp)
    4958:	9080004c 	andi	r2,r18,1
    495c:	10019026 	beq	r2,zero,4fa0 <___vfprintf_internal_r+0x11b4>
    4960:	9d84b03a 	or	r2,r19,r22
    4964:	10036926 	beq	r2,zero,570c <___vfprintf_internal_r+0x1920>
    4968:	d8c02917 	ldw	r3,164(sp)
    496c:	00800c04 	movi	r2,48
    4970:	d8802705 	stb	r2,156(sp)
    4974:	dc402745 	stb	r17,157(sp)
    4978:	d8002785 	stb	zero,158(sp)
    497c:	90800094 	ori	r2,r18,2
    4980:	18045d16 	blt	r3,zero,5af8 <___vfprintf_internal_r+0x1d0c>
    4984:	00bfdfc4 	movi	r2,-129
    4988:	90a4703a 	and	r18,r18,r2
    498c:	94800094 	ori	r18,r18,2
    4990:	0039883a 	mov	fp,zero
    4994:	d9003917 	ldw	r4,228(sp)
    4998:	dc001e04 	addi	r16,sp,120
    499c:	988003cc 	andi	r2,r19,15
    49a0:	b006973a 	slli	r3,r22,28
    49a4:	2085883a 	add	r2,r4,r2
    49a8:	9826d13a 	srli	r19,r19,4
    49ac:	10800003 	ldbu	r2,0(r2)
    49b0:	b02cd13a 	srli	r22,r22,4
    49b4:	843fffc4 	addi	r16,r16,-1
    49b8:	1ce6b03a 	or	r19,r3,r19
    49bc:	80800005 	stb	r2,0(r16)
    49c0:	9d84b03a 	or	r2,r19,r22
    49c4:	103ff51e 	bne	r2,zero,499c <__alt_data_end+0xff00499c>
    49c8:	d8c02817 	ldw	r3,160(sp)
    49cc:	1c07c83a 	sub	r3,r3,r16
    49d0:	d8c02e15 	stw	r3,184(sp)
    49d4:	003ecc06 	br	4508 <__alt_data_end+0xff004508>
    49d8:	18c03fcc 	andi	r3,r3,255
    49dc:	183e9f26 	beq	r3,zero,445c <__alt_data_end+0xff00445c>
    49e0:	d9c02785 	stb	r7,158(sp)
    49e4:	003e9d06 	br	445c <__alt_data_end+0xff00445c>
    49e8:	00c00044 	movi	r3,1
    49ec:	01c00ac4 	movi	r7,43
    49f0:	ac400007 	ldb	r17,0(r21)
    49f4:	003d5e06 	br	3f70 <__alt_data_end+0xff003f70>
    49f8:	94800814 	ori	r18,r18,32
    49fc:	ac400007 	ldb	r17,0(r21)
    4a00:	003d5b06 	br	3f70 <__alt_data_end+0xff003f70>
    4a04:	d8c02d17 	ldw	r3,180(sp)
    4a08:	d8002785 	stb	zero,158(sp)
    4a0c:	1c000017 	ldw	r16,0(r3)
    4a10:	1cc00104 	addi	r19,r3,4
    4a14:	80041926 	beq	r16,zero,5a7c <___vfprintf_internal_r+0x1c90>
    4a18:	d9002917 	ldw	r4,164(sp)
    4a1c:	2003d016 	blt	r4,zero,5960 <___vfprintf_internal_r+0x1b74>
    4a20:	200d883a 	mov	r6,r4
    4a24:	000b883a 	mov	r5,zero
    4a28:	8009883a 	mov	r4,r16
    4a2c:	da003d15 	stw	r8,244(sp)
    4a30:	0008df00 	call	8df0 <memchr>
    4a34:	da003d17 	ldw	r8,244(sp)
    4a38:	10045426 	beq	r2,zero,5b8c <___vfprintf_internal_r+0x1da0>
    4a3c:	1405c83a 	sub	r2,r2,r16
    4a40:	d8802e15 	stw	r2,184(sp)
    4a44:	1003cc16 	blt	r2,zero,5978 <___vfprintf_internal_r+0x1b8c>
    4a48:	df002783 	ldbu	fp,158(sp)
    4a4c:	d8802a15 	stw	r2,168(sp)
    4a50:	dcc02d15 	stw	r19,180(sp)
    4a54:	d8002915 	stw	zero,164(sp)
    4a58:	d8003215 	stw	zero,200(sp)
    4a5c:	003eb006 	br	4520 <__alt_data_end+0xff004520>
    4a60:	18c03fcc 	andi	r3,r3,255
    4a64:	183f9b26 	beq	r3,zero,48d4 <__alt_data_end+0xff0048d4>
    4a68:	d9c02785 	stb	r7,158(sp)
    4a6c:	003f9906 	br	48d4 <__alt_data_end+0xff0048d4>
    4a70:	18c03fcc 	andi	r3,r3,255
    4a74:	1805551e 	bne	r3,zero,5fcc <___vfprintf_internal_r+0x21e0>
    4a78:	01400074 	movhi	r5,1
    4a7c:	29490104 	addi	r5,r5,9220
    4a80:	d9403915 	stw	r5,228(sp)
    4a84:	9080080c 	andi	r2,r18,32
    4a88:	103fae1e 	bne	r2,zero,4944 <__alt_data_end+0xff004944>
    4a8c:	9080040c 	andi	r2,r18,16
    4a90:	1002de26 	beq	r2,zero,560c <___vfprintf_internal_r+0x1820>
    4a94:	d8c02d17 	ldw	r3,180(sp)
    4a98:	002d883a 	mov	r22,zero
    4a9c:	1cc00017 	ldw	r19,0(r3)
    4aa0:	18c00104 	addi	r3,r3,4
    4aa4:	d8c02d15 	stw	r3,180(sp)
    4aa8:	003fab06 	br	4958 <__alt_data_end+0xff004958>
    4aac:	38803fcc 	andi	r2,r7,255
    4ab0:	1080201c 	xori	r2,r2,128
    4ab4:	10bfe004 	addi	r2,r2,-128
    4ab8:	1002d21e 	bne	r2,zero,5604 <___vfprintf_internal_r+0x1818>
    4abc:	00c00044 	movi	r3,1
    4ac0:	01c00804 	movi	r7,32
    4ac4:	ac400007 	ldb	r17,0(r21)
    4ac8:	003d2906 	br	3f70 <__alt_data_end+0xff003f70>
    4acc:	94800054 	ori	r18,r18,1
    4ad0:	ac400007 	ldb	r17,0(r21)
    4ad4:	003d2606 	br	3f70 <__alt_data_end+0xff003f70>
    4ad8:	18c03fcc 	andi	r3,r3,255
    4adc:	183e0526 	beq	r3,zero,42f4 <__alt_data_end+0xff0042f4>
    4ae0:	d9c02785 	stb	r7,158(sp)
    4ae4:	003e0306 	br	42f4 <__alt_data_end+0xff0042f4>
    4ae8:	94801014 	ori	r18,r18,64
    4aec:	ac400007 	ldb	r17,0(r21)
    4af0:	003d1f06 	br	3f70 <__alt_data_end+0xff003f70>
    4af4:	ac400007 	ldb	r17,0(r21)
    4af8:	8a438726 	beq	r17,r9,5918 <___vfprintf_internal_r+0x1b2c>
    4afc:	94800414 	ori	r18,r18,16
    4b00:	003d1b06 	br	3f70 <__alt_data_end+0xff003f70>
    4b04:	18c03fcc 	andi	r3,r3,255
    4b08:	1805341e 	bne	r3,zero,5fdc <___vfprintf_internal_r+0x21f0>
    4b0c:	9080080c 	andi	r2,r18,32
    4b10:	1002cd26 	beq	r2,zero,5648 <___vfprintf_internal_r+0x185c>
    4b14:	d9402d17 	ldw	r5,180(sp)
    4b18:	d9002f17 	ldw	r4,188(sp)
    4b1c:	28800017 	ldw	r2,0(r5)
    4b20:	2007d7fa 	srai	r3,r4,31
    4b24:	29400104 	addi	r5,r5,4
    4b28:	d9402d15 	stw	r5,180(sp)
    4b2c:	11000015 	stw	r4,0(r2)
    4b30:	10c00115 	stw	r3,4(r2)
    4b34:	003ce506 	br	3ecc <__alt_data_end+0xff003ecc>
    4b38:	d8c02d17 	ldw	r3,180(sp)
    4b3c:	d9002d17 	ldw	r4,180(sp)
    4b40:	d8002785 	stb	zero,158(sp)
    4b44:	18800017 	ldw	r2,0(r3)
    4b48:	21000104 	addi	r4,r4,4
    4b4c:	00c00044 	movi	r3,1
    4b50:	d8c02a15 	stw	r3,168(sp)
    4b54:	d8801405 	stb	r2,80(sp)
    4b58:	d9002d15 	stw	r4,180(sp)
    4b5c:	d8c02e15 	stw	r3,184(sp)
    4b60:	d8002915 	stw	zero,164(sp)
    4b64:	d8003215 	stw	zero,200(sp)
    4b68:	dc001404 	addi	r16,sp,80
    4b6c:	0039883a 	mov	fp,zero
    4b70:	003e7206 	br	453c <__alt_data_end+0xff00453c>
    4b74:	01000074 	movhi	r4,1
    4b78:	21090104 	addi	r4,r4,9220
    4b7c:	0039883a 	mov	fp,zero
    4b80:	d9003915 	stw	r4,228(sp)
    4b84:	04401e04 	movi	r17,120
    4b88:	003f8206 	br	4994 <__alt_data_end+0xff004994>
    4b8c:	18c03fcc 	andi	r3,r3,255
    4b90:	1805061e 	bne	r3,zero,5fac <___vfprintf_internal_r+0x21c0>
    4b94:	883d9126 	beq	r17,zero,41dc <__alt_data_end+0xff0041dc>
    4b98:	00c00044 	movi	r3,1
    4b9c:	d8c02a15 	stw	r3,168(sp)
    4ba0:	dc401405 	stb	r17,80(sp)
    4ba4:	d8002785 	stb	zero,158(sp)
    4ba8:	003fec06 	br	4b5c <__alt_data_end+0xff004b5c>
    4bac:	01400074 	movhi	r5,1
    4bb0:	29490104 	addi	r5,r5,9220
    4bb4:	d9403915 	stw	r5,228(sp)
    4bb8:	d8c02d15 	stw	r3,180(sp)
    4bbc:	1025883a 	mov	r18,r2
    4bc0:	04401e04 	movi	r17,120
    4bc4:	9d84b03a 	or	r2,r19,r22
    4bc8:	1000fc1e 	bne	r2,zero,4fbc <___vfprintf_internal_r+0x11d0>
    4bcc:	0039883a 	mov	fp,zero
    4bd0:	00800084 	movi	r2,2
    4bd4:	10803fcc 	andi	r2,r2,255
    4bd8:	00c00044 	movi	r3,1
    4bdc:	10c20f26 	beq	r2,r3,541c <___vfprintf_internal_r+0x1630>
    4be0:	00c00084 	movi	r3,2
    4be4:	10fd6326 	beq	r2,r3,4174 <__alt_data_end+0xff004174>
    4be8:	003e2d06 	br	44a0 <__alt_data_end+0xff0044a0>
    4bec:	d8c02017 	ldw	r3,128(sp)
    4bf0:	003e9306 	br	4640 <__alt_data_end+0xff004640>
    4bf4:	00801944 	movi	r2,101
    4bf8:	14407e0e 	bge	r2,r17,4df4 <___vfprintf_internal_r+0x1008>
    4bfc:	d9003617 	ldw	r4,216(sp)
    4c00:	d9403817 	ldw	r5,224(sp)
    4c04:	000d883a 	mov	r6,zero
    4c08:	000f883a 	mov	r7,zero
    4c0c:	d8c03c15 	stw	r3,240(sp)
    4c10:	da003d15 	stw	r8,244(sp)
    4c14:	000e8000 	call	e800 <__eqdf2>
    4c18:	d8c03c17 	ldw	r3,240(sp)
    4c1c:	da003d17 	ldw	r8,244(sp)
    4c20:	1000f71e 	bne	r2,zero,5000 <___vfprintf_internal_r+0x1214>
    4c24:	d8801f17 	ldw	r2,124(sp)
    4c28:	01000074 	movhi	r4,1
    4c2c:	21090804 	addi	r4,r4,9248
    4c30:	18c00044 	addi	r3,r3,1
    4c34:	10800044 	addi	r2,r2,1
    4c38:	41000015 	stw	r4,0(r8)
    4c3c:	01000044 	movi	r4,1
    4c40:	41000115 	stw	r4,4(r8)
    4c44:	d8c02015 	stw	r3,128(sp)
    4c48:	d8801f15 	stw	r2,124(sp)
    4c4c:	010001c4 	movi	r4,7
    4c50:	2082b816 	blt	r4,r2,5734 <___vfprintf_internal_r+0x1948>
    4c54:	42000204 	addi	r8,r8,8
    4c58:	d8802617 	ldw	r2,152(sp)
    4c5c:	d9403317 	ldw	r5,204(sp)
    4c60:	11400216 	blt	r2,r5,4c6c <___vfprintf_internal_r+0xe80>
    4c64:	9080004c 	andi	r2,r18,1
    4c68:	103ed526 	beq	r2,zero,47c0 <__alt_data_end+0xff0047c0>
    4c6c:	d8803717 	ldw	r2,220(sp)
    4c70:	d9003417 	ldw	r4,208(sp)
    4c74:	d9403717 	ldw	r5,220(sp)
    4c78:	1887883a 	add	r3,r3,r2
    4c7c:	d8801f17 	ldw	r2,124(sp)
    4c80:	41000015 	stw	r4,0(r8)
    4c84:	41400115 	stw	r5,4(r8)
    4c88:	10800044 	addi	r2,r2,1
    4c8c:	d8c02015 	stw	r3,128(sp)
    4c90:	d8801f15 	stw	r2,124(sp)
    4c94:	010001c4 	movi	r4,7
    4c98:	20832916 	blt	r4,r2,5940 <___vfprintf_internal_r+0x1b54>
    4c9c:	42000204 	addi	r8,r8,8
    4ca0:	d8803317 	ldw	r2,204(sp)
    4ca4:	143fffc4 	addi	r16,r2,-1
    4ca8:	043ec50e 	bge	zero,r16,47c0 <__alt_data_end+0xff0047c0>
    4cac:	04400404 	movi	r17,16
    4cb0:	d8801f17 	ldw	r2,124(sp)
    4cb4:	8c00880e 	bge	r17,r16,4ed8 <___vfprintf_internal_r+0x10ec>
    4cb8:	01400074 	movhi	r5,1
    4cbc:	29490884 	addi	r5,r5,9250
    4cc0:	d9402b15 	stw	r5,172(sp)
    4cc4:	058001c4 	movi	r22,7
    4cc8:	dcc02c17 	ldw	r19,176(sp)
    4ccc:	00000306 	br	4cdc <___vfprintf_internal_r+0xef0>
    4cd0:	42000204 	addi	r8,r8,8
    4cd4:	843ffc04 	addi	r16,r16,-16
    4cd8:	8c00820e 	bge	r17,r16,4ee4 <___vfprintf_internal_r+0x10f8>
    4cdc:	18c00404 	addi	r3,r3,16
    4ce0:	10800044 	addi	r2,r2,1
    4ce4:	45000015 	stw	r20,0(r8)
    4ce8:	44400115 	stw	r17,4(r8)
    4cec:	d8c02015 	stw	r3,128(sp)
    4cf0:	d8801f15 	stw	r2,124(sp)
    4cf4:	b0bff60e 	bge	r22,r2,4cd0 <__alt_data_end+0xff004cd0>
    4cf8:	d9801e04 	addi	r6,sp,120
    4cfc:	b80b883a 	mov	r5,r23
    4d00:	9809883a 	mov	r4,r19
    4d04:	000ab880 	call	ab88 <__sprint_r>
    4d08:	103d3a1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    4d0c:	d8c02017 	ldw	r3,128(sp)
    4d10:	d8801f17 	ldw	r2,124(sp)
    4d14:	da000404 	addi	r8,sp,16
    4d18:	003fee06 	br	4cd4 <__alt_data_end+0xff004cd4>
    4d1c:	d9403117 	ldw	r5,196(sp)
    4d20:	d8802a17 	ldw	r2,168(sp)
    4d24:	28adc83a 	sub	r22,r5,r2
    4d28:	05be630e 	bge	zero,r22,46b8 <__alt_data_end+0xff0046b8>
    4d2c:	07000404 	movi	fp,16
    4d30:	d8801f17 	ldw	r2,124(sp)
    4d34:	e5838f0e 	bge	fp,r22,5b74 <___vfprintf_internal_r+0x1d88>
    4d38:	01400074 	movhi	r5,1
    4d3c:	29490884 	addi	r5,r5,9250
    4d40:	dc403015 	stw	r17,192(sp)
    4d44:	d9402b15 	stw	r5,172(sp)
    4d48:	b023883a 	mov	r17,r22
    4d4c:	04c001c4 	movi	r19,7
    4d50:	a82d883a 	mov	r22,r21
    4d54:	902b883a 	mov	r21,r18
    4d58:	8025883a 	mov	r18,r16
    4d5c:	dc002c17 	ldw	r16,176(sp)
    4d60:	00000306 	br	4d70 <___vfprintf_internal_r+0xf84>
    4d64:	8c7ffc04 	addi	r17,r17,-16
    4d68:	42000204 	addi	r8,r8,8
    4d6c:	e440110e 	bge	fp,r17,4db4 <___vfprintf_internal_r+0xfc8>
    4d70:	18c00404 	addi	r3,r3,16
    4d74:	10800044 	addi	r2,r2,1
    4d78:	45000015 	stw	r20,0(r8)
    4d7c:	47000115 	stw	fp,4(r8)
    4d80:	d8c02015 	stw	r3,128(sp)
    4d84:	d8801f15 	stw	r2,124(sp)
    4d88:	98bff60e 	bge	r19,r2,4d64 <__alt_data_end+0xff004d64>
    4d8c:	d9801e04 	addi	r6,sp,120
    4d90:	b80b883a 	mov	r5,r23
    4d94:	8009883a 	mov	r4,r16
    4d98:	000ab880 	call	ab88 <__sprint_r>
    4d9c:	103d151e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    4da0:	8c7ffc04 	addi	r17,r17,-16
    4da4:	d8c02017 	ldw	r3,128(sp)
    4da8:	d8801f17 	ldw	r2,124(sp)
    4dac:	da000404 	addi	r8,sp,16
    4db0:	e47fef16 	blt	fp,r17,4d70 <__alt_data_end+0xff004d70>
    4db4:	9021883a 	mov	r16,r18
    4db8:	a825883a 	mov	r18,r21
    4dbc:	b02b883a 	mov	r21,r22
    4dc0:	882d883a 	mov	r22,r17
    4dc4:	dc403017 	ldw	r17,192(sp)
    4dc8:	d9002b17 	ldw	r4,172(sp)
    4dcc:	1d87883a 	add	r3,r3,r22
    4dd0:	10800044 	addi	r2,r2,1
    4dd4:	41000015 	stw	r4,0(r8)
    4dd8:	45800115 	stw	r22,4(r8)
    4ddc:	d8c02015 	stw	r3,128(sp)
    4de0:	d8801f15 	stw	r2,124(sp)
    4de4:	010001c4 	movi	r4,7
    4de8:	20818e16 	blt	r4,r2,5424 <___vfprintf_internal_r+0x1638>
    4dec:	42000204 	addi	r8,r8,8
    4df0:	003e3106 	br	46b8 <__alt_data_end+0xff0046b8>
    4df4:	d9403317 	ldw	r5,204(sp)
    4df8:	00800044 	movi	r2,1
    4dfc:	18c00044 	addi	r3,r3,1
    4e00:	1141530e 	bge	r2,r5,5350 <___vfprintf_internal_r+0x1564>
    4e04:	dc401f17 	ldw	r17,124(sp)
    4e08:	00800044 	movi	r2,1
    4e0c:	40800115 	stw	r2,4(r8)
    4e10:	8c400044 	addi	r17,r17,1
    4e14:	44000015 	stw	r16,0(r8)
    4e18:	d8c02015 	stw	r3,128(sp)
    4e1c:	dc401f15 	stw	r17,124(sp)
    4e20:	008001c4 	movi	r2,7
    4e24:	14416b16 	blt	r2,r17,53d4 <___vfprintf_internal_r+0x15e8>
    4e28:	42000204 	addi	r8,r8,8
    4e2c:	d8803717 	ldw	r2,220(sp)
    4e30:	d9003417 	ldw	r4,208(sp)
    4e34:	8c400044 	addi	r17,r17,1
    4e38:	10c7883a 	add	r3,r2,r3
    4e3c:	40800115 	stw	r2,4(r8)
    4e40:	41000015 	stw	r4,0(r8)
    4e44:	d8c02015 	stw	r3,128(sp)
    4e48:	dc401f15 	stw	r17,124(sp)
    4e4c:	008001c4 	movi	r2,7
    4e50:	14416916 	blt	r2,r17,53f8 <___vfprintf_internal_r+0x160c>
    4e54:	45800204 	addi	r22,r8,8
    4e58:	d9003617 	ldw	r4,216(sp)
    4e5c:	d9403817 	ldw	r5,224(sp)
    4e60:	000d883a 	mov	r6,zero
    4e64:	000f883a 	mov	r7,zero
    4e68:	d8c03c15 	stw	r3,240(sp)
    4e6c:	000e8000 	call	e800 <__eqdf2>
    4e70:	d8c03c17 	ldw	r3,240(sp)
    4e74:	1000bc26 	beq	r2,zero,5168 <___vfprintf_internal_r+0x137c>
    4e78:	d9403317 	ldw	r5,204(sp)
    4e7c:	84000044 	addi	r16,r16,1
    4e80:	8c400044 	addi	r17,r17,1
    4e84:	28bfffc4 	addi	r2,r5,-1
    4e88:	1887883a 	add	r3,r3,r2
    4e8c:	b0800115 	stw	r2,4(r22)
    4e90:	b4000015 	stw	r16,0(r22)
    4e94:	d8c02015 	stw	r3,128(sp)
    4e98:	dc401f15 	stw	r17,124(sp)
    4e9c:	008001c4 	movi	r2,7
    4ea0:	14414316 	blt	r2,r17,53b0 <___vfprintf_internal_r+0x15c4>
    4ea4:	b5800204 	addi	r22,r22,8
    4ea8:	d9003a17 	ldw	r4,232(sp)
    4eac:	df0022c4 	addi	fp,sp,139
    4eb0:	8c400044 	addi	r17,r17,1
    4eb4:	20c7883a 	add	r3,r4,r3
    4eb8:	b7000015 	stw	fp,0(r22)
    4ebc:	b1000115 	stw	r4,4(r22)
    4ec0:	d8c02015 	stw	r3,128(sp)
    4ec4:	dc401f15 	stw	r17,124(sp)
    4ec8:	008001c4 	movi	r2,7
    4ecc:	14400e16 	blt	r2,r17,4f08 <___vfprintf_internal_r+0x111c>
    4ed0:	b2000204 	addi	r8,r22,8
    4ed4:	003e3a06 	br	47c0 <__alt_data_end+0xff0047c0>
    4ed8:	01000074 	movhi	r4,1
    4edc:	21090884 	addi	r4,r4,9250
    4ee0:	d9002b15 	stw	r4,172(sp)
    4ee4:	d9002b17 	ldw	r4,172(sp)
    4ee8:	1c07883a 	add	r3,r3,r16
    4eec:	44000115 	stw	r16,4(r8)
    4ef0:	41000015 	stw	r4,0(r8)
    4ef4:	10800044 	addi	r2,r2,1
    4ef8:	d8c02015 	stw	r3,128(sp)
    4efc:	d8801f15 	stw	r2,124(sp)
    4f00:	010001c4 	movi	r4,7
    4f04:	20be2d0e 	bge	r4,r2,47bc <__alt_data_end+0xff0047bc>
    4f08:	d9002c17 	ldw	r4,176(sp)
    4f0c:	d9801e04 	addi	r6,sp,120
    4f10:	b80b883a 	mov	r5,r23
    4f14:	000ab880 	call	ab88 <__sprint_r>
    4f18:	103cb61e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    4f1c:	d8c02017 	ldw	r3,128(sp)
    4f20:	da000404 	addi	r8,sp,16
    4f24:	003e2606 	br	47c0 <__alt_data_end+0xff0047c0>
    4f28:	d9002c17 	ldw	r4,176(sp)
    4f2c:	d9801e04 	addi	r6,sp,120
    4f30:	b80b883a 	mov	r5,r23
    4f34:	000ab880 	call	ab88 <__sprint_r>
    4f38:	103e5d26 	beq	r2,zero,48b0 <__alt_data_end+0xff0048b0>
    4f3c:	003cad06 	br	41f4 <__alt_data_end+0xff0041f4>
    4f40:	d9002c17 	ldw	r4,176(sp)
    4f44:	d9801e04 	addi	r6,sp,120
    4f48:	b80b883a 	mov	r5,r23
    4f4c:	000ab880 	call	ab88 <__sprint_r>
    4f50:	103ca81e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    4f54:	d8c02017 	ldw	r3,128(sp)
    4f58:	da000404 	addi	r8,sp,16
    4f5c:	003e0b06 	br	478c <__alt_data_end+0xff00478c>
    4f60:	d9002c17 	ldw	r4,176(sp)
    4f64:	d9801e04 	addi	r6,sp,120
    4f68:	b80b883a 	mov	r5,r23
    4f6c:	000ab880 	call	ab88 <__sprint_r>
    4f70:	103ca01e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    4f74:	d8c02017 	ldw	r3,128(sp)
    4f78:	da000404 	addi	r8,sp,16
    4f7c:	003dbd06 	br	4674 <__alt_data_end+0xff004674>
    4f80:	d9002c17 	ldw	r4,176(sp)
    4f84:	d9801e04 	addi	r6,sp,120
    4f88:	b80b883a 	mov	r5,r23
    4f8c:	000ab880 	call	ab88 <__sprint_r>
    4f90:	103c981e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    4f94:	d8c02017 	ldw	r3,128(sp)
    4f98:	da000404 	addi	r8,sp,16
    4f9c:	003dc306 	br	46ac <__alt_data_end+0xff0046ac>
    4fa0:	d8802917 	ldw	r2,164(sp)
    4fa4:	d8002785 	stb	zero,158(sp)
    4fa8:	103f0616 	blt	r2,zero,4bc4 <__alt_data_end+0xff004bc4>
    4fac:	00ffdfc4 	movi	r3,-129
    4fb0:	9d84b03a 	or	r2,r19,r22
    4fb4:	90e4703a 	and	r18,r18,r3
    4fb8:	103c6b26 	beq	r2,zero,4168 <__alt_data_end+0xff004168>
    4fbc:	0039883a 	mov	fp,zero
    4fc0:	003e7406 	br	4994 <__alt_data_end+0xff004994>
    4fc4:	9080040c 	andi	r2,r18,16
    4fc8:	1001b326 	beq	r2,zero,5698 <___vfprintf_internal_r+0x18ac>
    4fcc:	d9002d17 	ldw	r4,180(sp)
    4fd0:	d9402917 	ldw	r5,164(sp)
    4fd4:	d8002785 	stb	zero,158(sp)
    4fd8:	20800104 	addi	r2,r4,4
    4fdc:	24c00017 	ldw	r19,0(r4)
    4fe0:	002d883a 	mov	r22,zero
    4fe4:	2801b516 	blt	r5,zero,56bc <___vfprintf_internal_r+0x18d0>
    4fe8:	00ffdfc4 	movi	r3,-129
    4fec:	d8802d15 	stw	r2,180(sp)
    4ff0:	90e4703a 	and	r18,r18,r3
    4ff4:	983d2726 	beq	r19,zero,4494 <__alt_data_end+0xff004494>
    4ff8:	0039883a 	mov	fp,zero
    4ffc:	003d2a06 	br	44a8 <__alt_data_end+0xff0044a8>
    5000:	dc402617 	ldw	r17,152(sp)
    5004:	0441d30e 	bge	zero,r17,5754 <___vfprintf_internal_r+0x1968>
    5008:	dc403217 	ldw	r17,200(sp)
    500c:	d8803317 	ldw	r2,204(sp)
    5010:	1440010e 	bge	r2,r17,5018 <___vfprintf_internal_r+0x122c>
    5014:	1023883a 	mov	r17,r2
    5018:	04400a0e 	bge	zero,r17,5044 <___vfprintf_internal_r+0x1258>
    501c:	d8801f17 	ldw	r2,124(sp)
    5020:	1c47883a 	add	r3,r3,r17
    5024:	44000015 	stw	r16,0(r8)
    5028:	10800044 	addi	r2,r2,1
    502c:	44400115 	stw	r17,4(r8)
    5030:	d8c02015 	stw	r3,128(sp)
    5034:	d8801f15 	stw	r2,124(sp)
    5038:	010001c4 	movi	r4,7
    503c:	20826516 	blt	r4,r2,59d4 <___vfprintf_internal_r+0x1be8>
    5040:	42000204 	addi	r8,r8,8
    5044:	88026116 	blt	r17,zero,59cc <___vfprintf_internal_r+0x1be0>
    5048:	d9003217 	ldw	r4,200(sp)
    504c:	2463c83a 	sub	r17,r4,r17
    5050:	04407b0e 	bge	zero,r17,5240 <___vfprintf_internal_r+0x1454>
    5054:	05800404 	movi	r22,16
    5058:	d8801f17 	ldw	r2,124(sp)
    505c:	b4419d0e 	bge	r22,r17,56d4 <___vfprintf_internal_r+0x18e8>
    5060:	01000074 	movhi	r4,1
    5064:	21090884 	addi	r4,r4,9250
    5068:	d9002b15 	stw	r4,172(sp)
    506c:	070001c4 	movi	fp,7
    5070:	dcc02c17 	ldw	r19,176(sp)
    5074:	00000306 	br	5084 <___vfprintf_internal_r+0x1298>
    5078:	42000204 	addi	r8,r8,8
    507c:	8c7ffc04 	addi	r17,r17,-16
    5080:	b441970e 	bge	r22,r17,56e0 <___vfprintf_internal_r+0x18f4>
    5084:	18c00404 	addi	r3,r3,16
    5088:	10800044 	addi	r2,r2,1
    508c:	45000015 	stw	r20,0(r8)
    5090:	45800115 	stw	r22,4(r8)
    5094:	d8c02015 	stw	r3,128(sp)
    5098:	d8801f15 	stw	r2,124(sp)
    509c:	e0bff60e 	bge	fp,r2,5078 <__alt_data_end+0xff005078>
    50a0:	d9801e04 	addi	r6,sp,120
    50a4:	b80b883a 	mov	r5,r23
    50a8:	9809883a 	mov	r4,r19
    50ac:	000ab880 	call	ab88 <__sprint_r>
    50b0:	103c501e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    50b4:	d8c02017 	ldw	r3,128(sp)
    50b8:	d8801f17 	ldw	r2,124(sp)
    50bc:	da000404 	addi	r8,sp,16
    50c0:	003fee06 	br	507c <__alt_data_end+0xff00507c>
    50c4:	d9002c17 	ldw	r4,176(sp)
    50c8:	d9801e04 	addi	r6,sp,120
    50cc:	b80b883a 	mov	r5,r23
    50d0:	000ab880 	call	ab88 <__sprint_r>
    50d4:	103c471e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    50d8:	d8c02017 	ldw	r3,128(sp)
    50dc:	df002787 	ldb	fp,158(sp)
    50e0:	da000404 	addi	r8,sp,16
    50e4:	003d5606 	br	4640 <__alt_data_end+0xff004640>
    50e8:	9080040c 	andi	r2,r18,16
    50ec:	10016126 	beq	r2,zero,5674 <___vfprintf_internal_r+0x1888>
    50f0:	d8802d17 	ldw	r2,180(sp)
    50f4:	14c00017 	ldw	r19,0(r2)
    50f8:	10800104 	addi	r2,r2,4
    50fc:	d8802d15 	stw	r2,180(sp)
    5100:	982dd7fa 	srai	r22,r19,31
    5104:	b005883a 	mov	r2,r22
    5108:	003c8206 	br	4314 <__alt_data_end+0xff004314>
    510c:	9080040c 	andi	r2,r18,16
    5110:	10003526 	beq	r2,zero,51e8 <___vfprintf_internal_r+0x13fc>
    5114:	d9402d17 	ldw	r5,180(sp)
    5118:	d8c02917 	ldw	r3,164(sp)
    511c:	d8002785 	stb	zero,158(sp)
    5120:	28800104 	addi	r2,r5,4
    5124:	2cc00017 	ldw	r19,0(r5)
    5128:	002d883a 	mov	r22,zero
    512c:	18003716 	blt	r3,zero,520c <___vfprintf_internal_r+0x1420>
    5130:	00ffdfc4 	movi	r3,-129
    5134:	d8802d15 	stw	r2,180(sp)
    5138:	90e4703a 	and	r18,r18,r3
    513c:	0039883a 	mov	fp,zero
    5140:	983df326 	beq	r19,zero,4910 <__alt_data_end+0xff004910>
    5144:	00800244 	movi	r2,9
    5148:	14fc7b36 	bltu	r2,r19,4338 <__alt_data_end+0xff004338>
    514c:	d8c02817 	ldw	r3,160(sp)
    5150:	dc001dc4 	addi	r16,sp,119
    5154:	9cc00c04 	addi	r19,r19,48
    5158:	1c07c83a 	sub	r3,r3,r16
    515c:	dcc01dc5 	stb	r19,119(sp)
    5160:	d8c02e15 	stw	r3,184(sp)
    5164:	003ce806 	br	4508 <__alt_data_end+0xff004508>
    5168:	d8803317 	ldw	r2,204(sp)
    516c:	143fffc4 	addi	r16,r2,-1
    5170:	043f4d0e 	bge	zero,r16,4ea8 <__alt_data_end+0xff004ea8>
    5174:	07000404 	movi	fp,16
    5178:	e400810e 	bge	fp,r16,5380 <___vfprintf_internal_r+0x1594>
    517c:	01400074 	movhi	r5,1
    5180:	29490884 	addi	r5,r5,9250
    5184:	d9402b15 	stw	r5,172(sp)
    5188:	01c001c4 	movi	r7,7
    518c:	dcc02c17 	ldw	r19,176(sp)
    5190:	00000306 	br	51a0 <___vfprintf_internal_r+0x13b4>
    5194:	b5800204 	addi	r22,r22,8
    5198:	843ffc04 	addi	r16,r16,-16
    519c:	e4007b0e 	bge	fp,r16,538c <___vfprintf_internal_r+0x15a0>
    51a0:	18c00404 	addi	r3,r3,16
    51a4:	8c400044 	addi	r17,r17,1
    51a8:	b5000015 	stw	r20,0(r22)
    51ac:	b7000115 	stw	fp,4(r22)
    51b0:	d8c02015 	stw	r3,128(sp)
    51b4:	dc401f15 	stw	r17,124(sp)
    51b8:	3c7ff60e 	bge	r7,r17,5194 <__alt_data_end+0xff005194>
    51bc:	d9801e04 	addi	r6,sp,120
    51c0:	b80b883a 	mov	r5,r23
    51c4:	9809883a 	mov	r4,r19
    51c8:	d9c03c15 	stw	r7,240(sp)
    51cc:	000ab880 	call	ab88 <__sprint_r>
    51d0:	d9c03c17 	ldw	r7,240(sp)
    51d4:	103c071e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    51d8:	d8c02017 	ldw	r3,128(sp)
    51dc:	dc401f17 	ldw	r17,124(sp)
    51e0:	dd800404 	addi	r22,sp,16
    51e4:	003fec06 	br	5198 <__alt_data_end+0xff005198>
    51e8:	9080100c 	andi	r2,r18,64
    51ec:	d8002785 	stb	zero,158(sp)
    51f0:	10010e26 	beq	r2,zero,562c <___vfprintf_internal_r+0x1840>
    51f4:	d9002d17 	ldw	r4,180(sp)
    51f8:	d9402917 	ldw	r5,164(sp)
    51fc:	002d883a 	mov	r22,zero
    5200:	20800104 	addi	r2,r4,4
    5204:	24c0000b 	ldhu	r19,0(r4)
    5208:	283fc90e 	bge	r5,zero,5130 <__alt_data_end+0xff005130>
    520c:	d8802d15 	stw	r2,180(sp)
    5210:	0039883a 	mov	fp,zero
    5214:	9d84b03a 	or	r2,r19,r22
    5218:	103c461e 	bne	r2,zero,4334 <__alt_data_end+0xff004334>
    521c:	00800044 	movi	r2,1
    5220:	003e6c06 	br	4bd4 <__alt_data_end+0xff004bd4>
    5224:	d9002c17 	ldw	r4,176(sp)
    5228:	d9801e04 	addi	r6,sp,120
    522c:	b80b883a 	mov	r5,r23
    5230:	000ab880 	call	ab88 <__sprint_r>
    5234:	103bef1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5238:	d8c02017 	ldw	r3,128(sp)
    523c:	da000404 	addi	r8,sp,16
    5240:	d9003217 	ldw	r4,200(sp)
    5244:	d8802617 	ldw	r2,152(sp)
    5248:	d9403317 	ldw	r5,204(sp)
    524c:	8123883a 	add	r17,r16,r4
    5250:	11400216 	blt	r2,r5,525c <___vfprintf_internal_r+0x1470>
    5254:	9100004c 	andi	r4,r18,1
    5258:	20000d26 	beq	r4,zero,5290 <___vfprintf_internal_r+0x14a4>
    525c:	d9003717 	ldw	r4,220(sp)
    5260:	d9403417 	ldw	r5,208(sp)
    5264:	1907883a 	add	r3,r3,r4
    5268:	d9001f17 	ldw	r4,124(sp)
    526c:	41400015 	stw	r5,0(r8)
    5270:	d9403717 	ldw	r5,220(sp)
    5274:	21000044 	addi	r4,r4,1
    5278:	d8c02015 	stw	r3,128(sp)
    527c:	41400115 	stw	r5,4(r8)
    5280:	d9001f15 	stw	r4,124(sp)
    5284:	014001c4 	movi	r5,7
    5288:	2901e816 	blt	r5,r4,5a2c <___vfprintf_internal_r+0x1c40>
    528c:	42000204 	addi	r8,r8,8
    5290:	d9003317 	ldw	r4,204(sp)
    5294:	8121883a 	add	r16,r16,r4
    5298:	2085c83a 	sub	r2,r4,r2
    529c:	8461c83a 	sub	r16,r16,r17
    52a0:	1400010e 	bge	r2,r16,52a8 <___vfprintf_internal_r+0x14bc>
    52a4:	1021883a 	mov	r16,r2
    52a8:	04000a0e 	bge	zero,r16,52d4 <___vfprintf_internal_r+0x14e8>
    52ac:	d9001f17 	ldw	r4,124(sp)
    52b0:	1c07883a 	add	r3,r3,r16
    52b4:	44400015 	stw	r17,0(r8)
    52b8:	21000044 	addi	r4,r4,1
    52bc:	44000115 	stw	r16,4(r8)
    52c0:	d8c02015 	stw	r3,128(sp)
    52c4:	d9001f15 	stw	r4,124(sp)
    52c8:	014001c4 	movi	r5,7
    52cc:	2901fb16 	blt	r5,r4,5abc <___vfprintf_internal_r+0x1cd0>
    52d0:	42000204 	addi	r8,r8,8
    52d4:	8001f716 	blt	r16,zero,5ab4 <___vfprintf_internal_r+0x1cc8>
    52d8:	1421c83a 	sub	r16,r2,r16
    52dc:	043d380e 	bge	zero,r16,47c0 <__alt_data_end+0xff0047c0>
    52e0:	04400404 	movi	r17,16
    52e4:	d8801f17 	ldw	r2,124(sp)
    52e8:	8c3efb0e 	bge	r17,r16,4ed8 <__alt_data_end+0xff004ed8>
    52ec:	01400074 	movhi	r5,1
    52f0:	29490884 	addi	r5,r5,9250
    52f4:	d9402b15 	stw	r5,172(sp)
    52f8:	058001c4 	movi	r22,7
    52fc:	dcc02c17 	ldw	r19,176(sp)
    5300:	00000306 	br	5310 <___vfprintf_internal_r+0x1524>
    5304:	42000204 	addi	r8,r8,8
    5308:	843ffc04 	addi	r16,r16,-16
    530c:	8c3ef50e 	bge	r17,r16,4ee4 <__alt_data_end+0xff004ee4>
    5310:	18c00404 	addi	r3,r3,16
    5314:	10800044 	addi	r2,r2,1
    5318:	45000015 	stw	r20,0(r8)
    531c:	44400115 	stw	r17,4(r8)
    5320:	d8c02015 	stw	r3,128(sp)
    5324:	d8801f15 	stw	r2,124(sp)
    5328:	b0bff60e 	bge	r22,r2,5304 <__alt_data_end+0xff005304>
    532c:	d9801e04 	addi	r6,sp,120
    5330:	b80b883a 	mov	r5,r23
    5334:	9809883a 	mov	r4,r19
    5338:	000ab880 	call	ab88 <__sprint_r>
    533c:	103bad1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5340:	d8c02017 	ldw	r3,128(sp)
    5344:	d8801f17 	ldw	r2,124(sp)
    5348:	da000404 	addi	r8,sp,16
    534c:	003fee06 	br	5308 <__alt_data_end+0xff005308>
    5350:	9088703a 	and	r4,r18,r2
    5354:	203eab1e 	bne	r4,zero,4e04 <__alt_data_end+0xff004e04>
    5358:	dc401f17 	ldw	r17,124(sp)
    535c:	40800115 	stw	r2,4(r8)
    5360:	44000015 	stw	r16,0(r8)
    5364:	8c400044 	addi	r17,r17,1
    5368:	d8c02015 	stw	r3,128(sp)
    536c:	dc401f15 	stw	r17,124(sp)
    5370:	008001c4 	movi	r2,7
    5374:	14400e16 	blt	r2,r17,53b0 <___vfprintf_internal_r+0x15c4>
    5378:	45800204 	addi	r22,r8,8
    537c:	003eca06 	br	4ea8 <__alt_data_end+0xff004ea8>
    5380:	01000074 	movhi	r4,1
    5384:	21090884 	addi	r4,r4,9250
    5388:	d9002b15 	stw	r4,172(sp)
    538c:	d8802b17 	ldw	r2,172(sp)
    5390:	1c07883a 	add	r3,r3,r16
    5394:	8c400044 	addi	r17,r17,1
    5398:	b0800015 	stw	r2,0(r22)
    539c:	b4000115 	stw	r16,4(r22)
    53a0:	d8c02015 	stw	r3,128(sp)
    53a4:	dc401f15 	stw	r17,124(sp)
    53a8:	008001c4 	movi	r2,7
    53ac:	147ebd0e 	bge	r2,r17,4ea4 <__alt_data_end+0xff004ea4>
    53b0:	d9002c17 	ldw	r4,176(sp)
    53b4:	d9801e04 	addi	r6,sp,120
    53b8:	b80b883a 	mov	r5,r23
    53bc:	000ab880 	call	ab88 <__sprint_r>
    53c0:	103b8c1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    53c4:	d8c02017 	ldw	r3,128(sp)
    53c8:	dc401f17 	ldw	r17,124(sp)
    53cc:	dd800404 	addi	r22,sp,16
    53d0:	003eb506 	br	4ea8 <__alt_data_end+0xff004ea8>
    53d4:	d9002c17 	ldw	r4,176(sp)
    53d8:	d9801e04 	addi	r6,sp,120
    53dc:	b80b883a 	mov	r5,r23
    53e0:	000ab880 	call	ab88 <__sprint_r>
    53e4:	103b831e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    53e8:	d8c02017 	ldw	r3,128(sp)
    53ec:	dc401f17 	ldw	r17,124(sp)
    53f0:	da000404 	addi	r8,sp,16
    53f4:	003e8d06 	br	4e2c <__alt_data_end+0xff004e2c>
    53f8:	d9002c17 	ldw	r4,176(sp)
    53fc:	d9801e04 	addi	r6,sp,120
    5400:	b80b883a 	mov	r5,r23
    5404:	000ab880 	call	ab88 <__sprint_r>
    5408:	103b7a1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    540c:	d8c02017 	ldw	r3,128(sp)
    5410:	dc401f17 	ldw	r17,124(sp)
    5414:	dd800404 	addi	r22,sp,16
    5418:	003e8f06 	br	4e58 <__alt_data_end+0xff004e58>
    541c:	0027883a 	mov	r19,zero
    5420:	003f4a06 	br	514c <__alt_data_end+0xff00514c>
    5424:	d9002c17 	ldw	r4,176(sp)
    5428:	d9801e04 	addi	r6,sp,120
    542c:	b80b883a 	mov	r5,r23
    5430:	000ab880 	call	ab88 <__sprint_r>
    5434:	103b6f1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5438:	d8c02017 	ldw	r3,128(sp)
    543c:	da000404 	addi	r8,sp,16
    5440:	003c9d06 	br	46b8 <__alt_data_end+0xff0046b8>
    5444:	04e7c83a 	sub	r19,zero,r19
    5448:	9804c03a 	cmpne	r2,r19,zero
    544c:	05adc83a 	sub	r22,zero,r22
    5450:	b0adc83a 	sub	r22,r22,r2
    5454:	d8802917 	ldw	r2,164(sp)
    5458:	07000b44 	movi	fp,45
    545c:	df002785 	stb	fp,158(sp)
    5460:	10017b16 	blt	r2,zero,5a50 <___vfprintf_internal_r+0x1c64>
    5464:	00bfdfc4 	movi	r2,-129
    5468:	90a4703a 	and	r18,r18,r2
    546c:	003bb106 	br	4334 <__alt_data_end+0xff004334>
    5470:	d9003617 	ldw	r4,216(sp)
    5474:	d9403817 	ldw	r5,224(sp)
    5478:	da003d15 	stw	r8,244(sp)
    547c:	000a8000 	call	a800 <__fpclassifyd>
    5480:	da003d17 	ldw	r8,244(sp)
    5484:	1000f026 	beq	r2,zero,5848 <___vfprintf_internal_r+0x1a5c>
    5488:	d9002917 	ldw	r4,164(sp)
    548c:	05bff7c4 	movi	r22,-33
    5490:	00bfffc4 	movi	r2,-1
    5494:	8dac703a 	and	r22,r17,r22
    5498:	20820026 	beq	r4,r2,5c9c <___vfprintf_internal_r+0x1eb0>
    549c:	008011c4 	movi	r2,71
    54a0:	b081f726 	beq	r22,r2,5c80 <___vfprintf_internal_r+0x1e94>
    54a4:	d9003817 	ldw	r4,224(sp)
    54a8:	90c04014 	ori	r3,r18,256
    54ac:	d8c02b15 	stw	r3,172(sp)
    54b0:	20021516 	blt	r4,zero,5d08 <___vfprintf_internal_r+0x1f1c>
    54b4:	dcc03817 	ldw	r19,224(sp)
    54b8:	d8002a05 	stb	zero,168(sp)
    54bc:	00801984 	movi	r2,102
    54c0:	8881f926 	beq	r17,r2,5ca8 <___vfprintf_internal_r+0x1ebc>
    54c4:	00801184 	movi	r2,70
    54c8:	88821c26 	beq	r17,r2,5d3c <___vfprintf_internal_r+0x1f50>
    54cc:	00801144 	movi	r2,69
    54d0:	b081ef26 	beq	r22,r2,5c90 <___vfprintf_internal_r+0x1ea4>
    54d4:	d8c02917 	ldw	r3,164(sp)
    54d8:	d8802104 	addi	r2,sp,132
    54dc:	d8800315 	stw	r2,12(sp)
    54e0:	d9403617 	ldw	r5,216(sp)
    54e4:	d8802504 	addi	r2,sp,148
    54e8:	d9002c17 	ldw	r4,176(sp)
    54ec:	d8800215 	stw	r2,8(sp)
    54f0:	d8802604 	addi	r2,sp,152
    54f4:	d8c00015 	stw	r3,0(sp)
    54f8:	d8800115 	stw	r2,4(sp)
    54fc:	01c00084 	movi	r7,2
    5500:	980d883a 	mov	r6,r19
    5504:	d8c03c15 	stw	r3,240(sp)
    5508:	da003d15 	stw	r8,244(sp)
    550c:	00064100 	call	6410 <_dtoa_r>
    5510:	1021883a 	mov	r16,r2
    5514:	008019c4 	movi	r2,103
    5518:	d8c03c17 	ldw	r3,240(sp)
    551c:	da003d17 	ldw	r8,244(sp)
    5520:	88817126 	beq	r17,r2,5ae8 <___vfprintf_internal_r+0x1cfc>
    5524:	008011c4 	movi	r2,71
    5528:	88829226 	beq	r17,r2,5f74 <___vfprintf_internal_r+0x2188>
    552c:	80f9883a 	add	fp,r16,r3
    5530:	d9003617 	ldw	r4,216(sp)
    5534:	000d883a 	mov	r6,zero
    5538:	000f883a 	mov	r7,zero
    553c:	980b883a 	mov	r5,r19
    5540:	da003d15 	stw	r8,244(sp)
    5544:	000e8000 	call	e800 <__eqdf2>
    5548:	da003d17 	ldw	r8,244(sp)
    554c:	10018d26 	beq	r2,zero,5b84 <___vfprintf_internal_r+0x1d98>
    5550:	d8802117 	ldw	r2,132(sp)
    5554:	1700062e 	bgeu	r2,fp,5570 <___vfprintf_internal_r+0x1784>
    5558:	01000c04 	movi	r4,48
    555c:	10c00044 	addi	r3,r2,1
    5560:	d8c02115 	stw	r3,132(sp)
    5564:	11000005 	stb	r4,0(r2)
    5568:	d8802117 	ldw	r2,132(sp)
    556c:	173ffb36 	bltu	r2,fp,555c <__alt_data_end+0xff00555c>
    5570:	1405c83a 	sub	r2,r2,r16
    5574:	d8803315 	stw	r2,204(sp)
    5578:	008011c4 	movi	r2,71
    557c:	b0817626 	beq	r22,r2,5b58 <___vfprintf_internal_r+0x1d6c>
    5580:	00801944 	movi	r2,101
    5584:	1442810e 	bge	r2,r17,5f8c <___vfprintf_internal_r+0x21a0>
    5588:	d8c02617 	ldw	r3,152(sp)
    558c:	00801984 	movi	r2,102
    5590:	d8c03215 	stw	r3,200(sp)
    5594:	8881fe26 	beq	r17,r2,5d90 <___vfprintf_internal_r+0x1fa4>
    5598:	d8c03217 	ldw	r3,200(sp)
    559c:	d9003317 	ldw	r4,204(sp)
    55a0:	1901dd16 	blt	r3,r4,5d18 <___vfprintf_internal_r+0x1f2c>
    55a4:	9480004c 	andi	r18,r18,1
    55a8:	90022b1e 	bne	r18,zero,5e58 <___vfprintf_internal_r+0x206c>
    55ac:	1805883a 	mov	r2,r3
    55b0:	18028016 	blt	r3,zero,5fb4 <___vfprintf_internal_r+0x21c8>
    55b4:	d8c03217 	ldw	r3,200(sp)
    55b8:	044019c4 	movi	r17,103
    55bc:	d8c02e15 	stw	r3,184(sp)
    55c0:	df002a07 	ldb	fp,168(sp)
    55c4:	e001531e 	bne	fp,zero,5b14 <___vfprintf_internal_r+0x1d28>
    55c8:	df002783 	ldbu	fp,158(sp)
    55cc:	d8802a15 	stw	r2,168(sp)
    55d0:	dc802b17 	ldw	r18,172(sp)
    55d4:	d8002915 	stw	zero,164(sp)
    55d8:	003bd106 	br	4520 <__alt_data_end+0xff004520>
    55dc:	d8802d17 	ldw	r2,180(sp)
    55e0:	d8c02d17 	ldw	r3,180(sp)
    55e4:	d9002d17 	ldw	r4,180(sp)
    55e8:	10800017 	ldw	r2,0(r2)
    55ec:	18c00117 	ldw	r3,4(r3)
    55f0:	21000204 	addi	r4,r4,8
    55f4:	d8803615 	stw	r2,216(sp)
    55f8:	d8c03815 	stw	r3,224(sp)
    55fc:	d9002d15 	stw	r4,180(sp)
    5600:	003b7506 	br	43d8 <__alt_data_end+0xff0043d8>
    5604:	ac400007 	ldb	r17,0(r21)
    5608:	003a5906 	br	3f70 <__alt_data_end+0xff003f70>
    560c:	9080100c 	andi	r2,r18,64
    5610:	1000a826 	beq	r2,zero,58b4 <___vfprintf_internal_r+0x1ac8>
    5614:	d9002d17 	ldw	r4,180(sp)
    5618:	002d883a 	mov	r22,zero
    561c:	24c0000b 	ldhu	r19,0(r4)
    5620:	21000104 	addi	r4,r4,4
    5624:	d9002d15 	stw	r4,180(sp)
    5628:	003ccb06 	br	4958 <__alt_data_end+0xff004958>
    562c:	d8c02d17 	ldw	r3,180(sp)
    5630:	d9002917 	ldw	r4,164(sp)
    5634:	002d883a 	mov	r22,zero
    5638:	18800104 	addi	r2,r3,4
    563c:	1cc00017 	ldw	r19,0(r3)
    5640:	203ebb0e 	bge	r4,zero,5130 <__alt_data_end+0xff005130>
    5644:	003ef106 	br	520c <__alt_data_end+0xff00520c>
    5648:	9080040c 	andi	r2,r18,16
    564c:	1000921e 	bne	r2,zero,5898 <___vfprintf_internal_r+0x1aac>
    5650:	9480100c 	andi	r18,r18,64
    5654:	90013926 	beq	r18,zero,5b3c <___vfprintf_internal_r+0x1d50>
    5658:	d9002d17 	ldw	r4,180(sp)
    565c:	d9402f17 	ldw	r5,188(sp)
    5660:	20800017 	ldw	r2,0(r4)
    5664:	21000104 	addi	r4,r4,4
    5668:	d9002d15 	stw	r4,180(sp)
    566c:	1140000d 	sth	r5,0(r2)
    5670:	003a1606 	br	3ecc <__alt_data_end+0xff003ecc>
    5674:	9080100c 	andi	r2,r18,64
    5678:	10008026 	beq	r2,zero,587c <___vfprintf_internal_r+0x1a90>
    567c:	d8c02d17 	ldw	r3,180(sp)
    5680:	1cc0000f 	ldh	r19,0(r3)
    5684:	18c00104 	addi	r3,r3,4
    5688:	d8c02d15 	stw	r3,180(sp)
    568c:	982dd7fa 	srai	r22,r19,31
    5690:	b005883a 	mov	r2,r22
    5694:	003b1f06 	br	4314 <__alt_data_end+0xff004314>
    5698:	9080100c 	andi	r2,r18,64
    569c:	d8002785 	stb	zero,158(sp)
    56a0:	10008a1e 	bne	r2,zero,58cc <___vfprintf_internal_r+0x1ae0>
    56a4:	d9402d17 	ldw	r5,180(sp)
    56a8:	d8c02917 	ldw	r3,164(sp)
    56ac:	002d883a 	mov	r22,zero
    56b0:	28800104 	addi	r2,r5,4
    56b4:	2cc00017 	ldw	r19,0(r5)
    56b8:	183e4b0e 	bge	r3,zero,4fe8 <__alt_data_end+0xff004fe8>
    56bc:	9d86b03a 	or	r3,r19,r22
    56c0:	d8802d15 	stw	r2,180(sp)
    56c4:	183e4c1e 	bne	r3,zero,4ff8 <__alt_data_end+0xff004ff8>
    56c8:	0039883a 	mov	fp,zero
    56cc:	0005883a 	mov	r2,zero
    56d0:	003d4006 	br	4bd4 <__alt_data_end+0xff004bd4>
    56d4:	01400074 	movhi	r5,1
    56d8:	29490884 	addi	r5,r5,9250
    56dc:	d9402b15 	stw	r5,172(sp)
    56e0:	d9402b17 	ldw	r5,172(sp)
    56e4:	1c47883a 	add	r3,r3,r17
    56e8:	10800044 	addi	r2,r2,1
    56ec:	41400015 	stw	r5,0(r8)
    56f0:	44400115 	stw	r17,4(r8)
    56f4:	d8c02015 	stw	r3,128(sp)
    56f8:	d8801f15 	stw	r2,124(sp)
    56fc:	010001c4 	movi	r4,7
    5700:	20bec816 	blt	r4,r2,5224 <__alt_data_end+0xff005224>
    5704:	42000204 	addi	r8,r8,8
    5708:	003ecd06 	br	5240 <__alt_data_end+0xff005240>
    570c:	d9002917 	ldw	r4,164(sp)
    5710:	d8002785 	stb	zero,158(sp)
    5714:	203d2d16 	blt	r4,zero,4bcc <__alt_data_end+0xff004bcc>
    5718:	00bfdfc4 	movi	r2,-129
    571c:	90a4703a 	and	r18,r18,r2
    5720:	003a9106 	br	4168 <__alt_data_end+0xff004168>
    5724:	01000074 	movhi	r4,1
    5728:	21090884 	addi	r4,r4,9250
    572c:	d9002b15 	stw	r4,172(sp)
    5730:	003c0c06 	br	4764 <__alt_data_end+0xff004764>
    5734:	d9002c17 	ldw	r4,176(sp)
    5738:	d9801e04 	addi	r6,sp,120
    573c:	b80b883a 	mov	r5,r23
    5740:	000ab880 	call	ab88 <__sprint_r>
    5744:	103aab1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5748:	d8c02017 	ldw	r3,128(sp)
    574c:	da000404 	addi	r8,sp,16
    5750:	003d4106 	br	4c58 <__alt_data_end+0xff004c58>
    5754:	d8801f17 	ldw	r2,124(sp)
    5758:	01400074 	movhi	r5,1
    575c:	01000044 	movi	r4,1
    5760:	18c00044 	addi	r3,r3,1
    5764:	10800044 	addi	r2,r2,1
    5768:	29490804 	addi	r5,r5,9248
    576c:	41000115 	stw	r4,4(r8)
    5770:	41400015 	stw	r5,0(r8)
    5774:	d8c02015 	stw	r3,128(sp)
    5778:	d8801f15 	stw	r2,124(sp)
    577c:	010001c4 	movi	r4,7
    5780:	20805c16 	blt	r4,r2,58f4 <___vfprintf_internal_r+0x1b08>
    5784:	42000204 	addi	r8,r8,8
    5788:	8800041e 	bne	r17,zero,579c <___vfprintf_internal_r+0x19b0>
    578c:	d8803317 	ldw	r2,204(sp)
    5790:	1000021e 	bne	r2,zero,579c <___vfprintf_internal_r+0x19b0>
    5794:	9080004c 	andi	r2,r18,1
    5798:	103c0926 	beq	r2,zero,47c0 <__alt_data_end+0xff0047c0>
    579c:	d9003717 	ldw	r4,220(sp)
    57a0:	d8801f17 	ldw	r2,124(sp)
    57a4:	d9403417 	ldw	r5,208(sp)
    57a8:	20c7883a 	add	r3,r4,r3
    57ac:	10800044 	addi	r2,r2,1
    57b0:	41000115 	stw	r4,4(r8)
    57b4:	41400015 	stw	r5,0(r8)
    57b8:	d8c02015 	stw	r3,128(sp)
    57bc:	d8801f15 	stw	r2,124(sp)
    57c0:	010001c4 	movi	r4,7
    57c4:	20812116 	blt	r4,r2,5c4c <___vfprintf_internal_r+0x1e60>
    57c8:	42000204 	addi	r8,r8,8
    57cc:	0463c83a 	sub	r17,zero,r17
    57d0:	0440730e 	bge	zero,r17,59a0 <___vfprintf_internal_r+0x1bb4>
    57d4:	05800404 	movi	r22,16
    57d8:	b440860e 	bge	r22,r17,59f4 <___vfprintf_internal_r+0x1c08>
    57dc:	01400074 	movhi	r5,1
    57e0:	29490884 	addi	r5,r5,9250
    57e4:	d9402b15 	stw	r5,172(sp)
    57e8:	070001c4 	movi	fp,7
    57ec:	dcc02c17 	ldw	r19,176(sp)
    57f0:	00000306 	br	5800 <___vfprintf_internal_r+0x1a14>
    57f4:	42000204 	addi	r8,r8,8
    57f8:	8c7ffc04 	addi	r17,r17,-16
    57fc:	b440800e 	bge	r22,r17,5a00 <___vfprintf_internal_r+0x1c14>
    5800:	18c00404 	addi	r3,r3,16
    5804:	10800044 	addi	r2,r2,1
    5808:	45000015 	stw	r20,0(r8)
    580c:	45800115 	stw	r22,4(r8)
    5810:	d8c02015 	stw	r3,128(sp)
    5814:	d8801f15 	stw	r2,124(sp)
    5818:	e0bff60e 	bge	fp,r2,57f4 <__alt_data_end+0xff0057f4>
    581c:	d9801e04 	addi	r6,sp,120
    5820:	b80b883a 	mov	r5,r23
    5824:	9809883a 	mov	r4,r19
    5828:	000ab880 	call	ab88 <__sprint_r>
    582c:	103a711e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5830:	d8c02017 	ldw	r3,128(sp)
    5834:	d8801f17 	ldw	r2,124(sp)
    5838:	da000404 	addi	r8,sp,16
    583c:	003fee06 	br	57f8 <__alt_data_end+0xff0057f8>
    5840:	00bfffc4 	movi	r2,-1
    5844:	003a6f06 	br	4204 <__alt_data_end+0xff004204>
    5848:	008011c4 	movi	r2,71
    584c:	1440b816 	blt	r2,r17,5b30 <___vfprintf_internal_r+0x1d44>
    5850:	04000074 	movhi	r16,1
    5854:	8408fa04 	addi	r16,r16,9192
    5858:	00c000c4 	movi	r3,3
    585c:	00bfdfc4 	movi	r2,-129
    5860:	d8c02a15 	stw	r3,168(sp)
    5864:	90a4703a 	and	r18,r18,r2
    5868:	df002783 	ldbu	fp,158(sp)
    586c:	d8c02e15 	stw	r3,184(sp)
    5870:	d8002915 	stw	zero,164(sp)
    5874:	d8003215 	stw	zero,200(sp)
    5878:	003b2906 	br	4520 <__alt_data_end+0xff004520>
    587c:	d9002d17 	ldw	r4,180(sp)
    5880:	24c00017 	ldw	r19,0(r4)
    5884:	21000104 	addi	r4,r4,4
    5888:	d9002d15 	stw	r4,180(sp)
    588c:	982dd7fa 	srai	r22,r19,31
    5890:	b005883a 	mov	r2,r22
    5894:	003a9f06 	br	4314 <__alt_data_end+0xff004314>
    5898:	d9402d17 	ldw	r5,180(sp)
    589c:	d8c02f17 	ldw	r3,188(sp)
    58a0:	28800017 	ldw	r2,0(r5)
    58a4:	29400104 	addi	r5,r5,4
    58a8:	d9402d15 	stw	r5,180(sp)
    58ac:	10c00015 	stw	r3,0(r2)
    58b0:	00398606 	br	3ecc <__alt_data_end+0xff003ecc>
    58b4:	d9402d17 	ldw	r5,180(sp)
    58b8:	002d883a 	mov	r22,zero
    58bc:	2cc00017 	ldw	r19,0(r5)
    58c0:	29400104 	addi	r5,r5,4
    58c4:	d9402d15 	stw	r5,180(sp)
    58c8:	003c2306 	br	4958 <__alt_data_end+0xff004958>
    58cc:	d8c02d17 	ldw	r3,180(sp)
    58d0:	d9002917 	ldw	r4,164(sp)
    58d4:	002d883a 	mov	r22,zero
    58d8:	18800104 	addi	r2,r3,4
    58dc:	1cc0000b 	ldhu	r19,0(r3)
    58e0:	203dc10e 	bge	r4,zero,4fe8 <__alt_data_end+0xff004fe8>
    58e4:	003f7506 	br	56bc <__alt_data_end+0xff0056bc>
    58e8:	04000074 	movhi	r16,1
    58ec:	8408f804 	addi	r16,r16,9184
    58f0:	003acc06 	br	4424 <__alt_data_end+0xff004424>
    58f4:	d9002c17 	ldw	r4,176(sp)
    58f8:	d9801e04 	addi	r6,sp,120
    58fc:	b80b883a 	mov	r5,r23
    5900:	000ab880 	call	ab88 <__sprint_r>
    5904:	103a3b1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5908:	dc402617 	ldw	r17,152(sp)
    590c:	d8c02017 	ldw	r3,128(sp)
    5910:	da000404 	addi	r8,sp,16
    5914:	003f9c06 	br	5788 <__alt_data_end+0xff005788>
    5918:	ac400043 	ldbu	r17,1(r21)
    591c:	94800814 	ori	r18,r18,32
    5920:	ad400044 	addi	r21,r21,1
    5924:	8c403fcc 	andi	r17,r17,255
    5928:	8c40201c 	xori	r17,r17,128
    592c:	8c7fe004 	addi	r17,r17,-128
    5930:	00398f06 	br	3f70 <__alt_data_end+0xff003f70>
    5934:	d8c02d15 	stw	r3,180(sp)
    5938:	0039883a 	mov	fp,zero
    593c:	003e3506 	br	5214 <__alt_data_end+0xff005214>
    5940:	d9002c17 	ldw	r4,176(sp)
    5944:	d9801e04 	addi	r6,sp,120
    5948:	b80b883a 	mov	r5,r23
    594c:	000ab880 	call	ab88 <__sprint_r>
    5950:	103a281e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5954:	d8c02017 	ldw	r3,128(sp)
    5958:	da000404 	addi	r8,sp,16
    595c:	003cd006 	br	4ca0 <__alt_data_end+0xff004ca0>
    5960:	8009883a 	mov	r4,r16
    5964:	da003d15 	stw	r8,244(sp)
    5968:	0003d540 	call	3d54 <strlen>
    596c:	d8802e15 	stw	r2,184(sp)
    5970:	da003d17 	ldw	r8,244(sp)
    5974:	103c340e 	bge	r2,zero,4a48 <__alt_data_end+0xff004a48>
    5978:	0005883a 	mov	r2,zero
    597c:	003c3206 	br	4a48 <__alt_data_end+0xff004a48>
    5980:	d9002c17 	ldw	r4,176(sp)
    5984:	d9801e04 	addi	r6,sp,120
    5988:	b80b883a 	mov	r5,r23
    598c:	000ab880 	call	ab88 <__sprint_r>
    5990:	103a181e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5994:	d8c02017 	ldw	r3,128(sp)
    5998:	d8801f17 	ldw	r2,124(sp)
    599c:	da000404 	addi	r8,sp,16
    59a0:	d9403317 	ldw	r5,204(sp)
    59a4:	10800044 	addi	r2,r2,1
    59a8:	44000015 	stw	r16,0(r8)
    59ac:	28c7883a 	add	r3,r5,r3
    59b0:	003b7d06 	br	47a8 <__alt_data_end+0xff0047a8>
    59b4:	01000074 	movhi	r4,1
    59b8:	21090c84 	addi	r4,r4,9266
    59bc:	d9003515 	stw	r4,212(sp)
    59c0:	003b1406 	br	4614 <__alt_data_end+0xff004614>
    59c4:	013fffc4 	movi	r4,-1
    59c8:	003a3506 	br	42a0 <__alt_data_end+0xff0042a0>
    59cc:	0023883a 	mov	r17,zero
    59d0:	003d9d06 	br	5048 <__alt_data_end+0xff005048>
    59d4:	d9002c17 	ldw	r4,176(sp)
    59d8:	d9801e04 	addi	r6,sp,120
    59dc:	b80b883a 	mov	r5,r23
    59e0:	000ab880 	call	ab88 <__sprint_r>
    59e4:	103a031e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    59e8:	d8c02017 	ldw	r3,128(sp)
    59ec:	da000404 	addi	r8,sp,16
    59f0:	003d9406 	br	5044 <__alt_data_end+0xff005044>
    59f4:	01000074 	movhi	r4,1
    59f8:	21090884 	addi	r4,r4,9250
    59fc:	d9002b15 	stw	r4,172(sp)
    5a00:	d9002b17 	ldw	r4,172(sp)
    5a04:	1c47883a 	add	r3,r3,r17
    5a08:	10800044 	addi	r2,r2,1
    5a0c:	41000015 	stw	r4,0(r8)
    5a10:	44400115 	stw	r17,4(r8)
    5a14:	d8c02015 	stw	r3,128(sp)
    5a18:	d8801f15 	stw	r2,124(sp)
    5a1c:	010001c4 	movi	r4,7
    5a20:	20bfd716 	blt	r4,r2,5980 <__alt_data_end+0xff005980>
    5a24:	42000204 	addi	r8,r8,8
    5a28:	003fdd06 	br	59a0 <__alt_data_end+0xff0059a0>
    5a2c:	d9002c17 	ldw	r4,176(sp)
    5a30:	d9801e04 	addi	r6,sp,120
    5a34:	b80b883a 	mov	r5,r23
    5a38:	000ab880 	call	ab88 <__sprint_r>
    5a3c:	1039ed1e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5a40:	d8802617 	ldw	r2,152(sp)
    5a44:	d8c02017 	ldw	r3,128(sp)
    5a48:	da000404 	addi	r8,sp,16
    5a4c:	003e1006 	br	5290 <__alt_data_end+0xff005290>
    5a50:	00800044 	movi	r2,1
    5a54:	10803fcc 	andi	r2,r2,255
    5a58:	00c00044 	movi	r3,1
    5a5c:	10fa3526 	beq	r2,r3,4334 <__alt_data_end+0xff004334>
    5a60:	00c00084 	movi	r3,2
    5a64:	10fbcb26 	beq	r2,r3,4994 <__alt_data_end+0xff004994>
    5a68:	003a8f06 	br	44a8 <__alt_data_end+0xff0044a8>
    5a6c:	01000074 	movhi	r4,1
    5a70:	21090c84 	addi	r4,r4,9266
    5a74:	d9003515 	stw	r4,212(sp)
    5a78:	003b7606 	br	4854 <__alt_data_end+0xff004854>
    5a7c:	d8802917 	ldw	r2,164(sp)
    5a80:	00c00184 	movi	r3,6
    5a84:	1880012e 	bgeu	r3,r2,5a8c <___vfprintf_internal_r+0x1ca0>
    5a88:	1805883a 	mov	r2,r3
    5a8c:	d8802e15 	stw	r2,184(sp)
    5a90:	1000ef16 	blt	r2,zero,5e50 <___vfprintf_internal_r+0x2064>
    5a94:	04000074 	movhi	r16,1
    5a98:	d8802a15 	stw	r2,168(sp)
    5a9c:	dcc02d15 	stw	r19,180(sp)
    5aa0:	d8002915 	stw	zero,164(sp)
    5aa4:	d8003215 	stw	zero,200(sp)
    5aa8:	84090604 	addi	r16,r16,9240
    5aac:	0039883a 	mov	fp,zero
    5ab0:	003aa206 	br	453c <__alt_data_end+0xff00453c>
    5ab4:	0021883a 	mov	r16,zero
    5ab8:	003e0706 	br	52d8 <__alt_data_end+0xff0052d8>
    5abc:	d9002c17 	ldw	r4,176(sp)
    5ac0:	d9801e04 	addi	r6,sp,120
    5ac4:	b80b883a 	mov	r5,r23
    5ac8:	000ab880 	call	ab88 <__sprint_r>
    5acc:	1039c91e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5ad0:	d8802617 	ldw	r2,152(sp)
    5ad4:	d9403317 	ldw	r5,204(sp)
    5ad8:	d8c02017 	ldw	r3,128(sp)
    5adc:	da000404 	addi	r8,sp,16
    5ae0:	2885c83a 	sub	r2,r5,r2
    5ae4:	003dfb06 	br	52d4 <__alt_data_end+0xff0052d4>
    5ae8:	9080004c 	andi	r2,r18,1
    5aec:	103e8f1e 	bne	r2,zero,552c <__alt_data_end+0xff00552c>
    5af0:	d8802117 	ldw	r2,132(sp)
    5af4:	003e9e06 	br	5570 <__alt_data_end+0xff005570>
    5af8:	1025883a 	mov	r18,r2
    5afc:	0039883a 	mov	fp,zero
    5b00:	00800084 	movi	r2,2
    5b04:	003fd306 	br	5a54 <__alt_data_end+0xff005a54>
    5b08:	07000b44 	movi	fp,45
    5b0c:	df002785 	stb	fp,158(sp)
    5b10:	003a4006 	br	4414 <__alt_data_end+0xff004414>
    5b14:	00c00b44 	movi	r3,45
    5b18:	d8c02785 	stb	r3,158(sp)
    5b1c:	d8802a15 	stw	r2,168(sp)
    5b20:	dc802b17 	ldw	r18,172(sp)
    5b24:	d8002915 	stw	zero,164(sp)
    5b28:	07000b44 	movi	fp,45
    5b2c:	003a8006 	br	4530 <__alt_data_end+0xff004530>
    5b30:	04000074 	movhi	r16,1
    5b34:	8408fb04 	addi	r16,r16,9196
    5b38:	003f4706 	br	5858 <__alt_data_end+0xff005858>
    5b3c:	d8c02d17 	ldw	r3,180(sp)
    5b40:	d9002f17 	ldw	r4,188(sp)
    5b44:	18800017 	ldw	r2,0(r3)
    5b48:	18c00104 	addi	r3,r3,4
    5b4c:	d8c02d15 	stw	r3,180(sp)
    5b50:	11000015 	stw	r4,0(r2)
    5b54:	0038dd06 	br	3ecc <__alt_data_end+0xff003ecc>
    5b58:	dd802617 	ldw	r22,152(sp)
    5b5c:	00bfff44 	movi	r2,-3
    5b60:	b0801c16 	blt	r22,r2,5bd4 <___vfprintf_internal_r+0x1de8>
    5b64:	d9402917 	ldw	r5,164(sp)
    5b68:	2d801a16 	blt	r5,r22,5bd4 <___vfprintf_internal_r+0x1de8>
    5b6c:	dd803215 	stw	r22,200(sp)
    5b70:	003e8906 	br	5598 <__alt_data_end+0xff005598>
    5b74:	01000074 	movhi	r4,1
    5b78:	21090884 	addi	r4,r4,9250
    5b7c:	d9002b15 	stw	r4,172(sp)
    5b80:	003c9106 	br	4dc8 <__alt_data_end+0xff004dc8>
    5b84:	e005883a 	mov	r2,fp
    5b88:	003e7906 	br	5570 <__alt_data_end+0xff005570>
    5b8c:	d9402917 	ldw	r5,164(sp)
    5b90:	df002783 	ldbu	fp,158(sp)
    5b94:	dcc02d15 	stw	r19,180(sp)
    5b98:	d9402a15 	stw	r5,168(sp)
    5b9c:	d9402e15 	stw	r5,184(sp)
    5ba0:	d8002915 	stw	zero,164(sp)
    5ba4:	d8003215 	stw	zero,200(sp)
    5ba8:	003a5d06 	br	4520 <__alt_data_end+0xff004520>
    5bac:	9080004c 	andi	r2,r18,1
    5bb0:	0039883a 	mov	fp,zero
    5bb4:	10000426 	beq	r2,zero,5bc8 <___vfprintf_internal_r+0x1ddc>
    5bb8:	00800c04 	movi	r2,48
    5bbc:	dc001dc4 	addi	r16,sp,119
    5bc0:	d8801dc5 	stb	r2,119(sp)
    5bc4:	003b8006 	br	49c8 <__alt_data_end+0xff0049c8>
    5bc8:	d8002e15 	stw	zero,184(sp)
    5bcc:	dc001e04 	addi	r16,sp,120
    5bd0:	003a4d06 	br	4508 <__alt_data_end+0xff004508>
    5bd4:	8c7fff84 	addi	r17,r17,-2
    5bd8:	b5bfffc4 	addi	r22,r22,-1
    5bdc:	dd802615 	stw	r22,152(sp)
    5be0:	dc4022c5 	stb	r17,139(sp)
    5be4:	b000bf16 	blt	r22,zero,5ee4 <___vfprintf_internal_r+0x20f8>
    5be8:	00800ac4 	movi	r2,43
    5bec:	d8802305 	stb	r2,140(sp)
    5bf0:	00800244 	movi	r2,9
    5bf4:	15807016 	blt	r2,r22,5db8 <___vfprintf_internal_r+0x1fcc>
    5bf8:	00800c04 	movi	r2,48
    5bfc:	b5800c04 	addi	r22,r22,48
    5c00:	d8802345 	stb	r2,141(sp)
    5c04:	dd802385 	stb	r22,142(sp)
    5c08:	d88023c4 	addi	r2,sp,143
    5c0c:	df0022c4 	addi	fp,sp,139
    5c10:	d8c03317 	ldw	r3,204(sp)
    5c14:	1739c83a 	sub	fp,r2,fp
    5c18:	d9003317 	ldw	r4,204(sp)
    5c1c:	e0c7883a 	add	r3,fp,r3
    5c20:	df003a15 	stw	fp,232(sp)
    5c24:	d8c02e15 	stw	r3,184(sp)
    5c28:	00800044 	movi	r2,1
    5c2c:	1100b30e 	bge	r2,r4,5efc <___vfprintf_internal_r+0x2110>
    5c30:	d8c02e17 	ldw	r3,184(sp)
    5c34:	18c00044 	addi	r3,r3,1
    5c38:	d8c02e15 	stw	r3,184(sp)
    5c3c:	1805883a 	mov	r2,r3
    5c40:	1800ac16 	blt	r3,zero,5ef4 <___vfprintf_internal_r+0x2108>
    5c44:	d8003215 	stw	zero,200(sp)
    5c48:	003e5d06 	br	55c0 <__alt_data_end+0xff0055c0>
    5c4c:	d9002c17 	ldw	r4,176(sp)
    5c50:	d9801e04 	addi	r6,sp,120
    5c54:	b80b883a 	mov	r5,r23
    5c58:	000ab880 	call	ab88 <__sprint_r>
    5c5c:	1039651e 	bne	r2,zero,41f4 <__alt_data_end+0xff0041f4>
    5c60:	dc402617 	ldw	r17,152(sp)
    5c64:	d8c02017 	ldw	r3,128(sp)
    5c68:	d8801f17 	ldw	r2,124(sp)
    5c6c:	da000404 	addi	r8,sp,16
    5c70:	003ed606 	br	57cc <__alt_data_end+0xff0057cc>
    5c74:	582b883a 	mov	r21,r11
    5c78:	d8002915 	stw	zero,164(sp)
    5c7c:	0038bd06 	br	3f74 <__alt_data_end+0xff003f74>
    5c80:	d8802917 	ldw	r2,164(sp)
    5c84:	103e071e 	bne	r2,zero,54a4 <__alt_data_end+0xff0054a4>
    5c88:	dc002915 	stw	r16,164(sp)
    5c8c:	003e0506 	br	54a4 <__alt_data_end+0xff0054a4>
    5c90:	d9002917 	ldw	r4,164(sp)
    5c94:	20c00044 	addi	r3,r4,1
    5c98:	003e0f06 	br	54d8 <__alt_data_end+0xff0054d8>
    5c9c:	01400184 	movi	r5,6
    5ca0:	d9402915 	stw	r5,164(sp)
    5ca4:	003dff06 	br	54a4 <__alt_data_end+0xff0054a4>
    5ca8:	d8802104 	addi	r2,sp,132
    5cac:	d8800315 	stw	r2,12(sp)
    5cb0:	d8802504 	addi	r2,sp,148
    5cb4:	d8800215 	stw	r2,8(sp)
    5cb8:	d8802604 	addi	r2,sp,152
    5cbc:	d8800115 	stw	r2,4(sp)
    5cc0:	d8802917 	ldw	r2,164(sp)
    5cc4:	d9403617 	ldw	r5,216(sp)
    5cc8:	d9002c17 	ldw	r4,176(sp)
    5ccc:	d8800015 	stw	r2,0(sp)
    5cd0:	01c000c4 	movi	r7,3
    5cd4:	980d883a 	mov	r6,r19
    5cd8:	da003d15 	stw	r8,244(sp)
    5cdc:	00064100 	call	6410 <_dtoa_r>
    5ce0:	d8c02917 	ldw	r3,164(sp)
    5ce4:	da003d17 	ldw	r8,244(sp)
    5ce8:	1021883a 	mov	r16,r2
    5cec:	10f9883a 	add	fp,r2,r3
    5cf0:	81000007 	ldb	r4,0(r16)
    5cf4:	00800c04 	movi	r2,48
    5cf8:	20805e26 	beq	r4,r2,5e74 <___vfprintf_internal_r+0x2088>
    5cfc:	d8c02617 	ldw	r3,152(sp)
    5d00:	e0f9883a 	add	fp,fp,r3
    5d04:	003e0a06 	br	5530 <__alt_data_end+0xff005530>
    5d08:	00c00b44 	movi	r3,45
    5d0c:	24e0003c 	xorhi	r19,r4,32768
    5d10:	d8c02a05 	stb	r3,168(sp)
    5d14:	003de906 	br	54bc <__alt_data_end+0xff0054bc>
    5d18:	d8c03217 	ldw	r3,200(sp)
    5d1c:	00c07a0e 	bge	zero,r3,5f08 <___vfprintf_internal_r+0x211c>
    5d20:	00800044 	movi	r2,1
    5d24:	d9003317 	ldw	r4,204(sp)
    5d28:	1105883a 	add	r2,r2,r4
    5d2c:	d8802e15 	stw	r2,184(sp)
    5d30:	10004e16 	blt	r2,zero,5e6c <___vfprintf_internal_r+0x2080>
    5d34:	044019c4 	movi	r17,103
    5d38:	003e2106 	br	55c0 <__alt_data_end+0xff0055c0>
    5d3c:	d9002917 	ldw	r4,164(sp)
    5d40:	d8802104 	addi	r2,sp,132
    5d44:	d8800315 	stw	r2,12(sp)
    5d48:	d9000015 	stw	r4,0(sp)
    5d4c:	d8802504 	addi	r2,sp,148
    5d50:	d9403617 	ldw	r5,216(sp)
    5d54:	d9002c17 	ldw	r4,176(sp)
    5d58:	d8800215 	stw	r2,8(sp)
    5d5c:	d8802604 	addi	r2,sp,152
    5d60:	d8800115 	stw	r2,4(sp)
    5d64:	01c000c4 	movi	r7,3
    5d68:	980d883a 	mov	r6,r19
    5d6c:	da003d15 	stw	r8,244(sp)
    5d70:	00064100 	call	6410 <_dtoa_r>
    5d74:	d8c02917 	ldw	r3,164(sp)
    5d78:	da003d17 	ldw	r8,244(sp)
    5d7c:	1021883a 	mov	r16,r2
    5d80:	00801184 	movi	r2,70
    5d84:	80f9883a 	add	fp,r16,r3
    5d88:	88bfd926 	beq	r17,r2,5cf0 <__alt_data_end+0xff005cf0>
    5d8c:	003de806 	br	5530 <__alt_data_end+0xff005530>
    5d90:	d9002917 	ldw	r4,164(sp)
    5d94:	00c04d0e 	bge	zero,r3,5ecc <___vfprintf_internal_r+0x20e0>
    5d98:	2000441e 	bne	r4,zero,5eac <___vfprintf_internal_r+0x20c0>
    5d9c:	9480004c 	andi	r18,r18,1
    5da0:	9000421e 	bne	r18,zero,5eac <___vfprintf_internal_r+0x20c0>
    5da4:	1805883a 	mov	r2,r3
    5da8:	18007016 	blt	r3,zero,5f6c <___vfprintf_internal_r+0x2180>
    5dac:	d8c03217 	ldw	r3,200(sp)
    5db0:	d8c02e15 	stw	r3,184(sp)
    5db4:	003e0206 	br	55c0 <__alt_data_end+0xff0055c0>
    5db8:	df0022c4 	addi	fp,sp,139
    5dbc:	dc002915 	stw	r16,164(sp)
    5dc0:	4027883a 	mov	r19,r8
    5dc4:	e021883a 	mov	r16,fp
    5dc8:	b009883a 	mov	r4,r22
    5dcc:	01400284 	movi	r5,10
    5dd0:	000d53c0 	call	d53c <__modsi3>
    5dd4:	10800c04 	addi	r2,r2,48
    5dd8:	843fffc4 	addi	r16,r16,-1
    5ddc:	b009883a 	mov	r4,r22
    5de0:	01400284 	movi	r5,10
    5de4:	80800005 	stb	r2,0(r16)
    5de8:	000d4b80 	call	d4b8 <__divsi3>
    5dec:	102d883a 	mov	r22,r2
    5df0:	00800244 	movi	r2,9
    5df4:	15bff416 	blt	r2,r22,5dc8 <__alt_data_end+0xff005dc8>
    5df8:	9811883a 	mov	r8,r19
    5dfc:	b0800c04 	addi	r2,r22,48
    5e00:	8027883a 	mov	r19,r16
    5e04:	997fffc4 	addi	r5,r19,-1
    5e08:	98bfffc5 	stb	r2,-1(r19)
    5e0c:	dc002917 	ldw	r16,164(sp)
    5e10:	2f006a2e 	bgeu	r5,fp,5fbc <___vfprintf_internal_r+0x21d0>
    5e14:	d9c02384 	addi	r7,sp,142
    5e18:	3ccfc83a 	sub	r7,r7,r19
    5e1c:	d9002344 	addi	r4,sp,141
    5e20:	e1cf883a 	add	r7,fp,r7
    5e24:	00000106 	br	5e2c <___vfprintf_internal_r+0x2040>
    5e28:	28800003 	ldbu	r2,0(r5)
    5e2c:	20800005 	stb	r2,0(r4)
    5e30:	21000044 	addi	r4,r4,1
    5e34:	29400044 	addi	r5,r5,1
    5e38:	393ffb1e 	bne	r7,r4,5e28 <__alt_data_end+0xff005e28>
    5e3c:	d8802304 	addi	r2,sp,140
    5e40:	14c5c83a 	sub	r2,r2,r19
    5e44:	d8c02344 	addi	r3,sp,141
    5e48:	1885883a 	add	r2,r3,r2
    5e4c:	003f7006 	br	5c10 <__alt_data_end+0xff005c10>
    5e50:	0005883a 	mov	r2,zero
    5e54:	003f0f06 	br	5a94 <__alt_data_end+0xff005a94>
    5e58:	d8c03217 	ldw	r3,200(sp)
    5e5c:	18c00044 	addi	r3,r3,1
    5e60:	d8c02e15 	stw	r3,184(sp)
    5e64:	1805883a 	mov	r2,r3
    5e68:	183fb20e 	bge	r3,zero,5d34 <__alt_data_end+0xff005d34>
    5e6c:	0005883a 	mov	r2,zero
    5e70:	003fb006 	br	5d34 <__alt_data_end+0xff005d34>
    5e74:	d9003617 	ldw	r4,216(sp)
    5e78:	000d883a 	mov	r6,zero
    5e7c:	000f883a 	mov	r7,zero
    5e80:	980b883a 	mov	r5,r19
    5e84:	d8c03c15 	stw	r3,240(sp)
    5e88:	da003d15 	stw	r8,244(sp)
    5e8c:	000e8000 	call	e800 <__eqdf2>
    5e90:	d8c03c17 	ldw	r3,240(sp)
    5e94:	da003d17 	ldw	r8,244(sp)
    5e98:	103f9826 	beq	r2,zero,5cfc <__alt_data_end+0xff005cfc>
    5e9c:	00800044 	movi	r2,1
    5ea0:	10c7c83a 	sub	r3,r2,r3
    5ea4:	d8c02615 	stw	r3,152(sp)
    5ea8:	003f9506 	br	5d00 <__alt_data_end+0xff005d00>
    5eac:	d9002917 	ldw	r4,164(sp)
    5eb0:	d8c03217 	ldw	r3,200(sp)
    5eb4:	20800044 	addi	r2,r4,1
    5eb8:	1885883a 	add	r2,r3,r2
    5ebc:	d8802e15 	stw	r2,184(sp)
    5ec0:	103dbf0e 	bge	r2,zero,55c0 <__alt_data_end+0xff0055c0>
    5ec4:	0005883a 	mov	r2,zero
    5ec8:	003dbd06 	br	55c0 <__alt_data_end+0xff0055c0>
    5ecc:	2000211e 	bne	r4,zero,5f54 <___vfprintf_internal_r+0x2168>
    5ed0:	9480004c 	andi	r18,r18,1
    5ed4:	90001f1e 	bne	r18,zero,5f54 <___vfprintf_internal_r+0x2168>
    5ed8:	00800044 	movi	r2,1
    5edc:	d8802e15 	stw	r2,184(sp)
    5ee0:	003db706 	br	55c0 <__alt_data_end+0xff0055c0>
    5ee4:	00800b44 	movi	r2,45
    5ee8:	05adc83a 	sub	r22,zero,r22
    5eec:	d8802305 	stb	r2,140(sp)
    5ef0:	003f3f06 	br	5bf0 <__alt_data_end+0xff005bf0>
    5ef4:	0005883a 	mov	r2,zero
    5ef8:	003f5206 	br	5c44 <__alt_data_end+0xff005c44>
    5efc:	90a4703a 	and	r18,r18,r2
    5f00:	903f4e26 	beq	r18,zero,5c3c <__alt_data_end+0xff005c3c>
    5f04:	003f4a06 	br	5c30 <__alt_data_end+0xff005c30>
    5f08:	00800084 	movi	r2,2
    5f0c:	10c5c83a 	sub	r2,r2,r3
    5f10:	003f8406 	br	5d24 <__alt_data_end+0xff005d24>
    5f14:	d8802d17 	ldw	r2,180(sp)
    5f18:	d9002d17 	ldw	r4,180(sp)
    5f1c:	ac400043 	ldbu	r17,1(r21)
    5f20:	10800017 	ldw	r2,0(r2)
    5f24:	582b883a 	mov	r21,r11
    5f28:	d8802915 	stw	r2,164(sp)
    5f2c:	20800104 	addi	r2,r4,4
    5f30:	d9002917 	ldw	r4,164(sp)
    5f34:	d8802d15 	stw	r2,180(sp)
    5f38:	203e7a0e 	bge	r4,zero,5924 <__alt_data_end+0xff005924>
    5f3c:	8c403fcc 	andi	r17,r17,255
    5f40:	00bfffc4 	movi	r2,-1
    5f44:	8c40201c 	xori	r17,r17,128
    5f48:	d8802915 	stw	r2,164(sp)
    5f4c:	8c7fe004 	addi	r17,r17,-128
    5f50:	00380706 	br	3f70 <__alt_data_end+0xff003f70>
    5f54:	d8c02917 	ldw	r3,164(sp)
    5f58:	18c00084 	addi	r3,r3,2
    5f5c:	d8c02e15 	stw	r3,184(sp)
    5f60:	1805883a 	mov	r2,r3
    5f64:	183d960e 	bge	r3,zero,55c0 <__alt_data_end+0xff0055c0>
    5f68:	003fd606 	br	5ec4 <__alt_data_end+0xff005ec4>
    5f6c:	0005883a 	mov	r2,zero
    5f70:	003f8e06 	br	5dac <__alt_data_end+0xff005dac>
    5f74:	9080004c 	andi	r2,r18,1
    5f78:	103f811e 	bne	r2,zero,5d80 <__alt_data_end+0xff005d80>
    5f7c:	d8802117 	ldw	r2,132(sp)
    5f80:	1405c83a 	sub	r2,r2,r16
    5f84:	d8803315 	stw	r2,204(sp)
    5f88:	b47ef326 	beq	r22,r17,5b58 <__alt_data_end+0xff005b58>
    5f8c:	dd802617 	ldw	r22,152(sp)
    5f90:	003f1106 	br	5bd8 <__alt_data_end+0xff005bd8>
    5f94:	d9c02785 	stb	r7,158(sp)
    5f98:	00390406 	br	43ac <__alt_data_end+0xff0043ac>
    5f9c:	d9c02785 	stb	r7,158(sp)
    5fa0:	0038d306 	br	42f0 <__alt_data_end+0xff0042f0>
    5fa4:	d9c02785 	stb	r7,158(sp)
    5fa8:	003a6106 	br	4930 <__alt_data_end+0xff004930>
    5fac:	d9c02785 	stb	r7,158(sp)
    5fb0:	003af806 	br	4b94 <__alt_data_end+0xff004b94>
    5fb4:	0005883a 	mov	r2,zero
    5fb8:	003d7e06 	br	55b4 <__alt_data_end+0xff0055b4>
    5fbc:	d8802344 	addi	r2,sp,141
    5fc0:	003f1306 	br	5c10 <__alt_data_end+0xff005c10>
    5fc4:	d9c02785 	stb	r7,158(sp)
    5fc8:	00392306 	br	4458 <__alt_data_end+0xff004458>
    5fcc:	d9c02785 	stb	r7,158(sp)
    5fd0:	003aa906 	br	4a78 <__alt_data_end+0xff004a78>
    5fd4:	d9c02785 	stb	r7,158(sp)
    5fd8:	003a3d06 	br	48d0 <__alt_data_end+0xff0048d0>
    5fdc:	d9c02785 	stb	r7,158(sp)
    5fe0:	003aca06 	br	4b0c <__alt_data_end+0xff004b0c>

00005fe4 <__vfprintf_internal>:
    5fe4:	00800074 	movhi	r2,1
    5fe8:	10902504 	addi	r2,r2,16532
    5fec:	300f883a 	mov	r7,r6
    5ff0:	280d883a 	mov	r6,r5
    5ff4:	200b883a 	mov	r5,r4
    5ff8:	11000017 	ldw	r4,0(r2)
    5ffc:	0003dec1 	jmpi	3dec <___vfprintf_internal_r>

00006000 <__sbprintf>:
    6000:	2880030b 	ldhu	r2,12(r5)
    6004:	2ac01917 	ldw	r11,100(r5)
    6008:	2a80038b 	ldhu	r10,14(r5)
    600c:	2a400717 	ldw	r9,28(r5)
    6010:	2a000917 	ldw	r8,36(r5)
    6014:	defee204 	addi	sp,sp,-1144
    6018:	00c10004 	movi	r3,1024
    601c:	dc011a15 	stw	r16,1128(sp)
    6020:	10bfff4c 	andi	r2,r2,65533
    6024:	2821883a 	mov	r16,r5
    6028:	d8cb883a 	add	r5,sp,r3
    602c:	dc811c15 	stw	r18,1136(sp)
    6030:	dc411b15 	stw	r17,1132(sp)
    6034:	dfc11d15 	stw	ra,1140(sp)
    6038:	2025883a 	mov	r18,r4
    603c:	d881030d 	sth	r2,1036(sp)
    6040:	dac11915 	stw	r11,1124(sp)
    6044:	da81038d 	sth	r10,1038(sp)
    6048:	da410715 	stw	r9,1052(sp)
    604c:	da010915 	stw	r8,1060(sp)
    6050:	dec10015 	stw	sp,1024(sp)
    6054:	dec10415 	stw	sp,1040(sp)
    6058:	d8c10215 	stw	r3,1032(sp)
    605c:	d8c10515 	stw	r3,1044(sp)
    6060:	d8010615 	stw	zero,1048(sp)
    6064:	0003dec0 	call	3dec <___vfprintf_internal_r>
    6068:	1023883a 	mov	r17,r2
    606c:	10000416 	blt	r2,zero,6080 <__sbprintf+0x80>
    6070:	d9410004 	addi	r5,sp,1024
    6074:	9009883a 	mov	r4,r18
    6078:	0007cb40 	call	7cb4 <_fflush_r>
    607c:	10000d1e 	bne	r2,zero,60b4 <__sbprintf+0xb4>
    6080:	d881030b 	ldhu	r2,1036(sp)
    6084:	1080100c 	andi	r2,r2,64
    6088:	10000326 	beq	r2,zero,6098 <__sbprintf+0x98>
    608c:	8080030b 	ldhu	r2,12(r16)
    6090:	10801014 	ori	r2,r2,64
    6094:	8080030d 	sth	r2,12(r16)
    6098:	8805883a 	mov	r2,r17
    609c:	dfc11d17 	ldw	ra,1140(sp)
    60a0:	dc811c17 	ldw	r18,1136(sp)
    60a4:	dc411b17 	ldw	r17,1132(sp)
    60a8:	dc011a17 	ldw	r16,1128(sp)
    60ac:	dec11e04 	addi	sp,sp,1144
    60b0:	f800283a 	ret
    60b4:	047fffc4 	movi	r17,-1
    60b8:	003ff106 	br	6080 <__alt_data_end+0xff006080>

000060bc <__swsetup_r>:
    60bc:	00800074 	movhi	r2,1
    60c0:	defffd04 	addi	sp,sp,-12
    60c4:	10902504 	addi	r2,r2,16532
    60c8:	dc400115 	stw	r17,4(sp)
    60cc:	2023883a 	mov	r17,r4
    60d0:	11000017 	ldw	r4,0(r2)
    60d4:	dc000015 	stw	r16,0(sp)
    60d8:	dfc00215 	stw	ra,8(sp)
    60dc:	2821883a 	mov	r16,r5
    60e0:	20000226 	beq	r4,zero,60ec <__swsetup_r+0x30>
    60e4:	20800e17 	ldw	r2,56(r4)
    60e8:	10003126 	beq	r2,zero,61b0 <__swsetup_r+0xf4>
    60ec:	8080030b 	ldhu	r2,12(r16)
    60f0:	10c0020c 	andi	r3,r2,8
    60f4:	1009883a 	mov	r4,r2
    60f8:	18000f26 	beq	r3,zero,6138 <__swsetup_r+0x7c>
    60fc:	80c00417 	ldw	r3,16(r16)
    6100:	18001526 	beq	r3,zero,6158 <__swsetup_r+0x9c>
    6104:	1100004c 	andi	r4,r2,1
    6108:	20001c1e 	bne	r4,zero,617c <__swsetup_r+0xc0>
    610c:	1080008c 	andi	r2,r2,2
    6110:	1000291e 	bne	r2,zero,61b8 <__swsetup_r+0xfc>
    6114:	80800517 	ldw	r2,20(r16)
    6118:	80800215 	stw	r2,8(r16)
    611c:	18001c26 	beq	r3,zero,6190 <__swsetup_r+0xd4>
    6120:	0005883a 	mov	r2,zero
    6124:	dfc00217 	ldw	ra,8(sp)
    6128:	dc400117 	ldw	r17,4(sp)
    612c:	dc000017 	ldw	r16,0(sp)
    6130:	dec00304 	addi	sp,sp,12
    6134:	f800283a 	ret
    6138:	2080040c 	andi	r2,r4,16
    613c:	10002e26 	beq	r2,zero,61f8 <__swsetup_r+0x13c>
    6140:	2080010c 	andi	r2,r4,4
    6144:	10001e1e 	bne	r2,zero,61c0 <__swsetup_r+0x104>
    6148:	80c00417 	ldw	r3,16(r16)
    614c:	20800214 	ori	r2,r4,8
    6150:	8080030d 	sth	r2,12(r16)
    6154:	183feb1e 	bne	r3,zero,6104 <__alt_data_end+0xff006104>
    6158:	1100a00c 	andi	r4,r2,640
    615c:	01408004 	movi	r5,512
    6160:	217fe826 	beq	r4,r5,6104 <__alt_data_end+0xff006104>
    6164:	800b883a 	mov	r5,r16
    6168:	8809883a 	mov	r4,r17
    616c:	0008c340 	call	8c34 <__smakebuf_r>
    6170:	8080030b 	ldhu	r2,12(r16)
    6174:	80c00417 	ldw	r3,16(r16)
    6178:	003fe206 	br	6104 <__alt_data_end+0xff006104>
    617c:	80800517 	ldw	r2,20(r16)
    6180:	80000215 	stw	zero,8(r16)
    6184:	0085c83a 	sub	r2,zero,r2
    6188:	80800615 	stw	r2,24(r16)
    618c:	183fe41e 	bne	r3,zero,6120 <__alt_data_end+0xff006120>
    6190:	80c0030b 	ldhu	r3,12(r16)
    6194:	0005883a 	mov	r2,zero
    6198:	1900200c 	andi	r4,r3,128
    619c:	203fe126 	beq	r4,zero,6124 <__alt_data_end+0xff006124>
    61a0:	18c01014 	ori	r3,r3,64
    61a4:	80c0030d 	sth	r3,12(r16)
    61a8:	00bfffc4 	movi	r2,-1
    61ac:	003fdd06 	br	6124 <__alt_data_end+0xff006124>
    61b0:	00080900 	call	8090 <__sinit>
    61b4:	003fcd06 	br	60ec <__alt_data_end+0xff0060ec>
    61b8:	0005883a 	mov	r2,zero
    61bc:	003fd606 	br	6118 <__alt_data_end+0xff006118>
    61c0:	81400c17 	ldw	r5,48(r16)
    61c4:	28000626 	beq	r5,zero,61e0 <__swsetup_r+0x124>
    61c8:	80801004 	addi	r2,r16,64
    61cc:	28800326 	beq	r5,r2,61dc <__swsetup_r+0x120>
    61d0:	8809883a 	mov	r4,r17
    61d4:	00082040 	call	8204 <_free_r>
    61d8:	8100030b 	ldhu	r4,12(r16)
    61dc:	80000c15 	stw	zero,48(r16)
    61e0:	80c00417 	ldw	r3,16(r16)
    61e4:	00bff6c4 	movi	r2,-37
    61e8:	1108703a 	and	r4,r2,r4
    61ec:	80000115 	stw	zero,4(r16)
    61f0:	80c00015 	stw	r3,0(r16)
    61f4:	003fd506 	br	614c <__alt_data_end+0xff00614c>
    61f8:	00800244 	movi	r2,9
    61fc:	88800015 	stw	r2,0(r17)
    6200:	20801014 	ori	r2,r4,64
    6204:	8080030d 	sth	r2,12(r16)
    6208:	00bfffc4 	movi	r2,-1
    620c:	003fc506 	br	6124 <__alt_data_end+0xff006124>

00006210 <quorem>:
    6210:	defff704 	addi	sp,sp,-36
    6214:	dc800215 	stw	r18,8(sp)
    6218:	20800417 	ldw	r2,16(r4)
    621c:	2c800417 	ldw	r18,16(r5)
    6220:	dfc00815 	stw	ra,32(sp)
    6224:	ddc00715 	stw	r23,28(sp)
    6228:	dd800615 	stw	r22,24(sp)
    622c:	dd400515 	stw	r21,20(sp)
    6230:	dd000415 	stw	r20,16(sp)
    6234:	dcc00315 	stw	r19,12(sp)
    6238:	dc400115 	stw	r17,4(sp)
    623c:	dc000015 	stw	r16,0(sp)
    6240:	14807116 	blt	r2,r18,6408 <quorem+0x1f8>
    6244:	94bfffc4 	addi	r18,r18,-1
    6248:	94ad883a 	add	r22,r18,r18
    624c:	b5ad883a 	add	r22,r22,r22
    6250:	2c400504 	addi	r17,r5,20
    6254:	8da9883a 	add	r20,r17,r22
    6258:	25400504 	addi	r21,r4,20
    625c:	282f883a 	mov	r23,r5
    6260:	adad883a 	add	r22,r21,r22
    6264:	a1400017 	ldw	r5,0(r20)
    6268:	2021883a 	mov	r16,r4
    626c:	b1000017 	ldw	r4,0(r22)
    6270:	29400044 	addi	r5,r5,1
    6274:	000d5b00 	call	d5b0 <__udivsi3>
    6278:	1027883a 	mov	r19,r2
    627c:	10002c26 	beq	r2,zero,6330 <quorem+0x120>
    6280:	a813883a 	mov	r9,r21
    6284:	880b883a 	mov	r5,r17
    6288:	0009883a 	mov	r4,zero
    628c:	000d883a 	mov	r6,zero
    6290:	2a000017 	ldw	r8,0(r5)
    6294:	49c00017 	ldw	r7,0(r9)
    6298:	29400104 	addi	r5,r5,4
    629c:	40bfffcc 	andi	r2,r8,65535
    62a0:	14c5383a 	mul	r2,r2,r19
    62a4:	4010d43a 	srli	r8,r8,16
    62a8:	38ffffcc 	andi	r3,r7,65535
    62ac:	1105883a 	add	r2,r2,r4
    62b0:	1008d43a 	srli	r4,r2,16
    62b4:	44d1383a 	mul	r8,r8,r19
    62b8:	198d883a 	add	r6,r3,r6
    62bc:	10ffffcc 	andi	r3,r2,65535
    62c0:	30c7c83a 	sub	r3,r6,r3
    62c4:	380ed43a 	srli	r7,r7,16
    62c8:	4105883a 	add	r2,r8,r4
    62cc:	180dd43a 	srai	r6,r3,16
    62d0:	113fffcc 	andi	r4,r2,65535
    62d4:	390fc83a 	sub	r7,r7,r4
    62d8:	398d883a 	add	r6,r7,r6
    62dc:	300e943a 	slli	r7,r6,16
    62e0:	18ffffcc 	andi	r3,r3,65535
    62e4:	1008d43a 	srli	r4,r2,16
    62e8:	38ceb03a 	or	r7,r7,r3
    62ec:	49c00015 	stw	r7,0(r9)
    62f0:	300dd43a 	srai	r6,r6,16
    62f4:	4a400104 	addi	r9,r9,4
    62f8:	a17fe52e 	bgeu	r20,r5,6290 <__alt_data_end+0xff006290>
    62fc:	b0800017 	ldw	r2,0(r22)
    6300:	10000b1e 	bne	r2,zero,6330 <quorem+0x120>
    6304:	b0bfff04 	addi	r2,r22,-4
    6308:	a880082e 	bgeu	r21,r2,632c <quorem+0x11c>
    630c:	b0ffff17 	ldw	r3,-4(r22)
    6310:	18000326 	beq	r3,zero,6320 <quorem+0x110>
    6314:	00000506 	br	632c <quorem+0x11c>
    6318:	10c00017 	ldw	r3,0(r2)
    631c:	1800031e 	bne	r3,zero,632c <quorem+0x11c>
    6320:	10bfff04 	addi	r2,r2,-4
    6324:	94bfffc4 	addi	r18,r18,-1
    6328:	a8bffb36 	bltu	r21,r2,6318 <__alt_data_end+0xff006318>
    632c:	84800415 	stw	r18,16(r16)
    6330:	b80b883a 	mov	r5,r23
    6334:	8009883a 	mov	r4,r16
    6338:	0009b680 	call	9b68 <__mcmp>
    633c:	10002616 	blt	r2,zero,63d8 <quorem+0x1c8>
    6340:	9cc00044 	addi	r19,r19,1
    6344:	a805883a 	mov	r2,r21
    6348:	000b883a 	mov	r5,zero
    634c:	11000017 	ldw	r4,0(r2)
    6350:	89800017 	ldw	r6,0(r17)
    6354:	10800104 	addi	r2,r2,4
    6358:	20ffffcc 	andi	r3,r4,65535
    635c:	194b883a 	add	r5,r3,r5
    6360:	30ffffcc 	andi	r3,r6,65535
    6364:	28c7c83a 	sub	r3,r5,r3
    6368:	300cd43a 	srli	r6,r6,16
    636c:	2008d43a 	srli	r4,r4,16
    6370:	180bd43a 	srai	r5,r3,16
    6374:	18ffffcc 	andi	r3,r3,65535
    6378:	2189c83a 	sub	r4,r4,r6
    637c:	2149883a 	add	r4,r4,r5
    6380:	200c943a 	slli	r6,r4,16
    6384:	8c400104 	addi	r17,r17,4
    6388:	200bd43a 	srai	r5,r4,16
    638c:	30c6b03a 	or	r3,r6,r3
    6390:	10ffff15 	stw	r3,-4(r2)
    6394:	a47fed2e 	bgeu	r20,r17,634c <__alt_data_end+0xff00634c>
    6398:	9485883a 	add	r2,r18,r18
    639c:	1085883a 	add	r2,r2,r2
    63a0:	a887883a 	add	r3,r21,r2
    63a4:	18800017 	ldw	r2,0(r3)
    63a8:	10000b1e 	bne	r2,zero,63d8 <quorem+0x1c8>
    63ac:	18bfff04 	addi	r2,r3,-4
    63b0:	a880082e 	bgeu	r21,r2,63d4 <quorem+0x1c4>
    63b4:	18ffff17 	ldw	r3,-4(r3)
    63b8:	18000326 	beq	r3,zero,63c8 <quorem+0x1b8>
    63bc:	00000506 	br	63d4 <quorem+0x1c4>
    63c0:	10c00017 	ldw	r3,0(r2)
    63c4:	1800031e 	bne	r3,zero,63d4 <quorem+0x1c4>
    63c8:	10bfff04 	addi	r2,r2,-4
    63cc:	94bfffc4 	addi	r18,r18,-1
    63d0:	a8bffb36 	bltu	r21,r2,63c0 <__alt_data_end+0xff0063c0>
    63d4:	84800415 	stw	r18,16(r16)
    63d8:	9805883a 	mov	r2,r19
    63dc:	dfc00817 	ldw	ra,32(sp)
    63e0:	ddc00717 	ldw	r23,28(sp)
    63e4:	dd800617 	ldw	r22,24(sp)
    63e8:	dd400517 	ldw	r21,20(sp)
    63ec:	dd000417 	ldw	r20,16(sp)
    63f0:	dcc00317 	ldw	r19,12(sp)
    63f4:	dc800217 	ldw	r18,8(sp)
    63f8:	dc400117 	ldw	r17,4(sp)
    63fc:	dc000017 	ldw	r16,0(sp)
    6400:	dec00904 	addi	sp,sp,36
    6404:	f800283a 	ret
    6408:	0005883a 	mov	r2,zero
    640c:	003ff306 	br	63dc <__alt_data_end+0xff0063dc>

00006410 <_dtoa_r>:
    6410:	20801017 	ldw	r2,64(r4)
    6414:	deffde04 	addi	sp,sp,-136
    6418:	df002015 	stw	fp,128(sp)
    641c:	dcc01b15 	stw	r19,108(sp)
    6420:	dc801a15 	stw	r18,104(sp)
    6424:	dc401915 	stw	r17,100(sp)
    6428:	dc001815 	stw	r16,96(sp)
    642c:	dfc02115 	stw	ra,132(sp)
    6430:	ddc01f15 	stw	r23,124(sp)
    6434:	dd801e15 	stw	r22,120(sp)
    6438:	dd401d15 	stw	r21,116(sp)
    643c:	dd001c15 	stw	r20,112(sp)
    6440:	d9c00315 	stw	r7,12(sp)
    6444:	2039883a 	mov	fp,r4
    6448:	3023883a 	mov	r17,r6
    644c:	2825883a 	mov	r18,r5
    6450:	dc002417 	ldw	r16,144(sp)
    6454:	3027883a 	mov	r19,r6
    6458:	10000826 	beq	r2,zero,647c <_dtoa_r+0x6c>
    645c:	21801117 	ldw	r6,68(r4)
    6460:	00c00044 	movi	r3,1
    6464:	100b883a 	mov	r5,r2
    6468:	1986983a 	sll	r3,r3,r6
    646c:	11800115 	stw	r6,4(r2)
    6470:	10c00215 	stw	r3,8(r2)
    6474:	00093480 	call	9348 <_Bfree>
    6478:	e0001015 	stw	zero,64(fp)
    647c:	88002e16 	blt	r17,zero,6538 <_dtoa_r+0x128>
    6480:	80000015 	stw	zero,0(r16)
    6484:	889ffc2c 	andhi	r2,r17,32752
    6488:	00dffc34 	movhi	r3,32752
    648c:	10c01c26 	beq	r2,r3,6500 <_dtoa_r+0xf0>
    6490:	000d883a 	mov	r6,zero
    6494:	000f883a 	mov	r7,zero
    6498:	9009883a 	mov	r4,r18
    649c:	980b883a 	mov	r5,r19
    64a0:	000e8000 	call	e800 <__eqdf2>
    64a4:	10002b1e 	bne	r2,zero,6554 <_dtoa_r+0x144>
    64a8:	d9c02317 	ldw	r7,140(sp)
    64ac:	00800044 	movi	r2,1
    64b0:	38800015 	stw	r2,0(r7)
    64b4:	d8802517 	ldw	r2,148(sp)
    64b8:	10019e26 	beq	r2,zero,6b34 <_dtoa_r+0x724>
    64bc:	d8c02517 	ldw	r3,148(sp)
    64c0:	00800074 	movhi	r2,1
    64c4:	10890844 	addi	r2,r2,9249
    64c8:	18800015 	stw	r2,0(r3)
    64cc:	10bfffc4 	addi	r2,r2,-1
    64d0:	dfc02117 	ldw	ra,132(sp)
    64d4:	df002017 	ldw	fp,128(sp)
    64d8:	ddc01f17 	ldw	r23,124(sp)
    64dc:	dd801e17 	ldw	r22,120(sp)
    64e0:	dd401d17 	ldw	r21,116(sp)
    64e4:	dd001c17 	ldw	r20,112(sp)
    64e8:	dcc01b17 	ldw	r19,108(sp)
    64ec:	dc801a17 	ldw	r18,104(sp)
    64f0:	dc401917 	ldw	r17,100(sp)
    64f4:	dc001817 	ldw	r16,96(sp)
    64f8:	dec02204 	addi	sp,sp,136
    64fc:	f800283a 	ret
    6500:	d8c02317 	ldw	r3,140(sp)
    6504:	0089c3c4 	movi	r2,9999
    6508:	18800015 	stw	r2,0(r3)
    650c:	90017726 	beq	r18,zero,6aec <_dtoa_r+0x6dc>
    6510:	00800074 	movhi	r2,1
    6514:	10891404 	addi	r2,r2,9296
    6518:	d9002517 	ldw	r4,148(sp)
    651c:	203fec26 	beq	r4,zero,64d0 <__alt_data_end+0xff0064d0>
    6520:	10c000c7 	ldb	r3,3(r2)
    6524:	1801781e 	bne	r3,zero,6b08 <_dtoa_r+0x6f8>
    6528:	10c000c4 	addi	r3,r2,3
    652c:	d9802517 	ldw	r6,148(sp)
    6530:	30c00015 	stw	r3,0(r6)
    6534:	003fe606 	br	64d0 <__alt_data_end+0xff0064d0>
    6538:	04e00034 	movhi	r19,32768
    653c:	9cffffc4 	addi	r19,r19,-1
    6540:	00800044 	movi	r2,1
    6544:	8ce6703a 	and	r19,r17,r19
    6548:	80800015 	stw	r2,0(r16)
    654c:	9823883a 	mov	r17,r19
    6550:	003fcc06 	br	6484 <__alt_data_end+0xff006484>
    6554:	d8800204 	addi	r2,sp,8
    6558:	d8800015 	stw	r2,0(sp)
    655c:	d9c00104 	addi	r7,sp,4
    6560:	900b883a 	mov	r5,r18
    6564:	980d883a 	mov	r6,r19
    6568:	e009883a 	mov	r4,fp
    656c:	8820d53a 	srli	r16,r17,20
    6570:	0009f340 	call	9f34 <__d2b>
    6574:	d8800915 	stw	r2,36(sp)
    6578:	8001651e 	bne	r16,zero,6b10 <_dtoa_r+0x700>
    657c:	dd800217 	ldw	r22,8(sp)
    6580:	dc000117 	ldw	r16,4(sp)
    6584:	00800804 	movi	r2,32
    6588:	b421883a 	add	r16,r22,r16
    658c:	80c10c84 	addi	r3,r16,1074
    6590:	10c2d10e 	bge	r2,r3,70d8 <_dtoa_r+0xcc8>
    6594:	00801004 	movi	r2,64
    6598:	81010484 	addi	r4,r16,1042
    659c:	10c7c83a 	sub	r3,r2,r3
    65a0:	9108d83a 	srl	r4,r18,r4
    65a4:	88e2983a 	sll	r17,r17,r3
    65a8:	2448b03a 	or	r4,r4,r17
    65ac:	000f3540 	call	f354 <__floatunsidf>
    65b0:	017f8434 	movhi	r5,65040
    65b4:	01800044 	movi	r6,1
    65b8:	1009883a 	mov	r4,r2
    65bc:	194b883a 	add	r5,r3,r5
    65c0:	843fffc4 	addi	r16,r16,-1
    65c4:	d9801115 	stw	r6,68(sp)
    65c8:	000d883a 	mov	r6,zero
    65cc:	01cffe34 	movhi	r7,16376
    65d0:	000ea580 	call	ea58 <__subdf3>
    65d4:	0198dbf4 	movhi	r6,25455
    65d8:	01cff4f4 	movhi	r7,16339
    65dc:	3190d844 	addi	r6,r6,17249
    65e0:	39e1e9c4 	addi	r7,r7,-30809
    65e4:	1009883a 	mov	r4,r2
    65e8:	180b883a 	mov	r5,r3
    65ec:	0002ab40 	call	2ab4 <__muldf3>
    65f0:	01a2d874 	movhi	r6,35681
    65f4:	01cff1f4 	movhi	r7,16327
    65f8:	31b22cc4 	addi	r6,r6,-14157
    65fc:	39e28a04 	addi	r7,r7,-30168
    6600:	180b883a 	mov	r5,r3
    6604:	1009883a 	mov	r4,r2
    6608:	000d66c0 	call	d66c <__adddf3>
    660c:	8009883a 	mov	r4,r16
    6610:	1029883a 	mov	r20,r2
    6614:	1823883a 	mov	r17,r3
    6618:	000324c0 	call	324c <__floatsidf>
    661c:	019427f4 	movhi	r6,20639
    6620:	01cff4f4 	movhi	r7,16339
    6624:	319e7ec4 	addi	r6,r6,31227
    6628:	39d104c4 	addi	r7,r7,17427
    662c:	1009883a 	mov	r4,r2
    6630:	180b883a 	mov	r5,r3
    6634:	0002ab40 	call	2ab4 <__muldf3>
    6638:	100d883a 	mov	r6,r2
    663c:	180f883a 	mov	r7,r3
    6640:	a009883a 	mov	r4,r20
    6644:	880b883a 	mov	r5,r17
    6648:	000d66c0 	call	d66c <__adddf3>
    664c:	1009883a 	mov	r4,r2
    6650:	180b883a 	mov	r5,r3
    6654:	1029883a 	mov	r20,r2
    6658:	1823883a 	mov	r17,r3
    665c:	00031cc0 	call	31cc <__fixdfsi>
    6660:	000d883a 	mov	r6,zero
    6664:	000f883a 	mov	r7,zero
    6668:	a009883a 	mov	r4,r20
    666c:	880b883a 	mov	r5,r17
    6670:	d8800515 	stw	r2,20(sp)
    6674:	000e9640 	call	e964 <__ledf2>
    6678:	10028716 	blt	r2,zero,7098 <_dtoa_r+0xc88>
    667c:	d8c00517 	ldw	r3,20(sp)
    6680:	00800584 	movi	r2,22
    6684:	10c27536 	bltu	r2,r3,705c <_dtoa_r+0xc4c>
    6688:	180490fa 	slli	r2,r3,3
    668c:	00c00074 	movhi	r3,1
    6690:	18c93004 	addi	r3,r3,9408
    6694:	1885883a 	add	r2,r3,r2
    6698:	11000017 	ldw	r4,0(r2)
    669c:	11400117 	ldw	r5,4(r2)
    66a0:	900d883a 	mov	r6,r18
    66a4:	980f883a 	mov	r7,r19
    66a8:	000e8880 	call	e888 <__gedf2>
    66ac:	00828d0e 	bge	zero,r2,70e4 <_dtoa_r+0xcd4>
    66b0:	d9000517 	ldw	r4,20(sp)
    66b4:	d8000e15 	stw	zero,56(sp)
    66b8:	213fffc4 	addi	r4,r4,-1
    66bc:	d9000515 	stw	r4,20(sp)
    66c0:	b42dc83a 	sub	r22,r22,r16
    66c4:	b5bfffc4 	addi	r22,r22,-1
    66c8:	b0026f16 	blt	r22,zero,7088 <_dtoa_r+0xc78>
    66cc:	d8000815 	stw	zero,32(sp)
    66d0:	d9c00517 	ldw	r7,20(sp)
    66d4:	38026416 	blt	r7,zero,7068 <_dtoa_r+0xc58>
    66d8:	b1ed883a 	add	r22,r22,r7
    66dc:	d9c00d15 	stw	r7,52(sp)
    66e0:	d8000a15 	stw	zero,40(sp)
    66e4:	d9800317 	ldw	r6,12(sp)
    66e8:	00800244 	movi	r2,9
    66ec:	11811436 	bltu	r2,r6,6b40 <_dtoa_r+0x730>
    66f0:	00800144 	movi	r2,5
    66f4:	1184e10e 	bge	r2,r6,7a7c <_dtoa_r+0x166c>
    66f8:	31bfff04 	addi	r6,r6,-4
    66fc:	d9800315 	stw	r6,12(sp)
    6700:	0023883a 	mov	r17,zero
    6704:	d9800317 	ldw	r6,12(sp)
    6708:	008000c4 	movi	r2,3
    670c:	30836726 	beq	r6,r2,74ac <_dtoa_r+0x109c>
    6710:	1183410e 	bge	r2,r6,7418 <_dtoa_r+0x1008>
    6714:	d9c00317 	ldw	r7,12(sp)
    6718:	00800104 	movi	r2,4
    671c:	38827c26 	beq	r7,r2,7110 <_dtoa_r+0xd00>
    6720:	00800144 	movi	r2,5
    6724:	3884c41e 	bne	r7,r2,7a38 <_dtoa_r+0x1628>
    6728:	00800044 	movi	r2,1
    672c:	d8800b15 	stw	r2,44(sp)
    6730:	d8c00517 	ldw	r3,20(sp)
    6734:	d9002217 	ldw	r4,136(sp)
    6738:	1907883a 	add	r3,r3,r4
    673c:	19800044 	addi	r6,r3,1
    6740:	d8c00c15 	stw	r3,48(sp)
    6744:	d9800615 	stw	r6,24(sp)
    6748:	0183a40e 	bge	zero,r6,75dc <_dtoa_r+0x11cc>
    674c:	d9800617 	ldw	r6,24(sp)
    6750:	3021883a 	mov	r16,r6
    6754:	e0001115 	stw	zero,68(fp)
    6758:	008005c4 	movi	r2,23
    675c:	1184c92e 	bgeu	r2,r6,7a84 <_dtoa_r+0x1674>
    6760:	00c00044 	movi	r3,1
    6764:	00800104 	movi	r2,4
    6768:	1085883a 	add	r2,r2,r2
    676c:	11000504 	addi	r4,r2,20
    6770:	180b883a 	mov	r5,r3
    6774:	18c00044 	addi	r3,r3,1
    6778:	313ffb2e 	bgeu	r6,r4,6768 <__alt_data_end+0xff006768>
    677c:	e1401115 	stw	r5,68(fp)
    6780:	e009883a 	mov	r4,fp
    6784:	00092a00 	call	92a0 <_Balloc>
    6788:	d8800715 	stw	r2,28(sp)
    678c:	e0801015 	stw	r2,64(fp)
    6790:	00800384 	movi	r2,14
    6794:	1400f736 	bltu	r2,r16,6b74 <_dtoa_r+0x764>
    6798:	8800f626 	beq	r17,zero,6b74 <_dtoa_r+0x764>
    679c:	d9c00517 	ldw	r7,20(sp)
    67a0:	01c39a0e 	bge	zero,r7,760c <_dtoa_r+0x11fc>
    67a4:	388003cc 	andi	r2,r7,15
    67a8:	100490fa 	slli	r2,r2,3
    67ac:	382bd13a 	srai	r21,r7,4
    67b0:	00c00074 	movhi	r3,1
    67b4:	18c93004 	addi	r3,r3,9408
    67b8:	1885883a 	add	r2,r3,r2
    67bc:	a8c0040c 	andi	r3,r21,16
    67c0:	12400017 	ldw	r9,0(r2)
    67c4:	12000117 	ldw	r8,4(r2)
    67c8:	18037926 	beq	r3,zero,75b0 <_dtoa_r+0x11a0>
    67cc:	00800074 	movhi	r2,1
    67d0:	10892604 	addi	r2,r2,9368
    67d4:	11800817 	ldw	r6,32(r2)
    67d8:	11c00917 	ldw	r7,36(r2)
    67dc:	9009883a 	mov	r4,r18
    67e0:	980b883a 	mov	r5,r19
    67e4:	da001715 	stw	r8,92(sp)
    67e8:	da401615 	stw	r9,88(sp)
    67ec:	000df180 	call	df18 <__divdf3>
    67f0:	da001717 	ldw	r8,92(sp)
    67f4:	da401617 	ldw	r9,88(sp)
    67f8:	ad4003cc 	andi	r21,r21,15
    67fc:	040000c4 	movi	r16,3
    6800:	1023883a 	mov	r17,r2
    6804:	1829883a 	mov	r20,r3
    6808:	a8001126 	beq	r21,zero,6850 <_dtoa_r+0x440>
    680c:	05c00074 	movhi	r23,1
    6810:	bdc92604 	addi	r23,r23,9368
    6814:	4805883a 	mov	r2,r9
    6818:	4007883a 	mov	r3,r8
    681c:	a980004c 	andi	r6,r21,1
    6820:	1009883a 	mov	r4,r2
    6824:	a82bd07a 	srai	r21,r21,1
    6828:	180b883a 	mov	r5,r3
    682c:	30000426 	beq	r6,zero,6840 <_dtoa_r+0x430>
    6830:	b9800017 	ldw	r6,0(r23)
    6834:	b9c00117 	ldw	r7,4(r23)
    6838:	84000044 	addi	r16,r16,1
    683c:	0002ab40 	call	2ab4 <__muldf3>
    6840:	bdc00204 	addi	r23,r23,8
    6844:	a83ff51e 	bne	r21,zero,681c <__alt_data_end+0xff00681c>
    6848:	1013883a 	mov	r9,r2
    684c:	1811883a 	mov	r8,r3
    6850:	480d883a 	mov	r6,r9
    6854:	400f883a 	mov	r7,r8
    6858:	8809883a 	mov	r4,r17
    685c:	a00b883a 	mov	r5,r20
    6860:	000df180 	call	df18 <__divdf3>
    6864:	d8800f15 	stw	r2,60(sp)
    6868:	d8c01015 	stw	r3,64(sp)
    686c:	d8c00e17 	ldw	r3,56(sp)
    6870:	18000626 	beq	r3,zero,688c <_dtoa_r+0x47c>
    6874:	d9000f17 	ldw	r4,60(sp)
    6878:	d9401017 	ldw	r5,64(sp)
    687c:	000d883a 	mov	r6,zero
    6880:	01cffc34 	movhi	r7,16368
    6884:	000e9640 	call	e964 <__ledf2>
    6888:	10040b16 	blt	r2,zero,78b8 <_dtoa_r+0x14a8>
    688c:	8009883a 	mov	r4,r16
    6890:	000324c0 	call	324c <__floatsidf>
    6894:	d9800f17 	ldw	r6,60(sp)
    6898:	d9c01017 	ldw	r7,64(sp)
    689c:	1009883a 	mov	r4,r2
    68a0:	180b883a 	mov	r5,r3
    68a4:	0002ab40 	call	2ab4 <__muldf3>
    68a8:	000d883a 	mov	r6,zero
    68ac:	01d00734 	movhi	r7,16412
    68b0:	1009883a 	mov	r4,r2
    68b4:	180b883a 	mov	r5,r3
    68b8:	000d66c0 	call	d66c <__adddf3>
    68bc:	1021883a 	mov	r16,r2
    68c0:	d8800617 	ldw	r2,24(sp)
    68c4:	047f3034 	movhi	r17,64704
    68c8:	1c63883a 	add	r17,r3,r17
    68cc:	10031826 	beq	r2,zero,7530 <_dtoa_r+0x1120>
    68d0:	d8c00517 	ldw	r3,20(sp)
    68d4:	db000617 	ldw	r12,24(sp)
    68d8:	d8c01315 	stw	r3,76(sp)
    68dc:	d9000b17 	ldw	r4,44(sp)
    68e0:	20038f26 	beq	r4,zero,7720 <_dtoa_r+0x1310>
    68e4:	60bfffc4 	addi	r2,r12,-1
    68e8:	100490fa 	slli	r2,r2,3
    68ec:	00c00074 	movhi	r3,1
    68f0:	18c93004 	addi	r3,r3,9408
    68f4:	1885883a 	add	r2,r3,r2
    68f8:	11800017 	ldw	r6,0(r2)
    68fc:	11c00117 	ldw	r7,4(r2)
    6900:	d8800717 	ldw	r2,28(sp)
    6904:	0009883a 	mov	r4,zero
    6908:	014ff834 	movhi	r5,16352
    690c:	db001615 	stw	r12,88(sp)
    6910:	15c00044 	addi	r23,r2,1
    6914:	000df180 	call	df18 <__divdf3>
    6918:	800d883a 	mov	r6,r16
    691c:	880f883a 	mov	r7,r17
    6920:	1009883a 	mov	r4,r2
    6924:	180b883a 	mov	r5,r3
    6928:	000ea580 	call	ea58 <__subdf3>
    692c:	d9401017 	ldw	r5,64(sp)
    6930:	d9000f17 	ldw	r4,60(sp)
    6934:	102b883a 	mov	r21,r2
    6938:	d8c01215 	stw	r3,72(sp)
    693c:	00031cc0 	call	31cc <__fixdfsi>
    6940:	1009883a 	mov	r4,r2
    6944:	1029883a 	mov	r20,r2
    6948:	000324c0 	call	324c <__floatsidf>
    694c:	d9000f17 	ldw	r4,60(sp)
    6950:	d9401017 	ldw	r5,64(sp)
    6954:	100d883a 	mov	r6,r2
    6958:	180f883a 	mov	r7,r3
    695c:	000ea580 	call	ea58 <__subdf3>
    6960:	1823883a 	mov	r17,r3
    6964:	d8c00717 	ldw	r3,28(sp)
    6968:	d9401217 	ldw	r5,72(sp)
    696c:	a2000c04 	addi	r8,r20,48
    6970:	1021883a 	mov	r16,r2
    6974:	1a000005 	stb	r8,0(r3)
    6978:	800d883a 	mov	r6,r16
    697c:	880f883a 	mov	r7,r17
    6980:	a809883a 	mov	r4,r21
    6984:	4029883a 	mov	r20,r8
    6988:	000e8880 	call	e888 <__gedf2>
    698c:	00841d16 	blt	zero,r2,7a04 <_dtoa_r+0x15f4>
    6990:	800d883a 	mov	r6,r16
    6994:	880f883a 	mov	r7,r17
    6998:	0009883a 	mov	r4,zero
    699c:	014ffc34 	movhi	r5,16368
    69a0:	000ea580 	call	ea58 <__subdf3>
    69a4:	d9401217 	ldw	r5,72(sp)
    69a8:	100d883a 	mov	r6,r2
    69ac:	180f883a 	mov	r7,r3
    69b0:	a809883a 	mov	r4,r21
    69b4:	000e8880 	call	e888 <__gedf2>
    69b8:	db001617 	ldw	r12,88(sp)
    69bc:	00840e16 	blt	zero,r2,79f8 <_dtoa_r+0x15e8>
    69c0:	00800044 	movi	r2,1
    69c4:	13006b0e 	bge	r2,r12,6b74 <_dtoa_r+0x764>
    69c8:	d9000717 	ldw	r4,28(sp)
    69cc:	dd800f15 	stw	r22,60(sp)
    69d0:	dcc01015 	stw	r19,64(sp)
    69d4:	2319883a 	add	r12,r4,r12
    69d8:	dcc01217 	ldw	r19,72(sp)
    69dc:	602d883a 	mov	r22,r12
    69e0:	dc801215 	stw	r18,72(sp)
    69e4:	b825883a 	mov	r18,r23
    69e8:	00000906 	br	6a10 <_dtoa_r+0x600>
    69ec:	000ea580 	call	ea58 <__subdf3>
    69f0:	a80d883a 	mov	r6,r21
    69f4:	980f883a 	mov	r7,r19
    69f8:	1009883a 	mov	r4,r2
    69fc:	180b883a 	mov	r5,r3
    6a00:	000e9640 	call	e964 <__ledf2>
    6a04:	1003e816 	blt	r2,zero,79a8 <_dtoa_r+0x1598>
    6a08:	b825883a 	mov	r18,r23
    6a0c:	bd83e926 	beq	r23,r22,79b4 <_dtoa_r+0x15a4>
    6a10:	a809883a 	mov	r4,r21
    6a14:	980b883a 	mov	r5,r19
    6a18:	000d883a 	mov	r6,zero
    6a1c:	01d00934 	movhi	r7,16420
    6a20:	0002ab40 	call	2ab4 <__muldf3>
    6a24:	000d883a 	mov	r6,zero
    6a28:	01d00934 	movhi	r7,16420
    6a2c:	8009883a 	mov	r4,r16
    6a30:	880b883a 	mov	r5,r17
    6a34:	102b883a 	mov	r21,r2
    6a38:	1827883a 	mov	r19,r3
    6a3c:	0002ab40 	call	2ab4 <__muldf3>
    6a40:	180b883a 	mov	r5,r3
    6a44:	1009883a 	mov	r4,r2
    6a48:	1821883a 	mov	r16,r3
    6a4c:	1023883a 	mov	r17,r2
    6a50:	00031cc0 	call	31cc <__fixdfsi>
    6a54:	1009883a 	mov	r4,r2
    6a58:	1029883a 	mov	r20,r2
    6a5c:	000324c0 	call	324c <__floatsidf>
    6a60:	8809883a 	mov	r4,r17
    6a64:	800b883a 	mov	r5,r16
    6a68:	100d883a 	mov	r6,r2
    6a6c:	180f883a 	mov	r7,r3
    6a70:	000ea580 	call	ea58 <__subdf3>
    6a74:	a5000c04 	addi	r20,r20,48
    6a78:	a80d883a 	mov	r6,r21
    6a7c:	980f883a 	mov	r7,r19
    6a80:	1009883a 	mov	r4,r2
    6a84:	180b883a 	mov	r5,r3
    6a88:	95000005 	stb	r20,0(r18)
    6a8c:	1021883a 	mov	r16,r2
    6a90:	1823883a 	mov	r17,r3
    6a94:	000e9640 	call	e964 <__ledf2>
    6a98:	bdc00044 	addi	r23,r23,1
    6a9c:	800d883a 	mov	r6,r16
    6aa0:	880f883a 	mov	r7,r17
    6aa4:	0009883a 	mov	r4,zero
    6aa8:	014ffc34 	movhi	r5,16368
    6aac:	103fcf0e 	bge	r2,zero,69ec <__alt_data_end+0xff0069ec>
    6ab0:	d8c01317 	ldw	r3,76(sp)
    6ab4:	d8c00515 	stw	r3,20(sp)
    6ab8:	d9400917 	ldw	r5,36(sp)
    6abc:	e009883a 	mov	r4,fp
    6ac0:	00093480 	call	9348 <_Bfree>
    6ac4:	d9000517 	ldw	r4,20(sp)
    6ac8:	d9802317 	ldw	r6,140(sp)
    6acc:	d9c02517 	ldw	r7,148(sp)
    6ad0:	b8000005 	stb	zero,0(r23)
    6ad4:	20800044 	addi	r2,r4,1
    6ad8:	30800015 	stw	r2,0(r6)
    6adc:	3802aa26 	beq	r7,zero,7588 <_dtoa_r+0x1178>
    6ae0:	3dc00015 	stw	r23,0(r7)
    6ae4:	d8800717 	ldw	r2,28(sp)
    6ae8:	003e7906 	br	64d0 <__alt_data_end+0xff0064d0>
    6aec:	00800434 	movhi	r2,16
    6af0:	10bfffc4 	addi	r2,r2,-1
    6af4:	88a2703a 	and	r17,r17,r2
    6af8:	883e851e 	bne	r17,zero,6510 <__alt_data_end+0xff006510>
    6afc:	00800074 	movhi	r2,1
    6b00:	10891104 	addi	r2,r2,9284
    6b04:	003e8406 	br	6518 <__alt_data_end+0xff006518>
    6b08:	10c00204 	addi	r3,r2,8
    6b0c:	003e8706 	br	652c <__alt_data_end+0xff00652c>
    6b10:	01400434 	movhi	r5,16
    6b14:	297fffc4 	addi	r5,r5,-1
    6b18:	994a703a 	and	r5,r19,r5
    6b1c:	9009883a 	mov	r4,r18
    6b20:	843f0044 	addi	r16,r16,-1023
    6b24:	294ffc34 	orhi	r5,r5,16368
    6b28:	dd800217 	ldw	r22,8(sp)
    6b2c:	d8001115 	stw	zero,68(sp)
    6b30:	003ea506 	br	65c8 <__alt_data_end+0xff0065c8>
    6b34:	00800074 	movhi	r2,1
    6b38:	10890804 	addi	r2,r2,9248
    6b3c:	003e6406 	br	64d0 <__alt_data_end+0xff0064d0>
    6b40:	e0001115 	stw	zero,68(fp)
    6b44:	000b883a 	mov	r5,zero
    6b48:	e009883a 	mov	r4,fp
    6b4c:	00092a00 	call	92a0 <_Balloc>
    6b50:	01bfffc4 	movi	r6,-1
    6b54:	01c00044 	movi	r7,1
    6b58:	d8800715 	stw	r2,28(sp)
    6b5c:	d9800c15 	stw	r6,48(sp)
    6b60:	e0801015 	stw	r2,64(fp)
    6b64:	d8000315 	stw	zero,12(sp)
    6b68:	d9c00b15 	stw	r7,44(sp)
    6b6c:	d9800615 	stw	r6,24(sp)
    6b70:	d8002215 	stw	zero,136(sp)
    6b74:	d8800117 	ldw	r2,4(sp)
    6b78:	10008916 	blt	r2,zero,6da0 <_dtoa_r+0x990>
    6b7c:	d9000517 	ldw	r4,20(sp)
    6b80:	00c00384 	movi	r3,14
    6b84:	19008616 	blt	r3,r4,6da0 <_dtoa_r+0x990>
    6b88:	200490fa 	slli	r2,r4,3
    6b8c:	00c00074 	movhi	r3,1
    6b90:	d9802217 	ldw	r6,136(sp)
    6b94:	18c93004 	addi	r3,r3,9408
    6b98:	1885883a 	add	r2,r3,r2
    6b9c:	14000017 	ldw	r16,0(r2)
    6ba0:	14400117 	ldw	r17,4(r2)
    6ba4:	30016316 	blt	r6,zero,7134 <_dtoa_r+0xd24>
    6ba8:	800d883a 	mov	r6,r16
    6bac:	880f883a 	mov	r7,r17
    6bb0:	9009883a 	mov	r4,r18
    6bb4:	980b883a 	mov	r5,r19
    6bb8:	000df180 	call	df18 <__divdf3>
    6bbc:	180b883a 	mov	r5,r3
    6bc0:	1009883a 	mov	r4,r2
    6bc4:	00031cc0 	call	31cc <__fixdfsi>
    6bc8:	1009883a 	mov	r4,r2
    6bcc:	102b883a 	mov	r21,r2
    6bd0:	000324c0 	call	324c <__floatsidf>
    6bd4:	800d883a 	mov	r6,r16
    6bd8:	880f883a 	mov	r7,r17
    6bdc:	1009883a 	mov	r4,r2
    6be0:	180b883a 	mov	r5,r3
    6be4:	0002ab40 	call	2ab4 <__muldf3>
    6be8:	100d883a 	mov	r6,r2
    6bec:	180f883a 	mov	r7,r3
    6bf0:	9009883a 	mov	r4,r18
    6bf4:	980b883a 	mov	r5,r19
    6bf8:	000ea580 	call	ea58 <__subdf3>
    6bfc:	d9c00717 	ldw	r7,28(sp)
    6c00:	1009883a 	mov	r4,r2
    6c04:	a8800c04 	addi	r2,r21,48
    6c08:	38800005 	stb	r2,0(r7)
    6c0c:	3dc00044 	addi	r23,r7,1
    6c10:	d9c00617 	ldw	r7,24(sp)
    6c14:	01800044 	movi	r6,1
    6c18:	180b883a 	mov	r5,r3
    6c1c:	2005883a 	mov	r2,r4
    6c20:	39803826 	beq	r7,r6,6d04 <_dtoa_r+0x8f4>
    6c24:	000d883a 	mov	r6,zero
    6c28:	01d00934 	movhi	r7,16420
    6c2c:	0002ab40 	call	2ab4 <__muldf3>
    6c30:	000d883a 	mov	r6,zero
    6c34:	000f883a 	mov	r7,zero
    6c38:	1009883a 	mov	r4,r2
    6c3c:	180b883a 	mov	r5,r3
    6c40:	1025883a 	mov	r18,r2
    6c44:	1827883a 	mov	r19,r3
    6c48:	000e8000 	call	e800 <__eqdf2>
    6c4c:	103f9a26 	beq	r2,zero,6ab8 <__alt_data_end+0xff006ab8>
    6c50:	d9c00617 	ldw	r7,24(sp)
    6c54:	d8c00717 	ldw	r3,28(sp)
    6c58:	b829883a 	mov	r20,r23
    6c5c:	38bfffc4 	addi	r2,r7,-1
    6c60:	18ad883a 	add	r22,r3,r2
    6c64:	00000a06 	br	6c90 <_dtoa_r+0x880>
    6c68:	0002ab40 	call	2ab4 <__muldf3>
    6c6c:	000d883a 	mov	r6,zero
    6c70:	000f883a 	mov	r7,zero
    6c74:	1009883a 	mov	r4,r2
    6c78:	180b883a 	mov	r5,r3
    6c7c:	1025883a 	mov	r18,r2
    6c80:	1827883a 	mov	r19,r3
    6c84:	b829883a 	mov	r20,r23
    6c88:	000e8000 	call	e800 <__eqdf2>
    6c8c:	103f8a26 	beq	r2,zero,6ab8 <__alt_data_end+0xff006ab8>
    6c90:	800d883a 	mov	r6,r16
    6c94:	880f883a 	mov	r7,r17
    6c98:	9009883a 	mov	r4,r18
    6c9c:	980b883a 	mov	r5,r19
    6ca0:	000df180 	call	df18 <__divdf3>
    6ca4:	180b883a 	mov	r5,r3
    6ca8:	1009883a 	mov	r4,r2
    6cac:	00031cc0 	call	31cc <__fixdfsi>
    6cb0:	1009883a 	mov	r4,r2
    6cb4:	102b883a 	mov	r21,r2
    6cb8:	000324c0 	call	324c <__floatsidf>
    6cbc:	800d883a 	mov	r6,r16
    6cc0:	880f883a 	mov	r7,r17
    6cc4:	1009883a 	mov	r4,r2
    6cc8:	180b883a 	mov	r5,r3
    6ccc:	0002ab40 	call	2ab4 <__muldf3>
    6cd0:	100d883a 	mov	r6,r2
    6cd4:	180f883a 	mov	r7,r3
    6cd8:	9009883a 	mov	r4,r18
    6cdc:	980b883a 	mov	r5,r19
    6ce0:	000ea580 	call	ea58 <__subdf3>
    6ce4:	aa000c04 	addi	r8,r21,48
    6ce8:	a2000005 	stb	r8,0(r20)
    6cec:	000d883a 	mov	r6,zero
    6cf0:	01d00934 	movhi	r7,16420
    6cf4:	1009883a 	mov	r4,r2
    6cf8:	180b883a 	mov	r5,r3
    6cfc:	a5c00044 	addi	r23,r20,1
    6d00:	b53fd91e 	bne	r22,r20,6c68 <__alt_data_end+0xff006c68>
    6d04:	100d883a 	mov	r6,r2
    6d08:	180f883a 	mov	r7,r3
    6d0c:	1009883a 	mov	r4,r2
    6d10:	180b883a 	mov	r5,r3
    6d14:	000d66c0 	call	d66c <__adddf3>
    6d18:	100d883a 	mov	r6,r2
    6d1c:	180f883a 	mov	r7,r3
    6d20:	8009883a 	mov	r4,r16
    6d24:	880b883a 	mov	r5,r17
    6d28:	1027883a 	mov	r19,r2
    6d2c:	1825883a 	mov	r18,r3
    6d30:	000e9640 	call	e964 <__ledf2>
    6d34:	10000816 	blt	r2,zero,6d58 <_dtoa_r+0x948>
    6d38:	980d883a 	mov	r6,r19
    6d3c:	900f883a 	mov	r7,r18
    6d40:	8009883a 	mov	r4,r16
    6d44:	880b883a 	mov	r5,r17
    6d48:	000e8000 	call	e800 <__eqdf2>
    6d4c:	103f5a1e 	bne	r2,zero,6ab8 <__alt_data_end+0xff006ab8>
    6d50:	ad40004c 	andi	r21,r21,1
    6d54:	a83f5826 	beq	r21,zero,6ab8 <__alt_data_end+0xff006ab8>
    6d58:	bd3fffc3 	ldbu	r20,-1(r23)
    6d5c:	b8bfffc4 	addi	r2,r23,-1
    6d60:	1007883a 	mov	r3,r2
    6d64:	01400e44 	movi	r5,57
    6d68:	d9800717 	ldw	r6,28(sp)
    6d6c:	00000506 	br	6d84 <_dtoa_r+0x974>
    6d70:	18ffffc4 	addi	r3,r3,-1
    6d74:	11824726 	beq	r2,r6,7694 <_dtoa_r+0x1284>
    6d78:	1d000003 	ldbu	r20,0(r3)
    6d7c:	102f883a 	mov	r23,r2
    6d80:	10bfffc4 	addi	r2,r2,-1
    6d84:	a1003fcc 	andi	r4,r20,255
    6d88:	2100201c 	xori	r4,r4,128
    6d8c:	213fe004 	addi	r4,r4,-128
    6d90:	217ff726 	beq	r4,r5,6d70 <__alt_data_end+0xff006d70>
    6d94:	a2000044 	addi	r8,r20,1
    6d98:	12000005 	stb	r8,0(r2)
    6d9c:	003f4606 	br	6ab8 <__alt_data_end+0xff006ab8>
    6da0:	d9000b17 	ldw	r4,44(sp)
    6da4:	2000c826 	beq	r4,zero,70c8 <_dtoa_r+0xcb8>
    6da8:	d9800317 	ldw	r6,12(sp)
    6dac:	00c00044 	movi	r3,1
    6db0:	1980f90e 	bge	r3,r6,7198 <_dtoa_r+0xd88>
    6db4:	d8800617 	ldw	r2,24(sp)
    6db8:	d8c00a17 	ldw	r3,40(sp)
    6dbc:	157fffc4 	addi	r21,r2,-1
    6dc0:	1d41f316 	blt	r3,r21,7590 <_dtoa_r+0x1180>
    6dc4:	1d6bc83a 	sub	r21,r3,r21
    6dc8:	d9c00617 	ldw	r7,24(sp)
    6dcc:	3802aa16 	blt	r7,zero,7878 <_dtoa_r+0x1468>
    6dd0:	dd000817 	ldw	r20,32(sp)
    6dd4:	d8800617 	ldw	r2,24(sp)
    6dd8:	d8c00817 	ldw	r3,32(sp)
    6ddc:	01400044 	movi	r5,1
    6de0:	e009883a 	mov	r4,fp
    6de4:	1887883a 	add	r3,r3,r2
    6de8:	d8c00815 	stw	r3,32(sp)
    6dec:	b0ad883a 	add	r22,r22,r2
    6df0:	00096ac0 	call	96ac <__i2b>
    6df4:	1023883a 	mov	r17,r2
    6df8:	a0000826 	beq	r20,zero,6e1c <_dtoa_r+0xa0c>
    6dfc:	0580070e 	bge	zero,r22,6e1c <_dtoa_r+0xa0c>
    6e00:	a005883a 	mov	r2,r20
    6e04:	b500b916 	blt	r22,r20,70ec <_dtoa_r+0xcdc>
    6e08:	d9000817 	ldw	r4,32(sp)
    6e0c:	a0a9c83a 	sub	r20,r20,r2
    6e10:	b0adc83a 	sub	r22,r22,r2
    6e14:	2089c83a 	sub	r4,r4,r2
    6e18:	d9000815 	stw	r4,32(sp)
    6e1c:	d9800a17 	ldw	r6,40(sp)
    6e20:	0181810e 	bge	zero,r6,7428 <_dtoa_r+0x1018>
    6e24:	d9c00b17 	ldw	r7,44(sp)
    6e28:	3800b326 	beq	r7,zero,70f8 <_dtoa_r+0xce8>
    6e2c:	a800b226 	beq	r21,zero,70f8 <_dtoa_r+0xce8>
    6e30:	880b883a 	mov	r5,r17
    6e34:	a80d883a 	mov	r6,r21
    6e38:	e009883a 	mov	r4,fp
    6e3c:	00098e00 	call	98e0 <__pow5mult>
    6e40:	d9800917 	ldw	r6,36(sp)
    6e44:	100b883a 	mov	r5,r2
    6e48:	e009883a 	mov	r4,fp
    6e4c:	1023883a 	mov	r17,r2
    6e50:	00096e80 	call	96e8 <__multiply>
    6e54:	1021883a 	mov	r16,r2
    6e58:	d8800a17 	ldw	r2,40(sp)
    6e5c:	d9400917 	ldw	r5,36(sp)
    6e60:	e009883a 	mov	r4,fp
    6e64:	1545c83a 	sub	r2,r2,r21
    6e68:	d8800a15 	stw	r2,40(sp)
    6e6c:	00093480 	call	9348 <_Bfree>
    6e70:	d8c00a17 	ldw	r3,40(sp)
    6e74:	18009f1e 	bne	r3,zero,70f4 <_dtoa_r+0xce4>
    6e78:	05c00044 	movi	r23,1
    6e7c:	e009883a 	mov	r4,fp
    6e80:	b80b883a 	mov	r5,r23
    6e84:	00096ac0 	call	96ac <__i2b>
    6e88:	d9000d17 	ldw	r4,52(sp)
    6e8c:	102b883a 	mov	r21,r2
    6e90:	2000ce26 	beq	r4,zero,71cc <_dtoa_r+0xdbc>
    6e94:	200d883a 	mov	r6,r4
    6e98:	100b883a 	mov	r5,r2
    6e9c:	e009883a 	mov	r4,fp
    6ea0:	00098e00 	call	98e0 <__pow5mult>
    6ea4:	d9800317 	ldw	r6,12(sp)
    6ea8:	102b883a 	mov	r21,r2
    6eac:	b981810e 	bge	r23,r6,74b4 <_dtoa_r+0x10a4>
    6eb0:	0027883a 	mov	r19,zero
    6eb4:	a8800417 	ldw	r2,16(r21)
    6eb8:	05c00804 	movi	r23,32
    6ebc:	10800104 	addi	r2,r2,4
    6ec0:	1085883a 	add	r2,r2,r2
    6ec4:	1085883a 	add	r2,r2,r2
    6ec8:	a885883a 	add	r2,r21,r2
    6ecc:	11000017 	ldw	r4,0(r2)
    6ed0:	00095940 	call	9594 <__hi0bits>
    6ed4:	b885c83a 	sub	r2,r23,r2
    6ed8:	1585883a 	add	r2,r2,r22
    6edc:	108007cc 	andi	r2,r2,31
    6ee0:	1000b326 	beq	r2,zero,71b0 <_dtoa_r+0xda0>
    6ee4:	00c00804 	movi	r3,32
    6ee8:	1887c83a 	sub	r3,r3,r2
    6eec:	01000104 	movi	r4,4
    6ef0:	20c2cd0e 	bge	r4,r3,7a28 <_dtoa_r+0x1618>
    6ef4:	00c00704 	movi	r3,28
    6ef8:	1885c83a 	sub	r2,r3,r2
    6efc:	d8c00817 	ldw	r3,32(sp)
    6f00:	a0a9883a 	add	r20,r20,r2
    6f04:	b0ad883a 	add	r22,r22,r2
    6f08:	1887883a 	add	r3,r3,r2
    6f0c:	d8c00815 	stw	r3,32(sp)
    6f10:	d9800817 	ldw	r6,32(sp)
    6f14:	0180040e 	bge	zero,r6,6f28 <_dtoa_r+0xb18>
    6f18:	800b883a 	mov	r5,r16
    6f1c:	e009883a 	mov	r4,fp
    6f20:	0009a200 	call	9a20 <__lshift>
    6f24:	1021883a 	mov	r16,r2
    6f28:	0580050e 	bge	zero,r22,6f40 <_dtoa_r+0xb30>
    6f2c:	a80b883a 	mov	r5,r21
    6f30:	b00d883a 	mov	r6,r22
    6f34:	e009883a 	mov	r4,fp
    6f38:	0009a200 	call	9a20 <__lshift>
    6f3c:	102b883a 	mov	r21,r2
    6f40:	d9c00e17 	ldw	r7,56(sp)
    6f44:	3801211e 	bne	r7,zero,73cc <_dtoa_r+0xfbc>
    6f48:	d9800617 	ldw	r6,24(sp)
    6f4c:	0181380e 	bge	zero,r6,7430 <_dtoa_r+0x1020>
    6f50:	d8c00b17 	ldw	r3,44(sp)
    6f54:	1800ab1e 	bne	r3,zero,7204 <_dtoa_r+0xdf4>
    6f58:	dc800717 	ldw	r18,28(sp)
    6f5c:	dcc00617 	ldw	r19,24(sp)
    6f60:	9029883a 	mov	r20,r18
    6f64:	00000206 	br	6f70 <_dtoa_r+0xb60>
    6f68:	00093700 	call	9370 <__multadd>
    6f6c:	1021883a 	mov	r16,r2
    6f70:	a80b883a 	mov	r5,r21
    6f74:	8009883a 	mov	r4,r16
    6f78:	00062100 	call	6210 <quorem>
    6f7c:	10800c04 	addi	r2,r2,48
    6f80:	90800005 	stb	r2,0(r18)
    6f84:	94800044 	addi	r18,r18,1
    6f88:	9507c83a 	sub	r3,r18,r20
    6f8c:	000f883a 	mov	r7,zero
    6f90:	01800284 	movi	r6,10
    6f94:	800b883a 	mov	r5,r16
    6f98:	e009883a 	mov	r4,fp
    6f9c:	1cfff216 	blt	r3,r19,6f68 <__alt_data_end+0xff006f68>
    6fa0:	1011883a 	mov	r8,r2
    6fa4:	d8800617 	ldw	r2,24(sp)
    6fa8:	0082370e 	bge	zero,r2,7888 <_dtoa_r+0x1478>
    6fac:	d9000717 	ldw	r4,28(sp)
    6fb0:	0025883a 	mov	r18,zero
    6fb4:	20af883a 	add	r23,r4,r2
    6fb8:	01800044 	movi	r6,1
    6fbc:	800b883a 	mov	r5,r16
    6fc0:	e009883a 	mov	r4,fp
    6fc4:	da001715 	stw	r8,92(sp)
    6fc8:	0009a200 	call	9a20 <__lshift>
    6fcc:	a80b883a 	mov	r5,r21
    6fd0:	1009883a 	mov	r4,r2
    6fd4:	d8800915 	stw	r2,36(sp)
    6fd8:	0009b680 	call	9b68 <__mcmp>
    6fdc:	da001717 	ldw	r8,92(sp)
    6fe0:	0081800e 	bge	zero,r2,75e4 <_dtoa_r+0x11d4>
    6fe4:	b93fffc3 	ldbu	r4,-1(r23)
    6fe8:	b8bfffc4 	addi	r2,r23,-1
    6fec:	1007883a 	mov	r3,r2
    6ff0:	01800e44 	movi	r6,57
    6ff4:	d9c00717 	ldw	r7,28(sp)
    6ff8:	00000506 	br	7010 <_dtoa_r+0xc00>
    6ffc:	18ffffc4 	addi	r3,r3,-1
    7000:	11c12326 	beq	r2,r7,7490 <_dtoa_r+0x1080>
    7004:	19000003 	ldbu	r4,0(r3)
    7008:	102f883a 	mov	r23,r2
    700c:	10bfffc4 	addi	r2,r2,-1
    7010:	21403fcc 	andi	r5,r4,255
    7014:	2940201c 	xori	r5,r5,128
    7018:	297fe004 	addi	r5,r5,-128
    701c:	29bff726 	beq	r5,r6,6ffc <__alt_data_end+0xff006ffc>
    7020:	21000044 	addi	r4,r4,1
    7024:	11000005 	stb	r4,0(r2)
    7028:	a80b883a 	mov	r5,r21
    702c:	e009883a 	mov	r4,fp
    7030:	00093480 	call	9348 <_Bfree>
    7034:	883ea026 	beq	r17,zero,6ab8 <__alt_data_end+0xff006ab8>
    7038:	90000426 	beq	r18,zero,704c <_dtoa_r+0xc3c>
    703c:	94400326 	beq	r18,r17,704c <_dtoa_r+0xc3c>
    7040:	900b883a 	mov	r5,r18
    7044:	e009883a 	mov	r4,fp
    7048:	00093480 	call	9348 <_Bfree>
    704c:	880b883a 	mov	r5,r17
    7050:	e009883a 	mov	r4,fp
    7054:	00093480 	call	9348 <_Bfree>
    7058:	003e9706 	br	6ab8 <__alt_data_end+0xff006ab8>
    705c:	01800044 	movi	r6,1
    7060:	d9800e15 	stw	r6,56(sp)
    7064:	003d9606 	br	66c0 <__alt_data_end+0xff0066c0>
    7068:	d8800817 	ldw	r2,32(sp)
    706c:	d8c00517 	ldw	r3,20(sp)
    7070:	d8000d15 	stw	zero,52(sp)
    7074:	10c5c83a 	sub	r2,r2,r3
    7078:	00c9c83a 	sub	r4,zero,r3
    707c:	d8800815 	stw	r2,32(sp)
    7080:	d9000a15 	stw	r4,40(sp)
    7084:	003d9706 	br	66e4 <__alt_data_end+0xff0066e4>
    7088:	05adc83a 	sub	r22,zero,r22
    708c:	dd800815 	stw	r22,32(sp)
    7090:	002d883a 	mov	r22,zero
    7094:	003d8e06 	br	66d0 <__alt_data_end+0xff0066d0>
    7098:	d9000517 	ldw	r4,20(sp)
    709c:	000324c0 	call	324c <__floatsidf>
    70a0:	100d883a 	mov	r6,r2
    70a4:	180f883a 	mov	r7,r3
    70a8:	a009883a 	mov	r4,r20
    70ac:	880b883a 	mov	r5,r17
    70b0:	000e8000 	call	e800 <__eqdf2>
    70b4:	103d7126 	beq	r2,zero,667c <__alt_data_end+0xff00667c>
    70b8:	d9c00517 	ldw	r7,20(sp)
    70bc:	39ffffc4 	addi	r7,r7,-1
    70c0:	d9c00515 	stw	r7,20(sp)
    70c4:	003d6d06 	br	667c <__alt_data_end+0xff00667c>
    70c8:	dd400a17 	ldw	r21,40(sp)
    70cc:	dd000817 	ldw	r20,32(sp)
    70d0:	0023883a 	mov	r17,zero
    70d4:	003f4806 	br	6df8 <__alt_data_end+0xff006df8>
    70d8:	10e3c83a 	sub	r17,r2,r3
    70dc:	9448983a 	sll	r4,r18,r17
    70e0:	003d3206 	br	65ac <__alt_data_end+0xff0065ac>
    70e4:	d8000e15 	stw	zero,56(sp)
    70e8:	003d7506 	br	66c0 <__alt_data_end+0xff0066c0>
    70ec:	b005883a 	mov	r2,r22
    70f0:	003f4506 	br	6e08 <__alt_data_end+0xff006e08>
    70f4:	dc000915 	stw	r16,36(sp)
    70f8:	d9800a17 	ldw	r6,40(sp)
    70fc:	d9400917 	ldw	r5,36(sp)
    7100:	e009883a 	mov	r4,fp
    7104:	00098e00 	call	98e0 <__pow5mult>
    7108:	1021883a 	mov	r16,r2
    710c:	003f5a06 	br	6e78 <__alt_data_end+0xff006e78>
    7110:	01c00044 	movi	r7,1
    7114:	d9c00b15 	stw	r7,44(sp)
    7118:	d8802217 	ldw	r2,136(sp)
    711c:	0081280e 	bge	zero,r2,75c0 <_dtoa_r+0x11b0>
    7120:	100d883a 	mov	r6,r2
    7124:	1021883a 	mov	r16,r2
    7128:	d8800c15 	stw	r2,48(sp)
    712c:	d8800615 	stw	r2,24(sp)
    7130:	003d8806 	br	6754 <__alt_data_end+0xff006754>
    7134:	d8800617 	ldw	r2,24(sp)
    7138:	00be9b16 	blt	zero,r2,6ba8 <__alt_data_end+0xff006ba8>
    713c:	10010f1e 	bne	r2,zero,757c <_dtoa_r+0x116c>
    7140:	880b883a 	mov	r5,r17
    7144:	000d883a 	mov	r6,zero
    7148:	01d00534 	movhi	r7,16404
    714c:	8009883a 	mov	r4,r16
    7150:	0002ab40 	call	2ab4 <__muldf3>
    7154:	900d883a 	mov	r6,r18
    7158:	980f883a 	mov	r7,r19
    715c:	1009883a 	mov	r4,r2
    7160:	180b883a 	mov	r5,r3
    7164:	000e8880 	call	e888 <__gedf2>
    7168:	002b883a 	mov	r21,zero
    716c:	0023883a 	mov	r17,zero
    7170:	1000bf16 	blt	r2,zero,7470 <_dtoa_r+0x1060>
    7174:	d9802217 	ldw	r6,136(sp)
    7178:	ddc00717 	ldw	r23,28(sp)
    717c:	018c303a 	nor	r6,zero,r6
    7180:	d9800515 	stw	r6,20(sp)
    7184:	a80b883a 	mov	r5,r21
    7188:	e009883a 	mov	r4,fp
    718c:	00093480 	call	9348 <_Bfree>
    7190:	883e4926 	beq	r17,zero,6ab8 <__alt_data_end+0xff006ab8>
    7194:	003fad06 	br	704c <__alt_data_end+0xff00704c>
    7198:	d9c01117 	ldw	r7,68(sp)
    719c:	3801bc26 	beq	r7,zero,7890 <_dtoa_r+0x1480>
    71a0:	10810cc4 	addi	r2,r2,1075
    71a4:	dd400a17 	ldw	r21,40(sp)
    71a8:	dd000817 	ldw	r20,32(sp)
    71ac:	003f0a06 	br	6dd8 <__alt_data_end+0xff006dd8>
    71b0:	00800704 	movi	r2,28
    71b4:	d9000817 	ldw	r4,32(sp)
    71b8:	a0a9883a 	add	r20,r20,r2
    71bc:	b0ad883a 	add	r22,r22,r2
    71c0:	2089883a 	add	r4,r4,r2
    71c4:	d9000815 	stw	r4,32(sp)
    71c8:	003f5106 	br	6f10 <__alt_data_end+0xff006f10>
    71cc:	d8c00317 	ldw	r3,12(sp)
    71d0:	b8c1fc0e 	bge	r23,r3,79c4 <_dtoa_r+0x15b4>
    71d4:	0027883a 	mov	r19,zero
    71d8:	b805883a 	mov	r2,r23
    71dc:	003f3e06 	br	6ed8 <__alt_data_end+0xff006ed8>
    71e0:	880b883a 	mov	r5,r17
    71e4:	e009883a 	mov	r4,fp
    71e8:	000f883a 	mov	r7,zero
    71ec:	01800284 	movi	r6,10
    71f0:	00093700 	call	9370 <__multadd>
    71f4:	d9000c17 	ldw	r4,48(sp)
    71f8:	1023883a 	mov	r17,r2
    71fc:	0102040e 	bge	zero,r4,7a10 <_dtoa_r+0x1600>
    7200:	d9000615 	stw	r4,24(sp)
    7204:	0500050e 	bge	zero,r20,721c <_dtoa_r+0xe0c>
    7208:	880b883a 	mov	r5,r17
    720c:	a00d883a 	mov	r6,r20
    7210:	e009883a 	mov	r4,fp
    7214:	0009a200 	call	9a20 <__lshift>
    7218:	1023883a 	mov	r17,r2
    721c:	9801241e 	bne	r19,zero,76b0 <_dtoa_r+0x12a0>
    7220:	8829883a 	mov	r20,r17
    7224:	d9000617 	ldw	r4,24(sp)
    7228:	dcc00717 	ldw	r19,28(sp)
    722c:	9480004c 	andi	r18,r18,1
    7230:	20bfffc4 	addi	r2,r4,-1
    7234:	9885883a 	add	r2,r19,r2
    7238:	d8800415 	stw	r2,16(sp)
    723c:	dc800615 	stw	r18,24(sp)
    7240:	a80b883a 	mov	r5,r21
    7244:	8009883a 	mov	r4,r16
    7248:	00062100 	call	6210 <quorem>
    724c:	880b883a 	mov	r5,r17
    7250:	8009883a 	mov	r4,r16
    7254:	102f883a 	mov	r23,r2
    7258:	0009b680 	call	9b68 <__mcmp>
    725c:	a80b883a 	mov	r5,r21
    7260:	a00d883a 	mov	r6,r20
    7264:	e009883a 	mov	r4,fp
    7268:	102d883a 	mov	r22,r2
    726c:	0009bc80 	call	9bc8 <__mdiff>
    7270:	1007883a 	mov	r3,r2
    7274:	10800317 	ldw	r2,12(r2)
    7278:	bc800c04 	addi	r18,r23,48
    727c:	180b883a 	mov	r5,r3
    7280:	10004e1e 	bne	r2,zero,73bc <_dtoa_r+0xfac>
    7284:	8009883a 	mov	r4,r16
    7288:	d8c01615 	stw	r3,88(sp)
    728c:	0009b680 	call	9b68 <__mcmp>
    7290:	d8c01617 	ldw	r3,88(sp)
    7294:	e009883a 	mov	r4,fp
    7298:	d8801615 	stw	r2,88(sp)
    729c:	180b883a 	mov	r5,r3
    72a0:	00093480 	call	9348 <_Bfree>
    72a4:	d8801617 	ldw	r2,88(sp)
    72a8:	1000041e 	bne	r2,zero,72bc <_dtoa_r+0xeac>
    72ac:	d9800317 	ldw	r6,12(sp)
    72b0:	3000021e 	bne	r6,zero,72bc <_dtoa_r+0xeac>
    72b4:	d8c00617 	ldw	r3,24(sp)
    72b8:	18003726 	beq	r3,zero,7398 <_dtoa_r+0xf88>
    72bc:	b0002016 	blt	r22,zero,7340 <_dtoa_r+0xf30>
    72c0:	b000041e 	bne	r22,zero,72d4 <_dtoa_r+0xec4>
    72c4:	d9000317 	ldw	r4,12(sp)
    72c8:	2000021e 	bne	r4,zero,72d4 <_dtoa_r+0xec4>
    72cc:	d8c00617 	ldw	r3,24(sp)
    72d0:	18001b26 	beq	r3,zero,7340 <_dtoa_r+0xf30>
    72d4:	00810716 	blt	zero,r2,76f4 <_dtoa_r+0x12e4>
    72d8:	d8c00417 	ldw	r3,16(sp)
    72dc:	9d800044 	addi	r22,r19,1
    72e0:	9c800005 	stb	r18,0(r19)
    72e4:	b02f883a 	mov	r23,r22
    72e8:	98c10626 	beq	r19,r3,7704 <_dtoa_r+0x12f4>
    72ec:	800b883a 	mov	r5,r16
    72f0:	000f883a 	mov	r7,zero
    72f4:	01800284 	movi	r6,10
    72f8:	e009883a 	mov	r4,fp
    72fc:	00093700 	call	9370 <__multadd>
    7300:	1021883a 	mov	r16,r2
    7304:	000f883a 	mov	r7,zero
    7308:	01800284 	movi	r6,10
    730c:	880b883a 	mov	r5,r17
    7310:	e009883a 	mov	r4,fp
    7314:	8d002526 	beq	r17,r20,73ac <_dtoa_r+0xf9c>
    7318:	00093700 	call	9370 <__multadd>
    731c:	a00b883a 	mov	r5,r20
    7320:	000f883a 	mov	r7,zero
    7324:	01800284 	movi	r6,10
    7328:	e009883a 	mov	r4,fp
    732c:	1023883a 	mov	r17,r2
    7330:	00093700 	call	9370 <__multadd>
    7334:	1029883a 	mov	r20,r2
    7338:	b027883a 	mov	r19,r22
    733c:	003fc006 	br	7240 <__alt_data_end+0xff007240>
    7340:	9011883a 	mov	r8,r18
    7344:	00800e0e 	bge	zero,r2,7380 <_dtoa_r+0xf70>
    7348:	800b883a 	mov	r5,r16
    734c:	01800044 	movi	r6,1
    7350:	e009883a 	mov	r4,fp
    7354:	da001715 	stw	r8,92(sp)
    7358:	0009a200 	call	9a20 <__lshift>
    735c:	a80b883a 	mov	r5,r21
    7360:	1009883a 	mov	r4,r2
    7364:	1021883a 	mov	r16,r2
    7368:	0009b680 	call	9b68 <__mcmp>
    736c:	da001717 	ldw	r8,92(sp)
    7370:	0081960e 	bge	zero,r2,79cc <_dtoa_r+0x15bc>
    7374:	00800e44 	movi	r2,57
    7378:	40817026 	beq	r8,r2,793c <_dtoa_r+0x152c>
    737c:	ba000c44 	addi	r8,r23,49
    7380:	8825883a 	mov	r18,r17
    7384:	9dc00044 	addi	r23,r19,1
    7388:	9a000005 	stb	r8,0(r19)
    738c:	a023883a 	mov	r17,r20
    7390:	dc000915 	stw	r16,36(sp)
    7394:	003f2406 	br	7028 <__alt_data_end+0xff007028>
    7398:	00800e44 	movi	r2,57
    739c:	9011883a 	mov	r8,r18
    73a0:	90816626 	beq	r18,r2,793c <_dtoa_r+0x152c>
    73a4:	05bff516 	blt	zero,r22,737c <__alt_data_end+0xff00737c>
    73a8:	003ff506 	br	7380 <__alt_data_end+0xff007380>
    73ac:	00093700 	call	9370 <__multadd>
    73b0:	1023883a 	mov	r17,r2
    73b4:	1029883a 	mov	r20,r2
    73b8:	003fdf06 	br	7338 <__alt_data_end+0xff007338>
    73bc:	e009883a 	mov	r4,fp
    73c0:	00093480 	call	9348 <_Bfree>
    73c4:	00800044 	movi	r2,1
    73c8:	003fbc06 	br	72bc <__alt_data_end+0xff0072bc>
    73cc:	a80b883a 	mov	r5,r21
    73d0:	8009883a 	mov	r4,r16
    73d4:	0009b680 	call	9b68 <__mcmp>
    73d8:	103edb0e 	bge	r2,zero,6f48 <__alt_data_end+0xff006f48>
    73dc:	800b883a 	mov	r5,r16
    73e0:	000f883a 	mov	r7,zero
    73e4:	01800284 	movi	r6,10
    73e8:	e009883a 	mov	r4,fp
    73ec:	00093700 	call	9370 <__multadd>
    73f0:	1021883a 	mov	r16,r2
    73f4:	d8800517 	ldw	r2,20(sp)
    73f8:	d8c00b17 	ldw	r3,44(sp)
    73fc:	10bfffc4 	addi	r2,r2,-1
    7400:	d8800515 	stw	r2,20(sp)
    7404:	183f761e 	bne	r3,zero,71e0 <__alt_data_end+0xff0071e0>
    7408:	d9000c17 	ldw	r4,48(sp)
    740c:	0101730e 	bge	zero,r4,79dc <_dtoa_r+0x15cc>
    7410:	d9000615 	stw	r4,24(sp)
    7414:	003ed006 	br	6f58 <__alt_data_end+0xff006f58>
    7418:	00800084 	movi	r2,2
    741c:	3081861e 	bne	r6,r2,7a38 <_dtoa_r+0x1628>
    7420:	d8000b15 	stw	zero,44(sp)
    7424:	003f3c06 	br	7118 <__alt_data_end+0xff007118>
    7428:	dc000917 	ldw	r16,36(sp)
    742c:	003e9206 	br	6e78 <__alt_data_end+0xff006e78>
    7430:	d9c00317 	ldw	r7,12(sp)
    7434:	00800084 	movi	r2,2
    7438:	11fec50e 	bge	r2,r7,6f50 <__alt_data_end+0xff006f50>
    743c:	d9000617 	ldw	r4,24(sp)
    7440:	20013c1e 	bne	r4,zero,7934 <_dtoa_r+0x1524>
    7444:	a80b883a 	mov	r5,r21
    7448:	000f883a 	mov	r7,zero
    744c:	01800144 	movi	r6,5
    7450:	e009883a 	mov	r4,fp
    7454:	00093700 	call	9370 <__multadd>
    7458:	100b883a 	mov	r5,r2
    745c:	8009883a 	mov	r4,r16
    7460:	102b883a 	mov	r21,r2
    7464:	0009b680 	call	9b68 <__mcmp>
    7468:	dc000915 	stw	r16,36(sp)
    746c:	00bf410e 	bge	zero,r2,7174 <__alt_data_end+0xff007174>
    7470:	d9c00717 	ldw	r7,28(sp)
    7474:	00800c44 	movi	r2,49
    7478:	38800005 	stb	r2,0(r7)
    747c:	d8800517 	ldw	r2,20(sp)
    7480:	3dc00044 	addi	r23,r7,1
    7484:	10800044 	addi	r2,r2,1
    7488:	d8800515 	stw	r2,20(sp)
    748c:	003f3d06 	br	7184 <__alt_data_end+0xff007184>
    7490:	d9800517 	ldw	r6,20(sp)
    7494:	d9c00717 	ldw	r7,28(sp)
    7498:	00800c44 	movi	r2,49
    749c:	31800044 	addi	r6,r6,1
    74a0:	d9800515 	stw	r6,20(sp)
    74a4:	38800005 	stb	r2,0(r7)
    74a8:	003edf06 	br	7028 <__alt_data_end+0xff007028>
    74ac:	d8000b15 	stw	zero,44(sp)
    74b0:	003c9f06 	br	6730 <__alt_data_end+0xff006730>
    74b4:	903e7e1e 	bne	r18,zero,6eb0 <__alt_data_end+0xff006eb0>
    74b8:	00800434 	movhi	r2,16
    74bc:	10bfffc4 	addi	r2,r2,-1
    74c0:	9884703a 	and	r2,r19,r2
    74c4:	1000ea1e 	bne	r2,zero,7870 <_dtoa_r+0x1460>
    74c8:	9cdffc2c 	andhi	r19,r19,32752
    74cc:	9800e826 	beq	r19,zero,7870 <_dtoa_r+0x1460>
    74d0:	d9c00817 	ldw	r7,32(sp)
    74d4:	b5800044 	addi	r22,r22,1
    74d8:	04c00044 	movi	r19,1
    74dc:	39c00044 	addi	r7,r7,1
    74e0:	d9c00815 	stw	r7,32(sp)
    74e4:	d8800d17 	ldw	r2,52(sp)
    74e8:	103e721e 	bne	r2,zero,6eb4 <__alt_data_end+0xff006eb4>
    74ec:	00800044 	movi	r2,1
    74f0:	003e7906 	br	6ed8 <__alt_data_end+0xff006ed8>
    74f4:	8009883a 	mov	r4,r16
    74f8:	000324c0 	call	324c <__floatsidf>
    74fc:	d9800f17 	ldw	r6,60(sp)
    7500:	d9c01017 	ldw	r7,64(sp)
    7504:	1009883a 	mov	r4,r2
    7508:	180b883a 	mov	r5,r3
    750c:	0002ab40 	call	2ab4 <__muldf3>
    7510:	000d883a 	mov	r6,zero
    7514:	01d00734 	movhi	r7,16412
    7518:	1009883a 	mov	r4,r2
    751c:	180b883a 	mov	r5,r3
    7520:	000d66c0 	call	d66c <__adddf3>
    7524:	047f3034 	movhi	r17,64704
    7528:	1021883a 	mov	r16,r2
    752c:	1c63883a 	add	r17,r3,r17
    7530:	d9000f17 	ldw	r4,60(sp)
    7534:	d9401017 	ldw	r5,64(sp)
    7538:	000d883a 	mov	r6,zero
    753c:	01d00534 	movhi	r7,16404
    7540:	000ea580 	call	ea58 <__subdf3>
    7544:	800d883a 	mov	r6,r16
    7548:	880f883a 	mov	r7,r17
    754c:	1009883a 	mov	r4,r2
    7550:	180b883a 	mov	r5,r3
    7554:	102b883a 	mov	r21,r2
    7558:	1829883a 	mov	r20,r3
    755c:	000e8880 	call	e888 <__gedf2>
    7560:	00806c16 	blt	zero,r2,7714 <_dtoa_r+0x1304>
    7564:	89e0003c 	xorhi	r7,r17,32768
    7568:	800d883a 	mov	r6,r16
    756c:	a809883a 	mov	r4,r21
    7570:	a00b883a 	mov	r5,r20
    7574:	000e9640 	call	e964 <__ledf2>
    7578:	103d7e0e 	bge	r2,zero,6b74 <__alt_data_end+0xff006b74>
    757c:	002b883a 	mov	r21,zero
    7580:	0023883a 	mov	r17,zero
    7584:	003efb06 	br	7174 <__alt_data_end+0xff007174>
    7588:	d8800717 	ldw	r2,28(sp)
    758c:	003bd006 	br	64d0 <__alt_data_end+0xff0064d0>
    7590:	d9000a17 	ldw	r4,40(sp)
    7594:	d9800d17 	ldw	r6,52(sp)
    7598:	dd400a15 	stw	r21,40(sp)
    759c:	a905c83a 	sub	r2,r21,r4
    75a0:	308d883a 	add	r6,r6,r2
    75a4:	d9800d15 	stw	r6,52(sp)
    75a8:	002b883a 	mov	r21,zero
    75ac:	003e0606 	br	6dc8 <__alt_data_end+0xff006dc8>
    75b0:	9023883a 	mov	r17,r18
    75b4:	9829883a 	mov	r20,r19
    75b8:	04000084 	movi	r16,2
    75bc:	003c9206 	br	6808 <__alt_data_end+0xff006808>
    75c0:	04000044 	movi	r16,1
    75c4:	dc000c15 	stw	r16,48(sp)
    75c8:	dc000615 	stw	r16,24(sp)
    75cc:	dc002215 	stw	r16,136(sp)
    75d0:	e0001115 	stw	zero,68(fp)
    75d4:	000b883a 	mov	r5,zero
    75d8:	003c6906 	br	6780 <__alt_data_end+0xff006780>
    75dc:	3021883a 	mov	r16,r6
    75e0:	003ffb06 	br	75d0 <__alt_data_end+0xff0075d0>
    75e4:	1000021e 	bne	r2,zero,75f0 <_dtoa_r+0x11e0>
    75e8:	4200004c 	andi	r8,r8,1
    75ec:	403e7d1e 	bne	r8,zero,6fe4 <__alt_data_end+0xff006fe4>
    75f0:	01000c04 	movi	r4,48
    75f4:	00000106 	br	75fc <_dtoa_r+0x11ec>
    75f8:	102f883a 	mov	r23,r2
    75fc:	b8bfffc4 	addi	r2,r23,-1
    7600:	10c00007 	ldb	r3,0(r2)
    7604:	193ffc26 	beq	r3,r4,75f8 <__alt_data_end+0xff0075f8>
    7608:	003e8706 	br	7028 <__alt_data_end+0xff007028>
    760c:	d8800517 	ldw	r2,20(sp)
    7610:	00a3c83a 	sub	r17,zero,r2
    7614:	8800a426 	beq	r17,zero,78a8 <_dtoa_r+0x1498>
    7618:	888003cc 	andi	r2,r17,15
    761c:	100490fa 	slli	r2,r2,3
    7620:	00c00074 	movhi	r3,1
    7624:	18c93004 	addi	r3,r3,9408
    7628:	1885883a 	add	r2,r3,r2
    762c:	11800017 	ldw	r6,0(r2)
    7630:	11c00117 	ldw	r7,4(r2)
    7634:	9009883a 	mov	r4,r18
    7638:	980b883a 	mov	r5,r19
    763c:	8823d13a 	srai	r17,r17,4
    7640:	0002ab40 	call	2ab4 <__muldf3>
    7644:	d8800f15 	stw	r2,60(sp)
    7648:	d8c01015 	stw	r3,64(sp)
    764c:	8800e826 	beq	r17,zero,79f0 <_dtoa_r+0x15e0>
    7650:	05000074 	movhi	r20,1
    7654:	a5092604 	addi	r20,r20,9368
    7658:	04000084 	movi	r16,2
    765c:	8980004c 	andi	r6,r17,1
    7660:	1009883a 	mov	r4,r2
    7664:	8823d07a 	srai	r17,r17,1
    7668:	180b883a 	mov	r5,r3
    766c:	30000426 	beq	r6,zero,7680 <_dtoa_r+0x1270>
    7670:	a1800017 	ldw	r6,0(r20)
    7674:	a1c00117 	ldw	r7,4(r20)
    7678:	84000044 	addi	r16,r16,1
    767c:	0002ab40 	call	2ab4 <__muldf3>
    7680:	a5000204 	addi	r20,r20,8
    7684:	883ff51e 	bne	r17,zero,765c <__alt_data_end+0xff00765c>
    7688:	d8800f15 	stw	r2,60(sp)
    768c:	d8c01015 	stw	r3,64(sp)
    7690:	003c7606 	br	686c <__alt_data_end+0xff00686c>
    7694:	00c00c04 	movi	r3,48
    7698:	10c00005 	stb	r3,0(r2)
    769c:	d8c00517 	ldw	r3,20(sp)
    76a0:	bd3fffc3 	ldbu	r20,-1(r23)
    76a4:	18c00044 	addi	r3,r3,1
    76a8:	d8c00515 	stw	r3,20(sp)
    76ac:	003db906 	br	6d94 <__alt_data_end+0xff006d94>
    76b0:	89400117 	ldw	r5,4(r17)
    76b4:	e009883a 	mov	r4,fp
    76b8:	00092a00 	call	92a0 <_Balloc>
    76bc:	89800417 	ldw	r6,16(r17)
    76c0:	89400304 	addi	r5,r17,12
    76c4:	11000304 	addi	r4,r2,12
    76c8:	31800084 	addi	r6,r6,2
    76cc:	318d883a 	add	r6,r6,r6
    76d0:	318d883a 	add	r6,r6,r6
    76d4:	1027883a 	mov	r19,r2
    76d8:	0008ed40 	call	8ed4 <memcpy>
    76dc:	01800044 	movi	r6,1
    76e0:	980b883a 	mov	r5,r19
    76e4:	e009883a 	mov	r4,fp
    76e8:	0009a200 	call	9a20 <__lshift>
    76ec:	1029883a 	mov	r20,r2
    76f0:	003ecc06 	br	7224 <__alt_data_end+0xff007224>
    76f4:	00800e44 	movi	r2,57
    76f8:	90809026 	beq	r18,r2,793c <_dtoa_r+0x152c>
    76fc:	92000044 	addi	r8,r18,1
    7700:	003f1f06 	br	7380 <__alt_data_end+0xff007380>
    7704:	9011883a 	mov	r8,r18
    7708:	8825883a 	mov	r18,r17
    770c:	a023883a 	mov	r17,r20
    7710:	003e2906 	br	6fb8 <__alt_data_end+0xff006fb8>
    7714:	002b883a 	mov	r21,zero
    7718:	0023883a 	mov	r17,zero
    771c:	003f5406 	br	7470 <__alt_data_end+0xff007470>
    7720:	61bfffc4 	addi	r6,r12,-1
    7724:	300490fa 	slli	r2,r6,3
    7728:	00c00074 	movhi	r3,1
    772c:	18c93004 	addi	r3,r3,9408
    7730:	1885883a 	add	r2,r3,r2
    7734:	11000017 	ldw	r4,0(r2)
    7738:	11400117 	ldw	r5,4(r2)
    773c:	d8800717 	ldw	r2,28(sp)
    7740:	880f883a 	mov	r7,r17
    7744:	d9801215 	stw	r6,72(sp)
    7748:	800d883a 	mov	r6,r16
    774c:	db001615 	stw	r12,88(sp)
    7750:	15c00044 	addi	r23,r2,1
    7754:	0002ab40 	call	2ab4 <__muldf3>
    7758:	d9401017 	ldw	r5,64(sp)
    775c:	d9000f17 	ldw	r4,60(sp)
    7760:	d8c01515 	stw	r3,84(sp)
    7764:	d8801415 	stw	r2,80(sp)
    7768:	00031cc0 	call	31cc <__fixdfsi>
    776c:	1009883a 	mov	r4,r2
    7770:	1021883a 	mov	r16,r2
    7774:	000324c0 	call	324c <__floatsidf>
    7778:	d9000f17 	ldw	r4,60(sp)
    777c:	d9401017 	ldw	r5,64(sp)
    7780:	100d883a 	mov	r6,r2
    7784:	180f883a 	mov	r7,r3
    7788:	000ea580 	call	ea58 <__subdf3>
    778c:	1829883a 	mov	r20,r3
    7790:	d8c00717 	ldw	r3,28(sp)
    7794:	84000c04 	addi	r16,r16,48
    7798:	1023883a 	mov	r17,r2
    779c:	1c000005 	stb	r16,0(r3)
    77a0:	db001617 	ldw	r12,88(sp)
    77a4:	00800044 	movi	r2,1
    77a8:	60802226 	beq	r12,r2,7834 <_dtoa_r+0x1424>
    77ac:	d9c00717 	ldw	r7,28(sp)
    77b0:	8805883a 	mov	r2,r17
    77b4:	b82b883a 	mov	r21,r23
    77b8:	3b19883a 	add	r12,r7,r12
    77bc:	6023883a 	mov	r17,r12
    77c0:	a007883a 	mov	r3,r20
    77c4:	dc800f15 	stw	r18,60(sp)
    77c8:	000d883a 	mov	r6,zero
    77cc:	01d00934 	movhi	r7,16420
    77d0:	1009883a 	mov	r4,r2
    77d4:	180b883a 	mov	r5,r3
    77d8:	0002ab40 	call	2ab4 <__muldf3>
    77dc:	180b883a 	mov	r5,r3
    77e0:	1009883a 	mov	r4,r2
    77e4:	1829883a 	mov	r20,r3
    77e8:	1025883a 	mov	r18,r2
    77ec:	00031cc0 	call	31cc <__fixdfsi>
    77f0:	1009883a 	mov	r4,r2
    77f4:	1021883a 	mov	r16,r2
    77f8:	000324c0 	call	324c <__floatsidf>
    77fc:	100d883a 	mov	r6,r2
    7800:	180f883a 	mov	r7,r3
    7804:	9009883a 	mov	r4,r18
    7808:	a00b883a 	mov	r5,r20
    780c:	84000c04 	addi	r16,r16,48
    7810:	000ea580 	call	ea58 <__subdf3>
    7814:	ad400044 	addi	r21,r21,1
    7818:	ac3fffc5 	stb	r16,-1(r21)
    781c:	ac7fea1e 	bne	r21,r17,77c8 <__alt_data_end+0xff0077c8>
    7820:	1023883a 	mov	r17,r2
    7824:	d8801217 	ldw	r2,72(sp)
    7828:	dc800f17 	ldw	r18,60(sp)
    782c:	1829883a 	mov	r20,r3
    7830:	b8af883a 	add	r23,r23,r2
    7834:	d9001417 	ldw	r4,80(sp)
    7838:	d9401517 	ldw	r5,84(sp)
    783c:	000d883a 	mov	r6,zero
    7840:	01cff834 	movhi	r7,16352
    7844:	000d66c0 	call	d66c <__adddf3>
    7848:	880d883a 	mov	r6,r17
    784c:	a00f883a 	mov	r7,r20
    7850:	1009883a 	mov	r4,r2
    7854:	180b883a 	mov	r5,r3
    7858:	000e9640 	call	e964 <__ledf2>
    785c:	10003e0e 	bge	r2,zero,7958 <_dtoa_r+0x1548>
    7860:	d9001317 	ldw	r4,76(sp)
    7864:	bd3fffc3 	ldbu	r20,-1(r23)
    7868:	d9000515 	stw	r4,20(sp)
    786c:	003d3b06 	br	6d5c <__alt_data_end+0xff006d5c>
    7870:	0027883a 	mov	r19,zero
    7874:	003f1b06 	br	74e4 <__alt_data_end+0xff0074e4>
    7878:	d8800817 	ldw	r2,32(sp)
    787c:	11e9c83a 	sub	r20,r2,r7
    7880:	0005883a 	mov	r2,zero
    7884:	003d5406 	br	6dd8 <__alt_data_end+0xff006dd8>
    7888:	00800044 	movi	r2,1
    788c:	003dc706 	br	6fac <__alt_data_end+0xff006fac>
    7890:	d8c00217 	ldw	r3,8(sp)
    7894:	00800d84 	movi	r2,54
    7898:	dd400a17 	ldw	r21,40(sp)
    789c:	10c5c83a 	sub	r2,r2,r3
    78a0:	dd000817 	ldw	r20,32(sp)
    78a4:	003d4c06 	br	6dd8 <__alt_data_end+0xff006dd8>
    78a8:	dc800f15 	stw	r18,60(sp)
    78ac:	dcc01015 	stw	r19,64(sp)
    78b0:	04000084 	movi	r16,2
    78b4:	003bed06 	br	686c <__alt_data_end+0xff00686c>
    78b8:	d9000617 	ldw	r4,24(sp)
    78bc:	203f0d26 	beq	r4,zero,74f4 <__alt_data_end+0xff0074f4>
    78c0:	d9800c17 	ldw	r6,48(sp)
    78c4:	01bcab0e 	bge	zero,r6,6b74 <__alt_data_end+0xff006b74>
    78c8:	d9401017 	ldw	r5,64(sp)
    78cc:	d9000f17 	ldw	r4,60(sp)
    78d0:	000d883a 	mov	r6,zero
    78d4:	01d00934 	movhi	r7,16420
    78d8:	0002ab40 	call	2ab4 <__muldf3>
    78dc:	81000044 	addi	r4,r16,1
    78e0:	d8800f15 	stw	r2,60(sp)
    78e4:	d8c01015 	stw	r3,64(sp)
    78e8:	000324c0 	call	324c <__floatsidf>
    78ec:	d9800f17 	ldw	r6,60(sp)
    78f0:	d9c01017 	ldw	r7,64(sp)
    78f4:	1009883a 	mov	r4,r2
    78f8:	180b883a 	mov	r5,r3
    78fc:	0002ab40 	call	2ab4 <__muldf3>
    7900:	01d00734 	movhi	r7,16412
    7904:	000d883a 	mov	r6,zero
    7908:	1009883a 	mov	r4,r2
    790c:	180b883a 	mov	r5,r3
    7910:	000d66c0 	call	d66c <__adddf3>
    7914:	d9c00517 	ldw	r7,20(sp)
    7918:	047f3034 	movhi	r17,64704
    791c:	1021883a 	mov	r16,r2
    7920:	39ffffc4 	addi	r7,r7,-1
    7924:	d9c01315 	stw	r7,76(sp)
    7928:	1c63883a 	add	r17,r3,r17
    792c:	db000c17 	ldw	r12,48(sp)
    7930:	003bea06 	br	68dc <__alt_data_end+0xff0068dc>
    7934:	dc000915 	stw	r16,36(sp)
    7938:	003e0e06 	br	7174 <__alt_data_end+0xff007174>
    793c:	01000e44 	movi	r4,57
    7940:	8825883a 	mov	r18,r17
    7944:	9dc00044 	addi	r23,r19,1
    7948:	99000005 	stb	r4,0(r19)
    794c:	a023883a 	mov	r17,r20
    7950:	dc000915 	stw	r16,36(sp)
    7954:	003da406 	br	6fe8 <__alt_data_end+0xff006fe8>
    7958:	d9801417 	ldw	r6,80(sp)
    795c:	d9c01517 	ldw	r7,84(sp)
    7960:	0009883a 	mov	r4,zero
    7964:	014ff834 	movhi	r5,16352
    7968:	000ea580 	call	ea58 <__subdf3>
    796c:	880d883a 	mov	r6,r17
    7970:	a00f883a 	mov	r7,r20
    7974:	1009883a 	mov	r4,r2
    7978:	180b883a 	mov	r5,r3
    797c:	000e8880 	call	e888 <__gedf2>
    7980:	00bc7c0e 	bge	zero,r2,6b74 <__alt_data_end+0xff006b74>
    7984:	01000c04 	movi	r4,48
    7988:	00000106 	br	7990 <_dtoa_r+0x1580>
    798c:	102f883a 	mov	r23,r2
    7990:	b8bfffc4 	addi	r2,r23,-1
    7994:	10c00007 	ldb	r3,0(r2)
    7998:	193ffc26 	beq	r3,r4,798c <__alt_data_end+0xff00798c>
    799c:	d9801317 	ldw	r6,76(sp)
    79a0:	d9800515 	stw	r6,20(sp)
    79a4:	003c4406 	br	6ab8 <__alt_data_end+0xff006ab8>
    79a8:	d9801317 	ldw	r6,76(sp)
    79ac:	d9800515 	stw	r6,20(sp)
    79b0:	003cea06 	br	6d5c <__alt_data_end+0xff006d5c>
    79b4:	dd800f17 	ldw	r22,60(sp)
    79b8:	dcc01017 	ldw	r19,64(sp)
    79bc:	dc801217 	ldw	r18,72(sp)
    79c0:	003c6c06 	br	6b74 <__alt_data_end+0xff006b74>
    79c4:	903e031e 	bne	r18,zero,71d4 <__alt_data_end+0xff0071d4>
    79c8:	003ebb06 	br	74b8 <__alt_data_end+0xff0074b8>
    79cc:	103e6c1e 	bne	r2,zero,7380 <__alt_data_end+0xff007380>
    79d0:	4080004c 	andi	r2,r8,1
    79d4:	103e6a26 	beq	r2,zero,7380 <__alt_data_end+0xff007380>
    79d8:	003e6606 	br	7374 <__alt_data_end+0xff007374>
    79dc:	d8c00317 	ldw	r3,12(sp)
    79e0:	00800084 	movi	r2,2
    79e4:	10c02916 	blt	r2,r3,7a8c <_dtoa_r+0x167c>
    79e8:	d9000c17 	ldw	r4,48(sp)
    79ec:	003e8806 	br	7410 <__alt_data_end+0xff007410>
    79f0:	04000084 	movi	r16,2
    79f4:	003b9d06 	br	686c <__alt_data_end+0xff00686c>
    79f8:	d9001317 	ldw	r4,76(sp)
    79fc:	d9000515 	stw	r4,20(sp)
    7a00:	003cd606 	br	6d5c <__alt_data_end+0xff006d5c>
    7a04:	d8801317 	ldw	r2,76(sp)
    7a08:	d8800515 	stw	r2,20(sp)
    7a0c:	003c2a06 	br	6ab8 <__alt_data_end+0xff006ab8>
    7a10:	d9800317 	ldw	r6,12(sp)
    7a14:	00800084 	movi	r2,2
    7a18:	11801516 	blt	r2,r6,7a70 <_dtoa_r+0x1660>
    7a1c:	d9c00c17 	ldw	r7,48(sp)
    7a20:	d9c00615 	stw	r7,24(sp)
    7a24:	003df706 	br	7204 <__alt_data_end+0xff007204>
    7a28:	193d3926 	beq	r3,r4,6f10 <__alt_data_end+0xff006f10>
    7a2c:	00c00f04 	movi	r3,60
    7a30:	1885c83a 	sub	r2,r3,r2
    7a34:	003ddf06 	br	71b4 <__alt_data_end+0xff0071b4>
    7a38:	e009883a 	mov	r4,fp
    7a3c:	e0001115 	stw	zero,68(fp)
    7a40:	000b883a 	mov	r5,zero
    7a44:	00092a00 	call	92a0 <_Balloc>
    7a48:	d8800715 	stw	r2,28(sp)
    7a4c:	d8c00717 	ldw	r3,28(sp)
    7a50:	00bfffc4 	movi	r2,-1
    7a54:	01000044 	movi	r4,1
    7a58:	d8800c15 	stw	r2,48(sp)
    7a5c:	e0c01015 	stw	r3,64(fp)
    7a60:	d9000b15 	stw	r4,44(sp)
    7a64:	d8800615 	stw	r2,24(sp)
    7a68:	d8002215 	stw	zero,136(sp)
    7a6c:	003c4106 	br	6b74 <__alt_data_end+0xff006b74>
    7a70:	d8c00c17 	ldw	r3,48(sp)
    7a74:	d8c00615 	stw	r3,24(sp)
    7a78:	003e7006 	br	743c <__alt_data_end+0xff00743c>
    7a7c:	04400044 	movi	r17,1
    7a80:	003b2006 	br	6704 <__alt_data_end+0xff006704>
    7a84:	000b883a 	mov	r5,zero
    7a88:	003b3d06 	br	6780 <__alt_data_end+0xff006780>
    7a8c:	d8800c17 	ldw	r2,48(sp)
    7a90:	d8800615 	stw	r2,24(sp)
    7a94:	003e6906 	br	743c <__alt_data_end+0xff00743c>

00007a98 <__sflush_r>:
    7a98:	2880030b 	ldhu	r2,12(r5)
    7a9c:	defffb04 	addi	sp,sp,-20
    7aa0:	dcc00315 	stw	r19,12(sp)
    7aa4:	dc400115 	stw	r17,4(sp)
    7aa8:	dfc00415 	stw	ra,16(sp)
    7aac:	dc800215 	stw	r18,8(sp)
    7ab0:	dc000015 	stw	r16,0(sp)
    7ab4:	10c0020c 	andi	r3,r2,8
    7ab8:	2823883a 	mov	r17,r5
    7abc:	2027883a 	mov	r19,r4
    7ac0:	1800311e 	bne	r3,zero,7b88 <__sflush_r+0xf0>
    7ac4:	28c00117 	ldw	r3,4(r5)
    7ac8:	10820014 	ori	r2,r2,2048
    7acc:	2880030d 	sth	r2,12(r5)
    7ad0:	00c04b0e 	bge	zero,r3,7c00 <__sflush_r+0x168>
    7ad4:	8a000a17 	ldw	r8,40(r17)
    7ad8:	40002326 	beq	r8,zero,7b68 <__sflush_r+0xd0>
    7adc:	9c000017 	ldw	r16,0(r19)
    7ae0:	10c4000c 	andi	r3,r2,4096
    7ae4:	98000015 	stw	zero,0(r19)
    7ae8:	18004826 	beq	r3,zero,7c0c <__sflush_r+0x174>
    7aec:	89801417 	ldw	r6,80(r17)
    7af0:	10c0010c 	andi	r3,r2,4
    7af4:	18000626 	beq	r3,zero,7b10 <__sflush_r+0x78>
    7af8:	88c00117 	ldw	r3,4(r17)
    7afc:	88800c17 	ldw	r2,48(r17)
    7b00:	30cdc83a 	sub	r6,r6,r3
    7b04:	10000226 	beq	r2,zero,7b10 <__sflush_r+0x78>
    7b08:	88800f17 	ldw	r2,60(r17)
    7b0c:	308dc83a 	sub	r6,r6,r2
    7b10:	89400717 	ldw	r5,28(r17)
    7b14:	000f883a 	mov	r7,zero
    7b18:	9809883a 	mov	r4,r19
    7b1c:	403ee83a 	callr	r8
    7b20:	00ffffc4 	movi	r3,-1
    7b24:	10c04426 	beq	r2,r3,7c38 <__sflush_r+0x1a0>
    7b28:	88c0030b 	ldhu	r3,12(r17)
    7b2c:	89000417 	ldw	r4,16(r17)
    7b30:	88000115 	stw	zero,4(r17)
    7b34:	197dffcc 	andi	r5,r3,63487
    7b38:	8940030d 	sth	r5,12(r17)
    7b3c:	89000015 	stw	r4,0(r17)
    7b40:	18c4000c 	andi	r3,r3,4096
    7b44:	18002c1e 	bne	r3,zero,7bf8 <__sflush_r+0x160>
    7b48:	89400c17 	ldw	r5,48(r17)
    7b4c:	9c000015 	stw	r16,0(r19)
    7b50:	28000526 	beq	r5,zero,7b68 <__sflush_r+0xd0>
    7b54:	88801004 	addi	r2,r17,64
    7b58:	28800226 	beq	r5,r2,7b64 <__sflush_r+0xcc>
    7b5c:	9809883a 	mov	r4,r19
    7b60:	00082040 	call	8204 <_free_r>
    7b64:	88000c15 	stw	zero,48(r17)
    7b68:	0005883a 	mov	r2,zero
    7b6c:	dfc00417 	ldw	ra,16(sp)
    7b70:	dcc00317 	ldw	r19,12(sp)
    7b74:	dc800217 	ldw	r18,8(sp)
    7b78:	dc400117 	ldw	r17,4(sp)
    7b7c:	dc000017 	ldw	r16,0(sp)
    7b80:	dec00504 	addi	sp,sp,20
    7b84:	f800283a 	ret
    7b88:	2c800417 	ldw	r18,16(r5)
    7b8c:	903ff626 	beq	r18,zero,7b68 <__alt_data_end+0xff007b68>
    7b90:	2c000017 	ldw	r16,0(r5)
    7b94:	108000cc 	andi	r2,r2,3
    7b98:	2c800015 	stw	r18,0(r5)
    7b9c:	84a1c83a 	sub	r16,r16,r18
    7ba0:	1000131e 	bne	r2,zero,7bf0 <__sflush_r+0x158>
    7ba4:	28800517 	ldw	r2,20(r5)
    7ba8:	88800215 	stw	r2,8(r17)
    7bac:	04000316 	blt	zero,r16,7bbc <__sflush_r+0x124>
    7bb0:	003fed06 	br	7b68 <__alt_data_end+0xff007b68>
    7bb4:	90a5883a 	add	r18,r18,r2
    7bb8:	043feb0e 	bge	zero,r16,7b68 <__alt_data_end+0xff007b68>
    7bbc:	88800917 	ldw	r2,36(r17)
    7bc0:	89400717 	ldw	r5,28(r17)
    7bc4:	800f883a 	mov	r7,r16
    7bc8:	900d883a 	mov	r6,r18
    7bcc:	9809883a 	mov	r4,r19
    7bd0:	103ee83a 	callr	r2
    7bd4:	80a1c83a 	sub	r16,r16,r2
    7bd8:	00bff616 	blt	zero,r2,7bb4 <__alt_data_end+0xff007bb4>
    7bdc:	88c0030b 	ldhu	r3,12(r17)
    7be0:	00bfffc4 	movi	r2,-1
    7be4:	18c01014 	ori	r3,r3,64
    7be8:	88c0030d 	sth	r3,12(r17)
    7bec:	003fdf06 	br	7b6c <__alt_data_end+0xff007b6c>
    7bf0:	0005883a 	mov	r2,zero
    7bf4:	003fec06 	br	7ba8 <__alt_data_end+0xff007ba8>
    7bf8:	88801415 	stw	r2,80(r17)
    7bfc:	003fd206 	br	7b48 <__alt_data_end+0xff007b48>
    7c00:	28c00f17 	ldw	r3,60(r5)
    7c04:	00ffb316 	blt	zero,r3,7ad4 <__alt_data_end+0xff007ad4>
    7c08:	003fd706 	br	7b68 <__alt_data_end+0xff007b68>
    7c0c:	89400717 	ldw	r5,28(r17)
    7c10:	000d883a 	mov	r6,zero
    7c14:	01c00044 	movi	r7,1
    7c18:	9809883a 	mov	r4,r19
    7c1c:	403ee83a 	callr	r8
    7c20:	100d883a 	mov	r6,r2
    7c24:	00bfffc4 	movi	r2,-1
    7c28:	30801426 	beq	r6,r2,7c7c <__sflush_r+0x1e4>
    7c2c:	8880030b 	ldhu	r2,12(r17)
    7c30:	8a000a17 	ldw	r8,40(r17)
    7c34:	003fae06 	br	7af0 <__alt_data_end+0xff007af0>
    7c38:	98c00017 	ldw	r3,0(r19)
    7c3c:	183fba26 	beq	r3,zero,7b28 <__alt_data_end+0xff007b28>
    7c40:	01000744 	movi	r4,29
    7c44:	19000626 	beq	r3,r4,7c60 <__sflush_r+0x1c8>
    7c48:	01000584 	movi	r4,22
    7c4c:	19000426 	beq	r3,r4,7c60 <__sflush_r+0x1c8>
    7c50:	88c0030b 	ldhu	r3,12(r17)
    7c54:	18c01014 	ori	r3,r3,64
    7c58:	88c0030d 	sth	r3,12(r17)
    7c5c:	003fc306 	br	7b6c <__alt_data_end+0xff007b6c>
    7c60:	8880030b 	ldhu	r2,12(r17)
    7c64:	88c00417 	ldw	r3,16(r17)
    7c68:	88000115 	stw	zero,4(r17)
    7c6c:	10bdffcc 	andi	r2,r2,63487
    7c70:	8880030d 	sth	r2,12(r17)
    7c74:	88c00015 	stw	r3,0(r17)
    7c78:	003fb306 	br	7b48 <__alt_data_end+0xff007b48>
    7c7c:	98800017 	ldw	r2,0(r19)
    7c80:	103fea26 	beq	r2,zero,7c2c <__alt_data_end+0xff007c2c>
    7c84:	00c00744 	movi	r3,29
    7c88:	10c00226 	beq	r2,r3,7c94 <__sflush_r+0x1fc>
    7c8c:	00c00584 	movi	r3,22
    7c90:	10c0031e 	bne	r2,r3,7ca0 <__sflush_r+0x208>
    7c94:	9c000015 	stw	r16,0(r19)
    7c98:	0005883a 	mov	r2,zero
    7c9c:	003fb306 	br	7b6c <__alt_data_end+0xff007b6c>
    7ca0:	88c0030b 	ldhu	r3,12(r17)
    7ca4:	3005883a 	mov	r2,r6
    7ca8:	18c01014 	ori	r3,r3,64
    7cac:	88c0030d 	sth	r3,12(r17)
    7cb0:	003fae06 	br	7b6c <__alt_data_end+0xff007b6c>

00007cb4 <_fflush_r>:
    7cb4:	defffd04 	addi	sp,sp,-12
    7cb8:	dc000115 	stw	r16,4(sp)
    7cbc:	dfc00215 	stw	ra,8(sp)
    7cc0:	2021883a 	mov	r16,r4
    7cc4:	20000226 	beq	r4,zero,7cd0 <_fflush_r+0x1c>
    7cc8:	20800e17 	ldw	r2,56(r4)
    7ccc:	10000c26 	beq	r2,zero,7d00 <_fflush_r+0x4c>
    7cd0:	2880030f 	ldh	r2,12(r5)
    7cd4:	1000051e 	bne	r2,zero,7cec <_fflush_r+0x38>
    7cd8:	0005883a 	mov	r2,zero
    7cdc:	dfc00217 	ldw	ra,8(sp)
    7ce0:	dc000117 	ldw	r16,4(sp)
    7ce4:	dec00304 	addi	sp,sp,12
    7ce8:	f800283a 	ret
    7cec:	8009883a 	mov	r4,r16
    7cf0:	dfc00217 	ldw	ra,8(sp)
    7cf4:	dc000117 	ldw	r16,4(sp)
    7cf8:	dec00304 	addi	sp,sp,12
    7cfc:	0007a981 	jmpi	7a98 <__sflush_r>
    7d00:	d9400015 	stw	r5,0(sp)
    7d04:	00080900 	call	8090 <__sinit>
    7d08:	d9400017 	ldw	r5,0(sp)
    7d0c:	003ff006 	br	7cd0 <__alt_data_end+0xff007cd0>

00007d10 <fflush>:
    7d10:	20000526 	beq	r4,zero,7d28 <fflush+0x18>
    7d14:	00800074 	movhi	r2,1
    7d18:	10902504 	addi	r2,r2,16532
    7d1c:	200b883a 	mov	r5,r4
    7d20:	11000017 	ldw	r4,0(r2)
    7d24:	0007cb41 	jmpi	7cb4 <_fflush_r>
    7d28:	00800074 	movhi	r2,1
    7d2c:	10902404 	addi	r2,r2,16528
    7d30:	11000017 	ldw	r4,0(r2)
    7d34:	01400034 	movhi	r5,0
    7d38:	295f2d04 	addi	r5,r5,31924
    7d3c:	0008a941 	jmpi	8a94 <_fwalk_reent>

00007d40 <__fp_unlock>:
    7d40:	0005883a 	mov	r2,zero
    7d44:	f800283a 	ret

00007d48 <_cleanup_r>:
    7d48:	01400074 	movhi	r5,1
    7d4c:	29709304 	addi	r5,r5,-15796
    7d50:	0008a941 	jmpi	8a94 <_fwalk_reent>

00007d54 <__sinit.part.1>:
    7d54:	defff704 	addi	sp,sp,-36
    7d58:	00c00034 	movhi	r3,0
    7d5c:	dfc00815 	stw	ra,32(sp)
    7d60:	ddc00715 	stw	r23,28(sp)
    7d64:	dd800615 	stw	r22,24(sp)
    7d68:	dd400515 	stw	r21,20(sp)
    7d6c:	dd000415 	stw	r20,16(sp)
    7d70:	dcc00315 	stw	r19,12(sp)
    7d74:	dc800215 	stw	r18,8(sp)
    7d78:	dc400115 	stw	r17,4(sp)
    7d7c:	dc000015 	stw	r16,0(sp)
    7d80:	18df5204 	addi	r3,r3,32072
    7d84:	24000117 	ldw	r16,4(r4)
    7d88:	20c00f15 	stw	r3,60(r4)
    7d8c:	2080bb04 	addi	r2,r4,748
    7d90:	00c000c4 	movi	r3,3
    7d94:	20c0b915 	stw	r3,740(r4)
    7d98:	2080ba15 	stw	r2,744(r4)
    7d9c:	2000b815 	stw	zero,736(r4)
    7da0:	05c00204 	movi	r23,8
    7da4:	00800104 	movi	r2,4
    7da8:	2025883a 	mov	r18,r4
    7dac:	b80d883a 	mov	r6,r23
    7db0:	81001704 	addi	r4,r16,92
    7db4:	000b883a 	mov	r5,zero
    7db8:	80000015 	stw	zero,0(r16)
    7dbc:	80000115 	stw	zero,4(r16)
    7dc0:	80000215 	stw	zero,8(r16)
    7dc4:	8080030d 	sth	r2,12(r16)
    7dc8:	80001915 	stw	zero,100(r16)
    7dcc:	8000038d 	sth	zero,14(r16)
    7dd0:	80000415 	stw	zero,16(r16)
    7dd4:	80000515 	stw	zero,20(r16)
    7dd8:	80000615 	stw	zero,24(r16)
    7ddc:	00091780 	call	9178 <memset>
    7de0:	05800074 	movhi	r22,1
    7de4:	94400217 	ldw	r17,8(r18)
    7de8:	05400074 	movhi	r21,1
    7dec:	05000074 	movhi	r20,1
    7df0:	04c00074 	movhi	r19,1
    7df4:	b5aa1d04 	addi	r22,r22,-22412
    7df8:	ad6a3404 	addi	r21,r21,-22320
    7dfc:	a52a5304 	addi	r20,r20,-22196
    7e00:	9cea6a04 	addi	r19,r19,-22104
    7e04:	85800815 	stw	r22,32(r16)
    7e08:	85400915 	stw	r21,36(r16)
    7e0c:	85000a15 	stw	r20,40(r16)
    7e10:	84c00b15 	stw	r19,44(r16)
    7e14:	84000715 	stw	r16,28(r16)
    7e18:	00800284 	movi	r2,10
    7e1c:	8880030d 	sth	r2,12(r17)
    7e20:	00800044 	movi	r2,1
    7e24:	b80d883a 	mov	r6,r23
    7e28:	89001704 	addi	r4,r17,92
    7e2c:	000b883a 	mov	r5,zero
    7e30:	88000015 	stw	zero,0(r17)
    7e34:	88000115 	stw	zero,4(r17)
    7e38:	88000215 	stw	zero,8(r17)
    7e3c:	88001915 	stw	zero,100(r17)
    7e40:	8880038d 	sth	r2,14(r17)
    7e44:	88000415 	stw	zero,16(r17)
    7e48:	88000515 	stw	zero,20(r17)
    7e4c:	88000615 	stw	zero,24(r17)
    7e50:	00091780 	call	9178 <memset>
    7e54:	94000317 	ldw	r16,12(r18)
    7e58:	00800484 	movi	r2,18
    7e5c:	8c400715 	stw	r17,28(r17)
    7e60:	8d800815 	stw	r22,32(r17)
    7e64:	8d400915 	stw	r21,36(r17)
    7e68:	8d000a15 	stw	r20,40(r17)
    7e6c:	8cc00b15 	stw	r19,44(r17)
    7e70:	8080030d 	sth	r2,12(r16)
    7e74:	00800084 	movi	r2,2
    7e78:	80000015 	stw	zero,0(r16)
    7e7c:	80000115 	stw	zero,4(r16)
    7e80:	80000215 	stw	zero,8(r16)
    7e84:	80001915 	stw	zero,100(r16)
    7e88:	8080038d 	sth	r2,14(r16)
    7e8c:	80000415 	stw	zero,16(r16)
    7e90:	80000515 	stw	zero,20(r16)
    7e94:	80000615 	stw	zero,24(r16)
    7e98:	b80d883a 	mov	r6,r23
    7e9c:	000b883a 	mov	r5,zero
    7ea0:	81001704 	addi	r4,r16,92
    7ea4:	00091780 	call	9178 <memset>
    7ea8:	00800044 	movi	r2,1
    7eac:	84000715 	stw	r16,28(r16)
    7eb0:	85800815 	stw	r22,32(r16)
    7eb4:	85400915 	stw	r21,36(r16)
    7eb8:	85000a15 	stw	r20,40(r16)
    7ebc:	84c00b15 	stw	r19,44(r16)
    7ec0:	90800e15 	stw	r2,56(r18)
    7ec4:	dfc00817 	ldw	ra,32(sp)
    7ec8:	ddc00717 	ldw	r23,28(sp)
    7ecc:	dd800617 	ldw	r22,24(sp)
    7ed0:	dd400517 	ldw	r21,20(sp)
    7ed4:	dd000417 	ldw	r20,16(sp)
    7ed8:	dcc00317 	ldw	r19,12(sp)
    7edc:	dc800217 	ldw	r18,8(sp)
    7ee0:	dc400117 	ldw	r17,4(sp)
    7ee4:	dc000017 	ldw	r16,0(sp)
    7ee8:	dec00904 	addi	sp,sp,36
    7eec:	f800283a 	ret

00007ef0 <__fp_lock>:
    7ef0:	0005883a 	mov	r2,zero
    7ef4:	f800283a 	ret

00007ef8 <__sfmoreglue>:
    7ef8:	defffc04 	addi	sp,sp,-16
    7efc:	dc400115 	stw	r17,4(sp)
    7f00:	2c7fffc4 	addi	r17,r5,-1
    7f04:	8c401a24 	muli	r17,r17,104
    7f08:	dc800215 	stw	r18,8(sp)
    7f0c:	2825883a 	mov	r18,r5
    7f10:	89401d04 	addi	r5,r17,116
    7f14:	dc000015 	stw	r16,0(sp)
    7f18:	dfc00315 	stw	ra,12(sp)
    7f1c:	00033b40 	call	33b4 <_malloc_r>
    7f20:	1021883a 	mov	r16,r2
    7f24:	10000726 	beq	r2,zero,7f44 <__sfmoreglue+0x4c>
    7f28:	11000304 	addi	r4,r2,12
    7f2c:	10000015 	stw	zero,0(r2)
    7f30:	14800115 	stw	r18,4(r2)
    7f34:	11000215 	stw	r4,8(r2)
    7f38:	89801a04 	addi	r6,r17,104
    7f3c:	000b883a 	mov	r5,zero
    7f40:	00091780 	call	9178 <memset>
    7f44:	8005883a 	mov	r2,r16
    7f48:	dfc00317 	ldw	ra,12(sp)
    7f4c:	dc800217 	ldw	r18,8(sp)
    7f50:	dc400117 	ldw	r17,4(sp)
    7f54:	dc000017 	ldw	r16,0(sp)
    7f58:	dec00404 	addi	sp,sp,16
    7f5c:	f800283a 	ret

00007f60 <__sfp>:
    7f60:	defffb04 	addi	sp,sp,-20
    7f64:	dc000015 	stw	r16,0(sp)
    7f68:	04000074 	movhi	r16,1
    7f6c:	84102404 	addi	r16,r16,16528
    7f70:	dcc00315 	stw	r19,12(sp)
    7f74:	2027883a 	mov	r19,r4
    7f78:	81000017 	ldw	r4,0(r16)
    7f7c:	dfc00415 	stw	ra,16(sp)
    7f80:	dc800215 	stw	r18,8(sp)
    7f84:	20800e17 	ldw	r2,56(r4)
    7f88:	dc400115 	stw	r17,4(sp)
    7f8c:	1000021e 	bne	r2,zero,7f98 <__sfp+0x38>
    7f90:	0007d540 	call	7d54 <__sinit.part.1>
    7f94:	81000017 	ldw	r4,0(r16)
    7f98:	2480b804 	addi	r18,r4,736
    7f9c:	047fffc4 	movi	r17,-1
    7fa0:	91000117 	ldw	r4,4(r18)
    7fa4:	94000217 	ldw	r16,8(r18)
    7fa8:	213fffc4 	addi	r4,r4,-1
    7fac:	20000a16 	blt	r4,zero,7fd8 <__sfp+0x78>
    7fb0:	8080030f 	ldh	r2,12(r16)
    7fb4:	10000c26 	beq	r2,zero,7fe8 <__sfp+0x88>
    7fb8:	80c01d04 	addi	r3,r16,116
    7fbc:	00000206 	br	7fc8 <__sfp+0x68>
    7fc0:	18bfe60f 	ldh	r2,-104(r3)
    7fc4:	10000826 	beq	r2,zero,7fe8 <__sfp+0x88>
    7fc8:	213fffc4 	addi	r4,r4,-1
    7fcc:	1c3ffd04 	addi	r16,r3,-12
    7fd0:	18c01a04 	addi	r3,r3,104
    7fd4:	247ffa1e 	bne	r4,r17,7fc0 <__alt_data_end+0xff007fc0>
    7fd8:	90800017 	ldw	r2,0(r18)
    7fdc:	10001d26 	beq	r2,zero,8054 <__sfp+0xf4>
    7fe0:	1025883a 	mov	r18,r2
    7fe4:	003fee06 	br	7fa0 <__alt_data_end+0xff007fa0>
    7fe8:	00bfffc4 	movi	r2,-1
    7fec:	8080038d 	sth	r2,14(r16)
    7ff0:	00800044 	movi	r2,1
    7ff4:	8080030d 	sth	r2,12(r16)
    7ff8:	80001915 	stw	zero,100(r16)
    7ffc:	80000015 	stw	zero,0(r16)
    8000:	80000215 	stw	zero,8(r16)
    8004:	80000115 	stw	zero,4(r16)
    8008:	80000415 	stw	zero,16(r16)
    800c:	80000515 	stw	zero,20(r16)
    8010:	80000615 	stw	zero,24(r16)
    8014:	01800204 	movi	r6,8
    8018:	000b883a 	mov	r5,zero
    801c:	81001704 	addi	r4,r16,92
    8020:	00091780 	call	9178 <memset>
    8024:	8005883a 	mov	r2,r16
    8028:	80000c15 	stw	zero,48(r16)
    802c:	80000d15 	stw	zero,52(r16)
    8030:	80001115 	stw	zero,68(r16)
    8034:	80001215 	stw	zero,72(r16)
    8038:	dfc00417 	ldw	ra,16(sp)
    803c:	dcc00317 	ldw	r19,12(sp)
    8040:	dc800217 	ldw	r18,8(sp)
    8044:	dc400117 	ldw	r17,4(sp)
    8048:	dc000017 	ldw	r16,0(sp)
    804c:	dec00504 	addi	sp,sp,20
    8050:	f800283a 	ret
    8054:	01400104 	movi	r5,4
    8058:	9809883a 	mov	r4,r19
    805c:	0007ef80 	call	7ef8 <__sfmoreglue>
    8060:	90800015 	stw	r2,0(r18)
    8064:	103fde1e 	bne	r2,zero,7fe0 <__alt_data_end+0xff007fe0>
    8068:	00800304 	movi	r2,12
    806c:	98800015 	stw	r2,0(r19)
    8070:	0005883a 	mov	r2,zero
    8074:	003ff006 	br	8038 <__alt_data_end+0xff008038>

00008078 <_cleanup>:
    8078:	00800074 	movhi	r2,1
    807c:	10902404 	addi	r2,r2,16528
    8080:	11000017 	ldw	r4,0(r2)
    8084:	01400074 	movhi	r5,1
    8088:	29709304 	addi	r5,r5,-15796
    808c:	0008a941 	jmpi	8a94 <_fwalk_reent>

00008090 <__sinit>:
    8090:	20800e17 	ldw	r2,56(r4)
    8094:	10000126 	beq	r2,zero,809c <__sinit+0xc>
    8098:	f800283a 	ret
    809c:	0007d541 	jmpi	7d54 <__sinit.part.1>

000080a0 <__sfp_lock_acquire>:
    80a0:	f800283a 	ret

000080a4 <__sfp_lock_release>:
    80a4:	f800283a 	ret

000080a8 <__sinit_lock_acquire>:
    80a8:	f800283a 	ret

000080ac <__sinit_lock_release>:
    80ac:	f800283a 	ret

000080b0 <__fp_lock_all>:
    80b0:	00800074 	movhi	r2,1
    80b4:	10902504 	addi	r2,r2,16532
    80b8:	11000017 	ldw	r4,0(r2)
    80bc:	01400034 	movhi	r5,0
    80c0:	295fbc04 	addi	r5,r5,32496
    80c4:	00089d01 	jmpi	89d0 <_fwalk>

000080c8 <__fp_unlock_all>:
    80c8:	00800074 	movhi	r2,1
    80cc:	10902504 	addi	r2,r2,16532
    80d0:	11000017 	ldw	r4,0(r2)
    80d4:	01400034 	movhi	r5,0
    80d8:	295f5004 	addi	r5,r5,32064
    80dc:	00089d01 	jmpi	89d0 <_fwalk>

000080e0 <_malloc_trim_r>:
    80e0:	defffb04 	addi	sp,sp,-20
    80e4:	dcc00315 	stw	r19,12(sp)
    80e8:	04c00074 	movhi	r19,1
    80ec:	dc800215 	stw	r18,8(sp)
    80f0:	dc400115 	stw	r17,4(sp)
    80f4:	dc000015 	stw	r16,0(sp)
    80f8:	dfc00415 	stw	ra,16(sp)
    80fc:	2821883a 	mov	r16,r5
    8100:	9cc97504 	addi	r19,r19,9684
    8104:	2025883a 	mov	r18,r4
    8108:	000f9780 	call	f978 <__malloc_lock>
    810c:	98800217 	ldw	r2,8(r19)
    8110:	14400117 	ldw	r17,4(r2)
    8114:	00bfff04 	movi	r2,-4
    8118:	88a2703a 	and	r17,r17,r2
    811c:	8c21c83a 	sub	r16,r17,r16
    8120:	8403fbc4 	addi	r16,r16,4079
    8124:	8020d33a 	srli	r16,r16,12
    8128:	0083ffc4 	movi	r2,4095
    812c:	843fffc4 	addi	r16,r16,-1
    8130:	8020933a 	slli	r16,r16,12
    8134:	1400060e 	bge	r2,r16,8150 <_malloc_trim_r+0x70>
    8138:	000b883a 	mov	r5,zero
    813c:	9009883a 	mov	r4,r18
    8140:	0003d000 	call	3d00 <_sbrk_r>
    8144:	98c00217 	ldw	r3,8(r19)
    8148:	1c47883a 	add	r3,r3,r17
    814c:	10c00a26 	beq	r2,r3,8178 <_malloc_trim_r+0x98>
    8150:	9009883a 	mov	r4,r18
    8154:	000f99c0 	call	f99c <__malloc_unlock>
    8158:	0005883a 	mov	r2,zero
    815c:	dfc00417 	ldw	ra,16(sp)
    8160:	dcc00317 	ldw	r19,12(sp)
    8164:	dc800217 	ldw	r18,8(sp)
    8168:	dc400117 	ldw	r17,4(sp)
    816c:	dc000017 	ldw	r16,0(sp)
    8170:	dec00504 	addi	sp,sp,20
    8174:	f800283a 	ret
    8178:	040bc83a 	sub	r5,zero,r16
    817c:	9009883a 	mov	r4,r18
    8180:	0003d000 	call	3d00 <_sbrk_r>
    8184:	00ffffc4 	movi	r3,-1
    8188:	10c00d26 	beq	r2,r3,81c0 <_malloc_trim_r+0xe0>
    818c:	00c00074 	movhi	r3,1
    8190:	18d70904 	addi	r3,r3,23588
    8194:	18800017 	ldw	r2,0(r3)
    8198:	99000217 	ldw	r4,8(r19)
    819c:	8c23c83a 	sub	r17,r17,r16
    81a0:	8c400054 	ori	r17,r17,1
    81a4:	1421c83a 	sub	r16,r2,r16
    81a8:	24400115 	stw	r17,4(r4)
    81ac:	9009883a 	mov	r4,r18
    81b0:	1c000015 	stw	r16,0(r3)
    81b4:	000f99c0 	call	f99c <__malloc_unlock>
    81b8:	00800044 	movi	r2,1
    81bc:	003fe706 	br	815c <__alt_data_end+0xff00815c>
    81c0:	000b883a 	mov	r5,zero
    81c4:	9009883a 	mov	r4,r18
    81c8:	0003d000 	call	3d00 <_sbrk_r>
    81cc:	99000217 	ldw	r4,8(r19)
    81d0:	014003c4 	movi	r5,15
    81d4:	1107c83a 	sub	r3,r2,r4
    81d8:	28ffdd0e 	bge	r5,r3,8150 <__alt_data_end+0xff008150>
    81dc:	01400074 	movhi	r5,1
    81e0:	29502204 	addi	r5,r5,16520
    81e4:	29400017 	ldw	r5,0(r5)
    81e8:	18c00054 	ori	r3,r3,1
    81ec:	20c00115 	stw	r3,4(r4)
    81f0:	00c00074 	movhi	r3,1
    81f4:	1145c83a 	sub	r2,r2,r5
    81f8:	18d70904 	addi	r3,r3,23588
    81fc:	18800015 	stw	r2,0(r3)
    8200:	003fd306 	br	8150 <__alt_data_end+0xff008150>

00008204 <_free_r>:
    8204:	28004126 	beq	r5,zero,830c <_free_r+0x108>
    8208:	defffd04 	addi	sp,sp,-12
    820c:	dc400115 	stw	r17,4(sp)
    8210:	dc000015 	stw	r16,0(sp)
    8214:	2023883a 	mov	r17,r4
    8218:	2821883a 	mov	r16,r5
    821c:	dfc00215 	stw	ra,8(sp)
    8220:	000f9780 	call	f978 <__malloc_lock>
    8224:	81ffff17 	ldw	r7,-4(r16)
    8228:	00bfff84 	movi	r2,-2
    822c:	01000074 	movhi	r4,1
    8230:	81bffe04 	addi	r6,r16,-8
    8234:	3884703a 	and	r2,r7,r2
    8238:	21097504 	addi	r4,r4,9684
    823c:	308b883a 	add	r5,r6,r2
    8240:	2a400117 	ldw	r9,4(r5)
    8244:	22000217 	ldw	r8,8(r4)
    8248:	00ffff04 	movi	r3,-4
    824c:	48c6703a 	and	r3,r9,r3
    8250:	2a005726 	beq	r5,r8,83b0 <_free_r+0x1ac>
    8254:	28c00115 	stw	r3,4(r5)
    8258:	39c0004c 	andi	r7,r7,1
    825c:	3800091e 	bne	r7,zero,8284 <_free_r+0x80>
    8260:	823ffe17 	ldw	r8,-8(r16)
    8264:	22400204 	addi	r9,r4,8
    8268:	320dc83a 	sub	r6,r6,r8
    826c:	31c00217 	ldw	r7,8(r6)
    8270:	1205883a 	add	r2,r2,r8
    8274:	3a406526 	beq	r7,r9,840c <_free_r+0x208>
    8278:	32000317 	ldw	r8,12(r6)
    827c:	3a000315 	stw	r8,12(r7)
    8280:	41c00215 	stw	r7,8(r8)
    8284:	28cf883a 	add	r7,r5,r3
    8288:	39c00117 	ldw	r7,4(r7)
    828c:	39c0004c 	andi	r7,r7,1
    8290:	38003a26 	beq	r7,zero,837c <_free_r+0x178>
    8294:	10c00054 	ori	r3,r2,1
    8298:	30c00115 	stw	r3,4(r6)
    829c:	3087883a 	add	r3,r6,r2
    82a0:	18800015 	stw	r2,0(r3)
    82a4:	00c07fc4 	movi	r3,511
    82a8:	18801936 	bltu	r3,r2,8310 <_free_r+0x10c>
    82ac:	1004d0fa 	srli	r2,r2,3
    82b0:	01c00044 	movi	r7,1
    82b4:	21400117 	ldw	r5,4(r4)
    82b8:	10c00044 	addi	r3,r2,1
    82bc:	18c7883a 	add	r3,r3,r3
    82c0:	1005d0ba 	srai	r2,r2,2
    82c4:	18c7883a 	add	r3,r3,r3
    82c8:	18c7883a 	add	r3,r3,r3
    82cc:	1907883a 	add	r3,r3,r4
    82d0:	3884983a 	sll	r2,r7,r2
    82d4:	19c00017 	ldw	r7,0(r3)
    82d8:	1a3ffe04 	addi	r8,r3,-8
    82dc:	1144b03a 	or	r2,r2,r5
    82e0:	32000315 	stw	r8,12(r6)
    82e4:	31c00215 	stw	r7,8(r6)
    82e8:	20800115 	stw	r2,4(r4)
    82ec:	19800015 	stw	r6,0(r3)
    82f0:	39800315 	stw	r6,12(r7)
    82f4:	8809883a 	mov	r4,r17
    82f8:	dfc00217 	ldw	ra,8(sp)
    82fc:	dc400117 	ldw	r17,4(sp)
    8300:	dc000017 	ldw	r16,0(sp)
    8304:	dec00304 	addi	sp,sp,12
    8308:	000f99c1 	jmpi	f99c <__malloc_unlock>
    830c:	f800283a 	ret
    8310:	100ad27a 	srli	r5,r2,9
    8314:	00c00104 	movi	r3,4
    8318:	19404a36 	bltu	r3,r5,8444 <_free_r+0x240>
    831c:	100ad1ba 	srli	r5,r2,6
    8320:	28c00e44 	addi	r3,r5,57
    8324:	18c7883a 	add	r3,r3,r3
    8328:	29400e04 	addi	r5,r5,56
    832c:	18c7883a 	add	r3,r3,r3
    8330:	18c7883a 	add	r3,r3,r3
    8334:	1909883a 	add	r4,r3,r4
    8338:	20c00017 	ldw	r3,0(r4)
    833c:	01c00074 	movhi	r7,1
    8340:	213ffe04 	addi	r4,r4,-8
    8344:	39c97504 	addi	r7,r7,9684
    8348:	20c04426 	beq	r4,r3,845c <_free_r+0x258>
    834c:	01ffff04 	movi	r7,-4
    8350:	19400117 	ldw	r5,4(r3)
    8354:	29ca703a 	and	r5,r5,r7
    8358:	1140022e 	bgeu	r2,r5,8364 <_free_r+0x160>
    835c:	18c00217 	ldw	r3,8(r3)
    8360:	20fffb1e 	bne	r4,r3,8350 <__alt_data_end+0xff008350>
    8364:	19000317 	ldw	r4,12(r3)
    8368:	31000315 	stw	r4,12(r6)
    836c:	30c00215 	stw	r3,8(r6)
    8370:	21800215 	stw	r6,8(r4)
    8374:	19800315 	stw	r6,12(r3)
    8378:	003fde06 	br	82f4 <__alt_data_end+0xff0082f4>
    837c:	29c00217 	ldw	r7,8(r5)
    8380:	10c5883a 	add	r2,r2,r3
    8384:	00c00074 	movhi	r3,1
    8388:	18c97704 	addi	r3,r3,9692
    838c:	38c03b26 	beq	r7,r3,847c <_free_r+0x278>
    8390:	2a000317 	ldw	r8,12(r5)
    8394:	11400054 	ori	r5,r2,1
    8398:	3087883a 	add	r3,r6,r2
    839c:	3a000315 	stw	r8,12(r7)
    83a0:	41c00215 	stw	r7,8(r8)
    83a4:	31400115 	stw	r5,4(r6)
    83a8:	18800015 	stw	r2,0(r3)
    83ac:	003fbd06 	br	82a4 <__alt_data_end+0xff0082a4>
    83b0:	39c0004c 	andi	r7,r7,1
    83b4:	10c5883a 	add	r2,r2,r3
    83b8:	3800071e 	bne	r7,zero,83d8 <_free_r+0x1d4>
    83bc:	81fffe17 	ldw	r7,-8(r16)
    83c0:	31cdc83a 	sub	r6,r6,r7
    83c4:	30c00317 	ldw	r3,12(r6)
    83c8:	31400217 	ldw	r5,8(r6)
    83cc:	11c5883a 	add	r2,r2,r7
    83d0:	28c00315 	stw	r3,12(r5)
    83d4:	19400215 	stw	r5,8(r3)
    83d8:	10c00054 	ori	r3,r2,1
    83dc:	30c00115 	stw	r3,4(r6)
    83e0:	00c00074 	movhi	r3,1
    83e4:	18d02304 	addi	r3,r3,16524
    83e8:	18c00017 	ldw	r3,0(r3)
    83ec:	21800215 	stw	r6,8(r4)
    83f0:	10ffc036 	bltu	r2,r3,82f4 <__alt_data_end+0xff0082f4>
    83f4:	00800074 	movhi	r2,1
    83f8:	1096fb04 	addi	r2,r2,23532
    83fc:	11400017 	ldw	r5,0(r2)
    8400:	8809883a 	mov	r4,r17
    8404:	00080e00 	call	80e0 <_malloc_trim_r>
    8408:	003fba06 	br	82f4 <__alt_data_end+0xff0082f4>
    840c:	28c9883a 	add	r4,r5,r3
    8410:	21000117 	ldw	r4,4(r4)
    8414:	2100004c 	andi	r4,r4,1
    8418:	2000391e 	bne	r4,zero,8500 <_free_r+0x2fc>
    841c:	29c00217 	ldw	r7,8(r5)
    8420:	29000317 	ldw	r4,12(r5)
    8424:	1885883a 	add	r2,r3,r2
    8428:	10c00054 	ori	r3,r2,1
    842c:	39000315 	stw	r4,12(r7)
    8430:	21c00215 	stw	r7,8(r4)
    8434:	30c00115 	stw	r3,4(r6)
    8438:	308d883a 	add	r6,r6,r2
    843c:	30800015 	stw	r2,0(r6)
    8440:	003fac06 	br	82f4 <__alt_data_end+0xff0082f4>
    8444:	00c00504 	movi	r3,20
    8448:	19401536 	bltu	r3,r5,84a0 <_free_r+0x29c>
    844c:	28c01704 	addi	r3,r5,92
    8450:	18c7883a 	add	r3,r3,r3
    8454:	294016c4 	addi	r5,r5,91
    8458:	003fb406 	br	832c <__alt_data_end+0xff00832c>
    845c:	280bd0ba 	srai	r5,r5,2
    8460:	00c00044 	movi	r3,1
    8464:	38800117 	ldw	r2,4(r7)
    8468:	194a983a 	sll	r5,r3,r5
    846c:	2007883a 	mov	r3,r4
    8470:	2884b03a 	or	r2,r5,r2
    8474:	38800115 	stw	r2,4(r7)
    8478:	003fbb06 	br	8368 <__alt_data_end+0xff008368>
    847c:	21800515 	stw	r6,20(r4)
    8480:	21800415 	stw	r6,16(r4)
    8484:	10c00054 	ori	r3,r2,1
    8488:	31c00315 	stw	r7,12(r6)
    848c:	31c00215 	stw	r7,8(r6)
    8490:	30c00115 	stw	r3,4(r6)
    8494:	308d883a 	add	r6,r6,r2
    8498:	30800015 	stw	r2,0(r6)
    849c:	003f9506 	br	82f4 <__alt_data_end+0xff0082f4>
    84a0:	00c01504 	movi	r3,84
    84a4:	19400536 	bltu	r3,r5,84bc <_free_r+0x2b8>
    84a8:	100ad33a 	srli	r5,r2,12
    84ac:	28c01bc4 	addi	r3,r5,111
    84b0:	18c7883a 	add	r3,r3,r3
    84b4:	29401b84 	addi	r5,r5,110
    84b8:	003f9c06 	br	832c <__alt_data_end+0xff00832c>
    84bc:	00c05504 	movi	r3,340
    84c0:	19400536 	bltu	r3,r5,84d8 <_free_r+0x2d4>
    84c4:	100ad3fa 	srli	r5,r2,15
    84c8:	28c01e04 	addi	r3,r5,120
    84cc:	18c7883a 	add	r3,r3,r3
    84d0:	29401dc4 	addi	r5,r5,119
    84d4:	003f9506 	br	832c <__alt_data_end+0xff00832c>
    84d8:	00c15504 	movi	r3,1364
    84dc:	19400536 	bltu	r3,r5,84f4 <_free_r+0x2f0>
    84e0:	100ad4ba 	srli	r5,r2,18
    84e4:	28c01f44 	addi	r3,r5,125
    84e8:	18c7883a 	add	r3,r3,r3
    84ec:	29401f04 	addi	r5,r5,124
    84f0:	003f8e06 	br	832c <__alt_data_end+0xff00832c>
    84f4:	00c03f84 	movi	r3,254
    84f8:	01401f84 	movi	r5,126
    84fc:	003f8b06 	br	832c <__alt_data_end+0xff00832c>
    8500:	10c00054 	ori	r3,r2,1
    8504:	30c00115 	stw	r3,4(r6)
    8508:	308d883a 	add	r6,r6,r2
    850c:	30800015 	stw	r2,0(r6)
    8510:	003f7806 	br	82f4 <__alt_data_end+0xff0082f4>

00008514 <__sfvwrite_r>:
    8514:	30800217 	ldw	r2,8(r6)
    8518:	10006726 	beq	r2,zero,86b8 <__sfvwrite_r+0x1a4>
    851c:	28c0030b 	ldhu	r3,12(r5)
    8520:	defff404 	addi	sp,sp,-48
    8524:	dd400715 	stw	r21,28(sp)
    8528:	dd000615 	stw	r20,24(sp)
    852c:	dc000215 	stw	r16,8(sp)
    8530:	dfc00b15 	stw	ra,44(sp)
    8534:	df000a15 	stw	fp,40(sp)
    8538:	ddc00915 	stw	r23,36(sp)
    853c:	dd800815 	stw	r22,32(sp)
    8540:	dcc00515 	stw	r19,20(sp)
    8544:	dc800415 	stw	r18,16(sp)
    8548:	dc400315 	stw	r17,12(sp)
    854c:	1880020c 	andi	r2,r3,8
    8550:	2821883a 	mov	r16,r5
    8554:	202b883a 	mov	r21,r4
    8558:	3029883a 	mov	r20,r6
    855c:	10002726 	beq	r2,zero,85fc <__sfvwrite_r+0xe8>
    8560:	28800417 	ldw	r2,16(r5)
    8564:	10002526 	beq	r2,zero,85fc <__sfvwrite_r+0xe8>
    8568:	1880008c 	andi	r2,r3,2
    856c:	a4400017 	ldw	r17,0(r20)
    8570:	10002a26 	beq	r2,zero,861c <__sfvwrite_r+0x108>
    8574:	05a00034 	movhi	r22,32768
    8578:	0027883a 	mov	r19,zero
    857c:	0025883a 	mov	r18,zero
    8580:	b5bf0004 	addi	r22,r22,-1024
    8584:	980d883a 	mov	r6,r19
    8588:	a809883a 	mov	r4,r21
    858c:	90004626 	beq	r18,zero,86a8 <__sfvwrite_r+0x194>
    8590:	900f883a 	mov	r7,r18
    8594:	b480022e 	bgeu	r22,r18,85a0 <__sfvwrite_r+0x8c>
    8598:	01e00034 	movhi	r7,32768
    859c:	39ff0004 	addi	r7,r7,-1024
    85a0:	80800917 	ldw	r2,36(r16)
    85a4:	81400717 	ldw	r5,28(r16)
    85a8:	103ee83a 	callr	r2
    85ac:	0080570e 	bge	zero,r2,870c <__sfvwrite_r+0x1f8>
    85b0:	a0c00217 	ldw	r3,8(r20)
    85b4:	98a7883a 	add	r19,r19,r2
    85b8:	90a5c83a 	sub	r18,r18,r2
    85bc:	1885c83a 	sub	r2,r3,r2
    85c0:	a0800215 	stw	r2,8(r20)
    85c4:	103fef1e 	bne	r2,zero,8584 <__alt_data_end+0xff008584>
    85c8:	0005883a 	mov	r2,zero
    85cc:	dfc00b17 	ldw	ra,44(sp)
    85d0:	df000a17 	ldw	fp,40(sp)
    85d4:	ddc00917 	ldw	r23,36(sp)
    85d8:	dd800817 	ldw	r22,32(sp)
    85dc:	dd400717 	ldw	r21,28(sp)
    85e0:	dd000617 	ldw	r20,24(sp)
    85e4:	dcc00517 	ldw	r19,20(sp)
    85e8:	dc800417 	ldw	r18,16(sp)
    85ec:	dc400317 	ldw	r17,12(sp)
    85f0:	dc000217 	ldw	r16,8(sp)
    85f4:	dec00c04 	addi	sp,sp,48
    85f8:	f800283a 	ret
    85fc:	800b883a 	mov	r5,r16
    8600:	a809883a 	mov	r4,r21
    8604:	00060bc0 	call	60bc <__swsetup_r>
    8608:	1000eb1e 	bne	r2,zero,89b8 <__sfvwrite_r+0x4a4>
    860c:	80c0030b 	ldhu	r3,12(r16)
    8610:	a4400017 	ldw	r17,0(r20)
    8614:	1880008c 	andi	r2,r3,2
    8618:	103fd61e 	bne	r2,zero,8574 <__alt_data_end+0xff008574>
    861c:	1880004c 	andi	r2,r3,1
    8620:	10003f1e 	bne	r2,zero,8720 <__sfvwrite_r+0x20c>
    8624:	0039883a 	mov	fp,zero
    8628:	0025883a 	mov	r18,zero
    862c:	90001a26 	beq	r18,zero,8698 <__sfvwrite_r+0x184>
    8630:	1880800c 	andi	r2,r3,512
    8634:	84c00217 	ldw	r19,8(r16)
    8638:	10002126 	beq	r2,zero,86c0 <__sfvwrite_r+0x1ac>
    863c:	982f883a 	mov	r23,r19
    8640:	94c09336 	bltu	r18,r19,8890 <__sfvwrite_r+0x37c>
    8644:	1881200c 	andi	r2,r3,1152
    8648:	10009e1e 	bne	r2,zero,88c4 <__sfvwrite_r+0x3b0>
    864c:	81000017 	ldw	r4,0(r16)
    8650:	b80d883a 	mov	r6,r23
    8654:	e00b883a 	mov	r5,fp
    8658:	000901c0 	call	901c <memmove>
    865c:	80c00217 	ldw	r3,8(r16)
    8660:	81000017 	ldw	r4,0(r16)
    8664:	9005883a 	mov	r2,r18
    8668:	1ce7c83a 	sub	r19,r3,r19
    866c:	25cf883a 	add	r7,r4,r23
    8670:	84c00215 	stw	r19,8(r16)
    8674:	81c00015 	stw	r7,0(r16)
    8678:	a0c00217 	ldw	r3,8(r20)
    867c:	e0b9883a 	add	fp,fp,r2
    8680:	90a5c83a 	sub	r18,r18,r2
    8684:	18a7c83a 	sub	r19,r3,r2
    8688:	a4c00215 	stw	r19,8(r20)
    868c:	983fce26 	beq	r19,zero,85c8 <__alt_data_end+0xff0085c8>
    8690:	80c0030b 	ldhu	r3,12(r16)
    8694:	903fe61e 	bne	r18,zero,8630 <__alt_data_end+0xff008630>
    8698:	8f000017 	ldw	fp,0(r17)
    869c:	8c800117 	ldw	r18,4(r17)
    86a0:	8c400204 	addi	r17,r17,8
    86a4:	003fe106 	br	862c <__alt_data_end+0xff00862c>
    86a8:	8cc00017 	ldw	r19,0(r17)
    86ac:	8c800117 	ldw	r18,4(r17)
    86b0:	8c400204 	addi	r17,r17,8
    86b4:	003fb306 	br	8584 <__alt_data_end+0xff008584>
    86b8:	0005883a 	mov	r2,zero
    86bc:	f800283a 	ret
    86c0:	81000017 	ldw	r4,0(r16)
    86c4:	80800417 	ldw	r2,16(r16)
    86c8:	11005736 	bltu	r2,r4,8828 <__sfvwrite_r+0x314>
    86cc:	85c00517 	ldw	r23,20(r16)
    86d0:	95c05536 	bltu	r18,r23,8828 <__sfvwrite_r+0x314>
    86d4:	00a00034 	movhi	r2,32768
    86d8:	10bfffc4 	addi	r2,r2,-1
    86dc:	9009883a 	mov	r4,r18
    86e0:	1480012e 	bgeu	r2,r18,86e8 <__sfvwrite_r+0x1d4>
    86e4:	1009883a 	mov	r4,r2
    86e8:	b80b883a 	mov	r5,r23
    86ec:	000d4b80 	call	d4b8 <__divsi3>
    86f0:	15cf383a 	mul	r7,r2,r23
    86f4:	81400717 	ldw	r5,28(r16)
    86f8:	80800917 	ldw	r2,36(r16)
    86fc:	e00d883a 	mov	r6,fp
    8700:	a809883a 	mov	r4,r21
    8704:	103ee83a 	callr	r2
    8708:	00bfdb16 	blt	zero,r2,8678 <__alt_data_end+0xff008678>
    870c:	8080030b 	ldhu	r2,12(r16)
    8710:	10801014 	ori	r2,r2,64
    8714:	8080030d 	sth	r2,12(r16)
    8718:	00bfffc4 	movi	r2,-1
    871c:	003fab06 	br	85cc <__alt_data_end+0xff0085cc>
    8720:	0027883a 	mov	r19,zero
    8724:	0011883a 	mov	r8,zero
    8728:	0039883a 	mov	fp,zero
    872c:	0025883a 	mov	r18,zero
    8730:	90001f26 	beq	r18,zero,87b0 <__sfvwrite_r+0x29c>
    8734:	40005a26 	beq	r8,zero,88a0 <__sfvwrite_r+0x38c>
    8738:	982d883a 	mov	r22,r19
    873c:	94c0012e 	bgeu	r18,r19,8744 <__sfvwrite_r+0x230>
    8740:	902d883a 	mov	r22,r18
    8744:	81000017 	ldw	r4,0(r16)
    8748:	80800417 	ldw	r2,16(r16)
    874c:	b02f883a 	mov	r23,r22
    8750:	81c00517 	ldw	r7,20(r16)
    8754:	1100032e 	bgeu	r2,r4,8764 <__sfvwrite_r+0x250>
    8758:	80c00217 	ldw	r3,8(r16)
    875c:	38c7883a 	add	r3,r7,r3
    8760:	1d801816 	blt	r3,r22,87c4 <__sfvwrite_r+0x2b0>
    8764:	b1c03e16 	blt	r22,r7,8860 <__sfvwrite_r+0x34c>
    8768:	80800917 	ldw	r2,36(r16)
    876c:	81400717 	ldw	r5,28(r16)
    8770:	e00d883a 	mov	r6,fp
    8774:	da000115 	stw	r8,4(sp)
    8778:	a809883a 	mov	r4,r21
    877c:	103ee83a 	callr	r2
    8780:	102f883a 	mov	r23,r2
    8784:	da000117 	ldw	r8,4(sp)
    8788:	00bfe00e 	bge	zero,r2,870c <__alt_data_end+0xff00870c>
    878c:	9de7c83a 	sub	r19,r19,r23
    8790:	98001f26 	beq	r19,zero,8810 <__sfvwrite_r+0x2fc>
    8794:	a0800217 	ldw	r2,8(r20)
    8798:	e5f9883a 	add	fp,fp,r23
    879c:	95e5c83a 	sub	r18,r18,r23
    87a0:	15efc83a 	sub	r23,r2,r23
    87a4:	a5c00215 	stw	r23,8(r20)
    87a8:	b83f8726 	beq	r23,zero,85c8 <__alt_data_end+0xff0085c8>
    87ac:	903fe11e 	bne	r18,zero,8734 <__alt_data_end+0xff008734>
    87b0:	8f000017 	ldw	fp,0(r17)
    87b4:	8c800117 	ldw	r18,4(r17)
    87b8:	0011883a 	mov	r8,zero
    87bc:	8c400204 	addi	r17,r17,8
    87c0:	003fdb06 	br	8730 <__alt_data_end+0xff008730>
    87c4:	180d883a 	mov	r6,r3
    87c8:	e00b883a 	mov	r5,fp
    87cc:	da000115 	stw	r8,4(sp)
    87d0:	d8c00015 	stw	r3,0(sp)
    87d4:	000901c0 	call	901c <memmove>
    87d8:	d8c00017 	ldw	r3,0(sp)
    87dc:	80800017 	ldw	r2,0(r16)
    87e0:	800b883a 	mov	r5,r16
    87e4:	a809883a 	mov	r4,r21
    87e8:	10c5883a 	add	r2,r2,r3
    87ec:	80800015 	stw	r2,0(r16)
    87f0:	d8c00015 	stw	r3,0(sp)
    87f4:	0007cb40 	call	7cb4 <_fflush_r>
    87f8:	d8c00017 	ldw	r3,0(sp)
    87fc:	da000117 	ldw	r8,4(sp)
    8800:	103fc21e 	bne	r2,zero,870c <__alt_data_end+0xff00870c>
    8804:	182f883a 	mov	r23,r3
    8808:	9de7c83a 	sub	r19,r19,r23
    880c:	983fe11e 	bne	r19,zero,8794 <__alt_data_end+0xff008794>
    8810:	800b883a 	mov	r5,r16
    8814:	a809883a 	mov	r4,r21
    8818:	0007cb40 	call	7cb4 <_fflush_r>
    881c:	103fbb1e 	bne	r2,zero,870c <__alt_data_end+0xff00870c>
    8820:	0011883a 	mov	r8,zero
    8824:	003fdb06 	br	8794 <__alt_data_end+0xff008794>
    8828:	94c0012e 	bgeu	r18,r19,8830 <__sfvwrite_r+0x31c>
    882c:	9027883a 	mov	r19,r18
    8830:	980d883a 	mov	r6,r19
    8834:	e00b883a 	mov	r5,fp
    8838:	000901c0 	call	901c <memmove>
    883c:	80800217 	ldw	r2,8(r16)
    8840:	80c00017 	ldw	r3,0(r16)
    8844:	14c5c83a 	sub	r2,r2,r19
    8848:	1cc7883a 	add	r3,r3,r19
    884c:	80800215 	stw	r2,8(r16)
    8850:	80c00015 	stw	r3,0(r16)
    8854:	10004326 	beq	r2,zero,8964 <__sfvwrite_r+0x450>
    8858:	9805883a 	mov	r2,r19
    885c:	003f8606 	br	8678 <__alt_data_end+0xff008678>
    8860:	b00d883a 	mov	r6,r22
    8864:	e00b883a 	mov	r5,fp
    8868:	da000115 	stw	r8,4(sp)
    886c:	000901c0 	call	901c <memmove>
    8870:	80800217 	ldw	r2,8(r16)
    8874:	80c00017 	ldw	r3,0(r16)
    8878:	da000117 	ldw	r8,4(sp)
    887c:	1585c83a 	sub	r2,r2,r22
    8880:	1dad883a 	add	r22,r3,r22
    8884:	80800215 	stw	r2,8(r16)
    8888:	85800015 	stw	r22,0(r16)
    888c:	003fbf06 	br	878c <__alt_data_end+0xff00878c>
    8890:	81000017 	ldw	r4,0(r16)
    8894:	9027883a 	mov	r19,r18
    8898:	902f883a 	mov	r23,r18
    889c:	003f6c06 	br	8650 <__alt_data_end+0xff008650>
    88a0:	900d883a 	mov	r6,r18
    88a4:	01400284 	movi	r5,10
    88a8:	e009883a 	mov	r4,fp
    88ac:	0008df00 	call	8df0 <memchr>
    88b0:	10003e26 	beq	r2,zero,89ac <__sfvwrite_r+0x498>
    88b4:	10800044 	addi	r2,r2,1
    88b8:	1727c83a 	sub	r19,r2,fp
    88bc:	02000044 	movi	r8,1
    88c0:	003f9d06 	br	8738 <__alt_data_end+0xff008738>
    88c4:	80800517 	ldw	r2,20(r16)
    88c8:	81400417 	ldw	r5,16(r16)
    88cc:	81c00017 	ldw	r7,0(r16)
    88d0:	10a7883a 	add	r19,r2,r2
    88d4:	9885883a 	add	r2,r19,r2
    88d8:	1026d7fa 	srli	r19,r2,31
    88dc:	396dc83a 	sub	r22,r7,r5
    88e0:	b1000044 	addi	r4,r22,1
    88e4:	9885883a 	add	r2,r19,r2
    88e8:	1027d07a 	srai	r19,r2,1
    88ec:	2485883a 	add	r2,r4,r18
    88f0:	980d883a 	mov	r6,r19
    88f4:	9880022e 	bgeu	r19,r2,8900 <__sfvwrite_r+0x3ec>
    88f8:	1027883a 	mov	r19,r2
    88fc:	100d883a 	mov	r6,r2
    8900:	18c1000c 	andi	r3,r3,1024
    8904:	18001c26 	beq	r3,zero,8978 <__sfvwrite_r+0x464>
    8908:	300b883a 	mov	r5,r6
    890c:	a809883a 	mov	r4,r21
    8910:	00033b40 	call	33b4 <_malloc_r>
    8914:	102f883a 	mov	r23,r2
    8918:	10002926 	beq	r2,zero,89c0 <__sfvwrite_r+0x4ac>
    891c:	81400417 	ldw	r5,16(r16)
    8920:	b00d883a 	mov	r6,r22
    8924:	1009883a 	mov	r4,r2
    8928:	0008ed40 	call	8ed4 <memcpy>
    892c:	8080030b 	ldhu	r2,12(r16)
    8930:	00fedfc4 	movi	r3,-1153
    8934:	10c4703a 	and	r2,r2,r3
    8938:	10802014 	ori	r2,r2,128
    893c:	8080030d 	sth	r2,12(r16)
    8940:	bd89883a 	add	r4,r23,r22
    8944:	9d8fc83a 	sub	r7,r19,r22
    8948:	85c00415 	stw	r23,16(r16)
    894c:	84c00515 	stw	r19,20(r16)
    8950:	81000015 	stw	r4,0(r16)
    8954:	9027883a 	mov	r19,r18
    8958:	81c00215 	stw	r7,8(r16)
    895c:	902f883a 	mov	r23,r18
    8960:	003f3b06 	br	8650 <__alt_data_end+0xff008650>
    8964:	800b883a 	mov	r5,r16
    8968:	a809883a 	mov	r4,r21
    896c:	0007cb40 	call	7cb4 <_fflush_r>
    8970:	103fb926 	beq	r2,zero,8858 <__alt_data_end+0xff008858>
    8974:	003f6506 	br	870c <__alt_data_end+0xff00870c>
    8978:	a809883a 	mov	r4,r21
    897c:	000a29c0 	call	a29c <_realloc_r>
    8980:	102f883a 	mov	r23,r2
    8984:	103fee1e 	bne	r2,zero,8940 <__alt_data_end+0xff008940>
    8988:	81400417 	ldw	r5,16(r16)
    898c:	a809883a 	mov	r4,r21
    8990:	00082040 	call	8204 <_free_r>
    8994:	8080030b 	ldhu	r2,12(r16)
    8998:	00ffdfc4 	movi	r3,-129
    899c:	1884703a 	and	r2,r3,r2
    89a0:	00c00304 	movi	r3,12
    89a4:	a8c00015 	stw	r3,0(r21)
    89a8:	003f5906 	br	8710 <__alt_data_end+0xff008710>
    89ac:	94c00044 	addi	r19,r18,1
    89b0:	02000044 	movi	r8,1
    89b4:	003f6006 	br	8738 <__alt_data_end+0xff008738>
    89b8:	00bfffc4 	movi	r2,-1
    89bc:	003f0306 	br	85cc <__alt_data_end+0xff0085cc>
    89c0:	00800304 	movi	r2,12
    89c4:	a8800015 	stw	r2,0(r21)
    89c8:	8080030b 	ldhu	r2,12(r16)
    89cc:	003f5006 	br	8710 <__alt_data_end+0xff008710>

000089d0 <_fwalk>:
    89d0:	defff704 	addi	sp,sp,-36
    89d4:	dd000415 	stw	r20,16(sp)
    89d8:	dfc00815 	stw	ra,32(sp)
    89dc:	ddc00715 	stw	r23,28(sp)
    89e0:	dd800615 	stw	r22,24(sp)
    89e4:	dd400515 	stw	r21,20(sp)
    89e8:	dcc00315 	stw	r19,12(sp)
    89ec:	dc800215 	stw	r18,8(sp)
    89f0:	dc400115 	stw	r17,4(sp)
    89f4:	dc000015 	stw	r16,0(sp)
    89f8:	2500b804 	addi	r20,r4,736
    89fc:	a0002326 	beq	r20,zero,8a8c <_fwalk+0xbc>
    8a00:	282b883a 	mov	r21,r5
    8a04:	002f883a 	mov	r23,zero
    8a08:	05800044 	movi	r22,1
    8a0c:	04ffffc4 	movi	r19,-1
    8a10:	a4400117 	ldw	r17,4(r20)
    8a14:	a4800217 	ldw	r18,8(r20)
    8a18:	8c7fffc4 	addi	r17,r17,-1
    8a1c:	88000d16 	blt	r17,zero,8a54 <_fwalk+0x84>
    8a20:	94000304 	addi	r16,r18,12
    8a24:	94800384 	addi	r18,r18,14
    8a28:	8080000b 	ldhu	r2,0(r16)
    8a2c:	8c7fffc4 	addi	r17,r17,-1
    8a30:	813ffd04 	addi	r4,r16,-12
    8a34:	b080042e 	bgeu	r22,r2,8a48 <_fwalk+0x78>
    8a38:	9080000f 	ldh	r2,0(r18)
    8a3c:	14c00226 	beq	r2,r19,8a48 <_fwalk+0x78>
    8a40:	a83ee83a 	callr	r21
    8a44:	b8aeb03a 	or	r23,r23,r2
    8a48:	84001a04 	addi	r16,r16,104
    8a4c:	94801a04 	addi	r18,r18,104
    8a50:	8cfff51e 	bne	r17,r19,8a28 <__alt_data_end+0xff008a28>
    8a54:	a5000017 	ldw	r20,0(r20)
    8a58:	a03fed1e 	bne	r20,zero,8a10 <__alt_data_end+0xff008a10>
    8a5c:	b805883a 	mov	r2,r23
    8a60:	dfc00817 	ldw	ra,32(sp)
    8a64:	ddc00717 	ldw	r23,28(sp)
    8a68:	dd800617 	ldw	r22,24(sp)
    8a6c:	dd400517 	ldw	r21,20(sp)
    8a70:	dd000417 	ldw	r20,16(sp)
    8a74:	dcc00317 	ldw	r19,12(sp)
    8a78:	dc800217 	ldw	r18,8(sp)
    8a7c:	dc400117 	ldw	r17,4(sp)
    8a80:	dc000017 	ldw	r16,0(sp)
    8a84:	dec00904 	addi	sp,sp,36
    8a88:	f800283a 	ret
    8a8c:	002f883a 	mov	r23,zero
    8a90:	003ff206 	br	8a5c <__alt_data_end+0xff008a5c>

00008a94 <_fwalk_reent>:
    8a94:	defff704 	addi	sp,sp,-36
    8a98:	dd000415 	stw	r20,16(sp)
    8a9c:	dfc00815 	stw	ra,32(sp)
    8aa0:	ddc00715 	stw	r23,28(sp)
    8aa4:	dd800615 	stw	r22,24(sp)
    8aa8:	dd400515 	stw	r21,20(sp)
    8aac:	dcc00315 	stw	r19,12(sp)
    8ab0:	dc800215 	stw	r18,8(sp)
    8ab4:	dc400115 	stw	r17,4(sp)
    8ab8:	dc000015 	stw	r16,0(sp)
    8abc:	2500b804 	addi	r20,r4,736
    8ac0:	a0002326 	beq	r20,zero,8b50 <_fwalk_reent+0xbc>
    8ac4:	282b883a 	mov	r21,r5
    8ac8:	2027883a 	mov	r19,r4
    8acc:	002f883a 	mov	r23,zero
    8ad0:	05800044 	movi	r22,1
    8ad4:	04bfffc4 	movi	r18,-1
    8ad8:	a4400117 	ldw	r17,4(r20)
    8adc:	a4000217 	ldw	r16,8(r20)
    8ae0:	8c7fffc4 	addi	r17,r17,-1
    8ae4:	88000c16 	blt	r17,zero,8b18 <_fwalk_reent+0x84>
    8ae8:	84000304 	addi	r16,r16,12
    8aec:	8080000b 	ldhu	r2,0(r16)
    8af0:	8c7fffc4 	addi	r17,r17,-1
    8af4:	817ffd04 	addi	r5,r16,-12
    8af8:	b080052e 	bgeu	r22,r2,8b10 <_fwalk_reent+0x7c>
    8afc:	8080008f 	ldh	r2,2(r16)
    8b00:	9809883a 	mov	r4,r19
    8b04:	14800226 	beq	r2,r18,8b10 <_fwalk_reent+0x7c>
    8b08:	a83ee83a 	callr	r21
    8b0c:	b8aeb03a 	or	r23,r23,r2
    8b10:	84001a04 	addi	r16,r16,104
    8b14:	8cbff51e 	bne	r17,r18,8aec <__alt_data_end+0xff008aec>
    8b18:	a5000017 	ldw	r20,0(r20)
    8b1c:	a03fee1e 	bne	r20,zero,8ad8 <__alt_data_end+0xff008ad8>
    8b20:	b805883a 	mov	r2,r23
    8b24:	dfc00817 	ldw	ra,32(sp)
    8b28:	ddc00717 	ldw	r23,28(sp)
    8b2c:	dd800617 	ldw	r22,24(sp)
    8b30:	dd400517 	ldw	r21,20(sp)
    8b34:	dd000417 	ldw	r20,16(sp)
    8b38:	dcc00317 	ldw	r19,12(sp)
    8b3c:	dc800217 	ldw	r18,8(sp)
    8b40:	dc400117 	ldw	r17,4(sp)
    8b44:	dc000017 	ldw	r16,0(sp)
    8b48:	dec00904 	addi	sp,sp,36
    8b4c:	f800283a 	ret
    8b50:	002f883a 	mov	r23,zero
    8b54:	003ff206 	br	8b20 <__alt_data_end+0xff008b20>

00008b58 <_setlocale_r>:
    8b58:	30001b26 	beq	r6,zero,8bc8 <_setlocale_r+0x70>
    8b5c:	01400074 	movhi	r5,1
    8b60:	defffe04 	addi	sp,sp,-8
    8b64:	29491604 	addi	r5,r5,9304
    8b68:	3009883a 	mov	r4,r6
    8b6c:	dc000015 	stw	r16,0(sp)
    8b70:	dfc00115 	stw	ra,4(sp)
    8b74:	3021883a 	mov	r16,r6
    8b78:	000a9b00 	call	a9b0 <strcmp>
    8b7c:	1000061e 	bne	r2,zero,8b98 <_setlocale_r+0x40>
    8b80:	00800074 	movhi	r2,1
    8b84:	10891504 	addi	r2,r2,9300
    8b88:	dfc00117 	ldw	ra,4(sp)
    8b8c:	dc000017 	ldw	r16,0(sp)
    8b90:	dec00204 	addi	sp,sp,8
    8b94:	f800283a 	ret
    8b98:	01400074 	movhi	r5,1
    8b9c:	29491504 	addi	r5,r5,9300
    8ba0:	8009883a 	mov	r4,r16
    8ba4:	000a9b00 	call	a9b0 <strcmp>
    8ba8:	103ff526 	beq	r2,zero,8b80 <__alt_data_end+0xff008b80>
    8bac:	01400074 	movhi	r5,1
    8bb0:	29490004 	addi	r5,r5,9216
    8bb4:	8009883a 	mov	r4,r16
    8bb8:	000a9b00 	call	a9b0 <strcmp>
    8bbc:	103ff026 	beq	r2,zero,8b80 <__alt_data_end+0xff008b80>
    8bc0:	0005883a 	mov	r2,zero
    8bc4:	003ff006 	br	8b88 <__alt_data_end+0xff008b88>
    8bc8:	00800074 	movhi	r2,1
    8bcc:	10891504 	addi	r2,r2,9300
    8bd0:	f800283a 	ret

00008bd4 <__locale_charset>:
    8bd4:	00800074 	movhi	r2,1
    8bd8:	108b8804 	addi	r2,r2,11808
    8bdc:	f800283a 	ret

00008be0 <__locale_mb_cur_max>:
    8be0:	00800074 	movhi	r2,1
    8be4:	10902604 	addi	r2,r2,16536
    8be8:	10800017 	ldw	r2,0(r2)
    8bec:	f800283a 	ret

00008bf0 <__locale_msgcharset>:
    8bf0:	00800074 	movhi	r2,1
    8bf4:	108b8004 	addi	r2,r2,11776
    8bf8:	f800283a 	ret

00008bfc <__locale_cjk_lang>:
    8bfc:	0005883a 	mov	r2,zero
    8c00:	f800283a 	ret

00008c04 <_localeconv_r>:
    8c04:	00800074 	movhi	r2,1
    8c08:	108b9004 	addi	r2,r2,11840
    8c0c:	f800283a 	ret

00008c10 <setlocale>:
    8c10:	00800074 	movhi	r2,1
    8c14:	10902504 	addi	r2,r2,16532
    8c18:	280d883a 	mov	r6,r5
    8c1c:	200b883a 	mov	r5,r4
    8c20:	11000017 	ldw	r4,0(r2)
    8c24:	0008b581 	jmpi	8b58 <_setlocale_r>

00008c28 <localeconv>:
    8c28:	00800074 	movhi	r2,1
    8c2c:	108b9004 	addi	r2,r2,11840
    8c30:	f800283a 	ret

00008c34 <__smakebuf_r>:
    8c34:	2880030b 	ldhu	r2,12(r5)
    8c38:	10c0008c 	andi	r3,r2,2
    8c3c:	1800411e 	bne	r3,zero,8d44 <__smakebuf_r+0x110>
    8c40:	deffec04 	addi	sp,sp,-80
    8c44:	dc000f15 	stw	r16,60(sp)
    8c48:	2821883a 	mov	r16,r5
    8c4c:	2940038f 	ldh	r5,14(r5)
    8c50:	dc401015 	stw	r17,64(sp)
    8c54:	dfc01315 	stw	ra,76(sp)
    8c58:	dcc01215 	stw	r19,72(sp)
    8c5c:	dc801115 	stw	r18,68(sp)
    8c60:	2023883a 	mov	r17,r4
    8c64:	28001c16 	blt	r5,zero,8cd8 <__smakebuf_r+0xa4>
    8c68:	d80d883a 	mov	r6,sp
    8c6c:	000c5580 	call	c558 <_fstat_r>
    8c70:	10001816 	blt	r2,zero,8cd4 <__smakebuf_r+0xa0>
    8c74:	d8800117 	ldw	r2,4(sp)
    8c78:	00e00014 	movui	r3,32768
    8c7c:	10bc000c 	andi	r2,r2,61440
    8c80:	14c80020 	cmpeqi	r19,r2,8192
    8c84:	10c03726 	beq	r2,r3,8d64 <__smakebuf_r+0x130>
    8c88:	80c0030b 	ldhu	r3,12(r16)
    8c8c:	18c20014 	ori	r3,r3,2048
    8c90:	80c0030d 	sth	r3,12(r16)
    8c94:	00c80004 	movi	r3,8192
    8c98:	10c0521e 	bne	r2,r3,8de4 <__smakebuf_r+0x1b0>
    8c9c:	8140038f 	ldh	r5,14(r16)
    8ca0:	8809883a 	mov	r4,r17
    8ca4:	000c5b40 	call	c5b4 <_isatty_r>
    8ca8:	10004c26 	beq	r2,zero,8ddc <__smakebuf_r+0x1a8>
    8cac:	8080030b 	ldhu	r2,12(r16)
    8cb0:	80c010c4 	addi	r3,r16,67
    8cb4:	80c00015 	stw	r3,0(r16)
    8cb8:	10800054 	ori	r2,r2,1
    8cbc:	8080030d 	sth	r2,12(r16)
    8cc0:	00800044 	movi	r2,1
    8cc4:	80c00415 	stw	r3,16(r16)
    8cc8:	80800515 	stw	r2,20(r16)
    8ccc:	04810004 	movi	r18,1024
    8cd0:	00000706 	br	8cf0 <__smakebuf_r+0xbc>
    8cd4:	8080030b 	ldhu	r2,12(r16)
    8cd8:	10c0200c 	andi	r3,r2,128
    8cdc:	18001f1e 	bne	r3,zero,8d5c <__smakebuf_r+0x128>
    8ce0:	04810004 	movi	r18,1024
    8ce4:	10820014 	ori	r2,r2,2048
    8ce8:	8080030d 	sth	r2,12(r16)
    8cec:	0027883a 	mov	r19,zero
    8cf0:	900b883a 	mov	r5,r18
    8cf4:	8809883a 	mov	r4,r17
    8cf8:	00033b40 	call	33b4 <_malloc_r>
    8cfc:	10002c26 	beq	r2,zero,8db0 <__smakebuf_r+0x17c>
    8d00:	80c0030b 	ldhu	r3,12(r16)
    8d04:	01000034 	movhi	r4,0
    8d08:	211f5204 	addi	r4,r4,32072
    8d0c:	89000f15 	stw	r4,60(r17)
    8d10:	18c02014 	ori	r3,r3,128
    8d14:	80c0030d 	sth	r3,12(r16)
    8d18:	80800015 	stw	r2,0(r16)
    8d1c:	80800415 	stw	r2,16(r16)
    8d20:	84800515 	stw	r18,20(r16)
    8d24:	98001a1e 	bne	r19,zero,8d90 <__smakebuf_r+0x15c>
    8d28:	dfc01317 	ldw	ra,76(sp)
    8d2c:	dcc01217 	ldw	r19,72(sp)
    8d30:	dc801117 	ldw	r18,68(sp)
    8d34:	dc401017 	ldw	r17,64(sp)
    8d38:	dc000f17 	ldw	r16,60(sp)
    8d3c:	dec01404 	addi	sp,sp,80
    8d40:	f800283a 	ret
    8d44:	288010c4 	addi	r2,r5,67
    8d48:	28800015 	stw	r2,0(r5)
    8d4c:	28800415 	stw	r2,16(r5)
    8d50:	00800044 	movi	r2,1
    8d54:	28800515 	stw	r2,20(r5)
    8d58:	f800283a 	ret
    8d5c:	04801004 	movi	r18,64
    8d60:	003fe006 	br	8ce4 <__alt_data_end+0xff008ce4>
    8d64:	81000a17 	ldw	r4,40(r16)
    8d68:	00c00074 	movhi	r3,1
    8d6c:	18ea5304 	addi	r3,r3,-22196
    8d70:	20ffc51e 	bne	r4,r3,8c88 <__alt_data_end+0xff008c88>
    8d74:	8080030b 	ldhu	r2,12(r16)
    8d78:	04810004 	movi	r18,1024
    8d7c:	84801315 	stw	r18,76(r16)
    8d80:	1484b03a 	or	r2,r2,r18
    8d84:	8080030d 	sth	r2,12(r16)
    8d88:	0027883a 	mov	r19,zero
    8d8c:	003fd806 	br	8cf0 <__alt_data_end+0xff008cf0>
    8d90:	8140038f 	ldh	r5,14(r16)
    8d94:	8809883a 	mov	r4,r17
    8d98:	000c5b40 	call	c5b4 <_isatty_r>
    8d9c:	103fe226 	beq	r2,zero,8d28 <__alt_data_end+0xff008d28>
    8da0:	8080030b 	ldhu	r2,12(r16)
    8da4:	10800054 	ori	r2,r2,1
    8da8:	8080030d 	sth	r2,12(r16)
    8dac:	003fde06 	br	8d28 <__alt_data_end+0xff008d28>
    8db0:	8080030b 	ldhu	r2,12(r16)
    8db4:	10c0800c 	andi	r3,r2,512
    8db8:	183fdb1e 	bne	r3,zero,8d28 <__alt_data_end+0xff008d28>
    8dbc:	10800094 	ori	r2,r2,2
    8dc0:	80c010c4 	addi	r3,r16,67
    8dc4:	8080030d 	sth	r2,12(r16)
    8dc8:	00800044 	movi	r2,1
    8dcc:	80c00015 	stw	r3,0(r16)
    8dd0:	80c00415 	stw	r3,16(r16)
    8dd4:	80800515 	stw	r2,20(r16)
    8dd8:	003fd306 	br	8d28 <__alt_data_end+0xff008d28>
    8ddc:	04810004 	movi	r18,1024
    8de0:	003fc306 	br	8cf0 <__alt_data_end+0xff008cf0>
    8de4:	0027883a 	mov	r19,zero
    8de8:	04810004 	movi	r18,1024
    8dec:	003fc006 	br	8cf0 <__alt_data_end+0xff008cf0>

00008df0 <memchr>:
    8df0:	208000cc 	andi	r2,r4,3
    8df4:	280f883a 	mov	r7,r5
    8df8:	10003426 	beq	r2,zero,8ecc <memchr+0xdc>
    8dfc:	30bfffc4 	addi	r2,r6,-1
    8e00:	30001a26 	beq	r6,zero,8e6c <memchr+0x7c>
    8e04:	20c00003 	ldbu	r3,0(r4)
    8e08:	29803fcc 	andi	r6,r5,255
    8e0c:	30c0051e 	bne	r6,r3,8e24 <memchr+0x34>
    8e10:	00001806 	br	8e74 <memchr+0x84>
    8e14:	10001526 	beq	r2,zero,8e6c <memchr+0x7c>
    8e18:	20c00003 	ldbu	r3,0(r4)
    8e1c:	10bfffc4 	addi	r2,r2,-1
    8e20:	30c01426 	beq	r6,r3,8e74 <memchr+0x84>
    8e24:	21000044 	addi	r4,r4,1
    8e28:	20c000cc 	andi	r3,r4,3
    8e2c:	183ff91e 	bne	r3,zero,8e14 <__alt_data_end+0xff008e14>
    8e30:	020000c4 	movi	r8,3
    8e34:	40801136 	bltu	r8,r2,8e7c <memchr+0x8c>
    8e38:	10000c26 	beq	r2,zero,8e6c <memchr+0x7c>
    8e3c:	20c00003 	ldbu	r3,0(r4)
    8e40:	29403fcc 	andi	r5,r5,255
    8e44:	28c00b26 	beq	r5,r3,8e74 <memchr+0x84>
    8e48:	20c00044 	addi	r3,r4,1
    8e4c:	39803fcc 	andi	r6,r7,255
    8e50:	2089883a 	add	r4,r4,r2
    8e54:	00000306 	br	8e64 <memchr+0x74>
    8e58:	18c00044 	addi	r3,r3,1
    8e5c:	197fffc3 	ldbu	r5,-1(r3)
    8e60:	31400526 	beq	r6,r5,8e78 <memchr+0x88>
    8e64:	1805883a 	mov	r2,r3
    8e68:	20fffb1e 	bne	r4,r3,8e58 <__alt_data_end+0xff008e58>
    8e6c:	0005883a 	mov	r2,zero
    8e70:	f800283a 	ret
    8e74:	2005883a 	mov	r2,r4
    8e78:	f800283a 	ret
    8e7c:	28c03fcc 	andi	r3,r5,255
    8e80:	1812923a 	slli	r9,r3,8
    8e84:	02ffbff4 	movhi	r11,65279
    8e88:	02a02074 	movhi	r10,32897
    8e8c:	48d2b03a 	or	r9,r9,r3
    8e90:	4806943a 	slli	r3,r9,16
    8e94:	5affbfc4 	addi	r11,r11,-257
    8e98:	52a02004 	addi	r10,r10,-32640
    8e9c:	48d2b03a 	or	r9,r9,r3
    8ea0:	20c00017 	ldw	r3,0(r4)
    8ea4:	48c6f03a 	xor	r3,r9,r3
    8ea8:	1acd883a 	add	r6,r3,r11
    8eac:	00c6303a 	nor	r3,zero,r3
    8eb0:	30c6703a 	and	r3,r6,r3
    8eb4:	1a86703a 	and	r3,r3,r10
    8eb8:	183fe01e 	bne	r3,zero,8e3c <__alt_data_end+0xff008e3c>
    8ebc:	10bfff04 	addi	r2,r2,-4
    8ec0:	21000104 	addi	r4,r4,4
    8ec4:	40bff636 	bltu	r8,r2,8ea0 <__alt_data_end+0xff008ea0>
    8ec8:	003fdb06 	br	8e38 <__alt_data_end+0xff008e38>
    8ecc:	3005883a 	mov	r2,r6
    8ed0:	003fd706 	br	8e30 <__alt_data_end+0xff008e30>

00008ed4 <memcpy>:
    8ed4:	defffd04 	addi	sp,sp,-12
    8ed8:	dfc00215 	stw	ra,8(sp)
    8edc:	dc400115 	stw	r17,4(sp)
    8ee0:	dc000015 	stw	r16,0(sp)
    8ee4:	00c003c4 	movi	r3,15
    8ee8:	2005883a 	mov	r2,r4
    8eec:	1980452e 	bgeu	r3,r6,9004 <memcpy+0x130>
    8ef0:	2906b03a 	or	r3,r5,r4
    8ef4:	18c000cc 	andi	r3,r3,3
    8ef8:	1800441e 	bne	r3,zero,900c <memcpy+0x138>
    8efc:	347ffc04 	addi	r17,r6,-16
    8f00:	8822d13a 	srli	r17,r17,4
    8f04:	28c00104 	addi	r3,r5,4
    8f08:	23400104 	addi	r13,r4,4
    8f0c:	8820913a 	slli	r16,r17,4
    8f10:	2b000204 	addi	r12,r5,8
    8f14:	22c00204 	addi	r11,r4,8
    8f18:	84000504 	addi	r16,r16,20
    8f1c:	2a800304 	addi	r10,r5,12
    8f20:	22400304 	addi	r9,r4,12
    8f24:	2c21883a 	add	r16,r5,r16
    8f28:	2811883a 	mov	r8,r5
    8f2c:	200f883a 	mov	r7,r4
    8f30:	41000017 	ldw	r4,0(r8)
    8f34:	1fc00017 	ldw	ra,0(r3)
    8f38:	63c00017 	ldw	r15,0(r12)
    8f3c:	39000015 	stw	r4,0(r7)
    8f40:	53800017 	ldw	r14,0(r10)
    8f44:	6fc00015 	stw	ra,0(r13)
    8f48:	5bc00015 	stw	r15,0(r11)
    8f4c:	4b800015 	stw	r14,0(r9)
    8f50:	18c00404 	addi	r3,r3,16
    8f54:	39c00404 	addi	r7,r7,16
    8f58:	42000404 	addi	r8,r8,16
    8f5c:	6b400404 	addi	r13,r13,16
    8f60:	63000404 	addi	r12,r12,16
    8f64:	5ac00404 	addi	r11,r11,16
    8f68:	52800404 	addi	r10,r10,16
    8f6c:	4a400404 	addi	r9,r9,16
    8f70:	1c3fef1e 	bne	r3,r16,8f30 <__alt_data_end+0xff008f30>
    8f74:	89c00044 	addi	r7,r17,1
    8f78:	380e913a 	slli	r7,r7,4
    8f7c:	310003cc 	andi	r4,r6,15
    8f80:	02c000c4 	movi	r11,3
    8f84:	11c7883a 	add	r3,r2,r7
    8f88:	29cb883a 	add	r5,r5,r7
    8f8c:	5900212e 	bgeu	r11,r4,9014 <memcpy+0x140>
    8f90:	1813883a 	mov	r9,r3
    8f94:	2811883a 	mov	r8,r5
    8f98:	200f883a 	mov	r7,r4
    8f9c:	42800017 	ldw	r10,0(r8)
    8fa0:	4a400104 	addi	r9,r9,4
    8fa4:	39ffff04 	addi	r7,r7,-4
    8fa8:	4abfff15 	stw	r10,-4(r9)
    8fac:	42000104 	addi	r8,r8,4
    8fb0:	59fffa36 	bltu	r11,r7,8f9c <__alt_data_end+0xff008f9c>
    8fb4:	213fff04 	addi	r4,r4,-4
    8fb8:	2008d0ba 	srli	r4,r4,2
    8fbc:	318000cc 	andi	r6,r6,3
    8fc0:	21000044 	addi	r4,r4,1
    8fc4:	2109883a 	add	r4,r4,r4
    8fc8:	2109883a 	add	r4,r4,r4
    8fcc:	1907883a 	add	r3,r3,r4
    8fd0:	290b883a 	add	r5,r5,r4
    8fd4:	30000626 	beq	r6,zero,8ff0 <memcpy+0x11c>
    8fd8:	198d883a 	add	r6,r3,r6
    8fdc:	29c00003 	ldbu	r7,0(r5)
    8fe0:	18c00044 	addi	r3,r3,1
    8fe4:	29400044 	addi	r5,r5,1
    8fe8:	19ffffc5 	stb	r7,-1(r3)
    8fec:	19bffb1e 	bne	r3,r6,8fdc <__alt_data_end+0xff008fdc>
    8ff0:	dfc00217 	ldw	ra,8(sp)
    8ff4:	dc400117 	ldw	r17,4(sp)
    8ff8:	dc000017 	ldw	r16,0(sp)
    8ffc:	dec00304 	addi	sp,sp,12
    9000:	f800283a 	ret
    9004:	2007883a 	mov	r3,r4
    9008:	003ff206 	br	8fd4 <__alt_data_end+0xff008fd4>
    900c:	2007883a 	mov	r3,r4
    9010:	003ff106 	br	8fd8 <__alt_data_end+0xff008fd8>
    9014:	200d883a 	mov	r6,r4
    9018:	003fee06 	br	8fd4 <__alt_data_end+0xff008fd4>

0000901c <memmove>:
    901c:	2005883a 	mov	r2,r4
    9020:	29000b2e 	bgeu	r5,r4,9050 <memmove+0x34>
    9024:	298f883a 	add	r7,r5,r6
    9028:	21c0092e 	bgeu	r4,r7,9050 <memmove+0x34>
    902c:	2187883a 	add	r3,r4,r6
    9030:	198bc83a 	sub	r5,r3,r6
    9034:	30004826 	beq	r6,zero,9158 <memmove+0x13c>
    9038:	39ffffc4 	addi	r7,r7,-1
    903c:	39000003 	ldbu	r4,0(r7)
    9040:	18ffffc4 	addi	r3,r3,-1
    9044:	19000005 	stb	r4,0(r3)
    9048:	28fffb1e 	bne	r5,r3,9038 <__alt_data_end+0xff009038>
    904c:	f800283a 	ret
    9050:	00c003c4 	movi	r3,15
    9054:	1980412e 	bgeu	r3,r6,915c <memmove+0x140>
    9058:	2886b03a 	or	r3,r5,r2
    905c:	18c000cc 	andi	r3,r3,3
    9060:	1800401e 	bne	r3,zero,9164 <memmove+0x148>
    9064:	33fffc04 	addi	r15,r6,-16
    9068:	781ed13a 	srli	r15,r15,4
    906c:	28c00104 	addi	r3,r5,4
    9070:	13400104 	addi	r13,r2,4
    9074:	781c913a 	slli	r14,r15,4
    9078:	2b000204 	addi	r12,r5,8
    907c:	12c00204 	addi	r11,r2,8
    9080:	73800504 	addi	r14,r14,20
    9084:	2a800304 	addi	r10,r5,12
    9088:	12400304 	addi	r9,r2,12
    908c:	2b9d883a 	add	r14,r5,r14
    9090:	2811883a 	mov	r8,r5
    9094:	100f883a 	mov	r7,r2
    9098:	41000017 	ldw	r4,0(r8)
    909c:	39c00404 	addi	r7,r7,16
    90a0:	18c00404 	addi	r3,r3,16
    90a4:	393ffc15 	stw	r4,-16(r7)
    90a8:	193ffc17 	ldw	r4,-16(r3)
    90ac:	6b400404 	addi	r13,r13,16
    90b0:	5ac00404 	addi	r11,r11,16
    90b4:	693ffc15 	stw	r4,-16(r13)
    90b8:	61000017 	ldw	r4,0(r12)
    90bc:	4a400404 	addi	r9,r9,16
    90c0:	42000404 	addi	r8,r8,16
    90c4:	593ffc15 	stw	r4,-16(r11)
    90c8:	51000017 	ldw	r4,0(r10)
    90cc:	63000404 	addi	r12,r12,16
    90d0:	52800404 	addi	r10,r10,16
    90d4:	493ffc15 	stw	r4,-16(r9)
    90d8:	1bbfef1e 	bne	r3,r14,9098 <__alt_data_end+0xff009098>
    90dc:	79000044 	addi	r4,r15,1
    90e0:	2008913a 	slli	r4,r4,4
    90e4:	328003cc 	andi	r10,r6,15
    90e8:	02c000c4 	movi	r11,3
    90ec:	1107883a 	add	r3,r2,r4
    90f0:	290b883a 	add	r5,r5,r4
    90f4:	5a801e2e 	bgeu	r11,r10,9170 <memmove+0x154>
    90f8:	1813883a 	mov	r9,r3
    90fc:	2811883a 	mov	r8,r5
    9100:	500f883a 	mov	r7,r10
    9104:	41000017 	ldw	r4,0(r8)
    9108:	4a400104 	addi	r9,r9,4
    910c:	39ffff04 	addi	r7,r7,-4
    9110:	493fff15 	stw	r4,-4(r9)
    9114:	42000104 	addi	r8,r8,4
    9118:	59fffa36 	bltu	r11,r7,9104 <__alt_data_end+0xff009104>
    911c:	513fff04 	addi	r4,r10,-4
    9120:	2008d0ba 	srli	r4,r4,2
    9124:	318000cc 	andi	r6,r6,3
    9128:	21000044 	addi	r4,r4,1
    912c:	2109883a 	add	r4,r4,r4
    9130:	2109883a 	add	r4,r4,r4
    9134:	1907883a 	add	r3,r3,r4
    9138:	290b883a 	add	r5,r5,r4
    913c:	30000b26 	beq	r6,zero,916c <memmove+0x150>
    9140:	198d883a 	add	r6,r3,r6
    9144:	29c00003 	ldbu	r7,0(r5)
    9148:	18c00044 	addi	r3,r3,1
    914c:	29400044 	addi	r5,r5,1
    9150:	19ffffc5 	stb	r7,-1(r3)
    9154:	19bffb1e 	bne	r3,r6,9144 <__alt_data_end+0xff009144>
    9158:	f800283a 	ret
    915c:	1007883a 	mov	r3,r2
    9160:	003ff606 	br	913c <__alt_data_end+0xff00913c>
    9164:	1007883a 	mov	r3,r2
    9168:	003ff506 	br	9140 <__alt_data_end+0xff009140>
    916c:	f800283a 	ret
    9170:	500d883a 	mov	r6,r10
    9174:	003ff106 	br	913c <__alt_data_end+0xff00913c>

00009178 <memset>:
    9178:	20c000cc 	andi	r3,r4,3
    917c:	2005883a 	mov	r2,r4
    9180:	18004426 	beq	r3,zero,9294 <memset+0x11c>
    9184:	31ffffc4 	addi	r7,r6,-1
    9188:	30004026 	beq	r6,zero,928c <memset+0x114>
    918c:	2813883a 	mov	r9,r5
    9190:	200d883a 	mov	r6,r4
    9194:	2007883a 	mov	r3,r4
    9198:	00000406 	br	91ac <memset+0x34>
    919c:	3a3fffc4 	addi	r8,r7,-1
    91a0:	31800044 	addi	r6,r6,1
    91a4:	38003926 	beq	r7,zero,928c <memset+0x114>
    91a8:	400f883a 	mov	r7,r8
    91ac:	18c00044 	addi	r3,r3,1
    91b0:	32400005 	stb	r9,0(r6)
    91b4:	1a0000cc 	andi	r8,r3,3
    91b8:	403ff81e 	bne	r8,zero,919c <__alt_data_end+0xff00919c>
    91bc:	010000c4 	movi	r4,3
    91c0:	21c02d2e 	bgeu	r4,r7,9278 <memset+0x100>
    91c4:	29003fcc 	andi	r4,r5,255
    91c8:	200c923a 	slli	r6,r4,8
    91cc:	3108b03a 	or	r4,r6,r4
    91d0:	200c943a 	slli	r6,r4,16
    91d4:	218cb03a 	or	r6,r4,r6
    91d8:	010003c4 	movi	r4,15
    91dc:	21c0182e 	bgeu	r4,r7,9240 <memset+0xc8>
    91e0:	3b3ffc04 	addi	r12,r7,-16
    91e4:	6018d13a 	srli	r12,r12,4
    91e8:	1a000104 	addi	r8,r3,4
    91ec:	1ac00204 	addi	r11,r3,8
    91f0:	6008913a 	slli	r4,r12,4
    91f4:	1a800304 	addi	r10,r3,12
    91f8:	1813883a 	mov	r9,r3
    91fc:	21000504 	addi	r4,r4,20
    9200:	1909883a 	add	r4,r3,r4
    9204:	49800015 	stw	r6,0(r9)
    9208:	41800015 	stw	r6,0(r8)
    920c:	59800015 	stw	r6,0(r11)
    9210:	51800015 	stw	r6,0(r10)
    9214:	42000404 	addi	r8,r8,16
    9218:	4a400404 	addi	r9,r9,16
    921c:	5ac00404 	addi	r11,r11,16
    9220:	52800404 	addi	r10,r10,16
    9224:	413ff71e 	bne	r8,r4,9204 <__alt_data_end+0xff009204>
    9228:	63000044 	addi	r12,r12,1
    922c:	6018913a 	slli	r12,r12,4
    9230:	39c003cc 	andi	r7,r7,15
    9234:	010000c4 	movi	r4,3
    9238:	1b07883a 	add	r3,r3,r12
    923c:	21c00e2e 	bgeu	r4,r7,9278 <memset+0x100>
    9240:	1813883a 	mov	r9,r3
    9244:	3811883a 	mov	r8,r7
    9248:	010000c4 	movi	r4,3
    924c:	49800015 	stw	r6,0(r9)
    9250:	423fff04 	addi	r8,r8,-4
    9254:	4a400104 	addi	r9,r9,4
    9258:	223ffc36 	bltu	r4,r8,924c <__alt_data_end+0xff00924c>
    925c:	393fff04 	addi	r4,r7,-4
    9260:	2008d0ba 	srli	r4,r4,2
    9264:	39c000cc 	andi	r7,r7,3
    9268:	21000044 	addi	r4,r4,1
    926c:	2109883a 	add	r4,r4,r4
    9270:	2109883a 	add	r4,r4,r4
    9274:	1907883a 	add	r3,r3,r4
    9278:	38000526 	beq	r7,zero,9290 <memset+0x118>
    927c:	19cf883a 	add	r7,r3,r7
    9280:	19400005 	stb	r5,0(r3)
    9284:	18c00044 	addi	r3,r3,1
    9288:	38fffd1e 	bne	r7,r3,9280 <__alt_data_end+0xff009280>
    928c:	f800283a 	ret
    9290:	f800283a 	ret
    9294:	2007883a 	mov	r3,r4
    9298:	300f883a 	mov	r7,r6
    929c:	003fc706 	br	91bc <__alt_data_end+0xff0091bc>

000092a0 <_Balloc>:
    92a0:	20801317 	ldw	r2,76(r4)
    92a4:	defffc04 	addi	sp,sp,-16
    92a8:	dc400115 	stw	r17,4(sp)
    92ac:	dc000015 	stw	r16,0(sp)
    92b0:	dfc00315 	stw	ra,12(sp)
    92b4:	dc800215 	stw	r18,8(sp)
    92b8:	2023883a 	mov	r17,r4
    92bc:	2821883a 	mov	r16,r5
    92c0:	10000f26 	beq	r2,zero,9300 <_Balloc+0x60>
    92c4:	8407883a 	add	r3,r16,r16
    92c8:	18c7883a 	add	r3,r3,r3
    92cc:	10c7883a 	add	r3,r2,r3
    92d0:	18800017 	ldw	r2,0(r3)
    92d4:	10001126 	beq	r2,zero,931c <_Balloc+0x7c>
    92d8:	11000017 	ldw	r4,0(r2)
    92dc:	19000015 	stw	r4,0(r3)
    92e0:	10000415 	stw	zero,16(r2)
    92e4:	10000315 	stw	zero,12(r2)
    92e8:	dfc00317 	ldw	ra,12(sp)
    92ec:	dc800217 	ldw	r18,8(sp)
    92f0:	dc400117 	ldw	r17,4(sp)
    92f4:	dc000017 	ldw	r16,0(sp)
    92f8:	dec00404 	addi	sp,sp,16
    92fc:	f800283a 	ret
    9300:	01800844 	movi	r6,33
    9304:	01400104 	movi	r5,4
    9308:	000c1880 	call	c188 <_calloc_r>
    930c:	88801315 	stw	r2,76(r17)
    9310:	103fec1e 	bne	r2,zero,92c4 <__alt_data_end+0xff0092c4>
    9314:	0005883a 	mov	r2,zero
    9318:	003ff306 	br	92e8 <__alt_data_end+0xff0092e8>
    931c:	01400044 	movi	r5,1
    9320:	2c24983a 	sll	r18,r5,r16
    9324:	8809883a 	mov	r4,r17
    9328:	91800144 	addi	r6,r18,5
    932c:	318d883a 	add	r6,r6,r6
    9330:	318d883a 	add	r6,r6,r6
    9334:	000c1880 	call	c188 <_calloc_r>
    9338:	103ff626 	beq	r2,zero,9314 <__alt_data_end+0xff009314>
    933c:	14000115 	stw	r16,4(r2)
    9340:	14800215 	stw	r18,8(r2)
    9344:	003fe606 	br	92e0 <__alt_data_end+0xff0092e0>

00009348 <_Bfree>:
    9348:	28000826 	beq	r5,zero,936c <_Bfree+0x24>
    934c:	28c00117 	ldw	r3,4(r5)
    9350:	20801317 	ldw	r2,76(r4)
    9354:	18c7883a 	add	r3,r3,r3
    9358:	18c7883a 	add	r3,r3,r3
    935c:	10c5883a 	add	r2,r2,r3
    9360:	10c00017 	ldw	r3,0(r2)
    9364:	28c00015 	stw	r3,0(r5)
    9368:	11400015 	stw	r5,0(r2)
    936c:	f800283a 	ret

00009370 <__multadd>:
    9370:	defffa04 	addi	sp,sp,-24
    9374:	dc800315 	stw	r18,12(sp)
    9378:	dc400215 	stw	r17,8(sp)
    937c:	dc000115 	stw	r16,4(sp)
    9380:	2823883a 	mov	r17,r5
    9384:	2c000417 	ldw	r16,16(r5)
    9388:	dfc00515 	stw	ra,20(sp)
    938c:	dcc00415 	stw	r19,16(sp)
    9390:	2025883a 	mov	r18,r4
    9394:	29400504 	addi	r5,r5,20
    9398:	0011883a 	mov	r8,zero
    939c:	28c00017 	ldw	r3,0(r5)
    93a0:	29400104 	addi	r5,r5,4
    93a4:	42000044 	addi	r8,r8,1
    93a8:	18bfffcc 	andi	r2,r3,65535
    93ac:	1185383a 	mul	r2,r2,r6
    93b0:	1806d43a 	srli	r3,r3,16
    93b4:	11cf883a 	add	r7,r2,r7
    93b8:	3808d43a 	srli	r4,r7,16
    93bc:	1987383a 	mul	r3,r3,r6
    93c0:	38bfffcc 	andi	r2,r7,65535
    93c4:	1907883a 	add	r3,r3,r4
    93c8:	1808943a 	slli	r4,r3,16
    93cc:	180ed43a 	srli	r7,r3,16
    93d0:	2085883a 	add	r2,r4,r2
    93d4:	28bfff15 	stw	r2,-4(r5)
    93d8:	443ff016 	blt	r8,r16,939c <__alt_data_end+0xff00939c>
    93dc:	38000926 	beq	r7,zero,9404 <__multadd+0x94>
    93e0:	88800217 	ldw	r2,8(r17)
    93e4:	80800f0e 	bge	r16,r2,9424 <__multadd+0xb4>
    93e8:	80800144 	addi	r2,r16,5
    93ec:	1085883a 	add	r2,r2,r2
    93f0:	1085883a 	add	r2,r2,r2
    93f4:	8885883a 	add	r2,r17,r2
    93f8:	11c00015 	stw	r7,0(r2)
    93fc:	84000044 	addi	r16,r16,1
    9400:	8c000415 	stw	r16,16(r17)
    9404:	8805883a 	mov	r2,r17
    9408:	dfc00517 	ldw	ra,20(sp)
    940c:	dcc00417 	ldw	r19,16(sp)
    9410:	dc800317 	ldw	r18,12(sp)
    9414:	dc400217 	ldw	r17,8(sp)
    9418:	dc000117 	ldw	r16,4(sp)
    941c:	dec00604 	addi	sp,sp,24
    9420:	f800283a 	ret
    9424:	89400117 	ldw	r5,4(r17)
    9428:	9009883a 	mov	r4,r18
    942c:	d9c00015 	stw	r7,0(sp)
    9430:	29400044 	addi	r5,r5,1
    9434:	00092a00 	call	92a0 <_Balloc>
    9438:	89800417 	ldw	r6,16(r17)
    943c:	89400304 	addi	r5,r17,12
    9440:	11000304 	addi	r4,r2,12
    9444:	31800084 	addi	r6,r6,2
    9448:	318d883a 	add	r6,r6,r6
    944c:	318d883a 	add	r6,r6,r6
    9450:	1027883a 	mov	r19,r2
    9454:	0008ed40 	call	8ed4 <memcpy>
    9458:	d9c00017 	ldw	r7,0(sp)
    945c:	88000a26 	beq	r17,zero,9488 <__multadd+0x118>
    9460:	88c00117 	ldw	r3,4(r17)
    9464:	90801317 	ldw	r2,76(r18)
    9468:	18c7883a 	add	r3,r3,r3
    946c:	18c7883a 	add	r3,r3,r3
    9470:	10c5883a 	add	r2,r2,r3
    9474:	10c00017 	ldw	r3,0(r2)
    9478:	88c00015 	stw	r3,0(r17)
    947c:	14400015 	stw	r17,0(r2)
    9480:	9823883a 	mov	r17,r19
    9484:	003fd806 	br	93e8 <__alt_data_end+0xff0093e8>
    9488:	9823883a 	mov	r17,r19
    948c:	003fd606 	br	93e8 <__alt_data_end+0xff0093e8>

00009490 <__s2b>:
    9490:	defff904 	addi	sp,sp,-28
    9494:	dc400115 	stw	r17,4(sp)
    9498:	dc000015 	stw	r16,0(sp)
    949c:	2023883a 	mov	r17,r4
    94a0:	2821883a 	mov	r16,r5
    94a4:	39000204 	addi	r4,r7,8
    94a8:	01400244 	movi	r5,9
    94ac:	dcc00315 	stw	r19,12(sp)
    94b0:	dc800215 	stw	r18,8(sp)
    94b4:	dfc00615 	stw	ra,24(sp)
    94b8:	dd400515 	stw	r21,20(sp)
    94bc:	dd000415 	stw	r20,16(sp)
    94c0:	3825883a 	mov	r18,r7
    94c4:	3027883a 	mov	r19,r6
    94c8:	000d4b80 	call	d4b8 <__divsi3>
    94cc:	00c00044 	movi	r3,1
    94d0:	000b883a 	mov	r5,zero
    94d4:	1880030e 	bge	r3,r2,94e4 <__s2b+0x54>
    94d8:	18c7883a 	add	r3,r3,r3
    94dc:	29400044 	addi	r5,r5,1
    94e0:	18bffd16 	blt	r3,r2,94d8 <__alt_data_end+0xff0094d8>
    94e4:	8809883a 	mov	r4,r17
    94e8:	00092a00 	call	92a0 <_Balloc>
    94ec:	d8c00717 	ldw	r3,28(sp)
    94f0:	10c00515 	stw	r3,20(r2)
    94f4:	00c00044 	movi	r3,1
    94f8:	10c00415 	stw	r3,16(r2)
    94fc:	00c00244 	movi	r3,9
    9500:	1cc0210e 	bge	r3,r19,9588 <__s2b+0xf8>
    9504:	80eb883a 	add	r21,r16,r3
    9508:	a829883a 	mov	r20,r21
    950c:	84e1883a 	add	r16,r16,r19
    9510:	a1c00007 	ldb	r7,0(r20)
    9514:	01800284 	movi	r6,10
    9518:	a5000044 	addi	r20,r20,1
    951c:	100b883a 	mov	r5,r2
    9520:	39fff404 	addi	r7,r7,-48
    9524:	8809883a 	mov	r4,r17
    9528:	00093700 	call	9370 <__multadd>
    952c:	a43ff81e 	bne	r20,r16,9510 <__alt_data_end+0xff009510>
    9530:	ace1883a 	add	r16,r21,r19
    9534:	843ffe04 	addi	r16,r16,-8
    9538:	9c800a0e 	bge	r19,r18,9564 <__s2b+0xd4>
    953c:	94e5c83a 	sub	r18,r18,r19
    9540:	84a5883a 	add	r18,r16,r18
    9544:	81c00007 	ldb	r7,0(r16)
    9548:	01800284 	movi	r6,10
    954c:	84000044 	addi	r16,r16,1
    9550:	100b883a 	mov	r5,r2
    9554:	39fff404 	addi	r7,r7,-48
    9558:	8809883a 	mov	r4,r17
    955c:	00093700 	call	9370 <__multadd>
    9560:	84bff81e 	bne	r16,r18,9544 <__alt_data_end+0xff009544>
    9564:	dfc00617 	ldw	ra,24(sp)
    9568:	dd400517 	ldw	r21,20(sp)
    956c:	dd000417 	ldw	r20,16(sp)
    9570:	dcc00317 	ldw	r19,12(sp)
    9574:	dc800217 	ldw	r18,8(sp)
    9578:	dc400117 	ldw	r17,4(sp)
    957c:	dc000017 	ldw	r16,0(sp)
    9580:	dec00704 	addi	sp,sp,28
    9584:	f800283a 	ret
    9588:	84000284 	addi	r16,r16,10
    958c:	1827883a 	mov	r19,r3
    9590:	003fe906 	br	9538 <__alt_data_end+0xff009538>

00009594 <__hi0bits>:
    9594:	20bfffec 	andhi	r2,r4,65535
    9598:	1000141e 	bne	r2,zero,95ec <__hi0bits+0x58>
    959c:	2008943a 	slli	r4,r4,16
    95a0:	00800404 	movi	r2,16
    95a4:	20ffc02c 	andhi	r3,r4,65280
    95a8:	1800021e 	bne	r3,zero,95b4 <__hi0bits+0x20>
    95ac:	2008923a 	slli	r4,r4,8
    95b0:	10800204 	addi	r2,r2,8
    95b4:	20fc002c 	andhi	r3,r4,61440
    95b8:	1800021e 	bne	r3,zero,95c4 <__hi0bits+0x30>
    95bc:	2008913a 	slli	r4,r4,4
    95c0:	10800104 	addi	r2,r2,4
    95c4:	20f0002c 	andhi	r3,r4,49152
    95c8:	1800031e 	bne	r3,zero,95d8 <__hi0bits+0x44>
    95cc:	2109883a 	add	r4,r4,r4
    95d0:	10800084 	addi	r2,r2,2
    95d4:	2109883a 	add	r4,r4,r4
    95d8:	20000316 	blt	r4,zero,95e8 <__hi0bits+0x54>
    95dc:	2110002c 	andhi	r4,r4,16384
    95e0:	2000041e 	bne	r4,zero,95f4 <__hi0bits+0x60>
    95e4:	00800804 	movi	r2,32
    95e8:	f800283a 	ret
    95ec:	0005883a 	mov	r2,zero
    95f0:	003fec06 	br	95a4 <__alt_data_end+0xff0095a4>
    95f4:	10800044 	addi	r2,r2,1
    95f8:	f800283a 	ret

000095fc <__lo0bits>:
    95fc:	20c00017 	ldw	r3,0(r4)
    9600:	188001cc 	andi	r2,r3,7
    9604:	10000826 	beq	r2,zero,9628 <__lo0bits+0x2c>
    9608:	1880004c 	andi	r2,r3,1
    960c:	1000211e 	bne	r2,zero,9694 <__lo0bits+0x98>
    9610:	1880008c 	andi	r2,r3,2
    9614:	1000211e 	bne	r2,zero,969c <__lo0bits+0xa0>
    9618:	1806d0ba 	srli	r3,r3,2
    961c:	00800084 	movi	r2,2
    9620:	20c00015 	stw	r3,0(r4)
    9624:	f800283a 	ret
    9628:	18bfffcc 	andi	r2,r3,65535
    962c:	10001326 	beq	r2,zero,967c <__lo0bits+0x80>
    9630:	0005883a 	mov	r2,zero
    9634:	19403fcc 	andi	r5,r3,255
    9638:	2800021e 	bne	r5,zero,9644 <__lo0bits+0x48>
    963c:	1806d23a 	srli	r3,r3,8
    9640:	10800204 	addi	r2,r2,8
    9644:	194003cc 	andi	r5,r3,15
    9648:	2800021e 	bne	r5,zero,9654 <__lo0bits+0x58>
    964c:	1806d13a 	srli	r3,r3,4
    9650:	10800104 	addi	r2,r2,4
    9654:	194000cc 	andi	r5,r3,3
    9658:	2800021e 	bne	r5,zero,9664 <__lo0bits+0x68>
    965c:	1806d0ba 	srli	r3,r3,2
    9660:	10800084 	addi	r2,r2,2
    9664:	1940004c 	andi	r5,r3,1
    9668:	2800081e 	bne	r5,zero,968c <__lo0bits+0x90>
    966c:	1806d07a 	srli	r3,r3,1
    9670:	1800051e 	bne	r3,zero,9688 <__lo0bits+0x8c>
    9674:	00800804 	movi	r2,32
    9678:	f800283a 	ret
    967c:	1806d43a 	srli	r3,r3,16
    9680:	00800404 	movi	r2,16
    9684:	003feb06 	br	9634 <__alt_data_end+0xff009634>
    9688:	10800044 	addi	r2,r2,1
    968c:	20c00015 	stw	r3,0(r4)
    9690:	f800283a 	ret
    9694:	0005883a 	mov	r2,zero
    9698:	f800283a 	ret
    969c:	1806d07a 	srli	r3,r3,1
    96a0:	00800044 	movi	r2,1
    96a4:	20c00015 	stw	r3,0(r4)
    96a8:	f800283a 	ret

000096ac <__i2b>:
    96ac:	defffd04 	addi	sp,sp,-12
    96b0:	dc000015 	stw	r16,0(sp)
    96b4:	04000044 	movi	r16,1
    96b8:	dc400115 	stw	r17,4(sp)
    96bc:	2823883a 	mov	r17,r5
    96c0:	800b883a 	mov	r5,r16
    96c4:	dfc00215 	stw	ra,8(sp)
    96c8:	00092a00 	call	92a0 <_Balloc>
    96cc:	14400515 	stw	r17,20(r2)
    96d0:	14000415 	stw	r16,16(r2)
    96d4:	dfc00217 	ldw	ra,8(sp)
    96d8:	dc400117 	ldw	r17,4(sp)
    96dc:	dc000017 	ldw	r16,0(sp)
    96e0:	dec00304 	addi	sp,sp,12
    96e4:	f800283a 	ret

000096e8 <__multiply>:
    96e8:	defffa04 	addi	sp,sp,-24
    96ec:	dcc00315 	stw	r19,12(sp)
    96f0:	dc800215 	stw	r18,8(sp)
    96f4:	34c00417 	ldw	r19,16(r6)
    96f8:	2c800417 	ldw	r18,16(r5)
    96fc:	dd000415 	stw	r20,16(sp)
    9700:	dc400115 	stw	r17,4(sp)
    9704:	dfc00515 	stw	ra,20(sp)
    9708:	dc000015 	stw	r16,0(sp)
    970c:	2829883a 	mov	r20,r5
    9710:	3023883a 	mov	r17,r6
    9714:	94c0050e 	bge	r18,r19,972c <__multiply+0x44>
    9718:	9007883a 	mov	r3,r18
    971c:	3029883a 	mov	r20,r6
    9720:	9825883a 	mov	r18,r19
    9724:	2823883a 	mov	r17,r5
    9728:	1827883a 	mov	r19,r3
    972c:	a0800217 	ldw	r2,8(r20)
    9730:	94e1883a 	add	r16,r18,r19
    9734:	a1400117 	ldw	r5,4(r20)
    9738:	1400010e 	bge	r2,r16,9740 <__multiply+0x58>
    973c:	29400044 	addi	r5,r5,1
    9740:	00092a00 	call	92a0 <_Balloc>
    9744:	8415883a 	add	r10,r16,r16
    9748:	12c00504 	addi	r11,r2,20
    974c:	5295883a 	add	r10,r10,r10
    9750:	5a95883a 	add	r10,r11,r10
    9754:	5807883a 	mov	r3,r11
    9758:	5a80032e 	bgeu	r11,r10,9768 <__multiply+0x80>
    975c:	18000015 	stw	zero,0(r3)
    9760:	18c00104 	addi	r3,r3,4
    9764:	1abffd36 	bltu	r3,r10,975c <__alt_data_end+0xff00975c>
    9768:	9ce7883a 	add	r19,r19,r19
    976c:	94a5883a 	add	r18,r18,r18
    9770:	89800504 	addi	r6,r17,20
    9774:	9ce7883a 	add	r19,r19,r19
    9778:	a3400504 	addi	r13,r20,20
    977c:	94a5883a 	add	r18,r18,r18
    9780:	34d9883a 	add	r12,r6,r19
    9784:	6c93883a 	add	r9,r13,r18
    9788:	3300422e 	bgeu	r6,r12,9894 <__multiply+0x1ac>
    978c:	37c00017 	ldw	ra,0(r6)
    9790:	fbffffcc 	andi	r15,ra,65535
    9794:	78001b26 	beq	r15,zero,9804 <__multiply+0x11c>
    9798:	5811883a 	mov	r8,r11
    979c:	681d883a 	mov	r14,r13
    97a0:	000f883a 	mov	r7,zero
    97a4:	71000017 	ldw	r4,0(r14)
    97a8:	40c00017 	ldw	r3,0(r8)
    97ac:	73800104 	addi	r14,r14,4
    97b0:	217fffcc 	andi	r5,r4,65535
    97b4:	2bcb383a 	mul	r5,r5,r15
    97b8:	2008d43a 	srli	r4,r4,16
    97bc:	1c7fffcc 	andi	r17,r3,65535
    97c0:	2c4b883a 	add	r5,r5,r17
    97c4:	29cb883a 	add	r5,r5,r7
    97c8:	23c9383a 	mul	r4,r4,r15
    97cc:	1806d43a 	srli	r3,r3,16
    97d0:	280ed43a 	srli	r7,r5,16
    97d4:	297fffcc 	andi	r5,r5,65535
    97d8:	20c7883a 	add	r3,r4,r3
    97dc:	19c7883a 	add	r3,r3,r7
    97e0:	1808943a 	slli	r4,r3,16
    97e4:	4023883a 	mov	r17,r8
    97e8:	180ed43a 	srli	r7,r3,16
    97ec:	214ab03a 	or	r5,r4,r5
    97f0:	41400015 	stw	r5,0(r8)
    97f4:	42000104 	addi	r8,r8,4
    97f8:	727fea36 	bltu	r14,r9,97a4 <__alt_data_end+0xff0097a4>
    97fc:	89c00115 	stw	r7,4(r17)
    9800:	37c00017 	ldw	ra,0(r6)
    9804:	f83ed43a 	srli	ra,ra,16
    9808:	f8001f26 	beq	ra,zero,9888 <__multiply+0x1a0>
    980c:	58c00017 	ldw	r3,0(r11)
    9810:	681d883a 	mov	r14,r13
    9814:	581f883a 	mov	r15,r11
    9818:	1811883a 	mov	r8,r3
    981c:	5825883a 	mov	r18,r11
    9820:	000f883a 	mov	r7,zero
    9824:	00000106 	br	982c <__multiply+0x144>
    9828:	8825883a 	mov	r18,r17
    982c:	7140000b 	ldhu	r5,0(r14)
    9830:	4010d43a 	srli	r8,r8,16
    9834:	193fffcc 	andi	r4,r3,65535
    9838:	2fcb383a 	mul	r5,r5,ra
    983c:	7bc00104 	addi	r15,r15,4
    9840:	73800104 	addi	r14,r14,4
    9844:	2a0b883a 	add	r5,r5,r8
    9848:	29cb883a 	add	r5,r5,r7
    984c:	2806943a 	slli	r3,r5,16
    9850:	94400104 	addi	r17,r18,4
    9854:	280ad43a 	srli	r5,r5,16
    9858:	1908b03a 	or	r4,r3,r4
    985c:	793fff15 	stw	r4,-4(r15)
    9860:	70ffff17 	ldw	r3,-4(r14)
    9864:	8a000017 	ldw	r8,0(r17)
    9868:	1806d43a 	srli	r3,r3,16
    986c:	413fffcc 	andi	r4,r8,65535
    9870:	1fc7383a 	mul	r3,r3,ra
    9874:	1907883a 	add	r3,r3,r4
    9878:	1947883a 	add	r3,r3,r5
    987c:	180ed43a 	srli	r7,r3,16
    9880:	727fe936 	bltu	r14,r9,9828 <__alt_data_end+0xff009828>
    9884:	90c00115 	stw	r3,4(r18)
    9888:	31800104 	addi	r6,r6,4
    988c:	5ac00104 	addi	r11,r11,4
    9890:	333fbe36 	bltu	r6,r12,978c <__alt_data_end+0xff00978c>
    9894:	0400090e 	bge	zero,r16,98bc <__multiply+0x1d4>
    9898:	50ffff17 	ldw	r3,-4(r10)
    989c:	52bfff04 	addi	r10,r10,-4
    98a0:	18000326 	beq	r3,zero,98b0 <__multiply+0x1c8>
    98a4:	00000506 	br	98bc <__multiply+0x1d4>
    98a8:	50c00017 	ldw	r3,0(r10)
    98ac:	1800031e 	bne	r3,zero,98bc <__multiply+0x1d4>
    98b0:	843fffc4 	addi	r16,r16,-1
    98b4:	52bfff04 	addi	r10,r10,-4
    98b8:	803ffb1e 	bne	r16,zero,98a8 <__alt_data_end+0xff0098a8>
    98bc:	14000415 	stw	r16,16(r2)
    98c0:	dfc00517 	ldw	ra,20(sp)
    98c4:	dd000417 	ldw	r20,16(sp)
    98c8:	dcc00317 	ldw	r19,12(sp)
    98cc:	dc800217 	ldw	r18,8(sp)
    98d0:	dc400117 	ldw	r17,4(sp)
    98d4:	dc000017 	ldw	r16,0(sp)
    98d8:	dec00604 	addi	sp,sp,24
    98dc:	f800283a 	ret

000098e0 <__pow5mult>:
    98e0:	defffa04 	addi	sp,sp,-24
    98e4:	dcc00315 	stw	r19,12(sp)
    98e8:	dc000015 	stw	r16,0(sp)
    98ec:	dfc00515 	stw	ra,20(sp)
    98f0:	dd000415 	stw	r20,16(sp)
    98f4:	dc800215 	stw	r18,8(sp)
    98f8:	dc400115 	stw	r17,4(sp)
    98fc:	308000cc 	andi	r2,r6,3
    9900:	3021883a 	mov	r16,r6
    9904:	2027883a 	mov	r19,r4
    9908:	10002f1e 	bne	r2,zero,99c8 <__pow5mult+0xe8>
    990c:	2825883a 	mov	r18,r5
    9910:	8021d0ba 	srai	r16,r16,2
    9914:	80001a26 	beq	r16,zero,9980 <__pow5mult+0xa0>
    9918:	9c401217 	ldw	r17,72(r19)
    991c:	8800061e 	bne	r17,zero,9938 <__pow5mult+0x58>
    9920:	00003406 	br	99f4 <__pow5mult+0x114>
    9924:	8021d07a 	srai	r16,r16,1
    9928:	80001526 	beq	r16,zero,9980 <__pow5mult+0xa0>
    992c:	88800017 	ldw	r2,0(r17)
    9930:	10001c26 	beq	r2,zero,99a4 <__pow5mult+0xc4>
    9934:	1023883a 	mov	r17,r2
    9938:	8080004c 	andi	r2,r16,1
    993c:	103ff926 	beq	r2,zero,9924 <__alt_data_end+0xff009924>
    9940:	880d883a 	mov	r6,r17
    9944:	900b883a 	mov	r5,r18
    9948:	9809883a 	mov	r4,r19
    994c:	00096e80 	call	96e8 <__multiply>
    9950:	90001b26 	beq	r18,zero,99c0 <__pow5mult+0xe0>
    9954:	91000117 	ldw	r4,4(r18)
    9958:	98c01317 	ldw	r3,76(r19)
    995c:	8021d07a 	srai	r16,r16,1
    9960:	2109883a 	add	r4,r4,r4
    9964:	2109883a 	add	r4,r4,r4
    9968:	1907883a 	add	r3,r3,r4
    996c:	19000017 	ldw	r4,0(r3)
    9970:	91000015 	stw	r4,0(r18)
    9974:	1c800015 	stw	r18,0(r3)
    9978:	1025883a 	mov	r18,r2
    997c:	803feb1e 	bne	r16,zero,992c <__alt_data_end+0xff00992c>
    9980:	9005883a 	mov	r2,r18
    9984:	dfc00517 	ldw	ra,20(sp)
    9988:	dd000417 	ldw	r20,16(sp)
    998c:	dcc00317 	ldw	r19,12(sp)
    9990:	dc800217 	ldw	r18,8(sp)
    9994:	dc400117 	ldw	r17,4(sp)
    9998:	dc000017 	ldw	r16,0(sp)
    999c:	dec00604 	addi	sp,sp,24
    99a0:	f800283a 	ret
    99a4:	880d883a 	mov	r6,r17
    99a8:	880b883a 	mov	r5,r17
    99ac:	9809883a 	mov	r4,r19
    99b0:	00096e80 	call	96e8 <__multiply>
    99b4:	88800015 	stw	r2,0(r17)
    99b8:	10000015 	stw	zero,0(r2)
    99bc:	003fdd06 	br	9934 <__alt_data_end+0xff009934>
    99c0:	1025883a 	mov	r18,r2
    99c4:	003fd706 	br	9924 <__alt_data_end+0xff009924>
    99c8:	10bfffc4 	addi	r2,r2,-1
    99cc:	1085883a 	add	r2,r2,r2
    99d0:	00c00074 	movhi	r3,1
    99d4:	18c91904 	addi	r3,r3,9316
    99d8:	1085883a 	add	r2,r2,r2
    99dc:	1885883a 	add	r2,r3,r2
    99e0:	11800017 	ldw	r6,0(r2)
    99e4:	000f883a 	mov	r7,zero
    99e8:	00093700 	call	9370 <__multadd>
    99ec:	1025883a 	mov	r18,r2
    99f0:	003fc706 	br	9910 <__alt_data_end+0xff009910>
    99f4:	05000044 	movi	r20,1
    99f8:	a00b883a 	mov	r5,r20
    99fc:	9809883a 	mov	r4,r19
    9a00:	00092a00 	call	92a0 <_Balloc>
    9a04:	1023883a 	mov	r17,r2
    9a08:	00809c44 	movi	r2,625
    9a0c:	88800515 	stw	r2,20(r17)
    9a10:	8d000415 	stw	r20,16(r17)
    9a14:	9c401215 	stw	r17,72(r19)
    9a18:	88000015 	stw	zero,0(r17)
    9a1c:	003fc606 	br	9938 <__alt_data_end+0xff009938>

00009a20 <__lshift>:
    9a20:	defff904 	addi	sp,sp,-28
    9a24:	dd400515 	stw	r21,20(sp)
    9a28:	dcc00315 	stw	r19,12(sp)
    9a2c:	302bd17a 	srai	r21,r6,5
    9a30:	2cc00417 	ldw	r19,16(r5)
    9a34:	28800217 	ldw	r2,8(r5)
    9a38:	dd000415 	stw	r20,16(sp)
    9a3c:	ace7883a 	add	r19,r21,r19
    9a40:	dc800215 	stw	r18,8(sp)
    9a44:	dc400115 	stw	r17,4(sp)
    9a48:	dc000015 	stw	r16,0(sp)
    9a4c:	dfc00615 	stw	ra,24(sp)
    9a50:	9c000044 	addi	r16,r19,1
    9a54:	2823883a 	mov	r17,r5
    9a58:	3029883a 	mov	r20,r6
    9a5c:	2025883a 	mov	r18,r4
    9a60:	29400117 	ldw	r5,4(r5)
    9a64:	1400030e 	bge	r2,r16,9a74 <__lshift+0x54>
    9a68:	1085883a 	add	r2,r2,r2
    9a6c:	29400044 	addi	r5,r5,1
    9a70:	143ffd16 	blt	r2,r16,9a68 <__alt_data_end+0xff009a68>
    9a74:	9009883a 	mov	r4,r18
    9a78:	00092a00 	call	92a0 <_Balloc>
    9a7c:	10c00504 	addi	r3,r2,20
    9a80:	0540070e 	bge	zero,r21,9aa0 <__lshift+0x80>
    9a84:	ad6b883a 	add	r21,r21,r21
    9a88:	ad6b883a 	add	r21,r21,r21
    9a8c:	1809883a 	mov	r4,r3
    9a90:	1d47883a 	add	r3,r3,r21
    9a94:	20000015 	stw	zero,0(r4)
    9a98:	21000104 	addi	r4,r4,4
    9a9c:	193ffd1e 	bne	r3,r4,9a94 <__alt_data_end+0xff009a94>
    9aa0:	8a000417 	ldw	r8,16(r17)
    9aa4:	89000504 	addi	r4,r17,20
    9aa8:	a18007cc 	andi	r6,r20,31
    9aac:	4211883a 	add	r8,r8,r8
    9ab0:	4211883a 	add	r8,r8,r8
    9ab4:	2211883a 	add	r8,r4,r8
    9ab8:	30002326 	beq	r6,zero,9b48 <__lshift+0x128>
    9abc:	02400804 	movi	r9,32
    9ac0:	4993c83a 	sub	r9,r9,r6
    9ac4:	000b883a 	mov	r5,zero
    9ac8:	21c00017 	ldw	r7,0(r4)
    9acc:	1815883a 	mov	r10,r3
    9ad0:	18c00104 	addi	r3,r3,4
    9ad4:	398e983a 	sll	r7,r7,r6
    9ad8:	21000104 	addi	r4,r4,4
    9adc:	394ab03a 	or	r5,r7,r5
    9ae0:	197fff15 	stw	r5,-4(r3)
    9ae4:	217fff17 	ldw	r5,-4(r4)
    9ae8:	2a4ad83a 	srl	r5,r5,r9
    9aec:	223ff636 	bltu	r4,r8,9ac8 <__alt_data_end+0xff009ac8>
    9af0:	51400115 	stw	r5,4(r10)
    9af4:	28001a1e 	bne	r5,zero,9b60 <__lshift+0x140>
    9af8:	843fffc4 	addi	r16,r16,-1
    9afc:	14000415 	stw	r16,16(r2)
    9b00:	88000826 	beq	r17,zero,9b24 <__lshift+0x104>
    9b04:	89000117 	ldw	r4,4(r17)
    9b08:	90c01317 	ldw	r3,76(r18)
    9b0c:	2109883a 	add	r4,r4,r4
    9b10:	2109883a 	add	r4,r4,r4
    9b14:	1907883a 	add	r3,r3,r4
    9b18:	19000017 	ldw	r4,0(r3)
    9b1c:	89000015 	stw	r4,0(r17)
    9b20:	1c400015 	stw	r17,0(r3)
    9b24:	dfc00617 	ldw	ra,24(sp)
    9b28:	dd400517 	ldw	r21,20(sp)
    9b2c:	dd000417 	ldw	r20,16(sp)
    9b30:	dcc00317 	ldw	r19,12(sp)
    9b34:	dc800217 	ldw	r18,8(sp)
    9b38:	dc400117 	ldw	r17,4(sp)
    9b3c:	dc000017 	ldw	r16,0(sp)
    9b40:	dec00704 	addi	sp,sp,28
    9b44:	f800283a 	ret
    9b48:	21400017 	ldw	r5,0(r4)
    9b4c:	18c00104 	addi	r3,r3,4
    9b50:	21000104 	addi	r4,r4,4
    9b54:	197fff15 	stw	r5,-4(r3)
    9b58:	223ffb36 	bltu	r4,r8,9b48 <__alt_data_end+0xff009b48>
    9b5c:	003fe606 	br	9af8 <__alt_data_end+0xff009af8>
    9b60:	9c000084 	addi	r16,r19,2
    9b64:	003fe406 	br	9af8 <__alt_data_end+0xff009af8>

00009b68 <__mcmp>:
    9b68:	20800417 	ldw	r2,16(r4)
    9b6c:	28c00417 	ldw	r3,16(r5)
    9b70:	10c5c83a 	sub	r2,r2,r3
    9b74:	1000111e 	bne	r2,zero,9bbc <__mcmp+0x54>
    9b78:	18c7883a 	add	r3,r3,r3
    9b7c:	18c7883a 	add	r3,r3,r3
    9b80:	21000504 	addi	r4,r4,20
    9b84:	29400504 	addi	r5,r5,20
    9b88:	20c5883a 	add	r2,r4,r3
    9b8c:	28cb883a 	add	r5,r5,r3
    9b90:	00000106 	br	9b98 <__mcmp+0x30>
    9b94:	20800a2e 	bgeu	r4,r2,9bc0 <__mcmp+0x58>
    9b98:	10bfff04 	addi	r2,r2,-4
    9b9c:	297fff04 	addi	r5,r5,-4
    9ba0:	11800017 	ldw	r6,0(r2)
    9ba4:	28c00017 	ldw	r3,0(r5)
    9ba8:	30fffa26 	beq	r6,r3,9b94 <__alt_data_end+0xff009b94>
    9bac:	30c00236 	bltu	r6,r3,9bb8 <__mcmp+0x50>
    9bb0:	00800044 	movi	r2,1
    9bb4:	f800283a 	ret
    9bb8:	00bfffc4 	movi	r2,-1
    9bbc:	f800283a 	ret
    9bc0:	0005883a 	mov	r2,zero
    9bc4:	f800283a 	ret

00009bc8 <__mdiff>:
    9bc8:	28c00417 	ldw	r3,16(r5)
    9bcc:	30800417 	ldw	r2,16(r6)
    9bd0:	defffa04 	addi	sp,sp,-24
    9bd4:	dcc00315 	stw	r19,12(sp)
    9bd8:	dc800215 	stw	r18,8(sp)
    9bdc:	dfc00515 	stw	ra,20(sp)
    9be0:	dd000415 	stw	r20,16(sp)
    9be4:	dc400115 	stw	r17,4(sp)
    9be8:	dc000015 	stw	r16,0(sp)
    9bec:	1887c83a 	sub	r3,r3,r2
    9bf0:	2825883a 	mov	r18,r5
    9bf4:	3027883a 	mov	r19,r6
    9bf8:	1800141e 	bne	r3,zero,9c4c <__mdiff+0x84>
    9bfc:	1085883a 	add	r2,r2,r2
    9c00:	1085883a 	add	r2,r2,r2
    9c04:	2a000504 	addi	r8,r5,20
    9c08:	34000504 	addi	r16,r6,20
    9c0c:	4087883a 	add	r3,r8,r2
    9c10:	8085883a 	add	r2,r16,r2
    9c14:	00000106 	br	9c1c <__mdiff+0x54>
    9c18:	40c0592e 	bgeu	r8,r3,9d80 <__mdiff+0x1b8>
    9c1c:	18ffff04 	addi	r3,r3,-4
    9c20:	10bfff04 	addi	r2,r2,-4
    9c24:	19c00017 	ldw	r7,0(r3)
    9c28:	11400017 	ldw	r5,0(r2)
    9c2c:	397ffa26 	beq	r7,r5,9c18 <__alt_data_end+0xff009c18>
    9c30:	3940592e 	bgeu	r7,r5,9d98 <__mdiff+0x1d0>
    9c34:	9005883a 	mov	r2,r18
    9c38:	4023883a 	mov	r17,r8
    9c3c:	9825883a 	mov	r18,r19
    9c40:	05000044 	movi	r20,1
    9c44:	1027883a 	mov	r19,r2
    9c48:	00000406 	br	9c5c <__mdiff+0x94>
    9c4c:	18005616 	blt	r3,zero,9da8 <__mdiff+0x1e0>
    9c50:	34400504 	addi	r17,r6,20
    9c54:	2c000504 	addi	r16,r5,20
    9c58:	0029883a 	mov	r20,zero
    9c5c:	91400117 	ldw	r5,4(r18)
    9c60:	00092a00 	call	92a0 <_Balloc>
    9c64:	92400417 	ldw	r9,16(r18)
    9c68:	9b000417 	ldw	r12,16(r19)
    9c6c:	12c00504 	addi	r11,r2,20
    9c70:	4a51883a 	add	r8,r9,r9
    9c74:	6319883a 	add	r12,r12,r12
    9c78:	4211883a 	add	r8,r8,r8
    9c7c:	6319883a 	add	r12,r12,r12
    9c80:	15000315 	stw	r20,12(r2)
    9c84:	8211883a 	add	r8,r16,r8
    9c88:	8b19883a 	add	r12,r17,r12
    9c8c:	0007883a 	mov	r3,zero
    9c90:	81400017 	ldw	r5,0(r16)
    9c94:	89c00017 	ldw	r7,0(r17)
    9c98:	59800104 	addi	r6,r11,4
    9c9c:	293fffcc 	andi	r4,r5,65535
    9ca0:	20c7883a 	add	r3,r4,r3
    9ca4:	393fffcc 	andi	r4,r7,65535
    9ca8:	1909c83a 	sub	r4,r3,r4
    9cac:	280ad43a 	srli	r5,r5,16
    9cb0:	380ed43a 	srli	r7,r7,16
    9cb4:	2007d43a 	srai	r3,r4,16
    9cb8:	213fffcc 	andi	r4,r4,65535
    9cbc:	29cbc83a 	sub	r5,r5,r7
    9cc0:	28c7883a 	add	r3,r5,r3
    9cc4:	180a943a 	slli	r5,r3,16
    9cc8:	8c400104 	addi	r17,r17,4
    9ccc:	84000104 	addi	r16,r16,4
    9cd0:	2908b03a 	or	r4,r5,r4
    9cd4:	59000015 	stw	r4,0(r11)
    9cd8:	1807d43a 	srai	r3,r3,16
    9cdc:	3015883a 	mov	r10,r6
    9ce0:	3017883a 	mov	r11,r6
    9ce4:	8b3fea36 	bltu	r17,r12,9c90 <__alt_data_end+0xff009c90>
    9ce8:	8200162e 	bgeu	r16,r8,9d44 <__mdiff+0x17c>
    9cec:	8017883a 	mov	r11,r16
    9cf0:	59400017 	ldw	r5,0(r11)
    9cf4:	31800104 	addi	r6,r6,4
    9cf8:	5ac00104 	addi	r11,r11,4
    9cfc:	293fffcc 	andi	r4,r5,65535
    9d00:	20c7883a 	add	r3,r4,r3
    9d04:	280ed43a 	srli	r7,r5,16
    9d08:	180bd43a 	srai	r5,r3,16
    9d0c:	193fffcc 	andi	r4,r3,65535
    9d10:	3947883a 	add	r3,r7,r5
    9d14:	180a943a 	slli	r5,r3,16
    9d18:	1807d43a 	srai	r3,r3,16
    9d1c:	2908b03a 	or	r4,r5,r4
    9d20:	313fff15 	stw	r4,-4(r6)
    9d24:	5a3ff236 	bltu	r11,r8,9cf0 <__alt_data_end+0xff009cf0>
    9d28:	0406303a 	nor	r3,zero,r16
    9d2c:	1a07883a 	add	r3,r3,r8
    9d30:	1806d0ba 	srli	r3,r3,2
    9d34:	18c00044 	addi	r3,r3,1
    9d38:	18c7883a 	add	r3,r3,r3
    9d3c:	18c7883a 	add	r3,r3,r3
    9d40:	50d5883a 	add	r10,r10,r3
    9d44:	50ffff04 	addi	r3,r10,-4
    9d48:	2000041e 	bne	r4,zero,9d5c <__mdiff+0x194>
    9d4c:	18ffff04 	addi	r3,r3,-4
    9d50:	19000017 	ldw	r4,0(r3)
    9d54:	4a7fffc4 	addi	r9,r9,-1
    9d58:	203ffc26 	beq	r4,zero,9d4c <__alt_data_end+0xff009d4c>
    9d5c:	12400415 	stw	r9,16(r2)
    9d60:	dfc00517 	ldw	ra,20(sp)
    9d64:	dd000417 	ldw	r20,16(sp)
    9d68:	dcc00317 	ldw	r19,12(sp)
    9d6c:	dc800217 	ldw	r18,8(sp)
    9d70:	dc400117 	ldw	r17,4(sp)
    9d74:	dc000017 	ldw	r16,0(sp)
    9d78:	dec00604 	addi	sp,sp,24
    9d7c:	f800283a 	ret
    9d80:	000b883a 	mov	r5,zero
    9d84:	00092a00 	call	92a0 <_Balloc>
    9d88:	00c00044 	movi	r3,1
    9d8c:	10c00415 	stw	r3,16(r2)
    9d90:	10000515 	stw	zero,20(r2)
    9d94:	003ff206 	br	9d60 <__alt_data_end+0xff009d60>
    9d98:	8023883a 	mov	r17,r16
    9d9c:	0029883a 	mov	r20,zero
    9da0:	4021883a 	mov	r16,r8
    9da4:	003fad06 	br	9c5c <__alt_data_end+0xff009c5c>
    9da8:	9005883a 	mov	r2,r18
    9dac:	94400504 	addi	r17,r18,20
    9db0:	9c000504 	addi	r16,r19,20
    9db4:	9825883a 	mov	r18,r19
    9db8:	05000044 	movi	r20,1
    9dbc:	1027883a 	mov	r19,r2
    9dc0:	003fa606 	br	9c5c <__alt_data_end+0xff009c5c>

00009dc4 <__ulp>:
    9dc4:	295ffc2c 	andhi	r5,r5,32752
    9dc8:	00bf3034 	movhi	r2,64704
    9dcc:	2887883a 	add	r3,r5,r2
    9dd0:	00c0020e 	bge	zero,r3,9ddc <__ulp+0x18>
    9dd4:	0005883a 	mov	r2,zero
    9dd8:	f800283a 	ret
    9ddc:	00c7c83a 	sub	r3,zero,r3
    9de0:	1807d53a 	srai	r3,r3,20
    9de4:	008004c4 	movi	r2,19
    9de8:	10c00b0e 	bge	r2,r3,9e18 <__ulp+0x54>
    9dec:	18bffb04 	addi	r2,r3,-20
    9df0:	01000784 	movi	r4,30
    9df4:	0007883a 	mov	r3,zero
    9df8:	20800516 	blt	r4,r2,9e10 <__ulp+0x4c>
    9dfc:	010007c4 	movi	r4,31
    9e00:	2089c83a 	sub	r4,r4,r2
    9e04:	00800044 	movi	r2,1
    9e08:	1104983a 	sll	r2,r2,r4
    9e0c:	f800283a 	ret
    9e10:	00800044 	movi	r2,1
    9e14:	f800283a 	ret
    9e18:	01400234 	movhi	r5,8
    9e1c:	28c7d83a 	sra	r3,r5,r3
    9e20:	0005883a 	mov	r2,zero
    9e24:	f800283a 	ret

00009e28 <__b2d>:
    9e28:	defffa04 	addi	sp,sp,-24
    9e2c:	dc000015 	stw	r16,0(sp)
    9e30:	24000417 	ldw	r16,16(r4)
    9e34:	dc400115 	stw	r17,4(sp)
    9e38:	24400504 	addi	r17,r4,20
    9e3c:	8421883a 	add	r16,r16,r16
    9e40:	8421883a 	add	r16,r16,r16
    9e44:	8c21883a 	add	r16,r17,r16
    9e48:	dc800215 	stw	r18,8(sp)
    9e4c:	84bfff17 	ldw	r18,-4(r16)
    9e50:	dd000415 	stw	r20,16(sp)
    9e54:	dcc00315 	stw	r19,12(sp)
    9e58:	9009883a 	mov	r4,r18
    9e5c:	2829883a 	mov	r20,r5
    9e60:	dfc00515 	stw	ra,20(sp)
    9e64:	00095940 	call	9594 <__hi0bits>
    9e68:	00c00804 	movi	r3,32
    9e6c:	1889c83a 	sub	r4,r3,r2
    9e70:	a1000015 	stw	r4,0(r20)
    9e74:	01000284 	movi	r4,10
    9e78:	84ffff04 	addi	r19,r16,-4
    9e7c:	20801216 	blt	r4,r2,9ec8 <__b2d+0xa0>
    9e80:	018002c4 	movi	r6,11
    9e84:	308dc83a 	sub	r6,r6,r2
    9e88:	9186d83a 	srl	r3,r18,r6
    9e8c:	18cffc34 	orhi	r3,r3,16368
    9e90:	8cc0212e 	bgeu	r17,r19,9f18 <__b2d+0xf0>
    9e94:	813ffe17 	ldw	r4,-8(r16)
    9e98:	218cd83a 	srl	r6,r4,r6
    9e9c:	10800544 	addi	r2,r2,21
    9ea0:	9084983a 	sll	r2,r18,r2
    9ea4:	1184b03a 	or	r2,r2,r6
    9ea8:	dfc00517 	ldw	ra,20(sp)
    9eac:	dd000417 	ldw	r20,16(sp)
    9eb0:	dcc00317 	ldw	r19,12(sp)
    9eb4:	dc800217 	ldw	r18,8(sp)
    9eb8:	dc400117 	ldw	r17,4(sp)
    9ebc:	dc000017 	ldw	r16,0(sp)
    9ec0:	dec00604 	addi	sp,sp,24
    9ec4:	f800283a 	ret
    9ec8:	8cc00f2e 	bgeu	r17,r19,9f08 <__b2d+0xe0>
    9ecc:	117ffd44 	addi	r5,r2,-11
    9ed0:	80bffe17 	ldw	r2,-8(r16)
    9ed4:	28000e26 	beq	r5,zero,9f10 <__b2d+0xe8>
    9ed8:	1949c83a 	sub	r4,r3,r5
    9edc:	9164983a 	sll	r18,r18,r5
    9ee0:	1106d83a 	srl	r3,r2,r4
    9ee4:	81bffe04 	addi	r6,r16,-8
    9ee8:	948ffc34 	orhi	r18,r18,16368
    9eec:	90c6b03a 	or	r3,r18,r3
    9ef0:	89800e2e 	bgeu	r17,r6,9f2c <__b2d+0x104>
    9ef4:	81bffd17 	ldw	r6,-12(r16)
    9ef8:	1144983a 	sll	r2,r2,r5
    9efc:	310ad83a 	srl	r5,r6,r4
    9f00:	2884b03a 	or	r2,r5,r2
    9f04:	003fe806 	br	9ea8 <__alt_data_end+0xff009ea8>
    9f08:	10bffd44 	addi	r2,r2,-11
    9f0c:	1000041e 	bne	r2,zero,9f20 <__b2d+0xf8>
    9f10:	90cffc34 	orhi	r3,r18,16368
    9f14:	003fe406 	br	9ea8 <__alt_data_end+0xff009ea8>
    9f18:	000d883a 	mov	r6,zero
    9f1c:	003fdf06 	br	9e9c <__alt_data_end+0xff009e9c>
    9f20:	90a4983a 	sll	r18,r18,r2
    9f24:	0005883a 	mov	r2,zero
    9f28:	003ff906 	br	9f10 <__alt_data_end+0xff009f10>
    9f2c:	1144983a 	sll	r2,r2,r5
    9f30:	003fdd06 	br	9ea8 <__alt_data_end+0xff009ea8>

00009f34 <__d2b>:
    9f34:	defff804 	addi	sp,sp,-32
    9f38:	dc000215 	stw	r16,8(sp)
    9f3c:	3021883a 	mov	r16,r6
    9f40:	dc400315 	stw	r17,12(sp)
    9f44:	8022907a 	slli	r17,r16,1
    9f48:	dd000615 	stw	r20,24(sp)
    9f4c:	2829883a 	mov	r20,r5
    9f50:	01400044 	movi	r5,1
    9f54:	dcc00515 	stw	r19,20(sp)
    9f58:	dc800415 	stw	r18,16(sp)
    9f5c:	dfc00715 	stw	ra,28(sp)
    9f60:	3825883a 	mov	r18,r7
    9f64:	8822d57a 	srli	r17,r17,21
    9f68:	00092a00 	call	92a0 <_Balloc>
    9f6c:	1027883a 	mov	r19,r2
    9f70:	00800434 	movhi	r2,16
    9f74:	10bfffc4 	addi	r2,r2,-1
    9f78:	808c703a 	and	r6,r16,r2
    9f7c:	88000126 	beq	r17,zero,9f84 <__d2b+0x50>
    9f80:	31800434 	orhi	r6,r6,16
    9f84:	d9800015 	stw	r6,0(sp)
    9f88:	a0002426 	beq	r20,zero,a01c <__d2b+0xe8>
    9f8c:	d9000104 	addi	r4,sp,4
    9f90:	dd000115 	stw	r20,4(sp)
    9f94:	00095fc0 	call	95fc <__lo0bits>
    9f98:	d8c00017 	ldw	r3,0(sp)
    9f9c:	10002f1e 	bne	r2,zero,a05c <__d2b+0x128>
    9fa0:	d9000117 	ldw	r4,4(sp)
    9fa4:	99000515 	stw	r4,20(r19)
    9fa8:	1821003a 	cmpeq	r16,r3,zero
    9fac:	01000084 	movi	r4,2
    9fb0:	2421c83a 	sub	r16,r4,r16
    9fb4:	98c00615 	stw	r3,24(r19)
    9fb8:	9c000415 	stw	r16,16(r19)
    9fbc:	88001f1e 	bne	r17,zero,a03c <__d2b+0x108>
    9fc0:	10bef384 	addi	r2,r2,-1074
    9fc4:	90800015 	stw	r2,0(r18)
    9fc8:	00900034 	movhi	r2,16384
    9fcc:	10bfffc4 	addi	r2,r2,-1
    9fd0:	8085883a 	add	r2,r16,r2
    9fd4:	1085883a 	add	r2,r2,r2
    9fd8:	1085883a 	add	r2,r2,r2
    9fdc:	9885883a 	add	r2,r19,r2
    9fe0:	11000517 	ldw	r4,20(r2)
    9fe4:	8020917a 	slli	r16,r16,5
    9fe8:	00095940 	call	9594 <__hi0bits>
    9fec:	d8c00817 	ldw	r3,32(sp)
    9ff0:	8085c83a 	sub	r2,r16,r2
    9ff4:	18800015 	stw	r2,0(r3)
    9ff8:	9805883a 	mov	r2,r19
    9ffc:	dfc00717 	ldw	ra,28(sp)
    a000:	dd000617 	ldw	r20,24(sp)
    a004:	dcc00517 	ldw	r19,20(sp)
    a008:	dc800417 	ldw	r18,16(sp)
    a00c:	dc400317 	ldw	r17,12(sp)
    a010:	dc000217 	ldw	r16,8(sp)
    a014:	dec00804 	addi	sp,sp,32
    a018:	f800283a 	ret
    a01c:	d809883a 	mov	r4,sp
    a020:	00095fc0 	call	95fc <__lo0bits>
    a024:	d8c00017 	ldw	r3,0(sp)
    a028:	04000044 	movi	r16,1
    a02c:	9c000415 	stw	r16,16(r19)
    a030:	98c00515 	stw	r3,20(r19)
    a034:	10800804 	addi	r2,r2,32
    a038:	883fe126 	beq	r17,zero,9fc0 <__alt_data_end+0xff009fc0>
    a03c:	00c00d44 	movi	r3,53
    a040:	8c7ef344 	addi	r17,r17,-1075
    a044:	88a3883a 	add	r17,r17,r2
    a048:	1885c83a 	sub	r2,r3,r2
    a04c:	d8c00817 	ldw	r3,32(sp)
    a050:	94400015 	stw	r17,0(r18)
    a054:	18800015 	stw	r2,0(r3)
    a058:	003fe706 	br	9ff8 <__alt_data_end+0xff009ff8>
    a05c:	01000804 	movi	r4,32
    a060:	2089c83a 	sub	r4,r4,r2
    a064:	1908983a 	sll	r4,r3,r4
    a068:	d9400117 	ldw	r5,4(sp)
    a06c:	1886d83a 	srl	r3,r3,r2
    a070:	2148b03a 	or	r4,r4,r5
    a074:	99000515 	stw	r4,20(r19)
    a078:	d8c00015 	stw	r3,0(sp)
    a07c:	003fca06 	br	9fa8 <__alt_data_end+0xff009fa8>

0000a080 <__ratio>:
    a080:	defff904 	addi	sp,sp,-28
    a084:	dc400315 	stw	r17,12(sp)
    a088:	2823883a 	mov	r17,r5
    a08c:	d9400104 	addi	r5,sp,4
    a090:	dfc00615 	stw	ra,24(sp)
    a094:	dcc00515 	stw	r19,20(sp)
    a098:	dc800415 	stw	r18,16(sp)
    a09c:	2027883a 	mov	r19,r4
    a0a0:	dc000215 	stw	r16,8(sp)
    a0a4:	0009e280 	call	9e28 <__b2d>
    a0a8:	d80b883a 	mov	r5,sp
    a0ac:	8809883a 	mov	r4,r17
    a0b0:	1025883a 	mov	r18,r2
    a0b4:	1821883a 	mov	r16,r3
    a0b8:	0009e280 	call	9e28 <__b2d>
    a0bc:	8a000417 	ldw	r8,16(r17)
    a0c0:	99000417 	ldw	r4,16(r19)
    a0c4:	d9400117 	ldw	r5,4(sp)
    a0c8:	2209c83a 	sub	r4,r4,r8
    a0cc:	2010917a 	slli	r8,r4,5
    a0d0:	d9000017 	ldw	r4,0(sp)
    a0d4:	2909c83a 	sub	r4,r5,r4
    a0d8:	4109883a 	add	r4,r8,r4
    a0dc:	01000e0e 	bge	zero,r4,a118 <__ratio+0x98>
    a0e0:	2008953a 	slli	r4,r4,20
    a0e4:	2421883a 	add	r16,r4,r16
    a0e8:	100d883a 	mov	r6,r2
    a0ec:	180f883a 	mov	r7,r3
    a0f0:	9009883a 	mov	r4,r18
    a0f4:	800b883a 	mov	r5,r16
    a0f8:	000df180 	call	df18 <__divdf3>
    a0fc:	dfc00617 	ldw	ra,24(sp)
    a100:	dcc00517 	ldw	r19,20(sp)
    a104:	dc800417 	ldw	r18,16(sp)
    a108:	dc400317 	ldw	r17,12(sp)
    a10c:	dc000217 	ldw	r16,8(sp)
    a110:	dec00704 	addi	sp,sp,28
    a114:	f800283a 	ret
    a118:	2008953a 	slli	r4,r4,20
    a11c:	1907c83a 	sub	r3,r3,r4
    a120:	003ff106 	br	a0e8 <__alt_data_end+0xff00a0e8>

0000a124 <_mprec_log10>:
    a124:	defffe04 	addi	sp,sp,-8
    a128:	dc000015 	stw	r16,0(sp)
    a12c:	dfc00115 	stw	ra,4(sp)
    a130:	008005c4 	movi	r2,23
    a134:	2021883a 	mov	r16,r4
    a138:	11000d0e 	bge	r2,r4,a170 <_mprec_log10+0x4c>
    a13c:	0005883a 	mov	r2,zero
    a140:	00cffc34 	movhi	r3,16368
    a144:	843fffc4 	addi	r16,r16,-1
    a148:	000d883a 	mov	r6,zero
    a14c:	01d00934 	movhi	r7,16420
    a150:	1009883a 	mov	r4,r2
    a154:	180b883a 	mov	r5,r3
    a158:	0002ab40 	call	2ab4 <__muldf3>
    a15c:	803ff91e 	bne	r16,zero,a144 <__alt_data_end+0xff00a144>
    a160:	dfc00117 	ldw	ra,4(sp)
    a164:	dc000017 	ldw	r16,0(sp)
    a168:	dec00204 	addi	sp,sp,8
    a16c:	f800283a 	ret
    a170:	202090fa 	slli	r16,r4,3
    a174:	00800074 	movhi	r2,1
    a178:	10893004 	addi	r2,r2,9408
    a17c:	1421883a 	add	r16,r2,r16
    a180:	80800017 	ldw	r2,0(r16)
    a184:	80c00117 	ldw	r3,4(r16)
    a188:	dfc00117 	ldw	ra,4(sp)
    a18c:	dc000017 	ldw	r16,0(sp)
    a190:	dec00204 	addi	sp,sp,8
    a194:	f800283a 	ret

0000a198 <__copybits>:
    a198:	297fffc4 	addi	r5,r5,-1
    a19c:	280fd17a 	srai	r7,r5,5
    a1a0:	30c00417 	ldw	r3,16(r6)
    a1a4:	30800504 	addi	r2,r6,20
    a1a8:	39c00044 	addi	r7,r7,1
    a1ac:	18c7883a 	add	r3,r3,r3
    a1b0:	39cf883a 	add	r7,r7,r7
    a1b4:	18c7883a 	add	r3,r3,r3
    a1b8:	39cf883a 	add	r7,r7,r7
    a1bc:	10c7883a 	add	r3,r2,r3
    a1c0:	21cf883a 	add	r7,r4,r7
    a1c4:	10c00d2e 	bgeu	r2,r3,a1fc <__copybits+0x64>
    a1c8:	200b883a 	mov	r5,r4
    a1cc:	12000017 	ldw	r8,0(r2)
    a1d0:	29400104 	addi	r5,r5,4
    a1d4:	10800104 	addi	r2,r2,4
    a1d8:	2a3fff15 	stw	r8,-4(r5)
    a1dc:	10fffb36 	bltu	r2,r3,a1cc <__alt_data_end+0xff00a1cc>
    a1e0:	1985c83a 	sub	r2,r3,r6
    a1e4:	10bffac4 	addi	r2,r2,-21
    a1e8:	1004d0ba 	srli	r2,r2,2
    a1ec:	10800044 	addi	r2,r2,1
    a1f0:	1085883a 	add	r2,r2,r2
    a1f4:	1085883a 	add	r2,r2,r2
    a1f8:	2089883a 	add	r4,r4,r2
    a1fc:	21c0032e 	bgeu	r4,r7,a20c <__copybits+0x74>
    a200:	20000015 	stw	zero,0(r4)
    a204:	21000104 	addi	r4,r4,4
    a208:	21fffd36 	bltu	r4,r7,a200 <__alt_data_end+0xff00a200>
    a20c:	f800283a 	ret

0000a210 <__any_on>:
    a210:	20c00417 	ldw	r3,16(r4)
    a214:	2805d17a 	srai	r2,r5,5
    a218:	21000504 	addi	r4,r4,20
    a21c:	18800d0e 	bge	r3,r2,a254 <__any_on+0x44>
    a220:	18c7883a 	add	r3,r3,r3
    a224:	18c7883a 	add	r3,r3,r3
    a228:	20c7883a 	add	r3,r4,r3
    a22c:	20c0192e 	bgeu	r4,r3,a294 <__any_on+0x84>
    a230:	18bfff17 	ldw	r2,-4(r3)
    a234:	18ffff04 	addi	r3,r3,-4
    a238:	1000041e 	bne	r2,zero,a24c <__any_on+0x3c>
    a23c:	20c0142e 	bgeu	r4,r3,a290 <__any_on+0x80>
    a240:	18ffff04 	addi	r3,r3,-4
    a244:	19400017 	ldw	r5,0(r3)
    a248:	283ffc26 	beq	r5,zero,a23c <__alt_data_end+0xff00a23c>
    a24c:	00800044 	movi	r2,1
    a250:	f800283a 	ret
    a254:	10c00a0e 	bge	r2,r3,a280 <__any_on+0x70>
    a258:	1085883a 	add	r2,r2,r2
    a25c:	1085883a 	add	r2,r2,r2
    a260:	294007cc 	andi	r5,r5,31
    a264:	2087883a 	add	r3,r4,r2
    a268:	283ff026 	beq	r5,zero,a22c <__alt_data_end+0xff00a22c>
    a26c:	19800017 	ldw	r6,0(r3)
    a270:	3144d83a 	srl	r2,r6,r5
    a274:	114a983a 	sll	r5,r2,r5
    a278:	317ff41e 	bne	r6,r5,a24c <__alt_data_end+0xff00a24c>
    a27c:	003feb06 	br	a22c <__alt_data_end+0xff00a22c>
    a280:	1085883a 	add	r2,r2,r2
    a284:	1085883a 	add	r2,r2,r2
    a288:	2087883a 	add	r3,r4,r2
    a28c:	003fe706 	br	a22c <__alt_data_end+0xff00a22c>
    a290:	f800283a 	ret
    a294:	0005883a 	mov	r2,zero
    a298:	f800283a 	ret

0000a29c <_realloc_r>:
    a29c:	defff604 	addi	sp,sp,-40
    a2a0:	dc800215 	stw	r18,8(sp)
    a2a4:	dfc00915 	stw	ra,36(sp)
    a2a8:	df000815 	stw	fp,32(sp)
    a2ac:	ddc00715 	stw	r23,28(sp)
    a2b0:	dd800615 	stw	r22,24(sp)
    a2b4:	dd400515 	stw	r21,20(sp)
    a2b8:	dd000415 	stw	r20,16(sp)
    a2bc:	dcc00315 	stw	r19,12(sp)
    a2c0:	dc400115 	stw	r17,4(sp)
    a2c4:	dc000015 	stw	r16,0(sp)
    a2c8:	3025883a 	mov	r18,r6
    a2cc:	2800b726 	beq	r5,zero,a5ac <_realloc_r+0x310>
    a2d0:	282b883a 	mov	r21,r5
    a2d4:	2029883a 	mov	r20,r4
    a2d8:	000f9780 	call	f978 <__malloc_lock>
    a2dc:	a8bfff17 	ldw	r2,-4(r21)
    a2e0:	043fff04 	movi	r16,-4
    a2e4:	90c002c4 	addi	r3,r18,11
    a2e8:	01000584 	movi	r4,22
    a2ec:	acfffe04 	addi	r19,r21,-8
    a2f0:	1420703a 	and	r16,r2,r16
    a2f4:	20c0332e 	bgeu	r4,r3,a3c4 <_realloc_r+0x128>
    a2f8:	047ffe04 	movi	r17,-8
    a2fc:	1c62703a 	and	r17,r3,r17
    a300:	8807883a 	mov	r3,r17
    a304:	88005816 	blt	r17,zero,a468 <_realloc_r+0x1cc>
    a308:	8c805736 	bltu	r17,r18,a468 <_realloc_r+0x1cc>
    a30c:	80c0300e 	bge	r16,r3,a3d0 <_realloc_r+0x134>
    a310:	07000074 	movhi	fp,1
    a314:	e7097504 	addi	fp,fp,9684
    a318:	e1c00217 	ldw	r7,8(fp)
    a31c:	9c09883a 	add	r4,r19,r16
    a320:	22000117 	ldw	r8,4(r4)
    a324:	21c06326 	beq	r4,r7,a4b4 <_realloc_r+0x218>
    a328:	017fff84 	movi	r5,-2
    a32c:	414a703a 	and	r5,r8,r5
    a330:	214b883a 	add	r5,r4,r5
    a334:	29800117 	ldw	r6,4(r5)
    a338:	3180004c 	andi	r6,r6,1
    a33c:	30003f26 	beq	r6,zero,a43c <_realloc_r+0x1a0>
    a340:	1080004c 	andi	r2,r2,1
    a344:	10008326 	beq	r2,zero,a554 <_realloc_r+0x2b8>
    a348:	900b883a 	mov	r5,r18
    a34c:	a009883a 	mov	r4,r20
    a350:	00033b40 	call	33b4 <_malloc_r>
    a354:	1025883a 	mov	r18,r2
    a358:	10011e26 	beq	r2,zero,a7d4 <_realloc_r+0x538>
    a35c:	a93fff17 	ldw	r4,-4(r21)
    a360:	10fffe04 	addi	r3,r2,-8
    a364:	00bfff84 	movi	r2,-2
    a368:	2084703a 	and	r2,r4,r2
    a36c:	9885883a 	add	r2,r19,r2
    a370:	1880ee26 	beq	r3,r2,a72c <_realloc_r+0x490>
    a374:	81bfff04 	addi	r6,r16,-4
    a378:	00800904 	movi	r2,36
    a37c:	1180b836 	bltu	r2,r6,a660 <_realloc_r+0x3c4>
    a380:	00c004c4 	movi	r3,19
    a384:	19809636 	bltu	r3,r6,a5e0 <_realloc_r+0x344>
    a388:	9005883a 	mov	r2,r18
    a38c:	a807883a 	mov	r3,r21
    a390:	19000017 	ldw	r4,0(r3)
    a394:	11000015 	stw	r4,0(r2)
    a398:	19000117 	ldw	r4,4(r3)
    a39c:	11000115 	stw	r4,4(r2)
    a3a0:	18c00217 	ldw	r3,8(r3)
    a3a4:	10c00215 	stw	r3,8(r2)
    a3a8:	a80b883a 	mov	r5,r21
    a3ac:	a009883a 	mov	r4,r20
    a3b0:	00082040 	call	8204 <_free_r>
    a3b4:	a009883a 	mov	r4,r20
    a3b8:	000f99c0 	call	f99c <__malloc_unlock>
    a3bc:	9005883a 	mov	r2,r18
    a3c0:	00001206 	br	a40c <_realloc_r+0x170>
    a3c4:	00c00404 	movi	r3,16
    a3c8:	1823883a 	mov	r17,r3
    a3cc:	003fce06 	br	a308 <__alt_data_end+0xff00a308>
    a3d0:	a825883a 	mov	r18,r21
    a3d4:	8445c83a 	sub	r2,r16,r17
    a3d8:	00c003c4 	movi	r3,15
    a3dc:	18802636 	bltu	r3,r2,a478 <_realloc_r+0x1dc>
    a3e0:	99800117 	ldw	r6,4(r19)
    a3e4:	9c07883a 	add	r3,r19,r16
    a3e8:	3180004c 	andi	r6,r6,1
    a3ec:	3420b03a 	or	r16,r6,r16
    a3f0:	9c000115 	stw	r16,4(r19)
    a3f4:	18800117 	ldw	r2,4(r3)
    a3f8:	10800054 	ori	r2,r2,1
    a3fc:	18800115 	stw	r2,4(r3)
    a400:	a009883a 	mov	r4,r20
    a404:	000f99c0 	call	f99c <__malloc_unlock>
    a408:	9005883a 	mov	r2,r18
    a40c:	dfc00917 	ldw	ra,36(sp)
    a410:	df000817 	ldw	fp,32(sp)
    a414:	ddc00717 	ldw	r23,28(sp)
    a418:	dd800617 	ldw	r22,24(sp)
    a41c:	dd400517 	ldw	r21,20(sp)
    a420:	dd000417 	ldw	r20,16(sp)
    a424:	dcc00317 	ldw	r19,12(sp)
    a428:	dc800217 	ldw	r18,8(sp)
    a42c:	dc400117 	ldw	r17,4(sp)
    a430:	dc000017 	ldw	r16,0(sp)
    a434:	dec00a04 	addi	sp,sp,40
    a438:	f800283a 	ret
    a43c:	017fff04 	movi	r5,-4
    a440:	414a703a 	and	r5,r8,r5
    a444:	814d883a 	add	r6,r16,r5
    a448:	30c01f16 	blt	r6,r3,a4c8 <_realloc_r+0x22c>
    a44c:	20800317 	ldw	r2,12(r4)
    a450:	20c00217 	ldw	r3,8(r4)
    a454:	a825883a 	mov	r18,r21
    a458:	3021883a 	mov	r16,r6
    a45c:	18800315 	stw	r2,12(r3)
    a460:	10c00215 	stw	r3,8(r2)
    a464:	003fdb06 	br	a3d4 <__alt_data_end+0xff00a3d4>
    a468:	00800304 	movi	r2,12
    a46c:	a0800015 	stw	r2,0(r20)
    a470:	0005883a 	mov	r2,zero
    a474:	003fe506 	br	a40c <__alt_data_end+0xff00a40c>
    a478:	98c00117 	ldw	r3,4(r19)
    a47c:	9c4b883a 	add	r5,r19,r17
    a480:	11000054 	ori	r4,r2,1
    a484:	18c0004c 	andi	r3,r3,1
    a488:	1c62b03a 	or	r17,r3,r17
    a48c:	9c400115 	stw	r17,4(r19)
    a490:	29000115 	stw	r4,4(r5)
    a494:	2885883a 	add	r2,r5,r2
    a498:	10c00117 	ldw	r3,4(r2)
    a49c:	29400204 	addi	r5,r5,8
    a4a0:	a009883a 	mov	r4,r20
    a4a4:	18c00054 	ori	r3,r3,1
    a4a8:	10c00115 	stw	r3,4(r2)
    a4ac:	00082040 	call	8204 <_free_r>
    a4b0:	003fd306 	br	a400 <__alt_data_end+0xff00a400>
    a4b4:	017fff04 	movi	r5,-4
    a4b8:	414a703a 	and	r5,r8,r5
    a4bc:	89800404 	addi	r6,r17,16
    a4c0:	8151883a 	add	r8,r16,r5
    a4c4:	4180590e 	bge	r8,r6,a62c <_realloc_r+0x390>
    a4c8:	1080004c 	andi	r2,r2,1
    a4cc:	103f9e1e 	bne	r2,zero,a348 <__alt_data_end+0xff00a348>
    a4d0:	adbffe17 	ldw	r22,-8(r21)
    a4d4:	00bfff04 	movi	r2,-4
    a4d8:	9dadc83a 	sub	r22,r19,r22
    a4dc:	b1800117 	ldw	r6,4(r22)
    a4e0:	3084703a 	and	r2,r6,r2
    a4e4:	20002026 	beq	r4,zero,a568 <_realloc_r+0x2cc>
    a4e8:	80af883a 	add	r23,r16,r2
    a4ec:	b96f883a 	add	r23,r23,r5
    a4f0:	21c05f26 	beq	r4,r7,a670 <_realloc_r+0x3d4>
    a4f4:	b8c01c16 	blt	r23,r3,a568 <_realloc_r+0x2cc>
    a4f8:	20800317 	ldw	r2,12(r4)
    a4fc:	20c00217 	ldw	r3,8(r4)
    a500:	81bfff04 	addi	r6,r16,-4
    a504:	01000904 	movi	r4,36
    a508:	18800315 	stw	r2,12(r3)
    a50c:	10c00215 	stw	r3,8(r2)
    a510:	b0c00217 	ldw	r3,8(r22)
    a514:	b0800317 	ldw	r2,12(r22)
    a518:	b4800204 	addi	r18,r22,8
    a51c:	18800315 	stw	r2,12(r3)
    a520:	10c00215 	stw	r3,8(r2)
    a524:	21801b36 	bltu	r4,r6,a594 <_realloc_r+0x2f8>
    a528:	008004c4 	movi	r2,19
    a52c:	1180352e 	bgeu	r2,r6,a604 <_realloc_r+0x368>
    a530:	a8800017 	ldw	r2,0(r21)
    a534:	b0800215 	stw	r2,8(r22)
    a538:	a8800117 	ldw	r2,4(r21)
    a53c:	b0800315 	stw	r2,12(r22)
    a540:	008006c4 	movi	r2,27
    a544:	11807f36 	bltu	r2,r6,a744 <_realloc_r+0x4a8>
    a548:	b0800404 	addi	r2,r22,16
    a54c:	ad400204 	addi	r21,r21,8
    a550:	00002d06 	br	a608 <_realloc_r+0x36c>
    a554:	adbffe17 	ldw	r22,-8(r21)
    a558:	00bfff04 	movi	r2,-4
    a55c:	9dadc83a 	sub	r22,r19,r22
    a560:	b1000117 	ldw	r4,4(r22)
    a564:	2084703a 	and	r2,r4,r2
    a568:	b03f7726 	beq	r22,zero,a348 <__alt_data_end+0xff00a348>
    a56c:	80af883a 	add	r23,r16,r2
    a570:	b8ff7516 	blt	r23,r3,a348 <__alt_data_end+0xff00a348>
    a574:	b0800317 	ldw	r2,12(r22)
    a578:	b0c00217 	ldw	r3,8(r22)
    a57c:	81bfff04 	addi	r6,r16,-4
    a580:	01000904 	movi	r4,36
    a584:	18800315 	stw	r2,12(r3)
    a588:	10c00215 	stw	r3,8(r2)
    a58c:	b4800204 	addi	r18,r22,8
    a590:	21bfe52e 	bgeu	r4,r6,a528 <__alt_data_end+0xff00a528>
    a594:	a80b883a 	mov	r5,r21
    a598:	9009883a 	mov	r4,r18
    a59c:	000901c0 	call	901c <memmove>
    a5a0:	b821883a 	mov	r16,r23
    a5a4:	b027883a 	mov	r19,r22
    a5a8:	003f8a06 	br	a3d4 <__alt_data_end+0xff00a3d4>
    a5ac:	300b883a 	mov	r5,r6
    a5b0:	dfc00917 	ldw	ra,36(sp)
    a5b4:	df000817 	ldw	fp,32(sp)
    a5b8:	ddc00717 	ldw	r23,28(sp)
    a5bc:	dd800617 	ldw	r22,24(sp)
    a5c0:	dd400517 	ldw	r21,20(sp)
    a5c4:	dd000417 	ldw	r20,16(sp)
    a5c8:	dcc00317 	ldw	r19,12(sp)
    a5cc:	dc800217 	ldw	r18,8(sp)
    a5d0:	dc400117 	ldw	r17,4(sp)
    a5d4:	dc000017 	ldw	r16,0(sp)
    a5d8:	dec00a04 	addi	sp,sp,40
    a5dc:	00033b41 	jmpi	33b4 <_malloc_r>
    a5e0:	a8c00017 	ldw	r3,0(r21)
    a5e4:	90c00015 	stw	r3,0(r18)
    a5e8:	a8c00117 	ldw	r3,4(r21)
    a5ec:	90c00115 	stw	r3,4(r18)
    a5f0:	00c006c4 	movi	r3,27
    a5f4:	19804536 	bltu	r3,r6,a70c <_realloc_r+0x470>
    a5f8:	90800204 	addi	r2,r18,8
    a5fc:	a8c00204 	addi	r3,r21,8
    a600:	003f6306 	br	a390 <__alt_data_end+0xff00a390>
    a604:	9005883a 	mov	r2,r18
    a608:	a8c00017 	ldw	r3,0(r21)
    a60c:	b821883a 	mov	r16,r23
    a610:	b027883a 	mov	r19,r22
    a614:	10c00015 	stw	r3,0(r2)
    a618:	a8c00117 	ldw	r3,4(r21)
    a61c:	10c00115 	stw	r3,4(r2)
    a620:	a8c00217 	ldw	r3,8(r21)
    a624:	10c00215 	stw	r3,8(r2)
    a628:	003f6a06 	br	a3d4 <__alt_data_end+0xff00a3d4>
    a62c:	9c67883a 	add	r19,r19,r17
    a630:	4445c83a 	sub	r2,r8,r17
    a634:	e4c00215 	stw	r19,8(fp)
    a638:	10800054 	ori	r2,r2,1
    a63c:	98800115 	stw	r2,4(r19)
    a640:	a8bfff17 	ldw	r2,-4(r21)
    a644:	a009883a 	mov	r4,r20
    a648:	1080004c 	andi	r2,r2,1
    a64c:	1462b03a 	or	r17,r2,r17
    a650:	ac7fff15 	stw	r17,-4(r21)
    a654:	000f99c0 	call	f99c <__malloc_unlock>
    a658:	a805883a 	mov	r2,r21
    a65c:	003f6b06 	br	a40c <__alt_data_end+0xff00a40c>
    a660:	a80b883a 	mov	r5,r21
    a664:	9009883a 	mov	r4,r18
    a668:	000901c0 	call	901c <memmove>
    a66c:	003f4e06 	br	a3a8 <__alt_data_end+0xff00a3a8>
    a670:	89000404 	addi	r4,r17,16
    a674:	b93fbc16 	blt	r23,r4,a568 <__alt_data_end+0xff00a568>
    a678:	b0800317 	ldw	r2,12(r22)
    a67c:	b0c00217 	ldw	r3,8(r22)
    a680:	81bfff04 	addi	r6,r16,-4
    a684:	01000904 	movi	r4,36
    a688:	18800315 	stw	r2,12(r3)
    a68c:	10c00215 	stw	r3,8(r2)
    a690:	b4800204 	addi	r18,r22,8
    a694:	21804336 	bltu	r4,r6,a7a4 <_realloc_r+0x508>
    a698:	008004c4 	movi	r2,19
    a69c:	11803f2e 	bgeu	r2,r6,a79c <_realloc_r+0x500>
    a6a0:	a8800017 	ldw	r2,0(r21)
    a6a4:	b0800215 	stw	r2,8(r22)
    a6a8:	a8800117 	ldw	r2,4(r21)
    a6ac:	b0800315 	stw	r2,12(r22)
    a6b0:	008006c4 	movi	r2,27
    a6b4:	11803f36 	bltu	r2,r6,a7b4 <_realloc_r+0x518>
    a6b8:	b0800404 	addi	r2,r22,16
    a6bc:	ad400204 	addi	r21,r21,8
    a6c0:	a8c00017 	ldw	r3,0(r21)
    a6c4:	10c00015 	stw	r3,0(r2)
    a6c8:	a8c00117 	ldw	r3,4(r21)
    a6cc:	10c00115 	stw	r3,4(r2)
    a6d0:	a8c00217 	ldw	r3,8(r21)
    a6d4:	10c00215 	stw	r3,8(r2)
    a6d8:	b447883a 	add	r3,r22,r17
    a6dc:	bc45c83a 	sub	r2,r23,r17
    a6e0:	e0c00215 	stw	r3,8(fp)
    a6e4:	10800054 	ori	r2,r2,1
    a6e8:	18800115 	stw	r2,4(r3)
    a6ec:	b0800117 	ldw	r2,4(r22)
    a6f0:	a009883a 	mov	r4,r20
    a6f4:	1080004c 	andi	r2,r2,1
    a6f8:	1462b03a 	or	r17,r2,r17
    a6fc:	b4400115 	stw	r17,4(r22)
    a700:	000f99c0 	call	f99c <__malloc_unlock>
    a704:	9005883a 	mov	r2,r18
    a708:	003f4006 	br	a40c <__alt_data_end+0xff00a40c>
    a70c:	a8c00217 	ldw	r3,8(r21)
    a710:	90c00215 	stw	r3,8(r18)
    a714:	a8c00317 	ldw	r3,12(r21)
    a718:	90c00315 	stw	r3,12(r18)
    a71c:	30801126 	beq	r6,r2,a764 <_realloc_r+0x4c8>
    a720:	90800404 	addi	r2,r18,16
    a724:	a8c00404 	addi	r3,r21,16
    a728:	003f1906 	br	a390 <__alt_data_end+0xff00a390>
    a72c:	90ffff17 	ldw	r3,-4(r18)
    a730:	00bfff04 	movi	r2,-4
    a734:	a825883a 	mov	r18,r21
    a738:	1884703a 	and	r2,r3,r2
    a73c:	80a1883a 	add	r16,r16,r2
    a740:	003f2406 	br	a3d4 <__alt_data_end+0xff00a3d4>
    a744:	a8800217 	ldw	r2,8(r21)
    a748:	b0800415 	stw	r2,16(r22)
    a74c:	a8800317 	ldw	r2,12(r21)
    a750:	b0800515 	stw	r2,20(r22)
    a754:	31000a26 	beq	r6,r4,a780 <_realloc_r+0x4e4>
    a758:	b0800604 	addi	r2,r22,24
    a75c:	ad400404 	addi	r21,r21,16
    a760:	003fa906 	br	a608 <__alt_data_end+0xff00a608>
    a764:	a9000417 	ldw	r4,16(r21)
    a768:	90800604 	addi	r2,r18,24
    a76c:	a8c00604 	addi	r3,r21,24
    a770:	91000415 	stw	r4,16(r18)
    a774:	a9000517 	ldw	r4,20(r21)
    a778:	91000515 	stw	r4,20(r18)
    a77c:	003f0406 	br	a390 <__alt_data_end+0xff00a390>
    a780:	a8c00417 	ldw	r3,16(r21)
    a784:	ad400604 	addi	r21,r21,24
    a788:	b0800804 	addi	r2,r22,32
    a78c:	b0c00615 	stw	r3,24(r22)
    a790:	a8ffff17 	ldw	r3,-4(r21)
    a794:	b0c00715 	stw	r3,28(r22)
    a798:	003f9b06 	br	a608 <__alt_data_end+0xff00a608>
    a79c:	9005883a 	mov	r2,r18
    a7a0:	003fc706 	br	a6c0 <__alt_data_end+0xff00a6c0>
    a7a4:	a80b883a 	mov	r5,r21
    a7a8:	9009883a 	mov	r4,r18
    a7ac:	000901c0 	call	901c <memmove>
    a7b0:	003fc906 	br	a6d8 <__alt_data_end+0xff00a6d8>
    a7b4:	a8800217 	ldw	r2,8(r21)
    a7b8:	b0800415 	stw	r2,16(r22)
    a7bc:	a8800317 	ldw	r2,12(r21)
    a7c0:	b0800515 	stw	r2,20(r22)
    a7c4:	31000726 	beq	r6,r4,a7e4 <_realloc_r+0x548>
    a7c8:	b0800604 	addi	r2,r22,24
    a7cc:	ad400404 	addi	r21,r21,16
    a7d0:	003fbb06 	br	a6c0 <__alt_data_end+0xff00a6c0>
    a7d4:	a009883a 	mov	r4,r20
    a7d8:	000f99c0 	call	f99c <__malloc_unlock>
    a7dc:	0005883a 	mov	r2,zero
    a7e0:	003f0a06 	br	a40c <__alt_data_end+0xff00a40c>
    a7e4:	a8c00417 	ldw	r3,16(r21)
    a7e8:	ad400604 	addi	r21,r21,24
    a7ec:	b0800804 	addi	r2,r22,32
    a7f0:	b0c00615 	stw	r3,24(r22)
    a7f4:	a8ffff17 	ldw	r3,-4(r21)
    a7f8:	b0c00715 	stw	r3,28(r22)
    a7fc:	003fb006 	br	a6c0 <__alt_data_end+0xff00a6c0>

0000a800 <__fpclassifyd>:
    a800:	00a00034 	movhi	r2,32768
    a804:	10bfffc4 	addi	r2,r2,-1
    a808:	2884703a 	and	r2,r5,r2
    a80c:	10000726 	beq	r2,zero,a82c <__fpclassifyd+0x2c>
    a810:	00fffc34 	movhi	r3,65520
    a814:	019ff834 	movhi	r6,32736
    a818:	28c7883a 	add	r3,r5,r3
    a81c:	31bfffc4 	addi	r6,r6,-1
    a820:	30c00536 	bltu	r6,r3,a838 <__fpclassifyd+0x38>
    a824:	00800104 	movi	r2,4
    a828:	f800283a 	ret
    a82c:	2000021e 	bne	r4,zero,a838 <__fpclassifyd+0x38>
    a830:	00800084 	movi	r2,2
    a834:	f800283a 	ret
    a838:	00dffc34 	movhi	r3,32752
    a83c:	019ff834 	movhi	r6,32736
    a840:	28cb883a 	add	r5,r5,r3
    a844:	31bfffc4 	addi	r6,r6,-1
    a848:	317ff62e 	bgeu	r6,r5,a824 <__alt_data_end+0xff00a824>
    a84c:	01400434 	movhi	r5,16
    a850:	297fffc4 	addi	r5,r5,-1
    a854:	28800236 	bltu	r5,r2,a860 <__fpclassifyd+0x60>
    a858:	008000c4 	movi	r2,3
    a85c:	f800283a 	ret
    a860:	10c00226 	beq	r2,r3,a86c <__fpclassifyd+0x6c>
    a864:	0005883a 	mov	r2,zero
    a868:	f800283a 	ret
    a86c:	2005003a 	cmpeq	r2,r4,zero
    a870:	f800283a 	ret

0000a874 <__sread>:
    a874:	defffe04 	addi	sp,sp,-8
    a878:	dc000015 	stw	r16,0(sp)
    a87c:	2821883a 	mov	r16,r5
    a880:	2940038f 	ldh	r5,14(r5)
    a884:	dfc00115 	stw	ra,4(sp)
    a888:	000c6680 	call	c668 <_read_r>
    a88c:	10000716 	blt	r2,zero,a8ac <__sread+0x38>
    a890:	80c01417 	ldw	r3,80(r16)
    a894:	1887883a 	add	r3,r3,r2
    a898:	80c01415 	stw	r3,80(r16)
    a89c:	dfc00117 	ldw	ra,4(sp)
    a8a0:	dc000017 	ldw	r16,0(sp)
    a8a4:	dec00204 	addi	sp,sp,8
    a8a8:	f800283a 	ret
    a8ac:	80c0030b 	ldhu	r3,12(r16)
    a8b0:	18fbffcc 	andi	r3,r3,61439
    a8b4:	80c0030d 	sth	r3,12(r16)
    a8b8:	dfc00117 	ldw	ra,4(sp)
    a8bc:	dc000017 	ldw	r16,0(sp)
    a8c0:	dec00204 	addi	sp,sp,8
    a8c4:	f800283a 	ret

0000a8c8 <__seofread>:
    a8c8:	0005883a 	mov	r2,zero
    a8cc:	f800283a 	ret

0000a8d0 <__swrite>:
    a8d0:	2880030b 	ldhu	r2,12(r5)
    a8d4:	defffb04 	addi	sp,sp,-20
    a8d8:	dcc00315 	stw	r19,12(sp)
    a8dc:	dc800215 	stw	r18,8(sp)
    a8e0:	dc400115 	stw	r17,4(sp)
    a8e4:	dc000015 	stw	r16,0(sp)
    a8e8:	dfc00415 	stw	ra,16(sp)
    a8ec:	10c0400c 	andi	r3,r2,256
    a8f0:	2821883a 	mov	r16,r5
    a8f4:	2023883a 	mov	r17,r4
    a8f8:	3025883a 	mov	r18,r6
    a8fc:	3827883a 	mov	r19,r7
    a900:	18000526 	beq	r3,zero,a918 <__swrite+0x48>
    a904:	2940038f 	ldh	r5,14(r5)
    a908:	01c00084 	movi	r7,2
    a90c:	000d883a 	mov	r6,zero
    a910:	000c6080 	call	c608 <_lseek_r>
    a914:	8080030b 	ldhu	r2,12(r16)
    a918:	8140038f 	ldh	r5,14(r16)
    a91c:	10bbffcc 	andi	r2,r2,61439
    a920:	980f883a 	mov	r7,r19
    a924:	900d883a 	mov	r6,r18
    a928:	8809883a 	mov	r4,r17
    a92c:	8080030d 	sth	r2,12(r16)
    a930:	dfc00417 	ldw	ra,16(sp)
    a934:	dcc00317 	ldw	r19,12(sp)
    a938:	dc800217 	ldw	r18,8(sp)
    a93c:	dc400117 	ldw	r17,4(sp)
    a940:	dc000017 	ldw	r16,0(sp)
    a944:	dec00504 	addi	sp,sp,20
    a948:	000c0d41 	jmpi	c0d4 <_write_r>

0000a94c <__sseek>:
    a94c:	defffe04 	addi	sp,sp,-8
    a950:	dc000015 	stw	r16,0(sp)
    a954:	2821883a 	mov	r16,r5
    a958:	2940038f 	ldh	r5,14(r5)
    a95c:	dfc00115 	stw	ra,4(sp)
    a960:	000c6080 	call	c608 <_lseek_r>
    a964:	00ffffc4 	movi	r3,-1
    a968:	10c00826 	beq	r2,r3,a98c <__sseek+0x40>
    a96c:	80c0030b 	ldhu	r3,12(r16)
    a970:	80801415 	stw	r2,80(r16)
    a974:	18c40014 	ori	r3,r3,4096
    a978:	80c0030d 	sth	r3,12(r16)
    a97c:	dfc00117 	ldw	ra,4(sp)
    a980:	dc000017 	ldw	r16,0(sp)
    a984:	dec00204 	addi	sp,sp,8
    a988:	f800283a 	ret
    a98c:	80c0030b 	ldhu	r3,12(r16)
    a990:	18fbffcc 	andi	r3,r3,61439
    a994:	80c0030d 	sth	r3,12(r16)
    a998:	dfc00117 	ldw	ra,4(sp)
    a99c:	dc000017 	ldw	r16,0(sp)
    a9a0:	dec00204 	addi	sp,sp,8
    a9a4:	f800283a 	ret

0000a9a8 <__sclose>:
    a9a8:	2940038f 	ldh	r5,14(r5)
    a9ac:	000c1341 	jmpi	c134 <_close_r>

0000a9b0 <strcmp>:
    a9b0:	2144b03a 	or	r2,r4,r5
    a9b4:	108000cc 	andi	r2,r2,3
    a9b8:	1000171e 	bne	r2,zero,aa18 <strcmp+0x68>
    a9bc:	20800017 	ldw	r2,0(r4)
    a9c0:	28c00017 	ldw	r3,0(r5)
    a9c4:	10c0141e 	bne	r2,r3,aa18 <strcmp+0x68>
    a9c8:	027fbff4 	movhi	r9,65279
    a9cc:	4a7fbfc4 	addi	r9,r9,-257
    a9d0:	0086303a 	nor	r3,zero,r2
    a9d4:	02202074 	movhi	r8,32897
    a9d8:	1245883a 	add	r2,r2,r9
    a9dc:	42202004 	addi	r8,r8,-32640
    a9e0:	10c4703a 	and	r2,r2,r3
    a9e4:	1204703a 	and	r2,r2,r8
    a9e8:	10000226 	beq	r2,zero,a9f4 <strcmp+0x44>
    a9ec:	00002306 	br	aa7c <strcmp+0xcc>
    a9f0:	1000221e 	bne	r2,zero,aa7c <strcmp+0xcc>
    a9f4:	21000104 	addi	r4,r4,4
    a9f8:	20c00017 	ldw	r3,0(r4)
    a9fc:	29400104 	addi	r5,r5,4
    aa00:	29800017 	ldw	r6,0(r5)
    aa04:	1a4f883a 	add	r7,r3,r9
    aa08:	00c4303a 	nor	r2,zero,r3
    aa0c:	3884703a 	and	r2,r7,r2
    aa10:	1204703a 	and	r2,r2,r8
    aa14:	19bff626 	beq	r3,r6,a9f0 <__alt_data_end+0xff00a9f0>
    aa18:	20800003 	ldbu	r2,0(r4)
    aa1c:	10c03fcc 	andi	r3,r2,255
    aa20:	18c0201c 	xori	r3,r3,128
    aa24:	18ffe004 	addi	r3,r3,-128
    aa28:	18000c26 	beq	r3,zero,aa5c <strcmp+0xac>
    aa2c:	29800007 	ldb	r6,0(r5)
    aa30:	19800326 	beq	r3,r6,aa40 <strcmp+0x90>
    aa34:	00001306 	br	aa84 <strcmp+0xd4>
    aa38:	29800007 	ldb	r6,0(r5)
    aa3c:	11800b1e 	bne	r2,r6,aa6c <strcmp+0xbc>
    aa40:	21000044 	addi	r4,r4,1
    aa44:	20c00003 	ldbu	r3,0(r4)
    aa48:	29400044 	addi	r5,r5,1
    aa4c:	18803fcc 	andi	r2,r3,255
    aa50:	1080201c 	xori	r2,r2,128
    aa54:	10bfe004 	addi	r2,r2,-128
    aa58:	103ff71e 	bne	r2,zero,aa38 <__alt_data_end+0xff00aa38>
    aa5c:	0007883a 	mov	r3,zero
    aa60:	28800003 	ldbu	r2,0(r5)
    aa64:	1885c83a 	sub	r2,r3,r2
    aa68:	f800283a 	ret
    aa6c:	28800003 	ldbu	r2,0(r5)
    aa70:	18c03fcc 	andi	r3,r3,255
    aa74:	1885c83a 	sub	r2,r3,r2
    aa78:	f800283a 	ret
    aa7c:	0005883a 	mov	r2,zero
    aa80:	f800283a 	ret
    aa84:	10c03fcc 	andi	r3,r2,255
    aa88:	003ff506 	br	aa60 <__alt_data_end+0xff00aa60>

0000aa8c <__sprint_r.part.0>:
    aa8c:	28801917 	ldw	r2,100(r5)
    aa90:	defff604 	addi	sp,sp,-40
    aa94:	dd400515 	stw	r21,20(sp)
    aa98:	dfc00915 	stw	ra,36(sp)
    aa9c:	df000815 	stw	fp,32(sp)
    aaa0:	ddc00715 	stw	r23,28(sp)
    aaa4:	dd800615 	stw	r22,24(sp)
    aaa8:	dd000415 	stw	r20,16(sp)
    aaac:	dcc00315 	stw	r19,12(sp)
    aab0:	dc800215 	stw	r18,8(sp)
    aab4:	dc400115 	stw	r17,4(sp)
    aab8:	dc000015 	stw	r16,0(sp)
    aabc:	1088000c 	andi	r2,r2,8192
    aac0:	302b883a 	mov	r21,r6
    aac4:	10002e26 	beq	r2,zero,ab80 <__sprint_r.part.0+0xf4>
    aac8:	30800217 	ldw	r2,8(r6)
    aacc:	35800017 	ldw	r22,0(r6)
    aad0:	10002926 	beq	r2,zero,ab78 <__sprint_r.part.0+0xec>
    aad4:	2827883a 	mov	r19,r5
    aad8:	2029883a 	mov	r20,r4
    aadc:	b5c00104 	addi	r23,r22,4
    aae0:	04bfffc4 	movi	r18,-1
    aae4:	bc400017 	ldw	r17,0(r23)
    aae8:	b4000017 	ldw	r16,0(r22)
    aaec:	0039883a 	mov	fp,zero
    aaf0:	8822d0ba 	srli	r17,r17,2
    aaf4:	8800031e 	bne	r17,zero,ab04 <__sprint_r.part.0+0x78>
    aaf8:	00001806 	br	ab5c <__sprint_r.part.0+0xd0>
    aafc:	84000104 	addi	r16,r16,4
    ab00:	8f001526 	beq	r17,fp,ab58 <__sprint_r.part.0+0xcc>
    ab04:	81400017 	ldw	r5,0(r16)
    ab08:	980d883a 	mov	r6,r19
    ab0c:	a009883a 	mov	r4,r20
    ab10:	000c4b40 	call	c4b4 <_fputwc_r>
    ab14:	e7000044 	addi	fp,fp,1
    ab18:	14bff81e 	bne	r2,r18,aafc <__alt_data_end+0xff00aafc>
    ab1c:	9005883a 	mov	r2,r18
    ab20:	a8000215 	stw	zero,8(r21)
    ab24:	a8000115 	stw	zero,4(r21)
    ab28:	dfc00917 	ldw	ra,36(sp)
    ab2c:	df000817 	ldw	fp,32(sp)
    ab30:	ddc00717 	ldw	r23,28(sp)
    ab34:	dd800617 	ldw	r22,24(sp)
    ab38:	dd400517 	ldw	r21,20(sp)
    ab3c:	dd000417 	ldw	r20,16(sp)
    ab40:	dcc00317 	ldw	r19,12(sp)
    ab44:	dc800217 	ldw	r18,8(sp)
    ab48:	dc400117 	ldw	r17,4(sp)
    ab4c:	dc000017 	ldw	r16,0(sp)
    ab50:	dec00a04 	addi	sp,sp,40
    ab54:	f800283a 	ret
    ab58:	a8800217 	ldw	r2,8(r21)
    ab5c:	8c63883a 	add	r17,r17,r17
    ab60:	8c63883a 	add	r17,r17,r17
    ab64:	1445c83a 	sub	r2,r2,r17
    ab68:	a8800215 	stw	r2,8(r21)
    ab6c:	b5800204 	addi	r22,r22,8
    ab70:	bdc00204 	addi	r23,r23,8
    ab74:	103fdb1e 	bne	r2,zero,aae4 <__alt_data_end+0xff00aae4>
    ab78:	0005883a 	mov	r2,zero
    ab7c:	003fe806 	br	ab20 <__alt_data_end+0xff00ab20>
    ab80:	00085140 	call	8514 <__sfvwrite_r>
    ab84:	003fe606 	br	ab20 <__alt_data_end+0xff00ab20>

0000ab88 <__sprint_r>:
    ab88:	30c00217 	ldw	r3,8(r6)
    ab8c:	18000126 	beq	r3,zero,ab94 <__sprint_r+0xc>
    ab90:	000aa8c1 	jmpi	aa8c <__sprint_r.part.0>
    ab94:	30000115 	stw	zero,4(r6)
    ab98:	0005883a 	mov	r2,zero
    ab9c:	f800283a 	ret

0000aba0 <___vfiprintf_internal_r>:
    aba0:	deffc904 	addi	sp,sp,-220
    aba4:	df003515 	stw	fp,212(sp)
    aba8:	dd003115 	stw	r20,196(sp)
    abac:	dfc03615 	stw	ra,216(sp)
    abb0:	ddc03415 	stw	r23,208(sp)
    abb4:	dd803315 	stw	r22,204(sp)
    abb8:	dd403215 	stw	r21,200(sp)
    abbc:	dcc03015 	stw	r19,192(sp)
    abc0:	dc802f15 	stw	r18,188(sp)
    abc4:	dc402e15 	stw	r17,184(sp)
    abc8:	dc002d15 	stw	r16,180(sp)
    abcc:	d9002015 	stw	r4,128(sp)
    abd0:	d9c02215 	stw	r7,136(sp)
    abd4:	2829883a 	mov	r20,r5
    abd8:	3039883a 	mov	fp,r6
    abdc:	20000226 	beq	r4,zero,abe8 <___vfiprintf_internal_r+0x48>
    abe0:	20800e17 	ldw	r2,56(r4)
    abe4:	1000cf26 	beq	r2,zero,af24 <___vfiprintf_internal_r+0x384>
    abe8:	a080030b 	ldhu	r2,12(r20)
    abec:	10c8000c 	andi	r3,r2,8192
    abf0:	1800061e 	bne	r3,zero,ac0c <___vfiprintf_internal_r+0x6c>
    abf4:	a1001917 	ldw	r4,100(r20)
    abf8:	00f7ffc4 	movi	r3,-8193
    abfc:	10880014 	ori	r2,r2,8192
    ac00:	20c6703a 	and	r3,r4,r3
    ac04:	a080030d 	sth	r2,12(r20)
    ac08:	a0c01915 	stw	r3,100(r20)
    ac0c:	10c0020c 	andi	r3,r2,8
    ac10:	1800a926 	beq	r3,zero,aeb8 <___vfiprintf_internal_r+0x318>
    ac14:	a0c00417 	ldw	r3,16(r20)
    ac18:	1800a726 	beq	r3,zero,aeb8 <___vfiprintf_internal_r+0x318>
    ac1c:	1080068c 	andi	r2,r2,26
    ac20:	00c00284 	movi	r3,10
    ac24:	10c0ac26 	beq	r2,r3,aed8 <___vfiprintf_internal_r+0x338>
    ac28:	da801a04 	addi	r10,sp,104
    ac2c:	da801e15 	stw	r10,120(sp)
    ac30:	d8801e17 	ldw	r2,120(sp)
    ac34:	da8019c4 	addi	r10,sp,103
    ac38:	05800074 	movhi	r22,1
    ac3c:	05c00074 	movhi	r23,1
    ac40:	da801f15 	stw	r10,124(sp)
    ac44:	1295c83a 	sub	r10,r2,r10
    ac48:	b5896604 	addi	r22,r22,9624
    ac4c:	bdc96204 	addi	r23,r23,9608
    ac50:	dec01a15 	stw	sp,104(sp)
    ac54:	d8001c15 	stw	zero,112(sp)
    ac58:	d8001b15 	stw	zero,108(sp)
    ac5c:	d8002615 	stw	zero,152(sp)
    ac60:	d8002315 	stw	zero,140(sp)
    ac64:	da802715 	stw	r10,156(sp)
    ac68:	d811883a 	mov	r8,sp
    ac6c:	dd002115 	stw	r20,132(sp)
    ac70:	e021883a 	mov	r16,fp
    ac74:	80800007 	ldb	r2,0(r16)
    ac78:	1003ea26 	beq	r2,zero,bc24 <___vfiprintf_internal_r+0x1084>
    ac7c:	00c00944 	movi	r3,37
    ac80:	8025883a 	mov	r18,r16
    ac84:	10c0021e 	bne	r2,r3,ac90 <___vfiprintf_internal_r+0xf0>
    ac88:	00001606 	br	ace4 <___vfiprintf_internal_r+0x144>
    ac8c:	10c00326 	beq	r2,r3,ac9c <___vfiprintf_internal_r+0xfc>
    ac90:	94800044 	addi	r18,r18,1
    ac94:	90800007 	ldb	r2,0(r18)
    ac98:	103ffc1e 	bne	r2,zero,ac8c <__alt_data_end+0xff00ac8c>
    ac9c:	9423c83a 	sub	r17,r18,r16
    aca0:	88001026 	beq	r17,zero,ace4 <___vfiprintf_internal_r+0x144>
    aca4:	d8c01c17 	ldw	r3,112(sp)
    aca8:	d8801b17 	ldw	r2,108(sp)
    acac:	44000015 	stw	r16,0(r8)
    acb0:	88c7883a 	add	r3,r17,r3
    acb4:	10800044 	addi	r2,r2,1
    acb8:	44400115 	stw	r17,4(r8)
    acbc:	d8c01c15 	stw	r3,112(sp)
    acc0:	d8801b15 	stw	r2,108(sp)
    acc4:	010001c4 	movi	r4,7
    acc8:	2080760e 	bge	r4,r2,aea4 <___vfiprintf_internal_r+0x304>
    accc:	1803821e 	bne	r3,zero,bad8 <___vfiprintf_internal_r+0xf38>
    acd0:	da802317 	ldw	r10,140(sp)
    acd4:	d8001b15 	stw	zero,108(sp)
    acd8:	d811883a 	mov	r8,sp
    acdc:	5455883a 	add	r10,r10,r17
    ace0:	da802315 	stw	r10,140(sp)
    ace4:	90800007 	ldb	r2,0(r18)
    ace8:	10044626 	beq	r2,zero,be04 <___vfiprintf_internal_r+0x1264>
    acec:	90c00047 	ldb	r3,1(r18)
    acf0:	94000044 	addi	r16,r18,1
    acf4:	d8001d85 	stb	zero,118(sp)
    acf8:	0009883a 	mov	r4,zero
    acfc:	000f883a 	mov	r7,zero
    ad00:	027fffc4 	movi	r9,-1
    ad04:	0023883a 	mov	r17,zero
    ad08:	0029883a 	mov	r20,zero
    ad0c:	01401604 	movi	r5,88
    ad10:	01800244 	movi	r6,9
    ad14:	03400a84 	movi	r13,42
    ad18:	03001b04 	movi	r12,108
    ad1c:	84000044 	addi	r16,r16,1
    ad20:	18bff804 	addi	r2,r3,-32
    ad24:	28827336 	bltu	r5,r2,b6f4 <___vfiprintf_internal_r+0xb54>
    ad28:	100490ba 	slli	r2,r2,2
    ad2c:	02800074 	movhi	r10,1
    ad30:	52ab5004 	addi	r10,r10,-21184
    ad34:	1285883a 	add	r2,r2,r10
    ad38:	10800017 	ldw	r2,0(r2)
    ad3c:	1000683a 	jmp	r2
    ad40:	0000b428 	cmpgeui	zero,zero,720
    ad44:	0000b6f4 	movhi	zero,731
    ad48:	0000b6f4 	movhi	zero,731
    ad4c:	0000b448 	cmpgei	zero,zero,721
    ad50:	0000b6f4 	movhi	zero,731
    ad54:	0000b6f4 	movhi	zero,731
    ad58:	0000b6f4 	movhi	zero,731
    ad5c:	0000b6f4 	movhi	zero,731
    ad60:	0000b6f4 	movhi	zero,731
    ad64:	0000b6f4 	movhi	zero,731
    ad68:	0000b630 	cmpltui	zero,zero,728
    ad6c:	0000b64c 	andi	zero,zero,729
    ad70:	0000b6f4 	movhi	zero,731
    ad74:	0000af34 	movhi	zero,700
    ad78:	0000b65c 	xori	zero,zero,729
    ad7c:	0000b6f4 	movhi	zero,731
    ad80:	0000b454 	movui	zero,721
    ad84:	0000b460 	cmpeqi	zero,zero,721
    ad88:	0000b460 	cmpeqi	zero,zero,721
    ad8c:	0000b460 	cmpeqi	zero,zero,721
    ad90:	0000b460 	cmpeqi	zero,zero,721
    ad94:	0000b460 	cmpeqi	zero,zero,721
    ad98:	0000b460 	cmpeqi	zero,zero,721
    ad9c:	0000b460 	cmpeqi	zero,zero,721
    ada0:	0000b460 	cmpeqi	zero,zero,721
    ada4:	0000b460 	cmpeqi	zero,zero,721
    ada8:	0000b6f4 	movhi	zero,731
    adac:	0000b6f4 	movhi	zero,731
    adb0:	0000b6f4 	movhi	zero,731
    adb4:	0000b6f4 	movhi	zero,731
    adb8:	0000b6f4 	movhi	zero,731
    adbc:	0000b6f4 	movhi	zero,731
    adc0:	0000b6f4 	movhi	zero,731
    adc4:	0000b6f4 	movhi	zero,731
    adc8:	0000b6f4 	movhi	zero,731
    adcc:	0000b6f4 	movhi	zero,731
    add0:	0000b48c 	andi	zero,zero,722
    add4:	0000b6f4 	movhi	zero,731
    add8:	0000b6f4 	movhi	zero,731
    addc:	0000b6f4 	movhi	zero,731
    ade0:	0000b6f4 	movhi	zero,731
    ade4:	0000b6f4 	movhi	zero,731
    ade8:	0000b6f4 	movhi	zero,731
    adec:	0000b6f4 	movhi	zero,731
    adf0:	0000b6f4 	movhi	zero,731
    adf4:	0000b6f4 	movhi	zero,731
    adf8:	0000b6f4 	movhi	zero,731
    adfc:	0000b4c4 	movi	zero,723
    ae00:	0000b6f4 	movhi	zero,731
    ae04:	0000b6f4 	movhi	zero,731
    ae08:	0000b6f4 	movhi	zero,731
    ae0c:	0000b6f4 	movhi	zero,731
    ae10:	0000b6f4 	movhi	zero,731
    ae14:	0000b51c 	xori	zero,zero,724
    ae18:	0000b6f4 	movhi	zero,731
    ae1c:	0000b6f4 	movhi	zero,731
    ae20:	0000b58c 	andi	zero,zero,726
    ae24:	0000b6f4 	movhi	zero,731
    ae28:	0000b6f4 	movhi	zero,731
    ae2c:	0000b6f4 	movhi	zero,731
    ae30:	0000b6f4 	movhi	zero,731
    ae34:	0000b6f4 	movhi	zero,731
    ae38:	0000b6f4 	movhi	zero,731
    ae3c:	0000b6f4 	movhi	zero,731
    ae40:	0000b6f4 	movhi	zero,731
    ae44:	0000b6f4 	movhi	zero,731
    ae48:	0000b6f4 	movhi	zero,731
    ae4c:	0000b338 	rdprs	zero,zero,716
    ae50:	0000b364 	muli	zero,zero,717
    ae54:	0000b6f4 	movhi	zero,731
    ae58:	0000b6f4 	movhi	zero,731
    ae5c:	0000b6f4 	movhi	zero,731
    ae60:	0000b69c 	xori	zero,zero,730
    ae64:	0000b364 	muli	zero,zero,717
    ae68:	0000b6f4 	movhi	zero,731
    ae6c:	0000b6f4 	movhi	zero,731
    ae70:	0000b1f8 	rdprs	zero,zero,711
    ae74:	0000b6f4 	movhi	zero,731
    ae78:	0000b208 	cmpgei	zero,zero,712
    ae7c:	0000b244 	movi	zero,713
    ae80:	0000af40 	call	af4 <conv_grayscale+0x40>
    ae84:	0000b1ec 	andhi	zero,zero,711
    ae88:	0000b6f4 	movhi	zero,731
    ae8c:	0000b5c8 	cmpgei	zero,zero,727
    ae90:	0000b6f4 	movhi	zero,731
    ae94:	0000b620 	cmpeqi	zero,zero,728
    ae98:	0000b6f4 	movhi	zero,731
    ae9c:	0000b6f4 	movhi	zero,731
    aea0:	0000b2e4 	muli	zero,zero,715
    aea4:	42000204 	addi	r8,r8,8
    aea8:	da802317 	ldw	r10,140(sp)
    aeac:	5455883a 	add	r10,r10,r17
    aeb0:	da802315 	stw	r10,140(sp)
    aeb4:	003f8b06 	br	ace4 <__alt_data_end+0xff00ace4>
    aeb8:	d9002017 	ldw	r4,128(sp)
    aebc:	a00b883a 	mov	r5,r20
    aec0:	00060bc0 	call	60bc <__swsetup_r>
    aec4:	1003b11e 	bne	r2,zero,bd8c <___vfiprintf_internal_r+0x11ec>
    aec8:	a080030b 	ldhu	r2,12(r20)
    aecc:	00c00284 	movi	r3,10
    aed0:	1080068c 	andi	r2,r2,26
    aed4:	10ff541e 	bne	r2,r3,ac28 <__alt_data_end+0xff00ac28>
    aed8:	a080038f 	ldh	r2,14(r20)
    aedc:	103f5216 	blt	r2,zero,ac28 <__alt_data_end+0xff00ac28>
    aee0:	d9c02217 	ldw	r7,136(sp)
    aee4:	d9002017 	ldw	r4,128(sp)
    aee8:	e00d883a 	mov	r6,fp
    aeec:	a00b883a 	mov	r5,r20
    aef0:	000c0180 	call	c018 <__sbprintf>
    aef4:	dfc03617 	ldw	ra,216(sp)
    aef8:	df003517 	ldw	fp,212(sp)
    aefc:	ddc03417 	ldw	r23,208(sp)
    af00:	dd803317 	ldw	r22,204(sp)
    af04:	dd403217 	ldw	r21,200(sp)
    af08:	dd003117 	ldw	r20,196(sp)
    af0c:	dcc03017 	ldw	r19,192(sp)
    af10:	dc802f17 	ldw	r18,188(sp)
    af14:	dc402e17 	ldw	r17,184(sp)
    af18:	dc002d17 	ldw	r16,180(sp)
    af1c:	dec03704 	addi	sp,sp,220
    af20:	f800283a 	ret
    af24:	00080900 	call	8090 <__sinit>
    af28:	003f2f06 	br	abe8 <__alt_data_end+0xff00abe8>
    af2c:	0463c83a 	sub	r17,zero,r17
    af30:	d8802215 	stw	r2,136(sp)
    af34:	a5000114 	ori	r20,r20,4
    af38:	80c00007 	ldb	r3,0(r16)
    af3c:	003f7706 	br	ad1c <__alt_data_end+0xff00ad1c>
    af40:	00800c04 	movi	r2,48
    af44:	da802217 	ldw	r10,136(sp)
    af48:	d8801d05 	stb	r2,116(sp)
    af4c:	00801e04 	movi	r2,120
    af50:	d8801d45 	stb	r2,117(sp)
    af54:	d8001d85 	stb	zero,118(sp)
    af58:	50c00104 	addi	r3,r10,4
    af5c:	54800017 	ldw	r18,0(r10)
    af60:	0027883a 	mov	r19,zero
    af64:	a0800094 	ori	r2,r20,2
    af68:	48030b16 	blt	r9,zero,bb98 <___vfiprintf_internal_r+0xff8>
    af6c:	00bfdfc4 	movi	r2,-129
    af70:	a096703a 	and	r11,r20,r2
    af74:	d8c02215 	stw	r3,136(sp)
    af78:	5d000094 	ori	r20,r11,2
    af7c:	90032b1e 	bne	r18,zero,bc2c <___vfiprintf_internal_r+0x108c>
    af80:	00800074 	movhi	r2,1
    af84:	10890104 	addi	r2,r2,9220
    af88:	d8802615 	stw	r2,152(sp)
    af8c:	0039883a 	mov	fp,zero
    af90:	48017b1e 	bne	r9,zero,b580 <___vfiprintf_internal_r+0x9e0>
    af94:	0013883a 	mov	r9,zero
    af98:	0027883a 	mov	r19,zero
    af9c:	dd401a04 	addi	r21,sp,104
    afa0:	4825883a 	mov	r18,r9
    afa4:	4cc0010e 	bge	r9,r19,afac <___vfiprintf_internal_r+0x40c>
    afa8:	9825883a 	mov	r18,r19
    afac:	e7003fcc 	andi	fp,fp,255
    afb0:	e700201c 	xori	fp,fp,128
    afb4:	e73fe004 	addi	fp,fp,-128
    afb8:	e0000126 	beq	fp,zero,afc0 <___vfiprintf_internal_r+0x420>
    afbc:	94800044 	addi	r18,r18,1
    afc0:	a380008c 	andi	r14,r20,2
    afc4:	70000126 	beq	r14,zero,afcc <___vfiprintf_internal_r+0x42c>
    afc8:	94800084 	addi	r18,r18,2
    afcc:	a700210c 	andi	fp,r20,132
    afd0:	e001df1e 	bne	fp,zero,b750 <___vfiprintf_internal_r+0xbb0>
    afd4:	8c87c83a 	sub	r3,r17,r18
    afd8:	00c1dd0e 	bge	zero,r3,b750 <___vfiprintf_internal_r+0xbb0>
    afdc:	01c00404 	movi	r7,16
    afe0:	d8801c17 	ldw	r2,112(sp)
    afe4:	38c3ad0e 	bge	r7,r3,be9c <___vfiprintf_internal_r+0x12fc>
    afe8:	02800074 	movhi	r10,1
    afec:	52896604 	addi	r10,r10,9624
    aff0:	dc002915 	stw	r16,164(sp)
    aff4:	d9801b17 	ldw	r6,108(sp)
    aff8:	da802415 	stw	r10,144(sp)
    affc:	03c001c4 	movi	r15,7
    b000:	da402515 	stw	r9,148(sp)
    b004:	db802815 	stw	r14,160(sp)
    b008:	1821883a 	mov	r16,r3
    b00c:	00000506 	br	b024 <___vfiprintf_internal_r+0x484>
    b010:	31400084 	addi	r5,r6,2
    b014:	42000204 	addi	r8,r8,8
    b018:	200d883a 	mov	r6,r4
    b01c:	843ffc04 	addi	r16,r16,-16
    b020:	3c000d0e 	bge	r7,r16,b058 <___vfiprintf_internal_r+0x4b8>
    b024:	10800404 	addi	r2,r2,16
    b028:	31000044 	addi	r4,r6,1
    b02c:	45800015 	stw	r22,0(r8)
    b030:	41c00115 	stw	r7,4(r8)
    b034:	d8801c15 	stw	r2,112(sp)
    b038:	d9001b15 	stw	r4,108(sp)
    b03c:	793ff40e 	bge	r15,r4,b010 <__alt_data_end+0xff00b010>
    b040:	1001b51e 	bne	r2,zero,b718 <___vfiprintf_internal_r+0xb78>
    b044:	843ffc04 	addi	r16,r16,-16
    b048:	000d883a 	mov	r6,zero
    b04c:	01400044 	movi	r5,1
    b050:	d811883a 	mov	r8,sp
    b054:	3c3ff316 	blt	r7,r16,b024 <__alt_data_end+0xff00b024>
    b058:	8007883a 	mov	r3,r16
    b05c:	da402517 	ldw	r9,148(sp)
    b060:	db802817 	ldw	r14,160(sp)
    b064:	dc002917 	ldw	r16,164(sp)
    b068:	da802417 	ldw	r10,144(sp)
    b06c:	1885883a 	add	r2,r3,r2
    b070:	40c00115 	stw	r3,4(r8)
    b074:	42800015 	stw	r10,0(r8)
    b078:	d8801c15 	stw	r2,112(sp)
    b07c:	d9401b15 	stw	r5,108(sp)
    b080:	00c001c4 	movi	r3,7
    b084:	19426016 	blt	r3,r5,ba08 <___vfiprintf_internal_r+0xe68>
    b088:	d8c01d87 	ldb	r3,118(sp)
    b08c:	42000204 	addi	r8,r8,8
    b090:	29000044 	addi	r4,r5,1
    b094:	1801b31e 	bne	r3,zero,b764 <___vfiprintf_internal_r+0xbc4>
    b098:	7001c026 	beq	r14,zero,b79c <___vfiprintf_internal_r+0xbfc>
    b09c:	d8c01d04 	addi	r3,sp,116
    b0a0:	10800084 	addi	r2,r2,2
    b0a4:	40c00015 	stw	r3,0(r8)
    b0a8:	00c00084 	movi	r3,2
    b0ac:	40c00115 	stw	r3,4(r8)
    b0b0:	d8801c15 	stw	r2,112(sp)
    b0b4:	d9001b15 	stw	r4,108(sp)
    b0b8:	00c001c4 	movi	r3,7
    b0bc:	1902650e 	bge	r3,r4,ba54 <___vfiprintf_internal_r+0xeb4>
    b0c0:	10029a1e 	bne	r2,zero,bb2c <___vfiprintf_internal_r+0xf8c>
    b0c4:	00c02004 	movi	r3,128
    b0c8:	01000044 	movi	r4,1
    b0cc:	000b883a 	mov	r5,zero
    b0d0:	d811883a 	mov	r8,sp
    b0d4:	e0c1b31e 	bne	fp,r3,b7a4 <___vfiprintf_internal_r+0xc04>
    b0d8:	8cb9c83a 	sub	fp,r17,r18
    b0dc:	0701b10e 	bge	zero,fp,b7a4 <___vfiprintf_internal_r+0xc04>
    b0e0:	01c00404 	movi	r7,16
    b0e4:	3f03890e 	bge	r7,fp,bf0c <___vfiprintf_internal_r+0x136c>
    b0e8:	00c00074 	movhi	r3,1
    b0ec:	18c96204 	addi	r3,r3,9608
    b0f0:	d8c02415 	stw	r3,144(sp)
    b0f4:	8007883a 	mov	r3,r16
    b0f8:	034001c4 	movi	r13,7
    b0fc:	e021883a 	mov	r16,fp
    b100:	da402515 	stw	r9,148(sp)
    b104:	1839883a 	mov	fp,r3
    b108:	00000506 	br	b120 <___vfiprintf_internal_r+0x580>
    b10c:	29800084 	addi	r6,r5,2
    b110:	42000204 	addi	r8,r8,8
    b114:	180b883a 	mov	r5,r3
    b118:	843ffc04 	addi	r16,r16,-16
    b11c:	3c000d0e 	bge	r7,r16,b154 <___vfiprintf_internal_r+0x5b4>
    b120:	10800404 	addi	r2,r2,16
    b124:	28c00044 	addi	r3,r5,1
    b128:	45c00015 	stw	r23,0(r8)
    b12c:	41c00115 	stw	r7,4(r8)
    b130:	d8801c15 	stw	r2,112(sp)
    b134:	d8c01b15 	stw	r3,108(sp)
    b138:	68fff40e 	bge	r13,r3,b10c <__alt_data_end+0xff00b10c>
    b13c:	1002241e 	bne	r2,zero,b9d0 <___vfiprintf_internal_r+0xe30>
    b140:	843ffc04 	addi	r16,r16,-16
    b144:	01800044 	movi	r6,1
    b148:	000b883a 	mov	r5,zero
    b14c:	d811883a 	mov	r8,sp
    b150:	3c3ff316 	blt	r7,r16,b120 <__alt_data_end+0xff00b120>
    b154:	da402517 	ldw	r9,148(sp)
    b158:	e007883a 	mov	r3,fp
    b15c:	8039883a 	mov	fp,r16
    b160:	1821883a 	mov	r16,r3
    b164:	d8c02417 	ldw	r3,144(sp)
    b168:	1705883a 	add	r2,r2,fp
    b16c:	47000115 	stw	fp,4(r8)
    b170:	40c00015 	stw	r3,0(r8)
    b174:	d8801c15 	stw	r2,112(sp)
    b178:	d9801b15 	stw	r6,108(sp)
    b17c:	00c001c4 	movi	r3,7
    b180:	19827616 	blt	r3,r6,bb5c <___vfiprintf_internal_r+0xfbc>
    b184:	4cf9c83a 	sub	fp,r9,r19
    b188:	42000204 	addi	r8,r8,8
    b18c:	31000044 	addi	r4,r6,1
    b190:	300b883a 	mov	r5,r6
    b194:	07018516 	blt	zero,fp,b7ac <___vfiprintf_internal_r+0xc0c>
    b198:	9885883a 	add	r2,r19,r2
    b19c:	45400015 	stw	r21,0(r8)
    b1a0:	44c00115 	stw	r19,4(r8)
    b1a4:	d8801c15 	stw	r2,112(sp)
    b1a8:	d9001b15 	stw	r4,108(sp)
    b1ac:	00c001c4 	movi	r3,7
    b1b0:	1901dd0e 	bge	r3,r4,b928 <___vfiprintf_internal_r+0xd88>
    b1b4:	1002401e 	bne	r2,zero,bab8 <___vfiprintf_internal_r+0xf18>
    b1b8:	d8001b15 	stw	zero,108(sp)
    b1bc:	a2c0010c 	andi	r11,r20,4
    b1c0:	58000226 	beq	r11,zero,b1cc <___vfiprintf_internal_r+0x62c>
    b1c4:	8ca7c83a 	sub	r19,r17,r18
    b1c8:	04c2f216 	blt	zero,r19,bd94 <___vfiprintf_internal_r+0x11f4>
    b1cc:	8c80010e 	bge	r17,r18,b1d4 <___vfiprintf_internal_r+0x634>
    b1d0:	9023883a 	mov	r17,r18
    b1d4:	da802317 	ldw	r10,140(sp)
    b1d8:	5455883a 	add	r10,r10,r17
    b1dc:	da802315 	stw	r10,140(sp)
    b1e0:	d8001b15 	stw	zero,108(sp)
    b1e4:	d811883a 	mov	r8,sp
    b1e8:	003ea206 	br	ac74 <__alt_data_end+0xff00ac74>
    b1ec:	a5000814 	ori	r20,r20,32
    b1f0:	80c00007 	ldb	r3,0(r16)
    b1f4:	003ec906 	br	ad1c <__alt_data_end+0xff00ad1c>
    b1f8:	80c00007 	ldb	r3,0(r16)
    b1fc:	1b030926 	beq	r3,r12,be24 <___vfiprintf_internal_r+0x1284>
    b200:	a5000414 	ori	r20,r20,16
    b204:	003ec506 	br	ad1c <__alt_data_end+0xff00ad1c>
    b208:	21003fcc 	andi	r4,r4,255
    b20c:	20035e1e 	bne	r4,zero,bf88 <___vfiprintf_internal_r+0x13e8>
    b210:	a080080c 	andi	r2,r20,32
    b214:	1002a526 	beq	r2,zero,bcac <___vfiprintf_internal_r+0x110c>
    b218:	da802217 	ldw	r10,136(sp)
    b21c:	50800017 	ldw	r2,0(r10)
    b220:	da802317 	ldw	r10,140(sp)
    b224:	5007d7fa 	srai	r3,r10,31
    b228:	da802217 	ldw	r10,136(sp)
    b22c:	10c00115 	stw	r3,4(r2)
    b230:	52800104 	addi	r10,r10,4
    b234:	da802215 	stw	r10,136(sp)
    b238:	da802317 	ldw	r10,140(sp)
    b23c:	12800015 	stw	r10,0(r2)
    b240:	003e8c06 	br	ac74 <__alt_data_end+0xff00ac74>
    b244:	21003fcc 	andi	r4,r4,255
    b248:	2003511e 	bne	r4,zero,bf90 <___vfiprintf_internal_r+0x13f0>
    b24c:	a080080c 	andi	r2,r20,32
    b250:	1000a126 	beq	r2,zero,b4d8 <___vfiprintf_internal_r+0x938>
    b254:	da802217 	ldw	r10,136(sp)
    b258:	d8001d85 	stb	zero,118(sp)
    b25c:	50800204 	addi	r2,r10,8
    b260:	54800017 	ldw	r18,0(r10)
    b264:	54c00117 	ldw	r19,4(r10)
    b268:	4802b416 	blt	r9,zero,bd3c <___vfiprintf_internal_r+0x119c>
    b26c:	013fdfc4 	movi	r4,-129
    b270:	94c6b03a 	or	r3,r18,r19
    b274:	d8802215 	stw	r2,136(sp)
    b278:	a128703a 	and	r20,r20,r4
    b27c:	1800a226 	beq	r3,zero,b508 <___vfiprintf_internal_r+0x968>
    b280:	0039883a 	mov	fp,zero
    b284:	dd401a04 	addi	r21,sp,104
    b288:	9006d0fa 	srli	r3,r18,3
    b28c:	9808977a 	slli	r4,r19,29
    b290:	9826d0fa 	srli	r19,r19,3
    b294:	948001cc 	andi	r18,r18,7
    b298:	90800c04 	addi	r2,r18,48
    b29c:	ad7fffc4 	addi	r21,r21,-1
    b2a0:	20e4b03a 	or	r18,r4,r3
    b2a4:	a8800005 	stb	r2,0(r21)
    b2a8:	94c6b03a 	or	r3,r18,r19
    b2ac:	183ff61e 	bne	r3,zero,b288 <__alt_data_end+0xff00b288>
    b2b0:	a0c0004c 	andi	r3,r20,1
    b2b4:	18005926 	beq	r3,zero,b41c <___vfiprintf_internal_r+0x87c>
    b2b8:	10803fcc 	andi	r2,r2,255
    b2bc:	1080201c 	xori	r2,r2,128
    b2c0:	10bfe004 	addi	r2,r2,-128
    b2c4:	00c00c04 	movi	r3,48
    b2c8:	10c05426 	beq	r2,r3,b41c <___vfiprintf_internal_r+0x87c>
    b2cc:	da801e17 	ldw	r10,120(sp)
    b2d0:	a8bfffc4 	addi	r2,r21,-1
    b2d4:	a8ffffc5 	stb	r3,-1(r21)
    b2d8:	50a7c83a 	sub	r19,r10,r2
    b2dc:	102b883a 	mov	r21,r2
    b2e0:	003f2f06 	br	afa0 <__alt_data_end+0xff00afa0>
    b2e4:	21003fcc 	andi	r4,r4,255
    b2e8:	2003421e 	bne	r4,zero,bff4 <___vfiprintf_internal_r+0x1454>
    b2ec:	00800074 	movhi	r2,1
    b2f0:	10890104 	addi	r2,r2,9220
    b2f4:	d8802615 	stw	r2,152(sp)
    b2f8:	a080080c 	andi	r2,r20,32
    b2fc:	1000aa26 	beq	r2,zero,b5a8 <___vfiprintf_internal_r+0xa08>
    b300:	da802217 	ldw	r10,136(sp)
    b304:	54800017 	ldw	r18,0(r10)
    b308:	54c00117 	ldw	r19,4(r10)
    b30c:	52800204 	addi	r10,r10,8
    b310:	da802215 	stw	r10,136(sp)
    b314:	a080004c 	andi	r2,r20,1
    b318:	1001d226 	beq	r2,zero,ba64 <___vfiprintf_internal_r+0xec4>
    b31c:	94c4b03a 	or	r2,r18,r19
    b320:	1002351e 	bne	r2,zero,bbf8 <___vfiprintf_internal_r+0x1058>
    b324:	d8001d85 	stb	zero,118(sp)
    b328:	48022216 	blt	r9,zero,bbb4 <___vfiprintf_internal_r+0x1014>
    b32c:	00bfdfc4 	movi	r2,-129
    b330:	a0a8703a 	and	r20,r20,r2
    b334:	003f1506 	br	af8c <__alt_data_end+0xff00af8c>
    b338:	da802217 	ldw	r10,136(sp)
    b33c:	04800044 	movi	r18,1
    b340:	d8001d85 	stb	zero,118(sp)
    b344:	50800017 	ldw	r2,0(r10)
    b348:	52800104 	addi	r10,r10,4
    b34c:	da802215 	stw	r10,136(sp)
    b350:	d8801005 	stb	r2,64(sp)
    b354:	9027883a 	mov	r19,r18
    b358:	dd401004 	addi	r21,sp,64
    b35c:	0013883a 	mov	r9,zero
    b360:	003f1706 	br	afc0 <__alt_data_end+0xff00afc0>
    b364:	21003fcc 	andi	r4,r4,255
    b368:	2003201e 	bne	r4,zero,bfec <___vfiprintf_internal_r+0x144c>
    b36c:	a080080c 	andi	r2,r20,32
    b370:	10004b26 	beq	r2,zero,b4a0 <___vfiprintf_internal_r+0x900>
    b374:	da802217 	ldw	r10,136(sp)
    b378:	50800117 	ldw	r2,4(r10)
    b37c:	54800017 	ldw	r18,0(r10)
    b380:	52800204 	addi	r10,r10,8
    b384:	da802215 	stw	r10,136(sp)
    b388:	1027883a 	mov	r19,r2
    b38c:	10022c16 	blt	r2,zero,bc40 <___vfiprintf_internal_r+0x10a0>
    b390:	df001d83 	ldbu	fp,118(sp)
    b394:	48007216 	blt	r9,zero,b560 <___vfiprintf_internal_r+0x9c0>
    b398:	00ffdfc4 	movi	r3,-129
    b39c:	94c4b03a 	or	r2,r18,r19
    b3a0:	a0e8703a 	and	r20,r20,r3
    b3a4:	1000cc26 	beq	r2,zero,b6d8 <___vfiprintf_internal_r+0xb38>
    b3a8:	98021026 	beq	r19,zero,bbec <___vfiprintf_internal_r+0x104c>
    b3ac:	dc402415 	stw	r17,144(sp)
    b3b0:	dc002515 	stw	r16,148(sp)
    b3b4:	9823883a 	mov	r17,r19
    b3b8:	9021883a 	mov	r16,r18
    b3bc:	dd401a04 	addi	r21,sp,104
    b3c0:	4825883a 	mov	r18,r9
    b3c4:	4027883a 	mov	r19,r8
    b3c8:	8009883a 	mov	r4,r16
    b3cc:	880b883a 	mov	r5,r17
    b3d0:	01800284 	movi	r6,10
    b3d4:	000f883a 	mov	r7,zero
    b3d8:	000cf800 	call	cf80 <__umoddi3>
    b3dc:	10800c04 	addi	r2,r2,48
    b3e0:	ad7fffc4 	addi	r21,r21,-1
    b3e4:	8009883a 	mov	r4,r16
    b3e8:	880b883a 	mov	r5,r17
    b3ec:	a8800005 	stb	r2,0(r21)
    b3f0:	01800284 	movi	r6,10
    b3f4:	000f883a 	mov	r7,zero
    b3f8:	000ca080 	call	ca08 <__udivdi3>
    b3fc:	1021883a 	mov	r16,r2
    b400:	10c4b03a 	or	r2,r2,r3
    b404:	1823883a 	mov	r17,r3
    b408:	103fef1e 	bne	r2,zero,b3c8 <__alt_data_end+0xff00b3c8>
    b40c:	dc402417 	ldw	r17,144(sp)
    b410:	dc002517 	ldw	r16,148(sp)
    b414:	9013883a 	mov	r9,r18
    b418:	9811883a 	mov	r8,r19
    b41c:	da801e17 	ldw	r10,120(sp)
    b420:	5567c83a 	sub	r19,r10,r21
    b424:	003ede06 	br	afa0 <__alt_data_end+0xff00afa0>
    b428:	38803fcc 	andi	r2,r7,255
    b42c:	1080201c 	xori	r2,r2,128
    b430:	10bfe004 	addi	r2,r2,-128
    b434:	1002371e 	bne	r2,zero,bd14 <___vfiprintf_internal_r+0x1174>
    b438:	01000044 	movi	r4,1
    b43c:	01c00804 	movi	r7,32
    b440:	80c00007 	ldb	r3,0(r16)
    b444:	003e3506 	br	ad1c <__alt_data_end+0xff00ad1c>
    b448:	a5000054 	ori	r20,r20,1
    b44c:	80c00007 	ldb	r3,0(r16)
    b450:	003e3206 	br	ad1c <__alt_data_end+0xff00ad1c>
    b454:	a5002014 	ori	r20,r20,128
    b458:	80c00007 	ldb	r3,0(r16)
    b45c:	003e2f06 	br	ad1c <__alt_data_end+0xff00ad1c>
    b460:	8015883a 	mov	r10,r16
    b464:	0023883a 	mov	r17,zero
    b468:	18bff404 	addi	r2,r3,-48
    b46c:	50c00007 	ldb	r3,0(r10)
    b470:	8c4002a4 	muli	r17,r17,10
    b474:	84000044 	addi	r16,r16,1
    b478:	8015883a 	mov	r10,r16
    b47c:	1463883a 	add	r17,r2,r17
    b480:	18bff404 	addi	r2,r3,-48
    b484:	30bff92e 	bgeu	r6,r2,b46c <__alt_data_end+0xff00b46c>
    b488:	003e2506 	br	ad20 <__alt_data_end+0xff00ad20>
    b48c:	21003fcc 	andi	r4,r4,255
    b490:	2002d41e 	bne	r4,zero,bfe4 <___vfiprintf_internal_r+0x1444>
    b494:	a5000414 	ori	r20,r20,16
    b498:	a080080c 	andi	r2,r20,32
    b49c:	103fb51e 	bne	r2,zero,b374 <__alt_data_end+0xff00b374>
    b4a0:	a080040c 	andi	r2,r20,16
    b4a4:	1001f826 	beq	r2,zero,bc88 <___vfiprintf_internal_r+0x10e8>
    b4a8:	da802217 	ldw	r10,136(sp)
    b4ac:	54800017 	ldw	r18,0(r10)
    b4b0:	52800104 	addi	r10,r10,4
    b4b4:	da802215 	stw	r10,136(sp)
    b4b8:	9027d7fa 	srai	r19,r18,31
    b4bc:	9805883a 	mov	r2,r19
    b4c0:	003fb206 	br	b38c <__alt_data_end+0xff00b38c>
    b4c4:	21003fcc 	andi	r4,r4,255
    b4c8:	2002c41e 	bne	r4,zero,bfdc <___vfiprintf_internal_r+0x143c>
    b4cc:	a5000414 	ori	r20,r20,16
    b4d0:	a080080c 	andi	r2,r20,32
    b4d4:	103f5f1e 	bne	r2,zero,b254 <__alt_data_end+0xff00b254>
    b4d8:	a080040c 	andi	r2,r20,16
    b4dc:	10020f26 	beq	r2,zero,bd1c <___vfiprintf_internal_r+0x117c>
    b4e0:	da802217 	ldw	r10,136(sp)
    b4e4:	d8001d85 	stb	zero,118(sp)
    b4e8:	0027883a 	mov	r19,zero
    b4ec:	50800104 	addi	r2,r10,4
    b4f0:	54800017 	ldw	r18,0(r10)
    b4f4:	48021116 	blt	r9,zero,bd3c <___vfiprintf_internal_r+0x119c>
    b4f8:	00ffdfc4 	movi	r3,-129
    b4fc:	d8802215 	stw	r2,136(sp)
    b500:	a0e8703a 	and	r20,r20,r3
    b504:	903f5e1e 	bne	r18,zero,b280 <__alt_data_end+0xff00b280>
    b508:	0039883a 	mov	fp,zero
    b50c:	4802a626 	beq	r9,zero,bfa8 <___vfiprintf_internal_r+0x1408>
    b510:	0025883a 	mov	r18,zero
    b514:	0027883a 	mov	r19,zero
    b518:	003f5a06 	br	b284 <__alt_data_end+0xff00b284>
    b51c:	21003fcc 	andi	r4,r4,255
    b520:	20029f1e 	bne	r4,zero,bfa0 <___vfiprintf_internal_r+0x1400>
    b524:	a5000414 	ori	r20,r20,16
    b528:	a080080c 	andi	r2,r20,32
    b52c:	10005e1e 	bne	r2,zero,b6a8 <___vfiprintf_internal_r+0xb08>
    b530:	a080040c 	andi	r2,r20,16
    b534:	1001a21e 	bne	r2,zero,bbc0 <___vfiprintf_internal_r+0x1020>
    b538:	a080100c 	andi	r2,r20,64
    b53c:	d8001d85 	stb	zero,118(sp)
    b540:	da802217 	ldw	r10,136(sp)
    b544:	1002231e 	bne	r2,zero,bdd4 <___vfiprintf_internal_r+0x1234>
    b548:	50800104 	addi	r2,r10,4
    b54c:	54800017 	ldw	r18,0(r10)
    b550:	0027883a 	mov	r19,zero
    b554:	4801a00e 	bge	r9,zero,bbd8 <___vfiprintf_internal_r+0x1038>
    b558:	d8802215 	stw	r2,136(sp)
    b55c:	0039883a 	mov	fp,zero
    b560:	94c4b03a 	or	r2,r18,r19
    b564:	103f901e 	bne	r2,zero,b3a8 <__alt_data_end+0xff00b3a8>
    b568:	00800044 	movi	r2,1
    b56c:	10803fcc 	andi	r2,r2,255
    b570:	00c00044 	movi	r3,1
    b574:	10c05926 	beq	r2,r3,b6dc <___vfiprintf_internal_r+0xb3c>
    b578:	00c00084 	movi	r3,2
    b57c:	10ffe41e 	bne	r2,r3,b510 <__alt_data_end+0xff00b510>
    b580:	0025883a 	mov	r18,zero
    b584:	0027883a 	mov	r19,zero
    b588:	00013d06 	br	ba80 <___vfiprintf_internal_r+0xee0>
    b58c:	21003fcc 	andi	r4,r4,255
    b590:	2002811e 	bne	r4,zero,bf98 <___vfiprintf_internal_r+0x13f8>
    b594:	00800074 	movhi	r2,1
    b598:	1088fc04 	addi	r2,r2,9200
    b59c:	d8802615 	stw	r2,152(sp)
    b5a0:	a080080c 	andi	r2,r20,32
    b5a4:	103f561e 	bne	r2,zero,b300 <__alt_data_end+0xff00b300>
    b5a8:	a080040c 	andi	r2,r20,16
    b5ac:	1001d126 	beq	r2,zero,bcf4 <___vfiprintf_internal_r+0x1154>
    b5b0:	da802217 	ldw	r10,136(sp)
    b5b4:	0027883a 	mov	r19,zero
    b5b8:	54800017 	ldw	r18,0(r10)
    b5bc:	52800104 	addi	r10,r10,4
    b5c0:	da802215 	stw	r10,136(sp)
    b5c4:	003f5306 	br	b314 <__alt_data_end+0xff00b314>
    b5c8:	da802217 	ldw	r10,136(sp)
    b5cc:	d8001d85 	stb	zero,118(sp)
    b5d0:	55400017 	ldw	r21,0(r10)
    b5d4:	50c00104 	addi	r3,r10,4
    b5d8:	a8024226 	beq	r21,zero,bee4 <___vfiprintf_internal_r+0x1344>
    b5dc:	48021816 	blt	r9,zero,be40 <___vfiprintf_internal_r+0x12a0>
    b5e0:	480d883a 	mov	r6,r9
    b5e4:	000b883a 	mov	r5,zero
    b5e8:	a809883a 	mov	r4,r21
    b5ec:	d8c02a15 	stw	r3,168(sp)
    b5f0:	da002b15 	stw	r8,172(sp)
    b5f4:	da402c15 	stw	r9,176(sp)
    b5f8:	0008df00 	call	8df0 <memchr>
    b5fc:	d8c02a17 	ldw	r3,168(sp)
    b600:	da002b17 	ldw	r8,172(sp)
    b604:	da402c17 	ldw	r9,176(sp)
    b608:	10024826 	beq	r2,zero,bf2c <___vfiprintf_internal_r+0x138c>
    b60c:	1567c83a 	sub	r19,r2,r21
    b610:	df001d83 	ldbu	fp,118(sp)
    b614:	d8c02215 	stw	r3,136(sp)
    b618:	0013883a 	mov	r9,zero
    b61c:	003e6006 	br	afa0 <__alt_data_end+0xff00afa0>
    b620:	21003fcc 	andi	r4,r4,255
    b624:	203fc026 	beq	r4,zero,b528 <__alt_data_end+0xff00b528>
    b628:	d9c01d85 	stb	r7,118(sp)
    b62c:	003fbe06 	br	b528 <__alt_data_end+0xff00b528>
    b630:	da802217 	ldw	r10,136(sp)
    b634:	54400017 	ldw	r17,0(r10)
    b638:	50800104 	addi	r2,r10,4
    b63c:	883e3b16 	blt	r17,zero,af2c <__alt_data_end+0xff00af2c>
    b640:	d8802215 	stw	r2,136(sp)
    b644:	80c00007 	ldb	r3,0(r16)
    b648:	003db406 	br	ad1c <__alt_data_end+0xff00ad1c>
    b64c:	01000044 	movi	r4,1
    b650:	01c00ac4 	movi	r7,43
    b654:	80c00007 	ldb	r3,0(r16)
    b658:	003db006 	br	ad1c <__alt_data_end+0xff00ad1c>
    b65c:	80c00007 	ldb	r3,0(r16)
    b660:	82800044 	addi	r10,r16,1
    b664:	1b423c26 	beq	r3,r13,bf58 <___vfiprintf_internal_r+0x13b8>
    b668:	18bff404 	addi	r2,r3,-48
    b66c:	0013883a 	mov	r9,zero
    b670:	30822b36 	bltu	r6,r2,bf20 <___vfiprintf_internal_r+0x1380>
    b674:	50c00007 	ldb	r3,0(r10)
    b678:	4a4002a4 	muli	r9,r9,10
    b67c:	54000044 	addi	r16,r10,1
    b680:	8015883a 	mov	r10,r16
    b684:	4893883a 	add	r9,r9,r2
    b688:	18bff404 	addi	r2,r3,-48
    b68c:	30bff92e 	bgeu	r6,r2,b674 <__alt_data_end+0xff00b674>
    b690:	483da30e 	bge	r9,zero,ad20 <__alt_data_end+0xff00ad20>
    b694:	027fffc4 	movi	r9,-1
    b698:	003da106 	br	ad20 <__alt_data_end+0xff00ad20>
    b69c:	a5001014 	ori	r20,r20,64
    b6a0:	80c00007 	ldb	r3,0(r16)
    b6a4:	003d9d06 	br	ad1c <__alt_data_end+0xff00ad1c>
    b6a8:	da802217 	ldw	r10,136(sp)
    b6ac:	d8001d85 	stb	zero,118(sp)
    b6b0:	50c00204 	addi	r3,r10,8
    b6b4:	54800017 	ldw	r18,0(r10)
    b6b8:	54c00117 	ldw	r19,4(r10)
    b6bc:	4801ca16 	blt	r9,zero,bde8 <___vfiprintf_internal_r+0x1248>
    b6c0:	013fdfc4 	movi	r4,-129
    b6c4:	94c4b03a 	or	r2,r18,r19
    b6c8:	d8c02215 	stw	r3,136(sp)
    b6cc:	a128703a 	and	r20,r20,r4
    b6d0:	0039883a 	mov	fp,zero
    b6d4:	103f341e 	bne	r2,zero,b3a8 <__alt_data_end+0xff00b3a8>
    b6d8:	483e2e26 	beq	r9,zero,af94 <__alt_data_end+0xff00af94>
    b6dc:	0025883a 	mov	r18,zero
    b6e0:	94800c04 	addi	r18,r18,48
    b6e4:	dc8019c5 	stb	r18,103(sp)
    b6e8:	dcc02717 	ldw	r19,156(sp)
    b6ec:	dd4019c4 	addi	r21,sp,103
    b6f0:	003e2b06 	br	afa0 <__alt_data_end+0xff00afa0>
    b6f4:	21003fcc 	andi	r4,r4,255
    b6f8:	2002361e 	bne	r4,zero,bfd4 <___vfiprintf_internal_r+0x1434>
    b6fc:	1801c126 	beq	r3,zero,be04 <___vfiprintf_internal_r+0x1264>
    b700:	04800044 	movi	r18,1
    b704:	d8c01005 	stb	r3,64(sp)
    b708:	d8001d85 	stb	zero,118(sp)
    b70c:	9027883a 	mov	r19,r18
    b710:	dd401004 	addi	r21,sp,64
    b714:	003f1106 	br	b35c <__alt_data_end+0xff00b35c>
    b718:	d9402117 	ldw	r5,132(sp)
    b71c:	d9002017 	ldw	r4,128(sp)
    b720:	d9801a04 	addi	r6,sp,104
    b724:	d9c02b15 	stw	r7,172(sp)
    b728:	dbc02a15 	stw	r15,168(sp)
    b72c:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    b730:	d9c02b17 	ldw	r7,172(sp)
    b734:	dbc02a17 	ldw	r15,168(sp)
    b738:	10006d1e 	bne	r2,zero,b8f0 <___vfiprintf_internal_r+0xd50>
    b73c:	d9801b17 	ldw	r6,108(sp)
    b740:	d8801c17 	ldw	r2,112(sp)
    b744:	d811883a 	mov	r8,sp
    b748:	31400044 	addi	r5,r6,1
    b74c:	003e3306 	br	b01c <__alt_data_end+0xff00b01c>
    b750:	d9401b17 	ldw	r5,108(sp)
    b754:	d8801c17 	ldw	r2,112(sp)
    b758:	29000044 	addi	r4,r5,1
    b75c:	d8c01d87 	ldb	r3,118(sp)
    b760:	183e4d26 	beq	r3,zero,b098 <__alt_data_end+0xff00b098>
    b764:	00c00044 	movi	r3,1
    b768:	d9401d84 	addi	r5,sp,118
    b76c:	10c5883a 	add	r2,r2,r3
    b770:	41400015 	stw	r5,0(r8)
    b774:	40c00115 	stw	r3,4(r8)
    b778:	d8801c15 	stw	r2,112(sp)
    b77c:	d9001b15 	stw	r4,108(sp)
    b780:	014001c4 	movi	r5,7
    b784:	2900a90e 	bge	r5,r4,ba2c <___vfiprintf_internal_r+0xe8c>
    b788:	1000da1e 	bne	r2,zero,baf4 <___vfiprintf_internal_r+0xf54>
    b78c:	7000ab1e 	bne	r14,zero,ba3c <___vfiprintf_internal_r+0xe9c>
    b790:	000b883a 	mov	r5,zero
    b794:	1809883a 	mov	r4,r3
    b798:	d811883a 	mov	r8,sp
    b79c:	00c02004 	movi	r3,128
    b7a0:	e0fe4d26 	beq	fp,r3,b0d8 <__alt_data_end+0xff00b0d8>
    b7a4:	4cf9c83a 	sub	fp,r9,r19
    b7a8:	073e7b0e 	bge	zero,fp,b198 <__alt_data_end+0xff00b198>
    b7ac:	01c00404 	movi	r7,16
    b7b0:	3f01900e 	bge	r7,fp,bdf4 <___vfiprintf_internal_r+0x1254>
    b7b4:	00c00074 	movhi	r3,1
    b7b8:	18c96204 	addi	r3,r3,9608
    b7bc:	d8c02415 	stw	r3,144(sp)
    b7c0:	034001c4 	movi	r13,7
    b7c4:	00000506 	br	b7dc <___vfiprintf_internal_r+0xc3c>
    b7c8:	29000084 	addi	r4,r5,2
    b7cc:	42000204 	addi	r8,r8,8
    b7d0:	180b883a 	mov	r5,r3
    b7d4:	e73ffc04 	addi	fp,fp,-16
    b7d8:	3f000d0e 	bge	r7,fp,b810 <___vfiprintf_internal_r+0xc70>
    b7dc:	10800404 	addi	r2,r2,16
    b7e0:	28c00044 	addi	r3,r5,1
    b7e4:	45c00015 	stw	r23,0(r8)
    b7e8:	41c00115 	stw	r7,4(r8)
    b7ec:	d8801c15 	stw	r2,112(sp)
    b7f0:	d8c01b15 	stw	r3,108(sp)
    b7f4:	68fff40e 	bge	r13,r3,b7c8 <__alt_data_end+0xff00b7c8>
    b7f8:	1000101e 	bne	r2,zero,b83c <___vfiprintf_internal_r+0xc9c>
    b7fc:	e73ffc04 	addi	fp,fp,-16
    b800:	01000044 	movi	r4,1
    b804:	000b883a 	mov	r5,zero
    b808:	d811883a 	mov	r8,sp
    b80c:	3f3ff316 	blt	r7,fp,b7dc <__alt_data_end+0xff00b7dc>
    b810:	da802417 	ldw	r10,144(sp)
    b814:	1705883a 	add	r2,r2,fp
    b818:	47000115 	stw	fp,4(r8)
    b81c:	42800015 	stw	r10,0(r8)
    b820:	d8801c15 	stw	r2,112(sp)
    b824:	d9001b15 	stw	r4,108(sp)
    b828:	00c001c4 	movi	r3,7
    b82c:	19003616 	blt	r3,r4,b908 <___vfiprintf_internal_r+0xd68>
    b830:	42000204 	addi	r8,r8,8
    b834:	21000044 	addi	r4,r4,1
    b838:	003e5706 	br	b198 <__alt_data_end+0xff00b198>
    b83c:	d9402117 	ldw	r5,132(sp)
    b840:	d9002017 	ldw	r4,128(sp)
    b844:	d9801a04 	addi	r6,sp,104
    b848:	d9c02b15 	stw	r7,172(sp)
    b84c:	db402a15 	stw	r13,168(sp)
    b850:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    b854:	d9c02b17 	ldw	r7,172(sp)
    b858:	db402a17 	ldw	r13,168(sp)
    b85c:	1000241e 	bne	r2,zero,b8f0 <___vfiprintf_internal_r+0xd50>
    b860:	d9401b17 	ldw	r5,108(sp)
    b864:	d8801c17 	ldw	r2,112(sp)
    b868:	d811883a 	mov	r8,sp
    b86c:	29000044 	addi	r4,r5,1
    b870:	003fd806 	br	b7d4 <__alt_data_end+0xff00b7d4>
    b874:	d9401b17 	ldw	r5,108(sp)
    b878:	00c00074 	movhi	r3,1
    b87c:	18c96604 	addi	r3,r3,9624
    b880:	d8c02415 	stw	r3,144(sp)
    b884:	29400044 	addi	r5,r5,1
    b888:	d8c02417 	ldw	r3,144(sp)
    b88c:	14c5883a 	add	r2,r2,r19
    b890:	44c00115 	stw	r19,4(r8)
    b894:	40c00015 	stw	r3,0(r8)
    b898:	d8801c15 	stw	r2,112(sp)
    b89c:	d9401b15 	stw	r5,108(sp)
    b8a0:	00c001c4 	movi	r3,7
    b8a4:	1940070e 	bge	r3,r5,b8c4 <___vfiprintf_internal_r+0xd24>
    b8a8:	103e4826 	beq	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b8ac:	d9402117 	ldw	r5,132(sp)
    b8b0:	d9002017 	ldw	r4,128(sp)
    b8b4:	d9801a04 	addi	r6,sp,104
    b8b8:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    b8bc:	10000c1e 	bne	r2,zero,b8f0 <___vfiprintf_internal_r+0xd50>
    b8c0:	d8801c17 	ldw	r2,112(sp)
    b8c4:	8c80010e 	bge	r17,r18,b8cc <___vfiprintf_internal_r+0xd2c>
    b8c8:	9023883a 	mov	r17,r18
    b8cc:	da802317 	ldw	r10,140(sp)
    b8d0:	5455883a 	add	r10,r10,r17
    b8d4:	da802315 	stw	r10,140(sp)
    b8d8:	103e4126 	beq	r2,zero,b1e0 <__alt_data_end+0xff00b1e0>
    b8dc:	d9402117 	ldw	r5,132(sp)
    b8e0:	d9002017 	ldw	r4,128(sp)
    b8e4:	d9801a04 	addi	r6,sp,104
    b8e8:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    b8ec:	103e3c26 	beq	r2,zero,b1e0 <__alt_data_end+0xff00b1e0>
    b8f0:	dd002117 	ldw	r20,132(sp)
    b8f4:	a080030b 	ldhu	r2,12(r20)
    b8f8:	1080100c 	andi	r2,r2,64
    b8fc:	1001231e 	bne	r2,zero,bd8c <___vfiprintf_internal_r+0x11ec>
    b900:	d8802317 	ldw	r2,140(sp)
    b904:	003d7b06 	br	aef4 <__alt_data_end+0xff00aef4>
    b908:	1000991e 	bne	r2,zero,bb70 <___vfiprintf_internal_r+0xfd0>
    b90c:	00c00044 	movi	r3,1
    b910:	9805883a 	mov	r2,r19
    b914:	dd400015 	stw	r21,0(sp)
    b918:	dcc00115 	stw	r19,4(sp)
    b91c:	dcc01c15 	stw	r19,112(sp)
    b920:	d8c01b15 	stw	r3,108(sp)
    b924:	d811883a 	mov	r8,sp
    b928:	42000204 	addi	r8,r8,8
    b92c:	a2c0010c 	andi	r11,r20,4
    b930:	583fe426 	beq	r11,zero,b8c4 <__alt_data_end+0xff00b8c4>
    b934:	8ca7c83a 	sub	r19,r17,r18
    b938:	04ffe20e 	bge	zero,r19,b8c4 <__alt_data_end+0xff00b8c4>
    b93c:	01c00404 	movi	r7,16
    b940:	3cffcc0e 	bge	r7,r19,b874 <__alt_data_end+0xff00b874>
    b944:	02800074 	movhi	r10,1
    b948:	52896604 	addi	r10,r10,9624
    b94c:	d9001b17 	ldw	r4,108(sp)
    b950:	da802415 	stw	r10,144(sp)
    b954:	382b883a 	mov	r21,r7
    b958:	050001c4 	movi	r20,7
    b95c:	df002017 	ldw	fp,128(sp)
    b960:	00000506 	br	b978 <___vfiprintf_internal_r+0xdd8>
    b964:	21400084 	addi	r5,r4,2
    b968:	42000204 	addi	r8,r8,8
    b96c:	1809883a 	mov	r4,r3
    b970:	9cfffc04 	addi	r19,r19,-16
    b974:	acffc40e 	bge	r21,r19,b888 <__alt_data_end+0xff00b888>
    b978:	10800404 	addi	r2,r2,16
    b97c:	20c00044 	addi	r3,r4,1
    b980:	45800015 	stw	r22,0(r8)
    b984:	45400115 	stw	r21,4(r8)
    b988:	d8801c15 	stw	r2,112(sp)
    b98c:	d8c01b15 	stw	r3,108(sp)
    b990:	a0fff40e 	bge	r20,r3,b964 <__alt_data_end+0xff00b964>
    b994:	1000041e 	bne	r2,zero,b9a8 <___vfiprintf_internal_r+0xe08>
    b998:	01400044 	movi	r5,1
    b99c:	0009883a 	mov	r4,zero
    b9a0:	d811883a 	mov	r8,sp
    b9a4:	003ff206 	br	b970 <__alt_data_end+0xff00b970>
    b9a8:	d9402117 	ldw	r5,132(sp)
    b9ac:	d9801a04 	addi	r6,sp,104
    b9b0:	e009883a 	mov	r4,fp
    b9b4:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    b9b8:	103fcd1e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    b9bc:	d9001b17 	ldw	r4,108(sp)
    b9c0:	d8801c17 	ldw	r2,112(sp)
    b9c4:	d811883a 	mov	r8,sp
    b9c8:	21400044 	addi	r5,r4,1
    b9cc:	003fe806 	br	b970 <__alt_data_end+0xff00b970>
    b9d0:	d9402117 	ldw	r5,132(sp)
    b9d4:	d9002017 	ldw	r4,128(sp)
    b9d8:	d9801a04 	addi	r6,sp,104
    b9dc:	d9c02b15 	stw	r7,172(sp)
    b9e0:	db402a15 	stw	r13,168(sp)
    b9e4:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    b9e8:	d9c02b17 	ldw	r7,172(sp)
    b9ec:	db402a17 	ldw	r13,168(sp)
    b9f0:	103fbf1e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    b9f4:	d9401b17 	ldw	r5,108(sp)
    b9f8:	d8801c17 	ldw	r2,112(sp)
    b9fc:	d811883a 	mov	r8,sp
    ba00:	29800044 	addi	r6,r5,1
    ba04:	003dc406 	br	b118 <__alt_data_end+0xff00b118>
    ba08:	1000d21e 	bne	r2,zero,bd54 <___vfiprintf_internal_r+0x11b4>
    ba0c:	d8c01d87 	ldb	r3,118(sp)
    ba10:	18009526 	beq	r3,zero,bc68 <___vfiprintf_internal_r+0x10c8>
    ba14:	00800044 	movi	r2,1
    ba18:	d8c01d84 	addi	r3,sp,118
    ba1c:	1009883a 	mov	r4,r2
    ba20:	d8c00015 	stw	r3,0(sp)
    ba24:	d8800115 	stw	r2,4(sp)
    ba28:	d811883a 	mov	r8,sp
    ba2c:	200b883a 	mov	r5,r4
    ba30:	42000204 	addi	r8,r8,8
    ba34:	21000044 	addi	r4,r4,1
    ba38:	003d9706 	br	b098 <__alt_data_end+0xff00b098>
    ba3c:	d9001d04 	addi	r4,sp,116
    ba40:	00800084 	movi	r2,2
    ba44:	d9000015 	stw	r4,0(sp)
    ba48:	d8800115 	stw	r2,4(sp)
    ba4c:	1809883a 	mov	r4,r3
    ba50:	d811883a 	mov	r8,sp
    ba54:	200b883a 	mov	r5,r4
    ba58:	42000204 	addi	r8,r8,8
    ba5c:	21000044 	addi	r4,r4,1
    ba60:	003f4e06 	br	b79c <__alt_data_end+0xff00b79c>
    ba64:	d8001d85 	stb	zero,118(sp)
    ba68:	48005016 	blt	r9,zero,bbac <___vfiprintf_internal_r+0x100c>
    ba6c:	00ffdfc4 	movi	r3,-129
    ba70:	94c4b03a 	or	r2,r18,r19
    ba74:	a0e8703a 	and	r20,r20,r3
    ba78:	103d4426 	beq	r2,zero,af8c <__alt_data_end+0xff00af8c>
    ba7c:	0039883a 	mov	fp,zero
    ba80:	d9002617 	ldw	r4,152(sp)
    ba84:	dd401a04 	addi	r21,sp,104
    ba88:	908003cc 	andi	r2,r18,15
    ba8c:	9806973a 	slli	r3,r19,28
    ba90:	2085883a 	add	r2,r4,r2
    ba94:	9024d13a 	srli	r18,r18,4
    ba98:	10800003 	ldbu	r2,0(r2)
    ba9c:	9826d13a 	srli	r19,r19,4
    baa0:	ad7fffc4 	addi	r21,r21,-1
    baa4:	1ca4b03a 	or	r18,r3,r18
    baa8:	a8800005 	stb	r2,0(r21)
    baac:	94c4b03a 	or	r2,r18,r19
    bab0:	103ff51e 	bne	r2,zero,ba88 <__alt_data_end+0xff00ba88>
    bab4:	003e5906 	br	b41c <__alt_data_end+0xff00b41c>
    bab8:	d9402117 	ldw	r5,132(sp)
    babc:	d9002017 	ldw	r4,128(sp)
    bac0:	d9801a04 	addi	r6,sp,104
    bac4:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    bac8:	103f891e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    bacc:	d8801c17 	ldw	r2,112(sp)
    bad0:	d811883a 	mov	r8,sp
    bad4:	003f9506 	br	b92c <__alt_data_end+0xff00b92c>
    bad8:	d9402117 	ldw	r5,132(sp)
    badc:	d9002017 	ldw	r4,128(sp)
    bae0:	d9801a04 	addi	r6,sp,104
    bae4:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    bae8:	103f811e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    baec:	d811883a 	mov	r8,sp
    baf0:	003ced06 	br	aea8 <__alt_data_end+0xff00aea8>
    baf4:	d9402117 	ldw	r5,132(sp)
    baf8:	d9002017 	ldw	r4,128(sp)
    bafc:	d9801a04 	addi	r6,sp,104
    bb00:	da402c15 	stw	r9,176(sp)
    bb04:	db802a15 	stw	r14,168(sp)
    bb08:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    bb0c:	da402c17 	ldw	r9,176(sp)
    bb10:	db802a17 	ldw	r14,168(sp)
    bb14:	103f761e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    bb18:	d9401b17 	ldw	r5,108(sp)
    bb1c:	d8801c17 	ldw	r2,112(sp)
    bb20:	d811883a 	mov	r8,sp
    bb24:	29000044 	addi	r4,r5,1
    bb28:	003d5b06 	br	b098 <__alt_data_end+0xff00b098>
    bb2c:	d9402117 	ldw	r5,132(sp)
    bb30:	d9002017 	ldw	r4,128(sp)
    bb34:	d9801a04 	addi	r6,sp,104
    bb38:	da402c15 	stw	r9,176(sp)
    bb3c:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    bb40:	da402c17 	ldw	r9,176(sp)
    bb44:	103f6a1e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    bb48:	d9401b17 	ldw	r5,108(sp)
    bb4c:	d8801c17 	ldw	r2,112(sp)
    bb50:	d811883a 	mov	r8,sp
    bb54:	29000044 	addi	r4,r5,1
    bb58:	003f1006 	br	b79c <__alt_data_end+0xff00b79c>
    bb5c:	1000c31e 	bne	r2,zero,be6c <___vfiprintf_internal_r+0x12cc>
    bb60:	01000044 	movi	r4,1
    bb64:	000b883a 	mov	r5,zero
    bb68:	d811883a 	mov	r8,sp
    bb6c:	003f0d06 	br	b7a4 <__alt_data_end+0xff00b7a4>
    bb70:	d9402117 	ldw	r5,132(sp)
    bb74:	d9002017 	ldw	r4,128(sp)
    bb78:	d9801a04 	addi	r6,sp,104
    bb7c:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    bb80:	103f5b1e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    bb84:	d9001b17 	ldw	r4,108(sp)
    bb88:	d8801c17 	ldw	r2,112(sp)
    bb8c:	d811883a 	mov	r8,sp
    bb90:	21000044 	addi	r4,r4,1
    bb94:	003d8006 	br	b198 <__alt_data_end+0xff00b198>
    bb98:	01000074 	movhi	r4,1
    bb9c:	21090104 	addi	r4,r4,9220
    bba0:	d9002615 	stw	r4,152(sp)
    bba4:	d8c02215 	stw	r3,136(sp)
    bba8:	1029883a 	mov	r20,r2
    bbac:	94c4b03a 	or	r2,r18,r19
    bbb0:	103fb21e 	bne	r2,zero,ba7c <__alt_data_end+0xff00ba7c>
    bbb4:	0039883a 	mov	fp,zero
    bbb8:	00800084 	movi	r2,2
    bbbc:	003e6b06 	br	b56c <__alt_data_end+0xff00b56c>
    bbc0:	da802217 	ldw	r10,136(sp)
    bbc4:	d8001d85 	stb	zero,118(sp)
    bbc8:	0027883a 	mov	r19,zero
    bbcc:	50800104 	addi	r2,r10,4
    bbd0:	54800017 	ldw	r18,0(r10)
    bbd4:	483e6016 	blt	r9,zero,b558 <__alt_data_end+0xff00b558>
    bbd8:	00ffdfc4 	movi	r3,-129
    bbdc:	d8802215 	stw	r2,136(sp)
    bbe0:	a0e8703a 	and	r20,r20,r3
    bbe4:	0039883a 	mov	fp,zero
    bbe8:	903ebb26 	beq	r18,zero,b6d8 <__alt_data_end+0xff00b6d8>
    bbec:	00800244 	movi	r2,9
    bbf0:	14bdee36 	bltu	r2,r18,b3ac <__alt_data_end+0xff00b3ac>
    bbf4:	003eba06 	br	b6e0 <__alt_data_end+0xff00b6e0>
    bbf8:	00800c04 	movi	r2,48
    bbfc:	d8c01d45 	stb	r3,117(sp)
    bc00:	d8801d05 	stb	r2,116(sp)
    bc04:	d8001d85 	stb	zero,118(sp)
    bc08:	a0c00094 	ori	r3,r20,2
    bc0c:	4800a916 	blt	r9,zero,beb4 <___vfiprintf_internal_r+0x1314>
    bc10:	00bfdfc4 	movi	r2,-129
    bc14:	a096703a 	and	r11,r20,r2
    bc18:	5d000094 	ori	r20,r11,2
    bc1c:	0039883a 	mov	fp,zero
    bc20:	003f9706 	br	ba80 <__alt_data_end+0xff00ba80>
    bc24:	8025883a 	mov	r18,r16
    bc28:	003c2e06 	br	ace4 <__alt_data_end+0xff00ace4>
    bc2c:	00800074 	movhi	r2,1
    bc30:	10890104 	addi	r2,r2,9220
    bc34:	0039883a 	mov	fp,zero
    bc38:	d8802615 	stw	r2,152(sp)
    bc3c:	003f9006 	br	ba80 <__alt_data_end+0xff00ba80>
    bc40:	04a5c83a 	sub	r18,zero,r18
    bc44:	07000b44 	movi	fp,45
    bc48:	9004c03a 	cmpne	r2,r18,zero
    bc4c:	04e7c83a 	sub	r19,zero,r19
    bc50:	df001d85 	stb	fp,118(sp)
    bc54:	98a7c83a 	sub	r19,r19,r2
    bc58:	48009f16 	blt	r9,zero,bed8 <___vfiprintf_internal_r+0x1338>
    bc5c:	00bfdfc4 	movi	r2,-129
    bc60:	a0a8703a 	and	r20,r20,r2
    bc64:	003dd006 	br	b3a8 <__alt_data_end+0xff00b3a8>
    bc68:	70004c26 	beq	r14,zero,bd9c <___vfiprintf_internal_r+0x11fc>
    bc6c:	00800084 	movi	r2,2
    bc70:	d8c01d04 	addi	r3,sp,116
    bc74:	d8c00015 	stw	r3,0(sp)
    bc78:	d8800115 	stw	r2,4(sp)
    bc7c:	01000044 	movi	r4,1
    bc80:	d811883a 	mov	r8,sp
    bc84:	003f7306 	br	ba54 <__alt_data_end+0xff00ba54>
    bc88:	a080100c 	andi	r2,r20,64
    bc8c:	da802217 	ldw	r10,136(sp)
    bc90:	103e0626 	beq	r2,zero,b4ac <__alt_data_end+0xff00b4ac>
    bc94:	5480000f 	ldh	r18,0(r10)
    bc98:	52800104 	addi	r10,r10,4
    bc9c:	da802215 	stw	r10,136(sp)
    bca0:	9027d7fa 	srai	r19,r18,31
    bca4:	9805883a 	mov	r2,r19
    bca8:	003db806 	br	b38c <__alt_data_end+0xff00b38c>
    bcac:	a080040c 	andi	r2,r20,16
    bcb0:	1000091e 	bne	r2,zero,bcd8 <___vfiprintf_internal_r+0x1138>
    bcb4:	a2c0100c 	andi	r11,r20,64
    bcb8:	58000726 	beq	r11,zero,bcd8 <___vfiprintf_internal_r+0x1138>
    bcbc:	da802217 	ldw	r10,136(sp)
    bcc0:	50800017 	ldw	r2,0(r10)
    bcc4:	52800104 	addi	r10,r10,4
    bcc8:	da802215 	stw	r10,136(sp)
    bccc:	da802317 	ldw	r10,140(sp)
    bcd0:	1280000d 	sth	r10,0(r2)
    bcd4:	003be706 	br	ac74 <__alt_data_end+0xff00ac74>
    bcd8:	da802217 	ldw	r10,136(sp)
    bcdc:	50800017 	ldw	r2,0(r10)
    bce0:	52800104 	addi	r10,r10,4
    bce4:	da802215 	stw	r10,136(sp)
    bce8:	da802317 	ldw	r10,140(sp)
    bcec:	12800015 	stw	r10,0(r2)
    bcf0:	003be006 	br	ac74 <__alt_data_end+0xff00ac74>
    bcf4:	a080100c 	andi	r2,r20,64
    bcf8:	da802217 	ldw	r10,136(sp)
    bcfc:	10003026 	beq	r2,zero,bdc0 <___vfiprintf_internal_r+0x1220>
    bd00:	5480000b 	ldhu	r18,0(r10)
    bd04:	52800104 	addi	r10,r10,4
    bd08:	0027883a 	mov	r19,zero
    bd0c:	da802215 	stw	r10,136(sp)
    bd10:	003d8006 	br	b314 <__alt_data_end+0xff00b314>
    bd14:	80c00007 	ldb	r3,0(r16)
    bd18:	003c0006 	br	ad1c <__alt_data_end+0xff00ad1c>
    bd1c:	a080100c 	andi	r2,r20,64
    bd20:	d8001d85 	stb	zero,118(sp)
    bd24:	da802217 	ldw	r10,136(sp)
    bd28:	1000201e 	bne	r2,zero,bdac <___vfiprintf_internal_r+0x120c>
    bd2c:	50800104 	addi	r2,r10,4
    bd30:	54800017 	ldw	r18,0(r10)
    bd34:	0027883a 	mov	r19,zero
    bd38:	483def0e 	bge	r9,zero,b4f8 <__alt_data_end+0xff00b4f8>
    bd3c:	94c6b03a 	or	r3,r18,r19
    bd40:	d8802215 	stw	r2,136(sp)
    bd44:	183d4e1e 	bne	r3,zero,b280 <__alt_data_end+0xff00b280>
    bd48:	0039883a 	mov	fp,zero
    bd4c:	0005883a 	mov	r2,zero
    bd50:	003e0606 	br	b56c <__alt_data_end+0xff00b56c>
    bd54:	d9402117 	ldw	r5,132(sp)
    bd58:	d9002017 	ldw	r4,128(sp)
    bd5c:	d9801a04 	addi	r6,sp,104
    bd60:	da402c15 	stw	r9,176(sp)
    bd64:	db802a15 	stw	r14,168(sp)
    bd68:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    bd6c:	da402c17 	ldw	r9,176(sp)
    bd70:	db802a17 	ldw	r14,168(sp)
    bd74:	103ede1e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    bd78:	d9401b17 	ldw	r5,108(sp)
    bd7c:	d8801c17 	ldw	r2,112(sp)
    bd80:	d811883a 	mov	r8,sp
    bd84:	29000044 	addi	r4,r5,1
    bd88:	003e7406 	br	b75c <__alt_data_end+0xff00b75c>
    bd8c:	00bfffc4 	movi	r2,-1
    bd90:	003c5806 	br	aef4 <__alt_data_end+0xff00aef4>
    bd94:	d811883a 	mov	r8,sp
    bd98:	003ee806 	br	b93c <__alt_data_end+0xff00b93c>
    bd9c:	000b883a 	mov	r5,zero
    bda0:	01000044 	movi	r4,1
    bda4:	d811883a 	mov	r8,sp
    bda8:	003e7c06 	br	b79c <__alt_data_end+0xff00b79c>
    bdac:	50800104 	addi	r2,r10,4
    bdb0:	5480000b 	ldhu	r18,0(r10)
    bdb4:	0027883a 	mov	r19,zero
    bdb8:	483dcf0e 	bge	r9,zero,b4f8 <__alt_data_end+0xff00b4f8>
    bdbc:	003fdf06 	br	bd3c <__alt_data_end+0xff00bd3c>
    bdc0:	54800017 	ldw	r18,0(r10)
    bdc4:	52800104 	addi	r10,r10,4
    bdc8:	0027883a 	mov	r19,zero
    bdcc:	da802215 	stw	r10,136(sp)
    bdd0:	003d5006 	br	b314 <__alt_data_end+0xff00b314>
    bdd4:	50800104 	addi	r2,r10,4
    bdd8:	5480000b 	ldhu	r18,0(r10)
    bddc:	0027883a 	mov	r19,zero
    bde0:	483f7d0e 	bge	r9,zero,bbd8 <__alt_data_end+0xff00bbd8>
    bde4:	003ddc06 	br	b558 <__alt_data_end+0xff00b558>
    bde8:	d8c02215 	stw	r3,136(sp)
    bdec:	0039883a 	mov	fp,zero
    bdf0:	003ddb06 	br	b560 <__alt_data_end+0xff00b560>
    bdf4:	02800074 	movhi	r10,1
    bdf8:	52896204 	addi	r10,r10,9608
    bdfc:	da802415 	stw	r10,144(sp)
    be00:	003e8306 	br	b810 <__alt_data_end+0xff00b810>
    be04:	d8801c17 	ldw	r2,112(sp)
    be08:	dd002117 	ldw	r20,132(sp)
    be0c:	103eb926 	beq	r2,zero,b8f4 <__alt_data_end+0xff00b8f4>
    be10:	d9002017 	ldw	r4,128(sp)
    be14:	d9801a04 	addi	r6,sp,104
    be18:	a00b883a 	mov	r5,r20
    be1c:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    be20:	003eb406 	br	b8f4 <__alt_data_end+0xff00b8f4>
    be24:	80c00043 	ldbu	r3,1(r16)
    be28:	a5000814 	ori	r20,r20,32
    be2c:	84000044 	addi	r16,r16,1
    be30:	18c03fcc 	andi	r3,r3,255
    be34:	18c0201c 	xori	r3,r3,128
    be38:	18ffe004 	addi	r3,r3,-128
    be3c:	003bb706 	br	ad1c <__alt_data_end+0xff00ad1c>
    be40:	a809883a 	mov	r4,r21
    be44:	d8c02a15 	stw	r3,168(sp)
    be48:	da002b15 	stw	r8,172(sp)
    be4c:	0003d540 	call	3d54 <strlen>
    be50:	d8c02a17 	ldw	r3,168(sp)
    be54:	1027883a 	mov	r19,r2
    be58:	df001d83 	ldbu	fp,118(sp)
    be5c:	d8c02215 	stw	r3,136(sp)
    be60:	0013883a 	mov	r9,zero
    be64:	da002b17 	ldw	r8,172(sp)
    be68:	003c4d06 	br	afa0 <__alt_data_end+0xff00afa0>
    be6c:	d9402117 	ldw	r5,132(sp)
    be70:	d9002017 	ldw	r4,128(sp)
    be74:	d9801a04 	addi	r6,sp,104
    be78:	da402c15 	stw	r9,176(sp)
    be7c:	000aa8c0 	call	aa8c <__sprint_r.part.0>
    be80:	da402c17 	ldw	r9,176(sp)
    be84:	103e9a1e 	bne	r2,zero,b8f0 <__alt_data_end+0xff00b8f0>
    be88:	d9401b17 	ldw	r5,108(sp)
    be8c:	d8801c17 	ldw	r2,112(sp)
    be90:	d811883a 	mov	r8,sp
    be94:	29000044 	addi	r4,r5,1
    be98:	003e4206 	br	b7a4 <__alt_data_end+0xff00b7a4>
    be9c:	d9401b17 	ldw	r5,108(sp)
    bea0:	01000074 	movhi	r4,1
    bea4:	21096604 	addi	r4,r4,9624
    bea8:	d9002415 	stw	r4,144(sp)
    beac:	29400044 	addi	r5,r5,1
    beb0:	003c6d06 	br	b068 <__alt_data_end+0xff00b068>
    beb4:	0039883a 	mov	fp,zero
    beb8:	00800084 	movi	r2,2
    bebc:	10803fcc 	andi	r2,r2,255
    bec0:	01000044 	movi	r4,1
    bec4:	11001e26 	beq	r2,r4,bf40 <___vfiprintf_internal_r+0x13a0>
    bec8:	01000084 	movi	r4,2
    becc:	11001e1e 	bne	r2,r4,bf48 <___vfiprintf_internal_r+0x13a8>
    bed0:	1829883a 	mov	r20,r3
    bed4:	003eea06 	br	ba80 <__alt_data_end+0xff00ba80>
    bed8:	a007883a 	mov	r3,r20
    bedc:	00800044 	movi	r2,1
    bee0:	003ff606 	br	bebc <__alt_data_end+0xff00bebc>
    bee4:	00800184 	movi	r2,6
    bee8:	1240012e 	bgeu	r2,r9,bef0 <___vfiprintf_internal_r+0x1350>
    beec:	1013883a 	mov	r9,r2
    bef0:	4827883a 	mov	r19,r9
    bef4:	4825883a 	mov	r18,r9
    bef8:	48001516 	blt	r9,zero,bf50 <___vfiprintf_internal_r+0x13b0>
    befc:	05400074 	movhi	r21,1
    bf00:	d8c02215 	stw	r3,136(sp)
    bf04:	ad490604 	addi	r21,r21,9240
    bf08:	003d1406 	br	b35c <__alt_data_end+0xff00b35c>
    bf0c:	02800074 	movhi	r10,1
    bf10:	52896204 	addi	r10,r10,9608
    bf14:	da802415 	stw	r10,144(sp)
    bf18:	200d883a 	mov	r6,r4
    bf1c:	003c9106 	br	b164 <__alt_data_end+0xff00b164>
    bf20:	5021883a 	mov	r16,r10
    bf24:	0013883a 	mov	r9,zero
    bf28:	003b7d06 	br	ad20 <__alt_data_end+0xff00ad20>
    bf2c:	4827883a 	mov	r19,r9
    bf30:	df001d83 	ldbu	fp,118(sp)
    bf34:	d8c02215 	stw	r3,136(sp)
    bf38:	0013883a 	mov	r9,zero
    bf3c:	003c1806 	br	afa0 <__alt_data_end+0xff00afa0>
    bf40:	1829883a 	mov	r20,r3
    bf44:	003d1806 	br	b3a8 <__alt_data_end+0xff00b3a8>
    bf48:	1829883a 	mov	r20,r3
    bf4c:	003ccd06 	br	b284 <__alt_data_end+0xff00b284>
    bf50:	0025883a 	mov	r18,zero
    bf54:	003fe906 	br	befc <__alt_data_end+0xff00befc>
    bf58:	d8802217 	ldw	r2,136(sp)
    bf5c:	80c00043 	ldbu	r3,1(r16)
    bf60:	5021883a 	mov	r16,r10
    bf64:	12400017 	ldw	r9,0(r2)
    bf68:	10800104 	addi	r2,r2,4
    bf6c:	d8802215 	stw	r2,136(sp)
    bf70:	483faf0e 	bge	r9,zero,be30 <__alt_data_end+0xff00be30>
    bf74:	18c03fcc 	andi	r3,r3,255
    bf78:	18c0201c 	xori	r3,r3,128
    bf7c:	027fffc4 	movi	r9,-1
    bf80:	18ffe004 	addi	r3,r3,-128
    bf84:	003b6506 	br	ad1c <__alt_data_end+0xff00ad1c>
    bf88:	d9c01d85 	stb	r7,118(sp)
    bf8c:	003ca006 	br	b210 <__alt_data_end+0xff00b210>
    bf90:	d9c01d85 	stb	r7,118(sp)
    bf94:	003cad06 	br	b24c <__alt_data_end+0xff00b24c>
    bf98:	d9c01d85 	stb	r7,118(sp)
    bf9c:	003d7d06 	br	b594 <__alt_data_end+0xff00b594>
    bfa0:	d9c01d85 	stb	r7,118(sp)
    bfa4:	003d5f06 	br	b524 <__alt_data_end+0xff00b524>
    bfa8:	a080004c 	andi	r2,r20,1
    bfac:	0039883a 	mov	fp,zero
    bfb0:	10000526 	beq	r2,zero,bfc8 <___vfiprintf_internal_r+0x1428>
    bfb4:	00800c04 	movi	r2,48
    bfb8:	d88019c5 	stb	r2,103(sp)
    bfbc:	dcc02717 	ldw	r19,156(sp)
    bfc0:	dd4019c4 	addi	r21,sp,103
    bfc4:	003bf606 	br	afa0 <__alt_data_end+0xff00afa0>
    bfc8:	0027883a 	mov	r19,zero
    bfcc:	dd401a04 	addi	r21,sp,104
    bfd0:	003bf306 	br	afa0 <__alt_data_end+0xff00afa0>
    bfd4:	d9c01d85 	stb	r7,118(sp)
    bfd8:	003dc806 	br	b6fc <__alt_data_end+0xff00b6fc>
    bfdc:	d9c01d85 	stb	r7,118(sp)
    bfe0:	003d3a06 	br	b4cc <__alt_data_end+0xff00b4cc>
    bfe4:	d9c01d85 	stb	r7,118(sp)
    bfe8:	003d2a06 	br	b494 <__alt_data_end+0xff00b494>
    bfec:	d9c01d85 	stb	r7,118(sp)
    bff0:	003cde06 	br	b36c <__alt_data_end+0xff00b36c>
    bff4:	d9c01d85 	stb	r7,118(sp)
    bff8:	003cbc06 	br	b2ec <__alt_data_end+0xff00b2ec>

0000bffc <__vfiprintf_internal>:
    bffc:	00800074 	movhi	r2,1
    c000:	10902504 	addi	r2,r2,16532
    c004:	300f883a 	mov	r7,r6
    c008:	280d883a 	mov	r6,r5
    c00c:	200b883a 	mov	r5,r4
    c010:	11000017 	ldw	r4,0(r2)
    c014:	000aba01 	jmpi	aba0 <___vfiprintf_internal_r>

0000c018 <__sbprintf>:
    c018:	2880030b 	ldhu	r2,12(r5)
    c01c:	2ac01917 	ldw	r11,100(r5)
    c020:	2a80038b 	ldhu	r10,14(r5)
    c024:	2a400717 	ldw	r9,28(r5)
    c028:	2a000917 	ldw	r8,36(r5)
    c02c:	defee204 	addi	sp,sp,-1144
    c030:	00c10004 	movi	r3,1024
    c034:	dc011a15 	stw	r16,1128(sp)
    c038:	10bfff4c 	andi	r2,r2,65533
    c03c:	2821883a 	mov	r16,r5
    c040:	d8cb883a 	add	r5,sp,r3
    c044:	dc811c15 	stw	r18,1136(sp)
    c048:	dc411b15 	stw	r17,1132(sp)
    c04c:	dfc11d15 	stw	ra,1140(sp)
    c050:	2025883a 	mov	r18,r4
    c054:	d881030d 	sth	r2,1036(sp)
    c058:	dac11915 	stw	r11,1124(sp)
    c05c:	da81038d 	sth	r10,1038(sp)
    c060:	da410715 	stw	r9,1052(sp)
    c064:	da010915 	stw	r8,1060(sp)
    c068:	dec10015 	stw	sp,1024(sp)
    c06c:	dec10415 	stw	sp,1040(sp)
    c070:	d8c10215 	stw	r3,1032(sp)
    c074:	d8c10515 	stw	r3,1044(sp)
    c078:	d8010615 	stw	zero,1048(sp)
    c07c:	000aba00 	call	aba0 <___vfiprintf_internal_r>
    c080:	1023883a 	mov	r17,r2
    c084:	10000416 	blt	r2,zero,c098 <__sbprintf+0x80>
    c088:	d9410004 	addi	r5,sp,1024
    c08c:	9009883a 	mov	r4,r18
    c090:	0007cb40 	call	7cb4 <_fflush_r>
    c094:	10000d1e 	bne	r2,zero,c0cc <__sbprintf+0xb4>
    c098:	d881030b 	ldhu	r2,1036(sp)
    c09c:	1080100c 	andi	r2,r2,64
    c0a0:	10000326 	beq	r2,zero,c0b0 <__sbprintf+0x98>
    c0a4:	8080030b 	ldhu	r2,12(r16)
    c0a8:	10801014 	ori	r2,r2,64
    c0ac:	8080030d 	sth	r2,12(r16)
    c0b0:	8805883a 	mov	r2,r17
    c0b4:	dfc11d17 	ldw	ra,1140(sp)
    c0b8:	dc811c17 	ldw	r18,1136(sp)
    c0bc:	dc411b17 	ldw	r17,1132(sp)
    c0c0:	dc011a17 	ldw	r16,1128(sp)
    c0c4:	dec11e04 	addi	sp,sp,1144
    c0c8:	f800283a 	ret
    c0cc:	047fffc4 	movi	r17,-1
    c0d0:	003ff106 	br	c098 <__alt_data_end+0xff00c098>

0000c0d4 <_write_r>:
    c0d4:	defffd04 	addi	sp,sp,-12
    c0d8:	2805883a 	mov	r2,r5
    c0dc:	dc000015 	stw	r16,0(sp)
    c0e0:	04000074 	movhi	r16,1
    c0e4:	dc400115 	stw	r17,4(sp)
    c0e8:	300b883a 	mov	r5,r6
    c0ec:	8416fc04 	addi	r16,r16,23536
    c0f0:	2023883a 	mov	r17,r4
    c0f4:	380d883a 	mov	r6,r7
    c0f8:	1009883a 	mov	r4,r2
    c0fc:	dfc00215 	stw	ra,8(sp)
    c100:	80000015 	stw	zero,0(r16)
    c104:	000fc780 	call	fc78 <write>
    c108:	00ffffc4 	movi	r3,-1
    c10c:	10c00526 	beq	r2,r3,c124 <_write_r+0x50>
    c110:	dfc00217 	ldw	ra,8(sp)
    c114:	dc400117 	ldw	r17,4(sp)
    c118:	dc000017 	ldw	r16,0(sp)
    c11c:	dec00304 	addi	sp,sp,12
    c120:	f800283a 	ret
    c124:	80c00017 	ldw	r3,0(r16)
    c128:	183ff926 	beq	r3,zero,c110 <__alt_data_end+0xff00c110>
    c12c:	88c00015 	stw	r3,0(r17)
    c130:	003ff706 	br	c110 <__alt_data_end+0xff00c110>

0000c134 <_close_r>:
    c134:	defffd04 	addi	sp,sp,-12
    c138:	dc000015 	stw	r16,0(sp)
    c13c:	04000074 	movhi	r16,1
    c140:	dc400115 	stw	r17,4(sp)
    c144:	8416fc04 	addi	r16,r16,23536
    c148:	2023883a 	mov	r17,r4
    c14c:	2809883a 	mov	r4,r5
    c150:	dfc00215 	stw	ra,8(sp)
    c154:	80000015 	stw	zero,0(r16)
    c158:	000f4380 	call	f438 <close>
    c15c:	00ffffc4 	movi	r3,-1
    c160:	10c00526 	beq	r2,r3,c178 <_close_r+0x44>
    c164:	dfc00217 	ldw	ra,8(sp)
    c168:	dc400117 	ldw	r17,4(sp)
    c16c:	dc000017 	ldw	r16,0(sp)
    c170:	dec00304 	addi	sp,sp,12
    c174:	f800283a 	ret
    c178:	80c00017 	ldw	r3,0(r16)
    c17c:	183ff926 	beq	r3,zero,c164 <__alt_data_end+0xff00c164>
    c180:	88c00015 	stw	r3,0(r17)
    c184:	003ff706 	br	c164 <__alt_data_end+0xff00c164>

0000c188 <_calloc_r>:
    c188:	298b383a 	mul	r5,r5,r6
    c18c:	defffe04 	addi	sp,sp,-8
    c190:	dfc00115 	stw	ra,4(sp)
    c194:	dc000015 	stw	r16,0(sp)
    c198:	00033b40 	call	33b4 <_malloc_r>
    c19c:	10002926 	beq	r2,zero,c244 <_calloc_r+0xbc>
    c1a0:	11bfff17 	ldw	r6,-4(r2)
    c1a4:	1021883a 	mov	r16,r2
    c1a8:	00bfff04 	movi	r2,-4
    c1ac:	308c703a 	and	r6,r6,r2
    c1b0:	00c00904 	movi	r3,36
    c1b4:	308d883a 	add	r6,r6,r2
    c1b8:	19801636 	bltu	r3,r6,c214 <_calloc_r+0x8c>
    c1bc:	008004c4 	movi	r2,19
    c1c0:	11800b2e 	bgeu	r2,r6,c1f0 <_calloc_r+0x68>
    c1c4:	80000015 	stw	zero,0(r16)
    c1c8:	80000115 	stw	zero,4(r16)
    c1cc:	008006c4 	movi	r2,27
    c1d0:	11801a2e 	bgeu	r2,r6,c23c <_calloc_r+0xb4>
    c1d4:	80000215 	stw	zero,8(r16)
    c1d8:	80000315 	stw	zero,12(r16)
    c1dc:	30c0151e 	bne	r6,r3,c234 <_calloc_r+0xac>
    c1e0:	80000415 	stw	zero,16(r16)
    c1e4:	80800604 	addi	r2,r16,24
    c1e8:	80000515 	stw	zero,20(r16)
    c1ec:	00000106 	br	c1f4 <_calloc_r+0x6c>
    c1f0:	8005883a 	mov	r2,r16
    c1f4:	10000015 	stw	zero,0(r2)
    c1f8:	10000115 	stw	zero,4(r2)
    c1fc:	10000215 	stw	zero,8(r2)
    c200:	8005883a 	mov	r2,r16
    c204:	dfc00117 	ldw	ra,4(sp)
    c208:	dc000017 	ldw	r16,0(sp)
    c20c:	dec00204 	addi	sp,sp,8
    c210:	f800283a 	ret
    c214:	000b883a 	mov	r5,zero
    c218:	8009883a 	mov	r4,r16
    c21c:	00091780 	call	9178 <memset>
    c220:	8005883a 	mov	r2,r16
    c224:	dfc00117 	ldw	ra,4(sp)
    c228:	dc000017 	ldw	r16,0(sp)
    c22c:	dec00204 	addi	sp,sp,8
    c230:	f800283a 	ret
    c234:	80800404 	addi	r2,r16,16
    c238:	003fee06 	br	c1f4 <__alt_data_end+0xff00c1f4>
    c23c:	80800204 	addi	r2,r16,8
    c240:	003fec06 	br	c1f4 <__alt_data_end+0xff00c1f4>
    c244:	0005883a 	mov	r2,zero
    c248:	003fee06 	br	c204 <__alt_data_end+0xff00c204>

0000c24c <_fclose_r>:
    c24c:	28003926 	beq	r5,zero,c334 <_fclose_r+0xe8>
    c250:	defffc04 	addi	sp,sp,-16
    c254:	dc400115 	stw	r17,4(sp)
    c258:	dc000015 	stw	r16,0(sp)
    c25c:	dfc00315 	stw	ra,12(sp)
    c260:	dc800215 	stw	r18,8(sp)
    c264:	2023883a 	mov	r17,r4
    c268:	2821883a 	mov	r16,r5
    c26c:	20000226 	beq	r4,zero,c278 <_fclose_r+0x2c>
    c270:	20800e17 	ldw	r2,56(r4)
    c274:	10002726 	beq	r2,zero,c314 <_fclose_r+0xc8>
    c278:	8080030f 	ldh	r2,12(r16)
    c27c:	1000071e 	bne	r2,zero,c29c <_fclose_r+0x50>
    c280:	0005883a 	mov	r2,zero
    c284:	dfc00317 	ldw	ra,12(sp)
    c288:	dc800217 	ldw	r18,8(sp)
    c28c:	dc400117 	ldw	r17,4(sp)
    c290:	dc000017 	ldw	r16,0(sp)
    c294:	dec00404 	addi	sp,sp,16
    c298:	f800283a 	ret
    c29c:	800b883a 	mov	r5,r16
    c2a0:	8809883a 	mov	r4,r17
    c2a4:	0007a980 	call	7a98 <__sflush_r>
    c2a8:	1025883a 	mov	r18,r2
    c2ac:	80800b17 	ldw	r2,44(r16)
    c2b0:	10000426 	beq	r2,zero,c2c4 <_fclose_r+0x78>
    c2b4:	81400717 	ldw	r5,28(r16)
    c2b8:	8809883a 	mov	r4,r17
    c2bc:	103ee83a 	callr	r2
    c2c0:	10001616 	blt	r2,zero,c31c <_fclose_r+0xd0>
    c2c4:	8080030b 	ldhu	r2,12(r16)
    c2c8:	1080200c 	andi	r2,r2,128
    c2cc:	1000151e 	bne	r2,zero,c324 <_fclose_r+0xd8>
    c2d0:	81400c17 	ldw	r5,48(r16)
    c2d4:	28000526 	beq	r5,zero,c2ec <_fclose_r+0xa0>
    c2d8:	80801004 	addi	r2,r16,64
    c2dc:	28800226 	beq	r5,r2,c2e8 <_fclose_r+0x9c>
    c2e0:	8809883a 	mov	r4,r17
    c2e4:	00082040 	call	8204 <_free_r>
    c2e8:	80000c15 	stw	zero,48(r16)
    c2ec:	81401117 	ldw	r5,68(r16)
    c2f0:	28000326 	beq	r5,zero,c300 <_fclose_r+0xb4>
    c2f4:	8809883a 	mov	r4,r17
    c2f8:	00082040 	call	8204 <_free_r>
    c2fc:	80001115 	stw	zero,68(r16)
    c300:	00080a00 	call	80a0 <__sfp_lock_acquire>
    c304:	8000030d 	sth	zero,12(r16)
    c308:	00080a40 	call	80a4 <__sfp_lock_release>
    c30c:	9005883a 	mov	r2,r18
    c310:	003fdc06 	br	c284 <__alt_data_end+0xff00c284>
    c314:	00080900 	call	8090 <__sinit>
    c318:	003fd706 	br	c278 <__alt_data_end+0xff00c278>
    c31c:	04bfffc4 	movi	r18,-1
    c320:	003fe806 	br	c2c4 <__alt_data_end+0xff00c2c4>
    c324:	81400417 	ldw	r5,16(r16)
    c328:	8809883a 	mov	r4,r17
    c32c:	00082040 	call	8204 <_free_r>
    c330:	003fe706 	br	c2d0 <__alt_data_end+0xff00c2d0>
    c334:	0005883a 	mov	r2,zero
    c338:	f800283a 	ret

0000c33c <fclose>:
    c33c:	00800074 	movhi	r2,1
    c340:	10902504 	addi	r2,r2,16532
    c344:	200b883a 	mov	r5,r4
    c348:	11000017 	ldw	r4,0(r2)
    c34c:	000c24c1 	jmpi	c24c <_fclose_r>

0000c350 <__fputwc>:
    c350:	defff804 	addi	sp,sp,-32
    c354:	dcc00415 	stw	r19,16(sp)
    c358:	dc800315 	stw	r18,12(sp)
    c35c:	dc000115 	stw	r16,4(sp)
    c360:	dfc00715 	stw	ra,28(sp)
    c364:	dd400615 	stw	r21,24(sp)
    c368:	dd000515 	stw	r20,20(sp)
    c36c:	dc400215 	stw	r17,8(sp)
    c370:	2027883a 	mov	r19,r4
    c374:	2825883a 	mov	r18,r5
    c378:	3021883a 	mov	r16,r6
    c37c:	0008be00 	call	8be0 <__locale_mb_cur_max>
    c380:	00c00044 	movi	r3,1
    c384:	10c03e26 	beq	r2,r3,c480 <__fputwc+0x130>
    c388:	81c01704 	addi	r7,r16,92
    c38c:	900d883a 	mov	r6,r18
    c390:	d80b883a 	mov	r5,sp
    c394:	9809883a 	mov	r4,r19
    c398:	000c8200 	call	c820 <_wcrtomb_r>
    c39c:	1029883a 	mov	r20,r2
    c3a0:	00bfffc4 	movi	r2,-1
    c3a4:	a0802026 	beq	r20,r2,c428 <__fputwc+0xd8>
    c3a8:	d9400003 	ldbu	r5,0(sp)
    c3ac:	a0001c26 	beq	r20,zero,c420 <__fputwc+0xd0>
    c3b0:	0023883a 	mov	r17,zero
    c3b4:	05400284 	movi	r21,10
    c3b8:	00000906 	br	c3e0 <__fputwc+0x90>
    c3bc:	80800017 	ldw	r2,0(r16)
    c3c0:	11400005 	stb	r5,0(r2)
    c3c4:	80c00017 	ldw	r3,0(r16)
    c3c8:	18c00044 	addi	r3,r3,1
    c3cc:	80c00015 	stw	r3,0(r16)
    c3d0:	8c400044 	addi	r17,r17,1
    c3d4:	dc45883a 	add	r2,sp,r17
    c3d8:	8d00112e 	bgeu	r17,r20,c420 <__fputwc+0xd0>
    c3dc:	11400003 	ldbu	r5,0(r2)
    c3e0:	80c00217 	ldw	r3,8(r16)
    c3e4:	18ffffc4 	addi	r3,r3,-1
    c3e8:	80c00215 	stw	r3,8(r16)
    c3ec:	183ff30e 	bge	r3,zero,c3bc <__alt_data_end+0xff00c3bc>
    c3f0:	80800617 	ldw	r2,24(r16)
    c3f4:	18801916 	blt	r3,r2,c45c <__fputwc+0x10c>
    c3f8:	80800017 	ldw	r2,0(r16)
    c3fc:	11400005 	stb	r5,0(r2)
    c400:	80800017 	ldw	r2,0(r16)
    c404:	10c00003 	ldbu	r3,0(r2)
    c408:	10800044 	addi	r2,r2,1
    c40c:	1d402326 	beq	r3,r21,c49c <__fputwc+0x14c>
    c410:	80800015 	stw	r2,0(r16)
    c414:	8c400044 	addi	r17,r17,1
    c418:	dc45883a 	add	r2,sp,r17
    c41c:	8d3fef36 	bltu	r17,r20,c3dc <__alt_data_end+0xff00c3dc>
    c420:	9005883a 	mov	r2,r18
    c424:	00000406 	br	c438 <__fputwc+0xe8>
    c428:	80c0030b 	ldhu	r3,12(r16)
    c42c:	a005883a 	mov	r2,r20
    c430:	18c01014 	ori	r3,r3,64
    c434:	80c0030d 	sth	r3,12(r16)
    c438:	dfc00717 	ldw	ra,28(sp)
    c43c:	dd400617 	ldw	r21,24(sp)
    c440:	dd000517 	ldw	r20,20(sp)
    c444:	dcc00417 	ldw	r19,16(sp)
    c448:	dc800317 	ldw	r18,12(sp)
    c44c:	dc400217 	ldw	r17,8(sp)
    c450:	dc000117 	ldw	r16,4(sp)
    c454:	dec00804 	addi	sp,sp,32
    c458:	f800283a 	ret
    c45c:	800d883a 	mov	r6,r16
    c460:	29403fcc 	andi	r5,r5,255
    c464:	9809883a 	mov	r4,r19
    c468:	000c6c80 	call	c6c8 <__swbuf_r>
    c46c:	10bfffe0 	cmpeqi	r2,r2,-1
    c470:	10803fcc 	andi	r2,r2,255
    c474:	103fd626 	beq	r2,zero,c3d0 <__alt_data_end+0xff00c3d0>
    c478:	00bfffc4 	movi	r2,-1
    c47c:	003fee06 	br	c438 <__alt_data_end+0xff00c438>
    c480:	90ffffc4 	addi	r3,r18,-1
    c484:	01003f84 	movi	r4,254
    c488:	20ffbf36 	bltu	r4,r3,c388 <__alt_data_end+0xff00c388>
    c48c:	900b883a 	mov	r5,r18
    c490:	dc800005 	stb	r18,0(sp)
    c494:	1029883a 	mov	r20,r2
    c498:	003fc506 	br	c3b0 <__alt_data_end+0xff00c3b0>
    c49c:	800d883a 	mov	r6,r16
    c4a0:	a80b883a 	mov	r5,r21
    c4a4:	9809883a 	mov	r4,r19
    c4a8:	000c6c80 	call	c6c8 <__swbuf_r>
    c4ac:	10bfffe0 	cmpeqi	r2,r2,-1
    c4b0:	003fef06 	br	c470 <__alt_data_end+0xff00c470>

0000c4b4 <_fputwc_r>:
    c4b4:	3080030b 	ldhu	r2,12(r6)
    c4b8:	10c8000c 	andi	r3,r2,8192
    c4bc:	1800051e 	bne	r3,zero,c4d4 <_fputwc_r+0x20>
    c4c0:	30c01917 	ldw	r3,100(r6)
    c4c4:	10880014 	ori	r2,r2,8192
    c4c8:	3080030d 	sth	r2,12(r6)
    c4cc:	18880014 	ori	r2,r3,8192
    c4d0:	30801915 	stw	r2,100(r6)
    c4d4:	000c3501 	jmpi	c350 <__fputwc>

0000c4d8 <fputwc>:
    c4d8:	00800074 	movhi	r2,1
    c4dc:	defffc04 	addi	sp,sp,-16
    c4e0:	10902504 	addi	r2,r2,16532
    c4e4:	dc000115 	stw	r16,4(sp)
    c4e8:	14000017 	ldw	r16,0(r2)
    c4ec:	dc400215 	stw	r17,8(sp)
    c4f0:	dfc00315 	stw	ra,12(sp)
    c4f4:	2023883a 	mov	r17,r4
    c4f8:	80000226 	beq	r16,zero,c504 <fputwc+0x2c>
    c4fc:	80800e17 	ldw	r2,56(r16)
    c500:	10001026 	beq	r2,zero,c544 <fputwc+0x6c>
    c504:	2880030b 	ldhu	r2,12(r5)
    c508:	10c8000c 	andi	r3,r2,8192
    c50c:	1800051e 	bne	r3,zero,c524 <fputwc+0x4c>
    c510:	28c01917 	ldw	r3,100(r5)
    c514:	10880014 	ori	r2,r2,8192
    c518:	2880030d 	sth	r2,12(r5)
    c51c:	18880014 	ori	r2,r3,8192
    c520:	28801915 	stw	r2,100(r5)
    c524:	280d883a 	mov	r6,r5
    c528:	8009883a 	mov	r4,r16
    c52c:	880b883a 	mov	r5,r17
    c530:	dfc00317 	ldw	ra,12(sp)
    c534:	dc400217 	ldw	r17,8(sp)
    c538:	dc000117 	ldw	r16,4(sp)
    c53c:	dec00404 	addi	sp,sp,16
    c540:	000c3501 	jmpi	c350 <__fputwc>
    c544:	8009883a 	mov	r4,r16
    c548:	d9400015 	stw	r5,0(sp)
    c54c:	00080900 	call	8090 <__sinit>
    c550:	d9400017 	ldw	r5,0(sp)
    c554:	003feb06 	br	c504 <__alt_data_end+0xff00c504>

0000c558 <_fstat_r>:
    c558:	defffd04 	addi	sp,sp,-12
    c55c:	2805883a 	mov	r2,r5
    c560:	dc000015 	stw	r16,0(sp)
    c564:	04000074 	movhi	r16,1
    c568:	dc400115 	stw	r17,4(sp)
    c56c:	8416fc04 	addi	r16,r16,23536
    c570:	2023883a 	mov	r17,r4
    c574:	300b883a 	mov	r5,r6
    c578:	1009883a 	mov	r4,r2
    c57c:	dfc00215 	stw	ra,8(sp)
    c580:	80000015 	stw	zero,0(r16)
    c584:	000f5700 	call	f570 <fstat>
    c588:	00ffffc4 	movi	r3,-1
    c58c:	10c00526 	beq	r2,r3,c5a4 <_fstat_r+0x4c>
    c590:	dfc00217 	ldw	ra,8(sp)
    c594:	dc400117 	ldw	r17,4(sp)
    c598:	dc000017 	ldw	r16,0(sp)
    c59c:	dec00304 	addi	sp,sp,12
    c5a0:	f800283a 	ret
    c5a4:	80c00017 	ldw	r3,0(r16)
    c5a8:	183ff926 	beq	r3,zero,c590 <__alt_data_end+0xff00c590>
    c5ac:	88c00015 	stw	r3,0(r17)
    c5b0:	003ff706 	br	c590 <__alt_data_end+0xff00c590>

0000c5b4 <_isatty_r>:
    c5b4:	defffd04 	addi	sp,sp,-12
    c5b8:	dc000015 	stw	r16,0(sp)
    c5bc:	04000074 	movhi	r16,1
    c5c0:	dc400115 	stw	r17,4(sp)
    c5c4:	8416fc04 	addi	r16,r16,23536
    c5c8:	2023883a 	mov	r17,r4
    c5cc:	2809883a 	mov	r4,r5
    c5d0:	dfc00215 	stw	ra,8(sp)
    c5d4:	80000015 	stw	zero,0(r16)
    c5d8:	000f65c0 	call	f65c <isatty>
    c5dc:	00ffffc4 	movi	r3,-1
    c5e0:	10c00526 	beq	r2,r3,c5f8 <_isatty_r+0x44>
    c5e4:	dfc00217 	ldw	ra,8(sp)
    c5e8:	dc400117 	ldw	r17,4(sp)
    c5ec:	dc000017 	ldw	r16,0(sp)
    c5f0:	dec00304 	addi	sp,sp,12
    c5f4:	f800283a 	ret
    c5f8:	80c00017 	ldw	r3,0(r16)
    c5fc:	183ff926 	beq	r3,zero,c5e4 <__alt_data_end+0xff00c5e4>
    c600:	88c00015 	stw	r3,0(r17)
    c604:	003ff706 	br	c5e4 <__alt_data_end+0xff00c5e4>

0000c608 <_lseek_r>:
    c608:	defffd04 	addi	sp,sp,-12
    c60c:	2805883a 	mov	r2,r5
    c610:	dc000015 	stw	r16,0(sp)
    c614:	04000074 	movhi	r16,1
    c618:	dc400115 	stw	r17,4(sp)
    c61c:	300b883a 	mov	r5,r6
    c620:	8416fc04 	addi	r16,r16,23536
    c624:	2023883a 	mov	r17,r4
    c628:	380d883a 	mov	r6,r7
    c62c:	1009883a 	mov	r4,r2
    c630:	dfc00215 	stw	ra,8(sp)
    c634:	80000015 	stw	zero,0(r16)
    c638:	000f8280 	call	f828 <lseek>
    c63c:	00ffffc4 	movi	r3,-1
    c640:	10c00526 	beq	r2,r3,c658 <_lseek_r+0x50>
    c644:	dfc00217 	ldw	ra,8(sp)
    c648:	dc400117 	ldw	r17,4(sp)
    c64c:	dc000017 	ldw	r16,0(sp)
    c650:	dec00304 	addi	sp,sp,12
    c654:	f800283a 	ret
    c658:	80c00017 	ldw	r3,0(r16)
    c65c:	183ff926 	beq	r3,zero,c644 <__alt_data_end+0xff00c644>
    c660:	88c00015 	stw	r3,0(r17)
    c664:	003ff706 	br	c644 <__alt_data_end+0xff00c644>

0000c668 <_read_r>:
    c668:	defffd04 	addi	sp,sp,-12
    c66c:	2805883a 	mov	r2,r5
    c670:	dc000015 	stw	r16,0(sp)
    c674:	04000074 	movhi	r16,1
    c678:	dc400115 	stw	r17,4(sp)
    c67c:	300b883a 	mov	r5,r6
    c680:	8416fc04 	addi	r16,r16,23536
    c684:	2023883a 	mov	r17,r4
    c688:	380d883a 	mov	r6,r7
    c68c:	1009883a 	mov	r4,r2
    c690:	dfc00215 	stw	ra,8(sp)
    c694:	80000015 	stw	zero,0(r16)
    c698:	000f9fc0 	call	f9fc <read>
    c69c:	00ffffc4 	movi	r3,-1
    c6a0:	10c00526 	beq	r2,r3,c6b8 <_read_r+0x50>
    c6a4:	dfc00217 	ldw	ra,8(sp)
    c6a8:	dc400117 	ldw	r17,4(sp)
    c6ac:	dc000017 	ldw	r16,0(sp)
    c6b0:	dec00304 	addi	sp,sp,12
    c6b4:	f800283a 	ret
    c6b8:	80c00017 	ldw	r3,0(r16)
    c6bc:	183ff926 	beq	r3,zero,c6a4 <__alt_data_end+0xff00c6a4>
    c6c0:	88c00015 	stw	r3,0(r17)
    c6c4:	003ff706 	br	c6a4 <__alt_data_end+0xff00c6a4>

0000c6c8 <__swbuf_r>:
    c6c8:	defffb04 	addi	sp,sp,-20
    c6cc:	dcc00315 	stw	r19,12(sp)
    c6d0:	dc800215 	stw	r18,8(sp)
    c6d4:	dc000015 	stw	r16,0(sp)
    c6d8:	dfc00415 	stw	ra,16(sp)
    c6dc:	dc400115 	stw	r17,4(sp)
    c6e0:	2025883a 	mov	r18,r4
    c6e4:	2827883a 	mov	r19,r5
    c6e8:	3021883a 	mov	r16,r6
    c6ec:	20000226 	beq	r4,zero,c6f8 <__swbuf_r+0x30>
    c6f0:	20800e17 	ldw	r2,56(r4)
    c6f4:	10004226 	beq	r2,zero,c800 <__swbuf_r+0x138>
    c6f8:	80800617 	ldw	r2,24(r16)
    c6fc:	8100030b 	ldhu	r4,12(r16)
    c700:	80800215 	stw	r2,8(r16)
    c704:	2080020c 	andi	r2,r4,8
    c708:	10003626 	beq	r2,zero,c7e4 <__swbuf_r+0x11c>
    c70c:	80c00417 	ldw	r3,16(r16)
    c710:	18003426 	beq	r3,zero,c7e4 <__swbuf_r+0x11c>
    c714:	2088000c 	andi	r2,r4,8192
    c718:	9c403fcc 	andi	r17,r19,255
    c71c:	10001a26 	beq	r2,zero,c788 <__swbuf_r+0xc0>
    c720:	80800017 	ldw	r2,0(r16)
    c724:	81000517 	ldw	r4,20(r16)
    c728:	10c7c83a 	sub	r3,r2,r3
    c72c:	1900200e 	bge	r3,r4,c7b0 <__swbuf_r+0xe8>
    c730:	18c00044 	addi	r3,r3,1
    c734:	81000217 	ldw	r4,8(r16)
    c738:	11400044 	addi	r5,r2,1
    c73c:	81400015 	stw	r5,0(r16)
    c740:	213fffc4 	addi	r4,r4,-1
    c744:	81000215 	stw	r4,8(r16)
    c748:	14c00005 	stb	r19,0(r2)
    c74c:	80800517 	ldw	r2,20(r16)
    c750:	10c01e26 	beq	r2,r3,c7cc <__swbuf_r+0x104>
    c754:	8080030b 	ldhu	r2,12(r16)
    c758:	1080004c 	andi	r2,r2,1
    c75c:	10000226 	beq	r2,zero,c768 <__swbuf_r+0xa0>
    c760:	00800284 	movi	r2,10
    c764:	88801926 	beq	r17,r2,c7cc <__swbuf_r+0x104>
    c768:	8805883a 	mov	r2,r17
    c76c:	dfc00417 	ldw	ra,16(sp)
    c770:	dcc00317 	ldw	r19,12(sp)
    c774:	dc800217 	ldw	r18,8(sp)
    c778:	dc400117 	ldw	r17,4(sp)
    c77c:	dc000017 	ldw	r16,0(sp)
    c780:	dec00504 	addi	sp,sp,20
    c784:	f800283a 	ret
    c788:	81401917 	ldw	r5,100(r16)
    c78c:	00b7ffc4 	movi	r2,-8193
    c790:	21080014 	ori	r4,r4,8192
    c794:	2884703a 	and	r2,r5,r2
    c798:	80801915 	stw	r2,100(r16)
    c79c:	80800017 	ldw	r2,0(r16)
    c7a0:	8100030d 	sth	r4,12(r16)
    c7a4:	81000517 	ldw	r4,20(r16)
    c7a8:	10c7c83a 	sub	r3,r2,r3
    c7ac:	193fe016 	blt	r3,r4,c730 <__alt_data_end+0xff00c730>
    c7b0:	800b883a 	mov	r5,r16
    c7b4:	9009883a 	mov	r4,r18
    c7b8:	0007cb40 	call	7cb4 <_fflush_r>
    c7bc:	1000071e 	bne	r2,zero,c7dc <__swbuf_r+0x114>
    c7c0:	80800017 	ldw	r2,0(r16)
    c7c4:	00c00044 	movi	r3,1
    c7c8:	003fda06 	br	c734 <__alt_data_end+0xff00c734>
    c7cc:	800b883a 	mov	r5,r16
    c7d0:	9009883a 	mov	r4,r18
    c7d4:	0007cb40 	call	7cb4 <_fflush_r>
    c7d8:	103fe326 	beq	r2,zero,c768 <__alt_data_end+0xff00c768>
    c7dc:	00bfffc4 	movi	r2,-1
    c7e0:	003fe206 	br	c76c <__alt_data_end+0xff00c76c>
    c7e4:	800b883a 	mov	r5,r16
    c7e8:	9009883a 	mov	r4,r18
    c7ec:	00060bc0 	call	60bc <__swsetup_r>
    c7f0:	103ffa1e 	bne	r2,zero,c7dc <__alt_data_end+0xff00c7dc>
    c7f4:	8100030b 	ldhu	r4,12(r16)
    c7f8:	80c00417 	ldw	r3,16(r16)
    c7fc:	003fc506 	br	c714 <__alt_data_end+0xff00c714>
    c800:	00080900 	call	8090 <__sinit>
    c804:	003fbc06 	br	c6f8 <__alt_data_end+0xff00c6f8>

0000c808 <__swbuf>:
    c808:	00800074 	movhi	r2,1
    c80c:	10902504 	addi	r2,r2,16532
    c810:	280d883a 	mov	r6,r5
    c814:	200b883a 	mov	r5,r4
    c818:	11000017 	ldw	r4,0(r2)
    c81c:	000c6c81 	jmpi	c6c8 <__swbuf_r>

0000c820 <_wcrtomb_r>:
    c820:	defff604 	addi	sp,sp,-40
    c824:	00800074 	movhi	r2,1
    c828:	dc800815 	stw	r18,32(sp)
    c82c:	dc400715 	stw	r17,28(sp)
    c830:	dc000615 	stw	r16,24(sp)
    c834:	10902704 	addi	r2,r2,16540
    c838:	dfc00915 	stw	ra,36(sp)
    c83c:	2021883a 	mov	r16,r4
    c840:	3823883a 	mov	r17,r7
    c844:	14800017 	ldw	r18,0(r2)
    c848:	28001426 	beq	r5,zero,c89c <_wcrtomb_r+0x7c>
    c84c:	d9400415 	stw	r5,16(sp)
    c850:	d9800515 	stw	r6,20(sp)
    c854:	0008bd40 	call	8bd4 <__locale_charset>
    c858:	d9800517 	ldw	r6,20(sp)
    c85c:	d9400417 	ldw	r5,16(sp)
    c860:	100f883a 	mov	r7,r2
    c864:	dc400015 	stw	r17,0(sp)
    c868:	8009883a 	mov	r4,r16
    c86c:	903ee83a 	callr	r18
    c870:	00ffffc4 	movi	r3,-1
    c874:	10c0031e 	bne	r2,r3,c884 <_wcrtomb_r+0x64>
    c878:	88000015 	stw	zero,0(r17)
    c87c:	00c02284 	movi	r3,138
    c880:	80c00015 	stw	r3,0(r16)
    c884:	dfc00917 	ldw	ra,36(sp)
    c888:	dc800817 	ldw	r18,32(sp)
    c88c:	dc400717 	ldw	r17,28(sp)
    c890:	dc000617 	ldw	r16,24(sp)
    c894:	dec00a04 	addi	sp,sp,40
    c898:	f800283a 	ret
    c89c:	0008bd40 	call	8bd4 <__locale_charset>
    c8a0:	100f883a 	mov	r7,r2
    c8a4:	dc400015 	stw	r17,0(sp)
    c8a8:	000d883a 	mov	r6,zero
    c8ac:	d9400104 	addi	r5,sp,4
    c8b0:	8009883a 	mov	r4,r16
    c8b4:	903ee83a 	callr	r18
    c8b8:	003fed06 	br	c870 <__alt_data_end+0xff00c870>

0000c8bc <wcrtomb>:
    c8bc:	defff604 	addi	sp,sp,-40
    c8c0:	00800074 	movhi	r2,1
    c8c4:	dc800615 	stw	r18,24(sp)
    c8c8:	dc400515 	stw	r17,20(sp)
    c8cc:	10902504 	addi	r2,r2,16532
    c8d0:	dfc00915 	stw	ra,36(sp)
    c8d4:	dd000815 	stw	r20,32(sp)
    c8d8:	dcc00715 	stw	r19,28(sp)
    c8dc:	dc000415 	stw	r16,16(sp)
    c8e0:	3025883a 	mov	r18,r6
    c8e4:	14400017 	ldw	r17,0(r2)
    c8e8:	20001926 	beq	r4,zero,c950 <wcrtomb+0x94>
    c8ec:	00800074 	movhi	r2,1
    c8f0:	10902704 	addi	r2,r2,16540
    c8f4:	15000017 	ldw	r20,0(r2)
    c8f8:	2021883a 	mov	r16,r4
    c8fc:	2827883a 	mov	r19,r5
    c900:	0008bd40 	call	8bd4 <__locale_charset>
    c904:	100f883a 	mov	r7,r2
    c908:	dc800015 	stw	r18,0(sp)
    c90c:	980d883a 	mov	r6,r19
    c910:	800b883a 	mov	r5,r16
    c914:	8809883a 	mov	r4,r17
    c918:	a03ee83a 	callr	r20
    c91c:	00ffffc4 	movi	r3,-1
    c920:	10c0031e 	bne	r2,r3,c930 <wcrtomb+0x74>
    c924:	90000015 	stw	zero,0(r18)
    c928:	00c02284 	movi	r3,138
    c92c:	88c00015 	stw	r3,0(r17)
    c930:	dfc00917 	ldw	ra,36(sp)
    c934:	dd000817 	ldw	r20,32(sp)
    c938:	dcc00717 	ldw	r19,28(sp)
    c93c:	dc800617 	ldw	r18,24(sp)
    c940:	dc400517 	ldw	r17,20(sp)
    c944:	dc000417 	ldw	r16,16(sp)
    c948:	dec00a04 	addi	sp,sp,40
    c94c:	f800283a 	ret
    c950:	00800074 	movhi	r2,1
    c954:	10902704 	addi	r2,r2,16540
    c958:	14000017 	ldw	r16,0(r2)
    c95c:	0008bd40 	call	8bd4 <__locale_charset>
    c960:	100f883a 	mov	r7,r2
    c964:	dc800015 	stw	r18,0(sp)
    c968:	000d883a 	mov	r6,zero
    c96c:	d9400104 	addi	r5,sp,4
    c970:	8809883a 	mov	r4,r17
    c974:	803ee83a 	callr	r16
    c978:	003fe806 	br	c91c <__alt_data_end+0xff00c91c>

0000c97c <__ascii_wctomb>:
    c97c:	28000526 	beq	r5,zero,c994 <__ascii_wctomb+0x18>
    c980:	00803fc4 	movi	r2,255
    c984:	11800536 	bltu	r2,r6,c99c <__ascii_wctomb+0x20>
    c988:	29800005 	stb	r6,0(r5)
    c98c:	00800044 	movi	r2,1
    c990:	f800283a 	ret
    c994:	0005883a 	mov	r2,zero
    c998:	f800283a 	ret
    c99c:	00802284 	movi	r2,138
    c9a0:	20800015 	stw	r2,0(r4)
    c9a4:	00bfffc4 	movi	r2,-1
    c9a8:	f800283a 	ret

0000c9ac <_wctomb_r>:
    c9ac:	00800074 	movhi	r2,1
    c9b0:	defff904 	addi	sp,sp,-28
    c9b4:	10902704 	addi	r2,r2,16540
    c9b8:	dfc00615 	stw	ra,24(sp)
    c9bc:	dc400515 	stw	r17,20(sp)
    c9c0:	dc000415 	stw	r16,16(sp)
    c9c4:	3823883a 	mov	r17,r7
    c9c8:	14000017 	ldw	r16,0(r2)
    c9cc:	d9000115 	stw	r4,4(sp)
    c9d0:	d9400215 	stw	r5,8(sp)
    c9d4:	d9800315 	stw	r6,12(sp)
    c9d8:	0008bd40 	call	8bd4 <__locale_charset>
    c9dc:	d9800317 	ldw	r6,12(sp)
    c9e0:	d9400217 	ldw	r5,8(sp)
    c9e4:	d9000117 	ldw	r4,4(sp)
    c9e8:	100f883a 	mov	r7,r2
    c9ec:	dc400015 	stw	r17,0(sp)
    c9f0:	803ee83a 	callr	r16
    c9f4:	dfc00617 	ldw	ra,24(sp)
    c9f8:	dc400517 	ldw	r17,20(sp)
    c9fc:	dc000417 	ldw	r16,16(sp)
    ca00:	dec00704 	addi	sp,sp,28
    ca04:	f800283a 	ret

0000ca08 <__udivdi3>:
    ca08:	defff504 	addi	sp,sp,-44
    ca0c:	dcc00415 	stw	r19,16(sp)
    ca10:	dc000115 	stw	r16,4(sp)
    ca14:	dfc00a15 	stw	ra,40(sp)
    ca18:	df000915 	stw	fp,36(sp)
    ca1c:	ddc00815 	stw	r23,32(sp)
    ca20:	dd800715 	stw	r22,28(sp)
    ca24:	dd400615 	stw	r21,24(sp)
    ca28:	dd000515 	stw	r20,20(sp)
    ca2c:	dc800315 	stw	r18,12(sp)
    ca30:	dc400215 	stw	r17,8(sp)
    ca34:	2027883a 	mov	r19,r4
    ca38:	2821883a 	mov	r16,r5
    ca3c:	3800411e 	bne	r7,zero,cb44 <__udivdi3+0x13c>
    ca40:	3023883a 	mov	r17,r6
    ca44:	2025883a 	mov	r18,r4
    ca48:	2980522e 	bgeu	r5,r6,cb94 <__udivdi3+0x18c>
    ca4c:	00bfffd4 	movui	r2,65535
    ca50:	282d883a 	mov	r22,r5
    ca54:	1180a836 	bltu	r2,r6,ccf8 <__udivdi3+0x2f0>
    ca58:	00803fc4 	movi	r2,255
    ca5c:	1185803a 	cmpltu	r2,r2,r6
    ca60:	100490fa 	slli	r2,r2,3
    ca64:	3086d83a 	srl	r3,r6,r2
    ca68:	01000074 	movhi	r4,1
    ca6c:	2108b644 	addi	r4,r4,8921
    ca70:	20c7883a 	add	r3,r4,r3
    ca74:	18c00003 	ldbu	r3,0(r3)
    ca78:	1885883a 	add	r2,r3,r2
    ca7c:	00c00804 	movi	r3,32
    ca80:	1887c83a 	sub	r3,r3,r2
    ca84:	18000526 	beq	r3,zero,ca9c <__udivdi3+0x94>
    ca88:	80e0983a 	sll	r16,r16,r3
    ca8c:	9884d83a 	srl	r2,r19,r2
    ca90:	30e2983a 	sll	r17,r6,r3
    ca94:	98e4983a 	sll	r18,r19,r3
    ca98:	142cb03a 	or	r22,r2,r16
    ca9c:	882ad43a 	srli	r21,r17,16
    caa0:	b009883a 	mov	r4,r22
    caa4:	8d3fffcc 	andi	r20,r17,65535
    caa8:	a80b883a 	mov	r5,r21
    caac:	000d6140 	call	d614 <__umodsi3>
    cab0:	b009883a 	mov	r4,r22
    cab4:	a80b883a 	mov	r5,r21
    cab8:	1027883a 	mov	r19,r2
    cabc:	000d5b00 	call	d5b0 <__udivsi3>
    cac0:	102d883a 	mov	r22,r2
    cac4:	9826943a 	slli	r19,r19,16
    cac8:	9004d43a 	srli	r2,r18,16
    cacc:	a5a1383a 	mul	r16,r20,r22
    cad0:	14c4b03a 	or	r2,r2,r19
    cad4:	1400052e 	bgeu	r2,r16,caec <__udivdi3+0xe4>
    cad8:	1445883a 	add	r2,r2,r17
    cadc:	b0ffffc4 	addi	r3,r22,-1
    cae0:	14400136 	bltu	r2,r17,cae8 <__udivdi3+0xe0>
    cae4:	14012336 	bltu	r2,r16,cf74 <__udivdi3+0x56c>
    cae8:	182d883a 	mov	r22,r3
    caec:	1421c83a 	sub	r16,r2,r16
    caf0:	a80b883a 	mov	r5,r21
    caf4:	8009883a 	mov	r4,r16
    caf8:	000d6140 	call	d614 <__umodsi3>
    cafc:	1027883a 	mov	r19,r2
    cb00:	a80b883a 	mov	r5,r21
    cb04:	8009883a 	mov	r4,r16
    cb08:	000d5b00 	call	d5b0 <__udivsi3>
    cb0c:	9826943a 	slli	r19,r19,16
    cb10:	a0a9383a 	mul	r20,r20,r2
    cb14:	94bfffcc 	andi	r18,r18,65535
    cb18:	94e4b03a 	or	r18,r18,r19
    cb1c:	9500052e 	bgeu	r18,r20,cb34 <__udivdi3+0x12c>
    cb20:	8ca5883a 	add	r18,r17,r18
    cb24:	10ffffc4 	addi	r3,r2,-1
    cb28:	9440f136 	bltu	r18,r17,cef0 <__udivdi3+0x4e8>
    cb2c:	9500f02e 	bgeu	r18,r20,cef0 <__udivdi3+0x4e8>
    cb30:	10bfff84 	addi	r2,r2,-2
    cb34:	b00c943a 	slli	r6,r22,16
    cb38:	0007883a 	mov	r3,zero
    cb3c:	3084b03a 	or	r2,r6,r2
    cb40:	00005906 	br	cca8 <__udivdi3+0x2a0>
    cb44:	29c05636 	bltu	r5,r7,cca0 <__udivdi3+0x298>
    cb48:	00bfffd4 	movui	r2,65535
    cb4c:	11c0622e 	bgeu	r2,r7,ccd8 <__udivdi3+0x2d0>
    cb50:	00804034 	movhi	r2,256
    cb54:	10bfffc4 	addi	r2,r2,-1
    cb58:	11c0ee36 	bltu	r2,r7,cf14 <__udivdi3+0x50c>
    cb5c:	00800404 	movi	r2,16
    cb60:	3886d83a 	srl	r3,r7,r2
    cb64:	01000074 	movhi	r4,1
    cb68:	2108b644 	addi	r4,r4,8921
    cb6c:	20c7883a 	add	r3,r4,r3
    cb70:	18c00003 	ldbu	r3,0(r3)
    cb74:	05400804 	movi	r21,32
    cb78:	1885883a 	add	r2,r3,r2
    cb7c:	a8abc83a 	sub	r21,r21,r2
    cb80:	a800621e 	bne	r21,zero,cd0c <__udivdi3+0x304>
    cb84:	3c00e936 	bltu	r7,r16,cf2c <__udivdi3+0x524>
    cb88:	9985403a 	cmpgeu	r2,r19,r6
    cb8c:	0007883a 	mov	r3,zero
    cb90:	00004506 	br	cca8 <__udivdi3+0x2a0>
    cb94:	3000041e 	bne	r6,zero,cba8 <__udivdi3+0x1a0>
    cb98:	000b883a 	mov	r5,zero
    cb9c:	01000044 	movi	r4,1
    cba0:	000d5b00 	call	d5b0 <__udivsi3>
    cba4:	1023883a 	mov	r17,r2
    cba8:	00bfffd4 	movui	r2,65535
    cbac:	14404e2e 	bgeu	r2,r17,cce8 <__udivdi3+0x2e0>
    cbb0:	00804034 	movhi	r2,256
    cbb4:	10bfffc4 	addi	r2,r2,-1
    cbb8:	1440d836 	bltu	r2,r17,cf1c <__udivdi3+0x514>
    cbbc:	00800404 	movi	r2,16
    cbc0:	8886d83a 	srl	r3,r17,r2
    cbc4:	01000074 	movhi	r4,1
    cbc8:	2108b644 	addi	r4,r4,8921
    cbcc:	20c7883a 	add	r3,r4,r3
    cbd0:	18c00003 	ldbu	r3,0(r3)
    cbd4:	1885883a 	add	r2,r3,r2
    cbd8:	00c00804 	movi	r3,32
    cbdc:	1887c83a 	sub	r3,r3,r2
    cbe0:	18008f1e 	bne	r3,zero,ce20 <__udivdi3+0x418>
    cbe4:	882ad43a 	srli	r21,r17,16
    cbe8:	8461c83a 	sub	r16,r16,r17
    cbec:	8d3fffcc 	andi	r20,r17,65535
    cbf0:	00c00044 	movi	r3,1
    cbf4:	8009883a 	mov	r4,r16
    cbf8:	a80b883a 	mov	r5,r21
    cbfc:	d8c00015 	stw	r3,0(sp)
    cc00:	000d6140 	call	d614 <__umodsi3>
    cc04:	8009883a 	mov	r4,r16
    cc08:	a80b883a 	mov	r5,r21
    cc0c:	1027883a 	mov	r19,r2
    cc10:	000d5b00 	call	d5b0 <__udivsi3>
    cc14:	9826943a 	slli	r19,r19,16
    cc18:	9008d43a 	srli	r4,r18,16
    cc1c:	1521383a 	mul	r16,r2,r20
    cc20:	102d883a 	mov	r22,r2
    cc24:	24c8b03a 	or	r4,r4,r19
    cc28:	d8c00017 	ldw	r3,0(sp)
    cc2c:	2400052e 	bgeu	r4,r16,cc44 <__udivdi3+0x23c>
    cc30:	2449883a 	add	r4,r4,r17
    cc34:	b0bfffc4 	addi	r2,r22,-1
    cc38:	24400136 	bltu	r4,r17,cc40 <__udivdi3+0x238>
    cc3c:	2400ca36 	bltu	r4,r16,cf68 <__udivdi3+0x560>
    cc40:	102d883a 	mov	r22,r2
    cc44:	2421c83a 	sub	r16,r4,r16
    cc48:	a80b883a 	mov	r5,r21
    cc4c:	8009883a 	mov	r4,r16
    cc50:	d8c00015 	stw	r3,0(sp)
    cc54:	000d6140 	call	d614 <__umodsi3>
    cc58:	1027883a 	mov	r19,r2
    cc5c:	a80b883a 	mov	r5,r21
    cc60:	8009883a 	mov	r4,r16
    cc64:	000d5b00 	call	d5b0 <__udivsi3>
    cc68:	9826943a 	slli	r19,r19,16
    cc6c:	1529383a 	mul	r20,r2,r20
    cc70:	94bfffcc 	andi	r18,r18,65535
    cc74:	94e4b03a 	or	r18,r18,r19
    cc78:	d8c00017 	ldw	r3,0(sp)
    cc7c:	9500052e 	bgeu	r18,r20,cc94 <__udivdi3+0x28c>
    cc80:	8ca5883a 	add	r18,r17,r18
    cc84:	113fffc4 	addi	r4,r2,-1
    cc88:	94409736 	bltu	r18,r17,cee8 <__udivdi3+0x4e0>
    cc8c:	9500962e 	bgeu	r18,r20,cee8 <__udivdi3+0x4e0>
    cc90:	10bfff84 	addi	r2,r2,-2
    cc94:	b00c943a 	slli	r6,r22,16
    cc98:	3084b03a 	or	r2,r6,r2
    cc9c:	00000206 	br	cca8 <__udivdi3+0x2a0>
    cca0:	0007883a 	mov	r3,zero
    cca4:	0005883a 	mov	r2,zero
    cca8:	dfc00a17 	ldw	ra,40(sp)
    ccac:	df000917 	ldw	fp,36(sp)
    ccb0:	ddc00817 	ldw	r23,32(sp)
    ccb4:	dd800717 	ldw	r22,28(sp)
    ccb8:	dd400617 	ldw	r21,24(sp)
    ccbc:	dd000517 	ldw	r20,20(sp)
    ccc0:	dcc00417 	ldw	r19,16(sp)
    ccc4:	dc800317 	ldw	r18,12(sp)
    ccc8:	dc400217 	ldw	r17,8(sp)
    cccc:	dc000117 	ldw	r16,4(sp)
    ccd0:	dec00b04 	addi	sp,sp,44
    ccd4:	f800283a 	ret
    ccd8:	00803fc4 	movi	r2,255
    ccdc:	11c5803a 	cmpltu	r2,r2,r7
    cce0:	100490fa 	slli	r2,r2,3
    cce4:	003f9e06 	br	cb60 <__alt_data_end+0xff00cb60>
    cce8:	00803fc4 	movi	r2,255
    ccec:	1445803a 	cmpltu	r2,r2,r17
    ccf0:	100490fa 	slli	r2,r2,3
    ccf4:	003fb206 	br	cbc0 <__alt_data_end+0xff00cbc0>
    ccf8:	00804034 	movhi	r2,256
    ccfc:	10bfffc4 	addi	r2,r2,-1
    cd00:	11808836 	bltu	r2,r6,cf24 <__udivdi3+0x51c>
    cd04:	00800404 	movi	r2,16
    cd08:	003f5606 	br	ca64 <__alt_data_end+0xff00ca64>
    cd0c:	30aed83a 	srl	r23,r6,r2
    cd10:	3d4e983a 	sll	r7,r7,r21
    cd14:	80acd83a 	srl	r22,r16,r2
    cd18:	9884d83a 	srl	r2,r19,r2
    cd1c:	3deeb03a 	or	r23,r7,r23
    cd20:	b824d43a 	srli	r18,r23,16
    cd24:	8560983a 	sll	r16,r16,r21
    cd28:	b009883a 	mov	r4,r22
    cd2c:	900b883a 	mov	r5,r18
    cd30:	3568983a 	sll	r20,r6,r21
    cd34:	1420b03a 	or	r16,r2,r16
    cd38:	000d6140 	call	d614 <__umodsi3>
    cd3c:	b009883a 	mov	r4,r22
    cd40:	900b883a 	mov	r5,r18
    cd44:	1023883a 	mov	r17,r2
    cd48:	000d5b00 	call	d5b0 <__udivsi3>
    cd4c:	8808943a 	slli	r4,r17,16
    cd50:	bf3fffcc 	andi	fp,r23,65535
    cd54:	8006d43a 	srli	r3,r16,16
    cd58:	e0a3383a 	mul	r17,fp,r2
    cd5c:	100d883a 	mov	r6,r2
    cd60:	1906b03a 	or	r3,r3,r4
    cd64:	1c40042e 	bgeu	r3,r17,cd78 <__udivdi3+0x370>
    cd68:	1dc7883a 	add	r3,r3,r23
    cd6c:	10bfffc4 	addi	r2,r2,-1
    cd70:	1dc0752e 	bgeu	r3,r23,cf48 <__udivdi3+0x540>
    cd74:	100d883a 	mov	r6,r2
    cd78:	1c63c83a 	sub	r17,r3,r17
    cd7c:	900b883a 	mov	r5,r18
    cd80:	8809883a 	mov	r4,r17
    cd84:	d9800015 	stw	r6,0(sp)
    cd88:	000d6140 	call	d614 <__umodsi3>
    cd8c:	102d883a 	mov	r22,r2
    cd90:	8809883a 	mov	r4,r17
    cd94:	900b883a 	mov	r5,r18
    cd98:	000d5b00 	call	d5b0 <__udivsi3>
    cd9c:	b02c943a 	slli	r22,r22,16
    cda0:	e089383a 	mul	r4,fp,r2
    cda4:	843fffcc 	andi	r16,r16,65535
    cda8:	85a0b03a 	or	r16,r16,r22
    cdac:	d9800017 	ldw	r6,0(sp)
    cdb0:	8100042e 	bgeu	r16,r4,cdc4 <__udivdi3+0x3bc>
    cdb4:	85e1883a 	add	r16,r16,r23
    cdb8:	10ffffc4 	addi	r3,r2,-1
    cdbc:	85c05e2e 	bgeu	r16,r23,cf38 <__udivdi3+0x530>
    cdc0:	1805883a 	mov	r2,r3
    cdc4:	300c943a 	slli	r6,r6,16
    cdc8:	a17fffcc 	andi	r5,r20,65535
    cdcc:	a028d43a 	srli	r20,r20,16
    cdd0:	3084b03a 	or	r2,r6,r2
    cdd4:	10ffffcc 	andi	r3,r2,65535
    cdd8:	100cd43a 	srli	r6,r2,16
    cddc:	194f383a 	mul	r7,r3,r5
    cde0:	1d07383a 	mul	r3,r3,r20
    cde4:	314b383a 	mul	r5,r6,r5
    cde8:	3810d43a 	srli	r8,r7,16
    cdec:	8121c83a 	sub	r16,r16,r4
    cdf0:	1947883a 	add	r3,r3,r5
    cdf4:	40c7883a 	add	r3,r8,r3
    cdf8:	350d383a 	mul	r6,r6,r20
    cdfc:	1940022e 	bgeu	r3,r5,ce08 <__udivdi3+0x400>
    ce00:	01000074 	movhi	r4,1
    ce04:	310d883a 	add	r6,r6,r4
    ce08:	1828d43a 	srli	r20,r3,16
    ce0c:	a18d883a 	add	r6,r20,r6
    ce10:	81803e36 	bltu	r16,r6,cf0c <__udivdi3+0x504>
    ce14:	81803826 	beq	r16,r6,cef8 <__udivdi3+0x4f0>
    ce18:	0007883a 	mov	r3,zero
    ce1c:	003fa206 	br	cca8 <__alt_data_end+0xff00cca8>
    ce20:	88e2983a 	sll	r17,r17,r3
    ce24:	80a8d83a 	srl	r20,r16,r2
    ce28:	80e0983a 	sll	r16,r16,r3
    ce2c:	882ad43a 	srli	r21,r17,16
    ce30:	9884d83a 	srl	r2,r19,r2
    ce34:	a009883a 	mov	r4,r20
    ce38:	a80b883a 	mov	r5,r21
    ce3c:	142eb03a 	or	r23,r2,r16
    ce40:	98e4983a 	sll	r18,r19,r3
    ce44:	000d6140 	call	d614 <__umodsi3>
    ce48:	a009883a 	mov	r4,r20
    ce4c:	a80b883a 	mov	r5,r21
    ce50:	1021883a 	mov	r16,r2
    ce54:	000d5b00 	call	d5b0 <__udivsi3>
    ce58:	1039883a 	mov	fp,r2
    ce5c:	8d3fffcc 	andi	r20,r17,65535
    ce60:	8020943a 	slli	r16,r16,16
    ce64:	b804d43a 	srli	r2,r23,16
    ce68:	a72d383a 	mul	r22,r20,fp
    ce6c:	1404b03a 	or	r2,r2,r16
    ce70:	1580062e 	bgeu	r2,r22,ce8c <__udivdi3+0x484>
    ce74:	1445883a 	add	r2,r2,r17
    ce78:	e0ffffc4 	addi	r3,fp,-1
    ce7c:	14403836 	bltu	r2,r17,cf60 <__udivdi3+0x558>
    ce80:	1580372e 	bgeu	r2,r22,cf60 <__udivdi3+0x558>
    ce84:	e73fff84 	addi	fp,fp,-2
    ce88:	1445883a 	add	r2,r2,r17
    ce8c:	15adc83a 	sub	r22,r2,r22
    ce90:	a80b883a 	mov	r5,r21
    ce94:	b009883a 	mov	r4,r22
    ce98:	000d6140 	call	d614 <__umodsi3>
    ce9c:	1027883a 	mov	r19,r2
    cea0:	b009883a 	mov	r4,r22
    cea4:	a80b883a 	mov	r5,r21
    cea8:	000d5b00 	call	d5b0 <__udivsi3>
    ceac:	9826943a 	slli	r19,r19,16
    ceb0:	a0a1383a 	mul	r16,r20,r2
    ceb4:	b93fffcc 	andi	r4,r23,65535
    ceb8:	24c8b03a 	or	r4,r4,r19
    cebc:	2400062e 	bgeu	r4,r16,ced8 <__udivdi3+0x4d0>
    cec0:	2449883a 	add	r4,r4,r17
    cec4:	10ffffc4 	addi	r3,r2,-1
    cec8:	24402336 	bltu	r4,r17,cf58 <__udivdi3+0x550>
    cecc:	2400222e 	bgeu	r4,r16,cf58 <__udivdi3+0x550>
    ced0:	10bfff84 	addi	r2,r2,-2
    ced4:	2449883a 	add	r4,r4,r17
    ced8:	e038943a 	slli	fp,fp,16
    cedc:	2421c83a 	sub	r16,r4,r16
    cee0:	e086b03a 	or	r3,fp,r2
    cee4:	003f4306 	br	cbf4 <__alt_data_end+0xff00cbf4>
    cee8:	2005883a 	mov	r2,r4
    ceec:	003f6906 	br	cc94 <__alt_data_end+0xff00cc94>
    cef0:	1805883a 	mov	r2,r3
    cef4:	003f0f06 	br	cb34 <__alt_data_end+0xff00cb34>
    cef8:	1806943a 	slli	r3,r3,16
    cefc:	9d66983a 	sll	r19,r19,r21
    cf00:	39ffffcc 	andi	r7,r7,65535
    cf04:	19c7883a 	add	r3,r3,r7
    cf08:	98ffc32e 	bgeu	r19,r3,ce18 <__alt_data_end+0xff00ce18>
    cf0c:	10bfffc4 	addi	r2,r2,-1
    cf10:	003fc106 	br	ce18 <__alt_data_end+0xff00ce18>
    cf14:	00800604 	movi	r2,24
    cf18:	003f1106 	br	cb60 <__alt_data_end+0xff00cb60>
    cf1c:	00800604 	movi	r2,24
    cf20:	003f2706 	br	cbc0 <__alt_data_end+0xff00cbc0>
    cf24:	00800604 	movi	r2,24
    cf28:	003ece06 	br	ca64 <__alt_data_end+0xff00ca64>
    cf2c:	0007883a 	mov	r3,zero
    cf30:	00800044 	movi	r2,1
    cf34:	003f5c06 	br	cca8 <__alt_data_end+0xff00cca8>
    cf38:	813fa12e 	bgeu	r16,r4,cdc0 <__alt_data_end+0xff00cdc0>
    cf3c:	10bfff84 	addi	r2,r2,-2
    cf40:	85e1883a 	add	r16,r16,r23
    cf44:	003f9f06 	br	cdc4 <__alt_data_end+0xff00cdc4>
    cf48:	1c7f8a2e 	bgeu	r3,r17,cd74 <__alt_data_end+0xff00cd74>
    cf4c:	31bfff84 	addi	r6,r6,-2
    cf50:	1dc7883a 	add	r3,r3,r23
    cf54:	003f8806 	br	cd78 <__alt_data_end+0xff00cd78>
    cf58:	1805883a 	mov	r2,r3
    cf5c:	003fde06 	br	ced8 <__alt_data_end+0xff00ced8>
    cf60:	1839883a 	mov	fp,r3
    cf64:	003fc906 	br	ce8c <__alt_data_end+0xff00ce8c>
    cf68:	b5bfff84 	addi	r22,r22,-2
    cf6c:	2449883a 	add	r4,r4,r17
    cf70:	003f3406 	br	cc44 <__alt_data_end+0xff00cc44>
    cf74:	b5bfff84 	addi	r22,r22,-2
    cf78:	1445883a 	add	r2,r2,r17
    cf7c:	003edb06 	br	caec <__alt_data_end+0xff00caec>

0000cf80 <__umoddi3>:
    cf80:	defff404 	addi	sp,sp,-48
    cf84:	df000a15 	stw	fp,40(sp)
    cf88:	dc400315 	stw	r17,12(sp)
    cf8c:	dc000215 	stw	r16,8(sp)
    cf90:	dfc00b15 	stw	ra,44(sp)
    cf94:	ddc00915 	stw	r23,36(sp)
    cf98:	dd800815 	stw	r22,32(sp)
    cf9c:	dd400715 	stw	r21,28(sp)
    cfa0:	dd000615 	stw	r20,24(sp)
    cfa4:	dcc00515 	stw	r19,20(sp)
    cfa8:	dc800415 	stw	r18,16(sp)
    cfac:	2021883a 	mov	r16,r4
    cfb0:	2823883a 	mov	r17,r5
    cfb4:	2839883a 	mov	fp,r5
    cfb8:	38003c1e 	bne	r7,zero,d0ac <__umoddi3+0x12c>
    cfbc:	3027883a 	mov	r19,r6
    cfc0:	2029883a 	mov	r20,r4
    cfc4:	2980512e 	bgeu	r5,r6,d10c <__umoddi3+0x18c>
    cfc8:	00bfffd4 	movui	r2,65535
    cfcc:	11809a36 	bltu	r2,r6,d238 <__umoddi3+0x2b8>
    cfd0:	01003fc4 	movi	r4,255
    cfd4:	2189803a 	cmpltu	r4,r4,r6
    cfd8:	200890fa 	slli	r4,r4,3
    cfdc:	3104d83a 	srl	r2,r6,r4
    cfe0:	00c00074 	movhi	r3,1
    cfe4:	18c8b644 	addi	r3,r3,8921
    cfe8:	1885883a 	add	r2,r3,r2
    cfec:	10c00003 	ldbu	r3,0(r2)
    cff0:	00800804 	movi	r2,32
    cff4:	1909883a 	add	r4,r3,r4
    cff8:	1125c83a 	sub	r18,r2,r4
    cffc:	90000526 	beq	r18,zero,d014 <__umoddi3+0x94>
    d000:	8ca2983a 	sll	r17,r17,r18
    d004:	8108d83a 	srl	r4,r16,r4
    d008:	34a6983a 	sll	r19,r6,r18
    d00c:	84a8983a 	sll	r20,r16,r18
    d010:	2478b03a 	or	fp,r4,r17
    d014:	982ed43a 	srli	r23,r19,16
    d018:	e009883a 	mov	r4,fp
    d01c:	9dbfffcc 	andi	r22,r19,65535
    d020:	b80b883a 	mov	r5,r23
    d024:	000d6140 	call	d614 <__umodsi3>
    d028:	e009883a 	mov	r4,fp
    d02c:	b80b883a 	mov	r5,r23
    d030:	102b883a 	mov	r21,r2
    d034:	000d5b00 	call	d5b0 <__udivsi3>
    d038:	a806943a 	slli	r3,r21,16
    d03c:	a008d43a 	srli	r4,r20,16
    d040:	b085383a 	mul	r2,r22,r2
    d044:	20c8b03a 	or	r4,r4,r3
    d048:	2080032e 	bgeu	r4,r2,d058 <__umoddi3+0xd8>
    d04c:	24c9883a 	add	r4,r4,r19
    d050:	24c00136 	bltu	r4,r19,d058 <__umoddi3+0xd8>
    d054:	20811036 	bltu	r4,r2,d498 <__umoddi3+0x518>
    d058:	20abc83a 	sub	r21,r4,r2
    d05c:	b80b883a 	mov	r5,r23
    d060:	a809883a 	mov	r4,r21
    d064:	000d6140 	call	d614 <__umodsi3>
    d068:	1023883a 	mov	r17,r2
    d06c:	b80b883a 	mov	r5,r23
    d070:	a809883a 	mov	r4,r21
    d074:	000d5b00 	call	d5b0 <__udivsi3>
    d078:	8822943a 	slli	r17,r17,16
    d07c:	b085383a 	mul	r2,r22,r2
    d080:	a0ffffcc 	andi	r3,r20,65535
    d084:	1c46b03a 	or	r3,r3,r17
    d088:	1880042e 	bgeu	r3,r2,d09c <__umoddi3+0x11c>
    d08c:	1cc7883a 	add	r3,r3,r19
    d090:	1cc00236 	bltu	r3,r19,d09c <__umoddi3+0x11c>
    d094:	1880012e 	bgeu	r3,r2,d09c <__umoddi3+0x11c>
    d098:	1cc7883a 	add	r3,r3,r19
    d09c:	1885c83a 	sub	r2,r3,r2
    d0a0:	1484d83a 	srl	r2,r2,r18
    d0a4:	0007883a 	mov	r3,zero
    d0a8:	00004f06 	br	d1e8 <__umoddi3+0x268>
    d0ac:	29c04c36 	bltu	r5,r7,d1e0 <__umoddi3+0x260>
    d0b0:	00bfffd4 	movui	r2,65535
    d0b4:	11c0582e 	bgeu	r2,r7,d218 <__umoddi3+0x298>
    d0b8:	00804034 	movhi	r2,256
    d0bc:	10bfffc4 	addi	r2,r2,-1
    d0c0:	11c0e736 	bltu	r2,r7,d460 <__umoddi3+0x4e0>
    d0c4:	01000404 	movi	r4,16
    d0c8:	3904d83a 	srl	r2,r7,r4
    d0cc:	00c00074 	movhi	r3,1
    d0d0:	18c8b644 	addi	r3,r3,8921
    d0d4:	1885883a 	add	r2,r3,r2
    d0d8:	14c00003 	ldbu	r19,0(r2)
    d0dc:	00c00804 	movi	r3,32
    d0e0:	9927883a 	add	r19,r19,r4
    d0e4:	1ce9c83a 	sub	r20,r3,r19
    d0e8:	a000581e 	bne	r20,zero,d24c <__umoddi3+0x2cc>
    d0ec:	3c400136 	bltu	r7,r17,d0f4 <__umoddi3+0x174>
    d0f0:	8180eb36 	bltu	r16,r6,d4a0 <__umoddi3+0x520>
    d0f4:	8185c83a 	sub	r2,r16,r6
    d0f8:	89e3c83a 	sub	r17,r17,r7
    d0fc:	8089803a 	cmpltu	r4,r16,r2
    d100:	8939c83a 	sub	fp,r17,r4
    d104:	e007883a 	mov	r3,fp
    d108:	00003706 	br	d1e8 <__umoddi3+0x268>
    d10c:	3000041e 	bne	r6,zero,d120 <__umoddi3+0x1a0>
    d110:	000b883a 	mov	r5,zero
    d114:	01000044 	movi	r4,1
    d118:	000d5b00 	call	d5b0 <__udivsi3>
    d11c:	1027883a 	mov	r19,r2
    d120:	00bfffd4 	movui	r2,65535
    d124:	14c0402e 	bgeu	r2,r19,d228 <__umoddi3+0x2a8>
    d128:	00804034 	movhi	r2,256
    d12c:	10bfffc4 	addi	r2,r2,-1
    d130:	14c0cd36 	bltu	r2,r19,d468 <__umoddi3+0x4e8>
    d134:	00800404 	movi	r2,16
    d138:	9886d83a 	srl	r3,r19,r2
    d13c:	01000074 	movhi	r4,1
    d140:	2108b644 	addi	r4,r4,8921
    d144:	20c7883a 	add	r3,r4,r3
    d148:	18c00003 	ldbu	r3,0(r3)
    d14c:	1887883a 	add	r3,r3,r2
    d150:	00800804 	movi	r2,32
    d154:	10e5c83a 	sub	r18,r2,r3
    d158:	9000901e 	bne	r18,zero,d39c <__umoddi3+0x41c>
    d15c:	982cd43a 	srli	r22,r19,16
    d160:	8ce3c83a 	sub	r17,r17,r19
    d164:	9d7fffcc 	andi	r21,r19,65535
    d168:	b00b883a 	mov	r5,r22
    d16c:	8809883a 	mov	r4,r17
    d170:	000d6140 	call	d614 <__umodsi3>
    d174:	8809883a 	mov	r4,r17
    d178:	b00b883a 	mov	r5,r22
    d17c:	1021883a 	mov	r16,r2
    d180:	000d5b00 	call	d5b0 <__udivsi3>
    d184:	8006943a 	slli	r3,r16,16
    d188:	a008d43a 	srli	r4,r20,16
    d18c:	1545383a 	mul	r2,r2,r21
    d190:	20c8b03a 	or	r4,r4,r3
    d194:	2080042e 	bgeu	r4,r2,d1a8 <__umoddi3+0x228>
    d198:	24c9883a 	add	r4,r4,r19
    d19c:	24c00236 	bltu	r4,r19,d1a8 <__umoddi3+0x228>
    d1a0:	2080012e 	bgeu	r4,r2,d1a8 <__umoddi3+0x228>
    d1a4:	24c9883a 	add	r4,r4,r19
    d1a8:	20a1c83a 	sub	r16,r4,r2
    d1ac:	b00b883a 	mov	r5,r22
    d1b0:	8009883a 	mov	r4,r16
    d1b4:	000d6140 	call	d614 <__umodsi3>
    d1b8:	1023883a 	mov	r17,r2
    d1bc:	b00b883a 	mov	r5,r22
    d1c0:	8009883a 	mov	r4,r16
    d1c4:	000d5b00 	call	d5b0 <__udivsi3>
    d1c8:	8822943a 	slli	r17,r17,16
    d1cc:	1545383a 	mul	r2,r2,r21
    d1d0:	a53fffcc 	andi	r20,r20,65535
    d1d4:	a446b03a 	or	r3,r20,r17
    d1d8:	18bfb02e 	bgeu	r3,r2,d09c <__alt_data_end+0xff00d09c>
    d1dc:	003fab06 	br	d08c <__alt_data_end+0xff00d08c>
    d1e0:	2005883a 	mov	r2,r4
    d1e4:	2807883a 	mov	r3,r5
    d1e8:	dfc00b17 	ldw	ra,44(sp)
    d1ec:	df000a17 	ldw	fp,40(sp)
    d1f0:	ddc00917 	ldw	r23,36(sp)
    d1f4:	dd800817 	ldw	r22,32(sp)
    d1f8:	dd400717 	ldw	r21,28(sp)
    d1fc:	dd000617 	ldw	r20,24(sp)
    d200:	dcc00517 	ldw	r19,20(sp)
    d204:	dc800417 	ldw	r18,16(sp)
    d208:	dc400317 	ldw	r17,12(sp)
    d20c:	dc000217 	ldw	r16,8(sp)
    d210:	dec00c04 	addi	sp,sp,48
    d214:	f800283a 	ret
    d218:	04c03fc4 	movi	r19,255
    d21c:	99c9803a 	cmpltu	r4,r19,r7
    d220:	200890fa 	slli	r4,r4,3
    d224:	003fa806 	br	d0c8 <__alt_data_end+0xff00d0c8>
    d228:	00803fc4 	movi	r2,255
    d22c:	14c5803a 	cmpltu	r2,r2,r19
    d230:	100490fa 	slli	r2,r2,3
    d234:	003fc006 	br	d138 <__alt_data_end+0xff00d138>
    d238:	00804034 	movhi	r2,256
    d23c:	10bfffc4 	addi	r2,r2,-1
    d240:	11808b36 	bltu	r2,r6,d470 <__umoddi3+0x4f0>
    d244:	01000404 	movi	r4,16
    d248:	003f6406 	br	cfdc <__alt_data_end+0xff00cfdc>
    d24c:	34c4d83a 	srl	r2,r6,r19
    d250:	3d0e983a 	sll	r7,r7,r20
    d254:	8cf8d83a 	srl	fp,r17,r19
    d258:	8d10983a 	sll	r8,r17,r20
    d25c:	38aab03a 	or	r21,r7,r2
    d260:	a82cd43a 	srli	r22,r21,16
    d264:	84e2d83a 	srl	r17,r16,r19
    d268:	e009883a 	mov	r4,fp
    d26c:	b00b883a 	mov	r5,r22
    d270:	8a22b03a 	or	r17,r17,r8
    d274:	3524983a 	sll	r18,r6,r20
    d278:	000d6140 	call	d614 <__umodsi3>
    d27c:	e009883a 	mov	r4,fp
    d280:	b00b883a 	mov	r5,r22
    d284:	102f883a 	mov	r23,r2
    d288:	000d5b00 	call	d5b0 <__udivsi3>
    d28c:	100d883a 	mov	r6,r2
    d290:	b808943a 	slli	r4,r23,16
    d294:	aa3fffcc 	andi	r8,r21,65535
    d298:	8804d43a 	srli	r2,r17,16
    d29c:	41af383a 	mul	r23,r8,r6
    d2a0:	8520983a 	sll	r16,r16,r20
    d2a4:	1104b03a 	or	r2,r2,r4
    d2a8:	15c0042e 	bgeu	r2,r23,d2bc <__umoddi3+0x33c>
    d2ac:	1545883a 	add	r2,r2,r21
    d2b0:	30ffffc4 	addi	r3,r6,-1
    d2b4:	1540742e 	bgeu	r2,r21,d488 <__umoddi3+0x508>
    d2b8:	180d883a 	mov	r6,r3
    d2bc:	15efc83a 	sub	r23,r2,r23
    d2c0:	b00b883a 	mov	r5,r22
    d2c4:	b809883a 	mov	r4,r23
    d2c8:	d9800115 	stw	r6,4(sp)
    d2cc:	da000015 	stw	r8,0(sp)
    d2d0:	000d6140 	call	d614 <__umodsi3>
    d2d4:	b00b883a 	mov	r5,r22
    d2d8:	b809883a 	mov	r4,r23
    d2dc:	1039883a 	mov	fp,r2
    d2e0:	000d5b00 	call	d5b0 <__udivsi3>
    d2e4:	da000017 	ldw	r8,0(sp)
    d2e8:	e038943a 	slli	fp,fp,16
    d2ec:	100b883a 	mov	r5,r2
    d2f0:	4089383a 	mul	r4,r8,r2
    d2f4:	8a3fffcc 	andi	r8,r17,65535
    d2f8:	4710b03a 	or	r8,r8,fp
    d2fc:	d9800117 	ldw	r6,4(sp)
    d300:	4100042e 	bgeu	r8,r4,d314 <__umoddi3+0x394>
    d304:	4551883a 	add	r8,r8,r21
    d308:	10bfffc4 	addi	r2,r2,-1
    d30c:	45405a2e 	bgeu	r8,r21,d478 <__umoddi3+0x4f8>
    d310:	100b883a 	mov	r5,r2
    d314:	300c943a 	slli	r6,r6,16
    d318:	91ffffcc 	andi	r7,r18,65535
    d31c:	9004d43a 	srli	r2,r18,16
    d320:	314cb03a 	or	r6,r6,r5
    d324:	317fffcc 	andi	r5,r6,65535
    d328:	300cd43a 	srli	r6,r6,16
    d32c:	29d3383a 	mul	r9,r5,r7
    d330:	288b383a 	mul	r5,r5,r2
    d334:	31cf383a 	mul	r7,r6,r7
    d338:	4806d43a 	srli	r3,r9,16
    d33c:	4111c83a 	sub	r8,r8,r4
    d340:	29cb883a 	add	r5,r5,r7
    d344:	194b883a 	add	r5,r3,r5
    d348:	3085383a 	mul	r2,r6,r2
    d34c:	29c0022e 	bgeu	r5,r7,d358 <__umoddi3+0x3d8>
    d350:	00c00074 	movhi	r3,1
    d354:	10c5883a 	add	r2,r2,r3
    d358:	2808d43a 	srli	r4,r5,16
    d35c:	280a943a 	slli	r5,r5,16
    d360:	4a7fffcc 	andi	r9,r9,65535
    d364:	2085883a 	add	r2,r4,r2
    d368:	2a4b883a 	add	r5,r5,r9
    d36c:	40803636 	bltu	r8,r2,d448 <__umoddi3+0x4c8>
    d370:	40804d26 	beq	r8,r2,d4a8 <__umoddi3+0x528>
    d374:	4089c83a 	sub	r4,r8,r2
    d378:	280f883a 	mov	r7,r5
    d37c:	81cfc83a 	sub	r7,r16,r7
    d380:	81c7803a 	cmpltu	r3,r16,r7
    d384:	20c7c83a 	sub	r3,r4,r3
    d388:	1cc4983a 	sll	r2,r3,r19
    d38c:	3d0ed83a 	srl	r7,r7,r20
    d390:	1d06d83a 	srl	r3,r3,r20
    d394:	11c4b03a 	or	r2,r2,r7
    d398:	003f9306 	br	d1e8 <__alt_data_end+0xff00d1e8>
    d39c:	9ca6983a 	sll	r19,r19,r18
    d3a0:	88e8d83a 	srl	r20,r17,r3
    d3a4:	80c4d83a 	srl	r2,r16,r3
    d3a8:	982cd43a 	srli	r22,r19,16
    d3ac:	8ca2983a 	sll	r17,r17,r18
    d3b0:	a009883a 	mov	r4,r20
    d3b4:	b00b883a 	mov	r5,r22
    d3b8:	1478b03a 	or	fp,r2,r17
    d3bc:	000d6140 	call	d614 <__umodsi3>
    d3c0:	a009883a 	mov	r4,r20
    d3c4:	b00b883a 	mov	r5,r22
    d3c8:	1023883a 	mov	r17,r2
    d3cc:	000d5b00 	call	d5b0 <__udivsi3>
    d3d0:	9d7fffcc 	andi	r21,r19,65535
    d3d4:	880a943a 	slli	r5,r17,16
    d3d8:	e008d43a 	srli	r4,fp,16
    d3dc:	a885383a 	mul	r2,r21,r2
    d3e0:	84a8983a 	sll	r20,r16,r18
    d3e4:	2148b03a 	or	r4,r4,r5
    d3e8:	2080042e 	bgeu	r4,r2,d3fc <__umoddi3+0x47c>
    d3ec:	24c9883a 	add	r4,r4,r19
    d3f0:	24c00236 	bltu	r4,r19,d3fc <__umoddi3+0x47c>
    d3f4:	2080012e 	bgeu	r4,r2,d3fc <__umoddi3+0x47c>
    d3f8:	24c9883a 	add	r4,r4,r19
    d3fc:	20a3c83a 	sub	r17,r4,r2
    d400:	b00b883a 	mov	r5,r22
    d404:	8809883a 	mov	r4,r17
    d408:	000d6140 	call	d614 <__umodsi3>
    d40c:	102f883a 	mov	r23,r2
    d410:	8809883a 	mov	r4,r17
    d414:	b00b883a 	mov	r5,r22
    d418:	000d5b00 	call	d5b0 <__udivsi3>
    d41c:	b82e943a 	slli	r23,r23,16
    d420:	a885383a 	mul	r2,r21,r2
    d424:	e13fffcc 	andi	r4,fp,65535
    d428:	25c8b03a 	or	r4,r4,r23
    d42c:	2080042e 	bgeu	r4,r2,d440 <__umoddi3+0x4c0>
    d430:	24c9883a 	add	r4,r4,r19
    d434:	24c00236 	bltu	r4,r19,d440 <__umoddi3+0x4c0>
    d438:	2080012e 	bgeu	r4,r2,d440 <__umoddi3+0x4c0>
    d43c:	24c9883a 	add	r4,r4,r19
    d440:	20a3c83a 	sub	r17,r4,r2
    d444:	003f4806 	br	d168 <__alt_data_end+0xff00d168>
    d448:	2c8fc83a 	sub	r7,r5,r18
    d44c:	1545c83a 	sub	r2,r2,r21
    d450:	29cb803a 	cmpltu	r5,r5,r7
    d454:	1145c83a 	sub	r2,r2,r5
    d458:	4089c83a 	sub	r4,r8,r2
    d45c:	003fc706 	br	d37c <__alt_data_end+0xff00d37c>
    d460:	01000604 	movi	r4,24
    d464:	003f1806 	br	d0c8 <__alt_data_end+0xff00d0c8>
    d468:	00800604 	movi	r2,24
    d46c:	003f3206 	br	d138 <__alt_data_end+0xff00d138>
    d470:	01000604 	movi	r4,24
    d474:	003ed906 	br	cfdc <__alt_data_end+0xff00cfdc>
    d478:	413fa52e 	bgeu	r8,r4,d310 <__alt_data_end+0xff00d310>
    d47c:	297fff84 	addi	r5,r5,-2
    d480:	4551883a 	add	r8,r8,r21
    d484:	003fa306 	br	d314 <__alt_data_end+0xff00d314>
    d488:	15ff8b2e 	bgeu	r2,r23,d2b8 <__alt_data_end+0xff00d2b8>
    d48c:	31bfff84 	addi	r6,r6,-2
    d490:	1545883a 	add	r2,r2,r21
    d494:	003f8906 	br	d2bc <__alt_data_end+0xff00d2bc>
    d498:	24c9883a 	add	r4,r4,r19
    d49c:	003eee06 	br	d058 <__alt_data_end+0xff00d058>
    d4a0:	8005883a 	mov	r2,r16
    d4a4:	003f1706 	br	d104 <__alt_data_end+0xff00d104>
    d4a8:	817fe736 	bltu	r16,r5,d448 <__alt_data_end+0xff00d448>
    d4ac:	280f883a 	mov	r7,r5
    d4b0:	0009883a 	mov	r4,zero
    d4b4:	003fb106 	br	d37c <__alt_data_end+0xff00d37c>

0000d4b8 <__divsi3>:
    d4b8:	20001b16 	blt	r4,zero,d528 <__divsi3+0x70>
    d4bc:	000f883a 	mov	r7,zero
    d4c0:	28001616 	blt	r5,zero,d51c <__divsi3+0x64>
    d4c4:	200d883a 	mov	r6,r4
    d4c8:	29001a2e 	bgeu	r5,r4,d534 <__divsi3+0x7c>
    d4cc:	00800804 	movi	r2,32
    d4d0:	00c00044 	movi	r3,1
    d4d4:	00000106 	br	d4dc <__divsi3+0x24>
    d4d8:	10000d26 	beq	r2,zero,d510 <__divsi3+0x58>
    d4dc:	294b883a 	add	r5,r5,r5
    d4e0:	10bfffc4 	addi	r2,r2,-1
    d4e4:	18c7883a 	add	r3,r3,r3
    d4e8:	293ffb36 	bltu	r5,r4,d4d8 <__alt_data_end+0xff00d4d8>
    d4ec:	0005883a 	mov	r2,zero
    d4f0:	18000726 	beq	r3,zero,d510 <__divsi3+0x58>
    d4f4:	0005883a 	mov	r2,zero
    d4f8:	31400236 	bltu	r6,r5,d504 <__divsi3+0x4c>
    d4fc:	314dc83a 	sub	r6,r6,r5
    d500:	10c4b03a 	or	r2,r2,r3
    d504:	1806d07a 	srli	r3,r3,1
    d508:	280ad07a 	srli	r5,r5,1
    d50c:	183ffa1e 	bne	r3,zero,d4f8 <__alt_data_end+0xff00d4f8>
    d510:	38000126 	beq	r7,zero,d518 <__divsi3+0x60>
    d514:	0085c83a 	sub	r2,zero,r2
    d518:	f800283a 	ret
    d51c:	014bc83a 	sub	r5,zero,r5
    d520:	39c0005c 	xori	r7,r7,1
    d524:	003fe706 	br	d4c4 <__alt_data_end+0xff00d4c4>
    d528:	0109c83a 	sub	r4,zero,r4
    d52c:	01c00044 	movi	r7,1
    d530:	003fe306 	br	d4c0 <__alt_data_end+0xff00d4c0>
    d534:	00c00044 	movi	r3,1
    d538:	003fee06 	br	d4f4 <__alt_data_end+0xff00d4f4>

0000d53c <__modsi3>:
    d53c:	20001716 	blt	r4,zero,d59c <__modsi3+0x60>
    d540:	000f883a 	mov	r7,zero
    d544:	2005883a 	mov	r2,r4
    d548:	28001216 	blt	r5,zero,d594 <__modsi3+0x58>
    d54c:	2900162e 	bgeu	r5,r4,d5a8 <__modsi3+0x6c>
    d550:	01800804 	movi	r6,32
    d554:	00c00044 	movi	r3,1
    d558:	00000106 	br	d560 <__modsi3+0x24>
    d55c:	30000a26 	beq	r6,zero,d588 <__modsi3+0x4c>
    d560:	294b883a 	add	r5,r5,r5
    d564:	31bfffc4 	addi	r6,r6,-1
    d568:	18c7883a 	add	r3,r3,r3
    d56c:	293ffb36 	bltu	r5,r4,d55c <__alt_data_end+0xff00d55c>
    d570:	18000526 	beq	r3,zero,d588 <__modsi3+0x4c>
    d574:	1806d07a 	srli	r3,r3,1
    d578:	11400136 	bltu	r2,r5,d580 <__modsi3+0x44>
    d57c:	1145c83a 	sub	r2,r2,r5
    d580:	280ad07a 	srli	r5,r5,1
    d584:	183ffb1e 	bne	r3,zero,d574 <__alt_data_end+0xff00d574>
    d588:	38000126 	beq	r7,zero,d590 <__modsi3+0x54>
    d58c:	0085c83a 	sub	r2,zero,r2
    d590:	f800283a 	ret
    d594:	014bc83a 	sub	r5,zero,r5
    d598:	003fec06 	br	d54c <__alt_data_end+0xff00d54c>
    d59c:	0109c83a 	sub	r4,zero,r4
    d5a0:	01c00044 	movi	r7,1
    d5a4:	003fe706 	br	d544 <__alt_data_end+0xff00d544>
    d5a8:	00c00044 	movi	r3,1
    d5ac:	003ff106 	br	d574 <__alt_data_end+0xff00d574>

0000d5b0 <__udivsi3>:
    d5b0:	200d883a 	mov	r6,r4
    d5b4:	2900152e 	bgeu	r5,r4,d60c <__udivsi3+0x5c>
    d5b8:	28001416 	blt	r5,zero,d60c <__udivsi3+0x5c>
    d5bc:	00800804 	movi	r2,32
    d5c0:	00c00044 	movi	r3,1
    d5c4:	00000206 	br	d5d0 <__udivsi3+0x20>
    d5c8:	10000e26 	beq	r2,zero,d604 <__udivsi3+0x54>
    d5cc:	28000516 	blt	r5,zero,d5e4 <__udivsi3+0x34>
    d5d0:	294b883a 	add	r5,r5,r5
    d5d4:	10bfffc4 	addi	r2,r2,-1
    d5d8:	18c7883a 	add	r3,r3,r3
    d5dc:	293ffa36 	bltu	r5,r4,d5c8 <__alt_data_end+0xff00d5c8>
    d5e0:	18000826 	beq	r3,zero,d604 <__udivsi3+0x54>
    d5e4:	0005883a 	mov	r2,zero
    d5e8:	31400236 	bltu	r6,r5,d5f4 <__udivsi3+0x44>
    d5ec:	314dc83a 	sub	r6,r6,r5
    d5f0:	10c4b03a 	or	r2,r2,r3
    d5f4:	1806d07a 	srli	r3,r3,1
    d5f8:	280ad07a 	srli	r5,r5,1
    d5fc:	183ffa1e 	bne	r3,zero,d5e8 <__alt_data_end+0xff00d5e8>
    d600:	f800283a 	ret
    d604:	0005883a 	mov	r2,zero
    d608:	f800283a 	ret
    d60c:	00c00044 	movi	r3,1
    d610:	003ff406 	br	d5e4 <__alt_data_end+0xff00d5e4>

0000d614 <__umodsi3>:
    d614:	2005883a 	mov	r2,r4
    d618:	2900122e 	bgeu	r5,r4,d664 <__umodsi3+0x50>
    d61c:	28001116 	blt	r5,zero,d664 <__umodsi3+0x50>
    d620:	01800804 	movi	r6,32
    d624:	00c00044 	movi	r3,1
    d628:	00000206 	br	d634 <__umodsi3+0x20>
    d62c:	30000c26 	beq	r6,zero,d660 <__umodsi3+0x4c>
    d630:	28000516 	blt	r5,zero,d648 <__umodsi3+0x34>
    d634:	294b883a 	add	r5,r5,r5
    d638:	31bfffc4 	addi	r6,r6,-1
    d63c:	18c7883a 	add	r3,r3,r3
    d640:	293ffa36 	bltu	r5,r4,d62c <__alt_data_end+0xff00d62c>
    d644:	18000626 	beq	r3,zero,d660 <__umodsi3+0x4c>
    d648:	1806d07a 	srli	r3,r3,1
    d64c:	11400136 	bltu	r2,r5,d654 <__umodsi3+0x40>
    d650:	1145c83a 	sub	r2,r2,r5
    d654:	280ad07a 	srli	r5,r5,1
    d658:	183ffb1e 	bne	r3,zero,d648 <__alt_data_end+0xff00d648>
    d65c:	f800283a 	ret
    d660:	f800283a 	ret
    d664:	00c00044 	movi	r3,1
    d668:	003ff706 	br	d648 <__alt_data_end+0xff00d648>

0000d66c <__adddf3>:
    d66c:	02c00434 	movhi	r11,16
    d670:	5affffc4 	addi	r11,r11,-1
    d674:	2806d7fa 	srli	r3,r5,31
    d678:	2ad4703a 	and	r10,r5,r11
    d67c:	3ad2703a 	and	r9,r7,r11
    d680:	3804d53a 	srli	r2,r7,20
    d684:	3018d77a 	srli	r12,r6,29
    d688:	280ad53a 	srli	r5,r5,20
    d68c:	501490fa 	slli	r10,r10,3
    d690:	2010d77a 	srli	r8,r4,29
    d694:	481290fa 	slli	r9,r9,3
    d698:	380ed7fa 	srli	r7,r7,31
    d69c:	defffb04 	addi	sp,sp,-20
    d6a0:	dc800215 	stw	r18,8(sp)
    d6a4:	dc400115 	stw	r17,4(sp)
    d6a8:	dc000015 	stw	r16,0(sp)
    d6ac:	dfc00415 	stw	ra,16(sp)
    d6b0:	dcc00315 	stw	r19,12(sp)
    d6b4:	1c803fcc 	andi	r18,r3,255
    d6b8:	2c01ffcc 	andi	r16,r5,2047
    d6bc:	5210b03a 	or	r8,r10,r8
    d6c0:	202290fa 	slli	r17,r4,3
    d6c4:	1081ffcc 	andi	r2,r2,2047
    d6c8:	4b12b03a 	or	r9,r9,r12
    d6cc:	300c90fa 	slli	r6,r6,3
    d6d0:	91c07526 	beq	r18,r7,d8a8 <__adddf3+0x23c>
    d6d4:	8087c83a 	sub	r3,r16,r2
    d6d8:	00c0ab0e 	bge	zero,r3,d988 <__adddf3+0x31c>
    d6dc:	10002a1e 	bne	r2,zero,d788 <__adddf3+0x11c>
    d6e0:	4984b03a 	or	r2,r9,r6
    d6e4:	1000961e 	bne	r2,zero,d940 <__adddf3+0x2d4>
    d6e8:	888001cc 	andi	r2,r17,7
    d6ec:	10000726 	beq	r2,zero,d70c <__adddf3+0xa0>
    d6f0:	888003cc 	andi	r2,r17,15
    d6f4:	00c00104 	movi	r3,4
    d6f8:	10c00426 	beq	r2,r3,d70c <__adddf3+0xa0>
    d6fc:	88c7883a 	add	r3,r17,r3
    d700:	1c63803a 	cmpltu	r17,r3,r17
    d704:	4451883a 	add	r8,r8,r17
    d708:	1823883a 	mov	r17,r3
    d70c:	4080202c 	andhi	r2,r8,128
    d710:	10005926 	beq	r2,zero,d878 <__adddf3+0x20c>
    d714:	84000044 	addi	r16,r16,1
    d718:	0081ffc4 	movi	r2,2047
    d71c:	8080ba26 	beq	r16,r2,da08 <__adddf3+0x39c>
    d720:	00bfe034 	movhi	r2,65408
    d724:	10bfffc4 	addi	r2,r2,-1
    d728:	4090703a 	and	r8,r8,r2
    d72c:	4004977a 	slli	r2,r8,29
    d730:	4010927a 	slli	r8,r8,9
    d734:	8822d0fa 	srli	r17,r17,3
    d738:	8401ffcc 	andi	r16,r16,2047
    d73c:	4010d33a 	srli	r8,r8,12
    d740:	9007883a 	mov	r3,r18
    d744:	1444b03a 	or	r2,r2,r17
    d748:	8401ffcc 	andi	r16,r16,2047
    d74c:	8020953a 	slli	r16,r16,20
    d750:	18c03fcc 	andi	r3,r3,255
    d754:	01000434 	movhi	r4,16
    d758:	213fffc4 	addi	r4,r4,-1
    d75c:	180697fa 	slli	r3,r3,31
    d760:	4110703a 	and	r8,r8,r4
    d764:	4410b03a 	or	r8,r8,r16
    d768:	40c6b03a 	or	r3,r8,r3
    d76c:	dfc00417 	ldw	ra,16(sp)
    d770:	dcc00317 	ldw	r19,12(sp)
    d774:	dc800217 	ldw	r18,8(sp)
    d778:	dc400117 	ldw	r17,4(sp)
    d77c:	dc000017 	ldw	r16,0(sp)
    d780:	dec00504 	addi	sp,sp,20
    d784:	f800283a 	ret
    d788:	0081ffc4 	movi	r2,2047
    d78c:	80bfd626 	beq	r16,r2,d6e8 <__alt_data_end+0xff00d6e8>
    d790:	4a402034 	orhi	r9,r9,128
    d794:	00800e04 	movi	r2,56
    d798:	10c09f16 	blt	r2,r3,da18 <__adddf3+0x3ac>
    d79c:	008007c4 	movi	r2,31
    d7a0:	10c0c216 	blt	r2,r3,daac <__adddf3+0x440>
    d7a4:	00800804 	movi	r2,32
    d7a8:	10c5c83a 	sub	r2,r2,r3
    d7ac:	488a983a 	sll	r5,r9,r2
    d7b0:	30c8d83a 	srl	r4,r6,r3
    d7b4:	3084983a 	sll	r2,r6,r2
    d7b8:	48c6d83a 	srl	r3,r9,r3
    d7bc:	290cb03a 	or	r6,r5,r4
    d7c0:	1004c03a 	cmpne	r2,r2,zero
    d7c4:	308cb03a 	or	r6,r6,r2
    d7c8:	898dc83a 	sub	r6,r17,r6
    d7cc:	89a3803a 	cmpltu	r17,r17,r6
    d7d0:	40d1c83a 	sub	r8,r8,r3
    d7d4:	4451c83a 	sub	r8,r8,r17
    d7d8:	3023883a 	mov	r17,r6
    d7dc:	4080202c 	andhi	r2,r8,128
    d7e0:	10002326 	beq	r2,zero,d870 <__adddf3+0x204>
    d7e4:	04c02034 	movhi	r19,128
    d7e8:	9cffffc4 	addi	r19,r19,-1
    d7ec:	44e6703a 	and	r19,r8,r19
    d7f0:	98007626 	beq	r19,zero,d9cc <__adddf3+0x360>
    d7f4:	9809883a 	mov	r4,r19
    d7f8:	00033280 	call	3328 <__clzsi2>
    d7fc:	10fffe04 	addi	r3,r2,-8
    d800:	010007c4 	movi	r4,31
    d804:	20c07716 	blt	r4,r3,d9e4 <__adddf3+0x378>
    d808:	00800804 	movi	r2,32
    d80c:	10c5c83a 	sub	r2,r2,r3
    d810:	8884d83a 	srl	r2,r17,r2
    d814:	98d0983a 	sll	r8,r19,r3
    d818:	88e2983a 	sll	r17,r17,r3
    d81c:	1204b03a 	or	r2,r2,r8
    d820:	1c007416 	blt	r3,r16,d9f4 <__adddf3+0x388>
    d824:	1c21c83a 	sub	r16,r3,r16
    d828:	82000044 	addi	r8,r16,1
    d82c:	00c007c4 	movi	r3,31
    d830:	1a009116 	blt	r3,r8,da78 <__adddf3+0x40c>
    d834:	00c00804 	movi	r3,32
    d838:	1a07c83a 	sub	r3,r3,r8
    d83c:	8a08d83a 	srl	r4,r17,r8
    d840:	88e2983a 	sll	r17,r17,r3
    d844:	10c6983a 	sll	r3,r2,r3
    d848:	1210d83a 	srl	r8,r2,r8
    d84c:	8804c03a 	cmpne	r2,r17,zero
    d850:	1906b03a 	or	r3,r3,r4
    d854:	18a2b03a 	or	r17,r3,r2
    d858:	0021883a 	mov	r16,zero
    d85c:	003fa206 	br	d6e8 <__alt_data_end+0xff00d6e8>
    d860:	1890b03a 	or	r8,r3,r2
    d864:	40017d26 	beq	r8,zero,de5c <__adddf3+0x7f0>
    d868:	1011883a 	mov	r8,r2
    d86c:	1823883a 	mov	r17,r3
    d870:	888001cc 	andi	r2,r17,7
    d874:	103f9e1e 	bne	r2,zero,d6f0 <__alt_data_end+0xff00d6f0>
    d878:	4004977a 	slli	r2,r8,29
    d87c:	8822d0fa 	srli	r17,r17,3
    d880:	4010d0fa 	srli	r8,r8,3
    d884:	9007883a 	mov	r3,r18
    d888:	1444b03a 	or	r2,r2,r17
    d88c:	0101ffc4 	movi	r4,2047
    d890:	81002426 	beq	r16,r4,d924 <__adddf3+0x2b8>
    d894:	8120703a 	and	r16,r16,r4
    d898:	01000434 	movhi	r4,16
    d89c:	213fffc4 	addi	r4,r4,-1
    d8a0:	4110703a 	and	r8,r8,r4
    d8a4:	003fa806 	br	d748 <__alt_data_end+0xff00d748>
    d8a8:	8089c83a 	sub	r4,r16,r2
    d8ac:	01005e0e 	bge	zero,r4,da28 <__adddf3+0x3bc>
    d8b0:	10002b26 	beq	r2,zero,d960 <__adddf3+0x2f4>
    d8b4:	0081ffc4 	movi	r2,2047
    d8b8:	80bf8b26 	beq	r16,r2,d6e8 <__alt_data_end+0xff00d6e8>
    d8bc:	4a402034 	orhi	r9,r9,128
    d8c0:	00800e04 	movi	r2,56
    d8c4:	1100a40e 	bge	r2,r4,db58 <__adddf3+0x4ec>
    d8c8:	498cb03a 	or	r6,r9,r6
    d8cc:	300ac03a 	cmpne	r5,r6,zero
    d8d0:	0013883a 	mov	r9,zero
    d8d4:	2c4b883a 	add	r5,r5,r17
    d8d8:	2c63803a 	cmpltu	r17,r5,r17
    d8dc:	4a11883a 	add	r8,r9,r8
    d8e0:	8a11883a 	add	r8,r17,r8
    d8e4:	2823883a 	mov	r17,r5
    d8e8:	4080202c 	andhi	r2,r8,128
    d8ec:	103fe026 	beq	r2,zero,d870 <__alt_data_end+0xff00d870>
    d8f0:	84000044 	addi	r16,r16,1
    d8f4:	0081ffc4 	movi	r2,2047
    d8f8:	8080d226 	beq	r16,r2,dc44 <__adddf3+0x5d8>
    d8fc:	00bfe034 	movhi	r2,65408
    d900:	10bfffc4 	addi	r2,r2,-1
    d904:	4090703a 	and	r8,r8,r2
    d908:	880ad07a 	srli	r5,r17,1
    d90c:	400897fa 	slli	r4,r8,31
    d910:	88c0004c 	andi	r3,r17,1
    d914:	28e2b03a 	or	r17,r5,r3
    d918:	4010d07a 	srli	r8,r8,1
    d91c:	2462b03a 	or	r17,r4,r17
    d920:	003f7106 	br	d6e8 <__alt_data_end+0xff00d6e8>
    d924:	4088b03a 	or	r4,r8,r2
    d928:	20014526 	beq	r4,zero,de40 <__adddf3+0x7d4>
    d92c:	01000434 	movhi	r4,16
    d930:	42000234 	orhi	r8,r8,8
    d934:	213fffc4 	addi	r4,r4,-1
    d938:	4110703a 	and	r8,r8,r4
    d93c:	003f8206 	br	d748 <__alt_data_end+0xff00d748>
    d940:	18ffffc4 	addi	r3,r3,-1
    d944:	1800491e 	bne	r3,zero,da6c <__adddf3+0x400>
    d948:	898bc83a 	sub	r5,r17,r6
    d94c:	8963803a 	cmpltu	r17,r17,r5
    d950:	4251c83a 	sub	r8,r8,r9
    d954:	4451c83a 	sub	r8,r8,r17
    d958:	2823883a 	mov	r17,r5
    d95c:	003f9f06 	br	d7dc <__alt_data_end+0xff00d7dc>
    d960:	4984b03a 	or	r2,r9,r6
    d964:	103f6026 	beq	r2,zero,d6e8 <__alt_data_end+0xff00d6e8>
    d968:	213fffc4 	addi	r4,r4,-1
    d96c:	2000931e 	bne	r4,zero,dbbc <__adddf3+0x550>
    d970:	898d883a 	add	r6,r17,r6
    d974:	3463803a 	cmpltu	r17,r6,r17
    d978:	4251883a 	add	r8,r8,r9
    d97c:	8a11883a 	add	r8,r17,r8
    d980:	3023883a 	mov	r17,r6
    d984:	003fd806 	br	d8e8 <__alt_data_end+0xff00d8e8>
    d988:	1800541e 	bne	r3,zero,dadc <__adddf3+0x470>
    d98c:	80800044 	addi	r2,r16,1
    d990:	1081ffcc 	andi	r2,r2,2047
    d994:	00c00044 	movi	r3,1
    d998:	1880a00e 	bge	r3,r2,dc1c <__adddf3+0x5b0>
    d99c:	8989c83a 	sub	r4,r17,r6
    d9a0:	8905803a 	cmpltu	r2,r17,r4
    d9a4:	4267c83a 	sub	r19,r8,r9
    d9a8:	98a7c83a 	sub	r19,r19,r2
    d9ac:	9880202c 	andhi	r2,r19,128
    d9b0:	10006326 	beq	r2,zero,db40 <__adddf3+0x4d4>
    d9b4:	3463c83a 	sub	r17,r6,r17
    d9b8:	4a07c83a 	sub	r3,r9,r8
    d9bc:	344d803a 	cmpltu	r6,r6,r17
    d9c0:	19a7c83a 	sub	r19,r3,r6
    d9c4:	3825883a 	mov	r18,r7
    d9c8:	983f8a1e 	bne	r19,zero,d7f4 <__alt_data_end+0xff00d7f4>
    d9cc:	8809883a 	mov	r4,r17
    d9d0:	00033280 	call	3328 <__clzsi2>
    d9d4:	10800804 	addi	r2,r2,32
    d9d8:	10fffe04 	addi	r3,r2,-8
    d9dc:	010007c4 	movi	r4,31
    d9e0:	20ff890e 	bge	r4,r3,d808 <__alt_data_end+0xff00d808>
    d9e4:	10bff604 	addi	r2,r2,-40
    d9e8:	8884983a 	sll	r2,r17,r2
    d9ec:	0023883a 	mov	r17,zero
    d9f0:	1c3f8c0e 	bge	r3,r16,d824 <__alt_data_end+0xff00d824>
    d9f4:	023fe034 	movhi	r8,65408
    d9f8:	423fffc4 	addi	r8,r8,-1
    d9fc:	80e1c83a 	sub	r16,r16,r3
    da00:	1210703a 	and	r8,r2,r8
    da04:	003f3806 	br	d6e8 <__alt_data_end+0xff00d6e8>
    da08:	9007883a 	mov	r3,r18
    da0c:	0011883a 	mov	r8,zero
    da10:	0005883a 	mov	r2,zero
    da14:	003f4c06 	br	d748 <__alt_data_end+0xff00d748>
    da18:	498cb03a 	or	r6,r9,r6
    da1c:	300cc03a 	cmpne	r6,r6,zero
    da20:	0007883a 	mov	r3,zero
    da24:	003f6806 	br	d7c8 <__alt_data_end+0xff00d7c8>
    da28:	20009c1e 	bne	r4,zero,dc9c <__adddf3+0x630>
    da2c:	80800044 	addi	r2,r16,1
    da30:	1141ffcc 	andi	r5,r2,2047
    da34:	01000044 	movi	r4,1
    da38:	2140670e 	bge	r4,r5,dbd8 <__adddf3+0x56c>
    da3c:	0101ffc4 	movi	r4,2047
    da40:	11007f26 	beq	r2,r4,dc40 <__adddf3+0x5d4>
    da44:	898d883a 	add	r6,r17,r6
    da48:	4247883a 	add	r3,r8,r9
    da4c:	3451803a 	cmpltu	r8,r6,r17
    da50:	40d1883a 	add	r8,r8,r3
    da54:	402297fa 	slli	r17,r8,31
    da58:	300cd07a 	srli	r6,r6,1
    da5c:	4010d07a 	srli	r8,r8,1
    da60:	1021883a 	mov	r16,r2
    da64:	89a2b03a 	or	r17,r17,r6
    da68:	003f1f06 	br	d6e8 <__alt_data_end+0xff00d6e8>
    da6c:	0081ffc4 	movi	r2,2047
    da70:	80bf481e 	bne	r16,r2,d794 <__alt_data_end+0xff00d794>
    da74:	003f1c06 	br	d6e8 <__alt_data_end+0xff00d6e8>
    da78:	843ff844 	addi	r16,r16,-31
    da7c:	01000804 	movi	r4,32
    da80:	1406d83a 	srl	r3,r2,r16
    da84:	41005026 	beq	r8,r4,dbc8 <__adddf3+0x55c>
    da88:	01001004 	movi	r4,64
    da8c:	2211c83a 	sub	r8,r4,r8
    da90:	1204983a 	sll	r2,r2,r8
    da94:	88a2b03a 	or	r17,r17,r2
    da98:	8822c03a 	cmpne	r17,r17,zero
    da9c:	1c62b03a 	or	r17,r3,r17
    daa0:	0011883a 	mov	r8,zero
    daa4:	0021883a 	mov	r16,zero
    daa8:	003f7106 	br	d870 <__alt_data_end+0xff00d870>
    daac:	193ff804 	addi	r4,r3,-32
    dab0:	00800804 	movi	r2,32
    dab4:	4908d83a 	srl	r4,r9,r4
    dab8:	18804526 	beq	r3,r2,dbd0 <__adddf3+0x564>
    dabc:	00801004 	movi	r2,64
    dac0:	10c5c83a 	sub	r2,r2,r3
    dac4:	4886983a 	sll	r3,r9,r2
    dac8:	198cb03a 	or	r6,r3,r6
    dacc:	300cc03a 	cmpne	r6,r6,zero
    dad0:	218cb03a 	or	r6,r4,r6
    dad4:	0007883a 	mov	r3,zero
    dad8:	003f3b06 	br	d7c8 <__alt_data_end+0xff00d7c8>
    dadc:	80002a26 	beq	r16,zero,db88 <__adddf3+0x51c>
    dae0:	0101ffc4 	movi	r4,2047
    dae4:	11006826 	beq	r2,r4,dc88 <__adddf3+0x61c>
    dae8:	00c7c83a 	sub	r3,zero,r3
    daec:	42002034 	orhi	r8,r8,128
    daf0:	01000e04 	movi	r4,56
    daf4:	20c07c16 	blt	r4,r3,dce8 <__adddf3+0x67c>
    daf8:	010007c4 	movi	r4,31
    dafc:	20c0da16 	blt	r4,r3,de68 <__adddf3+0x7fc>
    db00:	01000804 	movi	r4,32
    db04:	20c9c83a 	sub	r4,r4,r3
    db08:	4114983a 	sll	r10,r8,r4
    db0c:	88cad83a 	srl	r5,r17,r3
    db10:	8908983a 	sll	r4,r17,r4
    db14:	40c6d83a 	srl	r3,r8,r3
    db18:	5162b03a 	or	r17,r10,r5
    db1c:	2008c03a 	cmpne	r4,r4,zero
    db20:	8922b03a 	or	r17,r17,r4
    db24:	3463c83a 	sub	r17,r6,r17
    db28:	48c7c83a 	sub	r3,r9,r3
    db2c:	344d803a 	cmpltu	r6,r6,r17
    db30:	1991c83a 	sub	r8,r3,r6
    db34:	1021883a 	mov	r16,r2
    db38:	3825883a 	mov	r18,r7
    db3c:	003f2706 	br	d7dc <__alt_data_end+0xff00d7dc>
    db40:	24d0b03a 	or	r8,r4,r19
    db44:	40001b1e 	bne	r8,zero,dbb4 <__adddf3+0x548>
    db48:	0005883a 	mov	r2,zero
    db4c:	0007883a 	mov	r3,zero
    db50:	0021883a 	mov	r16,zero
    db54:	003f4d06 	br	d88c <__alt_data_end+0xff00d88c>
    db58:	008007c4 	movi	r2,31
    db5c:	11003c16 	blt	r2,r4,dc50 <__adddf3+0x5e4>
    db60:	00800804 	movi	r2,32
    db64:	1105c83a 	sub	r2,r2,r4
    db68:	488e983a 	sll	r7,r9,r2
    db6c:	310ad83a 	srl	r5,r6,r4
    db70:	3084983a 	sll	r2,r6,r2
    db74:	4912d83a 	srl	r9,r9,r4
    db78:	394ab03a 	or	r5,r7,r5
    db7c:	1004c03a 	cmpne	r2,r2,zero
    db80:	288ab03a 	or	r5,r5,r2
    db84:	003f5306 	br	d8d4 <__alt_data_end+0xff00d8d4>
    db88:	4448b03a 	or	r4,r8,r17
    db8c:	20003e26 	beq	r4,zero,dc88 <__adddf3+0x61c>
    db90:	00c6303a 	nor	r3,zero,r3
    db94:	18003a1e 	bne	r3,zero,dc80 <__adddf3+0x614>
    db98:	3463c83a 	sub	r17,r6,r17
    db9c:	4a07c83a 	sub	r3,r9,r8
    dba0:	344d803a 	cmpltu	r6,r6,r17
    dba4:	1991c83a 	sub	r8,r3,r6
    dba8:	1021883a 	mov	r16,r2
    dbac:	3825883a 	mov	r18,r7
    dbb0:	003f0a06 	br	d7dc <__alt_data_end+0xff00d7dc>
    dbb4:	2023883a 	mov	r17,r4
    dbb8:	003f0d06 	br	d7f0 <__alt_data_end+0xff00d7f0>
    dbbc:	0081ffc4 	movi	r2,2047
    dbc0:	80bf3f1e 	bne	r16,r2,d8c0 <__alt_data_end+0xff00d8c0>
    dbc4:	003ec806 	br	d6e8 <__alt_data_end+0xff00d6e8>
    dbc8:	0005883a 	mov	r2,zero
    dbcc:	003fb106 	br	da94 <__alt_data_end+0xff00da94>
    dbd0:	0007883a 	mov	r3,zero
    dbd4:	003fbc06 	br	dac8 <__alt_data_end+0xff00dac8>
    dbd8:	4444b03a 	or	r2,r8,r17
    dbdc:	8000871e 	bne	r16,zero,ddfc <__adddf3+0x790>
    dbe0:	1000ba26 	beq	r2,zero,decc <__adddf3+0x860>
    dbe4:	4984b03a 	or	r2,r9,r6
    dbe8:	103ebf26 	beq	r2,zero,d6e8 <__alt_data_end+0xff00d6e8>
    dbec:	8985883a 	add	r2,r17,r6
    dbf0:	4247883a 	add	r3,r8,r9
    dbf4:	1451803a 	cmpltu	r8,r2,r17
    dbf8:	40d1883a 	add	r8,r8,r3
    dbfc:	40c0202c 	andhi	r3,r8,128
    dc00:	1023883a 	mov	r17,r2
    dc04:	183f1a26 	beq	r3,zero,d870 <__alt_data_end+0xff00d870>
    dc08:	00bfe034 	movhi	r2,65408
    dc0c:	10bfffc4 	addi	r2,r2,-1
    dc10:	2021883a 	mov	r16,r4
    dc14:	4090703a 	and	r8,r8,r2
    dc18:	003eb306 	br	d6e8 <__alt_data_end+0xff00d6e8>
    dc1c:	4444b03a 	or	r2,r8,r17
    dc20:	8000291e 	bne	r16,zero,dcc8 <__adddf3+0x65c>
    dc24:	10004b1e 	bne	r2,zero,dd54 <__adddf3+0x6e8>
    dc28:	4990b03a 	or	r8,r9,r6
    dc2c:	40008b26 	beq	r8,zero,de5c <__adddf3+0x7f0>
    dc30:	4811883a 	mov	r8,r9
    dc34:	3023883a 	mov	r17,r6
    dc38:	3825883a 	mov	r18,r7
    dc3c:	003eaa06 	br	d6e8 <__alt_data_end+0xff00d6e8>
    dc40:	1021883a 	mov	r16,r2
    dc44:	0011883a 	mov	r8,zero
    dc48:	0005883a 	mov	r2,zero
    dc4c:	003f0f06 	br	d88c <__alt_data_end+0xff00d88c>
    dc50:	217ff804 	addi	r5,r4,-32
    dc54:	00800804 	movi	r2,32
    dc58:	494ad83a 	srl	r5,r9,r5
    dc5c:	20807d26 	beq	r4,r2,de54 <__adddf3+0x7e8>
    dc60:	00801004 	movi	r2,64
    dc64:	1109c83a 	sub	r4,r2,r4
    dc68:	4912983a 	sll	r9,r9,r4
    dc6c:	498cb03a 	or	r6,r9,r6
    dc70:	300cc03a 	cmpne	r6,r6,zero
    dc74:	298ab03a 	or	r5,r5,r6
    dc78:	0013883a 	mov	r9,zero
    dc7c:	003f1506 	br	d8d4 <__alt_data_end+0xff00d8d4>
    dc80:	0101ffc4 	movi	r4,2047
    dc84:	113f9a1e 	bne	r2,r4,daf0 <__alt_data_end+0xff00daf0>
    dc88:	4811883a 	mov	r8,r9
    dc8c:	3023883a 	mov	r17,r6
    dc90:	1021883a 	mov	r16,r2
    dc94:	3825883a 	mov	r18,r7
    dc98:	003e9306 	br	d6e8 <__alt_data_end+0xff00d6e8>
    dc9c:	8000161e 	bne	r16,zero,dcf8 <__adddf3+0x68c>
    dca0:	444ab03a 	or	r5,r8,r17
    dca4:	28005126 	beq	r5,zero,ddec <__adddf3+0x780>
    dca8:	0108303a 	nor	r4,zero,r4
    dcac:	20004d1e 	bne	r4,zero,dde4 <__adddf3+0x778>
    dcb0:	89a3883a 	add	r17,r17,r6
    dcb4:	4253883a 	add	r9,r8,r9
    dcb8:	898d803a 	cmpltu	r6,r17,r6
    dcbc:	3251883a 	add	r8,r6,r9
    dcc0:	1021883a 	mov	r16,r2
    dcc4:	003f0806 	br	d8e8 <__alt_data_end+0xff00d8e8>
    dcc8:	1000301e 	bne	r2,zero,dd8c <__adddf3+0x720>
    dccc:	4984b03a 	or	r2,r9,r6
    dcd0:	10007126 	beq	r2,zero,de98 <__adddf3+0x82c>
    dcd4:	4811883a 	mov	r8,r9
    dcd8:	3023883a 	mov	r17,r6
    dcdc:	3825883a 	mov	r18,r7
    dce0:	0401ffc4 	movi	r16,2047
    dce4:	003e8006 	br	d6e8 <__alt_data_end+0xff00d6e8>
    dce8:	4462b03a 	or	r17,r8,r17
    dcec:	8822c03a 	cmpne	r17,r17,zero
    dcf0:	0007883a 	mov	r3,zero
    dcf4:	003f8b06 	br	db24 <__alt_data_end+0xff00db24>
    dcf8:	0141ffc4 	movi	r5,2047
    dcfc:	11403b26 	beq	r2,r5,ddec <__adddf3+0x780>
    dd00:	0109c83a 	sub	r4,zero,r4
    dd04:	42002034 	orhi	r8,r8,128
    dd08:	01400e04 	movi	r5,56
    dd0c:	29006716 	blt	r5,r4,deac <__adddf3+0x840>
    dd10:	014007c4 	movi	r5,31
    dd14:	29007016 	blt	r5,r4,ded8 <__adddf3+0x86c>
    dd18:	01400804 	movi	r5,32
    dd1c:	290bc83a 	sub	r5,r5,r4
    dd20:	4154983a 	sll	r10,r8,r5
    dd24:	890ed83a 	srl	r7,r17,r4
    dd28:	894a983a 	sll	r5,r17,r5
    dd2c:	4108d83a 	srl	r4,r8,r4
    dd30:	51e2b03a 	or	r17,r10,r7
    dd34:	280ac03a 	cmpne	r5,r5,zero
    dd38:	8962b03a 	or	r17,r17,r5
    dd3c:	89a3883a 	add	r17,r17,r6
    dd40:	2253883a 	add	r9,r4,r9
    dd44:	898d803a 	cmpltu	r6,r17,r6
    dd48:	3251883a 	add	r8,r6,r9
    dd4c:	1021883a 	mov	r16,r2
    dd50:	003ee506 	br	d8e8 <__alt_data_end+0xff00d8e8>
    dd54:	4984b03a 	or	r2,r9,r6
    dd58:	103e6326 	beq	r2,zero,d6e8 <__alt_data_end+0xff00d6e8>
    dd5c:	8987c83a 	sub	r3,r17,r6
    dd60:	88c9803a 	cmpltu	r4,r17,r3
    dd64:	4245c83a 	sub	r2,r8,r9
    dd68:	1105c83a 	sub	r2,r2,r4
    dd6c:	1100202c 	andhi	r4,r2,128
    dd70:	203ebb26 	beq	r4,zero,d860 <__alt_data_end+0xff00d860>
    dd74:	3463c83a 	sub	r17,r6,r17
    dd78:	4a07c83a 	sub	r3,r9,r8
    dd7c:	344d803a 	cmpltu	r6,r6,r17
    dd80:	1991c83a 	sub	r8,r3,r6
    dd84:	3825883a 	mov	r18,r7
    dd88:	003e5706 	br	d6e8 <__alt_data_end+0xff00d6e8>
    dd8c:	4984b03a 	or	r2,r9,r6
    dd90:	10002e26 	beq	r2,zero,de4c <__adddf3+0x7e0>
    dd94:	4004d0fa 	srli	r2,r8,3
    dd98:	8822d0fa 	srli	r17,r17,3
    dd9c:	4010977a 	slli	r8,r8,29
    dda0:	10c0022c 	andhi	r3,r2,8
    dda4:	4462b03a 	or	r17,r8,r17
    dda8:	18000826 	beq	r3,zero,ddcc <__adddf3+0x760>
    ddac:	4808d0fa 	srli	r4,r9,3
    ddb0:	20c0022c 	andhi	r3,r4,8
    ddb4:	1800051e 	bne	r3,zero,ddcc <__adddf3+0x760>
    ddb8:	300cd0fa 	srli	r6,r6,3
    ddbc:	4806977a 	slli	r3,r9,29
    ddc0:	2005883a 	mov	r2,r4
    ddc4:	3825883a 	mov	r18,r7
    ddc8:	19a2b03a 	or	r17,r3,r6
    ddcc:	8810d77a 	srli	r8,r17,29
    ddd0:	100490fa 	slli	r2,r2,3
    ddd4:	882290fa 	slli	r17,r17,3
    ddd8:	0401ffc4 	movi	r16,2047
    dddc:	4090b03a 	or	r8,r8,r2
    dde0:	003e4106 	br	d6e8 <__alt_data_end+0xff00d6e8>
    dde4:	0141ffc4 	movi	r5,2047
    dde8:	117fc71e 	bne	r2,r5,dd08 <__alt_data_end+0xff00dd08>
    ddec:	4811883a 	mov	r8,r9
    ddf0:	3023883a 	mov	r17,r6
    ddf4:	1021883a 	mov	r16,r2
    ddf8:	003e3b06 	br	d6e8 <__alt_data_end+0xff00d6e8>
    ddfc:	10002f26 	beq	r2,zero,debc <__adddf3+0x850>
    de00:	4984b03a 	or	r2,r9,r6
    de04:	10001126 	beq	r2,zero,de4c <__adddf3+0x7e0>
    de08:	4004d0fa 	srli	r2,r8,3
    de0c:	8822d0fa 	srli	r17,r17,3
    de10:	4010977a 	slli	r8,r8,29
    de14:	10c0022c 	andhi	r3,r2,8
    de18:	4462b03a 	or	r17,r8,r17
    de1c:	183feb26 	beq	r3,zero,ddcc <__alt_data_end+0xff00ddcc>
    de20:	4808d0fa 	srli	r4,r9,3
    de24:	20c0022c 	andhi	r3,r4,8
    de28:	183fe81e 	bne	r3,zero,ddcc <__alt_data_end+0xff00ddcc>
    de2c:	300cd0fa 	srli	r6,r6,3
    de30:	4806977a 	slli	r3,r9,29
    de34:	2005883a 	mov	r2,r4
    de38:	19a2b03a 	or	r17,r3,r6
    de3c:	003fe306 	br	ddcc <__alt_data_end+0xff00ddcc>
    de40:	0011883a 	mov	r8,zero
    de44:	0005883a 	mov	r2,zero
    de48:	003e3f06 	br	d748 <__alt_data_end+0xff00d748>
    de4c:	0401ffc4 	movi	r16,2047
    de50:	003e2506 	br	d6e8 <__alt_data_end+0xff00d6e8>
    de54:	0013883a 	mov	r9,zero
    de58:	003f8406 	br	dc6c <__alt_data_end+0xff00dc6c>
    de5c:	0005883a 	mov	r2,zero
    de60:	0007883a 	mov	r3,zero
    de64:	003e8906 	br	d88c <__alt_data_end+0xff00d88c>
    de68:	197ff804 	addi	r5,r3,-32
    de6c:	01000804 	movi	r4,32
    de70:	414ad83a 	srl	r5,r8,r5
    de74:	19002426 	beq	r3,r4,df08 <__adddf3+0x89c>
    de78:	01001004 	movi	r4,64
    de7c:	20c7c83a 	sub	r3,r4,r3
    de80:	40c6983a 	sll	r3,r8,r3
    de84:	1c46b03a 	or	r3,r3,r17
    de88:	1806c03a 	cmpne	r3,r3,zero
    de8c:	28e2b03a 	or	r17,r5,r3
    de90:	0007883a 	mov	r3,zero
    de94:	003f2306 	br	db24 <__alt_data_end+0xff00db24>
    de98:	0007883a 	mov	r3,zero
    de9c:	5811883a 	mov	r8,r11
    dea0:	00bfffc4 	movi	r2,-1
    dea4:	0401ffc4 	movi	r16,2047
    dea8:	003e7806 	br	d88c <__alt_data_end+0xff00d88c>
    deac:	4462b03a 	or	r17,r8,r17
    deb0:	8822c03a 	cmpne	r17,r17,zero
    deb4:	0009883a 	mov	r4,zero
    deb8:	003fa006 	br	dd3c <__alt_data_end+0xff00dd3c>
    debc:	4811883a 	mov	r8,r9
    dec0:	3023883a 	mov	r17,r6
    dec4:	0401ffc4 	movi	r16,2047
    dec8:	003e0706 	br	d6e8 <__alt_data_end+0xff00d6e8>
    decc:	4811883a 	mov	r8,r9
    ded0:	3023883a 	mov	r17,r6
    ded4:	003e0406 	br	d6e8 <__alt_data_end+0xff00d6e8>
    ded8:	21fff804 	addi	r7,r4,-32
    dedc:	01400804 	movi	r5,32
    dee0:	41ced83a 	srl	r7,r8,r7
    dee4:	21400a26 	beq	r4,r5,df10 <__adddf3+0x8a4>
    dee8:	01401004 	movi	r5,64
    deec:	2909c83a 	sub	r4,r5,r4
    def0:	4108983a 	sll	r4,r8,r4
    def4:	2448b03a 	or	r4,r4,r17
    def8:	2008c03a 	cmpne	r4,r4,zero
    defc:	3922b03a 	or	r17,r7,r4
    df00:	0009883a 	mov	r4,zero
    df04:	003f8d06 	br	dd3c <__alt_data_end+0xff00dd3c>
    df08:	0007883a 	mov	r3,zero
    df0c:	003fdd06 	br	de84 <__alt_data_end+0xff00de84>
    df10:	0009883a 	mov	r4,zero
    df14:	003ff706 	br	def4 <__alt_data_end+0xff00def4>

0000df18 <__divdf3>:
    df18:	defff204 	addi	sp,sp,-56
    df1c:	dd400915 	stw	r21,36(sp)
    df20:	282ad53a 	srli	r21,r5,20
    df24:	dd000815 	stw	r20,32(sp)
    df28:	2828d7fa 	srli	r20,r5,31
    df2c:	dc000415 	stw	r16,16(sp)
    df30:	04000434 	movhi	r16,16
    df34:	df000c15 	stw	fp,48(sp)
    df38:	843fffc4 	addi	r16,r16,-1
    df3c:	dfc00d15 	stw	ra,52(sp)
    df40:	ddc00b15 	stw	r23,44(sp)
    df44:	dd800a15 	stw	r22,40(sp)
    df48:	dcc00715 	stw	r19,28(sp)
    df4c:	dc800615 	stw	r18,24(sp)
    df50:	dc400515 	stw	r17,20(sp)
    df54:	ad41ffcc 	andi	r21,r21,2047
    df58:	2c20703a 	and	r16,r5,r16
    df5c:	a7003fcc 	andi	fp,r20,255
    df60:	a8006126 	beq	r21,zero,e0e8 <__divdf3+0x1d0>
    df64:	0081ffc4 	movi	r2,2047
    df68:	2025883a 	mov	r18,r4
    df6c:	a8803726 	beq	r21,r2,e04c <__divdf3+0x134>
    df70:	80800434 	orhi	r2,r16,16
    df74:	100490fa 	slli	r2,r2,3
    df78:	2020d77a 	srli	r16,r4,29
    df7c:	202490fa 	slli	r18,r4,3
    df80:	ad7f0044 	addi	r21,r21,-1023
    df84:	80a0b03a 	or	r16,r16,r2
    df88:	0027883a 	mov	r19,zero
    df8c:	0013883a 	mov	r9,zero
    df90:	3804d53a 	srli	r2,r7,20
    df94:	382cd7fa 	srli	r22,r7,31
    df98:	04400434 	movhi	r17,16
    df9c:	8c7fffc4 	addi	r17,r17,-1
    dfa0:	1081ffcc 	andi	r2,r2,2047
    dfa4:	3011883a 	mov	r8,r6
    dfa8:	3c62703a 	and	r17,r7,r17
    dfac:	b5c03fcc 	andi	r23,r22,255
    dfb0:	10006c26 	beq	r2,zero,e164 <__divdf3+0x24c>
    dfb4:	00c1ffc4 	movi	r3,2047
    dfb8:	10c06426 	beq	r2,r3,e14c <__divdf3+0x234>
    dfbc:	88c00434 	orhi	r3,r17,16
    dfc0:	180690fa 	slli	r3,r3,3
    dfc4:	3022d77a 	srli	r17,r6,29
    dfc8:	301090fa 	slli	r8,r6,3
    dfcc:	10bf0044 	addi	r2,r2,-1023
    dfd0:	88e2b03a 	or	r17,r17,r3
    dfd4:	000f883a 	mov	r7,zero
    dfd8:	a58cf03a 	xor	r6,r20,r22
    dfdc:	3cc8b03a 	or	r4,r7,r19
    dfe0:	a8abc83a 	sub	r21,r21,r2
    dfe4:	008003c4 	movi	r2,15
    dfe8:	3007883a 	mov	r3,r6
    dfec:	34c03fcc 	andi	r19,r6,255
    dff0:	11009036 	bltu	r2,r4,e234 <__divdf3+0x31c>
    dff4:	200890ba 	slli	r4,r4,2
    dff8:	00800074 	movhi	r2,1
    dffc:	10b80304 	addi	r2,r2,-8180
    e000:	2089883a 	add	r4,r4,r2
    e004:	20800017 	ldw	r2,0(r4)
    e008:	1000683a 	jmp	r2
    e00c:	0000e234 	movhi	zero,904
    e010:	0000e084 	movi	zero,898
    e014:	0000e224 	muli	zero,zero,904
    e018:	0000e078 	rdprs	zero,zero,897
    e01c:	0000e224 	muli	zero,zero,904
    e020:	0000e1f8 	rdprs	zero,zero,903
    e024:	0000e224 	muli	zero,zero,904
    e028:	0000e078 	rdprs	zero,zero,897
    e02c:	0000e084 	movi	zero,898
    e030:	0000e084 	movi	zero,898
    e034:	0000e1f8 	rdprs	zero,zero,903
    e038:	0000e078 	rdprs	zero,zero,897
    e03c:	0000e068 	cmpgeui	zero,zero,897
    e040:	0000e068 	cmpgeui	zero,zero,897
    e044:	0000e068 	cmpgeui	zero,zero,897
    e048:	0000e518 	cmpnei	zero,zero,916
    e04c:	2404b03a 	or	r2,r4,r16
    e050:	1000661e 	bne	r2,zero,e1ec <__divdf3+0x2d4>
    e054:	04c00204 	movi	r19,8
    e058:	0021883a 	mov	r16,zero
    e05c:	0025883a 	mov	r18,zero
    e060:	02400084 	movi	r9,2
    e064:	003fca06 	br	df90 <__alt_data_end+0xff00df90>
    e068:	8023883a 	mov	r17,r16
    e06c:	9011883a 	mov	r8,r18
    e070:	e02f883a 	mov	r23,fp
    e074:	480f883a 	mov	r7,r9
    e078:	00800084 	movi	r2,2
    e07c:	3881311e 	bne	r7,r2,e544 <__divdf3+0x62c>
    e080:	b827883a 	mov	r19,r23
    e084:	98c0004c 	andi	r3,r19,1
    e088:	0081ffc4 	movi	r2,2047
    e08c:	000b883a 	mov	r5,zero
    e090:	0025883a 	mov	r18,zero
    e094:	1004953a 	slli	r2,r2,20
    e098:	18c03fcc 	andi	r3,r3,255
    e09c:	04400434 	movhi	r17,16
    e0a0:	8c7fffc4 	addi	r17,r17,-1
    e0a4:	180697fa 	slli	r3,r3,31
    e0a8:	2c4a703a 	and	r5,r5,r17
    e0ac:	288ab03a 	or	r5,r5,r2
    e0b0:	28c6b03a 	or	r3,r5,r3
    e0b4:	9005883a 	mov	r2,r18
    e0b8:	dfc00d17 	ldw	ra,52(sp)
    e0bc:	df000c17 	ldw	fp,48(sp)
    e0c0:	ddc00b17 	ldw	r23,44(sp)
    e0c4:	dd800a17 	ldw	r22,40(sp)
    e0c8:	dd400917 	ldw	r21,36(sp)
    e0cc:	dd000817 	ldw	r20,32(sp)
    e0d0:	dcc00717 	ldw	r19,28(sp)
    e0d4:	dc800617 	ldw	r18,24(sp)
    e0d8:	dc400517 	ldw	r17,20(sp)
    e0dc:	dc000417 	ldw	r16,16(sp)
    e0e0:	dec00e04 	addi	sp,sp,56
    e0e4:	f800283a 	ret
    e0e8:	2404b03a 	or	r2,r4,r16
    e0ec:	2027883a 	mov	r19,r4
    e0f0:	10003926 	beq	r2,zero,e1d8 <__divdf3+0x2c0>
    e0f4:	80012e26 	beq	r16,zero,e5b0 <__divdf3+0x698>
    e0f8:	8009883a 	mov	r4,r16
    e0fc:	d9800315 	stw	r6,12(sp)
    e100:	d9c00215 	stw	r7,8(sp)
    e104:	00033280 	call	3328 <__clzsi2>
    e108:	d9800317 	ldw	r6,12(sp)
    e10c:	d9c00217 	ldw	r7,8(sp)
    e110:	113ffd44 	addi	r4,r2,-11
    e114:	00c00704 	movi	r3,28
    e118:	19012116 	blt	r3,r4,e5a0 <__divdf3+0x688>
    e11c:	00c00744 	movi	r3,29
    e120:	147ffe04 	addi	r17,r2,-8
    e124:	1907c83a 	sub	r3,r3,r4
    e128:	8460983a 	sll	r16,r16,r17
    e12c:	98c6d83a 	srl	r3,r19,r3
    e130:	9c64983a 	sll	r18,r19,r17
    e134:	1c20b03a 	or	r16,r3,r16
    e138:	1080fcc4 	addi	r2,r2,1011
    e13c:	00abc83a 	sub	r21,zero,r2
    e140:	0027883a 	mov	r19,zero
    e144:	0013883a 	mov	r9,zero
    e148:	003f9106 	br	df90 <__alt_data_end+0xff00df90>
    e14c:	3446b03a 	or	r3,r6,r17
    e150:	18001f1e 	bne	r3,zero,e1d0 <__divdf3+0x2b8>
    e154:	0023883a 	mov	r17,zero
    e158:	0011883a 	mov	r8,zero
    e15c:	01c00084 	movi	r7,2
    e160:	003f9d06 	br	dfd8 <__alt_data_end+0xff00dfd8>
    e164:	3446b03a 	or	r3,r6,r17
    e168:	18001526 	beq	r3,zero,e1c0 <__divdf3+0x2a8>
    e16c:	88011b26 	beq	r17,zero,e5dc <__divdf3+0x6c4>
    e170:	8809883a 	mov	r4,r17
    e174:	d9800315 	stw	r6,12(sp)
    e178:	da400115 	stw	r9,4(sp)
    e17c:	00033280 	call	3328 <__clzsi2>
    e180:	d9800317 	ldw	r6,12(sp)
    e184:	da400117 	ldw	r9,4(sp)
    e188:	113ffd44 	addi	r4,r2,-11
    e18c:	00c00704 	movi	r3,28
    e190:	19010e16 	blt	r3,r4,e5cc <__divdf3+0x6b4>
    e194:	00c00744 	movi	r3,29
    e198:	123ffe04 	addi	r8,r2,-8
    e19c:	1907c83a 	sub	r3,r3,r4
    e1a0:	8a22983a 	sll	r17,r17,r8
    e1a4:	30c6d83a 	srl	r3,r6,r3
    e1a8:	3210983a 	sll	r8,r6,r8
    e1ac:	1c62b03a 	or	r17,r3,r17
    e1b0:	1080fcc4 	addi	r2,r2,1011
    e1b4:	0085c83a 	sub	r2,zero,r2
    e1b8:	000f883a 	mov	r7,zero
    e1bc:	003f8606 	br	dfd8 <__alt_data_end+0xff00dfd8>
    e1c0:	0023883a 	mov	r17,zero
    e1c4:	0011883a 	mov	r8,zero
    e1c8:	01c00044 	movi	r7,1
    e1cc:	003f8206 	br	dfd8 <__alt_data_end+0xff00dfd8>
    e1d0:	01c000c4 	movi	r7,3
    e1d4:	003f8006 	br	dfd8 <__alt_data_end+0xff00dfd8>
    e1d8:	04c00104 	movi	r19,4
    e1dc:	0021883a 	mov	r16,zero
    e1e0:	0025883a 	mov	r18,zero
    e1e4:	02400044 	movi	r9,1
    e1e8:	003f6906 	br	df90 <__alt_data_end+0xff00df90>
    e1ec:	04c00304 	movi	r19,12
    e1f0:	024000c4 	movi	r9,3
    e1f4:	003f6606 	br	df90 <__alt_data_end+0xff00df90>
    e1f8:	01400434 	movhi	r5,16
    e1fc:	0007883a 	mov	r3,zero
    e200:	297fffc4 	addi	r5,r5,-1
    e204:	04bfffc4 	movi	r18,-1
    e208:	0081ffc4 	movi	r2,2047
    e20c:	003fa106 	br	e094 <__alt_data_end+0xff00e094>
    e210:	00c00044 	movi	r3,1
    e214:	1887c83a 	sub	r3,r3,r2
    e218:	01000e04 	movi	r4,56
    e21c:	20c1210e 	bge	r4,r3,e6a4 <__divdf3+0x78c>
    e220:	98c0004c 	andi	r3,r19,1
    e224:	0005883a 	mov	r2,zero
    e228:	000b883a 	mov	r5,zero
    e22c:	0025883a 	mov	r18,zero
    e230:	003f9806 	br	e094 <__alt_data_end+0xff00e094>
    e234:	8c00fd36 	bltu	r17,r16,e62c <__divdf3+0x714>
    e238:	8440fb26 	beq	r16,r17,e628 <__divdf3+0x710>
    e23c:	8007883a 	mov	r3,r16
    e240:	ad7fffc4 	addi	r21,r21,-1
    e244:	0021883a 	mov	r16,zero
    e248:	4004d63a 	srli	r2,r8,24
    e24c:	8822923a 	slli	r17,r17,8
    e250:	1809883a 	mov	r4,r3
    e254:	402c923a 	slli	r22,r8,8
    e258:	88b8b03a 	or	fp,r17,r2
    e25c:	e028d43a 	srli	r20,fp,16
    e260:	d8c00015 	stw	r3,0(sp)
    e264:	e5ffffcc 	andi	r23,fp,65535
    e268:	a00b883a 	mov	r5,r20
    e26c:	000d5b00 	call	d5b0 <__udivsi3>
    e270:	d8c00017 	ldw	r3,0(sp)
    e274:	a00b883a 	mov	r5,r20
    e278:	d8800315 	stw	r2,12(sp)
    e27c:	1809883a 	mov	r4,r3
    e280:	000d6140 	call	d614 <__umodsi3>
    e284:	d9800317 	ldw	r6,12(sp)
    e288:	1006943a 	slli	r3,r2,16
    e28c:	9004d43a 	srli	r2,r18,16
    e290:	b9a3383a 	mul	r17,r23,r6
    e294:	10c4b03a 	or	r2,r2,r3
    e298:	1440062e 	bgeu	r2,r17,e2b4 <__divdf3+0x39c>
    e29c:	1705883a 	add	r2,r2,fp
    e2a0:	30ffffc4 	addi	r3,r6,-1
    e2a4:	1700ee36 	bltu	r2,fp,e660 <__divdf3+0x748>
    e2a8:	1440ed2e 	bgeu	r2,r17,e660 <__divdf3+0x748>
    e2ac:	31bfff84 	addi	r6,r6,-2
    e2b0:	1705883a 	add	r2,r2,fp
    e2b4:	1463c83a 	sub	r17,r2,r17
    e2b8:	a00b883a 	mov	r5,r20
    e2bc:	8809883a 	mov	r4,r17
    e2c0:	d9800315 	stw	r6,12(sp)
    e2c4:	000d5b00 	call	d5b0 <__udivsi3>
    e2c8:	a00b883a 	mov	r5,r20
    e2cc:	8809883a 	mov	r4,r17
    e2d0:	d8800215 	stw	r2,8(sp)
    e2d4:	000d6140 	call	d614 <__umodsi3>
    e2d8:	d9c00217 	ldw	r7,8(sp)
    e2dc:	1004943a 	slli	r2,r2,16
    e2e0:	94bfffcc 	andi	r18,r18,65535
    e2e4:	b9d1383a 	mul	r8,r23,r7
    e2e8:	90a4b03a 	or	r18,r18,r2
    e2ec:	d9800317 	ldw	r6,12(sp)
    e2f0:	9200062e 	bgeu	r18,r8,e30c <__divdf3+0x3f4>
    e2f4:	9725883a 	add	r18,r18,fp
    e2f8:	38bfffc4 	addi	r2,r7,-1
    e2fc:	9700d636 	bltu	r18,fp,e658 <__divdf3+0x740>
    e300:	9200d52e 	bgeu	r18,r8,e658 <__divdf3+0x740>
    e304:	39ffff84 	addi	r7,r7,-2
    e308:	9725883a 	add	r18,r18,fp
    e30c:	3004943a 	slli	r2,r6,16
    e310:	b012d43a 	srli	r9,r22,16
    e314:	b1bfffcc 	andi	r6,r22,65535
    e318:	11e2b03a 	or	r17,r2,r7
    e31c:	8806d43a 	srli	r3,r17,16
    e320:	893fffcc 	andi	r4,r17,65535
    e324:	218b383a 	mul	r5,r4,r6
    e328:	30c5383a 	mul	r2,r6,r3
    e32c:	2249383a 	mul	r4,r4,r9
    e330:	280ed43a 	srli	r7,r5,16
    e334:	9225c83a 	sub	r18,r18,r8
    e338:	2089883a 	add	r4,r4,r2
    e33c:	3909883a 	add	r4,r7,r4
    e340:	1a47383a 	mul	r3,r3,r9
    e344:	2080022e 	bgeu	r4,r2,e350 <__divdf3+0x438>
    e348:	00800074 	movhi	r2,1
    e34c:	1887883a 	add	r3,r3,r2
    e350:	2004d43a 	srli	r2,r4,16
    e354:	2008943a 	slli	r4,r4,16
    e358:	297fffcc 	andi	r5,r5,65535
    e35c:	10c7883a 	add	r3,r2,r3
    e360:	2149883a 	add	r4,r4,r5
    e364:	90c0a536 	bltu	r18,r3,e5fc <__divdf3+0x6e4>
    e368:	90c0bf26 	beq	r18,r3,e668 <__divdf3+0x750>
    e36c:	90c7c83a 	sub	r3,r18,r3
    e370:	810fc83a 	sub	r7,r16,r4
    e374:	81e5803a 	cmpltu	r18,r16,r7
    e378:	1ca5c83a 	sub	r18,r3,r18
    e37c:	e480c126 	beq	fp,r18,e684 <__divdf3+0x76c>
    e380:	a00b883a 	mov	r5,r20
    e384:	9009883a 	mov	r4,r18
    e388:	d9800315 	stw	r6,12(sp)
    e38c:	d9c00215 	stw	r7,8(sp)
    e390:	da400115 	stw	r9,4(sp)
    e394:	000d5b00 	call	d5b0 <__udivsi3>
    e398:	a00b883a 	mov	r5,r20
    e39c:	9009883a 	mov	r4,r18
    e3a0:	d8800015 	stw	r2,0(sp)
    e3a4:	000d6140 	call	d614 <__umodsi3>
    e3a8:	d9c00217 	ldw	r7,8(sp)
    e3ac:	da000017 	ldw	r8,0(sp)
    e3b0:	1006943a 	slli	r3,r2,16
    e3b4:	3804d43a 	srli	r2,r7,16
    e3b8:	ba21383a 	mul	r16,r23,r8
    e3bc:	d9800317 	ldw	r6,12(sp)
    e3c0:	10c4b03a 	or	r2,r2,r3
    e3c4:	da400117 	ldw	r9,4(sp)
    e3c8:	1400062e 	bgeu	r2,r16,e3e4 <__divdf3+0x4cc>
    e3cc:	1705883a 	add	r2,r2,fp
    e3d0:	40ffffc4 	addi	r3,r8,-1
    e3d4:	1700ad36 	bltu	r2,fp,e68c <__divdf3+0x774>
    e3d8:	1400ac2e 	bgeu	r2,r16,e68c <__divdf3+0x774>
    e3dc:	423fff84 	addi	r8,r8,-2
    e3e0:	1705883a 	add	r2,r2,fp
    e3e4:	1421c83a 	sub	r16,r2,r16
    e3e8:	a00b883a 	mov	r5,r20
    e3ec:	8009883a 	mov	r4,r16
    e3f0:	d9800315 	stw	r6,12(sp)
    e3f4:	d9c00215 	stw	r7,8(sp)
    e3f8:	da000015 	stw	r8,0(sp)
    e3fc:	da400115 	stw	r9,4(sp)
    e400:	000d5b00 	call	d5b0 <__udivsi3>
    e404:	8009883a 	mov	r4,r16
    e408:	a00b883a 	mov	r5,r20
    e40c:	1025883a 	mov	r18,r2
    e410:	000d6140 	call	d614 <__umodsi3>
    e414:	d9c00217 	ldw	r7,8(sp)
    e418:	1004943a 	slli	r2,r2,16
    e41c:	bcaf383a 	mul	r23,r23,r18
    e420:	393fffcc 	andi	r4,r7,65535
    e424:	2088b03a 	or	r4,r4,r2
    e428:	d9800317 	ldw	r6,12(sp)
    e42c:	da000017 	ldw	r8,0(sp)
    e430:	da400117 	ldw	r9,4(sp)
    e434:	25c0062e 	bgeu	r4,r23,e450 <__divdf3+0x538>
    e438:	2709883a 	add	r4,r4,fp
    e43c:	90bfffc4 	addi	r2,r18,-1
    e440:	27009436 	bltu	r4,fp,e694 <__divdf3+0x77c>
    e444:	25c0932e 	bgeu	r4,r23,e694 <__divdf3+0x77c>
    e448:	94bfff84 	addi	r18,r18,-2
    e44c:	2709883a 	add	r4,r4,fp
    e450:	4004943a 	slli	r2,r8,16
    e454:	25efc83a 	sub	r23,r4,r23
    e458:	1490b03a 	or	r8,r2,r18
    e45c:	4008d43a 	srli	r4,r8,16
    e460:	40ffffcc 	andi	r3,r8,65535
    e464:	30c5383a 	mul	r2,r6,r3
    e468:	1a47383a 	mul	r3,r3,r9
    e46c:	310d383a 	mul	r6,r6,r4
    e470:	100ad43a 	srli	r5,r2,16
    e474:	4913383a 	mul	r9,r9,r4
    e478:	1987883a 	add	r3,r3,r6
    e47c:	28c7883a 	add	r3,r5,r3
    e480:	1980022e 	bgeu	r3,r6,e48c <__divdf3+0x574>
    e484:	01000074 	movhi	r4,1
    e488:	4913883a 	add	r9,r9,r4
    e48c:	1808d43a 	srli	r4,r3,16
    e490:	1806943a 	slli	r3,r3,16
    e494:	10bfffcc 	andi	r2,r2,65535
    e498:	2253883a 	add	r9,r4,r9
    e49c:	1887883a 	add	r3,r3,r2
    e4a0:	ba403836 	bltu	r23,r9,e584 <__divdf3+0x66c>
    e4a4:	ba403626 	beq	r23,r9,e580 <__divdf3+0x668>
    e4a8:	42000054 	ori	r8,r8,1
    e4ac:	a880ffc4 	addi	r2,r21,1023
    e4b0:	00bf570e 	bge	zero,r2,e210 <__alt_data_end+0xff00e210>
    e4b4:	40c001cc 	andi	r3,r8,7
    e4b8:	18000726 	beq	r3,zero,e4d8 <__divdf3+0x5c0>
    e4bc:	40c003cc 	andi	r3,r8,15
    e4c0:	01000104 	movi	r4,4
    e4c4:	19000426 	beq	r3,r4,e4d8 <__divdf3+0x5c0>
    e4c8:	4107883a 	add	r3,r8,r4
    e4cc:	1a11803a 	cmpltu	r8,r3,r8
    e4d0:	8a23883a 	add	r17,r17,r8
    e4d4:	1811883a 	mov	r8,r3
    e4d8:	88c0402c 	andhi	r3,r17,256
    e4dc:	18000426 	beq	r3,zero,e4f0 <__divdf3+0x5d8>
    e4e0:	00ffc034 	movhi	r3,65280
    e4e4:	18ffffc4 	addi	r3,r3,-1
    e4e8:	a8810004 	addi	r2,r21,1024
    e4ec:	88e2703a 	and	r17,r17,r3
    e4f0:	00c1ff84 	movi	r3,2046
    e4f4:	18bee316 	blt	r3,r2,e084 <__alt_data_end+0xff00e084>
    e4f8:	8824977a 	slli	r18,r17,29
    e4fc:	4010d0fa 	srli	r8,r8,3
    e500:	8822927a 	slli	r17,r17,9
    e504:	1081ffcc 	andi	r2,r2,2047
    e508:	9224b03a 	or	r18,r18,r8
    e50c:	880ad33a 	srli	r5,r17,12
    e510:	98c0004c 	andi	r3,r19,1
    e514:	003edf06 	br	e094 <__alt_data_end+0xff00e094>
    e518:	8080022c 	andhi	r2,r16,8
    e51c:	10001226 	beq	r2,zero,e568 <__divdf3+0x650>
    e520:	8880022c 	andhi	r2,r17,8
    e524:	1000101e 	bne	r2,zero,e568 <__divdf3+0x650>
    e528:	00800434 	movhi	r2,16
    e52c:	89400234 	orhi	r5,r17,8
    e530:	10bfffc4 	addi	r2,r2,-1
    e534:	b007883a 	mov	r3,r22
    e538:	288a703a 	and	r5,r5,r2
    e53c:	4025883a 	mov	r18,r8
    e540:	003f3106 	br	e208 <__alt_data_end+0xff00e208>
    e544:	008000c4 	movi	r2,3
    e548:	3880a626 	beq	r7,r2,e7e4 <__divdf3+0x8cc>
    e54c:	00800044 	movi	r2,1
    e550:	3880521e 	bne	r7,r2,e69c <__divdf3+0x784>
    e554:	b807883a 	mov	r3,r23
    e558:	0005883a 	mov	r2,zero
    e55c:	000b883a 	mov	r5,zero
    e560:	0025883a 	mov	r18,zero
    e564:	003ecb06 	br	e094 <__alt_data_end+0xff00e094>
    e568:	00800434 	movhi	r2,16
    e56c:	81400234 	orhi	r5,r16,8
    e570:	10bfffc4 	addi	r2,r2,-1
    e574:	a007883a 	mov	r3,r20
    e578:	288a703a 	and	r5,r5,r2
    e57c:	003f2206 	br	e208 <__alt_data_end+0xff00e208>
    e580:	183fca26 	beq	r3,zero,e4ac <__alt_data_end+0xff00e4ac>
    e584:	e5ef883a 	add	r23,fp,r23
    e588:	40bfffc4 	addi	r2,r8,-1
    e58c:	bf00392e 	bgeu	r23,fp,e674 <__divdf3+0x75c>
    e590:	1011883a 	mov	r8,r2
    e594:	ba7fc41e 	bne	r23,r9,e4a8 <__alt_data_end+0xff00e4a8>
    e598:	b0ffc31e 	bne	r22,r3,e4a8 <__alt_data_end+0xff00e4a8>
    e59c:	003fc306 	br	e4ac <__alt_data_end+0xff00e4ac>
    e5a0:	143ff604 	addi	r16,r2,-40
    e5a4:	9c20983a 	sll	r16,r19,r16
    e5a8:	0025883a 	mov	r18,zero
    e5ac:	003ee206 	br	e138 <__alt_data_end+0xff00e138>
    e5b0:	d9800315 	stw	r6,12(sp)
    e5b4:	d9c00215 	stw	r7,8(sp)
    e5b8:	00033280 	call	3328 <__clzsi2>
    e5bc:	10800804 	addi	r2,r2,32
    e5c0:	d9c00217 	ldw	r7,8(sp)
    e5c4:	d9800317 	ldw	r6,12(sp)
    e5c8:	003ed106 	br	e110 <__alt_data_end+0xff00e110>
    e5cc:	147ff604 	addi	r17,r2,-40
    e5d0:	3462983a 	sll	r17,r6,r17
    e5d4:	0011883a 	mov	r8,zero
    e5d8:	003ef506 	br	e1b0 <__alt_data_end+0xff00e1b0>
    e5dc:	3009883a 	mov	r4,r6
    e5e0:	d9800315 	stw	r6,12(sp)
    e5e4:	da400115 	stw	r9,4(sp)
    e5e8:	00033280 	call	3328 <__clzsi2>
    e5ec:	10800804 	addi	r2,r2,32
    e5f0:	da400117 	ldw	r9,4(sp)
    e5f4:	d9800317 	ldw	r6,12(sp)
    e5f8:	003ee306 	br	e188 <__alt_data_end+0xff00e188>
    e5fc:	85a1883a 	add	r16,r16,r22
    e600:	8585803a 	cmpltu	r2,r16,r22
    e604:	1705883a 	add	r2,r2,fp
    e608:	14a5883a 	add	r18,r2,r18
    e60c:	88bfffc4 	addi	r2,r17,-1
    e610:	e4800c2e 	bgeu	fp,r18,e644 <__divdf3+0x72c>
    e614:	90c03e36 	bltu	r18,r3,e710 <__divdf3+0x7f8>
    e618:	1c806926 	beq	r3,r18,e7c0 <__divdf3+0x8a8>
    e61c:	90c7c83a 	sub	r3,r18,r3
    e620:	1023883a 	mov	r17,r2
    e624:	003f5206 	br	e370 <__alt_data_end+0xff00e370>
    e628:	923f0436 	bltu	r18,r8,e23c <__alt_data_end+0xff00e23c>
    e62c:	800897fa 	slli	r4,r16,31
    e630:	9004d07a 	srli	r2,r18,1
    e634:	8006d07a 	srli	r3,r16,1
    e638:	902097fa 	slli	r16,r18,31
    e63c:	20a4b03a 	or	r18,r4,r2
    e640:	003f0106 	br	e248 <__alt_data_end+0xff00e248>
    e644:	e4bff51e 	bne	fp,r18,e61c <__alt_data_end+0xff00e61c>
    e648:	85bff22e 	bgeu	r16,r22,e614 <__alt_data_end+0xff00e614>
    e64c:	e0c7c83a 	sub	r3,fp,r3
    e650:	1023883a 	mov	r17,r2
    e654:	003f4606 	br	e370 <__alt_data_end+0xff00e370>
    e658:	100f883a 	mov	r7,r2
    e65c:	003f2b06 	br	e30c <__alt_data_end+0xff00e30c>
    e660:	180d883a 	mov	r6,r3
    e664:	003f1306 	br	e2b4 <__alt_data_end+0xff00e2b4>
    e668:	813fe436 	bltu	r16,r4,e5fc <__alt_data_end+0xff00e5fc>
    e66c:	0007883a 	mov	r3,zero
    e670:	003f3f06 	br	e370 <__alt_data_end+0xff00e370>
    e674:	ba402c36 	bltu	r23,r9,e728 <__divdf3+0x810>
    e678:	4dc05426 	beq	r9,r23,e7cc <__divdf3+0x8b4>
    e67c:	1011883a 	mov	r8,r2
    e680:	003f8906 	br	e4a8 <__alt_data_end+0xff00e4a8>
    e684:	023fffc4 	movi	r8,-1
    e688:	003f8806 	br	e4ac <__alt_data_end+0xff00e4ac>
    e68c:	1811883a 	mov	r8,r3
    e690:	003f5406 	br	e3e4 <__alt_data_end+0xff00e3e4>
    e694:	1025883a 	mov	r18,r2
    e698:	003f6d06 	br	e450 <__alt_data_end+0xff00e450>
    e69c:	b827883a 	mov	r19,r23
    e6a0:	003f8206 	br	e4ac <__alt_data_end+0xff00e4ac>
    e6a4:	010007c4 	movi	r4,31
    e6a8:	20c02616 	blt	r4,r3,e744 <__divdf3+0x82c>
    e6ac:	00800804 	movi	r2,32
    e6b0:	10c5c83a 	sub	r2,r2,r3
    e6b4:	888a983a 	sll	r5,r17,r2
    e6b8:	40c8d83a 	srl	r4,r8,r3
    e6bc:	4084983a 	sll	r2,r8,r2
    e6c0:	88e2d83a 	srl	r17,r17,r3
    e6c4:	2906b03a 	or	r3,r5,r4
    e6c8:	1004c03a 	cmpne	r2,r2,zero
    e6cc:	1886b03a 	or	r3,r3,r2
    e6d0:	188001cc 	andi	r2,r3,7
    e6d4:	10000726 	beq	r2,zero,e6f4 <__divdf3+0x7dc>
    e6d8:	188003cc 	andi	r2,r3,15
    e6dc:	01000104 	movi	r4,4
    e6e0:	11000426 	beq	r2,r4,e6f4 <__divdf3+0x7dc>
    e6e4:	1805883a 	mov	r2,r3
    e6e8:	10c00104 	addi	r3,r2,4
    e6ec:	1885803a 	cmpltu	r2,r3,r2
    e6f0:	88a3883a 	add	r17,r17,r2
    e6f4:	8880202c 	andhi	r2,r17,128
    e6f8:	10002726 	beq	r2,zero,e798 <__divdf3+0x880>
    e6fc:	98c0004c 	andi	r3,r19,1
    e700:	00800044 	movi	r2,1
    e704:	000b883a 	mov	r5,zero
    e708:	0025883a 	mov	r18,zero
    e70c:	003e6106 	br	e094 <__alt_data_end+0xff00e094>
    e710:	85a1883a 	add	r16,r16,r22
    e714:	8585803a 	cmpltu	r2,r16,r22
    e718:	1705883a 	add	r2,r2,fp
    e71c:	14a5883a 	add	r18,r2,r18
    e720:	8c7fff84 	addi	r17,r17,-2
    e724:	003f1106 	br	e36c <__alt_data_end+0xff00e36c>
    e728:	b589883a 	add	r4,r22,r22
    e72c:	25ad803a 	cmpltu	r22,r4,r22
    e730:	b739883a 	add	fp,r22,fp
    e734:	40bfff84 	addi	r2,r8,-2
    e738:	bf2f883a 	add	r23,r23,fp
    e73c:	202d883a 	mov	r22,r4
    e740:	003f9306 	br	e590 <__alt_data_end+0xff00e590>
    e744:	013ff844 	movi	r4,-31
    e748:	2085c83a 	sub	r2,r4,r2
    e74c:	8888d83a 	srl	r4,r17,r2
    e750:	00800804 	movi	r2,32
    e754:	18802126 	beq	r3,r2,e7dc <__divdf3+0x8c4>
    e758:	00801004 	movi	r2,64
    e75c:	10c5c83a 	sub	r2,r2,r3
    e760:	8884983a 	sll	r2,r17,r2
    e764:	1204b03a 	or	r2,r2,r8
    e768:	1004c03a 	cmpne	r2,r2,zero
    e76c:	2084b03a 	or	r2,r4,r2
    e770:	144001cc 	andi	r17,r2,7
    e774:	88000d1e 	bne	r17,zero,e7ac <__divdf3+0x894>
    e778:	000b883a 	mov	r5,zero
    e77c:	1024d0fa 	srli	r18,r2,3
    e780:	98c0004c 	andi	r3,r19,1
    e784:	0005883a 	mov	r2,zero
    e788:	9464b03a 	or	r18,r18,r17
    e78c:	003e4106 	br	e094 <__alt_data_end+0xff00e094>
    e790:	1007883a 	mov	r3,r2
    e794:	0023883a 	mov	r17,zero
    e798:	880a927a 	slli	r5,r17,9
    e79c:	1805883a 	mov	r2,r3
    e7a0:	8822977a 	slli	r17,r17,29
    e7a4:	280ad33a 	srli	r5,r5,12
    e7a8:	003ff406 	br	e77c <__alt_data_end+0xff00e77c>
    e7ac:	10c003cc 	andi	r3,r2,15
    e7b0:	01000104 	movi	r4,4
    e7b4:	193ff626 	beq	r3,r4,e790 <__alt_data_end+0xff00e790>
    e7b8:	0023883a 	mov	r17,zero
    e7bc:	003fca06 	br	e6e8 <__alt_data_end+0xff00e6e8>
    e7c0:	813fd336 	bltu	r16,r4,e710 <__alt_data_end+0xff00e710>
    e7c4:	1023883a 	mov	r17,r2
    e7c8:	003fa806 	br	e66c <__alt_data_end+0xff00e66c>
    e7cc:	b0ffd636 	bltu	r22,r3,e728 <__alt_data_end+0xff00e728>
    e7d0:	1011883a 	mov	r8,r2
    e7d4:	b0ff341e 	bne	r22,r3,e4a8 <__alt_data_end+0xff00e4a8>
    e7d8:	003f3406 	br	e4ac <__alt_data_end+0xff00e4ac>
    e7dc:	0005883a 	mov	r2,zero
    e7e0:	003fe006 	br	e764 <__alt_data_end+0xff00e764>
    e7e4:	00800434 	movhi	r2,16
    e7e8:	89400234 	orhi	r5,r17,8
    e7ec:	10bfffc4 	addi	r2,r2,-1
    e7f0:	b807883a 	mov	r3,r23
    e7f4:	288a703a 	and	r5,r5,r2
    e7f8:	4025883a 	mov	r18,r8
    e7fc:	003e8206 	br	e208 <__alt_data_end+0xff00e208>

0000e800 <__eqdf2>:
    e800:	2804d53a 	srli	r2,r5,20
    e804:	3806d53a 	srli	r3,r7,20
    e808:	02000434 	movhi	r8,16
    e80c:	423fffc4 	addi	r8,r8,-1
    e810:	1081ffcc 	andi	r2,r2,2047
    e814:	0281ffc4 	movi	r10,2047
    e818:	2a12703a 	and	r9,r5,r8
    e81c:	18c1ffcc 	andi	r3,r3,2047
    e820:	3a10703a 	and	r8,r7,r8
    e824:	280ad7fa 	srli	r5,r5,31
    e828:	380ed7fa 	srli	r7,r7,31
    e82c:	12801026 	beq	r2,r10,e870 <__eqdf2+0x70>
    e830:	0281ffc4 	movi	r10,2047
    e834:	1a800a26 	beq	r3,r10,e860 <__eqdf2+0x60>
    e838:	10c00226 	beq	r2,r3,e844 <__eqdf2+0x44>
    e83c:	00800044 	movi	r2,1
    e840:	f800283a 	ret
    e844:	4a3ffd1e 	bne	r9,r8,e83c <__alt_data_end+0xff00e83c>
    e848:	21bffc1e 	bne	r4,r6,e83c <__alt_data_end+0xff00e83c>
    e84c:	29c00c26 	beq	r5,r7,e880 <__eqdf2+0x80>
    e850:	103ffa1e 	bne	r2,zero,e83c <__alt_data_end+0xff00e83c>
    e854:	2244b03a 	or	r2,r4,r9
    e858:	1004c03a 	cmpne	r2,r2,zero
    e85c:	f800283a 	ret
    e860:	3214b03a 	or	r10,r6,r8
    e864:	503ff426 	beq	r10,zero,e838 <__alt_data_end+0xff00e838>
    e868:	00800044 	movi	r2,1
    e86c:	f800283a 	ret
    e870:	2254b03a 	or	r10,r4,r9
    e874:	503fee26 	beq	r10,zero,e830 <__alt_data_end+0xff00e830>
    e878:	00800044 	movi	r2,1
    e87c:	f800283a 	ret
    e880:	0005883a 	mov	r2,zero
    e884:	f800283a 	ret

0000e888 <__gedf2>:
    e888:	2804d53a 	srli	r2,r5,20
    e88c:	3806d53a 	srli	r3,r7,20
    e890:	02000434 	movhi	r8,16
    e894:	423fffc4 	addi	r8,r8,-1
    e898:	1081ffcc 	andi	r2,r2,2047
    e89c:	0241ffc4 	movi	r9,2047
    e8a0:	2a14703a 	and	r10,r5,r8
    e8a4:	18c1ffcc 	andi	r3,r3,2047
    e8a8:	3a10703a 	and	r8,r7,r8
    e8ac:	280ad7fa 	srli	r5,r5,31
    e8b0:	380ed7fa 	srli	r7,r7,31
    e8b4:	12401d26 	beq	r2,r9,e92c <__gedf2+0xa4>
    e8b8:	0241ffc4 	movi	r9,2047
    e8bc:	1a401226 	beq	r3,r9,e908 <__gedf2+0x80>
    e8c0:	1000081e 	bne	r2,zero,e8e4 <__gedf2+0x5c>
    e8c4:	2296b03a 	or	r11,r4,r10
    e8c8:	5813003a 	cmpeq	r9,r11,zero
    e8cc:	1800091e 	bne	r3,zero,e8f4 <__gedf2+0x6c>
    e8d0:	3218b03a 	or	r12,r6,r8
    e8d4:	6000071e 	bne	r12,zero,e8f4 <__gedf2+0x6c>
    e8d8:	0005883a 	mov	r2,zero
    e8dc:	5800101e 	bne	r11,zero,e920 <__gedf2+0x98>
    e8e0:	f800283a 	ret
    e8e4:	18000c1e 	bne	r3,zero,e918 <__gedf2+0x90>
    e8e8:	3212b03a 	or	r9,r6,r8
    e8ec:	48000c26 	beq	r9,zero,e920 <__gedf2+0x98>
    e8f0:	0013883a 	mov	r9,zero
    e8f4:	39c03fcc 	andi	r7,r7,255
    e8f8:	48000826 	beq	r9,zero,e91c <__gedf2+0x94>
    e8fc:	38000926 	beq	r7,zero,e924 <__gedf2+0x9c>
    e900:	00800044 	movi	r2,1
    e904:	f800283a 	ret
    e908:	3212b03a 	or	r9,r6,r8
    e90c:	483fec26 	beq	r9,zero,e8c0 <__alt_data_end+0xff00e8c0>
    e910:	00bfff84 	movi	r2,-2
    e914:	f800283a 	ret
    e918:	39c03fcc 	andi	r7,r7,255
    e91c:	29c00626 	beq	r5,r7,e938 <__gedf2+0xb0>
    e920:	283ff726 	beq	r5,zero,e900 <__alt_data_end+0xff00e900>
    e924:	00bfffc4 	movi	r2,-1
    e928:	f800283a 	ret
    e92c:	2292b03a 	or	r9,r4,r10
    e930:	483fe126 	beq	r9,zero,e8b8 <__alt_data_end+0xff00e8b8>
    e934:	003ff606 	br	e910 <__alt_data_end+0xff00e910>
    e938:	18bff916 	blt	r3,r2,e920 <__alt_data_end+0xff00e920>
    e93c:	10c00316 	blt	r2,r3,e94c <__gedf2+0xc4>
    e940:	42bff736 	bltu	r8,r10,e920 <__alt_data_end+0xff00e920>
    e944:	52000326 	beq	r10,r8,e954 <__gedf2+0xcc>
    e948:	5200042e 	bgeu	r10,r8,e95c <__gedf2+0xd4>
    e94c:	283fec1e 	bne	r5,zero,e900 <__alt_data_end+0xff00e900>
    e950:	003ff406 	br	e924 <__alt_data_end+0xff00e924>
    e954:	313ff236 	bltu	r6,r4,e920 <__alt_data_end+0xff00e920>
    e958:	21bffc36 	bltu	r4,r6,e94c <__alt_data_end+0xff00e94c>
    e95c:	0005883a 	mov	r2,zero
    e960:	f800283a 	ret

0000e964 <__ledf2>:
    e964:	2804d53a 	srli	r2,r5,20
    e968:	3810d53a 	srli	r8,r7,20
    e96c:	00c00434 	movhi	r3,16
    e970:	18ffffc4 	addi	r3,r3,-1
    e974:	1081ffcc 	andi	r2,r2,2047
    e978:	0241ffc4 	movi	r9,2047
    e97c:	28d4703a 	and	r10,r5,r3
    e980:	4201ffcc 	andi	r8,r8,2047
    e984:	38c6703a 	and	r3,r7,r3
    e988:	280ad7fa 	srli	r5,r5,31
    e98c:	380ed7fa 	srli	r7,r7,31
    e990:	12401f26 	beq	r2,r9,ea10 <__ledf2+0xac>
    e994:	0241ffc4 	movi	r9,2047
    e998:	42401426 	beq	r8,r9,e9ec <__ledf2+0x88>
    e99c:	1000091e 	bne	r2,zero,e9c4 <__ledf2+0x60>
    e9a0:	2296b03a 	or	r11,r4,r10
    e9a4:	5813003a 	cmpeq	r9,r11,zero
    e9a8:	29403fcc 	andi	r5,r5,255
    e9ac:	40000a1e 	bne	r8,zero,e9d8 <__ledf2+0x74>
    e9b0:	30d8b03a 	or	r12,r6,r3
    e9b4:	6000081e 	bne	r12,zero,e9d8 <__ledf2+0x74>
    e9b8:	0005883a 	mov	r2,zero
    e9bc:	5800111e 	bne	r11,zero,ea04 <__ledf2+0xa0>
    e9c0:	f800283a 	ret
    e9c4:	29403fcc 	andi	r5,r5,255
    e9c8:	40000c1e 	bne	r8,zero,e9fc <__ledf2+0x98>
    e9cc:	30d2b03a 	or	r9,r6,r3
    e9d0:	48000c26 	beq	r9,zero,ea04 <__ledf2+0xa0>
    e9d4:	0013883a 	mov	r9,zero
    e9d8:	39c03fcc 	andi	r7,r7,255
    e9dc:	48000826 	beq	r9,zero,ea00 <__ledf2+0x9c>
    e9e0:	38001126 	beq	r7,zero,ea28 <__ledf2+0xc4>
    e9e4:	00800044 	movi	r2,1
    e9e8:	f800283a 	ret
    e9ec:	30d2b03a 	or	r9,r6,r3
    e9f0:	483fea26 	beq	r9,zero,e99c <__alt_data_end+0xff00e99c>
    e9f4:	00800084 	movi	r2,2
    e9f8:	f800283a 	ret
    e9fc:	39c03fcc 	andi	r7,r7,255
    ea00:	39400726 	beq	r7,r5,ea20 <__ledf2+0xbc>
    ea04:	2800081e 	bne	r5,zero,ea28 <__ledf2+0xc4>
    ea08:	00800044 	movi	r2,1
    ea0c:	f800283a 	ret
    ea10:	2292b03a 	or	r9,r4,r10
    ea14:	483fdf26 	beq	r9,zero,e994 <__alt_data_end+0xff00e994>
    ea18:	00800084 	movi	r2,2
    ea1c:	f800283a 	ret
    ea20:	4080030e 	bge	r8,r2,ea30 <__ledf2+0xcc>
    ea24:	383fef26 	beq	r7,zero,e9e4 <__alt_data_end+0xff00e9e4>
    ea28:	00bfffc4 	movi	r2,-1
    ea2c:	f800283a 	ret
    ea30:	123feb16 	blt	r2,r8,e9e0 <__alt_data_end+0xff00e9e0>
    ea34:	1abff336 	bltu	r3,r10,ea04 <__alt_data_end+0xff00ea04>
    ea38:	50c00326 	beq	r10,r3,ea48 <__ledf2+0xe4>
    ea3c:	50c0042e 	bgeu	r10,r3,ea50 <__ledf2+0xec>
    ea40:	283fe81e 	bne	r5,zero,e9e4 <__alt_data_end+0xff00e9e4>
    ea44:	003ff806 	br	ea28 <__alt_data_end+0xff00ea28>
    ea48:	313fee36 	bltu	r6,r4,ea04 <__alt_data_end+0xff00ea04>
    ea4c:	21bffc36 	bltu	r4,r6,ea40 <__alt_data_end+0xff00ea40>
    ea50:	0005883a 	mov	r2,zero
    ea54:	f800283a 	ret

0000ea58 <__subdf3>:
    ea58:	02000434 	movhi	r8,16
    ea5c:	423fffc4 	addi	r8,r8,-1
    ea60:	defffb04 	addi	sp,sp,-20
    ea64:	2a14703a 	and	r10,r5,r8
    ea68:	3812d53a 	srli	r9,r7,20
    ea6c:	3a10703a 	and	r8,r7,r8
    ea70:	2006d77a 	srli	r3,r4,29
    ea74:	3004d77a 	srli	r2,r6,29
    ea78:	dc000015 	stw	r16,0(sp)
    ea7c:	501490fa 	slli	r10,r10,3
    ea80:	2820d53a 	srli	r16,r5,20
    ea84:	401090fa 	slli	r8,r8,3
    ea88:	dc800215 	stw	r18,8(sp)
    ea8c:	dc400115 	stw	r17,4(sp)
    ea90:	dfc00415 	stw	ra,16(sp)
    ea94:	202290fa 	slli	r17,r4,3
    ea98:	dcc00315 	stw	r19,12(sp)
    ea9c:	4a41ffcc 	andi	r9,r9,2047
    eaa0:	0101ffc4 	movi	r4,2047
    eaa4:	2824d7fa 	srli	r18,r5,31
    eaa8:	8401ffcc 	andi	r16,r16,2047
    eaac:	50c6b03a 	or	r3,r10,r3
    eab0:	380ed7fa 	srli	r7,r7,31
    eab4:	408ab03a 	or	r5,r8,r2
    eab8:	300c90fa 	slli	r6,r6,3
    eabc:	49009626 	beq	r9,r4,ed18 <__subdf3+0x2c0>
    eac0:	39c0005c 	xori	r7,r7,1
    eac4:	8245c83a 	sub	r2,r16,r9
    eac8:	3c807426 	beq	r7,r18,ec9c <__subdf3+0x244>
    eacc:	0080af0e 	bge	zero,r2,ed8c <__subdf3+0x334>
    ead0:	48002a1e 	bne	r9,zero,eb7c <__subdf3+0x124>
    ead4:	2988b03a 	or	r4,r5,r6
    ead8:	20009a1e 	bne	r4,zero,ed44 <__subdf3+0x2ec>
    eadc:	888001cc 	andi	r2,r17,7
    eae0:	10000726 	beq	r2,zero,eb00 <__subdf3+0xa8>
    eae4:	888003cc 	andi	r2,r17,15
    eae8:	01000104 	movi	r4,4
    eaec:	11000426 	beq	r2,r4,eb00 <__subdf3+0xa8>
    eaf0:	890b883a 	add	r5,r17,r4
    eaf4:	2c63803a 	cmpltu	r17,r5,r17
    eaf8:	1c47883a 	add	r3,r3,r17
    eafc:	2823883a 	mov	r17,r5
    eb00:	1880202c 	andhi	r2,r3,128
    eb04:	10005926 	beq	r2,zero,ec6c <__subdf3+0x214>
    eb08:	84000044 	addi	r16,r16,1
    eb0c:	0081ffc4 	movi	r2,2047
    eb10:	8080be26 	beq	r16,r2,ee0c <__subdf3+0x3b4>
    eb14:	017fe034 	movhi	r5,65408
    eb18:	297fffc4 	addi	r5,r5,-1
    eb1c:	1946703a 	and	r3,r3,r5
    eb20:	1804977a 	slli	r2,r3,29
    eb24:	1806927a 	slli	r3,r3,9
    eb28:	8822d0fa 	srli	r17,r17,3
    eb2c:	8401ffcc 	andi	r16,r16,2047
    eb30:	180ad33a 	srli	r5,r3,12
    eb34:	9100004c 	andi	r4,r18,1
    eb38:	1444b03a 	or	r2,r2,r17
    eb3c:	80c1ffcc 	andi	r3,r16,2047
    eb40:	1820953a 	slli	r16,r3,20
    eb44:	20c03fcc 	andi	r3,r4,255
    eb48:	180897fa 	slli	r4,r3,31
    eb4c:	00c00434 	movhi	r3,16
    eb50:	18ffffc4 	addi	r3,r3,-1
    eb54:	28c6703a 	and	r3,r5,r3
    eb58:	1c06b03a 	or	r3,r3,r16
    eb5c:	1906b03a 	or	r3,r3,r4
    eb60:	dfc00417 	ldw	ra,16(sp)
    eb64:	dcc00317 	ldw	r19,12(sp)
    eb68:	dc800217 	ldw	r18,8(sp)
    eb6c:	dc400117 	ldw	r17,4(sp)
    eb70:	dc000017 	ldw	r16,0(sp)
    eb74:	dec00504 	addi	sp,sp,20
    eb78:	f800283a 	ret
    eb7c:	0101ffc4 	movi	r4,2047
    eb80:	813fd626 	beq	r16,r4,eadc <__alt_data_end+0xff00eadc>
    eb84:	29402034 	orhi	r5,r5,128
    eb88:	01000e04 	movi	r4,56
    eb8c:	2080a316 	blt	r4,r2,ee1c <__subdf3+0x3c4>
    eb90:	010007c4 	movi	r4,31
    eb94:	2080c616 	blt	r4,r2,eeb0 <__subdf3+0x458>
    eb98:	01000804 	movi	r4,32
    eb9c:	2089c83a 	sub	r4,r4,r2
    eba0:	2910983a 	sll	r8,r5,r4
    eba4:	308ed83a 	srl	r7,r6,r2
    eba8:	3108983a 	sll	r4,r6,r4
    ebac:	2884d83a 	srl	r2,r5,r2
    ebb0:	41ccb03a 	or	r6,r8,r7
    ebb4:	2008c03a 	cmpne	r4,r4,zero
    ebb8:	310cb03a 	or	r6,r6,r4
    ebbc:	898dc83a 	sub	r6,r17,r6
    ebc0:	89a3803a 	cmpltu	r17,r17,r6
    ebc4:	1887c83a 	sub	r3,r3,r2
    ebc8:	1c47c83a 	sub	r3,r3,r17
    ebcc:	3023883a 	mov	r17,r6
    ebd0:	1880202c 	andhi	r2,r3,128
    ebd4:	10002326 	beq	r2,zero,ec64 <__subdf3+0x20c>
    ebd8:	04c02034 	movhi	r19,128
    ebdc:	9cffffc4 	addi	r19,r19,-1
    ebe0:	1ce6703a 	and	r19,r3,r19
    ebe4:	98007a26 	beq	r19,zero,edd0 <__subdf3+0x378>
    ebe8:	9809883a 	mov	r4,r19
    ebec:	00033280 	call	3328 <__clzsi2>
    ebf0:	113ffe04 	addi	r4,r2,-8
    ebf4:	00c007c4 	movi	r3,31
    ebf8:	19007b16 	blt	r3,r4,ede8 <__subdf3+0x390>
    ebfc:	00800804 	movi	r2,32
    ec00:	1105c83a 	sub	r2,r2,r4
    ec04:	8884d83a 	srl	r2,r17,r2
    ec08:	9906983a 	sll	r3,r19,r4
    ec0c:	8922983a 	sll	r17,r17,r4
    ec10:	10c4b03a 	or	r2,r2,r3
    ec14:	24007816 	blt	r4,r16,edf8 <__subdf3+0x3a0>
    ec18:	2421c83a 	sub	r16,r4,r16
    ec1c:	80c00044 	addi	r3,r16,1
    ec20:	010007c4 	movi	r4,31
    ec24:	20c09516 	blt	r4,r3,ee7c <__subdf3+0x424>
    ec28:	01400804 	movi	r5,32
    ec2c:	28cbc83a 	sub	r5,r5,r3
    ec30:	88c8d83a 	srl	r4,r17,r3
    ec34:	8962983a 	sll	r17,r17,r5
    ec38:	114a983a 	sll	r5,r2,r5
    ec3c:	10c6d83a 	srl	r3,r2,r3
    ec40:	8804c03a 	cmpne	r2,r17,zero
    ec44:	290ab03a 	or	r5,r5,r4
    ec48:	28a2b03a 	or	r17,r5,r2
    ec4c:	0021883a 	mov	r16,zero
    ec50:	003fa206 	br	eadc <__alt_data_end+0xff00eadc>
    ec54:	2090b03a 	or	r8,r4,r2
    ec58:	40018e26 	beq	r8,zero,f294 <__subdf3+0x83c>
    ec5c:	1007883a 	mov	r3,r2
    ec60:	2023883a 	mov	r17,r4
    ec64:	888001cc 	andi	r2,r17,7
    ec68:	103f9e1e 	bne	r2,zero,eae4 <__alt_data_end+0xff00eae4>
    ec6c:	1804977a 	slli	r2,r3,29
    ec70:	8822d0fa 	srli	r17,r17,3
    ec74:	1810d0fa 	srli	r8,r3,3
    ec78:	9100004c 	andi	r4,r18,1
    ec7c:	1444b03a 	or	r2,r2,r17
    ec80:	00c1ffc4 	movi	r3,2047
    ec84:	80c02826 	beq	r16,r3,ed28 <__subdf3+0x2d0>
    ec88:	01400434 	movhi	r5,16
    ec8c:	297fffc4 	addi	r5,r5,-1
    ec90:	80e0703a 	and	r16,r16,r3
    ec94:	414a703a 	and	r5,r8,r5
    ec98:	003fa806 	br	eb3c <__alt_data_end+0xff00eb3c>
    ec9c:	0080630e 	bge	zero,r2,ee2c <__subdf3+0x3d4>
    eca0:	48003026 	beq	r9,zero,ed64 <__subdf3+0x30c>
    eca4:	0101ffc4 	movi	r4,2047
    eca8:	813f8c26 	beq	r16,r4,eadc <__alt_data_end+0xff00eadc>
    ecac:	29402034 	orhi	r5,r5,128
    ecb0:	01000e04 	movi	r4,56
    ecb4:	2080a90e 	bge	r4,r2,ef5c <__subdf3+0x504>
    ecb8:	298cb03a 	or	r6,r5,r6
    ecbc:	3012c03a 	cmpne	r9,r6,zero
    ecc0:	0005883a 	mov	r2,zero
    ecc4:	4c53883a 	add	r9,r9,r17
    ecc8:	4c63803a 	cmpltu	r17,r9,r17
    eccc:	10c7883a 	add	r3,r2,r3
    ecd0:	88c7883a 	add	r3,r17,r3
    ecd4:	4823883a 	mov	r17,r9
    ecd8:	1880202c 	andhi	r2,r3,128
    ecdc:	1000d026 	beq	r2,zero,f020 <__subdf3+0x5c8>
    ece0:	84000044 	addi	r16,r16,1
    ece4:	0081ffc4 	movi	r2,2047
    ece8:	8080fe26 	beq	r16,r2,f0e4 <__subdf3+0x68c>
    ecec:	00bfe034 	movhi	r2,65408
    ecf0:	10bfffc4 	addi	r2,r2,-1
    ecf4:	1886703a 	and	r3,r3,r2
    ecf8:	880ad07a 	srli	r5,r17,1
    ecfc:	180497fa 	slli	r2,r3,31
    ed00:	8900004c 	andi	r4,r17,1
    ed04:	2922b03a 	or	r17,r5,r4
    ed08:	1806d07a 	srli	r3,r3,1
    ed0c:	1462b03a 	or	r17,r2,r17
    ed10:	3825883a 	mov	r18,r7
    ed14:	003f7106 	br	eadc <__alt_data_end+0xff00eadc>
    ed18:	2984b03a 	or	r2,r5,r6
    ed1c:	103f6826 	beq	r2,zero,eac0 <__alt_data_end+0xff00eac0>
    ed20:	39c03fcc 	andi	r7,r7,255
    ed24:	003f6706 	br	eac4 <__alt_data_end+0xff00eac4>
    ed28:	4086b03a 	or	r3,r8,r2
    ed2c:	18015226 	beq	r3,zero,f278 <__subdf3+0x820>
    ed30:	00c00434 	movhi	r3,16
    ed34:	41400234 	orhi	r5,r8,8
    ed38:	18ffffc4 	addi	r3,r3,-1
    ed3c:	28ca703a 	and	r5,r5,r3
    ed40:	003f7e06 	br	eb3c <__alt_data_end+0xff00eb3c>
    ed44:	10bfffc4 	addi	r2,r2,-1
    ed48:	1000491e 	bne	r2,zero,ee70 <__subdf3+0x418>
    ed4c:	898fc83a 	sub	r7,r17,r6
    ed50:	89e3803a 	cmpltu	r17,r17,r7
    ed54:	1947c83a 	sub	r3,r3,r5
    ed58:	1c47c83a 	sub	r3,r3,r17
    ed5c:	3823883a 	mov	r17,r7
    ed60:	003f9b06 	br	ebd0 <__alt_data_end+0xff00ebd0>
    ed64:	2988b03a 	or	r4,r5,r6
    ed68:	203f5c26 	beq	r4,zero,eadc <__alt_data_end+0xff00eadc>
    ed6c:	10bfffc4 	addi	r2,r2,-1
    ed70:	1000931e 	bne	r2,zero,efc0 <__subdf3+0x568>
    ed74:	898d883a 	add	r6,r17,r6
    ed78:	3463803a 	cmpltu	r17,r6,r17
    ed7c:	1947883a 	add	r3,r3,r5
    ed80:	88c7883a 	add	r3,r17,r3
    ed84:	3023883a 	mov	r17,r6
    ed88:	003fd306 	br	ecd8 <__alt_data_end+0xff00ecd8>
    ed8c:	1000541e 	bne	r2,zero,eee0 <__subdf3+0x488>
    ed90:	80800044 	addi	r2,r16,1
    ed94:	1081ffcc 	andi	r2,r2,2047
    ed98:	01000044 	movi	r4,1
    ed9c:	2080a20e 	bge	r4,r2,f028 <__subdf3+0x5d0>
    eda0:	8989c83a 	sub	r4,r17,r6
    eda4:	8905803a 	cmpltu	r2,r17,r4
    eda8:	1967c83a 	sub	r19,r3,r5
    edac:	98a7c83a 	sub	r19,r19,r2
    edb0:	9880202c 	andhi	r2,r19,128
    edb4:	10006326 	beq	r2,zero,ef44 <__subdf3+0x4ec>
    edb8:	3463c83a 	sub	r17,r6,r17
    edbc:	28c7c83a 	sub	r3,r5,r3
    edc0:	344d803a 	cmpltu	r6,r6,r17
    edc4:	19a7c83a 	sub	r19,r3,r6
    edc8:	3825883a 	mov	r18,r7
    edcc:	983f861e 	bne	r19,zero,ebe8 <__alt_data_end+0xff00ebe8>
    edd0:	8809883a 	mov	r4,r17
    edd4:	00033280 	call	3328 <__clzsi2>
    edd8:	10800804 	addi	r2,r2,32
    eddc:	113ffe04 	addi	r4,r2,-8
    ede0:	00c007c4 	movi	r3,31
    ede4:	193f850e 	bge	r3,r4,ebfc <__alt_data_end+0xff00ebfc>
    ede8:	10bff604 	addi	r2,r2,-40
    edec:	8884983a 	sll	r2,r17,r2
    edf0:	0023883a 	mov	r17,zero
    edf4:	243f880e 	bge	r4,r16,ec18 <__alt_data_end+0xff00ec18>
    edf8:	00ffe034 	movhi	r3,65408
    edfc:	18ffffc4 	addi	r3,r3,-1
    ee00:	8121c83a 	sub	r16,r16,r4
    ee04:	10c6703a 	and	r3,r2,r3
    ee08:	003f3406 	br	eadc <__alt_data_end+0xff00eadc>
    ee0c:	9100004c 	andi	r4,r18,1
    ee10:	000b883a 	mov	r5,zero
    ee14:	0005883a 	mov	r2,zero
    ee18:	003f4806 	br	eb3c <__alt_data_end+0xff00eb3c>
    ee1c:	298cb03a 	or	r6,r5,r6
    ee20:	300cc03a 	cmpne	r6,r6,zero
    ee24:	0005883a 	mov	r2,zero
    ee28:	003f6406 	br	ebbc <__alt_data_end+0xff00ebbc>
    ee2c:	10009a1e 	bne	r2,zero,f098 <__subdf3+0x640>
    ee30:	82400044 	addi	r9,r16,1
    ee34:	4881ffcc 	andi	r2,r9,2047
    ee38:	02800044 	movi	r10,1
    ee3c:	5080670e 	bge	r10,r2,efdc <__subdf3+0x584>
    ee40:	0081ffc4 	movi	r2,2047
    ee44:	4880af26 	beq	r9,r2,f104 <__subdf3+0x6ac>
    ee48:	898d883a 	add	r6,r17,r6
    ee4c:	1945883a 	add	r2,r3,r5
    ee50:	3447803a 	cmpltu	r3,r6,r17
    ee54:	1887883a 	add	r3,r3,r2
    ee58:	182297fa 	slli	r17,r3,31
    ee5c:	300cd07a 	srli	r6,r6,1
    ee60:	1806d07a 	srli	r3,r3,1
    ee64:	4821883a 	mov	r16,r9
    ee68:	89a2b03a 	or	r17,r17,r6
    ee6c:	003f1b06 	br	eadc <__alt_data_end+0xff00eadc>
    ee70:	0101ffc4 	movi	r4,2047
    ee74:	813f441e 	bne	r16,r4,eb88 <__alt_data_end+0xff00eb88>
    ee78:	003f1806 	br	eadc <__alt_data_end+0xff00eadc>
    ee7c:	843ff844 	addi	r16,r16,-31
    ee80:	01400804 	movi	r5,32
    ee84:	1408d83a 	srl	r4,r2,r16
    ee88:	19405026 	beq	r3,r5,efcc <__subdf3+0x574>
    ee8c:	01401004 	movi	r5,64
    ee90:	28c7c83a 	sub	r3,r5,r3
    ee94:	10c4983a 	sll	r2,r2,r3
    ee98:	88a2b03a 	or	r17,r17,r2
    ee9c:	8822c03a 	cmpne	r17,r17,zero
    eea0:	2462b03a 	or	r17,r4,r17
    eea4:	0007883a 	mov	r3,zero
    eea8:	0021883a 	mov	r16,zero
    eeac:	003f6d06 	br	ec64 <__alt_data_end+0xff00ec64>
    eeb0:	11fff804 	addi	r7,r2,-32
    eeb4:	01000804 	movi	r4,32
    eeb8:	29ced83a 	srl	r7,r5,r7
    eebc:	11004526 	beq	r2,r4,efd4 <__subdf3+0x57c>
    eec0:	01001004 	movi	r4,64
    eec4:	2089c83a 	sub	r4,r4,r2
    eec8:	2904983a 	sll	r2,r5,r4
    eecc:	118cb03a 	or	r6,r2,r6
    eed0:	300cc03a 	cmpne	r6,r6,zero
    eed4:	398cb03a 	or	r6,r7,r6
    eed8:	0005883a 	mov	r2,zero
    eedc:	003f3706 	br	ebbc <__alt_data_end+0xff00ebbc>
    eee0:	80002a26 	beq	r16,zero,ef8c <__subdf3+0x534>
    eee4:	0101ffc4 	movi	r4,2047
    eee8:	49006626 	beq	r9,r4,f084 <__subdf3+0x62c>
    eeec:	0085c83a 	sub	r2,zero,r2
    eef0:	18c02034 	orhi	r3,r3,128
    eef4:	01000e04 	movi	r4,56
    eef8:	20807e16 	blt	r4,r2,f0f4 <__subdf3+0x69c>
    eefc:	010007c4 	movi	r4,31
    ef00:	2080e716 	blt	r4,r2,f2a0 <__subdf3+0x848>
    ef04:	01000804 	movi	r4,32
    ef08:	2089c83a 	sub	r4,r4,r2
    ef0c:	1914983a 	sll	r10,r3,r4
    ef10:	8890d83a 	srl	r8,r17,r2
    ef14:	8908983a 	sll	r4,r17,r4
    ef18:	1884d83a 	srl	r2,r3,r2
    ef1c:	5222b03a 	or	r17,r10,r8
    ef20:	2006c03a 	cmpne	r3,r4,zero
    ef24:	88e2b03a 	or	r17,r17,r3
    ef28:	3463c83a 	sub	r17,r6,r17
    ef2c:	2885c83a 	sub	r2,r5,r2
    ef30:	344d803a 	cmpltu	r6,r6,r17
    ef34:	1187c83a 	sub	r3,r2,r6
    ef38:	4821883a 	mov	r16,r9
    ef3c:	3825883a 	mov	r18,r7
    ef40:	003f2306 	br	ebd0 <__alt_data_end+0xff00ebd0>
    ef44:	24d0b03a 	or	r8,r4,r19
    ef48:	40001b1e 	bne	r8,zero,efb8 <__subdf3+0x560>
    ef4c:	0005883a 	mov	r2,zero
    ef50:	0009883a 	mov	r4,zero
    ef54:	0021883a 	mov	r16,zero
    ef58:	003f4906 	br	ec80 <__alt_data_end+0xff00ec80>
    ef5c:	010007c4 	movi	r4,31
    ef60:	20803a16 	blt	r4,r2,f04c <__subdf3+0x5f4>
    ef64:	01000804 	movi	r4,32
    ef68:	2089c83a 	sub	r4,r4,r2
    ef6c:	2912983a 	sll	r9,r5,r4
    ef70:	3090d83a 	srl	r8,r6,r2
    ef74:	3108983a 	sll	r4,r6,r4
    ef78:	2884d83a 	srl	r2,r5,r2
    ef7c:	4a12b03a 	or	r9,r9,r8
    ef80:	2008c03a 	cmpne	r4,r4,zero
    ef84:	4912b03a 	or	r9,r9,r4
    ef88:	003f4e06 	br	ecc4 <__alt_data_end+0xff00ecc4>
    ef8c:	1c48b03a 	or	r4,r3,r17
    ef90:	20003c26 	beq	r4,zero,f084 <__subdf3+0x62c>
    ef94:	0084303a 	nor	r2,zero,r2
    ef98:	1000381e 	bne	r2,zero,f07c <__subdf3+0x624>
    ef9c:	3463c83a 	sub	r17,r6,r17
    efa0:	28c5c83a 	sub	r2,r5,r3
    efa4:	344d803a 	cmpltu	r6,r6,r17
    efa8:	1187c83a 	sub	r3,r2,r6
    efac:	4821883a 	mov	r16,r9
    efb0:	3825883a 	mov	r18,r7
    efb4:	003f0606 	br	ebd0 <__alt_data_end+0xff00ebd0>
    efb8:	2023883a 	mov	r17,r4
    efbc:	003f0906 	br	ebe4 <__alt_data_end+0xff00ebe4>
    efc0:	0101ffc4 	movi	r4,2047
    efc4:	813f3a1e 	bne	r16,r4,ecb0 <__alt_data_end+0xff00ecb0>
    efc8:	003ec406 	br	eadc <__alt_data_end+0xff00eadc>
    efcc:	0005883a 	mov	r2,zero
    efd0:	003fb106 	br	ee98 <__alt_data_end+0xff00ee98>
    efd4:	0005883a 	mov	r2,zero
    efd8:	003fbc06 	br	eecc <__alt_data_end+0xff00eecc>
    efdc:	1c44b03a 	or	r2,r3,r17
    efe0:	80008e1e 	bne	r16,zero,f21c <__subdf3+0x7c4>
    efe4:	1000c826 	beq	r2,zero,f308 <__subdf3+0x8b0>
    efe8:	2984b03a 	or	r2,r5,r6
    efec:	103ebb26 	beq	r2,zero,eadc <__alt_data_end+0xff00eadc>
    eff0:	8989883a 	add	r4,r17,r6
    eff4:	1945883a 	add	r2,r3,r5
    eff8:	2447803a 	cmpltu	r3,r4,r17
    effc:	1887883a 	add	r3,r3,r2
    f000:	1880202c 	andhi	r2,r3,128
    f004:	2023883a 	mov	r17,r4
    f008:	103f1626 	beq	r2,zero,ec64 <__alt_data_end+0xff00ec64>
    f00c:	00bfe034 	movhi	r2,65408
    f010:	10bfffc4 	addi	r2,r2,-1
    f014:	5021883a 	mov	r16,r10
    f018:	1886703a 	and	r3,r3,r2
    f01c:	003eaf06 	br	eadc <__alt_data_end+0xff00eadc>
    f020:	3825883a 	mov	r18,r7
    f024:	003f0f06 	br	ec64 <__alt_data_end+0xff00ec64>
    f028:	1c44b03a 	or	r2,r3,r17
    f02c:	8000251e 	bne	r16,zero,f0c4 <__subdf3+0x66c>
    f030:	1000661e 	bne	r2,zero,f1cc <__subdf3+0x774>
    f034:	2990b03a 	or	r8,r5,r6
    f038:	40009626 	beq	r8,zero,f294 <__subdf3+0x83c>
    f03c:	2807883a 	mov	r3,r5
    f040:	3023883a 	mov	r17,r6
    f044:	3825883a 	mov	r18,r7
    f048:	003ea406 	br	eadc <__alt_data_end+0xff00eadc>
    f04c:	127ff804 	addi	r9,r2,-32
    f050:	01000804 	movi	r4,32
    f054:	2a52d83a 	srl	r9,r5,r9
    f058:	11008c26 	beq	r2,r4,f28c <__subdf3+0x834>
    f05c:	01001004 	movi	r4,64
    f060:	2085c83a 	sub	r2,r4,r2
    f064:	2884983a 	sll	r2,r5,r2
    f068:	118cb03a 	or	r6,r2,r6
    f06c:	300cc03a 	cmpne	r6,r6,zero
    f070:	4992b03a 	or	r9,r9,r6
    f074:	0005883a 	mov	r2,zero
    f078:	003f1206 	br	ecc4 <__alt_data_end+0xff00ecc4>
    f07c:	0101ffc4 	movi	r4,2047
    f080:	493f9c1e 	bne	r9,r4,eef4 <__alt_data_end+0xff00eef4>
    f084:	2807883a 	mov	r3,r5
    f088:	3023883a 	mov	r17,r6
    f08c:	4821883a 	mov	r16,r9
    f090:	3825883a 	mov	r18,r7
    f094:	003e9106 	br	eadc <__alt_data_end+0xff00eadc>
    f098:	80001f1e 	bne	r16,zero,f118 <__subdf3+0x6c0>
    f09c:	1c48b03a 	or	r4,r3,r17
    f0a0:	20005a26 	beq	r4,zero,f20c <__subdf3+0x7b4>
    f0a4:	0084303a 	nor	r2,zero,r2
    f0a8:	1000561e 	bne	r2,zero,f204 <__subdf3+0x7ac>
    f0ac:	89a3883a 	add	r17,r17,r6
    f0b0:	1945883a 	add	r2,r3,r5
    f0b4:	898d803a 	cmpltu	r6,r17,r6
    f0b8:	3087883a 	add	r3,r6,r2
    f0bc:	4821883a 	mov	r16,r9
    f0c0:	003f0506 	br	ecd8 <__alt_data_end+0xff00ecd8>
    f0c4:	10002b1e 	bne	r2,zero,f174 <__subdf3+0x71c>
    f0c8:	2984b03a 	or	r2,r5,r6
    f0cc:	10008026 	beq	r2,zero,f2d0 <__subdf3+0x878>
    f0d0:	2807883a 	mov	r3,r5
    f0d4:	3023883a 	mov	r17,r6
    f0d8:	3825883a 	mov	r18,r7
    f0dc:	0401ffc4 	movi	r16,2047
    f0e0:	003e7e06 	br	eadc <__alt_data_end+0xff00eadc>
    f0e4:	3809883a 	mov	r4,r7
    f0e8:	0011883a 	mov	r8,zero
    f0ec:	0005883a 	mov	r2,zero
    f0f0:	003ee306 	br	ec80 <__alt_data_end+0xff00ec80>
    f0f4:	1c62b03a 	or	r17,r3,r17
    f0f8:	8822c03a 	cmpne	r17,r17,zero
    f0fc:	0005883a 	mov	r2,zero
    f100:	003f8906 	br	ef28 <__alt_data_end+0xff00ef28>
    f104:	3809883a 	mov	r4,r7
    f108:	4821883a 	mov	r16,r9
    f10c:	0011883a 	mov	r8,zero
    f110:	0005883a 	mov	r2,zero
    f114:	003eda06 	br	ec80 <__alt_data_end+0xff00ec80>
    f118:	0101ffc4 	movi	r4,2047
    f11c:	49003b26 	beq	r9,r4,f20c <__subdf3+0x7b4>
    f120:	0085c83a 	sub	r2,zero,r2
    f124:	18c02034 	orhi	r3,r3,128
    f128:	01000e04 	movi	r4,56
    f12c:	20806e16 	blt	r4,r2,f2e8 <__subdf3+0x890>
    f130:	010007c4 	movi	r4,31
    f134:	20807716 	blt	r4,r2,f314 <__subdf3+0x8bc>
    f138:	01000804 	movi	r4,32
    f13c:	2089c83a 	sub	r4,r4,r2
    f140:	1914983a 	sll	r10,r3,r4
    f144:	8890d83a 	srl	r8,r17,r2
    f148:	8908983a 	sll	r4,r17,r4
    f14c:	1884d83a 	srl	r2,r3,r2
    f150:	5222b03a 	or	r17,r10,r8
    f154:	2006c03a 	cmpne	r3,r4,zero
    f158:	88e2b03a 	or	r17,r17,r3
    f15c:	89a3883a 	add	r17,r17,r6
    f160:	1145883a 	add	r2,r2,r5
    f164:	898d803a 	cmpltu	r6,r17,r6
    f168:	3087883a 	add	r3,r6,r2
    f16c:	4821883a 	mov	r16,r9
    f170:	003ed906 	br	ecd8 <__alt_data_end+0xff00ecd8>
    f174:	2984b03a 	or	r2,r5,r6
    f178:	10004226 	beq	r2,zero,f284 <__subdf3+0x82c>
    f17c:	1808d0fa 	srli	r4,r3,3
    f180:	8822d0fa 	srli	r17,r17,3
    f184:	1806977a 	slli	r3,r3,29
    f188:	2080022c 	andhi	r2,r4,8
    f18c:	1c62b03a 	or	r17,r3,r17
    f190:	10000826 	beq	r2,zero,f1b4 <__subdf3+0x75c>
    f194:	2812d0fa 	srli	r9,r5,3
    f198:	4880022c 	andhi	r2,r9,8
    f19c:	1000051e 	bne	r2,zero,f1b4 <__subdf3+0x75c>
    f1a0:	300cd0fa 	srli	r6,r6,3
    f1a4:	2804977a 	slli	r2,r5,29
    f1a8:	4809883a 	mov	r4,r9
    f1ac:	3825883a 	mov	r18,r7
    f1b0:	11a2b03a 	or	r17,r2,r6
    f1b4:	8806d77a 	srli	r3,r17,29
    f1b8:	200890fa 	slli	r4,r4,3
    f1bc:	882290fa 	slli	r17,r17,3
    f1c0:	0401ffc4 	movi	r16,2047
    f1c4:	1906b03a 	or	r3,r3,r4
    f1c8:	003e4406 	br	eadc <__alt_data_end+0xff00eadc>
    f1cc:	2984b03a 	or	r2,r5,r6
    f1d0:	103e4226 	beq	r2,zero,eadc <__alt_data_end+0xff00eadc>
    f1d4:	8989c83a 	sub	r4,r17,r6
    f1d8:	8911803a 	cmpltu	r8,r17,r4
    f1dc:	1945c83a 	sub	r2,r3,r5
    f1e0:	1205c83a 	sub	r2,r2,r8
    f1e4:	1200202c 	andhi	r8,r2,128
    f1e8:	403e9a26 	beq	r8,zero,ec54 <__alt_data_end+0xff00ec54>
    f1ec:	3463c83a 	sub	r17,r6,r17
    f1f0:	28c5c83a 	sub	r2,r5,r3
    f1f4:	344d803a 	cmpltu	r6,r6,r17
    f1f8:	1187c83a 	sub	r3,r2,r6
    f1fc:	3825883a 	mov	r18,r7
    f200:	003e3606 	br	eadc <__alt_data_end+0xff00eadc>
    f204:	0101ffc4 	movi	r4,2047
    f208:	493fc71e 	bne	r9,r4,f128 <__alt_data_end+0xff00f128>
    f20c:	2807883a 	mov	r3,r5
    f210:	3023883a 	mov	r17,r6
    f214:	4821883a 	mov	r16,r9
    f218:	003e3006 	br	eadc <__alt_data_end+0xff00eadc>
    f21c:	10003626 	beq	r2,zero,f2f8 <__subdf3+0x8a0>
    f220:	2984b03a 	or	r2,r5,r6
    f224:	10001726 	beq	r2,zero,f284 <__subdf3+0x82c>
    f228:	1808d0fa 	srli	r4,r3,3
    f22c:	8822d0fa 	srli	r17,r17,3
    f230:	1806977a 	slli	r3,r3,29
    f234:	2080022c 	andhi	r2,r4,8
    f238:	1c62b03a 	or	r17,r3,r17
    f23c:	10000726 	beq	r2,zero,f25c <__subdf3+0x804>
    f240:	2812d0fa 	srli	r9,r5,3
    f244:	4880022c 	andhi	r2,r9,8
    f248:	1000041e 	bne	r2,zero,f25c <__subdf3+0x804>
    f24c:	300cd0fa 	srli	r6,r6,3
    f250:	2804977a 	slli	r2,r5,29
    f254:	4809883a 	mov	r4,r9
    f258:	11a2b03a 	or	r17,r2,r6
    f25c:	8806d77a 	srli	r3,r17,29
    f260:	200890fa 	slli	r4,r4,3
    f264:	882290fa 	slli	r17,r17,3
    f268:	3825883a 	mov	r18,r7
    f26c:	1906b03a 	or	r3,r3,r4
    f270:	0401ffc4 	movi	r16,2047
    f274:	003e1906 	br	eadc <__alt_data_end+0xff00eadc>
    f278:	000b883a 	mov	r5,zero
    f27c:	0005883a 	mov	r2,zero
    f280:	003e2e06 	br	eb3c <__alt_data_end+0xff00eb3c>
    f284:	0401ffc4 	movi	r16,2047
    f288:	003e1406 	br	eadc <__alt_data_end+0xff00eadc>
    f28c:	0005883a 	mov	r2,zero
    f290:	003f7506 	br	f068 <__alt_data_end+0xff00f068>
    f294:	0005883a 	mov	r2,zero
    f298:	0009883a 	mov	r4,zero
    f29c:	003e7806 	br	ec80 <__alt_data_end+0xff00ec80>
    f2a0:	123ff804 	addi	r8,r2,-32
    f2a4:	01000804 	movi	r4,32
    f2a8:	1a10d83a 	srl	r8,r3,r8
    f2ac:	11002526 	beq	r2,r4,f344 <__subdf3+0x8ec>
    f2b0:	01001004 	movi	r4,64
    f2b4:	2085c83a 	sub	r2,r4,r2
    f2b8:	1884983a 	sll	r2,r3,r2
    f2bc:	1444b03a 	or	r2,r2,r17
    f2c0:	1004c03a 	cmpne	r2,r2,zero
    f2c4:	40a2b03a 	or	r17,r8,r2
    f2c8:	0005883a 	mov	r2,zero
    f2cc:	003f1606 	br	ef28 <__alt_data_end+0xff00ef28>
    f2d0:	02000434 	movhi	r8,16
    f2d4:	0009883a 	mov	r4,zero
    f2d8:	423fffc4 	addi	r8,r8,-1
    f2dc:	00bfffc4 	movi	r2,-1
    f2e0:	0401ffc4 	movi	r16,2047
    f2e4:	003e6606 	br	ec80 <__alt_data_end+0xff00ec80>
    f2e8:	1c62b03a 	or	r17,r3,r17
    f2ec:	8822c03a 	cmpne	r17,r17,zero
    f2f0:	0005883a 	mov	r2,zero
    f2f4:	003f9906 	br	f15c <__alt_data_end+0xff00f15c>
    f2f8:	2807883a 	mov	r3,r5
    f2fc:	3023883a 	mov	r17,r6
    f300:	0401ffc4 	movi	r16,2047
    f304:	003df506 	br	eadc <__alt_data_end+0xff00eadc>
    f308:	2807883a 	mov	r3,r5
    f30c:	3023883a 	mov	r17,r6
    f310:	003df206 	br	eadc <__alt_data_end+0xff00eadc>
    f314:	123ff804 	addi	r8,r2,-32
    f318:	01000804 	movi	r4,32
    f31c:	1a10d83a 	srl	r8,r3,r8
    f320:	11000a26 	beq	r2,r4,f34c <__subdf3+0x8f4>
    f324:	01001004 	movi	r4,64
    f328:	2085c83a 	sub	r2,r4,r2
    f32c:	1884983a 	sll	r2,r3,r2
    f330:	1444b03a 	or	r2,r2,r17
    f334:	1004c03a 	cmpne	r2,r2,zero
    f338:	40a2b03a 	or	r17,r8,r2
    f33c:	0005883a 	mov	r2,zero
    f340:	003f8606 	br	f15c <__alt_data_end+0xff00f15c>
    f344:	0005883a 	mov	r2,zero
    f348:	003fdc06 	br	f2bc <__alt_data_end+0xff00f2bc>
    f34c:	0005883a 	mov	r2,zero
    f350:	003ff706 	br	f330 <__alt_data_end+0xff00f330>

0000f354 <__floatunsidf>:
    f354:	defffe04 	addi	sp,sp,-8
    f358:	dc000015 	stw	r16,0(sp)
    f35c:	dfc00115 	stw	ra,4(sp)
    f360:	2021883a 	mov	r16,r4
    f364:	20002226 	beq	r4,zero,f3f0 <__floatunsidf+0x9c>
    f368:	00033280 	call	3328 <__clzsi2>
    f36c:	01010784 	movi	r4,1054
    f370:	2089c83a 	sub	r4,r4,r2
    f374:	01810cc4 	movi	r6,1075
    f378:	310dc83a 	sub	r6,r6,r4
    f37c:	00c007c4 	movi	r3,31
    f380:	1980120e 	bge	r3,r6,f3cc <__floatunsidf+0x78>
    f384:	00c104c4 	movi	r3,1043
    f388:	1907c83a 	sub	r3,r3,r4
    f38c:	80ca983a 	sll	r5,r16,r3
    f390:	00800434 	movhi	r2,16
    f394:	10bfffc4 	addi	r2,r2,-1
    f398:	2101ffcc 	andi	r4,r4,2047
    f39c:	0021883a 	mov	r16,zero
    f3a0:	288a703a 	and	r5,r5,r2
    f3a4:	2008953a 	slli	r4,r4,20
    f3a8:	00c00434 	movhi	r3,16
    f3ac:	18ffffc4 	addi	r3,r3,-1
    f3b0:	28c6703a 	and	r3,r5,r3
    f3b4:	8005883a 	mov	r2,r16
    f3b8:	1906b03a 	or	r3,r3,r4
    f3bc:	dfc00117 	ldw	ra,4(sp)
    f3c0:	dc000017 	ldw	r16,0(sp)
    f3c4:	dec00204 	addi	sp,sp,8
    f3c8:	f800283a 	ret
    f3cc:	00c002c4 	movi	r3,11
    f3d0:	188bc83a 	sub	r5,r3,r2
    f3d4:	814ad83a 	srl	r5,r16,r5
    f3d8:	00c00434 	movhi	r3,16
    f3dc:	18ffffc4 	addi	r3,r3,-1
    f3e0:	81a0983a 	sll	r16,r16,r6
    f3e4:	2101ffcc 	andi	r4,r4,2047
    f3e8:	28ca703a 	and	r5,r5,r3
    f3ec:	003fed06 	br	f3a4 <__alt_data_end+0xff00f3a4>
    f3f0:	0009883a 	mov	r4,zero
    f3f4:	000b883a 	mov	r5,zero
    f3f8:	003fea06 	br	f3a4 <__alt_data_end+0xff00f3a4>

0000f3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3fc:	defffe04 	addi	sp,sp,-8
    f400:	dfc00115 	stw	ra,4(sp)
    f404:	df000015 	stw	fp,0(sp)
    f408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f40c:	d0a00d17 	ldw	r2,-32716(gp)
    f410:	10000326 	beq	r2,zero,f420 <alt_get_errno+0x24>
    f414:	d0a00d17 	ldw	r2,-32716(gp)
    f418:	103ee83a 	callr	r2
    f41c:	00000106 	br	f424 <alt_get_errno+0x28>
    f420:	d0a6dc04 	addi	r2,gp,-25744
}
    f424:	e037883a 	mov	sp,fp
    f428:	dfc00117 	ldw	ra,4(sp)
    f42c:	df000017 	ldw	fp,0(sp)
    f430:	dec00204 	addi	sp,sp,8
    f434:	f800283a 	ret

0000f438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f438:	defffb04 	addi	sp,sp,-20
    f43c:	dfc00415 	stw	ra,16(sp)
    f440:	df000315 	stw	fp,12(sp)
    f444:	df000304 	addi	fp,sp,12
    f448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f44c:	e0bfff17 	ldw	r2,-4(fp)
    f450:	10000616 	blt	r2,zero,f46c <close+0x34>
    f454:	e0bfff17 	ldw	r2,-4(fp)
    f458:	10c00324 	muli	r3,r2,12
    f45c:	00800074 	movhi	r2,1
    f460:	108ba804 	addi	r2,r2,11936
    f464:	1885883a 	add	r2,r3,r2
    f468:	00000106 	br	f470 <close+0x38>
    f46c:	0005883a 	mov	r2,zero
    f470:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f474:	e0bffd17 	ldw	r2,-12(fp)
    f478:	10001926 	beq	r2,zero,f4e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f47c:	e0bffd17 	ldw	r2,-12(fp)
    f480:	10800017 	ldw	r2,0(r2)
    f484:	10800417 	ldw	r2,16(r2)
    f488:	10000626 	beq	r2,zero,f4a4 <close+0x6c>
    f48c:	e0bffd17 	ldw	r2,-12(fp)
    f490:	10800017 	ldw	r2,0(r2)
    f494:	10800417 	ldw	r2,16(r2)
    f498:	e13ffd17 	ldw	r4,-12(fp)
    f49c:	103ee83a 	callr	r2
    f4a0:	00000106 	br	f4a8 <close+0x70>
    f4a4:	0005883a 	mov	r2,zero
    f4a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f4ac:	e13fff17 	ldw	r4,-4(fp)
    f4b0:	000faf80 	call	faf8 <alt_release_fd>
    if (rval < 0)
    f4b4:	e0bffe17 	ldw	r2,-8(fp)
    f4b8:	1000070e 	bge	r2,zero,f4d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f4bc:	000f3fc0 	call	f3fc <alt_get_errno>
    f4c0:	1007883a 	mov	r3,r2
    f4c4:	e0bffe17 	ldw	r2,-8(fp)
    f4c8:	0085c83a 	sub	r2,zero,r2
    f4cc:	18800015 	stw	r2,0(r3)
      return -1;
    f4d0:	00bfffc4 	movi	r2,-1
    f4d4:	00000706 	br	f4f4 <close+0xbc>
    }
    return 0;
    f4d8:	0005883a 	mov	r2,zero
    f4dc:	00000506 	br	f4f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4e0:	000f3fc0 	call	f3fc <alt_get_errno>
    f4e4:	1007883a 	mov	r3,r2
    f4e8:	00801444 	movi	r2,81
    f4ec:	18800015 	stw	r2,0(r3)
    return -1;
    f4f0:	00bfffc4 	movi	r2,-1
  }
}
    f4f4:	e037883a 	mov	sp,fp
    f4f8:	dfc00117 	ldw	ra,4(sp)
    f4fc:	df000017 	ldw	fp,0(sp)
    f500:	dec00204 	addi	sp,sp,8
    f504:	f800283a 	ret

0000f508 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f508:	defffc04 	addi	sp,sp,-16
    f50c:	df000315 	stw	fp,12(sp)
    f510:	df000304 	addi	fp,sp,12
    f514:	e13ffd15 	stw	r4,-12(fp)
    f518:	e17ffe15 	stw	r5,-8(fp)
    f51c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f520:	e0bfff17 	ldw	r2,-4(fp)
}
    f524:	e037883a 	mov	sp,fp
    f528:	df000017 	ldw	fp,0(sp)
    f52c:	dec00104 	addi	sp,sp,4
    f530:	f800283a 	ret

0000f534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f534:	defffe04 	addi	sp,sp,-8
    f538:	dfc00115 	stw	ra,4(sp)
    f53c:	df000015 	stw	fp,0(sp)
    f540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f544:	d0a00d17 	ldw	r2,-32716(gp)
    f548:	10000326 	beq	r2,zero,f558 <alt_get_errno+0x24>
    f54c:	d0a00d17 	ldw	r2,-32716(gp)
    f550:	103ee83a 	callr	r2
    f554:	00000106 	br	f55c <alt_get_errno+0x28>
    f558:	d0a6dc04 	addi	r2,gp,-25744
}
    f55c:	e037883a 	mov	sp,fp
    f560:	dfc00117 	ldw	ra,4(sp)
    f564:	df000017 	ldw	fp,0(sp)
    f568:	dec00204 	addi	sp,sp,8
    f56c:	f800283a 	ret

0000f570 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f570:	defffb04 	addi	sp,sp,-20
    f574:	dfc00415 	stw	ra,16(sp)
    f578:	df000315 	stw	fp,12(sp)
    f57c:	df000304 	addi	fp,sp,12
    f580:	e13ffe15 	stw	r4,-8(fp)
    f584:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f588:	e0bffe17 	ldw	r2,-8(fp)
    f58c:	10000616 	blt	r2,zero,f5a8 <fstat+0x38>
    f590:	e0bffe17 	ldw	r2,-8(fp)
    f594:	10c00324 	muli	r3,r2,12
    f598:	00800074 	movhi	r2,1
    f59c:	108ba804 	addi	r2,r2,11936
    f5a0:	1885883a 	add	r2,r3,r2
    f5a4:	00000106 	br	f5ac <fstat+0x3c>
    f5a8:	0005883a 	mov	r2,zero
    f5ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f5b0:	e0bffd17 	ldw	r2,-12(fp)
    f5b4:	10001026 	beq	r2,zero,f5f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f5b8:	e0bffd17 	ldw	r2,-12(fp)
    f5bc:	10800017 	ldw	r2,0(r2)
    f5c0:	10800817 	ldw	r2,32(r2)
    f5c4:	10000726 	beq	r2,zero,f5e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	10800017 	ldw	r2,0(r2)
    f5d0:	10800817 	ldw	r2,32(r2)
    f5d4:	e17fff17 	ldw	r5,-4(fp)
    f5d8:	e13ffd17 	ldw	r4,-12(fp)
    f5dc:	103ee83a 	callr	r2
    f5e0:	00000a06 	br	f60c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f5e4:	e0bfff17 	ldw	r2,-4(fp)
    f5e8:	00c80004 	movi	r3,8192
    f5ec:	10c00115 	stw	r3,4(r2)
      return 0;
    f5f0:	0005883a 	mov	r2,zero
    f5f4:	00000506 	br	f60c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5f8:	000f5340 	call	f534 <alt_get_errno>
    f5fc:	1007883a 	mov	r3,r2
    f600:	00801444 	movi	r2,81
    f604:	18800015 	stw	r2,0(r3)
    return -1;
    f608:	00bfffc4 	movi	r2,-1
  }
}
    f60c:	e037883a 	mov	sp,fp
    f610:	dfc00117 	ldw	ra,4(sp)
    f614:	df000017 	ldw	fp,0(sp)
    f618:	dec00204 	addi	sp,sp,8
    f61c:	f800283a 	ret

0000f620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f620:	defffe04 	addi	sp,sp,-8
    f624:	dfc00115 	stw	ra,4(sp)
    f628:	df000015 	stw	fp,0(sp)
    f62c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f630:	d0a00d17 	ldw	r2,-32716(gp)
    f634:	10000326 	beq	r2,zero,f644 <alt_get_errno+0x24>
    f638:	d0a00d17 	ldw	r2,-32716(gp)
    f63c:	103ee83a 	callr	r2
    f640:	00000106 	br	f648 <alt_get_errno+0x28>
    f644:	d0a6dc04 	addi	r2,gp,-25744
}
    f648:	e037883a 	mov	sp,fp
    f64c:	dfc00117 	ldw	ra,4(sp)
    f650:	df000017 	ldw	fp,0(sp)
    f654:	dec00204 	addi	sp,sp,8
    f658:	f800283a 	ret

0000f65c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f65c:	deffed04 	addi	sp,sp,-76
    f660:	dfc01215 	stw	ra,72(sp)
    f664:	df001115 	stw	fp,68(sp)
    f668:	df001104 	addi	fp,sp,68
    f66c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f670:	e0bfff17 	ldw	r2,-4(fp)
    f674:	10000616 	blt	r2,zero,f690 <isatty+0x34>
    f678:	e0bfff17 	ldw	r2,-4(fp)
    f67c:	10c00324 	muli	r3,r2,12
    f680:	00800074 	movhi	r2,1
    f684:	108ba804 	addi	r2,r2,11936
    f688:	1885883a 	add	r2,r3,r2
    f68c:	00000106 	br	f694 <isatty+0x38>
    f690:	0005883a 	mov	r2,zero
    f694:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f698:	e0bfef17 	ldw	r2,-68(fp)
    f69c:	10000e26 	beq	r2,zero,f6d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f6a0:	e0bfef17 	ldw	r2,-68(fp)
    f6a4:	10800017 	ldw	r2,0(r2)
    f6a8:	10800817 	ldw	r2,32(r2)
    f6ac:	1000021e 	bne	r2,zero,f6b8 <isatty+0x5c>
    {
      return 1;
    f6b0:	00800044 	movi	r2,1
    f6b4:	00000d06 	br	f6ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f6b8:	e0bff004 	addi	r2,fp,-64
    f6bc:	100b883a 	mov	r5,r2
    f6c0:	e13fff17 	ldw	r4,-4(fp)
    f6c4:	000f5700 	call	f570 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f6c8:	e0bff117 	ldw	r2,-60(fp)
    f6cc:	10880020 	cmpeqi	r2,r2,8192
    f6d0:	10803fcc 	andi	r2,r2,255
    f6d4:	00000506 	br	f6ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f6d8:	000f6200 	call	f620 <alt_get_errno>
    f6dc:	1007883a 	mov	r3,r2
    f6e0:	00801444 	movi	r2,81
    f6e4:	18800015 	stw	r2,0(r3)
    return 0;
    f6e8:	0005883a 	mov	r2,zero
  }
}
    f6ec:	e037883a 	mov	sp,fp
    f6f0:	dfc00117 	ldw	ra,4(sp)
    f6f4:	df000017 	ldw	fp,0(sp)
    f6f8:	dec00204 	addi	sp,sp,8
    f6fc:	f800283a 	ret

0000f700 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f700:	defffc04 	addi	sp,sp,-16
    f704:	df000315 	stw	fp,12(sp)
    f708:	df000304 	addi	fp,sp,12
    f70c:	e13ffd15 	stw	r4,-12(fp)
    f710:	e17ffe15 	stw	r5,-8(fp)
    f714:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f718:	e0fffe17 	ldw	r3,-8(fp)
    f71c:	e0bffd17 	ldw	r2,-12(fp)
    f720:	18800c26 	beq	r3,r2,f754 <alt_load_section+0x54>
  {
    while( to != end )
    f724:	00000806 	br	f748 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f728:	e0bffe17 	ldw	r2,-8(fp)
    f72c:	10c00104 	addi	r3,r2,4
    f730:	e0fffe15 	stw	r3,-8(fp)
    f734:	e0fffd17 	ldw	r3,-12(fp)
    f738:	19000104 	addi	r4,r3,4
    f73c:	e13ffd15 	stw	r4,-12(fp)
    f740:	18c00017 	ldw	r3,0(r3)
    f744:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f748:	e0fffe17 	ldw	r3,-8(fp)
    f74c:	e0bfff17 	ldw	r2,-4(fp)
    f750:	18bff51e 	bne	r3,r2,f728 <__alt_data_end+0xff00f728>
    {
      *to++ = *from++;
    }
  }
}
    f754:	0001883a 	nop
    f758:	e037883a 	mov	sp,fp
    f75c:	df000017 	ldw	fp,0(sp)
    f760:	dec00104 	addi	sp,sp,4
    f764:	f800283a 	ret

0000f768 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f768:	defffe04 	addi	sp,sp,-8
    f76c:	dfc00115 	stw	ra,4(sp)
    f770:	df000015 	stw	fp,0(sp)
    f774:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f778:	01800074 	movhi	r6,1
    f77c:	31903204 	addi	r6,r6,16584
    f780:	01400074 	movhi	r5,1
    f784:	29497504 	addi	r5,r5,9684
    f788:	01000074 	movhi	r4,1
    f78c:	21103204 	addi	r4,r4,16584
    f790:	000f7000 	call	f700 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f794:	01800034 	movhi	r6,0
    f798:	31809104 	addi	r6,r6,580
    f79c:	01400034 	movhi	r5,0
    f7a0:	29400804 	addi	r5,r5,32
    f7a4:	01000034 	movhi	r4,0
    f7a8:	21000804 	addi	r4,r4,32
    f7ac:	000f7000 	call	f700 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f7b0:	01800074 	movhi	r6,1
    f7b4:	31897504 	addi	r6,r6,9684
    f7b8:	01400074 	movhi	r5,1
    f7bc:	29478f04 	addi	r5,r5,7740
    f7c0:	01000074 	movhi	r4,1
    f7c4:	21078f04 	addi	r4,r4,7740
    f7c8:	000f7000 	call	f700 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f7cc:	0010d500 	call	10d50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f7d0:	0010f100 	call	10f10 <alt_icache_flush_all>
}
    f7d4:	0001883a 	nop
    f7d8:	e037883a 	mov	sp,fp
    f7dc:	dfc00117 	ldw	ra,4(sp)
    f7e0:	df000017 	ldw	fp,0(sp)
    f7e4:	dec00204 	addi	sp,sp,8
    f7e8:	f800283a 	ret

0000f7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f7ec:	defffe04 	addi	sp,sp,-8
    f7f0:	dfc00115 	stw	ra,4(sp)
    f7f4:	df000015 	stw	fp,0(sp)
    f7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f7fc:	d0a00d17 	ldw	r2,-32716(gp)
    f800:	10000326 	beq	r2,zero,f810 <alt_get_errno+0x24>
    f804:	d0a00d17 	ldw	r2,-32716(gp)
    f808:	103ee83a 	callr	r2
    f80c:	00000106 	br	f814 <alt_get_errno+0x28>
    f810:	d0a6dc04 	addi	r2,gp,-25744
}
    f814:	e037883a 	mov	sp,fp
    f818:	dfc00117 	ldw	ra,4(sp)
    f81c:	df000017 	ldw	fp,0(sp)
    f820:	dec00204 	addi	sp,sp,8
    f824:	f800283a 	ret

0000f828 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f828:	defff904 	addi	sp,sp,-28
    f82c:	dfc00615 	stw	ra,24(sp)
    f830:	df000515 	stw	fp,20(sp)
    f834:	df000504 	addi	fp,sp,20
    f838:	e13ffd15 	stw	r4,-12(fp)
    f83c:	e17ffe15 	stw	r5,-8(fp)
    f840:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f844:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f848:	e0bffd17 	ldw	r2,-12(fp)
    f84c:	10000616 	blt	r2,zero,f868 <lseek+0x40>
    f850:	e0bffd17 	ldw	r2,-12(fp)
    f854:	10c00324 	muli	r3,r2,12
    f858:	00800074 	movhi	r2,1
    f85c:	108ba804 	addi	r2,r2,11936
    f860:	1885883a 	add	r2,r3,r2
    f864:	00000106 	br	f86c <lseek+0x44>
    f868:	0005883a 	mov	r2,zero
    f86c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f870:	e0bffc17 	ldw	r2,-16(fp)
    f874:	10001026 	beq	r2,zero,f8b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f878:	e0bffc17 	ldw	r2,-16(fp)
    f87c:	10800017 	ldw	r2,0(r2)
    f880:	10800717 	ldw	r2,28(r2)
    f884:	10000926 	beq	r2,zero,f8ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f888:	e0bffc17 	ldw	r2,-16(fp)
    f88c:	10800017 	ldw	r2,0(r2)
    f890:	10800717 	ldw	r2,28(r2)
    f894:	e1bfff17 	ldw	r6,-4(fp)
    f898:	e17ffe17 	ldw	r5,-8(fp)
    f89c:	e13ffc17 	ldw	r4,-16(fp)
    f8a0:	103ee83a 	callr	r2
    f8a4:	e0bffb15 	stw	r2,-20(fp)
    f8a8:	00000506 	br	f8c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f8ac:	00bfde84 	movi	r2,-134
    f8b0:	e0bffb15 	stw	r2,-20(fp)
    f8b4:	00000206 	br	f8c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f8b8:	00bfebc4 	movi	r2,-81
    f8bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	1000070e 	bge	r2,zero,f8e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f8c8:	000f7ec0 	call	f7ec <alt_get_errno>
    f8cc:	1007883a 	mov	r3,r2
    f8d0:	e0bffb17 	ldw	r2,-20(fp)
    f8d4:	0085c83a 	sub	r2,zero,r2
    f8d8:	18800015 	stw	r2,0(r3)
    rc = -1;
    f8dc:	00bfffc4 	movi	r2,-1
    f8e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f8e4:	e0bffb17 	ldw	r2,-20(fp)
}
    f8e8:	e037883a 	mov	sp,fp
    f8ec:	dfc00117 	ldw	ra,4(sp)
    f8f0:	df000017 	ldw	fp,0(sp)
    f8f4:	dec00204 	addi	sp,sp,8
    f8f8:	f800283a 	ret

0000f8fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f8fc:	defffd04 	addi	sp,sp,-12
    f900:	dfc00215 	stw	ra,8(sp)
    f904:	df000115 	stw	fp,4(sp)
    f908:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f90c:	0009883a 	mov	r4,zero
    f910:	000fda40 	call	fda4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f914:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f918:	000fddc0 	call	fddc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f91c:	01800074 	movhi	r6,1
    f920:	31896d04 	addi	r6,r6,9652
    f924:	01400074 	movhi	r5,1
    f928:	29496d04 	addi	r5,r5,9652
    f92c:	01000074 	movhi	r4,1
    f930:	21096d04 	addi	r4,r4,9652
    f934:	00112a80 	call	112a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f938:	0010e500 	call	10e50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f93c:	01000074 	movhi	r4,1
    f940:	2103ac04 	addi	r4,r4,3760
    f944:	0011aa80 	call	11aa8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f948:	d0a6e017 	ldw	r2,-25728(gp)
    f94c:	d0e6e117 	ldw	r3,-25724(gp)
    f950:	d126e217 	ldw	r4,-25720(gp)
    f954:	200d883a 	mov	r6,r4
    f958:	180b883a 	mov	r5,r3
    f95c:	1009883a 	mov	r4,r2
    f960:	00013100 	call	1310 <main>
    f964:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f968:	01000044 	movi	r4,1
    f96c:	000f4380 	call	f438 <close>
  exit (result);
    f970:	e13fff17 	ldw	r4,-4(fp)
    f974:	0011abc0 	call	11abc <exit>

0000f978 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f978:	defffe04 	addi	sp,sp,-8
    f97c:	df000115 	stw	fp,4(sp)
    f980:	df000104 	addi	fp,sp,4
    f984:	e13fff15 	stw	r4,-4(fp)
}
    f988:	0001883a 	nop
    f98c:	e037883a 	mov	sp,fp
    f990:	df000017 	ldw	fp,0(sp)
    f994:	dec00104 	addi	sp,sp,4
    f998:	f800283a 	ret

0000f99c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f99c:	defffe04 	addi	sp,sp,-8
    f9a0:	df000115 	stw	fp,4(sp)
    f9a4:	df000104 	addi	fp,sp,4
    f9a8:	e13fff15 	stw	r4,-4(fp)
}
    f9ac:	0001883a 	nop
    f9b0:	e037883a 	mov	sp,fp
    f9b4:	df000017 	ldw	fp,0(sp)
    f9b8:	dec00104 	addi	sp,sp,4
    f9bc:	f800283a 	ret

0000f9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9c0:	defffe04 	addi	sp,sp,-8
    f9c4:	dfc00115 	stw	ra,4(sp)
    f9c8:	df000015 	stw	fp,0(sp)
    f9cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9d0:	d0a00d17 	ldw	r2,-32716(gp)
    f9d4:	10000326 	beq	r2,zero,f9e4 <alt_get_errno+0x24>
    f9d8:	d0a00d17 	ldw	r2,-32716(gp)
    f9dc:	103ee83a 	callr	r2
    f9e0:	00000106 	br	f9e8 <alt_get_errno+0x28>
    f9e4:	d0a6dc04 	addi	r2,gp,-25744
}
    f9e8:	e037883a 	mov	sp,fp
    f9ec:	dfc00117 	ldw	ra,4(sp)
    f9f0:	df000017 	ldw	fp,0(sp)
    f9f4:	dec00204 	addi	sp,sp,8
    f9f8:	f800283a 	ret

0000f9fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f9fc:	defff904 	addi	sp,sp,-28
    fa00:	dfc00615 	stw	ra,24(sp)
    fa04:	df000515 	stw	fp,20(sp)
    fa08:	df000504 	addi	fp,sp,20
    fa0c:	e13ffd15 	stw	r4,-12(fp)
    fa10:	e17ffe15 	stw	r5,-8(fp)
    fa14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa18:	e0bffd17 	ldw	r2,-12(fp)
    fa1c:	10000616 	blt	r2,zero,fa38 <read+0x3c>
    fa20:	e0bffd17 	ldw	r2,-12(fp)
    fa24:	10c00324 	muli	r3,r2,12
    fa28:	00800074 	movhi	r2,1
    fa2c:	108ba804 	addi	r2,r2,11936
    fa30:	1885883a 	add	r2,r3,r2
    fa34:	00000106 	br	fa3c <read+0x40>
    fa38:	0005883a 	mov	r2,zero
    fa3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fa40:	e0bffb17 	ldw	r2,-20(fp)
    fa44:	10002226 	beq	r2,zero,fad0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa48:	e0bffb17 	ldw	r2,-20(fp)
    fa4c:	10800217 	ldw	r2,8(r2)
    fa50:	108000cc 	andi	r2,r2,3
    fa54:	10800060 	cmpeqi	r2,r2,1
    fa58:	1000181e 	bne	r2,zero,fabc <read+0xc0>
        (fd->dev->read))
    fa5c:	e0bffb17 	ldw	r2,-20(fp)
    fa60:	10800017 	ldw	r2,0(r2)
    fa64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa68:	10001426 	beq	r2,zero,fabc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa6c:	e0bffb17 	ldw	r2,-20(fp)
    fa70:	10800017 	ldw	r2,0(r2)
    fa74:	10800517 	ldw	r2,20(r2)
    fa78:	e0ffff17 	ldw	r3,-4(fp)
    fa7c:	180d883a 	mov	r6,r3
    fa80:	e17ffe17 	ldw	r5,-8(fp)
    fa84:	e13ffb17 	ldw	r4,-20(fp)
    fa88:	103ee83a 	callr	r2
    fa8c:	e0bffc15 	stw	r2,-16(fp)
    fa90:	e0bffc17 	ldw	r2,-16(fp)
    fa94:	1000070e 	bge	r2,zero,fab4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fa98:	000f9c00 	call	f9c0 <alt_get_errno>
    fa9c:	1007883a 	mov	r3,r2
    faa0:	e0bffc17 	ldw	r2,-16(fp)
    faa4:	0085c83a 	sub	r2,zero,r2
    faa8:	18800015 	stw	r2,0(r3)
          return -1;
    faac:	00bfffc4 	movi	r2,-1
    fab0:	00000c06 	br	fae4 <read+0xe8>
        }
        return rval;
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	00000a06 	br	fae4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fabc:	000f9c00 	call	f9c0 <alt_get_errno>
    fac0:	1007883a 	mov	r3,r2
    fac4:	00800344 	movi	r2,13
    fac8:	18800015 	stw	r2,0(r3)
    facc:	00000406 	br	fae0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fad0:	000f9c00 	call	f9c0 <alt_get_errno>
    fad4:	1007883a 	mov	r3,r2
    fad8:	00801444 	movi	r2,81
    fadc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fae0:	00bfffc4 	movi	r2,-1
}
    fae4:	e037883a 	mov	sp,fp
    fae8:	dfc00117 	ldw	ra,4(sp)
    faec:	df000017 	ldw	fp,0(sp)
    faf0:	dec00204 	addi	sp,sp,8
    faf4:	f800283a 	ret

0000faf8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    faf8:	defffe04 	addi	sp,sp,-8
    fafc:	df000115 	stw	fp,4(sp)
    fb00:	df000104 	addi	fp,sp,4
    fb04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fb08:	e0bfff17 	ldw	r2,-4(fp)
    fb0c:	108000d0 	cmplti	r2,r2,3
    fb10:	10000d1e 	bne	r2,zero,fb48 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fb14:	00800074 	movhi	r2,1
    fb18:	108ba804 	addi	r2,r2,11936
    fb1c:	e0ffff17 	ldw	r3,-4(fp)
    fb20:	18c00324 	muli	r3,r3,12
    fb24:	10c5883a 	add	r2,r2,r3
    fb28:	10800204 	addi	r2,r2,8
    fb2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fb30:	00800074 	movhi	r2,1
    fb34:	108ba804 	addi	r2,r2,11936
    fb38:	e0ffff17 	ldw	r3,-4(fp)
    fb3c:	18c00324 	muli	r3,r3,12
    fb40:	10c5883a 	add	r2,r2,r3
    fb44:	10000015 	stw	zero,0(r2)
  }
}
    fb48:	0001883a 	nop
    fb4c:	e037883a 	mov	sp,fp
    fb50:	df000017 	ldw	fp,0(sp)
    fb54:	dec00104 	addi	sp,sp,4
    fb58:	f800283a 	ret

0000fb5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fb5c:	defff904 	addi	sp,sp,-28
    fb60:	df000615 	stw	fp,24(sp)
    fb64:	df000604 	addi	fp,sp,24
    fb68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb6c:	0005303a 	rdctl	r2,status
    fb70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb74:	e0fffe17 	ldw	r3,-8(fp)
    fb78:	00bfff84 	movi	r2,-2
    fb7c:	1884703a 	and	r2,r3,r2
    fb80:	1001703a 	wrctl	status,r2
  
  return context;
    fb84:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fb88:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fb8c:	d0a00e17 	ldw	r2,-32712(gp)
    fb90:	10c000c4 	addi	r3,r2,3
    fb94:	00bfff04 	movi	r2,-4
    fb98:	1884703a 	and	r2,r3,r2
    fb9c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fba0:	d0e00e17 	ldw	r3,-32712(gp)
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	1887883a 	add	r3,r3,r2
    fbac:	00804034 	movhi	r2,256
    fbb0:	10800004 	addi	r2,r2,0
    fbb4:	10c0062e 	bgeu	r2,r3,fbd0 <sbrk+0x74>
    fbb8:	e0bffb17 	ldw	r2,-20(fp)
    fbbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbc0:	e0bffa17 	ldw	r2,-24(fp)
    fbc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fbc8:	00bfffc4 	movi	r2,-1
    fbcc:	00000b06 	br	fbfc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fbd0:	d0a00e17 	ldw	r2,-32712(gp)
    fbd4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fbd8:	d0e00e17 	ldw	r3,-32712(gp)
    fbdc:	e0bfff17 	ldw	r2,-4(fp)
    fbe0:	1885883a 	add	r2,r3,r2
    fbe4:	d0a00e15 	stw	r2,-32712(gp)
    fbe8:	e0bffb17 	ldw	r2,-20(fp)
    fbec:	e0bffc15 	stw	r2,-16(fp)
    fbf0:	e0bffc17 	ldw	r2,-16(fp)
    fbf4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fbf8:	e0bffd17 	ldw	r2,-12(fp)
} 
    fbfc:	e037883a 	mov	sp,fp
    fc00:	df000017 	ldw	fp,0(sp)
    fc04:	dec00104 	addi	sp,sp,4
    fc08:	f800283a 	ret

0000fc0c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fc0c:	defffd04 	addi	sp,sp,-12
    fc10:	dfc00215 	stw	ra,8(sp)
    fc14:	df000115 	stw	fp,4(sp)
    fc18:	df000104 	addi	fp,sp,4
    fc1c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fc20:	e13fff17 	ldw	r4,-4(fp)
    fc24:	0010bf80 	call	10bf8 <alt_busy_sleep>
}
    fc28:	e037883a 	mov	sp,fp
    fc2c:	dfc00117 	ldw	ra,4(sp)
    fc30:	df000017 	ldw	fp,0(sp)
    fc34:	dec00204 	addi	sp,sp,8
    fc38:	f800283a 	ret

0000fc3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc3c:	defffe04 	addi	sp,sp,-8
    fc40:	dfc00115 	stw	ra,4(sp)
    fc44:	df000015 	stw	fp,0(sp)
    fc48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc4c:	d0a00d17 	ldw	r2,-32716(gp)
    fc50:	10000326 	beq	r2,zero,fc60 <alt_get_errno+0x24>
    fc54:	d0a00d17 	ldw	r2,-32716(gp)
    fc58:	103ee83a 	callr	r2
    fc5c:	00000106 	br	fc64 <alt_get_errno+0x28>
    fc60:	d0a6dc04 	addi	r2,gp,-25744
}
    fc64:	e037883a 	mov	sp,fp
    fc68:	dfc00117 	ldw	ra,4(sp)
    fc6c:	df000017 	ldw	fp,0(sp)
    fc70:	dec00204 	addi	sp,sp,8
    fc74:	f800283a 	ret

0000fc78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fc78:	defff904 	addi	sp,sp,-28
    fc7c:	dfc00615 	stw	ra,24(sp)
    fc80:	df000515 	stw	fp,20(sp)
    fc84:	df000504 	addi	fp,sp,20
    fc88:	e13ffd15 	stw	r4,-12(fp)
    fc8c:	e17ffe15 	stw	r5,-8(fp)
    fc90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc94:	e0bffd17 	ldw	r2,-12(fp)
    fc98:	10000616 	blt	r2,zero,fcb4 <write+0x3c>
    fc9c:	e0bffd17 	ldw	r2,-12(fp)
    fca0:	10c00324 	muli	r3,r2,12
    fca4:	00800074 	movhi	r2,1
    fca8:	108ba804 	addi	r2,r2,11936
    fcac:	1885883a 	add	r2,r3,r2
    fcb0:	00000106 	br	fcb8 <write+0x40>
    fcb4:	0005883a 	mov	r2,zero
    fcb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fcbc:	e0bffb17 	ldw	r2,-20(fp)
    fcc0:	10002126 	beq	r2,zero,fd48 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fcc4:	e0bffb17 	ldw	r2,-20(fp)
    fcc8:	10800217 	ldw	r2,8(r2)
    fccc:	108000cc 	andi	r2,r2,3
    fcd0:	10001826 	beq	r2,zero,fd34 <write+0xbc>
    fcd4:	e0bffb17 	ldw	r2,-20(fp)
    fcd8:	10800017 	ldw	r2,0(r2)
    fcdc:	10800617 	ldw	r2,24(r2)
    fce0:	10001426 	beq	r2,zero,fd34 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fce4:	e0bffb17 	ldw	r2,-20(fp)
    fce8:	10800017 	ldw	r2,0(r2)
    fcec:	10800617 	ldw	r2,24(r2)
    fcf0:	e0ffff17 	ldw	r3,-4(fp)
    fcf4:	180d883a 	mov	r6,r3
    fcf8:	e17ffe17 	ldw	r5,-8(fp)
    fcfc:	e13ffb17 	ldw	r4,-20(fp)
    fd00:	103ee83a 	callr	r2
    fd04:	e0bffc15 	stw	r2,-16(fp)
    fd08:	e0bffc17 	ldw	r2,-16(fp)
    fd0c:	1000070e 	bge	r2,zero,fd2c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fd10:	000fc3c0 	call	fc3c <alt_get_errno>
    fd14:	1007883a 	mov	r3,r2
    fd18:	e0bffc17 	ldw	r2,-16(fp)
    fd1c:	0085c83a 	sub	r2,zero,r2
    fd20:	18800015 	stw	r2,0(r3)
        return -1;
    fd24:	00bfffc4 	movi	r2,-1
    fd28:	00000c06 	br	fd5c <write+0xe4>
      }
      return rval;
    fd2c:	e0bffc17 	ldw	r2,-16(fp)
    fd30:	00000a06 	br	fd5c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd34:	000fc3c0 	call	fc3c <alt_get_errno>
    fd38:	1007883a 	mov	r3,r2
    fd3c:	00800344 	movi	r2,13
    fd40:	18800015 	stw	r2,0(r3)
    fd44:	00000406 	br	fd58 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fd48:	000fc3c0 	call	fc3c <alt_get_errno>
    fd4c:	1007883a 	mov	r3,r2
    fd50:	00801444 	movi	r2,81
    fd54:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fd58:	00bfffc4 	movi	r2,-1
}
    fd5c:	e037883a 	mov	sp,fp
    fd60:	dfc00117 	ldw	ra,4(sp)
    fd64:	df000017 	ldw	fp,0(sp)
    fd68:	dec00204 	addi	sp,sp,8
    fd6c:	f800283a 	ret

0000fd70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fd70:	defffd04 	addi	sp,sp,-12
    fd74:	dfc00215 	stw	ra,8(sp)
    fd78:	df000115 	stw	fp,4(sp)
    fd7c:	df000104 	addi	fp,sp,4
    fd80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fd84:	d1600a04 	addi	r5,gp,-32728
    fd88:	e13fff17 	ldw	r4,-4(fp)
    fd8c:	0010dac0 	call	10dac <alt_dev_llist_insert>
}
    fd90:	e037883a 	mov	sp,fp
    fd94:	dfc00117 	ldw	ra,4(sp)
    fd98:	df000017 	ldw	fp,0(sp)
    fd9c:	dec00204 	addi	sp,sp,8
    fda0:	f800283a 	ret

0000fda4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fda4:	defffd04 	addi	sp,sp,-12
    fda8:	dfc00215 	stw	ra,8(sp)
    fdac:	df000115 	stw	fp,4(sp)
    fdb0:	df000104 	addi	fp,sp,4
    fdb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    fdb8:	001171c0 	call	1171c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fdbc:	00800044 	movi	r2,1
    fdc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fdc4:	0001883a 	nop
    fdc8:	e037883a 	mov	sp,fp
    fdcc:	dfc00117 	ldw	ra,4(sp)
    fdd0:	df000017 	ldw	fp,0(sp)
    fdd4:	dec00204 	addi	sp,sp,8
    fdd8:	f800283a 	ret

0000fddc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fddc:	defffe04 	addi	sp,sp,-8
    fde0:	dfc00115 	stw	ra,4(sp)
    fde4:	df000015 	stw	fp,0(sp)
    fde8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    fdec:	00804034 	movhi	r2,256
    fdf0:	10840004 	addi	r2,r2,4096
    fdf4:	d0a6e315 	stw	r2,-25716(gp)
    fdf8:	0080bef4 	movhi	r2,763
    fdfc:	10bc2004 	addi	r2,r2,-3968
    fe00:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    fe04:	01c0fa04 	movi	r7,1000
    fe08:	01800104 	movi	r6,4
    fe0c:	000b883a 	mov	r5,zero
    fe10:	01004034 	movhi	r4,256
    fe14:	21040804 	addi	r4,r4,4128
    fe18:	00109380 	call	10938 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    fe1c:	000d883a 	mov	r6,zero
    fe20:	000b883a 	mov	r5,zero
    fe24:	01000074 	movhi	r4,1
    fe28:	210c1204 	addi	r4,r4,12360
    fe2c:	000ffbc0 	call	ffbc <altera_avalon_jtag_uart_init>
    fe30:	01000074 	movhi	r4,1
    fe34:	210c0804 	addi	r4,r4,12320
    fe38:	000fd700 	call	fd70 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    fe3c:	0001883a 	nop
}
    fe40:	0001883a 	nop
    fe44:	e037883a 	mov	sp,fp
    fe48:	dfc00117 	ldw	ra,4(sp)
    fe4c:	df000017 	ldw	fp,0(sp)
    fe50:	dec00204 	addi	sp,sp,8
    fe54:	f800283a 	ret

0000fe58 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fe58:	defffa04 	addi	sp,sp,-24
    fe5c:	dfc00515 	stw	ra,20(sp)
    fe60:	df000415 	stw	fp,16(sp)
    fe64:	df000404 	addi	fp,sp,16
    fe68:	e13ffd15 	stw	r4,-12(fp)
    fe6c:	e17ffe15 	stw	r5,-8(fp)
    fe70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe74:	e0bffd17 	ldw	r2,-12(fp)
    fe78:	10800017 	ldw	r2,0(r2)
    fe7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fe80:	e0bffc17 	ldw	r2,-16(fp)
    fe84:	10c00a04 	addi	r3,r2,40
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10800217 	ldw	r2,8(r2)
    fe90:	100f883a 	mov	r7,r2
    fe94:	e1bfff17 	ldw	r6,-4(fp)
    fe98:	e17ffe17 	ldw	r5,-8(fp)
    fe9c:	1809883a 	mov	r4,r3
    fea0:	00104800 	call	10480 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fea4:	e037883a 	mov	sp,fp
    fea8:	dfc00117 	ldw	ra,4(sp)
    feac:	df000017 	ldw	fp,0(sp)
    feb0:	dec00204 	addi	sp,sp,8
    feb4:	f800283a 	ret

0000feb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    feb8:	defffa04 	addi	sp,sp,-24
    febc:	dfc00515 	stw	ra,20(sp)
    fec0:	df000415 	stw	fp,16(sp)
    fec4:	df000404 	addi	fp,sp,16
    fec8:	e13ffd15 	stw	r4,-12(fp)
    fecc:	e17ffe15 	stw	r5,-8(fp)
    fed0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fed4:	e0bffd17 	ldw	r2,-12(fp)
    fed8:	10800017 	ldw	r2,0(r2)
    fedc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fee0:	e0bffc17 	ldw	r2,-16(fp)
    fee4:	10c00a04 	addi	r3,r2,40
    fee8:	e0bffd17 	ldw	r2,-12(fp)
    feec:	10800217 	ldw	r2,8(r2)
    fef0:	100f883a 	mov	r7,r2
    fef4:	e1bfff17 	ldw	r6,-4(fp)
    fef8:	e17ffe17 	ldw	r5,-8(fp)
    fefc:	1809883a 	mov	r4,r3
    ff00:	001069c0 	call	1069c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ff04:	e037883a 	mov	sp,fp
    ff08:	dfc00117 	ldw	ra,4(sp)
    ff0c:	df000017 	ldw	fp,0(sp)
    ff10:	dec00204 	addi	sp,sp,8
    ff14:	f800283a 	ret

0000ff18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ff18:	defffc04 	addi	sp,sp,-16
    ff1c:	dfc00315 	stw	ra,12(sp)
    ff20:	df000215 	stw	fp,8(sp)
    ff24:	df000204 	addi	fp,sp,8
    ff28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ff2c:	e0bfff17 	ldw	r2,-4(fp)
    ff30:	10800017 	ldw	r2,0(r2)
    ff34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ff38:	e0bffe17 	ldw	r2,-8(fp)
    ff3c:	10c00a04 	addi	r3,r2,40
    ff40:	e0bfff17 	ldw	r2,-4(fp)
    ff44:	10800217 	ldw	r2,8(r2)
    ff48:	100b883a 	mov	r5,r2
    ff4c:	1809883a 	mov	r4,r3
    ff50:	00103280 	call	10328 <altera_avalon_jtag_uart_close>
}
    ff54:	e037883a 	mov	sp,fp
    ff58:	dfc00117 	ldw	ra,4(sp)
    ff5c:	df000017 	ldw	fp,0(sp)
    ff60:	dec00204 	addi	sp,sp,8
    ff64:	f800283a 	ret

0000ff68 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ff68:	defffa04 	addi	sp,sp,-24
    ff6c:	dfc00515 	stw	ra,20(sp)
    ff70:	df000415 	stw	fp,16(sp)
    ff74:	df000404 	addi	fp,sp,16
    ff78:	e13ffd15 	stw	r4,-12(fp)
    ff7c:	e17ffe15 	stw	r5,-8(fp)
    ff80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ff84:	e0bffd17 	ldw	r2,-12(fp)
    ff88:	10800017 	ldw	r2,0(r2)
    ff8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ff90:	e0bffc17 	ldw	r2,-16(fp)
    ff94:	10800a04 	addi	r2,r2,40
    ff98:	e1bfff17 	ldw	r6,-4(fp)
    ff9c:	e17ffe17 	ldw	r5,-8(fp)
    ffa0:	1009883a 	mov	r4,r2
    ffa4:	00103900 	call	10390 <altera_avalon_jtag_uart_ioctl>
}
    ffa8:	e037883a 	mov	sp,fp
    ffac:	dfc00117 	ldw	ra,4(sp)
    ffb0:	df000017 	ldw	fp,0(sp)
    ffb4:	dec00204 	addi	sp,sp,8
    ffb8:	f800283a 	ret

0000ffbc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ffbc:	defffa04 	addi	sp,sp,-24
    ffc0:	dfc00515 	stw	ra,20(sp)
    ffc4:	df000415 	stw	fp,16(sp)
    ffc8:	df000404 	addi	fp,sp,16
    ffcc:	e13ffd15 	stw	r4,-12(fp)
    ffd0:	e17ffe15 	stw	r5,-8(fp)
    ffd4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ffd8:	e0bffd17 	ldw	r2,-12(fp)
    ffdc:	00c00044 	movi	r3,1
    ffe0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ffe4:	e0bffd17 	ldw	r2,-12(fp)
    ffe8:	10800017 	ldw	r2,0(r2)
    ffec:	10800104 	addi	r2,r2,4
    fff0:	1007883a 	mov	r3,r2
    fff4:	e0bffd17 	ldw	r2,-12(fp)
    fff8:	10800817 	ldw	r2,32(r2)
    fffc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10000:	e0bffe17 	ldw	r2,-8(fp)
   10004:	e0ffff17 	ldw	r3,-4(fp)
   10008:	d8000015 	stw	zero,0(sp)
   1000c:	e1fffd17 	ldw	r7,-12(fp)
   10010:	01800074 	movhi	r6,1
   10014:	31801f04 	addi	r6,r6,124
   10018:	180b883a 	mov	r5,r3
   1001c:	1009883a 	mov	r4,r2
   10020:	0010f440 	call	10f44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10024:	e0bffd17 	ldw	r2,-12(fp)
   10028:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1002c:	e0bffd17 	ldw	r2,-12(fp)
   10030:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10034:	d0e6e617 	ldw	r3,-25704(gp)
   10038:	e1fffd17 	ldw	r7,-12(fp)
   1003c:	01800074 	movhi	r6,1
   10040:	3180a204 	addi	r6,r6,648
   10044:	180b883a 	mov	r5,r3
   10048:	1009883a 	mov	r4,r2
   1004c:	0010acc0 	call	10acc <alt_alarm_start>
   10050:	1000040e 	bge	r2,zero,10064 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10054:	e0fffd17 	ldw	r3,-12(fp)
   10058:	00a00034 	movhi	r2,32768
   1005c:	10bfffc4 	addi	r2,r2,-1
   10060:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10064:	0001883a 	nop
   10068:	e037883a 	mov	sp,fp
   1006c:	dfc00117 	ldw	ra,4(sp)
   10070:	df000017 	ldw	fp,0(sp)
   10074:	dec00204 	addi	sp,sp,8
   10078:	f800283a 	ret

0001007c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1007c:	defff804 	addi	sp,sp,-32
   10080:	df000715 	stw	fp,28(sp)
   10084:	df000704 	addi	fp,sp,28
   10088:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1008c:	e0bfff17 	ldw	r2,-4(fp)
   10090:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10094:	e0bffb17 	ldw	r2,-20(fp)
   10098:	10800017 	ldw	r2,0(r2)
   1009c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100a0:	e0bffc17 	ldw	r2,-16(fp)
   100a4:	10800104 	addi	r2,r2,4
   100a8:	10800037 	ldwio	r2,0(r2)
   100ac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   100b0:	e0bffd17 	ldw	r2,-12(fp)
   100b4:	1080c00c 	andi	r2,r2,768
   100b8:	10006d26 	beq	r2,zero,10270 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   100bc:	e0bffd17 	ldw	r2,-12(fp)
   100c0:	1080400c 	andi	r2,r2,256
   100c4:	10003526 	beq	r2,zero,1019c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   100c8:	00800074 	movhi	r2,1
   100cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100d0:	e0bffb17 	ldw	r2,-20(fp)
   100d4:	10800a17 	ldw	r2,40(r2)
   100d8:	10800044 	addi	r2,r2,1
   100dc:	1081ffcc 	andi	r2,r2,2047
   100e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   100e4:	e0bffb17 	ldw	r2,-20(fp)
   100e8:	10c00b17 	ldw	r3,44(r2)
   100ec:	e0bffe17 	ldw	r2,-8(fp)
   100f0:	18801526 	beq	r3,r2,10148 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   100f4:	e0bffc17 	ldw	r2,-16(fp)
   100f8:	10800037 	ldwio	r2,0(r2)
   100fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10100:	e0bff917 	ldw	r2,-28(fp)
   10104:	10a0000c 	andi	r2,r2,32768
   10108:	10001126 	beq	r2,zero,10150 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1010c:	e0bffb17 	ldw	r2,-20(fp)
   10110:	10800a17 	ldw	r2,40(r2)
   10114:	e0fff917 	ldw	r3,-28(fp)
   10118:	1809883a 	mov	r4,r3
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	1885883a 	add	r2,r3,r2
   10124:	10800e04 	addi	r2,r2,56
   10128:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1012c:	e0bffb17 	ldw	r2,-20(fp)
   10130:	10800a17 	ldw	r2,40(r2)
   10134:	10800044 	addi	r2,r2,1
   10138:	10c1ffcc 	andi	r3,r2,2047
   1013c:	e0bffb17 	ldw	r2,-20(fp)
   10140:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10144:	003fe206 	br	100d0 <__alt_data_end+0xff0100d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10148:	0001883a 	nop
   1014c:	00000106 	br	10154 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10150:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10154:	e0bff917 	ldw	r2,-28(fp)
   10158:	10bfffec 	andhi	r2,r2,65535
   1015c:	10000f26 	beq	r2,zero,1019c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10160:	e0bffb17 	ldw	r2,-20(fp)
   10164:	10c00817 	ldw	r3,32(r2)
   10168:	00bfff84 	movi	r2,-2
   1016c:	1886703a 	and	r3,r3,r2
   10170:	e0bffb17 	ldw	r2,-20(fp)
   10174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10178:	e0bffc17 	ldw	r2,-16(fp)
   1017c:	10800104 	addi	r2,r2,4
   10180:	1007883a 	mov	r3,r2
   10184:	e0bffb17 	ldw	r2,-20(fp)
   10188:	10800817 	ldw	r2,32(r2)
   1018c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	10800104 	addi	r2,r2,4
   10198:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	1080800c 	andi	r2,r2,512
   101a4:	103fbe26 	beq	r2,zero,100a0 <__alt_data_end+0xff0100a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   101a8:	e0bffd17 	ldw	r2,-12(fp)
   101ac:	1004d43a 	srli	r2,r2,16
   101b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   101b4:	00001406 	br	10208 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   101b8:	e0bffc17 	ldw	r2,-16(fp)
   101bc:	e0fffb17 	ldw	r3,-20(fp)
   101c0:	18c00d17 	ldw	r3,52(r3)
   101c4:	e13ffb17 	ldw	r4,-20(fp)
   101c8:	20c7883a 	add	r3,r4,r3
   101cc:	18c20e04 	addi	r3,r3,2104
   101d0:	18c00003 	ldbu	r3,0(r3)
   101d4:	18c03fcc 	andi	r3,r3,255
   101d8:	18c0201c 	xori	r3,r3,128
   101dc:	18ffe004 	addi	r3,r3,-128
   101e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   101e4:	e0bffb17 	ldw	r2,-20(fp)
   101e8:	10800d17 	ldw	r2,52(r2)
   101ec:	10800044 	addi	r2,r2,1
   101f0:	10c1ffcc 	andi	r3,r2,2047
   101f4:	e0bffb17 	ldw	r2,-20(fp)
   101f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   101fc:	e0bffa17 	ldw	r2,-24(fp)
   10200:	10bfffc4 	addi	r2,r2,-1
   10204:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10208:	e0bffa17 	ldw	r2,-24(fp)
   1020c:	10000526 	beq	r2,zero,10224 <altera_avalon_jtag_uart_irq+0x1a8>
   10210:	e0bffb17 	ldw	r2,-20(fp)
   10214:	10c00d17 	ldw	r3,52(r2)
   10218:	e0bffb17 	ldw	r2,-20(fp)
   1021c:	10800c17 	ldw	r2,48(r2)
   10220:	18bfe51e 	bne	r3,r2,101b8 <__alt_data_end+0xff0101b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10224:	e0bffa17 	ldw	r2,-24(fp)
   10228:	103f9d26 	beq	r2,zero,100a0 <__alt_data_end+0xff0100a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1022c:	e0bffb17 	ldw	r2,-20(fp)
   10230:	10c00817 	ldw	r3,32(r2)
   10234:	00bfff44 	movi	r2,-3
   10238:	1886703a 	and	r3,r3,r2
   1023c:	e0bffb17 	ldw	r2,-20(fp)
   10240:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10244:	e0bffb17 	ldw	r2,-20(fp)
   10248:	10800017 	ldw	r2,0(r2)
   1024c:	10800104 	addi	r2,r2,4
   10250:	1007883a 	mov	r3,r2
   10254:	e0bffb17 	ldw	r2,-20(fp)
   10258:	10800817 	ldw	r2,32(r2)
   1025c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10260:	e0bffc17 	ldw	r2,-16(fp)
   10264:	10800104 	addi	r2,r2,4
   10268:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1026c:	003f8c06 	br	100a0 <__alt_data_end+0xff0100a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10270:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10274:	0001883a 	nop
   10278:	e037883a 	mov	sp,fp
   1027c:	df000017 	ldw	fp,0(sp)
   10280:	dec00104 	addi	sp,sp,4
   10284:	f800283a 	ret

00010288 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10288:	defff804 	addi	sp,sp,-32
   1028c:	df000715 	stw	fp,28(sp)
   10290:	df000704 	addi	fp,sp,28
   10294:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10298:	e0bffb17 	ldw	r2,-20(fp)
   1029c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   102a0:	e0bff917 	ldw	r2,-28(fp)
   102a4:	10800017 	ldw	r2,0(r2)
   102a8:	10800104 	addi	r2,r2,4
   102ac:	10800037 	ldwio	r2,0(r2)
   102b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   102b4:	e0bffa17 	ldw	r2,-24(fp)
   102b8:	1081000c 	andi	r2,r2,1024
   102bc:	10000b26 	beq	r2,zero,102ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   102c0:	e0bff917 	ldw	r2,-28(fp)
   102c4:	10800017 	ldw	r2,0(r2)
   102c8:	10800104 	addi	r2,r2,4
   102cc:	1007883a 	mov	r3,r2
   102d0:	e0bff917 	ldw	r2,-28(fp)
   102d4:	10800817 	ldw	r2,32(r2)
   102d8:	10810014 	ori	r2,r2,1024
   102dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   102e0:	e0bff917 	ldw	r2,-28(fp)
   102e4:	10000915 	stw	zero,36(r2)
   102e8:	00000a06 	br	10314 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   102ec:	e0bff917 	ldw	r2,-28(fp)
   102f0:	10c00917 	ldw	r3,36(r2)
   102f4:	00a00034 	movhi	r2,32768
   102f8:	10bfff04 	addi	r2,r2,-4
   102fc:	10c00536 	bltu	r2,r3,10314 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10300:	e0bff917 	ldw	r2,-28(fp)
   10304:	10800917 	ldw	r2,36(r2)
   10308:	10c00044 	addi	r3,r2,1
   1030c:	e0bff917 	ldw	r2,-28(fp)
   10310:	10c00915 	stw	r3,36(r2)
   10314:	d0a6e617 	ldw	r2,-25704(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10318:	e037883a 	mov	sp,fp
   1031c:	df000017 	ldw	fp,0(sp)
   10320:	dec00104 	addi	sp,sp,4
   10324:	f800283a 	ret

00010328 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10328:	defffd04 	addi	sp,sp,-12
   1032c:	df000215 	stw	fp,8(sp)
   10330:	df000204 	addi	fp,sp,8
   10334:	e13ffe15 	stw	r4,-8(fp)
   10338:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1033c:	00000506 	br	10354 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	1090000c 	andi	r2,r2,16384
   10348:	10000226 	beq	r2,zero,10354 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1034c:	00bffd44 	movi	r2,-11
   10350:	00000b06 	br	10380 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10354:	e0bffe17 	ldw	r2,-8(fp)
   10358:	10c00d17 	ldw	r3,52(r2)
   1035c:	e0bffe17 	ldw	r2,-8(fp)
   10360:	10800c17 	ldw	r2,48(r2)
   10364:	18800526 	beq	r3,r2,1037c <altera_avalon_jtag_uart_close+0x54>
   10368:	e0bffe17 	ldw	r2,-8(fp)
   1036c:	10c00917 	ldw	r3,36(r2)
   10370:	e0bffe17 	ldw	r2,-8(fp)
   10374:	10800117 	ldw	r2,4(r2)
   10378:	18bff136 	bltu	r3,r2,10340 <__alt_data_end+0xff010340>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1037c:	0005883a 	mov	r2,zero
}
   10380:	e037883a 	mov	sp,fp
   10384:	df000017 	ldw	fp,0(sp)
   10388:	dec00104 	addi	sp,sp,4
   1038c:	f800283a 	ret

00010390 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10390:	defffa04 	addi	sp,sp,-24
   10394:	df000515 	stw	fp,20(sp)
   10398:	df000504 	addi	fp,sp,20
   1039c:	e13ffd15 	stw	r4,-12(fp)
   103a0:	e17ffe15 	stw	r5,-8(fp)
   103a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   103a8:	00bff9c4 	movi	r2,-25
   103ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	10da8060 	cmpeqi	r3,r2,27137
   103b8:	1800031e 	bne	r3,zero,103c8 <altera_avalon_jtag_uart_ioctl+0x38>
   103bc:	109a80a0 	cmpeqi	r2,r2,27138
   103c0:	1000181e 	bne	r2,zero,10424 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   103c4:	00002906 	br	1046c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   103c8:	e0bffd17 	ldw	r2,-12(fp)
   103cc:	10c00117 	ldw	r3,4(r2)
   103d0:	00a00034 	movhi	r2,32768
   103d4:	10bfffc4 	addi	r2,r2,-1
   103d8:	18802126 	beq	r3,r2,10460 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   103dc:	e0bfff17 	ldw	r2,-4(fp)
   103e0:	10800017 	ldw	r2,0(r2)
   103e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	10800090 	cmplti	r2,r2,2
   103f0:	1000061e 	bne	r2,zero,1040c <altera_avalon_jtag_uart_ioctl+0x7c>
   103f4:	e0fffc17 	ldw	r3,-16(fp)
   103f8:	00a00034 	movhi	r2,32768
   103fc:	10bfffc4 	addi	r2,r2,-1
   10400:	18800226 	beq	r3,r2,1040c <altera_avalon_jtag_uart_ioctl+0x7c>
   10404:	e0bffc17 	ldw	r2,-16(fp)
   10408:	00000206 	br	10414 <altera_avalon_jtag_uart_ioctl+0x84>
   1040c:	00a00034 	movhi	r2,32768
   10410:	10bfff84 	addi	r2,r2,-2
   10414:	e0fffd17 	ldw	r3,-12(fp)
   10418:	18800115 	stw	r2,4(r3)
      rc = 0;
   1041c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10420:	00000f06 	br	10460 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10424:	e0bffd17 	ldw	r2,-12(fp)
   10428:	10c00117 	ldw	r3,4(r2)
   1042c:	00a00034 	movhi	r2,32768
   10430:	10bfffc4 	addi	r2,r2,-1
   10434:	18800c26 	beq	r3,r2,10468 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10438:	e0bffd17 	ldw	r2,-12(fp)
   1043c:	10c00917 	ldw	r3,36(r2)
   10440:	e0bffd17 	ldw	r2,-12(fp)
   10444:	10800117 	ldw	r2,4(r2)
   10448:	1885803a 	cmpltu	r2,r3,r2
   1044c:	10c03fcc 	andi	r3,r2,255
   10450:	e0bfff17 	ldw	r2,-4(fp)
   10454:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10458:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1045c:	00000206 	br	10468 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10460:	0001883a 	nop
   10464:	00000106 	br	1046c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10468:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1046c:	e0bffb17 	ldw	r2,-20(fp)
}
   10470:	e037883a 	mov	sp,fp
   10474:	df000017 	ldw	fp,0(sp)
   10478:	dec00104 	addi	sp,sp,4
   1047c:	f800283a 	ret

00010480 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10480:	defff304 	addi	sp,sp,-52
   10484:	dfc00c15 	stw	ra,48(sp)
   10488:	df000b15 	stw	fp,44(sp)
   1048c:	df000b04 	addi	fp,sp,44
   10490:	e13ffc15 	stw	r4,-16(fp)
   10494:	e17ffd15 	stw	r5,-12(fp)
   10498:	e1bffe15 	stw	r6,-8(fp)
   1049c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   104a0:	e0bffd17 	ldw	r2,-12(fp)
   104a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   104a8:	00004706 	br	105c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   104ac:	e0bffc17 	ldw	r2,-16(fp)
   104b0:	10800a17 	ldw	r2,40(r2)
   104b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   104b8:	e0bffc17 	ldw	r2,-16(fp)
   104bc:	10800b17 	ldw	r2,44(r2)
   104c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   104c4:	e0fff717 	ldw	r3,-36(fp)
   104c8:	e0bff817 	ldw	r2,-32(fp)
   104cc:	18800536 	bltu	r3,r2,104e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   104d0:	e0fff717 	ldw	r3,-36(fp)
   104d4:	e0bff817 	ldw	r2,-32(fp)
   104d8:	1885c83a 	sub	r2,r3,r2
   104dc:	e0bff615 	stw	r2,-40(fp)
   104e0:	00000406 	br	104f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   104e4:	00c20004 	movi	r3,2048
   104e8:	e0bff817 	ldw	r2,-32(fp)
   104ec:	1885c83a 	sub	r2,r3,r2
   104f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   104f4:	e0bff617 	ldw	r2,-40(fp)
   104f8:	10001e26 	beq	r2,zero,10574 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   104fc:	e0fffe17 	ldw	r3,-8(fp)
   10500:	e0bff617 	ldw	r2,-40(fp)
   10504:	1880022e 	bgeu	r3,r2,10510 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10508:	e0bffe17 	ldw	r2,-8(fp)
   1050c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	10c00e04 	addi	r3,r2,56
   10518:	e0bff817 	ldw	r2,-32(fp)
   1051c:	1885883a 	add	r2,r3,r2
   10520:	e1bff617 	ldw	r6,-40(fp)
   10524:	100b883a 	mov	r5,r2
   10528:	e13ff517 	ldw	r4,-44(fp)
   1052c:	0008ed40 	call	8ed4 <memcpy>
      ptr   += n;
   10530:	e0fff517 	ldw	r3,-44(fp)
   10534:	e0bff617 	ldw	r2,-40(fp)
   10538:	1885883a 	add	r2,r3,r2
   1053c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10540:	e0fffe17 	ldw	r3,-8(fp)
   10544:	e0bff617 	ldw	r2,-40(fp)
   10548:	1885c83a 	sub	r2,r3,r2
   1054c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10550:	e0fff817 	ldw	r3,-32(fp)
   10554:	e0bff617 	ldw	r2,-40(fp)
   10558:	1885883a 	add	r2,r3,r2
   1055c:	10c1ffcc 	andi	r3,r2,2047
   10560:	e0bffc17 	ldw	r2,-16(fp)
   10564:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10568:	e0bffe17 	ldw	r2,-8(fp)
   1056c:	00bfcf16 	blt	zero,r2,104ac <__alt_data_end+0xff0104ac>
   10570:	00000106 	br	10578 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10574:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10578:	e0fff517 	ldw	r3,-44(fp)
   1057c:	e0bffd17 	ldw	r2,-12(fp)
   10580:	1880141e 	bne	r3,r2,105d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10584:	e0bfff17 	ldw	r2,-4(fp)
   10588:	1090000c 	andi	r2,r2,16384
   1058c:	1000131e 	bne	r2,zero,105dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10590:	0001883a 	nop
   10594:	e0bffc17 	ldw	r2,-16(fp)
   10598:	10c00a17 	ldw	r3,40(r2)
   1059c:	e0bff717 	ldw	r2,-36(fp)
   105a0:	1880051e 	bne	r3,r2,105b8 <altera_avalon_jtag_uart_read+0x138>
   105a4:	e0bffc17 	ldw	r2,-16(fp)
   105a8:	10c00917 	ldw	r3,36(r2)
   105ac:	e0bffc17 	ldw	r2,-16(fp)
   105b0:	10800117 	ldw	r2,4(r2)
   105b4:	18bff736 	bltu	r3,r2,10594 <__alt_data_end+0xff010594>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   105b8:	e0bffc17 	ldw	r2,-16(fp)
   105bc:	10c00a17 	ldw	r3,40(r2)
   105c0:	e0bff717 	ldw	r2,-36(fp)
   105c4:	18800726 	beq	r3,r2,105e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   105c8:	e0bffe17 	ldw	r2,-8(fp)
   105cc:	00bfb716 	blt	zero,r2,104ac <__alt_data_end+0xff0104ac>
   105d0:	00000506 	br	105e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   105d4:	0001883a 	nop
   105d8:	00000306 	br	105e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   105dc:	0001883a 	nop
   105e0:	00000106 	br	105e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   105e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   105e8:	e0fff517 	ldw	r3,-44(fp)
   105ec:	e0bffd17 	ldw	r2,-12(fp)
   105f0:	18801826 	beq	r3,r2,10654 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105f4:	0005303a 	rdctl	r2,status
   105f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105fc:	e0fffb17 	ldw	r3,-20(fp)
   10600:	00bfff84 	movi	r2,-2
   10604:	1884703a 	and	r2,r3,r2
   10608:	1001703a 	wrctl	status,r2
  
  return context;
   1060c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10610:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10614:	e0bffc17 	ldw	r2,-16(fp)
   10618:	10800817 	ldw	r2,32(r2)
   1061c:	10c00054 	ori	r3,r2,1
   10620:	e0bffc17 	ldw	r2,-16(fp)
   10624:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10628:	e0bffc17 	ldw	r2,-16(fp)
   1062c:	10800017 	ldw	r2,0(r2)
   10630:	10800104 	addi	r2,r2,4
   10634:	1007883a 	mov	r3,r2
   10638:	e0bffc17 	ldw	r2,-16(fp)
   1063c:	10800817 	ldw	r2,32(r2)
   10640:	18800035 	stwio	r2,0(r3)
   10644:	e0bffa17 	ldw	r2,-24(fp)
   10648:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1064c:	e0bff917 	ldw	r2,-28(fp)
   10650:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10654:	e0fff517 	ldw	r3,-44(fp)
   10658:	e0bffd17 	ldw	r2,-12(fp)
   1065c:	18800426 	beq	r3,r2,10670 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10660:	e0fff517 	ldw	r3,-44(fp)
   10664:	e0bffd17 	ldw	r2,-12(fp)
   10668:	1885c83a 	sub	r2,r3,r2
   1066c:	00000606 	br	10688 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10670:	e0bfff17 	ldw	r2,-4(fp)
   10674:	1090000c 	andi	r2,r2,16384
   10678:	10000226 	beq	r2,zero,10684 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1067c:	00bffd44 	movi	r2,-11
   10680:	00000106 	br	10688 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10684:	00bffec4 	movi	r2,-5
}
   10688:	e037883a 	mov	sp,fp
   1068c:	dfc00117 	ldw	ra,4(sp)
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00204 	addi	sp,sp,8
   10698:	f800283a 	ret

0001069c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1069c:	defff304 	addi	sp,sp,-52
   106a0:	dfc00c15 	stw	ra,48(sp)
   106a4:	df000b15 	stw	fp,44(sp)
   106a8:	df000b04 	addi	fp,sp,44
   106ac:	e13ffc15 	stw	r4,-16(fp)
   106b0:	e17ffd15 	stw	r5,-12(fp)
   106b4:	e1bffe15 	stw	r6,-8(fp)
   106b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   106bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   106c0:	e0bffd17 	ldw	r2,-12(fp)
   106c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   106c8:	00003706 	br	107a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   106cc:	e0bffc17 	ldw	r2,-16(fp)
   106d0:	10800c17 	ldw	r2,48(r2)
   106d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   106d8:	e0bffc17 	ldw	r2,-16(fp)
   106dc:	10800d17 	ldw	r2,52(r2)
   106e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   106e4:	e0fff917 	ldw	r3,-28(fp)
   106e8:	e0bff517 	ldw	r2,-44(fp)
   106ec:	1880062e 	bgeu	r3,r2,10708 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   106f0:	e0fff517 	ldw	r3,-44(fp)
   106f4:	e0bff917 	ldw	r2,-28(fp)
   106f8:	1885c83a 	sub	r2,r3,r2
   106fc:	10bfffc4 	addi	r2,r2,-1
   10700:	e0bff615 	stw	r2,-40(fp)
   10704:	00000b06 	br	10734 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10708:	e0bff517 	ldw	r2,-44(fp)
   1070c:	10000526 	beq	r2,zero,10724 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10710:	00c20004 	movi	r3,2048
   10714:	e0bff917 	ldw	r2,-28(fp)
   10718:	1885c83a 	sub	r2,r3,r2
   1071c:	e0bff615 	stw	r2,-40(fp)
   10720:	00000406 	br	10734 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10724:	00c1ffc4 	movi	r3,2047
   10728:	e0bff917 	ldw	r2,-28(fp)
   1072c:	1885c83a 	sub	r2,r3,r2
   10730:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10734:	e0bff617 	ldw	r2,-40(fp)
   10738:	10001e26 	beq	r2,zero,107b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1073c:	e0fffe17 	ldw	r3,-8(fp)
   10740:	e0bff617 	ldw	r2,-40(fp)
   10744:	1880022e 	bgeu	r3,r2,10750 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10750:	e0bffc17 	ldw	r2,-16(fp)
   10754:	10c20e04 	addi	r3,r2,2104
   10758:	e0bff917 	ldw	r2,-28(fp)
   1075c:	1885883a 	add	r2,r3,r2
   10760:	e1bff617 	ldw	r6,-40(fp)
   10764:	e17ffd17 	ldw	r5,-12(fp)
   10768:	1009883a 	mov	r4,r2
   1076c:	0008ed40 	call	8ed4 <memcpy>
      ptr   += n;
   10770:	e0fffd17 	ldw	r3,-12(fp)
   10774:	e0bff617 	ldw	r2,-40(fp)
   10778:	1885883a 	add	r2,r3,r2
   1077c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10780:	e0fffe17 	ldw	r3,-8(fp)
   10784:	e0bff617 	ldw	r2,-40(fp)
   10788:	1885c83a 	sub	r2,r3,r2
   1078c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10790:	e0fff917 	ldw	r3,-28(fp)
   10794:	e0bff617 	ldw	r2,-40(fp)
   10798:	1885883a 	add	r2,r3,r2
   1079c:	10c1ffcc 	andi	r3,r2,2047
   107a0:	e0bffc17 	ldw	r2,-16(fp)
   107a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   107a8:	e0bffe17 	ldw	r2,-8(fp)
   107ac:	00bfc716 	blt	zero,r2,106cc <__alt_data_end+0xff0106cc>
   107b0:	00000106 	br	107b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   107b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107b8:	0005303a 	rdctl	r2,status
   107bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107c0:	e0fffb17 	ldw	r3,-20(fp)
   107c4:	00bfff84 	movi	r2,-2
   107c8:	1884703a 	and	r2,r3,r2
   107cc:	1001703a 	wrctl	status,r2
  
  return context;
   107d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   107d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   107d8:	e0bffc17 	ldw	r2,-16(fp)
   107dc:	10800817 	ldw	r2,32(r2)
   107e0:	10c00094 	ori	r3,r2,2
   107e4:	e0bffc17 	ldw	r2,-16(fp)
   107e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   107ec:	e0bffc17 	ldw	r2,-16(fp)
   107f0:	10800017 	ldw	r2,0(r2)
   107f4:	10800104 	addi	r2,r2,4
   107f8:	1007883a 	mov	r3,r2
   107fc:	e0bffc17 	ldw	r2,-16(fp)
   10800:	10800817 	ldw	r2,32(r2)
   10804:	18800035 	stwio	r2,0(r3)
   10808:	e0bffa17 	ldw	r2,-24(fp)
   1080c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10810:	e0bff817 	ldw	r2,-32(fp)
   10814:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10818:	e0bffe17 	ldw	r2,-8(fp)
   1081c:	0080100e 	bge	zero,r2,10860 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10820:	e0bfff17 	ldw	r2,-4(fp)
   10824:	1090000c 	andi	r2,r2,16384
   10828:	1000101e 	bne	r2,zero,1086c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1082c:	0001883a 	nop
   10830:	e0bffc17 	ldw	r2,-16(fp)
   10834:	10c00d17 	ldw	r3,52(r2)
   10838:	e0bff517 	ldw	r2,-44(fp)
   1083c:	1880051e 	bne	r3,r2,10854 <altera_avalon_jtag_uart_write+0x1b8>
   10840:	e0bffc17 	ldw	r2,-16(fp)
   10844:	10c00917 	ldw	r3,36(r2)
   10848:	e0bffc17 	ldw	r2,-16(fp)
   1084c:	10800117 	ldw	r2,4(r2)
   10850:	18bff736 	bltu	r3,r2,10830 <__alt_data_end+0xff010830>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10854:	e0bffc17 	ldw	r2,-16(fp)
   10858:	10800917 	ldw	r2,36(r2)
   1085c:	1000051e 	bne	r2,zero,10874 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10860:	e0bffe17 	ldw	r2,-8(fp)
   10864:	00bfd016 	blt	zero,r2,107a8 <__alt_data_end+0xff0107a8>
   10868:	00000306 	br	10878 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1086c:	0001883a 	nop
   10870:	00000106 	br	10878 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10874:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10878:	e0fffd17 	ldw	r3,-12(fp)
   1087c:	e0bff717 	ldw	r2,-36(fp)
   10880:	18800426 	beq	r3,r2,10894 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10884:	e0fffd17 	ldw	r3,-12(fp)
   10888:	e0bff717 	ldw	r2,-36(fp)
   1088c:	1885c83a 	sub	r2,r3,r2
   10890:	00000606 	br	108ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10894:	e0bfff17 	ldw	r2,-4(fp)
   10898:	1090000c 	andi	r2,r2,16384
   1089c:	10000226 	beq	r2,zero,108a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   108a0:	00bffd44 	movi	r2,-11
   108a4:	00000106 	br	108ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   108a8:	00bffec4 	movi	r2,-5
}
   108ac:	e037883a 	mov	sp,fp
   108b0:	dfc00117 	ldw	ra,4(sp)
   108b4:	df000017 	ldw	fp,0(sp)
   108b8:	dec00204 	addi	sp,sp,8
   108bc:	f800283a 	ret

000108c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   108c0:	defffa04 	addi	sp,sp,-24
   108c4:	dfc00515 	stw	ra,20(sp)
   108c8:	df000415 	stw	fp,16(sp)
   108cc:	df000404 	addi	fp,sp,16
   108d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   108d4:	0007883a 	mov	r3,zero
   108d8:	e0bfff17 	ldw	r2,-4(fp)
   108dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   108e0:	e0bfff17 	ldw	r2,-4(fp)
   108e4:	10800104 	addi	r2,r2,4
   108e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108ec:	0005303a 	rdctl	r2,status
   108f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108f4:	e0fffd17 	ldw	r3,-12(fp)
   108f8:	00bfff84 	movi	r2,-2
   108fc:	1884703a 	and	r2,r3,r2
   10900:	1001703a 	wrctl	status,r2
  
  return context;
   10904:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10908:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1090c:	00116140 	call	11614 <alt_tick>
   10910:	e0bffc17 	ldw	r2,-16(fp)
   10914:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10918:	e0bffe17 	ldw	r2,-8(fp)
   1091c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10920:	0001883a 	nop
   10924:	e037883a 	mov	sp,fp
   10928:	dfc00117 	ldw	ra,4(sp)
   1092c:	df000017 	ldw	fp,0(sp)
   10930:	dec00204 	addi	sp,sp,8
   10934:	f800283a 	ret

00010938 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10938:	defff804 	addi	sp,sp,-32
   1093c:	dfc00715 	stw	ra,28(sp)
   10940:	df000615 	stw	fp,24(sp)
   10944:	df000604 	addi	fp,sp,24
   10948:	e13ffc15 	stw	r4,-16(fp)
   1094c:	e17ffd15 	stw	r5,-12(fp)
   10950:	e1bffe15 	stw	r6,-8(fp)
   10954:	e1ffff15 	stw	r7,-4(fp)
   10958:	e0bfff17 	ldw	r2,-4(fp)
   1095c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10960:	d0a6e617 	ldw	r2,-25704(gp)
   10964:	1000021e 	bne	r2,zero,10970 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10968:	e0bffb17 	ldw	r2,-20(fp)
   1096c:	d0a6e615 	stw	r2,-25704(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	10800104 	addi	r2,r2,4
   10978:	00c001c4 	movi	r3,7
   1097c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10980:	d8000015 	stw	zero,0(sp)
   10984:	e1fffc17 	ldw	r7,-16(fp)
   10988:	01800074 	movhi	r6,1
   1098c:	31823004 	addi	r6,r6,2240
   10990:	e17ffe17 	ldw	r5,-8(fp)
   10994:	e13ffd17 	ldw	r4,-12(fp)
   10998:	0010f440 	call	10f44 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1099c:	0001883a 	nop
   109a0:	e037883a 	mov	sp,fp
   109a4:	dfc00117 	ldw	ra,4(sp)
   109a8:	df000017 	ldw	fp,0(sp)
   109ac:	dec00204 	addi	sp,sp,8
   109b0:	f800283a 	ret

000109b4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   109b4:	defffe04 	addi	sp,sp,-8
   109b8:	df000115 	stw	fp,4(sp)
   109bc:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   109c0:	d0a6e317 	ldw	r2,-25716(gp)
   109c4:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   109c8:	d0a6e417 	ldw	r2,-25712(gp)
   109cc:	1000021e 	bne	r2,zero,109d8 <alt_timestamp_start+0x24>
  {
    return -1;
   109d0:	00bfffc4 	movi	r2,-1
   109d4:	00001106 	br	10a1c <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   109d8:	e0bfff17 	ldw	r2,-4(fp)
   109dc:	10800104 	addi	r2,r2,4
   109e0:	00c00204 	movi	r3,8
   109e4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   109e8:	e0bfff17 	ldw	r2,-4(fp)
   109ec:	10800204 	addi	r2,r2,8
   109f0:	00ffffd4 	movui	r3,65535
   109f4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   109f8:	e0bfff17 	ldw	r2,-4(fp)
   109fc:	10800304 	addi	r2,r2,12
   10a00:	00ffffd4 	movui	r3,65535
   10a04:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   10a08:	e0bfff17 	ldw	r2,-4(fp)
   10a0c:	10800104 	addi	r2,r2,4
   10a10:	00c00104 	movi	r3,4
   10a14:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   10a18:	0005883a 	mov	r2,zero
}
   10a1c:	e037883a 	mov	sp,fp
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00104 	addi	sp,sp,4
   10a28:	f800283a 	ret

00010a2c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   10a2c:	defffc04 	addi	sp,sp,-16
   10a30:	df000315 	stw	fp,12(sp)
   10a34:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10a38:	d0a6e317 	ldw	r2,-25716(gp)
   10a3c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   10a40:	d0a6e417 	ldw	r2,-25712(gp)
   10a44:	1000021e 	bne	r2,zero,10a50 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10a48:	00bfffc4 	movi	r2,-1
   10a4c:	00001306 	br	10a9c <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   10a50:	e0bffd17 	ldw	r2,-12(fp)
   10a54:	10800404 	addi	r2,r2,16
   10a58:	0007883a 	mov	r3,zero
   10a5c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   10a60:	e0bffd17 	ldw	r2,-12(fp)
   10a64:	10800404 	addi	r2,r2,16
   10a68:	10800037 	ldwio	r2,0(r2)
   10a6c:	10bfffcc 	andi	r2,r2,65535
   10a70:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10a74:	e0bffd17 	ldw	r2,-12(fp)
   10a78:	10800504 	addi	r2,r2,20
   10a7c:	10800037 	ldwio	r2,0(r2)
   10a80:	10bfffcc 	andi	r2,r2,65535
   10a84:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   10a88:	e0bfff17 	ldw	r2,-4(fp)
   10a8c:	1006943a 	slli	r3,r2,16
   10a90:	e0bffe17 	ldw	r2,-8(fp)
   10a94:	1884b03a 	or	r2,r3,r2
   10a98:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10a9c:	e037883a 	mov	sp,fp
   10aa0:	df000017 	ldw	fp,0(sp)
   10aa4:	dec00104 	addi	sp,sp,4
   10aa8:	f800283a 	ret

00010aac <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10aac:	deffff04 	addi	sp,sp,-4
   10ab0:	df000015 	stw	fp,0(sp)
   10ab4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   10ab8:	d0a6e417 	ldw	r2,-25712(gp)
}
   10abc:	e037883a 	mov	sp,fp
   10ac0:	df000017 	ldw	fp,0(sp)
   10ac4:	dec00104 	addi	sp,sp,4
   10ac8:	f800283a 	ret

00010acc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10acc:	defff504 	addi	sp,sp,-44
   10ad0:	df000a15 	stw	fp,40(sp)
   10ad4:	df000a04 	addi	fp,sp,40
   10ad8:	e13ffc15 	stw	r4,-16(fp)
   10adc:	e17ffd15 	stw	r5,-12(fp)
   10ae0:	e1bffe15 	stw	r6,-8(fp)
   10ae4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10ae8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10aec:	d0a6e617 	ldw	r2,-25704(gp)
  
  if (alt_ticks_per_second ())
   10af0:	10003c26 	beq	r2,zero,10be4 <alt_alarm_start+0x118>
  {
    if (alarm)
   10af4:	e0bffc17 	ldw	r2,-16(fp)
   10af8:	10003826 	beq	r2,zero,10bdc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10afc:	e0bffc17 	ldw	r2,-16(fp)
   10b00:	e0fffe17 	ldw	r3,-8(fp)
   10b04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10b08:	e0bffc17 	ldw	r2,-16(fp)
   10b0c:	e0ffff17 	ldw	r3,-4(fp)
   10b10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b14:	0005303a 	rdctl	r2,status
   10b18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b1c:	e0fff917 	ldw	r3,-28(fp)
   10b20:	00bfff84 	movi	r2,-2
   10b24:	1884703a 	and	r2,r3,r2
   10b28:	1001703a 	wrctl	status,r2
  
  return context;
   10b2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10b30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10b34:	d0a6e717 	ldw	r2,-25700(gp)
      
      current_nticks = alt_nticks();
   10b38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10b3c:	e0fffd17 	ldw	r3,-12(fp)
   10b40:	e0bff617 	ldw	r2,-40(fp)
   10b44:	1885883a 	add	r2,r3,r2
   10b48:	10c00044 	addi	r3,r2,1
   10b4c:	e0bffc17 	ldw	r2,-16(fp)
   10b50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10b54:	e0bffc17 	ldw	r2,-16(fp)
   10b58:	10c00217 	ldw	r3,8(r2)
   10b5c:	e0bff617 	ldw	r2,-40(fp)
   10b60:	1880042e 	bgeu	r3,r2,10b74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10b64:	e0bffc17 	ldw	r2,-16(fp)
   10b68:	00c00044 	movi	r3,1
   10b6c:	10c00405 	stb	r3,16(r2)
   10b70:	00000206 	br	10b7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10b74:	e0bffc17 	ldw	r2,-16(fp)
   10b78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10b7c:	e0bffc17 	ldw	r2,-16(fp)
   10b80:	d0e01004 	addi	r3,gp,-32704
   10b84:	e0fffa15 	stw	r3,-24(fp)
   10b88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b8c:	e0bffb17 	ldw	r2,-20(fp)
   10b90:	e0fffa17 	ldw	r3,-24(fp)
   10b94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10b98:	e0bffa17 	ldw	r2,-24(fp)
   10b9c:	10c00017 	ldw	r3,0(r2)
   10ba0:	e0bffb17 	ldw	r2,-20(fp)
   10ba4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10ba8:	e0bffa17 	ldw	r2,-24(fp)
   10bac:	10800017 	ldw	r2,0(r2)
   10bb0:	e0fffb17 	ldw	r3,-20(fp)
   10bb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10bb8:	e0bffa17 	ldw	r2,-24(fp)
   10bbc:	e0fffb17 	ldw	r3,-20(fp)
   10bc0:	10c00015 	stw	r3,0(r2)
   10bc4:	e0bff817 	ldw	r2,-32(fp)
   10bc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bcc:	e0bff717 	ldw	r2,-36(fp)
   10bd0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10bd4:	0005883a 	mov	r2,zero
   10bd8:	00000306 	br	10be8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10bdc:	00bffa84 	movi	r2,-22
   10be0:	00000106 	br	10be8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10be4:	00bfde84 	movi	r2,-134
  }
}
   10be8:	e037883a 	mov	sp,fp
   10bec:	df000017 	ldw	fp,0(sp)
   10bf0:	dec00104 	addi	sp,sp,4
   10bf4:	f800283a 	ret

00010bf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10bf8:	defffa04 	addi	sp,sp,-24
   10bfc:	dfc00515 	stw	ra,20(sp)
   10c00:	df000415 	stw	fp,16(sp)
   10c04:	df000404 	addi	fp,sp,16
   10c08:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10c0c:	008000c4 	movi	r2,3
   10c10:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10c14:	e0fffd17 	ldw	r3,-12(fp)
   10c18:	008003f4 	movhi	r2,15
   10c1c:	10909004 	addi	r2,r2,16960
   10c20:	1885383a 	mul	r2,r3,r2
   10c24:	100b883a 	mov	r5,r2
   10c28:	0100bef4 	movhi	r4,763
   10c2c:	213c2004 	addi	r4,r4,-3968
   10c30:	000d5b00 	call	d5b0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c34:	100b883a 	mov	r5,r2
   10c38:	01200034 	movhi	r4,32768
   10c3c:	213fffc4 	addi	r4,r4,-1
   10c40:	000d5b00 	call	d5b0 <__udivsi3>
   10c44:	100b883a 	mov	r5,r2
   10c48:	e13fff17 	ldw	r4,-4(fp)
   10c4c:	000d5b00 	call	d5b0 <__udivsi3>
   10c50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10c54:	e0bffe17 	ldw	r2,-8(fp)
   10c58:	10002a26 	beq	r2,zero,10d04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10c5c:	e03ffc15 	stw	zero,-16(fp)
   10c60:	00001706 	br	10cc0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10c64:	00a00034 	movhi	r2,32768
   10c68:	10bfffc4 	addi	r2,r2,-1
   10c6c:	10bfffc4 	addi	r2,r2,-1
   10c70:	103ffe1e 	bne	r2,zero,10c6c <__alt_data_end+0xff010c6c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10c74:	e0fffd17 	ldw	r3,-12(fp)
   10c78:	008003f4 	movhi	r2,15
   10c7c:	10909004 	addi	r2,r2,16960
   10c80:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10c84:	100b883a 	mov	r5,r2
   10c88:	0100bef4 	movhi	r4,763
   10c8c:	213c2004 	addi	r4,r4,-3968
   10c90:	000d5b00 	call	d5b0 <__udivsi3>
   10c94:	100b883a 	mov	r5,r2
   10c98:	01200034 	movhi	r4,32768
   10c9c:	213fffc4 	addi	r4,r4,-1
   10ca0:	000d5b00 	call	d5b0 <__udivsi3>
   10ca4:	1007883a 	mov	r3,r2
   10ca8:	e0bfff17 	ldw	r2,-4(fp)
   10cac:	10c5c83a 	sub	r2,r2,r3
   10cb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10cb4:	e0bffc17 	ldw	r2,-16(fp)
   10cb8:	10800044 	addi	r2,r2,1
   10cbc:	e0bffc15 	stw	r2,-16(fp)
   10cc0:	e0fffc17 	ldw	r3,-16(fp)
   10cc4:	e0bffe17 	ldw	r2,-8(fp)
   10cc8:	18bfe616 	blt	r3,r2,10c64 <__alt_data_end+0xff010c64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10ccc:	e0fffd17 	ldw	r3,-12(fp)
   10cd0:	008003f4 	movhi	r2,15
   10cd4:	10909004 	addi	r2,r2,16960
   10cd8:	1885383a 	mul	r2,r3,r2
   10cdc:	100b883a 	mov	r5,r2
   10ce0:	0100bef4 	movhi	r4,763
   10ce4:	213c2004 	addi	r4,r4,-3968
   10ce8:	000d5b00 	call	d5b0 <__udivsi3>
   10cec:	1007883a 	mov	r3,r2
   10cf0:	e0bfff17 	ldw	r2,-4(fp)
   10cf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10cf8:	10bfffc4 	addi	r2,r2,-1
   10cfc:	103ffe1e 	bne	r2,zero,10cf8 <__alt_data_end+0xff010cf8>
   10d00:	00000d06 	br	10d38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10d04:	e0fffd17 	ldw	r3,-12(fp)
   10d08:	008003f4 	movhi	r2,15
   10d0c:	10909004 	addi	r2,r2,16960
   10d10:	1885383a 	mul	r2,r3,r2
   10d14:	100b883a 	mov	r5,r2
   10d18:	0100bef4 	movhi	r4,763
   10d1c:	213c2004 	addi	r4,r4,-3968
   10d20:	000d5b00 	call	d5b0 <__udivsi3>
   10d24:	1007883a 	mov	r3,r2
   10d28:	e0bfff17 	ldw	r2,-4(fp)
   10d2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10d30:	10bfffc4 	addi	r2,r2,-1
   10d34:	00bffe16 	blt	zero,r2,10d30 <__alt_data_end+0xff010d30>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10d38:	0005883a 	mov	r2,zero
}
   10d3c:	e037883a 	mov	sp,fp
   10d40:	dfc00117 	ldw	ra,4(sp)
   10d44:	df000017 	ldw	fp,0(sp)
   10d48:	dec00204 	addi	sp,sp,8
   10d4c:	f800283a 	ret

00010d50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10d50:	deffff04 	addi	sp,sp,-4
   10d54:	df000015 	stw	fp,0(sp)
   10d58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10d5c:	0001883a 	nop
   10d60:	e037883a 	mov	sp,fp
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00104 	addi	sp,sp,4
   10d6c:	f800283a 	ret

00010d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d70:	defffe04 	addi	sp,sp,-8
   10d74:	dfc00115 	stw	ra,4(sp)
   10d78:	df000015 	stw	fp,0(sp)
   10d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10d80:	d0a00d17 	ldw	r2,-32716(gp)
   10d84:	10000326 	beq	r2,zero,10d94 <alt_get_errno+0x24>
   10d88:	d0a00d17 	ldw	r2,-32716(gp)
   10d8c:	103ee83a 	callr	r2
   10d90:	00000106 	br	10d98 <alt_get_errno+0x28>
   10d94:	d0a6dc04 	addi	r2,gp,-25744
}
   10d98:	e037883a 	mov	sp,fp
   10d9c:	dfc00117 	ldw	ra,4(sp)
   10da0:	df000017 	ldw	fp,0(sp)
   10da4:	dec00204 	addi	sp,sp,8
   10da8:	f800283a 	ret

00010dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10dac:	defffa04 	addi	sp,sp,-24
   10db0:	dfc00515 	stw	ra,20(sp)
   10db4:	df000415 	stw	fp,16(sp)
   10db8:	df000404 	addi	fp,sp,16
   10dbc:	e13ffe15 	stw	r4,-8(fp)
   10dc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10dc4:	e0bffe17 	ldw	r2,-8(fp)
   10dc8:	10000326 	beq	r2,zero,10dd8 <alt_dev_llist_insert+0x2c>
   10dcc:	e0bffe17 	ldw	r2,-8(fp)
   10dd0:	10800217 	ldw	r2,8(r2)
   10dd4:	1000061e 	bne	r2,zero,10df0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10dd8:	0010d700 	call	10d70 <alt_get_errno>
   10ddc:	1007883a 	mov	r3,r2
   10de0:	00800584 	movi	r2,22
   10de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10de8:	00bffa84 	movi	r2,-22
   10dec:	00001306 	br	10e3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	e0ffff17 	ldw	r3,-4(fp)
   10df8:	e0fffc15 	stw	r3,-16(fp)
   10dfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10e00:	e0bffd17 	ldw	r2,-12(fp)
   10e04:	e0fffc17 	ldw	r3,-16(fp)
   10e08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10e0c:	e0bffc17 	ldw	r2,-16(fp)
   10e10:	10c00017 	ldw	r3,0(r2)
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	10800017 	ldw	r2,0(r2)
   10e24:	e0fffd17 	ldw	r3,-12(fp)
   10e28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10e2c:	e0bffc17 	ldw	r2,-16(fp)
   10e30:	e0fffd17 	ldw	r3,-12(fp)
   10e34:	10c00015 	stw	r3,0(r2)

  return 0;  
   10e38:	0005883a 	mov	r2,zero
}
   10e3c:	e037883a 	mov	sp,fp
   10e40:	dfc00117 	ldw	ra,4(sp)
   10e44:	df000017 	ldw	fp,0(sp)
   10e48:	dec00204 	addi	sp,sp,8
   10e4c:	f800283a 	ret

00010e50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10e50:	defffd04 	addi	sp,sp,-12
   10e54:	dfc00215 	stw	ra,8(sp)
   10e58:	df000115 	stw	fp,4(sp)
   10e5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10e60:	00800074 	movhi	r2,1
   10e64:	10878e04 	addi	r2,r2,7736
   10e68:	e0bfff15 	stw	r2,-4(fp)
   10e6c:	00000606 	br	10e88 <_do_ctors+0x38>
        (*ctor) (); 
   10e70:	e0bfff17 	ldw	r2,-4(fp)
   10e74:	10800017 	ldw	r2,0(r2)
   10e78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10e7c:	e0bfff17 	ldw	r2,-4(fp)
   10e80:	10bfff04 	addi	r2,r2,-4
   10e84:	e0bfff15 	stw	r2,-4(fp)
   10e88:	e0ffff17 	ldw	r3,-4(fp)
   10e8c:	00800074 	movhi	r2,1
   10e90:	10878f04 	addi	r2,r2,7740
   10e94:	18bff62e 	bgeu	r3,r2,10e70 <__alt_data_end+0xff010e70>
        (*ctor) (); 
}
   10e98:	0001883a 	nop
   10e9c:	e037883a 	mov	sp,fp
   10ea0:	dfc00117 	ldw	ra,4(sp)
   10ea4:	df000017 	ldw	fp,0(sp)
   10ea8:	dec00204 	addi	sp,sp,8
   10eac:	f800283a 	ret

00010eb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10eb0:	defffd04 	addi	sp,sp,-12
   10eb4:	dfc00215 	stw	ra,8(sp)
   10eb8:	df000115 	stw	fp,4(sp)
   10ebc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10ec0:	00800074 	movhi	r2,1
   10ec4:	10878e04 	addi	r2,r2,7736
   10ec8:	e0bfff15 	stw	r2,-4(fp)
   10ecc:	00000606 	br	10ee8 <_do_dtors+0x38>
        (*dtor) (); 
   10ed0:	e0bfff17 	ldw	r2,-4(fp)
   10ed4:	10800017 	ldw	r2,0(r2)
   10ed8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10edc:	e0bfff17 	ldw	r2,-4(fp)
   10ee0:	10bfff04 	addi	r2,r2,-4
   10ee4:	e0bfff15 	stw	r2,-4(fp)
   10ee8:	e0ffff17 	ldw	r3,-4(fp)
   10eec:	00800074 	movhi	r2,1
   10ef0:	10878f04 	addi	r2,r2,7740
   10ef4:	18bff62e 	bgeu	r3,r2,10ed0 <__alt_data_end+0xff010ed0>
        (*dtor) (); 
}
   10ef8:	0001883a 	nop
   10efc:	e037883a 	mov	sp,fp
   10f00:	dfc00117 	ldw	ra,4(sp)
   10f04:	df000017 	ldw	fp,0(sp)
   10f08:	dec00204 	addi	sp,sp,8
   10f0c:	f800283a 	ret

00010f10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10f10:	defffe04 	addi	sp,sp,-8
   10f14:	dfc00115 	stw	ra,4(sp)
   10f18:	df000015 	stw	fp,0(sp)
   10f1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10f20:	01440004 	movi	r5,4096
   10f24:	0009883a 	mov	r4,zero
   10f28:	001197c0 	call	1197c <alt_icache_flush>
#endif
}
   10f2c:	0001883a 	nop
   10f30:	e037883a 	mov	sp,fp
   10f34:	dfc00117 	ldw	ra,4(sp)
   10f38:	df000017 	ldw	fp,0(sp)
   10f3c:	dec00204 	addi	sp,sp,8
   10f40:	f800283a 	ret

00010f44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10f44:	defff904 	addi	sp,sp,-28
   10f48:	dfc00615 	stw	ra,24(sp)
   10f4c:	df000515 	stw	fp,20(sp)
   10f50:	df000504 	addi	fp,sp,20
   10f54:	e13ffc15 	stw	r4,-16(fp)
   10f58:	e17ffd15 	stw	r5,-12(fp)
   10f5c:	e1bffe15 	stw	r6,-8(fp)
   10f60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10f64:	e0800217 	ldw	r2,8(fp)
   10f68:	d8800015 	stw	r2,0(sp)
   10f6c:	e1ffff17 	ldw	r7,-4(fp)
   10f70:	e1bffe17 	ldw	r6,-8(fp)
   10f74:	e17ffd17 	ldw	r5,-12(fp)
   10f78:	e13ffc17 	ldw	r4,-16(fp)
   10f7c:	00110f40 	call	110f4 <alt_iic_isr_register>
}  
   10f80:	e037883a 	mov	sp,fp
   10f84:	dfc00117 	ldw	ra,4(sp)
   10f88:	df000017 	ldw	fp,0(sp)
   10f8c:	dec00204 	addi	sp,sp,8
   10f90:	f800283a 	ret

00010f94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10f94:	defff904 	addi	sp,sp,-28
   10f98:	df000615 	stw	fp,24(sp)
   10f9c:	df000604 	addi	fp,sp,24
   10fa0:	e13ffe15 	stw	r4,-8(fp)
   10fa4:	e17fff15 	stw	r5,-4(fp)
   10fa8:	e0bfff17 	ldw	r2,-4(fp)
   10fac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fb0:	0005303a 	rdctl	r2,status
   10fb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fb8:	e0fffb17 	ldw	r3,-20(fp)
   10fbc:	00bfff84 	movi	r2,-2
   10fc0:	1884703a 	and	r2,r3,r2
   10fc4:	1001703a 	wrctl	status,r2
  
  return context;
   10fc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10fcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10fd0:	00c00044 	movi	r3,1
   10fd4:	e0bffa17 	ldw	r2,-24(fp)
   10fd8:	1884983a 	sll	r2,r3,r2
   10fdc:	1007883a 	mov	r3,r2
   10fe0:	d0a6e517 	ldw	r2,-25708(gp)
   10fe4:	1884b03a 	or	r2,r3,r2
   10fe8:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10fec:	d0a6e517 	ldw	r2,-25708(gp)
   10ff0:	100170fa 	wrctl	ienable,r2
   10ff4:	e0bffc17 	ldw	r2,-16(fp)
   10ff8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ffc:	e0bffd17 	ldw	r2,-12(fp)
   11000:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11004:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11008:	0001883a 	nop
}
   1100c:	e037883a 	mov	sp,fp
   11010:	df000017 	ldw	fp,0(sp)
   11014:	dec00104 	addi	sp,sp,4
   11018:	f800283a 	ret

0001101c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1101c:	defff904 	addi	sp,sp,-28
   11020:	df000615 	stw	fp,24(sp)
   11024:	df000604 	addi	fp,sp,24
   11028:	e13ffe15 	stw	r4,-8(fp)
   1102c:	e17fff15 	stw	r5,-4(fp)
   11030:	e0bfff17 	ldw	r2,-4(fp)
   11034:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11038:	0005303a 	rdctl	r2,status
   1103c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11040:	e0fffb17 	ldw	r3,-20(fp)
   11044:	00bfff84 	movi	r2,-2
   11048:	1884703a 	and	r2,r3,r2
   1104c:	1001703a 	wrctl	status,r2
  
  return context;
   11050:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11054:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11058:	00c00044 	movi	r3,1
   1105c:	e0bffa17 	ldw	r2,-24(fp)
   11060:	1884983a 	sll	r2,r3,r2
   11064:	0084303a 	nor	r2,zero,r2
   11068:	1007883a 	mov	r3,r2
   1106c:	d0a6e517 	ldw	r2,-25708(gp)
   11070:	1884703a 	and	r2,r3,r2
   11074:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11078:	d0a6e517 	ldw	r2,-25708(gp)
   1107c:	100170fa 	wrctl	ienable,r2
   11080:	e0bffc17 	ldw	r2,-16(fp)
   11084:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11088:	e0bffd17 	ldw	r2,-12(fp)
   1108c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11090:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11094:	0001883a 	nop
}
   11098:	e037883a 	mov	sp,fp
   1109c:	df000017 	ldw	fp,0(sp)
   110a0:	dec00104 	addi	sp,sp,4
   110a4:	f800283a 	ret

000110a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   110a8:	defffc04 	addi	sp,sp,-16
   110ac:	df000315 	stw	fp,12(sp)
   110b0:	df000304 	addi	fp,sp,12
   110b4:	e13ffe15 	stw	r4,-8(fp)
   110b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   110bc:	000530fa 	rdctl	r2,ienable
   110c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   110c4:	00c00044 	movi	r3,1
   110c8:	e0bfff17 	ldw	r2,-4(fp)
   110cc:	1884983a 	sll	r2,r3,r2
   110d0:	1007883a 	mov	r3,r2
   110d4:	e0bffd17 	ldw	r2,-12(fp)
   110d8:	1884703a 	and	r2,r3,r2
   110dc:	1004c03a 	cmpne	r2,r2,zero
   110e0:	10803fcc 	andi	r2,r2,255
}
   110e4:	e037883a 	mov	sp,fp
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00104 	addi	sp,sp,4
   110f0:	f800283a 	ret

000110f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   110f4:	defff504 	addi	sp,sp,-44
   110f8:	dfc00a15 	stw	ra,40(sp)
   110fc:	df000915 	stw	fp,36(sp)
   11100:	df000904 	addi	fp,sp,36
   11104:	e13ffc15 	stw	r4,-16(fp)
   11108:	e17ffd15 	stw	r5,-12(fp)
   1110c:	e1bffe15 	stw	r6,-8(fp)
   11110:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11114:	00bffa84 	movi	r2,-22
   11118:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1111c:	e0bffd17 	ldw	r2,-12(fp)
   11120:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11124:	e0bff817 	ldw	r2,-32(fp)
   11128:	10800808 	cmpgei	r2,r2,32
   1112c:	1000271e 	bne	r2,zero,111cc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11130:	0005303a 	rdctl	r2,status
   11134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11138:	e0fffb17 	ldw	r3,-20(fp)
   1113c:	00bfff84 	movi	r2,-2
   11140:	1884703a 	and	r2,r3,r2
   11144:	1001703a 	wrctl	status,r2
  
  return context;
   11148:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1114c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11150:	00800074 	movhi	r2,1
   11154:	10971304 	addi	r2,r2,23628
   11158:	e0fff817 	ldw	r3,-32(fp)
   1115c:	180690fa 	slli	r3,r3,3
   11160:	10c5883a 	add	r2,r2,r3
   11164:	e0fffe17 	ldw	r3,-8(fp)
   11168:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1116c:	00800074 	movhi	r2,1
   11170:	10971304 	addi	r2,r2,23628
   11174:	e0fff817 	ldw	r3,-32(fp)
   11178:	180690fa 	slli	r3,r3,3
   1117c:	10c5883a 	add	r2,r2,r3
   11180:	10800104 	addi	r2,r2,4
   11184:	e0ffff17 	ldw	r3,-4(fp)
   11188:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1118c:	e0bffe17 	ldw	r2,-8(fp)
   11190:	10000526 	beq	r2,zero,111a8 <alt_iic_isr_register+0xb4>
   11194:	e0bff817 	ldw	r2,-32(fp)
   11198:	100b883a 	mov	r5,r2
   1119c:	e13ffc17 	ldw	r4,-16(fp)
   111a0:	0010f940 	call	10f94 <alt_ic_irq_enable>
   111a4:	00000406 	br	111b8 <alt_iic_isr_register+0xc4>
   111a8:	e0bff817 	ldw	r2,-32(fp)
   111ac:	100b883a 	mov	r5,r2
   111b0:	e13ffc17 	ldw	r4,-16(fp)
   111b4:	001101c0 	call	1101c <alt_ic_irq_disable>
   111b8:	e0bff715 	stw	r2,-36(fp)
   111bc:	e0bffa17 	ldw	r2,-24(fp)
   111c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c4:	e0bff917 	ldw	r2,-28(fp)
   111c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   111cc:	e0bff717 	ldw	r2,-36(fp)
}
   111d0:	e037883a 	mov	sp,fp
   111d4:	dfc00117 	ldw	ra,4(sp)
   111d8:	df000017 	ldw	fp,0(sp)
   111dc:	dec00204 	addi	sp,sp,8
   111e0:	f800283a 	ret

000111e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   111e4:	defff904 	addi	sp,sp,-28
   111e8:	dfc00615 	stw	ra,24(sp)
   111ec:	df000515 	stw	fp,20(sp)
   111f0:	df000504 	addi	fp,sp,20
   111f4:	e13ffc15 	stw	r4,-16(fp)
   111f8:	e17ffd15 	stw	r5,-12(fp)
   111fc:	e1bffe15 	stw	r6,-8(fp)
   11200:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11204:	e1bfff17 	ldw	r6,-4(fp)
   11208:	e17ffe17 	ldw	r5,-8(fp)
   1120c:	e13ffd17 	ldw	r4,-12(fp)
   11210:	00114240 	call	11424 <open>
   11214:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11218:	e0bffb17 	ldw	r2,-20(fp)
   1121c:	10001c16 	blt	r2,zero,11290 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11220:	00800074 	movhi	r2,1
   11224:	108ba804 	addi	r2,r2,11936
   11228:	e0fffb17 	ldw	r3,-20(fp)
   1122c:	18c00324 	muli	r3,r3,12
   11230:	10c5883a 	add	r2,r2,r3
   11234:	10c00017 	ldw	r3,0(r2)
   11238:	e0bffc17 	ldw	r2,-16(fp)
   1123c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11240:	00800074 	movhi	r2,1
   11244:	108ba804 	addi	r2,r2,11936
   11248:	e0fffb17 	ldw	r3,-20(fp)
   1124c:	18c00324 	muli	r3,r3,12
   11250:	10c5883a 	add	r2,r2,r3
   11254:	10800104 	addi	r2,r2,4
   11258:	10c00017 	ldw	r3,0(r2)
   1125c:	e0bffc17 	ldw	r2,-16(fp)
   11260:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11264:	00800074 	movhi	r2,1
   11268:	108ba804 	addi	r2,r2,11936
   1126c:	e0fffb17 	ldw	r3,-20(fp)
   11270:	18c00324 	muli	r3,r3,12
   11274:	10c5883a 	add	r2,r2,r3
   11278:	10800204 	addi	r2,r2,8
   1127c:	10c00017 	ldw	r3,0(r2)
   11280:	e0bffc17 	ldw	r2,-16(fp)
   11284:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11288:	e13ffb17 	ldw	r4,-20(fp)
   1128c:	000faf80 	call	faf8 <alt_release_fd>
  }
} 
   11290:	0001883a 	nop
   11294:	e037883a 	mov	sp,fp
   11298:	dfc00117 	ldw	ra,4(sp)
   1129c:	df000017 	ldw	fp,0(sp)
   112a0:	dec00204 	addi	sp,sp,8
   112a4:	f800283a 	ret

000112a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   112a8:	defffb04 	addi	sp,sp,-20
   112ac:	dfc00415 	stw	ra,16(sp)
   112b0:	df000315 	stw	fp,12(sp)
   112b4:	df000304 	addi	fp,sp,12
   112b8:	e13ffd15 	stw	r4,-12(fp)
   112bc:	e17ffe15 	stw	r5,-8(fp)
   112c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   112c4:	01c07fc4 	movi	r7,511
   112c8:	01800044 	movi	r6,1
   112cc:	e17ffd17 	ldw	r5,-12(fp)
   112d0:	01000074 	movhi	r4,1
   112d4:	210bab04 	addi	r4,r4,11948
   112d8:	00111e40 	call	111e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   112dc:	01c07fc4 	movi	r7,511
   112e0:	000d883a 	mov	r6,zero
   112e4:	e17ffe17 	ldw	r5,-8(fp)
   112e8:	01000074 	movhi	r4,1
   112ec:	210ba804 	addi	r4,r4,11936
   112f0:	00111e40 	call	111e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   112f4:	01c07fc4 	movi	r7,511
   112f8:	01800044 	movi	r6,1
   112fc:	e17fff17 	ldw	r5,-4(fp)
   11300:	01000074 	movhi	r4,1
   11304:	210bae04 	addi	r4,r4,11960
   11308:	00111e40 	call	111e4 <alt_open_fd>
}  
   1130c:	0001883a 	nop
   11310:	e037883a 	mov	sp,fp
   11314:	dfc00117 	ldw	ra,4(sp)
   11318:	df000017 	ldw	fp,0(sp)
   1131c:	dec00204 	addi	sp,sp,8
   11320:	f800283a 	ret

00011324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11324:	defffe04 	addi	sp,sp,-8
   11328:	dfc00115 	stw	ra,4(sp)
   1132c:	df000015 	stw	fp,0(sp)
   11330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11334:	d0a00d17 	ldw	r2,-32716(gp)
   11338:	10000326 	beq	r2,zero,11348 <alt_get_errno+0x24>
   1133c:	d0a00d17 	ldw	r2,-32716(gp)
   11340:	103ee83a 	callr	r2
   11344:	00000106 	br	1134c <alt_get_errno+0x28>
   11348:	d0a6dc04 	addi	r2,gp,-25744
}
   1134c:	e037883a 	mov	sp,fp
   11350:	dfc00117 	ldw	ra,4(sp)
   11354:	df000017 	ldw	fp,0(sp)
   11358:	dec00204 	addi	sp,sp,8
   1135c:	f800283a 	ret

00011360 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11360:	defffd04 	addi	sp,sp,-12
   11364:	df000215 	stw	fp,8(sp)
   11368:	df000204 	addi	fp,sp,8
   1136c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11370:	e0bfff17 	ldw	r2,-4(fp)
   11374:	10800217 	ldw	r2,8(r2)
   11378:	10d00034 	orhi	r3,r2,16384
   1137c:	e0bfff17 	ldw	r2,-4(fp)
   11380:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11384:	e03ffe15 	stw	zero,-8(fp)
   11388:	00001d06 	br	11400 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1138c:	00800074 	movhi	r2,1
   11390:	108ba804 	addi	r2,r2,11936
   11394:	e0fffe17 	ldw	r3,-8(fp)
   11398:	18c00324 	muli	r3,r3,12
   1139c:	10c5883a 	add	r2,r2,r3
   113a0:	10c00017 	ldw	r3,0(r2)
   113a4:	e0bfff17 	ldw	r2,-4(fp)
   113a8:	10800017 	ldw	r2,0(r2)
   113ac:	1880111e 	bne	r3,r2,113f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   113b0:	00800074 	movhi	r2,1
   113b4:	108ba804 	addi	r2,r2,11936
   113b8:	e0fffe17 	ldw	r3,-8(fp)
   113bc:	18c00324 	muli	r3,r3,12
   113c0:	10c5883a 	add	r2,r2,r3
   113c4:	10800204 	addi	r2,r2,8
   113c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   113cc:	1000090e 	bge	r2,zero,113f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   113d0:	e0bffe17 	ldw	r2,-8(fp)
   113d4:	10c00324 	muli	r3,r2,12
   113d8:	00800074 	movhi	r2,1
   113dc:	108ba804 	addi	r2,r2,11936
   113e0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   113e4:	e0bfff17 	ldw	r2,-4(fp)
   113e8:	18800226 	beq	r3,r2,113f4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   113ec:	00bffcc4 	movi	r2,-13
   113f0:	00000806 	br	11414 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   113f4:	e0bffe17 	ldw	r2,-8(fp)
   113f8:	10800044 	addi	r2,r2,1
   113fc:	e0bffe15 	stw	r2,-8(fp)
   11400:	d0a00c17 	ldw	r2,-32720(gp)
   11404:	1007883a 	mov	r3,r2
   11408:	e0bffe17 	ldw	r2,-8(fp)
   1140c:	18bfdf2e 	bgeu	r3,r2,1138c <__alt_data_end+0xff01138c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11410:	0005883a 	mov	r2,zero
}
   11414:	e037883a 	mov	sp,fp
   11418:	df000017 	ldw	fp,0(sp)
   1141c:	dec00104 	addi	sp,sp,4
   11420:	f800283a 	ret

00011424 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11424:	defff604 	addi	sp,sp,-40
   11428:	dfc00915 	stw	ra,36(sp)
   1142c:	df000815 	stw	fp,32(sp)
   11430:	df000804 	addi	fp,sp,32
   11434:	e13ffd15 	stw	r4,-12(fp)
   11438:	e17ffe15 	stw	r5,-8(fp)
   1143c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11440:	00bfffc4 	movi	r2,-1
   11444:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11448:	00bffb44 	movi	r2,-19
   1144c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11450:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11454:	d1600a04 	addi	r5,gp,-32728
   11458:	e13ffd17 	ldw	r4,-12(fp)
   1145c:	00117400 	call	11740 <alt_find_dev>
   11460:	e0bff815 	stw	r2,-32(fp)
   11464:	e0bff817 	ldw	r2,-32(fp)
   11468:	1000051e 	bne	r2,zero,11480 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1146c:	e13ffd17 	ldw	r4,-12(fp)
   11470:	00117d00 	call	117d0 <alt_find_file>
   11474:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11478:	00800044 	movi	r2,1
   1147c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11480:	e0bff817 	ldw	r2,-32(fp)
   11484:	10002926 	beq	r2,zero,1152c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11488:	e13ff817 	ldw	r4,-32(fp)
   1148c:	00118d80 	call	118d8 <alt_get_fd>
   11490:	e0bff915 	stw	r2,-28(fp)
   11494:	e0bff917 	ldw	r2,-28(fp)
   11498:	1000030e 	bge	r2,zero,114a8 <open+0x84>
    {
      status = index;
   1149c:	e0bff917 	ldw	r2,-28(fp)
   114a0:	e0bffa15 	stw	r2,-24(fp)
   114a4:	00002306 	br	11534 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   114a8:	e0bff917 	ldw	r2,-28(fp)
   114ac:	10c00324 	muli	r3,r2,12
   114b0:	00800074 	movhi	r2,1
   114b4:	108ba804 	addi	r2,r2,11936
   114b8:	1885883a 	add	r2,r3,r2
   114bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   114c0:	e0fffe17 	ldw	r3,-8(fp)
   114c4:	00900034 	movhi	r2,16384
   114c8:	10bfffc4 	addi	r2,r2,-1
   114cc:	1886703a 	and	r3,r3,r2
   114d0:	e0bffc17 	ldw	r2,-16(fp)
   114d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   114d8:	e0bffb17 	ldw	r2,-20(fp)
   114dc:	1000051e 	bne	r2,zero,114f4 <open+0xd0>
   114e0:	e13ffc17 	ldw	r4,-16(fp)
   114e4:	00113600 	call	11360 <alt_file_locked>
   114e8:	e0bffa15 	stw	r2,-24(fp)
   114ec:	e0bffa17 	ldw	r2,-24(fp)
   114f0:	10001016 	blt	r2,zero,11534 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   114f4:	e0bff817 	ldw	r2,-32(fp)
   114f8:	10800317 	ldw	r2,12(r2)
   114fc:	10000826 	beq	r2,zero,11520 <open+0xfc>
   11500:	e0bff817 	ldw	r2,-32(fp)
   11504:	10800317 	ldw	r2,12(r2)
   11508:	e1ffff17 	ldw	r7,-4(fp)
   1150c:	e1bffe17 	ldw	r6,-8(fp)
   11510:	e17ffd17 	ldw	r5,-12(fp)
   11514:	e13ffc17 	ldw	r4,-16(fp)
   11518:	103ee83a 	callr	r2
   1151c:	00000106 	br	11524 <open+0x100>
   11520:	0005883a 	mov	r2,zero
   11524:	e0bffa15 	stw	r2,-24(fp)
   11528:	00000206 	br	11534 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1152c:	00bffb44 	movi	r2,-19
   11530:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11534:	e0bffa17 	ldw	r2,-24(fp)
   11538:	1000090e 	bge	r2,zero,11560 <open+0x13c>
  {
    alt_release_fd (index);  
   1153c:	e13ff917 	ldw	r4,-28(fp)
   11540:	000faf80 	call	faf8 <alt_release_fd>
    ALT_ERRNO = -status;
   11544:	00113240 	call	11324 <alt_get_errno>
   11548:	1007883a 	mov	r3,r2
   1154c:	e0bffa17 	ldw	r2,-24(fp)
   11550:	0085c83a 	sub	r2,zero,r2
   11554:	18800015 	stw	r2,0(r3)
    return -1;
   11558:	00bfffc4 	movi	r2,-1
   1155c:	00000106 	br	11564 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11560:	e0bff917 	ldw	r2,-28(fp)
}
   11564:	e037883a 	mov	sp,fp
   11568:	dfc00117 	ldw	ra,4(sp)
   1156c:	df000017 	ldw	fp,0(sp)
   11570:	dec00204 	addi	sp,sp,8
   11574:	f800283a 	ret

00011578 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11578:	defffa04 	addi	sp,sp,-24
   1157c:	df000515 	stw	fp,20(sp)
   11580:	df000504 	addi	fp,sp,20
   11584:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11588:	0005303a 	rdctl	r2,status
   1158c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11590:	e0fffc17 	ldw	r3,-16(fp)
   11594:	00bfff84 	movi	r2,-2
   11598:	1884703a 	and	r2,r3,r2
   1159c:	1001703a 	wrctl	status,r2
  
  return context;
   115a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   115a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   115a8:	e0bfff17 	ldw	r2,-4(fp)
   115ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   115b0:	e0bffd17 	ldw	r2,-12(fp)
   115b4:	10800017 	ldw	r2,0(r2)
   115b8:	e0fffd17 	ldw	r3,-12(fp)
   115bc:	18c00117 	ldw	r3,4(r3)
   115c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   115c4:	e0bffd17 	ldw	r2,-12(fp)
   115c8:	10800117 	ldw	r2,4(r2)
   115cc:	e0fffd17 	ldw	r3,-12(fp)
   115d0:	18c00017 	ldw	r3,0(r3)
   115d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   115d8:	e0bffd17 	ldw	r2,-12(fp)
   115dc:	e0fffd17 	ldw	r3,-12(fp)
   115e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   115e4:	e0bffd17 	ldw	r2,-12(fp)
   115e8:	e0fffd17 	ldw	r3,-12(fp)
   115ec:	10c00015 	stw	r3,0(r2)
   115f0:	e0bffb17 	ldw	r2,-20(fp)
   115f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11600:	0001883a 	nop
   11604:	e037883a 	mov	sp,fp
   11608:	df000017 	ldw	fp,0(sp)
   1160c:	dec00104 	addi	sp,sp,4
   11610:	f800283a 	ret

00011614 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11614:	defffb04 	addi	sp,sp,-20
   11618:	dfc00415 	stw	ra,16(sp)
   1161c:	df000315 	stw	fp,12(sp)
   11620:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11624:	d0a01017 	ldw	r2,-32704(gp)
   11628:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1162c:	d0a6e717 	ldw	r2,-25700(gp)
   11630:	10800044 	addi	r2,r2,1
   11634:	d0a6e715 	stw	r2,-25700(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11638:	00002e06 	br	116f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	10800017 	ldw	r2,0(r2)
   11644:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11648:	e0bffd17 	ldw	r2,-12(fp)
   1164c:	10800403 	ldbu	r2,16(r2)
   11650:	10803fcc 	andi	r2,r2,255
   11654:	10000426 	beq	r2,zero,11668 <alt_tick+0x54>
   11658:	d0a6e717 	ldw	r2,-25700(gp)
   1165c:	1000021e 	bne	r2,zero,11668 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11660:	e0bffd17 	ldw	r2,-12(fp)
   11664:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11668:	e0bffd17 	ldw	r2,-12(fp)
   1166c:	10800217 	ldw	r2,8(r2)
   11670:	d0e6e717 	ldw	r3,-25700(gp)
   11674:	18801d36 	bltu	r3,r2,116ec <alt_tick+0xd8>
   11678:	e0bffd17 	ldw	r2,-12(fp)
   1167c:	10800403 	ldbu	r2,16(r2)
   11680:	10803fcc 	andi	r2,r2,255
   11684:	1000191e 	bne	r2,zero,116ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11688:	e0bffd17 	ldw	r2,-12(fp)
   1168c:	10800317 	ldw	r2,12(r2)
   11690:	e0fffd17 	ldw	r3,-12(fp)
   11694:	18c00517 	ldw	r3,20(r3)
   11698:	1809883a 	mov	r4,r3
   1169c:	103ee83a 	callr	r2
   116a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   116a4:	e0bfff17 	ldw	r2,-4(fp)
   116a8:	1000031e 	bne	r2,zero,116b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   116ac:	e13ffd17 	ldw	r4,-12(fp)
   116b0:	00115780 	call	11578 <alt_alarm_stop>
   116b4:	00000d06 	br	116ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   116b8:	e0bffd17 	ldw	r2,-12(fp)
   116bc:	10c00217 	ldw	r3,8(r2)
   116c0:	e0bfff17 	ldw	r2,-4(fp)
   116c4:	1887883a 	add	r3,r3,r2
   116c8:	e0bffd17 	ldw	r2,-12(fp)
   116cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   116d0:	e0bffd17 	ldw	r2,-12(fp)
   116d4:	10c00217 	ldw	r3,8(r2)
   116d8:	d0a6e717 	ldw	r2,-25700(gp)
   116dc:	1880032e 	bgeu	r3,r2,116ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   116e0:	e0bffd17 	ldw	r2,-12(fp)
   116e4:	00c00044 	movi	r3,1
   116e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   116ec:	e0bffe17 	ldw	r2,-8(fp)
   116f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   116f4:	e0fffd17 	ldw	r3,-12(fp)
   116f8:	d0a01004 	addi	r2,gp,-32704
   116fc:	18bfcf1e 	bne	r3,r2,1163c <__alt_data_end+0xff01163c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11700:	0001883a 	nop
}
   11704:	0001883a 	nop
   11708:	e037883a 	mov	sp,fp
   1170c:	dfc00117 	ldw	ra,4(sp)
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00204 	addi	sp,sp,8
   11718:	f800283a 	ret

0001171c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1171c:	deffff04 	addi	sp,sp,-4
   11720:	df000015 	stw	fp,0(sp)
   11724:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11728:	000170fa 	wrctl	ienable,zero
}
   1172c:	0001883a 	nop
   11730:	e037883a 	mov	sp,fp
   11734:	df000017 	ldw	fp,0(sp)
   11738:	dec00104 	addi	sp,sp,4
   1173c:	f800283a 	ret

00011740 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11740:	defffa04 	addi	sp,sp,-24
   11744:	dfc00515 	stw	ra,20(sp)
   11748:	df000415 	stw	fp,16(sp)
   1174c:	df000404 	addi	fp,sp,16
   11750:	e13ffe15 	stw	r4,-8(fp)
   11754:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11758:	e0bfff17 	ldw	r2,-4(fp)
   1175c:	10800017 	ldw	r2,0(r2)
   11760:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11764:	e13ffe17 	ldw	r4,-8(fp)
   11768:	0003d540 	call	3d54 <strlen>
   1176c:	10800044 	addi	r2,r2,1
   11770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11774:	00000d06 	br	117ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11778:	e0bffc17 	ldw	r2,-16(fp)
   1177c:	10800217 	ldw	r2,8(r2)
   11780:	e0fffd17 	ldw	r3,-12(fp)
   11784:	180d883a 	mov	r6,r3
   11788:	e17ffe17 	ldw	r5,-8(fp)
   1178c:	1009883a 	mov	r4,r2
   11790:	0011af40 	call	11af4 <memcmp>
   11794:	1000021e 	bne	r2,zero,117a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11798:	e0bffc17 	ldw	r2,-16(fp)
   1179c:	00000706 	br	117bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   117a0:	e0bffc17 	ldw	r2,-16(fp)
   117a4:	10800017 	ldw	r2,0(r2)
   117a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117ac:	e0fffc17 	ldw	r3,-16(fp)
   117b0:	e0bfff17 	ldw	r2,-4(fp)
   117b4:	18bff01e 	bne	r3,r2,11778 <__alt_data_end+0xff011778>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   117b8:	0005883a 	mov	r2,zero
}
   117bc:	e037883a 	mov	sp,fp
   117c0:	dfc00117 	ldw	ra,4(sp)
   117c4:	df000017 	ldw	fp,0(sp)
   117c8:	dec00204 	addi	sp,sp,8
   117cc:	f800283a 	ret

000117d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   117d0:	defffb04 	addi	sp,sp,-20
   117d4:	dfc00415 	stw	ra,16(sp)
   117d8:	df000315 	stw	fp,12(sp)
   117dc:	df000304 	addi	fp,sp,12
   117e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   117e4:	d0a00817 	ldw	r2,-32736(gp)
   117e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   117ec:	00003106 	br	118b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   117f0:	e0bffd17 	ldw	r2,-12(fp)
   117f4:	10800217 	ldw	r2,8(r2)
   117f8:	1009883a 	mov	r4,r2
   117fc:	0003d540 	call	3d54 <strlen>
   11800:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11804:	e0bffd17 	ldw	r2,-12(fp)
   11808:	10c00217 	ldw	r3,8(r2)
   1180c:	e0bffe17 	ldw	r2,-8(fp)
   11810:	10bfffc4 	addi	r2,r2,-1
   11814:	1885883a 	add	r2,r3,r2
   11818:	10800003 	ldbu	r2,0(r2)
   1181c:	10803fcc 	andi	r2,r2,255
   11820:	1080201c 	xori	r2,r2,128
   11824:	10bfe004 	addi	r2,r2,-128
   11828:	10800bd8 	cmpnei	r2,r2,47
   1182c:	1000031e 	bne	r2,zero,1183c <alt_find_file+0x6c>
    {
      len -= 1;
   11830:	e0bffe17 	ldw	r2,-8(fp)
   11834:	10bfffc4 	addi	r2,r2,-1
   11838:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1183c:	e0bffe17 	ldw	r2,-8(fp)
   11840:	e0ffff17 	ldw	r3,-4(fp)
   11844:	1885883a 	add	r2,r3,r2
   11848:	10800003 	ldbu	r2,0(r2)
   1184c:	10803fcc 	andi	r2,r2,255
   11850:	1080201c 	xori	r2,r2,128
   11854:	10bfe004 	addi	r2,r2,-128
   11858:	10800be0 	cmpeqi	r2,r2,47
   1185c:	1000081e 	bne	r2,zero,11880 <alt_find_file+0xb0>
   11860:	e0bffe17 	ldw	r2,-8(fp)
   11864:	e0ffff17 	ldw	r3,-4(fp)
   11868:	1885883a 	add	r2,r3,r2
   1186c:	10800003 	ldbu	r2,0(r2)
   11870:	10803fcc 	andi	r2,r2,255
   11874:	1080201c 	xori	r2,r2,128
   11878:	10bfe004 	addi	r2,r2,-128
   1187c:	10000a1e 	bne	r2,zero,118a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11880:	e0bffd17 	ldw	r2,-12(fp)
   11884:	10800217 	ldw	r2,8(r2)
   11888:	e0fffe17 	ldw	r3,-8(fp)
   1188c:	180d883a 	mov	r6,r3
   11890:	e17fff17 	ldw	r5,-4(fp)
   11894:	1009883a 	mov	r4,r2
   11898:	0011af40 	call	11af4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1189c:	1000021e 	bne	r2,zero,118a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   118a0:	e0bffd17 	ldw	r2,-12(fp)
   118a4:	00000706 	br	118c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   118a8:	e0bffd17 	ldw	r2,-12(fp)
   118ac:	10800017 	ldw	r2,0(r2)
   118b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   118b4:	e0fffd17 	ldw	r3,-12(fp)
   118b8:	d0a00804 	addi	r2,gp,-32736
   118bc:	18bfcc1e 	bne	r3,r2,117f0 <__alt_data_end+0xff0117f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   118c0:	0005883a 	mov	r2,zero
}
   118c4:	e037883a 	mov	sp,fp
   118c8:	dfc00117 	ldw	ra,4(sp)
   118cc:	df000017 	ldw	fp,0(sp)
   118d0:	dec00204 	addi	sp,sp,8
   118d4:	f800283a 	ret

000118d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   118d8:	defffc04 	addi	sp,sp,-16
   118dc:	df000315 	stw	fp,12(sp)
   118e0:	df000304 	addi	fp,sp,12
   118e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   118e8:	00bffa04 	movi	r2,-24
   118ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   118f0:	e03ffd15 	stw	zero,-12(fp)
   118f4:	00001906 	br	1195c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   118f8:	00800074 	movhi	r2,1
   118fc:	108ba804 	addi	r2,r2,11936
   11900:	e0fffd17 	ldw	r3,-12(fp)
   11904:	18c00324 	muli	r3,r3,12
   11908:	10c5883a 	add	r2,r2,r3
   1190c:	10800017 	ldw	r2,0(r2)
   11910:	10000f1e 	bne	r2,zero,11950 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11914:	00800074 	movhi	r2,1
   11918:	108ba804 	addi	r2,r2,11936
   1191c:	e0fffd17 	ldw	r3,-12(fp)
   11920:	18c00324 	muli	r3,r3,12
   11924:	10c5883a 	add	r2,r2,r3
   11928:	e0ffff17 	ldw	r3,-4(fp)
   1192c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11930:	d0e00c17 	ldw	r3,-32720(gp)
   11934:	e0bffd17 	ldw	r2,-12(fp)
   11938:	1880020e 	bge	r3,r2,11944 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1193c:	e0bffd17 	ldw	r2,-12(fp)
   11940:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   11944:	e0bffd17 	ldw	r2,-12(fp)
   11948:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1194c:	00000606 	br	11968 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11950:	e0bffd17 	ldw	r2,-12(fp)
   11954:	10800044 	addi	r2,r2,1
   11958:	e0bffd15 	stw	r2,-12(fp)
   1195c:	e0bffd17 	ldw	r2,-12(fp)
   11960:	10800810 	cmplti	r2,r2,32
   11964:	103fe41e 	bne	r2,zero,118f8 <__alt_data_end+0xff0118f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11968:	e0bffe17 	ldw	r2,-8(fp)
}
   1196c:	e037883a 	mov	sp,fp
   11970:	df000017 	ldw	fp,0(sp)
   11974:	dec00104 	addi	sp,sp,4
   11978:	f800283a 	ret

0001197c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1197c:	defffb04 	addi	sp,sp,-20
   11980:	df000415 	stw	fp,16(sp)
   11984:	df000404 	addi	fp,sp,16
   11988:	e13ffe15 	stw	r4,-8(fp)
   1198c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11990:	e0bfff17 	ldw	r2,-4(fp)
   11994:	10840070 	cmpltui	r2,r2,4097
   11998:	1000021e 	bne	r2,zero,119a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1199c:	00840004 	movi	r2,4096
   119a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   119a4:	e0fffe17 	ldw	r3,-8(fp)
   119a8:	e0bfff17 	ldw	r2,-4(fp)
   119ac:	1885883a 	add	r2,r3,r2
   119b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   119b4:	e0bffe17 	ldw	r2,-8(fp)
   119b8:	e0bffc15 	stw	r2,-16(fp)
   119bc:	00000506 	br	119d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   119c0:	e0bffc17 	ldw	r2,-16(fp)
   119c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   119c8:	e0bffc17 	ldw	r2,-16(fp)
   119cc:	10800804 	addi	r2,r2,32
   119d0:	e0bffc15 	stw	r2,-16(fp)
   119d4:	e0fffc17 	ldw	r3,-16(fp)
   119d8:	e0bffd17 	ldw	r2,-12(fp)
   119dc:	18bff836 	bltu	r3,r2,119c0 <__alt_data_end+0xff0119c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   119e0:	e0bffe17 	ldw	r2,-8(fp)
   119e4:	108007cc 	andi	r2,r2,31
   119e8:	10000226 	beq	r2,zero,119f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   119ec:	e0bffc17 	ldw	r2,-16(fp)
   119f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   119f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   119f8:	0001883a 	nop
   119fc:	e037883a 	mov	sp,fp
   11a00:	df000017 	ldw	fp,0(sp)
   11a04:	dec00104 	addi	sp,sp,4
   11a08:	f800283a 	ret

00011a0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11a0c:	defffe04 	addi	sp,sp,-8
   11a10:	df000115 	stw	fp,4(sp)
   11a14:	df000104 	addi	fp,sp,4
   11a18:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11a1c:	e0bfff17 	ldw	r2,-4(fp)
   11a20:	10bffe84 	addi	r2,r2,-6
   11a24:	10c00428 	cmpgeui	r3,r2,16
   11a28:	18001a1e 	bne	r3,zero,11a94 <alt_exception_cause_generated_bad_addr+0x88>
   11a2c:	100690ba 	slli	r3,r2,2
   11a30:	00800074 	movhi	r2,1
   11a34:	10869104 	addi	r2,r2,6724
   11a38:	1885883a 	add	r2,r3,r2
   11a3c:	10800017 	ldw	r2,0(r2)
   11a40:	1000683a 	jmp	r2
   11a44:	00011a84 	movi	zero,1130
   11a48:	00011a84 	movi	zero,1130
   11a4c:	00011a94 	movui	zero,1130
   11a50:	00011a94 	movui	zero,1130
   11a54:	00011a94 	movui	zero,1130
   11a58:	00011a84 	movi	zero,1130
   11a5c:	00011a8c 	andi	zero,zero,1130
   11a60:	00011a94 	movui	zero,1130
   11a64:	00011a84 	movi	zero,1130
   11a68:	00011a84 	movi	zero,1130
   11a6c:	00011a94 	movui	zero,1130
   11a70:	00011a84 	movi	zero,1130
   11a74:	00011a8c 	andi	zero,zero,1130
   11a78:	00011a94 	movui	zero,1130
   11a7c:	00011a94 	movui	zero,1130
   11a80:	00011a84 	movi	zero,1130
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11a84:	00800044 	movi	r2,1
   11a88:	00000306 	br	11a98 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11a8c:	0005883a 	mov	r2,zero
   11a90:	00000106 	br	11a98 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11a94:	0005883a 	mov	r2,zero
  }
}
   11a98:	e037883a 	mov	sp,fp
   11a9c:	df000017 	ldw	fp,0(sp)
   11aa0:	dec00104 	addi	sp,sp,4
   11aa4:	f800283a 	ret

00011aa8 <atexit>:
   11aa8:	200b883a 	mov	r5,r4
   11aac:	000f883a 	mov	r7,zero
   11ab0:	000d883a 	mov	r6,zero
   11ab4:	0009883a 	mov	r4,zero
   11ab8:	0011b701 	jmpi	11b70 <__register_exitproc>

00011abc <exit>:
   11abc:	defffe04 	addi	sp,sp,-8
   11ac0:	000b883a 	mov	r5,zero
   11ac4:	dc000015 	stw	r16,0(sp)
   11ac8:	dfc00115 	stw	ra,4(sp)
   11acc:	2021883a 	mov	r16,r4
   11ad0:	0011c880 	call	11c88 <__call_exitprocs>
   11ad4:	00800074 	movhi	r2,1
   11ad8:	10902404 	addi	r2,r2,16528
   11adc:	11000017 	ldw	r4,0(r2)
   11ae0:	20800f17 	ldw	r2,60(r4)
   11ae4:	10000126 	beq	r2,zero,11aec <exit+0x30>
   11ae8:	103ee83a 	callr	r2
   11aec:	8009883a 	mov	r4,r16
   11af0:	0011e080 	call	11e08 <_exit>

00011af4 <memcmp>:
   11af4:	01c000c4 	movi	r7,3
   11af8:	3980192e 	bgeu	r7,r6,11b60 <memcmp+0x6c>
   11afc:	2144b03a 	or	r2,r4,r5
   11b00:	11c4703a 	and	r2,r2,r7
   11b04:	10000f26 	beq	r2,zero,11b44 <memcmp+0x50>
   11b08:	20800003 	ldbu	r2,0(r4)
   11b0c:	28c00003 	ldbu	r3,0(r5)
   11b10:	10c0151e 	bne	r2,r3,11b68 <memcmp+0x74>
   11b14:	31bfff84 	addi	r6,r6,-2
   11b18:	01ffffc4 	movi	r7,-1
   11b1c:	00000406 	br	11b30 <memcmp+0x3c>
   11b20:	20800003 	ldbu	r2,0(r4)
   11b24:	28c00003 	ldbu	r3,0(r5)
   11b28:	31bfffc4 	addi	r6,r6,-1
   11b2c:	10c00e1e 	bne	r2,r3,11b68 <memcmp+0x74>
   11b30:	21000044 	addi	r4,r4,1
   11b34:	29400044 	addi	r5,r5,1
   11b38:	31fff91e 	bne	r6,r7,11b20 <__alt_data_end+0xff011b20>
   11b3c:	0005883a 	mov	r2,zero
   11b40:	f800283a 	ret
   11b44:	20c00017 	ldw	r3,0(r4)
   11b48:	28800017 	ldw	r2,0(r5)
   11b4c:	18bfee1e 	bne	r3,r2,11b08 <__alt_data_end+0xff011b08>
   11b50:	31bfff04 	addi	r6,r6,-4
   11b54:	21000104 	addi	r4,r4,4
   11b58:	29400104 	addi	r5,r5,4
   11b5c:	39bff936 	bltu	r7,r6,11b44 <__alt_data_end+0xff011b44>
   11b60:	303fe91e 	bne	r6,zero,11b08 <__alt_data_end+0xff011b08>
   11b64:	003ff506 	br	11b3c <__alt_data_end+0xff011b3c>
   11b68:	10c5c83a 	sub	r2,r2,r3
   11b6c:	f800283a 	ret

00011b70 <__register_exitproc>:
   11b70:	defffa04 	addi	sp,sp,-24
   11b74:	dc000315 	stw	r16,12(sp)
   11b78:	04000074 	movhi	r16,1
   11b7c:	84102404 	addi	r16,r16,16528
   11b80:	80c00017 	ldw	r3,0(r16)
   11b84:	dc400415 	stw	r17,16(sp)
   11b88:	dfc00515 	stw	ra,20(sp)
   11b8c:	18805217 	ldw	r2,328(r3)
   11b90:	2023883a 	mov	r17,r4
   11b94:	10003726 	beq	r2,zero,11c74 <__register_exitproc+0x104>
   11b98:	10c00117 	ldw	r3,4(r2)
   11b9c:	010007c4 	movi	r4,31
   11ba0:	20c00e16 	blt	r4,r3,11bdc <__register_exitproc+0x6c>
   11ba4:	1a000044 	addi	r8,r3,1
   11ba8:	8800221e 	bne	r17,zero,11c34 <__register_exitproc+0xc4>
   11bac:	18c00084 	addi	r3,r3,2
   11bb0:	18c7883a 	add	r3,r3,r3
   11bb4:	18c7883a 	add	r3,r3,r3
   11bb8:	12000115 	stw	r8,4(r2)
   11bbc:	10c7883a 	add	r3,r2,r3
   11bc0:	19400015 	stw	r5,0(r3)
   11bc4:	0005883a 	mov	r2,zero
   11bc8:	dfc00517 	ldw	ra,20(sp)
   11bcc:	dc400417 	ldw	r17,16(sp)
   11bd0:	dc000317 	ldw	r16,12(sp)
   11bd4:	dec00604 	addi	sp,sp,24
   11bd8:	f800283a 	ret
   11bdc:	00800034 	movhi	r2,0
   11be0:	108ce304 	addi	r2,r2,13196
   11be4:	10002626 	beq	r2,zero,11c80 <__register_exitproc+0x110>
   11be8:	01006404 	movi	r4,400
   11bec:	d9400015 	stw	r5,0(sp)
   11bf0:	d9800115 	stw	r6,4(sp)
   11bf4:	d9c00215 	stw	r7,8(sp)
   11bf8:	000338c0 	call	338c <malloc>
   11bfc:	d9400017 	ldw	r5,0(sp)
   11c00:	d9800117 	ldw	r6,4(sp)
   11c04:	d9c00217 	ldw	r7,8(sp)
   11c08:	10001d26 	beq	r2,zero,11c80 <__register_exitproc+0x110>
   11c0c:	81000017 	ldw	r4,0(r16)
   11c10:	10000115 	stw	zero,4(r2)
   11c14:	02000044 	movi	r8,1
   11c18:	22405217 	ldw	r9,328(r4)
   11c1c:	0007883a 	mov	r3,zero
   11c20:	12400015 	stw	r9,0(r2)
   11c24:	20805215 	stw	r2,328(r4)
   11c28:	10006215 	stw	zero,392(r2)
   11c2c:	10006315 	stw	zero,396(r2)
   11c30:	883fde26 	beq	r17,zero,11bac <__alt_data_end+0xff011bac>
   11c34:	18c9883a 	add	r4,r3,r3
   11c38:	2109883a 	add	r4,r4,r4
   11c3c:	1109883a 	add	r4,r2,r4
   11c40:	21802215 	stw	r6,136(r4)
   11c44:	01800044 	movi	r6,1
   11c48:	12406217 	ldw	r9,392(r2)
   11c4c:	30cc983a 	sll	r6,r6,r3
   11c50:	4992b03a 	or	r9,r9,r6
   11c54:	12406215 	stw	r9,392(r2)
   11c58:	21c04215 	stw	r7,264(r4)
   11c5c:	01000084 	movi	r4,2
   11c60:	893fd21e 	bne	r17,r4,11bac <__alt_data_end+0xff011bac>
   11c64:	11006317 	ldw	r4,396(r2)
   11c68:	218cb03a 	or	r6,r4,r6
   11c6c:	11806315 	stw	r6,396(r2)
   11c70:	003fce06 	br	11bac <__alt_data_end+0xff011bac>
   11c74:	18805304 	addi	r2,r3,332
   11c78:	18805215 	stw	r2,328(r3)
   11c7c:	003fc606 	br	11b98 <__alt_data_end+0xff011b98>
   11c80:	00bfffc4 	movi	r2,-1
   11c84:	003fd006 	br	11bc8 <__alt_data_end+0xff011bc8>

00011c88 <__call_exitprocs>:
   11c88:	defff504 	addi	sp,sp,-44
   11c8c:	df000915 	stw	fp,36(sp)
   11c90:	dd400615 	stw	r21,24(sp)
   11c94:	dc800315 	stw	r18,12(sp)
   11c98:	dfc00a15 	stw	ra,40(sp)
   11c9c:	ddc00815 	stw	r23,32(sp)
   11ca0:	dd800715 	stw	r22,28(sp)
   11ca4:	dd000515 	stw	r20,20(sp)
   11ca8:	dcc00415 	stw	r19,16(sp)
   11cac:	dc400215 	stw	r17,8(sp)
   11cb0:	dc000115 	stw	r16,4(sp)
   11cb4:	d9000015 	stw	r4,0(sp)
   11cb8:	2839883a 	mov	fp,r5
   11cbc:	04800044 	movi	r18,1
   11cc0:	057fffc4 	movi	r21,-1
   11cc4:	00800074 	movhi	r2,1
   11cc8:	10902404 	addi	r2,r2,16528
   11ccc:	12000017 	ldw	r8,0(r2)
   11cd0:	45005217 	ldw	r20,328(r8)
   11cd4:	44c05204 	addi	r19,r8,328
   11cd8:	a0001c26 	beq	r20,zero,11d4c <__call_exitprocs+0xc4>
   11cdc:	a0800117 	ldw	r2,4(r20)
   11ce0:	15ffffc4 	addi	r23,r2,-1
   11ce4:	b8000d16 	blt	r23,zero,11d1c <__call_exitprocs+0x94>
   11ce8:	14000044 	addi	r16,r2,1
   11cec:	8421883a 	add	r16,r16,r16
   11cf0:	8421883a 	add	r16,r16,r16
   11cf4:	84402004 	addi	r17,r16,128
   11cf8:	a463883a 	add	r17,r20,r17
   11cfc:	a421883a 	add	r16,r20,r16
   11d00:	e0001e26 	beq	fp,zero,11d7c <__call_exitprocs+0xf4>
   11d04:	80804017 	ldw	r2,256(r16)
   11d08:	e0801c26 	beq	fp,r2,11d7c <__call_exitprocs+0xf4>
   11d0c:	bdffffc4 	addi	r23,r23,-1
   11d10:	843fff04 	addi	r16,r16,-4
   11d14:	8c7fff04 	addi	r17,r17,-4
   11d18:	bd7ff91e 	bne	r23,r21,11d00 <__alt_data_end+0xff011d00>
   11d1c:	00800034 	movhi	r2,0
   11d20:	108ce804 	addi	r2,r2,13216
   11d24:	10000926 	beq	r2,zero,11d4c <__call_exitprocs+0xc4>
   11d28:	a0800117 	ldw	r2,4(r20)
   11d2c:	1000301e 	bne	r2,zero,11df0 <__call_exitprocs+0x168>
   11d30:	a0800017 	ldw	r2,0(r20)
   11d34:	10003226 	beq	r2,zero,11e00 <__call_exitprocs+0x178>
   11d38:	a009883a 	mov	r4,r20
   11d3c:	98800015 	stw	r2,0(r19)
   11d40:	00033a00 	call	33a0 <free>
   11d44:	9d000017 	ldw	r20,0(r19)
   11d48:	a03fe41e 	bne	r20,zero,11cdc <__alt_data_end+0xff011cdc>
   11d4c:	dfc00a17 	ldw	ra,40(sp)
   11d50:	df000917 	ldw	fp,36(sp)
   11d54:	ddc00817 	ldw	r23,32(sp)
   11d58:	dd800717 	ldw	r22,28(sp)
   11d5c:	dd400617 	ldw	r21,24(sp)
   11d60:	dd000517 	ldw	r20,20(sp)
   11d64:	dcc00417 	ldw	r19,16(sp)
   11d68:	dc800317 	ldw	r18,12(sp)
   11d6c:	dc400217 	ldw	r17,8(sp)
   11d70:	dc000117 	ldw	r16,4(sp)
   11d74:	dec00b04 	addi	sp,sp,44
   11d78:	f800283a 	ret
   11d7c:	a0800117 	ldw	r2,4(r20)
   11d80:	80c00017 	ldw	r3,0(r16)
   11d84:	10bfffc4 	addi	r2,r2,-1
   11d88:	15c01426 	beq	r2,r23,11ddc <__call_exitprocs+0x154>
   11d8c:	80000015 	stw	zero,0(r16)
   11d90:	183fde26 	beq	r3,zero,11d0c <__alt_data_end+0xff011d0c>
   11d94:	95c8983a 	sll	r4,r18,r23
   11d98:	a0806217 	ldw	r2,392(r20)
   11d9c:	a5800117 	ldw	r22,4(r20)
   11da0:	2084703a 	and	r2,r4,r2
   11da4:	10000b26 	beq	r2,zero,11dd4 <__call_exitprocs+0x14c>
   11da8:	a0806317 	ldw	r2,396(r20)
   11dac:	2088703a 	and	r4,r4,r2
   11db0:	20000c1e 	bne	r4,zero,11de4 <__call_exitprocs+0x15c>
   11db4:	89400017 	ldw	r5,0(r17)
   11db8:	d9000017 	ldw	r4,0(sp)
   11dbc:	183ee83a 	callr	r3
   11dc0:	a0800117 	ldw	r2,4(r20)
   11dc4:	15bfbf1e 	bne	r2,r22,11cc4 <__alt_data_end+0xff011cc4>
   11dc8:	98800017 	ldw	r2,0(r19)
   11dcc:	153fcf26 	beq	r2,r20,11d0c <__alt_data_end+0xff011d0c>
   11dd0:	003fbc06 	br	11cc4 <__alt_data_end+0xff011cc4>
   11dd4:	183ee83a 	callr	r3
   11dd8:	003ff906 	br	11dc0 <__alt_data_end+0xff011dc0>
   11ddc:	a5c00115 	stw	r23,4(r20)
   11de0:	003feb06 	br	11d90 <__alt_data_end+0xff011d90>
   11de4:	89000017 	ldw	r4,0(r17)
   11de8:	183ee83a 	callr	r3
   11dec:	003ff406 	br	11dc0 <__alt_data_end+0xff011dc0>
   11df0:	a0800017 	ldw	r2,0(r20)
   11df4:	a027883a 	mov	r19,r20
   11df8:	1029883a 	mov	r20,r2
   11dfc:	003fb606 	br	11cd8 <__alt_data_end+0xff011cd8>
   11e00:	0005883a 	mov	r2,zero
   11e04:	003ffb06 	br	11df4 <__alt_data_end+0xff011df4>

00011e08 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11e08:	defffd04 	addi	sp,sp,-12
   11e0c:	df000215 	stw	fp,8(sp)
   11e10:	df000204 	addi	fp,sp,8
   11e14:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11e18:	0001883a 	nop
   11e1c:	e0bfff17 	ldw	r2,-4(fp)
   11e20:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11e24:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11e28:	10000226 	beq	r2,zero,11e34 <_exit+0x2c>
    ALT_SIM_FAIL();
   11e2c:	002af070 	cmpltui	zero,zero,43969
   11e30:	00000106 	br	11e38 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11e34:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11e38:	003fff06 	br	11e38 <__alt_data_end+0xff011e38>
