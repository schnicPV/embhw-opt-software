
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000108e0 memsz 0x000108e0 flags r-x
    LOAD off    0x00011900 vaddr 0x00010900 paddr 0x000123f4 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013ee8 vaddr 0x00013ee8 paddr 0x00013ee8 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ffec  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000788  00010178  00010178  00011178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00010900  000123f4  00011900  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00013ee8  00013ee8  00013ee8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00014078  00014078  000133f4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000133f4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d8  00000000  00000000  00013418  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00028960  00000000  00000000  000144f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a802  00000000  00000000  0003ce50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cca2  00000000  00000000  00047652  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022ac  00000000  00000000  000542f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003ea7  00000000  00000000  000565a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c180  00000000  00000000  0005a447  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000765c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c38  00000000  00000000  00076628  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007bca2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007bca5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007bcb1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007bcb2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0007bcb3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007bcb7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007bcbb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007bcbf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007bcc8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007bcd1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0007bcda  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  0007bce5  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  0007bd33  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000786ea  00000000  00000000  0008180b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
00010178 l    d  .rodata	00000000 .rodata
00010900 l    d  .rwdata	00000000 .rwdata
00013ee8 l    d  .bss	00000000 .bss
00014078 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001065e l     O .rodata	00000010 zeroes.4404
000048f8 l     F .text	000000bc __sbprintf
0001066e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004b08 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00006638 l     F .text	00000008 __fp_unlock
0000664c l     F .text	0000019c __sinit.part.1
000067e8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010d08 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001114c l     O .rwdata	00000020 lc_ctype_charset
0001112c l     O .rwdata	00000020 lc_message_charset
0001116c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000106a0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009384 l     F .text	000000fc __sprint_r.part.0
000107d4 l     O .rodata	00000010 blanks.4348
000107c4 l     O .rodata	00000010 zeroes.4349
0000a910 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e688 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000123e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_uncached_free.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001134c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ec70 l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000ecbc l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f1f0 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013f4c g     O .bss	00000004 alt_instruction_exception_handler
00008a1c g     F .text	00000074 _mprec_log10
00008b08 g     F .text	0000008c __any_on
0000aeac g     F .text	00000054 _isatty_r
000106ac g     O .rodata	00000028 __mprec_tinytens
0000e8d4 g     F .text	00000060 alt_main
00002524 g     F .text	000000c0 _puts_r
00013f78 g     O .bss	00000100 alt_irq
0000af00 g     F .text	00000060 _lseek_r
00010603 g     O .rodata	00000009 gy_array
000123f4 g       *ABS*	00000000 __flash_rwdata_start
0000d0f8 g     F .text	00000088 .hidden __eqdf2
00014078 g       *ABS*	00000000 __alt_heap_start
000024e8 g     F .text	0000003c printf
0000b118 g     F .text	0000009c _wcrtomb_r
00009244 g     F .text	0000005c __sseek
00006988 g     F .text	00000010 __sinit
0000afc0 g     F .text	00000140 __swbuf_r
00007450 g     F .text	0000007c _setlocale_r
000067f0 g     F .text	00000068 __sfmoreglue
0000e938 g     F .text	00000004 __malloc_unlock
0000090c g     F .text	00000014 LCD_Write_Command
00013ef8 g     O .bss	00000004 sobel_width
00013f38 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007914 g     F .text	0000015c memmove
00000920 g     F .text	00000014 LCD_Write_Data
00006970 g     F .text	00000018 _cleanup
00007b98 g     F .text	000000a8 _Balloc
0000d180 g     F .text	000000dc .hidden __gtdf2
0000fa14 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004f0 g     F .text	00000024 cam_get_xsize
0000ae50 g     F .text	0000005c _fstat_r
00013f1c g     O .bss	00000004 errno
000091c0 g     F .text	00000008 __seofread
00013f30 g     O .bss	00000004 alt_argv
0001a3ac g       *ABS*	00000000 _gp
0000eae0 g     F .text	00000004 usleep
0000ea84 g     F .text	0000005c alt_uncached_malloc
000005b0 g     F .text	00000074 cam_set_image_pointer
000111a4 g     O .rwdata	00000180 alt_fd_list
00001c64 g     F .text	00000010 vga_set_pointer
0000fa1c g     F .text	00000078 alt_find_dev
000077cc g     F .text	00000148 memcpy
00006640 g     F .text	0000000c _cleanup_r
0000e3e4 g     F .text	000000dc .hidden __floatsidf
0000f670 g     F .text	00000104 alt_io_redirect
0000d25c g     F .text	000000f4 .hidden __ltdf2
00010178 g       *ABS*	00000000 __DTOR_END__
000025e4 g     F .text	00000014 puts
0000fbe0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000090f8 g     F .text	00000074 __fpclassifyd
00008978 g     F .text	000000a4 __ratio
0000a8f4 g     F .text	0000001c __vfiprintf_internal
0000eefc g     F .text	00000154 altera_avalon_jtag_uart_read
00001c84 g     F .text	00000014 malloc
000024b8 g     F .text	00000030 _printf_r
00000760 g     F .text	00000008 get_grayscale_picture
0000bea8 g     F .text	00000064 .hidden __udivsi3
000101d8 g     O .rodata	00000128 lens_roll_off_tbl
000001d8 g     F .text	00000318 init_camera
0000e708 g     F .text	00000084 isatty
000106fc g     O .rodata	000000c8 __mprec_tens
000074cc g     F .text	0000000c __locale_charset
0000fb90 g     F .text	00000050 alt_icache_flush
00013f18 g     O .bss	00000004 __malloc_top_pad
000123c4 g     O .rwdata	00000004 __mb_cur_max
000074fc g     F .text	0000000c _localeconv_r
0000146c g     F .text	00000140 sobel_x
00007fa4 g     F .text	0000003c __i2b
00006e0c g     F .text	000004bc __sfvwrite_r
00000934 g     F .text	00000414 init_LCD
000025f8 g     F .text	00000054 _sbrk_r
000123ac g     O .rwdata	00000004 pgy_array
00000538 g     F .text	00000078 cam_get_profiling
0000af60 g     F .text	00000060 _read_r
0000f3e4 g     F .text	00000040 alt_dcache_flush
00013efc g     O .bss	00000004 sobel_result
000123cc g     O .rwdata	00000004 alt_max_fd
0000ab44 g     F .text	000000f0 _fclose_r
00006608 g     F .text	00000030 fflush
00013f14 g     O .bss	00000004 __malloc_max_sbrked_mem
00013ef0 g     O .bss	00000004 grayscale_array
0000bf64 g     F .text	000008ac .hidden __adddf3
00000514 g     F .text	00000024 cam_get_ysize
00008720 g     F .text	0000010c __b2d
0000b878 g     F .text	00000538 .hidden __umoddi3
0000e858 g     F .text	0000007c lseek
00000828 g     F .text	0000008c i2c_short_read
000123bc g     O .rwdata	00000004 _global_impure_ptr
00008b94 g     F .text	00000564 _realloc_r
00014078 g       *ABS*	00000000 __bss_end
0000f608 g     F .text	00000068 alt_iic_isr_register
0000f920 g     F .text	000000f4 alt_tick
0000b300 g     F .text	00000578 .hidden __udivdi3
0000adac g     F .text	00000024 _fputwc_r
000106d4 g     O .rodata	00000028 __mprec_bigtens
00007d88 g     F .text	00000104 __s2b
0000e4c0 g     F .text	000000a8 .hidden __floatunsidf
00008460 g     F .text	00000060 __mcmp
000069a8 g     F .text	00000018 __fp_lock_all
0000f5f0 g     F .text	00000018 alt_ic_irq_enabled
00013ee8 g     O .bss	00000004 grayscape_height
0000f8ec g     F .text	00000034 alt_alarm_stop
00013f40 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
00011324 g     O .rwdata	00000028 alt_dev_null
00000dd4 g     F .text	00000078 transfer_LCD_with_dma
00001a44 g     F .text	00000210 sobel_complete
0000f424 g     F .text	00000018 alt_dcache_flush_all
00007e8c g     F .text	00000068 __hi0bits
0000e364 g     F .text	00000080 .hidden __fixdfsi
000123f4 g       *ABS*	00000000 __ram_rwdata_end
000123d0 g     O .rwdata	00000008 alt_dev_list
0000eae4 g     F .text	000000c4 write
0000f2e4 g     F .text	00000008 alt_timestamp_freq
00010900 g       *ABS*	00000000 __ram_rodata_end
0000e690 g     F .text	00000078 fstat
0000d25c g     F .text	000000f4 .hidden __ledf2
000081d8 g     F .text	00000140 __pow5mult
00009498 g     F .text	0000145c ___vfiprintf_internal_r
00013f28 g     O .bss	00000004 __nlocale_changed
0000bf0c g     F .text	00000058 .hidden __umodsi3
00001c54 g     F .text	00000008 GetSobel_rgb
00014078 g       *ABS*	00000000 end
00001c5c g     F .text	00000008 GetSobelResult
00000648 g     F .text	00000020 take_picture_blocking
000006a8 g     F .text	00000014 DIPSW_get_value
00001840 g     F .text	00000168 sobel_y_with_rgb
0000edc4 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000638 g     F .text	00000010 current_image_pointer
00010178 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f22c g     F .text	00000048 alt_avalon_timer_sc_init
0000e568 g     F .text	00000064 .hidden __clzsi2
0000f050 g     F .text	000001a0 altera_avalon_jtag_uart_write
00006998 g     F .text	00000004 __sfp_lock_acquire
000076e8 g     F .text	000000e4 memchr
000026e4 g     F .text	000021f8 ___vfprintf_internal_r
00006afc g     F .text	00000310 _free_r
000074d8 g     F .text	00000010 __locale_mb_cur_max
00001728 g     F .text	00000118 sobel_y
00010300 g     O .rodata	00000140 noise_reduction_reg_settings_array
0000ffe4 g     F .text	00000180 __call_exitprocs
00013f24 g     O .bss	00000004 __mlocale_changed
000123b4 g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000004c _start
00013f48 g     O .bss	00000004 _alt_tick_rate
00008318 g     F .text	00000148 __lshift
00013f44 g     O .bss	00000004 _alt_nticks
0000e93c g     F .text	000000c8 read
0000ebc8 g     F .text	0000006c alt_sys_init
000015ac g     F .text	0000017c sobel_x_with_rgb
0000fecc g     F .text	00000118 __register_exitproc
00007fe0 g     F .text	000001f8 __multiply
0000ee3c g     F .text	0000004c altera_avalon_jtag_uart_close
00010900 g       *ABS*	00000000 __ram_rwdata_start
00010178 g       *ABS*	00000000 __ram_rodata_start
00013f50 g     O .bss	00000028 __malloc_current_mallinfo
0000882c g     F .text	0000014c __d2b
00013f00 g     O .bss	00000004 sobel_height
00000668 g     F .text	00000014 enable_continues_mode
0000ec34 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
000012cc g     F .text	000000e4 init_sobel_arrays
0000fb40 g     F .text	00000050 alt_get_fd
0000f36c g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000aa2c g     F .text	00000054 _close_r
0000fe50 g     F .text	0000007c memcmp
0000ec54 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00014078 g       *ABS*	00000000 __alt_stack_base
0000ec64 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
000049b4 g     F .text	00000154 __swsetup_r
0000c810 g     F .text	000008e8 .hidden __divdf3
00006858 g     F .text	00000118 __sfp
00008a90 g     F .text	00000078 __copybits
00010900 g     O .rwdata	00000408 __malloc_av_
000069a4 g     F .text	00000004 __sinit_lock_release
0000d350 g     F .text	00000718 .hidden __muldf3
0000916c g     F .text	00000054 __sread
0000fa94 g     F .text	000000ac alt_find_file
0000f43c g     F .text	0000006c alt_dev_llist_insert
0000e934 g     F .text	00000004 __malloc_lock
0000ea28 g     F .text	0000004c sbrk
000065ac g     F .text	0000005c _fflush_r
0000aa80 g     F .text	000000c4 _calloc_r
00013ee8 g       *ABS*	00000000 __bss_start
00007a70 g     F .text	00000128 memset
00000e4c g     F .text	00000480 main
00013f2c g     O .bss	00000004 alt_envp
00013f10 g     O .bss	00000004 __malloc_max_total_mem
00000750 g     F .text	00000008 get_grayscale_width
0000ec44 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b100 g     F .text	00000018 __swbuf
00013f04 g     O .bss	00000004 sobel_x_result
000092a0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000ac34 g     F .text	00000014 fclose
0000f274 g     F .text	0000003c alt_timestamp_start
00004d08 g     F .text	00001688 _dtoa_r
00001cac g     F .text	0000080c _malloc_r
0000b274 g     F .text	00000030 __ascii_wctomb
000123e0 g     O .rwdata	00000004 alt_errno
000072c8 g     F .text	000000c4 _fwalk
0000bdb0 g     F .text	00000084 .hidden __divsi3
000069d8 g     F .text	00000124 _malloc_trim_r
00010178 g       *ABS*	00000000 __CTOR_END__
00013eec g     O .bss	00000004 grayscale_width
000092a8 g     F .text	000000dc strcmp
00000d48 g     F .text	0000008c transfer_LCD_no_dma
00010178 g       *ABS*	00000000 __flash_rodata_start
00010178 g       *ABS*	00000000 __DTOR_LIST__
0000d0f8 g     F .text	00000088 .hidden __nedf2
00010440 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000eba8 g     F .text	00000020 alt_irq_init
0000ea04 g     F .text	00000024 alt_release_fd
00000780 g     F .text	000000a8 i2c_auto_detect
0000fca0 g     F .text	00000018 memalign
000107e4 g     O .rodata	00000100 .hidden __clz_tab
00000624 g     F .text	00000014 current_image_valid
00013f20 g     O .bss	00000004 _PathLocale
00000768 g     F .text	00000018 i2c_busy_wait
0000fc54 g     F .text	00000014 atexit
0000a9cc g     F .text	00000060 _write_r
00007508 g     F .text	00000018 setlocale
000123c0 g     O .rwdata	00000004 _impure_ptr
00013f34 g     O .bss	00000004 alt_argc
00006390 g     F .text	0000021c __sflush_r
00013f3c g     O .bss	00000004 altera_avalon_timer_ts_base
0000f50c g     F .text	00000064 _do_dtors
000074f4 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000086bc g     F .text	00000064 __ulp
000069c0 g     F .text	00000018 __fp_unlock_all
000123d8 g     O .rwdata	00000008 alt_fs_list
00013f08 g     O .bss	00000004 sobel_y_result
000008b4 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013ef4 g     O .bss	00000002 LCD_height
00007520 g     F .text	0000000c localeconv
0000f2b0 g     F .text	00000034 alt_timestamp
00001c74 g     F .text	00000010 vga_set_swap
0000f57c g     F .text	00000004 alt_ic_isr_register
000019a8 g     F .text	0000009c sobel_threshold
000123f4 g       *ABS*	00000000 _edata
000123b0 g     O .rwdata	00000004 pgx_array
00014078 g       *ABS*	00000000 _end
0000ac48 g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000ee88 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0001060c g     O .rodata	00000009 gx_array
0000f5b8 g     F .text	00000038 alt_ic_irq_disable
000091c8 g     F .text	0000007c __swrite
000123b8 g     O .rwdata	00000004 __malloc_trim_threshold
00013ef6 g     O .bss	00000002 LCD_width
000006bc g     F .text	00000094 conv_grayscale
000074e8 g     F .text	0000000c __locale_msgcharset
0000fc68 g     F .text	00000038 exit
0000738c g     F .text	000000c4 _fwalk_reent
000084c0 g     F .text	000001fc __mdiff
0000be34 g     F .text	00000074 .hidden __modsi3
0000fcb8 g     F .text	00000198 _memalign_r
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000699c g     F .text	00000004 __sfp_lock_release
00000758 g     F .text	00000008 get_grayscale_height
00010164 g     F .text	00000014 _exit
000013b0 g     F .text	000000bc sobel_mac
0000f2ec g     F .text	00000080 alt_alarm_start
0000752c g     F .text	000001bc __smakebuf_r
00013f0c g     O .bss	00000004 sobel_rgb565
0000264c g     F .text	00000098 strlen
0000f774 g     F .text	00000178 open
0000d180 g     F .text	000000dc .hidden __gedf2
0000ea74 g     F .text	00000010 alt_uncached_free
000123c8 g     O .rwdata	00000004 __wctomb
00009480 g     F .text	00000018 __sprint_r
0000f570 g     F .text	0000000c alt_icache_flush_all
000123e8 g     O .rwdata	00000004 alt_priority_mask
0000f580 g     F .text	00000038 alt_ic_irq_enable
000048dc g     F .text	0000001c __vfprintf_internal
0000b2a4 g     F .text	0000005c _wctomb_r
0000da68 g     F .text	000008fc .hidden __subdf3
00007ef4 g     F .text	000000b0 __lo0bits
000123ec g     O .rwdata	00000008 alt_alarm_list
0000f4a8 g     F .text	00000064 _do_ctors
0000b1b4 g     F .text	000000c0 wcrtomb
0000e5cc g     F .text	000000bc close
0000e78c g     F .text	000000cc alt_load
0000add0 g     F .text	00000080 fputwc
00001c98 g     F .text	00000014 free
000069a0 g     F .text	00000004 __sinit_lock_acquire
00007c68 g     F .text	00000120 __multadd
00007c40 g     F .text	00000028 _Bfree
0000067c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	840fde04 	addi	r16,r16,16248
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a6e817 	ldw	r2,-25696(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     18c:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
     190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     198:	00bffd16 	blt	zero,r2,190 <__alt_data_end+0xff000190>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     19c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     1a0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     1a4:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1a8:	d6a8eb14 	ori	gp,gp,41900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1ac:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1b0:	108fba14 	ori	r2,r2,16104

    movhi r3, %hi(__bss_end)
     1b4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1b8:	18d01e14 	ori	r3,r3,16504

    beq r2, r3, 1f
     1bc:	10c00326 	beq	r2,r3,1cc <_start+0x40>

0:
    stw zero, (r2)
     1c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1c8:	10fffd36 	bltu	r2,r3,1c0 <__alt_data_end+0xff0001c0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1cc:	000e78c0 	call	e78c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1d0:	000e8d40 	call	e8d4 <alt_main>

000001d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1d4:	003fff06 	br	1d4 <__alt_data_end+0xff0001d4>

000001d8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1d8:	00804034 	movhi	r2,256
     1dc:	10842744 	addi	r2,r2,4253
     1e0:	00c00084 	movi	r3,2
     1e4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1e8:	00804034 	movhi	r2,256
     1ec:	10841304 	addi	r2,r2,4172
     1f0:	00c00044 	movi	r3,1
     1f4:	10c00025 	stbio	r3,0(r2)
     1f8:	008003f4 	movhi	r2,15
     1fc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     200:	0001883a 	nop
     204:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     208:	103ffd1e 	bne	r2,zero,200 <__alt_data_end+0xff000200>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     20c:	00804034 	movhi	r2,256
     210:	10841304 	addi	r2,r2,4172
     214:	10000025 	stbio	zero,0(r2)
     218:	008003f4 	movhi	r2,15
     21c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     220:	0001883a 	nop
     224:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     228:	103ffd1e 	bne	r2,zero,220 <__alt_data_end+0xff000220>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     230:	01800044 	movi	r6,1
     234:	014ce184 	movi	r5,13190
     238:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     23c:	dfc00315 	stw	ra,12(sp)
     240:	dc800215 	stw	r18,8(sp)
     244:	dc400115 	stw	r17,4(sp)
     248:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     24c:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     250:	000d883a 	mov	r6,zero
     254:	014ce184 	movi	r5,13190
     258:	01001e04 	movi	r4,120
     25c:	00008b40 	call	8b4 <i2c_short_write>
     260:	008003f4 	movhi	r2,15
     264:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     268:	0001883a 	nop
     26c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     270:	103ffd1e 	bne	r2,zero,268 <__alt_data_end+0xff000268>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     274:	01803104 	movi	r6,196
     278:	014c0684 	movi	r5,12314
     27c:	01001e04 	movi	r4,120
     280:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     284:	01800204 	movi	r6,8
     288:	014c8084 	movi	r5,12802
     28c:	01001e04 	movi	r4,120
     290:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     294:	0180c744 	movi	r6,797
     298:	014cfd04 	movi	r5,13300
     29c:	01001e04 	movi	r4,120
     2a0:	00008b40 	call	8b4 <i2c_short_write>
     2a4:	008000b4 	movhi	r2,2
     2a8:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2ac:	0001883a 	nop
     2b0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2b4:	103ffd1e 	bne	r2,zero,2ac <__alt_data_end+0xff0002ac>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2b8:	01a3c254 	movui	r6,36617
     2bc:	014d0784 	movi	r5,13342
     2c0:	01001e04 	movi	r4,120
     2c4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2c8:	01805404 	movi	r6,336
     2cc:	014d0704 	movi	r5,13340
     2d0:	01001e04 	movi	r4,120
     2d4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2d8:	01a3c254 	movui	r6,36617
     2dc:	014d0784 	movi	r5,13342
     2e0:	01001e04 	movi	r4,120
     2e4:	00008b40 	call	8b4 <i2c_short_write>
     2e8:	008000b4 	movhi	r2,2
     2ec:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2f0:	0001883a 	nop
     2f4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2f8:	103ffd1e 	bne	r2,zero,2f0 <__alt_data_end+0xff0002f0>
     2fc:	04000074 	movhi	r16,1
     300:	84011004 	addi	r16,r16,1088
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     304:	01a3c214 	movui	r6,36616
     308:	014d0784 	movi	r5,13342
     30c:	01001e04 	movi	r4,120
     310:	00008b40 	call	8b4 <i2c_short_write>
     314:	84400084 	addi	r17,r16,2
     318:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     31c:	8980000b 	ldhu	r6,0(r17)
     320:	8140000b 	ldhu	r5,0(r16)
     324:	01001e04 	movi	r4,120
     328:	84000104 	addi	r16,r16,4
     32c:	00008b40 	call	8b4 <i2c_short_write>
     330:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     334:	84bff91e 	bne	r16,r18,31c <__alt_data_end+0xff00031c>
     338:	04000074 	movhi	r16,1
     33c:	8400c004 	addi	r16,r16,768
     340:	84400084 	addi	r17,r16,2
     344:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     348:	8980000b 	ldhu	r6,0(r17)
     34c:	8140000b 	ldhu	r5,0(r16)
     350:	01001e04 	movi	r4,120
     354:	84000104 	addi	r16,r16,4
     358:	00008b40 	call	8b4 <i2c_short_write>
     35c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     360:	943ff91e 	bne	r18,r16,348 <__alt_data_end+0xff000348>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     364:	018164c4 	movi	r6,1427
     368:	014d6904 	movi	r5,13732
     36c:	01001e04 	movi	r4,120
     370:	00008b40 	call	8b4 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     374:	0189e644 	movi	r6,10137
     378:	014ce304 	movi	r5,13196
     37c:	01001e04 	movi	r4,120
     380:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     384:	01991004 	movi	r6,25664
     388:	014ce404 	movi	r5,13200
     38c:	01001e04 	movi	r4,120
     390:	00008b40 	call	8b4 <i2c_short_write>
     394:	008000b4 	movhi	r2,2
     398:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     39c:	0001883a 	nop
     3a0:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3a4:	103ffd1e 	bne	r2,zero,39c <__alt_data_end+0xff00039c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     3a8:	0189e6c4 	movi	r6,10139
     3ac:	014ce304 	movi	r5,13196
     3b0:	01001e04 	movi	r4,120
     3b4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3b8:	01991004 	movi	r6,25664
     3bc:	014ce404 	movi	r5,13200
     3c0:	01001e04 	movi	r4,120
     3c4:	00008b40 	call	8b4 <i2c_short_write>
     3c8:	008000b4 	movhi	r2,2
     3cc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3d0:	0001883a 	nop
     3d4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3d8:	103ffd1e 	bne	r2,zero,3d0 <__alt_data_end+0xff0003d0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3dc:	01a840d4 	movui	r6,41219
     3e0:	014ce304 	movi	r5,13196
     3e4:	01001e04 	movi	r4,120
     3e8:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3ec:	01800144 	movi	r6,5
     3f0:	014ce404 	movi	r5,13200
     3f4:	01001e04 	movi	r4,120
     3f8:	00008b40 	call	8b4 <i2c_short_write>
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     404:	0001883a 	nop
     408:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     40c:	103ffd1e 	bne	r2,zero,404 <__alt_data_end+0xff000404>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     410:	01a840d4 	movui	r6,41219
     414:	014ce304 	movi	r5,13196
     418:	01001e04 	movi	r4,120
     41c:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     420:	01800184 	movi	r6,6
     424:	014ce404 	movi	r5,13200
     428:	01001e04 	movi	r4,120
     42c:	00008b40 	call	8b4 <i2c_short_write>
     430:	008000b4 	movhi	r2,2
     434:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     438:	0001883a 	nop
     43c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     440:	103ffd1e 	bne	r2,zero,438 <__alt_data_end+0xff000438>
     444:	04000074 	movhi	r16,1
     448:	84007604 	addi	r16,r16,472
     44c:	84400084 	addi	r17,r16,2
     450:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     454:	8980000b 	ldhu	r6,0(r17)
     458:	8140000b 	ldhu	r5,0(r16)
     45c:	01001e04 	movi	r4,120
     460:	84000104 	addi	r16,r16,4
     464:	00008b40 	call	8b4 <i2c_short_write>
     468:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     46c:	943ff91e 	bne	r18,r16,454 <__alt_data_end+0xff000454>
     470:	008003f4 	movhi	r2,15
     474:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     478:	0001883a 	nop
     47c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     480:	103ffd1e 	bne	r2,zero,478 <__alt_data_end+0xff000478>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     484:	01800804 	movi	r6,32
     488:	014ccb84 	movi	r5,13102
     48c:	01001e04 	movi	r4,120
     490:	00008b40 	call	8b4 <i2c_short_write>
     494:	008003f4 	movhi	r2,15
     498:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     49c:	0001883a 	nop
     4a0:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     4a4:	103ffd1e 	bne	r2,zero,49c <__alt_data_end+0xff00049c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     4a8:	01800884 	movi	r6,34
     4ac:	014d0104 	movi	r5,13316
     4b0:	01001e04 	movi	r4,120
     4b4:	00008b40 	call	8b4 <i2c_short_write>
     4b8:	008003f4 	movhi	r2,15
     4bc:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4c0:	0001883a 	nop
     4c4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4c8:	103ffd1e 	bne	r2,zero,4c0 <__alt_data_end+0xff0004c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4cc:	018009c4 	movi	r6,39
     4d0:	014c1004 	movi	r5,12352
     4d4:	01001e04 	movi	r4,120
}
     4d8:	dfc00317 	ldw	ra,12(sp)
     4dc:	dc800217 	ldw	r18,8(sp)
     4e0:	dc400117 	ldw	r17,4(sp)
     4e4:	dc000017 	ldw	r16,0(sp)
     4e8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4ec:	00008b41 	jmpi	8b4 <i2c_short_write>

000004f0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4f0:	00c04034 	movhi	r3,256
     4f4:	18c41304 	addi	r3,r3,4172
     4f8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4fc:	1080010c 	andi	r2,r2,4
     500:	103ffd26 	beq	r2,zero,4f8 <__alt_data_end+0xff0004f8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     504:	00804034 	movhi	r2,256
     508:	10841004 	addi	r2,r2,4160
}
     50c:	1080002b 	ldhuio	r2,0(r2)
     510:	f800283a 	ret

00000514 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     514:	00c04034 	movhi	r3,256
     518:	18c41304 	addi	r3,r3,4172
     51c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     520:	1080010c 	andi	r2,r2,4
     524:	103ffd26 	beq	r2,zero,51c <__alt_data_end+0xff00051c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     528:	00804034 	movhi	r2,256
     52c:	10841104 	addi	r2,r2,4164
}
     530:	1080002b 	ldhuio	r2,0(r2)
     534:	f800283a 	ret

00000538 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     538:	00c04034 	movhi	r3,256
     53c:	18c41304 	addi	r3,r3,4172
     540:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     544:	1080010c 	andi	r2,r2,4
     548:	103ffd26 	beq	r2,zero,540 <__alt_data_end+0xff000540>
	printf("Nr. of bytes each line    : %d\n",
     54c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     550:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     554:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     558:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     55c:	1140002b 	ldhuio	r5,0(r2)
     560:	01000074 	movhi	r4,1
     564:	21005e04 	addi	r4,r4,376
     568:	297fffcc 	andi	r5,r5,65535
     56c:	00024e80 	call	24e8 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     570:	00804034 	movhi	r2,256
     574:	10841104 	addi	r2,r2,4164
     578:	1140002b 	ldhuio	r5,0(r2)
     57c:	01000074 	movhi	r4,1
     580:	21006604 	addi	r4,r4,408
     584:	297fffcc 	andi	r5,r5,65535
     588:	00024e80 	call	24e8 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     58c:	00804034 	movhi	r2,256
     590:	10841204 	addi	r2,r2,4168
     594:	1140002b 	ldhuio	r5,0(r2)
     598:	01000074 	movhi	r4,1
     59c:	21006e04 	addi	r4,r4,440
     5a0:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     5a4:	dfc00017 	ldw	ra,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     5ac:	00024e81 	jmpi	24e8 <printf>

000005b0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5b0:	21003fcc 	andi	r4,r4,255
     5b4:	2100201c 	xori	r4,r4,128
     5b8:	213fe004 	addi	r4,r4,-128
     5bc:	00800044 	movi	r2,1
     5c0:	20801226 	beq	r4,r2,60c <cam_set_image_pointer+0x5c>
     5c4:	11000c0e 	bge	r2,r4,5f8 <cam_set_image_pointer+0x48>
     5c8:	00800084 	movi	r2,2
     5cc:	20800626 	beq	r4,r2,5e8 <cam_set_image_pointer+0x38>
     5d0:	008000c4 	movi	r2,3
     5d4:	2080111e 	bne	r4,r2,61c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841704 	addi	r2,r2,4188
     5e0:	11400035 	stwio	r5,0(r2)
     5e4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5e8:	00804034 	movhi	r2,256
     5ec:	10841604 	addi	r2,r2,4184
     5f0:	11400035 	stwio	r5,0(r2)
                break;
     5f4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5f8:	2000091e 	bne	r4,zero,620 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841404 	addi	r2,r2,4176
     604:	11400035 	stwio	r5,0(r2)
	            break;
     608:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     60c:	00804034 	movhi	r2,256
     610:	10841504 	addi	r2,r2,4180
     614:	11400035 	stwio	r5,0(r2)
                break;
     618:	f800283a 	ret
     61c:	f800283a 	ret
     620:	f800283a 	ret

00000624 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     624:	00804034 	movhi	r2,256
     628:	10841304 	addi	r2,r2,4172
     62c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     630:	1080800c 	andi	r2,r2,512
     634:	f800283a 	ret

00000638 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     638:	00804034 	movhi	r2,256
     63c:	10841404 	addi	r2,r2,4176
}
     640:	10800037 	ldwio	r2,0(r2)
     644:	f800283a 	ret

00000648 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     648:	00c04034 	movhi	r3,256
     64c:	18c41304 	addi	r3,r3,4172
     650:	00800204 	movi	r2,8
     654:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     658:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     65c:	1080020c 	andi	r2,r2,8
     660:	103ffd1e 	bne	r2,zero,658 <__alt_data_end+0xff000658>
}
     664:	f800283a 	ret

00000668 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     668:	00804034 	movhi	r2,256
     66c:	10841304 	addi	r2,r2,4172
     670:	00c00404 	movi	r3,16
     674:	10c0002d 	sthio	r3,0(r2)
     678:	f800283a 	ret

0000067c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     67c:	00c04034 	movhi	r3,256
     680:	18c41304 	addi	r3,r3,4172
     684:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     688:	1080200c 	andi	r2,r2,128
     68c:	1000021e 	bne	r2,zero,698 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     690:	0005883a 	mov	r2,zero
}
     694:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     698:	00804004 	movi	r2,256
     69c:	1880002d 	sthio	r2,0(r3)
		return 1;
     6a0:	00800044 	movi	r2,1
     6a4:	f800283a 	ret

000006a8 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     6a8:	00804034 	movhi	r2,256
     6ac:	10842804 	addi	r2,r2,4256
     6b0:	10800023 	ldbuio	r2,0(r2)
}
     6b4:	0084303a 	nor	r2,zero,r2
     6b8:	f800283a 	ret

000006bc <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6bc:	defffd04 	addi	sp,sp,-12
     6c0:	dc400115 	stw	r17,4(sp)
  int k,gray;
  int kmax = (width*height)>>2;	// x>>2 <=> x/4
  unsigned int *pixels = (unsigned int *)picture;// , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6c4:	d0a6d117 	ldw	r2,-25788(gp)

void conv_grayscale(void *picture,
                int width,
                int height) {
  int k,gray;
  int kmax = (width*height)>>2;	// x>>2 <=> x/4
     6c8:	29a3383a 	mul	r17,r5,r6
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6cc:	dc000015 	stw	r16,0(sp)
     6d0:	dfc00215 	stw	ra,8(sp)
  int k,gray;
  int kmax = (width*height)>>2;	// x>>2 <=> x/4
  unsigned int *pixels = (unsigned int *)picture;// , rgb;
  grayscale_width = width;
     6d4:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     6d8:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6dc:	2021883a 	mov	r16,r4
  int k,gray;
  int kmax = (width*height)>>2;	// x>>2 <=> x/4
     6e0:	8823d0ba 	srai	r17,r17,2
  unsigned int *pixels = (unsigned int *)picture;// , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6e4:	10000226 	beq	r2,zero,6f0 <conv_grayscale+0x34>
	  alt_uncached_free(grayscale_array);
     6e8:	1009883a 	mov	r4,r2
     6ec:	000ea740 	call	ea74 <alt_uncached_free>
  grayscale_array = (unsigned char *) alt_uncached_malloc(kmax);
     6f0:	8809883a 	mov	r4,r17
     6f4:	000ea840 	call	ea84 <alt_uncached_malloc>
     6f8:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k<kmax; k++)
     6fc:	04400f0e 	bge	zero,r17,73c <conv_grayscale+0x80>
     700:	8c4f883a 	add	r7,r17,r17
     704:	8009883a 	mov	r4,r16
     708:	81800104 	addi	r6,r16,4
     70c:	39cf883a 	add	r7,r7,r7
     710:	0005883a 	mov	r2,zero
  {
	  gray = ALT_CI_CUSTOM_GRAY_0(pixels[k*2], pixels[k*2+1]);
     714:	20c00017 	ldw	r3,0(r4)
     718:	31400017 	ldw	r5,0(r6)
     71c:	194bc032 	custom	0,r5,r3,r5
	  IOWR_32DIRECT(grayscale_array, k*4, gray);
     720:	d0e6d117 	ldw	r3,-25788(gp)
     724:	1887883a 	add	r3,r3,r2
     728:	19400035 	stwio	r5,0(r3)
     72c:	10800104 	addi	r2,r2,4
     730:	21000204 	addi	r4,r4,8
     734:	31800204 	addi	r6,r6,8
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
	  alt_uncached_free(grayscale_array);
  grayscale_array = (unsigned char *) alt_uncached_malloc(kmax);
  for(k = 0; k<kmax; k++)
     738:	38bff61e 	bne	r7,r2,714 <__alt_data_end+0xff000714>
  {
	  gray = ALT_CI_CUSTOM_GRAY_0(pixels[k*2], pixels[k*2+1]);
	  IOWR_32DIRECT(grayscale_array, k*4, gray);
  }
}
     73c:	dfc00217 	ldw	ra,8(sp)
     740:	dc400117 	ldw	r17,4(sp)
     744:	dc000017 	ldw	r16,0(sp)
     748:	dec00304 	addi	sp,sp,12
     74c:	f800283a 	ret

00000750 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     750:	d0a6d017 	ldw	r2,-25792(gp)
     754:	f800283a 	ret

00000758 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     758:	d0a6cf17 	ldw	r2,-25796(gp)
     75c:	f800283a 	ret

00000760 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     760:	d0a6d117 	ldw	r2,-25788(gp)
     764:	f800283a 	ret

00000768 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     768:	00c04034 	movhi	r3,256
     76c:	18c42704 	addi	r3,r3,4252
     770:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     774:	108000cc 	andi	r2,r2,3
     778:	103ffd1e 	bne	r2,zero,770 <__alt_data_end+0xff000770>
}
     77c:	f800283a 	ret

00000780 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     780:	01004034 	movhi	r4,256
     784:	21042704 	addi	r4,r4,4252
     788:	00c04034 	movhi	r3,256
     78c:	18c42704 	addi	r3,r3,4252
     790:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     794:	108000cc 	andi	r2,r2,3
     798:	103ffb1e 	bne	r2,zero,788 <__alt_data_end+0xff000788>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     79c:	00800104 	movi	r2,4
     7a0:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     7a4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7a8:	108000cc 	andi	r2,r2,3
     7ac:	103ffd1e 	bne	r2,zero,7a4 <__alt_data_end+0xff0007a4>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7b0:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7b4:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7b8:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7bc:	dfc00315 	stw	ra,12(sp)
     7c0:	dc800215 	stw	r18,8(sp)
     7c4:	dc400115 	stw	r17,4(sp)
     7c8:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7cc:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     7d0:	01000074 	movhi	r4,1
     7d4:	21015604 	addi	r4,r4,1368
     7d8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     7dc:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     7e0:	00024e80 	call	24e8 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     7e4:	04800a0e 	bge	zero,r18,810 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     7e8:	04404034 	movhi	r17,256
     7ec:	8c442404 	addi	r17,r17,4240
     7f0:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     7f4:	89800037 	ldwio	r6,0(r17)
     7f8:	01000074 	movhi	r4,1
     7fc:	800b883a 	mov	r5,r16
     800:	21015f04 	addi	r4,r4,1404
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     804:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     808:	00024e80 	call	24e8 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     80c:	943ff81e 	bne	r18,r16,7f0 <__alt_data_end+0xff0007f0>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     810:	dfc00317 	ldw	ra,12(sp)
     814:	dc800217 	ldw	r18,8(sp)
     818:	dc400117 	ldw	r17,4(sp)
     81c:	dc000017 	ldw	r16,0(sp)
     820:	dec00404 	addi	sp,sp,16
     824:	f800283a 	ret

00000828 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     828:	01804034 	movhi	r6,256
     82c:	31842704 	addi	r6,r6,4252
     830:	00c04034 	movhi	r3,256
     834:	18c42704 	addi	r3,r3,4252
     838:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     83c:	108000cc 	andi	r2,r2,3
     840:	103ffb1e 	bne	r2,zero,830 <__alt_data_end+0xff000830>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     844:	00804034 	movhi	r2,256
     848:	21003fcc 	andi	r4,r4,255
     84c:	10842404 	addi	r2,r2,4240
     850:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     854:	00804034 	movhi	r2,256
     858:	10842504 	addi	r2,r2,4244
     85c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     860:	008010c4 	movi	r2,67
     864:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     868:	180b883a 	mov	r5,r3
     86c:	00c04034 	movhi	r3,256
     870:	18c42704 	addi	r3,r3,4252
     874:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffb1e 	bne	r2,zero,86c <__alt_data_end+0xff00086c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     880:	00804034 	movhi	r2,256
     884:	21000044 	addi	r4,r4,1
     888:	10842404 	addi	r2,r2,4240
     88c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     890:	00800884 	movi	r2,34
     894:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     898:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     89c:	108000cc 	andi	r2,r2,3
     8a0:	103ffd1e 	bne	r2,zero,898 <__alt_data_end+0xff000898>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     8a4:	00804034 	movhi	r2,256
     8a8:	10842604 	addi	r2,r2,4248
}
     8ac:	10800037 	ldwio	r2,0(r2)
     8b0:	f800283a 	ret

000008b4 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8b4:	01c04034 	movhi	r7,256
     8b8:	39c42704 	addi	r7,r7,4252
     8bc:	00c04034 	movhi	r3,256
     8c0:	18c42704 	addi	r3,r3,4252
     8c4:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8c8:	108000cc 	andi	r2,r2,3
     8cc:	103ffb1e 	bne	r2,zero,8bc <__alt_data_end+0xff0008bc>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8d0:	00804034 	movhi	r2,256
     8d4:	10842404 	addi	r2,r2,4240
     8d8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     8dc:	00804034 	movhi	r2,256
     8e0:	10842504 	addi	r2,r2,4244
     8e4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     8e8:	00804034 	movhi	r2,256
     8ec:	10842604 	addi	r2,r2,4248
     8f0:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     8f4:	00801084 	movi	r2,66
     8f8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8fc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     900:	108000cc 	andi	r2,r2,3
     904:	103ffd1e 	bne	r2,zero,8fc <__alt_data_end+0xff0008fc>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     908:	f800283a 	ret

0000090c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     90c:	00804034 	movhi	r2,256
     910:	10841804 	addi	r2,r2,4192
     914:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     918:	01000284 	movi	r4,10
     91c:	000eae01 	jmpi	eae0 <usleep>

00000920 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     920:	00804034 	movhi	r2,256
     924:	10841904 	addi	r2,r2,4196
     928:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     92c:	01000284 	movi	r4,10
     930:	000eae01 	jmpi	eae0 <usleep>

00000934 <init_LCD>:
}


void init_LCD() {
     934:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     938:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     93c:	dd400515 	stw	r21,20(sp)
     940:	dfc00815 	stw	ra,32(sp)
     944:	ddc00715 	stw	r23,28(sp)
     948:	dd800615 	stw	r22,24(sp)
     94c:	dd000415 	stw	r20,16(sp)
     950:	dcc00315 	stw	r19,12(sp)
     954:	dc800215 	stw	r18,8(sp)
     958:	dc400115 	stw	r17,4(sp)
     95c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     960:	05400084 	movi	r21,2
     964:	10841a04 	addi	r2,r2,4200
     968:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     96c:	04804034 	movhi	r18,256
     970:	94841804 	addi	r18,r18,4192
     974:	00800a04 	movi	r2,40
     978:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     97c:	04000284 	movi	r16,10
     980:	8009883a 	mov	r4,r16
     984:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     988:	05c00444 	movi	r23,17
     98c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     990:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     994:	04404034 	movhi	r17,256
     998:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     99c:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9a0:	0027883a 	mov	r19,zero
     9a4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9a8:	8009883a 	mov	r4,r16
     9ac:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9b0:	008032c4 	movi	r2,203
     9b4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     9b8:	8009883a 	mov	r4,r16
     9bc:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9c0:	00800e44 	movi	r2,57
     9c4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9c8:	8009883a 	mov	r4,r16
     9cc:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d0:	00800b04 	movi	r2,44
     9d4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9d8:	8009883a 	mov	r4,r16
     9dc:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9e4:	8009883a 	mov	r4,r16
     9e8:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9ec:	00800d04 	movi	r2,52
     9f0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9f4:	8009883a 	mov	r4,r16
     9f8:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9fc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     a00:	8009883a 	mov	r4,r16
     a04:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a08:	008033c4 	movi	r2,207
     a0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a10:	8009883a 	mov	r4,r16
     a14:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a18:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a1c:	8009883a 	mov	r4,r16
     a20:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a24:	05802044 	movi	r22,129
     a28:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     a2c:	8009883a 	mov	r4,r16
     a30:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a34:	00800c04 	movi	r2,48
     a38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a3c:	8009883a 	mov	r4,r16
     a40:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a44:	00803a04 	movi	r2,232
     a48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a4c:	8009883a 	mov	r4,r16
     a50:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a54:	00802144 	movi	r2,133
     a58:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a5c:	8009883a 	mov	r4,r16
     a60:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	05000044 	movi	r20,1
     a68:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     a6c:	8009883a 	mov	r4,r16
     a70:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a74:	00801e44 	movi	r2,121
     a78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a7c:	8009883a 	mov	r4,r16
     a80:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a84:	00803a84 	movi	r2,234
     a88:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a8c:	8009883a 	mov	r4,r16
     a90:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a94:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a98:	8009883a 	mov	r4,r16
     a9c:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa4:	8009883a 	mov	r4,r16
     aa8:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aac:	00801904 	movi	r2,100
     ab0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	008000c4 	movi	r2,3
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	00800484 	movi	r2,18
     ad0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
     ad8:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     ae0:	8009883a 	mov	r4,r16
     ae4:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ae8:	00803dc4 	movi	r2,247
     aec:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     af0:	8009883a 	mov	r4,r16
     af4:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af8:	00800804 	movi	r2,32
     afc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
     b04:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b08:	00803004 	movi	r2,192
     b0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b10:	8009883a 	mov	r4,r16
     b14:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b18:	05800984 	movi	r22,38
     b1c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	00800104 	movi	r2,4
     b2c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b38:	00803044 	movi	r2,193
     b3c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b48:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b54:	00803144 	movi	r2,197
     b58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b64:	00800d44 	movi	r2,53
     b68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00800f84 	movi	r2,62
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b84:	008031c4 	movi	r2,199
     b88:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	00802f84 	movi	r2,190
     b98:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ba4:	00802c44 	movi	r2,177
     ba8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc0:	00800404 	movi	r2,16
     bc4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd0:	00800e84 	movi	r2,58
     bd4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be0:	00801544 	movi	r2,85
     be4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf0:	00802d84 	movi	r2,182
     bf4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c00:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     c04:	8009883a 	mov	r4,r16
     c08:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c0c:	00802884 	movi	r2,162
     c10:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c1c:	00803c84 	movi	r2,242
     c20:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     c30:	8009883a 	mov	r4,r16
     c34:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c38:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     c3c:	8009883a 	mov	r4,r16
     c40:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c44:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     c48:	8009883a 	mov	r4,r16
     c4c:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c50:	00800d84 	movi	r2,54
     c54:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c58:	8009883a 	mov	r4,r16
     c5c:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c60:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c6c:	00800a84 	movi	r2,42
     c70:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c7c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c8c:	8009883a 	mov	r4,r16
     c90:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c94:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c98:	8009883a 	mov	r4,r16
     c9c:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca0:	00803bc4 	movi	r2,239
     ca4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000eae00 	call	eae0 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cb0:	00800ac4 	movi	r2,43
     cb4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000eae00 	call	eae0 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cc4:	8009883a 	mov	r4,r16
     cc8:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ccc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd0:	8009883a 	mov	r4,r16
     cd4:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000eae00 	call	eae0 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	00800fc4 	movi	r2,63
     ce8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000eae00 	call	eae0 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     cf4:	00c04034 	movhi	r3,256
     cf8:	00803c04 	movi	r2,240
     cfc:	18c41d04 	addi	r3,r3,4212
     d00:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     d04:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     d08:	00805004 	movi	r2,320
     d0c:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d10:	00800a44 	movi	r2,41
     d14:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     d1c:	dfc00817 	ldw	ra,32(sp)
     d20:	ddc00717 	ldw	r23,28(sp)
     d24:	dd800617 	ldw	r22,24(sp)
     d28:	dd400517 	ldw	r21,20(sp)
     d2c:	dd000417 	ldw	r20,16(sp)
     d30:	dcc00317 	ldw	r19,12(sp)
     d34:	dc800217 	ldw	r18,8(sp)
     d38:	dc400117 	ldw	r17,4(sp)
     d3c:	dc000017 	ldw	r16,0(sp)
     d40:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d44:	000eae01 	jmpi	eae0 <usleep>

00000d48 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d48:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d4c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d50:	dc000015 	stw	r16,0(sp)
     d54:	dfc00415 	stw	ra,16(sp)
     d58:	dcc00315 	stw	r19,12(sp)
     d5c:	dc800215 	stw	r18,8(sp)
     d60:	dc400115 	stw	r17,4(sp)
     d64:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d68:	10841e04 	addi	r2,r2,4216
     d6c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d70:	00804034 	movhi	r2,256
     d74:	10841804 	addi	r2,r2,4192
     d78:	00c00b04 	movi	r3,44
     d7c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d80:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d84:	01000284 	movi	r4,10
     d88:	000eae00 	call	eae0 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d8c:	90000a26 	beq	r18,zero,db8 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d90:	04c04034 	movhi	r19,256
     d94:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d98:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8080000b 	ldhu	r2,0(r16)
     da0:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     da4:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     da8:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     dac:	000eae00 	call	eae0 <usleep>
     db0:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     db4:	8cbff91e 	bne	r17,r18,d9c <__alt_data_end+0xff000d9c>
		LCD_Write_Data(data_array[pixels]);
}
     db8:	dfc00417 	ldw	ra,16(sp)
     dbc:	dcc00317 	ldw	r19,12(sp)
     dc0:	dc800217 	ldw	r18,8(sp)
     dc4:	dc400117 	ldw	r17,4(sp)
     dc8:	dc000017 	ldw	r16,0(sp)
     dcc:	dec00504 	addi	sp,sp,20
     dd0:	f800283a 	ret

00000dd4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     dd4:	d0a6d20b 	ldhu	r2,-25784(gp)
     dd8:	3080010e 	bge	r6,r2,de0 <transfer_LCD_with_dma+0xc>
     ddc:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     de0:	d0e6d28b 	ldhu	r3,-25782(gp)
     de4:	28c0010e 	bge	r5,r3,dec <transfer_LCD_with_dma+0x18>
     de8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     dec:	01804034 	movhi	r6,256
     df0:	31841e04 	addi	r6,r6,4216
     df4:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     df8:	01404034 	movhi	r5,256
     dfc:	29441b04 	addi	r5,r5,4204
     e00:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     e04:	18ffffcc 	andi	r3,r3,65535
     e08:	10bfffcc 	andi	r2,r2,65535
     e0c:	1885383a 	mul	r2,r3,r2
     e10:	00c04034 	movhi	r3,256
     e14:	18c41c04 	addi	r3,r3,4208
     e18:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     e1c:	39c03fcc 	andi	r7,r7,255
     e20:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e24:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e28:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e2c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e30:	38000326 	beq	r7,zero,e40 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e34:	00c04404 	movi	r3,272
     e38:	10c0002d 	sthio	r3,0(r2)
     e3c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e40:	00c04004 	movi	r3,256
     e44:	10c0002d 	sthio	r3,0(r2)
     e48:	f800283a 	ret

00000e4c <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     e4c:	defff504 	addi	sp,sp,-44
     e50:	dfc00a15 	stw	ra,40(sp)
     e54:	dd800715 	stw	r22,28(sp)
     e58:	dd400615 	stw	r21,24(sp)
     e5c:	dd000515 	stw	r20,20(sp)
     e60:	dcc00415 	stw	r19,16(sp)
     e64:	dc800315 	stw	r18,12(sp)
     e68:	dc400215 	stw	r17,8(sp)
     e6c:	dc000115 	stw	r16,4(sp)
     e70:	df000915 	stw	fp,36(sp)
     e74:	ddc00815 	stw	r23,32(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     e78:	00009340 	call	934 <init_LCD>
  init_camera();
     e7c:	00001d80 	call	1d8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     e80:	01000604 	movi	r4,24
     e84:	0001c740 	call	1c74 <vga_set_swap>
  printf("Hello from Nios II!\n");
     e88:	01000074 	movhi	r4,1
     e8c:	21016804 	addi	r4,r4,1440
     e90:	00025e40 	call	25e4 <puts>
  cam_get_profiling();
     e94:	00005380 	call	538 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     e98:	00004f00 	call	4f0 <cam_get_xsize>
     e9c:	1021883a 	mov	r16,r2
     ea0:	00005140 	call	514 <cam_get_ysize>
     ea4:	10bfffcc 	andi	r2,r2,65535
     ea8:	813fffcc 	andi	r4,r16,65535
     eac:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     eb0:	04c00044 	movi	r19,1
     eb4:	05000084 	movi	r20,2
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     eb8:	0001c840 	call	1c84 <malloc>
     ebc:	102d883a 	mov	r22,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ec0:	00004f00 	call	4f0 <cam_get_xsize>
     ec4:	1021883a 	mov	r16,r2
     ec8:	00005140 	call	514 <cam_get_ysize>
     ecc:	10bfffcc 	andi	r2,r2,65535
     ed0:	813fffcc 	andi	r4,r16,65535
     ed4:	2089383a 	mul	r4,r4,r2
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
     ed8:	05604414 	movui	r21,33040
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     edc:	0001c840 	call	1c84 <malloc>
     ee0:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ee4:	00004f00 	call	4f0 <cam_get_xsize>
     ee8:	1021883a 	mov	r16,r2
     eec:	00005140 	call	514 <cam_get_ysize>
     ef0:	10bfffcc 	andi	r2,r2,65535
     ef4:	813fffcc 	andi	r4,r16,65535
     ef8:	2089383a 	mul	r4,r4,r2
     efc:	0001c840 	call	1c84 <malloc>
     f00:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f04:	00004f00 	call	4f0 <cam_get_xsize>
     f08:	1021883a 	mov	r16,r2
     f0c:	00005140 	call	514 <cam_get_ysize>
     f10:	10bfffcc 	andi	r2,r2,65535
     f14:	813fffcc 	andi	r4,r16,65535
     f18:	2089383a 	mul	r4,r4,r2
     f1c:	0001c840 	call	1c84 <malloc>
  cam_set_image_pointer(0,buffer1);
     f20:	b00b883a 	mov	r5,r22
     f24:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f28:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     f2c:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     f30:	900b883a 	mov	r5,r18
     f34:	9809883a 	mov	r4,r19
     f38:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     f3c:	880b883a 	mov	r5,r17
     f40:	a009883a 	mov	r4,r20
     f44:	00005b00 	call	5b0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     f48:	800b883a 	mov	r5,r16
     f4c:	010000c4 	movi	r4,3
     f50:	00005b00 	call	5b0 <cam_set_image_pointer>
  enable_continues_mode();
     f54:	00006680 	call	668 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
     f58:	00004f00 	call	4f0 <cam_get_xsize>
     f5c:	1021883a 	mov	r16,r2
     f60:	00005140 	call	514 <cam_get_ysize>
     f64:	813fffcc 	andi	r4,r16,65535
     f68:	24c8d83a 	srl	r4,r4,r19
     f6c:	117fffcc 	andi	r5,r2,65535
     f70:	00012cc0 	call	12cc <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
     f74:	000067c0 	call	67c <new_image_available>
     f78:	10803fcc 	andi	r2,r2,255
     f7c:	1080201c 	xori	r2,r2,128
     f80:	10bfe004 	addi	r2,r2,-128
     f84:	103ffb26 	beq	r2,zero,f74 <__alt_data_end+0xff000f74>
		  if (current_image_valid()!=0) {
     f88:	00006240 	call	624 <current_image_valid>
     f8c:	10bfffcc 	andi	r2,r2,65535
     f90:	10a0001c 	xori	r2,r2,32768
     f94:	10a00004 	addi	r2,r2,-32768
     f98:	103ff626 	beq	r2,zero,f74 <__alt_data_end+0xff000f74>
			  current_mode = DIPSW_get_value();
     f9c:	00006a80 	call	6a8 <DIPSW_get_value>
     fa0:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
     fa4:	00006380 	call	638 <current_image_pointer>
     fa8:	1025883a 	mov	r18,r2
		      switch (mode) {
     fac:	808001cc 	andi	r2,r16,7
     fb0:	14c03b26 	beq	r2,r19,10a0 <main+0x254>
     fb4:	1000aa26 	beq	r2,zero,1260 <main+0x414>
     fb8:	15008526 	beq	r2,r20,11d0 <main+0x384>
     fbc:	00c000c4 	movi	r3,3
     fc0:	10c0561e 	bne	r2,r3,111c <main+0x2d0>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
     fc4:	000f2740 	call	f274 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
     fc8:	000f2b00 	call	f2b0 <alt_timestamp>
     fcc:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
     fd0:	00004f00 	call	4f0 <cam_get_xsize>
     fd4:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
     fd8:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
     fdc:	897fffcc 	andi	r5,r17,65535
     fe0:	280ad07a 	srli	r5,r5,1
     fe4:	11bfffcc 	andi	r6,r2,65535
     fe8:	9009883a 	mov	r4,r18
     fec:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
     ff0:	000f2b00 	call	f2b0 <alt_timestamp>
     ff4:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
     ff8:	00007600 	call	760 <get_grayscale_picture>
     ffc:	1039883a 	mov	fp,r2
		               alt_timestamp_start();
    1000:	000f2740 	call	f274 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1004:	000f2b00 	call	f2b0 <alt_timestamp>
		               sobel_x(grayscale);
    1008:	e009883a 	mov	r4,fp
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    100c:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    1010:	000146c0 	call	146c <sobel_x>
		               end_sobel_x = alt_timestamp();
    1014:	000f2b00 	call	f2b0 <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    1018:	e009883a 	mov	r4,fp
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    101c:	1025883a 	mov	r18,r2
		               sobel_y_with_rgb(grayscale);
    1020:	00018400 	call	1840 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1024:	0001c540 	call	1c54 <GetSobel_rgb>
    1028:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    102c:	00004f00 	call	4f0 <cam_get_xsize>
    1030:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),0);
    1034:	d8c00015 	stw	r3,0(sp)
    1038:	00005140 	call	514 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    103c:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1040:	84003fcc 	andi	r16,r16,255
    1044:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1048:	197fffcc 	andi	r5,r3,65535
    104c:	280ad07a 	srli	r5,r5,1
    1050:	000f883a 	mov	r7,zero
    1054:	11bfffcc 	andi	r6,r2,65535
    1058:	e549883a 	add	r4,fp,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    105c:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1060:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1064:	80008e16 	blt	r16,zero,12a0 <main+0x454>
    1068:	95e5c83a 	sub	r18,r18,r23
    106c:	8da3c83a 	sub	r17,r17,r22
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1070:	01000074 	movhi	r4,1
    1074:	21016d04 	addi	r4,r4,1460
    1078:	00025e40 	call	25e4 <puts>
		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
    107c:	01000074 	movhi	r4,1
    1080:	900b883a 	mov	r5,r18
    1084:	21017504 	addi	r4,r4,1492
    1088:	00024e80 	call	24e8 <printf>
//		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
//		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
//		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    108c:	01000074 	movhi	r4,1
    1090:	880b883a 	mov	r5,r17
    1094:	21017b04 	addi	r4,r4,1516
    1098:	00024e80 	call	24e8 <printf>
    109c:	003fb506 	br	f74 <__alt_data_end+0xff000f74>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    10a0:	000f2740 	call	f274 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    10a4:	000f2b00 	call	f2b0 <alt_timestamp>
    10a8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    10ac:	00004f00 	call	4f0 <cam_get_xsize>
    10b0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    10b4:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10b8:	897fffcc 	andi	r5,r17,65535
    10bc:	280ad07a 	srli	r5,r5,1
    10c0:	9009883a 	mov	r4,r18
    10c4:	11bfffcc 	andi	r6,r2,65535
    10c8:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10cc:	000f2b00 	call	f2b0 <alt_timestamp>
    10d0:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    10d4:	00007600 	call	760 <get_grayscale_picture>
    10d8:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    10dc:	00004f00 	call	4f0 <cam_get_xsize>
    10e0:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    10e4:	00005140 	call	514 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    10e8:	917fffcc 	andi	r5,r18,65535
    10ec:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    10f0:	84003fcc 	andi	r16,r16,255
    10f4:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    10f8:	980f883a 	mov	r7,r19
    10fc:	11bfffcc 	andi	r6,r2,65535
    1100:	b9102204 	addi	r4,r23,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1104:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1108:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    110c:	80006616 	blt	r16,zero,12a8 <main+0x45c>
    1110:	8da3c83a 	sub	r17,r17,r22
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1114:	0025883a 	mov	r18,zero
    1118:	003fd506 	br	1070 <__alt_data_end+0xff001070>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    111c:	000f2740 	call	f274 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1120:	000f2b00 	call	f2b0 <alt_timestamp>
    1124:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1128:	00004f00 	call	4f0 <cam_get_xsize>
    112c:	1023883a 	mov	r17,r2
	                                  cam_get_ysize());
    1130:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1134:	897fffcc 	andi	r5,r17,65535
    1138:	280ad07a 	srli	r5,r5,1
    113c:	11bfffcc 	andi	r6,r2,65535
    1140:	9009883a 	mov	r4,r18
    1144:	00006bc0 	call	6bc <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1148:	000f2b00 	call	f2b0 <alt_timestamp>
    114c:	1023883a 	mov	r17,r2
                       grayscale = get_grayscale_picture();
    1150:	00007600 	call	760 <get_grayscale_picture>
    1154:	1025883a 	mov	r18,r2

                       alt_timestamp_start();
    1158:	000f2740 	call	f274 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    115c:	000f2b00 	call	f2b0 <alt_timestamp>
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    1160:	9009883a 	mov	r4,r18
    1164:	01402004 	movi	r5,128
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    1168:	102f883a 	mov	r23,r2
//                       sobel_x(grayscale);
                       sobel_complete(grayscale, 128);
    116c:	0001a440 	call	1a44 <sobel_complete>
                       end_sobel_x = alt_timestamp();
    1170:	000f2b00 	call	f2b0 <alt_timestamp>
    1174:	1025883a 	mov	r18,r2
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
    1178:	0001c5c0 	call	1c5c <GetSobelResult>
    117c:	1039883a 	mov	fp,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    1180:	00004f00 	call	4f0 <cam_get_xsize>
    1184:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    1188:	d8c00015 	stw	r3,0(sp)
    118c:	00005140 	call	514 <cam_get_ysize>
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1190:	d8c00017 	ldw	r3,0(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1194:	84003fcc 	andi	r16,r16,255
    1198:	8400201c 	xori	r16,r16,128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    119c:	197fffcc 	andi	r5,r3,65535
    11a0:	280ad07a 	srli	r5,r5,1
    11a4:	01c00044 	movi	r7,1
    11a8:	11bfffcc 	andi	r6,r2,65535
    11ac:	e1102204 	addi	r4,fp,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11b0:	843fe004 	addi	r16,r16,-128
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11b4:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11b8:	803fab0e 	bge	r16,zero,1068 <__alt_data_end+0xff001068>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    11bc:	01000604 	movi	r4,24
    11c0:	0001c740 	call	1c74 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    11c4:	e009883a 	mov	r4,fp
    11c8:	0001c640 	call	1c64 <vga_set_pointer>
    11cc:	003fa606 	br	1068 <__alt_data_end+0xff001068>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    11d0:	000f2740 	call	f274 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    11d4:	000f2b00 	call	f2b0 <alt_timestamp>
    11d8:	102d883a 	mov	r22,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    11dc:	00004f00 	call	4f0 <cam_get_xsize>
    11e0:	1023883a 	mov	r17,r2
		    		                  cam_get_ysize());
    11e4:	00005140 	call	514 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    11e8:	897fffcc 	andi	r5,r17,65535
    11ec:	280ad07a 	srli	r5,r5,1
    11f0:	11bfffcc 	andi	r6,r2,65535
    11f4:	9009883a 	mov	r4,r18
    11f8:	00006bc0 	call	6bc <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    11fc:	000f2b00 	call	f2b0 <alt_timestamp>
    1200:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    1204:	00007600 	call	760 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1208:	1009883a 	mov	r4,r2
    120c:	00015ac0 	call	15ac <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1210:	0001c540 	call	1c54 <GetSobel_rgb>
    1214:	102f883a 	mov	r23,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1218:	00004f00 	call	4f0 <cam_get_xsize>
    121c:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1220:	00005140 	call	514 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1224:	917fffcc 	andi	r5,r18,65535
    1228:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    122c:	84003fcc 	andi	r16,r16,255
    1230:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1234:	000f883a 	mov	r7,zero
    1238:	11bfffcc 	andi	r6,r2,65535
    123c:	bd49883a 	add	r4,r23,r21
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1240:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1244:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1248:	803fb10e 	bge	r16,zero,1110 <__alt_data_end+0xff001110>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    124c:	01000204 	movi	r4,8
    1250:	0001c740 	call	1c74 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1254:	b809883a 	mov	r4,r23
    1258:	0001c640 	call	1c64 <vga_set_pointer>
    125c:	003fac06 	br	1110 <__alt_data_end+0xff001110>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    1260:	00004f00 	call	4f0 <cam_get_xsize>
    1264:	1023883a 	mov	r17,r2
		                	cam_get_ysize(),0);
    1268:	00005140 	call	514 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    126c:	897fffcc 	andi	r5,r17,65535
    1270:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1274:	84003fcc 	andi	r16,r16,255
    1278:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    127c:	000f883a 	mov	r7,zero
    1280:	11bfffcc 	andi	r6,r2,65535
    1284:	9549883a 	add	r4,r18,r21
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1288:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    128c:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1290:	80000716 	blt	r16,zero,12b0 <main+0x464>
    1294:	0023883a 	mov	r17,zero
    1298:	0025883a 	mov	r18,zero
    129c:	003f7406 	br	1070 <__alt_data_end+0xff001070>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12a0:	01000204 	movi	r4,8
    12a4:	003fc606 	br	11c0 <__alt_data_end+0xff0011c0>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    12a8:	01000604 	movi	r4,24
    12ac:	003fe806 	br	1250 <__alt_data_end+0xff001250>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12b0:	01000204 	movi	r4,8
    12b4:	0001c740 	call	1c74 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12b8:	9009883a 	mov	r4,r18
    12bc:	0001c640 	call	1c64 <vga_set_pointer>
    12c0:	0023883a 	mov	r17,zero
    12c4:	0025883a 	mov	r18,zero
    12c8:	003f6906 	br	1070 <__alt_data_end+0xff001070>

000012cc <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12cc:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    12d0:	defffd04 	addi	sp,sp,-12
    12d4:	dc400115 	stw	r17,4(sp)
    12d8:	dc000015 	stw	r16,0(sp)
    12dc:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    12e0:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    12e4:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    12e8:	2023883a 	mov	r17,r4
    12ec:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    12f0:	10000226 	beq	r2,zero,12fc <init_sobel_arrays+0x30>
		free(sobel_x_result);
    12f4:	1009883a 	mov	r4,r2
    12f8:	0001c980 	call	1c98 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    12fc:	8c21383a 	mul	r16,r17,r16
    1300:	8423883a 	add	r17,r16,r16
    1304:	8809883a 	mov	r4,r17
    1308:	0001c840 	call	1c84 <malloc>
	if (sobel_y_result != NULL)
    130c:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1310:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    1314:	20000126 	beq	r4,zero,131c <init_sobel_arrays+0x50>
		free(sobel_y_result);
    1318:	0001c980 	call	1c98 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    131c:	8809883a 	mov	r4,r17
    1320:	0001c840 	call	1c84 <malloc>
	if (sobel_result != NULL)
    1324:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    1328:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    132c:	20000126 	beq	r4,zero,1334 <init_sobel_arrays+0x68>
		alt_uncached_free(sobel_result);
    1330:	000ea740 	call	ea74 <alt_uncached_free>
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1334:	8009883a 	mov	r4,r16
    1338:	000ea840 	call	ea84 <alt_uncached_malloc>
	if (sobel_rgb565 != NULL)
    133c:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
    1340:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    1344:	20000126 	beq	r4,zero,134c <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    1348:	0001c980 	call	1c98 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    134c:	8809883a 	mov	r4,r17
    1350:	0001c840 	call	1c84 <malloc>
    1354:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1358:	0005883a 	mov	r2,zero
    135c:	04000f0e 	bge	zero,r16,139c <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    1360:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    1364:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    1368:	d1a6d417 	ldw	r6,-25776(gp)
    136c:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1370:	40d1883a 	add	r8,r8,r3
    1374:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1378:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    137c:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1380:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    1384:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1388:	d1a6d817 	ldw	r6,-25760(gp)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    138c:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1390:	30c7883a 	add	r3,r6,r3
    1394:	1800000d 	sth	zero,0(r3)
		alt_uncached_free(sobel_result);
	sobel_result = (unsigned char *)alt_uncached_malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1398:	80bff11e 	bne	r16,r2,1360 <__alt_data_end+0xff001360>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    139c:	dfc00217 	ldw	ra,8(sp)
    13a0:	dc400117 	ldw	r17,4(sp)
    13a4:	dc000017 	ldw	r16,0(sp)
    13a8:	dec00304 	addi	sp,sp,12
    13ac:	f800283a 	ret

000013b0 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    13b0:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13b4:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13b8:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13bc:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13c0:	3b8000c7 	ldb	r14,3(r7)
    13c4:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13c8:	5185883a 	add	r2,r10,r6
    13cc:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    13d0:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    13d4:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    13d8:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13dc:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13e0:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13e4:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    13e8:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13ec:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    13f0:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    13f4:	49000043 	ldbu	r4,1(r9)
    13f8:	3a800147 	ldb	r10,5(r7)
    13fc:	139d383a 	mul	r14,r2,r14
    1400:	60d9383a 	mul	r12,r12,r3
    1404:	68800003 	ldbu	r2,0(r13)
    1408:	38c001c7 	ldb	r3,7(r7)
    140c:	5a17383a 	mul	r11,r11,r8
    1410:	33ffffc3 	ldbu	r15,-1(r6)
    1414:	3a000007 	ldb	r8,0(r7)
    1418:	2295383a 	mul	r10,r4,r10
    141c:	31000043 	ldbu	r4,1(r6)
    1420:	39800087 	ldb	r6,2(r7)
    1424:	730b883a 	add	r5,r14,r12
    1428:	10d3383a 	mul	r9,r2,r3
    142c:	6b3fffc3 	ldbu	r12,-1(r13)
    1430:	38c00187 	ldb	r3,6(r7)
    1434:	2acb883a 	add	r5,r5,r11
    1438:	7a11383a 	mul	r8,r15,r8
    143c:	6ac00043 	ldbu	r11,1(r13)
    1440:	39c00207 	ldb	r7,8(r7)
    1444:	2a8b883a 	add	r5,r5,r10
    1448:	2189383a 	mul	r4,r4,r6
    144c:	2a45883a 	add	r2,r5,r9
    1450:	60c7383a 	mul	r3,r12,r3
    1454:	1205883a 	add	r2,r2,r8
    1458:	59cb383a 	mul	r5,r11,r7
    145c:	1105883a 	add	r2,r2,r4
    1460:	10c5883a 	add	r2,r2,r3
}
    1464:	1145883a 	add	r2,r2,r5
    1468:	f800283a 	ret

0000146c <sobel_x>:

void sobel_x( unsigned char *source ) {
    146c:	defff604 	addi	sp,sp,-40
    1470:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1474:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    1478:	dfc00915 	stw	ra,36(sp)
    147c:	df000815 	stw	fp,32(sp)
    1480:	ddc00715 	stw	r23,28(sp)
    1484:	dd800615 	stw	r22,24(sp)
    1488:	dd400515 	stw	r21,20(sp)
    148c:	dd000415 	stw	r20,16(sp)
    1490:	dcc00315 	stw	r19,12(sp)
    1494:	dc800215 	stw	r18,8(sp)
    1498:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    149c:	8c7fffc4 	addi	r17,r17,-1
    14a0:	00800044 	movi	r2,1
    14a4:	14402e0e 	bge	r2,r17,1560 <sobel_x+0xf4>
    14a8:	d366d317 	ldw	r13,-25780(gp)
    14ac:	d3e6d617 	ldw	r15,-25768(gp)
    14b0:	03800084 	movi	r14,2
    14b4:	6b65883a 	add	r18,r13,r13
    14b8:	9385883a 	add	r2,r18,r14
    14bc:	2359883a 	add	r12,r4,r13
    14c0:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    14c4:	7027883a 	mov	r19,r14
    14c8:	736bc83a 	sub	r21,r14,r13
    14cc:	6ba9883a 	add	r20,r13,r14
    14d0:	9b402f0e 	bge	r19,r13,1590 <sobel_x+0x124>
    14d4:	637f883a 	add	ra,r12,r13
    14d8:	7021883a 	mov	r16,r14
    14dc:	6357c83a 	sub	r11,r12,r13
    14e0:	ab0b883a 	add	r5,r21,r12
    14e4:	62800084 	addi	r10,r12,2
    14e8:	f813883a 	mov	r9,ra
    14ec:	a311883a 	add	r8,r20,r12
    14f0:	780f883a 	mov	r7,r15
    14f4:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    14f8:	29000003 	ldbu	r4,0(r5)
    14fc:	40c00003 	ldbu	r3,0(r8)
    1500:	37000003 	ldbu	fp,0(r6)
    1504:	50800003 	ldbu	r2,0(r10)
    1508:	20c7883a 	add	r3,r4,r3
    150c:	5dc00003 	ldbu	r23,0(r11)
    1510:	1f07c83a 	sub	r3,r3,fp
    1514:	4d800003 	ldbu	r22,0(r9)
    1518:	1f09c83a 	sub	r4,r3,fp
    151c:	1087883a 	add	r3,r2,r2
    1520:	20c7883a 	add	r3,r4,r3
    1524:	1dc5c83a 	sub	r2,r3,r23
    1528:	1585c83a 	sub	r2,r2,r22
    152c:	3880000d 	sth	r2,0(r7)
    1530:	29400044 	addi	r5,r5,1
    1534:	5ac00044 	addi	r11,r11,1
    1538:	31800044 	addi	r6,r6,1
    153c:	52800044 	addi	r10,r10,1
    1540:	4a400044 	addi	r9,r9,1
    1544:	42000044 	addi	r8,r8,1
    1548:	39c00084 	addi	r7,r7,2
void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    154c:	617fea1e 	bne	r12,r5,14f8 <__alt_data_end+0xff0014f8>
    1550:	73800044 	addi	r14,r14,1
    1554:	f819883a 	mov	r12,ra
    1558:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    155c:	847fdc16 	blt	r16,r17,14d0 <__alt_data_end+0xff0014d0>
//		  result += pgx_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}
    1560:	dfc00917 	ldw	ra,36(sp)
    1564:	df000817 	ldw	fp,32(sp)
    1568:	ddc00717 	ldw	r23,28(sp)
    156c:	dd800617 	ldw	r22,24(sp)
    1570:	dd400517 	ldw	r21,20(sp)
    1574:	dd000417 	ldw	r20,16(sp)
    1578:	dcc00317 	ldw	r19,12(sp)
    157c:	dc800217 	ldw	r18,8(sp)
    1580:	dc400117 	ldw	r17,4(sp)
    1584:	dc000017 	ldw	r16,0(sp)
    1588:	dec00a04 	addi	sp,sp,40
    158c:	f800283a 	ret
    1590:	7021883a 	mov	r16,r14
    1594:	637f883a 	add	ra,r12,r13
    1598:	73800044 	addi	r14,r14,1
    159c:	f819883a 	mov	r12,ra
    15a0:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15a4:	847fca16 	blt	r16,r17,14d0 <__alt_data_end+0xff0014d0>
    15a8:	003fed06 	br	1560 <__alt_data_end+0xff001560>

000015ac <sobel_x_with_rgb>:
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15ac:	defff504 	addi	sp,sp,-44
    15b0:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15b4:	d5a6d517 	ldw	r22,-25772(gp)
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    15b8:	dfc00a15 	stw	ra,40(sp)
    15bc:	df000915 	stw	fp,36(sp)
    15c0:	ddc00815 	stw	r23,32(sp)
    15c4:	dd400615 	stw	r21,24(sp)
    15c8:	dd000515 	stw	r20,20(sp)
    15cc:	dcc00415 	stw	r19,16(sp)
    15d0:	dc800315 	stw	r18,12(sp)
    15d4:	dc400215 	stw	r17,8(sp)
    15d8:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15dc:	b5bfffc4 	addi	r22,r22,-1
    15e0:	00800044 	movi	r2,1
    15e4:	1580440e 	bge	r2,r22,16f8 <sobel_x_with_rgb+0x14c>
    15e8:	d7e6d317 	ldw	ra,-25780(gp)
    15ec:	d4a6d617 	ldw	r18,-25768(gp)
    15f0:	d466d817 	ldw	r17,-25760(gp)
    15f4:	ffe9883a 	add	r20,ra,ra
    15f8:	a0800084 	addi	r2,r20,2
    15fc:	04000084 	movi	r16,2
    1600:	90a5883a 	add	r18,r18,r2
    1604:	88a3883a 	add	r17,r17,r2
    1608:	fc05883a 	add	r2,ra,r16
    160c:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1610:	802f883a 	mov	r23,r16
    1614:	87f9c83a 	sub	fp,r16,ra
    1618:	d8800015 	stw	r2,0(sp)
    161c:	bfc02f0e 	bge	r23,ra,16dc <sobel_x_with_rgb+0x130>
    1620:	d8800017 	ldw	r2,0(sp)
    1624:	7fe7883a 	add	r19,r15,ra
    1628:	802b883a 	mov	r21,r16
    162c:	7fdbc83a 	sub	r13,r15,ra
    1630:	e3cf883a 	add	r7,fp,r15
    1634:	7b000084 	addi	r12,r15,2
    1638:	9817883a 	mov	r11,r19
    163c:	13d5883a 	add	r10,r2,r15
    1640:	881d883a 	mov	r14,r17
    1644:	9013883a 	mov	r9,r18
    1648:	7811883a 	mov	r8,r15
    164c:	00000b06 	br	167c <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1650:	180692fa 	slli	r3,r3,11
    1654:	70c0000d 	sth	r3,0(r14)
    1658:	39c00044 	addi	r7,r7,1
    165c:	6b400044 	addi	r13,r13,1
    1660:	42000044 	addi	r8,r8,1
    1664:	63000044 	addi	r12,r12,1
    1668:	5ac00044 	addi	r11,r11,1
    166c:	52800044 	addi	r10,r10,1
    1670:	4a400084 	addi	r9,r9,2
    1674:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1678:	79c01a26 	beq	r15,r7,16e4 <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    167c:	50800003 	ldbu	r2,0(r10)
    1680:	39400003 	ldbu	r5,0(r7)
    1684:	41800003 	ldbu	r6,0(r8)
    1688:	60c00003 	ldbu	r3,0(r12)
    168c:	288b883a 	add	r5,r5,r2
    1690:	298bc83a 	sub	r5,r5,r6
    1694:	68800003 	ldbu	r2,0(r13)
    1698:	59000003 	ldbu	r4,0(r11)
    169c:	298bc83a 	sub	r5,r5,r6
    16a0:	18c7883a 	add	r3,r3,r3
    16a4:	28c7883a 	add	r3,r5,r3
    16a8:	1887c83a 	sub	r3,r3,r2
    16ac:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    16b0:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    16b4:	10bfffcc 	andi	r2,r2,65535
    16b8:	10a0001c 	xori	r2,r2,32768
    16bc:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16c0:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    16c4:	103fe20e 	bge	r2,zero,1650 <__alt_data_end+0xff001650>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    16c8:	0085c83a 	sub	r2,zero,r2
    16cc:	1005d0ba 	srai	r2,r2,2
    16d0:	1004917a 	slli	r2,r2,5
    16d4:	7080000d 	sth	r2,0(r14)
    16d8:	003fdf06 	br	1658 <__alt_data_end+0xff001658>
    16dc:	802b883a 	mov	r21,r16
    16e0:	7fe7883a 	add	r19,r15,ra
    16e4:	84000044 	addi	r16,r16,1
    16e8:	981f883a 	mov	r15,r19
    16ec:	9525883a 	add	r18,r18,r20
    16f0:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    16f4:	adbfc916 	blt	r21,r22,161c <__alt_data_end+0xff00161c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    16f8:	dfc00a17 	ldw	ra,40(sp)
    16fc:	df000917 	ldw	fp,36(sp)
    1700:	ddc00817 	ldw	r23,32(sp)
    1704:	dd800717 	ldw	r22,28(sp)
    1708:	dd400617 	ldw	r21,24(sp)
    170c:	dd000517 	ldw	r20,20(sp)
    1710:	dcc00417 	ldw	r19,16(sp)
    1714:	dc800317 	ldw	r18,12(sp)
    1718:	dc400217 	ldw	r17,8(sp)
    171c:	dc000117 	ldw	r16,4(sp)
    1720:	dec00b04 	addi	sp,sp,44
    1724:	f800283a 	ret

00001728 <sobel_y>:

void sobel_y( unsigned char *source ) {
    1728:	defff704 	addi	sp,sp,-36
    172c:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1730:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    1734:	dfc00815 	stw	ra,32(sp)
    1738:	ddc00715 	stw	r23,28(sp)
    173c:	dd800615 	stw	r22,24(sp)
    1740:	dd400515 	stw	r21,20(sp)
    1744:	dd000415 	stw	r20,16(sp)
    1748:	dcc00315 	stw	r19,12(sp)
    174c:	dc800215 	stw	r18,8(sp)
    1750:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1754:	8c7fffc4 	addi	r17,r17,-1
    1758:	00800044 	movi	r2,1
    175c:	14402d0e 	bge	r2,r17,1814 <sobel_y+0xec>
    1760:	d3e6d317 	ldw	r15,-25780(gp)
    1764:	d3a6d717 	ldw	r14,-25764(gp)
    1768:	03400084 	movi	r13,2
    176c:	7bff883a 	add	ra,r15,r15
    1770:	fb67883a 	add	r19,ra,r13
    1774:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1778:	6825883a 	mov	r18,r13
    177c:	f8a9883a 	add	r20,ra,r2
    1780:	6821883a 	mov	r16,r13
    1784:	93c01f0e 	bge	r18,r15,1804 <sobel_y+0xdc>
    1788:	27cd883a 	add	r6,r4,ra
    178c:	6821883a 	mov	r16,r13
    1790:	22c00044 	addi	r11,r4,1
    1794:	22800084 	addi	r10,r4,2
    1798:	a113883a 	add	r9,r20,r4
    179c:	990b883a 	add	r5,r19,r4
    17a0:	7999883a 	add	r12,r15,r6
    17a4:	7011883a 	mov	r8,r14
    17a8:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    17ac:	3d800003 	ldbu	r22,0(r7)
    17b0:	50c00003 	ldbu	r3,0(r10)
    17b4:	58800003 	ldbu	r2,0(r11)
    17b8:	4d400003 	ldbu	r21,0(r9)
    17bc:	b0c7883a 	add	r3,r22,r3
    17c0:	1085883a 	add	r2,r2,r2
    17c4:	35c00003 	ldbu	r23,0(r6)
    17c8:	1887883a 	add	r3,r3,r2
    17cc:	2d800003 	ldbu	r22,0(r5)
    17d0:	1d47c83a 	sub	r3,r3,r21
    17d4:	1d47c83a 	sub	r3,r3,r21
    17d8:	1dc5c83a 	sub	r2,r3,r23
    17dc:	1585c83a 	sub	r2,r2,r22
    17e0:	4080000d 	sth	r2,0(r8)
    17e4:	29400044 	addi	r5,r5,1
    17e8:	39c00044 	addi	r7,r7,1
    17ec:	5ac00044 	addi	r11,r11,1
    17f0:	52800044 	addi	r10,r10,1
    17f4:	31800044 	addi	r6,r6,1
    17f8:	4a400044 	addi	r9,r9,1
    17fc:	42000084 	addi	r8,r8,2
void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1800:	617fea1e 	bne	r12,r5,17ac <__alt_data_end+0xff0017ac>
    1804:	6b400044 	addi	r13,r13,1
    1808:	23c9883a 	add	r4,r4,r15
    180c:	77dd883a 	add	r14,r14,ra

void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1810:	847fdb16 	blt	r16,r17,1780 <__alt_data_end+0xff001780>
//		  result += pgy_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}
    1814:	dfc00817 	ldw	ra,32(sp)
    1818:	ddc00717 	ldw	r23,28(sp)
    181c:	dd800617 	ldw	r22,24(sp)
    1820:	dd400517 	ldw	r21,20(sp)
    1824:	dd000417 	ldw	r20,16(sp)
    1828:	dcc00317 	ldw	r19,12(sp)
    182c:	dc800217 	ldw	r18,8(sp)
    1830:	dc400117 	ldw	r17,4(sp)
    1834:	dc000017 	ldw	r16,0(sp)
    1838:	dec00904 	addi	sp,sp,36
    183c:	f800283a 	ret

00001840 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    1840:	defff604 	addi	sp,sp,-40
    1844:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1848:	d4e6d517 	ldw	r19,-25772(gp)
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    184c:	dfc00915 	stw	ra,36(sp)
    1850:	df000815 	stw	fp,32(sp)
    1854:	ddc00715 	stw	r23,28(sp)
    1858:	dd800615 	stw	r22,24(sp)
    185c:	dd400515 	stw	r21,20(sp)
    1860:	dd000415 	stw	r20,16(sp)
    1864:	dc800215 	stw	r18,8(sp)
    1868:	dc400115 	stw	r17,4(sp)
    186c:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1870:	9cffffc4 	addi	r19,r19,-1
    1874:	00800044 	movi	r2,1
    1878:	14c03f0e 	bge	r2,r19,1978 <sobel_y_with_rgb+0x138>
    187c:	d466d317 	ldw	r17,-25780(gp)
    1880:	d426d717 	ldw	r16,-25764(gp)
    1884:	d7e6d817 	ldw	ra,-25760(gp)
    1888:	8c5d883a 	add	r14,r17,r17
    188c:	75000084 	addi	r20,r14,2
    1890:	03c00084 	movi	r15,2
    1894:	8521883a 	add	r16,r16,r20
    1898:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    189c:	782b883a 	mov	r21,r15
    18a0:	70ad883a 	add	r22,r14,r2
    18a4:	7825883a 	mov	r18,r15
    18a8:	ac402e0e 	bge	r21,r17,1964 <sobel_y_with_rgb+0x124>
    18ac:	238d883a 	add	r6,r4,r14
    18b0:	7825883a 	mov	r18,r15
    18b4:	22c00044 	addi	r11,r4,1
    18b8:	22800084 	addi	r10,r4,2
    18bc:	b113883a 	add	r9,r22,r4
    18c0:	a10b883a 	add	r5,r20,r4
    18c4:	899b883a 	add	r13,r17,r6
    18c8:	f819883a 	mov	r12,ra
    18cc:	8011883a 	mov	r8,r16
    18d0:	200f883a 	mov	r7,r4
    18d4:	00000b06 	br	1904 <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    18d8:	180692fa 	slli	r3,r3,11
    18dc:	60c0000d 	sth	r3,0(r12)
    18e0:	29400044 	addi	r5,r5,1
    18e4:	39c00044 	addi	r7,r7,1
    18e8:	5ac00044 	addi	r11,r11,1
    18ec:	52800044 	addi	r10,r10,1
    18f0:	31800044 	addi	r6,r6,1
    18f4:	4a400044 	addi	r9,r9,1
    18f8:	42000084 	addi	r8,r8,2
    18fc:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1900:	69401826 	beq	r13,r5,1964 <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1904:	50800003 	ldbu	r2,0(r10)
    1908:	3f000003 	ldbu	fp,0(r7)
    190c:	58c00003 	ldbu	r3,0(r11)
    1910:	4dc00003 	ldbu	r23,0(r9)
    1914:	e0b9883a 	add	fp,fp,r2
    1918:	18c7883a 	add	r3,r3,r3
    191c:	30800003 	ldbu	r2,0(r6)
    1920:	e0c7883a 	add	r3,fp,r3
    1924:	1dc7c83a 	sub	r3,r3,r23
    1928:	2f000003 	ldbu	fp,0(r5)
    192c:	1dc7c83a 	sub	r3,r3,r23
    1930:	1885c83a 	sub	r2,r3,r2
    1934:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    1938:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    193c:	10bfffcc 	andi	r2,r2,65535
    1940:	10a0001c 	xori	r2,r2,32768
    1944:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1948:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    194c:	103fe20e 	bge	r2,zero,18d8 <__alt_data_end+0xff0018d8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1950:	0085c83a 	sub	r2,zero,r2
    1954:	1005d0ba 	srai	r2,r2,2
    1958:	1004917a 	slli	r2,r2,5
    195c:	6080000d 	sth	r2,0(r12)
    1960:	003fdf06 	br	18e0 <__alt_data_end+0xff0018e0>
    1964:	7bc00044 	addi	r15,r15,1
    1968:	2449883a 	add	r4,r4,r17
    196c:	83a1883a 	add	r16,r16,r14
    1970:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1974:	94ffcb16 	blt	r18,r19,18a4 <__alt_data_end+0xff0018a4>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1978:	dfc00917 	ldw	ra,36(sp)
    197c:	df000817 	ldw	fp,32(sp)
    1980:	ddc00717 	ldw	r23,28(sp)
    1984:	dd800617 	ldw	r22,24(sp)
    1988:	dd400517 	ldw	r21,20(sp)
    198c:	dd000417 	ldw	r20,16(sp)
    1990:	dcc00317 	ldw	r19,12(sp)
    1994:	dc800217 	ldw	r18,8(sp)
    1998:	dc400117 	ldw	r17,4(sp)
    199c:	dc000017 	ldw	r16,0(sp)
    19a0:	dec00a04 	addi	sp,sp,40
    19a4:	f800283a 	ret

000019a8 <sobel_threshold>:

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    19a8:	d0a6d317 	ldw	r2,-25780(gp)
    19ac:	d2a6d517 	ldw	r10,-25772(gp)
	for(k = 1; k<kmax; k++)
    19b0:	01800044 	movi	r6,1
}

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    19b4:	5095383a 	mul	r10,r10,r2
	for(k = 1; k<kmax; k++)
    19b8:	3280210e 	bge	r6,r10,1a40 <sobel_threshold+0x98>
    19bc:	213fffcc 	andi	r4,r4,65535
    19c0:	2120001c 	xori	r4,r4,32768
    19c4:	21200004 	addi	r4,r4,-32768
	{
		value = sobel_x_result[k];
    19c8:	d166d617 	ldw	r5,-25768(gp)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19cc:	d0e6d717 	ldw	r3,-25764(gp)
    19d0:	3185883a 	add	r2,r6,r6
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    19d4:	288b883a 	add	r5,r5,r2
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19d8:	1887883a 	add	r3,r3,r2
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    19dc:	2880000b 	ldhu	r2,0(r5)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    19e0:	1940000b 	ldhu	r5,0(r3)
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    19e4:	d266d417 	ldw	r9,-25776(gp)
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19e8:	11ffffcc 	andi	r7,r2,65535
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19ec:	2a3fffcc 	andi	r8,r5,65535
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19f0:	39e0001c 	xori	r7,r7,32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19f4:	4220001c 	xori	r8,r8,32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19f8:	39e00004 	addi	r7,r7,-32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    19fc:	42200004 	addi	r8,r8,-32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a00:	380fd7fa 	srai	r7,r7,31
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a04:	4011d7fa 	srai	r8,r8,31
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a08:	4993883a 	add	r9,r9,r6
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a0c:	3887883a 	add	r3,r7,r2
    1a10:	414b883a 	add	r5,r8,r5
    1a14:	414af03a 	xor	r5,r8,r5
    1a18:	38c4f03a 	xor	r2,r7,r3
    1a1c:	2885883a 	add	r2,r5,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a20:	10bfffcc 	andi	r2,r2,65535
    1a24:	10a0001c 	xori	r2,r2,32768
    1a28:	10a00004 	addi	r2,r2,-32768
    1a2c:	2084803a 	cmplt	r2,r4,r2
    1a30:	0085c83a 	sub	r2,zero,r2
    1a34:	48800005 	stb	r2,0(r9)

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
    1a38:	31800044 	addi	r6,r6,1
    1a3c:	51bfe21e 	bne	r10,r6,19c8 <__alt_data_end+0xff0019c8>
    1a40:	f800283a 	ret

00001a44 <sobel_complete>:
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a44:	defff604 	addi	sp,sp,-40
    1a48:	dc800215 	stw	r18,8(sp)
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
    1a4c:	d3a6d517 	ldw	r14,-25772(gp)
    1a50:	d4a6d317 	ldw	r18,-25780(gp)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a54:	dfc00915 	stw	ra,36(sp)
    1a58:	df000815 	stw	fp,32(sp)
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
    1a5c:	939d383a 	mul	r14,r18,r14
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source, short threshold)
{
    1a60:	ddc00715 	stw	r23,28(sp)
    1a64:	dd800615 	stw	r22,24(sp)
    1a68:	dd400515 	stw	r21,20(sp)
    1a6c:	dd000415 	stw	r20,16(sp)
    1a70:	dcc00315 	stw	r19,12(sp)
    1a74:	dc400115 	stw	r17,4(sp)
    1a78:	dc000015 	stw	r16,0(sp)
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
    1a7c:	00800044 	movi	r2,1
    1a80:	1380680e 	bge	r2,r14,1c24 <sobel_complete+0x1e0>
    1a84:	d1e6d617 	ldw	r7,-25768(gp)
    1a88:	0491c83a 	sub	r8,zero,r18
    1a8c:	2219883a 	add	r12,r4,r8
    1a90:	2495c83a 	sub	r10,r4,r18
    1a94:	9497883a 	add	r11,r18,r18
    1a98:	92400084 	addi	r9,r18,2
    1a9c:	52800084 	addi	r10,r10,2
    1aa0:	62e9883a 	add	r20,r12,r11
    1aa4:	2253883a 	add	r9,r4,r9
    1aa8:	70a7883a 	add	r19,r14,r2
    1aac:	2023883a 	mov	r17,r4
    1ab0:	21800084 	addi	r6,r4,2
    1ab4:	a021883a 	mov	r16,r20
    1ab8:	3fc00084 	addi	ra,r7,2
    1abc:	24e7883a 	add	r19,r4,r19
    1ac0:	481f883a 	mov	r15,r9
    1ac4:	501b883a 	mov	r13,r10
     result -= (source[k-1]<<1);			// x<<1 <=> x*=2
     // omitted line due to result += 0;
     result += (source[k+1]<<1);			// x<<1 <=> x*=2
     result -= source[k+sobel_width-1];
     // omitted line due to result += 0;
     result += source[k+sobel_width+1];
    1ac8:	6d400003 	ldbu	r21,0(r13)
    1acc:	7dc00003 	ldbu	r23,0(r15)
    1ad0:	67000003 	ldbu	fp,0(r12)
    1ad4:	30c00003 	ldbu	r3,0(r6)
    1ad8:	80800003 	ldbu	r2,0(r16)
    1adc:	8d800003 	ldbu	r22,0(r17)
    1ae0:	adeb883a 	add	r21,r21,r23
    1ae4:	af2bc83a 	sub	r21,r21,fp
    1ae8:	18c7883a 	add	r3,r3,r3
    1aec:	a8c7883a 	add	r3,r21,r3
    1af0:	1887c83a 	sub	r3,r3,r2
    1af4:	b5ad883a 	add	r22,r22,r22
    1af8:	1d85c83a 	sub	r2,r3,r22
     sobel_x_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
    1afc:	10ffffcc 	andi	r3,r2,65535
    1b00:	18e0001c 	xori	r3,r3,32768
    1b04:	18e00004 	addi	r3,r3,-32768
    1b08:	1807d7fa 	srai	r3,r3,31
    1b0c:	31800044 	addi	r6,r6,1
    1b10:	63000044 	addi	r12,r12,1
    1b14:	10c5883a 	add	r2,r2,r3
    1b18:	1884f03a 	xor	r2,r3,r2
    1b1c:	f880000d 	sth	r2,0(ra)
    1b20:	6b400044 	addi	r13,r13,1
    1b24:	8c400044 	addi	r17,r17,1
    1b28:	84000044 	addi	r16,r16,1
    1b2c:	7bc00044 	addi	r15,r15,1
    1b30:	ffc00084 	addi	ra,ra,2
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int k;
   int kmax = sobel_height*sobel_width;
   for(k = 1; k<kmax; k++)
    1b34:	34ffe41e 	bne	r6,r19,1ac8 <__alt_data_end+0xff001ac8>
    1b38:	d366d717 	ldw	r13,-25764(gp)
    1b3c:	4211883a 	add	r8,r8,r8
    1b40:	249fc83a 	sub	r15,r4,r18
    1b44:	a229883a 	add	r20,r20,r8
    1b48:	92000044 	addi	r8,r18,1
    1b4c:	74a5c83a 	sub	r18,r14,r18
    1b50:	2211883a 	add	r8,r4,r8
    1b54:	7bc00044 	addi	r15,r15,1
    1b58:	a2d7883a 	add	r11,r20,r11
    1b5c:	6c000084 	addi	r16,r13,2
    1b60:	2489883a 	add	r4,r4,r18
     result += (source[k-sobel_width]<<1);	// x<<1 <=> x*=2
     result += source[k-sobel_width+1];
     // omitted line due to result += 0;
     result -= source[k+sobel_width-1];
     result -= (source[k+sobel_width]<<1);	// x<<1 <=> x*=2
     result -= source[k+sobel_width+1];
    1b64:	51800003 	ldbu	r6,0(r10)
    1b68:	78c00003 	ldbu	r3,0(r15)
    1b6c:	a4400003 	ldbu	r17,0(r20)
    1b70:	5c800003 	ldbu	r18,0(r11)
    1b74:	48800003 	ldbu	r2,0(r9)
    1b78:	43000003 	ldbu	r12,0(r8)
    1b7c:	89a3883a 	add	r17,r17,r6
    1b80:	18cd883a 	add	r6,r3,r3
    1b84:	898d883a 	add	r6,r17,r6
    1b88:	3487c83a 	sub	r3,r6,r18
    1b8c:	1887c83a 	sub	r3,r3,r2
    1b90:	6319883a 	add	r12,r12,r12
    1b94:	1b05c83a 	sub	r2,r3,r12
     sobel_y_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
    1b98:	10ffffcc 	andi	r3,r2,65535
    1b9c:	18e0001c 	xori	r3,r3,32768
    1ba0:	18e00004 	addi	r3,r3,-32768
    1ba4:	1807d7fa 	srai	r3,r3,31
    1ba8:	7bc00044 	addi	r15,r15,1
    1bac:	a5000044 	addi	r20,r20,1
    1bb0:	10c5883a 	add	r2,r2,r3
    1bb4:	1884f03a 	xor	r2,r3,r2
    1bb8:	8080000d 	sth	r2,0(r16)
    1bbc:	52800044 	addi	r10,r10,1
    1bc0:	5ac00044 	addi	r11,r11,1
    1bc4:	42000044 	addi	r8,r8,1
    1bc8:	4a400044 	addi	r9,r9,1
    1bcc:	84000084 	addi	r16,r16,2
     // omitted line due to result += 0;
     result += source[k+sobel_width+1];
     sobel_x_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
     result = 0;
   }
   for(k = 1; k<kmax; k++)
    1bd0:	23ffe41e 	bne	r4,r15,1b64 <__alt_data_end+0xff001b64>
    1bd4:	297fffcc 	andi	r5,r5,65535
    1bd8:	2960001c 	xori	r5,r5,32768
    1bdc:	29600004 	addi	r5,r5,-32768
    1be0:	00c00044 	movi	r3,1
    1be4:	00000206 	br	1bf0 <sobel_complete+0x1ac>
    1be8:	d1e6d617 	ldw	r7,-25768(gp)
    1bec:	d366d717 	ldw	r13,-25764(gp)
    1bf0:	18c5883a 	add	r2,r3,r3
     result = 0;
   }
   for(k = 1; k<kmax; k++)		// even if sobel_result doesn't use the cache, it is faster to create another loop here (because sobel x,y are using the cache)
   {
     // sobel_threshold in-lining
     sobel_result[k] = ((sobel_x_result[k]+sobel_y_result[k]) > threshold) ? 0xFF : 0;
    1bf4:	388f883a 	add	r7,r7,r2
    1bf8:	6889883a 	add	r4,r13,r2
    1bfc:	2080000f 	ldh	r2,0(r4)
    1c00:	3980000f 	ldh	r6,0(r7)
    1c04:	d126d417 	ldw	r4,-25776(gp)
    1c08:	3085883a 	add	r2,r6,r2
    1c0c:	2884803a 	cmplt	r2,r5,r2
    1c10:	20c9883a 	add	r4,r4,r3
    1c14:	0085c83a 	sub	r2,zero,r2
    1c18:	20800005 	stb	r2,0(r4)
     result -= (source[k+sobel_width]<<1);	// x<<1 <=> x*=2
     result -= source[k+sobel_width+1];
     sobel_y_result[k] = (result + (result >> 31)) ^ (result >> 31);	// stock directly abs value in result array (for threshold purpose)
     result = 0;
   }
   for(k = 1; k<kmax; k++)		// even if sobel_result doesn't use the cache, it is faster to create another loop here (because sobel x,y are using the cache)
    1c1c:	18c00044 	addi	r3,r3,1
    1c20:	1bbff116 	blt	r3,r14,1be8 <__alt_data_end+0xff001be8>
   {
     // sobel_threshold in-lining
     sobel_result[k] = ((sobel_x_result[k]+sobel_y_result[k]) > threshold) ? 0xFF : 0;
   }
}
    1c24:	dfc00917 	ldw	ra,36(sp)
    1c28:	df000817 	ldw	fp,32(sp)
    1c2c:	ddc00717 	ldw	r23,28(sp)
    1c30:	dd800617 	ldw	r22,24(sp)
    1c34:	dd400517 	ldw	r21,20(sp)
    1c38:	dd000417 	ldw	r20,16(sp)
    1c3c:	dcc00317 	ldw	r19,12(sp)
    1c40:	dc800217 	ldw	r18,8(sp)
    1c44:	dc400117 	ldw	r17,4(sp)
    1c48:	dc000017 	ldw	r16,0(sp)
    1c4c:	dec00a04 	addi	sp,sp,40
    1c50:	f800283a 	ret

00001c54 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1c54:	d0a6d817 	ldw	r2,-25760(gp)
    1c58:	f800283a 	ret

00001c5c <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1c5c:	d0a6d417 	ldw	r2,-25776(gp)
    1c60:	f800283a 	ret

00001c64 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1c64:	00804034 	movhi	r2,256
    1c68:	10843404 	addi	r2,r2,4304
    1c6c:	11000035 	stwio	r4,0(r2)
    1c70:	f800283a 	ret

00001c74 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1c74:	00804034 	movhi	r2,256
    1c78:	10843504 	addi	r2,r2,4308
    1c7c:	11000025 	stbio	r4,0(r2)
    1c80:	f800283a 	ret

00001c84 <malloc>:
    1c84:	00800074 	movhi	r2,1
    1c88:	1088f004 	addi	r2,r2,9152
    1c8c:	200b883a 	mov	r5,r4
    1c90:	11000017 	ldw	r4,0(r2)
    1c94:	0001cac1 	jmpi	1cac <_malloc_r>

00001c98 <free>:
    1c98:	00800074 	movhi	r2,1
    1c9c:	1088f004 	addi	r2,r2,9152
    1ca0:	200b883a 	mov	r5,r4
    1ca4:	11000017 	ldw	r4,0(r2)
    1ca8:	0006afc1 	jmpi	6afc <_free_r>

00001cac <_malloc_r>:
    1cac:	defff504 	addi	sp,sp,-44
    1cb0:	dc800315 	stw	r18,12(sp)
    1cb4:	dfc00a15 	stw	ra,40(sp)
    1cb8:	df000915 	stw	fp,36(sp)
    1cbc:	ddc00815 	stw	r23,32(sp)
    1cc0:	dd800715 	stw	r22,28(sp)
    1cc4:	dd400615 	stw	r21,24(sp)
    1cc8:	dd000515 	stw	r20,20(sp)
    1ccc:	dcc00415 	stw	r19,16(sp)
    1cd0:	dc400215 	stw	r17,8(sp)
    1cd4:	dc000115 	stw	r16,4(sp)
    1cd8:	288002c4 	addi	r2,r5,11
    1cdc:	00c00584 	movi	r3,22
    1ce0:	2025883a 	mov	r18,r4
    1ce4:	18807f2e 	bgeu	r3,r2,1ee4 <_malloc_r+0x238>
    1ce8:	047ffe04 	movi	r17,-8
    1cec:	1462703a 	and	r17,r2,r17
    1cf0:	8800a316 	blt	r17,zero,1f80 <_malloc_r+0x2d4>
    1cf4:	8940a236 	bltu	r17,r5,1f80 <_malloc_r+0x2d4>
    1cf8:	000e9340 	call	e934 <__malloc_lock>
    1cfc:	00807dc4 	movi	r2,503
    1d00:	1441e92e 	bgeu	r2,r17,24a8 <_malloc_r+0x7fc>
    1d04:	8804d27a 	srli	r2,r17,9
    1d08:	1000a126 	beq	r2,zero,1f90 <_malloc_r+0x2e4>
    1d0c:	00c00104 	movi	r3,4
    1d10:	18811e36 	bltu	r3,r2,218c <_malloc_r+0x4e0>
    1d14:	8804d1ba 	srli	r2,r17,6
    1d18:	12000e44 	addi	r8,r2,57
    1d1c:	11c00e04 	addi	r7,r2,56
    1d20:	4209883a 	add	r4,r8,r8
    1d24:	04c00074 	movhi	r19,1
    1d28:	2109883a 	add	r4,r4,r4
    1d2c:	9cc24004 	addi	r19,r19,2304
    1d30:	2109883a 	add	r4,r4,r4
    1d34:	9909883a 	add	r4,r19,r4
    1d38:	24000117 	ldw	r16,4(r4)
    1d3c:	213ffe04 	addi	r4,r4,-8
    1d40:	24009726 	beq	r4,r16,1fa0 <_malloc_r+0x2f4>
    1d44:	80800117 	ldw	r2,4(r16)
    1d48:	01bfff04 	movi	r6,-4
    1d4c:	014003c4 	movi	r5,15
    1d50:	1184703a 	and	r2,r2,r6
    1d54:	1447c83a 	sub	r3,r2,r17
    1d58:	28c00716 	blt	r5,r3,1d78 <_malloc_r+0xcc>
    1d5c:	1800920e 	bge	r3,zero,1fa8 <_malloc_r+0x2fc>
    1d60:	84000317 	ldw	r16,12(r16)
    1d64:	24008e26 	beq	r4,r16,1fa0 <_malloc_r+0x2f4>
    1d68:	80800117 	ldw	r2,4(r16)
    1d6c:	1184703a 	and	r2,r2,r6
    1d70:	1447c83a 	sub	r3,r2,r17
    1d74:	28fff90e 	bge	r5,r3,1d5c <__alt_data_end+0xff001d5c>
    1d78:	3809883a 	mov	r4,r7
    1d7c:	01800074 	movhi	r6,1
    1d80:	9c000417 	ldw	r16,16(r19)
    1d84:	31824004 	addi	r6,r6,2304
    1d88:	32000204 	addi	r8,r6,8
    1d8c:	82013426 	beq	r16,r8,2260 <_malloc_r+0x5b4>
    1d90:	80c00117 	ldw	r3,4(r16)
    1d94:	00bfff04 	movi	r2,-4
    1d98:	188e703a 	and	r7,r3,r2
    1d9c:	3c45c83a 	sub	r2,r7,r17
    1da0:	00c003c4 	movi	r3,15
    1da4:	18811f16 	blt	r3,r2,2224 <_malloc_r+0x578>
    1da8:	32000515 	stw	r8,20(r6)
    1dac:	32000415 	stw	r8,16(r6)
    1db0:	10007f0e 	bge	r2,zero,1fb0 <_malloc_r+0x304>
    1db4:	00807fc4 	movi	r2,511
    1db8:	11c0fd36 	bltu	r2,r7,21b0 <_malloc_r+0x504>
    1dbc:	3806d0fa 	srli	r3,r7,3
    1dc0:	01c00044 	movi	r7,1
    1dc4:	30800117 	ldw	r2,4(r6)
    1dc8:	19400044 	addi	r5,r3,1
    1dcc:	294b883a 	add	r5,r5,r5
    1dd0:	1807d0ba 	srai	r3,r3,2
    1dd4:	294b883a 	add	r5,r5,r5
    1dd8:	294b883a 	add	r5,r5,r5
    1ddc:	298b883a 	add	r5,r5,r6
    1de0:	38c6983a 	sll	r3,r7,r3
    1de4:	29c00017 	ldw	r7,0(r5)
    1de8:	2a7ffe04 	addi	r9,r5,-8
    1dec:	1886b03a 	or	r3,r3,r2
    1df0:	82400315 	stw	r9,12(r16)
    1df4:	81c00215 	stw	r7,8(r16)
    1df8:	30c00115 	stw	r3,4(r6)
    1dfc:	2c000015 	stw	r16,0(r5)
    1e00:	3c000315 	stw	r16,12(r7)
    1e04:	2005d0ba 	srai	r2,r4,2
    1e08:	01400044 	movi	r5,1
    1e0c:	288a983a 	sll	r5,r5,r2
    1e10:	19406f36 	bltu	r3,r5,1fd0 <_malloc_r+0x324>
    1e14:	28c4703a 	and	r2,r5,r3
    1e18:	10000a1e 	bne	r2,zero,1e44 <_malloc_r+0x198>
    1e1c:	00bfff04 	movi	r2,-4
    1e20:	294b883a 	add	r5,r5,r5
    1e24:	2088703a 	and	r4,r4,r2
    1e28:	28c4703a 	and	r2,r5,r3
    1e2c:	21000104 	addi	r4,r4,4
    1e30:	1000041e 	bne	r2,zero,1e44 <_malloc_r+0x198>
    1e34:	294b883a 	add	r5,r5,r5
    1e38:	28c4703a 	and	r2,r5,r3
    1e3c:	21000104 	addi	r4,r4,4
    1e40:	103ffc26 	beq	r2,zero,1e34 <__alt_data_end+0xff001e34>
    1e44:	02bfff04 	movi	r10,-4
    1e48:	024003c4 	movi	r9,15
    1e4c:	21800044 	addi	r6,r4,1
    1e50:	318d883a 	add	r6,r6,r6
    1e54:	318d883a 	add	r6,r6,r6
    1e58:	318d883a 	add	r6,r6,r6
    1e5c:	998d883a 	add	r6,r19,r6
    1e60:	333ffe04 	addi	r12,r6,-8
    1e64:	2017883a 	mov	r11,r4
    1e68:	31800104 	addi	r6,r6,4
    1e6c:	34000017 	ldw	r16,0(r6)
    1e70:	31fffd04 	addi	r7,r6,-12
    1e74:	81c0041e 	bne	r16,r7,1e88 <_malloc_r+0x1dc>
    1e78:	0000fb06 	br	2268 <_malloc_r+0x5bc>
    1e7c:	1801030e 	bge	r3,zero,228c <_malloc_r+0x5e0>
    1e80:	84000317 	ldw	r16,12(r16)
    1e84:	81c0f826 	beq	r16,r7,2268 <_malloc_r+0x5bc>
    1e88:	80800117 	ldw	r2,4(r16)
    1e8c:	1284703a 	and	r2,r2,r10
    1e90:	1447c83a 	sub	r3,r2,r17
    1e94:	48fff90e 	bge	r9,r3,1e7c <__alt_data_end+0xff001e7c>
    1e98:	80800317 	ldw	r2,12(r16)
    1e9c:	81000217 	ldw	r4,8(r16)
    1ea0:	89400054 	ori	r5,r17,1
    1ea4:	81400115 	stw	r5,4(r16)
    1ea8:	20800315 	stw	r2,12(r4)
    1eac:	11000215 	stw	r4,8(r2)
    1eb0:	8463883a 	add	r17,r16,r17
    1eb4:	9c400515 	stw	r17,20(r19)
    1eb8:	9c400415 	stw	r17,16(r19)
    1ebc:	18800054 	ori	r2,r3,1
    1ec0:	88800115 	stw	r2,4(r17)
    1ec4:	8a000315 	stw	r8,12(r17)
    1ec8:	8a000215 	stw	r8,8(r17)
    1ecc:	88e3883a 	add	r17,r17,r3
    1ed0:	88c00015 	stw	r3,0(r17)
    1ed4:	9009883a 	mov	r4,r18
    1ed8:	000e9380 	call	e938 <__malloc_unlock>
    1edc:	80800204 	addi	r2,r16,8
    1ee0:	00001b06 	br	1f50 <_malloc_r+0x2a4>
    1ee4:	04400404 	movi	r17,16
    1ee8:	89402536 	bltu	r17,r5,1f80 <_malloc_r+0x2d4>
    1eec:	000e9340 	call	e934 <__malloc_lock>
    1ef0:	00800184 	movi	r2,6
    1ef4:	01000084 	movi	r4,2
    1ef8:	04c00074 	movhi	r19,1
    1efc:	1085883a 	add	r2,r2,r2
    1f00:	9cc24004 	addi	r19,r19,2304
    1f04:	1085883a 	add	r2,r2,r2
    1f08:	9885883a 	add	r2,r19,r2
    1f0c:	14000117 	ldw	r16,4(r2)
    1f10:	10fffe04 	addi	r3,r2,-8
    1f14:	80c0d926 	beq	r16,r3,227c <_malloc_r+0x5d0>
    1f18:	80c00117 	ldw	r3,4(r16)
    1f1c:	81000317 	ldw	r4,12(r16)
    1f20:	00bfff04 	movi	r2,-4
    1f24:	1884703a 	and	r2,r3,r2
    1f28:	81400217 	ldw	r5,8(r16)
    1f2c:	8085883a 	add	r2,r16,r2
    1f30:	10c00117 	ldw	r3,4(r2)
    1f34:	29000315 	stw	r4,12(r5)
    1f38:	21400215 	stw	r5,8(r4)
    1f3c:	18c00054 	ori	r3,r3,1
    1f40:	10c00115 	stw	r3,4(r2)
    1f44:	9009883a 	mov	r4,r18
    1f48:	000e9380 	call	e938 <__malloc_unlock>
    1f4c:	80800204 	addi	r2,r16,8
    1f50:	dfc00a17 	ldw	ra,40(sp)
    1f54:	df000917 	ldw	fp,36(sp)
    1f58:	ddc00817 	ldw	r23,32(sp)
    1f5c:	dd800717 	ldw	r22,28(sp)
    1f60:	dd400617 	ldw	r21,24(sp)
    1f64:	dd000517 	ldw	r20,20(sp)
    1f68:	dcc00417 	ldw	r19,16(sp)
    1f6c:	dc800317 	ldw	r18,12(sp)
    1f70:	dc400217 	ldw	r17,8(sp)
    1f74:	dc000117 	ldw	r16,4(sp)
    1f78:	dec00b04 	addi	sp,sp,44
    1f7c:	f800283a 	ret
    1f80:	00800304 	movi	r2,12
    1f84:	90800015 	stw	r2,0(r18)
    1f88:	0005883a 	mov	r2,zero
    1f8c:	003ff006 	br	1f50 <__alt_data_end+0xff001f50>
    1f90:	01002004 	movi	r4,128
    1f94:	02001004 	movi	r8,64
    1f98:	01c00fc4 	movi	r7,63
    1f9c:	003f6106 	br	1d24 <__alt_data_end+0xff001d24>
    1fa0:	4009883a 	mov	r4,r8
    1fa4:	003f7506 	br	1d7c <__alt_data_end+0xff001d7c>
    1fa8:	81000317 	ldw	r4,12(r16)
    1fac:	003fde06 	br	1f28 <__alt_data_end+0xff001f28>
    1fb0:	81c5883a 	add	r2,r16,r7
    1fb4:	11400117 	ldw	r5,4(r2)
    1fb8:	9009883a 	mov	r4,r18
    1fbc:	29400054 	ori	r5,r5,1
    1fc0:	11400115 	stw	r5,4(r2)
    1fc4:	000e9380 	call	e938 <__malloc_unlock>
    1fc8:	80800204 	addi	r2,r16,8
    1fcc:	003fe006 	br	1f50 <__alt_data_end+0xff001f50>
    1fd0:	9c000217 	ldw	r16,8(r19)
    1fd4:	00bfff04 	movi	r2,-4
    1fd8:	85800117 	ldw	r22,4(r16)
    1fdc:	b0ac703a 	and	r22,r22,r2
    1fe0:	b4400336 	bltu	r22,r17,1ff0 <_malloc_r+0x344>
    1fe4:	b445c83a 	sub	r2,r22,r17
    1fe8:	00c003c4 	movi	r3,15
    1fec:	18805d16 	blt	r3,r2,2164 <_malloc_r+0x4b8>
    1ff0:	05c00074 	movhi	r23,1
    1ff4:	00800074 	movhi	r2,1
    1ff8:	108fc604 	addi	r2,r2,16152
    1ffc:	bdc8ed04 	addi	r23,r23,9140
    2000:	15400017 	ldw	r21,0(r2)
    2004:	b8c00017 	ldw	r3,0(r23)
    2008:	00bfffc4 	movi	r2,-1
    200c:	858d883a 	add	r6,r16,r22
    2010:	8d6b883a 	add	r21,r17,r21
    2014:	1880ea26 	beq	r3,r2,23c0 <_malloc_r+0x714>
    2018:	ad4403c4 	addi	r21,r21,4111
    201c:	00bc0004 	movi	r2,-4096
    2020:	a8aa703a 	and	r21,r21,r2
    2024:	a80b883a 	mov	r5,r21
    2028:	9009883a 	mov	r4,r18
    202c:	d9800015 	stw	r6,0(sp)
    2030:	00025f80 	call	25f8 <_sbrk_r>
    2034:	1029883a 	mov	r20,r2
    2038:	00bfffc4 	movi	r2,-1
    203c:	d9800017 	ldw	r6,0(sp)
    2040:	a080e826 	beq	r20,r2,23e4 <_malloc_r+0x738>
    2044:	a180a636 	bltu	r20,r6,22e0 <_malloc_r+0x634>
    2048:	07000074 	movhi	fp,1
    204c:	e70fd404 	addi	fp,fp,16208
    2050:	e0800017 	ldw	r2,0(fp)
    2054:	a887883a 	add	r3,r21,r2
    2058:	e0c00015 	stw	r3,0(fp)
    205c:	3500e626 	beq	r6,r20,23f8 <_malloc_r+0x74c>
    2060:	b9000017 	ldw	r4,0(r23)
    2064:	00bfffc4 	movi	r2,-1
    2068:	2080ee26 	beq	r4,r2,2424 <_malloc_r+0x778>
    206c:	a185c83a 	sub	r2,r20,r6
    2070:	10c5883a 	add	r2,r2,r3
    2074:	e0800015 	stw	r2,0(fp)
    2078:	a0c001cc 	andi	r3,r20,7
    207c:	1800bc26 	beq	r3,zero,2370 <_malloc_r+0x6c4>
    2080:	a0e9c83a 	sub	r20,r20,r3
    2084:	00840204 	movi	r2,4104
    2088:	a5000204 	addi	r20,r20,8
    208c:	10c7c83a 	sub	r3,r2,r3
    2090:	a545883a 	add	r2,r20,r21
    2094:	1083ffcc 	andi	r2,r2,4095
    2098:	18abc83a 	sub	r21,r3,r2
    209c:	a80b883a 	mov	r5,r21
    20a0:	9009883a 	mov	r4,r18
    20a4:	00025f80 	call	25f8 <_sbrk_r>
    20a8:	00ffffc4 	movi	r3,-1
    20ac:	10c0e126 	beq	r2,r3,2434 <_malloc_r+0x788>
    20b0:	1505c83a 	sub	r2,r2,r20
    20b4:	1545883a 	add	r2,r2,r21
    20b8:	10800054 	ori	r2,r2,1
    20bc:	e0c00017 	ldw	r3,0(fp)
    20c0:	9d000215 	stw	r20,8(r19)
    20c4:	a0800115 	stw	r2,4(r20)
    20c8:	a8c7883a 	add	r3,r21,r3
    20cc:	e0c00015 	stw	r3,0(fp)
    20d0:	84c00e26 	beq	r16,r19,210c <_malloc_r+0x460>
    20d4:	018003c4 	movi	r6,15
    20d8:	3580a72e 	bgeu	r6,r22,2378 <_malloc_r+0x6cc>
    20dc:	81400117 	ldw	r5,4(r16)
    20e0:	013ffe04 	movi	r4,-8
    20e4:	b0bffd04 	addi	r2,r22,-12
    20e8:	1104703a 	and	r2,r2,r4
    20ec:	2900004c 	andi	r4,r5,1
    20f0:	2088b03a 	or	r4,r4,r2
    20f4:	81000115 	stw	r4,4(r16)
    20f8:	01400144 	movi	r5,5
    20fc:	8089883a 	add	r4,r16,r2
    2100:	21400115 	stw	r5,4(r4)
    2104:	21400215 	stw	r5,8(r4)
    2108:	3080cd36 	bltu	r6,r2,2440 <_malloc_r+0x794>
    210c:	00800074 	movhi	r2,1
    2110:	108fc504 	addi	r2,r2,16148
    2114:	11000017 	ldw	r4,0(r2)
    2118:	20c0012e 	bgeu	r4,r3,2120 <_malloc_r+0x474>
    211c:	10c00015 	stw	r3,0(r2)
    2120:	00800074 	movhi	r2,1
    2124:	108fc404 	addi	r2,r2,16144
    2128:	11000017 	ldw	r4,0(r2)
    212c:	9c000217 	ldw	r16,8(r19)
    2130:	20c0012e 	bgeu	r4,r3,2138 <_malloc_r+0x48c>
    2134:	10c00015 	stw	r3,0(r2)
    2138:	80c00117 	ldw	r3,4(r16)
    213c:	00bfff04 	movi	r2,-4
    2140:	1886703a 	and	r3,r3,r2
    2144:	1c45c83a 	sub	r2,r3,r17
    2148:	1c400236 	bltu	r3,r17,2154 <_malloc_r+0x4a8>
    214c:	00c003c4 	movi	r3,15
    2150:	18800416 	blt	r3,r2,2164 <_malloc_r+0x4b8>
    2154:	9009883a 	mov	r4,r18
    2158:	000e9380 	call	e938 <__malloc_unlock>
    215c:	0005883a 	mov	r2,zero
    2160:	003f7b06 	br	1f50 <__alt_data_end+0xff001f50>
    2164:	88c00054 	ori	r3,r17,1
    2168:	80c00115 	stw	r3,4(r16)
    216c:	8463883a 	add	r17,r16,r17
    2170:	10800054 	ori	r2,r2,1
    2174:	9c400215 	stw	r17,8(r19)
    2178:	88800115 	stw	r2,4(r17)
    217c:	9009883a 	mov	r4,r18
    2180:	000e9380 	call	e938 <__malloc_unlock>
    2184:	80800204 	addi	r2,r16,8
    2188:	003f7106 	br	1f50 <__alt_data_end+0xff001f50>
    218c:	00c00504 	movi	r3,20
    2190:	18804a2e 	bgeu	r3,r2,22bc <_malloc_r+0x610>
    2194:	00c01504 	movi	r3,84
    2198:	18806e36 	bltu	r3,r2,2354 <_malloc_r+0x6a8>
    219c:	8804d33a 	srli	r2,r17,12
    21a0:	12001bc4 	addi	r8,r2,111
    21a4:	11c01b84 	addi	r7,r2,110
    21a8:	4209883a 	add	r4,r8,r8
    21ac:	003edd06 	br	1d24 <__alt_data_end+0xff001d24>
    21b0:	3804d27a 	srli	r2,r7,9
    21b4:	00c00104 	movi	r3,4
    21b8:	1880442e 	bgeu	r3,r2,22cc <_malloc_r+0x620>
    21bc:	00c00504 	movi	r3,20
    21c0:	18808136 	bltu	r3,r2,23c8 <_malloc_r+0x71c>
    21c4:	11401704 	addi	r5,r2,92
    21c8:	10c016c4 	addi	r3,r2,91
    21cc:	294b883a 	add	r5,r5,r5
    21d0:	294b883a 	add	r5,r5,r5
    21d4:	294b883a 	add	r5,r5,r5
    21d8:	994b883a 	add	r5,r19,r5
    21dc:	28800017 	ldw	r2,0(r5)
    21e0:	01800074 	movhi	r6,1
    21e4:	297ffe04 	addi	r5,r5,-8
    21e8:	31824004 	addi	r6,r6,2304
    21ec:	28806526 	beq	r5,r2,2384 <_malloc_r+0x6d8>
    21f0:	01bfff04 	movi	r6,-4
    21f4:	10c00117 	ldw	r3,4(r2)
    21f8:	1986703a 	and	r3,r3,r6
    21fc:	38c0022e 	bgeu	r7,r3,2208 <_malloc_r+0x55c>
    2200:	10800217 	ldw	r2,8(r2)
    2204:	28bffb1e 	bne	r5,r2,21f4 <__alt_data_end+0xff0021f4>
    2208:	11400317 	ldw	r5,12(r2)
    220c:	98c00117 	ldw	r3,4(r19)
    2210:	81400315 	stw	r5,12(r16)
    2214:	80800215 	stw	r2,8(r16)
    2218:	2c000215 	stw	r16,8(r5)
    221c:	14000315 	stw	r16,12(r2)
    2220:	003ef806 	br	1e04 <__alt_data_end+0xff001e04>
    2224:	88c00054 	ori	r3,r17,1
    2228:	80c00115 	stw	r3,4(r16)
    222c:	8463883a 	add	r17,r16,r17
    2230:	34400515 	stw	r17,20(r6)
    2234:	34400415 	stw	r17,16(r6)
    2238:	10c00054 	ori	r3,r2,1
    223c:	8a000315 	stw	r8,12(r17)
    2240:	8a000215 	stw	r8,8(r17)
    2244:	88c00115 	stw	r3,4(r17)
    2248:	88a3883a 	add	r17,r17,r2
    224c:	88800015 	stw	r2,0(r17)
    2250:	9009883a 	mov	r4,r18
    2254:	000e9380 	call	e938 <__malloc_unlock>
    2258:	80800204 	addi	r2,r16,8
    225c:	003f3c06 	br	1f50 <__alt_data_end+0xff001f50>
    2260:	30c00117 	ldw	r3,4(r6)
    2264:	003ee706 	br	1e04 <__alt_data_end+0xff001e04>
    2268:	5ac00044 	addi	r11,r11,1
    226c:	588000cc 	andi	r2,r11,3
    2270:	31800204 	addi	r6,r6,8
    2274:	103efd1e 	bne	r2,zero,1e6c <__alt_data_end+0xff001e6c>
    2278:	00002406 	br	230c <_malloc_r+0x660>
    227c:	14000317 	ldw	r16,12(r2)
    2280:	143f251e 	bne	r2,r16,1f18 <__alt_data_end+0xff001f18>
    2284:	21000084 	addi	r4,r4,2
    2288:	003ebc06 	br	1d7c <__alt_data_end+0xff001d7c>
    228c:	8085883a 	add	r2,r16,r2
    2290:	10c00117 	ldw	r3,4(r2)
    2294:	81000317 	ldw	r4,12(r16)
    2298:	81400217 	ldw	r5,8(r16)
    229c:	18c00054 	ori	r3,r3,1
    22a0:	10c00115 	stw	r3,4(r2)
    22a4:	29000315 	stw	r4,12(r5)
    22a8:	21400215 	stw	r5,8(r4)
    22ac:	9009883a 	mov	r4,r18
    22b0:	000e9380 	call	e938 <__malloc_unlock>
    22b4:	80800204 	addi	r2,r16,8
    22b8:	003f2506 	br	1f50 <__alt_data_end+0xff001f50>
    22bc:	12001704 	addi	r8,r2,92
    22c0:	11c016c4 	addi	r7,r2,91
    22c4:	4209883a 	add	r4,r8,r8
    22c8:	003e9606 	br	1d24 <__alt_data_end+0xff001d24>
    22cc:	3804d1ba 	srli	r2,r7,6
    22d0:	11400e44 	addi	r5,r2,57
    22d4:	10c00e04 	addi	r3,r2,56
    22d8:	294b883a 	add	r5,r5,r5
    22dc:	003fbc06 	br	21d0 <__alt_data_end+0xff0021d0>
    22e0:	84ff5926 	beq	r16,r19,2048 <__alt_data_end+0xff002048>
    22e4:	00800074 	movhi	r2,1
    22e8:	10824004 	addi	r2,r2,2304
    22ec:	14000217 	ldw	r16,8(r2)
    22f0:	00bfff04 	movi	r2,-4
    22f4:	80c00117 	ldw	r3,4(r16)
    22f8:	1886703a 	and	r3,r3,r2
    22fc:	003f9106 	br	2144 <__alt_data_end+0xff002144>
    2300:	60800217 	ldw	r2,8(r12)
    2304:	213fffc4 	addi	r4,r4,-1
    2308:	1300651e 	bne	r2,r12,24a0 <_malloc_r+0x7f4>
    230c:	208000cc 	andi	r2,r4,3
    2310:	633ffe04 	addi	r12,r12,-8
    2314:	103ffa1e 	bne	r2,zero,2300 <__alt_data_end+0xff002300>
    2318:	98800117 	ldw	r2,4(r19)
    231c:	0146303a 	nor	r3,zero,r5
    2320:	1884703a 	and	r2,r3,r2
    2324:	98800115 	stw	r2,4(r19)
    2328:	294b883a 	add	r5,r5,r5
    232c:	117f2836 	bltu	r2,r5,1fd0 <__alt_data_end+0xff001fd0>
    2330:	283f2726 	beq	r5,zero,1fd0 <__alt_data_end+0xff001fd0>
    2334:	2886703a 	and	r3,r5,r2
    2338:	5809883a 	mov	r4,r11
    233c:	183ec31e 	bne	r3,zero,1e4c <__alt_data_end+0xff001e4c>
    2340:	294b883a 	add	r5,r5,r5
    2344:	2886703a 	and	r3,r5,r2
    2348:	21000104 	addi	r4,r4,4
    234c:	183ffc26 	beq	r3,zero,2340 <__alt_data_end+0xff002340>
    2350:	003ebe06 	br	1e4c <__alt_data_end+0xff001e4c>
    2354:	00c05504 	movi	r3,340
    2358:	18801236 	bltu	r3,r2,23a4 <_malloc_r+0x6f8>
    235c:	8804d3fa 	srli	r2,r17,15
    2360:	12001e04 	addi	r8,r2,120
    2364:	11c01dc4 	addi	r7,r2,119
    2368:	4209883a 	add	r4,r8,r8
    236c:	003e6d06 	br	1d24 <__alt_data_end+0xff001d24>
    2370:	00c40004 	movi	r3,4096
    2374:	003f4606 	br	2090 <__alt_data_end+0xff002090>
    2378:	00800044 	movi	r2,1
    237c:	a0800115 	stw	r2,4(r20)
    2380:	003f7406 	br	2154 <__alt_data_end+0xff002154>
    2384:	1805d0ba 	srai	r2,r3,2
    2388:	01c00044 	movi	r7,1
    238c:	30c00117 	ldw	r3,4(r6)
    2390:	388e983a 	sll	r7,r7,r2
    2394:	2805883a 	mov	r2,r5
    2398:	38c6b03a 	or	r3,r7,r3
    239c:	30c00115 	stw	r3,4(r6)
    23a0:	003f9b06 	br	2210 <__alt_data_end+0xff002210>
    23a4:	00c15504 	movi	r3,1364
    23a8:	18801a36 	bltu	r3,r2,2414 <_malloc_r+0x768>
    23ac:	8804d4ba 	srli	r2,r17,18
    23b0:	12001f44 	addi	r8,r2,125
    23b4:	11c01f04 	addi	r7,r2,124
    23b8:	4209883a 	add	r4,r8,r8
    23bc:	003e5906 	br	1d24 <__alt_data_end+0xff001d24>
    23c0:	ad400404 	addi	r21,r21,16
    23c4:	003f1706 	br	2024 <__alt_data_end+0xff002024>
    23c8:	00c01504 	movi	r3,84
    23cc:	18802336 	bltu	r3,r2,245c <_malloc_r+0x7b0>
    23d0:	3804d33a 	srli	r2,r7,12
    23d4:	11401bc4 	addi	r5,r2,111
    23d8:	10c01b84 	addi	r3,r2,110
    23dc:	294b883a 	add	r5,r5,r5
    23e0:	003f7b06 	br	21d0 <__alt_data_end+0xff0021d0>
    23e4:	9c000217 	ldw	r16,8(r19)
    23e8:	00bfff04 	movi	r2,-4
    23ec:	80c00117 	ldw	r3,4(r16)
    23f0:	1886703a 	and	r3,r3,r2
    23f4:	003f5306 	br	2144 <__alt_data_end+0xff002144>
    23f8:	3083ffcc 	andi	r2,r6,4095
    23fc:	103f181e 	bne	r2,zero,2060 <__alt_data_end+0xff002060>
    2400:	99000217 	ldw	r4,8(r19)
    2404:	b545883a 	add	r2,r22,r21
    2408:	10800054 	ori	r2,r2,1
    240c:	20800115 	stw	r2,4(r4)
    2410:	003f3e06 	br	210c <__alt_data_end+0xff00210c>
    2414:	01003f84 	movi	r4,254
    2418:	02001fc4 	movi	r8,127
    241c:	01c01f84 	movi	r7,126
    2420:	003e4006 	br	1d24 <__alt_data_end+0xff001d24>
    2424:	00800074 	movhi	r2,1
    2428:	1088ed04 	addi	r2,r2,9140
    242c:	15000015 	stw	r20,0(r2)
    2430:	003f1106 	br	2078 <__alt_data_end+0xff002078>
    2434:	00800044 	movi	r2,1
    2438:	002b883a 	mov	r21,zero
    243c:	003f1f06 	br	20bc <__alt_data_end+0xff0020bc>
    2440:	81400204 	addi	r5,r16,8
    2444:	9009883a 	mov	r4,r18
    2448:	0006afc0 	call	6afc <_free_r>
    244c:	00800074 	movhi	r2,1
    2450:	108fd404 	addi	r2,r2,16208
    2454:	10c00017 	ldw	r3,0(r2)
    2458:	003f2c06 	br	210c <__alt_data_end+0xff00210c>
    245c:	00c05504 	movi	r3,340
    2460:	18800536 	bltu	r3,r2,2478 <_malloc_r+0x7cc>
    2464:	3804d3fa 	srli	r2,r7,15
    2468:	11401e04 	addi	r5,r2,120
    246c:	10c01dc4 	addi	r3,r2,119
    2470:	294b883a 	add	r5,r5,r5
    2474:	003f5606 	br	21d0 <__alt_data_end+0xff0021d0>
    2478:	00c15504 	movi	r3,1364
    247c:	18800536 	bltu	r3,r2,2494 <_malloc_r+0x7e8>
    2480:	3804d4ba 	srli	r2,r7,18
    2484:	11401f44 	addi	r5,r2,125
    2488:	10c01f04 	addi	r3,r2,124
    248c:	294b883a 	add	r5,r5,r5
    2490:	003f4f06 	br	21d0 <__alt_data_end+0xff0021d0>
    2494:	01403f84 	movi	r5,254
    2498:	00c01f84 	movi	r3,126
    249c:	003f4c06 	br	21d0 <__alt_data_end+0xff0021d0>
    24a0:	98800117 	ldw	r2,4(r19)
    24a4:	003fa006 	br	2328 <__alt_data_end+0xff002328>
    24a8:	8808d0fa 	srli	r4,r17,3
    24ac:	20800044 	addi	r2,r4,1
    24b0:	1085883a 	add	r2,r2,r2
    24b4:	003e9006 	br	1ef8 <__alt_data_end+0xff001ef8>

000024b8 <_printf_r>:
    24b8:	defffd04 	addi	sp,sp,-12
    24bc:	2805883a 	mov	r2,r5
    24c0:	dfc00015 	stw	ra,0(sp)
    24c4:	d9800115 	stw	r6,4(sp)
    24c8:	d9c00215 	stw	r7,8(sp)
    24cc:	21400217 	ldw	r5,8(r4)
    24d0:	d9c00104 	addi	r7,sp,4
    24d4:	100d883a 	mov	r6,r2
    24d8:	00026e40 	call	26e4 <___vfprintf_internal_r>
    24dc:	dfc00017 	ldw	ra,0(sp)
    24e0:	dec00304 	addi	sp,sp,12
    24e4:	f800283a 	ret

000024e8 <printf>:
    24e8:	defffc04 	addi	sp,sp,-16
    24ec:	dfc00015 	stw	ra,0(sp)
    24f0:	d9400115 	stw	r5,4(sp)
    24f4:	d9800215 	stw	r6,8(sp)
    24f8:	d9c00315 	stw	r7,12(sp)
    24fc:	00800074 	movhi	r2,1
    2500:	1088f004 	addi	r2,r2,9152
    2504:	10800017 	ldw	r2,0(r2)
    2508:	200b883a 	mov	r5,r4
    250c:	d9800104 	addi	r6,sp,4
    2510:	11000217 	ldw	r4,8(r2)
    2514:	00048dc0 	call	48dc <__vfprintf_internal>
    2518:	dfc00017 	ldw	ra,0(sp)
    251c:	dec00404 	addi	sp,sp,16
    2520:	f800283a 	ret

00002524 <_puts_r>:
    2524:	defff604 	addi	sp,sp,-40
    2528:	dc000715 	stw	r16,28(sp)
    252c:	2021883a 	mov	r16,r4
    2530:	2809883a 	mov	r4,r5
    2534:	dc400815 	stw	r17,32(sp)
    2538:	dfc00915 	stw	ra,36(sp)
    253c:	2823883a 	mov	r17,r5
    2540:	000264c0 	call	264c <strlen>
    2544:	10c00044 	addi	r3,r2,1
    2548:	d8800115 	stw	r2,4(sp)
    254c:	00800074 	movhi	r2,1
    2550:	10818604 	addi	r2,r2,1560
    2554:	d8800215 	stw	r2,8(sp)
    2558:	00800044 	movi	r2,1
    255c:	d8800315 	stw	r2,12(sp)
    2560:	00800084 	movi	r2,2
    2564:	dc400015 	stw	r17,0(sp)
    2568:	d8c00615 	stw	r3,24(sp)
    256c:	dec00415 	stw	sp,16(sp)
    2570:	d8800515 	stw	r2,20(sp)
    2574:	80000226 	beq	r16,zero,2580 <_puts_r+0x5c>
    2578:	80800e17 	ldw	r2,56(r16)
    257c:	10001426 	beq	r2,zero,25d0 <_puts_r+0xac>
    2580:	81400217 	ldw	r5,8(r16)
    2584:	2880030b 	ldhu	r2,12(r5)
    2588:	10c8000c 	andi	r3,r2,8192
    258c:	1800061e 	bne	r3,zero,25a8 <_puts_r+0x84>
    2590:	29001917 	ldw	r4,100(r5)
    2594:	00f7ffc4 	movi	r3,-8193
    2598:	10880014 	ori	r2,r2,8192
    259c:	20c6703a 	and	r3,r4,r3
    25a0:	2880030d 	sth	r2,12(r5)
    25a4:	28c01915 	stw	r3,100(r5)
    25a8:	d9800404 	addi	r6,sp,16
    25ac:	8009883a 	mov	r4,r16
    25b0:	0006e0c0 	call	6e0c <__sfvwrite_r>
    25b4:	1000091e 	bne	r2,zero,25dc <_puts_r+0xb8>
    25b8:	00800284 	movi	r2,10
    25bc:	dfc00917 	ldw	ra,36(sp)
    25c0:	dc400817 	ldw	r17,32(sp)
    25c4:	dc000717 	ldw	r16,28(sp)
    25c8:	dec00a04 	addi	sp,sp,40
    25cc:	f800283a 	ret
    25d0:	8009883a 	mov	r4,r16
    25d4:	00069880 	call	6988 <__sinit>
    25d8:	003fe906 	br	2580 <__alt_data_end+0xff002580>
    25dc:	00bfffc4 	movi	r2,-1
    25e0:	003ff606 	br	25bc <__alt_data_end+0xff0025bc>

000025e4 <puts>:
    25e4:	00800074 	movhi	r2,1
    25e8:	1088f004 	addi	r2,r2,9152
    25ec:	200b883a 	mov	r5,r4
    25f0:	11000017 	ldw	r4,0(r2)
    25f4:	00025241 	jmpi	2524 <_puts_r>

000025f8 <_sbrk_r>:
    25f8:	defffd04 	addi	sp,sp,-12
    25fc:	dc000015 	stw	r16,0(sp)
    2600:	04000074 	movhi	r16,1
    2604:	dc400115 	stw	r17,4(sp)
    2608:	840fc704 	addi	r16,r16,16156
    260c:	2023883a 	mov	r17,r4
    2610:	2809883a 	mov	r4,r5
    2614:	dfc00215 	stw	ra,8(sp)
    2618:	80000015 	stw	zero,0(r16)
    261c:	000ea280 	call	ea28 <sbrk>
    2620:	00ffffc4 	movi	r3,-1
    2624:	10c00526 	beq	r2,r3,263c <_sbrk_r+0x44>
    2628:	dfc00217 	ldw	ra,8(sp)
    262c:	dc400117 	ldw	r17,4(sp)
    2630:	dc000017 	ldw	r16,0(sp)
    2634:	dec00304 	addi	sp,sp,12
    2638:	f800283a 	ret
    263c:	80c00017 	ldw	r3,0(r16)
    2640:	183ff926 	beq	r3,zero,2628 <__alt_data_end+0xff002628>
    2644:	88c00015 	stw	r3,0(r17)
    2648:	003ff706 	br	2628 <__alt_data_end+0xff002628>

0000264c <strlen>:
    264c:	208000cc 	andi	r2,r4,3
    2650:	10002026 	beq	r2,zero,26d4 <strlen+0x88>
    2654:	20800007 	ldb	r2,0(r4)
    2658:	10002026 	beq	r2,zero,26dc <strlen+0x90>
    265c:	2005883a 	mov	r2,r4
    2660:	00000206 	br	266c <strlen+0x20>
    2664:	10c00007 	ldb	r3,0(r2)
    2668:	18001826 	beq	r3,zero,26cc <strlen+0x80>
    266c:	10800044 	addi	r2,r2,1
    2670:	10c000cc 	andi	r3,r2,3
    2674:	183ffb1e 	bne	r3,zero,2664 <__alt_data_end+0xff002664>
    2678:	10c00017 	ldw	r3,0(r2)
    267c:	01ffbff4 	movhi	r7,65279
    2680:	39ffbfc4 	addi	r7,r7,-257
    2684:	00ca303a 	nor	r5,zero,r3
    2688:	01a02074 	movhi	r6,32897
    268c:	19c7883a 	add	r3,r3,r7
    2690:	31a02004 	addi	r6,r6,-32640
    2694:	1946703a 	and	r3,r3,r5
    2698:	1986703a 	and	r3,r3,r6
    269c:	1800091e 	bne	r3,zero,26c4 <strlen+0x78>
    26a0:	10800104 	addi	r2,r2,4
    26a4:	10c00017 	ldw	r3,0(r2)
    26a8:	19cb883a 	add	r5,r3,r7
    26ac:	00c6303a 	nor	r3,zero,r3
    26b0:	28c6703a 	and	r3,r5,r3
    26b4:	1986703a 	and	r3,r3,r6
    26b8:	183ff926 	beq	r3,zero,26a0 <__alt_data_end+0xff0026a0>
    26bc:	00000106 	br	26c4 <strlen+0x78>
    26c0:	10800044 	addi	r2,r2,1
    26c4:	10c00007 	ldb	r3,0(r2)
    26c8:	183ffd1e 	bne	r3,zero,26c0 <__alt_data_end+0xff0026c0>
    26cc:	1105c83a 	sub	r2,r2,r4
    26d0:	f800283a 	ret
    26d4:	2005883a 	mov	r2,r4
    26d8:	003fe706 	br	2678 <__alt_data_end+0xff002678>
    26dc:	0005883a 	mov	r2,zero
    26e0:	f800283a 	ret

000026e4 <___vfprintf_internal_r>:
    26e4:	deffb804 	addi	sp,sp,-288
    26e8:	dfc04715 	stw	ra,284(sp)
    26ec:	ddc04515 	stw	r23,276(sp)
    26f0:	dd404315 	stw	r21,268(sp)
    26f4:	d9002c15 	stw	r4,176(sp)
    26f8:	282f883a 	mov	r23,r5
    26fc:	302b883a 	mov	r21,r6
    2700:	d9c02d15 	stw	r7,180(sp)
    2704:	df004615 	stw	fp,280(sp)
    2708:	dd804415 	stw	r22,272(sp)
    270c:	dd004215 	stw	r20,264(sp)
    2710:	dcc04115 	stw	r19,260(sp)
    2714:	dc804015 	stw	r18,256(sp)
    2718:	dc403f15 	stw	r17,252(sp)
    271c:	dc003e15 	stw	r16,248(sp)
    2720:	00074fc0 	call	74fc <_localeconv_r>
    2724:	10800017 	ldw	r2,0(r2)
    2728:	1009883a 	mov	r4,r2
    272c:	d8803415 	stw	r2,208(sp)
    2730:	000264c0 	call	264c <strlen>
    2734:	d8803715 	stw	r2,220(sp)
    2738:	d8802c17 	ldw	r2,176(sp)
    273c:	10000226 	beq	r2,zero,2748 <___vfprintf_internal_r+0x64>
    2740:	10800e17 	ldw	r2,56(r2)
    2744:	1000f926 	beq	r2,zero,2b2c <___vfprintf_internal_r+0x448>
    2748:	b880030b 	ldhu	r2,12(r23)
    274c:	10c8000c 	andi	r3,r2,8192
    2750:	1800061e 	bne	r3,zero,276c <___vfprintf_internal_r+0x88>
    2754:	b9001917 	ldw	r4,100(r23)
    2758:	00f7ffc4 	movi	r3,-8193
    275c:	10880014 	ori	r2,r2,8192
    2760:	20c6703a 	and	r3,r4,r3
    2764:	b880030d 	sth	r2,12(r23)
    2768:	b8c01915 	stw	r3,100(r23)
    276c:	10c0020c 	andi	r3,r2,8
    2770:	1800c126 	beq	r3,zero,2a78 <___vfprintf_internal_r+0x394>
    2774:	b8c00417 	ldw	r3,16(r23)
    2778:	1800bf26 	beq	r3,zero,2a78 <___vfprintf_internal_r+0x394>
    277c:	1080068c 	andi	r2,r2,26
    2780:	00c00284 	movi	r3,10
    2784:	10c0c426 	beq	r2,r3,2a98 <___vfprintf_internal_r+0x3b4>
    2788:	d8c00404 	addi	r3,sp,16
    278c:	05000074 	movhi	r20,1
    2790:	d9001e04 	addi	r4,sp,120
    2794:	a5019784 	addi	r20,r20,1630
    2798:	d8c01e15 	stw	r3,120(sp)
    279c:	d8002015 	stw	zero,128(sp)
    27a0:	d8001f15 	stw	zero,124(sp)
    27a4:	d8003315 	stw	zero,204(sp)
    27a8:	d8003615 	stw	zero,216(sp)
    27ac:	d8003815 	stw	zero,224(sp)
    27b0:	1811883a 	mov	r8,r3
    27b4:	d8003915 	stw	zero,228(sp)
    27b8:	d8003a15 	stw	zero,232(sp)
    27bc:	d8002f15 	stw	zero,188(sp)
    27c0:	d9002815 	stw	r4,160(sp)
    27c4:	a8800007 	ldb	r2,0(r21)
    27c8:	10027b26 	beq	r2,zero,31b8 <___vfprintf_internal_r+0xad4>
    27cc:	00c00944 	movi	r3,37
    27d0:	a821883a 	mov	r16,r21
    27d4:	10c0021e 	bne	r2,r3,27e0 <___vfprintf_internal_r+0xfc>
    27d8:	00001406 	br	282c <___vfprintf_internal_r+0x148>
    27dc:	10c00326 	beq	r2,r3,27ec <___vfprintf_internal_r+0x108>
    27e0:	84000044 	addi	r16,r16,1
    27e4:	80800007 	ldb	r2,0(r16)
    27e8:	103ffc1e 	bne	r2,zero,27dc <__alt_data_end+0xff0027dc>
    27ec:	8563c83a 	sub	r17,r16,r21
    27f0:	88000e26 	beq	r17,zero,282c <___vfprintf_internal_r+0x148>
    27f4:	d8c02017 	ldw	r3,128(sp)
    27f8:	d8801f17 	ldw	r2,124(sp)
    27fc:	45400015 	stw	r21,0(r8)
    2800:	1c47883a 	add	r3,r3,r17
    2804:	10800044 	addi	r2,r2,1
    2808:	d8c02015 	stw	r3,128(sp)
    280c:	44400115 	stw	r17,4(r8)
    2810:	d8801f15 	stw	r2,124(sp)
    2814:	00c001c4 	movi	r3,7
    2818:	1880a716 	blt	r3,r2,2ab8 <___vfprintf_internal_r+0x3d4>
    281c:	42000204 	addi	r8,r8,8
    2820:	d9402f17 	ldw	r5,188(sp)
    2824:	2c4b883a 	add	r5,r5,r17
    2828:	d9402f15 	stw	r5,188(sp)
    282c:	80800007 	ldb	r2,0(r16)
    2830:	1000a826 	beq	r2,zero,2ad4 <___vfprintf_internal_r+0x3f0>
    2834:	84400047 	ldb	r17,1(r16)
    2838:	00bfffc4 	movi	r2,-1
    283c:	85400044 	addi	r21,r16,1
    2840:	d8002785 	stb	zero,158(sp)
    2844:	0007883a 	mov	r3,zero
    2848:	000f883a 	mov	r7,zero
    284c:	d8802915 	stw	r2,164(sp)
    2850:	d8003115 	stw	zero,196(sp)
    2854:	0025883a 	mov	r18,zero
    2858:	01401604 	movi	r5,88
    285c:	01800244 	movi	r6,9
    2860:	02800a84 	movi	r10,42
    2864:	02401b04 	movi	r9,108
    2868:	ad400044 	addi	r21,r21,1
    286c:	88bff804 	addi	r2,r17,-32
    2870:	28830436 	bltu	r5,r2,3484 <___vfprintf_internal_r+0xda0>
    2874:	100490ba 	slli	r2,r2,2
    2878:	01000034 	movhi	r4,0
    287c:	210a2304 	addi	r4,r4,10380
    2880:	1105883a 	add	r2,r2,r4
    2884:	10800017 	ldw	r2,0(r2)
    2888:	1000683a 	jmp	r2
    288c:	000033a4 	muli	zero,zero,206
    2890:	00003484 	movi	zero,210
    2894:	00003484 	movi	zero,210
    2898:	000033c4 	movi	zero,207
    289c:	00003484 	movi	zero,210
    28a0:	00003484 	movi	zero,210
    28a4:	00003484 	movi	zero,210
    28a8:	00003484 	movi	zero,210
    28ac:	00003484 	movi	zero,210
    28b0:	00003484 	movi	zero,210
    28b4:	00002b38 	rdprs	zero,zero,172
    28b8:	000032e0 	cmpeqi	zero,zero,203
    28bc:	00003484 	movi	zero,210
    28c0:	00002a00 	call	2a0 <init_camera+0xc8>
    28c4:	00002b60 	cmpeqi	zero,zero,173
    28c8:	00003484 	movi	zero,210
    28cc:	00002ba0 	cmpeqi	zero,zero,174
    28d0:	00002bac 	andhi	zero,zero,174
    28d4:	00002bac 	andhi	zero,zero,174
    28d8:	00002bac 	andhi	zero,zero,174
    28dc:	00002bac 	andhi	zero,zero,174
    28e0:	00002bac 	andhi	zero,zero,174
    28e4:	00002bac 	andhi	zero,zero,174
    28e8:	00002bac 	andhi	zero,zero,174
    28ec:	00002bac 	andhi	zero,zero,174
    28f0:	00002bac 	andhi	zero,zero,174
    28f4:	00003484 	movi	zero,210
    28f8:	00003484 	movi	zero,210
    28fc:	00003484 	movi	zero,210
    2900:	00003484 	movi	zero,210
    2904:	00003484 	movi	zero,210
    2908:	00003484 	movi	zero,210
    290c:	00003484 	movi	zero,210
    2910:	00003484 	movi	zero,210
    2914:	00003484 	movi	zero,210
    2918:	00003484 	movi	zero,210
    291c:	00002be0 	cmpeqi	zero,zero,175
    2920:	00002c9c 	xori	zero,zero,178
    2924:	00003484 	movi	zero,210
    2928:	00002c9c 	xori	zero,zero,178
    292c:	00003484 	movi	zero,210
    2930:	00003484 	movi	zero,210
    2934:	00003484 	movi	zero,210
    2938:	00003484 	movi	zero,210
    293c:	00002d3c 	xorhi	zero,zero,180
    2940:	00003484 	movi	zero,210
    2944:	00003484 	movi	zero,210
    2948:	00002d48 	cmpgei	zero,zero,181
    294c:	00003484 	movi	zero,210
    2950:	00003484 	movi	zero,210
    2954:	00003484 	movi	zero,210
    2958:	00003484 	movi	zero,210
    295c:	00003484 	movi	zero,210
    2960:	000031c0 	call	31c <init_camera+0x144>
    2964:	00003484 	movi	zero,210
    2968:	00003484 	movi	zero,210
    296c:	00003220 	cmpeqi	zero,zero,200
    2970:	00003484 	movi	zero,210
    2974:	00003484 	movi	zero,210
    2978:	00003484 	movi	zero,210
    297c:	00003484 	movi	zero,210
    2980:	00003484 	movi	zero,210
    2984:	00003484 	movi	zero,210
    2988:	00003484 	movi	zero,210
    298c:	00003484 	movi	zero,210
    2990:	00003484 	movi	zero,210
    2994:	00003484 	movi	zero,210
    2998:	00003430 	cmpltui	zero,zero,208
    299c:	000033d0 	cmplti	zero,zero,207
    29a0:	00002c9c 	xori	zero,zero,178
    29a4:	00002c9c 	xori	zero,zero,178
    29a8:	00002c9c 	xori	zero,zero,178
    29ac:	000033e0 	cmpeqi	zero,zero,207
    29b0:	000033d0 	cmplti	zero,zero,207
    29b4:	00003484 	movi	zero,210
    29b8:	00003484 	movi	zero,210
    29bc:	000033ec 	andhi	zero,zero,207
    29c0:	00003484 	movi	zero,210
    29c4:	000033fc 	xorhi	zero,zero,207
    29c8:	000032d0 	cmplti	zero,zero,203
    29cc:	00002a0c 	andi	zero,zero,168
    29d0:	000032f0 	cmpltui	zero,zero,203
    29d4:	00003484 	movi	zero,210
    29d8:	000032fc 	xorhi	zero,zero,203
    29dc:	00003484 	movi	zero,210
    29e0:	00003358 	cmpnei	zero,zero,205
    29e4:	00003484 	movi	zero,210
    29e8:	00003484 	movi	zero,210
    29ec:	00003368 	cmpgeui	zero,zero,205
    29f0:	d9003117 	ldw	r4,196(sp)
    29f4:	d8802d15 	stw	r2,180(sp)
    29f8:	0109c83a 	sub	r4,zero,r4
    29fc:	d9003115 	stw	r4,196(sp)
    2a00:	94800114 	ori	r18,r18,4
    2a04:	ac400007 	ldb	r17,0(r21)
    2a08:	003f9706 	br	2868 <__alt_data_end+0xff002868>
    2a0c:	00800c04 	movi	r2,48
    2a10:	d9002d17 	ldw	r4,180(sp)
    2a14:	d9402917 	ldw	r5,164(sp)
    2a18:	d8802705 	stb	r2,156(sp)
    2a1c:	00801e04 	movi	r2,120
    2a20:	d8802745 	stb	r2,157(sp)
    2a24:	d8002785 	stb	zero,158(sp)
    2a28:	20c00104 	addi	r3,r4,4
    2a2c:	24c00017 	ldw	r19,0(r4)
    2a30:	002d883a 	mov	r22,zero
    2a34:	90800094 	ori	r2,r18,2
    2a38:	28029a16 	blt	r5,zero,34a4 <___vfprintf_internal_r+0xdc0>
    2a3c:	00bfdfc4 	movi	r2,-129
    2a40:	90a4703a 	and	r18,r18,r2
    2a44:	d8c02d15 	stw	r3,180(sp)
    2a48:	94800094 	ori	r18,r18,2
    2a4c:	9802871e 	bne	r19,zero,346c <___vfprintf_internal_r+0xd88>
    2a50:	00800074 	movhi	r2,1
    2a54:	10819004 	addi	r2,r2,1600
    2a58:	d8803915 	stw	r2,228(sp)
    2a5c:	04401e04 	movi	r17,120
    2a60:	d8802917 	ldw	r2,164(sp)
    2a64:	0039883a 	mov	fp,zero
    2a68:	1001e926 	beq	r2,zero,3210 <___vfprintf_internal_r+0xb2c>
    2a6c:	0027883a 	mov	r19,zero
    2a70:	002d883a 	mov	r22,zero
    2a74:	00020506 	br	328c <___vfprintf_internal_r+0xba8>
    2a78:	d9002c17 	ldw	r4,176(sp)
    2a7c:	b80b883a 	mov	r5,r23
    2a80:	00049b40 	call	49b4 <__swsetup_r>
    2a84:	1005ac1e 	bne	r2,zero,4138 <___vfprintf_internal_r+0x1a54>
    2a88:	b880030b 	ldhu	r2,12(r23)
    2a8c:	00c00284 	movi	r3,10
    2a90:	1080068c 	andi	r2,r2,26
    2a94:	10ff3c1e 	bne	r2,r3,2788 <__alt_data_end+0xff002788>
    2a98:	b880038f 	ldh	r2,14(r23)
    2a9c:	103f3a16 	blt	r2,zero,2788 <__alt_data_end+0xff002788>
    2aa0:	d9c02d17 	ldw	r7,180(sp)
    2aa4:	d9002c17 	ldw	r4,176(sp)
    2aa8:	a80d883a 	mov	r6,r21
    2aac:	b80b883a 	mov	r5,r23
    2ab0:	00048f80 	call	48f8 <__sbprintf>
    2ab4:	00001106 	br	2afc <___vfprintf_internal_r+0x418>
    2ab8:	d9002c17 	ldw	r4,176(sp)
    2abc:	d9801e04 	addi	r6,sp,120
    2ac0:	b80b883a 	mov	r5,r23
    2ac4:	00094800 	call	9480 <__sprint_r>
    2ac8:	1000081e 	bne	r2,zero,2aec <___vfprintf_internal_r+0x408>
    2acc:	da000404 	addi	r8,sp,16
    2ad0:	003f5306 	br	2820 <__alt_data_end+0xff002820>
    2ad4:	d8802017 	ldw	r2,128(sp)
    2ad8:	10000426 	beq	r2,zero,2aec <___vfprintf_internal_r+0x408>
    2adc:	d9002c17 	ldw	r4,176(sp)
    2ae0:	d9801e04 	addi	r6,sp,120
    2ae4:	b80b883a 	mov	r5,r23
    2ae8:	00094800 	call	9480 <__sprint_r>
    2aec:	b880030b 	ldhu	r2,12(r23)
    2af0:	1080100c 	andi	r2,r2,64
    2af4:	1005901e 	bne	r2,zero,4138 <___vfprintf_internal_r+0x1a54>
    2af8:	d8802f17 	ldw	r2,188(sp)
    2afc:	dfc04717 	ldw	ra,284(sp)
    2b00:	df004617 	ldw	fp,280(sp)
    2b04:	ddc04517 	ldw	r23,276(sp)
    2b08:	dd804417 	ldw	r22,272(sp)
    2b0c:	dd404317 	ldw	r21,268(sp)
    2b10:	dd004217 	ldw	r20,264(sp)
    2b14:	dcc04117 	ldw	r19,260(sp)
    2b18:	dc804017 	ldw	r18,256(sp)
    2b1c:	dc403f17 	ldw	r17,252(sp)
    2b20:	dc003e17 	ldw	r16,248(sp)
    2b24:	dec04804 	addi	sp,sp,288
    2b28:	f800283a 	ret
    2b2c:	d9002c17 	ldw	r4,176(sp)
    2b30:	00069880 	call	6988 <__sinit>
    2b34:	003f0406 	br	2748 <__alt_data_end+0xff002748>
    2b38:	d8802d17 	ldw	r2,180(sp)
    2b3c:	d9002d17 	ldw	r4,180(sp)
    2b40:	10800017 	ldw	r2,0(r2)
    2b44:	d8803115 	stw	r2,196(sp)
    2b48:	20800104 	addi	r2,r4,4
    2b4c:	d9003117 	ldw	r4,196(sp)
    2b50:	203fa716 	blt	r4,zero,29f0 <__alt_data_end+0xff0029f0>
    2b54:	d8802d15 	stw	r2,180(sp)
    2b58:	ac400007 	ldb	r17,0(r21)
    2b5c:	003f4206 	br	2868 <__alt_data_end+0xff002868>
    2b60:	ac400007 	ldb	r17,0(r21)
    2b64:	aac00044 	addi	r11,r21,1
    2b68:	8a872826 	beq	r17,r10,480c <___vfprintf_internal_r+0x2128>
    2b6c:	88bff404 	addi	r2,r17,-48
    2b70:	0009883a 	mov	r4,zero
    2b74:	30867d36 	bltu	r6,r2,456c <___vfprintf_internal_r+0x1e88>
    2b78:	5c400007 	ldb	r17,0(r11)
    2b7c:	210002a4 	muli	r4,r4,10
    2b80:	5d400044 	addi	r21,r11,1
    2b84:	a817883a 	mov	r11,r21
    2b88:	2089883a 	add	r4,r4,r2
    2b8c:	88bff404 	addi	r2,r17,-48
    2b90:	30bff92e 	bgeu	r6,r2,2b78 <__alt_data_end+0xff002b78>
    2b94:	2005c916 	blt	r4,zero,42bc <___vfprintf_internal_r+0x1bd8>
    2b98:	d9002915 	stw	r4,164(sp)
    2b9c:	003f3306 	br	286c <__alt_data_end+0xff00286c>
    2ba0:	94802014 	ori	r18,r18,128
    2ba4:	ac400007 	ldb	r17,0(r21)
    2ba8:	003f2f06 	br	2868 <__alt_data_end+0xff002868>
    2bac:	a809883a 	mov	r4,r21
    2bb0:	d8003115 	stw	zero,196(sp)
    2bb4:	88bff404 	addi	r2,r17,-48
    2bb8:	0017883a 	mov	r11,zero
    2bbc:	24400007 	ldb	r17,0(r4)
    2bc0:	5ac002a4 	muli	r11,r11,10
    2bc4:	ad400044 	addi	r21,r21,1
    2bc8:	a809883a 	mov	r4,r21
    2bcc:	12d7883a 	add	r11,r2,r11
    2bd0:	88bff404 	addi	r2,r17,-48
    2bd4:	30bff92e 	bgeu	r6,r2,2bbc <__alt_data_end+0xff002bbc>
    2bd8:	dac03115 	stw	r11,196(sp)
    2bdc:	003f2306 	br	286c <__alt_data_end+0xff00286c>
    2be0:	18c03fcc 	andi	r3,r3,255
    2be4:	18072b1e 	bne	r3,zero,4894 <___vfprintf_internal_r+0x21b0>
    2be8:	94800414 	ori	r18,r18,16
    2bec:	9080080c 	andi	r2,r18,32
    2bf0:	10037b26 	beq	r2,zero,39e0 <___vfprintf_internal_r+0x12fc>
    2bf4:	d9402d17 	ldw	r5,180(sp)
    2bf8:	28800117 	ldw	r2,4(r5)
    2bfc:	2cc00017 	ldw	r19,0(r5)
    2c00:	29400204 	addi	r5,r5,8
    2c04:	d9402d15 	stw	r5,180(sp)
    2c08:	102d883a 	mov	r22,r2
    2c0c:	10044b16 	blt	r2,zero,3d3c <___vfprintf_internal_r+0x1658>
    2c10:	d9402917 	ldw	r5,164(sp)
    2c14:	df002783 	ldbu	fp,158(sp)
    2c18:	2803bc16 	blt	r5,zero,3b0c <___vfprintf_internal_r+0x1428>
    2c1c:	00ffdfc4 	movi	r3,-129
    2c20:	9d84b03a 	or	r2,r19,r22
    2c24:	90e4703a 	and	r18,r18,r3
    2c28:	10017726 	beq	r2,zero,3208 <___vfprintf_internal_r+0xb24>
    2c2c:	b0038326 	beq	r22,zero,3a3c <___vfprintf_internal_r+0x1358>
    2c30:	dc402a15 	stw	r17,168(sp)
    2c34:	dc001e04 	addi	r16,sp,120
    2c38:	b023883a 	mov	r17,r22
    2c3c:	402d883a 	mov	r22,r8
    2c40:	9809883a 	mov	r4,r19
    2c44:	880b883a 	mov	r5,r17
    2c48:	01800284 	movi	r6,10
    2c4c:	000f883a 	mov	r7,zero
    2c50:	000b8780 	call	b878 <__umoddi3>
    2c54:	10800c04 	addi	r2,r2,48
    2c58:	843fffc4 	addi	r16,r16,-1
    2c5c:	9809883a 	mov	r4,r19
    2c60:	880b883a 	mov	r5,r17
    2c64:	80800005 	stb	r2,0(r16)
    2c68:	01800284 	movi	r6,10
    2c6c:	000f883a 	mov	r7,zero
    2c70:	000b3000 	call	b300 <__udivdi3>
    2c74:	1027883a 	mov	r19,r2
    2c78:	10c4b03a 	or	r2,r2,r3
    2c7c:	1823883a 	mov	r17,r3
    2c80:	103fef1e 	bne	r2,zero,2c40 <__alt_data_end+0xff002c40>
    2c84:	d8c02817 	ldw	r3,160(sp)
    2c88:	dc402a17 	ldw	r17,168(sp)
    2c8c:	b011883a 	mov	r8,r22
    2c90:	1c07c83a 	sub	r3,r3,r16
    2c94:	d8c02e15 	stw	r3,184(sp)
    2c98:	00005906 	br	2e00 <___vfprintf_internal_r+0x71c>
    2c9c:	18c03fcc 	andi	r3,r3,255
    2ca0:	1806fa1e 	bne	r3,zero,488c <___vfprintf_internal_r+0x21a8>
    2ca4:	9080020c 	andi	r2,r18,8
    2ca8:	10048a26 	beq	r2,zero,3ed4 <___vfprintf_internal_r+0x17f0>
    2cac:	d8c02d17 	ldw	r3,180(sp)
    2cb0:	d9002d17 	ldw	r4,180(sp)
    2cb4:	d9402d17 	ldw	r5,180(sp)
    2cb8:	18c00017 	ldw	r3,0(r3)
    2cbc:	21000117 	ldw	r4,4(r4)
    2cc0:	29400204 	addi	r5,r5,8
    2cc4:	d8c03615 	stw	r3,216(sp)
    2cc8:	d9003815 	stw	r4,224(sp)
    2ccc:	d9402d15 	stw	r5,180(sp)
    2cd0:	d9003617 	ldw	r4,216(sp)
    2cd4:	d9403817 	ldw	r5,224(sp)
    2cd8:	da003d15 	stw	r8,244(sp)
    2cdc:	04000044 	movi	r16,1
    2ce0:	00090f80 	call	90f8 <__fpclassifyd>
    2ce4:	da003d17 	ldw	r8,244(sp)
    2ce8:	14041f1e 	bne	r2,r16,3d68 <___vfprintf_internal_r+0x1684>
    2cec:	d9003617 	ldw	r4,216(sp)
    2cf0:	d9403817 	ldw	r5,224(sp)
    2cf4:	000d883a 	mov	r6,zero
    2cf8:	000f883a 	mov	r7,zero
    2cfc:	000d25c0 	call	d25c <__ledf2>
    2d00:	da003d17 	ldw	r8,244(sp)
    2d04:	1005be16 	blt	r2,zero,4400 <___vfprintf_internal_r+0x1d1c>
    2d08:	df002783 	ldbu	fp,158(sp)
    2d0c:	008011c4 	movi	r2,71
    2d10:	1445330e 	bge	r2,r17,41e0 <___vfprintf_internal_r+0x1afc>
    2d14:	04000074 	movhi	r16,1
    2d18:	84018804 	addi	r16,r16,1568
    2d1c:	00c000c4 	movi	r3,3
    2d20:	00bfdfc4 	movi	r2,-129
    2d24:	d8c02a15 	stw	r3,168(sp)
    2d28:	90a4703a 	and	r18,r18,r2
    2d2c:	d8c02e15 	stw	r3,184(sp)
    2d30:	d8002915 	stw	zero,164(sp)
    2d34:	d8003215 	stw	zero,200(sp)
    2d38:	00003706 	br	2e18 <___vfprintf_internal_r+0x734>
    2d3c:	94800214 	ori	r18,r18,8
    2d40:	ac400007 	ldb	r17,0(r21)
    2d44:	003ec806 	br	2868 <__alt_data_end+0xff002868>
    2d48:	18c03fcc 	andi	r3,r3,255
    2d4c:	1806db1e 	bne	r3,zero,48bc <___vfprintf_internal_r+0x21d8>
    2d50:	94800414 	ori	r18,r18,16
    2d54:	9080080c 	andi	r2,r18,32
    2d58:	1002d826 	beq	r2,zero,38bc <___vfprintf_internal_r+0x11d8>
    2d5c:	d9402d17 	ldw	r5,180(sp)
    2d60:	d8c02917 	ldw	r3,164(sp)
    2d64:	d8002785 	stb	zero,158(sp)
    2d68:	28800204 	addi	r2,r5,8
    2d6c:	2cc00017 	ldw	r19,0(r5)
    2d70:	2d800117 	ldw	r22,4(r5)
    2d74:	18048f16 	blt	r3,zero,3fb4 <___vfprintf_internal_r+0x18d0>
    2d78:	013fdfc4 	movi	r4,-129
    2d7c:	9d86b03a 	or	r3,r19,r22
    2d80:	d8802d15 	stw	r2,180(sp)
    2d84:	9124703a 	and	r18,r18,r4
    2d88:	1802d91e 	bne	r3,zero,38f0 <___vfprintf_internal_r+0x120c>
    2d8c:	d8c02917 	ldw	r3,164(sp)
    2d90:	0039883a 	mov	fp,zero
    2d94:	1805c326 	beq	r3,zero,44a4 <___vfprintf_internal_r+0x1dc0>
    2d98:	0027883a 	mov	r19,zero
    2d9c:	002d883a 	mov	r22,zero
    2da0:	dc001e04 	addi	r16,sp,120
    2da4:	9806d0fa 	srli	r3,r19,3
    2da8:	b008977a 	slli	r4,r22,29
    2dac:	b02cd0fa 	srli	r22,r22,3
    2db0:	9cc001cc 	andi	r19,r19,7
    2db4:	98800c04 	addi	r2,r19,48
    2db8:	843fffc4 	addi	r16,r16,-1
    2dbc:	20e6b03a 	or	r19,r4,r3
    2dc0:	80800005 	stb	r2,0(r16)
    2dc4:	9d86b03a 	or	r3,r19,r22
    2dc8:	183ff61e 	bne	r3,zero,2da4 <__alt_data_end+0xff002da4>
    2dcc:	90c0004c 	andi	r3,r18,1
    2dd0:	18013b26 	beq	r3,zero,32c0 <___vfprintf_internal_r+0xbdc>
    2dd4:	10803fcc 	andi	r2,r2,255
    2dd8:	1080201c 	xori	r2,r2,128
    2ddc:	10bfe004 	addi	r2,r2,-128
    2de0:	00c00c04 	movi	r3,48
    2de4:	10c13626 	beq	r2,r3,32c0 <___vfprintf_internal_r+0xbdc>
    2de8:	80ffffc5 	stb	r3,-1(r16)
    2dec:	d8c02817 	ldw	r3,160(sp)
    2df0:	80bfffc4 	addi	r2,r16,-1
    2df4:	1021883a 	mov	r16,r2
    2df8:	1887c83a 	sub	r3,r3,r2
    2dfc:	d8c02e15 	stw	r3,184(sp)
    2e00:	d8802e17 	ldw	r2,184(sp)
    2e04:	d9002917 	ldw	r4,164(sp)
    2e08:	1100010e 	bge	r2,r4,2e10 <___vfprintf_internal_r+0x72c>
    2e0c:	2005883a 	mov	r2,r4
    2e10:	d8802a15 	stw	r2,168(sp)
    2e14:	d8003215 	stw	zero,200(sp)
    2e18:	e7003fcc 	andi	fp,fp,255
    2e1c:	e700201c 	xori	fp,fp,128
    2e20:	e73fe004 	addi	fp,fp,-128
    2e24:	e0000326 	beq	fp,zero,2e34 <___vfprintf_internal_r+0x750>
    2e28:	d8c02a17 	ldw	r3,168(sp)
    2e2c:	18c00044 	addi	r3,r3,1
    2e30:	d8c02a15 	stw	r3,168(sp)
    2e34:	90c0008c 	andi	r3,r18,2
    2e38:	d8c02b15 	stw	r3,172(sp)
    2e3c:	18000326 	beq	r3,zero,2e4c <___vfprintf_internal_r+0x768>
    2e40:	d8c02a17 	ldw	r3,168(sp)
    2e44:	18c00084 	addi	r3,r3,2
    2e48:	d8c02a15 	stw	r3,168(sp)
    2e4c:	90c0210c 	andi	r3,r18,132
    2e50:	d8c03015 	stw	r3,192(sp)
    2e54:	1801a31e 	bne	r3,zero,34e4 <___vfprintf_internal_r+0xe00>
    2e58:	d9003117 	ldw	r4,196(sp)
    2e5c:	d8c02a17 	ldw	r3,168(sp)
    2e60:	20e7c83a 	sub	r19,r4,r3
    2e64:	04c19f0e 	bge	zero,r19,34e4 <___vfprintf_internal_r+0xe00>
    2e68:	02400404 	movi	r9,16
    2e6c:	d8c02017 	ldw	r3,128(sp)
    2e70:	d8801f17 	ldw	r2,124(sp)
    2e74:	4cc50d0e 	bge	r9,r19,42ac <___vfprintf_internal_r+0x1bc8>
    2e78:	01400074 	movhi	r5,1
    2e7c:	29419b84 	addi	r5,r5,1646
    2e80:	dc403b15 	stw	r17,236(sp)
    2e84:	d9403515 	stw	r5,212(sp)
    2e88:	9823883a 	mov	r17,r19
    2e8c:	482d883a 	mov	r22,r9
    2e90:	9027883a 	mov	r19,r18
    2e94:	070001c4 	movi	fp,7
    2e98:	8025883a 	mov	r18,r16
    2e9c:	dc002c17 	ldw	r16,176(sp)
    2ea0:	00000306 	br	2eb0 <___vfprintf_internal_r+0x7cc>
    2ea4:	8c7ffc04 	addi	r17,r17,-16
    2ea8:	42000204 	addi	r8,r8,8
    2eac:	b440130e 	bge	r22,r17,2efc <___vfprintf_internal_r+0x818>
    2eb0:	01000074 	movhi	r4,1
    2eb4:	18c00404 	addi	r3,r3,16
    2eb8:	10800044 	addi	r2,r2,1
    2ebc:	21019b84 	addi	r4,r4,1646
    2ec0:	41000015 	stw	r4,0(r8)
    2ec4:	45800115 	stw	r22,4(r8)
    2ec8:	d8c02015 	stw	r3,128(sp)
    2ecc:	d8801f15 	stw	r2,124(sp)
    2ed0:	e0bff40e 	bge	fp,r2,2ea4 <__alt_data_end+0xff002ea4>
    2ed4:	d9801e04 	addi	r6,sp,120
    2ed8:	b80b883a 	mov	r5,r23
    2edc:	8009883a 	mov	r4,r16
    2ee0:	00094800 	call	9480 <__sprint_r>
    2ee4:	103f011e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    2ee8:	8c7ffc04 	addi	r17,r17,-16
    2eec:	d8c02017 	ldw	r3,128(sp)
    2ef0:	d8801f17 	ldw	r2,124(sp)
    2ef4:	da000404 	addi	r8,sp,16
    2ef8:	b47fed16 	blt	r22,r17,2eb0 <__alt_data_end+0xff002eb0>
    2efc:	9021883a 	mov	r16,r18
    2f00:	9825883a 	mov	r18,r19
    2f04:	8827883a 	mov	r19,r17
    2f08:	dc403b17 	ldw	r17,236(sp)
    2f0c:	d9403517 	ldw	r5,212(sp)
    2f10:	98c7883a 	add	r3,r19,r3
    2f14:	10800044 	addi	r2,r2,1
    2f18:	41400015 	stw	r5,0(r8)
    2f1c:	44c00115 	stw	r19,4(r8)
    2f20:	d8c02015 	stw	r3,128(sp)
    2f24:	d8801f15 	stw	r2,124(sp)
    2f28:	010001c4 	movi	r4,7
    2f2c:	2082a316 	blt	r4,r2,39bc <___vfprintf_internal_r+0x12d8>
    2f30:	df002787 	ldb	fp,158(sp)
    2f34:	42000204 	addi	r8,r8,8
    2f38:	e0000c26 	beq	fp,zero,2f6c <___vfprintf_internal_r+0x888>
    2f3c:	d8801f17 	ldw	r2,124(sp)
    2f40:	d9002784 	addi	r4,sp,158
    2f44:	18c00044 	addi	r3,r3,1
    2f48:	10800044 	addi	r2,r2,1
    2f4c:	41000015 	stw	r4,0(r8)
    2f50:	01000044 	movi	r4,1
    2f54:	41000115 	stw	r4,4(r8)
    2f58:	d8c02015 	stw	r3,128(sp)
    2f5c:	d8801f15 	stw	r2,124(sp)
    2f60:	010001c4 	movi	r4,7
    2f64:	20823c16 	blt	r4,r2,3858 <___vfprintf_internal_r+0x1174>
    2f68:	42000204 	addi	r8,r8,8
    2f6c:	d8802b17 	ldw	r2,172(sp)
    2f70:	10000c26 	beq	r2,zero,2fa4 <___vfprintf_internal_r+0x8c0>
    2f74:	d8801f17 	ldw	r2,124(sp)
    2f78:	d9002704 	addi	r4,sp,156
    2f7c:	18c00084 	addi	r3,r3,2
    2f80:	10800044 	addi	r2,r2,1
    2f84:	41000015 	stw	r4,0(r8)
    2f88:	01000084 	movi	r4,2
    2f8c:	41000115 	stw	r4,4(r8)
    2f90:	d8c02015 	stw	r3,128(sp)
    2f94:	d8801f15 	stw	r2,124(sp)
    2f98:	010001c4 	movi	r4,7
    2f9c:	20823616 	blt	r4,r2,3878 <___vfprintf_internal_r+0x1194>
    2fa0:	42000204 	addi	r8,r8,8
    2fa4:	d9003017 	ldw	r4,192(sp)
    2fa8:	00802004 	movi	r2,128
    2fac:	20819926 	beq	r4,r2,3614 <___vfprintf_internal_r+0xf30>
    2fb0:	d9402917 	ldw	r5,164(sp)
    2fb4:	d8802e17 	ldw	r2,184(sp)
    2fb8:	28adc83a 	sub	r22,r5,r2
    2fbc:	0580310e 	bge	zero,r22,3084 <___vfprintf_internal_r+0x9a0>
    2fc0:	07000404 	movi	fp,16
    2fc4:	d8801f17 	ldw	r2,124(sp)
    2fc8:	e584140e 	bge	fp,r22,401c <___vfprintf_internal_r+0x1938>
    2fcc:	01400074 	movhi	r5,1
    2fd0:	29419784 	addi	r5,r5,1630
    2fd4:	dc402915 	stw	r17,164(sp)
    2fd8:	d9402b15 	stw	r5,172(sp)
    2fdc:	b023883a 	mov	r17,r22
    2fe0:	04c001c4 	movi	r19,7
    2fe4:	a82d883a 	mov	r22,r21
    2fe8:	902b883a 	mov	r21,r18
    2fec:	8025883a 	mov	r18,r16
    2ff0:	dc002c17 	ldw	r16,176(sp)
    2ff4:	00000306 	br	3004 <___vfprintf_internal_r+0x920>
    2ff8:	8c7ffc04 	addi	r17,r17,-16
    2ffc:	42000204 	addi	r8,r8,8
    3000:	e440110e 	bge	fp,r17,3048 <___vfprintf_internal_r+0x964>
    3004:	18c00404 	addi	r3,r3,16
    3008:	10800044 	addi	r2,r2,1
    300c:	45000015 	stw	r20,0(r8)
    3010:	47000115 	stw	fp,4(r8)
    3014:	d8c02015 	stw	r3,128(sp)
    3018:	d8801f15 	stw	r2,124(sp)
    301c:	98bff60e 	bge	r19,r2,2ff8 <__alt_data_end+0xff002ff8>
    3020:	d9801e04 	addi	r6,sp,120
    3024:	b80b883a 	mov	r5,r23
    3028:	8009883a 	mov	r4,r16
    302c:	00094800 	call	9480 <__sprint_r>
    3030:	103eae1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3034:	8c7ffc04 	addi	r17,r17,-16
    3038:	d8c02017 	ldw	r3,128(sp)
    303c:	d8801f17 	ldw	r2,124(sp)
    3040:	da000404 	addi	r8,sp,16
    3044:	e47fef16 	blt	fp,r17,3004 <__alt_data_end+0xff003004>
    3048:	9021883a 	mov	r16,r18
    304c:	a825883a 	mov	r18,r21
    3050:	b02b883a 	mov	r21,r22
    3054:	882d883a 	mov	r22,r17
    3058:	dc402917 	ldw	r17,164(sp)
    305c:	d9002b17 	ldw	r4,172(sp)
    3060:	1d87883a 	add	r3,r3,r22
    3064:	10800044 	addi	r2,r2,1
    3068:	41000015 	stw	r4,0(r8)
    306c:	45800115 	stw	r22,4(r8)
    3070:	d8c02015 	stw	r3,128(sp)
    3074:	d8801f15 	stw	r2,124(sp)
    3078:	010001c4 	movi	r4,7
    307c:	2081ee16 	blt	r4,r2,3838 <___vfprintf_internal_r+0x1154>
    3080:	42000204 	addi	r8,r8,8
    3084:	9080400c 	andi	r2,r18,256
    3088:	1001181e 	bne	r2,zero,34ec <___vfprintf_internal_r+0xe08>
    308c:	d9402e17 	ldw	r5,184(sp)
    3090:	d8801f17 	ldw	r2,124(sp)
    3094:	44000015 	stw	r16,0(r8)
    3098:	1947883a 	add	r3,r3,r5
    309c:	10800044 	addi	r2,r2,1
    30a0:	41400115 	stw	r5,4(r8)
    30a4:	d8c02015 	stw	r3,128(sp)
    30a8:	d8801f15 	stw	r2,124(sp)
    30ac:	010001c4 	movi	r4,7
    30b0:	2081d316 	blt	r4,r2,3800 <___vfprintf_internal_r+0x111c>
    30b4:	42000204 	addi	r8,r8,8
    30b8:	9480010c 	andi	r18,r18,4
    30bc:	90003226 	beq	r18,zero,3188 <___vfprintf_internal_r+0xaa4>
    30c0:	d9403117 	ldw	r5,196(sp)
    30c4:	d8802a17 	ldw	r2,168(sp)
    30c8:	28a1c83a 	sub	r16,r5,r2
    30cc:	04002e0e 	bge	zero,r16,3188 <___vfprintf_internal_r+0xaa4>
    30d0:	04400404 	movi	r17,16
    30d4:	d8801f17 	ldw	r2,124(sp)
    30d8:	8c04a20e 	bge	r17,r16,4364 <___vfprintf_internal_r+0x1c80>
    30dc:	01400074 	movhi	r5,1
    30e0:	29419b84 	addi	r5,r5,1646
    30e4:	d9403515 	stw	r5,212(sp)
    30e8:	048001c4 	movi	r18,7
    30ec:	dcc02c17 	ldw	r19,176(sp)
    30f0:	00000306 	br	3100 <___vfprintf_internal_r+0xa1c>
    30f4:	843ffc04 	addi	r16,r16,-16
    30f8:	42000204 	addi	r8,r8,8
    30fc:	8c00130e 	bge	r17,r16,314c <___vfprintf_internal_r+0xa68>
    3100:	01000074 	movhi	r4,1
    3104:	18c00404 	addi	r3,r3,16
    3108:	10800044 	addi	r2,r2,1
    310c:	21019b84 	addi	r4,r4,1646
    3110:	41000015 	stw	r4,0(r8)
    3114:	44400115 	stw	r17,4(r8)
    3118:	d8c02015 	stw	r3,128(sp)
    311c:	d8801f15 	stw	r2,124(sp)
    3120:	90bff40e 	bge	r18,r2,30f4 <__alt_data_end+0xff0030f4>
    3124:	d9801e04 	addi	r6,sp,120
    3128:	b80b883a 	mov	r5,r23
    312c:	9809883a 	mov	r4,r19
    3130:	00094800 	call	9480 <__sprint_r>
    3134:	103e6d1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3138:	843ffc04 	addi	r16,r16,-16
    313c:	d8c02017 	ldw	r3,128(sp)
    3140:	d8801f17 	ldw	r2,124(sp)
    3144:	da000404 	addi	r8,sp,16
    3148:	8c3fed16 	blt	r17,r16,3100 <__alt_data_end+0xff003100>
    314c:	d9403517 	ldw	r5,212(sp)
    3150:	1c07883a 	add	r3,r3,r16
    3154:	10800044 	addi	r2,r2,1
    3158:	41400015 	stw	r5,0(r8)
    315c:	44000115 	stw	r16,4(r8)
    3160:	d8c02015 	stw	r3,128(sp)
    3164:	d8801f15 	stw	r2,124(sp)
    3168:	010001c4 	movi	r4,7
    316c:	2080060e 	bge	r4,r2,3188 <___vfprintf_internal_r+0xaa4>
    3170:	d9002c17 	ldw	r4,176(sp)
    3174:	d9801e04 	addi	r6,sp,120
    3178:	b80b883a 	mov	r5,r23
    317c:	00094800 	call	9480 <__sprint_r>
    3180:	103e5a1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3184:	d8c02017 	ldw	r3,128(sp)
    3188:	d8803117 	ldw	r2,196(sp)
    318c:	d9002a17 	ldw	r4,168(sp)
    3190:	1100010e 	bge	r2,r4,3198 <___vfprintf_internal_r+0xab4>
    3194:	2005883a 	mov	r2,r4
    3198:	d9402f17 	ldw	r5,188(sp)
    319c:	288b883a 	add	r5,r5,r2
    31a0:	d9402f15 	stw	r5,188(sp)
    31a4:	18019e1e 	bne	r3,zero,3820 <___vfprintf_internal_r+0x113c>
    31a8:	a8800007 	ldb	r2,0(r21)
    31ac:	d8001f15 	stw	zero,124(sp)
    31b0:	da000404 	addi	r8,sp,16
    31b4:	103d851e 	bne	r2,zero,27cc <__alt_data_end+0xff0027cc>
    31b8:	a821883a 	mov	r16,r21
    31bc:	003d9b06 	br	282c <__alt_data_end+0xff00282c>
    31c0:	18c03fcc 	andi	r3,r3,255
    31c4:	1805c11e 	bne	r3,zero,48cc <___vfprintf_internal_r+0x21e8>
    31c8:	94800414 	ori	r18,r18,16
    31cc:	9080080c 	andi	r2,r18,32
    31d0:	10020c26 	beq	r2,zero,3a04 <___vfprintf_internal_r+0x1320>
    31d4:	d8802d17 	ldw	r2,180(sp)
    31d8:	d9002917 	ldw	r4,164(sp)
    31dc:	d8002785 	stb	zero,158(sp)
    31e0:	10c00204 	addi	r3,r2,8
    31e4:	14c00017 	ldw	r19,0(r2)
    31e8:	15800117 	ldw	r22,4(r2)
    31ec:	20040f16 	blt	r4,zero,422c <___vfprintf_internal_r+0x1b48>
    31f0:	013fdfc4 	movi	r4,-129
    31f4:	9d84b03a 	or	r2,r19,r22
    31f8:	d8c02d15 	stw	r3,180(sp)
    31fc:	9124703a 	and	r18,r18,r4
    3200:	0039883a 	mov	fp,zero
    3204:	103e891e 	bne	r2,zero,2c2c <__alt_data_end+0xff002c2c>
    3208:	d9002917 	ldw	r4,164(sp)
    320c:	2002c11e 	bne	r4,zero,3d14 <___vfprintf_internal_r+0x1630>
    3210:	d8002915 	stw	zero,164(sp)
    3214:	d8002e15 	stw	zero,184(sp)
    3218:	dc001e04 	addi	r16,sp,120
    321c:	003ef806 	br	2e00 <__alt_data_end+0xff002e00>
    3220:	18c03fcc 	andi	r3,r3,255
    3224:	18059d1e 	bne	r3,zero,489c <___vfprintf_internal_r+0x21b8>
    3228:	01400074 	movhi	r5,1
    322c:	29418b04 	addi	r5,r5,1580
    3230:	d9403915 	stw	r5,228(sp)
    3234:	9080080c 	andi	r2,r18,32
    3238:	10005226 	beq	r2,zero,3384 <___vfprintf_internal_r+0xca0>
    323c:	d8802d17 	ldw	r2,180(sp)
    3240:	14c00017 	ldw	r19,0(r2)
    3244:	15800117 	ldw	r22,4(r2)
    3248:	10800204 	addi	r2,r2,8
    324c:	d8802d15 	stw	r2,180(sp)
    3250:	9080004c 	andi	r2,r18,1
    3254:	10019026 	beq	r2,zero,3898 <___vfprintf_internal_r+0x11b4>
    3258:	9d84b03a 	or	r2,r19,r22
    325c:	10036926 	beq	r2,zero,4004 <___vfprintf_internal_r+0x1920>
    3260:	d8c02917 	ldw	r3,164(sp)
    3264:	00800c04 	movi	r2,48
    3268:	d8802705 	stb	r2,156(sp)
    326c:	dc402745 	stb	r17,157(sp)
    3270:	d8002785 	stb	zero,158(sp)
    3274:	90800094 	ori	r2,r18,2
    3278:	18045d16 	blt	r3,zero,43f0 <___vfprintf_internal_r+0x1d0c>
    327c:	00bfdfc4 	movi	r2,-129
    3280:	90a4703a 	and	r18,r18,r2
    3284:	94800094 	ori	r18,r18,2
    3288:	0039883a 	mov	fp,zero
    328c:	d9003917 	ldw	r4,228(sp)
    3290:	dc001e04 	addi	r16,sp,120
    3294:	988003cc 	andi	r2,r19,15
    3298:	b006973a 	slli	r3,r22,28
    329c:	2085883a 	add	r2,r4,r2
    32a0:	9826d13a 	srli	r19,r19,4
    32a4:	10800003 	ldbu	r2,0(r2)
    32a8:	b02cd13a 	srli	r22,r22,4
    32ac:	843fffc4 	addi	r16,r16,-1
    32b0:	1ce6b03a 	or	r19,r3,r19
    32b4:	80800005 	stb	r2,0(r16)
    32b8:	9d84b03a 	or	r2,r19,r22
    32bc:	103ff51e 	bne	r2,zero,3294 <__alt_data_end+0xff003294>
    32c0:	d8c02817 	ldw	r3,160(sp)
    32c4:	1c07c83a 	sub	r3,r3,r16
    32c8:	d8c02e15 	stw	r3,184(sp)
    32cc:	003ecc06 	br	2e00 <__alt_data_end+0xff002e00>
    32d0:	18c03fcc 	andi	r3,r3,255
    32d4:	183e9f26 	beq	r3,zero,2d54 <__alt_data_end+0xff002d54>
    32d8:	d9c02785 	stb	r7,158(sp)
    32dc:	003e9d06 	br	2d54 <__alt_data_end+0xff002d54>
    32e0:	00c00044 	movi	r3,1
    32e4:	01c00ac4 	movi	r7,43
    32e8:	ac400007 	ldb	r17,0(r21)
    32ec:	003d5e06 	br	2868 <__alt_data_end+0xff002868>
    32f0:	94800814 	ori	r18,r18,32
    32f4:	ac400007 	ldb	r17,0(r21)
    32f8:	003d5b06 	br	2868 <__alt_data_end+0xff002868>
    32fc:	d8c02d17 	ldw	r3,180(sp)
    3300:	d8002785 	stb	zero,158(sp)
    3304:	1c000017 	ldw	r16,0(r3)
    3308:	1cc00104 	addi	r19,r3,4
    330c:	80041926 	beq	r16,zero,4374 <___vfprintf_internal_r+0x1c90>
    3310:	d9002917 	ldw	r4,164(sp)
    3314:	2003d016 	blt	r4,zero,4258 <___vfprintf_internal_r+0x1b74>
    3318:	200d883a 	mov	r6,r4
    331c:	000b883a 	mov	r5,zero
    3320:	8009883a 	mov	r4,r16
    3324:	da003d15 	stw	r8,244(sp)
    3328:	00076e80 	call	76e8 <memchr>
    332c:	da003d17 	ldw	r8,244(sp)
    3330:	10045426 	beq	r2,zero,4484 <___vfprintf_internal_r+0x1da0>
    3334:	1405c83a 	sub	r2,r2,r16
    3338:	d8802e15 	stw	r2,184(sp)
    333c:	1003cc16 	blt	r2,zero,4270 <___vfprintf_internal_r+0x1b8c>
    3340:	df002783 	ldbu	fp,158(sp)
    3344:	d8802a15 	stw	r2,168(sp)
    3348:	dcc02d15 	stw	r19,180(sp)
    334c:	d8002915 	stw	zero,164(sp)
    3350:	d8003215 	stw	zero,200(sp)
    3354:	003eb006 	br	2e18 <__alt_data_end+0xff002e18>
    3358:	18c03fcc 	andi	r3,r3,255
    335c:	183f9b26 	beq	r3,zero,31cc <__alt_data_end+0xff0031cc>
    3360:	d9c02785 	stb	r7,158(sp)
    3364:	003f9906 	br	31cc <__alt_data_end+0xff0031cc>
    3368:	18c03fcc 	andi	r3,r3,255
    336c:	1805551e 	bne	r3,zero,48c4 <___vfprintf_internal_r+0x21e0>
    3370:	01400074 	movhi	r5,1
    3374:	29419004 	addi	r5,r5,1600
    3378:	d9403915 	stw	r5,228(sp)
    337c:	9080080c 	andi	r2,r18,32
    3380:	103fae1e 	bne	r2,zero,323c <__alt_data_end+0xff00323c>
    3384:	9080040c 	andi	r2,r18,16
    3388:	1002de26 	beq	r2,zero,3f04 <___vfprintf_internal_r+0x1820>
    338c:	d8c02d17 	ldw	r3,180(sp)
    3390:	002d883a 	mov	r22,zero
    3394:	1cc00017 	ldw	r19,0(r3)
    3398:	18c00104 	addi	r3,r3,4
    339c:	d8c02d15 	stw	r3,180(sp)
    33a0:	003fab06 	br	3250 <__alt_data_end+0xff003250>
    33a4:	38803fcc 	andi	r2,r7,255
    33a8:	1080201c 	xori	r2,r2,128
    33ac:	10bfe004 	addi	r2,r2,-128
    33b0:	1002d21e 	bne	r2,zero,3efc <___vfprintf_internal_r+0x1818>
    33b4:	00c00044 	movi	r3,1
    33b8:	01c00804 	movi	r7,32
    33bc:	ac400007 	ldb	r17,0(r21)
    33c0:	003d2906 	br	2868 <__alt_data_end+0xff002868>
    33c4:	94800054 	ori	r18,r18,1
    33c8:	ac400007 	ldb	r17,0(r21)
    33cc:	003d2606 	br	2868 <__alt_data_end+0xff002868>
    33d0:	18c03fcc 	andi	r3,r3,255
    33d4:	183e0526 	beq	r3,zero,2bec <__alt_data_end+0xff002bec>
    33d8:	d9c02785 	stb	r7,158(sp)
    33dc:	003e0306 	br	2bec <__alt_data_end+0xff002bec>
    33e0:	94801014 	ori	r18,r18,64
    33e4:	ac400007 	ldb	r17,0(r21)
    33e8:	003d1f06 	br	2868 <__alt_data_end+0xff002868>
    33ec:	ac400007 	ldb	r17,0(r21)
    33f0:	8a438726 	beq	r17,r9,4210 <___vfprintf_internal_r+0x1b2c>
    33f4:	94800414 	ori	r18,r18,16
    33f8:	003d1b06 	br	2868 <__alt_data_end+0xff002868>
    33fc:	18c03fcc 	andi	r3,r3,255
    3400:	1805341e 	bne	r3,zero,48d4 <___vfprintf_internal_r+0x21f0>
    3404:	9080080c 	andi	r2,r18,32
    3408:	1002cd26 	beq	r2,zero,3f40 <___vfprintf_internal_r+0x185c>
    340c:	d9402d17 	ldw	r5,180(sp)
    3410:	d9002f17 	ldw	r4,188(sp)
    3414:	28800017 	ldw	r2,0(r5)
    3418:	2007d7fa 	srai	r3,r4,31
    341c:	29400104 	addi	r5,r5,4
    3420:	d9402d15 	stw	r5,180(sp)
    3424:	11000015 	stw	r4,0(r2)
    3428:	10c00115 	stw	r3,4(r2)
    342c:	003ce506 	br	27c4 <__alt_data_end+0xff0027c4>
    3430:	d8c02d17 	ldw	r3,180(sp)
    3434:	d9002d17 	ldw	r4,180(sp)
    3438:	d8002785 	stb	zero,158(sp)
    343c:	18800017 	ldw	r2,0(r3)
    3440:	21000104 	addi	r4,r4,4
    3444:	00c00044 	movi	r3,1
    3448:	d8c02a15 	stw	r3,168(sp)
    344c:	d8801405 	stb	r2,80(sp)
    3450:	d9002d15 	stw	r4,180(sp)
    3454:	d8c02e15 	stw	r3,184(sp)
    3458:	d8002915 	stw	zero,164(sp)
    345c:	d8003215 	stw	zero,200(sp)
    3460:	dc001404 	addi	r16,sp,80
    3464:	0039883a 	mov	fp,zero
    3468:	003e7206 	br	2e34 <__alt_data_end+0xff002e34>
    346c:	01000074 	movhi	r4,1
    3470:	21019004 	addi	r4,r4,1600
    3474:	0039883a 	mov	fp,zero
    3478:	d9003915 	stw	r4,228(sp)
    347c:	04401e04 	movi	r17,120
    3480:	003f8206 	br	328c <__alt_data_end+0xff00328c>
    3484:	18c03fcc 	andi	r3,r3,255
    3488:	1805061e 	bne	r3,zero,48a4 <___vfprintf_internal_r+0x21c0>
    348c:	883d9126 	beq	r17,zero,2ad4 <__alt_data_end+0xff002ad4>
    3490:	00c00044 	movi	r3,1
    3494:	d8c02a15 	stw	r3,168(sp)
    3498:	dc401405 	stb	r17,80(sp)
    349c:	d8002785 	stb	zero,158(sp)
    34a0:	003fec06 	br	3454 <__alt_data_end+0xff003454>
    34a4:	01400074 	movhi	r5,1
    34a8:	29419004 	addi	r5,r5,1600
    34ac:	d9403915 	stw	r5,228(sp)
    34b0:	d8c02d15 	stw	r3,180(sp)
    34b4:	1025883a 	mov	r18,r2
    34b8:	04401e04 	movi	r17,120
    34bc:	9d84b03a 	or	r2,r19,r22
    34c0:	1000fc1e 	bne	r2,zero,38b4 <___vfprintf_internal_r+0x11d0>
    34c4:	0039883a 	mov	fp,zero
    34c8:	00800084 	movi	r2,2
    34cc:	10803fcc 	andi	r2,r2,255
    34d0:	00c00044 	movi	r3,1
    34d4:	10c20f26 	beq	r2,r3,3d14 <___vfprintf_internal_r+0x1630>
    34d8:	00c00084 	movi	r3,2
    34dc:	10fd6326 	beq	r2,r3,2a6c <__alt_data_end+0xff002a6c>
    34e0:	003e2d06 	br	2d98 <__alt_data_end+0xff002d98>
    34e4:	d8c02017 	ldw	r3,128(sp)
    34e8:	003e9306 	br	2f38 <__alt_data_end+0xff002f38>
    34ec:	00801944 	movi	r2,101
    34f0:	14407e0e 	bge	r2,r17,36ec <___vfprintf_internal_r+0x1008>
    34f4:	d9003617 	ldw	r4,216(sp)
    34f8:	d9403817 	ldw	r5,224(sp)
    34fc:	000d883a 	mov	r6,zero
    3500:	000f883a 	mov	r7,zero
    3504:	d8c03c15 	stw	r3,240(sp)
    3508:	da003d15 	stw	r8,244(sp)
    350c:	000d0f80 	call	d0f8 <__eqdf2>
    3510:	d8c03c17 	ldw	r3,240(sp)
    3514:	da003d17 	ldw	r8,244(sp)
    3518:	1000f71e 	bne	r2,zero,38f8 <___vfprintf_internal_r+0x1214>
    351c:	d8801f17 	ldw	r2,124(sp)
    3520:	01000074 	movhi	r4,1
    3524:	21019704 	addi	r4,r4,1628
    3528:	18c00044 	addi	r3,r3,1
    352c:	10800044 	addi	r2,r2,1
    3530:	41000015 	stw	r4,0(r8)
    3534:	01000044 	movi	r4,1
    3538:	41000115 	stw	r4,4(r8)
    353c:	d8c02015 	stw	r3,128(sp)
    3540:	d8801f15 	stw	r2,124(sp)
    3544:	010001c4 	movi	r4,7
    3548:	2082b816 	blt	r4,r2,402c <___vfprintf_internal_r+0x1948>
    354c:	42000204 	addi	r8,r8,8
    3550:	d8802617 	ldw	r2,152(sp)
    3554:	d9403317 	ldw	r5,204(sp)
    3558:	11400216 	blt	r2,r5,3564 <___vfprintf_internal_r+0xe80>
    355c:	9080004c 	andi	r2,r18,1
    3560:	103ed526 	beq	r2,zero,30b8 <__alt_data_end+0xff0030b8>
    3564:	d8803717 	ldw	r2,220(sp)
    3568:	d9003417 	ldw	r4,208(sp)
    356c:	d9403717 	ldw	r5,220(sp)
    3570:	1887883a 	add	r3,r3,r2
    3574:	d8801f17 	ldw	r2,124(sp)
    3578:	41000015 	stw	r4,0(r8)
    357c:	41400115 	stw	r5,4(r8)
    3580:	10800044 	addi	r2,r2,1
    3584:	d8c02015 	stw	r3,128(sp)
    3588:	d8801f15 	stw	r2,124(sp)
    358c:	010001c4 	movi	r4,7
    3590:	20832916 	blt	r4,r2,4238 <___vfprintf_internal_r+0x1b54>
    3594:	42000204 	addi	r8,r8,8
    3598:	d8803317 	ldw	r2,204(sp)
    359c:	143fffc4 	addi	r16,r2,-1
    35a0:	043ec50e 	bge	zero,r16,30b8 <__alt_data_end+0xff0030b8>
    35a4:	04400404 	movi	r17,16
    35a8:	d8801f17 	ldw	r2,124(sp)
    35ac:	8c00880e 	bge	r17,r16,37d0 <___vfprintf_internal_r+0x10ec>
    35b0:	01400074 	movhi	r5,1
    35b4:	29419784 	addi	r5,r5,1630
    35b8:	d9402b15 	stw	r5,172(sp)
    35bc:	058001c4 	movi	r22,7
    35c0:	dcc02c17 	ldw	r19,176(sp)
    35c4:	00000306 	br	35d4 <___vfprintf_internal_r+0xef0>
    35c8:	42000204 	addi	r8,r8,8
    35cc:	843ffc04 	addi	r16,r16,-16
    35d0:	8c00820e 	bge	r17,r16,37dc <___vfprintf_internal_r+0x10f8>
    35d4:	18c00404 	addi	r3,r3,16
    35d8:	10800044 	addi	r2,r2,1
    35dc:	45000015 	stw	r20,0(r8)
    35e0:	44400115 	stw	r17,4(r8)
    35e4:	d8c02015 	stw	r3,128(sp)
    35e8:	d8801f15 	stw	r2,124(sp)
    35ec:	b0bff60e 	bge	r22,r2,35c8 <__alt_data_end+0xff0035c8>
    35f0:	d9801e04 	addi	r6,sp,120
    35f4:	b80b883a 	mov	r5,r23
    35f8:	9809883a 	mov	r4,r19
    35fc:	00094800 	call	9480 <__sprint_r>
    3600:	103d3a1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3604:	d8c02017 	ldw	r3,128(sp)
    3608:	d8801f17 	ldw	r2,124(sp)
    360c:	da000404 	addi	r8,sp,16
    3610:	003fee06 	br	35cc <__alt_data_end+0xff0035cc>
    3614:	d9403117 	ldw	r5,196(sp)
    3618:	d8802a17 	ldw	r2,168(sp)
    361c:	28adc83a 	sub	r22,r5,r2
    3620:	05be630e 	bge	zero,r22,2fb0 <__alt_data_end+0xff002fb0>
    3624:	07000404 	movi	fp,16
    3628:	d8801f17 	ldw	r2,124(sp)
    362c:	e5838f0e 	bge	fp,r22,446c <___vfprintf_internal_r+0x1d88>
    3630:	01400074 	movhi	r5,1
    3634:	29419784 	addi	r5,r5,1630
    3638:	dc403015 	stw	r17,192(sp)
    363c:	d9402b15 	stw	r5,172(sp)
    3640:	b023883a 	mov	r17,r22
    3644:	04c001c4 	movi	r19,7
    3648:	a82d883a 	mov	r22,r21
    364c:	902b883a 	mov	r21,r18
    3650:	8025883a 	mov	r18,r16
    3654:	dc002c17 	ldw	r16,176(sp)
    3658:	00000306 	br	3668 <___vfprintf_internal_r+0xf84>
    365c:	8c7ffc04 	addi	r17,r17,-16
    3660:	42000204 	addi	r8,r8,8
    3664:	e440110e 	bge	fp,r17,36ac <___vfprintf_internal_r+0xfc8>
    3668:	18c00404 	addi	r3,r3,16
    366c:	10800044 	addi	r2,r2,1
    3670:	45000015 	stw	r20,0(r8)
    3674:	47000115 	stw	fp,4(r8)
    3678:	d8c02015 	stw	r3,128(sp)
    367c:	d8801f15 	stw	r2,124(sp)
    3680:	98bff60e 	bge	r19,r2,365c <__alt_data_end+0xff00365c>
    3684:	d9801e04 	addi	r6,sp,120
    3688:	b80b883a 	mov	r5,r23
    368c:	8009883a 	mov	r4,r16
    3690:	00094800 	call	9480 <__sprint_r>
    3694:	103d151e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3698:	8c7ffc04 	addi	r17,r17,-16
    369c:	d8c02017 	ldw	r3,128(sp)
    36a0:	d8801f17 	ldw	r2,124(sp)
    36a4:	da000404 	addi	r8,sp,16
    36a8:	e47fef16 	blt	fp,r17,3668 <__alt_data_end+0xff003668>
    36ac:	9021883a 	mov	r16,r18
    36b0:	a825883a 	mov	r18,r21
    36b4:	b02b883a 	mov	r21,r22
    36b8:	882d883a 	mov	r22,r17
    36bc:	dc403017 	ldw	r17,192(sp)
    36c0:	d9002b17 	ldw	r4,172(sp)
    36c4:	1d87883a 	add	r3,r3,r22
    36c8:	10800044 	addi	r2,r2,1
    36cc:	41000015 	stw	r4,0(r8)
    36d0:	45800115 	stw	r22,4(r8)
    36d4:	d8c02015 	stw	r3,128(sp)
    36d8:	d8801f15 	stw	r2,124(sp)
    36dc:	010001c4 	movi	r4,7
    36e0:	20818e16 	blt	r4,r2,3d1c <___vfprintf_internal_r+0x1638>
    36e4:	42000204 	addi	r8,r8,8
    36e8:	003e3106 	br	2fb0 <__alt_data_end+0xff002fb0>
    36ec:	d9403317 	ldw	r5,204(sp)
    36f0:	00800044 	movi	r2,1
    36f4:	18c00044 	addi	r3,r3,1
    36f8:	1141530e 	bge	r2,r5,3c48 <___vfprintf_internal_r+0x1564>
    36fc:	dc401f17 	ldw	r17,124(sp)
    3700:	00800044 	movi	r2,1
    3704:	40800115 	stw	r2,4(r8)
    3708:	8c400044 	addi	r17,r17,1
    370c:	44000015 	stw	r16,0(r8)
    3710:	d8c02015 	stw	r3,128(sp)
    3714:	dc401f15 	stw	r17,124(sp)
    3718:	008001c4 	movi	r2,7
    371c:	14416b16 	blt	r2,r17,3ccc <___vfprintf_internal_r+0x15e8>
    3720:	42000204 	addi	r8,r8,8
    3724:	d8803717 	ldw	r2,220(sp)
    3728:	d9003417 	ldw	r4,208(sp)
    372c:	8c400044 	addi	r17,r17,1
    3730:	10c7883a 	add	r3,r2,r3
    3734:	40800115 	stw	r2,4(r8)
    3738:	41000015 	stw	r4,0(r8)
    373c:	d8c02015 	stw	r3,128(sp)
    3740:	dc401f15 	stw	r17,124(sp)
    3744:	008001c4 	movi	r2,7
    3748:	14416916 	blt	r2,r17,3cf0 <___vfprintf_internal_r+0x160c>
    374c:	45800204 	addi	r22,r8,8
    3750:	d9003617 	ldw	r4,216(sp)
    3754:	d9403817 	ldw	r5,224(sp)
    3758:	000d883a 	mov	r6,zero
    375c:	000f883a 	mov	r7,zero
    3760:	d8c03c15 	stw	r3,240(sp)
    3764:	000d0f80 	call	d0f8 <__eqdf2>
    3768:	d8c03c17 	ldw	r3,240(sp)
    376c:	1000bc26 	beq	r2,zero,3a60 <___vfprintf_internal_r+0x137c>
    3770:	d9403317 	ldw	r5,204(sp)
    3774:	84000044 	addi	r16,r16,1
    3778:	8c400044 	addi	r17,r17,1
    377c:	28bfffc4 	addi	r2,r5,-1
    3780:	1887883a 	add	r3,r3,r2
    3784:	b0800115 	stw	r2,4(r22)
    3788:	b4000015 	stw	r16,0(r22)
    378c:	d8c02015 	stw	r3,128(sp)
    3790:	dc401f15 	stw	r17,124(sp)
    3794:	008001c4 	movi	r2,7
    3798:	14414316 	blt	r2,r17,3ca8 <___vfprintf_internal_r+0x15c4>
    379c:	b5800204 	addi	r22,r22,8
    37a0:	d9003a17 	ldw	r4,232(sp)
    37a4:	df0022c4 	addi	fp,sp,139
    37a8:	8c400044 	addi	r17,r17,1
    37ac:	20c7883a 	add	r3,r4,r3
    37b0:	b7000015 	stw	fp,0(r22)
    37b4:	b1000115 	stw	r4,4(r22)
    37b8:	d8c02015 	stw	r3,128(sp)
    37bc:	dc401f15 	stw	r17,124(sp)
    37c0:	008001c4 	movi	r2,7
    37c4:	14400e16 	blt	r2,r17,3800 <___vfprintf_internal_r+0x111c>
    37c8:	b2000204 	addi	r8,r22,8
    37cc:	003e3a06 	br	30b8 <__alt_data_end+0xff0030b8>
    37d0:	01000074 	movhi	r4,1
    37d4:	21019784 	addi	r4,r4,1630
    37d8:	d9002b15 	stw	r4,172(sp)
    37dc:	d9002b17 	ldw	r4,172(sp)
    37e0:	1c07883a 	add	r3,r3,r16
    37e4:	44000115 	stw	r16,4(r8)
    37e8:	41000015 	stw	r4,0(r8)
    37ec:	10800044 	addi	r2,r2,1
    37f0:	d8c02015 	stw	r3,128(sp)
    37f4:	d8801f15 	stw	r2,124(sp)
    37f8:	010001c4 	movi	r4,7
    37fc:	20be2d0e 	bge	r4,r2,30b4 <__alt_data_end+0xff0030b4>
    3800:	d9002c17 	ldw	r4,176(sp)
    3804:	d9801e04 	addi	r6,sp,120
    3808:	b80b883a 	mov	r5,r23
    380c:	00094800 	call	9480 <__sprint_r>
    3810:	103cb61e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3814:	d8c02017 	ldw	r3,128(sp)
    3818:	da000404 	addi	r8,sp,16
    381c:	003e2606 	br	30b8 <__alt_data_end+0xff0030b8>
    3820:	d9002c17 	ldw	r4,176(sp)
    3824:	d9801e04 	addi	r6,sp,120
    3828:	b80b883a 	mov	r5,r23
    382c:	00094800 	call	9480 <__sprint_r>
    3830:	103e5d26 	beq	r2,zero,31a8 <__alt_data_end+0xff0031a8>
    3834:	003cad06 	br	2aec <__alt_data_end+0xff002aec>
    3838:	d9002c17 	ldw	r4,176(sp)
    383c:	d9801e04 	addi	r6,sp,120
    3840:	b80b883a 	mov	r5,r23
    3844:	00094800 	call	9480 <__sprint_r>
    3848:	103ca81e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    384c:	d8c02017 	ldw	r3,128(sp)
    3850:	da000404 	addi	r8,sp,16
    3854:	003e0b06 	br	3084 <__alt_data_end+0xff003084>
    3858:	d9002c17 	ldw	r4,176(sp)
    385c:	d9801e04 	addi	r6,sp,120
    3860:	b80b883a 	mov	r5,r23
    3864:	00094800 	call	9480 <__sprint_r>
    3868:	103ca01e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    386c:	d8c02017 	ldw	r3,128(sp)
    3870:	da000404 	addi	r8,sp,16
    3874:	003dbd06 	br	2f6c <__alt_data_end+0xff002f6c>
    3878:	d9002c17 	ldw	r4,176(sp)
    387c:	d9801e04 	addi	r6,sp,120
    3880:	b80b883a 	mov	r5,r23
    3884:	00094800 	call	9480 <__sprint_r>
    3888:	103c981e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    388c:	d8c02017 	ldw	r3,128(sp)
    3890:	da000404 	addi	r8,sp,16
    3894:	003dc306 	br	2fa4 <__alt_data_end+0xff002fa4>
    3898:	d8802917 	ldw	r2,164(sp)
    389c:	d8002785 	stb	zero,158(sp)
    38a0:	103f0616 	blt	r2,zero,34bc <__alt_data_end+0xff0034bc>
    38a4:	00ffdfc4 	movi	r3,-129
    38a8:	9d84b03a 	or	r2,r19,r22
    38ac:	90e4703a 	and	r18,r18,r3
    38b0:	103c6b26 	beq	r2,zero,2a60 <__alt_data_end+0xff002a60>
    38b4:	0039883a 	mov	fp,zero
    38b8:	003e7406 	br	328c <__alt_data_end+0xff00328c>
    38bc:	9080040c 	andi	r2,r18,16
    38c0:	1001b326 	beq	r2,zero,3f90 <___vfprintf_internal_r+0x18ac>
    38c4:	d9002d17 	ldw	r4,180(sp)
    38c8:	d9402917 	ldw	r5,164(sp)
    38cc:	d8002785 	stb	zero,158(sp)
    38d0:	20800104 	addi	r2,r4,4
    38d4:	24c00017 	ldw	r19,0(r4)
    38d8:	002d883a 	mov	r22,zero
    38dc:	2801b516 	blt	r5,zero,3fb4 <___vfprintf_internal_r+0x18d0>
    38e0:	00ffdfc4 	movi	r3,-129
    38e4:	d8802d15 	stw	r2,180(sp)
    38e8:	90e4703a 	and	r18,r18,r3
    38ec:	983d2726 	beq	r19,zero,2d8c <__alt_data_end+0xff002d8c>
    38f0:	0039883a 	mov	fp,zero
    38f4:	003d2a06 	br	2da0 <__alt_data_end+0xff002da0>
    38f8:	dc402617 	ldw	r17,152(sp)
    38fc:	0441d30e 	bge	zero,r17,404c <___vfprintf_internal_r+0x1968>
    3900:	dc403217 	ldw	r17,200(sp)
    3904:	d8803317 	ldw	r2,204(sp)
    3908:	1440010e 	bge	r2,r17,3910 <___vfprintf_internal_r+0x122c>
    390c:	1023883a 	mov	r17,r2
    3910:	04400a0e 	bge	zero,r17,393c <___vfprintf_internal_r+0x1258>
    3914:	d8801f17 	ldw	r2,124(sp)
    3918:	1c47883a 	add	r3,r3,r17
    391c:	44000015 	stw	r16,0(r8)
    3920:	10800044 	addi	r2,r2,1
    3924:	44400115 	stw	r17,4(r8)
    3928:	d8c02015 	stw	r3,128(sp)
    392c:	d8801f15 	stw	r2,124(sp)
    3930:	010001c4 	movi	r4,7
    3934:	20826516 	blt	r4,r2,42cc <___vfprintf_internal_r+0x1be8>
    3938:	42000204 	addi	r8,r8,8
    393c:	88026116 	blt	r17,zero,42c4 <___vfprintf_internal_r+0x1be0>
    3940:	d9003217 	ldw	r4,200(sp)
    3944:	2463c83a 	sub	r17,r4,r17
    3948:	04407b0e 	bge	zero,r17,3b38 <___vfprintf_internal_r+0x1454>
    394c:	05800404 	movi	r22,16
    3950:	d8801f17 	ldw	r2,124(sp)
    3954:	b4419d0e 	bge	r22,r17,3fcc <___vfprintf_internal_r+0x18e8>
    3958:	01000074 	movhi	r4,1
    395c:	21019784 	addi	r4,r4,1630
    3960:	d9002b15 	stw	r4,172(sp)
    3964:	070001c4 	movi	fp,7
    3968:	dcc02c17 	ldw	r19,176(sp)
    396c:	00000306 	br	397c <___vfprintf_internal_r+0x1298>
    3970:	42000204 	addi	r8,r8,8
    3974:	8c7ffc04 	addi	r17,r17,-16
    3978:	b441970e 	bge	r22,r17,3fd8 <___vfprintf_internal_r+0x18f4>
    397c:	18c00404 	addi	r3,r3,16
    3980:	10800044 	addi	r2,r2,1
    3984:	45000015 	stw	r20,0(r8)
    3988:	45800115 	stw	r22,4(r8)
    398c:	d8c02015 	stw	r3,128(sp)
    3990:	d8801f15 	stw	r2,124(sp)
    3994:	e0bff60e 	bge	fp,r2,3970 <__alt_data_end+0xff003970>
    3998:	d9801e04 	addi	r6,sp,120
    399c:	b80b883a 	mov	r5,r23
    39a0:	9809883a 	mov	r4,r19
    39a4:	00094800 	call	9480 <__sprint_r>
    39a8:	103c501e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    39ac:	d8c02017 	ldw	r3,128(sp)
    39b0:	d8801f17 	ldw	r2,124(sp)
    39b4:	da000404 	addi	r8,sp,16
    39b8:	003fee06 	br	3974 <__alt_data_end+0xff003974>
    39bc:	d9002c17 	ldw	r4,176(sp)
    39c0:	d9801e04 	addi	r6,sp,120
    39c4:	b80b883a 	mov	r5,r23
    39c8:	00094800 	call	9480 <__sprint_r>
    39cc:	103c471e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    39d0:	d8c02017 	ldw	r3,128(sp)
    39d4:	df002787 	ldb	fp,158(sp)
    39d8:	da000404 	addi	r8,sp,16
    39dc:	003d5606 	br	2f38 <__alt_data_end+0xff002f38>
    39e0:	9080040c 	andi	r2,r18,16
    39e4:	10016126 	beq	r2,zero,3f6c <___vfprintf_internal_r+0x1888>
    39e8:	d8802d17 	ldw	r2,180(sp)
    39ec:	14c00017 	ldw	r19,0(r2)
    39f0:	10800104 	addi	r2,r2,4
    39f4:	d8802d15 	stw	r2,180(sp)
    39f8:	982dd7fa 	srai	r22,r19,31
    39fc:	b005883a 	mov	r2,r22
    3a00:	003c8206 	br	2c0c <__alt_data_end+0xff002c0c>
    3a04:	9080040c 	andi	r2,r18,16
    3a08:	10003526 	beq	r2,zero,3ae0 <___vfprintf_internal_r+0x13fc>
    3a0c:	d9402d17 	ldw	r5,180(sp)
    3a10:	d8c02917 	ldw	r3,164(sp)
    3a14:	d8002785 	stb	zero,158(sp)
    3a18:	28800104 	addi	r2,r5,4
    3a1c:	2cc00017 	ldw	r19,0(r5)
    3a20:	002d883a 	mov	r22,zero
    3a24:	18003716 	blt	r3,zero,3b04 <___vfprintf_internal_r+0x1420>
    3a28:	00ffdfc4 	movi	r3,-129
    3a2c:	d8802d15 	stw	r2,180(sp)
    3a30:	90e4703a 	and	r18,r18,r3
    3a34:	0039883a 	mov	fp,zero
    3a38:	983df326 	beq	r19,zero,3208 <__alt_data_end+0xff003208>
    3a3c:	00800244 	movi	r2,9
    3a40:	14fc7b36 	bltu	r2,r19,2c30 <__alt_data_end+0xff002c30>
    3a44:	d8c02817 	ldw	r3,160(sp)
    3a48:	dc001dc4 	addi	r16,sp,119
    3a4c:	9cc00c04 	addi	r19,r19,48
    3a50:	1c07c83a 	sub	r3,r3,r16
    3a54:	dcc01dc5 	stb	r19,119(sp)
    3a58:	d8c02e15 	stw	r3,184(sp)
    3a5c:	003ce806 	br	2e00 <__alt_data_end+0xff002e00>
    3a60:	d8803317 	ldw	r2,204(sp)
    3a64:	143fffc4 	addi	r16,r2,-1
    3a68:	043f4d0e 	bge	zero,r16,37a0 <__alt_data_end+0xff0037a0>
    3a6c:	07000404 	movi	fp,16
    3a70:	e400810e 	bge	fp,r16,3c78 <___vfprintf_internal_r+0x1594>
    3a74:	01400074 	movhi	r5,1
    3a78:	29419784 	addi	r5,r5,1630
    3a7c:	d9402b15 	stw	r5,172(sp)
    3a80:	01c001c4 	movi	r7,7
    3a84:	dcc02c17 	ldw	r19,176(sp)
    3a88:	00000306 	br	3a98 <___vfprintf_internal_r+0x13b4>
    3a8c:	b5800204 	addi	r22,r22,8
    3a90:	843ffc04 	addi	r16,r16,-16
    3a94:	e4007b0e 	bge	fp,r16,3c84 <___vfprintf_internal_r+0x15a0>
    3a98:	18c00404 	addi	r3,r3,16
    3a9c:	8c400044 	addi	r17,r17,1
    3aa0:	b5000015 	stw	r20,0(r22)
    3aa4:	b7000115 	stw	fp,4(r22)
    3aa8:	d8c02015 	stw	r3,128(sp)
    3aac:	dc401f15 	stw	r17,124(sp)
    3ab0:	3c7ff60e 	bge	r7,r17,3a8c <__alt_data_end+0xff003a8c>
    3ab4:	d9801e04 	addi	r6,sp,120
    3ab8:	b80b883a 	mov	r5,r23
    3abc:	9809883a 	mov	r4,r19
    3ac0:	d9c03c15 	stw	r7,240(sp)
    3ac4:	00094800 	call	9480 <__sprint_r>
    3ac8:	d9c03c17 	ldw	r7,240(sp)
    3acc:	103c071e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3ad0:	d8c02017 	ldw	r3,128(sp)
    3ad4:	dc401f17 	ldw	r17,124(sp)
    3ad8:	dd800404 	addi	r22,sp,16
    3adc:	003fec06 	br	3a90 <__alt_data_end+0xff003a90>
    3ae0:	9080100c 	andi	r2,r18,64
    3ae4:	d8002785 	stb	zero,158(sp)
    3ae8:	10010e26 	beq	r2,zero,3f24 <___vfprintf_internal_r+0x1840>
    3aec:	d9002d17 	ldw	r4,180(sp)
    3af0:	d9402917 	ldw	r5,164(sp)
    3af4:	002d883a 	mov	r22,zero
    3af8:	20800104 	addi	r2,r4,4
    3afc:	24c0000b 	ldhu	r19,0(r4)
    3b00:	283fc90e 	bge	r5,zero,3a28 <__alt_data_end+0xff003a28>
    3b04:	d8802d15 	stw	r2,180(sp)
    3b08:	0039883a 	mov	fp,zero
    3b0c:	9d84b03a 	or	r2,r19,r22
    3b10:	103c461e 	bne	r2,zero,2c2c <__alt_data_end+0xff002c2c>
    3b14:	00800044 	movi	r2,1
    3b18:	003e6c06 	br	34cc <__alt_data_end+0xff0034cc>
    3b1c:	d9002c17 	ldw	r4,176(sp)
    3b20:	d9801e04 	addi	r6,sp,120
    3b24:	b80b883a 	mov	r5,r23
    3b28:	00094800 	call	9480 <__sprint_r>
    3b2c:	103bef1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3b30:	d8c02017 	ldw	r3,128(sp)
    3b34:	da000404 	addi	r8,sp,16
    3b38:	d9003217 	ldw	r4,200(sp)
    3b3c:	d8802617 	ldw	r2,152(sp)
    3b40:	d9403317 	ldw	r5,204(sp)
    3b44:	8123883a 	add	r17,r16,r4
    3b48:	11400216 	blt	r2,r5,3b54 <___vfprintf_internal_r+0x1470>
    3b4c:	9100004c 	andi	r4,r18,1
    3b50:	20000d26 	beq	r4,zero,3b88 <___vfprintf_internal_r+0x14a4>
    3b54:	d9003717 	ldw	r4,220(sp)
    3b58:	d9403417 	ldw	r5,208(sp)
    3b5c:	1907883a 	add	r3,r3,r4
    3b60:	d9001f17 	ldw	r4,124(sp)
    3b64:	41400015 	stw	r5,0(r8)
    3b68:	d9403717 	ldw	r5,220(sp)
    3b6c:	21000044 	addi	r4,r4,1
    3b70:	d8c02015 	stw	r3,128(sp)
    3b74:	41400115 	stw	r5,4(r8)
    3b78:	d9001f15 	stw	r4,124(sp)
    3b7c:	014001c4 	movi	r5,7
    3b80:	2901e816 	blt	r5,r4,4324 <___vfprintf_internal_r+0x1c40>
    3b84:	42000204 	addi	r8,r8,8
    3b88:	d9003317 	ldw	r4,204(sp)
    3b8c:	8121883a 	add	r16,r16,r4
    3b90:	2085c83a 	sub	r2,r4,r2
    3b94:	8461c83a 	sub	r16,r16,r17
    3b98:	1400010e 	bge	r2,r16,3ba0 <___vfprintf_internal_r+0x14bc>
    3b9c:	1021883a 	mov	r16,r2
    3ba0:	04000a0e 	bge	zero,r16,3bcc <___vfprintf_internal_r+0x14e8>
    3ba4:	d9001f17 	ldw	r4,124(sp)
    3ba8:	1c07883a 	add	r3,r3,r16
    3bac:	44400015 	stw	r17,0(r8)
    3bb0:	21000044 	addi	r4,r4,1
    3bb4:	44000115 	stw	r16,4(r8)
    3bb8:	d8c02015 	stw	r3,128(sp)
    3bbc:	d9001f15 	stw	r4,124(sp)
    3bc0:	014001c4 	movi	r5,7
    3bc4:	2901fb16 	blt	r5,r4,43b4 <___vfprintf_internal_r+0x1cd0>
    3bc8:	42000204 	addi	r8,r8,8
    3bcc:	8001f716 	blt	r16,zero,43ac <___vfprintf_internal_r+0x1cc8>
    3bd0:	1421c83a 	sub	r16,r2,r16
    3bd4:	043d380e 	bge	zero,r16,30b8 <__alt_data_end+0xff0030b8>
    3bd8:	04400404 	movi	r17,16
    3bdc:	d8801f17 	ldw	r2,124(sp)
    3be0:	8c3efb0e 	bge	r17,r16,37d0 <__alt_data_end+0xff0037d0>
    3be4:	01400074 	movhi	r5,1
    3be8:	29419784 	addi	r5,r5,1630
    3bec:	d9402b15 	stw	r5,172(sp)
    3bf0:	058001c4 	movi	r22,7
    3bf4:	dcc02c17 	ldw	r19,176(sp)
    3bf8:	00000306 	br	3c08 <___vfprintf_internal_r+0x1524>
    3bfc:	42000204 	addi	r8,r8,8
    3c00:	843ffc04 	addi	r16,r16,-16
    3c04:	8c3ef50e 	bge	r17,r16,37dc <__alt_data_end+0xff0037dc>
    3c08:	18c00404 	addi	r3,r3,16
    3c0c:	10800044 	addi	r2,r2,1
    3c10:	45000015 	stw	r20,0(r8)
    3c14:	44400115 	stw	r17,4(r8)
    3c18:	d8c02015 	stw	r3,128(sp)
    3c1c:	d8801f15 	stw	r2,124(sp)
    3c20:	b0bff60e 	bge	r22,r2,3bfc <__alt_data_end+0xff003bfc>
    3c24:	d9801e04 	addi	r6,sp,120
    3c28:	b80b883a 	mov	r5,r23
    3c2c:	9809883a 	mov	r4,r19
    3c30:	00094800 	call	9480 <__sprint_r>
    3c34:	103bad1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3c38:	d8c02017 	ldw	r3,128(sp)
    3c3c:	d8801f17 	ldw	r2,124(sp)
    3c40:	da000404 	addi	r8,sp,16
    3c44:	003fee06 	br	3c00 <__alt_data_end+0xff003c00>
    3c48:	9088703a 	and	r4,r18,r2
    3c4c:	203eab1e 	bne	r4,zero,36fc <__alt_data_end+0xff0036fc>
    3c50:	dc401f17 	ldw	r17,124(sp)
    3c54:	40800115 	stw	r2,4(r8)
    3c58:	44000015 	stw	r16,0(r8)
    3c5c:	8c400044 	addi	r17,r17,1
    3c60:	d8c02015 	stw	r3,128(sp)
    3c64:	dc401f15 	stw	r17,124(sp)
    3c68:	008001c4 	movi	r2,7
    3c6c:	14400e16 	blt	r2,r17,3ca8 <___vfprintf_internal_r+0x15c4>
    3c70:	45800204 	addi	r22,r8,8
    3c74:	003eca06 	br	37a0 <__alt_data_end+0xff0037a0>
    3c78:	01000074 	movhi	r4,1
    3c7c:	21019784 	addi	r4,r4,1630
    3c80:	d9002b15 	stw	r4,172(sp)
    3c84:	d8802b17 	ldw	r2,172(sp)
    3c88:	1c07883a 	add	r3,r3,r16
    3c8c:	8c400044 	addi	r17,r17,1
    3c90:	b0800015 	stw	r2,0(r22)
    3c94:	b4000115 	stw	r16,4(r22)
    3c98:	d8c02015 	stw	r3,128(sp)
    3c9c:	dc401f15 	stw	r17,124(sp)
    3ca0:	008001c4 	movi	r2,7
    3ca4:	147ebd0e 	bge	r2,r17,379c <__alt_data_end+0xff00379c>
    3ca8:	d9002c17 	ldw	r4,176(sp)
    3cac:	d9801e04 	addi	r6,sp,120
    3cb0:	b80b883a 	mov	r5,r23
    3cb4:	00094800 	call	9480 <__sprint_r>
    3cb8:	103b8c1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3cbc:	d8c02017 	ldw	r3,128(sp)
    3cc0:	dc401f17 	ldw	r17,124(sp)
    3cc4:	dd800404 	addi	r22,sp,16
    3cc8:	003eb506 	br	37a0 <__alt_data_end+0xff0037a0>
    3ccc:	d9002c17 	ldw	r4,176(sp)
    3cd0:	d9801e04 	addi	r6,sp,120
    3cd4:	b80b883a 	mov	r5,r23
    3cd8:	00094800 	call	9480 <__sprint_r>
    3cdc:	103b831e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3ce0:	d8c02017 	ldw	r3,128(sp)
    3ce4:	dc401f17 	ldw	r17,124(sp)
    3ce8:	da000404 	addi	r8,sp,16
    3cec:	003e8d06 	br	3724 <__alt_data_end+0xff003724>
    3cf0:	d9002c17 	ldw	r4,176(sp)
    3cf4:	d9801e04 	addi	r6,sp,120
    3cf8:	b80b883a 	mov	r5,r23
    3cfc:	00094800 	call	9480 <__sprint_r>
    3d00:	103b7a1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3d04:	d8c02017 	ldw	r3,128(sp)
    3d08:	dc401f17 	ldw	r17,124(sp)
    3d0c:	dd800404 	addi	r22,sp,16
    3d10:	003e8f06 	br	3750 <__alt_data_end+0xff003750>
    3d14:	0027883a 	mov	r19,zero
    3d18:	003f4a06 	br	3a44 <__alt_data_end+0xff003a44>
    3d1c:	d9002c17 	ldw	r4,176(sp)
    3d20:	d9801e04 	addi	r6,sp,120
    3d24:	b80b883a 	mov	r5,r23
    3d28:	00094800 	call	9480 <__sprint_r>
    3d2c:	103b6f1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    3d30:	d8c02017 	ldw	r3,128(sp)
    3d34:	da000404 	addi	r8,sp,16
    3d38:	003c9d06 	br	2fb0 <__alt_data_end+0xff002fb0>
    3d3c:	04e7c83a 	sub	r19,zero,r19
    3d40:	9804c03a 	cmpne	r2,r19,zero
    3d44:	05adc83a 	sub	r22,zero,r22
    3d48:	b0adc83a 	sub	r22,r22,r2
    3d4c:	d8802917 	ldw	r2,164(sp)
    3d50:	07000b44 	movi	fp,45
    3d54:	df002785 	stb	fp,158(sp)
    3d58:	10017b16 	blt	r2,zero,4348 <___vfprintf_internal_r+0x1c64>
    3d5c:	00bfdfc4 	movi	r2,-129
    3d60:	90a4703a 	and	r18,r18,r2
    3d64:	003bb106 	br	2c2c <__alt_data_end+0xff002c2c>
    3d68:	d9003617 	ldw	r4,216(sp)
    3d6c:	d9403817 	ldw	r5,224(sp)
    3d70:	da003d15 	stw	r8,244(sp)
    3d74:	00090f80 	call	90f8 <__fpclassifyd>
    3d78:	da003d17 	ldw	r8,244(sp)
    3d7c:	1000f026 	beq	r2,zero,4140 <___vfprintf_internal_r+0x1a5c>
    3d80:	d9002917 	ldw	r4,164(sp)
    3d84:	05bff7c4 	movi	r22,-33
    3d88:	00bfffc4 	movi	r2,-1
    3d8c:	8dac703a 	and	r22,r17,r22
    3d90:	20820026 	beq	r4,r2,4594 <___vfprintf_internal_r+0x1eb0>
    3d94:	008011c4 	movi	r2,71
    3d98:	b081f726 	beq	r22,r2,4578 <___vfprintf_internal_r+0x1e94>
    3d9c:	d9003817 	ldw	r4,224(sp)
    3da0:	90c04014 	ori	r3,r18,256
    3da4:	d8c02b15 	stw	r3,172(sp)
    3da8:	20021516 	blt	r4,zero,4600 <___vfprintf_internal_r+0x1f1c>
    3dac:	dcc03817 	ldw	r19,224(sp)
    3db0:	d8002a05 	stb	zero,168(sp)
    3db4:	00801984 	movi	r2,102
    3db8:	8881f926 	beq	r17,r2,45a0 <___vfprintf_internal_r+0x1ebc>
    3dbc:	00801184 	movi	r2,70
    3dc0:	88821c26 	beq	r17,r2,4634 <___vfprintf_internal_r+0x1f50>
    3dc4:	00801144 	movi	r2,69
    3dc8:	b081ef26 	beq	r22,r2,4588 <___vfprintf_internal_r+0x1ea4>
    3dcc:	d8c02917 	ldw	r3,164(sp)
    3dd0:	d8802104 	addi	r2,sp,132
    3dd4:	d8800315 	stw	r2,12(sp)
    3dd8:	d9403617 	ldw	r5,216(sp)
    3ddc:	d8802504 	addi	r2,sp,148
    3de0:	d9002c17 	ldw	r4,176(sp)
    3de4:	d8800215 	stw	r2,8(sp)
    3de8:	d8802604 	addi	r2,sp,152
    3dec:	d8c00015 	stw	r3,0(sp)
    3df0:	d8800115 	stw	r2,4(sp)
    3df4:	01c00084 	movi	r7,2
    3df8:	980d883a 	mov	r6,r19
    3dfc:	d8c03c15 	stw	r3,240(sp)
    3e00:	da003d15 	stw	r8,244(sp)
    3e04:	0004d080 	call	4d08 <_dtoa_r>
    3e08:	1021883a 	mov	r16,r2
    3e0c:	008019c4 	movi	r2,103
    3e10:	d8c03c17 	ldw	r3,240(sp)
    3e14:	da003d17 	ldw	r8,244(sp)
    3e18:	88817126 	beq	r17,r2,43e0 <___vfprintf_internal_r+0x1cfc>
    3e1c:	008011c4 	movi	r2,71
    3e20:	88829226 	beq	r17,r2,486c <___vfprintf_internal_r+0x2188>
    3e24:	80f9883a 	add	fp,r16,r3
    3e28:	d9003617 	ldw	r4,216(sp)
    3e2c:	000d883a 	mov	r6,zero
    3e30:	000f883a 	mov	r7,zero
    3e34:	980b883a 	mov	r5,r19
    3e38:	da003d15 	stw	r8,244(sp)
    3e3c:	000d0f80 	call	d0f8 <__eqdf2>
    3e40:	da003d17 	ldw	r8,244(sp)
    3e44:	10018d26 	beq	r2,zero,447c <___vfprintf_internal_r+0x1d98>
    3e48:	d8802117 	ldw	r2,132(sp)
    3e4c:	1700062e 	bgeu	r2,fp,3e68 <___vfprintf_internal_r+0x1784>
    3e50:	01000c04 	movi	r4,48
    3e54:	10c00044 	addi	r3,r2,1
    3e58:	d8c02115 	stw	r3,132(sp)
    3e5c:	11000005 	stb	r4,0(r2)
    3e60:	d8802117 	ldw	r2,132(sp)
    3e64:	173ffb36 	bltu	r2,fp,3e54 <__alt_data_end+0xff003e54>
    3e68:	1405c83a 	sub	r2,r2,r16
    3e6c:	d8803315 	stw	r2,204(sp)
    3e70:	008011c4 	movi	r2,71
    3e74:	b0817626 	beq	r22,r2,4450 <___vfprintf_internal_r+0x1d6c>
    3e78:	00801944 	movi	r2,101
    3e7c:	1442810e 	bge	r2,r17,4884 <___vfprintf_internal_r+0x21a0>
    3e80:	d8c02617 	ldw	r3,152(sp)
    3e84:	00801984 	movi	r2,102
    3e88:	d8c03215 	stw	r3,200(sp)
    3e8c:	8881fe26 	beq	r17,r2,4688 <___vfprintf_internal_r+0x1fa4>
    3e90:	d8c03217 	ldw	r3,200(sp)
    3e94:	d9003317 	ldw	r4,204(sp)
    3e98:	1901dd16 	blt	r3,r4,4610 <___vfprintf_internal_r+0x1f2c>
    3e9c:	9480004c 	andi	r18,r18,1
    3ea0:	90022b1e 	bne	r18,zero,4750 <___vfprintf_internal_r+0x206c>
    3ea4:	1805883a 	mov	r2,r3
    3ea8:	18028016 	blt	r3,zero,48ac <___vfprintf_internal_r+0x21c8>
    3eac:	d8c03217 	ldw	r3,200(sp)
    3eb0:	044019c4 	movi	r17,103
    3eb4:	d8c02e15 	stw	r3,184(sp)
    3eb8:	df002a07 	ldb	fp,168(sp)
    3ebc:	e001531e 	bne	fp,zero,440c <___vfprintf_internal_r+0x1d28>
    3ec0:	df002783 	ldbu	fp,158(sp)
    3ec4:	d8802a15 	stw	r2,168(sp)
    3ec8:	dc802b17 	ldw	r18,172(sp)
    3ecc:	d8002915 	stw	zero,164(sp)
    3ed0:	003bd106 	br	2e18 <__alt_data_end+0xff002e18>
    3ed4:	d8802d17 	ldw	r2,180(sp)
    3ed8:	d8c02d17 	ldw	r3,180(sp)
    3edc:	d9002d17 	ldw	r4,180(sp)
    3ee0:	10800017 	ldw	r2,0(r2)
    3ee4:	18c00117 	ldw	r3,4(r3)
    3ee8:	21000204 	addi	r4,r4,8
    3eec:	d8803615 	stw	r2,216(sp)
    3ef0:	d8c03815 	stw	r3,224(sp)
    3ef4:	d9002d15 	stw	r4,180(sp)
    3ef8:	003b7506 	br	2cd0 <__alt_data_end+0xff002cd0>
    3efc:	ac400007 	ldb	r17,0(r21)
    3f00:	003a5906 	br	2868 <__alt_data_end+0xff002868>
    3f04:	9080100c 	andi	r2,r18,64
    3f08:	1000a826 	beq	r2,zero,41ac <___vfprintf_internal_r+0x1ac8>
    3f0c:	d9002d17 	ldw	r4,180(sp)
    3f10:	002d883a 	mov	r22,zero
    3f14:	24c0000b 	ldhu	r19,0(r4)
    3f18:	21000104 	addi	r4,r4,4
    3f1c:	d9002d15 	stw	r4,180(sp)
    3f20:	003ccb06 	br	3250 <__alt_data_end+0xff003250>
    3f24:	d8c02d17 	ldw	r3,180(sp)
    3f28:	d9002917 	ldw	r4,164(sp)
    3f2c:	002d883a 	mov	r22,zero
    3f30:	18800104 	addi	r2,r3,4
    3f34:	1cc00017 	ldw	r19,0(r3)
    3f38:	203ebb0e 	bge	r4,zero,3a28 <__alt_data_end+0xff003a28>
    3f3c:	003ef106 	br	3b04 <__alt_data_end+0xff003b04>
    3f40:	9080040c 	andi	r2,r18,16
    3f44:	1000921e 	bne	r2,zero,4190 <___vfprintf_internal_r+0x1aac>
    3f48:	9480100c 	andi	r18,r18,64
    3f4c:	90013926 	beq	r18,zero,4434 <___vfprintf_internal_r+0x1d50>
    3f50:	d9002d17 	ldw	r4,180(sp)
    3f54:	d9402f17 	ldw	r5,188(sp)
    3f58:	20800017 	ldw	r2,0(r4)
    3f5c:	21000104 	addi	r4,r4,4
    3f60:	d9002d15 	stw	r4,180(sp)
    3f64:	1140000d 	sth	r5,0(r2)
    3f68:	003a1606 	br	27c4 <__alt_data_end+0xff0027c4>
    3f6c:	9080100c 	andi	r2,r18,64
    3f70:	10008026 	beq	r2,zero,4174 <___vfprintf_internal_r+0x1a90>
    3f74:	d8c02d17 	ldw	r3,180(sp)
    3f78:	1cc0000f 	ldh	r19,0(r3)
    3f7c:	18c00104 	addi	r3,r3,4
    3f80:	d8c02d15 	stw	r3,180(sp)
    3f84:	982dd7fa 	srai	r22,r19,31
    3f88:	b005883a 	mov	r2,r22
    3f8c:	003b1f06 	br	2c0c <__alt_data_end+0xff002c0c>
    3f90:	9080100c 	andi	r2,r18,64
    3f94:	d8002785 	stb	zero,158(sp)
    3f98:	10008a1e 	bne	r2,zero,41c4 <___vfprintf_internal_r+0x1ae0>
    3f9c:	d9402d17 	ldw	r5,180(sp)
    3fa0:	d8c02917 	ldw	r3,164(sp)
    3fa4:	002d883a 	mov	r22,zero
    3fa8:	28800104 	addi	r2,r5,4
    3fac:	2cc00017 	ldw	r19,0(r5)
    3fb0:	183e4b0e 	bge	r3,zero,38e0 <__alt_data_end+0xff0038e0>
    3fb4:	9d86b03a 	or	r3,r19,r22
    3fb8:	d8802d15 	stw	r2,180(sp)
    3fbc:	183e4c1e 	bne	r3,zero,38f0 <__alt_data_end+0xff0038f0>
    3fc0:	0039883a 	mov	fp,zero
    3fc4:	0005883a 	mov	r2,zero
    3fc8:	003d4006 	br	34cc <__alt_data_end+0xff0034cc>
    3fcc:	01400074 	movhi	r5,1
    3fd0:	29419784 	addi	r5,r5,1630
    3fd4:	d9402b15 	stw	r5,172(sp)
    3fd8:	d9402b17 	ldw	r5,172(sp)
    3fdc:	1c47883a 	add	r3,r3,r17
    3fe0:	10800044 	addi	r2,r2,1
    3fe4:	41400015 	stw	r5,0(r8)
    3fe8:	44400115 	stw	r17,4(r8)
    3fec:	d8c02015 	stw	r3,128(sp)
    3ff0:	d8801f15 	stw	r2,124(sp)
    3ff4:	010001c4 	movi	r4,7
    3ff8:	20bec816 	blt	r4,r2,3b1c <__alt_data_end+0xff003b1c>
    3ffc:	42000204 	addi	r8,r8,8
    4000:	003ecd06 	br	3b38 <__alt_data_end+0xff003b38>
    4004:	d9002917 	ldw	r4,164(sp)
    4008:	d8002785 	stb	zero,158(sp)
    400c:	203d2d16 	blt	r4,zero,34c4 <__alt_data_end+0xff0034c4>
    4010:	00bfdfc4 	movi	r2,-129
    4014:	90a4703a 	and	r18,r18,r2
    4018:	003a9106 	br	2a60 <__alt_data_end+0xff002a60>
    401c:	01000074 	movhi	r4,1
    4020:	21019784 	addi	r4,r4,1630
    4024:	d9002b15 	stw	r4,172(sp)
    4028:	003c0c06 	br	305c <__alt_data_end+0xff00305c>
    402c:	d9002c17 	ldw	r4,176(sp)
    4030:	d9801e04 	addi	r6,sp,120
    4034:	b80b883a 	mov	r5,r23
    4038:	00094800 	call	9480 <__sprint_r>
    403c:	103aab1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    4040:	d8c02017 	ldw	r3,128(sp)
    4044:	da000404 	addi	r8,sp,16
    4048:	003d4106 	br	3550 <__alt_data_end+0xff003550>
    404c:	d8801f17 	ldw	r2,124(sp)
    4050:	01400074 	movhi	r5,1
    4054:	01000044 	movi	r4,1
    4058:	18c00044 	addi	r3,r3,1
    405c:	10800044 	addi	r2,r2,1
    4060:	29419704 	addi	r5,r5,1628
    4064:	41000115 	stw	r4,4(r8)
    4068:	41400015 	stw	r5,0(r8)
    406c:	d8c02015 	stw	r3,128(sp)
    4070:	d8801f15 	stw	r2,124(sp)
    4074:	010001c4 	movi	r4,7
    4078:	20805c16 	blt	r4,r2,41ec <___vfprintf_internal_r+0x1b08>
    407c:	42000204 	addi	r8,r8,8
    4080:	8800041e 	bne	r17,zero,4094 <___vfprintf_internal_r+0x19b0>
    4084:	d8803317 	ldw	r2,204(sp)
    4088:	1000021e 	bne	r2,zero,4094 <___vfprintf_internal_r+0x19b0>
    408c:	9080004c 	andi	r2,r18,1
    4090:	103c0926 	beq	r2,zero,30b8 <__alt_data_end+0xff0030b8>
    4094:	d9003717 	ldw	r4,220(sp)
    4098:	d8801f17 	ldw	r2,124(sp)
    409c:	d9403417 	ldw	r5,208(sp)
    40a0:	20c7883a 	add	r3,r4,r3
    40a4:	10800044 	addi	r2,r2,1
    40a8:	41000115 	stw	r4,4(r8)
    40ac:	41400015 	stw	r5,0(r8)
    40b0:	d8c02015 	stw	r3,128(sp)
    40b4:	d8801f15 	stw	r2,124(sp)
    40b8:	010001c4 	movi	r4,7
    40bc:	20812116 	blt	r4,r2,4544 <___vfprintf_internal_r+0x1e60>
    40c0:	42000204 	addi	r8,r8,8
    40c4:	0463c83a 	sub	r17,zero,r17
    40c8:	0440730e 	bge	zero,r17,4298 <___vfprintf_internal_r+0x1bb4>
    40cc:	05800404 	movi	r22,16
    40d0:	b440860e 	bge	r22,r17,42ec <___vfprintf_internal_r+0x1c08>
    40d4:	01400074 	movhi	r5,1
    40d8:	29419784 	addi	r5,r5,1630
    40dc:	d9402b15 	stw	r5,172(sp)
    40e0:	070001c4 	movi	fp,7
    40e4:	dcc02c17 	ldw	r19,176(sp)
    40e8:	00000306 	br	40f8 <___vfprintf_internal_r+0x1a14>
    40ec:	42000204 	addi	r8,r8,8
    40f0:	8c7ffc04 	addi	r17,r17,-16
    40f4:	b440800e 	bge	r22,r17,42f8 <___vfprintf_internal_r+0x1c14>
    40f8:	18c00404 	addi	r3,r3,16
    40fc:	10800044 	addi	r2,r2,1
    4100:	45000015 	stw	r20,0(r8)
    4104:	45800115 	stw	r22,4(r8)
    4108:	d8c02015 	stw	r3,128(sp)
    410c:	d8801f15 	stw	r2,124(sp)
    4110:	e0bff60e 	bge	fp,r2,40ec <__alt_data_end+0xff0040ec>
    4114:	d9801e04 	addi	r6,sp,120
    4118:	b80b883a 	mov	r5,r23
    411c:	9809883a 	mov	r4,r19
    4120:	00094800 	call	9480 <__sprint_r>
    4124:	103a711e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    4128:	d8c02017 	ldw	r3,128(sp)
    412c:	d8801f17 	ldw	r2,124(sp)
    4130:	da000404 	addi	r8,sp,16
    4134:	003fee06 	br	40f0 <__alt_data_end+0xff0040f0>
    4138:	00bfffc4 	movi	r2,-1
    413c:	003a6f06 	br	2afc <__alt_data_end+0xff002afc>
    4140:	008011c4 	movi	r2,71
    4144:	1440b816 	blt	r2,r17,4428 <___vfprintf_internal_r+0x1d44>
    4148:	04000074 	movhi	r16,1
    414c:	84018904 	addi	r16,r16,1572
    4150:	00c000c4 	movi	r3,3
    4154:	00bfdfc4 	movi	r2,-129
    4158:	d8c02a15 	stw	r3,168(sp)
    415c:	90a4703a 	and	r18,r18,r2
    4160:	df002783 	ldbu	fp,158(sp)
    4164:	d8c02e15 	stw	r3,184(sp)
    4168:	d8002915 	stw	zero,164(sp)
    416c:	d8003215 	stw	zero,200(sp)
    4170:	003b2906 	br	2e18 <__alt_data_end+0xff002e18>
    4174:	d9002d17 	ldw	r4,180(sp)
    4178:	24c00017 	ldw	r19,0(r4)
    417c:	21000104 	addi	r4,r4,4
    4180:	d9002d15 	stw	r4,180(sp)
    4184:	982dd7fa 	srai	r22,r19,31
    4188:	b005883a 	mov	r2,r22
    418c:	003a9f06 	br	2c0c <__alt_data_end+0xff002c0c>
    4190:	d9402d17 	ldw	r5,180(sp)
    4194:	d8c02f17 	ldw	r3,188(sp)
    4198:	28800017 	ldw	r2,0(r5)
    419c:	29400104 	addi	r5,r5,4
    41a0:	d9402d15 	stw	r5,180(sp)
    41a4:	10c00015 	stw	r3,0(r2)
    41a8:	00398606 	br	27c4 <__alt_data_end+0xff0027c4>
    41ac:	d9402d17 	ldw	r5,180(sp)
    41b0:	002d883a 	mov	r22,zero
    41b4:	2cc00017 	ldw	r19,0(r5)
    41b8:	29400104 	addi	r5,r5,4
    41bc:	d9402d15 	stw	r5,180(sp)
    41c0:	003c2306 	br	3250 <__alt_data_end+0xff003250>
    41c4:	d8c02d17 	ldw	r3,180(sp)
    41c8:	d9002917 	ldw	r4,164(sp)
    41cc:	002d883a 	mov	r22,zero
    41d0:	18800104 	addi	r2,r3,4
    41d4:	1cc0000b 	ldhu	r19,0(r3)
    41d8:	203dc10e 	bge	r4,zero,38e0 <__alt_data_end+0xff0038e0>
    41dc:	003f7506 	br	3fb4 <__alt_data_end+0xff003fb4>
    41e0:	04000074 	movhi	r16,1
    41e4:	84018704 	addi	r16,r16,1564
    41e8:	003acc06 	br	2d1c <__alt_data_end+0xff002d1c>
    41ec:	d9002c17 	ldw	r4,176(sp)
    41f0:	d9801e04 	addi	r6,sp,120
    41f4:	b80b883a 	mov	r5,r23
    41f8:	00094800 	call	9480 <__sprint_r>
    41fc:	103a3b1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    4200:	dc402617 	ldw	r17,152(sp)
    4204:	d8c02017 	ldw	r3,128(sp)
    4208:	da000404 	addi	r8,sp,16
    420c:	003f9c06 	br	4080 <__alt_data_end+0xff004080>
    4210:	ac400043 	ldbu	r17,1(r21)
    4214:	94800814 	ori	r18,r18,32
    4218:	ad400044 	addi	r21,r21,1
    421c:	8c403fcc 	andi	r17,r17,255
    4220:	8c40201c 	xori	r17,r17,128
    4224:	8c7fe004 	addi	r17,r17,-128
    4228:	00398f06 	br	2868 <__alt_data_end+0xff002868>
    422c:	d8c02d15 	stw	r3,180(sp)
    4230:	0039883a 	mov	fp,zero
    4234:	003e3506 	br	3b0c <__alt_data_end+0xff003b0c>
    4238:	d9002c17 	ldw	r4,176(sp)
    423c:	d9801e04 	addi	r6,sp,120
    4240:	b80b883a 	mov	r5,r23
    4244:	00094800 	call	9480 <__sprint_r>
    4248:	103a281e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    424c:	d8c02017 	ldw	r3,128(sp)
    4250:	da000404 	addi	r8,sp,16
    4254:	003cd006 	br	3598 <__alt_data_end+0xff003598>
    4258:	8009883a 	mov	r4,r16
    425c:	da003d15 	stw	r8,244(sp)
    4260:	000264c0 	call	264c <strlen>
    4264:	d8802e15 	stw	r2,184(sp)
    4268:	da003d17 	ldw	r8,244(sp)
    426c:	103c340e 	bge	r2,zero,3340 <__alt_data_end+0xff003340>
    4270:	0005883a 	mov	r2,zero
    4274:	003c3206 	br	3340 <__alt_data_end+0xff003340>
    4278:	d9002c17 	ldw	r4,176(sp)
    427c:	d9801e04 	addi	r6,sp,120
    4280:	b80b883a 	mov	r5,r23
    4284:	00094800 	call	9480 <__sprint_r>
    4288:	103a181e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    428c:	d8c02017 	ldw	r3,128(sp)
    4290:	d8801f17 	ldw	r2,124(sp)
    4294:	da000404 	addi	r8,sp,16
    4298:	d9403317 	ldw	r5,204(sp)
    429c:	10800044 	addi	r2,r2,1
    42a0:	44000015 	stw	r16,0(r8)
    42a4:	28c7883a 	add	r3,r5,r3
    42a8:	003b7d06 	br	30a0 <__alt_data_end+0xff0030a0>
    42ac:	01000074 	movhi	r4,1
    42b0:	21019b84 	addi	r4,r4,1646
    42b4:	d9003515 	stw	r4,212(sp)
    42b8:	003b1406 	br	2f0c <__alt_data_end+0xff002f0c>
    42bc:	013fffc4 	movi	r4,-1
    42c0:	003a3506 	br	2b98 <__alt_data_end+0xff002b98>
    42c4:	0023883a 	mov	r17,zero
    42c8:	003d9d06 	br	3940 <__alt_data_end+0xff003940>
    42cc:	d9002c17 	ldw	r4,176(sp)
    42d0:	d9801e04 	addi	r6,sp,120
    42d4:	b80b883a 	mov	r5,r23
    42d8:	00094800 	call	9480 <__sprint_r>
    42dc:	103a031e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    42e0:	d8c02017 	ldw	r3,128(sp)
    42e4:	da000404 	addi	r8,sp,16
    42e8:	003d9406 	br	393c <__alt_data_end+0xff00393c>
    42ec:	01000074 	movhi	r4,1
    42f0:	21019784 	addi	r4,r4,1630
    42f4:	d9002b15 	stw	r4,172(sp)
    42f8:	d9002b17 	ldw	r4,172(sp)
    42fc:	1c47883a 	add	r3,r3,r17
    4300:	10800044 	addi	r2,r2,1
    4304:	41000015 	stw	r4,0(r8)
    4308:	44400115 	stw	r17,4(r8)
    430c:	d8c02015 	stw	r3,128(sp)
    4310:	d8801f15 	stw	r2,124(sp)
    4314:	010001c4 	movi	r4,7
    4318:	20bfd716 	blt	r4,r2,4278 <__alt_data_end+0xff004278>
    431c:	42000204 	addi	r8,r8,8
    4320:	003fdd06 	br	4298 <__alt_data_end+0xff004298>
    4324:	d9002c17 	ldw	r4,176(sp)
    4328:	d9801e04 	addi	r6,sp,120
    432c:	b80b883a 	mov	r5,r23
    4330:	00094800 	call	9480 <__sprint_r>
    4334:	1039ed1e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    4338:	d8802617 	ldw	r2,152(sp)
    433c:	d8c02017 	ldw	r3,128(sp)
    4340:	da000404 	addi	r8,sp,16
    4344:	003e1006 	br	3b88 <__alt_data_end+0xff003b88>
    4348:	00800044 	movi	r2,1
    434c:	10803fcc 	andi	r2,r2,255
    4350:	00c00044 	movi	r3,1
    4354:	10fa3526 	beq	r2,r3,2c2c <__alt_data_end+0xff002c2c>
    4358:	00c00084 	movi	r3,2
    435c:	10fbcb26 	beq	r2,r3,328c <__alt_data_end+0xff00328c>
    4360:	003a8f06 	br	2da0 <__alt_data_end+0xff002da0>
    4364:	01000074 	movhi	r4,1
    4368:	21019b84 	addi	r4,r4,1646
    436c:	d9003515 	stw	r4,212(sp)
    4370:	003b7606 	br	314c <__alt_data_end+0xff00314c>
    4374:	d8802917 	ldw	r2,164(sp)
    4378:	00c00184 	movi	r3,6
    437c:	1880012e 	bgeu	r3,r2,4384 <___vfprintf_internal_r+0x1ca0>
    4380:	1805883a 	mov	r2,r3
    4384:	d8802e15 	stw	r2,184(sp)
    4388:	1000ef16 	blt	r2,zero,4748 <___vfprintf_internal_r+0x2064>
    438c:	04000074 	movhi	r16,1
    4390:	d8802a15 	stw	r2,168(sp)
    4394:	dcc02d15 	stw	r19,180(sp)
    4398:	d8002915 	stw	zero,164(sp)
    439c:	d8003215 	stw	zero,200(sp)
    43a0:	84019504 	addi	r16,r16,1620
    43a4:	0039883a 	mov	fp,zero
    43a8:	003aa206 	br	2e34 <__alt_data_end+0xff002e34>
    43ac:	0021883a 	mov	r16,zero
    43b0:	003e0706 	br	3bd0 <__alt_data_end+0xff003bd0>
    43b4:	d9002c17 	ldw	r4,176(sp)
    43b8:	d9801e04 	addi	r6,sp,120
    43bc:	b80b883a 	mov	r5,r23
    43c0:	00094800 	call	9480 <__sprint_r>
    43c4:	1039c91e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    43c8:	d8802617 	ldw	r2,152(sp)
    43cc:	d9403317 	ldw	r5,204(sp)
    43d0:	d8c02017 	ldw	r3,128(sp)
    43d4:	da000404 	addi	r8,sp,16
    43d8:	2885c83a 	sub	r2,r5,r2
    43dc:	003dfb06 	br	3bcc <__alt_data_end+0xff003bcc>
    43e0:	9080004c 	andi	r2,r18,1
    43e4:	103e8f1e 	bne	r2,zero,3e24 <__alt_data_end+0xff003e24>
    43e8:	d8802117 	ldw	r2,132(sp)
    43ec:	003e9e06 	br	3e68 <__alt_data_end+0xff003e68>
    43f0:	1025883a 	mov	r18,r2
    43f4:	0039883a 	mov	fp,zero
    43f8:	00800084 	movi	r2,2
    43fc:	003fd306 	br	434c <__alt_data_end+0xff00434c>
    4400:	07000b44 	movi	fp,45
    4404:	df002785 	stb	fp,158(sp)
    4408:	003a4006 	br	2d0c <__alt_data_end+0xff002d0c>
    440c:	00c00b44 	movi	r3,45
    4410:	d8c02785 	stb	r3,158(sp)
    4414:	d8802a15 	stw	r2,168(sp)
    4418:	dc802b17 	ldw	r18,172(sp)
    441c:	d8002915 	stw	zero,164(sp)
    4420:	07000b44 	movi	fp,45
    4424:	003a8006 	br	2e28 <__alt_data_end+0xff002e28>
    4428:	04000074 	movhi	r16,1
    442c:	84018a04 	addi	r16,r16,1576
    4430:	003f4706 	br	4150 <__alt_data_end+0xff004150>
    4434:	d8c02d17 	ldw	r3,180(sp)
    4438:	d9002f17 	ldw	r4,188(sp)
    443c:	18800017 	ldw	r2,0(r3)
    4440:	18c00104 	addi	r3,r3,4
    4444:	d8c02d15 	stw	r3,180(sp)
    4448:	11000015 	stw	r4,0(r2)
    444c:	0038dd06 	br	27c4 <__alt_data_end+0xff0027c4>
    4450:	dd802617 	ldw	r22,152(sp)
    4454:	00bfff44 	movi	r2,-3
    4458:	b0801c16 	blt	r22,r2,44cc <___vfprintf_internal_r+0x1de8>
    445c:	d9402917 	ldw	r5,164(sp)
    4460:	2d801a16 	blt	r5,r22,44cc <___vfprintf_internal_r+0x1de8>
    4464:	dd803215 	stw	r22,200(sp)
    4468:	003e8906 	br	3e90 <__alt_data_end+0xff003e90>
    446c:	01000074 	movhi	r4,1
    4470:	21019784 	addi	r4,r4,1630
    4474:	d9002b15 	stw	r4,172(sp)
    4478:	003c9106 	br	36c0 <__alt_data_end+0xff0036c0>
    447c:	e005883a 	mov	r2,fp
    4480:	003e7906 	br	3e68 <__alt_data_end+0xff003e68>
    4484:	d9402917 	ldw	r5,164(sp)
    4488:	df002783 	ldbu	fp,158(sp)
    448c:	dcc02d15 	stw	r19,180(sp)
    4490:	d9402a15 	stw	r5,168(sp)
    4494:	d9402e15 	stw	r5,184(sp)
    4498:	d8002915 	stw	zero,164(sp)
    449c:	d8003215 	stw	zero,200(sp)
    44a0:	003a5d06 	br	2e18 <__alt_data_end+0xff002e18>
    44a4:	9080004c 	andi	r2,r18,1
    44a8:	0039883a 	mov	fp,zero
    44ac:	10000426 	beq	r2,zero,44c0 <___vfprintf_internal_r+0x1ddc>
    44b0:	00800c04 	movi	r2,48
    44b4:	dc001dc4 	addi	r16,sp,119
    44b8:	d8801dc5 	stb	r2,119(sp)
    44bc:	003b8006 	br	32c0 <__alt_data_end+0xff0032c0>
    44c0:	d8002e15 	stw	zero,184(sp)
    44c4:	dc001e04 	addi	r16,sp,120
    44c8:	003a4d06 	br	2e00 <__alt_data_end+0xff002e00>
    44cc:	8c7fff84 	addi	r17,r17,-2
    44d0:	b5bfffc4 	addi	r22,r22,-1
    44d4:	dd802615 	stw	r22,152(sp)
    44d8:	dc4022c5 	stb	r17,139(sp)
    44dc:	b000bf16 	blt	r22,zero,47dc <___vfprintf_internal_r+0x20f8>
    44e0:	00800ac4 	movi	r2,43
    44e4:	d8802305 	stb	r2,140(sp)
    44e8:	00800244 	movi	r2,9
    44ec:	15807016 	blt	r2,r22,46b0 <___vfprintf_internal_r+0x1fcc>
    44f0:	00800c04 	movi	r2,48
    44f4:	b5800c04 	addi	r22,r22,48
    44f8:	d8802345 	stb	r2,141(sp)
    44fc:	dd802385 	stb	r22,142(sp)
    4500:	d88023c4 	addi	r2,sp,143
    4504:	df0022c4 	addi	fp,sp,139
    4508:	d8c03317 	ldw	r3,204(sp)
    450c:	1739c83a 	sub	fp,r2,fp
    4510:	d9003317 	ldw	r4,204(sp)
    4514:	e0c7883a 	add	r3,fp,r3
    4518:	df003a15 	stw	fp,232(sp)
    451c:	d8c02e15 	stw	r3,184(sp)
    4520:	00800044 	movi	r2,1
    4524:	1100b30e 	bge	r2,r4,47f4 <___vfprintf_internal_r+0x2110>
    4528:	d8c02e17 	ldw	r3,184(sp)
    452c:	18c00044 	addi	r3,r3,1
    4530:	d8c02e15 	stw	r3,184(sp)
    4534:	1805883a 	mov	r2,r3
    4538:	1800ac16 	blt	r3,zero,47ec <___vfprintf_internal_r+0x2108>
    453c:	d8003215 	stw	zero,200(sp)
    4540:	003e5d06 	br	3eb8 <__alt_data_end+0xff003eb8>
    4544:	d9002c17 	ldw	r4,176(sp)
    4548:	d9801e04 	addi	r6,sp,120
    454c:	b80b883a 	mov	r5,r23
    4550:	00094800 	call	9480 <__sprint_r>
    4554:	1039651e 	bne	r2,zero,2aec <__alt_data_end+0xff002aec>
    4558:	dc402617 	ldw	r17,152(sp)
    455c:	d8c02017 	ldw	r3,128(sp)
    4560:	d8801f17 	ldw	r2,124(sp)
    4564:	da000404 	addi	r8,sp,16
    4568:	003ed606 	br	40c4 <__alt_data_end+0xff0040c4>
    456c:	582b883a 	mov	r21,r11
    4570:	d8002915 	stw	zero,164(sp)
    4574:	0038bd06 	br	286c <__alt_data_end+0xff00286c>
    4578:	d8802917 	ldw	r2,164(sp)
    457c:	103e071e 	bne	r2,zero,3d9c <__alt_data_end+0xff003d9c>
    4580:	dc002915 	stw	r16,164(sp)
    4584:	003e0506 	br	3d9c <__alt_data_end+0xff003d9c>
    4588:	d9002917 	ldw	r4,164(sp)
    458c:	20c00044 	addi	r3,r4,1
    4590:	003e0f06 	br	3dd0 <__alt_data_end+0xff003dd0>
    4594:	01400184 	movi	r5,6
    4598:	d9402915 	stw	r5,164(sp)
    459c:	003dff06 	br	3d9c <__alt_data_end+0xff003d9c>
    45a0:	d8802104 	addi	r2,sp,132
    45a4:	d8800315 	stw	r2,12(sp)
    45a8:	d8802504 	addi	r2,sp,148
    45ac:	d8800215 	stw	r2,8(sp)
    45b0:	d8802604 	addi	r2,sp,152
    45b4:	d8800115 	stw	r2,4(sp)
    45b8:	d8802917 	ldw	r2,164(sp)
    45bc:	d9403617 	ldw	r5,216(sp)
    45c0:	d9002c17 	ldw	r4,176(sp)
    45c4:	d8800015 	stw	r2,0(sp)
    45c8:	01c000c4 	movi	r7,3
    45cc:	980d883a 	mov	r6,r19
    45d0:	da003d15 	stw	r8,244(sp)
    45d4:	0004d080 	call	4d08 <_dtoa_r>
    45d8:	d8c02917 	ldw	r3,164(sp)
    45dc:	da003d17 	ldw	r8,244(sp)
    45e0:	1021883a 	mov	r16,r2
    45e4:	10f9883a 	add	fp,r2,r3
    45e8:	81000007 	ldb	r4,0(r16)
    45ec:	00800c04 	movi	r2,48
    45f0:	20805e26 	beq	r4,r2,476c <___vfprintf_internal_r+0x2088>
    45f4:	d8c02617 	ldw	r3,152(sp)
    45f8:	e0f9883a 	add	fp,fp,r3
    45fc:	003e0a06 	br	3e28 <__alt_data_end+0xff003e28>
    4600:	00c00b44 	movi	r3,45
    4604:	24e0003c 	xorhi	r19,r4,32768
    4608:	d8c02a05 	stb	r3,168(sp)
    460c:	003de906 	br	3db4 <__alt_data_end+0xff003db4>
    4610:	d8c03217 	ldw	r3,200(sp)
    4614:	00c07a0e 	bge	zero,r3,4800 <___vfprintf_internal_r+0x211c>
    4618:	00800044 	movi	r2,1
    461c:	d9003317 	ldw	r4,204(sp)
    4620:	1105883a 	add	r2,r2,r4
    4624:	d8802e15 	stw	r2,184(sp)
    4628:	10004e16 	blt	r2,zero,4764 <___vfprintf_internal_r+0x2080>
    462c:	044019c4 	movi	r17,103
    4630:	003e2106 	br	3eb8 <__alt_data_end+0xff003eb8>
    4634:	d9002917 	ldw	r4,164(sp)
    4638:	d8802104 	addi	r2,sp,132
    463c:	d8800315 	stw	r2,12(sp)
    4640:	d9000015 	stw	r4,0(sp)
    4644:	d8802504 	addi	r2,sp,148
    4648:	d9403617 	ldw	r5,216(sp)
    464c:	d9002c17 	ldw	r4,176(sp)
    4650:	d8800215 	stw	r2,8(sp)
    4654:	d8802604 	addi	r2,sp,152
    4658:	d8800115 	stw	r2,4(sp)
    465c:	01c000c4 	movi	r7,3
    4660:	980d883a 	mov	r6,r19
    4664:	da003d15 	stw	r8,244(sp)
    4668:	0004d080 	call	4d08 <_dtoa_r>
    466c:	d8c02917 	ldw	r3,164(sp)
    4670:	da003d17 	ldw	r8,244(sp)
    4674:	1021883a 	mov	r16,r2
    4678:	00801184 	movi	r2,70
    467c:	80f9883a 	add	fp,r16,r3
    4680:	88bfd926 	beq	r17,r2,45e8 <__alt_data_end+0xff0045e8>
    4684:	003de806 	br	3e28 <__alt_data_end+0xff003e28>
    4688:	d9002917 	ldw	r4,164(sp)
    468c:	00c04d0e 	bge	zero,r3,47c4 <___vfprintf_internal_r+0x20e0>
    4690:	2000441e 	bne	r4,zero,47a4 <___vfprintf_internal_r+0x20c0>
    4694:	9480004c 	andi	r18,r18,1
    4698:	9000421e 	bne	r18,zero,47a4 <___vfprintf_internal_r+0x20c0>
    469c:	1805883a 	mov	r2,r3
    46a0:	18007016 	blt	r3,zero,4864 <___vfprintf_internal_r+0x2180>
    46a4:	d8c03217 	ldw	r3,200(sp)
    46a8:	d8c02e15 	stw	r3,184(sp)
    46ac:	003e0206 	br	3eb8 <__alt_data_end+0xff003eb8>
    46b0:	df0022c4 	addi	fp,sp,139
    46b4:	dc002915 	stw	r16,164(sp)
    46b8:	4027883a 	mov	r19,r8
    46bc:	e021883a 	mov	r16,fp
    46c0:	b009883a 	mov	r4,r22
    46c4:	01400284 	movi	r5,10
    46c8:	000be340 	call	be34 <__modsi3>
    46cc:	10800c04 	addi	r2,r2,48
    46d0:	843fffc4 	addi	r16,r16,-1
    46d4:	b009883a 	mov	r4,r22
    46d8:	01400284 	movi	r5,10
    46dc:	80800005 	stb	r2,0(r16)
    46e0:	000bdb00 	call	bdb0 <__divsi3>
    46e4:	102d883a 	mov	r22,r2
    46e8:	00800244 	movi	r2,9
    46ec:	15bff416 	blt	r2,r22,46c0 <__alt_data_end+0xff0046c0>
    46f0:	9811883a 	mov	r8,r19
    46f4:	b0800c04 	addi	r2,r22,48
    46f8:	8027883a 	mov	r19,r16
    46fc:	997fffc4 	addi	r5,r19,-1
    4700:	98bfffc5 	stb	r2,-1(r19)
    4704:	dc002917 	ldw	r16,164(sp)
    4708:	2f006a2e 	bgeu	r5,fp,48b4 <___vfprintf_internal_r+0x21d0>
    470c:	d9c02384 	addi	r7,sp,142
    4710:	3ccfc83a 	sub	r7,r7,r19
    4714:	d9002344 	addi	r4,sp,141
    4718:	e1cf883a 	add	r7,fp,r7
    471c:	00000106 	br	4724 <___vfprintf_internal_r+0x2040>
    4720:	28800003 	ldbu	r2,0(r5)
    4724:	20800005 	stb	r2,0(r4)
    4728:	21000044 	addi	r4,r4,1
    472c:	29400044 	addi	r5,r5,1
    4730:	393ffb1e 	bne	r7,r4,4720 <__alt_data_end+0xff004720>
    4734:	d8802304 	addi	r2,sp,140
    4738:	14c5c83a 	sub	r2,r2,r19
    473c:	d8c02344 	addi	r3,sp,141
    4740:	1885883a 	add	r2,r3,r2
    4744:	003f7006 	br	4508 <__alt_data_end+0xff004508>
    4748:	0005883a 	mov	r2,zero
    474c:	003f0f06 	br	438c <__alt_data_end+0xff00438c>
    4750:	d8c03217 	ldw	r3,200(sp)
    4754:	18c00044 	addi	r3,r3,1
    4758:	d8c02e15 	stw	r3,184(sp)
    475c:	1805883a 	mov	r2,r3
    4760:	183fb20e 	bge	r3,zero,462c <__alt_data_end+0xff00462c>
    4764:	0005883a 	mov	r2,zero
    4768:	003fb006 	br	462c <__alt_data_end+0xff00462c>
    476c:	d9003617 	ldw	r4,216(sp)
    4770:	000d883a 	mov	r6,zero
    4774:	000f883a 	mov	r7,zero
    4778:	980b883a 	mov	r5,r19
    477c:	d8c03c15 	stw	r3,240(sp)
    4780:	da003d15 	stw	r8,244(sp)
    4784:	000d0f80 	call	d0f8 <__eqdf2>
    4788:	d8c03c17 	ldw	r3,240(sp)
    478c:	da003d17 	ldw	r8,244(sp)
    4790:	103f9826 	beq	r2,zero,45f4 <__alt_data_end+0xff0045f4>
    4794:	00800044 	movi	r2,1
    4798:	10c7c83a 	sub	r3,r2,r3
    479c:	d8c02615 	stw	r3,152(sp)
    47a0:	003f9506 	br	45f8 <__alt_data_end+0xff0045f8>
    47a4:	d9002917 	ldw	r4,164(sp)
    47a8:	d8c03217 	ldw	r3,200(sp)
    47ac:	20800044 	addi	r2,r4,1
    47b0:	1885883a 	add	r2,r3,r2
    47b4:	d8802e15 	stw	r2,184(sp)
    47b8:	103dbf0e 	bge	r2,zero,3eb8 <__alt_data_end+0xff003eb8>
    47bc:	0005883a 	mov	r2,zero
    47c0:	003dbd06 	br	3eb8 <__alt_data_end+0xff003eb8>
    47c4:	2000211e 	bne	r4,zero,484c <___vfprintf_internal_r+0x2168>
    47c8:	9480004c 	andi	r18,r18,1
    47cc:	90001f1e 	bne	r18,zero,484c <___vfprintf_internal_r+0x2168>
    47d0:	00800044 	movi	r2,1
    47d4:	d8802e15 	stw	r2,184(sp)
    47d8:	003db706 	br	3eb8 <__alt_data_end+0xff003eb8>
    47dc:	00800b44 	movi	r2,45
    47e0:	05adc83a 	sub	r22,zero,r22
    47e4:	d8802305 	stb	r2,140(sp)
    47e8:	003f3f06 	br	44e8 <__alt_data_end+0xff0044e8>
    47ec:	0005883a 	mov	r2,zero
    47f0:	003f5206 	br	453c <__alt_data_end+0xff00453c>
    47f4:	90a4703a 	and	r18,r18,r2
    47f8:	903f4e26 	beq	r18,zero,4534 <__alt_data_end+0xff004534>
    47fc:	003f4a06 	br	4528 <__alt_data_end+0xff004528>
    4800:	00800084 	movi	r2,2
    4804:	10c5c83a 	sub	r2,r2,r3
    4808:	003f8406 	br	461c <__alt_data_end+0xff00461c>
    480c:	d8802d17 	ldw	r2,180(sp)
    4810:	d9002d17 	ldw	r4,180(sp)
    4814:	ac400043 	ldbu	r17,1(r21)
    4818:	10800017 	ldw	r2,0(r2)
    481c:	582b883a 	mov	r21,r11
    4820:	d8802915 	stw	r2,164(sp)
    4824:	20800104 	addi	r2,r4,4
    4828:	d9002917 	ldw	r4,164(sp)
    482c:	d8802d15 	stw	r2,180(sp)
    4830:	203e7a0e 	bge	r4,zero,421c <__alt_data_end+0xff00421c>
    4834:	8c403fcc 	andi	r17,r17,255
    4838:	00bfffc4 	movi	r2,-1
    483c:	8c40201c 	xori	r17,r17,128
    4840:	d8802915 	stw	r2,164(sp)
    4844:	8c7fe004 	addi	r17,r17,-128
    4848:	00380706 	br	2868 <__alt_data_end+0xff002868>
    484c:	d8c02917 	ldw	r3,164(sp)
    4850:	18c00084 	addi	r3,r3,2
    4854:	d8c02e15 	stw	r3,184(sp)
    4858:	1805883a 	mov	r2,r3
    485c:	183d960e 	bge	r3,zero,3eb8 <__alt_data_end+0xff003eb8>
    4860:	003fd606 	br	47bc <__alt_data_end+0xff0047bc>
    4864:	0005883a 	mov	r2,zero
    4868:	003f8e06 	br	46a4 <__alt_data_end+0xff0046a4>
    486c:	9080004c 	andi	r2,r18,1
    4870:	103f811e 	bne	r2,zero,4678 <__alt_data_end+0xff004678>
    4874:	d8802117 	ldw	r2,132(sp)
    4878:	1405c83a 	sub	r2,r2,r16
    487c:	d8803315 	stw	r2,204(sp)
    4880:	b47ef326 	beq	r22,r17,4450 <__alt_data_end+0xff004450>
    4884:	dd802617 	ldw	r22,152(sp)
    4888:	003f1106 	br	44d0 <__alt_data_end+0xff0044d0>
    488c:	d9c02785 	stb	r7,158(sp)
    4890:	00390406 	br	2ca4 <__alt_data_end+0xff002ca4>
    4894:	d9c02785 	stb	r7,158(sp)
    4898:	0038d306 	br	2be8 <__alt_data_end+0xff002be8>
    489c:	d9c02785 	stb	r7,158(sp)
    48a0:	003a6106 	br	3228 <__alt_data_end+0xff003228>
    48a4:	d9c02785 	stb	r7,158(sp)
    48a8:	003af806 	br	348c <__alt_data_end+0xff00348c>
    48ac:	0005883a 	mov	r2,zero
    48b0:	003d7e06 	br	3eac <__alt_data_end+0xff003eac>
    48b4:	d8802344 	addi	r2,sp,141
    48b8:	003f1306 	br	4508 <__alt_data_end+0xff004508>
    48bc:	d9c02785 	stb	r7,158(sp)
    48c0:	00392306 	br	2d50 <__alt_data_end+0xff002d50>
    48c4:	d9c02785 	stb	r7,158(sp)
    48c8:	003aa906 	br	3370 <__alt_data_end+0xff003370>
    48cc:	d9c02785 	stb	r7,158(sp)
    48d0:	003a3d06 	br	31c8 <__alt_data_end+0xff0031c8>
    48d4:	d9c02785 	stb	r7,158(sp)
    48d8:	003aca06 	br	3404 <__alt_data_end+0xff003404>

000048dc <__vfprintf_internal>:
    48dc:	00800074 	movhi	r2,1
    48e0:	1088f004 	addi	r2,r2,9152
    48e4:	300f883a 	mov	r7,r6
    48e8:	280d883a 	mov	r6,r5
    48ec:	200b883a 	mov	r5,r4
    48f0:	11000017 	ldw	r4,0(r2)
    48f4:	00026e41 	jmpi	26e4 <___vfprintf_internal_r>

000048f8 <__sbprintf>:
    48f8:	2880030b 	ldhu	r2,12(r5)
    48fc:	2ac01917 	ldw	r11,100(r5)
    4900:	2a80038b 	ldhu	r10,14(r5)
    4904:	2a400717 	ldw	r9,28(r5)
    4908:	2a000917 	ldw	r8,36(r5)
    490c:	defee204 	addi	sp,sp,-1144
    4910:	00c10004 	movi	r3,1024
    4914:	dc011a15 	stw	r16,1128(sp)
    4918:	10bfff4c 	andi	r2,r2,65533
    491c:	2821883a 	mov	r16,r5
    4920:	d8cb883a 	add	r5,sp,r3
    4924:	dc811c15 	stw	r18,1136(sp)
    4928:	dc411b15 	stw	r17,1132(sp)
    492c:	dfc11d15 	stw	ra,1140(sp)
    4930:	2025883a 	mov	r18,r4
    4934:	d881030d 	sth	r2,1036(sp)
    4938:	dac11915 	stw	r11,1124(sp)
    493c:	da81038d 	sth	r10,1038(sp)
    4940:	da410715 	stw	r9,1052(sp)
    4944:	da010915 	stw	r8,1060(sp)
    4948:	dec10015 	stw	sp,1024(sp)
    494c:	dec10415 	stw	sp,1040(sp)
    4950:	d8c10215 	stw	r3,1032(sp)
    4954:	d8c10515 	stw	r3,1044(sp)
    4958:	d8010615 	stw	zero,1048(sp)
    495c:	00026e40 	call	26e4 <___vfprintf_internal_r>
    4960:	1023883a 	mov	r17,r2
    4964:	10000416 	blt	r2,zero,4978 <__sbprintf+0x80>
    4968:	d9410004 	addi	r5,sp,1024
    496c:	9009883a 	mov	r4,r18
    4970:	00065ac0 	call	65ac <_fflush_r>
    4974:	10000d1e 	bne	r2,zero,49ac <__sbprintf+0xb4>
    4978:	d881030b 	ldhu	r2,1036(sp)
    497c:	1080100c 	andi	r2,r2,64
    4980:	10000326 	beq	r2,zero,4990 <__sbprintf+0x98>
    4984:	8080030b 	ldhu	r2,12(r16)
    4988:	10801014 	ori	r2,r2,64
    498c:	8080030d 	sth	r2,12(r16)
    4990:	8805883a 	mov	r2,r17
    4994:	dfc11d17 	ldw	ra,1140(sp)
    4998:	dc811c17 	ldw	r18,1136(sp)
    499c:	dc411b17 	ldw	r17,1132(sp)
    49a0:	dc011a17 	ldw	r16,1128(sp)
    49a4:	dec11e04 	addi	sp,sp,1144
    49a8:	f800283a 	ret
    49ac:	047fffc4 	movi	r17,-1
    49b0:	003ff106 	br	4978 <__alt_data_end+0xff004978>

000049b4 <__swsetup_r>:
    49b4:	00800074 	movhi	r2,1
    49b8:	defffd04 	addi	sp,sp,-12
    49bc:	1088f004 	addi	r2,r2,9152
    49c0:	dc400115 	stw	r17,4(sp)
    49c4:	2023883a 	mov	r17,r4
    49c8:	11000017 	ldw	r4,0(r2)
    49cc:	dc000015 	stw	r16,0(sp)
    49d0:	dfc00215 	stw	ra,8(sp)
    49d4:	2821883a 	mov	r16,r5
    49d8:	20000226 	beq	r4,zero,49e4 <__swsetup_r+0x30>
    49dc:	20800e17 	ldw	r2,56(r4)
    49e0:	10003126 	beq	r2,zero,4aa8 <__swsetup_r+0xf4>
    49e4:	8080030b 	ldhu	r2,12(r16)
    49e8:	10c0020c 	andi	r3,r2,8
    49ec:	1009883a 	mov	r4,r2
    49f0:	18000f26 	beq	r3,zero,4a30 <__swsetup_r+0x7c>
    49f4:	80c00417 	ldw	r3,16(r16)
    49f8:	18001526 	beq	r3,zero,4a50 <__swsetup_r+0x9c>
    49fc:	1100004c 	andi	r4,r2,1
    4a00:	20001c1e 	bne	r4,zero,4a74 <__swsetup_r+0xc0>
    4a04:	1080008c 	andi	r2,r2,2
    4a08:	1000291e 	bne	r2,zero,4ab0 <__swsetup_r+0xfc>
    4a0c:	80800517 	ldw	r2,20(r16)
    4a10:	80800215 	stw	r2,8(r16)
    4a14:	18001c26 	beq	r3,zero,4a88 <__swsetup_r+0xd4>
    4a18:	0005883a 	mov	r2,zero
    4a1c:	dfc00217 	ldw	ra,8(sp)
    4a20:	dc400117 	ldw	r17,4(sp)
    4a24:	dc000017 	ldw	r16,0(sp)
    4a28:	dec00304 	addi	sp,sp,12
    4a2c:	f800283a 	ret
    4a30:	2080040c 	andi	r2,r4,16
    4a34:	10002e26 	beq	r2,zero,4af0 <__swsetup_r+0x13c>
    4a38:	2080010c 	andi	r2,r4,4
    4a3c:	10001e1e 	bne	r2,zero,4ab8 <__swsetup_r+0x104>
    4a40:	80c00417 	ldw	r3,16(r16)
    4a44:	20800214 	ori	r2,r4,8
    4a48:	8080030d 	sth	r2,12(r16)
    4a4c:	183feb1e 	bne	r3,zero,49fc <__alt_data_end+0xff0049fc>
    4a50:	1100a00c 	andi	r4,r2,640
    4a54:	01408004 	movi	r5,512
    4a58:	217fe826 	beq	r4,r5,49fc <__alt_data_end+0xff0049fc>
    4a5c:	800b883a 	mov	r5,r16
    4a60:	8809883a 	mov	r4,r17
    4a64:	000752c0 	call	752c <__smakebuf_r>
    4a68:	8080030b 	ldhu	r2,12(r16)
    4a6c:	80c00417 	ldw	r3,16(r16)
    4a70:	003fe206 	br	49fc <__alt_data_end+0xff0049fc>
    4a74:	80800517 	ldw	r2,20(r16)
    4a78:	80000215 	stw	zero,8(r16)
    4a7c:	0085c83a 	sub	r2,zero,r2
    4a80:	80800615 	stw	r2,24(r16)
    4a84:	183fe41e 	bne	r3,zero,4a18 <__alt_data_end+0xff004a18>
    4a88:	80c0030b 	ldhu	r3,12(r16)
    4a8c:	0005883a 	mov	r2,zero
    4a90:	1900200c 	andi	r4,r3,128
    4a94:	203fe126 	beq	r4,zero,4a1c <__alt_data_end+0xff004a1c>
    4a98:	18c01014 	ori	r3,r3,64
    4a9c:	80c0030d 	sth	r3,12(r16)
    4aa0:	00bfffc4 	movi	r2,-1
    4aa4:	003fdd06 	br	4a1c <__alt_data_end+0xff004a1c>
    4aa8:	00069880 	call	6988 <__sinit>
    4aac:	003fcd06 	br	49e4 <__alt_data_end+0xff0049e4>
    4ab0:	0005883a 	mov	r2,zero
    4ab4:	003fd606 	br	4a10 <__alt_data_end+0xff004a10>
    4ab8:	81400c17 	ldw	r5,48(r16)
    4abc:	28000626 	beq	r5,zero,4ad8 <__swsetup_r+0x124>
    4ac0:	80801004 	addi	r2,r16,64
    4ac4:	28800326 	beq	r5,r2,4ad4 <__swsetup_r+0x120>
    4ac8:	8809883a 	mov	r4,r17
    4acc:	0006afc0 	call	6afc <_free_r>
    4ad0:	8100030b 	ldhu	r4,12(r16)
    4ad4:	80000c15 	stw	zero,48(r16)
    4ad8:	80c00417 	ldw	r3,16(r16)
    4adc:	00bff6c4 	movi	r2,-37
    4ae0:	1108703a 	and	r4,r2,r4
    4ae4:	80000115 	stw	zero,4(r16)
    4ae8:	80c00015 	stw	r3,0(r16)
    4aec:	003fd506 	br	4a44 <__alt_data_end+0xff004a44>
    4af0:	00800244 	movi	r2,9
    4af4:	88800015 	stw	r2,0(r17)
    4af8:	20801014 	ori	r2,r4,64
    4afc:	8080030d 	sth	r2,12(r16)
    4b00:	00bfffc4 	movi	r2,-1
    4b04:	003fc506 	br	4a1c <__alt_data_end+0xff004a1c>

00004b08 <quorem>:
    4b08:	defff704 	addi	sp,sp,-36
    4b0c:	dc800215 	stw	r18,8(sp)
    4b10:	20800417 	ldw	r2,16(r4)
    4b14:	2c800417 	ldw	r18,16(r5)
    4b18:	dfc00815 	stw	ra,32(sp)
    4b1c:	ddc00715 	stw	r23,28(sp)
    4b20:	dd800615 	stw	r22,24(sp)
    4b24:	dd400515 	stw	r21,20(sp)
    4b28:	dd000415 	stw	r20,16(sp)
    4b2c:	dcc00315 	stw	r19,12(sp)
    4b30:	dc400115 	stw	r17,4(sp)
    4b34:	dc000015 	stw	r16,0(sp)
    4b38:	14807116 	blt	r2,r18,4d00 <quorem+0x1f8>
    4b3c:	94bfffc4 	addi	r18,r18,-1
    4b40:	94ad883a 	add	r22,r18,r18
    4b44:	b5ad883a 	add	r22,r22,r22
    4b48:	2c400504 	addi	r17,r5,20
    4b4c:	8da9883a 	add	r20,r17,r22
    4b50:	25400504 	addi	r21,r4,20
    4b54:	282f883a 	mov	r23,r5
    4b58:	adad883a 	add	r22,r21,r22
    4b5c:	a1400017 	ldw	r5,0(r20)
    4b60:	2021883a 	mov	r16,r4
    4b64:	b1000017 	ldw	r4,0(r22)
    4b68:	29400044 	addi	r5,r5,1
    4b6c:	000bea80 	call	bea8 <__udivsi3>
    4b70:	1027883a 	mov	r19,r2
    4b74:	10002c26 	beq	r2,zero,4c28 <quorem+0x120>
    4b78:	a813883a 	mov	r9,r21
    4b7c:	880b883a 	mov	r5,r17
    4b80:	0009883a 	mov	r4,zero
    4b84:	000d883a 	mov	r6,zero
    4b88:	2a000017 	ldw	r8,0(r5)
    4b8c:	49c00017 	ldw	r7,0(r9)
    4b90:	29400104 	addi	r5,r5,4
    4b94:	40bfffcc 	andi	r2,r8,65535
    4b98:	14c5383a 	mul	r2,r2,r19
    4b9c:	4010d43a 	srli	r8,r8,16
    4ba0:	38ffffcc 	andi	r3,r7,65535
    4ba4:	1105883a 	add	r2,r2,r4
    4ba8:	1008d43a 	srli	r4,r2,16
    4bac:	44d1383a 	mul	r8,r8,r19
    4bb0:	198d883a 	add	r6,r3,r6
    4bb4:	10ffffcc 	andi	r3,r2,65535
    4bb8:	30c7c83a 	sub	r3,r6,r3
    4bbc:	380ed43a 	srli	r7,r7,16
    4bc0:	4105883a 	add	r2,r8,r4
    4bc4:	180dd43a 	srai	r6,r3,16
    4bc8:	113fffcc 	andi	r4,r2,65535
    4bcc:	390fc83a 	sub	r7,r7,r4
    4bd0:	398d883a 	add	r6,r7,r6
    4bd4:	300e943a 	slli	r7,r6,16
    4bd8:	18ffffcc 	andi	r3,r3,65535
    4bdc:	1008d43a 	srli	r4,r2,16
    4be0:	38ceb03a 	or	r7,r7,r3
    4be4:	49c00015 	stw	r7,0(r9)
    4be8:	300dd43a 	srai	r6,r6,16
    4bec:	4a400104 	addi	r9,r9,4
    4bf0:	a17fe52e 	bgeu	r20,r5,4b88 <__alt_data_end+0xff004b88>
    4bf4:	b0800017 	ldw	r2,0(r22)
    4bf8:	10000b1e 	bne	r2,zero,4c28 <quorem+0x120>
    4bfc:	b0bfff04 	addi	r2,r22,-4
    4c00:	a880082e 	bgeu	r21,r2,4c24 <quorem+0x11c>
    4c04:	b0ffff17 	ldw	r3,-4(r22)
    4c08:	18000326 	beq	r3,zero,4c18 <quorem+0x110>
    4c0c:	00000506 	br	4c24 <quorem+0x11c>
    4c10:	10c00017 	ldw	r3,0(r2)
    4c14:	1800031e 	bne	r3,zero,4c24 <quorem+0x11c>
    4c18:	10bfff04 	addi	r2,r2,-4
    4c1c:	94bfffc4 	addi	r18,r18,-1
    4c20:	a8bffb36 	bltu	r21,r2,4c10 <__alt_data_end+0xff004c10>
    4c24:	84800415 	stw	r18,16(r16)
    4c28:	b80b883a 	mov	r5,r23
    4c2c:	8009883a 	mov	r4,r16
    4c30:	00084600 	call	8460 <__mcmp>
    4c34:	10002616 	blt	r2,zero,4cd0 <quorem+0x1c8>
    4c38:	9cc00044 	addi	r19,r19,1
    4c3c:	a805883a 	mov	r2,r21
    4c40:	000b883a 	mov	r5,zero
    4c44:	11000017 	ldw	r4,0(r2)
    4c48:	89800017 	ldw	r6,0(r17)
    4c4c:	10800104 	addi	r2,r2,4
    4c50:	20ffffcc 	andi	r3,r4,65535
    4c54:	194b883a 	add	r5,r3,r5
    4c58:	30ffffcc 	andi	r3,r6,65535
    4c5c:	28c7c83a 	sub	r3,r5,r3
    4c60:	300cd43a 	srli	r6,r6,16
    4c64:	2008d43a 	srli	r4,r4,16
    4c68:	180bd43a 	srai	r5,r3,16
    4c6c:	18ffffcc 	andi	r3,r3,65535
    4c70:	2189c83a 	sub	r4,r4,r6
    4c74:	2149883a 	add	r4,r4,r5
    4c78:	200c943a 	slli	r6,r4,16
    4c7c:	8c400104 	addi	r17,r17,4
    4c80:	200bd43a 	srai	r5,r4,16
    4c84:	30c6b03a 	or	r3,r6,r3
    4c88:	10ffff15 	stw	r3,-4(r2)
    4c8c:	a47fed2e 	bgeu	r20,r17,4c44 <__alt_data_end+0xff004c44>
    4c90:	9485883a 	add	r2,r18,r18
    4c94:	1085883a 	add	r2,r2,r2
    4c98:	a887883a 	add	r3,r21,r2
    4c9c:	18800017 	ldw	r2,0(r3)
    4ca0:	10000b1e 	bne	r2,zero,4cd0 <quorem+0x1c8>
    4ca4:	18bfff04 	addi	r2,r3,-4
    4ca8:	a880082e 	bgeu	r21,r2,4ccc <quorem+0x1c4>
    4cac:	18ffff17 	ldw	r3,-4(r3)
    4cb0:	18000326 	beq	r3,zero,4cc0 <quorem+0x1b8>
    4cb4:	00000506 	br	4ccc <quorem+0x1c4>
    4cb8:	10c00017 	ldw	r3,0(r2)
    4cbc:	1800031e 	bne	r3,zero,4ccc <quorem+0x1c4>
    4cc0:	10bfff04 	addi	r2,r2,-4
    4cc4:	94bfffc4 	addi	r18,r18,-1
    4cc8:	a8bffb36 	bltu	r21,r2,4cb8 <__alt_data_end+0xff004cb8>
    4ccc:	84800415 	stw	r18,16(r16)
    4cd0:	9805883a 	mov	r2,r19
    4cd4:	dfc00817 	ldw	ra,32(sp)
    4cd8:	ddc00717 	ldw	r23,28(sp)
    4cdc:	dd800617 	ldw	r22,24(sp)
    4ce0:	dd400517 	ldw	r21,20(sp)
    4ce4:	dd000417 	ldw	r20,16(sp)
    4ce8:	dcc00317 	ldw	r19,12(sp)
    4cec:	dc800217 	ldw	r18,8(sp)
    4cf0:	dc400117 	ldw	r17,4(sp)
    4cf4:	dc000017 	ldw	r16,0(sp)
    4cf8:	dec00904 	addi	sp,sp,36
    4cfc:	f800283a 	ret
    4d00:	0005883a 	mov	r2,zero
    4d04:	003ff306 	br	4cd4 <__alt_data_end+0xff004cd4>

00004d08 <_dtoa_r>:
    4d08:	20801017 	ldw	r2,64(r4)
    4d0c:	deffde04 	addi	sp,sp,-136
    4d10:	df002015 	stw	fp,128(sp)
    4d14:	dcc01b15 	stw	r19,108(sp)
    4d18:	dc801a15 	stw	r18,104(sp)
    4d1c:	dc401915 	stw	r17,100(sp)
    4d20:	dc001815 	stw	r16,96(sp)
    4d24:	dfc02115 	stw	ra,132(sp)
    4d28:	ddc01f15 	stw	r23,124(sp)
    4d2c:	dd801e15 	stw	r22,120(sp)
    4d30:	dd401d15 	stw	r21,116(sp)
    4d34:	dd001c15 	stw	r20,112(sp)
    4d38:	d9c00315 	stw	r7,12(sp)
    4d3c:	2039883a 	mov	fp,r4
    4d40:	3023883a 	mov	r17,r6
    4d44:	2825883a 	mov	r18,r5
    4d48:	dc002417 	ldw	r16,144(sp)
    4d4c:	3027883a 	mov	r19,r6
    4d50:	10000826 	beq	r2,zero,4d74 <_dtoa_r+0x6c>
    4d54:	21801117 	ldw	r6,68(r4)
    4d58:	00c00044 	movi	r3,1
    4d5c:	100b883a 	mov	r5,r2
    4d60:	1986983a 	sll	r3,r3,r6
    4d64:	11800115 	stw	r6,4(r2)
    4d68:	10c00215 	stw	r3,8(r2)
    4d6c:	0007c400 	call	7c40 <_Bfree>
    4d70:	e0001015 	stw	zero,64(fp)
    4d74:	88002e16 	blt	r17,zero,4e30 <_dtoa_r+0x128>
    4d78:	80000015 	stw	zero,0(r16)
    4d7c:	889ffc2c 	andhi	r2,r17,32752
    4d80:	00dffc34 	movhi	r3,32752
    4d84:	10c01c26 	beq	r2,r3,4df8 <_dtoa_r+0xf0>
    4d88:	000d883a 	mov	r6,zero
    4d8c:	000f883a 	mov	r7,zero
    4d90:	9009883a 	mov	r4,r18
    4d94:	980b883a 	mov	r5,r19
    4d98:	000d0f80 	call	d0f8 <__eqdf2>
    4d9c:	10002b1e 	bne	r2,zero,4e4c <_dtoa_r+0x144>
    4da0:	d9c02317 	ldw	r7,140(sp)
    4da4:	00800044 	movi	r2,1
    4da8:	38800015 	stw	r2,0(r7)
    4dac:	d8802517 	ldw	r2,148(sp)
    4db0:	10019e26 	beq	r2,zero,542c <_dtoa_r+0x724>
    4db4:	d8c02517 	ldw	r3,148(sp)
    4db8:	00800074 	movhi	r2,1
    4dbc:	10819744 	addi	r2,r2,1629
    4dc0:	18800015 	stw	r2,0(r3)
    4dc4:	10bfffc4 	addi	r2,r2,-1
    4dc8:	dfc02117 	ldw	ra,132(sp)
    4dcc:	df002017 	ldw	fp,128(sp)
    4dd0:	ddc01f17 	ldw	r23,124(sp)
    4dd4:	dd801e17 	ldw	r22,120(sp)
    4dd8:	dd401d17 	ldw	r21,116(sp)
    4ddc:	dd001c17 	ldw	r20,112(sp)
    4de0:	dcc01b17 	ldw	r19,108(sp)
    4de4:	dc801a17 	ldw	r18,104(sp)
    4de8:	dc401917 	ldw	r17,100(sp)
    4dec:	dc001817 	ldw	r16,96(sp)
    4df0:	dec02204 	addi	sp,sp,136
    4df4:	f800283a 	ret
    4df8:	d8c02317 	ldw	r3,140(sp)
    4dfc:	0089c3c4 	movi	r2,9999
    4e00:	18800015 	stw	r2,0(r3)
    4e04:	90017726 	beq	r18,zero,53e4 <_dtoa_r+0x6dc>
    4e08:	00800074 	movhi	r2,1
    4e0c:	1081a304 	addi	r2,r2,1676
    4e10:	d9002517 	ldw	r4,148(sp)
    4e14:	203fec26 	beq	r4,zero,4dc8 <__alt_data_end+0xff004dc8>
    4e18:	10c000c7 	ldb	r3,3(r2)
    4e1c:	1801781e 	bne	r3,zero,5400 <_dtoa_r+0x6f8>
    4e20:	10c000c4 	addi	r3,r2,3
    4e24:	d9802517 	ldw	r6,148(sp)
    4e28:	30c00015 	stw	r3,0(r6)
    4e2c:	003fe606 	br	4dc8 <__alt_data_end+0xff004dc8>
    4e30:	04e00034 	movhi	r19,32768
    4e34:	9cffffc4 	addi	r19,r19,-1
    4e38:	00800044 	movi	r2,1
    4e3c:	8ce6703a 	and	r19,r17,r19
    4e40:	80800015 	stw	r2,0(r16)
    4e44:	9823883a 	mov	r17,r19
    4e48:	003fcc06 	br	4d7c <__alt_data_end+0xff004d7c>
    4e4c:	d8800204 	addi	r2,sp,8
    4e50:	d8800015 	stw	r2,0(sp)
    4e54:	d9c00104 	addi	r7,sp,4
    4e58:	900b883a 	mov	r5,r18
    4e5c:	980d883a 	mov	r6,r19
    4e60:	e009883a 	mov	r4,fp
    4e64:	8820d53a 	srli	r16,r17,20
    4e68:	000882c0 	call	882c <__d2b>
    4e6c:	d8800915 	stw	r2,36(sp)
    4e70:	8001651e 	bne	r16,zero,5408 <_dtoa_r+0x700>
    4e74:	dd800217 	ldw	r22,8(sp)
    4e78:	dc000117 	ldw	r16,4(sp)
    4e7c:	00800804 	movi	r2,32
    4e80:	b421883a 	add	r16,r22,r16
    4e84:	80c10c84 	addi	r3,r16,1074
    4e88:	10c2d10e 	bge	r2,r3,59d0 <_dtoa_r+0xcc8>
    4e8c:	00801004 	movi	r2,64
    4e90:	81010484 	addi	r4,r16,1042
    4e94:	10c7c83a 	sub	r3,r2,r3
    4e98:	9108d83a 	srl	r4,r18,r4
    4e9c:	88e2983a 	sll	r17,r17,r3
    4ea0:	2448b03a 	or	r4,r4,r17
    4ea4:	000e4c00 	call	e4c0 <__floatunsidf>
    4ea8:	017f8434 	movhi	r5,65040
    4eac:	01800044 	movi	r6,1
    4eb0:	1009883a 	mov	r4,r2
    4eb4:	194b883a 	add	r5,r3,r5
    4eb8:	843fffc4 	addi	r16,r16,-1
    4ebc:	d9801115 	stw	r6,68(sp)
    4ec0:	000d883a 	mov	r6,zero
    4ec4:	01cffe34 	movhi	r7,16376
    4ec8:	000da680 	call	da68 <__subdf3>
    4ecc:	0198dbf4 	movhi	r6,25455
    4ed0:	01cff4f4 	movhi	r7,16339
    4ed4:	3190d844 	addi	r6,r6,17249
    4ed8:	39e1e9c4 	addi	r7,r7,-30809
    4edc:	1009883a 	mov	r4,r2
    4ee0:	180b883a 	mov	r5,r3
    4ee4:	000d3500 	call	d350 <__muldf3>
    4ee8:	01a2d874 	movhi	r6,35681
    4eec:	01cff1f4 	movhi	r7,16327
    4ef0:	31b22cc4 	addi	r6,r6,-14157
    4ef4:	39e28a04 	addi	r7,r7,-30168
    4ef8:	180b883a 	mov	r5,r3
    4efc:	1009883a 	mov	r4,r2
    4f00:	000bf640 	call	bf64 <__adddf3>
    4f04:	8009883a 	mov	r4,r16
    4f08:	1029883a 	mov	r20,r2
    4f0c:	1823883a 	mov	r17,r3
    4f10:	000e3e40 	call	e3e4 <__floatsidf>
    4f14:	019427f4 	movhi	r6,20639
    4f18:	01cff4f4 	movhi	r7,16339
    4f1c:	319e7ec4 	addi	r6,r6,31227
    4f20:	39d104c4 	addi	r7,r7,17427
    4f24:	1009883a 	mov	r4,r2
    4f28:	180b883a 	mov	r5,r3
    4f2c:	000d3500 	call	d350 <__muldf3>
    4f30:	100d883a 	mov	r6,r2
    4f34:	180f883a 	mov	r7,r3
    4f38:	a009883a 	mov	r4,r20
    4f3c:	880b883a 	mov	r5,r17
    4f40:	000bf640 	call	bf64 <__adddf3>
    4f44:	1009883a 	mov	r4,r2
    4f48:	180b883a 	mov	r5,r3
    4f4c:	1029883a 	mov	r20,r2
    4f50:	1823883a 	mov	r17,r3
    4f54:	000e3640 	call	e364 <__fixdfsi>
    4f58:	000d883a 	mov	r6,zero
    4f5c:	000f883a 	mov	r7,zero
    4f60:	a009883a 	mov	r4,r20
    4f64:	880b883a 	mov	r5,r17
    4f68:	d8800515 	stw	r2,20(sp)
    4f6c:	000d25c0 	call	d25c <__ledf2>
    4f70:	10028716 	blt	r2,zero,5990 <_dtoa_r+0xc88>
    4f74:	d8c00517 	ldw	r3,20(sp)
    4f78:	00800584 	movi	r2,22
    4f7c:	10c27536 	bltu	r2,r3,5954 <_dtoa_r+0xc4c>
    4f80:	180490fa 	slli	r2,r3,3
    4f84:	00c00074 	movhi	r3,1
    4f88:	18c1bf04 	addi	r3,r3,1788
    4f8c:	1885883a 	add	r2,r3,r2
    4f90:	11000017 	ldw	r4,0(r2)
    4f94:	11400117 	ldw	r5,4(r2)
    4f98:	900d883a 	mov	r6,r18
    4f9c:	980f883a 	mov	r7,r19
    4fa0:	000d1800 	call	d180 <__gedf2>
    4fa4:	00828d0e 	bge	zero,r2,59dc <_dtoa_r+0xcd4>
    4fa8:	d9000517 	ldw	r4,20(sp)
    4fac:	d8000e15 	stw	zero,56(sp)
    4fb0:	213fffc4 	addi	r4,r4,-1
    4fb4:	d9000515 	stw	r4,20(sp)
    4fb8:	b42dc83a 	sub	r22,r22,r16
    4fbc:	b5bfffc4 	addi	r22,r22,-1
    4fc0:	b0026f16 	blt	r22,zero,5980 <_dtoa_r+0xc78>
    4fc4:	d8000815 	stw	zero,32(sp)
    4fc8:	d9c00517 	ldw	r7,20(sp)
    4fcc:	38026416 	blt	r7,zero,5960 <_dtoa_r+0xc58>
    4fd0:	b1ed883a 	add	r22,r22,r7
    4fd4:	d9c00d15 	stw	r7,52(sp)
    4fd8:	d8000a15 	stw	zero,40(sp)
    4fdc:	d9800317 	ldw	r6,12(sp)
    4fe0:	00800244 	movi	r2,9
    4fe4:	11811436 	bltu	r2,r6,5438 <_dtoa_r+0x730>
    4fe8:	00800144 	movi	r2,5
    4fec:	1184e10e 	bge	r2,r6,6374 <_dtoa_r+0x166c>
    4ff0:	31bfff04 	addi	r6,r6,-4
    4ff4:	d9800315 	stw	r6,12(sp)
    4ff8:	0023883a 	mov	r17,zero
    4ffc:	d9800317 	ldw	r6,12(sp)
    5000:	008000c4 	movi	r2,3
    5004:	30836726 	beq	r6,r2,5da4 <_dtoa_r+0x109c>
    5008:	1183410e 	bge	r2,r6,5d10 <_dtoa_r+0x1008>
    500c:	d9c00317 	ldw	r7,12(sp)
    5010:	00800104 	movi	r2,4
    5014:	38827c26 	beq	r7,r2,5a08 <_dtoa_r+0xd00>
    5018:	00800144 	movi	r2,5
    501c:	3884c41e 	bne	r7,r2,6330 <_dtoa_r+0x1628>
    5020:	00800044 	movi	r2,1
    5024:	d8800b15 	stw	r2,44(sp)
    5028:	d8c00517 	ldw	r3,20(sp)
    502c:	d9002217 	ldw	r4,136(sp)
    5030:	1907883a 	add	r3,r3,r4
    5034:	19800044 	addi	r6,r3,1
    5038:	d8c00c15 	stw	r3,48(sp)
    503c:	d9800615 	stw	r6,24(sp)
    5040:	0183a40e 	bge	zero,r6,5ed4 <_dtoa_r+0x11cc>
    5044:	d9800617 	ldw	r6,24(sp)
    5048:	3021883a 	mov	r16,r6
    504c:	e0001115 	stw	zero,68(fp)
    5050:	008005c4 	movi	r2,23
    5054:	1184c92e 	bgeu	r2,r6,637c <_dtoa_r+0x1674>
    5058:	00c00044 	movi	r3,1
    505c:	00800104 	movi	r2,4
    5060:	1085883a 	add	r2,r2,r2
    5064:	11000504 	addi	r4,r2,20
    5068:	180b883a 	mov	r5,r3
    506c:	18c00044 	addi	r3,r3,1
    5070:	313ffb2e 	bgeu	r6,r4,5060 <__alt_data_end+0xff005060>
    5074:	e1401115 	stw	r5,68(fp)
    5078:	e009883a 	mov	r4,fp
    507c:	0007b980 	call	7b98 <_Balloc>
    5080:	d8800715 	stw	r2,28(sp)
    5084:	e0801015 	stw	r2,64(fp)
    5088:	00800384 	movi	r2,14
    508c:	1400f736 	bltu	r2,r16,546c <_dtoa_r+0x764>
    5090:	8800f626 	beq	r17,zero,546c <_dtoa_r+0x764>
    5094:	d9c00517 	ldw	r7,20(sp)
    5098:	01c39a0e 	bge	zero,r7,5f04 <_dtoa_r+0x11fc>
    509c:	388003cc 	andi	r2,r7,15
    50a0:	100490fa 	slli	r2,r2,3
    50a4:	382bd13a 	srai	r21,r7,4
    50a8:	00c00074 	movhi	r3,1
    50ac:	18c1bf04 	addi	r3,r3,1788
    50b0:	1885883a 	add	r2,r3,r2
    50b4:	a8c0040c 	andi	r3,r21,16
    50b8:	12400017 	ldw	r9,0(r2)
    50bc:	12000117 	ldw	r8,4(r2)
    50c0:	18037926 	beq	r3,zero,5ea8 <_dtoa_r+0x11a0>
    50c4:	00800074 	movhi	r2,1
    50c8:	1081b504 	addi	r2,r2,1748
    50cc:	11800817 	ldw	r6,32(r2)
    50d0:	11c00917 	ldw	r7,36(r2)
    50d4:	9009883a 	mov	r4,r18
    50d8:	980b883a 	mov	r5,r19
    50dc:	da001715 	stw	r8,92(sp)
    50e0:	da401615 	stw	r9,88(sp)
    50e4:	000c8100 	call	c810 <__divdf3>
    50e8:	da001717 	ldw	r8,92(sp)
    50ec:	da401617 	ldw	r9,88(sp)
    50f0:	ad4003cc 	andi	r21,r21,15
    50f4:	040000c4 	movi	r16,3
    50f8:	1023883a 	mov	r17,r2
    50fc:	1829883a 	mov	r20,r3
    5100:	a8001126 	beq	r21,zero,5148 <_dtoa_r+0x440>
    5104:	05c00074 	movhi	r23,1
    5108:	bdc1b504 	addi	r23,r23,1748
    510c:	4805883a 	mov	r2,r9
    5110:	4007883a 	mov	r3,r8
    5114:	a980004c 	andi	r6,r21,1
    5118:	1009883a 	mov	r4,r2
    511c:	a82bd07a 	srai	r21,r21,1
    5120:	180b883a 	mov	r5,r3
    5124:	30000426 	beq	r6,zero,5138 <_dtoa_r+0x430>
    5128:	b9800017 	ldw	r6,0(r23)
    512c:	b9c00117 	ldw	r7,4(r23)
    5130:	84000044 	addi	r16,r16,1
    5134:	000d3500 	call	d350 <__muldf3>
    5138:	bdc00204 	addi	r23,r23,8
    513c:	a83ff51e 	bne	r21,zero,5114 <__alt_data_end+0xff005114>
    5140:	1013883a 	mov	r9,r2
    5144:	1811883a 	mov	r8,r3
    5148:	480d883a 	mov	r6,r9
    514c:	400f883a 	mov	r7,r8
    5150:	8809883a 	mov	r4,r17
    5154:	a00b883a 	mov	r5,r20
    5158:	000c8100 	call	c810 <__divdf3>
    515c:	d8800f15 	stw	r2,60(sp)
    5160:	d8c01015 	stw	r3,64(sp)
    5164:	d8c00e17 	ldw	r3,56(sp)
    5168:	18000626 	beq	r3,zero,5184 <_dtoa_r+0x47c>
    516c:	d9000f17 	ldw	r4,60(sp)
    5170:	d9401017 	ldw	r5,64(sp)
    5174:	000d883a 	mov	r6,zero
    5178:	01cffc34 	movhi	r7,16368
    517c:	000d25c0 	call	d25c <__ledf2>
    5180:	10040b16 	blt	r2,zero,61b0 <_dtoa_r+0x14a8>
    5184:	8009883a 	mov	r4,r16
    5188:	000e3e40 	call	e3e4 <__floatsidf>
    518c:	d9800f17 	ldw	r6,60(sp)
    5190:	d9c01017 	ldw	r7,64(sp)
    5194:	1009883a 	mov	r4,r2
    5198:	180b883a 	mov	r5,r3
    519c:	000d3500 	call	d350 <__muldf3>
    51a0:	000d883a 	mov	r6,zero
    51a4:	01d00734 	movhi	r7,16412
    51a8:	1009883a 	mov	r4,r2
    51ac:	180b883a 	mov	r5,r3
    51b0:	000bf640 	call	bf64 <__adddf3>
    51b4:	1021883a 	mov	r16,r2
    51b8:	d8800617 	ldw	r2,24(sp)
    51bc:	047f3034 	movhi	r17,64704
    51c0:	1c63883a 	add	r17,r3,r17
    51c4:	10031826 	beq	r2,zero,5e28 <_dtoa_r+0x1120>
    51c8:	d8c00517 	ldw	r3,20(sp)
    51cc:	db000617 	ldw	r12,24(sp)
    51d0:	d8c01315 	stw	r3,76(sp)
    51d4:	d9000b17 	ldw	r4,44(sp)
    51d8:	20038f26 	beq	r4,zero,6018 <_dtoa_r+0x1310>
    51dc:	60bfffc4 	addi	r2,r12,-1
    51e0:	100490fa 	slli	r2,r2,3
    51e4:	00c00074 	movhi	r3,1
    51e8:	18c1bf04 	addi	r3,r3,1788
    51ec:	1885883a 	add	r2,r3,r2
    51f0:	11800017 	ldw	r6,0(r2)
    51f4:	11c00117 	ldw	r7,4(r2)
    51f8:	d8800717 	ldw	r2,28(sp)
    51fc:	0009883a 	mov	r4,zero
    5200:	014ff834 	movhi	r5,16352
    5204:	db001615 	stw	r12,88(sp)
    5208:	15c00044 	addi	r23,r2,1
    520c:	000c8100 	call	c810 <__divdf3>
    5210:	800d883a 	mov	r6,r16
    5214:	880f883a 	mov	r7,r17
    5218:	1009883a 	mov	r4,r2
    521c:	180b883a 	mov	r5,r3
    5220:	000da680 	call	da68 <__subdf3>
    5224:	d9401017 	ldw	r5,64(sp)
    5228:	d9000f17 	ldw	r4,60(sp)
    522c:	102b883a 	mov	r21,r2
    5230:	d8c01215 	stw	r3,72(sp)
    5234:	000e3640 	call	e364 <__fixdfsi>
    5238:	1009883a 	mov	r4,r2
    523c:	1029883a 	mov	r20,r2
    5240:	000e3e40 	call	e3e4 <__floatsidf>
    5244:	d9000f17 	ldw	r4,60(sp)
    5248:	d9401017 	ldw	r5,64(sp)
    524c:	100d883a 	mov	r6,r2
    5250:	180f883a 	mov	r7,r3
    5254:	000da680 	call	da68 <__subdf3>
    5258:	1823883a 	mov	r17,r3
    525c:	d8c00717 	ldw	r3,28(sp)
    5260:	d9401217 	ldw	r5,72(sp)
    5264:	a2000c04 	addi	r8,r20,48
    5268:	1021883a 	mov	r16,r2
    526c:	1a000005 	stb	r8,0(r3)
    5270:	800d883a 	mov	r6,r16
    5274:	880f883a 	mov	r7,r17
    5278:	a809883a 	mov	r4,r21
    527c:	4029883a 	mov	r20,r8
    5280:	000d1800 	call	d180 <__gedf2>
    5284:	00841d16 	blt	zero,r2,62fc <_dtoa_r+0x15f4>
    5288:	800d883a 	mov	r6,r16
    528c:	880f883a 	mov	r7,r17
    5290:	0009883a 	mov	r4,zero
    5294:	014ffc34 	movhi	r5,16368
    5298:	000da680 	call	da68 <__subdf3>
    529c:	d9401217 	ldw	r5,72(sp)
    52a0:	100d883a 	mov	r6,r2
    52a4:	180f883a 	mov	r7,r3
    52a8:	a809883a 	mov	r4,r21
    52ac:	000d1800 	call	d180 <__gedf2>
    52b0:	db001617 	ldw	r12,88(sp)
    52b4:	00840e16 	blt	zero,r2,62f0 <_dtoa_r+0x15e8>
    52b8:	00800044 	movi	r2,1
    52bc:	13006b0e 	bge	r2,r12,546c <_dtoa_r+0x764>
    52c0:	d9000717 	ldw	r4,28(sp)
    52c4:	dd800f15 	stw	r22,60(sp)
    52c8:	dcc01015 	stw	r19,64(sp)
    52cc:	2319883a 	add	r12,r4,r12
    52d0:	dcc01217 	ldw	r19,72(sp)
    52d4:	602d883a 	mov	r22,r12
    52d8:	dc801215 	stw	r18,72(sp)
    52dc:	b825883a 	mov	r18,r23
    52e0:	00000906 	br	5308 <_dtoa_r+0x600>
    52e4:	000da680 	call	da68 <__subdf3>
    52e8:	a80d883a 	mov	r6,r21
    52ec:	980f883a 	mov	r7,r19
    52f0:	1009883a 	mov	r4,r2
    52f4:	180b883a 	mov	r5,r3
    52f8:	000d25c0 	call	d25c <__ledf2>
    52fc:	1003e816 	blt	r2,zero,62a0 <_dtoa_r+0x1598>
    5300:	b825883a 	mov	r18,r23
    5304:	bd83e926 	beq	r23,r22,62ac <_dtoa_r+0x15a4>
    5308:	a809883a 	mov	r4,r21
    530c:	980b883a 	mov	r5,r19
    5310:	000d883a 	mov	r6,zero
    5314:	01d00934 	movhi	r7,16420
    5318:	000d3500 	call	d350 <__muldf3>
    531c:	000d883a 	mov	r6,zero
    5320:	01d00934 	movhi	r7,16420
    5324:	8009883a 	mov	r4,r16
    5328:	880b883a 	mov	r5,r17
    532c:	102b883a 	mov	r21,r2
    5330:	1827883a 	mov	r19,r3
    5334:	000d3500 	call	d350 <__muldf3>
    5338:	180b883a 	mov	r5,r3
    533c:	1009883a 	mov	r4,r2
    5340:	1821883a 	mov	r16,r3
    5344:	1023883a 	mov	r17,r2
    5348:	000e3640 	call	e364 <__fixdfsi>
    534c:	1009883a 	mov	r4,r2
    5350:	1029883a 	mov	r20,r2
    5354:	000e3e40 	call	e3e4 <__floatsidf>
    5358:	8809883a 	mov	r4,r17
    535c:	800b883a 	mov	r5,r16
    5360:	100d883a 	mov	r6,r2
    5364:	180f883a 	mov	r7,r3
    5368:	000da680 	call	da68 <__subdf3>
    536c:	a5000c04 	addi	r20,r20,48
    5370:	a80d883a 	mov	r6,r21
    5374:	980f883a 	mov	r7,r19
    5378:	1009883a 	mov	r4,r2
    537c:	180b883a 	mov	r5,r3
    5380:	95000005 	stb	r20,0(r18)
    5384:	1021883a 	mov	r16,r2
    5388:	1823883a 	mov	r17,r3
    538c:	000d25c0 	call	d25c <__ledf2>
    5390:	bdc00044 	addi	r23,r23,1
    5394:	800d883a 	mov	r6,r16
    5398:	880f883a 	mov	r7,r17
    539c:	0009883a 	mov	r4,zero
    53a0:	014ffc34 	movhi	r5,16368
    53a4:	103fcf0e 	bge	r2,zero,52e4 <__alt_data_end+0xff0052e4>
    53a8:	d8c01317 	ldw	r3,76(sp)
    53ac:	d8c00515 	stw	r3,20(sp)
    53b0:	d9400917 	ldw	r5,36(sp)
    53b4:	e009883a 	mov	r4,fp
    53b8:	0007c400 	call	7c40 <_Bfree>
    53bc:	d9000517 	ldw	r4,20(sp)
    53c0:	d9802317 	ldw	r6,140(sp)
    53c4:	d9c02517 	ldw	r7,148(sp)
    53c8:	b8000005 	stb	zero,0(r23)
    53cc:	20800044 	addi	r2,r4,1
    53d0:	30800015 	stw	r2,0(r6)
    53d4:	3802aa26 	beq	r7,zero,5e80 <_dtoa_r+0x1178>
    53d8:	3dc00015 	stw	r23,0(r7)
    53dc:	d8800717 	ldw	r2,28(sp)
    53e0:	003e7906 	br	4dc8 <__alt_data_end+0xff004dc8>
    53e4:	00800434 	movhi	r2,16
    53e8:	10bfffc4 	addi	r2,r2,-1
    53ec:	88a2703a 	and	r17,r17,r2
    53f0:	883e851e 	bne	r17,zero,4e08 <__alt_data_end+0xff004e08>
    53f4:	00800074 	movhi	r2,1
    53f8:	1081a004 	addi	r2,r2,1664
    53fc:	003e8406 	br	4e10 <__alt_data_end+0xff004e10>
    5400:	10c00204 	addi	r3,r2,8
    5404:	003e8706 	br	4e24 <__alt_data_end+0xff004e24>
    5408:	01400434 	movhi	r5,16
    540c:	297fffc4 	addi	r5,r5,-1
    5410:	994a703a 	and	r5,r19,r5
    5414:	9009883a 	mov	r4,r18
    5418:	843f0044 	addi	r16,r16,-1023
    541c:	294ffc34 	orhi	r5,r5,16368
    5420:	dd800217 	ldw	r22,8(sp)
    5424:	d8001115 	stw	zero,68(sp)
    5428:	003ea506 	br	4ec0 <__alt_data_end+0xff004ec0>
    542c:	00800074 	movhi	r2,1
    5430:	10819704 	addi	r2,r2,1628
    5434:	003e6406 	br	4dc8 <__alt_data_end+0xff004dc8>
    5438:	e0001115 	stw	zero,68(fp)
    543c:	000b883a 	mov	r5,zero
    5440:	e009883a 	mov	r4,fp
    5444:	0007b980 	call	7b98 <_Balloc>
    5448:	01bfffc4 	movi	r6,-1
    544c:	01c00044 	movi	r7,1
    5450:	d8800715 	stw	r2,28(sp)
    5454:	d9800c15 	stw	r6,48(sp)
    5458:	e0801015 	stw	r2,64(fp)
    545c:	d8000315 	stw	zero,12(sp)
    5460:	d9c00b15 	stw	r7,44(sp)
    5464:	d9800615 	stw	r6,24(sp)
    5468:	d8002215 	stw	zero,136(sp)
    546c:	d8800117 	ldw	r2,4(sp)
    5470:	10008916 	blt	r2,zero,5698 <_dtoa_r+0x990>
    5474:	d9000517 	ldw	r4,20(sp)
    5478:	00c00384 	movi	r3,14
    547c:	19008616 	blt	r3,r4,5698 <_dtoa_r+0x990>
    5480:	200490fa 	slli	r2,r4,3
    5484:	00c00074 	movhi	r3,1
    5488:	d9802217 	ldw	r6,136(sp)
    548c:	18c1bf04 	addi	r3,r3,1788
    5490:	1885883a 	add	r2,r3,r2
    5494:	14000017 	ldw	r16,0(r2)
    5498:	14400117 	ldw	r17,4(r2)
    549c:	30016316 	blt	r6,zero,5a2c <_dtoa_r+0xd24>
    54a0:	800d883a 	mov	r6,r16
    54a4:	880f883a 	mov	r7,r17
    54a8:	9009883a 	mov	r4,r18
    54ac:	980b883a 	mov	r5,r19
    54b0:	000c8100 	call	c810 <__divdf3>
    54b4:	180b883a 	mov	r5,r3
    54b8:	1009883a 	mov	r4,r2
    54bc:	000e3640 	call	e364 <__fixdfsi>
    54c0:	1009883a 	mov	r4,r2
    54c4:	102b883a 	mov	r21,r2
    54c8:	000e3e40 	call	e3e4 <__floatsidf>
    54cc:	800d883a 	mov	r6,r16
    54d0:	880f883a 	mov	r7,r17
    54d4:	1009883a 	mov	r4,r2
    54d8:	180b883a 	mov	r5,r3
    54dc:	000d3500 	call	d350 <__muldf3>
    54e0:	100d883a 	mov	r6,r2
    54e4:	180f883a 	mov	r7,r3
    54e8:	9009883a 	mov	r4,r18
    54ec:	980b883a 	mov	r5,r19
    54f0:	000da680 	call	da68 <__subdf3>
    54f4:	d9c00717 	ldw	r7,28(sp)
    54f8:	1009883a 	mov	r4,r2
    54fc:	a8800c04 	addi	r2,r21,48
    5500:	38800005 	stb	r2,0(r7)
    5504:	3dc00044 	addi	r23,r7,1
    5508:	d9c00617 	ldw	r7,24(sp)
    550c:	01800044 	movi	r6,1
    5510:	180b883a 	mov	r5,r3
    5514:	2005883a 	mov	r2,r4
    5518:	39803826 	beq	r7,r6,55fc <_dtoa_r+0x8f4>
    551c:	000d883a 	mov	r6,zero
    5520:	01d00934 	movhi	r7,16420
    5524:	000d3500 	call	d350 <__muldf3>
    5528:	000d883a 	mov	r6,zero
    552c:	000f883a 	mov	r7,zero
    5530:	1009883a 	mov	r4,r2
    5534:	180b883a 	mov	r5,r3
    5538:	1025883a 	mov	r18,r2
    553c:	1827883a 	mov	r19,r3
    5540:	000d0f80 	call	d0f8 <__eqdf2>
    5544:	103f9a26 	beq	r2,zero,53b0 <__alt_data_end+0xff0053b0>
    5548:	d9c00617 	ldw	r7,24(sp)
    554c:	d8c00717 	ldw	r3,28(sp)
    5550:	b829883a 	mov	r20,r23
    5554:	38bfffc4 	addi	r2,r7,-1
    5558:	18ad883a 	add	r22,r3,r2
    555c:	00000a06 	br	5588 <_dtoa_r+0x880>
    5560:	000d3500 	call	d350 <__muldf3>
    5564:	000d883a 	mov	r6,zero
    5568:	000f883a 	mov	r7,zero
    556c:	1009883a 	mov	r4,r2
    5570:	180b883a 	mov	r5,r3
    5574:	1025883a 	mov	r18,r2
    5578:	1827883a 	mov	r19,r3
    557c:	b829883a 	mov	r20,r23
    5580:	000d0f80 	call	d0f8 <__eqdf2>
    5584:	103f8a26 	beq	r2,zero,53b0 <__alt_data_end+0xff0053b0>
    5588:	800d883a 	mov	r6,r16
    558c:	880f883a 	mov	r7,r17
    5590:	9009883a 	mov	r4,r18
    5594:	980b883a 	mov	r5,r19
    5598:	000c8100 	call	c810 <__divdf3>
    559c:	180b883a 	mov	r5,r3
    55a0:	1009883a 	mov	r4,r2
    55a4:	000e3640 	call	e364 <__fixdfsi>
    55a8:	1009883a 	mov	r4,r2
    55ac:	102b883a 	mov	r21,r2
    55b0:	000e3e40 	call	e3e4 <__floatsidf>
    55b4:	800d883a 	mov	r6,r16
    55b8:	880f883a 	mov	r7,r17
    55bc:	1009883a 	mov	r4,r2
    55c0:	180b883a 	mov	r5,r3
    55c4:	000d3500 	call	d350 <__muldf3>
    55c8:	100d883a 	mov	r6,r2
    55cc:	180f883a 	mov	r7,r3
    55d0:	9009883a 	mov	r4,r18
    55d4:	980b883a 	mov	r5,r19
    55d8:	000da680 	call	da68 <__subdf3>
    55dc:	aa000c04 	addi	r8,r21,48
    55e0:	a2000005 	stb	r8,0(r20)
    55e4:	000d883a 	mov	r6,zero
    55e8:	01d00934 	movhi	r7,16420
    55ec:	1009883a 	mov	r4,r2
    55f0:	180b883a 	mov	r5,r3
    55f4:	a5c00044 	addi	r23,r20,1
    55f8:	b53fd91e 	bne	r22,r20,5560 <__alt_data_end+0xff005560>
    55fc:	100d883a 	mov	r6,r2
    5600:	180f883a 	mov	r7,r3
    5604:	1009883a 	mov	r4,r2
    5608:	180b883a 	mov	r5,r3
    560c:	000bf640 	call	bf64 <__adddf3>
    5610:	100d883a 	mov	r6,r2
    5614:	180f883a 	mov	r7,r3
    5618:	8009883a 	mov	r4,r16
    561c:	880b883a 	mov	r5,r17
    5620:	1027883a 	mov	r19,r2
    5624:	1825883a 	mov	r18,r3
    5628:	000d25c0 	call	d25c <__ledf2>
    562c:	10000816 	blt	r2,zero,5650 <_dtoa_r+0x948>
    5630:	980d883a 	mov	r6,r19
    5634:	900f883a 	mov	r7,r18
    5638:	8009883a 	mov	r4,r16
    563c:	880b883a 	mov	r5,r17
    5640:	000d0f80 	call	d0f8 <__eqdf2>
    5644:	103f5a1e 	bne	r2,zero,53b0 <__alt_data_end+0xff0053b0>
    5648:	ad40004c 	andi	r21,r21,1
    564c:	a83f5826 	beq	r21,zero,53b0 <__alt_data_end+0xff0053b0>
    5650:	bd3fffc3 	ldbu	r20,-1(r23)
    5654:	b8bfffc4 	addi	r2,r23,-1
    5658:	1007883a 	mov	r3,r2
    565c:	01400e44 	movi	r5,57
    5660:	d9800717 	ldw	r6,28(sp)
    5664:	00000506 	br	567c <_dtoa_r+0x974>
    5668:	18ffffc4 	addi	r3,r3,-1
    566c:	11824726 	beq	r2,r6,5f8c <_dtoa_r+0x1284>
    5670:	1d000003 	ldbu	r20,0(r3)
    5674:	102f883a 	mov	r23,r2
    5678:	10bfffc4 	addi	r2,r2,-1
    567c:	a1003fcc 	andi	r4,r20,255
    5680:	2100201c 	xori	r4,r4,128
    5684:	213fe004 	addi	r4,r4,-128
    5688:	217ff726 	beq	r4,r5,5668 <__alt_data_end+0xff005668>
    568c:	a2000044 	addi	r8,r20,1
    5690:	12000005 	stb	r8,0(r2)
    5694:	003f4606 	br	53b0 <__alt_data_end+0xff0053b0>
    5698:	d9000b17 	ldw	r4,44(sp)
    569c:	2000c826 	beq	r4,zero,59c0 <_dtoa_r+0xcb8>
    56a0:	d9800317 	ldw	r6,12(sp)
    56a4:	00c00044 	movi	r3,1
    56a8:	1980f90e 	bge	r3,r6,5a90 <_dtoa_r+0xd88>
    56ac:	d8800617 	ldw	r2,24(sp)
    56b0:	d8c00a17 	ldw	r3,40(sp)
    56b4:	157fffc4 	addi	r21,r2,-1
    56b8:	1d41f316 	blt	r3,r21,5e88 <_dtoa_r+0x1180>
    56bc:	1d6bc83a 	sub	r21,r3,r21
    56c0:	d9c00617 	ldw	r7,24(sp)
    56c4:	3802aa16 	blt	r7,zero,6170 <_dtoa_r+0x1468>
    56c8:	dd000817 	ldw	r20,32(sp)
    56cc:	d8800617 	ldw	r2,24(sp)
    56d0:	d8c00817 	ldw	r3,32(sp)
    56d4:	01400044 	movi	r5,1
    56d8:	e009883a 	mov	r4,fp
    56dc:	1887883a 	add	r3,r3,r2
    56e0:	d8c00815 	stw	r3,32(sp)
    56e4:	b0ad883a 	add	r22,r22,r2
    56e8:	0007fa40 	call	7fa4 <__i2b>
    56ec:	1023883a 	mov	r17,r2
    56f0:	a0000826 	beq	r20,zero,5714 <_dtoa_r+0xa0c>
    56f4:	0580070e 	bge	zero,r22,5714 <_dtoa_r+0xa0c>
    56f8:	a005883a 	mov	r2,r20
    56fc:	b500b916 	blt	r22,r20,59e4 <_dtoa_r+0xcdc>
    5700:	d9000817 	ldw	r4,32(sp)
    5704:	a0a9c83a 	sub	r20,r20,r2
    5708:	b0adc83a 	sub	r22,r22,r2
    570c:	2089c83a 	sub	r4,r4,r2
    5710:	d9000815 	stw	r4,32(sp)
    5714:	d9800a17 	ldw	r6,40(sp)
    5718:	0181810e 	bge	zero,r6,5d20 <_dtoa_r+0x1018>
    571c:	d9c00b17 	ldw	r7,44(sp)
    5720:	3800b326 	beq	r7,zero,59f0 <_dtoa_r+0xce8>
    5724:	a800b226 	beq	r21,zero,59f0 <_dtoa_r+0xce8>
    5728:	880b883a 	mov	r5,r17
    572c:	a80d883a 	mov	r6,r21
    5730:	e009883a 	mov	r4,fp
    5734:	00081d80 	call	81d8 <__pow5mult>
    5738:	d9800917 	ldw	r6,36(sp)
    573c:	100b883a 	mov	r5,r2
    5740:	e009883a 	mov	r4,fp
    5744:	1023883a 	mov	r17,r2
    5748:	0007fe00 	call	7fe0 <__multiply>
    574c:	1021883a 	mov	r16,r2
    5750:	d8800a17 	ldw	r2,40(sp)
    5754:	d9400917 	ldw	r5,36(sp)
    5758:	e009883a 	mov	r4,fp
    575c:	1545c83a 	sub	r2,r2,r21
    5760:	d8800a15 	stw	r2,40(sp)
    5764:	0007c400 	call	7c40 <_Bfree>
    5768:	d8c00a17 	ldw	r3,40(sp)
    576c:	18009f1e 	bne	r3,zero,59ec <_dtoa_r+0xce4>
    5770:	05c00044 	movi	r23,1
    5774:	e009883a 	mov	r4,fp
    5778:	b80b883a 	mov	r5,r23
    577c:	0007fa40 	call	7fa4 <__i2b>
    5780:	d9000d17 	ldw	r4,52(sp)
    5784:	102b883a 	mov	r21,r2
    5788:	2000ce26 	beq	r4,zero,5ac4 <_dtoa_r+0xdbc>
    578c:	200d883a 	mov	r6,r4
    5790:	100b883a 	mov	r5,r2
    5794:	e009883a 	mov	r4,fp
    5798:	00081d80 	call	81d8 <__pow5mult>
    579c:	d9800317 	ldw	r6,12(sp)
    57a0:	102b883a 	mov	r21,r2
    57a4:	b981810e 	bge	r23,r6,5dac <_dtoa_r+0x10a4>
    57a8:	0027883a 	mov	r19,zero
    57ac:	a8800417 	ldw	r2,16(r21)
    57b0:	05c00804 	movi	r23,32
    57b4:	10800104 	addi	r2,r2,4
    57b8:	1085883a 	add	r2,r2,r2
    57bc:	1085883a 	add	r2,r2,r2
    57c0:	a885883a 	add	r2,r21,r2
    57c4:	11000017 	ldw	r4,0(r2)
    57c8:	0007e8c0 	call	7e8c <__hi0bits>
    57cc:	b885c83a 	sub	r2,r23,r2
    57d0:	1585883a 	add	r2,r2,r22
    57d4:	108007cc 	andi	r2,r2,31
    57d8:	1000b326 	beq	r2,zero,5aa8 <_dtoa_r+0xda0>
    57dc:	00c00804 	movi	r3,32
    57e0:	1887c83a 	sub	r3,r3,r2
    57e4:	01000104 	movi	r4,4
    57e8:	20c2cd0e 	bge	r4,r3,6320 <_dtoa_r+0x1618>
    57ec:	00c00704 	movi	r3,28
    57f0:	1885c83a 	sub	r2,r3,r2
    57f4:	d8c00817 	ldw	r3,32(sp)
    57f8:	a0a9883a 	add	r20,r20,r2
    57fc:	b0ad883a 	add	r22,r22,r2
    5800:	1887883a 	add	r3,r3,r2
    5804:	d8c00815 	stw	r3,32(sp)
    5808:	d9800817 	ldw	r6,32(sp)
    580c:	0180040e 	bge	zero,r6,5820 <_dtoa_r+0xb18>
    5810:	800b883a 	mov	r5,r16
    5814:	e009883a 	mov	r4,fp
    5818:	00083180 	call	8318 <__lshift>
    581c:	1021883a 	mov	r16,r2
    5820:	0580050e 	bge	zero,r22,5838 <_dtoa_r+0xb30>
    5824:	a80b883a 	mov	r5,r21
    5828:	b00d883a 	mov	r6,r22
    582c:	e009883a 	mov	r4,fp
    5830:	00083180 	call	8318 <__lshift>
    5834:	102b883a 	mov	r21,r2
    5838:	d9c00e17 	ldw	r7,56(sp)
    583c:	3801211e 	bne	r7,zero,5cc4 <_dtoa_r+0xfbc>
    5840:	d9800617 	ldw	r6,24(sp)
    5844:	0181380e 	bge	zero,r6,5d28 <_dtoa_r+0x1020>
    5848:	d8c00b17 	ldw	r3,44(sp)
    584c:	1800ab1e 	bne	r3,zero,5afc <_dtoa_r+0xdf4>
    5850:	dc800717 	ldw	r18,28(sp)
    5854:	dcc00617 	ldw	r19,24(sp)
    5858:	9029883a 	mov	r20,r18
    585c:	00000206 	br	5868 <_dtoa_r+0xb60>
    5860:	0007c680 	call	7c68 <__multadd>
    5864:	1021883a 	mov	r16,r2
    5868:	a80b883a 	mov	r5,r21
    586c:	8009883a 	mov	r4,r16
    5870:	0004b080 	call	4b08 <quorem>
    5874:	10800c04 	addi	r2,r2,48
    5878:	90800005 	stb	r2,0(r18)
    587c:	94800044 	addi	r18,r18,1
    5880:	9507c83a 	sub	r3,r18,r20
    5884:	000f883a 	mov	r7,zero
    5888:	01800284 	movi	r6,10
    588c:	800b883a 	mov	r5,r16
    5890:	e009883a 	mov	r4,fp
    5894:	1cfff216 	blt	r3,r19,5860 <__alt_data_end+0xff005860>
    5898:	1011883a 	mov	r8,r2
    589c:	d8800617 	ldw	r2,24(sp)
    58a0:	0082370e 	bge	zero,r2,6180 <_dtoa_r+0x1478>
    58a4:	d9000717 	ldw	r4,28(sp)
    58a8:	0025883a 	mov	r18,zero
    58ac:	20af883a 	add	r23,r4,r2
    58b0:	01800044 	movi	r6,1
    58b4:	800b883a 	mov	r5,r16
    58b8:	e009883a 	mov	r4,fp
    58bc:	da001715 	stw	r8,92(sp)
    58c0:	00083180 	call	8318 <__lshift>
    58c4:	a80b883a 	mov	r5,r21
    58c8:	1009883a 	mov	r4,r2
    58cc:	d8800915 	stw	r2,36(sp)
    58d0:	00084600 	call	8460 <__mcmp>
    58d4:	da001717 	ldw	r8,92(sp)
    58d8:	0081800e 	bge	zero,r2,5edc <_dtoa_r+0x11d4>
    58dc:	b93fffc3 	ldbu	r4,-1(r23)
    58e0:	b8bfffc4 	addi	r2,r23,-1
    58e4:	1007883a 	mov	r3,r2
    58e8:	01800e44 	movi	r6,57
    58ec:	d9c00717 	ldw	r7,28(sp)
    58f0:	00000506 	br	5908 <_dtoa_r+0xc00>
    58f4:	18ffffc4 	addi	r3,r3,-1
    58f8:	11c12326 	beq	r2,r7,5d88 <_dtoa_r+0x1080>
    58fc:	19000003 	ldbu	r4,0(r3)
    5900:	102f883a 	mov	r23,r2
    5904:	10bfffc4 	addi	r2,r2,-1
    5908:	21403fcc 	andi	r5,r4,255
    590c:	2940201c 	xori	r5,r5,128
    5910:	297fe004 	addi	r5,r5,-128
    5914:	29bff726 	beq	r5,r6,58f4 <__alt_data_end+0xff0058f4>
    5918:	21000044 	addi	r4,r4,1
    591c:	11000005 	stb	r4,0(r2)
    5920:	a80b883a 	mov	r5,r21
    5924:	e009883a 	mov	r4,fp
    5928:	0007c400 	call	7c40 <_Bfree>
    592c:	883ea026 	beq	r17,zero,53b0 <__alt_data_end+0xff0053b0>
    5930:	90000426 	beq	r18,zero,5944 <_dtoa_r+0xc3c>
    5934:	94400326 	beq	r18,r17,5944 <_dtoa_r+0xc3c>
    5938:	900b883a 	mov	r5,r18
    593c:	e009883a 	mov	r4,fp
    5940:	0007c400 	call	7c40 <_Bfree>
    5944:	880b883a 	mov	r5,r17
    5948:	e009883a 	mov	r4,fp
    594c:	0007c400 	call	7c40 <_Bfree>
    5950:	003e9706 	br	53b0 <__alt_data_end+0xff0053b0>
    5954:	01800044 	movi	r6,1
    5958:	d9800e15 	stw	r6,56(sp)
    595c:	003d9606 	br	4fb8 <__alt_data_end+0xff004fb8>
    5960:	d8800817 	ldw	r2,32(sp)
    5964:	d8c00517 	ldw	r3,20(sp)
    5968:	d8000d15 	stw	zero,52(sp)
    596c:	10c5c83a 	sub	r2,r2,r3
    5970:	00c9c83a 	sub	r4,zero,r3
    5974:	d8800815 	stw	r2,32(sp)
    5978:	d9000a15 	stw	r4,40(sp)
    597c:	003d9706 	br	4fdc <__alt_data_end+0xff004fdc>
    5980:	05adc83a 	sub	r22,zero,r22
    5984:	dd800815 	stw	r22,32(sp)
    5988:	002d883a 	mov	r22,zero
    598c:	003d8e06 	br	4fc8 <__alt_data_end+0xff004fc8>
    5990:	d9000517 	ldw	r4,20(sp)
    5994:	000e3e40 	call	e3e4 <__floatsidf>
    5998:	100d883a 	mov	r6,r2
    599c:	180f883a 	mov	r7,r3
    59a0:	a009883a 	mov	r4,r20
    59a4:	880b883a 	mov	r5,r17
    59a8:	000d0f80 	call	d0f8 <__eqdf2>
    59ac:	103d7126 	beq	r2,zero,4f74 <__alt_data_end+0xff004f74>
    59b0:	d9c00517 	ldw	r7,20(sp)
    59b4:	39ffffc4 	addi	r7,r7,-1
    59b8:	d9c00515 	stw	r7,20(sp)
    59bc:	003d6d06 	br	4f74 <__alt_data_end+0xff004f74>
    59c0:	dd400a17 	ldw	r21,40(sp)
    59c4:	dd000817 	ldw	r20,32(sp)
    59c8:	0023883a 	mov	r17,zero
    59cc:	003f4806 	br	56f0 <__alt_data_end+0xff0056f0>
    59d0:	10e3c83a 	sub	r17,r2,r3
    59d4:	9448983a 	sll	r4,r18,r17
    59d8:	003d3206 	br	4ea4 <__alt_data_end+0xff004ea4>
    59dc:	d8000e15 	stw	zero,56(sp)
    59e0:	003d7506 	br	4fb8 <__alt_data_end+0xff004fb8>
    59e4:	b005883a 	mov	r2,r22
    59e8:	003f4506 	br	5700 <__alt_data_end+0xff005700>
    59ec:	dc000915 	stw	r16,36(sp)
    59f0:	d9800a17 	ldw	r6,40(sp)
    59f4:	d9400917 	ldw	r5,36(sp)
    59f8:	e009883a 	mov	r4,fp
    59fc:	00081d80 	call	81d8 <__pow5mult>
    5a00:	1021883a 	mov	r16,r2
    5a04:	003f5a06 	br	5770 <__alt_data_end+0xff005770>
    5a08:	01c00044 	movi	r7,1
    5a0c:	d9c00b15 	stw	r7,44(sp)
    5a10:	d8802217 	ldw	r2,136(sp)
    5a14:	0081280e 	bge	zero,r2,5eb8 <_dtoa_r+0x11b0>
    5a18:	100d883a 	mov	r6,r2
    5a1c:	1021883a 	mov	r16,r2
    5a20:	d8800c15 	stw	r2,48(sp)
    5a24:	d8800615 	stw	r2,24(sp)
    5a28:	003d8806 	br	504c <__alt_data_end+0xff00504c>
    5a2c:	d8800617 	ldw	r2,24(sp)
    5a30:	00be9b16 	blt	zero,r2,54a0 <__alt_data_end+0xff0054a0>
    5a34:	10010f1e 	bne	r2,zero,5e74 <_dtoa_r+0x116c>
    5a38:	880b883a 	mov	r5,r17
    5a3c:	000d883a 	mov	r6,zero
    5a40:	01d00534 	movhi	r7,16404
    5a44:	8009883a 	mov	r4,r16
    5a48:	000d3500 	call	d350 <__muldf3>
    5a4c:	900d883a 	mov	r6,r18
    5a50:	980f883a 	mov	r7,r19
    5a54:	1009883a 	mov	r4,r2
    5a58:	180b883a 	mov	r5,r3
    5a5c:	000d1800 	call	d180 <__gedf2>
    5a60:	002b883a 	mov	r21,zero
    5a64:	0023883a 	mov	r17,zero
    5a68:	1000bf16 	blt	r2,zero,5d68 <_dtoa_r+0x1060>
    5a6c:	d9802217 	ldw	r6,136(sp)
    5a70:	ddc00717 	ldw	r23,28(sp)
    5a74:	018c303a 	nor	r6,zero,r6
    5a78:	d9800515 	stw	r6,20(sp)
    5a7c:	a80b883a 	mov	r5,r21
    5a80:	e009883a 	mov	r4,fp
    5a84:	0007c400 	call	7c40 <_Bfree>
    5a88:	883e4926 	beq	r17,zero,53b0 <__alt_data_end+0xff0053b0>
    5a8c:	003fad06 	br	5944 <__alt_data_end+0xff005944>
    5a90:	d9c01117 	ldw	r7,68(sp)
    5a94:	3801bc26 	beq	r7,zero,6188 <_dtoa_r+0x1480>
    5a98:	10810cc4 	addi	r2,r2,1075
    5a9c:	dd400a17 	ldw	r21,40(sp)
    5aa0:	dd000817 	ldw	r20,32(sp)
    5aa4:	003f0a06 	br	56d0 <__alt_data_end+0xff0056d0>
    5aa8:	00800704 	movi	r2,28
    5aac:	d9000817 	ldw	r4,32(sp)
    5ab0:	a0a9883a 	add	r20,r20,r2
    5ab4:	b0ad883a 	add	r22,r22,r2
    5ab8:	2089883a 	add	r4,r4,r2
    5abc:	d9000815 	stw	r4,32(sp)
    5ac0:	003f5106 	br	5808 <__alt_data_end+0xff005808>
    5ac4:	d8c00317 	ldw	r3,12(sp)
    5ac8:	b8c1fc0e 	bge	r23,r3,62bc <_dtoa_r+0x15b4>
    5acc:	0027883a 	mov	r19,zero
    5ad0:	b805883a 	mov	r2,r23
    5ad4:	003f3e06 	br	57d0 <__alt_data_end+0xff0057d0>
    5ad8:	880b883a 	mov	r5,r17
    5adc:	e009883a 	mov	r4,fp
    5ae0:	000f883a 	mov	r7,zero
    5ae4:	01800284 	movi	r6,10
    5ae8:	0007c680 	call	7c68 <__multadd>
    5aec:	d9000c17 	ldw	r4,48(sp)
    5af0:	1023883a 	mov	r17,r2
    5af4:	0102040e 	bge	zero,r4,6308 <_dtoa_r+0x1600>
    5af8:	d9000615 	stw	r4,24(sp)
    5afc:	0500050e 	bge	zero,r20,5b14 <_dtoa_r+0xe0c>
    5b00:	880b883a 	mov	r5,r17
    5b04:	a00d883a 	mov	r6,r20
    5b08:	e009883a 	mov	r4,fp
    5b0c:	00083180 	call	8318 <__lshift>
    5b10:	1023883a 	mov	r17,r2
    5b14:	9801241e 	bne	r19,zero,5fa8 <_dtoa_r+0x12a0>
    5b18:	8829883a 	mov	r20,r17
    5b1c:	d9000617 	ldw	r4,24(sp)
    5b20:	dcc00717 	ldw	r19,28(sp)
    5b24:	9480004c 	andi	r18,r18,1
    5b28:	20bfffc4 	addi	r2,r4,-1
    5b2c:	9885883a 	add	r2,r19,r2
    5b30:	d8800415 	stw	r2,16(sp)
    5b34:	dc800615 	stw	r18,24(sp)
    5b38:	a80b883a 	mov	r5,r21
    5b3c:	8009883a 	mov	r4,r16
    5b40:	0004b080 	call	4b08 <quorem>
    5b44:	880b883a 	mov	r5,r17
    5b48:	8009883a 	mov	r4,r16
    5b4c:	102f883a 	mov	r23,r2
    5b50:	00084600 	call	8460 <__mcmp>
    5b54:	a80b883a 	mov	r5,r21
    5b58:	a00d883a 	mov	r6,r20
    5b5c:	e009883a 	mov	r4,fp
    5b60:	102d883a 	mov	r22,r2
    5b64:	00084c00 	call	84c0 <__mdiff>
    5b68:	1007883a 	mov	r3,r2
    5b6c:	10800317 	ldw	r2,12(r2)
    5b70:	bc800c04 	addi	r18,r23,48
    5b74:	180b883a 	mov	r5,r3
    5b78:	10004e1e 	bne	r2,zero,5cb4 <_dtoa_r+0xfac>
    5b7c:	8009883a 	mov	r4,r16
    5b80:	d8c01615 	stw	r3,88(sp)
    5b84:	00084600 	call	8460 <__mcmp>
    5b88:	d8c01617 	ldw	r3,88(sp)
    5b8c:	e009883a 	mov	r4,fp
    5b90:	d8801615 	stw	r2,88(sp)
    5b94:	180b883a 	mov	r5,r3
    5b98:	0007c400 	call	7c40 <_Bfree>
    5b9c:	d8801617 	ldw	r2,88(sp)
    5ba0:	1000041e 	bne	r2,zero,5bb4 <_dtoa_r+0xeac>
    5ba4:	d9800317 	ldw	r6,12(sp)
    5ba8:	3000021e 	bne	r6,zero,5bb4 <_dtoa_r+0xeac>
    5bac:	d8c00617 	ldw	r3,24(sp)
    5bb0:	18003726 	beq	r3,zero,5c90 <_dtoa_r+0xf88>
    5bb4:	b0002016 	blt	r22,zero,5c38 <_dtoa_r+0xf30>
    5bb8:	b000041e 	bne	r22,zero,5bcc <_dtoa_r+0xec4>
    5bbc:	d9000317 	ldw	r4,12(sp)
    5bc0:	2000021e 	bne	r4,zero,5bcc <_dtoa_r+0xec4>
    5bc4:	d8c00617 	ldw	r3,24(sp)
    5bc8:	18001b26 	beq	r3,zero,5c38 <_dtoa_r+0xf30>
    5bcc:	00810716 	blt	zero,r2,5fec <_dtoa_r+0x12e4>
    5bd0:	d8c00417 	ldw	r3,16(sp)
    5bd4:	9d800044 	addi	r22,r19,1
    5bd8:	9c800005 	stb	r18,0(r19)
    5bdc:	b02f883a 	mov	r23,r22
    5be0:	98c10626 	beq	r19,r3,5ffc <_dtoa_r+0x12f4>
    5be4:	800b883a 	mov	r5,r16
    5be8:	000f883a 	mov	r7,zero
    5bec:	01800284 	movi	r6,10
    5bf0:	e009883a 	mov	r4,fp
    5bf4:	0007c680 	call	7c68 <__multadd>
    5bf8:	1021883a 	mov	r16,r2
    5bfc:	000f883a 	mov	r7,zero
    5c00:	01800284 	movi	r6,10
    5c04:	880b883a 	mov	r5,r17
    5c08:	e009883a 	mov	r4,fp
    5c0c:	8d002526 	beq	r17,r20,5ca4 <_dtoa_r+0xf9c>
    5c10:	0007c680 	call	7c68 <__multadd>
    5c14:	a00b883a 	mov	r5,r20
    5c18:	000f883a 	mov	r7,zero
    5c1c:	01800284 	movi	r6,10
    5c20:	e009883a 	mov	r4,fp
    5c24:	1023883a 	mov	r17,r2
    5c28:	0007c680 	call	7c68 <__multadd>
    5c2c:	1029883a 	mov	r20,r2
    5c30:	b027883a 	mov	r19,r22
    5c34:	003fc006 	br	5b38 <__alt_data_end+0xff005b38>
    5c38:	9011883a 	mov	r8,r18
    5c3c:	00800e0e 	bge	zero,r2,5c78 <_dtoa_r+0xf70>
    5c40:	800b883a 	mov	r5,r16
    5c44:	01800044 	movi	r6,1
    5c48:	e009883a 	mov	r4,fp
    5c4c:	da001715 	stw	r8,92(sp)
    5c50:	00083180 	call	8318 <__lshift>
    5c54:	a80b883a 	mov	r5,r21
    5c58:	1009883a 	mov	r4,r2
    5c5c:	1021883a 	mov	r16,r2
    5c60:	00084600 	call	8460 <__mcmp>
    5c64:	da001717 	ldw	r8,92(sp)
    5c68:	0081960e 	bge	zero,r2,62c4 <_dtoa_r+0x15bc>
    5c6c:	00800e44 	movi	r2,57
    5c70:	40817026 	beq	r8,r2,6234 <_dtoa_r+0x152c>
    5c74:	ba000c44 	addi	r8,r23,49
    5c78:	8825883a 	mov	r18,r17
    5c7c:	9dc00044 	addi	r23,r19,1
    5c80:	9a000005 	stb	r8,0(r19)
    5c84:	a023883a 	mov	r17,r20
    5c88:	dc000915 	stw	r16,36(sp)
    5c8c:	003f2406 	br	5920 <__alt_data_end+0xff005920>
    5c90:	00800e44 	movi	r2,57
    5c94:	9011883a 	mov	r8,r18
    5c98:	90816626 	beq	r18,r2,6234 <_dtoa_r+0x152c>
    5c9c:	05bff516 	blt	zero,r22,5c74 <__alt_data_end+0xff005c74>
    5ca0:	003ff506 	br	5c78 <__alt_data_end+0xff005c78>
    5ca4:	0007c680 	call	7c68 <__multadd>
    5ca8:	1023883a 	mov	r17,r2
    5cac:	1029883a 	mov	r20,r2
    5cb0:	003fdf06 	br	5c30 <__alt_data_end+0xff005c30>
    5cb4:	e009883a 	mov	r4,fp
    5cb8:	0007c400 	call	7c40 <_Bfree>
    5cbc:	00800044 	movi	r2,1
    5cc0:	003fbc06 	br	5bb4 <__alt_data_end+0xff005bb4>
    5cc4:	a80b883a 	mov	r5,r21
    5cc8:	8009883a 	mov	r4,r16
    5ccc:	00084600 	call	8460 <__mcmp>
    5cd0:	103edb0e 	bge	r2,zero,5840 <__alt_data_end+0xff005840>
    5cd4:	800b883a 	mov	r5,r16
    5cd8:	000f883a 	mov	r7,zero
    5cdc:	01800284 	movi	r6,10
    5ce0:	e009883a 	mov	r4,fp
    5ce4:	0007c680 	call	7c68 <__multadd>
    5ce8:	1021883a 	mov	r16,r2
    5cec:	d8800517 	ldw	r2,20(sp)
    5cf0:	d8c00b17 	ldw	r3,44(sp)
    5cf4:	10bfffc4 	addi	r2,r2,-1
    5cf8:	d8800515 	stw	r2,20(sp)
    5cfc:	183f761e 	bne	r3,zero,5ad8 <__alt_data_end+0xff005ad8>
    5d00:	d9000c17 	ldw	r4,48(sp)
    5d04:	0101730e 	bge	zero,r4,62d4 <_dtoa_r+0x15cc>
    5d08:	d9000615 	stw	r4,24(sp)
    5d0c:	003ed006 	br	5850 <__alt_data_end+0xff005850>
    5d10:	00800084 	movi	r2,2
    5d14:	3081861e 	bne	r6,r2,6330 <_dtoa_r+0x1628>
    5d18:	d8000b15 	stw	zero,44(sp)
    5d1c:	003f3c06 	br	5a10 <__alt_data_end+0xff005a10>
    5d20:	dc000917 	ldw	r16,36(sp)
    5d24:	003e9206 	br	5770 <__alt_data_end+0xff005770>
    5d28:	d9c00317 	ldw	r7,12(sp)
    5d2c:	00800084 	movi	r2,2
    5d30:	11fec50e 	bge	r2,r7,5848 <__alt_data_end+0xff005848>
    5d34:	d9000617 	ldw	r4,24(sp)
    5d38:	20013c1e 	bne	r4,zero,622c <_dtoa_r+0x1524>
    5d3c:	a80b883a 	mov	r5,r21
    5d40:	000f883a 	mov	r7,zero
    5d44:	01800144 	movi	r6,5
    5d48:	e009883a 	mov	r4,fp
    5d4c:	0007c680 	call	7c68 <__multadd>
    5d50:	100b883a 	mov	r5,r2
    5d54:	8009883a 	mov	r4,r16
    5d58:	102b883a 	mov	r21,r2
    5d5c:	00084600 	call	8460 <__mcmp>
    5d60:	dc000915 	stw	r16,36(sp)
    5d64:	00bf410e 	bge	zero,r2,5a6c <__alt_data_end+0xff005a6c>
    5d68:	d9c00717 	ldw	r7,28(sp)
    5d6c:	00800c44 	movi	r2,49
    5d70:	38800005 	stb	r2,0(r7)
    5d74:	d8800517 	ldw	r2,20(sp)
    5d78:	3dc00044 	addi	r23,r7,1
    5d7c:	10800044 	addi	r2,r2,1
    5d80:	d8800515 	stw	r2,20(sp)
    5d84:	003f3d06 	br	5a7c <__alt_data_end+0xff005a7c>
    5d88:	d9800517 	ldw	r6,20(sp)
    5d8c:	d9c00717 	ldw	r7,28(sp)
    5d90:	00800c44 	movi	r2,49
    5d94:	31800044 	addi	r6,r6,1
    5d98:	d9800515 	stw	r6,20(sp)
    5d9c:	38800005 	stb	r2,0(r7)
    5da0:	003edf06 	br	5920 <__alt_data_end+0xff005920>
    5da4:	d8000b15 	stw	zero,44(sp)
    5da8:	003c9f06 	br	5028 <__alt_data_end+0xff005028>
    5dac:	903e7e1e 	bne	r18,zero,57a8 <__alt_data_end+0xff0057a8>
    5db0:	00800434 	movhi	r2,16
    5db4:	10bfffc4 	addi	r2,r2,-1
    5db8:	9884703a 	and	r2,r19,r2
    5dbc:	1000ea1e 	bne	r2,zero,6168 <_dtoa_r+0x1460>
    5dc0:	9cdffc2c 	andhi	r19,r19,32752
    5dc4:	9800e826 	beq	r19,zero,6168 <_dtoa_r+0x1460>
    5dc8:	d9c00817 	ldw	r7,32(sp)
    5dcc:	b5800044 	addi	r22,r22,1
    5dd0:	04c00044 	movi	r19,1
    5dd4:	39c00044 	addi	r7,r7,1
    5dd8:	d9c00815 	stw	r7,32(sp)
    5ddc:	d8800d17 	ldw	r2,52(sp)
    5de0:	103e721e 	bne	r2,zero,57ac <__alt_data_end+0xff0057ac>
    5de4:	00800044 	movi	r2,1
    5de8:	003e7906 	br	57d0 <__alt_data_end+0xff0057d0>
    5dec:	8009883a 	mov	r4,r16
    5df0:	000e3e40 	call	e3e4 <__floatsidf>
    5df4:	d9800f17 	ldw	r6,60(sp)
    5df8:	d9c01017 	ldw	r7,64(sp)
    5dfc:	1009883a 	mov	r4,r2
    5e00:	180b883a 	mov	r5,r3
    5e04:	000d3500 	call	d350 <__muldf3>
    5e08:	000d883a 	mov	r6,zero
    5e0c:	01d00734 	movhi	r7,16412
    5e10:	1009883a 	mov	r4,r2
    5e14:	180b883a 	mov	r5,r3
    5e18:	000bf640 	call	bf64 <__adddf3>
    5e1c:	047f3034 	movhi	r17,64704
    5e20:	1021883a 	mov	r16,r2
    5e24:	1c63883a 	add	r17,r3,r17
    5e28:	d9000f17 	ldw	r4,60(sp)
    5e2c:	d9401017 	ldw	r5,64(sp)
    5e30:	000d883a 	mov	r6,zero
    5e34:	01d00534 	movhi	r7,16404
    5e38:	000da680 	call	da68 <__subdf3>
    5e3c:	800d883a 	mov	r6,r16
    5e40:	880f883a 	mov	r7,r17
    5e44:	1009883a 	mov	r4,r2
    5e48:	180b883a 	mov	r5,r3
    5e4c:	102b883a 	mov	r21,r2
    5e50:	1829883a 	mov	r20,r3
    5e54:	000d1800 	call	d180 <__gedf2>
    5e58:	00806c16 	blt	zero,r2,600c <_dtoa_r+0x1304>
    5e5c:	89e0003c 	xorhi	r7,r17,32768
    5e60:	800d883a 	mov	r6,r16
    5e64:	a809883a 	mov	r4,r21
    5e68:	a00b883a 	mov	r5,r20
    5e6c:	000d25c0 	call	d25c <__ledf2>
    5e70:	103d7e0e 	bge	r2,zero,546c <__alt_data_end+0xff00546c>
    5e74:	002b883a 	mov	r21,zero
    5e78:	0023883a 	mov	r17,zero
    5e7c:	003efb06 	br	5a6c <__alt_data_end+0xff005a6c>
    5e80:	d8800717 	ldw	r2,28(sp)
    5e84:	003bd006 	br	4dc8 <__alt_data_end+0xff004dc8>
    5e88:	d9000a17 	ldw	r4,40(sp)
    5e8c:	d9800d17 	ldw	r6,52(sp)
    5e90:	dd400a15 	stw	r21,40(sp)
    5e94:	a905c83a 	sub	r2,r21,r4
    5e98:	308d883a 	add	r6,r6,r2
    5e9c:	d9800d15 	stw	r6,52(sp)
    5ea0:	002b883a 	mov	r21,zero
    5ea4:	003e0606 	br	56c0 <__alt_data_end+0xff0056c0>
    5ea8:	9023883a 	mov	r17,r18
    5eac:	9829883a 	mov	r20,r19
    5eb0:	04000084 	movi	r16,2
    5eb4:	003c9206 	br	5100 <__alt_data_end+0xff005100>
    5eb8:	04000044 	movi	r16,1
    5ebc:	dc000c15 	stw	r16,48(sp)
    5ec0:	dc000615 	stw	r16,24(sp)
    5ec4:	dc002215 	stw	r16,136(sp)
    5ec8:	e0001115 	stw	zero,68(fp)
    5ecc:	000b883a 	mov	r5,zero
    5ed0:	003c6906 	br	5078 <__alt_data_end+0xff005078>
    5ed4:	3021883a 	mov	r16,r6
    5ed8:	003ffb06 	br	5ec8 <__alt_data_end+0xff005ec8>
    5edc:	1000021e 	bne	r2,zero,5ee8 <_dtoa_r+0x11e0>
    5ee0:	4200004c 	andi	r8,r8,1
    5ee4:	403e7d1e 	bne	r8,zero,58dc <__alt_data_end+0xff0058dc>
    5ee8:	01000c04 	movi	r4,48
    5eec:	00000106 	br	5ef4 <_dtoa_r+0x11ec>
    5ef0:	102f883a 	mov	r23,r2
    5ef4:	b8bfffc4 	addi	r2,r23,-1
    5ef8:	10c00007 	ldb	r3,0(r2)
    5efc:	193ffc26 	beq	r3,r4,5ef0 <__alt_data_end+0xff005ef0>
    5f00:	003e8706 	br	5920 <__alt_data_end+0xff005920>
    5f04:	d8800517 	ldw	r2,20(sp)
    5f08:	00a3c83a 	sub	r17,zero,r2
    5f0c:	8800a426 	beq	r17,zero,61a0 <_dtoa_r+0x1498>
    5f10:	888003cc 	andi	r2,r17,15
    5f14:	100490fa 	slli	r2,r2,3
    5f18:	00c00074 	movhi	r3,1
    5f1c:	18c1bf04 	addi	r3,r3,1788
    5f20:	1885883a 	add	r2,r3,r2
    5f24:	11800017 	ldw	r6,0(r2)
    5f28:	11c00117 	ldw	r7,4(r2)
    5f2c:	9009883a 	mov	r4,r18
    5f30:	980b883a 	mov	r5,r19
    5f34:	8823d13a 	srai	r17,r17,4
    5f38:	000d3500 	call	d350 <__muldf3>
    5f3c:	d8800f15 	stw	r2,60(sp)
    5f40:	d8c01015 	stw	r3,64(sp)
    5f44:	8800e826 	beq	r17,zero,62e8 <_dtoa_r+0x15e0>
    5f48:	05000074 	movhi	r20,1
    5f4c:	a501b504 	addi	r20,r20,1748
    5f50:	04000084 	movi	r16,2
    5f54:	8980004c 	andi	r6,r17,1
    5f58:	1009883a 	mov	r4,r2
    5f5c:	8823d07a 	srai	r17,r17,1
    5f60:	180b883a 	mov	r5,r3
    5f64:	30000426 	beq	r6,zero,5f78 <_dtoa_r+0x1270>
    5f68:	a1800017 	ldw	r6,0(r20)
    5f6c:	a1c00117 	ldw	r7,4(r20)
    5f70:	84000044 	addi	r16,r16,1
    5f74:	000d3500 	call	d350 <__muldf3>
    5f78:	a5000204 	addi	r20,r20,8
    5f7c:	883ff51e 	bne	r17,zero,5f54 <__alt_data_end+0xff005f54>
    5f80:	d8800f15 	stw	r2,60(sp)
    5f84:	d8c01015 	stw	r3,64(sp)
    5f88:	003c7606 	br	5164 <__alt_data_end+0xff005164>
    5f8c:	00c00c04 	movi	r3,48
    5f90:	10c00005 	stb	r3,0(r2)
    5f94:	d8c00517 	ldw	r3,20(sp)
    5f98:	bd3fffc3 	ldbu	r20,-1(r23)
    5f9c:	18c00044 	addi	r3,r3,1
    5fa0:	d8c00515 	stw	r3,20(sp)
    5fa4:	003db906 	br	568c <__alt_data_end+0xff00568c>
    5fa8:	89400117 	ldw	r5,4(r17)
    5fac:	e009883a 	mov	r4,fp
    5fb0:	0007b980 	call	7b98 <_Balloc>
    5fb4:	89800417 	ldw	r6,16(r17)
    5fb8:	89400304 	addi	r5,r17,12
    5fbc:	11000304 	addi	r4,r2,12
    5fc0:	31800084 	addi	r6,r6,2
    5fc4:	318d883a 	add	r6,r6,r6
    5fc8:	318d883a 	add	r6,r6,r6
    5fcc:	1027883a 	mov	r19,r2
    5fd0:	00077cc0 	call	77cc <memcpy>
    5fd4:	01800044 	movi	r6,1
    5fd8:	980b883a 	mov	r5,r19
    5fdc:	e009883a 	mov	r4,fp
    5fe0:	00083180 	call	8318 <__lshift>
    5fe4:	1029883a 	mov	r20,r2
    5fe8:	003ecc06 	br	5b1c <__alt_data_end+0xff005b1c>
    5fec:	00800e44 	movi	r2,57
    5ff0:	90809026 	beq	r18,r2,6234 <_dtoa_r+0x152c>
    5ff4:	92000044 	addi	r8,r18,1
    5ff8:	003f1f06 	br	5c78 <__alt_data_end+0xff005c78>
    5ffc:	9011883a 	mov	r8,r18
    6000:	8825883a 	mov	r18,r17
    6004:	a023883a 	mov	r17,r20
    6008:	003e2906 	br	58b0 <__alt_data_end+0xff0058b0>
    600c:	002b883a 	mov	r21,zero
    6010:	0023883a 	mov	r17,zero
    6014:	003f5406 	br	5d68 <__alt_data_end+0xff005d68>
    6018:	61bfffc4 	addi	r6,r12,-1
    601c:	300490fa 	slli	r2,r6,3
    6020:	00c00074 	movhi	r3,1
    6024:	18c1bf04 	addi	r3,r3,1788
    6028:	1885883a 	add	r2,r3,r2
    602c:	11000017 	ldw	r4,0(r2)
    6030:	11400117 	ldw	r5,4(r2)
    6034:	d8800717 	ldw	r2,28(sp)
    6038:	880f883a 	mov	r7,r17
    603c:	d9801215 	stw	r6,72(sp)
    6040:	800d883a 	mov	r6,r16
    6044:	db001615 	stw	r12,88(sp)
    6048:	15c00044 	addi	r23,r2,1
    604c:	000d3500 	call	d350 <__muldf3>
    6050:	d9401017 	ldw	r5,64(sp)
    6054:	d9000f17 	ldw	r4,60(sp)
    6058:	d8c01515 	stw	r3,84(sp)
    605c:	d8801415 	stw	r2,80(sp)
    6060:	000e3640 	call	e364 <__fixdfsi>
    6064:	1009883a 	mov	r4,r2
    6068:	1021883a 	mov	r16,r2
    606c:	000e3e40 	call	e3e4 <__floatsidf>
    6070:	d9000f17 	ldw	r4,60(sp)
    6074:	d9401017 	ldw	r5,64(sp)
    6078:	100d883a 	mov	r6,r2
    607c:	180f883a 	mov	r7,r3
    6080:	000da680 	call	da68 <__subdf3>
    6084:	1829883a 	mov	r20,r3
    6088:	d8c00717 	ldw	r3,28(sp)
    608c:	84000c04 	addi	r16,r16,48
    6090:	1023883a 	mov	r17,r2
    6094:	1c000005 	stb	r16,0(r3)
    6098:	db001617 	ldw	r12,88(sp)
    609c:	00800044 	movi	r2,1
    60a0:	60802226 	beq	r12,r2,612c <_dtoa_r+0x1424>
    60a4:	d9c00717 	ldw	r7,28(sp)
    60a8:	8805883a 	mov	r2,r17
    60ac:	b82b883a 	mov	r21,r23
    60b0:	3b19883a 	add	r12,r7,r12
    60b4:	6023883a 	mov	r17,r12
    60b8:	a007883a 	mov	r3,r20
    60bc:	dc800f15 	stw	r18,60(sp)
    60c0:	000d883a 	mov	r6,zero
    60c4:	01d00934 	movhi	r7,16420
    60c8:	1009883a 	mov	r4,r2
    60cc:	180b883a 	mov	r5,r3
    60d0:	000d3500 	call	d350 <__muldf3>
    60d4:	180b883a 	mov	r5,r3
    60d8:	1009883a 	mov	r4,r2
    60dc:	1829883a 	mov	r20,r3
    60e0:	1025883a 	mov	r18,r2
    60e4:	000e3640 	call	e364 <__fixdfsi>
    60e8:	1009883a 	mov	r4,r2
    60ec:	1021883a 	mov	r16,r2
    60f0:	000e3e40 	call	e3e4 <__floatsidf>
    60f4:	100d883a 	mov	r6,r2
    60f8:	180f883a 	mov	r7,r3
    60fc:	9009883a 	mov	r4,r18
    6100:	a00b883a 	mov	r5,r20
    6104:	84000c04 	addi	r16,r16,48
    6108:	000da680 	call	da68 <__subdf3>
    610c:	ad400044 	addi	r21,r21,1
    6110:	ac3fffc5 	stb	r16,-1(r21)
    6114:	ac7fea1e 	bne	r21,r17,60c0 <__alt_data_end+0xff0060c0>
    6118:	1023883a 	mov	r17,r2
    611c:	d8801217 	ldw	r2,72(sp)
    6120:	dc800f17 	ldw	r18,60(sp)
    6124:	1829883a 	mov	r20,r3
    6128:	b8af883a 	add	r23,r23,r2
    612c:	d9001417 	ldw	r4,80(sp)
    6130:	d9401517 	ldw	r5,84(sp)
    6134:	000d883a 	mov	r6,zero
    6138:	01cff834 	movhi	r7,16352
    613c:	000bf640 	call	bf64 <__adddf3>
    6140:	880d883a 	mov	r6,r17
    6144:	a00f883a 	mov	r7,r20
    6148:	1009883a 	mov	r4,r2
    614c:	180b883a 	mov	r5,r3
    6150:	000d25c0 	call	d25c <__ledf2>
    6154:	10003e0e 	bge	r2,zero,6250 <_dtoa_r+0x1548>
    6158:	d9001317 	ldw	r4,76(sp)
    615c:	bd3fffc3 	ldbu	r20,-1(r23)
    6160:	d9000515 	stw	r4,20(sp)
    6164:	003d3b06 	br	5654 <__alt_data_end+0xff005654>
    6168:	0027883a 	mov	r19,zero
    616c:	003f1b06 	br	5ddc <__alt_data_end+0xff005ddc>
    6170:	d8800817 	ldw	r2,32(sp)
    6174:	11e9c83a 	sub	r20,r2,r7
    6178:	0005883a 	mov	r2,zero
    617c:	003d5406 	br	56d0 <__alt_data_end+0xff0056d0>
    6180:	00800044 	movi	r2,1
    6184:	003dc706 	br	58a4 <__alt_data_end+0xff0058a4>
    6188:	d8c00217 	ldw	r3,8(sp)
    618c:	00800d84 	movi	r2,54
    6190:	dd400a17 	ldw	r21,40(sp)
    6194:	10c5c83a 	sub	r2,r2,r3
    6198:	dd000817 	ldw	r20,32(sp)
    619c:	003d4c06 	br	56d0 <__alt_data_end+0xff0056d0>
    61a0:	dc800f15 	stw	r18,60(sp)
    61a4:	dcc01015 	stw	r19,64(sp)
    61a8:	04000084 	movi	r16,2
    61ac:	003bed06 	br	5164 <__alt_data_end+0xff005164>
    61b0:	d9000617 	ldw	r4,24(sp)
    61b4:	203f0d26 	beq	r4,zero,5dec <__alt_data_end+0xff005dec>
    61b8:	d9800c17 	ldw	r6,48(sp)
    61bc:	01bcab0e 	bge	zero,r6,546c <__alt_data_end+0xff00546c>
    61c0:	d9401017 	ldw	r5,64(sp)
    61c4:	d9000f17 	ldw	r4,60(sp)
    61c8:	000d883a 	mov	r6,zero
    61cc:	01d00934 	movhi	r7,16420
    61d0:	000d3500 	call	d350 <__muldf3>
    61d4:	81000044 	addi	r4,r16,1
    61d8:	d8800f15 	stw	r2,60(sp)
    61dc:	d8c01015 	stw	r3,64(sp)
    61e0:	000e3e40 	call	e3e4 <__floatsidf>
    61e4:	d9800f17 	ldw	r6,60(sp)
    61e8:	d9c01017 	ldw	r7,64(sp)
    61ec:	1009883a 	mov	r4,r2
    61f0:	180b883a 	mov	r5,r3
    61f4:	000d3500 	call	d350 <__muldf3>
    61f8:	01d00734 	movhi	r7,16412
    61fc:	000d883a 	mov	r6,zero
    6200:	1009883a 	mov	r4,r2
    6204:	180b883a 	mov	r5,r3
    6208:	000bf640 	call	bf64 <__adddf3>
    620c:	d9c00517 	ldw	r7,20(sp)
    6210:	047f3034 	movhi	r17,64704
    6214:	1021883a 	mov	r16,r2
    6218:	39ffffc4 	addi	r7,r7,-1
    621c:	d9c01315 	stw	r7,76(sp)
    6220:	1c63883a 	add	r17,r3,r17
    6224:	db000c17 	ldw	r12,48(sp)
    6228:	003bea06 	br	51d4 <__alt_data_end+0xff0051d4>
    622c:	dc000915 	stw	r16,36(sp)
    6230:	003e0e06 	br	5a6c <__alt_data_end+0xff005a6c>
    6234:	01000e44 	movi	r4,57
    6238:	8825883a 	mov	r18,r17
    623c:	9dc00044 	addi	r23,r19,1
    6240:	99000005 	stb	r4,0(r19)
    6244:	a023883a 	mov	r17,r20
    6248:	dc000915 	stw	r16,36(sp)
    624c:	003da406 	br	58e0 <__alt_data_end+0xff0058e0>
    6250:	d9801417 	ldw	r6,80(sp)
    6254:	d9c01517 	ldw	r7,84(sp)
    6258:	0009883a 	mov	r4,zero
    625c:	014ff834 	movhi	r5,16352
    6260:	000da680 	call	da68 <__subdf3>
    6264:	880d883a 	mov	r6,r17
    6268:	a00f883a 	mov	r7,r20
    626c:	1009883a 	mov	r4,r2
    6270:	180b883a 	mov	r5,r3
    6274:	000d1800 	call	d180 <__gedf2>
    6278:	00bc7c0e 	bge	zero,r2,546c <__alt_data_end+0xff00546c>
    627c:	01000c04 	movi	r4,48
    6280:	00000106 	br	6288 <_dtoa_r+0x1580>
    6284:	102f883a 	mov	r23,r2
    6288:	b8bfffc4 	addi	r2,r23,-1
    628c:	10c00007 	ldb	r3,0(r2)
    6290:	193ffc26 	beq	r3,r4,6284 <__alt_data_end+0xff006284>
    6294:	d9801317 	ldw	r6,76(sp)
    6298:	d9800515 	stw	r6,20(sp)
    629c:	003c4406 	br	53b0 <__alt_data_end+0xff0053b0>
    62a0:	d9801317 	ldw	r6,76(sp)
    62a4:	d9800515 	stw	r6,20(sp)
    62a8:	003cea06 	br	5654 <__alt_data_end+0xff005654>
    62ac:	dd800f17 	ldw	r22,60(sp)
    62b0:	dcc01017 	ldw	r19,64(sp)
    62b4:	dc801217 	ldw	r18,72(sp)
    62b8:	003c6c06 	br	546c <__alt_data_end+0xff00546c>
    62bc:	903e031e 	bne	r18,zero,5acc <__alt_data_end+0xff005acc>
    62c0:	003ebb06 	br	5db0 <__alt_data_end+0xff005db0>
    62c4:	103e6c1e 	bne	r2,zero,5c78 <__alt_data_end+0xff005c78>
    62c8:	4080004c 	andi	r2,r8,1
    62cc:	103e6a26 	beq	r2,zero,5c78 <__alt_data_end+0xff005c78>
    62d0:	003e6606 	br	5c6c <__alt_data_end+0xff005c6c>
    62d4:	d8c00317 	ldw	r3,12(sp)
    62d8:	00800084 	movi	r2,2
    62dc:	10c02916 	blt	r2,r3,6384 <_dtoa_r+0x167c>
    62e0:	d9000c17 	ldw	r4,48(sp)
    62e4:	003e8806 	br	5d08 <__alt_data_end+0xff005d08>
    62e8:	04000084 	movi	r16,2
    62ec:	003b9d06 	br	5164 <__alt_data_end+0xff005164>
    62f0:	d9001317 	ldw	r4,76(sp)
    62f4:	d9000515 	stw	r4,20(sp)
    62f8:	003cd606 	br	5654 <__alt_data_end+0xff005654>
    62fc:	d8801317 	ldw	r2,76(sp)
    6300:	d8800515 	stw	r2,20(sp)
    6304:	003c2a06 	br	53b0 <__alt_data_end+0xff0053b0>
    6308:	d9800317 	ldw	r6,12(sp)
    630c:	00800084 	movi	r2,2
    6310:	11801516 	blt	r2,r6,6368 <_dtoa_r+0x1660>
    6314:	d9c00c17 	ldw	r7,48(sp)
    6318:	d9c00615 	stw	r7,24(sp)
    631c:	003df706 	br	5afc <__alt_data_end+0xff005afc>
    6320:	193d3926 	beq	r3,r4,5808 <__alt_data_end+0xff005808>
    6324:	00c00f04 	movi	r3,60
    6328:	1885c83a 	sub	r2,r3,r2
    632c:	003ddf06 	br	5aac <__alt_data_end+0xff005aac>
    6330:	e009883a 	mov	r4,fp
    6334:	e0001115 	stw	zero,68(fp)
    6338:	000b883a 	mov	r5,zero
    633c:	0007b980 	call	7b98 <_Balloc>
    6340:	d8800715 	stw	r2,28(sp)
    6344:	d8c00717 	ldw	r3,28(sp)
    6348:	00bfffc4 	movi	r2,-1
    634c:	01000044 	movi	r4,1
    6350:	d8800c15 	stw	r2,48(sp)
    6354:	e0c01015 	stw	r3,64(fp)
    6358:	d9000b15 	stw	r4,44(sp)
    635c:	d8800615 	stw	r2,24(sp)
    6360:	d8002215 	stw	zero,136(sp)
    6364:	003c4106 	br	546c <__alt_data_end+0xff00546c>
    6368:	d8c00c17 	ldw	r3,48(sp)
    636c:	d8c00615 	stw	r3,24(sp)
    6370:	003e7006 	br	5d34 <__alt_data_end+0xff005d34>
    6374:	04400044 	movi	r17,1
    6378:	003b2006 	br	4ffc <__alt_data_end+0xff004ffc>
    637c:	000b883a 	mov	r5,zero
    6380:	003b3d06 	br	5078 <__alt_data_end+0xff005078>
    6384:	d8800c17 	ldw	r2,48(sp)
    6388:	d8800615 	stw	r2,24(sp)
    638c:	003e6906 	br	5d34 <__alt_data_end+0xff005d34>

00006390 <__sflush_r>:
    6390:	2880030b 	ldhu	r2,12(r5)
    6394:	defffb04 	addi	sp,sp,-20
    6398:	dcc00315 	stw	r19,12(sp)
    639c:	dc400115 	stw	r17,4(sp)
    63a0:	dfc00415 	stw	ra,16(sp)
    63a4:	dc800215 	stw	r18,8(sp)
    63a8:	dc000015 	stw	r16,0(sp)
    63ac:	10c0020c 	andi	r3,r2,8
    63b0:	2823883a 	mov	r17,r5
    63b4:	2027883a 	mov	r19,r4
    63b8:	1800311e 	bne	r3,zero,6480 <__sflush_r+0xf0>
    63bc:	28c00117 	ldw	r3,4(r5)
    63c0:	10820014 	ori	r2,r2,2048
    63c4:	2880030d 	sth	r2,12(r5)
    63c8:	00c04b0e 	bge	zero,r3,64f8 <__sflush_r+0x168>
    63cc:	8a000a17 	ldw	r8,40(r17)
    63d0:	40002326 	beq	r8,zero,6460 <__sflush_r+0xd0>
    63d4:	9c000017 	ldw	r16,0(r19)
    63d8:	10c4000c 	andi	r3,r2,4096
    63dc:	98000015 	stw	zero,0(r19)
    63e0:	18004826 	beq	r3,zero,6504 <__sflush_r+0x174>
    63e4:	89801417 	ldw	r6,80(r17)
    63e8:	10c0010c 	andi	r3,r2,4
    63ec:	18000626 	beq	r3,zero,6408 <__sflush_r+0x78>
    63f0:	88c00117 	ldw	r3,4(r17)
    63f4:	88800c17 	ldw	r2,48(r17)
    63f8:	30cdc83a 	sub	r6,r6,r3
    63fc:	10000226 	beq	r2,zero,6408 <__sflush_r+0x78>
    6400:	88800f17 	ldw	r2,60(r17)
    6404:	308dc83a 	sub	r6,r6,r2
    6408:	89400717 	ldw	r5,28(r17)
    640c:	000f883a 	mov	r7,zero
    6410:	9809883a 	mov	r4,r19
    6414:	403ee83a 	callr	r8
    6418:	00ffffc4 	movi	r3,-1
    641c:	10c04426 	beq	r2,r3,6530 <__sflush_r+0x1a0>
    6420:	88c0030b 	ldhu	r3,12(r17)
    6424:	89000417 	ldw	r4,16(r17)
    6428:	88000115 	stw	zero,4(r17)
    642c:	197dffcc 	andi	r5,r3,63487
    6430:	8940030d 	sth	r5,12(r17)
    6434:	89000015 	stw	r4,0(r17)
    6438:	18c4000c 	andi	r3,r3,4096
    643c:	18002c1e 	bne	r3,zero,64f0 <__sflush_r+0x160>
    6440:	89400c17 	ldw	r5,48(r17)
    6444:	9c000015 	stw	r16,0(r19)
    6448:	28000526 	beq	r5,zero,6460 <__sflush_r+0xd0>
    644c:	88801004 	addi	r2,r17,64
    6450:	28800226 	beq	r5,r2,645c <__sflush_r+0xcc>
    6454:	9809883a 	mov	r4,r19
    6458:	0006afc0 	call	6afc <_free_r>
    645c:	88000c15 	stw	zero,48(r17)
    6460:	0005883a 	mov	r2,zero
    6464:	dfc00417 	ldw	ra,16(sp)
    6468:	dcc00317 	ldw	r19,12(sp)
    646c:	dc800217 	ldw	r18,8(sp)
    6470:	dc400117 	ldw	r17,4(sp)
    6474:	dc000017 	ldw	r16,0(sp)
    6478:	dec00504 	addi	sp,sp,20
    647c:	f800283a 	ret
    6480:	2c800417 	ldw	r18,16(r5)
    6484:	903ff626 	beq	r18,zero,6460 <__alt_data_end+0xff006460>
    6488:	2c000017 	ldw	r16,0(r5)
    648c:	108000cc 	andi	r2,r2,3
    6490:	2c800015 	stw	r18,0(r5)
    6494:	84a1c83a 	sub	r16,r16,r18
    6498:	1000131e 	bne	r2,zero,64e8 <__sflush_r+0x158>
    649c:	28800517 	ldw	r2,20(r5)
    64a0:	88800215 	stw	r2,8(r17)
    64a4:	04000316 	blt	zero,r16,64b4 <__sflush_r+0x124>
    64a8:	003fed06 	br	6460 <__alt_data_end+0xff006460>
    64ac:	90a5883a 	add	r18,r18,r2
    64b0:	043feb0e 	bge	zero,r16,6460 <__alt_data_end+0xff006460>
    64b4:	88800917 	ldw	r2,36(r17)
    64b8:	89400717 	ldw	r5,28(r17)
    64bc:	800f883a 	mov	r7,r16
    64c0:	900d883a 	mov	r6,r18
    64c4:	9809883a 	mov	r4,r19
    64c8:	103ee83a 	callr	r2
    64cc:	80a1c83a 	sub	r16,r16,r2
    64d0:	00bff616 	blt	zero,r2,64ac <__alt_data_end+0xff0064ac>
    64d4:	88c0030b 	ldhu	r3,12(r17)
    64d8:	00bfffc4 	movi	r2,-1
    64dc:	18c01014 	ori	r3,r3,64
    64e0:	88c0030d 	sth	r3,12(r17)
    64e4:	003fdf06 	br	6464 <__alt_data_end+0xff006464>
    64e8:	0005883a 	mov	r2,zero
    64ec:	003fec06 	br	64a0 <__alt_data_end+0xff0064a0>
    64f0:	88801415 	stw	r2,80(r17)
    64f4:	003fd206 	br	6440 <__alt_data_end+0xff006440>
    64f8:	28c00f17 	ldw	r3,60(r5)
    64fc:	00ffb316 	blt	zero,r3,63cc <__alt_data_end+0xff0063cc>
    6500:	003fd706 	br	6460 <__alt_data_end+0xff006460>
    6504:	89400717 	ldw	r5,28(r17)
    6508:	000d883a 	mov	r6,zero
    650c:	01c00044 	movi	r7,1
    6510:	9809883a 	mov	r4,r19
    6514:	403ee83a 	callr	r8
    6518:	100d883a 	mov	r6,r2
    651c:	00bfffc4 	movi	r2,-1
    6520:	30801426 	beq	r6,r2,6574 <__sflush_r+0x1e4>
    6524:	8880030b 	ldhu	r2,12(r17)
    6528:	8a000a17 	ldw	r8,40(r17)
    652c:	003fae06 	br	63e8 <__alt_data_end+0xff0063e8>
    6530:	98c00017 	ldw	r3,0(r19)
    6534:	183fba26 	beq	r3,zero,6420 <__alt_data_end+0xff006420>
    6538:	01000744 	movi	r4,29
    653c:	19000626 	beq	r3,r4,6558 <__sflush_r+0x1c8>
    6540:	01000584 	movi	r4,22
    6544:	19000426 	beq	r3,r4,6558 <__sflush_r+0x1c8>
    6548:	88c0030b 	ldhu	r3,12(r17)
    654c:	18c01014 	ori	r3,r3,64
    6550:	88c0030d 	sth	r3,12(r17)
    6554:	003fc306 	br	6464 <__alt_data_end+0xff006464>
    6558:	8880030b 	ldhu	r2,12(r17)
    655c:	88c00417 	ldw	r3,16(r17)
    6560:	88000115 	stw	zero,4(r17)
    6564:	10bdffcc 	andi	r2,r2,63487
    6568:	8880030d 	sth	r2,12(r17)
    656c:	88c00015 	stw	r3,0(r17)
    6570:	003fb306 	br	6440 <__alt_data_end+0xff006440>
    6574:	98800017 	ldw	r2,0(r19)
    6578:	103fea26 	beq	r2,zero,6524 <__alt_data_end+0xff006524>
    657c:	00c00744 	movi	r3,29
    6580:	10c00226 	beq	r2,r3,658c <__sflush_r+0x1fc>
    6584:	00c00584 	movi	r3,22
    6588:	10c0031e 	bne	r2,r3,6598 <__sflush_r+0x208>
    658c:	9c000015 	stw	r16,0(r19)
    6590:	0005883a 	mov	r2,zero
    6594:	003fb306 	br	6464 <__alt_data_end+0xff006464>
    6598:	88c0030b 	ldhu	r3,12(r17)
    659c:	3005883a 	mov	r2,r6
    65a0:	18c01014 	ori	r3,r3,64
    65a4:	88c0030d 	sth	r3,12(r17)
    65a8:	003fae06 	br	6464 <__alt_data_end+0xff006464>

000065ac <_fflush_r>:
    65ac:	defffd04 	addi	sp,sp,-12
    65b0:	dc000115 	stw	r16,4(sp)
    65b4:	dfc00215 	stw	ra,8(sp)
    65b8:	2021883a 	mov	r16,r4
    65bc:	20000226 	beq	r4,zero,65c8 <_fflush_r+0x1c>
    65c0:	20800e17 	ldw	r2,56(r4)
    65c4:	10000c26 	beq	r2,zero,65f8 <_fflush_r+0x4c>
    65c8:	2880030f 	ldh	r2,12(r5)
    65cc:	1000051e 	bne	r2,zero,65e4 <_fflush_r+0x38>
    65d0:	0005883a 	mov	r2,zero
    65d4:	dfc00217 	ldw	ra,8(sp)
    65d8:	dc000117 	ldw	r16,4(sp)
    65dc:	dec00304 	addi	sp,sp,12
    65e0:	f800283a 	ret
    65e4:	8009883a 	mov	r4,r16
    65e8:	dfc00217 	ldw	ra,8(sp)
    65ec:	dc000117 	ldw	r16,4(sp)
    65f0:	dec00304 	addi	sp,sp,12
    65f4:	00063901 	jmpi	6390 <__sflush_r>
    65f8:	d9400015 	stw	r5,0(sp)
    65fc:	00069880 	call	6988 <__sinit>
    6600:	d9400017 	ldw	r5,0(sp)
    6604:	003ff006 	br	65c8 <__alt_data_end+0xff0065c8>

00006608 <fflush>:
    6608:	20000526 	beq	r4,zero,6620 <fflush+0x18>
    660c:	00800074 	movhi	r2,1
    6610:	1088f004 	addi	r2,r2,9152
    6614:	200b883a 	mov	r5,r4
    6618:	11000017 	ldw	r4,0(r2)
    661c:	00065ac1 	jmpi	65ac <_fflush_r>
    6620:	00800074 	movhi	r2,1
    6624:	1088ef04 	addi	r2,r2,9148
    6628:	11000017 	ldw	r4,0(r2)
    662c:	01400034 	movhi	r5,0
    6630:	29596b04 	addi	r5,r5,26028
    6634:	000738c1 	jmpi	738c <_fwalk_reent>

00006638 <__fp_unlock>:
    6638:	0005883a 	mov	r2,zero
    663c:	f800283a 	ret

00006640 <_cleanup_r>:
    6640:	01400074 	movhi	r5,1
    6644:	296ad104 	addi	r5,r5,-21692
    6648:	000738c1 	jmpi	738c <_fwalk_reent>

0000664c <__sinit.part.1>:
    664c:	defff704 	addi	sp,sp,-36
    6650:	00c00034 	movhi	r3,0
    6654:	dfc00815 	stw	ra,32(sp)
    6658:	ddc00715 	stw	r23,28(sp)
    665c:	dd800615 	stw	r22,24(sp)
    6660:	dd400515 	stw	r21,20(sp)
    6664:	dd000415 	stw	r20,16(sp)
    6668:	dcc00315 	stw	r19,12(sp)
    666c:	dc800215 	stw	r18,8(sp)
    6670:	dc400115 	stw	r17,4(sp)
    6674:	dc000015 	stw	r16,0(sp)
    6678:	18d99004 	addi	r3,r3,26176
    667c:	24000117 	ldw	r16,4(r4)
    6680:	20c00f15 	stw	r3,60(r4)
    6684:	2080bb04 	addi	r2,r4,748
    6688:	00c000c4 	movi	r3,3
    668c:	20c0b915 	stw	r3,740(r4)
    6690:	2080ba15 	stw	r2,744(r4)
    6694:	2000b815 	stw	zero,736(r4)
    6698:	05c00204 	movi	r23,8
    669c:	00800104 	movi	r2,4
    66a0:	2025883a 	mov	r18,r4
    66a4:	b80d883a 	mov	r6,r23
    66a8:	81001704 	addi	r4,r16,92
    66ac:	000b883a 	mov	r5,zero
    66b0:	80000015 	stw	zero,0(r16)
    66b4:	80000115 	stw	zero,4(r16)
    66b8:	80000215 	stw	zero,8(r16)
    66bc:	8080030d 	sth	r2,12(r16)
    66c0:	80001915 	stw	zero,100(r16)
    66c4:	8000038d 	sth	zero,14(r16)
    66c8:	80000415 	stw	zero,16(r16)
    66cc:	80000515 	stw	zero,20(r16)
    66d0:	80000615 	stw	zero,24(r16)
    66d4:	0007a700 	call	7a70 <memset>
    66d8:	05800074 	movhi	r22,1
    66dc:	94400217 	ldw	r17,8(r18)
    66e0:	05400074 	movhi	r21,1
    66e4:	05000074 	movhi	r20,1
    66e8:	04c00074 	movhi	r19,1
    66ec:	b5a45b04 	addi	r22,r22,-28308
    66f0:	ad647204 	addi	r21,r21,-28216
    66f4:	a5249104 	addi	r20,r20,-28092
    66f8:	9ce4a804 	addi	r19,r19,-28000
    66fc:	85800815 	stw	r22,32(r16)
    6700:	85400915 	stw	r21,36(r16)
    6704:	85000a15 	stw	r20,40(r16)
    6708:	84c00b15 	stw	r19,44(r16)
    670c:	84000715 	stw	r16,28(r16)
    6710:	00800284 	movi	r2,10
    6714:	8880030d 	sth	r2,12(r17)
    6718:	00800044 	movi	r2,1
    671c:	b80d883a 	mov	r6,r23
    6720:	89001704 	addi	r4,r17,92
    6724:	000b883a 	mov	r5,zero
    6728:	88000015 	stw	zero,0(r17)
    672c:	88000115 	stw	zero,4(r17)
    6730:	88000215 	stw	zero,8(r17)
    6734:	88001915 	stw	zero,100(r17)
    6738:	8880038d 	sth	r2,14(r17)
    673c:	88000415 	stw	zero,16(r17)
    6740:	88000515 	stw	zero,20(r17)
    6744:	88000615 	stw	zero,24(r17)
    6748:	0007a700 	call	7a70 <memset>
    674c:	94000317 	ldw	r16,12(r18)
    6750:	00800484 	movi	r2,18
    6754:	8c400715 	stw	r17,28(r17)
    6758:	8d800815 	stw	r22,32(r17)
    675c:	8d400915 	stw	r21,36(r17)
    6760:	8d000a15 	stw	r20,40(r17)
    6764:	8cc00b15 	stw	r19,44(r17)
    6768:	8080030d 	sth	r2,12(r16)
    676c:	00800084 	movi	r2,2
    6770:	80000015 	stw	zero,0(r16)
    6774:	80000115 	stw	zero,4(r16)
    6778:	80000215 	stw	zero,8(r16)
    677c:	80001915 	stw	zero,100(r16)
    6780:	8080038d 	sth	r2,14(r16)
    6784:	80000415 	stw	zero,16(r16)
    6788:	80000515 	stw	zero,20(r16)
    678c:	80000615 	stw	zero,24(r16)
    6790:	b80d883a 	mov	r6,r23
    6794:	000b883a 	mov	r5,zero
    6798:	81001704 	addi	r4,r16,92
    679c:	0007a700 	call	7a70 <memset>
    67a0:	00800044 	movi	r2,1
    67a4:	84000715 	stw	r16,28(r16)
    67a8:	85800815 	stw	r22,32(r16)
    67ac:	85400915 	stw	r21,36(r16)
    67b0:	85000a15 	stw	r20,40(r16)
    67b4:	84c00b15 	stw	r19,44(r16)
    67b8:	90800e15 	stw	r2,56(r18)
    67bc:	dfc00817 	ldw	ra,32(sp)
    67c0:	ddc00717 	ldw	r23,28(sp)
    67c4:	dd800617 	ldw	r22,24(sp)
    67c8:	dd400517 	ldw	r21,20(sp)
    67cc:	dd000417 	ldw	r20,16(sp)
    67d0:	dcc00317 	ldw	r19,12(sp)
    67d4:	dc800217 	ldw	r18,8(sp)
    67d8:	dc400117 	ldw	r17,4(sp)
    67dc:	dc000017 	ldw	r16,0(sp)
    67e0:	dec00904 	addi	sp,sp,36
    67e4:	f800283a 	ret

000067e8 <__fp_lock>:
    67e8:	0005883a 	mov	r2,zero
    67ec:	f800283a 	ret

000067f0 <__sfmoreglue>:
    67f0:	defffc04 	addi	sp,sp,-16
    67f4:	dc400115 	stw	r17,4(sp)
    67f8:	2c7fffc4 	addi	r17,r5,-1
    67fc:	8c401a24 	muli	r17,r17,104
    6800:	dc800215 	stw	r18,8(sp)
    6804:	2825883a 	mov	r18,r5
    6808:	89401d04 	addi	r5,r17,116
    680c:	dc000015 	stw	r16,0(sp)
    6810:	dfc00315 	stw	ra,12(sp)
    6814:	0001cac0 	call	1cac <_malloc_r>
    6818:	1021883a 	mov	r16,r2
    681c:	10000726 	beq	r2,zero,683c <__sfmoreglue+0x4c>
    6820:	11000304 	addi	r4,r2,12
    6824:	10000015 	stw	zero,0(r2)
    6828:	14800115 	stw	r18,4(r2)
    682c:	11000215 	stw	r4,8(r2)
    6830:	89801a04 	addi	r6,r17,104
    6834:	000b883a 	mov	r5,zero
    6838:	0007a700 	call	7a70 <memset>
    683c:	8005883a 	mov	r2,r16
    6840:	dfc00317 	ldw	ra,12(sp)
    6844:	dc800217 	ldw	r18,8(sp)
    6848:	dc400117 	ldw	r17,4(sp)
    684c:	dc000017 	ldw	r16,0(sp)
    6850:	dec00404 	addi	sp,sp,16
    6854:	f800283a 	ret

00006858 <__sfp>:
    6858:	defffb04 	addi	sp,sp,-20
    685c:	dc000015 	stw	r16,0(sp)
    6860:	04000074 	movhi	r16,1
    6864:	8408ef04 	addi	r16,r16,9148
    6868:	dcc00315 	stw	r19,12(sp)
    686c:	2027883a 	mov	r19,r4
    6870:	81000017 	ldw	r4,0(r16)
    6874:	dfc00415 	stw	ra,16(sp)
    6878:	dc800215 	stw	r18,8(sp)
    687c:	20800e17 	ldw	r2,56(r4)
    6880:	dc400115 	stw	r17,4(sp)
    6884:	1000021e 	bne	r2,zero,6890 <__sfp+0x38>
    6888:	000664c0 	call	664c <__sinit.part.1>
    688c:	81000017 	ldw	r4,0(r16)
    6890:	2480b804 	addi	r18,r4,736
    6894:	047fffc4 	movi	r17,-1
    6898:	91000117 	ldw	r4,4(r18)
    689c:	94000217 	ldw	r16,8(r18)
    68a0:	213fffc4 	addi	r4,r4,-1
    68a4:	20000a16 	blt	r4,zero,68d0 <__sfp+0x78>
    68a8:	8080030f 	ldh	r2,12(r16)
    68ac:	10000c26 	beq	r2,zero,68e0 <__sfp+0x88>
    68b0:	80c01d04 	addi	r3,r16,116
    68b4:	00000206 	br	68c0 <__sfp+0x68>
    68b8:	18bfe60f 	ldh	r2,-104(r3)
    68bc:	10000826 	beq	r2,zero,68e0 <__sfp+0x88>
    68c0:	213fffc4 	addi	r4,r4,-1
    68c4:	1c3ffd04 	addi	r16,r3,-12
    68c8:	18c01a04 	addi	r3,r3,104
    68cc:	247ffa1e 	bne	r4,r17,68b8 <__alt_data_end+0xff0068b8>
    68d0:	90800017 	ldw	r2,0(r18)
    68d4:	10001d26 	beq	r2,zero,694c <__sfp+0xf4>
    68d8:	1025883a 	mov	r18,r2
    68dc:	003fee06 	br	6898 <__alt_data_end+0xff006898>
    68e0:	00bfffc4 	movi	r2,-1
    68e4:	8080038d 	sth	r2,14(r16)
    68e8:	00800044 	movi	r2,1
    68ec:	8080030d 	sth	r2,12(r16)
    68f0:	80001915 	stw	zero,100(r16)
    68f4:	80000015 	stw	zero,0(r16)
    68f8:	80000215 	stw	zero,8(r16)
    68fc:	80000115 	stw	zero,4(r16)
    6900:	80000415 	stw	zero,16(r16)
    6904:	80000515 	stw	zero,20(r16)
    6908:	80000615 	stw	zero,24(r16)
    690c:	01800204 	movi	r6,8
    6910:	000b883a 	mov	r5,zero
    6914:	81001704 	addi	r4,r16,92
    6918:	0007a700 	call	7a70 <memset>
    691c:	8005883a 	mov	r2,r16
    6920:	80000c15 	stw	zero,48(r16)
    6924:	80000d15 	stw	zero,52(r16)
    6928:	80001115 	stw	zero,68(r16)
    692c:	80001215 	stw	zero,72(r16)
    6930:	dfc00417 	ldw	ra,16(sp)
    6934:	dcc00317 	ldw	r19,12(sp)
    6938:	dc800217 	ldw	r18,8(sp)
    693c:	dc400117 	ldw	r17,4(sp)
    6940:	dc000017 	ldw	r16,0(sp)
    6944:	dec00504 	addi	sp,sp,20
    6948:	f800283a 	ret
    694c:	01400104 	movi	r5,4
    6950:	9809883a 	mov	r4,r19
    6954:	00067f00 	call	67f0 <__sfmoreglue>
    6958:	90800015 	stw	r2,0(r18)
    695c:	103fde1e 	bne	r2,zero,68d8 <__alt_data_end+0xff0068d8>
    6960:	00800304 	movi	r2,12
    6964:	98800015 	stw	r2,0(r19)
    6968:	0005883a 	mov	r2,zero
    696c:	003ff006 	br	6930 <__alt_data_end+0xff006930>

00006970 <_cleanup>:
    6970:	00800074 	movhi	r2,1
    6974:	1088ef04 	addi	r2,r2,9148
    6978:	11000017 	ldw	r4,0(r2)
    697c:	01400074 	movhi	r5,1
    6980:	296ad104 	addi	r5,r5,-21692
    6984:	000738c1 	jmpi	738c <_fwalk_reent>

00006988 <__sinit>:
    6988:	20800e17 	ldw	r2,56(r4)
    698c:	10000126 	beq	r2,zero,6994 <__sinit+0xc>
    6990:	f800283a 	ret
    6994:	000664c1 	jmpi	664c <__sinit.part.1>

00006998 <__sfp_lock_acquire>:
    6998:	f800283a 	ret

0000699c <__sfp_lock_release>:
    699c:	f800283a 	ret

000069a0 <__sinit_lock_acquire>:
    69a0:	f800283a 	ret

000069a4 <__sinit_lock_release>:
    69a4:	f800283a 	ret

000069a8 <__fp_lock_all>:
    69a8:	00800074 	movhi	r2,1
    69ac:	1088f004 	addi	r2,r2,9152
    69b0:	11000017 	ldw	r4,0(r2)
    69b4:	01400034 	movhi	r5,0
    69b8:	2959fa04 	addi	r5,r5,26600
    69bc:	00072c81 	jmpi	72c8 <_fwalk>

000069c0 <__fp_unlock_all>:
    69c0:	00800074 	movhi	r2,1
    69c4:	1088f004 	addi	r2,r2,9152
    69c8:	11000017 	ldw	r4,0(r2)
    69cc:	01400034 	movhi	r5,0
    69d0:	29598e04 	addi	r5,r5,26168
    69d4:	00072c81 	jmpi	72c8 <_fwalk>

000069d8 <_malloc_trim_r>:
    69d8:	defffb04 	addi	sp,sp,-20
    69dc:	dcc00315 	stw	r19,12(sp)
    69e0:	04c00074 	movhi	r19,1
    69e4:	dc800215 	stw	r18,8(sp)
    69e8:	dc400115 	stw	r17,4(sp)
    69ec:	dc000015 	stw	r16,0(sp)
    69f0:	dfc00415 	stw	ra,16(sp)
    69f4:	2821883a 	mov	r16,r5
    69f8:	9cc24004 	addi	r19,r19,2304
    69fc:	2025883a 	mov	r18,r4
    6a00:	000e9340 	call	e934 <__malloc_lock>
    6a04:	98800217 	ldw	r2,8(r19)
    6a08:	14400117 	ldw	r17,4(r2)
    6a0c:	00bfff04 	movi	r2,-4
    6a10:	88a2703a 	and	r17,r17,r2
    6a14:	8c21c83a 	sub	r16,r17,r16
    6a18:	8403fbc4 	addi	r16,r16,4079
    6a1c:	8020d33a 	srli	r16,r16,12
    6a20:	0083ffc4 	movi	r2,4095
    6a24:	843fffc4 	addi	r16,r16,-1
    6a28:	8020933a 	slli	r16,r16,12
    6a2c:	1400060e 	bge	r2,r16,6a48 <_malloc_trim_r+0x70>
    6a30:	000b883a 	mov	r5,zero
    6a34:	9009883a 	mov	r4,r18
    6a38:	00025f80 	call	25f8 <_sbrk_r>
    6a3c:	98c00217 	ldw	r3,8(r19)
    6a40:	1c47883a 	add	r3,r3,r17
    6a44:	10c00a26 	beq	r2,r3,6a70 <_malloc_trim_r+0x98>
    6a48:	9009883a 	mov	r4,r18
    6a4c:	000e9380 	call	e938 <__malloc_unlock>
    6a50:	0005883a 	mov	r2,zero
    6a54:	dfc00417 	ldw	ra,16(sp)
    6a58:	dcc00317 	ldw	r19,12(sp)
    6a5c:	dc800217 	ldw	r18,8(sp)
    6a60:	dc400117 	ldw	r17,4(sp)
    6a64:	dc000017 	ldw	r16,0(sp)
    6a68:	dec00504 	addi	sp,sp,20
    6a6c:	f800283a 	ret
    6a70:	040bc83a 	sub	r5,zero,r16
    6a74:	9009883a 	mov	r4,r18
    6a78:	00025f80 	call	25f8 <_sbrk_r>
    6a7c:	00ffffc4 	movi	r3,-1
    6a80:	10c00d26 	beq	r2,r3,6ab8 <_malloc_trim_r+0xe0>
    6a84:	00c00074 	movhi	r3,1
    6a88:	18cfd404 	addi	r3,r3,16208
    6a8c:	18800017 	ldw	r2,0(r3)
    6a90:	99000217 	ldw	r4,8(r19)
    6a94:	8c23c83a 	sub	r17,r17,r16
    6a98:	8c400054 	ori	r17,r17,1
    6a9c:	1421c83a 	sub	r16,r2,r16
    6aa0:	24400115 	stw	r17,4(r4)
    6aa4:	9009883a 	mov	r4,r18
    6aa8:	1c000015 	stw	r16,0(r3)
    6aac:	000e9380 	call	e938 <__malloc_unlock>
    6ab0:	00800044 	movi	r2,1
    6ab4:	003fe706 	br	6a54 <__alt_data_end+0xff006a54>
    6ab8:	000b883a 	mov	r5,zero
    6abc:	9009883a 	mov	r4,r18
    6ac0:	00025f80 	call	25f8 <_sbrk_r>
    6ac4:	99000217 	ldw	r4,8(r19)
    6ac8:	014003c4 	movi	r5,15
    6acc:	1107c83a 	sub	r3,r2,r4
    6ad0:	28ffdd0e 	bge	r5,r3,6a48 <__alt_data_end+0xff006a48>
    6ad4:	01400074 	movhi	r5,1
    6ad8:	2948ed04 	addi	r5,r5,9140
    6adc:	29400017 	ldw	r5,0(r5)
    6ae0:	18c00054 	ori	r3,r3,1
    6ae4:	20c00115 	stw	r3,4(r4)
    6ae8:	00c00074 	movhi	r3,1
    6aec:	1145c83a 	sub	r2,r2,r5
    6af0:	18cfd404 	addi	r3,r3,16208
    6af4:	18800015 	stw	r2,0(r3)
    6af8:	003fd306 	br	6a48 <__alt_data_end+0xff006a48>

00006afc <_free_r>:
    6afc:	28004126 	beq	r5,zero,6c04 <_free_r+0x108>
    6b00:	defffd04 	addi	sp,sp,-12
    6b04:	dc400115 	stw	r17,4(sp)
    6b08:	dc000015 	stw	r16,0(sp)
    6b0c:	2023883a 	mov	r17,r4
    6b10:	2821883a 	mov	r16,r5
    6b14:	dfc00215 	stw	ra,8(sp)
    6b18:	000e9340 	call	e934 <__malloc_lock>
    6b1c:	81ffff17 	ldw	r7,-4(r16)
    6b20:	00bfff84 	movi	r2,-2
    6b24:	01000074 	movhi	r4,1
    6b28:	81bffe04 	addi	r6,r16,-8
    6b2c:	3884703a 	and	r2,r7,r2
    6b30:	21024004 	addi	r4,r4,2304
    6b34:	308b883a 	add	r5,r6,r2
    6b38:	2a400117 	ldw	r9,4(r5)
    6b3c:	22000217 	ldw	r8,8(r4)
    6b40:	00ffff04 	movi	r3,-4
    6b44:	48c6703a 	and	r3,r9,r3
    6b48:	2a005726 	beq	r5,r8,6ca8 <_free_r+0x1ac>
    6b4c:	28c00115 	stw	r3,4(r5)
    6b50:	39c0004c 	andi	r7,r7,1
    6b54:	3800091e 	bne	r7,zero,6b7c <_free_r+0x80>
    6b58:	823ffe17 	ldw	r8,-8(r16)
    6b5c:	22400204 	addi	r9,r4,8
    6b60:	320dc83a 	sub	r6,r6,r8
    6b64:	31c00217 	ldw	r7,8(r6)
    6b68:	1205883a 	add	r2,r2,r8
    6b6c:	3a406526 	beq	r7,r9,6d04 <_free_r+0x208>
    6b70:	32000317 	ldw	r8,12(r6)
    6b74:	3a000315 	stw	r8,12(r7)
    6b78:	41c00215 	stw	r7,8(r8)
    6b7c:	28cf883a 	add	r7,r5,r3
    6b80:	39c00117 	ldw	r7,4(r7)
    6b84:	39c0004c 	andi	r7,r7,1
    6b88:	38003a26 	beq	r7,zero,6c74 <_free_r+0x178>
    6b8c:	10c00054 	ori	r3,r2,1
    6b90:	30c00115 	stw	r3,4(r6)
    6b94:	3087883a 	add	r3,r6,r2
    6b98:	18800015 	stw	r2,0(r3)
    6b9c:	00c07fc4 	movi	r3,511
    6ba0:	18801936 	bltu	r3,r2,6c08 <_free_r+0x10c>
    6ba4:	1004d0fa 	srli	r2,r2,3
    6ba8:	01c00044 	movi	r7,1
    6bac:	21400117 	ldw	r5,4(r4)
    6bb0:	10c00044 	addi	r3,r2,1
    6bb4:	18c7883a 	add	r3,r3,r3
    6bb8:	1005d0ba 	srai	r2,r2,2
    6bbc:	18c7883a 	add	r3,r3,r3
    6bc0:	18c7883a 	add	r3,r3,r3
    6bc4:	1907883a 	add	r3,r3,r4
    6bc8:	3884983a 	sll	r2,r7,r2
    6bcc:	19c00017 	ldw	r7,0(r3)
    6bd0:	1a3ffe04 	addi	r8,r3,-8
    6bd4:	1144b03a 	or	r2,r2,r5
    6bd8:	32000315 	stw	r8,12(r6)
    6bdc:	31c00215 	stw	r7,8(r6)
    6be0:	20800115 	stw	r2,4(r4)
    6be4:	19800015 	stw	r6,0(r3)
    6be8:	39800315 	stw	r6,12(r7)
    6bec:	8809883a 	mov	r4,r17
    6bf0:	dfc00217 	ldw	ra,8(sp)
    6bf4:	dc400117 	ldw	r17,4(sp)
    6bf8:	dc000017 	ldw	r16,0(sp)
    6bfc:	dec00304 	addi	sp,sp,12
    6c00:	000e9381 	jmpi	e938 <__malloc_unlock>
    6c04:	f800283a 	ret
    6c08:	100ad27a 	srli	r5,r2,9
    6c0c:	00c00104 	movi	r3,4
    6c10:	19404a36 	bltu	r3,r5,6d3c <_free_r+0x240>
    6c14:	100ad1ba 	srli	r5,r2,6
    6c18:	28c00e44 	addi	r3,r5,57
    6c1c:	18c7883a 	add	r3,r3,r3
    6c20:	29400e04 	addi	r5,r5,56
    6c24:	18c7883a 	add	r3,r3,r3
    6c28:	18c7883a 	add	r3,r3,r3
    6c2c:	1909883a 	add	r4,r3,r4
    6c30:	20c00017 	ldw	r3,0(r4)
    6c34:	01c00074 	movhi	r7,1
    6c38:	213ffe04 	addi	r4,r4,-8
    6c3c:	39c24004 	addi	r7,r7,2304
    6c40:	20c04426 	beq	r4,r3,6d54 <_free_r+0x258>
    6c44:	01ffff04 	movi	r7,-4
    6c48:	19400117 	ldw	r5,4(r3)
    6c4c:	29ca703a 	and	r5,r5,r7
    6c50:	1140022e 	bgeu	r2,r5,6c5c <_free_r+0x160>
    6c54:	18c00217 	ldw	r3,8(r3)
    6c58:	20fffb1e 	bne	r4,r3,6c48 <__alt_data_end+0xff006c48>
    6c5c:	19000317 	ldw	r4,12(r3)
    6c60:	31000315 	stw	r4,12(r6)
    6c64:	30c00215 	stw	r3,8(r6)
    6c68:	21800215 	stw	r6,8(r4)
    6c6c:	19800315 	stw	r6,12(r3)
    6c70:	003fde06 	br	6bec <__alt_data_end+0xff006bec>
    6c74:	29c00217 	ldw	r7,8(r5)
    6c78:	10c5883a 	add	r2,r2,r3
    6c7c:	00c00074 	movhi	r3,1
    6c80:	18c24204 	addi	r3,r3,2312
    6c84:	38c03b26 	beq	r7,r3,6d74 <_free_r+0x278>
    6c88:	2a000317 	ldw	r8,12(r5)
    6c8c:	11400054 	ori	r5,r2,1
    6c90:	3087883a 	add	r3,r6,r2
    6c94:	3a000315 	stw	r8,12(r7)
    6c98:	41c00215 	stw	r7,8(r8)
    6c9c:	31400115 	stw	r5,4(r6)
    6ca0:	18800015 	stw	r2,0(r3)
    6ca4:	003fbd06 	br	6b9c <__alt_data_end+0xff006b9c>
    6ca8:	39c0004c 	andi	r7,r7,1
    6cac:	10c5883a 	add	r2,r2,r3
    6cb0:	3800071e 	bne	r7,zero,6cd0 <_free_r+0x1d4>
    6cb4:	81fffe17 	ldw	r7,-8(r16)
    6cb8:	31cdc83a 	sub	r6,r6,r7
    6cbc:	30c00317 	ldw	r3,12(r6)
    6cc0:	31400217 	ldw	r5,8(r6)
    6cc4:	11c5883a 	add	r2,r2,r7
    6cc8:	28c00315 	stw	r3,12(r5)
    6ccc:	19400215 	stw	r5,8(r3)
    6cd0:	10c00054 	ori	r3,r2,1
    6cd4:	30c00115 	stw	r3,4(r6)
    6cd8:	00c00074 	movhi	r3,1
    6cdc:	18c8ee04 	addi	r3,r3,9144
    6ce0:	18c00017 	ldw	r3,0(r3)
    6ce4:	21800215 	stw	r6,8(r4)
    6ce8:	10ffc036 	bltu	r2,r3,6bec <__alt_data_end+0xff006bec>
    6cec:	00800074 	movhi	r2,1
    6cf0:	108fc604 	addi	r2,r2,16152
    6cf4:	11400017 	ldw	r5,0(r2)
    6cf8:	8809883a 	mov	r4,r17
    6cfc:	00069d80 	call	69d8 <_malloc_trim_r>
    6d00:	003fba06 	br	6bec <__alt_data_end+0xff006bec>
    6d04:	28c9883a 	add	r4,r5,r3
    6d08:	21000117 	ldw	r4,4(r4)
    6d0c:	2100004c 	andi	r4,r4,1
    6d10:	2000391e 	bne	r4,zero,6df8 <_free_r+0x2fc>
    6d14:	29c00217 	ldw	r7,8(r5)
    6d18:	29000317 	ldw	r4,12(r5)
    6d1c:	1885883a 	add	r2,r3,r2
    6d20:	10c00054 	ori	r3,r2,1
    6d24:	39000315 	stw	r4,12(r7)
    6d28:	21c00215 	stw	r7,8(r4)
    6d2c:	30c00115 	stw	r3,4(r6)
    6d30:	308d883a 	add	r6,r6,r2
    6d34:	30800015 	stw	r2,0(r6)
    6d38:	003fac06 	br	6bec <__alt_data_end+0xff006bec>
    6d3c:	00c00504 	movi	r3,20
    6d40:	19401536 	bltu	r3,r5,6d98 <_free_r+0x29c>
    6d44:	28c01704 	addi	r3,r5,92
    6d48:	18c7883a 	add	r3,r3,r3
    6d4c:	294016c4 	addi	r5,r5,91
    6d50:	003fb406 	br	6c24 <__alt_data_end+0xff006c24>
    6d54:	280bd0ba 	srai	r5,r5,2
    6d58:	00c00044 	movi	r3,1
    6d5c:	38800117 	ldw	r2,4(r7)
    6d60:	194a983a 	sll	r5,r3,r5
    6d64:	2007883a 	mov	r3,r4
    6d68:	2884b03a 	or	r2,r5,r2
    6d6c:	38800115 	stw	r2,4(r7)
    6d70:	003fbb06 	br	6c60 <__alt_data_end+0xff006c60>
    6d74:	21800515 	stw	r6,20(r4)
    6d78:	21800415 	stw	r6,16(r4)
    6d7c:	10c00054 	ori	r3,r2,1
    6d80:	31c00315 	stw	r7,12(r6)
    6d84:	31c00215 	stw	r7,8(r6)
    6d88:	30c00115 	stw	r3,4(r6)
    6d8c:	308d883a 	add	r6,r6,r2
    6d90:	30800015 	stw	r2,0(r6)
    6d94:	003f9506 	br	6bec <__alt_data_end+0xff006bec>
    6d98:	00c01504 	movi	r3,84
    6d9c:	19400536 	bltu	r3,r5,6db4 <_free_r+0x2b8>
    6da0:	100ad33a 	srli	r5,r2,12
    6da4:	28c01bc4 	addi	r3,r5,111
    6da8:	18c7883a 	add	r3,r3,r3
    6dac:	29401b84 	addi	r5,r5,110
    6db0:	003f9c06 	br	6c24 <__alt_data_end+0xff006c24>
    6db4:	00c05504 	movi	r3,340
    6db8:	19400536 	bltu	r3,r5,6dd0 <_free_r+0x2d4>
    6dbc:	100ad3fa 	srli	r5,r2,15
    6dc0:	28c01e04 	addi	r3,r5,120
    6dc4:	18c7883a 	add	r3,r3,r3
    6dc8:	29401dc4 	addi	r5,r5,119
    6dcc:	003f9506 	br	6c24 <__alt_data_end+0xff006c24>
    6dd0:	00c15504 	movi	r3,1364
    6dd4:	19400536 	bltu	r3,r5,6dec <_free_r+0x2f0>
    6dd8:	100ad4ba 	srli	r5,r2,18
    6ddc:	28c01f44 	addi	r3,r5,125
    6de0:	18c7883a 	add	r3,r3,r3
    6de4:	29401f04 	addi	r5,r5,124
    6de8:	003f8e06 	br	6c24 <__alt_data_end+0xff006c24>
    6dec:	00c03f84 	movi	r3,254
    6df0:	01401f84 	movi	r5,126
    6df4:	003f8b06 	br	6c24 <__alt_data_end+0xff006c24>
    6df8:	10c00054 	ori	r3,r2,1
    6dfc:	30c00115 	stw	r3,4(r6)
    6e00:	308d883a 	add	r6,r6,r2
    6e04:	30800015 	stw	r2,0(r6)
    6e08:	003f7806 	br	6bec <__alt_data_end+0xff006bec>

00006e0c <__sfvwrite_r>:
    6e0c:	30800217 	ldw	r2,8(r6)
    6e10:	10006726 	beq	r2,zero,6fb0 <__sfvwrite_r+0x1a4>
    6e14:	28c0030b 	ldhu	r3,12(r5)
    6e18:	defff404 	addi	sp,sp,-48
    6e1c:	dd400715 	stw	r21,28(sp)
    6e20:	dd000615 	stw	r20,24(sp)
    6e24:	dc000215 	stw	r16,8(sp)
    6e28:	dfc00b15 	stw	ra,44(sp)
    6e2c:	df000a15 	stw	fp,40(sp)
    6e30:	ddc00915 	stw	r23,36(sp)
    6e34:	dd800815 	stw	r22,32(sp)
    6e38:	dcc00515 	stw	r19,20(sp)
    6e3c:	dc800415 	stw	r18,16(sp)
    6e40:	dc400315 	stw	r17,12(sp)
    6e44:	1880020c 	andi	r2,r3,8
    6e48:	2821883a 	mov	r16,r5
    6e4c:	202b883a 	mov	r21,r4
    6e50:	3029883a 	mov	r20,r6
    6e54:	10002726 	beq	r2,zero,6ef4 <__sfvwrite_r+0xe8>
    6e58:	28800417 	ldw	r2,16(r5)
    6e5c:	10002526 	beq	r2,zero,6ef4 <__sfvwrite_r+0xe8>
    6e60:	1880008c 	andi	r2,r3,2
    6e64:	a4400017 	ldw	r17,0(r20)
    6e68:	10002a26 	beq	r2,zero,6f14 <__sfvwrite_r+0x108>
    6e6c:	05a00034 	movhi	r22,32768
    6e70:	0027883a 	mov	r19,zero
    6e74:	0025883a 	mov	r18,zero
    6e78:	b5bf0004 	addi	r22,r22,-1024
    6e7c:	980d883a 	mov	r6,r19
    6e80:	a809883a 	mov	r4,r21
    6e84:	90004626 	beq	r18,zero,6fa0 <__sfvwrite_r+0x194>
    6e88:	900f883a 	mov	r7,r18
    6e8c:	b480022e 	bgeu	r22,r18,6e98 <__sfvwrite_r+0x8c>
    6e90:	01e00034 	movhi	r7,32768
    6e94:	39ff0004 	addi	r7,r7,-1024
    6e98:	80800917 	ldw	r2,36(r16)
    6e9c:	81400717 	ldw	r5,28(r16)
    6ea0:	103ee83a 	callr	r2
    6ea4:	0080570e 	bge	zero,r2,7004 <__sfvwrite_r+0x1f8>
    6ea8:	a0c00217 	ldw	r3,8(r20)
    6eac:	98a7883a 	add	r19,r19,r2
    6eb0:	90a5c83a 	sub	r18,r18,r2
    6eb4:	1885c83a 	sub	r2,r3,r2
    6eb8:	a0800215 	stw	r2,8(r20)
    6ebc:	103fef1e 	bne	r2,zero,6e7c <__alt_data_end+0xff006e7c>
    6ec0:	0005883a 	mov	r2,zero
    6ec4:	dfc00b17 	ldw	ra,44(sp)
    6ec8:	df000a17 	ldw	fp,40(sp)
    6ecc:	ddc00917 	ldw	r23,36(sp)
    6ed0:	dd800817 	ldw	r22,32(sp)
    6ed4:	dd400717 	ldw	r21,28(sp)
    6ed8:	dd000617 	ldw	r20,24(sp)
    6edc:	dcc00517 	ldw	r19,20(sp)
    6ee0:	dc800417 	ldw	r18,16(sp)
    6ee4:	dc400317 	ldw	r17,12(sp)
    6ee8:	dc000217 	ldw	r16,8(sp)
    6eec:	dec00c04 	addi	sp,sp,48
    6ef0:	f800283a 	ret
    6ef4:	800b883a 	mov	r5,r16
    6ef8:	a809883a 	mov	r4,r21
    6efc:	00049b40 	call	49b4 <__swsetup_r>
    6f00:	1000eb1e 	bne	r2,zero,72b0 <__sfvwrite_r+0x4a4>
    6f04:	80c0030b 	ldhu	r3,12(r16)
    6f08:	a4400017 	ldw	r17,0(r20)
    6f0c:	1880008c 	andi	r2,r3,2
    6f10:	103fd61e 	bne	r2,zero,6e6c <__alt_data_end+0xff006e6c>
    6f14:	1880004c 	andi	r2,r3,1
    6f18:	10003f1e 	bne	r2,zero,7018 <__sfvwrite_r+0x20c>
    6f1c:	0039883a 	mov	fp,zero
    6f20:	0025883a 	mov	r18,zero
    6f24:	90001a26 	beq	r18,zero,6f90 <__sfvwrite_r+0x184>
    6f28:	1880800c 	andi	r2,r3,512
    6f2c:	84c00217 	ldw	r19,8(r16)
    6f30:	10002126 	beq	r2,zero,6fb8 <__sfvwrite_r+0x1ac>
    6f34:	982f883a 	mov	r23,r19
    6f38:	94c09336 	bltu	r18,r19,7188 <__sfvwrite_r+0x37c>
    6f3c:	1881200c 	andi	r2,r3,1152
    6f40:	10009e1e 	bne	r2,zero,71bc <__sfvwrite_r+0x3b0>
    6f44:	81000017 	ldw	r4,0(r16)
    6f48:	b80d883a 	mov	r6,r23
    6f4c:	e00b883a 	mov	r5,fp
    6f50:	00079140 	call	7914 <memmove>
    6f54:	80c00217 	ldw	r3,8(r16)
    6f58:	81000017 	ldw	r4,0(r16)
    6f5c:	9005883a 	mov	r2,r18
    6f60:	1ce7c83a 	sub	r19,r3,r19
    6f64:	25cf883a 	add	r7,r4,r23
    6f68:	84c00215 	stw	r19,8(r16)
    6f6c:	81c00015 	stw	r7,0(r16)
    6f70:	a0c00217 	ldw	r3,8(r20)
    6f74:	e0b9883a 	add	fp,fp,r2
    6f78:	90a5c83a 	sub	r18,r18,r2
    6f7c:	18a7c83a 	sub	r19,r3,r2
    6f80:	a4c00215 	stw	r19,8(r20)
    6f84:	983fce26 	beq	r19,zero,6ec0 <__alt_data_end+0xff006ec0>
    6f88:	80c0030b 	ldhu	r3,12(r16)
    6f8c:	903fe61e 	bne	r18,zero,6f28 <__alt_data_end+0xff006f28>
    6f90:	8f000017 	ldw	fp,0(r17)
    6f94:	8c800117 	ldw	r18,4(r17)
    6f98:	8c400204 	addi	r17,r17,8
    6f9c:	003fe106 	br	6f24 <__alt_data_end+0xff006f24>
    6fa0:	8cc00017 	ldw	r19,0(r17)
    6fa4:	8c800117 	ldw	r18,4(r17)
    6fa8:	8c400204 	addi	r17,r17,8
    6fac:	003fb306 	br	6e7c <__alt_data_end+0xff006e7c>
    6fb0:	0005883a 	mov	r2,zero
    6fb4:	f800283a 	ret
    6fb8:	81000017 	ldw	r4,0(r16)
    6fbc:	80800417 	ldw	r2,16(r16)
    6fc0:	11005736 	bltu	r2,r4,7120 <__sfvwrite_r+0x314>
    6fc4:	85c00517 	ldw	r23,20(r16)
    6fc8:	95c05536 	bltu	r18,r23,7120 <__sfvwrite_r+0x314>
    6fcc:	00a00034 	movhi	r2,32768
    6fd0:	10bfffc4 	addi	r2,r2,-1
    6fd4:	9009883a 	mov	r4,r18
    6fd8:	1480012e 	bgeu	r2,r18,6fe0 <__sfvwrite_r+0x1d4>
    6fdc:	1009883a 	mov	r4,r2
    6fe0:	b80b883a 	mov	r5,r23
    6fe4:	000bdb00 	call	bdb0 <__divsi3>
    6fe8:	15cf383a 	mul	r7,r2,r23
    6fec:	81400717 	ldw	r5,28(r16)
    6ff0:	80800917 	ldw	r2,36(r16)
    6ff4:	e00d883a 	mov	r6,fp
    6ff8:	a809883a 	mov	r4,r21
    6ffc:	103ee83a 	callr	r2
    7000:	00bfdb16 	blt	zero,r2,6f70 <__alt_data_end+0xff006f70>
    7004:	8080030b 	ldhu	r2,12(r16)
    7008:	10801014 	ori	r2,r2,64
    700c:	8080030d 	sth	r2,12(r16)
    7010:	00bfffc4 	movi	r2,-1
    7014:	003fab06 	br	6ec4 <__alt_data_end+0xff006ec4>
    7018:	0027883a 	mov	r19,zero
    701c:	0011883a 	mov	r8,zero
    7020:	0039883a 	mov	fp,zero
    7024:	0025883a 	mov	r18,zero
    7028:	90001f26 	beq	r18,zero,70a8 <__sfvwrite_r+0x29c>
    702c:	40005a26 	beq	r8,zero,7198 <__sfvwrite_r+0x38c>
    7030:	982d883a 	mov	r22,r19
    7034:	94c0012e 	bgeu	r18,r19,703c <__sfvwrite_r+0x230>
    7038:	902d883a 	mov	r22,r18
    703c:	81000017 	ldw	r4,0(r16)
    7040:	80800417 	ldw	r2,16(r16)
    7044:	b02f883a 	mov	r23,r22
    7048:	81c00517 	ldw	r7,20(r16)
    704c:	1100032e 	bgeu	r2,r4,705c <__sfvwrite_r+0x250>
    7050:	80c00217 	ldw	r3,8(r16)
    7054:	38c7883a 	add	r3,r7,r3
    7058:	1d801816 	blt	r3,r22,70bc <__sfvwrite_r+0x2b0>
    705c:	b1c03e16 	blt	r22,r7,7158 <__sfvwrite_r+0x34c>
    7060:	80800917 	ldw	r2,36(r16)
    7064:	81400717 	ldw	r5,28(r16)
    7068:	e00d883a 	mov	r6,fp
    706c:	da000115 	stw	r8,4(sp)
    7070:	a809883a 	mov	r4,r21
    7074:	103ee83a 	callr	r2
    7078:	102f883a 	mov	r23,r2
    707c:	da000117 	ldw	r8,4(sp)
    7080:	00bfe00e 	bge	zero,r2,7004 <__alt_data_end+0xff007004>
    7084:	9de7c83a 	sub	r19,r19,r23
    7088:	98001f26 	beq	r19,zero,7108 <__sfvwrite_r+0x2fc>
    708c:	a0800217 	ldw	r2,8(r20)
    7090:	e5f9883a 	add	fp,fp,r23
    7094:	95e5c83a 	sub	r18,r18,r23
    7098:	15efc83a 	sub	r23,r2,r23
    709c:	a5c00215 	stw	r23,8(r20)
    70a0:	b83f8726 	beq	r23,zero,6ec0 <__alt_data_end+0xff006ec0>
    70a4:	903fe11e 	bne	r18,zero,702c <__alt_data_end+0xff00702c>
    70a8:	8f000017 	ldw	fp,0(r17)
    70ac:	8c800117 	ldw	r18,4(r17)
    70b0:	0011883a 	mov	r8,zero
    70b4:	8c400204 	addi	r17,r17,8
    70b8:	003fdb06 	br	7028 <__alt_data_end+0xff007028>
    70bc:	180d883a 	mov	r6,r3
    70c0:	e00b883a 	mov	r5,fp
    70c4:	da000115 	stw	r8,4(sp)
    70c8:	d8c00015 	stw	r3,0(sp)
    70cc:	00079140 	call	7914 <memmove>
    70d0:	d8c00017 	ldw	r3,0(sp)
    70d4:	80800017 	ldw	r2,0(r16)
    70d8:	800b883a 	mov	r5,r16
    70dc:	a809883a 	mov	r4,r21
    70e0:	10c5883a 	add	r2,r2,r3
    70e4:	80800015 	stw	r2,0(r16)
    70e8:	d8c00015 	stw	r3,0(sp)
    70ec:	00065ac0 	call	65ac <_fflush_r>
    70f0:	d8c00017 	ldw	r3,0(sp)
    70f4:	da000117 	ldw	r8,4(sp)
    70f8:	103fc21e 	bne	r2,zero,7004 <__alt_data_end+0xff007004>
    70fc:	182f883a 	mov	r23,r3
    7100:	9de7c83a 	sub	r19,r19,r23
    7104:	983fe11e 	bne	r19,zero,708c <__alt_data_end+0xff00708c>
    7108:	800b883a 	mov	r5,r16
    710c:	a809883a 	mov	r4,r21
    7110:	00065ac0 	call	65ac <_fflush_r>
    7114:	103fbb1e 	bne	r2,zero,7004 <__alt_data_end+0xff007004>
    7118:	0011883a 	mov	r8,zero
    711c:	003fdb06 	br	708c <__alt_data_end+0xff00708c>
    7120:	94c0012e 	bgeu	r18,r19,7128 <__sfvwrite_r+0x31c>
    7124:	9027883a 	mov	r19,r18
    7128:	980d883a 	mov	r6,r19
    712c:	e00b883a 	mov	r5,fp
    7130:	00079140 	call	7914 <memmove>
    7134:	80800217 	ldw	r2,8(r16)
    7138:	80c00017 	ldw	r3,0(r16)
    713c:	14c5c83a 	sub	r2,r2,r19
    7140:	1cc7883a 	add	r3,r3,r19
    7144:	80800215 	stw	r2,8(r16)
    7148:	80c00015 	stw	r3,0(r16)
    714c:	10004326 	beq	r2,zero,725c <__sfvwrite_r+0x450>
    7150:	9805883a 	mov	r2,r19
    7154:	003f8606 	br	6f70 <__alt_data_end+0xff006f70>
    7158:	b00d883a 	mov	r6,r22
    715c:	e00b883a 	mov	r5,fp
    7160:	da000115 	stw	r8,4(sp)
    7164:	00079140 	call	7914 <memmove>
    7168:	80800217 	ldw	r2,8(r16)
    716c:	80c00017 	ldw	r3,0(r16)
    7170:	da000117 	ldw	r8,4(sp)
    7174:	1585c83a 	sub	r2,r2,r22
    7178:	1dad883a 	add	r22,r3,r22
    717c:	80800215 	stw	r2,8(r16)
    7180:	85800015 	stw	r22,0(r16)
    7184:	003fbf06 	br	7084 <__alt_data_end+0xff007084>
    7188:	81000017 	ldw	r4,0(r16)
    718c:	9027883a 	mov	r19,r18
    7190:	902f883a 	mov	r23,r18
    7194:	003f6c06 	br	6f48 <__alt_data_end+0xff006f48>
    7198:	900d883a 	mov	r6,r18
    719c:	01400284 	movi	r5,10
    71a0:	e009883a 	mov	r4,fp
    71a4:	00076e80 	call	76e8 <memchr>
    71a8:	10003e26 	beq	r2,zero,72a4 <__sfvwrite_r+0x498>
    71ac:	10800044 	addi	r2,r2,1
    71b0:	1727c83a 	sub	r19,r2,fp
    71b4:	02000044 	movi	r8,1
    71b8:	003f9d06 	br	7030 <__alt_data_end+0xff007030>
    71bc:	80800517 	ldw	r2,20(r16)
    71c0:	81400417 	ldw	r5,16(r16)
    71c4:	81c00017 	ldw	r7,0(r16)
    71c8:	10a7883a 	add	r19,r2,r2
    71cc:	9885883a 	add	r2,r19,r2
    71d0:	1026d7fa 	srli	r19,r2,31
    71d4:	396dc83a 	sub	r22,r7,r5
    71d8:	b1000044 	addi	r4,r22,1
    71dc:	9885883a 	add	r2,r19,r2
    71e0:	1027d07a 	srai	r19,r2,1
    71e4:	2485883a 	add	r2,r4,r18
    71e8:	980d883a 	mov	r6,r19
    71ec:	9880022e 	bgeu	r19,r2,71f8 <__sfvwrite_r+0x3ec>
    71f0:	1027883a 	mov	r19,r2
    71f4:	100d883a 	mov	r6,r2
    71f8:	18c1000c 	andi	r3,r3,1024
    71fc:	18001c26 	beq	r3,zero,7270 <__sfvwrite_r+0x464>
    7200:	300b883a 	mov	r5,r6
    7204:	a809883a 	mov	r4,r21
    7208:	0001cac0 	call	1cac <_malloc_r>
    720c:	102f883a 	mov	r23,r2
    7210:	10002926 	beq	r2,zero,72b8 <__sfvwrite_r+0x4ac>
    7214:	81400417 	ldw	r5,16(r16)
    7218:	b00d883a 	mov	r6,r22
    721c:	1009883a 	mov	r4,r2
    7220:	00077cc0 	call	77cc <memcpy>
    7224:	8080030b 	ldhu	r2,12(r16)
    7228:	00fedfc4 	movi	r3,-1153
    722c:	10c4703a 	and	r2,r2,r3
    7230:	10802014 	ori	r2,r2,128
    7234:	8080030d 	sth	r2,12(r16)
    7238:	bd89883a 	add	r4,r23,r22
    723c:	9d8fc83a 	sub	r7,r19,r22
    7240:	85c00415 	stw	r23,16(r16)
    7244:	84c00515 	stw	r19,20(r16)
    7248:	81000015 	stw	r4,0(r16)
    724c:	9027883a 	mov	r19,r18
    7250:	81c00215 	stw	r7,8(r16)
    7254:	902f883a 	mov	r23,r18
    7258:	003f3b06 	br	6f48 <__alt_data_end+0xff006f48>
    725c:	800b883a 	mov	r5,r16
    7260:	a809883a 	mov	r4,r21
    7264:	00065ac0 	call	65ac <_fflush_r>
    7268:	103fb926 	beq	r2,zero,7150 <__alt_data_end+0xff007150>
    726c:	003f6506 	br	7004 <__alt_data_end+0xff007004>
    7270:	a809883a 	mov	r4,r21
    7274:	0008b940 	call	8b94 <_realloc_r>
    7278:	102f883a 	mov	r23,r2
    727c:	103fee1e 	bne	r2,zero,7238 <__alt_data_end+0xff007238>
    7280:	81400417 	ldw	r5,16(r16)
    7284:	a809883a 	mov	r4,r21
    7288:	0006afc0 	call	6afc <_free_r>
    728c:	8080030b 	ldhu	r2,12(r16)
    7290:	00ffdfc4 	movi	r3,-129
    7294:	1884703a 	and	r2,r3,r2
    7298:	00c00304 	movi	r3,12
    729c:	a8c00015 	stw	r3,0(r21)
    72a0:	003f5906 	br	7008 <__alt_data_end+0xff007008>
    72a4:	94c00044 	addi	r19,r18,1
    72a8:	02000044 	movi	r8,1
    72ac:	003f6006 	br	7030 <__alt_data_end+0xff007030>
    72b0:	00bfffc4 	movi	r2,-1
    72b4:	003f0306 	br	6ec4 <__alt_data_end+0xff006ec4>
    72b8:	00800304 	movi	r2,12
    72bc:	a8800015 	stw	r2,0(r21)
    72c0:	8080030b 	ldhu	r2,12(r16)
    72c4:	003f5006 	br	7008 <__alt_data_end+0xff007008>

000072c8 <_fwalk>:
    72c8:	defff704 	addi	sp,sp,-36
    72cc:	dd000415 	stw	r20,16(sp)
    72d0:	dfc00815 	stw	ra,32(sp)
    72d4:	ddc00715 	stw	r23,28(sp)
    72d8:	dd800615 	stw	r22,24(sp)
    72dc:	dd400515 	stw	r21,20(sp)
    72e0:	dcc00315 	stw	r19,12(sp)
    72e4:	dc800215 	stw	r18,8(sp)
    72e8:	dc400115 	stw	r17,4(sp)
    72ec:	dc000015 	stw	r16,0(sp)
    72f0:	2500b804 	addi	r20,r4,736
    72f4:	a0002326 	beq	r20,zero,7384 <_fwalk+0xbc>
    72f8:	282b883a 	mov	r21,r5
    72fc:	002f883a 	mov	r23,zero
    7300:	05800044 	movi	r22,1
    7304:	04ffffc4 	movi	r19,-1
    7308:	a4400117 	ldw	r17,4(r20)
    730c:	a4800217 	ldw	r18,8(r20)
    7310:	8c7fffc4 	addi	r17,r17,-1
    7314:	88000d16 	blt	r17,zero,734c <_fwalk+0x84>
    7318:	94000304 	addi	r16,r18,12
    731c:	94800384 	addi	r18,r18,14
    7320:	8080000b 	ldhu	r2,0(r16)
    7324:	8c7fffc4 	addi	r17,r17,-1
    7328:	813ffd04 	addi	r4,r16,-12
    732c:	b080042e 	bgeu	r22,r2,7340 <_fwalk+0x78>
    7330:	9080000f 	ldh	r2,0(r18)
    7334:	14c00226 	beq	r2,r19,7340 <_fwalk+0x78>
    7338:	a83ee83a 	callr	r21
    733c:	b8aeb03a 	or	r23,r23,r2
    7340:	84001a04 	addi	r16,r16,104
    7344:	94801a04 	addi	r18,r18,104
    7348:	8cfff51e 	bne	r17,r19,7320 <__alt_data_end+0xff007320>
    734c:	a5000017 	ldw	r20,0(r20)
    7350:	a03fed1e 	bne	r20,zero,7308 <__alt_data_end+0xff007308>
    7354:	b805883a 	mov	r2,r23
    7358:	dfc00817 	ldw	ra,32(sp)
    735c:	ddc00717 	ldw	r23,28(sp)
    7360:	dd800617 	ldw	r22,24(sp)
    7364:	dd400517 	ldw	r21,20(sp)
    7368:	dd000417 	ldw	r20,16(sp)
    736c:	dcc00317 	ldw	r19,12(sp)
    7370:	dc800217 	ldw	r18,8(sp)
    7374:	dc400117 	ldw	r17,4(sp)
    7378:	dc000017 	ldw	r16,0(sp)
    737c:	dec00904 	addi	sp,sp,36
    7380:	f800283a 	ret
    7384:	002f883a 	mov	r23,zero
    7388:	003ff206 	br	7354 <__alt_data_end+0xff007354>

0000738c <_fwalk_reent>:
    738c:	defff704 	addi	sp,sp,-36
    7390:	dd000415 	stw	r20,16(sp)
    7394:	dfc00815 	stw	ra,32(sp)
    7398:	ddc00715 	stw	r23,28(sp)
    739c:	dd800615 	stw	r22,24(sp)
    73a0:	dd400515 	stw	r21,20(sp)
    73a4:	dcc00315 	stw	r19,12(sp)
    73a8:	dc800215 	stw	r18,8(sp)
    73ac:	dc400115 	stw	r17,4(sp)
    73b0:	dc000015 	stw	r16,0(sp)
    73b4:	2500b804 	addi	r20,r4,736
    73b8:	a0002326 	beq	r20,zero,7448 <_fwalk_reent+0xbc>
    73bc:	282b883a 	mov	r21,r5
    73c0:	2027883a 	mov	r19,r4
    73c4:	002f883a 	mov	r23,zero
    73c8:	05800044 	movi	r22,1
    73cc:	04bfffc4 	movi	r18,-1
    73d0:	a4400117 	ldw	r17,4(r20)
    73d4:	a4000217 	ldw	r16,8(r20)
    73d8:	8c7fffc4 	addi	r17,r17,-1
    73dc:	88000c16 	blt	r17,zero,7410 <_fwalk_reent+0x84>
    73e0:	84000304 	addi	r16,r16,12
    73e4:	8080000b 	ldhu	r2,0(r16)
    73e8:	8c7fffc4 	addi	r17,r17,-1
    73ec:	817ffd04 	addi	r5,r16,-12
    73f0:	b080052e 	bgeu	r22,r2,7408 <_fwalk_reent+0x7c>
    73f4:	8080008f 	ldh	r2,2(r16)
    73f8:	9809883a 	mov	r4,r19
    73fc:	14800226 	beq	r2,r18,7408 <_fwalk_reent+0x7c>
    7400:	a83ee83a 	callr	r21
    7404:	b8aeb03a 	or	r23,r23,r2
    7408:	84001a04 	addi	r16,r16,104
    740c:	8cbff51e 	bne	r17,r18,73e4 <__alt_data_end+0xff0073e4>
    7410:	a5000017 	ldw	r20,0(r20)
    7414:	a03fee1e 	bne	r20,zero,73d0 <__alt_data_end+0xff0073d0>
    7418:	b805883a 	mov	r2,r23
    741c:	dfc00817 	ldw	ra,32(sp)
    7420:	ddc00717 	ldw	r23,28(sp)
    7424:	dd800617 	ldw	r22,24(sp)
    7428:	dd400517 	ldw	r21,20(sp)
    742c:	dd000417 	ldw	r20,16(sp)
    7430:	dcc00317 	ldw	r19,12(sp)
    7434:	dc800217 	ldw	r18,8(sp)
    7438:	dc400117 	ldw	r17,4(sp)
    743c:	dc000017 	ldw	r16,0(sp)
    7440:	dec00904 	addi	sp,sp,36
    7444:	f800283a 	ret
    7448:	002f883a 	mov	r23,zero
    744c:	003ff206 	br	7418 <__alt_data_end+0xff007418>

00007450 <_setlocale_r>:
    7450:	30001b26 	beq	r6,zero,74c0 <_setlocale_r+0x70>
    7454:	01400074 	movhi	r5,1
    7458:	defffe04 	addi	sp,sp,-8
    745c:	2941a504 	addi	r5,r5,1684
    7460:	3009883a 	mov	r4,r6
    7464:	dc000015 	stw	r16,0(sp)
    7468:	dfc00115 	stw	ra,4(sp)
    746c:	3021883a 	mov	r16,r6
    7470:	00092a80 	call	92a8 <strcmp>
    7474:	1000061e 	bne	r2,zero,7490 <_setlocale_r+0x40>
    7478:	00800074 	movhi	r2,1
    747c:	1081a404 	addi	r2,r2,1680
    7480:	dfc00117 	ldw	ra,4(sp)
    7484:	dc000017 	ldw	r16,0(sp)
    7488:	dec00204 	addi	sp,sp,8
    748c:	f800283a 	ret
    7490:	01400074 	movhi	r5,1
    7494:	2941a404 	addi	r5,r5,1680
    7498:	8009883a 	mov	r4,r16
    749c:	00092a80 	call	92a8 <strcmp>
    74a0:	103ff526 	beq	r2,zero,7478 <__alt_data_end+0xff007478>
    74a4:	01400074 	movhi	r5,1
    74a8:	29418f04 	addi	r5,r5,1596
    74ac:	8009883a 	mov	r4,r16
    74b0:	00092a80 	call	92a8 <strcmp>
    74b4:	103ff026 	beq	r2,zero,7478 <__alt_data_end+0xff007478>
    74b8:	0005883a 	mov	r2,zero
    74bc:	003ff006 	br	7480 <__alt_data_end+0xff007480>
    74c0:	00800074 	movhi	r2,1
    74c4:	1081a404 	addi	r2,r2,1680
    74c8:	f800283a 	ret

000074cc <__locale_charset>:
    74cc:	00800074 	movhi	r2,1
    74d0:	10845304 	addi	r2,r2,4428
    74d4:	f800283a 	ret

000074d8 <__locale_mb_cur_max>:
    74d8:	00800074 	movhi	r2,1
    74dc:	1088f104 	addi	r2,r2,9156
    74e0:	10800017 	ldw	r2,0(r2)
    74e4:	f800283a 	ret

000074e8 <__locale_msgcharset>:
    74e8:	00800074 	movhi	r2,1
    74ec:	10844b04 	addi	r2,r2,4396
    74f0:	f800283a 	ret

000074f4 <__locale_cjk_lang>:
    74f4:	0005883a 	mov	r2,zero
    74f8:	f800283a 	ret

000074fc <_localeconv_r>:
    74fc:	00800074 	movhi	r2,1
    7500:	10845b04 	addi	r2,r2,4460
    7504:	f800283a 	ret

00007508 <setlocale>:
    7508:	00800074 	movhi	r2,1
    750c:	1088f004 	addi	r2,r2,9152
    7510:	280d883a 	mov	r6,r5
    7514:	200b883a 	mov	r5,r4
    7518:	11000017 	ldw	r4,0(r2)
    751c:	00074501 	jmpi	7450 <_setlocale_r>

00007520 <localeconv>:
    7520:	00800074 	movhi	r2,1
    7524:	10845b04 	addi	r2,r2,4460
    7528:	f800283a 	ret

0000752c <__smakebuf_r>:
    752c:	2880030b 	ldhu	r2,12(r5)
    7530:	10c0008c 	andi	r3,r2,2
    7534:	1800411e 	bne	r3,zero,763c <__smakebuf_r+0x110>
    7538:	deffec04 	addi	sp,sp,-80
    753c:	dc000f15 	stw	r16,60(sp)
    7540:	2821883a 	mov	r16,r5
    7544:	2940038f 	ldh	r5,14(r5)
    7548:	dc401015 	stw	r17,64(sp)
    754c:	dfc01315 	stw	ra,76(sp)
    7550:	dcc01215 	stw	r19,72(sp)
    7554:	dc801115 	stw	r18,68(sp)
    7558:	2023883a 	mov	r17,r4
    755c:	28001c16 	blt	r5,zero,75d0 <__smakebuf_r+0xa4>
    7560:	d80d883a 	mov	r6,sp
    7564:	000ae500 	call	ae50 <_fstat_r>
    7568:	10001816 	blt	r2,zero,75cc <__smakebuf_r+0xa0>
    756c:	d8800117 	ldw	r2,4(sp)
    7570:	00e00014 	movui	r3,32768
    7574:	10bc000c 	andi	r2,r2,61440
    7578:	14c80020 	cmpeqi	r19,r2,8192
    757c:	10c03726 	beq	r2,r3,765c <__smakebuf_r+0x130>
    7580:	80c0030b 	ldhu	r3,12(r16)
    7584:	18c20014 	ori	r3,r3,2048
    7588:	80c0030d 	sth	r3,12(r16)
    758c:	00c80004 	movi	r3,8192
    7590:	10c0521e 	bne	r2,r3,76dc <__smakebuf_r+0x1b0>
    7594:	8140038f 	ldh	r5,14(r16)
    7598:	8809883a 	mov	r4,r17
    759c:	000aeac0 	call	aeac <_isatty_r>
    75a0:	10004c26 	beq	r2,zero,76d4 <__smakebuf_r+0x1a8>
    75a4:	8080030b 	ldhu	r2,12(r16)
    75a8:	80c010c4 	addi	r3,r16,67
    75ac:	80c00015 	stw	r3,0(r16)
    75b0:	10800054 	ori	r2,r2,1
    75b4:	8080030d 	sth	r2,12(r16)
    75b8:	00800044 	movi	r2,1
    75bc:	80c00415 	stw	r3,16(r16)
    75c0:	80800515 	stw	r2,20(r16)
    75c4:	04810004 	movi	r18,1024
    75c8:	00000706 	br	75e8 <__smakebuf_r+0xbc>
    75cc:	8080030b 	ldhu	r2,12(r16)
    75d0:	10c0200c 	andi	r3,r2,128
    75d4:	18001f1e 	bne	r3,zero,7654 <__smakebuf_r+0x128>
    75d8:	04810004 	movi	r18,1024
    75dc:	10820014 	ori	r2,r2,2048
    75e0:	8080030d 	sth	r2,12(r16)
    75e4:	0027883a 	mov	r19,zero
    75e8:	900b883a 	mov	r5,r18
    75ec:	8809883a 	mov	r4,r17
    75f0:	0001cac0 	call	1cac <_malloc_r>
    75f4:	10002c26 	beq	r2,zero,76a8 <__smakebuf_r+0x17c>
    75f8:	80c0030b 	ldhu	r3,12(r16)
    75fc:	01000034 	movhi	r4,0
    7600:	21199004 	addi	r4,r4,26176
    7604:	89000f15 	stw	r4,60(r17)
    7608:	18c02014 	ori	r3,r3,128
    760c:	80c0030d 	sth	r3,12(r16)
    7610:	80800015 	stw	r2,0(r16)
    7614:	80800415 	stw	r2,16(r16)
    7618:	84800515 	stw	r18,20(r16)
    761c:	98001a1e 	bne	r19,zero,7688 <__smakebuf_r+0x15c>
    7620:	dfc01317 	ldw	ra,76(sp)
    7624:	dcc01217 	ldw	r19,72(sp)
    7628:	dc801117 	ldw	r18,68(sp)
    762c:	dc401017 	ldw	r17,64(sp)
    7630:	dc000f17 	ldw	r16,60(sp)
    7634:	dec01404 	addi	sp,sp,80
    7638:	f800283a 	ret
    763c:	288010c4 	addi	r2,r5,67
    7640:	28800015 	stw	r2,0(r5)
    7644:	28800415 	stw	r2,16(r5)
    7648:	00800044 	movi	r2,1
    764c:	28800515 	stw	r2,20(r5)
    7650:	f800283a 	ret
    7654:	04801004 	movi	r18,64
    7658:	003fe006 	br	75dc <__alt_data_end+0xff0075dc>
    765c:	81000a17 	ldw	r4,40(r16)
    7660:	00c00074 	movhi	r3,1
    7664:	18e49104 	addi	r3,r3,-28092
    7668:	20ffc51e 	bne	r4,r3,7580 <__alt_data_end+0xff007580>
    766c:	8080030b 	ldhu	r2,12(r16)
    7670:	04810004 	movi	r18,1024
    7674:	84801315 	stw	r18,76(r16)
    7678:	1484b03a 	or	r2,r2,r18
    767c:	8080030d 	sth	r2,12(r16)
    7680:	0027883a 	mov	r19,zero
    7684:	003fd806 	br	75e8 <__alt_data_end+0xff0075e8>
    7688:	8140038f 	ldh	r5,14(r16)
    768c:	8809883a 	mov	r4,r17
    7690:	000aeac0 	call	aeac <_isatty_r>
    7694:	103fe226 	beq	r2,zero,7620 <__alt_data_end+0xff007620>
    7698:	8080030b 	ldhu	r2,12(r16)
    769c:	10800054 	ori	r2,r2,1
    76a0:	8080030d 	sth	r2,12(r16)
    76a4:	003fde06 	br	7620 <__alt_data_end+0xff007620>
    76a8:	8080030b 	ldhu	r2,12(r16)
    76ac:	10c0800c 	andi	r3,r2,512
    76b0:	183fdb1e 	bne	r3,zero,7620 <__alt_data_end+0xff007620>
    76b4:	10800094 	ori	r2,r2,2
    76b8:	80c010c4 	addi	r3,r16,67
    76bc:	8080030d 	sth	r2,12(r16)
    76c0:	00800044 	movi	r2,1
    76c4:	80c00015 	stw	r3,0(r16)
    76c8:	80c00415 	stw	r3,16(r16)
    76cc:	80800515 	stw	r2,20(r16)
    76d0:	003fd306 	br	7620 <__alt_data_end+0xff007620>
    76d4:	04810004 	movi	r18,1024
    76d8:	003fc306 	br	75e8 <__alt_data_end+0xff0075e8>
    76dc:	0027883a 	mov	r19,zero
    76e0:	04810004 	movi	r18,1024
    76e4:	003fc006 	br	75e8 <__alt_data_end+0xff0075e8>

000076e8 <memchr>:
    76e8:	208000cc 	andi	r2,r4,3
    76ec:	280f883a 	mov	r7,r5
    76f0:	10003426 	beq	r2,zero,77c4 <memchr+0xdc>
    76f4:	30bfffc4 	addi	r2,r6,-1
    76f8:	30001a26 	beq	r6,zero,7764 <memchr+0x7c>
    76fc:	20c00003 	ldbu	r3,0(r4)
    7700:	29803fcc 	andi	r6,r5,255
    7704:	30c0051e 	bne	r6,r3,771c <memchr+0x34>
    7708:	00001806 	br	776c <memchr+0x84>
    770c:	10001526 	beq	r2,zero,7764 <memchr+0x7c>
    7710:	20c00003 	ldbu	r3,0(r4)
    7714:	10bfffc4 	addi	r2,r2,-1
    7718:	30c01426 	beq	r6,r3,776c <memchr+0x84>
    771c:	21000044 	addi	r4,r4,1
    7720:	20c000cc 	andi	r3,r4,3
    7724:	183ff91e 	bne	r3,zero,770c <__alt_data_end+0xff00770c>
    7728:	020000c4 	movi	r8,3
    772c:	40801136 	bltu	r8,r2,7774 <memchr+0x8c>
    7730:	10000c26 	beq	r2,zero,7764 <memchr+0x7c>
    7734:	20c00003 	ldbu	r3,0(r4)
    7738:	29403fcc 	andi	r5,r5,255
    773c:	28c00b26 	beq	r5,r3,776c <memchr+0x84>
    7740:	20c00044 	addi	r3,r4,1
    7744:	39803fcc 	andi	r6,r7,255
    7748:	2089883a 	add	r4,r4,r2
    774c:	00000306 	br	775c <memchr+0x74>
    7750:	18c00044 	addi	r3,r3,1
    7754:	197fffc3 	ldbu	r5,-1(r3)
    7758:	31400526 	beq	r6,r5,7770 <memchr+0x88>
    775c:	1805883a 	mov	r2,r3
    7760:	20fffb1e 	bne	r4,r3,7750 <__alt_data_end+0xff007750>
    7764:	0005883a 	mov	r2,zero
    7768:	f800283a 	ret
    776c:	2005883a 	mov	r2,r4
    7770:	f800283a 	ret
    7774:	28c03fcc 	andi	r3,r5,255
    7778:	1812923a 	slli	r9,r3,8
    777c:	02ffbff4 	movhi	r11,65279
    7780:	02a02074 	movhi	r10,32897
    7784:	48d2b03a 	or	r9,r9,r3
    7788:	4806943a 	slli	r3,r9,16
    778c:	5affbfc4 	addi	r11,r11,-257
    7790:	52a02004 	addi	r10,r10,-32640
    7794:	48d2b03a 	or	r9,r9,r3
    7798:	20c00017 	ldw	r3,0(r4)
    779c:	48c6f03a 	xor	r3,r9,r3
    77a0:	1acd883a 	add	r6,r3,r11
    77a4:	00c6303a 	nor	r3,zero,r3
    77a8:	30c6703a 	and	r3,r6,r3
    77ac:	1a86703a 	and	r3,r3,r10
    77b0:	183fe01e 	bne	r3,zero,7734 <__alt_data_end+0xff007734>
    77b4:	10bfff04 	addi	r2,r2,-4
    77b8:	21000104 	addi	r4,r4,4
    77bc:	40bff636 	bltu	r8,r2,7798 <__alt_data_end+0xff007798>
    77c0:	003fdb06 	br	7730 <__alt_data_end+0xff007730>
    77c4:	3005883a 	mov	r2,r6
    77c8:	003fd706 	br	7728 <__alt_data_end+0xff007728>

000077cc <memcpy>:
    77cc:	defffd04 	addi	sp,sp,-12
    77d0:	dfc00215 	stw	ra,8(sp)
    77d4:	dc400115 	stw	r17,4(sp)
    77d8:	dc000015 	stw	r16,0(sp)
    77dc:	00c003c4 	movi	r3,15
    77e0:	2005883a 	mov	r2,r4
    77e4:	1980452e 	bgeu	r3,r6,78fc <memcpy+0x130>
    77e8:	2906b03a 	or	r3,r5,r4
    77ec:	18c000cc 	andi	r3,r3,3
    77f0:	1800441e 	bne	r3,zero,7904 <memcpy+0x138>
    77f4:	347ffc04 	addi	r17,r6,-16
    77f8:	8822d13a 	srli	r17,r17,4
    77fc:	28c00104 	addi	r3,r5,4
    7800:	23400104 	addi	r13,r4,4
    7804:	8820913a 	slli	r16,r17,4
    7808:	2b000204 	addi	r12,r5,8
    780c:	22c00204 	addi	r11,r4,8
    7810:	84000504 	addi	r16,r16,20
    7814:	2a800304 	addi	r10,r5,12
    7818:	22400304 	addi	r9,r4,12
    781c:	2c21883a 	add	r16,r5,r16
    7820:	2811883a 	mov	r8,r5
    7824:	200f883a 	mov	r7,r4
    7828:	41000017 	ldw	r4,0(r8)
    782c:	1fc00017 	ldw	ra,0(r3)
    7830:	63c00017 	ldw	r15,0(r12)
    7834:	39000015 	stw	r4,0(r7)
    7838:	53800017 	ldw	r14,0(r10)
    783c:	6fc00015 	stw	ra,0(r13)
    7840:	5bc00015 	stw	r15,0(r11)
    7844:	4b800015 	stw	r14,0(r9)
    7848:	18c00404 	addi	r3,r3,16
    784c:	39c00404 	addi	r7,r7,16
    7850:	42000404 	addi	r8,r8,16
    7854:	6b400404 	addi	r13,r13,16
    7858:	63000404 	addi	r12,r12,16
    785c:	5ac00404 	addi	r11,r11,16
    7860:	52800404 	addi	r10,r10,16
    7864:	4a400404 	addi	r9,r9,16
    7868:	1c3fef1e 	bne	r3,r16,7828 <__alt_data_end+0xff007828>
    786c:	89c00044 	addi	r7,r17,1
    7870:	380e913a 	slli	r7,r7,4
    7874:	310003cc 	andi	r4,r6,15
    7878:	02c000c4 	movi	r11,3
    787c:	11c7883a 	add	r3,r2,r7
    7880:	29cb883a 	add	r5,r5,r7
    7884:	5900212e 	bgeu	r11,r4,790c <memcpy+0x140>
    7888:	1813883a 	mov	r9,r3
    788c:	2811883a 	mov	r8,r5
    7890:	200f883a 	mov	r7,r4
    7894:	42800017 	ldw	r10,0(r8)
    7898:	4a400104 	addi	r9,r9,4
    789c:	39ffff04 	addi	r7,r7,-4
    78a0:	4abfff15 	stw	r10,-4(r9)
    78a4:	42000104 	addi	r8,r8,4
    78a8:	59fffa36 	bltu	r11,r7,7894 <__alt_data_end+0xff007894>
    78ac:	213fff04 	addi	r4,r4,-4
    78b0:	2008d0ba 	srli	r4,r4,2
    78b4:	318000cc 	andi	r6,r6,3
    78b8:	21000044 	addi	r4,r4,1
    78bc:	2109883a 	add	r4,r4,r4
    78c0:	2109883a 	add	r4,r4,r4
    78c4:	1907883a 	add	r3,r3,r4
    78c8:	290b883a 	add	r5,r5,r4
    78cc:	30000626 	beq	r6,zero,78e8 <memcpy+0x11c>
    78d0:	198d883a 	add	r6,r3,r6
    78d4:	29c00003 	ldbu	r7,0(r5)
    78d8:	18c00044 	addi	r3,r3,1
    78dc:	29400044 	addi	r5,r5,1
    78e0:	19ffffc5 	stb	r7,-1(r3)
    78e4:	19bffb1e 	bne	r3,r6,78d4 <__alt_data_end+0xff0078d4>
    78e8:	dfc00217 	ldw	ra,8(sp)
    78ec:	dc400117 	ldw	r17,4(sp)
    78f0:	dc000017 	ldw	r16,0(sp)
    78f4:	dec00304 	addi	sp,sp,12
    78f8:	f800283a 	ret
    78fc:	2007883a 	mov	r3,r4
    7900:	003ff206 	br	78cc <__alt_data_end+0xff0078cc>
    7904:	2007883a 	mov	r3,r4
    7908:	003ff106 	br	78d0 <__alt_data_end+0xff0078d0>
    790c:	200d883a 	mov	r6,r4
    7910:	003fee06 	br	78cc <__alt_data_end+0xff0078cc>

00007914 <memmove>:
    7914:	2005883a 	mov	r2,r4
    7918:	29000b2e 	bgeu	r5,r4,7948 <memmove+0x34>
    791c:	298f883a 	add	r7,r5,r6
    7920:	21c0092e 	bgeu	r4,r7,7948 <memmove+0x34>
    7924:	2187883a 	add	r3,r4,r6
    7928:	198bc83a 	sub	r5,r3,r6
    792c:	30004826 	beq	r6,zero,7a50 <memmove+0x13c>
    7930:	39ffffc4 	addi	r7,r7,-1
    7934:	39000003 	ldbu	r4,0(r7)
    7938:	18ffffc4 	addi	r3,r3,-1
    793c:	19000005 	stb	r4,0(r3)
    7940:	28fffb1e 	bne	r5,r3,7930 <__alt_data_end+0xff007930>
    7944:	f800283a 	ret
    7948:	00c003c4 	movi	r3,15
    794c:	1980412e 	bgeu	r3,r6,7a54 <memmove+0x140>
    7950:	2886b03a 	or	r3,r5,r2
    7954:	18c000cc 	andi	r3,r3,3
    7958:	1800401e 	bne	r3,zero,7a5c <memmove+0x148>
    795c:	33fffc04 	addi	r15,r6,-16
    7960:	781ed13a 	srli	r15,r15,4
    7964:	28c00104 	addi	r3,r5,4
    7968:	13400104 	addi	r13,r2,4
    796c:	781c913a 	slli	r14,r15,4
    7970:	2b000204 	addi	r12,r5,8
    7974:	12c00204 	addi	r11,r2,8
    7978:	73800504 	addi	r14,r14,20
    797c:	2a800304 	addi	r10,r5,12
    7980:	12400304 	addi	r9,r2,12
    7984:	2b9d883a 	add	r14,r5,r14
    7988:	2811883a 	mov	r8,r5
    798c:	100f883a 	mov	r7,r2
    7990:	41000017 	ldw	r4,0(r8)
    7994:	39c00404 	addi	r7,r7,16
    7998:	18c00404 	addi	r3,r3,16
    799c:	393ffc15 	stw	r4,-16(r7)
    79a0:	193ffc17 	ldw	r4,-16(r3)
    79a4:	6b400404 	addi	r13,r13,16
    79a8:	5ac00404 	addi	r11,r11,16
    79ac:	693ffc15 	stw	r4,-16(r13)
    79b0:	61000017 	ldw	r4,0(r12)
    79b4:	4a400404 	addi	r9,r9,16
    79b8:	42000404 	addi	r8,r8,16
    79bc:	593ffc15 	stw	r4,-16(r11)
    79c0:	51000017 	ldw	r4,0(r10)
    79c4:	63000404 	addi	r12,r12,16
    79c8:	52800404 	addi	r10,r10,16
    79cc:	493ffc15 	stw	r4,-16(r9)
    79d0:	1bbfef1e 	bne	r3,r14,7990 <__alt_data_end+0xff007990>
    79d4:	79000044 	addi	r4,r15,1
    79d8:	2008913a 	slli	r4,r4,4
    79dc:	328003cc 	andi	r10,r6,15
    79e0:	02c000c4 	movi	r11,3
    79e4:	1107883a 	add	r3,r2,r4
    79e8:	290b883a 	add	r5,r5,r4
    79ec:	5a801e2e 	bgeu	r11,r10,7a68 <memmove+0x154>
    79f0:	1813883a 	mov	r9,r3
    79f4:	2811883a 	mov	r8,r5
    79f8:	500f883a 	mov	r7,r10
    79fc:	41000017 	ldw	r4,0(r8)
    7a00:	4a400104 	addi	r9,r9,4
    7a04:	39ffff04 	addi	r7,r7,-4
    7a08:	493fff15 	stw	r4,-4(r9)
    7a0c:	42000104 	addi	r8,r8,4
    7a10:	59fffa36 	bltu	r11,r7,79fc <__alt_data_end+0xff0079fc>
    7a14:	513fff04 	addi	r4,r10,-4
    7a18:	2008d0ba 	srli	r4,r4,2
    7a1c:	318000cc 	andi	r6,r6,3
    7a20:	21000044 	addi	r4,r4,1
    7a24:	2109883a 	add	r4,r4,r4
    7a28:	2109883a 	add	r4,r4,r4
    7a2c:	1907883a 	add	r3,r3,r4
    7a30:	290b883a 	add	r5,r5,r4
    7a34:	30000b26 	beq	r6,zero,7a64 <memmove+0x150>
    7a38:	198d883a 	add	r6,r3,r6
    7a3c:	29c00003 	ldbu	r7,0(r5)
    7a40:	18c00044 	addi	r3,r3,1
    7a44:	29400044 	addi	r5,r5,1
    7a48:	19ffffc5 	stb	r7,-1(r3)
    7a4c:	19bffb1e 	bne	r3,r6,7a3c <__alt_data_end+0xff007a3c>
    7a50:	f800283a 	ret
    7a54:	1007883a 	mov	r3,r2
    7a58:	003ff606 	br	7a34 <__alt_data_end+0xff007a34>
    7a5c:	1007883a 	mov	r3,r2
    7a60:	003ff506 	br	7a38 <__alt_data_end+0xff007a38>
    7a64:	f800283a 	ret
    7a68:	500d883a 	mov	r6,r10
    7a6c:	003ff106 	br	7a34 <__alt_data_end+0xff007a34>

00007a70 <memset>:
    7a70:	20c000cc 	andi	r3,r4,3
    7a74:	2005883a 	mov	r2,r4
    7a78:	18004426 	beq	r3,zero,7b8c <memset+0x11c>
    7a7c:	31ffffc4 	addi	r7,r6,-1
    7a80:	30004026 	beq	r6,zero,7b84 <memset+0x114>
    7a84:	2813883a 	mov	r9,r5
    7a88:	200d883a 	mov	r6,r4
    7a8c:	2007883a 	mov	r3,r4
    7a90:	00000406 	br	7aa4 <memset+0x34>
    7a94:	3a3fffc4 	addi	r8,r7,-1
    7a98:	31800044 	addi	r6,r6,1
    7a9c:	38003926 	beq	r7,zero,7b84 <memset+0x114>
    7aa0:	400f883a 	mov	r7,r8
    7aa4:	18c00044 	addi	r3,r3,1
    7aa8:	32400005 	stb	r9,0(r6)
    7aac:	1a0000cc 	andi	r8,r3,3
    7ab0:	403ff81e 	bne	r8,zero,7a94 <__alt_data_end+0xff007a94>
    7ab4:	010000c4 	movi	r4,3
    7ab8:	21c02d2e 	bgeu	r4,r7,7b70 <memset+0x100>
    7abc:	29003fcc 	andi	r4,r5,255
    7ac0:	200c923a 	slli	r6,r4,8
    7ac4:	3108b03a 	or	r4,r6,r4
    7ac8:	200c943a 	slli	r6,r4,16
    7acc:	218cb03a 	or	r6,r4,r6
    7ad0:	010003c4 	movi	r4,15
    7ad4:	21c0182e 	bgeu	r4,r7,7b38 <memset+0xc8>
    7ad8:	3b3ffc04 	addi	r12,r7,-16
    7adc:	6018d13a 	srli	r12,r12,4
    7ae0:	1a000104 	addi	r8,r3,4
    7ae4:	1ac00204 	addi	r11,r3,8
    7ae8:	6008913a 	slli	r4,r12,4
    7aec:	1a800304 	addi	r10,r3,12
    7af0:	1813883a 	mov	r9,r3
    7af4:	21000504 	addi	r4,r4,20
    7af8:	1909883a 	add	r4,r3,r4
    7afc:	49800015 	stw	r6,0(r9)
    7b00:	41800015 	stw	r6,0(r8)
    7b04:	59800015 	stw	r6,0(r11)
    7b08:	51800015 	stw	r6,0(r10)
    7b0c:	42000404 	addi	r8,r8,16
    7b10:	4a400404 	addi	r9,r9,16
    7b14:	5ac00404 	addi	r11,r11,16
    7b18:	52800404 	addi	r10,r10,16
    7b1c:	413ff71e 	bne	r8,r4,7afc <__alt_data_end+0xff007afc>
    7b20:	63000044 	addi	r12,r12,1
    7b24:	6018913a 	slli	r12,r12,4
    7b28:	39c003cc 	andi	r7,r7,15
    7b2c:	010000c4 	movi	r4,3
    7b30:	1b07883a 	add	r3,r3,r12
    7b34:	21c00e2e 	bgeu	r4,r7,7b70 <memset+0x100>
    7b38:	1813883a 	mov	r9,r3
    7b3c:	3811883a 	mov	r8,r7
    7b40:	010000c4 	movi	r4,3
    7b44:	49800015 	stw	r6,0(r9)
    7b48:	423fff04 	addi	r8,r8,-4
    7b4c:	4a400104 	addi	r9,r9,4
    7b50:	223ffc36 	bltu	r4,r8,7b44 <__alt_data_end+0xff007b44>
    7b54:	393fff04 	addi	r4,r7,-4
    7b58:	2008d0ba 	srli	r4,r4,2
    7b5c:	39c000cc 	andi	r7,r7,3
    7b60:	21000044 	addi	r4,r4,1
    7b64:	2109883a 	add	r4,r4,r4
    7b68:	2109883a 	add	r4,r4,r4
    7b6c:	1907883a 	add	r3,r3,r4
    7b70:	38000526 	beq	r7,zero,7b88 <memset+0x118>
    7b74:	19cf883a 	add	r7,r3,r7
    7b78:	19400005 	stb	r5,0(r3)
    7b7c:	18c00044 	addi	r3,r3,1
    7b80:	38fffd1e 	bne	r7,r3,7b78 <__alt_data_end+0xff007b78>
    7b84:	f800283a 	ret
    7b88:	f800283a 	ret
    7b8c:	2007883a 	mov	r3,r4
    7b90:	300f883a 	mov	r7,r6
    7b94:	003fc706 	br	7ab4 <__alt_data_end+0xff007ab4>

00007b98 <_Balloc>:
    7b98:	20801317 	ldw	r2,76(r4)
    7b9c:	defffc04 	addi	sp,sp,-16
    7ba0:	dc400115 	stw	r17,4(sp)
    7ba4:	dc000015 	stw	r16,0(sp)
    7ba8:	dfc00315 	stw	ra,12(sp)
    7bac:	dc800215 	stw	r18,8(sp)
    7bb0:	2023883a 	mov	r17,r4
    7bb4:	2821883a 	mov	r16,r5
    7bb8:	10000f26 	beq	r2,zero,7bf8 <_Balloc+0x60>
    7bbc:	8407883a 	add	r3,r16,r16
    7bc0:	18c7883a 	add	r3,r3,r3
    7bc4:	10c7883a 	add	r3,r2,r3
    7bc8:	18800017 	ldw	r2,0(r3)
    7bcc:	10001126 	beq	r2,zero,7c14 <_Balloc+0x7c>
    7bd0:	11000017 	ldw	r4,0(r2)
    7bd4:	19000015 	stw	r4,0(r3)
    7bd8:	10000415 	stw	zero,16(r2)
    7bdc:	10000315 	stw	zero,12(r2)
    7be0:	dfc00317 	ldw	ra,12(sp)
    7be4:	dc800217 	ldw	r18,8(sp)
    7be8:	dc400117 	ldw	r17,4(sp)
    7bec:	dc000017 	ldw	r16,0(sp)
    7bf0:	dec00404 	addi	sp,sp,16
    7bf4:	f800283a 	ret
    7bf8:	01800844 	movi	r6,33
    7bfc:	01400104 	movi	r5,4
    7c00:	000aa800 	call	aa80 <_calloc_r>
    7c04:	88801315 	stw	r2,76(r17)
    7c08:	103fec1e 	bne	r2,zero,7bbc <__alt_data_end+0xff007bbc>
    7c0c:	0005883a 	mov	r2,zero
    7c10:	003ff306 	br	7be0 <__alt_data_end+0xff007be0>
    7c14:	01400044 	movi	r5,1
    7c18:	2c24983a 	sll	r18,r5,r16
    7c1c:	8809883a 	mov	r4,r17
    7c20:	91800144 	addi	r6,r18,5
    7c24:	318d883a 	add	r6,r6,r6
    7c28:	318d883a 	add	r6,r6,r6
    7c2c:	000aa800 	call	aa80 <_calloc_r>
    7c30:	103ff626 	beq	r2,zero,7c0c <__alt_data_end+0xff007c0c>
    7c34:	14000115 	stw	r16,4(r2)
    7c38:	14800215 	stw	r18,8(r2)
    7c3c:	003fe606 	br	7bd8 <__alt_data_end+0xff007bd8>

00007c40 <_Bfree>:
    7c40:	28000826 	beq	r5,zero,7c64 <_Bfree+0x24>
    7c44:	28c00117 	ldw	r3,4(r5)
    7c48:	20801317 	ldw	r2,76(r4)
    7c4c:	18c7883a 	add	r3,r3,r3
    7c50:	18c7883a 	add	r3,r3,r3
    7c54:	10c5883a 	add	r2,r2,r3
    7c58:	10c00017 	ldw	r3,0(r2)
    7c5c:	28c00015 	stw	r3,0(r5)
    7c60:	11400015 	stw	r5,0(r2)
    7c64:	f800283a 	ret

00007c68 <__multadd>:
    7c68:	defffa04 	addi	sp,sp,-24
    7c6c:	dc800315 	stw	r18,12(sp)
    7c70:	dc400215 	stw	r17,8(sp)
    7c74:	dc000115 	stw	r16,4(sp)
    7c78:	2823883a 	mov	r17,r5
    7c7c:	2c000417 	ldw	r16,16(r5)
    7c80:	dfc00515 	stw	ra,20(sp)
    7c84:	dcc00415 	stw	r19,16(sp)
    7c88:	2025883a 	mov	r18,r4
    7c8c:	29400504 	addi	r5,r5,20
    7c90:	0011883a 	mov	r8,zero
    7c94:	28c00017 	ldw	r3,0(r5)
    7c98:	29400104 	addi	r5,r5,4
    7c9c:	42000044 	addi	r8,r8,1
    7ca0:	18bfffcc 	andi	r2,r3,65535
    7ca4:	1185383a 	mul	r2,r2,r6
    7ca8:	1806d43a 	srli	r3,r3,16
    7cac:	11cf883a 	add	r7,r2,r7
    7cb0:	3808d43a 	srli	r4,r7,16
    7cb4:	1987383a 	mul	r3,r3,r6
    7cb8:	38bfffcc 	andi	r2,r7,65535
    7cbc:	1907883a 	add	r3,r3,r4
    7cc0:	1808943a 	slli	r4,r3,16
    7cc4:	180ed43a 	srli	r7,r3,16
    7cc8:	2085883a 	add	r2,r4,r2
    7ccc:	28bfff15 	stw	r2,-4(r5)
    7cd0:	443ff016 	blt	r8,r16,7c94 <__alt_data_end+0xff007c94>
    7cd4:	38000926 	beq	r7,zero,7cfc <__multadd+0x94>
    7cd8:	88800217 	ldw	r2,8(r17)
    7cdc:	80800f0e 	bge	r16,r2,7d1c <__multadd+0xb4>
    7ce0:	80800144 	addi	r2,r16,5
    7ce4:	1085883a 	add	r2,r2,r2
    7ce8:	1085883a 	add	r2,r2,r2
    7cec:	8885883a 	add	r2,r17,r2
    7cf0:	11c00015 	stw	r7,0(r2)
    7cf4:	84000044 	addi	r16,r16,1
    7cf8:	8c000415 	stw	r16,16(r17)
    7cfc:	8805883a 	mov	r2,r17
    7d00:	dfc00517 	ldw	ra,20(sp)
    7d04:	dcc00417 	ldw	r19,16(sp)
    7d08:	dc800317 	ldw	r18,12(sp)
    7d0c:	dc400217 	ldw	r17,8(sp)
    7d10:	dc000117 	ldw	r16,4(sp)
    7d14:	dec00604 	addi	sp,sp,24
    7d18:	f800283a 	ret
    7d1c:	89400117 	ldw	r5,4(r17)
    7d20:	9009883a 	mov	r4,r18
    7d24:	d9c00015 	stw	r7,0(sp)
    7d28:	29400044 	addi	r5,r5,1
    7d2c:	0007b980 	call	7b98 <_Balloc>
    7d30:	89800417 	ldw	r6,16(r17)
    7d34:	89400304 	addi	r5,r17,12
    7d38:	11000304 	addi	r4,r2,12
    7d3c:	31800084 	addi	r6,r6,2
    7d40:	318d883a 	add	r6,r6,r6
    7d44:	318d883a 	add	r6,r6,r6
    7d48:	1027883a 	mov	r19,r2
    7d4c:	00077cc0 	call	77cc <memcpy>
    7d50:	d9c00017 	ldw	r7,0(sp)
    7d54:	88000a26 	beq	r17,zero,7d80 <__multadd+0x118>
    7d58:	88c00117 	ldw	r3,4(r17)
    7d5c:	90801317 	ldw	r2,76(r18)
    7d60:	18c7883a 	add	r3,r3,r3
    7d64:	18c7883a 	add	r3,r3,r3
    7d68:	10c5883a 	add	r2,r2,r3
    7d6c:	10c00017 	ldw	r3,0(r2)
    7d70:	88c00015 	stw	r3,0(r17)
    7d74:	14400015 	stw	r17,0(r2)
    7d78:	9823883a 	mov	r17,r19
    7d7c:	003fd806 	br	7ce0 <__alt_data_end+0xff007ce0>
    7d80:	9823883a 	mov	r17,r19
    7d84:	003fd606 	br	7ce0 <__alt_data_end+0xff007ce0>

00007d88 <__s2b>:
    7d88:	defff904 	addi	sp,sp,-28
    7d8c:	dc400115 	stw	r17,4(sp)
    7d90:	dc000015 	stw	r16,0(sp)
    7d94:	2023883a 	mov	r17,r4
    7d98:	2821883a 	mov	r16,r5
    7d9c:	39000204 	addi	r4,r7,8
    7da0:	01400244 	movi	r5,9
    7da4:	dcc00315 	stw	r19,12(sp)
    7da8:	dc800215 	stw	r18,8(sp)
    7dac:	dfc00615 	stw	ra,24(sp)
    7db0:	dd400515 	stw	r21,20(sp)
    7db4:	dd000415 	stw	r20,16(sp)
    7db8:	3825883a 	mov	r18,r7
    7dbc:	3027883a 	mov	r19,r6
    7dc0:	000bdb00 	call	bdb0 <__divsi3>
    7dc4:	00c00044 	movi	r3,1
    7dc8:	000b883a 	mov	r5,zero
    7dcc:	1880030e 	bge	r3,r2,7ddc <__s2b+0x54>
    7dd0:	18c7883a 	add	r3,r3,r3
    7dd4:	29400044 	addi	r5,r5,1
    7dd8:	18bffd16 	blt	r3,r2,7dd0 <__alt_data_end+0xff007dd0>
    7ddc:	8809883a 	mov	r4,r17
    7de0:	0007b980 	call	7b98 <_Balloc>
    7de4:	d8c00717 	ldw	r3,28(sp)
    7de8:	10c00515 	stw	r3,20(r2)
    7dec:	00c00044 	movi	r3,1
    7df0:	10c00415 	stw	r3,16(r2)
    7df4:	00c00244 	movi	r3,9
    7df8:	1cc0210e 	bge	r3,r19,7e80 <__s2b+0xf8>
    7dfc:	80eb883a 	add	r21,r16,r3
    7e00:	a829883a 	mov	r20,r21
    7e04:	84e1883a 	add	r16,r16,r19
    7e08:	a1c00007 	ldb	r7,0(r20)
    7e0c:	01800284 	movi	r6,10
    7e10:	a5000044 	addi	r20,r20,1
    7e14:	100b883a 	mov	r5,r2
    7e18:	39fff404 	addi	r7,r7,-48
    7e1c:	8809883a 	mov	r4,r17
    7e20:	0007c680 	call	7c68 <__multadd>
    7e24:	a43ff81e 	bne	r20,r16,7e08 <__alt_data_end+0xff007e08>
    7e28:	ace1883a 	add	r16,r21,r19
    7e2c:	843ffe04 	addi	r16,r16,-8
    7e30:	9c800a0e 	bge	r19,r18,7e5c <__s2b+0xd4>
    7e34:	94e5c83a 	sub	r18,r18,r19
    7e38:	84a5883a 	add	r18,r16,r18
    7e3c:	81c00007 	ldb	r7,0(r16)
    7e40:	01800284 	movi	r6,10
    7e44:	84000044 	addi	r16,r16,1
    7e48:	100b883a 	mov	r5,r2
    7e4c:	39fff404 	addi	r7,r7,-48
    7e50:	8809883a 	mov	r4,r17
    7e54:	0007c680 	call	7c68 <__multadd>
    7e58:	84bff81e 	bne	r16,r18,7e3c <__alt_data_end+0xff007e3c>
    7e5c:	dfc00617 	ldw	ra,24(sp)
    7e60:	dd400517 	ldw	r21,20(sp)
    7e64:	dd000417 	ldw	r20,16(sp)
    7e68:	dcc00317 	ldw	r19,12(sp)
    7e6c:	dc800217 	ldw	r18,8(sp)
    7e70:	dc400117 	ldw	r17,4(sp)
    7e74:	dc000017 	ldw	r16,0(sp)
    7e78:	dec00704 	addi	sp,sp,28
    7e7c:	f800283a 	ret
    7e80:	84000284 	addi	r16,r16,10
    7e84:	1827883a 	mov	r19,r3
    7e88:	003fe906 	br	7e30 <__alt_data_end+0xff007e30>

00007e8c <__hi0bits>:
    7e8c:	20bfffec 	andhi	r2,r4,65535
    7e90:	1000141e 	bne	r2,zero,7ee4 <__hi0bits+0x58>
    7e94:	2008943a 	slli	r4,r4,16
    7e98:	00800404 	movi	r2,16
    7e9c:	20ffc02c 	andhi	r3,r4,65280
    7ea0:	1800021e 	bne	r3,zero,7eac <__hi0bits+0x20>
    7ea4:	2008923a 	slli	r4,r4,8
    7ea8:	10800204 	addi	r2,r2,8
    7eac:	20fc002c 	andhi	r3,r4,61440
    7eb0:	1800021e 	bne	r3,zero,7ebc <__hi0bits+0x30>
    7eb4:	2008913a 	slli	r4,r4,4
    7eb8:	10800104 	addi	r2,r2,4
    7ebc:	20f0002c 	andhi	r3,r4,49152
    7ec0:	1800031e 	bne	r3,zero,7ed0 <__hi0bits+0x44>
    7ec4:	2109883a 	add	r4,r4,r4
    7ec8:	10800084 	addi	r2,r2,2
    7ecc:	2109883a 	add	r4,r4,r4
    7ed0:	20000316 	blt	r4,zero,7ee0 <__hi0bits+0x54>
    7ed4:	2110002c 	andhi	r4,r4,16384
    7ed8:	2000041e 	bne	r4,zero,7eec <__hi0bits+0x60>
    7edc:	00800804 	movi	r2,32
    7ee0:	f800283a 	ret
    7ee4:	0005883a 	mov	r2,zero
    7ee8:	003fec06 	br	7e9c <__alt_data_end+0xff007e9c>
    7eec:	10800044 	addi	r2,r2,1
    7ef0:	f800283a 	ret

00007ef4 <__lo0bits>:
    7ef4:	20c00017 	ldw	r3,0(r4)
    7ef8:	188001cc 	andi	r2,r3,7
    7efc:	10000826 	beq	r2,zero,7f20 <__lo0bits+0x2c>
    7f00:	1880004c 	andi	r2,r3,1
    7f04:	1000211e 	bne	r2,zero,7f8c <__lo0bits+0x98>
    7f08:	1880008c 	andi	r2,r3,2
    7f0c:	1000211e 	bne	r2,zero,7f94 <__lo0bits+0xa0>
    7f10:	1806d0ba 	srli	r3,r3,2
    7f14:	00800084 	movi	r2,2
    7f18:	20c00015 	stw	r3,0(r4)
    7f1c:	f800283a 	ret
    7f20:	18bfffcc 	andi	r2,r3,65535
    7f24:	10001326 	beq	r2,zero,7f74 <__lo0bits+0x80>
    7f28:	0005883a 	mov	r2,zero
    7f2c:	19403fcc 	andi	r5,r3,255
    7f30:	2800021e 	bne	r5,zero,7f3c <__lo0bits+0x48>
    7f34:	1806d23a 	srli	r3,r3,8
    7f38:	10800204 	addi	r2,r2,8
    7f3c:	194003cc 	andi	r5,r3,15
    7f40:	2800021e 	bne	r5,zero,7f4c <__lo0bits+0x58>
    7f44:	1806d13a 	srli	r3,r3,4
    7f48:	10800104 	addi	r2,r2,4
    7f4c:	194000cc 	andi	r5,r3,3
    7f50:	2800021e 	bne	r5,zero,7f5c <__lo0bits+0x68>
    7f54:	1806d0ba 	srli	r3,r3,2
    7f58:	10800084 	addi	r2,r2,2
    7f5c:	1940004c 	andi	r5,r3,1
    7f60:	2800081e 	bne	r5,zero,7f84 <__lo0bits+0x90>
    7f64:	1806d07a 	srli	r3,r3,1
    7f68:	1800051e 	bne	r3,zero,7f80 <__lo0bits+0x8c>
    7f6c:	00800804 	movi	r2,32
    7f70:	f800283a 	ret
    7f74:	1806d43a 	srli	r3,r3,16
    7f78:	00800404 	movi	r2,16
    7f7c:	003feb06 	br	7f2c <__alt_data_end+0xff007f2c>
    7f80:	10800044 	addi	r2,r2,1
    7f84:	20c00015 	stw	r3,0(r4)
    7f88:	f800283a 	ret
    7f8c:	0005883a 	mov	r2,zero
    7f90:	f800283a 	ret
    7f94:	1806d07a 	srli	r3,r3,1
    7f98:	00800044 	movi	r2,1
    7f9c:	20c00015 	stw	r3,0(r4)
    7fa0:	f800283a 	ret

00007fa4 <__i2b>:
    7fa4:	defffd04 	addi	sp,sp,-12
    7fa8:	dc000015 	stw	r16,0(sp)
    7fac:	04000044 	movi	r16,1
    7fb0:	dc400115 	stw	r17,4(sp)
    7fb4:	2823883a 	mov	r17,r5
    7fb8:	800b883a 	mov	r5,r16
    7fbc:	dfc00215 	stw	ra,8(sp)
    7fc0:	0007b980 	call	7b98 <_Balloc>
    7fc4:	14400515 	stw	r17,20(r2)
    7fc8:	14000415 	stw	r16,16(r2)
    7fcc:	dfc00217 	ldw	ra,8(sp)
    7fd0:	dc400117 	ldw	r17,4(sp)
    7fd4:	dc000017 	ldw	r16,0(sp)
    7fd8:	dec00304 	addi	sp,sp,12
    7fdc:	f800283a 	ret

00007fe0 <__multiply>:
    7fe0:	defffa04 	addi	sp,sp,-24
    7fe4:	dcc00315 	stw	r19,12(sp)
    7fe8:	dc800215 	stw	r18,8(sp)
    7fec:	34c00417 	ldw	r19,16(r6)
    7ff0:	2c800417 	ldw	r18,16(r5)
    7ff4:	dd000415 	stw	r20,16(sp)
    7ff8:	dc400115 	stw	r17,4(sp)
    7ffc:	dfc00515 	stw	ra,20(sp)
    8000:	dc000015 	stw	r16,0(sp)
    8004:	2829883a 	mov	r20,r5
    8008:	3023883a 	mov	r17,r6
    800c:	94c0050e 	bge	r18,r19,8024 <__multiply+0x44>
    8010:	9007883a 	mov	r3,r18
    8014:	3029883a 	mov	r20,r6
    8018:	9825883a 	mov	r18,r19
    801c:	2823883a 	mov	r17,r5
    8020:	1827883a 	mov	r19,r3
    8024:	a0800217 	ldw	r2,8(r20)
    8028:	94e1883a 	add	r16,r18,r19
    802c:	a1400117 	ldw	r5,4(r20)
    8030:	1400010e 	bge	r2,r16,8038 <__multiply+0x58>
    8034:	29400044 	addi	r5,r5,1
    8038:	0007b980 	call	7b98 <_Balloc>
    803c:	8415883a 	add	r10,r16,r16
    8040:	12c00504 	addi	r11,r2,20
    8044:	5295883a 	add	r10,r10,r10
    8048:	5a95883a 	add	r10,r11,r10
    804c:	5807883a 	mov	r3,r11
    8050:	5a80032e 	bgeu	r11,r10,8060 <__multiply+0x80>
    8054:	18000015 	stw	zero,0(r3)
    8058:	18c00104 	addi	r3,r3,4
    805c:	1abffd36 	bltu	r3,r10,8054 <__alt_data_end+0xff008054>
    8060:	9ce7883a 	add	r19,r19,r19
    8064:	94a5883a 	add	r18,r18,r18
    8068:	89800504 	addi	r6,r17,20
    806c:	9ce7883a 	add	r19,r19,r19
    8070:	a3400504 	addi	r13,r20,20
    8074:	94a5883a 	add	r18,r18,r18
    8078:	34d9883a 	add	r12,r6,r19
    807c:	6c93883a 	add	r9,r13,r18
    8080:	3300422e 	bgeu	r6,r12,818c <__multiply+0x1ac>
    8084:	37c00017 	ldw	ra,0(r6)
    8088:	fbffffcc 	andi	r15,ra,65535
    808c:	78001b26 	beq	r15,zero,80fc <__multiply+0x11c>
    8090:	5811883a 	mov	r8,r11
    8094:	681d883a 	mov	r14,r13
    8098:	000f883a 	mov	r7,zero
    809c:	71000017 	ldw	r4,0(r14)
    80a0:	40c00017 	ldw	r3,0(r8)
    80a4:	73800104 	addi	r14,r14,4
    80a8:	217fffcc 	andi	r5,r4,65535
    80ac:	2bcb383a 	mul	r5,r5,r15
    80b0:	2008d43a 	srli	r4,r4,16
    80b4:	1c7fffcc 	andi	r17,r3,65535
    80b8:	2c4b883a 	add	r5,r5,r17
    80bc:	29cb883a 	add	r5,r5,r7
    80c0:	23c9383a 	mul	r4,r4,r15
    80c4:	1806d43a 	srli	r3,r3,16
    80c8:	280ed43a 	srli	r7,r5,16
    80cc:	297fffcc 	andi	r5,r5,65535
    80d0:	20c7883a 	add	r3,r4,r3
    80d4:	19c7883a 	add	r3,r3,r7
    80d8:	1808943a 	slli	r4,r3,16
    80dc:	4023883a 	mov	r17,r8
    80e0:	180ed43a 	srli	r7,r3,16
    80e4:	214ab03a 	or	r5,r4,r5
    80e8:	41400015 	stw	r5,0(r8)
    80ec:	42000104 	addi	r8,r8,4
    80f0:	727fea36 	bltu	r14,r9,809c <__alt_data_end+0xff00809c>
    80f4:	89c00115 	stw	r7,4(r17)
    80f8:	37c00017 	ldw	ra,0(r6)
    80fc:	f83ed43a 	srli	ra,ra,16
    8100:	f8001f26 	beq	ra,zero,8180 <__multiply+0x1a0>
    8104:	58c00017 	ldw	r3,0(r11)
    8108:	681d883a 	mov	r14,r13
    810c:	581f883a 	mov	r15,r11
    8110:	1811883a 	mov	r8,r3
    8114:	5825883a 	mov	r18,r11
    8118:	000f883a 	mov	r7,zero
    811c:	00000106 	br	8124 <__multiply+0x144>
    8120:	8825883a 	mov	r18,r17
    8124:	7140000b 	ldhu	r5,0(r14)
    8128:	4010d43a 	srli	r8,r8,16
    812c:	193fffcc 	andi	r4,r3,65535
    8130:	2fcb383a 	mul	r5,r5,ra
    8134:	7bc00104 	addi	r15,r15,4
    8138:	73800104 	addi	r14,r14,4
    813c:	2a0b883a 	add	r5,r5,r8
    8140:	29cb883a 	add	r5,r5,r7
    8144:	2806943a 	slli	r3,r5,16
    8148:	94400104 	addi	r17,r18,4
    814c:	280ad43a 	srli	r5,r5,16
    8150:	1908b03a 	or	r4,r3,r4
    8154:	793fff15 	stw	r4,-4(r15)
    8158:	70ffff17 	ldw	r3,-4(r14)
    815c:	8a000017 	ldw	r8,0(r17)
    8160:	1806d43a 	srli	r3,r3,16
    8164:	413fffcc 	andi	r4,r8,65535
    8168:	1fc7383a 	mul	r3,r3,ra
    816c:	1907883a 	add	r3,r3,r4
    8170:	1947883a 	add	r3,r3,r5
    8174:	180ed43a 	srli	r7,r3,16
    8178:	727fe936 	bltu	r14,r9,8120 <__alt_data_end+0xff008120>
    817c:	90c00115 	stw	r3,4(r18)
    8180:	31800104 	addi	r6,r6,4
    8184:	5ac00104 	addi	r11,r11,4
    8188:	333fbe36 	bltu	r6,r12,8084 <__alt_data_end+0xff008084>
    818c:	0400090e 	bge	zero,r16,81b4 <__multiply+0x1d4>
    8190:	50ffff17 	ldw	r3,-4(r10)
    8194:	52bfff04 	addi	r10,r10,-4
    8198:	18000326 	beq	r3,zero,81a8 <__multiply+0x1c8>
    819c:	00000506 	br	81b4 <__multiply+0x1d4>
    81a0:	50c00017 	ldw	r3,0(r10)
    81a4:	1800031e 	bne	r3,zero,81b4 <__multiply+0x1d4>
    81a8:	843fffc4 	addi	r16,r16,-1
    81ac:	52bfff04 	addi	r10,r10,-4
    81b0:	803ffb1e 	bne	r16,zero,81a0 <__alt_data_end+0xff0081a0>
    81b4:	14000415 	stw	r16,16(r2)
    81b8:	dfc00517 	ldw	ra,20(sp)
    81bc:	dd000417 	ldw	r20,16(sp)
    81c0:	dcc00317 	ldw	r19,12(sp)
    81c4:	dc800217 	ldw	r18,8(sp)
    81c8:	dc400117 	ldw	r17,4(sp)
    81cc:	dc000017 	ldw	r16,0(sp)
    81d0:	dec00604 	addi	sp,sp,24
    81d4:	f800283a 	ret

000081d8 <__pow5mult>:
    81d8:	defffa04 	addi	sp,sp,-24
    81dc:	dcc00315 	stw	r19,12(sp)
    81e0:	dc000015 	stw	r16,0(sp)
    81e4:	dfc00515 	stw	ra,20(sp)
    81e8:	dd000415 	stw	r20,16(sp)
    81ec:	dc800215 	stw	r18,8(sp)
    81f0:	dc400115 	stw	r17,4(sp)
    81f4:	308000cc 	andi	r2,r6,3
    81f8:	3021883a 	mov	r16,r6
    81fc:	2027883a 	mov	r19,r4
    8200:	10002f1e 	bne	r2,zero,82c0 <__pow5mult+0xe8>
    8204:	2825883a 	mov	r18,r5
    8208:	8021d0ba 	srai	r16,r16,2
    820c:	80001a26 	beq	r16,zero,8278 <__pow5mult+0xa0>
    8210:	9c401217 	ldw	r17,72(r19)
    8214:	8800061e 	bne	r17,zero,8230 <__pow5mult+0x58>
    8218:	00003406 	br	82ec <__pow5mult+0x114>
    821c:	8021d07a 	srai	r16,r16,1
    8220:	80001526 	beq	r16,zero,8278 <__pow5mult+0xa0>
    8224:	88800017 	ldw	r2,0(r17)
    8228:	10001c26 	beq	r2,zero,829c <__pow5mult+0xc4>
    822c:	1023883a 	mov	r17,r2
    8230:	8080004c 	andi	r2,r16,1
    8234:	103ff926 	beq	r2,zero,821c <__alt_data_end+0xff00821c>
    8238:	880d883a 	mov	r6,r17
    823c:	900b883a 	mov	r5,r18
    8240:	9809883a 	mov	r4,r19
    8244:	0007fe00 	call	7fe0 <__multiply>
    8248:	90001b26 	beq	r18,zero,82b8 <__pow5mult+0xe0>
    824c:	91000117 	ldw	r4,4(r18)
    8250:	98c01317 	ldw	r3,76(r19)
    8254:	8021d07a 	srai	r16,r16,1
    8258:	2109883a 	add	r4,r4,r4
    825c:	2109883a 	add	r4,r4,r4
    8260:	1907883a 	add	r3,r3,r4
    8264:	19000017 	ldw	r4,0(r3)
    8268:	91000015 	stw	r4,0(r18)
    826c:	1c800015 	stw	r18,0(r3)
    8270:	1025883a 	mov	r18,r2
    8274:	803feb1e 	bne	r16,zero,8224 <__alt_data_end+0xff008224>
    8278:	9005883a 	mov	r2,r18
    827c:	dfc00517 	ldw	ra,20(sp)
    8280:	dd000417 	ldw	r20,16(sp)
    8284:	dcc00317 	ldw	r19,12(sp)
    8288:	dc800217 	ldw	r18,8(sp)
    828c:	dc400117 	ldw	r17,4(sp)
    8290:	dc000017 	ldw	r16,0(sp)
    8294:	dec00604 	addi	sp,sp,24
    8298:	f800283a 	ret
    829c:	880d883a 	mov	r6,r17
    82a0:	880b883a 	mov	r5,r17
    82a4:	9809883a 	mov	r4,r19
    82a8:	0007fe00 	call	7fe0 <__multiply>
    82ac:	88800015 	stw	r2,0(r17)
    82b0:	10000015 	stw	zero,0(r2)
    82b4:	003fdd06 	br	822c <__alt_data_end+0xff00822c>
    82b8:	1025883a 	mov	r18,r2
    82bc:	003fd706 	br	821c <__alt_data_end+0xff00821c>
    82c0:	10bfffc4 	addi	r2,r2,-1
    82c4:	1085883a 	add	r2,r2,r2
    82c8:	00c00074 	movhi	r3,1
    82cc:	18c1a804 	addi	r3,r3,1696
    82d0:	1085883a 	add	r2,r2,r2
    82d4:	1885883a 	add	r2,r3,r2
    82d8:	11800017 	ldw	r6,0(r2)
    82dc:	000f883a 	mov	r7,zero
    82e0:	0007c680 	call	7c68 <__multadd>
    82e4:	1025883a 	mov	r18,r2
    82e8:	003fc706 	br	8208 <__alt_data_end+0xff008208>
    82ec:	05000044 	movi	r20,1
    82f0:	a00b883a 	mov	r5,r20
    82f4:	9809883a 	mov	r4,r19
    82f8:	0007b980 	call	7b98 <_Balloc>
    82fc:	1023883a 	mov	r17,r2
    8300:	00809c44 	movi	r2,625
    8304:	88800515 	stw	r2,20(r17)
    8308:	8d000415 	stw	r20,16(r17)
    830c:	9c401215 	stw	r17,72(r19)
    8310:	88000015 	stw	zero,0(r17)
    8314:	003fc606 	br	8230 <__alt_data_end+0xff008230>

00008318 <__lshift>:
    8318:	defff904 	addi	sp,sp,-28
    831c:	dd400515 	stw	r21,20(sp)
    8320:	dcc00315 	stw	r19,12(sp)
    8324:	302bd17a 	srai	r21,r6,5
    8328:	2cc00417 	ldw	r19,16(r5)
    832c:	28800217 	ldw	r2,8(r5)
    8330:	dd000415 	stw	r20,16(sp)
    8334:	ace7883a 	add	r19,r21,r19
    8338:	dc800215 	stw	r18,8(sp)
    833c:	dc400115 	stw	r17,4(sp)
    8340:	dc000015 	stw	r16,0(sp)
    8344:	dfc00615 	stw	ra,24(sp)
    8348:	9c000044 	addi	r16,r19,1
    834c:	2823883a 	mov	r17,r5
    8350:	3029883a 	mov	r20,r6
    8354:	2025883a 	mov	r18,r4
    8358:	29400117 	ldw	r5,4(r5)
    835c:	1400030e 	bge	r2,r16,836c <__lshift+0x54>
    8360:	1085883a 	add	r2,r2,r2
    8364:	29400044 	addi	r5,r5,1
    8368:	143ffd16 	blt	r2,r16,8360 <__alt_data_end+0xff008360>
    836c:	9009883a 	mov	r4,r18
    8370:	0007b980 	call	7b98 <_Balloc>
    8374:	10c00504 	addi	r3,r2,20
    8378:	0540070e 	bge	zero,r21,8398 <__lshift+0x80>
    837c:	ad6b883a 	add	r21,r21,r21
    8380:	ad6b883a 	add	r21,r21,r21
    8384:	1809883a 	mov	r4,r3
    8388:	1d47883a 	add	r3,r3,r21
    838c:	20000015 	stw	zero,0(r4)
    8390:	21000104 	addi	r4,r4,4
    8394:	193ffd1e 	bne	r3,r4,838c <__alt_data_end+0xff00838c>
    8398:	8a000417 	ldw	r8,16(r17)
    839c:	89000504 	addi	r4,r17,20
    83a0:	a18007cc 	andi	r6,r20,31
    83a4:	4211883a 	add	r8,r8,r8
    83a8:	4211883a 	add	r8,r8,r8
    83ac:	2211883a 	add	r8,r4,r8
    83b0:	30002326 	beq	r6,zero,8440 <__lshift+0x128>
    83b4:	02400804 	movi	r9,32
    83b8:	4993c83a 	sub	r9,r9,r6
    83bc:	000b883a 	mov	r5,zero
    83c0:	21c00017 	ldw	r7,0(r4)
    83c4:	1815883a 	mov	r10,r3
    83c8:	18c00104 	addi	r3,r3,4
    83cc:	398e983a 	sll	r7,r7,r6
    83d0:	21000104 	addi	r4,r4,4
    83d4:	394ab03a 	or	r5,r7,r5
    83d8:	197fff15 	stw	r5,-4(r3)
    83dc:	217fff17 	ldw	r5,-4(r4)
    83e0:	2a4ad83a 	srl	r5,r5,r9
    83e4:	223ff636 	bltu	r4,r8,83c0 <__alt_data_end+0xff0083c0>
    83e8:	51400115 	stw	r5,4(r10)
    83ec:	28001a1e 	bne	r5,zero,8458 <__lshift+0x140>
    83f0:	843fffc4 	addi	r16,r16,-1
    83f4:	14000415 	stw	r16,16(r2)
    83f8:	88000826 	beq	r17,zero,841c <__lshift+0x104>
    83fc:	89000117 	ldw	r4,4(r17)
    8400:	90c01317 	ldw	r3,76(r18)
    8404:	2109883a 	add	r4,r4,r4
    8408:	2109883a 	add	r4,r4,r4
    840c:	1907883a 	add	r3,r3,r4
    8410:	19000017 	ldw	r4,0(r3)
    8414:	89000015 	stw	r4,0(r17)
    8418:	1c400015 	stw	r17,0(r3)
    841c:	dfc00617 	ldw	ra,24(sp)
    8420:	dd400517 	ldw	r21,20(sp)
    8424:	dd000417 	ldw	r20,16(sp)
    8428:	dcc00317 	ldw	r19,12(sp)
    842c:	dc800217 	ldw	r18,8(sp)
    8430:	dc400117 	ldw	r17,4(sp)
    8434:	dc000017 	ldw	r16,0(sp)
    8438:	dec00704 	addi	sp,sp,28
    843c:	f800283a 	ret
    8440:	21400017 	ldw	r5,0(r4)
    8444:	18c00104 	addi	r3,r3,4
    8448:	21000104 	addi	r4,r4,4
    844c:	197fff15 	stw	r5,-4(r3)
    8450:	223ffb36 	bltu	r4,r8,8440 <__alt_data_end+0xff008440>
    8454:	003fe606 	br	83f0 <__alt_data_end+0xff0083f0>
    8458:	9c000084 	addi	r16,r19,2
    845c:	003fe406 	br	83f0 <__alt_data_end+0xff0083f0>

00008460 <__mcmp>:
    8460:	20800417 	ldw	r2,16(r4)
    8464:	28c00417 	ldw	r3,16(r5)
    8468:	10c5c83a 	sub	r2,r2,r3
    846c:	1000111e 	bne	r2,zero,84b4 <__mcmp+0x54>
    8470:	18c7883a 	add	r3,r3,r3
    8474:	18c7883a 	add	r3,r3,r3
    8478:	21000504 	addi	r4,r4,20
    847c:	29400504 	addi	r5,r5,20
    8480:	20c5883a 	add	r2,r4,r3
    8484:	28cb883a 	add	r5,r5,r3
    8488:	00000106 	br	8490 <__mcmp+0x30>
    848c:	20800a2e 	bgeu	r4,r2,84b8 <__mcmp+0x58>
    8490:	10bfff04 	addi	r2,r2,-4
    8494:	297fff04 	addi	r5,r5,-4
    8498:	11800017 	ldw	r6,0(r2)
    849c:	28c00017 	ldw	r3,0(r5)
    84a0:	30fffa26 	beq	r6,r3,848c <__alt_data_end+0xff00848c>
    84a4:	30c00236 	bltu	r6,r3,84b0 <__mcmp+0x50>
    84a8:	00800044 	movi	r2,1
    84ac:	f800283a 	ret
    84b0:	00bfffc4 	movi	r2,-1
    84b4:	f800283a 	ret
    84b8:	0005883a 	mov	r2,zero
    84bc:	f800283a 	ret

000084c0 <__mdiff>:
    84c0:	28c00417 	ldw	r3,16(r5)
    84c4:	30800417 	ldw	r2,16(r6)
    84c8:	defffa04 	addi	sp,sp,-24
    84cc:	dcc00315 	stw	r19,12(sp)
    84d0:	dc800215 	stw	r18,8(sp)
    84d4:	dfc00515 	stw	ra,20(sp)
    84d8:	dd000415 	stw	r20,16(sp)
    84dc:	dc400115 	stw	r17,4(sp)
    84e0:	dc000015 	stw	r16,0(sp)
    84e4:	1887c83a 	sub	r3,r3,r2
    84e8:	2825883a 	mov	r18,r5
    84ec:	3027883a 	mov	r19,r6
    84f0:	1800141e 	bne	r3,zero,8544 <__mdiff+0x84>
    84f4:	1085883a 	add	r2,r2,r2
    84f8:	1085883a 	add	r2,r2,r2
    84fc:	2a000504 	addi	r8,r5,20
    8500:	34000504 	addi	r16,r6,20
    8504:	4087883a 	add	r3,r8,r2
    8508:	8085883a 	add	r2,r16,r2
    850c:	00000106 	br	8514 <__mdiff+0x54>
    8510:	40c0592e 	bgeu	r8,r3,8678 <__mdiff+0x1b8>
    8514:	18ffff04 	addi	r3,r3,-4
    8518:	10bfff04 	addi	r2,r2,-4
    851c:	19c00017 	ldw	r7,0(r3)
    8520:	11400017 	ldw	r5,0(r2)
    8524:	397ffa26 	beq	r7,r5,8510 <__alt_data_end+0xff008510>
    8528:	3940592e 	bgeu	r7,r5,8690 <__mdiff+0x1d0>
    852c:	9005883a 	mov	r2,r18
    8530:	4023883a 	mov	r17,r8
    8534:	9825883a 	mov	r18,r19
    8538:	05000044 	movi	r20,1
    853c:	1027883a 	mov	r19,r2
    8540:	00000406 	br	8554 <__mdiff+0x94>
    8544:	18005616 	blt	r3,zero,86a0 <__mdiff+0x1e0>
    8548:	34400504 	addi	r17,r6,20
    854c:	2c000504 	addi	r16,r5,20
    8550:	0029883a 	mov	r20,zero
    8554:	91400117 	ldw	r5,4(r18)
    8558:	0007b980 	call	7b98 <_Balloc>
    855c:	92400417 	ldw	r9,16(r18)
    8560:	9b000417 	ldw	r12,16(r19)
    8564:	12c00504 	addi	r11,r2,20
    8568:	4a51883a 	add	r8,r9,r9
    856c:	6319883a 	add	r12,r12,r12
    8570:	4211883a 	add	r8,r8,r8
    8574:	6319883a 	add	r12,r12,r12
    8578:	15000315 	stw	r20,12(r2)
    857c:	8211883a 	add	r8,r16,r8
    8580:	8b19883a 	add	r12,r17,r12
    8584:	0007883a 	mov	r3,zero
    8588:	81400017 	ldw	r5,0(r16)
    858c:	89c00017 	ldw	r7,0(r17)
    8590:	59800104 	addi	r6,r11,4
    8594:	293fffcc 	andi	r4,r5,65535
    8598:	20c7883a 	add	r3,r4,r3
    859c:	393fffcc 	andi	r4,r7,65535
    85a0:	1909c83a 	sub	r4,r3,r4
    85a4:	280ad43a 	srli	r5,r5,16
    85a8:	380ed43a 	srli	r7,r7,16
    85ac:	2007d43a 	srai	r3,r4,16
    85b0:	213fffcc 	andi	r4,r4,65535
    85b4:	29cbc83a 	sub	r5,r5,r7
    85b8:	28c7883a 	add	r3,r5,r3
    85bc:	180a943a 	slli	r5,r3,16
    85c0:	8c400104 	addi	r17,r17,4
    85c4:	84000104 	addi	r16,r16,4
    85c8:	2908b03a 	or	r4,r5,r4
    85cc:	59000015 	stw	r4,0(r11)
    85d0:	1807d43a 	srai	r3,r3,16
    85d4:	3015883a 	mov	r10,r6
    85d8:	3017883a 	mov	r11,r6
    85dc:	8b3fea36 	bltu	r17,r12,8588 <__alt_data_end+0xff008588>
    85e0:	8200162e 	bgeu	r16,r8,863c <__mdiff+0x17c>
    85e4:	8017883a 	mov	r11,r16
    85e8:	59400017 	ldw	r5,0(r11)
    85ec:	31800104 	addi	r6,r6,4
    85f0:	5ac00104 	addi	r11,r11,4
    85f4:	293fffcc 	andi	r4,r5,65535
    85f8:	20c7883a 	add	r3,r4,r3
    85fc:	280ed43a 	srli	r7,r5,16
    8600:	180bd43a 	srai	r5,r3,16
    8604:	193fffcc 	andi	r4,r3,65535
    8608:	3947883a 	add	r3,r7,r5
    860c:	180a943a 	slli	r5,r3,16
    8610:	1807d43a 	srai	r3,r3,16
    8614:	2908b03a 	or	r4,r5,r4
    8618:	313fff15 	stw	r4,-4(r6)
    861c:	5a3ff236 	bltu	r11,r8,85e8 <__alt_data_end+0xff0085e8>
    8620:	0406303a 	nor	r3,zero,r16
    8624:	1a07883a 	add	r3,r3,r8
    8628:	1806d0ba 	srli	r3,r3,2
    862c:	18c00044 	addi	r3,r3,1
    8630:	18c7883a 	add	r3,r3,r3
    8634:	18c7883a 	add	r3,r3,r3
    8638:	50d5883a 	add	r10,r10,r3
    863c:	50ffff04 	addi	r3,r10,-4
    8640:	2000041e 	bne	r4,zero,8654 <__mdiff+0x194>
    8644:	18ffff04 	addi	r3,r3,-4
    8648:	19000017 	ldw	r4,0(r3)
    864c:	4a7fffc4 	addi	r9,r9,-1
    8650:	203ffc26 	beq	r4,zero,8644 <__alt_data_end+0xff008644>
    8654:	12400415 	stw	r9,16(r2)
    8658:	dfc00517 	ldw	ra,20(sp)
    865c:	dd000417 	ldw	r20,16(sp)
    8660:	dcc00317 	ldw	r19,12(sp)
    8664:	dc800217 	ldw	r18,8(sp)
    8668:	dc400117 	ldw	r17,4(sp)
    866c:	dc000017 	ldw	r16,0(sp)
    8670:	dec00604 	addi	sp,sp,24
    8674:	f800283a 	ret
    8678:	000b883a 	mov	r5,zero
    867c:	0007b980 	call	7b98 <_Balloc>
    8680:	00c00044 	movi	r3,1
    8684:	10c00415 	stw	r3,16(r2)
    8688:	10000515 	stw	zero,20(r2)
    868c:	003ff206 	br	8658 <__alt_data_end+0xff008658>
    8690:	8023883a 	mov	r17,r16
    8694:	0029883a 	mov	r20,zero
    8698:	4021883a 	mov	r16,r8
    869c:	003fad06 	br	8554 <__alt_data_end+0xff008554>
    86a0:	9005883a 	mov	r2,r18
    86a4:	94400504 	addi	r17,r18,20
    86a8:	9c000504 	addi	r16,r19,20
    86ac:	9825883a 	mov	r18,r19
    86b0:	05000044 	movi	r20,1
    86b4:	1027883a 	mov	r19,r2
    86b8:	003fa606 	br	8554 <__alt_data_end+0xff008554>

000086bc <__ulp>:
    86bc:	295ffc2c 	andhi	r5,r5,32752
    86c0:	00bf3034 	movhi	r2,64704
    86c4:	2887883a 	add	r3,r5,r2
    86c8:	00c0020e 	bge	zero,r3,86d4 <__ulp+0x18>
    86cc:	0005883a 	mov	r2,zero
    86d0:	f800283a 	ret
    86d4:	00c7c83a 	sub	r3,zero,r3
    86d8:	1807d53a 	srai	r3,r3,20
    86dc:	008004c4 	movi	r2,19
    86e0:	10c00b0e 	bge	r2,r3,8710 <__ulp+0x54>
    86e4:	18bffb04 	addi	r2,r3,-20
    86e8:	01000784 	movi	r4,30
    86ec:	0007883a 	mov	r3,zero
    86f0:	20800516 	blt	r4,r2,8708 <__ulp+0x4c>
    86f4:	010007c4 	movi	r4,31
    86f8:	2089c83a 	sub	r4,r4,r2
    86fc:	00800044 	movi	r2,1
    8700:	1104983a 	sll	r2,r2,r4
    8704:	f800283a 	ret
    8708:	00800044 	movi	r2,1
    870c:	f800283a 	ret
    8710:	01400234 	movhi	r5,8
    8714:	28c7d83a 	sra	r3,r5,r3
    8718:	0005883a 	mov	r2,zero
    871c:	f800283a 	ret

00008720 <__b2d>:
    8720:	defffa04 	addi	sp,sp,-24
    8724:	dc000015 	stw	r16,0(sp)
    8728:	24000417 	ldw	r16,16(r4)
    872c:	dc400115 	stw	r17,4(sp)
    8730:	24400504 	addi	r17,r4,20
    8734:	8421883a 	add	r16,r16,r16
    8738:	8421883a 	add	r16,r16,r16
    873c:	8c21883a 	add	r16,r17,r16
    8740:	dc800215 	stw	r18,8(sp)
    8744:	84bfff17 	ldw	r18,-4(r16)
    8748:	dd000415 	stw	r20,16(sp)
    874c:	dcc00315 	stw	r19,12(sp)
    8750:	9009883a 	mov	r4,r18
    8754:	2829883a 	mov	r20,r5
    8758:	dfc00515 	stw	ra,20(sp)
    875c:	0007e8c0 	call	7e8c <__hi0bits>
    8760:	00c00804 	movi	r3,32
    8764:	1889c83a 	sub	r4,r3,r2
    8768:	a1000015 	stw	r4,0(r20)
    876c:	01000284 	movi	r4,10
    8770:	84ffff04 	addi	r19,r16,-4
    8774:	20801216 	blt	r4,r2,87c0 <__b2d+0xa0>
    8778:	018002c4 	movi	r6,11
    877c:	308dc83a 	sub	r6,r6,r2
    8780:	9186d83a 	srl	r3,r18,r6
    8784:	18cffc34 	orhi	r3,r3,16368
    8788:	8cc0212e 	bgeu	r17,r19,8810 <__b2d+0xf0>
    878c:	813ffe17 	ldw	r4,-8(r16)
    8790:	218cd83a 	srl	r6,r4,r6
    8794:	10800544 	addi	r2,r2,21
    8798:	9084983a 	sll	r2,r18,r2
    879c:	1184b03a 	or	r2,r2,r6
    87a0:	dfc00517 	ldw	ra,20(sp)
    87a4:	dd000417 	ldw	r20,16(sp)
    87a8:	dcc00317 	ldw	r19,12(sp)
    87ac:	dc800217 	ldw	r18,8(sp)
    87b0:	dc400117 	ldw	r17,4(sp)
    87b4:	dc000017 	ldw	r16,0(sp)
    87b8:	dec00604 	addi	sp,sp,24
    87bc:	f800283a 	ret
    87c0:	8cc00f2e 	bgeu	r17,r19,8800 <__b2d+0xe0>
    87c4:	117ffd44 	addi	r5,r2,-11
    87c8:	80bffe17 	ldw	r2,-8(r16)
    87cc:	28000e26 	beq	r5,zero,8808 <__b2d+0xe8>
    87d0:	1949c83a 	sub	r4,r3,r5
    87d4:	9164983a 	sll	r18,r18,r5
    87d8:	1106d83a 	srl	r3,r2,r4
    87dc:	81bffe04 	addi	r6,r16,-8
    87e0:	948ffc34 	orhi	r18,r18,16368
    87e4:	90c6b03a 	or	r3,r18,r3
    87e8:	89800e2e 	bgeu	r17,r6,8824 <__b2d+0x104>
    87ec:	81bffd17 	ldw	r6,-12(r16)
    87f0:	1144983a 	sll	r2,r2,r5
    87f4:	310ad83a 	srl	r5,r6,r4
    87f8:	2884b03a 	or	r2,r5,r2
    87fc:	003fe806 	br	87a0 <__alt_data_end+0xff0087a0>
    8800:	10bffd44 	addi	r2,r2,-11
    8804:	1000041e 	bne	r2,zero,8818 <__b2d+0xf8>
    8808:	90cffc34 	orhi	r3,r18,16368
    880c:	003fe406 	br	87a0 <__alt_data_end+0xff0087a0>
    8810:	000d883a 	mov	r6,zero
    8814:	003fdf06 	br	8794 <__alt_data_end+0xff008794>
    8818:	90a4983a 	sll	r18,r18,r2
    881c:	0005883a 	mov	r2,zero
    8820:	003ff906 	br	8808 <__alt_data_end+0xff008808>
    8824:	1144983a 	sll	r2,r2,r5
    8828:	003fdd06 	br	87a0 <__alt_data_end+0xff0087a0>

0000882c <__d2b>:
    882c:	defff804 	addi	sp,sp,-32
    8830:	dc000215 	stw	r16,8(sp)
    8834:	3021883a 	mov	r16,r6
    8838:	dc400315 	stw	r17,12(sp)
    883c:	8022907a 	slli	r17,r16,1
    8840:	dd000615 	stw	r20,24(sp)
    8844:	2829883a 	mov	r20,r5
    8848:	01400044 	movi	r5,1
    884c:	dcc00515 	stw	r19,20(sp)
    8850:	dc800415 	stw	r18,16(sp)
    8854:	dfc00715 	stw	ra,28(sp)
    8858:	3825883a 	mov	r18,r7
    885c:	8822d57a 	srli	r17,r17,21
    8860:	0007b980 	call	7b98 <_Balloc>
    8864:	1027883a 	mov	r19,r2
    8868:	00800434 	movhi	r2,16
    886c:	10bfffc4 	addi	r2,r2,-1
    8870:	808c703a 	and	r6,r16,r2
    8874:	88000126 	beq	r17,zero,887c <__d2b+0x50>
    8878:	31800434 	orhi	r6,r6,16
    887c:	d9800015 	stw	r6,0(sp)
    8880:	a0002426 	beq	r20,zero,8914 <__d2b+0xe8>
    8884:	d9000104 	addi	r4,sp,4
    8888:	dd000115 	stw	r20,4(sp)
    888c:	0007ef40 	call	7ef4 <__lo0bits>
    8890:	d8c00017 	ldw	r3,0(sp)
    8894:	10002f1e 	bne	r2,zero,8954 <__d2b+0x128>
    8898:	d9000117 	ldw	r4,4(sp)
    889c:	99000515 	stw	r4,20(r19)
    88a0:	1821003a 	cmpeq	r16,r3,zero
    88a4:	01000084 	movi	r4,2
    88a8:	2421c83a 	sub	r16,r4,r16
    88ac:	98c00615 	stw	r3,24(r19)
    88b0:	9c000415 	stw	r16,16(r19)
    88b4:	88001f1e 	bne	r17,zero,8934 <__d2b+0x108>
    88b8:	10bef384 	addi	r2,r2,-1074
    88bc:	90800015 	stw	r2,0(r18)
    88c0:	00900034 	movhi	r2,16384
    88c4:	10bfffc4 	addi	r2,r2,-1
    88c8:	8085883a 	add	r2,r16,r2
    88cc:	1085883a 	add	r2,r2,r2
    88d0:	1085883a 	add	r2,r2,r2
    88d4:	9885883a 	add	r2,r19,r2
    88d8:	11000517 	ldw	r4,20(r2)
    88dc:	8020917a 	slli	r16,r16,5
    88e0:	0007e8c0 	call	7e8c <__hi0bits>
    88e4:	d8c00817 	ldw	r3,32(sp)
    88e8:	8085c83a 	sub	r2,r16,r2
    88ec:	18800015 	stw	r2,0(r3)
    88f0:	9805883a 	mov	r2,r19
    88f4:	dfc00717 	ldw	ra,28(sp)
    88f8:	dd000617 	ldw	r20,24(sp)
    88fc:	dcc00517 	ldw	r19,20(sp)
    8900:	dc800417 	ldw	r18,16(sp)
    8904:	dc400317 	ldw	r17,12(sp)
    8908:	dc000217 	ldw	r16,8(sp)
    890c:	dec00804 	addi	sp,sp,32
    8910:	f800283a 	ret
    8914:	d809883a 	mov	r4,sp
    8918:	0007ef40 	call	7ef4 <__lo0bits>
    891c:	d8c00017 	ldw	r3,0(sp)
    8920:	04000044 	movi	r16,1
    8924:	9c000415 	stw	r16,16(r19)
    8928:	98c00515 	stw	r3,20(r19)
    892c:	10800804 	addi	r2,r2,32
    8930:	883fe126 	beq	r17,zero,88b8 <__alt_data_end+0xff0088b8>
    8934:	00c00d44 	movi	r3,53
    8938:	8c7ef344 	addi	r17,r17,-1075
    893c:	88a3883a 	add	r17,r17,r2
    8940:	1885c83a 	sub	r2,r3,r2
    8944:	d8c00817 	ldw	r3,32(sp)
    8948:	94400015 	stw	r17,0(r18)
    894c:	18800015 	stw	r2,0(r3)
    8950:	003fe706 	br	88f0 <__alt_data_end+0xff0088f0>
    8954:	01000804 	movi	r4,32
    8958:	2089c83a 	sub	r4,r4,r2
    895c:	1908983a 	sll	r4,r3,r4
    8960:	d9400117 	ldw	r5,4(sp)
    8964:	1886d83a 	srl	r3,r3,r2
    8968:	2148b03a 	or	r4,r4,r5
    896c:	99000515 	stw	r4,20(r19)
    8970:	d8c00015 	stw	r3,0(sp)
    8974:	003fca06 	br	88a0 <__alt_data_end+0xff0088a0>

00008978 <__ratio>:
    8978:	defff904 	addi	sp,sp,-28
    897c:	dc400315 	stw	r17,12(sp)
    8980:	2823883a 	mov	r17,r5
    8984:	d9400104 	addi	r5,sp,4
    8988:	dfc00615 	stw	ra,24(sp)
    898c:	dcc00515 	stw	r19,20(sp)
    8990:	dc800415 	stw	r18,16(sp)
    8994:	2027883a 	mov	r19,r4
    8998:	dc000215 	stw	r16,8(sp)
    899c:	00087200 	call	8720 <__b2d>
    89a0:	d80b883a 	mov	r5,sp
    89a4:	8809883a 	mov	r4,r17
    89a8:	1025883a 	mov	r18,r2
    89ac:	1821883a 	mov	r16,r3
    89b0:	00087200 	call	8720 <__b2d>
    89b4:	8a000417 	ldw	r8,16(r17)
    89b8:	99000417 	ldw	r4,16(r19)
    89bc:	d9400117 	ldw	r5,4(sp)
    89c0:	2209c83a 	sub	r4,r4,r8
    89c4:	2010917a 	slli	r8,r4,5
    89c8:	d9000017 	ldw	r4,0(sp)
    89cc:	2909c83a 	sub	r4,r5,r4
    89d0:	4109883a 	add	r4,r8,r4
    89d4:	01000e0e 	bge	zero,r4,8a10 <__ratio+0x98>
    89d8:	2008953a 	slli	r4,r4,20
    89dc:	2421883a 	add	r16,r4,r16
    89e0:	100d883a 	mov	r6,r2
    89e4:	180f883a 	mov	r7,r3
    89e8:	9009883a 	mov	r4,r18
    89ec:	800b883a 	mov	r5,r16
    89f0:	000c8100 	call	c810 <__divdf3>
    89f4:	dfc00617 	ldw	ra,24(sp)
    89f8:	dcc00517 	ldw	r19,20(sp)
    89fc:	dc800417 	ldw	r18,16(sp)
    8a00:	dc400317 	ldw	r17,12(sp)
    8a04:	dc000217 	ldw	r16,8(sp)
    8a08:	dec00704 	addi	sp,sp,28
    8a0c:	f800283a 	ret
    8a10:	2008953a 	slli	r4,r4,20
    8a14:	1907c83a 	sub	r3,r3,r4
    8a18:	003ff106 	br	89e0 <__alt_data_end+0xff0089e0>

00008a1c <_mprec_log10>:
    8a1c:	defffe04 	addi	sp,sp,-8
    8a20:	dc000015 	stw	r16,0(sp)
    8a24:	dfc00115 	stw	ra,4(sp)
    8a28:	008005c4 	movi	r2,23
    8a2c:	2021883a 	mov	r16,r4
    8a30:	11000d0e 	bge	r2,r4,8a68 <_mprec_log10+0x4c>
    8a34:	0005883a 	mov	r2,zero
    8a38:	00cffc34 	movhi	r3,16368
    8a3c:	843fffc4 	addi	r16,r16,-1
    8a40:	000d883a 	mov	r6,zero
    8a44:	01d00934 	movhi	r7,16420
    8a48:	1009883a 	mov	r4,r2
    8a4c:	180b883a 	mov	r5,r3
    8a50:	000d3500 	call	d350 <__muldf3>
    8a54:	803ff91e 	bne	r16,zero,8a3c <__alt_data_end+0xff008a3c>
    8a58:	dfc00117 	ldw	ra,4(sp)
    8a5c:	dc000017 	ldw	r16,0(sp)
    8a60:	dec00204 	addi	sp,sp,8
    8a64:	f800283a 	ret
    8a68:	202090fa 	slli	r16,r4,3
    8a6c:	00800074 	movhi	r2,1
    8a70:	1081bf04 	addi	r2,r2,1788
    8a74:	1421883a 	add	r16,r2,r16
    8a78:	80800017 	ldw	r2,0(r16)
    8a7c:	80c00117 	ldw	r3,4(r16)
    8a80:	dfc00117 	ldw	ra,4(sp)
    8a84:	dc000017 	ldw	r16,0(sp)
    8a88:	dec00204 	addi	sp,sp,8
    8a8c:	f800283a 	ret

00008a90 <__copybits>:
    8a90:	297fffc4 	addi	r5,r5,-1
    8a94:	280fd17a 	srai	r7,r5,5
    8a98:	30c00417 	ldw	r3,16(r6)
    8a9c:	30800504 	addi	r2,r6,20
    8aa0:	39c00044 	addi	r7,r7,1
    8aa4:	18c7883a 	add	r3,r3,r3
    8aa8:	39cf883a 	add	r7,r7,r7
    8aac:	18c7883a 	add	r3,r3,r3
    8ab0:	39cf883a 	add	r7,r7,r7
    8ab4:	10c7883a 	add	r3,r2,r3
    8ab8:	21cf883a 	add	r7,r4,r7
    8abc:	10c00d2e 	bgeu	r2,r3,8af4 <__copybits+0x64>
    8ac0:	200b883a 	mov	r5,r4
    8ac4:	12000017 	ldw	r8,0(r2)
    8ac8:	29400104 	addi	r5,r5,4
    8acc:	10800104 	addi	r2,r2,4
    8ad0:	2a3fff15 	stw	r8,-4(r5)
    8ad4:	10fffb36 	bltu	r2,r3,8ac4 <__alt_data_end+0xff008ac4>
    8ad8:	1985c83a 	sub	r2,r3,r6
    8adc:	10bffac4 	addi	r2,r2,-21
    8ae0:	1004d0ba 	srli	r2,r2,2
    8ae4:	10800044 	addi	r2,r2,1
    8ae8:	1085883a 	add	r2,r2,r2
    8aec:	1085883a 	add	r2,r2,r2
    8af0:	2089883a 	add	r4,r4,r2
    8af4:	21c0032e 	bgeu	r4,r7,8b04 <__copybits+0x74>
    8af8:	20000015 	stw	zero,0(r4)
    8afc:	21000104 	addi	r4,r4,4
    8b00:	21fffd36 	bltu	r4,r7,8af8 <__alt_data_end+0xff008af8>
    8b04:	f800283a 	ret

00008b08 <__any_on>:
    8b08:	20c00417 	ldw	r3,16(r4)
    8b0c:	2805d17a 	srai	r2,r5,5
    8b10:	21000504 	addi	r4,r4,20
    8b14:	18800d0e 	bge	r3,r2,8b4c <__any_on+0x44>
    8b18:	18c7883a 	add	r3,r3,r3
    8b1c:	18c7883a 	add	r3,r3,r3
    8b20:	20c7883a 	add	r3,r4,r3
    8b24:	20c0192e 	bgeu	r4,r3,8b8c <__any_on+0x84>
    8b28:	18bfff17 	ldw	r2,-4(r3)
    8b2c:	18ffff04 	addi	r3,r3,-4
    8b30:	1000041e 	bne	r2,zero,8b44 <__any_on+0x3c>
    8b34:	20c0142e 	bgeu	r4,r3,8b88 <__any_on+0x80>
    8b38:	18ffff04 	addi	r3,r3,-4
    8b3c:	19400017 	ldw	r5,0(r3)
    8b40:	283ffc26 	beq	r5,zero,8b34 <__alt_data_end+0xff008b34>
    8b44:	00800044 	movi	r2,1
    8b48:	f800283a 	ret
    8b4c:	10c00a0e 	bge	r2,r3,8b78 <__any_on+0x70>
    8b50:	1085883a 	add	r2,r2,r2
    8b54:	1085883a 	add	r2,r2,r2
    8b58:	294007cc 	andi	r5,r5,31
    8b5c:	2087883a 	add	r3,r4,r2
    8b60:	283ff026 	beq	r5,zero,8b24 <__alt_data_end+0xff008b24>
    8b64:	19800017 	ldw	r6,0(r3)
    8b68:	3144d83a 	srl	r2,r6,r5
    8b6c:	114a983a 	sll	r5,r2,r5
    8b70:	317ff41e 	bne	r6,r5,8b44 <__alt_data_end+0xff008b44>
    8b74:	003feb06 	br	8b24 <__alt_data_end+0xff008b24>
    8b78:	1085883a 	add	r2,r2,r2
    8b7c:	1085883a 	add	r2,r2,r2
    8b80:	2087883a 	add	r3,r4,r2
    8b84:	003fe706 	br	8b24 <__alt_data_end+0xff008b24>
    8b88:	f800283a 	ret
    8b8c:	0005883a 	mov	r2,zero
    8b90:	f800283a 	ret

00008b94 <_realloc_r>:
    8b94:	defff604 	addi	sp,sp,-40
    8b98:	dc800215 	stw	r18,8(sp)
    8b9c:	dfc00915 	stw	ra,36(sp)
    8ba0:	df000815 	stw	fp,32(sp)
    8ba4:	ddc00715 	stw	r23,28(sp)
    8ba8:	dd800615 	stw	r22,24(sp)
    8bac:	dd400515 	stw	r21,20(sp)
    8bb0:	dd000415 	stw	r20,16(sp)
    8bb4:	dcc00315 	stw	r19,12(sp)
    8bb8:	dc400115 	stw	r17,4(sp)
    8bbc:	dc000015 	stw	r16,0(sp)
    8bc0:	3025883a 	mov	r18,r6
    8bc4:	2800b726 	beq	r5,zero,8ea4 <_realloc_r+0x310>
    8bc8:	282b883a 	mov	r21,r5
    8bcc:	2029883a 	mov	r20,r4
    8bd0:	000e9340 	call	e934 <__malloc_lock>
    8bd4:	a8bfff17 	ldw	r2,-4(r21)
    8bd8:	043fff04 	movi	r16,-4
    8bdc:	90c002c4 	addi	r3,r18,11
    8be0:	01000584 	movi	r4,22
    8be4:	acfffe04 	addi	r19,r21,-8
    8be8:	1420703a 	and	r16,r2,r16
    8bec:	20c0332e 	bgeu	r4,r3,8cbc <_realloc_r+0x128>
    8bf0:	047ffe04 	movi	r17,-8
    8bf4:	1c62703a 	and	r17,r3,r17
    8bf8:	8807883a 	mov	r3,r17
    8bfc:	88005816 	blt	r17,zero,8d60 <_realloc_r+0x1cc>
    8c00:	8c805736 	bltu	r17,r18,8d60 <_realloc_r+0x1cc>
    8c04:	80c0300e 	bge	r16,r3,8cc8 <_realloc_r+0x134>
    8c08:	07000074 	movhi	fp,1
    8c0c:	e7024004 	addi	fp,fp,2304
    8c10:	e1c00217 	ldw	r7,8(fp)
    8c14:	9c09883a 	add	r4,r19,r16
    8c18:	22000117 	ldw	r8,4(r4)
    8c1c:	21c06326 	beq	r4,r7,8dac <_realloc_r+0x218>
    8c20:	017fff84 	movi	r5,-2
    8c24:	414a703a 	and	r5,r8,r5
    8c28:	214b883a 	add	r5,r4,r5
    8c2c:	29800117 	ldw	r6,4(r5)
    8c30:	3180004c 	andi	r6,r6,1
    8c34:	30003f26 	beq	r6,zero,8d34 <_realloc_r+0x1a0>
    8c38:	1080004c 	andi	r2,r2,1
    8c3c:	10008326 	beq	r2,zero,8e4c <_realloc_r+0x2b8>
    8c40:	900b883a 	mov	r5,r18
    8c44:	a009883a 	mov	r4,r20
    8c48:	0001cac0 	call	1cac <_malloc_r>
    8c4c:	1025883a 	mov	r18,r2
    8c50:	10011e26 	beq	r2,zero,90cc <_realloc_r+0x538>
    8c54:	a93fff17 	ldw	r4,-4(r21)
    8c58:	10fffe04 	addi	r3,r2,-8
    8c5c:	00bfff84 	movi	r2,-2
    8c60:	2084703a 	and	r2,r4,r2
    8c64:	9885883a 	add	r2,r19,r2
    8c68:	1880ee26 	beq	r3,r2,9024 <_realloc_r+0x490>
    8c6c:	81bfff04 	addi	r6,r16,-4
    8c70:	00800904 	movi	r2,36
    8c74:	1180b836 	bltu	r2,r6,8f58 <_realloc_r+0x3c4>
    8c78:	00c004c4 	movi	r3,19
    8c7c:	19809636 	bltu	r3,r6,8ed8 <_realloc_r+0x344>
    8c80:	9005883a 	mov	r2,r18
    8c84:	a807883a 	mov	r3,r21
    8c88:	19000017 	ldw	r4,0(r3)
    8c8c:	11000015 	stw	r4,0(r2)
    8c90:	19000117 	ldw	r4,4(r3)
    8c94:	11000115 	stw	r4,4(r2)
    8c98:	18c00217 	ldw	r3,8(r3)
    8c9c:	10c00215 	stw	r3,8(r2)
    8ca0:	a80b883a 	mov	r5,r21
    8ca4:	a009883a 	mov	r4,r20
    8ca8:	0006afc0 	call	6afc <_free_r>
    8cac:	a009883a 	mov	r4,r20
    8cb0:	000e9380 	call	e938 <__malloc_unlock>
    8cb4:	9005883a 	mov	r2,r18
    8cb8:	00001206 	br	8d04 <_realloc_r+0x170>
    8cbc:	00c00404 	movi	r3,16
    8cc0:	1823883a 	mov	r17,r3
    8cc4:	003fce06 	br	8c00 <__alt_data_end+0xff008c00>
    8cc8:	a825883a 	mov	r18,r21
    8ccc:	8445c83a 	sub	r2,r16,r17
    8cd0:	00c003c4 	movi	r3,15
    8cd4:	18802636 	bltu	r3,r2,8d70 <_realloc_r+0x1dc>
    8cd8:	99800117 	ldw	r6,4(r19)
    8cdc:	9c07883a 	add	r3,r19,r16
    8ce0:	3180004c 	andi	r6,r6,1
    8ce4:	3420b03a 	or	r16,r6,r16
    8ce8:	9c000115 	stw	r16,4(r19)
    8cec:	18800117 	ldw	r2,4(r3)
    8cf0:	10800054 	ori	r2,r2,1
    8cf4:	18800115 	stw	r2,4(r3)
    8cf8:	a009883a 	mov	r4,r20
    8cfc:	000e9380 	call	e938 <__malloc_unlock>
    8d00:	9005883a 	mov	r2,r18
    8d04:	dfc00917 	ldw	ra,36(sp)
    8d08:	df000817 	ldw	fp,32(sp)
    8d0c:	ddc00717 	ldw	r23,28(sp)
    8d10:	dd800617 	ldw	r22,24(sp)
    8d14:	dd400517 	ldw	r21,20(sp)
    8d18:	dd000417 	ldw	r20,16(sp)
    8d1c:	dcc00317 	ldw	r19,12(sp)
    8d20:	dc800217 	ldw	r18,8(sp)
    8d24:	dc400117 	ldw	r17,4(sp)
    8d28:	dc000017 	ldw	r16,0(sp)
    8d2c:	dec00a04 	addi	sp,sp,40
    8d30:	f800283a 	ret
    8d34:	017fff04 	movi	r5,-4
    8d38:	414a703a 	and	r5,r8,r5
    8d3c:	814d883a 	add	r6,r16,r5
    8d40:	30c01f16 	blt	r6,r3,8dc0 <_realloc_r+0x22c>
    8d44:	20800317 	ldw	r2,12(r4)
    8d48:	20c00217 	ldw	r3,8(r4)
    8d4c:	a825883a 	mov	r18,r21
    8d50:	3021883a 	mov	r16,r6
    8d54:	18800315 	stw	r2,12(r3)
    8d58:	10c00215 	stw	r3,8(r2)
    8d5c:	003fdb06 	br	8ccc <__alt_data_end+0xff008ccc>
    8d60:	00800304 	movi	r2,12
    8d64:	a0800015 	stw	r2,0(r20)
    8d68:	0005883a 	mov	r2,zero
    8d6c:	003fe506 	br	8d04 <__alt_data_end+0xff008d04>
    8d70:	98c00117 	ldw	r3,4(r19)
    8d74:	9c4b883a 	add	r5,r19,r17
    8d78:	11000054 	ori	r4,r2,1
    8d7c:	18c0004c 	andi	r3,r3,1
    8d80:	1c62b03a 	or	r17,r3,r17
    8d84:	9c400115 	stw	r17,4(r19)
    8d88:	29000115 	stw	r4,4(r5)
    8d8c:	2885883a 	add	r2,r5,r2
    8d90:	10c00117 	ldw	r3,4(r2)
    8d94:	29400204 	addi	r5,r5,8
    8d98:	a009883a 	mov	r4,r20
    8d9c:	18c00054 	ori	r3,r3,1
    8da0:	10c00115 	stw	r3,4(r2)
    8da4:	0006afc0 	call	6afc <_free_r>
    8da8:	003fd306 	br	8cf8 <__alt_data_end+0xff008cf8>
    8dac:	017fff04 	movi	r5,-4
    8db0:	414a703a 	and	r5,r8,r5
    8db4:	89800404 	addi	r6,r17,16
    8db8:	8151883a 	add	r8,r16,r5
    8dbc:	4180590e 	bge	r8,r6,8f24 <_realloc_r+0x390>
    8dc0:	1080004c 	andi	r2,r2,1
    8dc4:	103f9e1e 	bne	r2,zero,8c40 <__alt_data_end+0xff008c40>
    8dc8:	adbffe17 	ldw	r22,-8(r21)
    8dcc:	00bfff04 	movi	r2,-4
    8dd0:	9dadc83a 	sub	r22,r19,r22
    8dd4:	b1800117 	ldw	r6,4(r22)
    8dd8:	3084703a 	and	r2,r6,r2
    8ddc:	20002026 	beq	r4,zero,8e60 <_realloc_r+0x2cc>
    8de0:	80af883a 	add	r23,r16,r2
    8de4:	b96f883a 	add	r23,r23,r5
    8de8:	21c05f26 	beq	r4,r7,8f68 <_realloc_r+0x3d4>
    8dec:	b8c01c16 	blt	r23,r3,8e60 <_realloc_r+0x2cc>
    8df0:	20800317 	ldw	r2,12(r4)
    8df4:	20c00217 	ldw	r3,8(r4)
    8df8:	81bfff04 	addi	r6,r16,-4
    8dfc:	01000904 	movi	r4,36
    8e00:	18800315 	stw	r2,12(r3)
    8e04:	10c00215 	stw	r3,8(r2)
    8e08:	b0c00217 	ldw	r3,8(r22)
    8e0c:	b0800317 	ldw	r2,12(r22)
    8e10:	b4800204 	addi	r18,r22,8
    8e14:	18800315 	stw	r2,12(r3)
    8e18:	10c00215 	stw	r3,8(r2)
    8e1c:	21801b36 	bltu	r4,r6,8e8c <_realloc_r+0x2f8>
    8e20:	008004c4 	movi	r2,19
    8e24:	1180352e 	bgeu	r2,r6,8efc <_realloc_r+0x368>
    8e28:	a8800017 	ldw	r2,0(r21)
    8e2c:	b0800215 	stw	r2,8(r22)
    8e30:	a8800117 	ldw	r2,4(r21)
    8e34:	b0800315 	stw	r2,12(r22)
    8e38:	008006c4 	movi	r2,27
    8e3c:	11807f36 	bltu	r2,r6,903c <_realloc_r+0x4a8>
    8e40:	b0800404 	addi	r2,r22,16
    8e44:	ad400204 	addi	r21,r21,8
    8e48:	00002d06 	br	8f00 <_realloc_r+0x36c>
    8e4c:	adbffe17 	ldw	r22,-8(r21)
    8e50:	00bfff04 	movi	r2,-4
    8e54:	9dadc83a 	sub	r22,r19,r22
    8e58:	b1000117 	ldw	r4,4(r22)
    8e5c:	2084703a 	and	r2,r4,r2
    8e60:	b03f7726 	beq	r22,zero,8c40 <__alt_data_end+0xff008c40>
    8e64:	80af883a 	add	r23,r16,r2
    8e68:	b8ff7516 	blt	r23,r3,8c40 <__alt_data_end+0xff008c40>
    8e6c:	b0800317 	ldw	r2,12(r22)
    8e70:	b0c00217 	ldw	r3,8(r22)
    8e74:	81bfff04 	addi	r6,r16,-4
    8e78:	01000904 	movi	r4,36
    8e7c:	18800315 	stw	r2,12(r3)
    8e80:	10c00215 	stw	r3,8(r2)
    8e84:	b4800204 	addi	r18,r22,8
    8e88:	21bfe52e 	bgeu	r4,r6,8e20 <__alt_data_end+0xff008e20>
    8e8c:	a80b883a 	mov	r5,r21
    8e90:	9009883a 	mov	r4,r18
    8e94:	00079140 	call	7914 <memmove>
    8e98:	b821883a 	mov	r16,r23
    8e9c:	b027883a 	mov	r19,r22
    8ea0:	003f8a06 	br	8ccc <__alt_data_end+0xff008ccc>
    8ea4:	300b883a 	mov	r5,r6
    8ea8:	dfc00917 	ldw	ra,36(sp)
    8eac:	df000817 	ldw	fp,32(sp)
    8eb0:	ddc00717 	ldw	r23,28(sp)
    8eb4:	dd800617 	ldw	r22,24(sp)
    8eb8:	dd400517 	ldw	r21,20(sp)
    8ebc:	dd000417 	ldw	r20,16(sp)
    8ec0:	dcc00317 	ldw	r19,12(sp)
    8ec4:	dc800217 	ldw	r18,8(sp)
    8ec8:	dc400117 	ldw	r17,4(sp)
    8ecc:	dc000017 	ldw	r16,0(sp)
    8ed0:	dec00a04 	addi	sp,sp,40
    8ed4:	0001cac1 	jmpi	1cac <_malloc_r>
    8ed8:	a8c00017 	ldw	r3,0(r21)
    8edc:	90c00015 	stw	r3,0(r18)
    8ee0:	a8c00117 	ldw	r3,4(r21)
    8ee4:	90c00115 	stw	r3,4(r18)
    8ee8:	00c006c4 	movi	r3,27
    8eec:	19804536 	bltu	r3,r6,9004 <_realloc_r+0x470>
    8ef0:	90800204 	addi	r2,r18,8
    8ef4:	a8c00204 	addi	r3,r21,8
    8ef8:	003f6306 	br	8c88 <__alt_data_end+0xff008c88>
    8efc:	9005883a 	mov	r2,r18
    8f00:	a8c00017 	ldw	r3,0(r21)
    8f04:	b821883a 	mov	r16,r23
    8f08:	b027883a 	mov	r19,r22
    8f0c:	10c00015 	stw	r3,0(r2)
    8f10:	a8c00117 	ldw	r3,4(r21)
    8f14:	10c00115 	stw	r3,4(r2)
    8f18:	a8c00217 	ldw	r3,8(r21)
    8f1c:	10c00215 	stw	r3,8(r2)
    8f20:	003f6a06 	br	8ccc <__alt_data_end+0xff008ccc>
    8f24:	9c67883a 	add	r19,r19,r17
    8f28:	4445c83a 	sub	r2,r8,r17
    8f2c:	e4c00215 	stw	r19,8(fp)
    8f30:	10800054 	ori	r2,r2,1
    8f34:	98800115 	stw	r2,4(r19)
    8f38:	a8bfff17 	ldw	r2,-4(r21)
    8f3c:	a009883a 	mov	r4,r20
    8f40:	1080004c 	andi	r2,r2,1
    8f44:	1462b03a 	or	r17,r2,r17
    8f48:	ac7fff15 	stw	r17,-4(r21)
    8f4c:	000e9380 	call	e938 <__malloc_unlock>
    8f50:	a805883a 	mov	r2,r21
    8f54:	003f6b06 	br	8d04 <__alt_data_end+0xff008d04>
    8f58:	a80b883a 	mov	r5,r21
    8f5c:	9009883a 	mov	r4,r18
    8f60:	00079140 	call	7914 <memmove>
    8f64:	003f4e06 	br	8ca0 <__alt_data_end+0xff008ca0>
    8f68:	89000404 	addi	r4,r17,16
    8f6c:	b93fbc16 	blt	r23,r4,8e60 <__alt_data_end+0xff008e60>
    8f70:	b0800317 	ldw	r2,12(r22)
    8f74:	b0c00217 	ldw	r3,8(r22)
    8f78:	81bfff04 	addi	r6,r16,-4
    8f7c:	01000904 	movi	r4,36
    8f80:	18800315 	stw	r2,12(r3)
    8f84:	10c00215 	stw	r3,8(r2)
    8f88:	b4800204 	addi	r18,r22,8
    8f8c:	21804336 	bltu	r4,r6,909c <_realloc_r+0x508>
    8f90:	008004c4 	movi	r2,19
    8f94:	11803f2e 	bgeu	r2,r6,9094 <_realloc_r+0x500>
    8f98:	a8800017 	ldw	r2,0(r21)
    8f9c:	b0800215 	stw	r2,8(r22)
    8fa0:	a8800117 	ldw	r2,4(r21)
    8fa4:	b0800315 	stw	r2,12(r22)
    8fa8:	008006c4 	movi	r2,27
    8fac:	11803f36 	bltu	r2,r6,90ac <_realloc_r+0x518>
    8fb0:	b0800404 	addi	r2,r22,16
    8fb4:	ad400204 	addi	r21,r21,8
    8fb8:	a8c00017 	ldw	r3,0(r21)
    8fbc:	10c00015 	stw	r3,0(r2)
    8fc0:	a8c00117 	ldw	r3,4(r21)
    8fc4:	10c00115 	stw	r3,4(r2)
    8fc8:	a8c00217 	ldw	r3,8(r21)
    8fcc:	10c00215 	stw	r3,8(r2)
    8fd0:	b447883a 	add	r3,r22,r17
    8fd4:	bc45c83a 	sub	r2,r23,r17
    8fd8:	e0c00215 	stw	r3,8(fp)
    8fdc:	10800054 	ori	r2,r2,1
    8fe0:	18800115 	stw	r2,4(r3)
    8fe4:	b0800117 	ldw	r2,4(r22)
    8fe8:	a009883a 	mov	r4,r20
    8fec:	1080004c 	andi	r2,r2,1
    8ff0:	1462b03a 	or	r17,r2,r17
    8ff4:	b4400115 	stw	r17,4(r22)
    8ff8:	000e9380 	call	e938 <__malloc_unlock>
    8ffc:	9005883a 	mov	r2,r18
    9000:	003f4006 	br	8d04 <__alt_data_end+0xff008d04>
    9004:	a8c00217 	ldw	r3,8(r21)
    9008:	90c00215 	stw	r3,8(r18)
    900c:	a8c00317 	ldw	r3,12(r21)
    9010:	90c00315 	stw	r3,12(r18)
    9014:	30801126 	beq	r6,r2,905c <_realloc_r+0x4c8>
    9018:	90800404 	addi	r2,r18,16
    901c:	a8c00404 	addi	r3,r21,16
    9020:	003f1906 	br	8c88 <__alt_data_end+0xff008c88>
    9024:	90ffff17 	ldw	r3,-4(r18)
    9028:	00bfff04 	movi	r2,-4
    902c:	a825883a 	mov	r18,r21
    9030:	1884703a 	and	r2,r3,r2
    9034:	80a1883a 	add	r16,r16,r2
    9038:	003f2406 	br	8ccc <__alt_data_end+0xff008ccc>
    903c:	a8800217 	ldw	r2,8(r21)
    9040:	b0800415 	stw	r2,16(r22)
    9044:	a8800317 	ldw	r2,12(r21)
    9048:	b0800515 	stw	r2,20(r22)
    904c:	31000a26 	beq	r6,r4,9078 <_realloc_r+0x4e4>
    9050:	b0800604 	addi	r2,r22,24
    9054:	ad400404 	addi	r21,r21,16
    9058:	003fa906 	br	8f00 <__alt_data_end+0xff008f00>
    905c:	a9000417 	ldw	r4,16(r21)
    9060:	90800604 	addi	r2,r18,24
    9064:	a8c00604 	addi	r3,r21,24
    9068:	91000415 	stw	r4,16(r18)
    906c:	a9000517 	ldw	r4,20(r21)
    9070:	91000515 	stw	r4,20(r18)
    9074:	003f0406 	br	8c88 <__alt_data_end+0xff008c88>
    9078:	a8c00417 	ldw	r3,16(r21)
    907c:	ad400604 	addi	r21,r21,24
    9080:	b0800804 	addi	r2,r22,32
    9084:	b0c00615 	stw	r3,24(r22)
    9088:	a8ffff17 	ldw	r3,-4(r21)
    908c:	b0c00715 	stw	r3,28(r22)
    9090:	003f9b06 	br	8f00 <__alt_data_end+0xff008f00>
    9094:	9005883a 	mov	r2,r18
    9098:	003fc706 	br	8fb8 <__alt_data_end+0xff008fb8>
    909c:	a80b883a 	mov	r5,r21
    90a0:	9009883a 	mov	r4,r18
    90a4:	00079140 	call	7914 <memmove>
    90a8:	003fc906 	br	8fd0 <__alt_data_end+0xff008fd0>
    90ac:	a8800217 	ldw	r2,8(r21)
    90b0:	b0800415 	stw	r2,16(r22)
    90b4:	a8800317 	ldw	r2,12(r21)
    90b8:	b0800515 	stw	r2,20(r22)
    90bc:	31000726 	beq	r6,r4,90dc <_realloc_r+0x548>
    90c0:	b0800604 	addi	r2,r22,24
    90c4:	ad400404 	addi	r21,r21,16
    90c8:	003fbb06 	br	8fb8 <__alt_data_end+0xff008fb8>
    90cc:	a009883a 	mov	r4,r20
    90d0:	000e9380 	call	e938 <__malloc_unlock>
    90d4:	0005883a 	mov	r2,zero
    90d8:	003f0a06 	br	8d04 <__alt_data_end+0xff008d04>
    90dc:	a8c00417 	ldw	r3,16(r21)
    90e0:	ad400604 	addi	r21,r21,24
    90e4:	b0800804 	addi	r2,r22,32
    90e8:	b0c00615 	stw	r3,24(r22)
    90ec:	a8ffff17 	ldw	r3,-4(r21)
    90f0:	b0c00715 	stw	r3,28(r22)
    90f4:	003fb006 	br	8fb8 <__alt_data_end+0xff008fb8>

000090f8 <__fpclassifyd>:
    90f8:	00a00034 	movhi	r2,32768
    90fc:	10bfffc4 	addi	r2,r2,-1
    9100:	2884703a 	and	r2,r5,r2
    9104:	10000726 	beq	r2,zero,9124 <__fpclassifyd+0x2c>
    9108:	00fffc34 	movhi	r3,65520
    910c:	019ff834 	movhi	r6,32736
    9110:	28c7883a 	add	r3,r5,r3
    9114:	31bfffc4 	addi	r6,r6,-1
    9118:	30c00536 	bltu	r6,r3,9130 <__fpclassifyd+0x38>
    911c:	00800104 	movi	r2,4
    9120:	f800283a 	ret
    9124:	2000021e 	bne	r4,zero,9130 <__fpclassifyd+0x38>
    9128:	00800084 	movi	r2,2
    912c:	f800283a 	ret
    9130:	00dffc34 	movhi	r3,32752
    9134:	019ff834 	movhi	r6,32736
    9138:	28cb883a 	add	r5,r5,r3
    913c:	31bfffc4 	addi	r6,r6,-1
    9140:	317ff62e 	bgeu	r6,r5,911c <__alt_data_end+0xff00911c>
    9144:	01400434 	movhi	r5,16
    9148:	297fffc4 	addi	r5,r5,-1
    914c:	28800236 	bltu	r5,r2,9158 <__fpclassifyd+0x60>
    9150:	008000c4 	movi	r2,3
    9154:	f800283a 	ret
    9158:	10c00226 	beq	r2,r3,9164 <__fpclassifyd+0x6c>
    915c:	0005883a 	mov	r2,zero
    9160:	f800283a 	ret
    9164:	2005003a 	cmpeq	r2,r4,zero
    9168:	f800283a 	ret

0000916c <__sread>:
    916c:	defffe04 	addi	sp,sp,-8
    9170:	dc000015 	stw	r16,0(sp)
    9174:	2821883a 	mov	r16,r5
    9178:	2940038f 	ldh	r5,14(r5)
    917c:	dfc00115 	stw	ra,4(sp)
    9180:	000af600 	call	af60 <_read_r>
    9184:	10000716 	blt	r2,zero,91a4 <__sread+0x38>
    9188:	80c01417 	ldw	r3,80(r16)
    918c:	1887883a 	add	r3,r3,r2
    9190:	80c01415 	stw	r3,80(r16)
    9194:	dfc00117 	ldw	ra,4(sp)
    9198:	dc000017 	ldw	r16,0(sp)
    919c:	dec00204 	addi	sp,sp,8
    91a0:	f800283a 	ret
    91a4:	80c0030b 	ldhu	r3,12(r16)
    91a8:	18fbffcc 	andi	r3,r3,61439
    91ac:	80c0030d 	sth	r3,12(r16)
    91b0:	dfc00117 	ldw	ra,4(sp)
    91b4:	dc000017 	ldw	r16,0(sp)
    91b8:	dec00204 	addi	sp,sp,8
    91bc:	f800283a 	ret

000091c0 <__seofread>:
    91c0:	0005883a 	mov	r2,zero
    91c4:	f800283a 	ret

000091c8 <__swrite>:
    91c8:	2880030b 	ldhu	r2,12(r5)
    91cc:	defffb04 	addi	sp,sp,-20
    91d0:	dcc00315 	stw	r19,12(sp)
    91d4:	dc800215 	stw	r18,8(sp)
    91d8:	dc400115 	stw	r17,4(sp)
    91dc:	dc000015 	stw	r16,0(sp)
    91e0:	dfc00415 	stw	ra,16(sp)
    91e4:	10c0400c 	andi	r3,r2,256
    91e8:	2821883a 	mov	r16,r5
    91ec:	2023883a 	mov	r17,r4
    91f0:	3025883a 	mov	r18,r6
    91f4:	3827883a 	mov	r19,r7
    91f8:	18000526 	beq	r3,zero,9210 <__swrite+0x48>
    91fc:	2940038f 	ldh	r5,14(r5)
    9200:	01c00084 	movi	r7,2
    9204:	000d883a 	mov	r6,zero
    9208:	000af000 	call	af00 <_lseek_r>
    920c:	8080030b 	ldhu	r2,12(r16)
    9210:	8140038f 	ldh	r5,14(r16)
    9214:	10bbffcc 	andi	r2,r2,61439
    9218:	980f883a 	mov	r7,r19
    921c:	900d883a 	mov	r6,r18
    9220:	8809883a 	mov	r4,r17
    9224:	8080030d 	sth	r2,12(r16)
    9228:	dfc00417 	ldw	ra,16(sp)
    922c:	dcc00317 	ldw	r19,12(sp)
    9230:	dc800217 	ldw	r18,8(sp)
    9234:	dc400117 	ldw	r17,4(sp)
    9238:	dc000017 	ldw	r16,0(sp)
    923c:	dec00504 	addi	sp,sp,20
    9240:	000a9cc1 	jmpi	a9cc <_write_r>

00009244 <__sseek>:
    9244:	defffe04 	addi	sp,sp,-8
    9248:	dc000015 	stw	r16,0(sp)
    924c:	2821883a 	mov	r16,r5
    9250:	2940038f 	ldh	r5,14(r5)
    9254:	dfc00115 	stw	ra,4(sp)
    9258:	000af000 	call	af00 <_lseek_r>
    925c:	00ffffc4 	movi	r3,-1
    9260:	10c00826 	beq	r2,r3,9284 <__sseek+0x40>
    9264:	80c0030b 	ldhu	r3,12(r16)
    9268:	80801415 	stw	r2,80(r16)
    926c:	18c40014 	ori	r3,r3,4096
    9270:	80c0030d 	sth	r3,12(r16)
    9274:	dfc00117 	ldw	ra,4(sp)
    9278:	dc000017 	ldw	r16,0(sp)
    927c:	dec00204 	addi	sp,sp,8
    9280:	f800283a 	ret
    9284:	80c0030b 	ldhu	r3,12(r16)
    9288:	18fbffcc 	andi	r3,r3,61439
    928c:	80c0030d 	sth	r3,12(r16)
    9290:	dfc00117 	ldw	ra,4(sp)
    9294:	dc000017 	ldw	r16,0(sp)
    9298:	dec00204 	addi	sp,sp,8
    929c:	f800283a 	ret

000092a0 <__sclose>:
    92a0:	2940038f 	ldh	r5,14(r5)
    92a4:	000aa2c1 	jmpi	aa2c <_close_r>

000092a8 <strcmp>:
    92a8:	2144b03a 	or	r2,r4,r5
    92ac:	108000cc 	andi	r2,r2,3
    92b0:	1000171e 	bne	r2,zero,9310 <strcmp+0x68>
    92b4:	20800017 	ldw	r2,0(r4)
    92b8:	28c00017 	ldw	r3,0(r5)
    92bc:	10c0141e 	bne	r2,r3,9310 <strcmp+0x68>
    92c0:	027fbff4 	movhi	r9,65279
    92c4:	4a7fbfc4 	addi	r9,r9,-257
    92c8:	0086303a 	nor	r3,zero,r2
    92cc:	02202074 	movhi	r8,32897
    92d0:	1245883a 	add	r2,r2,r9
    92d4:	42202004 	addi	r8,r8,-32640
    92d8:	10c4703a 	and	r2,r2,r3
    92dc:	1204703a 	and	r2,r2,r8
    92e0:	10000226 	beq	r2,zero,92ec <strcmp+0x44>
    92e4:	00002306 	br	9374 <strcmp+0xcc>
    92e8:	1000221e 	bne	r2,zero,9374 <strcmp+0xcc>
    92ec:	21000104 	addi	r4,r4,4
    92f0:	20c00017 	ldw	r3,0(r4)
    92f4:	29400104 	addi	r5,r5,4
    92f8:	29800017 	ldw	r6,0(r5)
    92fc:	1a4f883a 	add	r7,r3,r9
    9300:	00c4303a 	nor	r2,zero,r3
    9304:	3884703a 	and	r2,r7,r2
    9308:	1204703a 	and	r2,r2,r8
    930c:	19bff626 	beq	r3,r6,92e8 <__alt_data_end+0xff0092e8>
    9310:	20800003 	ldbu	r2,0(r4)
    9314:	10c03fcc 	andi	r3,r2,255
    9318:	18c0201c 	xori	r3,r3,128
    931c:	18ffe004 	addi	r3,r3,-128
    9320:	18000c26 	beq	r3,zero,9354 <strcmp+0xac>
    9324:	29800007 	ldb	r6,0(r5)
    9328:	19800326 	beq	r3,r6,9338 <strcmp+0x90>
    932c:	00001306 	br	937c <strcmp+0xd4>
    9330:	29800007 	ldb	r6,0(r5)
    9334:	11800b1e 	bne	r2,r6,9364 <strcmp+0xbc>
    9338:	21000044 	addi	r4,r4,1
    933c:	20c00003 	ldbu	r3,0(r4)
    9340:	29400044 	addi	r5,r5,1
    9344:	18803fcc 	andi	r2,r3,255
    9348:	1080201c 	xori	r2,r2,128
    934c:	10bfe004 	addi	r2,r2,-128
    9350:	103ff71e 	bne	r2,zero,9330 <__alt_data_end+0xff009330>
    9354:	0007883a 	mov	r3,zero
    9358:	28800003 	ldbu	r2,0(r5)
    935c:	1885c83a 	sub	r2,r3,r2
    9360:	f800283a 	ret
    9364:	28800003 	ldbu	r2,0(r5)
    9368:	18c03fcc 	andi	r3,r3,255
    936c:	1885c83a 	sub	r2,r3,r2
    9370:	f800283a 	ret
    9374:	0005883a 	mov	r2,zero
    9378:	f800283a 	ret
    937c:	10c03fcc 	andi	r3,r2,255
    9380:	003ff506 	br	9358 <__alt_data_end+0xff009358>

00009384 <__sprint_r.part.0>:
    9384:	28801917 	ldw	r2,100(r5)
    9388:	defff604 	addi	sp,sp,-40
    938c:	dd400515 	stw	r21,20(sp)
    9390:	dfc00915 	stw	ra,36(sp)
    9394:	df000815 	stw	fp,32(sp)
    9398:	ddc00715 	stw	r23,28(sp)
    939c:	dd800615 	stw	r22,24(sp)
    93a0:	dd000415 	stw	r20,16(sp)
    93a4:	dcc00315 	stw	r19,12(sp)
    93a8:	dc800215 	stw	r18,8(sp)
    93ac:	dc400115 	stw	r17,4(sp)
    93b0:	dc000015 	stw	r16,0(sp)
    93b4:	1088000c 	andi	r2,r2,8192
    93b8:	302b883a 	mov	r21,r6
    93bc:	10002e26 	beq	r2,zero,9478 <__sprint_r.part.0+0xf4>
    93c0:	30800217 	ldw	r2,8(r6)
    93c4:	35800017 	ldw	r22,0(r6)
    93c8:	10002926 	beq	r2,zero,9470 <__sprint_r.part.0+0xec>
    93cc:	2827883a 	mov	r19,r5
    93d0:	2029883a 	mov	r20,r4
    93d4:	b5c00104 	addi	r23,r22,4
    93d8:	04bfffc4 	movi	r18,-1
    93dc:	bc400017 	ldw	r17,0(r23)
    93e0:	b4000017 	ldw	r16,0(r22)
    93e4:	0039883a 	mov	fp,zero
    93e8:	8822d0ba 	srli	r17,r17,2
    93ec:	8800031e 	bne	r17,zero,93fc <__sprint_r.part.0+0x78>
    93f0:	00001806 	br	9454 <__sprint_r.part.0+0xd0>
    93f4:	84000104 	addi	r16,r16,4
    93f8:	8f001526 	beq	r17,fp,9450 <__sprint_r.part.0+0xcc>
    93fc:	81400017 	ldw	r5,0(r16)
    9400:	980d883a 	mov	r6,r19
    9404:	a009883a 	mov	r4,r20
    9408:	000adac0 	call	adac <_fputwc_r>
    940c:	e7000044 	addi	fp,fp,1
    9410:	14bff81e 	bne	r2,r18,93f4 <__alt_data_end+0xff0093f4>
    9414:	9005883a 	mov	r2,r18
    9418:	a8000215 	stw	zero,8(r21)
    941c:	a8000115 	stw	zero,4(r21)
    9420:	dfc00917 	ldw	ra,36(sp)
    9424:	df000817 	ldw	fp,32(sp)
    9428:	ddc00717 	ldw	r23,28(sp)
    942c:	dd800617 	ldw	r22,24(sp)
    9430:	dd400517 	ldw	r21,20(sp)
    9434:	dd000417 	ldw	r20,16(sp)
    9438:	dcc00317 	ldw	r19,12(sp)
    943c:	dc800217 	ldw	r18,8(sp)
    9440:	dc400117 	ldw	r17,4(sp)
    9444:	dc000017 	ldw	r16,0(sp)
    9448:	dec00a04 	addi	sp,sp,40
    944c:	f800283a 	ret
    9450:	a8800217 	ldw	r2,8(r21)
    9454:	8c63883a 	add	r17,r17,r17
    9458:	8c63883a 	add	r17,r17,r17
    945c:	1445c83a 	sub	r2,r2,r17
    9460:	a8800215 	stw	r2,8(r21)
    9464:	b5800204 	addi	r22,r22,8
    9468:	bdc00204 	addi	r23,r23,8
    946c:	103fdb1e 	bne	r2,zero,93dc <__alt_data_end+0xff0093dc>
    9470:	0005883a 	mov	r2,zero
    9474:	003fe806 	br	9418 <__alt_data_end+0xff009418>
    9478:	0006e0c0 	call	6e0c <__sfvwrite_r>
    947c:	003fe606 	br	9418 <__alt_data_end+0xff009418>

00009480 <__sprint_r>:
    9480:	30c00217 	ldw	r3,8(r6)
    9484:	18000126 	beq	r3,zero,948c <__sprint_r+0xc>
    9488:	00093841 	jmpi	9384 <__sprint_r.part.0>
    948c:	30000115 	stw	zero,4(r6)
    9490:	0005883a 	mov	r2,zero
    9494:	f800283a 	ret

00009498 <___vfiprintf_internal_r>:
    9498:	deffc904 	addi	sp,sp,-220
    949c:	df003515 	stw	fp,212(sp)
    94a0:	dd003115 	stw	r20,196(sp)
    94a4:	dfc03615 	stw	ra,216(sp)
    94a8:	ddc03415 	stw	r23,208(sp)
    94ac:	dd803315 	stw	r22,204(sp)
    94b0:	dd403215 	stw	r21,200(sp)
    94b4:	dcc03015 	stw	r19,192(sp)
    94b8:	dc802f15 	stw	r18,188(sp)
    94bc:	dc402e15 	stw	r17,184(sp)
    94c0:	dc002d15 	stw	r16,180(sp)
    94c4:	d9002015 	stw	r4,128(sp)
    94c8:	d9c02215 	stw	r7,136(sp)
    94cc:	2829883a 	mov	r20,r5
    94d0:	3039883a 	mov	fp,r6
    94d4:	20000226 	beq	r4,zero,94e0 <___vfiprintf_internal_r+0x48>
    94d8:	20800e17 	ldw	r2,56(r4)
    94dc:	1000cf26 	beq	r2,zero,981c <___vfiprintf_internal_r+0x384>
    94e0:	a080030b 	ldhu	r2,12(r20)
    94e4:	10c8000c 	andi	r3,r2,8192
    94e8:	1800061e 	bne	r3,zero,9504 <___vfiprintf_internal_r+0x6c>
    94ec:	a1001917 	ldw	r4,100(r20)
    94f0:	00f7ffc4 	movi	r3,-8193
    94f4:	10880014 	ori	r2,r2,8192
    94f8:	20c6703a 	and	r3,r4,r3
    94fc:	a080030d 	sth	r2,12(r20)
    9500:	a0c01915 	stw	r3,100(r20)
    9504:	10c0020c 	andi	r3,r2,8
    9508:	1800a926 	beq	r3,zero,97b0 <___vfiprintf_internal_r+0x318>
    950c:	a0c00417 	ldw	r3,16(r20)
    9510:	1800a726 	beq	r3,zero,97b0 <___vfiprintf_internal_r+0x318>
    9514:	1080068c 	andi	r2,r2,26
    9518:	00c00284 	movi	r3,10
    951c:	10c0ac26 	beq	r2,r3,97d0 <___vfiprintf_internal_r+0x338>
    9520:	da801a04 	addi	r10,sp,104
    9524:	da801e15 	stw	r10,120(sp)
    9528:	d8801e17 	ldw	r2,120(sp)
    952c:	da8019c4 	addi	r10,sp,103
    9530:	05800074 	movhi	r22,1
    9534:	05c00074 	movhi	r23,1
    9538:	da801f15 	stw	r10,124(sp)
    953c:	1295c83a 	sub	r10,r2,r10
    9540:	b581f504 	addi	r22,r22,2004
    9544:	bdc1f104 	addi	r23,r23,1988
    9548:	dec01a15 	stw	sp,104(sp)
    954c:	d8001c15 	stw	zero,112(sp)
    9550:	d8001b15 	stw	zero,108(sp)
    9554:	d8002615 	stw	zero,152(sp)
    9558:	d8002315 	stw	zero,140(sp)
    955c:	da802715 	stw	r10,156(sp)
    9560:	d811883a 	mov	r8,sp
    9564:	dd002115 	stw	r20,132(sp)
    9568:	e021883a 	mov	r16,fp
    956c:	80800007 	ldb	r2,0(r16)
    9570:	1003ea26 	beq	r2,zero,a51c <___vfiprintf_internal_r+0x1084>
    9574:	00c00944 	movi	r3,37
    9578:	8025883a 	mov	r18,r16
    957c:	10c0021e 	bne	r2,r3,9588 <___vfiprintf_internal_r+0xf0>
    9580:	00001606 	br	95dc <___vfiprintf_internal_r+0x144>
    9584:	10c00326 	beq	r2,r3,9594 <___vfiprintf_internal_r+0xfc>
    9588:	94800044 	addi	r18,r18,1
    958c:	90800007 	ldb	r2,0(r18)
    9590:	103ffc1e 	bne	r2,zero,9584 <__alt_data_end+0xff009584>
    9594:	9423c83a 	sub	r17,r18,r16
    9598:	88001026 	beq	r17,zero,95dc <___vfiprintf_internal_r+0x144>
    959c:	d8c01c17 	ldw	r3,112(sp)
    95a0:	d8801b17 	ldw	r2,108(sp)
    95a4:	44000015 	stw	r16,0(r8)
    95a8:	88c7883a 	add	r3,r17,r3
    95ac:	10800044 	addi	r2,r2,1
    95b0:	44400115 	stw	r17,4(r8)
    95b4:	d8c01c15 	stw	r3,112(sp)
    95b8:	d8801b15 	stw	r2,108(sp)
    95bc:	010001c4 	movi	r4,7
    95c0:	2080760e 	bge	r4,r2,979c <___vfiprintf_internal_r+0x304>
    95c4:	1803821e 	bne	r3,zero,a3d0 <___vfiprintf_internal_r+0xf38>
    95c8:	da802317 	ldw	r10,140(sp)
    95cc:	d8001b15 	stw	zero,108(sp)
    95d0:	d811883a 	mov	r8,sp
    95d4:	5455883a 	add	r10,r10,r17
    95d8:	da802315 	stw	r10,140(sp)
    95dc:	90800007 	ldb	r2,0(r18)
    95e0:	10044626 	beq	r2,zero,a6fc <___vfiprintf_internal_r+0x1264>
    95e4:	90c00047 	ldb	r3,1(r18)
    95e8:	94000044 	addi	r16,r18,1
    95ec:	d8001d85 	stb	zero,118(sp)
    95f0:	0009883a 	mov	r4,zero
    95f4:	000f883a 	mov	r7,zero
    95f8:	027fffc4 	movi	r9,-1
    95fc:	0023883a 	mov	r17,zero
    9600:	0029883a 	mov	r20,zero
    9604:	01401604 	movi	r5,88
    9608:	01800244 	movi	r6,9
    960c:	03400a84 	movi	r13,42
    9610:	03001b04 	movi	r12,108
    9614:	84000044 	addi	r16,r16,1
    9618:	18bff804 	addi	r2,r3,-32
    961c:	28827336 	bltu	r5,r2,9fec <___vfiprintf_internal_r+0xb54>
    9620:	100490ba 	slli	r2,r2,2
    9624:	02800074 	movhi	r10,1
    9628:	52a58e04 	addi	r10,r10,-27080
    962c:	1285883a 	add	r2,r2,r10
    9630:	10800017 	ldw	r2,0(r2)
    9634:	1000683a 	jmp	r2
    9638:	00009d20 	cmpeqi	zero,zero,628
    963c:	00009fec 	andhi	zero,zero,639
    9640:	00009fec 	andhi	zero,zero,639
    9644:	00009d40 	call	9d4 <init_LCD+0xa0>
    9648:	00009fec 	andhi	zero,zero,639
    964c:	00009fec 	andhi	zero,zero,639
    9650:	00009fec 	andhi	zero,zero,639
    9654:	00009fec 	andhi	zero,zero,639
    9658:	00009fec 	andhi	zero,zero,639
    965c:	00009fec 	andhi	zero,zero,639
    9660:	00009f28 	cmpgeui	zero,zero,636
    9664:	00009f44 	movi	zero,637
    9668:	00009fec 	andhi	zero,zero,639
    966c:	0000982c 	andhi	zero,zero,608
    9670:	00009f54 	movui	zero,637
    9674:	00009fec 	andhi	zero,zero,639
    9678:	00009d4c 	andi	zero,zero,629
    967c:	00009d58 	cmpnei	zero,zero,629
    9680:	00009d58 	cmpnei	zero,zero,629
    9684:	00009d58 	cmpnei	zero,zero,629
    9688:	00009d58 	cmpnei	zero,zero,629
    968c:	00009d58 	cmpnei	zero,zero,629
    9690:	00009d58 	cmpnei	zero,zero,629
    9694:	00009d58 	cmpnei	zero,zero,629
    9698:	00009d58 	cmpnei	zero,zero,629
    969c:	00009d58 	cmpnei	zero,zero,629
    96a0:	00009fec 	andhi	zero,zero,639
    96a4:	00009fec 	andhi	zero,zero,639
    96a8:	00009fec 	andhi	zero,zero,639
    96ac:	00009fec 	andhi	zero,zero,639
    96b0:	00009fec 	andhi	zero,zero,639
    96b4:	00009fec 	andhi	zero,zero,639
    96b8:	00009fec 	andhi	zero,zero,639
    96bc:	00009fec 	andhi	zero,zero,639
    96c0:	00009fec 	andhi	zero,zero,639
    96c4:	00009fec 	andhi	zero,zero,639
    96c8:	00009d84 	movi	zero,630
    96cc:	00009fec 	andhi	zero,zero,639
    96d0:	00009fec 	andhi	zero,zero,639
    96d4:	00009fec 	andhi	zero,zero,639
    96d8:	00009fec 	andhi	zero,zero,639
    96dc:	00009fec 	andhi	zero,zero,639
    96e0:	00009fec 	andhi	zero,zero,639
    96e4:	00009fec 	andhi	zero,zero,639
    96e8:	00009fec 	andhi	zero,zero,639
    96ec:	00009fec 	andhi	zero,zero,639
    96f0:	00009fec 	andhi	zero,zero,639
    96f4:	00009dbc 	xorhi	zero,zero,630
    96f8:	00009fec 	andhi	zero,zero,639
    96fc:	00009fec 	andhi	zero,zero,639
    9700:	00009fec 	andhi	zero,zero,639
    9704:	00009fec 	andhi	zero,zero,639
    9708:	00009fec 	andhi	zero,zero,639
    970c:	00009e14 	movui	zero,632
    9710:	00009fec 	andhi	zero,zero,639
    9714:	00009fec 	andhi	zero,zero,639
    9718:	00009e84 	movi	zero,634
    971c:	00009fec 	andhi	zero,zero,639
    9720:	00009fec 	andhi	zero,zero,639
    9724:	00009fec 	andhi	zero,zero,639
    9728:	00009fec 	andhi	zero,zero,639
    972c:	00009fec 	andhi	zero,zero,639
    9730:	00009fec 	andhi	zero,zero,639
    9734:	00009fec 	andhi	zero,zero,639
    9738:	00009fec 	andhi	zero,zero,639
    973c:	00009fec 	andhi	zero,zero,639
    9740:	00009fec 	andhi	zero,zero,639
    9744:	00009c30 	cmpltui	zero,zero,624
    9748:	00009c5c 	xori	zero,zero,625
    974c:	00009fec 	andhi	zero,zero,639
    9750:	00009fec 	andhi	zero,zero,639
    9754:	00009fec 	andhi	zero,zero,639
    9758:	00009f94 	movui	zero,638
    975c:	00009c5c 	xori	zero,zero,625
    9760:	00009fec 	andhi	zero,zero,639
    9764:	00009fec 	andhi	zero,zero,639
    9768:	00009af0 	cmpltui	zero,zero,619
    976c:	00009fec 	andhi	zero,zero,639
    9770:	00009b00 	call	9b0 <init_LCD+0x7c>
    9774:	00009b3c 	xorhi	zero,zero,620
    9778:	00009838 	rdprs	zero,zero,608
    977c:	00009ae4 	muli	zero,zero,619
    9780:	00009fec 	andhi	zero,zero,639
    9784:	00009ec0 	call	9ec <init_LCD+0xb8>
    9788:	00009fec 	andhi	zero,zero,639
    978c:	00009f18 	cmpnei	zero,zero,636
    9790:	00009fec 	andhi	zero,zero,639
    9794:	00009fec 	andhi	zero,zero,639
    9798:	00009bdc 	xori	zero,zero,623
    979c:	42000204 	addi	r8,r8,8
    97a0:	da802317 	ldw	r10,140(sp)
    97a4:	5455883a 	add	r10,r10,r17
    97a8:	da802315 	stw	r10,140(sp)
    97ac:	003f8b06 	br	95dc <__alt_data_end+0xff0095dc>
    97b0:	d9002017 	ldw	r4,128(sp)
    97b4:	a00b883a 	mov	r5,r20
    97b8:	00049b40 	call	49b4 <__swsetup_r>
    97bc:	1003b11e 	bne	r2,zero,a684 <___vfiprintf_internal_r+0x11ec>
    97c0:	a080030b 	ldhu	r2,12(r20)
    97c4:	00c00284 	movi	r3,10
    97c8:	1080068c 	andi	r2,r2,26
    97cc:	10ff541e 	bne	r2,r3,9520 <__alt_data_end+0xff009520>
    97d0:	a080038f 	ldh	r2,14(r20)
    97d4:	103f5216 	blt	r2,zero,9520 <__alt_data_end+0xff009520>
    97d8:	d9c02217 	ldw	r7,136(sp)
    97dc:	d9002017 	ldw	r4,128(sp)
    97e0:	e00d883a 	mov	r6,fp
    97e4:	a00b883a 	mov	r5,r20
    97e8:	000a9100 	call	a910 <__sbprintf>
    97ec:	dfc03617 	ldw	ra,216(sp)
    97f0:	df003517 	ldw	fp,212(sp)
    97f4:	ddc03417 	ldw	r23,208(sp)
    97f8:	dd803317 	ldw	r22,204(sp)
    97fc:	dd403217 	ldw	r21,200(sp)
    9800:	dd003117 	ldw	r20,196(sp)
    9804:	dcc03017 	ldw	r19,192(sp)
    9808:	dc802f17 	ldw	r18,188(sp)
    980c:	dc402e17 	ldw	r17,184(sp)
    9810:	dc002d17 	ldw	r16,180(sp)
    9814:	dec03704 	addi	sp,sp,220
    9818:	f800283a 	ret
    981c:	00069880 	call	6988 <__sinit>
    9820:	003f2f06 	br	94e0 <__alt_data_end+0xff0094e0>
    9824:	0463c83a 	sub	r17,zero,r17
    9828:	d8802215 	stw	r2,136(sp)
    982c:	a5000114 	ori	r20,r20,4
    9830:	80c00007 	ldb	r3,0(r16)
    9834:	003f7706 	br	9614 <__alt_data_end+0xff009614>
    9838:	00800c04 	movi	r2,48
    983c:	da802217 	ldw	r10,136(sp)
    9840:	d8801d05 	stb	r2,116(sp)
    9844:	00801e04 	movi	r2,120
    9848:	d8801d45 	stb	r2,117(sp)
    984c:	d8001d85 	stb	zero,118(sp)
    9850:	50c00104 	addi	r3,r10,4
    9854:	54800017 	ldw	r18,0(r10)
    9858:	0027883a 	mov	r19,zero
    985c:	a0800094 	ori	r2,r20,2
    9860:	48030b16 	blt	r9,zero,a490 <___vfiprintf_internal_r+0xff8>
    9864:	00bfdfc4 	movi	r2,-129
    9868:	a096703a 	and	r11,r20,r2
    986c:	d8c02215 	stw	r3,136(sp)
    9870:	5d000094 	ori	r20,r11,2
    9874:	90032b1e 	bne	r18,zero,a524 <___vfiprintf_internal_r+0x108c>
    9878:	00800074 	movhi	r2,1
    987c:	10819004 	addi	r2,r2,1600
    9880:	d8802615 	stw	r2,152(sp)
    9884:	0039883a 	mov	fp,zero
    9888:	48017b1e 	bne	r9,zero,9e78 <___vfiprintf_internal_r+0x9e0>
    988c:	0013883a 	mov	r9,zero
    9890:	0027883a 	mov	r19,zero
    9894:	dd401a04 	addi	r21,sp,104
    9898:	4825883a 	mov	r18,r9
    989c:	4cc0010e 	bge	r9,r19,98a4 <___vfiprintf_internal_r+0x40c>
    98a0:	9825883a 	mov	r18,r19
    98a4:	e7003fcc 	andi	fp,fp,255
    98a8:	e700201c 	xori	fp,fp,128
    98ac:	e73fe004 	addi	fp,fp,-128
    98b0:	e0000126 	beq	fp,zero,98b8 <___vfiprintf_internal_r+0x420>
    98b4:	94800044 	addi	r18,r18,1
    98b8:	a380008c 	andi	r14,r20,2
    98bc:	70000126 	beq	r14,zero,98c4 <___vfiprintf_internal_r+0x42c>
    98c0:	94800084 	addi	r18,r18,2
    98c4:	a700210c 	andi	fp,r20,132
    98c8:	e001df1e 	bne	fp,zero,a048 <___vfiprintf_internal_r+0xbb0>
    98cc:	8c87c83a 	sub	r3,r17,r18
    98d0:	00c1dd0e 	bge	zero,r3,a048 <___vfiprintf_internal_r+0xbb0>
    98d4:	01c00404 	movi	r7,16
    98d8:	d8801c17 	ldw	r2,112(sp)
    98dc:	38c3ad0e 	bge	r7,r3,a794 <___vfiprintf_internal_r+0x12fc>
    98e0:	02800074 	movhi	r10,1
    98e4:	5281f504 	addi	r10,r10,2004
    98e8:	dc002915 	stw	r16,164(sp)
    98ec:	d9801b17 	ldw	r6,108(sp)
    98f0:	da802415 	stw	r10,144(sp)
    98f4:	03c001c4 	movi	r15,7
    98f8:	da402515 	stw	r9,148(sp)
    98fc:	db802815 	stw	r14,160(sp)
    9900:	1821883a 	mov	r16,r3
    9904:	00000506 	br	991c <___vfiprintf_internal_r+0x484>
    9908:	31400084 	addi	r5,r6,2
    990c:	42000204 	addi	r8,r8,8
    9910:	200d883a 	mov	r6,r4
    9914:	843ffc04 	addi	r16,r16,-16
    9918:	3c000d0e 	bge	r7,r16,9950 <___vfiprintf_internal_r+0x4b8>
    991c:	10800404 	addi	r2,r2,16
    9920:	31000044 	addi	r4,r6,1
    9924:	45800015 	stw	r22,0(r8)
    9928:	41c00115 	stw	r7,4(r8)
    992c:	d8801c15 	stw	r2,112(sp)
    9930:	d9001b15 	stw	r4,108(sp)
    9934:	793ff40e 	bge	r15,r4,9908 <__alt_data_end+0xff009908>
    9938:	1001b51e 	bne	r2,zero,a010 <___vfiprintf_internal_r+0xb78>
    993c:	843ffc04 	addi	r16,r16,-16
    9940:	000d883a 	mov	r6,zero
    9944:	01400044 	movi	r5,1
    9948:	d811883a 	mov	r8,sp
    994c:	3c3ff316 	blt	r7,r16,991c <__alt_data_end+0xff00991c>
    9950:	8007883a 	mov	r3,r16
    9954:	da402517 	ldw	r9,148(sp)
    9958:	db802817 	ldw	r14,160(sp)
    995c:	dc002917 	ldw	r16,164(sp)
    9960:	da802417 	ldw	r10,144(sp)
    9964:	1885883a 	add	r2,r3,r2
    9968:	40c00115 	stw	r3,4(r8)
    996c:	42800015 	stw	r10,0(r8)
    9970:	d8801c15 	stw	r2,112(sp)
    9974:	d9401b15 	stw	r5,108(sp)
    9978:	00c001c4 	movi	r3,7
    997c:	19426016 	blt	r3,r5,a300 <___vfiprintf_internal_r+0xe68>
    9980:	d8c01d87 	ldb	r3,118(sp)
    9984:	42000204 	addi	r8,r8,8
    9988:	29000044 	addi	r4,r5,1
    998c:	1801b31e 	bne	r3,zero,a05c <___vfiprintf_internal_r+0xbc4>
    9990:	7001c026 	beq	r14,zero,a094 <___vfiprintf_internal_r+0xbfc>
    9994:	d8c01d04 	addi	r3,sp,116
    9998:	10800084 	addi	r2,r2,2
    999c:	40c00015 	stw	r3,0(r8)
    99a0:	00c00084 	movi	r3,2
    99a4:	40c00115 	stw	r3,4(r8)
    99a8:	d8801c15 	stw	r2,112(sp)
    99ac:	d9001b15 	stw	r4,108(sp)
    99b0:	00c001c4 	movi	r3,7
    99b4:	1902650e 	bge	r3,r4,a34c <___vfiprintf_internal_r+0xeb4>
    99b8:	10029a1e 	bne	r2,zero,a424 <___vfiprintf_internal_r+0xf8c>
    99bc:	00c02004 	movi	r3,128
    99c0:	01000044 	movi	r4,1
    99c4:	000b883a 	mov	r5,zero
    99c8:	d811883a 	mov	r8,sp
    99cc:	e0c1b31e 	bne	fp,r3,a09c <___vfiprintf_internal_r+0xc04>
    99d0:	8cb9c83a 	sub	fp,r17,r18
    99d4:	0701b10e 	bge	zero,fp,a09c <___vfiprintf_internal_r+0xc04>
    99d8:	01c00404 	movi	r7,16
    99dc:	3f03890e 	bge	r7,fp,a804 <___vfiprintf_internal_r+0x136c>
    99e0:	00c00074 	movhi	r3,1
    99e4:	18c1f104 	addi	r3,r3,1988
    99e8:	d8c02415 	stw	r3,144(sp)
    99ec:	8007883a 	mov	r3,r16
    99f0:	034001c4 	movi	r13,7
    99f4:	e021883a 	mov	r16,fp
    99f8:	da402515 	stw	r9,148(sp)
    99fc:	1839883a 	mov	fp,r3
    9a00:	00000506 	br	9a18 <___vfiprintf_internal_r+0x580>
    9a04:	29800084 	addi	r6,r5,2
    9a08:	42000204 	addi	r8,r8,8
    9a0c:	180b883a 	mov	r5,r3
    9a10:	843ffc04 	addi	r16,r16,-16
    9a14:	3c000d0e 	bge	r7,r16,9a4c <___vfiprintf_internal_r+0x5b4>
    9a18:	10800404 	addi	r2,r2,16
    9a1c:	28c00044 	addi	r3,r5,1
    9a20:	45c00015 	stw	r23,0(r8)
    9a24:	41c00115 	stw	r7,4(r8)
    9a28:	d8801c15 	stw	r2,112(sp)
    9a2c:	d8c01b15 	stw	r3,108(sp)
    9a30:	68fff40e 	bge	r13,r3,9a04 <__alt_data_end+0xff009a04>
    9a34:	1002241e 	bne	r2,zero,a2c8 <___vfiprintf_internal_r+0xe30>
    9a38:	843ffc04 	addi	r16,r16,-16
    9a3c:	01800044 	movi	r6,1
    9a40:	000b883a 	mov	r5,zero
    9a44:	d811883a 	mov	r8,sp
    9a48:	3c3ff316 	blt	r7,r16,9a18 <__alt_data_end+0xff009a18>
    9a4c:	da402517 	ldw	r9,148(sp)
    9a50:	e007883a 	mov	r3,fp
    9a54:	8039883a 	mov	fp,r16
    9a58:	1821883a 	mov	r16,r3
    9a5c:	d8c02417 	ldw	r3,144(sp)
    9a60:	1705883a 	add	r2,r2,fp
    9a64:	47000115 	stw	fp,4(r8)
    9a68:	40c00015 	stw	r3,0(r8)
    9a6c:	d8801c15 	stw	r2,112(sp)
    9a70:	d9801b15 	stw	r6,108(sp)
    9a74:	00c001c4 	movi	r3,7
    9a78:	19827616 	blt	r3,r6,a454 <___vfiprintf_internal_r+0xfbc>
    9a7c:	4cf9c83a 	sub	fp,r9,r19
    9a80:	42000204 	addi	r8,r8,8
    9a84:	31000044 	addi	r4,r6,1
    9a88:	300b883a 	mov	r5,r6
    9a8c:	07018516 	blt	zero,fp,a0a4 <___vfiprintf_internal_r+0xc0c>
    9a90:	9885883a 	add	r2,r19,r2
    9a94:	45400015 	stw	r21,0(r8)
    9a98:	44c00115 	stw	r19,4(r8)
    9a9c:	d8801c15 	stw	r2,112(sp)
    9aa0:	d9001b15 	stw	r4,108(sp)
    9aa4:	00c001c4 	movi	r3,7
    9aa8:	1901dd0e 	bge	r3,r4,a220 <___vfiprintf_internal_r+0xd88>
    9aac:	1002401e 	bne	r2,zero,a3b0 <___vfiprintf_internal_r+0xf18>
    9ab0:	d8001b15 	stw	zero,108(sp)
    9ab4:	a2c0010c 	andi	r11,r20,4
    9ab8:	58000226 	beq	r11,zero,9ac4 <___vfiprintf_internal_r+0x62c>
    9abc:	8ca7c83a 	sub	r19,r17,r18
    9ac0:	04c2f216 	blt	zero,r19,a68c <___vfiprintf_internal_r+0x11f4>
    9ac4:	8c80010e 	bge	r17,r18,9acc <___vfiprintf_internal_r+0x634>
    9ac8:	9023883a 	mov	r17,r18
    9acc:	da802317 	ldw	r10,140(sp)
    9ad0:	5455883a 	add	r10,r10,r17
    9ad4:	da802315 	stw	r10,140(sp)
    9ad8:	d8001b15 	stw	zero,108(sp)
    9adc:	d811883a 	mov	r8,sp
    9ae0:	003ea206 	br	956c <__alt_data_end+0xff00956c>
    9ae4:	a5000814 	ori	r20,r20,32
    9ae8:	80c00007 	ldb	r3,0(r16)
    9aec:	003ec906 	br	9614 <__alt_data_end+0xff009614>
    9af0:	80c00007 	ldb	r3,0(r16)
    9af4:	1b030926 	beq	r3,r12,a71c <___vfiprintf_internal_r+0x1284>
    9af8:	a5000414 	ori	r20,r20,16
    9afc:	003ec506 	br	9614 <__alt_data_end+0xff009614>
    9b00:	21003fcc 	andi	r4,r4,255
    9b04:	20035e1e 	bne	r4,zero,a880 <___vfiprintf_internal_r+0x13e8>
    9b08:	a080080c 	andi	r2,r20,32
    9b0c:	1002a526 	beq	r2,zero,a5a4 <___vfiprintf_internal_r+0x110c>
    9b10:	da802217 	ldw	r10,136(sp)
    9b14:	50800017 	ldw	r2,0(r10)
    9b18:	da802317 	ldw	r10,140(sp)
    9b1c:	5007d7fa 	srai	r3,r10,31
    9b20:	da802217 	ldw	r10,136(sp)
    9b24:	10c00115 	stw	r3,4(r2)
    9b28:	52800104 	addi	r10,r10,4
    9b2c:	da802215 	stw	r10,136(sp)
    9b30:	da802317 	ldw	r10,140(sp)
    9b34:	12800015 	stw	r10,0(r2)
    9b38:	003e8c06 	br	956c <__alt_data_end+0xff00956c>
    9b3c:	21003fcc 	andi	r4,r4,255
    9b40:	2003511e 	bne	r4,zero,a888 <___vfiprintf_internal_r+0x13f0>
    9b44:	a080080c 	andi	r2,r20,32
    9b48:	1000a126 	beq	r2,zero,9dd0 <___vfiprintf_internal_r+0x938>
    9b4c:	da802217 	ldw	r10,136(sp)
    9b50:	d8001d85 	stb	zero,118(sp)
    9b54:	50800204 	addi	r2,r10,8
    9b58:	54800017 	ldw	r18,0(r10)
    9b5c:	54c00117 	ldw	r19,4(r10)
    9b60:	4802b416 	blt	r9,zero,a634 <___vfiprintf_internal_r+0x119c>
    9b64:	013fdfc4 	movi	r4,-129
    9b68:	94c6b03a 	or	r3,r18,r19
    9b6c:	d8802215 	stw	r2,136(sp)
    9b70:	a128703a 	and	r20,r20,r4
    9b74:	1800a226 	beq	r3,zero,9e00 <___vfiprintf_internal_r+0x968>
    9b78:	0039883a 	mov	fp,zero
    9b7c:	dd401a04 	addi	r21,sp,104
    9b80:	9006d0fa 	srli	r3,r18,3
    9b84:	9808977a 	slli	r4,r19,29
    9b88:	9826d0fa 	srli	r19,r19,3
    9b8c:	948001cc 	andi	r18,r18,7
    9b90:	90800c04 	addi	r2,r18,48
    9b94:	ad7fffc4 	addi	r21,r21,-1
    9b98:	20e4b03a 	or	r18,r4,r3
    9b9c:	a8800005 	stb	r2,0(r21)
    9ba0:	94c6b03a 	or	r3,r18,r19
    9ba4:	183ff61e 	bne	r3,zero,9b80 <__alt_data_end+0xff009b80>
    9ba8:	a0c0004c 	andi	r3,r20,1
    9bac:	18005926 	beq	r3,zero,9d14 <___vfiprintf_internal_r+0x87c>
    9bb0:	10803fcc 	andi	r2,r2,255
    9bb4:	1080201c 	xori	r2,r2,128
    9bb8:	10bfe004 	addi	r2,r2,-128
    9bbc:	00c00c04 	movi	r3,48
    9bc0:	10c05426 	beq	r2,r3,9d14 <___vfiprintf_internal_r+0x87c>
    9bc4:	da801e17 	ldw	r10,120(sp)
    9bc8:	a8bfffc4 	addi	r2,r21,-1
    9bcc:	a8ffffc5 	stb	r3,-1(r21)
    9bd0:	50a7c83a 	sub	r19,r10,r2
    9bd4:	102b883a 	mov	r21,r2
    9bd8:	003f2f06 	br	9898 <__alt_data_end+0xff009898>
    9bdc:	21003fcc 	andi	r4,r4,255
    9be0:	2003421e 	bne	r4,zero,a8ec <___vfiprintf_internal_r+0x1454>
    9be4:	00800074 	movhi	r2,1
    9be8:	10819004 	addi	r2,r2,1600
    9bec:	d8802615 	stw	r2,152(sp)
    9bf0:	a080080c 	andi	r2,r20,32
    9bf4:	1000aa26 	beq	r2,zero,9ea0 <___vfiprintf_internal_r+0xa08>
    9bf8:	da802217 	ldw	r10,136(sp)
    9bfc:	54800017 	ldw	r18,0(r10)
    9c00:	54c00117 	ldw	r19,4(r10)
    9c04:	52800204 	addi	r10,r10,8
    9c08:	da802215 	stw	r10,136(sp)
    9c0c:	a080004c 	andi	r2,r20,1
    9c10:	1001d226 	beq	r2,zero,a35c <___vfiprintf_internal_r+0xec4>
    9c14:	94c4b03a 	or	r2,r18,r19
    9c18:	1002351e 	bne	r2,zero,a4f0 <___vfiprintf_internal_r+0x1058>
    9c1c:	d8001d85 	stb	zero,118(sp)
    9c20:	48022216 	blt	r9,zero,a4ac <___vfiprintf_internal_r+0x1014>
    9c24:	00bfdfc4 	movi	r2,-129
    9c28:	a0a8703a 	and	r20,r20,r2
    9c2c:	003f1506 	br	9884 <__alt_data_end+0xff009884>
    9c30:	da802217 	ldw	r10,136(sp)
    9c34:	04800044 	movi	r18,1
    9c38:	d8001d85 	stb	zero,118(sp)
    9c3c:	50800017 	ldw	r2,0(r10)
    9c40:	52800104 	addi	r10,r10,4
    9c44:	da802215 	stw	r10,136(sp)
    9c48:	d8801005 	stb	r2,64(sp)
    9c4c:	9027883a 	mov	r19,r18
    9c50:	dd401004 	addi	r21,sp,64
    9c54:	0013883a 	mov	r9,zero
    9c58:	003f1706 	br	98b8 <__alt_data_end+0xff0098b8>
    9c5c:	21003fcc 	andi	r4,r4,255
    9c60:	2003201e 	bne	r4,zero,a8e4 <___vfiprintf_internal_r+0x144c>
    9c64:	a080080c 	andi	r2,r20,32
    9c68:	10004b26 	beq	r2,zero,9d98 <___vfiprintf_internal_r+0x900>
    9c6c:	da802217 	ldw	r10,136(sp)
    9c70:	50800117 	ldw	r2,4(r10)
    9c74:	54800017 	ldw	r18,0(r10)
    9c78:	52800204 	addi	r10,r10,8
    9c7c:	da802215 	stw	r10,136(sp)
    9c80:	1027883a 	mov	r19,r2
    9c84:	10022c16 	blt	r2,zero,a538 <___vfiprintf_internal_r+0x10a0>
    9c88:	df001d83 	ldbu	fp,118(sp)
    9c8c:	48007216 	blt	r9,zero,9e58 <___vfiprintf_internal_r+0x9c0>
    9c90:	00ffdfc4 	movi	r3,-129
    9c94:	94c4b03a 	or	r2,r18,r19
    9c98:	a0e8703a 	and	r20,r20,r3
    9c9c:	1000cc26 	beq	r2,zero,9fd0 <___vfiprintf_internal_r+0xb38>
    9ca0:	98021026 	beq	r19,zero,a4e4 <___vfiprintf_internal_r+0x104c>
    9ca4:	dc402415 	stw	r17,144(sp)
    9ca8:	dc002515 	stw	r16,148(sp)
    9cac:	9823883a 	mov	r17,r19
    9cb0:	9021883a 	mov	r16,r18
    9cb4:	dd401a04 	addi	r21,sp,104
    9cb8:	4825883a 	mov	r18,r9
    9cbc:	4027883a 	mov	r19,r8
    9cc0:	8009883a 	mov	r4,r16
    9cc4:	880b883a 	mov	r5,r17
    9cc8:	01800284 	movi	r6,10
    9ccc:	000f883a 	mov	r7,zero
    9cd0:	000b8780 	call	b878 <__umoddi3>
    9cd4:	10800c04 	addi	r2,r2,48
    9cd8:	ad7fffc4 	addi	r21,r21,-1
    9cdc:	8009883a 	mov	r4,r16
    9ce0:	880b883a 	mov	r5,r17
    9ce4:	a8800005 	stb	r2,0(r21)
    9ce8:	01800284 	movi	r6,10
    9cec:	000f883a 	mov	r7,zero
    9cf0:	000b3000 	call	b300 <__udivdi3>
    9cf4:	1021883a 	mov	r16,r2
    9cf8:	10c4b03a 	or	r2,r2,r3
    9cfc:	1823883a 	mov	r17,r3
    9d00:	103fef1e 	bne	r2,zero,9cc0 <__alt_data_end+0xff009cc0>
    9d04:	dc402417 	ldw	r17,144(sp)
    9d08:	dc002517 	ldw	r16,148(sp)
    9d0c:	9013883a 	mov	r9,r18
    9d10:	9811883a 	mov	r8,r19
    9d14:	da801e17 	ldw	r10,120(sp)
    9d18:	5567c83a 	sub	r19,r10,r21
    9d1c:	003ede06 	br	9898 <__alt_data_end+0xff009898>
    9d20:	38803fcc 	andi	r2,r7,255
    9d24:	1080201c 	xori	r2,r2,128
    9d28:	10bfe004 	addi	r2,r2,-128
    9d2c:	1002371e 	bne	r2,zero,a60c <___vfiprintf_internal_r+0x1174>
    9d30:	01000044 	movi	r4,1
    9d34:	01c00804 	movi	r7,32
    9d38:	80c00007 	ldb	r3,0(r16)
    9d3c:	003e3506 	br	9614 <__alt_data_end+0xff009614>
    9d40:	a5000054 	ori	r20,r20,1
    9d44:	80c00007 	ldb	r3,0(r16)
    9d48:	003e3206 	br	9614 <__alt_data_end+0xff009614>
    9d4c:	a5002014 	ori	r20,r20,128
    9d50:	80c00007 	ldb	r3,0(r16)
    9d54:	003e2f06 	br	9614 <__alt_data_end+0xff009614>
    9d58:	8015883a 	mov	r10,r16
    9d5c:	0023883a 	mov	r17,zero
    9d60:	18bff404 	addi	r2,r3,-48
    9d64:	50c00007 	ldb	r3,0(r10)
    9d68:	8c4002a4 	muli	r17,r17,10
    9d6c:	84000044 	addi	r16,r16,1
    9d70:	8015883a 	mov	r10,r16
    9d74:	1463883a 	add	r17,r2,r17
    9d78:	18bff404 	addi	r2,r3,-48
    9d7c:	30bff92e 	bgeu	r6,r2,9d64 <__alt_data_end+0xff009d64>
    9d80:	003e2506 	br	9618 <__alt_data_end+0xff009618>
    9d84:	21003fcc 	andi	r4,r4,255
    9d88:	2002d41e 	bne	r4,zero,a8dc <___vfiprintf_internal_r+0x1444>
    9d8c:	a5000414 	ori	r20,r20,16
    9d90:	a080080c 	andi	r2,r20,32
    9d94:	103fb51e 	bne	r2,zero,9c6c <__alt_data_end+0xff009c6c>
    9d98:	a080040c 	andi	r2,r20,16
    9d9c:	1001f826 	beq	r2,zero,a580 <___vfiprintf_internal_r+0x10e8>
    9da0:	da802217 	ldw	r10,136(sp)
    9da4:	54800017 	ldw	r18,0(r10)
    9da8:	52800104 	addi	r10,r10,4
    9dac:	da802215 	stw	r10,136(sp)
    9db0:	9027d7fa 	srai	r19,r18,31
    9db4:	9805883a 	mov	r2,r19
    9db8:	003fb206 	br	9c84 <__alt_data_end+0xff009c84>
    9dbc:	21003fcc 	andi	r4,r4,255
    9dc0:	2002c41e 	bne	r4,zero,a8d4 <___vfiprintf_internal_r+0x143c>
    9dc4:	a5000414 	ori	r20,r20,16
    9dc8:	a080080c 	andi	r2,r20,32
    9dcc:	103f5f1e 	bne	r2,zero,9b4c <__alt_data_end+0xff009b4c>
    9dd0:	a080040c 	andi	r2,r20,16
    9dd4:	10020f26 	beq	r2,zero,a614 <___vfiprintf_internal_r+0x117c>
    9dd8:	da802217 	ldw	r10,136(sp)
    9ddc:	d8001d85 	stb	zero,118(sp)
    9de0:	0027883a 	mov	r19,zero
    9de4:	50800104 	addi	r2,r10,4
    9de8:	54800017 	ldw	r18,0(r10)
    9dec:	48021116 	blt	r9,zero,a634 <___vfiprintf_internal_r+0x119c>
    9df0:	00ffdfc4 	movi	r3,-129
    9df4:	d8802215 	stw	r2,136(sp)
    9df8:	a0e8703a 	and	r20,r20,r3
    9dfc:	903f5e1e 	bne	r18,zero,9b78 <__alt_data_end+0xff009b78>
    9e00:	0039883a 	mov	fp,zero
    9e04:	4802a626 	beq	r9,zero,a8a0 <___vfiprintf_internal_r+0x1408>
    9e08:	0025883a 	mov	r18,zero
    9e0c:	0027883a 	mov	r19,zero
    9e10:	003f5a06 	br	9b7c <__alt_data_end+0xff009b7c>
    9e14:	21003fcc 	andi	r4,r4,255
    9e18:	20029f1e 	bne	r4,zero,a898 <___vfiprintf_internal_r+0x1400>
    9e1c:	a5000414 	ori	r20,r20,16
    9e20:	a080080c 	andi	r2,r20,32
    9e24:	10005e1e 	bne	r2,zero,9fa0 <___vfiprintf_internal_r+0xb08>
    9e28:	a080040c 	andi	r2,r20,16
    9e2c:	1001a21e 	bne	r2,zero,a4b8 <___vfiprintf_internal_r+0x1020>
    9e30:	a080100c 	andi	r2,r20,64
    9e34:	d8001d85 	stb	zero,118(sp)
    9e38:	da802217 	ldw	r10,136(sp)
    9e3c:	1002231e 	bne	r2,zero,a6cc <___vfiprintf_internal_r+0x1234>
    9e40:	50800104 	addi	r2,r10,4
    9e44:	54800017 	ldw	r18,0(r10)
    9e48:	0027883a 	mov	r19,zero
    9e4c:	4801a00e 	bge	r9,zero,a4d0 <___vfiprintf_internal_r+0x1038>
    9e50:	d8802215 	stw	r2,136(sp)
    9e54:	0039883a 	mov	fp,zero
    9e58:	94c4b03a 	or	r2,r18,r19
    9e5c:	103f901e 	bne	r2,zero,9ca0 <__alt_data_end+0xff009ca0>
    9e60:	00800044 	movi	r2,1
    9e64:	10803fcc 	andi	r2,r2,255
    9e68:	00c00044 	movi	r3,1
    9e6c:	10c05926 	beq	r2,r3,9fd4 <___vfiprintf_internal_r+0xb3c>
    9e70:	00c00084 	movi	r3,2
    9e74:	10ffe41e 	bne	r2,r3,9e08 <__alt_data_end+0xff009e08>
    9e78:	0025883a 	mov	r18,zero
    9e7c:	0027883a 	mov	r19,zero
    9e80:	00013d06 	br	a378 <___vfiprintf_internal_r+0xee0>
    9e84:	21003fcc 	andi	r4,r4,255
    9e88:	2002811e 	bne	r4,zero,a890 <___vfiprintf_internal_r+0x13f8>
    9e8c:	00800074 	movhi	r2,1
    9e90:	10818b04 	addi	r2,r2,1580
    9e94:	d8802615 	stw	r2,152(sp)
    9e98:	a080080c 	andi	r2,r20,32
    9e9c:	103f561e 	bne	r2,zero,9bf8 <__alt_data_end+0xff009bf8>
    9ea0:	a080040c 	andi	r2,r20,16
    9ea4:	1001d126 	beq	r2,zero,a5ec <___vfiprintf_internal_r+0x1154>
    9ea8:	da802217 	ldw	r10,136(sp)
    9eac:	0027883a 	mov	r19,zero
    9eb0:	54800017 	ldw	r18,0(r10)
    9eb4:	52800104 	addi	r10,r10,4
    9eb8:	da802215 	stw	r10,136(sp)
    9ebc:	003f5306 	br	9c0c <__alt_data_end+0xff009c0c>
    9ec0:	da802217 	ldw	r10,136(sp)
    9ec4:	d8001d85 	stb	zero,118(sp)
    9ec8:	55400017 	ldw	r21,0(r10)
    9ecc:	50c00104 	addi	r3,r10,4
    9ed0:	a8024226 	beq	r21,zero,a7dc <___vfiprintf_internal_r+0x1344>
    9ed4:	48021816 	blt	r9,zero,a738 <___vfiprintf_internal_r+0x12a0>
    9ed8:	480d883a 	mov	r6,r9
    9edc:	000b883a 	mov	r5,zero
    9ee0:	a809883a 	mov	r4,r21
    9ee4:	d8c02a15 	stw	r3,168(sp)
    9ee8:	da002b15 	stw	r8,172(sp)
    9eec:	da402c15 	stw	r9,176(sp)
    9ef0:	00076e80 	call	76e8 <memchr>
    9ef4:	d8c02a17 	ldw	r3,168(sp)
    9ef8:	da002b17 	ldw	r8,172(sp)
    9efc:	da402c17 	ldw	r9,176(sp)
    9f00:	10024826 	beq	r2,zero,a824 <___vfiprintf_internal_r+0x138c>
    9f04:	1567c83a 	sub	r19,r2,r21
    9f08:	df001d83 	ldbu	fp,118(sp)
    9f0c:	d8c02215 	stw	r3,136(sp)
    9f10:	0013883a 	mov	r9,zero
    9f14:	003e6006 	br	9898 <__alt_data_end+0xff009898>
    9f18:	21003fcc 	andi	r4,r4,255
    9f1c:	203fc026 	beq	r4,zero,9e20 <__alt_data_end+0xff009e20>
    9f20:	d9c01d85 	stb	r7,118(sp)
    9f24:	003fbe06 	br	9e20 <__alt_data_end+0xff009e20>
    9f28:	da802217 	ldw	r10,136(sp)
    9f2c:	54400017 	ldw	r17,0(r10)
    9f30:	50800104 	addi	r2,r10,4
    9f34:	883e3b16 	blt	r17,zero,9824 <__alt_data_end+0xff009824>
    9f38:	d8802215 	stw	r2,136(sp)
    9f3c:	80c00007 	ldb	r3,0(r16)
    9f40:	003db406 	br	9614 <__alt_data_end+0xff009614>
    9f44:	01000044 	movi	r4,1
    9f48:	01c00ac4 	movi	r7,43
    9f4c:	80c00007 	ldb	r3,0(r16)
    9f50:	003db006 	br	9614 <__alt_data_end+0xff009614>
    9f54:	80c00007 	ldb	r3,0(r16)
    9f58:	82800044 	addi	r10,r16,1
    9f5c:	1b423c26 	beq	r3,r13,a850 <___vfiprintf_internal_r+0x13b8>
    9f60:	18bff404 	addi	r2,r3,-48
    9f64:	0013883a 	mov	r9,zero
    9f68:	30822b36 	bltu	r6,r2,a818 <___vfiprintf_internal_r+0x1380>
    9f6c:	50c00007 	ldb	r3,0(r10)
    9f70:	4a4002a4 	muli	r9,r9,10
    9f74:	54000044 	addi	r16,r10,1
    9f78:	8015883a 	mov	r10,r16
    9f7c:	4893883a 	add	r9,r9,r2
    9f80:	18bff404 	addi	r2,r3,-48
    9f84:	30bff92e 	bgeu	r6,r2,9f6c <__alt_data_end+0xff009f6c>
    9f88:	483da30e 	bge	r9,zero,9618 <__alt_data_end+0xff009618>
    9f8c:	027fffc4 	movi	r9,-1
    9f90:	003da106 	br	9618 <__alt_data_end+0xff009618>
    9f94:	a5001014 	ori	r20,r20,64
    9f98:	80c00007 	ldb	r3,0(r16)
    9f9c:	003d9d06 	br	9614 <__alt_data_end+0xff009614>
    9fa0:	da802217 	ldw	r10,136(sp)
    9fa4:	d8001d85 	stb	zero,118(sp)
    9fa8:	50c00204 	addi	r3,r10,8
    9fac:	54800017 	ldw	r18,0(r10)
    9fb0:	54c00117 	ldw	r19,4(r10)
    9fb4:	4801ca16 	blt	r9,zero,a6e0 <___vfiprintf_internal_r+0x1248>
    9fb8:	013fdfc4 	movi	r4,-129
    9fbc:	94c4b03a 	or	r2,r18,r19
    9fc0:	d8c02215 	stw	r3,136(sp)
    9fc4:	a128703a 	and	r20,r20,r4
    9fc8:	0039883a 	mov	fp,zero
    9fcc:	103f341e 	bne	r2,zero,9ca0 <__alt_data_end+0xff009ca0>
    9fd0:	483e2e26 	beq	r9,zero,988c <__alt_data_end+0xff00988c>
    9fd4:	0025883a 	mov	r18,zero
    9fd8:	94800c04 	addi	r18,r18,48
    9fdc:	dc8019c5 	stb	r18,103(sp)
    9fe0:	dcc02717 	ldw	r19,156(sp)
    9fe4:	dd4019c4 	addi	r21,sp,103
    9fe8:	003e2b06 	br	9898 <__alt_data_end+0xff009898>
    9fec:	21003fcc 	andi	r4,r4,255
    9ff0:	2002361e 	bne	r4,zero,a8cc <___vfiprintf_internal_r+0x1434>
    9ff4:	1801c126 	beq	r3,zero,a6fc <___vfiprintf_internal_r+0x1264>
    9ff8:	04800044 	movi	r18,1
    9ffc:	d8c01005 	stb	r3,64(sp)
    a000:	d8001d85 	stb	zero,118(sp)
    a004:	9027883a 	mov	r19,r18
    a008:	dd401004 	addi	r21,sp,64
    a00c:	003f1106 	br	9c54 <__alt_data_end+0xff009c54>
    a010:	d9402117 	ldw	r5,132(sp)
    a014:	d9002017 	ldw	r4,128(sp)
    a018:	d9801a04 	addi	r6,sp,104
    a01c:	d9c02b15 	stw	r7,172(sp)
    a020:	dbc02a15 	stw	r15,168(sp)
    a024:	00093840 	call	9384 <__sprint_r.part.0>
    a028:	d9c02b17 	ldw	r7,172(sp)
    a02c:	dbc02a17 	ldw	r15,168(sp)
    a030:	10006d1e 	bne	r2,zero,a1e8 <___vfiprintf_internal_r+0xd50>
    a034:	d9801b17 	ldw	r6,108(sp)
    a038:	d8801c17 	ldw	r2,112(sp)
    a03c:	d811883a 	mov	r8,sp
    a040:	31400044 	addi	r5,r6,1
    a044:	003e3306 	br	9914 <__alt_data_end+0xff009914>
    a048:	d9401b17 	ldw	r5,108(sp)
    a04c:	d8801c17 	ldw	r2,112(sp)
    a050:	29000044 	addi	r4,r5,1
    a054:	d8c01d87 	ldb	r3,118(sp)
    a058:	183e4d26 	beq	r3,zero,9990 <__alt_data_end+0xff009990>
    a05c:	00c00044 	movi	r3,1
    a060:	d9401d84 	addi	r5,sp,118
    a064:	10c5883a 	add	r2,r2,r3
    a068:	41400015 	stw	r5,0(r8)
    a06c:	40c00115 	stw	r3,4(r8)
    a070:	d8801c15 	stw	r2,112(sp)
    a074:	d9001b15 	stw	r4,108(sp)
    a078:	014001c4 	movi	r5,7
    a07c:	2900a90e 	bge	r5,r4,a324 <___vfiprintf_internal_r+0xe8c>
    a080:	1000da1e 	bne	r2,zero,a3ec <___vfiprintf_internal_r+0xf54>
    a084:	7000ab1e 	bne	r14,zero,a334 <___vfiprintf_internal_r+0xe9c>
    a088:	000b883a 	mov	r5,zero
    a08c:	1809883a 	mov	r4,r3
    a090:	d811883a 	mov	r8,sp
    a094:	00c02004 	movi	r3,128
    a098:	e0fe4d26 	beq	fp,r3,99d0 <__alt_data_end+0xff0099d0>
    a09c:	4cf9c83a 	sub	fp,r9,r19
    a0a0:	073e7b0e 	bge	zero,fp,9a90 <__alt_data_end+0xff009a90>
    a0a4:	01c00404 	movi	r7,16
    a0a8:	3f01900e 	bge	r7,fp,a6ec <___vfiprintf_internal_r+0x1254>
    a0ac:	00c00074 	movhi	r3,1
    a0b0:	18c1f104 	addi	r3,r3,1988
    a0b4:	d8c02415 	stw	r3,144(sp)
    a0b8:	034001c4 	movi	r13,7
    a0bc:	00000506 	br	a0d4 <___vfiprintf_internal_r+0xc3c>
    a0c0:	29000084 	addi	r4,r5,2
    a0c4:	42000204 	addi	r8,r8,8
    a0c8:	180b883a 	mov	r5,r3
    a0cc:	e73ffc04 	addi	fp,fp,-16
    a0d0:	3f000d0e 	bge	r7,fp,a108 <___vfiprintf_internal_r+0xc70>
    a0d4:	10800404 	addi	r2,r2,16
    a0d8:	28c00044 	addi	r3,r5,1
    a0dc:	45c00015 	stw	r23,0(r8)
    a0e0:	41c00115 	stw	r7,4(r8)
    a0e4:	d8801c15 	stw	r2,112(sp)
    a0e8:	d8c01b15 	stw	r3,108(sp)
    a0ec:	68fff40e 	bge	r13,r3,a0c0 <__alt_data_end+0xff00a0c0>
    a0f0:	1000101e 	bne	r2,zero,a134 <___vfiprintf_internal_r+0xc9c>
    a0f4:	e73ffc04 	addi	fp,fp,-16
    a0f8:	01000044 	movi	r4,1
    a0fc:	000b883a 	mov	r5,zero
    a100:	d811883a 	mov	r8,sp
    a104:	3f3ff316 	blt	r7,fp,a0d4 <__alt_data_end+0xff00a0d4>
    a108:	da802417 	ldw	r10,144(sp)
    a10c:	1705883a 	add	r2,r2,fp
    a110:	47000115 	stw	fp,4(r8)
    a114:	42800015 	stw	r10,0(r8)
    a118:	d8801c15 	stw	r2,112(sp)
    a11c:	d9001b15 	stw	r4,108(sp)
    a120:	00c001c4 	movi	r3,7
    a124:	19003616 	blt	r3,r4,a200 <___vfiprintf_internal_r+0xd68>
    a128:	42000204 	addi	r8,r8,8
    a12c:	21000044 	addi	r4,r4,1
    a130:	003e5706 	br	9a90 <__alt_data_end+0xff009a90>
    a134:	d9402117 	ldw	r5,132(sp)
    a138:	d9002017 	ldw	r4,128(sp)
    a13c:	d9801a04 	addi	r6,sp,104
    a140:	d9c02b15 	stw	r7,172(sp)
    a144:	db402a15 	stw	r13,168(sp)
    a148:	00093840 	call	9384 <__sprint_r.part.0>
    a14c:	d9c02b17 	ldw	r7,172(sp)
    a150:	db402a17 	ldw	r13,168(sp)
    a154:	1000241e 	bne	r2,zero,a1e8 <___vfiprintf_internal_r+0xd50>
    a158:	d9401b17 	ldw	r5,108(sp)
    a15c:	d8801c17 	ldw	r2,112(sp)
    a160:	d811883a 	mov	r8,sp
    a164:	29000044 	addi	r4,r5,1
    a168:	003fd806 	br	a0cc <__alt_data_end+0xff00a0cc>
    a16c:	d9401b17 	ldw	r5,108(sp)
    a170:	00c00074 	movhi	r3,1
    a174:	18c1f504 	addi	r3,r3,2004
    a178:	d8c02415 	stw	r3,144(sp)
    a17c:	29400044 	addi	r5,r5,1
    a180:	d8c02417 	ldw	r3,144(sp)
    a184:	14c5883a 	add	r2,r2,r19
    a188:	44c00115 	stw	r19,4(r8)
    a18c:	40c00015 	stw	r3,0(r8)
    a190:	d8801c15 	stw	r2,112(sp)
    a194:	d9401b15 	stw	r5,108(sp)
    a198:	00c001c4 	movi	r3,7
    a19c:	1940070e 	bge	r3,r5,a1bc <___vfiprintf_internal_r+0xd24>
    a1a0:	103e4826 	beq	r2,zero,9ac4 <__alt_data_end+0xff009ac4>
    a1a4:	d9402117 	ldw	r5,132(sp)
    a1a8:	d9002017 	ldw	r4,128(sp)
    a1ac:	d9801a04 	addi	r6,sp,104
    a1b0:	00093840 	call	9384 <__sprint_r.part.0>
    a1b4:	10000c1e 	bne	r2,zero,a1e8 <___vfiprintf_internal_r+0xd50>
    a1b8:	d8801c17 	ldw	r2,112(sp)
    a1bc:	8c80010e 	bge	r17,r18,a1c4 <___vfiprintf_internal_r+0xd2c>
    a1c0:	9023883a 	mov	r17,r18
    a1c4:	da802317 	ldw	r10,140(sp)
    a1c8:	5455883a 	add	r10,r10,r17
    a1cc:	da802315 	stw	r10,140(sp)
    a1d0:	103e4126 	beq	r2,zero,9ad8 <__alt_data_end+0xff009ad8>
    a1d4:	d9402117 	ldw	r5,132(sp)
    a1d8:	d9002017 	ldw	r4,128(sp)
    a1dc:	d9801a04 	addi	r6,sp,104
    a1e0:	00093840 	call	9384 <__sprint_r.part.0>
    a1e4:	103e3c26 	beq	r2,zero,9ad8 <__alt_data_end+0xff009ad8>
    a1e8:	dd002117 	ldw	r20,132(sp)
    a1ec:	a080030b 	ldhu	r2,12(r20)
    a1f0:	1080100c 	andi	r2,r2,64
    a1f4:	1001231e 	bne	r2,zero,a684 <___vfiprintf_internal_r+0x11ec>
    a1f8:	d8802317 	ldw	r2,140(sp)
    a1fc:	003d7b06 	br	97ec <__alt_data_end+0xff0097ec>
    a200:	1000991e 	bne	r2,zero,a468 <___vfiprintf_internal_r+0xfd0>
    a204:	00c00044 	movi	r3,1
    a208:	9805883a 	mov	r2,r19
    a20c:	dd400015 	stw	r21,0(sp)
    a210:	dcc00115 	stw	r19,4(sp)
    a214:	dcc01c15 	stw	r19,112(sp)
    a218:	d8c01b15 	stw	r3,108(sp)
    a21c:	d811883a 	mov	r8,sp
    a220:	42000204 	addi	r8,r8,8
    a224:	a2c0010c 	andi	r11,r20,4
    a228:	583fe426 	beq	r11,zero,a1bc <__alt_data_end+0xff00a1bc>
    a22c:	8ca7c83a 	sub	r19,r17,r18
    a230:	04ffe20e 	bge	zero,r19,a1bc <__alt_data_end+0xff00a1bc>
    a234:	01c00404 	movi	r7,16
    a238:	3cffcc0e 	bge	r7,r19,a16c <__alt_data_end+0xff00a16c>
    a23c:	02800074 	movhi	r10,1
    a240:	5281f504 	addi	r10,r10,2004
    a244:	d9001b17 	ldw	r4,108(sp)
    a248:	da802415 	stw	r10,144(sp)
    a24c:	382b883a 	mov	r21,r7
    a250:	050001c4 	movi	r20,7
    a254:	df002017 	ldw	fp,128(sp)
    a258:	00000506 	br	a270 <___vfiprintf_internal_r+0xdd8>
    a25c:	21400084 	addi	r5,r4,2
    a260:	42000204 	addi	r8,r8,8
    a264:	1809883a 	mov	r4,r3
    a268:	9cfffc04 	addi	r19,r19,-16
    a26c:	acffc40e 	bge	r21,r19,a180 <__alt_data_end+0xff00a180>
    a270:	10800404 	addi	r2,r2,16
    a274:	20c00044 	addi	r3,r4,1
    a278:	45800015 	stw	r22,0(r8)
    a27c:	45400115 	stw	r21,4(r8)
    a280:	d8801c15 	stw	r2,112(sp)
    a284:	d8c01b15 	stw	r3,108(sp)
    a288:	a0fff40e 	bge	r20,r3,a25c <__alt_data_end+0xff00a25c>
    a28c:	1000041e 	bne	r2,zero,a2a0 <___vfiprintf_internal_r+0xe08>
    a290:	01400044 	movi	r5,1
    a294:	0009883a 	mov	r4,zero
    a298:	d811883a 	mov	r8,sp
    a29c:	003ff206 	br	a268 <__alt_data_end+0xff00a268>
    a2a0:	d9402117 	ldw	r5,132(sp)
    a2a4:	d9801a04 	addi	r6,sp,104
    a2a8:	e009883a 	mov	r4,fp
    a2ac:	00093840 	call	9384 <__sprint_r.part.0>
    a2b0:	103fcd1e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a2b4:	d9001b17 	ldw	r4,108(sp)
    a2b8:	d8801c17 	ldw	r2,112(sp)
    a2bc:	d811883a 	mov	r8,sp
    a2c0:	21400044 	addi	r5,r4,1
    a2c4:	003fe806 	br	a268 <__alt_data_end+0xff00a268>
    a2c8:	d9402117 	ldw	r5,132(sp)
    a2cc:	d9002017 	ldw	r4,128(sp)
    a2d0:	d9801a04 	addi	r6,sp,104
    a2d4:	d9c02b15 	stw	r7,172(sp)
    a2d8:	db402a15 	stw	r13,168(sp)
    a2dc:	00093840 	call	9384 <__sprint_r.part.0>
    a2e0:	d9c02b17 	ldw	r7,172(sp)
    a2e4:	db402a17 	ldw	r13,168(sp)
    a2e8:	103fbf1e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a2ec:	d9401b17 	ldw	r5,108(sp)
    a2f0:	d8801c17 	ldw	r2,112(sp)
    a2f4:	d811883a 	mov	r8,sp
    a2f8:	29800044 	addi	r6,r5,1
    a2fc:	003dc406 	br	9a10 <__alt_data_end+0xff009a10>
    a300:	1000d21e 	bne	r2,zero,a64c <___vfiprintf_internal_r+0x11b4>
    a304:	d8c01d87 	ldb	r3,118(sp)
    a308:	18009526 	beq	r3,zero,a560 <___vfiprintf_internal_r+0x10c8>
    a30c:	00800044 	movi	r2,1
    a310:	d8c01d84 	addi	r3,sp,118
    a314:	1009883a 	mov	r4,r2
    a318:	d8c00015 	stw	r3,0(sp)
    a31c:	d8800115 	stw	r2,4(sp)
    a320:	d811883a 	mov	r8,sp
    a324:	200b883a 	mov	r5,r4
    a328:	42000204 	addi	r8,r8,8
    a32c:	21000044 	addi	r4,r4,1
    a330:	003d9706 	br	9990 <__alt_data_end+0xff009990>
    a334:	d9001d04 	addi	r4,sp,116
    a338:	00800084 	movi	r2,2
    a33c:	d9000015 	stw	r4,0(sp)
    a340:	d8800115 	stw	r2,4(sp)
    a344:	1809883a 	mov	r4,r3
    a348:	d811883a 	mov	r8,sp
    a34c:	200b883a 	mov	r5,r4
    a350:	42000204 	addi	r8,r8,8
    a354:	21000044 	addi	r4,r4,1
    a358:	003f4e06 	br	a094 <__alt_data_end+0xff00a094>
    a35c:	d8001d85 	stb	zero,118(sp)
    a360:	48005016 	blt	r9,zero,a4a4 <___vfiprintf_internal_r+0x100c>
    a364:	00ffdfc4 	movi	r3,-129
    a368:	94c4b03a 	or	r2,r18,r19
    a36c:	a0e8703a 	and	r20,r20,r3
    a370:	103d4426 	beq	r2,zero,9884 <__alt_data_end+0xff009884>
    a374:	0039883a 	mov	fp,zero
    a378:	d9002617 	ldw	r4,152(sp)
    a37c:	dd401a04 	addi	r21,sp,104
    a380:	908003cc 	andi	r2,r18,15
    a384:	9806973a 	slli	r3,r19,28
    a388:	2085883a 	add	r2,r4,r2
    a38c:	9024d13a 	srli	r18,r18,4
    a390:	10800003 	ldbu	r2,0(r2)
    a394:	9826d13a 	srli	r19,r19,4
    a398:	ad7fffc4 	addi	r21,r21,-1
    a39c:	1ca4b03a 	or	r18,r3,r18
    a3a0:	a8800005 	stb	r2,0(r21)
    a3a4:	94c4b03a 	or	r2,r18,r19
    a3a8:	103ff51e 	bne	r2,zero,a380 <__alt_data_end+0xff00a380>
    a3ac:	003e5906 	br	9d14 <__alt_data_end+0xff009d14>
    a3b0:	d9402117 	ldw	r5,132(sp)
    a3b4:	d9002017 	ldw	r4,128(sp)
    a3b8:	d9801a04 	addi	r6,sp,104
    a3bc:	00093840 	call	9384 <__sprint_r.part.0>
    a3c0:	103f891e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a3c4:	d8801c17 	ldw	r2,112(sp)
    a3c8:	d811883a 	mov	r8,sp
    a3cc:	003f9506 	br	a224 <__alt_data_end+0xff00a224>
    a3d0:	d9402117 	ldw	r5,132(sp)
    a3d4:	d9002017 	ldw	r4,128(sp)
    a3d8:	d9801a04 	addi	r6,sp,104
    a3dc:	00093840 	call	9384 <__sprint_r.part.0>
    a3e0:	103f811e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a3e4:	d811883a 	mov	r8,sp
    a3e8:	003ced06 	br	97a0 <__alt_data_end+0xff0097a0>
    a3ec:	d9402117 	ldw	r5,132(sp)
    a3f0:	d9002017 	ldw	r4,128(sp)
    a3f4:	d9801a04 	addi	r6,sp,104
    a3f8:	da402c15 	stw	r9,176(sp)
    a3fc:	db802a15 	stw	r14,168(sp)
    a400:	00093840 	call	9384 <__sprint_r.part.0>
    a404:	da402c17 	ldw	r9,176(sp)
    a408:	db802a17 	ldw	r14,168(sp)
    a40c:	103f761e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a410:	d9401b17 	ldw	r5,108(sp)
    a414:	d8801c17 	ldw	r2,112(sp)
    a418:	d811883a 	mov	r8,sp
    a41c:	29000044 	addi	r4,r5,1
    a420:	003d5b06 	br	9990 <__alt_data_end+0xff009990>
    a424:	d9402117 	ldw	r5,132(sp)
    a428:	d9002017 	ldw	r4,128(sp)
    a42c:	d9801a04 	addi	r6,sp,104
    a430:	da402c15 	stw	r9,176(sp)
    a434:	00093840 	call	9384 <__sprint_r.part.0>
    a438:	da402c17 	ldw	r9,176(sp)
    a43c:	103f6a1e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a440:	d9401b17 	ldw	r5,108(sp)
    a444:	d8801c17 	ldw	r2,112(sp)
    a448:	d811883a 	mov	r8,sp
    a44c:	29000044 	addi	r4,r5,1
    a450:	003f1006 	br	a094 <__alt_data_end+0xff00a094>
    a454:	1000c31e 	bne	r2,zero,a764 <___vfiprintf_internal_r+0x12cc>
    a458:	01000044 	movi	r4,1
    a45c:	000b883a 	mov	r5,zero
    a460:	d811883a 	mov	r8,sp
    a464:	003f0d06 	br	a09c <__alt_data_end+0xff00a09c>
    a468:	d9402117 	ldw	r5,132(sp)
    a46c:	d9002017 	ldw	r4,128(sp)
    a470:	d9801a04 	addi	r6,sp,104
    a474:	00093840 	call	9384 <__sprint_r.part.0>
    a478:	103f5b1e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a47c:	d9001b17 	ldw	r4,108(sp)
    a480:	d8801c17 	ldw	r2,112(sp)
    a484:	d811883a 	mov	r8,sp
    a488:	21000044 	addi	r4,r4,1
    a48c:	003d8006 	br	9a90 <__alt_data_end+0xff009a90>
    a490:	01000074 	movhi	r4,1
    a494:	21019004 	addi	r4,r4,1600
    a498:	d9002615 	stw	r4,152(sp)
    a49c:	d8c02215 	stw	r3,136(sp)
    a4a0:	1029883a 	mov	r20,r2
    a4a4:	94c4b03a 	or	r2,r18,r19
    a4a8:	103fb21e 	bne	r2,zero,a374 <__alt_data_end+0xff00a374>
    a4ac:	0039883a 	mov	fp,zero
    a4b0:	00800084 	movi	r2,2
    a4b4:	003e6b06 	br	9e64 <__alt_data_end+0xff009e64>
    a4b8:	da802217 	ldw	r10,136(sp)
    a4bc:	d8001d85 	stb	zero,118(sp)
    a4c0:	0027883a 	mov	r19,zero
    a4c4:	50800104 	addi	r2,r10,4
    a4c8:	54800017 	ldw	r18,0(r10)
    a4cc:	483e6016 	blt	r9,zero,9e50 <__alt_data_end+0xff009e50>
    a4d0:	00ffdfc4 	movi	r3,-129
    a4d4:	d8802215 	stw	r2,136(sp)
    a4d8:	a0e8703a 	and	r20,r20,r3
    a4dc:	0039883a 	mov	fp,zero
    a4e0:	903ebb26 	beq	r18,zero,9fd0 <__alt_data_end+0xff009fd0>
    a4e4:	00800244 	movi	r2,9
    a4e8:	14bdee36 	bltu	r2,r18,9ca4 <__alt_data_end+0xff009ca4>
    a4ec:	003eba06 	br	9fd8 <__alt_data_end+0xff009fd8>
    a4f0:	00800c04 	movi	r2,48
    a4f4:	d8c01d45 	stb	r3,117(sp)
    a4f8:	d8801d05 	stb	r2,116(sp)
    a4fc:	d8001d85 	stb	zero,118(sp)
    a500:	a0c00094 	ori	r3,r20,2
    a504:	4800a916 	blt	r9,zero,a7ac <___vfiprintf_internal_r+0x1314>
    a508:	00bfdfc4 	movi	r2,-129
    a50c:	a096703a 	and	r11,r20,r2
    a510:	5d000094 	ori	r20,r11,2
    a514:	0039883a 	mov	fp,zero
    a518:	003f9706 	br	a378 <__alt_data_end+0xff00a378>
    a51c:	8025883a 	mov	r18,r16
    a520:	003c2e06 	br	95dc <__alt_data_end+0xff0095dc>
    a524:	00800074 	movhi	r2,1
    a528:	10819004 	addi	r2,r2,1600
    a52c:	0039883a 	mov	fp,zero
    a530:	d8802615 	stw	r2,152(sp)
    a534:	003f9006 	br	a378 <__alt_data_end+0xff00a378>
    a538:	04a5c83a 	sub	r18,zero,r18
    a53c:	07000b44 	movi	fp,45
    a540:	9004c03a 	cmpne	r2,r18,zero
    a544:	04e7c83a 	sub	r19,zero,r19
    a548:	df001d85 	stb	fp,118(sp)
    a54c:	98a7c83a 	sub	r19,r19,r2
    a550:	48009f16 	blt	r9,zero,a7d0 <___vfiprintf_internal_r+0x1338>
    a554:	00bfdfc4 	movi	r2,-129
    a558:	a0a8703a 	and	r20,r20,r2
    a55c:	003dd006 	br	9ca0 <__alt_data_end+0xff009ca0>
    a560:	70004c26 	beq	r14,zero,a694 <___vfiprintf_internal_r+0x11fc>
    a564:	00800084 	movi	r2,2
    a568:	d8c01d04 	addi	r3,sp,116
    a56c:	d8c00015 	stw	r3,0(sp)
    a570:	d8800115 	stw	r2,4(sp)
    a574:	01000044 	movi	r4,1
    a578:	d811883a 	mov	r8,sp
    a57c:	003f7306 	br	a34c <__alt_data_end+0xff00a34c>
    a580:	a080100c 	andi	r2,r20,64
    a584:	da802217 	ldw	r10,136(sp)
    a588:	103e0626 	beq	r2,zero,9da4 <__alt_data_end+0xff009da4>
    a58c:	5480000f 	ldh	r18,0(r10)
    a590:	52800104 	addi	r10,r10,4
    a594:	da802215 	stw	r10,136(sp)
    a598:	9027d7fa 	srai	r19,r18,31
    a59c:	9805883a 	mov	r2,r19
    a5a0:	003db806 	br	9c84 <__alt_data_end+0xff009c84>
    a5a4:	a080040c 	andi	r2,r20,16
    a5a8:	1000091e 	bne	r2,zero,a5d0 <___vfiprintf_internal_r+0x1138>
    a5ac:	a2c0100c 	andi	r11,r20,64
    a5b0:	58000726 	beq	r11,zero,a5d0 <___vfiprintf_internal_r+0x1138>
    a5b4:	da802217 	ldw	r10,136(sp)
    a5b8:	50800017 	ldw	r2,0(r10)
    a5bc:	52800104 	addi	r10,r10,4
    a5c0:	da802215 	stw	r10,136(sp)
    a5c4:	da802317 	ldw	r10,140(sp)
    a5c8:	1280000d 	sth	r10,0(r2)
    a5cc:	003be706 	br	956c <__alt_data_end+0xff00956c>
    a5d0:	da802217 	ldw	r10,136(sp)
    a5d4:	50800017 	ldw	r2,0(r10)
    a5d8:	52800104 	addi	r10,r10,4
    a5dc:	da802215 	stw	r10,136(sp)
    a5e0:	da802317 	ldw	r10,140(sp)
    a5e4:	12800015 	stw	r10,0(r2)
    a5e8:	003be006 	br	956c <__alt_data_end+0xff00956c>
    a5ec:	a080100c 	andi	r2,r20,64
    a5f0:	da802217 	ldw	r10,136(sp)
    a5f4:	10003026 	beq	r2,zero,a6b8 <___vfiprintf_internal_r+0x1220>
    a5f8:	5480000b 	ldhu	r18,0(r10)
    a5fc:	52800104 	addi	r10,r10,4
    a600:	0027883a 	mov	r19,zero
    a604:	da802215 	stw	r10,136(sp)
    a608:	003d8006 	br	9c0c <__alt_data_end+0xff009c0c>
    a60c:	80c00007 	ldb	r3,0(r16)
    a610:	003c0006 	br	9614 <__alt_data_end+0xff009614>
    a614:	a080100c 	andi	r2,r20,64
    a618:	d8001d85 	stb	zero,118(sp)
    a61c:	da802217 	ldw	r10,136(sp)
    a620:	1000201e 	bne	r2,zero,a6a4 <___vfiprintf_internal_r+0x120c>
    a624:	50800104 	addi	r2,r10,4
    a628:	54800017 	ldw	r18,0(r10)
    a62c:	0027883a 	mov	r19,zero
    a630:	483def0e 	bge	r9,zero,9df0 <__alt_data_end+0xff009df0>
    a634:	94c6b03a 	or	r3,r18,r19
    a638:	d8802215 	stw	r2,136(sp)
    a63c:	183d4e1e 	bne	r3,zero,9b78 <__alt_data_end+0xff009b78>
    a640:	0039883a 	mov	fp,zero
    a644:	0005883a 	mov	r2,zero
    a648:	003e0606 	br	9e64 <__alt_data_end+0xff009e64>
    a64c:	d9402117 	ldw	r5,132(sp)
    a650:	d9002017 	ldw	r4,128(sp)
    a654:	d9801a04 	addi	r6,sp,104
    a658:	da402c15 	stw	r9,176(sp)
    a65c:	db802a15 	stw	r14,168(sp)
    a660:	00093840 	call	9384 <__sprint_r.part.0>
    a664:	da402c17 	ldw	r9,176(sp)
    a668:	db802a17 	ldw	r14,168(sp)
    a66c:	103ede1e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a670:	d9401b17 	ldw	r5,108(sp)
    a674:	d8801c17 	ldw	r2,112(sp)
    a678:	d811883a 	mov	r8,sp
    a67c:	29000044 	addi	r4,r5,1
    a680:	003e7406 	br	a054 <__alt_data_end+0xff00a054>
    a684:	00bfffc4 	movi	r2,-1
    a688:	003c5806 	br	97ec <__alt_data_end+0xff0097ec>
    a68c:	d811883a 	mov	r8,sp
    a690:	003ee806 	br	a234 <__alt_data_end+0xff00a234>
    a694:	000b883a 	mov	r5,zero
    a698:	01000044 	movi	r4,1
    a69c:	d811883a 	mov	r8,sp
    a6a0:	003e7c06 	br	a094 <__alt_data_end+0xff00a094>
    a6a4:	50800104 	addi	r2,r10,4
    a6a8:	5480000b 	ldhu	r18,0(r10)
    a6ac:	0027883a 	mov	r19,zero
    a6b0:	483dcf0e 	bge	r9,zero,9df0 <__alt_data_end+0xff009df0>
    a6b4:	003fdf06 	br	a634 <__alt_data_end+0xff00a634>
    a6b8:	54800017 	ldw	r18,0(r10)
    a6bc:	52800104 	addi	r10,r10,4
    a6c0:	0027883a 	mov	r19,zero
    a6c4:	da802215 	stw	r10,136(sp)
    a6c8:	003d5006 	br	9c0c <__alt_data_end+0xff009c0c>
    a6cc:	50800104 	addi	r2,r10,4
    a6d0:	5480000b 	ldhu	r18,0(r10)
    a6d4:	0027883a 	mov	r19,zero
    a6d8:	483f7d0e 	bge	r9,zero,a4d0 <__alt_data_end+0xff00a4d0>
    a6dc:	003ddc06 	br	9e50 <__alt_data_end+0xff009e50>
    a6e0:	d8c02215 	stw	r3,136(sp)
    a6e4:	0039883a 	mov	fp,zero
    a6e8:	003ddb06 	br	9e58 <__alt_data_end+0xff009e58>
    a6ec:	02800074 	movhi	r10,1
    a6f0:	5281f104 	addi	r10,r10,1988
    a6f4:	da802415 	stw	r10,144(sp)
    a6f8:	003e8306 	br	a108 <__alt_data_end+0xff00a108>
    a6fc:	d8801c17 	ldw	r2,112(sp)
    a700:	dd002117 	ldw	r20,132(sp)
    a704:	103eb926 	beq	r2,zero,a1ec <__alt_data_end+0xff00a1ec>
    a708:	d9002017 	ldw	r4,128(sp)
    a70c:	d9801a04 	addi	r6,sp,104
    a710:	a00b883a 	mov	r5,r20
    a714:	00093840 	call	9384 <__sprint_r.part.0>
    a718:	003eb406 	br	a1ec <__alt_data_end+0xff00a1ec>
    a71c:	80c00043 	ldbu	r3,1(r16)
    a720:	a5000814 	ori	r20,r20,32
    a724:	84000044 	addi	r16,r16,1
    a728:	18c03fcc 	andi	r3,r3,255
    a72c:	18c0201c 	xori	r3,r3,128
    a730:	18ffe004 	addi	r3,r3,-128
    a734:	003bb706 	br	9614 <__alt_data_end+0xff009614>
    a738:	a809883a 	mov	r4,r21
    a73c:	d8c02a15 	stw	r3,168(sp)
    a740:	da002b15 	stw	r8,172(sp)
    a744:	000264c0 	call	264c <strlen>
    a748:	d8c02a17 	ldw	r3,168(sp)
    a74c:	1027883a 	mov	r19,r2
    a750:	df001d83 	ldbu	fp,118(sp)
    a754:	d8c02215 	stw	r3,136(sp)
    a758:	0013883a 	mov	r9,zero
    a75c:	da002b17 	ldw	r8,172(sp)
    a760:	003c4d06 	br	9898 <__alt_data_end+0xff009898>
    a764:	d9402117 	ldw	r5,132(sp)
    a768:	d9002017 	ldw	r4,128(sp)
    a76c:	d9801a04 	addi	r6,sp,104
    a770:	da402c15 	stw	r9,176(sp)
    a774:	00093840 	call	9384 <__sprint_r.part.0>
    a778:	da402c17 	ldw	r9,176(sp)
    a77c:	103e9a1e 	bne	r2,zero,a1e8 <__alt_data_end+0xff00a1e8>
    a780:	d9401b17 	ldw	r5,108(sp)
    a784:	d8801c17 	ldw	r2,112(sp)
    a788:	d811883a 	mov	r8,sp
    a78c:	29000044 	addi	r4,r5,1
    a790:	003e4206 	br	a09c <__alt_data_end+0xff00a09c>
    a794:	d9401b17 	ldw	r5,108(sp)
    a798:	01000074 	movhi	r4,1
    a79c:	2101f504 	addi	r4,r4,2004
    a7a0:	d9002415 	stw	r4,144(sp)
    a7a4:	29400044 	addi	r5,r5,1
    a7a8:	003c6d06 	br	9960 <__alt_data_end+0xff009960>
    a7ac:	0039883a 	mov	fp,zero
    a7b0:	00800084 	movi	r2,2
    a7b4:	10803fcc 	andi	r2,r2,255
    a7b8:	01000044 	movi	r4,1
    a7bc:	11001e26 	beq	r2,r4,a838 <___vfiprintf_internal_r+0x13a0>
    a7c0:	01000084 	movi	r4,2
    a7c4:	11001e1e 	bne	r2,r4,a840 <___vfiprintf_internal_r+0x13a8>
    a7c8:	1829883a 	mov	r20,r3
    a7cc:	003eea06 	br	a378 <__alt_data_end+0xff00a378>
    a7d0:	a007883a 	mov	r3,r20
    a7d4:	00800044 	movi	r2,1
    a7d8:	003ff606 	br	a7b4 <__alt_data_end+0xff00a7b4>
    a7dc:	00800184 	movi	r2,6
    a7e0:	1240012e 	bgeu	r2,r9,a7e8 <___vfiprintf_internal_r+0x1350>
    a7e4:	1013883a 	mov	r9,r2
    a7e8:	4827883a 	mov	r19,r9
    a7ec:	4825883a 	mov	r18,r9
    a7f0:	48001516 	blt	r9,zero,a848 <___vfiprintf_internal_r+0x13b0>
    a7f4:	05400074 	movhi	r21,1
    a7f8:	d8c02215 	stw	r3,136(sp)
    a7fc:	ad419504 	addi	r21,r21,1620
    a800:	003d1406 	br	9c54 <__alt_data_end+0xff009c54>
    a804:	02800074 	movhi	r10,1
    a808:	5281f104 	addi	r10,r10,1988
    a80c:	da802415 	stw	r10,144(sp)
    a810:	200d883a 	mov	r6,r4
    a814:	003c9106 	br	9a5c <__alt_data_end+0xff009a5c>
    a818:	5021883a 	mov	r16,r10
    a81c:	0013883a 	mov	r9,zero
    a820:	003b7d06 	br	9618 <__alt_data_end+0xff009618>
    a824:	4827883a 	mov	r19,r9
    a828:	df001d83 	ldbu	fp,118(sp)
    a82c:	d8c02215 	stw	r3,136(sp)
    a830:	0013883a 	mov	r9,zero
    a834:	003c1806 	br	9898 <__alt_data_end+0xff009898>
    a838:	1829883a 	mov	r20,r3
    a83c:	003d1806 	br	9ca0 <__alt_data_end+0xff009ca0>
    a840:	1829883a 	mov	r20,r3
    a844:	003ccd06 	br	9b7c <__alt_data_end+0xff009b7c>
    a848:	0025883a 	mov	r18,zero
    a84c:	003fe906 	br	a7f4 <__alt_data_end+0xff00a7f4>
    a850:	d8802217 	ldw	r2,136(sp)
    a854:	80c00043 	ldbu	r3,1(r16)
    a858:	5021883a 	mov	r16,r10
    a85c:	12400017 	ldw	r9,0(r2)
    a860:	10800104 	addi	r2,r2,4
    a864:	d8802215 	stw	r2,136(sp)
    a868:	483faf0e 	bge	r9,zero,a728 <__alt_data_end+0xff00a728>
    a86c:	18c03fcc 	andi	r3,r3,255
    a870:	18c0201c 	xori	r3,r3,128
    a874:	027fffc4 	movi	r9,-1
    a878:	18ffe004 	addi	r3,r3,-128
    a87c:	003b6506 	br	9614 <__alt_data_end+0xff009614>
    a880:	d9c01d85 	stb	r7,118(sp)
    a884:	003ca006 	br	9b08 <__alt_data_end+0xff009b08>
    a888:	d9c01d85 	stb	r7,118(sp)
    a88c:	003cad06 	br	9b44 <__alt_data_end+0xff009b44>
    a890:	d9c01d85 	stb	r7,118(sp)
    a894:	003d7d06 	br	9e8c <__alt_data_end+0xff009e8c>
    a898:	d9c01d85 	stb	r7,118(sp)
    a89c:	003d5f06 	br	9e1c <__alt_data_end+0xff009e1c>
    a8a0:	a080004c 	andi	r2,r20,1
    a8a4:	0039883a 	mov	fp,zero
    a8a8:	10000526 	beq	r2,zero,a8c0 <___vfiprintf_internal_r+0x1428>
    a8ac:	00800c04 	movi	r2,48
    a8b0:	d88019c5 	stb	r2,103(sp)
    a8b4:	dcc02717 	ldw	r19,156(sp)
    a8b8:	dd4019c4 	addi	r21,sp,103
    a8bc:	003bf606 	br	9898 <__alt_data_end+0xff009898>
    a8c0:	0027883a 	mov	r19,zero
    a8c4:	dd401a04 	addi	r21,sp,104
    a8c8:	003bf306 	br	9898 <__alt_data_end+0xff009898>
    a8cc:	d9c01d85 	stb	r7,118(sp)
    a8d0:	003dc806 	br	9ff4 <__alt_data_end+0xff009ff4>
    a8d4:	d9c01d85 	stb	r7,118(sp)
    a8d8:	003d3a06 	br	9dc4 <__alt_data_end+0xff009dc4>
    a8dc:	d9c01d85 	stb	r7,118(sp)
    a8e0:	003d2a06 	br	9d8c <__alt_data_end+0xff009d8c>
    a8e4:	d9c01d85 	stb	r7,118(sp)
    a8e8:	003cde06 	br	9c64 <__alt_data_end+0xff009c64>
    a8ec:	d9c01d85 	stb	r7,118(sp)
    a8f0:	003cbc06 	br	9be4 <__alt_data_end+0xff009be4>

0000a8f4 <__vfiprintf_internal>:
    a8f4:	00800074 	movhi	r2,1
    a8f8:	1088f004 	addi	r2,r2,9152
    a8fc:	300f883a 	mov	r7,r6
    a900:	280d883a 	mov	r6,r5
    a904:	200b883a 	mov	r5,r4
    a908:	11000017 	ldw	r4,0(r2)
    a90c:	00094981 	jmpi	9498 <___vfiprintf_internal_r>

0000a910 <__sbprintf>:
    a910:	2880030b 	ldhu	r2,12(r5)
    a914:	2ac01917 	ldw	r11,100(r5)
    a918:	2a80038b 	ldhu	r10,14(r5)
    a91c:	2a400717 	ldw	r9,28(r5)
    a920:	2a000917 	ldw	r8,36(r5)
    a924:	defee204 	addi	sp,sp,-1144
    a928:	00c10004 	movi	r3,1024
    a92c:	dc011a15 	stw	r16,1128(sp)
    a930:	10bfff4c 	andi	r2,r2,65533
    a934:	2821883a 	mov	r16,r5
    a938:	d8cb883a 	add	r5,sp,r3
    a93c:	dc811c15 	stw	r18,1136(sp)
    a940:	dc411b15 	stw	r17,1132(sp)
    a944:	dfc11d15 	stw	ra,1140(sp)
    a948:	2025883a 	mov	r18,r4
    a94c:	d881030d 	sth	r2,1036(sp)
    a950:	dac11915 	stw	r11,1124(sp)
    a954:	da81038d 	sth	r10,1038(sp)
    a958:	da410715 	stw	r9,1052(sp)
    a95c:	da010915 	stw	r8,1060(sp)
    a960:	dec10015 	stw	sp,1024(sp)
    a964:	dec10415 	stw	sp,1040(sp)
    a968:	d8c10215 	stw	r3,1032(sp)
    a96c:	d8c10515 	stw	r3,1044(sp)
    a970:	d8010615 	stw	zero,1048(sp)
    a974:	00094980 	call	9498 <___vfiprintf_internal_r>
    a978:	1023883a 	mov	r17,r2
    a97c:	10000416 	blt	r2,zero,a990 <__sbprintf+0x80>
    a980:	d9410004 	addi	r5,sp,1024
    a984:	9009883a 	mov	r4,r18
    a988:	00065ac0 	call	65ac <_fflush_r>
    a98c:	10000d1e 	bne	r2,zero,a9c4 <__sbprintf+0xb4>
    a990:	d881030b 	ldhu	r2,1036(sp)
    a994:	1080100c 	andi	r2,r2,64
    a998:	10000326 	beq	r2,zero,a9a8 <__sbprintf+0x98>
    a99c:	8080030b 	ldhu	r2,12(r16)
    a9a0:	10801014 	ori	r2,r2,64
    a9a4:	8080030d 	sth	r2,12(r16)
    a9a8:	8805883a 	mov	r2,r17
    a9ac:	dfc11d17 	ldw	ra,1140(sp)
    a9b0:	dc811c17 	ldw	r18,1136(sp)
    a9b4:	dc411b17 	ldw	r17,1132(sp)
    a9b8:	dc011a17 	ldw	r16,1128(sp)
    a9bc:	dec11e04 	addi	sp,sp,1144
    a9c0:	f800283a 	ret
    a9c4:	047fffc4 	movi	r17,-1
    a9c8:	003ff106 	br	a990 <__alt_data_end+0xff00a990>

0000a9cc <_write_r>:
    a9cc:	defffd04 	addi	sp,sp,-12
    a9d0:	2805883a 	mov	r2,r5
    a9d4:	dc000015 	stw	r16,0(sp)
    a9d8:	04000074 	movhi	r16,1
    a9dc:	dc400115 	stw	r17,4(sp)
    a9e0:	300b883a 	mov	r5,r6
    a9e4:	840fc704 	addi	r16,r16,16156
    a9e8:	2023883a 	mov	r17,r4
    a9ec:	380d883a 	mov	r6,r7
    a9f0:	1009883a 	mov	r4,r2
    a9f4:	dfc00215 	stw	ra,8(sp)
    a9f8:	80000015 	stw	zero,0(r16)
    a9fc:	000eae40 	call	eae4 <write>
    aa00:	00ffffc4 	movi	r3,-1
    aa04:	10c00526 	beq	r2,r3,aa1c <_write_r+0x50>
    aa08:	dfc00217 	ldw	ra,8(sp)
    aa0c:	dc400117 	ldw	r17,4(sp)
    aa10:	dc000017 	ldw	r16,0(sp)
    aa14:	dec00304 	addi	sp,sp,12
    aa18:	f800283a 	ret
    aa1c:	80c00017 	ldw	r3,0(r16)
    aa20:	183ff926 	beq	r3,zero,aa08 <__alt_data_end+0xff00aa08>
    aa24:	88c00015 	stw	r3,0(r17)
    aa28:	003ff706 	br	aa08 <__alt_data_end+0xff00aa08>

0000aa2c <_close_r>:
    aa2c:	defffd04 	addi	sp,sp,-12
    aa30:	dc000015 	stw	r16,0(sp)
    aa34:	04000074 	movhi	r16,1
    aa38:	dc400115 	stw	r17,4(sp)
    aa3c:	840fc704 	addi	r16,r16,16156
    aa40:	2023883a 	mov	r17,r4
    aa44:	2809883a 	mov	r4,r5
    aa48:	dfc00215 	stw	ra,8(sp)
    aa4c:	80000015 	stw	zero,0(r16)
    aa50:	000e5cc0 	call	e5cc <close>
    aa54:	00ffffc4 	movi	r3,-1
    aa58:	10c00526 	beq	r2,r3,aa70 <_close_r+0x44>
    aa5c:	dfc00217 	ldw	ra,8(sp)
    aa60:	dc400117 	ldw	r17,4(sp)
    aa64:	dc000017 	ldw	r16,0(sp)
    aa68:	dec00304 	addi	sp,sp,12
    aa6c:	f800283a 	ret
    aa70:	80c00017 	ldw	r3,0(r16)
    aa74:	183ff926 	beq	r3,zero,aa5c <__alt_data_end+0xff00aa5c>
    aa78:	88c00015 	stw	r3,0(r17)
    aa7c:	003ff706 	br	aa5c <__alt_data_end+0xff00aa5c>

0000aa80 <_calloc_r>:
    aa80:	298b383a 	mul	r5,r5,r6
    aa84:	defffe04 	addi	sp,sp,-8
    aa88:	dfc00115 	stw	ra,4(sp)
    aa8c:	dc000015 	stw	r16,0(sp)
    aa90:	0001cac0 	call	1cac <_malloc_r>
    aa94:	10002926 	beq	r2,zero,ab3c <_calloc_r+0xbc>
    aa98:	11bfff17 	ldw	r6,-4(r2)
    aa9c:	1021883a 	mov	r16,r2
    aaa0:	00bfff04 	movi	r2,-4
    aaa4:	308c703a 	and	r6,r6,r2
    aaa8:	00c00904 	movi	r3,36
    aaac:	308d883a 	add	r6,r6,r2
    aab0:	19801636 	bltu	r3,r6,ab0c <_calloc_r+0x8c>
    aab4:	008004c4 	movi	r2,19
    aab8:	11800b2e 	bgeu	r2,r6,aae8 <_calloc_r+0x68>
    aabc:	80000015 	stw	zero,0(r16)
    aac0:	80000115 	stw	zero,4(r16)
    aac4:	008006c4 	movi	r2,27
    aac8:	11801a2e 	bgeu	r2,r6,ab34 <_calloc_r+0xb4>
    aacc:	80000215 	stw	zero,8(r16)
    aad0:	80000315 	stw	zero,12(r16)
    aad4:	30c0151e 	bne	r6,r3,ab2c <_calloc_r+0xac>
    aad8:	80000415 	stw	zero,16(r16)
    aadc:	80800604 	addi	r2,r16,24
    aae0:	80000515 	stw	zero,20(r16)
    aae4:	00000106 	br	aaec <_calloc_r+0x6c>
    aae8:	8005883a 	mov	r2,r16
    aaec:	10000015 	stw	zero,0(r2)
    aaf0:	10000115 	stw	zero,4(r2)
    aaf4:	10000215 	stw	zero,8(r2)
    aaf8:	8005883a 	mov	r2,r16
    aafc:	dfc00117 	ldw	ra,4(sp)
    ab00:	dc000017 	ldw	r16,0(sp)
    ab04:	dec00204 	addi	sp,sp,8
    ab08:	f800283a 	ret
    ab0c:	000b883a 	mov	r5,zero
    ab10:	8009883a 	mov	r4,r16
    ab14:	0007a700 	call	7a70 <memset>
    ab18:	8005883a 	mov	r2,r16
    ab1c:	dfc00117 	ldw	ra,4(sp)
    ab20:	dc000017 	ldw	r16,0(sp)
    ab24:	dec00204 	addi	sp,sp,8
    ab28:	f800283a 	ret
    ab2c:	80800404 	addi	r2,r16,16
    ab30:	003fee06 	br	aaec <__alt_data_end+0xff00aaec>
    ab34:	80800204 	addi	r2,r16,8
    ab38:	003fec06 	br	aaec <__alt_data_end+0xff00aaec>
    ab3c:	0005883a 	mov	r2,zero
    ab40:	003fee06 	br	aafc <__alt_data_end+0xff00aafc>

0000ab44 <_fclose_r>:
    ab44:	28003926 	beq	r5,zero,ac2c <_fclose_r+0xe8>
    ab48:	defffc04 	addi	sp,sp,-16
    ab4c:	dc400115 	stw	r17,4(sp)
    ab50:	dc000015 	stw	r16,0(sp)
    ab54:	dfc00315 	stw	ra,12(sp)
    ab58:	dc800215 	stw	r18,8(sp)
    ab5c:	2023883a 	mov	r17,r4
    ab60:	2821883a 	mov	r16,r5
    ab64:	20000226 	beq	r4,zero,ab70 <_fclose_r+0x2c>
    ab68:	20800e17 	ldw	r2,56(r4)
    ab6c:	10002726 	beq	r2,zero,ac0c <_fclose_r+0xc8>
    ab70:	8080030f 	ldh	r2,12(r16)
    ab74:	1000071e 	bne	r2,zero,ab94 <_fclose_r+0x50>
    ab78:	0005883a 	mov	r2,zero
    ab7c:	dfc00317 	ldw	ra,12(sp)
    ab80:	dc800217 	ldw	r18,8(sp)
    ab84:	dc400117 	ldw	r17,4(sp)
    ab88:	dc000017 	ldw	r16,0(sp)
    ab8c:	dec00404 	addi	sp,sp,16
    ab90:	f800283a 	ret
    ab94:	800b883a 	mov	r5,r16
    ab98:	8809883a 	mov	r4,r17
    ab9c:	00063900 	call	6390 <__sflush_r>
    aba0:	1025883a 	mov	r18,r2
    aba4:	80800b17 	ldw	r2,44(r16)
    aba8:	10000426 	beq	r2,zero,abbc <_fclose_r+0x78>
    abac:	81400717 	ldw	r5,28(r16)
    abb0:	8809883a 	mov	r4,r17
    abb4:	103ee83a 	callr	r2
    abb8:	10001616 	blt	r2,zero,ac14 <_fclose_r+0xd0>
    abbc:	8080030b 	ldhu	r2,12(r16)
    abc0:	1080200c 	andi	r2,r2,128
    abc4:	1000151e 	bne	r2,zero,ac1c <_fclose_r+0xd8>
    abc8:	81400c17 	ldw	r5,48(r16)
    abcc:	28000526 	beq	r5,zero,abe4 <_fclose_r+0xa0>
    abd0:	80801004 	addi	r2,r16,64
    abd4:	28800226 	beq	r5,r2,abe0 <_fclose_r+0x9c>
    abd8:	8809883a 	mov	r4,r17
    abdc:	0006afc0 	call	6afc <_free_r>
    abe0:	80000c15 	stw	zero,48(r16)
    abe4:	81401117 	ldw	r5,68(r16)
    abe8:	28000326 	beq	r5,zero,abf8 <_fclose_r+0xb4>
    abec:	8809883a 	mov	r4,r17
    abf0:	0006afc0 	call	6afc <_free_r>
    abf4:	80001115 	stw	zero,68(r16)
    abf8:	00069980 	call	6998 <__sfp_lock_acquire>
    abfc:	8000030d 	sth	zero,12(r16)
    ac00:	000699c0 	call	699c <__sfp_lock_release>
    ac04:	9005883a 	mov	r2,r18
    ac08:	003fdc06 	br	ab7c <__alt_data_end+0xff00ab7c>
    ac0c:	00069880 	call	6988 <__sinit>
    ac10:	003fd706 	br	ab70 <__alt_data_end+0xff00ab70>
    ac14:	04bfffc4 	movi	r18,-1
    ac18:	003fe806 	br	abbc <__alt_data_end+0xff00abbc>
    ac1c:	81400417 	ldw	r5,16(r16)
    ac20:	8809883a 	mov	r4,r17
    ac24:	0006afc0 	call	6afc <_free_r>
    ac28:	003fe706 	br	abc8 <__alt_data_end+0xff00abc8>
    ac2c:	0005883a 	mov	r2,zero
    ac30:	f800283a 	ret

0000ac34 <fclose>:
    ac34:	00800074 	movhi	r2,1
    ac38:	1088f004 	addi	r2,r2,9152
    ac3c:	200b883a 	mov	r5,r4
    ac40:	11000017 	ldw	r4,0(r2)
    ac44:	000ab441 	jmpi	ab44 <_fclose_r>

0000ac48 <__fputwc>:
    ac48:	defff804 	addi	sp,sp,-32
    ac4c:	dcc00415 	stw	r19,16(sp)
    ac50:	dc800315 	stw	r18,12(sp)
    ac54:	dc000115 	stw	r16,4(sp)
    ac58:	dfc00715 	stw	ra,28(sp)
    ac5c:	dd400615 	stw	r21,24(sp)
    ac60:	dd000515 	stw	r20,20(sp)
    ac64:	dc400215 	stw	r17,8(sp)
    ac68:	2027883a 	mov	r19,r4
    ac6c:	2825883a 	mov	r18,r5
    ac70:	3021883a 	mov	r16,r6
    ac74:	00074d80 	call	74d8 <__locale_mb_cur_max>
    ac78:	00c00044 	movi	r3,1
    ac7c:	10c03e26 	beq	r2,r3,ad78 <__fputwc+0x130>
    ac80:	81c01704 	addi	r7,r16,92
    ac84:	900d883a 	mov	r6,r18
    ac88:	d80b883a 	mov	r5,sp
    ac8c:	9809883a 	mov	r4,r19
    ac90:	000b1180 	call	b118 <_wcrtomb_r>
    ac94:	1029883a 	mov	r20,r2
    ac98:	00bfffc4 	movi	r2,-1
    ac9c:	a0802026 	beq	r20,r2,ad20 <__fputwc+0xd8>
    aca0:	d9400003 	ldbu	r5,0(sp)
    aca4:	a0001c26 	beq	r20,zero,ad18 <__fputwc+0xd0>
    aca8:	0023883a 	mov	r17,zero
    acac:	05400284 	movi	r21,10
    acb0:	00000906 	br	acd8 <__fputwc+0x90>
    acb4:	80800017 	ldw	r2,0(r16)
    acb8:	11400005 	stb	r5,0(r2)
    acbc:	80c00017 	ldw	r3,0(r16)
    acc0:	18c00044 	addi	r3,r3,1
    acc4:	80c00015 	stw	r3,0(r16)
    acc8:	8c400044 	addi	r17,r17,1
    accc:	dc45883a 	add	r2,sp,r17
    acd0:	8d00112e 	bgeu	r17,r20,ad18 <__fputwc+0xd0>
    acd4:	11400003 	ldbu	r5,0(r2)
    acd8:	80c00217 	ldw	r3,8(r16)
    acdc:	18ffffc4 	addi	r3,r3,-1
    ace0:	80c00215 	stw	r3,8(r16)
    ace4:	183ff30e 	bge	r3,zero,acb4 <__alt_data_end+0xff00acb4>
    ace8:	80800617 	ldw	r2,24(r16)
    acec:	18801916 	blt	r3,r2,ad54 <__fputwc+0x10c>
    acf0:	80800017 	ldw	r2,0(r16)
    acf4:	11400005 	stb	r5,0(r2)
    acf8:	80800017 	ldw	r2,0(r16)
    acfc:	10c00003 	ldbu	r3,0(r2)
    ad00:	10800044 	addi	r2,r2,1
    ad04:	1d402326 	beq	r3,r21,ad94 <__fputwc+0x14c>
    ad08:	80800015 	stw	r2,0(r16)
    ad0c:	8c400044 	addi	r17,r17,1
    ad10:	dc45883a 	add	r2,sp,r17
    ad14:	8d3fef36 	bltu	r17,r20,acd4 <__alt_data_end+0xff00acd4>
    ad18:	9005883a 	mov	r2,r18
    ad1c:	00000406 	br	ad30 <__fputwc+0xe8>
    ad20:	80c0030b 	ldhu	r3,12(r16)
    ad24:	a005883a 	mov	r2,r20
    ad28:	18c01014 	ori	r3,r3,64
    ad2c:	80c0030d 	sth	r3,12(r16)
    ad30:	dfc00717 	ldw	ra,28(sp)
    ad34:	dd400617 	ldw	r21,24(sp)
    ad38:	dd000517 	ldw	r20,20(sp)
    ad3c:	dcc00417 	ldw	r19,16(sp)
    ad40:	dc800317 	ldw	r18,12(sp)
    ad44:	dc400217 	ldw	r17,8(sp)
    ad48:	dc000117 	ldw	r16,4(sp)
    ad4c:	dec00804 	addi	sp,sp,32
    ad50:	f800283a 	ret
    ad54:	800d883a 	mov	r6,r16
    ad58:	29403fcc 	andi	r5,r5,255
    ad5c:	9809883a 	mov	r4,r19
    ad60:	000afc00 	call	afc0 <__swbuf_r>
    ad64:	10bfffe0 	cmpeqi	r2,r2,-1
    ad68:	10803fcc 	andi	r2,r2,255
    ad6c:	103fd626 	beq	r2,zero,acc8 <__alt_data_end+0xff00acc8>
    ad70:	00bfffc4 	movi	r2,-1
    ad74:	003fee06 	br	ad30 <__alt_data_end+0xff00ad30>
    ad78:	90ffffc4 	addi	r3,r18,-1
    ad7c:	01003f84 	movi	r4,254
    ad80:	20ffbf36 	bltu	r4,r3,ac80 <__alt_data_end+0xff00ac80>
    ad84:	900b883a 	mov	r5,r18
    ad88:	dc800005 	stb	r18,0(sp)
    ad8c:	1029883a 	mov	r20,r2
    ad90:	003fc506 	br	aca8 <__alt_data_end+0xff00aca8>
    ad94:	800d883a 	mov	r6,r16
    ad98:	a80b883a 	mov	r5,r21
    ad9c:	9809883a 	mov	r4,r19
    ada0:	000afc00 	call	afc0 <__swbuf_r>
    ada4:	10bfffe0 	cmpeqi	r2,r2,-1
    ada8:	003fef06 	br	ad68 <__alt_data_end+0xff00ad68>

0000adac <_fputwc_r>:
    adac:	3080030b 	ldhu	r2,12(r6)
    adb0:	10c8000c 	andi	r3,r2,8192
    adb4:	1800051e 	bne	r3,zero,adcc <_fputwc_r+0x20>
    adb8:	30c01917 	ldw	r3,100(r6)
    adbc:	10880014 	ori	r2,r2,8192
    adc0:	3080030d 	sth	r2,12(r6)
    adc4:	18880014 	ori	r2,r3,8192
    adc8:	30801915 	stw	r2,100(r6)
    adcc:	000ac481 	jmpi	ac48 <__fputwc>

0000add0 <fputwc>:
    add0:	00800074 	movhi	r2,1
    add4:	defffc04 	addi	sp,sp,-16
    add8:	1088f004 	addi	r2,r2,9152
    addc:	dc000115 	stw	r16,4(sp)
    ade0:	14000017 	ldw	r16,0(r2)
    ade4:	dc400215 	stw	r17,8(sp)
    ade8:	dfc00315 	stw	ra,12(sp)
    adec:	2023883a 	mov	r17,r4
    adf0:	80000226 	beq	r16,zero,adfc <fputwc+0x2c>
    adf4:	80800e17 	ldw	r2,56(r16)
    adf8:	10001026 	beq	r2,zero,ae3c <fputwc+0x6c>
    adfc:	2880030b 	ldhu	r2,12(r5)
    ae00:	10c8000c 	andi	r3,r2,8192
    ae04:	1800051e 	bne	r3,zero,ae1c <fputwc+0x4c>
    ae08:	28c01917 	ldw	r3,100(r5)
    ae0c:	10880014 	ori	r2,r2,8192
    ae10:	2880030d 	sth	r2,12(r5)
    ae14:	18880014 	ori	r2,r3,8192
    ae18:	28801915 	stw	r2,100(r5)
    ae1c:	280d883a 	mov	r6,r5
    ae20:	8009883a 	mov	r4,r16
    ae24:	880b883a 	mov	r5,r17
    ae28:	dfc00317 	ldw	ra,12(sp)
    ae2c:	dc400217 	ldw	r17,8(sp)
    ae30:	dc000117 	ldw	r16,4(sp)
    ae34:	dec00404 	addi	sp,sp,16
    ae38:	000ac481 	jmpi	ac48 <__fputwc>
    ae3c:	8009883a 	mov	r4,r16
    ae40:	d9400015 	stw	r5,0(sp)
    ae44:	00069880 	call	6988 <__sinit>
    ae48:	d9400017 	ldw	r5,0(sp)
    ae4c:	003feb06 	br	adfc <__alt_data_end+0xff00adfc>

0000ae50 <_fstat_r>:
    ae50:	defffd04 	addi	sp,sp,-12
    ae54:	2805883a 	mov	r2,r5
    ae58:	dc000015 	stw	r16,0(sp)
    ae5c:	04000074 	movhi	r16,1
    ae60:	dc400115 	stw	r17,4(sp)
    ae64:	840fc704 	addi	r16,r16,16156
    ae68:	2023883a 	mov	r17,r4
    ae6c:	300b883a 	mov	r5,r6
    ae70:	1009883a 	mov	r4,r2
    ae74:	dfc00215 	stw	ra,8(sp)
    ae78:	80000015 	stw	zero,0(r16)
    ae7c:	000e6900 	call	e690 <fstat>
    ae80:	00ffffc4 	movi	r3,-1
    ae84:	10c00526 	beq	r2,r3,ae9c <_fstat_r+0x4c>
    ae88:	dfc00217 	ldw	ra,8(sp)
    ae8c:	dc400117 	ldw	r17,4(sp)
    ae90:	dc000017 	ldw	r16,0(sp)
    ae94:	dec00304 	addi	sp,sp,12
    ae98:	f800283a 	ret
    ae9c:	80c00017 	ldw	r3,0(r16)
    aea0:	183ff926 	beq	r3,zero,ae88 <__alt_data_end+0xff00ae88>
    aea4:	88c00015 	stw	r3,0(r17)
    aea8:	003ff706 	br	ae88 <__alt_data_end+0xff00ae88>

0000aeac <_isatty_r>:
    aeac:	defffd04 	addi	sp,sp,-12
    aeb0:	dc000015 	stw	r16,0(sp)
    aeb4:	04000074 	movhi	r16,1
    aeb8:	dc400115 	stw	r17,4(sp)
    aebc:	840fc704 	addi	r16,r16,16156
    aec0:	2023883a 	mov	r17,r4
    aec4:	2809883a 	mov	r4,r5
    aec8:	dfc00215 	stw	ra,8(sp)
    aecc:	80000015 	stw	zero,0(r16)
    aed0:	000e7080 	call	e708 <isatty>
    aed4:	00ffffc4 	movi	r3,-1
    aed8:	10c00526 	beq	r2,r3,aef0 <_isatty_r+0x44>
    aedc:	dfc00217 	ldw	ra,8(sp)
    aee0:	dc400117 	ldw	r17,4(sp)
    aee4:	dc000017 	ldw	r16,0(sp)
    aee8:	dec00304 	addi	sp,sp,12
    aeec:	f800283a 	ret
    aef0:	80c00017 	ldw	r3,0(r16)
    aef4:	183ff926 	beq	r3,zero,aedc <__alt_data_end+0xff00aedc>
    aef8:	88c00015 	stw	r3,0(r17)
    aefc:	003ff706 	br	aedc <__alt_data_end+0xff00aedc>

0000af00 <_lseek_r>:
    af00:	defffd04 	addi	sp,sp,-12
    af04:	2805883a 	mov	r2,r5
    af08:	dc000015 	stw	r16,0(sp)
    af0c:	04000074 	movhi	r16,1
    af10:	dc400115 	stw	r17,4(sp)
    af14:	300b883a 	mov	r5,r6
    af18:	840fc704 	addi	r16,r16,16156
    af1c:	2023883a 	mov	r17,r4
    af20:	380d883a 	mov	r6,r7
    af24:	1009883a 	mov	r4,r2
    af28:	dfc00215 	stw	ra,8(sp)
    af2c:	80000015 	stw	zero,0(r16)
    af30:	000e8580 	call	e858 <lseek>
    af34:	00ffffc4 	movi	r3,-1
    af38:	10c00526 	beq	r2,r3,af50 <_lseek_r+0x50>
    af3c:	dfc00217 	ldw	ra,8(sp)
    af40:	dc400117 	ldw	r17,4(sp)
    af44:	dc000017 	ldw	r16,0(sp)
    af48:	dec00304 	addi	sp,sp,12
    af4c:	f800283a 	ret
    af50:	80c00017 	ldw	r3,0(r16)
    af54:	183ff926 	beq	r3,zero,af3c <__alt_data_end+0xff00af3c>
    af58:	88c00015 	stw	r3,0(r17)
    af5c:	003ff706 	br	af3c <__alt_data_end+0xff00af3c>

0000af60 <_read_r>:
    af60:	defffd04 	addi	sp,sp,-12
    af64:	2805883a 	mov	r2,r5
    af68:	dc000015 	stw	r16,0(sp)
    af6c:	04000074 	movhi	r16,1
    af70:	dc400115 	stw	r17,4(sp)
    af74:	300b883a 	mov	r5,r6
    af78:	840fc704 	addi	r16,r16,16156
    af7c:	2023883a 	mov	r17,r4
    af80:	380d883a 	mov	r6,r7
    af84:	1009883a 	mov	r4,r2
    af88:	dfc00215 	stw	ra,8(sp)
    af8c:	80000015 	stw	zero,0(r16)
    af90:	000e93c0 	call	e93c <read>
    af94:	00ffffc4 	movi	r3,-1
    af98:	10c00526 	beq	r2,r3,afb0 <_read_r+0x50>
    af9c:	dfc00217 	ldw	ra,8(sp)
    afa0:	dc400117 	ldw	r17,4(sp)
    afa4:	dc000017 	ldw	r16,0(sp)
    afa8:	dec00304 	addi	sp,sp,12
    afac:	f800283a 	ret
    afb0:	80c00017 	ldw	r3,0(r16)
    afb4:	183ff926 	beq	r3,zero,af9c <__alt_data_end+0xff00af9c>
    afb8:	88c00015 	stw	r3,0(r17)
    afbc:	003ff706 	br	af9c <__alt_data_end+0xff00af9c>

0000afc0 <__swbuf_r>:
    afc0:	defffb04 	addi	sp,sp,-20
    afc4:	dcc00315 	stw	r19,12(sp)
    afc8:	dc800215 	stw	r18,8(sp)
    afcc:	dc000015 	stw	r16,0(sp)
    afd0:	dfc00415 	stw	ra,16(sp)
    afd4:	dc400115 	stw	r17,4(sp)
    afd8:	2025883a 	mov	r18,r4
    afdc:	2827883a 	mov	r19,r5
    afe0:	3021883a 	mov	r16,r6
    afe4:	20000226 	beq	r4,zero,aff0 <__swbuf_r+0x30>
    afe8:	20800e17 	ldw	r2,56(r4)
    afec:	10004226 	beq	r2,zero,b0f8 <__swbuf_r+0x138>
    aff0:	80800617 	ldw	r2,24(r16)
    aff4:	8100030b 	ldhu	r4,12(r16)
    aff8:	80800215 	stw	r2,8(r16)
    affc:	2080020c 	andi	r2,r4,8
    b000:	10003626 	beq	r2,zero,b0dc <__swbuf_r+0x11c>
    b004:	80c00417 	ldw	r3,16(r16)
    b008:	18003426 	beq	r3,zero,b0dc <__swbuf_r+0x11c>
    b00c:	2088000c 	andi	r2,r4,8192
    b010:	9c403fcc 	andi	r17,r19,255
    b014:	10001a26 	beq	r2,zero,b080 <__swbuf_r+0xc0>
    b018:	80800017 	ldw	r2,0(r16)
    b01c:	81000517 	ldw	r4,20(r16)
    b020:	10c7c83a 	sub	r3,r2,r3
    b024:	1900200e 	bge	r3,r4,b0a8 <__swbuf_r+0xe8>
    b028:	18c00044 	addi	r3,r3,1
    b02c:	81000217 	ldw	r4,8(r16)
    b030:	11400044 	addi	r5,r2,1
    b034:	81400015 	stw	r5,0(r16)
    b038:	213fffc4 	addi	r4,r4,-1
    b03c:	81000215 	stw	r4,8(r16)
    b040:	14c00005 	stb	r19,0(r2)
    b044:	80800517 	ldw	r2,20(r16)
    b048:	10c01e26 	beq	r2,r3,b0c4 <__swbuf_r+0x104>
    b04c:	8080030b 	ldhu	r2,12(r16)
    b050:	1080004c 	andi	r2,r2,1
    b054:	10000226 	beq	r2,zero,b060 <__swbuf_r+0xa0>
    b058:	00800284 	movi	r2,10
    b05c:	88801926 	beq	r17,r2,b0c4 <__swbuf_r+0x104>
    b060:	8805883a 	mov	r2,r17
    b064:	dfc00417 	ldw	ra,16(sp)
    b068:	dcc00317 	ldw	r19,12(sp)
    b06c:	dc800217 	ldw	r18,8(sp)
    b070:	dc400117 	ldw	r17,4(sp)
    b074:	dc000017 	ldw	r16,0(sp)
    b078:	dec00504 	addi	sp,sp,20
    b07c:	f800283a 	ret
    b080:	81401917 	ldw	r5,100(r16)
    b084:	00b7ffc4 	movi	r2,-8193
    b088:	21080014 	ori	r4,r4,8192
    b08c:	2884703a 	and	r2,r5,r2
    b090:	80801915 	stw	r2,100(r16)
    b094:	80800017 	ldw	r2,0(r16)
    b098:	8100030d 	sth	r4,12(r16)
    b09c:	81000517 	ldw	r4,20(r16)
    b0a0:	10c7c83a 	sub	r3,r2,r3
    b0a4:	193fe016 	blt	r3,r4,b028 <__alt_data_end+0xff00b028>
    b0a8:	800b883a 	mov	r5,r16
    b0ac:	9009883a 	mov	r4,r18
    b0b0:	00065ac0 	call	65ac <_fflush_r>
    b0b4:	1000071e 	bne	r2,zero,b0d4 <__swbuf_r+0x114>
    b0b8:	80800017 	ldw	r2,0(r16)
    b0bc:	00c00044 	movi	r3,1
    b0c0:	003fda06 	br	b02c <__alt_data_end+0xff00b02c>
    b0c4:	800b883a 	mov	r5,r16
    b0c8:	9009883a 	mov	r4,r18
    b0cc:	00065ac0 	call	65ac <_fflush_r>
    b0d0:	103fe326 	beq	r2,zero,b060 <__alt_data_end+0xff00b060>
    b0d4:	00bfffc4 	movi	r2,-1
    b0d8:	003fe206 	br	b064 <__alt_data_end+0xff00b064>
    b0dc:	800b883a 	mov	r5,r16
    b0e0:	9009883a 	mov	r4,r18
    b0e4:	00049b40 	call	49b4 <__swsetup_r>
    b0e8:	103ffa1e 	bne	r2,zero,b0d4 <__alt_data_end+0xff00b0d4>
    b0ec:	8100030b 	ldhu	r4,12(r16)
    b0f0:	80c00417 	ldw	r3,16(r16)
    b0f4:	003fc506 	br	b00c <__alt_data_end+0xff00b00c>
    b0f8:	00069880 	call	6988 <__sinit>
    b0fc:	003fbc06 	br	aff0 <__alt_data_end+0xff00aff0>

0000b100 <__swbuf>:
    b100:	00800074 	movhi	r2,1
    b104:	1088f004 	addi	r2,r2,9152
    b108:	280d883a 	mov	r6,r5
    b10c:	200b883a 	mov	r5,r4
    b110:	11000017 	ldw	r4,0(r2)
    b114:	000afc01 	jmpi	afc0 <__swbuf_r>

0000b118 <_wcrtomb_r>:
    b118:	defff604 	addi	sp,sp,-40
    b11c:	00800074 	movhi	r2,1
    b120:	dc800815 	stw	r18,32(sp)
    b124:	dc400715 	stw	r17,28(sp)
    b128:	dc000615 	stw	r16,24(sp)
    b12c:	1088f204 	addi	r2,r2,9160
    b130:	dfc00915 	stw	ra,36(sp)
    b134:	2021883a 	mov	r16,r4
    b138:	3823883a 	mov	r17,r7
    b13c:	14800017 	ldw	r18,0(r2)
    b140:	28001426 	beq	r5,zero,b194 <_wcrtomb_r+0x7c>
    b144:	d9400415 	stw	r5,16(sp)
    b148:	d9800515 	stw	r6,20(sp)
    b14c:	00074cc0 	call	74cc <__locale_charset>
    b150:	d9800517 	ldw	r6,20(sp)
    b154:	d9400417 	ldw	r5,16(sp)
    b158:	100f883a 	mov	r7,r2
    b15c:	dc400015 	stw	r17,0(sp)
    b160:	8009883a 	mov	r4,r16
    b164:	903ee83a 	callr	r18
    b168:	00ffffc4 	movi	r3,-1
    b16c:	10c0031e 	bne	r2,r3,b17c <_wcrtomb_r+0x64>
    b170:	88000015 	stw	zero,0(r17)
    b174:	00c02284 	movi	r3,138
    b178:	80c00015 	stw	r3,0(r16)
    b17c:	dfc00917 	ldw	ra,36(sp)
    b180:	dc800817 	ldw	r18,32(sp)
    b184:	dc400717 	ldw	r17,28(sp)
    b188:	dc000617 	ldw	r16,24(sp)
    b18c:	dec00a04 	addi	sp,sp,40
    b190:	f800283a 	ret
    b194:	00074cc0 	call	74cc <__locale_charset>
    b198:	100f883a 	mov	r7,r2
    b19c:	dc400015 	stw	r17,0(sp)
    b1a0:	000d883a 	mov	r6,zero
    b1a4:	d9400104 	addi	r5,sp,4
    b1a8:	8009883a 	mov	r4,r16
    b1ac:	903ee83a 	callr	r18
    b1b0:	003fed06 	br	b168 <__alt_data_end+0xff00b168>

0000b1b4 <wcrtomb>:
    b1b4:	defff604 	addi	sp,sp,-40
    b1b8:	00800074 	movhi	r2,1
    b1bc:	dc800615 	stw	r18,24(sp)
    b1c0:	dc400515 	stw	r17,20(sp)
    b1c4:	1088f004 	addi	r2,r2,9152
    b1c8:	dfc00915 	stw	ra,36(sp)
    b1cc:	dd000815 	stw	r20,32(sp)
    b1d0:	dcc00715 	stw	r19,28(sp)
    b1d4:	dc000415 	stw	r16,16(sp)
    b1d8:	3025883a 	mov	r18,r6
    b1dc:	14400017 	ldw	r17,0(r2)
    b1e0:	20001926 	beq	r4,zero,b248 <wcrtomb+0x94>
    b1e4:	00800074 	movhi	r2,1
    b1e8:	1088f204 	addi	r2,r2,9160
    b1ec:	15000017 	ldw	r20,0(r2)
    b1f0:	2021883a 	mov	r16,r4
    b1f4:	2827883a 	mov	r19,r5
    b1f8:	00074cc0 	call	74cc <__locale_charset>
    b1fc:	100f883a 	mov	r7,r2
    b200:	dc800015 	stw	r18,0(sp)
    b204:	980d883a 	mov	r6,r19
    b208:	800b883a 	mov	r5,r16
    b20c:	8809883a 	mov	r4,r17
    b210:	a03ee83a 	callr	r20
    b214:	00ffffc4 	movi	r3,-1
    b218:	10c0031e 	bne	r2,r3,b228 <wcrtomb+0x74>
    b21c:	90000015 	stw	zero,0(r18)
    b220:	00c02284 	movi	r3,138
    b224:	88c00015 	stw	r3,0(r17)
    b228:	dfc00917 	ldw	ra,36(sp)
    b22c:	dd000817 	ldw	r20,32(sp)
    b230:	dcc00717 	ldw	r19,28(sp)
    b234:	dc800617 	ldw	r18,24(sp)
    b238:	dc400517 	ldw	r17,20(sp)
    b23c:	dc000417 	ldw	r16,16(sp)
    b240:	dec00a04 	addi	sp,sp,40
    b244:	f800283a 	ret
    b248:	00800074 	movhi	r2,1
    b24c:	1088f204 	addi	r2,r2,9160
    b250:	14000017 	ldw	r16,0(r2)
    b254:	00074cc0 	call	74cc <__locale_charset>
    b258:	100f883a 	mov	r7,r2
    b25c:	dc800015 	stw	r18,0(sp)
    b260:	000d883a 	mov	r6,zero
    b264:	d9400104 	addi	r5,sp,4
    b268:	8809883a 	mov	r4,r17
    b26c:	803ee83a 	callr	r16
    b270:	003fe806 	br	b214 <__alt_data_end+0xff00b214>

0000b274 <__ascii_wctomb>:
    b274:	28000526 	beq	r5,zero,b28c <__ascii_wctomb+0x18>
    b278:	00803fc4 	movi	r2,255
    b27c:	11800536 	bltu	r2,r6,b294 <__ascii_wctomb+0x20>
    b280:	29800005 	stb	r6,0(r5)
    b284:	00800044 	movi	r2,1
    b288:	f800283a 	ret
    b28c:	0005883a 	mov	r2,zero
    b290:	f800283a 	ret
    b294:	00802284 	movi	r2,138
    b298:	20800015 	stw	r2,0(r4)
    b29c:	00bfffc4 	movi	r2,-1
    b2a0:	f800283a 	ret

0000b2a4 <_wctomb_r>:
    b2a4:	00800074 	movhi	r2,1
    b2a8:	defff904 	addi	sp,sp,-28
    b2ac:	1088f204 	addi	r2,r2,9160
    b2b0:	dfc00615 	stw	ra,24(sp)
    b2b4:	dc400515 	stw	r17,20(sp)
    b2b8:	dc000415 	stw	r16,16(sp)
    b2bc:	3823883a 	mov	r17,r7
    b2c0:	14000017 	ldw	r16,0(r2)
    b2c4:	d9000115 	stw	r4,4(sp)
    b2c8:	d9400215 	stw	r5,8(sp)
    b2cc:	d9800315 	stw	r6,12(sp)
    b2d0:	00074cc0 	call	74cc <__locale_charset>
    b2d4:	d9800317 	ldw	r6,12(sp)
    b2d8:	d9400217 	ldw	r5,8(sp)
    b2dc:	d9000117 	ldw	r4,4(sp)
    b2e0:	100f883a 	mov	r7,r2
    b2e4:	dc400015 	stw	r17,0(sp)
    b2e8:	803ee83a 	callr	r16
    b2ec:	dfc00617 	ldw	ra,24(sp)
    b2f0:	dc400517 	ldw	r17,20(sp)
    b2f4:	dc000417 	ldw	r16,16(sp)
    b2f8:	dec00704 	addi	sp,sp,28
    b2fc:	f800283a 	ret

0000b300 <__udivdi3>:
    b300:	defff504 	addi	sp,sp,-44
    b304:	dcc00415 	stw	r19,16(sp)
    b308:	dc000115 	stw	r16,4(sp)
    b30c:	dfc00a15 	stw	ra,40(sp)
    b310:	df000915 	stw	fp,36(sp)
    b314:	ddc00815 	stw	r23,32(sp)
    b318:	dd800715 	stw	r22,28(sp)
    b31c:	dd400615 	stw	r21,24(sp)
    b320:	dd000515 	stw	r20,20(sp)
    b324:	dc800315 	stw	r18,12(sp)
    b328:	dc400215 	stw	r17,8(sp)
    b32c:	2027883a 	mov	r19,r4
    b330:	2821883a 	mov	r16,r5
    b334:	3800411e 	bne	r7,zero,b43c <__udivdi3+0x13c>
    b338:	3023883a 	mov	r17,r6
    b33c:	2025883a 	mov	r18,r4
    b340:	2980522e 	bgeu	r5,r6,b48c <__udivdi3+0x18c>
    b344:	00bfffd4 	movui	r2,65535
    b348:	282d883a 	mov	r22,r5
    b34c:	1180a836 	bltu	r2,r6,b5f0 <__udivdi3+0x2f0>
    b350:	00803fc4 	movi	r2,255
    b354:	1185803a 	cmpltu	r2,r2,r6
    b358:	100490fa 	slli	r2,r2,3
    b35c:	3086d83a 	srl	r3,r6,r2
    b360:	01000074 	movhi	r4,1
    b364:	2101f904 	addi	r4,r4,2020
    b368:	20c7883a 	add	r3,r4,r3
    b36c:	18c00003 	ldbu	r3,0(r3)
    b370:	1885883a 	add	r2,r3,r2
    b374:	00c00804 	movi	r3,32
    b378:	1887c83a 	sub	r3,r3,r2
    b37c:	18000526 	beq	r3,zero,b394 <__udivdi3+0x94>
    b380:	80e0983a 	sll	r16,r16,r3
    b384:	9884d83a 	srl	r2,r19,r2
    b388:	30e2983a 	sll	r17,r6,r3
    b38c:	98e4983a 	sll	r18,r19,r3
    b390:	142cb03a 	or	r22,r2,r16
    b394:	882ad43a 	srli	r21,r17,16
    b398:	b009883a 	mov	r4,r22
    b39c:	8d3fffcc 	andi	r20,r17,65535
    b3a0:	a80b883a 	mov	r5,r21
    b3a4:	000bf0c0 	call	bf0c <__umodsi3>
    b3a8:	b009883a 	mov	r4,r22
    b3ac:	a80b883a 	mov	r5,r21
    b3b0:	1027883a 	mov	r19,r2
    b3b4:	000bea80 	call	bea8 <__udivsi3>
    b3b8:	102d883a 	mov	r22,r2
    b3bc:	9826943a 	slli	r19,r19,16
    b3c0:	9004d43a 	srli	r2,r18,16
    b3c4:	a5a1383a 	mul	r16,r20,r22
    b3c8:	14c4b03a 	or	r2,r2,r19
    b3cc:	1400052e 	bgeu	r2,r16,b3e4 <__udivdi3+0xe4>
    b3d0:	1445883a 	add	r2,r2,r17
    b3d4:	b0ffffc4 	addi	r3,r22,-1
    b3d8:	14400136 	bltu	r2,r17,b3e0 <__udivdi3+0xe0>
    b3dc:	14012336 	bltu	r2,r16,b86c <__udivdi3+0x56c>
    b3e0:	182d883a 	mov	r22,r3
    b3e4:	1421c83a 	sub	r16,r2,r16
    b3e8:	a80b883a 	mov	r5,r21
    b3ec:	8009883a 	mov	r4,r16
    b3f0:	000bf0c0 	call	bf0c <__umodsi3>
    b3f4:	1027883a 	mov	r19,r2
    b3f8:	a80b883a 	mov	r5,r21
    b3fc:	8009883a 	mov	r4,r16
    b400:	000bea80 	call	bea8 <__udivsi3>
    b404:	9826943a 	slli	r19,r19,16
    b408:	a0a9383a 	mul	r20,r20,r2
    b40c:	94bfffcc 	andi	r18,r18,65535
    b410:	94e4b03a 	or	r18,r18,r19
    b414:	9500052e 	bgeu	r18,r20,b42c <__udivdi3+0x12c>
    b418:	8ca5883a 	add	r18,r17,r18
    b41c:	10ffffc4 	addi	r3,r2,-1
    b420:	9440f136 	bltu	r18,r17,b7e8 <__udivdi3+0x4e8>
    b424:	9500f02e 	bgeu	r18,r20,b7e8 <__udivdi3+0x4e8>
    b428:	10bfff84 	addi	r2,r2,-2
    b42c:	b00c943a 	slli	r6,r22,16
    b430:	0007883a 	mov	r3,zero
    b434:	3084b03a 	or	r2,r6,r2
    b438:	00005906 	br	b5a0 <__udivdi3+0x2a0>
    b43c:	29c05636 	bltu	r5,r7,b598 <__udivdi3+0x298>
    b440:	00bfffd4 	movui	r2,65535
    b444:	11c0622e 	bgeu	r2,r7,b5d0 <__udivdi3+0x2d0>
    b448:	00804034 	movhi	r2,256
    b44c:	10bfffc4 	addi	r2,r2,-1
    b450:	11c0ee36 	bltu	r2,r7,b80c <__udivdi3+0x50c>
    b454:	00800404 	movi	r2,16
    b458:	3886d83a 	srl	r3,r7,r2
    b45c:	01000074 	movhi	r4,1
    b460:	2101f904 	addi	r4,r4,2020
    b464:	20c7883a 	add	r3,r4,r3
    b468:	18c00003 	ldbu	r3,0(r3)
    b46c:	05400804 	movi	r21,32
    b470:	1885883a 	add	r2,r3,r2
    b474:	a8abc83a 	sub	r21,r21,r2
    b478:	a800621e 	bne	r21,zero,b604 <__udivdi3+0x304>
    b47c:	3c00e936 	bltu	r7,r16,b824 <__udivdi3+0x524>
    b480:	9985403a 	cmpgeu	r2,r19,r6
    b484:	0007883a 	mov	r3,zero
    b488:	00004506 	br	b5a0 <__udivdi3+0x2a0>
    b48c:	3000041e 	bne	r6,zero,b4a0 <__udivdi3+0x1a0>
    b490:	000b883a 	mov	r5,zero
    b494:	01000044 	movi	r4,1
    b498:	000bea80 	call	bea8 <__udivsi3>
    b49c:	1023883a 	mov	r17,r2
    b4a0:	00bfffd4 	movui	r2,65535
    b4a4:	14404e2e 	bgeu	r2,r17,b5e0 <__udivdi3+0x2e0>
    b4a8:	00804034 	movhi	r2,256
    b4ac:	10bfffc4 	addi	r2,r2,-1
    b4b0:	1440d836 	bltu	r2,r17,b814 <__udivdi3+0x514>
    b4b4:	00800404 	movi	r2,16
    b4b8:	8886d83a 	srl	r3,r17,r2
    b4bc:	01000074 	movhi	r4,1
    b4c0:	2101f904 	addi	r4,r4,2020
    b4c4:	20c7883a 	add	r3,r4,r3
    b4c8:	18c00003 	ldbu	r3,0(r3)
    b4cc:	1885883a 	add	r2,r3,r2
    b4d0:	00c00804 	movi	r3,32
    b4d4:	1887c83a 	sub	r3,r3,r2
    b4d8:	18008f1e 	bne	r3,zero,b718 <__udivdi3+0x418>
    b4dc:	882ad43a 	srli	r21,r17,16
    b4e0:	8461c83a 	sub	r16,r16,r17
    b4e4:	8d3fffcc 	andi	r20,r17,65535
    b4e8:	00c00044 	movi	r3,1
    b4ec:	8009883a 	mov	r4,r16
    b4f0:	a80b883a 	mov	r5,r21
    b4f4:	d8c00015 	stw	r3,0(sp)
    b4f8:	000bf0c0 	call	bf0c <__umodsi3>
    b4fc:	8009883a 	mov	r4,r16
    b500:	a80b883a 	mov	r5,r21
    b504:	1027883a 	mov	r19,r2
    b508:	000bea80 	call	bea8 <__udivsi3>
    b50c:	9826943a 	slli	r19,r19,16
    b510:	9008d43a 	srli	r4,r18,16
    b514:	1521383a 	mul	r16,r2,r20
    b518:	102d883a 	mov	r22,r2
    b51c:	24c8b03a 	or	r4,r4,r19
    b520:	d8c00017 	ldw	r3,0(sp)
    b524:	2400052e 	bgeu	r4,r16,b53c <__udivdi3+0x23c>
    b528:	2449883a 	add	r4,r4,r17
    b52c:	b0bfffc4 	addi	r2,r22,-1
    b530:	24400136 	bltu	r4,r17,b538 <__udivdi3+0x238>
    b534:	2400ca36 	bltu	r4,r16,b860 <__udivdi3+0x560>
    b538:	102d883a 	mov	r22,r2
    b53c:	2421c83a 	sub	r16,r4,r16
    b540:	a80b883a 	mov	r5,r21
    b544:	8009883a 	mov	r4,r16
    b548:	d8c00015 	stw	r3,0(sp)
    b54c:	000bf0c0 	call	bf0c <__umodsi3>
    b550:	1027883a 	mov	r19,r2
    b554:	a80b883a 	mov	r5,r21
    b558:	8009883a 	mov	r4,r16
    b55c:	000bea80 	call	bea8 <__udivsi3>
    b560:	9826943a 	slli	r19,r19,16
    b564:	1529383a 	mul	r20,r2,r20
    b568:	94bfffcc 	andi	r18,r18,65535
    b56c:	94e4b03a 	or	r18,r18,r19
    b570:	d8c00017 	ldw	r3,0(sp)
    b574:	9500052e 	bgeu	r18,r20,b58c <__udivdi3+0x28c>
    b578:	8ca5883a 	add	r18,r17,r18
    b57c:	113fffc4 	addi	r4,r2,-1
    b580:	94409736 	bltu	r18,r17,b7e0 <__udivdi3+0x4e0>
    b584:	9500962e 	bgeu	r18,r20,b7e0 <__udivdi3+0x4e0>
    b588:	10bfff84 	addi	r2,r2,-2
    b58c:	b00c943a 	slli	r6,r22,16
    b590:	3084b03a 	or	r2,r6,r2
    b594:	00000206 	br	b5a0 <__udivdi3+0x2a0>
    b598:	0007883a 	mov	r3,zero
    b59c:	0005883a 	mov	r2,zero
    b5a0:	dfc00a17 	ldw	ra,40(sp)
    b5a4:	df000917 	ldw	fp,36(sp)
    b5a8:	ddc00817 	ldw	r23,32(sp)
    b5ac:	dd800717 	ldw	r22,28(sp)
    b5b0:	dd400617 	ldw	r21,24(sp)
    b5b4:	dd000517 	ldw	r20,20(sp)
    b5b8:	dcc00417 	ldw	r19,16(sp)
    b5bc:	dc800317 	ldw	r18,12(sp)
    b5c0:	dc400217 	ldw	r17,8(sp)
    b5c4:	dc000117 	ldw	r16,4(sp)
    b5c8:	dec00b04 	addi	sp,sp,44
    b5cc:	f800283a 	ret
    b5d0:	00803fc4 	movi	r2,255
    b5d4:	11c5803a 	cmpltu	r2,r2,r7
    b5d8:	100490fa 	slli	r2,r2,3
    b5dc:	003f9e06 	br	b458 <__alt_data_end+0xff00b458>
    b5e0:	00803fc4 	movi	r2,255
    b5e4:	1445803a 	cmpltu	r2,r2,r17
    b5e8:	100490fa 	slli	r2,r2,3
    b5ec:	003fb206 	br	b4b8 <__alt_data_end+0xff00b4b8>
    b5f0:	00804034 	movhi	r2,256
    b5f4:	10bfffc4 	addi	r2,r2,-1
    b5f8:	11808836 	bltu	r2,r6,b81c <__udivdi3+0x51c>
    b5fc:	00800404 	movi	r2,16
    b600:	003f5606 	br	b35c <__alt_data_end+0xff00b35c>
    b604:	30aed83a 	srl	r23,r6,r2
    b608:	3d4e983a 	sll	r7,r7,r21
    b60c:	80acd83a 	srl	r22,r16,r2
    b610:	9884d83a 	srl	r2,r19,r2
    b614:	3deeb03a 	or	r23,r7,r23
    b618:	b824d43a 	srli	r18,r23,16
    b61c:	8560983a 	sll	r16,r16,r21
    b620:	b009883a 	mov	r4,r22
    b624:	900b883a 	mov	r5,r18
    b628:	3568983a 	sll	r20,r6,r21
    b62c:	1420b03a 	or	r16,r2,r16
    b630:	000bf0c0 	call	bf0c <__umodsi3>
    b634:	b009883a 	mov	r4,r22
    b638:	900b883a 	mov	r5,r18
    b63c:	1023883a 	mov	r17,r2
    b640:	000bea80 	call	bea8 <__udivsi3>
    b644:	8808943a 	slli	r4,r17,16
    b648:	bf3fffcc 	andi	fp,r23,65535
    b64c:	8006d43a 	srli	r3,r16,16
    b650:	e0a3383a 	mul	r17,fp,r2
    b654:	100d883a 	mov	r6,r2
    b658:	1906b03a 	or	r3,r3,r4
    b65c:	1c40042e 	bgeu	r3,r17,b670 <__udivdi3+0x370>
    b660:	1dc7883a 	add	r3,r3,r23
    b664:	10bfffc4 	addi	r2,r2,-1
    b668:	1dc0752e 	bgeu	r3,r23,b840 <__udivdi3+0x540>
    b66c:	100d883a 	mov	r6,r2
    b670:	1c63c83a 	sub	r17,r3,r17
    b674:	900b883a 	mov	r5,r18
    b678:	8809883a 	mov	r4,r17
    b67c:	d9800015 	stw	r6,0(sp)
    b680:	000bf0c0 	call	bf0c <__umodsi3>
    b684:	102d883a 	mov	r22,r2
    b688:	8809883a 	mov	r4,r17
    b68c:	900b883a 	mov	r5,r18
    b690:	000bea80 	call	bea8 <__udivsi3>
    b694:	b02c943a 	slli	r22,r22,16
    b698:	e089383a 	mul	r4,fp,r2
    b69c:	843fffcc 	andi	r16,r16,65535
    b6a0:	85a0b03a 	or	r16,r16,r22
    b6a4:	d9800017 	ldw	r6,0(sp)
    b6a8:	8100042e 	bgeu	r16,r4,b6bc <__udivdi3+0x3bc>
    b6ac:	85e1883a 	add	r16,r16,r23
    b6b0:	10ffffc4 	addi	r3,r2,-1
    b6b4:	85c05e2e 	bgeu	r16,r23,b830 <__udivdi3+0x530>
    b6b8:	1805883a 	mov	r2,r3
    b6bc:	300c943a 	slli	r6,r6,16
    b6c0:	a17fffcc 	andi	r5,r20,65535
    b6c4:	a028d43a 	srli	r20,r20,16
    b6c8:	3084b03a 	or	r2,r6,r2
    b6cc:	10ffffcc 	andi	r3,r2,65535
    b6d0:	100cd43a 	srli	r6,r2,16
    b6d4:	194f383a 	mul	r7,r3,r5
    b6d8:	1d07383a 	mul	r3,r3,r20
    b6dc:	314b383a 	mul	r5,r6,r5
    b6e0:	3810d43a 	srli	r8,r7,16
    b6e4:	8121c83a 	sub	r16,r16,r4
    b6e8:	1947883a 	add	r3,r3,r5
    b6ec:	40c7883a 	add	r3,r8,r3
    b6f0:	350d383a 	mul	r6,r6,r20
    b6f4:	1940022e 	bgeu	r3,r5,b700 <__udivdi3+0x400>
    b6f8:	01000074 	movhi	r4,1
    b6fc:	310d883a 	add	r6,r6,r4
    b700:	1828d43a 	srli	r20,r3,16
    b704:	a18d883a 	add	r6,r20,r6
    b708:	81803e36 	bltu	r16,r6,b804 <__udivdi3+0x504>
    b70c:	81803826 	beq	r16,r6,b7f0 <__udivdi3+0x4f0>
    b710:	0007883a 	mov	r3,zero
    b714:	003fa206 	br	b5a0 <__alt_data_end+0xff00b5a0>
    b718:	88e2983a 	sll	r17,r17,r3
    b71c:	80a8d83a 	srl	r20,r16,r2
    b720:	80e0983a 	sll	r16,r16,r3
    b724:	882ad43a 	srli	r21,r17,16
    b728:	9884d83a 	srl	r2,r19,r2
    b72c:	a009883a 	mov	r4,r20
    b730:	a80b883a 	mov	r5,r21
    b734:	142eb03a 	or	r23,r2,r16
    b738:	98e4983a 	sll	r18,r19,r3
    b73c:	000bf0c0 	call	bf0c <__umodsi3>
    b740:	a009883a 	mov	r4,r20
    b744:	a80b883a 	mov	r5,r21
    b748:	1021883a 	mov	r16,r2
    b74c:	000bea80 	call	bea8 <__udivsi3>
    b750:	1039883a 	mov	fp,r2
    b754:	8d3fffcc 	andi	r20,r17,65535
    b758:	8020943a 	slli	r16,r16,16
    b75c:	b804d43a 	srli	r2,r23,16
    b760:	a72d383a 	mul	r22,r20,fp
    b764:	1404b03a 	or	r2,r2,r16
    b768:	1580062e 	bgeu	r2,r22,b784 <__udivdi3+0x484>
    b76c:	1445883a 	add	r2,r2,r17
    b770:	e0ffffc4 	addi	r3,fp,-1
    b774:	14403836 	bltu	r2,r17,b858 <__udivdi3+0x558>
    b778:	1580372e 	bgeu	r2,r22,b858 <__udivdi3+0x558>
    b77c:	e73fff84 	addi	fp,fp,-2
    b780:	1445883a 	add	r2,r2,r17
    b784:	15adc83a 	sub	r22,r2,r22
    b788:	a80b883a 	mov	r5,r21
    b78c:	b009883a 	mov	r4,r22
    b790:	000bf0c0 	call	bf0c <__umodsi3>
    b794:	1027883a 	mov	r19,r2
    b798:	b009883a 	mov	r4,r22
    b79c:	a80b883a 	mov	r5,r21
    b7a0:	000bea80 	call	bea8 <__udivsi3>
    b7a4:	9826943a 	slli	r19,r19,16
    b7a8:	a0a1383a 	mul	r16,r20,r2
    b7ac:	b93fffcc 	andi	r4,r23,65535
    b7b0:	24c8b03a 	or	r4,r4,r19
    b7b4:	2400062e 	bgeu	r4,r16,b7d0 <__udivdi3+0x4d0>
    b7b8:	2449883a 	add	r4,r4,r17
    b7bc:	10ffffc4 	addi	r3,r2,-1
    b7c0:	24402336 	bltu	r4,r17,b850 <__udivdi3+0x550>
    b7c4:	2400222e 	bgeu	r4,r16,b850 <__udivdi3+0x550>
    b7c8:	10bfff84 	addi	r2,r2,-2
    b7cc:	2449883a 	add	r4,r4,r17
    b7d0:	e038943a 	slli	fp,fp,16
    b7d4:	2421c83a 	sub	r16,r4,r16
    b7d8:	e086b03a 	or	r3,fp,r2
    b7dc:	003f4306 	br	b4ec <__alt_data_end+0xff00b4ec>
    b7e0:	2005883a 	mov	r2,r4
    b7e4:	003f6906 	br	b58c <__alt_data_end+0xff00b58c>
    b7e8:	1805883a 	mov	r2,r3
    b7ec:	003f0f06 	br	b42c <__alt_data_end+0xff00b42c>
    b7f0:	1806943a 	slli	r3,r3,16
    b7f4:	9d66983a 	sll	r19,r19,r21
    b7f8:	39ffffcc 	andi	r7,r7,65535
    b7fc:	19c7883a 	add	r3,r3,r7
    b800:	98ffc32e 	bgeu	r19,r3,b710 <__alt_data_end+0xff00b710>
    b804:	10bfffc4 	addi	r2,r2,-1
    b808:	003fc106 	br	b710 <__alt_data_end+0xff00b710>
    b80c:	00800604 	movi	r2,24
    b810:	003f1106 	br	b458 <__alt_data_end+0xff00b458>
    b814:	00800604 	movi	r2,24
    b818:	003f2706 	br	b4b8 <__alt_data_end+0xff00b4b8>
    b81c:	00800604 	movi	r2,24
    b820:	003ece06 	br	b35c <__alt_data_end+0xff00b35c>
    b824:	0007883a 	mov	r3,zero
    b828:	00800044 	movi	r2,1
    b82c:	003f5c06 	br	b5a0 <__alt_data_end+0xff00b5a0>
    b830:	813fa12e 	bgeu	r16,r4,b6b8 <__alt_data_end+0xff00b6b8>
    b834:	10bfff84 	addi	r2,r2,-2
    b838:	85e1883a 	add	r16,r16,r23
    b83c:	003f9f06 	br	b6bc <__alt_data_end+0xff00b6bc>
    b840:	1c7f8a2e 	bgeu	r3,r17,b66c <__alt_data_end+0xff00b66c>
    b844:	31bfff84 	addi	r6,r6,-2
    b848:	1dc7883a 	add	r3,r3,r23
    b84c:	003f8806 	br	b670 <__alt_data_end+0xff00b670>
    b850:	1805883a 	mov	r2,r3
    b854:	003fde06 	br	b7d0 <__alt_data_end+0xff00b7d0>
    b858:	1839883a 	mov	fp,r3
    b85c:	003fc906 	br	b784 <__alt_data_end+0xff00b784>
    b860:	b5bfff84 	addi	r22,r22,-2
    b864:	2449883a 	add	r4,r4,r17
    b868:	003f3406 	br	b53c <__alt_data_end+0xff00b53c>
    b86c:	b5bfff84 	addi	r22,r22,-2
    b870:	1445883a 	add	r2,r2,r17
    b874:	003edb06 	br	b3e4 <__alt_data_end+0xff00b3e4>

0000b878 <__umoddi3>:
    b878:	defff404 	addi	sp,sp,-48
    b87c:	df000a15 	stw	fp,40(sp)
    b880:	dc400315 	stw	r17,12(sp)
    b884:	dc000215 	stw	r16,8(sp)
    b888:	dfc00b15 	stw	ra,44(sp)
    b88c:	ddc00915 	stw	r23,36(sp)
    b890:	dd800815 	stw	r22,32(sp)
    b894:	dd400715 	stw	r21,28(sp)
    b898:	dd000615 	stw	r20,24(sp)
    b89c:	dcc00515 	stw	r19,20(sp)
    b8a0:	dc800415 	stw	r18,16(sp)
    b8a4:	2021883a 	mov	r16,r4
    b8a8:	2823883a 	mov	r17,r5
    b8ac:	2839883a 	mov	fp,r5
    b8b0:	38003c1e 	bne	r7,zero,b9a4 <__umoddi3+0x12c>
    b8b4:	3027883a 	mov	r19,r6
    b8b8:	2029883a 	mov	r20,r4
    b8bc:	2980512e 	bgeu	r5,r6,ba04 <__umoddi3+0x18c>
    b8c0:	00bfffd4 	movui	r2,65535
    b8c4:	11809a36 	bltu	r2,r6,bb30 <__umoddi3+0x2b8>
    b8c8:	01003fc4 	movi	r4,255
    b8cc:	2189803a 	cmpltu	r4,r4,r6
    b8d0:	200890fa 	slli	r4,r4,3
    b8d4:	3104d83a 	srl	r2,r6,r4
    b8d8:	00c00074 	movhi	r3,1
    b8dc:	18c1f904 	addi	r3,r3,2020
    b8e0:	1885883a 	add	r2,r3,r2
    b8e4:	10c00003 	ldbu	r3,0(r2)
    b8e8:	00800804 	movi	r2,32
    b8ec:	1909883a 	add	r4,r3,r4
    b8f0:	1125c83a 	sub	r18,r2,r4
    b8f4:	90000526 	beq	r18,zero,b90c <__umoddi3+0x94>
    b8f8:	8ca2983a 	sll	r17,r17,r18
    b8fc:	8108d83a 	srl	r4,r16,r4
    b900:	34a6983a 	sll	r19,r6,r18
    b904:	84a8983a 	sll	r20,r16,r18
    b908:	2478b03a 	or	fp,r4,r17
    b90c:	982ed43a 	srli	r23,r19,16
    b910:	e009883a 	mov	r4,fp
    b914:	9dbfffcc 	andi	r22,r19,65535
    b918:	b80b883a 	mov	r5,r23
    b91c:	000bf0c0 	call	bf0c <__umodsi3>
    b920:	e009883a 	mov	r4,fp
    b924:	b80b883a 	mov	r5,r23
    b928:	102b883a 	mov	r21,r2
    b92c:	000bea80 	call	bea8 <__udivsi3>
    b930:	a806943a 	slli	r3,r21,16
    b934:	a008d43a 	srli	r4,r20,16
    b938:	b085383a 	mul	r2,r22,r2
    b93c:	20c8b03a 	or	r4,r4,r3
    b940:	2080032e 	bgeu	r4,r2,b950 <__umoddi3+0xd8>
    b944:	24c9883a 	add	r4,r4,r19
    b948:	24c00136 	bltu	r4,r19,b950 <__umoddi3+0xd8>
    b94c:	20811036 	bltu	r4,r2,bd90 <__umoddi3+0x518>
    b950:	20abc83a 	sub	r21,r4,r2
    b954:	b80b883a 	mov	r5,r23
    b958:	a809883a 	mov	r4,r21
    b95c:	000bf0c0 	call	bf0c <__umodsi3>
    b960:	1023883a 	mov	r17,r2
    b964:	b80b883a 	mov	r5,r23
    b968:	a809883a 	mov	r4,r21
    b96c:	000bea80 	call	bea8 <__udivsi3>
    b970:	8822943a 	slli	r17,r17,16
    b974:	b085383a 	mul	r2,r22,r2
    b978:	a0ffffcc 	andi	r3,r20,65535
    b97c:	1c46b03a 	or	r3,r3,r17
    b980:	1880042e 	bgeu	r3,r2,b994 <__umoddi3+0x11c>
    b984:	1cc7883a 	add	r3,r3,r19
    b988:	1cc00236 	bltu	r3,r19,b994 <__umoddi3+0x11c>
    b98c:	1880012e 	bgeu	r3,r2,b994 <__umoddi3+0x11c>
    b990:	1cc7883a 	add	r3,r3,r19
    b994:	1885c83a 	sub	r2,r3,r2
    b998:	1484d83a 	srl	r2,r2,r18
    b99c:	0007883a 	mov	r3,zero
    b9a0:	00004f06 	br	bae0 <__umoddi3+0x268>
    b9a4:	29c04c36 	bltu	r5,r7,bad8 <__umoddi3+0x260>
    b9a8:	00bfffd4 	movui	r2,65535
    b9ac:	11c0582e 	bgeu	r2,r7,bb10 <__umoddi3+0x298>
    b9b0:	00804034 	movhi	r2,256
    b9b4:	10bfffc4 	addi	r2,r2,-1
    b9b8:	11c0e736 	bltu	r2,r7,bd58 <__umoddi3+0x4e0>
    b9bc:	01000404 	movi	r4,16
    b9c0:	3904d83a 	srl	r2,r7,r4
    b9c4:	00c00074 	movhi	r3,1
    b9c8:	18c1f904 	addi	r3,r3,2020
    b9cc:	1885883a 	add	r2,r3,r2
    b9d0:	14c00003 	ldbu	r19,0(r2)
    b9d4:	00c00804 	movi	r3,32
    b9d8:	9927883a 	add	r19,r19,r4
    b9dc:	1ce9c83a 	sub	r20,r3,r19
    b9e0:	a000581e 	bne	r20,zero,bb44 <__umoddi3+0x2cc>
    b9e4:	3c400136 	bltu	r7,r17,b9ec <__umoddi3+0x174>
    b9e8:	8180eb36 	bltu	r16,r6,bd98 <__umoddi3+0x520>
    b9ec:	8185c83a 	sub	r2,r16,r6
    b9f0:	89e3c83a 	sub	r17,r17,r7
    b9f4:	8089803a 	cmpltu	r4,r16,r2
    b9f8:	8939c83a 	sub	fp,r17,r4
    b9fc:	e007883a 	mov	r3,fp
    ba00:	00003706 	br	bae0 <__umoddi3+0x268>
    ba04:	3000041e 	bne	r6,zero,ba18 <__umoddi3+0x1a0>
    ba08:	000b883a 	mov	r5,zero
    ba0c:	01000044 	movi	r4,1
    ba10:	000bea80 	call	bea8 <__udivsi3>
    ba14:	1027883a 	mov	r19,r2
    ba18:	00bfffd4 	movui	r2,65535
    ba1c:	14c0402e 	bgeu	r2,r19,bb20 <__umoddi3+0x2a8>
    ba20:	00804034 	movhi	r2,256
    ba24:	10bfffc4 	addi	r2,r2,-1
    ba28:	14c0cd36 	bltu	r2,r19,bd60 <__umoddi3+0x4e8>
    ba2c:	00800404 	movi	r2,16
    ba30:	9886d83a 	srl	r3,r19,r2
    ba34:	01000074 	movhi	r4,1
    ba38:	2101f904 	addi	r4,r4,2020
    ba3c:	20c7883a 	add	r3,r4,r3
    ba40:	18c00003 	ldbu	r3,0(r3)
    ba44:	1887883a 	add	r3,r3,r2
    ba48:	00800804 	movi	r2,32
    ba4c:	10e5c83a 	sub	r18,r2,r3
    ba50:	9000901e 	bne	r18,zero,bc94 <__umoddi3+0x41c>
    ba54:	982cd43a 	srli	r22,r19,16
    ba58:	8ce3c83a 	sub	r17,r17,r19
    ba5c:	9d7fffcc 	andi	r21,r19,65535
    ba60:	b00b883a 	mov	r5,r22
    ba64:	8809883a 	mov	r4,r17
    ba68:	000bf0c0 	call	bf0c <__umodsi3>
    ba6c:	8809883a 	mov	r4,r17
    ba70:	b00b883a 	mov	r5,r22
    ba74:	1021883a 	mov	r16,r2
    ba78:	000bea80 	call	bea8 <__udivsi3>
    ba7c:	8006943a 	slli	r3,r16,16
    ba80:	a008d43a 	srli	r4,r20,16
    ba84:	1545383a 	mul	r2,r2,r21
    ba88:	20c8b03a 	or	r4,r4,r3
    ba8c:	2080042e 	bgeu	r4,r2,baa0 <__umoddi3+0x228>
    ba90:	24c9883a 	add	r4,r4,r19
    ba94:	24c00236 	bltu	r4,r19,baa0 <__umoddi3+0x228>
    ba98:	2080012e 	bgeu	r4,r2,baa0 <__umoddi3+0x228>
    ba9c:	24c9883a 	add	r4,r4,r19
    baa0:	20a1c83a 	sub	r16,r4,r2
    baa4:	b00b883a 	mov	r5,r22
    baa8:	8009883a 	mov	r4,r16
    baac:	000bf0c0 	call	bf0c <__umodsi3>
    bab0:	1023883a 	mov	r17,r2
    bab4:	b00b883a 	mov	r5,r22
    bab8:	8009883a 	mov	r4,r16
    babc:	000bea80 	call	bea8 <__udivsi3>
    bac0:	8822943a 	slli	r17,r17,16
    bac4:	1545383a 	mul	r2,r2,r21
    bac8:	a53fffcc 	andi	r20,r20,65535
    bacc:	a446b03a 	or	r3,r20,r17
    bad0:	18bfb02e 	bgeu	r3,r2,b994 <__alt_data_end+0xff00b994>
    bad4:	003fab06 	br	b984 <__alt_data_end+0xff00b984>
    bad8:	2005883a 	mov	r2,r4
    badc:	2807883a 	mov	r3,r5
    bae0:	dfc00b17 	ldw	ra,44(sp)
    bae4:	df000a17 	ldw	fp,40(sp)
    bae8:	ddc00917 	ldw	r23,36(sp)
    baec:	dd800817 	ldw	r22,32(sp)
    baf0:	dd400717 	ldw	r21,28(sp)
    baf4:	dd000617 	ldw	r20,24(sp)
    baf8:	dcc00517 	ldw	r19,20(sp)
    bafc:	dc800417 	ldw	r18,16(sp)
    bb00:	dc400317 	ldw	r17,12(sp)
    bb04:	dc000217 	ldw	r16,8(sp)
    bb08:	dec00c04 	addi	sp,sp,48
    bb0c:	f800283a 	ret
    bb10:	04c03fc4 	movi	r19,255
    bb14:	99c9803a 	cmpltu	r4,r19,r7
    bb18:	200890fa 	slli	r4,r4,3
    bb1c:	003fa806 	br	b9c0 <__alt_data_end+0xff00b9c0>
    bb20:	00803fc4 	movi	r2,255
    bb24:	14c5803a 	cmpltu	r2,r2,r19
    bb28:	100490fa 	slli	r2,r2,3
    bb2c:	003fc006 	br	ba30 <__alt_data_end+0xff00ba30>
    bb30:	00804034 	movhi	r2,256
    bb34:	10bfffc4 	addi	r2,r2,-1
    bb38:	11808b36 	bltu	r2,r6,bd68 <__umoddi3+0x4f0>
    bb3c:	01000404 	movi	r4,16
    bb40:	003f6406 	br	b8d4 <__alt_data_end+0xff00b8d4>
    bb44:	34c4d83a 	srl	r2,r6,r19
    bb48:	3d0e983a 	sll	r7,r7,r20
    bb4c:	8cf8d83a 	srl	fp,r17,r19
    bb50:	8d10983a 	sll	r8,r17,r20
    bb54:	38aab03a 	or	r21,r7,r2
    bb58:	a82cd43a 	srli	r22,r21,16
    bb5c:	84e2d83a 	srl	r17,r16,r19
    bb60:	e009883a 	mov	r4,fp
    bb64:	b00b883a 	mov	r5,r22
    bb68:	8a22b03a 	or	r17,r17,r8
    bb6c:	3524983a 	sll	r18,r6,r20
    bb70:	000bf0c0 	call	bf0c <__umodsi3>
    bb74:	e009883a 	mov	r4,fp
    bb78:	b00b883a 	mov	r5,r22
    bb7c:	102f883a 	mov	r23,r2
    bb80:	000bea80 	call	bea8 <__udivsi3>
    bb84:	100d883a 	mov	r6,r2
    bb88:	b808943a 	slli	r4,r23,16
    bb8c:	aa3fffcc 	andi	r8,r21,65535
    bb90:	8804d43a 	srli	r2,r17,16
    bb94:	41af383a 	mul	r23,r8,r6
    bb98:	8520983a 	sll	r16,r16,r20
    bb9c:	1104b03a 	or	r2,r2,r4
    bba0:	15c0042e 	bgeu	r2,r23,bbb4 <__umoddi3+0x33c>
    bba4:	1545883a 	add	r2,r2,r21
    bba8:	30ffffc4 	addi	r3,r6,-1
    bbac:	1540742e 	bgeu	r2,r21,bd80 <__umoddi3+0x508>
    bbb0:	180d883a 	mov	r6,r3
    bbb4:	15efc83a 	sub	r23,r2,r23
    bbb8:	b00b883a 	mov	r5,r22
    bbbc:	b809883a 	mov	r4,r23
    bbc0:	d9800115 	stw	r6,4(sp)
    bbc4:	da000015 	stw	r8,0(sp)
    bbc8:	000bf0c0 	call	bf0c <__umodsi3>
    bbcc:	b00b883a 	mov	r5,r22
    bbd0:	b809883a 	mov	r4,r23
    bbd4:	1039883a 	mov	fp,r2
    bbd8:	000bea80 	call	bea8 <__udivsi3>
    bbdc:	da000017 	ldw	r8,0(sp)
    bbe0:	e038943a 	slli	fp,fp,16
    bbe4:	100b883a 	mov	r5,r2
    bbe8:	4089383a 	mul	r4,r8,r2
    bbec:	8a3fffcc 	andi	r8,r17,65535
    bbf0:	4710b03a 	or	r8,r8,fp
    bbf4:	d9800117 	ldw	r6,4(sp)
    bbf8:	4100042e 	bgeu	r8,r4,bc0c <__umoddi3+0x394>
    bbfc:	4551883a 	add	r8,r8,r21
    bc00:	10bfffc4 	addi	r2,r2,-1
    bc04:	45405a2e 	bgeu	r8,r21,bd70 <__umoddi3+0x4f8>
    bc08:	100b883a 	mov	r5,r2
    bc0c:	300c943a 	slli	r6,r6,16
    bc10:	91ffffcc 	andi	r7,r18,65535
    bc14:	9004d43a 	srli	r2,r18,16
    bc18:	314cb03a 	or	r6,r6,r5
    bc1c:	317fffcc 	andi	r5,r6,65535
    bc20:	300cd43a 	srli	r6,r6,16
    bc24:	29d3383a 	mul	r9,r5,r7
    bc28:	288b383a 	mul	r5,r5,r2
    bc2c:	31cf383a 	mul	r7,r6,r7
    bc30:	4806d43a 	srli	r3,r9,16
    bc34:	4111c83a 	sub	r8,r8,r4
    bc38:	29cb883a 	add	r5,r5,r7
    bc3c:	194b883a 	add	r5,r3,r5
    bc40:	3085383a 	mul	r2,r6,r2
    bc44:	29c0022e 	bgeu	r5,r7,bc50 <__umoddi3+0x3d8>
    bc48:	00c00074 	movhi	r3,1
    bc4c:	10c5883a 	add	r2,r2,r3
    bc50:	2808d43a 	srli	r4,r5,16
    bc54:	280a943a 	slli	r5,r5,16
    bc58:	4a7fffcc 	andi	r9,r9,65535
    bc5c:	2085883a 	add	r2,r4,r2
    bc60:	2a4b883a 	add	r5,r5,r9
    bc64:	40803636 	bltu	r8,r2,bd40 <__umoddi3+0x4c8>
    bc68:	40804d26 	beq	r8,r2,bda0 <__umoddi3+0x528>
    bc6c:	4089c83a 	sub	r4,r8,r2
    bc70:	280f883a 	mov	r7,r5
    bc74:	81cfc83a 	sub	r7,r16,r7
    bc78:	81c7803a 	cmpltu	r3,r16,r7
    bc7c:	20c7c83a 	sub	r3,r4,r3
    bc80:	1cc4983a 	sll	r2,r3,r19
    bc84:	3d0ed83a 	srl	r7,r7,r20
    bc88:	1d06d83a 	srl	r3,r3,r20
    bc8c:	11c4b03a 	or	r2,r2,r7
    bc90:	003f9306 	br	bae0 <__alt_data_end+0xff00bae0>
    bc94:	9ca6983a 	sll	r19,r19,r18
    bc98:	88e8d83a 	srl	r20,r17,r3
    bc9c:	80c4d83a 	srl	r2,r16,r3
    bca0:	982cd43a 	srli	r22,r19,16
    bca4:	8ca2983a 	sll	r17,r17,r18
    bca8:	a009883a 	mov	r4,r20
    bcac:	b00b883a 	mov	r5,r22
    bcb0:	1478b03a 	or	fp,r2,r17
    bcb4:	000bf0c0 	call	bf0c <__umodsi3>
    bcb8:	a009883a 	mov	r4,r20
    bcbc:	b00b883a 	mov	r5,r22
    bcc0:	1023883a 	mov	r17,r2
    bcc4:	000bea80 	call	bea8 <__udivsi3>
    bcc8:	9d7fffcc 	andi	r21,r19,65535
    bccc:	880a943a 	slli	r5,r17,16
    bcd0:	e008d43a 	srli	r4,fp,16
    bcd4:	a885383a 	mul	r2,r21,r2
    bcd8:	84a8983a 	sll	r20,r16,r18
    bcdc:	2148b03a 	or	r4,r4,r5
    bce0:	2080042e 	bgeu	r4,r2,bcf4 <__umoddi3+0x47c>
    bce4:	24c9883a 	add	r4,r4,r19
    bce8:	24c00236 	bltu	r4,r19,bcf4 <__umoddi3+0x47c>
    bcec:	2080012e 	bgeu	r4,r2,bcf4 <__umoddi3+0x47c>
    bcf0:	24c9883a 	add	r4,r4,r19
    bcf4:	20a3c83a 	sub	r17,r4,r2
    bcf8:	b00b883a 	mov	r5,r22
    bcfc:	8809883a 	mov	r4,r17
    bd00:	000bf0c0 	call	bf0c <__umodsi3>
    bd04:	102f883a 	mov	r23,r2
    bd08:	8809883a 	mov	r4,r17
    bd0c:	b00b883a 	mov	r5,r22
    bd10:	000bea80 	call	bea8 <__udivsi3>
    bd14:	b82e943a 	slli	r23,r23,16
    bd18:	a885383a 	mul	r2,r21,r2
    bd1c:	e13fffcc 	andi	r4,fp,65535
    bd20:	25c8b03a 	or	r4,r4,r23
    bd24:	2080042e 	bgeu	r4,r2,bd38 <__umoddi3+0x4c0>
    bd28:	24c9883a 	add	r4,r4,r19
    bd2c:	24c00236 	bltu	r4,r19,bd38 <__umoddi3+0x4c0>
    bd30:	2080012e 	bgeu	r4,r2,bd38 <__umoddi3+0x4c0>
    bd34:	24c9883a 	add	r4,r4,r19
    bd38:	20a3c83a 	sub	r17,r4,r2
    bd3c:	003f4806 	br	ba60 <__alt_data_end+0xff00ba60>
    bd40:	2c8fc83a 	sub	r7,r5,r18
    bd44:	1545c83a 	sub	r2,r2,r21
    bd48:	29cb803a 	cmpltu	r5,r5,r7
    bd4c:	1145c83a 	sub	r2,r2,r5
    bd50:	4089c83a 	sub	r4,r8,r2
    bd54:	003fc706 	br	bc74 <__alt_data_end+0xff00bc74>
    bd58:	01000604 	movi	r4,24
    bd5c:	003f1806 	br	b9c0 <__alt_data_end+0xff00b9c0>
    bd60:	00800604 	movi	r2,24
    bd64:	003f3206 	br	ba30 <__alt_data_end+0xff00ba30>
    bd68:	01000604 	movi	r4,24
    bd6c:	003ed906 	br	b8d4 <__alt_data_end+0xff00b8d4>
    bd70:	413fa52e 	bgeu	r8,r4,bc08 <__alt_data_end+0xff00bc08>
    bd74:	297fff84 	addi	r5,r5,-2
    bd78:	4551883a 	add	r8,r8,r21
    bd7c:	003fa306 	br	bc0c <__alt_data_end+0xff00bc0c>
    bd80:	15ff8b2e 	bgeu	r2,r23,bbb0 <__alt_data_end+0xff00bbb0>
    bd84:	31bfff84 	addi	r6,r6,-2
    bd88:	1545883a 	add	r2,r2,r21
    bd8c:	003f8906 	br	bbb4 <__alt_data_end+0xff00bbb4>
    bd90:	24c9883a 	add	r4,r4,r19
    bd94:	003eee06 	br	b950 <__alt_data_end+0xff00b950>
    bd98:	8005883a 	mov	r2,r16
    bd9c:	003f1706 	br	b9fc <__alt_data_end+0xff00b9fc>
    bda0:	817fe736 	bltu	r16,r5,bd40 <__alt_data_end+0xff00bd40>
    bda4:	280f883a 	mov	r7,r5
    bda8:	0009883a 	mov	r4,zero
    bdac:	003fb106 	br	bc74 <__alt_data_end+0xff00bc74>

0000bdb0 <__divsi3>:
    bdb0:	20001b16 	blt	r4,zero,be20 <__divsi3+0x70>
    bdb4:	000f883a 	mov	r7,zero
    bdb8:	28001616 	blt	r5,zero,be14 <__divsi3+0x64>
    bdbc:	200d883a 	mov	r6,r4
    bdc0:	29001a2e 	bgeu	r5,r4,be2c <__divsi3+0x7c>
    bdc4:	00800804 	movi	r2,32
    bdc8:	00c00044 	movi	r3,1
    bdcc:	00000106 	br	bdd4 <__divsi3+0x24>
    bdd0:	10000d26 	beq	r2,zero,be08 <__divsi3+0x58>
    bdd4:	294b883a 	add	r5,r5,r5
    bdd8:	10bfffc4 	addi	r2,r2,-1
    bddc:	18c7883a 	add	r3,r3,r3
    bde0:	293ffb36 	bltu	r5,r4,bdd0 <__alt_data_end+0xff00bdd0>
    bde4:	0005883a 	mov	r2,zero
    bde8:	18000726 	beq	r3,zero,be08 <__divsi3+0x58>
    bdec:	0005883a 	mov	r2,zero
    bdf0:	31400236 	bltu	r6,r5,bdfc <__divsi3+0x4c>
    bdf4:	314dc83a 	sub	r6,r6,r5
    bdf8:	10c4b03a 	or	r2,r2,r3
    bdfc:	1806d07a 	srli	r3,r3,1
    be00:	280ad07a 	srli	r5,r5,1
    be04:	183ffa1e 	bne	r3,zero,bdf0 <__alt_data_end+0xff00bdf0>
    be08:	38000126 	beq	r7,zero,be10 <__divsi3+0x60>
    be0c:	0085c83a 	sub	r2,zero,r2
    be10:	f800283a 	ret
    be14:	014bc83a 	sub	r5,zero,r5
    be18:	39c0005c 	xori	r7,r7,1
    be1c:	003fe706 	br	bdbc <__alt_data_end+0xff00bdbc>
    be20:	0109c83a 	sub	r4,zero,r4
    be24:	01c00044 	movi	r7,1
    be28:	003fe306 	br	bdb8 <__alt_data_end+0xff00bdb8>
    be2c:	00c00044 	movi	r3,1
    be30:	003fee06 	br	bdec <__alt_data_end+0xff00bdec>

0000be34 <__modsi3>:
    be34:	20001716 	blt	r4,zero,be94 <__modsi3+0x60>
    be38:	000f883a 	mov	r7,zero
    be3c:	2005883a 	mov	r2,r4
    be40:	28001216 	blt	r5,zero,be8c <__modsi3+0x58>
    be44:	2900162e 	bgeu	r5,r4,bea0 <__modsi3+0x6c>
    be48:	01800804 	movi	r6,32
    be4c:	00c00044 	movi	r3,1
    be50:	00000106 	br	be58 <__modsi3+0x24>
    be54:	30000a26 	beq	r6,zero,be80 <__modsi3+0x4c>
    be58:	294b883a 	add	r5,r5,r5
    be5c:	31bfffc4 	addi	r6,r6,-1
    be60:	18c7883a 	add	r3,r3,r3
    be64:	293ffb36 	bltu	r5,r4,be54 <__alt_data_end+0xff00be54>
    be68:	18000526 	beq	r3,zero,be80 <__modsi3+0x4c>
    be6c:	1806d07a 	srli	r3,r3,1
    be70:	11400136 	bltu	r2,r5,be78 <__modsi3+0x44>
    be74:	1145c83a 	sub	r2,r2,r5
    be78:	280ad07a 	srli	r5,r5,1
    be7c:	183ffb1e 	bne	r3,zero,be6c <__alt_data_end+0xff00be6c>
    be80:	38000126 	beq	r7,zero,be88 <__modsi3+0x54>
    be84:	0085c83a 	sub	r2,zero,r2
    be88:	f800283a 	ret
    be8c:	014bc83a 	sub	r5,zero,r5
    be90:	003fec06 	br	be44 <__alt_data_end+0xff00be44>
    be94:	0109c83a 	sub	r4,zero,r4
    be98:	01c00044 	movi	r7,1
    be9c:	003fe706 	br	be3c <__alt_data_end+0xff00be3c>
    bea0:	00c00044 	movi	r3,1
    bea4:	003ff106 	br	be6c <__alt_data_end+0xff00be6c>

0000bea8 <__udivsi3>:
    bea8:	200d883a 	mov	r6,r4
    beac:	2900152e 	bgeu	r5,r4,bf04 <__udivsi3+0x5c>
    beb0:	28001416 	blt	r5,zero,bf04 <__udivsi3+0x5c>
    beb4:	00800804 	movi	r2,32
    beb8:	00c00044 	movi	r3,1
    bebc:	00000206 	br	bec8 <__udivsi3+0x20>
    bec0:	10000e26 	beq	r2,zero,befc <__udivsi3+0x54>
    bec4:	28000516 	blt	r5,zero,bedc <__udivsi3+0x34>
    bec8:	294b883a 	add	r5,r5,r5
    becc:	10bfffc4 	addi	r2,r2,-1
    bed0:	18c7883a 	add	r3,r3,r3
    bed4:	293ffa36 	bltu	r5,r4,bec0 <__alt_data_end+0xff00bec0>
    bed8:	18000826 	beq	r3,zero,befc <__udivsi3+0x54>
    bedc:	0005883a 	mov	r2,zero
    bee0:	31400236 	bltu	r6,r5,beec <__udivsi3+0x44>
    bee4:	314dc83a 	sub	r6,r6,r5
    bee8:	10c4b03a 	or	r2,r2,r3
    beec:	1806d07a 	srli	r3,r3,1
    bef0:	280ad07a 	srli	r5,r5,1
    bef4:	183ffa1e 	bne	r3,zero,bee0 <__alt_data_end+0xff00bee0>
    bef8:	f800283a 	ret
    befc:	0005883a 	mov	r2,zero
    bf00:	f800283a 	ret
    bf04:	00c00044 	movi	r3,1
    bf08:	003ff406 	br	bedc <__alt_data_end+0xff00bedc>

0000bf0c <__umodsi3>:
    bf0c:	2005883a 	mov	r2,r4
    bf10:	2900122e 	bgeu	r5,r4,bf5c <__umodsi3+0x50>
    bf14:	28001116 	blt	r5,zero,bf5c <__umodsi3+0x50>
    bf18:	01800804 	movi	r6,32
    bf1c:	00c00044 	movi	r3,1
    bf20:	00000206 	br	bf2c <__umodsi3+0x20>
    bf24:	30000c26 	beq	r6,zero,bf58 <__umodsi3+0x4c>
    bf28:	28000516 	blt	r5,zero,bf40 <__umodsi3+0x34>
    bf2c:	294b883a 	add	r5,r5,r5
    bf30:	31bfffc4 	addi	r6,r6,-1
    bf34:	18c7883a 	add	r3,r3,r3
    bf38:	293ffa36 	bltu	r5,r4,bf24 <__alt_data_end+0xff00bf24>
    bf3c:	18000626 	beq	r3,zero,bf58 <__umodsi3+0x4c>
    bf40:	1806d07a 	srli	r3,r3,1
    bf44:	11400136 	bltu	r2,r5,bf4c <__umodsi3+0x40>
    bf48:	1145c83a 	sub	r2,r2,r5
    bf4c:	280ad07a 	srli	r5,r5,1
    bf50:	183ffb1e 	bne	r3,zero,bf40 <__alt_data_end+0xff00bf40>
    bf54:	f800283a 	ret
    bf58:	f800283a 	ret
    bf5c:	00c00044 	movi	r3,1
    bf60:	003ff706 	br	bf40 <__alt_data_end+0xff00bf40>

0000bf64 <__adddf3>:
    bf64:	02c00434 	movhi	r11,16
    bf68:	5affffc4 	addi	r11,r11,-1
    bf6c:	2806d7fa 	srli	r3,r5,31
    bf70:	2ad4703a 	and	r10,r5,r11
    bf74:	3ad2703a 	and	r9,r7,r11
    bf78:	3804d53a 	srli	r2,r7,20
    bf7c:	3018d77a 	srli	r12,r6,29
    bf80:	280ad53a 	srli	r5,r5,20
    bf84:	501490fa 	slli	r10,r10,3
    bf88:	2010d77a 	srli	r8,r4,29
    bf8c:	481290fa 	slli	r9,r9,3
    bf90:	380ed7fa 	srli	r7,r7,31
    bf94:	defffb04 	addi	sp,sp,-20
    bf98:	dc800215 	stw	r18,8(sp)
    bf9c:	dc400115 	stw	r17,4(sp)
    bfa0:	dc000015 	stw	r16,0(sp)
    bfa4:	dfc00415 	stw	ra,16(sp)
    bfa8:	dcc00315 	stw	r19,12(sp)
    bfac:	1c803fcc 	andi	r18,r3,255
    bfb0:	2c01ffcc 	andi	r16,r5,2047
    bfb4:	5210b03a 	or	r8,r10,r8
    bfb8:	202290fa 	slli	r17,r4,3
    bfbc:	1081ffcc 	andi	r2,r2,2047
    bfc0:	4b12b03a 	or	r9,r9,r12
    bfc4:	300c90fa 	slli	r6,r6,3
    bfc8:	91c07526 	beq	r18,r7,c1a0 <__adddf3+0x23c>
    bfcc:	8087c83a 	sub	r3,r16,r2
    bfd0:	00c0ab0e 	bge	zero,r3,c280 <__adddf3+0x31c>
    bfd4:	10002a1e 	bne	r2,zero,c080 <__adddf3+0x11c>
    bfd8:	4984b03a 	or	r2,r9,r6
    bfdc:	1000961e 	bne	r2,zero,c238 <__adddf3+0x2d4>
    bfe0:	888001cc 	andi	r2,r17,7
    bfe4:	10000726 	beq	r2,zero,c004 <__adddf3+0xa0>
    bfe8:	888003cc 	andi	r2,r17,15
    bfec:	00c00104 	movi	r3,4
    bff0:	10c00426 	beq	r2,r3,c004 <__adddf3+0xa0>
    bff4:	88c7883a 	add	r3,r17,r3
    bff8:	1c63803a 	cmpltu	r17,r3,r17
    bffc:	4451883a 	add	r8,r8,r17
    c000:	1823883a 	mov	r17,r3
    c004:	4080202c 	andhi	r2,r8,128
    c008:	10005926 	beq	r2,zero,c170 <__adddf3+0x20c>
    c00c:	84000044 	addi	r16,r16,1
    c010:	0081ffc4 	movi	r2,2047
    c014:	8080ba26 	beq	r16,r2,c300 <__adddf3+0x39c>
    c018:	00bfe034 	movhi	r2,65408
    c01c:	10bfffc4 	addi	r2,r2,-1
    c020:	4090703a 	and	r8,r8,r2
    c024:	4004977a 	slli	r2,r8,29
    c028:	4010927a 	slli	r8,r8,9
    c02c:	8822d0fa 	srli	r17,r17,3
    c030:	8401ffcc 	andi	r16,r16,2047
    c034:	4010d33a 	srli	r8,r8,12
    c038:	9007883a 	mov	r3,r18
    c03c:	1444b03a 	or	r2,r2,r17
    c040:	8401ffcc 	andi	r16,r16,2047
    c044:	8020953a 	slli	r16,r16,20
    c048:	18c03fcc 	andi	r3,r3,255
    c04c:	01000434 	movhi	r4,16
    c050:	213fffc4 	addi	r4,r4,-1
    c054:	180697fa 	slli	r3,r3,31
    c058:	4110703a 	and	r8,r8,r4
    c05c:	4410b03a 	or	r8,r8,r16
    c060:	40c6b03a 	or	r3,r8,r3
    c064:	dfc00417 	ldw	ra,16(sp)
    c068:	dcc00317 	ldw	r19,12(sp)
    c06c:	dc800217 	ldw	r18,8(sp)
    c070:	dc400117 	ldw	r17,4(sp)
    c074:	dc000017 	ldw	r16,0(sp)
    c078:	dec00504 	addi	sp,sp,20
    c07c:	f800283a 	ret
    c080:	0081ffc4 	movi	r2,2047
    c084:	80bfd626 	beq	r16,r2,bfe0 <__alt_data_end+0xff00bfe0>
    c088:	4a402034 	orhi	r9,r9,128
    c08c:	00800e04 	movi	r2,56
    c090:	10c09f16 	blt	r2,r3,c310 <__adddf3+0x3ac>
    c094:	008007c4 	movi	r2,31
    c098:	10c0c216 	blt	r2,r3,c3a4 <__adddf3+0x440>
    c09c:	00800804 	movi	r2,32
    c0a0:	10c5c83a 	sub	r2,r2,r3
    c0a4:	488a983a 	sll	r5,r9,r2
    c0a8:	30c8d83a 	srl	r4,r6,r3
    c0ac:	3084983a 	sll	r2,r6,r2
    c0b0:	48c6d83a 	srl	r3,r9,r3
    c0b4:	290cb03a 	or	r6,r5,r4
    c0b8:	1004c03a 	cmpne	r2,r2,zero
    c0bc:	308cb03a 	or	r6,r6,r2
    c0c0:	898dc83a 	sub	r6,r17,r6
    c0c4:	89a3803a 	cmpltu	r17,r17,r6
    c0c8:	40d1c83a 	sub	r8,r8,r3
    c0cc:	4451c83a 	sub	r8,r8,r17
    c0d0:	3023883a 	mov	r17,r6
    c0d4:	4080202c 	andhi	r2,r8,128
    c0d8:	10002326 	beq	r2,zero,c168 <__adddf3+0x204>
    c0dc:	04c02034 	movhi	r19,128
    c0e0:	9cffffc4 	addi	r19,r19,-1
    c0e4:	44e6703a 	and	r19,r8,r19
    c0e8:	98007626 	beq	r19,zero,c2c4 <__adddf3+0x360>
    c0ec:	9809883a 	mov	r4,r19
    c0f0:	000e5680 	call	e568 <__clzsi2>
    c0f4:	10fffe04 	addi	r3,r2,-8
    c0f8:	010007c4 	movi	r4,31
    c0fc:	20c07716 	blt	r4,r3,c2dc <__adddf3+0x378>
    c100:	00800804 	movi	r2,32
    c104:	10c5c83a 	sub	r2,r2,r3
    c108:	8884d83a 	srl	r2,r17,r2
    c10c:	98d0983a 	sll	r8,r19,r3
    c110:	88e2983a 	sll	r17,r17,r3
    c114:	1204b03a 	or	r2,r2,r8
    c118:	1c007416 	blt	r3,r16,c2ec <__adddf3+0x388>
    c11c:	1c21c83a 	sub	r16,r3,r16
    c120:	82000044 	addi	r8,r16,1
    c124:	00c007c4 	movi	r3,31
    c128:	1a009116 	blt	r3,r8,c370 <__adddf3+0x40c>
    c12c:	00c00804 	movi	r3,32
    c130:	1a07c83a 	sub	r3,r3,r8
    c134:	8a08d83a 	srl	r4,r17,r8
    c138:	88e2983a 	sll	r17,r17,r3
    c13c:	10c6983a 	sll	r3,r2,r3
    c140:	1210d83a 	srl	r8,r2,r8
    c144:	8804c03a 	cmpne	r2,r17,zero
    c148:	1906b03a 	or	r3,r3,r4
    c14c:	18a2b03a 	or	r17,r3,r2
    c150:	0021883a 	mov	r16,zero
    c154:	003fa206 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c158:	1890b03a 	or	r8,r3,r2
    c15c:	40017d26 	beq	r8,zero,c754 <__adddf3+0x7f0>
    c160:	1011883a 	mov	r8,r2
    c164:	1823883a 	mov	r17,r3
    c168:	888001cc 	andi	r2,r17,7
    c16c:	103f9e1e 	bne	r2,zero,bfe8 <__alt_data_end+0xff00bfe8>
    c170:	4004977a 	slli	r2,r8,29
    c174:	8822d0fa 	srli	r17,r17,3
    c178:	4010d0fa 	srli	r8,r8,3
    c17c:	9007883a 	mov	r3,r18
    c180:	1444b03a 	or	r2,r2,r17
    c184:	0101ffc4 	movi	r4,2047
    c188:	81002426 	beq	r16,r4,c21c <__adddf3+0x2b8>
    c18c:	8120703a 	and	r16,r16,r4
    c190:	01000434 	movhi	r4,16
    c194:	213fffc4 	addi	r4,r4,-1
    c198:	4110703a 	and	r8,r8,r4
    c19c:	003fa806 	br	c040 <__alt_data_end+0xff00c040>
    c1a0:	8089c83a 	sub	r4,r16,r2
    c1a4:	01005e0e 	bge	zero,r4,c320 <__adddf3+0x3bc>
    c1a8:	10002b26 	beq	r2,zero,c258 <__adddf3+0x2f4>
    c1ac:	0081ffc4 	movi	r2,2047
    c1b0:	80bf8b26 	beq	r16,r2,bfe0 <__alt_data_end+0xff00bfe0>
    c1b4:	4a402034 	orhi	r9,r9,128
    c1b8:	00800e04 	movi	r2,56
    c1bc:	1100a40e 	bge	r2,r4,c450 <__adddf3+0x4ec>
    c1c0:	498cb03a 	or	r6,r9,r6
    c1c4:	300ac03a 	cmpne	r5,r6,zero
    c1c8:	0013883a 	mov	r9,zero
    c1cc:	2c4b883a 	add	r5,r5,r17
    c1d0:	2c63803a 	cmpltu	r17,r5,r17
    c1d4:	4a11883a 	add	r8,r9,r8
    c1d8:	8a11883a 	add	r8,r17,r8
    c1dc:	2823883a 	mov	r17,r5
    c1e0:	4080202c 	andhi	r2,r8,128
    c1e4:	103fe026 	beq	r2,zero,c168 <__alt_data_end+0xff00c168>
    c1e8:	84000044 	addi	r16,r16,1
    c1ec:	0081ffc4 	movi	r2,2047
    c1f0:	8080d226 	beq	r16,r2,c53c <__adddf3+0x5d8>
    c1f4:	00bfe034 	movhi	r2,65408
    c1f8:	10bfffc4 	addi	r2,r2,-1
    c1fc:	4090703a 	and	r8,r8,r2
    c200:	880ad07a 	srli	r5,r17,1
    c204:	400897fa 	slli	r4,r8,31
    c208:	88c0004c 	andi	r3,r17,1
    c20c:	28e2b03a 	or	r17,r5,r3
    c210:	4010d07a 	srli	r8,r8,1
    c214:	2462b03a 	or	r17,r4,r17
    c218:	003f7106 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c21c:	4088b03a 	or	r4,r8,r2
    c220:	20014526 	beq	r4,zero,c738 <__adddf3+0x7d4>
    c224:	01000434 	movhi	r4,16
    c228:	42000234 	orhi	r8,r8,8
    c22c:	213fffc4 	addi	r4,r4,-1
    c230:	4110703a 	and	r8,r8,r4
    c234:	003f8206 	br	c040 <__alt_data_end+0xff00c040>
    c238:	18ffffc4 	addi	r3,r3,-1
    c23c:	1800491e 	bne	r3,zero,c364 <__adddf3+0x400>
    c240:	898bc83a 	sub	r5,r17,r6
    c244:	8963803a 	cmpltu	r17,r17,r5
    c248:	4251c83a 	sub	r8,r8,r9
    c24c:	4451c83a 	sub	r8,r8,r17
    c250:	2823883a 	mov	r17,r5
    c254:	003f9f06 	br	c0d4 <__alt_data_end+0xff00c0d4>
    c258:	4984b03a 	or	r2,r9,r6
    c25c:	103f6026 	beq	r2,zero,bfe0 <__alt_data_end+0xff00bfe0>
    c260:	213fffc4 	addi	r4,r4,-1
    c264:	2000931e 	bne	r4,zero,c4b4 <__adddf3+0x550>
    c268:	898d883a 	add	r6,r17,r6
    c26c:	3463803a 	cmpltu	r17,r6,r17
    c270:	4251883a 	add	r8,r8,r9
    c274:	8a11883a 	add	r8,r17,r8
    c278:	3023883a 	mov	r17,r6
    c27c:	003fd806 	br	c1e0 <__alt_data_end+0xff00c1e0>
    c280:	1800541e 	bne	r3,zero,c3d4 <__adddf3+0x470>
    c284:	80800044 	addi	r2,r16,1
    c288:	1081ffcc 	andi	r2,r2,2047
    c28c:	00c00044 	movi	r3,1
    c290:	1880a00e 	bge	r3,r2,c514 <__adddf3+0x5b0>
    c294:	8989c83a 	sub	r4,r17,r6
    c298:	8905803a 	cmpltu	r2,r17,r4
    c29c:	4267c83a 	sub	r19,r8,r9
    c2a0:	98a7c83a 	sub	r19,r19,r2
    c2a4:	9880202c 	andhi	r2,r19,128
    c2a8:	10006326 	beq	r2,zero,c438 <__adddf3+0x4d4>
    c2ac:	3463c83a 	sub	r17,r6,r17
    c2b0:	4a07c83a 	sub	r3,r9,r8
    c2b4:	344d803a 	cmpltu	r6,r6,r17
    c2b8:	19a7c83a 	sub	r19,r3,r6
    c2bc:	3825883a 	mov	r18,r7
    c2c0:	983f8a1e 	bne	r19,zero,c0ec <__alt_data_end+0xff00c0ec>
    c2c4:	8809883a 	mov	r4,r17
    c2c8:	000e5680 	call	e568 <__clzsi2>
    c2cc:	10800804 	addi	r2,r2,32
    c2d0:	10fffe04 	addi	r3,r2,-8
    c2d4:	010007c4 	movi	r4,31
    c2d8:	20ff890e 	bge	r4,r3,c100 <__alt_data_end+0xff00c100>
    c2dc:	10bff604 	addi	r2,r2,-40
    c2e0:	8884983a 	sll	r2,r17,r2
    c2e4:	0023883a 	mov	r17,zero
    c2e8:	1c3f8c0e 	bge	r3,r16,c11c <__alt_data_end+0xff00c11c>
    c2ec:	023fe034 	movhi	r8,65408
    c2f0:	423fffc4 	addi	r8,r8,-1
    c2f4:	80e1c83a 	sub	r16,r16,r3
    c2f8:	1210703a 	and	r8,r2,r8
    c2fc:	003f3806 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c300:	9007883a 	mov	r3,r18
    c304:	0011883a 	mov	r8,zero
    c308:	0005883a 	mov	r2,zero
    c30c:	003f4c06 	br	c040 <__alt_data_end+0xff00c040>
    c310:	498cb03a 	or	r6,r9,r6
    c314:	300cc03a 	cmpne	r6,r6,zero
    c318:	0007883a 	mov	r3,zero
    c31c:	003f6806 	br	c0c0 <__alt_data_end+0xff00c0c0>
    c320:	20009c1e 	bne	r4,zero,c594 <__adddf3+0x630>
    c324:	80800044 	addi	r2,r16,1
    c328:	1141ffcc 	andi	r5,r2,2047
    c32c:	01000044 	movi	r4,1
    c330:	2140670e 	bge	r4,r5,c4d0 <__adddf3+0x56c>
    c334:	0101ffc4 	movi	r4,2047
    c338:	11007f26 	beq	r2,r4,c538 <__adddf3+0x5d4>
    c33c:	898d883a 	add	r6,r17,r6
    c340:	4247883a 	add	r3,r8,r9
    c344:	3451803a 	cmpltu	r8,r6,r17
    c348:	40d1883a 	add	r8,r8,r3
    c34c:	402297fa 	slli	r17,r8,31
    c350:	300cd07a 	srli	r6,r6,1
    c354:	4010d07a 	srli	r8,r8,1
    c358:	1021883a 	mov	r16,r2
    c35c:	89a2b03a 	or	r17,r17,r6
    c360:	003f1f06 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c364:	0081ffc4 	movi	r2,2047
    c368:	80bf481e 	bne	r16,r2,c08c <__alt_data_end+0xff00c08c>
    c36c:	003f1c06 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c370:	843ff844 	addi	r16,r16,-31
    c374:	01000804 	movi	r4,32
    c378:	1406d83a 	srl	r3,r2,r16
    c37c:	41005026 	beq	r8,r4,c4c0 <__adddf3+0x55c>
    c380:	01001004 	movi	r4,64
    c384:	2211c83a 	sub	r8,r4,r8
    c388:	1204983a 	sll	r2,r2,r8
    c38c:	88a2b03a 	or	r17,r17,r2
    c390:	8822c03a 	cmpne	r17,r17,zero
    c394:	1c62b03a 	or	r17,r3,r17
    c398:	0011883a 	mov	r8,zero
    c39c:	0021883a 	mov	r16,zero
    c3a0:	003f7106 	br	c168 <__alt_data_end+0xff00c168>
    c3a4:	193ff804 	addi	r4,r3,-32
    c3a8:	00800804 	movi	r2,32
    c3ac:	4908d83a 	srl	r4,r9,r4
    c3b0:	18804526 	beq	r3,r2,c4c8 <__adddf3+0x564>
    c3b4:	00801004 	movi	r2,64
    c3b8:	10c5c83a 	sub	r2,r2,r3
    c3bc:	4886983a 	sll	r3,r9,r2
    c3c0:	198cb03a 	or	r6,r3,r6
    c3c4:	300cc03a 	cmpne	r6,r6,zero
    c3c8:	218cb03a 	or	r6,r4,r6
    c3cc:	0007883a 	mov	r3,zero
    c3d0:	003f3b06 	br	c0c0 <__alt_data_end+0xff00c0c0>
    c3d4:	80002a26 	beq	r16,zero,c480 <__adddf3+0x51c>
    c3d8:	0101ffc4 	movi	r4,2047
    c3dc:	11006826 	beq	r2,r4,c580 <__adddf3+0x61c>
    c3e0:	00c7c83a 	sub	r3,zero,r3
    c3e4:	42002034 	orhi	r8,r8,128
    c3e8:	01000e04 	movi	r4,56
    c3ec:	20c07c16 	blt	r4,r3,c5e0 <__adddf3+0x67c>
    c3f0:	010007c4 	movi	r4,31
    c3f4:	20c0da16 	blt	r4,r3,c760 <__adddf3+0x7fc>
    c3f8:	01000804 	movi	r4,32
    c3fc:	20c9c83a 	sub	r4,r4,r3
    c400:	4114983a 	sll	r10,r8,r4
    c404:	88cad83a 	srl	r5,r17,r3
    c408:	8908983a 	sll	r4,r17,r4
    c40c:	40c6d83a 	srl	r3,r8,r3
    c410:	5162b03a 	or	r17,r10,r5
    c414:	2008c03a 	cmpne	r4,r4,zero
    c418:	8922b03a 	or	r17,r17,r4
    c41c:	3463c83a 	sub	r17,r6,r17
    c420:	48c7c83a 	sub	r3,r9,r3
    c424:	344d803a 	cmpltu	r6,r6,r17
    c428:	1991c83a 	sub	r8,r3,r6
    c42c:	1021883a 	mov	r16,r2
    c430:	3825883a 	mov	r18,r7
    c434:	003f2706 	br	c0d4 <__alt_data_end+0xff00c0d4>
    c438:	24d0b03a 	or	r8,r4,r19
    c43c:	40001b1e 	bne	r8,zero,c4ac <__adddf3+0x548>
    c440:	0005883a 	mov	r2,zero
    c444:	0007883a 	mov	r3,zero
    c448:	0021883a 	mov	r16,zero
    c44c:	003f4d06 	br	c184 <__alt_data_end+0xff00c184>
    c450:	008007c4 	movi	r2,31
    c454:	11003c16 	blt	r2,r4,c548 <__adddf3+0x5e4>
    c458:	00800804 	movi	r2,32
    c45c:	1105c83a 	sub	r2,r2,r4
    c460:	488e983a 	sll	r7,r9,r2
    c464:	310ad83a 	srl	r5,r6,r4
    c468:	3084983a 	sll	r2,r6,r2
    c46c:	4912d83a 	srl	r9,r9,r4
    c470:	394ab03a 	or	r5,r7,r5
    c474:	1004c03a 	cmpne	r2,r2,zero
    c478:	288ab03a 	or	r5,r5,r2
    c47c:	003f5306 	br	c1cc <__alt_data_end+0xff00c1cc>
    c480:	4448b03a 	or	r4,r8,r17
    c484:	20003e26 	beq	r4,zero,c580 <__adddf3+0x61c>
    c488:	00c6303a 	nor	r3,zero,r3
    c48c:	18003a1e 	bne	r3,zero,c578 <__adddf3+0x614>
    c490:	3463c83a 	sub	r17,r6,r17
    c494:	4a07c83a 	sub	r3,r9,r8
    c498:	344d803a 	cmpltu	r6,r6,r17
    c49c:	1991c83a 	sub	r8,r3,r6
    c4a0:	1021883a 	mov	r16,r2
    c4a4:	3825883a 	mov	r18,r7
    c4a8:	003f0a06 	br	c0d4 <__alt_data_end+0xff00c0d4>
    c4ac:	2023883a 	mov	r17,r4
    c4b0:	003f0d06 	br	c0e8 <__alt_data_end+0xff00c0e8>
    c4b4:	0081ffc4 	movi	r2,2047
    c4b8:	80bf3f1e 	bne	r16,r2,c1b8 <__alt_data_end+0xff00c1b8>
    c4bc:	003ec806 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c4c0:	0005883a 	mov	r2,zero
    c4c4:	003fb106 	br	c38c <__alt_data_end+0xff00c38c>
    c4c8:	0007883a 	mov	r3,zero
    c4cc:	003fbc06 	br	c3c0 <__alt_data_end+0xff00c3c0>
    c4d0:	4444b03a 	or	r2,r8,r17
    c4d4:	8000871e 	bne	r16,zero,c6f4 <__adddf3+0x790>
    c4d8:	1000ba26 	beq	r2,zero,c7c4 <__adddf3+0x860>
    c4dc:	4984b03a 	or	r2,r9,r6
    c4e0:	103ebf26 	beq	r2,zero,bfe0 <__alt_data_end+0xff00bfe0>
    c4e4:	8985883a 	add	r2,r17,r6
    c4e8:	4247883a 	add	r3,r8,r9
    c4ec:	1451803a 	cmpltu	r8,r2,r17
    c4f0:	40d1883a 	add	r8,r8,r3
    c4f4:	40c0202c 	andhi	r3,r8,128
    c4f8:	1023883a 	mov	r17,r2
    c4fc:	183f1a26 	beq	r3,zero,c168 <__alt_data_end+0xff00c168>
    c500:	00bfe034 	movhi	r2,65408
    c504:	10bfffc4 	addi	r2,r2,-1
    c508:	2021883a 	mov	r16,r4
    c50c:	4090703a 	and	r8,r8,r2
    c510:	003eb306 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c514:	4444b03a 	or	r2,r8,r17
    c518:	8000291e 	bne	r16,zero,c5c0 <__adddf3+0x65c>
    c51c:	10004b1e 	bne	r2,zero,c64c <__adddf3+0x6e8>
    c520:	4990b03a 	or	r8,r9,r6
    c524:	40008b26 	beq	r8,zero,c754 <__adddf3+0x7f0>
    c528:	4811883a 	mov	r8,r9
    c52c:	3023883a 	mov	r17,r6
    c530:	3825883a 	mov	r18,r7
    c534:	003eaa06 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c538:	1021883a 	mov	r16,r2
    c53c:	0011883a 	mov	r8,zero
    c540:	0005883a 	mov	r2,zero
    c544:	003f0f06 	br	c184 <__alt_data_end+0xff00c184>
    c548:	217ff804 	addi	r5,r4,-32
    c54c:	00800804 	movi	r2,32
    c550:	494ad83a 	srl	r5,r9,r5
    c554:	20807d26 	beq	r4,r2,c74c <__adddf3+0x7e8>
    c558:	00801004 	movi	r2,64
    c55c:	1109c83a 	sub	r4,r2,r4
    c560:	4912983a 	sll	r9,r9,r4
    c564:	498cb03a 	or	r6,r9,r6
    c568:	300cc03a 	cmpne	r6,r6,zero
    c56c:	298ab03a 	or	r5,r5,r6
    c570:	0013883a 	mov	r9,zero
    c574:	003f1506 	br	c1cc <__alt_data_end+0xff00c1cc>
    c578:	0101ffc4 	movi	r4,2047
    c57c:	113f9a1e 	bne	r2,r4,c3e8 <__alt_data_end+0xff00c3e8>
    c580:	4811883a 	mov	r8,r9
    c584:	3023883a 	mov	r17,r6
    c588:	1021883a 	mov	r16,r2
    c58c:	3825883a 	mov	r18,r7
    c590:	003e9306 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c594:	8000161e 	bne	r16,zero,c5f0 <__adddf3+0x68c>
    c598:	444ab03a 	or	r5,r8,r17
    c59c:	28005126 	beq	r5,zero,c6e4 <__adddf3+0x780>
    c5a0:	0108303a 	nor	r4,zero,r4
    c5a4:	20004d1e 	bne	r4,zero,c6dc <__adddf3+0x778>
    c5a8:	89a3883a 	add	r17,r17,r6
    c5ac:	4253883a 	add	r9,r8,r9
    c5b0:	898d803a 	cmpltu	r6,r17,r6
    c5b4:	3251883a 	add	r8,r6,r9
    c5b8:	1021883a 	mov	r16,r2
    c5bc:	003f0806 	br	c1e0 <__alt_data_end+0xff00c1e0>
    c5c0:	1000301e 	bne	r2,zero,c684 <__adddf3+0x720>
    c5c4:	4984b03a 	or	r2,r9,r6
    c5c8:	10007126 	beq	r2,zero,c790 <__adddf3+0x82c>
    c5cc:	4811883a 	mov	r8,r9
    c5d0:	3023883a 	mov	r17,r6
    c5d4:	3825883a 	mov	r18,r7
    c5d8:	0401ffc4 	movi	r16,2047
    c5dc:	003e8006 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c5e0:	4462b03a 	or	r17,r8,r17
    c5e4:	8822c03a 	cmpne	r17,r17,zero
    c5e8:	0007883a 	mov	r3,zero
    c5ec:	003f8b06 	br	c41c <__alt_data_end+0xff00c41c>
    c5f0:	0141ffc4 	movi	r5,2047
    c5f4:	11403b26 	beq	r2,r5,c6e4 <__adddf3+0x780>
    c5f8:	0109c83a 	sub	r4,zero,r4
    c5fc:	42002034 	orhi	r8,r8,128
    c600:	01400e04 	movi	r5,56
    c604:	29006716 	blt	r5,r4,c7a4 <__adddf3+0x840>
    c608:	014007c4 	movi	r5,31
    c60c:	29007016 	blt	r5,r4,c7d0 <__adddf3+0x86c>
    c610:	01400804 	movi	r5,32
    c614:	290bc83a 	sub	r5,r5,r4
    c618:	4154983a 	sll	r10,r8,r5
    c61c:	890ed83a 	srl	r7,r17,r4
    c620:	894a983a 	sll	r5,r17,r5
    c624:	4108d83a 	srl	r4,r8,r4
    c628:	51e2b03a 	or	r17,r10,r7
    c62c:	280ac03a 	cmpne	r5,r5,zero
    c630:	8962b03a 	or	r17,r17,r5
    c634:	89a3883a 	add	r17,r17,r6
    c638:	2253883a 	add	r9,r4,r9
    c63c:	898d803a 	cmpltu	r6,r17,r6
    c640:	3251883a 	add	r8,r6,r9
    c644:	1021883a 	mov	r16,r2
    c648:	003ee506 	br	c1e0 <__alt_data_end+0xff00c1e0>
    c64c:	4984b03a 	or	r2,r9,r6
    c650:	103e6326 	beq	r2,zero,bfe0 <__alt_data_end+0xff00bfe0>
    c654:	8987c83a 	sub	r3,r17,r6
    c658:	88c9803a 	cmpltu	r4,r17,r3
    c65c:	4245c83a 	sub	r2,r8,r9
    c660:	1105c83a 	sub	r2,r2,r4
    c664:	1100202c 	andhi	r4,r2,128
    c668:	203ebb26 	beq	r4,zero,c158 <__alt_data_end+0xff00c158>
    c66c:	3463c83a 	sub	r17,r6,r17
    c670:	4a07c83a 	sub	r3,r9,r8
    c674:	344d803a 	cmpltu	r6,r6,r17
    c678:	1991c83a 	sub	r8,r3,r6
    c67c:	3825883a 	mov	r18,r7
    c680:	003e5706 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c684:	4984b03a 	or	r2,r9,r6
    c688:	10002e26 	beq	r2,zero,c744 <__adddf3+0x7e0>
    c68c:	4004d0fa 	srli	r2,r8,3
    c690:	8822d0fa 	srli	r17,r17,3
    c694:	4010977a 	slli	r8,r8,29
    c698:	10c0022c 	andhi	r3,r2,8
    c69c:	4462b03a 	or	r17,r8,r17
    c6a0:	18000826 	beq	r3,zero,c6c4 <__adddf3+0x760>
    c6a4:	4808d0fa 	srli	r4,r9,3
    c6a8:	20c0022c 	andhi	r3,r4,8
    c6ac:	1800051e 	bne	r3,zero,c6c4 <__adddf3+0x760>
    c6b0:	300cd0fa 	srli	r6,r6,3
    c6b4:	4806977a 	slli	r3,r9,29
    c6b8:	2005883a 	mov	r2,r4
    c6bc:	3825883a 	mov	r18,r7
    c6c0:	19a2b03a 	or	r17,r3,r6
    c6c4:	8810d77a 	srli	r8,r17,29
    c6c8:	100490fa 	slli	r2,r2,3
    c6cc:	882290fa 	slli	r17,r17,3
    c6d0:	0401ffc4 	movi	r16,2047
    c6d4:	4090b03a 	or	r8,r8,r2
    c6d8:	003e4106 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c6dc:	0141ffc4 	movi	r5,2047
    c6e0:	117fc71e 	bne	r2,r5,c600 <__alt_data_end+0xff00c600>
    c6e4:	4811883a 	mov	r8,r9
    c6e8:	3023883a 	mov	r17,r6
    c6ec:	1021883a 	mov	r16,r2
    c6f0:	003e3b06 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c6f4:	10002f26 	beq	r2,zero,c7b4 <__adddf3+0x850>
    c6f8:	4984b03a 	or	r2,r9,r6
    c6fc:	10001126 	beq	r2,zero,c744 <__adddf3+0x7e0>
    c700:	4004d0fa 	srli	r2,r8,3
    c704:	8822d0fa 	srli	r17,r17,3
    c708:	4010977a 	slli	r8,r8,29
    c70c:	10c0022c 	andhi	r3,r2,8
    c710:	4462b03a 	or	r17,r8,r17
    c714:	183feb26 	beq	r3,zero,c6c4 <__alt_data_end+0xff00c6c4>
    c718:	4808d0fa 	srli	r4,r9,3
    c71c:	20c0022c 	andhi	r3,r4,8
    c720:	183fe81e 	bne	r3,zero,c6c4 <__alt_data_end+0xff00c6c4>
    c724:	300cd0fa 	srli	r6,r6,3
    c728:	4806977a 	slli	r3,r9,29
    c72c:	2005883a 	mov	r2,r4
    c730:	19a2b03a 	or	r17,r3,r6
    c734:	003fe306 	br	c6c4 <__alt_data_end+0xff00c6c4>
    c738:	0011883a 	mov	r8,zero
    c73c:	0005883a 	mov	r2,zero
    c740:	003e3f06 	br	c040 <__alt_data_end+0xff00c040>
    c744:	0401ffc4 	movi	r16,2047
    c748:	003e2506 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c74c:	0013883a 	mov	r9,zero
    c750:	003f8406 	br	c564 <__alt_data_end+0xff00c564>
    c754:	0005883a 	mov	r2,zero
    c758:	0007883a 	mov	r3,zero
    c75c:	003e8906 	br	c184 <__alt_data_end+0xff00c184>
    c760:	197ff804 	addi	r5,r3,-32
    c764:	01000804 	movi	r4,32
    c768:	414ad83a 	srl	r5,r8,r5
    c76c:	19002426 	beq	r3,r4,c800 <__adddf3+0x89c>
    c770:	01001004 	movi	r4,64
    c774:	20c7c83a 	sub	r3,r4,r3
    c778:	40c6983a 	sll	r3,r8,r3
    c77c:	1c46b03a 	or	r3,r3,r17
    c780:	1806c03a 	cmpne	r3,r3,zero
    c784:	28e2b03a 	or	r17,r5,r3
    c788:	0007883a 	mov	r3,zero
    c78c:	003f2306 	br	c41c <__alt_data_end+0xff00c41c>
    c790:	0007883a 	mov	r3,zero
    c794:	5811883a 	mov	r8,r11
    c798:	00bfffc4 	movi	r2,-1
    c79c:	0401ffc4 	movi	r16,2047
    c7a0:	003e7806 	br	c184 <__alt_data_end+0xff00c184>
    c7a4:	4462b03a 	or	r17,r8,r17
    c7a8:	8822c03a 	cmpne	r17,r17,zero
    c7ac:	0009883a 	mov	r4,zero
    c7b0:	003fa006 	br	c634 <__alt_data_end+0xff00c634>
    c7b4:	4811883a 	mov	r8,r9
    c7b8:	3023883a 	mov	r17,r6
    c7bc:	0401ffc4 	movi	r16,2047
    c7c0:	003e0706 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c7c4:	4811883a 	mov	r8,r9
    c7c8:	3023883a 	mov	r17,r6
    c7cc:	003e0406 	br	bfe0 <__alt_data_end+0xff00bfe0>
    c7d0:	21fff804 	addi	r7,r4,-32
    c7d4:	01400804 	movi	r5,32
    c7d8:	41ced83a 	srl	r7,r8,r7
    c7dc:	21400a26 	beq	r4,r5,c808 <__adddf3+0x8a4>
    c7e0:	01401004 	movi	r5,64
    c7e4:	2909c83a 	sub	r4,r5,r4
    c7e8:	4108983a 	sll	r4,r8,r4
    c7ec:	2448b03a 	or	r4,r4,r17
    c7f0:	2008c03a 	cmpne	r4,r4,zero
    c7f4:	3922b03a 	or	r17,r7,r4
    c7f8:	0009883a 	mov	r4,zero
    c7fc:	003f8d06 	br	c634 <__alt_data_end+0xff00c634>
    c800:	0007883a 	mov	r3,zero
    c804:	003fdd06 	br	c77c <__alt_data_end+0xff00c77c>
    c808:	0009883a 	mov	r4,zero
    c80c:	003ff706 	br	c7ec <__alt_data_end+0xff00c7ec>

0000c810 <__divdf3>:
    c810:	defff204 	addi	sp,sp,-56
    c814:	dd400915 	stw	r21,36(sp)
    c818:	282ad53a 	srli	r21,r5,20
    c81c:	dd000815 	stw	r20,32(sp)
    c820:	2828d7fa 	srli	r20,r5,31
    c824:	dc000415 	stw	r16,16(sp)
    c828:	04000434 	movhi	r16,16
    c82c:	df000c15 	stw	fp,48(sp)
    c830:	843fffc4 	addi	r16,r16,-1
    c834:	dfc00d15 	stw	ra,52(sp)
    c838:	ddc00b15 	stw	r23,44(sp)
    c83c:	dd800a15 	stw	r22,40(sp)
    c840:	dcc00715 	stw	r19,28(sp)
    c844:	dc800615 	stw	r18,24(sp)
    c848:	dc400515 	stw	r17,20(sp)
    c84c:	ad41ffcc 	andi	r21,r21,2047
    c850:	2c20703a 	and	r16,r5,r16
    c854:	a7003fcc 	andi	fp,r20,255
    c858:	a8006126 	beq	r21,zero,c9e0 <__divdf3+0x1d0>
    c85c:	0081ffc4 	movi	r2,2047
    c860:	2025883a 	mov	r18,r4
    c864:	a8803726 	beq	r21,r2,c944 <__divdf3+0x134>
    c868:	80800434 	orhi	r2,r16,16
    c86c:	100490fa 	slli	r2,r2,3
    c870:	2020d77a 	srli	r16,r4,29
    c874:	202490fa 	slli	r18,r4,3
    c878:	ad7f0044 	addi	r21,r21,-1023
    c87c:	80a0b03a 	or	r16,r16,r2
    c880:	0027883a 	mov	r19,zero
    c884:	0013883a 	mov	r9,zero
    c888:	3804d53a 	srli	r2,r7,20
    c88c:	382cd7fa 	srli	r22,r7,31
    c890:	04400434 	movhi	r17,16
    c894:	8c7fffc4 	addi	r17,r17,-1
    c898:	1081ffcc 	andi	r2,r2,2047
    c89c:	3011883a 	mov	r8,r6
    c8a0:	3c62703a 	and	r17,r7,r17
    c8a4:	b5c03fcc 	andi	r23,r22,255
    c8a8:	10006c26 	beq	r2,zero,ca5c <__divdf3+0x24c>
    c8ac:	00c1ffc4 	movi	r3,2047
    c8b0:	10c06426 	beq	r2,r3,ca44 <__divdf3+0x234>
    c8b4:	88c00434 	orhi	r3,r17,16
    c8b8:	180690fa 	slli	r3,r3,3
    c8bc:	3022d77a 	srli	r17,r6,29
    c8c0:	301090fa 	slli	r8,r6,3
    c8c4:	10bf0044 	addi	r2,r2,-1023
    c8c8:	88e2b03a 	or	r17,r17,r3
    c8cc:	000f883a 	mov	r7,zero
    c8d0:	a58cf03a 	xor	r6,r20,r22
    c8d4:	3cc8b03a 	or	r4,r7,r19
    c8d8:	a8abc83a 	sub	r21,r21,r2
    c8dc:	008003c4 	movi	r2,15
    c8e0:	3007883a 	mov	r3,r6
    c8e4:	34c03fcc 	andi	r19,r6,255
    c8e8:	11009036 	bltu	r2,r4,cb2c <__divdf3+0x31c>
    c8ec:	200890ba 	slli	r4,r4,2
    c8f0:	00800074 	movhi	r2,1
    c8f4:	10b24104 	addi	r2,r2,-14076
    c8f8:	2089883a 	add	r4,r4,r2
    c8fc:	20800017 	ldw	r2,0(r4)
    c900:	1000683a 	jmp	r2
    c904:	0000cb2c 	andhi	zero,zero,812
    c908:	0000c97c 	xorhi	zero,zero,805
    c90c:	0000cb1c 	xori	zero,zero,812
    c910:	0000c970 	cmpltui	zero,zero,805
    c914:	0000cb1c 	xori	zero,zero,812
    c918:	0000caf0 	cmpltui	zero,zero,811
    c91c:	0000cb1c 	xori	zero,zero,812
    c920:	0000c970 	cmpltui	zero,zero,805
    c924:	0000c97c 	xorhi	zero,zero,805
    c928:	0000c97c 	xorhi	zero,zero,805
    c92c:	0000caf0 	cmpltui	zero,zero,811
    c930:	0000c970 	cmpltui	zero,zero,805
    c934:	0000c960 	cmpeqi	zero,zero,805
    c938:	0000c960 	cmpeqi	zero,zero,805
    c93c:	0000c960 	cmpeqi	zero,zero,805
    c940:	0000ce10 	cmplti	zero,zero,824
    c944:	2404b03a 	or	r2,r4,r16
    c948:	1000661e 	bne	r2,zero,cae4 <__divdf3+0x2d4>
    c94c:	04c00204 	movi	r19,8
    c950:	0021883a 	mov	r16,zero
    c954:	0025883a 	mov	r18,zero
    c958:	02400084 	movi	r9,2
    c95c:	003fca06 	br	c888 <__alt_data_end+0xff00c888>
    c960:	8023883a 	mov	r17,r16
    c964:	9011883a 	mov	r8,r18
    c968:	e02f883a 	mov	r23,fp
    c96c:	480f883a 	mov	r7,r9
    c970:	00800084 	movi	r2,2
    c974:	3881311e 	bne	r7,r2,ce3c <__divdf3+0x62c>
    c978:	b827883a 	mov	r19,r23
    c97c:	98c0004c 	andi	r3,r19,1
    c980:	0081ffc4 	movi	r2,2047
    c984:	000b883a 	mov	r5,zero
    c988:	0025883a 	mov	r18,zero
    c98c:	1004953a 	slli	r2,r2,20
    c990:	18c03fcc 	andi	r3,r3,255
    c994:	04400434 	movhi	r17,16
    c998:	8c7fffc4 	addi	r17,r17,-1
    c99c:	180697fa 	slli	r3,r3,31
    c9a0:	2c4a703a 	and	r5,r5,r17
    c9a4:	288ab03a 	or	r5,r5,r2
    c9a8:	28c6b03a 	or	r3,r5,r3
    c9ac:	9005883a 	mov	r2,r18
    c9b0:	dfc00d17 	ldw	ra,52(sp)
    c9b4:	df000c17 	ldw	fp,48(sp)
    c9b8:	ddc00b17 	ldw	r23,44(sp)
    c9bc:	dd800a17 	ldw	r22,40(sp)
    c9c0:	dd400917 	ldw	r21,36(sp)
    c9c4:	dd000817 	ldw	r20,32(sp)
    c9c8:	dcc00717 	ldw	r19,28(sp)
    c9cc:	dc800617 	ldw	r18,24(sp)
    c9d0:	dc400517 	ldw	r17,20(sp)
    c9d4:	dc000417 	ldw	r16,16(sp)
    c9d8:	dec00e04 	addi	sp,sp,56
    c9dc:	f800283a 	ret
    c9e0:	2404b03a 	or	r2,r4,r16
    c9e4:	2027883a 	mov	r19,r4
    c9e8:	10003926 	beq	r2,zero,cad0 <__divdf3+0x2c0>
    c9ec:	80012e26 	beq	r16,zero,cea8 <__divdf3+0x698>
    c9f0:	8009883a 	mov	r4,r16
    c9f4:	d9800315 	stw	r6,12(sp)
    c9f8:	d9c00215 	stw	r7,8(sp)
    c9fc:	000e5680 	call	e568 <__clzsi2>
    ca00:	d9800317 	ldw	r6,12(sp)
    ca04:	d9c00217 	ldw	r7,8(sp)
    ca08:	113ffd44 	addi	r4,r2,-11
    ca0c:	00c00704 	movi	r3,28
    ca10:	19012116 	blt	r3,r4,ce98 <__divdf3+0x688>
    ca14:	00c00744 	movi	r3,29
    ca18:	147ffe04 	addi	r17,r2,-8
    ca1c:	1907c83a 	sub	r3,r3,r4
    ca20:	8460983a 	sll	r16,r16,r17
    ca24:	98c6d83a 	srl	r3,r19,r3
    ca28:	9c64983a 	sll	r18,r19,r17
    ca2c:	1c20b03a 	or	r16,r3,r16
    ca30:	1080fcc4 	addi	r2,r2,1011
    ca34:	00abc83a 	sub	r21,zero,r2
    ca38:	0027883a 	mov	r19,zero
    ca3c:	0013883a 	mov	r9,zero
    ca40:	003f9106 	br	c888 <__alt_data_end+0xff00c888>
    ca44:	3446b03a 	or	r3,r6,r17
    ca48:	18001f1e 	bne	r3,zero,cac8 <__divdf3+0x2b8>
    ca4c:	0023883a 	mov	r17,zero
    ca50:	0011883a 	mov	r8,zero
    ca54:	01c00084 	movi	r7,2
    ca58:	003f9d06 	br	c8d0 <__alt_data_end+0xff00c8d0>
    ca5c:	3446b03a 	or	r3,r6,r17
    ca60:	18001526 	beq	r3,zero,cab8 <__divdf3+0x2a8>
    ca64:	88011b26 	beq	r17,zero,ced4 <__divdf3+0x6c4>
    ca68:	8809883a 	mov	r4,r17
    ca6c:	d9800315 	stw	r6,12(sp)
    ca70:	da400115 	stw	r9,4(sp)
    ca74:	000e5680 	call	e568 <__clzsi2>
    ca78:	d9800317 	ldw	r6,12(sp)
    ca7c:	da400117 	ldw	r9,4(sp)
    ca80:	113ffd44 	addi	r4,r2,-11
    ca84:	00c00704 	movi	r3,28
    ca88:	19010e16 	blt	r3,r4,cec4 <__divdf3+0x6b4>
    ca8c:	00c00744 	movi	r3,29
    ca90:	123ffe04 	addi	r8,r2,-8
    ca94:	1907c83a 	sub	r3,r3,r4
    ca98:	8a22983a 	sll	r17,r17,r8
    ca9c:	30c6d83a 	srl	r3,r6,r3
    caa0:	3210983a 	sll	r8,r6,r8
    caa4:	1c62b03a 	or	r17,r3,r17
    caa8:	1080fcc4 	addi	r2,r2,1011
    caac:	0085c83a 	sub	r2,zero,r2
    cab0:	000f883a 	mov	r7,zero
    cab4:	003f8606 	br	c8d0 <__alt_data_end+0xff00c8d0>
    cab8:	0023883a 	mov	r17,zero
    cabc:	0011883a 	mov	r8,zero
    cac0:	01c00044 	movi	r7,1
    cac4:	003f8206 	br	c8d0 <__alt_data_end+0xff00c8d0>
    cac8:	01c000c4 	movi	r7,3
    cacc:	003f8006 	br	c8d0 <__alt_data_end+0xff00c8d0>
    cad0:	04c00104 	movi	r19,4
    cad4:	0021883a 	mov	r16,zero
    cad8:	0025883a 	mov	r18,zero
    cadc:	02400044 	movi	r9,1
    cae0:	003f6906 	br	c888 <__alt_data_end+0xff00c888>
    cae4:	04c00304 	movi	r19,12
    cae8:	024000c4 	movi	r9,3
    caec:	003f6606 	br	c888 <__alt_data_end+0xff00c888>
    caf0:	01400434 	movhi	r5,16
    caf4:	0007883a 	mov	r3,zero
    caf8:	297fffc4 	addi	r5,r5,-1
    cafc:	04bfffc4 	movi	r18,-1
    cb00:	0081ffc4 	movi	r2,2047
    cb04:	003fa106 	br	c98c <__alt_data_end+0xff00c98c>
    cb08:	00c00044 	movi	r3,1
    cb0c:	1887c83a 	sub	r3,r3,r2
    cb10:	01000e04 	movi	r4,56
    cb14:	20c1210e 	bge	r4,r3,cf9c <__divdf3+0x78c>
    cb18:	98c0004c 	andi	r3,r19,1
    cb1c:	0005883a 	mov	r2,zero
    cb20:	000b883a 	mov	r5,zero
    cb24:	0025883a 	mov	r18,zero
    cb28:	003f9806 	br	c98c <__alt_data_end+0xff00c98c>
    cb2c:	8c00fd36 	bltu	r17,r16,cf24 <__divdf3+0x714>
    cb30:	8440fb26 	beq	r16,r17,cf20 <__divdf3+0x710>
    cb34:	8007883a 	mov	r3,r16
    cb38:	ad7fffc4 	addi	r21,r21,-1
    cb3c:	0021883a 	mov	r16,zero
    cb40:	4004d63a 	srli	r2,r8,24
    cb44:	8822923a 	slli	r17,r17,8
    cb48:	1809883a 	mov	r4,r3
    cb4c:	402c923a 	slli	r22,r8,8
    cb50:	88b8b03a 	or	fp,r17,r2
    cb54:	e028d43a 	srli	r20,fp,16
    cb58:	d8c00015 	stw	r3,0(sp)
    cb5c:	e5ffffcc 	andi	r23,fp,65535
    cb60:	a00b883a 	mov	r5,r20
    cb64:	000bea80 	call	bea8 <__udivsi3>
    cb68:	d8c00017 	ldw	r3,0(sp)
    cb6c:	a00b883a 	mov	r5,r20
    cb70:	d8800315 	stw	r2,12(sp)
    cb74:	1809883a 	mov	r4,r3
    cb78:	000bf0c0 	call	bf0c <__umodsi3>
    cb7c:	d9800317 	ldw	r6,12(sp)
    cb80:	1006943a 	slli	r3,r2,16
    cb84:	9004d43a 	srli	r2,r18,16
    cb88:	b9a3383a 	mul	r17,r23,r6
    cb8c:	10c4b03a 	or	r2,r2,r3
    cb90:	1440062e 	bgeu	r2,r17,cbac <__divdf3+0x39c>
    cb94:	1705883a 	add	r2,r2,fp
    cb98:	30ffffc4 	addi	r3,r6,-1
    cb9c:	1700ee36 	bltu	r2,fp,cf58 <__divdf3+0x748>
    cba0:	1440ed2e 	bgeu	r2,r17,cf58 <__divdf3+0x748>
    cba4:	31bfff84 	addi	r6,r6,-2
    cba8:	1705883a 	add	r2,r2,fp
    cbac:	1463c83a 	sub	r17,r2,r17
    cbb0:	a00b883a 	mov	r5,r20
    cbb4:	8809883a 	mov	r4,r17
    cbb8:	d9800315 	stw	r6,12(sp)
    cbbc:	000bea80 	call	bea8 <__udivsi3>
    cbc0:	a00b883a 	mov	r5,r20
    cbc4:	8809883a 	mov	r4,r17
    cbc8:	d8800215 	stw	r2,8(sp)
    cbcc:	000bf0c0 	call	bf0c <__umodsi3>
    cbd0:	d9c00217 	ldw	r7,8(sp)
    cbd4:	1004943a 	slli	r2,r2,16
    cbd8:	94bfffcc 	andi	r18,r18,65535
    cbdc:	b9d1383a 	mul	r8,r23,r7
    cbe0:	90a4b03a 	or	r18,r18,r2
    cbe4:	d9800317 	ldw	r6,12(sp)
    cbe8:	9200062e 	bgeu	r18,r8,cc04 <__divdf3+0x3f4>
    cbec:	9725883a 	add	r18,r18,fp
    cbf0:	38bfffc4 	addi	r2,r7,-1
    cbf4:	9700d636 	bltu	r18,fp,cf50 <__divdf3+0x740>
    cbf8:	9200d52e 	bgeu	r18,r8,cf50 <__divdf3+0x740>
    cbfc:	39ffff84 	addi	r7,r7,-2
    cc00:	9725883a 	add	r18,r18,fp
    cc04:	3004943a 	slli	r2,r6,16
    cc08:	b012d43a 	srli	r9,r22,16
    cc0c:	b1bfffcc 	andi	r6,r22,65535
    cc10:	11e2b03a 	or	r17,r2,r7
    cc14:	8806d43a 	srli	r3,r17,16
    cc18:	893fffcc 	andi	r4,r17,65535
    cc1c:	218b383a 	mul	r5,r4,r6
    cc20:	30c5383a 	mul	r2,r6,r3
    cc24:	2249383a 	mul	r4,r4,r9
    cc28:	280ed43a 	srli	r7,r5,16
    cc2c:	9225c83a 	sub	r18,r18,r8
    cc30:	2089883a 	add	r4,r4,r2
    cc34:	3909883a 	add	r4,r7,r4
    cc38:	1a47383a 	mul	r3,r3,r9
    cc3c:	2080022e 	bgeu	r4,r2,cc48 <__divdf3+0x438>
    cc40:	00800074 	movhi	r2,1
    cc44:	1887883a 	add	r3,r3,r2
    cc48:	2004d43a 	srli	r2,r4,16
    cc4c:	2008943a 	slli	r4,r4,16
    cc50:	297fffcc 	andi	r5,r5,65535
    cc54:	10c7883a 	add	r3,r2,r3
    cc58:	2149883a 	add	r4,r4,r5
    cc5c:	90c0a536 	bltu	r18,r3,cef4 <__divdf3+0x6e4>
    cc60:	90c0bf26 	beq	r18,r3,cf60 <__divdf3+0x750>
    cc64:	90c7c83a 	sub	r3,r18,r3
    cc68:	810fc83a 	sub	r7,r16,r4
    cc6c:	81e5803a 	cmpltu	r18,r16,r7
    cc70:	1ca5c83a 	sub	r18,r3,r18
    cc74:	e480c126 	beq	fp,r18,cf7c <__divdf3+0x76c>
    cc78:	a00b883a 	mov	r5,r20
    cc7c:	9009883a 	mov	r4,r18
    cc80:	d9800315 	stw	r6,12(sp)
    cc84:	d9c00215 	stw	r7,8(sp)
    cc88:	da400115 	stw	r9,4(sp)
    cc8c:	000bea80 	call	bea8 <__udivsi3>
    cc90:	a00b883a 	mov	r5,r20
    cc94:	9009883a 	mov	r4,r18
    cc98:	d8800015 	stw	r2,0(sp)
    cc9c:	000bf0c0 	call	bf0c <__umodsi3>
    cca0:	d9c00217 	ldw	r7,8(sp)
    cca4:	da000017 	ldw	r8,0(sp)
    cca8:	1006943a 	slli	r3,r2,16
    ccac:	3804d43a 	srli	r2,r7,16
    ccb0:	ba21383a 	mul	r16,r23,r8
    ccb4:	d9800317 	ldw	r6,12(sp)
    ccb8:	10c4b03a 	or	r2,r2,r3
    ccbc:	da400117 	ldw	r9,4(sp)
    ccc0:	1400062e 	bgeu	r2,r16,ccdc <__divdf3+0x4cc>
    ccc4:	1705883a 	add	r2,r2,fp
    ccc8:	40ffffc4 	addi	r3,r8,-1
    cccc:	1700ad36 	bltu	r2,fp,cf84 <__divdf3+0x774>
    ccd0:	1400ac2e 	bgeu	r2,r16,cf84 <__divdf3+0x774>
    ccd4:	423fff84 	addi	r8,r8,-2
    ccd8:	1705883a 	add	r2,r2,fp
    ccdc:	1421c83a 	sub	r16,r2,r16
    cce0:	a00b883a 	mov	r5,r20
    cce4:	8009883a 	mov	r4,r16
    cce8:	d9800315 	stw	r6,12(sp)
    ccec:	d9c00215 	stw	r7,8(sp)
    ccf0:	da000015 	stw	r8,0(sp)
    ccf4:	da400115 	stw	r9,4(sp)
    ccf8:	000bea80 	call	bea8 <__udivsi3>
    ccfc:	8009883a 	mov	r4,r16
    cd00:	a00b883a 	mov	r5,r20
    cd04:	1025883a 	mov	r18,r2
    cd08:	000bf0c0 	call	bf0c <__umodsi3>
    cd0c:	d9c00217 	ldw	r7,8(sp)
    cd10:	1004943a 	slli	r2,r2,16
    cd14:	bcaf383a 	mul	r23,r23,r18
    cd18:	393fffcc 	andi	r4,r7,65535
    cd1c:	2088b03a 	or	r4,r4,r2
    cd20:	d9800317 	ldw	r6,12(sp)
    cd24:	da000017 	ldw	r8,0(sp)
    cd28:	da400117 	ldw	r9,4(sp)
    cd2c:	25c0062e 	bgeu	r4,r23,cd48 <__divdf3+0x538>
    cd30:	2709883a 	add	r4,r4,fp
    cd34:	90bfffc4 	addi	r2,r18,-1
    cd38:	27009436 	bltu	r4,fp,cf8c <__divdf3+0x77c>
    cd3c:	25c0932e 	bgeu	r4,r23,cf8c <__divdf3+0x77c>
    cd40:	94bfff84 	addi	r18,r18,-2
    cd44:	2709883a 	add	r4,r4,fp
    cd48:	4004943a 	slli	r2,r8,16
    cd4c:	25efc83a 	sub	r23,r4,r23
    cd50:	1490b03a 	or	r8,r2,r18
    cd54:	4008d43a 	srli	r4,r8,16
    cd58:	40ffffcc 	andi	r3,r8,65535
    cd5c:	30c5383a 	mul	r2,r6,r3
    cd60:	1a47383a 	mul	r3,r3,r9
    cd64:	310d383a 	mul	r6,r6,r4
    cd68:	100ad43a 	srli	r5,r2,16
    cd6c:	4913383a 	mul	r9,r9,r4
    cd70:	1987883a 	add	r3,r3,r6
    cd74:	28c7883a 	add	r3,r5,r3
    cd78:	1980022e 	bgeu	r3,r6,cd84 <__divdf3+0x574>
    cd7c:	01000074 	movhi	r4,1
    cd80:	4913883a 	add	r9,r9,r4
    cd84:	1808d43a 	srli	r4,r3,16
    cd88:	1806943a 	slli	r3,r3,16
    cd8c:	10bfffcc 	andi	r2,r2,65535
    cd90:	2253883a 	add	r9,r4,r9
    cd94:	1887883a 	add	r3,r3,r2
    cd98:	ba403836 	bltu	r23,r9,ce7c <__divdf3+0x66c>
    cd9c:	ba403626 	beq	r23,r9,ce78 <__divdf3+0x668>
    cda0:	42000054 	ori	r8,r8,1
    cda4:	a880ffc4 	addi	r2,r21,1023
    cda8:	00bf570e 	bge	zero,r2,cb08 <__alt_data_end+0xff00cb08>
    cdac:	40c001cc 	andi	r3,r8,7
    cdb0:	18000726 	beq	r3,zero,cdd0 <__divdf3+0x5c0>
    cdb4:	40c003cc 	andi	r3,r8,15
    cdb8:	01000104 	movi	r4,4
    cdbc:	19000426 	beq	r3,r4,cdd0 <__divdf3+0x5c0>
    cdc0:	4107883a 	add	r3,r8,r4
    cdc4:	1a11803a 	cmpltu	r8,r3,r8
    cdc8:	8a23883a 	add	r17,r17,r8
    cdcc:	1811883a 	mov	r8,r3
    cdd0:	88c0402c 	andhi	r3,r17,256
    cdd4:	18000426 	beq	r3,zero,cde8 <__divdf3+0x5d8>
    cdd8:	00ffc034 	movhi	r3,65280
    cddc:	18ffffc4 	addi	r3,r3,-1
    cde0:	a8810004 	addi	r2,r21,1024
    cde4:	88e2703a 	and	r17,r17,r3
    cde8:	00c1ff84 	movi	r3,2046
    cdec:	18bee316 	blt	r3,r2,c97c <__alt_data_end+0xff00c97c>
    cdf0:	8824977a 	slli	r18,r17,29
    cdf4:	4010d0fa 	srli	r8,r8,3
    cdf8:	8822927a 	slli	r17,r17,9
    cdfc:	1081ffcc 	andi	r2,r2,2047
    ce00:	9224b03a 	or	r18,r18,r8
    ce04:	880ad33a 	srli	r5,r17,12
    ce08:	98c0004c 	andi	r3,r19,1
    ce0c:	003edf06 	br	c98c <__alt_data_end+0xff00c98c>
    ce10:	8080022c 	andhi	r2,r16,8
    ce14:	10001226 	beq	r2,zero,ce60 <__divdf3+0x650>
    ce18:	8880022c 	andhi	r2,r17,8
    ce1c:	1000101e 	bne	r2,zero,ce60 <__divdf3+0x650>
    ce20:	00800434 	movhi	r2,16
    ce24:	89400234 	orhi	r5,r17,8
    ce28:	10bfffc4 	addi	r2,r2,-1
    ce2c:	b007883a 	mov	r3,r22
    ce30:	288a703a 	and	r5,r5,r2
    ce34:	4025883a 	mov	r18,r8
    ce38:	003f3106 	br	cb00 <__alt_data_end+0xff00cb00>
    ce3c:	008000c4 	movi	r2,3
    ce40:	3880a626 	beq	r7,r2,d0dc <__divdf3+0x8cc>
    ce44:	00800044 	movi	r2,1
    ce48:	3880521e 	bne	r7,r2,cf94 <__divdf3+0x784>
    ce4c:	b807883a 	mov	r3,r23
    ce50:	0005883a 	mov	r2,zero
    ce54:	000b883a 	mov	r5,zero
    ce58:	0025883a 	mov	r18,zero
    ce5c:	003ecb06 	br	c98c <__alt_data_end+0xff00c98c>
    ce60:	00800434 	movhi	r2,16
    ce64:	81400234 	orhi	r5,r16,8
    ce68:	10bfffc4 	addi	r2,r2,-1
    ce6c:	a007883a 	mov	r3,r20
    ce70:	288a703a 	and	r5,r5,r2
    ce74:	003f2206 	br	cb00 <__alt_data_end+0xff00cb00>
    ce78:	183fca26 	beq	r3,zero,cda4 <__alt_data_end+0xff00cda4>
    ce7c:	e5ef883a 	add	r23,fp,r23
    ce80:	40bfffc4 	addi	r2,r8,-1
    ce84:	bf00392e 	bgeu	r23,fp,cf6c <__divdf3+0x75c>
    ce88:	1011883a 	mov	r8,r2
    ce8c:	ba7fc41e 	bne	r23,r9,cda0 <__alt_data_end+0xff00cda0>
    ce90:	b0ffc31e 	bne	r22,r3,cda0 <__alt_data_end+0xff00cda0>
    ce94:	003fc306 	br	cda4 <__alt_data_end+0xff00cda4>
    ce98:	143ff604 	addi	r16,r2,-40
    ce9c:	9c20983a 	sll	r16,r19,r16
    cea0:	0025883a 	mov	r18,zero
    cea4:	003ee206 	br	ca30 <__alt_data_end+0xff00ca30>
    cea8:	d9800315 	stw	r6,12(sp)
    ceac:	d9c00215 	stw	r7,8(sp)
    ceb0:	000e5680 	call	e568 <__clzsi2>
    ceb4:	10800804 	addi	r2,r2,32
    ceb8:	d9c00217 	ldw	r7,8(sp)
    cebc:	d9800317 	ldw	r6,12(sp)
    cec0:	003ed106 	br	ca08 <__alt_data_end+0xff00ca08>
    cec4:	147ff604 	addi	r17,r2,-40
    cec8:	3462983a 	sll	r17,r6,r17
    cecc:	0011883a 	mov	r8,zero
    ced0:	003ef506 	br	caa8 <__alt_data_end+0xff00caa8>
    ced4:	3009883a 	mov	r4,r6
    ced8:	d9800315 	stw	r6,12(sp)
    cedc:	da400115 	stw	r9,4(sp)
    cee0:	000e5680 	call	e568 <__clzsi2>
    cee4:	10800804 	addi	r2,r2,32
    cee8:	da400117 	ldw	r9,4(sp)
    ceec:	d9800317 	ldw	r6,12(sp)
    cef0:	003ee306 	br	ca80 <__alt_data_end+0xff00ca80>
    cef4:	85a1883a 	add	r16,r16,r22
    cef8:	8585803a 	cmpltu	r2,r16,r22
    cefc:	1705883a 	add	r2,r2,fp
    cf00:	14a5883a 	add	r18,r2,r18
    cf04:	88bfffc4 	addi	r2,r17,-1
    cf08:	e4800c2e 	bgeu	fp,r18,cf3c <__divdf3+0x72c>
    cf0c:	90c03e36 	bltu	r18,r3,d008 <__divdf3+0x7f8>
    cf10:	1c806926 	beq	r3,r18,d0b8 <__divdf3+0x8a8>
    cf14:	90c7c83a 	sub	r3,r18,r3
    cf18:	1023883a 	mov	r17,r2
    cf1c:	003f5206 	br	cc68 <__alt_data_end+0xff00cc68>
    cf20:	923f0436 	bltu	r18,r8,cb34 <__alt_data_end+0xff00cb34>
    cf24:	800897fa 	slli	r4,r16,31
    cf28:	9004d07a 	srli	r2,r18,1
    cf2c:	8006d07a 	srli	r3,r16,1
    cf30:	902097fa 	slli	r16,r18,31
    cf34:	20a4b03a 	or	r18,r4,r2
    cf38:	003f0106 	br	cb40 <__alt_data_end+0xff00cb40>
    cf3c:	e4bff51e 	bne	fp,r18,cf14 <__alt_data_end+0xff00cf14>
    cf40:	85bff22e 	bgeu	r16,r22,cf0c <__alt_data_end+0xff00cf0c>
    cf44:	e0c7c83a 	sub	r3,fp,r3
    cf48:	1023883a 	mov	r17,r2
    cf4c:	003f4606 	br	cc68 <__alt_data_end+0xff00cc68>
    cf50:	100f883a 	mov	r7,r2
    cf54:	003f2b06 	br	cc04 <__alt_data_end+0xff00cc04>
    cf58:	180d883a 	mov	r6,r3
    cf5c:	003f1306 	br	cbac <__alt_data_end+0xff00cbac>
    cf60:	813fe436 	bltu	r16,r4,cef4 <__alt_data_end+0xff00cef4>
    cf64:	0007883a 	mov	r3,zero
    cf68:	003f3f06 	br	cc68 <__alt_data_end+0xff00cc68>
    cf6c:	ba402c36 	bltu	r23,r9,d020 <__divdf3+0x810>
    cf70:	4dc05426 	beq	r9,r23,d0c4 <__divdf3+0x8b4>
    cf74:	1011883a 	mov	r8,r2
    cf78:	003f8906 	br	cda0 <__alt_data_end+0xff00cda0>
    cf7c:	023fffc4 	movi	r8,-1
    cf80:	003f8806 	br	cda4 <__alt_data_end+0xff00cda4>
    cf84:	1811883a 	mov	r8,r3
    cf88:	003f5406 	br	ccdc <__alt_data_end+0xff00ccdc>
    cf8c:	1025883a 	mov	r18,r2
    cf90:	003f6d06 	br	cd48 <__alt_data_end+0xff00cd48>
    cf94:	b827883a 	mov	r19,r23
    cf98:	003f8206 	br	cda4 <__alt_data_end+0xff00cda4>
    cf9c:	010007c4 	movi	r4,31
    cfa0:	20c02616 	blt	r4,r3,d03c <__divdf3+0x82c>
    cfa4:	00800804 	movi	r2,32
    cfa8:	10c5c83a 	sub	r2,r2,r3
    cfac:	888a983a 	sll	r5,r17,r2
    cfb0:	40c8d83a 	srl	r4,r8,r3
    cfb4:	4084983a 	sll	r2,r8,r2
    cfb8:	88e2d83a 	srl	r17,r17,r3
    cfbc:	2906b03a 	or	r3,r5,r4
    cfc0:	1004c03a 	cmpne	r2,r2,zero
    cfc4:	1886b03a 	or	r3,r3,r2
    cfc8:	188001cc 	andi	r2,r3,7
    cfcc:	10000726 	beq	r2,zero,cfec <__divdf3+0x7dc>
    cfd0:	188003cc 	andi	r2,r3,15
    cfd4:	01000104 	movi	r4,4
    cfd8:	11000426 	beq	r2,r4,cfec <__divdf3+0x7dc>
    cfdc:	1805883a 	mov	r2,r3
    cfe0:	10c00104 	addi	r3,r2,4
    cfe4:	1885803a 	cmpltu	r2,r3,r2
    cfe8:	88a3883a 	add	r17,r17,r2
    cfec:	8880202c 	andhi	r2,r17,128
    cff0:	10002726 	beq	r2,zero,d090 <__divdf3+0x880>
    cff4:	98c0004c 	andi	r3,r19,1
    cff8:	00800044 	movi	r2,1
    cffc:	000b883a 	mov	r5,zero
    d000:	0025883a 	mov	r18,zero
    d004:	003e6106 	br	c98c <__alt_data_end+0xff00c98c>
    d008:	85a1883a 	add	r16,r16,r22
    d00c:	8585803a 	cmpltu	r2,r16,r22
    d010:	1705883a 	add	r2,r2,fp
    d014:	14a5883a 	add	r18,r2,r18
    d018:	8c7fff84 	addi	r17,r17,-2
    d01c:	003f1106 	br	cc64 <__alt_data_end+0xff00cc64>
    d020:	b589883a 	add	r4,r22,r22
    d024:	25ad803a 	cmpltu	r22,r4,r22
    d028:	b739883a 	add	fp,r22,fp
    d02c:	40bfff84 	addi	r2,r8,-2
    d030:	bf2f883a 	add	r23,r23,fp
    d034:	202d883a 	mov	r22,r4
    d038:	003f9306 	br	ce88 <__alt_data_end+0xff00ce88>
    d03c:	013ff844 	movi	r4,-31
    d040:	2085c83a 	sub	r2,r4,r2
    d044:	8888d83a 	srl	r4,r17,r2
    d048:	00800804 	movi	r2,32
    d04c:	18802126 	beq	r3,r2,d0d4 <__divdf3+0x8c4>
    d050:	00801004 	movi	r2,64
    d054:	10c5c83a 	sub	r2,r2,r3
    d058:	8884983a 	sll	r2,r17,r2
    d05c:	1204b03a 	or	r2,r2,r8
    d060:	1004c03a 	cmpne	r2,r2,zero
    d064:	2084b03a 	or	r2,r4,r2
    d068:	144001cc 	andi	r17,r2,7
    d06c:	88000d1e 	bne	r17,zero,d0a4 <__divdf3+0x894>
    d070:	000b883a 	mov	r5,zero
    d074:	1024d0fa 	srli	r18,r2,3
    d078:	98c0004c 	andi	r3,r19,1
    d07c:	0005883a 	mov	r2,zero
    d080:	9464b03a 	or	r18,r18,r17
    d084:	003e4106 	br	c98c <__alt_data_end+0xff00c98c>
    d088:	1007883a 	mov	r3,r2
    d08c:	0023883a 	mov	r17,zero
    d090:	880a927a 	slli	r5,r17,9
    d094:	1805883a 	mov	r2,r3
    d098:	8822977a 	slli	r17,r17,29
    d09c:	280ad33a 	srli	r5,r5,12
    d0a0:	003ff406 	br	d074 <__alt_data_end+0xff00d074>
    d0a4:	10c003cc 	andi	r3,r2,15
    d0a8:	01000104 	movi	r4,4
    d0ac:	193ff626 	beq	r3,r4,d088 <__alt_data_end+0xff00d088>
    d0b0:	0023883a 	mov	r17,zero
    d0b4:	003fca06 	br	cfe0 <__alt_data_end+0xff00cfe0>
    d0b8:	813fd336 	bltu	r16,r4,d008 <__alt_data_end+0xff00d008>
    d0bc:	1023883a 	mov	r17,r2
    d0c0:	003fa806 	br	cf64 <__alt_data_end+0xff00cf64>
    d0c4:	b0ffd636 	bltu	r22,r3,d020 <__alt_data_end+0xff00d020>
    d0c8:	1011883a 	mov	r8,r2
    d0cc:	b0ff341e 	bne	r22,r3,cda0 <__alt_data_end+0xff00cda0>
    d0d0:	003f3406 	br	cda4 <__alt_data_end+0xff00cda4>
    d0d4:	0005883a 	mov	r2,zero
    d0d8:	003fe006 	br	d05c <__alt_data_end+0xff00d05c>
    d0dc:	00800434 	movhi	r2,16
    d0e0:	89400234 	orhi	r5,r17,8
    d0e4:	10bfffc4 	addi	r2,r2,-1
    d0e8:	b807883a 	mov	r3,r23
    d0ec:	288a703a 	and	r5,r5,r2
    d0f0:	4025883a 	mov	r18,r8
    d0f4:	003e8206 	br	cb00 <__alt_data_end+0xff00cb00>

0000d0f8 <__eqdf2>:
    d0f8:	2804d53a 	srli	r2,r5,20
    d0fc:	3806d53a 	srli	r3,r7,20
    d100:	02000434 	movhi	r8,16
    d104:	423fffc4 	addi	r8,r8,-1
    d108:	1081ffcc 	andi	r2,r2,2047
    d10c:	0281ffc4 	movi	r10,2047
    d110:	2a12703a 	and	r9,r5,r8
    d114:	18c1ffcc 	andi	r3,r3,2047
    d118:	3a10703a 	and	r8,r7,r8
    d11c:	280ad7fa 	srli	r5,r5,31
    d120:	380ed7fa 	srli	r7,r7,31
    d124:	12801026 	beq	r2,r10,d168 <__eqdf2+0x70>
    d128:	0281ffc4 	movi	r10,2047
    d12c:	1a800a26 	beq	r3,r10,d158 <__eqdf2+0x60>
    d130:	10c00226 	beq	r2,r3,d13c <__eqdf2+0x44>
    d134:	00800044 	movi	r2,1
    d138:	f800283a 	ret
    d13c:	4a3ffd1e 	bne	r9,r8,d134 <__alt_data_end+0xff00d134>
    d140:	21bffc1e 	bne	r4,r6,d134 <__alt_data_end+0xff00d134>
    d144:	29c00c26 	beq	r5,r7,d178 <__eqdf2+0x80>
    d148:	103ffa1e 	bne	r2,zero,d134 <__alt_data_end+0xff00d134>
    d14c:	2244b03a 	or	r2,r4,r9
    d150:	1004c03a 	cmpne	r2,r2,zero
    d154:	f800283a 	ret
    d158:	3214b03a 	or	r10,r6,r8
    d15c:	503ff426 	beq	r10,zero,d130 <__alt_data_end+0xff00d130>
    d160:	00800044 	movi	r2,1
    d164:	f800283a 	ret
    d168:	2254b03a 	or	r10,r4,r9
    d16c:	503fee26 	beq	r10,zero,d128 <__alt_data_end+0xff00d128>
    d170:	00800044 	movi	r2,1
    d174:	f800283a 	ret
    d178:	0005883a 	mov	r2,zero
    d17c:	f800283a 	ret

0000d180 <__gedf2>:
    d180:	2804d53a 	srli	r2,r5,20
    d184:	3806d53a 	srli	r3,r7,20
    d188:	02000434 	movhi	r8,16
    d18c:	423fffc4 	addi	r8,r8,-1
    d190:	1081ffcc 	andi	r2,r2,2047
    d194:	0241ffc4 	movi	r9,2047
    d198:	2a14703a 	and	r10,r5,r8
    d19c:	18c1ffcc 	andi	r3,r3,2047
    d1a0:	3a10703a 	and	r8,r7,r8
    d1a4:	280ad7fa 	srli	r5,r5,31
    d1a8:	380ed7fa 	srli	r7,r7,31
    d1ac:	12401d26 	beq	r2,r9,d224 <__gedf2+0xa4>
    d1b0:	0241ffc4 	movi	r9,2047
    d1b4:	1a401226 	beq	r3,r9,d200 <__gedf2+0x80>
    d1b8:	1000081e 	bne	r2,zero,d1dc <__gedf2+0x5c>
    d1bc:	2296b03a 	or	r11,r4,r10
    d1c0:	5813003a 	cmpeq	r9,r11,zero
    d1c4:	1800091e 	bne	r3,zero,d1ec <__gedf2+0x6c>
    d1c8:	3218b03a 	or	r12,r6,r8
    d1cc:	6000071e 	bne	r12,zero,d1ec <__gedf2+0x6c>
    d1d0:	0005883a 	mov	r2,zero
    d1d4:	5800101e 	bne	r11,zero,d218 <__gedf2+0x98>
    d1d8:	f800283a 	ret
    d1dc:	18000c1e 	bne	r3,zero,d210 <__gedf2+0x90>
    d1e0:	3212b03a 	or	r9,r6,r8
    d1e4:	48000c26 	beq	r9,zero,d218 <__gedf2+0x98>
    d1e8:	0013883a 	mov	r9,zero
    d1ec:	39c03fcc 	andi	r7,r7,255
    d1f0:	48000826 	beq	r9,zero,d214 <__gedf2+0x94>
    d1f4:	38000926 	beq	r7,zero,d21c <__gedf2+0x9c>
    d1f8:	00800044 	movi	r2,1
    d1fc:	f800283a 	ret
    d200:	3212b03a 	or	r9,r6,r8
    d204:	483fec26 	beq	r9,zero,d1b8 <__alt_data_end+0xff00d1b8>
    d208:	00bfff84 	movi	r2,-2
    d20c:	f800283a 	ret
    d210:	39c03fcc 	andi	r7,r7,255
    d214:	29c00626 	beq	r5,r7,d230 <__gedf2+0xb0>
    d218:	283ff726 	beq	r5,zero,d1f8 <__alt_data_end+0xff00d1f8>
    d21c:	00bfffc4 	movi	r2,-1
    d220:	f800283a 	ret
    d224:	2292b03a 	or	r9,r4,r10
    d228:	483fe126 	beq	r9,zero,d1b0 <__alt_data_end+0xff00d1b0>
    d22c:	003ff606 	br	d208 <__alt_data_end+0xff00d208>
    d230:	18bff916 	blt	r3,r2,d218 <__alt_data_end+0xff00d218>
    d234:	10c00316 	blt	r2,r3,d244 <__gedf2+0xc4>
    d238:	42bff736 	bltu	r8,r10,d218 <__alt_data_end+0xff00d218>
    d23c:	52000326 	beq	r10,r8,d24c <__gedf2+0xcc>
    d240:	5200042e 	bgeu	r10,r8,d254 <__gedf2+0xd4>
    d244:	283fec1e 	bne	r5,zero,d1f8 <__alt_data_end+0xff00d1f8>
    d248:	003ff406 	br	d21c <__alt_data_end+0xff00d21c>
    d24c:	313ff236 	bltu	r6,r4,d218 <__alt_data_end+0xff00d218>
    d250:	21bffc36 	bltu	r4,r6,d244 <__alt_data_end+0xff00d244>
    d254:	0005883a 	mov	r2,zero
    d258:	f800283a 	ret

0000d25c <__ledf2>:
    d25c:	2804d53a 	srli	r2,r5,20
    d260:	3810d53a 	srli	r8,r7,20
    d264:	00c00434 	movhi	r3,16
    d268:	18ffffc4 	addi	r3,r3,-1
    d26c:	1081ffcc 	andi	r2,r2,2047
    d270:	0241ffc4 	movi	r9,2047
    d274:	28d4703a 	and	r10,r5,r3
    d278:	4201ffcc 	andi	r8,r8,2047
    d27c:	38c6703a 	and	r3,r7,r3
    d280:	280ad7fa 	srli	r5,r5,31
    d284:	380ed7fa 	srli	r7,r7,31
    d288:	12401f26 	beq	r2,r9,d308 <__ledf2+0xac>
    d28c:	0241ffc4 	movi	r9,2047
    d290:	42401426 	beq	r8,r9,d2e4 <__ledf2+0x88>
    d294:	1000091e 	bne	r2,zero,d2bc <__ledf2+0x60>
    d298:	2296b03a 	or	r11,r4,r10
    d29c:	5813003a 	cmpeq	r9,r11,zero
    d2a0:	29403fcc 	andi	r5,r5,255
    d2a4:	40000a1e 	bne	r8,zero,d2d0 <__ledf2+0x74>
    d2a8:	30d8b03a 	or	r12,r6,r3
    d2ac:	6000081e 	bne	r12,zero,d2d0 <__ledf2+0x74>
    d2b0:	0005883a 	mov	r2,zero
    d2b4:	5800111e 	bne	r11,zero,d2fc <__ledf2+0xa0>
    d2b8:	f800283a 	ret
    d2bc:	29403fcc 	andi	r5,r5,255
    d2c0:	40000c1e 	bne	r8,zero,d2f4 <__ledf2+0x98>
    d2c4:	30d2b03a 	or	r9,r6,r3
    d2c8:	48000c26 	beq	r9,zero,d2fc <__ledf2+0xa0>
    d2cc:	0013883a 	mov	r9,zero
    d2d0:	39c03fcc 	andi	r7,r7,255
    d2d4:	48000826 	beq	r9,zero,d2f8 <__ledf2+0x9c>
    d2d8:	38001126 	beq	r7,zero,d320 <__ledf2+0xc4>
    d2dc:	00800044 	movi	r2,1
    d2e0:	f800283a 	ret
    d2e4:	30d2b03a 	or	r9,r6,r3
    d2e8:	483fea26 	beq	r9,zero,d294 <__alt_data_end+0xff00d294>
    d2ec:	00800084 	movi	r2,2
    d2f0:	f800283a 	ret
    d2f4:	39c03fcc 	andi	r7,r7,255
    d2f8:	39400726 	beq	r7,r5,d318 <__ledf2+0xbc>
    d2fc:	2800081e 	bne	r5,zero,d320 <__ledf2+0xc4>
    d300:	00800044 	movi	r2,1
    d304:	f800283a 	ret
    d308:	2292b03a 	or	r9,r4,r10
    d30c:	483fdf26 	beq	r9,zero,d28c <__alt_data_end+0xff00d28c>
    d310:	00800084 	movi	r2,2
    d314:	f800283a 	ret
    d318:	4080030e 	bge	r8,r2,d328 <__ledf2+0xcc>
    d31c:	383fef26 	beq	r7,zero,d2dc <__alt_data_end+0xff00d2dc>
    d320:	00bfffc4 	movi	r2,-1
    d324:	f800283a 	ret
    d328:	123feb16 	blt	r2,r8,d2d8 <__alt_data_end+0xff00d2d8>
    d32c:	1abff336 	bltu	r3,r10,d2fc <__alt_data_end+0xff00d2fc>
    d330:	50c00326 	beq	r10,r3,d340 <__ledf2+0xe4>
    d334:	50c0042e 	bgeu	r10,r3,d348 <__ledf2+0xec>
    d338:	283fe81e 	bne	r5,zero,d2dc <__alt_data_end+0xff00d2dc>
    d33c:	003ff806 	br	d320 <__alt_data_end+0xff00d320>
    d340:	313fee36 	bltu	r6,r4,d2fc <__alt_data_end+0xff00d2fc>
    d344:	21bffc36 	bltu	r4,r6,d338 <__alt_data_end+0xff00d338>
    d348:	0005883a 	mov	r2,zero
    d34c:	f800283a 	ret

0000d350 <__muldf3>:
    d350:	defff304 	addi	sp,sp,-52
    d354:	2804d53a 	srli	r2,r5,20
    d358:	dd800915 	stw	r22,36(sp)
    d35c:	282cd7fa 	srli	r22,r5,31
    d360:	dc000315 	stw	r16,12(sp)
    d364:	04000434 	movhi	r16,16
    d368:	dd400815 	stw	r21,32(sp)
    d36c:	dc800515 	stw	r18,20(sp)
    d370:	843fffc4 	addi	r16,r16,-1
    d374:	dfc00c15 	stw	ra,48(sp)
    d378:	df000b15 	stw	fp,44(sp)
    d37c:	ddc00a15 	stw	r23,40(sp)
    d380:	dd000715 	stw	r20,28(sp)
    d384:	dcc00615 	stw	r19,24(sp)
    d388:	dc400415 	stw	r17,16(sp)
    d38c:	1481ffcc 	andi	r18,r2,2047
    d390:	2c20703a 	and	r16,r5,r16
    d394:	b02b883a 	mov	r21,r22
    d398:	b2403fcc 	andi	r9,r22,255
    d39c:	90006026 	beq	r18,zero,d520 <__muldf3+0x1d0>
    d3a0:	0081ffc4 	movi	r2,2047
    d3a4:	2029883a 	mov	r20,r4
    d3a8:	90803626 	beq	r18,r2,d484 <__muldf3+0x134>
    d3ac:	80800434 	orhi	r2,r16,16
    d3b0:	100490fa 	slli	r2,r2,3
    d3b4:	2020d77a 	srli	r16,r4,29
    d3b8:	202890fa 	slli	r20,r4,3
    d3bc:	94bf0044 	addi	r18,r18,-1023
    d3c0:	80a0b03a 	or	r16,r16,r2
    d3c4:	0027883a 	mov	r19,zero
    d3c8:	0039883a 	mov	fp,zero
    d3cc:	3804d53a 	srli	r2,r7,20
    d3d0:	382ed7fa 	srli	r23,r7,31
    d3d4:	04400434 	movhi	r17,16
    d3d8:	8c7fffc4 	addi	r17,r17,-1
    d3dc:	1081ffcc 	andi	r2,r2,2047
    d3e0:	3011883a 	mov	r8,r6
    d3e4:	3c62703a 	and	r17,r7,r17
    d3e8:	ba803fcc 	andi	r10,r23,255
    d3ec:	10006d26 	beq	r2,zero,d5a4 <__muldf3+0x254>
    d3f0:	00c1ffc4 	movi	r3,2047
    d3f4:	10c06526 	beq	r2,r3,d58c <__muldf3+0x23c>
    d3f8:	88c00434 	orhi	r3,r17,16
    d3fc:	180690fa 	slli	r3,r3,3
    d400:	3022d77a 	srli	r17,r6,29
    d404:	301090fa 	slli	r8,r6,3
    d408:	10bf0044 	addi	r2,r2,-1023
    d40c:	88e2b03a 	or	r17,r17,r3
    d410:	000b883a 	mov	r5,zero
    d414:	9085883a 	add	r2,r18,r2
    d418:	2cc8b03a 	or	r4,r5,r19
    d41c:	00c003c4 	movi	r3,15
    d420:	bdacf03a 	xor	r22,r23,r22
    d424:	12c00044 	addi	r11,r2,1
    d428:	19009936 	bltu	r3,r4,d690 <__muldf3+0x340>
    d42c:	200890ba 	slli	r4,r4,2
    d430:	00c00074 	movhi	r3,1
    d434:	18f51104 	addi	r3,r3,-11196
    d438:	20c9883a 	add	r4,r4,r3
    d43c:	20c00017 	ldw	r3,0(r4)
    d440:	1800683a 	jmp	r3
    d444:	0000d690 	cmplti	zero,zero,858
    d448:	0000d4a4 	muli	zero,zero,850
    d44c:	0000d4a4 	muli	zero,zero,850
    d450:	0000d4a0 	cmpeqi	zero,zero,850
    d454:	0000d66c 	andhi	zero,zero,857
    d458:	0000d66c 	andhi	zero,zero,857
    d45c:	0000d654 	movui	zero,857
    d460:	0000d4a0 	cmpeqi	zero,zero,850
    d464:	0000d66c 	andhi	zero,zero,857
    d468:	0000d654 	movui	zero,857
    d46c:	0000d66c 	andhi	zero,zero,857
    d470:	0000d4a0 	cmpeqi	zero,zero,850
    d474:	0000d67c 	xorhi	zero,zero,857
    d478:	0000d67c 	xorhi	zero,zero,857
    d47c:	0000d67c 	xorhi	zero,zero,857
    d480:	0000d898 	cmpnei	zero,zero,866
    d484:	2404b03a 	or	r2,r4,r16
    d488:	10006f1e 	bne	r2,zero,d648 <__muldf3+0x2f8>
    d48c:	04c00204 	movi	r19,8
    d490:	0021883a 	mov	r16,zero
    d494:	0029883a 	mov	r20,zero
    d498:	07000084 	movi	fp,2
    d49c:	003fcb06 	br	d3cc <__alt_data_end+0xff00d3cc>
    d4a0:	502d883a 	mov	r22,r10
    d4a4:	00800084 	movi	r2,2
    d4a8:	28805726 	beq	r5,r2,d608 <__muldf3+0x2b8>
    d4ac:	008000c4 	movi	r2,3
    d4b0:	28816626 	beq	r5,r2,da4c <__muldf3+0x6fc>
    d4b4:	00800044 	movi	r2,1
    d4b8:	2881411e 	bne	r5,r2,d9c0 <__muldf3+0x670>
    d4bc:	b02b883a 	mov	r21,r22
    d4c0:	0005883a 	mov	r2,zero
    d4c4:	000b883a 	mov	r5,zero
    d4c8:	0029883a 	mov	r20,zero
    d4cc:	1004953a 	slli	r2,r2,20
    d4d0:	a8c03fcc 	andi	r3,r21,255
    d4d4:	04400434 	movhi	r17,16
    d4d8:	8c7fffc4 	addi	r17,r17,-1
    d4dc:	180697fa 	slli	r3,r3,31
    d4e0:	2c4a703a 	and	r5,r5,r17
    d4e4:	288ab03a 	or	r5,r5,r2
    d4e8:	28c6b03a 	or	r3,r5,r3
    d4ec:	a005883a 	mov	r2,r20
    d4f0:	dfc00c17 	ldw	ra,48(sp)
    d4f4:	df000b17 	ldw	fp,44(sp)
    d4f8:	ddc00a17 	ldw	r23,40(sp)
    d4fc:	dd800917 	ldw	r22,36(sp)
    d500:	dd400817 	ldw	r21,32(sp)
    d504:	dd000717 	ldw	r20,28(sp)
    d508:	dcc00617 	ldw	r19,24(sp)
    d50c:	dc800517 	ldw	r18,20(sp)
    d510:	dc400417 	ldw	r17,16(sp)
    d514:	dc000317 	ldw	r16,12(sp)
    d518:	dec00d04 	addi	sp,sp,52
    d51c:	f800283a 	ret
    d520:	2404b03a 	or	r2,r4,r16
    d524:	2027883a 	mov	r19,r4
    d528:	10004226 	beq	r2,zero,d634 <__muldf3+0x2e4>
    d52c:	8000fc26 	beq	r16,zero,d920 <__muldf3+0x5d0>
    d530:	8009883a 	mov	r4,r16
    d534:	d9800215 	stw	r6,8(sp)
    d538:	d9c00015 	stw	r7,0(sp)
    d53c:	da400115 	stw	r9,4(sp)
    d540:	000e5680 	call	e568 <__clzsi2>
    d544:	d9800217 	ldw	r6,8(sp)
    d548:	d9c00017 	ldw	r7,0(sp)
    d54c:	da400117 	ldw	r9,4(sp)
    d550:	113ffd44 	addi	r4,r2,-11
    d554:	00c00704 	movi	r3,28
    d558:	1900ed16 	blt	r3,r4,d910 <__muldf3+0x5c0>
    d55c:	00c00744 	movi	r3,29
    d560:	147ffe04 	addi	r17,r2,-8
    d564:	1907c83a 	sub	r3,r3,r4
    d568:	8460983a 	sll	r16,r16,r17
    d56c:	98c6d83a 	srl	r3,r19,r3
    d570:	9c68983a 	sll	r20,r19,r17
    d574:	1c20b03a 	or	r16,r3,r16
    d578:	1080fcc4 	addi	r2,r2,1011
    d57c:	00a5c83a 	sub	r18,zero,r2
    d580:	0027883a 	mov	r19,zero
    d584:	0039883a 	mov	fp,zero
    d588:	003f9006 	br	d3cc <__alt_data_end+0xff00d3cc>
    d58c:	3446b03a 	or	r3,r6,r17
    d590:	1800261e 	bne	r3,zero,d62c <__muldf3+0x2dc>
    d594:	0023883a 	mov	r17,zero
    d598:	0011883a 	mov	r8,zero
    d59c:	01400084 	movi	r5,2
    d5a0:	003f9c06 	br	d414 <__alt_data_end+0xff00d414>
    d5a4:	3446b03a 	or	r3,r6,r17
    d5a8:	18001c26 	beq	r3,zero,d61c <__muldf3+0x2cc>
    d5ac:	8800ce26 	beq	r17,zero,d8e8 <__muldf3+0x598>
    d5b0:	8809883a 	mov	r4,r17
    d5b4:	d9800215 	stw	r6,8(sp)
    d5b8:	da400115 	stw	r9,4(sp)
    d5bc:	da800015 	stw	r10,0(sp)
    d5c0:	000e5680 	call	e568 <__clzsi2>
    d5c4:	d9800217 	ldw	r6,8(sp)
    d5c8:	da400117 	ldw	r9,4(sp)
    d5cc:	da800017 	ldw	r10,0(sp)
    d5d0:	113ffd44 	addi	r4,r2,-11
    d5d4:	00c00704 	movi	r3,28
    d5d8:	1900bf16 	blt	r3,r4,d8d8 <__muldf3+0x588>
    d5dc:	00c00744 	movi	r3,29
    d5e0:	123ffe04 	addi	r8,r2,-8
    d5e4:	1907c83a 	sub	r3,r3,r4
    d5e8:	8a22983a 	sll	r17,r17,r8
    d5ec:	30c6d83a 	srl	r3,r6,r3
    d5f0:	3210983a 	sll	r8,r6,r8
    d5f4:	1c62b03a 	or	r17,r3,r17
    d5f8:	1080fcc4 	addi	r2,r2,1011
    d5fc:	0085c83a 	sub	r2,zero,r2
    d600:	000b883a 	mov	r5,zero
    d604:	003f8306 	br	d414 <__alt_data_end+0xff00d414>
    d608:	b02b883a 	mov	r21,r22
    d60c:	0081ffc4 	movi	r2,2047
    d610:	000b883a 	mov	r5,zero
    d614:	0029883a 	mov	r20,zero
    d618:	003fac06 	br	d4cc <__alt_data_end+0xff00d4cc>
    d61c:	0023883a 	mov	r17,zero
    d620:	0011883a 	mov	r8,zero
    d624:	01400044 	movi	r5,1
    d628:	003f7a06 	br	d414 <__alt_data_end+0xff00d414>
    d62c:	014000c4 	movi	r5,3
    d630:	003f7806 	br	d414 <__alt_data_end+0xff00d414>
    d634:	04c00104 	movi	r19,4
    d638:	0021883a 	mov	r16,zero
    d63c:	0029883a 	mov	r20,zero
    d640:	07000044 	movi	fp,1
    d644:	003f6106 	br	d3cc <__alt_data_end+0xff00d3cc>
    d648:	04c00304 	movi	r19,12
    d64c:	070000c4 	movi	fp,3
    d650:	003f5e06 	br	d3cc <__alt_data_end+0xff00d3cc>
    d654:	01400434 	movhi	r5,16
    d658:	002b883a 	mov	r21,zero
    d65c:	297fffc4 	addi	r5,r5,-1
    d660:	053fffc4 	movi	r20,-1
    d664:	0081ffc4 	movi	r2,2047
    d668:	003f9806 	br	d4cc <__alt_data_end+0xff00d4cc>
    d66c:	8023883a 	mov	r17,r16
    d670:	a011883a 	mov	r8,r20
    d674:	e00b883a 	mov	r5,fp
    d678:	003f8a06 	br	d4a4 <__alt_data_end+0xff00d4a4>
    d67c:	8023883a 	mov	r17,r16
    d680:	a011883a 	mov	r8,r20
    d684:	482d883a 	mov	r22,r9
    d688:	e00b883a 	mov	r5,fp
    d68c:	003f8506 	br	d4a4 <__alt_data_end+0xff00d4a4>
    d690:	a00ad43a 	srli	r5,r20,16
    d694:	401ad43a 	srli	r13,r8,16
    d698:	a53fffcc 	andi	r20,r20,65535
    d69c:	423fffcc 	andi	r8,r8,65535
    d6a0:	4519383a 	mul	r12,r8,r20
    d6a4:	4147383a 	mul	r3,r8,r5
    d6a8:	6d09383a 	mul	r4,r13,r20
    d6ac:	600cd43a 	srli	r6,r12,16
    d6b0:	2b5d383a 	mul	r14,r5,r13
    d6b4:	20c9883a 	add	r4,r4,r3
    d6b8:	310d883a 	add	r6,r6,r4
    d6bc:	30c0022e 	bgeu	r6,r3,d6c8 <__muldf3+0x378>
    d6c0:	00c00074 	movhi	r3,1
    d6c4:	70dd883a 	add	r14,r14,r3
    d6c8:	8826d43a 	srli	r19,r17,16
    d6cc:	8bffffcc 	andi	r15,r17,65535
    d6d0:	7d23383a 	mul	r17,r15,r20
    d6d4:	7949383a 	mul	r4,r15,r5
    d6d8:	9d29383a 	mul	r20,r19,r20
    d6dc:	8814d43a 	srli	r10,r17,16
    d6e0:	3012943a 	slli	r9,r6,16
    d6e4:	a129883a 	add	r20,r20,r4
    d6e8:	633fffcc 	andi	r12,r12,65535
    d6ec:	5515883a 	add	r10,r10,r20
    d6f0:	3006d43a 	srli	r3,r6,16
    d6f4:	4b13883a 	add	r9,r9,r12
    d6f8:	2ccb383a 	mul	r5,r5,r19
    d6fc:	5100022e 	bgeu	r10,r4,d708 <__muldf3+0x3b8>
    d700:	01000074 	movhi	r4,1
    d704:	290b883a 	add	r5,r5,r4
    d708:	802ad43a 	srli	r21,r16,16
    d70c:	843fffcc 	andi	r16,r16,65535
    d710:	440d383a 	mul	r6,r8,r16
    d714:	4565383a 	mul	r18,r8,r21
    d718:	8349383a 	mul	r4,r16,r13
    d71c:	500e943a 	slli	r7,r10,16
    d720:	3010d43a 	srli	r8,r6,16
    d724:	5028d43a 	srli	r20,r10,16
    d728:	2489883a 	add	r4,r4,r18
    d72c:	8abfffcc 	andi	r10,r17,65535
    d730:	3a95883a 	add	r10,r7,r10
    d734:	4119883a 	add	r12,r8,r4
    d738:	a169883a 	add	r20,r20,r5
    d73c:	1a87883a 	add	r3,r3,r10
    d740:	6d5b383a 	mul	r13,r13,r21
    d744:	6480022e 	bgeu	r12,r18,d750 <__muldf3+0x400>
    d748:	01000074 	movhi	r4,1
    d74c:	691b883a 	add	r13,r13,r4
    d750:	7c25383a 	mul	r18,r15,r16
    d754:	7d4b383a 	mul	r5,r15,r21
    d758:	84cf383a 	mul	r7,r16,r19
    d75c:	901ed43a 	srli	r15,r18,16
    d760:	6008d43a 	srli	r4,r12,16
    d764:	6010943a 	slli	r8,r12,16
    d768:	394f883a 	add	r7,r7,r5
    d76c:	333fffcc 	andi	r12,r6,65535
    d770:	79df883a 	add	r15,r15,r7
    d774:	235b883a 	add	r13,r4,r13
    d778:	9d63383a 	mul	r17,r19,r21
    d77c:	4309883a 	add	r4,r8,r12
    d780:	7940022e 	bgeu	r15,r5,d78c <__muldf3+0x43c>
    d784:	01400074 	movhi	r5,1
    d788:	8963883a 	add	r17,r17,r5
    d78c:	780a943a 	slli	r5,r15,16
    d790:	91bfffcc 	andi	r6,r18,65535
    d794:	70c7883a 	add	r3,r14,r3
    d798:	298d883a 	add	r6,r5,r6
    d79c:	1a8f803a 	cmpltu	r7,r3,r10
    d7a0:	350b883a 	add	r5,r6,r20
    d7a4:	20c7883a 	add	r3,r4,r3
    d7a8:	3955883a 	add	r10,r7,r5
    d7ac:	1909803a 	cmpltu	r4,r3,r4
    d7b0:	6a91883a 	add	r8,r13,r10
    d7b4:	780cd43a 	srli	r6,r15,16
    d7b8:	2219883a 	add	r12,r4,r8
    d7bc:	2d0b803a 	cmpltu	r5,r5,r20
    d7c0:	51cf803a 	cmpltu	r7,r10,r7
    d7c4:	29ceb03a 	or	r7,r5,r7
    d7c8:	4351803a 	cmpltu	r8,r8,r13
    d7cc:	610b803a 	cmpltu	r5,r12,r4
    d7d0:	4148b03a 	or	r4,r8,r5
    d7d4:	398f883a 	add	r7,r7,r6
    d7d8:	3909883a 	add	r4,r7,r4
    d7dc:	1810927a 	slli	r8,r3,9
    d7e0:	2449883a 	add	r4,r4,r17
    d7e4:	2008927a 	slli	r4,r4,9
    d7e8:	6022d5fa 	srli	r17,r12,23
    d7ec:	1806d5fa 	srli	r3,r3,23
    d7f0:	4252b03a 	or	r9,r8,r9
    d7f4:	600a927a 	slli	r5,r12,9
    d7f8:	4810c03a 	cmpne	r8,r9,zero
    d7fc:	2462b03a 	or	r17,r4,r17
    d800:	40c6b03a 	or	r3,r8,r3
    d804:	8900402c 	andhi	r4,r17,256
    d808:	1950b03a 	or	r8,r3,r5
    d80c:	20000726 	beq	r4,zero,d82c <__muldf3+0x4dc>
    d810:	4006d07a 	srli	r3,r8,1
    d814:	880497fa 	slli	r2,r17,31
    d818:	4200004c 	andi	r8,r8,1
    d81c:	8822d07a 	srli	r17,r17,1
    d820:	1a10b03a 	or	r8,r3,r8
    d824:	1210b03a 	or	r8,r2,r8
    d828:	5805883a 	mov	r2,r11
    d82c:	1140ffc4 	addi	r5,r2,1023
    d830:	0140440e 	bge	zero,r5,d944 <__muldf3+0x5f4>
    d834:	40c001cc 	andi	r3,r8,7
    d838:	18000726 	beq	r3,zero,d858 <__muldf3+0x508>
    d83c:	40c003cc 	andi	r3,r8,15
    d840:	01000104 	movi	r4,4
    d844:	19000426 	beq	r3,r4,d858 <__muldf3+0x508>
    d848:	4107883a 	add	r3,r8,r4
    d84c:	1a11803a 	cmpltu	r8,r3,r8
    d850:	8a23883a 	add	r17,r17,r8
    d854:	1811883a 	mov	r8,r3
    d858:	88c0402c 	andhi	r3,r17,256
    d85c:	18000426 	beq	r3,zero,d870 <__muldf3+0x520>
    d860:	11410004 	addi	r5,r2,1024
    d864:	00bfc034 	movhi	r2,65280
    d868:	10bfffc4 	addi	r2,r2,-1
    d86c:	88a2703a 	and	r17,r17,r2
    d870:	0081ff84 	movi	r2,2046
    d874:	117f6416 	blt	r2,r5,d608 <__alt_data_end+0xff00d608>
    d878:	8828977a 	slli	r20,r17,29
    d87c:	4010d0fa 	srli	r8,r8,3
    d880:	8822927a 	slli	r17,r17,9
    d884:	2881ffcc 	andi	r2,r5,2047
    d888:	a228b03a 	or	r20,r20,r8
    d88c:	880ad33a 	srli	r5,r17,12
    d890:	b02b883a 	mov	r21,r22
    d894:	003f0d06 	br	d4cc <__alt_data_end+0xff00d4cc>
    d898:	8080022c 	andhi	r2,r16,8
    d89c:	10000926 	beq	r2,zero,d8c4 <__muldf3+0x574>
    d8a0:	8880022c 	andhi	r2,r17,8
    d8a4:	1000071e 	bne	r2,zero,d8c4 <__muldf3+0x574>
    d8a8:	00800434 	movhi	r2,16
    d8ac:	89400234 	orhi	r5,r17,8
    d8b0:	10bfffc4 	addi	r2,r2,-1
    d8b4:	b82b883a 	mov	r21,r23
    d8b8:	288a703a 	and	r5,r5,r2
    d8bc:	4029883a 	mov	r20,r8
    d8c0:	003f6806 	br	d664 <__alt_data_end+0xff00d664>
    d8c4:	00800434 	movhi	r2,16
    d8c8:	81400234 	orhi	r5,r16,8
    d8cc:	10bfffc4 	addi	r2,r2,-1
    d8d0:	288a703a 	and	r5,r5,r2
    d8d4:	003f6306 	br	d664 <__alt_data_end+0xff00d664>
    d8d8:	147ff604 	addi	r17,r2,-40
    d8dc:	3462983a 	sll	r17,r6,r17
    d8e0:	0011883a 	mov	r8,zero
    d8e4:	003f4406 	br	d5f8 <__alt_data_end+0xff00d5f8>
    d8e8:	3009883a 	mov	r4,r6
    d8ec:	d9800215 	stw	r6,8(sp)
    d8f0:	da400115 	stw	r9,4(sp)
    d8f4:	da800015 	stw	r10,0(sp)
    d8f8:	000e5680 	call	e568 <__clzsi2>
    d8fc:	10800804 	addi	r2,r2,32
    d900:	da800017 	ldw	r10,0(sp)
    d904:	da400117 	ldw	r9,4(sp)
    d908:	d9800217 	ldw	r6,8(sp)
    d90c:	003f3006 	br	d5d0 <__alt_data_end+0xff00d5d0>
    d910:	143ff604 	addi	r16,r2,-40
    d914:	9c20983a 	sll	r16,r19,r16
    d918:	0029883a 	mov	r20,zero
    d91c:	003f1606 	br	d578 <__alt_data_end+0xff00d578>
    d920:	d9800215 	stw	r6,8(sp)
    d924:	d9c00015 	stw	r7,0(sp)
    d928:	da400115 	stw	r9,4(sp)
    d92c:	000e5680 	call	e568 <__clzsi2>
    d930:	10800804 	addi	r2,r2,32
    d934:	da400117 	ldw	r9,4(sp)
    d938:	d9c00017 	ldw	r7,0(sp)
    d93c:	d9800217 	ldw	r6,8(sp)
    d940:	003f0306 	br	d550 <__alt_data_end+0xff00d550>
    d944:	00c00044 	movi	r3,1
    d948:	1947c83a 	sub	r3,r3,r5
    d94c:	00800e04 	movi	r2,56
    d950:	10feda16 	blt	r2,r3,d4bc <__alt_data_end+0xff00d4bc>
    d954:	008007c4 	movi	r2,31
    d958:	10c01b16 	blt	r2,r3,d9c8 <__muldf3+0x678>
    d95c:	00800804 	movi	r2,32
    d960:	10c5c83a 	sub	r2,r2,r3
    d964:	888a983a 	sll	r5,r17,r2
    d968:	40c8d83a 	srl	r4,r8,r3
    d96c:	4084983a 	sll	r2,r8,r2
    d970:	88e2d83a 	srl	r17,r17,r3
    d974:	2906b03a 	or	r3,r5,r4
    d978:	1004c03a 	cmpne	r2,r2,zero
    d97c:	1886b03a 	or	r3,r3,r2
    d980:	188001cc 	andi	r2,r3,7
    d984:	10000726 	beq	r2,zero,d9a4 <__muldf3+0x654>
    d988:	188003cc 	andi	r2,r3,15
    d98c:	01000104 	movi	r4,4
    d990:	11000426 	beq	r2,r4,d9a4 <__muldf3+0x654>
    d994:	1805883a 	mov	r2,r3
    d998:	10c00104 	addi	r3,r2,4
    d99c:	1885803a 	cmpltu	r2,r3,r2
    d9a0:	88a3883a 	add	r17,r17,r2
    d9a4:	8880202c 	andhi	r2,r17,128
    d9a8:	10001c26 	beq	r2,zero,da1c <__muldf3+0x6cc>
    d9ac:	b02b883a 	mov	r21,r22
    d9b0:	00800044 	movi	r2,1
    d9b4:	000b883a 	mov	r5,zero
    d9b8:	0029883a 	mov	r20,zero
    d9bc:	003ec306 	br	d4cc <__alt_data_end+0xff00d4cc>
    d9c0:	5805883a 	mov	r2,r11
    d9c4:	003f9906 	br	d82c <__alt_data_end+0xff00d82c>
    d9c8:	00bff844 	movi	r2,-31
    d9cc:	1145c83a 	sub	r2,r2,r5
    d9d0:	8888d83a 	srl	r4,r17,r2
    d9d4:	00800804 	movi	r2,32
    d9d8:	18801a26 	beq	r3,r2,da44 <__muldf3+0x6f4>
    d9dc:	00801004 	movi	r2,64
    d9e0:	10c5c83a 	sub	r2,r2,r3
    d9e4:	8884983a 	sll	r2,r17,r2
    d9e8:	1204b03a 	or	r2,r2,r8
    d9ec:	1004c03a 	cmpne	r2,r2,zero
    d9f0:	2084b03a 	or	r2,r4,r2
    d9f4:	144001cc 	andi	r17,r2,7
    d9f8:	88000d1e 	bne	r17,zero,da30 <__muldf3+0x6e0>
    d9fc:	000b883a 	mov	r5,zero
    da00:	1028d0fa 	srli	r20,r2,3
    da04:	b02b883a 	mov	r21,r22
    da08:	0005883a 	mov	r2,zero
    da0c:	a468b03a 	or	r20,r20,r17
    da10:	003eae06 	br	d4cc <__alt_data_end+0xff00d4cc>
    da14:	1007883a 	mov	r3,r2
    da18:	0023883a 	mov	r17,zero
    da1c:	880a927a 	slli	r5,r17,9
    da20:	1805883a 	mov	r2,r3
    da24:	8822977a 	slli	r17,r17,29
    da28:	280ad33a 	srli	r5,r5,12
    da2c:	003ff406 	br	da00 <__alt_data_end+0xff00da00>
    da30:	10c003cc 	andi	r3,r2,15
    da34:	01000104 	movi	r4,4
    da38:	193ff626 	beq	r3,r4,da14 <__alt_data_end+0xff00da14>
    da3c:	0023883a 	mov	r17,zero
    da40:	003fd506 	br	d998 <__alt_data_end+0xff00d998>
    da44:	0005883a 	mov	r2,zero
    da48:	003fe706 	br	d9e8 <__alt_data_end+0xff00d9e8>
    da4c:	00800434 	movhi	r2,16
    da50:	89400234 	orhi	r5,r17,8
    da54:	10bfffc4 	addi	r2,r2,-1
    da58:	b02b883a 	mov	r21,r22
    da5c:	288a703a 	and	r5,r5,r2
    da60:	4029883a 	mov	r20,r8
    da64:	003eff06 	br	d664 <__alt_data_end+0xff00d664>

0000da68 <__subdf3>:
    da68:	02000434 	movhi	r8,16
    da6c:	423fffc4 	addi	r8,r8,-1
    da70:	defffb04 	addi	sp,sp,-20
    da74:	2a14703a 	and	r10,r5,r8
    da78:	3812d53a 	srli	r9,r7,20
    da7c:	3a10703a 	and	r8,r7,r8
    da80:	2006d77a 	srli	r3,r4,29
    da84:	3004d77a 	srli	r2,r6,29
    da88:	dc000015 	stw	r16,0(sp)
    da8c:	501490fa 	slli	r10,r10,3
    da90:	2820d53a 	srli	r16,r5,20
    da94:	401090fa 	slli	r8,r8,3
    da98:	dc800215 	stw	r18,8(sp)
    da9c:	dc400115 	stw	r17,4(sp)
    daa0:	dfc00415 	stw	ra,16(sp)
    daa4:	202290fa 	slli	r17,r4,3
    daa8:	dcc00315 	stw	r19,12(sp)
    daac:	4a41ffcc 	andi	r9,r9,2047
    dab0:	0101ffc4 	movi	r4,2047
    dab4:	2824d7fa 	srli	r18,r5,31
    dab8:	8401ffcc 	andi	r16,r16,2047
    dabc:	50c6b03a 	or	r3,r10,r3
    dac0:	380ed7fa 	srli	r7,r7,31
    dac4:	408ab03a 	or	r5,r8,r2
    dac8:	300c90fa 	slli	r6,r6,3
    dacc:	49009626 	beq	r9,r4,dd28 <__subdf3+0x2c0>
    dad0:	39c0005c 	xori	r7,r7,1
    dad4:	8245c83a 	sub	r2,r16,r9
    dad8:	3c807426 	beq	r7,r18,dcac <__subdf3+0x244>
    dadc:	0080af0e 	bge	zero,r2,dd9c <__subdf3+0x334>
    dae0:	48002a1e 	bne	r9,zero,db8c <__subdf3+0x124>
    dae4:	2988b03a 	or	r4,r5,r6
    dae8:	20009a1e 	bne	r4,zero,dd54 <__subdf3+0x2ec>
    daec:	888001cc 	andi	r2,r17,7
    daf0:	10000726 	beq	r2,zero,db10 <__subdf3+0xa8>
    daf4:	888003cc 	andi	r2,r17,15
    daf8:	01000104 	movi	r4,4
    dafc:	11000426 	beq	r2,r4,db10 <__subdf3+0xa8>
    db00:	890b883a 	add	r5,r17,r4
    db04:	2c63803a 	cmpltu	r17,r5,r17
    db08:	1c47883a 	add	r3,r3,r17
    db0c:	2823883a 	mov	r17,r5
    db10:	1880202c 	andhi	r2,r3,128
    db14:	10005926 	beq	r2,zero,dc7c <__subdf3+0x214>
    db18:	84000044 	addi	r16,r16,1
    db1c:	0081ffc4 	movi	r2,2047
    db20:	8080be26 	beq	r16,r2,de1c <__subdf3+0x3b4>
    db24:	017fe034 	movhi	r5,65408
    db28:	297fffc4 	addi	r5,r5,-1
    db2c:	1946703a 	and	r3,r3,r5
    db30:	1804977a 	slli	r2,r3,29
    db34:	1806927a 	slli	r3,r3,9
    db38:	8822d0fa 	srli	r17,r17,3
    db3c:	8401ffcc 	andi	r16,r16,2047
    db40:	180ad33a 	srli	r5,r3,12
    db44:	9100004c 	andi	r4,r18,1
    db48:	1444b03a 	or	r2,r2,r17
    db4c:	80c1ffcc 	andi	r3,r16,2047
    db50:	1820953a 	slli	r16,r3,20
    db54:	20c03fcc 	andi	r3,r4,255
    db58:	180897fa 	slli	r4,r3,31
    db5c:	00c00434 	movhi	r3,16
    db60:	18ffffc4 	addi	r3,r3,-1
    db64:	28c6703a 	and	r3,r5,r3
    db68:	1c06b03a 	or	r3,r3,r16
    db6c:	1906b03a 	or	r3,r3,r4
    db70:	dfc00417 	ldw	ra,16(sp)
    db74:	dcc00317 	ldw	r19,12(sp)
    db78:	dc800217 	ldw	r18,8(sp)
    db7c:	dc400117 	ldw	r17,4(sp)
    db80:	dc000017 	ldw	r16,0(sp)
    db84:	dec00504 	addi	sp,sp,20
    db88:	f800283a 	ret
    db8c:	0101ffc4 	movi	r4,2047
    db90:	813fd626 	beq	r16,r4,daec <__alt_data_end+0xff00daec>
    db94:	29402034 	orhi	r5,r5,128
    db98:	01000e04 	movi	r4,56
    db9c:	2080a316 	blt	r4,r2,de2c <__subdf3+0x3c4>
    dba0:	010007c4 	movi	r4,31
    dba4:	2080c616 	blt	r4,r2,dec0 <__subdf3+0x458>
    dba8:	01000804 	movi	r4,32
    dbac:	2089c83a 	sub	r4,r4,r2
    dbb0:	2910983a 	sll	r8,r5,r4
    dbb4:	308ed83a 	srl	r7,r6,r2
    dbb8:	3108983a 	sll	r4,r6,r4
    dbbc:	2884d83a 	srl	r2,r5,r2
    dbc0:	41ccb03a 	or	r6,r8,r7
    dbc4:	2008c03a 	cmpne	r4,r4,zero
    dbc8:	310cb03a 	or	r6,r6,r4
    dbcc:	898dc83a 	sub	r6,r17,r6
    dbd0:	89a3803a 	cmpltu	r17,r17,r6
    dbd4:	1887c83a 	sub	r3,r3,r2
    dbd8:	1c47c83a 	sub	r3,r3,r17
    dbdc:	3023883a 	mov	r17,r6
    dbe0:	1880202c 	andhi	r2,r3,128
    dbe4:	10002326 	beq	r2,zero,dc74 <__subdf3+0x20c>
    dbe8:	04c02034 	movhi	r19,128
    dbec:	9cffffc4 	addi	r19,r19,-1
    dbf0:	1ce6703a 	and	r19,r3,r19
    dbf4:	98007a26 	beq	r19,zero,dde0 <__subdf3+0x378>
    dbf8:	9809883a 	mov	r4,r19
    dbfc:	000e5680 	call	e568 <__clzsi2>
    dc00:	113ffe04 	addi	r4,r2,-8
    dc04:	00c007c4 	movi	r3,31
    dc08:	19007b16 	blt	r3,r4,ddf8 <__subdf3+0x390>
    dc0c:	00800804 	movi	r2,32
    dc10:	1105c83a 	sub	r2,r2,r4
    dc14:	8884d83a 	srl	r2,r17,r2
    dc18:	9906983a 	sll	r3,r19,r4
    dc1c:	8922983a 	sll	r17,r17,r4
    dc20:	10c4b03a 	or	r2,r2,r3
    dc24:	24007816 	blt	r4,r16,de08 <__subdf3+0x3a0>
    dc28:	2421c83a 	sub	r16,r4,r16
    dc2c:	80c00044 	addi	r3,r16,1
    dc30:	010007c4 	movi	r4,31
    dc34:	20c09516 	blt	r4,r3,de8c <__subdf3+0x424>
    dc38:	01400804 	movi	r5,32
    dc3c:	28cbc83a 	sub	r5,r5,r3
    dc40:	88c8d83a 	srl	r4,r17,r3
    dc44:	8962983a 	sll	r17,r17,r5
    dc48:	114a983a 	sll	r5,r2,r5
    dc4c:	10c6d83a 	srl	r3,r2,r3
    dc50:	8804c03a 	cmpne	r2,r17,zero
    dc54:	290ab03a 	or	r5,r5,r4
    dc58:	28a2b03a 	or	r17,r5,r2
    dc5c:	0021883a 	mov	r16,zero
    dc60:	003fa206 	br	daec <__alt_data_end+0xff00daec>
    dc64:	2090b03a 	or	r8,r4,r2
    dc68:	40018e26 	beq	r8,zero,e2a4 <__subdf3+0x83c>
    dc6c:	1007883a 	mov	r3,r2
    dc70:	2023883a 	mov	r17,r4
    dc74:	888001cc 	andi	r2,r17,7
    dc78:	103f9e1e 	bne	r2,zero,daf4 <__alt_data_end+0xff00daf4>
    dc7c:	1804977a 	slli	r2,r3,29
    dc80:	8822d0fa 	srli	r17,r17,3
    dc84:	1810d0fa 	srli	r8,r3,3
    dc88:	9100004c 	andi	r4,r18,1
    dc8c:	1444b03a 	or	r2,r2,r17
    dc90:	00c1ffc4 	movi	r3,2047
    dc94:	80c02826 	beq	r16,r3,dd38 <__subdf3+0x2d0>
    dc98:	01400434 	movhi	r5,16
    dc9c:	297fffc4 	addi	r5,r5,-1
    dca0:	80e0703a 	and	r16,r16,r3
    dca4:	414a703a 	and	r5,r8,r5
    dca8:	003fa806 	br	db4c <__alt_data_end+0xff00db4c>
    dcac:	0080630e 	bge	zero,r2,de3c <__subdf3+0x3d4>
    dcb0:	48003026 	beq	r9,zero,dd74 <__subdf3+0x30c>
    dcb4:	0101ffc4 	movi	r4,2047
    dcb8:	813f8c26 	beq	r16,r4,daec <__alt_data_end+0xff00daec>
    dcbc:	29402034 	orhi	r5,r5,128
    dcc0:	01000e04 	movi	r4,56
    dcc4:	2080a90e 	bge	r4,r2,df6c <__subdf3+0x504>
    dcc8:	298cb03a 	or	r6,r5,r6
    dccc:	3012c03a 	cmpne	r9,r6,zero
    dcd0:	0005883a 	mov	r2,zero
    dcd4:	4c53883a 	add	r9,r9,r17
    dcd8:	4c63803a 	cmpltu	r17,r9,r17
    dcdc:	10c7883a 	add	r3,r2,r3
    dce0:	88c7883a 	add	r3,r17,r3
    dce4:	4823883a 	mov	r17,r9
    dce8:	1880202c 	andhi	r2,r3,128
    dcec:	1000d026 	beq	r2,zero,e030 <__subdf3+0x5c8>
    dcf0:	84000044 	addi	r16,r16,1
    dcf4:	0081ffc4 	movi	r2,2047
    dcf8:	8080fe26 	beq	r16,r2,e0f4 <__subdf3+0x68c>
    dcfc:	00bfe034 	movhi	r2,65408
    dd00:	10bfffc4 	addi	r2,r2,-1
    dd04:	1886703a 	and	r3,r3,r2
    dd08:	880ad07a 	srli	r5,r17,1
    dd0c:	180497fa 	slli	r2,r3,31
    dd10:	8900004c 	andi	r4,r17,1
    dd14:	2922b03a 	or	r17,r5,r4
    dd18:	1806d07a 	srli	r3,r3,1
    dd1c:	1462b03a 	or	r17,r2,r17
    dd20:	3825883a 	mov	r18,r7
    dd24:	003f7106 	br	daec <__alt_data_end+0xff00daec>
    dd28:	2984b03a 	or	r2,r5,r6
    dd2c:	103f6826 	beq	r2,zero,dad0 <__alt_data_end+0xff00dad0>
    dd30:	39c03fcc 	andi	r7,r7,255
    dd34:	003f6706 	br	dad4 <__alt_data_end+0xff00dad4>
    dd38:	4086b03a 	or	r3,r8,r2
    dd3c:	18015226 	beq	r3,zero,e288 <__subdf3+0x820>
    dd40:	00c00434 	movhi	r3,16
    dd44:	41400234 	orhi	r5,r8,8
    dd48:	18ffffc4 	addi	r3,r3,-1
    dd4c:	28ca703a 	and	r5,r5,r3
    dd50:	003f7e06 	br	db4c <__alt_data_end+0xff00db4c>
    dd54:	10bfffc4 	addi	r2,r2,-1
    dd58:	1000491e 	bne	r2,zero,de80 <__subdf3+0x418>
    dd5c:	898fc83a 	sub	r7,r17,r6
    dd60:	89e3803a 	cmpltu	r17,r17,r7
    dd64:	1947c83a 	sub	r3,r3,r5
    dd68:	1c47c83a 	sub	r3,r3,r17
    dd6c:	3823883a 	mov	r17,r7
    dd70:	003f9b06 	br	dbe0 <__alt_data_end+0xff00dbe0>
    dd74:	2988b03a 	or	r4,r5,r6
    dd78:	203f5c26 	beq	r4,zero,daec <__alt_data_end+0xff00daec>
    dd7c:	10bfffc4 	addi	r2,r2,-1
    dd80:	1000931e 	bne	r2,zero,dfd0 <__subdf3+0x568>
    dd84:	898d883a 	add	r6,r17,r6
    dd88:	3463803a 	cmpltu	r17,r6,r17
    dd8c:	1947883a 	add	r3,r3,r5
    dd90:	88c7883a 	add	r3,r17,r3
    dd94:	3023883a 	mov	r17,r6
    dd98:	003fd306 	br	dce8 <__alt_data_end+0xff00dce8>
    dd9c:	1000541e 	bne	r2,zero,def0 <__subdf3+0x488>
    dda0:	80800044 	addi	r2,r16,1
    dda4:	1081ffcc 	andi	r2,r2,2047
    dda8:	01000044 	movi	r4,1
    ddac:	2080a20e 	bge	r4,r2,e038 <__subdf3+0x5d0>
    ddb0:	8989c83a 	sub	r4,r17,r6
    ddb4:	8905803a 	cmpltu	r2,r17,r4
    ddb8:	1967c83a 	sub	r19,r3,r5
    ddbc:	98a7c83a 	sub	r19,r19,r2
    ddc0:	9880202c 	andhi	r2,r19,128
    ddc4:	10006326 	beq	r2,zero,df54 <__subdf3+0x4ec>
    ddc8:	3463c83a 	sub	r17,r6,r17
    ddcc:	28c7c83a 	sub	r3,r5,r3
    ddd0:	344d803a 	cmpltu	r6,r6,r17
    ddd4:	19a7c83a 	sub	r19,r3,r6
    ddd8:	3825883a 	mov	r18,r7
    dddc:	983f861e 	bne	r19,zero,dbf8 <__alt_data_end+0xff00dbf8>
    dde0:	8809883a 	mov	r4,r17
    dde4:	000e5680 	call	e568 <__clzsi2>
    dde8:	10800804 	addi	r2,r2,32
    ddec:	113ffe04 	addi	r4,r2,-8
    ddf0:	00c007c4 	movi	r3,31
    ddf4:	193f850e 	bge	r3,r4,dc0c <__alt_data_end+0xff00dc0c>
    ddf8:	10bff604 	addi	r2,r2,-40
    ddfc:	8884983a 	sll	r2,r17,r2
    de00:	0023883a 	mov	r17,zero
    de04:	243f880e 	bge	r4,r16,dc28 <__alt_data_end+0xff00dc28>
    de08:	00ffe034 	movhi	r3,65408
    de0c:	18ffffc4 	addi	r3,r3,-1
    de10:	8121c83a 	sub	r16,r16,r4
    de14:	10c6703a 	and	r3,r2,r3
    de18:	003f3406 	br	daec <__alt_data_end+0xff00daec>
    de1c:	9100004c 	andi	r4,r18,1
    de20:	000b883a 	mov	r5,zero
    de24:	0005883a 	mov	r2,zero
    de28:	003f4806 	br	db4c <__alt_data_end+0xff00db4c>
    de2c:	298cb03a 	or	r6,r5,r6
    de30:	300cc03a 	cmpne	r6,r6,zero
    de34:	0005883a 	mov	r2,zero
    de38:	003f6406 	br	dbcc <__alt_data_end+0xff00dbcc>
    de3c:	10009a1e 	bne	r2,zero,e0a8 <__subdf3+0x640>
    de40:	82400044 	addi	r9,r16,1
    de44:	4881ffcc 	andi	r2,r9,2047
    de48:	02800044 	movi	r10,1
    de4c:	5080670e 	bge	r10,r2,dfec <__subdf3+0x584>
    de50:	0081ffc4 	movi	r2,2047
    de54:	4880af26 	beq	r9,r2,e114 <__subdf3+0x6ac>
    de58:	898d883a 	add	r6,r17,r6
    de5c:	1945883a 	add	r2,r3,r5
    de60:	3447803a 	cmpltu	r3,r6,r17
    de64:	1887883a 	add	r3,r3,r2
    de68:	182297fa 	slli	r17,r3,31
    de6c:	300cd07a 	srli	r6,r6,1
    de70:	1806d07a 	srli	r3,r3,1
    de74:	4821883a 	mov	r16,r9
    de78:	89a2b03a 	or	r17,r17,r6
    de7c:	003f1b06 	br	daec <__alt_data_end+0xff00daec>
    de80:	0101ffc4 	movi	r4,2047
    de84:	813f441e 	bne	r16,r4,db98 <__alt_data_end+0xff00db98>
    de88:	003f1806 	br	daec <__alt_data_end+0xff00daec>
    de8c:	843ff844 	addi	r16,r16,-31
    de90:	01400804 	movi	r5,32
    de94:	1408d83a 	srl	r4,r2,r16
    de98:	19405026 	beq	r3,r5,dfdc <__subdf3+0x574>
    de9c:	01401004 	movi	r5,64
    dea0:	28c7c83a 	sub	r3,r5,r3
    dea4:	10c4983a 	sll	r2,r2,r3
    dea8:	88a2b03a 	or	r17,r17,r2
    deac:	8822c03a 	cmpne	r17,r17,zero
    deb0:	2462b03a 	or	r17,r4,r17
    deb4:	0007883a 	mov	r3,zero
    deb8:	0021883a 	mov	r16,zero
    debc:	003f6d06 	br	dc74 <__alt_data_end+0xff00dc74>
    dec0:	11fff804 	addi	r7,r2,-32
    dec4:	01000804 	movi	r4,32
    dec8:	29ced83a 	srl	r7,r5,r7
    decc:	11004526 	beq	r2,r4,dfe4 <__subdf3+0x57c>
    ded0:	01001004 	movi	r4,64
    ded4:	2089c83a 	sub	r4,r4,r2
    ded8:	2904983a 	sll	r2,r5,r4
    dedc:	118cb03a 	or	r6,r2,r6
    dee0:	300cc03a 	cmpne	r6,r6,zero
    dee4:	398cb03a 	or	r6,r7,r6
    dee8:	0005883a 	mov	r2,zero
    deec:	003f3706 	br	dbcc <__alt_data_end+0xff00dbcc>
    def0:	80002a26 	beq	r16,zero,df9c <__subdf3+0x534>
    def4:	0101ffc4 	movi	r4,2047
    def8:	49006626 	beq	r9,r4,e094 <__subdf3+0x62c>
    defc:	0085c83a 	sub	r2,zero,r2
    df00:	18c02034 	orhi	r3,r3,128
    df04:	01000e04 	movi	r4,56
    df08:	20807e16 	blt	r4,r2,e104 <__subdf3+0x69c>
    df0c:	010007c4 	movi	r4,31
    df10:	2080e716 	blt	r4,r2,e2b0 <__subdf3+0x848>
    df14:	01000804 	movi	r4,32
    df18:	2089c83a 	sub	r4,r4,r2
    df1c:	1914983a 	sll	r10,r3,r4
    df20:	8890d83a 	srl	r8,r17,r2
    df24:	8908983a 	sll	r4,r17,r4
    df28:	1884d83a 	srl	r2,r3,r2
    df2c:	5222b03a 	or	r17,r10,r8
    df30:	2006c03a 	cmpne	r3,r4,zero
    df34:	88e2b03a 	or	r17,r17,r3
    df38:	3463c83a 	sub	r17,r6,r17
    df3c:	2885c83a 	sub	r2,r5,r2
    df40:	344d803a 	cmpltu	r6,r6,r17
    df44:	1187c83a 	sub	r3,r2,r6
    df48:	4821883a 	mov	r16,r9
    df4c:	3825883a 	mov	r18,r7
    df50:	003f2306 	br	dbe0 <__alt_data_end+0xff00dbe0>
    df54:	24d0b03a 	or	r8,r4,r19
    df58:	40001b1e 	bne	r8,zero,dfc8 <__subdf3+0x560>
    df5c:	0005883a 	mov	r2,zero
    df60:	0009883a 	mov	r4,zero
    df64:	0021883a 	mov	r16,zero
    df68:	003f4906 	br	dc90 <__alt_data_end+0xff00dc90>
    df6c:	010007c4 	movi	r4,31
    df70:	20803a16 	blt	r4,r2,e05c <__subdf3+0x5f4>
    df74:	01000804 	movi	r4,32
    df78:	2089c83a 	sub	r4,r4,r2
    df7c:	2912983a 	sll	r9,r5,r4
    df80:	3090d83a 	srl	r8,r6,r2
    df84:	3108983a 	sll	r4,r6,r4
    df88:	2884d83a 	srl	r2,r5,r2
    df8c:	4a12b03a 	or	r9,r9,r8
    df90:	2008c03a 	cmpne	r4,r4,zero
    df94:	4912b03a 	or	r9,r9,r4
    df98:	003f4e06 	br	dcd4 <__alt_data_end+0xff00dcd4>
    df9c:	1c48b03a 	or	r4,r3,r17
    dfa0:	20003c26 	beq	r4,zero,e094 <__subdf3+0x62c>
    dfa4:	0084303a 	nor	r2,zero,r2
    dfa8:	1000381e 	bne	r2,zero,e08c <__subdf3+0x624>
    dfac:	3463c83a 	sub	r17,r6,r17
    dfb0:	28c5c83a 	sub	r2,r5,r3
    dfb4:	344d803a 	cmpltu	r6,r6,r17
    dfb8:	1187c83a 	sub	r3,r2,r6
    dfbc:	4821883a 	mov	r16,r9
    dfc0:	3825883a 	mov	r18,r7
    dfc4:	003f0606 	br	dbe0 <__alt_data_end+0xff00dbe0>
    dfc8:	2023883a 	mov	r17,r4
    dfcc:	003f0906 	br	dbf4 <__alt_data_end+0xff00dbf4>
    dfd0:	0101ffc4 	movi	r4,2047
    dfd4:	813f3a1e 	bne	r16,r4,dcc0 <__alt_data_end+0xff00dcc0>
    dfd8:	003ec406 	br	daec <__alt_data_end+0xff00daec>
    dfdc:	0005883a 	mov	r2,zero
    dfe0:	003fb106 	br	dea8 <__alt_data_end+0xff00dea8>
    dfe4:	0005883a 	mov	r2,zero
    dfe8:	003fbc06 	br	dedc <__alt_data_end+0xff00dedc>
    dfec:	1c44b03a 	or	r2,r3,r17
    dff0:	80008e1e 	bne	r16,zero,e22c <__subdf3+0x7c4>
    dff4:	1000c826 	beq	r2,zero,e318 <__subdf3+0x8b0>
    dff8:	2984b03a 	or	r2,r5,r6
    dffc:	103ebb26 	beq	r2,zero,daec <__alt_data_end+0xff00daec>
    e000:	8989883a 	add	r4,r17,r6
    e004:	1945883a 	add	r2,r3,r5
    e008:	2447803a 	cmpltu	r3,r4,r17
    e00c:	1887883a 	add	r3,r3,r2
    e010:	1880202c 	andhi	r2,r3,128
    e014:	2023883a 	mov	r17,r4
    e018:	103f1626 	beq	r2,zero,dc74 <__alt_data_end+0xff00dc74>
    e01c:	00bfe034 	movhi	r2,65408
    e020:	10bfffc4 	addi	r2,r2,-1
    e024:	5021883a 	mov	r16,r10
    e028:	1886703a 	and	r3,r3,r2
    e02c:	003eaf06 	br	daec <__alt_data_end+0xff00daec>
    e030:	3825883a 	mov	r18,r7
    e034:	003f0f06 	br	dc74 <__alt_data_end+0xff00dc74>
    e038:	1c44b03a 	or	r2,r3,r17
    e03c:	8000251e 	bne	r16,zero,e0d4 <__subdf3+0x66c>
    e040:	1000661e 	bne	r2,zero,e1dc <__subdf3+0x774>
    e044:	2990b03a 	or	r8,r5,r6
    e048:	40009626 	beq	r8,zero,e2a4 <__subdf3+0x83c>
    e04c:	2807883a 	mov	r3,r5
    e050:	3023883a 	mov	r17,r6
    e054:	3825883a 	mov	r18,r7
    e058:	003ea406 	br	daec <__alt_data_end+0xff00daec>
    e05c:	127ff804 	addi	r9,r2,-32
    e060:	01000804 	movi	r4,32
    e064:	2a52d83a 	srl	r9,r5,r9
    e068:	11008c26 	beq	r2,r4,e29c <__subdf3+0x834>
    e06c:	01001004 	movi	r4,64
    e070:	2085c83a 	sub	r2,r4,r2
    e074:	2884983a 	sll	r2,r5,r2
    e078:	118cb03a 	or	r6,r2,r6
    e07c:	300cc03a 	cmpne	r6,r6,zero
    e080:	4992b03a 	or	r9,r9,r6
    e084:	0005883a 	mov	r2,zero
    e088:	003f1206 	br	dcd4 <__alt_data_end+0xff00dcd4>
    e08c:	0101ffc4 	movi	r4,2047
    e090:	493f9c1e 	bne	r9,r4,df04 <__alt_data_end+0xff00df04>
    e094:	2807883a 	mov	r3,r5
    e098:	3023883a 	mov	r17,r6
    e09c:	4821883a 	mov	r16,r9
    e0a0:	3825883a 	mov	r18,r7
    e0a4:	003e9106 	br	daec <__alt_data_end+0xff00daec>
    e0a8:	80001f1e 	bne	r16,zero,e128 <__subdf3+0x6c0>
    e0ac:	1c48b03a 	or	r4,r3,r17
    e0b0:	20005a26 	beq	r4,zero,e21c <__subdf3+0x7b4>
    e0b4:	0084303a 	nor	r2,zero,r2
    e0b8:	1000561e 	bne	r2,zero,e214 <__subdf3+0x7ac>
    e0bc:	89a3883a 	add	r17,r17,r6
    e0c0:	1945883a 	add	r2,r3,r5
    e0c4:	898d803a 	cmpltu	r6,r17,r6
    e0c8:	3087883a 	add	r3,r6,r2
    e0cc:	4821883a 	mov	r16,r9
    e0d0:	003f0506 	br	dce8 <__alt_data_end+0xff00dce8>
    e0d4:	10002b1e 	bne	r2,zero,e184 <__subdf3+0x71c>
    e0d8:	2984b03a 	or	r2,r5,r6
    e0dc:	10008026 	beq	r2,zero,e2e0 <__subdf3+0x878>
    e0e0:	2807883a 	mov	r3,r5
    e0e4:	3023883a 	mov	r17,r6
    e0e8:	3825883a 	mov	r18,r7
    e0ec:	0401ffc4 	movi	r16,2047
    e0f0:	003e7e06 	br	daec <__alt_data_end+0xff00daec>
    e0f4:	3809883a 	mov	r4,r7
    e0f8:	0011883a 	mov	r8,zero
    e0fc:	0005883a 	mov	r2,zero
    e100:	003ee306 	br	dc90 <__alt_data_end+0xff00dc90>
    e104:	1c62b03a 	or	r17,r3,r17
    e108:	8822c03a 	cmpne	r17,r17,zero
    e10c:	0005883a 	mov	r2,zero
    e110:	003f8906 	br	df38 <__alt_data_end+0xff00df38>
    e114:	3809883a 	mov	r4,r7
    e118:	4821883a 	mov	r16,r9
    e11c:	0011883a 	mov	r8,zero
    e120:	0005883a 	mov	r2,zero
    e124:	003eda06 	br	dc90 <__alt_data_end+0xff00dc90>
    e128:	0101ffc4 	movi	r4,2047
    e12c:	49003b26 	beq	r9,r4,e21c <__subdf3+0x7b4>
    e130:	0085c83a 	sub	r2,zero,r2
    e134:	18c02034 	orhi	r3,r3,128
    e138:	01000e04 	movi	r4,56
    e13c:	20806e16 	blt	r4,r2,e2f8 <__subdf3+0x890>
    e140:	010007c4 	movi	r4,31
    e144:	20807716 	blt	r4,r2,e324 <__subdf3+0x8bc>
    e148:	01000804 	movi	r4,32
    e14c:	2089c83a 	sub	r4,r4,r2
    e150:	1914983a 	sll	r10,r3,r4
    e154:	8890d83a 	srl	r8,r17,r2
    e158:	8908983a 	sll	r4,r17,r4
    e15c:	1884d83a 	srl	r2,r3,r2
    e160:	5222b03a 	or	r17,r10,r8
    e164:	2006c03a 	cmpne	r3,r4,zero
    e168:	88e2b03a 	or	r17,r17,r3
    e16c:	89a3883a 	add	r17,r17,r6
    e170:	1145883a 	add	r2,r2,r5
    e174:	898d803a 	cmpltu	r6,r17,r6
    e178:	3087883a 	add	r3,r6,r2
    e17c:	4821883a 	mov	r16,r9
    e180:	003ed906 	br	dce8 <__alt_data_end+0xff00dce8>
    e184:	2984b03a 	or	r2,r5,r6
    e188:	10004226 	beq	r2,zero,e294 <__subdf3+0x82c>
    e18c:	1808d0fa 	srli	r4,r3,3
    e190:	8822d0fa 	srli	r17,r17,3
    e194:	1806977a 	slli	r3,r3,29
    e198:	2080022c 	andhi	r2,r4,8
    e19c:	1c62b03a 	or	r17,r3,r17
    e1a0:	10000826 	beq	r2,zero,e1c4 <__subdf3+0x75c>
    e1a4:	2812d0fa 	srli	r9,r5,3
    e1a8:	4880022c 	andhi	r2,r9,8
    e1ac:	1000051e 	bne	r2,zero,e1c4 <__subdf3+0x75c>
    e1b0:	300cd0fa 	srli	r6,r6,3
    e1b4:	2804977a 	slli	r2,r5,29
    e1b8:	4809883a 	mov	r4,r9
    e1bc:	3825883a 	mov	r18,r7
    e1c0:	11a2b03a 	or	r17,r2,r6
    e1c4:	8806d77a 	srli	r3,r17,29
    e1c8:	200890fa 	slli	r4,r4,3
    e1cc:	882290fa 	slli	r17,r17,3
    e1d0:	0401ffc4 	movi	r16,2047
    e1d4:	1906b03a 	or	r3,r3,r4
    e1d8:	003e4406 	br	daec <__alt_data_end+0xff00daec>
    e1dc:	2984b03a 	or	r2,r5,r6
    e1e0:	103e4226 	beq	r2,zero,daec <__alt_data_end+0xff00daec>
    e1e4:	8989c83a 	sub	r4,r17,r6
    e1e8:	8911803a 	cmpltu	r8,r17,r4
    e1ec:	1945c83a 	sub	r2,r3,r5
    e1f0:	1205c83a 	sub	r2,r2,r8
    e1f4:	1200202c 	andhi	r8,r2,128
    e1f8:	403e9a26 	beq	r8,zero,dc64 <__alt_data_end+0xff00dc64>
    e1fc:	3463c83a 	sub	r17,r6,r17
    e200:	28c5c83a 	sub	r2,r5,r3
    e204:	344d803a 	cmpltu	r6,r6,r17
    e208:	1187c83a 	sub	r3,r2,r6
    e20c:	3825883a 	mov	r18,r7
    e210:	003e3606 	br	daec <__alt_data_end+0xff00daec>
    e214:	0101ffc4 	movi	r4,2047
    e218:	493fc71e 	bne	r9,r4,e138 <__alt_data_end+0xff00e138>
    e21c:	2807883a 	mov	r3,r5
    e220:	3023883a 	mov	r17,r6
    e224:	4821883a 	mov	r16,r9
    e228:	003e3006 	br	daec <__alt_data_end+0xff00daec>
    e22c:	10003626 	beq	r2,zero,e308 <__subdf3+0x8a0>
    e230:	2984b03a 	or	r2,r5,r6
    e234:	10001726 	beq	r2,zero,e294 <__subdf3+0x82c>
    e238:	1808d0fa 	srli	r4,r3,3
    e23c:	8822d0fa 	srli	r17,r17,3
    e240:	1806977a 	slli	r3,r3,29
    e244:	2080022c 	andhi	r2,r4,8
    e248:	1c62b03a 	or	r17,r3,r17
    e24c:	10000726 	beq	r2,zero,e26c <__subdf3+0x804>
    e250:	2812d0fa 	srli	r9,r5,3
    e254:	4880022c 	andhi	r2,r9,8
    e258:	1000041e 	bne	r2,zero,e26c <__subdf3+0x804>
    e25c:	300cd0fa 	srli	r6,r6,3
    e260:	2804977a 	slli	r2,r5,29
    e264:	4809883a 	mov	r4,r9
    e268:	11a2b03a 	or	r17,r2,r6
    e26c:	8806d77a 	srli	r3,r17,29
    e270:	200890fa 	slli	r4,r4,3
    e274:	882290fa 	slli	r17,r17,3
    e278:	3825883a 	mov	r18,r7
    e27c:	1906b03a 	or	r3,r3,r4
    e280:	0401ffc4 	movi	r16,2047
    e284:	003e1906 	br	daec <__alt_data_end+0xff00daec>
    e288:	000b883a 	mov	r5,zero
    e28c:	0005883a 	mov	r2,zero
    e290:	003e2e06 	br	db4c <__alt_data_end+0xff00db4c>
    e294:	0401ffc4 	movi	r16,2047
    e298:	003e1406 	br	daec <__alt_data_end+0xff00daec>
    e29c:	0005883a 	mov	r2,zero
    e2a0:	003f7506 	br	e078 <__alt_data_end+0xff00e078>
    e2a4:	0005883a 	mov	r2,zero
    e2a8:	0009883a 	mov	r4,zero
    e2ac:	003e7806 	br	dc90 <__alt_data_end+0xff00dc90>
    e2b0:	123ff804 	addi	r8,r2,-32
    e2b4:	01000804 	movi	r4,32
    e2b8:	1a10d83a 	srl	r8,r3,r8
    e2bc:	11002526 	beq	r2,r4,e354 <__subdf3+0x8ec>
    e2c0:	01001004 	movi	r4,64
    e2c4:	2085c83a 	sub	r2,r4,r2
    e2c8:	1884983a 	sll	r2,r3,r2
    e2cc:	1444b03a 	or	r2,r2,r17
    e2d0:	1004c03a 	cmpne	r2,r2,zero
    e2d4:	40a2b03a 	or	r17,r8,r2
    e2d8:	0005883a 	mov	r2,zero
    e2dc:	003f1606 	br	df38 <__alt_data_end+0xff00df38>
    e2e0:	02000434 	movhi	r8,16
    e2e4:	0009883a 	mov	r4,zero
    e2e8:	423fffc4 	addi	r8,r8,-1
    e2ec:	00bfffc4 	movi	r2,-1
    e2f0:	0401ffc4 	movi	r16,2047
    e2f4:	003e6606 	br	dc90 <__alt_data_end+0xff00dc90>
    e2f8:	1c62b03a 	or	r17,r3,r17
    e2fc:	8822c03a 	cmpne	r17,r17,zero
    e300:	0005883a 	mov	r2,zero
    e304:	003f9906 	br	e16c <__alt_data_end+0xff00e16c>
    e308:	2807883a 	mov	r3,r5
    e30c:	3023883a 	mov	r17,r6
    e310:	0401ffc4 	movi	r16,2047
    e314:	003df506 	br	daec <__alt_data_end+0xff00daec>
    e318:	2807883a 	mov	r3,r5
    e31c:	3023883a 	mov	r17,r6
    e320:	003df206 	br	daec <__alt_data_end+0xff00daec>
    e324:	123ff804 	addi	r8,r2,-32
    e328:	01000804 	movi	r4,32
    e32c:	1a10d83a 	srl	r8,r3,r8
    e330:	11000a26 	beq	r2,r4,e35c <__subdf3+0x8f4>
    e334:	01001004 	movi	r4,64
    e338:	2085c83a 	sub	r2,r4,r2
    e33c:	1884983a 	sll	r2,r3,r2
    e340:	1444b03a 	or	r2,r2,r17
    e344:	1004c03a 	cmpne	r2,r2,zero
    e348:	40a2b03a 	or	r17,r8,r2
    e34c:	0005883a 	mov	r2,zero
    e350:	003f8606 	br	e16c <__alt_data_end+0xff00e16c>
    e354:	0005883a 	mov	r2,zero
    e358:	003fdc06 	br	e2cc <__alt_data_end+0xff00e2cc>
    e35c:	0005883a 	mov	r2,zero
    e360:	003ff706 	br	e340 <__alt_data_end+0xff00e340>

0000e364 <__fixdfsi>:
    e364:	280cd53a 	srli	r6,r5,20
    e368:	00c00434 	movhi	r3,16
    e36c:	18ffffc4 	addi	r3,r3,-1
    e370:	3181ffcc 	andi	r6,r6,2047
    e374:	01c0ff84 	movi	r7,1022
    e378:	28c6703a 	and	r3,r5,r3
    e37c:	280ad7fa 	srli	r5,r5,31
    e380:	3980120e 	bge	r7,r6,e3cc <__fixdfsi+0x68>
    e384:	00810744 	movi	r2,1053
    e388:	11800c16 	blt	r2,r6,e3bc <__fixdfsi+0x58>
    e38c:	00810cc4 	movi	r2,1075
    e390:	1185c83a 	sub	r2,r2,r6
    e394:	01c007c4 	movi	r7,31
    e398:	18c00434 	orhi	r3,r3,16
    e39c:	38800d16 	blt	r7,r2,e3d4 <__fixdfsi+0x70>
    e3a0:	31befb44 	addi	r6,r6,-1043
    e3a4:	2084d83a 	srl	r2,r4,r2
    e3a8:	1986983a 	sll	r3,r3,r6
    e3ac:	1884b03a 	or	r2,r3,r2
    e3b0:	28000726 	beq	r5,zero,e3d0 <__fixdfsi+0x6c>
    e3b4:	0085c83a 	sub	r2,zero,r2
    e3b8:	f800283a 	ret
    e3bc:	00a00034 	movhi	r2,32768
    e3c0:	10bfffc4 	addi	r2,r2,-1
    e3c4:	2885883a 	add	r2,r5,r2
    e3c8:	f800283a 	ret
    e3cc:	0005883a 	mov	r2,zero
    e3d0:	f800283a 	ret
    e3d4:	008104c4 	movi	r2,1043
    e3d8:	1185c83a 	sub	r2,r2,r6
    e3dc:	1884d83a 	srl	r2,r3,r2
    e3e0:	003ff306 	br	e3b0 <__alt_data_end+0xff00e3b0>

0000e3e4 <__floatsidf>:
    e3e4:	defffd04 	addi	sp,sp,-12
    e3e8:	dfc00215 	stw	ra,8(sp)
    e3ec:	dc400115 	stw	r17,4(sp)
    e3f0:	dc000015 	stw	r16,0(sp)
    e3f4:	20002b26 	beq	r4,zero,e4a4 <__floatsidf+0xc0>
    e3f8:	2023883a 	mov	r17,r4
    e3fc:	2020d7fa 	srli	r16,r4,31
    e400:	20002d16 	blt	r4,zero,e4b8 <__floatsidf+0xd4>
    e404:	8809883a 	mov	r4,r17
    e408:	000e5680 	call	e568 <__clzsi2>
    e40c:	01410784 	movi	r5,1054
    e410:	288bc83a 	sub	r5,r5,r2
    e414:	01010cc4 	movi	r4,1075
    e418:	2149c83a 	sub	r4,r4,r5
    e41c:	00c007c4 	movi	r3,31
    e420:	1900160e 	bge	r3,r4,e47c <__floatsidf+0x98>
    e424:	00c104c4 	movi	r3,1043
    e428:	1947c83a 	sub	r3,r3,r5
    e42c:	88c6983a 	sll	r3,r17,r3
    e430:	00800434 	movhi	r2,16
    e434:	10bfffc4 	addi	r2,r2,-1
    e438:	1886703a 	and	r3,r3,r2
    e43c:	2941ffcc 	andi	r5,r5,2047
    e440:	800d883a 	mov	r6,r16
    e444:	0005883a 	mov	r2,zero
    e448:	280a953a 	slli	r5,r5,20
    e44c:	31803fcc 	andi	r6,r6,255
    e450:	01000434 	movhi	r4,16
    e454:	300c97fa 	slli	r6,r6,31
    e458:	213fffc4 	addi	r4,r4,-1
    e45c:	1906703a 	and	r3,r3,r4
    e460:	1946b03a 	or	r3,r3,r5
    e464:	1986b03a 	or	r3,r3,r6
    e468:	dfc00217 	ldw	ra,8(sp)
    e46c:	dc400117 	ldw	r17,4(sp)
    e470:	dc000017 	ldw	r16,0(sp)
    e474:	dec00304 	addi	sp,sp,12
    e478:	f800283a 	ret
    e47c:	00c002c4 	movi	r3,11
    e480:	1887c83a 	sub	r3,r3,r2
    e484:	88c6d83a 	srl	r3,r17,r3
    e488:	8904983a 	sll	r2,r17,r4
    e48c:	01000434 	movhi	r4,16
    e490:	213fffc4 	addi	r4,r4,-1
    e494:	2941ffcc 	andi	r5,r5,2047
    e498:	1906703a 	and	r3,r3,r4
    e49c:	800d883a 	mov	r6,r16
    e4a0:	003fe906 	br	e448 <__alt_data_end+0xff00e448>
    e4a4:	000d883a 	mov	r6,zero
    e4a8:	000b883a 	mov	r5,zero
    e4ac:	0007883a 	mov	r3,zero
    e4b0:	0005883a 	mov	r2,zero
    e4b4:	003fe406 	br	e448 <__alt_data_end+0xff00e448>
    e4b8:	0123c83a 	sub	r17,zero,r4
    e4bc:	003fd106 	br	e404 <__alt_data_end+0xff00e404>

0000e4c0 <__floatunsidf>:
    e4c0:	defffe04 	addi	sp,sp,-8
    e4c4:	dc000015 	stw	r16,0(sp)
    e4c8:	dfc00115 	stw	ra,4(sp)
    e4cc:	2021883a 	mov	r16,r4
    e4d0:	20002226 	beq	r4,zero,e55c <__floatunsidf+0x9c>
    e4d4:	000e5680 	call	e568 <__clzsi2>
    e4d8:	01010784 	movi	r4,1054
    e4dc:	2089c83a 	sub	r4,r4,r2
    e4e0:	01810cc4 	movi	r6,1075
    e4e4:	310dc83a 	sub	r6,r6,r4
    e4e8:	00c007c4 	movi	r3,31
    e4ec:	1980120e 	bge	r3,r6,e538 <__floatunsidf+0x78>
    e4f0:	00c104c4 	movi	r3,1043
    e4f4:	1907c83a 	sub	r3,r3,r4
    e4f8:	80ca983a 	sll	r5,r16,r3
    e4fc:	00800434 	movhi	r2,16
    e500:	10bfffc4 	addi	r2,r2,-1
    e504:	2101ffcc 	andi	r4,r4,2047
    e508:	0021883a 	mov	r16,zero
    e50c:	288a703a 	and	r5,r5,r2
    e510:	2008953a 	slli	r4,r4,20
    e514:	00c00434 	movhi	r3,16
    e518:	18ffffc4 	addi	r3,r3,-1
    e51c:	28c6703a 	and	r3,r5,r3
    e520:	8005883a 	mov	r2,r16
    e524:	1906b03a 	or	r3,r3,r4
    e528:	dfc00117 	ldw	ra,4(sp)
    e52c:	dc000017 	ldw	r16,0(sp)
    e530:	dec00204 	addi	sp,sp,8
    e534:	f800283a 	ret
    e538:	00c002c4 	movi	r3,11
    e53c:	188bc83a 	sub	r5,r3,r2
    e540:	814ad83a 	srl	r5,r16,r5
    e544:	00c00434 	movhi	r3,16
    e548:	18ffffc4 	addi	r3,r3,-1
    e54c:	81a0983a 	sll	r16,r16,r6
    e550:	2101ffcc 	andi	r4,r4,2047
    e554:	28ca703a 	and	r5,r5,r3
    e558:	003fed06 	br	e510 <__alt_data_end+0xff00e510>
    e55c:	0009883a 	mov	r4,zero
    e560:	000b883a 	mov	r5,zero
    e564:	003fea06 	br	e510 <__alt_data_end+0xff00e510>

0000e568 <__clzsi2>:
    e568:	00bfffd4 	movui	r2,65535
    e56c:	11000536 	bltu	r2,r4,e584 <__clzsi2+0x1c>
    e570:	00803fc4 	movi	r2,255
    e574:	11000f36 	bltu	r2,r4,e5b4 <__clzsi2+0x4c>
    e578:	00800804 	movi	r2,32
    e57c:	0007883a 	mov	r3,zero
    e580:	00000506 	br	e598 <__clzsi2+0x30>
    e584:	00804034 	movhi	r2,256
    e588:	10bfffc4 	addi	r2,r2,-1
    e58c:	11000c2e 	bgeu	r2,r4,e5c0 <__clzsi2+0x58>
    e590:	00800204 	movi	r2,8
    e594:	00c00604 	movi	r3,24
    e598:	20c8d83a 	srl	r4,r4,r3
    e59c:	00c00074 	movhi	r3,1
    e5a0:	18c1f904 	addi	r3,r3,2020
    e5a4:	1909883a 	add	r4,r3,r4
    e5a8:	20c00003 	ldbu	r3,0(r4)
    e5ac:	10c5c83a 	sub	r2,r2,r3
    e5b0:	f800283a 	ret
    e5b4:	00800604 	movi	r2,24
    e5b8:	00c00204 	movi	r3,8
    e5bc:	003ff606 	br	e598 <__alt_data_end+0xff00e598>
    e5c0:	00800404 	movi	r2,16
    e5c4:	1007883a 	mov	r3,r2
    e5c8:	003ff306 	br	e598 <__alt_data_end+0xff00e598>

0000e5cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e5cc:	defffd04 	addi	sp,sp,-12
    e5d0:	dfc00215 	stw	ra,8(sp)
    e5d4:	dc400115 	stw	r17,4(sp)
    e5d8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e5dc:	20001f16 	blt	r4,zero,e65c <close+0x90>
    e5e0:	20c00324 	muli	r3,r4,12
    e5e4:	00800074 	movhi	r2,1
    e5e8:	10846904 	addi	r2,r2,4516
    e5ec:	1885883a 	add	r2,r3,r2
    e5f0:	2021883a 	mov	r16,r4

  if (fd)
    e5f4:	10001926 	beq	r2,zero,e65c <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e5f8:	10c00017 	ldw	r3,0(r2)
    e5fc:	18c00417 	ldw	r3,16(r3)
    e600:	18000c26 	beq	r3,zero,e634 <close+0x68>
    e604:	1009883a 	mov	r4,r2
    e608:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e60c:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e610:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e614:	000ea040 	call	ea04 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e618:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e61c:	88000816 	blt	r17,zero,e640 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e620:	dfc00217 	ldw	ra,8(sp)
    e624:	dc400117 	ldw	r17,4(sp)
    e628:	dc000017 	ldw	r16,0(sp)
    e62c:	dec00304 	addi	sp,sp,12
    e630:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e634:	000ea040 	call	ea04 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e638:	0005883a 	mov	r2,zero
    e63c:	003ff806 	br	e620 <__alt_data_end+0xff00e620>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e640:	d0a00d17 	ldw	r2,-32716(gp)
    e644:	10000c26 	beq	r2,zero,e678 <close+0xac>
    e648:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e64c:	0463c83a 	sub	r17,zero,r17
    e650:	14400015 	stw	r17,0(r2)
      return -1;
    e654:	00bfffc4 	movi	r2,-1
    e658:	003ff106 	br	e620 <__alt_data_end+0xff00e620>
    e65c:	d0a00d17 	ldw	r2,-32716(gp)
    e660:	10000726 	beq	r2,zero,e680 <close+0xb4>
    e664:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e668:	00c01444 	movi	r3,81
    e66c:	10c00015 	stw	r3,0(r2)
    return -1;
    e670:	00bfffc4 	movi	r2,-1
    e674:	003fea06 	br	e620 <__alt_data_end+0xff00e620>
    e678:	d0a6dc04 	addi	r2,gp,-25744
    e67c:	003ff306 	br	e64c <__alt_data_end+0xff00e64c>
    e680:	d0a6dc04 	addi	r2,gp,-25744
    e684:	003ff806 	br	e668 <__alt_data_end+0xff00e668>

0000e688 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e688:	3005883a 	mov	r2,r6
    e68c:	f800283a 	ret

0000e690 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e690:	20000d16 	blt	r4,zero,e6c8 <fstat+0x38>
    e694:	21000324 	muli	r4,r4,12
    e698:	00800074 	movhi	r2,1
    e69c:	10846904 	addi	r2,r2,4516
    e6a0:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e6a4:	20000826 	beq	r4,zero,e6c8 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e6a8:	20800017 	ldw	r2,0(r4)
    e6ac:	10800817 	ldw	r2,32(r2)
    e6b0:	10000126 	beq	r2,zero,e6b8 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e6b4:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e6b8:	00880004 	movi	r2,8192
    e6bc:	28800115 	stw	r2,4(r5)
      return 0;
    e6c0:	0005883a 	mov	r2,zero
    e6c4:	f800283a 	ret
    e6c8:	d0a00d17 	ldw	r2,-32716(gp)
    e6cc:	10000926 	beq	r2,zero,e6f4 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e6d0:	deffff04 	addi	sp,sp,-4
    e6d4:	dfc00015 	stw	ra,0(sp)
    e6d8:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6dc:	00c01444 	movi	r3,81
    e6e0:	10c00015 	stw	r3,0(r2)
    return -1;
    e6e4:	00bfffc4 	movi	r2,-1
  }
}
    e6e8:	dfc00017 	ldw	ra,0(sp)
    e6ec:	dec00104 	addi	sp,sp,4
    e6f0:	f800283a 	ret
    e6f4:	d0a6dc04 	addi	r2,gp,-25744
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e6f8:	00c01444 	movi	r3,81
    e6fc:	10c00015 	stw	r3,0(r2)
    return -1;
    e700:	00bfffc4 	movi	r2,-1
  }
}
    e704:	f800283a 	ret

0000e708 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e708:	defff004 	addi	sp,sp,-64
    e70c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e710:	20001316 	blt	r4,zero,e760 <isatty+0x58>
    e714:	20800324 	muli	r2,r4,12
    e718:	00c00074 	movhi	r3,1
    e71c:	18c46904 	addi	r3,r3,4516
    e720:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e724:	10000e26 	beq	r2,zero,e760 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e728:	10800017 	ldw	r2,0(r2)
    e72c:	10800817 	ldw	r2,32(r2)
    e730:	10000726 	beq	r2,zero,e750 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e734:	d80b883a 	mov	r5,sp
    e738:	000e6900 	call	e690 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e73c:	d8800117 	ldw	r2,4(sp)
    e740:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e744:	dfc00f17 	ldw	ra,60(sp)
    e748:	dec01004 	addi	sp,sp,64
    e74c:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e750:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e754:	dfc00f17 	ldw	ra,60(sp)
    e758:	dec01004 	addi	sp,sp,64
    e75c:	f800283a 	ret
    e760:	d0a00d17 	ldw	r2,-32716(gp)
    e764:	10000726 	beq	r2,zero,e784 <isatty+0x7c>
    e768:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e76c:	00c01444 	movi	r3,81
    e770:	10c00015 	stw	r3,0(r2)
    return 0;
    e774:	0005883a 	mov	r2,zero
  }
}
    e778:	dfc00f17 	ldw	ra,60(sp)
    e77c:	dec01004 	addi	sp,sp,64
    e780:	f800283a 	ret
    e784:	d0a6dc04 	addi	r2,gp,-25744
    e788:	003ff806 	br	e76c <__alt_data_end+0xff00e76c>

0000e78c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e78c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e790:	01000074 	movhi	r4,1
    e794:	01400074 	movhi	r5,1
    e798:	dfc00015 	stw	ra,0(sp)
    e79c:	21024004 	addi	r4,r4,2304
    e7a0:	2948fd04 	addi	r5,r5,9204
    e7a4:	21400a26 	beq	r4,r5,e7d0 <alt_load+0x44>
  {
    while( to != end )
    e7a8:	00800074 	movhi	r2,1
    e7ac:	1088fd04 	addi	r2,r2,9204
    e7b0:	20800726 	beq	r4,r2,e7d0 <alt_load+0x44>
    {
      *to++ = *from++;
    e7b4:	21800104 	addi	r6,r4,4
    e7b8:	118dc83a 	sub	r6,r2,r6
    e7bc:	300cd0ba 	srli	r6,r6,2
    e7c0:	31800044 	addi	r6,r6,1
    e7c4:	318d883a 	add	r6,r6,r6
    e7c8:	318d883a 	add	r6,r6,r6
    e7cc:	00077cc0 	call	77cc <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e7d0:	01000034 	movhi	r4,0
    e7d4:	01400034 	movhi	r5,0
    e7d8:	21000804 	addi	r4,r4,32
    e7dc:	29400804 	addi	r5,r5,32
    e7e0:	21400a26 	beq	r4,r5,e80c <alt_load+0x80>
  {
    while( to != end )
    e7e4:	00800034 	movhi	r2,0
    e7e8:	10806304 	addi	r2,r2,396
    e7ec:	20800726 	beq	r4,r2,e80c <alt_load+0x80>
    {
      *to++ = *from++;
    e7f0:	21800104 	addi	r6,r4,4
    e7f4:	118dc83a 	sub	r6,r2,r6
    e7f8:	300cd0ba 	srli	r6,r6,2
    e7fc:	31800044 	addi	r6,r6,1
    e800:	318d883a 	add	r6,r6,r6
    e804:	318d883a 	add	r6,r6,r6
    e808:	00077cc0 	call	77cc <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e80c:	01000074 	movhi	r4,1
    e810:	01400074 	movhi	r5,1
    e814:	21005e04 	addi	r4,r4,376
    e818:	29405e04 	addi	r5,r5,376
    e81c:	21400a26 	beq	r4,r5,e848 <alt_load+0xbc>
  {
    while( to != end )
    e820:	00800074 	movhi	r2,1
    e824:	10824004 	addi	r2,r2,2304
    e828:	20800726 	beq	r4,r2,e848 <alt_load+0xbc>
    {
      *to++ = *from++;
    e82c:	21800104 	addi	r6,r4,4
    e830:	118dc83a 	sub	r6,r2,r6
    e834:	300cd0ba 	srli	r6,r6,2
    e838:	31800044 	addi	r6,r6,1
    e83c:	318d883a 	add	r6,r6,r6
    e840:	318d883a 	add	r6,r6,r6
    e844:	00077cc0 	call	77cc <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e848:	000f4240 	call	f424 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e84c:	dfc00017 	ldw	ra,0(sp)
    e850:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e854:	000f5701 	jmpi	f570 <alt_icache_flush_all>

0000e858 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e858:	defffe04 	addi	sp,sp,-8
    e85c:	dfc00115 	stw	ra,4(sp)
    e860:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e864:	20000e16 	blt	r4,zero,e8a0 <lseek+0x48>
    e868:	21000324 	muli	r4,r4,12
    e86c:	00800074 	movhi	r2,1
    e870:	10846904 	addi	r2,r2,4516
    e874:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    e878:	20000926 	beq	r4,zero,e8a0 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e87c:	20800017 	ldw	r2,0(r4)
    e880:	10800717 	ldw	r2,28(r2)
    e884:	10000d26 	beq	r2,zero,e8bc <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    e888:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    e88c:	10000f16 	blt	r2,zero,e8cc <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    e890:	dfc00117 	ldw	ra,4(sp)
    e894:	dc000017 	ldw	r16,0(sp)
    e898:	dec00204 	addi	sp,sp,8
    e89c:	f800283a 	ret
    e8a0:	04001444 	movi	r16,81
    e8a4:	d0a00d17 	ldw	r2,-32716(gp)
    e8a8:	10000626 	beq	r2,zero,e8c4 <lseek+0x6c>
    e8ac:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    e8b0:	14000015 	stw	r16,0(r2)
    rc = -1;
    e8b4:	00bfffc4 	movi	r2,-1
  }

  return rc;
    e8b8:	003ff506 	br	e890 <__alt_data_end+0xff00e890>
    e8bc:	04002184 	movi	r16,134
    e8c0:	003ff806 	br	e8a4 <__alt_data_end+0xff00e8a4>
    e8c4:	d0a6dc04 	addi	r2,gp,-25744
    e8c8:	003ff906 	br	e8b0 <__alt_data_end+0xff00e8b0>
    e8cc:	00a1c83a 	sub	r16,zero,r2
    e8d0:	003ff406 	br	e8a4 <__alt_data_end+0xff00e8a4>

0000e8d4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e8d4:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e8d8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e8dc:	dfc00115 	stw	ra,4(sp)
    e8e0:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e8e4:	000eba80 	call	eba8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e8e8:	000ebc80 	call	ebc8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e8ec:	01800074 	movhi	r6,1
    e8f0:	31823c04 	addi	r6,r6,2288
    e8f4:	300b883a 	mov	r5,r6
    e8f8:	3009883a 	mov	r4,r6
    e8fc:	000f6700 	call	f670 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e900:	000f4a80 	call	f4a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e904:	01000074 	movhi	r4,1
    e908:	213d4304 	addi	r4,r4,-2804
    e90c:	000fc540 	call	fc54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e910:	d1a6e017 	ldw	r6,-25728(gp)
    e914:	d166e117 	ldw	r5,-25724(gp)
    e918:	d126e217 	ldw	r4,-25720(gp)
    e91c:	0000e4c0 	call	e4c <main>
  close(STDOUT_FILENO);
    e920:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e924:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    e928:	000e5cc0 	call	e5cc <close>
  exit (result);
    e92c:	8009883a 	mov	r4,r16
    e930:	000fc680 	call	fc68 <exit>

0000e934 <__malloc_lock>:
    e934:	f800283a 	ret

0000e938 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e938:	f800283a 	ret

0000e93c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e93c:	defffe04 	addi	sp,sp,-8
    e940:	dfc00115 	stw	ra,4(sp)
    e944:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e948:	20002116 	blt	r4,zero,e9d0 <read+0x94>
    e94c:	21000324 	muli	r4,r4,12
    e950:	00800074 	movhi	r2,1
    e954:	10846904 	addi	r2,r2,4516
    e958:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e95c:	20001c26 	beq	r4,zero,e9d0 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e960:	20800217 	ldw	r2,8(r4)
    e964:	00c00044 	movi	r3,1
    e968:	108000cc 	andi	r2,r2,3
    e96c:	10c00a26 	beq	r2,r3,e998 <read+0x5c>
        (fd->dev->read))
    e970:	20800017 	ldw	r2,0(r4)
    e974:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e978:	10000726 	beq	r2,zero,e998 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e97c:	103ee83a 	callr	r2
    e980:	1021883a 	mov	r16,r2
    e984:	10000b16 	blt	r2,zero,e9b4 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    e988:	dfc00117 	ldw	ra,4(sp)
    e98c:	dc000017 	ldw	r16,0(sp)
    e990:	dec00204 	addi	sp,sp,8
    e994:	f800283a 	ret
    e998:	d0a00d17 	ldw	r2,-32716(gp)
    e99c:	10001326 	beq	r2,zero,e9ec <read+0xb0>
    e9a0:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    e9a4:	00c00344 	movi	r3,13
    e9a8:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    e9ac:	00bfffc4 	movi	r2,-1
    e9b0:	003ff506 	br	e988 <__alt_data_end+0xff00e988>
    e9b4:	d0a00d17 	ldw	r2,-32716(gp)
    e9b8:	10000e26 	beq	r2,zero,e9f4 <read+0xb8>
    e9bc:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    e9c0:	0421c83a 	sub	r16,zero,r16
    e9c4:	14000015 	stw	r16,0(r2)
          return -1;
    e9c8:	00bfffc4 	movi	r2,-1
    e9cc:	003fee06 	br	e988 <__alt_data_end+0xff00e988>
    e9d0:	d0a00d17 	ldw	r2,-32716(gp)
    e9d4:	10000926 	beq	r2,zero,e9fc <read+0xc0>
    e9d8:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e9dc:	00c01444 	movi	r3,81
    e9e0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    e9e4:	00bfffc4 	movi	r2,-1
    e9e8:	003fe706 	br	e988 <__alt_data_end+0xff00e988>
    e9ec:	d0a6dc04 	addi	r2,gp,-25744
    e9f0:	003fec06 	br	e9a4 <__alt_data_end+0xff00e9a4>
    e9f4:	d0a6dc04 	addi	r2,gp,-25744
    e9f8:	003ff106 	br	e9c0 <__alt_data_end+0xff00e9c0>
    e9fc:	d0a6dc04 	addi	r2,gp,-25744
    ea00:	003ff606 	br	e9dc <__alt_data_end+0xff00e9dc>

0000ea04 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    ea04:	00800084 	movi	r2,2
    ea08:	1100060e 	bge	r2,r4,ea24 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    ea0c:	21000324 	muli	r4,r4,12
    ea10:	00800074 	movhi	r2,1
    ea14:	10846904 	addi	r2,r2,4516
    ea18:	1109883a 	add	r4,r2,r4
    ea1c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    ea20:	20000015 	stw	zero,0(r4)
    ea24:	f800283a 	ret

0000ea28 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea28:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea2c:	00bfff84 	movi	r2,-2
    ea30:	2884703a 	and	r2,r5,r2
    ea34:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea38:	d0a00e17 	ldw	r2,-32712(gp)
    ea3c:	00ffff04 	movi	r3,-4
    ea40:	108000c4 	addi	r2,r2,3
    ea44:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ea48:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ea4c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ea50:	1109883a 	add	r4,r2,r4
    ea54:	18c00004 	addi	r3,r3,0
    ea58:	19000336 	bltu	r3,r4,ea68 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    ea5c:	d1200e15 	stw	r4,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea60:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    ea64:	f800283a 	ret
    ea68:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ea6c:	00bfffc4 	movi	r2,-1
    ea70:	f800283a 	ret

0000ea74 <alt_uncached_free>:
void 
alt_uncached_free(volatile void* ptr)
{
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  free((void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK));
    ea74:	00a00034 	movhi	r2,32768
    ea78:	10bfffc4 	addi	r2,r2,-1
    ea7c:	2088703a 	and	r4,r4,r2
    ea80:	0001c981 	jmpi	1c98 <free>

0000ea84 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ea84:	defffd04 	addi	sp,sp,-12
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ea88:	210007c4 	addi	r4,r4,31
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ea8c:	dc000015 	stw	r16,0(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ea90:	2020d17a 	srli	r16,r4,5

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    ea94:	01000804 	movi	r4,32
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    ea98:	dfc00215 	stw	ra,8(sp)
  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
    ea9c:	8020917a 	slli	r16,r16,5
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
    eaa0:	dc400115 	stw	r17,4(sp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
    eaa4:	800b883a 	mov	r5,r16
    eaa8:	000fca00 	call	fca0 <memalign>

  if (ptr == NULL) {
    eaac:	10000a26 	beq	r2,zero,ead8 <alt_uncached_malloc+0x54>
    return NULL; /* Out of memory */
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
    eab0:	1009883a 	mov	r4,r2
    eab4:	800b883a 	mov	r5,r16
    eab8:	1023883a 	mov	r17,r2
    eabc:	000f3e40 	call	f3e4 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
    eac0:	88a00034 	orhi	r2,r17,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
    eac4:	dfc00217 	ldw	ra,8(sp)
    eac8:	dc400117 	ldw	r17,4(sp)
    eacc:	dc000017 	ldw	r16,0(sp)
    ead0:	dec00304 	addi	sp,sp,12
    ead4:	f800283a 	ret
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);

  if (ptr == NULL) {
    return NULL; /* Out of memory */
    ead8:	0005883a 	mov	r2,zero
    eadc:	003ff906 	br	eac4 <__alt_data_end+0xff00eac4>

0000eae0 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    eae0:	000f36c1 	jmpi	f36c <alt_busy_sleep>

0000eae4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    eae4:	defffe04 	addi	sp,sp,-8
    eae8:	dfc00115 	stw	ra,4(sp)
    eaec:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eaf0:	20002216 	blt	r4,zero,eb7c <write+0x98>
    eaf4:	21000324 	muli	r4,r4,12
    eaf8:	00800074 	movhi	r2,1
    eafc:	10846904 	addi	r2,r2,4516
    eb00:	2089883a 	add	r4,r4,r2
  
  if (fd)
    eb04:	20001d26 	beq	r4,zero,eb7c <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    eb08:	20800217 	ldw	r2,8(r4)
    eb0c:	108000cc 	andi	r2,r2,3
    eb10:	10000a26 	beq	r2,zero,eb3c <write+0x58>
    eb14:	20800017 	ldw	r2,0(r4)
    eb18:	10800617 	ldw	r2,24(r2)
    eb1c:	10000726 	beq	r2,zero,eb3c <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    eb20:	103ee83a 	callr	r2
    eb24:	1021883a 	mov	r16,r2
    eb28:	10000d16 	blt	r2,zero,eb60 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    eb2c:	dfc00117 	ldw	ra,4(sp)
    eb30:	dc000017 	ldw	r16,0(sp)
    eb34:	dec00204 	addi	sp,sp,8
    eb38:	f800283a 	ret
    eb3c:	d0a00d17 	ldw	r2,-32716(gp)
    eb40:	10000526 	beq	r2,zero,eb58 <write+0x74>
    eb44:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    eb48:	00c00344 	movi	r3,13
    eb4c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    eb50:	00bfffc4 	movi	r2,-1
    eb54:	003ff506 	br	eb2c <__alt_data_end+0xff00eb2c>
    eb58:	d0a6dc04 	addi	r2,gp,-25744
    eb5c:	003ffa06 	br	eb48 <__alt_data_end+0xff00eb48>
    eb60:	d0a00d17 	ldw	r2,-32716(gp)
    eb64:	10000c26 	beq	r2,zero,eb98 <write+0xb4>
    eb68:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    eb6c:	0421c83a 	sub	r16,zero,r16
    eb70:	14000015 	stw	r16,0(r2)
        return -1;
    eb74:	00bfffc4 	movi	r2,-1
    eb78:	003fec06 	br	eb2c <__alt_data_end+0xff00eb2c>
    eb7c:	d0a00d17 	ldw	r2,-32716(gp)
    eb80:	10000726 	beq	r2,zero,eba0 <write+0xbc>
    eb84:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    eb88:	00c01444 	movi	r3,81
    eb8c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eb90:	00bfffc4 	movi	r2,-1
    eb94:	003fe506 	br	eb2c <__alt_data_end+0xff00eb2c>
    eb98:	d0a6dc04 	addi	r2,gp,-25744
    eb9c:	003ff306 	br	eb6c <__alt_data_end+0xff00eb6c>
    eba0:	d0a6dc04 	addi	r2,gp,-25744
    eba4:	003ff806 	br	eb88 <__alt_data_end+0xff00eb88>

0000eba8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    eba8:	deffff04 	addi	sp,sp,-4
    ebac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ebb0:	000fa140 	call	fa14 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ebb4:	00800044 	movi	r2,1
    ebb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ebbc:	dfc00017 	ldw	ra,0(sp)
    ebc0:	dec00104 	addi	sp,sp,4
    ebc4:	f800283a 	ret

0000ebc8 <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ebc8:	00804034 	movhi	r2,256
    ebcc:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ebd0:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ebd4:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ebd8:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ebdc:	0080bef4 	movhi	r2,763
    ebe0:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ebe4:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ebe8:	01c0fa04 	movi	r7,1000
    ebec:	21040804 	addi	r4,r4,4128
    ebf0:	01800104 	movi	r6,4
    ebf4:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ebf8:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ebfc:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ec00:	8404dd04 	addi	r16,r16,4980
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ec04:	d0a6e315 	stw	r2,-25716(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ec08:	000f22c0 	call	f22c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ec0c:	8009883a 	mov	r4,r16
    ec10:	000b883a 	mov	r5,zero
    ec14:	000d883a 	mov	r6,zero
    ec18:	000edc40 	call	edc4 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ec1c:	d1600904 	addi	r5,gp,-32732
    ec20:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    ec24:	dfc00117 	ldw	ra,4(sp)
    ec28:	dc000017 	ldw	r16,0(sp)
    ec2c:	dec00204 	addi	sp,sp,8
    ec30:	000f43c1 	jmpi	f43c <alt_dev_llist_insert>

0000ec34 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ec34:	20800017 	ldw	r2,0(r4)
    ec38:	21c00217 	ldw	r7,8(r4)
    ec3c:	11000a04 	addi	r4,r2,40
    ec40:	000eefc1 	jmpi	eefc <altera_avalon_jtag_uart_read>

0000ec44 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ec44:	20800017 	ldw	r2,0(r4)
    ec48:	21c00217 	ldw	r7,8(r4)
    ec4c:	11000a04 	addi	r4,r2,40
    ec50:	000f0501 	jmpi	f050 <altera_avalon_jtag_uart_write>

0000ec54 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ec54:	20800017 	ldw	r2,0(r4)
    ec58:	21400217 	ldw	r5,8(r4)
    ec5c:	11000a04 	addi	r4,r2,40
    ec60:	000ee3c1 	jmpi	ee3c <altera_avalon_jtag_uart_close>

0000ec64 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ec64:	21000017 	ldw	r4,0(r4)
    ec68:	21000a04 	addi	r4,r4,40
    ec6c:	000ee881 	jmpi	ee88 <altera_avalon_jtag_uart_ioctl>

0000ec70 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ec70:	20800017 	ldw	r2,0(r4)
    ec74:	10800104 	addi	r2,r2,4
    ec78:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ec7c:	18c1000c 	andi	r3,r3,1024
    ec80:	1800081e 	bne	r3,zero,eca4 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ec84:	20800917 	ldw	r2,36(r4)
    ec88:	00e00034 	movhi	r3,32768
    ec8c:	18ffff04 	addi	r3,r3,-4
    ec90:	18800236 	bltu	r3,r2,ec9c <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    ec94:	10800044 	addi	r2,r2,1
    ec98:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ec9c:	d0a6e717 	ldw	r2,-25700(gp)
    eca0:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    eca4:	20c00817 	ldw	r3,32(r4)
    eca8:	18c10014 	ori	r3,r3,1024
    ecac:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ecb0:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ecb4:	d0a6e717 	ldw	r2,-25700(gp)
    ecb8:	f800283a 	ret

0000ecbc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    ecbc:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ecc0:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ecc4:	02bfff44 	movi	r10,-3
    ecc8:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eccc:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ecd0:	3880c00c 	andi	r2,r7,768
    ecd4:	10003426 	beq	r2,zero,eda8 <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    ecd8:	3880400c 	andi	r2,r7,256
    ecdc:	10001726 	beq	r2,zero,ed3c <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ece0:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ece4:	20c00b17 	ldw	r3,44(r4)
    ece8:	10800044 	addi	r2,r2,1
    ecec:	1081ffcc 	andi	r2,r2,2047
    ecf0:	18800d1e 	bne	r3,r2,ed28 <altera_avalon_jtag_uart_irq+0x6c>
    ecf4:	00002d06 	br	edac <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ecf8:	20800a17 	ldw	r2,40(r4)
    ecfc:	2085883a 	add	r2,r4,r2
    ed00:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed04:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    ed08:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed0c:	10800044 	addi	r2,r2,1
    ed10:	1081ffcc 	andi	r2,r2,2047
    ed14:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed18:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ed1c:	10800044 	addi	r2,r2,1
    ed20:	1081ffcc 	andi	r2,r2,2047
    ed24:	11400326 	beq	r2,r5,ed34 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ed28:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ed2c:	18a0000c 	andi	r2,r3,32768
    ed30:	103ff11e 	bne	r2,zero,ecf8 <__alt_data_end+0xff00ecf8>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ed34:	18ffffec 	andhi	r3,r3,65535
    ed38:	18001c1e 	bne	r3,zero,edac <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ed3c:	3880800c 	andi	r2,r7,512
    ed40:	103fe226 	beq	r2,zero,eccc <__alt_data_end+0xff00eccc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ed44:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    ed48:	38000b1e 	bne	r7,zero,ed78 <altera_avalon_jtag_uart_irq+0xbc>
    ed4c:	003fdf06 	br	eccc <__alt_data_end+0xff00eccc>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ed50:	20800d17 	ldw	r2,52(r4)
    ed54:	2085883a 	add	r2,r4,r2
    ed58:	10820e07 	ldb	r2,2104(r2)
    ed5c:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed60:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ed64:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ed68:	10800044 	addi	r2,r2,1
    ed6c:	1081ffcc 	andi	r2,r2,2047
    ed70:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ed74:	383fd526 	beq	r7,zero,eccc <__alt_data_end+0xff00eccc>
    ed78:	20c00d17 	ldw	r3,52(r4)
    ed7c:	20800c17 	ldw	r2,48(r4)
    ed80:	18bff31e 	bne	r3,r2,ed50 <__alt_data_end+0xff00ed50>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ed84:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ed88:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ed8c:	1284703a 	and	r2,r2,r10
    ed90:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ed94:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ed98:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ed9c:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    eda0:	3880c00c 	andi	r2,r7,768
    eda4:	103fcc1e 	bne	r2,zero,ecd8 <__alt_data_end+0xff00ecd8>
    eda8:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    edac:	20800817 	ldw	r2,32(r4)
    edb0:	1244703a 	and	r2,r2,r9
    edb4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    edb8:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    edbc:	40800037 	ldwio	r2,0(r8)
    edc0:	003fde06 	br	ed3c <__alt_data_end+0xff00ed3c>

0000edc4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    edc4:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    edc8:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    edcc:	dc000115 	stw	r16,4(sp)
    edd0:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    edd4:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    edd8:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eddc:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ede0:	2809883a 	mov	r4,r5
    ede4:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ede8:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    edec:	01800074 	movhi	r6,1
    edf0:	31bb2f04 	addi	r6,r6,-4932
    edf4:	800f883a 	mov	r7,r16
    edf8:	d8000015 	stw	zero,0(sp)
    edfc:	000f57c0 	call	f57c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ee00:	d166e717 	ldw	r5,-25700(gp)
    ee04:	01800074 	movhi	r6,1
    ee08:	31bb1c04 	addi	r6,r6,-5008
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ee0c:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ee10:	800f883a 	mov	r7,r16
    ee14:	81000204 	addi	r4,r16,8
    ee18:	000f2ec0 	call	f2ec <alt_alarm_start>
    ee1c:	1000030e 	bge	r2,zero,ee2c <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ee20:	00a00034 	movhi	r2,32768
    ee24:	10bfffc4 	addi	r2,r2,-1
    ee28:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ee2c:	dfc00217 	ldw	ra,8(sp)
    ee30:	dc000117 	ldw	r16,4(sp)
    ee34:	dec00304 	addi	sp,sp,12
    ee38:	f800283a 	ret

0000ee3c <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    ee3c:	2890000c 	andi	r2,r5,16384
    ee40:	21c00c17 	ldw	r7,48(r4)
    ee44:	10000426 	beq	r2,zero,ee58 <altera_avalon_jtag_uart_close+0x1c>
    ee48:	00000606 	br	ee64 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ee4c:	21800917 	ldw	r6,36(r4)
    ee50:	20c00117 	ldw	r3,4(r4)
    ee54:	30c00a2e 	bgeu	r6,r3,ee80 <altera_avalon_jtag_uart_close+0x44>
    ee58:	20c00d17 	ldw	r3,52(r4)
    ee5c:	38fffb1e 	bne	r7,r3,ee4c <__alt_data_end+0xff00ee4c>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    ee60:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ee64:	20800d17 	ldw	r2,52(r4)
    ee68:	11c00526 	beq	r2,r7,ee80 <altera_avalon_jtag_uart_close+0x44>
    ee6c:	20c00917 	ldw	r3,36(r4)
    ee70:	20800117 	ldw	r2,4(r4)
    ee74:	1880022e 	bgeu	r3,r2,ee80 <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    ee78:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    ee7c:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ee80:	0005883a 	mov	r2,zero
    ee84:	f800283a 	ret

0000ee88 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    ee88:	009a8044 	movi	r2,27137
    ee8c:	28800d26 	beq	r5,r2,eec4 <altera_avalon_jtag_uart_ioctl+0x3c>
    ee90:	009a8084 	movi	r2,27138
    ee94:	2880091e 	bne	r5,r2,eebc <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ee98:	21400117 	ldw	r5,4(r4)
    ee9c:	00a00034 	movhi	r2,32768
    eea0:	10bfffc4 	addi	r2,r2,-1
    eea4:	28800526 	beq	r5,r2,eebc <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    eea8:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    eeac:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    eeb0:	1947803a 	cmpltu	r3,r3,r5
    eeb4:	30c00015 	stw	r3,0(r6)
    eeb8:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    eebc:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    eec0:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    eec4:	20c00117 	ldw	r3,4(r4)
    eec8:	00a00034 	movhi	r2,32768
    eecc:	10bfffc4 	addi	r2,r2,-1
    eed0:	18bffa26 	beq	r3,r2,eebc <__alt_data_end+0xff00eebc>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    eed4:	30800017 	ldw	r2,0(r6)
    eed8:	01600034 	movhi	r5,32768
    eedc:	297fff04 	addi	r5,r5,-4
    eee0:	10ffff84 	addi	r3,r2,-2
    eee4:	28c0022e 	bgeu	r5,r3,eef0 <altera_avalon_jtag_uart_ioctl+0x68>
    eee8:	00a00034 	movhi	r2,32768
    eeec:	10bfff84 	addi	r2,r2,-2
    eef0:	20800115 	stw	r2,4(r4)
      rc = 0;
    eef4:	0005883a 	mov	r2,zero
    eef8:	f800283a 	ret

0000eefc <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    eefc:	01804e0e 	bge	zero,r6,f038 <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ef00:	defff504 	addi	sp,sp,-44
    ef04:	dc000115 	stw	r16,4(sp)
    ef08:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ef0c:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ef10:	dd800715 	stw	r22,28(sp)
    ef14:	dd400615 	stw	r21,24(sp)
    ef18:	dd000515 	stw	r20,20(sp)
    ef1c:	dcc00415 	stw	r19,16(sp)
    ef20:	dc800315 	stw	r18,12(sp)
    ef24:	dfc00a15 	stw	ra,40(sp)
    ef28:	df000915 	stw	fp,36(sp)
    ef2c:	ddc00815 	stw	r23,32(sp)
    ef30:	dc400215 	stw	r17,8(sp)
    ef34:	3027883a 	mov	r19,r6
    ef38:	2025883a 	mov	r18,r4
    ef3c:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    ef40:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ef44:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef48:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    ef4c:	b02f883a 	mov	r23,r22
    ef50:	00000a06 	br	ef7c <altera_avalon_jtag_uart_read+0x80>
    ef54:	9880012e 	bgeu	r19,r2,ef5c <altera_avalon_jtag_uart_read+0x60>
    ef58:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef5c:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef60:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef64:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef68:	00077cc0 	call	77cc <memcpy>
      ptr   += n;
      space -= n;
    ef6c:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ef70:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    ef74:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    ef78:	04c0080e 	bge	zero,r19,ef9c <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    ef7c:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    ef80:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    ef84:	e4000136 	bltu	fp,r16,ef8c <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    ef88:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    ef8c:	a40b883a 	add	r5,r20,r16
    ef90:	b809883a 	mov	r4,r23
    ef94:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    ef98:	103fee1e 	bne	r2,zero,ef54 <__alt_data_end+0xff00ef54>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    ef9c:	bd800d1e 	bne	r23,r22,efd4 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    efa0:	d8800017 	ldw	r2,0(sp)
    efa4:	10000426 	beq	r2,zero,efb8 <altera_avalon_jtag_uart_read+0xbc>
    efa8:	00002106 	br	f030 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    efac:	90c00917 	ldw	r3,36(r18)
    efb0:	90800117 	ldw	r2,4(r18)
    efb4:	1880022e 	bgeu	r3,r2,efc0 <altera_avalon_jtag_uart_read+0xc4>
    efb8:	90800a17 	ldw	r2,40(r18)
    efbc:	e0bffb26 	beq	fp,r2,efac <__alt_data_end+0xff00efac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    efc0:	90800a17 	ldw	r2,40(r18)
    efc4:	e0800126 	beq	fp,r2,efcc <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    efc8:	04ffe016 	blt	zero,r19,ef4c <__alt_data_end+0xff00ef4c>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    efcc:	00bffec4 	movi	r2,-5
    efd0:	00000b06 	br	f000 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    efd4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    efd8:	00bfff84 	movi	r2,-2
    efdc:	2084703a 	and	r2,r4,r2
    efe0:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    efe4:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    efe8:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    efec:	10800054 	ori	r2,r2,1
    eff0:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eff4:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eff8:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    effc:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    f000:	dfc00a17 	ldw	ra,40(sp)
    f004:	df000917 	ldw	fp,36(sp)
    f008:	ddc00817 	ldw	r23,32(sp)
    f00c:	dd800717 	ldw	r22,28(sp)
    f010:	dd400617 	ldw	r21,24(sp)
    f014:	dd000517 	ldw	r20,20(sp)
    f018:	dcc00417 	ldw	r19,16(sp)
    f01c:	dc800317 	ldw	r18,12(sp)
    f020:	dc400217 	ldw	r17,8(sp)
    f024:	dc000117 	ldw	r16,4(sp)
    f028:	dec00b04 	addi	sp,sp,44
    f02c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f030:	00bffd44 	movi	r2,-11
    f034:	003ff206 	br	f000 <__alt_data_end+0xff00f000>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    f038:	39d0000c 	andi	r7,r7,16384
    f03c:	3800021e 	bne	r7,zero,f048 <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    f040:	00bffec4 	movi	r2,-5
}
    f044:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f048:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    f04c:	f800283a 	ret

0000f050 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f050:	defff604 	addi	sp,sp,-40
    f054:	dc000015 	stw	r16,0(sp)
    f058:	dfc00915 	stw	ra,36(sp)
    f05c:	df000815 	stw	fp,32(sp)
    f060:	ddc00715 	stw	r23,28(sp)
    f064:	dd800615 	stw	r22,24(sp)
    f068:	dd400515 	stw	r21,20(sp)
    f06c:	dd000415 	stw	r20,16(sp)
    f070:	dcc00315 	stw	r19,12(sp)
    f074:	dc800215 	stw	r18,8(sp)
    f078:	dc400115 	stw	r17,4(sp)
    f07c:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f080:	01804d0e 	bge	zero,r6,f1b8 <altera_avalon_jtag_uart_write+0x168>
    f084:	302d883a 	mov	r22,r6
    f088:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f08c:	3c50000c 	andi	r17,r7,16384
    f090:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f094:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f098:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f09c:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    f0a0:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    f0a4:	e0c03a2e 	bgeu	fp,r3,f190 <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    f0a8:	1dffffc4 	addi	r23,r3,-1
    f0ac:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    f0b0:	b800131e 	bne	r23,zero,f100 <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0b4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0b8:	24c4703a 	and	r2,r4,r19
    f0bc:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0c0:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0c4:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f0c8:	10800094 	ori	r2,r2,2
    f0cc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0d0:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f0d4:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f0d8:	8800341e 	bne	r17,zero,f1ac <altera_avalon_jtag_uart_write+0x15c>
    f0dc:	81000917 	ldw	r4,36(r16)
    f0e0:	00000206 	br	f0ec <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f0e4:	80800117 	ldw	r2,4(r16)
    f0e8:	2080022e 	bgeu	r4,r2,f0f4 <altera_avalon_jtag_uart_write+0xa4>
    f0ec:	80800d17 	ldw	r2,52(r16)
    f0f0:	18bffc26 	beq	r3,r2,f0e4 <__alt_data_end+0xff00f0e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f0f4:	203fe926 	beq	r4,zero,f09c <__alt_data_end+0xff00f09c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f0f8:	ad00181e 	bne	r21,r20,f15c <altera_avalon_jtag_uart_write+0x10c>
    f0fc:	00003a06 	br	f1e8 <altera_avalon_jtag_uart_write+0x198>
    f100:	b5c0012e 	bgeu	r22,r23,f108 <altera_avalon_jtag_uart_write+0xb8>
    f104:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f108:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f10c:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f110:	a80b883a 	mov	r5,r21
    f114:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f118:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f11c:	00077cc0 	call	77cc <memcpy>
      ptr   += n;
      count -= n;
    f120:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f124:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f128:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f12c:	05bfdb16 	blt	zero,r22,f09c <__alt_data_end+0xff00f09c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f130:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f134:	00bfff84 	movi	r2,-2
    f138:	1884703a 	and	r2,r3,r2
    f13c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f140:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f144:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f148:	10800094 	ori	r2,r2,2
    f14c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f150:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f154:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f158:	a5402226 	beq	r20,r21,f1e4 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f15c:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f160:	dfc00917 	ldw	ra,36(sp)
    f164:	df000817 	ldw	fp,32(sp)
    f168:	ddc00717 	ldw	r23,28(sp)
    f16c:	dd800617 	ldw	r22,24(sp)
    f170:	dd400517 	ldw	r21,20(sp)
    f174:	dd000417 	ldw	r20,16(sp)
    f178:	dcc00317 	ldw	r19,12(sp)
    f17c:	dc800217 	ldw	r18,8(sp)
    f180:	dc400117 	ldw	r17,4(sp)
    f184:	dc000017 	ldw	r16,0(sp)
    f188:	dec00a04 	addi	sp,sp,40
    f18c:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f190:	18000326 	beq	r3,zero,f1a0 <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f194:	00820004 	movi	r2,2048
    f198:	172fc83a 	sub	r23,r2,fp
    f19c:	003fc406 	br	f0b0 <__alt_data_end+0xff00f0b0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f1a0:	0081ffc4 	movi	r2,2047
    f1a4:	172fc83a 	sub	r23,r2,fp
    f1a8:	003fc106 	br	f0b0 <__alt_data_end+0xff00f0b0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f1ac:	ad3feb1e 	bne	r21,r20,f15c <__alt_data_end+0xff00f15c>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f1b0:	00bffd44 	movi	r2,-11
    f1b4:	003fea06 	br	f160 <__alt_data_end+0xff00f160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1b8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1bc:	00bfff84 	movi	r2,-2
    f1c0:	1884703a 	and	r2,r3,r2
    f1c4:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1c8:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1cc:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1d0:	10800094 	ori	r2,r2,2
    f1d4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1d8:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1dc:	1801703a 	wrctl	status,r3
    f1e0:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f1e4:	883ff21e 	bne	r17,zero,f1b0 <__alt_data_end+0xff00f1b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f1e8:	00bffec4 	movi	r2,-5
    f1ec:	003fdc06 	br	f160 <__alt_data_end+0xff00f160>

0000f1f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f1f0:	defffe04 	addi	sp,sp,-8
    f1f4:	dfc00115 	stw	ra,4(sp)
    f1f8:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f1fc:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f200:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f204:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f208:	00bfff84 	movi	r2,-2
    f20c:	8084703a 	and	r2,r16,r2
    f210:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f214:	000f9200 	call	f920 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f218:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f21c:	dfc00117 	ldw	ra,4(sp)
    f220:	dc000017 	ldw	r16,0(sp)
    f224:	dec00204 	addi	sp,sp,8
    f228:	f800283a 	ret

0000f22c <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f22c:	d0e6e717 	ldw	r3,-25700(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f230:	defffe04 	addi	sp,sp,-8
    f234:	dfc00115 	stw	ra,4(sp)
    f238:	2005883a 	mov	r2,r4
    f23c:	2809883a 	mov	r4,r5
    f240:	300b883a 	mov	r5,r6
    f244:	1800011e 	bne	r3,zero,f24c <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f248:	d1e6e715 	stw	r7,-25700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f24c:	00c001c4 	movi	r3,7
    f250:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f254:	01800074 	movhi	r6,1
    f258:	31bc7c04 	addi	r6,r6,-3600
    f25c:	d8000015 	stw	zero,0(sp)
    f260:	100f883a 	mov	r7,r2
    f264:	000f57c0 	call	f57c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f268:	dfc00117 	ldw	ra,4(sp)
    f26c:	dec00204 	addi	sp,sp,8
    f270:	f800283a 	ret

0000f274 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f274:	d0e6e317 	ldw	r3,-25716(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f278:	d0a6e417 	ldw	r2,-25712(gp)

  if (!altera_avalon_timer_ts_freq)
    f27c:	18000a26 	beq	r3,zero,f2a8 <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f280:	10c00104 	addi	r3,r2,4
    f284:	01000204 	movi	r4,8
    f288:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f28c:	013fffd4 	movui	r4,65535
    f290:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f294:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f298:	00800104 	movi	r2,4
    f29c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f2a0:	0005883a 	mov	r2,zero
    f2a4:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f2a8:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f2ac:	f800283a 	ret

0000f2b0 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f2b0:	d0a6e317 	ldw	r2,-25716(gp)
    f2b4:	1000021e 	bne	r2,zero,f2c0 <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f2b8:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f2bc:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f2c0:	d0e6e417 	ldw	r3,-25712(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f2c4:	18800404 	addi	r2,r3,16
    f2c8:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f2cc:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f2d0:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f2d4:	1806943a 	slli	r3,r3,16
    f2d8:	10bfffcc 	andi	r2,r2,65535
    f2dc:	1884303a 	nor	r2,r3,r2
    f2e0:	f800283a 	ret

0000f2e4 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f2e4:	d0a6e317 	ldw	r2,-25716(gp)
    f2e8:	f800283a 	ret

0000f2ec <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f2ec:	d0a6e717 	ldw	r2,-25700(gp)
    f2f0:	10001a26 	beq	r2,zero,f35c <alt_alarm_start+0x70>
  {
    if (alarm)
    f2f4:	20001b26 	beq	r4,zero,f364 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f2f8:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f2fc:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f300:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f304:	00bfff84 	movi	r2,-2
    f308:	1884703a 	and	r2,r3,r2
    f30c:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f310:	d0a6e617 	ldw	r2,-25704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f314:	11800044 	addi	r6,r2,1
    f318:	314b883a 	add	r5,r6,r5
    f31c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f320:	28800b36 	bltu	r5,r2,f350 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f324:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f328:	d0a01004 	addi	r2,gp,-32704
    f32c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f330:	d0a01017 	ldw	r2,-32704(gp)
    f334:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f338:	d0a01017 	ldw	r2,-32704(gp)
  list->next           = entry;
    f33c:	d1201015 	stw	r4,-32704(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f340:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f344:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f348:	0005883a 	mov	r2,zero
    f34c:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f350:	00800044 	movi	r2,1
    f354:	20800405 	stb	r2,16(r4)
    f358:	003ff306 	br	f328 <__alt_data_end+0xff00f328>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f35c:	00bfde84 	movi	r2,-134
    f360:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f364:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f368:	f800283a 	ret

0000f36c <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f36c:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f370:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f374:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f378:	dc000015 	stw	r16,0(sp)
    f37c:	dfc00115 	stw	ra,4(sp)
    f380:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f384:	000bea80 	call	bea8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f388:	10001226 	beq	r2,zero,f3d4 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f38c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f390:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f394:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f398:	21000044 	addi	r4,r4,1
    f39c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f3a0:	297fffc4 	addi	r5,r5,-1
    f3a4:	283ffe1e 	bne	r5,zero,f3a0 <__alt_data_end+0xff00f3a0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f3a8:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f3ac:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f3b0:	18bffb16 	blt	r3,r2,f3a0 <__alt_data_end+0xff00f3a0>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f3b4:	8020913a 	slli	r16,r16,4
    f3b8:	843fffc4 	addi	r16,r16,-1
    f3bc:	803ffe1e 	bne	r16,zero,f3b8 <__alt_data_end+0xff00f3b8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f3c0:	0005883a 	mov	r2,zero
    f3c4:	dfc00117 	ldw	ra,4(sp)
    f3c8:	dc000017 	ldw	r16,0(sp)
    f3cc:	dec00204 	addi	sp,sp,8
    f3d0:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f3d4:	8020913a 	slli	r16,r16,4
    f3d8:	843fffc4 	addi	r16,r16,-1
    f3dc:	043ffe16 	blt	zero,r16,f3d8 <__alt_data_end+0xff00f3d8>
    f3e0:	003ff706 	br	f3c0 <__alt_data_end+0xff00f3c0>

0000f3e4 <alt_dcache_flush>:
void alt_dcache_flush (void* start, alt_u32 len)
{
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
    f3e4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f3e8:	2005883a 	mov	r2,r4
    f3ec:	2140092e 	bgeu	r4,r5,f414 <alt_dcache_flush+0x30>
  { 
    ALT_FLUSH_DATA(i); 
    f3f0:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
    f3f4:	10800804 	addi	r2,r2,32
    f3f8:	117ffd36 	bltu	r2,r5,f3f0 <__alt_data_end+0xff00f3f0>
    f3fc:	0104303a 	nor	r2,zero,r4
    f400:	1145883a 	add	r2,r2,r5
    f404:	1004d17a 	srli	r2,r2,5
    f408:	10800044 	addi	r2,r2,1
    f40c:	1004917a 	slli	r2,r2,5
    f410:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
    f414:	210007cc 	andi	r4,r4,31
    f418:	20000126 	beq	r4,zero,f420 <alt_dcache_flush+0x3c>
  {
    ALT_FLUSH_DATA(i);
    f41c:	1000001b 	flushda	0(r2)
    f420:	f800283a 	ret

0000f424 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f424:	0005883a 	mov	r2,zero
    f428:	00d00004 	movi	r3,16384
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    f42c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    f430:	10800804 	addi	r2,r2,32
    f434:	10fffd1e 	bne	r2,r3,f42c <__alt_data_end+0xff00f42c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    f438:	f800283a 	ret

0000f43c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f43c:	20000a26 	beq	r4,zero,f468 <alt_dev_llist_insert+0x2c>
    f440:	20800217 	ldw	r2,8(r4)
    f444:	10000826 	beq	r2,zero,f468 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f448:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f44c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f450:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f454:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f458:	28c00017 	ldw	r3,0(r5)
    f45c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f460:	29000015 	stw	r4,0(r5)
    f464:	f800283a 	ret
    f468:	d0a00d17 	ldw	r2,-32716(gp)
    f46c:	10000926 	beq	r2,zero,f494 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f470:	deffff04 	addi	sp,sp,-4
    f474:	dfc00015 	stw	ra,0(sp)
    f478:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f47c:	00c00584 	movi	r3,22
    f480:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f484:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f488:	dfc00017 	ldw	ra,0(sp)
    f48c:	dec00104 	addi	sp,sp,4
    f490:	f800283a 	ret
    f494:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f498:	00c00584 	movi	r3,22
    f49c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f4a0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f4a4:	f800283a 	ret

0000f4a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4a8:	defffc04 	addi	sp,sp,-16
    f4ac:	dc800215 	stw	r18,8(sp)
    f4b0:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4b4:	04800074 	movhi	r18,1
    f4b8:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f4bc:	dfc00315 	stw	ra,12(sp)
    f4c0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4c4:	84005d04 	addi	r16,r16,372
    f4c8:	94805e04 	addi	r18,r18,376
    f4cc:	84800936 	bltu	r16,r18,f4f4 <_do_ctors+0x4c>
    f4d0:	84a5c83a 	sub	r18,r16,r18
    f4d4:	9024d0ba 	srli	r18,r18,2
    f4d8:	0023883a 	mov	r17,zero
    f4dc:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f4e0:	80800017 	ldw	r2,0(r16)
    f4e4:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4e8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f4ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f4f0:	8cbffb1e 	bne	r17,r18,f4e0 <__alt_data_end+0xff00f4e0>
        (*ctor) (); 
}
    f4f4:	dfc00317 	ldw	ra,12(sp)
    f4f8:	dc800217 	ldw	r18,8(sp)
    f4fc:	dc400117 	ldw	r17,4(sp)
    f500:	dc000017 	ldw	r16,0(sp)
    f504:	dec00404 	addi	sp,sp,16
    f508:	f800283a 	ret

0000f50c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f50c:	defffc04 	addi	sp,sp,-16
    f510:	dc800215 	stw	r18,8(sp)
    f514:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f518:	04800074 	movhi	r18,1
    f51c:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f520:	dfc00315 	stw	ra,12(sp)
    f524:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f528:	84005d04 	addi	r16,r16,372
    f52c:	94805e04 	addi	r18,r18,376
    f530:	84800936 	bltu	r16,r18,f558 <_do_dtors+0x4c>
    f534:	84a5c83a 	sub	r18,r16,r18
    f538:	9024d0ba 	srli	r18,r18,2
    f53c:	0023883a 	mov	r17,zero
    f540:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f544:	80800017 	ldw	r2,0(r16)
    f548:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f54c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f550:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f554:	8cbffb1e 	bne	r17,r18,f544 <__alt_data_end+0xff00f544>
        (*dtor) (); 
}
    f558:	dfc00317 	ldw	ra,12(sp)
    f55c:	dc800217 	ldw	r18,8(sp)
    f560:	dc400117 	ldw	r17,4(sp)
    f564:	dc000017 	ldw	r16,0(sp)
    f568:	dec00404 	addi	sp,sp,16
    f56c:	f800283a 	ret

0000f570 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f570:	01440004 	movi	r5,4096
    f574:	0009883a 	mov	r4,zero
    f578:	000fb901 	jmpi	fb90 <alt_icache_flush>

0000f57c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f57c:	000f6081 	jmpi	f608 <alt_iic_isr_register>

0000f580 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f580:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f584:	00bfff84 	movi	r2,-2
    f588:	2084703a 	and	r2,r4,r2
    f58c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f590:	00c00044 	movi	r3,1
    f594:	d0a6e517 	ldw	r2,-25708(gp)
    f598:	194a983a 	sll	r5,r3,r5
    f59c:	288ab03a 	or	r5,r5,r2
    f5a0:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f5a4:	d0a6e517 	ldw	r2,-25708(gp)
    f5a8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5ac:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f5b0:	0005883a 	mov	r2,zero
    f5b4:	f800283a 	ret

0000f5b8 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f5b8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f5bc:	00bfff84 	movi	r2,-2
    f5c0:	2084703a 	and	r2,r4,r2
    f5c4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f5c8:	00ffff84 	movi	r3,-2
    f5cc:	d0a6e517 	ldw	r2,-25708(gp)
    f5d0:	194a183a 	rol	r5,r3,r5
    f5d4:	288a703a 	and	r5,r5,r2
    f5d8:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f5dc:	d0a6e517 	ldw	r2,-25708(gp)
    f5e0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5e4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f5e8:	0005883a 	mov	r2,zero
    f5ec:	f800283a 	ret

0000f5f0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f5f0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f5f4:	00800044 	movi	r2,1
    f5f8:	1144983a 	sll	r2,r2,r5
    f5fc:	10c4703a 	and	r2,r2,r3
}
    f600:	1004c03a 	cmpne	r2,r2,zero
    f604:	f800283a 	ret

0000f608 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f608:	00c007c4 	movi	r3,31
    f60c:	19401616 	blt	r3,r5,f668 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f610:	defffe04 	addi	sp,sp,-8
    f614:	dfc00115 	stw	ra,4(sp)
    f618:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f61c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f620:	00ffff84 	movi	r3,-2
    f624:	80c6703a 	and	r3,r16,r3
    f628:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f62c:	280490fa 	slli	r2,r5,3
    f630:	00c00074 	movhi	r3,1
    f634:	18cfde04 	addi	r3,r3,16248
    f638:	1885883a 	add	r2,r3,r2
    f63c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f640:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f644:	30000626 	beq	r6,zero,f660 <alt_iic_isr_register+0x58>
    f648:	000f5800 	call	f580 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f64c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f650:	dfc00117 	ldw	ra,4(sp)
    f654:	dc000017 	ldw	r16,0(sp)
    f658:	dec00204 	addi	sp,sp,8
    f65c:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f660:	000f5b80 	call	f5b8 <alt_ic_irq_disable>
    f664:	003ff906 	br	f64c <__alt_data_end+0xff00f64c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f668:	00bffa84 	movi	r2,-22
    f66c:	f800283a 	ret

0000f670 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f670:	defffd04 	addi	sp,sp,-12
    f674:	dc400115 	stw	r17,4(sp)
    f678:	dc000015 	stw	r16,0(sp)
    f67c:	2823883a 	mov	r17,r5
    f680:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f684:	01400044 	movi	r5,1
    f688:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f68c:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f690:	000f7740 	call	f774 <open>

  if (old >= 0)
    f694:	10000c16 	blt	r2,zero,f6c8 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f698:	10c00324 	muli	r3,r2,12
    f69c:	01400074 	movhi	r5,1
    f6a0:	29446904 	addi	r5,r5,4516
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f6a4:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6a8:	28c5883a 	add	r2,r5,r3
    f6ac:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f6b0:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6b4:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f6b8:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f6bc:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f6c0:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f6c4:	000ea040 	call	ea04 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f6c8:	01807fc4 	movi	r6,511
    f6cc:	000b883a 	mov	r5,zero
    f6d0:	8809883a 	mov	r4,r17
    f6d4:	000f7740 	call	f774 <open>

  if (old >= 0)
    f6d8:	10000c16 	blt	r2,zero,f70c <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f6dc:	10c00324 	muli	r3,r2,12
    f6e0:	01400074 	movhi	r5,1
    f6e4:	29446904 	addi	r5,r5,4516
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f6e8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6ec:	28c5883a 	add	r2,r5,r3
    f6f0:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f6f4:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f6f8:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f6fc:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f700:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f704:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f708:	000ea040 	call	ea04 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f70c:	01807fc4 	movi	r6,511
    f710:	01400044 	movi	r5,1
    f714:	8009883a 	mov	r4,r16
    f718:	000f7740 	call	f774 <open>

  if (old >= 0)
    f71c:	10001016 	blt	r2,zero,f760 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f720:	10c00324 	muli	r3,r2,12
    f724:	01400074 	movhi	r5,1
    f728:	29446904 	addi	r5,r5,4516
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f72c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f730:	28c5883a 	add	r2,r5,r3
    f734:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f738:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f73c:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f740:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f744:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f748:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f74c:	dfc00217 	ldw	ra,8(sp)
    f750:	dc400117 	ldw	r17,4(sp)
    f754:	dc000017 	ldw	r16,0(sp)
    f758:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f75c:	000ea041 	jmpi	ea04 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f760:	dfc00217 	ldw	ra,8(sp)
    f764:	dc400117 	ldw	r17,4(sp)
    f768:	dc000017 	ldw	r16,0(sp)
    f76c:	dec00304 	addi	sp,sp,12
    f770:	f800283a 	ret

0000f774 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f774:	defffa04 	addi	sp,sp,-24
    f778:	dc000015 	stw	r16,0(sp)
    f77c:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f780:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f784:	dc800215 	stw	r18,8(sp)
    f788:	dc400115 	stw	r17,4(sp)
    f78c:	dfc00515 	stw	ra,20(sp)
    f790:	dd000415 	stw	r20,16(sp)
    f794:	dcc00315 	stw	r19,12(sp)
    f798:	2023883a 	mov	r17,r4
    f79c:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f7a0:	000fa1c0 	call	fa1c <alt_find_dev>
    f7a4:	10004626 	beq	r2,zero,f8c0 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f7a8:	1009883a 	mov	r4,r2
    f7ac:	1029883a 	mov	r20,r2
    f7b0:	000fb400 	call	fb40 <alt_get_fd>
    f7b4:	1027883a 	mov	r19,r2
    f7b8:	1000090e 	bge	r2,zero,f7e0 <open+0x6c>
    f7bc:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f7c0:	9809883a 	mov	r4,r19
    f7c4:	000ea040 	call	ea04 <alt_release_fd>
    f7c8:	d0a00d17 	ldw	r2,-32716(gp)
    f7cc:	10004326 	beq	r2,zero,f8dc <open+0x168>
    f7d0:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f7d4:	14000015 	stw	r16,0(r2)
    return -1;
    f7d8:	00bfffc4 	movi	r2,-1
    f7dc:	00002e06 	br	f898 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f7e0:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f7e4:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f7e8:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f7ec:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f7f0:	10846904 	addi	r2,r2,4516

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f7f4:	80c6703a 	and	r3,r16,r3
    f7f8:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f7fc:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f800:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f804:	d2200817 	ldw	r8,-32736(gp)
    f808:	21c00017 	ldw	r7,0(r4)
    f80c:	11400204 	addi	r5,r2,8
    f810:	0007883a 	mov	r3,zero
    f814:	00000306 	br	f824 <open+0xb0>
    f818:	10800304 	addi	r2,r2,12
    f81c:	29400304 	addi	r5,r5,12
    f820:	40c01436 	bltu	r8,r3,f874 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f824:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f828:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f82c:	31fffa1e 	bne	r6,r7,f818 <__alt_data_end+0xff00f818>
    f830:	29800017 	ldw	r6,0(r5)
    f834:	303ff80e 	bge	r6,zero,f818 <__alt_data_end+0xff00f818>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f838:	20bff726 	beq	r4,r2,f818 <__alt_data_end+0xff00f818>
    f83c:	04000344 	movi	r16,13
    f840:	003fdf06 	br	f7c0 <__alt_data_end+0xff00f7c0>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f844:	1009883a 	mov	r4,r2
    f848:	000fb400 	call	fb40 <alt_get_fd>
    f84c:	1027883a 	mov	r19,r2
    f850:	103fda16 	blt	r2,zero,f7bc <__alt_data_end+0xff00f7bc>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f854:	99000324 	muli	r4,r19,12
    f858:	00800074 	movhi	r2,1
    f85c:	10846904 	addi	r2,r2,4516
    f860:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f864:	00900034 	movhi	r2,16384
    f868:	10bfffc4 	addi	r2,r2,-1
    f86c:	8084703a 	and	r2,r16,r2
    f870:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f874:	a0800317 	ldw	r2,12(r20)
    f878:	10000f26 	beq	r2,zero,f8b8 <open+0x144>
    f87c:	900f883a 	mov	r7,r18
    f880:	800d883a 	mov	r6,r16
    f884:	880b883a 	mov	r5,r17
    f888:	103ee83a 	callr	r2
    f88c:	1007883a 	mov	r3,r2
    f890:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f894:	18001316 	blt	r3,zero,f8e4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    f898:	dfc00517 	ldw	ra,20(sp)
    f89c:	dd000417 	ldw	r20,16(sp)
    f8a0:	dcc00317 	ldw	r19,12(sp)
    f8a4:	dc800217 	ldw	r18,8(sp)
    f8a8:	dc400117 	ldw	r17,4(sp)
    f8ac:	dc000017 	ldw	r16,0(sp)
    f8b0:	dec00604 	addi	sp,sp,24
    f8b4:	f800283a 	ret
    f8b8:	9805883a 	mov	r2,r19
    f8bc:	003ff606 	br	f898 <__alt_data_end+0xff00f898>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f8c0:	8809883a 	mov	r4,r17
    f8c4:	000fa940 	call	fa94 <alt_find_file>
    f8c8:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f8cc:	103fdd1e 	bne	r2,zero,f844 <__alt_data_end+0xff00f844>
    f8d0:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f8d4:	04ffffc4 	movi	r19,-1
    f8d8:	003fb906 	br	f7c0 <__alt_data_end+0xff00f7c0>
    f8dc:	d0a6dc04 	addi	r2,gp,-25744
    f8e0:	003fbc06 	br	f7d4 <__alt_data_end+0xff00f7d4>
    f8e4:	00e1c83a 	sub	r16,zero,r3
    f8e8:	003fb506 	br	f7c0 <__alt_data_end+0xff00f7c0>

0000f8ec <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f8ec:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f8f0:	00bfff84 	movi	r2,-2
    f8f4:	1884703a 	and	r2,r3,r2
    f8f8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f8fc:	21400117 	ldw	r5,4(r4)
    f900:	20800017 	ldw	r2,0(r4)
    f904:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    f908:	21400117 	ldw	r5,4(r4)
    f90c:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f910:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    f914:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f918:	1801703a 	wrctl	status,r3
    f91c:	f800283a 	ret

0000f920 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f920:	d0a6e617 	ldw	r2,-25704(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f924:	defffa04 	addi	sp,sp,-24
    f928:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f92c:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f930:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f934:	dc800215 	stw	r18,8(sp)
    f938:	dfc00515 	stw	ra,20(sp)
    f93c:	dd000415 	stw	r20,16(sp)
    f940:	dcc00315 	stw	r19,12(sp)
    f944:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f948:	d4a01004 	addi	r18,gp,-32704

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f94c:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f950:	84801126 	beq	r16,r18,f998 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    f954:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f958:	053fff84 	movi	r20,-2
    f95c:	00000606 	br	f978 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    f960:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f964:	d0e6e617 	ldw	r3,-25704(gp)
    f968:	80800217 	ldw	r2,8(r16)
    f96c:	1880122e 	bgeu	r3,r2,f9b8 <alt_tick+0x98>
    f970:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f974:	8c800826 	beq	r17,r18,f998 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f978:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    f97c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f980:	103ff826 	beq	r2,zero,f964 <__alt_data_end+0xff00f964>
    f984:	d0a6e617 	ldw	r2,-25704(gp)
    f988:	103ff526 	beq	r2,zero,f960 <__alt_data_end+0xff00f960>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f98c:	d0a6e617 	ldw	r2,-25704(gp)
    f990:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f994:	8cbff81e 	bne	r17,r18,f978 <__alt_data_end+0xff00f978>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    f998:	dfc00517 	ldw	ra,20(sp)
    f99c:	dd000417 	ldw	r20,16(sp)
    f9a0:	dcc00317 	ldw	r19,12(sp)
    f9a4:	dc800217 	ldw	r18,8(sp)
    f9a8:	dc400117 	ldw	r17,4(sp)
    f9ac:	dc000017 	ldw	r16,0(sp)
    f9b0:	dec00604 	addi	sp,sp,24
    f9b4:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    f9b8:	80800317 	ldw	r2,12(r16)
    f9bc:	81000517 	ldw	r4,20(r16)
    f9c0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f9c4:	10000726 	beq	r2,zero,f9e4 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f9c8:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f9cc:	d126e617 	ldw	r4,-25704(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    f9d0:	10c5883a 	add	r2,r2,r3
    f9d4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f9d8:	113fe52e 	bgeu	r2,r4,f970 <__alt_data_end+0xff00f970>
        {
          alarm->rollover = 1;
    f9dc:	84c00405 	stb	r19,16(r16)
    f9e0:	003fe306 	br	f970 <__alt_data_end+0xff00f970>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9e4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9e8:	1506703a 	and	r3,r2,r20
    f9ec:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f9f0:	81000117 	ldw	r4,4(r16)
    f9f4:	80c00017 	ldw	r3,0(r16)
    f9f8:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    f9fc:	81000117 	ldw	r4,4(r16)
    fa00:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fa04:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    fa08:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fa0c:	1001703a 	wrctl	status,r2
    fa10:	003fd706 	br	f970 <__alt_data_end+0xff00f970>

0000fa14 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    fa14:	000170fa 	wrctl	ienable,zero
    fa18:	f800283a 	ret

0000fa1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa1c:	defffb04 	addi	sp,sp,-20
    fa20:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    fa24:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fa28:	dc400115 	stw	r17,4(sp)
    fa2c:	2823883a 	mov	r17,r5
    fa30:	dcc00315 	stw	r19,12(sp)
    fa34:	dfc00415 	stw	ra,16(sp)
    fa38:	dc800215 	stw	r18,8(sp)
    fa3c:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    fa40:	000264c0 	call	264c <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa44:	8c000b26 	beq	r17,r16,fa74 <alt_find_dev+0x58>
    fa48:	14800044 	addi	r18,r2,1
    fa4c:	00000206 	br	fa58 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fa50:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fa54:	8c000726 	beq	r17,r16,fa74 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fa58:	81000217 	ldw	r4,8(r16)
    fa5c:	900d883a 	mov	r6,r18
    fa60:	980b883a 	mov	r5,r19
    fa64:	000fe500 	call	fe50 <memcmp>
    fa68:	103ff91e 	bne	r2,zero,fa50 <__alt_data_end+0xff00fa50>
    fa6c:	8005883a 	mov	r2,r16
    fa70:	00000106 	br	fa78 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fa74:	0005883a 	mov	r2,zero
}
    fa78:	dfc00417 	ldw	ra,16(sp)
    fa7c:	dcc00317 	ldw	r19,12(sp)
    fa80:	dc800217 	ldw	r18,8(sp)
    fa84:	dc400117 	ldw	r17,4(sp)
    fa88:	dc000017 	ldw	r16,0(sp)
    fa8c:	dec00504 	addi	sp,sp,20
    fa90:	f800283a 	ret

0000fa94 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fa94:	defffa04 	addi	sp,sp,-24
    fa98:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fa9c:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    faa0:	dd000415 	stw	r20,16(sp)
    faa4:	dfc00515 	stw	ra,20(sp)
    faa8:	dcc00315 	stw	r19,12(sp)
    faac:	dc800215 	stw	r18,8(sp)
    fab0:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fab4:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fab8:	85001626 	beq	r16,r20,fb14 <alt_find_file+0x80>
    fabc:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fac0:	04c00bc4 	movi	r19,47
    fac4:	00000806 	br	fae8 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fac8:	9185883a 	add	r2,r18,r6
    facc:	10800007 	ldb	r2,0(r2)
    fad0:	14c00126 	beq	r2,r19,fad8 <alt_find_file+0x44>
    fad4:	1000021e 	bne	r2,zero,fae0 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    fad8:	000fe500 	call	fe50 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fadc:	10001626 	beq	r2,zero,fb38 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fae0:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fae4:	85000b26 	beq	r16,r20,fb14 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    fae8:	84400217 	ldw	r17,8(r16)
    faec:	8809883a 	mov	r4,r17
    faf0:	000264c0 	call	264c <strlen>
    faf4:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    faf8:	8885883a 	add	r2,r17,r2
    fafc:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fb00:	900b883a 	mov	r5,r18
    fb04:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fb08:	14ffef1e 	bne	r2,r19,fac8 <__alt_data_end+0xff00fac8>
    {
      len -= 1;
    fb0c:	31bfffc4 	addi	r6,r6,-1
    fb10:	003fed06 	br	fac8 <__alt_data_end+0xff00fac8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fb14:	0005883a 	mov	r2,zero
}
    fb18:	dfc00517 	ldw	ra,20(sp)
    fb1c:	dd000417 	ldw	r20,16(sp)
    fb20:	dcc00317 	ldw	r19,12(sp)
    fb24:	dc800217 	ldw	r18,8(sp)
    fb28:	dc400117 	ldw	r17,4(sp)
    fb2c:	dc000017 	ldw	r16,0(sp)
    fb30:	dec00604 	addi	sp,sp,24
    fb34:	f800283a 	ret
    fb38:	8005883a 	mov	r2,r16
    fb3c:	003ff606 	br	fb18 <__alt_data_end+0xff00fb18>

0000fb40 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fb40:	01c00074 	movhi	r7,1
    fb44:	39c46904 	addi	r7,r7,4516
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fb48:	0005883a 	mov	r2,zero
    fb4c:	3807883a 	mov	r3,r7
    fb50:	01800804 	movi	r6,32
    fb54:	00000206 	br	fb60 <alt_get_fd+0x20>
    fb58:	10800044 	addi	r2,r2,1
    fb5c:	11800a26 	beq	r2,r6,fb88 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fb60:	19400017 	ldw	r5,0(r3)
    fb64:	18c00304 	addi	r3,r3,12
    fb68:	283ffb1e 	bne	r5,zero,fb58 <__alt_data_end+0xff00fb58>
    {
      alt_fd_list[i].dev = dev;
    fb6c:	10c00324 	muli	r3,r2,12
    fb70:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fb74:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fb78:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fb7c:	1880030e 	bge	r3,r2,fb8c <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fb80:	d0a00815 	stw	r2,-32736(gp)
    fb84:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    fb88:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fb8c:	f800283a 	ret

0000fb90 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fb90:	00840004 	movi	r2,4096
    fb94:	1140012e 	bgeu	r2,r5,fb9c <alt_icache_flush+0xc>
    fb98:	100b883a 	mov	r5,r2
    fb9c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fba0:	2005883a 	mov	r2,r4
    fba4:	2140092e 	bgeu	r4,r5,fbcc <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fba8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fbac:	10800804 	addi	r2,r2,32
    fbb0:	117ffd36 	bltu	r2,r5,fba8 <__alt_data_end+0xff00fba8>
    fbb4:	0104303a 	nor	r2,zero,r4
    fbb8:	2885883a 	add	r2,r5,r2
    fbbc:	1004d17a 	srli	r2,r2,5
    fbc0:	10800044 	addi	r2,r2,1
    fbc4:	1004917a 	slli	r2,r2,5
    fbc8:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fbcc:	210007cc 	andi	r4,r4,31
    fbd0:	20000126 	beq	r4,zero,fbd8 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fbd4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fbd8:	0000203a 	flushp
    fbdc:	f800283a 	ret

0000fbe0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fbe0:	213ffe84 	addi	r4,r4,-6
    fbe4:	008003c4 	movi	r2,15
    fbe8:	11001636 	bltu	r2,r4,fc44 <alt_exception_cause_generated_bad_addr+0x64>
    fbec:	200890ba 	slli	r4,r4,2
    fbf0:	00800074 	movhi	r2,1
    fbf4:	10bf0104 	addi	r2,r2,-1020
    fbf8:	2089883a 	add	r4,r4,r2
    fbfc:	20800017 	ldw	r2,0(r4)
    fc00:	1000683a 	jmp	r2
    fc04:	0000fc4c 	andi	zero,zero,1009
    fc08:	0000fc4c 	andi	zero,zero,1009
    fc0c:	0000fc44 	movi	zero,1009
    fc10:	0000fc44 	movi	zero,1009
    fc14:	0000fc44 	movi	zero,1009
    fc18:	0000fc4c 	andi	zero,zero,1009
    fc1c:	0000fc44 	movi	zero,1009
    fc20:	0000fc44 	movi	zero,1009
    fc24:	0000fc4c 	andi	zero,zero,1009
    fc28:	0000fc4c 	andi	zero,zero,1009
    fc2c:	0000fc44 	movi	zero,1009
    fc30:	0000fc4c 	andi	zero,zero,1009
    fc34:	0000fc44 	movi	zero,1009
    fc38:	0000fc44 	movi	zero,1009
    fc3c:	0000fc44 	movi	zero,1009
    fc40:	0000fc4c 	andi	zero,zero,1009
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fc44:	0005883a 	mov	r2,zero
    fc48:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fc4c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fc50:	f800283a 	ret

0000fc54 <atexit>:
    fc54:	200b883a 	mov	r5,r4
    fc58:	000f883a 	mov	r7,zero
    fc5c:	000d883a 	mov	r6,zero
    fc60:	0009883a 	mov	r4,zero
    fc64:	000fecc1 	jmpi	fecc <__register_exitproc>

0000fc68 <exit>:
    fc68:	defffe04 	addi	sp,sp,-8
    fc6c:	000b883a 	mov	r5,zero
    fc70:	dc000015 	stw	r16,0(sp)
    fc74:	dfc00115 	stw	ra,4(sp)
    fc78:	2021883a 	mov	r16,r4
    fc7c:	000ffe40 	call	ffe4 <__call_exitprocs>
    fc80:	00800074 	movhi	r2,1
    fc84:	1088ef04 	addi	r2,r2,9148
    fc88:	11000017 	ldw	r4,0(r2)
    fc8c:	20800f17 	ldw	r2,60(r4)
    fc90:	10000126 	beq	r2,zero,fc98 <exit+0x30>
    fc94:	103ee83a 	callr	r2
    fc98:	8009883a 	mov	r4,r16
    fc9c:	00101640 	call	10164 <_exit>

0000fca0 <memalign>:
    fca0:	00800074 	movhi	r2,1
    fca4:	1088f004 	addi	r2,r2,9152
    fca8:	280d883a 	mov	r6,r5
    fcac:	200b883a 	mov	r5,r4
    fcb0:	11000017 	ldw	r4,0(r2)
    fcb4:	000fcb81 	jmpi	fcb8 <_memalign_r>

0000fcb8 <_memalign_r>:
    fcb8:	00800204 	movi	r2,8
    fcbc:	1140532e 	bgeu	r2,r5,fe0c <_memalign_r+0x154>
    fcc0:	defffa04 	addi	sp,sp,-24
    fcc4:	dd000415 	stw	r20,16(sp)
    fcc8:	dc400115 	stw	r17,4(sp)
    fccc:	dfc00515 	stw	ra,20(sp)
    fcd0:	dcc00315 	stw	r19,12(sp)
    fcd4:	dc800215 	stw	r18,8(sp)
    fcd8:	dc000015 	stw	r16,0(sp)
    fcdc:	008003c4 	movi	r2,15
    fce0:	2823883a 	mov	r17,r5
    fce4:	2029883a 	mov	r20,r4
    fce8:	11400136 	bltu	r2,r5,fcf0 <_memalign_r+0x38>
    fcec:	04400404 	movi	r17,16
    fcf0:	308002c4 	addi	r2,r6,11
    fcf4:	00c00584 	movi	r3,22
    fcf8:	18803e2e 	bgeu	r3,r2,fdf4 <_memalign_r+0x13c>
    fcfc:	04bffe04 	movi	r18,-8
    fd00:	14a4703a 	and	r18,r2,r18
    fd04:	90003d16 	blt	r18,zero,fdfc <_memalign_r+0x144>
    fd08:	91803c36 	bltu	r18,r6,fdfc <_memalign_r+0x144>
    fd0c:	89400404 	addi	r5,r17,16
    fd10:	2c8b883a 	add	r5,r5,r18
    fd14:	a009883a 	mov	r4,r20
    fd18:	0001cac0 	call	1cac <_malloc_r>
    fd1c:	1027883a 	mov	r19,r2
    fd20:	10004926 	beq	r2,zero,fe48 <_memalign_r+0x190>
    fd24:	a009883a 	mov	r4,r20
    fd28:	000e9340 	call	e934 <__malloc_lock>
    fd2c:	880b883a 	mov	r5,r17
    fd30:	9809883a 	mov	r4,r19
    fd34:	9c3ffe04 	addi	r16,r19,-8
    fd38:	000bf0c0 	call	bf0c <__umodsi3>
    fd3c:	10001c26 	beq	r2,zero,fdb0 <_memalign_r+0xf8>
    fd40:	88bfffc4 	addi	r2,r17,-1
    fd44:	9887883a 	add	r3,r19,r2
    fd48:	0445c83a 	sub	r2,zero,r17
    fd4c:	1884703a 	and	r2,r3,r2
    fd50:	10bffe04 	addi	r2,r2,-8
    fd54:	1409c83a 	sub	r4,r2,r16
    fd58:	014003c4 	movi	r5,15
    fd5c:	8007883a 	mov	r3,r16
    fd60:	29002c0e 	bge	r5,r4,fe14 <_memalign_r+0x15c>
    fd64:	1021883a 	mov	r16,r2
    fd68:	993fff17 	ldw	r4,-4(r19)
    fd6c:	00bfff04 	movi	r2,-4
    fd70:	80c7c83a 	sub	r3,r16,r3
    fd74:	2084703a 	and	r2,r4,r2
    fd78:	10c5c83a 	sub	r2,r2,r3
    fd7c:	11000054 	ori	r4,r2,1
    fd80:	81000115 	stw	r4,4(r16)
    fd84:	8085883a 	add	r2,r16,r2
    fd88:	11800117 	ldw	r6,4(r2)
    fd8c:	980b883a 	mov	r5,r19
    fd90:	a009883a 	mov	r4,r20
    fd94:	31800054 	ori	r6,r6,1
    fd98:	11800115 	stw	r6,4(r2)
    fd9c:	98bfff17 	ldw	r2,-4(r19)
    fda0:	1080004c 	andi	r2,r2,1
    fda4:	10c6b03a 	or	r3,r2,r3
    fda8:	98ffff15 	stw	r3,-4(r19)
    fdac:	0006afc0 	call	6afc <_free_r>
    fdb0:	80c00117 	ldw	r3,4(r16)
    fdb4:	00bfff04 	movi	r2,-4
    fdb8:	1884703a 	and	r2,r3,r2
    fdbc:	1485c83a 	sub	r2,r2,r18
    fdc0:	00c003c4 	movi	r3,15
    fdc4:	18801516 	blt	r3,r2,fe1c <_memalign_r+0x164>
    fdc8:	a009883a 	mov	r4,r20
    fdcc:	000e9380 	call	e938 <__malloc_unlock>
    fdd0:	80800204 	addi	r2,r16,8
    fdd4:	dfc00517 	ldw	ra,20(sp)
    fdd8:	dd000417 	ldw	r20,16(sp)
    fddc:	dcc00317 	ldw	r19,12(sp)
    fde0:	dc800217 	ldw	r18,8(sp)
    fde4:	dc400117 	ldw	r17,4(sp)
    fde8:	dc000017 	ldw	r16,0(sp)
    fdec:	dec00604 	addi	sp,sp,24
    fdf0:	f800283a 	ret
    fdf4:	04800404 	movi	r18,16
    fdf8:	91bfc42e 	bgeu	r18,r6,fd0c <__alt_data_end+0xff00fd0c>
    fdfc:	00800304 	movi	r2,12
    fe00:	a0800015 	stw	r2,0(r20)
    fe04:	0005883a 	mov	r2,zero
    fe08:	003ff206 	br	fdd4 <__alt_data_end+0xff00fdd4>
    fe0c:	300b883a 	mov	r5,r6
    fe10:	0001cac1 	jmpi	1cac <_malloc_r>
    fe14:	1461883a 	add	r16,r2,r17
    fe18:	003fd306 	br	fd68 <__alt_data_end+0xff00fd68>
    fe1c:	848b883a 	add	r5,r16,r18
    fe20:	10800054 	ori	r2,r2,1
    fe24:	28800115 	stw	r2,4(r5)
    fe28:	80800117 	ldw	r2,4(r16)
    fe2c:	29400204 	addi	r5,r5,8
    fe30:	a009883a 	mov	r4,r20
    fe34:	1080004c 	andi	r2,r2,1
    fe38:	14a4b03a 	or	r18,r2,r18
    fe3c:	84800115 	stw	r18,4(r16)
    fe40:	0006afc0 	call	6afc <_free_r>
    fe44:	003fe006 	br	fdc8 <__alt_data_end+0xff00fdc8>
    fe48:	0005883a 	mov	r2,zero
    fe4c:	003fe106 	br	fdd4 <__alt_data_end+0xff00fdd4>

0000fe50 <memcmp>:
    fe50:	01c000c4 	movi	r7,3
    fe54:	3980192e 	bgeu	r7,r6,febc <memcmp+0x6c>
    fe58:	2144b03a 	or	r2,r4,r5
    fe5c:	11c4703a 	and	r2,r2,r7
    fe60:	10000f26 	beq	r2,zero,fea0 <memcmp+0x50>
    fe64:	20800003 	ldbu	r2,0(r4)
    fe68:	28c00003 	ldbu	r3,0(r5)
    fe6c:	10c0151e 	bne	r2,r3,fec4 <memcmp+0x74>
    fe70:	31bfff84 	addi	r6,r6,-2
    fe74:	01ffffc4 	movi	r7,-1
    fe78:	00000406 	br	fe8c <memcmp+0x3c>
    fe7c:	20800003 	ldbu	r2,0(r4)
    fe80:	28c00003 	ldbu	r3,0(r5)
    fe84:	31bfffc4 	addi	r6,r6,-1
    fe88:	10c00e1e 	bne	r2,r3,fec4 <memcmp+0x74>
    fe8c:	21000044 	addi	r4,r4,1
    fe90:	29400044 	addi	r5,r5,1
    fe94:	31fff91e 	bne	r6,r7,fe7c <__alt_data_end+0xff00fe7c>
    fe98:	0005883a 	mov	r2,zero
    fe9c:	f800283a 	ret
    fea0:	20c00017 	ldw	r3,0(r4)
    fea4:	28800017 	ldw	r2,0(r5)
    fea8:	18bfee1e 	bne	r3,r2,fe64 <__alt_data_end+0xff00fe64>
    feac:	31bfff04 	addi	r6,r6,-4
    feb0:	21000104 	addi	r4,r4,4
    feb4:	29400104 	addi	r5,r5,4
    feb8:	39bff936 	bltu	r7,r6,fea0 <__alt_data_end+0xff00fea0>
    febc:	303fe91e 	bne	r6,zero,fe64 <__alt_data_end+0xff00fe64>
    fec0:	003ff506 	br	fe98 <__alt_data_end+0xff00fe98>
    fec4:	10c5c83a 	sub	r2,r2,r3
    fec8:	f800283a 	ret

0000fecc <__register_exitproc>:
    fecc:	defffa04 	addi	sp,sp,-24
    fed0:	dc000315 	stw	r16,12(sp)
    fed4:	04000074 	movhi	r16,1
    fed8:	8408ef04 	addi	r16,r16,9148
    fedc:	80c00017 	ldw	r3,0(r16)
    fee0:	dc400415 	stw	r17,16(sp)
    fee4:	dfc00515 	stw	ra,20(sp)
    fee8:	18805217 	ldw	r2,328(r3)
    feec:	2023883a 	mov	r17,r4
    fef0:	10003726 	beq	r2,zero,ffd0 <__register_exitproc+0x104>
    fef4:	10c00117 	ldw	r3,4(r2)
    fef8:	010007c4 	movi	r4,31
    fefc:	20c00e16 	blt	r4,r3,ff38 <__register_exitproc+0x6c>
    ff00:	1a000044 	addi	r8,r3,1
    ff04:	8800221e 	bne	r17,zero,ff90 <__register_exitproc+0xc4>
    ff08:	18c00084 	addi	r3,r3,2
    ff0c:	18c7883a 	add	r3,r3,r3
    ff10:	18c7883a 	add	r3,r3,r3
    ff14:	12000115 	stw	r8,4(r2)
    ff18:	10c7883a 	add	r3,r2,r3
    ff1c:	19400015 	stw	r5,0(r3)
    ff20:	0005883a 	mov	r2,zero
    ff24:	dfc00517 	ldw	ra,20(sp)
    ff28:	dc400417 	ldw	r17,16(sp)
    ff2c:	dc000317 	ldw	r16,12(sp)
    ff30:	dec00604 	addi	sp,sp,24
    ff34:	f800283a 	ret
    ff38:	00800034 	movhi	r2,0
    ff3c:	10872104 	addi	r2,r2,7300
    ff40:	10002626 	beq	r2,zero,ffdc <__register_exitproc+0x110>
    ff44:	01006404 	movi	r4,400
    ff48:	d9400015 	stw	r5,0(sp)
    ff4c:	d9800115 	stw	r6,4(sp)
    ff50:	d9c00215 	stw	r7,8(sp)
    ff54:	0001c840 	call	1c84 <malloc>
    ff58:	d9400017 	ldw	r5,0(sp)
    ff5c:	d9800117 	ldw	r6,4(sp)
    ff60:	d9c00217 	ldw	r7,8(sp)
    ff64:	10001d26 	beq	r2,zero,ffdc <__register_exitproc+0x110>
    ff68:	81000017 	ldw	r4,0(r16)
    ff6c:	10000115 	stw	zero,4(r2)
    ff70:	02000044 	movi	r8,1
    ff74:	22405217 	ldw	r9,328(r4)
    ff78:	0007883a 	mov	r3,zero
    ff7c:	12400015 	stw	r9,0(r2)
    ff80:	20805215 	stw	r2,328(r4)
    ff84:	10006215 	stw	zero,392(r2)
    ff88:	10006315 	stw	zero,396(r2)
    ff8c:	883fde26 	beq	r17,zero,ff08 <__alt_data_end+0xff00ff08>
    ff90:	18c9883a 	add	r4,r3,r3
    ff94:	2109883a 	add	r4,r4,r4
    ff98:	1109883a 	add	r4,r2,r4
    ff9c:	21802215 	stw	r6,136(r4)
    ffa0:	01800044 	movi	r6,1
    ffa4:	12406217 	ldw	r9,392(r2)
    ffa8:	30cc983a 	sll	r6,r6,r3
    ffac:	4992b03a 	or	r9,r9,r6
    ffb0:	12406215 	stw	r9,392(r2)
    ffb4:	21c04215 	stw	r7,264(r4)
    ffb8:	01000084 	movi	r4,2
    ffbc:	893fd21e 	bne	r17,r4,ff08 <__alt_data_end+0xff00ff08>
    ffc0:	11006317 	ldw	r4,396(r2)
    ffc4:	218cb03a 	or	r6,r4,r6
    ffc8:	11806315 	stw	r6,396(r2)
    ffcc:	003fce06 	br	ff08 <__alt_data_end+0xff00ff08>
    ffd0:	18805304 	addi	r2,r3,332
    ffd4:	18805215 	stw	r2,328(r3)
    ffd8:	003fc606 	br	fef4 <__alt_data_end+0xff00fef4>
    ffdc:	00bfffc4 	movi	r2,-1
    ffe0:	003fd006 	br	ff24 <__alt_data_end+0xff00ff24>

0000ffe4 <__call_exitprocs>:
    ffe4:	defff504 	addi	sp,sp,-44
    ffe8:	df000915 	stw	fp,36(sp)
    ffec:	dd400615 	stw	r21,24(sp)
    fff0:	dc800315 	stw	r18,12(sp)
    fff4:	dfc00a15 	stw	ra,40(sp)
    fff8:	ddc00815 	stw	r23,32(sp)
    fffc:	dd800715 	stw	r22,28(sp)
   10000:	dd000515 	stw	r20,20(sp)
   10004:	dcc00415 	stw	r19,16(sp)
   10008:	dc400215 	stw	r17,8(sp)
   1000c:	dc000115 	stw	r16,4(sp)
   10010:	d9000015 	stw	r4,0(sp)
   10014:	2839883a 	mov	fp,r5
   10018:	04800044 	movi	r18,1
   1001c:	057fffc4 	movi	r21,-1
   10020:	00800074 	movhi	r2,1
   10024:	1088ef04 	addi	r2,r2,9148
   10028:	12000017 	ldw	r8,0(r2)
   1002c:	45005217 	ldw	r20,328(r8)
   10030:	44c05204 	addi	r19,r8,328
   10034:	a0001c26 	beq	r20,zero,100a8 <__call_exitprocs+0xc4>
   10038:	a0800117 	ldw	r2,4(r20)
   1003c:	15ffffc4 	addi	r23,r2,-1
   10040:	b8000d16 	blt	r23,zero,10078 <__call_exitprocs+0x94>
   10044:	14000044 	addi	r16,r2,1
   10048:	8421883a 	add	r16,r16,r16
   1004c:	8421883a 	add	r16,r16,r16
   10050:	84402004 	addi	r17,r16,128
   10054:	a463883a 	add	r17,r20,r17
   10058:	a421883a 	add	r16,r20,r16
   1005c:	e0001e26 	beq	fp,zero,100d8 <__call_exitprocs+0xf4>
   10060:	80804017 	ldw	r2,256(r16)
   10064:	e0801c26 	beq	fp,r2,100d8 <__call_exitprocs+0xf4>
   10068:	bdffffc4 	addi	r23,r23,-1
   1006c:	843fff04 	addi	r16,r16,-4
   10070:	8c7fff04 	addi	r17,r17,-4
   10074:	bd7ff91e 	bne	r23,r21,1005c <__alt_data_end+0xff01005c>
   10078:	00800034 	movhi	r2,0
   1007c:	10872604 	addi	r2,r2,7320
   10080:	10000926 	beq	r2,zero,100a8 <__call_exitprocs+0xc4>
   10084:	a0800117 	ldw	r2,4(r20)
   10088:	1000301e 	bne	r2,zero,1014c <__call_exitprocs+0x168>
   1008c:	a0800017 	ldw	r2,0(r20)
   10090:	10003226 	beq	r2,zero,1015c <__call_exitprocs+0x178>
   10094:	a009883a 	mov	r4,r20
   10098:	98800015 	stw	r2,0(r19)
   1009c:	0001c980 	call	1c98 <free>
   100a0:	9d000017 	ldw	r20,0(r19)
   100a4:	a03fe41e 	bne	r20,zero,10038 <__alt_data_end+0xff010038>
   100a8:	dfc00a17 	ldw	ra,40(sp)
   100ac:	df000917 	ldw	fp,36(sp)
   100b0:	ddc00817 	ldw	r23,32(sp)
   100b4:	dd800717 	ldw	r22,28(sp)
   100b8:	dd400617 	ldw	r21,24(sp)
   100bc:	dd000517 	ldw	r20,20(sp)
   100c0:	dcc00417 	ldw	r19,16(sp)
   100c4:	dc800317 	ldw	r18,12(sp)
   100c8:	dc400217 	ldw	r17,8(sp)
   100cc:	dc000117 	ldw	r16,4(sp)
   100d0:	dec00b04 	addi	sp,sp,44
   100d4:	f800283a 	ret
   100d8:	a0800117 	ldw	r2,4(r20)
   100dc:	80c00017 	ldw	r3,0(r16)
   100e0:	10bfffc4 	addi	r2,r2,-1
   100e4:	15c01426 	beq	r2,r23,10138 <__call_exitprocs+0x154>
   100e8:	80000015 	stw	zero,0(r16)
   100ec:	183fde26 	beq	r3,zero,10068 <__alt_data_end+0xff010068>
   100f0:	95c8983a 	sll	r4,r18,r23
   100f4:	a0806217 	ldw	r2,392(r20)
   100f8:	a5800117 	ldw	r22,4(r20)
   100fc:	2084703a 	and	r2,r4,r2
   10100:	10000b26 	beq	r2,zero,10130 <__call_exitprocs+0x14c>
   10104:	a0806317 	ldw	r2,396(r20)
   10108:	2088703a 	and	r4,r4,r2
   1010c:	20000c1e 	bne	r4,zero,10140 <__call_exitprocs+0x15c>
   10110:	89400017 	ldw	r5,0(r17)
   10114:	d9000017 	ldw	r4,0(sp)
   10118:	183ee83a 	callr	r3
   1011c:	a0800117 	ldw	r2,4(r20)
   10120:	15bfbf1e 	bne	r2,r22,10020 <__alt_data_end+0xff010020>
   10124:	98800017 	ldw	r2,0(r19)
   10128:	153fcf26 	beq	r2,r20,10068 <__alt_data_end+0xff010068>
   1012c:	003fbc06 	br	10020 <__alt_data_end+0xff010020>
   10130:	183ee83a 	callr	r3
   10134:	003ff906 	br	1011c <__alt_data_end+0xff01011c>
   10138:	a5c00115 	stw	r23,4(r20)
   1013c:	003feb06 	br	100ec <__alt_data_end+0xff0100ec>
   10140:	89000017 	ldw	r4,0(r17)
   10144:	183ee83a 	callr	r3
   10148:	003ff406 	br	1011c <__alt_data_end+0xff01011c>
   1014c:	a0800017 	ldw	r2,0(r20)
   10150:	a027883a 	mov	r19,r20
   10154:	1029883a 	mov	r20,r2
   10158:	003fb606 	br	10034 <__alt_data_end+0xff010034>
   1015c:	0005883a 	mov	r2,zero
   10160:	003ffb06 	br	10150 <__alt_data_end+0xff010150>

00010164 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10164:	20000226 	beq	r4,zero,10170 <_exit+0xc>
    ALT_SIM_FAIL();
   10168:	002af070 	cmpltui	zero,zero,43969
   1016c:	003fff06 	br	1016c <__alt_data_end+0xff01016c>
  } else {
    ALT_SIM_PASS();
   10170:	002af0b0 	cmpltui	zero,zero,43970
   10174:	003ffd06 	br	1016c <__alt_data_end+0xff01016c>
