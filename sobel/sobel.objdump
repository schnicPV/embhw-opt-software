
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000125e4 memsz 0x000125e4 flags r-x
    LOAD off    0x00013604 vaddr 0x00012604 paddr 0x000140f8 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00015bec vaddr 0x00015bec paddr 0x00015bec align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011bf8  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007c8  00011e3c  00011e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00012604  000140f8  00013604  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00015bec  00015bec  00015bec  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015d7c  00015d7c  000150f8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000150f8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  00015120  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025017  00000000  00000000  00016158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000995f  00000000  00000000  0003b16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c271  00000000  00000000  00044ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000274c  00000000  00000000  00050d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d9e  00000000  00000000  0005348c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  0005722a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006eaec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006eb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00073e3e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00073e41  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00073e4d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00073e4e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00073e4f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00073e53  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00073e57  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00073e5b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00073e64  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00073e6d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00073e76  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  00073e81  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00073ecf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  000799a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011e3c l    d  .rodata	00000000 .rodata
00012604 l    d  .rwdata	00000000 .rwdata
00015bec l    d  .bss	00000000 .bss
00015d7c l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00012352 l     O .rodata	00000010 zeroes.4404
000058dc l     F .text	000000bc __sbprintf
00012362 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005aec l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000761c l     F .text	00000008 __fp_unlock
00007630 l     F .text	0000019c __sinit.part.1
000077cc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00012a0c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012e50 l     O .rwdata	00000020 lc_ctype_charset
00012e30 l     O .rwdata	00000020 lc_message_charset
00012e70 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00012394 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a368 l     F .text	000000fc __sprint_r.part.0
000124c8 l     O .rodata	00000010 blanks.4348
000124b8 l     O .rodata	00000010 zeroes.4349
0000b8f4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f508 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f534 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f700 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f7ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f9c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000140e8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fc3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fd70 l     F .text	00000034 alt_dev_reg
00013050 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001007c l     F .text	0000020c altera_avalon_jtag_uart_irq
00010288 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000108c0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010d70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000111e4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00011324 l     F .text	0000003c alt_get_errno
00011360 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015c50 g     O .bss	00000004 alt_instruction_exception_handler
00009a00 g     F .text	00000074 _mprec_log10
00009aec g     F .text	0000008c __any_on
0000be90 g     F .text	00000054 _isatty_r
000123a0 g     O .rodata	00000028 __mprec_tinytens
0000f8fc g     F .text	0000007c alt_main
00003508 g     F .text	000000c0 _puts_r
00015c7c g     O .bss	00000100 alt_irq
0000bee4 g     F .text	00000060 _lseek_r
00012300 g     O .rodata	00000009 gy_array
000140f8 g       *ABS*	00000000 __flash_rwdata_start
0000df28 g     F .text	00000088 .hidden __eqdf2
00015d7c g       *ABS*	00000000 __alt_heap_start
000034cc g     F .text	0000003c printf
0000c0fc g     F .text	0000009c _wcrtomb_r
0000a228 g     F .text	0000005c __sseek
0000796c g     F .text	00000010 __sinit
0000bfa4 g     F .text	00000140 __swbuf_r
00008434 g     F .text	0000007c _setlocale_r
000077d4 g     F .text	00000068 __sfmoreglue
0000f99c g     F .text	00000024 __malloc_unlock
00000ea4 g     F .text	00000044 LCD_Write_Command
00015bfc g     O .bss	00000004 sobel_width
00015c40 g     O .bss	00000004 altera_avalon_timer_ts_freq
000088f8 g     F .text	0000015c memmove
00000ee8 g     F .text	00000044 LCD_Write_Data
00007954 g     F .text	00000018 _cleanup
00008b7c g     F .text	000000a8 _Balloc
0000dfb0 g     F .text	000000dc .hidden __gtdf2
0001171c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000764 g     F .text	0000004c cam_get_xsize
0000be34 g     F .text	0000005c _fstat_r
00015c20 g     O .bss	00000004 errno
0000a1a4 g     F .text	00000008 __seofread
00015c34 g     O .bss	00000004 alt_argv
0001c0b0 g       *ABS*	00000000 _gp
0000fc0c g     F .text	00000030 usleep
000008a4 g     F .text	000000a8 cam_set_image_pointer
00012ed0 g     O .rwdata	00000180 alt_fd_list
00002a48 g     F .text	00000034 vga_set_pointer
00011740 g     F .text	00000090 alt_find_dev
000087b0 g     F .text	00000148 memcpy
00007624 g     F .text	0000000c _cleanup_r
0000f214 g     F .text	000000dc .hidden __floatsidf
000112a8 g     F .text	0000007c alt_io_redirect
0000e08c g     F .text	000000f4 .hidden __ltdf2
00011e3c g       *ABS*	00000000 __DTOR_END__
000035c8 g     F .text	00000014 puts
00011a0c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a0dc g     F .text	00000074 __fpclassifyd
0000995c g     F .text	000000a4 __ratio
0000b8d8 g     F .text	0000001c __vfiprintf_internal
00010480 g     F .text	0000021c altera_avalon_jtag_uart_read
00002c68 g     F .text	00000014 malloc
0000349c g     F .text	00000030 _printf_r
00000c70 g     F .text	00000020 get_grayscale_picture
00002bac g     F .text	00000064 .hidden __udivsi3
00000280 g     F .text	000004e4 init_camera
00012094 g     O .rodata	00000128 lens_roll_off_tbl
0000f65c g     F .text	000000a4 isatty
000123f0 g     O .rodata	000000c8 __mprec_tens
000084b0 g     F .text	0000000c __locale_charset
0001197c g     F .text	00000090 alt_icache_flush
00015c1c g     O .bss	00000004 __malloc_top_pad
000140c8 g     O .rwdata	00000004 __mb_cur_max
000084e0 g     F .text	0000000c _localeconv_r
00001d58 g     F .text	000000c8 sobel_x
00008f88 g     F .text	0000003c __i2b
00007df0 g     F .text	000004bc __sfvwrite_r
00000f2c g     F .text	00000240 init_LCD
000035dc g     F .text	00000054 _sbrk_r
000140b4 g     O .rwdata	00000004 pgy_array
000007fc g     F .text	000000a8 cam_get_profiling
0000bf44 g     F .text	00000060 _read_r
00015c00 g     O .bss	00000004 sobel_result
000140e0 g     O .rwdata	00000004 alt_max_fd
0000bb28 g     F .text	000000f0 _fclose_r
000075ec g     F .text	00000030 fflush
00015c18 g     O .bss	00000004 __malloc_max_sbrked_mem
00015bf4 g     O .bss	00000004 grayscale_array
0000cd94 g     F .text	000008ac .hidden __adddf3
000007b0 g     F .text	0000004c cam_get_ysize
00009704 g     F .text	0000010c __b2d
0000c85c g     F .text	00000538 .hidden __umoddi3
0000f828 g     F .text	000000d4 lseek
00000d80 g     F .text	000000a0 i2c_short_read
000140c0 g     O .rwdata	00000004 _global_impure_ptr
00009b78 g     F .text	00000564 _realloc_r
00015d7c g       *ABS*	00000000 __bss_end
000110f4 g     F .text	000000f0 alt_iic_isr_register
00011614 g     F .text	00000108 alt_tick
0000c2e4 g     F .text	00000578 .hidden __udivdi3
0000bd90 g     F .text	00000024 _fputwc_r
000123c8 g     O .rodata	00000028 __mprec_bigtens
00008d6c g     F .text	00000104 __s2b
0000f2f0 g     F .text	000000a8 .hidden __floatunsidf
00009444 g     F .text	00000060 __mcmp
0000798c g     F .text	00000018 __fp_lock_all
000110a8 g     F .text	0000004c alt_ic_irq_enabled
00015bf0 g     O .bss	00000004 grayscape_height
00011578 g     F .text	0000009c alt_alarm_stop
00015c44 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012ea8 g     O .rwdata	00000028 alt_dev_null
00001210 g     F .text	000000c8 transfer_LCD_with_dma
00002274 g     F .text	00000794 sobel_complete
00010d50 g     F .text	00000020 alt_dcache_flush_all
00008e70 g     F .text	00000068 __hi0bits
0000f194 g     F .text	00000080 .hidden __fixdfsi
000140f8 g       *ABS*	00000000 __ram_rwdata_end
000140d8 g     O .rwdata	00000008 alt_dev_list
0000fc78 g     F .text	000000f8 write
00010aac g     F .text	00000020 alt_timestamp_freq
00012604 g       *ABS*	00000000 __ram_rodata_end
0000f570 g     F .text	000000b0 fstat
0000e08c g     F .text	000000f4 .hidden __ledf2
000091bc g     F .text	00000140 __pow5mult
0000a47c g     F .text	0000145c ___vfiprintf_internal_r
00015c2c g     O .bss	00000004 __nlocale_changed
00002c10 g     F .text	00000058 .hidden __umodsi3
00002a08 g     F .text	00000020 GetSobel_rgb
00015d7c g       *ABS*	00000000 end
00002a28 g     F .text	00000020 GetSobelResult
000009ac g     F .text	00000050 take_picture_blocking
00000a84 g     F .text	00000030 DIPSW_get_value
00002024 g     F .text	0000013c sobel_y_with_rgb
0000ffbc g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000984 g     F .text	00000028 current_image_pointer
00011e3c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010938 g     F .text	0000007c alt_avalon_timer_sc_init
0000f398 g     F .text	00000064 .hidden __clzsi2
0001069c g     F .text	00000224 altera_avalon_jtag_uart_write
0000797c g     F .text	00000004 __sfp_lock_acquire
000086cc g     F .text	000000e4 memchr
000036c8 g     F .text	000021f8 ___vfprintf_internal_r
00007ae0 g     F .text	00000310 _free_r
000084bc g     F .text	00000010 __locale_mb_cur_max
00001f5c g     F .text	000000c8 sobel_y
00011f54 g     O .rodata	00000140 noise_reduction_reg_settings_array
00011c88 g     F .text	00000180 __call_exitprocs
00015c28 g     O .bss	00000004 __mlocale_changed
000140b8 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00015c48 g     O .bss	00000004 _alt_tick_rate
000092fc g     F .text	00000148 __lshift
00015c4c g     O .bss	00000004 _alt_nticks
0000f9fc g     F .text	000000fc read
0000fddc g     F .text	0000007c alt_sys_init
00001e20 g     F .text	0000013c sobel_x_with_rgb
00011b70 g     F .text	00000118 __register_exitproc
00008fc4 g     F .text	000001f8 __multiply
00010328 g     F .text	00000068 altera_avalon_jtag_uart_close
00012604 g       *ABS*	00000000 __ram_rwdata_start
00011e3c g       *ABS*	00000000 __ram_rodata_start
00015c54 g     O .bss	00000028 __malloc_current_mallinfo
00009810 g     F .text	0000014c __d2b
00015c04 g     O .bss	00000004 sobel_height
000009fc g     F .text	00000030 enable_continues_mode
0000fe58 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000018a0 g     F .text	00000170 init_sobel_arrays
000118d8 g     F .text	000000a4 alt_get_fd
00010bf8 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000ba10 g     F .text	00000054 _close_r
00011af4 g     F .text	0000007c memcmp
0000ff18 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d7c g       *ABS*	00000000 __alt_stack_base
0000ff68 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005998 g     F .text	00000154 __swsetup_r
0000d640 g     F .text	000008e8 .hidden __divdf3
0000783c g     F .text	00000118 __sfp
00009a74 g     F .text	00000078 __copybits
00012604 g     O .rwdata	00000408 __malloc_av_
00007988 g     F .text	00000004 __sinit_lock_release
0000e180 g     F .text	00000718 .hidden __muldf3
0000a150 g     F .text	00000054 __sread
000117d0 g     F .text	00000108 alt_find_file
00010dac g     F .text	000000a4 alt_dev_llist_insert
0000f978 g     F .text	00000024 __malloc_lock
0000fb5c g     F .text	000000b0 sbrk
00007590 g     F .text	0000005c _fflush_r
0000ba64 g     F .text	000000c4 _calloc_r
00015bec g       *ABS*	00000000 __bss_start
00008a54 g     F .text	00000128 memset
000012d8 g     F .text	000005c8 main
00015c38 g     O .bss	00000004 alt_envp
00015c14 g     O .bss	00000004 __malloc_max_total_mem
00000c30 g     F .text	00000020 get_grayscale_width
0000feb8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c0e4 g     F .text	00000018 __swbuf
00015c08 g     O .bss	00000004 sobel_x_result
0000a284 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000bc18 g     F .text	00000014 fclose
000109b4 g     F .text	00000078 alt_timestamp_start
00005cec g     F .text	00001688 _dtoa_r
00002c90 g     F .text	0000080c _malloc_r
0000c258 g     F .text	00000030 __ascii_wctomb
000140e4 g     O .rwdata	00000004 alt_errno
000082ac g     F .text	000000c4 _fwalk
00002ab4 g     F .text	00000084 .hidden __divsi3
000079bc g     F .text	00000124 _malloc_trim_r
00011e3c g       *ABS*	00000000 __CTOR_END__
00015bec g     O .bss	00000004 grayscale_width
0000a28c g     F .text	000000dc strcmp
0000116c g     F .text	000000a4 transfer_LCD_no_dma
00011e3c g       *ABS*	00000000 __flash_rodata_start
00011e3c g       *ABS*	00000000 __DTOR_LIST__
0000df28 g     F .text	00000088 .hidden __nedf2
00011e3c g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000fda4 g     F .text	00000038 alt_irq_init
0000faf8 g     F .text	00000064 alt_release_fd
00000ccc g     F .text	000000b4 i2c_auto_detect
000124d8 g     O .rodata	00000100 .hidden __clz_tab
0000094c g     F .text	00000038 current_image_valid
00015c24 g     O .bss	00000004 _PathLocale
00000c90 g     F .text	0000003c i2c_busy_wait
00011aa8 g     F .text	00000014 atexit
0000b9b0 g     F .text	00000060 _write_r
000084ec g     F .text	00000018 setlocale
000140c4 g     O .rwdata	00000004 _impure_ptr
00015c30 g     O .bss	00000004 alt_argc
00007374 g     F .text	0000021c __sflush_r
00015c3c g     O .bss	00000004 altera_avalon_timer_ts_base
00010eb0 g     F .text	00000060 _do_dtors
000084d8 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
000096a0 g     F .text	00000064 __ulp
000079a4 g     F .text	00000018 __fp_unlock_all
000140d0 g     O .rwdata	00000008 alt_fs_list
00015c0c g     O .bss	00000004 sobel_y_result
00000e20 g     F .text	00000084 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015bf8 g     O .bss	00000002 LCD_height
00008504 g     F .text	0000000c localeconv
00010a2c g     F .text	00000080 alt_timestamp
00002a7c g     F .text	00000038 vga_set_swap
00010f44 g     F .text	00000050 alt_ic_isr_register
00002160 g     F .text	00000114 sobel_threshold
000140f8 g       *ABS*	00000000 _edata
000140b0 g     O .rwdata	00000004 pgx_array
00015d7c g       *ABS*	00000000 _end
0000bc2c g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00010390 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000122f7 g     O .rodata	00000009 gx_array
0001101c g     F .text	0000008c alt_ic_irq_disable
0000a1ac g     F .text	0000007c __swrite
000140bc g     O .rwdata	00000004 __malloc_trim_threshold
00015bfa g     O .bss	00000002 LCD_width
00000ab4 g     F .text	0000017c conv_grayscale
000084cc g     F .text	0000000c __locale_msgcharset
00011abc g     F .text	00000038 exit
00008370 g     F .text	000000c4 _fwalk_reent
000094a4 g     F .text	000001fc __mdiff
00002b38 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007980 g     F .text	00000004 __sfp_lock_release
00000c50 g     F .text	00000020 get_grayscale_height
00011e08 g     F .text	00000034 _exit
00001a10 g     F .text	00000348 sobel_mac
00010acc g     F .text	0000012c alt_alarm_start
00008510 g     F .text	000001bc __smakebuf_r
00015c10 g     O .bss	00000004 sobel_rgb565
00003630 g     F .text	00000098 strlen
00011424 g     F .text	00000154 open
0000dfb0 g     F .text	000000dc .hidden __gedf2
000140cc g     O .rwdata	00000004 __wctomb
0000a464 g     F .text	00000018 __sprint_r
00010f10 g     F .text	00000034 alt_icache_flush_all
000140ec g     O .rwdata	00000004 alt_priority_mask
00010f94 g     F .text	00000088 alt_ic_irq_enable
000058c0 g     F .text	0000001c __vfprintf_internal
0000c288 g     F .text	0000005c _wctomb_r
0000e898 g     F .text	000008fc .hidden __subdf3
00008ed8 g     F .text	000000b0 __lo0bits
000140f0 g     O .rwdata	00000008 alt_alarm_list
00010e50 g     F .text	00000060 _do_ctors
0000c198 g     F .text	000000c0 wcrtomb
0000f438 g     F .text	000000d0 close
0000f768 g     F .text	00000084 alt_load
0000bdb4 g     F .text	00000080 fputwc
00002c7c g     F .text	00000014 free
00007984 g     F .text	00000004 __sinit_lock_acquire
00008c4c g     F .text	00000120 __multadd
00008c24 g     F .text	00000028 _Bfree
00000a2c g     F .text	00000058 new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10971f04 	addi	r2,r2,23676
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10971f04 	addi	r2,r2,23676
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e817 	ldw	r2,-25696(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e817 	ldw	r2,-25696(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6b02c14 	ori	gp,gp,49328
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1096fb14 	ori	r2,r2,23532

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d75f14 	ori	r3,r3,23932

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000f7680 	call	f768 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000f8fc0 	call	f8fc <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     280:	defffd04 	addi	sp,sp,-12
     284:	dfc00215 	stw	ra,8(sp)
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00c00084 	movi	r3,2
     294:	00804034 	movhi	r2,256
     298:	10842744 	addi	r2,r2,4253
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00c00044 	movi	r3,1
     2a4:	00804034 	movhi	r2,256
     2a8:	10841304 	addi	r2,r2,4172
     2ac:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000406 	br	2c8 <init_camera+0x48>
		asm volatile ("nop");
     2b8:	0001883a 	nop

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bfff15 	stw	r2,-4(fp)
     2c8:	e0ffff17 	ldw	r3,-4(fp)
     2cc:	008003f4 	movhi	r2,15
     2d0:	10908fc4 	addi	r2,r2,16959
     2d4:	10fff80e 	bge	r2,r3,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2d8:	0007883a 	mov	r3,zero
     2dc:	00804034 	movhi	r2,256
     2e0:	10841304 	addi	r2,r2,4172
     2e4:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2e8:	e03fff15 	stw	zero,-4(fp)
     2ec:	00000406 	br	300 <init_camera+0x80>
		asm volatile ("nop");
     2f0:	0001883a 	nop
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bfff15 	stw	r2,-4(fp)
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	008003f4 	movhi	r2,15
     308:	10908fc4 	addi	r2,r2,16959
     30c:	10fff80e 	bge	r2,r3,2f0 <__alt_data_end+0xff0002f0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     310:	01800044 	movi	r6,1
     314:	014ce184 	movi	r5,13190
     318:	01001e04 	movi	r4,120
     31c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     320:	000d883a 	mov	r6,zero
     324:	014ce184 	movi	r5,13190
     328:	01001e04 	movi	r4,120
     32c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     330:	e03fff15 	stw	zero,-4(fp)
     334:	00000406 	br	348 <init_camera+0xc8>
		asm volatile ("nop");
     338:	0001883a 	nop
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bfff15 	stw	r2,-4(fp)
     348:	e0ffff17 	ldw	r3,-4(fp)
     34c:	008003f4 	movhi	r2,15
     350:	10908fc4 	addi	r2,r2,16959
     354:	10fff80e 	bge	r2,r3,338 <__alt_data_end+0xff000338>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     358:	01803104 	movi	r6,196
     35c:	014c0684 	movi	r5,12314
     360:	01001e04 	movi	r4,120
     364:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     368:	01800204 	movi	r6,8
     36c:	014c8084 	movi	r5,12802
     370:	01001e04 	movi	r4,120
     374:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     378:	0180c744 	movi	r6,797
     37c:	014cfd04 	movi	r5,13300
     380:	01001e04 	movi	r4,120
     384:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     388:	e03fff15 	stw	zero,-4(fp)
     38c:	00000406 	br	3a0 <init_camera+0x120>
		asm volatile ("nop");
     390:	0001883a 	nop
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bfff15 	stw	r2,-4(fp)
     3a0:	e0ffff17 	ldw	r3,-4(fp)
     3a4:	008000b4 	movhi	r2,2
     3a8:	10a1a7c4 	addi	r2,r2,-31073
     3ac:	10fff80e 	bge	r2,r3,390 <__alt_data_end+0xff000390>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3b0:	01a3c254 	movui	r6,36617
     3b4:	014d0784 	movi	r5,13342
     3b8:	01001e04 	movi	r4,120
     3bc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3c0:	01805404 	movi	r6,336
     3c4:	014d0704 	movi	r5,13340
     3c8:	01001e04 	movi	r4,120
     3cc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3d0:	01a3c254 	movui	r6,36617
     3d4:	014d0784 	movi	r5,13342
     3d8:	01001e04 	movi	r4,120
     3dc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     3e0:	e03fff15 	stw	zero,-4(fp)
     3e4:	00000406 	br	3f8 <init_camera+0x178>
		asm volatile ("nop");
     3e8:	0001883a 	nop
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800044 	addi	r2,r2,1
     3f4:	e0bfff15 	stw	r2,-4(fp)
     3f8:	e0ffff17 	ldw	r3,-4(fp)
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a7c4 	addi	r2,r2,-31073
     404:	10fff80e 	bge	r2,r3,3e8 <__alt_data_end+0xff0003e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     408:	01a3c214 	movui	r6,36616
     40c:	014d0784 	movi	r5,13342
     410:	01001e04 	movi	r4,120
     414:	0000e200 	call	e20 <i2c_short_write>
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     418:	e03fff15 	stw	zero,-4(fp)
     41c:	00001806 	br	480 <init_camera+0x200>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
     420:	00800074 	movhi	r2,1
     424:	10878f04 	addi	r2,r2,7740
     428:	e0ffff17 	ldw	r3,-4(fp)
     42c:	18c7883a 	add	r3,r3,r3
     430:	18c7883a 	add	r3,r3,r3
     434:	10c5883a 	add	r2,r2,r3
     438:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     43c:	113fffcc 	andi	r4,r2,65535
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
     440:	00800074 	movhi	r2,1
     444:	10878f04 	addi	r2,r2,7740
     448:	e0ffff17 	ldw	r3,-4(fp)
     44c:	18c7883a 	add	r3,r3,r3
     450:	18c7883a 	add	r3,r3,r3
     454:	10c5883a 	add	r2,r2,r3
     458:	10800084 	addi	r2,r2,2
     45c:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     460:	10bfffcc 	andi	r2,r2,65535
     464:	100d883a 	mov	r6,r2
     468:	200b883a 	mov	r5,r4
     46c:	01001e04 	movi	r4,120
     470:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bfff15 	stw	r2,-4(fp)
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	108011b0 	cmpltui	r2,r2,70
     488:	103fe51e 	bne	r2,zero,420 <__alt_data_end+0xff000420>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     48c:	e03fff15 	stw	zero,-4(fp)
     490:	00001806 	br	4f4 <init_camera+0x274>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
     494:	00800074 	movhi	r2,1
     498:	1087d504 	addi	r2,r2,8020
     49c:	e0ffff17 	ldw	r3,-4(fp)
     4a0:	18c7883a 	add	r3,r3,r3
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	10c5883a 	add	r2,r2,r3
     4ac:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4b0:	113fffcc 	andi	r4,r2,65535
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
     4b4:	00800074 	movhi	r2,1
     4b8:	1087d504 	addi	r2,r2,8020
     4bc:	e0ffff17 	ldw	r3,-4(fp)
     4c0:	18c7883a 	add	r3,r3,r3
     4c4:	18c7883a 	add	r3,r3,r3
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800084 	addi	r2,r2,2
     4d0:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4d4:	10bfffcc 	andi	r2,r2,65535
     4d8:	100d883a 	mov	r6,r2
     4dc:	200b883a 	mov	r5,r4
     4e0:	01001e04 	movi	r4,120
     4e4:	0000e200 	call	e20 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10801430 	cmpltui	r2,r2,80
     4fc:	103fe51e 	bne	r2,zero,494 <__alt_data_end+0xff000494>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     500:	018164c4 	movi	r6,1427
     504:	014d6904 	movi	r5,13732
     508:	01001e04 	movi	r4,120
     50c:	0000e200 	call	e20 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     510:	0189e644 	movi	r6,10137
     514:	014ce304 	movi	r5,13196
     518:	01001e04 	movi	r4,120
     51c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     520:	01991004 	movi	r6,25664
     524:	014ce404 	movi	r5,13200
     528:	01001e04 	movi	r4,120
     52c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     530:	e03fff15 	stw	zero,-4(fp)
     534:	00000406 	br	548 <init_camera+0x2c8>
		asm volatile ("nop");
     538:	0001883a 	nop
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bfff15 	stw	r2,-4(fp)
     548:	e0ffff17 	ldw	r3,-4(fp)
     54c:	008000b4 	movhi	r2,2
     550:	10a1a7c4 	addi	r2,r2,-31073
     554:	10fff80e 	bge	r2,r3,538 <__alt_data_end+0xff000538>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     558:	0189e6c4 	movi	r6,10139
     55c:	014ce304 	movi	r5,13196
     560:	01001e04 	movi	r4,120
     564:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     568:	01991004 	movi	r6,25664
     56c:	014ce404 	movi	r5,13200
     570:	01001e04 	movi	r4,120
     574:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     578:	e03fff15 	stw	zero,-4(fp)
     57c:	00000406 	br	590 <init_camera+0x310>
		asm volatile ("nop");
     580:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bfff15 	stw	r2,-4(fp)
     590:	e0ffff17 	ldw	r3,-4(fp)
     594:	008000b4 	movhi	r2,2
     598:	10a1a7c4 	addi	r2,r2,-31073
     59c:	10fff80e 	bge	r2,r3,580 <__alt_data_end+0xff000580>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5a0:	01a840d4 	movui	r6,41219
     5a4:	014ce304 	movi	r5,13196
     5a8:	01001e04 	movi	r4,120
     5ac:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     5b0:	01800144 	movi	r6,5
     5b4:	014ce404 	movi	r5,13200
     5b8:	01001e04 	movi	r4,120
     5bc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     5c0:	e03fff15 	stw	zero,-4(fp)
     5c4:	00000406 	br	5d8 <init_camera+0x358>
		asm volatile ("nop");
     5c8:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	e0bfff15 	stw	r2,-4(fp)
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	008000b4 	movhi	r2,2
     5e0:	10a1a7c4 	addi	r2,r2,-31073
     5e4:	10fff80e 	bge	r2,r3,5c8 <__alt_data_end+0xff0005c8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5e8:	01a840d4 	movui	r6,41219
     5ec:	014ce304 	movi	r5,13196
     5f0:	01001e04 	movi	r4,120
     5f4:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     5f8:	01800184 	movi	r6,6
     5fc:	014ce404 	movi	r5,13200
     600:	01001e04 	movi	r4,120
     604:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     608:	e03fff15 	stw	zero,-4(fp)
     60c:	00000406 	br	620 <init_camera+0x3a0>
		asm volatile ("nop");
     610:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	10800044 	addi	r2,r2,1
     61c:	e0bfff15 	stw	r2,-4(fp)
     620:	e0ffff17 	ldw	r3,-4(fp)
     624:	008000b4 	movhi	r2,2
     628:	10a1a7c4 	addi	r2,r2,-31073
     62c:	10fff80e 	bge	r2,r3,610 <__alt_data_end+0xff000610>
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     630:	e03fff15 	stw	zero,-4(fp)
     634:	00001806 	br	698 <init_camera+0x418>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
     638:	00800074 	movhi	r2,1
     63c:	10882504 	addi	r2,r2,8340
     640:	e0ffff17 	ldw	r3,-4(fp)
     644:	18c7883a 	add	r3,r3,r3
     648:	18c7883a 	add	r3,r3,r3
     64c:	10c5883a 	add	r2,r2,r3
     650:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     654:	113fffcc 	andi	r4,r2,65535
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
     658:	00800074 	movhi	r2,1
     65c:	10882504 	addi	r2,r2,8340
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	18c7883a 	add	r3,r3,r3
     668:	18c7883a 	add	r3,r3,r3
     66c:	10c5883a 	add	r2,r2,r3
     670:	10800084 	addi	r2,r2,2
     674:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	100d883a 	mov	r6,r2
     680:	200b883a 	mov	r5,r4
     684:	01001e04 	movi	r4,120
     688:	0000e200 	call	e20 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     68c:	e0bfff17 	ldw	r2,-4(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	108012b0 	cmpltui	r2,r2,74
     6a0:	103fe51e 	bne	r2,zero,638 <__alt_data_end+0xff000638>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6a4:	e03fff15 	stw	zero,-4(fp)
     6a8:	00000406 	br	6bc <init_camera+0x43c>
		asm volatile ("nop");
     6ac:	0001883a 	nop
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bfff15 	stw	r2,-4(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	008003f4 	movhi	r2,15
     6c4:	10908fc4 	addi	r2,r2,16959
     6c8:	10fff80e 	bge	r2,r3,6ac <__alt_data_end+0xff0006ac>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     6cc:	01800804 	movi	r6,32
     6d0:	014ccb84 	movi	r5,13102
     6d4:	01001e04 	movi	r4,120
     6d8:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	00000406 	br	6f4 <init_camera+0x474>
		asm volatile ("nop");
     6e4:	0001883a 	nop
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfff15 	stw	r2,-4(fp)
     6f4:	e0ffff17 	ldw	r3,-4(fp)
     6f8:	008003f4 	movhi	r2,15
     6fc:	10908fc4 	addi	r2,r2,16959
     700:	10fff80e 	bge	r2,r3,6e4 <__alt_data_end+0xff0006e4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     704:	01800884 	movi	r6,34
     708:	014d0104 	movi	r5,13316
     70c:	01001e04 	movi	r4,120
     710:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     714:	e03fff15 	stw	zero,-4(fp)
     718:	00000406 	br	72c <init_camera+0x4ac>
		asm volatile ("nop");
     71c:	0001883a 	nop
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bfff15 	stw	r2,-4(fp)
     72c:	e0ffff17 	ldw	r3,-4(fp)
     730:	008003f4 	movhi	r2,15
     734:	10908fc4 	addi	r2,r2,16959
     738:	10fff80e 	bge	r2,r3,71c <__alt_data_end+0xff00071c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     73c:	018009c4 	movi	r6,39
     740:	014c1004 	movi	r5,12352
     744:	01001e04 	movi	r4,120
     748:	0000e200 	call	e20 <i2c_short_write>
}
     74c:	0001883a 	nop
     750:	e037883a 	mov	sp,fp
     754:	dfc00117 	ldw	ra,4(sp)
     758:	df000017 	ldw	fp,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret

00000764 <cam_get_xsize>:

unsigned short cam_get_xsize(){
     764:	defffe04 	addi	sp,sp,-8
     768:	df000115 	stw	fp,4(sp)
     76c:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     770:	00804034 	movhi	r2,256
     774:	10841304 	addi	r2,r2,4172
     778:	10800023 	ldbuio	r2,0(r2)
     77c:	10803fcc 	andi	r2,r2,255
     780:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     784:	e0bfff03 	ldbu	r2,-4(fp)
     788:	1080010c 	andi	r2,r2,4
     78c:	103ff826 	beq	r2,zero,770 <__alt_data_end+0xff000770>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     790:	00804034 	movhi	r2,256
     794:	10841004 	addi	r2,r2,4160
     798:	1080002b 	ldhuio	r2,0(r2)
     79c:	10bfffcc 	andi	r2,r2,65535
}
     7a0:	e037883a 	mov	sp,fp
     7a4:	df000017 	ldw	fp,0(sp)
     7a8:	dec00104 	addi	sp,sp,4
     7ac:	f800283a 	ret

000007b0 <cam_get_ysize>:

unsigned short cam_get_ysize() {
     7b0:	defffe04 	addi	sp,sp,-8
     7b4:	df000115 	stw	fp,4(sp)
     7b8:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     7bc:	00804034 	movhi	r2,256
     7c0:	10841304 	addi	r2,r2,4172
     7c4:	10800023 	ldbuio	r2,0(r2)
     7c8:	10803fcc 	andi	r2,r2,255
     7cc:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     7d0:	e0bfff03 	ldbu	r2,-4(fp)
     7d4:	1080010c 	andi	r2,r2,4
     7d8:	103ff826 	beq	r2,zero,7bc <__alt_data_end+0xff0007bc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     7dc:	00804034 	movhi	r2,256
     7e0:	10841104 	addi	r2,r2,4164
     7e4:	1080002b 	ldhuio	r2,0(r2)
     7e8:	10bfffcc 	andi	r2,r2,65535
}
     7ec:	e037883a 	mov	sp,fp
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00104 	addi	sp,sp,4
     7f8:	f800283a 	ret

000007fc <cam_get_profiling>:

void cam_get_profiling() {
     7fc:	defffd04 	addi	sp,sp,-12
     800:	dfc00215 	stw	ra,8(sp)
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     80c:	00804034 	movhi	r2,256
     810:	10841304 	addi	r2,r2,4172
     814:	10800023 	ldbuio	r2,0(r2)
     818:	10803fcc 	andi	r2,r2,255
     81c:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     820:	e0bfff03 	ldbu	r2,-4(fp)
     824:	1080010c 	andi	r2,r2,4
     828:	103ff826 	beq	r2,zero,80c <__alt_data_end+0xff00080c>
	printf("Nr. of bytes each line    : %d\n",
     82c:	00804034 	movhi	r2,256
     830:	10841004 	addi	r2,r2,4160
     834:	1080002b 	ldhuio	r2,0(r2)
     838:	10bfffcc 	andi	r2,r2,65535
     83c:	100b883a 	mov	r5,r2
     840:	01000074 	movhi	r4,1
     844:	21086f04 	addi	r4,r4,8636
     848:	00034cc0 	call	34cc <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     84c:	00804034 	movhi	r2,256
     850:	10841104 	addi	r2,r2,4164
     854:	1080002b 	ldhuio	r2,0(r2)
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	100b883a 	mov	r5,r2
     860:	01000074 	movhi	r4,1
     864:	21087704 	addi	r4,r4,8668
     868:	00034cc0 	call	34cc <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     86c:	00804034 	movhi	r2,256
     870:	10841204 	addi	r2,r2,4168
     874:	1080002b 	ldhuio	r2,0(r2)
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	100b883a 	mov	r5,r2
     880:	01000074 	movhi	r4,1
     884:	21087f04 	addi	r4,r4,8700
     888:	00034cc0 	call	34cc <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     88c:	0001883a 	nop
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <cam_set_image_pointer>:

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
     8a4:	defffd04 	addi	sp,sp,-12
     8a8:	df000215 	stw	fp,8(sp)
     8ac:	df000204 	addi	fp,sp,8
     8b0:	2005883a 	mov	r2,r4
     8b4:	e17fff15 	stw	r5,-4(fp)
     8b8:	e0bffe05 	stb	r2,-8(fp)
	switch (pointer_id) {
     8bc:	e0bffe07 	ldb	r2,-8(fp)
     8c0:	10c00060 	cmpeqi	r3,r2,1
     8c4:	18000e1e 	bne	r3,zero,900 <cam_set_image_pointer+0x5c>
     8c8:	10c00088 	cmpgei	r3,r2,2
     8cc:	1800021e 	bne	r3,zero,8d8 <cam_set_image_pointer+0x34>
     8d0:	10000626 	beq	r2,zero,8ec <cam_set_image_pointer+0x48>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8d4:	00001906 	br	93c <cam_set_image_pointer+0x98>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     8d8:	10c000a0 	cmpeqi	r3,r2,2
     8dc:	18000d1e 	bne	r3,zero,914 <cam_set_image_pointer+0x70>
     8e0:	108000e0 	cmpeqi	r2,r2,3
     8e4:	1000101e 	bne	r2,zero,928 <cam_set_image_pointer+0x84>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8e8:	00001406 	br	93c <cam_set_image_pointer+0x98>
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     8ec:	e0ffff17 	ldw	r3,-4(fp)
     8f0:	00804034 	movhi	r2,256
     8f4:	10841404 	addi	r2,r2,4176
     8f8:	10c00035 	stwio	r3,0(r2)
	            break;
     8fc:	00000f06 	br	93c <cam_set_image_pointer+0x98>
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     900:	e0ffff17 	ldw	r3,-4(fp)
     904:	00804034 	movhi	r2,256
     908:	10841504 	addi	r2,r2,4180
     90c:	10c00035 	stwio	r3,0(r2)
                break;
     910:	00000a06 	br	93c <cam_set_image_pointer+0x98>
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     914:	e0ffff17 	ldw	r3,-4(fp)
     918:	00804034 	movhi	r2,256
     91c:	10841604 	addi	r2,r2,4184
     920:	10c00035 	stwio	r3,0(r2)
                break;
     924:	00000506 	br	93c <cam_set_image_pointer+0x98>
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     928:	e0ffff17 	ldw	r3,-4(fp)
     92c:	00804034 	movhi	r2,256
     930:	10841704 	addi	r2,r2,4188
     934:	10c00035 	stwio	r3,0(r2)
                break;
     938:	0001883a 	nop
	   default: return;
	}
}
     93c:	e037883a 	mov	sp,fp
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00104 	addi	sp,sp,4
     948:	f800283a 	ret

0000094c <current_image_valid>:

short current_image_valid() {
     94c:	defffe04 	addi	sp,sp,-8
     950:	df000115 	stw	fp,4(sp)
     954:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     958:	00804034 	movhi	r2,256
     95c:	10841304 	addi	r2,r2,4172
     960:	1080002b 	ldhuio	r2,0(r2)
     964:	10bfffcc 	andi	r2,r2,65535
     968:	e0bfff0d 	sth	r2,-4(fp)
	return (value&CAM_Current_Image_Valid);
     96c:	e0bfff0b 	ldhu	r2,-4(fp)
     970:	1080800c 	andi	r2,r2,512
}
     974:	e037883a 	mov	sp,fp
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00104 	addi	sp,sp,4
     980:	f800283a 	ret

00000984 <current_image_pointer>:

void *current_image_pointer() {
     984:	deffff04 	addi	sp,sp,-4
     988:	df000015 	stw	fp,0(sp)
     98c:	d839883a 	mov	fp,sp
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     990:	00804034 	movhi	r2,256
     994:	10841404 	addi	r2,r2,4176
     998:	10800037 	ldwio	r2,0(r2)
}
     99c:	e037883a 	mov	sp,fp
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00104 	addi	sp,sp,4
     9a8:	f800283a 	ret

000009ac <take_picture_blocking>:

void take_picture_blocking() {
     9ac:	defffe04 	addi	sp,sp,-8
     9b0:	df000115 	stw	fp,4(sp)
     9b4:	df000104 	addi	fp,sp,4
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9b8:	00c00204 	movi	r3,8
     9bc:	00804034 	movhi	r2,256
     9c0:	10841304 	addi	r2,r2,4172
     9c4:	10c0002d 	sthio	r3,0(r2)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c8:	00804034 	movhi	r2,256
     9cc:	10841304 	addi	r2,r2,4172
     9d0:	1080002b 	ldhuio	r2,0(r2)
     9d4:	10bfffcc 	andi	r2,r2,65535
     9d8:	e0bfff0d 	sth	r2,-4(fp)
	} while ((value&CAM_Busy)!= 0);
     9dc:	e0bfff0b 	ldhu	r2,-4(fp)
     9e0:	1080020c 	andi	r2,r2,8
     9e4:	103ff81e 	bne	r2,zero,9c8 <__alt_data_end+0xff0009c8>
}
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00104 	addi	sp,sp,4
     9f8:	f800283a 	ret

000009fc <enable_continues_mode>:

void enable_continues_mode() {
     9fc:	deffff04 	addi	sp,sp,-4
     a00:	df000015 	stw	fp,0(sp)
     a04:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     a08:	00c00404 	movi	r3,16
     a0c:	00804034 	movhi	r2,256
     a10:	10841304 	addi	r2,r2,4172
     a14:	10c0002d 	sthio	r3,0(r2)
}
     a18:	0001883a 	nop
     a1c:	e037883a 	mov	sp,fp
     a20:	df000017 	ldw	fp,0(sp)
     a24:	dec00104 	addi	sp,sp,4
     a28:	f800283a 	ret

00000a2c <new_image_available>:

char new_image_available() {
     a2c:	defffe04 	addi	sp,sp,-8
     a30:	df000115 	stw	fp,4(sp)
     a34:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a38:	00804034 	movhi	r2,256
     a3c:	10841304 	addi	r2,r2,4172
     a40:	1080002b 	ldhuio	r2,0(r2)
     a44:	10bfffcc 	andi	r2,r2,65535
     a48:	e0bfff0d 	sth	r2,-4(fp)
	if ((value&CAM_IRQ_Generated)!=0) {
     a4c:	e0bfff0b 	ldhu	r2,-4(fp)
     a50:	1080200c 	andi	r2,r2,128
     a54:	10000626 	beq	r2,zero,a70 <new_image_available+0x44>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a58:	00c04004 	movi	r3,256
     a5c:	00804034 	movhi	r2,256
     a60:	10841304 	addi	r2,r2,4172
     a64:	10c0002d 	sthio	r3,0(r2)
		return 1;
     a68:	00800044 	movi	r2,1
     a6c:	00000106 	br	a74 <new_image_available+0x48>
	} else return 0;
     a70:	0005883a 	mov	r2,zero
}
     a74:	e037883a 	mov	sp,fp
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00104 	addi	sp,sp,4
     a80:	f800283a 	ret

00000a84 <DIPSW_get_value>:
 */

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
     a84:	deffff04 	addi	sp,sp,-4
     a88:	df000015 	stw	fp,0(sp)
     a8c:	d839883a 	mov	fp,sp
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     a90:	00804034 	movhi	r2,256
     a94:	10842804 	addi	r2,r2,4256
     a98:	10800023 	ldbuio	r2,0(r2)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	0084303a 	nor	r2,zero,r2
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     ab4:	defff604 	addi	sp,sp,-40
     ab8:	dfc00915 	stw	ra,36(sp)
     abc:	df000815 	stw	fp,32(sp)
     ac0:	df000804 	addi	fp,sp,32
     ac4:	e13ffd15 	stw	r4,-12(fp)
     ac8:	e17ffe15 	stw	r5,-8(fp)
     acc:	e1bfff15 	stw	r6,-4(fp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	e0bffa15 	stw	r2,-24(fp)
	grayscale_width = width;
     ad8:	e0bffe17 	ldw	r2,-8(fp)
     adc:	d0a6cf15 	stw	r2,-25796(gp)
	grayscape_height = height;
     ae0:	e0bfff17 	ldw	r2,-4(fp)
     ae4:	d0a6d015 	stw	r2,-25792(gp)
	if (grayscale_array != NULL)
     ae8:	d0a6d117 	ldw	r2,-25788(gp)
     aec:	10000326 	beq	r2,zero,afc <conv_grayscale+0x48>
		free(grayscale_array);
     af0:	d0a6d117 	ldw	r2,-25788(gp)
     af4:	1009883a 	mov	r4,r2
     af8:	0002c7c0 	call	2c7c <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     afc:	e0fffe17 	ldw	r3,-8(fp)
     b00:	e0bfff17 	ldw	r2,-4(fp)
     b04:	1885383a 	mul	r2,r3,r2
     b08:	1009883a 	mov	r4,r2
     b0c:	0002c680 	call	2c68 <malloc>
     b10:	d0a6d115 	stw	r2,-25788(gp)
	for (y = 0 ; y < height ; y++) {
     b14:	e03ff915 	stw	zero,-28(fp)
     b18:	00003c06 	br	c0c <conv_grayscale+0x158>
		for (x = 0 ; x < width ; x++) {
     b1c:	e03ff815 	stw	zero,-32(fp)
     b20:	00003406 	br	bf4 <conv_grayscale+0x140>
			rgb = pixels[y*width+x];
     b24:	e0fff917 	ldw	r3,-28(fp)
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	1887383a 	mul	r3,r3,r2
     b30:	e0bff817 	ldw	r2,-32(fp)
     b34:	1885883a 	add	r2,r3,r2
     b38:	1085883a 	add	r2,r2,r2
     b3c:	1007883a 	mov	r3,r2
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10c5883a 	add	r2,r2,r3
     b48:	1080000b 	ldhu	r2,0(r2)
     b4c:	e0bffb0d 	sth	r2,-20(fp)
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     b50:	e0bffb0b 	ldhu	r2,-20(fp)
     b54:	1004d2fa 	srli	r2,r2,11
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	100490fa 	slli	r2,r2,3
     b60:	10803fcc 	andi	r2,r2,255
     b64:	10800564 	muli	r2,r2,21
     b68:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     b6c:	e0bffb0b 	ldhu	r2,-20(fp)
     b70:	1004d17a 	srli	r2,r2,5
     b74:	10bfffcc 	andi	r2,r2,65535
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	10803fcc 	andi	r2,r2,255
     b84:	10801224 	muli	r2,r2,72
     b88:	e0fffc17 	ldw	r3,-16(fp)
     b8c:	1885883a 	add	r2,r3,r2
     b90:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     b94:	e0bffb0b 	ldhu	r2,-20(fp)
     b98:	100490fa 	slli	r2,r2,3
     b9c:	10803fcc 	andi	r2,r2,255
     ba0:	108001e4 	muli	r2,r2,7
     ba4:	e0fffc17 	ldw	r3,-16(fp)
     ba8:	1885883a 	add	r2,r3,r2
     bac:	e0bffc15 	stw	r2,-16(fp)
			gray /= 100;
     bb0:	e0bffc17 	ldw	r2,-16(fp)
     bb4:	01401904 	movi	r5,100
     bb8:	1009883a 	mov	r4,r2
     bbc:	0002ab40 	call	2ab4 <__divsi3>
     bc0:	e0bffc15 	stw	r2,-16(fp)
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     bc4:	d0a6d117 	ldw	r2,-25788(gp)
     bc8:	e13ff917 	ldw	r4,-28(fp)
     bcc:	e0fffe17 	ldw	r3,-8(fp)
     bd0:	20c9383a 	mul	r4,r4,r3
     bd4:	e0fff817 	ldw	r3,-32(fp)
     bd8:	20c7883a 	add	r3,r4,r3
     bdc:	10c5883a 	add	r2,r2,r3
     be0:	e0fffc03 	ldbu	r3,-16(fp)
     be4:	10c00025 	stbio	r3,0(r2)
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     be8:	e0bff817 	ldw	r2,-32(fp)
     bec:	10800044 	addi	r2,r2,1
     bf0:	e0bff815 	stw	r2,-32(fp)
     bf4:	e0fff817 	ldw	r3,-32(fp)
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	18bfc916 	blt	r3,r2,b24 <__alt_data_end+0xff000b24>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     c00:	e0bff917 	ldw	r2,-28(fp)
     c04:	10800044 	addi	r2,r2,1
     c08:	e0bff915 	stw	r2,-28(fp)
     c0c:	e0fff917 	ldw	r3,-28(fp)
     c10:	e0bfff17 	ldw	r2,-4(fp)
     c14:	18bfc116 	blt	r3,r2,b1c <__alt_data_end+0xff000b1c>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     c18:	0001883a 	nop
     c1c:	e037883a 	mov	sp,fp
     c20:	dfc00117 	ldw	ra,4(sp)
     c24:	df000017 	ldw	fp,0(sp)
     c28:	dec00204 	addi	sp,sp,8
     c2c:	f800283a 	ret

00000c30 <get_grayscale_width>:


int get_grayscale_width() {
     c30:	deffff04 	addi	sp,sp,-4
     c34:	df000015 	stw	fp,0(sp)
     c38:	d839883a 	mov	fp,sp
	return grayscale_width;
     c3c:	d0a6cf17 	ldw	r2,-25796(gp)
}
     c40:	e037883a 	mov	sp,fp
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	f800283a 	ret

00000c50 <get_grayscale_height>:

int get_grayscale_height() {
     c50:	deffff04 	addi	sp,sp,-4
     c54:	df000015 	stw	fp,0(sp)
     c58:	d839883a 	mov	fp,sp
	return grayscape_height;
     c5c:	d0a6d017 	ldw	r2,-25792(gp)
}
     c60:	e037883a 	mov	sp,fp
     c64:	df000017 	ldw	fp,0(sp)
     c68:	dec00104 	addi	sp,sp,4
     c6c:	f800283a 	ret

00000c70 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
     c70:	deffff04 	addi	sp,sp,-4
     c74:	df000015 	stw	fp,0(sp)
     c78:	d839883a 	mov	fp,sp
	return grayscale_array;
     c7c:	d0a6d117 	ldw	r2,-25788(gp)
}
     c80:	e037883a 	mov	sp,fp
     c84:	df000017 	ldw	fp,0(sp)
     c88:	dec00104 	addi	sp,sp,4
     c8c:	f800283a 	ret

00000c90 <i2c_busy_wait>:

#include <system.h>
#include <io.h>
#include "i2c.h"

void i2c_busy_wait() {
     c90:	defffe04 	addi	sp,sp,-8
     c94:	df000115 	stw	fp,4(sp)
     c98:	df000104 	addi	fp,sp,4
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     c9c:	00804034 	movhi	r2,256
     ca0:	10842704 	addi	r2,r2,4252
     ca4:	10800037 	ldwio	r2,0(r2)
     ca8:	e0bfff15 	stw	r2,-4(fp)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	108000cc 	andi	r2,r2,3
     cb4:	103ff91e 	bne	r2,zero,c9c <__alt_data_end+0xff000c9c>
}
     cb8:	0001883a 	nop
     cbc:	e037883a 	mov	sp,fp
     cc0:	df000017 	ldw	fp,0(sp)
     cc4:	dec00104 	addi	sp,sp,4
     cc8:	f800283a 	ret

00000ccc <i2c_auto_detect>:

void i2c_auto_detect() {
     ccc:	defffb04 	addi	sp,sp,-20
     cd0:	dfc00415 	stw	ra,16(sp)
     cd4:	df000315 	stw	fp,12(sp)
     cd8:	df000304 	addi	fp,sp,12
	int nrdef,loop,value;
    i2c_busy_wait();
     cdc:	0000c900 	call	c90 <i2c_busy_wait>
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     ce0:	00c00104 	movi	r3,4
     ce4:	00804034 	movhi	r2,256
     ce8:	10842704 	addi	r2,r2,4252
     cec:	10c00035 	stwio	r3,0(r2)
    i2c_busy_wait();
     cf0:	0000c900 	call	c90 <i2c_busy_wait>
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     cf4:	00804034 	movhi	r2,256
     cf8:	10842504 	addi	r2,r2,4244
     cfc:	10800037 	ldwio	r2,0(r2)
     d00:	e0bffe15 	stw	r2,-8(fp)
    printf("Number of I2C devices detected: %d\n",nrdef);
     d04:	e17ffe17 	ldw	r5,-8(fp)
     d08:	01000074 	movhi	r4,1
     d0c:	21088704 	addi	r4,r4,8732
     d10:	00034cc0 	call	34cc <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     d14:	e03ffd15 	stw	zero,-12(fp)
     d18:	00001006 	br	d5c <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d1c:	00804034 	movhi	r2,256
     d20:	10842404 	addi	r2,r2,4240
     d24:	e0fffd17 	ldw	r3,-12(fp)
     d28:	10c00035 	stwio	r3,0(r2)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
     d2c:	00804034 	movhi	r2,256
     d30:	10842404 	addi	r2,r2,4240
     d34:	10800037 	ldwio	r2,0(r2)
     d38:	e0bfff15 	stw	r2,-4(fp)
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d3c:	e1bfff17 	ldw	r6,-4(fp)
     d40:	e17ffd17 	ldw	r5,-12(fp)
     d44:	01000074 	movhi	r4,1
     d48:	21089004 	addi	r4,r4,8768
     d4c:	00034cc0 	call	34cc <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800044 	addi	r2,r2,1
     d58:	e0bffd15 	stw	r2,-12(fp)
     d5c:	e0fffd17 	ldw	r3,-12(fp)
     d60:	e0bffe17 	ldw	r2,-8(fp)
     d64:	18bfed16 	blt	r3,r2,d1c <__alt_data_end+0xff000d1c>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     d68:	0001883a 	nop
     d6c:	e037883a 	mov	sp,fp
     d70:	dfc00117 	ldw	ra,4(sp)
     d74:	df000017 	ldw	fp,0(sp)
     d78:	dec00204 	addi	sp,sp,8
     d7c:	f800283a 	ret

00000d80 <i2c_short_read>:

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
     d80:	defffc04 	addi	sp,sp,-16
     d84:	dfc00315 	stw	ra,12(sp)
     d88:	df000215 	stw	fp,8(sp)
     d8c:	df000204 	addi	fp,sp,8
     d90:	2007883a 	mov	r3,r4
     d94:	2805883a 	mov	r2,r5
     d98:	e0fffe05 	stb	r3,-8(fp)
     d9c:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     da0:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     da4:	e0fffe03 	ldbu	r3,-8(fp)
     da8:	00804034 	movhi	r2,256
     dac:	10842404 	addi	r2,r2,4240
     db0:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     db4:	e0ffff0b 	ldhu	r3,-4(fp)
     db8:	00804034 	movhi	r2,256
     dbc:	10842504 	addi	r2,r2,4244
     dc0:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dc4:	00c010c4 	movi	r3,67
     dc8:	00804034 	movhi	r2,256
     dcc:	10842704 	addi	r2,r2,4252
     dd0:	10c00025 	stbio	r3,0(r2)
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     dd4:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     dd8:	e0bffe03 	ldbu	r2,-8(fp)
     ddc:	10c00044 	addi	r3,r2,1
     de0:	00804034 	movhi	r2,256
     de4:	10842404 	addi	r2,r2,4240
     de8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dec:	00c00884 	movi	r3,34
     df0:	00804034 	movhi	r2,256
     df4:	10842704 	addi	r2,r2,4252
     df8:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
     dfc:	0000c900 	call	c90 <i2c_busy_wait>
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     e00:	00804034 	movhi	r2,256
     e04:	10842604 	addi	r2,r2,4248
     e08:	10800037 	ldwio	r2,0(r2)
}
     e0c:	e037883a 	mov	sp,fp
     e10:	dfc00117 	ldw	ra,4(sp)
     e14:	df000017 	ldw	fp,0(sp)
     e18:	dec00204 	addi	sp,sp,8
     e1c:	f800283a 	ret

00000e20 <i2c_short_write>:

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
     e20:	defffb04 	addi	sp,sp,-20
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	df000315 	stw	fp,12(sp)
     e2c:	df000304 	addi	fp,sp,12
     e30:	2807883a 	mov	r3,r5
     e34:	3005883a 	mov	r2,r6
     e38:	e13ffd05 	stb	r4,-12(fp)
     e3c:	e0fffe0d 	sth	r3,-8(fp)
     e40:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     e44:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     e48:	e0fffd03 	ldbu	r3,-12(fp)
     e4c:	00804034 	movhi	r2,256
     e50:	10842404 	addi	r2,r2,4240
     e54:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     e58:	e0fffe0b 	ldhu	r3,-8(fp)
     e5c:	00804034 	movhi	r2,256
     e60:	10842504 	addi	r2,r2,4244
     e64:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     e68:	e0ffff0b 	ldhu	r3,-4(fp)
     e6c:	00804034 	movhi	r2,256
     e70:	10842604 	addi	r2,r2,4248
     e74:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     e78:	00c01084 	movi	r3,66
     e7c:	00804034 	movhi	r2,256
     e80:	10842704 	addi	r2,r2,4252
     e84:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     e88:	0000c900 	call	c90 <i2c_busy_wait>
}
     e8c:	0001883a 	nop
     e90:	e037883a 	mov	sp,fp
     e94:	dfc00117 	ldw	ra,4(sp)
     e98:	df000017 	ldw	fp,0(sp)
     e9c:	dec00204 	addi	sp,sp,8
     ea0:	f800283a 	ret

00000ea4 <LCD_Write_Command>:
#include "lcd_simple.h"

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
     ea4:	defffd04 	addi	sp,sp,-12
     ea8:	dfc00215 	stw	ra,8(sp)
     eac:	df000115 	stw	fp,4(sp)
     eb0:	df000104 	addi	fp,sp,4
     eb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eb8:	00804034 	movhi	r2,256
     ebc:	10841804 	addi	r2,r2,4192
     ec0:	e0ffff0b 	ldhu	r3,-4(fp)
     ec4:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     ec8:	01000284 	movi	r4,10
     ecc:	000fc0c0 	call	fc0c <usleep>
}
     ed0:	0001883a 	nop
     ed4:	e037883a 	mov	sp,fp
     ed8:	dfc00117 	ldw	ra,4(sp)
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00204 	addi	sp,sp,8
     ee4:	f800283a 	ret

00000ee8 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
     ee8:	defffd04 	addi	sp,sp,-12
     eec:	dfc00215 	stw	ra,8(sp)
     ef0:	df000115 	stw	fp,4(sp)
     ef4:	df000104 	addi	fp,sp,4
     ef8:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     efc:	00804034 	movhi	r2,256
     f00:	10841904 	addi	r2,r2,4196
     f04:	e0ffff0b 	ldhu	r3,-4(fp)
     f08:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     f0c:	01000284 	movi	r4,10
     f10:	000fc0c0 	call	fc0c <usleep>
}
     f14:	0001883a 	nop
     f18:	e037883a 	mov	sp,fp
     f1c:	dfc00117 	ldw	ra,4(sp)
     f20:	df000017 	ldw	fp,0(sp)
     f24:	dec00204 	addi	sp,sp,8
     f28:	f800283a 	ret

00000f2c <init_LCD>:


void init_LCD() {
     f2c:	defffe04 	addi	sp,sp,-8
     f30:	dfc00115 	stw	ra,4(sp)
     f34:	df000015 	stw	fp,0(sp)
     f38:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f3c:	00c00084 	movi	r3,2
     f40:	00804034 	movhi	r2,256
     f44:	10841a04 	addi	r2,r2,4200
     f48:	10c0002d 	sthio	r3,0(r2)
			         LCD_Sixteen_Bit|LCD_Reset|
			         LCD_RGB565_Mode|LCD_Color_Image); // Set 16 bit transfer mode and reset
	LCD_Write_Command(0x0028); 	//display OFF
     f4c:	01000a04 	movi	r4,40
     f50:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Command(0x0011); 	//exit SLEEP mode
     f54:	01000444 	movi	r4,17
     f58:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
     f5c:	0009883a 	mov	r4,zero
     f60:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CB); 	//Power Control A
     f64:	010032c4 	movi	r4,203
     f68:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0039); 	//always 0x39
     f6c:	01000e44 	movi	r4,57
     f70:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x002C); 	//always 0x2C
     f74:	01000b04 	movi	r4,44
     f78:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000); 	//always 0x00
     f7c:	0009883a 	mov	r4,zero
     f80:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0034); 	//Vcore = 1.6V
     f84:	01000d04 	movi	r4,52
     f88:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0002); 	//DDVDH = 5.6V
     f8c:	01000084 	movi	r4,2
     f90:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CF); 	//Power Control B
     f94:	010033c4 	movi	r4,207
     f98:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000); 	//always 0x00
     f9c:	0009883a 	mov	r4,zero
     fa0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081); 	//PCEQ off
     fa4:	01002044 	movi	r4,129
     fa8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0030); 	//ESD protection
     fac:	01000c04 	movi	r4,48
     fb0:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00E8); 	//Driver timing control A
     fb4:	01003a04 	movi	r4,232
     fb8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0085); 	//non - overlap
     fbc:	01002144 	movi	r4,133
     fc0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001); 	//EQ timing
     fc4:	01000044 	movi	r4,1
     fc8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0079); 	//Pre-chargetiming
     fcc:	01001e44 	movi	r4,121
     fd0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Command(0x00EA); 	//Driver timing control B
     fd4:	01003a84 	movi	r4,234
     fd8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);		//Gate driver timing
     fdc:	0009883a 	mov	r4,zero
     fe0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//always 0x00
     fe4:	0009883a 	mov	r4,zero
     fe8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0064);		//soft start 
     fec:	01001904 	movi	r4,100
     ff0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0003);		//power on sequence 
     ff4:	010000c4 	movi	r4,3
     ff8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0012);		//power on sequence 
     ffc:	01000484 	movi	r4,18
    1000:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081);		//DDVDH enhance on 
    1004:	01002044 	movi	r4,129
    1008:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F7); 	//Pump ratio control 
    100c:	01003dc4 	movi	r4,247
    1010:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0020); 	//DDVDH=2xVCI 
    1014:	01000804 	movi	r4,32
    1018:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);	//power control 1 
    101c:	01003004 	movi	r4,192
    1020:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
    1024:	01000984 	movi	r4,38
    1028:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0004); 	//second parameter for ILI9340 (ignored by ILI9341) 
    102c:	01000104 	movi	r4,4
    1030:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C1); 	//power control 2 
    1034:	01003044 	movi	r4,193
    1038:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
    103c:	01000444 	movi	r4,17
    1040:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C5); 	//VCOM control 1 
    1044:	01003144 	movi	r4,197
    1048:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
    104c:	01000d44 	movi	r4,53
    1050:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
    1054:	01000f84 	movi	r4,62
    1058:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C7); 	//VCOM control 2 
    105c:	010031c4 	movi	r4,199
    1060:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
    1064:	01002f84 	movi	r4,190
    1068:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B1); 	//frame rate control 
    106c:	01002c44 	movi	r4,177
    1070:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    1074:	0009883a 	mov	r4,zero
    1078:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
    107c:	01000404 	movi	r4,16
    1080:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x003A);	//pixel format = 16 bit per pixel 
    1084:	01000e84 	movi	r4,58
    1088:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
    108c:	01001544 	movi	r4,85
    1090:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B6); 	//display function control 
    1094:	01002d84 	movi	r4,182
    1098:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
    109c:	01000284 	movi	r4,10
    10a0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
    10a4:	01002884 	movi	r4,162
    10a8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F2); 	//3G Gamma control 
    10ac:	01003c84 	movi	r4,242
    10b0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0002);	 	//off 
    10b4:	01000084 	movi	r4,2
    10b8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0026); 	//Gamma curve 3 
    10bc:	01000984 	movi	r4,38
    10c0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
    10c4:	01000044 	movi	r4,1
    10c8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0036); 	//memory access control = BGR 
    10cc:	01000d84 	movi	r4,54
    10d0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10d4:	0009883a 	mov	r4,zero
    10d8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002A); 	//column address set 
    10dc:	01000a84 	movi	r4,42
    10e0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10e4:	0009883a 	mov	r4,zero
    10e8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    10ec:	0009883a 	mov	r4,zero
    10f0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
    10f4:	0009883a 	mov	r4,zero
    10f8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);		//end 0x00EF 
    10fc:	01003bc4 	movi	r4,239
    1100:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002B);	//page address set 
    1104:	01000ac4 	movi	r4,43
    1108:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    110c:	0009883a 	mov	r4,zero
    1110:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    1114:	0009883a 	mov	r4,zero
    1118:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
    111c:	01000044 	movi	r4,1
    1120:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003F);		//end 0x013F 
    1124:	01000fc4 	movi	r4,63
    1128:	0000ee80 	call	ee8 <LCD_Write_Data>
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    112c:	00c03c04 	movi	r3,240
    1130:	00804034 	movhi	r2,256
    1134:	10841d04 	addi	r2,r2,4212
    1138:	10c00035 	stwio	r3,0(r2)
	LCD_width = 240;
    113c:	00803c04 	movi	r2,240
    1140:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
    1144:	00805004 	movi	r2,320
    1148:	d0a6d20d 	sth	r2,-25784(gp)


	LCD_Write_Command(0x0029);
    114c:	01000a44 	movi	r4,41
    1150:	0000ea40 	call	ea4 <LCD_Write_Command>

}
    1154:	0001883a 	nop
    1158:	e037883a 	mov	sp,fp
    115c:	dfc00117 	ldw	ra,4(sp)
    1160:	df000017 	ldw	fp,0(sp)
    1164:	dec00204 	addi	sp,sp,8
    1168:	f800283a 	ret

0000116c <transfer_LCD_no_dma>:

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    116c:	defff904 	addi	sp,sp,-28
    1170:	dfc00615 	stw	ra,24(sp)
    1174:	df000515 	stw	fp,20(sp)
    1178:	df000504 	addi	fp,sp,20
    117c:	e13ffd15 	stw	r4,-12(fp)
    1180:	e17ffe15 	stw	r5,-8(fp)
    1184:	e1bfff15 	stw	r6,-4(fp)
	unsigned short *data_array = (unsigned short *)array;
    1188:	e0bffd17 	ldw	r2,-12(fp)
    118c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1190:	00804034 	movhi	r2,256
    1194:	10841e04 	addi	r2,r2,4216
    1198:	e0fffe17 	ldw	r3,-8(fp)
    119c:	10c00035 	stwio	r3,0(r2)
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
    11a0:	01000b04 	movi	r4,44
    11a4:	0000ea40 	call	ea4 <LCD_Write_Command>
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11a8:	e03ffb15 	stw	zero,-20(fp)
    11ac:	00000c06 	br	11e0 <transfer_LCD_no_dma+0x74>
		LCD_Write_Data(data_array[pixels]);
    11b0:	e0bffb17 	ldw	r2,-20(fp)
    11b4:	1085883a 	add	r2,r2,r2
    11b8:	1007883a 	mov	r3,r2
    11bc:	e0bffc17 	ldw	r2,-16(fp)
    11c0:	10c5883a 	add	r2,r2,r3
    11c4:	1080000b 	ldhu	r2,0(r2)
    11c8:	10bfffcc 	andi	r2,r2,65535
    11cc:	1009883a 	mov	r4,r2
    11d0:	0000ee80 	call	ee8 <LCD_Write_Data>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11d4:	e0bffb17 	ldw	r2,-20(fp)
    11d8:	10800044 	addi	r2,r2,1
    11dc:	e0bffb15 	stw	r2,-20(fp)
    11e0:	e0fffe17 	ldw	r3,-8(fp)
    11e4:	e0bfff17 	ldw	r2,-4(fp)
    11e8:	1885383a 	mul	r2,r3,r2
    11ec:	1007883a 	mov	r3,r2
    11f0:	e0bffb17 	ldw	r2,-20(fp)
    11f4:	10ffee36 	bltu	r2,r3,11b0 <__alt_data_end+0xff0011b0>
		LCD_Write_Data(data_array[pixels]);
}
    11f8:	0001883a 	nop
    11fc:	e037883a 	mov	sp,fp
    1200:	dfc00117 	ldw	ra,4(sp)
    1204:	df000017 	ldw	fp,0(sp)
    1208:	dec00204 	addi	sp,sp,8
    120c:	f800283a 	ret

00001210 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
    1210:	defffa04 	addi	sp,sp,-24
    1214:	df000515 	stw	fp,20(sp)
    1218:	df000504 	addi	fp,sp,20
    121c:	e13ffc15 	stw	r4,-16(fp)
    1220:	e17ffd15 	stw	r5,-12(fp)
    1224:	e1bffe15 	stw	r6,-8(fp)
    1228:	3805883a 	mov	r2,r7
    122c:	e0bfff05 	stb	r2,-4(fp)
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    1230:	d0a6d20b 	ldhu	r2,-25784(gp)
    1234:	10bfffcc 	andi	r2,r2,65535
    1238:	e0fffe17 	ldw	r3,-8(fp)
    123c:	1880010e 	bge	r3,r2,1244 <transfer_LCD_with_dma+0x34>
    1240:	1805883a 	mov	r2,r3
    1244:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    1248:	d0a6d28b 	ldhu	r2,-25782(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	e0fffd17 	ldw	r3,-12(fp)
    1254:	1880010e 	bge	r3,r2,125c <transfer_LCD_with_dma+0x4c>
    1258:	1805883a 	mov	r2,r3
    125c:	e0bffb8d 	sth	r2,-18(fp)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1260:	00804034 	movhi	r2,256
    1264:	10841e04 	addi	r2,r2,4216
    1268:	e0fffd17 	ldw	r3,-12(fp)
    126c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    1270:	e0fffc17 	ldw	r3,-16(fp)
    1274:	00804034 	movhi	r2,256
    1278:	10841b04 	addi	r2,r2,4204
    127c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    1280:	e0fffb8b 	ldhu	r3,-18(fp)
    1284:	e0bffb0b 	ldhu	r2,-20(fp)
    1288:	1887383a 	mul	r3,r3,r2
    128c:	00804034 	movhi	r2,256
    1290:	10841c04 	addi	r2,r2,4208
    1294:	10c00035 	stwio	r3,0(r2)
	if (grayscale==0)
    1298:	e0bfff07 	ldb	r2,-4(fp)
    129c:	1000051e 	bne	r2,zero,12b4 <transfer_LCD_with_dma+0xa4>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12a0:	00c04004 	movi	r3,256
    12a4:	00804034 	movhi	r2,256
    12a8:	10841a04 	addi	r2,r2,4200
    12ac:	10c0002d 	sthio	r3,0(r2)
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12b0:	00000406 	br	12c4 <transfer_LCD_with_dma+0xb4>
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12b4:	00c04404 	movi	r3,272
    12b8:	00804034 	movhi	r2,256
    12bc:	10841a04 	addi	r2,r2,4200
    12c0:	10c0002d 	sthio	r3,0(r2)
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12c4:	0001883a 	nop
    12c8:	e037883a 	mov	sp,fp
    12cc:	df000017 	ldw	fp,0(sp)
    12d0:	dec00104 	addi	sp,sp,4
    12d4:	f800283a 	ret

000012d8 <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
    12d8:	deffeb04 	addi	sp,sp,-84
    12dc:	dfc01415 	stw	ra,80(sp)
    12e0:	df001315 	stw	fp,76(sp)
    12e4:	dc401215 	stw	r17,72(sp)
    12e8:	dc001115 	stw	r16,68(sp)
    12ec:	df001304 	addi	fp,sp,76
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  int wait_cnt = 0; 		// wait at the end of loop so that printf shows result of current execution
    12f0:	e03ff515 	stw	zero,-44(fp)
  int max_wait = 100000;	// wait until wait_cnt reaches this value
    12f4:	008000b4 	movhi	r2,2
    12f8:	10a1a804 	addi	r2,r2,-31072
    12fc:	e0bff615 	stw	r2,-40(fp)

  //timer values for profiling
  alt_u32 start_sobel_x = 0;
    1300:	e03fed15 	stw	zero,-76(fp)
  alt_u32 end_sobel_x = 0;
    1304:	e03fee15 	stw	zero,-72(fp)
  alt_u32 start_sobel_y = 0;
    1308:	e03fef15 	stw	zero,-68(fp)
  alt_u32 end_sobel_y = 0;
    130c:	e03ff015 	stw	zero,-64(fp)
  alt_u32 start_sobel_th = 0;
    1310:	e03ff115 	stw	zero,-60(fp)
  alt_u32 end_sobel_th = 0;
    1314:	e03ff215 	stw	zero,-56(fp)
  alt_u32 start_grayscale = 0;
    1318:	e03ff315 	stw	zero,-52(fp)
  alt_u32 end_grayscale = 0;
    131c:	e03ff415 	stw	zero,-48(fp)

  init_LCD();
    1320:	0000f2c0 	call	f2c <init_LCD>
  init_camera();
    1324:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1328:	01000604 	movi	r4,24
    132c:	0002a7c0 	call	2a7c <vga_set_swap>
  printf("Hello from Nios II!\n");
    1330:	01000074 	movhi	r4,1
    1334:	21089904 	addi	r4,r4,8804
    1338:	00035c80 	call	35c8 <puts>
  cam_get_profiling();
    133c:	00007fc0 	call	7fc <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1340:	00007640 	call	764 <cam_get_xsize>
    1344:	143fffcc 	andi	r16,r2,65535
    1348:	00007b00 	call	7b0 <cam_get_ysize>
    134c:	10bfffcc 	andi	r2,r2,65535
    1350:	8085383a 	mul	r2,r16,r2
    1354:	1009883a 	mov	r4,r2
    1358:	0002c680 	call	2c68 <malloc>
    135c:	e0bff715 	stw	r2,-36(fp)
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1360:	00007640 	call	764 <cam_get_xsize>
    1364:	143fffcc 	andi	r16,r2,65535
    1368:	00007b00 	call	7b0 <cam_get_ysize>
    136c:	10bfffcc 	andi	r2,r2,65535
    1370:	8085383a 	mul	r2,r16,r2
    1374:	1009883a 	mov	r4,r2
    1378:	0002c680 	call	2c68 <malloc>
    137c:	e0bff815 	stw	r2,-32(fp)
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1380:	00007640 	call	764 <cam_get_xsize>
    1384:	143fffcc 	andi	r16,r2,65535
    1388:	00007b00 	call	7b0 <cam_get_ysize>
    138c:	10bfffcc 	andi	r2,r2,65535
    1390:	8085383a 	mul	r2,r16,r2
    1394:	1009883a 	mov	r4,r2
    1398:	0002c680 	call	2c68 <malloc>
    139c:	e0bff915 	stw	r2,-28(fp)
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    13a0:	00007640 	call	764 <cam_get_xsize>
    13a4:	143fffcc 	andi	r16,r2,65535
    13a8:	00007b00 	call	7b0 <cam_get_ysize>
    13ac:	10bfffcc 	andi	r2,r2,65535
    13b0:	8085383a 	mul	r2,r16,r2
    13b4:	1009883a 	mov	r4,r2
    13b8:	0002c680 	call	2c68 <malloc>
    13bc:	e0bffa15 	stw	r2,-24(fp)
  cam_set_image_pointer(0,buffer1);
    13c0:	e17ff717 	ldw	r5,-36(fp)
    13c4:	0009883a 	mov	r4,zero
    13c8:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    13cc:	e17ff817 	ldw	r5,-32(fp)
    13d0:	01000044 	movi	r4,1
    13d4:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    13d8:	e17ff917 	ldw	r5,-28(fp)
    13dc:	01000084 	movi	r4,2
    13e0:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    13e4:	e17ffa17 	ldw	r5,-24(fp)
    13e8:	010000c4 	movi	r4,3
    13ec:	00008a40 	call	8a4 <cam_set_image_pointer>
  enable_continues_mode();
    13f0:	00009fc0 	call	9fc <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    13f4:	00007640 	call	764 <cam_get_xsize>
    13f8:	10bfffcc 	andi	r2,r2,65535
    13fc:	1004d07a 	srli	r2,r2,1
    1400:	143fffcc 	andi	r16,r2,65535
    1404:	00007b00 	call	7b0 <cam_get_ysize>
    1408:	10bfffcc 	andi	r2,r2,65535
    140c:	100b883a 	mov	r5,r2
    1410:	8009883a 	mov	r4,r16
    1414:	00018a00 	call	18a0 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    1418:	0000a2c0 	call	a2c <new_image_available>
    141c:	10803fcc 	andi	r2,r2,255
    1420:	1080201c 	xori	r2,r2,128
    1424:	10bfe004 	addi	r2,r2,-128
    1428:	103ffb26 	beq	r2,zero,1418 <__alt_data_end+0xff001418>
		  if (current_image_valid()!=0) {
    142c:	000094c0 	call	94c <current_image_valid>
    1430:	10bfffcc 	andi	r2,r2,65535
    1434:	10a0001c 	xori	r2,r2,32768
    1438:	10a00004 	addi	r2,r2,-32768
    143c:	103ff626 	beq	r2,zero,1418 <__alt_data_end+0xff001418>
			  current_mode = DIPSW_get_value();
    1440:	0000a840 	call	a84 <DIPSW_get_value>
    1444:	e0bffb05 	stb	r2,-20(fp)
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    1448:	e0bffb03 	ldbu	r2,-20(fp)
    144c:	108001cc 	andi	r2,r2,7
    1450:	e0bffb45 	stb	r2,-19(fp)
			  image = (unsigned short*)current_image_pointer();
    1454:	00009840 	call	984 <current_image_pointer>
    1458:	e0bffc15 	stw	r2,-16(fp)
		      switch (mode) {
    145c:	e0bffb43 	ldbu	r2,-19(fp)
    1460:	10c00060 	cmpeqi	r3,r2,1
    1464:	1800211e 	bne	r3,zero,14ec <main+0x214>
    1468:	10c00088 	cmpgei	r3,r2,2
    146c:	1800021e 	bne	r3,zero,1478 <main+0x1a0>
    1470:	10000626 	beq	r2,zero,148c <main+0x1b4>
    1474:	0000a606 	br	1710 <main+0x438>
    1478:	10c000a0 	cmpeqi	r3,r2,2
    147c:	1800431e 	bne	r3,zero,158c <main+0x2b4>
    1480:	108000e0 	cmpeqi	r2,r2,3
    1484:	10006e1e 	bne	r2,zero,1640 <main+0x368>
    1488:	0000a106 	br	1710 <main+0x438>
		      case 0 : transfer_LCD_with_dma(&image[16520],
    148c:	e0fffc17 	ldw	r3,-16(fp)
    1490:	00a04414 	movui	r2,33040
    1494:	18a1883a 	add	r16,r3,r2
		                	cam_get_xsize()>>1,
    1498:	00007640 	call	764 <cam_get_xsize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    149c:	10bfffcc 	andi	r2,r2,65535
    14a0:	1004d07a 	srli	r2,r2,1
    14a4:	147fffcc 	andi	r17,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
    14a8:	00007b00 	call	7b0 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    14ac:	10bfffcc 	andi	r2,r2,65535
    14b0:	000f883a 	mov	r7,zero
    14b4:	100d883a 	mov	r6,r2
    14b8:	880b883a 	mov	r5,r17
    14bc:	8009883a 	mov	r4,r16
    14c0:	00012100 	call	1210 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    14c4:	e0bffb03 	ldbu	r2,-20(fp)
    14c8:	10803fcc 	andi	r2,r2,255
    14cc:	1080201c 	xori	r2,r2,128
    14d0:	10bfe004 	addi	r2,r2,-128
    14d4:	1000c00e 	bge	r2,zero,17d8 <main+0x500>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    14d8:	01000204 	movi	r4,8
    14dc:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    14e0:	e13ffc17 	ldw	r4,-16(fp)
    14e4:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    14e8:	0000bb06 	br	17d8 <main+0x500>
		      case 1 : alt_timestamp_start();
    14ec:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    14f0:	0010a2c0 	call	10a2c <alt_timestamp>
    14f4:	e0bff315 	stw	r2,-52(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    14f8:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    14fc:	10bfffcc 	andi	r2,r2,65535
    1500:	1004d07a 	srli	r2,r2,1
    1504:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1508:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    150c:	10bfffcc 	andi	r2,r2,65535
    1510:	100d883a 	mov	r6,r2
    1514:	800b883a 	mov	r5,r16
    1518:	e13ffc17 	ldw	r4,-16(fp)
    151c:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1520:	0010a2c0 	call	10a2c <alt_timestamp>
    1524:	e0bff415 	stw	r2,-48(fp)
		               grayscale = get_grayscale_picture();
    1528:	0000c700 	call	c70 <get_grayscale_picture>
    152c:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    1530:	e0bffd17 	ldw	r2,-12(fp)
    1534:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    1538:	00007640 	call	764 <cam_get_xsize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    153c:	10bfffcc 	andi	r2,r2,65535
    1540:	1004d07a 	srli	r2,r2,1
    1544:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    1548:	00007b00 	call	7b0 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    154c:	10bfffcc 	andi	r2,r2,65535
    1550:	01c00044 	movi	r7,1
    1554:	100d883a 	mov	r6,r2
    1558:	880b883a 	mov	r5,r17
    155c:	8009883a 	mov	r4,r16
    1560:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1564:	e0bffb03 	ldbu	r2,-20(fp)
    1568:	10803fcc 	andi	r2,r2,255
    156c:	1080201c 	xori	r2,r2,128
    1570:	10bfe004 	addi	r2,r2,-128
    1574:	10009a0e 	bge	r2,zero,17e0 <main+0x508>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1578:	01000604 	movi	r4,24
    157c:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1580:	e13ffd17 	ldw	r4,-12(fp)
    1584:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1588:	00009506 	br	17e0 <main+0x508>
		      case 2 : alt_timestamp_start();
    158c:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1590:	0010a2c0 	call	10a2c <alt_timestamp>
    1594:	e0bff315 	stw	r2,-52(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1598:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    159c:	10bfffcc 	andi	r2,r2,65535
    15a0:	1004d07a 	srli	r2,r2,1
    15a4:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    15a8:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    15ac:	10bfffcc 	andi	r2,r2,65535
    15b0:	100d883a 	mov	r6,r2
    15b4:	800b883a 	mov	r5,r16
    15b8:	e13ffc17 	ldw	r4,-16(fp)
    15bc:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    15c0:	0010a2c0 	call	10a2c <alt_timestamp>
    15c4:	e0bff415 	stw	r2,-48(fp)
		               grayscale = get_grayscale_picture();
    15c8:	0000c700 	call	c70 <get_grayscale_picture>
    15cc:	e0bffd15 	stw	r2,-12(fp)
		               sobel_x_with_rgb(grayscale);
    15d0:	e13ffd17 	ldw	r4,-12(fp)
    15d4:	0001e200 	call	1e20 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    15d8:	0002a080 	call	2a08 <GetSobel_rgb>
    15dc:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    15e0:	e0fffc17 	ldw	r3,-16(fp)
    15e4:	00a04414 	movui	r2,33040
    15e8:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    15ec:	00007640 	call	764 <cam_get_xsize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15f0:	10bfffcc 	andi	r2,r2,65535
    15f4:	1004d07a 	srli	r2,r2,1
    15f8:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    15fc:	00007b00 	call	7b0 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1600:	10bfffcc 	andi	r2,r2,65535
    1604:	000f883a 	mov	r7,zero
    1608:	100d883a 	mov	r6,r2
    160c:	880b883a 	mov	r5,r17
    1610:	8009883a 	mov	r4,r16
    1614:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1618:	e0bffb03 	ldbu	r2,-20(fp)
    161c:	10803fcc 	andi	r2,r2,255
    1620:	1080201c 	xori	r2,r2,128
    1624:	10bfe004 	addi	r2,r2,-128
    1628:	10006f0e 	bge	r2,zero,17e8 <main+0x510>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    162c:	01000204 	movi	r4,8
    1630:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1634:	e13ffc17 	ldw	r4,-16(fp)
    1638:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    163c:	00006a06 	br	17e8 <main+0x510>
		      case 3 : alt_timestamp_start();
    1640:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1644:	0010a2c0 	call	10a2c <alt_timestamp>
    1648:	e0bff315 	stw	r2,-52(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    164c:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1650:	10bfffcc 	andi	r2,r2,65535
    1654:	1004d07a 	srli	r2,r2,1
    1658:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    165c:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1660:	10bfffcc 	andi	r2,r2,65535
    1664:	100d883a 	mov	r6,r2
    1668:	800b883a 	mov	r5,r16
    166c:	e13ffc17 	ldw	r4,-16(fp)
    1670:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1674:	0010a2c0 	call	10a2c <alt_timestamp>
    1678:	e0bff415 	stw	r2,-48(fp)
		               grayscale = get_grayscale_picture();
    167c:	0000c700 	call	c70 <get_grayscale_picture>
    1680:	e0bffd15 	stw	r2,-12(fp)
		               alt_timestamp_start();
    1684:	00109b40 	call	109b4 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1688:	0010a2c0 	call	10a2c <alt_timestamp>
    168c:	e0bfed15 	stw	r2,-76(fp)
		               sobel_x(grayscale);
    1690:	e13ffd17 	ldw	r4,-12(fp)
    1694:	0001d580 	call	1d58 <sobel_x>
		               end_sobel_x = alt_timestamp();
    1698:	0010a2c0 	call	10a2c <alt_timestamp>
    169c:	e0bfee15 	stw	r2,-72(fp)
		               sobel_y_with_rgb(grayscale);
    16a0:	e13ffd17 	ldw	r4,-12(fp)
    16a4:	00020240 	call	2024 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    16a8:	0002a080 	call	2a08 <GetSobel_rgb>
    16ac:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    16b0:	e0fffc17 	ldw	r3,-16(fp)
    16b4:	00a04414 	movui	r2,33040
    16b8:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    16bc:	00007640 	call	764 <cam_get_xsize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    16c0:	10bfffcc 	andi	r2,r2,65535
    16c4:	1004d07a 	srli	r2,r2,1
    16c8:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    16cc:	00007b00 	call	7b0 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    16d0:	10bfffcc 	andi	r2,r2,65535
    16d4:	000f883a 	mov	r7,zero
    16d8:	100d883a 	mov	r6,r2
    16dc:	880b883a 	mov	r5,r17
    16e0:	8009883a 	mov	r4,r16
    16e4:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    16e8:	e0bffb03 	ldbu	r2,-20(fp)
    16ec:	10803fcc 	andi	r2,r2,255
    16f0:	1080201c 	xori	r2,r2,128
    16f4:	10bfe004 	addi	r2,r2,-128
    16f8:	10003d0e 	bge	r2,zero,17f0 <main+0x518>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    16fc:	01000204 	movi	r4,8
    1700:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1704:	e13ffc17 	ldw	r4,-16(fp)
    1708:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    170c:	00003806 	br	17f0 <main+0x518>
		      default: alt_timestamp_start();
    1710:	00109b40 	call	109b4 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1714:	0010a2c0 	call	10a2c <alt_timestamp>
    1718:	e0bff315 	stw	r2,-52(fp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    171c:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1720:	10bfffcc 	andi	r2,r2,65535
    1724:	1004d07a 	srli	r2,r2,1
    1728:	143fffcc 	andi	r16,r2,65535
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
    172c:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1730:	10bfffcc 	andi	r2,r2,65535
    1734:	100d883a 	mov	r6,r2
    1738:	800b883a 	mov	r5,r16
    173c:	e13ffc17 	ldw	r4,-16(fp)
    1740:	0000ab40 	call	ab4 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1744:	0010a2c0 	call	10a2c <alt_timestamp>
    1748:	e0bff415 	stw	r2,-48(fp)
                       grayscale = get_grayscale_picture();
    174c:	0000c700 	call	c70 <get_grayscale_picture>
    1750:	e0bffd15 	stw	r2,-12(fp)

                       alt_timestamp_start();
    1754:	00109b40 	call	109b4 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    1758:	0010a2c0 	call	10a2c <alt_timestamp>
    175c:	e0bfed15 	stw	r2,-76(fp)
                           result += pgx_array[7] * grayscale[(y+1)*sobel_width+x];
                           result += pgx_array[8] * grayscale[(y+1)*sobel_width+(x+1)];
                           sobel_x_result[y*sobel_width+x] = result; 	//sobel_mac(source,x,y,gx_array,sobel_width);
                         }
                       } // end sobel_x in-lining*/
                       sobel_complete(grayscale, 128);
    1760:	01402004 	movi	r5,128
    1764:	e13ffd17 	ldw	r4,-12(fp)
    1768:	00022740 	call	2274 <sobel_complete>
                       end_sobel_x = alt_timestamp();
    176c:	0010a2c0 	call	10a2c <alt_timestamp>
    1770:	e0bfee15 	stw	r2,-72(fp)

//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
    1774:	0002a280 	call	2a28 <GetSobelResult>
    1778:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    177c:	e0bffd17 	ldw	r2,-12(fp)
    1780:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    1784:	00007640 	call	764 <cam_get_xsize>
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1788:	10bfffcc 	andi	r2,r2,65535
    178c:	1004d07a 	srli	r2,r2,1
    1790:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    1794:	00007b00 	call	7b0 <cam_get_ysize>
//                       alt_timestamp_start();
//                       start_sobel_th = alt_timestamp();
//                       sobel_threshold(128);
//                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1798:	10bfffcc 	andi	r2,r2,65535
    179c:	01c00044 	movi	r7,1
    17a0:	100d883a 	mov	r6,r2
    17a4:	880b883a 	mov	r5,r17
    17a8:	8009883a 	mov	r4,r16
    17ac:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    17b0:	e0bffb03 	ldbu	r2,-20(fp)
    17b4:	10803fcc 	andi	r2,r2,255
    17b8:	1080201c 	xori	r2,r2,128
    17bc:	10bfe004 	addi	r2,r2,-128
    17c0:	10000d0e 	bge	r2,zero,17f8 <main+0x520>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    17c4:	01000604 	movi	r4,24
    17c8:	0002a7c0 	call	2a7c <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    17cc:	e13ffd17 	ldw	r4,-12(fp)
    17d0:	0002a480 	call	2a48 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    17d4:	00000806 	br	17f8 <main+0x520>
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17d8:	0001883a 	nop
    17dc:	00000706 	br	17fc <main+0x524>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    17e0:	0001883a 	nop
    17e4:	00000506 	br	17fc <main+0x524>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17e8:	0001883a 	nop
    17ec:	00000306 	br	17fc <main+0x524>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    17f0:	0001883a 	nop
    17f4:	00000106 	br	17fc <main+0x524>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    17f8:	0001883a 	nop
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    17fc:	01000074 	movhi	r4,1
    1800:	21089e04 	addi	r4,r4,8824
    1804:	00035c80 	call	35c8 <puts>
		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
    1808:	e0ffee17 	ldw	r3,-72(fp)
    180c:	e0bfed17 	ldw	r2,-76(fp)
    1810:	1885c83a 	sub	r2,r3,r2
    1814:	100b883a 	mov	r5,r2
    1818:	01000074 	movhi	r4,1
    181c:	2108a604 	addi	r4,r4,8856
    1820:	00034cc0 	call	34cc <printf>
		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
    1824:	e0fff017 	ldw	r3,-64(fp)
    1828:	e0bfef17 	ldw	r2,-68(fp)
    182c:	1885c83a 	sub	r2,r3,r2
    1830:	100b883a 	mov	r5,r2
    1834:	01000074 	movhi	r4,1
    1838:	2108ac04 	addi	r4,r4,8880
    183c:	00034cc0 	call	34cc <printf>
		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
    1840:	e0fff217 	ldw	r3,-56(fp)
    1844:	e0bff117 	ldw	r2,-60(fp)
    1848:	1885c83a 	sub	r2,r3,r2
    184c:	100b883a 	mov	r5,r2
    1850:	01000074 	movhi	r4,1
    1854:	2108b204 	addi	r4,r4,8904
    1858:	00034cc0 	call	34cc <printf>
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    185c:	e0fff417 	ldw	r3,-48(fp)
    1860:	e0bff317 	ldw	r2,-52(fp)
    1864:	1885c83a 	sub	r2,r3,r2
    1868:	100b883a 	mov	r5,r2
    186c:	01000074 	movhi	r4,1
    1870:	2108b804 	addi	r4,r4,8928
    1874:	00034cc0 	call	34cc <printf>

		      //while(wait_cnt < max_wait) { wait_cnt++; }

		      // reset timervalues
		      start_sobel_x = 0;
    1878:	e03fed15 	stw	zero,-76(fp)
		      end_sobel_x = 0;
    187c:	e03fee15 	stw	zero,-72(fp)
			  start_sobel_y = 0;
    1880:	e03fef15 	stw	zero,-68(fp)
			  end_sobel_y = 0;
    1884:	e03ff015 	stw	zero,-64(fp)
			  start_sobel_th = 0;
    1888:	e03ff115 	stw	zero,-60(fp)
			  end_sobel_th = 0;
    188c:	e03ff215 	stw	zero,-56(fp)
			  start_grayscale = 0;
    1890:	e03ff315 	stw	zero,-52(fp)
			  end_grayscale = 0;
    1894:	e03ff415 	stw	zero,-48(fp)
			  wait_cnt = 0;
    1898:	e03ff515 	stw	zero,-44(fp)
		  }
	  }
  } while (1);
    189c:	003ede06 	br	1418 <__alt_data_end+0xff001418>

000018a0 <init_sobel_arrays>:
                   {-1,-2,-1}};

const char * pgx_array = &gx_array;
const char * pgy_array = &gy_array;

void init_sobel_arrays(int width , int height) {
    18a0:	defffb04 	addi	sp,sp,-20
    18a4:	dfc00415 	stw	ra,16(sp)
    18a8:	df000315 	stw	fp,12(sp)
    18ac:	df000304 	addi	fp,sp,12
    18b0:	e13ffe15 	stw	r4,-8(fp)
    18b4:	e17fff15 	stw	r5,-4(fp)
	int loop;
	sobel_width = width;
    18b8:	e0bffe17 	ldw	r2,-8(fp)
    18bc:	d0a6d315 	stw	r2,-25780(gp)
	sobel_height = height;
    18c0:	e0bfff17 	ldw	r2,-4(fp)
    18c4:	d0a6d515 	stw	r2,-25772(gp)
	if (sobel_x_result != NULL)
    18c8:	d0a6d617 	ldw	r2,-25768(gp)
    18cc:	10000326 	beq	r2,zero,18dc <init_sobel_arrays+0x3c>
		free(sobel_x_result);
    18d0:	d0a6d617 	ldw	r2,-25768(gp)
    18d4:	1009883a 	mov	r4,r2
    18d8:	0002c7c0 	call	2c7c <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    18dc:	e0fffe17 	ldw	r3,-8(fp)
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	1885383a 	mul	r2,r3,r2
    18e8:	1085883a 	add	r2,r2,r2
    18ec:	1009883a 	mov	r4,r2
    18f0:	0002c680 	call	2c68 <malloc>
    18f4:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    18f8:	d0a6d717 	ldw	r2,-25764(gp)
    18fc:	10000326 	beq	r2,zero,190c <init_sobel_arrays+0x6c>
		free(sobel_y_result);
    1900:	d0a6d717 	ldw	r2,-25764(gp)
    1904:	1009883a 	mov	r4,r2
    1908:	0002c7c0 	call	2c7c <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    190c:	e0fffe17 	ldw	r3,-8(fp)
    1910:	e0bfff17 	ldw	r2,-4(fp)
    1914:	1885383a 	mul	r2,r3,r2
    1918:	1085883a 	add	r2,r2,r2
    191c:	1009883a 	mov	r4,r2
    1920:	0002c680 	call	2c68 <malloc>
    1924:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    1928:	d0a6d417 	ldw	r2,-25776(gp)
    192c:	10000326 	beq	r2,zero,193c <init_sobel_arrays+0x9c>
		free(sobel_result);
    1930:	d0a6d417 	ldw	r2,-25776(gp)
    1934:	1009883a 	mov	r4,r2
    1938:	0002c7c0 	call	2c7c <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    193c:	e0fffe17 	ldw	r3,-8(fp)
    1940:	e0bfff17 	ldw	r2,-4(fp)
    1944:	1885383a 	mul	r2,r3,r2
    1948:	1009883a 	mov	r4,r2
    194c:	0002c680 	call	2c68 <malloc>
    1950:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    1954:	d0a6d817 	ldw	r2,-25760(gp)
    1958:	10000326 	beq	r2,zero,1968 <init_sobel_arrays+0xc8>
		free(sobel_rgb565);
    195c:	d0a6d817 	ldw	r2,-25760(gp)
    1960:	1009883a 	mov	r4,r2
    1964:	0002c7c0 	call	2c7c <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    1968:	e0fffe17 	ldw	r3,-8(fp)
    196c:	e0bfff17 	ldw	r2,-4(fp)
    1970:	1885383a 	mul	r2,r3,r2
    1974:	1085883a 	add	r2,r2,r2
    1978:	1009883a 	mov	r4,r2
    197c:	0002c680 	call	2c68 <malloc>
    1980:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    1984:	e03ffd15 	stw	zero,-12(fp)
    1988:	00001606 	br	19e4 <init_sobel_arrays+0x144>
		sobel_x_result[loop] = 0;
    198c:	d0e6d617 	ldw	r3,-25768(gp)
    1990:	e0bffd17 	ldw	r2,-12(fp)
    1994:	1085883a 	add	r2,r2,r2
    1998:	1885883a 	add	r2,r3,r2
    199c:	1000000d 	sth	zero,0(r2)
		sobel_y_result[loop] = 0;
    19a0:	d0e6d717 	ldw	r3,-25764(gp)
    19a4:	e0bffd17 	ldw	r2,-12(fp)
    19a8:	1085883a 	add	r2,r2,r2
    19ac:	1885883a 	add	r2,r3,r2
    19b0:	1000000d 	sth	zero,0(r2)
		sobel_result[loop] = 0;
    19b4:	d0e6d417 	ldw	r3,-25776(gp)
    19b8:	e0bffd17 	ldw	r2,-12(fp)
    19bc:	1885883a 	add	r2,r3,r2
    19c0:	10000005 	stb	zero,0(r2)
		sobel_rgb565[loop] = 0;
    19c4:	d0e6d817 	ldw	r3,-25760(gp)
    19c8:	e0bffd17 	ldw	r2,-12(fp)
    19cc:	1085883a 	add	r2,r2,r2
    19d0:	1885883a 	add	r2,r3,r2
    19d4:	1000000d 	sth	zero,0(r2)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    19d8:	e0bffd17 	ldw	r2,-12(fp)
    19dc:	10800044 	addi	r2,r2,1
    19e0:	e0bffd15 	stw	r2,-12(fp)
    19e4:	e0fffe17 	ldw	r3,-8(fp)
    19e8:	e0bfff17 	ldw	r2,-4(fp)
    19ec:	1885383a 	mul	r2,r3,r2
    19f0:	e0fffd17 	ldw	r3,-12(fp)
    19f4:	18bfe516 	blt	r3,r2,198c <__alt_data_end+0xff00198c>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    19f8:	0001883a 	nop
    19fc:	e037883a 	mov	sp,fp
    1a00:	dfc00117 	ldw	ra,4(sp)
    1a04:	df000017 	ldw	fp,0(sp)
    1a08:	dec00204 	addi	sp,sp,8
    1a0c:	f800283a 	ret

00001a10 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1a10:	defffa04 	addi	sp,sp,-24
    1a14:	df000515 	stw	fp,20(sp)
    1a18:	df000504 	addi	fp,sp,20
    1a1c:	e13ffc15 	stw	r4,-16(fp)
    1a20:	e17ffd15 	stw	r5,-12(fp)
    1a24:	e1bffe15 	stw	r6,-8(fp)
    1a28:	e1ffff15 	stw	r7,-4(fp)
	short result = 0;
    1a2c:	e03ffb0d 	sth	zero,-20(fp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1a30:	e0bfff17 	ldw	r2,-4(fp)
    1a34:	10800003 	ldbu	r2,0(r2)
    1a38:	10c03fcc 	andi	r3,r2,255
    1a3c:	18c0201c 	xori	r3,r3,128
    1a40:	18ffe004 	addi	r3,r3,-128
    1a44:	e0bffe17 	ldw	r2,-8(fp)
    1a48:	10bfffc4 	addi	r2,r2,-1
    1a4c:	1009883a 	mov	r4,r2
    1a50:	e0800117 	ldw	r2,4(fp)
    1a54:	2089383a 	mul	r4,r4,r2
    1a58:	e0bffd17 	ldw	r2,-12(fp)
    1a5c:	2085883a 	add	r2,r4,r2
    1a60:	10bfffc4 	addi	r2,r2,-1
    1a64:	e13ffc17 	ldw	r4,-16(fp)
    1a68:	2085883a 	add	r2,r4,r2
    1a6c:	10800003 	ldbu	r2,0(r2)
    1a70:	10803fcc 	andi	r2,r2,255
    1a74:	1885383a 	mul	r2,r3,r2
    1a78:	1007883a 	mov	r3,r2
    1a7c:	e0bffb0b 	ldhu	r2,-20(fp)
    1a80:	1885883a 	add	r2,r3,r2
    1a84:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    1a88:	e0bfff17 	ldw	r2,-4(fp)
    1a8c:	10800044 	addi	r2,r2,1
    1a90:	10800003 	ldbu	r2,0(r2)
    1a94:	10c03fcc 	andi	r3,r2,255
    1a98:	18c0201c 	xori	r3,r3,128
    1a9c:	18ffe004 	addi	r3,r3,-128
    1aa0:	e0bffe17 	ldw	r2,-8(fp)
    1aa4:	10bfffc4 	addi	r2,r2,-1
    1aa8:	1009883a 	mov	r4,r2
    1aac:	e0800117 	ldw	r2,4(fp)
    1ab0:	2089383a 	mul	r4,r4,r2
    1ab4:	e0bffd17 	ldw	r2,-12(fp)
    1ab8:	2085883a 	add	r2,r4,r2
    1abc:	e13ffc17 	ldw	r4,-16(fp)
    1ac0:	2085883a 	add	r2,r4,r2
    1ac4:	10800003 	ldbu	r2,0(r2)
    1ac8:	10803fcc 	andi	r2,r2,255
    1acc:	1885383a 	mul	r2,r3,r2
    1ad0:	1007883a 	mov	r3,r2
    1ad4:	e0bffb0b 	ldhu	r2,-20(fp)
    1ad8:	1885883a 	add	r2,r3,r2
    1adc:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
    1ae0:	e0bfff17 	ldw	r2,-4(fp)
    1ae4:	10800084 	addi	r2,r2,2
    1ae8:	10800003 	ldbu	r2,0(r2)
    1aec:	10c03fcc 	andi	r3,r2,255
    1af0:	18c0201c 	xori	r3,r3,128
    1af4:	18ffe004 	addi	r3,r3,-128
    1af8:	e0bffe17 	ldw	r2,-8(fp)
    1afc:	10bfffc4 	addi	r2,r2,-1
    1b00:	1009883a 	mov	r4,r2
    1b04:	e0800117 	ldw	r2,4(fp)
    1b08:	2089383a 	mul	r4,r4,r2
    1b0c:	e0bffd17 	ldw	r2,-12(fp)
    1b10:	2085883a 	add	r2,r4,r2
    1b14:	10800044 	addi	r2,r2,1
    1b18:	e13ffc17 	ldw	r4,-16(fp)
    1b1c:	2085883a 	add	r2,r4,r2
    1b20:	10800003 	ldbu	r2,0(r2)
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	1885383a 	mul	r2,r3,r2
    1b2c:	1007883a 	mov	r3,r2
    1b30:	e0bffb0b 	ldhu	r2,-20(fp)
    1b34:	1885883a 	add	r2,r3,r2
    1b38:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1b3c:	e0bfff17 	ldw	r2,-4(fp)
    1b40:	108000c4 	addi	r2,r2,3
    1b44:	10800003 	ldbu	r2,0(r2)
    1b48:	10c03fcc 	andi	r3,r2,255
    1b4c:	18c0201c 	xori	r3,r3,128
    1b50:	18ffe004 	addi	r3,r3,-128
    1b54:	e13ffe17 	ldw	r4,-8(fp)
    1b58:	e0800117 	ldw	r2,4(fp)
    1b5c:	2089383a 	mul	r4,r4,r2
    1b60:	e0bffd17 	ldw	r2,-12(fp)
    1b64:	2085883a 	add	r2,r4,r2
    1b68:	10bfffc4 	addi	r2,r2,-1
    1b6c:	e13ffc17 	ldw	r4,-16(fp)
    1b70:	2085883a 	add	r2,r4,r2
    1b74:	10800003 	ldbu	r2,0(r2)
    1b78:	10803fcc 	andi	r2,r2,255
    1b7c:	1885383a 	mul	r2,r3,r2
    1b80:	1007883a 	mov	r3,r2
    1b84:	e0bffb0b 	ldhu	r2,-20(fp)
    1b88:	1885883a 	add	r2,r3,r2
    1b8c:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
    1b90:	e0bfff17 	ldw	r2,-4(fp)
    1b94:	10800104 	addi	r2,r2,4
    1b98:	10800003 	ldbu	r2,0(r2)
    1b9c:	10c03fcc 	andi	r3,r2,255
    1ba0:	18c0201c 	xori	r3,r3,128
    1ba4:	18ffe004 	addi	r3,r3,-128
    1ba8:	e13ffe17 	ldw	r4,-8(fp)
    1bac:	e0800117 	ldw	r2,4(fp)
    1bb0:	2089383a 	mul	r4,r4,r2
    1bb4:	e0bffd17 	ldw	r2,-12(fp)
    1bb8:	2085883a 	add	r2,r4,r2
    1bbc:	e13ffc17 	ldw	r4,-16(fp)
    1bc0:	2085883a 	add	r2,r4,r2
    1bc4:	10800003 	ldbu	r2,0(r2)
    1bc8:	10803fcc 	andi	r2,r2,255
    1bcc:	1885383a 	mul	r2,r3,r2
    1bd0:	1007883a 	mov	r3,r2
    1bd4:	e0bffb0b 	ldhu	r2,-20(fp)
    1bd8:	1885883a 	add	r2,r3,r2
    1bdc:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
    1be0:	e0bfff17 	ldw	r2,-4(fp)
    1be4:	10800144 	addi	r2,r2,5
    1be8:	10800003 	ldbu	r2,0(r2)
    1bec:	10c03fcc 	andi	r3,r2,255
    1bf0:	18c0201c 	xori	r3,r3,128
    1bf4:	18ffe004 	addi	r3,r3,-128
    1bf8:	e13ffe17 	ldw	r4,-8(fp)
    1bfc:	e0800117 	ldw	r2,4(fp)
    1c00:	2089383a 	mul	r4,r4,r2
    1c04:	e0bffd17 	ldw	r2,-12(fp)
    1c08:	2085883a 	add	r2,r4,r2
    1c0c:	10800044 	addi	r2,r2,1
    1c10:	e13ffc17 	ldw	r4,-16(fp)
    1c14:	2085883a 	add	r2,r4,r2
    1c18:	10800003 	ldbu	r2,0(r2)
    1c1c:	10803fcc 	andi	r2,r2,255
    1c20:	1885383a 	mul	r2,r3,r2
    1c24:	1007883a 	mov	r3,r2
    1c28:	e0bffb0b 	ldhu	r2,-20(fp)
    1c2c:	1885883a 	add	r2,r3,r2
    1c30:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1c34:	e0bfff17 	ldw	r2,-4(fp)
    1c38:	10800184 	addi	r2,r2,6
    1c3c:	10800003 	ldbu	r2,0(r2)
    1c40:	10c03fcc 	andi	r3,r2,255
    1c44:	18c0201c 	xori	r3,r3,128
    1c48:	18ffe004 	addi	r3,r3,-128
    1c4c:	e0bffe17 	ldw	r2,-8(fp)
    1c50:	10800044 	addi	r2,r2,1
    1c54:	1009883a 	mov	r4,r2
    1c58:	e0800117 	ldw	r2,4(fp)
    1c5c:	2089383a 	mul	r4,r4,r2
    1c60:	e0bffd17 	ldw	r2,-12(fp)
    1c64:	2085883a 	add	r2,r4,r2
    1c68:	10bfffc4 	addi	r2,r2,-1
    1c6c:	e13ffc17 	ldw	r4,-16(fp)
    1c70:	2085883a 	add	r2,r4,r2
    1c74:	10800003 	ldbu	r2,0(r2)
    1c78:	10803fcc 	andi	r2,r2,255
    1c7c:	1885383a 	mul	r2,r3,r2
    1c80:	1007883a 	mov	r3,r2
    1c84:	e0bffb0b 	ldhu	r2,-20(fp)
    1c88:	1885883a 	add	r2,r3,r2
    1c8c:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    1c90:	e0bfff17 	ldw	r2,-4(fp)
    1c94:	108001c4 	addi	r2,r2,7
    1c98:	10800003 	ldbu	r2,0(r2)
    1c9c:	10c03fcc 	andi	r3,r2,255
    1ca0:	18c0201c 	xori	r3,r3,128
    1ca4:	18ffe004 	addi	r3,r3,-128
    1ca8:	e0bffe17 	ldw	r2,-8(fp)
    1cac:	10800044 	addi	r2,r2,1
    1cb0:	1009883a 	mov	r4,r2
    1cb4:	e0800117 	ldw	r2,4(fp)
    1cb8:	2089383a 	mul	r4,r4,r2
    1cbc:	e0bffd17 	ldw	r2,-12(fp)
    1cc0:	2085883a 	add	r2,r4,r2
    1cc4:	e13ffc17 	ldw	r4,-16(fp)
    1cc8:	2085883a 	add	r2,r4,r2
    1ccc:	10800003 	ldbu	r2,0(r2)
    1cd0:	10803fcc 	andi	r2,r2,255
    1cd4:	1885383a 	mul	r2,r3,r2
    1cd8:	1007883a 	mov	r3,r2
    1cdc:	e0bffb0b 	ldhu	r2,-20(fp)
    1ce0:	1885883a 	add	r2,r3,r2
    1ce4:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1ce8:	e0bfff17 	ldw	r2,-4(fp)
    1cec:	10800204 	addi	r2,r2,8
    1cf0:	10800003 	ldbu	r2,0(r2)
    1cf4:	10c03fcc 	andi	r3,r2,255
    1cf8:	18c0201c 	xori	r3,r3,128
    1cfc:	18ffe004 	addi	r3,r3,-128
    1d00:	e0bffe17 	ldw	r2,-8(fp)
    1d04:	10800044 	addi	r2,r2,1
    1d08:	1009883a 	mov	r4,r2
    1d0c:	e0800117 	ldw	r2,4(fp)
    1d10:	2089383a 	mul	r4,r4,r2
    1d14:	e0bffd17 	ldw	r2,-12(fp)
    1d18:	2085883a 	add	r2,r4,r2
    1d1c:	10800044 	addi	r2,r2,1
    1d20:	e13ffc17 	ldw	r4,-16(fp)
    1d24:	2085883a 	add	r2,r4,r2
    1d28:	10800003 	ldbu	r2,0(r2)
    1d2c:	10803fcc 	andi	r2,r2,255
    1d30:	1885383a 	mul	r2,r3,r2
    1d34:	1007883a 	mov	r3,r2
    1d38:	e0bffb0b 	ldhu	r2,-20(fp)
    1d3c:	1885883a 	add	r2,r3,r2
    1d40:	e0bffb0d 	sth	r2,-20(fp)
	return result;
    1d44:	e0bffb0b 	ldhu	r2,-20(fp)
}
    1d48:	e037883a 	mov	sp,fp
    1d4c:	df000017 	ldw	fp,0(sp)
    1d50:	dec00104 	addi	sp,sp,4
    1d54:	f800283a 	ret

00001d58 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1d58:	defff904 	addi	sp,sp,-28
    1d5c:	dfc00615 	stw	ra,24(sp)
    1d60:	df000515 	stw	fp,20(sp)
    1d64:	dc000415 	stw	r16,16(sp)
    1d68:	df000504 	addi	fp,sp,20
    1d6c:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d70:	00800044 	movi	r2,1
    1d74:	e0bffd15 	stw	r2,-12(fp)
    1d78:	00001e06 	br	1df4 <sobel_x+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d7c:	00800044 	movi	r2,1
    1d80:	e0bffc15 	stw	r2,-16(fp)
    1d84:	00001406 	br	1dd8 <sobel_x+0x80>
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1d88:	d0e6d617 	ldw	r3,-25768(gp)
    1d8c:	d126d317 	ldw	r4,-25780(gp)
    1d90:	e0bffd17 	ldw	r2,-12(fp)
    1d94:	2089383a 	mul	r4,r4,r2
    1d98:	e0bffc17 	ldw	r2,-16(fp)
    1d9c:	2085883a 	add	r2,r4,r2
    1da0:	1085883a 	add	r2,r2,r2
    1da4:	18a1883a 	add	r16,r3,r2
    1da8:	d0a6d317 	ldw	r2,-25780(gp)
    1dac:	d8800015 	stw	r2,0(sp)
    1db0:	01c00074 	movhi	r7,1
    1db4:	39c8bdc4 	addi	r7,r7,8951
    1db8:	e1bffd17 	ldw	r6,-12(fp)
    1dbc:	e17ffc17 	ldw	r5,-16(fp)
    1dc0:	e13ffe17 	ldw	r4,-8(fp)
    1dc4:	0001a100 	call	1a10 <sobel_mac>
    1dc8:	8080000d 	sth	r2,0(r16)

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1dcc:	e0bffc17 	ldw	r2,-16(fp)
    1dd0:	10800044 	addi	r2,r2,1
    1dd4:	e0bffc15 	stw	r2,-16(fp)
    1dd8:	d0a6d317 	ldw	r2,-25780(gp)
    1ddc:	10bfffc4 	addi	r2,r2,-1
    1de0:	e0fffc17 	ldw	r3,-16(fp)
    1de4:	18bfe816 	blt	r3,r2,1d88 <__alt_data_end+0xff001d88>
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1de8:	e0bffd17 	ldw	r2,-12(fp)
    1dec:	10800044 	addi	r2,r2,1
    1df0:	e0bffd15 	stw	r2,-12(fp)
    1df4:	d0a6d517 	ldw	r2,-25772(gp)
    1df8:	10bfffc4 	addi	r2,r2,-1
    1dfc:	e0fffd17 	ldw	r3,-12(fp)
    1e00:	18bfde16 	blt	r3,r2,1d7c <__alt_data_end+0xff001d7c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    1e04:	0001883a 	nop
    1e08:	e6ffff04 	addi	sp,fp,-4
    1e0c:	dfc00217 	ldw	ra,8(sp)
    1e10:	df000117 	ldw	fp,4(sp)
    1e14:	dc000017 	ldw	r16,0(sp)
    1e18:	dec00304 	addi	sp,sp,12
    1e1c:	f800283a 	ret

00001e20 <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    1e20:	defff904 	addi	sp,sp,-28
    1e24:	dfc00615 	stw	ra,24(sp)
    1e28:	df000515 	stw	fp,20(sp)
    1e2c:	df000504 	addi	fp,sp,20
    1e30:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e34:	00800044 	movi	r2,1
    1e38:	e0bffd15 	stw	r2,-12(fp)
    1e3c:	00003d06 	br	1f34 <sobel_x_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1e40:	00800044 	movi	r2,1
    1e44:	e0bffc15 	stw	r2,-16(fp)
    1e48:	00003306 	br	1f18 <sobel_x_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
    1e4c:	d0a6d317 	ldw	r2,-25780(gp)
    1e50:	d8800015 	stw	r2,0(sp)
    1e54:	01c00074 	movhi	r7,1
    1e58:	39c8bdc4 	addi	r7,r7,8951
    1e5c:	e1bffd17 	ldw	r6,-12(fp)
    1e60:	e17ffc17 	ldw	r5,-16(fp)
    1e64:	e13fff17 	ldw	r4,-4(fp)
    1e68:	0001a100 	call	1a10 <sobel_mac>
    1e6c:	e0bffe0d 	sth	r2,-8(fp)
          sobel_x_result[y*sobel_width+x] = result;
    1e70:	d0e6d617 	ldw	r3,-25768(gp)
    1e74:	d126d317 	ldw	r4,-25780(gp)
    1e78:	e0bffd17 	ldw	r2,-12(fp)
    1e7c:	2089383a 	mul	r4,r4,r2
    1e80:	e0bffc17 	ldw	r2,-16(fp)
    1e84:	2085883a 	add	r2,r4,r2
    1e88:	1085883a 	add	r2,r2,r2
    1e8c:	1885883a 	add	r2,r3,r2
    1e90:	e0fffe0b 	ldhu	r3,-8(fp)
    1e94:	10c0000d 	sth	r3,0(r2)
          if (result < 0) {
    1e98:	e0bffe0f 	ldh	r2,-8(fp)
    1e9c:	10000e0e 	bge	r2,zero,1ed8 <sobel_x_with_rgb+0xb8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1ea0:	d0e6d817 	ldw	r3,-25760(gp)
    1ea4:	d126d317 	ldw	r4,-25780(gp)
    1ea8:	e0bffd17 	ldw	r2,-12(fp)
    1eac:	2089383a 	mul	r4,r4,r2
    1eb0:	e0bffc17 	ldw	r2,-16(fp)
    1eb4:	2085883a 	add	r2,r4,r2
    1eb8:	1085883a 	add	r2,r2,r2
    1ebc:	1885883a 	add	r2,r3,r2
    1ec0:	e0fffe0f 	ldh	r3,-8(fp)
    1ec4:	00c7c83a 	sub	r3,zero,r3
    1ec8:	1807d0ba 	srai	r3,r3,2
    1ecc:	1806917a 	slli	r3,r3,5
    1ed0:	10c0000d 	sth	r3,0(r2)
    1ed4:	00000d06 	br	1f0c <sobel_x_with_rgb+0xec>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1ed8:	d0e6d817 	ldw	r3,-25760(gp)
    1edc:	d126d317 	ldw	r4,-25780(gp)
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	2089383a 	mul	r4,r4,r2
    1ee8:	e0bffc17 	ldw	r2,-16(fp)
    1eec:	2085883a 	add	r2,r4,r2
    1ef0:	1085883a 	add	r2,r2,r2
    1ef4:	1885883a 	add	r2,r3,r2
    1ef8:	e0fffe0f 	ldh	r3,-8(fp)
    1efc:	1807d0fa 	srai	r3,r3,3
    1f00:	18ffffcc 	andi	r3,r3,65535
    1f04:	180692fa 	slli	r3,r3,11
    1f08:	10c0000d 	sth	r3,0(r2)
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f0c:	e0bffc17 	ldw	r2,-16(fp)
    1f10:	10800044 	addi	r2,r2,1
    1f14:	e0bffc15 	stw	r2,-16(fp)
    1f18:	d0a6d317 	ldw	r2,-25780(gp)
    1f1c:	10bfffc4 	addi	r2,r2,-1
    1f20:	e0fffc17 	ldw	r3,-16(fp)
    1f24:	18bfc916 	blt	r3,r2,1e4c <__alt_data_end+0xff001e4c>

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1f28:	e0bffd17 	ldw	r2,-12(fp)
    1f2c:	10800044 	addi	r2,r2,1
    1f30:	e0bffd15 	stw	r2,-12(fp)
    1f34:	d0a6d517 	ldw	r2,-25772(gp)
    1f38:	10bfffc4 	addi	r2,r2,-1
    1f3c:	e0fffd17 	ldw	r3,-12(fp)
    1f40:	18bfbf16 	blt	r3,r2,1e40 <__alt_data_end+0xff001e40>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1f44:	0001883a 	nop
    1f48:	e037883a 	mov	sp,fp
    1f4c:	dfc00117 	ldw	ra,4(sp)
    1f50:	df000017 	ldw	fp,0(sp)
    1f54:	dec00204 	addi	sp,sp,8
    1f58:	f800283a 	ret

00001f5c <sobel_y>:

void sobel_y( unsigned char *source ) {
    1f5c:	defff904 	addi	sp,sp,-28
    1f60:	dfc00615 	stw	ra,24(sp)
    1f64:	df000515 	stw	fp,20(sp)
    1f68:	dc000415 	stw	r16,16(sp)
    1f6c:	df000504 	addi	fp,sp,20
    1f70:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1f74:	00800044 	movi	r2,1
    1f78:	e0bffd15 	stw	r2,-12(fp)
    1f7c:	00001e06 	br	1ff8 <sobel_y+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1f80:	00800044 	movi	r2,1
    1f84:	e0bffc15 	stw	r2,-16(fp)
    1f88:	00001406 	br	1fdc <sobel_y+0x80>
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1f8c:	d0e6d717 	ldw	r3,-25764(gp)
    1f90:	d126d317 	ldw	r4,-25780(gp)
    1f94:	e0bffd17 	ldw	r2,-12(fp)
    1f98:	2089383a 	mul	r4,r4,r2
    1f9c:	e0bffc17 	ldw	r2,-16(fp)
    1fa0:	2085883a 	add	r2,r4,r2
    1fa4:	1085883a 	add	r2,r2,r2
    1fa8:	18a1883a 	add	r16,r3,r2
    1fac:	d0a6d317 	ldw	r2,-25780(gp)
    1fb0:	d8800015 	stw	r2,0(sp)
    1fb4:	01c00074 	movhi	r7,1
    1fb8:	39c8c004 	addi	r7,r7,8960
    1fbc:	e1bffd17 	ldw	r6,-12(fp)
    1fc0:	e17ffc17 	ldw	r5,-16(fp)
    1fc4:	e13ffe17 	ldw	r4,-8(fp)
    1fc8:	0001a100 	call	1a10 <sobel_mac>
    1fcc:	8080000d 	sth	r2,0(r16)

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1fd0:	e0bffc17 	ldw	r2,-16(fp)
    1fd4:	10800044 	addi	r2,r2,1
    1fd8:	e0bffc15 	stw	r2,-16(fp)
    1fdc:	d0a6d317 	ldw	r2,-25780(gp)
    1fe0:	10bfffc4 	addi	r2,r2,-1
    1fe4:	e0fffc17 	ldw	r3,-16(fp)
    1fe8:	18bfe816 	blt	r3,r2,1f8c <__alt_data_end+0xff001f8c>
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1fec:	e0bffd17 	ldw	r2,-12(fp)
    1ff0:	10800044 	addi	r2,r2,1
    1ff4:	e0bffd15 	stw	r2,-12(fp)
    1ff8:	d0a6d517 	ldw	r2,-25772(gp)
    1ffc:	10bfffc4 	addi	r2,r2,-1
    2000:	e0fffd17 	ldw	r3,-12(fp)
    2004:	18bfde16 	blt	r3,r2,1f80 <__alt_data_end+0xff001f80>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    2008:	0001883a 	nop
    200c:	e6ffff04 	addi	sp,fp,-4
    2010:	dfc00217 	ldw	ra,8(sp)
    2014:	df000117 	ldw	fp,4(sp)
    2018:	dc000017 	ldw	r16,0(sp)
    201c:	dec00304 	addi	sp,sp,12
    2020:	f800283a 	ret

00002024 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    2024:	defff904 	addi	sp,sp,-28
    2028:	dfc00615 	stw	ra,24(sp)
    202c:	df000515 	stw	fp,20(sp)
    2030:	df000504 	addi	fp,sp,20
    2034:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2038:	00800044 	movi	r2,1
    203c:	e0bffd15 	stw	r2,-12(fp)
    2040:	00003d06 	br	2138 <sobel_y_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2044:	00800044 	movi	r2,1
    2048:	e0bffc15 	stw	r2,-16(fp)
    204c:	00003306 	br	211c <sobel_y_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
    2050:	d0a6d317 	ldw	r2,-25780(gp)
    2054:	d8800015 	stw	r2,0(sp)
    2058:	01c00074 	movhi	r7,1
    205c:	39c8c004 	addi	r7,r7,8960
    2060:	e1bffd17 	ldw	r6,-12(fp)
    2064:	e17ffc17 	ldw	r5,-16(fp)
    2068:	e13fff17 	ldw	r4,-4(fp)
    206c:	0001a100 	call	1a10 <sobel_mac>
    2070:	e0bffe0d 	sth	r2,-8(fp)
         sobel_y_result[y*sobel_width+x] = result;
    2074:	d0e6d717 	ldw	r3,-25764(gp)
    2078:	d126d317 	ldw	r4,-25780(gp)
    207c:	e0bffd17 	ldw	r2,-12(fp)
    2080:	2089383a 	mul	r4,r4,r2
    2084:	e0bffc17 	ldw	r2,-16(fp)
    2088:	2085883a 	add	r2,r4,r2
    208c:	1085883a 	add	r2,r2,r2
    2090:	1885883a 	add	r2,r3,r2
    2094:	e0fffe0b 	ldhu	r3,-8(fp)
    2098:	10c0000d 	sth	r3,0(r2)
         if (result < 0) {
    209c:	e0bffe0f 	ldh	r2,-8(fp)
    20a0:	10000e0e 	bge	r2,zero,20dc <sobel_y_with_rgb+0xb8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    20a4:	d0e6d817 	ldw	r3,-25760(gp)
    20a8:	d126d317 	ldw	r4,-25780(gp)
    20ac:	e0bffd17 	ldw	r2,-12(fp)
    20b0:	2089383a 	mul	r4,r4,r2
    20b4:	e0bffc17 	ldw	r2,-16(fp)
    20b8:	2085883a 	add	r2,r4,r2
    20bc:	1085883a 	add	r2,r2,r2
    20c0:	1885883a 	add	r2,r3,r2
    20c4:	e0fffe0f 	ldh	r3,-8(fp)
    20c8:	00c7c83a 	sub	r3,zero,r3
    20cc:	1807d0ba 	srai	r3,r3,2
    20d0:	1806917a 	slli	r3,r3,5
    20d4:	10c0000d 	sth	r3,0(r2)
    20d8:	00000d06 	br	2110 <sobel_y_with_rgb+0xec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    20dc:	d0e6d817 	ldw	r3,-25760(gp)
    20e0:	d126d317 	ldw	r4,-25780(gp)
    20e4:	e0bffd17 	ldw	r2,-12(fp)
    20e8:	2089383a 	mul	r4,r4,r2
    20ec:	e0bffc17 	ldw	r2,-16(fp)
    20f0:	2085883a 	add	r2,r4,r2
    20f4:	1085883a 	add	r2,r2,r2
    20f8:	1885883a 	add	r2,r3,r2
    20fc:	e0fffe0f 	ldh	r3,-8(fp)
    2100:	1807d0fa 	srai	r3,r3,3
    2104:	18ffffcc 	andi	r3,r3,65535
    2108:	180692fa 	slli	r3,r3,11
    210c:	10c0000d 	sth	r3,0(r2)
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2110:	e0bffc17 	ldw	r2,-16(fp)
    2114:	10800044 	addi	r2,r2,1
    2118:	e0bffc15 	stw	r2,-16(fp)
    211c:	d0a6d317 	ldw	r2,-25780(gp)
    2120:	10bfffc4 	addi	r2,r2,-1
    2124:	e0fffc17 	ldw	r3,-16(fp)
    2128:	18bfc916 	blt	r3,r2,2050 <__alt_data_end+0xff002050>

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    212c:	e0bffd17 	ldw	r2,-12(fp)
    2130:	10800044 	addi	r2,r2,1
    2134:	e0bffd15 	stw	r2,-12(fp)
    2138:	d0a6d517 	ldw	r2,-25772(gp)
    213c:	10bfffc4 	addi	r2,r2,-1
    2140:	e0fffd17 	ldw	r3,-12(fp)
    2144:	18bfbf16 	blt	r3,r2,2044 <__alt_data_end+0xff002044>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    2148:	0001883a 	nop
    214c:	e037883a 	mov	sp,fp
    2150:	dfc00117 	ldw	ra,4(sp)
    2154:	df000017 	ldw	fp,0(sp)
    2158:	dec00204 	addi	sp,sp,8
    215c:	f800283a 	ret

00002160 <sobel_threshold>:

void sobel_threshold(short threshold) {
    2160:	defffa04 	addi	sp,sp,-24
    2164:	df000515 	stw	fp,20(sp)
    2168:	df000504 	addi	fp,sp,20
    216c:	2005883a 	mov	r2,r4
    2170:	e0bfff0d 	sth	r2,-4(fp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2174:	00800044 	movi	r2,1
    2178:	e0bffc15 	stw	r2,-16(fp)
    217c:	00003406 	br	2250 <sobel_threshold+0xf0>
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2180:	00800044 	movi	r2,1
    2184:	e0bffb15 	stw	r2,-20(fp)
    2188:	00002a06 	br	2234 <sobel_threshold+0xd4>
			arrayindex = (y*sobel_width)+x;
    218c:	d0e6d317 	ldw	r3,-25780(gp)
    2190:	e0bffc17 	ldw	r2,-16(fp)
    2194:	1887383a 	mul	r3,r3,r2
    2198:	e0bffb17 	ldw	r2,-20(fp)
    219c:	1885883a 	add	r2,r3,r2
    21a0:	e0bffd15 	stw	r2,-12(fp)
			value = sobel_x_result[arrayindex];
    21a4:	d0e6d617 	ldw	r3,-25768(gp)
    21a8:	e0bffd17 	ldw	r2,-12(fp)
    21ac:	1085883a 	add	r2,r2,r2
    21b0:	1885883a 	add	r2,r3,r2
    21b4:	1080000b 	ldhu	r2,0(r2)
    21b8:	e0bffe0d 	sth	r2,-8(fp)
			sum = (value < 0) ? -value : value;
    21bc:	e0bffe0f 	ldh	r2,-8(fp)
    21c0:	1000010e 	bge	r2,zero,21c8 <sobel_threshold+0x68>
    21c4:	0085c83a 	sub	r2,zero,r2
    21c8:	e0bffe8d 	sth	r2,-6(fp)
			value = sobel_y_result[arrayindex];
    21cc:	d0e6d717 	ldw	r3,-25764(gp)
    21d0:	e0bffd17 	ldw	r2,-12(fp)
    21d4:	1085883a 	add	r2,r2,r2
    21d8:	1885883a 	add	r2,r3,r2
    21dc:	1080000b 	ldhu	r2,0(r2)
    21e0:	e0bffe0d 	sth	r2,-8(fp)
			sum += (value < 0) ? -value : value;
    21e4:	e0bffe0f 	ldh	r2,-8(fp)
    21e8:	1000010e 	bge	r2,zero,21f0 <sobel_threshold+0x90>
    21ec:	0085c83a 	sub	r2,zero,r2
    21f0:	1007883a 	mov	r3,r2
    21f4:	e0bffe8b 	ldhu	r2,-6(fp)
    21f8:	1885883a 	add	r2,r3,r2
    21fc:	e0bffe8d 	sth	r2,-6(fp)
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2200:	d0e6d417 	ldw	r3,-25776(gp)
    2204:	e0bffd17 	ldw	r2,-12(fp)
    2208:	1887883a 	add	r3,r3,r2
    220c:	e0bffe8f 	ldh	r2,-6(fp)
    2210:	e13fff0f 	ldh	r4,-4(fp)
    2214:	2080020e 	bge	r4,r2,2220 <sobel_threshold+0xc0>
    2218:	00bfffc4 	movi	r2,-1
    221c:	00000106 	br	2224 <sobel_threshold+0xc4>
    2220:	0005883a 	mov	r2,zero
    2224:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2228:	e0bffb17 	ldw	r2,-20(fp)
    222c:	10800044 	addi	r2,r2,1
    2230:	e0bffb15 	stw	r2,-20(fp)
    2234:	d0a6d317 	ldw	r2,-25780(gp)
    2238:	10bfffc4 	addi	r2,r2,-1
    223c:	e0fffb17 	ldw	r3,-20(fp)
    2240:	18bfd216 	blt	r3,r2,218c <__alt_data_end+0xff00218c>
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    2244:	e0bffc17 	ldw	r2,-16(fp)
    2248:	10800044 	addi	r2,r2,1
    224c:	e0bffc15 	stw	r2,-16(fp)
    2250:	d0a6d517 	ldw	r2,-25772(gp)
    2254:	10bfffc4 	addi	r2,r2,-1
    2258:	e0fffc17 	ldw	r3,-16(fp)
    225c:	18bfc816 	blt	r3,r2,2180 <__alt_data_end+0xff002180>
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
    2260:	0001883a 	nop
    2264:	e037883a 	mov	sp,fp
    2268:	df000017 	ldw	fp,0(sp)
    226c:	dec00104 	addi	sp,sp,4
    2270:	f800283a 	ret

00002274 <sobel_complete>:

void sobel_complete( unsigned char *source, short threshold)
{
    2274:	defff804 	addi	sp,sp,-32
    2278:	df000715 	stw	fp,28(sp)
    227c:	df000704 	addi	fp,sp,28
    2280:	e13ffe15 	stw	r4,-8(fp)
    2284:	2805883a 	mov	r2,r5
    2288:	e0bfff0d 	sth	r2,-4(fp)
   short result = 0;
    228c:	e03ff90d 	sth	zero,-28(fp)
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2290:	00800044 	movi	r2,1
    2294:	e0bffb15 	stw	r2,-20(fp)
    2298:	0001d206 	br	29e4 <sobel_complete+0x770>
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    229c:	00800044 	movi	r2,1
    22a0:	e0bffa15 	stw	r2,-24(fp)
    22a4:	0001c806 	br	29c8 <sobel_complete+0x754>
	   arrayindex = (y*sobel_width)+x;
    22a8:	d0e6d317 	ldw	r3,-25780(gp)
    22ac:	e0bffb17 	ldw	r2,-20(fp)
    22b0:	1887383a 	mul	r3,r3,r2
    22b4:	e0bffa17 	ldw	r2,-24(fp)
    22b8:	1885883a 	add	r2,r3,r2
    22bc:	e0bffc15 	stw	r2,-16(fp)

	   // sobel_x in-lining
	   result += pgx_array[0] * source[(y-1)*sobel_width+(x-1)];
    22c0:	d0a00017 	ldw	r2,-32768(gp)
    22c4:	10800003 	ldbu	r2,0(r2)
    22c8:	10c03fcc 	andi	r3,r2,255
    22cc:	18c0201c 	xori	r3,r3,128
    22d0:	18ffe004 	addi	r3,r3,-128
    22d4:	e0bffb17 	ldw	r2,-20(fp)
    22d8:	113fffc4 	addi	r4,r2,-1
    22dc:	d0a6d317 	ldw	r2,-25780(gp)
    22e0:	2089383a 	mul	r4,r4,r2
    22e4:	e0bffa17 	ldw	r2,-24(fp)
    22e8:	10bfffc4 	addi	r2,r2,-1
    22ec:	2085883a 	add	r2,r4,r2
    22f0:	1009883a 	mov	r4,r2
    22f4:	e0bffe17 	ldw	r2,-8(fp)
    22f8:	1105883a 	add	r2,r2,r4
    22fc:	10800003 	ldbu	r2,0(r2)
    2300:	10803fcc 	andi	r2,r2,255
    2304:	1885383a 	mul	r2,r3,r2
    2308:	1007883a 	mov	r3,r2
    230c:	e0bff90b 	ldhu	r2,-28(fp)
    2310:	1885883a 	add	r2,r3,r2
    2314:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[1] * source[(y-1)*sobel_width+x];
    2318:	d0a00017 	ldw	r2,-32768(gp)
    231c:	10800044 	addi	r2,r2,1
    2320:	10800003 	ldbu	r2,0(r2)
    2324:	10c03fcc 	andi	r3,r2,255
    2328:	18c0201c 	xori	r3,r3,128
    232c:	18ffe004 	addi	r3,r3,-128
    2330:	e0bffb17 	ldw	r2,-20(fp)
    2334:	113fffc4 	addi	r4,r2,-1
    2338:	d0a6d317 	ldw	r2,-25780(gp)
    233c:	2089383a 	mul	r4,r4,r2
    2340:	e0bffa17 	ldw	r2,-24(fp)
    2344:	2085883a 	add	r2,r4,r2
    2348:	1009883a 	mov	r4,r2
    234c:	e0bffe17 	ldw	r2,-8(fp)
    2350:	1105883a 	add	r2,r2,r4
    2354:	10800003 	ldbu	r2,0(r2)
    2358:	10803fcc 	andi	r2,r2,255
    235c:	1885383a 	mul	r2,r3,r2
    2360:	1007883a 	mov	r3,r2
    2364:	e0bff90b 	ldhu	r2,-28(fp)
    2368:	1885883a 	add	r2,r3,r2
    236c:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[2] * source[(y-1)*sobel_width+(x+1)];
    2370:	d0a00017 	ldw	r2,-32768(gp)
    2374:	10800084 	addi	r2,r2,2
    2378:	10800003 	ldbu	r2,0(r2)
    237c:	10c03fcc 	andi	r3,r2,255
    2380:	18c0201c 	xori	r3,r3,128
    2384:	18ffe004 	addi	r3,r3,-128
    2388:	e0bffb17 	ldw	r2,-20(fp)
    238c:	113fffc4 	addi	r4,r2,-1
    2390:	d0a6d317 	ldw	r2,-25780(gp)
    2394:	2089383a 	mul	r4,r4,r2
    2398:	e0bffa17 	ldw	r2,-24(fp)
    239c:	10800044 	addi	r2,r2,1
    23a0:	2085883a 	add	r2,r4,r2
    23a4:	1009883a 	mov	r4,r2
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	1105883a 	add	r2,r2,r4
    23b0:	10800003 	ldbu	r2,0(r2)
    23b4:	10803fcc 	andi	r2,r2,255
    23b8:	1885383a 	mul	r2,r3,r2
    23bc:	1007883a 	mov	r3,r2
    23c0:	e0bff90b 	ldhu	r2,-28(fp)
    23c4:	1885883a 	add	r2,r3,r2
    23c8:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[3] * source[y*sobel_width+(x-1)];
    23cc:	d0a00017 	ldw	r2,-32768(gp)
    23d0:	108000c4 	addi	r2,r2,3
    23d4:	10800003 	ldbu	r2,0(r2)
    23d8:	10c03fcc 	andi	r3,r2,255
    23dc:	18c0201c 	xori	r3,r3,128
    23e0:	18ffe004 	addi	r3,r3,-128
    23e4:	d126d317 	ldw	r4,-25780(gp)
    23e8:	e0bffb17 	ldw	r2,-20(fp)
    23ec:	2089383a 	mul	r4,r4,r2
    23f0:	e0bffa17 	ldw	r2,-24(fp)
    23f4:	10bfffc4 	addi	r2,r2,-1
    23f8:	2085883a 	add	r2,r4,r2
    23fc:	1009883a 	mov	r4,r2
    2400:	e0bffe17 	ldw	r2,-8(fp)
    2404:	1105883a 	add	r2,r2,r4
    2408:	10800003 	ldbu	r2,0(r2)
    240c:	10803fcc 	andi	r2,r2,255
    2410:	1885383a 	mul	r2,r3,r2
    2414:	1007883a 	mov	r3,r2
    2418:	e0bff90b 	ldhu	r2,-28(fp)
    241c:	1885883a 	add	r2,r3,r2
    2420:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[4] * source[y*sobel_width+x];
    2424:	d0a00017 	ldw	r2,-32768(gp)
    2428:	10800104 	addi	r2,r2,4
    242c:	10800003 	ldbu	r2,0(r2)
    2430:	10c03fcc 	andi	r3,r2,255
    2434:	18c0201c 	xori	r3,r3,128
    2438:	18ffe004 	addi	r3,r3,-128
    243c:	d126d317 	ldw	r4,-25780(gp)
    2440:	e0bffb17 	ldw	r2,-20(fp)
    2444:	2089383a 	mul	r4,r4,r2
    2448:	e0bffa17 	ldw	r2,-24(fp)
    244c:	2085883a 	add	r2,r4,r2
    2450:	1009883a 	mov	r4,r2
    2454:	e0bffe17 	ldw	r2,-8(fp)
    2458:	1105883a 	add	r2,r2,r4
    245c:	10800003 	ldbu	r2,0(r2)
    2460:	10803fcc 	andi	r2,r2,255
    2464:	1885383a 	mul	r2,r3,r2
    2468:	1007883a 	mov	r3,r2
    246c:	e0bff90b 	ldhu	r2,-28(fp)
    2470:	1885883a 	add	r2,r3,r2
    2474:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
    2478:	d0a00017 	ldw	r2,-32768(gp)
    247c:	10800144 	addi	r2,r2,5
    2480:	10800003 	ldbu	r2,0(r2)
    2484:	10c03fcc 	andi	r3,r2,255
    2488:	18c0201c 	xori	r3,r3,128
    248c:	18ffe004 	addi	r3,r3,-128
    2490:	d126d317 	ldw	r4,-25780(gp)
    2494:	e0bffb17 	ldw	r2,-20(fp)
    2498:	2089383a 	mul	r4,r4,r2
    249c:	e0bffa17 	ldw	r2,-24(fp)
    24a0:	10800044 	addi	r2,r2,1
    24a4:	2085883a 	add	r2,r4,r2
    24a8:	1009883a 	mov	r4,r2
    24ac:	e0bffe17 	ldw	r2,-8(fp)
    24b0:	1105883a 	add	r2,r2,r4
    24b4:	10800003 	ldbu	r2,0(r2)
    24b8:	10803fcc 	andi	r2,r2,255
    24bc:	1885383a 	mul	r2,r3,r2
    24c0:	1007883a 	mov	r3,r2
    24c4:	e0bff90b 	ldhu	r2,-28(fp)
    24c8:	1885883a 	add	r2,r3,r2
    24cc:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
    24d0:	d0a00017 	ldw	r2,-32768(gp)
    24d4:	10800184 	addi	r2,r2,6
    24d8:	10800003 	ldbu	r2,0(r2)
    24dc:	10c03fcc 	andi	r3,r2,255
    24e0:	18c0201c 	xori	r3,r3,128
    24e4:	18ffe004 	addi	r3,r3,-128
    24e8:	e0bffb17 	ldw	r2,-20(fp)
    24ec:	11000044 	addi	r4,r2,1
    24f0:	d0a6d317 	ldw	r2,-25780(gp)
    24f4:	2089383a 	mul	r4,r4,r2
    24f8:	e0bffa17 	ldw	r2,-24(fp)
    24fc:	10bfffc4 	addi	r2,r2,-1
    2500:	2085883a 	add	r2,r4,r2
    2504:	1009883a 	mov	r4,r2
    2508:	e0bffe17 	ldw	r2,-8(fp)
    250c:	1105883a 	add	r2,r2,r4
    2510:	10800003 	ldbu	r2,0(r2)
    2514:	10803fcc 	andi	r2,r2,255
    2518:	1885383a 	mul	r2,r3,r2
    251c:	1007883a 	mov	r3,r2
    2520:	e0bff90b 	ldhu	r2,-28(fp)
    2524:	1885883a 	add	r2,r3,r2
    2528:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
    252c:	d0a00017 	ldw	r2,-32768(gp)
    2530:	108001c4 	addi	r2,r2,7
    2534:	10800003 	ldbu	r2,0(r2)
    2538:	10c03fcc 	andi	r3,r2,255
    253c:	18c0201c 	xori	r3,r3,128
    2540:	18ffe004 	addi	r3,r3,-128
    2544:	e0bffb17 	ldw	r2,-20(fp)
    2548:	11000044 	addi	r4,r2,1
    254c:	d0a6d317 	ldw	r2,-25780(gp)
    2550:	2089383a 	mul	r4,r4,r2
    2554:	e0bffa17 	ldw	r2,-24(fp)
    2558:	2085883a 	add	r2,r4,r2
    255c:	1009883a 	mov	r4,r2
    2560:	e0bffe17 	ldw	r2,-8(fp)
    2564:	1105883a 	add	r2,r2,r4
    2568:	10800003 	ldbu	r2,0(r2)
    256c:	10803fcc 	andi	r2,r2,255
    2570:	1885383a 	mul	r2,r3,r2
    2574:	1007883a 	mov	r3,r2
    2578:	e0bff90b 	ldhu	r2,-28(fp)
    257c:	1885883a 	add	r2,r3,r2
    2580:	e0bff90d 	sth	r2,-28(fp)
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
    2584:	d0a00017 	ldw	r2,-32768(gp)
    2588:	10800204 	addi	r2,r2,8
    258c:	10800003 	ldbu	r2,0(r2)
    2590:	10c03fcc 	andi	r3,r2,255
    2594:	18c0201c 	xori	r3,r3,128
    2598:	18ffe004 	addi	r3,r3,-128
    259c:	e0bffb17 	ldw	r2,-20(fp)
    25a0:	11000044 	addi	r4,r2,1
    25a4:	d0a6d317 	ldw	r2,-25780(gp)
    25a8:	2089383a 	mul	r4,r4,r2
    25ac:	e0bffa17 	ldw	r2,-24(fp)
    25b0:	10800044 	addi	r2,r2,1
    25b4:	2085883a 	add	r2,r4,r2
    25b8:	1009883a 	mov	r4,r2
    25bc:	e0bffe17 	ldw	r2,-8(fp)
    25c0:	1105883a 	add	r2,r2,r4
    25c4:	10800003 	ldbu	r2,0(r2)
    25c8:	10803fcc 	andi	r2,r2,255
    25cc:	1885383a 	mul	r2,r3,r2
    25d0:	1007883a 	mov	r3,r2
    25d4:	e0bff90b 	ldhu	r2,-28(fp)
    25d8:	1885883a 	add	r2,r3,r2
    25dc:	e0bff90d 	sth	r2,-28(fp)
	   sobel_x_result[arrayindex] = result;
    25e0:	d0e6d617 	ldw	r3,-25768(gp)
    25e4:	e0bffc17 	ldw	r2,-16(fp)
    25e8:	1085883a 	add	r2,r2,r2
    25ec:	1885883a 	add	r2,r3,r2
    25f0:	e0fff90b 	ldhu	r3,-28(fp)
    25f4:	10c0000d 	sth	r3,0(r2)
	   result = 0;
    25f8:	e03ff90d 	sth	zero,-28(fp)

	   // sobel_y in-lining
	   result += pgy_array[0] * source[(y-1)*sobel_width+(x-1)];
    25fc:	d0a00117 	ldw	r2,-32764(gp)
    2600:	10800003 	ldbu	r2,0(r2)
    2604:	10c03fcc 	andi	r3,r2,255
    2608:	18c0201c 	xori	r3,r3,128
    260c:	18ffe004 	addi	r3,r3,-128
    2610:	e0bffb17 	ldw	r2,-20(fp)
    2614:	113fffc4 	addi	r4,r2,-1
    2618:	d0a6d317 	ldw	r2,-25780(gp)
    261c:	2089383a 	mul	r4,r4,r2
    2620:	e0bffa17 	ldw	r2,-24(fp)
    2624:	10bfffc4 	addi	r2,r2,-1
    2628:	2085883a 	add	r2,r4,r2
    262c:	1009883a 	mov	r4,r2
    2630:	e0bffe17 	ldw	r2,-8(fp)
    2634:	1105883a 	add	r2,r2,r4
    2638:	10800003 	ldbu	r2,0(r2)
    263c:	10803fcc 	andi	r2,r2,255
    2640:	1885383a 	mul	r2,r3,r2
    2644:	1007883a 	mov	r3,r2
    2648:	e0bff90b 	ldhu	r2,-28(fp)
    264c:	1885883a 	add	r2,r3,r2
    2650:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[1] * source[(y-1)*sobel_width+x];
    2654:	d0a00117 	ldw	r2,-32764(gp)
    2658:	10800044 	addi	r2,r2,1
    265c:	10800003 	ldbu	r2,0(r2)
    2660:	10c03fcc 	andi	r3,r2,255
    2664:	18c0201c 	xori	r3,r3,128
    2668:	18ffe004 	addi	r3,r3,-128
    266c:	e0bffb17 	ldw	r2,-20(fp)
    2670:	113fffc4 	addi	r4,r2,-1
    2674:	d0a6d317 	ldw	r2,-25780(gp)
    2678:	2089383a 	mul	r4,r4,r2
    267c:	e0bffa17 	ldw	r2,-24(fp)
    2680:	2085883a 	add	r2,r4,r2
    2684:	1009883a 	mov	r4,r2
    2688:	e0bffe17 	ldw	r2,-8(fp)
    268c:	1105883a 	add	r2,r2,r4
    2690:	10800003 	ldbu	r2,0(r2)
    2694:	10803fcc 	andi	r2,r2,255
    2698:	1885383a 	mul	r2,r3,r2
    269c:	1007883a 	mov	r3,r2
    26a0:	e0bff90b 	ldhu	r2,-28(fp)
    26a4:	1885883a 	add	r2,r3,r2
    26a8:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[2] * source[(y-1)*sobel_width+(x+1)];
    26ac:	d0a00117 	ldw	r2,-32764(gp)
    26b0:	10800084 	addi	r2,r2,2
    26b4:	10800003 	ldbu	r2,0(r2)
    26b8:	10c03fcc 	andi	r3,r2,255
    26bc:	18c0201c 	xori	r3,r3,128
    26c0:	18ffe004 	addi	r3,r3,-128
    26c4:	e0bffb17 	ldw	r2,-20(fp)
    26c8:	113fffc4 	addi	r4,r2,-1
    26cc:	d0a6d317 	ldw	r2,-25780(gp)
    26d0:	2089383a 	mul	r4,r4,r2
    26d4:	e0bffa17 	ldw	r2,-24(fp)
    26d8:	10800044 	addi	r2,r2,1
    26dc:	2085883a 	add	r2,r4,r2
    26e0:	1009883a 	mov	r4,r2
    26e4:	e0bffe17 	ldw	r2,-8(fp)
    26e8:	1105883a 	add	r2,r2,r4
    26ec:	10800003 	ldbu	r2,0(r2)
    26f0:	10803fcc 	andi	r2,r2,255
    26f4:	1885383a 	mul	r2,r3,r2
    26f8:	1007883a 	mov	r3,r2
    26fc:	e0bff90b 	ldhu	r2,-28(fp)
    2700:	1885883a 	add	r2,r3,r2
    2704:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[3] * source[y*sobel_width+(x-1)];
    2708:	d0a00117 	ldw	r2,-32764(gp)
    270c:	108000c4 	addi	r2,r2,3
    2710:	10800003 	ldbu	r2,0(r2)
    2714:	10c03fcc 	andi	r3,r2,255
    2718:	18c0201c 	xori	r3,r3,128
    271c:	18ffe004 	addi	r3,r3,-128
    2720:	d126d317 	ldw	r4,-25780(gp)
    2724:	e0bffb17 	ldw	r2,-20(fp)
    2728:	2089383a 	mul	r4,r4,r2
    272c:	e0bffa17 	ldw	r2,-24(fp)
    2730:	10bfffc4 	addi	r2,r2,-1
    2734:	2085883a 	add	r2,r4,r2
    2738:	1009883a 	mov	r4,r2
    273c:	e0bffe17 	ldw	r2,-8(fp)
    2740:	1105883a 	add	r2,r2,r4
    2744:	10800003 	ldbu	r2,0(r2)
    2748:	10803fcc 	andi	r2,r2,255
    274c:	1885383a 	mul	r2,r3,r2
    2750:	1007883a 	mov	r3,r2
    2754:	e0bff90b 	ldhu	r2,-28(fp)
    2758:	1885883a 	add	r2,r3,r2
    275c:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[4] * source[y*sobel_width+x];
    2760:	d0a00117 	ldw	r2,-32764(gp)
    2764:	10800104 	addi	r2,r2,4
    2768:	10800003 	ldbu	r2,0(r2)
    276c:	10c03fcc 	andi	r3,r2,255
    2770:	18c0201c 	xori	r3,r3,128
    2774:	18ffe004 	addi	r3,r3,-128
    2778:	d126d317 	ldw	r4,-25780(gp)
    277c:	e0bffb17 	ldw	r2,-20(fp)
    2780:	2089383a 	mul	r4,r4,r2
    2784:	e0bffa17 	ldw	r2,-24(fp)
    2788:	2085883a 	add	r2,r4,r2
    278c:	1009883a 	mov	r4,r2
    2790:	e0bffe17 	ldw	r2,-8(fp)
    2794:	1105883a 	add	r2,r2,r4
    2798:	10800003 	ldbu	r2,0(r2)
    279c:	10803fcc 	andi	r2,r2,255
    27a0:	1885383a 	mul	r2,r3,r2
    27a4:	1007883a 	mov	r3,r2
    27a8:	e0bff90b 	ldhu	r2,-28(fp)
    27ac:	1885883a 	add	r2,r3,r2
    27b0:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
    27b4:	d0a00117 	ldw	r2,-32764(gp)
    27b8:	10800144 	addi	r2,r2,5
    27bc:	10800003 	ldbu	r2,0(r2)
    27c0:	10c03fcc 	andi	r3,r2,255
    27c4:	18c0201c 	xori	r3,r3,128
    27c8:	18ffe004 	addi	r3,r3,-128
    27cc:	d126d317 	ldw	r4,-25780(gp)
    27d0:	e0bffb17 	ldw	r2,-20(fp)
    27d4:	2089383a 	mul	r4,r4,r2
    27d8:	e0bffa17 	ldw	r2,-24(fp)
    27dc:	10800044 	addi	r2,r2,1
    27e0:	2085883a 	add	r2,r4,r2
    27e4:	1009883a 	mov	r4,r2
    27e8:	e0bffe17 	ldw	r2,-8(fp)
    27ec:	1105883a 	add	r2,r2,r4
    27f0:	10800003 	ldbu	r2,0(r2)
    27f4:	10803fcc 	andi	r2,r2,255
    27f8:	1885383a 	mul	r2,r3,r2
    27fc:	1007883a 	mov	r3,r2
    2800:	e0bff90b 	ldhu	r2,-28(fp)
    2804:	1885883a 	add	r2,r3,r2
    2808:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
    280c:	d0a00117 	ldw	r2,-32764(gp)
    2810:	10800184 	addi	r2,r2,6
    2814:	10800003 	ldbu	r2,0(r2)
    2818:	10c03fcc 	andi	r3,r2,255
    281c:	18c0201c 	xori	r3,r3,128
    2820:	18ffe004 	addi	r3,r3,-128
    2824:	e0bffb17 	ldw	r2,-20(fp)
    2828:	11000044 	addi	r4,r2,1
    282c:	d0a6d317 	ldw	r2,-25780(gp)
    2830:	2089383a 	mul	r4,r4,r2
    2834:	e0bffa17 	ldw	r2,-24(fp)
    2838:	10bfffc4 	addi	r2,r2,-1
    283c:	2085883a 	add	r2,r4,r2
    2840:	1009883a 	mov	r4,r2
    2844:	e0bffe17 	ldw	r2,-8(fp)
    2848:	1105883a 	add	r2,r2,r4
    284c:	10800003 	ldbu	r2,0(r2)
    2850:	10803fcc 	andi	r2,r2,255
    2854:	1885383a 	mul	r2,r3,r2
    2858:	1007883a 	mov	r3,r2
    285c:	e0bff90b 	ldhu	r2,-28(fp)
    2860:	1885883a 	add	r2,r3,r2
    2864:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
    2868:	d0a00117 	ldw	r2,-32764(gp)
    286c:	108001c4 	addi	r2,r2,7
    2870:	10800003 	ldbu	r2,0(r2)
    2874:	10c03fcc 	andi	r3,r2,255
    2878:	18c0201c 	xori	r3,r3,128
    287c:	18ffe004 	addi	r3,r3,-128
    2880:	e0bffb17 	ldw	r2,-20(fp)
    2884:	11000044 	addi	r4,r2,1
    2888:	d0a6d317 	ldw	r2,-25780(gp)
    288c:	2089383a 	mul	r4,r4,r2
    2890:	e0bffa17 	ldw	r2,-24(fp)
    2894:	2085883a 	add	r2,r4,r2
    2898:	1009883a 	mov	r4,r2
    289c:	e0bffe17 	ldw	r2,-8(fp)
    28a0:	1105883a 	add	r2,r2,r4
    28a4:	10800003 	ldbu	r2,0(r2)
    28a8:	10803fcc 	andi	r2,r2,255
    28ac:	1885383a 	mul	r2,r3,r2
    28b0:	1007883a 	mov	r3,r2
    28b4:	e0bff90b 	ldhu	r2,-28(fp)
    28b8:	1885883a 	add	r2,r3,r2
    28bc:	e0bff90d 	sth	r2,-28(fp)
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
    28c0:	d0a00117 	ldw	r2,-32764(gp)
    28c4:	10800204 	addi	r2,r2,8
    28c8:	10800003 	ldbu	r2,0(r2)
    28cc:	10c03fcc 	andi	r3,r2,255
    28d0:	18c0201c 	xori	r3,r3,128
    28d4:	18ffe004 	addi	r3,r3,-128
    28d8:	e0bffb17 	ldw	r2,-20(fp)
    28dc:	11000044 	addi	r4,r2,1
    28e0:	d0a6d317 	ldw	r2,-25780(gp)
    28e4:	2089383a 	mul	r4,r4,r2
    28e8:	e0bffa17 	ldw	r2,-24(fp)
    28ec:	10800044 	addi	r2,r2,1
    28f0:	2085883a 	add	r2,r4,r2
    28f4:	1009883a 	mov	r4,r2
    28f8:	e0bffe17 	ldw	r2,-8(fp)
    28fc:	1105883a 	add	r2,r2,r4
    2900:	10800003 	ldbu	r2,0(r2)
    2904:	10803fcc 	andi	r2,r2,255
    2908:	1885383a 	mul	r2,r3,r2
    290c:	1007883a 	mov	r3,r2
    2910:	e0bff90b 	ldhu	r2,-28(fp)
    2914:	1885883a 	add	r2,r3,r2
    2918:	e0bff90d 	sth	r2,-28(fp)
	   sobel_y_result[arrayindex] = result;
    291c:	d0e6d717 	ldw	r3,-25764(gp)
    2920:	e0bffc17 	ldw	r2,-16(fp)
    2924:	1085883a 	add	r2,r2,r2
    2928:	1885883a 	add	r2,r3,r2
    292c:	e0fff90b 	ldhu	r3,-28(fp)
    2930:	10c0000d 	sth	r3,0(r2)
	   result = 0;
    2934:	e03ff90d 	sth	zero,-28(fp)

	   // sobel_threshold in-lining
	   value = sobel_x_result[arrayindex];
    2938:	d0e6d617 	ldw	r3,-25768(gp)
    293c:	e0bffc17 	ldw	r2,-16(fp)
    2940:	1085883a 	add	r2,r2,r2
    2944:	1885883a 	add	r2,r3,r2
    2948:	1080000b 	ldhu	r2,0(r2)
    294c:	e0bffd0d 	sth	r2,-12(fp)
	   sum = (value < 0) ? -value : value;
    2950:	e0bffd0f 	ldh	r2,-12(fp)
    2954:	1000010e 	bge	r2,zero,295c <sobel_complete+0x6e8>
    2958:	0085c83a 	sub	r2,zero,r2
    295c:	e0bffd8d 	sth	r2,-10(fp)
	   value = sobel_y_result[arrayindex];
    2960:	d0e6d717 	ldw	r3,-25764(gp)
    2964:	e0bffc17 	ldw	r2,-16(fp)
    2968:	1085883a 	add	r2,r2,r2
    296c:	1885883a 	add	r2,r3,r2
    2970:	1080000b 	ldhu	r2,0(r2)
    2974:	e0bffd0d 	sth	r2,-12(fp)
	   sum += (value < 0) ? -value : value;
    2978:	e0bffd0f 	ldh	r2,-12(fp)
    297c:	1000010e 	bge	r2,zero,2984 <sobel_complete+0x710>
    2980:	0085c83a 	sub	r2,zero,r2
    2984:	1007883a 	mov	r3,r2
    2988:	e0bffd8b 	ldhu	r2,-10(fp)
    298c:	1885883a 	add	r2,r3,r2
    2990:	e0bffd8d 	sth	r2,-10(fp)
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    2994:	d0e6d417 	ldw	r3,-25776(gp)
    2998:	e0bffc17 	ldw	r2,-16(fp)
    299c:	1887883a 	add	r3,r3,r2
    29a0:	e0bffd8f 	ldh	r2,-10(fp)
    29a4:	e13fff0f 	ldh	r4,-4(fp)
    29a8:	2080020e 	bge	r4,r2,29b4 <sobel_complete+0x740>
    29ac:	00bfffc4 	movi	r2,-1
    29b0:	00000106 	br	29b8 <sobel_complete+0x744>
    29b4:	0005883a 	mov	r2,zero
    29b8:	18800005 	stb	r2,0(r3)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    29bc:	e0bffa17 	ldw	r2,-24(fp)
    29c0:	10800044 	addi	r2,r2,1
    29c4:	e0bffa15 	stw	r2,-24(fp)
    29c8:	d0a6d317 	ldw	r2,-25780(gp)
    29cc:	10bfffc4 	addi	r2,r2,-1
    29d0:	e0fffa17 	ldw	r3,-24(fp)
    29d4:	18be3416 	blt	r3,r2,22a8 <__alt_data_end+0xff0022a8>
void sobel_complete( unsigned char *source, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    29d8:	e0bffb17 	ldw	r2,-20(fp)
    29dc:	10800044 	addi	r2,r2,1
    29e0:	e0bffb15 	stw	r2,-20(fp)
    29e4:	d0a6d517 	ldw	r2,-25772(gp)
    29e8:	10bfffc4 	addi	r2,r2,-1
    29ec:	e0fffb17 	ldw	r3,-20(fp)
    29f0:	18be2a16 	blt	r3,r2,229c <__alt_data_end+0xff00229c>
	   value = sobel_y_result[arrayindex];
	   sum += (value < 0) ? -value : value;
	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
	 }
   }
}
    29f4:	0001883a 	nop
    29f8:	e037883a 	mov	sp,fp
    29fc:	df000017 	ldw	fp,0(sp)
    2a00:	dec00104 	addi	sp,sp,4
    2a04:	f800283a 	ret

00002a08 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
    2a08:	deffff04 	addi	sp,sp,-4
    2a0c:	df000015 	stw	fp,0(sp)
    2a10:	d839883a 	mov	fp,sp
	return sobel_rgb565;
    2a14:	d0a6d817 	ldw	r2,-25760(gp)
}
    2a18:	e037883a 	mov	sp,fp
    2a1c:	df000017 	ldw	fp,0(sp)
    2a20:	dec00104 	addi	sp,sp,4
    2a24:	f800283a 	ret

00002a28 <GetSobelResult>:

unsigned char *GetSobelResult() {
    2a28:	deffff04 	addi	sp,sp,-4
    2a2c:	df000015 	stw	fp,0(sp)
    2a30:	d839883a 	mov	fp,sp
	return sobel_result;
    2a34:	d0a6d417 	ldw	r2,-25776(gp)
}
    2a38:	e037883a 	mov	sp,fp
    2a3c:	df000017 	ldw	fp,0(sp)
    2a40:	dec00104 	addi	sp,sp,4
    2a44:	f800283a 	ret

00002a48 <vga_set_pointer>:
 */

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
    2a48:	defffe04 	addi	sp,sp,-8
    2a4c:	df000115 	stw	fp,4(sp)
    2a50:	df000104 	addi	fp,sp,4
    2a54:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2a58:	e0ffff17 	ldw	r3,-4(fp)
    2a5c:	00804034 	movhi	r2,256
    2a60:	10843404 	addi	r2,r2,4304
    2a64:	10c00035 	stwio	r3,0(r2)
}
    2a68:	0001883a 	nop
    2a6c:	e037883a 	mov	sp,fp
    2a70:	df000017 	ldw	fp,0(sp)
    2a74:	dec00104 	addi	sp,sp,4
    2a78:	f800283a 	ret

00002a7c <vga_set_swap>:

void vga_set_swap(char swap) {
    2a7c:	defffe04 	addi	sp,sp,-8
    2a80:	df000115 	stw	fp,4(sp)
    2a84:	df000104 	addi	fp,sp,4
    2a88:	2005883a 	mov	r2,r4
    2a8c:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2a90:	e0ffff07 	ldb	r3,-4(fp)
    2a94:	00804034 	movhi	r2,256
    2a98:	10843504 	addi	r2,r2,4308
    2a9c:	10c00025 	stbio	r3,0(r2)
}
    2aa0:	0001883a 	nop
    2aa4:	e037883a 	mov	sp,fp
    2aa8:	df000017 	ldw	fp,0(sp)
    2aac:	dec00104 	addi	sp,sp,4
    2ab0:	f800283a 	ret

00002ab4 <__divsi3>:
    2ab4:	20001b16 	blt	r4,zero,2b24 <__divsi3+0x70>
    2ab8:	000f883a 	mov	r7,zero
    2abc:	28001616 	blt	r5,zero,2b18 <__divsi3+0x64>
    2ac0:	200d883a 	mov	r6,r4
    2ac4:	29001a2e 	bgeu	r5,r4,2b30 <__divsi3+0x7c>
    2ac8:	00800804 	movi	r2,32
    2acc:	00c00044 	movi	r3,1
    2ad0:	00000106 	br	2ad8 <__divsi3+0x24>
    2ad4:	10000d26 	beq	r2,zero,2b0c <__divsi3+0x58>
    2ad8:	294b883a 	add	r5,r5,r5
    2adc:	10bfffc4 	addi	r2,r2,-1
    2ae0:	18c7883a 	add	r3,r3,r3
    2ae4:	293ffb36 	bltu	r5,r4,2ad4 <__alt_data_end+0xff002ad4>
    2ae8:	0005883a 	mov	r2,zero
    2aec:	18000726 	beq	r3,zero,2b0c <__divsi3+0x58>
    2af0:	0005883a 	mov	r2,zero
    2af4:	31400236 	bltu	r6,r5,2b00 <__divsi3+0x4c>
    2af8:	314dc83a 	sub	r6,r6,r5
    2afc:	10c4b03a 	or	r2,r2,r3
    2b00:	1806d07a 	srli	r3,r3,1
    2b04:	280ad07a 	srli	r5,r5,1
    2b08:	183ffa1e 	bne	r3,zero,2af4 <__alt_data_end+0xff002af4>
    2b0c:	38000126 	beq	r7,zero,2b14 <__divsi3+0x60>
    2b10:	0085c83a 	sub	r2,zero,r2
    2b14:	f800283a 	ret
    2b18:	014bc83a 	sub	r5,zero,r5
    2b1c:	39c0005c 	xori	r7,r7,1
    2b20:	003fe706 	br	2ac0 <__alt_data_end+0xff002ac0>
    2b24:	0109c83a 	sub	r4,zero,r4
    2b28:	01c00044 	movi	r7,1
    2b2c:	003fe306 	br	2abc <__alt_data_end+0xff002abc>
    2b30:	00c00044 	movi	r3,1
    2b34:	003fee06 	br	2af0 <__alt_data_end+0xff002af0>

00002b38 <__modsi3>:
    2b38:	20001716 	blt	r4,zero,2b98 <__modsi3+0x60>
    2b3c:	000f883a 	mov	r7,zero
    2b40:	2005883a 	mov	r2,r4
    2b44:	28001216 	blt	r5,zero,2b90 <__modsi3+0x58>
    2b48:	2900162e 	bgeu	r5,r4,2ba4 <__modsi3+0x6c>
    2b4c:	01800804 	movi	r6,32
    2b50:	00c00044 	movi	r3,1
    2b54:	00000106 	br	2b5c <__modsi3+0x24>
    2b58:	30000a26 	beq	r6,zero,2b84 <__modsi3+0x4c>
    2b5c:	294b883a 	add	r5,r5,r5
    2b60:	31bfffc4 	addi	r6,r6,-1
    2b64:	18c7883a 	add	r3,r3,r3
    2b68:	293ffb36 	bltu	r5,r4,2b58 <__alt_data_end+0xff002b58>
    2b6c:	18000526 	beq	r3,zero,2b84 <__modsi3+0x4c>
    2b70:	1806d07a 	srli	r3,r3,1
    2b74:	11400136 	bltu	r2,r5,2b7c <__modsi3+0x44>
    2b78:	1145c83a 	sub	r2,r2,r5
    2b7c:	280ad07a 	srli	r5,r5,1
    2b80:	183ffb1e 	bne	r3,zero,2b70 <__alt_data_end+0xff002b70>
    2b84:	38000126 	beq	r7,zero,2b8c <__modsi3+0x54>
    2b88:	0085c83a 	sub	r2,zero,r2
    2b8c:	f800283a 	ret
    2b90:	014bc83a 	sub	r5,zero,r5
    2b94:	003fec06 	br	2b48 <__alt_data_end+0xff002b48>
    2b98:	0109c83a 	sub	r4,zero,r4
    2b9c:	01c00044 	movi	r7,1
    2ba0:	003fe706 	br	2b40 <__alt_data_end+0xff002b40>
    2ba4:	00c00044 	movi	r3,1
    2ba8:	003ff106 	br	2b70 <__alt_data_end+0xff002b70>

00002bac <__udivsi3>:
    2bac:	200d883a 	mov	r6,r4
    2bb0:	2900152e 	bgeu	r5,r4,2c08 <__udivsi3+0x5c>
    2bb4:	28001416 	blt	r5,zero,2c08 <__udivsi3+0x5c>
    2bb8:	00800804 	movi	r2,32
    2bbc:	00c00044 	movi	r3,1
    2bc0:	00000206 	br	2bcc <__udivsi3+0x20>
    2bc4:	10000e26 	beq	r2,zero,2c00 <__udivsi3+0x54>
    2bc8:	28000516 	blt	r5,zero,2be0 <__udivsi3+0x34>
    2bcc:	294b883a 	add	r5,r5,r5
    2bd0:	10bfffc4 	addi	r2,r2,-1
    2bd4:	18c7883a 	add	r3,r3,r3
    2bd8:	293ffa36 	bltu	r5,r4,2bc4 <__alt_data_end+0xff002bc4>
    2bdc:	18000826 	beq	r3,zero,2c00 <__udivsi3+0x54>
    2be0:	0005883a 	mov	r2,zero
    2be4:	31400236 	bltu	r6,r5,2bf0 <__udivsi3+0x44>
    2be8:	314dc83a 	sub	r6,r6,r5
    2bec:	10c4b03a 	or	r2,r2,r3
    2bf0:	1806d07a 	srli	r3,r3,1
    2bf4:	280ad07a 	srli	r5,r5,1
    2bf8:	183ffa1e 	bne	r3,zero,2be4 <__alt_data_end+0xff002be4>
    2bfc:	f800283a 	ret
    2c00:	0005883a 	mov	r2,zero
    2c04:	f800283a 	ret
    2c08:	00c00044 	movi	r3,1
    2c0c:	003ff406 	br	2be0 <__alt_data_end+0xff002be0>

00002c10 <__umodsi3>:
    2c10:	2005883a 	mov	r2,r4
    2c14:	2900122e 	bgeu	r5,r4,2c60 <__umodsi3+0x50>
    2c18:	28001116 	blt	r5,zero,2c60 <__umodsi3+0x50>
    2c1c:	01800804 	movi	r6,32
    2c20:	00c00044 	movi	r3,1
    2c24:	00000206 	br	2c30 <__umodsi3+0x20>
    2c28:	30000c26 	beq	r6,zero,2c5c <__umodsi3+0x4c>
    2c2c:	28000516 	blt	r5,zero,2c44 <__umodsi3+0x34>
    2c30:	294b883a 	add	r5,r5,r5
    2c34:	31bfffc4 	addi	r6,r6,-1
    2c38:	18c7883a 	add	r3,r3,r3
    2c3c:	293ffa36 	bltu	r5,r4,2c28 <__alt_data_end+0xff002c28>
    2c40:	18000626 	beq	r3,zero,2c5c <__umodsi3+0x4c>
    2c44:	1806d07a 	srli	r3,r3,1
    2c48:	11400136 	bltu	r2,r5,2c50 <__umodsi3+0x40>
    2c4c:	1145c83a 	sub	r2,r2,r5
    2c50:	280ad07a 	srli	r5,r5,1
    2c54:	183ffb1e 	bne	r3,zero,2c44 <__alt_data_end+0xff002c44>
    2c58:	f800283a 	ret
    2c5c:	f800283a 	ret
    2c60:	00c00044 	movi	r3,1
    2c64:	003ff706 	br	2c44 <__alt_data_end+0xff002c44>

00002c68 <malloc>:
    2c68:	00800074 	movhi	r2,1
    2c6c:	10903104 	addi	r2,r2,16580
    2c70:	200b883a 	mov	r5,r4
    2c74:	11000017 	ldw	r4,0(r2)
    2c78:	0002c901 	jmpi	2c90 <_malloc_r>

00002c7c <free>:
    2c7c:	00800074 	movhi	r2,1
    2c80:	10903104 	addi	r2,r2,16580
    2c84:	200b883a 	mov	r5,r4
    2c88:	11000017 	ldw	r4,0(r2)
    2c8c:	0007ae01 	jmpi	7ae0 <_free_r>

00002c90 <_malloc_r>:
    2c90:	defff504 	addi	sp,sp,-44
    2c94:	dc800315 	stw	r18,12(sp)
    2c98:	dfc00a15 	stw	ra,40(sp)
    2c9c:	df000915 	stw	fp,36(sp)
    2ca0:	ddc00815 	stw	r23,32(sp)
    2ca4:	dd800715 	stw	r22,28(sp)
    2ca8:	dd400615 	stw	r21,24(sp)
    2cac:	dd000515 	stw	r20,20(sp)
    2cb0:	dcc00415 	stw	r19,16(sp)
    2cb4:	dc400215 	stw	r17,8(sp)
    2cb8:	dc000115 	stw	r16,4(sp)
    2cbc:	288002c4 	addi	r2,r5,11
    2cc0:	00c00584 	movi	r3,22
    2cc4:	2025883a 	mov	r18,r4
    2cc8:	18807f2e 	bgeu	r3,r2,2ec8 <_malloc_r+0x238>
    2ccc:	047ffe04 	movi	r17,-8
    2cd0:	1462703a 	and	r17,r2,r17
    2cd4:	8800a316 	blt	r17,zero,2f64 <_malloc_r+0x2d4>
    2cd8:	8940a236 	bltu	r17,r5,2f64 <_malloc_r+0x2d4>
    2cdc:	000f9780 	call	f978 <__malloc_lock>
    2ce0:	00807dc4 	movi	r2,503
    2ce4:	1441e92e 	bgeu	r2,r17,348c <_malloc_r+0x7fc>
    2ce8:	8804d27a 	srli	r2,r17,9
    2cec:	1000a126 	beq	r2,zero,2f74 <_malloc_r+0x2e4>
    2cf0:	00c00104 	movi	r3,4
    2cf4:	18811e36 	bltu	r3,r2,3170 <_malloc_r+0x4e0>
    2cf8:	8804d1ba 	srli	r2,r17,6
    2cfc:	12000e44 	addi	r8,r2,57
    2d00:	11c00e04 	addi	r7,r2,56
    2d04:	4209883a 	add	r4,r8,r8
    2d08:	04c00074 	movhi	r19,1
    2d0c:	2109883a 	add	r4,r4,r4
    2d10:	9cc98104 	addi	r19,r19,9732
    2d14:	2109883a 	add	r4,r4,r4
    2d18:	9909883a 	add	r4,r19,r4
    2d1c:	24000117 	ldw	r16,4(r4)
    2d20:	213ffe04 	addi	r4,r4,-8
    2d24:	24009726 	beq	r4,r16,2f84 <_malloc_r+0x2f4>
    2d28:	80800117 	ldw	r2,4(r16)
    2d2c:	01bfff04 	movi	r6,-4
    2d30:	014003c4 	movi	r5,15
    2d34:	1184703a 	and	r2,r2,r6
    2d38:	1447c83a 	sub	r3,r2,r17
    2d3c:	28c00716 	blt	r5,r3,2d5c <_malloc_r+0xcc>
    2d40:	1800920e 	bge	r3,zero,2f8c <_malloc_r+0x2fc>
    2d44:	84000317 	ldw	r16,12(r16)
    2d48:	24008e26 	beq	r4,r16,2f84 <_malloc_r+0x2f4>
    2d4c:	80800117 	ldw	r2,4(r16)
    2d50:	1184703a 	and	r2,r2,r6
    2d54:	1447c83a 	sub	r3,r2,r17
    2d58:	28fff90e 	bge	r5,r3,2d40 <__alt_data_end+0xff002d40>
    2d5c:	3809883a 	mov	r4,r7
    2d60:	01800074 	movhi	r6,1
    2d64:	9c000417 	ldw	r16,16(r19)
    2d68:	31898104 	addi	r6,r6,9732
    2d6c:	32000204 	addi	r8,r6,8
    2d70:	82013426 	beq	r16,r8,3244 <_malloc_r+0x5b4>
    2d74:	80c00117 	ldw	r3,4(r16)
    2d78:	00bfff04 	movi	r2,-4
    2d7c:	188e703a 	and	r7,r3,r2
    2d80:	3c45c83a 	sub	r2,r7,r17
    2d84:	00c003c4 	movi	r3,15
    2d88:	18811f16 	blt	r3,r2,3208 <_malloc_r+0x578>
    2d8c:	32000515 	stw	r8,20(r6)
    2d90:	32000415 	stw	r8,16(r6)
    2d94:	10007f0e 	bge	r2,zero,2f94 <_malloc_r+0x304>
    2d98:	00807fc4 	movi	r2,511
    2d9c:	11c0fd36 	bltu	r2,r7,3194 <_malloc_r+0x504>
    2da0:	3806d0fa 	srli	r3,r7,3
    2da4:	01c00044 	movi	r7,1
    2da8:	30800117 	ldw	r2,4(r6)
    2dac:	19400044 	addi	r5,r3,1
    2db0:	294b883a 	add	r5,r5,r5
    2db4:	1807d0ba 	srai	r3,r3,2
    2db8:	294b883a 	add	r5,r5,r5
    2dbc:	294b883a 	add	r5,r5,r5
    2dc0:	298b883a 	add	r5,r5,r6
    2dc4:	38c6983a 	sll	r3,r7,r3
    2dc8:	29c00017 	ldw	r7,0(r5)
    2dcc:	2a7ffe04 	addi	r9,r5,-8
    2dd0:	1886b03a 	or	r3,r3,r2
    2dd4:	82400315 	stw	r9,12(r16)
    2dd8:	81c00215 	stw	r7,8(r16)
    2ddc:	30c00115 	stw	r3,4(r6)
    2de0:	2c000015 	stw	r16,0(r5)
    2de4:	3c000315 	stw	r16,12(r7)
    2de8:	2005d0ba 	srai	r2,r4,2
    2dec:	01400044 	movi	r5,1
    2df0:	288a983a 	sll	r5,r5,r2
    2df4:	19406f36 	bltu	r3,r5,2fb4 <_malloc_r+0x324>
    2df8:	28c4703a 	and	r2,r5,r3
    2dfc:	10000a1e 	bne	r2,zero,2e28 <_malloc_r+0x198>
    2e00:	00bfff04 	movi	r2,-4
    2e04:	294b883a 	add	r5,r5,r5
    2e08:	2088703a 	and	r4,r4,r2
    2e0c:	28c4703a 	and	r2,r5,r3
    2e10:	21000104 	addi	r4,r4,4
    2e14:	1000041e 	bne	r2,zero,2e28 <_malloc_r+0x198>
    2e18:	294b883a 	add	r5,r5,r5
    2e1c:	28c4703a 	and	r2,r5,r3
    2e20:	21000104 	addi	r4,r4,4
    2e24:	103ffc26 	beq	r2,zero,2e18 <__alt_data_end+0xff002e18>
    2e28:	02bfff04 	movi	r10,-4
    2e2c:	024003c4 	movi	r9,15
    2e30:	21800044 	addi	r6,r4,1
    2e34:	318d883a 	add	r6,r6,r6
    2e38:	318d883a 	add	r6,r6,r6
    2e3c:	318d883a 	add	r6,r6,r6
    2e40:	998d883a 	add	r6,r19,r6
    2e44:	333ffe04 	addi	r12,r6,-8
    2e48:	2017883a 	mov	r11,r4
    2e4c:	31800104 	addi	r6,r6,4
    2e50:	34000017 	ldw	r16,0(r6)
    2e54:	31fffd04 	addi	r7,r6,-12
    2e58:	81c0041e 	bne	r16,r7,2e6c <_malloc_r+0x1dc>
    2e5c:	0000fb06 	br	324c <_malloc_r+0x5bc>
    2e60:	1801030e 	bge	r3,zero,3270 <_malloc_r+0x5e0>
    2e64:	84000317 	ldw	r16,12(r16)
    2e68:	81c0f826 	beq	r16,r7,324c <_malloc_r+0x5bc>
    2e6c:	80800117 	ldw	r2,4(r16)
    2e70:	1284703a 	and	r2,r2,r10
    2e74:	1447c83a 	sub	r3,r2,r17
    2e78:	48fff90e 	bge	r9,r3,2e60 <__alt_data_end+0xff002e60>
    2e7c:	80800317 	ldw	r2,12(r16)
    2e80:	81000217 	ldw	r4,8(r16)
    2e84:	89400054 	ori	r5,r17,1
    2e88:	81400115 	stw	r5,4(r16)
    2e8c:	20800315 	stw	r2,12(r4)
    2e90:	11000215 	stw	r4,8(r2)
    2e94:	8463883a 	add	r17,r16,r17
    2e98:	9c400515 	stw	r17,20(r19)
    2e9c:	9c400415 	stw	r17,16(r19)
    2ea0:	18800054 	ori	r2,r3,1
    2ea4:	88800115 	stw	r2,4(r17)
    2ea8:	8a000315 	stw	r8,12(r17)
    2eac:	8a000215 	stw	r8,8(r17)
    2eb0:	88e3883a 	add	r17,r17,r3
    2eb4:	88c00015 	stw	r3,0(r17)
    2eb8:	9009883a 	mov	r4,r18
    2ebc:	000f99c0 	call	f99c <__malloc_unlock>
    2ec0:	80800204 	addi	r2,r16,8
    2ec4:	00001b06 	br	2f34 <_malloc_r+0x2a4>
    2ec8:	04400404 	movi	r17,16
    2ecc:	89402536 	bltu	r17,r5,2f64 <_malloc_r+0x2d4>
    2ed0:	000f9780 	call	f978 <__malloc_lock>
    2ed4:	00800184 	movi	r2,6
    2ed8:	01000084 	movi	r4,2
    2edc:	04c00074 	movhi	r19,1
    2ee0:	1085883a 	add	r2,r2,r2
    2ee4:	9cc98104 	addi	r19,r19,9732
    2ee8:	1085883a 	add	r2,r2,r2
    2eec:	9885883a 	add	r2,r19,r2
    2ef0:	14000117 	ldw	r16,4(r2)
    2ef4:	10fffe04 	addi	r3,r2,-8
    2ef8:	80c0d926 	beq	r16,r3,3260 <_malloc_r+0x5d0>
    2efc:	80c00117 	ldw	r3,4(r16)
    2f00:	81000317 	ldw	r4,12(r16)
    2f04:	00bfff04 	movi	r2,-4
    2f08:	1884703a 	and	r2,r3,r2
    2f0c:	81400217 	ldw	r5,8(r16)
    2f10:	8085883a 	add	r2,r16,r2
    2f14:	10c00117 	ldw	r3,4(r2)
    2f18:	29000315 	stw	r4,12(r5)
    2f1c:	21400215 	stw	r5,8(r4)
    2f20:	18c00054 	ori	r3,r3,1
    2f24:	10c00115 	stw	r3,4(r2)
    2f28:	9009883a 	mov	r4,r18
    2f2c:	000f99c0 	call	f99c <__malloc_unlock>
    2f30:	80800204 	addi	r2,r16,8
    2f34:	dfc00a17 	ldw	ra,40(sp)
    2f38:	df000917 	ldw	fp,36(sp)
    2f3c:	ddc00817 	ldw	r23,32(sp)
    2f40:	dd800717 	ldw	r22,28(sp)
    2f44:	dd400617 	ldw	r21,24(sp)
    2f48:	dd000517 	ldw	r20,20(sp)
    2f4c:	dcc00417 	ldw	r19,16(sp)
    2f50:	dc800317 	ldw	r18,12(sp)
    2f54:	dc400217 	ldw	r17,8(sp)
    2f58:	dc000117 	ldw	r16,4(sp)
    2f5c:	dec00b04 	addi	sp,sp,44
    2f60:	f800283a 	ret
    2f64:	00800304 	movi	r2,12
    2f68:	90800015 	stw	r2,0(r18)
    2f6c:	0005883a 	mov	r2,zero
    2f70:	003ff006 	br	2f34 <__alt_data_end+0xff002f34>
    2f74:	01002004 	movi	r4,128
    2f78:	02001004 	movi	r8,64
    2f7c:	01c00fc4 	movi	r7,63
    2f80:	003f6106 	br	2d08 <__alt_data_end+0xff002d08>
    2f84:	4009883a 	mov	r4,r8
    2f88:	003f7506 	br	2d60 <__alt_data_end+0xff002d60>
    2f8c:	81000317 	ldw	r4,12(r16)
    2f90:	003fde06 	br	2f0c <__alt_data_end+0xff002f0c>
    2f94:	81c5883a 	add	r2,r16,r7
    2f98:	11400117 	ldw	r5,4(r2)
    2f9c:	9009883a 	mov	r4,r18
    2fa0:	29400054 	ori	r5,r5,1
    2fa4:	11400115 	stw	r5,4(r2)
    2fa8:	000f99c0 	call	f99c <__malloc_unlock>
    2fac:	80800204 	addi	r2,r16,8
    2fb0:	003fe006 	br	2f34 <__alt_data_end+0xff002f34>
    2fb4:	9c000217 	ldw	r16,8(r19)
    2fb8:	00bfff04 	movi	r2,-4
    2fbc:	85800117 	ldw	r22,4(r16)
    2fc0:	b0ac703a 	and	r22,r22,r2
    2fc4:	b4400336 	bltu	r22,r17,2fd4 <_malloc_r+0x344>
    2fc8:	b445c83a 	sub	r2,r22,r17
    2fcc:	00c003c4 	movi	r3,15
    2fd0:	18805d16 	blt	r3,r2,3148 <_malloc_r+0x4b8>
    2fd4:	05c00074 	movhi	r23,1
    2fd8:	00800074 	movhi	r2,1
    2fdc:	10970704 	addi	r2,r2,23580
    2fe0:	bdd02e04 	addi	r23,r23,16568
    2fe4:	15400017 	ldw	r21,0(r2)
    2fe8:	b8c00017 	ldw	r3,0(r23)
    2fec:	00bfffc4 	movi	r2,-1
    2ff0:	858d883a 	add	r6,r16,r22
    2ff4:	8d6b883a 	add	r21,r17,r21
    2ff8:	1880ea26 	beq	r3,r2,33a4 <_malloc_r+0x714>
    2ffc:	ad4403c4 	addi	r21,r21,4111
    3000:	00bc0004 	movi	r2,-4096
    3004:	a8aa703a 	and	r21,r21,r2
    3008:	a80b883a 	mov	r5,r21
    300c:	9009883a 	mov	r4,r18
    3010:	d9800015 	stw	r6,0(sp)
    3014:	00035dc0 	call	35dc <_sbrk_r>
    3018:	1029883a 	mov	r20,r2
    301c:	00bfffc4 	movi	r2,-1
    3020:	d9800017 	ldw	r6,0(sp)
    3024:	a080e826 	beq	r20,r2,33c8 <_malloc_r+0x738>
    3028:	a180a636 	bltu	r20,r6,32c4 <_malloc_r+0x634>
    302c:	07000074 	movhi	fp,1
    3030:	e7171504 	addi	fp,fp,23636
    3034:	e0800017 	ldw	r2,0(fp)
    3038:	a887883a 	add	r3,r21,r2
    303c:	e0c00015 	stw	r3,0(fp)
    3040:	3500e626 	beq	r6,r20,33dc <_malloc_r+0x74c>
    3044:	b9000017 	ldw	r4,0(r23)
    3048:	00bfffc4 	movi	r2,-1
    304c:	2080ee26 	beq	r4,r2,3408 <_malloc_r+0x778>
    3050:	a185c83a 	sub	r2,r20,r6
    3054:	10c5883a 	add	r2,r2,r3
    3058:	e0800015 	stw	r2,0(fp)
    305c:	a0c001cc 	andi	r3,r20,7
    3060:	1800bc26 	beq	r3,zero,3354 <_malloc_r+0x6c4>
    3064:	a0e9c83a 	sub	r20,r20,r3
    3068:	00840204 	movi	r2,4104
    306c:	a5000204 	addi	r20,r20,8
    3070:	10c7c83a 	sub	r3,r2,r3
    3074:	a545883a 	add	r2,r20,r21
    3078:	1083ffcc 	andi	r2,r2,4095
    307c:	18abc83a 	sub	r21,r3,r2
    3080:	a80b883a 	mov	r5,r21
    3084:	9009883a 	mov	r4,r18
    3088:	00035dc0 	call	35dc <_sbrk_r>
    308c:	00ffffc4 	movi	r3,-1
    3090:	10c0e126 	beq	r2,r3,3418 <_malloc_r+0x788>
    3094:	1505c83a 	sub	r2,r2,r20
    3098:	1545883a 	add	r2,r2,r21
    309c:	10800054 	ori	r2,r2,1
    30a0:	e0c00017 	ldw	r3,0(fp)
    30a4:	9d000215 	stw	r20,8(r19)
    30a8:	a0800115 	stw	r2,4(r20)
    30ac:	a8c7883a 	add	r3,r21,r3
    30b0:	e0c00015 	stw	r3,0(fp)
    30b4:	84c00e26 	beq	r16,r19,30f0 <_malloc_r+0x460>
    30b8:	018003c4 	movi	r6,15
    30bc:	3580a72e 	bgeu	r6,r22,335c <_malloc_r+0x6cc>
    30c0:	81400117 	ldw	r5,4(r16)
    30c4:	013ffe04 	movi	r4,-8
    30c8:	b0bffd04 	addi	r2,r22,-12
    30cc:	1104703a 	and	r2,r2,r4
    30d0:	2900004c 	andi	r4,r5,1
    30d4:	2088b03a 	or	r4,r4,r2
    30d8:	81000115 	stw	r4,4(r16)
    30dc:	01400144 	movi	r5,5
    30e0:	8089883a 	add	r4,r16,r2
    30e4:	21400115 	stw	r5,4(r4)
    30e8:	21400215 	stw	r5,8(r4)
    30ec:	3080cd36 	bltu	r6,r2,3424 <_malloc_r+0x794>
    30f0:	00800074 	movhi	r2,1
    30f4:	10970604 	addi	r2,r2,23576
    30f8:	11000017 	ldw	r4,0(r2)
    30fc:	20c0012e 	bgeu	r4,r3,3104 <_malloc_r+0x474>
    3100:	10c00015 	stw	r3,0(r2)
    3104:	00800074 	movhi	r2,1
    3108:	10970504 	addi	r2,r2,23572
    310c:	11000017 	ldw	r4,0(r2)
    3110:	9c000217 	ldw	r16,8(r19)
    3114:	20c0012e 	bgeu	r4,r3,311c <_malloc_r+0x48c>
    3118:	10c00015 	stw	r3,0(r2)
    311c:	80c00117 	ldw	r3,4(r16)
    3120:	00bfff04 	movi	r2,-4
    3124:	1886703a 	and	r3,r3,r2
    3128:	1c45c83a 	sub	r2,r3,r17
    312c:	1c400236 	bltu	r3,r17,3138 <_malloc_r+0x4a8>
    3130:	00c003c4 	movi	r3,15
    3134:	18800416 	blt	r3,r2,3148 <_malloc_r+0x4b8>
    3138:	9009883a 	mov	r4,r18
    313c:	000f99c0 	call	f99c <__malloc_unlock>
    3140:	0005883a 	mov	r2,zero
    3144:	003f7b06 	br	2f34 <__alt_data_end+0xff002f34>
    3148:	88c00054 	ori	r3,r17,1
    314c:	80c00115 	stw	r3,4(r16)
    3150:	8463883a 	add	r17,r16,r17
    3154:	10800054 	ori	r2,r2,1
    3158:	9c400215 	stw	r17,8(r19)
    315c:	88800115 	stw	r2,4(r17)
    3160:	9009883a 	mov	r4,r18
    3164:	000f99c0 	call	f99c <__malloc_unlock>
    3168:	80800204 	addi	r2,r16,8
    316c:	003f7106 	br	2f34 <__alt_data_end+0xff002f34>
    3170:	00c00504 	movi	r3,20
    3174:	18804a2e 	bgeu	r3,r2,32a0 <_malloc_r+0x610>
    3178:	00c01504 	movi	r3,84
    317c:	18806e36 	bltu	r3,r2,3338 <_malloc_r+0x6a8>
    3180:	8804d33a 	srli	r2,r17,12
    3184:	12001bc4 	addi	r8,r2,111
    3188:	11c01b84 	addi	r7,r2,110
    318c:	4209883a 	add	r4,r8,r8
    3190:	003edd06 	br	2d08 <__alt_data_end+0xff002d08>
    3194:	3804d27a 	srli	r2,r7,9
    3198:	00c00104 	movi	r3,4
    319c:	1880442e 	bgeu	r3,r2,32b0 <_malloc_r+0x620>
    31a0:	00c00504 	movi	r3,20
    31a4:	18808136 	bltu	r3,r2,33ac <_malloc_r+0x71c>
    31a8:	11401704 	addi	r5,r2,92
    31ac:	10c016c4 	addi	r3,r2,91
    31b0:	294b883a 	add	r5,r5,r5
    31b4:	294b883a 	add	r5,r5,r5
    31b8:	294b883a 	add	r5,r5,r5
    31bc:	994b883a 	add	r5,r19,r5
    31c0:	28800017 	ldw	r2,0(r5)
    31c4:	01800074 	movhi	r6,1
    31c8:	297ffe04 	addi	r5,r5,-8
    31cc:	31898104 	addi	r6,r6,9732
    31d0:	28806526 	beq	r5,r2,3368 <_malloc_r+0x6d8>
    31d4:	01bfff04 	movi	r6,-4
    31d8:	10c00117 	ldw	r3,4(r2)
    31dc:	1986703a 	and	r3,r3,r6
    31e0:	38c0022e 	bgeu	r7,r3,31ec <_malloc_r+0x55c>
    31e4:	10800217 	ldw	r2,8(r2)
    31e8:	28bffb1e 	bne	r5,r2,31d8 <__alt_data_end+0xff0031d8>
    31ec:	11400317 	ldw	r5,12(r2)
    31f0:	98c00117 	ldw	r3,4(r19)
    31f4:	81400315 	stw	r5,12(r16)
    31f8:	80800215 	stw	r2,8(r16)
    31fc:	2c000215 	stw	r16,8(r5)
    3200:	14000315 	stw	r16,12(r2)
    3204:	003ef806 	br	2de8 <__alt_data_end+0xff002de8>
    3208:	88c00054 	ori	r3,r17,1
    320c:	80c00115 	stw	r3,4(r16)
    3210:	8463883a 	add	r17,r16,r17
    3214:	34400515 	stw	r17,20(r6)
    3218:	34400415 	stw	r17,16(r6)
    321c:	10c00054 	ori	r3,r2,1
    3220:	8a000315 	stw	r8,12(r17)
    3224:	8a000215 	stw	r8,8(r17)
    3228:	88c00115 	stw	r3,4(r17)
    322c:	88a3883a 	add	r17,r17,r2
    3230:	88800015 	stw	r2,0(r17)
    3234:	9009883a 	mov	r4,r18
    3238:	000f99c0 	call	f99c <__malloc_unlock>
    323c:	80800204 	addi	r2,r16,8
    3240:	003f3c06 	br	2f34 <__alt_data_end+0xff002f34>
    3244:	30c00117 	ldw	r3,4(r6)
    3248:	003ee706 	br	2de8 <__alt_data_end+0xff002de8>
    324c:	5ac00044 	addi	r11,r11,1
    3250:	588000cc 	andi	r2,r11,3
    3254:	31800204 	addi	r6,r6,8
    3258:	103efd1e 	bne	r2,zero,2e50 <__alt_data_end+0xff002e50>
    325c:	00002406 	br	32f0 <_malloc_r+0x660>
    3260:	14000317 	ldw	r16,12(r2)
    3264:	143f251e 	bne	r2,r16,2efc <__alt_data_end+0xff002efc>
    3268:	21000084 	addi	r4,r4,2
    326c:	003ebc06 	br	2d60 <__alt_data_end+0xff002d60>
    3270:	8085883a 	add	r2,r16,r2
    3274:	10c00117 	ldw	r3,4(r2)
    3278:	81000317 	ldw	r4,12(r16)
    327c:	81400217 	ldw	r5,8(r16)
    3280:	18c00054 	ori	r3,r3,1
    3284:	10c00115 	stw	r3,4(r2)
    3288:	29000315 	stw	r4,12(r5)
    328c:	21400215 	stw	r5,8(r4)
    3290:	9009883a 	mov	r4,r18
    3294:	000f99c0 	call	f99c <__malloc_unlock>
    3298:	80800204 	addi	r2,r16,8
    329c:	003f2506 	br	2f34 <__alt_data_end+0xff002f34>
    32a0:	12001704 	addi	r8,r2,92
    32a4:	11c016c4 	addi	r7,r2,91
    32a8:	4209883a 	add	r4,r8,r8
    32ac:	003e9606 	br	2d08 <__alt_data_end+0xff002d08>
    32b0:	3804d1ba 	srli	r2,r7,6
    32b4:	11400e44 	addi	r5,r2,57
    32b8:	10c00e04 	addi	r3,r2,56
    32bc:	294b883a 	add	r5,r5,r5
    32c0:	003fbc06 	br	31b4 <__alt_data_end+0xff0031b4>
    32c4:	84ff5926 	beq	r16,r19,302c <__alt_data_end+0xff00302c>
    32c8:	00800074 	movhi	r2,1
    32cc:	10898104 	addi	r2,r2,9732
    32d0:	14000217 	ldw	r16,8(r2)
    32d4:	00bfff04 	movi	r2,-4
    32d8:	80c00117 	ldw	r3,4(r16)
    32dc:	1886703a 	and	r3,r3,r2
    32e0:	003f9106 	br	3128 <__alt_data_end+0xff003128>
    32e4:	60800217 	ldw	r2,8(r12)
    32e8:	213fffc4 	addi	r4,r4,-1
    32ec:	1300651e 	bne	r2,r12,3484 <_malloc_r+0x7f4>
    32f0:	208000cc 	andi	r2,r4,3
    32f4:	633ffe04 	addi	r12,r12,-8
    32f8:	103ffa1e 	bne	r2,zero,32e4 <__alt_data_end+0xff0032e4>
    32fc:	98800117 	ldw	r2,4(r19)
    3300:	0146303a 	nor	r3,zero,r5
    3304:	1884703a 	and	r2,r3,r2
    3308:	98800115 	stw	r2,4(r19)
    330c:	294b883a 	add	r5,r5,r5
    3310:	117f2836 	bltu	r2,r5,2fb4 <__alt_data_end+0xff002fb4>
    3314:	283f2726 	beq	r5,zero,2fb4 <__alt_data_end+0xff002fb4>
    3318:	2886703a 	and	r3,r5,r2
    331c:	5809883a 	mov	r4,r11
    3320:	183ec31e 	bne	r3,zero,2e30 <__alt_data_end+0xff002e30>
    3324:	294b883a 	add	r5,r5,r5
    3328:	2886703a 	and	r3,r5,r2
    332c:	21000104 	addi	r4,r4,4
    3330:	183ffc26 	beq	r3,zero,3324 <__alt_data_end+0xff003324>
    3334:	003ebe06 	br	2e30 <__alt_data_end+0xff002e30>
    3338:	00c05504 	movi	r3,340
    333c:	18801236 	bltu	r3,r2,3388 <_malloc_r+0x6f8>
    3340:	8804d3fa 	srli	r2,r17,15
    3344:	12001e04 	addi	r8,r2,120
    3348:	11c01dc4 	addi	r7,r2,119
    334c:	4209883a 	add	r4,r8,r8
    3350:	003e6d06 	br	2d08 <__alt_data_end+0xff002d08>
    3354:	00c40004 	movi	r3,4096
    3358:	003f4606 	br	3074 <__alt_data_end+0xff003074>
    335c:	00800044 	movi	r2,1
    3360:	a0800115 	stw	r2,4(r20)
    3364:	003f7406 	br	3138 <__alt_data_end+0xff003138>
    3368:	1805d0ba 	srai	r2,r3,2
    336c:	01c00044 	movi	r7,1
    3370:	30c00117 	ldw	r3,4(r6)
    3374:	388e983a 	sll	r7,r7,r2
    3378:	2805883a 	mov	r2,r5
    337c:	38c6b03a 	or	r3,r7,r3
    3380:	30c00115 	stw	r3,4(r6)
    3384:	003f9b06 	br	31f4 <__alt_data_end+0xff0031f4>
    3388:	00c15504 	movi	r3,1364
    338c:	18801a36 	bltu	r3,r2,33f8 <_malloc_r+0x768>
    3390:	8804d4ba 	srli	r2,r17,18
    3394:	12001f44 	addi	r8,r2,125
    3398:	11c01f04 	addi	r7,r2,124
    339c:	4209883a 	add	r4,r8,r8
    33a0:	003e5906 	br	2d08 <__alt_data_end+0xff002d08>
    33a4:	ad400404 	addi	r21,r21,16
    33a8:	003f1706 	br	3008 <__alt_data_end+0xff003008>
    33ac:	00c01504 	movi	r3,84
    33b0:	18802336 	bltu	r3,r2,3440 <_malloc_r+0x7b0>
    33b4:	3804d33a 	srli	r2,r7,12
    33b8:	11401bc4 	addi	r5,r2,111
    33bc:	10c01b84 	addi	r3,r2,110
    33c0:	294b883a 	add	r5,r5,r5
    33c4:	003f7b06 	br	31b4 <__alt_data_end+0xff0031b4>
    33c8:	9c000217 	ldw	r16,8(r19)
    33cc:	00bfff04 	movi	r2,-4
    33d0:	80c00117 	ldw	r3,4(r16)
    33d4:	1886703a 	and	r3,r3,r2
    33d8:	003f5306 	br	3128 <__alt_data_end+0xff003128>
    33dc:	3083ffcc 	andi	r2,r6,4095
    33e0:	103f181e 	bne	r2,zero,3044 <__alt_data_end+0xff003044>
    33e4:	99000217 	ldw	r4,8(r19)
    33e8:	b545883a 	add	r2,r22,r21
    33ec:	10800054 	ori	r2,r2,1
    33f0:	20800115 	stw	r2,4(r4)
    33f4:	003f3e06 	br	30f0 <__alt_data_end+0xff0030f0>
    33f8:	01003f84 	movi	r4,254
    33fc:	02001fc4 	movi	r8,127
    3400:	01c01f84 	movi	r7,126
    3404:	003e4006 	br	2d08 <__alt_data_end+0xff002d08>
    3408:	00800074 	movhi	r2,1
    340c:	10902e04 	addi	r2,r2,16568
    3410:	15000015 	stw	r20,0(r2)
    3414:	003f1106 	br	305c <__alt_data_end+0xff00305c>
    3418:	00800044 	movi	r2,1
    341c:	002b883a 	mov	r21,zero
    3420:	003f1f06 	br	30a0 <__alt_data_end+0xff0030a0>
    3424:	81400204 	addi	r5,r16,8
    3428:	9009883a 	mov	r4,r18
    342c:	0007ae00 	call	7ae0 <_free_r>
    3430:	00800074 	movhi	r2,1
    3434:	10971504 	addi	r2,r2,23636
    3438:	10c00017 	ldw	r3,0(r2)
    343c:	003f2c06 	br	30f0 <__alt_data_end+0xff0030f0>
    3440:	00c05504 	movi	r3,340
    3444:	18800536 	bltu	r3,r2,345c <_malloc_r+0x7cc>
    3448:	3804d3fa 	srli	r2,r7,15
    344c:	11401e04 	addi	r5,r2,120
    3450:	10c01dc4 	addi	r3,r2,119
    3454:	294b883a 	add	r5,r5,r5
    3458:	003f5606 	br	31b4 <__alt_data_end+0xff0031b4>
    345c:	00c15504 	movi	r3,1364
    3460:	18800536 	bltu	r3,r2,3478 <_malloc_r+0x7e8>
    3464:	3804d4ba 	srli	r2,r7,18
    3468:	11401f44 	addi	r5,r2,125
    346c:	10c01f04 	addi	r3,r2,124
    3470:	294b883a 	add	r5,r5,r5
    3474:	003f4f06 	br	31b4 <__alt_data_end+0xff0031b4>
    3478:	01403f84 	movi	r5,254
    347c:	00c01f84 	movi	r3,126
    3480:	003f4c06 	br	31b4 <__alt_data_end+0xff0031b4>
    3484:	98800117 	ldw	r2,4(r19)
    3488:	003fa006 	br	330c <__alt_data_end+0xff00330c>
    348c:	8808d0fa 	srli	r4,r17,3
    3490:	20800044 	addi	r2,r4,1
    3494:	1085883a 	add	r2,r2,r2
    3498:	003e9006 	br	2edc <__alt_data_end+0xff002edc>

0000349c <_printf_r>:
    349c:	defffd04 	addi	sp,sp,-12
    34a0:	2805883a 	mov	r2,r5
    34a4:	dfc00015 	stw	ra,0(sp)
    34a8:	d9800115 	stw	r6,4(sp)
    34ac:	d9c00215 	stw	r7,8(sp)
    34b0:	21400217 	ldw	r5,8(r4)
    34b4:	d9c00104 	addi	r7,sp,4
    34b8:	100d883a 	mov	r6,r2
    34bc:	00036c80 	call	36c8 <___vfprintf_internal_r>
    34c0:	dfc00017 	ldw	ra,0(sp)
    34c4:	dec00304 	addi	sp,sp,12
    34c8:	f800283a 	ret

000034cc <printf>:
    34cc:	defffc04 	addi	sp,sp,-16
    34d0:	dfc00015 	stw	ra,0(sp)
    34d4:	d9400115 	stw	r5,4(sp)
    34d8:	d9800215 	stw	r6,8(sp)
    34dc:	d9c00315 	stw	r7,12(sp)
    34e0:	00800074 	movhi	r2,1
    34e4:	10903104 	addi	r2,r2,16580
    34e8:	10800017 	ldw	r2,0(r2)
    34ec:	200b883a 	mov	r5,r4
    34f0:	d9800104 	addi	r6,sp,4
    34f4:	11000217 	ldw	r4,8(r2)
    34f8:	00058c00 	call	58c0 <__vfprintf_internal>
    34fc:	dfc00017 	ldw	ra,0(sp)
    3500:	dec00404 	addi	sp,sp,16
    3504:	f800283a 	ret

00003508 <_puts_r>:
    3508:	defff604 	addi	sp,sp,-40
    350c:	dc000715 	stw	r16,28(sp)
    3510:	2021883a 	mov	r16,r4
    3514:	2809883a 	mov	r4,r5
    3518:	dc400815 	stw	r17,32(sp)
    351c:	dfc00915 	stw	ra,36(sp)
    3520:	2823883a 	mov	r17,r5
    3524:	00036300 	call	3630 <strlen>
    3528:	10c00044 	addi	r3,r2,1
    352c:	d8800115 	stw	r2,4(sp)
    3530:	00800074 	movhi	r2,1
    3534:	1088c304 	addi	r2,r2,8972
    3538:	d8800215 	stw	r2,8(sp)
    353c:	00800044 	movi	r2,1
    3540:	d8800315 	stw	r2,12(sp)
    3544:	00800084 	movi	r2,2
    3548:	dc400015 	stw	r17,0(sp)
    354c:	d8c00615 	stw	r3,24(sp)
    3550:	dec00415 	stw	sp,16(sp)
    3554:	d8800515 	stw	r2,20(sp)
    3558:	80000226 	beq	r16,zero,3564 <_puts_r+0x5c>
    355c:	80800e17 	ldw	r2,56(r16)
    3560:	10001426 	beq	r2,zero,35b4 <_puts_r+0xac>
    3564:	81400217 	ldw	r5,8(r16)
    3568:	2880030b 	ldhu	r2,12(r5)
    356c:	10c8000c 	andi	r3,r2,8192
    3570:	1800061e 	bne	r3,zero,358c <_puts_r+0x84>
    3574:	29001917 	ldw	r4,100(r5)
    3578:	00f7ffc4 	movi	r3,-8193
    357c:	10880014 	ori	r2,r2,8192
    3580:	20c6703a 	and	r3,r4,r3
    3584:	2880030d 	sth	r2,12(r5)
    3588:	28c01915 	stw	r3,100(r5)
    358c:	d9800404 	addi	r6,sp,16
    3590:	8009883a 	mov	r4,r16
    3594:	0007df00 	call	7df0 <__sfvwrite_r>
    3598:	1000091e 	bne	r2,zero,35c0 <_puts_r+0xb8>
    359c:	00800284 	movi	r2,10
    35a0:	dfc00917 	ldw	ra,36(sp)
    35a4:	dc400817 	ldw	r17,32(sp)
    35a8:	dc000717 	ldw	r16,28(sp)
    35ac:	dec00a04 	addi	sp,sp,40
    35b0:	f800283a 	ret
    35b4:	8009883a 	mov	r4,r16
    35b8:	000796c0 	call	796c <__sinit>
    35bc:	003fe906 	br	3564 <__alt_data_end+0xff003564>
    35c0:	00bfffc4 	movi	r2,-1
    35c4:	003ff606 	br	35a0 <__alt_data_end+0xff0035a0>

000035c8 <puts>:
    35c8:	00800074 	movhi	r2,1
    35cc:	10903104 	addi	r2,r2,16580
    35d0:	200b883a 	mov	r5,r4
    35d4:	11000017 	ldw	r4,0(r2)
    35d8:	00035081 	jmpi	3508 <_puts_r>

000035dc <_sbrk_r>:
    35dc:	defffd04 	addi	sp,sp,-12
    35e0:	dc000015 	stw	r16,0(sp)
    35e4:	04000074 	movhi	r16,1
    35e8:	dc400115 	stw	r17,4(sp)
    35ec:	84170804 	addi	r16,r16,23584
    35f0:	2023883a 	mov	r17,r4
    35f4:	2809883a 	mov	r4,r5
    35f8:	dfc00215 	stw	ra,8(sp)
    35fc:	80000015 	stw	zero,0(r16)
    3600:	000fb5c0 	call	fb5c <sbrk>
    3604:	00ffffc4 	movi	r3,-1
    3608:	10c00526 	beq	r2,r3,3620 <_sbrk_r+0x44>
    360c:	dfc00217 	ldw	ra,8(sp)
    3610:	dc400117 	ldw	r17,4(sp)
    3614:	dc000017 	ldw	r16,0(sp)
    3618:	dec00304 	addi	sp,sp,12
    361c:	f800283a 	ret
    3620:	80c00017 	ldw	r3,0(r16)
    3624:	183ff926 	beq	r3,zero,360c <__alt_data_end+0xff00360c>
    3628:	88c00015 	stw	r3,0(r17)
    362c:	003ff706 	br	360c <__alt_data_end+0xff00360c>

00003630 <strlen>:
    3630:	208000cc 	andi	r2,r4,3
    3634:	10002026 	beq	r2,zero,36b8 <strlen+0x88>
    3638:	20800007 	ldb	r2,0(r4)
    363c:	10002026 	beq	r2,zero,36c0 <strlen+0x90>
    3640:	2005883a 	mov	r2,r4
    3644:	00000206 	br	3650 <strlen+0x20>
    3648:	10c00007 	ldb	r3,0(r2)
    364c:	18001826 	beq	r3,zero,36b0 <strlen+0x80>
    3650:	10800044 	addi	r2,r2,1
    3654:	10c000cc 	andi	r3,r2,3
    3658:	183ffb1e 	bne	r3,zero,3648 <__alt_data_end+0xff003648>
    365c:	10c00017 	ldw	r3,0(r2)
    3660:	01ffbff4 	movhi	r7,65279
    3664:	39ffbfc4 	addi	r7,r7,-257
    3668:	00ca303a 	nor	r5,zero,r3
    366c:	01a02074 	movhi	r6,32897
    3670:	19c7883a 	add	r3,r3,r7
    3674:	31a02004 	addi	r6,r6,-32640
    3678:	1946703a 	and	r3,r3,r5
    367c:	1986703a 	and	r3,r3,r6
    3680:	1800091e 	bne	r3,zero,36a8 <strlen+0x78>
    3684:	10800104 	addi	r2,r2,4
    3688:	10c00017 	ldw	r3,0(r2)
    368c:	19cb883a 	add	r5,r3,r7
    3690:	00c6303a 	nor	r3,zero,r3
    3694:	28c6703a 	and	r3,r5,r3
    3698:	1986703a 	and	r3,r3,r6
    369c:	183ff926 	beq	r3,zero,3684 <__alt_data_end+0xff003684>
    36a0:	00000106 	br	36a8 <strlen+0x78>
    36a4:	10800044 	addi	r2,r2,1
    36a8:	10c00007 	ldb	r3,0(r2)
    36ac:	183ffd1e 	bne	r3,zero,36a4 <__alt_data_end+0xff0036a4>
    36b0:	1105c83a 	sub	r2,r2,r4
    36b4:	f800283a 	ret
    36b8:	2005883a 	mov	r2,r4
    36bc:	003fe706 	br	365c <__alt_data_end+0xff00365c>
    36c0:	0005883a 	mov	r2,zero
    36c4:	f800283a 	ret

000036c8 <___vfprintf_internal_r>:
    36c8:	deffb804 	addi	sp,sp,-288
    36cc:	dfc04715 	stw	ra,284(sp)
    36d0:	ddc04515 	stw	r23,276(sp)
    36d4:	dd404315 	stw	r21,268(sp)
    36d8:	d9002c15 	stw	r4,176(sp)
    36dc:	282f883a 	mov	r23,r5
    36e0:	302b883a 	mov	r21,r6
    36e4:	d9c02d15 	stw	r7,180(sp)
    36e8:	df004615 	stw	fp,280(sp)
    36ec:	dd804415 	stw	r22,272(sp)
    36f0:	dd004215 	stw	r20,264(sp)
    36f4:	dcc04115 	stw	r19,260(sp)
    36f8:	dc804015 	stw	r18,256(sp)
    36fc:	dc403f15 	stw	r17,252(sp)
    3700:	dc003e15 	stw	r16,248(sp)
    3704:	00084e00 	call	84e0 <_localeconv_r>
    3708:	10800017 	ldw	r2,0(r2)
    370c:	1009883a 	mov	r4,r2
    3710:	d8803415 	stw	r2,208(sp)
    3714:	00036300 	call	3630 <strlen>
    3718:	d8803715 	stw	r2,220(sp)
    371c:	d8802c17 	ldw	r2,176(sp)
    3720:	10000226 	beq	r2,zero,372c <___vfprintf_internal_r+0x64>
    3724:	10800e17 	ldw	r2,56(r2)
    3728:	1000f926 	beq	r2,zero,3b10 <___vfprintf_internal_r+0x448>
    372c:	b880030b 	ldhu	r2,12(r23)
    3730:	10c8000c 	andi	r3,r2,8192
    3734:	1800061e 	bne	r3,zero,3750 <___vfprintf_internal_r+0x88>
    3738:	b9001917 	ldw	r4,100(r23)
    373c:	00f7ffc4 	movi	r3,-8193
    3740:	10880014 	ori	r2,r2,8192
    3744:	20c6703a 	and	r3,r4,r3
    3748:	b880030d 	sth	r2,12(r23)
    374c:	b8c01915 	stw	r3,100(r23)
    3750:	10c0020c 	andi	r3,r2,8
    3754:	1800c126 	beq	r3,zero,3a5c <___vfprintf_internal_r+0x394>
    3758:	b8c00417 	ldw	r3,16(r23)
    375c:	1800bf26 	beq	r3,zero,3a5c <___vfprintf_internal_r+0x394>
    3760:	1080068c 	andi	r2,r2,26
    3764:	00c00284 	movi	r3,10
    3768:	10c0c426 	beq	r2,r3,3a7c <___vfprintf_internal_r+0x3b4>
    376c:	d8c00404 	addi	r3,sp,16
    3770:	05000074 	movhi	r20,1
    3774:	d9001e04 	addi	r4,sp,120
    3778:	a508d484 	addi	r20,r20,9042
    377c:	d8c01e15 	stw	r3,120(sp)
    3780:	d8002015 	stw	zero,128(sp)
    3784:	d8001f15 	stw	zero,124(sp)
    3788:	d8003315 	stw	zero,204(sp)
    378c:	d8003615 	stw	zero,216(sp)
    3790:	d8003815 	stw	zero,224(sp)
    3794:	1811883a 	mov	r8,r3
    3798:	d8003915 	stw	zero,228(sp)
    379c:	d8003a15 	stw	zero,232(sp)
    37a0:	d8002f15 	stw	zero,188(sp)
    37a4:	d9002815 	stw	r4,160(sp)
    37a8:	a8800007 	ldb	r2,0(r21)
    37ac:	10027b26 	beq	r2,zero,419c <___vfprintf_internal_r+0xad4>
    37b0:	00c00944 	movi	r3,37
    37b4:	a821883a 	mov	r16,r21
    37b8:	10c0021e 	bne	r2,r3,37c4 <___vfprintf_internal_r+0xfc>
    37bc:	00001406 	br	3810 <___vfprintf_internal_r+0x148>
    37c0:	10c00326 	beq	r2,r3,37d0 <___vfprintf_internal_r+0x108>
    37c4:	84000044 	addi	r16,r16,1
    37c8:	80800007 	ldb	r2,0(r16)
    37cc:	103ffc1e 	bne	r2,zero,37c0 <__alt_data_end+0xff0037c0>
    37d0:	8563c83a 	sub	r17,r16,r21
    37d4:	88000e26 	beq	r17,zero,3810 <___vfprintf_internal_r+0x148>
    37d8:	d8c02017 	ldw	r3,128(sp)
    37dc:	d8801f17 	ldw	r2,124(sp)
    37e0:	45400015 	stw	r21,0(r8)
    37e4:	1c47883a 	add	r3,r3,r17
    37e8:	10800044 	addi	r2,r2,1
    37ec:	d8c02015 	stw	r3,128(sp)
    37f0:	44400115 	stw	r17,4(r8)
    37f4:	d8801f15 	stw	r2,124(sp)
    37f8:	00c001c4 	movi	r3,7
    37fc:	1880a716 	blt	r3,r2,3a9c <___vfprintf_internal_r+0x3d4>
    3800:	42000204 	addi	r8,r8,8
    3804:	d9402f17 	ldw	r5,188(sp)
    3808:	2c4b883a 	add	r5,r5,r17
    380c:	d9402f15 	stw	r5,188(sp)
    3810:	80800007 	ldb	r2,0(r16)
    3814:	1000a826 	beq	r2,zero,3ab8 <___vfprintf_internal_r+0x3f0>
    3818:	84400047 	ldb	r17,1(r16)
    381c:	00bfffc4 	movi	r2,-1
    3820:	85400044 	addi	r21,r16,1
    3824:	d8002785 	stb	zero,158(sp)
    3828:	0007883a 	mov	r3,zero
    382c:	000f883a 	mov	r7,zero
    3830:	d8802915 	stw	r2,164(sp)
    3834:	d8003115 	stw	zero,196(sp)
    3838:	0025883a 	mov	r18,zero
    383c:	01401604 	movi	r5,88
    3840:	01800244 	movi	r6,9
    3844:	02800a84 	movi	r10,42
    3848:	02401b04 	movi	r9,108
    384c:	ad400044 	addi	r21,r21,1
    3850:	88bff804 	addi	r2,r17,-32
    3854:	28830436 	bltu	r5,r2,4468 <___vfprintf_internal_r+0xda0>
    3858:	100490ba 	slli	r2,r2,2
    385c:	01000034 	movhi	r4,0
    3860:	210e1c04 	addi	r4,r4,14448
    3864:	1105883a 	add	r2,r2,r4
    3868:	10800017 	ldw	r2,0(r2)
    386c:	1000683a 	jmp	r2
    3870:	00004388 	cmpgei	zero,zero,270
    3874:	00004468 	cmpgeui	zero,zero,273
    3878:	00004468 	cmpgeui	zero,zero,273
    387c:	000043a8 	cmpgeui	zero,zero,270
    3880:	00004468 	cmpgeui	zero,zero,273
    3884:	00004468 	cmpgeui	zero,zero,273
    3888:	00004468 	cmpgeui	zero,zero,273
    388c:	00004468 	cmpgeui	zero,zero,273
    3890:	00004468 	cmpgeui	zero,zero,273
    3894:	00004468 	cmpgeui	zero,zero,273
    3898:	00003b1c 	xori	zero,zero,236
    389c:	000042c4 	movi	zero,267
    38a0:	00004468 	cmpgeui	zero,zero,273
    38a4:	000039e4 	muli	zero,zero,231
    38a8:	00003b44 	movi	zero,237
    38ac:	00004468 	cmpgeui	zero,zero,273
    38b0:	00003b84 	movi	zero,238
    38b4:	00003b90 	cmplti	zero,zero,238
    38b8:	00003b90 	cmplti	zero,zero,238
    38bc:	00003b90 	cmplti	zero,zero,238
    38c0:	00003b90 	cmplti	zero,zero,238
    38c4:	00003b90 	cmplti	zero,zero,238
    38c8:	00003b90 	cmplti	zero,zero,238
    38cc:	00003b90 	cmplti	zero,zero,238
    38d0:	00003b90 	cmplti	zero,zero,238
    38d4:	00003b90 	cmplti	zero,zero,238
    38d8:	00004468 	cmpgeui	zero,zero,273
    38dc:	00004468 	cmpgeui	zero,zero,273
    38e0:	00004468 	cmpgeui	zero,zero,273
    38e4:	00004468 	cmpgeui	zero,zero,273
    38e8:	00004468 	cmpgeui	zero,zero,273
    38ec:	00004468 	cmpgeui	zero,zero,273
    38f0:	00004468 	cmpgeui	zero,zero,273
    38f4:	00004468 	cmpgeui	zero,zero,273
    38f8:	00004468 	cmpgeui	zero,zero,273
    38fc:	00004468 	cmpgeui	zero,zero,273
    3900:	00003bc4 	movi	zero,239
    3904:	00003c80 	call	3c8 <init_camera+0x148>
    3908:	00004468 	cmpgeui	zero,zero,273
    390c:	00003c80 	call	3c8 <init_camera+0x148>
    3910:	00004468 	cmpgeui	zero,zero,273
    3914:	00004468 	cmpgeui	zero,zero,273
    3918:	00004468 	cmpgeui	zero,zero,273
    391c:	00004468 	cmpgeui	zero,zero,273
    3920:	00003d20 	cmpeqi	zero,zero,244
    3924:	00004468 	cmpgeui	zero,zero,273
    3928:	00004468 	cmpgeui	zero,zero,273
    392c:	00003d2c 	andhi	zero,zero,244
    3930:	00004468 	cmpgeui	zero,zero,273
    3934:	00004468 	cmpgeui	zero,zero,273
    3938:	00004468 	cmpgeui	zero,zero,273
    393c:	00004468 	cmpgeui	zero,zero,273
    3940:	00004468 	cmpgeui	zero,zero,273
    3944:	000041a4 	muli	zero,zero,262
    3948:	00004468 	cmpgeui	zero,zero,273
    394c:	00004468 	cmpgeui	zero,zero,273
    3950:	00004204 	movi	zero,264
    3954:	00004468 	cmpgeui	zero,zero,273
    3958:	00004468 	cmpgeui	zero,zero,273
    395c:	00004468 	cmpgeui	zero,zero,273
    3960:	00004468 	cmpgeui	zero,zero,273
    3964:	00004468 	cmpgeui	zero,zero,273
    3968:	00004468 	cmpgeui	zero,zero,273
    396c:	00004468 	cmpgeui	zero,zero,273
    3970:	00004468 	cmpgeui	zero,zero,273
    3974:	00004468 	cmpgeui	zero,zero,273
    3978:	00004468 	cmpgeui	zero,zero,273
    397c:	00004414 	movui	zero,272
    3980:	000043b4 	movhi	zero,270
    3984:	00003c80 	call	3c8 <init_camera+0x148>
    3988:	00003c80 	call	3c8 <init_camera+0x148>
    398c:	00003c80 	call	3c8 <init_camera+0x148>
    3990:	000043c4 	movi	zero,271
    3994:	000043b4 	movhi	zero,270
    3998:	00004468 	cmpgeui	zero,zero,273
    399c:	00004468 	cmpgeui	zero,zero,273
    39a0:	000043d0 	cmplti	zero,zero,271
    39a4:	00004468 	cmpgeui	zero,zero,273
    39a8:	000043e0 	cmpeqi	zero,zero,271
    39ac:	000042b4 	movhi	zero,266
    39b0:	000039f0 	cmpltui	zero,zero,231
    39b4:	000042d4 	movui	zero,267
    39b8:	00004468 	cmpgeui	zero,zero,273
    39bc:	000042e0 	cmpeqi	zero,zero,267
    39c0:	00004468 	cmpgeui	zero,zero,273
    39c4:	0000433c 	xorhi	zero,zero,268
    39c8:	00004468 	cmpgeui	zero,zero,273
    39cc:	00004468 	cmpgeui	zero,zero,273
    39d0:	0000434c 	andi	zero,zero,269
    39d4:	d9003117 	ldw	r4,196(sp)
    39d8:	d8802d15 	stw	r2,180(sp)
    39dc:	0109c83a 	sub	r4,zero,r4
    39e0:	d9003115 	stw	r4,196(sp)
    39e4:	94800114 	ori	r18,r18,4
    39e8:	ac400007 	ldb	r17,0(r21)
    39ec:	003f9706 	br	384c <__alt_data_end+0xff00384c>
    39f0:	00800c04 	movi	r2,48
    39f4:	d9002d17 	ldw	r4,180(sp)
    39f8:	d9402917 	ldw	r5,164(sp)
    39fc:	d8802705 	stb	r2,156(sp)
    3a00:	00801e04 	movi	r2,120
    3a04:	d8802745 	stb	r2,157(sp)
    3a08:	d8002785 	stb	zero,158(sp)
    3a0c:	20c00104 	addi	r3,r4,4
    3a10:	24c00017 	ldw	r19,0(r4)
    3a14:	002d883a 	mov	r22,zero
    3a18:	90800094 	ori	r2,r18,2
    3a1c:	28029a16 	blt	r5,zero,4488 <___vfprintf_internal_r+0xdc0>
    3a20:	00bfdfc4 	movi	r2,-129
    3a24:	90a4703a 	and	r18,r18,r2
    3a28:	d8c02d15 	stw	r3,180(sp)
    3a2c:	94800094 	ori	r18,r18,2
    3a30:	9802871e 	bne	r19,zero,4450 <___vfprintf_internal_r+0xd88>
    3a34:	00800074 	movhi	r2,1
    3a38:	1088cd04 	addi	r2,r2,9012
    3a3c:	d8803915 	stw	r2,228(sp)
    3a40:	04401e04 	movi	r17,120
    3a44:	d8802917 	ldw	r2,164(sp)
    3a48:	0039883a 	mov	fp,zero
    3a4c:	1001e926 	beq	r2,zero,41f4 <___vfprintf_internal_r+0xb2c>
    3a50:	0027883a 	mov	r19,zero
    3a54:	002d883a 	mov	r22,zero
    3a58:	00020506 	br	4270 <___vfprintf_internal_r+0xba8>
    3a5c:	d9002c17 	ldw	r4,176(sp)
    3a60:	b80b883a 	mov	r5,r23
    3a64:	00059980 	call	5998 <__swsetup_r>
    3a68:	1005ac1e 	bne	r2,zero,511c <___vfprintf_internal_r+0x1a54>
    3a6c:	b880030b 	ldhu	r2,12(r23)
    3a70:	00c00284 	movi	r3,10
    3a74:	1080068c 	andi	r2,r2,26
    3a78:	10ff3c1e 	bne	r2,r3,376c <__alt_data_end+0xff00376c>
    3a7c:	b880038f 	ldh	r2,14(r23)
    3a80:	103f3a16 	blt	r2,zero,376c <__alt_data_end+0xff00376c>
    3a84:	d9c02d17 	ldw	r7,180(sp)
    3a88:	d9002c17 	ldw	r4,176(sp)
    3a8c:	a80d883a 	mov	r6,r21
    3a90:	b80b883a 	mov	r5,r23
    3a94:	00058dc0 	call	58dc <__sbprintf>
    3a98:	00001106 	br	3ae0 <___vfprintf_internal_r+0x418>
    3a9c:	d9002c17 	ldw	r4,176(sp)
    3aa0:	d9801e04 	addi	r6,sp,120
    3aa4:	b80b883a 	mov	r5,r23
    3aa8:	000a4640 	call	a464 <__sprint_r>
    3aac:	1000081e 	bne	r2,zero,3ad0 <___vfprintf_internal_r+0x408>
    3ab0:	da000404 	addi	r8,sp,16
    3ab4:	003f5306 	br	3804 <__alt_data_end+0xff003804>
    3ab8:	d8802017 	ldw	r2,128(sp)
    3abc:	10000426 	beq	r2,zero,3ad0 <___vfprintf_internal_r+0x408>
    3ac0:	d9002c17 	ldw	r4,176(sp)
    3ac4:	d9801e04 	addi	r6,sp,120
    3ac8:	b80b883a 	mov	r5,r23
    3acc:	000a4640 	call	a464 <__sprint_r>
    3ad0:	b880030b 	ldhu	r2,12(r23)
    3ad4:	1080100c 	andi	r2,r2,64
    3ad8:	1005901e 	bne	r2,zero,511c <___vfprintf_internal_r+0x1a54>
    3adc:	d8802f17 	ldw	r2,188(sp)
    3ae0:	dfc04717 	ldw	ra,284(sp)
    3ae4:	df004617 	ldw	fp,280(sp)
    3ae8:	ddc04517 	ldw	r23,276(sp)
    3aec:	dd804417 	ldw	r22,272(sp)
    3af0:	dd404317 	ldw	r21,268(sp)
    3af4:	dd004217 	ldw	r20,264(sp)
    3af8:	dcc04117 	ldw	r19,260(sp)
    3afc:	dc804017 	ldw	r18,256(sp)
    3b00:	dc403f17 	ldw	r17,252(sp)
    3b04:	dc003e17 	ldw	r16,248(sp)
    3b08:	dec04804 	addi	sp,sp,288
    3b0c:	f800283a 	ret
    3b10:	d9002c17 	ldw	r4,176(sp)
    3b14:	000796c0 	call	796c <__sinit>
    3b18:	003f0406 	br	372c <__alt_data_end+0xff00372c>
    3b1c:	d8802d17 	ldw	r2,180(sp)
    3b20:	d9002d17 	ldw	r4,180(sp)
    3b24:	10800017 	ldw	r2,0(r2)
    3b28:	d8803115 	stw	r2,196(sp)
    3b2c:	20800104 	addi	r2,r4,4
    3b30:	d9003117 	ldw	r4,196(sp)
    3b34:	203fa716 	blt	r4,zero,39d4 <__alt_data_end+0xff0039d4>
    3b38:	d8802d15 	stw	r2,180(sp)
    3b3c:	ac400007 	ldb	r17,0(r21)
    3b40:	003f4206 	br	384c <__alt_data_end+0xff00384c>
    3b44:	ac400007 	ldb	r17,0(r21)
    3b48:	aac00044 	addi	r11,r21,1
    3b4c:	8a872826 	beq	r17,r10,57f0 <___vfprintf_internal_r+0x2128>
    3b50:	88bff404 	addi	r2,r17,-48
    3b54:	0009883a 	mov	r4,zero
    3b58:	30867d36 	bltu	r6,r2,5550 <___vfprintf_internal_r+0x1e88>
    3b5c:	5c400007 	ldb	r17,0(r11)
    3b60:	210002a4 	muli	r4,r4,10
    3b64:	5d400044 	addi	r21,r11,1
    3b68:	a817883a 	mov	r11,r21
    3b6c:	2089883a 	add	r4,r4,r2
    3b70:	88bff404 	addi	r2,r17,-48
    3b74:	30bff92e 	bgeu	r6,r2,3b5c <__alt_data_end+0xff003b5c>
    3b78:	2005c916 	blt	r4,zero,52a0 <___vfprintf_internal_r+0x1bd8>
    3b7c:	d9002915 	stw	r4,164(sp)
    3b80:	003f3306 	br	3850 <__alt_data_end+0xff003850>
    3b84:	94802014 	ori	r18,r18,128
    3b88:	ac400007 	ldb	r17,0(r21)
    3b8c:	003f2f06 	br	384c <__alt_data_end+0xff00384c>
    3b90:	a809883a 	mov	r4,r21
    3b94:	d8003115 	stw	zero,196(sp)
    3b98:	88bff404 	addi	r2,r17,-48
    3b9c:	0017883a 	mov	r11,zero
    3ba0:	24400007 	ldb	r17,0(r4)
    3ba4:	5ac002a4 	muli	r11,r11,10
    3ba8:	ad400044 	addi	r21,r21,1
    3bac:	a809883a 	mov	r4,r21
    3bb0:	12d7883a 	add	r11,r2,r11
    3bb4:	88bff404 	addi	r2,r17,-48
    3bb8:	30bff92e 	bgeu	r6,r2,3ba0 <__alt_data_end+0xff003ba0>
    3bbc:	dac03115 	stw	r11,196(sp)
    3bc0:	003f2306 	br	3850 <__alt_data_end+0xff003850>
    3bc4:	18c03fcc 	andi	r3,r3,255
    3bc8:	18072b1e 	bne	r3,zero,5878 <___vfprintf_internal_r+0x21b0>
    3bcc:	94800414 	ori	r18,r18,16
    3bd0:	9080080c 	andi	r2,r18,32
    3bd4:	10037b26 	beq	r2,zero,49c4 <___vfprintf_internal_r+0x12fc>
    3bd8:	d9402d17 	ldw	r5,180(sp)
    3bdc:	28800117 	ldw	r2,4(r5)
    3be0:	2cc00017 	ldw	r19,0(r5)
    3be4:	29400204 	addi	r5,r5,8
    3be8:	d9402d15 	stw	r5,180(sp)
    3bec:	102d883a 	mov	r22,r2
    3bf0:	10044b16 	blt	r2,zero,4d20 <___vfprintf_internal_r+0x1658>
    3bf4:	d9402917 	ldw	r5,164(sp)
    3bf8:	df002783 	ldbu	fp,158(sp)
    3bfc:	2803bc16 	blt	r5,zero,4af0 <___vfprintf_internal_r+0x1428>
    3c00:	00ffdfc4 	movi	r3,-129
    3c04:	9d84b03a 	or	r2,r19,r22
    3c08:	90e4703a 	and	r18,r18,r3
    3c0c:	10017726 	beq	r2,zero,41ec <___vfprintf_internal_r+0xb24>
    3c10:	b0038326 	beq	r22,zero,4a20 <___vfprintf_internal_r+0x1358>
    3c14:	dc402a15 	stw	r17,168(sp)
    3c18:	dc001e04 	addi	r16,sp,120
    3c1c:	b023883a 	mov	r17,r22
    3c20:	402d883a 	mov	r22,r8
    3c24:	9809883a 	mov	r4,r19
    3c28:	880b883a 	mov	r5,r17
    3c2c:	01800284 	movi	r6,10
    3c30:	000f883a 	mov	r7,zero
    3c34:	000c85c0 	call	c85c <__umoddi3>
    3c38:	10800c04 	addi	r2,r2,48
    3c3c:	843fffc4 	addi	r16,r16,-1
    3c40:	9809883a 	mov	r4,r19
    3c44:	880b883a 	mov	r5,r17
    3c48:	80800005 	stb	r2,0(r16)
    3c4c:	01800284 	movi	r6,10
    3c50:	000f883a 	mov	r7,zero
    3c54:	000c2e40 	call	c2e4 <__udivdi3>
    3c58:	1027883a 	mov	r19,r2
    3c5c:	10c4b03a 	or	r2,r2,r3
    3c60:	1823883a 	mov	r17,r3
    3c64:	103fef1e 	bne	r2,zero,3c24 <__alt_data_end+0xff003c24>
    3c68:	d8c02817 	ldw	r3,160(sp)
    3c6c:	dc402a17 	ldw	r17,168(sp)
    3c70:	b011883a 	mov	r8,r22
    3c74:	1c07c83a 	sub	r3,r3,r16
    3c78:	d8c02e15 	stw	r3,184(sp)
    3c7c:	00005906 	br	3de4 <___vfprintf_internal_r+0x71c>
    3c80:	18c03fcc 	andi	r3,r3,255
    3c84:	1806fa1e 	bne	r3,zero,5870 <___vfprintf_internal_r+0x21a8>
    3c88:	9080020c 	andi	r2,r18,8
    3c8c:	10048a26 	beq	r2,zero,4eb8 <___vfprintf_internal_r+0x17f0>
    3c90:	d8c02d17 	ldw	r3,180(sp)
    3c94:	d9002d17 	ldw	r4,180(sp)
    3c98:	d9402d17 	ldw	r5,180(sp)
    3c9c:	18c00017 	ldw	r3,0(r3)
    3ca0:	21000117 	ldw	r4,4(r4)
    3ca4:	29400204 	addi	r5,r5,8
    3ca8:	d8c03615 	stw	r3,216(sp)
    3cac:	d9003815 	stw	r4,224(sp)
    3cb0:	d9402d15 	stw	r5,180(sp)
    3cb4:	d9003617 	ldw	r4,216(sp)
    3cb8:	d9403817 	ldw	r5,224(sp)
    3cbc:	da003d15 	stw	r8,244(sp)
    3cc0:	04000044 	movi	r16,1
    3cc4:	000a0dc0 	call	a0dc <__fpclassifyd>
    3cc8:	da003d17 	ldw	r8,244(sp)
    3ccc:	14041f1e 	bne	r2,r16,4d4c <___vfprintf_internal_r+0x1684>
    3cd0:	d9003617 	ldw	r4,216(sp)
    3cd4:	d9403817 	ldw	r5,224(sp)
    3cd8:	000d883a 	mov	r6,zero
    3cdc:	000f883a 	mov	r7,zero
    3ce0:	000e08c0 	call	e08c <__ledf2>
    3ce4:	da003d17 	ldw	r8,244(sp)
    3ce8:	1005be16 	blt	r2,zero,53e4 <___vfprintf_internal_r+0x1d1c>
    3cec:	df002783 	ldbu	fp,158(sp)
    3cf0:	008011c4 	movi	r2,71
    3cf4:	1445330e 	bge	r2,r17,51c4 <___vfprintf_internal_r+0x1afc>
    3cf8:	04000074 	movhi	r16,1
    3cfc:	8408c504 	addi	r16,r16,8980
    3d00:	00c000c4 	movi	r3,3
    3d04:	00bfdfc4 	movi	r2,-129
    3d08:	d8c02a15 	stw	r3,168(sp)
    3d0c:	90a4703a 	and	r18,r18,r2
    3d10:	d8c02e15 	stw	r3,184(sp)
    3d14:	d8002915 	stw	zero,164(sp)
    3d18:	d8003215 	stw	zero,200(sp)
    3d1c:	00003706 	br	3dfc <___vfprintf_internal_r+0x734>
    3d20:	94800214 	ori	r18,r18,8
    3d24:	ac400007 	ldb	r17,0(r21)
    3d28:	003ec806 	br	384c <__alt_data_end+0xff00384c>
    3d2c:	18c03fcc 	andi	r3,r3,255
    3d30:	1806db1e 	bne	r3,zero,58a0 <___vfprintf_internal_r+0x21d8>
    3d34:	94800414 	ori	r18,r18,16
    3d38:	9080080c 	andi	r2,r18,32
    3d3c:	1002d826 	beq	r2,zero,48a0 <___vfprintf_internal_r+0x11d8>
    3d40:	d9402d17 	ldw	r5,180(sp)
    3d44:	d8c02917 	ldw	r3,164(sp)
    3d48:	d8002785 	stb	zero,158(sp)
    3d4c:	28800204 	addi	r2,r5,8
    3d50:	2cc00017 	ldw	r19,0(r5)
    3d54:	2d800117 	ldw	r22,4(r5)
    3d58:	18048f16 	blt	r3,zero,4f98 <___vfprintf_internal_r+0x18d0>
    3d5c:	013fdfc4 	movi	r4,-129
    3d60:	9d86b03a 	or	r3,r19,r22
    3d64:	d8802d15 	stw	r2,180(sp)
    3d68:	9124703a 	and	r18,r18,r4
    3d6c:	1802d91e 	bne	r3,zero,48d4 <___vfprintf_internal_r+0x120c>
    3d70:	d8c02917 	ldw	r3,164(sp)
    3d74:	0039883a 	mov	fp,zero
    3d78:	1805c326 	beq	r3,zero,5488 <___vfprintf_internal_r+0x1dc0>
    3d7c:	0027883a 	mov	r19,zero
    3d80:	002d883a 	mov	r22,zero
    3d84:	dc001e04 	addi	r16,sp,120
    3d88:	9806d0fa 	srli	r3,r19,3
    3d8c:	b008977a 	slli	r4,r22,29
    3d90:	b02cd0fa 	srli	r22,r22,3
    3d94:	9cc001cc 	andi	r19,r19,7
    3d98:	98800c04 	addi	r2,r19,48
    3d9c:	843fffc4 	addi	r16,r16,-1
    3da0:	20e6b03a 	or	r19,r4,r3
    3da4:	80800005 	stb	r2,0(r16)
    3da8:	9d86b03a 	or	r3,r19,r22
    3dac:	183ff61e 	bne	r3,zero,3d88 <__alt_data_end+0xff003d88>
    3db0:	90c0004c 	andi	r3,r18,1
    3db4:	18013b26 	beq	r3,zero,42a4 <___vfprintf_internal_r+0xbdc>
    3db8:	10803fcc 	andi	r2,r2,255
    3dbc:	1080201c 	xori	r2,r2,128
    3dc0:	10bfe004 	addi	r2,r2,-128
    3dc4:	00c00c04 	movi	r3,48
    3dc8:	10c13626 	beq	r2,r3,42a4 <___vfprintf_internal_r+0xbdc>
    3dcc:	80ffffc5 	stb	r3,-1(r16)
    3dd0:	d8c02817 	ldw	r3,160(sp)
    3dd4:	80bfffc4 	addi	r2,r16,-1
    3dd8:	1021883a 	mov	r16,r2
    3ddc:	1887c83a 	sub	r3,r3,r2
    3de0:	d8c02e15 	stw	r3,184(sp)
    3de4:	d8802e17 	ldw	r2,184(sp)
    3de8:	d9002917 	ldw	r4,164(sp)
    3dec:	1100010e 	bge	r2,r4,3df4 <___vfprintf_internal_r+0x72c>
    3df0:	2005883a 	mov	r2,r4
    3df4:	d8802a15 	stw	r2,168(sp)
    3df8:	d8003215 	stw	zero,200(sp)
    3dfc:	e7003fcc 	andi	fp,fp,255
    3e00:	e700201c 	xori	fp,fp,128
    3e04:	e73fe004 	addi	fp,fp,-128
    3e08:	e0000326 	beq	fp,zero,3e18 <___vfprintf_internal_r+0x750>
    3e0c:	d8c02a17 	ldw	r3,168(sp)
    3e10:	18c00044 	addi	r3,r3,1
    3e14:	d8c02a15 	stw	r3,168(sp)
    3e18:	90c0008c 	andi	r3,r18,2
    3e1c:	d8c02b15 	stw	r3,172(sp)
    3e20:	18000326 	beq	r3,zero,3e30 <___vfprintf_internal_r+0x768>
    3e24:	d8c02a17 	ldw	r3,168(sp)
    3e28:	18c00084 	addi	r3,r3,2
    3e2c:	d8c02a15 	stw	r3,168(sp)
    3e30:	90c0210c 	andi	r3,r18,132
    3e34:	d8c03015 	stw	r3,192(sp)
    3e38:	1801a31e 	bne	r3,zero,44c8 <___vfprintf_internal_r+0xe00>
    3e3c:	d9003117 	ldw	r4,196(sp)
    3e40:	d8c02a17 	ldw	r3,168(sp)
    3e44:	20e7c83a 	sub	r19,r4,r3
    3e48:	04c19f0e 	bge	zero,r19,44c8 <___vfprintf_internal_r+0xe00>
    3e4c:	02400404 	movi	r9,16
    3e50:	d8c02017 	ldw	r3,128(sp)
    3e54:	d8801f17 	ldw	r2,124(sp)
    3e58:	4cc50d0e 	bge	r9,r19,5290 <___vfprintf_internal_r+0x1bc8>
    3e5c:	01400074 	movhi	r5,1
    3e60:	2948d884 	addi	r5,r5,9058
    3e64:	dc403b15 	stw	r17,236(sp)
    3e68:	d9403515 	stw	r5,212(sp)
    3e6c:	9823883a 	mov	r17,r19
    3e70:	482d883a 	mov	r22,r9
    3e74:	9027883a 	mov	r19,r18
    3e78:	070001c4 	movi	fp,7
    3e7c:	8025883a 	mov	r18,r16
    3e80:	dc002c17 	ldw	r16,176(sp)
    3e84:	00000306 	br	3e94 <___vfprintf_internal_r+0x7cc>
    3e88:	8c7ffc04 	addi	r17,r17,-16
    3e8c:	42000204 	addi	r8,r8,8
    3e90:	b440130e 	bge	r22,r17,3ee0 <___vfprintf_internal_r+0x818>
    3e94:	01000074 	movhi	r4,1
    3e98:	18c00404 	addi	r3,r3,16
    3e9c:	10800044 	addi	r2,r2,1
    3ea0:	2108d884 	addi	r4,r4,9058
    3ea4:	41000015 	stw	r4,0(r8)
    3ea8:	45800115 	stw	r22,4(r8)
    3eac:	d8c02015 	stw	r3,128(sp)
    3eb0:	d8801f15 	stw	r2,124(sp)
    3eb4:	e0bff40e 	bge	fp,r2,3e88 <__alt_data_end+0xff003e88>
    3eb8:	d9801e04 	addi	r6,sp,120
    3ebc:	b80b883a 	mov	r5,r23
    3ec0:	8009883a 	mov	r4,r16
    3ec4:	000a4640 	call	a464 <__sprint_r>
    3ec8:	103f011e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    3ecc:	8c7ffc04 	addi	r17,r17,-16
    3ed0:	d8c02017 	ldw	r3,128(sp)
    3ed4:	d8801f17 	ldw	r2,124(sp)
    3ed8:	da000404 	addi	r8,sp,16
    3edc:	b47fed16 	blt	r22,r17,3e94 <__alt_data_end+0xff003e94>
    3ee0:	9021883a 	mov	r16,r18
    3ee4:	9825883a 	mov	r18,r19
    3ee8:	8827883a 	mov	r19,r17
    3eec:	dc403b17 	ldw	r17,236(sp)
    3ef0:	d9403517 	ldw	r5,212(sp)
    3ef4:	98c7883a 	add	r3,r19,r3
    3ef8:	10800044 	addi	r2,r2,1
    3efc:	41400015 	stw	r5,0(r8)
    3f00:	44c00115 	stw	r19,4(r8)
    3f04:	d8c02015 	stw	r3,128(sp)
    3f08:	d8801f15 	stw	r2,124(sp)
    3f0c:	010001c4 	movi	r4,7
    3f10:	2082a316 	blt	r4,r2,49a0 <___vfprintf_internal_r+0x12d8>
    3f14:	df002787 	ldb	fp,158(sp)
    3f18:	42000204 	addi	r8,r8,8
    3f1c:	e0000c26 	beq	fp,zero,3f50 <___vfprintf_internal_r+0x888>
    3f20:	d8801f17 	ldw	r2,124(sp)
    3f24:	d9002784 	addi	r4,sp,158
    3f28:	18c00044 	addi	r3,r3,1
    3f2c:	10800044 	addi	r2,r2,1
    3f30:	41000015 	stw	r4,0(r8)
    3f34:	01000044 	movi	r4,1
    3f38:	41000115 	stw	r4,4(r8)
    3f3c:	d8c02015 	stw	r3,128(sp)
    3f40:	d8801f15 	stw	r2,124(sp)
    3f44:	010001c4 	movi	r4,7
    3f48:	20823c16 	blt	r4,r2,483c <___vfprintf_internal_r+0x1174>
    3f4c:	42000204 	addi	r8,r8,8
    3f50:	d8802b17 	ldw	r2,172(sp)
    3f54:	10000c26 	beq	r2,zero,3f88 <___vfprintf_internal_r+0x8c0>
    3f58:	d8801f17 	ldw	r2,124(sp)
    3f5c:	d9002704 	addi	r4,sp,156
    3f60:	18c00084 	addi	r3,r3,2
    3f64:	10800044 	addi	r2,r2,1
    3f68:	41000015 	stw	r4,0(r8)
    3f6c:	01000084 	movi	r4,2
    3f70:	41000115 	stw	r4,4(r8)
    3f74:	d8c02015 	stw	r3,128(sp)
    3f78:	d8801f15 	stw	r2,124(sp)
    3f7c:	010001c4 	movi	r4,7
    3f80:	20823616 	blt	r4,r2,485c <___vfprintf_internal_r+0x1194>
    3f84:	42000204 	addi	r8,r8,8
    3f88:	d9003017 	ldw	r4,192(sp)
    3f8c:	00802004 	movi	r2,128
    3f90:	20819926 	beq	r4,r2,45f8 <___vfprintf_internal_r+0xf30>
    3f94:	d9402917 	ldw	r5,164(sp)
    3f98:	d8802e17 	ldw	r2,184(sp)
    3f9c:	28adc83a 	sub	r22,r5,r2
    3fa0:	0580310e 	bge	zero,r22,4068 <___vfprintf_internal_r+0x9a0>
    3fa4:	07000404 	movi	fp,16
    3fa8:	d8801f17 	ldw	r2,124(sp)
    3fac:	e584140e 	bge	fp,r22,5000 <___vfprintf_internal_r+0x1938>
    3fb0:	01400074 	movhi	r5,1
    3fb4:	2948d484 	addi	r5,r5,9042
    3fb8:	dc402915 	stw	r17,164(sp)
    3fbc:	d9402b15 	stw	r5,172(sp)
    3fc0:	b023883a 	mov	r17,r22
    3fc4:	04c001c4 	movi	r19,7
    3fc8:	a82d883a 	mov	r22,r21
    3fcc:	902b883a 	mov	r21,r18
    3fd0:	8025883a 	mov	r18,r16
    3fd4:	dc002c17 	ldw	r16,176(sp)
    3fd8:	00000306 	br	3fe8 <___vfprintf_internal_r+0x920>
    3fdc:	8c7ffc04 	addi	r17,r17,-16
    3fe0:	42000204 	addi	r8,r8,8
    3fe4:	e440110e 	bge	fp,r17,402c <___vfprintf_internal_r+0x964>
    3fe8:	18c00404 	addi	r3,r3,16
    3fec:	10800044 	addi	r2,r2,1
    3ff0:	45000015 	stw	r20,0(r8)
    3ff4:	47000115 	stw	fp,4(r8)
    3ff8:	d8c02015 	stw	r3,128(sp)
    3ffc:	d8801f15 	stw	r2,124(sp)
    4000:	98bff60e 	bge	r19,r2,3fdc <__alt_data_end+0xff003fdc>
    4004:	d9801e04 	addi	r6,sp,120
    4008:	b80b883a 	mov	r5,r23
    400c:	8009883a 	mov	r4,r16
    4010:	000a4640 	call	a464 <__sprint_r>
    4014:	103eae1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4018:	8c7ffc04 	addi	r17,r17,-16
    401c:	d8c02017 	ldw	r3,128(sp)
    4020:	d8801f17 	ldw	r2,124(sp)
    4024:	da000404 	addi	r8,sp,16
    4028:	e47fef16 	blt	fp,r17,3fe8 <__alt_data_end+0xff003fe8>
    402c:	9021883a 	mov	r16,r18
    4030:	a825883a 	mov	r18,r21
    4034:	b02b883a 	mov	r21,r22
    4038:	882d883a 	mov	r22,r17
    403c:	dc402917 	ldw	r17,164(sp)
    4040:	d9002b17 	ldw	r4,172(sp)
    4044:	1d87883a 	add	r3,r3,r22
    4048:	10800044 	addi	r2,r2,1
    404c:	41000015 	stw	r4,0(r8)
    4050:	45800115 	stw	r22,4(r8)
    4054:	d8c02015 	stw	r3,128(sp)
    4058:	d8801f15 	stw	r2,124(sp)
    405c:	010001c4 	movi	r4,7
    4060:	2081ee16 	blt	r4,r2,481c <___vfprintf_internal_r+0x1154>
    4064:	42000204 	addi	r8,r8,8
    4068:	9080400c 	andi	r2,r18,256
    406c:	1001181e 	bne	r2,zero,44d0 <___vfprintf_internal_r+0xe08>
    4070:	d9402e17 	ldw	r5,184(sp)
    4074:	d8801f17 	ldw	r2,124(sp)
    4078:	44000015 	stw	r16,0(r8)
    407c:	1947883a 	add	r3,r3,r5
    4080:	10800044 	addi	r2,r2,1
    4084:	41400115 	stw	r5,4(r8)
    4088:	d8c02015 	stw	r3,128(sp)
    408c:	d8801f15 	stw	r2,124(sp)
    4090:	010001c4 	movi	r4,7
    4094:	2081d316 	blt	r4,r2,47e4 <___vfprintf_internal_r+0x111c>
    4098:	42000204 	addi	r8,r8,8
    409c:	9480010c 	andi	r18,r18,4
    40a0:	90003226 	beq	r18,zero,416c <___vfprintf_internal_r+0xaa4>
    40a4:	d9403117 	ldw	r5,196(sp)
    40a8:	d8802a17 	ldw	r2,168(sp)
    40ac:	28a1c83a 	sub	r16,r5,r2
    40b0:	04002e0e 	bge	zero,r16,416c <___vfprintf_internal_r+0xaa4>
    40b4:	04400404 	movi	r17,16
    40b8:	d8801f17 	ldw	r2,124(sp)
    40bc:	8c04a20e 	bge	r17,r16,5348 <___vfprintf_internal_r+0x1c80>
    40c0:	01400074 	movhi	r5,1
    40c4:	2948d884 	addi	r5,r5,9058
    40c8:	d9403515 	stw	r5,212(sp)
    40cc:	048001c4 	movi	r18,7
    40d0:	dcc02c17 	ldw	r19,176(sp)
    40d4:	00000306 	br	40e4 <___vfprintf_internal_r+0xa1c>
    40d8:	843ffc04 	addi	r16,r16,-16
    40dc:	42000204 	addi	r8,r8,8
    40e0:	8c00130e 	bge	r17,r16,4130 <___vfprintf_internal_r+0xa68>
    40e4:	01000074 	movhi	r4,1
    40e8:	18c00404 	addi	r3,r3,16
    40ec:	10800044 	addi	r2,r2,1
    40f0:	2108d884 	addi	r4,r4,9058
    40f4:	41000015 	stw	r4,0(r8)
    40f8:	44400115 	stw	r17,4(r8)
    40fc:	d8c02015 	stw	r3,128(sp)
    4100:	d8801f15 	stw	r2,124(sp)
    4104:	90bff40e 	bge	r18,r2,40d8 <__alt_data_end+0xff0040d8>
    4108:	d9801e04 	addi	r6,sp,120
    410c:	b80b883a 	mov	r5,r23
    4110:	9809883a 	mov	r4,r19
    4114:	000a4640 	call	a464 <__sprint_r>
    4118:	103e6d1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    411c:	843ffc04 	addi	r16,r16,-16
    4120:	d8c02017 	ldw	r3,128(sp)
    4124:	d8801f17 	ldw	r2,124(sp)
    4128:	da000404 	addi	r8,sp,16
    412c:	8c3fed16 	blt	r17,r16,40e4 <__alt_data_end+0xff0040e4>
    4130:	d9403517 	ldw	r5,212(sp)
    4134:	1c07883a 	add	r3,r3,r16
    4138:	10800044 	addi	r2,r2,1
    413c:	41400015 	stw	r5,0(r8)
    4140:	44000115 	stw	r16,4(r8)
    4144:	d8c02015 	stw	r3,128(sp)
    4148:	d8801f15 	stw	r2,124(sp)
    414c:	010001c4 	movi	r4,7
    4150:	2080060e 	bge	r4,r2,416c <___vfprintf_internal_r+0xaa4>
    4154:	d9002c17 	ldw	r4,176(sp)
    4158:	d9801e04 	addi	r6,sp,120
    415c:	b80b883a 	mov	r5,r23
    4160:	000a4640 	call	a464 <__sprint_r>
    4164:	103e5a1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4168:	d8c02017 	ldw	r3,128(sp)
    416c:	d8803117 	ldw	r2,196(sp)
    4170:	d9002a17 	ldw	r4,168(sp)
    4174:	1100010e 	bge	r2,r4,417c <___vfprintf_internal_r+0xab4>
    4178:	2005883a 	mov	r2,r4
    417c:	d9402f17 	ldw	r5,188(sp)
    4180:	288b883a 	add	r5,r5,r2
    4184:	d9402f15 	stw	r5,188(sp)
    4188:	18019e1e 	bne	r3,zero,4804 <___vfprintf_internal_r+0x113c>
    418c:	a8800007 	ldb	r2,0(r21)
    4190:	d8001f15 	stw	zero,124(sp)
    4194:	da000404 	addi	r8,sp,16
    4198:	103d851e 	bne	r2,zero,37b0 <__alt_data_end+0xff0037b0>
    419c:	a821883a 	mov	r16,r21
    41a0:	003d9b06 	br	3810 <__alt_data_end+0xff003810>
    41a4:	18c03fcc 	andi	r3,r3,255
    41a8:	1805c11e 	bne	r3,zero,58b0 <___vfprintf_internal_r+0x21e8>
    41ac:	94800414 	ori	r18,r18,16
    41b0:	9080080c 	andi	r2,r18,32
    41b4:	10020c26 	beq	r2,zero,49e8 <___vfprintf_internal_r+0x1320>
    41b8:	d8802d17 	ldw	r2,180(sp)
    41bc:	d9002917 	ldw	r4,164(sp)
    41c0:	d8002785 	stb	zero,158(sp)
    41c4:	10c00204 	addi	r3,r2,8
    41c8:	14c00017 	ldw	r19,0(r2)
    41cc:	15800117 	ldw	r22,4(r2)
    41d0:	20040f16 	blt	r4,zero,5210 <___vfprintf_internal_r+0x1b48>
    41d4:	013fdfc4 	movi	r4,-129
    41d8:	9d84b03a 	or	r2,r19,r22
    41dc:	d8c02d15 	stw	r3,180(sp)
    41e0:	9124703a 	and	r18,r18,r4
    41e4:	0039883a 	mov	fp,zero
    41e8:	103e891e 	bne	r2,zero,3c10 <__alt_data_end+0xff003c10>
    41ec:	d9002917 	ldw	r4,164(sp)
    41f0:	2002c11e 	bne	r4,zero,4cf8 <___vfprintf_internal_r+0x1630>
    41f4:	d8002915 	stw	zero,164(sp)
    41f8:	d8002e15 	stw	zero,184(sp)
    41fc:	dc001e04 	addi	r16,sp,120
    4200:	003ef806 	br	3de4 <__alt_data_end+0xff003de4>
    4204:	18c03fcc 	andi	r3,r3,255
    4208:	18059d1e 	bne	r3,zero,5880 <___vfprintf_internal_r+0x21b8>
    420c:	01400074 	movhi	r5,1
    4210:	2948c804 	addi	r5,r5,8992
    4214:	d9403915 	stw	r5,228(sp)
    4218:	9080080c 	andi	r2,r18,32
    421c:	10005226 	beq	r2,zero,4368 <___vfprintf_internal_r+0xca0>
    4220:	d8802d17 	ldw	r2,180(sp)
    4224:	14c00017 	ldw	r19,0(r2)
    4228:	15800117 	ldw	r22,4(r2)
    422c:	10800204 	addi	r2,r2,8
    4230:	d8802d15 	stw	r2,180(sp)
    4234:	9080004c 	andi	r2,r18,1
    4238:	10019026 	beq	r2,zero,487c <___vfprintf_internal_r+0x11b4>
    423c:	9d84b03a 	or	r2,r19,r22
    4240:	10036926 	beq	r2,zero,4fe8 <___vfprintf_internal_r+0x1920>
    4244:	d8c02917 	ldw	r3,164(sp)
    4248:	00800c04 	movi	r2,48
    424c:	d8802705 	stb	r2,156(sp)
    4250:	dc402745 	stb	r17,157(sp)
    4254:	d8002785 	stb	zero,158(sp)
    4258:	90800094 	ori	r2,r18,2
    425c:	18045d16 	blt	r3,zero,53d4 <___vfprintf_internal_r+0x1d0c>
    4260:	00bfdfc4 	movi	r2,-129
    4264:	90a4703a 	and	r18,r18,r2
    4268:	94800094 	ori	r18,r18,2
    426c:	0039883a 	mov	fp,zero
    4270:	d9003917 	ldw	r4,228(sp)
    4274:	dc001e04 	addi	r16,sp,120
    4278:	988003cc 	andi	r2,r19,15
    427c:	b006973a 	slli	r3,r22,28
    4280:	2085883a 	add	r2,r4,r2
    4284:	9826d13a 	srli	r19,r19,4
    4288:	10800003 	ldbu	r2,0(r2)
    428c:	b02cd13a 	srli	r22,r22,4
    4290:	843fffc4 	addi	r16,r16,-1
    4294:	1ce6b03a 	or	r19,r3,r19
    4298:	80800005 	stb	r2,0(r16)
    429c:	9d84b03a 	or	r2,r19,r22
    42a0:	103ff51e 	bne	r2,zero,4278 <__alt_data_end+0xff004278>
    42a4:	d8c02817 	ldw	r3,160(sp)
    42a8:	1c07c83a 	sub	r3,r3,r16
    42ac:	d8c02e15 	stw	r3,184(sp)
    42b0:	003ecc06 	br	3de4 <__alt_data_end+0xff003de4>
    42b4:	18c03fcc 	andi	r3,r3,255
    42b8:	183e9f26 	beq	r3,zero,3d38 <__alt_data_end+0xff003d38>
    42bc:	d9c02785 	stb	r7,158(sp)
    42c0:	003e9d06 	br	3d38 <__alt_data_end+0xff003d38>
    42c4:	00c00044 	movi	r3,1
    42c8:	01c00ac4 	movi	r7,43
    42cc:	ac400007 	ldb	r17,0(r21)
    42d0:	003d5e06 	br	384c <__alt_data_end+0xff00384c>
    42d4:	94800814 	ori	r18,r18,32
    42d8:	ac400007 	ldb	r17,0(r21)
    42dc:	003d5b06 	br	384c <__alt_data_end+0xff00384c>
    42e0:	d8c02d17 	ldw	r3,180(sp)
    42e4:	d8002785 	stb	zero,158(sp)
    42e8:	1c000017 	ldw	r16,0(r3)
    42ec:	1cc00104 	addi	r19,r3,4
    42f0:	80041926 	beq	r16,zero,5358 <___vfprintf_internal_r+0x1c90>
    42f4:	d9002917 	ldw	r4,164(sp)
    42f8:	2003d016 	blt	r4,zero,523c <___vfprintf_internal_r+0x1b74>
    42fc:	200d883a 	mov	r6,r4
    4300:	000b883a 	mov	r5,zero
    4304:	8009883a 	mov	r4,r16
    4308:	da003d15 	stw	r8,244(sp)
    430c:	00086cc0 	call	86cc <memchr>
    4310:	da003d17 	ldw	r8,244(sp)
    4314:	10045426 	beq	r2,zero,5468 <___vfprintf_internal_r+0x1da0>
    4318:	1405c83a 	sub	r2,r2,r16
    431c:	d8802e15 	stw	r2,184(sp)
    4320:	1003cc16 	blt	r2,zero,5254 <___vfprintf_internal_r+0x1b8c>
    4324:	df002783 	ldbu	fp,158(sp)
    4328:	d8802a15 	stw	r2,168(sp)
    432c:	dcc02d15 	stw	r19,180(sp)
    4330:	d8002915 	stw	zero,164(sp)
    4334:	d8003215 	stw	zero,200(sp)
    4338:	003eb006 	br	3dfc <__alt_data_end+0xff003dfc>
    433c:	18c03fcc 	andi	r3,r3,255
    4340:	183f9b26 	beq	r3,zero,41b0 <__alt_data_end+0xff0041b0>
    4344:	d9c02785 	stb	r7,158(sp)
    4348:	003f9906 	br	41b0 <__alt_data_end+0xff0041b0>
    434c:	18c03fcc 	andi	r3,r3,255
    4350:	1805551e 	bne	r3,zero,58a8 <___vfprintf_internal_r+0x21e0>
    4354:	01400074 	movhi	r5,1
    4358:	2948cd04 	addi	r5,r5,9012
    435c:	d9403915 	stw	r5,228(sp)
    4360:	9080080c 	andi	r2,r18,32
    4364:	103fae1e 	bne	r2,zero,4220 <__alt_data_end+0xff004220>
    4368:	9080040c 	andi	r2,r18,16
    436c:	1002de26 	beq	r2,zero,4ee8 <___vfprintf_internal_r+0x1820>
    4370:	d8c02d17 	ldw	r3,180(sp)
    4374:	002d883a 	mov	r22,zero
    4378:	1cc00017 	ldw	r19,0(r3)
    437c:	18c00104 	addi	r3,r3,4
    4380:	d8c02d15 	stw	r3,180(sp)
    4384:	003fab06 	br	4234 <__alt_data_end+0xff004234>
    4388:	38803fcc 	andi	r2,r7,255
    438c:	1080201c 	xori	r2,r2,128
    4390:	10bfe004 	addi	r2,r2,-128
    4394:	1002d21e 	bne	r2,zero,4ee0 <___vfprintf_internal_r+0x1818>
    4398:	00c00044 	movi	r3,1
    439c:	01c00804 	movi	r7,32
    43a0:	ac400007 	ldb	r17,0(r21)
    43a4:	003d2906 	br	384c <__alt_data_end+0xff00384c>
    43a8:	94800054 	ori	r18,r18,1
    43ac:	ac400007 	ldb	r17,0(r21)
    43b0:	003d2606 	br	384c <__alt_data_end+0xff00384c>
    43b4:	18c03fcc 	andi	r3,r3,255
    43b8:	183e0526 	beq	r3,zero,3bd0 <__alt_data_end+0xff003bd0>
    43bc:	d9c02785 	stb	r7,158(sp)
    43c0:	003e0306 	br	3bd0 <__alt_data_end+0xff003bd0>
    43c4:	94801014 	ori	r18,r18,64
    43c8:	ac400007 	ldb	r17,0(r21)
    43cc:	003d1f06 	br	384c <__alt_data_end+0xff00384c>
    43d0:	ac400007 	ldb	r17,0(r21)
    43d4:	8a438726 	beq	r17,r9,51f4 <___vfprintf_internal_r+0x1b2c>
    43d8:	94800414 	ori	r18,r18,16
    43dc:	003d1b06 	br	384c <__alt_data_end+0xff00384c>
    43e0:	18c03fcc 	andi	r3,r3,255
    43e4:	1805341e 	bne	r3,zero,58b8 <___vfprintf_internal_r+0x21f0>
    43e8:	9080080c 	andi	r2,r18,32
    43ec:	1002cd26 	beq	r2,zero,4f24 <___vfprintf_internal_r+0x185c>
    43f0:	d9402d17 	ldw	r5,180(sp)
    43f4:	d9002f17 	ldw	r4,188(sp)
    43f8:	28800017 	ldw	r2,0(r5)
    43fc:	2007d7fa 	srai	r3,r4,31
    4400:	29400104 	addi	r5,r5,4
    4404:	d9402d15 	stw	r5,180(sp)
    4408:	11000015 	stw	r4,0(r2)
    440c:	10c00115 	stw	r3,4(r2)
    4410:	003ce506 	br	37a8 <__alt_data_end+0xff0037a8>
    4414:	d8c02d17 	ldw	r3,180(sp)
    4418:	d9002d17 	ldw	r4,180(sp)
    441c:	d8002785 	stb	zero,158(sp)
    4420:	18800017 	ldw	r2,0(r3)
    4424:	21000104 	addi	r4,r4,4
    4428:	00c00044 	movi	r3,1
    442c:	d8c02a15 	stw	r3,168(sp)
    4430:	d8801405 	stb	r2,80(sp)
    4434:	d9002d15 	stw	r4,180(sp)
    4438:	d8c02e15 	stw	r3,184(sp)
    443c:	d8002915 	stw	zero,164(sp)
    4440:	d8003215 	stw	zero,200(sp)
    4444:	dc001404 	addi	r16,sp,80
    4448:	0039883a 	mov	fp,zero
    444c:	003e7206 	br	3e18 <__alt_data_end+0xff003e18>
    4450:	01000074 	movhi	r4,1
    4454:	2108cd04 	addi	r4,r4,9012
    4458:	0039883a 	mov	fp,zero
    445c:	d9003915 	stw	r4,228(sp)
    4460:	04401e04 	movi	r17,120
    4464:	003f8206 	br	4270 <__alt_data_end+0xff004270>
    4468:	18c03fcc 	andi	r3,r3,255
    446c:	1805061e 	bne	r3,zero,5888 <___vfprintf_internal_r+0x21c0>
    4470:	883d9126 	beq	r17,zero,3ab8 <__alt_data_end+0xff003ab8>
    4474:	00c00044 	movi	r3,1
    4478:	d8c02a15 	stw	r3,168(sp)
    447c:	dc401405 	stb	r17,80(sp)
    4480:	d8002785 	stb	zero,158(sp)
    4484:	003fec06 	br	4438 <__alt_data_end+0xff004438>
    4488:	01400074 	movhi	r5,1
    448c:	2948cd04 	addi	r5,r5,9012
    4490:	d9403915 	stw	r5,228(sp)
    4494:	d8c02d15 	stw	r3,180(sp)
    4498:	1025883a 	mov	r18,r2
    449c:	04401e04 	movi	r17,120
    44a0:	9d84b03a 	or	r2,r19,r22
    44a4:	1000fc1e 	bne	r2,zero,4898 <___vfprintf_internal_r+0x11d0>
    44a8:	0039883a 	mov	fp,zero
    44ac:	00800084 	movi	r2,2
    44b0:	10803fcc 	andi	r2,r2,255
    44b4:	00c00044 	movi	r3,1
    44b8:	10c20f26 	beq	r2,r3,4cf8 <___vfprintf_internal_r+0x1630>
    44bc:	00c00084 	movi	r3,2
    44c0:	10fd6326 	beq	r2,r3,3a50 <__alt_data_end+0xff003a50>
    44c4:	003e2d06 	br	3d7c <__alt_data_end+0xff003d7c>
    44c8:	d8c02017 	ldw	r3,128(sp)
    44cc:	003e9306 	br	3f1c <__alt_data_end+0xff003f1c>
    44d0:	00801944 	movi	r2,101
    44d4:	14407e0e 	bge	r2,r17,46d0 <___vfprintf_internal_r+0x1008>
    44d8:	d9003617 	ldw	r4,216(sp)
    44dc:	d9403817 	ldw	r5,224(sp)
    44e0:	000d883a 	mov	r6,zero
    44e4:	000f883a 	mov	r7,zero
    44e8:	d8c03c15 	stw	r3,240(sp)
    44ec:	da003d15 	stw	r8,244(sp)
    44f0:	000df280 	call	df28 <__eqdf2>
    44f4:	d8c03c17 	ldw	r3,240(sp)
    44f8:	da003d17 	ldw	r8,244(sp)
    44fc:	1000f71e 	bne	r2,zero,48dc <___vfprintf_internal_r+0x1214>
    4500:	d8801f17 	ldw	r2,124(sp)
    4504:	01000074 	movhi	r4,1
    4508:	2108d404 	addi	r4,r4,9040
    450c:	18c00044 	addi	r3,r3,1
    4510:	10800044 	addi	r2,r2,1
    4514:	41000015 	stw	r4,0(r8)
    4518:	01000044 	movi	r4,1
    451c:	41000115 	stw	r4,4(r8)
    4520:	d8c02015 	stw	r3,128(sp)
    4524:	d8801f15 	stw	r2,124(sp)
    4528:	010001c4 	movi	r4,7
    452c:	2082b816 	blt	r4,r2,5010 <___vfprintf_internal_r+0x1948>
    4530:	42000204 	addi	r8,r8,8
    4534:	d8802617 	ldw	r2,152(sp)
    4538:	d9403317 	ldw	r5,204(sp)
    453c:	11400216 	blt	r2,r5,4548 <___vfprintf_internal_r+0xe80>
    4540:	9080004c 	andi	r2,r18,1
    4544:	103ed526 	beq	r2,zero,409c <__alt_data_end+0xff00409c>
    4548:	d8803717 	ldw	r2,220(sp)
    454c:	d9003417 	ldw	r4,208(sp)
    4550:	d9403717 	ldw	r5,220(sp)
    4554:	1887883a 	add	r3,r3,r2
    4558:	d8801f17 	ldw	r2,124(sp)
    455c:	41000015 	stw	r4,0(r8)
    4560:	41400115 	stw	r5,4(r8)
    4564:	10800044 	addi	r2,r2,1
    4568:	d8c02015 	stw	r3,128(sp)
    456c:	d8801f15 	stw	r2,124(sp)
    4570:	010001c4 	movi	r4,7
    4574:	20832916 	blt	r4,r2,521c <___vfprintf_internal_r+0x1b54>
    4578:	42000204 	addi	r8,r8,8
    457c:	d8803317 	ldw	r2,204(sp)
    4580:	143fffc4 	addi	r16,r2,-1
    4584:	043ec50e 	bge	zero,r16,409c <__alt_data_end+0xff00409c>
    4588:	04400404 	movi	r17,16
    458c:	d8801f17 	ldw	r2,124(sp)
    4590:	8c00880e 	bge	r17,r16,47b4 <___vfprintf_internal_r+0x10ec>
    4594:	01400074 	movhi	r5,1
    4598:	2948d484 	addi	r5,r5,9042
    459c:	d9402b15 	stw	r5,172(sp)
    45a0:	058001c4 	movi	r22,7
    45a4:	dcc02c17 	ldw	r19,176(sp)
    45a8:	00000306 	br	45b8 <___vfprintf_internal_r+0xef0>
    45ac:	42000204 	addi	r8,r8,8
    45b0:	843ffc04 	addi	r16,r16,-16
    45b4:	8c00820e 	bge	r17,r16,47c0 <___vfprintf_internal_r+0x10f8>
    45b8:	18c00404 	addi	r3,r3,16
    45bc:	10800044 	addi	r2,r2,1
    45c0:	45000015 	stw	r20,0(r8)
    45c4:	44400115 	stw	r17,4(r8)
    45c8:	d8c02015 	stw	r3,128(sp)
    45cc:	d8801f15 	stw	r2,124(sp)
    45d0:	b0bff60e 	bge	r22,r2,45ac <__alt_data_end+0xff0045ac>
    45d4:	d9801e04 	addi	r6,sp,120
    45d8:	b80b883a 	mov	r5,r23
    45dc:	9809883a 	mov	r4,r19
    45e0:	000a4640 	call	a464 <__sprint_r>
    45e4:	103d3a1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    45e8:	d8c02017 	ldw	r3,128(sp)
    45ec:	d8801f17 	ldw	r2,124(sp)
    45f0:	da000404 	addi	r8,sp,16
    45f4:	003fee06 	br	45b0 <__alt_data_end+0xff0045b0>
    45f8:	d9403117 	ldw	r5,196(sp)
    45fc:	d8802a17 	ldw	r2,168(sp)
    4600:	28adc83a 	sub	r22,r5,r2
    4604:	05be630e 	bge	zero,r22,3f94 <__alt_data_end+0xff003f94>
    4608:	07000404 	movi	fp,16
    460c:	d8801f17 	ldw	r2,124(sp)
    4610:	e5838f0e 	bge	fp,r22,5450 <___vfprintf_internal_r+0x1d88>
    4614:	01400074 	movhi	r5,1
    4618:	2948d484 	addi	r5,r5,9042
    461c:	dc403015 	stw	r17,192(sp)
    4620:	d9402b15 	stw	r5,172(sp)
    4624:	b023883a 	mov	r17,r22
    4628:	04c001c4 	movi	r19,7
    462c:	a82d883a 	mov	r22,r21
    4630:	902b883a 	mov	r21,r18
    4634:	8025883a 	mov	r18,r16
    4638:	dc002c17 	ldw	r16,176(sp)
    463c:	00000306 	br	464c <___vfprintf_internal_r+0xf84>
    4640:	8c7ffc04 	addi	r17,r17,-16
    4644:	42000204 	addi	r8,r8,8
    4648:	e440110e 	bge	fp,r17,4690 <___vfprintf_internal_r+0xfc8>
    464c:	18c00404 	addi	r3,r3,16
    4650:	10800044 	addi	r2,r2,1
    4654:	45000015 	stw	r20,0(r8)
    4658:	47000115 	stw	fp,4(r8)
    465c:	d8c02015 	stw	r3,128(sp)
    4660:	d8801f15 	stw	r2,124(sp)
    4664:	98bff60e 	bge	r19,r2,4640 <__alt_data_end+0xff004640>
    4668:	d9801e04 	addi	r6,sp,120
    466c:	b80b883a 	mov	r5,r23
    4670:	8009883a 	mov	r4,r16
    4674:	000a4640 	call	a464 <__sprint_r>
    4678:	103d151e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    467c:	8c7ffc04 	addi	r17,r17,-16
    4680:	d8c02017 	ldw	r3,128(sp)
    4684:	d8801f17 	ldw	r2,124(sp)
    4688:	da000404 	addi	r8,sp,16
    468c:	e47fef16 	blt	fp,r17,464c <__alt_data_end+0xff00464c>
    4690:	9021883a 	mov	r16,r18
    4694:	a825883a 	mov	r18,r21
    4698:	b02b883a 	mov	r21,r22
    469c:	882d883a 	mov	r22,r17
    46a0:	dc403017 	ldw	r17,192(sp)
    46a4:	d9002b17 	ldw	r4,172(sp)
    46a8:	1d87883a 	add	r3,r3,r22
    46ac:	10800044 	addi	r2,r2,1
    46b0:	41000015 	stw	r4,0(r8)
    46b4:	45800115 	stw	r22,4(r8)
    46b8:	d8c02015 	stw	r3,128(sp)
    46bc:	d8801f15 	stw	r2,124(sp)
    46c0:	010001c4 	movi	r4,7
    46c4:	20818e16 	blt	r4,r2,4d00 <___vfprintf_internal_r+0x1638>
    46c8:	42000204 	addi	r8,r8,8
    46cc:	003e3106 	br	3f94 <__alt_data_end+0xff003f94>
    46d0:	d9403317 	ldw	r5,204(sp)
    46d4:	00800044 	movi	r2,1
    46d8:	18c00044 	addi	r3,r3,1
    46dc:	1141530e 	bge	r2,r5,4c2c <___vfprintf_internal_r+0x1564>
    46e0:	dc401f17 	ldw	r17,124(sp)
    46e4:	00800044 	movi	r2,1
    46e8:	40800115 	stw	r2,4(r8)
    46ec:	8c400044 	addi	r17,r17,1
    46f0:	44000015 	stw	r16,0(r8)
    46f4:	d8c02015 	stw	r3,128(sp)
    46f8:	dc401f15 	stw	r17,124(sp)
    46fc:	008001c4 	movi	r2,7
    4700:	14416b16 	blt	r2,r17,4cb0 <___vfprintf_internal_r+0x15e8>
    4704:	42000204 	addi	r8,r8,8
    4708:	d8803717 	ldw	r2,220(sp)
    470c:	d9003417 	ldw	r4,208(sp)
    4710:	8c400044 	addi	r17,r17,1
    4714:	10c7883a 	add	r3,r2,r3
    4718:	40800115 	stw	r2,4(r8)
    471c:	41000015 	stw	r4,0(r8)
    4720:	d8c02015 	stw	r3,128(sp)
    4724:	dc401f15 	stw	r17,124(sp)
    4728:	008001c4 	movi	r2,7
    472c:	14416916 	blt	r2,r17,4cd4 <___vfprintf_internal_r+0x160c>
    4730:	45800204 	addi	r22,r8,8
    4734:	d9003617 	ldw	r4,216(sp)
    4738:	d9403817 	ldw	r5,224(sp)
    473c:	000d883a 	mov	r6,zero
    4740:	000f883a 	mov	r7,zero
    4744:	d8c03c15 	stw	r3,240(sp)
    4748:	000df280 	call	df28 <__eqdf2>
    474c:	d8c03c17 	ldw	r3,240(sp)
    4750:	1000bc26 	beq	r2,zero,4a44 <___vfprintf_internal_r+0x137c>
    4754:	d9403317 	ldw	r5,204(sp)
    4758:	84000044 	addi	r16,r16,1
    475c:	8c400044 	addi	r17,r17,1
    4760:	28bfffc4 	addi	r2,r5,-1
    4764:	1887883a 	add	r3,r3,r2
    4768:	b0800115 	stw	r2,4(r22)
    476c:	b4000015 	stw	r16,0(r22)
    4770:	d8c02015 	stw	r3,128(sp)
    4774:	dc401f15 	stw	r17,124(sp)
    4778:	008001c4 	movi	r2,7
    477c:	14414316 	blt	r2,r17,4c8c <___vfprintf_internal_r+0x15c4>
    4780:	b5800204 	addi	r22,r22,8
    4784:	d9003a17 	ldw	r4,232(sp)
    4788:	df0022c4 	addi	fp,sp,139
    478c:	8c400044 	addi	r17,r17,1
    4790:	20c7883a 	add	r3,r4,r3
    4794:	b7000015 	stw	fp,0(r22)
    4798:	b1000115 	stw	r4,4(r22)
    479c:	d8c02015 	stw	r3,128(sp)
    47a0:	dc401f15 	stw	r17,124(sp)
    47a4:	008001c4 	movi	r2,7
    47a8:	14400e16 	blt	r2,r17,47e4 <___vfprintf_internal_r+0x111c>
    47ac:	b2000204 	addi	r8,r22,8
    47b0:	003e3a06 	br	409c <__alt_data_end+0xff00409c>
    47b4:	01000074 	movhi	r4,1
    47b8:	2108d484 	addi	r4,r4,9042
    47bc:	d9002b15 	stw	r4,172(sp)
    47c0:	d9002b17 	ldw	r4,172(sp)
    47c4:	1c07883a 	add	r3,r3,r16
    47c8:	44000115 	stw	r16,4(r8)
    47cc:	41000015 	stw	r4,0(r8)
    47d0:	10800044 	addi	r2,r2,1
    47d4:	d8c02015 	stw	r3,128(sp)
    47d8:	d8801f15 	stw	r2,124(sp)
    47dc:	010001c4 	movi	r4,7
    47e0:	20be2d0e 	bge	r4,r2,4098 <__alt_data_end+0xff004098>
    47e4:	d9002c17 	ldw	r4,176(sp)
    47e8:	d9801e04 	addi	r6,sp,120
    47ec:	b80b883a 	mov	r5,r23
    47f0:	000a4640 	call	a464 <__sprint_r>
    47f4:	103cb61e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    47f8:	d8c02017 	ldw	r3,128(sp)
    47fc:	da000404 	addi	r8,sp,16
    4800:	003e2606 	br	409c <__alt_data_end+0xff00409c>
    4804:	d9002c17 	ldw	r4,176(sp)
    4808:	d9801e04 	addi	r6,sp,120
    480c:	b80b883a 	mov	r5,r23
    4810:	000a4640 	call	a464 <__sprint_r>
    4814:	103e5d26 	beq	r2,zero,418c <__alt_data_end+0xff00418c>
    4818:	003cad06 	br	3ad0 <__alt_data_end+0xff003ad0>
    481c:	d9002c17 	ldw	r4,176(sp)
    4820:	d9801e04 	addi	r6,sp,120
    4824:	b80b883a 	mov	r5,r23
    4828:	000a4640 	call	a464 <__sprint_r>
    482c:	103ca81e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4830:	d8c02017 	ldw	r3,128(sp)
    4834:	da000404 	addi	r8,sp,16
    4838:	003e0b06 	br	4068 <__alt_data_end+0xff004068>
    483c:	d9002c17 	ldw	r4,176(sp)
    4840:	d9801e04 	addi	r6,sp,120
    4844:	b80b883a 	mov	r5,r23
    4848:	000a4640 	call	a464 <__sprint_r>
    484c:	103ca01e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4850:	d8c02017 	ldw	r3,128(sp)
    4854:	da000404 	addi	r8,sp,16
    4858:	003dbd06 	br	3f50 <__alt_data_end+0xff003f50>
    485c:	d9002c17 	ldw	r4,176(sp)
    4860:	d9801e04 	addi	r6,sp,120
    4864:	b80b883a 	mov	r5,r23
    4868:	000a4640 	call	a464 <__sprint_r>
    486c:	103c981e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4870:	d8c02017 	ldw	r3,128(sp)
    4874:	da000404 	addi	r8,sp,16
    4878:	003dc306 	br	3f88 <__alt_data_end+0xff003f88>
    487c:	d8802917 	ldw	r2,164(sp)
    4880:	d8002785 	stb	zero,158(sp)
    4884:	103f0616 	blt	r2,zero,44a0 <__alt_data_end+0xff0044a0>
    4888:	00ffdfc4 	movi	r3,-129
    488c:	9d84b03a 	or	r2,r19,r22
    4890:	90e4703a 	and	r18,r18,r3
    4894:	103c6b26 	beq	r2,zero,3a44 <__alt_data_end+0xff003a44>
    4898:	0039883a 	mov	fp,zero
    489c:	003e7406 	br	4270 <__alt_data_end+0xff004270>
    48a0:	9080040c 	andi	r2,r18,16
    48a4:	1001b326 	beq	r2,zero,4f74 <___vfprintf_internal_r+0x18ac>
    48a8:	d9002d17 	ldw	r4,180(sp)
    48ac:	d9402917 	ldw	r5,164(sp)
    48b0:	d8002785 	stb	zero,158(sp)
    48b4:	20800104 	addi	r2,r4,4
    48b8:	24c00017 	ldw	r19,0(r4)
    48bc:	002d883a 	mov	r22,zero
    48c0:	2801b516 	blt	r5,zero,4f98 <___vfprintf_internal_r+0x18d0>
    48c4:	00ffdfc4 	movi	r3,-129
    48c8:	d8802d15 	stw	r2,180(sp)
    48cc:	90e4703a 	and	r18,r18,r3
    48d0:	983d2726 	beq	r19,zero,3d70 <__alt_data_end+0xff003d70>
    48d4:	0039883a 	mov	fp,zero
    48d8:	003d2a06 	br	3d84 <__alt_data_end+0xff003d84>
    48dc:	dc402617 	ldw	r17,152(sp)
    48e0:	0441d30e 	bge	zero,r17,5030 <___vfprintf_internal_r+0x1968>
    48e4:	dc403217 	ldw	r17,200(sp)
    48e8:	d8803317 	ldw	r2,204(sp)
    48ec:	1440010e 	bge	r2,r17,48f4 <___vfprintf_internal_r+0x122c>
    48f0:	1023883a 	mov	r17,r2
    48f4:	04400a0e 	bge	zero,r17,4920 <___vfprintf_internal_r+0x1258>
    48f8:	d8801f17 	ldw	r2,124(sp)
    48fc:	1c47883a 	add	r3,r3,r17
    4900:	44000015 	stw	r16,0(r8)
    4904:	10800044 	addi	r2,r2,1
    4908:	44400115 	stw	r17,4(r8)
    490c:	d8c02015 	stw	r3,128(sp)
    4910:	d8801f15 	stw	r2,124(sp)
    4914:	010001c4 	movi	r4,7
    4918:	20826516 	blt	r4,r2,52b0 <___vfprintf_internal_r+0x1be8>
    491c:	42000204 	addi	r8,r8,8
    4920:	88026116 	blt	r17,zero,52a8 <___vfprintf_internal_r+0x1be0>
    4924:	d9003217 	ldw	r4,200(sp)
    4928:	2463c83a 	sub	r17,r4,r17
    492c:	04407b0e 	bge	zero,r17,4b1c <___vfprintf_internal_r+0x1454>
    4930:	05800404 	movi	r22,16
    4934:	d8801f17 	ldw	r2,124(sp)
    4938:	b4419d0e 	bge	r22,r17,4fb0 <___vfprintf_internal_r+0x18e8>
    493c:	01000074 	movhi	r4,1
    4940:	2108d484 	addi	r4,r4,9042
    4944:	d9002b15 	stw	r4,172(sp)
    4948:	070001c4 	movi	fp,7
    494c:	dcc02c17 	ldw	r19,176(sp)
    4950:	00000306 	br	4960 <___vfprintf_internal_r+0x1298>
    4954:	42000204 	addi	r8,r8,8
    4958:	8c7ffc04 	addi	r17,r17,-16
    495c:	b441970e 	bge	r22,r17,4fbc <___vfprintf_internal_r+0x18f4>
    4960:	18c00404 	addi	r3,r3,16
    4964:	10800044 	addi	r2,r2,1
    4968:	45000015 	stw	r20,0(r8)
    496c:	45800115 	stw	r22,4(r8)
    4970:	d8c02015 	stw	r3,128(sp)
    4974:	d8801f15 	stw	r2,124(sp)
    4978:	e0bff60e 	bge	fp,r2,4954 <__alt_data_end+0xff004954>
    497c:	d9801e04 	addi	r6,sp,120
    4980:	b80b883a 	mov	r5,r23
    4984:	9809883a 	mov	r4,r19
    4988:	000a4640 	call	a464 <__sprint_r>
    498c:	103c501e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4990:	d8c02017 	ldw	r3,128(sp)
    4994:	d8801f17 	ldw	r2,124(sp)
    4998:	da000404 	addi	r8,sp,16
    499c:	003fee06 	br	4958 <__alt_data_end+0xff004958>
    49a0:	d9002c17 	ldw	r4,176(sp)
    49a4:	d9801e04 	addi	r6,sp,120
    49a8:	b80b883a 	mov	r5,r23
    49ac:	000a4640 	call	a464 <__sprint_r>
    49b0:	103c471e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    49b4:	d8c02017 	ldw	r3,128(sp)
    49b8:	df002787 	ldb	fp,158(sp)
    49bc:	da000404 	addi	r8,sp,16
    49c0:	003d5606 	br	3f1c <__alt_data_end+0xff003f1c>
    49c4:	9080040c 	andi	r2,r18,16
    49c8:	10016126 	beq	r2,zero,4f50 <___vfprintf_internal_r+0x1888>
    49cc:	d8802d17 	ldw	r2,180(sp)
    49d0:	14c00017 	ldw	r19,0(r2)
    49d4:	10800104 	addi	r2,r2,4
    49d8:	d8802d15 	stw	r2,180(sp)
    49dc:	982dd7fa 	srai	r22,r19,31
    49e0:	b005883a 	mov	r2,r22
    49e4:	003c8206 	br	3bf0 <__alt_data_end+0xff003bf0>
    49e8:	9080040c 	andi	r2,r18,16
    49ec:	10003526 	beq	r2,zero,4ac4 <___vfprintf_internal_r+0x13fc>
    49f0:	d9402d17 	ldw	r5,180(sp)
    49f4:	d8c02917 	ldw	r3,164(sp)
    49f8:	d8002785 	stb	zero,158(sp)
    49fc:	28800104 	addi	r2,r5,4
    4a00:	2cc00017 	ldw	r19,0(r5)
    4a04:	002d883a 	mov	r22,zero
    4a08:	18003716 	blt	r3,zero,4ae8 <___vfprintf_internal_r+0x1420>
    4a0c:	00ffdfc4 	movi	r3,-129
    4a10:	d8802d15 	stw	r2,180(sp)
    4a14:	90e4703a 	and	r18,r18,r3
    4a18:	0039883a 	mov	fp,zero
    4a1c:	983df326 	beq	r19,zero,41ec <__alt_data_end+0xff0041ec>
    4a20:	00800244 	movi	r2,9
    4a24:	14fc7b36 	bltu	r2,r19,3c14 <__alt_data_end+0xff003c14>
    4a28:	d8c02817 	ldw	r3,160(sp)
    4a2c:	dc001dc4 	addi	r16,sp,119
    4a30:	9cc00c04 	addi	r19,r19,48
    4a34:	1c07c83a 	sub	r3,r3,r16
    4a38:	dcc01dc5 	stb	r19,119(sp)
    4a3c:	d8c02e15 	stw	r3,184(sp)
    4a40:	003ce806 	br	3de4 <__alt_data_end+0xff003de4>
    4a44:	d8803317 	ldw	r2,204(sp)
    4a48:	143fffc4 	addi	r16,r2,-1
    4a4c:	043f4d0e 	bge	zero,r16,4784 <__alt_data_end+0xff004784>
    4a50:	07000404 	movi	fp,16
    4a54:	e400810e 	bge	fp,r16,4c5c <___vfprintf_internal_r+0x1594>
    4a58:	01400074 	movhi	r5,1
    4a5c:	2948d484 	addi	r5,r5,9042
    4a60:	d9402b15 	stw	r5,172(sp)
    4a64:	01c001c4 	movi	r7,7
    4a68:	dcc02c17 	ldw	r19,176(sp)
    4a6c:	00000306 	br	4a7c <___vfprintf_internal_r+0x13b4>
    4a70:	b5800204 	addi	r22,r22,8
    4a74:	843ffc04 	addi	r16,r16,-16
    4a78:	e4007b0e 	bge	fp,r16,4c68 <___vfprintf_internal_r+0x15a0>
    4a7c:	18c00404 	addi	r3,r3,16
    4a80:	8c400044 	addi	r17,r17,1
    4a84:	b5000015 	stw	r20,0(r22)
    4a88:	b7000115 	stw	fp,4(r22)
    4a8c:	d8c02015 	stw	r3,128(sp)
    4a90:	dc401f15 	stw	r17,124(sp)
    4a94:	3c7ff60e 	bge	r7,r17,4a70 <__alt_data_end+0xff004a70>
    4a98:	d9801e04 	addi	r6,sp,120
    4a9c:	b80b883a 	mov	r5,r23
    4aa0:	9809883a 	mov	r4,r19
    4aa4:	d9c03c15 	stw	r7,240(sp)
    4aa8:	000a4640 	call	a464 <__sprint_r>
    4aac:	d9c03c17 	ldw	r7,240(sp)
    4ab0:	103c071e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4ab4:	d8c02017 	ldw	r3,128(sp)
    4ab8:	dc401f17 	ldw	r17,124(sp)
    4abc:	dd800404 	addi	r22,sp,16
    4ac0:	003fec06 	br	4a74 <__alt_data_end+0xff004a74>
    4ac4:	9080100c 	andi	r2,r18,64
    4ac8:	d8002785 	stb	zero,158(sp)
    4acc:	10010e26 	beq	r2,zero,4f08 <___vfprintf_internal_r+0x1840>
    4ad0:	d9002d17 	ldw	r4,180(sp)
    4ad4:	d9402917 	ldw	r5,164(sp)
    4ad8:	002d883a 	mov	r22,zero
    4adc:	20800104 	addi	r2,r4,4
    4ae0:	24c0000b 	ldhu	r19,0(r4)
    4ae4:	283fc90e 	bge	r5,zero,4a0c <__alt_data_end+0xff004a0c>
    4ae8:	d8802d15 	stw	r2,180(sp)
    4aec:	0039883a 	mov	fp,zero
    4af0:	9d84b03a 	or	r2,r19,r22
    4af4:	103c461e 	bne	r2,zero,3c10 <__alt_data_end+0xff003c10>
    4af8:	00800044 	movi	r2,1
    4afc:	003e6c06 	br	44b0 <__alt_data_end+0xff0044b0>
    4b00:	d9002c17 	ldw	r4,176(sp)
    4b04:	d9801e04 	addi	r6,sp,120
    4b08:	b80b883a 	mov	r5,r23
    4b0c:	000a4640 	call	a464 <__sprint_r>
    4b10:	103bef1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4b14:	d8c02017 	ldw	r3,128(sp)
    4b18:	da000404 	addi	r8,sp,16
    4b1c:	d9003217 	ldw	r4,200(sp)
    4b20:	d8802617 	ldw	r2,152(sp)
    4b24:	d9403317 	ldw	r5,204(sp)
    4b28:	8123883a 	add	r17,r16,r4
    4b2c:	11400216 	blt	r2,r5,4b38 <___vfprintf_internal_r+0x1470>
    4b30:	9100004c 	andi	r4,r18,1
    4b34:	20000d26 	beq	r4,zero,4b6c <___vfprintf_internal_r+0x14a4>
    4b38:	d9003717 	ldw	r4,220(sp)
    4b3c:	d9403417 	ldw	r5,208(sp)
    4b40:	1907883a 	add	r3,r3,r4
    4b44:	d9001f17 	ldw	r4,124(sp)
    4b48:	41400015 	stw	r5,0(r8)
    4b4c:	d9403717 	ldw	r5,220(sp)
    4b50:	21000044 	addi	r4,r4,1
    4b54:	d8c02015 	stw	r3,128(sp)
    4b58:	41400115 	stw	r5,4(r8)
    4b5c:	d9001f15 	stw	r4,124(sp)
    4b60:	014001c4 	movi	r5,7
    4b64:	2901e816 	blt	r5,r4,5308 <___vfprintf_internal_r+0x1c40>
    4b68:	42000204 	addi	r8,r8,8
    4b6c:	d9003317 	ldw	r4,204(sp)
    4b70:	8121883a 	add	r16,r16,r4
    4b74:	2085c83a 	sub	r2,r4,r2
    4b78:	8461c83a 	sub	r16,r16,r17
    4b7c:	1400010e 	bge	r2,r16,4b84 <___vfprintf_internal_r+0x14bc>
    4b80:	1021883a 	mov	r16,r2
    4b84:	04000a0e 	bge	zero,r16,4bb0 <___vfprintf_internal_r+0x14e8>
    4b88:	d9001f17 	ldw	r4,124(sp)
    4b8c:	1c07883a 	add	r3,r3,r16
    4b90:	44400015 	stw	r17,0(r8)
    4b94:	21000044 	addi	r4,r4,1
    4b98:	44000115 	stw	r16,4(r8)
    4b9c:	d8c02015 	stw	r3,128(sp)
    4ba0:	d9001f15 	stw	r4,124(sp)
    4ba4:	014001c4 	movi	r5,7
    4ba8:	2901fb16 	blt	r5,r4,5398 <___vfprintf_internal_r+0x1cd0>
    4bac:	42000204 	addi	r8,r8,8
    4bb0:	8001f716 	blt	r16,zero,5390 <___vfprintf_internal_r+0x1cc8>
    4bb4:	1421c83a 	sub	r16,r2,r16
    4bb8:	043d380e 	bge	zero,r16,409c <__alt_data_end+0xff00409c>
    4bbc:	04400404 	movi	r17,16
    4bc0:	d8801f17 	ldw	r2,124(sp)
    4bc4:	8c3efb0e 	bge	r17,r16,47b4 <__alt_data_end+0xff0047b4>
    4bc8:	01400074 	movhi	r5,1
    4bcc:	2948d484 	addi	r5,r5,9042
    4bd0:	d9402b15 	stw	r5,172(sp)
    4bd4:	058001c4 	movi	r22,7
    4bd8:	dcc02c17 	ldw	r19,176(sp)
    4bdc:	00000306 	br	4bec <___vfprintf_internal_r+0x1524>
    4be0:	42000204 	addi	r8,r8,8
    4be4:	843ffc04 	addi	r16,r16,-16
    4be8:	8c3ef50e 	bge	r17,r16,47c0 <__alt_data_end+0xff0047c0>
    4bec:	18c00404 	addi	r3,r3,16
    4bf0:	10800044 	addi	r2,r2,1
    4bf4:	45000015 	stw	r20,0(r8)
    4bf8:	44400115 	stw	r17,4(r8)
    4bfc:	d8c02015 	stw	r3,128(sp)
    4c00:	d8801f15 	stw	r2,124(sp)
    4c04:	b0bff60e 	bge	r22,r2,4be0 <__alt_data_end+0xff004be0>
    4c08:	d9801e04 	addi	r6,sp,120
    4c0c:	b80b883a 	mov	r5,r23
    4c10:	9809883a 	mov	r4,r19
    4c14:	000a4640 	call	a464 <__sprint_r>
    4c18:	103bad1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4c1c:	d8c02017 	ldw	r3,128(sp)
    4c20:	d8801f17 	ldw	r2,124(sp)
    4c24:	da000404 	addi	r8,sp,16
    4c28:	003fee06 	br	4be4 <__alt_data_end+0xff004be4>
    4c2c:	9088703a 	and	r4,r18,r2
    4c30:	203eab1e 	bne	r4,zero,46e0 <__alt_data_end+0xff0046e0>
    4c34:	dc401f17 	ldw	r17,124(sp)
    4c38:	40800115 	stw	r2,4(r8)
    4c3c:	44000015 	stw	r16,0(r8)
    4c40:	8c400044 	addi	r17,r17,1
    4c44:	d8c02015 	stw	r3,128(sp)
    4c48:	dc401f15 	stw	r17,124(sp)
    4c4c:	008001c4 	movi	r2,7
    4c50:	14400e16 	blt	r2,r17,4c8c <___vfprintf_internal_r+0x15c4>
    4c54:	45800204 	addi	r22,r8,8
    4c58:	003eca06 	br	4784 <__alt_data_end+0xff004784>
    4c5c:	01000074 	movhi	r4,1
    4c60:	2108d484 	addi	r4,r4,9042
    4c64:	d9002b15 	stw	r4,172(sp)
    4c68:	d8802b17 	ldw	r2,172(sp)
    4c6c:	1c07883a 	add	r3,r3,r16
    4c70:	8c400044 	addi	r17,r17,1
    4c74:	b0800015 	stw	r2,0(r22)
    4c78:	b4000115 	stw	r16,4(r22)
    4c7c:	d8c02015 	stw	r3,128(sp)
    4c80:	dc401f15 	stw	r17,124(sp)
    4c84:	008001c4 	movi	r2,7
    4c88:	147ebd0e 	bge	r2,r17,4780 <__alt_data_end+0xff004780>
    4c8c:	d9002c17 	ldw	r4,176(sp)
    4c90:	d9801e04 	addi	r6,sp,120
    4c94:	b80b883a 	mov	r5,r23
    4c98:	000a4640 	call	a464 <__sprint_r>
    4c9c:	103b8c1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4ca0:	d8c02017 	ldw	r3,128(sp)
    4ca4:	dc401f17 	ldw	r17,124(sp)
    4ca8:	dd800404 	addi	r22,sp,16
    4cac:	003eb506 	br	4784 <__alt_data_end+0xff004784>
    4cb0:	d9002c17 	ldw	r4,176(sp)
    4cb4:	d9801e04 	addi	r6,sp,120
    4cb8:	b80b883a 	mov	r5,r23
    4cbc:	000a4640 	call	a464 <__sprint_r>
    4cc0:	103b831e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4cc4:	d8c02017 	ldw	r3,128(sp)
    4cc8:	dc401f17 	ldw	r17,124(sp)
    4ccc:	da000404 	addi	r8,sp,16
    4cd0:	003e8d06 	br	4708 <__alt_data_end+0xff004708>
    4cd4:	d9002c17 	ldw	r4,176(sp)
    4cd8:	d9801e04 	addi	r6,sp,120
    4cdc:	b80b883a 	mov	r5,r23
    4ce0:	000a4640 	call	a464 <__sprint_r>
    4ce4:	103b7a1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4ce8:	d8c02017 	ldw	r3,128(sp)
    4cec:	dc401f17 	ldw	r17,124(sp)
    4cf0:	dd800404 	addi	r22,sp,16
    4cf4:	003e8f06 	br	4734 <__alt_data_end+0xff004734>
    4cf8:	0027883a 	mov	r19,zero
    4cfc:	003f4a06 	br	4a28 <__alt_data_end+0xff004a28>
    4d00:	d9002c17 	ldw	r4,176(sp)
    4d04:	d9801e04 	addi	r6,sp,120
    4d08:	b80b883a 	mov	r5,r23
    4d0c:	000a4640 	call	a464 <__sprint_r>
    4d10:	103b6f1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    4d14:	d8c02017 	ldw	r3,128(sp)
    4d18:	da000404 	addi	r8,sp,16
    4d1c:	003c9d06 	br	3f94 <__alt_data_end+0xff003f94>
    4d20:	04e7c83a 	sub	r19,zero,r19
    4d24:	9804c03a 	cmpne	r2,r19,zero
    4d28:	05adc83a 	sub	r22,zero,r22
    4d2c:	b0adc83a 	sub	r22,r22,r2
    4d30:	d8802917 	ldw	r2,164(sp)
    4d34:	07000b44 	movi	fp,45
    4d38:	df002785 	stb	fp,158(sp)
    4d3c:	10017b16 	blt	r2,zero,532c <___vfprintf_internal_r+0x1c64>
    4d40:	00bfdfc4 	movi	r2,-129
    4d44:	90a4703a 	and	r18,r18,r2
    4d48:	003bb106 	br	3c10 <__alt_data_end+0xff003c10>
    4d4c:	d9003617 	ldw	r4,216(sp)
    4d50:	d9403817 	ldw	r5,224(sp)
    4d54:	da003d15 	stw	r8,244(sp)
    4d58:	000a0dc0 	call	a0dc <__fpclassifyd>
    4d5c:	da003d17 	ldw	r8,244(sp)
    4d60:	1000f026 	beq	r2,zero,5124 <___vfprintf_internal_r+0x1a5c>
    4d64:	d9002917 	ldw	r4,164(sp)
    4d68:	05bff7c4 	movi	r22,-33
    4d6c:	00bfffc4 	movi	r2,-1
    4d70:	8dac703a 	and	r22,r17,r22
    4d74:	20820026 	beq	r4,r2,5578 <___vfprintf_internal_r+0x1eb0>
    4d78:	008011c4 	movi	r2,71
    4d7c:	b081f726 	beq	r22,r2,555c <___vfprintf_internal_r+0x1e94>
    4d80:	d9003817 	ldw	r4,224(sp)
    4d84:	90c04014 	ori	r3,r18,256
    4d88:	d8c02b15 	stw	r3,172(sp)
    4d8c:	20021516 	blt	r4,zero,55e4 <___vfprintf_internal_r+0x1f1c>
    4d90:	dcc03817 	ldw	r19,224(sp)
    4d94:	d8002a05 	stb	zero,168(sp)
    4d98:	00801984 	movi	r2,102
    4d9c:	8881f926 	beq	r17,r2,5584 <___vfprintf_internal_r+0x1ebc>
    4da0:	00801184 	movi	r2,70
    4da4:	88821c26 	beq	r17,r2,5618 <___vfprintf_internal_r+0x1f50>
    4da8:	00801144 	movi	r2,69
    4dac:	b081ef26 	beq	r22,r2,556c <___vfprintf_internal_r+0x1ea4>
    4db0:	d8c02917 	ldw	r3,164(sp)
    4db4:	d8802104 	addi	r2,sp,132
    4db8:	d8800315 	stw	r2,12(sp)
    4dbc:	d9403617 	ldw	r5,216(sp)
    4dc0:	d8802504 	addi	r2,sp,148
    4dc4:	d9002c17 	ldw	r4,176(sp)
    4dc8:	d8800215 	stw	r2,8(sp)
    4dcc:	d8802604 	addi	r2,sp,152
    4dd0:	d8c00015 	stw	r3,0(sp)
    4dd4:	d8800115 	stw	r2,4(sp)
    4dd8:	01c00084 	movi	r7,2
    4ddc:	980d883a 	mov	r6,r19
    4de0:	d8c03c15 	stw	r3,240(sp)
    4de4:	da003d15 	stw	r8,244(sp)
    4de8:	0005cec0 	call	5cec <_dtoa_r>
    4dec:	1021883a 	mov	r16,r2
    4df0:	008019c4 	movi	r2,103
    4df4:	d8c03c17 	ldw	r3,240(sp)
    4df8:	da003d17 	ldw	r8,244(sp)
    4dfc:	88817126 	beq	r17,r2,53c4 <___vfprintf_internal_r+0x1cfc>
    4e00:	008011c4 	movi	r2,71
    4e04:	88829226 	beq	r17,r2,5850 <___vfprintf_internal_r+0x2188>
    4e08:	80f9883a 	add	fp,r16,r3
    4e0c:	d9003617 	ldw	r4,216(sp)
    4e10:	000d883a 	mov	r6,zero
    4e14:	000f883a 	mov	r7,zero
    4e18:	980b883a 	mov	r5,r19
    4e1c:	da003d15 	stw	r8,244(sp)
    4e20:	000df280 	call	df28 <__eqdf2>
    4e24:	da003d17 	ldw	r8,244(sp)
    4e28:	10018d26 	beq	r2,zero,5460 <___vfprintf_internal_r+0x1d98>
    4e2c:	d8802117 	ldw	r2,132(sp)
    4e30:	1700062e 	bgeu	r2,fp,4e4c <___vfprintf_internal_r+0x1784>
    4e34:	01000c04 	movi	r4,48
    4e38:	10c00044 	addi	r3,r2,1
    4e3c:	d8c02115 	stw	r3,132(sp)
    4e40:	11000005 	stb	r4,0(r2)
    4e44:	d8802117 	ldw	r2,132(sp)
    4e48:	173ffb36 	bltu	r2,fp,4e38 <__alt_data_end+0xff004e38>
    4e4c:	1405c83a 	sub	r2,r2,r16
    4e50:	d8803315 	stw	r2,204(sp)
    4e54:	008011c4 	movi	r2,71
    4e58:	b0817626 	beq	r22,r2,5434 <___vfprintf_internal_r+0x1d6c>
    4e5c:	00801944 	movi	r2,101
    4e60:	1442810e 	bge	r2,r17,5868 <___vfprintf_internal_r+0x21a0>
    4e64:	d8c02617 	ldw	r3,152(sp)
    4e68:	00801984 	movi	r2,102
    4e6c:	d8c03215 	stw	r3,200(sp)
    4e70:	8881fe26 	beq	r17,r2,566c <___vfprintf_internal_r+0x1fa4>
    4e74:	d8c03217 	ldw	r3,200(sp)
    4e78:	d9003317 	ldw	r4,204(sp)
    4e7c:	1901dd16 	blt	r3,r4,55f4 <___vfprintf_internal_r+0x1f2c>
    4e80:	9480004c 	andi	r18,r18,1
    4e84:	90022b1e 	bne	r18,zero,5734 <___vfprintf_internal_r+0x206c>
    4e88:	1805883a 	mov	r2,r3
    4e8c:	18028016 	blt	r3,zero,5890 <___vfprintf_internal_r+0x21c8>
    4e90:	d8c03217 	ldw	r3,200(sp)
    4e94:	044019c4 	movi	r17,103
    4e98:	d8c02e15 	stw	r3,184(sp)
    4e9c:	df002a07 	ldb	fp,168(sp)
    4ea0:	e001531e 	bne	fp,zero,53f0 <___vfprintf_internal_r+0x1d28>
    4ea4:	df002783 	ldbu	fp,158(sp)
    4ea8:	d8802a15 	stw	r2,168(sp)
    4eac:	dc802b17 	ldw	r18,172(sp)
    4eb0:	d8002915 	stw	zero,164(sp)
    4eb4:	003bd106 	br	3dfc <__alt_data_end+0xff003dfc>
    4eb8:	d8802d17 	ldw	r2,180(sp)
    4ebc:	d8c02d17 	ldw	r3,180(sp)
    4ec0:	d9002d17 	ldw	r4,180(sp)
    4ec4:	10800017 	ldw	r2,0(r2)
    4ec8:	18c00117 	ldw	r3,4(r3)
    4ecc:	21000204 	addi	r4,r4,8
    4ed0:	d8803615 	stw	r2,216(sp)
    4ed4:	d8c03815 	stw	r3,224(sp)
    4ed8:	d9002d15 	stw	r4,180(sp)
    4edc:	003b7506 	br	3cb4 <__alt_data_end+0xff003cb4>
    4ee0:	ac400007 	ldb	r17,0(r21)
    4ee4:	003a5906 	br	384c <__alt_data_end+0xff00384c>
    4ee8:	9080100c 	andi	r2,r18,64
    4eec:	1000a826 	beq	r2,zero,5190 <___vfprintf_internal_r+0x1ac8>
    4ef0:	d9002d17 	ldw	r4,180(sp)
    4ef4:	002d883a 	mov	r22,zero
    4ef8:	24c0000b 	ldhu	r19,0(r4)
    4efc:	21000104 	addi	r4,r4,4
    4f00:	d9002d15 	stw	r4,180(sp)
    4f04:	003ccb06 	br	4234 <__alt_data_end+0xff004234>
    4f08:	d8c02d17 	ldw	r3,180(sp)
    4f0c:	d9002917 	ldw	r4,164(sp)
    4f10:	002d883a 	mov	r22,zero
    4f14:	18800104 	addi	r2,r3,4
    4f18:	1cc00017 	ldw	r19,0(r3)
    4f1c:	203ebb0e 	bge	r4,zero,4a0c <__alt_data_end+0xff004a0c>
    4f20:	003ef106 	br	4ae8 <__alt_data_end+0xff004ae8>
    4f24:	9080040c 	andi	r2,r18,16
    4f28:	1000921e 	bne	r2,zero,5174 <___vfprintf_internal_r+0x1aac>
    4f2c:	9480100c 	andi	r18,r18,64
    4f30:	90013926 	beq	r18,zero,5418 <___vfprintf_internal_r+0x1d50>
    4f34:	d9002d17 	ldw	r4,180(sp)
    4f38:	d9402f17 	ldw	r5,188(sp)
    4f3c:	20800017 	ldw	r2,0(r4)
    4f40:	21000104 	addi	r4,r4,4
    4f44:	d9002d15 	stw	r4,180(sp)
    4f48:	1140000d 	sth	r5,0(r2)
    4f4c:	003a1606 	br	37a8 <__alt_data_end+0xff0037a8>
    4f50:	9080100c 	andi	r2,r18,64
    4f54:	10008026 	beq	r2,zero,5158 <___vfprintf_internal_r+0x1a90>
    4f58:	d8c02d17 	ldw	r3,180(sp)
    4f5c:	1cc0000f 	ldh	r19,0(r3)
    4f60:	18c00104 	addi	r3,r3,4
    4f64:	d8c02d15 	stw	r3,180(sp)
    4f68:	982dd7fa 	srai	r22,r19,31
    4f6c:	b005883a 	mov	r2,r22
    4f70:	003b1f06 	br	3bf0 <__alt_data_end+0xff003bf0>
    4f74:	9080100c 	andi	r2,r18,64
    4f78:	d8002785 	stb	zero,158(sp)
    4f7c:	10008a1e 	bne	r2,zero,51a8 <___vfprintf_internal_r+0x1ae0>
    4f80:	d9402d17 	ldw	r5,180(sp)
    4f84:	d8c02917 	ldw	r3,164(sp)
    4f88:	002d883a 	mov	r22,zero
    4f8c:	28800104 	addi	r2,r5,4
    4f90:	2cc00017 	ldw	r19,0(r5)
    4f94:	183e4b0e 	bge	r3,zero,48c4 <__alt_data_end+0xff0048c4>
    4f98:	9d86b03a 	or	r3,r19,r22
    4f9c:	d8802d15 	stw	r2,180(sp)
    4fa0:	183e4c1e 	bne	r3,zero,48d4 <__alt_data_end+0xff0048d4>
    4fa4:	0039883a 	mov	fp,zero
    4fa8:	0005883a 	mov	r2,zero
    4fac:	003d4006 	br	44b0 <__alt_data_end+0xff0044b0>
    4fb0:	01400074 	movhi	r5,1
    4fb4:	2948d484 	addi	r5,r5,9042
    4fb8:	d9402b15 	stw	r5,172(sp)
    4fbc:	d9402b17 	ldw	r5,172(sp)
    4fc0:	1c47883a 	add	r3,r3,r17
    4fc4:	10800044 	addi	r2,r2,1
    4fc8:	41400015 	stw	r5,0(r8)
    4fcc:	44400115 	stw	r17,4(r8)
    4fd0:	d8c02015 	stw	r3,128(sp)
    4fd4:	d8801f15 	stw	r2,124(sp)
    4fd8:	010001c4 	movi	r4,7
    4fdc:	20bec816 	blt	r4,r2,4b00 <__alt_data_end+0xff004b00>
    4fe0:	42000204 	addi	r8,r8,8
    4fe4:	003ecd06 	br	4b1c <__alt_data_end+0xff004b1c>
    4fe8:	d9002917 	ldw	r4,164(sp)
    4fec:	d8002785 	stb	zero,158(sp)
    4ff0:	203d2d16 	blt	r4,zero,44a8 <__alt_data_end+0xff0044a8>
    4ff4:	00bfdfc4 	movi	r2,-129
    4ff8:	90a4703a 	and	r18,r18,r2
    4ffc:	003a9106 	br	3a44 <__alt_data_end+0xff003a44>
    5000:	01000074 	movhi	r4,1
    5004:	2108d484 	addi	r4,r4,9042
    5008:	d9002b15 	stw	r4,172(sp)
    500c:	003c0c06 	br	4040 <__alt_data_end+0xff004040>
    5010:	d9002c17 	ldw	r4,176(sp)
    5014:	d9801e04 	addi	r6,sp,120
    5018:	b80b883a 	mov	r5,r23
    501c:	000a4640 	call	a464 <__sprint_r>
    5020:	103aab1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    5024:	d8c02017 	ldw	r3,128(sp)
    5028:	da000404 	addi	r8,sp,16
    502c:	003d4106 	br	4534 <__alt_data_end+0xff004534>
    5030:	d8801f17 	ldw	r2,124(sp)
    5034:	01400074 	movhi	r5,1
    5038:	01000044 	movi	r4,1
    503c:	18c00044 	addi	r3,r3,1
    5040:	10800044 	addi	r2,r2,1
    5044:	2948d404 	addi	r5,r5,9040
    5048:	41000115 	stw	r4,4(r8)
    504c:	41400015 	stw	r5,0(r8)
    5050:	d8c02015 	stw	r3,128(sp)
    5054:	d8801f15 	stw	r2,124(sp)
    5058:	010001c4 	movi	r4,7
    505c:	20805c16 	blt	r4,r2,51d0 <___vfprintf_internal_r+0x1b08>
    5060:	42000204 	addi	r8,r8,8
    5064:	8800041e 	bne	r17,zero,5078 <___vfprintf_internal_r+0x19b0>
    5068:	d8803317 	ldw	r2,204(sp)
    506c:	1000021e 	bne	r2,zero,5078 <___vfprintf_internal_r+0x19b0>
    5070:	9080004c 	andi	r2,r18,1
    5074:	103c0926 	beq	r2,zero,409c <__alt_data_end+0xff00409c>
    5078:	d9003717 	ldw	r4,220(sp)
    507c:	d8801f17 	ldw	r2,124(sp)
    5080:	d9403417 	ldw	r5,208(sp)
    5084:	20c7883a 	add	r3,r4,r3
    5088:	10800044 	addi	r2,r2,1
    508c:	41000115 	stw	r4,4(r8)
    5090:	41400015 	stw	r5,0(r8)
    5094:	d8c02015 	stw	r3,128(sp)
    5098:	d8801f15 	stw	r2,124(sp)
    509c:	010001c4 	movi	r4,7
    50a0:	20812116 	blt	r4,r2,5528 <___vfprintf_internal_r+0x1e60>
    50a4:	42000204 	addi	r8,r8,8
    50a8:	0463c83a 	sub	r17,zero,r17
    50ac:	0440730e 	bge	zero,r17,527c <___vfprintf_internal_r+0x1bb4>
    50b0:	05800404 	movi	r22,16
    50b4:	b440860e 	bge	r22,r17,52d0 <___vfprintf_internal_r+0x1c08>
    50b8:	01400074 	movhi	r5,1
    50bc:	2948d484 	addi	r5,r5,9042
    50c0:	d9402b15 	stw	r5,172(sp)
    50c4:	070001c4 	movi	fp,7
    50c8:	dcc02c17 	ldw	r19,176(sp)
    50cc:	00000306 	br	50dc <___vfprintf_internal_r+0x1a14>
    50d0:	42000204 	addi	r8,r8,8
    50d4:	8c7ffc04 	addi	r17,r17,-16
    50d8:	b440800e 	bge	r22,r17,52dc <___vfprintf_internal_r+0x1c14>
    50dc:	18c00404 	addi	r3,r3,16
    50e0:	10800044 	addi	r2,r2,1
    50e4:	45000015 	stw	r20,0(r8)
    50e8:	45800115 	stw	r22,4(r8)
    50ec:	d8c02015 	stw	r3,128(sp)
    50f0:	d8801f15 	stw	r2,124(sp)
    50f4:	e0bff60e 	bge	fp,r2,50d0 <__alt_data_end+0xff0050d0>
    50f8:	d9801e04 	addi	r6,sp,120
    50fc:	b80b883a 	mov	r5,r23
    5100:	9809883a 	mov	r4,r19
    5104:	000a4640 	call	a464 <__sprint_r>
    5108:	103a711e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    510c:	d8c02017 	ldw	r3,128(sp)
    5110:	d8801f17 	ldw	r2,124(sp)
    5114:	da000404 	addi	r8,sp,16
    5118:	003fee06 	br	50d4 <__alt_data_end+0xff0050d4>
    511c:	00bfffc4 	movi	r2,-1
    5120:	003a6f06 	br	3ae0 <__alt_data_end+0xff003ae0>
    5124:	008011c4 	movi	r2,71
    5128:	1440b816 	blt	r2,r17,540c <___vfprintf_internal_r+0x1d44>
    512c:	04000074 	movhi	r16,1
    5130:	8408c604 	addi	r16,r16,8984
    5134:	00c000c4 	movi	r3,3
    5138:	00bfdfc4 	movi	r2,-129
    513c:	d8c02a15 	stw	r3,168(sp)
    5140:	90a4703a 	and	r18,r18,r2
    5144:	df002783 	ldbu	fp,158(sp)
    5148:	d8c02e15 	stw	r3,184(sp)
    514c:	d8002915 	stw	zero,164(sp)
    5150:	d8003215 	stw	zero,200(sp)
    5154:	003b2906 	br	3dfc <__alt_data_end+0xff003dfc>
    5158:	d9002d17 	ldw	r4,180(sp)
    515c:	24c00017 	ldw	r19,0(r4)
    5160:	21000104 	addi	r4,r4,4
    5164:	d9002d15 	stw	r4,180(sp)
    5168:	982dd7fa 	srai	r22,r19,31
    516c:	b005883a 	mov	r2,r22
    5170:	003a9f06 	br	3bf0 <__alt_data_end+0xff003bf0>
    5174:	d9402d17 	ldw	r5,180(sp)
    5178:	d8c02f17 	ldw	r3,188(sp)
    517c:	28800017 	ldw	r2,0(r5)
    5180:	29400104 	addi	r5,r5,4
    5184:	d9402d15 	stw	r5,180(sp)
    5188:	10c00015 	stw	r3,0(r2)
    518c:	00398606 	br	37a8 <__alt_data_end+0xff0037a8>
    5190:	d9402d17 	ldw	r5,180(sp)
    5194:	002d883a 	mov	r22,zero
    5198:	2cc00017 	ldw	r19,0(r5)
    519c:	29400104 	addi	r5,r5,4
    51a0:	d9402d15 	stw	r5,180(sp)
    51a4:	003c2306 	br	4234 <__alt_data_end+0xff004234>
    51a8:	d8c02d17 	ldw	r3,180(sp)
    51ac:	d9002917 	ldw	r4,164(sp)
    51b0:	002d883a 	mov	r22,zero
    51b4:	18800104 	addi	r2,r3,4
    51b8:	1cc0000b 	ldhu	r19,0(r3)
    51bc:	203dc10e 	bge	r4,zero,48c4 <__alt_data_end+0xff0048c4>
    51c0:	003f7506 	br	4f98 <__alt_data_end+0xff004f98>
    51c4:	04000074 	movhi	r16,1
    51c8:	8408c404 	addi	r16,r16,8976
    51cc:	003acc06 	br	3d00 <__alt_data_end+0xff003d00>
    51d0:	d9002c17 	ldw	r4,176(sp)
    51d4:	d9801e04 	addi	r6,sp,120
    51d8:	b80b883a 	mov	r5,r23
    51dc:	000a4640 	call	a464 <__sprint_r>
    51e0:	103a3b1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    51e4:	dc402617 	ldw	r17,152(sp)
    51e8:	d8c02017 	ldw	r3,128(sp)
    51ec:	da000404 	addi	r8,sp,16
    51f0:	003f9c06 	br	5064 <__alt_data_end+0xff005064>
    51f4:	ac400043 	ldbu	r17,1(r21)
    51f8:	94800814 	ori	r18,r18,32
    51fc:	ad400044 	addi	r21,r21,1
    5200:	8c403fcc 	andi	r17,r17,255
    5204:	8c40201c 	xori	r17,r17,128
    5208:	8c7fe004 	addi	r17,r17,-128
    520c:	00398f06 	br	384c <__alt_data_end+0xff00384c>
    5210:	d8c02d15 	stw	r3,180(sp)
    5214:	0039883a 	mov	fp,zero
    5218:	003e3506 	br	4af0 <__alt_data_end+0xff004af0>
    521c:	d9002c17 	ldw	r4,176(sp)
    5220:	d9801e04 	addi	r6,sp,120
    5224:	b80b883a 	mov	r5,r23
    5228:	000a4640 	call	a464 <__sprint_r>
    522c:	103a281e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    5230:	d8c02017 	ldw	r3,128(sp)
    5234:	da000404 	addi	r8,sp,16
    5238:	003cd006 	br	457c <__alt_data_end+0xff00457c>
    523c:	8009883a 	mov	r4,r16
    5240:	da003d15 	stw	r8,244(sp)
    5244:	00036300 	call	3630 <strlen>
    5248:	d8802e15 	stw	r2,184(sp)
    524c:	da003d17 	ldw	r8,244(sp)
    5250:	103c340e 	bge	r2,zero,4324 <__alt_data_end+0xff004324>
    5254:	0005883a 	mov	r2,zero
    5258:	003c3206 	br	4324 <__alt_data_end+0xff004324>
    525c:	d9002c17 	ldw	r4,176(sp)
    5260:	d9801e04 	addi	r6,sp,120
    5264:	b80b883a 	mov	r5,r23
    5268:	000a4640 	call	a464 <__sprint_r>
    526c:	103a181e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    5270:	d8c02017 	ldw	r3,128(sp)
    5274:	d8801f17 	ldw	r2,124(sp)
    5278:	da000404 	addi	r8,sp,16
    527c:	d9403317 	ldw	r5,204(sp)
    5280:	10800044 	addi	r2,r2,1
    5284:	44000015 	stw	r16,0(r8)
    5288:	28c7883a 	add	r3,r5,r3
    528c:	003b7d06 	br	4084 <__alt_data_end+0xff004084>
    5290:	01000074 	movhi	r4,1
    5294:	2108d884 	addi	r4,r4,9058
    5298:	d9003515 	stw	r4,212(sp)
    529c:	003b1406 	br	3ef0 <__alt_data_end+0xff003ef0>
    52a0:	013fffc4 	movi	r4,-1
    52a4:	003a3506 	br	3b7c <__alt_data_end+0xff003b7c>
    52a8:	0023883a 	mov	r17,zero
    52ac:	003d9d06 	br	4924 <__alt_data_end+0xff004924>
    52b0:	d9002c17 	ldw	r4,176(sp)
    52b4:	d9801e04 	addi	r6,sp,120
    52b8:	b80b883a 	mov	r5,r23
    52bc:	000a4640 	call	a464 <__sprint_r>
    52c0:	103a031e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    52c4:	d8c02017 	ldw	r3,128(sp)
    52c8:	da000404 	addi	r8,sp,16
    52cc:	003d9406 	br	4920 <__alt_data_end+0xff004920>
    52d0:	01000074 	movhi	r4,1
    52d4:	2108d484 	addi	r4,r4,9042
    52d8:	d9002b15 	stw	r4,172(sp)
    52dc:	d9002b17 	ldw	r4,172(sp)
    52e0:	1c47883a 	add	r3,r3,r17
    52e4:	10800044 	addi	r2,r2,1
    52e8:	41000015 	stw	r4,0(r8)
    52ec:	44400115 	stw	r17,4(r8)
    52f0:	d8c02015 	stw	r3,128(sp)
    52f4:	d8801f15 	stw	r2,124(sp)
    52f8:	010001c4 	movi	r4,7
    52fc:	20bfd716 	blt	r4,r2,525c <__alt_data_end+0xff00525c>
    5300:	42000204 	addi	r8,r8,8
    5304:	003fdd06 	br	527c <__alt_data_end+0xff00527c>
    5308:	d9002c17 	ldw	r4,176(sp)
    530c:	d9801e04 	addi	r6,sp,120
    5310:	b80b883a 	mov	r5,r23
    5314:	000a4640 	call	a464 <__sprint_r>
    5318:	1039ed1e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    531c:	d8802617 	ldw	r2,152(sp)
    5320:	d8c02017 	ldw	r3,128(sp)
    5324:	da000404 	addi	r8,sp,16
    5328:	003e1006 	br	4b6c <__alt_data_end+0xff004b6c>
    532c:	00800044 	movi	r2,1
    5330:	10803fcc 	andi	r2,r2,255
    5334:	00c00044 	movi	r3,1
    5338:	10fa3526 	beq	r2,r3,3c10 <__alt_data_end+0xff003c10>
    533c:	00c00084 	movi	r3,2
    5340:	10fbcb26 	beq	r2,r3,4270 <__alt_data_end+0xff004270>
    5344:	003a8f06 	br	3d84 <__alt_data_end+0xff003d84>
    5348:	01000074 	movhi	r4,1
    534c:	2108d884 	addi	r4,r4,9058
    5350:	d9003515 	stw	r4,212(sp)
    5354:	003b7606 	br	4130 <__alt_data_end+0xff004130>
    5358:	d8802917 	ldw	r2,164(sp)
    535c:	00c00184 	movi	r3,6
    5360:	1880012e 	bgeu	r3,r2,5368 <___vfprintf_internal_r+0x1ca0>
    5364:	1805883a 	mov	r2,r3
    5368:	d8802e15 	stw	r2,184(sp)
    536c:	1000ef16 	blt	r2,zero,572c <___vfprintf_internal_r+0x2064>
    5370:	04000074 	movhi	r16,1
    5374:	d8802a15 	stw	r2,168(sp)
    5378:	dcc02d15 	stw	r19,180(sp)
    537c:	d8002915 	stw	zero,164(sp)
    5380:	d8003215 	stw	zero,200(sp)
    5384:	8408d204 	addi	r16,r16,9032
    5388:	0039883a 	mov	fp,zero
    538c:	003aa206 	br	3e18 <__alt_data_end+0xff003e18>
    5390:	0021883a 	mov	r16,zero
    5394:	003e0706 	br	4bb4 <__alt_data_end+0xff004bb4>
    5398:	d9002c17 	ldw	r4,176(sp)
    539c:	d9801e04 	addi	r6,sp,120
    53a0:	b80b883a 	mov	r5,r23
    53a4:	000a4640 	call	a464 <__sprint_r>
    53a8:	1039c91e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    53ac:	d8802617 	ldw	r2,152(sp)
    53b0:	d9403317 	ldw	r5,204(sp)
    53b4:	d8c02017 	ldw	r3,128(sp)
    53b8:	da000404 	addi	r8,sp,16
    53bc:	2885c83a 	sub	r2,r5,r2
    53c0:	003dfb06 	br	4bb0 <__alt_data_end+0xff004bb0>
    53c4:	9080004c 	andi	r2,r18,1
    53c8:	103e8f1e 	bne	r2,zero,4e08 <__alt_data_end+0xff004e08>
    53cc:	d8802117 	ldw	r2,132(sp)
    53d0:	003e9e06 	br	4e4c <__alt_data_end+0xff004e4c>
    53d4:	1025883a 	mov	r18,r2
    53d8:	0039883a 	mov	fp,zero
    53dc:	00800084 	movi	r2,2
    53e0:	003fd306 	br	5330 <__alt_data_end+0xff005330>
    53e4:	07000b44 	movi	fp,45
    53e8:	df002785 	stb	fp,158(sp)
    53ec:	003a4006 	br	3cf0 <__alt_data_end+0xff003cf0>
    53f0:	00c00b44 	movi	r3,45
    53f4:	d8c02785 	stb	r3,158(sp)
    53f8:	d8802a15 	stw	r2,168(sp)
    53fc:	dc802b17 	ldw	r18,172(sp)
    5400:	d8002915 	stw	zero,164(sp)
    5404:	07000b44 	movi	fp,45
    5408:	003a8006 	br	3e0c <__alt_data_end+0xff003e0c>
    540c:	04000074 	movhi	r16,1
    5410:	8408c704 	addi	r16,r16,8988
    5414:	003f4706 	br	5134 <__alt_data_end+0xff005134>
    5418:	d8c02d17 	ldw	r3,180(sp)
    541c:	d9002f17 	ldw	r4,188(sp)
    5420:	18800017 	ldw	r2,0(r3)
    5424:	18c00104 	addi	r3,r3,4
    5428:	d8c02d15 	stw	r3,180(sp)
    542c:	11000015 	stw	r4,0(r2)
    5430:	0038dd06 	br	37a8 <__alt_data_end+0xff0037a8>
    5434:	dd802617 	ldw	r22,152(sp)
    5438:	00bfff44 	movi	r2,-3
    543c:	b0801c16 	blt	r22,r2,54b0 <___vfprintf_internal_r+0x1de8>
    5440:	d9402917 	ldw	r5,164(sp)
    5444:	2d801a16 	blt	r5,r22,54b0 <___vfprintf_internal_r+0x1de8>
    5448:	dd803215 	stw	r22,200(sp)
    544c:	003e8906 	br	4e74 <__alt_data_end+0xff004e74>
    5450:	01000074 	movhi	r4,1
    5454:	2108d484 	addi	r4,r4,9042
    5458:	d9002b15 	stw	r4,172(sp)
    545c:	003c9106 	br	46a4 <__alt_data_end+0xff0046a4>
    5460:	e005883a 	mov	r2,fp
    5464:	003e7906 	br	4e4c <__alt_data_end+0xff004e4c>
    5468:	d9402917 	ldw	r5,164(sp)
    546c:	df002783 	ldbu	fp,158(sp)
    5470:	dcc02d15 	stw	r19,180(sp)
    5474:	d9402a15 	stw	r5,168(sp)
    5478:	d9402e15 	stw	r5,184(sp)
    547c:	d8002915 	stw	zero,164(sp)
    5480:	d8003215 	stw	zero,200(sp)
    5484:	003a5d06 	br	3dfc <__alt_data_end+0xff003dfc>
    5488:	9080004c 	andi	r2,r18,1
    548c:	0039883a 	mov	fp,zero
    5490:	10000426 	beq	r2,zero,54a4 <___vfprintf_internal_r+0x1ddc>
    5494:	00800c04 	movi	r2,48
    5498:	dc001dc4 	addi	r16,sp,119
    549c:	d8801dc5 	stb	r2,119(sp)
    54a0:	003b8006 	br	42a4 <__alt_data_end+0xff0042a4>
    54a4:	d8002e15 	stw	zero,184(sp)
    54a8:	dc001e04 	addi	r16,sp,120
    54ac:	003a4d06 	br	3de4 <__alt_data_end+0xff003de4>
    54b0:	8c7fff84 	addi	r17,r17,-2
    54b4:	b5bfffc4 	addi	r22,r22,-1
    54b8:	dd802615 	stw	r22,152(sp)
    54bc:	dc4022c5 	stb	r17,139(sp)
    54c0:	b000bf16 	blt	r22,zero,57c0 <___vfprintf_internal_r+0x20f8>
    54c4:	00800ac4 	movi	r2,43
    54c8:	d8802305 	stb	r2,140(sp)
    54cc:	00800244 	movi	r2,9
    54d0:	15807016 	blt	r2,r22,5694 <___vfprintf_internal_r+0x1fcc>
    54d4:	00800c04 	movi	r2,48
    54d8:	b5800c04 	addi	r22,r22,48
    54dc:	d8802345 	stb	r2,141(sp)
    54e0:	dd802385 	stb	r22,142(sp)
    54e4:	d88023c4 	addi	r2,sp,143
    54e8:	df0022c4 	addi	fp,sp,139
    54ec:	d8c03317 	ldw	r3,204(sp)
    54f0:	1739c83a 	sub	fp,r2,fp
    54f4:	d9003317 	ldw	r4,204(sp)
    54f8:	e0c7883a 	add	r3,fp,r3
    54fc:	df003a15 	stw	fp,232(sp)
    5500:	d8c02e15 	stw	r3,184(sp)
    5504:	00800044 	movi	r2,1
    5508:	1100b30e 	bge	r2,r4,57d8 <___vfprintf_internal_r+0x2110>
    550c:	d8c02e17 	ldw	r3,184(sp)
    5510:	18c00044 	addi	r3,r3,1
    5514:	d8c02e15 	stw	r3,184(sp)
    5518:	1805883a 	mov	r2,r3
    551c:	1800ac16 	blt	r3,zero,57d0 <___vfprintf_internal_r+0x2108>
    5520:	d8003215 	stw	zero,200(sp)
    5524:	003e5d06 	br	4e9c <__alt_data_end+0xff004e9c>
    5528:	d9002c17 	ldw	r4,176(sp)
    552c:	d9801e04 	addi	r6,sp,120
    5530:	b80b883a 	mov	r5,r23
    5534:	000a4640 	call	a464 <__sprint_r>
    5538:	1039651e 	bne	r2,zero,3ad0 <__alt_data_end+0xff003ad0>
    553c:	dc402617 	ldw	r17,152(sp)
    5540:	d8c02017 	ldw	r3,128(sp)
    5544:	d8801f17 	ldw	r2,124(sp)
    5548:	da000404 	addi	r8,sp,16
    554c:	003ed606 	br	50a8 <__alt_data_end+0xff0050a8>
    5550:	582b883a 	mov	r21,r11
    5554:	d8002915 	stw	zero,164(sp)
    5558:	0038bd06 	br	3850 <__alt_data_end+0xff003850>
    555c:	d8802917 	ldw	r2,164(sp)
    5560:	103e071e 	bne	r2,zero,4d80 <__alt_data_end+0xff004d80>
    5564:	dc002915 	stw	r16,164(sp)
    5568:	003e0506 	br	4d80 <__alt_data_end+0xff004d80>
    556c:	d9002917 	ldw	r4,164(sp)
    5570:	20c00044 	addi	r3,r4,1
    5574:	003e0f06 	br	4db4 <__alt_data_end+0xff004db4>
    5578:	01400184 	movi	r5,6
    557c:	d9402915 	stw	r5,164(sp)
    5580:	003dff06 	br	4d80 <__alt_data_end+0xff004d80>
    5584:	d8802104 	addi	r2,sp,132
    5588:	d8800315 	stw	r2,12(sp)
    558c:	d8802504 	addi	r2,sp,148
    5590:	d8800215 	stw	r2,8(sp)
    5594:	d8802604 	addi	r2,sp,152
    5598:	d8800115 	stw	r2,4(sp)
    559c:	d8802917 	ldw	r2,164(sp)
    55a0:	d9403617 	ldw	r5,216(sp)
    55a4:	d9002c17 	ldw	r4,176(sp)
    55a8:	d8800015 	stw	r2,0(sp)
    55ac:	01c000c4 	movi	r7,3
    55b0:	980d883a 	mov	r6,r19
    55b4:	da003d15 	stw	r8,244(sp)
    55b8:	0005cec0 	call	5cec <_dtoa_r>
    55bc:	d8c02917 	ldw	r3,164(sp)
    55c0:	da003d17 	ldw	r8,244(sp)
    55c4:	1021883a 	mov	r16,r2
    55c8:	10f9883a 	add	fp,r2,r3
    55cc:	81000007 	ldb	r4,0(r16)
    55d0:	00800c04 	movi	r2,48
    55d4:	20805e26 	beq	r4,r2,5750 <___vfprintf_internal_r+0x2088>
    55d8:	d8c02617 	ldw	r3,152(sp)
    55dc:	e0f9883a 	add	fp,fp,r3
    55e0:	003e0a06 	br	4e0c <__alt_data_end+0xff004e0c>
    55e4:	00c00b44 	movi	r3,45
    55e8:	24e0003c 	xorhi	r19,r4,32768
    55ec:	d8c02a05 	stb	r3,168(sp)
    55f0:	003de906 	br	4d98 <__alt_data_end+0xff004d98>
    55f4:	d8c03217 	ldw	r3,200(sp)
    55f8:	00c07a0e 	bge	zero,r3,57e4 <___vfprintf_internal_r+0x211c>
    55fc:	00800044 	movi	r2,1
    5600:	d9003317 	ldw	r4,204(sp)
    5604:	1105883a 	add	r2,r2,r4
    5608:	d8802e15 	stw	r2,184(sp)
    560c:	10004e16 	blt	r2,zero,5748 <___vfprintf_internal_r+0x2080>
    5610:	044019c4 	movi	r17,103
    5614:	003e2106 	br	4e9c <__alt_data_end+0xff004e9c>
    5618:	d9002917 	ldw	r4,164(sp)
    561c:	d8802104 	addi	r2,sp,132
    5620:	d8800315 	stw	r2,12(sp)
    5624:	d9000015 	stw	r4,0(sp)
    5628:	d8802504 	addi	r2,sp,148
    562c:	d9403617 	ldw	r5,216(sp)
    5630:	d9002c17 	ldw	r4,176(sp)
    5634:	d8800215 	stw	r2,8(sp)
    5638:	d8802604 	addi	r2,sp,152
    563c:	d8800115 	stw	r2,4(sp)
    5640:	01c000c4 	movi	r7,3
    5644:	980d883a 	mov	r6,r19
    5648:	da003d15 	stw	r8,244(sp)
    564c:	0005cec0 	call	5cec <_dtoa_r>
    5650:	d8c02917 	ldw	r3,164(sp)
    5654:	da003d17 	ldw	r8,244(sp)
    5658:	1021883a 	mov	r16,r2
    565c:	00801184 	movi	r2,70
    5660:	80f9883a 	add	fp,r16,r3
    5664:	88bfd926 	beq	r17,r2,55cc <__alt_data_end+0xff0055cc>
    5668:	003de806 	br	4e0c <__alt_data_end+0xff004e0c>
    566c:	d9002917 	ldw	r4,164(sp)
    5670:	00c04d0e 	bge	zero,r3,57a8 <___vfprintf_internal_r+0x20e0>
    5674:	2000441e 	bne	r4,zero,5788 <___vfprintf_internal_r+0x20c0>
    5678:	9480004c 	andi	r18,r18,1
    567c:	9000421e 	bne	r18,zero,5788 <___vfprintf_internal_r+0x20c0>
    5680:	1805883a 	mov	r2,r3
    5684:	18007016 	blt	r3,zero,5848 <___vfprintf_internal_r+0x2180>
    5688:	d8c03217 	ldw	r3,200(sp)
    568c:	d8c02e15 	stw	r3,184(sp)
    5690:	003e0206 	br	4e9c <__alt_data_end+0xff004e9c>
    5694:	df0022c4 	addi	fp,sp,139
    5698:	dc002915 	stw	r16,164(sp)
    569c:	4027883a 	mov	r19,r8
    56a0:	e021883a 	mov	r16,fp
    56a4:	b009883a 	mov	r4,r22
    56a8:	01400284 	movi	r5,10
    56ac:	0002b380 	call	2b38 <__modsi3>
    56b0:	10800c04 	addi	r2,r2,48
    56b4:	843fffc4 	addi	r16,r16,-1
    56b8:	b009883a 	mov	r4,r22
    56bc:	01400284 	movi	r5,10
    56c0:	80800005 	stb	r2,0(r16)
    56c4:	0002ab40 	call	2ab4 <__divsi3>
    56c8:	102d883a 	mov	r22,r2
    56cc:	00800244 	movi	r2,9
    56d0:	15bff416 	blt	r2,r22,56a4 <__alt_data_end+0xff0056a4>
    56d4:	9811883a 	mov	r8,r19
    56d8:	b0800c04 	addi	r2,r22,48
    56dc:	8027883a 	mov	r19,r16
    56e0:	997fffc4 	addi	r5,r19,-1
    56e4:	98bfffc5 	stb	r2,-1(r19)
    56e8:	dc002917 	ldw	r16,164(sp)
    56ec:	2f006a2e 	bgeu	r5,fp,5898 <___vfprintf_internal_r+0x21d0>
    56f0:	d9c02384 	addi	r7,sp,142
    56f4:	3ccfc83a 	sub	r7,r7,r19
    56f8:	d9002344 	addi	r4,sp,141
    56fc:	e1cf883a 	add	r7,fp,r7
    5700:	00000106 	br	5708 <___vfprintf_internal_r+0x2040>
    5704:	28800003 	ldbu	r2,0(r5)
    5708:	20800005 	stb	r2,0(r4)
    570c:	21000044 	addi	r4,r4,1
    5710:	29400044 	addi	r5,r5,1
    5714:	393ffb1e 	bne	r7,r4,5704 <__alt_data_end+0xff005704>
    5718:	d8802304 	addi	r2,sp,140
    571c:	14c5c83a 	sub	r2,r2,r19
    5720:	d8c02344 	addi	r3,sp,141
    5724:	1885883a 	add	r2,r3,r2
    5728:	003f7006 	br	54ec <__alt_data_end+0xff0054ec>
    572c:	0005883a 	mov	r2,zero
    5730:	003f0f06 	br	5370 <__alt_data_end+0xff005370>
    5734:	d8c03217 	ldw	r3,200(sp)
    5738:	18c00044 	addi	r3,r3,1
    573c:	d8c02e15 	stw	r3,184(sp)
    5740:	1805883a 	mov	r2,r3
    5744:	183fb20e 	bge	r3,zero,5610 <__alt_data_end+0xff005610>
    5748:	0005883a 	mov	r2,zero
    574c:	003fb006 	br	5610 <__alt_data_end+0xff005610>
    5750:	d9003617 	ldw	r4,216(sp)
    5754:	000d883a 	mov	r6,zero
    5758:	000f883a 	mov	r7,zero
    575c:	980b883a 	mov	r5,r19
    5760:	d8c03c15 	stw	r3,240(sp)
    5764:	da003d15 	stw	r8,244(sp)
    5768:	000df280 	call	df28 <__eqdf2>
    576c:	d8c03c17 	ldw	r3,240(sp)
    5770:	da003d17 	ldw	r8,244(sp)
    5774:	103f9826 	beq	r2,zero,55d8 <__alt_data_end+0xff0055d8>
    5778:	00800044 	movi	r2,1
    577c:	10c7c83a 	sub	r3,r2,r3
    5780:	d8c02615 	stw	r3,152(sp)
    5784:	003f9506 	br	55dc <__alt_data_end+0xff0055dc>
    5788:	d9002917 	ldw	r4,164(sp)
    578c:	d8c03217 	ldw	r3,200(sp)
    5790:	20800044 	addi	r2,r4,1
    5794:	1885883a 	add	r2,r3,r2
    5798:	d8802e15 	stw	r2,184(sp)
    579c:	103dbf0e 	bge	r2,zero,4e9c <__alt_data_end+0xff004e9c>
    57a0:	0005883a 	mov	r2,zero
    57a4:	003dbd06 	br	4e9c <__alt_data_end+0xff004e9c>
    57a8:	2000211e 	bne	r4,zero,5830 <___vfprintf_internal_r+0x2168>
    57ac:	9480004c 	andi	r18,r18,1
    57b0:	90001f1e 	bne	r18,zero,5830 <___vfprintf_internal_r+0x2168>
    57b4:	00800044 	movi	r2,1
    57b8:	d8802e15 	stw	r2,184(sp)
    57bc:	003db706 	br	4e9c <__alt_data_end+0xff004e9c>
    57c0:	00800b44 	movi	r2,45
    57c4:	05adc83a 	sub	r22,zero,r22
    57c8:	d8802305 	stb	r2,140(sp)
    57cc:	003f3f06 	br	54cc <__alt_data_end+0xff0054cc>
    57d0:	0005883a 	mov	r2,zero
    57d4:	003f5206 	br	5520 <__alt_data_end+0xff005520>
    57d8:	90a4703a 	and	r18,r18,r2
    57dc:	903f4e26 	beq	r18,zero,5518 <__alt_data_end+0xff005518>
    57e0:	003f4a06 	br	550c <__alt_data_end+0xff00550c>
    57e4:	00800084 	movi	r2,2
    57e8:	10c5c83a 	sub	r2,r2,r3
    57ec:	003f8406 	br	5600 <__alt_data_end+0xff005600>
    57f0:	d8802d17 	ldw	r2,180(sp)
    57f4:	d9002d17 	ldw	r4,180(sp)
    57f8:	ac400043 	ldbu	r17,1(r21)
    57fc:	10800017 	ldw	r2,0(r2)
    5800:	582b883a 	mov	r21,r11
    5804:	d8802915 	stw	r2,164(sp)
    5808:	20800104 	addi	r2,r4,4
    580c:	d9002917 	ldw	r4,164(sp)
    5810:	d8802d15 	stw	r2,180(sp)
    5814:	203e7a0e 	bge	r4,zero,5200 <__alt_data_end+0xff005200>
    5818:	8c403fcc 	andi	r17,r17,255
    581c:	00bfffc4 	movi	r2,-1
    5820:	8c40201c 	xori	r17,r17,128
    5824:	d8802915 	stw	r2,164(sp)
    5828:	8c7fe004 	addi	r17,r17,-128
    582c:	00380706 	br	384c <__alt_data_end+0xff00384c>
    5830:	d8c02917 	ldw	r3,164(sp)
    5834:	18c00084 	addi	r3,r3,2
    5838:	d8c02e15 	stw	r3,184(sp)
    583c:	1805883a 	mov	r2,r3
    5840:	183d960e 	bge	r3,zero,4e9c <__alt_data_end+0xff004e9c>
    5844:	003fd606 	br	57a0 <__alt_data_end+0xff0057a0>
    5848:	0005883a 	mov	r2,zero
    584c:	003f8e06 	br	5688 <__alt_data_end+0xff005688>
    5850:	9080004c 	andi	r2,r18,1
    5854:	103f811e 	bne	r2,zero,565c <__alt_data_end+0xff00565c>
    5858:	d8802117 	ldw	r2,132(sp)
    585c:	1405c83a 	sub	r2,r2,r16
    5860:	d8803315 	stw	r2,204(sp)
    5864:	b47ef326 	beq	r22,r17,5434 <__alt_data_end+0xff005434>
    5868:	dd802617 	ldw	r22,152(sp)
    586c:	003f1106 	br	54b4 <__alt_data_end+0xff0054b4>
    5870:	d9c02785 	stb	r7,158(sp)
    5874:	00390406 	br	3c88 <__alt_data_end+0xff003c88>
    5878:	d9c02785 	stb	r7,158(sp)
    587c:	0038d306 	br	3bcc <__alt_data_end+0xff003bcc>
    5880:	d9c02785 	stb	r7,158(sp)
    5884:	003a6106 	br	420c <__alt_data_end+0xff00420c>
    5888:	d9c02785 	stb	r7,158(sp)
    588c:	003af806 	br	4470 <__alt_data_end+0xff004470>
    5890:	0005883a 	mov	r2,zero
    5894:	003d7e06 	br	4e90 <__alt_data_end+0xff004e90>
    5898:	d8802344 	addi	r2,sp,141
    589c:	003f1306 	br	54ec <__alt_data_end+0xff0054ec>
    58a0:	d9c02785 	stb	r7,158(sp)
    58a4:	00392306 	br	3d34 <__alt_data_end+0xff003d34>
    58a8:	d9c02785 	stb	r7,158(sp)
    58ac:	003aa906 	br	4354 <__alt_data_end+0xff004354>
    58b0:	d9c02785 	stb	r7,158(sp)
    58b4:	003a3d06 	br	41ac <__alt_data_end+0xff0041ac>
    58b8:	d9c02785 	stb	r7,158(sp)
    58bc:	003aca06 	br	43e8 <__alt_data_end+0xff0043e8>

000058c0 <__vfprintf_internal>:
    58c0:	00800074 	movhi	r2,1
    58c4:	10903104 	addi	r2,r2,16580
    58c8:	300f883a 	mov	r7,r6
    58cc:	280d883a 	mov	r6,r5
    58d0:	200b883a 	mov	r5,r4
    58d4:	11000017 	ldw	r4,0(r2)
    58d8:	00036c81 	jmpi	36c8 <___vfprintf_internal_r>

000058dc <__sbprintf>:
    58dc:	2880030b 	ldhu	r2,12(r5)
    58e0:	2ac01917 	ldw	r11,100(r5)
    58e4:	2a80038b 	ldhu	r10,14(r5)
    58e8:	2a400717 	ldw	r9,28(r5)
    58ec:	2a000917 	ldw	r8,36(r5)
    58f0:	defee204 	addi	sp,sp,-1144
    58f4:	00c10004 	movi	r3,1024
    58f8:	dc011a15 	stw	r16,1128(sp)
    58fc:	10bfff4c 	andi	r2,r2,65533
    5900:	2821883a 	mov	r16,r5
    5904:	d8cb883a 	add	r5,sp,r3
    5908:	dc811c15 	stw	r18,1136(sp)
    590c:	dc411b15 	stw	r17,1132(sp)
    5910:	dfc11d15 	stw	ra,1140(sp)
    5914:	2025883a 	mov	r18,r4
    5918:	d881030d 	sth	r2,1036(sp)
    591c:	dac11915 	stw	r11,1124(sp)
    5920:	da81038d 	sth	r10,1038(sp)
    5924:	da410715 	stw	r9,1052(sp)
    5928:	da010915 	stw	r8,1060(sp)
    592c:	dec10015 	stw	sp,1024(sp)
    5930:	dec10415 	stw	sp,1040(sp)
    5934:	d8c10215 	stw	r3,1032(sp)
    5938:	d8c10515 	stw	r3,1044(sp)
    593c:	d8010615 	stw	zero,1048(sp)
    5940:	00036c80 	call	36c8 <___vfprintf_internal_r>
    5944:	1023883a 	mov	r17,r2
    5948:	10000416 	blt	r2,zero,595c <__sbprintf+0x80>
    594c:	d9410004 	addi	r5,sp,1024
    5950:	9009883a 	mov	r4,r18
    5954:	00075900 	call	7590 <_fflush_r>
    5958:	10000d1e 	bne	r2,zero,5990 <__sbprintf+0xb4>
    595c:	d881030b 	ldhu	r2,1036(sp)
    5960:	1080100c 	andi	r2,r2,64
    5964:	10000326 	beq	r2,zero,5974 <__sbprintf+0x98>
    5968:	8080030b 	ldhu	r2,12(r16)
    596c:	10801014 	ori	r2,r2,64
    5970:	8080030d 	sth	r2,12(r16)
    5974:	8805883a 	mov	r2,r17
    5978:	dfc11d17 	ldw	ra,1140(sp)
    597c:	dc811c17 	ldw	r18,1136(sp)
    5980:	dc411b17 	ldw	r17,1132(sp)
    5984:	dc011a17 	ldw	r16,1128(sp)
    5988:	dec11e04 	addi	sp,sp,1144
    598c:	f800283a 	ret
    5990:	047fffc4 	movi	r17,-1
    5994:	003ff106 	br	595c <__alt_data_end+0xff00595c>

00005998 <__swsetup_r>:
    5998:	00800074 	movhi	r2,1
    599c:	defffd04 	addi	sp,sp,-12
    59a0:	10903104 	addi	r2,r2,16580
    59a4:	dc400115 	stw	r17,4(sp)
    59a8:	2023883a 	mov	r17,r4
    59ac:	11000017 	ldw	r4,0(r2)
    59b0:	dc000015 	stw	r16,0(sp)
    59b4:	dfc00215 	stw	ra,8(sp)
    59b8:	2821883a 	mov	r16,r5
    59bc:	20000226 	beq	r4,zero,59c8 <__swsetup_r+0x30>
    59c0:	20800e17 	ldw	r2,56(r4)
    59c4:	10003126 	beq	r2,zero,5a8c <__swsetup_r+0xf4>
    59c8:	8080030b 	ldhu	r2,12(r16)
    59cc:	10c0020c 	andi	r3,r2,8
    59d0:	1009883a 	mov	r4,r2
    59d4:	18000f26 	beq	r3,zero,5a14 <__swsetup_r+0x7c>
    59d8:	80c00417 	ldw	r3,16(r16)
    59dc:	18001526 	beq	r3,zero,5a34 <__swsetup_r+0x9c>
    59e0:	1100004c 	andi	r4,r2,1
    59e4:	20001c1e 	bne	r4,zero,5a58 <__swsetup_r+0xc0>
    59e8:	1080008c 	andi	r2,r2,2
    59ec:	1000291e 	bne	r2,zero,5a94 <__swsetup_r+0xfc>
    59f0:	80800517 	ldw	r2,20(r16)
    59f4:	80800215 	stw	r2,8(r16)
    59f8:	18001c26 	beq	r3,zero,5a6c <__swsetup_r+0xd4>
    59fc:	0005883a 	mov	r2,zero
    5a00:	dfc00217 	ldw	ra,8(sp)
    5a04:	dc400117 	ldw	r17,4(sp)
    5a08:	dc000017 	ldw	r16,0(sp)
    5a0c:	dec00304 	addi	sp,sp,12
    5a10:	f800283a 	ret
    5a14:	2080040c 	andi	r2,r4,16
    5a18:	10002e26 	beq	r2,zero,5ad4 <__swsetup_r+0x13c>
    5a1c:	2080010c 	andi	r2,r4,4
    5a20:	10001e1e 	bne	r2,zero,5a9c <__swsetup_r+0x104>
    5a24:	80c00417 	ldw	r3,16(r16)
    5a28:	20800214 	ori	r2,r4,8
    5a2c:	8080030d 	sth	r2,12(r16)
    5a30:	183feb1e 	bne	r3,zero,59e0 <__alt_data_end+0xff0059e0>
    5a34:	1100a00c 	andi	r4,r2,640
    5a38:	01408004 	movi	r5,512
    5a3c:	217fe826 	beq	r4,r5,59e0 <__alt_data_end+0xff0059e0>
    5a40:	800b883a 	mov	r5,r16
    5a44:	8809883a 	mov	r4,r17
    5a48:	00085100 	call	8510 <__smakebuf_r>
    5a4c:	8080030b 	ldhu	r2,12(r16)
    5a50:	80c00417 	ldw	r3,16(r16)
    5a54:	003fe206 	br	59e0 <__alt_data_end+0xff0059e0>
    5a58:	80800517 	ldw	r2,20(r16)
    5a5c:	80000215 	stw	zero,8(r16)
    5a60:	0085c83a 	sub	r2,zero,r2
    5a64:	80800615 	stw	r2,24(r16)
    5a68:	183fe41e 	bne	r3,zero,59fc <__alt_data_end+0xff0059fc>
    5a6c:	80c0030b 	ldhu	r3,12(r16)
    5a70:	0005883a 	mov	r2,zero
    5a74:	1900200c 	andi	r4,r3,128
    5a78:	203fe126 	beq	r4,zero,5a00 <__alt_data_end+0xff005a00>
    5a7c:	18c01014 	ori	r3,r3,64
    5a80:	80c0030d 	sth	r3,12(r16)
    5a84:	00bfffc4 	movi	r2,-1
    5a88:	003fdd06 	br	5a00 <__alt_data_end+0xff005a00>
    5a8c:	000796c0 	call	796c <__sinit>
    5a90:	003fcd06 	br	59c8 <__alt_data_end+0xff0059c8>
    5a94:	0005883a 	mov	r2,zero
    5a98:	003fd606 	br	59f4 <__alt_data_end+0xff0059f4>
    5a9c:	81400c17 	ldw	r5,48(r16)
    5aa0:	28000626 	beq	r5,zero,5abc <__swsetup_r+0x124>
    5aa4:	80801004 	addi	r2,r16,64
    5aa8:	28800326 	beq	r5,r2,5ab8 <__swsetup_r+0x120>
    5aac:	8809883a 	mov	r4,r17
    5ab0:	0007ae00 	call	7ae0 <_free_r>
    5ab4:	8100030b 	ldhu	r4,12(r16)
    5ab8:	80000c15 	stw	zero,48(r16)
    5abc:	80c00417 	ldw	r3,16(r16)
    5ac0:	00bff6c4 	movi	r2,-37
    5ac4:	1108703a 	and	r4,r2,r4
    5ac8:	80000115 	stw	zero,4(r16)
    5acc:	80c00015 	stw	r3,0(r16)
    5ad0:	003fd506 	br	5a28 <__alt_data_end+0xff005a28>
    5ad4:	00800244 	movi	r2,9
    5ad8:	88800015 	stw	r2,0(r17)
    5adc:	20801014 	ori	r2,r4,64
    5ae0:	8080030d 	sth	r2,12(r16)
    5ae4:	00bfffc4 	movi	r2,-1
    5ae8:	003fc506 	br	5a00 <__alt_data_end+0xff005a00>

00005aec <quorem>:
    5aec:	defff704 	addi	sp,sp,-36
    5af0:	dc800215 	stw	r18,8(sp)
    5af4:	20800417 	ldw	r2,16(r4)
    5af8:	2c800417 	ldw	r18,16(r5)
    5afc:	dfc00815 	stw	ra,32(sp)
    5b00:	ddc00715 	stw	r23,28(sp)
    5b04:	dd800615 	stw	r22,24(sp)
    5b08:	dd400515 	stw	r21,20(sp)
    5b0c:	dd000415 	stw	r20,16(sp)
    5b10:	dcc00315 	stw	r19,12(sp)
    5b14:	dc400115 	stw	r17,4(sp)
    5b18:	dc000015 	stw	r16,0(sp)
    5b1c:	14807116 	blt	r2,r18,5ce4 <quorem+0x1f8>
    5b20:	94bfffc4 	addi	r18,r18,-1
    5b24:	94ad883a 	add	r22,r18,r18
    5b28:	b5ad883a 	add	r22,r22,r22
    5b2c:	2c400504 	addi	r17,r5,20
    5b30:	8da9883a 	add	r20,r17,r22
    5b34:	25400504 	addi	r21,r4,20
    5b38:	282f883a 	mov	r23,r5
    5b3c:	adad883a 	add	r22,r21,r22
    5b40:	a1400017 	ldw	r5,0(r20)
    5b44:	2021883a 	mov	r16,r4
    5b48:	b1000017 	ldw	r4,0(r22)
    5b4c:	29400044 	addi	r5,r5,1
    5b50:	0002bac0 	call	2bac <__udivsi3>
    5b54:	1027883a 	mov	r19,r2
    5b58:	10002c26 	beq	r2,zero,5c0c <quorem+0x120>
    5b5c:	a813883a 	mov	r9,r21
    5b60:	880b883a 	mov	r5,r17
    5b64:	0009883a 	mov	r4,zero
    5b68:	000d883a 	mov	r6,zero
    5b6c:	2a000017 	ldw	r8,0(r5)
    5b70:	49c00017 	ldw	r7,0(r9)
    5b74:	29400104 	addi	r5,r5,4
    5b78:	40bfffcc 	andi	r2,r8,65535
    5b7c:	14c5383a 	mul	r2,r2,r19
    5b80:	4010d43a 	srli	r8,r8,16
    5b84:	38ffffcc 	andi	r3,r7,65535
    5b88:	1105883a 	add	r2,r2,r4
    5b8c:	1008d43a 	srli	r4,r2,16
    5b90:	44d1383a 	mul	r8,r8,r19
    5b94:	198d883a 	add	r6,r3,r6
    5b98:	10ffffcc 	andi	r3,r2,65535
    5b9c:	30c7c83a 	sub	r3,r6,r3
    5ba0:	380ed43a 	srli	r7,r7,16
    5ba4:	4105883a 	add	r2,r8,r4
    5ba8:	180dd43a 	srai	r6,r3,16
    5bac:	113fffcc 	andi	r4,r2,65535
    5bb0:	390fc83a 	sub	r7,r7,r4
    5bb4:	398d883a 	add	r6,r7,r6
    5bb8:	300e943a 	slli	r7,r6,16
    5bbc:	18ffffcc 	andi	r3,r3,65535
    5bc0:	1008d43a 	srli	r4,r2,16
    5bc4:	38ceb03a 	or	r7,r7,r3
    5bc8:	49c00015 	stw	r7,0(r9)
    5bcc:	300dd43a 	srai	r6,r6,16
    5bd0:	4a400104 	addi	r9,r9,4
    5bd4:	a17fe52e 	bgeu	r20,r5,5b6c <__alt_data_end+0xff005b6c>
    5bd8:	b0800017 	ldw	r2,0(r22)
    5bdc:	10000b1e 	bne	r2,zero,5c0c <quorem+0x120>
    5be0:	b0bfff04 	addi	r2,r22,-4
    5be4:	a880082e 	bgeu	r21,r2,5c08 <quorem+0x11c>
    5be8:	b0ffff17 	ldw	r3,-4(r22)
    5bec:	18000326 	beq	r3,zero,5bfc <quorem+0x110>
    5bf0:	00000506 	br	5c08 <quorem+0x11c>
    5bf4:	10c00017 	ldw	r3,0(r2)
    5bf8:	1800031e 	bne	r3,zero,5c08 <quorem+0x11c>
    5bfc:	10bfff04 	addi	r2,r2,-4
    5c00:	94bfffc4 	addi	r18,r18,-1
    5c04:	a8bffb36 	bltu	r21,r2,5bf4 <__alt_data_end+0xff005bf4>
    5c08:	84800415 	stw	r18,16(r16)
    5c0c:	b80b883a 	mov	r5,r23
    5c10:	8009883a 	mov	r4,r16
    5c14:	00094440 	call	9444 <__mcmp>
    5c18:	10002616 	blt	r2,zero,5cb4 <quorem+0x1c8>
    5c1c:	9cc00044 	addi	r19,r19,1
    5c20:	a805883a 	mov	r2,r21
    5c24:	000b883a 	mov	r5,zero
    5c28:	11000017 	ldw	r4,0(r2)
    5c2c:	89800017 	ldw	r6,0(r17)
    5c30:	10800104 	addi	r2,r2,4
    5c34:	20ffffcc 	andi	r3,r4,65535
    5c38:	194b883a 	add	r5,r3,r5
    5c3c:	30ffffcc 	andi	r3,r6,65535
    5c40:	28c7c83a 	sub	r3,r5,r3
    5c44:	300cd43a 	srli	r6,r6,16
    5c48:	2008d43a 	srli	r4,r4,16
    5c4c:	180bd43a 	srai	r5,r3,16
    5c50:	18ffffcc 	andi	r3,r3,65535
    5c54:	2189c83a 	sub	r4,r4,r6
    5c58:	2149883a 	add	r4,r4,r5
    5c5c:	200c943a 	slli	r6,r4,16
    5c60:	8c400104 	addi	r17,r17,4
    5c64:	200bd43a 	srai	r5,r4,16
    5c68:	30c6b03a 	or	r3,r6,r3
    5c6c:	10ffff15 	stw	r3,-4(r2)
    5c70:	a47fed2e 	bgeu	r20,r17,5c28 <__alt_data_end+0xff005c28>
    5c74:	9485883a 	add	r2,r18,r18
    5c78:	1085883a 	add	r2,r2,r2
    5c7c:	a887883a 	add	r3,r21,r2
    5c80:	18800017 	ldw	r2,0(r3)
    5c84:	10000b1e 	bne	r2,zero,5cb4 <quorem+0x1c8>
    5c88:	18bfff04 	addi	r2,r3,-4
    5c8c:	a880082e 	bgeu	r21,r2,5cb0 <quorem+0x1c4>
    5c90:	18ffff17 	ldw	r3,-4(r3)
    5c94:	18000326 	beq	r3,zero,5ca4 <quorem+0x1b8>
    5c98:	00000506 	br	5cb0 <quorem+0x1c4>
    5c9c:	10c00017 	ldw	r3,0(r2)
    5ca0:	1800031e 	bne	r3,zero,5cb0 <quorem+0x1c4>
    5ca4:	10bfff04 	addi	r2,r2,-4
    5ca8:	94bfffc4 	addi	r18,r18,-1
    5cac:	a8bffb36 	bltu	r21,r2,5c9c <__alt_data_end+0xff005c9c>
    5cb0:	84800415 	stw	r18,16(r16)
    5cb4:	9805883a 	mov	r2,r19
    5cb8:	dfc00817 	ldw	ra,32(sp)
    5cbc:	ddc00717 	ldw	r23,28(sp)
    5cc0:	dd800617 	ldw	r22,24(sp)
    5cc4:	dd400517 	ldw	r21,20(sp)
    5cc8:	dd000417 	ldw	r20,16(sp)
    5ccc:	dcc00317 	ldw	r19,12(sp)
    5cd0:	dc800217 	ldw	r18,8(sp)
    5cd4:	dc400117 	ldw	r17,4(sp)
    5cd8:	dc000017 	ldw	r16,0(sp)
    5cdc:	dec00904 	addi	sp,sp,36
    5ce0:	f800283a 	ret
    5ce4:	0005883a 	mov	r2,zero
    5ce8:	003ff306 	br	5cb8 <__alt_data_end+0xff005cb8>

00005cec <_dtoa_r>:
    5cec:	20801017 	ldw	r2,64(r4)
    5cf0:	deffde04 	addi	sp,sp,-136
    5cf4:	df002015 	stw	fp,128(sp)
    5cf8:	dcc01b15 	stw	r19,108(sp)
    5cfc:	dc801a15 	stw	r18,104(sp)
    5d00:	dc401915 	stw	r17,100(sp)
    5d04:	dc001815 	stw	r16,96(sp)
    5d08:	dfc02115 	stw	ra,132(sp)
    5d0c:	ddc01f15 	stw	r23,124(sp)
    5d10:	dd801e15 	stw	r22,120(sp)
    5d14:	dd401d15 	stw	r21,116(sp)
    5d18:	dd001c15 	stw	r20,112(sp)
    5d1c:	d9c00315 	stw	r7,12(sp)
    5d20:	2039883a 	mov	fp,r4
    5d24:	3023883a 	mov	r17,r6
    5d28:	2825883a 	mov	r18,r5
    5d2c:	dc002417 	ldw	r16,144(sp)
    5d30:	3027883a 	mov	r19,r6
    5d34:	10000826 	beq	r2,zero,5d58 <_dtoa_r+0x6c>
    5d38:	21801117 	ldw	r6,68(r4)
    5d3c:	00c00044 	movi	r3,1
    5d40:	100b883a 	mov	r5,r2
    5d44:	1986983a 	sll	r3,r3,r6
    5d48:	11800115 	stw	r6,4(r2)
    5d4c:	10c00215 	stw	r3,8(r2)
    5d50:	0008c240 	call	8c24 <_Bfree>
    5d54:	e0001015 	stw	zero,64(fp)
    5d58:	88002e16 	blt	r17,zero,5e14 <_dtoa_r+0x128>
    5d5c:	80000015 	stw	zero,0(r16)
    5d60:	889ffc2c 	andhi	r2,r17,32752
    5d64:	00dffc34 	movhi	r3,32752
    5d68:	10c01c26 	beq	r2,r3,5ddc <_dtoa_r+0xf0>
    5d6c:	000d883a 	mov	r6,zero
    5d70:	000f883a 	mov	r7,zero
    5d74:	9009883a 	mov	r4,r18
    5d78:	980b883a 	mov	r5,r19
    5d7c:	000df280 	call	df28 <__eqdf2>
    5d80:	10002b1e 	bne	r2,zero,5e30 <_dtoa_r+0x144>
    5d84:	d9c02317 	ldw	r7,140(sp)
    5d88:	00800044 	movi	r2,1
    5d8c:	38800015 	stw	r2,0(r7)
    5d90:	d8802517 	ldw	r2,148(sp)
    5d94:	10019e26 	beq	r2,zero,6410 <_dtoa_r+0x724>
    5d98:	d8c02517 	ldw	r3,148(sp)
    5d9c:	00800074 	movhi	r2,1
    5da0:	1088d444 	addi	r2,r2,9041
    5da4:	18800015 	stw	r2,0(r3)
    5da8:	10bfffc4 	addi	r2,r2,-1
    5dac:	dfc02117 	ldw	ra,132(sp)
    5db0:	df002017 	ldw	fp,128(sp)
    5db4:	ddc01f17 	ldw	r23,124(sp)
    5db8:	dd801e17 	ldw	r22,120(sp)
    5dbc:	dd401d17 	ldw	r21,116(sp)
    5dc0:	dd001c17 	ldw	r20,112(sp)
    5dc4:	dcc01b17 	ldw	r19,108(sp)
    5dc8:	dc801a17 	ldw	r18,104(sp)
    5dcc:	dc401917 	ldw	r17,100(sp)
    5dd0:	dc001817 	ldw	r16,96(sp)
    5dd4:	dec02204 	addi	sp,sp,136
    5dd8:	f800283a 	ret
    5ddc:	d8c02317 	ldw	r3,140(sp)
    5de0:	0089c3c4 	movi	r2,9999
    5de4:	18800015 	stw	r2,0(r3)
    5de8:	90017726 	beq	r18,zero,63c8 <_dtoa_r+0x6dc>
    5dec:	00800074 	movhi	r2,1
    5df0:	1088e004 	addi	r2,r2,9088
    5df4:	d9002517 	ldw	r4,148(sp)
    5df8:	203fec26 	beq	r4,zero,5dac <__alt_data_end+0xff005dac>
    5dfc:	10c000c7 	ldb	r3,3(r2)
    5e00:	1801781e 	bne	r3,zero,63e4 <_dtoa_r+0x6f8>
    5e04:	10c000c4 	addi	r3,r2,3
    5e08:	d9802517 	ldw	r6,148(sp)
    5e0c:	30c00015 	stw	r3,0(r6)
    5e10:	003fe606 	br	5dac <__alt_data_end+0xff005dac>
    5e14:	04e00034 	movhi	r19,32768
    5e18:	9cffffc4 	addi	r19,r19,-1
    5e1c:	00800044 	movi	r2,1
    5e20:	8ce6703a 	and	r19,r17,r19
    5e24:	80800015 	stw	r2,0(r16)
    5e28:	9823883a 	mov	r17,r19
    5e2c:	003fcc06 	br	5d60 <__alt_data_end+0xff005d60>
    5e30:	d8800204 	addi	r2,sp,8
    5e34:	d8800015 	stw	r2,0(sp)
    5e38:	d9c00104 	addi	r7,sp,4
    5e3c:	900b883a 	mov	r5,r18
    5e40:	980d883a 	mov	r6,r19
    5e44:	e009883a 	mov	r4,fp
    5e48:	8820d53a 	srli	r16,r17,20
    5e4c:	00098100 	call	9810 <__d2b>
    5e50:	d8800915 	stw	r2,36(sp)
    5e54:	8001651e 	bne	r16,zero,63ec <_dtoa_r+0x700>
    5e58:	dd800217 	ldw	r22,8(sp)
    5e5c:	dc000117 	ldw	r16,4(sp)
    5e60:	00800804 	movi	r2,32
    5e64:	b421883a 	add	r16,r22,r16
    5e68:	80c10c84 	addi	r3,r16,1074
    5e6c:	10c2d10e 	bge	r2,r3,69b4 <_dtoa_r+0xcc8>
    5e70:	00801004 	movi	r2,64
    5e74:	81010484 	addi	r4,r16,1042
    5e78:	10c7c83a 	sub	r3,r2,r3
    5e7c:	9108d83a 	srl	r4,r18,r4
    5e80:	88e2983a 	sll	r17,r17,r3
    5e84:	2448b03a 	or	r4,r4,r17
    5e88:	000f2f00 	call	f2f0 <__floatunsidf>
    5e8c:	017f8434 	movhi	r5,65040
    5e90:	01800044 	movi	r6,1
    5e94:	1009883a 	mov	r4,r2
    5e98:	194b883a 	add	r5,r3,r5
    5e9c:	843fffc4 	addi	r16,r16,-1
    5ea0:	d9801115 	stw	r6,68(sp)
    5ea4:	000d883a 	mov	r6,zero
    5ea8:	01cffe34 	movhi	r7,16376
    5eac:	000e8980 	call	e898 <__subdf3>
    5eb0:	0198dbf4 	movhi	r6,25455
    5eb4:	01cff4f4 	movhi	r7,16339
    5eb8:	3190d844 	addi	r6,r6,17249
    5ebc:	39e1e9c4 	addi	r7,r7,-30809
    5ec0:	1009883a 	mov	r4,r2
    5ec4:	180b883a 	mov	r5,r3
    5ec8:	000e1800 	call	e180 <__muldf3>
    5ecc:	01a2d874 	movhi	r6,35681
    5ed0:	01cff1f4 	movhi	r7,16327
    5ed4:	31b22cc4 	addi	r6,r6,-14157
    5ed8:	39e28a04 	addi	r7,r7,-30168
    5edc:	180b883a 	mov	r5,r3
    5ee0:	1009883a 	mov	r4,r2
    5ee4:	000cd940 	call	cd94 <__adddf3>
    5ee8:	8009883a 	mov	r4,r16
    5eec:	1029883a 	mov	r20,r2
    5ef0:	1823883a 	mov	r17,r3
    5ef4:	000f2140 	call	f214 <__floatsidf>
    5ef8:	019427f4 	movhi	r6,20639
    5efc:	01cff4f4 	movhi	r7,16339
    5f00:	319e7ec4 	addi	r6,r6,31227
    5f04:	39d104c4 	addi	r7,r7,17427
    5f08:	1009883a 	mov	r4,r2
    5f0c:	180b883a 	mov	r5,r3
    5f10:	000e1800 	call	e180 <__muldf3>
    5f14:	100d883a 	mov	r6,r2
    5f18:	180f883a 	mov	r7,r3
    5f1c:	a009883a 	mov	r4,r20
    5f20:	880b883a 	mov	r5,r17
    5f24:	000cd940 	call	cd94 <__adddf3>
    5f28:	1009883a 	mov	r4,r2
    5f2c:	180b883a 	mov	r5,r3
    5f30:	1029883a 	mov	r20,r2
    5f34:	1823883a 	mov	r17,r3
    5f38:	000f1940 	call	f194 <__fixdfsi>
    5f3c:	000d883a 	mov	r6,zero
    5f40:	000f883a 	mov	r7,zero
    5f44:	a009883a 	mov	r4,r20
    5f48:	880b883a 	mov	r5,r17
    5f4c:	d8800515 	stw	r2,20(sp)
    5f50:	000e08c0 	call	e08c <__ledf2>
    5f54:	10028716 	blt	r2,zero,6974 <_dtoa_r+0xc88>
    5f58:	d8c00517 	ldw	r3,20(sp)
    5f5c:	00800584 	movi	r2,22
    5f60:	10c27536 	bltu	r2,r3,6938 <_dtoa_r+0xc4c>
    5f64:	180490fa 	slli	r2,r3,3
    5f68:	00c00074 	movhi	r3,1
    5f6c:	18c8fc04 	addi	r3,r3,9200
    5f70:	1885883a 	add	r2,r3,r2
    5f74:	11000017 	ldw	r4,0(r2)
    5f78:	11400117 	ldw	r5,4(r2)
    5f7c:	900d883a 	mov	r6,r18
    5f80:	980f883a 	mov	r7,r19
    5f84:	000dfb00 	call	dfb0 <__gedf2>
    5f88:	00828d0e 	bge	zero,r2,69c0 <_dtoa_r+0xcd4>
    5f8c:	d9000517 	ldw	r4,20(sp)
    5f90:	d8000e15 	stw	zero,56(sp)
    5f94:	213fffc4 	addi	r4,r4,-1
    5f98:	d9000515 	stw	r4,20(sp)
    5f9c:	b42dc83a 	sub	r22,r22,r16
    5fa0:	b5bfffc4 	addi	r22,r22,-1
    5fa4:	b0026f16 	blt	r22,zero,6964 <_dtoa_r+0xc78>
    5fa8:	d8000815 	stw	zero,32(sp)
    5fac:	d9c00517 	ldw	r7,20(sp)
    5fb0:	38026416 	blt	r7,zero,6944 <_dtoa_r+0xc58>
    5fb4:	b1ed883a 	add	r22,r22,r7
    5fb8:	d9c00d15 	stw	r7,52(sp)
    5fbc:	d8000a15 	stw	zero,40(sp)
    5fc0:	d9800317 	ldw	r6,12(sp)
    5fc4:	00800244 	movi	r2,9
    5fc8:	11811436 	bltu	r2,r6,641c <_dtoa_r+0x730>
    5fcc:	00800144 	movi	r2,5
    5fd0:	1184e10e 	bge	r2,r6,7358 <_dtoa_r+0x166c>
    5fd4:	31bfff04 	addi	r6,r6,-4
    5fd8:	d9800315 	stw	r6,12(sp)
    5fdc:	0023883a 	mov	r17,zero
    5fe0:	d9800317 	ldw	r6,12(sp)
    5fe4:	008000c4 	movi	r2,3
    5fe8:	30836726 	beq	r6,r2,6d88 <_dtoa_r+0x109c>
    5fec:	1183410e 	bge	r2,r6,6cf4 <_dtoa_r+0x1008>
    5ff0:	d9c00317 	ldw	r7,12(sp)
    5ff4:	00800104 	movi	r2,4
    5ff8:	38827c26 	beq	r7,r2,69ec <_dtoa_r+0xd00>
    5ffc:	00800144 	movi	r2,5
    6000:	3884c41e 	bne	r7,r2,7314 <_dtoa_r+0x1628>
    6004:	00800044 	movi	r2,1
    6008:	d8800b15 	stw	r2,44(sp)
    600c:	d8c00517 	ldw	r3,20(sp)
    6010:	d9002217 	ldw	r4,136(sp)
    6014:	1907883a 	add	r3,r3,r4
    6018:	19800044 	addi	r6,r3,1
    601c:	d8c00c15 	stw	r3,48(sp)
    6020:	d9800615 	stw	r6,24(sp)
    6024:	0183a40e 	bge	zero,r6,6eb8 <_dtoa_r+0x11cc>
    6028:	d9800617 	ldw	r6,24(sp)
    602c:	3021883a 	mov	r16,r6
    6030:	e0001115 	stw	zero,68(fp)
    6034:	008005c4 	movi	r2,23
    6038:	1184c92e 	bgeu	r2,r6,7360 <_dtoa_r+0x1674>
    603c:	00c00044 	movi	r3,1
    6040:	00800104 	movi	r2,4
    6044:	1085883a 	add	r2,r2,r2
    6048:	11000504 	addi	r4,r2,20
    604c:	180b883a 	mov	r5,r3
    6050:	18c00044 	addi	r3,r3,1
    6054:	313ffb2e 	bgeu	r6,r4,6044 <__alt_data_end+0xff006044>
    6058:	e1401115 	stw	r5,68(fp)
    605c:	e009883a 	mov	r4,fp
    6060:	0008b7c0 	call	8b7c <_Balloc>
    6064:	d8800715 	stw	r2,28(sp)
    6068:	e0801015 	stw	r2,64(fp)
    606c:	00800384 	movi	r2,14
    6070:	1400f736 	bltu	r2,r16,6450 <_dtoa_r+0x764>
    6074:	8800f626 	beq	r17,zero,6450 <_dtoa_r+0x764>
    6078:	d9c00517 	ldw	r7,20(sp)
    607c:	01c39a0e 	bge	zero,r7,6ee8 <_dtoa_r+0x11fc>
    6080:	388003cc 	andi	r2,r7,15
    6084:	100490fa 	slli	r2,r2,3
    6088:	382bd13a 	srai	r21,r7,4
    608c:	00c00074 	movhi	r3,1
    6090:	18c8fc04 	addi	r3,r3,9200
    6094:	1885883a 	add	r2,r3,r2
    6098:	a8c0040c 	andi	r3,r21,16
    609c:	12400017 	ldw	r9,0(r2)
    60a0:	12000117 	ldw	r8,4(r2)
    60a4:	18037926 	beq	r3,zero,6e8c <_dtoa_r+0x11a0>
    60a8:	00800074 	movhi	r2,1
    60ac:	1088f204 	addi	r2,r2,9160
    60b0:	11800817 	ldw	r6,32(r2)
    60b4:	11c00917 	ldw	r7,36(r2)
    60b8:	9009883a 	mov	r4,r18
    60bc:	980b883a 	mov	r5,r19
    60c0:	da001715 	stw	r8,92(sp)
    60c4:	da401615 	stw	r9,88(sp)
    60c8:	000d6400 	call	d640 <__divdf3>
    60cc:	da001717 	ldw	r8,92(sp)
    60d0:	da401617 	ldw	r9,88(sp)
    60d4:	ad4003cc 	andi	r21,r21,15
    60d8:	040000c4 	movi	r16,3
    60dc:	1023883a 	mov	r17,r2
    60e0:	1829883a 	mov	r20,r3
    60e4:	a8001126 	beq	r21,zero,612c <_dtoa_r+0x440>
    60e8:	05c00074 	movhi	r23,1
    60ec:	bdc8f204 	addi	r23,r23,9160
    60f0:	4805883a 	mov	r2,r9
    60f4:	4007883a 	mov	r3,r8
    60f8:	a980004c 	andi	r6,r21,1
    60fc:	1009883a 	mov	r4,r2
    6100:	a82bd07a 	srai	r21,r21,1
    6104:	180b883a 	mov	r5,r3
    6108:	30000426 	beq	r6,zero,611c <_dtoa_r+0x430>
    610c:	b9800017 	ldw	r6,0(r23)
    6110:	b9c00117 	ldw	r7,4(r23)
    6114:	84000044 	addi	r16,r16,1
    6118:	000e1800 	call	e180 <__muldf3>
    611c:	bdc00204 	addi	r23,r23,8
    6120:	a83ff51e 	bne	r21,zero,60f8 <__alt_data_end+0xff0060f8>
    6124:	1013883a 	mov	r9,r2
    6128:	1811883a 	mov	r8,r3
    612c:	480d883a 	mov	r6,r9
    6130:	400f883a 	mov	r7,r8
    6134:	8809883a 	mov	r4,r17
    6138:	a00b883a 	mov	r5,r20
    613c:	000d6400 	call	d640 <__divdf3>
    6140:	d8800f15 	stw	r2,60(sp)
    6144:	d8c01015 	stw	r3,64(sp)
    6148:	d8c00e17 	ldw	r3,56(sp)
    614c:	18000626 	beq	r3,zero,6168 <_dtoa_r+0x47c>
    6150:	d9000f17 	ldw	r4,60(sp)
    6154:	d9401017 	ldw	r5,64(sp)
    6158:	000d883a 	mov	r6,zero
    615c:	01cffc34 	movhi	r7,16368
    6160:	000e08c0 	call	e08c <__ledf2>
    6164:	10040b16 	blt	r2,zero,7194 <_dtoa_r+0x14a8>
    6168:	8009883a 	mov	r4,r16
    616c:	000f2140 	call	f214 <__floatsidf>
    6170:	d9800f17 	ldw	r6,60(sp)
    6174:	d9c01017 	ldw	r7,64(sp)
    6178:	1009883a 	mov	r4,r2
    617c:	180b883a 	mov	r5,r3
    6180:	000e1800 	call	e180 <__muldf3>
    6184:	000d883a 	mov	r6,zero
    6188:	01d00734 	movhi	r7,16412
    618c:	1009883a 	mov	r4,r2
    6190:	180b883a 	mov	r5,r3
    6194:	000cd940 	call	cd94 <__adddf3>
    6198:	1021883a 	mov	r16,r2
    619c:	d8800617 	ldw	r2,24(sp)
    61a0:	047f3034 	movhi	r17,64704
    61a4:	1c63883a 	add	r17,r3,r17
    61a8:	10031826 	beq	r2,zero,6e0c <_dtoa_r+0x1120>
    61ac:	d8c00517 	ldw	r3,20(sp)
    61b0:	db000617 	ldw	r12,24(sp)
    61b4:	d8c01315 	stw	r3,76(sp)
    61b8:	d9000b17 	ldw	r4,44(sp)
    61bc:	20038f26 	beq	r4,zero,6ffc <_dtoa_r+0x1310>
    61c0:	60bfffc4 	addi	r2,r12,-1
    61c4:	100490fa 	slli	r2,r2,3
    61c8:	00c00074 	movhi	r3,1
    61cc:	18c8fc04 	addi	r3,r3,9200
    61d0:	1885883a 	add	r2,r3,r2
    61d4:	11800017 	ldw	r6,0(r2)
    61d8:	11c00117 	ldw	r7,4(r2)
    61dc:	d8800717 	ldw	r2,28(sp)
    61e0:	0009883a 	mov	r4,zero
    61e4:	014ff834 	movhi	r5,16352
    61e8:	db001615 	stw	r12,88(sp)
    61ec:	15c00044 	addi	r23,r2,1
    61f0:	000d6400 	call	d640 <__divdf3>
    61f4:	800d883a 	mov	r6,r16
    61f8:	880f883a 	mov	r7,r17
    61fc:	1009883a 	mov	r4,r2
    6200:	180b883a 	mov	r5,r3
    6204:	000e8980 	call	e898 <__subdf3>
    6208:	d9401017 	ldw	r5,64(sp)
    620c:	d9000f17 	ldw	r4,60(sp)
    6210:	102b883a 	mov	r21,r2
    6214:	d8c01215 	stw	r3,72(sp)
    6218:	000f1940 	call	f194 <__fixdfsi>
    621c:	1009883a 	mov	r4,r2
    6220:	1029883a 	mov	r20,r2
    6224:	000f2140 	call	f214 <__floatsidf>
    6228:	d9000f17 	ldw	r4,60(sp)
    622c:	d9401017 	ldw	r5,64(sp)
    6230:	100d883a 	mov	r6,r2
    6234:	180f883a 	mov	r7,r3
    6238:	000e8980 	call	e898 <__subdf3>
    623c:	1823883a 	mov	r17,r3
    6240:	d8c00717 	ldw	r3,28(sp)
    6244:	d9401217 	ldw	r5,72(sp)
    6248:	a2000c04 	addi	r8,r20,48
    624c:	1021883a 	mov	r16,r2
    6250:	1a000005 	stb	r8,0(r3)
    6254:	800d883a 	mov	r6,r16
    6258:	880f883a 	mov	r7,r17
    625c:	a809883a 	mov	r4,r21
    6260:	4029883a 	mov	r20,r8
    6264:	000dfb00 	call	dfb0 <__gedf2>
    6268:	00841d16 	blt	zero,r2,72e0 <_dtoa_r+0x15f4>
    626c:	800d883a 	mov	r6,r16
    6270:	880f883a 	mov	r7,r17
    6274:	0009883a 	mov	r4,zero
    6278:	014ffc34 	movhi	r5,16368
    627c:	000e8980 	call	e898 <__subdf3>
    6280:	d9401217 	ldw	r5,72(sp)
    6284:	100d883a 	mov	r6,r2
    6288:	180f883a 	mov	r7,r3
    628c:	a809883a 	mov	r4,r21
    6290:	000dfb00 	call	dfb0 <__gedf2>
    6294:	db001617 	ldw	r12,88(sp)
    6298:	00840e16 	blt	zero,r2,72d4 <_dtoa_r+0x15e8>
    629c:	00800044 	movi	r2,1
    62a0:	13006b0e 	bge	r2,r12,6450 <_dtoa_r+0x764>
    62a4:	d9000717 	ldw	r4,28(sp)
    62a8:	dd800f15 	stw	r22,60(sp)
    62ac:	dcc01015 	stw	r19,64(sp)
    62b0:	2319883a 	add	r12,r4,r12
    62b4:	dcc01217 	ldw	r19,72(sp)
    62b8:	602d883a 	mov	r22,r12
    62bc:	dc801215 	stw	r18,72(sp)
    62c0:	b825883a 	mov	r18,r23
    62c4:	00000906 	br	62ec <_dtoa_r+0x600>
    62c8:	000e8980 	call	e898 <__subdf3>
    62cc:	a80d883a 	mov	r6,r21
    62d0:	980f883a 	mov	r7,r19
    62d4:	1009883a 	mov	r4,r2
    62d8:	180b883a 	mov	r5,r3
    62dc:	000e08c0 	call	e08c <__ledf2>
    62e0:	1003e816 	blt	r2,zero,7284 <_dtoa_r+0x1598>
    62e4:	b825883a 	mov	r18,r23
    62e8:	bd83e926 	beq	r23,r22,7290 <_dtoa_r+0x15a4>
    62ec:	a809883a 	mov	r4,r21
    62f0:	980b883a 	mov	r5,r19
    62f4:	000d883a 	mov	r6,zero
    62f8:	01d00934 	movhi	r7,16420
    62fc:	000e1800 	call	e180 <__muldf3>
    6300:	000d883a 	mov	r6,zero
    6304:	01d00934 	movhi	r7,16420
    6308:	8009883a 	mov	r4,r16
    630c:	880b883a 	mov	r5,r17
    6310:	102b883a 	mov	r21,r2
    6314:	1827883a 	mov	r19,r3
    6318:	000e1800 	call	e180 <__muldf3>
    631c:	180b883a 	mov	r5,r3
    6320:	1009883a 	mov	r4,r2
    6324:	1821883a 	mov	r16,r3
    6328:	1023883a 	mov	r17,r2
    632c:	000f1940 	call	f194 <__fixdfsi>
    6330:	1009883a 	mov	r4,r2
    6334:	1029883a 	mov	r20,r2
    6338:	000f2140 	call	f214 <__floatsidf>
    633c:	8809883a 	mov	r4,r17
    6340:	800b883a 	mov	r5,r16
    6344:	100d883a 	mov	r6,r2
    6348:	180f883a 	mov	r7,r3
    634c:	000e8980 	call	e898 <__subdf3>
    6350:	a5000c04 	addi	r20,r20,48
    6354:	a80d883a 	mov	r6,r21
    6358:	980f883a 	mov	r7,r19
    635c:	1009883a 	mov	r4,r2
    6360:	180b883a 	mov	r5,r3
    6364:	95000005 	stb	r20,0(r18)
    6368:	1021883a 	mov	r16,r2
    636c:	1823883a 	mov	r17,r3
    6370:	000e08c0 	call	e08c <__ledf2>
    6374:	bdc00044 	addi	r23,r23,1
    6378:	800d883a 	mov	r6,r16
    637c:	880f883a 	mov	r7,r17
    6380:	0009883a 	mov	r4,zero
    6384:	014ffc34 	movhi	r5,16368
    6388:	103fcf0e 	bge	r2,zero,62c8 <__alt_data_end+0xff0062c8>
    638c:	d8c01317 	ldw	r3,76(sp)
    6390:	d8c00515 	stw	r3,20(sp)
    6394:	d9400917 	ldw	r5,36(sp)
    6398:	e009883a 	mov	r4,fp
    639c:	0008c240 	call	8c24 <_Bfree>
    63a0:	d9000517 	ldw	r4,20(sp)
    63a4:	d9802317 	ldw	r6,140(sp)
    63a8:	d9c02517 	ldw	r7,148(sp)
    63ac:	b8000005 	stb	zero,0(r23)
    63b0:	20800044 	addi	r2,r4,1
    63b4:	30800015 	stw	r2,0(r6)
    63b8:	3802aa26 	beq	r7,zero,6e64 <_dtoa_r+0x1178>
    63bc:	3dc00015 	stw	r23,0(r7)
    63c0:	d8800717 	ldw	r2,28(sp)
    63c4:	003e7906 	br	5dac <__alt_data_end+0xff005dac>
    63c8:	00800434 	movhi	r2,16
    63cc:	10bfffc4 	addi	r2,r2,-1
    63d0:	88a2703a 	and	r17,r17,r2
    63d4:	883e851e 	bne	r17,zero,5dec <__alt_data_end+0xff005dec>
    63d8:	00800074 	movhi	r2,1
    63dc:	1088dd04 	addi	r2,r2,9076
    63e0:	003e8406 	br	5df4 <__alt_data_end+0xff005df4>
    63e4:	10c00204 	addi	r3,r2,8
    63e8:	003e8706 	br	5e08 <__alt_data_end+0xff005e08>
    63ec:	01400434 	movhi	r5,16
    63f0:	297fffc4 	addi	r5,r5,-1
    63f4:	994a703a 	and	r5,r19,r5
    63f8:	9009883a 	mov	r4,r18
    63fc:	843f0044 	addi	r16,r16,-1023
    6400:	294ffc34 	orhi	r5,r5,16368
    6404:	dd800217 	ldw	r22,8(sp)
    6408:	d8001115 	stw	zero,68(sp)
    640c:	003ea506 	br	5ea4 <__alt_data_end+0xff005ea4>
    6410:	00800074 	movhi	r2,1
    6414:	1088d404 	addi	r2,r2,9040
    6418:	003e6406 	br	5dac <__alt_data_end+0xff005dac>
    641c:	e0001115 	stw	zero,68(fp)
    6420:	000b883a 	mov	r5,zero
    6424:	e009883a 	mov	r4,fp
    6428:	0008b7c0 	call	8b7c <_Balloc>
    642c:	01bfffc4 	movi	r6,-1
    6430:	01c00044 	movi	r7,1
    6434:	d8800715 	stw	r2,28(sp)
    6438:	d9800c15 	stw	r6,48(sp)
    643c:	e0801015 	stw	r2,64(fp)
    6440:	d8000315 	stw	zero,12(sp)
    6444:	d9c00b15 	stw	r7,44(sp)
    6448:	d9800615 	stw	r6,24(sp)
    644c:	d8002215 	stw	zero,136(sp)
    6450:	d8800117 	ldw	r2,4(sp)
    6454:	10008916 	blt	r2,zero,667c <_dtoa_r+0x990>
    6458:	d9000517 	ldw	r4,20(sp)
    645c:	00c00384 	movi	r3,14
    6460:	19008616 	blt	r3,r4,667c <_dtoa_r+0x990>
    6464:	200490fa 	slli	r2,r4,3
    6468:	00c00074 	movhi	r3,1
    646c:	d9802217 	ldw	r6,136(sp)
    6470:	18c8fc04 	addi	r3,r3,9200
    6474:	1885883a 	add	r2,r3,r2
    6478:	14000017 	ldw	r16,0(r2)
    647c:	14400117 	ldw	r17,4(r2)
    6480:	30016316 	blt	r6,zero,6a10 <_dtoa_r+0xd24>
    6484:	800d883a 	mov	r6,r16
    6488:	880f883a 	mov	r7,r17
    648c:	9009883a 	mov	r4,r18
    6490:	980b883a 	mov	r5,r19
    6494:	000d6400 	call	d640 <__divdf3>
    6498:	180b883a 	mov	r5,r3
    649c:	1009883a 	mov	r4,r2
    64a0:	000f1940 	call	f194 <__fixdfsi>
    64a4:	1009883a 	mov	r4,r2
    64a8:	102b883a 	mov	r21,r2
    64ac:	000f2140 	call	f214 <__floatsidf>
    64b0:	800d883a 	mov	r6,r16
    64b4:	880f883a 	mov	r7,r17
    64b8:	1009883a 	mov	r4,r2
    64bc:	180b883a 	mov	r5,r3
    64c0:	000e1800 	call	e180 <__muldf3>
    64c4:	100d883a 	mov	r6,r2
    64c8:	180f883a 	mov	r7,r3
    64cc:	9009883a 	mov	r4,r18
    64d0:	980b883a 	mov	r5,r19
    64d4:	000e8980 	call	e898 <__subdf3>
    64d8:	d9c00717 	ldw	r7,28(sp)
    64dc:	1009883a 	mov	r4,r2
    64e0:	a8800c04 	addi	r2,r21,48
    64e4:	38800005 	stb	r2,0(r7)
    64e8:	3dc00044 	addi	r23,r7,1
    64ec:	d9c00617 	ldw	r7,24(sp)
    64f0:	01800044 	movi	r6,1
    64f4:	180b883a 	mov	r5,r3
    64f8:	2005883a 	mov	r2,r4
    64fc:	39803826 	beq	r7,r6,65e0 <_dtoa_r+0x8f4>
    6500:	000d883a 	mov	r6,zero
    6504:	01d00934 	movhi	r7,16420
    6508:	000e1800 	call	e180 <__muldf3>
    650c:	000d883a 	mov	r6,zero
    6510:	000f883a 	mov	r7,zero
    6514:	1009883a 	mov	r4,r2
    6518:	180b883a 	mov	r5,r3
    651c:	1025883a 	mov	r18,r2
    6520:	1827883a 	mov	r19,r3
    6524:	000df280 	call	df28 <__eqdf2>
    6528:	103f9a26 	beq	r2,zero,6394 <__alt_data_end+0xff006394>
    652c:	d9c00617 	ldw	r7,24(sp)
    6530:	d8c00717 	ldw	r3,28(sp)
    6534:	b829883a 	mov	r20,r23
    6538:	38bfffc4 	addi	r2,r7,-1
    653c:	18ad883a 	add	r22,r3,r2
    6540:	00000a06 	br	656c <_dtoa_r+0x880>
    6544:	000e1800 	call	e180 <__muldf3>
    6548:	000d883a 	mov	r6,zero
    654c:	000f883a 	mov	r7,zero
    6550:	1009883a 	mov	r4,r2
    6554:	180b883a 	mov	r5,r3
    6558:	1025883a 	mov	r18,r2
    655c:	1827883a 	mov	r19,r3
    6560:	b829883a 	mov	r20,r23
    6564:	000df280 	call	df28 <__eqdf2>
    6568:	103f8a26 	beq	r2,zero,6394 <__alt_data_end+0xff006394>
    656c:	800d883a 	mov	r6,r16
    6570:	880f883a 	mov	r7,r17
    6574:	9009883a 	mov	r4,r18
    6578:	980b883a 	mov	r5,r19
    657c:	000d6400 	call	d640 <__divdf3>
    6580:	180b883a 	mov	r5,r3
    6584:	1009883a 	mov	r4,r2
    6588:	000f1940 	call	f194 <__fixdfsi>
    658c:	1009883a 	mov	r4,r2
    6590:	102b883a 	mov	r21,r2
    6594:	000f2140 	call	f214 <__floatsidf>
    6598:	800d883a 	mov	r6,r16
    659c:	880f883a 	mov	r7,r17
    65a0:	1009883a 	mov	r4,r2
    65a4:	180b883a 	mov	r5,r3
    65a8:	000e1800 	call	e180 <__muldf3>
    65ac:	100d883a 	mov	r6,r2
    65b0:	180f883a 	mov	r7,r3
    65b4:	9009883a 	mov	r4,r18
    65b8:	980b883a 	mov	r5,r19
    65bc:	000e8980 	call	e898 <__subdf3>
    65c0:	aa000c04 	addi	r8,r21,48
    65c4:	a2000005 	stb	r8,0(r20)
    65c8:	000d883a 	mov	r6,zero
    65cc:	01d00934 	movhi	r7,16420
    65d0:	1009883a 	mov	r4,r2
    65d4:	180b883a 	mov	r5,r3
    65d8:	a5c00044 	addi	r23,r20,1
    65dc:	b53fd91e 	bne	r22,r20,6544 <__alt_data_end+0xff006544>
    65e0:	100d883a 	mov	r6,r2
    65e4:	180f883a 	mov	r7,r3
    65e8:	1009883a 	mov	r4,r2
    65ec:	180b883a 	mov	r5,r3
    65f0:	000cd940 	call	cd94 <__adddf3>
    65f4:	100d883a 	mov	r6,r2
    65f8:	180f883a 	mov	r7,r3
    65fc:	8009883a 	mov	r4,r16
    6600:	880b883a 	mov	r5,r17
    6604:	1027883a 	mov	r19,r2
    6608:	1825883a 	mov	r18,r3
    660c:	000e08c0 	call	e08c <__ledf2>
    6610:	10000816 	blt	r2,zero,6634 <_dtoa_r+0x948>
    6614:	980d883a 	mov	r6,r19
    6618:	900f883a 	mov	r7,r18
    661c:	8009883a 	mov	r4,r16
    6620:	880b883a 	mov	r5,r17
    6624:	000df280 	call	df28 <__eqdf2>
    6628:	103f5a1e 	bne	r2,zero,6394 <__alt_data_end+0xff006394>
    662c:	ad40004c 	andi	r21,r21,1
    6630:	a83f5826 	beq	r21,zero,6394 <__alt_data_end+0xff006394>
    6634:	bd3fffc3 	ldbu	r20,-1(r23)
    6638:	b8bfffc4 	addi	r2,r23,-1
    663c:	1007883a 	mov	r3,r2
    6640:	01400e44 	movi	r5,57
    6644:	d9800717 	ldw	r6,28(sp)
    6648:	00000506 	br	6660 <_dtoa_r+0x974>
    664c:	18ffffc4 	addi	r3,r3,-1
    6650:	11824726 	beq	r2,r6,6f70 <_dtoa_r+0x1284>
    6654:	1d000003 	ldbu	r20,0(r3)
    6658:	102f883a 	mov	r23,r2
    665c:	10bfffc4 	addi	r2,r2,-1
    6660:	a1003fcc 	andi	r4,r20,255
    6664:	2100201c 	xori	r4,r4,128
    6668:	213fe004 	addi	r4,r4,-128
    666c:	217ff726 	beq	r4,r5,664c <__alt_data_end+0xff00664c>
    6670:	a2000044 	addi	r8,r20,1
    6674:	12000005 	stb	r8,0(r2)
    6678:	003f4606 	br	6394 <__alt_data_end+0xff006394>
    667c:	d9000b17 	ldw	r4,44(sp)
    6680:	2000c826 	beq	r4,zero,69a4 <_dtoa_r+0xcb8>
    6684:	d9800317 	ldw	r6,12(sp)
    6688:	00c00044 	movi	r3,1
    668c:	1980f90e 	bge	r3,r6,6a74 <_dtoa_r+0xd88>
    6690:	d8800617 	ldw	r2,24(sp)
    6694:	d8c00a17 	ldw	r3,40(sp)
    6698:	157fffc4 	addi	r21,r2,-1
    669c:	1d41f316 	blt	r3,r21,6e6c <_dtoa_r+0x1180>
    66a0:	1d6bc83a 	sub	r21,r3,r21
    66a4:	d9c00617 	ldw	r7,24(sp)
    66a8:	3802aa16 	blt	r7,zero,7154 <_dtoa_r+0x1468>
    66ac:	dd000817 	ldw	r20,32(sp)
    66b0:	d8800617 	ldw	r2,24(sp)
    66b4:	d8c00817 	ldw	r3,32(sp)
    66b8:	01400044 	movi	r5,1
    66bc:	e009883a 	mov	r4,fp
    66c0:	1887883a 	add	r3,r3,r2
    66c4:	d8c00815 	stw	r3,32(sp)
    66c8:	b0ad883a 	add	r22,r22,r2
    66cc:	0008f880 	call	8f88 <__i2b>
    66d0:	1023883a 	mov	r17,r2
    66d4:	a0000826 	beq	r20,zero,66f8 <_dtoa_r+0xa0c>
    66d8:	0580070e 	bge	zero,r22,66f8 <_dtoa_r+0xa0c>
    66dc:	a005883a 	mov	r2,r20
    66e0:	b500b916 	blt	r22,r20,69c8 <_dtoa_r+0xcdc>
    66e4:	d9000817 	ldw	r4,32(sp)
    66e8:	a0a9c83a 	sub	r20,r20,r2
    66ec:	b0adc83a 	sub	r22,r22,r2
    66f0:	2089c83a 	sub	r4,r4,r2
    66f4:	d9000815 	stw	r4,32(sp)
    66f8:	d9800a17 	ldw	r6,40(sp)
    66fc:	0181810e 	bge	zero,r6,6d04 <_dtoa_r+0x1018>
    6700:	d9c00b17 	ldw	r7,44(sp)
    6704:	3800b326 	beq	r7,zero,69d4 <_dtoa_r+0xce8>
    6708:	a800b226 	beq	r21,zero,69d4 <_dtoa_r+0xce8>
    670c:	880b883a 	mov	r5,r17
    6710:	a80d883a 	mov	r6,r21
    6714:	e009883a 	mov	r4,fp
    6718:	00091bc0 	call	91bc <__pow5mult>
    671c:	d9800917 	ldw	r6,36(sp)
    6720:	100b883a 	mov	r5,r2
    6724:	e009883a 	mov	r4,fp
    6728:	1023883a 	mov	r17,r2
    672c:	0008fc40 	call	8fc4 <__multiply>
    6730:	1021883a 	mov	r16,r2
    6734:	d8800a17 	ldw	r2,40(sp)
    6738:	d9400917 	ldw	r5,36(sp)
    673c:	e009883a 	mov	r4,fp
    6740:	1545c83a 	sub	r2,r2,r21
    6744:	d8800a15 	stw	r2,40(sp)
    6748:	0008c240 	call	8c24 <_Bfree>
    674c:	d8c00a17 	ldw	r3,40(sp)
    6750:	18009f1e 	bne	r3,zero,69d0 <_dtoa_r+0xce4>
    6754:	05c00044 	movi	r23,1
    6758:	e009883a 	mov	r4,fp
    675c:	b80b883a 	mov	r5,r23
    6760:	0008f880 	call	8f88 <__i2b>
    6764:	d9000d17 	ldw	r4,52(sp)
    6768:	102b883a 	mov	r21,r2
    676c:	2000ce26 	beq	r4,zero,6aa8 <_dtoa_r+0xdbc>
    6770:	200d883a 	mov	r6,r4
    6774:	100b883a 	mov	r5,r2
    6778:	e009883a 	mov	r4,fp
    677c:	00091bc0 	call	91bc <__pow5mult>
    6780:	d9800317 	ldw	r6,12(sp)
    6784:	102b883a 	mov	r21,r2
    6788:	b981810e 	bge	r23,r6,6d90 <_dtoa_r+0x10a4>
    678c:	0027883a 	mov	r19,zero
    6790:	a8800417 	ldw	r2,16(r21)
    6794:	05c00804 	movi	r23,32
    6798:	10800104 	addi	r2,r2,4
    679c:	1085883a 	add	r2,r2,r2
    67a0:	1085883a 	add	r2,r2,r2
    67a4:	a885883a 	add	r2,r21,r2
    67a8:	11000017 	ldw	r4,0(r2)
    67ac:	0008e700 	call	8e70 <__hi0bits>
    67b0:	b885c83a 	sub	r2,r23,r2
    67b4:	1585883a 	add	r2,r2,r22
    67b8:	108007cc 	andi	r2,r2,31
    67bc:	1000b326 	beq	r2,zero,6a8c <_dtoa_r+0xda0>
    67c0:	00c00804 	movi	r3,32
    67c4:	1887c83a 	sub	r3,r3,r2
    67c8:	01000104 	movi	r4,4
    67cc:	20c2cd0e 	bge	r4,r3,7304 <_dtoa_r+0x1618>
    67d0:	00c00704 	movi	r3,28
    67d4:	1885c83a 	sub	r2,r3,r2
    67d8:	d8c00817 	ldw	r3,32(sp)
    67dc:	a0a9883a 	add	r20,r20,r2
    67e0:	b0ad883a 	add	r22,r22,r2
    67e4:	1887883a 	add	r3,r3,r2
    67e8:	d8c00815 	stw	r3,32(sp)
    67ec:	d9800817 	ldw	r6,32(sp)
    67f0:	0180040e 	bge	zero,r6,6804 <_dtoa_r+0xb18>
    67f4:	800b883a 	mov	r5,r16
    67f8:	e009883a 	mov	r4,fp
    67fc:	00092fc0 	call	92fc <__lshift>
    6800:	1021883a 	mov	r16,r2
    6804:	0580050e 	bge	zero,r22,681c <_dtoa_r+0xb30>
    6808:	a80b883a 	mov	r5,r21
    680c:	b00d883a 	mov	r6,r22
    6810:	e009883a 	mov	r4,fp
    6814:	00092fc0 	call	92fc <__lshift>
    6818:	102b883a 	mov	r21,r2
    681c:	d9c00e17 	ldw	r7,56(sp)
    6820:	3801211e 	bne	r7,zero,6ca8 <_dtoa_r+0xfbc>
    6824:	d9800617 	ldw	r6,24(sp)
    6828:	0181380e 	bge	zero,r6,6d0c <_dtoa_r+0x1020>
    682c:	d8c00b17 	ldw	r3,44(sp)
    6830:	1800ab1e 	bne	r3,zero,6ae0 <_dtoa_r+0xdf4>
    6834:	dc800717 	ldw	r18,28(sp)
    6838:	dcc00617 	ldw	r19,24(sp)
    683c:	9029883a 	mov	r20,r18
    6840:	00000206 	br	684c <_dtoa_r+0xb60>
    6844:	0008c4c0 	call	8c4c <__multadd>
    6848:	1021883a 	mov	r16,r2
    684c:	a80b883a 	mov	r5,r21
    6850:	8009883a 	mov	r4,r16
    6854:	0005aec0 	call	5aec <quorem>
    6858:	10800c04 	addi	r2,r2,48
    685c:	90800005 	stb	r2,0(r18)
    6860:	94800044 	addi	r18,r18,1
    6864:	9507c83a 	sub	r3,r18,r20
    6868:	000f883a 	mov	r7,zero
    686c:	01800284 	movi	r6,10
    6870:	800b883a 	mov	r5,r16
    6874:	e009883a 	mov	r4,fp
    6878:	1cfff216 	blt	r3,r19,6844 <__alt_data_end+0xff006844>
    687c:	1011883a 	mov	r8,r2
    6880:	d8800617 	ldw	r2,24(sp)
    6884:	0082370e 	bge	zero,r2,7164 <_dtoa_r+0x1478>
    6888:	d9000717 	ldw	r4,28(sp)
    688c:	0025883a 	mov	r18,zero
    6890:	20af883a 	add	r23,r4,r2
    6894:	01800044 	movi	r6,1
    6898:	800b883a 	mov	r5,r16
    689c:	e009883a 	mov	r4,fp
    68a0:	da001715 	stw	r8,92(sp)
    68a4:	00092fc0 	call	92fc <__lshift>
    68a8:	a80b883a 	mov	r5,r21
    68ac:	1009883a 	mov	r4,r2
    68b0:	d8800915 	stw	r2,36(sp)
    68b4:	00094440 	call	9444 <__mcmp>
    68b8:	da001717 	ldw	r8,92(sp)
    68bc:	0081800e 	bge	zero,r2,6ec0 <_dtoa_r+0x11d4>
    68c0:	b93fffc3 	ldbu	r4,-1(r23)
    68c4:	b8bfffc4 	addi	r2,r23,-1
    68c8:	1007883a 	mov	r3,r2
    68cc:	01800e44 	movi	r6,57
    68d0:	d9c00717 	ldw	r7,28(sp)
    68d4:	00000506 	br	68ec <_dtoa_r+0xc00>
    68d8:	18ffffc4 	addi	r3,r3,-1
    68dc:	11c12326 	beq	r2,r7,6d6c <_dtoa_r+0x1080>
    68e0:	19000003 	ldbu	r4,0(r3)
    68e4:	102f883a 	mov	r23,r2
    68e8:	10bfffc4 	addi	r2,r2,-1
    68ec:	21403fcc 	andi	r5,r4,255
    68f0:	2940201c 	xori	r5,r5,128
    68f4:	297fe004 	addi	r5,r5,-128
    68f8:	29bff726 	beq	r5,r6,68d8 <__alt_data_end+0xff0068d8>
    68fc:	21000044 	addi	r4,r4,1
    6900:	11000005 	stb	r4,0(r2)
    6904:	a80b883a 	mov	r5,r21
    6908:	e009883a 	mov	r4,fp
    690c:	0008c240 	call	8c24 <_Bfree>
    6910:	883ea026 	beq	r17,zero,6394 <__alt_data_end+0xff006394>
    6914:	90000426 	beq	r18,zero,6928 <_dtoa_r+0xc3c>
    6918:	94400326 	beq	r18,r17,6928 <_dtoa_r+0xc3c>
    691c:	900b883a 	mov	r5,r18
    6920:	e009883a 	mov	r4,fp
    6924:	0008c240 	call	8c24 <_Bfree>
    6928:	880b883a 	mov	r5,r17
    692c:	e009883a 	mov	r4,fp
    6930:	0008c240 	call	8c24 <_Bfree>
    6934:	003e9706 	br	6394 <__alt_data_end+0xff006394>
    6938:	01800044 	movi	r6,1
    693c:	d9800e15 	stw	r6,56(sp)
    6940:	003d9606 	br	5f9c <__alt_data_end+0xff005f9c>
    6944:	d8800817 	ldw	r2,32(sp)
    6948:	d8c00517 	ldw	r3,20(sp)
    694c:	d8000d15 	stw	zero,52(sp)
    6950:	10c5c83a 	sub	r2,r2,r3
    6954:	00c9c83a 	sub	r4,zero,r3
    6958:	d8800815 	stw	r2,32(sp)
    695c:	d9000a15 	stw	r4,40(sp)
    6960:	003d9706 	br	5fc0 <__alt_data_end+0xff005fc0>
    6964:	05adc83a 	sub	r22,zero,r22
    6968:	dd800815 	stw	r22,32(sp)
    696c:	002d883a 	mov	r22,zero
    6970:	003d8e06 	br	5fac <__alt_data_end+0xff005fac>
    6974:	d9000517 	ldw	r4,20(sp)
    6978:	000f2140 	call	f214 <__floatsidf>
    697c:	100d883a 	mov	r6,r2
    6980:	180f883a 	mov	r7,r3
    6984:	a009883a 	mov	r4,r20
    6988:	880b883a 	mov	r5,r17
    698c:	000df280 	call	df28 <__eqdf2>
    6990:	103d7126 	beq	r2,zero,5f58 <__alt_data_end+0xff005f58>
    6994:	d9c00517 	ldw	r7,20(sp)
    6998:	39ffffc4 	addi	r7,r7,-1
    699c:	d9c00515 	stw	r7,20(sp)
    69a0:	003d6d06 	br	5f58 <__alt_data_end+0xff005f58>
    69a4:	dd400a17 	ldw	r21,40(sp)
    69a8:	dd000817 	ldw	r20,32(sp)
    69ac:	0023883a 	mov	r17,zero
    69b0:	003f4806 	br	66d4 <__alt_data_end+0xff0066d4>
    69b4:	10e3c83a 	sub	r17,r2,r3
    69b8:	9448983a 	sll	r4,r18,r17
    69bc:	003d3206 	br	5e88 <__alt_data_end+0xff005e88>
    69c0:	d8000e15 	stw	zero,56(sp)
    69c4:	003d7506 	br	5f9c <__alt_data_end+0xff005f9c>
    69c8:	b005883a 	mov	r2,r22
    69cc:	003f4506 	br	66e4 <__alt_data_end+0xff0066e4>
    69d0:	dc000915 	stw	r16,36(sp)
    69d4:	d9800a17 	ldw	r6,40(sp)
    69d8:	d9400917 	ldw	r5,36(sp)
    69dc:	e009883a 	mov	r4,fp
    69e0:	00091bc0 	call	91bc <__pow5mult>
    69e4:	1021883a 	mov	r16,r2
    69e8:	003f5a06 	br	6754 <__alt_data_end+0xff006754>
    69ec:	01c00044 	movi	r7,1
    69f0:	d9c00b15 	stw	r7,44(sp)
    69f4:	d8802217 	ldw	r2,136(sp)
    69f8:	0081280e 	bge	zero,r2,6e9c <_dtoa_r+0x11b0>
    69fc:	100d883a 	mov	r6,r2
    6a00:	1021883a 	mov	r16,r2
    6a04:	d8800c15 	stw	r2,48(sp)
    6a08:	d8800615 	stw	r2,24(sp)
    6a0c:	003d8806 	br	6030 <__alt_data_end+0xff006030>
    6a10:	d8800617 	ldw	r2,24(sp)
    6a14:	00be9b16 	blt	zero,r2,6484 <__alt_data_end+0xff006484>
    6a18:	10010f1e 	bne	r2,zero,6e58 <_dtoa_r+0x116c>
    6a1c:	880b883a 	mov	r5,r17
    6a20:	000d883a 	mov	r6,zero
    6a24:	01d00534 	movhi	r7,16404
    6a28:	8009883a 	mov	r4,r16
    6a2c:	000e1800 	call	e180 <__muldf3>
    6a30:	900d883a 	mov	r6,r18
    6a34:	980f883a 	mov	r7,r19
    6a38:	1009883a 	mov	r4,r2
    6a3c:	180b883a 	mov	r5,r3
    6a40:	000dfb00 	call	dfb0 <__gedf2>
    6a44:	002b883a 	mov	r21,zero
    6a48:	0023883a 	mov	r17,zero
    6a4c:	1000bf16 	blt	r2,zero,6d4c <_dtoa_r+0x1060>
    6a50:	d9802217 	ldw	r6,136(sp)
    6a54:	ddc00717 	ldw	r23,28(sp)
    6a58:	018c303a 	nor	r6,zero,r6
    6a5c:	d9800515 	stw	r6,20(sp)
    6a60:	a80b883a 	mov	r5,r21
    6a64:	e009883a 	mov	r4,fp
    6a68:	0008c240 	call	8c24 <_Bfree>
    6a6c:	883e4926 	beq	r17,zero,6394 <__alt_data_end+0xff006394>
    6a70:	003fad06 	br	6928 <__alt_data_end+0xff006928>
    6a74:	d9c01117 	ldw	r7,68(sp)
    6a78:	3801bc26 	beq	r7,zero,716c <_dtoa_r+0x1480>
    6a7c:	10810cc4 	addi	r2,r2,1075
    6a80:	dd400a17 	ldw	r21,40(sp)
    6a84:	dd000817 	ldw	r20,32(sp)
    6a88:	003f0a06 	br	66b4 <__alt_data_end+0xff0066b4>
    6a8c:	00800704 	movi	r2,28
    6a90:	d9000817 	ldw	r4,32(sp)
    6a94:	a0a9883a 	add	r20,r20,r2
    6a98:	b0ad883a 	add	r22,r22,r2
    6a9c:	2089883a 	add	r4,r4,r2
    6aa0:	d9000815 	stw	r4,32(sp)
    6aa4:	003f5106 	br	67ec <__alt_data_end+0xff0067ec>
    6aa8:	d8c00317 	ldw	r3,12(sp)
    6aac:	b8c1fc0e 	bge	r23,r3,72a0 <_dtoa_r+0x15b4>
    6ab0:	0027883a 	mov	r19,zero
    6ab4:	b805883a 	mov	r2,r23
    6ab8:	003f3e06 	br	67b4 <__alt_data_end+0xff0067b4>
    6abc:	880b883a 	mov	r5,r17
    6ac0:	e009883a 	mov	r4,fp
    6ac4:	000f883a 	mov	r7,zero
    6ac8:	01800284 	movi	r6,10
    6acc:	0008c4c0 	call	8c4c <__multadd>
    6ad0:	d9000c17 	ldw	r4,48(sp)
    6ad4:	1023883a 	mov	r17,r2
    6ad8:	0102040e 	bge	zero,r4,72ec <_dtoa_r+0x1600>
    6adc:	d9000615 	stw	r4,24(sp)
    6ae0:	0500050e 	bge	zero,r20,6af8 <_dtoa_r+0xe0c>
    6ae4:	880b883a 	mov	r5,r17
    6ae8:	a00d883a 	mov	r6,r20
    6aec:	e009883a 	mov	r4,fp
    6af0:	00092fc0 	call	92fc <__lshift>
    6af4:	1023883a 	mov	r17,r2
    6af8:	9801241e 	bne	r19,zero,6f8c <_dtoa_r+0x12a0>
    6afc:	8829883a 	mov	r20,r17
    6b00:	d9000617 	ldw	r4,24(sp)
    6b04:	dcc00717 	ldw	r19,28(sp)
    6b08:	9480004c 	andi	r18,r18,1
    6b0c:	20bfffc4 	addi	r2,r4,-1
    6b10:	9885883a 	add	r2,r19,r2
    6b14:	d8800415 	stw	r2,16(sp)
    6b18:	dc800615 	stw	r18,24(sp)
    6b1c:	a80b883a 	mov	r5,r21
    6b20:	8009883a 	mov	r4,r16
    6b24:	0005aec0 	call	5aec <quorem>
    6b28:	880b883a 	mov	r5,r17
    6b2c:	8009883a 	mov	r4,r16
    6b30:	102f883a 	mov	r23,r2
    6b34:	00094440 	call	9444 <__mcmp>
    6b38:	a80b883a 	mov	r5,r21
    6b3c:	a00d883a 	mov	r6,r20
    6b40:	e009883a 	mov	r4,fp
    6b44:	102d883a 	mov	r22,r2
    6b48:	00094a40 	call	94a4 <__mdiff>
    6b4c:	1007883a 	mov	r3,r2
    6b50:	10800317 	ldw	r2,12(r2)
    6b54:	bc800c04 	addi	r18,r23,48
    6b58:	180b883a 	mov	r5,r3
    6b5c:	10004e1e 	bne	r2,zero,6c98 <_dtoa_r+0xfac>
    6b60:	8009883a 	mov	r4,r16
    6b64:	d8c01615 	stw	r3,88(sp)
    6b68:	00094440 	call	9444 <__mcmp>
    6b6c:	d8c01617 	ldw	r3,88(sp)
    6b70:	e009883a 	mov	r4,fp
    6b74:	d8801615 	stw	r2,88(sp)
    6b78:	180b883a 	mov	r5,r3
    6b7c:	0008c240 	call	8c24 <_Bfree>
    6b80:	d8801617 	ldw	r2,88(sp)
    6b84:	1000041e 	bne	r2,zero,6b98 <_dtoa_r+0xeac>
    6b88:	d9800317 	ldw	r6,12(sp)
    6b8c:	3000021e 	bne	r6,zero,6b98 <_dtoa_r+0xeac>
    6b90:	d8c00617 	ldw	r3,24(sp)
    6b94:	18003726 	beq	r3,zero,6c74 <_dtoa_r+0xf88>
    6b98:	b0002016 	blt	r22,zero,6c1c <_dtoa_r+0xf30>
    6b9c:	b000041e 	bne	r22,zero,6bb0 <_dtoa_r+0xec4>
    6ba0:	d9000317 	ldw	r4,12(sp)
    6ba4:	2000021e 	bne	r4,zero,6bb0 <_dtoa_r+0xec4>
    6ba8:	d8c00617 	ldw	r3,24(sp)
    6bac:	18001b26 	beq	r3,zero,6c1c <_dtoa_r+0xf30>
    6bb0:	00810716 	blt	zero,r2,6fd0 <_dtoa_r+0x12e4>
    6bb4:	d8c00417 	ldw	r3,16(sp)
    6bb8:	9d800044 	addi	r22,r19,1
    6bbc:	9c800005 	stb	r18,0(r19)
    6bc0:	b02f883a 	mov	r23,r22
    6bc4:	98c10626 	beq	r19,r3,6fe0 <_dtoa_r+0x12f4>
    6bc8:	800b883a 	mov	r5,r16
    6bcc:	000f883a 	mov	r7,zero
    6bd0:	01800284 	movi	r6,10
    6bd4:	e009883a 	mov	r4,fp
    6bd8:	0008c4c0 	call	8c4c <__multadd>
    6bdc:	1021883a 	mov	r16,r2
    6be0:	000f883a 	mov	r7,zero
    6be4:	01800284 	movi	r6,10
    6be8:	880b883a 	mov	r5,r17
    6bec:	e009883a 	mov	r4,fp
    6bf0:	8d002526 	beq	r17,r20,6c88 <_dtoa_r+0xf9c>
    6bf4:	0008c4c0 	call	8c4c <__multadd>
    6bf8:	a00b883a 	mov	r5,r20
    6bfc:	000f883a 	mov	r7,zero
    6c00:	01800284 	movi	r6,10
    6c04:	e009883a 	mov	r4,fp
    6c08:	1023883a 	mov	r17,r2
    6c0c:	0008c4c0 	call	8c4c <__multadd>
    6c10:	1029883a 	mov	r20,r2
    6c14:	b027883a 	mov	r19,r22
    6c18:	003fc006 	br	6b1c <__alt_data_end+0xff006b1c>
    6c1c:	9011883a 	mov	r8,r18
    6c20:	00800e0e 	bge	zero,r2,6c5c <_dtoa_r+0xf70>
    6c24:	800b883a 	mov	r5,r16
    6c28:	01800044 	movi	r6,1
    6c2c:	e009883a 	mov	r4,fp
    6c30:	da001715 	stw	r8,92(sp)
    6c34:	00092fc0 	call	92fc <__lshift>
    6c38:	a80b883a 	mov	r5,r21
    6c3c:	1009883a 	mov	r4,r2
    6c40:	1021883a 	mov	r16,r2
    6c44:	00094440 	call	9444 <__mcmp>
    6c48:	da001717 	ldw	r8,92(sp)
    6c4c:	0081960e 	bge	zero,r2,72a8 <_dtoa_r+0x15bc>
    6c50:	00800e44 	movi	r2,57
    6c54:	40817026 	beq	r8,r2,7218 <_dtoa_r+0x152c>
    6c58:	ba000c44 	addi	r8,r23,49
    6c5c:	8825883a 	mov	r18,r17
    6c60:	9dc00044 	addi	r23,r19,1
    6c64:	9a000005 	stb	r8,0(r19)
    6c68:	a023883a 	mov	r17,r20
    6c6c:	dc000915 	stw	r16,36(sp)
    6c70:	003f2406 	br	6904 <__alt_data_end+0xff006904>
    6c74:	00800e44 	movi	r2,57
    6c78:	9011883a 	mov	r8,r18
    6c7c:	90816626 	beq	r18,r2,7218 <_dtoa_r+0x152c>
    6c80:	05bff516 	blt	zero,r22,6c58 <__alt_data_end+0xff006c58>
    6c84:	003ff506 	br	6c5c <__alt_data_end+0xff006c5c>
    6c88:	0008c4c0 	call	8c4c <__multadd>
    6c8c:	1023883a 	mov	r17,r2
    6c90:	1029883a 	mov	r20,r2
    6c94:	003fdf06 	br	6c14 <__alt_data_end+0xff006c14>
    6c98:	e009883a 	mov	r4,fp
    6c9c:	0008c240 	call	8c24 <_Bfree>
    6ca0:	00800044 	movi	r2,1
    6ca4:	003fbc06 	br	6b98 <__alt_data_end+0xff006b98>
    6ca8:	a80b883a 	mov	r5,r21
    6cac:	8009883a 	mov	r4,r16
    6cb0:	00094440 	call	9444 <__mcmp>
    6cb4:	103edb0e 	bge	r2,zero,6824 <__alt_data_end+0xff006824>
    6cb8:	800b883a 	mov	r5,r16
    6cbc:	000f883a 	mov	r7,zero
    6cc0:	01800284 	movi	r6,10
    6cc4:	e009883a 	mov	r4,fp
    6cc8:	0008c4c0 	call	8c4c <__multadd>
    6ccc:	1021883a 	mov	r16,r2
    6cd0:	d8800517 	ldw	r2,20(sp)
    6cd4:	d8c00b17 	ldw	r3,44(sp)
    6cd8:	10bfffc4 	addi	r2,r2,-1
    6cdc:	d8800515 	stw	r2,20(sp)
    6ce0:	183f761e 	bne	r3,zero,6abc <__alt_data_end+0xff006abc>
    6ce4:	d9000c17 	ldw	r4,48(sp)
    6ce8:	0101730e 	bge	zero,r4,72b8 <_dtoa_r+0x15cc>
    6cec:	d9000615 	stw	r4,24(sp)
    6cf0:	003ed006 	br	6834 <__alt_data_end+0xff006834>
    6cf4:	00800084 	movi	r2,2
    6cf8:	3081861e 	bne	r6,r2,7314 <_dtoa_r+0x1628>
    6cfc:	d8000b15 	stw	zero,44(sp)
    6d00:	003f3c06 	br	69f4 <__alt_data_end+0xff0069f4>
    6d04:	dc000917 	ldw	r16,36(sp)
    6d08:	003e9206 	br	6754 <__alt_data_end+0xff006754>
    6d0c:	d9c00317 	ldw	r7,12(sp)
    6d10:	00800084 	movi	r2,2
    6d14:	11fec50e 	bge	r2,r7,682c <__alt_data_end+0xff00682c>
    6d18:	d9000617 	ldw	r4,24(sp)
    6d1c:	20013c1e 	bne	r4,zero,7210 <_dtoa_r+0x1524>
    6d20:	a80b883a 	mov	r5,r21
    6d24:	000f883a 	mov	r7,zero
    6d28:	01800144 	movi	r6,5
    6d2c:	e009883a 	mov	r4,fp
    6d30:	0008c4c0 	call	8c4c <__multadd>
    6d34:	100b883a 	mov	r5,r2
    6d38:	8009883a 	mov	r4,r16
    6d3c:	102b883a 	mov	r21,r2
    6d40:	00094440 	call	9444 <__mcmp>
    6d44:	dc000915 	stw	r16,36(sp)
    6d48:	00bf410e 	bge	zero,r2,6a50 <__alt_data_end+0xff006a50>
    6d4c:	d9c00717 	ldw	r7,28(sp)
    6d50:	00800c44 	movi	r2,49
    6d54:	38800005 	stb	r2,0(r7)
    6d58:	d8800517 	ldw	r2,20(sp)
    6d5c:	3dc00044 	addi	r23,r7,1
    6d60:	10800044 	addi	r2,r2,1
    6d64:	d8800515 	stw	r2,20(sp)
    6d68:	003f3d06 	br	6a60 <__alt_data_end+0xff006a60>
    6d6c:	d9800517 	ldw	r6,20(sp)
    6d70:	d9c00717 	ldw	r7,28(sp)
    6d74:	00800c44 	movi	r2,49
    6d78:	31800044 	addi	r6,r6,1
    6d7c:	d9800515 	stw	r6,20(sp)
    6d80:	38800005 	stb	r2,0(r7)
    6d84:	003edf06 	br	6904 <__alt_data_end+0xff006904>
    6d88:	d8000b15 	stw	zero,44(sp)
    6d8c:	003c9f06 	br	600c <__alt_data_end+0xff00600c>
    6d90:	903e7e1e 	bne	r18,zero,678c <__alt_data_end+0xff00678c>
    6d94:	00800434 	movhi	r2,16
    6d98:	10bfffc4 	addi	r2,r2,-1
    6d9c:	9884703a 	and	r2,r19,r2
    6da0:	1000ea1e 	bne	r2,zero,714c <_dtoa_r+0x1460>
    6da4:	9cdffc2c 	andhi	r19,r19,32752
    6da8:	9800e826 	beq	r19,zero,714c <_dtoa_r+0x1460>
    6dac:	d9c00817 	ldw	r7,32(sp)
    6db0:	b5800044 	addi	r22,r22,1
    6db4:	04c00044 	movi	r19,1
    6db8:	39c00044 	addi	r7,r7,1
    6dbc:	d9c00815 	stw	r7,32(sp)
    6dc0:	d8800d17 	ldw	r2,52(sp)
    6dc4:	103e721e 	bne	r2,zero,6790 <__alt_data_end+0xff006790>
    6dc8:	00800044 	movi	r2,1
    6dcc:	003e7906 	br	67b4 <__alt_data_end+0xff0067b4>
    6dd0:	8009883a 	mov	r4,r16
    6dd4:	000f2140 	call	f214 <__floatsidf>
    6dd8:	d9800f17 	ldw	r6,60(sp)
    6ddc:	d9c01017 	ldw	r7,64(sp)
    6de0:	1009883a 	mov	r4,r2
    6de4:	180b883a 	mov	r5,r3
    6de8:	000e1800 	call	e180 <__muldf3>
    6dec:	000d883a 	mov	r6,zero
    6df0:	01d00734 	movhi	r7,16412
    6df4:	1009883a 	mov	r4,r2
    6df8:	180b883a 	mov	r5,r3
    6dfc:	000cd940 	call	cd94 <__adddf3>
    6e00:	047f3034 	movhi	r17,64704
    6e04:	1021883a 	mov	r16,r2
    6e08:	1c63883a 	add	r17,r3,r17
    6e0c:	d9000f17 	ldw	r4,60(sp)
    6e10:	d9401017 	ldw	r5,64(sp)
    6e14:	000d883a 	mov	r6,zero
    6e18:	01d00534 	movhi	r7,16404
    6e1c:	000e8980 	call	e898 <__subdf3>
    6e20:	800d883a 	mov	r6,r16
    6e24:	880f883a 	mov	r7,r17
    6e28:	1009883a 	mov	r4,r2
    6e2c:	180b883a 	mov	r5,r3
    6e30:	102b883a 	mov	r21,r2
    6e34:	1829883a 	mov	r20,r3
    6e38:	000dfb00 	call	dfb0 <__gedf2>
    6e3c:	00806c16 	blt	zero,r2,6ff0 <_dtoa_r+0x1304>
    6e40:	89e0003c 	xorhi	r7,r17,32768
    6e44:	800d883a 	mov	r6,r16
    6e48:	a809883a 	mov	r4,r21
    6e4c:	a00b883a 	mov	r5,r20
    6e50:	000e08c0 	call	e08c <__ledf2>
    6e54:	103d7e0e 	bge	r2,zero,6450 <__alt_data_end+0xff006450>
    6e58:	002b883a 	mov	r21,zero
    6e5c:	0023883a 	mov	r17,zero
    6e60:	003efb06 	br	6a50 <__alt_data_end+0xff006a50>
    6e64:	d8800717 	ldw	r2,28(sp)
    6e68:	003bd006 	br	5dac <__alt_data_end+0xff005dac>
    6e6c:	d9000a17 	ldw	r4,40(sp)
    6e70:	d9800d17 	ldw	r6,52(sp)
    6e74:	dd400a15 	stw	r21,40(sp)
    6e78:	a905c83a 	sub	r2,r21,r4
    6e7c:	308d883a 	add	r6,r6,r2
    6e80:	d9800d15 	stw	r6,52(sp)
    6e84:	002b883a 	mov	r21,zero
    6e88:	003e0606 	br	66a4 <__alt_data_end+0xff0066a4>
    6e8c:	9023883a 	mov	r17,r18
    6e90:	9829883a 	mov	r20,r19
    6e94:	04000084 	movi	r16,2
    6e98:	003c9206 	br	60e4 <__alt_data_end+0xff0060e4>
    6e9c:	04000044 	movi	r16,1
    6ea0:	dc000c15 	stw	r16,48(sp)
    6ea4:	dc000615 	stw	r16,24(sp)
    6ea8:	dc002215 	stw	r16,136(sp)
    6eac:	e0001115 	stw	zero,68(fp)
    6eb0:	000b883a 	mov	r5,zero
    6eb4:	003c6906 	br	605c <__alt_data_end+0xff00605c>
    6eb8:	3021883a 	mov	r16,r6
    6ebc:	003ffb06 	br	6eac <__alt_data_end+0xff006eac>
    6ec0:	1000021e 	bne	r2,zero,6ecc <_dtoa_r+0x11e0>
    6ec4:	4200004c 	andi	r8,r8,1
    6ec8:	403e7d1e 	bne	r8,zero,68c0 <__alt_data_end+0xff0068c0>
    6ecc:	01000c04 	movi	r4,48
    6ed0:	00000106 	br	6ed8 <_dtoa_r+0x11ec>
    6ed4:	102f883a 	mov	r23,r2
    6ed8:	b8bfffc4 	addi	r2,r23,-1
    6edc:	10c00007 	ldb	r3,0(r2)
    6ee0:	193ffc26 	beq	r3,r4,6ed4 <__alt_data_end+0xff006ed4>
    6ee4:	003e8706 	br	6904 <__alt_data_end+0xff006904>
    6ee8:	d8800517 	ldw	r2,20(sp)
    6eec:	00a3c83a 	sub	r17,zero,r2
    6ef0:	8800a426 	beq	r17,zero,7184 <_dtoa_r+0x1498>
    6ef4:	888003cc 	andi	r2,r17,15
    6ef8:	100490fa 	slli	r2,r2,3
    6efc:	00c00074 	movhi	r3,1
    6f00:	18c8fc04 	addi	r3,r3,9200
    6f04:	1885883a 	add	r2,r3,r2
    6f08:	11800017 	ldw	r6,0(r2)
    6f0c:	11c00117 	ldw	r7,4(r2)
    6f10:	9009883a 	mov	r4,r18
    6f14:	980b883a 	mov	r5,r19
    6f18:	8823d13a 	srai	r17,r17,4
    6f1c:	000e1800 	call	e180 <__muldf3>
    6f20:	d8800f15 	stw	r2,60(sp)
    6f24:	d8c01015 	stw	r3,64(sp)
    6f28:	8800e826 	beq	r17,zero,72cc <_dtoa_r+0x15e0>
    6f2c:	05000074 	movhi	r20,1
    6f30:	a508f204 	addi	r20,r20,9160
    6f34:	04000084 	movi	r16,2
    6f38:	8980004c 	andi	r6,r17,1
    6f3c:	1009883a 	mov	r4,r2
    6f40:	8823d07a 	srai	r17,r17,1
    6f44:	180b883a 	mov	r5,r3
    6f48:	30000426 	beq	r6,zero,6f5c <_dtoa_r+0x1270>
    6f4c:	a1800017 	ldw	r6,0(r20)
    6f50:	a1c00117 	ldw	r7,4(r20)
    6f54:	84000044 	addi	r16,r16,1
    6f58:	000e1800 	call	e180 <__muldf3>
    6f5c:	a5000204 	addi	r20,r20,8
    6f60:	883ff51e 	bne	r17,zero,6f38 <__alt_data_end+0xff006f38>
    6f64:	d8800f15 	stw	r2,60(sp)
    6f68:	d8c01015 	stw	r3,64(sp)
    6f6c:	003c7606 	br	6148 <__alt_data_end+0xff006148>
    6f70:	00c00c04 	movi	r3,48
    6f74:	10c00005 	stb	r3,0(r2)
    6f78:	d8c00517 	ldw	r3,20(sp)
    6f7c:	bd3fffc3 	ldbu	r20,-1(r23)
    6f80:	18c00044 	addi	r3,r3,1
    6f84:	d8c00515 	stw	r3,20(sp)
    6f88:	003db906 	br	6670 <__alt_data_end+0xff006670>
    6f8c:	89400117 	ldw	r5,4(r17)
    6f90:	e009883a 	mov	r4,fp
    6f94:	0008b7c0 	call	8b7c <_Balloc>
    6f98:	89800417 	ldw	r6,16(r17)
    6f9c:	89400304 	addi	r5,r17,12
    6fa0:	11000304 	addi	r4,r2,12
    6fa4:	31800084 	addi	r6,r6,2
    6fa8:	318d883a 	add	r6,r6,r6
    6fac:	318d883a 	add	r6,r6,r6
    6fb0:	1027883a 	mov	r19,r2
    6fb4:	00087b00 	call	87b0 <memcpy>
    6fb8:	01800044 	movi	r6,1
    6fbc:	980b883a 	mov	r5,r19
    6fc0:	e009883a 	mov	r4,fp
    6fc4:	00092fc0 	call	92fc <__lshift>
    6fc8:	1029883a 	mov	r20,r2
    6fcc:	003ecc06 	br	6b00 <__alt_data_end+0xff006b00>
    6fd0:	00800e44 	movi	r2,57
    6fd4:	90809026 	beq	r18,r2,7218 <_dtoa_r+0x152c>
    6fd8:	92000044 	addi	r8,r18,1
    6fdc:	003f1f06 	br	6c5c <__alt_data_end+0xff006c5c>
    6fe0:	9011883a 	mov	r8,r18
    6fe4:	8825883a 	mov	r18,r17
    6fe8:	a023883a 	mov	r17,r20
    6fec:	003e2906 	br	6894 <__alt_data_end+0xff006894>
    6ff0:	002b883a 	mov	r21,zero
    6ff4:	0023883a 	mov	r17,zero
    6ff8:	003f5406 	br	6d4c <__alt_data_end+0xff006d4c>
    6ffc:	61bfffc4 	addi	r6,r12,-1
    7000:	300490fa 	slli	r2,r6,3
    7004:	00c00074 	movhi	r3,1
    7008:	18c8fc04 	addi	r3,r3,9200
    700c:	1885883a 	add	r2,r3,r2
    7010:	11000017 	ldw	r4,0(r2)
    7014:	11400117 	ldw	r5,4(r2)
    7018:	d8800717 	ldw	r2,28(sp)
    701c:	880f883a 	mov	r7,r17
    7020:	d9801215 	stw	r6,72(sp)
    7024:	800d883a 	mov	r6,r16
    7028:	db001615 	stw	r12,88(sp)
    702c:	15c00044 	addi	r23,r2,1
    7030:	000e1800 	call	e180 <__muldf3>
    7034:	d9401017 	ldw	r5,64(sp)
    7038:	d9000f17 	ldw	r4,60(sp)
    703c:	d8c01515 	stw	r3,84(sp)
    7040:	d8801415 	stw	r2,80(sp)
    7044:	000f1940 	call	f194 <__fixdfsi>
    7048:	1009883a 	mov	r4,r2
    704c:	1021883a 	mov	r16,r2
    7050:	000f2140 	call	f214 <__floatsidf>
    7054:	d9000f17 	ldw	r4,60(sp)
    7058:	d9401017 	ldw	r5,64(sp)
    705c:	100d883a 	mov	r6,r2
    7060:	180f883a 	mov	r7,r3
    7064:	000e8980 	call	e898 <__subdf3>
    7068:	1829883a 	mov	r20,r3
    706c:	d8c00717 	ldw	r3,28(sp)
    7070:	84000c04 	addi	r16,r16,48
    7074:	1023883a 	mov	r17,r2
    7078:	1c000005 	stb	r16,0(r3)
    707c:	db001617 	ldw	r12,88(sp)
    7080:	00800044 	movi	r2,1
    7084:	60802226 	beq	r12,r2,7110 <_dtoa_r+0x1424>
    7088:	d9c00717 	ldw	r7,28(sp)
    708c:	8805883a 	mov	r2,r17
    7090:	b82b883a 	mov	r21,r23
    7094:	3b19883a 	add	r12,r7,r12
    7098:	6023883a 	mov	r17,r12
    709c:	a007883a 	mov	r3,r20
    70a0:	dc800f15 	stw	r18,60(sp)
    70a4:	000d883a 	mov	r6,zero
    70a8:	01d00934 	movhi	r7,16420
    70ac:	1009883a 	mov	r4,r2
    70b0:	180b883a 	mov	r5,r3
    70b4:	000e1800 	call	e180 <__muldf3>
    70b8:	180b883a 	mov	r5,r3
    70bc:	1009883a 	mov	r4,r2
    70c0:	1829883a 	mov	r20,r3
    70c4:	1025883a 	mov	r18,r2
    70c8:	000f1940 	call	f194 <__fixdfsi>
    70cc:	1009883a 	mov	r4,r2
    70d0:	1021883a 	mov	r16,r2
    70d4:	000f2140 	call	f214 <__floatsidf>
    70d8:	100d883a 	mov	r6,r2
    70dc:	180f883a 	mov	r7,r3
    70e0:	9009883a 	mov	r4,r18
    70e4:	a00b883a 	mov	r5,r20
    70e8:	84000c04 	addi	r16,r16,48
    70ec:	000e8980 	call	e898 <__subdf3>
    70f0:	ad400044 	addi	r21,r21,1
    70f4:	ac3fffc5 	stb	r16,-1(r21)
    70f8:	ac7fea1e 	bne	r21,r17,70a4 <__alt_data_end+0xff0070a4>
    70fc:	1023883a 	mov	r17,r2
    7100:	d8801217 	ldw	r2,72(sp)
    7104:	dc800f17 	ldw	r18,60(sp)
    7108:	1829883a 	mov	r20,r3
    710c:	b8af883a 	add	r23,r23,r2
    7110:	d9001417 	ldw	r4,80(sp)
    7114:	d9401517 	ldw	r5,84(sp)
    7118:	000d883a 	mov	r6,zero
    711c:	01cff834 	movhi	r7,16352
    7120:	000cd940 	call	cd94 <__adddf3>
    7124:	880d883a 	mov	r6,r17
    7128:	a00f883a 	mov	r7,r20
    712c:	1009883a 	mov	r4,r2
    7130:	180b883a 	mov	r5,r3
    7134:	000e08c0 	call	e08c <__ledf2>
    7138:	10003e0e 	bge	r2,zero,7234 <_dtoa_r+0x1548>
    713c:	d9001317 	ldw	r4,76(sp)
    7140:	bd3fffc3 	ldbu	r20,-1(r23)
    7144:	d9000515 	stw	r4,20(sp)
    7148:	003d3b06 	br	6638 <__alt_data_end+0xff006638>
    714c:	0027883a 	mov	r19,zero
    7150:	003f1b06 	br	6dc0 <__alt_data_end+0xff006dc0>
    7154:	d8800817 	ldw	r2,32(sp)
    7158:	11e9c83a 	sub	r20,r2,r7
    715c:	0005883a 	mov	r2,zero
    7160:	003d5406 	br	66b4 <__alt_data_end+0xff0066b4>
    7164:	00800044 	movi	r2,1
    7168:	003dc706 	br	6888 <__alt_data_end+0xff006888>
    716c:	d8c00217 	ldw	r3,8(sp)
    7170:	00800d84 	movi	r2,54
    7174:	dd400a17 	ldw	r21,40(sp)
    7178:	10c5c83a 	sub	r2,r2,r3
    717c:	dd000817 	ldw	r20,32(sp)
    7180:	003d4c06 	br	66b4 <__alt_data_end+0xff0066b4>
    7184:	dc800f15 	stw	r18,60(sp)
    7188:	dcc01015 	stw	r19,64(sp)
    718c:	04000084 	movi	r16,2
    7190:	003bed06 	br	6148 <__alt_data_end+0xff006148>
    7194:	d9000617 	ldw	r4,24(sp)
    7198:	203f0d26 	beq	r4,zero,6dd0 <__alt_data_end+0xff006dd0>
    719c:	d9800c17 	ldw	r6,48(sp)
    71a0:	01bcab0e 	bge	zero,r6,6450 <__alt_data_end+0xff006450>
    71a4:	d9401017 	ldw	r5,64(sp)
    71a8:	d9000f17 	ldw	r4,60(sp)
    71ac:	000d883a 	mov	r6,zero
    71b0:	01d00934 	movhi	r7,16420
    71b4:	000e1800 	call	e180 <__muldf3>
    71b8:	81000044 	addi	r4,r16,1
    71bc:	d8800f15 	stw	r2,60(sp)
    71c0:	d8c01015 	stw	r3,64(sp)
    71c4:	000f2140 	call	f214 <__floatsidf>
    71c8:	d9800f17 	ldw	r6,60(sp)
    71cc:	d9c01017 	ldw	r7,64(sp)
    71d0:	1009883a 	mov	r4,r2
    71d4:	180b883a 	mov	r5,r3
    71d8:	000e1800 	call	e180 <__muldf3>
    71dc:	01d00734 	movhi	r7,16412
    71e0:	000d883a 	mov	r6,zero
    71e4:	1009883a 	mov	r4,r2
    71e8:	180b883a 	mov	r5,r3
    71ec:	000cd940 	call	cd94 <__adddf3>
    71f0:	d9c00517 	ldw	r7,20(sp)
    71f4:	047f3034 	movhi	r17,64704
    71f8:	1021883a 	mov	r16,r2
    71fc:	39ffffc4 	addi	r7,r7,-1
    7200:	d9c01315 	stw	r7,76(sp)
    7204:	1c63883a 	add	r17,r3,r17
    7208:	db000c17 	ldw	r12,48(sp)
    720c:	003bea06 	br	61b8 <__alt_data_end+0xff0061b8>
    7210:	dc000915 	stw	r16,36(sp)
    7214:	003e0e06 	br	6a50 <__alt_data_end+0xff006a50>
    7218:	01000e44 	movi	r4,57
    721c:	8825883a 	mov	r18,r17
    7220:	9dc00044 	addi	r23,r19,1
    7224:	99000005 	stb	r4,0(r19)
    7228:	a023883a 	mov	r17,r20
    722c:	dc000915 	stw	r16,36(sp)
    7230:	003da406 	br	68c4 <__alt_data_end+0xff0068c4>
    7234:	d9801417 	ldw	r6,80(sp)
    7238:	d9c01517 	ldw	r7,84(sp)
    723c:	0009883a 	mov	r4,zero
    7240:	014ff834 	movhi	r5,16352
    7244:	000e8980 	call	e898 <__subdf3>
    7248:	880d883a 	mov	r6,r17
    724c:	a00f883a 	mov	r7,r20
    7250:	1009883a 	mov	r4,r2
    7254:	180b883a 	mov	r5,r3
    7258:	000dfb00 	call	dfb0 <__gedf2>
    725c:	00bc7c0e 	bge	zero,r2,6450 <__alt_data_end+0xff006450>
    7260:	01000c04 	movi	r4,48
    7264:	00000106 	br	726c <_dtoa_r+0x1580>
    7268:	102f883a 	mov	r23,r2
    726c:	b8bfffc4 	addi	r2,r23,-1
    7270:	10c00007 	ldb	r3,0(r2)
    7274:	193ffc26 	beq	r3,r4,7268 <__alt_data_end+0xff007268>
    7278:	d9801317 	ldw	r6,76(sp)
    727c:	d9800515 	stw	r6,20(sp)
    7280:	003c4406 	br	6394 <__alt_data_end+0xff006394>
    7284:	d9801317 	ldw	r6,76(sp)
    7288:	d9800515 	stw	r6,20(sp)
    728c:	003cea06 	br	6638 <__alt_data_end+0xff006638>
    7290:	dd800f17 	ldw	r22,60(sp)
    7294:	dcc01017 	ldw	r19,64(sp)
    7298:	dc801217 	ldw	r18,72(sp)
    729c:	003c6c06 	br	6450 <__alt_data_end+0xff006450>
    72a0:	903e031e 	bne	r18,zero,6ab0 <__alt_data_end+0xff006ab0>
    72a4:	003ebb06 	br	6d94 <__alt_data_end+0xff006d94>
    72a8:	103e6c1e 	bne	r2,zero,6c5c <__alt_data_end+0xff006c5c>
    72ac:	4080004c 	andi	r2,r8,1
    72b0:	103e6a26 	beq	r2,zero,6c5c <__alt_data_end+0xff006c5c>
    72b4:	003e6606 	br	6c50 <__alt_data_end+0xff006c50>
    72b8:	d8c00317 	ldw	r3,12(sp)
    72bc:	00800084 	movi	r2,2
    72c0:	10c02916 	blt	r2,r3,7368 <_dtoa_r+0x167c>
    72c4:	d9000c17 	ldw	r4,48(sp)
    72c8:	003e8806 	br	6cec <__alt_data_end+0xff006cec>
    72cc:	04000084 	movi	r16,2
    72d0:	003b9d06 	br	6148 <__alt_data_end+0xff006148>
    72d4:	d9001317 	ldw	r4,76(sp)
    72d8:	d9000515 	stw	r4,20(sp)
    72dc:	003cd606 	br	6638 <__alt_data_end+0xff006638>
    72e0:	d8801317 	ldw	r2,76(sp)
    72e4:	d8800515 	stw	r2,20(sp)
    72e8:	003c2a06 	br	6394 <__alt_data_end+0xff006394>
    72ec:	d9800317 	ldw	r6,12(sp)
    72f0:	00800084 	movi	r2,2
    72f4:	11801516 	blt	r2,r6,734c <_dtoa_r+0x1660>
    72f8:	d9c00c17 	ldw	r7,48(sp)
    72fc:	d9c00615 	stw	r7,24(sp)
    7300:	003df706 	br	6ae0 <__alt_data_end+0xff006ae0>
    7304:	193d3926 	beq	r3,r4,67ec <__alt_data_end+0xff0067ec>
    7308:	00c00f04 	movi	r3,60
    730c:	1885c83a 	sub	r2,r3,r2
    7310:	003ddf06 	br	6a90 <__alt_data_end+0xff006a90>
    7314:	e009883a 	mov	r4,fp
    7318:	e0001115 	stw	zero,68(fp)
    731c:	000b883a 	mov	r5,zero
    7320:	0008b7c0 	call	8b7c <_Balloc>
    7324:	d8800715 	stw	r2,28(sp)
    7328:	d8c00717 	ldw	r3,28(sp)
    732c:	00bfffc4 	movi	r2,-1
    7330:	01000044 	movi	r4,1
    7334:	d8800c15 	stw	r2,48(sp)
    7338:	e0c01015 	stw	r3,64(fp)
    733c:	d9000b15 	stw	r4,44(sp)
    7340:	d8800615 	stw	r2,24(sp)
    7344:	d8002215 	stw	zero,136(sp)
    7348:	003c4106 	br	6450 <__alt_data_end+0xff006450>
    734c:	d8c00c17 	ldw	r3,48(sp)
    7350:	d8c00615 	stw	r3,24(sp)
    7354:	003e7006 	br	6d18 <__alt_data_end+0xff006d18>
    7358:	04400044 	movi	r17,1
    735c:	003b2006 	br	5fe0 <__alt_data_end+0xff005fe0>
    7360:	000b883a 	mov	r5,zero
    7364:	003b3d06 	br	605c <__alt_data_end+0xff00605c>
    7368:	d8800c17 	ldw	r2,48(sp)
    736c:	d8800615 	stw	r2,24(sp)
    7370:	003e6906 	br	6d18 <__alt_data_end+0xff006d18>

00007374 <__sflush_r>:
    7374:	2880030b 	ldhu	r2,12(r5)
    7378:	defffb04 	addi	sp,sp,-20
    737c:	dcc00315 	stw	r19,12(sp)
    7380:	dc400115 	stw	r17,4(sp)
    7384:	dfc00415 	stw	ra,16(sp)
    7388:	dc800215 	stw	r18,8(sp)
    738c:	dc000015 	stw	r16,0(sp)
    7390:	10c0020c 	andi	r3,r2,8
    7394:	2823883a 	mov	r17,r5
    7398:	2027883a 	mov	r19,r4
    739c:	1800311e 	bne	r3,zero,7464 <__sflush_r+0xf0>
    73a0:	28c00117 	ldw	r3,4(r5)
    73a4:	10820014 	ori	r2,r2,2048
    73a8:	2880030d 	sth	r2,12(r5)
    73ac:	00c04b0e 	bge	zero,r3,74dc <__sflush_r+0x168>
    73b0:	8a000a17 	ldw	r8,40(r17)
    73b4:	40002326 	beq	r8,zero,7444 <__sflush_r+0xd0>
    73b8:	9c000017 	ldw	r16,0(r19)
    73bc:	10c4000c 	andi	r3,r2,4096
    73c0:	98000015 	stw	zero,0(r19)
    73c4:	18004826 	beq	r3,zero,74e8 <__sflush_r+0x174>
    73c8:	89801417 	ldw	r6,80(r17)
    73cc:	10c0010c 	andi	r3,r2,4
    73d0:	18000626 	beq	r3,zero,73ec <__sflush_r+0x78>
    73d4:	88c00117 	ldw	r3,4(r17)
    73d8:	88800c17 	ldw	r2,48(r17)
    73dc:	30cdc83a 	sub	r6,r6,r3
    73e0:	10000226 	beq	r2,zero,73ec <__sflush_r+0x78>
    73e4:	88800f17 	ldw	r2,60(r17)
    73e8:	308dc83a 	sub	r6,r6,r2
    73ec:	89400717 	ldw	r5,28(r17)
    73f0:	000f883a 	mov	r7,zero
    73f4:	9809883a 	mov	r4,r19
    73f8:	403ee83a 	callr	r8
    73fc:	00ffffc4 	movi	r3,-1
    7400:	10c04426 	beq	r2,r3,7514 <__sflush_r+0x1a0>
    7404:	88c0030b 	ldhu	r3,12(r17)
    7408:	89000417 	ldw	r4,16(r17)
    740c:	88000115 	stw	zero,4(r17)
    7410:	197dffcc 	andi	r5,r3,63487
    7414:	8940030d 	sth	r5,12(r17)
    7418:	89000015 	stw	r4,0(r17)
    741c:	18c4000c 	andi	r3,r3,4096
    7420:	18002c1e 	bne	r3,zero,74d4 <__sflush_r+0x160>
    7424:	89400c17 	ldw	r5,48(r17)
    7428:	9c000015 	stw	r16,0(r19)
    742c:	28000526 	beq	r5,zero,7444 <__sflush_r+0xd0>
    7430:	88801004 	addi	r2,r17,64
    7434:	28800226 	beq	r5,r2,7440 <__sflush_r+0xcc>
    7438:	9809883a 	mov	r4,r19
    743c:	0007ae00 	call	7ae0 <_free_r>
    7440:	88000c15 	stw	zero,48(r17)
    7444:	0005883a 	mov	r2,zero
    7448:	dfc00417 	ldw	ra,16(sp)
    744c:	dcc00317 	ldw	r19,12(sp)
    7450:	dc800217 	ldw	r18,8(sp)
    7454:	dc400117 	ldw	r17,4(sp)
    7458:	dc000017 	ldw	r16,0(sp)
    745c:	dec00504 	addi	sp,sp,20
    7460:	f800283a 	ret
    7464:	2c800417 	ldw	r18,16(r5)
    7468:	903ff626 	beq	r18,zero,7444 <__alt_data_end+0xff007444>
    746c:	2c000017 	ldw	r16,0(r5)
    7470:	108000cc 	andi	r2,r2,3
    7474:	2c800015 	stw	r18,0(r5)
    7478:	84a1c83a 	sub	r16,r16,r18
    747c:	1000131e 	bne	r2,zero,74cc <__sflush_r+0x158>
    7480:	28800517 	ldw	r2,20(r5)
    7484:	88800215 	stw	r2,8(r17)
    7488:	04000316 	blt	zero,r16,7498 <__sflush_r+0x124>
    748c:	003fed06 	br	7444 <__alt_data_end+0xff007444>
    7490:	90a5883a 	add	r18,r18,r2
    7494:	043feb0e 	bge	zero,r16,7444 <__alt_data_end+0xff007444>
    7498:	88800917 	ldw	r2,36(r17)
    749c:	89400717 	ldw	r5,28(r17)
    74a0:	800f883a 	mov	r7,r16
    74a4:	900d883a 	mov	r6,r18
    74a8:	9809883a 	mov	r4,r19
    74ac:	103ee83a 	callr	r2
    74b0:	80a1c83a 	sub	r16,r16,r2
    74b4:	00bff616 	blt	zero,r2,7490 <__alt_data_end+0xff007490>
    74b8:	88c0030b 	ldhu	r3,12(r17)
    74bc:	00bfffc4 	movi	r2,-1
    74c0:	18c01014 	ori	r3,r3,64
    74c4:	88c0030d 	sth	r3,12(r17)
    74c8:	003fdf06 	br	7448 <__alt_data_end+0xff007448>
    74cc:	0005883a 	mov	r2,zero
    74d0:	003fec06 	br	7484 <__alt_data_end+0xff007484>
    74d4:	88801415 	stw	r2,80(r17)
    74d8:	003fd206 	br	7424 <__alt_data_end+0xff007424>
    74dc:	28c00f17 	ldw	r3,60(r5)
    74e0:	00ffb316 	blt	zero,r3,73b0 <__alt_data_end+0xff0073b0>
    74e4:	003fd706 	br	7444 <__alt_data_end+0xff007444>
    74e8:	89400717 	ldw	r5,28(r17)
    74ec:	000d883a 	mov	r6,zero
    74f0:	01c00044 	movi	r7,1
    74f4:	9809883a 	mov	r4,r19
    74f8:	403ee83a 	callr	r8
    74fc:	100d883a 	mov	r6,r2
    7500:	00bfffc4 	movi	r2,-1
    7504:	30801426 	beq	r6,r2,7558 <__sflush_r+0x1e4>
    7508:	8880030b 	ldhu	r2,12(r17)
    750c:	8a000a17 	ldw	r8,40(r17)
    7510:	003fae06 	br	73cc <__alt_data_end+0xff0073cc>
    7514:	98c00017 	ldw	r3,0(r19)
    7518:	183fba26 	beq	r3,zero,7404 <__alt_data_end+0xff007404>
    751c:	01000744 	movi	r4,29
    7520:	19000626 	beq	r3,r4,753c <__sflush_r+0x1c8>
    7524:	01000584 	movi	r4,22
    7528:	19000426 	beq	r3,r4,753c <__sflush_r+0x1c8>
    752c:	88c0030b 	ldhu	r3,12(r17)
    7530:	18c01014 	ori	r3,r3,64
    7534:	88c0030d 	sth	r3,12(r17)
    7538:	003fc306 	br	7448 <__alt_data_end+0xff007448>
    753c:	8880030b 	ldhu	r2,12(r17)
    7540:	88c00417 	ldw	r3,16(r17)
    7544:	88000115 	stw	zero,4(r17)
    7548:	10bdffcc 	andi	r2,r2,63487
    754c:	8880030d 	sth	r2,12(r17)
    7550:	88c00015 	stw	r3,0(r17)
    7554:	003fb306 	br	7424 <__alt_data_end+0xff007424>
    7558:	98800017 	ldw	r2,0(r19)
    755c:	103fea26 	beq	r2,zero,7508 <__alt_data_end+0xff007508>
    7560:	00c00744 	movi	r3,29
    7564:	10c00226 	beq	r2,r3,7570 <__sflush_r+0x1fc>
    7568:	00c00584 	movi	r3,22
    756c:	10c0031e 	bne	r2,r3,757c <__sflush_r+0x208>
    7570:	9c000015 	stw	r16,0(r19)
    7574:	0005883a 	mov	r2,zero
    7578:	003fb306 	br	7448 <__alt_data_end+0xff007448>
    757c:	88c0030b 	ldhu	r3,12(r17)
    7580:	3005883a 	mov	r2,r6
    7584:	18c01014 	ori	r3,r3,64
    7588:	88c0030d 	sth	r3,12(r17)
    758c:	003fae06 	br	7448 <__alt_data_end+0xff007448>

00007590 <_fflush_r>:
    7590:	defffd04 	addi	sp,sp,-12
    7594:	dc000115 	stw	r16,4(sp)
    7598:	dfc00215 	stw	ra,8(sp)
    759c:	2021883a 	mov	r16,r4
    75a0:	20000226 	beq	r4,zero,75ac <_fflush_r+0x1c>
    75a4:	20800e17 	ldw	r2,56(r4)
    75a8:	10000c26 	beq	r2,zero,75dc <_fflush_r+0x4c>
    75ac:	2880030f 	ldh	r2,12(r5)
    75b0:	1000051e 	bne	r2,zero,75c8 <_fflush_r+0x38>
    75b4:	0005883a 	mov	r2,zero
    75b8:	dfc00217 	ldw	ra,8(sp)
    75bc:	dc000117 	ldw	r16,4(sp)
    75c0:	dec00304 	addi	sp,sp,12
    75c4:	f800283a 	ret
    75c8:	8009883a 	mov	r4,r16
    75cc:	dfc00217 	ldw	ra,8(sp)
    75d0:	dc000117 	ldw	r16,4(sp)
    75d4:	dec00304 	addi	sp,sp,12
    75d8:	00073741 	jmpi	7374 <__sflush_r>
    75dc:	d9400015 	stw	r5,0(sp)
    75e0:	000796c0 	call	796c <__sinit>
    75e4:	d9400017 	ldw	r5,0(sp)
    75e8:	003ff006 	br	75ac <__alt_data_end+0xff0075ac>

000075ec <fflush>:
    75ec:	20000526 	beq	r4,zero,7604 <fflush+0x18>
    75f0:	00800074 	movhi	r2,1
    75f4:	10903104 	addi	r2,r2,16580
    75f8:	200b883a 	mov	r5,r4
    75fc:	11000017 	ldw	r4,0(r2)
    7600:	00075901 	jmpi	7590 <_fflush_r>
    7604:	00800074 	movhi	r2,1
    7608:	10903004 	addi	r2,r2,16576
    760c:	11000017 	ldw	r4,0(r2)
    7610:	01400034 	movhi	r5,0
    7614:	295d6404 	addi	r5,r5,30096
    7618:	00083701 	jmpi	8370 <_fwalk_reent>

0000761c <__fp_unlock>:
    761c:	0005883a 	mov	r2,zero
    7620:	f800283a 	ret

00007624 <_cleanup_r>:
    7624:	01400074 	movhi	r5,1
    7628:	296eca04 	addi	r5,r5,-17624
    762c:	00083701 	jmpi	8370 <_fwalk_reent>

00007630 <__sinit.part.1>:
    7630:	defff704 	addi	sp,sp,-36
    7634:	00c00034 	movhi	r3,0
    7638:	dfc00815 	stw	ra,32(sp)
    763c:	ddc00715 	stw	r23,28(sp)
    7640:	dd800615 	stw	r22,24(sp)
    7644:	dd400515 	stw	r21,20(sp)
    7648:	dd000415 	stw	r20,16(sp)
    764c:	dcc00315 	stw	r19,12(sp)
    7650:	dc800215 	stw	r18,8(sp)
    7654:	dc400115 	stw	r17,4(sp)
    7658:	dc000015 	stw	r16,0(sp)
    765c:	18dd8904 	addi	r3,r3,30244
    7660:	24000117 	ldw	r16,4(r4)
    7664:	20c00f15 	stw	r3,60(r4)
    7668:	2080bb04 	addi	r2,r4,748
    766c:	00c000c4 	movi	r3,3
    7670:	20c0b915 	stw	r3,740(r4)
    7674:	2080ba15 	stw	r2,744(r4)
    7678:	2000b815 	stw	zero,736(r4)
    767c:	05c00204 	movi	r23,8
    7680:	00800104 	movi	r2,4
    7684:	2025883a 	mov	r18,r4
    7688:	b80d883a 	mov	r6,r23
    768c:	81001704 	addi	r4,r16,92
    7690:	000b883a 	mov	r5,zero
    7694:	80000015 	stw	zero,0(r16)
    7698:	80000115 	stw	zero,4(r16)
    769c:	80000215 	stw	zero,8(r16)
    76a0:	8080030d 	sth	r2,12(r16)
    76a4:	80001915 	stw	zero,100(r16)
    76a8:	8000038d 	sth	zero,14(r16)
    76ac:	80000415 	stw	zero,16(r16)
    76b0:	80000515 	stw	zero,20(r16)
    76b4:	80000615 	stw	zero,24(r16)
    76b8:	0008a540 	call	8a54 <memset>
    76bc:	05800074 	movhi	r22,1
    76c0:	94400217 	ldw	r17,8(r18)
    76c4:	05400074 	movhi	r21,1
    76c8:	05000074 	movhi	r20,1
    76cc:	04c00074 	movhi	r19,1
    76d0:	b5a85404 	addi	r22,r22,-24240
    76d4:	ad686b04 	addi	r21,r21,-24148
    76d8:	a5288a04 	addi	r20,r20,-24024
    76dc:	9ce8a104 	addi	r19,r19,-23932
    76e0:	85800815 	stw	r22,32(r16)
    76e4:	85400915 	stw	r21,36(r16)
    76e8:	85000a15 	stw	r20,40(r16)
    76ec:	84c00b15 	stw	r19,44(r16)
    76f0:	84000715 	stw	r16,28(r16)
    76f4:	00800284 	movi	r2,10
    76f8:	8880030d 	sth	r2,12(r17)
    76fc:	00800044 	movi	r2,1
    7700:	b80d883a 	mov	r6,r23
    7704:	89001704 	addi	r4,r17,92
    7708:	000b883a 	mov	r5,zero
    770c:	88000015 	stw	zero,0(r17)
    7710:	88000115 	stw	zero,4(r17)
    7714:	88000215 	stw	zero,8(r17)
    7718:	88001915 	stw	zero,100(r17)
    771c:	8880038d 	sth	r2,14(r17)
    7720:	88000415 	stw	zero,16(r17)
    7724:	88000515 	stw	zero,20(r17)
    7728:	88000615 	stw	zero,24(r17)
    772c:	0008a540 	call	8a54 <memset>
    7730:	94000317 	ldw	r16,12(r18)
    7734:	00800484 	movi	r2,18
    7738:	8c400715 	stw	r17,28(r17)
    773c:	8d800815 	stw	r22,32(r17)
    7740:	8d400915 	stw	r21,36(r17)
    7744:	8d000a15 	stw	r20,40(r17)
    7748:	8cc00b15 	stw	r19,44(r17)
    774c:	8080030d 	sth	r2,12(r16)
    7750:	00800084 	movi	r2,2
    7754:	80000015 	stw	zero,0(r16)
    7758:	80000115 	stw	zero,4(r16)
    775c:	80000215 	stw	zero,8(r16)
    7760:	80001915 	stw	zero,100(r16)
    7764:	8080038d 	sth	r2,14(r16)
    7768:	80000415 	stw	zero,16(r16)
    776c:	80000515 	stw	zero,20(r16)
    7770:	80000615 	stw	zero,24(r16)
    7774:	b80d883a 	mov	r6,r23
    7778:	000b883a 	mov	r5,zero
    777c:	81001704 	addi	r4,r16,92
    7780:	0008a540 	call	8a54 <memset>
    7784:	00800044 	movi	r2,1
    7788:	84000715 	stw	r16,28(r16)
    778c:	85800815 	stw	r22,32(r16)
    7790:	85400915 	stw	r21,36(r16)
    7794:	85000a15 	stw	r20,40(r16)
    7798:	84c00b15 	stw	r19,44(r16)
    779c:	90800e15 	stw	r2,56(r18)
    77a0:	dfc00817 	ldw	ra,32(sp)
    77a4:	ddc00717 	ldw	r23,28(sp)
    77a8:	dd800617 	ldw	r22,24(sp)
    77ac:	dd400517 	ldw	r21,20(sp)
    77b0:	dd000417 	ldw	r20,16(sp)
    77b4:	dcc00317 	ldw	r19,12(sp)
    77b8:	dc800217 	ldw	r18,8(sp)
    77bc:	dc400117 	ldw	r17,4(sp)
    77c0:	dc000017 	ldw	r16,0(sp)
    77c4:	dec00904 	addi	sp,sp,36
    77c8:	f800283a 	ret

000077cc <__fp_lock>:
    77cc:	0005883a 	mov	r2,zero
    77d0:	f800283a 	ret

000077d4 <__sfmoreglue>:
    77d4:	defffc04 	addi	sp,sp,-16
    77d8:	dc400115 	stw	r17,4(sp)
    77dc:	2c7fffc4 	addi	r17,r5,-1
    77e0:	8c401a24 	muli	r17,r17,104
    77e4:	dc800215 	stw	r18,8(sp)
    77e8:	2825883a 	mov	r18,r5
    77ec:	89401d04 	addi	r5,r17,116
    77f0:	dc000015 	stw	r16,0(sp)
    77f4:	dfc00315 	stw	ra,12(sp)
    77f8:	0002c900 	call	2c90 <_malloc_r>
    77fc:	1021883a 	mov	r16,r2
    7800:	10000726 	beq	r2,zero,7820 <__sfmoreglue+0x4c>
    7804:	11000304 	addi	r4,r2,12
    7808:	10000015 	stw	zero,0(r2)
    780c:	14800115 	stw	r18,4(r2)
    7810:	11000215 	stw	r4,8(r2)
    7814:	89801a04 	addi	r6,r17,104
    7818:	000b883a 	mov	r5,zero
    781c:	0008a540 	call	8a54 <memset>
    7820:	8005883a 	mov	r2,r16
    7824:	dfc00317 	ldw	ra,12(sp)
    7828:	dc800217 	ldw	r18,8(sp)
    782c:	dc400117 	ldw	r17,4(sp)
    7830:	dc000017 	ldw	r16,0(sp)
    7834:	dec00404 	addi	sp,sp,16
    7838:	f800283a 	ret

0000783c <__sfp>:
    783c:	defffb04 	addi	sp,sp,-20
    7840:	dc000015 	stw	r16,0(sp)
    7844:	04000074 	movhi	r16,1
    7848:	84103004 	addi	r16,r16,16576
    784c:	dcc00315 	stw	r19,12(sp)
    7850:	2027883a 	mov	r19,r4
    7854:	81000017 	ldw	r4,0(r16)
    7858:	dfc00415 	stw	ra,16(sp)
    785c:	dc800215 	stw	r18,8(sp)
    7860:	20800e17 	ldw	r2,56(r4)
    7864:	dc400115 	stw	r17,4(sp)
    7868:	1000021e 	bne	r2,zero,7874 <__sfp+0x38>
    786c:	00076300 	call	7630 <__sinit.part.1>
    7870:	81000017 	ldw	r4,0(r16)
    7874:	2480b804 	addi	r18,r4,736
    7878:	047fffc4 	movi	r17,-1
    787c:	91000117 	ldw	r4,4(r18)
    7880:	94000217 	ldw	r16,8(r18)
    7884:	213fffc4 	addi	r4,r4,-1
    7888:	20000a16 	blt	r4,zero,78b4 <__sfp+0x78>
    788c:	8080030f 	ldh	r2,12(r16)
    7890:	10000c26 	beq	r2,zero,78c4 <__sfp+0x88>
    7894:	80c01d04 	addi	r3,r16,116
    7898:	00000206 	br	78a4 <__sfp+0x68>
    789c:	18bfe60f 	ldh	r2,-104(r3)
    78a0:	10000826 	beq	r2,zero,78c4 <__sfp+0x88>
    78a4:	213fffc4 	addi	r4,r4,-1
    78a8:	1c3ffd04 	addi	r16,r3,-12
    78ac:	18c01a04 	addi	r3,r3,104
    78b0:	247ffa1e 	bne	r4,r17,789c <__alt_data_end+0xff00789c>
    78b4:	90800017 	ldw	r2,0(r18)
    78b8:	10001d26 	beq	r2,zero,7930 <__sfp+0xf4>
    78bc:	1025883a 	mov	r18,r2
    78c0:	003fee06 	br	787c <__alt_data_end+0xff00787c>
    78c4:	00bfffc4 	movi	r2,-1
    78c8:	8080038d 	sth	r2,14(r16)
    78cc:	00800044 	movi	r2,1
    78d0:	8080030d 	sth	r2,12(r16)
    78d4:	80001915 	stw	zero,100(r16)
    78d8:	80000015 	stw	zero,0(r16)
    78dc:	80000215 	stw	zero,8(r16)
    78e0:	80000115 	stw	zero,4(r16)
    78e4:	80000415 	stw	zero,16(r16)
    78e8:	80000515 	stw	zero,20(r16)
    78ec:	80000615 	stw	zero,24(r16)
    78f0:	01800204 	movi	r6,8
    78f4:	000b883a 	mov	r5,zero
    78f8:	81001704 	addi	r4,r16,92
    78fc:	0008a540 	call	8a54 <memset>
    7900:	8005883a 	mov	r2,r16
    7904:	80000c15 	stw	zero,48(r16)
    7908:	80000d15 	stw	zero,52(r16)
    790c:	80001115 	stw	zero,68(r16)
    7910:	80001215 	stw	zero,72(r16)
    7914:	dfc00417 	ldw	ra,16(sp)
    7918:	dcc00317 	ldw	r19,12(sp)
    791c:	dc800217 	ldw	r18,8(sp)
    7920:	dc400117 	ldw	r17,4(sp)
    7924:	dc000017 	ldw	r16,0(sp)
    7928:	dec00504 	addi	sp,sp,20
    792c:	f800283a 	ret
    7930:	01400104 	movi	r5,4
    7934:	9809883a 	mov	r4,r19
    7938:	00077d40 	call	77d4 <__sfmoreglue>
    793c:	90800015 	stw	r2,0(r18)
    7940:	103fde1e 	bne	r2,zero,78bc <__alt_data_end+0xff0078bc>
    7944:	00800304 	movi	r2,12
    7948:	98800015 	stw	r2,0(r19)
    794c:	0005883a 	mov	r2,zero
    7950:	003ff006 	br	7914 <__alt_data_end+0xff007914>

00007954 <_cleanup>:
    7954:	00800074 	movhi	r2,1
    7958:	10903004 	addi	r2,r2,16576
    795c:	11000017 	ldw	r4,0(r2)
    7960:	01400074 	movhi	r5,1
    7964:	296eca04 	addi	r5,r5,-17624
    7968:	00083701 	jmpi	8370 <_fwalk_reent>

0000796c <__sinit>:
    796c:	20800e17 	ldw	r2,56(r4)
    7970:	10000126 	beq	r2,zero,7978 <__sinit+0xc>
    7974:	f800283a 	ret
    7978:	00076301 	jmpi	7630 <__sinit.part.1>

0000797c <__sfp_lock_acquire>:
    797c:	f800283a 	ret

00007980 <__sfp_lock_release>:
    7980:	f800283a 	ret

00007984 <__sinit_lock_acquire>:
    7984:	f800283a 	ret

00007988 <__sinit_lock_release>:
    7988:	f800283a 	ret

0000798c <__fp_lock_all>:
    798c:	00800074 	movhi	r2,1
    7990:	10903104 	addi	r2,r2,16580
    7994:	11000017 	ldw	r4,0(r2)
    7998:	01400034 	movhi	r5,0
    799c:	295df304 	addi	r5,r5,30668
    79a0:	00082ac1 	jmpi	82ac <_fwalk>

000079a4 <__fp_unlock_all>:
    79a4:	00800074 	movhi	r2,1
    79a8:	10903104 	addi	r2,r2,16580
    79ac:	11000017 	ldw	r4,0(r2)
    79b0:	01400034 	movhi	r5,0
    79b4:	295d8704 	addi	r5,r5,30236
    79b8:	00082ac1 	jmpi	82ac <_fwalk>

000079bc <_malloc_trim_r>:
    79bc:	defffb04 	addi	sp,sp,-20
    79c0:	dcc00315 	stw	r19,12(sp)
    79c4:	04c00074 	movhi	r19,1
    79c8:	dc800215 	stw	r18,8(sp)
    79cc:	dc400115 	stw	r17,4(sp)
    79d0:	dc000015 	stw	r16,0(sp)
    79d4:	dfc00415 	stw	ra,16(sp)
    79d8:	2821883a 	mov	r16,r5
    79dc:	9cc98104 	addi	r19,r19,9732
    79e0:	2025883a 	mov	r18,r4
    79e4:	000f9780 	call	f978 <__malloc_lock>
    79e8:	98800217 	ldw	r2,8(r19)
    79ec:	14400117 	ldw	r17,4(r2)
    79f0:	00bfff04 	movi	r2,-4
    79f4:	88a2703a 	and	r17,r17,r2
    79f8:	8c21c83a 	sub	r16,r17,r16
    79fc:	8403fbc4 	addi	r16,r16,4079
    7a00:	8020d33a 	srli	r16,r16,12
    7a04:	0083ffc4 	movi	r2,4095
    7a08:	843fffc4 	addi	r16,r16,-1
    7a0c:	8020933a 	slli	r16,r16,12
    7a10:	1400060e 	bge	r2,r16,7a2c <_malloc_trim_r+0x70>
    7a14:	000b883a 	mov	r5,zero
    7a18:	9009883a 	mov	r4,r18
    7a1c:	00035dc0 	call	35dc <_sbrk_r>
    7a20:	98c00217 	ldw	r3,8(r19)
    7a24:	1c47883a 	add	r3,r3,r17
    7a28:	10c00a26 	beq	r2,r3,7a54 <_malloc_trim_r+0x98>
    7a2c:	9009883a 	mov	r4,r18
    7a30:	000f99c0 	call	f99c <__malloc_unlock>
    7a34:	0005883a 	mov	r2,zero
    7a38:	dfc00417 	ldw	ra,16(sp)
    7a3c:	dcc00317 	ldw	r19,12(sp)
    7a40:	dc800217 	ldw	r18,8(sp)
    7a44:	dc400117 	ldw	r17,4(sp)
    7a48:	dc000017 	ldw	r16,0(sp)
    7a4c:	dec00504 	addi	sp,sp,20
    7a50:	f800283a 	ret
    7a54:	040bc83a 	sub	r5,zero,r16
    7a58:	9009883a 	mov	r4,r18
    7a5c:	00035dc0 	call	35dc <_sbrk_r>
    7a60:	00ffffc4 	movi	r3,-1
    7a64:	10c00d26 	beq	r2,r3,7a9c <_malloc_trim_r+0xe0>
    7a68:	00c00074 	movhi	r3,1
    7a6c:	18d71504 	addi	r3,r3,23636
    7a70:	18800017 	ldw	r2,0(r3)
    7a74:	99000217 	ldw	r4,8(r19)
    7a78:	8c23c83a 	sub	r17,r17,r16
    7a7c:	8c400054 	ori	r17,r17,1
    7a80:	1421c83a 	sub	r16,r2,r16
    7a84:	24400115 	stw	r17,4(r4)
    7a88:	9009883a 	mov	r4,r18
    7a8c:	1c000015 	stw	r16,0(r3)
    7a90:	000f99c0 	call	f99c <__malloc_unlock>
    7a94:	00800044 	movi	r2,1
    7a98:	003fe706 	br	7a38 <__alt_data_end+0xff007a38>
    7a9c:	000b883a 	mov	r5,zero
    7aa0:	9009883a 	mov	r4,r18
    7aa4:	00035dc0 	call	35dc <_sbrk_r>
    7aa8:	99000217 	ldw	r4,8(r19)
    7aac:	014003c4 	movi	r5,15
    7ab0:	1107c83a 	sub	r3,r2,r4
    7ab4:	28ffdd0e 	bge	r5,r3,7a2c <__alt_data_end+0xff007a2c>
    7ab8:	01400074 	movhi	r5,1
    7abc:	29502e04 	addi	r5,r5,16568
    7ac0:	29400017 	ldw	r5,0(r5)
    7ac4:	18c00054 	ori	r3,r3,1
    7ac8:	20c00115 	stw	r3,4(r4)
    7acc:	00c00074 	movhi	r3,1
    7ad0:	1145c83a 	sub	r2,r2,r5
    7ad4:	18d71504 	addi	r3,r3,23636
    7ad8:	18800015 	stw	r2,0(r3)
    7adc:	003fd306 	br	7a2c <__alt_data_end+0xff007a2c>

00007ae0 <_free_r>:
    7ae0:	28004126 	beq	r5,zero,7be8 <_free_r+0x108>
    7ae4:	defffd04 	addi	sp,sp,-12
    7ae8:	dc400115 	stw	r17,4(sp)
    7aec:	dc000015 	stw	r16,0(sp)
    7af0:	2023883a 	mov	r17,r4
    7af4:	2821883a 	mov	r16,r5
    7af8:	dfc00215 	stw	ra,8(sp)
    7afc:	000f9780 	call	f978 <__malloc_lock>
    7b00:	81ffff17 	ldw	r7,-4(r16)
    7b04:	00bfff84 	movi	r2,-2
    7b08:	01000074 	movhi	r4,1
    7b0c:	81bffe04 	addi	r6,r16,-8
    7b10:	3884703a 	and	r2,r7,r2
    7b14:	21098104 	addi	r4,r4,9732
    7b18:	308b883a 	add	r5,r6,r2
    7b1c:	2a400117 	ldw	r9,4(r5)
    7b20:	22000217 	ldw	r8,8(r4)
    7b24:	00ffff04 	movi	r3,-4
    7b28:	48c6703a 	and	r3,r9,r3
    7b2c:	2a005726 	beq	r5,r8,7c8c <_free_r+0x1ac>
    7b30:	28c00115 	stw	r3,4(r5)
    7b34:	39c0004c 	andi	r7,r7,1
    7b38:	3800091e 	bne	r7,zero,7b60 <_free_r+0x80>
    7b3c:	823ffe17 	ldw	r8,-8(r16)
    7b40:	22400204 	addi	r9,r4,8
    7b44:	320dc83a 	sub	r6,r6,r8
    7b48:	31c00217 	ldw	r7,8(r6)
    7b4c:	1205883a 	add	r2,r2,r8
    7b50:	3a406526 	beq	r7,r9,7ce8 <_free_r+0x208>
    7b54:	32000317 	ldw	r8,12(r6)
    7b58:	3a000315 	stw	r8,12(r7)
    7b5c:	41c00215 	stw	r7,8(r8)
    7b60:	28cf883a 	add	r7,r5,r3
    7b64:	39c00117 	ldw	r7,4(r7)
    7b68:	39c0004c 	andi	r7,r7,1
    7b6c:	38003a26 	beq	r7,zero,7c58 <_free_r+0x178>
    7b70:	10c00054 	ori	r3,r2,1
    7b74:	30c00115 	stw	r3,4(r6)
    7b78:	3087883a 	add	r3,r6,r2
    7b7c:	18800015 	stw	r2,0(r3)
    7b80:	00c07fc4 	movi	r3,511
    7b84:	18801936 	bltu	r3,r2,7bec <_free_r+0x10c>
    7b88:	1004d0fa 	srli	r2,r2,3
    7b8c:	01c00044 	movi	r7,1
    7b90:	21400117 	ldw	r5,4(r4)
    7b94:	10c00044 	addi	r3,r2,1
    7b98:	18c7883a 	add	r3,r3,r3
    7b9c:	1005d0ba 	srai	r2,r2,2
    7ba0:	18c7883a 	add	r3,r3,r3
    7ba4:	18c7883a 	add	r3,r3,r3
    7ba8:	1907883a 	add	r3,r3,r4
    7bac:	3884983a 	sll	r2,r7,r2
    7bb0:	19c00017 	ldw	r7,0(r3)
    7bb4:	1a3ffe04 	addi	r8,r3,-8
    7bb8:	1144b03a 	or	r2,r2,r5
    7bbc:	32000315 	stw	r8,12(r6)
    7bc0:	31c00215 	stw	r7,8(r6)
    7bc4:	20800115 	stw	r2,4(r4)
    7bc8:	19800015 	stw	r6,0(r3)
    7bcc:	39800315 	stw	r6,12(r7)
    7bd0:	8809883a 	mov	r4,r17
    7bd4:	dfc00217 	ldw	ra,8(sp)
    7bd8:	dc400117 	ldw	r17,4(sp)
    7bdc:	dc000017 	ldw	r16,0(sp)
    7be0:	dec00304 	addi	sp,sp,12
    7be4:	000f99c1 	jmpi	f99c <__malloc_unlock>
    7be8:	f800283a 	ret
    7bec:	100ad27a 	srli	r5,r2,9
    7bf0:	00c00104 	movi	r3,4
    7bf4:	19404a36 	bltu	r3,r5,7d20 <_free_r+0x240>
    7bf8:	100ad1ba 	srli	r5,r2,6
    7bfc:	28c00e44 	addi	r3,r5,57
    7c00:	18c7883a 	add	r3,r3,r3
    7c04:	29400e04 	addi	r5,r5,56
    7c08:	18c7883a 	add	r3,r3,r3
    7c0c:	18c7883a 	add	r3,r3,r3
    7c10:	1909883a 	add	r4,r3,r4
    7c14:	20c00017 	ldw	r3,0(r4)
    7c18:	01c00074 	movhi	r7,1
    7c1c:	213ffe04 	addi	r4,r4,-8
    7c20:	39c98104 	addi	r7,r7,9732
    7c24:	20c04426 	beq	r4,r3,7d38 <_free_r+0x258>
    7c28:	01ffff04 	movi	r7,-4
    7c2c:	19400117 	ldw	r5,4(r3)
    7c30:	29ca703a 	and	r5,r5,r7
    7c34:	1140022e 	bgeu	r2,r5,7c40 <_free_r+0x160>
    7c38:	18c00217 	ldw	r3,8(r3)
    7c3c:	20fffb1e 	bne	r4,r3,7c2c <__alt_data_end+0xff007c2c>
    7c40:	19000317 	ldw	r4,12(r3)
    7c44:	31000315 	stw	r4,12(r6)
    7c48:	30c00215 	stw	r3,8(r6)
    7c4c:	21800215 	stw	r6,8(r4)
    7c50:	19800315 	stw	r6,12(r3)
    7c54:	003fde06 	br	7bd0 <__alt_data_end+0xff007bd0>
    7c58:	29c00217 	ldw	r7,8(r5)
    7c5c:	10c5883a 	add	r2,r2,r3
    7c60:	00c00074 	movhi	r3,1
    7c64:	18c98304 	addi	r3,r3,9740
    7c68:	38c03b26 	beq	r7,r3,7d58 <_free_r+0x278>
    7c6c:	2a000317 	ldw	r8,12(r5)
    7c70:	11400054 	ori	r5,r2,1
    7c74:	3087883a 	add	r3,r6,r2
    7c78:	3a000315 	stw	r8,12(r7)
    7c7c:	41c00215 	stw	r7,8(r8)
    7c80:	31400115 	stw	r5,4(r6)
    7c84:	18800015 	stw	r2,0(r3)
    7c88:	003fbd06 	br	7b80 <__alt_data_end+0xff007b80>
    7c8c:	39c0004c 	andi	r7,r7,1
    7c90:	10c5883a 	add	r2,r2,r3
    7c94:	3800071e 	bne	r7,zero,7cb4 <_free_r+0x1d4>
    7c98:	81fffe17 	ldw	r7,-8(r16)
    7c9c:	31cdc83a 	sub	r6,r6,r7
    7ca0:	30c00317 	ldw	r3,12(r6)
    7ca4:	31400217 	ldw	r5,8(r6)
    7ca8:	11c5883a 	add	r2,r2,r7
    7cac:	28c00315 	stw	r3,12(r5)
    7cb0:	19400215 	stw	r5,8(r3)
    7cb4:	10c00054 	ori	r3,r2,1
    7cb8:	30c00115 	stw	r3,4(r6)
    7cbc:	00c00074 	movhi	r3,1
    7cc0:	18d02f04 	addi	r3,r3,16572
    7cc4:	18c00017 	ldw	r3,0(r3)
    7cc8:	21800215 	stw	r6,8(r4)
    7ccc:	10ffc036 	bltu	r2,r3,7bd0 <__alt_data_end+0xff007bd0>
    7cd0:	00800074 	movhi	r2,1
    7cd4:	10970704 	addi	r2,r2,23580
    7cd8:	11400017 	ldw	r5,0(r2)
    7cdc:	8809883a 	mov	r4,r17
    7ce0:	00079bc0 	call	79bc <_malloc_trim_r>
    7ce4:	003fba06 	br	7bd0 <__alt_data_end+0xff007bd0>
    7ce8:	28c9883a 	add	r4,r5,r3
    7cec:	21000117 	ldw	r4,4(r4)
    7cf0:	2100004c 	andi	r4,r4,1
    7cf4:	2000391e 	bne	r4,zero,7ddc <_free_r+0x2fc>
    7cf8:	29c00217 	ldw	r7,8(r5)
    7cfc:	29000317 	ldw	r4,12(r5)
    7d00:	1885883a 	add	r2,r3,r2
    7d04:	10c00054 	ori	r3,r2,1
    7d08:	39000315 	stw	r4,12(r7)
    7d0c:	21c00215 	stw	r7,8(r4)
    7d10:	30c00115 	stw	r3,4(r6)
    7d14:	308d883a 	add	r6,r6,r2
    7d18:	30800015 	stw	r2,0(r6)
    7d1c:	003fac06 	br	7bd0 <__alt_data_end+0xff007bd0>
    7d20:	00c00504 	movi	r3,20
    7d24:	19401536 	bltu	r3,r5,7d7c <_free_r+0x29c>
    7d28:	28c01704 	addi	r3,r5,92
    7d2c:	18c7883a 	add	r3,r3,r3
    7d30:	294016c4 	addi	r5,r5,91
    7d34:	003fb406 	br	7c08 <__alt_data_end+0xff007c08>
    7d38:	280bd0ba 	srai	r5,r5,2
    7d3c:	00c00044 	movi	r3,1
    7d40:	38800117 	ldw	r2,4(r7)
    7d44:	194a983a 	sll	r5,r3,r5
    7d48:	2007883a 	mov	r3,r4
    7d4c:	2884b03a 	or	r2,r5,r2
    7d50:	38800115 	stw	r2,4(r7)
    7d54:	003fbb06 	br	7c44 <__alt_data_end+0xff007c44>
    7d58:	21800515 	stw	r6,20(r4)
    7d5c:	21800415 	stw	r6,16(r4)
    7d60:	10c00054 	ori	r3,r2,1
    7d64:	31c00315 	stw	r7,12(r6)
    7d68:	31c00215 	stw	r7,8(r6)
    7d6c:	30c00115 	stw	r3,4(r6)
    7d70:	308d883a 	add	r6,r6,r2
    7d74:	30800015 	stw	r2,0(r6)
    7d78:	003f9506 	br	7bd0 <__alt_data_end+0xff007bd0>
    7d7c:	00c01504 	movi	r3,84
    7d80:	19400536 	bltu	r3,r5,7d98 <_free_r+0x2b8>
    7d84:	100ad33a 	srli	r5,r2,12
    7d88:	28c01bc4 	addi	r3,r5,111
    7d8c:	18c7883a 	add	r3,r3,r3
    7d90:	29401b84 	addi	r5,r5,110
    7d94:	003f9c06 	br	7c08 <__alt_data_end+0xff007c08>
    7d98:	00c05504 	movi	r3,340
    7d9c:	19400536 	bltu	r3,r5,7db4 <_free_r+0x2d4>
    7da0:	100ad3fa 	srli	r5,r2,15
    7da4:	28c01e04 	addi	r3,r5,120
    7da8:	18c7883a 	add	r3,r3,r3
    7dac:	29401dc4 	addi	r5,r5,119
    7db0:	003f9506 	br	7c08 <__alt_data_end+0xff007c08>
    7db4:	00c15504 	movi	r3,1364
    7db8:	19400536 	bltu	r3,r5,7dd0 <_free_r+0x2f0>
    7dbc:	100ad4ba 	srli	r5,r2,18
    7dc0:	28c01f44 	addi	r3,r5,125
    7dc4:	18c7883a 	add	r3,r3,r3
    7dc8:	29401f04 	addi	r5,r5,124
    7dcc:	003f8e06 	br	7c08 <__alt_data_end+0xff007c08>
    7dd0:	00c03f84 	movi	r3,254
    7dd4:	01401f84 	movi	r5,126
    7dd8:	003f8b06 	br	7c08 <__alt_data_end+0xff007c08>
    7ddc:	10c00054 	ori	r3,r2,1
    7de0:	30c00115 	stw	r3,4(r6)
    7de4:	308d883a 	add	r6,r6,r2
    7de8:	30800015 	stw	r2,0(r6)
    7dec:	003f7806 	br	7bd0 <__alt_data_end+0xff007bd0>

00007df0 <__sfvwrite_r>:
    7df0:	30800217 	ldw	r2,8(r6)
    7df4:	10006726 	beq	r2,zero,7f94 <__sfvwrite_r+0x1a4>
    7df8:	28c0030b 	ldhu	r3,12(r5)
    7dfc:	defff404 	addi	sp,sp,-48
    7e00:	dd400715 	stw	r21,28(sp)
    7e04:	dd000615 	stw	r20,24(sp)
    7e08:	dc000215 	stw	r16,8(sp)
    7e0c:	dfc00b15 	stw	ra,44(sp)
    7e10:	df000a15 	stw	fp,40(sp)
    7e14:	ddc00915 	stw	r23,36(sp)
    7e18:	dd800815 	stw	r22,32(sp)
    7e1c:	dcc00515 	stw	r19,20(sp)
    7e20:	dc800415 	stw	r18,16(sp)
    7e24:	dc400315 	stw	r17,12(sp)
    7e28:	1880020c 	andi	r2,r3,8
    7e2c:	2821883a 	mov	r16,r5
    7e30:	202b883a 	mov	r21,r4
    7e34:	3029883a 	mov	r20,r6
    7e38:	10002726 	beq	r2,zero,7ed8 <__sfvwrite_r+0xe8>
    7e3c:	28800417 	ldw	r2,16(r5)
    7e40:	10002526 	beq	r2,zero,7ed8 <__sfvwrite_r+0xe8>
    7e44:	1880008c 	andi	r2,r3,2
    7e48:	a4400017 	ldw	r17,0(r20)
    7e4c:	10002a26 	beq	r2,zero,7ef8 <__sfvwrite_r+0x108>
    7e50:	05a00034 	movhi	r22,32768
    7e54:	0027883a 	mov	r19,zero
    7e58:	0025883a 	mov	r18,zero
    7e5c:	b5bf0004 	addi	r22,r22,-1024
    7e60:	980d883a 	mov	r6,r19
    7e64:	a809883a 	mov	r4,r21
    7e68:	90004626 	beq	r18,zero,7f84 <__sfvwrite_r+0x194>
    7e6c:	900f883a 	mov	r7,r18
    7e70:	b480022e 	bgeu	r22,r18,7e7c <__sfvwrite_r+0x8c>
    7e74:	01e00034 	movhi	r7,32768
    7e78:	39ff0004 	addi	r7,r7,-1024
    7e7c:	80800917 	ldw	r2,36(r16)
    7e80:	81400717 	ldw	r5,28(r16)
    7e84:	103ee83a 	callr	r2
    7e88:	0080570e 	bge	zero,r2,7fe8 <__sfvwrite_r+0x1f8>
    7e8c:	a0c00217 	ldw	r3,8(r20)
    7e90:	98a7883a 	add	r19,r19,r2
    7e94:	90a5c83a 	sub	r18,r18,r2
    7e98:	1885c83a 	sub	r2,r3,r2
    7e9c:	a0800215 	stw	r2,8(r20)
    7ea0:	103fef1e 	bne	r2,zero,7e60 <__alt_data_end+0xff007e60>
    7ea4:	0005883a 	mov	r2,zero
    7ea8:	dfc00b17 	ldw	ra,44(sp)
    7eac:	df000a17 	ldw	fp,40(sp)
    7eb0:	ddc00917 	ldw	r23,36(sp)
    7eb4:	dd800817 	ldw	r22,32(sp)
    7eb8:	dd400717 	ldw	r21,28(sp)
    7ebc:	dd000617 	ldw	r20,24(sp)
    7ec0:	dcc00517 	ldw	r19,20(sp)
    7ec4:	dc800417 	ldw	r18,16(sp)
    7ec8:	dc400317 	ldw	r17,12(sp)
    7ecc:	dc000217 	ldw	r16,8(sp)
    7ed0:	dec00c04 	addi	sp,sp,48
    7ed4:	f800283a 	ret
    7ed8:	800b883a 	mov	r5,r16
    7edc:	a809883a 	mov	r4,r21
    7ee0:	00059980 	call	5998 <__swsetup_r>
    7ee4:	1000eb1e 	bne	r2,zero,8294 <__sfvwrite_r+0x4a4>
    7ee8:	80c0030b 	ldhu	r3,12(r16)
    7eec:	a4400017 	ldw	r17,0(r20)
    7ef0:	1880008c 	andi	r2,r3,2
    7ef4:	103fd61e 	bne	r2,zero,7e50 <__alt_data_end+0xff007e50>
    7ef8:	1880004c 	andi	r2,r3,1
    7efc:	10003f1e 	bne	r2,zero,7ffc <__sfvwrite_r+0x20c>
    7f00:	0039883a 	mov	fp,zero
    7f04:	0025883a 	mov	r18,zero
    7f08:	90001a26 	beq	r18,zero,7f74 <__sfvwrite_r+0x184>
    7f0c:	1880800c 	andi	r2,r3,512
    7f10:	84c00217 	ldw	r19,8(r16)
    7f14:	10002126 	beq	r2,zero,7f9c <__sfvwrite_r+0x1ac>
    7f18:	982f883a 	mov	r23,r19
    7f1c:	94c09336 	bltu	r18,r19,816c <__sfvwrite_r+0x37c>
    7f20:	1881200c 	andi	r2,r3,1152
    7f24:	10009e1e 	bne	r2,zero,81a0 <__sfvwrite_r+0x3b0>
    7f28:	81000017 	ldw	r4,0(r16)
    7f2c:	b80d883a 	mov	r6,r23
    7f30:	e00b883a 	mov	r5,fp
    7f34:	00088f80 	call	88f8 <memmove>
    7f38:	80c00217 	ldw	r3,8(r16)
    7f3c:	81000017 	ldw	r4,0(r16)
    7f40:	9005883a 	mov	r2,r18
    7f44:	1ce7c83a 	sub	r19,r3,r19
    7f48:	25cf883a 	add	r7,r4,r23
    7f4c:	84c00215 	stw	r19,8(r16)
    7f50:	81c00015 	stw	r7,0(r16)
    7f54:	a0c00217 	ldw	r3,8(r20)
    7f58:	e0b9883a 	add	fp,fp,r2
    7f5c:	90a5c83a 	sub	r18,r18,r2
    7f60:	18a7c83a 	sub	r19,r3,r2
    7f64:	a4c00215 	stw	r19,8(r20)
    7f68:	983fce26 	beq	r19,zero,7ea4 <__alt_data_end+0xff007ea4>
    7f6c:	80c0030b 	ldhu	r3,12(r16)
    7f70:	903fe61e 	bne	r18,zero,7f0c <__alt_data_end+0xff007f0c>
    7f74:	8f000017 	ldw	fp,0(r17)
    7f78:	8c800117 	ldw	r18,4(r17)
    7f7c:	8c400204 	addi	r17,r17,8
    7f80:	003fe106 	br	7f08 <__alt_data_end+0xff007f08>
    7f84:	8cc00017 	ldw	r19,0(r17)
    7f88:	8c800117 	ldw	r18,4(r17)
    7f8c:	8c400204 	addi	r17,r17,8
    7f90:	003fb306 	br	7e60 <__alt_data_end+0xff007e60>
    7f94:	0005883a 	mov	r2,zero
    7f98:	f800283a 	ret
    7f9c:	81000017 	ldw	r4,0(r16)
    7fa0:	80800417 	ldw	r2,16(r16)
    7fa4:	11005736 	bltu	r2,r4,8104 <__sfvwrite_r+0x314>
    7fa8:	85c00517 	ldw	r23,20(r16)
    7fac:	95c05536 	bltu	r18,r23,8104 <__sfvwrite_r+0x314>
    7fb0:	00a00034 	movhi	r2,32768
    7fb4:	10bfffc4 	addi	r2,r2,-1
    7fb8:	9009883a 	mov	r4,r18
    7fbc:	1480012e 	bgeu	r2,r18,7fc4 <__sfvwrite_r+0x1d4>
    7fc0:	1009883a 	mov	r4,r2
    7fc4:	b80b883a 	mov	r5,r23
    7fc8:	0002ab40 	call	2ab4 <__divsi3>
    7fcc:	15cf383a 	mul	r7,r2,r23
    7fd0:	81400717 	ldw	r5,28(r16)
    7fd4:	80800917 	ldw	r2,36(r16)
    7fd8:	e00d883a 	mov	r6,fp
    7fdc:	a809883a 	mov	r4,r21
    7fe0:	103ee83a 	callr	r2
    7fe4:	00bfdb16 	blt	zero,r2,7f54 <__alt_data_end+0xff007f54>
    7fe8:	8080030b 	ldhu	r2,12(r16)
    7fec:	10801014 	ori	r2,r2,64
    7ff0:	8080030d 	sth	r2,12(r16)
    7ff4:	00bfffc4 	movi	r2,-1
    7ff8:	003fab06 	br	7ea8 <__alt_data_end+0xff007ea8>
    7ffc:	0027883a 	mov	r19,zero
    8000:	0011883a 	mov	r8,zero
    8004:	0039883a 	mov	fp,zero
    8008:	0025883a 	mov	r18,zero
    800c:	90001f26 	beq	r18,zero,808c <__sfvwrite_r+0x29c>
    8010:	40005a26 	beq	r8,zero,817c <__sfvwrite_r+0x38c>
    8014:	982d883a 	mov	r22,r19
    8018:	94c0012e 	bgeu	r18,r19,8020 <__sfvwrite_r+0x230>
    801c:	902d883a 	mov	r22,r18
    8020:	81000017 	ldw	r4,0(r16)
    8024:	80800417 	ldw	r2,16(r16)
    8028:	b02f883a 	mov	r23,r22
    802c:	81c00517 	ldw	r7,20(r16)
    8030:	1100032e 	bgeu	r2,r4,8040 <__sfvwrite_r+0x250>
    8034:	80c00217 	ldw	r3,8(r16)
    8038:	38c7883a 	add	r3,r7,r3
    803c:	1d801816 	blt	r3,r22,80a0 <__sfvwrite_r+0x2b0>
    8040:	b1c03e16 	blt	r22,r7,813c <__sfvwrite_r+0x34c>
    8044:	80800917 	ldw	r2,36(r16)
    8048:	81400717 	ldw	r5,28(r16)
    804c:	e00d883a 	mov	r6,fp
    8050:	da000115 	stw	r8,4(sp)
    8054:	a809883a 	mov	r4,r21
    8058:	103ee83a 	callr	r2
    805c:	102f883a 	mov	r23,r2
    8060:	da000117 	ldw	r8,4(sp)
    8064:	00bfe00e 	bge	zero,r2,7fe8 <__alt_data_end+0xff007fe8>
    8068:	9de7c83a 	sub	r19,r19,r23
    806c:	98001f26 	beq	r19,zero,80ec <__sfvwrite_r+0x2fc>
    8070:	a0800217 	ldw	r2,8(r20)
    8074:	e5f9883a 	add	fp,fp,r23
    8078:	95e5c83a 	sub	r18,r18,r23
    807c:	15efc83a 	sub	r23,r2,r23
    8080:	a5c00215 	stw	r23,8(r20)
    8084:	b83f8726 	beq	r23,zero,7ea4 <__alt_data_end+0xff007ea4>
    8088:	903fe11e 	bne	r18,zero,8010 <__alt_data_end+0xff008010>
    808c:	8f000017 	ldw	fp,0(r17)
    8090:	8c800117 	ldw	r18,4(r17)
    8094:	0011883a 	mov	r8,zero
    8098:	8c400204 	addi	r17,r17,8
    809c:	003fdb06 	br	800c <__alt_data_end+0xff00800c>
    80a0:	180d883a 	mov	r6,r3
    80a4:	e00b883a 	mov	r5,fp
    80a8:	da000115 	stw	r8,4(sp)
    80ac:	d8c00015 	stw	r3,0(sp)
    80b0:	00088f80 	call	88f8 <memmove>
    80b4:	d8c00017 	ldw	r3,0(sp)
    80b8:	80800017 	ldw	r2,0(r16)
    80bc:	800b883a 	mov	r5,r16
    80c0:	a809883a 	mov	r4,r21
    80c4:	10c5883a 	add	r2,r2,r3
    80c8:	80800015 	stw	r2,0(r16)
    80cc:	d8c00015 	stw	r3,0(sp)
    80d0:	00075900 	call	7590 <_fflush_r>
    80d4:	d8c00017 	ldw	r3,0(sp)
    80d8:	da000117 	ldw	r8,4(sp)
    80dc:	103fc21e 	bne	r2,zero,7fe8 <__alt_data_end+0xff007fe8>
    80e0:	182f883a 	mov	r23,r3
    80e4:	9de7c83a 	sub	r19,r19,r23
    80e8:	983fe11e 	bne	r19,zero,8070 <__alt_data_end+0xff008070>
    80ec:	800b883a 	mov	r5,r16
    80f0:	a809883a 	mov	r4,r21
    80f4:	00075900 	call	7590 <_fflush_r>
    80f8:	103fbb1e 	bne	r2,zero,7fe8 <__alt_data_end+0xff007fe8>
    80fc:	0011883a 	mov	r8,zero
    8100:	003fdb06 	br	8070 <__alt_data_end+0xff008070>
    8104:	94c0012e 	bgeu	r18,r19,810c <__sfvwrite_r+0x31c>
    8108:	9027883a 	mov	r19,r18
    810c:	980d883a 	mov	r6,r19
    8110:	e00b883a 	mov	r5,fp
    8114:	00088f80 	call	88f8 <memmove>
    8118:	80800217 	ldw	r2,8(r16)
    811c:	80c00017 	ldw	r3,0(r16)
    8120:	14c5c83a 	sub	r2,r2,r19
    8124:	1cc7883a 	add	r3,r3,r19
    8128:	80800215 	stw	r2,8(r16)
    812c:	80c00015 	stw	r3,0(r16)
    8130:	10004326 	beq	r2,zero,8240 <__sfvwrite_r+0x450>
    8134:	9805883a 	mov	r2,r19
    8138:	003f8606 	br	7f54 <__alt_data_end+0xff007f54>
    813c:	b00d883a 	mov	r6,r22
    8140:	e00b883a 	mov	r5,fp
    8144:	da000115 	stw	r8,4(sp)
    8148:	00088f80 	call	88f8 <memmove>
    814c:	80800217 	ldw	r2,8(r16)
    8150:	80c00017 	ldw	r3,0(r16)
    8154:	da000117 	ldw	r8,4(sp)
    8158:	1585c83a 	sub	r2,r2,r22
    815c:	1dad883a 	add	r22,r3,r22
    8160:	80800215 	stw	r2,8(r16)
    8164:	85800015 	stw	r22,0(r16)
    8168:	003fbf06 	br	8068 <__alt_data_end+0xff008068>
    816c:	81000017 	ldw	r4,0(r16)
    8170:	9027883a 	mov	r19,r18
    8174:	902f883a 	mov	r23,r18
    8178:	003f6c06 	br	7f2c <__alt_data_end+0xff007f2c>
    817c:	900d883a 	mov	r6,r18
    8180:	01400284 	movi	r5,10
    8184:	e009883a 	mov	r4,fp
    8188:	00086cc0 	call	86cc <memchr>
    818c:	10003e26 	beq	r2,zero,8288 <__sfvwrite_r+0x498>
    8190:	10800044 	addi	r2,r2,1
    8194:	1727c83a 	sub	r19,r2,fp
    8198:	02000044 	movi	r8,1
    819c:	003f9d06 	br	8014 <__alt_data_end+0xff008014>
    81a0:	80800517 	ldw	r2,20(r16)
    81a4:	81400417 	ldw	r5,16(r16)
    81a8:	81c00017 	ldw	r7,0(r16)
    81ac:	10a7883a 	add	r19,r2,r2
    81b0:	9885883a 	add	r2,r19,r2
    81b4:	1026d7fa 	srli	r19,r2,31
    81b8:	396dc83a 	sub	r22,r7,r5
    81bc:	b1000044 	addi	r4,r22,1
    81c0:	9885883a 	add	r2,r19,r2
    81c4:	1027d07a 	srai	r19,r2,1
    81c8:	2485883a 	add	r2,r4,r18
    81cc:	980d883a 	mov	r6,r19
    81d0:	9880022e 	bgeu	r19,r2,81dc <__sfvwrite_r+0x3ec>
    81d4:	1027883a 	mov	r19,r2
    81d8:	100d883a 	mov	r6,r2
    81dc:	18c1000c 	andi	r3,r3,1024
    81e0:	18001c26 	beq	r3,zero,8254 <__sfvwrite_r+0x464>
    81e4:	300b883a 	mov	r5,r6
    81e8:	a809883a 	mov	r4,r21
    81ec:	0002c900 	call	2c90 <_malloc_r>
    81f0:	102f883a 	mov	r23,r2
    81f4:	10002926 	beq	r2,zero,829c <__sfvwrite_r+0x4ac>
    81f8:	81400417 	ldw	r5,16(r16)
    81fc:	b00d883a 	mov	r6,r22
    8200:	1009883a 	mov	r4,r2
    8204:	00087b00 	call	87b0 <memcpy>
    8208:	8080030b 	ldhu	r2,12(r16)
    820c:	00fedfc4 	movi	r3,-1153
    8210:	10c4703a 	and	r2,r2,r3
    8214:	10802014 	ori	r2,r2,128
    8218:	8080030d 	sth	r2,12(r16)
    821c:	bd89883a 	add	r4,r23,r22
    8220:	9d8fc83a 	sub	r7,r19,r22
    8224:	85c00415 	stw	r23,16(r16)
    8228:	84c00515 	stw	r19,20(r16)
    822c:	81000015 	stw	r4,0(r16)
    8230:	9027883a 	mov	r19,r18
    8234:	81c00215 	stw	r7,8(r16)
    8238:	902f883a 	mov	r23,r18
    823c:	003f3b06 	br	7f2c <__alt_data_end+0xff007f2c>
    8240:	800b883a 	mov	r5,r16
    8244:	a809883a 	mov	r4,r21
    8248:	00075900 	call	7590 <_fflush_r>
    824c:	103fb926 	beq	r2,zero,8134 <__alt_data_end+0xff008134>
    8250:	003f6506 	br	7fe8 <__alt_data_end+0xff007fe8>
    8254:	a809883a 	mov	r4,r21
    8258:	0009b780 	call	9b78 <_realloc_r>
    825c:	102f883a 	mov	r23,r2
    8260:	103fee1e 	bne	r2,zero,821c <__alt_data_end+0xff00821c>
    8264:	81400417 	ldw	r5,16(r16)
    8268:	a809883a 	mov	r4,r21
    826c:	0007ae00 	call	7ae0 <_free_r>
    8270:	8080030b 	ldhu	r2,12(r16)
    8274:	00ffdfc4 	movi	r3,-129
    8278:	1884703a 	and	r2,r3,r2
    827c:	00c00304 	movi	r3,12
    8280:	a8c00015 	stw	r3,0(r21)
    8284:	003f5906 	br	7fec <__alt_data_end+0xff007fec>
    8288:	94c00044 	addi	r19,r18,1
    828c:	02000044 	movi	r8,1
    8290:	003f6006 	br	8014 <__alt_data_end+0xff008014>
    8294:	00bfffc4 	movi	r2,-1
    8298:	003f0306 	br	7ea8 <__alt_data_end+0xff007ea8>
    829c:	00800304 	movi	r2,12
    82a0:	a8800015 	stw	r2,0(r21)
    82a4:	8080030b 	ldhu	r2,12(r16)
    82a8:	003f5006 	br	7fec <__alt_data_end+0xff007fec>

000082ac <_fwalk>:
    82ac:	defff704 	addi	sp,sp,-36
    82b0:	dd000415 	stw	r20,16(sp)
    82b4:	dfc00815 	stw	ra,32(sp)
    82b8:	ddc00715 	stw	r23,28(sp)
    82bc:	dd800615 	stw	r22,24(sp)
    82c0:	dd400515 	stw	r21,20(sp)
    82c4:	dcc00315 	stw	r19,12(sp)
    82c8:	dc800215 	stw	r18,8(sp)
    82cc:	dc400115 	stw	r17,4(sp)
    82d0:	dc000015 	stw	r16,0(sp)
    82d4:	2500b804 	addi	r20,r4,736
    82d8:	a0002326 	beq	r20,zero,8368 <_fwalk+0xbc>
    82dc:	282b883a 	mov	r21,r5
    82e0:	002f883a 	mov	r23,zero
    82e4:	05800044 	movi	r22,1
    82e8:	04ffffc4 	movi	r19,-1
    82ec:	a4400117 	ldw	r17,4(r20)
    82f0:	a4800217 	ldw	r18,8(r20)
    82f4:	8c7fffc4 	addi	r17,r17,-1
    82f8:	88000d16 	blt	r17,zero,8330 <_fwalk+0x84>
    82fc:	94000304 	addi	r16,r18,12
    8300:	94800384 	addi	r18,r18,14
    8304:	8080000b 	ldhu	r2,0(r16)
    8308:	8c7fffc4 	addi	r17,r17,-1
    830c:	813ffd04 	addi	r4,r16,-12
    8310:	b080042e 	bgeu	r22,r2,8324 <_fwalk+0x78>
    8314:	9080000f 	ldh	r2,0(r18)
    8318:	14c00226 	beq	r2,r19,8324 <_fwalk+0x78>
    831c:	a83ee83a 	callr	r21
    8320:	b8aeb03a 	or	r23,r23,r2
    8324:	84001a04 	addi	r16,r16,104
    8328:	94801a04 	addi	r18,r18,104
    832c:	8cfff51e 	bne	r17,r19,8304 <__alt_data_end+0xff008304>
    8330:	a5000017 	ldw	r20,0(r20)
    8334:	a03fed1e 	bne	r20,zero,82ec <__alt_data_end+0xff0082ec>
    8338:	b805883a 	mov	r2,r23
    833c:	dfc00817 	ldw	ra,32(sp)
    8340:	ddc00717 	ldw	r23,28(sp)
    8344:	dd800617 	ldw	r22,24(sp)
    8348:	dd400517 	ldw	r21,20(sp)
    834c:	dd000417 	ldw	r20,16(sp)
    8350:	dcc00317 	ldw	r19,12(sp)
    8354:	dc800217 	ldw	r18,8(sp)
    8358:	dc400117 	ldw	r17,4(sp)
    835c:	dc000017 	ldw	r16,0(sp)
    8360:	dec00904 	addi	sp,sp,36
    8364:	f800283a 	ret
    8368:	002f883a 	mov	r23,zero
    836c:	003ff206 	br	8338 <__alt_data_end+0xff008338>

00008370 <_fwalk_reent>:
    8370:	defff704 	addi	sp,sp,-36
    8374:	dd000415 	stw	r20,16(sp)
    8378:	dfc00815 	stw	ra,32(sp)
    837c:	ddc00715 	stw	r23,28(sp)
    8380:	dd800615 	stw	r22,24(sp)
    8384:	dd400515 	stw	r21,20(sp)
    8388:	dcc00315 	stw	r19,12(sp)
    838c:	dc800215 	stw	r18,8(sp)
    8390:	dc400115 	stw	r17,4(sp)
    8394:	dc000015 	stw	r16,0(sp)
    8398:	2500b804 	addi	r20,r4,736
    839c:	a0002326 	beq	r20,zero,842c <_fwalk_reent+0xbc>
    83a0:	282b883a 	mov	r21,r5
    83a4:	2027883a 	mov	r19,r4
    83a8:	002f883a 	mov	r23,zero
    83ac:	05800044 	movi	r22,1
    83b0:	04bfffc4 	movi	r18,-1
    83b4:	a4400117 	ldw	r17,4(r20)
    83b8:	a4000217 	ldw	r16,8(r20)
    83bc:	8c7fffc4 	addi	r17,r17,-1
    83c0:	88000c16 	blt	r17,zero,83f4 <_fwalk_reent+0x84>
    83c4:	84000304 	addi	r16,r16,12
    83c8:	8080000b 	ldhu	r2,0(r16)
    83cc:	8c7fffc4 	addi	r17,r17,-1
    83d0:	817ffd04 	addi	r5,r16,-12
    83d4:	b080052e 	bgeu	r22,r2,83ec <_fwalk_reent+0x7c>
    83d8:	8080008f 	ldh	r2,2(r16)
    83dc:	9809883a 	mov	r4,r19
    83e0:	14800226 	beq	r2,r18,83ec <_fwalk_reent+0x7c>
    83e4:	a83ee83a 	callr	r21
    83e8:	b8aeb03a 	or	r23,r23,r2
    83ec:	84001a04 	addi	r16,r16,104
    83f0:	8cbff51e 	bne	r17,r18,83c8 <__alt_data_end+0xff0083c8>
    83f4:	a5000017 	ldw	r20,0(r20)
    83f8:	a03fee1e 	bne	r20,zero,83b4 <__alt_data_end+0xff0083b4>
    83fc:	b805883a 	mov	r2,r23
    8400:	dfc00817 	ldw	ra,32(sp)
    8404:	ddc00717 	ldw	r23,28(sp)
    8408:	dd800617 	ldw	r22,24(sp)
    840c:	dd400517 	ldw	r21,20(sp)
    8410:	dd000417 	ldw	r20,16(sp)
    8414:	dcc00317 	ldw	r19,12(sp)
    8418:	dc800217 	ldw	r18,8(sp)
    841c:	dc400117 	ldw	r17,4(sp)
    8420:	dc000017 	ldw	r16,0(sp)
    8424:	dec00904 	addi	sp,sp,36
    8428:	f800283a 	ret
    842c:	002f883a 	mov	r23,zero
    8430:	003ff206 	br	83fc <__alt_data_end+0xff0083fc>

00008434 <_setlocale_r>:
    8434:	30001b26 	beq	r6,zero,84a4 <_setlocale_r+0x70>
    8438:	01400074 	movhi	r5,1
    843c:	defffe04 	addi	sp,sp,-8
    8440:	2948e204 	addi	r5,r5,9096
    8444:	3009883a 	mov	r4,r6
    8448:	dc000015 	stw	r16,0(sp)
    844c:	dfc00115 	stw	ra,4(sp)
    8450:	3021883a 	mov	r16,r6
    8454:	000a28c0 	call	a28c <strcmp>
    8458:	1000061e 	bne	r2,zero,8474 <_setlocale_r+0x40>
    845c:	00800074 	movhi	r2,1
    8460:	1088e104 	addi	r2,r2,9092
    8464:	dfc00117 	ldw	ra,4(sp)
    8468:	dc000017 	ldw	r16,0(sp)
    846c:	dec00204 	addi	sp,sp,8
    8470:	f800283a 	ret
    8474:	01400074 	movhi	r5,1
    8478:	2948e104 	addi	r5,r5,9092
    847c:	8009883a 	mov	r4,r16
    8480:	000a28c0 	call	a28c <strcmp>
    8484:	103ff526 	beq	r2,zero,845c <__alt_data_end+0xff00845c>
    8488:	01400074 	movhi	r5,1
    848c:	2948cc04 	addi	r5,r5,9008
    8490:	8009883a 	mov	r4,r16
    8494:	000a28c0 	call	a28c <strcmp>
    8498:	103ff026 	beq	r2,zero,845c <__alt_data_end+0xff00845c>
    849c:	0005883a 	mov	r2,zero
    84a0:	003ff006 	br	8464 <__alt_data_end+0xff008464>
    84a4:	00800074 	movhi	r2,1
    84a8:	1088e104 	addi	r2,r2,9092
    84ac:	f800283a 	ret

000084b0 <__locale_charset>:
    84b0:	00800074 	movhi	r2,1
    84b4:	108b9404 	addi	r2,r2,11856
    84b8:	f800283a 	ret

000084bc <__locale_mb_cur_max>:
    84bc:	00800074 	movhi	r2,1
    84c0:	10903204 	addi	r2,r2,16584
    84c4:	10800017 	ldw	r2,0(r2)
    84c8:	f800283a 	ret

000084cc <__locale_msgcharset>:
    84cc:	00800074 	movhi	r2,1
    84d0:	108b8c04 	addi	r2,r2,11824
    84d4:	f800283a 	ret

000084d8 <__locale_cjk_lang>:
    84d8:	0005883a 	mov	r2,zero
    84dc:	f800283a 	ret

000084e0 <_localeconv_r>:
    84e0:	00800074 	movhi	r2,1
    84e4:	108b9c04 	addi	r2,r2,11888
    84e8:	f800283a 	ret

000084ec <setlocale>:
    84ec:	00800074 	movhi	r2,1
    84f0:	10903104 	addi	r2,r2,16580
    84f4:	280d883a 	mov	r6,r5
    84f8:	200b883a 	mov	r5,r4
    84fc:	11000017 	ldw	r4,0(r2)
    8500:	00084341 	jmpi	8434 <_setlocale_r>

00008504 <localeconv>:
    8504:	00800074 	movhi	r2,1
    8508:	108b9c04 	addi	r2,r2,11888
    850c:	f800283a 	ret

00008510 <__smakebuf_r>:
    8510:	2880030b 	ldhu	r2,12(r5)
    8514:	10c0008c 	andi	r3,r2,2
    8518:	1800411e 	bne	r3,zero,8620 <__smakebuf_r+0x110>
    851c:	deffec04 	addi	sp,sp,-80
    8520:	dc000f15 	stw	r16,60(sp)
    8524:	2821883a 	mov	r16,r5
    8528:	2940038f 	ldh	r5,14(r5)
    852c:	dc401015 	stw	r17,64(sp)
    8530:	dfc01315 	stw	ra,76(sp)
    8534:	dcc01215 	stw	r19,72(sp)
    8538:	dc801115 	stw	r18,68(sp)
    853c:	2023883a 	mov	r17,r4
    8540:	28001c16 	blt	r5,zero,85b4 <__smakebuf_r+0xa4>
    8544:	d80d883a 	mov	r6,sp
    8548:	000be340 	call	be34 <_fstat_r>
    854c:	10001816 	blt	r2,zero,85b0 <__smakebuf_r+0xa0>
    8550:	d8800117 	ldw	r2,4(sp)
    8554:	00e00014 	movui	r3,32768
    8558:	10bc000c 	andi	r2,r2,61440
    855c:	14c80020 	cmpeqi	r19,r2,8192
    8560:	10c03726 	beq	r2,r3,8640 <__smakebuf_r+0x130>
    8564:	80c0030b 	ldhu	r3,12(r16)
    8568:	18c20014 	ori	r3,r3,2048
    856c:	80c0030d 	sth	r3,12(r16)
    8570:	00c80004 	movi	r3,8192
    8574:	10c0521e 	bne	r2,r3,86c0 <__smakebuf_r+0x1b0>
    8578:	8140038f 	ldh	r5,14(r16)
    857c:	8809883a 	mov	r4,r17
    8580:	000be900 	call	be90 <_isatty_r>
    8584:	10004c26 	beq	r2,zero,86b8 <__smakebuf_r+0x1a8>
    8588:	8080030b 	ldhu	r2,12(r16)
    858c:	80c010c4 	addi	r3,r16,67
    8590:	80c00015 	stw	r3,0(r16)
    8594:	10800054 	ori	r2,r2,1
    8598:	8080030d 	sth	r2,12(r16)
    859c:	00800044 	movi	r2,1
    85a0:	80c00415 	stw	r3,16(r16)
    85a4:	80800515 	stw	r2,20(r16)
    85a8:	04810004 	movi	r18,1024
    85ac:	00000706 	br	85cc <__smakebuf_r+0xbc>
    85b0:	8080030b 	ldhu	r2,12(r16)
    85b4:	10c0200c 	andi	r3,r2,128
    85b8:	18001f1e 	bne	r3,zero,8638 <__smakebuf_r+0x128>
    85bc:	04810004 	movi	r18,1024
    85c0:	10820014 	ori	r2,r2,2048
    85c4:	8080030d 	sth	r2,12(r16)
    85c8:	0027883a 	mov	r19,zero
    85cc:	900b883a 	mov	r5,r18
    85d0:	8809883a 	mov	r4,r17
    85d4:	0002c900 	call	2c90 <_malloc_r>
    85d8:	10002c26 	beq	r2,zero,868c <__smakebuf_r+0x17c>
    85dc:	80c0030b 	ldhu	r3,12(r16)
    85e0:	01000034 	movhi	r4,0
    85e4:	211d8904 	addi	r4,r4,30244
    85e8:	89000f15 	stw	r4,60(r17)
    85ec:	18c02014 	ori	r3,r3,128
    85f0:	80c0030d 	sth	r3,12(r16)
    85f4:	80800015 	stw	r2,0(r16)
    85f8:	80800415 	stw	r2,16(r16)
    85fc:	84800515 	stw	r18,20(r16)
    8600:	98001a1e 	bne	r19,zero,866c <__smakebuf_r+0x15c>
    8604:	dfc01317 	ldw	ra,76(sp)
    8608:	dcc01217 	ldw	r19,72(sp)
    860c:	dc801117 	ldw	r18,68(sp)
    8610:	dc401017 	ldw	r17,64(sp)
    8614:	dc000f17 	ldw	r16,60(sp)
    8618:	dec01404 	addi	sp,sp,80
    861c:	f800283a 	ret
    8620:	288010c4 	addi	r2,r5,67
    8624:	28800015 	stw	r2,0(r5)
    8628:	28800415 	stw	r2,16(r5)
    862c:	00800044 	movi	r2,1
    8630:	28800515 	stw	r2,20(r5)
    8634:	f800283a 	ret
    8638:	04801004 	movi	r18,64
    863c:	003fe006 	br	85c0 <__alt_data_end+0xff0085c0>
    8640:	81000a17 	ldw	r4,40(r16)
    8644:	00c00074 	movhi	r3,1
    8648:	18e88a04 	addi	r3,r3,-24024
    864c:	20ffc51e 	bne	r4,r3,8564 <__alt_data_end+0xff008564>
    8650:	8080030b 	ldhu	r2,12(r16)
    8654:	04810004 	movi	r18,1024
    8658:	84801315 	stw	r18,76(r16)
    865c:	1484b03a 	or	r2,r2,r18
    8660:	8080030d 	sth	r2,12(r16)
    8664:	0027883a 	mov	r19,zero
    8668:	003fd806 	br	85cc <__alt_data_end+0xff0085cc>
    866c:	8140038f 	ldh	r5,14(r16)
    8670:	8809883a 	mov	r4,r17
    8674:	000be900 	call	be90 <_isatty_r>
    8678:	103fe226 	beq	r2,zero,8604 <__alt_data_end+0xff008604>
    867c:	8080030b 	ldhu	r2,12(r16)
    8680:	10800054 	ori	r2,r2,1
    8684:	8080030d 	sth	r2,12(r16)
    8688:	003fde06 	br	8604 <__alt_data_end+0xff008604>
    868c:	8080030b 	ldhu	r2,12(r16)
    8690:	10c0800c 	andi	r3,r2,512
    8694:	183fdb1e 	bne	r3,zero,8604 <__alt_data_end+0xff008604>
    8698:	10800094 	ori	r2,r2,2
    869c:	80c010c4 	addi	r3,r16,67
    86a0:	8080030d 	sth	r2,12(r16)
    86a4:	00800044 	movi	r2,1
    86a8:	80c00015 	stw	r3,0(r16)
    86ac:	80c00415 	stw	r3,16(r16)
    86b0:	80800515 	stw	r2,20(r16)
    86b4:	003fd306 	br	8604 <__alt_data_end+0xff008604>
    86b8:	04810004 	movi	r18,1024
    86bc:	003fc306 	br	85cc <__alt_data_end+0xff0085cc>
    86c0:	0027883a 	mov	r19,zero
    86c4:	04810004 	movi	r18,1024
    86c8:	003fc006 	br	85cc <__alt_data_end+0xff0085cc>

000086cc <memchr>:
    86cc:	208000cc 	andi	r2,r4,3
    86d0:	280f883a 	mov	r7,r5
    86d4:	10003426 	beq	r2,zero,87a8 <memchr+0xdc>
    86d8:	30bfffc4 	addi	r2,r6,-1
    86dc:	30001a26 	beq	r6,zero,8748 <memchr+0x7c>
    86e0:	20c00003 	ldbu	r3,0(r4)
    86e4:	29803fcc 	andi	r6,r5,255
    86e8:	30c0051e 	bne	r6,r3,8700 <memchr+0x34>
    86ec:	00001806 	br	8750 <memchr+0x84>
    86f0:	10001526 	beq	r2,zero,8748 <memchr+0x7c>
    86f4:	20c00003 	ldbu	r3,0(r4)
    86f8:	10bfffc4 	addi	r2,r2,-1
    86fc:	30c01426 	beq	r6,r3,8750 <memchr+0x84>
    8700:	21000044 	addi	r4,r4,1
    8704:	20c000cc 	andi	r3,r4,3
    8708:	183ff91e 	bne	r3,zero,86f0 <__alt_data_end+0xff0086f0>
    870c:	020000c4 	movi	r8,3
    8710:	40801136 	bltu	r8,r2,8758 <memchr+0x8c>
    8714:	10000c26 	beq	r2,zero,8748 <memchr+0x7c>
    8718:	20c00003 	ldbu	r3,0(r4)
    871c:	29403fcc 	andi	r5,r5,255
    8720:	28c00b26 	beq	r5,r3,8750 <memchr+0x84>
    8724:	20c00044 	addi	r3,r4,1
    8728:	39803fcc 	andi	r6,r7,255
    872c:	2089883a 	add	r4,r4,r2
    8730:	00000306 	br	8740 <memchr+0x74>
    8734:	18c00044 	addi	r3,r3,1
    8738:	197fffc3 	ldbu	r5,-1(r3)
    873c:	31400526 	beq	r6,r5,8754 <memchr+0x88>
    8740:	1805883a 	mov	r2,r3
    8744:	20fffb1e 	bne	r4,r3,8734 <__alt_data_end+0xff008734>
    8748:	0005883a 	mov	r2,zero
    874c:	f800283a 	ret
    8750:	2005883a 	mov	r2,r4
    8754:	f800283a 	ret
    8758:	28c03fcc 	andi	r3,r5,255
    875c:	1812923a 	slli	r9,r3,8
    8760:	02ffbff4 	movhi	r11,65279
    8764:	02a02074 	movhi	r10,32897
    8768:	48d2b03a 	or	r9,r9,r3
    876c:	4806943a 	slli	r3,r9,16
    8770:	5affbfc4 	addi	r11,r11,-257
    8774:	52a02004 	addi	r10,r10,-32640
    8778:	48d2b03a 	or	r9,r9,r3
    877c:	20c00017 	ldw	r3,0(r4)
    8780:	48c6f03a 	xor	r3,r9,r3
    8784:	1acd883a 	add	r6,r3,r11
    8788:	00c6303a 	nor	r3,zero,r3
    878c:	30c6703a 	and	r3,r6,r3
    8790:	1a86703a 	and	r3,r3,r10
    8794:	183fe01e 	bne	r3,zero,8718 <__alt_data_end+0xff008718>
    8798:	10bfff04 	addi	r2,r2,-4
    879c:	21000104 	addi	r4,r4,4
    87a0:	40bff636 	bltu	r8,r2,877c <__alt_data_end+0xff00877c>
    87a4:	003fdb06 	br	8714 <__alt_data_end+0xff008714>
    87a8:	3005883a 	mov	r2,r6
    87ac:	003fd706 	br	870c <__alt_data_end+0xff00870c>

000087b0 <memcpy>:
    87b0:	defffd04 	addi	sp,sp,-12
    87b4:	dfc00215 	stw	ra,8(sp)
    87b8:	dc400115 	stw	r17,4(sp)
    87bc:	dc000015 	stw	r16,0(sp)
    87c0:	00c003c4 	movi	r3,15
    87c4:	2005883a 	mov	r2,r4
    87c8:	1980452e 	bgeu	r3,r6,88e0 <memcpy+0x130>
    87cc:	2906b03a 	or	r3,r5,r4
    87d0:	18c000cc 	andi	r3,r3,3
    87d4:	1800441e 	bne	r3,zero,88e8 <memcpy+0x138>
    87d8:	347ffc04 	addi	r17,r6,-16
    87dc:	8822d13a 	srli	r17,r17,4
    87e0:	28c00104 	addi	r3,r5,4
    87e4:	23400104 	addi	r13,r4,4
    87e8:	8820913a 	slli	r16,r17,4
    87ec:	2b000204 	addi	r12,r5,8
    87f0:	22c00204 	addi	r11,r4,8
    87f4:	84000504 	addi	r16,r16,20
    87f8:	2a800304 	addi	r10,r5,12
    87fc:	22400304 	addi	r9,r4,12
    8800:	2c21883a 	add	r16,r5,r16
    8804:	2811883a 	mov	r8,r5
    8808:	200f883a 	mov	r7,r4
    880c:	41000017 	ldw	r4,0(r8)
    8810:	1fc00017 	ldw	ra,0(r3)
    8814:	63c00017 	ldw	r15,0(r12)
    8818:	39000015 	stw	r4,0(r7)
    881c:	53800017 	ldw	r14,0(r10)
    8820:	6fc00015 	stw	ra,0(r13)
    8824:	5bc00015 	stw	r15,0(r11)
    8828:	4b800015 	stw	r14,0(r9)
    882c:	18c00404 	addi	r3,r3,16
    8830:	39c00404 	addi	r7,r7,16
    8834:	42000404 	addi	r8,r8,16
    8838:	6b400404 	addi	r13,r13,16
    883c:	63000404 	addi	r12,r12,16
    8840:	5ac00404 	addi	r11,r11,16
    8844:	52800404 	addi	r10,r10,16
    8848:	4a400404 	addi	r9,r9,16
    884c:	1c3fef1e 	bne	r3,r16,880c <__alt_data_end+0xff00880c>
    8850:	89c00044 	addi	r7,r17,1
    8854:	380e913a 	slli	r7,r7,4
    8858:	310003cc 	andi	r4,r6,15
    885c:	02c000c4 	movi	r11,3
    8860:	11c7883a 	add	r3,r2,r7
    8864:	29cb883a 	add	r5,r5,r7
    8868:	5900212e 	bgeu	r11,r4,88f0 <memcpy+0x140>
    886c:	1813883a 	mov	r9,r3
    8870:	2811883a 	mov	r8,r5
    8874:	200f883a 	mov	r7,r4
    8878:	42800017 	ldw	r10,0(r8)
    887c:	4a400104 	addi	r9,r9,4
    8880:	39ffff04 	addi	r7,r7,-4
    8884:	4abfff15 	stw	r10,-4(r9)
    8888:	42000104 	addi	r8,r8,4
    888c:	59fffa36 	bltu	r11,r7,8878 <__alt_data_end+0xff008878>
    8890:	213fff04 	addi	r4,r4,-4
    8894:	2008d0ba 	srli	r4,r4,2
    8898:	318000cc 	andi	r6,r6,3
    889c:	21000044 	addi	r4,r4,1
    88a0:	2109883a 	add	r4,r4,r4
    88a4:	2109883a 	add	r4,r4,r4
    88a8:	1907883a 	add	r3,r3,r4
    88ac:	290b883a 	add	r5,r5,r4
    88b0:	30000626 	beq	r6,zero,88cc <memcpy+0x11c>
    88b4:	198d883a 	add	r6,r3,r6
    88b8:	29c00003 	ldbu	r7,0(r5)
    88bc:	18c00044 	addi	r3,r3,1
    88c0:	29400044 	addi	r5,r5,1
    88c4:	19ffffc5 	stb	r7,-1(r3)
    88c8:	19bffb1e 	bne	r3,r6,88b8 <__alt_data_end+0xff0088b8>
    88cc:	dfc00217 	ldw	ra,8(sp)
    88d0:	dc400117 	ldw	r17,4(sp)
    88d4:	dc000017 	ldw	r16,0(sp)
    88d8:	dec00304 	addi	sp,sp,12
    88dc:	f800283a 	ret
    88e0:	2007883a 	mov	r3,r4
    88e4:	003ff206 	br	88b0 <__alt_data_end+0xff0088b0>
    88e8:	2007883a 	mov	r3,r4
    88ec:	003ff106 	br	88b4 <__alt_data_end+0xff0088b4>
    88f0:	200d883a 	mov	r6,r4
    88f4:	003fee06 	br	88b0 <__alt_data_end+0xff0088b0>

000088f8 <memmove>:
    88f8:	2005883a 	mov	r2,r4
    88fc:	29000b2e 	bgeu	r5,r4,892c <memmove+0x34>
    8900:	298f883a 	add	r7,r5,r6
    8904:	21c0092e 	bgeu	r4,r7,892c <memmove+0x34>
    8908:	2187883a 	add	r3,r4,r6
    890c:	198bc83a 	sub	r5,r3,r6
    8910:	30004826 	beq	r6,zero,8a34 <memmove+0x13c>
    8914:	39ffffc4 	addi	r7,r7,-1
    8918:	39000003 	ldbu	r4,0(r7)
    891c:	18ffffc4 	addi	r3,r3,-1
    8920:	19000005 	stb	r4,0(r3)
    8924:	28fffb1e 	bne	r5,r3,8914 <__alt_data_end+0xff008914>
    8928:	f800283a 	ret
    892c:	00c003c4 	movi	r3,15
    8930:	1980412e 	bgeu	r3,r6,8a38 <memmove+0x140>
    8934:	2886b03a 	or	r3,r5,r2
    8938:	18c000cc 	andi	r3,r3,3
    893c:	1800401e 	bne	r3,zero,8a40 <memmove+0x148>
    8940:	33fffc04 	addi	r15,r6,-16
    8944:	781ed13a 	srli	r15,r15,4
    8948:	28c00104 	addi	r3,r5,4
    894c:	13400104 	addi	r13,r2,4
    8950:	781c913a 	slli	r14,r15,4
    8954:	2b000204 	addi	r12,r5,8
    8958:	12c00204 	addi	r11,r2,8
    895c:	73800504 	addi	r14,r14,20
    8960:	2a800304 	addi	r10,r5,12
    8964:	12400304 	addi	r9,r2,12
    8968:	2b9d883a 	add	r14,r5,r14
    896c:	2811883a 	mov	r8,r5
    8970:	100f883a 	mov	r7,r2
    8974:	41000017 	ldw	r4,0(r8)
    8978:	39c00404 	addi	r7,r7,16
    897c:	18c00404 	addi	r3,r3,16
    8980:	393ffc15 	stw	r4,-16(r7)
    8984:	193ffc17 	ldw	r4,-16(r3)
    8988:	6b400404 	addi	r13,r13,16
    898c:	5ac00404 	addi	r11,r11,16
    8990:	693ffc15 	stw	r4,-16(r13)
    8994:	61000017 	ldw	r4,0(r12)
    8998:	4a400404 	addi	r9,r9,16
    899c:	42000404 	addi	r8,r8,16
    89a0:	593ffc15 	stw	r4,-16(r11)
    89a4:	51000017 	ldw	r4,0(r10)
    89a8:	63000404 	addi	r12,r12,16
    89ac:	52800404 	addi	r10,r10,16
    89b0:	493ffc15 	stw	r4,-16(r9)
    89b4:	1bbfef1e 	bne	r3,r14,8974 <__alt_data_end+0xff008974>
    89b8:	79000044 	addi	r4,r15,1
    89bc:	2008913a 	slli	r4,r4,4
    89c0:	328003cc 	andi	r10,r6,15
    89c4:	02c000c4 	movi	r11,3
    89c8:	1107883a 	add	r3,r2,r4
    89cc:	290b883a 	add	r5,r5,r4
    89d0:	5a801e2e 	bgeu	r11,r10,8a4c <memmove+0x154>
    89d4:	1813883a 	mov	r9,r3
    89d8:	2811883a 	mov	r8,r5
    89dc:	500f883a 	mov	r7,r10
    89e0:	41000017 	ldw	r4,0(r8)
    89e4:	4a400104 	addi	r9,r9,4
    89e8:	39ffff04 	addi	r7,r7,-4
    89ec:	493fff15 	stw	r4,-4(r9)
    89f0:	42000104 	addi	r8,r8,4
    89f4:	59fffa36 	bltu	r11,r7,89e0 <__alt_data_end+0xff0089e0>
    89f8:	513fff04 	addi	r4,r10,-4
    89fc:	2008d0ba 	srli	r4,r4,2
    8a00:	318000cc 	andi	r6,r6,3
    8a04:	21000044 	addi	r4,r4,1
    8a08:	2109883a 	add	r4,r4,r4
    8a0c:	2109883a 	add	r4,r4,r4
    8a10:	1907883a 	add	r3,r3,r4
    8a14:	290b883a 	add	r5,r5,r4
    8a18:	30000b26 	beq	r6,zero,8a48 <memmove+0x150>
    8a1c:	198d883a 	add	r6,r3,r6
    8a20:	29c00003 	ldbu	r7,0(r5)
    8a24:	18c00044 	addi	r3,r3,1
    8a28:	29400044 	addi	r5,r5,1
    8a2c:	19ffffc5 	stb	r7,-1(r3)
    8a30:	19bffb1e 	bne	r3,r6,8a20 <__alt_data_end+0xff008a20>
    8a34:	f800283a 	ret
    8a38:	1007883a 	mov	r3,r2
    8a3c:	003ff606 	br	8a18 <__alt_data_end+0xff008a18>
    8a40:	1007883a 	mov	r3,r2
    8a44:	003ff506 	br	8a1c <__alt_data_end+0xff008a1c>
    8a48:	f800283a 	ret
    8a4c:	500d883a 	mov	r6,r10
    8a50:	003ff106 	br	8a18 <__alt_data_end+0xff008a18>

00008a54 <memset>:
    8a54:	20c000cc 	andi	r3,r4,3
    8a58:	2005883a 	mov	r2,r4
    8a5c:	18004426 	beq	r3,zero,8b70 <memset+0x11c>
    8a60:	31ffffc4 	addi	r7,r6,-1
    8a64:	30004026 	beq	r6,zero,8b68 <memset+0x114>
    8a68:	2813883a 	mov	r9,r5
    8a6c:	200d883a 	mov	r6,r4
    8a70:	2007883a 	mov	r3,r4
    8a74:	00000406 	br	8a88 <memset+0x34>
    8a78:	3a3fffc4 	addi	r8,r7,-1
    8a7c:	31800044 	addi	r6,r6,1
    8a80:	38003926 	beq	r7,zero,8b68 <memset+0x114>
    8a84:	400f883a 	mov	r7,r8
    8a88:	18c00044 	addi	r3,r3,1
    8a8c:	32400005 	stb	r9,0(r6)
    8a90:	1a0000cc 	andi	r8,r3,3
    8a94:	403ff81e 	bne	r8,zero,8a78 <__alt_data_end+0xff008a78>
    8a98:	010000c4 	movi	r4,3
    8a9c:	21c02d2e 	bgeu	r4,r7,8b54 <memset+0x100>
    8aa0:	29003fcc 	andi	r4,r5,255
    8aa4:	200c923a 	slli	r6,r4,8
    8aa8:	3108b03a 	or	r4,r6,r4
    8aac:	200c943a 	slli	r6,r4,16
    8ab0:	218cb03a 	or	r6,r4,r6
    8ab4:	010003c4 	movi	r4,15
    8ab8:	21c0182e 	bgeu	r4,r7,8b1c <memset+0xc8>
    8abc:	3b3ffc04 	addi	r12,r7,-16
    8ac0:	6018d13a 	srli	r12,r12,4
    8ac4:	1a000104 	addi	r8,r3,4
    8ac8:	1ac00204 	addi	r11,r3,8
    8acc:	6008913a 	slli	r4,r12,4
    8ad0:	1a800304 	addi	r10,r3,12
    8ad4:	1813883a 	mov	r9,r3
    8ad8:	21000504 	addi	r4,r4,20
    8adc:	1909883a 	add	r4,r3,r4
    8ae0:	49800015 	stw	r6,0(r9)
    8ae4:	41800015 	stw	r6,0(r8)
    8ae8:	59800015 	stw	r6,0(r11)
    8aec:	51800015 	stw	r6,0(r10)
    8af0:	42000404 	addi	r8,r8,16
    8af4:	4a400404 	addi	r9,r9,16
    8af8:	5ac00404 	addi	r11,r11,16
    8afc:	52800404 	addi	r10,r10,16
    8b00:	413ff71e 	bne	r8,r4,8ae0 <__alt_data_end+0xff008ae0>
    8b04:	63000044 	addi	r12,r12,1
    8b08:	6018913a 	slli	r12,r12,4
    8b0c:	39c003cc 	andi	r7,r7,15
    8b10:	010000c4 	movi	r4,3
    8b14:	1b07883a 	add	r3,r3,r12
    8b18:	21c00e2e 	bgeu	r4,r7,8b54 <memset+0x100>
    8b1c:	1813883a 	mov	r9,r3
    8b20:	3811883a 	mov	r8,r7
    8b24:	010000c4 	movi	r4,3
    8b28:	49800015 	stw	r6,0(r9)
    8b2c:	423fff04 	addi	r8,r8,-4
    8b30:	4a400104 	addi	r9,r9,4
    8b34:	223ffc36 	bltu	r4,r8,8b28 <__alt_data_end+0xff008b28>
    8b38:	393fff04 	addi	r4,r7,-4
    8b3c:	2008d0ba 	srli	r4,r4,2
    8b40:	39c000cc 	andi	r7,r7,3
    8b44:	21000044 	addi	r4,r4,1
    8b48:	2109883a 	add	r4,r4,r4
    8b4c:	2109883a 	add	r4,r4,r4
    8b50:	1907883a 	add	r3,r3,r4
    8b54:	38000526 	beq	r7,zero,8b6c <memset+0x118>
    8b58:	19cf883a 	add	r7,r3,r7
    8b5c:	19400005 	stb	r5,0(r3)
    8b60:	18c00044 	addi	r3,r3,1
    8b64:	38fffd1e 	bne	r7,r3,8b5c <__alt_data_end+0xff008b5c>
    8b68:	f800283a 	ret
    8b6c:	f800283a 	ret
    8b70:	2007883a 	mov	r3,r4
    8b74:	300f883a 	mov	r7,r6
    8b78:	003fc706 	br	8a98 <__alt_data_end+0xff008a98>

00008b7c <_Balloc>:
    8b7c:	20801317 	ldw	r2,76(r4)
    8b80:	defffc04 	addi	sp,sp,-16
    8b84:	dc400115 	stw	r17,4(sp)
    8b88:	dc000015 	stw	r16,0(sp)
    8b8c:	dfc00315 	stw	ra,12(sp)
    8b90:	dc800215 	stw	r18,8(sp)
    8b94:	2023883a 	mov	r17,r4
    8b98:	2821883a 	mov	r16,r5
    8b9c:	10000f26 	beq	r2,zero,8bdc <_Balloc+0x60>
    8ba0:	8407883a 	add	r3,r16,r16
    8ba4:	18c7883a 	add	r3,r3,r3
    8ba8:	10c7883a 	add	r3,r2,r3
    8bac:	18800017 	ldw	r2,0(r3)
    8bb0:	10001126 	beq	r2,zero,8bf8 <_Balloc+0x7c>
    8bb4:	11000017 	ldw	r4,0(r2)
    8bb8:	19000015 	stw	r4,0(r3)
    8bbc:	10000415 	stw	zero,16(r2)
    8bc0:	10000315 	stw	zero,12(r2)
    8bc4:	dfc00317 	ldw	ra,12(sp)
    8bc8:	dc800217 	ldw	r18,8(sp)
    8bcc:	dc400117 	ldw	r17,4(sp)
    8bd0:	dc000017 	ldw	r16,0(sp)
    8bd4:	dec00404 	addi	sp,sp,16
    8bd8:	f800283a 	ret
    8bdc:	01800844 	movi	r6,33
    8be0:	01400104 	movi	r5,4
    8be4:	000ba640 	call	ba64 <_calloc_r>
    8be8:	88801315 	stw	r2,76(r17)
    8bec:	103fec1e 	bne	r2,zero,8ba0 <__alt_data_end+0xff008ba0>
    8bf0:	0005883a 	mov	r2,zero
    8bf4:	003ff306 	br	8bc4 <__alt_data_end+0xff008bc4>
    8bf8:	01400044 	movi	r5,1
    8bfc:	2c24983a 	sll	r18,r5,r16
    8c00:	8809883a 	mov	r4,r17
    8c04:	91800144 	addi	r6,r18,5
    8c08:	318d883a 	add	r6,r6,r6
    8c0c:	318d883a 	add	r6,r6,r6
    8c10:	000ba640 	call	ba64 <_calloc_r>
    8c14:	103ff626 	beq	r2,zero,8bf0 <__alt_data_end+0xff008bf0>
    8c18:	14000115 	stw	r16,4(r2)
    8c1c:	14800215 	stw	r18,8(r2)
    8c20:	003fe606 	br	8bbc <__alt_data_end+0xff008bbc>

00008c24 <_Bfree>:
    8c24:	28000826 	beq	r5,zero,8c48 <_Bfree+0x24>
    8c28:	28c00117 	ldw	r3,4(r5)
    8c2c:	20801317 	ldw	r2,76(r4)
    8c30:	18c7883a 	add	r3,r3,r3
    8c34:	18c7883a 	add	r3,r3,r3
    8c38:	10c5883a 	add	r2,r2,r3
    8c3c:	10c00017 	ldw	r3,0(r2)
    8c40:	28c00015 	stw	r3,0(r5)
    8c44:	11400015 	stw	r5,0(r2)
    8c48:	f800283a 	ret

00008c4c <__multadd>:
    8c4c:	defffa04 	addi	sp,sp,-24
    8c50:	dc800315 	stw	r18,12(sp)
    8c54:	dc400215 	stw	r17,8(sp)
    8c58:	dc000115 	stw	r16,4(sp)
    8c5c:	2823883a 	mov	r17,r5
    8c60:	2c000417 	ldw	r16,16(r5)
    8c64:	dfc00515 	stw	ra,20(sp)
    8c68:	dcc00415 	stw	r19,16(sp)
    8c6c:	2025883a 	mov	r18,r4
    8c70:	29400504 	addi	r5,r5,20
    8c74:	0011883a 	mov	r8,zero
    8c78:	28c00017 	ldw	r3,0(r5)
    8c7c:	29400104 	addi	r5,r5,4
    8c80:	42000044 	addi	r8,r8,1
    8c84:	18bfffcc 	andi	r2,r3,65535
    8c88:	1185383a 	mul	r2,r2,r6
    8c8c:	1806d43a 	srli	r3,r3,16
    8c90:	11cf883a 	add	r7,r2,r7
    8c94:	3808d43a 	srli	r4,r7,16
    8c98:	1987383a 	mul	r3,r3,r6
    8c9c:	38bfffcc 	andi	r2,r7,65535
    8ca0:	1907883a 	add	r3,r3,r4
    8ca4:	1808943a 	slli	r4,r3,16
    8ca8:	180ed43a 	srli	r7,r3,16
    8cac:	2085883a 	add	r2,r4,r2
    8cb0:	28bfff15 	stw	r2,-4(r5)
    8cb4:	443ff016 	blt	r8,r16,8c78 <__alt_data_end+0xff008c78>
    8cb8:	38000926 	beq	r7,zero,8ce0 <__multadd+0x94>
    8cbc:	88800217 	ldw	r2,8(r17)
    8cc0:	80800f0e 	bge	r16,r2,8d00 <__multadd+0xb4>
    8cc4:	80800144 	addi	r2,r16,5
    8cc8:	1085883a 	add	r2,r2,r2
    8ccc:	1085883a 	add	r2,r2,r2
    8cd0:	8885883a 	add	r2,r17,r2
    8cd4:	11c00015 	stw	r7,0(r2)
    8cd8:	84000044 	addi	r16,r16,1
    8cdc:	8c000415 	stw	r16,16(r17)
    8ce0:	8805883a 	mov	r2,r17
    8ce4:	dfc00517 	ldw	ra,20(sp)
    8ce8:	dcc00417 	ldw	r19,16(sp)
    8cec:	dc800317 	ldw	r18,12(sp)
    8cf0:	dc400217 	ldw	r17,8(sp)
    8cf4:	dc000117 	ldw	r16,4(sp)
    8cf8:	dec00604 	addi	sp,sp,24
    8cfc:	f800283a 	ret
    8d00:	89400117 	ldw	r5,4(r17)
    8d04:	9009883a 	mov	r4,r18
    8d08:	d9c00015 	stw	r7,0(sp)
    8d0c:	29400044 	addi	r5,r5,1
    8d10:	0008b7c0 	call	8b7c <_Balloc>
    8d14:	89800417 	ldw	r6,16(r17)
    8d18:	89400304 	addi	r5,r17,12
    8d1c:	11000304 	addi	r4,r2,12
    8d20:	31800084 	addi	r6,r6,2
    8d24:	318d883a 	add	r6,r6,r6
    8d28:	318d883a 	add	r6,r6,r6
    8d2c:	1027883a 	mov	r19,r2
    8d30:	00087b00 	call	87b0 <memcpy>
    8d34:	d9c00017 	ldw	r7,0(sp)
    8d38:	88000a26 	beq	r17,zero,8d64 <__multadd+0x118>
    8d3c:	88c00117 	ldw	r3,4(r17)
    8d40:	90801317 	ldw	r2,76(r18)
    8d44:	18c7883a 	add	r3,r3,r3
    8d48:	18c7883a 	add	r3,r3,r3
    8d4c:	10c5883a 	add	r2,r2,r3
    8d50:	10c00017 	ldw	r3,0(r2)
    8d54:	88c00015 	stw	r3,0(r17)
    8d58:	14400015 	stw	r17,0(r2)
    8d5c:	9823883a 	mov	r17,r19
    8d60:	003fd806 	br	8cc4 <__alt_data_end+0xff008cc4>
    8d64:	9823883a 	mov	r17,r19
    8d68:	003fd606 	br	8cc4 <__alt_data_end+0xff008cc4>

00008d6c <__s2b>:
    8d6c:	defff904 	addi	sp,sp,-28
    8d70:	dc400115 	stw	r17,4(sp)
    8d74:	dc000015 	stw	r16,0(sp)
    8d78:	2023883a 	mov	r17,r4
    8d7c:	2821883a 	mov	r16,r5
    8d80:	39000204 	addi	r4,r7,8
    8d84:	01400244 	movi	r5,9
    8d88:	dcc00315 	stw	r19,12(sp)
    8d8c:	dc800215 	stw	r18,8(sp)
    8d90:	dfc00615 	stw	ra,24(sp)
    8d94:	dd400515 	stw	r21,20(sp)
    8d98:	dd000415 	stw	r20,16(sp)
    8d9c:	3825883a 	mov	r18,r7
    8da0:	3027883a 	mov	r19,r6
    8da4:	0002ab40 	call	2ab4 <__divsi3>
    8da8:	00c00044 	movi	r3,1
    8dac:	000b883a 	mov	r5,zero
    8db0:	1880030e 	bge	r3,r2,8dc0 <__s2b+0x54>
    8db4:	18c7883a 	add	r3,r3,r3
    8db8:	29400044 	addi	r5,r5,1
    8dbc:	18bffd16 	blt	r3,r2,8db4 <__alt_data_end+0xff008db4>
    8dc0:	8809883a 	mov	r4,r17
    8dc4:	0008b7c0 	call	8b7c <_Balloc>
    8dc8:	d8c00717 	ldw	r3,28(sp)
    8dcc:	10c00515 	stw	r3,20(r2)
    8dd0:	00c00044 	movi	r3,1
    8dd4:	10c00415 	stw	r3,16(r2)
    8dd8:	00c00244 	movi	r3,9
    8ddc:	1cc0210e 	bge	r3,r19,8e64 <__s2b+0xf8>
    8de0:	80eb883a 	add	r21,r16,r3
    8de4:	a829883a 	mov	r20,r21
    8de8:	84e1883a 	add	r16,r16,r19
    8dec:	a1c00007 	ldb	r7,0(r20)
    8df0:	01800284 	movi	r6,10
    8df4:	a5000044 	addi	r20,r20,1
    8df8:	100b883a 	mov	r5,r2
    8dfc:	39fff404 	addi	r7,r7,-48
    8e00:	8809883a 	mov	r4,r17
    8e04:	0008c4c0 	call	8c4c <__multadd>
    8e08:	a43ff81e 	bne	r20,r16,8dec <__alt_data_end+0xff008dec>
    8e0c:	ace1883a 	add	r16,r21,r19
    8e10:	843ffe04 	addi	r16,r16,-8
    8e14:	9c800a0e 	bge	r19,r18,8e40 <__s2b+0xd4>
    8e18:	94e5c83a 	sub	r18,r18,r19
    8e1c:	84a5883a 	add	r18,r16,r18
    8e20:	81c00007 	ldb	r7,0(r16)
    8e24:	01800284 	movi	r6,10
    8e28:	84000044 	addi	r16,r16,1
    8e2c:	100b883a 	mov	r5,r2
    8e30:	39fff404 	addi	r7,r7,-48
    8e34:	8809883a 	mov	r4,r17
    8e38:	0008c4c0 	call	8c4c <__multadd>
    8e3c:	84bff81e 	bne	r16,r18,8e20 <__alt_data_end+0xff008e20>
    8e40:	dfc00617 	ldw	ra,24(sp)
    8e44:	dd400517 	ldw	r21,20(sp)
    8e48:	dd000417 	ldw	r20,16(sp)
    8e4c:	dcc00317 	ldw	r19,12(sp)
    8e50:	dc800217 	ldw	r18,8(sp)
    8e54:	dc400117 	ldw	r17,4(sp)
    8e58:	dc000017 	ldw	r16,0(sp)
    8e5c:	dec00704 	addi	sp,sp,28
    8e60:	f800283a 	ret
    8e64:	84000284 	addi	r16,r16,10
    8e68:	1827883a 	mov	r19,r3
    8e6c:	003fe906 	br	8e14 <__alt_data_end+0xff008e14>

00008e70 <__hi0bits>:
    8e70:	20bfffec 	andhi	r2,r4,65535
    8e74:	1000141e 	bne	r2,zero,8ec8 <__hi0bits+0x58>
    8e78:	2008943a 	slli	r4,r4,16
    8e7c:	00800404 	movi	r2,16
    8e80:	20ffc02c 	andhi	r3,r4,65280
    8e84:	1800021e 	bne	r3,zero,8e90 <__hi0bits+0x20>
    8e88:	2008923a 	slli	r4,r4,8
    8e8c:	10800204 	addi	r2,r2,8
    8e90:	20fc002c 	andhi	r3,r4,61440
    8e94:	1800021e 	bne	r3,zero,8ea0 <__hi0bits+0x30>
    8e98:	2008913a 	slli	r4,r4,4
    8e9c:	10800104 	addi	r2,r2,4
    8ea0:	20f0002c 	andhi	r3,r4,49152
    8ea4:	1800031e 	bne	r3,zero,8eb4 <__hi0bits+0x44>
    8ea8:	2109883a 	add	r4,r4,r4
    8eac:	10800084 	addi	r2,r2,2
    8eb0:	2109883a 	add	r4,r4,r4
    8eb4:	20000316 	blt	r4,zero,8ec4 <__hi0bits+0x54>
    8eb8:	2110002c 	andhi	r4,r4,16384
    8ebc:	2000041e 	bne	r4,zero,8ed0 <__hi0bits+0x60>
    8ec0:	00800804 	movi	r2,32
    8ec4:	f800283a 	ret
    8ec8:	0005883a 	mov	r2,zero
    8ecc:	003fec06 	br	8e80 <__alt_data_end+0xff008e80>
    8ed0:	10800044 	addi	r2,r2,1
    8ed4:	f800283a 	ret

00008ed8 <__lo0bits>:
    8ed8:	20c00017 	ldw	r3,0(r4)
    8edc:	188001cc 	andi	r2,r3,7
    8ee0:	10000826 	beq	r2,zero,8f04 <__lo0bits+0x2c>
    8ee4:	1880004c 	andi	r2,r3,1
    8ee8:	1000211e 	bne	r2,zero,8f70 <__lo0bits+0x98>
    8eec:	1880008c 	andi	r2,r3,2
    8ef0:	1000211e 	bne	r2,zero,8f78 <__lo0bits+0xa0>
    8ef4:	1806d0ba 	srli	r3,r3,2
    8ef8:	00800084 	movi	r2,2
    8efc:	20c00015 	stw	r3,0(r4)
    8f00:	f800283a 	ret
    8f04:	18bfffcc 	andi	r2,r3,65535
    8f08:	10001326 	beq	r2,zero,8f58 <__lo0bits+0x80>
    8f0c:	0005883a 	mov	r2,zero
    8f10:	19403fcc 	andi	r5,r3,255
    8f14:	2800021e 	bne	r5,zero,8f20 <__lo0bits+0x48>
    8f18:	1806d23a 	srli	r3,r3,8
    8f1c:	10800204 	addi	r2,r2,8
    8f20:	194003cc 	andi	r5,r3,15
    8f24:	2800021e 	bne	r5,zero,8f30 <__lo0bits+0x58>
    8f28:	1806d13a 	srli	r3,r3,4
    8f2c:	10800104 	addi	r2,r2,4
    8f30:	194000cc 	andi	r5,r3,3
    8f34:	2800021e 	bne	r5,zero,8f40 <__lo0bits+0x68>
    8f38:	1806d0ba 	srli	r3,r3,2
    8f3c:	10800084 	addi	r2,r2,2
    8f40:	1940004c 	andi	r5,r3,1
    8f44:	2800081e 	bne	r5,zero,8f68 <__lo0bits+0x90>
    8f48:	1806d07a 	srli	r3,r3,1
    8f4c:	1800051e 	bne	r3,zero,8f64 <__lo0bits+0x8c>
    8f50:	00800804 	movi	r2,32
    8f54:	f800283a 	ret
    8f58:	1806d43a 	srli	r3,r3,16
    8f5c:	00800404 	movi	r2,16
    8f60:	003feb06 	br	8f10 <__alt_data_end+0xff008f10>
    8f64:	10800044 	addi	r2,r2,1
    8f68:	20c00015 	stw	r3,0(r4)
    8f6c:	f800283a 	ret
    8f70:	0005883a 	mov	r2,zero
    8f74:	f800283a 	ret
    8f78:	1806d07a 	srli	r3,r3,1
    8f7c:	00800044 	movi	r2,1
    8f80:	20c00015 	stw	r3,0(r4)
    8f84:	f800283a 	ret

00008f88 <__i2b>:
    8f88:	defffd04 	addi	sp,sp,-12
    8f8c:	dc000015 	stw	r16,0(sp)
    8f90:	04000044 	movi	r16,1
    8f94:	dc400115 	stw	r17,4(sp)
    8f98:	2823883a 	mov	r17,r5
    8f9c:	800b883a 	mov	r5,r16
    8fa0:	dfc00215 	stw	ra,8(sp)
    8fa4:	0008b7c0 	call	8b7c <_Balloc>
    8fa8:	14400515 	stw	r17,20(r2)
    8fac:	14000415 	stw	r16,16(r2)
    8fb0:	dfc00217 	ldw	ra,8(sp)
    8fb4:	dc400117 	ldw	r17,4(sp)
    8fb8:	dc000017 	ldw	r16,0(sp)
    8fbc:	dec00304 	addi	sp,sp,12
    8fc0:	f800283a 	ret

00008fc4 <__multiply>:
    8fc4:	defffa04 	addi	sp,sp,-24
    8fc8:	dcc00315 	stw	r19,12(sp)
    8fcc:	dc800215 	stw	r18,8(sp)
    8fd0:	34c00417 	ldw	r19,16(r6)
    8fd4:	2c800417 	ldw	r18,16(r5)
    8fd8:	dd000415 	stw	r20,16(sp)
    8fdc:	dc400115 	stw	r17,4(sp)
    8fe0:	dfc00515 	stw	ra,20(sp)
    8fe4:	dc000015 	stw	r16,0(sp)
    8fe8:	2829883a 	mov	r20,r5
    8fec:	3023883a 	mov	r17,r6
    8ff0:	94c0050e 	bge	r18,r19,9008 <__multiply+0x44>
    8ff4:	9007883a 	mov	r3,r18
    8ff8:	3029883a 	mov	r20,r6
    8ffc:	9825883a 	mov	r18,r19
    9000:	2823883a 	mov	r17,r5
    9004:	1827883a 	mov	r19,r3
    9008:	a0800217 	ldw	r2,8(r20)
    900c:	94e1883a 	add	r16,r18,r19
    9010:	a1400117 	ldw	r5,4(r20)
    9014:	1400010e 	bge	r2,r16,901c <__multiply+0x58>
    9018:	29400044 	addi	r5,r5,1
    901c:	0008b7c0 	call	8b7c <_Balloc>
    9020:	8415883a 	add	r10,r16,r16
    9024:	12c00504 	addi	r11,r2,20
    9028:	5295883a 	add	r10,r10,r10
    902c:	5a95883a 	add	r10,r11,r10
    9030:	5807883a 	mov	r3,r11
    9034:	5a80032e 	bgeu	r11,r10,9044 <__multiply+0x80>
    9038:	18000015 	stw	zero,0(r3)
    903c:	18c00104 	addi	r3,r3,4
    9040:	1abffd36 	bltu	r3,r10,9038 <__alt_data_end+0xff009038>
    9044:	9ce7883a 	add	r19,r19,r19
    9048:	94a5883a 	add	r18,r18,r18
    904c:	89800504 	addi	r6,r17,20
    9050:	9ce7883a 	add	r19,r19,r19
    9054:	a3400504 	addi	r13,r20,20
    9058:	94a5883a 	add	r18,r18,r18
    905c:	34d9883a 	add	r12,r6,r19
    9060:	6c93883a 	add	r9,r13,r18
    9064:	3300422e 	bgeu	r6,r12,9170 <__multiply+0x1ac>
    9068:	37c00017 	ldw	ra,0(r6)
    906c:	fbffffcc 	andi	r15,ra,65535
    9070:	78001b26 	beq	r15,zero,90e0 <__multiply+0x11c>
    9074:	5811883a 	mov	r8,r11
    9078:	681d883a 	mov	r14,r13
    907c:	000f883a 	mov	r7,zero
    9080:	71000017 	ldw	r4,0(r14)
    9084:	40c00017 	ldw	r3,0(r8)
    9088:	73800104 	addi	r14,r14,4
    908c:	217fffcc 	andi	r5,r4,65535
    9090:	2bcb383a 	mul	r5,r5,r15
    9094:	2008d43a 	srli	r4,r4,16
    9098:	1c7fffcc 	andi	r17,r3,65535
    909c:	2c4b883a 	add	r5,r5,r17
    90a0:	29cb883a 	add	r5,r5,r7
    90a4:	23c9383a 	mul	r4,r4,r15
    90a8:	1806d43a 	srli	r3,r3,16
    90ac:	280ed43a 	srli	r7,r5,16
    90b0:	297fffcc 	andi	r5,r5,65535
    90b4:	20c7883a 	add	r3,r4,r3
    90b8:	19c7883a 	add	r3,r3,r7
    90bc:	1808943a 	slli	r4,r3,16
    90c0:	4023883a 	mov	r17,r8
    90c4:	180ed43a 	srli	r7,r3,16
    90c8:	214ab03a 	or	r5,r4,r5
    90cc:	41400015 	stw	r5,0(r8)
    90d0:	42000104 	addi	r8,r8,4
    90d4:	727fea36 	bltu	r14,r9,9080 <__alt_data_end+0xff009080>
    90d8:	89c00115 	stw	r7,4(r17)
    90dc:	37c00017 	ldw	ra,0(r6)
    90e0:	f83ed43a 	srli	ra,ra,16
    90e4:	f8001f26 	beq	ra,zero,9164 <__multiply+0x1a0>
    90e8:	58c00017 	ldw	r3,0(r11)
    90ec:	681d883a 	mov	r14,r13
    90f0:	581f883a 	mov	r15,r11
    90f4:	1811883a 	mov	r8,r3
    90f8:	5825883a 	mov	r18,r11
    90fc:	000f883a 	mov	r7,zero
    9100:	00000106 	br	9108 <__multiply+0x144>
    9104:	8825883a 	mov	r18,r17
    9108:	7140000b 	ldhu	r5,0(r14)
    910c:	4010d43a 	srli	r8,r8,16
    9110:	193fffcc 	andi	r4,r3,65535
    9114:	2fcb383a 	mul	r5,r5,ra
    9118:	7bc00104 	addi	r15,r15,4
    911c:	73800104 	addi	r14,r14,4
    9120:	2a0b883a 	add	r5,r5,r8
    9124:	29cb883a 	add	r5,r5,r7
    9128:	2806943a 	slli	r3,r5,16
    912c:	94400104 	addi	r17,r18,4
    9130:	280ad43a 	srli	r5,r5,16
    9134:	1908b03a 	or	r4,r3,r4
    9138:	793fff15 	stw	r4,-4(r15)
    913c:	70ffff17 	ldw	r3,-4(r14)
    9140:	8a000017 	ldw	r8,0(r17)
    9144:	1806d43a 	srli	r3,r3,16
    9148:	413fffcc 	andi	r4,r8,65535
    914c:	1fc7383a 	mul	r3,r3,ra
    9150:	1907883a 	add	r3,r3,r4
    9154:	1947883a 	add	r3,r3,r5
    9158:	180ed43a 	srli	r7,r3,16
    915c:	727fe936 	bltu	r14,r9,9104 <__alt_data_end+0xff009104>
    9160:	90c00115 	stw	r3,4(r18)
    9164:	31800104 	addi	r6,r6,4
    9168:	5ac00104 	addi	r11,r11,4
    916c:	333fbe36 	bltu	r6,r12,9068 <__alt_data_end+0xff009068>
    9170:	0400090e 	bge	zero,r16,9198 <__multiply+0x1d4>
    9174:	50ffff17 	ldw	r3,-4(r10)
    9178:	52bfff04 	addi	r10,r10,-4
    917c:	18000326 	beq	r3,zero,918c <__multiply+0x1c8>
    9180:	00000506 	br	9198 <__multiply+0x1d4>
    9184:	50c00017 	ldw	r3,0(r10)
    9188:	1800031e 	bne	r3,zero,9198 <__multiply+0x1d4>
    918c:	843fffc4 	addi	r16,r16,-1
    9190:	52bfff04 	addi	r10,r10,-4
    9194:	803ffb1e 	bne	r16,zero,9184 <__alt_data_end+0xff009184>
    9198:	14000415 	stw	r16,16(r2)
    919c:	dfc00517 	ldw	ra,20(sp)
    91a0:	dd000417 	ldw	r20,16(sp)
    91a4:	dcc00317 	ldw	r19,12(sp)
    91a8:	dc800217 	ldw	r18,8(sp)
    91ac:	dc400117 	ldw	r17,4(sp)
    91b0:	dc000017 	ldw	r16,0(sp)
    91b4:	dec00604 	addi	sp,sp,24
    91b8:	f800283a 	ret

000091bc <__pow5mult>:
    91bc:	defffa04 	addi	sp,sp,-24
    91c0:	dcc00315 	stw	r19,12(sp)
    91c4:	dc000015 	stw	r16,0(sp)
    91c8:	dfc00515 	stw	ra,20(sp)
    91cc:	dd000415 	stw	r20,16(sp)
    91d0:	dc800215 	stw	r18,8(sp)
    91d4:	dc400115 	stw	r17,4(sp)
    91d8:	308000cc 	andi	r2,r6,3
    91dc:	3021883a 	mov	r16,r6
    91e0:	2027883a 	mov	r19,r4
    91e4:	10002f1e 	bne	r2,zero,92a4 <__pow5mult+0xe8>
    91e8:	2825883a 	mov	r18,r5
    91ec:	8021d0ba 	srai	r16,r16,2
    91f0:	80001a26 	beq	r16,zero,925c <__pow5mult+0xa0>
    91f4:	9c401217 	ldw	r17,72(r19)
    91f8:	8800061e 	bne	r17,zero,9214 <__pow5mult+0x58>
    91fc:	00003406 	br	92d0 <__pow5mult+0x114>
    9200:	8021d07a 	srai	r16,r16,1
    9204:	80001526 	beq	r16,zero,925c <__pow5mult+0xa0>
    9208:	88800017 	ldw	r2,0(r17)
    920c:	10001c26 	beq	r2,zero,9280 <__pow5mult+0xc4>
    9210:	1023883a 	mov	r17,r2
    9214:	8080004c 	andi	r2,r16,1
    9218:	103ff926 	beq	r2,zero,9200 <__alt_data_end+0xff009200>
    921c:	880d883a 	mov	r6,r17
    9220:	900b883a 	mov	r5,r18
    9224:	9809883a 	mov	r4,r19
    9228:	0008fc40 	call	8fc4 <__multiply>
    922c:	90001b26 	beq	r18,zero,929c <__pow5mult+0xe0>
    9230:	91000117 	ldw	r4,4(r18)
    9234:	98c01317 	ldw	r3,76(r19)
    9238:	8021d07a 	srai	r16,r16,1
    923c:	2109883a 	add	r4,r4,r4
    9240:	2109883a 	add	r4,r4,r4
    9244:	1907883a 	add	r3,r3,r4
    9248:	19000017 	ldw	r4,0(r3)
    924c:	91000015 	stw	r4,0(r18)
    9250:	1c800015 	stw	r18,0(r3)
    9254:	1025883a 	mov	r18,r2
    9258:	803feb1e 	bne	r16,zero,9208 <__alt_data_end+0xff009208>
    925c:	9005883a 	mov	r2,r18
    9260:	dfc00517 	ldw	ra,20(sp)
    9264:	dd000417 	ldw	r20,16(sp)
    9268:	dcc00317 	ldw	r19,12(sp)
    926c:	dc800217 	ldw	r18,8(sp)
    9270:	dc400117 	ldw	r17,4(sp)
    9274:	dc000017 	ldw	r16,0(sp)
    9278:	dec00604 	addi	sp,sp,24
    927c:	f800283a 	ret
    9280:	880d883a 	mov	r6,r17
    9284:	880b883a 	mov	r5,r17
    9288:	9809883a 	mov	r4,r19
    928c:	0008fc40 	call	8fc4 <__multiply>
    9290:	88800015 	stw	r2,0(r17)
    9294:	10000015 	stw	zero,0(r2)
    9298:	003fdd06 	br	9210 <__alt_data_end+0xff009210>
    929c:	1025883a 	mov	r18,r2
    92a0:	003fd706 	br	9200 <__alt_data_end+0xff009200>
    92a4:	10bfffc4 	addi	r2,r2,-1
    92a8:	1085883a 	add	r2,r2,r2
    92ac:	00c00074 	movhi	r3,1
    92b0:	18c8e504 	addi	r3,r3,9108
    92b4:	1085883a 	add	r2,r2,r2
    92b8:	1885883a 	add	r2,r3,r2
    92bc:	11800017 	ldw	r6,0(r2)
    92c0:	000f883a 	mov	r7,zero
    92c4:	0008c4c0 	call	8c4c <__multadd>
    92c8:	1025883a 	mov	r18,r2
    92cc:	003fc706 	br	91ec <__alt_data_end+0xff0091ec>
    92d0:	05000044 	movi	r20,1
    92d4:	a00b883a 	mov	r5,r20
    92d8:	9809883a 	mov	r4,r19
    92dc:	0008b7c0 	call	8b7c <_Balloc>
    92e0:	1023883a 	mov	r17,r2
    92e4:	00809c44 	movi	r2,625
    92e8:	88800515 	stw	r2,20(r17)
    92ec:	8d000415 	stw	r20,16(r17)
    92f0:	9c401215 	stw	r17,72(r19)
    92f4:	88000015 	stw	zero,0(r17)
    92f8:	003fc606 	br	9214 <__alt_data_end+0xff009214>

000092fc <__lshift>:
    92fc:	defff904 	addi	sp,sp,-28
    9300:	dd400515 	stw	r21,20(sp)
    9304:	dcc00315 	stw	r19,12(sp)
    9308:	302bd17a 	srai	r21,r6,5
    930c:	2cc00417 	ldw	r19,16(r5)
    9310:	28800217 	ldw	r2,8(r5)
    9314:	dd000415 	stw	r20,16(sp)
    9318:	ace7883a 	add	r19,r21,r19
    931c:	dc800215 	stw	r18,8(sp)
    9320:	dc400115 	stw	r17,4(sp)
    9324:	dc000015 	stw	r16,0(sp)
    9328:	dfc00615 	stw	ra,24(sp)
    932c:	9c000044 	addi	r16,r19,1
    9330:	2823883a 	mov	r17,r5
    9334:	3029883a 	mov	r20,r6
    9338:	2025883a 	mov	r18,r4
    933c:	29400117 	ldw	r5,4(r5)
    9340:	1400030e 	bge	r2,r16,9350 <__lshift+0x54>
    9344:	1085883a 	add	r2,r2,r2
    9348:	29400044 	addi	r5,r5,1
    934c:	143ffd16 	blt	r2,r16,9344 <__alt_data_end+0xff009344>
    9350:	9009883a 	mov	r4,r18
    9354:	0008b7c0 	call	8b7c <_Balloc>
    9358:	10c00504 	addi	r3,r2,20
    935c:	0540070e 	bge	zero,r21,937c <__lshift+0x80>
    9360:	ad6b883a 	add	r21,r21,r21
    9364:	ad6b883a 	add	r21,r21,r21
    9368:	1809883a 	mov	r4,r3
    936c:	1d47883a 	add	r3,r3,r21
    9370:	20000015 	stw	zero,0(r4)
    9374:	21000104 	addi	r4,r4,4
    9378:	193ffd1e 	bne	r3,r4,9370 <__alt_data_end+0xff009370>
    937c:	8a000417 	ldw	r8,16(r17)
    9380:	89000504 	addi	r4,r17,20
    9384:	a18007cc 	andi	r6,r20,31
    9388:	4211883a 	add	r8,r8,r8
    938c:	4211883a 	add	r8,r8,r8
    9390:	2211883a 	add	r8,r4,r8
    9394:	30002326 	beq	r6,zero,9424 <__lshift+0x128>
    9398:	02400804 	movi	r9,32
    939c:	4993c83a 	sub	r9,r9,r6
    93a0:	000b883a 	mov	r5,zero
    93a4:	21c00017 	ldw	r7,0(r4)
    93a8:	1815883a 	mov	r10,r3
    93ac:	18c00104 	addi	r3,r3,4
    93b0:	398e983a 	sll	r7,r7,r6
    93b4:	21000104 	addi	r4,r4,4
    93b8:	394ab03a 	or	r5,r7,r5
    93bc:	197fff15 	stw	r5,-4(r3)
    93c0:	217fff17 	ldw	r5,-4(r4)
    93c4:	2a4ad83a 	srl	r5,r5,r9
    93c8:	223ff636 	bltu	r4,r8,93a4 <__alt_data_end+0xff0093a4>
    93cc:	51400115 	stw	r5,4(r10)
    93d0:	28001a1e 	bne	r5,zero,943c <__lshift+0x140>
    93d4:	843fffc4 	addi	r16,r16,-1
    93d8:	14000415 	stw	r16,16(r2)
    93dc:	88000826 	beq	r17,zero,9400 <__lshift+0x104>
    93e0:	89000117 	ldw	r4,4(r17)
    93e4:	90c01317 	ldw	r3,76(r18)
    93e8:	2109883a 	add	r4,r4,r4
    93ec:	2109883a 	add	r4,r4,r4
    93f0:	1907883a 	add	r3,r3,r4
    93f4:	19000017 	ldw	r4,0(r3)
    93f8:	89000015 	stw	r4,0(r17)
    93fc:	1c400015 	stw	r17,0(r3)
    9400:	dfc00617 	ldw	ra,24(sp)
    9404:	dd400517 	ldw	r21,20(sp)
    9408:	dd000417 	ldw	r20,16(sp)
    940c:	dcc00317 	ldw	r19,12(sp)
    9410:	dc800217 	ldw	r18,8(sp)
    9414:	dc400117 	ldw	r17,4(sp)
    9418:	dc000017 	ldw	r16,0(sp)
    941c:	dec00704 	addi	sp,sp,28
    9420:	f800283a 	ret
    9424:	21400017 	ldw	r5,0(r4)
    9428:	18c00104 	addi	r3,r3,4
    942c:	21000104 	addi	r4,r4,4
    9430:	197fff15 	stw	r5,-4(r3)
    9434:	223ffb36 	bltu	r4,r8,9424 <__alt_data_end+0xff009424>
    9438:	003fe606 	br	93d4 <__alt_data_end+0xff0093d4>
    943c:	9c000084 	addi	r16,r19,2
    9440:	003fe406 	br	93d4 <__alt_data_end+0xff0093d4>

00009444 <__mcmp>:
    9444:	20800417 	ldw	r2,16(r4)
    9448:	28c00417 	ldw	r3,16(r5)
    944c:	10c5c83a 	sub	r2,r2,r3
    9450:	1000111e 	bne	r2,zero,9498 <__mcmp+0x54>
    9454:	18c7883a 	add	r3,r3,r3
    9458:	18c7883a 	add	r3,r3,r3
    945c:	21000504 	addi	r4,r4,20
    9460:	29400504 	addi	r5,r5,20
    9464:	20c5883a 	add	r2,r4,r3
    9468:	28cb883a 	add	r5,r5,r3
    946c:	00000106 	br	9474 <__mcmp+0x30>
    9470:	20800a2e 	bgeu	r4,r2,949c <__mcmp+0x58>
    9474:	10bfff04 	addi	r2,r2,-4
    9478:	297fff04 	addi	r5,r5,-4
    947c:	11800017 	ldw	r6,0(r2)
    9480:	28c00017 	ldw	r3,0(r5)
    9484:	30fffa26 	beq	r6,r3,9470 <__alt_data_end+0xff009470>
    9488:	30c00236 	bltu	r6,r3,9494 <__mcmp+0x50>
    948c:	00800044 	movi	r2,1
    9490:	f800283a 	ret
    9494:	00bfffc4 	movi	r2,-1
    9498:	f800283a 	ret
    949c:	0005883a 	mov	r2,zero
    94a0:	f800283a 	ret

000094a4 <__mdiff>:
    94a4:	28c00417 	ldw	r3,16(r5)
    94a8:	30800417 	ldw	r2,16(r6)
    94ac:	defffa04 	addi	sp,sp,-24
    94b0:	dcc00315 	stw	r19,12(sp)
    94b4:	dc800215 	stw	r18,8(sp)
    94b8:	dfc00515 	stw	ra,20(sp)
    94bc:	dd000415 	stw	r20,16(sp)
    94c0:	dc400115 	stw	r17,4(sp)
    94c4:	dc000015 	stw	r16,0(sp)
    94c8:	1887c83a 	sub	r3,r3,r2
    94cc:	2825883a 	mov	r18,r5
    94d0:	3027883a 	mov	r19,r6
    94d4:	1800141e 	bne	r3,zero,9528 <__mdiff+0x84>
    94d8:	1085883a 	add	r2,r2,r2
    94dc:	1085883a 	add	r2,r2,r2
    94e0:	2a000504 	addi	r8,r5,20
    94e4:	34000504 	addi	r16,r6,20
    94e8:	4087883a 	add	r3,r8,r2
    94ec:	8085883a 	add	r2,r16,r2
    94f0:	00000106 	br	94f8 <__mdiff+0x54>
    94f4:	40c0592e 	bgeu	r8,r3,965c <__mdiff+0x1b8>
    94f8:	18ffff04 	addi	r3,r3,-4
    94fc:	10bfff04 	addi	r2,r2,-4
    9500:	19c00017 	ldw	r7,0(r3)
    9504:	11400017 	ldw	r5,0(r2)
    9508:	397ffa26 	beq	r7,r5,94f4 <__alt_data_end+0xff0094f4>
    950c:	3940592e 	bgeu	r7,r5,9674 <__mdiff+0x1d0>
    9510:	9005883a 	mov	r2,r18
    9514:	4023883a 	mov	r17,r8
    9518:	9825883a 	mov	r18,r19
    951c:	05000044 	movi	r20,1
    9520:	1027883a 	mov	r19,r2
    9524:	00000406 	br	9538 <__mdiff+0x94>
    9528:	18005616 	blt	r3,zero,9684 <__mdiff+0x1e0>
    952c:	34400504 	addi	r17,r6,20
    9530:	2c000504 	addi	r16,r5,20
    9534:	0029883a 	mov	r20,zero
    9538:	91400117 	ldw	r5,4(r18)
    953c:	0008b7c0 	call	8b7c <_Balloc>
    9540:	92400417 	ldw	r9,16(r18)
    9544:	9b000417 	ldw	r12,16(r19)
    9548:	12c00504 	addi	r11,r2,20
    954c:	4a51883a 	add	r8,r9,r9
    9550:	6319883a 	add	r12,r12,r12
    9554:	4211883a 	add	r8,r8,r8
    9558:	6319883a 	add	r12,r12,r12
    955c:	15000315 	stw	r20,12(r2)
    9560:	8211883a 	add	r8,r16,r8
    9564:	8b19883a 	add	r12,r17,r12
    9568:	0007883a 	mov	r3,zero
    956c:	81400017 	ldw	r5,0(r16)
    9570:	89c00017 	ldw	r7,0(r17)
    9574:	59800104 	addi	r6,r11,4
    9578:	293fffcc 	andi	r4,r5,65535
    957c:	20c7883a 	add	r3,r4,r3
    9580:	393fffcc 	andi	r4,r7,65535
    9584:	1909c83a 	sub	r4,r3,r4
    9588:	280ad43a 	srli	r5,r5,16
    958c:	380ed43a 	srli	r7,r7,16
    9590:	2007d43a 	srai	r3,r4,16
    9594:	213fffcc 	andi	r4,r4,65535
    9598:	29cbc83a 	sub	r5,r5,r7
    959c:	28c7883a 	add	r3,r5,r3
    95a0:	180a943a 	slli	r5,r3,16
    95a4:	8c400104 	addi	r17,r17,4
    95a8:	84000104 	addi	r16,r16,4
    95ac:	2908b03a 	or	r4,r5,r4
    95b0:	59000015 	stw	r4,0(r11)
    95b4:	1807d43a 	srai	r3,r3,16
    95b8:	3015883a 	mov	r10,r6
    95bc:	3017883a 	mov	r11,r6
    95c0:	8b3fea36 	bltu	r17,r12,956c <__alt_data_end+0xff00956c>
    95c4:	8200162e 	bgeu	r16,r8,9620 <__mdiff+0x17c>
    95c8:	8017883a 	mov	r11,r16
    95cc:	59400017 	ldw	r5,0(r11)
    95d0:	31800104 	addi	r6,r6,4
    95d4:	5ac00104 	addi	r11,r11,4
    95d8:	293fffcc 	andi	r4,r5,65535
    95dc:	20c7883a 	add	r3,r4,r3
    95e0:	280ed43a 	srli	r7,r5,16
    95e4:	180bd43a 	srai	r5,r3,16
    95e8:	193fffcc 	andi	r4,r3,65535
    95ec:	3947883a 	add	r3,r7,r5
    95f0:	180a943a 	slli	r5,r3,16
    95f4:	1807d43a 	srai	r3,r3,16
    95f8:	2908b03a 	or	r4,r5,r4
    95fc:	313fff15 	stw	r4,-4(r6)
    9600:	5a3ff236 	bltu	r11,r8,95cc <__alt_data_end+0xff0095cc>
    9604:	0406303a 	nor	r3,zero,r16
    9608:	1a07883a 	add	r3,r3,r8
    960c:	1806d0ba 	srli	r3,r3,2
    9610:	18c00044 	addi	r3,r3,1
    9614:	18c7883a 	add	r3,r3,r3
    9618:	18c7883a 	add	r3,r3,r3
    961c:	50d5883a 	add	r10,r10,r3
    9620:	50ffff04 	addi	r3,r10,-4
    9624:	2000041e 	bne	r4,zero,9638 <__mdiff+0x194>
    9628:	18ffff04 	addi	r3,r3,-4
    962c:	19000017 	ldw	r4,0(r3)
    9630:	4a7fffc4 	addi	r9,r9,-1
    9634:	203ffc26 	beq	r4,zero,9628 <__alt_data_end+0xff009628>
    9638:	12400415 	stw	r9,16(r2)
    963c:	dfc00517 	ldw	ra,20(sp)
    9640:	dd000417 	ldw	r20,16(sp)
    9644:	dcc00317 	ldw	r19,12(sp)
    9648:	dc800217 	ldw	r18,8(sp)
    964c:	dc400117 	ldw	r17,4(sp)
    9650:	dc000017 	ldw	r16,0(sp)
    9654:	dec00604 	addi	sp,sp,24
    9658:	f800283a 	ret
    965c:	000b883a 	mov	r5,zero
    9660:	0008b7c0 	call	8b7c <_Balloc>
    9664:	00c00044 	movi	r3,1
    9668:	10c00415 	stw	r3,16(r2)
    966c:	10000515 	stw	zero,20(r2)
    9670:	003ff206 	br	963c <__alt_data_end+0xff00963c>
    9674:	8023883a 	mov	r17,r16
    9678:	0029883a 	mov	r20,zero
    967c:	4021883a 	mov	r16,r8
    9680:	003fad06 	br	9538 <__alt_data_end+0xff009538>
    9684:	9005883a 	mov	r2,r18
    9688:	94400504 	addi	r17,r18,20
    968c:	9c000504 	addi	r16,r19,20
    9690:	9825883a 	mov	r18,r19
    9694:	05000044 	movi	r20,1
    9698:	1027883a 	mov	r19,r2
    969c:	003fa606 	br	9538 <__alt_data_end+0xff009538>

000096a0 <__ulp>:
    96a0:	295ffc2c 	andhi	r5,r5,32752
    96a4:	00bf3034 	movhi	r2,64704
    96a8:	2887883a 	add	r3,r5,r2
    96ac:	00c0020e 	bge	zero,r3,96b8 <__ulp+0x18>
    96b0:	0005883a 	mov	r2,zero
    96b4:	f800283a 	ret
    96b8:	00c7c83a 	sub	r3,zero,r3
    96bc:	1807d53a 	srai	r3,r3,20
    96c0:	008004c4 	movi	r2,19
    96c4:	10c00b0e 	bge	r2,r3,96f4 <__ulp+0x54>
    96c8:	18bffb04 	addi	r2,r3,-20
    96cc:	01000784 	movi	r4,30
    96d0:	0007883a 	mov	r3,zero
    96d4:	20800516 	blt	r4,r2,96ec <__ulp+0x4c>
    96d8:	010007c4 	movi	r4,31
    96dc:	2089c83a 	sub	r4,r4,r2
    96e0:	00800044 	movi	r2,1
    96e4:	1104983a 	sll	r2,r2,r4
    96e8:	f800283a 	ret
    96ec:	00800044 	movi	r2,1
    96f0:	f800283a 	ret
    96f4:	01400234 	movhi	r5,8
    96f8:	28c7d83a 	sra	r3,r5,r3
    96fc:	0005883a 	mov	r2,zero
    9700:	f800283a 	ret

00009704 <__b2d>:
    9704:	defffa04 	addi	sp,sp,-24
    9708:	dc000015 	stw	r16,0(sp)
    970c:	24000417 	ldw	r16,16(r4)
    9710:	dc400115 	stw	r17,4(sp)
    9714:	24400504 	addi	r17,r4,20
    9718:	8421883a 	add	r16,r16,r16
    971c:	8421883a 	add	r16,r16,r16
    9720:	8c21883a 	add	r16,r17,r16
    9724:	dc800215 	stw	r18,8(sp)
    9728:	84bfff17 	ldw	r18,-4(r16)
    972c:	dd000415 	stw	r20,16(sp)
    9730:	dcc00315 	stw	r19,12(sp)
    9734:	9009883a 	mov	r4,r18
    9738:	2829883a 	mov	r20,r5
    973c:	dfc00515 	stw	ra,20(sp)
    9740:	0008e700 	call	8e70 <__hi0bits>
    9744:	00c00804 	movi	r3,32
    9748:	1889c83a 	sub	r4,r3,r2
    974c:	a1000015 	stw	r4,0(r20)
    9750:	01000284 	movi	r4,10
    9754:	84ffff04 	addi	r19,r16,-4
    9758:	20801216 	blt	r4,r2,97a4 <__b2d+0xa0>
    975c:	018002c4 	movi	r6,11
    9760:	308dc83a 	sub	r6,r6,r2
    9764:	9186d83a 	srl	r3,r18,r6
    9768:	18cffc34 	orhi	r3,r3,16368
    976c:	8cc0212e 	bgeu	r17,r19,97f4 <__b2d+0xf0>
    9770:	813ffe17 	ldw	r4,-8(r16)
    9774:	218cd83a 	srl	r6,r4,r6
    9778:	10800544 	addi	r2,r2,21
    977c:	9084983a 	sll	r2,r18,r2
    9780:	1184b03a 	or	r2,r2,r6
    9784:	dfc00517 	ldw	ra,20(sp)
    9788:	dd000417 	ldw	r20,16(sp)
    978c:	dcc00317 	ldw	r19,12(sp)
    9790:	dc800217 	ldw	r18,8(sp)
    9794:	dc400117 	ldw	r17,4(sp)
    9798:	dc000017 	ldw	r16,0(sp)
    979c:	dec00604 	addi	sp,sp,24
    97a0:	f800283a 	ret
    97a4:	8cc00f2e 	bgeu	r17,r19,97e4 <__b2d+0xe0>
    97a8:	117ffd44 	addi	r5,r2,-11
    97ac:	80bffe17 	ldw	r2,-8(r16)
    97b0:	28000e26 	beq	r5,zero,97ec <__b2d+0xe8>
    97b4:	1949c83a 	sub	r4,r3,r5
    97b8:	9164983a 	sll	r18,r18,r5
    97bc:	1106d83a 	srl	r3,r2,r4
    97c0:	81bffe04 	addi	r6,r16,-8
    97c4:	948ffc34 	orhi	r18,r18,16368
    97c8:	90c6b03a 	or	r3,r18,r3
    97cc:	89800e2e 	bgeu	r17,r6,9808 <__b2d+0x104>
    97d0:	81bffd17 	ldw	r6,-12(r16)
    97d4:	1144983a 	sll	r2,r2,r5
    97d8:	310ad83a 	srl	r5,r6,r4
    97dc:	2884b03a 	or	r2,r5,r2
    97e0:	003fe806 	br	9784 <__alt_data_end+0xff009784>
    97e4:	10bffd44 	addi	r2,r2,-11
    97e8:	1000041e 	bne	r2,zero,97fc <__b2d+0xf8>
    97ec:	90cffc34 	orhi	r3,r18,16368
    97f0:	003fe406 	br	9784 <__alt_data_end+0xff009784>
    97f4:	000d883a 	mov	r6,zero
    97f8:	003fdf06 	br	9778 <__alt_data_end+0xff009778>
    97fc:	90a4983a 	sll	r18,r18,r2
    9800:	0005883a 	mov	r2,zero
    9804:	003ff906 	br	97ec <__alt_data_end+0xff0097ec>
    9808:	1144983a 	sll	r2,r2,r5
    980c:	003fdd06 	br	9784 <__alt_data_end+0xff009784>

00009810 <__d2b>:
    9810:	defff804 	addi	sp,sp,-32
    9814:	dc000215 	stw	r16,8(sp)
    9818:	3021883a 	mov	r16,r6
    981c:	dc400315 	stw	r17,12(sp)
    9820:	8022907a 	slli	r17,r16,1
    9824:	dd000615 	stw	r20,24(sp)
    9828:	2829883a 	mov	r20,r5
    982c:	01400044 	movi	r5,1
    9830:	dcc00515 	stw	r19,20(sp)
    9834:	dc800415 	stw	r18,16(sp)
    9838:	dfc00715 	stw	ra,28(sp)
    983c:	3825883a 	mov	r18,r7
    9840:	8822d57a 	srli	r17,r17,21
    9844:	0008b7c0 	call	8b7c <_Balloc>
    9848:	1027883a 	mov	r19,r2
    984c:	00800434 	movhi	r2,16
    9850:	10bfffc4 	addi	r2,r2,-1
    9854:	808c703a 	and	r6,r16,r2
    9858:	88000126 	beq	r17,zero,9860 <__d2b+0x50>
    985c:	31800434 	orhi	r6,r6,16
    9860:	d9800015 	stw	r6,0(sp)
    9864:	a0002426 	beq	r20,zero,98f8 <__d2b+0xe8>
    9868:	d9000104 	addi	r4,sp,4
    986c:	dd000115 	stw	r20,4(sp)
    9870:	0008ed80 	call	8ed8 <__lo0bits>
    9874:	d8c00017 	ldw	r3,0(sp)
    9878:	10002f1e 	bne	r2,zero,9938 <__d2b+0x128>
    987c:	d9000117 	ldw	r4,4(sp)
    9880:	99000515 	stw	r4,20(r19)
    9884:	1821003a 	cmpeq	r16,r3,zero
    9888:	01000084 	movi	r4,2
    988c:	2421c83a 	sub	r16,r4,r16
    9890:	98c00615 	stw	r3,24(r19)
    9894:	9c000415 	stw	r16,16(r19)
    9898:	88001f1e 	bne	r17,zero,9918 <__d2b+0x108>
    989c:	10bef384 	addi	r2,r2,-1074
    98a0:	90800015 	stw	r2,0(r18)
    98a4:	00900034 	movhi	r2,16384
    98a8:	10bfffc4 	addi	r2,r2,-1
    98ac:	8085883a 	add	r2,r16,r2
    98b0:	1085883a 	add	r2,r2,r2
    98b4:	1085883a 	add	r2,r2,r2
    98b8:	9885883a 	add	r2,r19,r2
    98bc:	11000517 	ldw	r4,20(r2)
    98c0:	8020917a 	slli	r16,r16,5
    98c4:	0008e700 	call	8e70 <__hi0bits>
    98c8:	d8c00817 	ldw	r3,32(sp)
    98cc:	8085c83a 	sub	r2,r16,r2
    98d0:	18800015 	stw	r2,0(r3)
    98d4:	9805883a 	mov	r2,r19
    98d8:	dfc00717 	ldw	ra,28(sp)
    98dc:	dd000617 	ldw	r20,24(sp)
    98e0:	dcc00517 	ldw	r19,20(sp)
    98e4:	dc800417 	ldw	r18,16(sp)
    98e8:	dc400317 	ldw	r17,12(sp)
    98ec:	dc000217 	ldw	r16,8(sp)
    98f0:	dec00804 	addi	sp,sp,32
    98f4:	f800283a 	ret
    98f8:	d809883a 	mov	r4,sp
    98fc:	0008ed80 	call	8ed8 <__lo0bits>
    9900:	d8c00017 	ldw	r3,0(sp)
    9904:	04000044 	movi	r16,1
    9908:	9c000415 	stw	r16,16(r19)
    990c:	98c00515 	stw	r3,20(r19)
    9910:	10800804 	addi	r2,r2,32
    9914:	883fe126 	beq	r17,zero,989c <__alt_data_end+0xff00989c>
    9918:	00c00d44 	movi	r3,53
    991c:	8c7ef344 	addi	r17,r17,-1075
    9920:	88a3883a 	add	r17,r17,r2
    9924:	1885c83a 	sub	r2,r3,r2
    9928:	d8c00817 	ldw	r3,32(sp)
    992c:	94400015 	stw	r17,0(r18)
    9930:	18800015 	stw	r2,0(r3)
    9934:	003fe706 	br	98d4 <__alt_data_end+0xff0098d4>
    9938:	01000804 	movi	r4,32
    993c:	2089c83a 	sub	r4,r4,r2
    9940:	1908983a 	sll	r4,r3,r4
    9944:	d9400117 	ldw	r5,4(sp)
    9948:	1886d83a 	srl	r3,r3,r2
    994c:	2148b03a 	or	r4,r4,r5
    9950:	99000515 	stw	r4,20(r19)
    9954:	d8c00015 	stw	r3,0(sp)
    9958:	003fca06 	br	9884 <__alt_data_end+0xff009884>

0000995c <__ratio>:
    995c:	defff904 	addi	sp,sp,-28
    9960:	dc400315 	stw	r17,12(sp)
    9964:	2823883a 	mov	r17,r5
    9968:	d9400104 	addi	r5,sp,4
    996c:	dfc00615 	stw	ra,24(sp)
    9970:	dcc00515 	stw	r19,20(sp)
    9974:	dc800415 	stw	r18,16(sp)
    9978:	2027883a 	mov	r19,r4
    997c:	dc000215 	stw	r16,8(sp)
    9980:	00097040 	call	9704 <__b2d>
    9984:	d80b883a 	mov	r5,sp
    9988:	8809883a 	mov	r4,r17
    998c:	1025883a 	mov	r18,r2
    9990:	1821883a 	mov	r16,r3
    9994:	00097040 	call	9704 <__b2d>
    9998:	8a000417 	ldw	r8,16(r17)
    999c:	99000417 	ldw	r4,16(r19)
    99a0:	d9400117 	ldw	r5,4(sp)
    99a4:	2209c83a 	sub	r4,r4,r8
    99a8:	2010917a 	slli	r8,r4,5
    99ac:	d9000017 	ldw	r4,0(sp)
    99b0:	2909c83a 	sub	r4,r5,r4
    99b4:	4109883a 	add	r4,r8,r4
    99b8:	01000e0e 	bge	zero,r4,99f4 <__ratio+0x98>
    99bc:	2008953a 	slli	r4,r4,20
    99c0:	2421883a 	add	r16,r4,r16
    99c4:	100d883a 	mov	r6,r2
    99c8:	180f883a 	mov	r7,r3
    99cc:	9009883a 	mov	r4,r18
    99d0:	800b883a 	mov	r5,r16
    99d4:	000d6400 	call	d640 <__divdf3>
    99d8:	dfc00617 	ldw	ra,24(sp)
    99dc:	dcc00517 	ldw	r19,20(sp)
    99e0:	dc800417 	ldw	r18,16(sp)
    99e4:	dc400317 	ldw	r17,12(sp)
    99e8:	dc000217 	ldw	r16,8(sp)
    99ec:	dec00704 	addi	sp,sp,28
    99f0:	f800283a 	ret
    99f4:	2008953a 	slli	r4,r4,20
    99f8:	1907c83a 	sub	r3,r3,r4
    99fc:	003ff106 	br	99c4 <__alt_data_end+0xff0099c4>

00009a00 <_mprec_log10>:
    9a00:	defffe04 	addi	sp,sp,-8
    9a04:	dc000015 	stw	r16,0(sp)
    9a08:	dfc00115 	stw	ra,4(sp)
    9a0c:	008005c4 	movi	r2,23
    9a10:	2021883a 	mov	r16,r4
    9a14:	11000d0e 	bge	r2,r4,9a4c <_mprec_log10+0x4c>
    9a18:	0005883a 	mov	r2,zero
    9a1c:	00cffc34 	movhi	r3,16368
    9a20:	843fffc4 	addi	r16,r16,-1
    9a24:	000d883a 	mov	r6,zero
    9a28:	01d00934 	movhi	r7,16420
    9a2c:	1009883a 	mov	r4,r2
    9a30:	180b883a 	mov	r5,r3
    9a34:	000e1800 	call	e180 <__muldf3>
    9a38:	803ff91e 	bne	r16,zero,9a20 <__alt_data_end+0xff009a20>
    9a3c:	dfc00117 	ldw	ra,4(sp)
    9a40:	dc000017 	ldw	r16,0(sp)
    9a44:	dec00204 	addi	sp,sp,8
    9a48:	f800283a 	ret
    9a4c:	202090fa 	slli	r16,r4,3
    9a50:	00800074 	movhi	r2,1
    9a54:	1088fc04 	addi	r2,r2,9200
    9a58:	1421883a 	add	r16,r2,r16
    9a5c:	80800017 	ldw	r2,0(r16)
    9a60:	80c00117 	ldw	r3,4(r16)
    9a64:	dfc00117 	ldw	ra,4(sp)
    9a68:	dc000017 	ldw	r16,0(sp)
    9a6c:	dec00204 	addi	sp,sp,8
    9a70:	f800283a 	ret

00009a74 <__copybits>:
    9a74:	297fffc4 	addi	r5,r5,-1
    9a78:	280fd17a 	srai	r7,r5,5
    9a7c:	30c00417 	ldw	r3,16(r6)
    9a80:	30800504 	addi	r2,r6,20
    9a84:	39c00044 	addi	r7,r7,1
    9a88:	18c7883a 	add	r3,r3,r3
    9a8c:	39cf883a 	add	r7,r7,r7
    9a90:	18c7883a 	add	r3,r3,r3
    9a94:	39cf883a 	add	r7,r7,r7
    9a98:	10c7883a 	add	r3,r2,r3
    9a9c:	21cf883a 	add	r7,r4,r7
    9aa0:	10c00d2e 	bgeu	r2,r3,9ad8 <__copybits+0x64>
    9aa4:	200b883a 	mov	r5,r4
    9aa8:	12000017 	ldw	r8,0(r2)
    9aac:	29400104 	addi	r5,r5,4
    9ab0:	10800104 	addi	r2,r2,4
    9ab4:	2a3fff15 	stw	r8,-4(r5)
    9ab8:	10fffb36 	bltu	r2,r3,9aa8 <__alt_data_end+0xff009aa8>
    9abc:	1985c83a 	sub	r2,r3,r6
    9ac0:	10bffac4 	addi	r2,r2,-21
    9ac4:	1004d0ba 	srli	r2,r2,2
    9ac8:	10800044 	addi	r2,r2,1
    9acc:	1085883a 	add	r2,r2,r2
    9ad0:	1085883a 	add	r2,r2,r2
    9ad4:	2089883a 	add	r4,r4,r2
    9ad8:	21c0032e 	bgeu	r4,r7,9ae8 <__copybits+0x74>
    9adc:	20000015 	stw	zero,0(r4)
    9ae0:	21000104 	addi	r4,r4,4
    9ae4:	21fffd36 	bltu	r4,r7,9adc <__alt_data_end+0xff009adc>
    9ae8:	f800283a 	ret

00009aec <__any_on>:
    9aec:	20c00417 	ldw	r3,16(r4)
    9af0:	2805d17a 	srai	r2,r5,5
    9af4:	21000504 	addi	r4,r4,20
    9af8:	18800d0e 	bge	r3,r2,9b30 <__any_on+0x44>
    9afc:	18c7883a 	add	r3,r3,r3
    9b00:	18c7883a 	add	r3,r3,r3
    9b04:	20c7883a 	add	r3,r4,r3
    9b08:	20c0192e 	bgeu	r4,r3,9b70 <__any_on+0x84>
    9b0c:	18bfff17 	ldw	r2,-4(r3)
    9b10:	18ffff04 	addi	r3,r3,-4
    9b14:	1000041e 	bne	r2,zero,9b28 <__any_on+0x3c>
    9b18:	20c0142e 	bgeu	r4,r3,9b6c <__any_on+0x80>
    9b1c:	18ffff04 	addi	r3,r3,-4
    9b20:	19400017 	ldw	r5,0(r3)
    9b24:	283ffc26 	beq	r5,zero,9b18 <__alt_data_end+0xff009b18>
    9b28:	00800044 	movi	r2,1
    9b2c:	f800283a 	ret
    9b30:	10c00a0e 	bge	r2,r3,9b5c <__any_on+0x70>
    9b34:	1085883a 	add	r2,r2,r2
    9b38:	1085883a 	add	r2,r2,r2
    9b3c:	294007cc 	andi	r5,r5,31
    9b40:	2087883a 	add	r3,r4,r2
    9b44:	283ff026 	beq	r5,zero,9b08 <__alt_data_end+0xff009b08>
    9b48:	19800017 	ldw	r6,0(r3)
    9b4c:	3144d83a 	srl	r2,r6,r5
    9b50:	114a983a 	sll	r5,r2,r5
    9b54:	317ff41e 	bne	r6,r5,9b28 <__alt_data_end+0xff009b28>
    9b58:	003feb06 	br	9b08 <__alt_data_end+0xff009b08>
    9b5c:	1085883a 	add	r2,r2,r2
    9b60:	1085883a 	add	r2,r2,r2
    9b64:	2087883a 	add	r3,r4,r2
    9b68:	003fe706 	br	9b08 <__alt_data_end+0xff009b08>
    9b6c:	f800283a 	ret
    9b70:	0005883a 	mov	r2,zero
    9b74:	f800283a 	ret

00009b78 <_realloc_r>:
    9b78:	defff604 	addi	sp,sp,-40
    9b7c:	dc800215 	stw	r18,8(sp)
    9b80:	dfc00915 	stw	ra,36(sp)
    9b84:	df000815 	stw	fp,32(sp)
    9b88:	ddc00715 	stw	r23,28(sp)
    9b8c:	dd800615 	stw	r22,24(sp)
    9b90:	dd400515 	stw	r21,20(sp)
    9b94:	dd000415 	stw	r20,16(sp)
    9b98:	dcc00315 	stw	r19,12(sp)
    9b9c:	dc400115 	stw	r17,4(sp)
    9ba0:	dc000015 	stw	r16,0(sp)
    9ba4:	3025883a 	mov	r18,r6
    9ba8:	2800b726 	beq	r5,zero,9e88 <_realloc_r+0x310>
    9bac:	282b883a 	mov	r21,r5
    9bb0:	2029883a 	mov	r20,r4
    9bb4:	000f9780 	call	f978 <__malloc_lock>
    9bb8:	a8bfff17 	ldw	r2,-4(r21)
    9bbc:	043fff04 	movi	r16,-4
    9bc0:	90c002c4 	addi	r3,r18,11
    9bc4:	01000584 	movi	r4,22
    9bc8:	acfffe04 	addi	r19,r21,-8
    9bcc:	1420703a 	and	r16,r2,r16
    9bd0:	20c0332e 	bgeu	r4,r3,9ca0 <_realloc_r+0x128>
    9bd4:	047ffe04 	movi	r17,-8
    9bd8:	1c62703a 	and	r17,r3,r17
    9bdc:	8807883a 	mov	r3,r17
    9be0:	88005816 	blt	r17,zero,9d44 <_realloc_r+0x1cc>
    9be4:	8c805736 	bltu	r17,r18,9d44 <_realloc_r+0x1cc>
    9be8:	80c0300e 	bge	r16,r3,9cac <_realloc_r+0x134>
    9bec:	07000074 	movhi	fp,1
    9bf0:	e7098104 	addi	fp,fp,9732
    9bf4:	e1c00217 	ldw	r7,8(fp)
    9bf8:	9c09883a 	add	r4,r19,r16
    9bfc:	22000117 	ldw	r8,4(r4)
    9c00:	21c06326 	beq	r4,r7,9d90 <_realloc_r+0x218>
    9c04:	017fff84 	movi	r5,-2
    9c08:	414a703a 	and	r5,r8,r5
    9c0c:	214b883a 	add	r5,r4,r5
    9c10:	29800117 	ldw	r6,4(r5)
    9c14:	3180004c 	andi	r6,r6,1
    9c18:	30003f26 	beq	r6,zero,9d18 <_realloc_r+0x1a0>
    9c1c:	1080004c 	andi	r2,r2,1
    9c20:	10008326 	beq	r2,zero,9e30 <_realloc_r+0x2b8>
    9c24:	900b883a 	mov	r5,r18
    9c28:	a009883a 	mov	r4,r20
    9c2c:	0002c900 	call	2c90 <_malloc_r>
    9c30:	1025883a 	mov	r18,r2
    9c34:	10011e26 	beq	r2,zero,a0b0 <_realloc_r+0x538>
    9c38:	a93fff17 	ldw	r4,-4(r21)
    9c3c:	10fffe04 	addi	r3,r2,-8
    9c40:	00bfff84 	movi	r2,-2
    9c44:	2084703a 	and	r2,r4,r2
    9c48:	9885883a 	add	r2,r19,r2
    9c4c:	1880ee26 	beq	r3,r2,a008 <_realloc_r+0x490>
    9c50:	81bfff04 	addi	r6,r16,-4
    9c54:	00800904 	movi	r2,36
    9c58:	1180b836 	bltu	r2,r6,9f3c <_realloc_r+0x3c4>
    9c5c:	00c004c4 	movi	r3,19
    9c60:	19809636 	bltu	r3,r6,9ebc <_realloc_r+0x344>
    9c64:	9005883a 	mov	r2,r18
    9c68:	a807883a 	mov	r3,r21
    9c6c:	19000017 	ldw	r4,0(r3)
    9c70:	11000015 	stw	r4,0(r2)
    9c74:	19000117 	ldw	r4,4(r3)
    9c78:	11000115 	stw	r4,4(r2)
    9c7c:	18c00217 	ldw	r3,8(r3)
    9c80:	10c00215 	stw	r3,8(r2)
    9c84:	a80b883a 	mov	r5,r21
    9c88:	a009883a 	mov	r4,r20
    9c8c:	0007ae00 	call	7ae0 <_free_r>
    9c90:	a009883a 	mov	r4,r20
    9c94:	000f99c0 	call	f99c <__malloc_unlock>
    9c98:	9005883a 	mov	r2,r18
    9c9c:	00001206 	br	9ce8 <_realloc_r+0x170>
    9ca0:	00c00404 	movi	r3,16
    9ca4:	1823883a 	mov	r17,r3
    9ca8:	003fce06 	br	9be4 <__alt_data_end+0xff009be4>
    9cac:	a825883a 	mov	r18,r21
    9cb0:	8445c83a 	sub	r2,r16,r17
    9cb4:	00c003c4 	movi	r3,15
    9cb8:	18802636 	bltu	r3,r2,9d54 <_realloc_r+0x1dc>
    9cbc:	99800117 	ldw	r6,4(r19)
    9cc0:	9c07883a 	add	r3,r19,r16
    9cc4:	3180004c 	andi	r6,r6,1
    9cc8:	3420b03a 	or	r16,r6,r16
    9ccc:	9c000115 	stw	r16,4(r19)
    9cd0:	18800117 	ldw	r2,4(r3)
    9cd4:	10800054 	ori	r2,r2,1
    9cd8:	18800115 	stw	r2,4(r3)
    9cdc:	a009883a 	mov	r4,r20
    9ce0:	000f99c0 	call	f99c <__malloc_unlock>
    9ce4:	9005883a 	mov	r2,r18
    9ce8:	dfc00917 	ldw	ra,36(sp)
    9cec:	df000817 	ldw	fp,32(sp)
    9cf0:	ddc00717 	ldw	r23,28(sp)
    9cf4:	dd800617 	ldw	r22,24(sp)
    9cf8:	dd400517 	ldw	r21,20(sp)
    9cfc:	dd000417 	ldw	r20,16(sp)
    9d00:	dcc00317 	ldw	r19,12(sp)
    9d04:	dc800217 	ldw	r18,8(sp)
    9d08:	dc400117 	ldw	r17,4(sp)
    9d0c:	dc000017 	ldw	r16,0(sp)
    9d10:	dec00a04 	addi	sp,sp,40
    9d14:	f800283a 	ret
    9d18:	017fff04 	movi	r5,-4
    9d1c:	414a703a 	and	r5,r8,r5
    9d20:	814d883a 	add	r6,r16,r5
    9d24:	30c01f16 	blt	r6,r3,9da4 <_realloc_r+0x22c>
    9d28:	20800317 	ldw	r2,12(r4)
    9d2c:	20c00217 	ldw	r3,8(r4)
    9d30:	a825883a 	mov	r18,r21
    9d34:	3021883a 	mov	r16,r6
    9d38:	18800315 	stw	r2,12(r3)
    9d3c:	10c00215 	stw	r3,8(r2)
    9d40:	003fdb06 	br	9cb0 <__alt_data_end+0xff009cb0>
    9d44:	00800304 	movi	r2,12
    9d48:	a0800015 	stw	r2,0(r20)
    9d4c:	0005883a 	mov	r2,zero
    9d50:	003fe506 	br	9ce8 <__alt_data_end+0xff009ce8>
    9d54:	98c00117 	ldw	r3,4(r19)
    9d58:	9c4b883a 	add	r5,r19,r17
    9d5c:	11000054 	ori	r4,r2,1
    9d60:	18c0004c 	andi	r3,r3,1
    9d64:	1c62b03a 	or	r17,r3,r17
    9d68:	9c400115 	stw	r17,4(r19)
    9d6c:	29000115 	stw	r4,4(r5)
    9d70:	2885883a 	add	r2,r5,r2
    9d74:	10c00117 	ldw	r3,4(r2)
    9d78:	29400204 	addi	r5,r5,8
    9d7c:	a009883a 	mov	r4,r20
    9d80:	18c00054 	ori	r3,r3,1
    9d84:	10c00115 	stw	r3,4(r2)
    9d88:	0007ae00 	call	7ae0 <_free_r>
    9d8c:	003fd306 	br	9cdc <__alt_data_end+0xff009cdc>
    9d90:	017fff04 	movi	r5,-4
    9d94:	414a703a 	and	r5,r8,r5
    9d98:	89800404 	addi	r6,r17,16
    9d9c:	8151883a 	add	r8,r16,r5
    9da0:	4180590e 	bge	r8,r6,9f08 <_realloc_r+0x390>
    9da4:	1080004c 	andi	r2,r2,1
    9da8:	103f9e1e 	bne	r2,zero,9c24 <__alt_data_end+0xff009c24>
    9dac:	adbffe17 	ldw	r22,-8(r21)
    9db0:	00bfff04 	movi	r2,-4
    9db4:	9dadc83a 	sub	r22,r19,r22
    9db8:	b1800117 	ldw	r6,4(r22)
    9dbc:	3084703a 	and	r2,r6,r2
    9dc0:	20002026 	beq	r4,zero,9e44 <_realloc_r+0x2cc>
    9dc4:	80af883a 	add	r23,r16,r2
    9dc8:	b96f883a 	add	r23,r23,r5
    9dcc:	21c05f26 	beq	r4,r7,9f4c <_realloc_r+0x3d4>
    9dd0:	b8c01c16 	blt	r23,r3,9e44 <_realloc_r+0x2cc>
    9dd4:	20800317 	ldw	r2,12(r4)
    9dd8:	20c00217 	ldw	r3,8(r4)
    9ddc:	81bfff04 	addi	r6,r16,-4
    9de0:	01000904 	movi	r4,36
    9de4:	18800315 	stw	r2,12(r3)
    9de8:	10c00215 	stw	r3,8(r2)
    9dec:	b0c00217 	ldw	r3,8(r22)
    9df0:	b0800317 	ldw	r2,12(r22)
    9df4:	b4800204 	addi	r18,r22,8
    9df8:	18800315 	stw	r2,12(r3)
    9dfc:	10c00215 	stw	r3,8(r2)
    9e00:	21801b36 	bltu	r4,r6,9e70 <_realloc_r+0x2f8>
    9e04:	008004c4 	movi	r2,19
    9e08:	1180352e 	bgeu	r2,r6,9ee0 <_realloc_r+0x368>
    9e0c:	a8800017 	ldw	r2,0(r21)
    9e10:	b0800215 	stw	r2,8(r22)
    9e14:	a8800117 	ldw	r2,4(r21)
    9e18:	b0800315 	stw	r2,12(r22)
    9e1c:	008006c4 	movi	r2,27
    9e20:	11807f36 	bltu	r2,r6,a020 <_realloc_r+0x4a8>
    9e24:	b0800404 	addi	r2,r22,16
    9e28:	ad400204 	addi	r21,r21,8
    9e2c:	00002d06 	br	9ee4 <_realloc_r+0x36c>
    9e30:	adbffe17 	ldw	r22,-8(r21)
    9e34:	00bfff04 	movi	r2,-4
    9e38:	9dadc83a 	sub	r22,r19,r22
    9e3c:	b1000117 	ldw	r4,4(r22)
    9e40:	2084703a 	and	r2,r4,r2
    9e44:	b03f7726 	beq	r22,zero,9c24 <__alt_data_end+0xff009c24>
    9e48:	80af883a 	add	r23,r16,r2
    9e4c:	b8ff7516 	blt	r23,r3,9c24 <__alt_data_end+0xff009c24>
    9e50:	b0800317 	ldw	r2,12(r22)
    9e54:	b0c00217 	ldw	r3,8(r22)
    9e58:	81bfff04 	addi	r6,r16,-4
    9e5c:	01000904 	movi	r4,36
    9e60:	18800315 	stw	r2,12(r3)
    9e64:	10c00215 	stw	r3,8(r2)
    9e68:	b4800204 	addi	r18,r22,8
    9e6c:	21bfe52e 	bgeu	r4,r6,9e04 <__alt_data_end+0xff009e04>
    9e70:	a80b883a 	mov	r5,r21
    9e74:	9009883a 	mov	r4,r18
    9e78:	00088f80 	call	88f8 <memmove>
    9e7c:	b821883a 	mov	r16,r23
    9e80:	b027883a 	mov	r19,r22
    9e84:	003f8a06 	br	9cb0 <__alt_data_end+0xff009cb0>
    9e88:	300b883a 	mov	r5,r6
    9e8c:	dfc00917 	ldw	ra,36(sp)
    9e90:	df000817 	ldw	fp,32(sp)
    9e94:	ddc00717 	ldw	r23,28(sp)
    9e98:	dd800617 	ldw	r22,24(sp)
    9e9c:	dd400517 	ldw	r21,20(sp)
    9ea0:	dd000417 	ldw	r20,16(sp)
    9ea4:	dcc00317 	ldw	r19,12(sp)
    9ea8:	dc800217 	ldw	r18,8(sp)
    9eac:	dc400117 	ldw	r17,4(sp)
    9eb0:	dc000017 	ldw	r16,0(sp)
    9eb4:	dec00a04 	addi	sp,sp,40
    9eb8:	0002c901 	jmpi	2c90 <_malloc_r>
    9ebc:	a8c00017 	ldw	r3,0(r21)
    9ec0:	90c00015 	stw	r3,0(r18)
    9ec4:	a8c00117 	ldw	r3,4(r21)
    9ec8:	90c00115 	stw	r3,4(r18)
    9ecc:	00c006c4 	movi	r3,27
    9ed0:	19804536 	bltu	r3,r6,9fe8 <_realloc_r+0x470>
    9ed4:	90800204 	addi	r2,r18,8
    9ed8:	a8c00204 	addi	r3,r21,8
    9edc:	003f6306 	br	9c6c <__alt_data_end+0xff009c6c>
    9ee0:	9005883a 	mov	r2,r18
    9ee4:	a8c00017 	ldw	r3,0(r21)
    9ee8:	b821883a 	mov	r16,r23
    9eec:	b027883a 	mov	r19,r22
    9ef0:	10c00015 	stw	r3,0(r2)
    9ef4:	a8c00117 	ldw	r3,4(r21)
    9ef8:	10c00115 	stw	r3,4(r2)
    9efc:	a8c00217 	ldw	r3,8(r21)
    9f00:	10c00215 	stw	r3,8(r2)
    9f04:	003f6a06 	br	9cb0 <__alt_data_end+0xff009cb0>
    9f08:	9c67883a 	add	r19,r19,r17
    9f0c:	4445c83a 	sub	r2,r8,r17
    9f10:	e4c00215 	stw	r19,8(fp)
    9f14:	10800054 	ori	r2,r2,1
    9f18:	98800115 	stw	r2,4(r19)
    9f1c:	a8bfff17 	ldw	r2,-4(r21)
    9f20:	a009883a 	mov	r4,r20
    9f24:	1080004c 	andi	r2,r2,1
    9f28:	1462b03a 	or	r17,r2,r17
    9f2c:	ac7fff15 	stw	r17,-4(r21)
    9f30:	000f99c0 	call	f99c <__malloc_unlock>
    9f34:	a805883a 	mov	r2,r21
    9f38:	003f6b06 	br	9ce8 <__alt_data_end+0xff009ce8>
    9f3c:	a80b883a 	mov	r5,r21
    9f40:	9009883a 	mov	r4,r18
    9f44:	00088f80 	call	88f8 <memmove>
    9f48:	003f4e06 	br	9c84 <__alt_data_end+0xff009c84>
    9f4c:	89000404 	addi	r4,r17,16
    9f50:	b93fbc16 	blt	r23,r4,9e44 <__alt_data_end+0xff009e44>
    9f54:	b0800317 	ldw	r2,12(r22)
    9f58:	b0c00217 	ldw	r3,8(r22)
    9f5c:	81bfff04 	addi	r6,r16,-4
    9f60:	01000904 	movi	r4,36
    9f64:	18800315 	stw	r2,12(r3)
    9f68:	10c00215 	stw	r3,8(r2)
    9f6c:	b4800204 	addi	r18,r22,8
    9f70:	21804336 	bltu	r4,r6,a080 <_realloc_r+0x508>
    9f74:	008004c4 	movi	r2,19
    9f78:	11803f2e 	bgeu	r2,r6,a078 <_realloc_r+0x500>
    9f7c:	a8800017 	ldw	r2,0(r21)
    9f80:	b0800215 	stw	r2,8(r22)
    9f84:	a8800117 	ldw	r2,4(r21)
    9f88:	b0800315 	stw	r2,12(r22)
    9f8c:	008006c4 	movi	r2,27
    9f90:	11803f36 	bltu	r2,r6,a090 <_realloc_r+0x518>
    9f94:	b0800404 	addi	r2,r22,16
    9f98:	ad400204 	addi	r21,r21,8
    9f9c:	a8c00017 	ldw	r3,0(r21)
    9fa0:	10c00015 	stw	r3,0(r2)
    9fa4:	a8c00117 	ldw	r3,4(r21)
    9fa8:	10c00115 	stw	r3,4(r2)
    9fac:	a8c00217 	ldw	r3,8(r21)
    9fb0:	10c00215 	stw	r3,8(r2)
    9fb4:	b447883a 	add	r3,r22,r17
    9fb8:	bc45c83a 	sub	r2,r23,r17
    9fbc:	e0c00215 	stw	r3,8(fp)
    9fc0:	10800054 	ori	r2,r2,1
    9fc4:	18800115 	stw	r2,4(r3)
    9fc8:	b0800117 	ldw	r2,4(r22)
    9fcc:	a009883a 	mov	r4,r20
    9fd0:	1080004c 	andi	r2,r2,1
    9fd4:	1462b03a 	or	r17,r2,r17
    9fd8:	b4400115 	stw	r17,4(r22)
    9fdc:	000f99c0 	call	f99c <__malloc_unlock>
    9fe0:	9005883a 	mov	r2,r18
    9fe4:	003f4006 	br	9ce8 <__alt_data_end+0xff009ce8>
    9fe8:	a8c00217 	ldw	r3,8(r21)
    9fec:	90c00215 	stw	r3,8(r18)
    9ff0:	a8c00317 	ldw	r3,12(r21)
    9ff4:	90c00315 	stw	r3,12(r18)
    9ff8:	30801126 	beq	r6,r2,a040 <_realloc_r+0x4c8>
    9ffc:	90800404 	addi	r2,r18,16
    a000:	a8c00404 	addi	r3,r21,16
    a004:	003f1906 	br	9c6c <__alt_data_end+0xff009c6c>
    a008:	90ffff17 	ldw	r3,-4(r18)
    a00c:	00bfff04 	movi	r2,-4
    a010:	a825883a 	mov	r18,r21
    a014:	1884703a 	and	r2,r3,r2
    a018:	80a1883a 	add	r16,r16,r2
    a01c:	003f2406 	br	9cb0 <__alt_data_end+0xff009cb0>
    a020:	a8800217 	ldw	r2,8(r21)
    a024:	b0800415 	stw	r2,16(r22)
    a028:	a8800317 	ldw	r2,12(r21)
    a02c:	b0800515 	stw	r2,20(r22)
    a030:	31000a26 	beq	r6,r4,a05c <_realloc_r+0x4e4>
    a034:	b0800604 	addi	r2,r22,24
    a038:	ad400404 	addi	r21,r21,16
    a03c:	003fa906 	br	9ee4 <__alt_data_end+0xff009ee4>
    a040:	a9000417 	ldw	r4,16(r21)
    a044:	90800604 	addi	r2,r18,24
    a048:	a8c00604 	addi	r3,r21,24
    a04c:	91000415 	stw	r4,16(r18)
    a050:	a9000517 	ldw	r4,20(r21)
    a054:	91000515 	stw	r4,20(r18)
    a058:	003f0406 	br	9c6c <__alt_data_end+0xff009c6c>
    a05c:	a8c00417 	ldw	r3,16(r21)
    a060:	ad400604 	addi	r21,r21,24
    a064:	b0800804 	addi	r2,r22,32
    a068:	b0c00615 	stw	r3,24(r22)
    a06c:	a8ffff17 	ldw	r3,-4(r21)
    a070:	b0c00715 	stw	r3,28(r22)
    a074:	003f9b06 	br	9ee4 <__alt_data_end+0xff009ee4>
    a078:	9005883a 	mov	r2,r18
    a07c:	003fc706 	br	9f9c <__alt_data_end+0xff009f9c>
    a080:	a80b883a 	mov	r5,r21
    a084:	9009883a 	mov	r4,r18
    a088:	00088f80 	call	88f8 <memmove>
    a08c:	003fc906 	br	9fb4 <__alt_data_end+0xff009fb4>
    a090:	a8800217 	ldw	r2,8(r21)
    a094:	b0800415 	stw	r2,16(r22)
    a098:	a8800317 	ldw	r2,12(r21)
    a09c:	b0800515 	stw	r2,20(r22)
    a0a0:	31000726 	beq	r6,r4,a0c0 <_realloc_r+0x548>
    a0a4:	b0800604 	addi	r2,r22,24
    a0a8:	ad400404 	addi	r21,r21,16
    a0ac:	003fbb06 	br	9f9c <__alt_data_end+0xff009f9c>
    a0b0:	a009883a 	mov	r4,r20
    a0b4:	000f99c0 	call	f99c <__malloc_unlock>
    a0b8:	0005883a 	mov	r2,zero
    a0bc:	003f0a06 	br	9ce8 <__alt_data_end+0xff009ce8>
    a0c0:	a8c00417 	ldw	r3,16(r21)
    a0c4:	ad400604 	addi	r21,r21,24
    a0c8:	b0800804 	addi	r2,r22,32
    a0cc:	b0c00615 	stw	r3,24(r22)
    a0d0:	a8ffff17 	ldw	r3,-4(r21)
    a0d4:	b0c00715 	stw	r3,28(r22)
    a0d8:	003fb006 	br	9f9c <__alt_data_end+0xff009f9c>

0000a0dc <__fpclassifyd>:
    a0dc:	00a00034 	movhi	r2,32768
    a0e0:	10bfffc4 	addi	r2,r2,-1
    a0e4:	2884703a 	and	r2,r5,r2
    a0e8:	10000726 	beq	r2,zero,a108 <__fpclassifyd+0x2c>
    a0ec:	00fffc34 	movhi	r3,65520
    a0f0:	019ff834 	movhi	r6,32736
    a0f4:	28c7883a 	add	r3,r5,r3
    a0f8:	31bfffc4 	addi	r6,r6,-1
    a0fc:	30c00536 	bltu	r6,r3,a114 <__fpclassifyd+0x38>
    a100:	00800104 	movi	r2,4
    a104:	f800283a 	ret
    a108:	2000021e 	bne	r4,zero,a114 <__fpclassifyd+0x38>
    a10c:	00800084 	movi	r2,2
    a110:	f800283a 	ret
    a114:	00dffc34 	movhi	r3,32752
    a118:	019ff834 	movhi	r6,32736
    a11c:	28cb883a 	add	r5,r5,r3
    a120:	31bfffc4 	addi	r6,r6,-1
    a124:	317ff62e 	bgeu	r6,r5,a100 <__alt_data_end+0xff00a100>
    a128:	01400434 	movhi	r5,16
    a12c:	297fffc4 	addi	r5,r5,-1
    a130:	28800236 	bltu	r5,r2,a13c <__fpclassifyd+0x60>
    a134:	008000c4 	movi	r2,3
    a138:	f800283a 	ret
    a13c:	10c00226 	beq	r2,r3,a148 <__fpclassifyd+0x6c>
    a140:	0005883a 	mov	r2,zero
    a144:	f800283a 	ret
    a148:	2005003a 	cmpeq	r2,r4,zero
    a14c:	f800283a 	ret

0000a150 <__sread>:
    a150:	defffe04 	addi	sp,sp,-8
    a154:	dc000015 	stw	r16,0(sp)
    a158:	2821883a 	mov	r16,r5
    a15c:	2940038f 	ldh	r5,14(r5)
    a160:	dfc00115 	stw	ra,4(sp)
    a164:	000bf440 	call	bf44 <_read_r>
    a168:	10000716 	blt	r2,zero,a188 <__sread+0x38>
    a16c:	80c01417 	ldw	r3,80(r16)
    a170:	1887883a 	add	r3,r3,r2
    a174:	80c01415 	stw	r3,80(r16)
    a178:	dfc00117 	ldw	ra,4(sp)
    a17c:	dc000017 	ldw	r16,0(sp)
    a180:	dec00204 	addi	sp,sp,8
    a184:	f800283a 	ret
    a188:	80c0030b 	ldhu	r3,12(r16)
    a18c:	18fbffcc 	andi	r3,r3,61439
    a190:	80c0030d 	sth	r3,12(r16)
    a194:	dfc00117 	ldw	ra,4(sp)
    a198:	dc000017 	ldw	r16,0(sp)
    a19c:	dec00204 	addi	sp,sp,8
    a1a0:	f800283a 	ret

0000a1a4 <__seofread>:
    a1a4:	0005883a 	mov	r2,zero
    a1a8:	f800283a 	ret

0000a1ac <__swrite>:
    a1ac:	2880030b 	ldhu	r2,12(r5)
    a1b0:	defffb04 	addi	sp,sp,-20
    a1b4:	dcc00315 	stw	r19,12(sp)
    a1b8:	dc800215 	stw	r18,8(sp)
    a1bc:	dc400115 	stw	r17,4(sp)
    a1c0:	dc000015 	stw	r16,0(sp)
    a1c4:	dfc00415 	stw	ra,16(sp)
    a1c8:	10c0400c 	andi	r3,r2,256
    a1cc:	2821883a 	mov	r16,r5
    a1d0:	2023883a 	mov	r17,r4
    a1d4:	3025883a 	mov	r18,r6
    a1d8:	3827883a 	mov	r19,r7
    a1dc:	18000526 	beq	r3,zero,a1f4 <__swrite+0x48>
    a1e0:	2940038f 	ldh	r5,14(r5)
    a1e4:	01c00084 	movi	r7,2
    a1e8:	000d883a 	mov	r6,zero
    a1ec:	000bee40 	call	bee4 <_lseek_r>
    a1f0:	8080030b 	ldhu	r2,12(r16)
    a1f4:	8140038f 	ldh	r5,14(r16)
    a1f8:	10bbffcc 	andi	r2,r2,61439
    a1fc:	980f883a 	mov	r7,r19
    a200:	900d883a 	mov	r6,r18
    a204:	8809883a 	mov	r4,r17
    a208:	8080030d 	sth	r2,12(r16)
    a20c:	dfc00417 	ldw	ra,16(sp)
    a210:	dcc00317 	ldw	r19,12(sp)
    a214:	dc800217 	ldw	r18,8(sp)
    a218:	dc400117 	ldw	r17,4(sp)
    a21c:	dc000017 	ldw	r16,0(sp)
    a220:	dec00504 	addi	sp,sp,20
    a224:	000b9b01 	jmpi	b9b0 <_write_r>

0000a228 <__sseek>:
    a228:	defffe04 	addi	sp,sp,-8
    a22c:	dc000015 	stw	r16,0(sp)
    a230:	2821883a 	mov	r16,r5
    a234:	2940038f 	ldh	r5,14(r5)
    a238:	dfc00115 	stw	ra,4(sp)
    a23c:	000bee40 	call	bee4 <_lseek_r>
    a240:	00ffffc4 	movi	r3,-1
    a244:	10c00826 	beq	r2,r3,a268 <__sseek+0x40>
    a248:	80c0030b 	ldhu	r3,12(r16)
    a24c:	80801415 	stw	r2,80(r16)
    a250:	18c40014 	ori	r3,r3,4096
    a254:	80c0030d 	sth	r3,12(r16)
    a258:	dfc00117 	ldw	ra,4(sp)
    a25c:	dc000017 	ldw	r16,0(sp)
    a260:	dec00204 	addi	sp,sp,8
    a264:	f800283a 	ret
    a268:	80c0030b 	ldhu	r3,12(r16)
    a26c:	18fbffcc 	andi	r3,r3,61439
    a270:	80c0030d 	sth	r3,12(r16)
    a274:	dfc00117 	ldw	ra,4(sp)
    a278:	dc000017 	ldw	r16,0(sp)
    a27c:	dec00204 	addi	sp,sp,8
    a280:	f800283a 	ret

0000a284 <__sclose>:
    a284:	2940038f 	ldh	r5,14(r5)
    a288:	000ba101 	jmpi	ba10 <_close_r>

0000a28c <strcmp>:
    a28c:	2144b03a 	or	r2,r4,r5
    a290:	108000cc 	andi	r2,r2,3
    a294:	1000171e 	bne	r2,zero,a2f4 <strcmp+0x68>
    a298:	20800017 	ldw	r2,0(r4)
    a29c:	28c00017 	ldw	r3,0(r5)
    a2a0:	10c0141e 	bne	r2,r3,a2f4 <strcmp+0x68>
    a2a4:	027fbff4 	movhi	r9,65279
    a2a8:	4a7fbfc4 	addi	r9,r9,-257
    a2ac:	0086303a 	nor	r3,zero,r2
    a2b0:	02202074 	movhi	r8,32897
    a2b4:	1245883a 	add	r2,r2,r9
    a2b8:	42202004 	addi	r8,r8,-32640
    a2bc:	10c4703a 	and	r2,r2,r3
    a2c0:	1204703a 	and	r2,r2,r8
    a2c4:	10000226 	beq	r2,zero,a2d0 <strcmp+0x44>
    a2c8:	00002306 	br	a358 <strcmp+0xcc>
    a2cc:	1000221e 	bne	r2,zero,a358 <strcmp+0xcc>
    a2d0:	21000104 	addi	r4,r4,4
    a2d4:	20c00017 	ldw	r3,0(r4)
    a2d8:	29400104 	addi	r5,r5,4
    a2dc:	29800017 	ldw	r6,0(r5)
    a2e0:	1a4f883a 	add	r7,r3,r9
    a2e4:	00c4303a 	nor	r2,zero,r3
    a2e8:	3884703a 	and	r2,r7,r2
    a2ec:	1204703a 	and	r2,r2,r8
    a2f0:	19bff626 	beq	r3,r6,a2cc <__alt_data_end+0xff00a2cc>
    a2f4:	20800003 	ldbu	r2,0(r4)
    a2f8:	10c03fcc 	andi	r3,r2,255
    a2fc:	18c0201c 	xori	r3,r3,128
    a300:	18ffe004 	addi	r3,r3,-128
    a304:	18000c26 	beq	r3,zero,a338 <strcmp+0xac>
    a308:	29800007 	ldb	r6,0(r5)
    a30c:	19800326 	beq	r3,r6,a31c <strcmp+0x90>
    a310:	00001306 	br	a360 <strcmp+0xd4>
    a314:	29800007 	ldb	r6,0(r5)
    a318:	11800b1e 	bne	r2,r6,a348 <strcmp+0xbc>
    a31c:	21000044 	addi	r4,r4,1
    a320:	20c00003 	ldbu	r3,0(r4)
    a324:	29400044 	addi	r5,r5,1
    a328:	18803fcc 	andi	r2,r3,255
    a32c:	1080201c 	xori	r2,r2,128
    a330:	10bfe004 	addi	r2,r2,-128
    a334:	103ff71e 	bne	r2,zero,a314 <__alt_data_end+0xff00a314>
    a338:	0007883a 	mov	r3,zero
    a33c:	28800003 	ldbu	r2,0(r5)
    a340:	1885c83a 	sub	r2,r3,r2
    a344:	f800283a 	ret
    a348:	28800003 	ldbu	r2,0(r5)
    a34c:	18c03fcc 	andi	r3,r3,255
    a350:	1885c83a 	sub	r2,r3,r2
    a354:	f800283a 	ret
    a358:	0005883a 	mov	r2,zero
    a35c:	f800283a 	ret
    a360:	10c03fcc 	andi	r3,r2,255
    a364:	003ff506 	br	a33c <__alt_data_end+0xff00a33c>

0000a368 <__sprint_r.part.0>:
    a368:	28801917 	ldw	r2,100(r5)
    a36c:	defff604 	addi	sp,sp,-40
    a370:	dd400515 	stw	r21,20(sp)
    a374:	dfc00915 	stw	ra,36(sp)
    a378:	df000815 	stw	fp,32(sp)
    a37c:	ddc00715 	stw	r23,28(sp)
    a380:	dd800615 	stw	r22,24(sp)
    a384:	dd000415 	stw	r20,16(sp)
    a388:	dcc00315 	stw	r19,12(sp)
    a38c:	dc800215 	stw	r18,8(sp)
    a390:	dc400115 	stw	r17,4(sp)
    a394:	dc000015 	stw	r16,0(sp)
    a398:	1088000c 	andi	r2,r2,8192
    a39c:	302b883a 	mov	r21,r6
    a3a0:	10002e26 	beq	r2,zero,a45c <__sprint_r.part.0+0xf4>
    a3a4:	30800217 	ldw	r2,8(r6)
    a3a8:	35800017 	ldw	r22,0(r6)
    a3ac:	10002926 	beq	r2,zero,a454 <__sprint_r.part.0+0xec>
    a3b0:	2827883a 	mov	r19,r5
    a3b4:	2029883a 	mov	r20,r4
    a3b8:	b5c00104 	addi	r23,r22,4
    a3bc:	04bfffc4 	movi	r18,-1
    a3c0:	bc400017 	ldw	r17,0(r23)
    a3c4:	b4000017 	ldw	r16,0(r22)
    a3c8:	0039883a 	mov	fp,zero
    a3cc:	8822d0ba 	srli	r17,r17,2
    a3d0:	8800031e 	bne	r17,zero,a3e0 <__sprint_r.part.0+0x78>
    a3d4:	00001806 	br	a438 <__sprint_r.part.0+0xd0>
    a3d8:	84000104 	addi	r16,r16,4
    a3dc:	8f001526 	beq	r17,fp,a434 <__sprint_r.part.0+0xcc>
    a3e0:	81400017 	ldw	r5,0(r16)
    a3e4:	980d883a 	mov	r6,r19
    a3e8:	a009883a 	mov	r4,r20
    a3ec:	000bd900 	call	bd90 <_fputwc_r>
    a3f0:	e7000044 	addi	fp,fp,1
    a3f4:	14bff81e 	bne	r2,r18,a3d8 <__alt_data_end+0xff00a3d8>
    a3f8:	9005883a 	mov	r2,r18
    a3fc:	a8000215 	stw	zero,8(r21)
    a400:	a8000115 	stw	zero,4(r21)
    a404:	dfc00917 	ldw	ra,36(sp)
    a408:	df000817 	ldw	fp,32(sp)
    a40c:	ddc00717 	ldw	r23,28(sp)
    a410:	dd800617 	ldw	r22,24(sp)
    a414:	dd400517 	ldw	r21,20(sp)
    a418:	dd000417 	ldw	r20,16(sp)
    a41c:	dcc00317 	ldw	r19,12(sp)
    a420:	dc800217 	ldw	r18,8(sp)
    a424:	dc400117 	ldw	r17,4(sp)
    a428:	dc000017 	ldw	r16,0(sp)
    a42c:	dec00a04 	addi	sp,sp,40
    a430:	f800283a 	ret
    a434:	a8800217 	ldw	r2,8(r21)
    a438:	8c63883a 	add	r17,r17,r17
    a43c:	8c63883a 	add	r17,r17,r17
    a440:	1445c83a 	sub	r2,r2,r17
    a444:	a8800215 	stw	r2,8(r21)
    a448:	b5800204 	addi	r22,r22,8
    a44c:	bdc00204 	addi	r23,r23,8
    a450:	103fdb1e 	bne	r2,zero,a3c0 <__alt_data_end+0xff00a3c0>
    a454:	0005883a 	mov	r2,zero
    a458:	003fe806 	br	a3fc <__alt_data_end+0xff00a3fc>
    a45c:	0007df00 	call	7df0 <__sfvwrite_r>
    a460:	003fe606 	br	a3fc <__alt_data_end+0xff00a3fc>

0000a464 <__sprint_r>:
    a464:	30c00217 	ldw	r3,8(r6)
    a468:	18000126 	beq	r3,zero,a470 <__sprint_r+0xc>
    a46c:	000a3681 	jmpi	a368 <__sprint_r.part.0>
    a470:	30000115 	stw	zero,4(r6)
    a474:	0005883a 	mov	r2,zero
    a478:	f800283a 	ret

0000a47c <___vfiprintf_internal_r>:
    a47c:	deffc904 	addi	sp,sp,-220
    a480:	df003515 	stw	fp,212(sp)
    a484:	dd003115 	stw	r20,196(sp)
    a488:	dfc03615 	stw	ra,216(sp)
    a48c:	ddc03415 	stw	r23,208(sp)
    a490:	dd803315 	stw	r22,204(sp)
    a494:	dd403215 	stw	r21,200(sp)
    a498:	dcc03015 	stw	r19,192(sp)
    a49c:	dc802f15 	stw	r18,188(sp)
    a4a0:	dc402e15 	stw	r17,184(sp)
    a4a4:	dc002d15 	stw	r16,180(sp)
    a4a8:	d9002015 	stw	r4,128(sp)
    a4ac:	d9c02215 	stw	r7,136(sp)
    a4b0:	2829883a 	mov	r20,r5
    a4b4:	3039883a 	mov	fp,r6
    a4b8:	20000226 	beq	r4,zero,a4c4 <___vfiprintf_internal_r+0x48>
    a4bc:	20800e17 	ldw	r2,56(r4)
    a4c0:	1000cf26 	beq	r2,zero,a800 <___vfiprintf_internal_r+0x384>
    a4c4:	a080030b 	ldhu	r2,12(r20)
    a4c8:	10c8000c 	andi	r3,r2,8192
    a4cc:	1800061e 	bne	r3,zero,a4e8 <___vfiprintf_internal_r+0x6c>
    a4d0:	a1001917 	ldw	r4,100(r20)
    a4d4:	00f7ffc4 	movi	r3,-8193
    a4d8:	10880014 	ori	r2,r2,8192
    a4dc:	20c6703a 	and	r3,r4,r3
    a4e0:	a080030d 	sth	r2,12(r20)
    a4e4:	a0c01915 	stw	r3,100(r20)
    a4e8:	10c0020c 	andi	r3,r2,8
    a4ec:	1800a926 	beq	r3,zero,a794 <___vfiprintf_internal_r+0x318>
    a4f0:	a0c00417 	ldw	r3,16(r20)
    a4f4:	1800a726 	beq	r3,zero,a794 <___vfiprintf_internal_r+0x318>
    a4f8:	1080068c 	andi	r2,r2,26
    a4fc:	00c00284 	movi	r3,10
    a500:	10c0ac26 	beq	r2,r3,a7b4 <___vfiprintf_internal_r+0x338>
    a504:	da801a04 	addi	r10,sp,104
    a508:	da801e15 	stw	r10,120(sp)
    a50c:	d8801e17 	ldw	r2,120(sp)
    a510:	da8019c4 	addi	r10,sp,103
    a514:	05800074 	movhi	r22,1
    a518:	05c00074 	movhi	r23,1
    a51c:	da801f15 	stw	r10,124(sp)
    a520:	1295c83a 	sub	r10,r2,r10
    a524:	b5893204 	addi	r22,r22,9416
    a528:	bdc92e04 	addi	r23,r23,9400
    a52c:	dec01a15 	stw	sp,104(sp)
    a530:	d8001c15 	stw	zero,112(sp)
    a534:	d8001b15 	stw	zero,108(sp)
    a538:	d8002615 	stw	zero,152(sp)
    a53c:	d8002315 	stw	zero,140(sp)
    a540:	da802715 	stw	r10,156(sp)
    a544:	d811883a 	mov	r8,sp
    a548:	dd002115 	stw	r20,132(sp)
    a54c:	e021883a 	mov	r16,fp
    a550:	80800007 	ldb	r2,0(r16)
    a554:	1003ea26 	beq	r2,zero,b500 <___vfiprintf_internal_r+0x1084>
    a558:	00c00944 	movi	r3,37
    a55c:	8025883a 	mov	r18,r16
    a560:	10c0021e 	bne	r2,r3,a56c <___vfiprintf_internal_r+0xf0>
    a564:	00001606 	br	a5c0 <___vfiprintf_internal_r+0x144>
    a568:	10c00326 	beq	r2,r3,a578 <___vfiprintf_internal_r+0xfc>
    a56c:	94800044 	addi	r18,r18,1
    a570:	90800007 	ldb	r2,0(r18)
    a574:	103ffc1e 	bne	r2,zero,a568 <__alt_data_end+0xff00a568>
    a578:	9423c83a 	sub	r17,r18,r16
    a57c:	88001026 	beq	r17,zero,a5c0 <___vfiprintf_internal_r+0x144>
    a580:	d8c01c17 	ldw	r3,112(sp)
    a584:	d8801b17 	ldw	r2,108(sp)
    a588:	44000015 	stw	r16,0(r8)
    a58c:	88c7883a 	add	r3,r17,r3
    a590:	10800044 	addi	r2,r2,1
    a594:	44400115 	stw	r17,4(r8)
    a598:	d8c01c15 	stw	r3,112(sp)
    a59c:	d8801b15 	stw	r2,108(sp)
    a5a0:	010001c4 	movi	r4,7
    a5a4:	2080760e 	bge	r4,r2,a780 <___vfiprintf_internal_r+0x304>
    a5a8:	1803821e 	bne	r3,zero,b3b4 <___vfiprintf_internal_r+0xf38>
    a5ac:	da802317 	ldw	r10,140(sp)
    a5b0:	d8001b15 	stw	zero,108(sp)
    a5b4:	d811883a 	mov	r8,sp
    a5b8:	5455883a 	add	r10,r10,r17
    a5bc:	da802315 	stw	r10,140(sp)
    a5c0:	90800007 	ldb	r2,0(r18)
    a5c4:	10044626 	beq	r2,zero,b6e0 <___vfiprintf_internal_r+0x1264>
    a5c8:	90c00047 	ldb	r3,1(r18)
    a5cc:	94000044 	addi	r16,r18,1
    a5d0:	d8001d85 	stb	zero,118(sp)
    a5d4:	0009883a 	mov	r4,zero
    a5d8:	000f883a 	mov	r7,zero
    a5dc:	027fffc4 	movi	r9,-1
    a5e0:	0023883a 	mov	r17,zero
    a5e4:	0029883a 	mov	r20,zero
    a5e8:	01401604 	movi	r5,88
    a5ec:	01800244 	movi	r6,9
    a5f0:	03400a84 	movi	r13,42
    a5f4:	03001b04 	movi	r12,108
    a5f8:	84000044 	addi	r16,r16,1
    a5fc:	18bff804 	addi	r2,r3,-32
    a600:	28827336 	bltu	r5,r2,afd0 <___vfiprintf_internal_r+0xb54>
    a604:	100490ba 	slli	r2,r2,2
    a608:	02800074 	movhi	r10,1
    a60c:	52a98704 	addi	r10,r10,-23012
    a610:	1285883a 	add	r2,r2,r10
    a614:	10800017 	ldw	r2,0(r2)
    a618:	1000683a 	jmp	r2
    a61c:	0000ad04 	movi	zero,692
    a620:	0000afd0 	cmplti	zero,zero,703
    a624:	0000afd0 	cmplti	zero,zero,703
    a628:	0000ad24 	muli	zero,zero,692
    a62c:	0000afd0 	cmplti	zero,zero,703
    a630:	0000afd0 	cmplti	zero,zero,703
    a634:	0000afd0 	cmplti	zero,zero,703
    a638:	0000afd0 	cmplti	zero,zero,703
    a63c:	0000afd0 	cmplti	zero,zero,703
    a640:	0000afd0 	cmplti	zero,zero,703
    a644:	0000af0c 	andi	zero,zero,700
    a648:	0000af28 	cmpgeui	zero,zero,700
    a64c:	0000afd0 	cmplti	zero,zero,703
    a650:	0000a810 	cmplti	zero,zero,672
    a654:	0000af38 	rdprs	zero,zero,700
    a658:	0000afd0 	cmplti	zero,zero,703
    a65c:	0000ad30 	cmpltui	zero,zero,692
    a660:	0000ad3c 	xorhi	zero,zero,692
    a664:	0000ad3c 	xorhi	zero,zero,692
    a668:	0000ad3c 	xorhi	zero,zero,692
    a66c:	0000ad3c 	xorhi	zero,zero,692
    a670:	0000ad3c 	xorhi	zero,zero,692
    a674:	0000ad3c 	xorhi	zero,zero,692
    a678:	0000ad3c 	xorhi	zero,zero,692
    a67c:	0000ad3c 	xorhi	zero,zero,692
    a680:	0000ad3c 	xorhi	zero,zero,692
    a684:	0000afd0 	cmplti	zero,zero,703
    a688:	0000afd0 	cmplti	zero,zero,703
    a68c:	0000afd0 	cmplti	zero,zero,703
    a690:	0000afd0 	cmplti	zero,zero,703
    a694:	0000afd0 	cmplti	zero,zero,703
    a698:	0000afd0 	cmplti	zero,zero,703
    a69c:	0000afd0 	cmplti	zero,zero,703
    a6a0:	0000afd0 	cmplti	zero,zero,703
    a6a4:	0000afd0 	cmplti	zero,zero,703
    a6a8:	0000afd0 	cmplti	zero,zero,703
    a6ac:	0000ad68 	cmpgeui	zero,zero,693
    a6b0:	0000afd0 	cmplti	zero,zero,703
    a6b4:	0000afd0 	cmplti	zero,zero,703
    a6b8:	0000afd0 	cmplti	zero,zero,703
    a6bc:	0000afd0 	cmplti	zero,zero,703
    a6c0:	0000afd0 	cmplti	zero,zero,703
    a6c4:	0000afd0 	cmplti	zero,zero,703
    a6c8:	0000afd0 	cmplti	zero,zero,703
    a6cc:	0000afd0 	cmplti	zero,zero,703
    a6d0:	0000afd0 	cmplti	zero,zero,703
    a6d4:	0000afd0 	cmplti	zero,zero,703
    a6d8:	0000ada0 	cmpeqi	zero,zero,694
    a6dc:	0000afd0 	cmplti	zero,zero,703
    a6e0:	0000afd0 	cmplti	zero,zero,703
    a6e4:	0000afd0 	cmplti	zero,zero,703
    a6e8:	0000afd0 	cmplti	zero,zero,703
    a6ec:	0000afd0 	cmplti	zero,zero,703
    a6f0:	0000adf8 	rdprs	zero,zero,695
    a6f4:	0000afd0 	cmplti	zero,zero,703
    a6f8:	0000afd0 	cmplti	zero,zero,703
    a6fc:	0000ae68 	cmpgeui	zero,zero,697
    a700:	0000afd0 	cmplti	zero,zero,703
    a704:	0000afd0 	cmplti	zero,zero,703
    a708:	0000afd0 	cmplti	zero,zero,703
    a70c:	0000afd0 	cmplti	zero,zero,703
    a710:	0000afd0 	cmplti	zero,zero,703
    a714:	0000afd0 	cmplti	zero,zero,703
    a718:	0000afd0 	cmplti	zero,zero,703
    a71c:	0000afd0 	cmplti	zero,zero,703
    a720:	0000afd0 	cmplti	zero,zero,703
    a724:	0000afd0 	cmplti	zero,zero,703
    a728:	0000ac14 	movui	zero,688
    a72c:	0000ac40 	call	ac4 <conv_grayscale+0x10>
    a730:	0000afd0 	cmplti	zero,zero,703
    a734:	0000afd0 	cmplti	zero,zero,703
    a738:	0000afd0 	cmplti	zero,zero,703
    a73c:	0000af78 	rdprs	zero,zero,701
    a740:	0000ac40 	call	ac4 <conv_grayscale+0x10>
    a744:	0000afd0 	cmplti	zero,zero,703
    a748:	0000afd0 	cmplti	zero,zero,703
    a74c:	0000aad4 	movui	zero,683
    a750:	0000afd0 	cmplti	zero,zero,703
    a754:	0000aae4 	muli	zero,zero,683
    a758:	0000ab20 	cmpeqi	zero,zero,684
    a75c:	0000a81c 	xori	zero,zero,672
    a760:	0000aac8 	cmpgei	zero,zero,683
    a764:	0000afd0 	cmplti	zero,zero,703
    a768:	0000aea4 	muli	zero,zero,698
    a76c:	0000afd0 	cmplti	zero,zero,703
    a770:	0000aefc 	xorhi	zero,zero,699
    a774:	0000afd0 	cmplti	zero,zero,703
    a778:	0000afd0 	cmplti	zero,zero,703
    a77c:	0000abc0 	call	abc <conv_grayscale+0x8>
    a780:	42000204 	addi	r8,r8,8
    a784:	da802317 	ldw	r10,140(sp)
    a788:	5455883a 	add	r10,r10,r17
    a78c:	da802315 	stw	r10,140(sp)
    a790:	003f8b06 	br	a5c0 <__alt_data_end+0xff00a5c0>
    a794:	d9002017 	ldw	r4,128(sp)
    a798:	a00b883a 	mov	r5,r20
    a79c:	00059980 	call	5998 <__swsetup_r>
    a7a0:	1003b11e 	bne	r2,zero,b668 <___vfiprintf_internal_r+0x11ec>
    a7a4:	a080030b 	ldhu	r2,12(r20)
    a7a8:	00c00284 	movi	r3,10
    a7ac:	1080068c 	andi	r2,r2,26
    a7b0:	10ff541e 	bne	r2,r3,a504 <__alt_data_end+0xff00a504>
    a7b4:	a080038f 	ldh	r2,14(r20)
    a7b8:	103f5216 	blt	r2,zero,a504 <__alt_data_end+0xff00a504>
    a7bc:	d9c02217 	ldw	r7,136(sp)
    a7c0:	d9002017 	ldw	r4,128(sp)
    a7c4:	e00d883a 	mov	r6,fp
    a7c8:	a00b883a 	mov	r5,r20
    a7cc:	000b8f40 	call	b8f4 <__sbprintf>
    a7d0:	dfc03617 	ldw	ra,216(sp)
    a7d4:	df003517 	ldw	fp,212(sp)
    a7d8:	ddc03417 	ldw	r23,208(sp)
    a7dc:	dd803317 	ldw	r22,204(sp)
    a7e0:	dd403217 	ldw	r21,200(sp)
    a7e4:	dd003117 	ldw	r20,196(sp)
    a7e8:	dcc03017 	ldw	r19,192(sp)
    a7ec:	dc802f17 	ldw	r18,188(sp)
    a7f0:	dc402e17 	ldw	r17,184(sp)
    a7f4:	dc002d17 	ldw	r16,180(sp)
    a7f8:	dec03704 	addi	sp,sp,220
    a7fc:	f800283a 	ret
    a800:	000796c0 	call	796c <__sinit>
    a804:	003f2f06 	br	a4c4 <__alt_data_end+0xff00a4c4>
    a808:	0463c83a 	sub	r17,zero,r17
    a80c:	d8802215 	stw	r2,136(sp)
    a810:	a5000114 	ori	r20,r20,4
    a814:	80c00007 	ldb	r3,0(r16)
    a818:	003f7706 	br	a5f8 <__alt_data_end+0xff00a5f8>
    a81c:	00800c04 	movi	r2,48
    a820:	da802217 	ldw	r10,136(sp)
    a824:	d8801d05 	stb	r2,116(sp)
    a828:	00801e04 	movi	r2,120
    a82c:	d8801d45 	stb	r2,117(sp)
    a830:	d8001d85 	stb	zero,118(sp)
    a834:	50c00104 	addi	r3,r10,4
    a838:	54800017 	ldw	r18,0(r10)
    a83c:	0027883a 	mov	r19,zero
    a840:	a0800094 	ori	r2,r20,2
    a844:	48030b16 	blt	r9,zero,b474 <___vfiprintf_internal_r+0xff8>
    a848:	00bfdfc4 	movi	r2,-129
    a84c:	a096703a 	and	r11,r20,r2
    a850:	d8c02215 	stw	r3,136(sp)
    a854:	5d000094 	ori	r20,r11,2
    a858:	90032b1e 	bne	r18,zero,b508 <___vfiprintf_internal_r+0x108c>
    a85c:	00800074 	movhi	r2,1
    a860:	1088cd04 	addi	r2,r2,9012
    a864:	d8802615 	stw	r2,152(sp)
    a868:	0039883a 	mov	fp,zero
    a86c:	48017b1e 	bne	r9,zero,ae5c <___vfiprintf_internal_r+0x9e0>
    a870:	0013883a 	mov	r9,zero
    a874:	0027883a 	mov	r19,zero
    a878:	dd401a04 	addi	r21,sp,104
    a87c:	4825883a 	mov	r18,r9
    a880:	4cc0010e 	bge	r9,r19,a888 <___vfiprintf_internal_r+0x40c>
    a884:	9825883a 	mov	r18,r19
    a888:	e7003fcc 	andi	fp,fp,255
    a88c:	e700201c 	xori	fp,fp,128
    a890:	e73fe004 	addi	fp,fp,-128
    a894:	e0000126 	beq	fp,zero,a89c <___vfiprintf_internal_r+0x420>
    a898:	94800044 	addi	r18,r18,1
    a89c:	a380008c 	andi	r14,r20,2
    a8a0:	70000126 	beq	r14,zero,a8a8 <___vfiprintf_internal_r+0x42c>
    a8a4:	94800084 	addi	r18,r18,2
    a8a8:	a700210c 	andi	fp,r20,132
    a8ac:	e001df1e 	bne	fp,zero,b02c <___vfiprintf_internal_r+0xbb0>
    a8b0:	8c87c83a 	sub	r3,r17,r18
    a8b4:	00c1dd0e 	bge	zero,r3,b02c <___vfiprintf_internal_r+0xbb0>
    a8b8:	01c00404 	movi	r7,16
    a8bc:	d8801c17 	ldw	r2,112(sp)
    a8c0:	38c3ad0e 	bge	r7,r3,b778 <___vfiprintf_internal_r+0x12fc>
    a8c4:	02800074 	movhi	r10,1
    a8c8:	52893204 	addi	r10,r10,9416
    a8cc:	dc002915 	stw	r16,164(sp)
    a8d0:	d9801b17 	ldw	r6,108(sp)
    a8d4:	da802415 	stw	r10,144(sp)
    a8d8:	03c001c4 	movi	r15,7
    a8dc:	da402515 	stw	r9,148(sp)
    a8e0:	db802815 	stw	r14,160(sp)
    a8e4:	1821883a 	mov	r16,r3
    a8e8:	00000506 	br	a900 <___vfiprintf_internal_r+0x484>
    a8ec:	31400084 	addi	r5,r6,2
    a8f0:	42000204 	addi	r8,r8,8
    a8f4:	200d883a 	mov	r6,r4
    a8f8:	843ffc04 	addi	r16,r16,-16
    a8fc:	3c000d0e 	bge	r7,r16,a934 <___vfiprintf_internal_r+0x4b8>
    a900:	10800404 	addi	r2,r2,16
    a904:	31000044 	addi	r4,r6,1
    a908:	45800015 	stw	r22,0(r8)
    a90c:	41c00115 	stw	r7,4(r8)
    a910:	d8801c15 	stw	r2,112(sp)
    a914:	d9001b15 	stw	r4,108(sp)
    a918:	793ff40e 	bge	r15,r4,a8ec <__alt_data_end+0xff00a8ec>
    a91c:	1001b51e 	bne	r2,zero,aff4 <___vfiprintf_internal_r+0xb78>
    a920:	843ffc04 	addi	r16,r16,-16
    a924:	000d883a 	mov	r6,zero
    a928:	01400044 	movi	r5,1
    a92c:	d811883a 	mov	r8,sp
    a930:	3c3ff316 	blt	r7,r16,a900 <__alt_data_end+0xff00a900>
    a934:	8007883a 	mov	r3,r16
    a938:	da402517 	ldw	r9,148(sp)
    a93c:	db802817 	ldw	r14,160(sp)
    a940:	dc002917 	ldw	r16,164(sp)
    a944:	da802417 	ldw	r10,144(sp)
    a948:	1885883a 	add	r2,r3,r2
    a94c:	40c00115 	stw	r3,4(r8)
    a950:	42800015 	stw	r10,0(r8)
    a954:	d8801c15 	stw	r2,112(sp)
    a958:	d9401b15 	stw	r5,108(sp)
    a95c:	00c001c4 	movi	r3,7
    a960:	19426016 	blt	r3,r5,b2e4 <___vfiprintf_internal_r+0xe68>
    a964:	d8c01d87 	ldb	r3,118(sp)
    a968:	42000204 	addi	r8,r8,8
    a96c:	29000044 	addi	r4,r5,1
    a970:	1801b31e 	bne	r3,zero,b040 <___vfiprintf_internal_r+0xbc4>
    a974:	7001c026 	beq	r14,zero,b078 <___vfiprintf_internal_r+0xbfc>
    a978:	d8c01d04 	addi	r3,sp,116
    a97c:	10800084 	addi	r2,r2,2
    a980:	40c00015 	stw	r3,0(r8)
    a984:	00c00084 	movi	r3,2
    a988:	40c00115 	stw	r3,4(r8)
    a98c:	d8801c15 	stw	r2,112(sp)
    a990:	d9001b15 	stw	r4,108(sp)
    a994:	00c001c4 	movi	r3,7
    a998:	1902650e 	bge	r3,r4,b330 <___vfiprintf_internal_r+0xeb4>
    a99c:	10029a1e 	bne	r2,zero,b408 <___vfiprintf_internal_r+0xf8c>
    a9a0:	00c02004 	movi	r3,128
    a9a4:	01000044 	movi	r4,1
    a9a8:	000b883a 	mov	r5,zero
    a9ac:	d811883a 	mov	r8,sp
    a9b0:	e0c1b31e 	bne	fp,r3,b080 <___vfiprintf_internal_r+0xc04>
    a9b4:	8cb9c83a 	sub	fp,r17,r18
    a9b8:	0701b10e 	bge	zero,fp,b080 <___vfiprintf_internal_r+0xc04>
    a9bc:	01c00404 	movi	r7,16
    a9c0:	3f03890e 	bge	r7,fp,b7e8 <___vfiprintf_internal_r+0x136c>
    a9c4:	00c00074 	movhi	r3,1
    a9c8:	18c92e04 	addi	r3,r3,9400
    a9cc:	d8c02415 	stw	r3,144(sp)
    a9d0:	8007883a 	mov	r3,r16
    a9d4:	034001c4 	movi	r13,7
    a9d8:	e021883a 	mov	r16,fp
    a9dc:	da402515 	stw	r9,148(sp)
    a9e0:	1839883a 	mov	fp,r3
    a9e4:	00000506 	br	a9fc <___vfiprintf_internal_r+0x580>
    a9e8:	29800084 	addi	r6,r5,2
    a9ec:	42000204 	addi	r8,r8,8
    a9f0:	180b883a 	mov	r5,r3
    a9f4:	843ffc04 	addi	r16,r16,-16
    a9f8:	3c000d0e 	bge	r7,r16,aa30 <___vfiprintf_internal_r+0x5b4>
    a9fc:	10800404 	addi	r2,r2,16
    aa00:	28c00044 	addi	r3,r5,1
    aa04:	45c00015 	stw	r23,0(r8)
    aa08:	41c00115 	stw	r7,4(r8)
    aa0c:	d8801c15 	stw	r2,112(sp)
    aa10:	d8c01b15 	stw	r3,108(sp)
    aa14:	68fff40e 	bge	r13,r3,a9e8 <__alt_data_end+0xff00a9e8>
    aa18:	1002241e 	bne	r2,zero,b2ac <___vfiprintf_internal_r+0xe30>
    aa1c:	843ffc04 	addi	r16,r16,-16
    aa20:	01800044 	movi	r6,1
    aa24:	000b883a 	mov	r5,zero
    aa28:	d811883a 	mov	r8,sp
    aa2c:	3c3ff316 	blt	r7,r16,a9fc <__alt_data_end+0xff00a9fc>
    aa30:	da402517 	ldw	r9,148(sp)
    aa34:	e007883a 	mov	r3,fp
    aa38:	8039883a 	mov	fp,r16
    aa3c:	1821883a 	mov	r16,r3
    aa40:	d8c02417 	ldw	r3,144(sp)
    aa44:	1705883a 	add	r2,r2,fp
    aa48:	47000115 	stw	fp,4(r8)
    aa4c:	40c00015 	stw	r3,0(r8)
    aa50:	d8801c15 	stw	r2,112(sp)
    aa54:	d9801b15 	stw	r6,108(sp)
    aa58:	00c001c4 	movi	r3,7
    aa5c:	19827616 	blt	r3,r6,b438 <___vfiprintf_internal_r+0xfbc>
    aa60:	4cf9c83a 	sub	fp,r9,r19
    aa64:	42000204 	addi	r8,r8,8
    aa68:	31000044 	addi	r4,r6,1
    aa6c:	300b883a 	mov	r5,r6
    aa70:	07018516 	blt	zero,fp,b088 <___vfiprintf_internal_r+0xc0c>
    aa74:	9885883a 	add	r2,r19,r2
    aa78:	45400015 	stw	r21,0(r8)
    aa7c:	44c00115 	stw	r19,4(r8)
    aa80:	d8801c15 	stw	r2,112(sp)
    aa84:	d9001b15 	stw	r4,108(sp)
    aa88:	00c001c4 	movi	r3,7
    aa8c:	1901dd0e 	bge	r3,r4,b204 <___vfiprintf_internal_r+0xd88>
    aa90:	1002401e 	bne	r2,zero,b394 <___vfiprintf_internal_r+0xf18>
    aa94:	d8001b15 	stw	zero,108(sp)
    aa98:	a2c0010c 	andi	r11,r20,4
    aa9c:	58000226 	beq	r11,zero,aaa8 <___vfiprintf_internal_r+0x62c>
    aaa0:	8ca7c83a 	sub	r19,r17,r18
    aaa4:	04c2f216 	blt	zero,r19,b670 <___vfiprintf_internal_r+0x11f4>
    aaa8:	8c80010e 	bge	r17,r18,aab0 <___vfiprintf_internal_r+0x634>
    aaac:	9023883a 	mov	r17,r18
    aab0:	da802317 	ldw	r10,140(sp)
    aab4:	5455883a 	add	r10,r10,r17
    aab8:	da802315 	stw	r10,140(sp)
    aabc:	d8001b15 	stw	zero,108(sp)
    aac0:	d811883a 	mov	r8,sp
    aac4:	003ea206 	br	a550 <__alt_data_end+0xff00a550>
    aac8:	a5000814 	ori	r20,r20,32
    aacc:	80c00007 	ldb	r3,0(r16)
    aad0:	003ec906 	br	a5f8 <__alt_data_end+0xff00a5f8>
    aad4:	80c00007 	ldb	r3,0(r16)
    aad8:	1b030926 	beq	r3,r12,b700 <___vfiprintf_internal_r+0x1284>
    aadc:	a5000414 	ori	r20,r20,16
    aae0:	003ec506 	br	a5f8 <__alt_data_end+0xff00a5f8>
    aae4:	21003fcc 	andi	r4,r4,255
    aae8:	20035e1e 	bne	r4,zero,b864 <___vfiprintf_internal_r+0x13e8>
    aaec:	a080080c 	andi	r2,r20,32
    aaf0:	1002a526 	beq	r2,zero,b588 <___vfiprintf_internal_r+0x110c>
    aaf4:	da802217 	ldw	r10,136(sp)
    aaf8:	50800017 	ldw	r2,0(r10)
    aafc:	da802317 	ldw	r10,140(sp)
    ab00:	5007d7fa 	srai	r3,r10,31
    ab04:	da802217 	ldw	r10,136(sp)
    ab08:	10c00115 	stw	r3,4(r2)
    ab0c:	52800104 	addi	r10,r10,4
    ab10:	da802215 	stw	r10,136(sp)
    ab14:	da802317 	ldw	r10,140(sp)
    ab18:	12800015 	stw	r10,0(r2)
    ab1c:	003e8c06 	br	a550 <__alt_data_end+0xff00a550>
    ab20:	21003fcc 	andi	r4,r4,255
    ab24:	2003511e 	bne	r4,zero,b86c <___vfiprintf_internal_r+0x13f0>
    ab28:	a080080c 	andi	r2,r20,32
    ab2c:	1000a126 	beq	r2,zero,adb4 <___vfiprintf_internal_r+0x938>
    ab30:	da802217 	ldw	r10,136(sp)
    ab34:	d8001d85 	stb	zero,118(sp)
    ab38:	50800204 	addi	r2,r10,8
    ab3c:	54800017 	ldw	r18,0(r10)
    ab40:	54c00117 	ldw	r19,4(r10)
    ab44:	4802b416 	blt	r9,zero,b618 <___vfiprintf_internal_r+0x119c>
    ab48:	013fdfc4 	movi	r4,-129
    ab4c:	94c6b03a 	or	r3,r18,r19
    ab50:	d8802215 	stw	r2,136(sp)
    ab54:	a128703a 	and	r20,r20,r4
    ab58:	1800a226 	beq	r3,zero,ade4 <___vfiprintf_internal_r+0x968>
    ab5c:	0039883a 	mov	fp,zero
    ab60:	dd401a04 	addi	r21,sp,104
    ab64:	9006d0fa 	srli	r3,r18,3
    ab68:	9808977a 	slli	r4,r19,29
    ab6c:	9826d0fa 	srli	r19,r19,3
    ab70:	948001cc 	andi	r18,r18,7
    ab74:	90800c04 	addi	r2,r18,48
    ab78:	ad7fffc4 	addi	r21,r21,-1
    ab7c:	20e4b03a 	or	r18,r4,r3
    ab80:	a8800005 	stb	r2,0(r21)
    ab84:	94c6b03a 	or	r3,r18,r19
    ab88:	183ff61e 	bne	r3,zero,ab64 <__alt_data_end+0xff00ab64>
    ab8c:	a0c0004c 	andi	r3,r20,1
    ab90:	18005926 	beq	r3,zero,acf8 <___vfiprintf_internal_r+0x87c>
    ab94:	10803fcc 	andi	r2,r2,255
    ab98:	1080201c 	xori	r2,r2,128
    ab9c:	10bfe004 	addi	r2,r2,-128
    aba0:	00c00c04 	movi	r3,48
    aba4:	10c05426 	beq	r2,r3,acf8 <___vfiprintf_internal_r+0x87c>
    aba8:	da801e17 	ldw	r10,120(sp)
    abac:	a8bfffc4 	addi	r2,r21,-1
    abb0:	a8ffffc5 	stb	r3,-1(r21)
    abb4:	50a7c83a 	sub	r19,r10,r2
    abb8:	102b883a 	mov	r21,r2
    abbc:	003f2f06 	br	a87c <__alt_data_end+0xff00a87c>
    abc0:	21003fcc 	andi	r4,r4,255
    abc4:	2003421e 	bne	r4,zero,b8d0 <___vfiprintf_internal_r+0x1454>
    abc8:	00800074 	movhi	r2,1
    abcc:	1088cd04 	addi	r2,r2,9012
    abd0:	d8802615 	stw	r2,152(sp)
    abd4:	a080080c 	andi	r2,r20,32
    abd8:	1000aa26 	beq	r2,zero,ae84 <___vfiprintf_internal_r+0xa08>
    abdc:	da802217 	ldw	r10,136(sp)
    abe0:	54800017 	ldw	r18,0(r10)
    abe4:	54c00117 	ldw	r19,4(r10)
    abe8:	52800204 	addi	r10,r10,8
    abec:	da802215 	stw	r10,136(sp)
    abf0:	a080004c 	andi	r2,r20,1
    abf4:	1001d226 	beq	r2,zero,b340 <___vfiprintf_internal_r+0xec4>
    abf8:	94c4b03a 	or	r2,r18,r19
    abfc:	1002351e 	bne	r2,zero,b4d4 <___vfiprintf_internal_r+0x1058>
    ac00:	d8001d85 	stb	zero,118(sp)
    ac04:	48022216 	blt	r9,zero,b490 <___vfiprintf_internal_r+0x1014>
    ac08:	00bfdfc4 	movi	r2,-129
    ac0c:	a0a8703a 	and	r20,r20,r2
    ac10:	003f1506 	br	a868 <__alt_data_end+0xff00a868>
    ac14:	da802217 	ldw	r10,136(sp)
    ac18:	04800044 	movi	r18,1
    ac1c:	d8001d85 	stb	zero,118(sp)
    ac20:	50800017 	ldw	r2,0(r10)
    ac24:	52800104 	addi	r10,r10,4
    ac28:	da802215 	stw	r10,136(sp)
    ac2c:	d8801005 	stb	r2,64(sp)
    ac30:	9027883a 	mov	r19,r18
    ac34:	dd401004 	addi	r21,sp,64
    ac38:	0013883a 	mov	r9,zero
    ac3c:	003f1706 	br	a89c <__alt_data_end+0xff00a89c>
    ac40:	21003fcc 	andi	r4,r4,255
    ac44:	2003201e 	bne	r4,zero,b8c8 <___vfiprintf_internal_r+0x144c>
    ac48:	a080080c 	andi	r2,r20,32
    ac4c:	10004b26 	beq	r2,zero,ad7c <___vfiprintf_internal_r+0x900>
    ac50:	da802217 	ldw	r10,136(sp)
    ac54:	50800117 	ldw	r2,4(r10)
    ac58:	54800017 	ldw	r18,0(r10)
    ac5c:	52800204 	addi	r10,r10,8
    ac60:	da802215 	stw	r10,136(sp)
    ac64:	1027883a 	mov	r19,r2
    ac68:	10022c16 	blt	r2,zero,b51c <___vfiprintf_internal_r+0x10a0>
    ac6c:	df001d83 	ldbu	fp,118(sp)
    ac70:	48007216 	blt	r9,zero,ae3c <___vfiprintf_internal_r+0x9c0>
    ac74:	00ffdfc4 	movi	r3,-129
    ac78:	94c4b03a 	or	r2,r18,r19
    ac7c:	a0e8703a 	and	r20,r20,r3
    ac80:	1000cc26 	beq	r2,zero,afb4 <___vfiprintf_internal_r+0xb38>
    ac84:	98021026 	beq	r19,zero,b4c8 <___vfiprintf_internal_r+0x104c>
    ac88:	dc402415 	stw	r17,144(sp)
    ac8c:	dc002515 	stw	r16,148(sp)
    ac90:	9823883a 	mov	r17,r19
    ac94:	9021883a 	mov	r16,r18
    ac98:	dd401a04 	addi	r21,sp,104
    ac9c:	4825883a 	mov	r18,r9
    aca0:	4027883a 	mov	r19,r8
    aca4:	8009883a 	mov	r4,r16
    aca8:	880b883a 	mov	r5,r17
    acac:	01800284 	movi	r6,10
    acb0:	000f883a 	mov	r7,zero
    acb4:	000c85c0 	call	c85c <__umoddi3>
    acb8:	10800c04 	addi	r2,r2,48
    acbc:	ad7fffc4 	addi	r21,r21,-1
    acc0:	8009883a 	mov	r4,r16
    acc4:	880b883a 	mov	r5,r17
    acc8:	a8800005 	stb	r2,0(r21)
    accc:	01800284 	movi	r6,10
    acd0:	000f883a 	mov	r7,zero
    acd4:	000c2e40 	call	c2e4 <__udivdi3>
    acd8:	1021883a 	mov	r16,r2
    acdc:	10c4b03a 	or	r2,r2,r3
    ace0:	1823883a 	mov	r17,r3
    ace4:	103fef1e 	bne	r2,zero,aca4 <__alt_data_end+0xff00aca4>
    ace8:	dc402417 	ldw	r17,144(sp)
    acec:	dc002517 	ldw	r16,148(sp)
    acf0:	9013883a 	mov	r9,r18
    acf4:	9811883a 	mov	r8,r19
    acf8:	da801e17 	ldw	r10,120(sp)
    acfc:	5567c83a 	sub	r19,r10,r21
    ad00:	003ede06 	br	a87c <__alt_data_end+0xff00a87c>
    ad04:	38803fcc 	andi	r2,r7,255
    ad08:	1080201c 	xori	r2,r2,128
    ad0c:	10bfe004 	addi	r2,r2,-128
    ad10:	1002371e 	bne	r2,zero,b5f0 <___vfiprintf_internal_r+0x1174>
    ad14:	01000044 	movi	r4,1
    ad18:	01c00804 	movi	r7,32
    ad1c:	80c00007 	ldb	r3,0(r16)
    ad20:	003e3506 	br	a5f8 <__alt_data_end+0xff00a5f8>
    ad24:	a5000054 	ori	r20,r20,1
    ad28:	80c00007 	ldb	r3,0(r16)
    ad2c:	003e3206 	br	a5f8 <__alt_data_end+0xff00a5f8>
    ad30:	a5002014 	ori	r20,r20,128
    ad34:	80c00007 	ldb	r3,0(r16)
    ad38:	003e2f06 	br	a5f8 <__alt_data_end+0xff00a5f8>
    ad3c:	8015883a 	mov	r10,r16
    ad40:	0023883a 	mov	r17,zero
    ad44:	18bff404 	addi	r2,r3,-48
    ad48:	50c00007 	ldb	r3,0(r10)
    ad4c:	8c4002a4 	muli	r17,r17,10
    ad50:	84000044 	addi	r16,r16,1
    ad54:	8015883a 	mov	r10,r16
    ad58:	1463883a 	add	r17,r2,r17
    ad5c:	18bff404 	addi	r2,r3,-48
    ad60:	30bff92e 	bgeu	r6,r2,ad48 <__alt_data_end+0xff00ad48>
    ad64:	003e2506 	br	a5fc <__alt_data_end+0xff00a5fc>
    ad68:	21003fcc 	andi	r4,r4,255
    ad6c:	2002d41e 	bne	r4,zero,b8c0 <___vfiprintf_internal_r+0x1444>
    ad70:	a5000414 	ori	r20,r20,16
    ad74:	a080080c 	andi	r2,r20,32
    ad78:	103fb51e 	bne	r2,zero,ac50 <__alt_data_end+0xff00ac50>
    ad7c:	a080040c 	andi	r2,r20,16
    ad80:	1001f826 	beq	r2,zero,b564 <___vfiprintf_internal_r+0x10e8>
    ad84:	da802217 	ldw	r10,136(sp)
    ad88:	54800017 	ldw	r18,0(r10)
    ad8c:	52800104 	addi	r10,r10,4
    ad90:	da802215 	stw	r10,136(sp)
    ad94:	9027d7fa 	srai	r19,r18,31
    ad98:	9805883a 	mov	r2,r19
    ad9c:	003fb206 	br	ac68 <__alt_data_end+0xff00ac68>
    ada0:	21003fcc 	andi	r4,r4,255
    ada4:	2002c41e 	bne	r4,zero,b8b8 <___vfiprintf_internal_r+0x143c>
    ada8:	a5000414 	ori	r20,r20,16
    adac:	a080080c 	andi	r2,r20,32
    adb0:	103f5f1e 	bne	r2,zero,ab30 <__alt_data_end+0xff00ab30>
    adb4:	a080040c 	andi	r2,r20,16
    adb8:	10020f26 	beq	r2,zero,b5f8 <___vfiprintf_internal_r+0x117c>
    adbc:	da802217 	ldw	r10,136(sp)
    adc0:	d8001d85 	stb	zero,118(sp)
    adc4:	0027883a 	mov	r19,zero
    adc8:	50800104 	addi	r2,r10,4
    adcc:	54800017 	ldw	r18,0(r10)
    add0:	48021116 	blt	r9,zero,b618 <___vfiprintf_internal_r+0x119c>
    add4:	00ffdfc4 	movi	r3,-129
    add8:	d8802215 	stw	r2,136(sp)
    addc:	a0e8703a 	and	r20,r20,r3
    ade0:	903f5e1e 	bne	r18,zero,ab5c <__alt_data_end+0xff00ab5c>
    ade4:	0039883a 	mov	fp,zero
    ade8:	4802a626 	beq	r9,zero,b884 <___vfiprintf_internal_r+0x1408>
    adec:	0025883a 	mov	r18,zero
    adf0:	0027883a 	mov	r19,zero
    adf4:	003f5a06 	br	ab60 <__alt_data_end+0xff00ab60>
    adf8:	21003fcc 	andi	r4,r4,255
    adfc:	20029f1e 	bne	r4,zero,b87c <___vfiprintf_internal_r+0x1400>
    ae00:	a5000414 	ori	r20,r20,16
    ae04:	a080080c 	andi	r2,r20,32
    ae08:	10005e1e 	bne	r2,zero,af84 <___vfiprintf_internal_r+0xb08>
    ae0c:	a080040c 	andi	r2,r20,16
    ae10:	1001a21e 	bne	r2,zero,b49c <___vfiprintf_internal_r+0x1020>
    ae14:	a080100c 	andi	r2,r20,64
    ae18:	d8001d85 	stb	zero,118(sp)
    ae1c:	da802217 	ldw	r10,136(sp)
    ae20:	1002231e 	bne	r2,zero,b6b0 <___vfiprintf_internal_r+0x1234>
    ae24:	50800104 	addi	r2,r10,4
    ae28:	54800017 	ldw	r18,0(r10)
    ae2c:	0027883a 	mov	r19,zero
    ae30:	4801a00e 	bge	r9,zero,b4b4 <___vfiprintf_internal_r+0x1038>
    ae34:	d8802215 	stw	r2,136(sp)
    ae38:	0039883a 	mov	fp,zero
    ae3c:	94c4b03a 	or	r2,r18,r19
    ae40:	103f901e 	bne	r2,zero,ac84 <__alt_data_end+0xff00ac84>
    ae44:	00800044 	movi	r2,1
    ae48:	10803fcc 	andi	r2,r2,255
    ae4c:	00c00044 	movi	r3,1
    ae50:	10c05926 	beq	r2,r3,afb8 <___vfiprintf_internal_r+0xb3c>
    ae54:	00c00084 	movi	r3,2
    ae58:	10ffe41e 	bne	r2,r3,adec <__alt_data_end+0xff00adec>
    ae5c:	0025883a 	mov	r18,zero
    ae60:	0027883a 	mov	r19,zero
    ae64:	00013d06 	br	b35c <___vfiprintf_internal_r+0xee0>
    ae68:	21003fcc 	andi	r4,r4,255
    ae6c:	2002811e 	bne	r4,zero,b874 <___vfiprintf_internal_r+0x13f8>
    ae70:	00800074 	movhi	r2,1
    ae74:	1088c804 	addi	r2,r2,8992
    ae78:	d8802615 	stw	r2,152(sp)
    ae7c:	a080080c 	andi	r2,r20,32
    ae80:	103f561e 	bne	r2,zero,abdc <__alt_data_end+0xff00abdc>
    ae84:	a080040c 	andi	r2,r20,16
    ae88:	1001d126 	beq	r2,zero,b5d0 <___vfiprintf_internal_r+0x1154>
    ae8c:	da802217 	ldw	r10,136(sp)
    ae90:	0027883a 	mov	r19,zero
    ae94:	54800017 	ldw	r18,0(r10)
    ae98:	52800104 	addi	r10,r10,4
    ae9c:	da802215 	stw	r10,136(sp)
    aea0:	003f5306 	br	abf0 <__alt_data_end+0xff00abf0>
    aea4:	da802217 	ldw	r10,136(sp)
    aea8:	d8001d85 	stb	zero,118(sp)
    aeac:	55400017 	ldw	r21,0(r10)
    aeb0:	50c00104 	addi	r3,r10,4
    aeb4:	a8024226 	beq	r21,zero,b7c0 <___vfiprintf_internal_r+0x1344>
    aeb8:	48021816 	blt	r9,zero,b71c <___vfiprintf_internal_r+0x12a0>
    aebc:	480d883a 	mov	r6,r9
    aec0:	000b883a 	mov	r5,zero
    aec4:	a809883a 	mov	r4,r21
    aec8:	d8c02a15 	stw	r3,168(sp)
    aecc:	da002b15 	stw	r8,172(sp)
    aed0:	da402c15 	stw	r9,176(sp)
    aed4:	00086cc0 	call	86cc <memchr>
    aed8:	d8c02a17 	ldw	r3,168(sp)
    aedc:	da002b17 	ldw	r8,172(sp)
    aee0:	da402c17 	ldw	r9,176(sp)
    aee4:	10024826 	beq	r2,zero,b808 <___vfiprintf_internal_r+0x138c>
    aee8:	1567c83a 	sub	r19,r2,r21
    aeec:	df001d83 	ldbu	fp,118(sp)
    aef0:	d8c02215 	stw	r3,136(sp)
    aef4:	0013883a 	mov	r9,zero
    aef8:	003e6006 	br	a87c <__alt_data_end+0xff00a87c>
    aefc:	21003fcc 	andi	r4,r4,255
    af00:	203fc026 	beq	r4,zero,ae04 <__alt_data_end+0xff00ae04>
    af04:	d9c01d85 	stb	r7,118(sp)
    af08:	003fbe06 	br	ae04 <__alt_data_end+0xff00ae04>
    af0c:	da802217 	ldw	r10,136(sp)
    af10:	54400017 	ldw	r17,0(r10)
    af14:	50800104 	addi	r2,r10,4
    af18:	883e3b16 	blt	r17,zero,a808 <__alt_data_end+0xff00a808>
    af1c:	d8802215 	stw	r2,136(sp)
    af20:	80c00007 	ldb	r3,0(r16)
    af24:	003db406 	br	a5f8 <__alt_data_end+0xff00a5f8>
    af28:	01000044 	movi	r4,1
    af2c:	01c00ac4 	movi	r7,43
    af30:	80c00007 	ldb	r3,0(r16)
    af34:	003db006 	br	a5f8 <__alt_data_end+0xff00a5f8>
    af38:	80c00007 	ldb	r3,0(r16)
    af3c:	82800044 	addi	r10,r16,1
    af40:	1b423c26 	beq	r3,r13,b834 <___vfiprintf_internal_r+0x13b8>
    af44:	18bff404 	addi	r2,r3,-48
    af48:	0013883a 	mov	r9,zero
    af4c:	30822b36 	bltu	r6,r2,b7fc <___vfiprintf_internal_r+0x1380>
    af50:	50c00007 	ldb	r3,0(r10)
    af54:	4a4002a4 	muli	r9,r9,10
    af58:	54000044 	addi	r16,r10,1
    af5c:	8015883a 	mov	r10,r16
    af60:	4893883a 	add	r9,r9,r2
    af64:	18bff404 	addi	r2,r3,-48
    af68:	30bff92e 	bgeu	r6,r2,af50 <__alt_data_end+0xff00af50>
    af6c:	483da30e 	bge	r9,zero,a5fc <__alt_data_end+0xff00a5fc>
    af70:	027fffc4 	movi	r9,-1
    af74:	003da106 	br	a5fc <__alt_data_end+0xff00a5fc>
    af78:	a5001014 	ori	r20,r20,64
    af7c:	80c00007 	ldb	r3,0(r16)
    af80:	003d9d06 	br	a5f8 <__alt_data_end+0xff00a5f8>
    af84:	da802217 	ldw	r10,136(sp)
    af88:	d8001d85 	stb	zero,118(sp)
    af8c:	50c00204 	addi	r3,r10,8
    af90:	54800017 	ldw	r18,0(r10)
    af94:	54c00117 	ldw	r19,4(r10)
    af98:	4801ca16 	blt	r9,zero,b6c4 <___vfiprintf_internal_r+0x1248>
    af9c:	013fdfc4 	movi	r4,-129
    afa0:	94c4b03a 	or	r2,r18,r19
    afa4:	d8c02215 	stw	r3,136(sp)
    afa8:	a128703a 	and	r20,r20,r4
    afac:	0039883a 	mov	fp,zero
    afb0:	103f341e 	bne	r2,zero,ac84 <__alt_data_end+0xff00ac84>
    afb4:	483e2e26 	beq	r9,zero,a870 <__alt_data_end+0xff00a870>
    afb8:	0025883a 	mov	r18,zero
    afbc:	94800c04 	addi	r18,r18,48
    afc0:	dc8019c5 	stb	r18,103(sp)
    afc4:	dcc02717 	ldw	r19,156(sp)
    afc8:	dd4019c4 	addi	r21,sp,103
    afcc:	003e2b06 	br	a87c <__alt_data_end+0xff00a87c>
    afd0:	21003fcc 	andi	r4,r4,255
    afd4:	2002361e 	bne	r4,zero,b8b0 <___vfiprintf_internal_r+0x1434>
    afd8:	1801c126 	beq	r3,zero,b6e0 <___vfiprintf_internal_r+0x1264>
    afdc:	04800044 	movi	r18,1
    afe0:	d8c01005 	stb	r3,64(sp)
    afe4:	d8001d85 	stb	zero,118(sp)
    afe8:	9027883a 	mov	r19,r18
    afec:	dd401004 	addi	r21,sp,64
    aff0:	003f1106 	br	ac38 <__alt_data_end+0xff00ac38>
    aff4:	d9402117 	ldw	r5,132(sp)
    aff8:	d9002017 	ldw	r4,128(sp)
    affc:	d9801a04 	addi	r6,sp,104
    b000:	d9c02b15 	stw	r7,172(sp)
    b004:	dbc02a15 	stw	r15,168(sp)
    b008:	000a3680 	call	a368 <__sprint_r.part.0>
    b00c:	d9c02b17 	ldw	r7,172(sp)
    b010:	dbc02a17 	ldw	r15,168(sp)
    b014:	10006d1e 	bne	r2,zero,b1cc <___vfiprintf_internal_r+0xd50>
    b018:	d9801b17 	ldw	r6,108(sp)
    b01c:	d8801c17 	ldw	r2,112(sp)
    b020:	d811883a 	mov	r8,sp
    b024:	31400044 	addi	r5,r6,1
    b028:	003e3306 	br	a8f8 <__alt_data_end+0xff00a8f8>
    b02c:	d9401b17 	ldw	r5,108(sp)
    b030:	d8801c17 	ldw	r2,112(sp)
    b034:	29000044 	addi	r4,r5,1
    b038:	d8c01d87 	ldb	r3,118(sp)
    b03c:	183e4d26 	beq	r3,zero,a974 <__alt_data_end+0xff00a974>
    b040:	00c00044 	movi	r3,1
    b044:	d9401d84 	addi	r5,sp,118
    b048:	10c5883a 	add	r2,r2,r3
    b04c:	41400015 	stw	r5,0(r8)
    b050:	40c00115 	stw	r3,4(r8)
    b054:	d8801c15 	stw	r2,112(sp)
    b058:	d9001b15 	stw	r4,108(sp)
    b05c:	014001c4 	movi	r5,7
    b060:	2900a90e 	bge	r5,r4,b308 <___vfiprintf_internal_r+0xe8c>
    b064:	1000da1e 	bne	r2,zero,b3d0 <___vfiprintf_internal_r+0xf54>
    b068:	7000ab1e 	bne	r14,zero,b318 <___vfiprintf_internal_r+0xe9c>
    b06c:	000b883a 	mov	r5,zero
    b070:	1809883a 	mov	r4,r3
    b074:	d811883a 	mov	r8,sp
    b078:	00c02004 	movi	r3,128
    b07c:	e0fe4d26 	beq	fp,r3,a9b4 <__alt_data_end+0xff00a9b4>
    b080:	4cf9c83a 	sub	fp,r9,r19
    b084:	073e7b0e 	bge	zero,fp,aa74 <__alt_data_end+0xff00aa74>
    b088:	01c00404 	movi	r7,16
    b08c:	3f01900e 	bge	r7,fp,b6d0 <___vfiprintf_internal_r+0x1254>
    b090:	00c00074 	movhi	r3,1
    b094:	18c92e04 	addi	r3,r3,9400
    b098:	d8c02415 	stw	r3,144(sp)
    b09c:	034001c4 	movi	r13,7
    b0a0:	00000506 	br	b0b8 <___vfiprintf_internal_r+0xc3c>
    b0a4:	29000084 	addi	r4,r5,2
    b0a8:	42000204 	addi	r8,r8,8
    b0ac:	180b883a 	mov	r5,r3
    b0b0:	e73ffc04 	addi	fp,fp,-16
    b0b4:	3f000d0e 	bge	r7,fp,b0ec <___vfiprintf_internal_r+0xc70>
    b0b8:	10800404 	addi	r2,r2,16
    b0bc:	28c00044 	addi	r3,r5,1
    b0c0:	45c00015 	stw	r23,0(r8)
    b0c4:	41c00115 	stw	r7,4(r8)
    b0c8:	d8801c15 	stw	r2,112(sp)
    b0cc:	d8c01b15 	stw	r3,108(sp)
    b0d0:	68fff40e 	bge	r13,r3,b0a4 <__alt_data_end+0xff00b0a4>
    b0d4:	1000101e 	bne	r2,zero,b118 <___vfiprintf_internal_r+0xc9c>
    b0d8:	e73ffc04 	addi	fp,fp,-16
    b0dc:	01000044 	movi	r4,1
    b0e0:	000b883a 	mov	r5,zero
    b0e4:	d811883a 	mov	r8,sp
    b0e8:	3f3ff316 	blt	r7,fp,b0b8 <__alt_data_end+0xff00b0b8>
    b0ec:	da802417 	ldw	r10,144(sp)
    b0f0:	1705883a 	add	r2,r2,fp
    b0f4:	47000115 	stw	fp,4(r8)
    b0f8:	42800015 	stw	r10,0(r8)
    b0fc:	d8801c15 	stw	r2,112(sp)
    b100:	d9001b15 	stw	r4,108(sp)
    b104:	00c001c4 	movi	r3,7
    b108:	19003616 	blt	r3,r4,b1e4 <___vfiprintf_internal_r+0xd68>
    b10c:	42000204 	addi	r8,r8,8
    b110:	21000044 	addi	r4,r4,1
    b114:	003e5706 	br	aa74 <__alt_data_end+0xff00aa74>
    b118:	d9402117 	ldw	r5,132(sp)
    b11c:	d9002017 	ldw	r4,128(sp)
    b120:	d9801a04 	addi	r6,sp,104
    b124:	d9c02b15 	stw	r7,172(sp)
    b128:	db402a15 	stw	r13,168(sp)
    b12c:	000a3680 	call	a368 <__sprint_r.part.0>
    b130:	d9c02b17 	ldw	r7,172(sp)
    b134:	db402a17 	ldw	r13,168(sp)
    b138:	1000241e 	bne	r2,zero,b1cc <___vfiprintf_internal_r+0xd50>
    b13c:	d9401b17 	ldw	r5,108(sp)
    b140:	d8801c17 	ldw	r2,112(sp)
    b144:	d811883a 	mov	r8,sp
    b148:	29000044 	addi	r4,r5,1
    b14c:	003fd806 	br	b0b0 <__alt_data_end+0xff00b0b0>
    b150:	d9401b17 	ldw	r5,108(sp)
    b154:	00c00074 	movhi	r3,1
    b158:	18c93204 	addi	r3,r3,9416
    b15c:	d8c02415 	stw	r3,144(sp)
    b160:	29400044 	addi	r5,r5,1
    b164:	d8c02417 	ldw	r3,144(sp)
    b168:	14c5883a 	add	r2,r2,r19
    b16c:	44c00115 	stw	r19,4(r8)
    b170:	40c00015 	stw	r3,0(r8)
    b174:	d8801c15 	stw	r2,112(sp)
    b178:	d9401b15 	stw	r5,108(sp)
    b17c:	00c001c4 	movi	r3,7
    b180:	1940070e 	bge	r3,r5,b1a0 <___vfiprintf_internal_r+0xd24>
    b184:	103e4826 	beq	r2,zero,aaa8 <__alt_data_end+0xff00aaa8>
    b188:	d9402117 	ldw	r5,132(sp)
    b18c:	d9002017 	ldw	r4,128(sp)
    b190:	d9801a04 	addi	r6,sp,104
    b194:	000a3680 	call	a368 <__sprint_r.part.0>
    b198:	10000c1e 	bne	r2,zero,b1cc <___vfiprintf_internal_r+0xd50>
    b19c:	d8801c17 	ldw	r2,112(sp)
    b1a0:	8c80010e 	bge	r17,r18,b1a8 <___vfiprintf_internal_r+0xd2c>
    b1a4:	9023883a 	mov	r17,r18
    b1a8:	da802317 	ldw	r10,140(sp)
    b1ac:	5455883a 	add	r10,r10,r17
    b1b0:	da802315 	stw	r10,140(sp)
    b1b4:	103e4126 	beq	r2,zero,aabc <__alt_data_end+0xff00aabc>
    b1b8:	d9402117 	ldw	r5,132(sp)
    b1bc:	d9002017 	ldw	r4,128(sp)
    b1c0:	d9801a04 	addi	r6,sp,104
    b1c4:	000a3680 	call	a368 <__sprint_r.part.0>
    b1c8:	103e3c26 	beq	r2,zero,aabc <__alt_data_end+0xff00aabc>
    b1cc:	dd002117 	ldw	r20,132(sp)
    b1d0:	a080030b 	ldhu	r2,12(r20)
    b1d4:	1080100c 	andi	r2,r2,64
    b1d8:	1001231e 	bne	r2,zero,b668 <___vfiprintf_internal_r+0x11ec>
    b1dc:	d8802317 	ldw	r2,140(sp)
    b1e0:	003d7b06 	br	a7d0 <__alt_data_end+0xff00a7d0>
    b1e4:	1000991e 	bne	r2,zero,b44c <___vfiprintf_internal_r+0xfd0>
    b1e8:	00c00044 	movi	r3,1
    b1ec:	9805883a 	mov	r2,r19
    b1f0:	dd400015 	stw	r21,0(sp)
    b1f4:	dcc00115 	stw	r19,4(sp)
    b1f8:	dcc01c15 	stw	r19,112(sp)
    b1fc:	d8c01b15 	stw	r3,108(sp)
    b200:	d811883a 	mov	r8,sp
    b204:	42000204 	addi	r8,r8,8
    b208:	a2c0010c 	andi	r11,r20,4
    b20c:	583fe426 	beq	r11,zero,b1a0 <__alt_data_end+0xff00b1a0>
    b210:	8ca7c83a 	sub	r19,r17,r18
    b214:	04ffe20e 	bge	zero,r19,b1a0 <__alt_data_end+0xff00b1a0>
    b218:	01c00404 	movi	r7,16
    b21c:	3cffcc0e 	bge	r7,r19,b150 <__alt_data_end+0xff00b150>
    b220:	02800074 	movhi	r10,1
    b224:	52893204 	addi	r10,r10,9416
    b228:	d9001b17 	ldw	r4,108(sp)
    b22c:	da802415 	stw	r10,144(sp)
    b230:	382b883a 	mov	r21,r7
    b234:	050001c4 	movi	r20,7
    b238:	df002017 	ldw	fp,128(sp)
    b23c:	00000506 	br	b254 <___vfiprintf_internal_r+0xdd8>
    b240:	21400084 	addi	r5,r4,2
    b244:	42000204 	addi	r8,r8,8
    b248:	1809883a 	mov	r4,r3
    b24c:	9cfffc04 	addi	r19,r19,-16
    b250:	acffc40e 	bge	r21,r19,b164 <__alt_data_end+0xff00b164>
    b254:	10800404 	addi	r2,r2,16
    b258:	20c00044 	addi	r3,r4,1
    b25c:	45800015 	stw	r22,0(r8)
    b260:	45400115 	stw	r21,4(r8)
    b264:	d8801c15 	stw	r2,112(sp)
    b268:	d8c01b15 	stw	r3,108(sp)
    b26c:	a0fff40e 	bge	r20,r3,b240 <__alt_data_end+0xff00b240>
    b270:	1000041e 	bne	r2,zero,b284 <___vfiprintf_internal_r+0xe08>
    b274:	01400044 	movi	r5,1
    b278:	0009883a 	mov	r4,zero
    b27c:	d811883a 	mov	r8,sp
    b280:	003ff206 	br	b24c <__alt_data_end+0xff00b24c>
    b284:	d9402117 	ldw	r5,132(sp)
    b288:	d9801a04 	addi	r6,sp,104
    b28c:	e009883a 	mov	r4,fp
    b290:	000a3680 	call	a368 <__sprint_r.part.0>
    b294:	103fcd1e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b298:	d9001b17 	ldw	r4,108(sp)
    b29c:	d8801c17 	ldw	r2,112(sp)
    b2a0:	d811883a 	mov	r8,sp
    b2a4:	21400044 	addi	r5,r4,1
    b2a8:	003fe806 	br	b24c <__alt_data_end+0xff00b24c>
    b2ac:	d9402117 	ldw	r5,132(sp)
    b2b0:	d9002017 	ldw	r4,128(sp)
    b2b4:	d9801a04 	addi	r6,sp,104
    b2b8:	d9c02b15 	stw	r7,172(sp)
    b2bc:	db402a15 	stw	r13,168(sp)
    b2c0:	000a3680 	call	a368 <__sprint_r.part.0>
    b2c4:	d9c02b17 	ldw	r7,172(sp)
    b2c8:	db402a17 	ldw	r13,168(sp)
    b2cc:	103fbf1e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b2d0:	d9401b17 	ldw	r5,108(sp)
    b2d4:	d8801c17 	ldw	r2,112(sp)
    b2d8:	d811883a 	mov	r8,sp
    b2dc:	29800044 	addi	r6,r5,1
    b2e0:	003dc406 	br	a9f4 <__alt_data_end+0xff00a9f4>
    b2e4:	1000d21e 	bne	r2,zero,b630 <___vfiprintf_internal_r+0x11b4>
    b2e8:	d8c01d87 	ldb	r3,118(sp)
    b2ec:	18009526 	beq	r3,zero,b544 <___vfiprintf_internal_r+0x10c8>
    b2f0:	00800044 	movi	r2,1
    b2f4:	d8c01d84 	addi	r3,sp,118
    b2f8:	1009883a 	mov	r4,r2
    b2fc:	d8c00015 	stw	r3,0(sp)
    b300:	d8800115 	stw	r2,4(sp)
    b304:	d811883a 	mov	r8,sp
    b308:	200b883a 	mov	r5,r4
    b30c:	42000204 	addi	r8,r8,8
    b310:	21000044 	addi	r4,r4,1
    b314:	003d9706 	br	a974 <__alt_data_end+0xff00a974>
    b318:	d9001d04 	addi	r4,sp,116
    b31c:	00800084 	movi	r2,2
    b320:	d9000015 	stw	r4,0(sp)
    b324:	d8800115 	stw	r2,4(sp)
    b328:	1809883a 	mov	r4,r3
    b32c:	d811883a 	mov	r8,sp
    b330:	200b883a 	mov	r5,r4
    b334:	42000204 	addi	r8,r8,8
    b338:	21000044 	addi	r4,r4,1
    b33c:	003f4e06 	br	b078 <__alt_data_end+0xff00b078>
    b340:	d8001d85 	stb	zero,118(sp)
    b344:	48005016 	blt	r9,zero,b488 <___vfiprintf_internal_r+0x100c>
    b348:	00ffdfc4 	movi	r3,-129
    b34c:	94c4b03a 	or	r2,r18,r19
    b350:	a0e8703a 	and	r20,r20,r3
    b354:	103d4426 	beq	r2,zero,a868 <__alt_data_end+0xff00a868>
    b358:	0039883a 	mov	fp,zero
    b35c:	d9002617 	ldw	r4,152(sp)
    b360:	dd401a04 	addi	r21,sp,104
    b364:	908003cc 	andi	r2,r18,15
    b368:	9806973a 	slli	r3,r19,28
    b36c:	2085883a 	add	r2,r4,r2
    b370:	9024d13a 	srli	r18,r18,4
    b374:	10800003 	ldbu	r2,0(r2)
    b378:	9826d13a 	srli	r19,r19,4
    b37c:	ad7fffc4 	addi	r21,r21,-1
    b380:	1ca4b03a 	or	r18,r3,r18
    b384:	a8800005 	stb	r2,0(r21)
    b388:	94c4b03a 	or	r2,r18,r19
    b38c:	103ff51e 	bne	r2,zero,b364 <__alt_data_end+0xff00b364>
    b390:	003e5906 	br	acf8 <__alt_data_end+0xff00acf8>
    b394:	d9402117 	ldw	r5,132(sp)
    b398:	d9002017 	ldw	r4,128(sp)
    b39c:	d9801a04 	addi	r6,sp,104
    b3a0:	000a3680 	call	a368 <__sprint_r.part.0>
    b3a4:	103f891e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b3a8:	d8801c17 	ldw	r2,112(sp)
    b3ac:	d811883a 	mov	r8,sp
    b3b0:	003f9506 	br	b208 <__alt_data_end+0xff00b208>
    b3b4:	d9402117 	ldw	r5,132(sp)
    b3b8:	d9002017 	ldw	r4,128(sp)
    b3bc:	d9801a04 	addi	r6,sp,104
    b3c0:	000a3680 	call	a368 <__sprint_r.part.0>
    b3c4:	103f811e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b3c8:	d811883a 	mov	r8,sp
    b3cc:	003ced06 	br	a784 <__alt_data_end+0xff00a784>
    b3d0:	d9402117 	ldw	r5,132(sp)
    b3d4:	d9002017 	ldw	r4,128(sp)
    b3d8:	d9801a04 	addi	r6,sp,104
    b3dc:	da402c15 	stw	r9,176(sp)
    b3e0:	db802a15 	stw	r14,168(sp)
    b3e4:	000a3680 	call	a368 <__sprint_r.part.0>
    b3e8:	da402c17 	ldw	r9,176(sp)
    b3ec:	db802a17 	ldw	r14,168(sp)
    b3f0:	103f761e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b3f4:	d9401b17 	ldw	r5,108(sp)
    b3f8:	d8801c17 	ldw	r2,112(sp)
    b3fc:	d811883a 	mov	r8,sp
    b400:	29000044 	addi	r4,r5,1
    b404:	003d5b06 	br	a974 <__alt_data_end+0xff00a974>
    b408:	d9402117 	ldw	r5,132(sp)
    b40c:	d9002017 	ldw	r4,128(sp)
    b410:	d9801a04 	addi	r6,sp,104
    b414:	da402c15 	stw	r9,176(sp)
    b418:	000a3680 	call	a368 <__sprint_r.part.0>
    b41c:	da402c17 	ldw	r9,176(sp)
    b420:	103f6a1e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b424:	d9401b17 	ldw	r5,108(sp)
    b428:	d8801c17 	ldw	r2,112(sp)
    b42c:	d811883a 	mov	r8,sp
    b430:	29000044 	addi	r4,r5,1
    b434:	003f1006 	br	b078 <__alt_data_end+0xff00b078>
    b438:	1000c31e 	bne	r2,zero,b748 <___vfiprintf_internal_r+0x12cc>
    b43c:	01000044 	movi	r4,1
    b440:	000b883a 	mov	r5,zero
    b444:	d811883a 	mov	r8,sp
    b448:	003f0d06 	br	b080 <__alt_data_end+0xff00b080>
    b44c:	d9402117 	ldw	r5,132(sp)
    b450:	d9002017 	ldw	r4,128(sp)
    b454:	d9801a04 	addi	r6,sp,104
    b458:	000a3680 	call	a368 <__sprint_r.part.0>
    b45c:	103f5b1e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b460:	d9001b17 	ldw	r4,108(sp)
    b464:	d8801c17 	ldw	r2,112(sp)
    b468:	d811883a 	mov	r8,sp
    b46c:	21000044 	addi	r4,r4,1
    b470:	003d8006 	br	aa74 <__alt_data_end+0xff00aa74>
    b474:	01000074 	movhi	r4,1
    b478:	2108cd04 	addi	r4,r4,9012
    b47c:	d9002615 	stw	r4,152(sp)
    b480:	d8c02215 	stw	r3,136(sp)
    b484:	1029883a 	mov	r20,r2
    b488:	94c4b03a 	or	r2,r18,r19
    b48c:	103fb21e 	bne	r2,zero,b358 <__alt_data_end+0xff00b358>
    b490:	0039883a 	mov	fp,zero
    b494:	00800084 	movi	r2,2
    b498:	003e6b06 	br	ae48 <__alt_data_end+0xff00ae48>
    b49c:	da802217 	ldw	r10,136(sp)
    b4a0:	d8001d85 	stb	zero,118(sp)
    b4a4:	0027883a 	mov	r19,zero
    b4a8:	50800104 	addi	r2,r10,4
    b4ac:	54800017 	ldw	r18,0(r10)
    b4b0:	483e6016 	blt	r9,zero,ae34 <__alt_data_end+0xff00ae34>
    b4b4:	00ffdfc4 	movi	r3,-129
    b4b8:	d8802215 	stw	r2,136(sp)
    b4bc:	a0e8703a 	and	r20,r20,r3
    b4c0:	0039883a 	mov	fp,zero
    b4c4:	903ebb26 	beq	r18,zero,afb4 <__alt_data_end+0xff00afb4>
    b4c8:	00800244 	movi	r2,9
    b4cc:	14bdee36 	bltu	r2,r18,ac88 <__alt_data_end+0xff00ac88>
    b4d0:	003eba06 	br	afbc <__alt_data_end+0xff00afbc>
    b4d4:	00800c04 	movi	r2,48
    b4d8:	d8c01d45 	stb	r3,117(sp)
    b4dc:	d8801d05 	stb	r2,116(sp)
    b4e0:	d8001d85 	stb	zero,118(sp)
    b4e4:	a0c00094 	ori	r3,r20,2
    b4e8:	4800a916 	blt	r9,zero,b790 <___vfiprintf_internal_r+0x1314>
    b4ec:	00bfdfc4 	movi	r2,-129
    b4f0:	a096703a 	and	r11,r20,r2
    b4f4:	5d000094 	ori	r20,r11,2
    b4f8:	0039883a 	mov	fp,zero
    b4fc:	003f9706 	br	b35c <__alt_data_end+0xff00b35c>
    b500:	8025883a 	mov	r18,r16
    b504:	003c2e06 	br	a5c0 <__alt_data_end+0xff00a5c0>
    b508:	00800074 	movhi	r2,1
    b50c:	1088cd04 	addi	r2,r2,9012
    b510:	0039883a 	mov	fp,zero
    b514:	d8802615 	stw	r2,152(sp)
    b518:	003f9006 	br	b35c <__alt_data_end+0xff00b35c>
    b51c:	04a5c83a 	sub	r18,zero,r18
    b520:	07000b44 	movi	fp,45
    b524:	9004c03a 	cmpne	r2,r18,zero
    b528:	04e7c83a 	sub	r19,zero,r19
    b52c:	df001d85 	stb	fp,118(sp)
    b530:	98a7c83a 	sub	r19,r19,r2
    b534:	48009f16 	blt	r9,zero,b7b4 <___vfiprintf_internal_r+0x1338>
    b538:	00bfdfc4 	movi	r2,-129
    b53c:	a0a8703a 	and	r20,r20,r2
    b540:	003dd006 	br	ac84 <__alt_data_end+0xff00ac84>
    b544:	70004c26 	beq	r14,zero,b678 <___vfiprintf_internal_r+0x11fc>
    b548:	00800084 	movi	r2,2
    b54c:	d8c01d04 	addi	r3,sp,116
    b550:	d8c00015 	stw	r3,0(sp)
    b554:	d8800115 	stw	r2,4(sp)
    b558:	01000044 	movi	r4,1
    b55c:	d811883a 	mov	r8,sp
    b560:	003f7306 	br	b330 <__alt_data_end+0xff00b330>
    b564:	a080100c 	andi	r2,r20,64
    b568:	da802217 	ldw	r10,136(sp)
    b56c:	103e0626 	beq	r2,zero,ad88 <__alt_data_end+0xff00ad88>
    b570:	5480000f 	ldh	r18,0(r10)
    b574:	52800104 	addi	r10,r10,4
    b578:	da802215 	stw	r10,136(sp)
    b57c:	9027d7fa 	srai	r19,r18,31
    b580:	9805883a 	mov	r2,r19
    b584:	003db806 	br	ac68 <__alt_data_end+0xff00ac68>
    b588:	a080040c 	andi	r2,r20,16
    b58c:	1000091e 	bne	r2,zero,b5b4 <___vfiprintf_internal_r+0x1138>
    b590:	a2c0100c 	andi	r11,r20,64
    b594:	58000726 	beq	r11,zero,b5b4 <___vfiprintf_internal_r+0x1138>
    b598:	da802217 	ldw	r10,136(sp)
    b59c:	50800017 	ldw	r2,0(r10)
    b5a0:	52800104 	addi	r10,r10,4
    b5a4:	da802215 	stw	r10,136(sp)
    b5a8:	da802317 	ldw	r10,140(sp)
    b5ac:	1280000d 	sth	r10,0(r2)
    b5b0:	003be706 	br	a550 <__alt_data_end+0xff00a550>
    b5b4:	da802217 	ldw	r10,136(sp)
    b5b8:	50800017 	ldw	r2,0(r10)
    b5bc:	52800104 	addi	r10,r10,4
    b5c0:	da802215 	stw	r10,136(sp)
    b5c4:	da802317 	ldw	r10,140(sp)
    b5c8:	12800015 	stw	r10,0(r2)
    b5cc:	003be006 	br	a550 <__alt_data_end+0xff00a550>
    b5d0:	a080100c 	andi	r2,r20,64
    b5d4:	da802217 	ldw	r10,136(sp)
    b5d8:	10003026 	beq	r2,zero,b69c <___vfiprintf_internal_r+0x1220>
    b5dc:	5480000b 	ldhu	r18,0(r10)
    b5e0:	52800104 	addi	r10,r10,4
    b5e4:	0027883a 	mov	r19,zero
    b5e8:	da802215 	stw	r10,136(sp)
    b5ec:	003d8006 	br	abf0 <__alt_data_end+0xff00abf0>
    b5f0:	80c00007 	ldb	r3,0(r16)
    b5f4:	003c0006 	br	a5f8 <__alt_data_end+0xff00a5f8>
    b5f8:	a080100c 	andi	r2,r20,64
    b5fc:	d8001d85 	stb	zero,118(sp)
    b600:	da802217 	ldw	r10,136(sp)
    b604:	1000201e 	bne	r2,zero,b688 <___vfiprintf_internal_r+0x120c>
    b608:	50800104 	addi	r2,r10,4
    b60c:	54800017 	ldw	r18,0(r10)
    b610:	0027883a 	mov	r19,zero
    b614:	483def0e 	bge	r9,zero,add4 <__alt_data_end+0xff00add4>
    b618:	94c6b03a 	or	r3,r18,r19
    b61c:	d8802215 	stw	r2,136(sp)
    b620:	183d4e1e 	bne	r3,zero,ab5c <__alt_data_end+0xff00ab5c>
    b624:	0039883a 	mov	fp,zero
    b628:	0005883a 	mov	r2,zero
    b62c:	003e0606 	br	ae48 <__alt_data_end+0xff00ae48>
    b630:	d9402117 	ldw	r5,132(sp)
    b634:	d9002017 	ldw	r4,128(sp)
    b638:	d9801a04 	addi	r6,sp,104
    b63c:	da402c15 	stw	r9,176(sp)
    b640:	db802a15 	stw	r14,168(sp)
    b644:	000a3680 	call	a368 <__sprint_r.part.0>
    b648:	da402c17 	ldw	r9,176(sp)
    b64c:	db802a17 	ldw	r14,168(sp)
    b650:	103ede1e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b654:	d9401b17 	ldw	r5,108(sp)
    b658:	d8801c17 	ldw	r2,112(sp)
    b65c:	d811883a 	mov	r8,sp
    b660:	29000044 	addi	r4,r5,1
    b664:	003e7406 	br	b038 <__alt_data_end+0xff00b038>
    b668:	00bfffc4 	movi	r2,-1
    b66c:	003c5806 	br	a7d0 <__alt_data_end+0xff00a7d0>
    b670:	d811883a 	mov	r8,sp
    b674:	003ee806 	br	b218 <__alt_data_end+0xff00b218>
    b678:	000b883a 	mov	r5,zero
    b67c:	01000044 	movi	r4,1
    b680:	d811883a 	mov	r8,sp
    b684:	003e7c06 	br	b078 <__alt_data_end+0xff00b078>
    b688:	50800104 	addi	r2,r10,4
    b68c:	5480000b 	ldhu	r18,0(r10)
    b690:	0027883a 	mov	r19,zero
    b694:	483dcf0e 	bge	r9,zero,add4 <__alt_data_end+0xff00add4>
    b698:	003fdf06 	br	b618 <__alt_data_end+0xff00b618>
    b69c:	54800017 	ldw	r18,0(r10)
    b6a0:	52800104 	addi	r10,r10,4
    b6a4:	0027883a 	mov	r19,zero
    b6a8:	da802215 	stw	r10,136(sp)
    b6ac:	003d5006 	br	abf0 <__alt_data_end+0xff00abf0>
    b6b0:	50800104 	addi	r2,r10,4
    b6b4:	5480000b 	ldhu	r18,0(r10)
    b6b8:	0027883a 	mov	r19,zero
    b6bc:	483f7d0e 	bge	r9,zero,b4b4 <__alt_data_end+0xff00b4b4>
    b6c0:	003ddc06 	br	ae34 <__alt_data_end+0xff00ae34>
    b6c4:	d8c02215 	stw	r3,136(sp)
    b6c8:	0039883a 	mov	fp,zero
    b6cc:	003ddb06 	br	ae3c <__alt_data_end+0xff00ae3c>
    b6d0:	02800074 	movhi	r10,1
    b6d4:	52892e04 	addi	r10,r10,9400
    b6d8:	da802415 	stw	r10,144(sp)
    b6dc:	003e8306 	br	b0ec <__alt_data_end+0xff00b0ec>
    b6e0:	d8801c17 	ldw	r2,112(sp)
    b6e4:	dd002117 	ldw	r20,132(sp)
    b6e8:	103eb926 	beq	r2,zero,b1d0 <__alt_data_end+0xff00b1d0>
    b6ec:	d9002017 	ldw	r4,128(sp)
    b6f0:	d9801a04 	addi	r6,sp,104
    b6f4:	a00b883a 	mov	r5,r20
    b6f8:	000a3680 	call	a368 <__sprint_r.part.0>
    b6fc:	003eb406 	br	b1d0 <__alt_data_end+0xff00b1d0>
    b700:	80c00043 	ldbu	r3,1(r16)
    b704:	a5000814 	ori	r20,r20,32
    b708:	84000044 	addi	r16,r16,1
    b70c:	18c03fcc 	andi	r3,r3,255
    b710:	18c0201c 	xori	r3,r3,128
    b714:	18ffe004 	addi	r3,r3,-128
    b718:	003bb706 	br	a5f8 <__alt_data_end+0xff00a5f8>
    b71c:	a809883a 	mov	r4,r21
    b720:	d8c02a15 	stw	r3,168(sp)
    b724:	da002b15 	stw	r8,172(sp)
    b728:	00036300 	call	3630 <strlen>
    b72c:	d8c02a17 	ldw	r3,168(sp)
    b730:	1027883a 	mov	r19,r2
    b734:	df001d83 	ldbu	fp,118(sp)
    b738:	d8c02215 	stw	r3,136(sp)
    b73c:	0013883a 	mov	r9,zero
    b740:	da002b17 	ldw	r8,172(sp)
    b744:	003c4d06 	br	a87c <__alt_data_end+0xff00a87c>
    b748:	d9402117 	ldw	r5,132(sp)
    b74c:	d9002017 	ldw	r4,128(sp)
    b750:	d9801a04 	addi	r6,sp,104
    b754:	da402c15 	stw	r9,176(sp)
    b758:	000a3680 	call	a368 <__sprint_r.part.0>
    b75c:	da402c17 	ldw	r9,176(sp)
    b760:	103e9a1e 	bne	r2,zero,b1cc <__alt_data_end+0xff00b1cc>
    b764:	d9401b17 	ldw	r5,108(sp)
    b768:	d8801c17 	ldw	r2,112(sp)
    b76c:	d811883a 	mov	r8,sp
    b770:	29000044 	addi	r4,r5,1
    b774:	003e4206 	br	b080 <__alt_data_end+0xff00b080>
    b778:	d9401b17 	ldw	r5,108(sp)
    b77c:	01000074 	movhi	r4,1
    b780:	21093204 	addi	r4,r4,9416
    b784:	d9002415 	stw	r4,144(sp)
    b788:	29400044 	addi	r5,r5,1
    b78c:	003c6d06 	br	a944 <__alt_data_end+0xff00a944>
    b790:	0039883a 	mov	fp,zero
    b794:	00800084 	movi	r2,2
    b798:	10803fcc 	andi	r2,r2,255
    b79c:	01000044 	movi	r4,1
    b7a0:	11001e26 	beq	r2,r4,b81c <___vfiprintf_internal_r+0x13a0>
    b7a4:	01000084 	movi	r4,2
    b7a8:	11001e1e 	bne	r2,r4,b824 <___vfiprintf_internal_r+0x13a8>
    b7ac:	1829883a 	mov	r20,r3
    b7b0:	003eea06 	br	b35c <__alt_data_end+0xff00b35c>
    b7b4:	a007883a 	mov	r3,r20
    b7b8:	00800044 	movi	r2,1
    b7bc:	003ff606 	br	b798 <__alt_data_end+0xff00b798>
    b7c0:	00800184 	movi	r2,6
    b7c4:	1240012e 	bgeu	r2,r9,b7cc <___vfiprintf_internal_r+0x1350>
    b7c8:	1013883a 	mov	r9,r2
    b7cc:	4827883a 	mov	r19,r9
    b7d0:	4825883a 	mov	r18,r9
    b7d4:	48001516 	blt	r9,zero,b82c <___vfiprintf_internal_r+0x13b0>
    b7d8:	05400074 	movhi	r21,1
    b7dc:	d8c02215 	stw	r3,136(sp)
    b7e0:	ad48d204 	addi	r21,r21,9032
    b7e4:	003d1406 	br	ac38 <__alt_data_end+0xff00ac38>
    b7e8:	02800074 	movhi	r10,1
    b7ec:	52892e04 	addi	r10,r10,9400
    b7f0:	da802415 	stw	r10,144(sp)
    b7f4:	200d883a 	mov	r6,r4
    b7f8:	003c9106 	br	aa40 <__alt_data_end+0xff00aa40>
    b7fc:	5021883a 	mov	r16,r10
    b800:	0013883a 	mov	r9,zero
    b804:	003b7d06 	br	a5fc <__alt_data_end+0xff00a5fc>
    b808:	4827883a 	mov	r19,r9
    b80c:	df001d83 	ldbu	fp,118(sp)
    b810:	d8c02215 	stw	r3,136(sp)
    b814:	0013883a 	mov	r9,zero
    b818:	003c1806 	br	a87c <__alt_data_end+0xff00a87c>
    b81c:	1829883a 	mov	r20,r3
    b820:	003d1806 	br	ac84 <__alt_data_end+0xff00ac84>
    b824:	1829883a 	mov	r20,r3
    b828:	003ccd06 	br	ab60 <__alt_data_end+0xff00ab60>
    b82c:	0025883a 	mov	r18,zero
    b830:	003fe906 	br	b7d8 <__alt_data_end+0xff00b7d8>
    b834:	d8802217 	ldw	r2,136(sp)
    b838:	80c00043 	ldbu	r3,1(r16)
    b83c:	5021883a 	mov	r16,r10
    b840:	12400017 	ldw	r9,0(r2)
    b844:	10800104 	addi	r2,r2,4
    b848:	d8802215 	stw	r2,136(sp)
    b84c:	483faf0e 	bge	r9,zero,b70c <__alt_data_end+0xff00b70c>
    b850:	18c03fcc 	andi	r3,r3,255
    b854:	18c0201c 	xori	r3,r3,128
    b858:	027fffc4 	movi	r9,-1
    b85c:	18ffe004 	addi	r3,r3,-128
    b860:	003b6506 	br	a5f8 <__alt_data_end+0xff00a5f8>
    b864:	d9c01d85 	stb	r7,118(sp)
    b868:	003ca006 	br	aaec <__alt_data_end+0xff00aaec>
    b86c:	d9c01d85 	stb	r7,118(sp)
    b870:	003cad06 	br	ab28 <__alt_data_end+0xff00ab28>
    b874:	d9c01d85 	stb	r7,118(sp)
    b878:	003d7d06 	br	ae70 <__alt_data_end+0xff00ae70>
    b87c:	d9c01d85 	stb	r7,118(sp)
    b880:	003d5f06 	br	ae00 <__alt_data_end+0xff00ae00>
    b884:	a080004c 	andi	r2,r20,1
    b888:	0039883a 	mov	fp,zero
    b88c:	10000526 	beq	r2,zero,b8a4 <___vfiprintf_internal_r+0x1428>
    b890:	00800c04 	movi	r2,48
    b894:	d88019c5 	stb	r2,103(sp)
    b898:	dcc02717 	ldw	r19,156(sp)
    b89c:	dd4019c4 	addi	r21,sp,103
    b8a0:	003bf606 	br	a87c <__alt_data_end+0xff00a87c>
    b8a4:	0027883a 	mov	r19,zero
    b8a8:	dd401a04 	addi	r21,sp,104
    b8ac:	003bf306 	br	a87c <__alt_data_end+0xff00a87c>
    b8b0:	d9c01d85 	stb	r7,118(sp)
    b8b4:	003dc806 	br	afd8 <__alt_data_end+0xff00afd8>
    b8b8:	d9c01d85 	stb	r7,118(sp)
    b8bc:	003d3a06 	br	ada8 <__alt_data_end+0xff00ada8>
    b8c0:	d9c01d85 	stb	r7,118(sp)
    b8c4:	003d2a06 	br	ad70 <__alt_data_end+0xff00ad70>
    b8c8:	d9c01d85 	stb	r7,118(sp)
    b8cc:	003cde06 	br	ac48 <__alt_data_end+0xff00ac48>
    b8d0:	d9c01d85 	stb	r7,118(sp)
    b8d4:	003cbc06 	br	abc8 <__alt_data_end+0xff00abc8>

0000b8d8 <__vfiprintf_internal>:
    b8d8:	00800074 	movhi	r2,1
    b8dc:	10903104 	addi	r2,r2,16580
    b8e0:	300f883a 	mov	r7,r6
    b8e4:	280d883a 	mov	r6,r5
    b8e8:	200b883a 	mov	r5,r4
    b8ec:	11000017 	ldw	r4,0(r2)
    b8f0:	000a47c1 	jmpi	a47c <___vfiprintf_internal_r>

0000b8f4 <__sbprintf>:
    b8f4:	2880030b 	ldhu	r2,12(r5)
    b8f8:	2ac01917 	ldw	r11,100(r5)
    b8fc:	2a80038b 	ldhu	r10,14(r5)
    b900:	2a400717 	ldw	r9,28(r5)
    b904:	2a000917 	ldw	r8,36(r5)
    b908:	defee204 	addi	sp,sp,-1144
    b90c:	00c10004 	movi	r3,1024
    b910:	dc011a15 	stw	r16,1128(sp)
    b914:	10bfff4c 	andi	r2,r2,65533
    b918:	2821883a 	mov	r16,r5
    b91c:	d8cb883a 	add	r5,sp,r3
    b920:	dc811c15 	stw	r18,1136(sp)
    b924:	dc411b15 	stw	r17,1132(sp)
    b928:	dfc11d15 	stw	ra,1140(sp)
    b92c:	2025883a 	mov	r18,r4
    b930:	d881030d 	sth	r2,1036(sp)
    b934:	dac11915 	stw	r11,1124(sp)
    b938:	da81038d 	sth	r10,1038(sp)
    b93c:	da410715 	stw	r9,1052(sp)
    b940:	da010915 	stw	r8,1060(sp)
    b944:	dec10015 	stw	sp,1024(sp)
    b948:	dec10415 	stw	sp,1040(sp)
    b94c:	d8c10215 	stw	r3,1032(sp)
    b950:	d8c10515 	stw	r3,1044(sp)
    b954:	d8010615 	stw	zero,1048(sp)
    b958:	000a47c0 	call	a47c <___vfiprintf_internal_r>
    b95c:	1023883a 	mov	r17,r2
    b960:	10000416 	blt	r2,zero,b974 <__sbprintf+0x80>
    b964:	d9410004 	addi	r5,sp,1024
    b968:	9009883a 	mov	r4,r18
    b96c:	00075900 	call	7590 <_fflush_r>
    b970:	10000d1e 	bne	r2,zero,b9a8 <__sbprintf+0xb4>
    b974:	d881030b 	ldhu	r2,1036(sp)
    b978:	1080100c 	andi	r2,r2,64
    b97c:	10000326 	beq	r2,zero,b98c <__sbprintf+0x98>
    b980:	8080030b 	ldhu	r2,12(r16)
    b984:	10801014 	ori	r2,r2,64
    b988:	8080030d 	sth	r2,12(r16)
    b98c:	8805883a 	mov	r2,r17
    b990:	dfc11d17 	ldw	ra,1140(sp)
    b994:	dc811c17 	ldw	r18,1136(sp)
    b998:	dc411b17 	ldw	r17,1132(sp)
    b99c:	dc011a17 	ldw	r16,1128(sp)
    b9a0:	dec11e04 	addi	sp,sp,1144
    b9a4:	f800283a 	ret
    b9a8:	047fffc4 	movi	r17,-1
    b9ac:	003ff106 	br	b974 <__alt_data_end+0xff00b974>

0000b9b0 <_write_r>:
    b9b0:	defffd04 	addi	sp,sp,-12
    b9b4:	2805883a 	mov	r2,r5
    b9b8:	dc000015 	stw	r16,0(sp)
    b9bc:	04000074 	movhi	r16,1
    b9c0:	dc400115 	stw	r17,4(sp)
    b9c4:	300b883a 	mov	r5,r6
    b9c8:	84170804 	addi	r16,r16,23584
    b9cc:	2023883a 	mov	r17,r4
    b9d0:	380d883a 	mov	r6,r7
    b9d4:	1009883a 	mov	r4,r2
    b9d8:	dfc00215 	stw	ra,8(sp)
    b9dc:	80000015 	stw	zero,0(r16)
    b9e0:	000fc780 	call	fc78 <write>
    b9e4:	00ffffc4 	movi	r3,-1
    b9e8:	10c00526 	beq	r2,r3,ba00 <_write_r+0x50>
    b9ec:	dfc00217 	ldw	ra,8(sp)
    b9f0:	dc400117 	ldw	r17,4(sp)
    b9f4:	dc000017 	ldw	r16,0(sp)
    b9f8:	dec00304 	addi	sp,sp,12
    b9fc:	f800283a 	ret
    ba00:	80c00017 	ldw	r3,0(r16)
    ba04:	183ff926 	beq	r3,zero,b9ec <__alt_data_end+0xff00b9ec>
    ba08:	88c00015 	stw	r3,0(r17)
    ba0c:	003ff706 	br	b9ec <__alt_data_end+0xff00b9ec>

0000ba10 <_close_r>:
    ba10:	defffd04 	addi	sp,sp,-12
    ba14:	dc000015 	stw	r16,0(sp)
    ba18:	04000074 	movhi	r16,1
    ba1c:	dc400115 	stw	r17,4(sp)
    ba20:	84170804 	addi	r16,r16,23584
    ba24:	2023883a 	mov	r17,r4
    ba28:	2809883a 	mov	r4,r5
    ba2c:	dfc00215 	stw	ra,8(sp)
    ba30:	80000015 	stw	zero,0(r16)
    ba34:	000f4380 	call	f438 <close>
    ba38:	00ffffc4 	movi	r3,-1
    ba3c:	10c00526 	beq	r2,r3,ba54 <_close_r+0x44>
    ba40:	dfc00217 	ldw	ra,8(sp)
    ba44:	dc400117 	ldw	r17,4(sp)
    ba48:	dc000017 	ldw	r16,0(sp)
    ba4c:	dec00304 	addi	sp,sp,12
    ba50:	f800283a 	ret
    ba54:	80c00017 	ldw	r3,0(r16)
    ba58:	183ff926 	beq	r3,zero,ba40 <__alt_data_end+0xff00ba40>
    ba5c:	88c00015 	stw	r3,0(r17)
    ba60:	003ff706 	br	ba40 <__alt_data_end+0xff00ba40>

0000ba64 <_calloc_r>:
    ba64:	298b383a 	mul	r5,r5,r6
    ba68:	defffe04 	addi	sp,sp,-8
    ba6c:	dfc00115 	stw	ra,4(sp)
    ba70:	dc000015 	stw	r16,0(sp)
    ba74:	0002c900 	call	2c90 <_malloc_r>
    ba78:	10002926 	beq	r2,zero,bb20 <_calloc_r+0xbc>
    ba7c:	11bfff17 	ldw	r6,-4(r2)
    ba80:	1021883a 	mov	r16,r2
    ba84:	00bfff04 	movi	r2,-4
    ba88:	308c703a 	and	r6,r6,r2
    ba8c:	00c00904 	movi	r3,36
    ba90:	308d883a 	add	r6,r6,r2
    ba94:	19801636 	bltu	r3,r6,baf0 <_calloc_r+0x8c>
    ba98:	008004c4 	movi	r2,19
    ba9c:	11800b2e 	bgeu	r2,r6,bacc <_calloc_r+0x68>
    baa0:	80000015 	stw	zero,0(r16)
    baa4:	80000115 	stw	zero,4(r16)
    baa8:	008006c4 	movi	r2,27
    baac:	11801a2e 	bgeu	r2,r6,bb18 <_calloc_r+0xb4>
    bab0:	80000215 	stw	zero,8(r16)
    bab4:	80000315 	stw	zero,12(r16)
    bab8:	30c0151e 	bne	r6,r3,bb10 <_calloc_r+0xac>
    babc:	80000415 	stw	zero,16(r16)
    bac0:	80800604 	addi	r2,r16,24
    bac4:	80000515 	stw	zero,20(r16)
    bac8:	00000106 	br	bad0 <_calloc_r+0x6c>
    bacc:	8005883a 	mov	r2,r16
    bad0:	10000015 	stw	zero,0(r2)
    bad4:	10000115 	stw	zero,4(r2)
    bad8:	10000215 	stw	zero,8(r2)
    badc:	8005883a 	mov	r2,r16
    bae0:	dfc00117 	ldw	ra,4(sp)
    bae4:	dc000017 	ldw	r16,0(sp)
    bae8:	dec00204 	addi	sp,sp,8
    baec:	f800283a 	ret
    baf0:	000b883a 	mov	r5,zero
    baf4:	8009883a 	mov	r4,r16
    baf8:	0008a540 	call	8a54 <memset>
    bafc:	8005883a 	mov	r2,r16
    bb00:	dfc00117 	ldw	ra,4(sp)
    bb04:	dc000017 	ldw	r16,0(sp)
    bb08:	dec00204 	addi	sp,sp,8
    bb0c:	f800283a 	ret
    bb10:	80800404 	addi	r2,r16,16
    bb14:	003fee06 	br	bad0 <__alt_data_end+0xff00bad0>
    bb18:	80800204 	addi	r2,r16,8
    bb1c:	003fec06 	br	bad0 <__alt_data_end+0xff00bad0>
    bb20:	0005883a 	mov	r2,zero
    bb24:	003fee06 	br	bae0 <__alt_data_end+0xff00bae0>

0000bb28 <_fclose_r>:
    bb28:	28003926 	beq	r5,zero,bc10 <_fclose_r+0xe8>
    bb2c:	defffc04 	addi	sp,sp,-16
    bb30:	dc400115 	stw	r17,4(sp)
    bb34:	dc000015 	stw	r16,0(sp)
    bb38:	dfc00315 	stw	ra,12(sp)
    bb3c:	dc800215 	stw	r18,8(sp)
    bb40:	2023883a 	mov	r17,r4
    bb44:	2821883a 	mov	r16,r5
    bb48:	20000226 	beq	r4,zero,bb54 <_fclose_r+0x2c>
    bb4c:	20800e17 	ldw	r2,56(r4)
    bb50:	10002726 	beq	r2,zero,bbf0 <_fclose_r+0xc8>
    bb54:	8080030f 	ldh	r2,12(r16)
    bb58:	1000071e 	bne	r2,zero,bb78 <_fclose_r+0x50>
    bb5c:	0005883a 	mov	r2,zero
    bb60:	dfc00317 	ldw	ra,12(sp)
    bb64:	dc800217 	ldw	r18,8(sp)
    bb68:	dc400117 	ldw	r17,4(sp)
    bb6c:	dc000017 	ldw	r16,0(sp)
    bb70:	dec00404 	addi	sp,sp,16
    bb74:	f800283a 	ret
    bb78:	800b883a 	mov	r5,r16
    bb7c:	8809883a 	mov	r4,r17
    bb80:	00073740 	call	7374 <__sflush_r>
    bb84:	1025883a 	mov	r18,r2
    bb88:	80800b17 	ldw	r2,44(r16)
    bb8c:	10000426 	beq	r2,zero,bba0 <_fclose_r+0x78>
    bb90:	81400717 	ldw	r5,28(r16)
    bb94:	8809883a 	mov	r4,r17
    bb98:	103ee83a 	callr	r2
    bb9c:	10001616 	blt	r2,zero,bbf8 <_fclose_r+0xd0>
    bba0:	8080030b 	ldhu	r2,12(r16)
    bba4:	1080200c 	andi	r2,r2,128
    bba8:	1000151e 	bne	r2,zero,bc00 <_fclose_r+0xd8>
    bbac:	81400c17 	ldw	r5,48(r16)
    bbb0:	28000526 	beq	r5,zero,bbc8 <_fclose_r+0xa0>
    bbb4:	80801004 	addi	r2,r16,64
    bbb8:	28800226 	beq	r5,r2,bbc4 <_fclose_r+0x9c>
    bbbc:	8809883a 	mov	r4,r17
    bbc0:	0007ae00 	call	7ae0 <_free_r>
    bbc4:	80000c15 	stw	zero,48(r16)
    bbc8:	81401117 	ldw	r5,68(r16)
    bbcc:	28000326 	beq	r5,zero,bbdc <_fclose_r+0xb4>
    bbd0:	8809883a 	mov	r4,r17
    bbd4:	0007ae00 	call	7ae0 <_free_r>
    bbd8:	80001115 	stw	zero,68(r16)
    bbdc:	000797c0 	call	797c <__sfp_lock_acquire>
    bbe0:	8000030d 	sth	zero,12(r16)
    bbe4:	00079800 	call	7980 <__sfp_lock_release>
    bbe8:	9005883a 	mov	r2,r18
    bbec:	003fdc06 	br	bb60 <__alt_data_end+0xff00bb60>
    bbf0:	000796c0 	call	796c <__sinit>
    bbf4:	003fd706 	br	bb54 <__alt_data_end+0xff00bb54>
    bbf8:	04bfffc4 	movi	r18,-1
    bbfc:	003fe806 	br	bba0 <__alt_data_end+0xff00bba0>
    bc00:	81400417 	ldw	r5,16(r16)
    bc04:	8809883a 	mov	r4,r17
    bc08:	0007ae00 	call	7ae0 <_free_r>
    bc0c:	003fe706 	br	bbac <__alt_data_end+0xff00bbac>
    bc10:	0005883a 	mov	r2,zero
    bc14:	f800283a 	ret

0000bc18 <fclose>:
    bc18:	00800074 	movhi	r2,1
    bc1c:	10903104 	addi	r2,r2,16580
    bc20:	200b883a 	mov	r5,r4
    bc24:	11000017 	ldw	r4,0(r2)
    bc28:	000bb281 	jmpi	bb28 <_fclose_r>

0000bc2c <__fputwc>:
    bc2c:	defff804 	addi	sp,sp,-32
    bc30:	dcc00415 	stw	r19,16(sp)
    bc34:	dc800315 	stw	r18,12(sp)
    bc38:	dc000115 	stw	r16,4(sp)
    bc3c:	dfc00715 	stw	ra,28(sp)
    bc40:	dd400615 	stw	r21,24(sp)
    bc44:	dd000515 	stw	r20,20(sp)
    bc48:	dc400215 	stw	r17,8(sp)
    bc4c:	2027883a 	mov	r19,r4
    bc50:	2825883a 	mov	r18,r5
    bc54:	3021883a 	mov	r16,r6
    bc58:	00084bc0 	call	84bc <__locale_mb_cur_max>
    bc5c:	00c00044 	movi	r3,1
    bc60:	10c03e26 	beq	r2,r3,bd5c <__fputwc+0x130>
    bc64:	81c01704 	addi	r7,r16,92
    bc68:	900d883a 	mov	r6,r18
    bc6c:	d80b883a 	mov	r5,sp
    bc70:	9809883a 	mov	r4,r19
    bc74:	000c0fc0 	call	c0fc <_wcrtomb_r>
    bc78:	1029883a 	mov	r20,r2
    bc7c:	00bfffc4 	movi	r2,-1
    bc80:	a0802026 	beq	r20,r2,bd04 <__fputwc+0xd8>
    bc84:	d9400003 	ldbu	r5,0(sp)
    bc88:	a0001c26 	beq	r20,zero,bcfc <__fputwc+0xd0>
    bc8c:	0023883a 	mov	r17,zero
    bc90:	05400284 	movi	r21,10
    bc94:	00000906 	br	bcbc <__fputwc+0x90>
    bc98:	80800017 	ldw	r2,0(r16)
    bc9c:	11400005 	stb	r5,0(r2)
    bca0:	80c00017 	ldw	r3,0(r16)
    bca4:	18c00044 	addi	r3,r3,1
    bca8:	80c00015 	stw	r3,0(r16)
    bcac:	8c400044 	addi	r17,r17,1
    bcb0:	dc45883a 	add	r2,sp,r17
    bcb4:	8d00112e 	bgeu	r17,r20,bcfc <__fputwc+0xd0>
    bcb8:	11400003 	ldbu	r5,0(r2)
    bcbc:	80c00217 	ldw	r3,8(r16)
    bcc0:	18ffffc4 	addi	r3,r3,-1
    bcc4:	80c00215 	stw	r3,8(r16)
    bcc8:	183ff30e 	bge	r3,zero,bc98 <__alt_data_end+0xff00bc98>
    bccc:	80800617 	ldw	r2,24(r16)
    bcd0:	18801916 	blt	r3,r2,bd38 <__fputwc+0x10c>
    bcd4:	80800017 	ldw	r2,0(r16)
    bcd8:	11400005 	stb	r5,0(r2)
    bcdc:	80800017 	ldw	r2,0(r16)
    bce0:	10c00003 	ldbu	r3,0(r2)
    bce4:	10800044 	addi	r2,r2,1
    bce8:	1d402326 	beq	r3,r21,bd78 <__fputwc+0x14c>
    bcec:	80800015 	stw	r2,0(r16)
    bcf0:	8c400044 	addi	r17,r17,1
    bcf4:	dc45883a 	add	r2,sp,r17
    bcf8:	8d3fef36 	bltu	r17,r20,bcb8 <__alt_data_end+0xff00bcb8>
    bcfc:	9005883a 	mov	r2,r18
    bd00:	00000406 	br	bd14 <__fputwc+0xe8>
    bd04:	80c0030b 	ldhu	r3,12(r16)
    bd08:	a005883a 	mov	r2,r20
    bd0c:	18c01014 	ori	r3,r3,64
    bd10:	80c0030d 	sth	r3,12(r16)
    bd14:	dfc00717 	ldw	ra,28(sp)
    bd18:	dd400617 	ldw	r21,24(sp)
    bd1c:	dd000517 	ldw	r20,20(sp)
    bd20:	dcc00417 	ldw	r19,16(sp)
    bd24:	dc800317 	ldw	r18,12(sp)
    bd28:	dc400217 	ldw	r17,8(sp)
    bd2c:	dc000117 	ldw	r16,4(sp)
    bd30:	dec00804 	addi	sp,sp,32
    bd34:	f800283a 	ret
    bd38:	800d883a 	mov	r6,r16
    bd3c:	29403fcc 	andi	r5,r5,255
    bd40:	9809883a 	mov	r4,r19
    bd44:	000bfa40 	call	bfa4 <__swbuf_r>
    bd48:	10bfffe0 	cmpeqi	r2,r2,-1
    bd4c:	10803fcc 	andi	r2,r2,255
    bd50:	103fd626 	beq	r2,zero,bcac <__alt_data_end+0xff00bcac>
    bd54:	00bfffc4 	movi	r2,-1
    bd58:	003fee06 	br	bd14 <__alt_data_end+0xff00bd14>
    bd5c:	90ffffc4 	addi	r3,r18,-1
    bd60:	01003f84 	movi	r4,254
    bd64:	20ffbf36 	bltu	r4,r3,bc64 <__alt_data_end+0xff00bc64>
    bd68:	900b883a 	mov	r5,r18
    bd6c:	dc800005 	stb	r18,0(sp)
    bd70:	1029883a 	mov	r20,r2
    bd74:	003fc506 	br	bc8c <__alt_data_end+0xff00bc8c>
    bd78:	800d883a 	mov	r6,r16
    bd7c:	a80b883a 	mov	r5,r21
    bd80:	9809883a 	mov	r4,r19
    bd84:	000bfa40 	call	bfa4 <__swbuf_r>
    bd88:	10bfffe0 	cmpeqi	r2,r2,-1
    bd8c:	003fef06 	br	bd4c <__alt_data_end+0xff00bd4c>

0000bd90 <_fputwc_r>:
    bd90:	3080030b 	ldhu	r2,12(r6)
    bd94:	10c8000c 	andi	r3,r2,8192
    bd98:	1800051e 	bne	r3,zero,bdb0 <_fputwc_r+0x20>
    bd9c:	30c01917 	ldw	r3,100(r6)
    bda0:	10880014 	ori	r2,r2,8192
    bda4:	3080030d 	sth	r2,12(r6)
    bda8:	18880014 	ori	r2,r3,8192
    bdac:	30801915 	stw	r2,100(r6)
    bdb0:	000bc2c1 	jmpi	bc2c <__fputwc>

0000bdb4 <fputwc>:
    bdb4:	00800074 	movhi	r2,1
    bdb8:	defffc04 	addi	sp,sp,-16
    bdbc:	10903104 	addi	r2,r2,16580
    bdc0:	dc000115 	stw	r16,4(sp)
    bdc4:	14000017 	ldw	r16,0(r2)
    bdc8:	dc400215 	stw	r17,8(sp)
    bdcc:	dfc00315 	stw	ra,12(sp)
    bdd0:	2023883a 	mov	r17,r4
    bdd4:	80000226 	beq	r16,zero,bde0 <fputwc+0x2c>
    bdd8:	80800e17 	ldw	r2,56(r16)
    bddc:	10001026 	beq	r2,zero,be20 <fputwc+0x6c>
    bde0:	2880030b 	ldhu	r2,12(r5)
    bde4:	10c8000c 	andi	r3,r2,8192
    bde8:	1800051e 	bne	r3,zero,be00 <fputwc+0x4c>
    bdec:	28c01917 	ldw	r3,100(r5)
    bdf0:	10880014 	ori	r2,r2,8192
    bdf4:	2880030d 	sth	r2,12(r5)
    bdf8:	18880014 	ori	r2,r3,8192
    bdfc:	28801915 	stw	r2,100(r5)
    be00:	280d883a 	mov	r6,r5
    be04:	8009883a 	mov	r4,r16
    be08:	880b883a 	mov	r5,r17
    be0c:	dfc00317 	ldw	ra,12(sp)
    be10:	dc400217 	ldw	r17,8(sp)
    be14:	dc000117 	ldw	r16,4(sp)
    be18:	dec00404 	addi	sp,sp,16
    be1c:	000bc2c1 	jmpi	bc2c <__fputwc>
    be20:	8009883a 	mov	r4,r16
    be24:	d9400015 	stw	r5,0(sp)
    be28:	000796c0 	call	796c <__sinit>
    be2c:	d9400017 	ldw	r5,0(sp)
    be30:	003feb06 	br	bde0 <__alt_data_end+0xff00bde0>

0000be34 <_fstat_r>:
    be34:	defffd04 	addi	sp,sp,-12
    be38:	2805883a 	mov	r2,r5
    be3c:	dc000015 	stw	r16,0(sp)
    be40:	04000074 	movhi	r16,1
    be44:	dc400115 	stw	r17,4(sp)
    be48:	84170804 	addi	r16,r16,23584
    be4c:	2023883a 	mov	r17,r4
    be50:	300b883a 	mov	r5,r6
    be54:	1009883a 	mov	r4,r2
    be58:	dfc00215 	stw	ra,8(sp)
    be5c:	80000015 	stw	zero,0(r16)
    be60:	000f5700 	call	f570 <fstat>
    be64:	00ffffc4 	movi	r3,-1
    be68:	10c00526 	beq	r2,r3,be80 <_fstat_r+0x4c>
    be6c:	dfc00217 	ldw	ra,8(sp)
    be70:	dc400117 	ldw	r17,4(sp)
    be74:	dc000017 	ldw	r16,0(sp)
    be78:	dec00304 	addi	sp,sp,12
    be7c:	f800283a 	ret
    be80:	80c00017 	ldw	r3,0(r16)
    be84:	183ff926 	beq	r3,zero,be6c <__alt_data_end+0xff00be6c>
    be88:	88c00015 	stw	r3,0(r17)
    be8c:	003ff706 	br	be6c <__alt_data_end+0xff00be6c>

0000be90 <_isatty_r>:
    be90:	defffd04 	addi	sp,sp,-12
    be94:	dc000015 	stw	r16,0(sp)
    be98:	04000074 	movhi	r16,1
    be9c:	dc400115 	stw	r17,4(sp)
    bea0:	84170804 	addi	r16,r16,23584
    bea4:	2023883a 	mov	r17,r4
    bea8:	2809883a 	mov	r4,r5
    beac:	dfc00215 	stw	ra,8(sp)
    beb0:	80000015 	stw	zero,0(r16)
    beb4:	000f65c0 	call	f65c <isatty>
    beb8:	00ffffc4 	movi	r3,-1
    bebc:	10c00526 	beq	r2,r3,bed4 <_isatty_r+0x44>
    bec0:	dfc00217 	ldw	ra,8(sp)
    bec4:	dc400117 	ldw	r17,4(sp)
    bec8:	dc000017 	ldw	r16,0(sp)
    becc:	dec00304 	addi	sp,sp,12
    bed0:	f800283a 	ret
    bed4:	80c00017 	ldw	r3,0(r16)
    bed8:	183ff926 	beq	r3,zero,bec0 <__alt_data_end+0xff00bec0>
    bedc:	88c00015 	stw	r3,0(r17)
    bee0:	003ff706 	br	bec0 <__alt_data_end+0xff00bec0>

0000bee4 <_lseek_r>:
    bee4:	defffd04 	addi	sp,sp,-12
    bee8:	2805883a 	mov	r2,r5
    beec:	dc000015 	stw	r16,0(sp)
    bef0:	04000074 	movhi	r16,1
    bef4:	dc400115 	stw	r17,4(sp)
    bef8:	300b883a 	mov	r5,r6
    befc:	84170804 	addi	r16,r16,23584
    bf00:	2023883a 	mov	r17,r4
    bf04:	380d883a 	mov	r6,r7
    bf08:	1009883a 	mov	r4,r2
    bf0c:	dfc00215 	stw	ra,8(sp)
    bf10:	80000015 	stw	zero,0(r16)
    bf14:	000f8280 	call	f828 <lseek>
    bf18:	00ffffc4 	movi	r3,-1
    bf1c:	10c00526 	beq	r2,r3,bf34 <_lseek_r+0x50>
    bf20:	dfc00217 	ldw	ra,8(sp)
    bf24:	dc400117 	ldw	r17,4(sp)
    bf28:	dc000017 	ldw	r16,0(sp)
    bf2c:	dec00304 	addi	sp,sp,12
    bf30:	f800283a 	ret
    bf34:	80c00017 	ldw	r3,0(r16)
    bf38:	183ff926 	beq	r3,zero,bf20 <__alt_data_end+0xff00bf20>
    bf3c:	88c00015 	stw	r3,0(r17)
    bf40:	003ff706 	br	bf20 <__alt_data_end+0xff00bf20>

0000bf44 <_read_r>:
    bf44:	defffd04 	addi	sp,sp,-12
    bf48:	2805883a 	mov	r2,r5
    bf4c:	dc000015 	stw	r16,0(sp)
    bf50:	04000074 	movhi	r16,1
    bf54:	dc400115 	stw	r17,4(sp)
    bf58:	300b883a 	mov	r5,r6
    bf5c:	84170804 	addi	r16,r16,23584
    bf60:	2023883a 	mov	r17,r4
    bf64:	380d883a 	mov	r6,r7
    bf68:	1009883a 	mov	r4,r2
    bf6c:	dfc00215 	stw	ra,8(sp)
    bf70:	80000015 	stw	zero,0(r16)
    bf74:	000f9fc0 	call	f9fc <read>
    bf78:	00ffffc4 	movi	r3,-1
    bf7c:	10c00526 	beq	r2,r3,bf94 <_read_r+0x50>
    bf80:	dfc00217 	ldw	ra,8(sp)
    bf84:	dc400117 	ldw	r17,4(sp)
    bf88:	dc000017 	ldw	r16,0(sp)
    bf8c:	dec00304 	addi	sp,sp,12
    bf90:	f800283a 	ret
    bf94:	80c00017 	ldw	r3,0(r16)
    bf98:	183ff926 	beq	r3,zero,bf80 <__alt_data_end+0xff00bf80>
    bf9c:	88c00015 	stw	r3,0(r17)
    bfa0:	003ff706 	br	bf80 <__alt_data_end+0xff00bf80>

0000bfa4 <__swbuf_r>:
    bfa4:	defffb04 	addi	sp,sp,-20
    bfa8:	dcc00315 	stw	r19,12(sp)
    bfac:	dc800215 	stw	r18,8(sp)
    bfb0:	dc000015 	stw	r16,0(sp)
    bfb4:	dfc00415 	stw	ra,16(sp)
    bfb8:	dc400115 	stw	r17,4(sp)
    bfbc:	2025883a 	mov	r18,r4
    bfc0:	2827883a 	mov	r19,r5
    bfc4:	3021883a 	mov	r16,r6
    bfc8:	20000226 	beq	r4,zero,bfd4 <__swbuf_r+0x30>
    bfcc:	20800e17 	ldw	r2,56(r4)
    bfd0:	10004226 	beq	r2,zero,c0dc <__swbuf_r+0x138>
    bfd4:	80800617 	ldw	r2,24(r16)
    bfd8:	8100030b 	ldhu	r4,12(r16)
    bfdc:	80800215 	stw	r2,8(r16)
    bfe0:	2080020c 	andi	r2,r4,8
    bfe4:	10003626 	beq	r2,zero,c0c0 <__swbuf_r+0x11c>
    bfe8:	80c00417 	ldw	r3,16(r16)
    bfec:	18003426 	beq	r3,zero,c0c0 <__swbuf_r+0x11c>
    bff0:	2088000c 	andi	r2,r4,8192
    bff4:	9c403fcc 	andi	r17,r19,255
    bff8:	10001a26 	beq	r2,zero,c064 <__swbuf_r+0xc0>
    bffc:	80800017 	ldw	r2,0(r16)
    c000:	81000517 	ldw	r4,20(r16)
    c004:	10c7c83a 	sub	r3,r2,r3
    c008:	1900200e 	bge	r3,r4,c08c <__swbuf_r+0xe8>
    c00c:	18c00044 	addi	r3,r3,1
    c010:	81000217 	ldw	r4,8(r16)
    c014:	11400044 	addi	r5,r2,1
    c018:	81400015 	stw	r5,0(r16)
    c01c:	213fffc4 	addi	r4,r4,-1
    c020:	81000215 	stw	r4,8(r16)
    c024:	14c00005 	stb	r19,0(r2)
    c028:	80800517 	ldw	r2,20(r16)
    c02c:	10c01e26 	beq	r2,r3,c0a8 <__swbuf_r+0x104>
    c030:	8080030b 	ldhu	r2,12(r16)
    c034:	1080004c 	andi	r2,r2,1
    c038:	10000226 	beq	r2,zero,c044 <__swbuf_r+0xa0>
    c03c:	00800284 	movi	r2,10
    c040:	88801926 	beq	r17,r2,c0a8 <__swbuf_r+0x104>
    c044:	8805883a 	mov	r2,r17
    c048:	dfc00417 	ldw	ra,16(sp)
    c04c:	dcc00317 	ldw	r19,12(sp)
    c050:	dc800217 	ldw	r18,8(sp)
    c054:	dc400117 	ldw	r17,4(sp)
    c058:	dc000017 	ldw	r16,0(sp)
    c05c:	dec00504 	addi	sp,sp,20
    c060:	f800283a 	ret
    c064:	81401917 	ldw	r5,100(r16)
    c068:	00b7ffc4 	movi	r2,-8193
    c06c:	21080014 	ori	r4,r4,8192
    c070:	2884703a 	and	r2,r5,r2
    c074:	80801915 	stw	r2,100(r16)
    c078:	80800017 	ldw	r2,0(r16)
    c07c:	8100030d 	sth	r4,12(r16)
    c080:	81000517 	ldw	r4,20(r16)
    c084:	10c7c83a 	sub	r3,r2,r3
    c088:	193fe016 	blt	r3,r4,c00c <__alt_data_end+0xff00c00c>
    c08c:	800b883a 	mov	r5,r16
    c090:	9009883a 	mov	r4,r18
    c094:	00075900 	call	7590 <_fflush_r>
    c098:	1000071e 	bne	r2,zero,c0b8 <__swbuf_r+0x114>
    c09c:	80800017 	ldw	r2,0(r16)
    c0a0:	00c00044 	movi	r3,1
    c0a4:	003fda06 	br	c010 <__alt_data_end+0xff00c010>
    c0a8:	800b883a 	mov	r5,r16
    c0ac:	9009883a 	mov	r4,r18
    c0b0:	00075900 	call	7590 <_fflush_r>
    c0b4:	103fe326 	beq	r2,zero,c044 <__alt_data_end+0xff00c044>
    c0b8:	00bfffc4 	movi	r2,-1
    c0bc:	003fe206 	br	c048 <__alt_data_end+0xff00c048>
    c0c0:	800b883a 	mov	r5,r16
    c0c4:	9009883a 	mov	r4,r18
    c0c8:	00059980 	call	5998 <__swsetup_r>
    c0cc:	103ffa1e 	bne	r2,zero,c0b8 <__alt_data_end+0xff00c0b8>
    c0d0:	8100030b 	ldhu	r4,12(r16)
    c0d4:	80c00417 	ldw	r3,16(r16)
    c0d8:	003fc506 	br	bff0 <__alt_data_end+0xff00bff0>
    c0dc:	000796c0 	call	796c <__sinit>
    c0e0:	003fbc06 	br	bfd4 <__alt_data_end+0xff00bfd4>

0000c0e4 <__swbuf>:
    c0e4:	00800074 	movhi	r2,1
    c0e8:	10903104 	addi	r2,r2,16580
    c0ec:	280d883a 	mov	r6,r5
    c0f0:	200b883a 	mov	r5,r4
    c0f4:	11000017 	ldw	r4,0(r2)
    c0f8:	000bfa41 	jmpi	bfa4 <__swbuf_r>

0000c0fc <_wcrtomb_r>:
    c0fc:	defff604 	addi	sp,sp,-40
    c100:	00800074 	movhi	r2,1
    c104:	dc800815 	stw	r18,32(sp)
    c108:	dc400715 	stw	r17,28(sp)
    c10c:	dc000615 	stw	r16,24(sp)
    c110:	10903304 	addi	r2,r2,16588
    c114:	dfc00915 	stw	ra,36(sp)
    c118:	2021883a 	mov	r16,r4
    c11c:	3823883a 	mov	r17,r7
    c120:	14800017 	ldw	r18,0(r2)
    c124:	28001426 	beq	r5,zero,c178 <_wcrtomb_r+0x7c>
    c128:	d9400415 	stw	r5,16(sp)
    c12c:	d9800515 	stw	r6,20(sp)
    c130:	00084b00 	call	84b0 <__locale_charset>
    c134:	d9800517 	ldw	r6,20(sp)
    c138:	d9400417 	ldw	r5,16(sp)
    c13c:	100f883a 	mov	r7,r2
    c140:	dc400015 	stw	r17,0(sp)
    c144:	8009883a 	mov	r4,r16
    c148:	903ee83a 	callr	r18
    c14c:	00ffffc4 	movi	r3,-1
    c150:	10c0031e 	bne	r2,r3,c160 <_wcrtomb_r+0x64>
    c154:	88000015 	stw	zero,0(r17)
    c158:	00c02284 	movi	r3,138
    c15c:	80c00015 	stw	r3,0(r16)
    c160:	dfc00917 	ldw	ra,36(sp)
    c164:	dc800817 	ldw	r18,32(sp)
    c168:	dc400717 	ldw	r17,28(sp)
    c16c:	dc000617 	ldw	r16,24(sp)
    c170:	dec00a04 	addi	sp,sp,40
    c174:	f800283a 	ret
    c178:	00084b00 	call	84b0 <__locale_charset>
    c17c:	100f883a 	mov	r7,r2
    c180:	dc400015 	stw	r17,0(sp)
    c184:	000d883a 	mov	r6,zero
    c188:	d9400104 	addi	r5,sp,4
    c18c:	8009883a 	mov	r4,r16
    c190:	903ee83a 	callr	r18
    c194:	003fed06 	br	c14c <__alt_data_end+0xff00c14c>

0000c198 <wcrtomb>:
    c198:	defff604 	addi	sp,sp,-40
    c19c:	00800074 	movhi	r2,1
    c1a0:	dc800615 	stw	r18,24(sp)
    c1a4:	dc400515 	stw	r17,20(sp)
    c1a8:	10903104 	addi	r2,r2,16580
    c1ac:	dfc00915 	stw	ra,36(sp)
    c1b0:	dd000815 	stw	r20,32(sp)
    c1b4:	dcc00715 	stw	r19,28(sp)
    c1b8:	dc000415 	stw	r16,16(sp)
    c1bc:	3025883a 	mov	r18,r6
    c1c0:	14400017 	ldw	r17,0(r2)
    c1c4:	20001926 	beq	r4,zero,c22c <wcrtomb+0x94>
    c1c8:	00800074 	movhi	r2,1
    c1cc:	10903304 	addi	r2,r2,16588
    c1d0:	15000017 	ldw	r20,0(r2)
    c1d4:	2021883a 	mov	r16,r4
    c1d8:	2827883a 	mov	r19,r5
    c1dc:	00084b00 	call	84b0 <__locale_charset>
    c1e0:	100f883a 	mov	r7,r2
    c1e4:	dc800015 	stw	r18,0(sp)
    c1e8:	980d883a 	mov	r6,r19
    c1ec:	800b883a 	mov	r5,r16
    c1f0:	8809883a 	mov	r4,r17
    c1f4:	a03ee83a 	callr	r20
    c1f8:	00ffffc4 	movi	r3,-1
    c1fc:	10c0031e 	bne	r2,r3,c20c <wcrtomb+0x74>
    c200:	90000015 	stw	zero,0(r18)
    c204:	00c02284 	movi	r3,138
    c208:	88c00015 	stw	r3,0(r17)
    c20c:	dfc00917 	ldw	ra,36(sp)
    c210:	dd000817 	ldw	r20,32(sp)
    c214:	dcc00717 	ldw	r19,28(sp)
    c218:	dc800617 	ldw	r18,24(sp)
    c21c:	dc400517 	ldw	r17,20(sp)
    c220:	dc000417 	ldw	r16,16(sp)
    c224:	dec00a04 	addi	sp,sp,40
    c228:	f800283a 	ret
    c22c:	00800074 	movhi	r2,1
    c230:	10903304 	addi	r2,r2,16588
    c234:	14000017 	ldw	r16,0(r2)
    c238:	00084b00 	call	84b0 <__locale_charset>
    c23c:	100f883a 	mov	r7,r2
    c240:	dc800015 	stw	r18,0(sp)
    c244:	000d883a 	mov	r6,zero
    c248:	d9400104 	addi	r5,sp,4
    c24c:	8809883a 	mov	r4,r17
    c250:	803ee83a 	callr	r16
    c254:	003fe806 	br	c1f8 <__alt_data_end+0xff00c1f8>

0000c258 <__ascii_wctomb>:
    c258:	28000526 	beq	r5,zero,c270 <__ascii_wctomb+0x18>
    c25c:	00803fc4 	movi	r2,255
    c260:	11800536 	bltu	r2,r6,c278 <__ascii_wctomb+0x20>
    c264:	29800005 	stb	r6,0(r5)
    c268:	00800044 	movi	r2,1
    c26c:	f800283a 	ret
    c270:	0005883a 	mov	r2,zero
    c274:	f800283a 	ret
    c278:	00802284 	movi	r2,138
    c27c:	20800015 	stw	r2,0(r4)
    c280:	00bfffc4 	movi	r2,-1
    c284:	f800283a 	ret

0000c288 <_wctomb_r>:
    c288:	00800074 	movhi	r2,1
    c28c:	defff904 	addi	sp,sp,-28
    c290:	10903304 	addi	r2,r2,16588
    c294:	dfc00615 	stw	ra,24(sp)
    c298:	dc400515 	stw	r17,20(sp)
    c29c:	dc000415 	stw	r16,16(sp)
    c2a0:	3823883a 	mov	r17,r7
    c2a4:	14000017 	ldw	r16,0(r2)
    c2a8:	d9000115 	stw	r4,4(sp)
    c2ac:	d9400215 	stw	r5,8(sp)
    c2b0:	d9800315 	stw	r6,12(sp)
    c2b4:	00084b00 	call	84b0 <__locale_charset>
    c2b8:	d9800317 	ldw	r6,12(sp)
    c2bc:	d9400217 	ldw	r5,8(sp)
    c2c0:	d9000117 	ldw	r4,4(sp)
    c2c4:	100f883a 	mov	r7,r2
    c2c8:	dc400015 	stw	r17,0(sp)
    c2cc:	803ee83a 	callr	r16
    c2d0:	dfc00617 	ldw	ra,24(sp)
    c2d4:	dc400517 	ldw	r17,20(sp)
    c2d8:	dc000417 	ldw	r16,16(sp)
    c2dc:	dec00704 	addi	sp,sp,28
    c2e0:	f800283a 	ret

0000c2e4 <__udivdi3>:
    c2e4:	defff504 	addi	sp,sp,-44
    c2e8:	dcc00415 	stw	r19,16(sp)
    c2ec:	dc000115 	stw	r16,4(sp)
    c2f0:	dfc00a15 	stw	ra,40(sp)
    c2f4:	df000915 	stw	fp,36(sp)
    c2f8:	ddc00815 	stw	r23,32(sp)
    c2fc:	dd800715 	stw	r22,28(sp)
    c300:	dd400615 	stw	r21,24(sp)
    c304:	dd000515 	stw	r20,20(sp)
    c308:	dc800315 	stw	r18,12(sp)
    c30c:	dc400215 	stw	r17,8(sp)
    c310:	2027883a 	mov	r19,r4
    c314:	2821883a 	mov	r16,r5
    c318:	3800411e 	bne	r7,zero,c420 <__udivdi3+0x13c>
    c31c:	3023883a 	mov	r17,r6
    c320:	2025883a 	mov	r18,r4
    c324:	2980522e 	bgeu	r5,r6,c470 <__udivdi3+0x18c>
    c328:	00bfffd4 	movui	r2,65535
    c32c:	282d883a 	mov	r22,r5
    c330:	1180a836 	bltu	r2,r6,c5d4 <__udivdi3+0x2f0>
    c334:	00803fc4 	movi	r2,255
    c338:	1185803a 	cmpltu	r2,r2,r6
    c33c:	100490fa 	slli	r2,r2,3
    c340:	3086d83a 	srl	r3,r6,r2
    c344:	01000074 	movhi	r4,1
    c348:	21093604 	addi	r4,r4,9432
    c34c:	20c7883a 	add	r3,r4,r3
    c350:	18c00003 	ldbu	r3,0(r3)
    c354:	1885883a 	add	r2,r3,r2
    c358:	00c00804 	movi	r3,32
    c35c:	1887c83a 	sub	r3,r3,r2
    c360:	18000526 	beq	r3,zero,c378 <__udivdi3+0x94>
    c364:	80e0983a 	sll	r16,r16,r3
    c368:	9884d83a 	srl	r2,r19,r2
    c36c:	30e2983a 	sll	r17,r6,r3
    c370:	98e4983a 	sll	r18,r19,r3
    c374:	142cb03a 	or	r22,r2,r16
    c378:	882ad43a 	srli	r21,r17,16
    c37c:	b009883a 	mov	r4,r22
    c380:	8d3fffcc 	andi	r20,r17,65535
    c384:	a80b883a 	mov	r5,r21
    c388:	0002c100 	call	2c10 <__umodsi3>
    c38c:	b009883a 	mov	r4,r22
    c390:	a80b883a 	mov	r5,r21
    c394:	1027883a 	mov	r19,r2
    c398:	0002bac0 	call	2bac <__udivsi3>
    c39c:	102d883a 	mov	r22,r2
    c3a0:	9826943a 	slli	r19,r19,16
    c3a4:	9004d43a 	srli	r2,r18,16
    c3a8:	a5a1383a 	mul	r16,r20,r22
    c3ac:	14c4b03a 	or	r2,r2,r19
    c3b0:	1400052e 	bgeu	r2,r16,c3c8 <__udivdi3+0xe4>
    c3b4:	1445883a 	add	r2,r2,r17
    c3b8:	b0ffffc4 	addi	r3,r22,-1
    c3bc:	14400136 	bltu	r2,r17,c3c4 <__udivdi3+0xe0>
    c3c0:	14012336 	bltu	r2,r16,c850 <__udivdi3+0x56c>
    c3c4:	182d883a 	mov	r22,r3
    c3c8:	1421c83a 	sub	r16,r2,r16
    c3cc:	a80b883a 	mov	r5,r21
    c3d0:	8009883a 	mov	r4,r16
    c3d4:	0002c100 	call	2c10 <__umodsi3>
    c3d8:	1027883a 	mov	r19,r2
    c3dc:	a80b883a 	mov	r5,r21
    c3e0:	8009883a 	mov	r4,r16
    c3e4:	0002bac0 	call	2bac <__udivsi3>
    c3e8:	9826943a 	slli	r19,r19,16
    c3ec:	a0a9383a 	mul	r20,r20,r2
    c3f0:	94bfffcc 	andi	r18,r18,65535
    c3f4:	94e4b03a 	or	r18,r18,r19
    c3f8:	9500052e 	bgeu	r18,r20,c410 <__udivdi3+0x12c>
    c3fc:	8ca5883a 	add	r18,r17,r18
    c400:	10ffffc4 	addi	r3,r2,-1
    c404:	9440f136 	bltu	r18,r17,c7cc <__udivdi3+0x4e8>
    c408:	9500f02e 	bgeu	r18,r20,c7cc <__udivdi3+0x4e8>
    c40c:	10bfff84 	addi	r2,r2,-2
    c410:	b00c943a 	slli	r6,r22,16
    c414:	0007883a 	mov	r3,zero
    c418:	3084b03a 	or	r2,r6,r2
    c41c:	00005906 	br	c584 <__udivdi3+0x2a0>
    c420:	29c05636 	bltu	r5,r7,c57c <__udivdi3+0x298>
    c424:	00bfffd4 	movui	r2,65535
    c428:	11c0622e 	bgeu	r2,r7,c5b4 <__udivdi3+0x2d0>
    c42c:	00804034 	movhi	r2,256
    c430:	10bfffc4 	addi	r2,r2,-1
    c434:	11c0ee36 	bltu	r2,r7,c7f0 <__udivdi3+0x50c>
    c438:	00800404 	movi	r2,16
    c43c:	3886d83a 	srl	r3,r7,r2
    c440:	01000074 	movhi	r4,1
    c444:	21093604 	addi	r4,r4,9432
    c448:	20c7883a 	add	r3,r4,r3
    c44c:	18c00003 	ldbu	r3,0(r3)
    c450:	05400804 	movi	r21,32
    c454:	1885883a 	add	r2,r3,r2
    c458:	a8abc83a 	sub	r21,r21,r2
    c45c:	a800621e 	bne	r21,zero,c5e8 <__udivdi3+0x304>
    c460:	3c00e936 	bltu	r7,r16,c808 <__udivdi3+0x524>
    c464:	9985403a 	cmpgeu	r2,r19,r6
    c468:	0007883a 	mov	r3,zero
    c46c:	00004506 	br	c584 <__udivdi3+0x2a0>
    c470:	3000041e 	bne	r6,zero,c484 <__udivdi3+0x1a0>
    c474:	000b883a 	mov	r5,zero
    c478:	01000044 	movi	r4,1
    c47c:	0002bac0 	call	2bac <__udivsi3>
    c480:	1023883a 	mov	r17,r2
    c484:	00bfffd4 	movui	r2,65535
    c488:	14404e2e 	bgeu	r2,r17,c5c4 <__udivdi3+0x2e0>
    c48c:	00804034 	movhi	r2,256
    c490:	10bfffc4 	addi	r2,r2,-1
    c494:	1440d836 	bltu	r2,r17,c7f8 <__udivdi3+0x514>
    c498:	00800404 	movi	r2,16
    c49c:	8886d83a 	srl	r3,r17,r2
    c4a0:	01000074 	movhi	r4,1
    c4a4:	21093604 	addi	r4,r4,9432
    c4a8:	20c7883a 	add	r3,r4,r3
    c4ac:	18c00003 	ldbu	r3,0(r3)
    c4b0:	1885883a 	add	r2,r3,r2
    c4b4:	00c00804 	movi	r3,32
    c4b8:	1887c83a 	sub	r3,r3,r2
    c4bc:	18008f1e 	bne	r3,zero,c6fc <__udivdi3+0x418>
    c4c0:	882ad43a 	srli	r21,r17,16
    c4c4:	8461c83a 	sub	r16,r16,r17
    c4c8:	8d3fffcc 	andi	r20,r17,65535
    c4cc:	00c00044 	movi	r3,1
    c4d0:	8009883a 	mov	r4,r16
    c4d4:	a80b883a 	mov	r5,r21
    c4d8:	d8c00015 	stw	r3,0(sp)
    c4dc:	0002c100 	call	2c10 <__umodsi3>
    c4e0:	8009883a 	mov	r4,r16
    c4e4:	a80b883a 	mov	r5,r21
    c4e8:	1027883a 	mov	r19,r2
    c4ec:	0002bac0 	call	2bac <__udivsi3>
    c4f0:	9826943a 	slli	r19,r19,16
    c4f4:	9008d43a 	srli	r4,r18,16
    c4f8:	1521383a 	mul	r16,r2,r20
    c4fc:	102d883a 	mov	r22,r2
    c500:	24c8b03a 	or	r4,r4,r19
    c504:	d8c00017 	ldw	r3,0(sp)
    c508:	2400052e 	bgeu	r4,r16,c520 <__udivdi3+0x23c>
    c50c:	2449883a 	add	r4,r4,r17
    c510:	b0bfffc4 	addi	r2,r22,-1
    c514:	24400136 	bltu	r4,r17,c51c <__udivdi3+0x238>
    c518:	2400ca36 	bltu	r4,r16,c844 <__udivdi3+0x560>
    c51c:	102d883a 	mov	r22,r2
    c520:	2421c83a 	sub	r16,r4,r16
    c524:	a80b883a 	mov	r5,r21
    c528:	8009883a 	mov	r4,r16
    c52c:	d8c00015 	stw	r3,0(sp)
    c530:	0002c100 	call	2c10 <__umodsi3>
    c534:	1027883a 	mov	r19,r2
    c538:	a80b883a 	mov	r5,r21
    c53c:	8009883a 	mov	r4,r16
    c540:	0002bac0 	call	2bac <__udivsi3>
    c544:	9826943a 	slli	r19,r19,16
    c548:	1529383a 	mul	r20,r2,r20
    c54c:	94bfffcc 	andi	r18,r18,65535
    c550:	94e4b03a 	or	r18,r18,r19
    c554:	d8c00017 	ldw	r3,0(sp)
    c558:	9500052e 	bgeu	r18,r20,c570 <__udivdi3+0x28c>
    c55c:	8ca5883a 	add	r18,r17,r18
    c560:	113fffc4 	addi	r4,r2,-1
    c564:	94409736 	bltu	r18,r17,c7c4 <__udivdi3+0x4e0>
    c568:	9500962e 	bgeu	r18,r20,c7c4 <__udivdi3+0x4e0>
    c56c:	10bfff84 	addi	r2,r2,-2
    c570:	b00c943a 	slli	r6,r22,16
    c574:	3084b03a 	or	r2,r6,r2
    c578:	00000206 	br	c584 <__udivdi3+0x2a0>
    c57c:	0007883a 	mov	r3,zero
    c580:	0005883a 	mov	r2,zero
    c584:	dfc00a17 	ldw	ra,40(sp)
    c588:	df000917 	ldw	fp,36(sp)
    c58c:	ddc00817 	ldw	r23,32(sp)
    c590:	dd800717 	ldw	r22,28(sp)
    c594:	dd400617 	ldw	r21,24(sp)
    c598:	dd000517 	ldw	r20,20(sp)
    c59c:	dcc00417 	ldw	r19,16(sp)
    c5a0:	dc800317 	ldw	r18,12(sp)
    c5a4:	dc400217 	ldw	r17,8(sp)
    c5a8:	dc000117 	ldw	r16,4(sp)
    c5ac:	dec00b04 	addi	sp,sp,44
    c5b0:	f800283a 	ret
    c5b4:	00803fc4 	movi	r2,255
    c5b8:	11c5803a 	cmpltu	r2,r2,r7
    c5bc:	100490fa 	slli	r2,r2,3
    c5c0:	003f9e06 	br	c43c <__alt_data_end+0xff00c43c>
    c5c4:	00803fc4 	movi	r2,255
    c5c8:	1445803a 	cmpltu	r2,r2,r17
    c5cc:	100490fa 	slli	r2,r2,3
    c5d0:	003fb206 	br	c49c <__alt_data_end+0xff00c49c>
    c5d4:	00804034 	movhi	r2,256
    c5d8:	10bfffc4 	addi	r2,r2,-1
    c5dc:	11808836 	bltu	r2,r6,c800 <__udivdi3+0x51c>
    c5e0:	00800404 	movi	r2,16
    c5e4:	003f5606 	br	c340 <__alt_data_end+0xff00c340>
    c5e8:	30aed83a 	srl	r23,r6,r2
    c5ec:	3d4e983a 	sll	r7,r7,r21
    c5f0:	80acd83a 	srl	r22,r16,r2
    c5f4:	9884d83a 	srl	r2,r19,r2
    c5f8:	3deeb03a 	or	r23,r7,r23
    c5fc:	b824d43a 	srli	r18,r23,16
    c600:	8560983a 	sll	r16,r16,r21
    c604:	b009883a 	mov	r4,r22
    c608:	900b883a 	mov	r5,r18
    c60c:	3568983a 	sll	r20,r6,r21
    c610:	1420b03a 	or	r16,r2,r16
    c614:	0002c100 	call	2c10 <__umodsi3>
    c618:	b009883a 	mov	r4,r22
    c61c:	900b883a 	mov	r5,r18
    c620:	1023883a 	mov	r17,r2
    c624:	0002bac0 	call	2bac <__udivsi3>
    c628:	8808943a 	slli	r4,r17,16
    c62c:	bf3fffcc 	andi	fp,r23,65535
    c630:	8006d43a 	srli	r3,r16,16
    c634:	e0a3383a 	mul	r17,fp,r2
    c638:	100d883a 	mov	r6,r2
    c63c:	1906b03a 	or	r3,r3,r4
    c640:	1c40042e 	bgeu	r3,r17,c654 <__udivdi3+0x370>
    c644:	1dc7883a 	add	r3,r3,r23
    c648:	10bfffc4 	addi	r2,r2,-1
    c64c:	1dc0752e 	bgeu	r3,r23,c824 <__udivdi3+0x540>
    c650:	100d883a 	mov	r6,r2
    c654:	1c63c83a 	sub	r17,r3,r17
    c658:	900b883a 	mov	r5,r18
    c65c:	8809883a 	mov	r4,r17
    c660:	d9800015 	stw	r6,0(sp)
    c664:	0002c100 	call	2c10 <__umodsi3>
    c668:	102d883a 	mov	r22,r2
    c66c:	8809883a 	mov	r4,r17
    c670:	900b883a 	mov	r5,r18
    c674:	0002bac0 	call	2bac <__udivsi3>
    c678:	b02c943a 	slli	r22,r22,16
    c67c:	e089383a 	mul	r4,fp,r2
    c680:	843fffcc 	andi	r16,r16,65535
    c684:	85a0b03a 	or	r16,r16,r22
    c688:	d9800017 	ldw	r6,0(sp)
    c68c:	8100042e 	bgeu	r16,r4,c6a0 <__udivdi3+0x3bc>
    c690:	85e1883a 	add	r16,r16,r23
    c694:	10ffffc4 	addi	r3,r2,-1
    c698:	85c05e2e 	bgeu	r16,r23,c814 <__udivdi3+0x530>
    c69c:	1805883a 	mov	r2,r3
    c6a0:	300c943a 	slli	r6,r6,16
    c6a4:	a17fffcc 	andi	r5,r20,65535
    c6a8:	a028d43a 	srli	r20,r20,16
    c6ac:	3084b03a 	or	r2,r6,r2
    c6b0:	10ffffcc 	andi	r3,r2,65535
    c6b4:	100cd43a 	srli	r6,r2,16
    c6b8:	194f383a 	mul	r7,r3,r5
    c6bc:	1d07383a 	mul	r3,r3,r20
    c6c0:	314b383a 	mul	r5,r6,r5
    c6c4:	3810d43a 	srli	r8,r7,16
    c6c8:	8121c83a 	sub	r16,r16,r4
    c6cc:	1947883a 	add	r3,r3,r5
    c6d0:	40c7883a 	add	r3,r8,r3
    c6d4:	350d383a 	mul	r6,r6,r20
    c6d8:	1940022e 	bgeu	r3,r5,c6e4 <__udivdi3+0x400>
    c6dc:	01000074 	movhi	r4,1
    c6e0:	310d883a 	add	r6,r6,r4
    c6e4:	1828d43a 	srli	r20,r3,16
    c6e8:	a18d883a 	add	r6,r20,r6
    c6ec:	81803e36 	bltu	r16,r6,c7e8 <__udivdi3+0x504>
    c6f0:	81803826 	beq	r16,r6,c7d4 <__udivdi3+0x4f0>
    c6f4:	0007883a 	mov	r3,zero
    c6f8:	003fa206 	br	c584 <__alt_data_end+0xff00c584>
    c6fc:	88e2983a 	sll	r17,r17,r3
    c700:	80a8d83a 	srl	r20,r16,r2
    c704:	80e0983a 	sll	r16,r16,r3
    c708:	882ad43a 	srli	r21,r17,16
    c70c:	9884d83a 	srl	r2,r19,r2
    c710:	a009883a 	mov	r4,r20
    c714:	a80b883a 	mov	r5,r21
    c718:	142eb03a 	or	r23,r2,r16
    c71c:	98e4983a 	sll	r18,r19,r3
    c720:	0002c100 	call	2c10 <__umodsi3>
    c724:	a009883a 	mov	r4,r20
    c728:	a80b883a 	mov	r5,r21
    c72c:	1021883a 	mov	r16,r2
    c730:	0002bac0 	call	2bac <__udivsi3>
    c734:	1039883a 	mov	fp,r2
    c738:	8d3fffcc 	andi	r20,r17,65535
    c73c:	8020943a 	slli	r16,r16,16
    c740:	b804d43a 	srli	r2,r23,16
    c744:	a72d383a 	mul	r22,r20,fp
    c748:	1404b03a 	or	r2,r2,r16
    c74c:	1580062e 	bgeu	r2,r22,c768 <__udivdi3+0x484>
    c750:	1445883a 	add	r2,r2,r17
    c754:	e0ffffc4 	addi	r3,fp,-1
    c758:	14403836 	bltu	r2,r17,c83c <__udivdi3+0x558>
    c75c:	1580372e 	bgeu	r2,r22,c83c <__udivdi3+0x558>
    c760:	e73fff84 	addi	fp,fp,-2
    c764:	1445883a 	add	r2,r2,r17
    c768:	15adc83a 	sub	r22,r2,r22
    c76c:	a80b883a 	mov	r5,r21
    c770:	b009883a 	mov	r4,r22
    c774:	0002c100 	call	2c10 <__umodsi3>
    c778:	1027883a 	mov	r19,r2
    c77c:	b009883a 	mov	r4,r22
    c780:	a80b883a 	mov	r5,r21
    c784:	0002bac0 	call	2bac <__udivsi3>
    c788:	9826943a 	slli	r19,r19,16
    c78c:	a0a1383a 	mul	r16,r20,r2
    c790:	b93fffcc 	andi	r4,r23,65535
    c794:	24c8b03a 	or	r4,r4,r19
    c798:	2400062e 	bgeu	r4,r16,c7b4 <__udivdi3+0x4d0>
    c79c:	2449883a 	add	r4,r4,r17
    c7a0:	10ffffc4 	addi	r3,r2,-1
    c7a4:	24402336 	bltu	r4,r17,c834 <__udivdi3+0x550>
    c7a8:	2400222e 	bgeu	r4,r16,c834 <__udivdi3+0x550>
    c7ac:	10bfff84 	addi	r2,r2,-2
    c7b0:	2449883a 	add	r4,r4,r17
    c7b4:	e038943a 	slli	fp,fp,16
    c7b8:	2421c83a 	sub	r16,r4,r16
    c7bc:	e086b03a 	or	r3,fp,r2
    c7c0:	003f4306 	br	c4d0 <__alt_data_end+0xff00c4d0>
    c7c4:	2005883a 	mov	r2,r4
    c7c8:	003f6906 	br	c570 <__alt_data_end+0xff00c570>
    c7cc:	1805883a 	mov	r2,r3
    c7d0:	003f0f06 	br	c410 <__alt_data_end+0xff00c410>
    c7d4:	1806943a 	slli	r3,r3,16
    c7d8:	9d66983a 	sll	r19,r19,r21
    c7dc:	39ffffcc 	andi	r7,r7,65535
    c7e0:	19c7883a 	add	r3,r3,r7
    c7e4:	98ffc32e 	bgeu	r19,r3,c6f4 <__alt_data_end+0xff00c6f4>
    c7e8:	10bfffc4 	addi	r2,r2,-1
    c7ec:	003fc106 	br	c6f4 <__alt_data_end+0xff00c6f4>
    c7f0:	00800604 	movi	r2,24
    c7f4:	003f1106 	br	c43c <__alt_data_end+0xff00c43c>
    c7f8:	00800604 	movi	r2,24
    c7fc:	003f2706 	br	c49c <__alt_data_end+0xff00c49c>
    c800:	00800604 	movi	r2,24
    c804:	003ece06 	br	c340 <__alt_data_end+0xff00c340>
    c808:	0007883a 	mov	r3,zero
    c80c:	00800044 	movi	r2,1
    c810:	003f5c06 	br	c584 <__alt_data_end+0xff00c584>
    c814:	813fa12e 	bgeu	r16,r4,c69c <__alt_data_end+0xff00c69c>
    c818:	10bfff84 	addi	r2,r2,-2
    c81c:	85e1883a 	add	r16,r16,r23
    c820:	003f9f06 	br	c6a0 <__alt_data_end+0xff00c6a0>
    c824:	1c7f8a2e 	bgeu	r3,r17,c650 <__alt_data_end+0xff00c650>
    c828:	31bfff84 	addi	r6,r6,-2
    c82c:	1dc7883a 	add	r3,r3,r23
    c830:	003f8806 	br	c654 <__alt_data_end+0xff00c654>
    c834:	1805883a 	mov	r2,r3
    c838:	003fde06 	br	c7b4 <__alt_data_end+0xff00c7b4>
    c83c:	1839883a 	mov	fp,r3
    c840:	003fc906 	br	c768 <__alt_data_end+0xff00c768>
    c844:	b5bfff84 	addi	r22,r22,-2
    c848:	2449883a 	add	r4,r4,r17
    c84c:	003f3406 	br	c520 <__alt_data_end+0xff00c520>
    c850:	b5bfff84 	addi	r22,r22,-2
    c854:	1445883a 	add	r2,r2,r17
    c858:	003edb06 	br	c3c8 <__alt_data_end+0xff00c3c8>

0000c85c <__umoddi3>:
    c85c:	defff404 	addi	sp,sp,-48
    c860:	df000a15 	stw	fp,40(sp)
    c864:	dc400315 	stw	r17,12(sp)
    c868:	dc000215 	stw	r16,8(sp)
    c86c:	dfc00b15 	stw	ra,44(sp)
    c870:	ddc00915 	stw	r23,36(sp)
    c874:	dd800815 	stw	r22,32(sp)
    c878:	dd400715 	stw	r21,28(sp)
    c87c:	dd000615 	stw	r20,24(sp)
    c880:	dcc00515 	stw	r19,20(sp)
    c884:	dc800415 	stw	r18,16(sp)
    c888:	2021883a 	mov	r16,r4
    c88c:	2823883a 	mov	r17,r5
    c890:	2839883a 	mov	fp,r5
    c894:	38003c1e 	bne	r7,zero,c988 <__umoddi3+0x12c>
    c898:	3027883a 	mov	r19,r6
    c89c:	2029883a 	mov	r20,r4
    c8a0:	2980512e 	bgeu	r5,r6,c9e8 <__umoddi3+0x18c>
    c8a4:	00bfffd4 	movui	r2,65535
    c8a8:	11809a36 	bltu	r2,r6,cb14 <__umoddi3+0x2b8>
    c8ac:	01003fc4 	movi	r4,255
    c8b0:	2189803a 	cmpltu	r4,r4,r6
    c8b4:	200890fa 	slli	r4,r4,3
    c8b8:	3104d83a 	srl	r2,r6,r4
    c8bc:	00c00074 	movhi	r3,1
    c8c0:	18c93604 	addi	r3,r3,9432
    c8c4:	1885883a 	add	r2,r3,r2
    c8c8:	10c00003 	ldbu	r3,0(r2)
    c8cc:	00800804 	movi	r2,32
    c8d0:	1909883a 	add	r4,r3,r4
    c8d4:	1125c83a 	sub	r18,r2,r4
    c8d8:	90000526 	beq	r18,zero,c8f0 <__umoddi3+0x94>
    c8dc:	8ca2983a 	sll	r17,r17,r18
    c8e0:	8108d83a 	srl	r4,r16,r4
    c8e4:	34a6983a 	sll	r19,r6,r18
    c8e8:	84a8983a 	sll	r20,r16,r18
    c8ec:	2478b03a 	or	fp,r4,r17
    c8f0:	982ed43a 	srli	r23,r19,16
    c8f4:	e009883a 	mov	r4,fp
    c8f8:	9dbfffcc 	andi	r22,r19,65535
    c8fc:	b80b883a 	mov	r5,r23
    c900:	0002c100 	call	2c10 <__umodsi3>
    c904:	e009883a 	mov	r4,fp
    c908:	b80b883a 	mov	r5,r23
    c90c:	102b883a 	mov	r21,r2
    c910:	0002bac0 	call	2bac <__udivsi3>
    c914:	a806943a 	slli	r3,r21,16
    c918:	a008d43a 	srli	r4,r20,16
    c91c:	b085383a 	mul	r2,r22,r2
    c920:	20c8b03a 	or	r4,r4,r3
    c924:	2080032e 	bgeu	r4,r2,c934 <__umoddi3+0xd8>
    c928:	24c9883a 	add	r4,r4,r19
    c92c:	24c00136 	bltu	r4,r19,c934 <__umoddi3+0xd8>
    c930:	20811036 	bltu	r4,r2,cd74 <__umoddi3+0x518>
    c934:	20abc83a 	sub	r21,r4,r2
    c938:	b80b883a 	mov	r5,r23
    c93c:	a809883a 	mov	r4,r21
    c940:	0002c100 	call	2c10 <__umodsi3>
    c944:	1023883a 	mov	r17,r2
    c948:	b80b883a 	mov	r5,r23
    c94c:	a809883a 	mov	r4,r21
    c950:	0002bac0 	call	2bac <__udivsi3>
    c954:	8822943a 	slli	r17,r17,16
    c958:	b085383a 	mul	r2,r22,r2
    c95c:	a0ffffcc 	andi	r3,r20,65535
    c960:	1c46b03a 	or	r3,r3,r17
    c964:	1880042e 	bgeu	r3,r2,c978 <__umoddi3+0x11c>
    c968:	1cc7883a 	add	r3,r3,r19
    c96c:	1cc00236 	bltu	r3,r19,c978 <__umoddi3+0x11c>
    c970:	1880012e 	bgeu	r3,r2,c978 <__umoddi3+0x11c>
    c974:	1cc7883a 	add	r3,r3,r19
    c978:	1885c83a 	sub	r2,r3,r2
    c97c:	1484d83a 	srl	r2,r2,r18
    c980:	0007883a 	mov	r3,zero
    c984:	00004f06 	br	cac4 <__umoddi3+0x268>
    c988:	29c04c36 	bltu	r5,r7,cabc <__umoddi3+0x260>
    c98c:	00bfffd4 	movui	r2,65535
    c990:	11c0582e 	bgeu	r2,r7,caf4 <__umoddi3+0x298>
    c994:	00804034 	movhi	r2,256
    c998:	10bfffc4 	addi	r2,r2,-1
    c99c:	11c0e736 	bltu	r2,r7,cd3c <__umoddi3+0x4e0>
    c9a0:	01000404 	movi	r4,16
    c9a4:	3904d83a 	srl	r2,r7,r4
    c9a8:	00c00074 	movhi	r3,1
    c9ac:	18c93604 	addi	r3,r3,9432
    c9b0:	1885883a 	add	r2,r3,r2
    c9b4:	14c00003 	ldbu	r19,0(r2)
    c9b8:	00c00804 	movi	r3,32
    c9bc:	9927883a 	add	r19,r19,r4
    c9c0:	1ce9c83a 	sub	r20,r3,r19
    c9c4:	a000581e 	bne	r20,zero,cb28 <__umoddi3+0x2cc>
    c9c8:	3c400136 	bltu	r7,r17,c9d0 <__umoddi3+0x174>
    c9cc:	8180eb36 	bltu	r16,r6,cd7c <__umoddi3+0x520>
    c9d0:	8185c83a 	sub	r2,r16,r6
    c9d4:	89e3c83a 	sub	r17,r17,r7
    c9d8:	8089803a 	cmpltu	r4,r16,r2
    c9dc:	8939c83a 	sub	fp,r17,r4
    c9e0:	e007883a 	mov	r3,fp
    c9e4:	00003706 	br	cac4 <__umoddi3+0x268>
    c9e8:	3000041e 	bne	r6,zero,c9fc <__umoddi3+0x1a0>
    c9ec:	000b883a 	mov	r5,zero
    c9f0:	01000044 	movi	r4,1
    c9f4:	0002bac0 	call	2bac <__udivsi3>
    c9f8:	1027883a 	mov	r19,r2
    c9fc:	00bfffd4 	movui	r2,65535
    ca00:	14c0402e 	bgeu	r2,r19,cb04 <__umoddi3+0x2a8>
    ca04:	00804034 	movhi	r2,256
    ca08:	10bfffc4 	addi	r2,r2,-1
    ca0c:	14c0cd36 	bltu	r2,r19,cd44 <__umoddi3+0x4e8>
    ca10:	00800404 	movi	r2,16
    ca14:	9886d83a 	srl	r3,r19,r2
    ca18:	01000074 	movhi	r4,1
    ca1c:	21093604 	addi	r4,r4,9432
    ca20:	20c7883a 	add	r3,r4,r3
    ca24:	18c00003 	ldbu	r3,0(r3)
    ca28:	1887883a 	add	r3,r3,r2
    ca2c:	00800804 	movi	r2,32
    ca30:	10e5c83a 	sub	r18,r2,r3
    ca34:	9000901e 	bne	r18,zero,cc78 <__umoddi3+0x41c>
    ca38:	982cd43a 	srli	r22,r19,16
    ca3c:	8ce3c83a 	sub	r17,r17,r19
    ca40:	9d7fffcc 	andi	r21,r19,65535
    ca44:	b00b883a 	mov	r5,r22
    ca48:	8809883a 	mov	r4,r17
    ca4c:	0002c100 	call	2c10 <__umodsi3>
    ca50:	8809883a 	mov	r4,r17
    ca54:	b00b883a 	mov	r5,r22
    ca58:	1021883a 	mov	r16,r2
    ca5c:	0002bac0 	call	2bac <__udivsi3>
    ca60:	8006943a 	slli	r3,r16,16
    ca64:	a008d43a 	srli	r4,r20,16
    ca68:	1545383a 	mul	r2,r2,r21
    ca6c:	20c8b03a 	or	r4,r4,r3
    ca70:	2080042e 	bgeu	r4,r2,ca84 <__umoddi3+0x228>
    ca74:	24c9883a 	add	r4,r4,r19
    ca78:	24c00236 	bltu	r4,r19,ca84 <__umoddi3+0x228>
    ca7c:	2080012e 	bgeu	r4,r2,ca84 <__umoddi3+0x228>
    ca80:	24c9883a 	add	r4,r4,r19
    ca84:	20a1c83a 	sub	r16,r4,r2
    ca88:	b00b883a 	mov	r5,r22
    ca8c:	8009883a 	mov	r4,r16
    ca90:	0002c100 	call	2c10 <__umodsi3>
    ca94:	1023883a 	mov	r17,r2
    ca98:	b00b883a 	mov	r5,r22
    ca9c:	8009883a 	mov	r4,r16
    caa0:	0002bac0 	call	2bac <__udivsi3>
    caa4:	8822943a 	slli	r17,r17,16
    caa8:	1545383a 	mul	r2,r2,r21
    caac:	a53fffcc 	andi	r20,r20,65535
    cab0:	a446b03a 	or	r3,r20,r17
    cab4:	18bfb02e 	bgeu	r3,r2,c978 <__alt_data_end+0xff00c978>
    cab8:	003fab06 	br	c968 <__alt_data_end+0xff00c968>
    cabc:	2005883a 	mov	r2,r4
    cac0:	2807883a 	mov	r3,r5
    cac4:	dfc00b17 	ldw	ra,44(sp)
    cac8:	df000a17 	ldw	fp,40(sp)
    cacc:	ddc00917 	ldw	r23,36(sp)
    cad0:	dd800817 	ldw	r22,32(sp)
    cad4:	dd400717 	ldw	r21,28(sp)
    cad8:	dd000617 	ldw	r20,24(sp)
    cadc:	dcc00517 	ldw	r19,20(sp)
    cae0:	dc800417 	ldw	r18,16(sp)
    cae4:	dc400317 	ldw	r17,12(sp)
    cae8:	dc000217 	ldw	r16,8(sp)
    caec:	dec00c04 	addi	sp,sp,48
    caf0:	f800283a 	ret
    caf4:	04c03fc4 	movi	r19,255
    caf8:	99c9803a 	cmpltu	r4,r19,r7
    cafc:	200890fa 	slli	r4,r4,3
    cb00:	003fa806 	br	c9a4 <__alt_data_end+0xff00c9a4>
    cb04:	00803fc4 	movi	r2,255
    cb08:	14c5803a 	cmpltu	r2,r2,r19
    cb0c:	100490fa 	slli	r2,r2,3
    cb10:	003fc006 	br	ca14 <__alt_data_end+0xff00ca14>
    cb14:	00804034 	movhi	r2,256
    cb18:	10bfffc4 	addi	r2,r2,-1
    cb1c:	11808b36 	bltu	r2,r6,cd4c <__umoddi3+0x4f0>
    cb20:	01000404 	movi	r4,16
    cb24:	003f6406 	br	c8b8 <__alt_data_end+0xff00c8b8>
    cb28:	34c4d83a 	srl	r2,r6,r19
    cb2c:	3d0e983a 	sll	r7,r7,r20
    cb30:	8cf8d83a 	srl	fp,r17,r19
    cb34:	8d10983a 	sll	r8,r17,r20
    cb38:	38aab03a 	or	r21,r7,r2
    cb3c:	a82cd43a 	srli	r22,r21,16
    cb40:	84e2d83a 	srl	r17,r16,r19
    cb44:	e009883a 	mov	r4,fp
    cb48:	b00b883a 	mov	r5,r22
    cb4c:	8a22b03a 	or	r17,r17,r8
    cb50:	3524983a 	sll	r18,r6,r20
    cb54:	0002c100 	call	2c10 <__umodsi3>
    cb58:	e009883a 	mov	r4,fp
    cb5c:	b00b883a 	mov	r5,r22
    cb60:	102f883a 	mov	r23,r2
    cb64:	0002bac0 	call	2bac <__udivsi3>
    cb68:	100d883a 	mov	r6,r2
    cb6c:	b808943a 	slli	r4,r23,16
    cb70:	aa3fffcc 	andi	r8,r21,65535
    cb74:	8804d43a 	srli	r2,r17,16
    cb78:	41af383a 	mul	r23,r8,r6
    cb7c:	8520983a 	sll	r16,r16,r20
    cb80:	1104b03a 	or	r2,r2,r4
    cb84:	15c0042e 	bgeu	r2,r23,cb98 <__umoddi3+0x33c>
    cb88:	1545883a 	add	r2,r2,r21
    cb8c:	30ffffc4 	addi	r3,r6,-1
    cb90:	1540742e 	bgeu	r2,r21,cd64 <__umoddi3+0x508>
    cb94:	180d883a 	mov	r6,r3
    cb98:	15efc83a 	sub	r23,r2,r23
    cb9c:	b00b883a 	mov	r5,r22
    cba0:	b809883a 	mov	r4,r23
    cba4:	d9800115 	stw	r6,4(sp)
    cba8:	da000015 	stw	r8,0(sp)
    cbac:	0002c100 	call	2c10 <__umodsi3>
    cbb0:	b00b883a 	mov	r5,r22
    cbb4:	b809883a 	mov	r4,r23
    cbb8:	1039883a 	mov	fp,r2
    cbbc:	0002bac0 	call	2bac <__udivsi3>
    cbc0:	da000017 	ldw	r8,0(sp)
    cbc4:	e038943a 	slli	fp,fp,16
    cbc8:	100b883a 	mov	r5,r2
    cbcc:	4089383a 	mul	r4,r8,r2
    cbd0:	8a3fffcc 	andi	r8,r17,65535
    cbd4:	4710b03a 	or	r8,r8,fp
    cbd8:	d9800117 	ldw	r6,4(sp)
    cbdc:	4100042e 	bgeu	r8,r4,cbf0 <__umoddi3+0x394>
    cbe0:	4551883a 	add	r8,r8,r21
    cbe4:	10bfffc4 	addi	r2,r2,-1
    cbe8:	45405a2e 	bgeu	r8,r21,cd54 <__umoddi3+0x4f8>
    cbec:	100b883a 	mov	r5,r2
    cbf0:	300c943a 	slli	r6,r6,16
    cbf4:	91ffffcc 	andi	r7,r18,65535
    cbf8:	9004d43a 	srli	r2,r18,16
    cbfc:	314cb03a 	or	r6,r6,r5
    cc00:	317fffcc 	andi	r5,r6,65535
    cc04:	300cd43a 	srli	r6,r6,16
    cc08:	29d3383a 	mul	r9,r5,r7
    cc0c:	288b383a 	mul	r5,r5,r2
    cc10:	31cf383a 	mul	r7,r6,r7
    cc14:	4806d43a 	srli	r3,r9,16
    cc18:	4111c83a 	sub	r8,r8,r4
    cc1c:	29cb883a 	add	r5,r5,r7
    cc20:	194b883a 	add	r5,r3,r5
    cc24:	3085383a 	mul	r2,r6,r2
    cc28:	29c0022e 	bgeu	r5,r7,cc34 <__umoddi3+0x3d8>
    cc2c:	00c00074 	movhi	r3,1
    cc30:	10c5883a 	add	r2,r2,r3
    cc34:	2808d43a 	srli	r4,r5,16
    cc38:	280a943a 	slli	r5,r5,16
    cc3c:	4a7fffcc 	andi	r9,r9,65535
    cc40:	2085883a 	add	r2,r4,r2
    cc44:	2a4b883a 	add	r5,r5,r9
    cc48:	40803636 	bltu	r8,r2,cd24 <__umoddi3+0x4c8>
    cc4c:	40804d26 	beq	r8,r2,cd84 <__umoddi3+0x528>
    cc50:	4089c83a 	sub	r4,r8,r2
    cc54:	280f883a 	mov	r7,r5
    cc58:	81cfc83a 	sub	r7,r16,r7
    cc5c:	81c7803a 	cmpltu	r3,r16,r7
    cc60:	20c7c83a 	sub	r3,r4,r3
    cc64:	1cc4983a 	sll	r2,r3,r19
    cc68:	3d0ed83a 	srl	r7,r7,r20
    cc6c:	1d06d83a 	srl	r3,r3,r20
    cc70:	11c4b03a 	or	r2,r2,r7
    cc74:	003f9306 	br	cac4 <__alt_data_end+0xff00cac4>
    cc78:	9ca6983a 	sll	r19,r19,r18
    cc7c:	88e8d83a 	srl	r20,r17,r3
    cc80:	80c4d83a 	srl	r2,r16,r3
    cc84:	982cd43a 	srli	r22,r19,16
    cc88:	8ca2983a 	sll	r17,r17,r18
    cc8c:	a009883a 	mov	r4,r20
    cc90:	b00b883a 	mov	r5,r22
    cc94:	1478b03a 	or	fp,r2,r17
    cc98:	0002c100 	call	2c10 <__umodsi3>
    cc9c:	a009883a 	mov	r4,r20
    cca0:	b00b883a 	mov	r5,r22
    cca4:	1023883a 	mov	r17,r2
    cca8:	0002bac0 	call	2bac <__udivsi3>
    ccac:	9d7fffcc 	andi	r21,r19,65535
    ccb0:	880a943a 	slli	r5,r17,16
    ccb4:	e008d43a 	srli	r4,fp,16
    ccb8:	a885383a 	mul	r2,r21,r2
    ccbc:	84a8983a 	sll	r20,r16,r18
    ccc0:	2148b03a 	or	r4,r4,r5
    ccc4:	2080042e 	bgeu	r4,r2,ccd8 <__umoddi3+0x47c>
    ccc8:	24c9883a 	add	r4,r4,r19
    cccc:	24c00236 	bltu	r4,r19,ccd8 <__umoddi3+0x47c>
    ccd0:	2080012e 	bgeu	r4,r2,ccd8 <__umoddi3+0x47c>
    ccd4:	24c9883a 	add	r4,r4,r19
    ccd8:	20a3c83a 	sub	r17,r4,r2
    ccdc:	b00b883a 	mov	r5,r22
    cce0:	8809883a 	mov	r4,r17
    cce4:	0002c100 	call	2c10 <__umodsi3>
    cce8:	102f883a 	mov	r23,r2
    ccec:	8809883a 	mov	r4,r17
    ccf0:	b00b883a 	mov	r5,r22
    ccf4:	0002bac0 	call	2bac <__udivsi3>
    ccf8:	b82e943a 	slli	r23,r23,16
    ccfc:	a885383a 	mul	r2,r21,r2
    cd00:	e13fffcc 	andi	r4,fp,65535
    cd04:	25c8b03a 	or	r4,r4,r23
    cd08:	2080042e 	bgeu	r4,r2,cd1c <__umoddi3+0x4c0>
    cd0c:	24c9883a 	add	r4,r4,r19
    cd10:	24c00236 	bltu	r4,r19,cd1c <__umoddi3+0x4c0>
    cd14:	2080012e 	bgeu	r4,r2,cd1c <__umoddi3+0x4c0>
    cd18:	24c9883a 	add	r4,r4,r19
    cd1c:	20a3c83a 	sub	r17,r4,r2
    cd20:	003f4806 	br	ca44 <__alt_data_end+0xff00ca44>
    cd24:	2c8fc83a 	sub	r7,r5,r18
    cd28:	1545c83a 	sub	r2,r2,r21
    cd2c:	29cb803a 	cmpltu	r5,r5,r7
    cd30:	1145c83a 	sub	r2,r2,r5
    cd34:	4089c83a 	sub	r4,r8,r2
    cd38:	003fc706 	br	cc58 <__alt_data_end+0xff00cc58>
    cd3c:	01000604 	movi	r4,24
    cd40:	003f1806 	br	c9a4 <__alt_data_end+0xff00c9a4>
    cd44:	00800604 	movi	r2,24
    cd48:	003f3206 	br	ca14 <__alt_data_end+0xff00ca14>
    cd4c:	01000604 	movi	r4,24
    cd50:	003ed906 	br	c8b8 <__alt_data_end+0xff00c8b8>
    cd54:	413fa52e 	bgeu	r8,r4,cbec <__alt_data_end+0xff00cbec>
    cd58:	297fff84 	addi	r5,r5,-2
    cd5c:	4551883a 	add	r8,r8,r21
    cd60:	003fa306 	br	cbf0 <__alt_data_end+0xff00cbf0>
    cd64:	15ff8b2e 	bgeu	r2,r23,cb94 <__alt_data_end+0xff00cb94>
    cd68:	31bfff84 	addi	r6,r6,-2
    cd6c:	1545883a 	add	r2,r2,r21
    cd70:	003f8906 	br	cb98 <__alt_data_end+0xff00cb98>
    cd74:	24c9883a 	add	r4,r4,r19
    cd78:	003eee06 	br	c934 <__alt_data_end+0xff00c934>
    cd7c:	8005883a 	mov	r2,r16
    cd80:	003f1706 	br	c9e0 <__alt_data_end+0xff00c9e0>
    cd84:	817fe736 	bltu	r16,r5,cd24 <__alt_data_end+0xff00cd24>
    cd88:	280f883a 	mov	r7,r5
    cd8c:	0009883a 	mov	r4,zero
    cd90:	003fb106 	br	cc58 <__alt_data_end+0xff00cc58>

0000cd94 <__adddf3>:
    cd94:	02c00434 	movhi	r11,16
    cd98:	5affffc4 	addi	r11,r11,-1
    cd9c:	2806d7fa 	srli	r3,r5,31
    cda0:	2ad4703a 	and	r10,r5,r11
    cda4:	3ad2703a 	and	r9,r7,r11
    cda8:	3804d53a 	srli	r2,r7,20
    cdac:	3018d77a 	srli	r12,r6,29
    cdb0:	280ad53a 	srli	r5,r5,20
    cdb4:	501490fa 	slli	r10,r10,3
    cdb8:	2010d77a 	srli	r8,r4,29
    cdbc:	481290fa 	slli	r9,r9,3
    cdc0:	380ed7fa 	srli	r7,r7,31
    cdc4:	defffb04 	addi	sp,sp,-20
    cdc8:	dc800215 	stw	r18,8(sp)
    cdcc:	dc400115 	stw	r17,4(sp)
    cdd0:	dc000015 	stw	r16,0(sp)
    cdd4:	dfc00415 	stw	ra,16(sp)
    cdd8:	dcc00315 	stw	r19,12(sp)
    cddc:	1c803fcc 	andi	r18,r3,255
    cde0:	2c01ffcc 	andi	r16,r5,2047
    cde4:	5210b03a 	or	r8,r10,r8
    cde8:	202290fa 	slli	r17,r4,3
    cdec:	1081ffcc 	andi	r2,r2,2047
    cdf0:	4b12b03a 	or	r9,r9,r12
    cdf4:	300c90fa 	slli	r6,r6,3
    cdf8:	91c07526 	beq	r18,r7,cfd0 <__adddf3+0x23c>
    cdfc:	8087c83a 	sub	r3,r16,r2
    ce00:	00c0ab0e 	bge	zero,r3,d0b0 <__adddf3+0x31c>
    ce04:	10002a1e 	bne	r2,zero,ceb0 <__adddf3+0x11c>
    ce08:	4984b03a 	or	r2,r9,r6
    ce0c:	1000961e 	bne	r2,zero,d068 <__adddf3+0x2d4>
    ce10:	888001cc 	andi	r2,r17,7
    ce14:	10000726 	beq	r2,zero,ce34 <__adddf3+0xa0>
    ce18:	888003cc 	andi	r2,r17,15
    ce1c:	00c00104 	movi	r3,4
    ce20:	10c00426 	beq	r2,r3,ce34 <__adddf3+0xa0>
    ce24:	88c7883a 	add	r3,r17,r3
    ce28:	1c63803a 	cmpltu	r17,r3,r17
    ce2c:	4451883a 	add	r8,r8,r17
    ce30:	1823883a 	mov	r17,r3
    ce34:	4080202c 	andhi	r2,r8,128
    ce38:	10005926 	beq	r2,zero,cfa0 <__adddf3+0x20c>
    ce3c:	84000044 	addi	r16,r16,1
    ce40:	0081ffc4 	movi	r2,2047
    ce44:	8080ba26 	beq	r16,r2,d130 <__adddf3+0x39c>
    ce48:	00bfe034 	movhi	r2,65408
    ce4c:	10bfffc4 	addi	r2,r2,-1
    ce50:	4090703a 	and	r8,r8,r2
    ce54:	4004977a 	slli	r2,r8,29
    ce58:	4010927a 	slli	r8,r8,9
    ce5c:	8822d0fa 	srli	r17,r17,3
    ce60:	8401ffcc 	andi	r16,r16,2047
    ce64:	4010d33a 	srli	r8,r8,12
    ce68:	9007883a 	mov	r3,r18
    ce6c:	1444b03a 	or	r2,r2,r17
    ce70:	8401ffcc 	andi	r16,r16,2047
    ce74:	8020953a 	slli	r16,r16,20
    ce78:	18c03fcc 	andi	r3,r3,255
    ce7c:	01000434 	movhi	r4,16
    ce80:	213fffc4 	addi	r4,r4,-1
    ce84:	180697fa 	slli	r3,r3,31
    ce88:	4110703a 	and	r8,r8,r4
    ce8c:	4410b03a 	or	r8,r8,r16
    ce90:	40c6b03a 	or	r3,r8,r3
    ce94:	dfc00417 	ldw	ra,16(sp)
    ce98:	dcc00317 	ldw	r19,12(sp)
    ce9c:	dc800217 	ldw	r18,8(sp)
    cea0:	dc400117 	ldw	r17,4(sp)
    cea4:	dc000017 	ldw	r16,0(sp)
    cea8:	dec00504 	addi	sp,sp,20
    ceac:	f800283a 	ret
    ceb0:	0081ffc4 	movi	r2,2047
    ceb4:	80bfd626 	beq	r16,r2,ce10 <__alt_data_end+0xff00ce10>
    ceb8:	4a402034 	orhi	r9,r9,128
    cebc:	00800e04 	movi	r2,56
    cec0:	10c09f16 	blt	r2,r3,d140 <__adddf3+0x3ac>
    cec4:	008007c4 	movi	r2,31
    cec8:	10c0c216 	blt	r2,r3,d1d4 <__adddf3+0x440>
    cecc:	00800804 	movi	r2,32
    ced0:	10c5c83a 	sub	r2,r2,r3
    ced4:	488a983a 	sll	r5,r9,r2
    ced8:	30c8d83a 	srl	r4,r6,r3
    cedc:	3084983a 	sll	r2,r6,r2
    cee0:	48c6d83a 	srl	r3,r9,r3
    cee4:	290cb03a 	or	r6,r5,r4
    cee8:	1004c03a 	cmpne	r2,r2,zero
    ceec:	308cb03a 	or	r6,r6,r2
    cef0:	898dc83a 	sub	r6,r17,r6
    cef4:	89a3803a 	cmpltu	r17,r17,r6
    cef8:	40d1c83a 	sub	r8,r8,r3
    cefc:	4451c83a 	sub	r8,r8,r17
    cf00:	3023883a 	mov	r17,r6
    cf04:	4080202c 	andhi	r2,r8,128
    cf08:	10002326 	beq	r2,zero,cf98 <__adddf3+0x204>
    cf0c:	04c02034 	movhi	r19,128
    cf10:	9cffffc4 	addi	r19,r19,-1
    cf14:	44e6703a 	and	r19,r8,r19
    cf18:	98007626 	beq	r19,zero,d0f4 <__adddf3+0x360>
    cf1c:	9809883a 	mov	r4,r19
    cf20:	000f3980 	call	f398 <__clzsi2>
    cf24:	10fffe04 	addi	r3,r2,-8
    cf28:	010007c4 	movi	r4,31
    cf2c:	20c07716 	blt	r4,r3,d10c <__adddf3+0x378>
    cf30:	00800804 	movi	r2,32
    cf34:	10c5c83a 	sub	r2,r2,r3
    cf38:	8884d83a 	srl	r2,r17,r2
    cf3c:	98d0983a 	sll	r8,r19,r3
    cf40:	88e2983a 	sll	r17,r17,r3
    cf44:	1204b03a 	or	r2,r2,r8
    cf48:	1c007416 	blt	r3,r16,d11c <__adddf3+0x388>
    cf4c:	1c21c83a 	sub	r16,r3,r16
    cf50:	82000044 	addi	r8,r16,1
    cf54:	00c007c4 	movi	r3,31
    cf58:	1a009116 	blt	r3,r8,d1a0 <__adddf3+0x40c>
    cf5c:	00c00804 	movi	r3,32
    cf60:	1a07c83a 	sub	r3,r3,r8
    cf64:	8a08d83a 	srl	r4,r17,r8
    cf68:	88e2983a 	sll	r17,r17,r3
    cf6c:	10c6983a 	sll	r3,r2,r3
    cf70:	1210d83a 	srl	r8,r2,r8
    cf74:	8804c03a 	cmpne	r2,r17,zero
    cf78:	1906b03a 	or	r3,r3,r4
    cf7c:	18a2b03a 	or	r17,r3,r2
    cf80:	0021883a 	mov	r16,zero
    cf84:	003fa206 	br	ce10 <__alt_data_end+0xff00ce10>
    cf88:	1890b03a 	or	r8,r3,r2
    cf8c:	40017d26 	beq	r8,zero,d584 <__adddf3+0x7f0>
    cf90:	1011883a 	mov	r8,r2
    cf94:	1823883a 	mov	r17,r3
    cf98:	888001cc 	andi	r2,r17,7
    cf9c:	103f9e1e 	bne	r2,zero,ce18 <__alt_data_end+0xff00ce18>
    cfa0:	4004977a 	slli	r2,r8,29
    cfa4:	8822d0fa 	srli	r17,r17,3
    cfa8:	4010d0fa 	srli	r8,r8,3
    cfac:	9007883a 	mov	r3,r18
    cfb0:	1444b03a 	or	r2,r2,r17
    cfb4:	0101ffc4 	movi	r4,2047
    cfb8:	81002426 	beq	r16,r4,d04c <__adddf3+0x2b8>
    cfbc:	8120703a 	and	r16,r16,r4
    cfc0:	01000434 	movhi	r4,16
    cfc4:	213fffc4 	addi	r4,r4,-1
    cfc8:	4110703a 	and	r8,r8,r4
    cfcc:	003fa806 	br	ce70 <__alt_data_end+0xff00ce70>
    cfd0:	8089c83a 	sub	r4,r16,r2
    cfd4:	01005e0e 	bge	zero,r4,d150 <__adddf3+0x3bc>
    cfd8:	10002b26 	beq	r2,zero,d088 <__adddf3+0x2f4>
    cfdc:	0081ffc4 	movi	r2,2047
    cfe0:	80bf8b26 	beq	r16,r2,ce10 <__alt_data_end+0xff00ce10>
    cfe4:	4a402034 	orhi	r9,r9,128
    cfe8:	00800e04 	movi	r2,56
    cfec:	1100a40e 	bge	r2,r4,d280 <__adddf3+0x4ec>
    cff0:	498cb03a 	or	r6,r9,r6
    cff4:	300ac03a 	cmpne	r5,r6,zero
    cff8:	0013883a 	mov	r9,zero
    cffc:	2c4b883a 	add	r5,r5,r17
    d000:	2c63803a 	cmpltu	r17,r5,r17
    d004:	4a11883a 	add	r8,r9,r8
    d008:	8a11883a 	add	r8,r17,r8
    d00c:	2823883a 	mov	r17,r5
    d010:	4080202c 	andhi	r2,r8,128
    d014:	103fe026 	beq	r2,zero,cf98 <__alt_data_end+0xff00cf98>
    d018:	84000044 	addi	r16,r16,1
    d01c:	0081ffc4 	movi	r2,2047
    d020:	8080d226 	beq	r16,r2,d36c <__adddf3+0x5d8>
    d024:	00bfe034 	movhi	r2,65408
    d028:	10bfffc4 	addi	r2,r2,-1
    d02c:	4090703a 	and	r8,r8,r2
    d030:	880ad07a 	srli	r5,r17,1
    d034:	400897fa 	slli	r4,r8,31
    d038:	88c0004c 	andi	r3,r17,1
    d03c:	28e2b03a 	or	r17,r5,r3
    d040:	4010d07a 	srli	r8,r8,1
    d044:	2462b03a 	or	r17,r4,r17
    d048:	003f7106 	br	ce10 <__alt_data_end+0xff00ce10>
    d04c:	4088b03a 	or	r4,r8,r2
    d050:	20014526 	beq	r4,zero,d568 <__adddf3+0x7d4>
    d054:	01000434 	movhi	r4,16
    d058:	42000234 	orhi	r8,r8,8
    d05c:	213fffc4 	addi	r4,r4,-1
    d060:	4110703a 	and	r8,r8,r4
    d064:	003f8206 	br	ce70 <__alt_data_end+0xff00ce70>
    d068:	18ffffc4 	addi	r3,r3,-1
    d06c:	1800491e 	bne	r3,zero,d194 <__adddf3+0x400>
    d070:	898bc83a 	sub	r5,r17,r6
    d074:	8963803a 	cmpltu	r17,r17,r5
    d078:	4251c83a 	sub	r8,r8,r9
    d07c:	4451c83a 	sub	r8,r8,r17
    d080:	2823883a 	mov	r17,r5
    d084:	003f9f06 	br	cf04 <__alt_data_end+0xff00cf04>
    d088:	4984b03a 	or	r2,r9,r6
    d08c:	103f6026 	beq	r2,zero,ce10 <__alt_data_end+0xff00ce10>
    d090:	213fffc4 	addi	r4,r4,-1
    d094:	2000931e 	bne	r4,zero,d2e4 <__adddf3+0x550>
    d098:	898d883a 	add	r6,r17,r6
    d09c:	3463803a 	cmpltu	r17,r6,r17
    d0a0:	4251883a 	add	r8,r8,r9
    d0a4:	8a11883a 	add	r8,r17,r8
    d0a8:	3023883a 	mov	r17,r6
    d0ac:	003fd806 	br	d010 <__alt_data_end+0xff00d010>
    d0b0:	1800541e 	bne	r3,zero,d204 <__adddf3+0x470>
    d0b4:	80800044 	addi	r2,r16,1
    d0b8:	1081ffcc 	andi	r2,r2,2047
    d0bc:	00c00044 	movi	r3,1
    d0c0:	1880a00e 	bge	r3,r2,d344 <__adddf3+0x5b0>
    d0c4:	8989c83a 	sub	r4,r17,r6
    d0c8:	8905803a 	cmpltu	r2,r17,r4
    d0cc:	4267c83a 	sub	r19,r8,r9
    d0d0:	98a7c83a 	sub	r19,r19,r2
    d0d4:	9880202c 	andhi	r2,r19,128
    d0d8:	10006326 	beq	r2,zero,d268 <__adddf3+0x4d4>
    d0dc:	3463c83a 	sub	r17,r6,r17
    d0e0:	4a07c83a 	sub	r3,r9,r8
    d0e4:	344d803a 	cmpltu	r6,r6,r17
    d0e8:	19a7c83a 	sub	r19,r3,r6
    d0ec:	3825883a 	mov	r18,r7
    d0f0:	983f8a1e 	bne	r19,zero,cf1c <__alt_data_end+0xff00cf1c>
    d0f4:	8809883a 	mov	r4,r17
    d0f8:	000f3980 	call	f398 <__clzsi2>
    d0fc:	10800804 	addi	r2,r2,32
    d100:	10fffe04 	addi	r3,r2,-8
    d104:	010007c4 	movi	r4,31
    d108:	20ff890e 	bge	r4,r3,cf30 <__alt_data_end+0xff00cf30>
    d10c:	10bff604 	addi	r2,r2,-40
    d110:	8884983a 	sll	r2,r17,r2
    d114:	0023883a 	mov	r17,zero
    d118:	1c3f8c0e 	bge	r3,r16,cf4c <__alt_data_end+0xff00cf4c>
    d11c:	023fe034 	movhi	r8,65408
    d120:	423fffc4 	addi	r8,r8,-1
    d124:	80e1c83a 	sub	r16,r16,r3
    d128:	1210703a 	and	r8,r2,r8
    d12c:	003f3806 	br	ce10 <__alt_data_end+0xff00ce10>
    d130:	9007883a 	mov	r3,r18
    d134:	0011883a 	mov	r8,zero
    d138:	0005883a 	mov	r2,zero
    d13c:	003f4c06 	br	ce70 <__alt_data_end+0xff00ce70>
    d140:	498cb03a 	or	r6,r9,r6
    d144:	300cc03a 	cmpne	r6,r6,zero
    d148:	0007883a 	mov	r3,zero
    d14c:	003f6806 	br	cef0 <__alt_data_end+0xff00cef0>
    d150:	20009c1e 	bne	r4,zero,d3c4 <__adddf3+0x630>
    d154:	80800044 	addi	r2,r16,1
    d158:	1141ffcc 	andi	r5,r2,2047
    d15c:	01000044 	movi	r4,1
    d160:	2140670e 	bge	r4,r5,d300 <__adddf3+0x56c>
    d164:	0101ffc4 	movi	r4,2047
    d168:	11007f26 	beq	r2,r4,d368 <__adddf3+0x5d4>
    d16c:	898d883a 	add	r6,r17,r6
    d170:	4247883a 	add	r3,r8,r9
    d174:	3451803a 	cmpltu	r8,r6,r17
    d178:	40d1883a 	add	r8,r8,r3
    d17c:	402297fa 	slli	r17,r8,31
    d180:	300cd07a 	srli	r6,r6,1
    d184:	4010d07a 	srli	r8,r8,1
    d188:	1021883a 	mov	r16,r2
    d18c:	89a2b03a 	or	r17,r17,r6
    d190:	003f1f06 	br	ce10 <__alt_data_end+0xff00ce10>
    d194:	0081ffc4 	movi	r2,2047
    d198:	80bf481e 	bne	r16,r2,cebc <__alt_data_end+0xff00cebc>
    d19c:	003f1c06 	br	ce10 <__alt_data_end+0xff00ce10>
    d1a0:	843ff844 	addi	r16,r16,-31
    d1a4:	01000804 	movi	r4,32
    d1a8:	1406d83a 	srl	r3,r2,r16
    d1ac:	41005026 	beq	r8,r4,d2f0 <__adddf3+0x55c>
    d1b0:	01001004 	movi	r4,64
    d1b4:	2211c83a 	sub	r8,r4,r8
    d1b8:	1204983a 	sll	r2,r2,r8
    d1bc:	88a2b03a 	or	r17,r17,r2
    d1c0:	8822c03a 	cmpne	r17,r17,zero
    d1c4:	1c62b03a 	or	r17,r3,r17
    d1c8:	0011883a 	mov	r8,zero
    d1cc:	0021883a 	mov	r16,zero
    d1d0:	003f7106 	br	cf98 <__alt_data_end+0xff00cf98>
    d1d4:	193ff804 	addi	r4,r3,-32
    d1d8:	00800804 	movi	r2,32
    d1dc:	4908d83a 	srl	r4,r9,r4
    d1e0:	18804526 	beq	r3,r2,d2f8 <__adddf3+0x564>
    d1e4:	00801004 	movi	r2,64
    d1e8:	10c5c83a 	sub	r2,r2,r3
    d1ec:	4886983a 	sll	r3,r9,r2
    d1f0:	198cb03a 	or	r6,r3,r6
    d1f4:	300cc03a 	cmpne	r6,r6,zero
    d1f8:	218cb03a 	or	r6,r4,r6
    d1fc:	0007883a 	mov	r3,zero
    d200:	003f3b06 	br	cef0 <__alt_data_end+0xff00cef0>
    d204:	80002a26 	beq	r16,zero,d2b0 <__adddf3+0x51c>
    d208:	0101ffc4 	movi	r4,2047
    d20c:	11006826 	beq	r2,r4,d3b0 <__adddf3+0x61c>
    d210:	00c7c83a 	sub	r3,zero,r3
    d214:	42002034 	orhi	r8,r8,128
    d218:	01000e04 	movi	r4,56
    d21c:	20c07c16 	blt	r4,r3,d410 <__adddf3+0x67c>
    d220:	010007c4 	movi	r4,31
    d224:	20c0da16 	blt	r4,r3,d590 <__adddf3+0x7fc>
    d228:	01000804 	movi	r4,32
    d22c:	20c9c83a 	sub	r4,r4,r3
    d230:	4114983a 	sll	r10,r8,r4
    d234:	88cad83a 	srl	r5,r17,r3
    d238:	8908983a 	sll	r4,r17,r4
    d23c:	40c6d83a 	srl	r3,r8,r3
    d240:	5162b03a 	or	r17,r10,r5
    d244:	2008c03a 	cmpne	r4,r4,zero
    d248:	8922b03a 	or	r17,r17,r4
    d24c:	3463c83a 	sub	r17,r6,r17
    d250:	48c7c83a 	sub	r3,r9,r3
    d254:	344d803a 	cmpltu	r6,r6,r17
    d258:	1991c83a 	sub	r8,r3,r6
    d25c:	1021883a 	mov	r16,r2
    d260:	3825883a 	mov	r18,r7
    d264:	003f2706 	br	cf04 <__alt_data_end+0xff00cf04>
    d268:	24d0b03a 	or	r8,r4,r19
    d26c:	40001b1e 	bne	r8,zero,d2dc <__adddf3+0x548>
    d270:	0005883a 	mov	r2,zero
    d274:	0007883a 	mov	r3,zero
    d278:	0021883a 	mov	r16,zero
    d27c:	003f4d06 	br	cfb4 <__alt_data_end+0xff00cfb4>
    d280:	008007c4 	movi	r2,31
    d284:	11003c16 	blt	r2,r4,d378 <__adddf3+0x5e4>
    d288:	00800804 	movi	r2,32
    d28c:	1105c83a 	sub	r2,r2,r4
    d290:	488e983a 	sll	r7,r9,r2
    d294:	310ad83a 	srl	r5,r6,r4
    d298:	3084983a 	sll	r2,r6,r2
    d29c:	4912d83a 	srl	r9,r9,r4
    d2a0:	394ab03a 	or	r5,r7,r5
    d2a4:	1004c03a 	cmpne	r2,r2,zero
    d2a8:	288ab03a 	or	r5,r5,r2
    d2ac:	003f5306 	br	cffc <__alt_data_end+0xff00cffc>
    d2b0:	4448b03a 	or	r4,r8,r17
    d2b4:	20003e26 	beq	r4,zero,d3b0 <__adddf3+0x61c>
    d2b8:	00c6303a 	nor	r3,zero,r3
    d2bc:	18003a1e 	bne	r3,zero,d3a8 <__adddf3+0x614>
    d2c0:	3463c83a 	sub	r17,r6,r17
    d2c4:	4a07c83a 	sub	r3,r9,r8
    d2c8:	344d803a 	cmpltu	r6,r6,r17
    d2cc:	1991c83a 	sub	r8,r3,r6
    d2d0:	1021883a 	mov	r16,r2
    d2d4:	3825883a 	mov	r18,r7
    d2d8:	003f0a06 	br	cf04 <__alt_data_end+0xff00cf04>
    d2dc:	2023883a 	mov	r17,r4
    d2e0:	003f0d06 	br	cf18 <__alt_data_end+0xff00cf18>
    d2e4:	0081ffc4 	movi	r2,2047
    d2e8:	80bf3f1e 	bne	r16,r2,cfe8 <__alt_data_end+0xff00cfe8>
    d2ec:	003ec806 	br	ce10 <__alt_data_end+0xff00ce10>
    d2f0:	0005883a 	mov	r2,zero
    d2f4:	003fb106 	br	d1bc <__alt_data_end+0xff00d1bc>
    d2f8:	0007883a 	mov	r3,zero
    d2fc:	003fbc06 	br	d1f0 <__alt_data_end+0xff00d1f0>
    d300:	4444b03a 	or	r2,r8,r17
    d304:	8000871e 	bne	r16,zero,d524 <__adddf3+0x790>
    d308:	1000ba26 	beq	r2,zero,d5f4 <__adddf3+0x860>
    d30c:	4984b03a 	or	r2,r9,r6
    d310:	103ebf26 	beq	r2,zero,ce10 <__alt_data_end+0xff00ce10>
    d314:	8985883a 	add	r2,r17,r6
    d318:	4247883a 	add	r3,r8,r9
    d31c:	1451803a 	cmpltu	r8,r2,r17
    d320:	40d1883a 	add	r8,r8,r3
    d324:	40c0202c 	andhi	r3,r8,128
    d328:	1023883a 	mov	r17,r2
    d32c:	183f1a26 	beq	r3,zero,cf98 <__alt_data_end+0xff00cf98>
    d330:	00bfe034 	movhi	r2,65408
    d334:	10bfffc4 	addi	r2,r2,-1
    d338:	2021883a 	mov	r16,r4
    d33c:	4090703a 	and	r8,r8,r2
    d340:	003eb306 	br	ce10 <__alt_data_end+0xff00ce10>
    d344:	4444b03a 	or	r2,r8,r17
    d348:	8000291e 	bne	r16,zero,d3f0 <__adddf3+0x65c>
    d34c:	10004b1e 	bne	r2,zero,d47c <__adddf3+0x6e8>
    d350:	4990b03a 	or	r8,r9,r6
    d354:	40008b26 	beq	r8,zero,d584 <__adddf3+0x7f0>
    d358:	4811883a 	mov	r8,r9
    d35c:	3023883a 	mov	r17,r6
    d360:	3825883a 	mov	r18,r7
    d364:	003eaa06 	br	ce10 <__alt_data_end+0xff00ce10>
    d368:	1021883a 	mov	r16,r2
    d36c:	0011883a 	mov	r8,zero
    d370:	0005883a 	mov	r2,zero
    d374:	003f0f06 	br	cfb4 <__alt_data_end+0xff00cfb4>
    d378:	217ff804 	addi	r5,r4,-32
    d37c:	00800804 	movi	r2,32
    d380:	494ad83a 	srl	r5,r9,r5
    d384:	20807d26 	beq	r4,r2,d57c <__adddf3+0x7e8>
    d388:	00801004 	movi	r2,64
    d38c:	1109c83a 	sub	r4,r2,r4
    d390:	4912983a 	sll	r9,r9,r4
    d394:	498cb03a 	or	r6,r9,r6
    d398:	300cc03a 	cmpne	r6,r6,zero
    d39c:	298ab03a 	or	r5,r5,r6
    d3a0:	0013883a 	mov	r9,zero
    d3a4:	003f1506 	br	cffc <__alt_data_end+0xff00cffc>
    d3a8:	0101ffc4 	movi	r4,2047
    d3ac:	113f9a1e 	bne	r2,r4,d218 <__alt_data_end+0xff00d218>
    d3b0:	4811883a 	mov	r8,r9
    d3b4:	3023883a 	mov	r17,r6
    d3b8:	1021883a 	mov	r16,r2
    d3bc:	3825883a 	mov	r18,r7
    d3c0:	003e9306 	br	ce10 <__alt_data_end+0xff00ce10>
    d3c4:	8000161e 	bne	r16,zero,d420 <__adddf3+0x68c>
    d3c8:	444ab03a 	or	r5,r8,r17
    d3cc:	28005126 	beq	r5,zero,d514 <__adddf3+0x780>
    d3d0:	0108303a 	nor	r4,zero,r4
    d3d4:	20004d1e 	bne	r4,zero,d50c <__adddf3+0x778>
    d3d8:	89a3883a 	add	r17,r17,r6
    d3dc:	4253883a 	add	r9,r8,r9
    d3e0:	898d803a 	cmpltu	r6,r17,r6
    d3e4:	3251883a 	add	r8,r6,r9
    d3e8:	1021883a 	mov	r16,r2
    d3ec:	003f0806 	br	d010 <__alt_data_end+0xff00d010>
    d3f0:	1000301e 	bne	r2,zero,d4b4 <__adddf3+0x720>
    d3f4:	4984b03a 	or	r2,r9,r6
    d3f8:	10007126 	beq	r2,zero,d5c0 <__adddf3+0x82c>
    d3fc:	4811883a 	mov	r8,r9
    d400:	3023883a 	mov	r17,r6
    d404:	3825883a 	mov	r18,r7
    d408:	0401ffc4 	movi	r16,2047
    d40c:	003e8006 	br	ce10 <__alt_data_end+0xff00ce10>
    d410:	4462b03a 	or	r17,r8,r17
    d414:	8822c03a 	cmpne	r17,r17,zero
    d418:	0007883a 	mov	r3,zero
    d41c:	003f8b06 	br	d24c <__alt_data_end+0xff00d24c>
    d420:	0141ffc4 	movi	r5,2047
    d424:	11403b26 	beq	r2,r5,d514 <__adddf3+0x780>
    d428:	0109c83a 	sub	r4,zero,r4
    d42c:	42002034 	orhi	r8,r8,128
    d430:	01400e04 	movi	r5,56
    d434:	29006716 	blt	r5,r4,d5d4 <__adddf3+0x840>
    d438:	014007c4 	movi	r5,31
    d43c:	29007016 	blt	r5,r4,d600 <__adddf3+0x86c>
    d440:	01400804 	movi	r5,32
    d444:	290bc83a 	sub	r5,r5,r4
    d448:	4154983a 	sll	r10,r8,r5
    d44c:	890ed83a 	srl	r7,r17,r4
    d450:	894a983a 	sll	r5,r17,r5
    d454:	4108d83a 	srl	r4,r8,r4
    d458:	51e2b03a 	or	r17,r10,r7
    d45c:	280ac03a 	cmpne	r5,r5,zero
    d460:	8962b03a 	or	r17,r17,r5
    d464:	89a3883a 	add	r17,r17,r6
    d468:	2253883a 	add	r9,r4,r9
    d46c:	898d803a 	cmpltu	r6,r17,r6
    d470:	3251883a 	add	r8,r6,r9
    d474:	1021883a 	mov	r16,r2
    d478:	003ee506 	br	d010 <__alt_data_end+0xff00d010>
    d47c:	4984b03a 	or	r2,r9,r6
    d480:	103e6326 	beq	r2,zero,ce10 <__alt_data_end+0xff00ce10>
    d484:	8987c83a 	sub	r3,r17,r6
    d488:	88c9803a 	cmpltu	r4,r17,r3
    d48c:	4245c83a 	sub	r2,r8,r9
    d490:	1105c83a 	sub	r2,r2,r4
    d494:	1100202c 	andhi	r4,r2,128
    d498:	203ebb26 	beq	r4,zero,cf88 <__alt_data_end+0xff00cf88>
    d49c:	3463c83a 	sub	r17,r6,r17
    d4a0:	4a07c83a 	sub	r3,r9,r8
    d4a4:	344d803a 	cmpltu	r6,r6,r17
    d4a8:	1991c83a 	sub	r8,r3,r6
    d4ac:	3825883a 	mov	r18,r7
    d4b0:	003e5706 	br	ce10 <__alt_data_end+0xff00ce10>
    d4b4:	4984b03a 	or	r2,r9,r6
    d4b8:	10002e26 	beq	r2,zero,d574 <__adddf3+0x7e0>
    d4bc:	4004d0fa 	srli	r2,r8,3
    d4c0:	8822d0fa 	srli	r17,r17,3
    d4c4:	4010977a 	slli	r8,r8,29
    d4c8:	10c0022c 	andhi	r3,r2,8
    d4cc:	4462b03a 	or	r17,r8,r17
    d4d0:	18000826 	beq	r3,zero,d4f4 <__adddf3+0x760>
    d4d4:	4808d0fa 	srli	r4,r9,3
    d4d8:	20c0022c 	andhi	r3,r4,8
    d4dc:	1800051e 	bne	r3,zero,d4f4 <__adddf3+0x760>
    d4e0:	300cd0fa 	srli	r6,r6,3
    d4e4:	4806977a 	slli	r3,r9,29
    d4e8:	2005883a 	mov	r2,r4
    d4ec:	3825883a 	mov	r18,r7
    d4f0:	19a2b03a 	or	r17,r3,r6
    d4f4:	8810d77a 	srli	r8,r17,29
    d4f8:	100490fa 	slli	r2,r2,3
    d4fc:	882290fa 	slli	r17,r17,3
    d500:	0401ffc4 	movi	r16,2047
    d504:	4090b03a 	or	r8,r8,r2
    d508:	003e4106 	br	ce10 <__alt_data_end+0xff00ce10>
    d50c:	0141ffc4 	movi	r5,2047
    d510:	117fc71e 	bne	r2,r5,d430 <__alt_data_end+0xff00d430>
    d514:	4811883a 	mov	r8,r9
    d518:	3023883a 	mov	r17,r6
    d51c:	1021883a 	mov	r16,r2
    d520:	003e3b06 	br	ce10 <__alt_data_end+0xff00ce10>
    d524:	10002f26 	beq	r2,zero,d5e4 <__adddf3+0x850>
    d528:	4984b03a 	or	r2,r9,r6
    d52c:	10001126 	beq	r2,zero,d574 <__adddf3+0x7e0>
    d530:	4004d0fa 	srli	r2,r8,3
    d534:	8822d0fa 	srli	r17,r17,3
    d538:	4010977a 	slli	r8,r8,29
    d53c:	10c0022c 	andhi	r3,r2,8
    d540:	4462b03a 	or	r17,r8,r17
    d544:	183feb26 	beq	r3,zero,d4f4 <__alt_data_end+0xff00d4f4>
    d548:	4808d0fa 	srli	r4,r9,3
    d54c:	20c0022c 	andhi	r3,r4,8
    d550:	183fe81e 	bne	r3,zero,d4f4 <__alt_data_end+0xff00d4f4>
    d554:	300cd0fa 	srli	r6,r6,3
    d558:	4806977a 	slli	r3,r9,29
    d55c:	2005883a 	mov	r2,r4
    d560:	19a2b03a 	or	r17,r3,r6
    d564:	003fe306 	br	d4f4 <__alt_data_end+0xff00d4f4>
    d568:	0011883a 	mov	r8,zero
    d56c:	0005883a 	mov	r2,zero
    d570:	003e3f06 	br	ce70 <__alt_data_end+0xff00ce70>
    d574:	0401ffc4 	movi	r16,2047
    d578:	003e2506 	br	ce10 <__alt_data_end+0xff00ce10>
    d57c:	0013883a 	mov	r9,zero
    d580:	003f8406 	br	d394 <__alt_data_end+0xff00d394>
    d584:	0005883a 	mov	r2,zero
    d588:	0007883a 	mov	r3,zero
    d58c:	003e8906 	br	cfb4 <__alt_data_end+0xff00cfb4>
    d590:	197ff804 	addi	r5,r3,-32
    d594:	01000804 	movi	r4,32
    d598:	414ad83a 	srl	r5,r8,r5
    d59c:	19002426 	beq	r3,r4,d630 <__adddf3+0x89c>
    d5a0:	01001004 	movi	r4,64
    d5a4:	20c7c83a 	sub	r3,r4,r3
    d5a8:	40c6983a 	sll	r3,r8,r3
    d5ac:	1c46b03a 	or	r3,r3,r17
    d5b0:	1806c03a 	cmpne	r3,r3,zero
    d5b4:	28e2b03a 	or	r17,r5,r3
    d5b8:	0007883a 	mov	r3,zero
    d5bc:	003f2306 	br	d24c <__alt_data_end+0xff00d24c>
    d5c0:	0007883a 	mov	r3,zero
    d5c4:	5811883a 	mov	r8,r11
    d5c8:	00bfffc4 	movi	r2,-1
    d5cc:	0401ffc4 	movi	r16,2047
    d5d0:	003e7806 	br	cfb4 <__alt_data_end+0xff00cfb4>
    d5d4:	4462b03a 	or	r17,r8,r17
    d5d8:	8822c03a 	cmpne	r17,r17,zero
    d5dc:	0009883a 	mov	r4,zero
    d5e0:	003fa006 	br	d464 <__alt_data_end+0xff00d464>
    d5e4:	4811883a 	mov	r8,r9
    d5e8:	3023883a 	mov	r17,r6
    d5ec:	0401ffc4 	movi	r16,2047
    d5f0:	003e0706 	br	ce10 <__alt_data_end+0xff00ce10>
    d5f4:	4811883a 	mov	r8,r9
    d5f8:	3023883a 	mov	r17,r6
    d5fc:	003e0406 	br	ce10 <__alt_data_end+0xff00ce10>
    d600:	21fff804 	addi	r7,r4,-32
    d604:	01400804 	movi	r5,32
    d608:	41ced83a 	srl	r7,r8,r7
    d60c:	21400a26 	beq	r4,r5,d638 <__adddf3+0x8a4>
    d610:	01401004 	movi	r5,64
    d614:	2909c83a 	sub	r4,r5,r4
    d618:	4108983a 	sll	r4,r8,r4
    d61c:	2448b03a 	or	r4,r4,r17
    d620:	2008c03a 	cmpne	r4,r4,zero
    d624:	3922b03a 	or	r17,r7,r4
    d628:	0009883a 	mov	r4,zero
    d62c:	003f8d06 	br	d464 <__alt_data_end+0xff00d464>
    d630:	0007883a 	mov	r3,zero
    d634:	003fdd06 	br	d5ac <__alt_data_end+0xff00d5ac>
    d638:	0009883a 	mov	r4,zero
    d63c:	003ff706 	br	d61c <__alt_data_end+0xff00d61c>

0000d640 <__divdf3>:
    d640:	defff204 	addi	sp,sp,-56
    d644:	dd400915 	stw	r21,36(sp)
    d648:	282ad53a 	srli	r21,r5,20
    d64c:	dd000815 	stw	r20,32(sp)
    d650:	2828d7fa 	srli	r20,r5,31
    d654:	dc000415 	stw	r16,16(sp)
    d658:	04000434 	movhi	r16,16
    d65c:	df000c15 	stw	fp,48(sp)
    d660:	843fffc4 	addi	r16,r16,-1
    d664:	dfc00d15 	stw	ra,52(sp)
    d668:	ddc00b15 	stw	r23,44(sp)
    d66c:	dd800a15 	stw	r22,40(sp)
    d670:	dcc00715 	stw	r19,28(sp)
    d674:	dc800615 	stw	r18,24(sp)
    d678:	dc400515 	stw	r17,20(sp)
    d67c:	ad41ffcc 	andi	r21,r21,2047
    d680:	2c20703a 	and	r16,r5,r16
    d684:	a7003fcc 	andi	fp,r20,255
    d688:	a8006126 	beq	r21,zero,d810 <__divdf3+0x1d0>
    d68c:	0081ffc4 	movi	r2,2047
    d690:	2025883a 	mov	r18,r4
    d694:	a8803726 	beq	r21,r2,d774 <__divdf3+0x134>
    d698:	80800434 	orhi	r2,r16,16
    d69c:	100490fa 	slli	r2,r2,3
    d6a0:	2020d77a 	srli	r16,r4,29
    d6a4:	202490fa 	slli	r18,r4,3
    d6a8:	ad7f0044 	addi	r21,r21,-1023
    d6ac:	80a0b03a 	or	r16,r16,r2
    d6b0:	0027883a 	mov	r19,zero
    d6b4:	0013883a 	mov	r9,zero
    d6b8:	3804d53a 	srli	r2,r7,20
    d6bc:	382cd7fa 	srli	r22,r7,31
    d6c0:	04400434 	movhi	r17,16
    d6c4:	8c7fffc4 	addi	r17,r17,-1
    d6c8:	1081ffcc 	andi	r2,r2,2047
    d6cc:	3011883a 	mov	r8,r6
    d6d0:	3c62703a 	and	r17,r7,r17
    d6d4:	b5c03fcc 	andi	r23,r22,255
    d6d8:	10006c26 	beq	r2,zero,d88c <__divdf3+0x24c>
    d6dc:	00c1ffc4 	movi	r3,2047
    d6e0:	10c06426 	beq	r2,r3,d874 <__divdf3+0x234>
    d6e4:	88c00434 	orhi	r3,r17,16
    d6e8:	180690fa 	slli	r3,r3,3
    d6ec:	3022d77a 	srli	r17,r6,29
    d6f0:	301090fa 	slli	r8,r6,3
    d6f4:	10bf0044 	addi	r2,r2,-1023
    d6f8:	88e2b03a 	or	r17,r17,r3
    d6fc:	000f883a 	mov	r7,zero
    d700:	a58cf03a 	xor	r6,r20,r22
    d704:	3cc8b03a 	or	r4,r7,r19
    d708:	a8abc83a 	sub	r21,r21,r2
    d70c:	008003c4 	movi	r2,15
    d710:	3007883a 	mov	r3,r6
    d714:	34c03fcc 	andi	r19,r6,255
    d718:	11009036 	bltu	r2,r4,d95c <__divdf3+0x31c>
    d71c:	200890ba 	slli	r4,r4,2
    d720:	00800074 	movhi	r2,1
    d724:	10b5cd04 	addi	r2,r2,-10444
    d728:	2089883a 	add	r4,r4,r2
    d72c:	20800017 	ldw	r2,0(r4)
    d730:	1000683a 	jmp	r2
    d734:	0000d95c 	xori	zero,zero,869
    d738:	0000d7ac 	andhi	zero,zero,862
    d73c:	0000d94c 	andi	zero,zero,869
    d740:	0000d7a0 	cmpeqi	zero,zero,862
    d744:	0000d94c 	andi	zero,zero,869
    d748:	0000d920 	cmpeqi	zero,zero,868
    d74c:	0000d94c 	andi	zero,zero,869
    d750:	0000d7a0 	cmpeqi	zero,zero,862
    d754:	0000d7ac 	andhi	zero,zero,862
    d758:	0000d7ac 	andhi	zero,zero,862
    d75c:	0000d920 	cmpeqi	zero,zero,868
    d760:	0000d7a0 	cmpeqi	zero,zero,862
    d764:	0000d790 	cmplti	zero,zero,862
    d768:	0000d790 	cmplti	zero,zero,862
    d76c:	0000d790 	cmplti	zero,zero,862
    d770:	0000dc40 	call	dc4 <i2c_short_read+0x44>
    d774:	2404b03a 	or	r2,r4,r16
    d778:	1000661e 	bne	r2,zero,d914 <__divdf3+0x2d4>
    d77c:	04c00204 	movi	r19,8
    d780:	0021883a 	mov	r16,zero
    d784:	0025883a 	mov	r18,zero
    d788:	02400084 	movi	r9,2
    d78c:	003fca06 	br	d6b8 <__alt_data_end+0xff00d6b8>
    d790:	8023883a 	mov	r17,r16
    d794:	9011883a 	mov	r8,r18
    d798:	e02f883a 	mov	r23,fp
    d79c:	480f883a 	mov	r7,r9
    d7a0:	00800084 	movi	r2,2
    d7a4:	3881311e 	bne	r7,r2,dc6c <__divdf3+0x62c>
    d7a8:	b827883a 	mov	r19,r23
    d7ac:	98c0004c 	andi	r3,r19,1
    d7b0:	0081ffc4 	movi	r2,2047
    d7b4:	000b883a 	mov	r5,zero
    d7b8:	0025883a 	mov	r18,zero
    d7bc:	1004953a 	slli	r2,r2,20
    d7c0:	18c03fcc 	andi	r3,r3,255
    d7c4:	04400434 	movhi	r17,16
    d7c8:	8c7fffc4 	addi	r17,r17,-1
    d7cc:	180697fa 	slli	r3,r3,31
    d7d0:	2c4a703a 	and	r5,r5,r17
    d7d4:	288ab03a 	or	r5,r5,r2
    d7d8:	28c6b03a 	or	r3,r5,r3
    d7dc:	9005883a 	mov	r2,r18
    d7e0:	dfc00d17 	ldw	ra,52(sp)
    d7e4:	df000c17 	ldw	fp,48(sp)
    d7e8:	ddc00b17 	ldw	r23,44(sp)
    d7ec:	dd800a17 	ldw	r22,40(sp)
    d7f0:	dd400917 	ldw	r21,36(sp)
    d7f4:	dd000817 	ldw	r20,32(sp)
    d7f8:	dcc00717 	ldw	r19,28(sp)
    d7fc:	dc800617 	ldw	r18,24(sp)
    d800:	dc400517 	ldw	r17,20(sp)
    d804:	dc000417 	ldw	r16,16(sp)
    d808:	dec00e04 	addi	sp,sp,56
    d80c:	f800283a 	ret
    d810:	2404b03a 	or	r2,r4,r16
    d814:	2027883a 	mov	r19,r4
    d818:	10003926 	beq	r2,zero,d900 <__divdf3+0x2c0>
    d81c:	80012e26 	beq	r16,zero,dcd8 <__divdf3+0x698>
    d820:	8009883a 	mov	r4,r16
    d824:	d9800315 	stw	r6,12(sp)
    d828:	d9c00215 	stw	r7,8(sp)
    d82c:	000f3980 	call	f398 <__clzsi2>
    d830:	d9800317 	ldw	r6,12(sp)
    d834:	d9c00217 	ldw	r7,8(sp)
    d838:	113ffd44 	addi	r4,r2,-11
    d83c:	00c00704 	movi	r3,28
    d840:	19012116 	blt	r3,r4,dcc8 <__divdf3+0x688>
    d844:	00c00744 	movi	r3,29
    d848:	147ffe04 	addi	r17,r2,-8
    d84c:	1907c83a 	sub	r3,r3,r4
    d850:	8460983a 	sll	r16,r16,r17
    d854:	98c6d83a 	srl	r3,r19,r3
    d858:	9c64983a 	sll	r18,r19,r17
    d85c:	1c20b03a 	or	r16,r3,r16
    d860:	1080fcc4 	addi	r2,r2,1011
    d864:	00abc83a 	sub	r21,zero,r2
    d868:	0027883a 	mov	r19,zero
    d86c:	0013883a 	mov	r9,zero
    d870:	003f9106 	br	d6b8 <__alt_data_end+0xff00d6b8>
    d874:	3446b03a 	or	r3,r6,r17
    d878:	18001f1e 	bne	r3,zero,d8f8 <__divdf3+0x2b8>
    d87c:	0023883a 	mov	r17,zero
    d880:	0011883a 	mov	r8,zero
    d884:	01c00084 	movi	r7,2
    d888:	003f9d06 	br	d700 <__alt_data_end+0xff00d700>
    d88c:	3446b03a 	or	r3,r6,r17
    d890:	18001526 	beq	r3,zero,d8e8 <__divdf3+0x2a8>
    d894:	88011b26 	beq	r17,zero,dd04 <__divdf3+0x6c4>
    d898:	8809883a 	mov	r4,r17
    d89c:	d9800315 	stw	r6,12(sp)
    d8a0:	da400115 	stw	r9,4(sp)
    d8a4:	000f3980 	call	f398 <__clzsi2>
    d8a8:	d9800317 	ldw	r6,12(sp)
    d8ac:	da400117 	ldw	r9,4(sp)
    d8b0:	113ffd44 	addi	r4,r2,-11
    d8b4:	00c00704 	movi	r3,28
    d8b8:	19010e16 	blt	r3,r4,dcf4 <__divdf3+0x6b4>
    d8bc:	00c00744 	movi	r3,29
    d8c0:	123ffe04 	addi	r8,r2,-8
    d8c4:	1907c83a 	sub	r3,r3,r4
    d8c8:	8a22983a 	sll	r17,r17,r8
    d8cc:	30c6d83a 	srl	r3,r6,r3
    d8d0:	3210983a 	sll	r8,r6,r8
    d8d4:	1c62b03a 	or	r17,r3,r17
    d8d8:	1080fcc4 	addi	r2,r2,1011
    d8dc:	0085c83a 	sub	r2,zero,r2
    d8e0:	000f883a 	mov	r7,zero
    d8e4:	003f8606 	br	d700 <__alt_data_end+0xff00d700>
    d8e8:	0023883a 	mov	r17,zero
    d8ec:	0011883a 	mov	r8,zero
    d8f0:	01c00044 	movi	r7,1
    d8f4:	003f8206 	br	d700 <__alt_data_end+0xff00d700>
    d8f8:	01c000c4 	movi	r7,3
    d8fc:	003f8006 	br	d700 <__alt_data_end+0xff00d700>
    d900:	04c00104 	movi	r19,4
    d904:	0021883a 	mov	r16,zero
    d908:	0025883a 	mov	r18,zero
    d90c:	02400044 	movi	r9,1
    d910:	003f6906 	br	d6b8 <__alt_data_end+0xff00d6b8>
    d914:	04c00304 	movi	r19,12
    d918:	024000c4 	movi	r9,3
    d91c:	003f6606 	br	d6b8 <__alt_data_end+0xff00d6b8>
    d920:	01400434 	movhi	r5,16
    d924:	0007883a 	mov	r3,zero
    d928:	297fffc4 	addi	r5,r5,-1
    d92c:	04bfffc4 	movi	r18,-1
    d930:	0081ffc4 	movi	r2,2047
    d934:	003fa106 	br	d7bc <__alt_data_end+0xff00d7bc>
    d938:	00c00044 	movi	r3,1
    d93c:	1887c83a 	sub	r3,r3,r2
    d940:	01000e04 	movi	r4,56
    d944:	20c1210e 	bge	r4,r3,ddcc <__divdf3+0x78c>
    d948:	98c0004c 	andi	r3,r19,1
    d94c:	0005883a 	mov	r2,zero
    d950:	000b883a 	mov	r5,zero
    d954:	0025883a 	mov	r18,zero
    d958:	003f9806 	br	d7bc <__alt_data_end+0xff00d7bc>
    d95c:	8c00fd36 	bltu	r17,r16,dd54 <__divdf3+0x714>
    d960:	8440fb26 	beq	r16,r17,dd50 <__divdf3+0x710>
    d964:	8007883a 	mov	r3,r16
    d968:	ad7fffc4 	addi	r21,r21,-1
    d96c:	0021883a 	mov	r16,zero
    d970:	4004d63a 	srli	r2,r8,24
    d974:	8822923a 	slli	r17,r17,8
    d978:	1809883a 	mov	r4,r3
    d97c:	402c923a 	slli	r22,r8,8
    d980:	88b8b03a 	or	fp,r17,r2
    d984:	e028d43a 	srli	r20,fp,16
    d988:	d8c00015 	stw	r3,0(sp)
    d98c:	e5ffffcc 	andi	r23,fp,65535
    d990:	a00b883a 	mov	r5,r20
    d994:	0002bac0 	call	2bac <__udivsi3>
    d998:	d8c00017 	ldw	r3,0(sp)
    d99c:	a00b883a 	mov	r5,r20
    d9a0:	d8800315 	stw	r2,12(sp)
    d9a4:	1809883a 	mov	r4,r3
    d9a8:	0002c100 	call	2c10 <__umodsi3>
    d9ac:	d9800317 	ldw	r6,12(sp)
    d9b0:	1006943a 	slli	r3,r2,16
    d9b4:	9004d43a 	srli	r2,r18,16
    d9b8:	b9a3383a 	mul	r17,r23,r6
    d9bc:	10c4b03a 	or	r2,r2,r3
    d9c0:	1440062e 	bgeu	r2,r17,d9dc <__divdf3+0x39c>
    d9c4:	1705883a 	add	r2,r2,fp
    d9c8:	30ffffc4 	addi	r3,r6,-1
    d9cc:	1700ee36 	bltu	r2,fp,dd88 <__divdf3+0x748>
    d9d0:	1440ed2e 	bgeu	r2,r17,dd88 <__divdf3+0x748>
    d9d4:	31bfff84 	addi	r6,r6,-2
    d9d8:	1705883a 	add	r2,r2,fp
    d9dc:	1463c83a 	sub	r17,r2,r17
    d9e0:	a00b883a 	mov	r5,r20
    d9e4:	8809883a 	mov	r4,r17
    d9e8:	d9800315 	stw	r6,12(sp)
    d9ec:	0002bac0 	call	2bac <__udivsi3>
    d9f0:	a00b883a 	mov	r5,r20
    d9f4:	8809883a 	mov	r4,r17
    d9f8:	d8800215 	stw	r2,8(sp)
    d9fc:	0002c100 	call	2c10 <__umodsi3>
    da00:	d9c00217 	ldw	r7,8(sp)
    da04:	1004943a 	slli	r2,r2,16
    da08:	94bfffcc 	andi	r18,r18,65535
    da0c:	b9d1383a 	mul	r8,r23,r7
    da10:	90a4b03a 	or	r18,r18,r2
    da14:	d9800317 	ldw	r6,12(sp)
    da18:	9200062e 	bgeu	r18,r8,da34 <__divdf3+0x3f4>
    da1c:	9725883a 	add	r18,r18,fp
    da20:	38bfffc4 	addi	r2,r7,-1
    da24:	9700d636 	bltu	r18,fp,dd80 <__divdf3+0x740>
    da28:	9200d52e 	bgeu	r18,r8,dd80 <__divdf3+0x740>
    da2c:	39ffff84 	addi	r7,r7,-2
    da30:	9725883a 	add	r18,r18,fp
    da34:	3004943a 	slli	r2,r6,16
    da38:	b012d43a 	srli	r9,r22,16
    da3c:	b1bfffcc 	andi	r6,r22,65535
    da40:	11e2b03a 	or	r17,r2,r7
    da44:	8806d43a 	srli	r3,r17,16
    da48:	893fffcc 	andi	r4,r17,65535
    da4c:	218b383a 	mul	r5,r4,r6
    da50:	30c5383a 	mul	r2,r6,r3
    da54:	2249383a 	mul	r4,r4,r9
    da58:	280ed43a 	srli	r7,r5,16
    da5c:	9225c83a 	sub	r18,r18,r8
    da60:	2089883a 	add	r4,r4,r2
    da64:	3909883a 	add	r4,r7,r4
    da68:	1a47383a 	mul	r3,r3,r9
    da6c:	2080022e 	bgeu	r4,r2,da78 <__divdf3+0x438>
    da70:	00800074 	movhi	r2,1
    da74:	1887883a 	add	r3,r3,r2
    da78:	2004d43a 	srli	r2,r4,16
    da7c:	2008943a 	slli	r4,r4,16
    da80:	297fffcc 	andi	r5,r5,65535
    da84:	10c7883a 	add	r3,r2,r3
    da88:	2149883a 	add	r4,r4,r5
    da8c:	90c0a536 	bltu	r18,r3,dd24 <__divdf3+0x6e4>
    da90:	90c0bf26 	beq	r18,r3,dd90 <__divdf3+0x750>
    da94:	90c7c83a 	sub	r3,r18,r3
    da98:	810fc83a 	sub	r7,r16,r4
    da9c:	81e5803a 	cmpltu	r18,r16,r7
    daa0:	1ca5c83a 	sub	r18,r3,r18
    daa4:	e480c126 	beq	fp,r18,ddac <__divdf3+0x76c>
    daa8:	a00b883a 	mov	r5,r20
    daac:	9009883a 	mov	r4,r18
    dab0:	d9800315 	stw	r6,12(sp)
    dab4:	d9c00215 	stw	r7,8(sp)
    dab8:	da400115 	stw	r9,4(sp)
    dabc:	0002bac0 	call	2bac <__udivsi3>
    dac0:	a00b883a 	mov	r5,r20
    dac4:	9009883a 	mov	r4,r18
    dac8:	d8800015 	stw	r2,0(sp)
    dacc:	0002c100 	call	2c10 <__umodsi3>
    dad0:	d9c00217 	ldw	r7,8(sp)
    dad4:	da000017 	ldw	r8,0(sp)
    dad8:	1006943a 	slli	r3,r2,16
    dadc:	3804d43a 	srli	r2,r7,16
    dae0:	ba21383a 	mul	r16,r23,r8
    dae4:	d9800317 	ldw	r6,12(sp)
    dae8:	10c4b03a 	or	r2,r2,r3
    daec:	da400117 	ldw	r9,4(sp)
    daf0:	1400062e 	bgeu	r2,r16,db0c <__divdf3+0x4cc>
    daf4:	1705883a 	add	r2,r2,fp
    daf8:	40ffffc4 	addi	r3,r8,-1
    dafc:	1700ad36 	bltu	r2,fp,ddb4 <__divdf3+0x774>
    db00:	1400ac2e 	bgeu	r2,r16,ddb4 <__divdf3+0x774>
    db04:	423fff84 	addi	r8,r8,-2
    db08:	1705883a 	add	r2,r2,fp
    db0c:	1421c83a 	sub	r16,r2,r16
    db10:	a00b883a 	mov	r5,r20
    db14:	8009883a 	mov	r4,r16
    db18:	d9800315 	stw	r6,12(sp)
    db1c:	d9c00215 	stw	r7,8(sp)
    db20:	da000015 	stw	r8,0(sp)
    db24:	da400115 	stw	r9,4(sp)
    db28:	0002bac0 	call	2bac <__udivsi3>
    db2c:	8009883a 	mov	r4,r16
    db30:	a00b883a 	mov	r5,r20
    db34:	1025883a 	mov	r18,r2
    db38:	0002c100 	call	2c10 <__umodsi3>
    db3c:	d9c00217 	ldw	r7,8(sp)
    db40:	1004943a 	slli	r2,r2,16
    db44:	bcaf383a 	mul	r23,r23,r18
    db48:	393fffcc 	andi	r4,r7,65535
    db4c:	2088b03a 	or	r4,r4,r2
    db50:	d9800317 	ldw	r6,12(sp)
    db54:	da000017 	ldw	r8,0(sp)
    db58:	da400117 	ldw	r9,4(sp)
    db5c:	25c0062e 	bgeu	r4,r23,db78 <__divdf3+0x538>
    db60:	2709883a 	add	r4,r4,fp
    db64:	90bfffc4 	addi	r2,r18,-1
    db68:	27009436 	bltu	r4,fp,ddbc <__divdf3+0x77c>
    db6c:	25c0932e 	bgeu	r4,r23,ddbc <__divdf3+0x77c>
    db70:	94bfff84 	addi	r18,r18,-2
    db74:	2709883a 	add	r4,r4,fp
    db78:	4004943a 	slli	r2,r8,16
    db7c:	25efc83a 	sub	r23,r4,r23
    db80:	1490b03a 	or	r8,r2,r18
    db84:	4008d43a 	srli	r4,r8,16
    db88:	40ffffcc 	andi	r3,r8,65535
    db8c:	30c5383a 	mul	r2,r6,r3
    db90:	1a47383a 	mul	r3,r3,r9
    db94:	310d383a 	mul	r6,r6,r4
    db98:	100ad43a 	srli	r5,r2,16
    db9c:	4913383a 	mul	r9,r9,r4
    dba0:	1987883a 	add	r3,r3,r6
    dba4:	28c7883a 	add	r3,r5,r3
    dba8:	1980022e 	bgeu	r3,r6,dbb4 <__divdf3+0x574>
    dbac:	01000074 	movhi	r4,1
    dbb0:	4913883a 	add	r9,r9,r4
    dbb4:	1808d43a 	srli	r4,r3,16
    dbb8:	1806943a 	slli	r3,r3,16
    dbbc:	10bfffcc 	andi	r2,r2,65535
    dbc0:	2253883a 	add	r9,r4,r9
    dbc4:	1887883a 	add	r3,r3,r2
    dbc8:	ba403836 	bltu	r23,r9,dcac <__divdf3+0x66c>
    dbcc:	ba403626 	beq	r23,r9,dca8 <__divdf3+0x668>
    dbd0:	42000054 	ori	r8,r8,1
    dbd4:	a880ffc4 	addi	r2,r21,1023
    dbd8:	00bf570e 	bge	zero,r2,d938 <__alt_data_end+0xff00d938>
    dbdc:	40c001cc 	andi	r3,r8,7
    dbe0:	18000726 	beq	r3,zero,dc00 <__divdf3+0x5c0>
    dbe4:	40c003cc 	andi	r3,r8,15
    dbe8:	01000104 	movi	r4,4
    dbec:	19000426 	beq	r3,r4,dc00 <__divdf3+0x5c0>
    dbf0:	4107883a 	add	r3,r8,r4
    dbf4:	1a11803a 	cmpltu	r8,r3,r8
    dbf8:	8a23883a 	add	r17,r17,r8
    dbfc:	1811883a 	mov	r8,r3
    dc00:	88c0402c 	andhi	r3,r17,256
    dc04:	18000426 	beq	r3,zero,dc18 <__divdf3+0x5d8>
    dc08:	00ffc034 	movhi	r3,65280
    dc0c:	18ffffc4 	addi	r3,r3,-1
    dc10:	a8810004 	addi	r2,r21,1024
    dc14:	88e2703a 	and	r17,r17,r3
    dc18:	00c1ff84 	movi	r3,2046
    dc1c:	18bee316 	blt	r3,r2,d7ac <__alt_data_end+0xff00d7ac>
    dc20:	8824977a 	slli	r18,r17,29
    dc24:	4010d0fa 	srli	r8,r8,3
    dc28:	8822927a 	slli	r17,r17,9
    dc2c:	1081ffcc 	andi	r2,r2,2047
    dc30:	9224b03a 	or	r18,r18,r8
    dc34:	880ad33a 	srli	r5,r17,12
    dc38:	98c0004c 	andi	r3,r19,1
    dc3c:	003edf06 	br	d7bc <__alt_data_end+0xff00d7bc>
    dc40:	8080022c 	andhi	r2,r16,8
    dc44:	10001226 	beq	r2,zero,dc90 <__divdf3+0x650>
    dc48:	8880022c 	andhi	r2,r17,8
    dc4c:	1000101e 	bne	r2,zero,dc90 <__divdf3+0x650>
    dc50:	00800434 	movhi	r2,16
    dc54:	89400234 	orhi	r5,r17,8
    dc58:	10bfffc4 	addi	r2,r2,-1
    dc5c:	b007883a 	mov	r3,r22
    dc60:	288a703a 	and	r5,r5,r2
    dc64:	4025883a 	mov	r18,r8
    dc68:	003f3106 	br	d930 <__alt_data_end+0xff00d930>
    dc6c:	008000c4 	movi	r2,3
    dc70:	3880a626 	beq	r7,r2,df0c <__divdf3+0x8cc>
    dc74:	00800044 	movi	r2,1
    dc78:	3880521e 	bne	r7,r2,ddc4 <__divdf3+0x784>
    dc7c:	b807883a 	mov	r3,r23
    dc80:	0005883a 	mov	r2,zero
    dc84:	000b883a 	mov	r5,zero
    dc88:	0025883a 	mov	r18,zero
    dc8c:	003ecb06 	br	d7bc <__alt_data_end+0xff00d7bc>
    dc90:	00800434 	movhi	r2,16
    dc94:	81400234 	orhi	r5,r16,8
    dc98:	10bfffc4 	addi	r2,r2,-1
    dc9c:	a007883a 	mov	r3,r20
    dca0:	288a703a 	and	r5,r5,r2
    dca4:	003f2206 	br	d930 <__alt_data_end+0xff00d930>
    dca8:	183fca26 	beq	r3,zero,dbd4 <__alt_data_end+0xff00dbd4>
    dcac:	e5ef883a 	add	r23,fp,r23
    dcb0:	40bfffc4 	addi	r2,r8,-1
    dcb4:	bf00392e 	bgeu	r23,fp,dd9c <__divdf3+0x75c>
    dcb8:	1011883a 	mov	r8,r2
    dcbc:	ba7fc41e 	bne	r23,r9,dbd0 <__alt_data_end+0xff00dbd0>
    dcc0:	b0ffc31e 	bne	r22,r3,dbd0 <__alt_data_end+0xff00dbd0>
    dcc4:	003fc306 	br	dbd4 <__alt_data_end+0xff00dbd4>
    dcc8:	143ff604 	addi	r16,r2,-40
    dccc:	9c20983a 	sll	r16,r19,r16
    dcd0:	0025883a 	mov	r18,zero
    dcd4:	003ee206 	br	d860 <__alt_data_end+0xff00d860>
    dcd8:	d9800315 	stw	r6,12(sp)
    dcdc:	d9c00215 	stw	r7,8(sp)
    dce0:	000f3980 	call	f398 <__clzsi2>
    dce4:	10800804 	addi	r2,r2,32
    dce8:	d9c00217 	ldw	r7,8(sp)
    dcec:	d9800317 	ldw	r6,12(sp)
    dcf0:	003ed106 	br	d838 <__alt_data_end+0xff00d838>
    dcf4:	147ff604 	addi	r17,r2,-40
    dcf8:	3462983a 	sll	r17,r6,r17
    dcfc:	0011883a 	mov	r8,zero
    dd00:	003ef506 	br	d8d8 <__alt_data_end+0xff00d8d8>
    dd04:	3009883a 	mov	r4,r6
    dd08:	d9800315 	stw	r6,12(sp)
    dd0c:	da400115 	stw	r9,4(sp)
    dd10:	000f3980 	call	f398 <__clzsi2>
    dd14:	10800804 	addi	r2,r2,32
    dd18:	da400117 	ldw	r9,4(sp)
    dd1c:	d9800317 	ldw	r6,12(sp)
    dd20:	003ee306 	br	d8b0 <__alt_data_end+0xff00d8b0>
    dd24:	85a1883a 	add	r16,r16,r22
    dd28:	8585803a 	cmpltu	r2,r16,r22
    dd2c:	1705883a 	add	r2,r2,fp
    dd30:	14a5883a 	add	r18,r2,r18
    dd34:	88bfffc4 	addi	r2,r17,-1
    dd38:	e4800c2e 	bgeu	fp,r18,dd6c <__divdf3+0x72c>
    dd3c:	90c03e36 	bltu	r18,r3,de38 <__divdf3+0x7f8>
    dd40:	1c806926 	beq	r3,r18,dee8 <__divdf3+0x8a8>
    dd44:	90c7c83a 	sub	r3,r18,r3
    dd48:	1023883a 	mov	r17,r2
    dd4c:	003f5206 	br	da98 <__alt_data_end+0xff00da98>
    dd50:	923f0436 	bltu	r18,r8,d964 <__alt_data_end+0xff00d964>
    dd54:	800897fa 	slli	r4,r16,31
    dd58:	9004d07a 	srli	r2,r18,1
    dd5c:	8006d07a 	srli	r3,r16,1
    dd60:	902097fa 	slli	r16,r18,31
    dd64:	20a4b03a 	or	r18,r4,r2
    dd68:	003f0106 	br	d970 <__alt_data_end+0xff00d970>
    dd6c:	e4bff51e 	bne	fp,r18,dd44 <__alt_data_end+0xff00dd44>
    dd70:	85bff22e 	bgeu	r16,r22,dd3c <__alt_data_end+0xff00dd3c>
    dd74:	e0c7c83a 	sub	r3,fp,r3
    dd78:	1023883a 	mov	r17,r2
    dd7c:	003f4606 	br	da98 <__alt_data_end+0xff00da98>
    dd80:	100f883a 	mov	r7,r2
    dd84:	003f2b06 	br	da34 <__alt_data_end+0xff00da34>
    dd88:	180d883a 	mov	r6,r3
    dd8c:	003f1306 	br	d9dc <__alt_data_end+0xff00d9dc>
    dd90:	813fe436 	bltu	r16,r4,dd24 <__alt_data_end+0xff00dd24>
    dd94:	0007883a 	mov	r3,zero
    dd98:	003f3f06 	br	da98 <__alt_data_end+0xff00da98>
    dd9c:	ba402c36 	bltu	r23,r9,de50 <__divdf3+0x810>
    dda0:	4dc05426 	beq	r9,r23,def4 <__divdf3+0x8b4>
    dda4:	1011883a 	mov	r8,r2
    dda8:	003f8906 	br	dbd0 <__alt_data_end+0xff00dbd0>
    ddac:	023fffc4 	movi	r8,-1
    ddb0:	003f8806 	br	dbd4 <__alt_data_end+0xff00dbd4>
    ddb4:	1811883a 	mov	r8,r3
    ddb8:	003f5406 	br	db0c <__alt_data_end+0xff00db0c>
    ddbc:	1025883a 	mov	r18,r2
    ddc0:	003f6d06 	br	db78 <__alt_data_end+0xff00db78>
    ddc4:	b827883a 	mov	r19,r23
    ddc8:	003f8206 	br	dbd4 <__alt_data_end+0xff00dbd4>
    ddcc:	010007c4 	movi	r4,31
    ddd0:	20c02616 	blt	r4,r3,de6c <__divdf3+0x82c>
    ddd4:	00800804 	movi	r2,32
    ddd8:	10c5c83a 	sub	r2,r2,r3
    dddc:	888a983a 	sll	r5,r17,r2
    dde0:	40c8d83a 	srl	r4,r8,r3
    dde4:	4084983a 	sll	r2,r8,r2
    dde8:	88e2d83a 	srl	r17,r17,r3
    ddec:	2906b03a 	or	r3,r5,r4
    ddf0:	1004c03a 	cmpne	r2,r2,zero
    ddf4:	1886b03a 	or	r3,r3,r2
    ddf8:	188001cc 	andi	r2,r3,7
    ddfc:	10000726 	beq	r2,zero,de1c <__divdf3+0x7dc>
    de00:	188003cc 	andi	r2,r3,15
    de04:	01000104 	movi	r4,4
    de08:	11000426 	beq	r2,r4,de1c <__divdf3+0x7dc>
    de0c:	1805883a 	mov	r2,r3
    de10:	10c00104 	addi	r3,r2,4
    de14:	1885803a 	cmpltu	r2,r3,r2
    de18:	88a3883a 	add	r17,r17,r2
    de1c:	8880202c 	andhi	r2,r17,128
    de20:	10002726 	beq	r2,zero,dec0 <__divdf3+0x880>
    de24:	98c0004c 	andi	r3,r19,1
    de28:	00800044 	movi	r2,1
    de2c:	000b883a 	mov	r5,zero
    de30:	0025883a 	mov	r18,zero
    de34:	003e6106 	br	d7bc <__alt_data_end+0xff00d7bc>
    de38:	85a1883a 	add	r16,r16,r22
    de3c:	8585803a 	cmpltu	r2,r16,r22
    de40:	1705883a 	add	r2,r2,fp
    de44:	14a5883a 	add	r18,r2,r18
    de48:	8c7fff84 	addi	r17,r17,-2
    de4c:	003f1106 	br	da94 <__alt_data_end+0xff00da94>
    de50:	b589883a 	add	r4,r22,r22
    de54:	25ad803a 	cmpltu	r22,r4,r22
    de58:	b739883a 	add	fp,r22,fp
    de5c:	40bfff84 	addi	r2,r8,-2
    de60:	bf2f883a 	add	r23,r23,fp
    de64:	202d883a 	mov	r22,r4
    de68:	003f9306 	br	dcb8 <__alt_data_end+0xff00dcb8>
    de6c:	013ff844 	movi	r4,-31
    de70:	2085c83a 	sub	r2,r4,r2
    de74:	8888d83a 	srl	r4,r17,r2
    de78:	00800804 	movi	r2,32
    de7c:	18802126 	beq	r3,r2,df04 <__divdf3+0x8c4>
    de80:	00801004 	movi	r2,64
    de84:	10c5c83a 	sub	r2,r2,r3
    de88:	8884983a 	sll	r2,r17,r2
    de8c:	1204b03a 	or	r2,r2,r8
    de90:	1004c03a 	cmpne	r2,r2,zero
    de94:	2084b03a 	or	r2,r4,r2
    de98:	144001cc 	andi	r17,r2,7
    de9c:	88000d1e 	bne	r17,zero,ded4 <__divdf3+0x894>
    dea0:	000b883a 	mov	r5,zero
    dea4:	1024d0fa 	srli	r18,r2,3
    dea8:	98c0004c 	andi	r3,r19,1
    deac:	0005883a 	mov	r2,zero
    deb0:	9464b03a 	or	r18,r18,r17
    deb4:	003e4106 	br	d7bc <__alt_data_end+0xff00d7bc>
    deb8:	1007883a 	mov	r3,r2
    debc:	0023883a 	mov	r17,zero
    dec0:	880a927a 	slli	r5,r17,9
    dec4:	1805883a 	mov	r2,r3
    dec8:	8822977a 	slli	r17,r17,29
    decc:	280ad33a 	srli	r5,r5,12
    ded0:	003ff406 	br	dea4 <__alt_data_end+0xff00dea4>
    ded4:	10c003cc 	andi	r3,r2,15
    ded8:	01000104 	movi	r4,4
    dedc:	193ff626 	beq	r3,r4,deb8 <__alt_data_end+0xff00deb8>
    dee0:	0023883a 	mov	r17,zero
    dee4:	003fca06 	br	de10 <__alt_data_end+0xff00de10>
    dee8:	813fd336 	bltu	r16,r4,de38 <__alt_data_end+0xff00de38>
    deec:	1023883a 	mov	r17,r2
    def0:	003fa806 	br	dd94 <__alt_data_end+0xff00dd94>
    def4:	b0ffd636 	bltu	r22,r3,de50 <__alt_data_end+0xff00de50>
    def8:	1011883a 	mov	r8,r2
    defc:	b0ff341e 	bne	r22,r3,dbd0 <__alt_data_end+0xff00dbd0>
    df00:	003f3406 	br	dbd4 <__alt_data_end+0xff00dbd4>
    df04:	0005883a 	mov	r2,zero
    df08:	003fe006 	br	de8c <__alt_data_end+0xff00de8c>
    df0c:	00800434 	movhi	r2,16
    df10:	89400234 	orhi	r5,r17,8
    df14:	10bfffc4 	addi	r2,r2,-1
    df18:	b807883a 	mov	r3,r23
    df1c:	288a703a 	and	r5,r5,r2
    df20:	4025883a 	mov	r18,r8
    df24:	003e8206 	br	d930 <__alt_data_end+0xff00d930>

0000df28 <__eqdf2>:
    df28:	2804d53a 	srli	r2,r5,20
    df2c:	3806d53a 	srli	r3,r7,20
    df30:	02000434 	movhi	r8,16
    df34:	423fffc4 	addi	r8,r8,-1
    df38:	1081ffcc 	andi	r2,r2,2047
    df3c:	0281ffc4 	movi	r10,2047
    df40:	2a12703a 	and	r9,r5,r8
    df44:	18c1ffcc 	andi	r3,r3,2047
    df48:	3a10703a 	and	r8,r7,r8
    df4c:	280ad7fa 	srli	r5,r5,31
    df50:	380ed7fa 	srli	r7,r7,31
    df54:	12801026 	beq	r2,r10,df98 <__eqdf2+0x70>
    df58:	0281ffc4 	movi	r10,2047
    df5c:	1a800a26 	beq	r3,r10,df88 <__eqdf2+0x60>
    df60:	10c00226 	beq	r2,r3,df6c <__eqdf2+0x44>
    df64:	00800044 	movi	r2,1
    df68:	f800283a 	ret
    df6c:	4a3ffd1e 	bne	r9,r8,df64 <__alt_data_end+0xff00df64>
    df70:	21bffc1e 	bne	r4,r6,df64 <__alt_data_end+0xff00df64>
    df74:	29c00c26 	beq	r5,r7,dfa8 <__eqdf2+0x80>
    df78:	103ffa1e 	bne	r2,zero,df64 <__alt_data_end+0xff00df64>
    df7c:	2244b03a 	or	r2,r4,r9
    df80:	1004c03a 	cmpne	r2,r2,zero
    df84:	f800283a 	ret
    df88:	3214b03a 	or	r10,r6,r8
    df8c:	503ff426 	beq	r10,zero,df60 <__alt_data_end+0xff00df60>
    df90:	00800044 	movi	r2,1
    df94:	f800283a 	ret
    df98:	2254b03a 	or	r10,r4,r9
    df9c:	503fee26 	beq	r10,zero,df58 <__alt_data_end+0xff00df58>
    dfa0:	00800044 	movi	r2,1
    dfa4:	f800283a 	ret
    dfa8:	0005883a 	mov	r2,zero
    dfac:	f800283a 	ret

0000dfb0 <__gedf2>:
    dfb0:	2804d53a 	srli	r2,r5,20
    dfb4:	3806d53a 	srli	r3,r7,20
    dfb8:	02000434 	movhi	r8,16
    dfbc:	423fffc4 	addi	r8,r8,-1
    dfc0:	1081ffcc 	andi	r2,r2,2047
    dfc4:	0241ffc4 	movi	r9,2047
    dfc8:	2a14703a 	and	r10,r5,r8
    dfcc:	18c1ffcc 	andi	r3,r3,2047
    dfd0:	3a10703a 	and	r8,r7,r8
    dfd4:	280ad7fa 	srli	r5,r5,31
    dfd8:	380ed7fa 	srli	r7,r7,31
    dfdc:	12401d26 	beq	r2,r9,e054 <__gedf2+0xa4>
    dfe0:	0241ffc4 	movi	r9,2047
    dfe4:	1a401226 	beq	r3,r9,e030 <__gedf2+0x80>
    dfe8:	1000081e 	bne	r2,zero,e00c <__gedf2+0x5c>
    dfec:	2296b03a 	or	r11,r4,r10
    dff0:	5813003a 	cmpeq	r9,r11,zero
    dff4:	1800091e 	bne	r3,zero,e01c <__gedf2+0x6c>
    dff8:	3218b03a 	or	r12,r6,r8
    dffc:	6000071e 	bne	r12,zero,e01c <__gedf2+0x6c>
    e000:	0005883a 	mov	r2,zero
    e004:	5800101e 	bne	r11,zero,e048 <__gedf2+0x98>
    e008:	f800283a 	ret
    e00c:	18000c1e 	bne	r3,zero,e040 <__gedf2+0x90>
    e010:	3212b03a 	or	r9,r6,r8
    e014:	48000c26 	beq	r9,zero,e048 <__gedf2+0x98>
    e018:	0013883a 	mov	r9,zero
    e01c:	39c03fcc 	andi	r7,r7,255
    e020:	48000826 	beq	r9,zero,e044 <__gedf2+0x94>
    e024:	38000926 	beq	r7,zero,e04c <__gedf2+0x9c>
    e028:	00800044 	movi	r2,1
    e02c:	f800283a 	ret
    e030:	3212b03a 	or	r9,r6,r8
    e034:	483fec26 	beq	r9,zero,dfe8 <__alt_data_end+0xff00dfe8>
    e038:	00bfff84 	movi	r2,-2
    e03c:	f800283a 	ret
    e040:	39c03fcc 	andi	r7,r7,255
    e044:	29c00626 	beq	r5,r7,e060 <__gedf2+0xb0>
    e048:	283ff726 	beq	r5,zero,e028 <__alt_data_end+0xff00e028>
    e04c:	00bfffc4 	movi	r2,-1
    e050:	f800283a 	ret
    e054:	2292b03a 	or	r9,r4,r10
    e058:	483fe126 	beq	r9,zero,dfe0 <__alt_data_end+0xff00dfe0>
    e05c:	003ff606 	br	e038 <__alt_data_end+0xff00e038>
    e060:	18bff916 	blt	r3,r2,e048 <__alt_data_end+0xff00e048>
    e064:	10c00316 	blt	r2,r3,e074 <__gedf2+0xc4>
    e068:	42bff736 	bltu	r8,r10,e048 <__alt_data_end+0xff00e048>
    e06c:	52000326 	beq	r10,r8,e07c <__gedf2+0xcc>
    e070:	5200042e 	bgeu	r10,r8,e084 <__gedf2+0xd4>
    e074:	283fec1e 	bne	r5,zero,e028 <__alt_data_end+0xff00e028>
    e078:	003ff406 	br	e04c <__alt_data_end+0xff00e04c>
    e07c:	313ff236 	bltu	r6,r4,e048 <__alt_data_end+0xff00e048>
    e080:	21bffc36 	bltu	r4,r6,e074 <__alt_data_end+0xff00e074>
    e084:	0005883a 	mov	r2,zero
    e088:	f800283a 	ret

0000e08c <__ledf2>:
    e08c:	2804d53a 	srli	r2,r5,20
    e090:	3810d53a 	srli	r8,r7,20
    e094:	00c00434 	movhi	r3,16
    e098:	18ffffc4 	addi	r3,r3,-1
    e09c:	1081ffcc 	andi	r2,r2,2047
    e0a0:	0241ffc4 	movi	r9,2047
    e0a4:	28d4703a 	and	r10,r5,r3
    e0a8:	4201ffcc 	andi	r8,r8,2047
    e0ac:	38c6703a 	and	r3,r7,r3
    e0b0:	280ad7fa 	srli	r5,r5,31
    e0b4:	380ed7fa 	srli	r7,r7,31
    e0b8:	12401f26 	beq	r2,r9,e138 <__ledf2+0xac>
    e0bc:	0241ffc4 	movi	r9,2047
    e0c0:	42401426 	beq	r8,r9,e114 <__ledf2+0x88>
    e0c4:	1000091e 	bne	r2,zero,e0ec <__ledf2+0x60>
    e0c8:	2296b03a 	or	r11,r4,r10
    e0cc:	5813003a 	cmpeq	r9,r11,zero
    e0d0:	29403fcc 	andi	r5,r5,255
    e0d4:	40000a1e 	bne	r8,zero,e100 <__ledf2+0x74>
    e0d8:	30d8b03a 	or	r12,r6,r3
    e0dc:	6000081e 	bne	r12,zero,e100 <__ledf2+0x74>
    e0e0:	0005883a 	mov	r2,zero
    e0e4:	5800111e 	bne	r11,zero,e12c <__ledf2+0xa0>
    e0e8:	f800283a 	ret
    e0ec:	29403fcc 	andi	r5,r5,255
    e0f0:	40000c1e 	bne	r8,zero,e124 <__ledf2+0x98>
    e0f4:	30d2b03a 	or	r9,r6,r3
    e0f8:	48000c26 	beq	r9,zero,e12c <__ledf2+0xa0>
    e0fc:	0013883a 	mov	r9,zero
    e100:	39c03fcc 	andi	r7,r7,255
    e104:	48000826 	beq	r9,zero,e128 <__ledf2+0x9c>
    e108:	38001126 	beq	r7,zero,e150 <__ledf2+0xc4>
    e10c:	00800044 	movi	r2,1
    e110:	f800283a 	ret
    e114:	30d2b03a 	or	r9,r6,r3
    e118:	483fea26 	beq	r9,zero,e0c4 <__alt_data_end+0xff00e0c4>
    e11c:	00800084 	movi	r2,2
    e120:	f800283a 	ret
    e124:	39c03fcc 	andi	r7,r7,255
    e128:	39400726 	beq	r7,r5,e148 <__ledf2+0xbc>
    e12c:	2800081e 	bne	r5,zero,e150 <__ledf2+0xc4>
    e130:	00800044 	movi	r2,1
    e134:	f800283a 	ret
    e138:	2292b03a 	or	r9,r4,r10
    e13c:	483fdf26 	beq	r9,zero,e0bc <__alt_data_end+0xff00e0bc>
    e140:	00800084 	movi	r2,2
    e144:	f800283a 	ret
    e148:	4080030e 	bge	r8,r2,e158 <__ledf2+0xcc>
    e14c:	383fef26 	beq	r7,zero,e10c <__alt_data_end+0xff00e10c>
    e150:	00bfffc4 	movi	r2,-1
    e154:	f800283a 	ret
    e158:	123feb16 	blt	r2,r8,e108 <__alt_data_end+0xff00e108>
    e15c:	1abff336 	bltu	r3,r10,e12c <__alt_data_end+0xff00e12c>
    e160:	50c00326 	beq	r10,r3,e170 <__ledf2+0xe4>
    e164:	50c0042e 	bgeu	r10,r3,e178 <__ledf2+0xec>
    e168:	283fe81e 	bne	r5,zero,e10c <__alt_data_end+0xff00e10c>
    e16c:	003ff806 	br	e150 <__alt_data_end+0xff00e150>
    e170:	313fee36 	bltu	r6,r4,e12c <__alt_data_end+0xff00e12c>
    e174:	21bffc36 	bltu	r4,r6,e168 <__alt_data_end+0xff00e168>
    e178:	0005883a 	mov	r2,zero
    e17c:	f800283a 	ret

0000e180 <__muldf3>:
    e180:	defff304 	addi	sp,sp,-52
    e184:	2804d53a 	srli	r2,r5,20
    e188:	dd800915 	stw	r22,36(sp)
    e18c:	282cd7fa 	srli	r22,r5,31
    e190:	dc000315 	stw	r16,12(sp)
    e194:	04000434 	movhi	r16,16
    e198:	dd400815 	stw	r21,32(sp)
    e19c:	dc800515 	stw	r18,20(sp)
    e1a0:	843fffc4 	addi	r16,r16,-1
    e1a4:	dfc00c15 	stw	ra,48(sp)
    e1a8:	df000b15 	stw	fp,44(sp)
    e1ac:	ddc00a15 	stw	r23,40(sp)
    e1b0:	dd000715 	stw	r20,28(sp)
    e1b4:	dcc00615 	stw	r19,24(sp)
    e1b8:	dc400415 	stw	r17,16(sp)
    e1bc:	1481ffcc 	andi	r18,r2,2047
    e1c0:	2c20703a 	and	r16,r5,r16
    e1c4:	b02b883a 	mov	r21,r22
    e1c8:	b2403fcc 	andi	r9,r22,255
    e1cc:	90006026 	beq	r18,zero,e350 <__muldf3+0x1d0>
    e1d0:	0081ffc4 	movi	r2,2047
    e1d4:	2029883a 	mov	r20,r4
    e1d8:	90803626 	beq	r18,r2,e2b4 <__muldf3+0x134>
    e1dc:	80800434 	orhi	r2,r16,16
    e1e0:	100490fa 	slli	r2,r2,3
    e1e4:	2020d77a 	srli	r16,r4,29
    e1e8:	202890fa 	slli	r20,r4,3
    e1ec:	94bf0044 	addi	r18,r18,-1023
    e1f0:	80a0b03a 	or	r16,r16,r2
    e1f4:	0027883a 	mov	r19,zero
    e1f8:	0039883a 	mov	fp,zero
    e1fc:	3804d53a 	srli	r2,r7,20
    e200:	382ed7fa 	srli	r23,r7,31
    e204:	04400434 	movhi	r17,16
    e208:	8c7fffc4 	addi	r17,r17,-1
    e20c:	1081ffcc 	andi	r2,r2,2047
    e210:	3011883a 	mov	r8,r6
    e214:	3c62703a 	and	r17,r7,r17
    e218:	ba803fcc 	andi	r10,r23,255
    e21c:	10006d26 	beq	r2,zero,e3d4 <__muldf3+0x254>
    e220:	00c1ffc4 	movi	r3,2047
    e224:	10c06526 	beq	r2,r3,e3bc <__muldf3+0x23c>
    e228:	88c00434 	orhi	r3,r17,16
    e22c:	180690fa 	slli	r3,r3,3
    e230:	3022d77a 	srli	r17,r6,29
    e234:	301090fa 	slli	r8,r6,3
    e238:	10bf0044 	addi	r2,r2,-1023
    e23c:	88e2b03a 	or	r17,r17,r3
    e240:	000b883a 	mov	r5,zero
    e244:	9085883a 	add	r2,r18,r2
    e248:	2cc8b03a 	or	r4,r5,r19
    e24c:	00c003c4 	movi	r3,15
    e250:	bdacf03a 	xor	r22,r23,r22
    e254:	12c00044 	addi	r11,r2,1
    e258:	19009936 	bltu	r3,r4,e4c0 <__muldf3+0x340>
    e25c:	200890ba 	slli	r4,r4,2
    e260:	00c00074 	movhi	r3,1
    e264:	18f89d04 	addi	r3,r3,-7564
    e268:	20c9883a 	add	r4,r4,r3
    e26c:	20c00017 	ldw	r3,0(r4)
    e270:	1800683a 	jmp	r3
    e274:	0000e4c0 	call	e4c <i2c_short_write+0x2c>
    e278:	0000e2d4 	movui	zero,907
    e27c:	0000e2d4 	movui	zero,907
    e280:	0000e2d0 	cmplti	zero,zero,907
    e284:	0000e49c 	xori	zero,zero,914
    e288:	0000e49c 	xori	zero,zero,914
    e28c:	0000e484 	movi	zero,914
    e290:	0000e2d0 	cmplti	zero,zero,907
    e294:	0000e49c 	xori	zero,zero,914
    e298:	0000e484 	movi	zero,914
    e29c:	0000e49c 	xori	zero,zero,914
    e2a0:	0000e2d0 	cmplti	zero,zero,907
    e2a4:	0000e4ac 	andhi	zero,zero,914
    e2a8:	0000e4ac 	andhi	zero,zero,914
    e2ac:	0000e4ac 	andhi	zero,zero,914
    e2b0:	0000e6c8 	cmpgei	zero,zero,923
    e2b4:	2404b03a 	or	r2,r4,r16
    e2b8:	10006f1e 	bne	r2,zero,e478 <__muldf3+0x2f8>
    e2bc:	04c00204 	movi	r19,8
    e2c0:	0021883a 	mov	r16,zero
    e2c4:	0029883a 	mov	r20,zero
    e2c8:	07000084 	movi	fp,2
    e2cc:	003fcb06 	br	e1fc <__alt_data_end+0xff00e1fc>
    e2d0:	502d883a 	mov	r22,r10
    e2d4:	00800084 	movi	r2,2
    e2d8:	28805726 	beq	r5,r2,e438 <__muldf3+0x2b8>
    e2dc:	008000c4 	movi	r2,3
    e2e0:	28816626 	beq	r5,r2,e87c <__muldf3+0x6fc>
    e2e4:	00800044 	movi	r2,1
    e2e8:	2881411e 	bne	r5,r2,e7f0 <__muldf3+0x670>
    e2ec:	b02b883a 	mov	r21,r22
    e2f0:	0005883a 	mov	r2,zero
    e2f4:	000b883a 	mov	r5,zero
    e2f8:	0029883a 	mov	r20,zero
    e2fc:	1004953a 	slli	r2,r2,20
    e300:	a8c03fcc 	andi	r3,r21,255
    e304:	04400434 	movhi	r17,16
    e308:	8c7fffc4 	addi	r17,r17,-1
    e30c:	180697fa 	slli	r3,r3,31
    e310:	2c4a703a 	and	r5,r5,r17
    e314:	288ab03a 	or	r5,r5,r2
    e318:	28c6b03a 	or	r3,r5,r3
    e31c:	a005883a 	mov	r2,r20
    e320:	dfc00c17 	ldw	ra,48(sp)
    e324:	df000b17 	ldw	fp,44(sp)
    e328:	ddc00a17 	ldw	r23,40(sp)
    e32c:	dd800917 	ldw	r22,36(sp)
    e330:	dd400817 	ldw	r21,32(sp)
    e334:	dd000717 	ldw	r20,28(sp)
    e338:	dcc00617 	ldw	r19,24(sp)
    e33c:	dc800517 	ldw	r18,20(sp)
    e340:	dc400417 	ldw	r17,16(sp)
    e344:	dc000317 	ldw	r16,12(sp)
    e348:	dec00d04 	addi	sp,sp,52
    e34c:	f800283a 	ret
    e350:	2404b03a 	or	r2,r4,r16
    e354:	2027883a 	mov	r19,r4
    e358:	10004226 	beq	r2,zero,e464 <__muldf3+0x2e4>
    e35c:	8000fc26 	beq	r16,zero,e750 <__muldf3+0x5d0>
    e360:	8009883a 	mov	r4,r16
    e364:	d9800215 	stw	r6,8(sp)
    e368:	d9c00015 	stw	r7,0(sp)
    e36c:	da400115 	stw	r9,4(sp)
    e370:	000f3980 	call	f398 <__clzsi2>
    e374:	d9800217 	ldw	r6,8(sp)
    e378:	d9c00017 	ldw	r7,0(sp)
    e37c:	da400117 	ldw	r9,4(sp)
    e380:	113ffd44 	addi	r4,r2,-11
    e384:	00c00704 	movi	r3,28
    e388:	1900ed16 	blt	r3,r4,e740 <__muldf3+0x5c0>
    e38c:	00c00744 	movi	r3,29
    e390:	147ffe04 	addi	r17,r2,-8
    e394:	1907c83a 	sub	r3,r3,r4
    e398:	8460983a 	sll	r16,r16,r17
    e39c:	98c6d83a 	srl	r3,r19,r3
    e3a0:	9c68983a 	sll	r20,r19,r17
    e3a4:	1c20b03a 	or	r16,r3,r16
    e3a8:	1080fcc4 	addi	r2,r2,1011
    e3ac:	00a5c83a 	sub	r18,zero,r2
    e3b0:	0027883a 	mov	r19,zero
    e3b4:	0039883a 	mov	fp,zero
    e3b8:	003f9006 	br	e1fc <__alt_data_end+0xff00e1fc>
    e3bc:	3446b03a 	or	r3,r6,r17
    e3c0:	1800261e 	bne	r3,zero,e45c <__muldf3+0x2dc>
    e3c4:	0023883a 	mov	r17,zero
    e3c8:	0011883a 	mov	r8,zero
    e3cc:	01400084 	movi	r5,2
    e3d0:	003f9c06 	br	e244 <__alt_data_end+0xff00e244>
    e3d4:	3446b03a 	or	r3,r6,r17
    e3d8:	18001c26 	beq	r3,zero,e44c <__muldf3+0x2cc>
    e3dc:	8800ce26 	beq	r17,zero,e718 <__muldf3+0x598>
    e3e0:	8809883a 	mov	r4,r17
    e3e4:	d9800215 	stw	r6,8(sp)
    e3e8:	da400115 	stw	r9,4(sp)
    e3ec:	da800015 	stw	r10,0(sp)
    e3f0:	000f3980 	call	f398 <__clzsi2>
    e3f4:	d9800217 	ldw	r6,8(sp)
    e3f8:	da400117 	ldw	r9,4(sp)
    e3fc:	da800017 	ldw	r10,0(sp)
    e400:	113ffd44 	addi	r4,r2,-11
    e404:	00c00704 	movi	r3,28
    e408:	1900bf16 	blt	r3,r4,e708 <__muldf3+0x588>
    e40c:	00c00744 	movi	r3,29
    e410:	123ffe04 	addi	r8,r2,-8
    e414:	1907c83a 	sub	r3,r3,r4
    e418:	8a22983a 	sll	r17,r17,r8
    e41c:	30c6d83a 	srl	r3,r6,r3
    e420:	3210983a 	sll	r8,r6,r8
    e424:	1c62b03a 	or	r17,r3,r17
    e428:	1080fcc4 	addi	r2,r2,1011
    e42c:	0085c83a 	sub	r2,zero,r2
    e430:	000b883a 	mov	r5,zero
    e434:	003f8306 	br	e244 <__alt_data_end+0xff00e244>
    e438:	b02b883a 	mov	r21,r22
    e43c:	0081ffc4 	movi	r2,2047
    e440:	000b883a 	mov	r5,zero
    e444:	0029883a 	mov	r20,zero
    e448:	003fac06 	br	e2fc <__alt_data_end+0xff00e2fc>
    e44c:	0023883a 	mov	r17,zero
    e450:	0011883a 	mov	r8,zero
    e454:	01400044 	movi	r5,1
    e458:	003f7a06 	br	e244 <__alt_data_end+0xff00e244>
    e45c:	014000c4 	movi	r5,3
    e460:	003f7806 	br	e244 <__alt_data_end+0xff00e244>
    e464:	04c00104 	movi	r19,4
    e468:	0021883a 	mov	r16,zero
    e46c:	0029883a 	mov	r20,zero
    e470:	07000044 	movi	fp,1
    e474:	003f6106 	br	e1fc <__alt_data_end+0xff00e1fc>
    e478:	04c00304 	movi	r19,12
    e47c:	070000c4 	movi	fp,3
    e480:	003f5e06 	br	e1fc <__alt_data_end+0xff00e1fc>
    e484:	01400434 	movhi	r5,16
    e488:	002b883a 	mov	r21,zero
    e48c:	297fffc4 	addi	r5,r5,-1
    e490:	053fffc4 	movi	r20,-1
    e494:	0081ffc4 	movi	r2,2047
    e498:	003f9806 	br	e2fc <__alt_data_end+0xff00e2fc>
    e49c:	8023883a 	mov	r17,r16
    e4a0:	a011883a 	mov	r8,r20
    e4a4:	e00b883a 	mov	r5,fp
    e4a8:	003f8a06 	br	e2d4 <__alt_data_end+0xff00e2d4>
    e4ac:	8023883a 	mov	r17,r16
    e4b0:	a011883a 	mov	r8,r20
    e4b4:	482d883a 	mov	r22,r9
    e4b8:	e00b883a 	mov	r5,fp
    e4bc:	003f8506 	br	e2d4 <__alt_data_end+0xff00e2d4>
    e4c0:	a00ad43a 	srli	r5,r20,16
    e4c4:	401ad43a 	srli	r13,r8,16
    e4c8:	a53fffcc 	andi	r20,r20,65535
    e4cc:	423fffcc 	andi	r8,r8,65535
    e4d0:	4519383a 	mul	r12,r8,r20
    e4d4:	4147383a 	mul	r3,r8,r5
    e4d8:	6d09383a 	mul	r4,r13,r20
    e4dc:	600cd43a 	srli	r6,r12,16
    e4e0:	2b5d383a 	mul	r14,r5,r13
    e4e4:	20c9883a 	add	r4,r4,r3
    e4e8:	310d883a 	add	r6,r6,r4
    e4ec:	30c0022e 	bgeu	r6,r3,e4f8 <__muldf3+0x378>
    e4f0:	00c00074 	movhi	r3,1
    e4f4:	70dd883a 	add	r14,r14,r3
    e4f8:	8826d43a 	srli	r19,r17,16
    e4fc:	8bffffcc 	andi	r15,r17,65535
    e500:	7d23383a 	mul	r17,r15,r20
    e504:	7949383a 	mul	r4,r15,r5
    e508:	9d29383a 	mul	r20,r19,r20
    e50c:	8814d43a 	srli	r10,r17,16
    e510:	3012943a 	slli	r9,r6,16
    e514:	a129883a 	add	r20,r20,r4
    e518:	633fffcc 	andi	r12,r12,65535
    e51c:	5515883a 	add	r10,r10,r20
    e520:	3006d43a 	srli	r3,r6,16
    e524:	4b13883a 	add	r9,r9,r12
    e528:	2ccb383a 	mul	r5,r5,r19
    e52c:	5100022e 	bgeu	r10,r4,e538 <__muldf3+0x3b8>
    e530:	01000074 	movhi	r4,1
    e534:	290b883a 	add	r5,r5,r4
    e538:	802ad43a 	srli	r21,r16,16
    e53c:	843fffcc 	andi	r16,r16,65535
    e540:	440d383a 	mul	r6,r8,r16
    e544:	4565383a 	mul	r18,r8,r21
    e548:	8349383a 	mul	r4,r16,r13
    e54c:	500e943a 	slli	r7,r10,16
    e550:	3010d43a 	srli	r8,r6,16
    e554:	5028d43a 	srli	r20,r10,16
    e558:	2489883a 	add	r4,r4,r18
    e55c:	8abfffcc 	andi	r10,r17,65535
    e560:	3a95883a 	add	r10,r7,r10
    e564:	4119883a 	add	r12,r8,r4
    e568:	a169883a 	add	r20,r20,r5
    e56c:	1a87883a 	add	r3,r3,r10
    e570:	6d5b383a 	mul	r13,r13,r21
    e574:	6480022e 	bgeu	r12,r18,e580 <__muldf3+0x400>
    e578:	01000074 	movhi	r4,1
    e57c:	691b883a 	add	r13,r13,r4
    e580:	7c25383a 	mul	r18,r15,r16
    e584:	7d4b383a 	mul	r5,r15,r21
    e588:	84cf383a 	mul	r7,r16,r19
    e58c:	901ed43a 	srli	r15,r18,16
    e590:	6008d43a 	srli	r4,r12,16
    e594:	6010943a 	slli	r8,r12,16
    e598:	394f883a 	add	r7,r7,r5
    e59c:	333fffcc 	andi	r12,r6,65535
    e5a0:	79df883a 	add	r15,r15,r7
    e5a4:	235b883a 	add	r13,r4,r13
    e5a8:	9d63383a 	mul	r17,r19,r21
    e5ac:	4309883a 	add	r4,r8,r12
    e5b0:	7940022e 	bgeu	r15,r5,e5bc <__muldf3+0x43c>
    e5b4:	01400074 	movhi	r5,1
    e5b8:	8963883a 	add	r17,r17,r5
    e5bc:	780a943a 	slli	r5,r15,16
    e5c0:	91bfffcc 	andi	r6,r18,65535
    e5c4:	70c7883a 	add	r3,r14,r3
    e5c8:	298d883a 	add	r6,r5,r6
    e5cc:	1a8f803a 	cmpltu	r7,r3,r10
    e5d0:	350b883a 	add	r5,r6,r20
    e5d4:	20c7883a 	add	r3,r4,r3
    e5d8:	3955883a 	add	r10,r7,r5
    e5dc:	1909803a 	cmpltu	r4,r3,r4
    e5e0:	6a91883a 	add	r8,r13,r10
    e5e4:	780cd43a 	srli	r6,r15,16
    e5e8:	2219883a 	add	r12,r4,r8
    e5ec:	2d0b803a 	cmpltu	r5,r5,r20
    e5f0:	51cf803a 	cmpltu	r7,r10,r7
    e5f4:	29ceb03a 	or	r7,r5,r7
    e5f8:	4351803a 	cmpltu	r8,r8,r13
    e5fc:	610b803a 	cmpltu	r5,r12,r4
    e600:	4148b03a 	or	r4,r8,r5
    e604:	398f883a 	add	r7,r7,r6
    e608:	3909883a 	add	r4,r7,r4
    e60c:	1810927a 	slli	r8,r3,9
    e610:	2449883a 	add	r4,r4,r17
    e614:	2008927a 	slli	r4,r4,9
    e618:	6022d5fa 	srli	r17,r12,23
    e61c:	1806d5fa 	srli	r3,r3,23
    e620:	4252b03a 	or	r9,r8,r9
    e624:	600a927a 	slli	r5,r12,9
    e628:	4810c03a 	cmpne	r8,r9,zero
    e62c:	2462b03a 	or	r17,r4,r17
    e630:	40c6b03a 	or	r3,r8,r3
    e634:	8900402c 	andhi	r4,r17,256
    e638:	1950b03a 	or	r8,r3,r5
    e63c:	20000726 	beq	r4,zero,e65c <__muldf3+0x4dc>
    e640:	4006d07a 	srli	r3,r8,1
    e644:	880497fa 	slli	r2,r17,31
    e648:	4200004c 	andi	r8,r8,1
    e64c:	8822d07a 	srli	r17,r17,1
    e650:	1a10b03a 	or	r8,r3,r8
    e654:	1210b03a 	or	r8,r2,r8
    e658:	5805883a 	mov	r2,r11
    e65c:	1140ffc4 	addi	r5,r2,1023
    e660:	0140440e 	bge	zero,r5,e774 <__muldf3+0x5f4>
    e664:	40c001cc 	andi	r3,r8,7
    e668:	18000726 	beq	r3,zero,e688 <__muldf3+0x508>
    e66c:	40c003cc 	andi	r3,r8,15
    e670:	01000104 	movi	r4,4
    e674:	19000426 	beq	r3,r4,e688 <__muldf3+0x508>
    e678:	4107883a 	add	r3,r8,r4
    e67c:	1a11803a 	cmpltu	r8,r3,r8
    e680:	8a23883a 	add	r17,r17,r8
    e684:	1811883a 	mov	r8,r3
    e688:	88c0402c 	andhi	r3,r17,256
    e68c:	18000426 	beq	r3,zero,e6a0 <__muldf3+0x520>
    e690:	11410004 	addi	r5,r2,1024
    e694:	00bfc034 	movhi	r2,65280
    e698:	10bfffc4 	addi	r2,r2,-1
    e69c:	88a2703a 	and	r17,r17,r2
    e6a0:	0081ff84 	movi	r2,2046
    e6a4:	117f6416 	blt	r2,r5,e438 <__alt_data_end+0xff00e438>
    e6a8:	8828977a 	slli	r20,r17,29
    e6ac:	4010d0fa 	srli	r8,r8,3
    e6b0:	8822927a 	slli	r17,r17,9
    e6b4:	2881ffcc 	andi	r2,r5,2047
    e6b8:	a228b03a 	or	r20,r20,r8
    e6bc:	880ad33a 	srli	r5,r17,12
    e6c0:	b02b883a 	mov	r21,r22
    e6c4:	003f0d06 	br	e2fc <__alt_data_end+0xff00e2fc>
    e6c8:	8080022c 	andhi	r2,r16,8
    e6cc:	10000926 	beq	r2,zero,e6f4 <__muldf3+0x574>
    e6d0:	8880022c 	andhi	r2,r17,8
    e6d4:	1000071e 	bne	r2,zero,e6f4 <__muldf3+0x574>
    e6d8:	00800434 	movhi	r2,16
    e6dc:	89400234 	orhi	r5,r17,8
    e6e0:	10bfffc4 	addi	r2,r2,-1
    e6e4:	b82b883a 	mov	r21,r23
    e6e8:	288a703a 	and	r5,r5,r2
    e6ec:	4029883a 	mov	r20,r8
    e6f0:	003f6806 	br	e494 <__alt_data_end+0xff00e494>
    e6f4:	00800434 	movhi	r2,16
    e6f8:	81400234 	orhi	r5,r16,8
    e6fc:	10bfffc4 	addi	r2,r2,-1
    e700:	288a703a 	and	r5,r5,r2
    e704:	003f6306 	br	e494 <__alt_data_end+0xff00e494>
    e708:	147ff604 	addi	r17,r2,-40
    e70c:	3462983a 	sll	r17,r6,r17
    e710:	0011883a 	mov	r8,zero
    e714:	003f4406 	br	e428 <__alt_data_end+0xff00e428>
    e718:	3009883a 	mov	r4,r6
    e71c:	d9800215 	stw	r6,8(sp)
    e720:	da400115 	stw	r9,4(sp)
    e724:	da800015 	stw	r10,0(sp)
    e728:	000f3980 	call	f398 <__clzsi2>
    e72c:	10800804 	addi	r2,r2,32
    e730:	da800017 	ldw	r10,0(sp)
    e734:	da400117 	ldw	r9,4(sp)
    e738:	d9800217 	ldw	r6,8(sp)
    e73c:	003f3006 	br	e400 <__alt_data_end+0xff00e400>
    e740:	143ff604 	addi	r16,r2,-40
    e744:	9c20983a 	sll	r16,r19,r16
    e748:	0029883a 	mov	r20,zero
    e74c:	003f1606 	br	e3a8 <__alt_data_end+0xff00e3a8>
    e750:	d9800215 	stw	r6,8(sp)
    e754:	d9c00015 	stw	r7,0(sp)
    e758:	da400115 	stw	r9,4(sp)
    e75c:	000f3980 	call	f398 <__clzsi2>
    e760:	10800804 	addi	r2,r2,32
    e764:	da400117 	ldw	r9,4(sp)
    e768:	d9c00017 	ldw	r7,0(sp)
    e76c:	d9800217 	ldw	r6,8(sp)
    e770:	003f0306 	br	e380 <__alt_data_end+0xff00e380>
    e774:	00c00044 	movi	r3,1
    e778:	1947c83a 	sub	r3,r3,r5
    e77c:	00800e04 	movi	r2,56
    e780:	10feda16 	blt	r2,r3,e2ec <__alt_data_end+0xff00e2ec>
    e784:	008007c4 	movi	r2,31
    e788:	10c01b16 	blt	r2,r3,e7f8 <__muldf3+0x678>
    e78c:	00800804 	movi	r2,32
    e790:	10c5c83a 	sub	r2,r2,r3
    e794:	888a983a 	sll	r5,r17,r2
    e798:	40c8d83a 	srl	r4,r8,r3
    e79c:	4084983a 	sll	r2,r8,r2
    e7a0:	88e2d83a 	srl	r17,r17,r3
    e7a4:	2906b03a 	or	r3,r5,r4
    e7a8:	1004c03a 	cmpne	r2,r2,zero
    e7ac:	1886b03a 	or	r3,r3,r2
    e7b0:	188001cc 	andi	r2,r3,7
    e7b4:	10000726 	beq	r2,zero,e7d4 <__muldf3+0x654>
    e7b8:	188003cc 	andi	r2,r3,15
    e7bc:	01000104 	movi	r4,4
    e7c0:	11000426 	beq	r2,r4,e7d4 <__muldf3+0x654>
    e7c4:	1805883a 	mov	r2,r3
    e7c8:	10c00104 	addi	r3,r2,4
    e7cc:	1885803a 	cmpltu	r2,r3,r2
    e7d0:	88a3883a 	add	r17,r17,r2
    e7d4:	8880202c 	andhi	r2,r17,128
    e7d8:	10001c26 	beq	r2,zero,e84c <__muldf3+0x6cc>
    e7dc:	b02b883a 	mov	r21,r22
    e7e0:	00800044 	movi	r2,1
    e7e4:	000b883a 	mov	r5,zero
    e7e8:	0029883a 	mov	r20,zero
    e7ec:	003ec306 	br	e2fc <__alt_data_end+0xff00e2fc>
    e7f0:	5805883a 	mov	r2,r11
    e7f4:	003f9906 	br	e65c <__alt_data_end+0xff00e65c>
    e7f8:	00bff844 	movi	r2,-31
    e7fc:	1145c83a 	sub	r2,r2,r5
    e800:	8888d83a 	srl	r4,r17,r2
    e804:	00800804 	movi	r2,32
    e808:	18801a26 	beq	r3,r2,e874 <__muldf3+0x6f4>
    e80c:	00801004 	movi	r2,64
    e810:	10c5c83a 	sub	r2,r2,r3
    e814:	8884983a 	sll	r2,r17,r2
    e818:	1204b03a 	or	r2,r2,r8
    e81c:	1004c03a 	cmpne	r2,r2,zero
    e820:	2084b03a 	or	r2,r4,r2
    e824:	144001cc 	andi	r17,r2,7
    e828:	88000d1e 	bne	r17,zero,e860 <__muldf3+0x6e0>
    e82c:	000b883a 	mov	r5,zero
    e830:	1028d0fa 	srli	r20,r2,3
    e834:	b02b883a 	mov	r21,r22
    e838:	0005883a 	mov	r2,zero
    e83c:	a468b03a 	or	r20,r20,r17
    e840:	003eae06 	br	e2fc <__alt_data_end+0xff00e2fc>
    e844:	1007883a 	mov	r3,r2
    e848:	0023883a 	mov	r17,zero
    e84c:	880a927a 	slli	r5,r17,9
    e850:	1805883a 	mov	r2,r3
    e854:	8822977a 	slli	r17,r17,29
    e858:	280ad33a 	srli	r5,r5,12
    e85c:	003ff406 	br	e830 <__alt_data_end+0xff00e830>
    e860:	10c003cc 	andi	r3,r2,15
    e864:	01000104 	movi	r4,4
    e868:	193ff626 	beq	r3,r4,e844 <__alt_data_end+0xff00e844>
    e86c:	0023883a 	mov	r17,zero
    e870:	003fd506 	br	e7c8 <__alt_data_end+0xff00e7c8>
    e874:	0005883a 	mov	r2,zero
    e878:	003fe706 	br	e818 <__alt_data_end+0xff00e818>
    e87c:	00800434 	movhi	r2,16
    e880:	89400234 	orhi	r5,r17,8
    e884:	10bfffc4 	addi	r2,r2,-1
    e888:	b02b883a 	mov	r21,r22
    e88c:	288a703a 	and	r5,r5,r2
    e890:	4029883a 	mov	r20,r8
    e894:	003eff06 	br	e494 <__alt_data_end+0xff00e494>

0000e898 <__subdf3>:
    e898:	02000434 	movhi	r8,16
    e89c:	423fffc4 	addi	r8,r8,-1
    e8a0:	defffb04 	addi	sp,sp,-20
    e8a4:	2a14703a 	and	r10,r5,r8
    e8a8:	3812d53a 	srli	r9,r7,20
    e8ac:	3a10703a 	and	r8,r7,r8
    e8b0:	2006d77a 	srli	r3,r4,29
    e8b4:	3004d77a 	srli	r2,r6,29
    e8b8:	dc000015 	stw	r16,0(sp)
    e8bc:	501490fa 	slli	r10,r10,3
    e8c0:	2820d53a 	srli	r16,r5,20
    e8c4:	401090fa 	slli	r8,r8,3
    e8c8:	dc800215 	stw	r18,8(sp)
    e8cc:	dc400115 	stw	r17,4(sp)
    e8d0:	dfc00415 	stw	ra,16(sp)
    e8d4:	202290fa 	slli	r17,r4,3
    e8d8:	dcc00315 	stw	r19,12(sp)
    e8dc:	4a41ffcc 	andi	r9,r9,2047
    e8e0:	0101ffc4 	movi	r4,2047
    e8e4:	2824d7fa 	srli	r18,r5,31
    e8e8:	8401ffcc 	andi	r16,r16,2047
    e8ec:	50c6b03a 	or	r3,r10,r3
    e8f0:	380ed7fa 	srli	r7,r7,31
    e8f4:	408ab03a 	or	r5,r8,r2
    e8f8:	300c90fa 	slli	r6,r6,3
    e8fc:	49009626 	beq	r9,r4,eb58 <__subdf3+0x2c0>
    e900:	39c0005c 	xori	r7,r7,1
    e904:	8245c83a 	sub	r2,r16,r9
    e908:	3c807426 	beq	r7,r18,eadc <__subdf3+0x244>
    e90c:	0080af0e 	bge	zero,r2,ebcc <__subdf3+0x334>
    e910:	48002a1e 	bne	r9,zero,e9bc <__subdf3+0x124>
    e914:	2988b03a 	or	r4,r5,r6
    e918:	20009a1e 	bne	r4,zero,eb84 <__subdf3+0x2ec>
    e91c:	888001cc 	andi	r2,r17,7
    e920:	10000726 	beq	r2,zero,e940 <__subdf3+0xa8>
    e924:	888003cc 	andi	r2,r17,15
    e928:	01000104 	movi	r4,4
    e92c:	11000426 	beq	r2,r4,e940 <__subdf3+0xa8>
    e930:	890b883a 	add	r5,r17,r4
    e934:	2c63803a 	cmpltu	r17,r5,r17
    e938:	1c47883a 	add	r3,r3,r17
    e93c:	2823883a 	mov	r17,r5
    e940:	1880202c 	andhi	r2,r3,128
    e944:	10005926 	beq	r2,zero,eaac <__subdf3+0x214>
    e948:	84000044 	addi	r16,r16,1
    e94c:	0081ffc4 	movi	r2,2047
    e950:	8080be26 	beq	r16,r2,ec4c <__subdf3+0x3b4>
    e954:	017fe034 	movhi	r5,65408
    e958:	297fffc4 	addi	r5,r5,-1
    e95c:	1946703a 	and	r3,r3,r5
    e960:	1804977a 	slli	r2,r3,29
    e964:	1806927a 	slli	r3,r3,9
    e968:	8822d0fa 	srli	r17,r17,3
    e96c:	8401ffcc 	andi	r16,r16,2047
    e970:	180ad33a 	srli	r5,r3,12
    e974:	9100004c 	andi	r4,r18,1
    e978:	1444b03a 	or	r2,r2,r17
    e97c:	80c1ffcc 	andi	r3,r16,2047
    e980:	1820953a 	slli	r16,r3,20
    e984:	20c03fcc 	andi	r3,r4,255
    e988:	180897fa 	slli	r4,r3,31
    e98c:	00c00434 	movhi	r3,16
    e990:	18ffffc4 	addi	r3,r3,-1
    e994:	28c6703a 	and	r3,r5,r3
    e998:	1c06b03a 	or	r3,r3,r16
    e99c:	1906b03a 	or	r3,r3,r4
    e9a0:	dfc00417 	ldw	ra,16(sp)
    e9a4:	dcc00317 	ldw	r19,12(sp)
    e9a8:	dc800217 	ldw	r18,8(sp)
    e9ac:	dc400117 	ldw	r17,4(sp)
    e9b0:	dc000017 	ldw	r16,0(sp)
    e9b4:	dec00504 	addi	sp,sp,20
    e9b8:	f800283a 	ret
    e9bc:	0101ffc4 	movi	r4,2047
    e9c0:	813fd626 	beq	r16,r4,e91c <__alt_data_end+0xff00e91c>
    e9c4:	29402034 	orhi	r5,r5,128
    e9c8:	01000e04 	movi	r4,56
    e9cc:	2080a316 	blt	r4,r2,ec5c <__subdf3+0x3c4>
    e9d0:	010007c4 	movi	r4,31
    e9d4:	2080c616 	blt	r4,r2,ecf0 <__subdf3+0x458>
    e9d8:	01000804 	movi	r4,32
    e9dc:	2089c83a 	sub	r4,r4,r2
    e9e0:	2910983a 	sll	r8,r5,r4
    e9e4:	308ed83a 	srl	r7,r6,r2
    e9e8:	3108983a 	sll	r4,r6,r4
    e9ec:	2884d83a 	srl	r2,r5,r2
    e9f0:	41ccb03a 	or	r6,r8,r7
    e9f4:	2008c03a 	cmpne	r4,r4,zero
    e9f8:	310cb03a 	or	r6,r6,r4
    e9fc:	898dc83a 	sub	r6,r17,r6
    ea00:	89a3803a 	cmpltu	r17,r17,r6
    ea04:	1887c83a 	sub	r3,r3,r2
    ea08:	1c47c83a 	sub	r3,r3,r17
    ea0c:	3023883a 	mov	r17,r6
    ea10:	1880202c 	andhi	r2,r3,128
    ea14:	10002326 	beq	r2,zero,eaa4 <__subdf3+0x20c>
    ea18:	04c02034 	movhi	r19,128
    ea1c:	9cffffc4 	addi	r19,r19,-1
    ea20:	1ce6703a 	and	r19,r3,r19
    ea24:	98007a26 	beq	r19,zero,ec10 <__subdf3+0x378>
    ea28:	9809883a 	mov	r4,r19
    ea2c:	000f3980 	call	f398 <__clzsi2>
    ea30:	113ffe04 	addi	r4,r2,-8
    ea34:	00c007c4 	movi	r3,31
    ea38:	19007b16 	blt	r3,r4,ec28 <__subdf3+0x390>
    ea3c:	00800804 	movi	r2,32
    ea40:	1105c83a 	sub	r2,r2,r4
    ea44:	8884d83a 	srl	r2,r17,r2
    ea48:	9906983a 	sll	r3,r19,r4
    ea4c:	8922983a 	sll	r17,r17,r4
    ea50:	10c4b03a 	or	r2,r2,r3
    ea54:	24007816 	blt	r4,r16,ec38 <__subdf3+0x3a0>
    ea58:	2421c83a 	sub	r16,r4,r16
    ea5c:	80c00044 	addi	r3,r16,1
    ea60:	010007c4 	movi	r4,31
    ea64:	20c09516 	blt	r4,r3,ecbc <__subdf3+0x424>
    ea68:	01400804 	movi	r5,32
    ea6c:	28cbc83a 	sub	r5,r5,r3
    ea70:	88c8d83a 	srl	r4,r17,r3
    ea74:	8962983a 	sll	r17,r17,r5
    ea78:	114a983a 	sll	r5,r2,r5
    ea7c:	10c6d83a 	srl	r3,r2,r3
    ea80:	8804c03a 	cmpne	r2,r17,zero
    ea84:	290ab03a 	or	r5,r5,r4
    ea88:	28a2b03a 	or	r17,r5,r2
    ea8c:	0021883a 	mov	r16,zero
    ea90:	003fa206 	br	e91c <__alt_data_end+0xff00e91c>
    ea94:	2090b03a 	or	r8,r4,r2
    ea98:	40018e26 	beq	r8,zero,f0d4 <__subdf3+0x83c>
    ea9c:	1007883a 	mov	r3,r2
    eaa0:	2023883a 	mov	r17,r4
    eaa4:	888001cc 	andi	r2,r17,7
    eaa8:	103f9e1e 	bne	r2,zero,e924 <__alt_data_end+0xff00e924>
    eaac:	1804977a 	slli	r2,r3,29
    eab0:	8822d0fa 	srli	r17,r17,3
    eab4:	1810d0fa 	srli	r8,r3,3
    eab8:	9100004c 	andi	r4,r18,1
    eabc:	1444b03a 	or	r2,r2,r17
    eac0:	00c1ffc4 	movi	r3,2047
    eac4:	80c02826 	beq	r16,r3,eb68 <__subdf3+0x2d0>
    eac8:	01400434 	movhi	r5,16
    eacc:	297fffc4 	addi	r5,r5,-1
    ead0:	80e0703a 	and	r16,r16,r3
    ead4:	414a703a 	and	r5,r8,r5
    ead8:	003fa806 	br	e97c <__alt_data_end+0xff00e97c>
    eadc:	0080630e 	bge	zero,r2,ec6c <__subdf3+0x3d4>
    eae0:	48003026 	beq	r9,zero,eba4 <__subdf3+0x30c>
    eae4:	0101ffc4 	movi	r4,2047
    eae8:	813f8c26 	beq	r16,r4,e91c <__alt_data_end+0xff00e91c>
    eaec:	29402034 	orhi	r5,r5,128
    eaf0:	01000e04 	movi	r4,56
    eaf4:	2080a90e 	bge	r4,r2,ed9c <__subdf3+0x504>
    eaf8:	298cb03a 	or	r6,r5,r6
    eafc:	3012c03a 	cmpne	r9,r6,zero
    eb00:	0005883a 	mov	r2,zero
    eb04:	4c53883a 	add	r9,r9,r17
    eb08:	4c63803a 	cmpltu	r17,r9,r17
    eb0c:	10c7883a 	add	r3,r2,r3
    eb10:	88c7883a 	add	r3,r17,r3
    eb14:	4823883a 	mov	r17,r9
    eb18:	1880202c 	andhi	r2,r3,128
    eb1c:	1000d026 	beq	r2,zero,ee60 <__subdf3+0x5c8>
    eb20:	84000044 	addi	r16,r16,1
    eb24:	0081ffc4 	movi	r2,2047
    eb28:	8080fe26 	beq	r16,r2,ef24 <__subdf3+0x68c>
    eb2c:	00bfe034 	movhi	r2,65408
    eb30:	10bfffc4 	addi	r2,r2,-1
    eb34:	1886703a 	and	r3,r3,r2
    eb38:	880ad07a 	srli	r5,r17,1
    eb3c:	180497fa 	slli	r2,r3,31
    eb40:	8900004c 	andi	r4,r17,1
    eb44:	2922b03a 	or	r17,r5,r4
    eb48:	1806d07a 	srli	r3,r3,1
    eb4c:	1462b03a 	or	r17,r2,r17
    eb50:	3825883a 	mov	r18,r7
    eb54:	003f7106 	br	e91c <__alt_data_end+0xff00e91c>
    eb58:	2984b03a 	or	r2,r5,r6
    eb5c:	103f6826 	beq	r2,zero,e900 <__alt_data_end+0xff00e900>
    eb60:	39c03fcc 	andi	r7,r7,255
    eb64:	003f6706 	br	e904 <__alt_data_end+0xff00e904>
    eb68:	4086b03a 	or	r3,r8,r2
    eb6c:	18015226 	beq	r3,zero,f0b8 <__subdf3+0x820>
    eb70:	00c00434 	movhi	r3,16
    eb74:	41400234 	orhi	r5,r8,8
    eb78:	18ffffc4 	addi	r3,r3,-1
    eb7c:	28ca703a 	and	r5,r5,r3
    eb80:	003f7e06 	br	e97c <__alt_data_end+0xff00e97c>
    eb84:	10bfffc4 	addi	r2,r2,-1
    eb88:	1000491e 	bne	r2,zero,ecb0 <__subdf3+0x418>
    eb8c:	898fc83a 	sub	r7,r17,r6
    eb90:	89e3803a 	cmpltu	r17,r17,r7
    eb94:	1947c83a 	sub	r3,r3,r5
    eb98:	1c47c83a 	sub	r3,r3,r17
    eb9c:	3823883a 	mov	r17,r7
    eba0:	003f9b06 	br	ea10 <__alt_data_end+0xff00ea10>
    eba4:	2988b03a 	or	r4,r5,r6
    eba8:	203f5c26 	beq	r4,zero,e91c <__alt_data_end+0xff00e91c>
    ebac:	10bfffc4 	addi	r2,r2,-1
    ebb0:	1000931e 	bne	r2,zero,ee00 <__subdf3+0x568>
    ebb4:	898d883a 	add	r6,r17,r6
    ebb8:	3463803a 	cmpltu	r17,r6,r17
    ebbc:	1947883a 	add	r3,r3,r5
    ebc0:	88c7883a 	add	r3,r17,r3
    ebc4:	3023883a 	mov	r17,r6
    ebc8:	003fd306 	br	eb18 <__alt_data_end+0xff00eb18>
    ebcc:	1000541e 	bne	r2,zero,ed20 <__subdf3+0x488>
    ebd0:	80800044 	addi	r2,r16,1
    ebd4:	1081ffcc 	andi	r2,r2,2047
    ebd8:	01000044 	movi	r4,1
    ebdc:	2080a20e 	bge	r4,r2,ee68 <__subdf3+0x5d0>
    ebe0:	8989c83a 	sub	r4,r17,r6
    ebe4:	8905803a 	cmpltu	r2,r17,r4
    ebe8:	1967c83a 	sub	r19,r3,r5
    ebec:	98a7c83a 	sub	r19,r19,r2
    ebf0:	9880202c 	andhi	r2,r19,128
    ebf4:	10006326 	beq	r2,zero,ed84 <__subdf3+0x4ec>
    ebf8:	3463c83a 	sub	r17,r6,r17
    ebfc:	28c7c83a 	sub	r3,r5,r3
    ec00:	344d803a 	cmpltu	r6,r6,r17
    ec04:	19a7c83a 	sub	r19,r3,r6
    ec08:	3825883a 	mov	r18,r7
    ec0c:	983f861e 	bne	r19,zero,ea28 <__alt_data_end+0xff00ea28>
    ec10:	8809883a 	mov	r4,r17
    ec14:	000f3980 	call	f398 <__clzsi2>
    ec18:	10800804 	addi	r2,r2,32
    ec1c:	113ffe04 	addi	r4,r2,-8
    ec20:	00c007c4 	movi	r3,31
    ec24:	193f850e 	bge	r3,r4,ea3c <__alt_data_end+0xff00ea3c>
    ec28:	10bff604 	addi	r2,r2,-40
    ec2c:	8884983a 	sll	r2,r17,r2
    ec30:	0023883a 	mov	r17,zero
    ec34:	243f880e 	bge	r4,r16,ea58 <__alt_data_end+0xff00ea58>
    ec38:	00ffe034 	movhi	r3,65408
    ec3c:	18ffffc4 	addi	r3,r3,-1
    ec40:	8121c83a 	sub	r16,r16,r4
    ec44:	10c6703a 	and	r3,r2,r3
    ec48:	003f3406 	br	e91c <__alt_data_end+0xff00e91c>
    ec4c:	9100004c 	andi	r4,r18,1
    ec50:	000b883a 	mov	r5,zero
    ec54:	0005883a 	mov	r2,zero
    ec58:	003f4806 	br	e97c <__alt_data_end+0xff00e97c>
    ec5c:	298cb03a 	or	r6,r5,r6
    ec60:	300cc03a 	cmpne	r6,r6,zero
    ec64:	0005883a 	mov	r2,zero
    ec68:	003f6406 	br	e9fc <__alt_data_end+0xff00e9fc>
    ec6c:	10009a1e 	bne	r2,zero,eed8 <__subdf3+0x640>
    ec70:	82400044 	addi	r9,r16,1
    ec74:	4881ffcc 	andi	r2,r9,2047
    ec78:	02800044 	movi	r10,1
    ec7c:	5080670e 	bge	r10,r2,ee1c <__subdf3+0x584>
    ec80:	0081ffc4 	movi	r2,2047
    ec84:	4880af26 	beq	r9,r2,ef44 <__subdf3+0x6ac>
    ec88:	898d883a 	add	r6,r17,r6
    ec8c:	1945883a 	add	r2,r3,r5
    ec90:	3447803a 	cmpltu	r3,r6,r17
    ec94:	1887883a 	add	r3,r3,r2
    ec98:	182297fa 	slli	r17,r3,31
    ec9c:	300cd07a 	srli	r6,r6,1
    eca0:	1806d07a 	srli	r3,r3,1
    eca4:	4821883a 	mov	r16,r9
    eca8:	89a2b03a 	or	r17,r17,r6
    ecac:	003f1b06 	br	e91c <__alt_data_end+0xff00e91c>
    ecb0:	0101ffc4 	movi	r4,2047
    ecb4:	813f441e 	bne	r16,r4,e9c8 <__alt_data_end+0xff00e9c8>
    ecb8:	003f1806 	br	e91c <__alt_data_end+0xff00e91c>
    ecbc:	843ff844 	addi	r16,r16,-31
    ecc0:	01400804 	movi	r5,32
    ecc4:	1408d83a 	srl	r4,r2,r16
    ecc8:	19405026 	beq	r3,r5,ee0c <__subdf3+0x574>
    eccc:	01401004 	movi	r5,64
    ecd0:	28c7c83a 	sub	r3,r5,r3
    ecd4:	10c4983a 	sll	r2,r2,r3
    ecd8:	88a2b03a 	or	r17,r17,r2
    ecdc:	8822c03a 	cmpne	r17,r17,zero
    ece0:	2462b03a 	or	r17,r4,r17
    ece4:	0007883a 	mov	r3,zero
    ece8:	0021883a 	mov	r16,zero
    ecec:	003f6d06 	br	eaa4 <__alt_data_end+0xff00eaa4>
    ecf0:	11fff804 	addi	r7,r2,-32
    ecf4:	01000804 	movi	r4,32
    ecf8:	29ced83a 	srl	r7,r5,r7
    ecfc:	11004526 	beq	r2,r4,ee14 <__subdf3+0x57c>
    ed00:	01001004 	movi	r4,64
    ed04:	2089c83a 	sub	r4,r4,r2
    ed08:	2904983a 	sll	r2,r5,r4
    ed0c:	118cb03a 	or	r6,r2,r6
    ed10:	300cc03a 	cmpne	r6,r6,zero
    ed14:	398cb03a 	or	r6,r7,r6
    ed18:	0005883a 	mov	r2,zero
    ed1c:	003f3706 	br	e9fc <__alt_data_end+0xff00e9fc>
    ed20:	80002a26 	beq	r16,zero,edcc <__subdf3+0x534>
    ed24:	0101ffc4 	movi	r4,2047
    ed28:	49006626 	beq	r9,r4,eec4 <__subdf3+0x62c>
    ed2c:	0085c83a 	sub	r2,zero,r2
    ed30:	18c02034 	orhi	r3,r3,128
    ed34:	01000e04 	movi	r4,56
    ed38:	20807e16 	blt	r4,r2,ef34 <__subdf3+0x69c>
    ed3c:	010007c4 	movi	r4,31
    ed40:	2080e716 	blt	r4,r2,f0e0 <__subdf3+0x848>
    ed44:	01000804 	movi	r4,32
    ed48:	2089c83a 	sub	r4,r4,r2
    ed4c:	1914983a 	sll	r10,r3,r4
    ed50:	8890d83a 	srl	r8,r17,r2
    ed54:	8908983a 	sll	r4,r17,r4
    ed58:	1884d83a 	srl	r2,r3,r2
    ed5c:	5222b03a 	or	r17,r10,r8
    ed60:	2006c03a 	cmpne	r3,r4,zero
    ed64:	88e2b03a 	or	r17,r17,r3
    ed68:	3463c83a 	sub	r17,r6,r17
    ed6c:	2885c83a 	sub	r2,r5,r2
    ed70:	344d803a 	cmpltu	r6,r6,r17
    ed74:	1187c83a 	sub	r3,r2,r6
    ed78:	4821883a 	mov	r16,r9
    ed7c:	3825883a 	mov	r18,r7
    ed80:	003f2306 	br	ea10 <__alt_data_end+0xff00ea10>
    ed84:	24d0b03a 	or	r8,r4,r19
    ed88:	40001b1e 	bne	r8,zero,edf8 <__subdf3+0x560>
    ed8c:	0005883a 	mov	r2,zero
    ed90:	0009883a 	mov	r4,zero
    ed94:	0021883a 	mov	r16,zero
    ed98:	003f4906 	br	eac0 <__alt_data_end+0xff00eac0>
    ed9c:	010007c4 	movi	r4,31
    eda0:	20803a16 	blt	r4,r2,ee8c <__subdf3+0x5f4>
    eda4:	01000804 	movi	r4,32
    eda8:	2089c83a 	sub	r4,r4,r2
    edac:	2912983a 	sll	r9,r5,r4
    edb0:	3090d83a 	srl	r8,r6,r2
    edb4:	3108983a 	sll	r4,r6,r4
    edb8:	2884d83a 	srl	r2,r5,r2
    edbc:	4a12b03a 	or	r9,r9,r8
    edc0:	2008c03a 	cmpne	r4,r4,zero
    edc4:	4912b03a 	or	r9,r9,r4
    edc8:	003f4e06 	br	eb04 <__alt_data_end+0xff00eb04>
    edcc:	1c48b03a 	or	r4,r3,r17
    edd0:	20003c26 	beq	r4,zero,eec4 <__subdf3+0x62c>
    edd4:	0084303a 	nor	r2,zero,r2
    edd8:	1000381e 	bne	r2,zero,eebc <__subdf3+0x624>
    eddc:	3463c83a 	sub	r17,r6,r17
    ede0:	28c5c83a 	sub	r2,r5,r3
    ede4:	344d803a 	cmpltu	r6,r6,r17
    ede8:	1187c83a 	sub	r3,r2,r6
    edec:	4821883a 	mov	r16,r9
    edf0:	3825883a 	mov	r18,r7
    edf4:	003f0606 	br	ea10 <__alt_data_end+0xff00ea10>
    edf8:	2023883a 	mov	r17,r4
    edfc:	003f0906 	br	ea24 <__alt_data_end+0xff00ea24>
    ee00:	0101ffc4 	movi	r4,2047
    ee04:	813f3a1e 	bne	r16,r4,eaf0 <__alt_data_end+0xff00eaf0>
    ee08:	003ec406 	br	e91c <__alt_data_end+0xff00e91c>
    ee0c:	0005883a 	mov	r2,zero
    ee10:	003fb106 	br	ecd8 <__alt_data_end+0xff00ecd8>
    ee14:	0005883a 	mov	r2,zero
    ee18:	003fbc06 	br	ed0c <__alt_data_end+0xff00ed0c>
    ee1c:	1c44b03a 	or	r2,r3,r17
    ee20:	80008e1e 	bne	r16,zero,f05c <__subdf3+0x7c4>
    ee24:	1000c826 	beq	r2,zero,f148 <__subdf3+0x8b0>
    ee28:	2984b03a 	or	r2,r5,r6
    ee2c:	103ebb26 	beq	r2,zero,e91c <__alt_data_end+0xff00e91c>
    ee30:	8989883a 	add	r4,r17,r6
    ee34:	1945883a 	add	r2,r3,r5
    ee38:	2447803a 	cmpltu	r3,r4,r17
    ee3c:	1887883a 	add	r3,r3,r2
    ee40:	1880202c 	andhi	r2,r3,128
    ee44:	2023883a 	mov	r17,r4
    ee48:	103f1626 	beq	r2,zero,eaa4 <__alt_data_end+0xff00eaa4>
    ee4c:	00bfe034 	movhi	r2,65408
    ee50:	10bfffc4 	addi	r2,r2,-1
    ee54:	5021883a 	mov	r16,r10
    ee58:	1886703a 	and	r3,r3,r2
    ee5c:	003eaf06 	br	e91c <__alt_data_end+0xff00e91c>
    ee60:	3825883a 	mov	r18,r7
    ee64:	003f0f06 	br	eaa4 <__alt_data_end+0xff00eaa4>
    ee68:	1c44b03a 	or	r2,r3,r17
    ee6c:	8000251e 	bne	r16,zero,ef04 <__subdf3+0x66c>
    ee70:	1000661e 	bne	r2,zero,f00c <__subdf3+0x774>
    ee74:	2990b03a 	or	r8,r5,r6
    ee78:	40009626 	beq	r8,zero,f0d4 <__subdf3+0x83c>
    ee7c:	2807883a 	mov	r3,r5
    ee80:	3023883a 	mov	r17,r6
    ee84:	3825883a 	mov	r18,r7
    ee88:	003ea406 	br	e91c <__alt_data_end+0xff00e91c>
    ee8c:	127ff804 	addi	r9,r2,-32
    ee90:	01000804 	movi	r4,32
    ee94:	2a52d83a 	srl	r9,r5,r9
    ee98:	11008c26 	beq	r2,r4,f0cc <__subdf3+0x834>
    ee9c:	01001004 	movi	r4,64
    eea0:	2085c83a 	sub	r2,r4,r2
    eea4:	2884983a 	sll	r2,r5,r2
    eea8:	118cb03a 	or	r6,r2,r6
    eeac:	300cc03a 	cmpne	r6,r6,zero
    eeb0:	4992b03a 	or	r9,r9,r6
    eeb4:	0005883a 	mov	r2,zero
    eeb8:	003f1206 	br	eb04 <__alt_data_end+0xff00eb04>
    eebc:	0101ffc4 	movi	r4,2047
    eec0:	493f9c1e 	bne	r9,r4,ed34 <__alt_data_end+0xff00ed34>
    eec4:	2807883a 	mov	r3,r5
    eec8:	3023883a 	mov	r17,r6
    eecc:	4821883a 	mov	r16,r9
    eed0:	3825883a 	mov	r18,r7
    eed4:	003e9106 	br	e91c <__alt_data_end+0xff00e91c>
    eed8:	80001f1e 	bne	r16,zero,ef58 <__subdf3+0x6c0>
    eedc:	1c48b03a 	or	r4,r3,r17
    eee0:	20005a26 	beq	r4,zero,f04c <__subdf3+0x7b4>
    eee4:	0084303a 	nor	r2,zero,r2
    eee8:	1000561e 	bne	r2,zero,f044 <__subdf3+0x7ac>
    eeec:	89a3883a 	add	r17,r17,r6
    eef0:	1945883a 	add	r2,r3,r5
    eef4:	898d803a 	cmpltu	r6,r17,r6
    eef8:	3087883a 	add	r3,r6,r2
    eefc:	4821883a 	mov	r16,r9
    ef00:	003f0506 	br	eb18 <__alt_data_end+0xff00eb18>
    ef04:	10002b1e 	bne	r2,zero,efb4 <__subdf3+0x71c>
    ef08:	2984b03a 	or	r2,r5,r6
    ef0c:	10008026 	beq	r2,zero,f110 <__subdf3+0x878>
    ef10:	2807883a 	mov	r3,r5
    ef14:	3023883a 	mov	r17,r6
    ef18:	3825883a 	mov	r18,r7
    ef1c:	0401ffc4 	movi	r16,2047
    ef20:	003e7e06 	br	e91c <__alt_data_end+0xff00e91c>
    ef24:	3809883a 	mov	r4,r7
    ef28:	0011883a 	mov	r8,zero
    ef2c:	0005883a 	mov	r2,zero
    ef30:	003ee306 	br	eac0 <__alt_data_end+0xff00eac0>
    ef34:	1c62b03a 	or	r17,r3,r17
    ef38:	8822c03a 	cmpne	r17,r17,zero
    ef3c:	0005883a 	mov	r2,zero
    ef40:	003f8906 	br	ed68 <__alt_data_end+0xff00ed68>
    ef44:	3809883a 	mov	r4,r7
    ef48:	4821883a 	mov	r16,r9
    ef4c:	0011883a 	mov	r8,zero
    ef50:	0005883a 	mov	r2,zero
    ef54:	003eda06 	br	eac0 <__alt_data_end+0xff00eac0>
    ef58:	0101ffc4 	movi	r4,2047
    ef5c:	49003b26 	beq	r9,r4,f04c <__subdf3+0x7b4>
    ef60:	0085c83a 	sub	r2,zero,r2
    ef64:	18c02034 	orhi	r3,r3,128
    ef68:	01000e04 	movi	r4,56
    ef6c:	20806e16 	blt	r4,r2,f128 <__subdf3+0x890>
    ef70:	010007c4 	movi	r4,31
    ef74:	20807716 	blt	r4,r2,f154 <__subdf3+0x8bc>
    ef78:	01000804 	movi	r4,32
    ef7c:	2089c83a 	sub	r4,r4,r2
    ef80:	1914983a 	sll	r10,r3,r4
    ef84:	8890d83a 	srl	r8,r17,r2
    ef88:	8908983a 	sll	r4,r17,r4
    ef8c:	1884d83a 	srl	r2,r3,r2
    ef90:	5222b03a 	or	r17,r10,r8
    ef94:	2006c03a 	cmpne	r3,r4,zero
    ef98:	88e2b03a 	or	r17,r17,r3
    ef9c:	89a3883a 	add	r17,r17,r6
    efa0:	1145883a 	add	r2,r2,r5
    efa4:	898d803a 	cmpltu	r6,r17,r6
    efa8:	3087883a 	add	r3,r6,r2
    efac:	4821883a 	mov	r16,r9
    efb0:	003ed906 	br	eb18 <__alt_data_end+0xff00eb18>
    efb4:	2984b03a 	or	r2,r5,r6
    efb8:	10004226 	beq	r2,zero,f0c4 <__subdf3+0x82c>
    efbc:	1808d0fa 	srli	r4,r3,3
    efc0:	8822d0fa 	srli	r17,r17,3
    efc4:	1806977a 	slli	r3,r3,29
    efc8:	2080022c 	andhi	r2,r4,8
    efcc:	1c62b03a 	or	r17,r3,r17
    efd0:	10000826 	beq	r2,zero,eff4 <__subdf3+0x75c>
    efd4:	2812d0fa 	srli	r9,r5,3
    efd8:	4880022c 	andhi	r2,r9,8
    efdc:	1000051e 	bne	r2,zero,eff4 <__subdf3+0x75c>
    efe0:	300cd0fa 	srli	r6,r6,3
    efe4:	2804977a 	slli	r2,r5,29
    efe8:	4809883a 	mov	r4,r9
    efec:	3825883a 	mov	r18,r7
    eff0:	11a2b03a 	or	r17,r2,r6
    eff4:	8806d77a 	srli	r3,r17,29
    eff8:	200890fa 	slli	r4,r4,3
    effc:	882290fa 	slli	r17,r17,3
    f000:	0401ffc4 	movi	r16,2047
    f004:	1906b03a 	or	r3,r3,r4
    f008:	003e4406 	br	e91c <__alt_data_end+0xff00e91c>
    f00c:	2984b03a 	or	r2,r5,r6
    f010:	103e4226 	beq	r2,zero,e91c <__alt_data_end+0xff00e91c>
    f014:	8989c83a 	sub	r4,r17,r6
    f018:	8911803a 	cmpltu	r8,r17,r4
    f01c:	1945c83a 	sub	r2,r3,r5
    f020:	1205c83a 	sub	r2,r2,r8
    f024:	1200202c 	andhi	r8,r2,128
    f028:	403e9a26 	beq	r8,zero,ea94 <__alt_data_end+0xff00ea94>
    f02c:	3463c83a 	sub	r17,r6,r17
    f030:	28c5c83a 	sub	r2,r5,r3
    f034:	344d803a 	cmpltu	r6,r6,r17
    f038:	1187c83a 	sub	r3,r2,r6
    f03c:	3825883a 	mov	r18,r7
    f040:	003e3606 	br	e91c <__alt_data_end+0xff00e91c>
    f044:	0101ffc4 	movi	r4,2047
    f048:	493fc71e 	bne	r9,r4,ef68 <__alt_data_end+0xff00ef68>
    f04c:	2807883a 	mov	r3,r5
    f050:	3023883a 	mov	r17,r6
    f054:	4821883a 	mov	r16,r9
    f058:	003e3006 	br	e91c <__alt_data_end+0xff00e91c>
    f05c:	10003626 	beq	r2,zero,f138 <__subdf3+0x8a0>
    f060:	2984b03a 	or	r2,r5,r6
    f064:	10001726 	beq	r2,zero,f0c4 <__subdf3+0x82c>
    f068:	1808d0fa 	srli	r4,r3,3
    f06c:	8822d0fa 	srli	r17,r17,3
    f070:	1806977a 	slli	r3,r3,29
    f074:	2080022c 	andhi	r2,r4,8
    f078:	1c62b03a 	or	r17,r3,r17
    f07c:	10000726 	beq	r2,zero,f09c <__subdf3+0x804>
    f080:	2812d0fa 	srli	r9,r5,3
    f084:	4880022c 	andhi	r2,r9,8
    f088:	1000041e 	bne	r2,zero,f09c <__subdf3+0x804>
    f08c:	300cd0fa 	srli	r6,r6,3
    f090:	2804977a 	slli	r2,r5,29
    f094:	4809883a 	mov	r4,r9
    f098:	11a2b03a 	or	r17,r2,r6
    f09c:	8806d77a 	srli	r3,r17,29
    f0a0:	200890fa 	slli	r4,r4,3
    f0a4:	882290fa 	slli	r17,r17,3
    f0a8:	3825883a 	mov	r18,r7
    f0ac:	1906b03a 	or	r3,r3,r4
    f0b0:	0401ffc4 	movi	r16,2047
    f0b4:	003e1906 	br	e91c <__alt_data_end+0xff00e91c>
    f0b8:	000b883a 	mov	r5,zero
    f0bc:	0005883a 	mov	r2,zero
    f0c0:	003e2e06 	br	e97c <__alt_data_end+0xff00e97c>
    f0c4:	0401ffc4 	movi	r16,2047
    f0c8:	003e1406 	br	e91c <__alt_data_end+0xff00e91c>
    f0cc:	0005883a 	mov	r2,zero
    f0d0:	003f7506 	br	eea8 <__alt_data_end+0xff00eea8>
    f0d4:	0005883a 	mov	r2,zero
    f0d8:	0009883a 	mov	r4,zero
    f0dc:	003e7806 	br	eac0 <__alt_data_end+0xff00eac0>
    f0e0:	123ff804 	addi	r8,r2,-32
    f0e4:	01000804 	movi	r4,32
    f0e8:	1a10d83a 	srl	r8,r3,r8
    f0ec:	11002526 	beq	r2,r4,f184 <__subdf3+0x8ec>
    f0f0:	01001004 	movi	r4,64
    f0f4:	2085c83a 	sub	r2,r4,r2
    f0f8:	1884983a 	sll	r2,r3,r2
    f0fc:	1444b03a 	or	r2,r2,r17
    f100:	1004c03a 	cmpne	r2,r2,zero
    f104:	40a2b03a 	or	r17,r8,r2
    f108:	0005883a 	mov	r2,zero
    f10c:	003f1606 	br	ed68 <__alt_data_end+0xff00ed68>
    f110:	02000434 	movhi	r8,16
    f114:	0009883a 	mov	r4,zero
    f118:	423fffc4 	addi	r8,r8,-1
    f11c:	00bfffc4 	movi	r2,-1
    f120:	0401ffc4 	movi	r16,2047
    f124:	003e6606 	br	eac0 <__alt_data_end+0xff00eac0>
    f128:	1c62b03a 	or	r17,r3,r17
    f12c:	8822c03a 	cmpne	r17,r17,zero
    f130:	0005883a 	mov	r2,zero
    f134:	003f9906 	br	ef9c <__alt_data_end+0xff00ef9c>
    f138:	2807883a 	mov	r3,r5
    f13c:	3023883a 	mov	r17,r6
    f140:	0401ffc4 	movi	r16,2047
    f144:	003df506 	br	e91c <__alt_data_end+0xff00e91c>
    f148:	2807883a 	mov	r3,r5
    f14c:	3023883a 	mov	r17,r6
    f150:	003df206 	br	e91c <__alt_data_end+0xff00e91c>
    f154:	123ff804 	addi	r8,r2,-32
    f158:	01000804 	movi	r4,32
    f15c:	1a10d83a 	srl	r8,r3,r8
    f160:	11000a26 	beq	r2,r4,f18c <__subdf3+0x8f4>
    f164:	01001004 	movi	r4,64
    f168:	2085c83a 	sub	r2,r4,r2
    f16c:	1884983a 	sll	r2,r3,r2
    f170:	1444b03a 	or	r2,r2,r17
    f174:	1004c03a 	cmpne	r2,r2,zero
    f178:	40a2b03a 	or	r17,r8,r2
    f17c:	0005883a 	mov	r2,zero
    f180:	003f8606 	br	ef9c <__alt_data_end+0xff00ef9c>
    f184:	0005883a 	mov	r2,zero
    f188:	003fdc06 	br	f0fc <__alt_data_end+0xff00f0fc>
    f18c:	0005883a 	mov	r2,zero
    f190:	003ff706 	br	f170 <__alt_data_end+0xff00f170>

0000f194 <__fixdfsi>:
    f194:	280cd53a 	srli	r6,r5,20
    f198:	00c00434 	movhi	r3,16
    f19c:	18ffffc4 	addi	r3,r3,-1
    f1a0:	3181ffcc 	andi	r6,r6,2047
    f1a4:	01c0ff84 	movi	r7,1022
    f1a8:	28c6703a 	and	r3,r5,r3
    f1ac:	280ad7fa 	srli	r5,r5,31
    f1b0:	3980120e 	bge	r7,r6,f1fc <__fixdfsi+0x68>
    f1b4:	00810744 	movi	r2,1053
    f1b8:	11800c16 	blt	r2,r6,f1ec <__fixdfsi+0x58>
    f1bc:	00810cc4 	movi	r2,1075
    f1c0:	1185c83a 	sub	r2,r2,r6
    f1c4:	01c007c4 	movi	r7,31
    f1c8:	18c00434 	orhi	r3,r3,16
    f1cc:	38800d16 	blt	r7,r2,f204 <__fixdfsi+0x70>
    f1d0:	31befb44 	addi	r6,r6,-1043
    f1d4:	2084d83a 	srl	r2,r4,r2
    f1d8:	1986983a 	sll	r3,r3,r6
    f1dc:	1884b03a 	or	r2,r3,r2
    f1e0:	28000726 	beq	r5,zero,f200 <__fixdfsi+0x6c>
    f1e4:	0085c83a 	sub	r2,zero,r2
    f1e8:	f800283a 	ret
    f1ec:	00a00034 	movhi	r2,32768
    f1f0:	10bfffc4 	addi	r2,r2,-1
    f1f4:	2885883a 	add	r2,r5,r2
    f1f8:	f800283a 	ret
    f1fc:	0005883a 	mov	r2,zero
    f200:	f800283a 	ret
    f204:	008104c4 	movi	r2,1043
    f208:	1185c83a 	sub	r2,r2,r6
    f20c:	1884d83a 	srl	r2,r3,r2
    f210:	003ff306 	br	f1e0 <__alt_data_end+0xff00f1e0>

0000f214 <__floatsidf>:
    f214:	defffd04 	addi	sp,sp,-12
    f218:	dfc00215 	stw	ra,8(sp)
    f21c:	dc400115 	stw	r17,4(sp)
    f220:	dc000015 	stw	r16,0(sp)
    f224:	20002b26 	beq	r4,zero,f2d4 <__floatsidf+0xc0>
    f228:	2023883a 	mov	r17,r4
    f22c:	2020d7fa 	srli	r16,r4,31
    f230:	20002d16 	blt	r4,zero,f2e8 <__floatsidf+0xd4>
    f234:	8809883a 	mov	r4,r17
    f238:	000f3980 	call	f398 <__clzsi2>
    f23c:	01410784 	movi	r5,1054
    f240:	288bc83a 	sub	r5,r5,r2
    f244:	01010cc4 	movi	r4,1075
    f248:	2149c83a 	sub	r4,r4,r5
    f24c:	00c007c4 	movi	r3,31
    f250:	1900160e 	bge	r3,r4,f2ac <__floatsidf+0x98>
    f254:	00c104c4 	movi	r3,1043
    f258:	1947c83a 	sub	r3,r3,r5
    f25c:	88c6983a 	sll	r3,r17,r3
    f260:	00800434 	movhi	r2,16
    f264:	10bfffc4 	addi	r2,r2,-1
    f268:	1886703a 	and	r3,r3,r2
    f26c:	2941ffcc 	andi	r5,r5,2047
    f270:	800d883a 	mov	r6,r16
    f274:	0005883a 	mov	r2,zero
    f278:	280a953a 	slli	r5,r5,20
    f27c:	31803fcc 	andi	r6,r6,255
    f280:	01000434 	movhi	r4,16
    f284:	300c97fa 	slli	r6,r6,31
    f288:	213fffc4 	addi	r4,r4,-1
    f28c:	1906703a 	and	r3,r3,r4
    f290:	1946b03a 	or	r3,r3,r5
    f294:	1986b03a 	or	r3,r3,r6
    f298:	dfc00217 	ldw	ra,8(sp)
    f29c:	dc400117 	ldw	r17,4(sp)
    f2a0:	dc000017 	ldw	r16,0(sp)
    f2a4:	dec00304 	addi	sp,sp,12
    f2a8:	f800283a 	ret
    f2ac:	00c002c4 	movi	r3,11
    f2b0:	1887c83a 	sub	r3,r3,r2
    f2b4:	88c6d83a 	srl	r3,r17,r3
    f2b8:	8904983a 	sll	r2,r17,r4
    f2bc:	01000434 	movhi	r4,16
    f2c0:	213fffc4 	addi	r4,r4,-1
    f2c4:	2941ffcc 	andi	r5,r5,2047
    f2c8:	1906703a 	and	r3,r3,r4
    f2cc:	800d883a 	mov	r6,r16
    f2d0:	003fe906 	br	f278 <__alt_data_end+0xff00f278>
    f2d4:	000d883a 	mov	r6,zero
    f2d8:	000b883a 	mov	r5,zero
    f2dc:	0007883a 	mov	r3,zero
    f2e0:	0005883a 	mov	r2,zero
    f2e4:	003fe406 	br	f278 <__alt_data_end+0xff00f278>
    f2e8:	0123c83a 	sub	r17,zero,r4
    f2ec:	003fd106 	br	f234 <__alt_data_end+0xff00f234>

0000f2f0 <__floatunsidf>:
    f2f0:	defffe04 	addi	sp,sp,-8
    f2f4:	dc000015 	stw	r16,0(sp)
    f2f8:	dfc00115 	stw	ra,4(sp)
    f2fc:	2021883a 	mov	r16,r4
    f300:	20002226 	beq	r4,zero,f38c <__floatunsidf+0x9c>
    f304:	000f3980 	call	f398 <__clzsi2>
    f308:	01010784 	movi	r4,1054
    f30c:	2089c83a 	sub	r4,r4,r2
    f310:	01810cc4 	movi	r6,1075
    f314:	310dc83a 	sub	r6,r6,r4
    f318:	00c007c4 	movi	r3,31
    f31c:	1980120e 	bge	r3,r6,f368 <__floatunsidf+0x78>
    f320:	00c104c4 	movi	r3,1043
    f324:	1907c83a 	sub	r3,r3,r4
    f328:	80ca983a 	sll	r5,r16,r3
    f32c:	00800434 	movhi	r2,16
    f330:	10bfffc4 	addi	r2,r2,-1
    f334:	2101ffcc 	andi	r4,r4,2047
    f338:	0021883a 	mov	r16,zero
    f33c:	288a703a 	and	r5,r5,r2
    f340:	2008953a 	slli	r4,r4,20
    f344:	00c00434 	movhi	r3,16
    f348:	18ffffc4 	addi	r3,r3,-1
    f34c:	28c6703a 	and	r3,r5,r3
    f350:	8005883a 	mov	r2,r16
    f354:	1906b03a 	or	r3,r3,r4
    f358:	dfc00117 	ldw	ra,4(sp)
    f35c:	dc000017 	ldw	r16,0(sp)
    f360:	dec00204 	addi	sp,sp,8
    f364:	f800283a 	ret
    f368:	00c002c4 	movi	r3,11
    f36c:	188bc83a 	sub	r5,r3,r2
    f370:	814ad83a 	srl	r5,r16,r5
    f374:	00c00434 	movhi	r3,16
    f378:	18ffffc4 	addi	r3,r3,-1
    f37c:	81a0983a 	sll	r16,r16,r6
    f380:	2101ffcc 	andi	r4,r4,2047
    f384:	28ca703a 	and	r5,r5,r3
    f388:	003fed06 	br	f340 <__alt_data_end+0xff00f340>
    f38c:	0009883a 	mov	r4,zero
    f390:	000b883a 	mov	r5,zero
    f394:	003fea06 	br	f340 <__alt_data_end+0xff00f340>

0000f398 <__clzsi2>:
    f398:	00bfffd4 	movui	r2,65535
    f39c:	11000536 	bltu	r2,r4,f3b4 <__clzsi2+0x1c>
    f3a0:	00803fc4 	movi	r2,255
    f3a4:	11000f36 	bltu	r2,r4,f3e4 <__clzsi2+0x4c>
    f3a8:	00800804 	movi	r2,32
    f3ac:	0007883a 	mov	r3,zero
    f3b0:	00000506 	br	f3c8 <__clzsi2+0x30>
    f3b4:	00804034 	movhi	r2,256
    f3b8:	10bfffc4 	addi	r2,r2,-1
    f3bc:	11000c2e 	bgeu	r2,r4,f3f0 <__clzsi2+0x58>
    f3c0:	00800204 	movi	r2,8
    f3c4:	00c00604 	movi	r3,24
    f3c8:	20c8d83a 	srl	r4,r4,r3
    f3cc:	00c00074 	movhi	r3,1
    f3d0:	18c93604 	addi	r3,r3,9432
    f3d4:	1909883a 	add	r4,r3,r4
    f3d8:	20c00003 	ldbu	r3,0(r4)
    f3dc:	10c5c83a 	sub	r2,r2,r3
    f3e0:	f800283a 	ret
    f3e4:	00800604 	movi	r2,24
    f3e8:	00c00204 	movi	r3,8
    f3ec:	003ff606 	br	f3c8 <__alt_data_end+0xff00f3c8>
    f3f0:	00800404 	movi	r2,16
    f3f4:	1007883a 	mov	r3,r2
    f3f8:	003ff306 	br	f3c8 <__alt_data_end+0xff00f3c8>

0000f3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3fc:	defffe04 	addi	sp,sp,-8
    f400:	dfc00115 	stw	ra,4(sp)
    f404:	df000015 	stw	fp,0(sp)
    f408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f40c:	d0a00d17 	ldw	r2,-32716(gp)
    f410:	10000326 	beq	r2,zero,f420 <alt_get_errno+0x24>
    f414:	d0a00d17 	ldw	r2,-32716(gp)
    f418:	103ee83a 	callr	r2
    f41c:	00000106 	br	f424 <alt_get_errno+0x28>
    f420:	d0a6dc04 	addi	r2,gp,-25744
}
    f424:	e037883a 	mov	sp,fp
    f428:	dfc00117 	ldw	ra,4(sp)
    f42c:	df000017 	ldw	fp,0(sp)
    f430:	dec00204 	addi	sp,sp,8
    f434:	f800283a 	ret

0000f438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f438:	defffb04 	addi	sp,sp,-20
    f43c:	dfc00415 	stw	ra,16(sp)
    f440:	df000315 	stw	fp,12(sp)
    f444:	df000304 	addi	fp,sp,12
    f448:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f44c:	e0bfff17 	ldw	r2,-4(fp)
    f450:	10000616 	blt	r2,zero,f46c <close+0x34>
    f454:	e0bfff17 	ldw	r2,-4(fp)
    f458:	10c00324 	muli	r3,r2,12
    f45c:	00800074 	movhi	r2,1
    f460:	108bb404 	addi	r2,r2,11984
    f464:	1885883a 	add	r2,r3,r2
    f468:	00000106 	br	f470 <close+0x38>
    f46c:	0005883a 	mov	r2,zero
    f470:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f474:	e0bffd17 	ldw	r2,-12(fp)
    f478:	10001926 	beq	r2,zero,f4e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f47c:	e0bffd17 	ldw	r2,-12(fp)
    f480:	10800017 	ldw	r2,0(r2)
    f484:	10800417 	ldw	r2,16(r2)
    f488:	10000626 	beq	r2,zero,f4a4 <close+0x6c>
    f48c:	e0bffd17 	ldw	r2,-12(fp)
    f490:	10800017 	ldw	r2,0(r2)
    f494:	10800417 	ldw	r2,16(r2)
    f498:	e13ffd17 	ldw	r4,-12(fp)
    f49c:	103ee83a 	callr	r2
    f4a0:	00000106 	br	f4a8 <close+0x70>
    f4a4:	0005883a 	mov	r2,zero
    f4a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f4ac:	e13fff17 	ldw	r4,-4(fp)
    f4b0:	000faf80 	call	faf8 <alt_release_fd>
    if (rval < 0)
    f4b4:	e0bffe17 	ldw	r2,-8(fp)
    f4b8:	1000070e 	bge	r2,zero,f4d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f4bc:	000f3fc0 	call	f3fc <alt_get_errno>
    f4c0:	1007883a 	mov	r3,r2
    f4c4:	e0bffe17 	ldw	r2,-8(fp)
    f4c8:	0085c83a 	sub	r2,zero,r2
    f4cc:	18800015 	stw	r2,0(r3)
      return -1;
    f4d0:	00bfffc4 	movi	r2,-1
    f4d4:	00000706 	br	f4f4 <close+0xbc>
    }
    return 0;
    f4d8:	0005883a 	mov	r2,zero
    f4dc:	00000506 	br	f4f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4e0:	000f3fc0 	call	f3fc <alt_get_errno>
    f4e4:	1007883a 	mov	r3,r2
    f4e8:	00801444 	movi	r2,81
    f4ec:	18800015 	stw	r2,0(r3)
    return -1;
    f4f0:	00bfffc4 	movi	r2,-1
  }
}
    f4f4:	e037883a 	mov	sp,fp
    f4f8:	dfc00117 	ldw	ra,4(sp)
    f4fc:	df000017 	ldw	fp,0(sp)
    f500:	dec00204 	addi	sp,sp,8
    f504:	f800283a 	ret

0000f508 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f508:	defffc04 	addi	sp,sp,-16
    f50c:	df000315 	stw	fp,12(sp)
    f510:	df000304 	addi	fp,sp,12
    f514:	e13ffd15 	stw	r4,-12(fp)
    f518:	e17ffe15 	stw	r5,-8(fp)
    f51c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f520:	e0bfff17 	ldw	r2,-4(fp)
}
    f524:	e037883a 	mov	sp,fp
    f528:	df000017 	ldw	fp,0(sp)
    f52c:	dec00104 	addi	sp,sp,4
    f530:	f800283a 	ret

0000f534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f534:	defffe04 	addi	sp,sp,-8
    f538:	dfc00115 	stw	ra,4(sp)
    f53c:	df000015 	stw	fp,0(sp)
    f540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f544:	d0a00d17 	ldw	r2,-32716(gp)
    f548:	10000326 	beq	r2,zero,f558 <alt_get_errno+0x24>
    f54c:	d0a00d17 	ldw	r2,-32716(gp)
    f550:	103ee83a 	callr	r2
    f554:	00000106 	br	f55c <alt_get_errno+0x28>
    f558:	d0a6dc04 	addi	r2,gp,-25744
}
    f55c:	e037883a 	mov	sp,fp
    f560:	dfc00117 	ldw	ra,4(sp)
    f564:	df000017 	ldw	fp,0(sp)
    f568:	dec00204 	addi	sp,sp,8
    f56c:	f800283a 	ret

0000f570 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f570:	defffb04 	addi	sp,sp,-20
    f574:	dfc00415 	stw	ra,16(sp)
    f578:	df000315 	stw	fp,12(sp)
    f57c:	df000304 	addi	fp,sp,12
    f580:	e13ffe15 	stw	r4,-8(fp)
    f584:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f588:	e0bffe17 	ldw	r2,-8(fp)
    f58c:	10000616 	blt	r2,zero,f5a8 <fstat+0x38>
    f590:	e0bffe17 	ldw	r2,-8(fp)
    f594:	10c00324 	muli	r3,r2,12
    f598:	00800074 	movhi	r2,1
    f59c:	108bb404 	addi	r2,r2,11984
    f5a0:	1885883a 	add	r2,r3,r2
    f5a4:	00000106 	br	f5ac <fstat+0x3c>
    f5a8:	0005883a 	mov	r2,zero
    f5ac:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f5b0:	e0bffd17 	ldw	r2,-12(fp)
    f5b4:	10001026 	beq	r2,zero,f5f8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f5b8:	e0bffd17 	ldw	r2,-12(fp)
    f5bc:	10800017 	ldw	r2,0(r2)
    f5c0:	10800817 	ldw	r2,32(r2)
    f5c4:	10000726 	beq	r2,zero,f5e4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	10800017 	ldw	r2,0(r2)
    f5d0:	10800817 	ldw	r2,32(r2)
    f5d4:	e17fff17 	ldw	r5,-4(fp)
    f5d8:	e13ffd17 	ldw	r4,-12(fp)
    f5dc:	103ee83a 	callr	r2
    f5e0:	00000a06 	br	f60c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f5e4:	e0bfff17 	ldw	r2,-4(fp)
    f5e8:	00c80004 	movi	r3,8192
    f5ec:	10c00115 	stw	r3,4(r2)
      return 0;
    f5f0:	0005883a 	mov	r2,zero
    f5f4:	00000506 	br	f60c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5f8:	000f5340 	call	f534 <alt_get_errno>
    f5fc:	1007883a 	mov	r3,r2
    f600:	00801444 	movi	r2,81
    f604:	18800015 	stw	r2,0(r3)
    return -1;
    f608:	00bfffc4 	movi	r2,-1
  }
}
    f60c:	e037883a 	mov	sp,fp
    f610:	dfc00117 	ldw	ra,4(sp)
    f614:	df000017 	ldw	fp,0(sp)
    f618:	dec00204 	addi	sp,sp,8
    f61c:	f800283a 	ret

0000f620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f620:	defffe04 	addi	sp,sp,-8
    f624:	dfc00115 	stw	ra,4(sp)
    f628:	df000015 	stw	fp,0(sp)
    f62c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f630:	d0a00d17 	ldw	r2,-32716(gp)
    f634:	10000326 	beq	r2,zero,f644 <alt_get_errno+0x24>
    f638:	d0a00d17 	ldw	r2,-32716(gp)
    f63c:	103ee83a 	callr	r2
    f640:	00000106 	br	f648 <alt_get_errno+0x28>
    f644:	d0a6dc04 	addi	r2,gp,-25744
}
    f648:	e037883a 	mov	sp,fp
    f64c:	dfc00117 	ldw	ra,4(sp)
    f650:	df000017 	ldw	fp,0(sp)
    f654:	dec00204 	addi	sp,sp,8
    f658:	f800283a 	ret

0000f65c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f65c:	deffed04 	addi	sp,sp,-76
    f660:	dfc01215 	stw	ra,72(sp)
    f664:	df001115 	stw	fp,68(sp)
    f668:	df001104 	addi	fp,sp,68
    f66c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f670:	e0bfff17 	ldw	r2,-4(fp)
    f674:	10000616 	blt	r2,zero,f690 <isatty+0x34>
    f678:	e0bfff17 	ldw	r2,-4(fp)
    f67c:	10c00324 	muli	r3,r2,12
    f680:	00800074 	movhi	r2,1
    f684:	108bb404 	addi	r2,r2,11984
    f688:	1885883a 	add	r2,r3,r2
    f68c:	00000106 	br	f694 <isatty+0x38>
    f690:	0005883a 	mov	r2,zero
    f694:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f698:	e0bfef17 	ldw	r2,-68(fp)
    f69c:	10000e26 	beq	r2,zero,f6d8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f6a0:	e0bfef17 	ldw	r2,-68(fp)
    f6a4:	10800017 	ldw	r2,0(r2)
    f6a8:	10800817 	ldw	r2,32(r2)
    f6ac:	1000021e 	bne	r2,zero,f6b8 <isatty+0x5c>
    {
      return 1;
    f6b0:	00800044 	movi	r2,1
    f6b4:	00000d06 	br	f6ec <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f6b8:	e0bff004 	addi	r2,fp,-64
    f6bc:	100b883a 	mov	r5,r2
    f6c0:	e13fff17 	ldw	r4,-4(fp)
    f6c4:	000f5700 	call	f570 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f6c8:	e0bff117 	ldw	r2,-60(fp)
    f6cc:	10880020 	cmpeqi	r2,r2,8192
    f6d0:	10803fcc 	andi	r2,r2,255
    f6d4:	00000506 	br	f6ec <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f6d8:	000f6200 	call	f620 <alt_get_errno>
    f6dc:	1007883a 	mov	r3,r2
    f6e0:	00801444 	movi	r2,81
    f6e4:	18800015 	stw	r2,0(r3)
    return 0;
    f6e8:	0005883a 	mov	r2,zero
  }
}
    f6ec:	e037883a 	mov	sp,fp
    f6f0:	dfc00117 	ldw	ra,4(sp)
    f6f4:	df000017 	ldw	fp,0(sp)
    f6f8:	dec00204 	addi	sp,sp,8
    f6fc:	f800283a 	ret

0000f700 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f700:	defffc04 	addi	sp,sp,-16
    f704:	df000315 	stw	fp,12(sp)
    f708:	df000304 	addi	fp,sp,12
    f70c:	e13ffd15 	stw	r4,-12(fp)
    f710:	e17ffe15 	stw	r5,-8(fp)
    f714:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f718:	e0fffe17 	ldw	r3,-8(fp)
    f71c:	e0bffd17 	ldw	r2,-12(fp)
    f720:	18800c26 	beq	r3,r2,f754 <alt_load_section+0x54>
  {
    while( to != end )
    f724:	00000806 	br	f748 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f728:	e0bffe17 	ldw	r2,-8(fp)
    f72c:	10c00104 	addi	r3,r2,4
    f730:	e0fffe15 	stw	r3,-8(fp)
    f734:	e0fffd17 	ldw	r3,-12(fp)
    f738:	19000104 	addi	r4,r3,4
    f73c:	e13ffd15 	stw	r4,-12(fp)
    f740:	18c00017 	ldw	r3,0(r3)
    f744:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f748:	e0fffe17 	ldw	r3,-8(fp)
    f74c:	e0bfff17 	ldw	r2,-4(fp)
    f750:	18bff51e 	bne	r3,r2,f728 <__alt_data_end+0xff00f728>
    {
      *to++ = *from++;
    }
  }
}
    f754:	0001883a 	nop
    f758:	e037883a 	mov	sp,fp
    f75c:	df000017 	ldw	fp,0(sp)
    f760:	dec00104 	addi	sp,sp,4
    f764:	f800283a 	ret

0000f768 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f768:	defffe04 	addi	sp,sp,-8
    f76c:	dfc00115 	stw	ra,4(sp)
    f770:	df000015 	stw	fp,0(sp)
    f774:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f778:	01800074 	movhi	r6,1
    f77c:	31903e04 	addi	r6,r6,16632
    f780:	01400074 	movhi	r5,1
    f784:	29498104 	addi	r5,r5,9732
    f788:	01000074 	movhi	r4,1
    f78c:	21103e04 	addi	r4,r4,16632
    f790:	000f7000 	call	f700 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f794:	01800034 	movhi	r6,0
    f798:	31809104 	addi	r6,r6,580
    f79c:	01400034 	movhi	r5,0
    f7a0:	29400804 	addi	r5,r5,32
    f7a4:	01000034 	movhi	r4,0
    f7a8:	21000804 	addi	r4,r4,32
    f7ac:	000f7000 	call	f700 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f7b0:	01800074 	movhi	r6,1
    f7b4:	31898104 	addi	r6,r6,9732
    f7b8:	01400074 	movhi	r5,1
    f7bc:	29478f04 	addi	r5,r5,7740
    f7c0:	01000074 	movhi	r4,1
    f7c4:	21078f04 	addi	r4,r4,7740
    f7c8:	000f7000 	call	f700 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f7cc:	0010d500 	call	10d50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f7d0:	0010f100 	call	10f10 <alt_icache_flush_all>
}
    f7d4:	0001883a 	nop
    f7d8:	e037883a 	mov	sp,fp
    f7dc:	dfc00117 	ldw	ra,4(sp)
    f7e0:	df000017 	ldw	fp,0(sp)
    f7e4:	dec00204 	addi	sp,sp,8
    f7e8:	f800283a 	ret

0000f7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f7ec:	defffe04 	addi	sp,sp,-8
    f7f0:	dfc00115 	stw	ra,4(sp)
    f7f4:	df000015 	stw	fp,0(sp)
    f7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f7fc:	d0a00d17 	ldw	r2,-32716(gp)
    f800:	10000326 	beq	r2,zero,f810 <alt_get_errno+0x24>
    f804:	d0a00d17 	ldw	r2,-32716(gp)
    f808:	103ee83a 	callr	r2
    f80c:	00000106 	br	f814 <alt_get_errno+0x28>
    f810:	d0a6dc04 	addi	r2,gp,-25744
}
    f814:	e037883a 	mov	sp,fp
    f818:	dfc00117 	ldw	ra,4(sp)
    f81c:	df000017 	ldw	fp,0(sp)
    f820:	dec00204 	addi	sp,sp,8
    f824:	f800283a 	ret

0000f828 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f828:	defff904 	addi	sp,sp,-28
    f82c:	dfc00615 	stw	ra,24(sp)
    f830:	df000515 	stw	fp,20(sp)
    f834:	df000504 	addi	fp,sp,20
    f838:	e13ffd15 	stw	r4,-12(fp)
    f83c:	e17ffe15 	stw	r5,-8(fp)
    f840:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f844:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f848:	e0bffd17 	ldw	r2,-12(fp)
    f84c:	10000616 	blt	r2,zero,f868 <lseek+0x40>
    f850:	e0bffd17 	ldw	r2,-12(fp)
    f854:	10c00324 	muli	r3,r2,12
    f858:	00800074 	movhi	r2,1
    f85c:	108bb404 	addi	r2,r2,11984
    f860:	1885883a 	add	r2,r3,r2
    f864:	00000106 	br	f86c <lseek+0x44>
    f868:	0005883a 	mov	r2,zero
    f86c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f870:	e0bffc17 	ldw	r2,-16(fp)
    f874:	10001026 	beq	r2,zero,f8b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f878:	e0bffc17 	ldw	r2,-16(fp)
    f87c:	10800017 	ldw	r2,0(r2)
    f880:	10800717 	ldw	r2,28(r2)
    f884:	10000926 	beq	r2,zero,f8ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f888:	e0bffc17 	ldw	r2,-16(fp)
    f88c:	10800017 	ldw	r2,0(r2)
    f890:	10800717 	ldw	r2,28(r2)
    f894:	e1bfff17 	ldw	r6,-4(fp)
    f898:	e17ffe17 	ldw	r5,-8(fp)
    f89c:	e13ffc17 	ldw	r4,-16(fp)
    f8a0:	103ee83a 	callr	r2
    f8a4:	e0bffb15 	stw	r2,-20(fp)
    f8a8:	00000506 	br	f8c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f8ac:	00bfde84 	movi	r2,-134
    f8b0:	e0bffb15 	stw	r2,-20(fp)
    f8b4:	00000206 	br	f8c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f8b8:	00bfebc4 	movi	r2,-81
    f8bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f8c0:	e0bffb17 	ldw	r2,-20(fp)
    f8c4:	1000070e 	bge	r2,zero,f8e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f8c8:	000f7ec0 	call	f7ec <alt_get_errno>
    f8cc:	1007883a 	mov	r3,r2
    f8d0:	e0bffb17 	ldw	r2,-20(fp)
    f8d4:	0085c83a 	sub	r2,zero,r2
    f8d8:	18800015 	stw	r2,0(r3)
    rc = -1;
    f8dc:	00bfffc4 	movi	r2,-1
    f8e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f8e4:	e0bffb17 	ldw	r2,-20(fp)
}
    f8e8:	e037883a 	mov	sp,fp
    f8ec:	dfc00117 	ldw	ra,4(sp)
    f8f0:	df000017 	ldw	fp,0(sp)
    f8f4:	dec00204 	addi	sp,sp,8
    f8f8:	f800283a 	ret

0000f8fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f8fc:	defffd04 	addi	sp,sp,-12
    f900:	dfc00215 	stw	ra,8(sp)
    f904:	df000115 	stw	fp,4(sp)
    f908:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f90c:	0009883a 	mov	r4,zero
    f910:	000fda40 	call	fda4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f914:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f918:	000fddc0 	call	fddc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f91c:	01800074 	movhi	r6,1
    f920:	31897904 	addi	r6,r6,9700
    f924:	01400074 	movhi	r5,1
    f928:	29497904 	addi	r5,r5,9700
    f92c:	01000074 	movhi	r4,1
    f930:	21097904 	addi	r4,r4,9700
    f934:	00112a80 	call	112a8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f938:	0010e500 	call	10e50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f93c:	01000074 	movhi	r4,1
    f940:	2103ac04 	addi	r4,r4,3760
    f944:	0011aa80 	call	11aa8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f948:	d0a6e017 	ldw	r2,-25728(gp)
    f94c:	d0e6e117 	ldw	r3,-25724(gp)
    f950:	d126e217 	ldw	r4,-25720(gp)
    f954:	200d883a 	mov	r6,r4
    f958:	180b883a 	mov	r5,r3
    f95c:	1009883a 	mov	r4,r2
    f960:	00012d80 	call	12d8 <main>
    f964:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f968:	01000044 	movi	r4,1
    f96c:	000f4380 	call	f438 <close>
  exit (result);
    f970:	e13fff17 	ldw	r4,-4(fp)
    f974:	0011abc0 	call	11abc <exit>

0000f978 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f978:	defffe04 	addi	sp,sp,-8
    f97c:	df000115 	stw	fp,4(sp)
    f980:	df000104 	addi	fp,sp,4
    f984:	e13fff15 	stw	r4,-4(fp)
}
    f988:	0001883a 	nop
    f98c:	e037883a 	mov	sp,fp
    f990:	df000017 	ldw	fp,0(sp)
    f994:	dec00104 	addi	sp,sp,4
    f998:	f800283a 	ret

0000f99c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f99c:	defffe04 	addi	sp,sp,-8
    f9a0:	df000115 	stw	fp,4(sp)
    f9a4:	df000104 	addi	fp,sp,4
    f9a8:	e13fff15 	stw	r4,-4(fp)
}
    f9ac:	0001883a 	nop
    f9b0:	e037883a 	mov	sp,fp
    f9b4:	df000017 	ldw	fp,0(sp)
    f9b8:	dec00104 	addi	sp,sp,4
    f9bc:	f800283a 	ret

0000f9c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f9c0:	defffe04 	addi	sp,sp,-8
    f9c4:	dfc00115 	stw	ra,4(sp)
    f9c8:	df000015 	stw	fp,0(sp)
    f9cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f9d0:	d0a00d17 	ldw	r2,-32716(gp)
    f9d4:	10000326 	beq	r2,zero,f9e4 <alt_get_errno+0x24>
    f9d8:	d0a00d17 	ldw	r2,-32716(gp)
    f9dc:	103ee83a 	callr	r2
    f9e0:	00000106 	br	f9e8 <alt_get_errno+0x28>
    f9e4:	d0a6dc04 	addi	r2,gp,-25744
}
    f9e8:	e037883a 	mov	sp,fp
    f9ec:	dfc00117 	ldw	ra,4(sp)
    f9f0:	df000017 	ldw	fp,0(sp)
    f9f4:	dec00204 	addi	sp,sp,8
    f9f8:	f800283a 	ret

0000f9fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f9fc:	defff904 	addi	sp,sp,-28
    fa00:	dfc00615 	stw	ra,24(sp)
    fa04:	df000515 	stw	fp,20(sp)
    fa08:	df000504 	addi	fp,sp,20
    fa0c:	e13ffd15 	stw	r4,-12(fp)
    fa10:	e17ffe15 	stw	r5,-8(fp)
    fa14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa18:	e0bffd17 	ldw	r2,-12(fp)
    fa1c:	10000616 	blt	r2,zero,fa38 <read+0x3c>
    fa20:	e0bffd17 	ldw	r2,-12(fp)
    fa24:	10c00324 	muli	r3,r2,12
    fa28:	00800074 	movhi	r2,1
    fa2c:	108bb404 	addi	r2,r2,11984
    fa30:	1885883a 	add	r2,r3,r2
    fa34:	00000106 	br	fa3c <read+0x40>
    fa38:	0005883a 	mov	r2,zero
    fa3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fa40:	e0bffb17 	ldw	r2,-20(fp)
    fa44:	10002226 	beq	r2,zero,fad0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa48:	e0bffb17 	ldw	r2,-20(fp)
    fa4c:	10800217 	ldw	r2,8(r2)
    fa50:	108000cc 	andi	r2,r2,3
    fa54:	10800060 	cmpeqi	r2,r2,1
    fa58:	1000181e 	bne	r2,zero,fabc <read+0xc0>
        (fd->dev->read))
    fa5c:	e0bffb17 	ldw	r2,-20(fp)
    fa60:	10800017 	ldw	r2,0(r2)
    fa64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa68:	10001426 	beq	r2,zero,fabc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa6c:	e0bffb17 	ldw	r2,-20(fp)
    fa70:	10800017 	ldw	r2,0(r2)
    fa74:	10800517 	ldw	r2,20(r2)
    fa78:	e0ffff17 	ldw	r3,-4(fp)
    fa7c:	180d883a 	mov	r6,r3
    fa80:	e17ffe17 	ldw	r5,-8(fp)
    fa84:	e13ffb17 	ldw	r4,-20(fp)
    fa88:	103ee83a 	callr	r2
    fa8c:	e0bffc15 	stw	r2,-16(fp)
    fa90:	e0bffc17 	ldw	r2,-16(fp)
    fa94:	1000070e 	bge	r2,zero,fab4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fa98:	000f9c00 	call	f9c0 <alt_get_errno>
    fa9c:	1007883a 	mov	r3,r2
    faa0:	e0bffc17 	ldw	r2,-16(fp)
    faa4:	0085c83a 	sub	r2,zero,r2
    faa8:	18800015 	stw	r2,0(r3)
          return -1;
    faac:	00bfffc4 	movi	r2,-1
    fab0:	00000c06 	br	fae4 <read+0xe8>
        }
        return rval;
    fab4:	e0bffc17 	ldw	r2,-16(fp)
    fab8:	00000a06 	br	fae4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fabc:	000f9c00 	call	f9c0 <alt_get_errno>
    fac0:	1007883a 	mov	r3,r2
    fac4:	00800344 	movi	r2,13
    fac8:	18800015 	stw	r2,0(r3)
    facc:	00000406 	br	fae0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fad0:	000f9c00 	call	f9c0 <alt_get_errno>
    fad4:	1007883a 	mov	r3,r2
    fad8:	00801444 	movi	r2,81
    fadc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fae0:	00bfffc4 	movi	r2,-1
}
    fae4:	e037883a 	mov	sp,fp
    fae8:	dfc00117 	ldw	ra,4(sp)
    faec:	df000017 	ldw	fp,0(sp)
    faf0:	dec00204 	addi	sp,sp,8
    faf4:	f800283a 	ret

0000faf8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    faf8:	defffe04 	addi	sp,sp,-8
    fafc:	df000115 	stw	fp,4(sp)
    fb00:	df000104 	addi	fp,sp,4
    fb04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fb08:	e0bfff17 	ldw	r2,-4(fp)
    fb0c:	108000d0 	cmplti	r2,r2,3
    fb10:	10000d1e 	bne	r2,zero,fb48 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fb14:	00800074 	movhi	r2,1
    fb18:	108bb404 	addi	r2,r2,11984
    fb1c:	e0ffff17 	ldw	r3,-4(fp)
    fb20:	18c00324 	muli	r3,r3,12
    fb24:	10c5883a 	add	r2,r2,r3
    fb28:	10800204 	addi	r2,r2,8
    fb2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    fb30:	00800074 	movhi	r2,1
    fb34:	108bb404 	addi	r2,r2,11984
    fb38:	e0ffff17 	ldw	r3,-4(fp)
    fb3c:	18c00324 	muli	r3,r3,12
    fb40:	10c5883a 	add	r2,r2,r3
    fb44:	10000015 	stw	zero,0(r2)
  }
}
    fb48:	0001883a 	nop
    fb4c:	e037883a 	mov	sp,fp
    fb50:	df000017 	ldw	fp,0(sp)
    fb54:	dec00104 	addi	sp,sp,4
    fb58:	f800283a 	ret

0000fb5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fb5c:	defff904 	addi	sp,sp,-28
    fb60:	df000615 	stw	fp,24(sp)
    fb64:	df000604 	addi	fp,sp,24
    fb68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb6c:	0005303a 	rdctl	r2,status
    fb70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb74:	e0fffe17 	ldw	r3,-8(fp)
    fb78:	00bfff84 	movi	r2,-2
    fb7c:	1884703a 	and	r2,r3,r2
    fb80:	1001703a 	wrctl	status,r2
  
  return context;
    fb84:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fb88:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fb8c:	d0a00e17 	ldw	r2,-32712(gp)
    fb90:	10c000c4 	addi	r3,r2,3
    fb94:	00bfff04 	movi	r2,-4
    fb98:	1884703a 	and	r2,r3,r2
    fb9c:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fba0:	d0e00e17 	ldw	r3,-32712(gp)
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	1887883a 	add	r3,r3,r2
    fbac:	00804034 	movhi	r2,256
    fbb0:	10800004 	addi	r2,r2,0
    fbb4:	10c0062e 	bgeu	r2,r3,fbd0 <sbrk+0x74>
    fbb8:	e0bffb17 	ldw	r2,-20(fp)
    fbbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fbc0:	e0bffa17 	ldw	r2,-24(fp)
    fbc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fbc8:	00bfffc4 	movi	r2,-1
    fbcc:	00000b06 	br	fbfc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fbd0:	d0a00e17 	ldw	r2,-32712(gp)
    fbd4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fbd8:	d0e00e17 	ldw	r3,-32712(gp)
    fbdc:	e0bfff17 	ldw	r2,-4(fp)
    fbe0:	1885883a 	add	r2,r3,r2
    fbe4:	d0a00e15 	stw	r2,-32712(gp)
    fbe8:	e0bffb17 	ldw	r2,-20(fp)
    fbec:	e0bffc15 	stw	r2,-16(fp)
    fbf0:	e0bffc17 	ldw	r2,-16(fp)
    fbf4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fbf8:	e0bffd17 	ldw	r2,-12(fp)
} 
    fbfc:	e037883a 	mov	sp,fp
    fc00:	df000017 	ldw	fp,0(sp)
    fc04:	dec00104 	addi	sp,sp,4
    fc08:	f800283a 	ret

0000fc0c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fc0c:	defffd04 	addi	sp,sp,-12
    fc10:	dfc00215 	stw	ra,8(sp)
    fc14:	df000115 	stw	fp,4(sp)
    fc18:	df000104 	addi	fp,sp,4
    fc1c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fc20:	e13fff17 	ldw	r4,-4(fp)
    fc24:	0010bf80 	call	10bf8 <alt_busy_sleep>
}
    fc28:	e037883a 	mov	sp,fp
    fc2c:	dfc00117 	ldw	ra,4(sp)
    fc30:	df000017 	ldw	fp,0(sp)
    fc34:	dec00204 	addi	sp,sp,8
    fc38:	f800283a 	ret

0000fc3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc3c:	defffe04 	addi	sp,sp,-8
    fc40:	dfc00115 	stw	ra,4(sp)
    fc44:	df000015 	stw	fp,0(sp)
    fc48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc4c:	d0a00d17 	ldw	r2,-32716(gp)
    fc50:	10000326 	beq	r2,zero,fc60 <alt_get_errno+0x24>
    fc54:	d0a00d17 	ldw	r2,-32716(gp)
    fc58:	103ee83a 	callr	r2
    fc5c:	00000106 	br	fc64 <alt_get_errno+0x28>
    fc60:	d0a6dc04 	addi	r2,gp,-25744
}
    fc64:	e037883a 	mov	sp,fp
    fc68:	dfc00117 	ldw	ra,4(sp)
    fc6c:	df000017 	ldw	fp,0(sp)
    fc70:	dec00204 	addi	sp,sp,8
    fc74:	f800283a 	ret

0000fc78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fc78:	defff904 	addi	sp,sp,-28
    fc7c:	dfc00615 	stw	ra,24(sp)
    fc80:	df000515 	stw	fp,20(sp)
    fc84:	df000504 	addi	fp,sp,20
    fc88:	e13ffd15 	stw	r4,-12(fp)
    fc8c:	e17ffe15 	stw	r5,-8(fp)
    fc90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc94:	e0bffd17 	ldw	r2,-12(fp)
    fc98:	10000616 	blt	r2,zero,fcb4 <write+0x3c>
    fc9c:	e0bffd17 	ldw	r2,-12(fp)
    fca0:	10c00324 	muli	r3,r2,12
    fca4:	00800074 	movhi	r2,1
    fca8:	108bb404 	addi	r2,r2,11984
    fcac:	1885883a 	add	r2,r3,r2
    fcb0:	00000106 	br	fcb8 <write+0x40>
    fcb4:	0005883a 	mov	r2,zero
    fcb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fcbc:	e0bffb17 	ldw	r2,-20(fp)
    fcc0:	10002126 	beq	r2,zero,fd48 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fcc4:	e0bffb17 	ldw	r2,-20(fp)
    fcc8:	10800217 	ldw	r2,8(r2)
    fccc:	108000cc 	andi	r2,r2,3
    fcd0:	10001826 	beq	r2,zero,fd34 <write+0xbc>
    fcd4:	e0bffb17 	ldw	r2,-20(fp)
    fcd8:	10800017 	ldw	r2,0(r2)
    fcdc:	10800617 	ldw	r2,24(r2)
    fce0:	10001426 	beq	r2,zero,fd34 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fce4:	e0bffb17 	ldw	r2,-20(fp)
    fce8:	10800017 	ldw	r2,0(r2)
    fcec:	10800617 	ldw	r2,24(r2)
    fcf0:	e0ffff17 	ldw	r3,-4(fp)
    fcf4:	180d883a 	mov	r6,r3
    fcf8:	e17ffe17 	ldw	r5,-8(fp)
    fcfc:	e13ffb17 	ldw	r4,-20(fp)
    fd00:	103ee83a 	callr	r2
    fd04:	e0bffc15 	stw	r2,-16(fp)
    fd08:	e0bffc17 	ldw	r2,-16(fp)
    fd0c:	1000070e 	bge	r2,zero,fd2c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fd10:	000fc3c0 	call	fc3c <alt_get_errno>
    fd14:	1007883a 	mov	r3,r2
    fd18:	e0bffc17 	ldw	r2,-16(fp)
    fd1c:	0085c83a 	sub	r2,zero,r2
    fd20:	18800015 	stw	r2,0(r3)
        return -1;
    fd24:	00bfffc4 	movi	r2,-1
    fd28:	00000c06 	br	fd5c <write+0xe4>
      }
      return rval;
    fd2c:	e0bffc17 	ldw	r2,-16(fp)
    fd30:	00000a06 	br	fd5c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fd34:	000fc3c0 	call	fc3c <alt_get_errno>
    fd38:	1007883a 	mov	r3,r2
    fd3c:	00800344 	movi	r2,13
    fd40:	18800015 	stw	r2,0(r3)
    fd44:	00000406 	br	fd58 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fd48:	000fc3c0 	call	fc3c <alt_get_errno>
    fd4c:	1007883a 	mov	r3,r2
    fd50:	00801444 	movi	r2,81
    fd54:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fd58:	00bfffc4 	movi	r2,-1
}
    fd5c:	e037883a 	mov	sp,fp
    fd60:	dfc00117 	ldw	ra,4(sp)
    fd64:	df000017 	ldw	fp,0(sp)
    fd68:	dec00204 	addi	sp,sp,8
    fd6c:	f800283a 	ret

0000fd70 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fd70:	defffd04 	addi	sp,sp,-12
    fd74:	dfc00215 	stw	ra,8(sp)
    fd78:	df000115 	stw	fp,4(sp)
    fd7c:	df000104 	addi	fp,sp,4
    fd80:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fd84:	d1600a04 	addi	r5,gp,-32728
    fd88:	e13fff17 	ldw	r4,-4(fp)
    fd8c:	0010dac0 	call	10dac <alt_dev_llist_insert>
}
    fd90:	e037883a 	mov	sp,fp
    fd94:	dfc00117 	ldw	ra,4(sp)
    fd98:	df000017 	ldw	fp,0(sp)
    fd9c:	dec00204 	addi	sp,sp,8
    fda0:	f800283a 	ret

0000fda4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fda4:	defffd04 	addi	sp,sp,-12
    fda8:	dfc00215 	stw	ra,8(sp)
    fdac:	df000115 	stw	fp,4(sp)
    fdb0:	df000104 	addi	fp,sp,4
    fdb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    fdb8:	001171c0 	call	1171c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fdbc:	00800044 	movi	r2,1
    fdc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fdc4:	0001883a 	nop
    fdc8:	e037883a 	mov	sp,fp
    fdcc:	dfc00117 	ldw	ra,4(sp)
    fdd0:	df000017 	ldw	fp,0(sp)
    fdd4:	dec00204 	addi	sp,sp,8
    fdd8:	f800283a 	ret

0000fddc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fddc:	defffe04 	addi	sp,sp,-8
    fde0:	dfc00115 	stw	ra,4(sp)
    fde4:	df000015 	stw	fp,0(sp)
    fde8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    fdec:	00804034 	movhi	r2,256
    fdf0:	10840004 	addi	r2,r2,4096
    fdf4:	d0a6e315 	stw	r2,-25716(gp)
    fdf8:	0080bef4 	movhi	r2,763
    fdfc:	10bc2004 	addi	r2,r2,-3968
    fe00:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    fe04:	01c0fa04 	movi	r7,1000
    fe08:	01800104 	movi	r6,4
    fe0c:	000b883a 	mov	r5,zero
    fe10:	01004034 	movhi	r4,256
    fe14:	21040804 	addi	r4,r4,4128
    fe18:	00109380 	call	10938 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    fe1c:	000d883a 	mov	r6,zero
    fe20:	000b883a 	mov	r5,zero
    fe24:	01000074 	movhi	r4,1
    fe28:	210c1e04 	addi	r4,r4,12408
    fe2c:	000ffbc0 	call	ffbc <altera_avalon_jtag_uart_init>
    fe30:	01000074 	movhi	r4,1
    fe34:	210c1404 	addi	r4,r4,12368
    fe38:	000fd700 	call	fd70 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    fe3c:	0001883a 	nop
}
    fe40:	0001883a 	nop
    fe44:	e037883a 	mov	sp,fp
    fe48:	dfc00117 	ldw	ra,4(sp)
    fe4c:	df000017 	ldw	fp,0(sp)
    fe50:	dec00204 	addi	sp,sp,8
    fe54:	f800283a 	ret

0000fe58 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fe58:	defffa04 	addi	sp,sp,-24
    fe5c:	dfc00515 	stw	ra,20(sp)
    fe60:	df000415 	stw	fp,16(sp)
    fe64:	df000404 	addi	fp,sp,16
    fe68:	e13ffd15 	stw	r4,-12(fp)
    fe6c:	e17ffe15 	stw	r5,-8(fp)
    fe70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe74:	e0bffd17 	ldw	r2,-12(fp)
    fe78:	10800017 	ldw	r2,0(r2)
    fe7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fe80:	e0bffc17 	ldw	r2,-16(fp)
    fe84:	10c00a04 	addi	r3,r2,40
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10800217 	ldw	r2,8(r2)
    fe90:	100f883a 	mov	r7,r2
    fe94:	e1bfff17 	ldw	r6,-4(fp)
    fe98:	e17ffe17 	ldw	r5,-8(fp)
    fe9c:	1809883a 	mov	r4,r3
    fea0:	00104800 	call	10480 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fea4:	e037883a 	mov	sp,fp
    fea8:	dfc00117 	ldw	ra,4(sp)
    feac:	df000017 	ldw	fp,0(sp)
    feb0:	dec00204 	addi	sp,sp,8
    feb4:	f800283a 	ret

0000feb8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    feb8:	defffa04 	addi	sp,sp,-24
    febc:	dfc00515 	stw	ra,20(sp)
    fec0:	df000415 	stw	fp,16(sp)
    fec4:	df000404 	addi	fp,sp,16
    fec8:	e13ffd15 	stw	r4,-12(fp)
    fecc:	e17ffe15 	stw	r5,-8(fp)
    fed0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fed4:	e0bffd17 	ldw	r2,-12(fp)
    fed8:	10800017 	ldw	r2,0(r2)
    fedc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fee0:	e0bffc17 	ldw	r2,-16(fp)
    fee4:	10c00a04 	addi	r3,r2,40
    fee8:	e0bffd17 	ldw	r2,-12(fp)
    feec:	10800217 	ldw	r2,8(r2)
    fef0:	100f883a 	mov	r7,r2
    fef4:	e1bfff17 	ldw	r6,-4(fp)
    fef8:	e17ffe17 	ldw	r5,-8(fp)
    fefc:	1809883a 	mov	r4,r3
    ff00:	001069c0 	call	1069c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    ff04:	e037883a 	mov	sp,fp
    ff08:	dfc00117 	ldw	ra,4(sp)
    ff0c:	df000017 	ldw	fp,0(sp)
    ff10:	dec00204 	addi	sp,sp,8
    ff14:	f800283a 	ret

0000ff18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    ff18:	defffc04 	addi	sp,sp,-16
    ff1c:	dfc00315 	stw	ra,12(sp)
    ff20:	df000215 	stw	fp,8(sp)
    ff24:	df000204 	addi	fp,sp,8
    ff28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    ff2c:	e0bfff17 	ldw	r2,-4(fp)
    ff30:	10800017 	ldw	r2,0(r2)
    ff34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ff38:	e0bffe17 	ldw	r2,-8(fp)
    ff3c:	10c00a04 	addi	r3,r2,40
    ff40:	e0bfff17 	ldw	r2,-4(fp)
    ff44:	10800217 	ldw	r2,8(r2)
    ff48:	100b883a 	mov	r5,r2
    ff4c:	1809883a 	mov	r4,r3
    ff50:	00103280 	call	10328 <altera_avalon_jtag_uart_close>
}
    ff54:	e037883a 	mov	sp,fp
    ff58:	dfc00117 	ldw	ra,4(sp)
    ff5c:	df000017 	ldw	fp,0(sp)
    ff60:	dec00204 	addi	sp,sp,8
    ff64:	f800283a 	ret

0000ff68 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ff68:	defffa04 	addi	sp,sp,-24
    ff6c:	dfc00515 	stw	ra,20(sp)
    ff70:	df000415 	stw	fp,16(sp)
    ff74:	df000404 	addi	fp,sp,16
    ff78:	e13ffd15 	stw	r4,-12(fp)
    ff7c:	e17ffe15 	stw	r5,-8(fp)
    ff80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ff84:	e0bffd17 	ldw	r2,-12(fp)
    ff88:	10800017 	ldw	r2,0(r2)
    ff8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ff90:	e0bffc17 	ldw	r2,-16(fp)
    ff94:	10800a04 	addi	r2,r2,40
    ff98:	e1bfff17 	ldw	r6,-4(fp)
    ff9c:	e17ffe17 	ldw	r5,-8(fp)
    ffa0:	1009883a 	mov	r4,r2
    ffa4:	00103900 	call	10390 <altera_avalon_jtag_uart_ioctl>
}
    ffa8:	e037883a 	mov	sp,fp
    ffac:	dfc00117 	ldw	ra,4(sp)
    ffb0:	df000017 	ldw	fp,0(sp)
    ffb4:	dec00204 	addi	sp,sp,8
    ffb8:	f800283a 	ret

0000ffbc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ffbc:	defffa04 	addi	sp,sp,-24
    ffc0:	dfc00515 	stw	ra,20(sp)
    ffc4:	df000415 	stw	fp,16(sp)
    ffc8:	df000404 	addi	fp,sp,16
    ffcc:	e13ffd15 	stw	r4,-12(fp)
    ffd0:	e17ffe15 	stw	r5,-8(fp)
    ffd4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ffd8:	e0bffd17 	ldw	r2,-12(fp)
    ffdc:	00c00044 	movi	r3,1
    ffe0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ffe4:	e0bffd17 	ldw	r2,-12(fp)
    ffe8:	10800017 	ldw	r2,0(r2)
    ffec:	10800104 	addi	r2,r2,4
    fff0:	1007883a 	mov	r3,r2
    fff4:	e0bffd17 	ldw	r2,-12(fp)
    fff8:	10800817 	ldw	r2,32(r2)
    fffc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   10000:	e0bffe17 	ldw	r2,-8(fp)
   10004:	e0ffff17 	ldw	r3,-4(fp)
   10008:	d8000015 	stw	zero,0(sp)
   1000c:	e1fffd17 	ldw	r7,-12(fp)
   10010:	01800074 	movhi	r6,1
   10014:	31801f04 	addi	r6,r6,124
   10018:	180b883a 	mov	r5,r3
   1001c:	1009883a 	mov	r4,r2
   10020:	0010f440 	call	10f44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   10024:	e0bffd17 	ldw	r2,-12(fp)
   10028:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1002c:	e0bffd17 	ldw	r2,-12(fp)
   10030:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10034:	d0e6e617 	ldw	r3,-25704(gp)
   10038:	e1fffd17 	ldw	r7,-12(fp)
   1003c:	01800074 	movhi	r6,1
   10040:	3180a204 	addi	r6,r6,648
   10044:	180b883a 	mov	r5,r3
   10048:	1009883a 	mov	r4,r2
   1004c:	0010acc0 	call	10acc <alt_alarm_start>
   10050:	1000040e 	bge	r2,zero,10064 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   10054:	e0fffd17 	ldw	r3,-12(fp)
   10058:	00a00034 	movhi	r2,32768
   1005c:	10bfffc4 	addi	r2,r2,-1
   10060:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   10064:	0001883a 	nop
   10068:	e037883a 	mov	sp,fp
   1006c:	dfc00117 	ldw	ra,4(sp)
   10070:	df000017 	ldw	fp,0(sp)
   10074:	dec00204 	addi	sp,sp,8
   10078:	f800283a 	ret

0001007c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1007c:	defff804 	addi	sp,sp,-32
   10080:	df000715 	stw	fp,28(sp)
   10084:	df000704 	addi	fp,sp,28
   10088:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1008c:	e0bfff17 	ldw	r2,-4(fp)
   10090:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   10094:	e0bffb17 	ldw	r2,-20(fp)
   10098:	10800017 	ldw	r2,0(r2)
   1009c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   100a0:	e0bffc17 	ldw	r2,-16(fp)
   100a4:	10800104 	addi	r2,r2,4
   100a8:	10800037 	ldwio	r2,0(r2)
   100ac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   100b0:	e0bffd17 	ldw	r2,-12(fp)
   100b4:	1080c00c 	andi	r2,r2,768
   100b8:	10006d26 	beq	r2,zero,10270 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   100bc:	e0bffd17 	ldw	r2,-12(fp)
   100c0:	1080400c 	andi	r2,r2,256
   100c4:	10003526 	beq	r2,zero,1019c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   100c8:	00800074 	movhi	r2,1
   100cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100d0:	e0bffb17 	ldw	r2,-20(fp)
   100d4:	10800a17 	ldw	r2,40(r2)
   100d8:	10800044 	addi	r2,r2,1
   100dc:	1081ffcc 	andi	r2,r2,2047
   100e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   100e4:	e0bffb17 	ldw	r2,-20(fp)
   100e8:	10c00b17 	ldw	r3,44(r2)
   100ec:	e0bffe17 	ldw	r2,-8(fp)
   100f0:	18801526 	beq	r3,r2,10148 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   100f4:	e0bffc17 	ldw	r2,-16(fp)
   100f8:	10800037 	ldwio	r2,0(r2)
   100fc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   10100:	e0bff917 	ldw	r2,-28(fp)
   10104:	10a0000c 	andi	r2,r2,32768
   10108:	10001126 	beq	r2,zero,10150 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1010c:	e0bffb17 	ldw	r2,-20(fp)
   10110:	10800a17 	ldw	r2,40(r2)
   10114:	e0fff917 	ldw	r3,-28(fp)
   10118:	1809883a 	mov	r4,r3
   1011c:	e0fffb17 	ldw	r3,-20(fp)
   10120:	1885883a 	add	r2,r3,r2
   10124:	10800e04 	addi	r2,r2,56
   10128:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1012c:	e0bffb17 	ldw	r2,-20(fp)
   10130:	10800a17 	ldw	r2,40(r2)
   10134:	10800044 	addi	r2,r2,1
   10138:	10c1ffcc 	andi	r3,r2,2047
   1013c:	e0bffb17 	ldw	r2,-20(fp)
   10140:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   10144:	003fe206 	br	100d0 <__alt_data_end+0xff0100d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10148:	0001883a 	nop
   1014c:	00000106 	br	10154 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10150:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   10154:	e0bff917 	ldw	r2,-28(fp)
   10158:	10bfffec 	andhi	r2,r2,65535
   1015c:	10000f26 	beq	r2,zero,1019c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10160:	e0bffb17 	ldw	r2,-20(fp)
   10164:	10c00817 	ldw	r3,32(r2)
   10168:	00bfff84 	movi	r2,-2
   1016c:	1886703a 	and	r3,r3,r2
   10170:	e0bffb17 	ldw	r2,-20(fp)
   10174:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10178:	e0bffc17 	ldw	r2,-16(fp)
   1017c:	10800104 	addi	r2,r2,4
   10180:	1007883a 	mov	r3,r2
   10184:	e0bffb17 	ldw	r2,-20(fp)
   10188:	10800817 	ldw	r2,32(r2)
   1018c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10190:	e0bffc17 	ldw	r2,-16(fp)
   10194:	10800104 	addi	r2,r2,4
   10198:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1019c:	e0bffd17 	ldw	r2,-12(fp)
   101a0:	1080800c 	andi	r2,r2,512
   101a4:	103fbe26 	beq	r2,zero,100a0 <__alt_data_end+0xff0100a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   101a8:	e0bffd17 	ldw	r2,-12(fp)
   101ac:	1004d43a 	srli	r2,r2,16
   101b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   101b4:	00001406 	br	10208 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   101b8:	e0bffc17 	ldw	r2,-16(fp)
   101bc:	e0fffb17 	ldw	r3,-20(fp)
   101c0:	18c00d17 	ldw	r3,52(r3)
   101c4:	e13ffb17 	ldw	r4,-20(fp)
   101c8:	20c7883a 	add	r3,r4,r3
   101cc:	18c20e04 	addi	r3,r3,2104
   101d0:	18c00003 	ldbu	r3,0(r3)
   101d4:	18c03fcc 	andi	r3,r3,255
   101d8:	18c0201c 	xori	r3,r3,128
   101dc:	18ffe004 	addi	r3,r3,-128
   101e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   101e4:	e0bffb17 	ldw	r2,-20(fp)
   101e8:	10800d17 	ldw	r2,52(r2)
   101ec:	10800044 	addi	r2,r2,1
   101f0:	10c1ffcc 	andi	r3,r2,2047
   101f4:	e0bffb17 	ldw	r2,-20(fp)
   101f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   101fc:	e0bffa17 	ldw	r2,-24(fp)
   10200:	10bfffc4 	addi	r2,r2,-1
   10204:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   10208:	e0bffa17 	ldw	r2,-24(fp)
   1020c:	10000526 	beq	r2,zero,10224 <altera_avalon_jtag_uart_irq+0x1a8>
   10210:	e0bffb17 	ldw	r2,-20(fp)
   10214:	10c00d17 	ldw	r3,52(r2)
   10218:	e0bffb17 	ldw	r2,-20(fp)
   1021c:	10800c17 	ldw	r2,48(r2)
   10220:	18bfe51e 	bne	r3,r2,101b8 <__alt_data_end+0xff0101b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   10224:	e0bffa17 	ldw	r2,-24(fp)
   10228:	103f9d26 	beq	r2,zero,100a0 <__alt_data_end+0xff0100a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1022c:	e0bffb17 	ldw	r2,-20(fp)
   10230:	10c00817 	ldw	r3,32(r2)
   10234:	00bfff44 	movi	r2,-3
   10238:	1886703a 	and	r3,r3,r2
   1023c:	e0bffb17 	ldw	r2,-20(fp)
   10240:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10244:	e0bffb17 	ldw	r2,-20(fp)
   10248:	10800017 	ldw	r2,0(r2)
   1024c:	10800104 	addi	r2,r2,4
   10250:	1007883a 	mov	r3,r2
   10254:	e0bffb17 	ldw	r2,-20(fp)
   10258:	10800817 	ldw	r2,32(r2)
   1025c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10260:	e0bffc17 	ldw	r2,-16(fp)
   10264:	10800104 	addi	r2,r2,4
   10268:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1026c:	003f8c06 	br	100a0 <__alt_data_end+0xff0100a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10270:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   10274:	0001883a 	nop
   10278:	e037883a 	mov	sp,fp
   1027c:	df000017 	ldw	fp,0(sp)
   10280:	dec00104 	addi	sp,sp,4
   10284:	f800283a 	ret

00010288 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10288:	defff804 	addi	sp,sp,-32
   1028c:	df000715 	stw	fp,28(sp)
   10290:	df000704 	addi	fp,sp,28
   10294:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10298:	e0bffb17 	ldw	r2,-20(fp)
   1029c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   102a0:	e0bff917 	ldw	r2,-28(fp)
   102a4:	10800017 	ldw	r2,0(r2)
   102a8:	10800104 	addi	r2,r2,4
   102ac:	10800037 	ldwio	r2,0(r2)
   102b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   102b4:	e0bffa17 	ldw	r2,-24(fp)
   102b8:	1081000c 	andi	r2,r2,1024
   102bc:	10000b26 	beq	r2,zero,102ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   102c0:	e0bff917 	ldw	r2,-28(fp)
   102c4:	10800017 	ldw	r2,0(r2)
   102c8:	10800104 	addi	r2,r2,4
   102cc:	1007883a 	mov	r3,r2
   102d0:	e0bff917 	ldw	r2,-28(fp)
   102d4:	10800817 	ldw	r2,32(r2)
   102d8:	10810014 	ori	r2,r2,1024
   102dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   102e0:	e0bff917 	ldw	r2,-28(fp)
   102e4:	10000915 	stw	zero,36(r2)
   102e8:	00000a06 	br	10314 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   102ec:	e0bff917 	ldw	r2,-28(fp)
   102f0:	10c00917 	ldw	r3,36(r2)
   102f4:	00a00034 	movhi	r2,32768
   102f8:	10bfff04 	addi	r2,r2,-4
   102fc:	10c00536 	bltu	r2,r3,10314 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   10300:	e0bff917 	ldw	r2,-28(fp)
   10304:	10800917 	ldw	r2,36(r2)
   10308:	10c00044 	addi	r3,r2,1
   1030c:	e0bff917 	ldw	r2,-28(fp)
   10310:	10c00915 	stw	r3,36(r2)
   10314:	d0a6e617 	ldw	r2,-25704(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   10318:	e037883a 	mov	sp,fp
   1031c:	df000017 	ldw	fp,0(sp)
   10320:	dec00104 	addi	sp,sp,4
   10324:	f800283a 	ret

00010328 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   10328:	defffd04 	addi	sp,sp,-12
   1032c:	df000215 	stw	fp,8(sp)
   10330:	df000204 	addi	fp,sp,8
   10334:	e13ffe15 	stw	r4,-8(fp)
   10338:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1033c:	00000506 	br	10354 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10340:	e0bfff17 	ldw	r2,-4(fp)
   10344:	1090000c 	andi	r2,r2,16384
   10348:	10000226 	beq	r2,zero,10354 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1034c:	00bffd44 	movi	r2,-11
   10350:	00000b06 	br	10380 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10354:	e0bffe17 	ldw	r2,-8(fp)
   10358:	10c00d17 	ldw	r3,52(r2)
   1035c:	e0bffe17 	ldw	r2,-8(fp)
   10360:	10800c17 	ldw	r2,48(r2)
   10364:	18800526 	beq	r3,r2,1037c <altera_avalon_jtag_uart_close+0x54>
   10368:	e0bffe17 	ldw	r2,-8(fp)
   1036c:	10c00917 	ldw	r3,36(r2)
   10370:	e0bffe17 	ldw	r2,-8(fp)
   10374:	10800117 	ldw	r2,4(r2)
   10378:	18bff136 	bltu	r3,r2,10340 <__alt_data_end+0xff010340>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1037c:	0005883a 	mov	r2,zero
}
   10380:	e037883a 	mov	sp,fp
   10384:	df000017 	ldw	fp,0(sp)
   10388:	dec00104 	addi	sp,sp,4
   1038c:	f800283a 	ret

00010390 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10390:	defffa04 	addi	sp,sp,-24
   10394:	df000515 	stw	fp,20(sp)
   10398:	df000504 	addi	fp,sp,20
   1039c:	e13ffd15 	stw	r4,-12(fp)
   103a0:	e17ffe15 	stw	r5,-8(fp)
   103a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   103a8:	00bff9c4 	movi	r2,-25
   103ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   103b0:	e0bffe17 	ldw	r2,-8(fp)
   103b4:	10da8060 	cmpeqi	r3,r2,27137
   103b8:	1800031e 	bne	r3,zero,103c8 <altera_avalon_jtag_uart_ioctl+0x38>
   103bc:	109a80a0 	cmpeqi	r2,r2,27138
   103c0:	1000181e 	bne	r2,zero,10424 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   103c4:	00002906 	br	1046c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   103c8:	e0bffd17 	ldw	r2,-12(fp)
   103cc:	10c00117 	ldw	r3,4(r2)
   103d0:	00a00034 	movhi	r2,32768
   103d4:	10bfffc4 	addi	r2,r2,-1
   103d8:	18802126 	beq	r3,r2,10460 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   103dc:	e0bfff17 	ldw	r2,-4(fp)
   103e0:	10800017 	ldw	r2,0(r2)
   103e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	10800090 	cmplti	r2,r2,2
   103f0:	1000061e 	bne	r2,zero,1040c <altera_avalon_jtag_uart_ioctl+0x7c>
   103f4:	e0fffc17 	ldw	r3,-16(fp)
   103f8:	00a00034 	movhi	r2,32768
   103fc:	10bfffc4 	addi	r2,r2,-1
   10400:	18800226 	beq	r3,r2,1040c <altera_avalon_jtag_uart_ioctl+0x7c>
   10404:	e0bffc17 	ldw	r2,-16(fp)
   10408:	00000206 	br	10414 <altera_avalon_jtag_uart_ioctl+0x84>
   1040c:	00a00034 	movhi	r2,32768
   10410:	10bfff84 	addi	r2,r2,-2
   10414:	e0fffd17 	ldw	r3,-12(fp)
   10418:	18800115 	stw	r2,4(r3)
      rc = 0;
   1041c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10420:	00000f06 	br	10460 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   10424:	e0bffd17 	ldw	r2,-12(fp)
   10428:	10c00117 	ldw	r3,4(r2)
   1042c:	00a00034 	movhi	r2,32768
   10430:	10bfffc4 	addi	r2,r2,-1
   10434:	18800c26 	beq	r3,r2,10468 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10438:	e0bffd17 	ldw	r2,-12(fp)
   1043c:	10c00917 	ldw	r3,36(r2)
   10440:	e0bffd17 	ldw	r2,-12(fp)
   10444:	10800117 	ldw	r2,4(r2)
   10448:	1885803a 	cmpltu	r2,r3,r2
   1044c:	10c03fcc 	andi	r3,r2,255
   10450:	e0bfff17 	ldw	r2,-4(fp)
   10454:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10458:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1045c:	00000206 	br	10468 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10460:	0001883a 	nop
   10464:	00000106 	br	1046c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10468:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1046c:	e0bffb17 	ldw	r2,-20(fp)
}
   10470:	e037883a 	mov	sp,fp
   10474:	df000017 	ldw	fp,0(sp)
   10478:	dec00104 	addi	sp,sp,4
   1047c:	f800283a 	ret

00010480 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10480:	defff304 	addi	sp,sp,-52
   10484:	dfc00c15 	stw	ra,48(sp)
   10488:	df000b15 	stw	fp,44(sp)
   1048c:	df000b04 	addi	fp,sp,44
   10490:	e13ffc15 	stw	r4,-16(fp)
   10494:	e17ffd15 	stw	r5,-12(fp)
   10498:	e1bffe15 	stw	r6,-8(fp)
   1049c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   104a0:	e0bffd17 	ldw	r2,-12(fp)
   104a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   104a8:	00004706 	br	105c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   104ac:	e0bffc17 	ldw	r2,-16(fp)
   104b0:	10800a17 	ldw	r2,40(r2)
   104b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   104b8:	e0bffc17 	ldw	r2,-16(fp)
   104bc:	10800b17 	ldw	r2,44(r2)
   104c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   104c4:	e0fff717 	ldw	r3,-36(fp)
   104c8:	e0bff817 	ldw	r2,-32(fp)
   104cc:	18800536 	bltu	r3,r2,104e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   104d0:	e0fff717 	ldw	r3,-36(fp)
   104d4:	e0bff817 	ldw	r2,-32(fp)
   104d8:	1885c83a 	sub	r2,r3,r2
   104dc:	e0bff615 	stw	r2,-40(fp)
   104e0:	00000406 	br	104f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   104e4:	00c20004 	movi	r3,2048
   104e8:	e0bff817 	ldw	r2,-32(fp)
   104ec:	1885c83a 	sub	r2,r3,r2
   104f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   104f4:	e0bff617 	ldw	r2,-40(fp)
   104f8:	10001e26 	beq	r2,zero,10574 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   104fc:	e0fffe17 	ldw	r3,-8(fp)
   10500:	e0bff617 	ldw	r2,-40(fp)
   10504:	1880022e 	bgeu	r3,r2,10510 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   10508:	e0bffe17 	ldw	r2,-8(fp)
   1050c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   10510:	e0bffc17 	ldw	r2,-16(fp)
   10514:	10c00e04 	addi	r3,r2,56
   10518:	e0bff817 	ldw	r2,-32(fp)
   1051c:	1885883a 	add	r2,r3,r2
   10520:	e1bff617 	ldw	r6,-40(fp)
   10524:	100b883a 	mov	r5,r2
   10528:	e13ff517 	ldw	r4,-44(fp)
   1052c:	00087b00 	call	87b0 <memcpy>
      ptr   += n;
   10530:	e0fff517 	ldw	r3,-44(fp)
   10534:	e0bff617 	ldw	r2,-40(fp)
   10538:	1885883a 	add	r2,r3,r2
   1053c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10540:	e0fffe17 	ldw	r3,-8(fp)
   10544:	e0bff617 	ldw	r2,-40(fp)
   10548:	1885c83a 	sub	r2,r3,r2
   1054c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10550:	e0fff817 	ldw	r3,-32(fp)
   10554:	e0bff617 	ldw	r2,-40(fp)
   10558:	1885883a 	add	r2,r3,r2
   1055c:	10c1ffcc 	andi	r3,r2,2047
   10560:	e0bffc17 	ldw	r2,-16(fp)
   10564:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10568:	e0bffe17 	ldw	r2,-8(fp)
   1056c:	00bfcf16 	blt	zero,r2,104ac <__alt_data_end+0xff0104ac>
   10570:	00000106 	br	10578 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   10574:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10578:	e0fff517 	ldw	r3,-44(fp)
   1057c:	e0bffd17 	ldw	r2,-12(fp)
   10580:	1880141e 	bne	r3,r2,105d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   10584:	e0bfff17 	ldw	r2,-4(fp)
   10588:	1090000c 	andi	r2,r2,16384
   1058c:	1000131e 	bne	r2,zero,105dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10590:	0001883a 	nop
   10594:	e0bffc17 	ldw	r2,-16(fp)
   10598:	10c00a17 	ldw	r3,40(r2)
   1059c:	e0bff717 	ldw	r2,-36(fp)
   105a0:	1880051e 	bne	r3,r2,105b8 <altera_avalon_jtag_uart_read+0x138>
   105a4:	e0bffc17 	ldw	r2,-16(fp)
   105a8:	10c00917 	ldw	r3,36(r2)
   105ac:	e0bffc17 	ldw	r2,-16(fp)
   105b0:	10800117 	ldw	r2,4(r2)
   105b4:	18bff736 	bltu	r3,r2,10594 <__alt_data_end+0xff010594>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   105b8:	e0bffc17 	ldw	r2,-16(fp)
   105bc:	10c00a17 	ldw	r3,40(r2)
   105c0:	e0bff717 	ldw	r2,-36(fp)
   105c4:	18800726 	beq	r3,r2,105e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   105c8:	e0bffe17 	ldw	r2,-8(fp)
   105cc:	00bfb716 	blt	zero,r2,104ac <__alt_data_end+0xff0104ac>
   105d0:	00000506 	br	105e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   105d4:	0001883a 	nop
   105d8:	00000306 	br	105e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   105dc:	0001883a 	nop
   105e0:	00000106 	br	105e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   105e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   105e8:	e0fff517 	ldw	r3,-44(fp)
   105ec:	e0bffd17 	ldw	r2,-12(fp)
   105f0:	18801826 	beq	r3,r2,10654 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105f4:	0005303a 	rdctl	r2,status
   105f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105fc:	e0fffb17 	ldw	r3,-20(fp)
   10600:	00bfff84 	movi	r2,-2
   10604:	1884703a 	and	r2,r3,r2
   10608:	1001703a 	wrctl	status,r2
  
  return context;
   1060c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   10610:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10614:	e0bffc17 	ldw	r2,-16(fp)
   10618:	10800817 	ldw	r2,32(r2)
   1061c:	10c00054 	ori	r3,r2,1
   10620:	e0bffc17 	ldw	r2,-16(fp)
   10624:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   10628:	e0bffc17 	ldw	r2,-16(fp)
   1062c:	10800017 	ldw	r2,0(r2)
   10630:	10800104 	addi	r2,r2,4
   10634:	1007883a 	mov	r3,r2
   10638:	e0bffc17 	ldw	r2,-16(fp)
   1063c:	10800817 	ldw	r2,32(r2)
   10640:	18800035 	stwio	r2,0(r3)
   10644:	e0bffa17 	ldw	r2,-24(fp)
   10648:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1064c:	e0bff917 	ldw	r2,-28(fp)
   10650:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   10654:	e0fff517 	ldw	r3,-44(fp)
   10658:	e0bffd17 	ldw	r2,-12(fp)
   1065c:	18800426 	beq	r3,r2,10670 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10660:	e0fff517 	ldw	r3,-44(fp)
   10664:	e0bffd17 	ldw	r2,-12(fp)
   10668:	1885c83a 	sub	r2,r3,r2
   1066c:	00000606 	br	10688 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10670:	e0bfff17 	ldw	r2,-4(fp)
   10674:	1090000c 	andi	r2,r2,16384
   10678:	10000226 	beq	r2,zero,10684 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   1067c:	00bffd44 	movi	r2,-11
   10680:	00000106 	br	10688 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   10684:	00bffec4 	movi	r2,-5
}
   10688:	e037883a 	mov	sp,fp
   1068c:	dfc00117 	ldw	ra,4(sp)
   10690:	df000017 	ldw	fp,0(sp)
   10694:	dec00204 	addi	sp,sp,8
   10698:	f800283a 	ret

0001069c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1069c:	defff304 	addi	sp,sp,-52
   106a0:	dfc00c15 	stw	ra,48(sp)
   106a4:	df000b15 	stw	fp,44(sp)
   106a8:	df000b04 	addi	fp,sp,44
   106ac:	e13ffc15 	stw	r4,-16(fp)
   106b0:	e17ffd15 	stw	r5,-12(fp)
   106b4:	e1bffe15 	stw	r6,-8(fp)
   106b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   106bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   106c0:	e0bffd17 	ldw	r2,-12(fp)
   106c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   106c8:	00003706 	br	107a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   106cc:	e0bffc17 	ldw	r2,-16(fp)
   106d0:	10800c17 	ldw	r2,48(r2)
   106d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   106d8:	e0bffc17 	ldw	r2,-16(fp)
   106dc:	10800d17 	ldw	r2,52(r2)
   106e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   106e4:	e0fff917 	ldw	r3,-28(fp)
   106e8:	e0bff517 	ldw	r2,-44(fp)
   106ec:	1880062e 	bgeu	r3,r2,10708 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   106f0:	e0fff517 	ldw	r3,-44(fp)
   106f4:	e0bff917 	ldw	r2,-28(fp)
   106f8:	1885c83a 	sub	r2,r3,r2
   106fc:	10bfffc4 	addi	r2,r2,-1
   10700:	e0bff615 	stw	r2,-40(fp)
   10704:	00000b06 	br	10734 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   10708:	e0bff517 	ldw	r2,-44(fp)
   1070c:	10000526 	beq	r2,zero,10724 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   10710:	00c20004 	movi	r3,2048
   10714:	e0bff917 	ldw	r2,-28(fp)
   10718:	1885c83a 	sub	r2,r3,r2
   1071c:	e0bff615 	stw	r2,-40(fp)
   10720:	00000406 	br	10734 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   10724:	00c1ffc4 	movi	r3,2047
   10728:	e0bff917 	ldw	r2,-28(fp)
   1072c:	1885c83a 	sub	r2,r3,r2
   10730:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   10734:	e0bff617 	ldw	r2,-40(fp)
   10738:	10001e26 	beq	r2,zero,107b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   1073c:	e0fffe17 	ldw	r3,-8(fp)
   10740:	e0bff617 	ldw	r2,-40(fp)
   10744:	1880022e 	bgeu	r3,r2,10750 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10748:	e0bffe17 	ldw	r2,-8(fp)
   1074c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10750:	e0bffc17 	ldw	r2,-16(fp)
   10754:	10c20e04 	addi	r3,r2,2104
   10758:	e0bff917 	ldw	r2,-28(fp)
   1075c:	1885883a 	add	r2,r3,r2
   10760:	e1bff617 	ldw	r6,-40(fp)
   10764:	e17ffd17 	ldw	r5,-12(fp)
   10768:	1009883a 	mov	r4,r2
   1076c:	00087b00 	call	87b0 <memcpy>
      ptr   += n;
   10770:	e0fffd17 	ldw	r3,-12(fp)
   10774:	e0bff617 	ldw	r2,-40(fp)
   10778:	1885883a 	add	r2,r3,r2
   1077c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10780:	e0fffe17 	ldw	r3,-8(fp)
   10784:	e0bff617 	ldw	r2,-40(fp)
   10788:	1885c83a 	sub	r2,r3,r2
   1078c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10790:	e0fff917 	ldw	r3,-28(fp)
   10794:	e0bff617 	ldw	r2,-40(fp)
   10798:	1885883a 	add	r2,r3,r2
   1079c:	10c1ffcc 	andi	r3,r2,2047
   107a0:	e0bffc17 	ldw	r2,-16(fp)
   107a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   107a8:	e0bffe17 	ldw	r2,-8(fp)
   107ac:	00bfc716 	blt	zero,r2,106cc <__alt_data_end+0xff0106cc>
   107b0:	00000106 	br	107b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   107b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   107b8:	0005303a 	rdctl	r2,status
   107bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   107c0:	e0fffb17 	ldw	r3,-20(fp)
   107c4:	00bfff84 	movi	r2,-2
   107c8:	1884703a 	and	r2,r3,r2
   107cc:	1001703a 	wrctl	status,r2
  
  return context;
   107d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   107d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   107d8:	e0bffc17 	ldw	r2,-16(fp)
   107dc:	10800817 	ldw	r2,32(r2)
   107e0:	10c00094 	ori	r3,r2,2
   107e4:	e0bffc17 	ldw	r2,-16(fp)
   107e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   107ec:	e0bffc17 	ldw	r2,-16(fp)
   107f0:	10800017 	ldw	r2,0(r2)
   107f4:	10800104 	addi	r2,r2,4
   107f8:	1007883a 	mov	r3,r2
   107fc:	e0bffc17 	ldw	r2,-16(fp)
   10800:	10800817 	ldw	r2,32(r2)
   10804:	18800035 	stwio	r2,0(r3)
   10808:	e0bffa17 	ldw	r2,-24(fp)
   1080c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10810:	e0bff817 	ldw	r2,-32(fp)
   10814:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   10818:	e0bffe17 	ldw	r2,-8(fp)
   1081c:	0080100e 	bge	zero,r2,10860 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   10820:	e0bfff17 	ldw	r2,-4(fp)
   10824:	1090000c 	andi	r2,r2,16384
   10828:	1000101e 	bne	r2,zero,1086c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1082c:	0001883a 	nop
   10830:	e0bffc17 	ldw	r2,-16(fp)
   10834:	10c00d17 	ldw	r3,52(r2)
   10838:	e0bff517 	ldw	r2,-44(fp)
   1083c:	1880051e 	bne	r3,r2,10854 <altera_avalon_jtag_uart_write+0x1b8>
   10840:	e0bffc17 	ldw	r2,-16(fp)
   10844:	10c00917 	ldw	r3,36(r2)
   10848:	e0bffc17 	ldw	r2,-16(fp)
   1084c:	10800117 	ldw	r2,4(r2)
   10850:	18bff736 	bltu	r3,r2,10830 <__alt_data_end+0xff010830>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   10854:	e0bffc17 	ldw	r2,-16(fp)
   10858:	10800917 	ldw	r2,36(r2)
   1085c:	1000051e 	bne	r2,zero,10874 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10860:	e0bffe17 	ldw	r2,-8(fp)
   10864:	00bfd016 	blt	zero,r2,107a8 <__alt_data_end+0xff0107a8>
   10868:	00000306 	br	10878 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1086c:	0001883a 	nop
   10870:	00000106 	br	10878 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   10874:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10878:	e0fffd17 	ldw	r3,-12(fp)
   1087c:	e0bff717 	ldw	r2,-36(fp)
   10880:	18800426 	beq	r3,r2,10894 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   10884:	e0fffd17 	ldw	r3,-12(fp)
   10888:	e0bff717 	ldw	r2,-36(fp)
   1088c:	1885c83a 	sub	r2,r3,r2
   10890:	00000606 	br	108ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   10894:	e0bfff17 	ldw	r2,-4(fp)
   10898:	1090000c 	andi	r2,r2,16384
   1089c:	10000226 	beq	r2,zero,108a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   108a0:	00bffd44 	movi	r2,-11
   108a4:	00000106 	br	108ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   108a8:	00bffec4 	movi	r2,-5
}
   108ac:	e037883a 	mov	sp,fp
   108b0:	dfc00117 	ldw	ra,4(sp)
   108b4:	df000017 	ldw	fp,0(sp)
   108b8:	dec00204 	addi	sp,sp,8
   108bc:	f800283a 	ret

000108c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   108c0:	defffa04 	addi	sp,sp,-24
   108c4:	dfc00515 	stw	ra,20(sp)
   108c8:	df000415 	stw	fp,16(sp)
   108cc:	df000404 	addi	fp,sp,16
   108d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   108d4:	0007883a 	mov	r3,zero
   108d8:	e0bfff17 	ldw	r2,-4(fp)
   108dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   108e0:	e0bfff17 	ldw	r2,-4(fp)
   108e4:	10800104 	addi	r2,r2,4
   108e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108ec:	0005303a 	rdctl	r2,status
   108f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108f4:	e0fffd17 	ldw	r3,-12(fp)
   108f8:	00bfff84 	movi	r2,-2
   108fc:	1884703a 	and	r2,r3,r2
   10900:	1001703a 	wrctl	status,r2
  
  return context;
   10904:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   10908:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   1090c:	00116140 	call	11614 <alt_tick>
   10910:	e0bffc17 	ldw	r2,-16(fp)
   10914:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10918:	e0bffe17 	ldw	r2,-8(fp)
   1091c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   10920:	0001883a 	nop
   10924:	e037883a 	mov	sp,fp
   10928:	dfc00117 	ldw	ra,4(sp)
   1092c:	df000017 	ldw	fp,0(sp)
   10930:	dec00204 	addi	sp,sp,8
   10934:	f800283a 	ret

00010938 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10938:	defff804 	addi	sp,sp,-32
   1093c:	dfc00715 	stw	ra,28(sp)
   10940:	df000615 	stw	fp,24(sp)
   10944:	df000604 	addi	fp,sp,24
   10948:	e13ffc15 	stw	r4,-16(fp)
   1094c:	e17ffd15 	stw	r5,-12(fp)
   10950:	e1bffe15 	stw	r6,-8(fp)
   10954:	e1ffff15 	stw	r7,-4(fp)
   10958:	e0bfff17 	ldw	r2,-4(fp)
   1095c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10960:	d0a6e617 	ldw	r2,-25704(gp)
   10964:	1000021e 	bne	r2,zero,10970 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10968:	e0bffb17 	ldw	r2,-20(fp)
   1096c:	d0a6e615 	stw	r2,-25704(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10970:	e0bffc17 	ldw	r2,-16(fp)
   10974:	10800104 	addi	r2,r2,4
   10978:	00c001c4 	movi	r3,7
   1097c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10980:	d8000015 	stw	zero,0(sp)
   10984:	e1fffc17 	ldw	r7,-16(fp)
   10988:	01800074 	movhi	r6,1
   1098c:	31823004 	addi	r6,r6,2240
   10990:	e17ffe17 	ldw	r5,-8(fp)
   10994:	e13ffd17 	ldw	r4,-12(fp)
   10998:	0010f440 	call	10f44 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   1099c:	0001883a 	nop
   109a0:	e037883a 	mov	sp,fp
   109a4:	dfc00117 	ldw	ra,4(sp)
   109a8:	df000017 	ldw	fp,0(sp)
   109ac:	dec00204 	addi	sp,sp,8
   109b0:	f800283a 	ret

000109b4 <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   109b4:	defffe04 	addi	sp,sp,-8
   109b8:	df000115 	stw	fp,4(sp)
   109bc:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   109c0:	d0a6e317 	ldw	r2,-25716(gp)
   109c4:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   109c8:	d0a6e417 	ldw	r2,-25712(gp)
   109cc:	1000021e 	bne	r2,zero,109d8 <alt_timestamp_start+0x24>
  {
    return -1;
   109d0:	00bfffc4 	movi	r2,-1
   109d4:	00001106 	br	10a1c <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   109d8:	e0bfff17 	ldw	r2,-4(fp)
   109dc:	10800104 	addi	r2,r2,4
   109e0:	00c00204 	movi	r3,8
   109e4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   109e8:	e0bfff17 	ldw	r2,-4(fp)
   109ec:	10800204 	addi	r2,r2,8
   109f0:	00ffffd4 	movui	r3,65535
   109f4:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   109f8:	e0bfff17 	ldw	r2,-4(fp)
   109fc:	10800304 	addi	r2,r2,12
   10a00:	00ffffd4 	movui	r3,65535
   10a04:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   10a08:	e0bfff17 	ldw	r2,-4(fp)
   10a0c:	10800104 	addi	r2,r2,4
   10a10:	00c00104 	movi	r3,4
   10a14:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   10a18:	0005883a 	mov	r2,zero
}
   10a1c:	e037883a 	mov	sp,fp
   10a20:	df000017 	ldw	fp,0(sp)
   10a24:	dec00104 	addi	sp,sp,4
   10a28:	f800283a 	ret

00010a2c <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   10a2c:	defffc04 	addi	sp,sp,-16
   10a30:	df000315 	stw	fp,12(sp)
   10a34:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10a38:	d0a6e317 	ldw	r2,-25716(gp)
   10a3c:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   10a40:	d0a6e417 	ldw	r2,-25712(gp)
   10a44:	1000021e 	bne	r2,zero,10a50 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10a48:	00bfffc4 	movi	r2,-1
   10a4c:	00001306 	br	10a9c <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   10a50:	e0bffd17 	ldw	r2,-12(fp)
   10a54:	10800404 	addi	r2,r2,16
   10a58:	0007883a 	mov	r3,zero
   10a5c:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   10a60:	e0bffd17 	ldw	r2,-12(fp)
   10a64:	10800404 	addi	r2,r2,16
   10a68:	10800037 	ldwio	r2,0(r2)
   10a6c:	10bfffcc 	andi	r2,r2,65535
   10a70:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10a74:	e0bffd17 	ldw	r2,-12(fp)
   10a78:	10800504 	addi	r2,r2,20
   10a7c:	10800037 	ldwio	r2,0(r2)
   10a80:	10bfffcc 	andi	r2,r2,65535
   10a84:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   10a88:	e0bfff17 	ldw	r2,-4(fp)
   10a8c:	1006943a 	slli	r3,r2,16
   10a90:	e0bffe17 	ldw	r2,-8(fp)
   10a94:	1884b03a 	or	r2,r3,r2
   10a98:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10a9c:	e037883a 	mov	sp,fp
   10aa0:	df000017 	ldw	fp,0(sp)
   10aa4:	dec00104 	addi	sp,sp,4
   10aa8:	f800283a 	ret

00010aac <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10aac:	deffff04 	addi	sp,sp,-4
   10ab0:	df000015 	stw	fp,0(sp)
   10ab4:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   10ab8:	d0a6e417 	ldw	r2,-25712(gp)
}
   10abc:	e037883a 	mov	sp,fp
   10ac0:	df000017 	ldw	fp,0(sp)
   10ac4:	dec00104 	addi	sp,sp,4
   10ac8:	f800283a 	ret

00010acc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10acc:	defff504 	addi	sp,sp,-44
   10ad0:	df000a15 	stw	fp,40(sp)
   10ad4:	df000a04 	addi	fp,sp,40
   10ad8:	e13ffc15 	stw	r4,-16(fp)
   10adc:	e17ffd15 	stw	r5,-12(fp)
   10ae0:	e1bffe15 	stw	r6,-8(fp)
   10ae4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10ae8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10aec:	d0a6e617 	ldw	r2,-25704(gp)
  
  if (alt_ticks_per_second ())
   10af0:	10003c26 	beq	r2,zero,10be4 <alt_alarm_start+0x118>
  {
    if (alarm)
   10af4:	e0bffc17 	ldw	r2,-16(fp)
   10af8:	10003826 	beq	r2,zero,10bdc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10afc:	e0bffc17 	ldw	r2,-16(fp)
   10b00:	e0fffe17 	ldw	r3,-8(fp)
   10b04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10b08:	e0bffc17 	ldw	r2,-16(fp)
   10b0c:	e0ffff17 	ldw	r3,-4(fp)
   10b10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b14:	0005303a 	rdctl	r2,status
   10b18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b1c:	e0fff917 	ldw	r3,-28(fp)
   10b20:	00bfff84 	movi	r2,-2
   10b24:	1884703a 	and	r2,r3,r2
   10b28:	1001703a 	wrctl	status,r2
  
  return context;
   10b2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10b30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10b34:	d0a6e717 	ldw	r2,-25700(gp)
      
      current_nticks = alt_nticks();
   10b38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10b3c:	e0fffd17 	ldw	r3,-12(fp)
   10b40:	e0bff617 	ldw	r2,-40(fp)
   10b44:	1885883a 	add	r2,r3,r2
   10b48:	10c00044 	addi	r3,r2,1
   10b4c:	e0bffc17 	ldw	r2,-16(fp)
   10b50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10b54:	e0bffc17 	ldw	r2,-16(fp)
   10b58:	10c00217 	ldw	r3,8(r2)
   10b5c:	e0bff617 	ldw	r2,-40(fp)
   10b60:	1880042e 	bgeu	r3,r2,10b74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10b64:	e0bffc17 	ldw	r2,-16(fp)
   10b68:	00c00044 	movi	r3,1
   10b6c:	10c00405 	stb	r3,16(r2)
   10b70:	00000206 	br	10b7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10b74:	e0bffc17 	ldw	r2,-16(fp)
   10b78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10b7c:	e0bffc17 	ldw	r2,-16(fp)
   10b80:	d0e01004 	addi	r3,gp,-32704
   10b84:	e0fffa15 	stw	r3,-24(fp)
   10b88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b8c:	e0bffb17 	ldw	r2,-20(fp)
   10b90:	e0fffa17 	ldw	r3,-24(fp)
   10b94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10b98:	e0bffa17 	ldw	r2,-24(fp)
   10b9c:	10c00017 	ldw	r3,0(r2)
   10ba0:	e0bffb17 	ldw	r2,-20(fp)
   10ba4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10ba8:	e0bffa17 	ldw	r2,-24(fp)
   10bac:	10800017 	ldw	r2,0(r2)
   10bb0:	e0fffb17 	ldw	r3,-20(fp)
   10bb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10bb8:	e0bffa17 	ldw	r2,-24(fp)
   10bbc:	e0fffb17 	ldw	r3,-20(fp)
   10bc0:	10c00015 	stw	r3,0(r2)
   10bc4:	e0bff817 	ldw	r2,-32(fp)
   10bc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10bcc:	e0bff717 	ldw	r2,-36(fp)
   10bd0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10bd4:	0005883a 	mov	r2,zero
   10bd8:	00000306 	br	10be8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10bdc:	00bffa84 	movi	r2,-22
   10be0:	00000106 	br	10be8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10be4:	00bfde84 	movi	r2,-134
  }
}
   10be8:	e037883a 	mov	sp,fp
   10bec:	df000017 	ldw	fp,0(sp)
   10bf0:	dec00104 	addi	sp,sp,4
   10bf4:	f800283a 	ret

00010bf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10bf8:	defffa04 	addi	sp,sp,-24
   10bfc:	dfc00515 	stw	ra,20(sp)
   10c00:	df000415 	stw	fp,16(sp)
   10c04:	df000404 	addi	fp,sp,16
   10c08:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10c0c:	008000c4 	movi	r2,3
   10c10:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10c14:	e0fffd17 	ldw	r3,-12(fp)
   10c18:	008003f4 	movhi	r2,15
   10c1c:	10909004 	addi	r2,r2,16960
   10c20:	1885383a 	mul	r2,r3,r2
   10c24:	100b883a 	mov	r5,r2
   10c28:	0100bef4 	movhi	r4,763
   10c2c:	213c2004 	addi	r4,r4,-3968
   10c30:	0002bac0 	call	2bac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10c34:	100b883a 	mov	r5,r2
   10c38:	01200034 	movhi	r4,32768
   10c3c:	213fffc4 	addi	r4,r4,-1
   10c40:	0002bac0 	call	2bac <__udivsi3>
   10c44:	100b883a 	mov	r5,r2
   10c48:	e13fff17 	ldw	r4,-4(fp)
   10c4c:	0002bac0 	call	2bac <__udivsi3>
   10c50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10c54:	e0bffe17 	ldw	r2,-8(fp)
   10c58:	10002a26 	beq	r2,zero,10d04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10c5c:	e03ffc15 	stw	zero,-16(fp)
   10c60:	00001706 	br	10cc0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10c64:	00a00034 	movhi	r2,32768
   10c68:	10bfffc4 	addi	r2,r2,-1
   10c6c:	10bfffc4 	addi	r2,r2,-1
   10c70:	103ffe1e 	bne	r2,zero,10c6c <__alt_data_end+0xff010c6c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10c74:	e0fffd17 	ldw	r3,-12(fp)
   10c78:	008003f4 	movhi	r2,15
   10c7c:	10909004 	addi	r2,r2,16960
   10c80:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10c84:	100b883a 	mov	r5,r2
   10c88:	0100bef4 	movhi	r4,763
   10c8c:	213c2004 	addi	r4,r4,-3968
   10c90:	0002bac0 	call	2bac <__udivsi3>
   10c94:	100b883a 	mov	r5,r2
   10c98:	01200034 	movhi	r4,32768
   10c9c:	213fffc4 	addi	r4,r4,-1
   10ca0:	0002bac0 	call	2bac <__udivsi3>
   10ca4:	1007883a 	mov	r3,r2
   10ca8:	e0bfff17 	ldw	r2,-4(fp)
   10cac:	10c5c83a 	sub	r2,r2,r3
   10cb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10cb4:	e0bffc17 	ldw	r2,-16(fp)
   10cb8:	10800044 	addi	r2,r2,1
   10cbc:	e0bffc15 	stw	r2,-16(fp)
   10cc0:	e0fffc17 	ldw	r3,-16(fp)
   10cc4:	e0bffe17 	ldw	r2,-8(fp)
   10cc8:	18bfe616 	blt	r3,r2,10c64 <__alt_data_end+0xff010c64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10ccc:	e0fffd17 	ldw	r3,-12(fp)
   10cd0:	008003f4 	movhi	r2,15
   10cd4:	10909004 	addi	r2,r2,16960
   10cd8:	1885383a 	mul	r2,r3,r2
   10cdc:	100b883a 	mov	r5,r2
   10ce0:	0100bef4 	movhi	r4,763
   10ce4:	213c2004 	addi	r4,r4,-3968
   10ce8:	0002bac0 	call	2bac <__udivsi3>
   10cec:	1007883a 	mov	r3,r2
   10cf0:	e0bfff17 	ldw	r2,-4(fp)
   10cf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10cf8:	10bfffc4 	addi	r2,r2,-1
   10cfc:	103ffe1e 	bne	r2,zero,10cf8 <__alt_data_end+0xff010cf8>
   10d00:	00000d06 	br	10d38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10d04:	e0fffd17 	ldw	r3,-12(fp)
   10d08:	008003f4 	movhi	r2,15
   10d0c:	10909004 	addi	r2,r2,16960
   10d10:	1885383a 	mul	r2,r3,r2
   10d14:	100b883a 	mov	r5,r2
   10d18:	0100bef4 	movhi	r4,763
   10d1c:	213c2004 	addi	r4,r4,-3968
   10d20:	0002bac0 	call	2bac <__udivsi3>
   10d24:	1007883a 	mov	r3,r2
   10d28:	e0bfff17 	ldw	r2,-4(fp)
   10d2c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10d30:	10bfffc4 	addi	r2,r2,-1
   10d34:	00bffe16 	blt	zero,r2,10d30 <__alt_data_end+0xff010d30>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10d38:	0005883a 	mov	r2,zero
}
   10d3c:	e037883a 	mov	sp,fp
   10d40:	dfc00117 	ldw	ra,4(sp)
   10d44:	df000017 	ldw	fp,0(sp)
   10d48:	dec00204 	addi	sp,sp,8
   10d4c:	f800283a 	ret

00010d50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10d50:	deffff04 	addi	sp,sp,-4
   10d54:	df000015 	stw	fp,0(sp)
   10d58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10d5c:	0001883a 	nop
   10d60:	e037883a 	mov	sp,fp
   10d64:	df000017 	ldw	fp,0(sp)
   10d68:	dec00104 	addi	sp,sp,4
   10d6c:	f800283a 	ret

00010d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d70:	defffe04 	addi	sp,sp,-8
   10d74:	dfc00115 	stw	ra,4(sp)
   10d78:	df000015 	stw	fp,0(sp)
   10d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10d80:	d0a00d17 	ldw	r2,-32716(gp)
   10d84:	10000326 	beq	r2,zero,10d94 <alt_get_errno+0x24>
   10d88:	d0a00d17 	ldw	r2,-32716(gp)
   10d8c:	103ee83a 	callr	r2
   10d90:	00000106 	br	10d98 <alt_get_errno+0x28>
   10d94:	d0a6dc04 	addi	r2,gp,-25744
}
   10d98:	e037883a 	mov	sp,fp
   10d9c:	dfc00117 	ldw	ra,4(sp)
   10da0:	df000017 	ldw	fp,0(sp)
   10da4:	dec00204 	addi	sp,sp,8
   10da8:	f800283a 	ret

00010dac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10dac:	defffa04 	addi	sp,sp,-24
   10db0:	dfc00515 	stw	ra,20(sp)
   10db4:	df000415 	stw	fp,16(sp)
   10db8:	df000404 	addi	fp,sp,16
   10dbc:	e13ffe15 	stw	r4,-8(fp)
   10dc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10dc4:	e0bffe17 	ldw	r2,-8(fp)
   10dc8:	10000326 	beq	r2,zero,10dd8 <alt_dev_llist_insert+0x2c>
   10dcc:	e0bffe17 	ldw	r2,-8(fp)
   10dd0:	10800217 	ldw	r2,8(r2)
   10dd4:	1000061e 	bne	r2,zero,10df0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10dd8:	0010d700 	call	10d70 <alt_get_errno>
   10ddc:	1007883a 	mov	r3,r2
   10de0:	00800584 	movi	r2,22
   10de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10de8:	00bffa84 	movi	r2,-22
   10dec:	00001306 	br	10e3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10df0:	e0bffe17 	ldw	r2,-8(fp)
   10df4:	e0ffff17 	ldw	r3,-4(fp)
   10df8:	e0fffc15 	stw	r3,-16(fp)
   10dfc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10e00:	e0bffd17 	ldw	r2,-12(fp)
   10e04:	e0fffc17 	ldw	r3,-16(fp)
   10e08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10e0c:	e0bffc17 	ldw	r2,-16(fp)
   10e10:	10c00017 	ldw	r3,0(r2)
   10e14:	e0bffd17 	ldw	r2,-12(fp)
   10e18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10e1c:	e0bffc17 	ldw	r2,-16(fp)
   10e20:	10800017 	ldw	r2,0(r2)
   10e24:	e0fffd17 	ldw	r3,-12(fp)
   10e28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10e2c:	e0bffc17 	ldw	r2,-16(fp)
   10e30:	e0fffd17 	ldw	r3,-12(fp)
   10e34:	10c00015 	stw	r3,0(r2)

  return 0;  
   10e38:	0005883a 	mov	r2,zero
}
   10e3c:	e037883a 	mov	sp,fp
   10e40:	dfc00117 	ldw	ra,4(sp)
   10e44:	df000017 	ldw	fp,0(sp)
   10e48:	dec00204 	addi	sp,sp,8
   10e4c:	f800283a 	ret

00010e50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10e50:	defffd04 	addi	sp,sp,-12
   10e54:	dfc00215 	stw	ra,8(sp)
   10e58:	df000115 	stw	fp,4(sp)
   10e5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10e60:	00800074 	movhi	r2,1
   10e64:	10878e04 	addi	r2,r2,7736
   10e68:	e0bfff15 	stw	r2,-4(fp)
   10e6c:	00000606 	br	10e88 <_do_ctors+0x38>
        (*ctor) (); 
   10e70:	e0bfff17 	ldw	r2,-4(fp)
   10e74:	10800017 	ldw	r2,0(r2)
   10e78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10e7c:	e0bfff17 	ldw	r2,-4(fp)
   10e80:	10bfff04 	addi	r2,r2,-4
   10e84:	e0bfff15 	stw	r2,-4(fp)
   10e88:	e0ffff17 	ldw	r3,-4(fp)
   10e8c:	00800074 	movhi	r2,1
   10e90:	10878f04 	addi	r2,r2,7740
   10e94:	18bff62e 	bgeu	r3,r2,10e70 <__alt_data_end+0xff010e70>
        (*ctor) (); 
}
   10e98:	0001883a 	nop
   10e9c:	e037883a 	mov	sp,fp
   10ea0:	dfc00117 	ldw	ra,4(sp)
   10ea4:	df000017 	ldw	fp,0(sp)
   10ea8:	dec00204 	addi	sp,sp,8
   10eac:	f800283a 	ret

00010eb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10eb0:	defffd04 	addi	sp,sp,-12
   10eb4:	dfc00215 	stw	ra,8(sp)
   10eb8:	df000115 	stw	fp,4(sp)
   10ebc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10ec0:	00800074 	movhi	r2,1
   10ec4:	10878e04 	addi	r2,r2,7736
   10ec8:	e0bfff15 	stw	r2,-4(fp)
   10ecc:	00000606 	br	10ee8 <_do_dtors+0x38>
        (*dtor) (); 
   10ed0:	e0bfff17 	ldw	r2,-4(fp)
   10ed4:	10800017 	ldw	r2,0(r2)
   10ed8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10edc:	e0bfff17 	ldw	r2,-4(fp)
   10ee0:	10bfff04 	addi	r2,r2,-4
   10ee4:	e0bfff15 	stw	r2,-4(fp)
   10ee8:	e0ffff17 	ldw	r3,-4(fp)
   10eec:	00800074 	movhi	r2,1
   10ef0:	10878f04 	addi	r2,r2,7740
   10ef4:	18bff62e 	bgeu	r3,r2,10ed0 <__alt_data_end+0xff010ed0>
        (*dtor) (); 
}
   10ef8:	0001883a 	nop
   10efc:	e037883a 	mov	sp,fp
   10f00:	dfc00117 	ldw	ra,4(sp)
   10f04:	df000017 	ldw	fp,0(sp)
   10f08:	dec00204 	addi	sp,sp,8
   10f0c:	f800283a 	ret

00010f10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10f10:	defffe04 	addi	sp,sp,-8
   10f14:	dfc00115 	stw	ra,4(sp)
   10f18:	df000015 	stw	fp,0(sp)
   10f1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10f20:	01440004 	movi	r5,4096
   10f24:	0009883a 	mov	r4,zero
   10f28:	001197c0 	call	1197c <alt_icache_flush>
#endif
}
   10f2c:	0001883a 	nop
   10f30:	e037883a 	mov	sp,fp
   10f34:	dfc00117 	ldw	ra,4(sp)
   10f38:	df000017 	ldw	fp,0(sp)
   10f3c:	dec00204 	addi	sp,sp,8
   10f40:	f800283a 	ret

00010f44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10f44:	defff904 	addi	sp,sp,-28
   10f48:	dfc00615 	stw	ra,24(sp)
   10f4c:	df000515 	stw	fp,20(sp)
   10f50:	df000504 	addi	fp,sp,20
   10f54:	e13ffc15 	stw	r4,-16(fp)
   10f58:	e17ffd15 	stw	r5,-12(fp)
   10f5c:	e1bffe15 	stw	r6,-8(fp)
   10f60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10f64:	e0800217 	ldw	r2,8(fp)
   10f68:	d8800015 	stw	r2,0(sp)
   10f6c:	e1ffff17 	ldw	r7,-4(fp)
   10f70:	e1bffe17 	ldw	r6,-8(fp)
   10f74:	e17ffd17 	ldw	r5,-12(fp)
   10f78:	e13ffc17 	ldw	r4,-16(fp)
   10f7c:	00110f40 	call	110f4 <alt_iic_isr_register>
}  
   10f80:	e037883a 	mov	sp,fp
   10f84:	dfc00117 	ldw	ra,4(sp)
   10f88:	df000017 	ldw	fp,0(sp)
   10f8c:	dec00204 	addi	sp,sp,8
   10f90:	f800283a 	ret

00010f94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10f94:	defff904 	addi	sp,sp,-28
   10f98:	df000615 	stw	fp,24(sp)
   10f9c:	df000604 	addi	fp,sp,24
   10fa0:	e13ffe15 	stw	r4,-8(fp)
   10fa4:	e17fff15 	stw	r5,-4(fp)
   10fa8:	e0bfff17 	ldw	r2,-4(fp)
   10fac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10fb0:	0005303a 	rdctl	r2,status
   10fb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10fb8:	e0fffb17 	ldw	r3,-20(fp)
   10fbc:	00bfff84 	movi	r2,-2
   10fc0:	1884703a 	and	r2,r3,r2
   10fc4:	1001703a 	wrctl	status,r2
  
  return context;
   10fc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10fcc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10fd0:	00c00044 	movi	r3,1
   10fd4:	e0bffa17 	ldw	r2,-24(fp)
   10fd8:	1884983a 	sll	r2,r3,r2
   10fdc:	1007883a 	mov	r3,r2
   10fe0:	d0a6e517 	ldw	r2,-25708(gp)
   10fe4:	1884b03a 	or	r2,r3,r2
   10fe8:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10fec:	d0a6e517 	ldw	r2,-25708(gp)
   10ff0:	100170fa 	wrctl	ienable,r2
   10ff4:	e0bffc17 	ldw	r2,-16(fp)
   10ff8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ffc:	e0bffd17 	ldw	r2,-12(fp)
   11000:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11004:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   11008:	0001883a 	nop
}
   1100c:	e037883a 	mov	sp,fp
   11010:	df000017 	ldw	fp,0(sp)
   11014:	dec00104 	addi	sp,sp,4
   11018:	f800283a 	ret

0001101c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1101c:	defff904 	addi	sp,sp,-28
   11020:	df000615 	stw	fp,24(sp)
   11024:	df000604 	addi	fp,sp,24
   11028:	e13ffe15 	stw	r4,-8(fp)
   1102c:	e17fff15 	stw	r5,-4(fp)
   11030:	e0bfff17 	ldw	r2,-4(fp)
   11034:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11038:	0005303a 	rdctl	r2,status
   1103c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11040:	e0fffb17 	ldw	r3,-20(fp)
   11044:	00bfff84 	movi	r2,-2
   11048:	1884703a 	and	r2,r3,r2
   1104c:	1001703a 	wrctl	status,r2
  
  return context;
   11050:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   11054:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11058:	00c00044 	movi	r3,1
   1105c:	e0bffa17 	ldw	r2,-24(fp)
   11060:	1884983a 	sll	r2,r3,r2
   11064:	0084303a 	nor	r2,zero,r2
   11068:	1007883a 	mov	r3,r2
   1106c:	d0a6e517 	ldw	r2,-25708(gp)
   11070:	1884703a 	and	r2,r3,r2
   11074:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11078:	d0a6e517 	ldw	r2,-25708(gp)
   1107c:	100170fa 	wrctl	ienable,r2
   11080:	e0bffc17 	ldw	r2,-16(fp)
   11084:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11088:	e0bffd17 	ldw	r2,-12(fp)
   1108c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11090:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   11094:	0001883a 	nop
}
   11098:	e037883a 	mov	sp,fp
   1109c:	df000017 	ldw	fp,0(sp)
   110a0:	dec00104 	addi	sp,sp,4
   110a4:	f800283a 	ret

000110a8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   110a8:	defffc04 	addi	sp,sp,-16
   110ac:	df000315 	stw	fp,12(sp)
   110b0:	df000304 	addi	fp,sp,12
   110b4:	e13ffe15 	stw	r4,-8(fp)
   110b8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   110bc:	000530fa 	rdctl	r2,ienable
   110c0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   110c4:	00c00044 	movi	r3,1
   110c8:	e0bfff17 	ldw	r2,-4(fp)
   110cc:	1884983a 	sll	r2,r3,r2
   110d0:	1007883a 	mov	r3,r2
   110d4:	e0bffd17 	ldw	r2,-12(fp)
   110d8:	1884703a 	and	r2,r3,r2
   110dc:	1004c03a 	cmpne	r2,r2,zero
   110e0:	10803fcc 	andi	r2,r2,255
}
   110e4:	e037883a 	mov	sp,fp
   110e8:	df000017 	ldw	fp,0(sp)
   110ec:	dec00104 	addi	sp,sp,4
   110f0:	f800283a 	ret

000110f4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   110f4:	defff504 	addi	sp,sp,-44
   110f8:	dfc00a15 	stw	ra,40(sp)
   110fc:	df000915 	stw	fp,36(sp)
   11100:	df000904 	addi	fp,sp,36
   11104:	e13ffc15 	stw	r4,-16(fp)
   11108:	e17ffd15 	stw	r5,-12(fp)
   1110c:	e1bffe15 	stw	r6,-8(fp)
   11110:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   11114:	00bffa84 	movi	r2,-22
   11118:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1111c:	e0bffd17 	ldw	r2,-12(fp)
   11120:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11124:	e0bff817 	ldw	r2,-32(fp)
   11128:	10800808 	cmpgei	r2,r2,32
   1112c:	1000271e 	bne	r2,zero,111cc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11130:	0005303a 	rdctl	r2,status
   11134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11138:	e0fffb17 	ldw	r3,-20(fp)
   1113c:	00bfff84 	movi	r2,-2
   11140:	1884703a 	and	r2,r3,r2
   11144:	1001703a 	wrctl	status,r2
  
  return context;
   11148:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1114c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11150:	00800074 	movhi	r2,1
   11154:	10971f04 	addi	r2,r2,23676
   11158:	e0fff817 	ldw	r3,-32(fp)
   1115c:	180690fa 	slli	r3,r3,3
   11160:	10c5883a 	add	r2,r2,r3
   11164:	e0fffe17 	ldw	r3,-8(fp)
   11168:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   1116c:	00800074 	movhi	r2,1
   11170:	10971f04 	addi	r2,r2,23676
   11174:	e0fff817 	ldw	r3,-32(fp)
   11178:	180690fa 	slli	r3,r3,3
   1117c:	10c5883a 	add	r2,r2,r3
   11180:	10800104 	addi	r2,r2,4
   11184:	e0ffff17 	ldw	r3,-4(fp)
   11188:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1118c:	e0bffe17 	ldw	r2,-8(fp)
   11190:	10000526 	beq	r2,zero,111a8 <alt_iic_isr_register+0xb4>
   11194:	e0bff817 	ldw	r2,-32(fp)
   11198:	100b883a 	mov	r5,r2
   1119c:	e13ffc17 	ldw	r4,-16(fp)
   111a0:	0010f940 	call	10f94 <alt_ic_irq_enable>
   111a4:	00000406 	br	111b8 <alt_iic_isr_register+0xc4>
   111a8:	e0bff817 	ldw	r2,-32(fp)
   111ac:	100b883a 	mov	r5,r2
   111b0:	e13ffc17 	ldw	r4,-16(fp)
   111b4:	001101c0 	call	1101c <alt_ic_irq_disable>
   111b8:	e0bff715 	stw	r2,-36(fp)
   111bc:	e0bffa17 	ldw	r2,-24(fp)
   111c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c4:	e0bff917 	ldw	r2,-28(fp)
   111c8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   111cc:	e0bff717 	ldw	r2,-36(fp)
}
   111d0:	e037883a 	mov	sp,fp
   111d4:	dfc00117 	ldw	ra,4(sp)
   111d8:	df000017 	ldw	fp,0(sp)
   111dc:	dec00204 	addi	sp,sp,8
   111e0:	f800283a 	ret

000111e4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   111e4:	defff904 	addi	sp,sp,-28
   111e8:	dfc00615 	stw	ra,24(sp)
   111ec:	df000515 	stw	fp,20(sp)
   111f0:	df000504 	addi	fp,sp,20
   111f4:	e13ffc15 	stw	r4,-16(fp)
   111f8:	e17ffd15 	stw	r5,-12(fp)
   111fc:	e1bffe15 	stw	r6,-8(fp)
   11200:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   11204:	e1bfff17 	ldw	r6,-4(fp)
   11208:	e17ffe17 	ldw	r5,-8(fp)
   1120c:	e13ffd17 	ldw	r4,-12(fp)
   11210:	00114240 	call	11424 <open>
   11214:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   11218:	e0bffb17 	ldw	r2,-20(fp)
   1121c:	10001c16 	blt	r2,zero,11290 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   11220:	00800074 	movhi	r2,1
   11224:	108bb404 	addi	r2,r2,11984
   11228:	e0fffb17 	ldw	r3,-20(fp)
   1122c:	18c00324 	muli	r3,r3,12
   11230:	10c5883a 	add	r2,r2,r3
   11234:	10c00017 	ldw	r3,0(r2)
   11238:	e0bffc17 	ldw	r2,-16(fp)
   1123c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11240:	00800074 	movhi	r2,1
   11244:	108bb404 	addi	r2,r2,11984
   11248:	e0fffb17 	ldw	r3,-20(fp)
   1124c:	18c00324 	muli	r3,r3,12
   11250:	10c5883a 	add	r2,r2,r3
   11254:	10800104 	addi	r2,r2,4
   11258:	10c00017 	ldw	r3,0(r2)
   1125c:	e0bffc17 	ldw	r2,-16(fp)
   11260:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   11264:	00800074 	movhi	r2,1
   11268:	108bb404 	addi	r2,r2,11984
   1126c:	e0fffb17 	ldw	r3,-20(fp)
   11270:	18c00324 	muli	r3,r3,12
   11274:	10c5883a 	add	r2,r2,r3
   11278:	10800204 	addi	r2,r2,8
   1127c:	10c00017 	ldw	r3,0(r2)
   11280:	e0bffc17 	ldw	r2,-16(fp)
   11284:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11288:	e13ffb17 	ldw	r4,-20(fp)
   1128c:	000faf80 	call	faf8 <alt_release_fd>
  }
} 
   11290:	0001883a 	nop
   11294:	e037883a 	mov	sp,fp
   11298:	dfc00117 	ldw	ra,4(sp)
   1129c:	df000017 	ldw	fp,0(sp)
   112a0:	dec00204 	addi	sp,sp,8
   112a4:	f800283a 	ret

000112a8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   112a8:	defffb04 	addi	sp,sp,-20
   112ac:	dfc00415 	stw	ra,16(sp)
   112b0:	df000315 	stw	fp,12(sp)
   112b4:	df000304 	addi	fp,sp,12
   112b8:	e13ffd15 	stw	r4,-12(fp)
   112bc:	e17ffe15 	stw	r5,-8(fp)
   112c0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   112c4:	01c07fc4 	movi	r7,511
   112c8:	01800044 	movi	r6,1
   112cc:	e17ffd17 	ldw	r5,-12(fp)
   112d0:	01000074 	movhi	r4,1
   112d4:	210bb704 	addi	r4,r4,11996
   112d8:	00111e40 	call	111e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   112dc:	01c07fc4 	movi	r7,511
   112e0:	000d883a 	mov	r6,zero
   112e4:	e17ffe17 	ldw	r5,-8(fp)
   112e8:	01000074 	movhi	r4,1
   112ec:	210bb404 	addi	r4,r4,11984
   112f0:	00111e40 	call	111e4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   112f4:	01c07fc4 	movi	r7,511
   112f8:	01800044 	movi	r6,1
   112fc:	e17fff17 	ldw	r5,-4(fp)
   11300:	01000074 	movhi	r4,1
   11304:	210bba04 	addi	r4,r4,12008
   11308:	00111e40 	call	111e4 <alt_open_fd>
}  
   1130c:	0001883a 	nop
   11310:	e037883a 	mov	sp,fp
   11314:	dfc00117 	ldw	ra,4(sp)
   11318:	df000017 	ldw	fp,0(sp)
   1131c:	dec00204 	addi	sp,sp,8
   11320:	f800283a 	ret

00011324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11324:	defffe04 	addi	sp,sp,-8
   11328:	dfc00115 	stw	ra,4(sp)
   1132c:	df000015 	stw	fp,0(sp)
   11330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   11334:	d0a00d17 	ldw	r2,-32716(gp)
   11338:	10000326 	beq	r2,zero,11348 <alt_get_errno+0x24>
   1133c:	d0a00d17 	ldw	r2,-32716(gp)
   11340:	103ee83a 	callr	r2
   11344:	00000106 	br	1134c <alt_get_errno+0x28>
   11348:	d0a6dc04 	addi	r2,gp,-25744
}
   1134c:	e037883a 	mov	sp,fp
   11350:	dfc00117 	ldw	ra,4(sp)
   11354:	df000017 	ldw	fp,0(sp)
   11358:	dec00204 	addi	sp,sp,8
   1135c:	f800283a 	ret

00011360 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11360:	defffd04 	addi	sp,sp,-12
   11364:	df000215 	stw	fp,8(sp)
   11368:	df000204 	addi	fp,sp,8
   1136c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11370:	e0bfff17 	ldw	r2,-4(fp)
   11374:	10800217 	ldw	r2,8(r2)
   11378:	10d00034 	orhi	r3,r2,16384
   1137c:	e0bfff17 	ldw	r2,-4(fp)
   11380:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   11384:	e03ffe15 	stw	zero,-8(fp)
   11388:	00001d06 	br	11400 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1138c:	00800074 	movhi	r2,1
   11390:	108bb404 	addi	r2,r2,11984
   11394:	e0fffe17 	ldw	r3,-8(fp)
   11398:	18c00324 	muli	r3,r3,12
   1139c:	10c5883a 	add	r2,r2,r3
   113a0:	10c00017 	ldw	r3,0(r2)
   113a4:	e0bfff17 	ldw	r2,-4(fp)
   113a8:	10800017 	ldw	r2,0(r2)
   113ac:	1880111e 	bne	r3,r2,113f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   113b0:	00800074 	movhi	r2,1
   113b4:	108bb404 	addi	r2,r2,11984
   113b8:	e0fffe17 	ldw	r3,-8(fp)
   113bc:	18c00324 	muli	r3,r3,12
   113c0:	10c5883a 	add	r2,r2,r3
   113c4:	10800204 	addi	r2,r2,8
   113c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   113cc:	1000090e 	bge	r2,zero,113f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   113d0:	e0bffe17 	ldw	r2,-8(fp)
   113d4:	10c00324 	muli	r3,r2,12
   113d8:	00800074 	movhi	r2,1
   113dc:	108bb404 	addi	r2,r2,11984
   113e0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   113e4:	e0bfff17 	ldw	r2,-4(fp)
   113e8:	18800226 	beq	r3,r2,113f4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   113ec:	00bffcc4 	movi	r2,-13
   113f0:	00000806 	br	11414 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   113f4:	e0bffe17 	ldw	r2,-8(fp)
   113f8:	10800044 	addi	r2,r2,1
   113fc:	e0bffe15 	stw	r2,-8(fp)
   11400:	d0a00c17 	ldw	r2,-32720(gp)
   11404:	1007883a 	mov	r3,r2
   11408:	e0bffe17 	ldw	r2,-8(fp)
   1140c:	18bfdf2e 	bgeu	r3,r2,1138c <__alt_data_end+0xff01138c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   11410:	0005883a 	mov	r2,zero
}
   11414:	e037883a 	mov	sp,fp
   11418:	df000017 	ldw	fp,0(sp)
   1141c:	dec00104 	addi	sp,sp,4
   11420:	f800283a 	ret

00011424 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   11424:	defff604 	addi	sp,sp,-40
   11428:	dfc00915 	stw	ra,36(sp)
   1142c:	df000815 	stw	fp,32(sp)
   11430:	df000804 	addi	fp,sp,32
   11434:	e13ffd15 	stw	r4,-12(fp)
   11438:	e17ffe15 	stw	r5,-8(fp)
   1143c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11440:	00bfffc4 	movi	r2,-1
   11444:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11448:	00bffb44 	movi	r2,-19
   1144c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11450:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   11454:	d1600a04 	addi	r5,gp,-32728
   11458:	e13ffd17 	ldw	r4,-12(fp)
   1145c:	00117400 	call	11740 <alt_find_dev>
   11460:	e0bff815 	stw	r2,-32(fp)
   11464:	e0bff817 	ldw	r2,-32(fp)
   11468:	1000051e 	bne	r2,zero,11480 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1146c:	e13ffd17 	ldw	r4,-12(fp)
   11470:	00117d00 	call	117d0 <alt_find_file>
   11474:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11478:	00800044 	movi	r2,1
   1147c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11480:	e0bff817 	ldw	r2,-32(fp)
   11484:	10002926 	beq	r2,zero,1152c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11488:	e13ff817 	ldw	r4,-32(fp)
   1148c:	00118d80 	call	118d8 <alt_get_fd>
   11490:	e0bff915 	stw	r2,-28(fp)
   11494:	e0bff917 	ldw	r2,-28(fp)
   11498:	1000030e 	bge	r2,zero,114a8 <open+0x84>
    {
      status = index;
   1149c:	e0bff917 	ldw	r2,-28(fp)
   114a0:	e0bffa15 	stw	r2,-24(fp)
   114a4:	00002306 	br	11534 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   114a8:	e0bff917 	ldw	r2,-28(fp)
   114ac:	10c00324 	muli	r3,r2,12
   114b0:	00800074 	movhi	r2,1
   114b4:	108bb404 	addi	r2,r2,11984
   114b8:	1885883a 	add	r2,r3,r2
   114bc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   114c0:	e0fffe17 	ldw	r3,-8(fp)
   114c4:	00900034 	movhi	r2,16384
   114c8:	10bfffc4 	addi	r2,r2,-1
   114cc:	1886703a 	and	r3,r3,r2
   114d0:	e0bffc17 	ldw	r2,-16(fp)
   114d4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   114d8:	e0bffb17 	ldw	r2,-20(fp)
   114dc:	1000051e 	bne	r2,zero,114f4 <open+0xd0>
   114e0:	e13ffc17 	ldw	r4,-16(fp)
   114e4:	00113600 	call	11360 <alt_file_locked>
   114e8:	e0bffa15 	stw	r2,-24(fp)
   114ec:	e0bffa17 	ldw	r2,-24(fp)
   114f0:	10001016 	blt	r2,zero,11534 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   114f4:	e0bff817 	ldw	r2,-32(fp)
   114f8:	10800317 	ldw	r2,12(r2)
   114fc:	10000826 	beq	r2,zero,11520 <open+0xfc>
   11500:	e0bff817 	ldw	r2,-32(fp)
   11504:	10800317 	ldw	r2,12(r2)
   11508:	e1ffff17 	ldw	r7,-4(fp)
   1150c:	e1bffe17 	ldw	r6,-8(fp)
   11510:	e17ffd17 	ldw	r5,-12(fp)
   11514:	e13ffc17 	ldw	r4,-16(fp)
   11518:	103ee83a 	callr	r2
   1151c:	00000106 	br	11524 <open+0x100>
   11520:	0005883a 	mov	r2,zero
   11524:	e0bffa15 	stw	r2,-24(fp)
   11528:	00000206 	br	11534 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1152c:	00bffb44 	movi	r2,-19
   11530:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   11534:	e0bffa17 	ldw	r2,-24(fp)
   11538:	1000090e 	bge	r2,zero,11560 <open+0x13c>
  {
    alt_release_fd (index);  
   1153c:	e13ff917 	ldw	r4,-28(fp)
   11540:	000faf80 	call	faf8 <alt_release_fd>
    ALT_ERRNO = -status;
   11544:	00113240 	call	11324 <alt_get_errno>
   11548:	1007883a 	mov	r3,r2
   1154c:	e0bffa17 	ldw	r2,-24(fp)
   11550:	0085c83a 	sub	r2,zero,r2
   11554:	18800015 	stw	r2,0(r3)
    return -1;
   11558:	00bfffc4 	movi	r2,-1
   1155c:	00000106 	br	11564 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11560:	e0bff917 	ldw	r2,-28(fp)
}
   11564:	e037883a 	mov	sp,fp
   11568:	dfc00117 	ldw	ra,4(sp)
   1156c:	df000017 	ldw	fp,0(sp)
   11570:	dec00204 	addi	sp,sp,8
   11574:	f800283a 	ret

00011578 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11578:	defffa04 	addi	sp,sp,-24
   1157c:	df000515 	stw	fp,20(sp)
   11580:	df000504 	addi	fp,sp,20
   11584:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11588:	0005303a 	rdctl	r2,status
   1158c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11590:	e0fffc17 	ldw	r3,-16(fp)
   11594:	00bfff84 	movi	r2,-2
   11598:	1884703a 	and	r2,r3,r2
   1159c:	1001703a 	wrctl	status,r2
  
  return context;
   115a0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   115a4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   115a8:	e0bfff17 	ldw	r2,-4(fp)
   115ac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   115b0:	e0bffd17 	ldw	r2,-12(fp)
   115b4:	10800017 	ldw	r2,0(r2)
   115b8:	e0fffd17 	ldw	r3,-12(fp)
   115bc:	18c00117 	ldw	r3,4(r3)
   115c0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   115c4:	e0bffd17 	ldw	r2,-12(fp)
   115c8:	10800117 	ldw	r2,4(r2)
   115cc:	e0fffd17 	ldw	r3,-12(fp)
   115d0:	18c00017 	ldw	r3,0(r3)
   115d4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   115d8:	e0bffd17 	ldw	r2,-12(fp)
   115dc:	e0fffd17 	ldw	r3,-12(fp)
   115e0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   115e4:	e0bffd17 	ldw	r2,-12(fp)
   115e8:	e0fffd17 	ldw	r3,-12(fp)
   115ec:	10c00015 	stw	r3,0(r2)
   115f0:	e0bffb17 	ldw	r2,-20(fp)
   115f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115f8:	e0bffe17 	ldw	r2,-8(fp)
   115fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   11600:	0001883a 	nop
   11604:	e037883a 	mov	sp,fp
   11608:	df000017 	ldw	fp,0(sp)
   1160c:	dec00104 	addi	sp,sp,4
   11610:	f800283a 	ret

00011614 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   11614:	defffb04 	addi	sp,sp,-20
   11618:	dfc00415 	stw	ra,16(sp)
   1161c:	df000315 	stw	fp,12(sp)
   11620:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   11624:	d0a01017 	ldw	r2,-32704(gp)
   11628:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1162c:	d0a6e717 	ldw	r2,-25700(gp)
   11630:	10800044 	addi	r2,r2,1
   11634:	d0a6e715 	stw	r2,-25700(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11638:	00002e06 	br	116f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1163c:	e0bffd17 	ldw	r2,-12(fp)
   11640:	10800017 	ldw	r2,0(r2)
   11644:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11648:	e0bffd17 	ldw	r2,-12(fp)
   1164c:	10800403 	ldbu	r2,16(r2)
   11650:	10803fcc 	andi	r2,r2,255
   11654:	10000426 	beq	r2,zero,11668 <alt_tick+0x54>
   11658:	d0a6e717 	ldw	r2,-25700(gp)
   1165c:	1000021e 	bne	r2,zero,11668 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11660:	e0bffd17 	ldw	r2,-12(fp)
   11664:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11668:	e0bffd17 	ldw	r2,-12(fp)
   1166c:	10800217 	ldw	r2,8(r2)
   11670:	d0e6e717 	ldw	r3,-25700(gp)
   11674:	18801d36 	bltu	r3,r2,116ec <alt_tick+0xd8>
   11678:	e0bffd17 	ldw	r2,-12(fp)
   1167c:	10800403 	ldbu	r2,16(r2)
   11680:	10803fcc 	andi	r2,r2,255
   11684:	1000191e 	bne	r2,zero,116ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11688:	e0bffd17 	ldw	r2,-12(fp)
   1168c:	10800317 	ldw	r2,12(r2)
   11690:	e0fffd17 	ldw	r3,-12(fp)
   11694:	18c00517 	ldw	r3,20(r3)
   11698:	1809883a 	mov	r4,r3
   1169c:	103ee83a 	callr	r2
   116a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   116a4:	e0bfff17 	ldw	r2,-4(fp)
   116a8:	1000031e 	bne	r2,zero,116b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   116ac:	e13ffd17 	ldw	r4,-12(fp)
   116b0:	00115780 	call	11578 <alt_alarm_stop>
   116b4:	00000d06 	br	116ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   116b8:	e0bffd17 	ldw	r2,-12(fp)
   116bc:	10c00217 	ldw	r3,8(r2)
   116c0:	e0bfff17 	ldw	r2,-4(fp)
   116c4:	1887883a 	add	r3,r3,r2
   116c8:	e0bffd17 	ldw	r2,-12(fp)
   116cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   116d0:	e0bffd17 	ldw	r2,-12(fp)
   116d4:	10c00217 	ldw	r3,8(r2)
   116d8:	d0a6e717 	ldw	r2,-25700(gp)
   116dc:	1880032e 	bgeu	r3,r2,116ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   116e0:	e0bffd17 	ldw	r2,-12(fp)
   116e4:	00c00044 	movi	r3,1
   116e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   116ec:	e0bffe17 	ldw	r2,-8(fp)
   116f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   116f4:	e0fffd17 	ldw	r3,-12(fp)
   116f8:	d0a01004 	addi	r2,gp,-32704
   116fc:	18bfcf1e 	bne	r3,r2,1163c <__alt_data_end+0xff01163c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   11700:	0001883a 	nop
}
   11704:	0001883a 	nop
   11708:	e037883a 	mov	sp,fp
   1170c:	dfc00117 	ldw	ra,4(sp)
   11710:	df000017 	ldw	fp,0(sp)
   11714:	dec00204 	addi	sp,sp,8
   11718:	f800283a 	ret

0001171c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1171c:	deffff04 	addi	sp,sp,-4
   11720:	df000015 	stw	fp,0(sp)
   11724:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   11728:	000170fa 	wrctl	ienable,zero
}
   1172c:	0001883a 	nop
   11730:	e037883a 	mov	sp,fp
   11734:	df000017 	ldw	fp,0(sp)
   11738:	dec00104 	addi	sp,sp,4
   1173c:	f800283a 	ret

00011740 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11740:	defffa04 	addi	sp,sp,-24
   11744:	dfc00515 	stw	ra,20(sp)
   11748:	df000415 	stw	fp,16(sp)
   1174c:	df000404 	addi	fp,sp,16
   11750:	e13ffe15 	stw	r4,-8(fp)
   11754:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11758:	e0bfff17 	ldw	r2,-4(fp)
   1175c:	10800017 	ldw	r2,0(r2)
   11760:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   11764:	e13ffe17 	ldw	r4,-8(fp)
   11768:	00036300 	call	3630 <strlen>
   1176c:	10800044 	addi	r2,r2,1
   11770:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11774:	00000d06 	br	117ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11778:	e0bffc17 	ldw	r2,-16(fp)
   1177c:	10800217 	ldw	r2,8(r2)
   11780:	e0fffd17 	ldw	r3,-12(fp)
   11784:	180d883a 	mov	r6,r3
   11788:	e17ffe17 	ldw	r5,-8(fp)
   1178c:	1009883a 	mov	r4,r2
   11790:	0011af40 	call	11af4 <memcmp>
   11794:	1000021e 	bne	r2,zero,117a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11798:	e0bffc17 	ldw	r2,-16(fp)
   1179c:	00000706 	br	117bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   117a0:	e0bffc17 	ldw	r2,-16(fp)
   117a4:	10800017 	ldw	r2,0(r2)
   117a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   117ac:	e0fffc17 	ldw	r3,-16(fp)
   117b0:	e0bfff17 	ldw	r2,-4(fp)
   117b4:	18bff01e 	bne	r3,r2,11778 <__alt_data_end+0xff011778>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   117b8:	0005883a 	mov	r2,zero
}
   117bc:	e037883a 	mov	sp,fp
   117c0:	dfc00117 	ldw	ra,4(sp)
   117c4:	df000017 	ldw	fp,0(sp)
   117c8:	dec00204 	addi	sp,sp,8
   117cc:	f800283a 	ret

000117d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   117d0:	defffb04 	addi	sp,sp,-20
   117d4:	dfc00415 	stw	ra,16(sp)
   117d8:	df000315 	stw	fp,12(sp)
   117dc:	df000304 	addi	fp,sp,12
   117e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   117e4:	d0a00817 	ldw	r2,-32736(gp)
   117e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   117ec:	00003106 	br	118b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   117f0:	e0bffd17 	ldw	r2,-12(fp)
   117f4:	10800217 	ldw	r2,8(r2)
   117f8:	1009883a 	mov	r4,r2
   117fc:	00036300 	call	3630 <strlen>
   11800:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   11804:	e0bffd17 	ldw	r2,-12(fp)
   11808:	10c00217 	ldw	r3,8(r2)
   1180c:	e0bffe17 	ldw	r2,-8(fp)
   11810:	10bfffc4 	addi	r2,r2,-1
   11814:	1885883a 	add	r2,r3,r2
   11818:	10800003 	ldbu	r2,0(r2)
   1181c:	10803fcc 	andi	r2,r2,255
   11820:	1080201c 	xori	r2,r2,128
   11824:	10bfe004 	addi	r2,r2,-128
   11828:	10800bd8 	cmpnei	r2,r2,47
   1182c:	1000031e 	bne	r2,zero,1183c <alt_find_file+0x6c>
    {
      len -= 1;
   11830:	e0bffe17 	ldw	r2,-8(fp)
   11834:	10bfffc4 	addi	r2,r2,-1
   11838:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1183c:	e0bffe17 	ldw	r2,-8(fp)
   11840:	e0ffff17 	ldw	r3,-4(fp)
   11844:	1885883a 	add	r2,r3,r2
   11848:	10800003 	ldbu	r2,0(r2)
   1184c:	10803fcc 	andi	r2,r2,255
   11850:	1080201c 	xori	r2,r2,128
   11854:	10bfe004 	addi	r2,r2,-128
   11858:	10800be0 	cmpeqi	r2,r2,47
   1185c:	1000081e 	bne	r2,zero,11880 <alt_find_file+0xb0>
   11860:	e0bffe17 	ldw	r2,-8(fp)
   11864:	e0ffff17 	ldw	r3,-4(fp)
   11868:	1885883a 	add	r2,r3,r2
   1186c:	10800003 	ldbu	r2,0(r2)
   11870:	10803fcc 	andi	r2,r2,255
   11874:	1080201c 	xori	r2,r2,128
   11878:	10bfe004 	addi	r2,r2,-128
   1187c:	10000a1e 	bne	r2,zero,118a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11880:	e0bffd17 	ldw	r2,-12(fp)
   11884:	10800217 	ldw	r2,8(r2)
   11888:	e0fffe17 	ldw	r3,-8(fp)
   1188c:	180d883a 	mov	r6,r3
   11890:	e17fff17 	ldw	r5,-4(fp)
   11894:	1009883a 	mov	r4,r2
   11898:	0011af40 	call	11af4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1189c:	1000021e 	bne	r2,zero,118a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   118a0:	e0bffd17 	ldw	r2,-12(fp)
   118a4:	00000706 	br	118c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   118a8:	e0bffd17 	ldw	r2,-12(fp)
   118ac:	10800017 	ldw	r2,0(r2)
   118b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   118b4:	e0fffd17 	ldw	r3,-12(fp)
   118b8:	d0a00804 	addi	r2,gp,-32736
   118bc:	18bfcc1e 	bne	r3,r2,117f0 <__alt_data_end+0xff0117f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   118c0:	0005883a 	mov	r2,zero
}
   118c4:	e037883a 	mov	sp,fp
   118c8:	dfc00117 	ldw	ra,4(sp)
   118cc:	df000017 	ldw	fp,0(sp)
   118d0:	dec00204 	addi	sp,sp,8
   118d4:	f800283a 	ret

000118d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   118d8:	defffc04 	addi	sp,sp,-16
   118dc:	df000315 	stw	fp,12(sp)
   118e0:	df000304 	addi	fp,sp,12
   118e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   118e8:	00bffa04 	movi	r2,-24
   118ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   118f0:	e03ffd15 	stw	zero,-12(fp)
   118f4:	00001906 	br	1195c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   118f8:	00800074 	movhi	r2,1
   118fc:	108bb404 	addi	r2,r2,11984
   11900:	e0fffd17 	ldw	r3,-12(fp)
   11904:	18c00324 	muli	r3,r3,12
   11908:	10c5883a 	add	r2,r2,r3
   1190c:	10800017 	ldw	r2,0(r2)
   11910:	10000f1e 	bne	r2,zero,11950 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   11914:	00800074 	movhi	r2,1
   11918:	108bb404 	addi	r2,r2,11984
   1191c:	e0fffd17 	ldw	r3,-12(fp)
   11920:	18c00324 	muli	r3,r3,12
   11924:	10c5883a 	add	r2,r2,r3
   11928:	e0ffff17 	ldw	r3,-4(fp)
   1192c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   11930:	d0e00c17 	ldw	r3,-32720(gp)
   11934:	e0bffd17 	ldw	r2,-12(fp)
   11938:	1880020e 	bge	r3,r2,11944 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   1193c:	e0bffd17 	ldw	r2,-12(fp)
   11940:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   11944:	e0bffd17 	ldw	r2,-12(fp)
   11948:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   1194c:	00000606 	br	11968 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11950:	e0bffd17 	ldw	r2,-12(fp)
   11954:	10800044 	addi	r2,r2,1
   11958:	e0bffd15 	stw	r2,-12(fp)
   1195c:	e0bffd17 	ldw	r2,-12(fp)
   11960:	10800810 	cmplti	r2,r2,32
   11964:	103fe41e 	bne	r2,zero,118f8 <__alt_data_end+0xff0118f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11968:	e0bffe17 	ldw	r2,-8(fp)
}
   1196c:	e037883a 	mov	sp,fp
   11970:	df000017 	ldw	fp,0(sp)
   11974:	dec00104 	addi	sp,sp,4
   11978:	f800283a 	ret

0001197c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1197c:	defffb04 	addi	sp,sp,-20
   11980:	df000415 	stw	fp,16(sp)
   11984:	df000404 	addi	fp,sp,16
   11988:	e13ffe15 	stw	r4,-8(fp)
   1198c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11990:	e0bfff17 	ldw	r2,-4(fp)
   11994:	10840070 	cmpltui	r2,r2,4097
   11998:	1000021e 	bne	r2,zero,119a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1199c:	00840004 	movi	r2,4096
   119a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   119a4:	e0fffe17 	ldw	r3,-8(fp)
   119a8:	e0bfff17 	ldw	r2,-4(fp)
   119ac:	1885883a 	add	r2,r3,r2
   119b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   119b4:	e0bffe17 	ldw	r2,-8(fp)
   119b8:	e0bffc15 	stw	r2,-16(fp)
   119bc:	00000506 	br	119d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   119c0:	e0bffc17 	ldw	r2,-16(fp)
   119c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   119c8:	e0bffc17 	ldw	r2,-16(fp)
   119cc:	10800804 	addi	r2,r2,32
   119d0:	e0bffc15 	stw	r2,-16(fp)
   119d4:	e0fffc17 	ldw	r3,-16(fp)
   119d8:	e0bffd17 	ldw	r2,-12(fp)
   119dc:	18bff836 	bltu	r3,r2,119c0 <__alt_data_end+0xff0119c0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   119e0:	e0bffe17 	ldw	r2,-8(fp)
   119e4:	108007cc 	andi	r2,r2,31
   119e8:	10000226 	beq	r2,zero,119f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   119ec:	e0bffc17 	ldw	r2,-16(fp)
   119f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   119f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   119f8:	0001883a 	nop
   119fc:	e037883a 	mov	sp,fp
   11a00:	df000017 	ldw	fp,0(sp)
   11a04:	dec00104 	addi	sp,sp,4
   11a08:	f800283a 	ret

00011a0c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   11a0c:	defffe04 	addi	sp,sp,-8
   11a10:	df000115 	stw	fp,4(sp)
   11a14:	df000104 	addi	fp,sp,4
   11a18:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   11a1c:	e0bfff17 	ldw	r2,-4(fp)
   11a20:	10bffe84 	addi	r2,r2,-6
   11a24:	10c00428 	cmpgeui	r3,r2,16
   11a28:	18001a1e 	bne	r3,zero,11a94 <alt_exception_cause_generated_bad_addr+0x88>
   11a2c:	100690ba 	slli	r3,r2,2
   11a30:	00800074 	movhi	r2,1
   11a34:	10869104 	addi	r2,r2,6724
   11a38:	1885883a 	add	r2,r3,r2
   11a3c:	10800017 	ldw	r2,0(r2)
   11a40:	1000683a 	jmp	r2
   11a44:	00011a84 	movi	zero,1130
   11a48:	00011a84 	movi	zero,1130
   11a4c:	00011a94 	movui	zero,1130
   11a50:	00011a94 	movui	zero,1130
   11a54:	00011a94 	movui	zero,1130
   11a58:	00011a84 	movi	zero,1130
   11a5c:	00011a8c 	andi	zero,zero,1130
   11a60:	00011a94 	movui	zero,1130
   11a64:	00011a84 	movi	zero,1130
   11a68:	00011a84 	movi	zero,1130
   11a6c:	00011a94 	movui	zero,1130
   11a70:	00011a84 	movi	zero,1130
   11a74:	00011a8c 	andi	zero,zero,1130
   11a78:	00011a94 	movui	zero,1130
   11a7c:	00011a94 	movui	zero,1130
   11a80:	00011a84 	movi	zero,1130
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11a84:	00800044 	movi	r2,1
   11a88:	00000306 	br	11a98 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11a8c:	0005883a 	mov	r2,zero
   11a90:	00000106 	br	11a98 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11a94:	0005883a 	mov	r2,zero
  }
}
   11a98:	e037883a 	mov	sp,fp
   11a9c:	df000017 	ldw	fp,0(sp)
   11aa0:	dec00104 	addi	sp,sp,4
   11aa4:	f800283a 	ret

00011aa8 <atexit>:
   11aa8:	200b883a 	mov	r5,r4
   11aac:	000f883a 	mov	r7,zero
   11ab0:	000d883a 	mov	r6,zero
   11ab4:	0009883a 	mov	r4,zero
   11ab8:	0011b701 	jmpi	11b70 <__register_exitproc>

00011abc <exit>:
   11abc:	defffe04 	addi	sp,sp,-8
   11ac0:	000b883a 	mov	r5,zero
   11ac4:	dc000015 	stw	r16,0(sp)
   11ac8:	dfc00115 	stw	ra,4(sp)
   11acc:	2021883a 	mov	r16,r4
   11ad0:	0011c880 	call	11c88 <__call_exitprocs>
   11ad4:	00800074 	movhi	r2,1
   11ad8:	10903004 	addi	r2,r2,16576
   11adc:	11000017 	ldw	r4,0(r2)
   11ae0:	20800f17 	ldw	r2,60(r4)
   11ae4:	10000126 	beq	r2,zero,11aec <exit+0x30>
   11ae8:	103ee83a 	callr	r2
   11aec:	8009883a 	mov	r4,r16
   11af0:	0011e080 	call	11e08 <_exit>

00011af4 <memcmp>:
   11af4:	01c000c4 	movi	r7,3
   11af8:	3980192e 	bgeu	r7,r6,11b60 <memcmp+0x6c>
   11afc:	2144b03a 	or	r2,r4,r5
   11b00:	11c4703a 	and	r2,r2,r7
   11b04:	10000f26 	beq	r2,zero,11b44 <memcmp+0x50>
   11b08:	20800003 	ldbu	r2,0(r4)
   11b0c:	28c00003 	ldbu	r3,0(r5)
   11b10:	10c0151e 	bne	r2,r3,11b68 <memcmp+0x74>
   11b14:	31bfff84 	addi	r6,r6,-2
   11b18:	01ffffc4 	movi	r7,-1
   11b1c:	00000406 	br	11b30 <memcmp+0x3c>
   11b20:	20800003 	ldbu	r2,0(r4)
   11b24:	28c00003 	ldbu	r3,0(r5)
   11b28:	31bfffc4 	addi	r6,r6,-1
   11b2c:	10c00e1e 	bne	r2,r3,11b68 <memcmp+0x74>
   11b30:	21000044 	addi	r4,r4,1
   11b34:	29400044 	addi	r5,r5,1
   11b38:	31fff91e 	bne	r6,r7,11b20 <__alt_data_end+0xff011b20>
   11b3c:	0005883a 	mov	r2,zero
   11b40:	f800283a 	ret
   11b44:	20c00017 	ldw	r3,0(r4)
   11b48:	28800017 	ldw	r2,0(r5)
   11b4c:	18bfee1e 	bne	r3,r2,11b08 <__alt_data_end+0xff011b08>
   11b50:	31bfff04 	addi	r6,r6,-4
   11b54:	21000104 	addi	r4,r4,4
   11b58:	29400104 	addi	r5,r5,4
   11b5c:	39bff936 	bltu	r7,r6,11b44 <__alt_data_end+0xff011b44>
   11b60:	303fe91e 	bne	r6,zero,11b08 <__alt_data_end+0xff011b08>
   11b64:	003ff506 	br	11b3c <__alt_data_end+0xff011b3c>
   11b68:	10c5c83a 	sub	r2,r2,r3
   11b6c:	f800283a 	ret

00011b70 <__register_exitproc>:
   11b70:	defffa04 	addi	sp,sp,-24
   11b74:	dc000315 	stw	r16,12(sp)
   11b78:	04000074 	movhi	r16,1
   11b7c:	84103004 	addi	r16,r16,16576
   11b80:	80c00017 	ldw	r3,0(r16)
   11b84:	dc400415 	stw	r17,16(sp)
   11b88:	dfc00515 	stw	ra,20(sp)
   11b8c:	18805217 	ldw	r2,328(r3)
   11b90:	2023883a 	mov	r17,r4
   11b94:	10003726 	beq	r2,zero,11c74 <__register_exitproc+0x104>
   11b98:	10c00117 	ldw	r3,4(r2)
   11b9c:	010007c4 	movi	r4,31
   11ba0:	20c00e16 	blt	r4,r3,11bdc <__register_exitproc+0x6c>
   11ba4:	1a000044 	addi	r8,r3,1
   11ba8:	8800221e 	bne	r17,zero,11c34 <__register_exitproc+0xc4>
   11bac:	18c00084 	addi	r3,r3,2
   11bb0:	18c7883a 	add	r3,r3,r3
   11bb4:	18c7883a 	add	r3,r3,r3
   11bb8:	12000115 	stw	r8,4(r2)
   11bbc:	10c7883a 	add	r3,r2,r3
   11bc0:	19400015 	stw	r5,0(r3)
   11bc4:	0005883a 	mov	r2,zero
   11bc8:	dfc00517 	ldw	ra,20(sp)
   11bcc:	dc400417 	ldw	r17,16(sp)
   11bd0:	dc000317 	ldw	r16,12(sp)
   11bd4:	dec00604 	addi	sp,sp,24
   11bd8:	f800283a 	ret
   11bdc:	00800034 	movhi	r2,0
   11be0:	108b1a04 	addi	r2,r2,11368
   11be4:	10002626 	beq	r2,zero,11c80 <__register_exitproc+0x110>
   11be8:	01006404 	movi	r4,400
   11bec:	d9400015 	stw	r5,0(sp)
   11bf0:	d9800115 	stw	r6,4(sp)
   11bf4:	d9c00215 	stw	r7,8(sp)
   11bf8:	0002c680 	call	2c68 <malloc>
   11bfc:	d9400017 	ldw	r5,0(sp)
   11c00:	d9800117 	ldw	r6,4(sp)
   11c04:	d9c00217 	ldw	r7,8(sp)
   11c08:	10001d26 	beq	r2,zero,11c80 <__register_exitproc+0x110>
   11c0c:	81000017 	ldw	r4,0(r16)
   11c10:	10000115 	stw	zero,4(r2)
   11c14:	02000044 	movi	r8,1
   11c18:	22405217 	ldw	r9,328(r4)
   11c1c:	0007883a 	mov	r3,zero
   11c20:	12400015 	stw	r9,0(r2)
   11c24:	20805215 	stw	r2,328(r4)
   11c28:	10006215 	stw	zero,392(r2)
   11c2c:	10006315 	stw	zero,396(r2)
   11c30:	883fde26 	beq	r17,zero,11bac <__alt_data_end+0xff011bac>
   11c34:	18c9883a 	add	r4,r3,r3
   11c38:	2109883a 	add	r4,r4,r4
   11c3c:	1109883a 	add	r4,r2,r4
   11c40:	21802215 	stw	r6,136(r4)
   11c44:	01800044 	movi	r6,1
   11c48:	12406217 	ldw	r9,392(r2)
   11c4c:	30cc983a 	sll	r6,r6,r3
   11c50:	4992b03a 	or	r9,r9,r6
   11c54:	12406215 	stw	r9,392(r2)
   11c58:	21c04215 	stw	r7,264(r4)
   11c5c:	01000084 	movi	r4,2
   11c60:	893fd21e 	bne	r17,r4,11bac <__alt_data_end+0xff011bac>
   11c64:	11006317 	ldw	r4,396(r2)
   11c68:	218cb03a 	or	r6,r4,r6
   11c6c:	11806315 	stw	r6,396(r2)
   11c70:	003fce06 	br	11bac <__alt_data_end+0xff011bac>
   11c74:	18805304 	addi	r2,r3,332
   11c78:	18805215 	stw	r2,328(r3)
   11c7c:	003fc606 	br	11b98 <__alt_data_end+0xff011b98>
   11c80:	00bfffc4 	movi	r2,-1
   11c84:	003fd006 	br	11bc8 <__alt_data_end+0xff011bc8>

00011c88 <__call_exitprocs>:
   11c88:	defff504 	addi	sp,sp,-44
   11c8c:	df000915 	stw	fp,36(sp)
   11c90:	dd400615 	stw	r21,24(sp)
   11c94:	dc800315 	stw	r18,12(sp)
   11c98:	dfc00a15 	stw	ra,40(sp)
   11c9c:	ddc00815 	stw	r23,32(sp)
   11ca0:	dd800715 	stw	r22,28(sp)
   11ca4:	dd000515 	stw	r20,20(sp)
   11ca8:	dcc00415 	stw	r19,16(sp)
   11cac:	dc400215 	stw	r17,8(sp)
   11cb0:	dc000115 	stw	r16,4(sp)
   11cb4:	d9000015 	stw	r4,0(sp)
   11cb8:	2839883a 	mov	fp,r5
   11cbc:	04800044 	movi	r18,1
   11cc0:	057fffc4 	movi	r21,-1
   11cc4:	00800074 	movhi	r2,1
   11cc8:	10903004 	addi	r2,r2,16576
   11ccc:	12000017 	ldw	r8,0(r2)
   11cd0:	45005217 	ldw	r20,328(r8)
   11cd4:	44c05204 	addi	r19,r8,328
   11cd8:	a0001c26 	beq	r20,zero,11d4c <__call_exitprocs+0xc4>
   11cdc:	a0800117 	ldw	r2,4(r20)
   11ce0:	15ffffc4 	addi	r23,r2,-1
   11ce4:	b8000d16 	blt	r23,zero,11d1c <__call_exitprocs+0x94>
   11ce8:	14000044 	addi	r16,r2,1
   11cec:	8421883a 	add	r16,r16,r16
   11cf0:	8421883a 	add	r16,r16,r16
   11cf4:	84402004 	addi	r17,r16,128
   11cf8:	a463883a 	add	r17,r20,r17
   11cfc:	a421883a 	add	r16,r20,r16
   11d00:	e0001e26 	beq	fp,zero,11d7c <__call_exitprocs+0xf4>
   11d04:	80804017 	ldw	r2,256(r16)
   11d08:	e0801c26 	beq	fp,r2,11d7c <__call_exitprocs+0xf4>
   11d0c:	bdffffc4 	addi	r23,r23,-1
   11d10:	843fff04 	addi	r16,r16,-4
   11d14:	8c7fff04 	addi	r17,r17,-4
   11d18:	bd7ff91e 	bne	r23,r21,11d00 <__alt_data_end+0xff011d00>
   11d1c:	00800034 	movhi	r2,0
   11d20:	108b1f04 	addi	r2,r2,11388
   11d24:	10000926 	beq	r2,zero,11d4c <__call_exitprocs+0xc4>
   11d28:	a0800117 	ldw	r2,4(r20)
   11d2c:	1000301e 	bne	r2,zero,11df0 <__call_exitprocs+0x168>
   11d30:	a0800017 	ldw	r2,0(r20)
   11d34:	10003226 	beq	r2,zero,11e00 <__call_exitprocs+0x178>
   11d38:	a009883a 	mov	r4,r20
   11d3c:	98800015 	stw	r2,0(r19)
   11d40:	0002c7c0 	call	2c7c <free>
   11d44:	9d000017 	ldw	r20,0(r19)
   11d48:	a03fe41e 	bne	r20,zero,11cdc <__alt_data_end+0xff011cdc>
   11d4c:	dfc00a17 	ldw	ra,40(sp)
   11d50:	df000917 	ldw	fp,36(sp)
   11d54:	ddc00817 	ldw	r23,32(sp)
   11d58:	dd800717 	ldw	r22,28(sp)
   11d5c:	dd400617 	ldw	r21,24(sp)
   11d60:	dd000517 	ldw	r20,20(sp)
   11d64:	dcc00417 	ldw	r19,16(sp)
   11d68:	dc800317 	ldw	r18,12(sp)
   11d6c:	dc400217 	ldw	r17,8(sp)
   11d70:	dc000117 	ldw	r16,4(sp)
   11d74:	dec00b04 	addi	sp,sp,44
   11d78:	f800283a 	ret
   11d7c:	a0800117 	ldw	r2,4(r20)
   11d80:	80c00017 	ldw	r3,0(r16)
   11d84:	10bfffc4 	addi	r2,r2,-1
   11d88:	15c01426 	beq	r2,r23,11ddc <__call_exitprocs+0x154>
   11d8c:	80000015 	stw	zero,0(r16)
   11d90:	183fde26 	beq	r3,zero,11d0c <__alt_data_end+0xff011d0c>
   11d94:	95c8983a 	sll	r4,r18,r23
   11d98:	a0806217 	ldw	r2,392(r20)
   11d9c:	a5800117 	ldw	r22,4(r20)
   11da0:	2084703a 	and	r2,r4,r2
   11da4:	10000b26 	beq	r2,zero,11dd4 <__call_exitprocs+0x14c>
   11da8:	a0806317 	ldw	r2,396(r20)
   11dac:	2088703a 	and	r4,r4,r2
   11db0:	20000c1e 	bne	r4,zero,11de4 <__call_exitprocs+0x15c>
   11db4:	89400017 	ldw	r5,0(r17)
   11db8:	d9000017 	ldw	r4,0(sp)
   11dbc:	183ee83a 	callr	r3
   11dc0:	a0800117 	ldw	r2,4(r20)
   11dc4:	15bfbf1e 	bne	r2,r22,11cc4 <__alt_data_end+0xff011cc4>
   11dc8:	98800017 	ldw	r2,0(r19)
   11dcc:	153fcf26 	beq	r2,r20,11d0c <__alt_data_end+0xff011d0c>
   11dd0:	003fbc06 	br	11cc4 <__alt_data_end+0xff011cc4>
   11dd4:	183ee83a 	callr	r3
   11dd8:	003ff906 	br	11dc0 <__alt_data_end+0xff011dc0>
   11ddc:	a5c00115 	stw	r23,4(r20)
   11de0:	003feb06 	br	11d90 <__alt_data_end+0xff011d90>
   11de4:	89000017 	ldw	r4,0(r17)
   11de8:	183ee83a 	callr	r3
   11dec:	003ff406 	br	11dc0 <__alt_data_end+0xff011dc0>
   11df0:	a0800017 	ldw	r2,0(r20)
   11df4:	a027883a 	mov	r19,r20
   11df8:	1029883a 	mov	r20,r2
   11dfc:	003fb606 	br	11cd8 <__alt_data_end+0xff011cd8>
   11e00:	0005883a 	mov	r2,zero
   11e04:	003ffb06 	br	11df4 <__alt_data_end+0xff011df4>

00011e08 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11e08:	defffd04 	addi	sp,sp,-12
   11e0c:	df000215 	stw	fp,8(sp)
   11e10:	df000204 	addi	fp,sp,8
   11e14:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11e18:	0001883a 	nop
   11e1c:	e0bfff17 	ldw	r2,-4(fp)
   11e20:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11e24:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11e28:	10000226 	beq	r2,zero,11e34 <_exit+0x2c>
    ALT_SIM_FAIL();
   11e2c:	002af070 	cmpltui	zero,zero,43969
   11e30:	00000106 	br	11e38 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11e34:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11e38:	003fff06 	br	11e38 <__alt_data_end+0xff011e38>
