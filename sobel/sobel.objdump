
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000125ac memsz 0x000125ac flags r-x
    LOAD off    0x000135cc vaddr 0x000125cc paddr 0x000140c0 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00015bb4 vaddr 0x00015bb4 paddr 0x00015bb4 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011bc0  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007c8  00011e04  00011e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  000125cc  000140c0  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00015bb4  00015bb4  00015bb4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00015d44  00015d44  000150c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000150c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  000150e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024fd3  00000000  00000000  00016120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009977  00000000  00000000  0003b0f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c2c2  00000000  00000000  00044a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002728  00000000  00000000  00050d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d8f  00000000  00000000  00053454  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000178c0  00000000  00000000  000571e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  0006eaa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00073dd6  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00073dd9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00073de5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00073de6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00073de7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00073deb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00073def  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00073df3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00073dfc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00073e05  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00073e0e  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  00073e19  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00073e67  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007993f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
00011e04 l    d  .rodata	00000000 .rodata
000125cc l    d  .rwdata	00000000 .rwdata
00015bb4 l    d  .bss	00000000 .bss
00015d44 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001231a l     O .rodata	00000010 zeroes.4404
000058a4 l     F .text	000000bc __sbprintf
0001232a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00005ab4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000075e4 l     F .text	00000008 __fp_unlock
000075f8 l     F .text	0000019c __sinit.part.1
00007794 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000129d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00012e18 l     O .rwdata	00000020 lc_ctype_charset
00012df8 l     O .rwdata	00000020 lc_message_charset
00012e38 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0001235c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a330 l     F .text	000000fc __sprint_r.part.0
00012490 l     O .rodata	00000010 blanks.4348
00012480 l     O .rodata	00000010 zeroes.4349
0000b8bc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000f3c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000f4d0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f4fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000f5e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000f6c8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000f7b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000f988 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000140b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000fc04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000fd38 l     F .text	00000034 alt_dev_reg
00013018 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00010044 l     F .text	0000020c altera_avalon_jtag_uart_irq
00010250 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00010888 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00010d38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000111ac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000112ec l     F .text	0000003c alt_get_errno
00011328 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00015c18 g     O .bss	00000004 alt_instruction_exception_handler
000099c8 g     F .text	00000074 _mprec_log10
00009ab4 g     F .text	0000008c __any_on
0000be58 g     F .text	00000054 _isatty_r
00012368 g     O .rodata	00000028 __mprec_tinytens
0000f8c4 g     F .text	0000007c alt_main
000034d0 g     F .text	000000c0 _puts_r
00015c44 g     O .bss	00000100 alt_irq
0000beac g     F .text	00000060 _lseek_r
000122c8 g     O .rodata	00000009 gy_array
000140c0 g       *ABS*	00000000 __flash_rwdata_start
0000def0 g     F .text	00000088 .hidden __eqdf2
00015d44 g       *ABS*	00000000 __alt_heap_start
00003494 g     F .text	0000003c printf
0000c0c4 g     F .text	0000009c _wcrtomb_r
0000a1f0 g     F .text	0000005c __sseek
00007934 g     F .text	00000010 __sinit
0000bf6c g     F .text	00000140 __swbuf_r
000083fc g     F .text	0000007c _setlocale_r
0000779c g     F .text	00000068 __sfmoreglue
0000f964 g     F .text	00000024 __malloc_unlock
00000ea4 g     F .text	00000044 LCD_Write_Command
00015bc4 g     O .bss	00000004 sobel_width
00015c08 g     O .bss	00000004 altera_avalon_timer_ts_freq
000088c0 g     F .text	0000015c memmove
00000ee8 g     F .text	00000044 LCD_Write_Data
0000791c g     F .text	00000018 _cleanup
00008b44 g     F .text	000000a8 _Balloc
0000df78 g     F .text	000000dc .hidden __gtdf2
000116e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000764 g     F .text	0000004c cam_get_xsize
0000bdfc g     F .text	0000005c _fstat_r
00015be8 g     O .bss	00000004 errno
0000a16c g     F .text	00000008 __seofread
00015bfc g     O .bss	00000004 alt_argv
0001c078 g       *ABS*	00000000 _gp
0000fbd4 g     F .text	00000030 usleep
000008a4 g     F .text	000000a8 cam_set_image_pointer
00012e98 g     O .rwdata	00000180 alt_fd_list
00002a10 g     F .text	00000034 vga_set_pointer
00011708 g     F .text	00000090 alt_find_dev
00008778 g     F .text	00000148 memcpy
000075ec g     F .text	0000000c _cleanup_r
0000f1dc g     F .text	000000dc .hidden __floatsidf
00011270 g     F .text	0000007c alt_io_redirect
0000e054 g     F .text	000000f4 .hidden __ltdf2
00011e04 g       *ABS*	00000000 __DTOR_END__
00003590 g     F .text	00000014 puts
000119d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000a0a4 g     F .text	00000074 __fpclassifyd
00009924 g     F .text	000000a4 __ratio
0000b8a0 g     F .text	0000001c __vfiprintf_internal
00010448 g     F .text	0000021c altera_avalon_jtag_uart_read
00002c30 g     F .text	00000014 malloc
00003464 g     F .text	00000030 _printf_r
00000c70 g     F .text	00000020 get_grayscale_picture
00002b74 g     F .text	00000064 .hidden __udivsi3
00000280 g     F .text	000004e4 init_camera
0001205c g     O .rodata	00000128 lens_roll_off_tbl
0000f624 g     F .text	000000a4 isatty
000123b8 g     O .rodata	000000c8 __mprec_tens
00008478 g     F .text	0000000c __locale_charset
00011944 g     F .text	00000090 alt_icache_flush
00015be4 g     O .bss	00000004 __malloc_top_pad
00014090 g     O .rwdata	00000004 __mb_cur_max
000084a8 g     F .text	0000000c _localeconv_r
000024b4 g     F .text	000000c8 sobel_x
00008f50 g     F .text	0000003c __i2b
00007db8 g     F .text	000004bc __sfvwrite_r
00000f2c g     F .text	00000240 init_LCD
000035a4 g     F .text	00000054 _sbrk_r
0001407c g     O .rwdata	00000004 pgy_array
000007fc g     F .text	000000a8 cam_get_profiling
0000bf0c g     F .text	00000060 _read_r
00015bc8 g     O .bss	00000004 sobel_result
000140a8 g     O .rwdata	00000004 alt_max_fd
0000baf0 g     F .text	000000f0 _fclose_r
000075b4 g     F .text	00000030 fflush
00015be0 g     O .bss	00000004 __malloc_max_sbrked_mem
00015bbc g     O .bss	00000004 grayscale_array
0000cd5c g     F .text	000008ac .hidden __adddf3
000007b0 g     F .text	0000004c cam_get_ysize
000096cc g     F .text	0000010c __b2d
0000c824 g     F .text	00000538 .hidden __umoddi3
0000f7f0 g     F .text	000000d4 lseek
00000d80 g     F .text	000000a0 i2c_short_read
00014088 g     O .rwdata	00000004 _global_impure_ptr
00009b40 g     F .text	00000564 _realloc_r
00015d44 g       *ABS*	00000000 __bss_end
000110bc g     F .text	000000f0 alt_iic_isr_register
000115dc g     F .text	00000108 alt_tick
0000c2ac g     F .text	00000578 .hidden __udivdi3
0000bd58 g     F .text	00000024 _fputwc_r
00012390 g     O .rodata	00000028 __mprec_bigtens
00008d34 g     F .text	00000104 __s2b
0000f2b8 g     F .text	000000a8 .hidden __floatunsidf
0000940c g     F .text	00000060 __mcmp
00007954 g     F .text	00000018 __fp_lock_all
00011070 g     F .text	0000004c alt_ic_irq_enabled
00015bb8 g     O .bss	00000004 grayscape_height
00011540 g     F .text	0000009c alt_alarm_stop
00015c0c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00012e70 g     O .rwdata	00000028 alt_dev_null
00001210 g     F .text	000000c8 transfer_LCD_with_dma
00010d18 g     F .text	00000020 alt_dcache_flush_all
00008e38 g     F .text	00000068 __hi0bits
0000f15c g     F .text	00000080 .hidden __fixdfsi
000140c0 g       *ABS*	00000000 __ram_rwdata_end
000140a0 g     O .rwdata	00000008 alt_dev_list
0000fc40 g     F .text	000000f8 write
00010a74 g     F .text	00000020 alt_timestamp_freq
000125cc g       *ABS*	00000000 __ram_rodata_end
0000f538 g     F .text	000000b0 fstat
0000e054 g     F .text	000000f4 .hidden __ledf2
00009184 g     F .text	00000140 __pow5mult
0000a444 g     F .text	0000145c ___vfiprintf_internal_r
00015bf4 g     O .bss	00000004 __nlocale_changed
00002bd8 g     F .text	00000058 .hidden __umodsi3
000029d0 g     F .text	00000020 GetSobel_rgb
00015d44 g       *ABS*	00000000 end
000029f0 g     F .text	00000020 GetSobelResult
000009ac g     F .text	00000050 take_picture_blocking
00000a84 g     F .text	00000030 DIPSW_get_value
00002780 g     F .text	0000013c sobel_y_with_rgb
0000ff84 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00000984 g     F .text	00000028 current_image_pointer
00011e04 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00010900 g     F .text	0000007c alt_avalon_timer_sc_init
0000f360 g     F .text	00000064 .hidden __clzsi2
00010664 g     F .text	00000224 altera_avalon_jtag_uart_write
00007944 g     F .text	00000004 __sfp_lock_acquire
00008694 g     F .text	000000e4 memchr
00003690 g     F .text	000021f8 ___vfprintf_internal_r
00007aa8 g     F .text	00000310 _free_r
00008484 g     F .text	00000010 __locale_mb_cur_max
000026b8 g     F .text	000000c8 sobel_y
00011f1c g     O .rodata	00000140 noise_reduction_reg_settings_array
00011c50 g     F .text	00000180 __call_exitprocs
00015bf0 g     O .bss	00000004 __mlocale_changed
00014080 g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000003c _start
00015c10 g     O .bss	00000004 _alt_tick_rate
000092c4 g     F .text	00000148 __lshift
00015c14 g     O .bss	00000004 _alt_nticks
0000f9c4 g     F .text	000000fc read
0000fda4 g     F .text	0000007c alt_sys_init
0000257c g     F .text	0000013c sobel_x_with_rgb
00011b38 g     F .text	00000118 __register_exitproc
00008f8c g     F .text	000001f8 __multiply
000102f0 g     F .text	00000068 altera_avalon_jtag_uart_close
000125cc g       *ABS*	00000000 __ram_rwdata_start
00011e04 g       *ABS*	00000000 __ram_rodata_start
00015c1c g     O .bss	00000028 __malloc_current_mallinfo
000097d8 g     F .text	0000014c __d2b
00015bcc g     O .bss	00000004 sobel_height
000009fc g     F .text	00000030 enable_continues_mode
0000fe20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00001ffc g     F .text	00000170 init_sobel_arrays
000118a0 g     F .text	000000a4 alt_get_fd
00010bc0 g     F .text	00000158 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000b9d8 g     F .text	00000054 _close_r
00011abc g     F .text	0000007c memcmp
0000fee0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015d44 g       *ABS*	00000000 __alt_stack_base
0000ff30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00005960 g     F .text	00000154 __swsetup_r
0000d608 g     F .text	000008e8 .hidden __divdf3
00007804 g     F .text	00000118 __sfp
00009a3c g     F .text	00000078 __copybits
000125cc g     O .rwdata	00000408 __malloc_av_
00007950 g     F .text	00000004 __sinit_lock_release
0000e148 g     F .text	00000718 .hidden __muldf3
0000a118 g     F .text	00000054 __sread
00011798 g     F .text	00000108 alt_find_file
00010d74 g     F .text	000000a4 alt_dev_llist_insert
0000f940 g     F .text	00000024 __malloc_lock
0000fb24 g     F .text	000000b0 sbrk
00007558 g     F .text	0000005c _fflush_r
0000ba2c g     F .text	000000c4 _calloc_r
00015bb4 g       *ABS*	00000000 __bss_start
00008a1c g     F .text	00000128 memset
000012d8 g     F .text	00000d24 main
00015c00 g     O .bss	00000004 alt_envp
00015bdc g     O .bss	00000004 __malloc_max_total_mem
00000c30 g     F .text	00000020 get_grayscale_width
0000fe80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000c0ac g     F .text	00000018 __swbuf
00015bd0 g     O .bss	00000004 sobel_x_result
0000a24c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000bbe0 g     F .text	00000014 fclose
0001097c g     F .text	00000078 alt_timestamp_start
00005cb4 g     F .text	00001688 _dtoa_r
00002c58 g     F .text	0000080c _malloc_r
0000c220 g     F .text	00000030 __ascii_wctomb
000140ac g     O .rwdata	00000004 alt_errno
00008274 g     F .text	000000c4 _fwalk
00002a7c g     F .text	00000084 .hidden __divsi3
00007984 g     F .text	00000124 _malloc_trim_r
00011e04 g       *ABS*	00000000 __CTOR_END__
00015bb4 g     O .bss	00000004 grayscale_width
0000a254 g     F .text	000000dc strcmp
0000116c g     F .text	000000a4 transfer_LCD_no_dma
00011e04 g       *ABS*	00000000 __flash_rodata_start
00011e04 g       *ABS*	00000000 __DTOR_LIST__
0000def0 g     F .text	00000088 .hidden __nedf2
00011e04 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000fd6c g     F .text	00000038 alt_irq_init
0000fac0 g     F .text	00000064 alt_release_fd
00000ccc g     F .text	000000b4 i2c_auto_detect
000124a0 g     O .rodata	00000100 .hidden __clz_tab
0000094c g     F .text	00000038 current_image_valid
00015bec g     O .bss	00000004 _PathLocale
00000c90 g     F .text	0000003c i2c_busy_wait
00011a70 g     F .text	00000014 atexit
0000b978 g     F .text	00000060 _write_r
000084b4 g     F .text	00000018 setlocale
0001408c g     O .rwdata	00000004 _impure_ptr
00015bf8 g     O .bss	00000004 alt_argc
0000733c g     F .text	0000021c __sflush_r
00015c04 g     O .bss	00000004 altera_avalon_timer_ts_base
00010e78 g     F .text	00000060 _do_dtors
000084a0 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009668 g     F .text	00000064 __ulp
0000796c g     F .text	00000018 __fp_unlock_all
00014098 g     O .rwdata	00000008 alt_fs_list
00015bd4 g     O .bss	00000004 sobel_y_result
00000e20 g     F .text	00000084 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00015bc0 g     O .bss	00000002 LCD_height
000084cc g     F .text	0000000c localeconv
000109f4 g     F .text	00000080 alt_timestamp
00002a44 g     F .text	00000038 vga_set_swap
00010f0c g     F .text	00000050 alt_ic_isr_register
000028bc g     F .text	00000114 sobel_threshold
000140c0 g       *ABS*	00000000 _edata
00014078 g     O .rwdata	00000004 pgx_array
00015d44 g       *ABS*	00000000 _end
0000bbf4 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00010358 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000122bf g     O .rodata	00000009 gx_array
00010fe4 g     F .text	0000008c alt_ic_irq_disable
0000a174 g     F .text	0000007c __swrite
00014084 g     O .rwdata	00000004 __malloc_trim_threshold
00015bc2 g     O .bss	00000002 LCD_width
00000ab4 g     F .text	0000017c conv_grayscale
00008494 g     F .text	0000000c __locale_msgcharset
00011a84 g     F .text	00000038 exit
00008338 g     F .text	000000c4 _fwalk_reent
0000946c g     F .text	000001fc __mdiff
00002b00 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00007948 g     F .text	00000004 __sfp_lock_release
00000c50 g     F .text	00000020 get_grayscale_height
00011dd0 g     F .text	00000034 _exit
0000216c g     F .text	00000348 sobel_mac
00010a94 g     F .text	0000012c alt_alarm_start
000084d8 g     F .text	000001bc __smakebuf_r
00015bd8 g     O .bss	00000004 sobel_rgb565
000035f8 g     F .text	00000098 strlen
000113ec g     F .text	00000154 open
0000df78 g     F .text	000000dc .hidden __gedf2
00014094 g     O .rwdata	00000004 __wctomb
0000a42c g     F .text	00000018 __sprint_r
00010ed8 g     F .text	00000034 alt_icache_flush_all
000140b4 g     O .rwdata	00000004 alt_priority_mask
00010f5c g     F .text	00000088 alt_ic_irq_enable
00005888 g     F .text	0000001c __vfprintf_internal
0000c250 g     F .text	0000005c _wctomb_r
0000e860 g     F .text	000008fc .hidden __subdf3
00008ea0 g     F .text	000000b0 __lo0bits
000140b8 g     O .rwdata	00000008 alt_alarm_list
00010e18 g     F .text	00000060 _do_ctors
0000c160 g     F .text	000000c0 wcrtomb
0000f400 g     F .text	000000d0 close
0000f730 g     F .text	00000084 alt_load
0000bd7c g     F .text	00000080 fputwc
00002c44 g     F .text	00000014 free
0000794c g     F .text	00000004 __sinit_lock_acquire
00008c14 g     F .text	00000120 __multadd
00008bec g     F .text	00000028 _Bfree
00000a2c g     F .text	00000058 new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10971104 	addi	r2,r2,23620
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10971104 	addi	r2,r2,23620
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xff00012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xff000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6e817 	ldw	r2,-25696(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6e817 	ldw	r2,-25696(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6b01e14 	ori	gp,gp,49272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	1096ed14 	ori	r2,r2,23476

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18d75114 	ori	r3,r3,23876

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x30>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__alt_data_end+0xff000268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000f7300 	call	f730 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000f8c40 	call	f8c4 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__alt_data_end+0xff00027c>

00000280 <init_camera>:
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     280:	defffd04 	addi	sp,sp,-12
     284:	dfc00215 	stw	ra,8(sp)
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     290:	00c00084 	movi	r3,2
     294:	00804034 	movhi	r2,256
     298:	10842744 	addi	r2,r2,4253
     29c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     2a0:	00c00044 	movi	r3,1
     2a4:	00804034 	movhi	r2,256
     2a8:	10841304 	addi	r2,r2,4172
     2ac:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2b0:	e03fff15 	stw	zero,-4(fp)
     2b4:	00000406 	br	2c8 <init_camera+0x48>
		asm volatile ("nop");
     2b8:	0001883a 	nop

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     2bc:	e0bfff17 	ldw	r2,-4(fp)
     2c0:	10800044 	addi	r2,r2,1
     2c4:	e0bfff15 	stw	r2,-4(fp)
     2c8:	e0ffff17 	ldw	r3,-4(fp)
     2cc:	008003f4 	movhi	r2,15
     2d0:	10908fc4 	addi	r2,r2,16959
     2d4:	10fff80e 	bge	r2,r3,2b8 <__alt_data_end+0xff0002b8>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     2d8:	0007883a 	mov	r3,zero
     2dc:	00804034 	movhi	r2,256
     2e0:	10841304 	addi	r2,r2,4172
     2e4:	10c00025 	stbio	r3,0(r2)
	for (i=0; i < 1000000 ; i++)
     2e8:	e03fff15 	stw	zero,-4(fp)
     2ec:	00000406 	br	300 <init_camera+0x80>
		asm volatile ("nop");
     2f0:	0001883a 	nop
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     2f4:	e0bfff17 	ldw	r2,-4(fp)
     2f8:	10800044 	addi	r2,r2,1
     2fc:	e0bfff15 	stw	r2,-4(fp)
     300:	e0ffff17 	ldw	r3,-4(fp)
     304:	008003f4 	movhi	r2,15
     308:	10908fc4 	addi	r2,r2,16959
     30c:	10fff80e 	bge	r2,r3,2f0 <__alt_data_end+0xff0002f0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     310:	01800044 	movi	r6,1
     314:	014ce184 	movi	r5,13190
     318:	01001e04 	movi	r4,120
     31c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     320:	000d883a 	mov	r6,zero
     324:	014ce184 	movi	r5,13190
     328:	01001e04 	movi	r4,120
     32c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     330:	e03fff15 	stw	zero,-4(fp)
     334:	00000406 	br	348 <init_camera+0xc8>
		asm volatile ("nop");
     338:	0001883a 	nop
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     33c:	e0bfff17 	ldw	r2,-4(fp)
     340:	10800044 	addi	r2,r2,1
     344:	e0bfff15 	stw	r2,-4(fp)
     348:	e0ffff17 	ldw	r3,-4(fp)
     34c:	008003f4 	movhi	r2,15
     350:	10908fc4 	addi	r2,r2,16959
     354:	10fff80e 	bge	r2,r3,338 <__alt_data_end+0xff000338>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     358:	01803104 	movi	r6,196
     35c:	014c0684 	movi	r5,12314
     360:	01001e04 	movi	r4,120
     364:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     368:	01800204 	movi	r6,8
     36c:	014c8084 	movi	r5,12802
     370:	01001e04 	movi	r4,120
     374:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     378:	0180c744 	movi	r6,797
     37c:	014cfd04 	movi	r5,13300
     380:	01001e04 	movi	r4,120
     384:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     388:	e03fff15 	stw	zero,-4(fp)
     38c:	00000406 	br	3a0 <init_camera+0x120>
		asm volatile ("nop");
     390:	0001883a 	nop
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     394:	e0bfff17 	ldw	r2,-4(fp)
     398:	10800044 	addi	r2,r2,1
     39c:	e0bfff15 	stw	r2,-4(fp)
     3a0:	e0ffff17 	ldw	r3,-4(fp)
     3a4:	008000b4 	movhi	r2,2
     3a8:	10a1a7c4 	addi	r2,r2,-31073
     3ac:	10fff80e 	bge	r2,r3,390 <__alt_data_end+0xff000390>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3b0:	01a3c254 	movui	r6,36617
     3b4:	014d0784 	movi	r5,13342
     3b8:	01001e04 	movi	r4,120
     3bc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     3c0:	01805404 	movi	r6,336
     3c4:	014d0704 	movi	r5,13340
     3c8:	01001e04 	movi	r4,120
     3cc:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     3d0:	01a3c254 	movui	r6,36617
     3d4:	014d0784 	movi	r5,13342
     3d8:	01001e04 	movi	r4,120
     3dc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     3e0:	e03fff15 	stw	zero,-4(fp)
     3e4:	00000406 	br	3f8 <init_camera+0x178>
		asm volatile ("nop");
     3e8:	0001883a 	nop
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	10800044 	addi	r2,r2,1
     3f4:	e0bfff15 	stw	r2,-4(fp)
     3f8:	e0ffff17 	ldw	r3,-4(fp)
     3fc:	008000b4 	movhi	r2,2
     400:	10a1a7c4 	addi	r2,r2,-31073
     404:	10fff80e 	bge	r2,r3,3e8 <__alt_data_end+0xff0003e8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     408:	01a3c214 	movui	r6,36616
     40c:	014d0784 	movi	r5,13342
     410:	01001e04 	movi	r4,120
     414:	0000e200 	call	e20 <i2c_short_write>
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     418:	e03fff15 	stw	zero,-4(fp)
     41c:	00001806 	br	480 <init_camera+0x200>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
     420:	00800074 	movhi	r2,1
     424:	10878104 	addi	r2,r2,7684
     428:	e0ffff17 	ldw	r3,-4(fp)
     42c:	18c7883a 	add	r3,r3,r3
     430:	18c7883a 	add	r3,r3,r3
     434:	10c5883a 	add	r2,r2,r3
     438:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     43c:	113fffcc 	andi	r4,r2,65535
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
     440:	00800074 	movhi	r2,1
     444:	10878104 	addi	r2,r2,7684
     448:	e0ffff17 	ldw	r3,-4(fp)
     44c:	18c7883a 	add	r3,r3,r3
     450:	18c7883a 	add	r3,r3,r3
     454:	10c5883a 	add	r2,r2,r3
     458:	10800084 	addi	r2,r2,2
     45c:	1080000b 	ldhu	r2,0(r2)
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     460:	10bfffcc 	andi	r2,r2,65535
     464:	100d883a 	mov	r6,r2
     468:	200b883a 	mov	r5,r4
     46c:	01001e04 	movi	r4,120
     470:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     474:	e0bfff17 	ldw	r2,-4(fp)
     478:	10800044 	addi	r2,r2,1
     47c:	e0bfff15 	stw	r2,-4(fp)
     480:	e0bfff17 	ldw	r2,-4(fp)
     484:	108011b0 	cmpltui	r2,r2,70
     488:	103fe51e 	bne	r2,zero,420 <__alt_data_end+0xff000420>
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     48c:	e03fff15 	stw	zero,-4(fp)
     490:	00001806 	br	4f4 <init_camera+0x274>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
     494:	00800074 	movhi	r2,1
     498:	1087c704 	addi	r2,r2,7964
     49c:	e0ffff17 	ldw	r3,-4(fp)
     4a0:	18c7883a 	add	r3,r3,r3
     4a4:	18c7883a 	add	r3,r3,r3
     4a8:	10c5883a 	add	r2,r2,r3
     4ac:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4b0:	113fffcc 	andi	r4,r2,65535
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
     4b4:	00800074 	movhi	r2,1
     4b8:	1087c704 	addi	r2,r2,7964
     4bc:	e0ffff17 	ldw	r3,-4(fp)
     4c0:	18c7883a 	add	r3,r3,r3
     4c4:	18c7883a 	add	r3,r3,r3
     4c8:	10c5883a 	add	r2,r2,r3
     4cc:	10800084 	addi	r2,r2,2
     4d0:	1080000b 	ldhu	r2,0(r2)
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     4d4:	10bfffcc 	andi	r2,r2,65535
     4d8:	100d883a 	mov	r6,r2
     4dc:	200b883a 	mov	r5,r4
     4e0:	01001e04 	movi	r4,120
     4e4:	0000e200 	call	e20 <i2c_short_write>
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10800044 	addi	r2,r2,1
     4f0:	e0bfff15 	stw	r2,-4(fp)
     4f4:	e0bfff17 	ldw	r2,-4(fp)
     4f8:	10801430 	cmpltui	r2,r2,80
     4fc:	103fe51e 	bne	r2,zero,494 <__alt_data_end+0xff000494>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     500:	018164c4 	movi	r6,1427
     504:	014d6904 	movi	r5,13732
     508:	01001e04 	movi	r4,120
     50c:	0000e200 	call	e20 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     510:	0189e644 	movi	r6,10137
     514:	014ce304 	movi	r5,13196
     518:	01001e04 	movi	r4,120
     51c:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     520:	01991004 	movi	r6,25664
     524:	014ce404 	movi	r5,13200
     528:	01001e04 	movi	r4,120
     52c:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     530:	e03fff15 	stw	zero,-4(fp)
     534:	00000406 	br	548 <init_camera+0x2c8>
		asm volatile ("nop");
     538:	0001883a 	nop
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     53c:	e0bfff17 	ldw	r2,-4(fp)
     540:	10800044 	addi	r2,r2,1
     544:	e0bfff15 	stw	r2,-4(fp)
     548:	e0ffff17 	ldw	r3,-4(fp)
     54c:	008000b4 	movhi	r2,2
     550:	10a1a7c4 	addi	r2,r2,-31073
     554:	10fff80e 	bge	r2,r3,538 <__alt_data_end+0xff000538>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     558:	0189e6c4 	movi	r6,10139
     55c:	014ce304 	movi	r5,13196
     560:	01001e04 	movi	r4,120
     564:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     568:	01991004 	movi	r6,25664
     56c:	014ce404 	movi	r5,13200
     570:	01001e04 	movi	r4,120
     574:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     578:	e03fff15 	stw	zero,-4(fp)
     57c:	00000406 	br	590 <init_camera+0x310>
		asm volatile ("nop");
     580:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     584:	e0bfff17 	ldw	r2,-4(fp)
     588:	10800044 	addi	r2,r2,1
     58c:	e0bfff15 	stw	r2,-4(fp)
     590:	e0ffff17 	ldw	r3,-4(fp)
     594:	008000b4 	movhi	r2,2
     598:	10a1a7c4 	addi	r2,r2,-31073
     59c:	10fff80e 	bge	r2,r3,580 <__alt_data_end+0xff000580>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5a0:	01a840d4 	movui	r6,41219
     5a4:	014ce304 	movi	r5,13196
     5a8:	01001e04 	movi	r4,120
     5ac:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     5b0:	01800144 	movi	r6,5
     5b4:	014ce404 	movi	r5,13200
     5b8:	01001e04 	movi	r4,120
     5bc:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     5c0:	e03fff15 	stw	zero,-4(fp)
     5c4:	00000406 	br	5d8 <init_camera+0x358>
		asm volatile ("nop");
     5c8:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     5cc:	e0bfff17 	ldw	r2,-4(fp)
     5d0:	10800044 	addi	r2,r2,1
     5d4:	e0bfff15 	stw	r2,-4(fp)
     5d8:	e0ffff17 	ldw	r3,-4(fp)
     5dc:	008000b4 	movhi	r2,2
     5e0:	10a1a7c4 	addi	r2,r2,-31073
     5e4:	10fff80e 	bge	r2,r3,5c8 <__alt_data_end+0xff0005c8>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     5e8:	01a840d4 	movui	r6,41219
     5ec:	014ce304 	movi	r5,13196
     5f0:	01001e04 	movi	r4,120
     5f4:	0000e200 	call	e20 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     5f8:	01800184 	movi	r6,6
     5fc:	014ce404 	movi	r5,13200
     600:	01001e04 	movi	r4,120
     604:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 100000 ; i++)
     608:	e03fff15 	stw	zero,-4(fp)
     60c:	00000406 	br	620 <init_camera+0x3a0>
		asm volatile ("nop");
     610:	0001883a 	nop
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     614:	e0bfff17 	ldw	r2,-4(fp)
     618:	10800044 	addi	r2,r2,1
     61c:	e0bfff15 	stw	r2,-4(fp)
     620:	e0ffff17 	ldw	r3,-4(fp)
     624:	008000b4 	movhi	r2,2
     628:	10a1a7c4 	addi	r2,r2,-31073
     62c:	10fff80e 	bge	r2,r3,610 <__alt_data_end+0xff000610>
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     630:	e03fff15 	stw	zero,-4(fp)
     634:	00001806 	br	698 <init_camera+0x418>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
     638:	00800074 	movhi	r2,1
     63c:	10881704 	addi	r2,r2,8284
     640:	e0ffff17 	ldw	r3,-4(fp)
     644:	18c7883a 	add	r3,r3,r3
     648:	18c7883a 	add	r3,r3,r3
     64c:	10c5883a 	add	r2,r2,r3
     650:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     654:	113fffcc 	andi	r4,r2,65535
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
     658:	00800074 	movhi	r2,1
     65c:	10881704 	addi	r2,r2,8284
     660:	e0ffff17 	ldw	r3,-4(fp)
     664:	18c7883a 	add	r3,r3,r3
     668:	18c7883a 	add	r3,r3,r3
     66c:	10c5883a 	add	r2,r2,r3
     670:	10800084 	addi	r2,r2,2
     674:	1080000b 	ldhu	r2,0(r2)
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     678:	10bfffcc 	andi	r2,r2,65535
     67c:	100d883a 	mov	r6,r2
     680:	200b883a 	mov	r5,r4
     684:	01001e04 	movi	r4,120
     688:	0000e200 	call	e20 <i2c_short_write>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     68c:	e0bfff17 	ldw	r2,-4(fp)
     690:	10800044 	addi	r2,r2,1
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	e0bfff17 	ldw	r2,-4(fp)
     69c:	108012b0 	cmpltui	r2,r2,74
     6a0:	103fe51e 	bne	r2,zero,638 <__alt_data_end+0xff000638>
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6a4:	e03fff15 	stw	zero,-4(fp)
     6a8:	00000406 	br	6bc <init_camera+0x43c>
		asm volatile ("nop");
     6ac:	0001883a 	nop
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     6b0:	e0bfff17 	ldw	r2,-4(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bfff15 	stw	r2,-4(fp)
     6bc:	e0ffff17 	ldw	r3,-4(fp)
     6c0:	008003f4 	movhi	r2,15
     6c4:	10908fc4 	addi	r2,r2,16959
     6c8:	10fff80e 	bge	r2,r3,6ac <__alt_data_end+0xff0006ac>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     6cc:	01800804 	movi	r6,32
     6d0:	014ccb84 	movi	r5,13102
     6d4:	01001e04 	movi	r4,120
     6d8:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     6dc:	e03fff15 	stw	zero,-4(fp)
     6e0:	00000406 	br	6f4 <init_camera+0x474>
		asm volatile ("nop");
     6e4:	0001883a 	nop
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10800044 	addi	r2,r2,1
     6f0:	e0bfff15 	stw	r2,-4(fp)
     6f4:	e0ffff17 	ldw	r3,-4(fp)
     6f8:	008003f4 	movhi	r2,15
     6fc:	10908fc4 	addi	r2,r2,16959
     700:	10fff80e 	bge	r2,r3,6e4 <__alt_data_end+0xff0006e4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     704:	01800884 	movi	r6,34
     708:	014d0104 	movi	r5,13316
     70c:	01001e04 	movi	r4,120
     710:	0000e200 	call	e20 <i2c_short_write>
	for (i=0; i < 1000000 ; i++)
     714:	e03fff15 	stw	zero,-4(fp)
     718:	00000406 	br	72c <init_camera+0x4ac>
		asm volatile ("nop");
     71c:	0001883a 	nop
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	10800044 	addi	r2,r2,1
     728:	e0bfff15 	stw	r2,-4(fp)
     72c:	e0ffff17 	ldw	r3,-4(fp)
     730:	008003f4 	movhi	r2,15
     734:	10908fc4 	addi	r2,r2,16959
     738:	10fff80e 	bge	r2,r3,71c <__alt_data_end+0xff00071c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     73c:	018009c4 	movi	r6,39
     740:	014c1004 	movi	r5,12352
     744:	01001e04 	movi	r4,120
     748:	0000e200 	call	e20 <i2c_short_write>
}
     74c:	0001883a 	nop
     750:	e037883a 	mov	sp,fp
     754:	dfc00117 	ldw	ra,4(sp)
     758:	df000017 	ldw	fp,0(sp)
     75c:	dec00204 	addi	sp,sp,8
     760:	f800283a 	ret

00000764 <cam_get_xsize>:

unsigned short cam_get_xsize(){
     764:	defffe04 	addi	sp,sp,-8
     768:	df000115 	stw	fp,4(sp)
     76c:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     770:	00804034 	movhi	r2,256
     774:	10841304 	addi	r2,r2,4172
     778:	10800023 	ldbuio	r2,0(r2)
     77c:	10803fcc 	andi	r2,r2,255
     780:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     784:	e0bfff03 	ldbu	r2,-4(fp)
     788:	1080010c 	andi	r2,r2,4
     78c:	103ff826 	beq	r2,zero,770 <__alt_data_end+0xff000770>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     790:	00804034 	movhi	r2,256
     794:	10841004 	addi	r2,r2,4160
     798:	1080002b 	ldhuio	r2,0(r2)
     79c:	10bfffcc 	andi	r2,r2,65535
}
     7a0:	e037883a 	mov	sp,fp
     7a4:	df000017 	ldw	fp,0(sp)
     7a8:	dec00104 	addi	sp,sp,4
     7ac:	f800283a 	ret

000007b0 <cam_get_ysize>:

unsigned short cam_get_ysize() {
     7b0:	defffe04 	addi	sp,sp,-8
     7b4:	df000115 	stw	fp,4(sp)
     7b8:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     7bc:	00804034 	movhi	r2,256
     7c0:	10841304 	addi	r2,r2,4172
     7c4:	10800023 	ldbuio	r2,0(r2)
     7c8:	10803fcc 	andi	r2,r2,255
     7cc:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     7d0:	e0bfff03 	ldbu	r2,-4(fp)
     7d4:	1080010c 	andi	r2,r2,4
     7d8:	103ff826 	beq	r2,zero,7bc <__alt_data_end+0xff0007bc>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     7dc:	00804034 	movhi	r2,256
     7e0:	10841104 	addi	r2,r2,4164
     7e4:	1080002b 	ldhuio	r2,0(r2)
     7e8:	10bfffcc 	andi	r2,r2,65535
}
     7ec:	e037883a 	mov	sp,fp
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00104 	addi	sp,sp,4
     7f8:	f800283a 	ret

000007fc <cam_get_profiling>:

void cam_get_profiling() {
     7fc:	defffd04 	addi	sp,sp,-12
     800:	dfc00215 	stw	ra,8(sp)
     804:	df000115 	stw	fp,4(sp)
     808:	df000104 	addi	fp,sp,4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     80c:	00804034 	movhi	r2,256
     810:	10841304 	addi	r2,r2,4172
     814:	10800023 	ldbuio	r2,0(r2)
     818:	10803fcc 	andi	r2,r2,255
     81c:	e0bfff05 	stb	r2,-4(fp)
	} while ((control_reg&CAM_Profile_valid)==0);
     820:	e0bfff03 	ldbu	r2,-4(fp)
     824:	1080010c 	andi	r2,r2,4
     828:	103ff826 	beq	r2,zero,80c <__alt_data_end+0xff00080c>
	printf("Nr. of bytes each line    : %d\n",
     82c:	00804034 	movhi	r2,256
     830:	10841004 	addi	r2,r2,4160
     834:	1080002b 	ldhuio	r2,0(r2)
     838:	10bfffcc 	andi	r2,r2,65535
     83c:	100b883a 	mov	r5,r2
     840:	01000074 	movhi	r4,1
     844:	21086104 	addi	r4,r4,8580
     848:	00034940 	call	3494 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     84c:	00804034 	movhi	r2,256
     850:	10841104 	addi	r2,r2,4164
     854:	1080002b 	ldhuio	r2,0(r2)
     858:	10bfffcc 	andi	r2,r2,65535
     85c:	100b883a 	mov	r5,r2
     860:	01000074 	movhi	r4,1
     864:	21086904 	addi	r4,r4,8612
     868:	00034940 	call	3494 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     86c:	00804034 	movhi	r2,256
     870:	10841204 	addi	r2,r2,4168
     874:	1080002b 	ldhuio	r2,0(r2)
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	100b883a 	mov	r5,r2
     880:	01000074 	movhi	r4,1
     884:	21087104 	addi	r4,r4,8644
     888:	00034940 	call	3494 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     88c:	0001883a 	nop
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <cam_set_image_pointer>:

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
     8a4:	defffd04 	addi	sp,sp,-12
     8a8:	df000215 	stw	fp,8(sp)
     8ac:	df000204 	addi	fp,sp,8
     8b0:	2005883a 	mov	r2,r4
     8b4:	e17fff15 	stw	r5,-4(fp)
     8b8:	e0bffe05 	stb	r2,-8(fp)
	switch (pointer_id) {
     8bc:	e0bffe07 	ldb	r2,-8(fp)
     8c0:	10c00060 	cmpeqi	r3,r2,1
     8c4:	18000e1e 	bne	r3,zero,900 <cam_set_image_pointer+0x5c>
     8c8:	10c00088 	cmpgei	r3,r2,2
     8cc:	1800021e 	bne	r3,zero,8d8 <cam_set_image_pointer+0x34>
     8d0:	10000626 	beq	r2,zero,8ec <cam_set_image_pointer+0x48>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8d4:	00001906 	br	93c <cam_set_image_pointer+0x98>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     8d8:	10c000a0 	cmpeqi	r3,r2,2
     8dc:	18000d1e 	bne	r3,zero,914 <cam_set_image_pointer+0x70>
     8e0:	108000e0 	cmpeqi	r2,r2,3
     8e4:	1000101e 	bne	r2,zero,928 <cam_set_image_pointer+0x84>
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
                break;
	   default: return;
     8e8:	00001406 	br	93c <cam_set_image_pointer+0x98>
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     8ec:	e0ffff17 	ldw	r3,-4(fp)
     8f0:	00804034 	movhi	r2,256
     8f4:	10841404 	addi	r2,r2,4176
     8f8:	10c00035 	stwio	r3,0(r2)
	            break;
     8fc:	00000f06 	br	93c <cam_set_image_pointer+0x98>
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     900:	e0ffff17 	ldw	r3,-4(fp)
     904:	00804034 	movhi	r2,256
     908:	10841504 	addi	r2,r2,4180
     90c:	10c00035 	stwio	r3,0(r2)
                break;
     910:	00000a06 	br	93c <cam_set_image_pointer+0x98>
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     914:	e0ffff17 	ldw	r3,-4(fp)
     918:	00804034 	movhi	r2,256
     91c:	10841604 	addi	r2,r2,4184
     920:	10c00035 	stwio	r3,0(r2)
                break;
     924:	00000506 	br	93c <cam_set_image_pointer+0x98>
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     928:	e0ffff17 	ldw	r3,-4(fp)
     92c:	00804034 	movhi	r2,256
     930:	10841704 	addi	r2,r2,4188
     934:	10c00035 	stwio	r3,0(r2)
                break;
     938:	0001883a 	nop
	   default: return;
	}
}
     93c:	e037883a 	mov	sp,fp
     940:	df000017 	ldw	fp,0(sp)
     944:	dec00104 	addi	sp,sp,4
     948:	f800283a 	ret

0000094c <current_image_valid>:

short current_image_valid() {
     94c:	defffe04 	addi	sp,sp,-8
     950:	df000115 	stw	fp,4(sp)
     954:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     958:	00804034 	movhi	r2,256
     95c:	10841304 	addi	r2,r2,4172
     960:	1080002b 	ldhuio	r2,0(r2)
     964:	10bfffcc 	andi	r2,r2,65535
     968:	e0bfff0d 	sth	r2,-4(fp)
	return (value&CAM_Current_Image_Valid);
     96c:	e0bfff0b 	ldhu	r2,-4(fp)
     970:	1080800c 	andi	r2,r2,512
}
     974:	e037883a 	mov	sp,fp
     978:	df000017 	ldw	fp,0(sp)
     97c:	dec00104 	addi	sp,sp,4
     980:	f800283a 	ret

00000984 <current_image_pointer>:

void *current_image_pointer() {
     984:	deffff04 	addi	sp,sp,-4
     988:	df000015 	stw	fp,0(sp)
     98c:	d839883a 	mov	fp,sp
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     990:	00804034 	movhi	r2,256
     994:	10841404 	addi	r2,r2,4176
     998:	10800037 	ldwio	r2,0(r2)
}
     99c:	e037883a 	mov	sp,fp
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00104 	addi	sp,sp,4
     9a8:	f800283a 	ret

000009ac <take_picture_blocking>:

void take_picture_blocking() {
     9ac:	defffe04 	addi	sp,sp,-8
     9b0:	df000115 	stw	fp,4(sp)
     9b4:	df000104 	addi	fp,sp,4
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     9b8:	00c00204 	movi	r3,8
     9bc:	00804034 	movhi	r2,256
     9c0:	10841304 	addi	r2,r2,4172
     9c4:	10c0002d 	sthio	r3,0(r2)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     9c8:	00804034 	movhi	r2,256
     9cc:	10841304 	addi	r2,r2,4172
     9d0:	1080002b 	ldhuio	r2,0(r2)
     9d4:	10bfffcc 	andi	r2,r2,65535
     9d8:	e0bfff0d 	sth	r2,-4(fp)
	} while ((value&CAM_Busy)!= 0);
     9dc:	e0bfff0b 	ldhu	r2,-4(fp)
     9e0:	1080020c 	andi	r2,r2,8
     9e4:	103ff81e 	bne	r2,zero,9c8 <__alt_data_end+0xff0009c8>
}
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00104 	addi	sp,sp,4
     9f8:	f800283a 	ret

000009fc <enable_continues_mode>:

void enable_continues_mode() {
     9fc:	deffff04 	addi	sp,sp,-4
     a00:	df000015 	stw	fp,0(sp)
     a04:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     a08:	00c00404 	movi	r3,16
     a0c:	00804034 	movhi	r2,256
     a10:	10841304 	addi	r2,r2,4172
     a14:	10c0002d 	sthio	r3,0(r2)
}
     a18:	0001883a 	nop
     a1c:	e037883a 	mov	sp,fp
     a20:	df000017 	ldw	fp,0(sp)
     a24:	dec00104 	addi	sp,sp,4
     a28:	f800283a 	ret

00000a2c <new_image_available>:

char new_image_available() {
     a2c:	defffe04 	addi	sp,sp,-8
     a30:	df000115 	stw	fp,4(sp)
     a34:	df000104 	addi	fp,sp,4
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     a38:	00804034 	movhi	r2,256
     a3c:	10841304 	addi	r2,r2,4172
     a40:	1080002b 	ldhuio	r2,0(r2)
     a44:	10bfffcc 	andi	r2,r2,65535
     a48:	e0bfff0d 	sth	r2,-4(fp)
	if ((value&CAM_IRQ_Generated)!=0) {
     a4c:	e0bfff0b 	ldhu	r2,-4(fp)
     a50:	1080200c 	andi	r2,r2,128
     a54:	10000626 	beq	r2,zero,a70 <new_image_available+0x44>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     a58:	00c04004 	movi	r3,256
     a5c:	00804034 	movhi	r2,256
     a60:	10841304 	addi	r2,r2,4172
     a64:	10c0002d 	sthio	r3,0(r2)
		return 1;
     a68:	00800044 	movi	r2,1
     a6c:	00000106 	br	a74 <new_image_available+0x48>
	} else return 0;
     a70:	0005883a 	mov	r2,zero
}
     a74:	e037883a 	mov	sp,fp
     a78:	df000017 	ldw	fp,0(sp)
     a7c:	dec00104 	addi	sp,sp,4
     a80:	f800283a 	ret

00000a84 <DIPSW_get_value>:
 */

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
     a84:	deffff04 	addi	sp,sp,-4
     a88:	df000015 	stw	fp,0(sp)
     a8c:	d839883a 	mov	fp,sp
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     a90:	00804034 	movhi	r2,256
     a94:	10842804 	addi	r2,r2,4256
     a98:	10800023 	ldbuio	r2,0(r2)
     a9c:	10803fcc 	andi	r2,r2,255
     aa0:	0084303a 	nor	r2,zero,r2
}
     aa4:	e037883a 	mov	sp,fp
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00104 	addi	sp,sp,4
     ab0:	f800283a 	ret

00000ab4 <conv_grayscale>:
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
		            int width,
		            int height) {
     ab4:	defff604 	addi	sp,sp,-40
     ab8:	dfc00915 	stw	ra,36(sp)
     abc:	df000815 	stw	fp,32(sp)
     ac0:	df000804 	addi	fp,sp,32
     ac4:	e13ffd15 	stw	r4,-12(fp)
     ac8:	e17ffe15 	stw	r5,-8(fp)
     acc:	e1bfff15 	stw	r6,-4(fp)
	int x,y,gray;
	unsigned short *pixels = (unsigned short *)picture , rgb;
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	e0bffa15 	stw	r2,-24(fp)
	grayscale_width = width;
     ad8:	e0bffe17 	ldw	r2,-8(fp)
     adc:	d0a6cf15 	stw	r2,-25796(gp)
	grayscape_height = height;
     ae0:	e0bfff17 	ldw	r2,-4(fp)
     ae4:	d0a6d015 	stw	r2,-25792(gp)
	if (grayscale_array != NULL)
     ae8:	d0a6d117 	ldw	r2,-25788(gp)
     aec:	10000326 	beq	r2,zero,afc <conv_grayscale+0x48>
		free(grayscale_array);
     af0:	d0a6d117 	ldw	r2,-25788(gp)
     af4:	1009883a 	mov	r4,r2
     af8:	0002c440 	call	2c44 <free>
	grayscale_array = (unsigned char *) malloc(width*height);
     afc:	e0fffe17 	ldw	r3,-8(fp)
     b00:	e0bfff17 	ldw	r2,-4(fp)
     b04:	1885383a 	mul	r2,r3,r2
     b08:	1009883a 	mov	r4,r2
     b0c:	0002c300 	call	2c30 <malloc>
     b10:	d0a6d115 	stw	r2,-25788(gp)
	for (y = 0 ; y < height ; y++) {
     b14:	e03ff915 	stw	zero,-28(fp)
     b18:	00003c06 	br	c0c <conv_grayscale+0x158>
		for (x = 0 ; x < width ; x++) {
     b1c:	e03ff815 	stw	zero,-32(fp)
     b20:	00003406 	br	bf4 <conv_grayscale+0x140>
			rgb = pixels[y*width+x];
     b24:	e0fff917 	ldw	r3,-28(fp)
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	1887383a 	mul	r3,r3,r2
     b30:	e0bff817 	ldw	r2,-32(fp)
     b34:	1885883a 	add	r2,r3,r2
     b38:	1085883a 	add	r2,r2,r2
     b3c:	1007883a 	mov	r3,r2
     b40:	e0bffa17 	ldw	r2,-24(fp)
     b44:	10c5883a 	add	r2,r2,r3
     b48:	1080000b 	ldhu	r2,0(r2)
     b4c:	e0bffb0d 	sth	r2,-20(fp)
			gray = (((rgb>>11)&0x1F)<<3)*21; // red part
     b50:	e0bffb0b 	ldhu	r2,-20(fp)
     b54:	1004d2fa 	srli	r2,r2,11
     b58:	10bfffcc 	andi	r2,r2,65535
     b5c:	100490fa 	slli	r2,r2,3
     b60:	10803fcc 	andi	r2,r2,255
     b64:	10800564 	muli	r2,r2,21
     b68:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>5)&0x3F)<<2)*72; // green part
     b6c:	e0bffb0b 	ldhu	r2,-20(fp)
     b70:	1004d17a 	srli	r2,r2,5
     b74:	10bfffcc 	andi	r2,r2,65535
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	10803fcc 	andi	r2,r2,255
     b84:	10801224 	muli	r2,r2,72
     b88:	e0fffc17 	ldw	r3,-16(fp)
     b8c:	1885883a 	add	r2,r3,r2
     b90:	e0bffc15 	stw	r2,-16(fp)
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
     b94:	e0bffb0b 	ldhu	r2,-20(fp)
     b98:	100490fa 	slli	r2,r2,3
     b9c:	10803fcc 	andi	r2,r2,255
     ba0:	108001e4 	muli	r2,r2,7
     ba4:	e0fffc17 	ldw	r3,-16(fp)
     ba8:	1885883a 	add	r2,r3,r2
     bac:	e0bffc15 	stw	r2,-16(fp)
			gray /= 100;
     bb0:	e0bffc17 	ldw	r2,-16(fp)
     bb4:	01401904 	movi	r5,100
     bb8:	1009883a 	mov	r4,r2
     bbc:	0002a7c0 	call	2a7c <__divsi3>
     bc0:	e0bffc15 	stw	r2,-16(fp)
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
     bc4:	d0a6d117 	ldw	r2,-25788(gp)
     bc8:	e13ff917 	ldw	r4,-28(fp)
     bcc:	e0fffe17 	ldw	r3,-8(fp)
     bd0:	20c9383a 	mul	r4,r4,r3
     bd4:	e0fff817 	ldw	r3,-32(fp)
     bd8:	20c7883a 	add	r3,r4,r3
     bdc:	10c5883a 	add	r2,r2,r3
     be0:	e0fffc03 	ldbu	r3,-16(fp)
     be4:	10c00025 	stbio	r3,0(r2)
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
		for (x = 0 ; x < width ; x++) {
     be8:	e0bff817 	ldw	r2,-32(fp)
     bec:	10800044 	addi	r2,r2,1
     bf0:	e0bff815 	stw	r2,-32(fp)
     bf4:	e0fff817 	ldw	r3,-32(fp)
     bf8:	e0bffe17 	ldw	r2,-8(fp)
     bfc:	18bfc916 	blt	r3,r2,b24 <__alt_data_end+0xff000b24>
	grayscale_width = width;
	grayscape_height = height;
	if (grayscale_array != NULL)
		free(grayscale_array);
	grayscale_array = (unsigned char *) malloc(width*height);
	for (y = 0 ; y < height ; y++) {
     c00:	e0bff917 	ldw	r2,-28(fp)
     c04:	10800044 	addi	r2,r2,1
     c08:	e0bff915 	stw	r2,-28(fp)
     c0c:	e0fff917 	ldw	r3,-28(fp)
     c10:	e0bfff17 	ldw	r2,-4(fp)
     c14:	18bfc116 	blt	r3,r2,b1c <__alt_data_end+0xff000b1c>
			gray += (((rgb>>0)&0x1F)<<3)*7; // blue part
			gray /= 100;
			IOWR_8DIRECT(grayscale_array,y*width+x,gray);
		}
	}
}
     c18:	0001883a 	nop
     c1c:	e037883a 	mov	sp,fp
     c20:	dfc00117 	ldw	ra,4(sp)
     c24:	df000017 	ldw	fp,0(sp)
     c28:	dec00204 	addi	sp,sp,8
     c2c:	f800283a 	ret

00000c30 <get_grayscale_width>:


int get_grayscale_width() {
     c30:	deffff04 	addi	sp,sp,-4
     c34:	df000015 	stw	fp,0(sp)
     c38:	d839883a 	mov	fp,sp
	return grayscale_width;
     c3c:	d0a6cf17 	ldw	r2,-25796(gp)
}
     c40:	e037883a 	mov	sp,fp
     c44:	df000017 	ldw	fp,0(sp)
     c48:	dec00104 	addi	sp,sp,4
     c4c:	f800283a 	ret

00000c50 <get_grayscale_height>:

int get_grayscale_height() {
     c50:	deffff04 	addi	sp,sp,-4
     c54:	df000015 	stw	fp,0(sp)
     c58:	d839883a 	mov	fp,sp
	return grayscape_height;
     c5c:	d0a6d017 	ldw	r2,-25792(gp)
}
     c60:	e037883a 	mov	sp,fp
     c64:	df000017 	ldw	fp,0(sp)
     c68:	dec00104 	addi	sp,sp,4
     c6c:	f800283a 	ret

00000c70 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
     c70:	deffff04 	addi	sp,sp,-4
     c74:	df000015 	stw	fp,0(sp)
     c78:	d839883a 	mov	fp,sp
	return grayscale_array;
     c7c:	d0a6d117 	ldw	r2,-25788(gp)
}
     c80:	e037883a 	mov	sp,fp
     c84:	df000017 	ldw	fp,0(sp)
     c88:	dec00104 	addi	sp,sp,4
     c8c:	f800283a 	ret

00000c90 <i2c_busy_wait>:

#include <system.h>
#include <io.h>
#include "i2c.h"

void i2c_busy_wait() {
     c90:	defffe04 	addi	sp,sp,-8
     c94:	df000115 	stw	fp,4(sp)
     c98:	df000104 	addi	fp,sp,4
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     c9c:	00804034 	movhi	r2,256
     ca0:	10842704 	addi	r2,r2,4252
     ca4:	10800037 	ldwio	r2,0(r2)
     ca8:	e0bfff15 	stw	r2,-4(fp)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     cac:	e0bfff17 	ldw	r2,-4(fp)
     cb0:	108000cc 	andi	r2,r2,3
     cb4:	103ff91e 	bne	r2,zero,c9c <__alt_data_end+0xff000c9c>
}
     cb8:	0001883a 	nop
     cbc:	e037883a 	mov	sp,fp
     cc0:	df000017 	ldw	fp,0(sp)
     cc4:	dec00104 	addi	sp,sp,4
     cc8:	f800283a 	ret

00000ccc <i2c_auto_detect>:

void i2c_auto_detect() {
     ccc:	defffb04 	addi	sp,sp,-20
     cd0:	dfc00415 	stw	ra,16(sp)
     cd4:	df000315 	stw	fp,12(sp)
     cd8:	df000304 	addi	fp,sp,12
	int nrdef,loop,value;
    i2c_busy_wait();
     cdc:	0000c900 	call	c90 <i2c_busy_wait>
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     ce0:	00c00104 	movi	r3,4
     ce4:	00804034 	movhi	r2,256
     ce8:	10842704 	addi	r2,r2,4252
     cec:	10c00035 	stwio	r3,0(r2)
    i2c_busy_wait();
     cf0:	0000c900 	call	c90 <i2c_busy_wait>
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     cf4:	00804034 	movhi	r2,256
     cf8:	10842504 	addi	r2,r2,4244
     cfc:	10800037 	ldwio	r2,0(r2)
     d00:	e0bffe15 	stw	r2,-8(fp)
    printf("Number of I2C devices detected: %d\n",nrdef);
     d04:	e17ffe17 	ldw	r5,-8(fp)
     d08:	01000074 	movhi	r4,1
     d0c:	21087904 	addi	r4,r4,8676
     d10:	00034940 	call	3494 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     d14:	e03ffd15 	stw	zero,-12(fp)
     d18:	00001006 	br	d5c <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     d1c:	00804034 	movhi	r2,256
     d20:	10842404 	addi	r2,r2,4240
     d24:	e0fffd17 	ldw	r3,-12(fp)
     d28:	10c00035 	stwio	r3,0(r2)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
     d2c:	00804034 	movhi	r2,256
     d30:	10842404 	addi	r2,r2,4240
     d34:	10800037 	ldwio	r2,0(r2)
     d38:	e0bfff15 	stw	r2,-4(fp)
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     d3c:	e1bfff17 	ldw	r6,-4(fp)
     d40:	e17ffd17 	ldw	r5,-12(fp)
     d44:	01000074 	movhi	r4,1
     d48:	21088204 	addi	r4,r4,8712
     d4c:	00034940 	call	3494 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800044 	addi	r2,r2,1
     d58:	e0bffd15 	stw	r2,-12(fp)
     d5c:	e0fffd17 	ldw	r3,-12(fp)
     d60:	e0bffe17 	ldw	r2,-8(fp)
     d64:	18bfed16 	blt	r3,r2,d1c <__alt_data_end+0xff000d1c>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     d68:	0001883a 	nop
     d6c:	e037883a 	mov	sp,fp
     d70:	dfc00117 	ldw	ra,4(sp)
     d74:	df000017 	ldw	fp,0(sp)
     d78:	dec00204 	addi	sp,sp,8
     d7c:	f800283a 	ret

00000d80 <i2c_short_read>:

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
     d80:	defffc04 	addi	sp,sp,-16
     d84:	dfc00315 	stw	ra,12(sp)
     d88:	df000215 	stw	fp,8(sp)
     d8c:	df000204 	addi	fp,sp,8
     d90:	2007883a 	mov	r3,r4
     d94:	2805883a 	mov	r2,r5
     d98:	e0fffe05 	stb	r3,-8(fp)
     d9c:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     da0:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     da4:	e0fffe03 	ldbu	r3,-8(fp)
     da8:	00804034 	movhi	r2,256
     dac:	10842404 	addi	r2,r2,4240
     db0:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     db4:	e0ffff0b 	ldhu	r3,-4(fp)
     db8:	00804034 	movhi	r2,256
     dbc:	10842504 	addi	r2,r2,4244
     dc0:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dc4:	00c010c4 	movi	r3,67
     dc8:	00804034 	movhi	r2,256
     dcc:	10842704 	addi	r2,r2,4252
     dd0:	10c00025 	stbio	r3,0(r2)
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     dd4:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     dd8:	e0bffe03 	ldbu	r2,-8(fp)
     ddc:	10c00044 	addi	r3,r2,1
     de0:	00804034 	movhi	r2,256
     de4:	10842404 	addi	r2,r2,4240
     de8:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     dec:	00c00884 	movi	r3,34
     df0:	00804034 	movhi	r2,256
     df4:	10842704 	addi	r2,r2,4252
     df8:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
     dfc:	0000c900 	call	c90 <i2c_busy_wait>
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     e00:	00804034 	movhi	r2,256
     e04:	10842604 	addi	r2,r2,4248
     e08:	10800037 	ldwio	r2,0(r2)
}
     e0c:	e037883a 	mov	sp,fp
     e10:	dfc00117 	ldw	ra,4(sp)
     e14:	df000017 	ldw	fp,0(sp)
     e18:	dec00204 	addi	sp,sp,8
     e1c:	f800283a 	ret

00000e20 <i2c_short_write>:

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
     e20:	defffb04 	addi	sp,sp,-20
     e24:	dfc00415 	stw	ra,16(sp)
     e28:	df000315 	stw	fp,12(sp)
     e2c:	df000304 	addi	fp,sp,12
     e30:	2807883a 	mov	r3,r5
     e34:	3005883a 	mov	r2,r6
     e38:	e13ffd05 	stb	r4,-12(fp)
     e3c:	e0fffe0d 	sth	r3,-8(fp)
     e40:	e0bfff0d 	sth	r2,-4(fp)
	i2c_busy_wait();
     e44:	0000c900 	call	c90 <i2c_busy_wait>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     e48:	e0fffd03 	ldbu	r3,-12(fp)
     e4c:	00804034 	movhi	r2,256
     e50:	10842404 	addi	r2,r2,4240
     e54:	10c00025 	stbio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     e58:	e0fffe0b 	ldhu	r3,-8(fp)
     e5c:	00804034 	movhi	r2,256
     e60:	10842504 	addi	r2,r2,4244
     e64:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     e68:	e0ffff0b 	ldhu	r3,-4(fp)
     e6c:	00804034 	movhi	r2,256
     e70:	10842604 	addi	r2,r2,4248
     e74:	10c0002d 	sthio	r3,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     e78:	00c01084 	movi	r3,66
     e7c:	00804034 	movhi	r2,256
     e80:	10842704 	addi	r2,r2,4252
     e84:	10c00025 	stbio	r3,0(r2)
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
     e88:	0000c900 	call	c90 <i2c_busy_wait>
}
     e8c:	0001883a 	nop
     e90:	e037883a 	mov	sp,fp
     e94:	dfc00117 	ldw	ra,4(sp)
     e98:	df000017 	ldw	fp,0(sp)
     e9c:	dec00204 	addi	sp,sp,8
     ea0:	f800283a 	ret

00000ea4 <LCD_Write_Command>:
#include "lcd_simple.h"

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
     ea4:	defffd04 	addi	sp,sp,-12
     ea8:	dfc00215 	stw	ra,8(sp)
     eac:	df000115 	stw	fp,4(sp)
     eb0:	df000104 	addi	fp,sp,4
     eb4:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     eb8:	00804034 	movhi	r2,256
     ebc:	10841804 	addi	r2,r2,4192
     ec0:	e0ffff0b 	ldhu	r3,-4(fp)
     ec4:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     ec8:	01000284 	movi	r4,10
     ecc:	000fbd40 	call	fbd4 <usleep>
}
     ed0:	0001883a 	nop
     ed4:	e037883a 	mov	sp,fp
     ed8:	dfc00117 	ldw	ra,4(sp)
     edc:	df000017 	ldw	fp,0(sp)
     ee0:	dec00204 	addi	sp,sp,8
     ee4:	f800283a 	ret

00000ee8 <LCD_Write_Data>:

void LCD_Write_Data(int data) {
     ee8:	defffd04 	addi	sp,sp,-12
     eec:	dfc00215 	stw	ra,8(sp)
     ef0:	df000115 	stw	fp,4(sp)
     ef4:	df000104 	addi	fp,sp,4
     ef8:	e13fff15 	stw	r4,-4(fp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     efc:	00804034 	movhi	r2,256
     f00:	10841904 	addi	r2,r2,4196
     f04:	e0ffff0b 	ldhu	r3,-4(fp)
     f08:	10c0002d 	sthio	r3,0(r2)
	usleep(10);
     f0c:	01000284 	movi	r4,10
     f10:	000fbd40 	call	fbd4 <usleep>
}
     f14:	0001883a 	nop
     f18:	e037883a 	mov	sp,fp
     f1c:	dfc00117 	ldw	ra,4(sp)
     f20:	df000017 	ldw	fp,0(sp)
     f24:	dec00204 	addi	sp,sp,8
     f28:	f800283a 	ret

00000f2c <init_LCD>:


void init_LCD() {
     f2c:	defffe04 	addi	sp,sp,-8
     f30:	dfc00115 	stw	ra,4(sp)
     f34:	df000015 	stw	fp,0(sp)
     f38:	d839883a 	mov	fp,sp
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     f3c:	00c00084 	movi	r3,2
     f40:	00804034 	movhi	r2,256
     f44:	10841a04 	addi	r2,r2,4200
     f48:	10c0002d 	sthio	r3,0(r2)
			         LCD_Sixteen_Bit|LCD_Reset|
			         LCD_RGB565_Mode|LCD_Color_Image); // Set 16 bit transfer mode and reset
	LCD_Write_Command(0x0028); 	//display OFF
     f4c:	01000a04 	movi	r4,40
     f50:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Command(0x0011); 	//exit SLEEP mode
     f54:	01000444 	movi	r4,17
     f58:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
     f5c:	0009883a 	mov	r4,zero
     f60:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CB); 	//Power Control A
     f64:	010032c4 	movi	r4,203
     f68:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0039); 	//always 0x39
     f6c:	01000e44 	movi	r4,57
     f70:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x002C); 	//always 0x2C
     f74:	01000b04 	movi	r4,44
     f78:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000); 	//always 0x00
     f7c:	0009883a 	mov	r4,zero
     f80:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0034); 	//Vcore = 1.6V
     f84:	01000d04 	movi	r4,52
     f88:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0002); 	//DDVDH = 5.6V
     f8c:	01000084 	movi	r4,2
     f90:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00CF); 	//Power Control B
     f94:	010033c4 	movi	r4,207
     f98:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000); 	//always 0x00
     f9c:	0009883a 	mov	r4,zero
     fa0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081); 	//PCEQ off
     fa4:	01002044 	movi	r4,129
     fa8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0030); 	//ESD protection
     fac:	01000c04 	movi	r4,48
     fb0:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00E8); 	//Driver timing control A
     fb4:	01003a04 	movi	r4,232
     fb8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0085); 	//non - overlap
     fbc:	01002144 	movi	r4,133
     fc0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001); 	//EQ timing
     fc4:	01000044 	movi	r4,1
     fc8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0079); 	//Pre-chargetiming
     fcc:	01001e44 	movi	r4,121
     fd0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Command(0x00EA); 	//Driver timing control B
     fd4:	01003a84 	movi	r4,234
     fd8:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);		//Gate driver timing
     fdc:	0009883a 	mov	r4,zero
     fe0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//always 0x00
     fe4:	0009883a 	mov	r4,zero
     fe8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0064);		//soft start 
     fec:	01001904 	movi	r4,100
     ff0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0003);		//power on sequence 
     ff4:	010000c4 	movi	r4,3
     ff8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0012);		//power on sequence 
     ffc:	01000484 	movi	r4,18
    1000:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0081);		//DDVDH enhance on 
    1004:	01002044 	movi	r4,129
    1008:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F7); 	//Pump ratio control 
    100c:	01003dc4 	movi	r4,247
    1010:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0020); 	//DDVDH=2xVCI 
    1014:	01000804 	movi	r4,32
    1018:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C0);	//power control 1 
    101c:	01003004 	movi	r4,192
    1020:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0026);
    1024:	01000984 	movi	r4,38
    1028:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0004); 	//second parameter for ILI9340 (ignored by ILI9341) 
    102c:	01000104 	movi	r4,4
    1030:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C1); 	//power control 2 
    1034:	01003044 	movi	r4,193
    1038:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0011);
    103c:	01000444 	movi	r4,17
    1040:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C5); 	//VCOM control 1 
    1044:	01003144 	movi	r4,197
    1048:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0035);
    104c:	01000d44 	movi	r4,53
    1050:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003E);
    1054:	01000f84 	movi	r4,62
    1058:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00C7); 	//VCOM control 2 
    105c:	010031c4 	movi	r4,199
    1060:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x00BE);
    1064:	01002f84 	movi	r4,190
    1068:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B1); 	//frame rate control 
    106c:	01002c44 	movi	r4,177
    1070:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    1074:	0009883a 	mov	r4,zero
    1078:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0010);
    107c:	01000404 	movi	r4,16
    1080:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x003A);	//pixel format = 16 bit per pixel 
    1084:	01000e84 	movi	r4,58
    1088:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0055);
    108c:	01001544 	movi	r4,85
    1090:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00B6); 	//display function control 
    1094:	01002d84 	movi	r4,182
    1098:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x000A);
    109c:	01000284 	movi	r4,10
    10a0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00A2);
    10a4:	01002884 	movi	r4,162
    10a8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x00F2); 	//3G Gamma control 
    10ac:	01003c84 	movi	r4,242
    10b0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0002);	 	//off 
    10b4:	01000084 	movi	r4,2
    10b8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0026); 	//Gamma curve 3 
    10bc:	01000984 	movi	r4,38
    10c0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0001);
    10c4:	01000044 	movi	r4,1
    10c8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x0036); 	//memory access control = BGR 
    10cc:	01000d84 	movi	r4,54
    10d0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10d4:	0009883a 	mov	r4,zero
    10d8:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002A); 	//column address set 
    10dc:	01000a84 	movi	r4,42
    10e0:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    10e4:	0009883a 	mov	r4,zero
    10e8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    10ec:	0009883a 	mov	r4,zero
    10f0:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);
    10f4:	0009883a 	mov	r4,zero
    10f8:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x00EF);		//end 0x00EF 
    10fc:	01003bc4 	movi	r4,239
    1100:	0000ee80 	call	ee8 <LCD_Write_Data>

	LCD_Write_Command(0x002B);	//page address set 
    1104:	01000ac4 	movi	r4,43
    1108:	0000ea40 	call	ea4 <LCD_Write_Command>
	LCD_Write_Data(0x0000);
    110c:	0009883a 	mov	r4,zero
    1110:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0000);		//start 0x0000 
    1114:	0009883a 	mov	r4,zero
    1118:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x0001);
    111c:	01000044 	movi	r4,1
    1120:	0000ee80 	call	ee8 <LCD_Write_Data>
	LCD_Write_Data(0x003F);		//end 0x013F 
    1124:	01000fc4 	movi	r4,63
    1128:	0000ee80 	call	ee8 <LCD_Write_Data>
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
    112c:	00c03c04 	movi	r3,240
    1130:	00804034 	movhi	r2,256
    1134:	10841d04 	addi	r2,r2,4212
    1138:	10c00035 	stwio	r3,0(r2)
	LCD_width = 240;
    113c:	00803c04 	movi	r2,240
    1140:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
    1144:	00805004 	movi	r2,320
    1148:	d0a6d20d 	sth	r2,-25784(gp)


	LCD_Write_Command(0x0029);
    114c:	01000a44 	movi	r4,41
    1150:	0000ea40 	call	ea4 <LCD_Write_Command>

}
    1154:	0001883a 	nop
    1158:	e037883a 	mov	sp,fp
    115c:	dfc00117 	ldw	ra,4(sp)
    1160:	df000017 	ldw	fp,0(sp)
    1164:	dec00204 	addi	sp,sp,8
    1168:	f800283a 	ret

0000116c <transfer_LCD_no_dma>:

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
    116c:	defff904 	addi	sp,sp,-28
    1170:	dfc00615 	stw	ra,24(sp)
    1174:	df000515 	stw	fp,20(sp)
    1178:	df000504 	addi	fp,sp,20
    117c:	e13ffd15 	stw	r4,-12(fp)
    1180:	e17ffe15 	stw	r5,-8(fp)
    1184:	e1bfff15 	stw	r6,-4(fp)
	unsigned short *data_array = (unsigned short *)array;
    1188:	e0bffd17 	ldw	r2,-12(fp)
    118c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1190:	00804034 	movhi	r2,256
    1194:	10841e04 	addi	r2,r2,4216
    1198:	e0fffe17 	ldw	r3,-8(fp)
    119c:	10c00035 	stwio	r3,0(r2)
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
    11a0:	01000b04 	movi	r4,44
    11a4:	0000ea40 	call	ea4 <LCD_Write_Command>
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11a8:	e03ffb15 	stw	zero,-20(fp)
    11ac:	00000c06 	br	11e0 <transfer_LCD_no_dma+0x74>
		LCD_Write_Data(data_array[pixels]);
    11b0:	e0bffb17 	ldw	r2,-20(fp)
    11b4:	1085883a 	add	r2,r2,r2
    11b8:	1007883a 	mov	r3,r2
    11bc:	e0bffc17 	ldw	r2,-16(fp)
    11c0:	10c5883a 	add	r2,r2,r3
    11c4:	1080000b 	ldhu	r2,0(r2)
    11c8:	10bfffcc 	andi	r2,r2,65535
    11cc:	1009883a 	mov	r4,r2
    11d0:	0000ee80 	call	ee8 <LCD_Write_Data>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
    11d4:	e0bffb17 	ldw	r2,-20(fp)
    11d8:	10800044 	addi	r2,r2,1
    11dc:	e0bffb15 	stw	r2,-20(fp)
    11e0:	e0fffe17 	ldw	r3,-8(fp)
    11e4:	e0bfff17 	ldw	r2,-4(fp)
    11e8:	1885383a 	mul	r2,r3,r2
    11ec:	1007883a 	mov	r3,r2
    11f0:	e0bffb17 	ldw	r2,-20(fp)
    11f4:	10ffee36 	bltu	r2,r3,11b0 <__alt_data_end+0xff0011b0>
		LCD_Write_Data(data_array[pixels]);
}
    11f8:	0001883a 	nop
    11fc:	e037883a 	mov	sp,fp
    1200:	dfc00117 	ldw	ra,4(sp)
    1204:	df000017 	ldw	fp,0(sp)
    1208:	dec00204 	addi	sp,sp,8
    120c:	f800283a 	ret

00001210 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
    1210:	defffa04 	addi	sp,sp,-24
    1214:	df000515 	stw	fp,20(sp)
    1218:	df000504 	addi	fp,sp,20
    121c:	e13ffc15 	stw	r4,-16(fp)
    1220:	e17ffd15 	stw	r5,-12(fp)
    1224:	e1bffe15 	stw	r6,-8(fp)
    1228:	3805883a 	mov	r2,r7
    122c:	e0bfff05 	stb	r2,-4(fp)
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
    1230:	d0a6d20b 	ldhu	r2,-25784(gp)
    1234:	10bfffcc 	andi	r2,r2,65535
    1238:	e0fffe17 	ldw	r3,-8(fp)
    123c:	1880010e 	bge	r3,r2,1244 <transfer_LCD_with_dma+0x34>
    1240:	1805883a 	mov	r2,r3
    1244:	e0bffb0d 	sth	r2,-20(fp)
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
    1248:	d0a6d28b 	ldhu	r2,-25782(gp)
    124c:	10bfffcc 	andi	r2,r2,65535
    1250:	e0fffd17 	ldw	r3,-12(fp)
    1254:	1880010e 	bge	r3,r2,125c <transfer_LCD_with_dma+0x4c>
    1258:	1805883a 	mov	r2,r3
    125c:	e0bffb8d 	sth	r2,-18(fp)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
    1260:	00804034 	movhi	r2,256
    1264:	10841e04 	addi	r2,r2,4216
    1268:	e0fffd17 	ldw	r3,-12(fp)
    126c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
    1270:	e0fffc17 	ldw	r3,-16(fp)
    1274:	00804034 	movhi	r2,256
    1278:	10841b04 	addi	r2,r2,4204
    127c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
    1280:	e0fffb8b 	ldhu	r3,-18(fp)
    1284:	e0bffb0b 	ldhu	r2,-20(fp)
    1288:	1887383a 	mul	r3,r3,r2
    128c:	00804034 	movhi	r2,256
    1290:	10841c04 	addi	r2,r2,4208
    1294:	10c00035 	stwio	r3,0(r2)
	if (grayscale==0)
    1298:	e0bfff07 	ldb	r2,-4(fp)
    129c:	1000051e 	bne	r2,zero,12b4 <transfer_LCD_with_dma+0xa4>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12a0:	00c04004 	movi	r3,256
    12a4:	00804034 	movhi	r2,256
    12a8:	10841a04 	addi	r2,r2,4200
    12ac:	10c0002d 	sthio	r3,0(r2)
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12b0:	00000406 	br	12c4 <transfer_LCD_with_dma+0xb4>
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
    12b4:	00c04404 	movi	r3,272
    12b8:	00804034 	movhi	r2,256
    12bc:	10841a04 	addi	r2,r2,4200
    12c0:	10c0002d 	sthio	r3,0(r2)
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_GrayScale_Image);
}
    12c4:	0001883a 	nop
    12c8:	e037883a 	mov	sp,fp
    12cc:	df000017 	ldw	fp,0(sp)
    12d0:	dec00104 	addi	sp,sp,4
    12d4:	f800283a 	ret

000012d8 <main>:

const char * pgx_array = &gx_array;
const char * pgy_array = &gy_array;

int main()
{
    12d8:	deffe804 	addi	sp,sp,-96
    12dc:	dfc01715 	stw	ra,92(sp)
    12e0:	df001615 	stw	fp,88(sp)
    12e4:	dc401515 	stw	r17,84(sp)
    12e8:	dc001415 	stw	r16,80(sp)
    12ec:	df001604 	addi	fp,sp,88
  unsigned short *image;
  unsigned char *grayscale;
  unsigned char current_mode;
  unsigned char mode;

  int wait_cnt = 0; 		// wait at the end of loop so that printf shows result of current execution
    12f0:	e03ff515 	stw	zero,-44(fp)
  int max_wait = 100000;	// wait until wait_cnt reaches this value
    12f4:	008000b4 	movhi	r2,2
    12f8:	10a1a804 	addi	r2,r2,-31072
    12fc:	e0bff615 	stw	r2,-40(fp)

  //timer values for profiling
  alt_u32 start_sobel_x = 0;
    1300:	e03fea15 	stw	zero,-88(fp)
  alt_u32 end_sobel_x = 0;
    1304:	e03feb15 	stw	zero,-84(fp)
  alt_u32 start_sobel_y = 0;
    1308:	e03fec15 	stw	zero,-80(fp)
  alt_u32 end_sobel_y = 0;
    130c:	e03fed15 	stw	zero,-76(fp)
  alt_u32 start_sobel_th = 0;
    1310:	e03fee15 	stw	zero,-72(fp)
  alt_u32 end_sobel_th = 0;
    1314:	e03fef15 	stw	zero,-68(fp)
  alt_u32 start_grayscale = 0;
    1318:	e03ff015 	stw	zero,-64(fp)
  alt_u32 end_grayscale = 0;
    131c:	e03ff115 	stw	zero,-60(fp)

  init_LCD();
    1320:	0000f2c0 	call	f2c <init_LCD>
  init_camera();
    1324:	00002800 	call	280 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1328:	01000604 	movi	r4,24
    132c:	0002a440 	call	2a44 <vga_set_swap>
  printf("Hello from Nios II!\n");
    1330:	01000074 	movhi	r4,1
    1334:	21088b04 	addi	r4,r4,8748
    1338:	00035900 	call	3590 <puts>
  cam_get_profiling();
    133c:	00007fc0 	call	7fc <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1340:	00007640 	call	764 <cam_get_xsize>
    1344:	143fffcc 	andi	r16,r2,65535
    1348:	00007b00 	call	7b0 <cam_get_ysize>
    134c:	10bfffcc 	andi	r2,r2,65535
    1350:	8085383a 	mul	r2,r16,r2
    1354:	1009883a 	mov	r4,r2
    1358:	0002c300 	call	2c30 <malloc>
    135c:	e0bff715 	stw	r2,-36(fp)
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1360:	00007640 	call	764 <cam_get_xsize>
    1364:	143fffcc 	andi	r16,r2,65535
    1368:	00007b00 	call	7b0 <cam_get_ysize>
    136c:	10bfffcc 	andi	r2,r2,65535
    1370:	8085383a 	mul	r2,r16,r2
    1374:	1009883a 	mov	r4,r2
    1378:	0002c300 	call	2c30 <malloc>
    137c:	e0bff815 	stw	r2,-32(fp)
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    1380:	00007640 	call	764 <cam_get_xsize>
    1384:	143fffcc 	andi	r16,r2,65535
    1388:	00007b00 	call	7b0 <cam_get_ysize>
    138c:	10bfffcc 	andi	r2,r2,65535
    1390:	8085383a 	mul	r2,r16,r2
    1394:	1009883a 	mov	r4,r2
    1398:	0002c300 	call	2c30 <malloc>
    139c:	e0bff915 	stw	r2,-28(fp)
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
    13a0:	00007640 	call	764 <cam_get_xsize>
    13a4:	143fffcc 	andi	r16,r2,65535
    13a8:	00007b00 	call	7b0 <cam_get_ysize>
    13ac:	10bfffcc 	andi	r2,r2,65535
    13b0:	8085383a 	mul	r2,r16,r2
    13b4:	1009883a 	mov	r4,r2
    13b8:	0002c300 	call	2c30 <malloc>
    13bc:	e0bffa15 	stw	r2,-24(fp)
  cam_set_image_pointer(0,buffer1);
    13c0:	e17ff717 	ldw	r5,-36(fp)
    13c4:	0009883a 	mov	r4,zero
    13c8:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
    13cc:	e17ff817 	ldw	r5,-32(fp)
    13d0:	01000044 	movi	r4,1
    13d4:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
    13d8:	e17ff917 	ldw	r5,-28(fp)
    13dc:	01000084 	movi	r4,2
    13e0:	00008a40 	call	8a4 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
    13e4:	e17ffa17 	ldw	r5,-24(fp)
    13e8:	010000c4 	movi	r4,3
    13ec:	00008a40 	call	8a4 <cam_set_image_pointer>
  enable_continues_mode();
    13f0:	00009fc0 	call	9fc <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
    13f4:	00007640 	call	764 <cam_get_xsize>
    13f8:	10bfffcc 	andi	r2,r2,65535
    13fc:	1004d07a 	srli	r2,r2,1
    1400:	143fffcc 	andi	r16,r2,65535
    1404:	00007b00 	call	7b0 <cam_get_ysize>
    1408:	10bfffcc 	andi	r2,r2,65535
    140c:	100b883a 	mov	r5,r2
    1410:	8009883a 	mov	r4,r16
    1414:	0001ffc0 	call	1ffc <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
    1418:	0000a2c0 	call	a2c <new_image_available>
    141c:	10803fcc 	andi	r2,r2,255
    1420:	1080201c 	xori	r2,r2,128
    1424:	10bfe004 	addi	r2,r2,-128
    1428:	103ffb26 	beq	r2,zero,1418 <__alt_data_end+0xff001418>
		  if (current_image_valid()!=0) {
    142c:	000094c0 	call	94c <current_image_valid>
    1430:	10bfffcc 	andi	r2,r2,65535
    1434:	10a0001c 	xori	r2,r2,32768
    1438:	10a00004 	addi	r2,r2,-32768
    143c:	103ff626 	beq	r2,zero,1418 <__alt_data_end+0xff001418>
			  current_mode = DIPSW_get_value();
    1440:	0000a840 	call	a84 <DIPSW_get_value>
    1444:	e0bffb05 	stb	r2,-20(fp)
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
    1448:	e0bffb03 	ldbu	r2,-20(fp)
    144c:	108001cc 	andi	r2,r2,7
    1450:	e0bffb45 	stb	r2,-19(fp)
			  image = (unsigned short*)current_image_pointer();
    1454:	00009840 	call	984 <current_image_pointer>
    1458:	e0bffc15 	stw	r2,-16(fp)
		      switch (mode) {
    145c:	e0bffb43 	ldbu	r2,-19(fp)
    1460:	10c00060 	cmpeqi	r3,r2,1
    1464:	1800211e 	bne	r3,zero,14ec <main+0x214>
    1468:	10c00088 	cmpgei	r3,r2,2
    146c:	1800021e 	bne	r3,zero,1478 <main+0x1a0>
    1470:	10000626 	beq	r2,zero,148c <main+0x1b4>
    1474:	0000a606 	br	1710 <main+0x438>
    1478:	10c000a0 	cmpeqi	r3,r2,2
    147c:	1800431e 	bne	r3,zero,158c <main+0x2b4>
    1480:	108000e0 	cmpeqi	r2,r2,3
    1484:	10006e1e 	bne	r2,zero,1640 <main+0x368>
    1488:	0000a106 	br	1710 <main+0x438>
		      case 0 : transfer_LCD_with_dma(&image[16520],
    148c:	e0fffc17 	ldw	r3,-16(fp)
    1490:	00a04414 	movui	r2,33040
    1494:	18a1883a 	add	r16,r3,r2
		                	cam_get_xsize()>>1,
    1498:	00007640 	call	764 <cam_get_xsize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    149c:	10bfffcc 	andi	r2,r2,65535
    14a0:	1004d07a 	srli	r2,r2,1
    14a4:	147fffcc 	andi	r17,r2,65535
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
    14a8:	00007b00 	call	7b0 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    14ac:	10bfffcc 	andi	r2,r2,65535
    14b0:	000f883a 	mov	r7,zero
    14b4:	100d883a 	mov	r6,r2
    14b8:	880b883a 	mov	r5,r17
    14bc:	8009883a 	mov	r4,r16
    14c0:	00012100 	call	1210 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    14c4:	e0bffb03 	ldbu	r2,-20(fp)
    14c8:	10803fcc 	andi	r2,r2,255
    14cc:	1080201c 	xori	r2,r2,128
    14d0:	10bfe004 	addi	r2,r2,-128
    14d4:	1002970e 	bge	r2,zero,1f34 <main+0xc5c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    14d8:	01000204 	movi	r4,8
    14dc:	0002a440 	call	2a44 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    14e0:	e13ffc17 	ldw	r4,-16(fp)
    14e4:	0002a100 	call	2a10 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    14e8:	00029206 	br	1f34 <main+0xc5c>
		      case 1 : alt_timestamp_start();
    14ec:	001097c0 	call	1097c <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    14f0:	00109f40 	call	109f4 <alt_timestamp>
    14f4:	e0bff015 	stw	r2,-64(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    14f8:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    14fc:	10bfffcc 	andi	r2,r2,65535
    1500:	1004d07a 	srli	r2,r2,1
    1504:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    1508:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    150c:	10bfffcc 	andi	r2,r2,65535
    1510:	100d883a 	mov	r6,r2
    1514:	800b883a 	mov	r5,r16
    1518:	e13ffc17 	ldw	r4,-16(fp)
    151c:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1520:	00109f40 	call	109f4 <alt_timestamp>
    1524:	e0bff115 	stw	r2,-60(fp)
		               grayscale = get_grayscale_picture();
    1528:	0000c700 	call	c70 <get_grayscale_picture>
    152c:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    1530:	e0bffd17 	ldw	r2,-12(fp)
    1534:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    1538:	00007640 	call	764 <cam_get_xsize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    153c:	10bfffcc 	andi	r2,r2,65535
    1540:	1004d07a 	srli	r2,r2,1
    1544:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    1548:	00007b00 	call	7b0 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    154c:	10bfffcc 	andi	r2,r2,65535
    1550:	01c00044 	movi	r7,1
    1554:	100d883a 	mov	r6,r2
    1558:	880b883a 	mov	r5,r17
    155c:	8009883a 	mov	r4,r16
    1560:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1564:	e0bffb03 	ldbu	r2,-20(fp)
    1568:	10803fcc 	andi	r2,r2,255
    156c:	1080201c 	xori	r2,r2,128
    1570:	10bfe004 	addi	r2,r2,-128
    1574:	1002710e 	bge	r2,zero,1f3c <main+0xc64>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1578:	01000604 	movi	r4,24
    157c:	0002a440 	call	2a44 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1580:	e13ffd17 	ldw	r4,-12(fp)
    1584:	0002a100 	call	2a10 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1588:	00026c06 	br	1f3c <main+0xc64>
		      case 2 : alt_timestamp_start();
    158c:	001097c0 	call	1097c <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1590:	00109f40 	call	109f4 <alt_timestamp>
    1594:	e0bff015 	stw	r2,-64(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1598:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    159c:	10bfffcc 	andi	r2,r2,65535
    15a0:	1004d07a 	srli	r2,r2,1
    15a4:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    15a8:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    15ac:	10bfffcc 	andi	r2,r2,65535
    15b0:	100d883a 	mov	r6,r2
    15b4:	800b883a 	mov	r5,r16
    15b8:	e13ffc17 	ldw	r4,-16(fp)
    15bc:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    15c0:	00109f40 	call	109f4 <alt_timestamp>
    15c4:	e0bff115 	stw	r2,-60(fp)
		               grayscale = get_grayscale_picture();
    15c8:	0000c700 	call	c70 <get_grayscale_picture>
    15cc:	e0bffd15 	stw	r2,-12(fp)
		               sobel_x_with_rgb(grayscale);
    15d0:	e13ffd17 	ldw	r4,-12(fp)
    15d4:	000257c0 	call	257c <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    15d8:	00029d00 	call	29d0 <GetSobel_rgb>
    15dc:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    15e0:	e0fffc17 	ldw	r3,-16(fp)
    15e4:	00a04414 	movui	r2,33040
    15e8:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    15ec:	00007640 	call	764 <cam_get_xsize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    15f0:	10bfffcc 	andi	r2,r2,65535
    15f4:	1004d07a 	srli	r2,r2,1
    15f8:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    15fc:	00007b00 	call	7b0 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1600:	10bfffcc 	andi	r2,r2,65535
    1604:	000f883a 	mov	r7,zero
    1608:	100d883a 	mov	r6,r2
    160c:	880b883a 	mov	r5,r17
    1610:	8009883a 	mov	r4,r16
    1614:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1618:	e0bffb03 	ldbu	r2,-20(fp)
    161c:	10803fcc 	andi	r2,r2,255
    1620:	1080201c 	xori	r2,r2,128
    1624:	10bfe004 	addi	r2,r2,-128
    1628:	1002460e 	bge	r2,zero,1f44 <main+0xc6c>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    162c:	01000204 	movi	r4,8
    1630:	0002a440 	call	2a44 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1634:	e13ffc17 	ldw	r4,-16(fp)
    1638:	0002a100 	call	2a10 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    163c:	00024106 	br	1f44 <main+0xc6c>
		      case 3 : alt_timestamp_start();
    1640:	001097c0 	call	1097c <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1644:	00109f40 	call	109f4 <alt_timestamp>
    1648:	e0bff015 	stw	r2,-64(fp)
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    164c:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1650:	10bfffcc 	andi	r2,r2,65535
    1654:	1004d07a 	srli	r2,r2,1
    1658:	143fffcc 	andi	r16,r2,65535
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
    165c:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1660:	10bfffcc 	andi	r2,r2,65535
    1664:	100d883a 	mov	r6,r2
    1668:	800b883a 	mov	r5,r16
    166c:	e13ffc17 	ldw	r4,-16(fp)
    1670:	0000ab40 	call	ab4 <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1674:	00109f40 	call	109f4 <alt_timestamp>
    1678:	e0bff115 	stw	r2,-60(fp)
		               grayscale = get_grayscale_picture();
    167c:	0000c700 	call	c70 <get_grayscale_picture>
    1680:	e0bffd15 	stw	r2,-12(fp)
		               alt_timestamp_start();
    1684:	001097c0 	call	1097c <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1688:	00109f40 	call	109f4 <alt_timestamp>
    168c:	e0bfea15 	stw	r2,-88(fp)
		               sobel_x(grayscale);
    1690:	e13ffd17 	ldw	r4,-12(fp)
    1694:	00024b40 	call	24b4 <sobel_x>
		               end_sobel_x = alt_timestamp();
    1698:	00109f40 	call	109f4 <alt_timestamp>
    169c:	e0bfeb15 	stw	r2,-84(fp)
		               sobel_y_with_rgb(grayscale);
    16a0:	e13ffd17 	ldw	r4,-12(fp)
    16a4:	00027800 	call	2780 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    16a8:	00029d00 	call	29d0 <GetSobel_rgb>
    16ac:	e0bffc15 	stw	r2,-16(fp)
		               transfer_LCD_with_dma(&image[16520],
    16b0:	e0fffc17 	ldw	r3,-16(fp)
    16b4:	00a04414 	movui	r2,33040
    16b8:	18a1883a 	add	r16,r3,r2
		      		                	cam_get_xsize()>>1,
    16bc:	00007640 	call	764 <cam_get_xsize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    16c0:	10bfffcc 	andi	r2,r2,65535
    16c4:	1004d07a 	srli	r2,r2,1
    16c8:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
    16cc:	00007b00 	call	7b0 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    16d0:	10bfffcc 	andi	r2,r2,65535
    16d4:	000f883a 	mov	r7,zero
    16d8:	100d883a 	mov	r6,r2
    16dc:	880b883a 	mov	r5,r17
    16e0:	8009883a 	mov	r4,r16
    16e4:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    16e8:	e0bffb03 	ldbu	r2,-20(fp)
    16ec:	10803fcc 	andi	r2,r2,255
    16f0:	1080201c 	xori	r2,r2,128
    16f4:	10bfe004 	addi	r2,r2,-128
    16f8:	1002140e 	bge	r2,zero,1f4c <main+0xc74>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    16fc:	01000204 	movi	r4,8
    1700:	0002a440 	call	2a44 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1704:	e13ffc17 	ldw	r4,-16(fp)
    1708:	0002a100 	call	2a10 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    170c:	00020f06 	br	1f4c <main+0xc74>
		      default: alt_timestamp_start();
    1710:	001097c0 	call	1097c <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1714:	00109f40 	call	109f4 <alt_timestamp>
    1718:	e0bff015 	stw	r2,-64(fp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    171c:	00007640 	call	764 <cam_get_xsize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1720:	10bfffcc 	andi	r2,r2,65535
    1724:	1004d07a 	srli	r2,r2,1
    1728:	143fffcc 	andi	r16,r2,65535
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
    172c:	00007b00 	call	7b0 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1730:	10bfffcc 	andi	r2,r2,65535
    1734:	100d883a 	mov	r6,r2
    1738:	800b883a 	mov	r5,r16
    173c:	e13ffc17 	ldw	r4,-16(fp)
    1740:	0000ab40 	call	ab4 <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1744:	00109f40 	call	109f4 <alt_timestamp>
    1748:	e0bff115 	stw	r2,-60(fp)
                       grayscale = get_grayscale_picture();
    174c:	0000c700 	call	c70 <get_grayscale_picture>
    1750:	e0bffd15 	stw	r2,-12(fp)

                       alt_timestamp_start();
    1754:	001097c0 	call	1097c <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    1758:	00109f40 	call	109f4 <alt_timestamp>
    175c:	e0bfea15 	stw	r2,-88(fp)
                       /* sobel_x function in-lining <=> replace: sobel_x(grayscale); */
                       short result = 0;
    1760:	e03ff20d 	sth	zero,-56(fp)
                       int x,y;
                       for (y = 1 ; y < (sobel_height-1) ; y++) {
    1764:	00800044 	movi	r2,1
    1768:	e0bff415 	stw	r2,-48(fp)
    176c:	0000df06 	br	1aec <main+0x814>
                         for (x = 1 ; x < (sobel_width-1) ; x++) {
    1770:	00800044 	movi	r2,1
    1774:	e0bff315 	stw	r2,-52(fp)
    1778:	0000d506 	br	1ad0 <main+0x7f8>
                           result += pgx_array[0] * grayscale[(y-1)*sobel_width+(x-1)];
    177c:	d0a00017 	ldw	r2,-32768(gp)
    1780:	10800003 	ldbu	r2,0(r2)
    1784:	10c03fcc 	andi	r3,r2,255
    1788:	18c0201c 	xori	r3,r3,128
    178c:	18ffe004 	addi	r3,r3,-128
    1790:	e0bff417 	ldw	r2,-48(fp)
    1794:	113fffc4 	addi	r4,r2,-1
    1798:	d0a6d317 	ldw	r2,-25780(gp)
    179c:	2089383a 	mul	r4,r4,r2
    17a0:	e0bff317 	ldw	r2,-52(fp)
    17a4:	10bfffc4 	addi	r2,r2,-1
    17a8:	2085883a 	add	r2,r4,r2
    17ac:	1009883a 	mov	r4,r2
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	1105883a 	add	r2,r2,r4
    17b8:	10800003 	ldbu	r2,0(r2)
    17bc:	10803fcc 	andi	r2,r2,255
    17c0:	1885383a 	mul	r2,r3,r2
    17c4:	1007883a 	mov	r3,r2
    17c8:	e0bff20b 	ldhu	r2,-56(fp)
    17cc:	1885883a 	add	r2,r3,r2
    17d0:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[1] * grayscale[(y-1)*sobel_width+x];
    17d4:	d0a00017 	ldw	r2,-32768(gp)
    17d8:	10800044 	addi	r2,r2,1
    17dc:	10800003 	ldbu	r2,0(r2)
    17e0:	10c03fcc 	andi	r3,r2,255
    17e4:	18c0201c 	xori	r3,r3,128
    17e8:	18ffe004 	addi	r3,r3,-128
    17ec:	e0bff417 	ldw	r2,-48(fp)
    17f0:	113fffc4 	addi	r4,r2,-1
    17f4:	d0a6d317 	ldw	r2,-25780(gp)
    17f8:	2089383a 	mul	r4,r4,r2
    17fc:	e0bff317 	ldw	r2,-52(fp)
    1800:	2085883a 	add	r2,r4,r2
    1804:	1009883a 	mov	r4,r2
    1808:	e0bffd17 	ldw	r2,-12(fp)
    180c:	1105883a 	add	r2,r2,r4
    1810:	10800003 	ldbu	r2,0(r2)
    1814:	10803fcc 	andi	r2,r2,255
    1818:	1885383a 	mul	r2,r3,r2
    181c:	1007883a 	mov	r3,r2
    1820:	e0bff20b 	ldhu	r2,-56(fp)
    1824:	1885883a 	add	r2,r3,r2
    1828:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[2] * grayscale[(y-1)*sobel_width+(x+1)];
    182c:	d0a00017 	ldw	r2,-32768(gp)
    1830:	10800084 	addi	r2,r2,2
    1834:	10800003 	ldbu	r2,0(r2)
    1838:	10c03fcc 	andi	r3,r2,255
    183c:	18c0201c 	xori	r3,r3,128
    1840:	18ffe004 	addi	r3,r3,-128
    1844:	e0bff417 	ldw	r2,-48(fp)
    1848:	113fffc4 	addi	r4,r2,-1
    184c:	d0a6d317 	ldw	r2,-25780(gp)
    1850:	2089383a 	mul	r4,r4,r2
    1854:	e0bff317 	ldw	r2,-52(fp)
    1858:	10800044 	addi	r2,r2,1
    185c:	2085883a 	add	r2,r4,r2
    1860:	1009883a 	mov	r4,r2
    1864:	e0bffd17 	ldw	r2,-12(fp)
    1868:	1105883a 	add	r2,r2,r4
    186c:	10800003 	ldbu	r2,0(r2)
    1870:	10803fcc 	andi	r2,r2,255
    1874:	1885383a 	mul	r2,r3,r2
    1878:	1007883a 	mov	r3,r2
    187c:	e0bff20b 	ldhu	r2,-56(fp)
    1880:	1885883a 	add	r2,r3,r2
    1884:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[3] * grayscale[y*sobel_width+(x-1)];
    1888:	d0a00017 	ldw	r2,-32768(gp)
    188c:	108000c4 	addi	r2,r2,3
    1890:	10800003 	ldbu	r2,0(r2)
    1894:	10c03fcc 	andi	r3,r2,255
    1898:	18c0201c 	xori	r3,r3,128
    189c:	18ffe004 	addi	r3,r3,-128
    18a0:	d126d317 	ldw	r4,-25780(gp)
    18a4:	e0bff417 	ldw	r2,-48(fp)
    18a8:	2089383a 	mul	r4,r4,r2
    18ac:	e0bff317 	ldw	r2,-52(fp)
    18b0:	10bfffc4 	addi	r2,r2,-1
    18b4:	2085883a 	add	r2,r4,r2
    18b8:	1009883a 	mov	r4,r2
    18bc:	e0bffd17 	ldw	r2,-12(fp)
    18c0:	1105883a 	add	r2,r2,r4
    18c4:	10800003 	ldbu	r2,0(r2)
    18c8:	10803fcc 	andi	r2,r2,255
    18cc:	1885383a 	mul	r2,r3,r2
    18d0:	1007883a 	mov	r3,r2
    18d4:	e0bff20b 	ldhu	r2,-56(fp)
    18d8:	1885883a 	add	r2,r3,r2
    18dc:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[4] * grayscale[y*sobel_width+x];
    18e0:	d0a00017 	ldw	r2,-32768(gp)
    18e4:	10800104 	addi	r2,r2,4
    18e8:	10800003 	ldbu	r2,0(r2)
    18ec:	10c03fcc 	andi	r3,r2,255
    18f0:	18c0201c 	xori	r3,r3,128
    18f4:	18ffe004 	addi	r3,r3,-128
    18f8:	d126d317 	ldw	r4,-25780(gp)
    18fc:	e0bff417 	ldw	r2,-48(fp)
    1900:	2089383a 	mul	r4,r4,r2
    1904:	e0bff317 	ldw	r2,-52(fp)
    1908:	2085883a 	add	r2,r4,r2
    190c:	1009883a 	mov	r4,r2
    1910:	e0bffd17 	ldw	r2,-12(fp)
    1914:	1105883a 	add	r2,r2,r4
    1918:	10800003 	ldbu	r2,0(r2)
    191c:	10803fcc 	andi	r2,r2,255
    1920:	1885383a 	mul	r2,r3,r2
    1924:	1007883a 	mov	r3,r2
    1928:	e0bff20b 	ldhu	r2,-56(fp)
    192c:	1885883a 	add	r2,r3,r2
    1930:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[5] * grayscale[y*sobel_width+(x+1)];
    1934:	d0a00017 	ldw	r2,-32768(gp)
    1938:	10800144 	addi	r2,r2,5
    193c:	10800003 	ldbu	r2,0(r2)
    1940:	10c03fcc 	andi	r3,r2,255
    1944:	18c0201c 	xori	r3,r3,128
    1948:	18ffe004 	addi	r3,r3,-128
    194c:	d126d317 	ldw	r4,-25780(gp)
    1950:	e0bff417 	ldw	r2,-48(fp)
    1954:	2089383a 	mul	r4,r4,r2
    1958:	e0bff317 	ldw	r2,-52(fp)
    195c:	10800044 	addi	r2,r2,1
    1960:	2085883a 	add	r2,r4,r2
    1964:	1009883a 	mov	r4,r2
    1968:	e0bffd17 	ldw	r2,-12(fp)
    196c:	1105883a 	add	r2,r2,r4
    1970:	10800003 	ldbu	r2,0(r2)
    1974:	10803fcc 	andi	r2,r2,255
    1978:	1885383a 	mul	r2,r3,r2
    197c:	1007883a 	mov	r3,r2
    1980:	e0bff20b 	ldhu	r2,-56(fp)
    1984:	1885883a 	add	r2,r3,r2
    1988:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[6] * grayscale[(y+1)*sobel_width+(x-1)];
    198c:	d0a00017 	ldw	r2,-32768(gp)
    1990:	10800184 	addi	r2,r2,6
    1994:	10800003 	ldbu	r2,0(r2)
    1998:	10c03fcc 	andi	r3,r2,255
    199c:	18c0201c 	xori	r3,r3,128
    19a0:	18ffe004 	addi	r3,r3,-128
    19a4:	e0bff417 	ldw	r2,-48(fp)
    19a8:	11000044 	addi	r4,r2,1
    19ac:	d0a6d317 	ldw	r2,-25780(gp)
    19b0:	2089383a 	mul	r4,r4,r2
    19b4:	e0bff317 	ldw	r2,-52(fp)
    19b8:	10bfffc4 	addi	r2,r2,-1
    19bc:	2085883a 	add	r2,r4,r2
    19c0:	1009883a 	mov	r4,r2
    19c4:	e0bffd17 	ldw	r2,-12(fp)
    19c8:	1105883a 	add	r2,r2,r4
    19cc:	10800003 	ldbu	r2,0(r2)
    19d0:	10803fcc 	andi	r2,r2,255
    19d4:	1885383a 	mul	r2,r3,r2
    19d8:	1007883a 	mov	r3,r2
    19dc:	e0bff20b 	ldhu	r2,-56(fp)
    19e0:	1885883a 	add	r2,r3,r2
    19e4:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[7] * grayscale[(y+1)*sobel_width+x];
    19e8:	d0a00017 	ldw	r2,-32768(gp)
    19ec:	108001c4 	addi	r2,r2,7
    19f0:	10800003 	ldbu	r2,0(r2)
    19f4:	10c03fcc 	andi	r3,r2,255
    19f8:	18c0201c 	xori	r3,r3,128
    19fc:	18ffe004 	addi	r3,r3,-128
    1a00:	e0bff417 	ldw	r2,-48(fp)
    1a04:	11000044 	addi	r4,r2,1
    1a08:	d0a6d317 	ldw	r2,-25780(gp)
    1a0c:	2089383a 	mul	r4,r4,r2
    1a10:	e0bff317 	ldw	r2,-52(fp)
    1a14:	2085883a 	add	r2,r4,r2
    1a18:	1009883a 	mov	r4,r2
    1a1c:	e0bffd17 	ldw	r2,-12(fp)
    1a20:	1105883a 	add	r2,r2,r4
    1a24:	10800003 	ldbu	r2,0(r2)
    1a28:	10803fcc 	andi	r2,r2,255
    1a2c:	1885383a 	mul	r2,r3,r2
    1a30:	1007883a 	mov	r3,r2
    1a34:	e0bff20b 	ldhu	r2,-56(fp)
    1a38:	1885883a 	add	r2,r3,r2
    1a3c:	e0bff20d 	sth	r2,-56(fp)
                           result += pgx_array[8] * grayscale[(y+1)*sobel_width+(x+1)];
    1a40:	d0a00017 	ldw	r2,-32768(gp)
    1a44:	10800204 	addi	r2,r2,8
    1a48:	10800003 	ldbu	r2,0(r2)
    1a4c:	10c03fcc 	andi	r3,r2,255
    1a50:	18c0201c 	xori	r3,r3,128
    1a54:	18ffe004 	addi	r3,r3,-128
    1a58:	e0bff417 	ldw	r2,-48(fp)
    1a5c:	11000044 	addi	r4,r2,1
    1a60:	d0a6d317 	ldw	r2,-25780(gp)
    1a64:	2089383a 	mul	r4,r4,r2
    1a68:	e0bff317 	ldw	r2,-52(fp)
    1a6c:	10800044 	addi	r2,r2,1
    1a70:	2085883a 	add	r2,r4,r2
    1a74:	1009883a 	mov	r4,r2
    1a78:	e0bffd17 	ldw	r2,-12(fp)
    1a7c:	1105883a 	add	r2,r2,r4
    1a80:	10800003 	ldbu	r2,0(r2)
    1a84:	10803fcc 	andi	r2,r2,255
    1a88:	1885383a 	mul	r2,r3,r2
    1a8c:	1007883a 	mov	r3,r2
    1a90:	e0bff20b 	ldhu	r2,-56(fp)
    1a94:	1885883a 	add	r2,r3,r2
    1a98:	e0bff20d 	sth	r2,-56(fp)
                           sobel_x_result[y*sobel_width+x] = result; 	//sobel_mac(source,x,y,gx_array,sobel_width);
    1a9c:	d0e6d617 	ldw	r3,-25768(gp)
    1aa0:	d126d317 	ldw	r4,-25780(gp)
    1aa4:	e0bff417 	ldw	r2,-48(fp)
    1aa8:	2089383a 	mul	r4,r4,r2
    1aac:	e0bff317 	ldw	r2,-52(fp)
    1ab0:	2085883a 	add	r2,r4,r2
    1ab4:	1085883a 	add	r2,r2,r2
    1ab8:	1885883a 	add	r2,r3,r2
    1abc:	e0fff20b 	ldhu	r3,-56(fp)
    1ac0:	10c0000d 	sth	r3,0(r2)
                       start_sobel_x = alt_timestamp();
                       /* sobel_x function in-lining <=> replace: sobel_x(grayscale); */
                       short result = 0;
                       int x,y;
                       for (y = 1 ; y < (sobel_height-1) ; y++) {
                         for (x = 1 ; x < (sobel_width-1) ; x++) {
    1ac4:	e0bff317 	ldw	r2,-52(fp)
    1ac8:	10800044 	addi	r2,r2,1
    1acc:	e0bff315 	stw	r2,-52(fp)
    1ad0:	d0a6d317 	ldw	r2,-25780(gp)
    1ad4:	10bfffc4 	addi	r2,r2,-1
    1ad8:	e0fff317 	ldw	r3,-52(fp)
    1adc:	18bf2716 	blt	r3,r2,177c <__alt_data_end+0xff00177c>
                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
                       /* sobel_x function in-lining <=> replace: sobel_x(grayscale); */
                       short result = 0;
                       int x,y;
                       for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ae0:	e0bff417 	ldw	r2,-48(fp)
    1ae4:	10800044 	addi	r2,r2,1
    1ae8:	e0bff415 	stw	r2,-48(fp)
    1aec:	d0a6d517 	ldw	r2,-25772(gp)
    1af0:	10bfffc4 	addi	r2,r2,-1
    1af4:	e0fff417 	ldw	r3,-48(fp)
    1af8:	18bf1d16 	blt	r3,r2,1770 <__alt_data_end+0xff001770>
                           result += pgx_array[7] * grayscale[(y+1)*sobel_width+x];
                           result += pgx_array[8] * grayscale[(y+1)*sobel_width+(x+1)];
                           sobel_x_result[y*sobel_width+x] = result; 	//sobel_mac(source,x,y,gx_array,sobel_width);
                         }
                       } // end sobel_x in-lining
                       end_sobel_x = alt_timestamp();
    1afc:	00109f40 	call	109f4 <alt_timestamp>
    1b00:	e0bfeb15 	stw	r2,-84(fp)

                       alt_timestamp_start();
    1b04:	001097c0 	call	1097c <alt_timestamp_start>
                       start_sobel_y = alt_timestamp();
    1b08:	00109f40 	call	109f4 <alt_timestamp>
    1b0c:	e0bfec15 	stw	r2,-80(fp)
                       /* sobel_y function in-lining <=> replace: sobel_y(grayscale); */
                       result = 0;
    1b10:	e03ff20d 	sth	zero,-56(fp)
                       for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b14:	00800044 	movi	r2,1
    1b18:	e0bff415 	stw	r2,-48(fp)
    1b1c:	0000df06 	br	1e9c <main+0xbc4>
                         for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b20:	00800044 	movi	r2,1
    1b24:	e0bff315 	stw	r2,-52(fp)
    1b28:	0000d506 	br	1e80 <main+0xba8>
                           result += pgy_array[0] * grayscale[(y-1)*sobel_width+(x-1)];
    1b2c:	d0a00117 	ldw	r2,-32764(gp)
    1b30:	10800003 	ldbu	r2,0(r2)
    1b34:	10c03fcc 	andi	r3,r2,255
    1b38:	18c0201c 	xori	r3,r3,128
    1b3c:	18ffe004 	addi	r3,r3,-128
    1b40:	e0bff417 	ldw	r2,-48(fp)
    1b44:	113fffc4 	addi	r4,r2,-1
    1b48:	d0a6d317 	ldw	r2,-25780(gp)
    1b4c:	2089383a 	mul	r4,r4,r2
    1b50:	e0bff317 	ldw	r2,-52(fp)
    1b54:	10bfffc4 	addi	r2,r2,-1
    1b58:	2085883a 	add	r2,r4,r2
    1b5c:	1009883a 	mov	r4,r2
    1b60:	e0bffd17 	ldw	r2,-12(fp)
    1b64:	1105883a 	add	r2,r2,r4
    1b68:	10800003 	ldbu	r2,0(r2)
    1b6c:	10803fcc 	andi	r2,r2,255
    1b70:	1885383a 	mul	r2,r3,r2
    1b74:	1007883a 	mov	r3,r2
    1b78:	e0bff20b 	ldhu	r2,-56(fp)
    1b7c:	1885883a 	add	r2,r3,r2
    1b80:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[1] * grayscale[(y-1)*sobel_width+x];
    1b84:	d0a00117 	ldw	r2,-32764(gp)
    1b88:	10800044 	addi	r2,r2,1
    1b8c:	10800003 	ldbu	r2,0(r2)
    1b90:	10c03fcc 	andi	r3,r2,255
    1b94:	18c0201c 	xori	r3,r3,128
    1b98:	18ffe004 	addi	r3,r3,-128
    1b9c:	e0bff417 	ldw	r2,-48(fp)
    1ba0:	113fffc4 	addi	r4,r2,-1
    1ba4:	d0a6d317 	ldw	r2,-25780(gp)
    1ba8:	2089383a 	mul	r4,r4,r2
    1bac:	e0bff317 	ldw	r2,-52(fp)
    1bb0:	2085883a 	add	r2,r4,r2
    1bb4:	1009883a 	mov	r4,r2
    1bb8:	e0bffd17 	ldw	r2,-12(fp)
    1bbc:	1105883a 	add	r2,r2,r4
    1bc0:	10800003 	ldbu	r2,0(r2)
    1bc4:	10803fcc 	andi	r2,r2,255
    1bc8:	1885383a 	mul	r2,r3,r2
    1bcc:	1007883a 	mov	r3,r2
    1bd0:	e0bff20b 	ldhu	r2,-56(fp)
    1bd4:	1885883a 	add	r2,r3,r2
    1bd8:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[2] * grayscale[(y-1)*sobel_width+(x+1)];
    1bdc:	d0a00117 	ldw	r2,-32764(gp)
    1be0:	10800084 	addi	r2,r2,2
    1be4:	10800003 	ldbu	r2,0(r2)
    1be8:	10c03fcc 	andi	r3,r2,255
    1bec:	18c0201c 	xori	r3,r3,128
    1bf0:	18ffe004 	addi	r3,r3,-128
    1bf4:	e0bff417 	ldw	r2,-48(fp)
    1bf8:	113fffc4 	addi	r4,r2,-1
    1bfc:	d0a6d317 	ldw	r2,-25780(gp)
    1c00:	2089383a 	mul	r4,r4,r2
    1c04:	e0bff317 	ldw	r2,-52(fp)
    1c08:	10800044 	addi	r2,r2,1
    1c0c:	2085883a 	add	r2,r4,r2
    1c10:	1009883a 	mov	r4,r2
    1c14:	e0bffd17 	ldw	r2,-12(fp)
    1c18:	1105883a 	add	r2,r2,r4
    1c1c:	10800003 	ldbu	r2,0(r2)
    1c20:	10803fcc 	andi	r2,r2,255
    1c24:	1885383a 	mul	r2,r3,r2
    1c28:	1007883a 	mov	r3,r2
    1c2c:	e0bff20b 	ldhu	r2,-56(fp)
    1c30:	1885883a 	add	r2,r3,r2
    1c34:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[3] * grayscale[y*sobel_width+(x-1)];
    1c38:	d0a00117 	ldw	r2,-32764(gp)
    1c3c:	108000c4 	addi	r2,r2,3
    1c40:	10800003 	ldbu	r2,0(r2)
    1c44:	10c03fcc 	andi	r3,r2,255
    1c48:	18c0201c 	xori	r3,r3,128
    1c4c:	18ffe004 	addi	r3,r3,-128
    1c50:	d126d317 	ldw	r4,-25780(gp)
    1c54:	e0bff417 	ldw	r2,-48(fp)
    1c58:	2089383a 	mul	r4,r4,r2
    1c5c:	e0bff317 	ldw	r2,-52(fp)
    1c60:	10bfffc4 	addi	r2,r2,-1
    1c64:	2085883a 	add	r2,r4,r2
    1c68:	1009883a 	mov	r4,r2
    1c6c:	e0bffd17 	ldw	r2,-12(fp)
    1c70:	1105883a 	add	r2,r2,r4
    1c74:	10800003 	ldbu	r2,0(r2)
    1c78:	10803fcc 	andi	r2,r2,255
    1c7c:	1885383a 	mul	r2,r3,r2
    1c80:	1007883a 	mov	r3,r2
    1c84:	e0bff20b 	ldhu	r2,-56(fp)
    1c88:	1885883a 	add	r2,r3,r2
    1c8c:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[4] * grayscale[y*sobel_width+x];
    1c90:	d0a00117 	ldw	r2,-32764(gp)
    1c94:	10800104 	addi	r2,r2,4
    1c98:	10800003 	ldbu	r2,0(r2)
    1c9c:	10c03fcc 	andi	r3,r2,255
    1ca0:	18c0201c 	xori	r3,r3,128
    1ca4:	18ffe004 	addi	r3,r3,-128
    1ca8:	d126d317 	ldw	r4,-25780(gp)
    1cac:	e0bff417 	ldw	r2,-48(fp)
    1cb0:	2089383a 	mul	r4,r4,r2
    1cb4:	e0bff317 	ldw	r2,-52(fp)
    1cb8:	2085883a 	add	r2,r4,r2
    1cbc:	1009883a 	mov	r4,r2
    1cc0:	e0bffd17 	ldw	r2,-12(fp)
    1cc4:	1105883a 	add	r2,r2,r4
    1cc8:	10800003 	ldbu	r2,0(r2)
    1ccc:	10803fcc 	andi	r2,r2,255
    1cd0:	1885383a 	mul	r2,r3,r2
    1cd4:	1007883a 	mov	r3,r2
    1cd8:	e0bff20b 	ldhu	r2,-56(fp)
    1cdc:	1885883a 	add	r2,r3,r2
    1ce0:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[5] * grayscale[y*sobel_width+(x+1)];
    1ce4:	d0a00117 	ldw	r2,-32764(gp)
    1ce8:	10800144 	addi	r2,r2,5
    1cec:	10800003 	ldbu	r2,0(r2)
    1cf0:	10c03fcc 	andi	r3,r2,255
    1cf4:	18c0201c 	xori	r3,r3,128
    1cf8:	18ffe004 	addi	r3,r3,-128
    1cfc:	d126d317 	ldw	r4,-25780(gp)
    1d00:	e0bff417 	ldw	r2,-48(fp)
    1d04:	2089383a 	mul	r4,r4,r2
    1d08:	e0bff317 	ldw	r2,-52(fp)
    1d0c:	10800044 	addi	r2,r2,1
    1d10:	2085883a 	add	r2,r4,r2
    1d14:	1009883a 	mov	r4,r2
    1d18:	e0bffd17 	ldw	r2,-12(fp)
    1d1c:	1105883a 	add	r2,r2,r4
    1d20:	10800003 	ldbu	r2,0(r2)
    1d24:	10803fcc 	andi	r2,r2,255
    1d28:	1885383a 	mul	r2,r3,r2
    1d2c:	1007883a 	mov	r3,r2
    1d30:	e0bff20b 	ldhu	r2,-56(fp)
    1d34:	1885883a 	add	r2,r3,r2
    1d38:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[6] * grayscale[(y+1)*sobel_width+(x-1)];
    1d3c:	d0a00117 	ldw	r2,-32764(gp)
    1d40:	10800184 	addi	r2,r2,6
    1d44:	10800003 	ldbu	r2,0(r2)
    1d48:	10c03fcc 	andi	r3,r2,255
    1d4c:	18c0201c 	xori	r3,r3,128
    1d50:	18ffe004 	addi	r3,r3,-128
    1d54:	e0bff417 	ldw	r2,-48(fp)
    1d58:	11000044 	addi	r4,r2,1
    1d5c:	d0a6d317 	ldw	r2,-25780(gp)
    1d60:	2089383a 	mul	r4,r4,r2
    1d64:	e0bff317 	ldw	r2,-52(fp)
    1d68:	10bfffc4 	addi	r2,r2,-1
    1d6c:	2085883a 	add	r2,r4,r2
    1d70:	1009883a 	mov	r4,r2
    1d74:	e0bffd17 	ldw	r2,-12(fp)
    1d78:	1105883a 	add	r2,r2,r4
    1d7c:	10800003 	ldbu	r2,0(r2)
    1d80:	10803fcc 	andi	r2,r2,255
    1d84:	1885383a 	mul	r2,r3,r2
    1d88:	1007883a 	mov	r3,r2
    1d8c:	e0bff20b 	ldhu	r2,-56(fp)
    1d90:	1885883a 	add	r2,r3,r2
    1d94:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[7] * grayscale[(y+1)*sobel_width+x];
    1d98:	d0a00117 	ldw	r2,-32764(gp)
    1d9c:	108001c4 	addi	r2,r2,7
    1da0:	10800003 	ldbu	r2,0(r2)
    1da4:	10c03fcc 	andi	r3,r2,255
    1da8:	18c0201c 	xori	r3,r3,128
    1dac:	18ffe004 	addi	r3,r3,-128
    1db0:	e0bff417 	ldw	r2,-48(fp)
    1db4:	11000044 	addi	r4,r2,1
    1db8:	d0a6d317 	ldw	r2,-25780(gp)
    1dbc:	2089383a 	mul	r4,r4,r2
    1dc0:	e0bff317 	ldw	r2,-52(fp)
    1dc4:	2085883a 	add	r2,r4,r2
    1dc8:	1009883a 	mov	r4,r2
    1dcc:	e0bffd17 	ldw	r2,-12(fp)
    1dd0:	1105883a 	add	r2,r2,r4
    1dd4:	10800003 	ldbu	r2,0(r2)
    1dd8:	10803fcc 	andi	r2,r2,255
    1ddc:	1885383a 	mul	r2,r3,r2
    1de0:	1007883a 	mov	r3,r2
    1de4:	e0bff20b 	ldhu	r2,-56(fp)
    1de8:	1885883a 	add	r2,r3,r2
    1dec:	e0bff20d 	sth	r2,-56(fp)
                           result += pgy_array[8] * grayscale[(y+1)*sobel_width+(x+1)];
    1df0:	d0a00117 	ldw	r2,-32764(gp)
    1df4:	10800204 	addi	r2,r2,8
    1df8:	10800003 	ldbu	r2,0(r2)
    1dfc:	10c03fcc 	andi	r3,r2,255
    1e00:	18c0201c 	xori	r3,r3,128
    1e04:	18ffe004 	addi	r3,r3,-128
    1e08:	e0bff417 	ldw	r2,-48(fp)
    1e0c:	11000044 	addi	r4,r2,1
    1e10:	d0a6d317 	ldw	r2,-25780(gp)
    1e14:	2089383a 	mul	r4,r4,r2
    1e18:	e0bff317 	ldw	r2,-52(fp)
    1e1c:	10800044 	addi	r2,r2,1
    1e20:	2085883a 	add	r2,r4,r2
    1e24:	1009883a 	mov	r4,r2
    1e28:	e0bffd17 	ldw	r2,-12(fp)
    1e2c:	1105883a 	add	r2,r2,r4
    1e30:	10800003 	ldbu	r2,0(r2)
    1e34:	10803fcc 	andi	r2,r2,255
    1e38:	1885383a 	mul	r2,r3,r2
    1e3c:	1007883a 	mov	r3,r2
    1e40:	e0bff20b 	ldhu	r2,-56(fp)
    1e44:	1885883a 	add	r2,r3,r2
    1e48:	e0bff20d 	sth	r2,-56(fp)
                           sobel_y_result[y*sobel_width+x] = result; 	//sobel_mac(source,x,y,gy_array,sobel_width);
    1e4c:	d0e6d717 	ldw	r3,-25764(gp)
    1e50:	d126d317 	ldw	r4,-25780(gp)
    1e54:	e0bff417 	ldw	r2,-48(fp)
    1e58:	2089383a 	mul	r4,r4,r2
    1e5c:	e0bff317 	ldw	r2,-52(fp)
    1e60:	2085883a 	add	r2,r4,r2
    1e64:	1085883a 	add	r2,r2,r2
    1e68:	1885883a 	add	r2,r3,r2
    1e6c:	e0fff20b 	ldhu	r3,-56(fp)
    1e70:	10c0000d 	sth	r3,0(r2)
                       alt_timestamp_start();
                       start_sobel_y = alt_timestamp();
                       /* sobel_y function in-lining <=> replace: sobel_y(grayscale); */
                       result = 0;
                       for (y = 1 ; y < (sobel_height-1) ; y++) {
                         for (x = 1 ; x < (sobel_width-1) ; x++) {
    1e74:	e0bff317 	ldw	r2,-52(fp)
    1e78:	10800044 	addi	r2,r2,1
    1e7c:	e0bff315 	stw	r2,-52(fp)
    1e80:	d0a6d317 	ldw	r2,-25780(gp)
    1e84:	10bfffc4 	addi	r2,r2,-1
    1e88:	e0fff317 	ldw	r3,-52(fp)
    1e8c:	18bf2716 	blt	r3,r2,1b2c <__alt_data_end+0xff001b2c>

                       alt_timestamp_start();
                       start_sobel_y = alt_timestamp();
                       /* sobel_y function in-lining <=> replace: sobel_y(grayscale); */
                       result = 0;
                       for (y = 1 ; y < (sobel_height-1) ; y++) {
    1e90:	e0bff417 	ldw	r2,-48(fp)
    1e94:	10800044 	addi	r2,r2,1
    1e98:	e0bff415 	stw	r2,-48(fp)
    1e9c:	d0a6d517 	ldw	r2,-25772(gp)
    1ea0:	10bfffc4 	addi	r2,r2,-1
    1ea4:	e0fff417 	ldw	r3,-48(fp)
    1ea8:	18bf1d16 	blt	r3,r2,1b20 <__alt_data_end+0xff001b20>
                           result += pgy_array[7] * grayscale[(y+1)*sobel_width+x];
                           result += pgy_array[8] * grayscale[(y+1)*sobel_width+(x+1)];
                           sobel_y_result[y*sobel_width+x] = result; 	//sobel_mac(source,x,y,gy_array,sobel_width);
                         }
                       } // end sobel_y in-lining
                       end_sobel_y = alt_timestamp();
    1eac:	00109f40 	call	109f4 <alt_timestamp>
    1eb0:	e0bfed15 	stw	r2,-76(fp)

                       alt_timestamp_start();
    1eb4:	001097c0 	call	1097c <alt_timestamp_start>
                       start_sobel_th = alt_timestamp();
    1eb8:	00109f40 	call	109f4 <alt_timestamp>
    1ebc:	e0bfee15 	stw	r2,-72(fp)
                       sobel_threshold(128);
    1ec0:	01002004 	movi	r4,128
    1ec4:	00028bc0 	call	28bc <sobel_threshold>
                       end_sobel_th = alt_timestamp();
    1ec8:	00109f40 	call	109f4 <alt_timestamp>
    1ecc:	e0bfef15 	stw	r2,-68(fp)
                       grayscale=GetSobelResult();
    1ed0:	00029f00 	call	29f0 <GetSobelResult>
    1ed4:	e0bffd15 	stw	r2,-12(fp)
		               transfer_LCD_with_dma(&grayscale[16520],
    1ed8:	e0bffd17 	ldw	r2,-12(fp)
    1edc:	14102204 	addi	r16,r2,16520
		      		                	cam_get_xsize()>>1,
    1ee0:	00007640 	call	764 <cam_get_xsize>
                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1ee4:	10bfffcc 	andi	r2,r2,65535
    1ee8:	1004d07a 	srli	r2,r2,1
    1eec:	147fffcc 	andi	r17,r2,65535
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
    1ef0:	00007b00 	call	7b0 <cam_get_ysize>
                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1ef4:	10bfffcc 	andi	r2,r2,65535
    1ef8:	01c00044 	movi	r7,1
    1efc:	100d883a 	mov	r6,r2
    1f00:	880b883a 	mov	r5,r17
    1f04:	8009883a 	mov	r4,r16
    1f08:	00012100 	call	1210 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1f0c:	e0bffb03 	ldbu	r2,-20(fp)
    1f10:	10803fcc 	andi	r2,r2,255
    1f14:	1080201c 	xori	r2,r2,128
    1f18:	10bfe004 	addi	r2,r2,-128
    1f1c:	10000d0e 	bge	r2,zero,1f54 <main+0xc7c>
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1f20:	01000604 	movi	r4,24
    1f24:	0002a440 	call	2a44 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1f28:	e13ffd17 	ldw	r4,-12(fp)
    1f2c:	0002a100 	call	2a10 <vga_set_pointer>
		      	  	   }
		      	  	   break;
    1f30:	00000806 	br	1f54 <main+0xc7c>
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    1f34:	0001883a 	nop
    1f38:	00000706 	br	1f58 <main+0xc80>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    1f3c:	0001883a 	nop
    1f40:	00000506 	br	1f58 <main+0xc80>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    1f44:	0001883a 	nop
    1f48:	00000306 	br	1f58 <main+0xc80>
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
    1f4c:	0001883a 	nop
    1f50:	00000106 	br	1f58 <main+0xc80>
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
    1f54:	0001883a 	nop
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1f58:	01000074 	movhi	r4,1
    1f5c:	21089004 	addi	r4,r4,8768
    1f60:	00035900 	call	3590 <puts>
		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
    1f64:	e0ffeb17 	ldw	r3,-84(fp)
    1f68:	e0bfea17 	ldw	r2,-88(fp)
    1f6c:	1885c83a 	sub	r2,r3,r2
    1f70:	100b883a 	mov	r5,r2
    1f74:	01000074 	movhi	r4,1
    1f78:	21089804 	addi	r4,r4,8800
    1f7c:	00034940 	call	3494 <printf>
		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
    1f80:	e0ffed17 	ldw	r3,-76(fp)
    1f84:	e0bfec17 	ldw	r2,-80(fp)
    1f88:	1885c83a 	sub	r2,r3,r2
    1f8c:	100b883a 	mov	r5,r2
    1f90:	01000074 	movhi	r4,1
    1f94:	21089e04 	addi	r4,r4,8824
    1f98:	00034940 	call	3494 <printf>
		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
    1f9c:	e0ffef17 	ldw	r3,-68(fp)
    1fa0:	e0bfee17 	ldw	r2,-72(fp)
    1fa4:	1885c83a 	sub	r2,r3,r2
    1fa8:	100b883a 	mov	r5,r2
    1fac:	01000074 	movhi	r4,1
    1fb0:	2108a404 	addi	r4,r4,8848
    1fb4:	00034940 	call	3494 <printf>
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    1fb8:	e0fff117 	ldw	r3,-60(fp)
    1fbc:	e0bff017 	ldw	r2,-64(fp)
    1fc0:	1885c83a 	sub	r2,r3,r2
    1fc4:	100b883a 	mov	r5,r2
    1fc8:	01000074 	movhi	r4,1
    1fcc:	2108aa04 	addi	r4,r4,8872
    1fd0:	00034940 	call	3494 <printf>

		      //while(wait_cnt < max_wait) { wait_cnt++; }

		      // reset timervalues
		      start_sobel_x = 0;
    1fd4:	e03fea15 	stw	zero,-88(fp)
		      end_sobel_x = 0;
    1fd8:	e03feb15 	stw	zero,-84(fp)
			  start_sobel_y = 0;
    1fdc:	e03fec15 	stw	zero,-80(fp)
			  end_sobel_y = 0;
    1fe0:	e03fed15 	stw	zero,-76(fp)
			  start_sobel_th = 0;
    1fe4:	e03fee15 	stw	zero,-72(fp)
			  end_sobel_th = 0;
    1fe8:	e03fef15 	stw	zero,-68(fp)
			  start_grayscale = 0;
    1fec:	e03ff015 	stw	zero,-64(fp)
			  end_grayscale = 0;
    1ff0:	e03ff115 	stw	zero,-60(fp)
			  wait_cnt = 0;
    1ff4:	e03ff515 	stw	zero,-44(fp)
		  }
	  }
  } while (1);
    1ff8:	003d0706 	br	1418 <__alt_data_end+0xff001418>

00001ffc <init_sobel_arrays>:
                  {-1,0,1}};
const char gy_array[3][3] = { {1, 2, 1},
                   {0, 0, 0},
                   {-1,-2,-1}};

void init_sobel_arrays(int width , int height) {
    1ffc:	defffb04 	addi	sp,sp,-20
    2000:	dfc00415 	stw	ra,16(sp)
    2004:	df000315 	stw	fp,12(sp)
    2008:	df000304 	addi	fp,sp,12
    200c:	e13ffe15 	stw	r4,-8(fp)
    2010:	e17fff15 	stw	r5,-4(fp)
	int loop;
	sobel_width = width;
    2014:	e0bffe17 	ldw	r2,-8(fp)
    2018:	d0a6d315 	stw	r2,-25780(gp)
	sobel_height = height;
    201c:	e0bfff17 	ldw	r2,-4(fp)
    2020:	d0a6d515 	stw	r2,-25772(gp)
	if (sobel_x_result != NULL)
    2024:	d0a6d617 	ldw	r2,-25768(gp)
    2028:	10000326 	beq	r2,zero,2038 <init_sobel_arrays+0x3c>
		free(sobel_x_result);
    202c:	d0a6d617 	ldw	r2,-25768(gp)
    2030:	1009883a 	mov	r4,r2
    2034:	0002c440 	call	2c44 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    2038:	e0fffe17 	ldw	r3,-8(fp)
    203c:	e0bfff17 	ldw	r2,-4(fp)
    2040:	1885383a 	mul	r2,r3,r2
    2044:	1085883a 	add	r2,r2,r2
    2048:	1009883a 	mov	r4,r2
    204c:	0002c300 	call	2c30 <malloc>
    2050:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    2054:	d0a6d717 	ldw	r2,-25764(gp)
    2058:	10000326 	beq	r2,zero,2068 <init_sobel_arrays+0x6c>
		free(sobel_y_result);
    205c:	d0a6d717 	ldw	r2,-25764(gp)
    2060:	1009883a 	mov	r4,r2
    2064:	0002c440 	call	2c44 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    2068:	e0fffe17 	ldw	r3,-8(fp)
    206c:	e0bfff17 	ldw	r2,-4(fp)
    2070:	1885383a 	mul	r2,r3,r2
    2074:	1085883a 	add	r2,r2,r2
    2078:	1009883a 	mov	r4,r2
    207c:	0002c300 	call	2c30 <malloc>
    2080:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    2084:	d0a6d417 	ldw	r2,-25776(gp)
    2088:	10000326 	beq	r2,zero,2098 <init_sobel_arrays+0x9c>
		free(sobel_result);
    208c:	d0a6d417 	ldw	r2,-25776(gp)
    2090:	1009883a 	mov	r4,r2
    2094:	0002c440 	call	2c44 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    2098:	e0fffe17 	ldw	r3,-8(fp)
    209c:	e0bfff17 	ldw	r2,-4(fp)
    20a0:	1885383a 	mul	r2,r3,r2
    20a4:	1009883a 	mov	r4,r2
    20a8:	0002c300 	call	2c30 <malloc>
    20ac:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    20b0:	d0a6d817 	ldw	r2,-25760(gp)
    20b4:	10000326 	beq	r2,zero,20c4 <init_sobel_arrays+0xc8>
		free(sobel_rgb565);
    20b8:	d0a6d817 	ldw	r2,-25760(gp)
    20bc:	1009883a 	mov	r4,r2
    20c0:	0002c440 	call	2c44 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    20c4:	e0fffe17 	ldw	r3,-8(fp)
    20c8:	e0bfff17 	ldw	r2,-4(fp)
    20cc:	1885383a 	mul	r2,r3,r2
    20d0:	1085883a 	add	r2,r2,r2
    20d4:	1009883a 	mov	r4,r2
    20d8:	0002c300 	call	2c30 <malloc>
    20dc:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    20e0:	e03ffd15 	stw	zero,-12(fp)
    20e4:	00001606 	br	2140 <init_sobel_arrays+0x144>
		sobel_x_result[loop] = 0;
    20e8:	d0e6d617 	ldw	r3,-25768(gp)
    20ec:	e0bffd17 	ldw	r2,-12(fp)
    20f0:	1085883a 	add	r2,r2,r2
    20f4:	1885883a 	add	r2,r3,r2
    20f8:	1000000d 	sth	zero,0(r2)
		sobel_y_result[loop] = 0;
    20fc:	d0e6d717 	ldw	r3,-25764(gp)
    2100:	e0bffd17 	ldw	r2,-12(fp)
    2104:	1085883a 	add	r2,r2,r2
    2108:	1885883a 	add	r2,r3,r2
    210c:	1000000d 	sth	zero,0(r2)
		sobel_result[loop] = 0;
    2110:	d0e6d417 	ldw	r3,-25776(gp)
    2114:	e0bffd17 	ldw	r2,-12(fp)
    2118:	1885883a 	add	r2,r3,r2
    211c:	10000005 	stb	zero,0(r2)
		sobel_rgb565[loop] = 0;
    2120:	d0e6d817 	ldw	r3,-25760(gp)
    2124:	e0bffd17 	ldw	r2,-12(fp)
    2128:	1085883a 	add	r2,r2,r2
    212c:	1885883a 	add	r2,r3,r2
    2130:	1000000d 	sth	zero,0(r2)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    2134:	e0bffd17 	ldw	r2,-12(fp)
    2138:	10800044 	addi	r2,r2,1
    213c:	e0bffd15 	stw	r2,-12(fp)
    2140:	e0fffe17 	ldw	r3,-8(fp)
    2144:	e0bfff17 	ldw	r2,-4(fp)
    2148:	1885383a 	mul	r2,r3,r2
    214c:	e0fffd17 	ldw	r3,-12(fp)
    2150:	18bfe516 	blt	r3,r2,20e8 <__alt_data_end+0xff0020e8>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    2154:	0001883a 	nop
    2158:	e037883a 	mov	sp,fp
    215c:	dfc00117 	ldw	ra,4(sp)
    2160:	df000017 	ldw	fp,0(sp)
    2164:	dec00204 	addi	sp,sp,8
    2168:	f800283a 	ret

0000216c <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    216c:	defffa04 	addi	sp,sp,-24
    2170:	df000515 	stw	fp,20(sp)
    2174:	df000504 	addi	fp,sp,20
    2178:	e13ffc15 	stw	r4,-16(fp)
    217c:	e17ffd15 	stw	r5,-12(fp)
    2180:	e1bffe15 	stw	r6,-8(fp)
    2184:	e1ffff15 	stw	r7,-4(fp)
	short result = 0;
    2188:	e03ffb0d 	sth	zero,-20(fp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    218c:	e0bfff17 	ldw	r2,-4(fp)
    2190:	10800003 	ldbu	r2,0(r2)
    2194:	10c03fcc 	andi	r3,r2,255
    2198:	18c0201c 	xori	r3,r3,128
    219c:	18ffe004 	addi	r3,r3,-128
    21a0:	e0bffe17 	ldw	r2,-8(fp)
    21a4:	10bfffc4 	addi	r2,r2,-1
    21a8:	1009883a 	mov	r4,r2
    21ac:	e0800117 	ldw	r2,4(fp)
    21b0:	2089383a 	mul	r4,r4,r2
    21b4:	e0bffd17 	ldw	r2,-12(fp)
    21b8:	2085883a 	add	r2,r4,r2
    21bc:	10bfffc4 	addi	r2,r2,-1
    21c0:	e13ffc17 	ldw	r4,-16(fp)
    21c4:	2085883a 	add	r2,r4,r2
    21c8:	10800003 	ldbu	r2,0(r2)
    21cc:	10803fcc 	andi	r2,r2,255
    21d0:	1885383a 	mul	r2,r3,r2
    21d4:	1007883a 	mov	r3,r2
    21d8:	e0bffb0b 	ldhu	r2,-20(fp)
    21dc:	1885883a 	add	r2,r3,r2
    21e0:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    21e4:	e0bfff17 	ldw	r2,-4(fp)
    21e8:	10800044 	addi	r2,r2,1
    21ec:	10800003 	ldbu	r2,0(r2)
    21f0:	10c03fcc 	andi	r3,r2,255
    21f4:	18c0201c 	xori	r3,r3,128
    21f8:	18ffe004 	addi	r3,r3,-128
    21fc:	e0bffe17 	ldw	r2,-8(fp)
    2200:	10bfffc4 	addi	r2,r2,-1
    2204:	1009883a 	mov	r4,r2
    2208:	e0800117 	ldw	r2,4(fp)
    220c:	2089383a 	mul	r4,r4,r2
    2210:	e0bffd17 	ldw	r2,-12(fp)
    2214:	2085883a 	add	r2,r4,r2
    2218:	e13ffc17 	ldw	r4,-16(fp)
    221c:	2085883a 	add	r2,r4,r2
    2220:	10800003 	ldbu	r2,0(r2)
    2224:	10803fcc 	andi	r2,r2,255
    2228:	1885383a 	mul	r2,r3,r2
    222c:	1007883a 	mov	r3,r2
    2230:	e0bffb0b 	ldhu	r2,-20(fp)
    2234:	1885883a 	add	r2,r3,r2
    2238:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
    223c:	e0bfff17 	ldw	r2,-4(fp)
    2240:	10800084 	addi	r2,r2,2
    2244:	10800003 	ldbu	r2,0(r2)
    2248:	10c03fcc 	andi	r3,r2,255
    224c:	18c0201c 	xori	r3,r3,128
    2250:	18ffe004 	addi	r3,r3,-128
    2254:	e0bffe17 	ldw	r2,-8(fp)
    2258:	10bfffc4 	addi	r2,r2,-1
    225c:	1009883a 	mov	r4,r2
    2260:	e0800117 	ldw	r2,4(fp)
    2264:	2089383a 	mul	r4,r4,r2
    2268:	e0bffd17 	ldw	r2,-12(fp)
    226c:	2085883a 	add	r2,r4,r2
    2270:	10800044 	addi	r2,r2,1
    2274:	e13ffc17 	ldw	r4,-16(fp)
    2278:	2085883a 	add	r2,r4,r2
    227c:	10800003 	ldbu	r2,0(r2)
    2280:	10803fcc 	andi	r2,r2,255
    2284:	1885383a 	mul	r2,r3,r2
    2288:	1007883a 	mov	r3,r2
    228c:	e0bffb0b 	ldhu	r2,-20(fp)
    2290:	1885883a 	add	r2,r3,r2
    2294:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    2298:	e0bfff17 	ldw	r2,-4(fp)
    229c:	108000c4 	addi	r2,r2,3
    22a0:	10800003 	ldbu	r2,0(r2)
    22a4:	10c03fcc 	andi	r3,r2,255
    22a8:	18c0201c 	xori	r3,r3,128
    22ac:	18ffe004 	addi	r3,r3,-128
    22b0:	e13ffe17 	ldw	r4,-8(fp)
    22b4:	e0800117 	ldw	r2,4(fp)
    22b8:	2089383a 	mul	r4,r4,r2
    22bc:	e0bffd17 	ldw	r2,-12(fp)
    22c0:	2085883a 	add	r2,r4,r2
    22c4:	10bfffc4 	addi	r2,r2,-1
    22c8:	e13ffc17 	ldw	r4,-16(fp)
    22cc:	2085883a 	add	r2,r4,r2
    22d0:	10800003 	ldbu	r2,0(r2)
    22d4:	10803fcc 	andi	r2,r2,255
    22d8:	1885383a 	mul	r2,r3,r2
    22dc:	1007883a 	mov	r3,r2
    22e0:	e0bffb0b 	ldhu	r2,-20(fp)
    22e4:	1885883a 	add	r2,r3,r2
    22e8:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
    22ec:	e0bfff17 	ldw	r2,-4(fp)
    22f0:	10800104 	addi	r2,r2,4
    22f4:	10800003 	ldbu	r2,0(r2)
    22f8:	10c03fcc 	andi	r3,r2,255
    22fc:	18c0201c 	xori	r3,r3,128
    2300:	18ffe004 	addi	r3,r3,-128
    2304:	e13ffe17 	ldw	r4,-8(fp)
    2308:	e0800117 	ldw	r2,4(fp)
    230c:	2089383a 	mul	r4,r4,r2
    2310:	e0bffd17 	ldw	r2,-12(fp)
    2314:	2085883a 	add	r2,r4,r2
    2318:	e13ffc17 	ldw	r4,-16(fp)
    231c:	2085883a 	add	r2,r4,r2
    2320:	10800003 	ldbu	r2,0(r2)
    2324:	10803fcc 	andi	r2,r2,255
    2328:	1885383a 	mul	r2,r3,r2
    232c:	1007883a 	mov	r3,r2
    2330:	e0bffb0b 	ldhu	r2,-20(fp)
    2334:	1885883a 	add	r2,r3,r2
    2338:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
    233c:	e0bfff17 	ldw	r2,-4(fp)
    2340:	10800144 	addi	r2,r2,5
    2344:	10800003 	ldbu	r2,0(r2)
    2348:	10c03fcc 	andi	r3,r2,255
    234c:	18c0201c 	xori	r3,r3,128
    2350:	18ffe004 	addi	r3,r3,-128
    2354:	e13ffe17 	ldw	r4,-8(fp)
    2358:	e0800117 	ldw	r2,4(fp)
    235c:	2089383a 	mul	r4,r4,r2
    2360:	e0bffd17 	ldw	r2,-12(fp)
    2364:	2085883a 	add	r2,r4,r2
    2368:	10800044 	addi	r2,r2,1
    236c:	e13ffc17 	ldw	r4,-16(fp)
    2370:	2085883a 	add	r2,r4,r2
    2374:	10800003 	ldbu	r2,0(r2)
    2378:	10803fcc 	andi	r2,r2,255
    237c:	1885383a 	mul	r2,r3,r2
    2380:	1007883a 	mov	r3,r2
    2384:	e0bffb0b 	ldhu	r2,-20(fp)
    2388:	1885883a 	add	r2,r3,r2
    238c:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    2390:	e0bfff17 	ldw	r2,-4(fp)
    2394:	10800184 	addi	r2,r2,6
    2398:	10800003 	ldbu	r2,0(r2)
    239c:	10c03fcc 	andi	r3,r2,255
    23a0:	18c0201c 	xori	r3,r3,128
    23a4:	18ffe004 	addi	r3,r3,-128
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	10800044 	addi	r2,r2,1
    23b0:	1009883a 	mov	r4,r2
    23b4:	e0800117 	ldw	r2,4(fp)
    23b8:	2089383a 	mul	r4,r4,r2
    23bc:	e0bffd17 	ldw	r2,-12(fp)
    23c0:	2085883a 	add	r2,r4,r2
    23c4:	10bfffc4 	addi	r2,r2,-1
    23c8:	e13ffc17 	ldw	r4,-16(fp)
    23cc:	2085883a 	add	r2,r4,r2
    23d0:	10800003 	ldbu	r2,0(r2)
    23d4:	10803fcc 	andi	r2,r2,255
    23d8:	1885383a 	mul	r2,r3,r2
    23dc:	1007883a 	mov	r3,r2
    23e0:	e0bffb0b 	ldhu	r2,-20(fp)
    23e4:	1885883a 	add	r2,r3,r2
    23e8:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    23ec:	e0bfff17 	ldw	r2,-4(fp)
    23f0:	108001c4 	addi	r2,r2,7
    23f4:	10800003 	ldbu	r2,0(r2)
    23f8:	10c03fcc 	andi	r3,r2,255
    23fc:	18c0201c 	xori	r3,r3,128
    2400:	18ffe004 	addi	r3,r3,-128
    2404:	e0bffe17 	ldw	r2,-8(fp)
    2408:	10800044 	addi	r2,r2,1
    240c:	1009883a 	mov	r4,r2
    2410:	e0800117 	ldw	r2,4(fp)
    2414:	2089383a 	mul	r4,r4,r2
    2418:	e0bffd17 	ldw	r2,-12(fp)
    241c:	2085883a 	add	r2,r4,r2
    2420:	e13ffc17 	ldw	r4,-16(fp)
    2424:	2085883a 	add	r2,r4,r2
    2428:	10800003 	ldbu	r2,0(r2)
    242c:	10803fcc 	andi	r2,r2,255
    2430:	1885383a 	mul	r2,r3,r2
    2434:	1007883a 	mov	r3,r2
    2438:	e0bffb0b 	ldhu	r2,-20(fp)
    243c:	1885883a 	add	r2,r3,r2
    2440:	e0bffb0d 	sth	r2,-20(fp)
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    2444:	e0bfff17 	ldw	r2,-4(fp)
    2448:	10800204 	addi	r2,r2,8
    244c:	10800003 	ldbu	r2,0(r2)
    2450:	10c03fcc 	andi	r3,r2,255
    2454:	18c0201c 	xori	r3,r3,128
    2458:	18ffe004 	addi	r3,r3,-128
    245c:	e0bffe17 	ldw	r2,-8(fp)
    2460:	10800044 	addi	r2,r2,1
    2464:	1009883a 	mov	r4,r2
    2468:	e0800117 	ldw	r2,4(fp)
    246c:	2089383a 	mul	r4,r4,r2
    2470:	e0bffd17 	ldw	r2,-12(fp)
    2474:	2085883a 	add	r2,r4,r2
    2478:	10800044 	addi	r2,r2,1
    247c:	e13ffc17 	ldw	r4,-16(fp)
    2480:	2085883a 	add	r2,r4,r2
    2484:	10800003 	ldbu	r2,0(r2)
    2488:	10803fcc 	andi	r2,r2,255
    248c:	1885383a 	mul	r2,r3,r2
    2490:	1007883a 	mov	r3,r2
    2494:	e0bffb0b 	ldhu	r2,-20(fp)
    2498:	1885883a 	add	r2,r3,r2
    249c:	e0bffb0d 	sth	r2,-20(fp)
	return result;
    24a0:	e0bffb0b 	ldhu	r2,-20(fp)
}
    24a4:	e037883a 	mov	sp,fp
    24a8:	df000017 	ldw	fp,0(sp)
    24ac:	dec00104 	addi	sp,sp,4
    24b0:	f800283a 	ret

000024b4 <sobel_x>:

void sobel_x( unsigned char *source ) {
    24b4:	defff904 	addi	sp,sp,-28
    24b8:	dfc00615 	stw	ra,24(sp)
    24bc:	df000515 	stw	fp,20(sp)
    24c0:	dc000415 	stw	r16,16(sp)
    24c4:	df000504 	addi	fp,sp,20
    24c8:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    24cc:	00800044 	movi	r2,1
    24d0:	e0bffd15 	stw	r2,-12(fp)
    24d4:	00001e06 	br	2550 <sobel_x+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    24d8:	00800044 	movi	r2,1
    24dc:	e0bffc15 	stw	r2,-16(fp)
    24e0:	00001406 	br	2534 <sobel_x+0x80>
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    24e4:	d0e6d617 	ldw	r3,-25768(gp)
    24e8:	d126d317 	ldw	r4,-25780(gp)
    24ec:	e0bffd17 	ldw	r2,-12(fp)
    24f0:	2089383a 	mul	r4,r4,r2
    24f4:	e0bffc17 	ldw	r2,-16(fp)
    24f8:	2085883a 	add	r2,r4,r2
    24fc:	1085883a 	add	r2,r2,r2
    2500:	18a1883a 	add	r16,r3,r2
    2504:	d0a6d317 	ldw	r2,-25780(gp)
    2508:	d8800015 	stw	r2,0(sp)
    250c:	01c00074 	movhi	r7,1
    2510:	39c8afc4 	addi	r7,r7,8895
    2514:	e1bffd17 	ldw	r6,-12(fp)
    2518:	e17ffc17 	ldw	r5,-16(fp)
    251c:	e13ffe17 	ldw	r4,-8(fp)
    2520:	000216c0 	call	216c <sobel_mac>
    2524:	8080000d 	sth	r2,0(r16)

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2528:	e0bffc17 	ldw	r2,-16(fp)
    252c:	10800044 	addi	r2,r2,1
    2530:	e0bffc15 	stw	r2,-16(fp)
    2534:	d0a6d317 	ldw	r2,-25780(gp)
    2538:	10bfffc4 	addi	r2,r2,-1
    253c:	e0fffc17 	ldw	r3,-16(fp)
    2540:	18bfe816 	blt	r3,r2,24e4 <__alt_data_end+0xff0024e4>
}

void sobel_x( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2544:	e0bffd17 	ldw	r2,-12(fp)
    2548:	10800044 	addi	r2,r2,1
    254c:	e0bffd15 	stw	r2,-12(fp)
    2550:	d0a6d517 	ldw	r2,-25772(gp)
    2554:	10bfffc4 	addi	r2,r2,-1
    2558:	e0fffd17 	ldw	r3,-12(fp)
    255c:	18bfde16 	blt	r3,r2,24d8 <__alt_data_end+0xff0024d8>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
      }
   }
}
    2560:	0001883a 	nop
    2564:	e6ffff04 	addi	sp,fp,-4
    2568:	dfc00217 	ldw	ra,8(sp)
    256c:	df000117 	ldw	fp,4(sp)
    2570:	dc000017 	ldw	r16,0(sp)
    2574:	dec00304 	addi	sp,sp,12
    2578:	f800283a 	ret

0000257c <sobel_x_with_rgb>:

void sobel_x_with_rgb( unsigned char *source ) {
    257c:	defff904 	addi	sp,sp,-28
    2580:	dfc00615 	stw	ra,24(sp)
    2584:	df000515 	stw	fp,20(sp)
    2588:	df000504 	addi	fp,sp,20
    258c:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2590:	00800044 	movi	r2,1
    2594:	e0bffd15 	stw	r2,-12(fp)
    2598:	00003d06 	br	2690 <sobel_x_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    259c:	00800044 	movi	r2,1
    25a0:	e0bffc15 	stw	r2,-16(fp)
    25a4:	00003306 	br	2674 <sobel_x_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
    25a8:	d0a6d317 	ldw	r2,-25780(gp)
    25ac:	d8800015 	stw	r2,0(sp)
    25b0:	01c00074 	movhi	r7,1
    25b4:	39c8afc4 	addi	r7,r7,8895
    25b8:	e1bffd17 	ldw	r6,-12(fp)
    25bc:	e17ffc17 	ldw	r5,-16(fp)
    25c0:	e13fff17 	ldw	r4,-4(fp)
    25c4:	000216c0 	call	216c <sobel_mac>
    25c8:	e0bffe0d 	sth	r2,-8(fp)
          sobel_x_result[y*sobel_width+x] = result;
    25cc:	d0e6d617 	ldw	r3,-25768(gp)
    25d0:	d126d317 	ldw	r4,-25780(gp)
    25d4:	e0bffd17 	ldw	r2,-12(fp)
    25d8:	2089383a 	mul	r4,r4,r2
    25dc:	e0bffc17 	ldw	r2,-16(fp)
    25e0:	2085883a 	add	r2,r4,r2
    25e4:	1085883a 	add	r2,r2,r2
    25e8:	1885883a 	add	r2,r3,r2
    25ec:	e0fffe0b 	ldhu	r3,-8(fp)
    25f0:	10c0000d 	sth	r3,0(r2)
          if (result < 0) {
    25f4:	e0bffe0f 	ldh	r2,-8(fp)
    25f8:	10000e0e 	bge	r2,zero,2634 <sobel_x_with_rgb+0xb8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    25fc:	d0e6d817 	ldw	r3,-25760(gp)
    2600:	d126d317 	ldw	r4,-25780(gp)
    2604:	e0bffd17 	ldw	r2,-12(fp)
    2608:	2089383a 	mul	r4,r4,r2
    260c:	e0bffc17 	ldw	r2,-16(fp)
    2610:	2085883a 	add	r2,r4,r2
    2614:	1085883a 	add	r2,r2,r2
    2618:	1885883a 	add	r2,r3,r2
    261c:	e0fffe0f 	ldh	r3,-8(fp)
    2620:	00c7c83a 	sub	r3,zero,r3
    2624:	1807d0ba 	srai	r3,r3,2
    2628:	1806917a 	slli	r3,r3,5
    262c:	10c0000d 	sth	r3,0(r2)
    2630:	00000d06 	br	2668 <sobel_x_with_rgb+0xec>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    2634:	d0e6d817 	ldw	r3,-25760(gp)
    2638:	d126d317 	ldw	r4,-25780(gp)
    263c:	e0bffd17 	ldw	r2,-12(fp)
    2640:	2089383a 	mul	r4,r4,r2
    2644:	e0bffc17 	ldw	r2,-16(fp)
    2648:	2085883a 	add	r2,r4,r2
    264c:	1085883a 	add	r2,r2,r2
    2650:	1885883a 	add	r2,r3,r2
    2654:	e0fffe0f 	ldh	r3,-8(fp)
    2658:	1807d0fa 	srai	r3,r3,3
    265c:	18ffffcc 	andi	r3,r3,65535
    2660:	180692fa 	slli	r3,r3,11
    2664:	10c0000d 	sth	r3,0(r2)
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    2668:	e0bffc17 	ldw	r2,-16(fp)
    266c:	10800044 	addi	r2,r2,1
    2670:	e0bffc15 	stw	r2,-16(fp)
    2674:	d0a6d317 	ldw	r2,-25780(gp)
    2678:	10bfffc4 	addi	r2,r2,-1
    267c:	e0fffc17 	ldw	r3,-16(fp)
    2680:	18bfc916 	blt	r3,r2,25a8 <__alt_data_end+0xff0025a8>

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2684:	e0bffd17 	ldw	r2,-12(fp)
    2688:	10800044 	addi	r2,r2,1
    268c:	e0bffd15 	stw	r2,-12(fp)
    2690:	d0a6d517 	ldw	r2,-25772(gp)
    2694:	10bfffc4 	addi	r2,r2,-1
    2698:	e0fffd17 	ldw	r3,-12(fp)
    269c:	18bfbf16 	blt	r3,r2,259c <__alt_data_end+0xff00259c>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    26a0:	0001883a 	nop
    26a4:	e037883a 	mov	sp,fp
    26a8:	dfc00117 	ldw	ra,4(sp)
    26ac:	df000017 	ldw	fp,0(sp)
    26b0:	dec00204 	addi	sp,sp,8
    26b4:	f800283a 	ret

000026b8 <sobel_y>:

void sobel_y( unsigned char *source ) {
    26b8:	defff904 	addi	sp,sp,-28
    26bc:	dfc00615 	stw	ra,24(sp)
    26c0:	df000515 	stw	fp,20(sp)
    26c4:	dc000415 	stw	r16,16(sp)
    26c8:	df000504 	addi	fp,sp,20
    26cc:	e13ffe15 	stw	r4,-8(fp)
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    26d0:	00800044 	movi	r2,1
    26d4:	e0bffd15 	stw	r2,-12(fp)
    26d8:	00001e06 	br	2754 <sobel_y+0x9c>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    26dc:	00800044 	movi	r2,1
    26e0:	e0bffc15 	stw	r2,-16(fp)
    26e4:	00001406 	br	2738 <sobel_y+0x80>
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    26e8:	d0e6d717 	ldw	r3,-25764(gp)
    26ec:	d126d317 	ldw	r4,-25780(gp)
    26f0:	e0bffd17 	ldw	r2,-12(fp)
    26f4:	2089383a 	mul	r4,r4,r2
    26f8:	e0bffc17 	ldw	r2,-16(fp)
    26fc:	2085883a 	add	r2,r4,r2
    2700:	1085883a 	add	r2,r2,r2
    2704:	18a1883a 	add	r16,r3,r2
    2708:	d0a6d317 	ldw	r2,-25780(gp)
    270c:	d8800015 	stw	r2,0(sp)
    2710:	01c00074 	movhi	r7,1
    2714:	39c8b204 	addi	r7,r7,8904
    2718:	e1bffd17 	ldw	r6,-12(fp)
    271c:	e17ffc17 	ldw	r5,-16(fp)
    2720:	e13ffe17 	ldw	r4,-8(fp)
    2724:	000216c0 	call	216c <sobel_mac>
    2728:	8080000d 	sth	r2,0(r16)

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    272c:	e0bffc17 	ldw	r2,-16(fp)
    2730:	10800044 	addi	r2,r2,1
    2734:	e0bffc15 	stw	r2,-16(fp)
    2738:	d0a6d317 	ldw	r2,-25780(gp)
    273c:	10bfffc4 	addi	r2,r2,-1
    2740:	e0fffc17 	ldw	r3,-16(fp)
    2744:	18bfe816 	blt	r3,r2,26e8 <__alt_data_end+0xff0026e8>
}

void sobel_y( unsigned char *source ) {
   int x,y;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2748:	e0bffd17 	ldw	r2,-12(fp)
    274c:	10800044 	addi	r2,r2,1
    2750:	e0bffd15 	stw	r2,-12(fp)
    2754:	d0a6d517 	ldw	r2,-25772(gp)
    2758:	10bfffc4 	addi	r2,r2,-1
    275c:	e0fffd17 	ldw	r3,-12(fp)
    2760:	18bfde16 	blt	r3,r2,26dc <__alt_data_end+0xff0026dc>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
      }
   }
}
    2764:	0001883a 	nop
    2768:	e6ffff04 	addi	sp,fp,-4
    276c:	dfc00217 	ldw	ra,8(sp)
    2770:	df000117 	ldw	fp,4(sp)
    2774:	dc000017 	ldw	r16,0(sp)
    2778:	dec00304 	addi	sp,sp,12
    277c:	f800283a 	ret

00002780 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    2780:	defff904 	addi	sp,sp,-28
    2784:	dfc00615 	stw	ra,24(sp)
    2788:	df000515 	stw	fp,20(sp)
    278c:	df000504 	addi	fp,sp,20
    2790:	e13fff15 	stw	r4,-4(fp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2794:	00800044 	movi	r2,1
    2798:	e0bffd15 	stw	r2,-12(fp)
    279c:	00003d06 	br	2894 <sobel_y_with_rgb+0x114>
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    27a0:	00800044 	movi	r2,1
    27a4:	e0bffc15 	stw	r2,-16(fp)
    27a8:	00003306 	br	2878 <sobel_y_with_rgb+0xf8>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
    27ac:	d0a6d317 	ldw	r2,-25780(gp)
    27b0:	d8800015 	stw	r2,0(sp)
    27b4:	01c00074 	movhi	r7,1
    27b8:	39c8b204 	addi	r7,r7,8904
    27bc:	e1bffd17 	ldw	r6,-12(fp)
    27c0:	e17ffc17 	ldw	r5,-16(fp)
    27c4:	e13fff17 	ldw	r4,-4(fp)
    27c8:	000216c0 	call	216c <sobel_mac>
    27cc:	e0bffe0d 	sth	r2,-8(fp)
         sobel_y_result[y*sobel_width+x] = result;
    27d0:	d0e6d717 	ldw	r3,-25764(gp)
    27d4:	d126d317 	ldw	r4,-25780(gp)
    27d8:	e0bffd17 	ldw	r2,-12(fp)
    27dc:	2089383a 	mul	r4,r4,r2
    27e0:	e0bffc17 	ldw	r2,-16(fp)
    27e4:	2085883a 	add	r2,r4,r2
    27e8:	1085883a 	add	r2,r2,r2
    27ec:	1885883a 	add	r2,r3,r2
    27f0:	e0fffe0b 	ldhu	r3,-8(fp)
    27f4:	10c0000d 	sth	r3,0(r2)
         if (result < 0) {
    27f8:	e0bffe0f 	ldh	r2,-8(fp)
    27fc:	10000e0e 	bge	r2,zero,2838 <sobel_y_with_rgb+0xb8>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    2800:	d0e6d817 	ldw	r3,-25760(gp)
    2804:	d126d317 	ldw	r4,-25780(gp)
    2808:	e0bffd17 	ldw	r2,-12(fp)
    280c:	2089383a 	mul	r4,r4,r2
    2810:	e0bffc17 	ldw	r2,-16(fp)
    2814:	2085883a 	add	r2,r4,r2
    2818:	1085883a 	add	r2,r2,r2
    281c:	1885883a 	add	r2,r3,r2
    2820:	e0fffe0f 	ldh	r3,-8(fp)
    2824:	00c7c83a 	sub	r3,zero,r3
    2828:	1807d0ba 	srai	r3,r3,2
    282c:	1806917a 	slli	r3,r3,5
    2830:	10c0000d 	sth	r3,0(r2)
    2834:	00000d06 	br	286c <sobel_y_with_rgb+0xec>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    2838:	d0e6d817 	ldw	r3,-25760(gp)
    283c:	d126d317 	ldw	r4,-25780(gp)
    2840:	e0bffd17 	ldw	r2,-12(fp)
    2844:	2089383a 	mul	r4,r4,r2
    2848:	e0bffc17 	ldw	r2,-16(fp)
    284c:	2085883a 	add	r2,r4,r2
    2850:	1085883a 	add	r2,r2,r2
    2854:	1885883a 	add	r2,r3,r2
    2858:	e0fffe0f 	ldh	r3,-8(fp)
    285c:	1807d0fa 	srai	r3,r3,3
    2860:	18ffffcc 	andi	r3,r3,65535
    2864:	180692fa 	slli	r3,r3,11
    2868:	10c0000d 	sth	r3,0(r2)
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    286c:	e0bffc17 	ldw	r2,-16(fp)
    2870:	10800044 	addi	r2,r2,1
    2874:	e0bffc15 	stw	r2,-16(fp)
    2878:	d0a6d317 	ldw	r2,-25780(gp)
    287c:	10bfffc4 	addi	r2,r2,-1
    2880:	e0fffc17 	ldw	r3,-16(fp)
    2884:	18bfc916 	blt	r3,r2,27ac <__alt_data_end+0xff0027ac>

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    2888:	e0bffd17 	ldw	r2,-12(fp)
    288c:	10800044 	addi	r2,r2,1
    2890:	e0bffd15 	stw	r2,-12(fp)
    2894:	d0a6d517 	ldw	r2,-25772(gp)
    2898:	10bfffc4 	addi	r2,r2,-1
    289c:	e0fffd17 	ldw	r3,-12(fp)
    28a0:	18bfbf16 	blt	r3,r2,27a0 <__alt_data_end+0xff0027a0>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    28a4:	0001883a 	nop
    28a8:	e037883a 	mov	sp,fp
    28ac:	dfc00117 	ldw	ra,4(sp)
    28b0:	df000017 	ldw	fp,0(sp)
    28b4:	dec00204 	addi	sp,sp,8
    28b8:	f800283a 	ret

000028bc <sobel_threshold>:

void sobel_threshold(short threshold) {
    28bc:	defffa04 	addi	sp,sp,-24
    28c0:	df000515 	stw	fp,20(sp)
    28c4:	df000504 	addi	fp,sp,20
    28c8:	2005883a 	mov	r2,r4
    28cc:	e0bfff0d 	sth	r2,-4(fp)
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    28d0:	00800044 	movi	r2,1
    28d4:	e0bffc15 	stw	r2,-16(fp)
    28d8:	00003406 	br	29ac <sobel_threshold+0xf0>
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    28dc:	00800044 	movi	r2,1
    28e0:	e0bffb15 	stw	r2,-20(fp)
    28e4:	00002a06 	br	2990 <sobel_threshold+0xd4>
			arrayindex = (y*sobel_width)+x;
    28e8:	d0e6d317 	ldw	r3,-25780(gp)
    28ec:	e0bffc17 	ldw	r2,-16(fp)
    28f0:	1887383a 	mul	r3,r3,r2
    28f4:	e0bffb17 	ldw	r2,-20(fp)
    28f8:	1885883a 	add	r2,r3,r2
    28fc:	e0bffd15 	stw	r2,-12(fp)
			value = sobel_x_result[arrayindex];
    2900:	d0e6d617 	ldw	r3,-25768(gp)
    2904:	e0bffd17 	ldw	r2,-12(fp)
    2908:	1085883a 	add	r2,r2,r2
    290c:	1885883a 	add	r2,r3,r2
    2910:	1080000b 	ldhu	r2,0(r2)
    2914:	e0bffe0d 	sth	r2,-8(fp)
			sum = (value < 0) ? -value : value;
    2918:	e0bffe0f 	ldh	r2,-8(fp)
    291c:	1000010e 	bge	r2,zero,2924 <sobel_threshold+0x68>
    2920:	0085c83a 	sub	r2,zero,r2
    2924:	e0bffe8d 	sth	r2,-6(fp)
			value = sobel_y_result[arrayindex];
    2928:	d0e6d717 	ldw	r3,-25764(gp)
    292c:	e0bffd17 	ldw	r2,-12(fp)
    2930:	1085883a 	add	r2,r2,r2
    2934:	1885883a 	add	r2,r3,r2
    2938:	1080000b 	ldhu	r2,0(r2)
    293c:	e0bffe0d 	sth	r2,-8(fp)
			sum += (value < 0) ? -value : value;
    2940:	e0bffe0f 	ldh	r2,-8(fp)
    2944:	1000010e 	bge	r2,zero,294c <sobel_threshold+0x90>
    2948:	0085c83a 	sub	r2,zero,r2
    294c:	1007883a 	mov	r3,r2
    2950:	e0bffe8b 	ldhu	r2,-6(fp)
    2954:	1885883a 	add	r2,r3,r2
    2958:	e0bffe8d 	sth	r2,-6(fp)
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
    295c:	d0e6d417 	ldw	r3,-25776(gp)
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	1887883a 	add	r3,r3,r2
    2968:	e0bffe8f 	ldh	r2,-6(fp)
    296c:	e13fff0f 	ldh	r4,-4(fp)
    2970:	2080020e 	bge	r4,r2,297c <sobel_threshold+0xc0>
    2974:	00bfffc4 	movi	r2,-1
    2978:	00000106 	br	2980 <sobel_threshold+0xc4>
    297c:	0005883a 	mov	r2,zero
    2980:	18800005 	stb	r2,0(r3)

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
		for (x = 1 ; x < (sobel_width-1) ; x++) {
    2984:	e0bffb17 	ldw	r2,-20(fp)
    2988:	10800044 	addi	r2,r2,1
    298c:	e0bffb15 	stw	r2,-20(fp)
    2990:	d0a6d317 	ldw	r2,-25780(gp)
    2994:	10bfffc4 	addi	r2,r2,-1
    2998:	e0fffb17 	ldw	r3,-20(fp)
    299c:	18bfd216 	blt	r3,r2,28e8 <__alt_data_end+0xff0028e8>
}

void sobel_threshold(short threshold) {
	int x,y,arrayindex;
	short sum,value;
	for (y = 1 ; y < (sobel_height-1) ; y++) {
    29a0:	e0bffc17 	ldw	r2,-16(fp)
    29a4:	10800044 	addi	r2,r2,1
    29a8:	e0bffc15 	stw	r2,-16(fp)
    29ac:	d0a6d517 	ldw	r2,-25772(gp)
    29b0:	10bfffc4 	addi	r2,r2,-1
    29b4:	e0fffc17 	ldw	r3,-16(fp)
    29b8:	18bfc816 	blt	r3,r2,28dc <__alt_data_end+0xff0028dc>
			value = sobel_y_result[arrayindex];
			sum += (value < 0) ? -value : value;
			sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
		}
	}
}
    29bc:	0001883a 	nop
    29c0:	e037883a 	mov	sp,fp
    29c4:	df000017 	ldw	fp,0(sp)
    29c8:	dec00104 	addi	sp,sp,4
    29cc:	f800283a 	ret

000029d0 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
    29d0:	deffff04 	addi	sp,sp,-4
    29d4:	df000015 	stw	fp,0(sp)
    29d8:	d839883a 	mov	fp,sp
	return sobel_rgb565;
    29dc:	d0a6d817 	ldw	r2,-25760(gp)
}
    29e0:	e037883a 	mov	sp,fp
    29e4:	df000017 	ldw	fp,0(sp)
    29e8:	dec00104 	addi	sp,sp,4
    29ec:	f800283a 	ret

000029f0 <GetSobelResult>:

unsigned char *GetSobelResult() {
    29f0:	deffff04 	addi	sp,sp,-4
    29f4:	df000015 	stw	fp,0(sp)
    29f8:	d839883a 	mov	fp,sp
	return sobel_result;
    29fc:	d0a6d417 	ldw	r2,-25776(gp)
}
    2a00:	e037883a 	mov	sp,fp
    2a04:	df000017 	ldw	fp,0(sp)
    2a08:	dec00104 	addi	sp,sp,4
    2a0c:	f800283a 	ret

00002a10 <vga_set_pointer>:
 */

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
    2a10:	defffe04 	addi	sp,sp,-8
    2a14:	df000115 	stw	fp,4(sp)
    2a18:	df000104 	addi	fp,sp,4
    2a1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    2a20:	e0ffff17 	ldw	r3,-4(fp)
    2a24:	00804034 	movhi	r2,256
    2a28:	10843404 	addi	r2,r2,4304
    2a2c:	10c00035 	stwio	r3,0(r2)
}
    2a30:	0001883a 	nop
    2a34:	e037883a 	mov	sp,fp
    2a38:	df000017 	ldw	fp,0(sp)
    2a3c:	dec00104 	addi	sp,sp,4
    2a40:	f800283a 	ret

00002a44 <vga_set_swap>:

void vga_set_swap(char swap) {
    2a44:	defffe04 	addi	sp,sp,-8
    2a48:	df000115 	stw	fp,4(sp)
    2a4c:	df000104 	addi	fp,sp,4
    2a50:	2005883a 	mov	r2,r4
    2a54:	e0bfff05 	stb	r2,-4(fp)
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    2a58:	e0ffff07 	ldb	r3,-4(fp)
    2a5c:	00804034 	movhi	r2,256
    2a60:	10843504 	addi	r2,r2,4308
    2a64:	10c00025 	stbio	r3,0(r2)
}
    2a68:	0001883a 	nop
    2a6c:	e037883a 	mov	sp,fp
    2a70:	df000017 	ldw	fp,0(sp)
    2a74:	dec00104 	addi	sp,sp,4
    2a78:	f800283a 	ret

00002a7c <__divsi3>:
    2a7c:	20001b16 	blt	r4,zero,2aec <__divsi3+0x70>
    2a80:	000f883a 	mov	r7,zero
    2a84:	28001616 	blt	r5,zero,2ae0 <__divsi3+0x64>
    2a88:	200d883a 	mov	r6,r4
    2a8c:	29001a2e 	bgeu	r5,r4,2af8 <__divsi3+0x7c>
    2a90:	00800804 	movi	r2,32
    2a94:	00c00044 	movi	r3,1
    2a98:	00000106 	br	2aa0 <__divsi3+0x24>
    2a9c:	10000d26 	beq	r2,zero,2ad4 <__divsi3+0x58>
    2aa0:	294b883a 	add	r5,r5,r5
    2aa4:	10bfffc4 	addi	r2,r2,-1
    2aa8:	18c7883a 	add	r3,r3,r3
    2aac:	293ffb36 	bltu	r5,r4,2a9c <__alt_data_end+0xff002a9c>
    2ab0:	0005883a 	mov	r2,zero
    2ab4:	18000726 	beq	r3,zero,2ad4 <__divsi3+0x58>
    2ab8:	0005883a 	mov	r2,zero
    2abc:	31400236 	bltu	r6,r5,2ac8 <__divsi3+0x4c>
    2ac0:	314dc83a 	sub	r6,r6,r5
    2ac4:	10c4b03a 	or	r2,r2,r3
    2ac8:	1806d07a 	srli	r3,r3,1
    2acc:	280ad07a 	srli	r5,r5,1
    2ad0:	183ffa1e 	bne	r3,zero,2abc <__alt_data_end+0xff002abc>
    2ad4:	38000126 	beq	r7,zero,2adc <__divsi3+0x60>
    2ad8:	0085c83a 	sub	r2,zero,r2
    2adc:	f800283a 	ret
    2ae0:	014bc83a 	sub	r5,zero,r5
    2ae4:	39c0005c 	xori	r7,r7,1
    2ae8:	003fe706 	br	2a88 <__alt_data_end+0xff002a88>
    2aec:	0109c83a 	sub	r4,zero,r4
    2af0:	01c00044 	movi	r7,1
    2af4:	003fe306 	br	2a84 <__alt_data_end+0xff002a84>
    2af8:	00c00044 	movi	r3,1
    2afc:	003fee06 	br	2ab8 <__alt_data_end+0xff002ab8>

00002b00 <__modsi3>:
    2b00:	20001716 	blt	r4,zero,2b60 <__modsi3+0x60>
    2b04:	000f883a 	mov	r7,zero
    2b08:	2005883a 	mov	r2,r4
    2b0c:	28001216 	blt	r5,zero,2b58 <__modsi3+0x58>
    2b10:	2900162e 	bgeu	r5,r4,2b6c <__modsi3+0x6c>
    2b14:	01800804 	movi	r6,32
    2b18:	00c00044 	movi	r3,1
    2b1c:	00000106 	br	2b24 <__modsi3+0x24>
    2b20:	30000a26 	beq	r6,zero,2b4c <__modsi3+0x4c>
    2b24:	294b883a 	add	r5,r5,r5
    2b28:	31bfffc4 	addi	r6,r6,-1
    2b2c:	18c7883a 	add	r3,r3,r3
    2b30:	293ffb36 	bltu	r5,r4,2b20 <__alt_data_end+0xff002b20>
    2b34:	18000526 	beq	r3,zero,2b4c <__modsi3+0x4c>
    2b38:	1806d07a 	srli	r3,r3,1
    2b3c:	11400136 	bltu	r2,r5,2b44 <__modsi3+0x44>
    2b40:	1145c83a 	sub	r2,r2,r5
    2b44:	280ad07a 	srli	r5,r5,1
    2b48:	183ffb1e 	bne	r3,zero,2b38 <__alt_data_end+0xff002b38>
    2b4c:	38000126 	beq	r7,zero,2b54 <__modsi3+0x54>
    2b50:	0085c83a 	sub	r2,zero,r2
    2b54:	f800283a 	ret
    2b58:	014bc83a 	sub	r5,zero,r5
    2b5c:	003fec06 	br	2b10 <__alt_data_end+0xff002b10>
    2b60:	0109c83a 	sub	r4,zero,r4
    2b64:	01c00044 	movi	r7,1
    2b68:	003fe706 	br	2b08 <__alt_data_end+0xff002b08>
    2b6c:	00c00044 	movi	r3,1
    2b70:	003ff106 	br	2b38 <__alt_data_end+0xff002b38>

00002b74 <__udivsi3>:
    2b74:	200d883a 	mov	r6,r4
    2b78:	2900152e 	bgeu	r5,r4,2bd0 <__udivsi3+0x5c>
    2b7c:	28001416 	blt	r5,zero,2bd0 <__udivsi3+0x5c>
    2b80:	00800804 	movi	r2,32
    2b84:	00c00044 	movi	r3,1
    2b88:	00000206 	br	2b94 <__udivsi3+0x20>
    2b8c:	10000e26 	beq	r2,zero,2bc8 <__udivsi3+0x54>
    2b90:	28000516 	blt	r5,zero,2ba8 <__udivsi3+0x34>
    2b94:	294b883a 	add	r5,r5,r5
    2b98:	10bfffc4 	addi	r2,r2,-1
    2b9c:	18c7883a 	add	r3,r3,r3
    2ba0:	293ffa36 	bltu	r5,r4,2b8c <__alt_data_end+0xff002b8c>
    2ba4:	18000826 	beq	r3,zero,2bc8 <__udivsi3+0x54>
    2ba8:	0005883a 	mov	r2,zero
    2bac:	31400236 	bltu	r6,r5,2bb8 <__udivsi3+0x44>
    2bb0:	314dc83a 	sub	r6,r6,r5
    2bb4:	10c4b03a 	or	r2,r2,r3
    2bb8:	1806d07a 	srli	r3,r3,1
    2bbc:	280ad07a 	srli	r5,r5,1
    2bc0:	183ffa1e 	bne	r3,zero,2bac <__alt_data_end+0xff002bac>
    2bc4:	f800283a 	ret
    2bc8:	0005883a 	mov	r2,zero
    2bcc:	f800283a 	ret
    2bd0:	00c00044 	movi	r3,1
    2bd4:	003ff406 	br	2ba8 <__alt_data_end+0xff002ba8>

00002bd8 <__umodsi3>:
    2bd8:	2005883a 	mov	r2,r4
    2bdc:	2900122e 	bgeu	r5,r4,2c28 <__umodsi3+0x50>
    2be0:	28001116 	blt	r5,zero,2c28 <__umodsi3+0x50>
    2be4:	01800804 	movi	r6,32
    2be8:	00c00044 	movi	r3,1
    2bec:	00000206 	br	2bf8 <__umodsi3+0x20>
    2bf0:	30000c26 	beq	r6,zero,2c24 <__umodsi3+0x4c>
    2bf4:	28000516 	blt	r5,zero,2c0c <__umodsi3+0x34>
    2bf8:	294b883a 	add	r5,r5,r5
    2bfc:	31bfffc4 	addi	r6,r6,-1
    2c00:	18c7883a 	add	r3,r3,r3
    2c04:	293ffa36 	bltu	r5,r4,2bf0 <__alt_data_end+0xff002bf0>
    2c08:	18000626 	beq	r3,zero,2c24 <__umodsi3+0x4c>
    2c0c:	1806d07a 	srli	r3,r3,1
    2c10:	11400136 	bltu	r2,r5,2c18 <__umodsi3+0x40>
    2c14:	1145c83a 	sub	r2,r2,r5
    2c18:	280ad07a 	srli	r5,r5,1
    2c1c:	183ffb1e 	bne	r3,zero,2c0c <__alt_data_end+0xff002c0c>
    2c20:	f800283a 	ret
    2c24:	f800283a 	ret
    2c28:	00c00044 	movi	r3,1
    2c2c:	003ff706 	br	2c0c <__alt_data_end+0xff002c0c>

00002c30 <malloc>:
    2c30:	00800074 	movhi	r2,1
    2c34:	10902304 	addi	r2,r2,16524
    2c38:	200b883a 	mov	r5,r4
    2c3c:	11000017 	ldw	r4,0(r2)
    2c40:	0002c581 	jmpi	2c58 <_malloc_r>

00002c44 <free>:
    2c44:	00800074 	movhi	r2,1
    2c48:	10902304 	addi	r2,r2,16524
    2c4c:	200b883a 	mov	r5,r4
    2c50:	11000017 	ldw	r4,0(r2)
    2c54:	0007aa81 	jmpi	7aa8 <_free_r>

00002c58 <_malloc_r>:
    2c58:	defff504 	addi	sp,sp,-44
    2c5c:	dc800315 	stw	r18,12(sp)
    2c60:	dfc00a15 	stw	ra,40(sp)
    2c64:	df000915 	stw	fp,36(sp)
    2c68:	ddc00815 	stw	r23,32(sp)
    2c6c:	dd800715 	stw	r22,28(sp)
    2c70:	dd400615 	stw	r21,24(sp)
    2c74:	dd000515 	stw	r20,20(sp)
    2c78:	dcc00415 	stw	r19,16(sp)
    2c7c:	dc400215 	stw	r17,8(sp)
    2c80:	dc000115 	stw	r16,4(sp)
    2c84:	288002c4 	addi	r2,r5,11
    2c88:	00c00584 	movi	r3,22
    2c8c:	2025883a 	mov	r18,r4
    2c90:	18807f2e 	bgeu	r3,r2,2e90 <_malloc_r+0x238>
    2c94:	047ffe04 	movi	r17,-8
    2c98:	1462703a 	and	r17,r2,r17
    2c9c:	8800a316 	blt	r17,zero,2f2c <_malloc_r+0x2d4>
    2ca0:	8940a236 	bltu	r17,r5,2f2c <_malloc_r+0x2d4>
    2ca4:	000f9400 	call	f940 <__malloc_lock>
    2ca8:	00807dc4 	movi	r2,503
    2cac:	1441e92e 	bgeu	r2,r17,3454 <_malloc_r+0x7fc>
    2cb0:	8804d27a 	srli	r2,r17,9
    2cb4:	1000a126 	beq	r2,zero,2f3c <_malloc_r+0x2e4>
    2cb8:	00c00104 	movi	r3,4
    2cbc:	18811e36 	bltu	r3,r2,3138 <_malloc_r+0x4e0>
    2cc0:	8804d1ba 	srli	r2,r17,6
    2cc4:	12000e44 	addi	r8,r2,57
    2cc8:	11c00e04 	addi	r7,r2,56
    2ccc:	4209883a 	add	r4,r8,r8
    2cd0:	04c00074 	movhi	r19,1
    2cd4:	2109883a 	add	r4,r4,r4
    2cd8:	9cc97304 	addi	r19,r19,9676
    2cdc:	2109883a 	add	r4,r4,r4
    2ce0:	9909883a 	add	r4,r19,r4
    2ce4:	24000117 	ldw	r16,4(r4)
    2ce8:	213ffe04 	addi	r4,r4,-8
    2cec:	24009726 	beq	r4,r16,2f4c <_malloc_r+0x2f4>
    2cf0:	80800117 	ldw	r2,4(r16)
    2cf4:	01bfff04 	movi	r6,-4
    2cf8:	014003c4 	movi	r5,15
    2cfc:	1184703a 	and	r2,r2,r6
    2d00:	1447c83a 	sub	r3,r2,r17
    2d04:	28c00716 	blt	r5,r3,2d24 <_malloc_r+0xcc>
    2d08:	1800920e 	bge	r3,zero,2f54 <_malloc_r+0x2fc>
    2d0c:	84000317 	ldw	r16,12(r16)
    2d10:	24008e26 	beq	r4,r16,2f4c <_malloc_r+0x2f4>
    2d14:	80800117 	ldw	r2,4(r16)
    2d18:	1184703a 	and	r2,r2,r6
    2d1c:	1447c83a 	sub	r3,r2,r17
    2d20:	28fff90e 	bge	r5,r3,2d08 <__alt_data_end+0xff002d08>
    2d24:	3809883a 	mov	r4,r7
    2d28:	01800074 	movhi	r6,1
    2d2c:	9c000417 	ldw	r16,16(r19)
    2d30:	31897304 	addi	r6,r6,9676
    2d34:	32000204 	addi	r8,r6,8
    2d38:	82013426 	beq	r16,r8,320c <_malloc_r+0x5b4>
    2d3c:	80c00117 	ldw	r3,4(r16)
    2d40:	00bfff04 	movi	r2,-4
    2d44:	188e703a 	and	r7,r3,r2
    2d48:	3c45c83a 	sub	r2,r7,r17
    2d4c:	00c003c4 	movi	r3,15
    2d50:	18811f16 	blt	r3,r2,31d0 <_malloc_r+0x578>
    2d54:	32000515 	stw	r8,20(r6)
    2d58:	32000415 	stw	r8,16(r6)
    2d5c:	10007f0e 	bge	r2,zero,2f5c <_malloc_r+0x304>
    2d60:	00807fc4 	movi	r2,511
    2d64:	11c0fd36 	bltu	r2,r7,315c <_malloc_r+0x504>
    2d68:	3806d0fa 	srli	r3,r7,3
    2d6c:	01c00044 	movi	r7,1
    2d70:	30800117 	ldw	r2,4(r6)
    2d74:	19400044 	addi	r5,r3,1
    2d78:	294b883a 	add	r5,r5,r5
    2d7c:	1807d0ba 	srai	r3,r3,2
    2d80:	294b883a 	add	r5,r5,r5
    2d84:	294b883a 	add	r5,r5,r5
    2d88:	298b883a 	add	r5,r5,r6
    2d8c:	38c6983a 	sll	r3,r7,r3
    2d90:	29c00017 	ldw	r7,0(r5)
    2d94:	2a7ffe04 	addi	r9,r5,-8
    2d98:	1886b03a 	or	r3,r3,r2
    2d9c:	82400315 	stw	r9,12(r16)
    2da0:	81c00215 	stw	r7,8(r16)
    2da4:	30c00115 	stw	r3,4(r6)
    2da8:	2c000015 	stw	r16,0(r5)
    2dac:	3c000315 	stw	r16,12(r7)
    2db0:	2005d0ba 	srai	r2,r4,2
    2db4:	01400044 	movi	r5,1
    2db8:	288a983a 	sll	r5,r5,r2
    2dbc:	19406f36 	bltu	r3,r5,2f7c <_malloc_r+0x324>
    2dc0:	28c4703a 	and	r2,r5,r3
    2dc4:	10000a1e 	bne	r2,zero,2df0 <_malloc_r+0x198>
    2dc8:	00bfff04 	movi	r2,-4
    2dcc:	294b883a 	add	r5,r5,r5
    2dd0:	2088703a 	and	r4,r4,r2
    2dd4:	28c4703a 	and	r2,r5,r3
    2dd8:	21000104 	addi	r4,r4,4
    2ddc:	1000041e 	bne	r2,zero,2df0 <_malloc_r+0x198>
    2de0:	294b883a 	add	r5,r5,r5
    2de4:	28c4703a 	and	r2,r5,r3
    2de8:	21000104 	addi	r4,r4,4
    2dec:	103ffc26 	beq	r2,zero,2de0 <__alt_data_end+0xff002de0>
    2df0:	02bfff04 	movi	r10,-4
    2df4:	024003c4 	movi	r9,15
    2df8:	21800044 	addi	r6,r4,1
    2dfc:	318d883a 	add	r6,r6,r6
    2e00:	318d883a 	add	r6,r6,r6
    2e04:	318d883a 	add	r6,r6,r6
    2e08:	998d883a 	add	r6,r19,r6
    2e0c:	333ffe04 	addi	r12,r6,-8
    2e10:	2017883a 	mov	r11,r4
    2e14:	31800104 	addi	r6,r6,4
    2e18:	34000017 	ldw	r16,0(r6)
    2e1c:	31fffd04 	addi	r7,r6,-12
    2e20:	81c0041e 	bne	r16,r7,2e34 <_malloc_r+0x1dc>
    2e24:	0000fb06 	br	3214 <_malloc_r+0x5bc>
    2e28:	1801030e 	bge	r3,zero,3238 <_malloc_r+0x5e0>
    2e2c:	84000317 	ldw	r16,12(r16)
    2e30:	81c0f826 	beq	r16,r7,3214 <_malloc_r+0x5bc>
    2e34:	80800117 	ldw	r2,4(r16)
    2e38:	1284703a 	and	r2,r2,r10
    2e3c:	1447c83a 	sub	r3,r2,r17
    2e40:	48fff90e 	bge	r9,r3,2e28 <__alt_data_end+0xff002e28>
    2e44:	80800317 	ldw	r2,12(r16)
    2e48:	81000217 	ldw	r4,8(r16)
    2e4c:	89400054 	ori	r5,r17,1
    2e50:	81400115 	stw	r5,4(r16)
    2e54:	20800315 	stw	r2,12(r4)
    2e58:	11000215 	stw	r4,8(r2)
    2e5c:	8463883a 	add	r17,r16,r17
    2e60:	9c400515 	stw	r17,20(r19)
    2e64:	9c400415 	stw	r17,16(r19)
    2e68:	18800054 	ori	r2,r3,1
    2e6c:	88800115 	stw	r2,4(r17)
    2e70:	8a000315 	stw	r8,12(r17)
    2e74:	8a000215 	stw	r8,8(r17)
    2e78:	88e3883a 	add	r17,r17,r3
    2e7c:	88c00015 	stw	r3,0(r17)
    2e80:	9009883a 	mov	r4,r18
    2e84:	000f9640 	call	f964 <__malloc_unlock>
    2e88:	80800204 	addi	r2,r16,8
    2e8c:	00001b06 	br	2efc <_malloc_r+0x2a4>
    2e90:	04400404 	movi	r17,16
    2e94:	89402536 	bltu	r17,r5,2f2c <_malloc_r+0x2d4>
    2e98:	000f9400 	call	f940 <__malloc_lock>
    2e9c:	00800184 	movi	r2,6
    2ea0:	01000084 	movi	r4,2
    2ea4:	04c00074 	movhi	r19,1
    2ea8:	1085883a 	add	r2,r2,r2
    2eac:	9cc97304 	addi	r19,r19,9676
    2eb0:	1085883a 	add	r2,r2,r2
    2eb4:	9885883a 	add	r2,r19,r2
    2eb8:	14000117 	ldw	r16,4(r2)
    2ebc:	10fffe04 	addi	r3,r2,-8
    2ec0:	80c0d926 	beq	r16,r3,3228 <_malloc_r+0x5d0>
    2ec4:	80c00117 	ldw	r3,4(r16)
    2ec8:	81000317 	ldw	r4,12(r16)
    2ecc:	00bfff04 	movi	r2,-4
    2ed0:	1884703a 	and	r2,r3,r2
    2ed4:	81400217 	ldw	r5,8(r16)
    2ed8:	8085883a 	add	r2,r16,r2
    2edc:	10c00117 	ldw	r3,4(r2)
    2ee0:	29000315 	stw	r4,12(r5)
    2ee4:	21400215 	stw	r5,8(r4)
    2ee8:	18c00054 	ori	r3,r3,1
    2eec:	10c00115 	stw	r3,4(r2)
    2ef0:	9009883a 	mov	r4,r18
    2ef4:	000f9640 	call	f964 <__malloc_unlock>
    2ef8:	80800204 	addi	r2,r16,8
    2efc:	dfc00a17 	ldw	ra,40(sp)
    2f00:	df000917 	ldw	fp,36(sp)
    2f04:	ddc00817 	ldw	r23,32(sp)
    2f08:	dd800717 	ldw	r22,28(sp)
    2f0c:	dd400617 	ldw	r21,24(sp)
    2f10:	dd000517 	ldw	r20,20(sp)
    2f14:	dcc00417 	ldw	r19,16(sp)
    2f18:	dc800317 	ldw	r18,12(sp)
    2f1c:	dc400217 	ldw	r17,8(sp)
    2f20:	dc000117 	ldw	r16,4(sp)
    2f24:	dec00b04 	addi	sp,sp,44
    2f28:	f800283a 	ret
    2f2c:	00800304 	movi	r2,12
    2f30:	90800015 	stw	r2,0(r18)
    2f34:	0005883a 	mov	r2,zero
    2f38:	003ff006 	br	2efc <__alt_data_end+0xff002efc>
    2f3c:	01002004 	movi	r4,128
    2f40:	02001004 	movi	r8,64
    2f44:	01c00fc4 	movi	r7,63
    2f48:	003f6106 	br	2cd0 <__alt_data_end+0xff002cd0>
    2f4c:	4009883a 	mov	r4,r8
    2f50:	003f7506 	br	2d28 <__alt_data_end+0xff002d28>
    2f54:	81000317 	ldw	r4,12(r16)
    2f58:	003fde06 	br	2ed4 <__alt_data_end+0xff002ed4>
    2f5c:	81c5883a 	add	r2,r16,r7
    2f60:	11400117 	ldw	r5,4(r2)
    2f64:	9009883a 	mov	r4,r18
    2f68:	29400054 	ori	r5,r5,1
    2f6c:	11400115 	stw	r5,4(r2)
    2f70:	000f9640 	call	f964 <__malloc_unlock>
    2f74:	80800204 	addi	r2,r16,8
    2f78:	003fe006 	br	2efc <__alt_data_end+0xff002efc>
    2f7c:	9c000217 	ldw	r16,8(r19)
    2f80:	00bfff04 	movi	r2,-4
    2f84:	85800117 	ldw	r22,4(r16)
    2f88:	b0ac703a 	and	r22,r22,r2
    2f8c:	b4400336 	bltu	r22,r17,2f9c <_malloc_r+0x344>
    2f90:	b445c83a 	sub	r2,r22,r17
    2f94:	00c003c4 	movi	r3,15
    2f98:	18805d16 	blt	r3,r2,3110 <_malloc_r+0x4b8>
    2f9c:	05c00074 	movhi	r23,1
    2fa0:	00800074 	movhi	r2,1
    2fa4:	1096f904 	addi	r2,r2,23524
    2fa8:	bdd02004 	addi	r23,r23,16512
    2fac:	15400017 	ldw	r21,0(r2)
    2fb0:	b8c00017 	ldw	r3,0(r23)
    2fb4:	00bfffc4 	movi	r2,-1
    2fb8:	858d883a 	add	r6,r16,r22
    2fbc:	8d6b883a 	add	r21,r17,r21
    2fc0:	1880ea26 	beq	r3,r2,336c <_malloc_r+0x714>
    2fc4:	ad4403c4 	addi	r21,r21,4111
    2fc8:	00bc0004 	movi	r2,-4096
    2fcc:	a8aa703a 	and	r21,r21,r2
    2fd0:	a80b883a 	mov	r5,r21
    2fd4:	9009883a 	mov	r4,r18
    2fd8:	d9800015 	stw	r6,0(sp)
    2fdc:	00035a40 	call	35a4 <_sbrk_r>
    2fe0:	1029883a 	mov	r20,r2
    2fe4:	00bfffc4 	movi	r2,-1
    2fe8:	d9800017 	ldw	r6,0(sp)
    2fec:	a080e826 	beq	r20,r2,3390 <_malloc_r+0x738>
    2ff0:	a180a636 	bltu	r20,r6,328c <_malloc_r+0x634>
    2ff4:	07000074 	movhi	fp,1
    2ff8:	e7170704 	addi	fp,fp,23580
    2ffc:	e0800017 	ldw	r2,0(fp)
    3000:	a887883a 	add	r3,r21,r2
    3004:	e0c00015 	stw	r3,0(fp)
    3008:	3500e626 	beq	r6,r20,33a4 <_malloc_r+0x74c>
    300c:	b9000017 	ldw	r4,0(r23)
    3010:	00bfffc4 	movi	r2,-1
    3014:	2080ee26 	beq	r4,r2,33d0 <_malloc_r+0x778>
    3018:	a185c83a 	sub	r2,r20,r6
    301c:	10c5883a 	add	r2,r2,r3
    3020:	e0800015 	stw	r2,0(fp)
    3024:	a0c001cc 	andi	r3,r20,7
    3028:	1800bc26 	beq	r3,zero,331c <_malloc_r+0x6c4>
    302c:	a0e9c83a 	sub	r20,r20,r3
    3030:	00840204 	movi	r2,4104
    3034:	a5000204 	addi	r20,r20,8
    3038:	10c7c83a 	sub	r3,r2,r3
    303c:	a545883a 	add	r2,r20,r21
    3040:	1083ffcc 	andi	r2,r2,4095
    3044:	18abc83a 	sub	r21,r3,r2
    3048:	a80b883a 	mov	r5,r21
    304c:	9009883a 	mov	r4,r18
    3050:	00035a40 	call	35a4 <_sbrk_r>
    3054:	00ffffc4 	movi	r3,-1
    3058:	10c0e126 	beq	r2,r3,33e0 <_malloc_r+0x788>
    305c:	1505c83a 	sub	r2,r2,r20
    3060:	1545883a 	add	r2,r2,r21
    3064:	10800054 	ori	r2,r2,1
    3068:	e0c00017 	ldw	r3,0(fp)
    306c:	9d000215 	stw	r20,8(r19)
    3070:	a0800115 	stw	r2,4(r20)
    3074:	a8c7883a 	add	r3,r21,r3
    3078:	e0c00015 	stw	r3,0(fp)
    307c:	84c00e26 	beq	r16,r19,30b8 <_malloc_r+0x460>
    3080:	018003c4 	movi	r6,15
    3084:	3580a72e 	bgeu	r6,r22,3324 <_malloc_r+0x6cc>
    3088:	81400117 	ldw	r5,4(r16)
    308c:	013ffe04 	movi	r4,-8
    3090:	b0bffd04 	addi	r2,r22,-12
    3094:	1104703a 	and	r2,r2,r4
    3098:	2900004c 	andi	r4,r5,1
    309c:	2088b03a 	or	r4,r4,r2
    30a0:	81000115 	stw	r4,4(r16)
    30a4:	01400144 	movi	r5,5
    30a8:	8089883a 	add	r4,r16,r2
    30ac:	21400115 	stw	r5,4(r4)
    30b0:	21400215 	stw	r5,8(r4)
    30b4:	3080cd36 	bltu	r6,r2,33ec <_malloc_r+0x794>
    30b8:	00800074 	movhi	r2,1
    30bc:	1096f804 	addi	r2,r2,23520
    30c0:	11000017 	ldw	r4,0(r2)
    30c4:	20c0012e 	bgeu	r4,r3,30cc <_malloc_r+0x474>
    30c8:	10c00015 	stw	r3,0(r2)
    30cc:	00800074 	movhi	r2,1
    30d0:	1096f704 	addi	r2,r2,23516
    30d4:	11000017 	ldw	r4,0(r2)
    30d8:	9c000217 	ldw	r16,8(r19)
    30dc:	20c0012e 	bgeu	r4,r3,30e4 <_malloc_r+0x48c>
    30e0:	10c00015 	stw	r3,0(r2)
    30e4:	80c00117 	ldw	r3,4(r16)
    30e8:	00bfff04 	movi	r2,-4
    30ec:	1886703a 	and	r3,r3,r2
    30f0:	1c45c83a 	sub	r2,r3,r17
    30f4:	1c400236 	bltu	r3,r17,3100 <_malloc_r+0x4a8>
    30f8:	00c003c4 	movi	r3,15
    30fc:	18800416 	blt	r3,r2,3110 <_malloc_r+0x4b8>
    3100:	9009883a 	mov	r4,r18
    3104:	000f9640 	call	f964 <__malloc_unlock>
    3108:	0005883a 	mov	r2,zero
    310c:	003f7b06 	br	2efc <__alt_data_end+0xff002efc>
    3110:	88c00054 	ori	r3,r17,1
    3114:	80c00115 	stw	r3,4(r16)
    3118:	8463883a 	add	r17,r16,r17
    311c:	10800054 	ori	r2,r2,1
    3120:	9c400215 	stw	r17,8(r19)
    3124:	88800115 	stw	r2,4(r17)
    3128:	9009883a 	mov	r4,r18
    312c:	000f9640 	call	f964 <__malloc_unlock>
    3130:	80800204 	addi	r2,r16,8
    3134:	003f7106 	br	2efc <__alt_data_end+0xff002efc>
    3138:	00c00504 	movi	r3,20
    313c:	18804a2e 	bgeu	r3,r2,3268 <_malloc_r+0x610>
    3140:	00c01504 	movi	r3,84
    3144:	18806e36 	bltu	r3,r2,3300 <_malloc_r+0x6a8>
    3148:	8804d33a 	srli	r2,r17,12
    314c:	12001bc4 	addi	r8,r2,111
    3150:	11c01b84 	addi	r7,r2,110
    3154:	4209883a 	add	r4,r8,r8
    3158:	003edd06 	br	2cd0 <__alt_data_end+0xff002cd0>
    315c:	3804d27a 	srli	r2,r7,9
    3160:	00c00104 	movi	r3,4
    3164:	1880442e 	bgeu	r3,r2,3278 <_malloc_r+0x620>
    3168:	00c00504 	movi	r3,20
    316c:	18808136 	bltu	r3,r2,3374 <_malloc_r+0x71c>
    3170:	11401704 	addi	r5,r2,92
    3174:	10c016c4 	addi	r3,r2,91
    3178:	294b883a 	add	r5,r5,r5
    317c:	294b883a 	add	r5,r5,r5
    3180:	294b883a 	add	r5,r5,r5
    3184:	994b883a 	add	r5,r19,r5
    3188:	28800017 	ldw	r2,0(r5)
    318c:	01800074 	movhi	r6,1
    3190:	297ffe04 	addi	r5,r5,-8
    3194:	31897304 	addi	r6,r6,9676
    3198:	28806526 	beq	r5,r2,3330 <_malloc_r+0x6d8>
    319c:	01bfff04 	movi	r6,-4
    31a0:	10c00117 	ldw	r3,4(r2)
    31a4:	1986703a 	and	r3,r3,r6
    31a8:	38c0022e 	bgeu	r7,r3,31b4 <_malloc_r+0x55c>
    31ac:	10800217 	ldw	r2,8(r2)
    31b0:	28bffb1e 	bne	r5,r2,31a0 <__alt_data_end+0xff0031a0>
    31b4:	11400317 	ldw	r5,12(r2)
    31b8:	98c00117 	ldw	r3,4(r19)
    31bc:	81400315 	stw	r5,12(r16)
    31c0:	80800215 	stw	r2,8(r16)
    31c4:	2c000215 	stw	r16,8(r5)
    31c8:	14000315 	stw	r16,12(r2)
    31cc:	003ef806 	br	2db0 <__alt_data_end+0xff002db0>
    31d0:	88c00054 	ori	r3,r17,1
    31d4:	80c00115 	stw	r3,4(r16)
    31d8:	8463883a 	add	r17,r16,r17
    31dc:	34400515 	stw	r17,20(r6)
    31e0:	34400415 	stw	r17,16(r6)
    31e4:	10c00054 	ori	r3,r2,1
    31e8:	8a000315 	stw	r8,12(r17)
    31ec:	8a000215 	stw	r8,8(r17)
    31f0:	88c00115 	stw	r3,4(r17)
    31f4:	88a3883a 	add	r17,r17,r2
    31f8:	88800015 	stw	r2,0(r17)
    31fc:	9009883a 	mov	r4,r18
    3200:	000f9640 	call	f964 <__malloc_unlock>
    3204:	80800204 	addi	r2,r16,8
    3208:	003f3c06 	br	2efc <__alt_data_end+0xff002efc>
    320c:	30c00117 	ldw	r3,4(r6)
    3210:	003ee706 	br	2db0 <__alt_data_end+0xff002db0>
    3214:	5ac00044 	addi	r11,r11,1
    3218:	588000cc 	andi	r2,r11,3
    321c:	31800204 	addi	r6,r6,8
    3220:	103efd1e 	bne	r2,zero,2e18 <__alt_data_end+0xff002e18>
    3224:	00002406 	br	32b8 <_malloc_r+0x660>
    3228:	14000317 	ldw	r16,12(r2)
    322c:	143f251e 	bne	r2,r16,2ec4 <__alt_data_end+0xff002ec4>
    3230:	21000084 	addi	r4,r4,2
    3234:	003ebc06 	br	2d28 <__alt_data_end+0xff002d28>
    3238:	8085883a 	add	r2,r16,r2
    323c:	10c00117 	ldw	r3,4(r2)
    3240:	81000317 	ldw	r4,12(r16)
    3244:	81400217 	ldw	r5,8(r16)
    3248:	18c00054 	ori	r3,r3,1
    324c:	10c00115 	stw	r3,4(r2)
    3250:	29000315 	stw	r4,12(r5)
    3254:	21400215 	stw	r5,8(r4)
    3258:	9009883a 	mov	r4,r18
    325c:	000f9640 	call	f964 <__malloc_unlock>
    3260:	80800204 	addi	r2,r16,8
    3264:	003f2506 	br	2efc <__alt_data_end+0xff002efc>
    3268:	12001704 	addi	r8,r2,92
    326c:	11c016c4 	addi	r7,r2,91
    3270:	4209883a 	add	r4,r8,r8
    3274:	003e9606 	br	2cd0 <__alt_data_end+0xff002cd0>
    3278:	3804d1ba 	srli	r2,r7,6
    327c:	11400e44 	addi	r5,r2,57
    3280:	10c00e04 	addi	r3,r2,56
    3284:	294b883a 	add	r5,r5,r5
    3288:	003fbc06 	br	317c <__alt_data_end+0xff00317c>
    328c:	84ff5926 	beq	r16,r19,2ff4 <__alt_data_end+0xff002ff4>
    3290:	00800074 	movhi	r2,1
    3294:	10897304 	addi	r2,r2,9676
    3298:	14000217 	ldw	r16,8(r2)
    329c:	00bfff04 	movi	r2,-4
    32a0:	80c00117 	ldw	r3,4(r16)
    32a4:	1886703a 	and	r3,r3,r2
    32a8:	003f9106 	br	30f0 <__alt_data_end+0xff0030f0>
    32ac:	60800217 	ldw	r2,8(r12)
    32b0:	213fffc4 	addi	r4,r4,-1
    32b4:	1300651e 	bne	r2,r12,344c <_malloc_r+0x7f4>
    32b8:	208000cc 	andi	r2,r4,3
    32bc:	633ffe04 	addi	r12,r12,-8
    32c0:	103ffa1e 	bne	r2,zero,32ac <__alt_data_end+0xff0032ac>
    32c4:	98800117 	ldw	r2,4(r19)
    32c8:	0146303a 	nor	r3,zero,r5
    32cc:	1884703a 	and	r2,r3,r2
    32d0:	98800115 	stw	r2,4(r19)
    32d4:	294b883a 	add	r5,r5,r5
    32d8:	117f2836 	bltu	r2,r5,2f7c <__alt_data_end+0xff002f7c>
    32dc:	283f2726 	beq	r5,zero,2f7c <__alt_data_end+0xff002f7c>
    32e0:	2886703a 	and	r3,r5,r2
    32e4:	5809883a 	mov	r4,r11
    32e8:	183ec31e 	bne	r3,zero,2df8 <__alt_data_end+0xff002df8>
    32ec:	294b883a 	add	r5,r5,r5
    32f0:	2886703a 	and	r3,r5,r2
    32f4:	21000104 	addi	r4,r4,4
    32f8:	183ffc26 	beq	r3,zero,32ec <__alt_data_end+0xff0032ec>
    32fc:	003ebe06 	br	2df8 <__alt_data_end+0xff002df8>
    3300:	00c05504 	movi	r3,340
    3304:	18801236 	bltu	r3,r2,3350 <_malloc_r+0x6f8>
    3308:	8804d3fa 	srli	r2,r17,15
    330c:	12001e04 	addi	r8,r2,120
    3310:	11c01dc4 	addi	r7,r2,119
    3314:	4209883a 	add	r4,r8,r8
    3318:	003e6d06 	br	2cd0 <__alt_data_end+0xff002cd0>
    331c:	00c40004 	movi	r3,4096
    3320:	003f4606 	br	303c <__alt_data_end+0xff00303c>
    3324:	00800044 	movi	r2,1
    3328:	a0800115 	stw	r2,4(r20)
    332c:	003f7406 	br	3100 <__alt_data_end+0xff003100>
    3330:	1805d0ba 	srai	r2,r3,2
    3334:	01c00044 	movi	r7,1
    3338:	30c00117 	ldw	r3,4(r6)
    333c:	388e983a 	sll	r7,r7,r2
    3340:	2805883a 	mov	r2,r5
    3344:	38c6b03a 	or	r3,r7,r3
    3348:	30c00115 	stw	r3,4(r6)
    334c:	003f9b06 	br	31bc <__alt_data_end+0xff0031bc>
    3350:	00c15504 	movi	r3,1364
    3354:	18801a36 	bltu	r3,r2,33c0 <_malloc_r+0x768>
    3358:	8804d4ba 	srli	r2,r17,18
    335c:	12001f44 	addi	r8,r2,125
    3360:	11c01f04 	addi	r7,r2,124
    3364:	4209883a 	add	r4,r8,r8
    3368:	003e5906 	br	2cd0 <__alt_data_end+0xff002cd0>
    336c:	ad400404 	addi	r21,r21,16
    3370:	003f1706 	br	2fd0 <__alt_data_end+0xff002fd0>
    3374:	00c01504 	movi	r3,84
    3378:	18802336 	bltu	r3,r2,3408 <_malloc_r+0x7b0>
    337c:	3804d33a 	srli	r2,r7,12
    3380:	11401bc4 	addi	r5,r2,111
    3384:	10c01b84 	addi	r3,r2,110
    3388:	294b883a 	add	r5,r5,r5
    338c:	003f7b06 	br	317c <__alt_data_end+0xff00317c>
    3390:	9c000217 	ldw	r16,8(r19)
    3394:	00bfff04 	movi	r2,-4
    3398:	80c00117 	ldw	r3,4(r16)
    339c:	1886703a 	and	r3,r3,r2
    33a0:	003f5306 	br	30f0 <__alt_data_end+0xff0030f0>
    33a4:	3083ffcc 	andi	r2,r6,4095
    33a8:	103f181e 	bne	r2,zero,300c <__alt_data_end+0xff00300c>
    33ac:	99000217 	ldw	r4,8(r19)
    33b0:	b545883a 	add	r2,r22,r21
    33b4:	10800054 	ori	r2,r2,1
    33b8:	20800115 	stw	r2,4(r4)
    33bc:	003f3e06 	br	30b8 <__alt_data_end+0xff0030b8>
    33c0:	01003f84 	movi	r4,254
    33c4:	02001fc4 	movi	r8,127
    33c8:	01c01f84 	movi	r7,126
    33cc:	003e4006 	br	2cd0 <__alt_data_end+0xff002cd0>
    33d0:	00800074 	movhi	r2,1
    33d4:	10902004 	addi	r2,r2,16512
    33d8:	15000015 	stw	r20,0(r2)
    33dc:	003f1106 	br	3024 <__alt_data_end+0xff003024>
    33e0:	00800044 	movi	r2,1
    33e4:	002b883a 	mov	r21,zero
    33e8:	003f1f06 	br	3068 <__alt_data_end+0xff003068>
    33ec:	81400204 	addi	r5,r16,8
    33f0:	9009883a 	mov	r4,r18
    33f4:	0007aa80 	call	7aa8 <_free_r>
    33f8:	00800074 	movhi	r2,1
    33fc:	10970704 	addi	r2,r2,23580
    3400:	10c00017 	ldw	r3,0(r2)
    3404:	003f2c06 	br	30b8 <__alt_data_end+0xff0030b8>
    3408:	00c05504 	movi	r3,340
    340c:	18800536 	bltu	r3,r2,3424 <_malloc_r+0x7cc>
    3410:	3804d3fa 	srli	r2,r7,15
    3414:	11401e04 	addi	r5,r2,120
    3418:	10c01dc4 	addi	r3,r2,119
    341c:	294b883a 	add	r5,r5,r5
    3420:	003f5606 	br	317c <__alt_data_end+0xff00317c>
    3424:	00c15504 	movi	r3,1364
    3428:	18800536 	bltu	r3,r2,3440 <_malloc_r+0x7e8>
    342c:	3804d4ba 	srli	r2,r7,18
    3430:	11401f44 	addi	r5,r2,125
    3434:	10c01f04 	addi	r3,r2,124
    3438:	294b883a 	add	r5,r5,r5
    343c:	003f4f06 	br	317c <__alt_data_end+0xff00317c>
    3440:	01403f84 	movi	r5,254
    3444:	00c01f84 	movi	r3,126
    3448:	003f4c06 	br	317c <__alt_data_end+0xff00317c>
    344c:	98800117 	ldw	r2,4(r19)
    3450:	003fa006 	br	32d4 <__alt_data_end+0xff0032d4>
    3454:	8808d0fa 	srli	r4,r17,3
    3458:	20800044 	addi	r2,r4,1
    345c:	1085883a 	add	r2,r2,r2
    3460:	003e9006 	br	2ea4 <__alt_data_end+0xff002ea4>

00003464 <_printf_r>:
    3464:	defffd04 	addi	sp,sp,-12
    3468:	2805883a 	mov	r2,r5
    346c:	dfc00015 	stw	ra,0(sp)
    3470:	d9800115 	stw	r6,4(sp)
    3474:	d9c00215 	stw	r7,8(sp)
    3478:	21400217 	ldw	r5,8(r4)
    347c:	d9c00104 	addi	r7,sp,4
    3480:	100d883a 	mov	r6,r2
    3484:	00036900 	call	3690 <___vfprintf_internal_r>
    3488:	dfc00017 	ldw	ra,0(sp)
    348c:	dec00304 	addi	sp,sp,12
    3490:	f800283a 	ret

00003494 <printf>:
    3494:	defffc04 	addi	sp,sp,-16
    3498:	dfc00015 	stw	ra,0(sp)
    349c:	d9400115 	stw	r5,4(sp)
    34a0:	d9800215 	stw	r6,8(sp)
    34a4:	d9c00315 	stw	r7,12(sp)
    34a8:	00800074 	movhi	r2,1
    34ac:	10902304 	addi	r2,r2,16524
    34b0:	10800017 	ldw	r2,0(r2)
    34b4:	200b883a 	mov	r5,r4
    34b8:	d9800104 	addi	r6,sp,4
    34bc:	11000217 	ldw	r4,8(r2)
    34c0:	00058880 	call	5888 <__vfprintf_internal>
    34c4:	dfc00017 	ldw	ra,0(sp)
    34c8:	dec00404 	addi	sp,sp,16
    34cc:	f800283a 	ret

000034d0 <_puts_r>:
    34d0:	defff604 	addi	sp,sp,-40
    34d4:	dc000715 	stw	r16,28(sp)
    34d8:	2021883a 	mov	r16,r4
    34dc:	2809883a 	mov	r4,r5
    34e0:	dc400815 	stw	r17,32(sp)
    34e4:	dfc00915 	stw	ra,36(sp)
    34e8:	2823883a 	mov	r17,r5
    34ec:	00035f80 	call	35f8 <strlen>
    34f0:	10c00044 	addi	r3,r2,1
    34f4:	d8800115 	stw	r2,4(sp)
    34f8:	00800074 	movhi	r2,1
    34fc:	1088b504 	addi	r2,r2,8916
    3500:	d8800215 	stw	r2,8(sp)
    3504:	00800044 	movi	r2,1
    3508:	d8800315 	stw	r2,12(sp)
    350c:	00800084 	movi	r2,2
    3510:	dc400015 	stw	r17,0(sp)
    3514:	d8c00615 	stw	r3,24(sp)
    3518:	dec00415 	stw	sp,16(sp)
    351c:	d8800515 	stw	r2,20(sp)
    3520:	80000226 	beq	r16,zero,352c <_puts_r+0x5c>
    3524:	80800e17 	ldw	r2,56(r16)
    3528:	10001426 	beq	r2,zero,357c <_puts_r+0xac>
    352c:	81400217 	ldw	r5,8(r16)
    3530:	2880030b 	ldhu	r2,12(r5)
    3534:	10c8000c 	andi	r3,r2,8192
    3538:	1800061e 	bne	r3,zero,3554 <_puts_r+0x84>
    353c:	29001917 	ldw	r4,100(r5)
    3540:	00f7ffc4 	movi	r3,-8193
    3544:	10880014 	ori	r2,r2,8192
    3548:	20c6703a 	and	r3,r4,r3
    354c:	2880030d 	sth	r2,12(r5)
    3550:	28c01915 	stw	r3,100(r5)
    3554:	d9800404 	addi	r6,sp,16
    3558:	8009883a 	mov	r4,r16
    355c:	0007db80 	call	7db8 <__sfvwrite_r>
    3560:	1000091e 	bne	r2,zero,3588 <_puts_r+0xb8>
    3564:	00800284 	movi	r2,10
    3568:	dfc00917 	ldw	ra,36(sp)
    356c:	dc400817 	ldw	r17,32(sp)
    3570:	dc000717 	ldw	r16,28(sp)
    3574:	dec00a04 	addi	sp,sp,40
    3578:	f800283a 	ret
    357c:	8009883a 	mov	r4,r16
    3580:	00079340 	call	7934 <__sinit>
    3584:	003fe906 	br	352c <__alt_data_end+0xff00352c>
    3588:	00bfffc4 	movi	r2,-1
    358c:	003ff606 	br	3568 <__alt_data_end+0xff003568>

00003590 <puts>:
    3590:	00800074 	movhi	r2,1
    3594:	10902304 	addi	r2,r2,16524
    3598:	200b883a 	mov	r5,r4
    359c:	11000017 	ldw	r4,0(r2)
    35a0:	00034d01 	jmpi	34d0 <_puts_r>

000035a4 <_sbrk_r>:
    35a4:	defffd04 	addi	sp,sp,-12
    35a8:	dc000015 	stw	r16,0(sp)
    35ac:	04000074 	movhi	r16,1
    35b0:	dc400115 	stw	r17,4(sp)
    35b4:	8416fa04 	addi	r16,r16,23528
    35b8:	2023883a 	mov	r17,r4
    35bc:	2809883a 	mov	r4,r5
    35c0:	dfc00215 	stw	ra,8(sp)
    35c4:	80000015 	stw	zero,0(r16)
    35c8:	000fb240 	call	fb24 <sbrk>
    35cc:	00ffffc4 	movi	r3,-1
    35d0:	10c00526 	beq	r2,r3,35e8 <_sbrk_r+0x44>
    35d4:	dfc00217 	ldw	ra,8(sp)
    35d8:	dc400117 	ldw	r17,4(sp)
    35dc:	dc000017 	ldw	r16,0(sp)
    35e0:	dec00304 	addi	sp,sp,12
    35e4:	f800283a 	ret
    35e8:	80c00017 	ldw	r3,0(r16)
    35ec:	183ff926 	beq	r3,zero,35d4 <__alt_data_end+0xff0035d4>
    35f0:	88c00015 	stw	r3,0(r17)
    35f4:	003ff706 	br	35d4 <__alt_data_end+0xff0035d4>

000035f8 <strlen>:
    35f8:	208000cc 	andi	r2,r4,3
    35fc:	10002026 	beq	r2,zero,3680 <strlen+0x88>
    3600:	20800007 	ldb	r2,0(r4)
    3604:	10002026 	beq	r2,zero,3688 <strlen+0x90>
    3608:	2005883a 	mov	r2,r4
    360c:	00000206 	br	3618 <strlen+0x20>
    3610:	10c00007 	ldb	r3,0(r2)
    3614:	18001826 	beq	r3,zero,3678 <strlen+0x80>
    3618:	10800044 	addi	r2,r2,1
    361c:	10c000cc 	andi	r3,r2,3
    3620:	183ffb1e 	bne	r3,zero,3610 <__alt_data_end+0xff003610>
    3624:	10c00017 	ldw	r3,0(r2)
    3628:	01ffbff4 	movhi	r7,65279
    362c:	39ffbfc4 	addi	r7,r7,-257
    3630:	00ca303a 	nor	r5,zero,r3
    3634:	01a02074 	movhi	r6,32897
    3638:	19c7883a 	add	r3,r3,r7
    363c:	31a02004 	addi	r6,r6,-32640
    3640:	1946703a 	and	r3,r3,r5
    3644:	1986703a 	and	r3,r3,r6
    3648:	1800091e 	bne	r3,zero,3670 <strlen+0x78>
    364c:	10800104 	addi	r2,r2,4
    3650:	10c00017 	ldw	r3,0(r2)
    3654:	19cb883a 	add	r5,r3,r7
    3658:	00c6303a 	nor	r3,zero,r3
    365c:	28c6703a 	and	r3,r5,r3
    3660:	1986703a 	and	r3,r3,r6
    3664:	183ff926 	beq	r3,zero,364c <__alt_data_end+0xff00364c>
    3668:	00000106 	br	3670 <strlen+0x78>
    366c:	10800044 	addi	r2,r2,1
    3670:	10c00007 	ldb	r3,0(r2)
    3674:	183ffd1e 	bne	r3,zero,366c <__alt_data_end+0xff00366c>
    3678:	1105c83a 	sub	r2,r2,r4
    367c:	f800283a 	ret
    3680:	2005883a 	mov	r2,r4
    3684:	003fe706 	br	3624 <__alt_data_end+0xff003624>
    3688:	0005883a 	mov	r2,zero
    368c:	f800283a 	ret

00003690 <___vfprintf_internal_r>:
    3690:	deffb804 	addi	sp,sp,-288
    3694:	dfc04715 	stw	ra,284(sp)
    3698:	ddc04515 	stw	r23,276(sp)
    369c:	dd404315 	stw	r21,268(sp)
    36a0:	d9002c15 	stw	r4,176(sp)
    36a4:	282f883a 	mov	r23,r5
    36a8:	302b883a 	mov	r21,r6
    36ac:	d9c02d15 	stw	r7,180(sp)
    36b0:	df004615 	stw	fp,280(sp)
    36b4:	dd804415 	stw	r22,272(sp)
    36b8:	dd004215 	stw	r20,264(sp)
    36bc:	dcc04115 	stw	r19,260(sp)
    36c0:	dc804015 	stw	r18,256(sp)
    36c4:	dc403f15 	stw	r17,252(sp)
    36c8:	dc003e15 	stw	r16,248(sp)
    36cc:	00084a80 	call	84a8 <_localeconv_r>
    36d0:	10800017 	ldw	r2,0(r2)
    36d4:	1009883a 	mov	r4,r2
    36d8:	d8803415 	stw	r2,208(sp)
    36dc:	00035f80 	call	35f8 <strlen>
    36e0:	d8803715 	stw	r2,220(sp)
    36e4:	d8802c17 	ldw	r2,176(sp)
    36e8:	10000226 	beq	r2,zero,36f4 <___vfprintf_internal_r+0x64>
    36ec:	10800e17 	ldw	r2,56(r2)
    36f0:	1000f926 	beq	r2,zero,3ad8 <___vfprintf_internal_r+0x448>
    36f4:	b880030b 	ldhu	r2,12(r23)
    36f8:	10c8000c 	andi	r3,r2,8192
    36fc:	1800061e 	bne	r3,zero,3718 <___vfprintf_internal_r+0x88>
    3700:	b9001917 	ldw	r4,100(r23)
    3704:	00f7ffc4 	movi	r3,-8193
    3708:	10880014 	ori	r2,r2,8192
    370c:	20c6703a 	and	r3,r4,r3
    3710:	b880030d 	sth	r2,12(r23)
    3714:	b8c01915 	stw	r3,100(r23)
    3718:	10c0020c 	andi	r3,r2,8
    371c:	1800c126 	beq	r3,zero,3a24 <___vfprintf_internal_r+0x394>
    3720:	b8c00417 	ldw	r3,16(r23)
    3724:	1800bf26 	beq	r3,zero,3a24 <___vfprintf_internal_r+0x394>
    3728:	1080068c 	andi	r2,r2,26
    372c:	00c00284 	movi	r3,10
    3730:	10c0c426 	beq	r2,r3,3a44 <___vfprintf_internal_r+0x3b4>
    3734:	d8c00404 	addi	r3,sp,16
    3738:	05000074 	movhi	r20,1
    373c:	d9001e04 	addi	r4,sp,120
    3740:	a508c684 	addi	r20,r20,8986
    3744:	d8c01e15 	stw	r3,120(sp)
    3748:	d8002015 	stw	zero,128(sp)
    374c:	d8001f15 	stw	zero,124(sp)
    3750:	d8003315 	stw	zero,204(sp)
    3754:	d8003615 	stw	zero,216(sp)
    3758:	d8003815 	stw	zero,224(sp)
    375c:	1811883a 	mov	r8,r3
    3760:	d8003915 	stw	zero,228(sp)
    3764:	d8003a15 	stw	zero,232(sp)
    3768:	d8002f15 	stw	zero,188(sp)
    376c:	d9002815 	stw	r4,160(sp)
    3770:	a8800007 	ldb	r2,0(r21)
    3774:	10027b26 	beq	r2,zero,4164 <___vfprintf_internal_r+0xad4>
    3778:	00c00944 	movi	r3,37
    377c:	a821883a 	mov	r16,r21
    3780:	10c0021e 	bne	r2,r3,378c <___vfprintf_internal_r+0xfc>
    3784:	00001406 	br	37d8 <___vfprintf_internal_r+0x148>
    3788:	10c00326 	beq	r2,r3,3798 <___vfprintf_internal_r+0x108>
    378c:	84000044 	addi	r16,r16,1
    3790:	80800007 	ldb	r2,0(r16)
    3794:	103ffc1e 	bne	r2,zero,3788 <__alt_data_end+0xff003788>
    3798:	8563c83a 	sub	r17,r16,r21
    379c:	88000e26 	beq	r17,zero,37d8 <___vfprintf_internal_r+0x148>
    37a0:	d8c02017 	ldw	r3,128(sp)
    37a4:	d8801f17 	ldw	r2,124(sp)
    37a8:	45400015 	stw	r21,0(r8)
    37ac:	1c47883a 	add	r3,r3,r17
    37b0:	10800044 	addi	r2,r2,1
    37b4:	d8c02015 	stw	r3,128(sp)
    37b8:	44400115 	stw	r17,4(r8)
    37bc:	d8801f15 	stw	r2,124(sp)
    37c0:	00c001c4 	movi	r3,7
    37c4:	1880a716 	blt	r3,r2,3a64 <___vfprintf_internal_r+0x3d4>
    37c8:	42000204 	addi	r8,r8,8
    37cc:	d9402f17 	ldw	r5,188(sp)
    37d0:	2c4b883a 	add	r5,r5,r17
    37d4:	d9402f15 	stw	r5,188(sp)
    37d8:	80800007 	ldb	r2,0(r16)
    37dc:	1000a826 	beq	r2,zero,3a80 <___vfprintf_internal_r+0x3f0>
    37e0:	84400047 	ldb	r17,1(r16)
    37e4:	00bfffc4 	movi	r2,-1
    37e8:	85400044 	addi	r21,r16,1
    37ec:	d8002785 	stb	zero,158(sp)
    37f0:	0007883a 	mov	r3,zero
    37f4:	000f883a 	mov	r7,zero
    37f8:	d8802915 	stw	r2,164(sp)
    37fc:	d8003115 	stw	zero,196(sp)
    3800:	0025883a 	mov	r18,zero
    3804:	01401604 	movi	r5,88
    3808:	01800244 	movi	r6,9
    380c:	02800a84 	movi	r10,42
    3810:	02401b04 	movi	r9,108
    3814:	ad400044 	addi	r21,r21,1
    3818:	88bff804 	addi	r2,r17,-32
    381c:	28830436 	bltu	r5,r2,4430 <___vfprintf_internal_r+0xda0>
    3820:	100490ba 	slli	r2,r2,2
    3824:	01000034 	movhi	r4,0
    3828:	210e0e04 	addi	r4,r4,14392
    382c:	1105883a 	add	r2,r2,r4
    3830:	10800017 	ldw	r2,0(r2)
    3834:	1000683a 	jmp	r2
    3838:	00004350 	cmplti	zero,zero,269
    383c:	00004430 	cmpltui	zero,zero,272
    3840:	00004430 	cmpltui	zero,zero,272
    3844:	00004370 	cmpltui	zero,zero,269
    3848:	00004430 	cmpltui	zero,zero,272
    384c:	00004430 	cmpltui	zero,zero,272
    3850:	00004430 	cmpltui	zero,zero,272
    3854:	00004430 	cmpltui	zero,zero,272
    3858:	00004430 	cmpltui	zero,zero,272
    385c:	00004430 	cmpltui	zero,zero,272
    3860:	00003ae4 	muli	zero,zero,235
    3864:	0000428c 	andi	zero,zero,266
    3868:	00004430 	cmpltui	zero,zero,272
    386c:	000039ac 	andhi	zero,zero,230
    3870:	00003b0c 	andi	zero,zero,236
    3874:	00004430 	cmpltui	zero,zero,272
    3878:	00003b4c 	andi	zero,zero,237
    387c:	00003b58 	cmpnei	zero,zero,237
    3880:	00003b58 	cmpnei	zero,zero,237
    3884:	00003b58 	cmpnei	zero,zero,237
    3888:	00003b58 	cmpnei	zero,zero,237
    388c:	00003b58 	cmpnei	zero,zero,237
    3890:	00003b58 	cmpnei	zero,zero,237
    3894:	00003b58 	cmpnei	zero,zero,237
    3898:	00003b58 	cmpnei	zero,zero,237
    389c:	00003b58 	cmpnei	zero,zero,237
    38a0:	00004430 	cmpltui	zero,zero,272
    38a4:	00004430 	cmpltui	zero,zero,272
    38a8:	00004430 	cmpltui	zero,zero,272
    38ac:	00004430 	cmpltui	zero,zero,272
    38b0:	00004430 	cmpltui	zero,zero,272
    38b4:	00004430 	cmpltui	zero,zero,272
    38b8:	00004430 	cmpltui	zero,zero,272
    38bc:	00004430 	cmpltui	zero,zero,272
    38c0:	00004430 	cmpltui	zero,zero,272
    38c4:	00004430 	cmpltui	zero,zero,272
    38c8:	00003b8c 	andi	zero,zero,238
    38cc:	00003c48 	cmpgei	zero,zero,241
    38d0:	00004430 	cmpltui	zero,zero,272
    38d4:	00003c48 	cmpgei	zero,zero,241
    38d8:	00004430 	cmpltui	zero,zero,272
    38dc:	00004430 	cmpltui	zero,zero,272
    38e0:	00004430 	cmpltui	zero,zero,272
    38e4:	00004430 	cmpltui	zero,zero,272
    38e8:	00003ce8 	cmpgeui	zero,zero,243
    38ec:	00004430 	cmpltui	zero,zero,272
    38f0:	00004430 	cmpltui	zero,zero,272
    38f4:	00003cf4 	movhi	zero,243
    38f8:	00004430 	cmpltui	zero,zero,272
    38fc:	00004430 	cmpltui	zero,zero,272
    3900:	00004430 	cmpltui	zero,zero,272
    3904:	00004430 	cmpltui	zero,zero,272
    3908:	00004430 	cmpltui	zero,zero,272
    390c:	0000416c 	andhi	zero,zero,261
    3910:	00004430 	cmpltui	zero,zero,272
    3914:	00004430 	cmpltui	zero,zero,272
    3918:	000041cc 	andi	zero,zero,263
    391c:	00004430 	cmpltui	zero,zero,272
    3920:	00004430 	cmpltui	zero,zero,272
    3924:	00004430 	cmpltui	zero,zero,272
    3928:	00004430 	cmpltui	zero,zero,272
    392c:	00004430 	cmpltui	zero,zero,272
    3930:	00004430 	cmpltui	zero,zero,272
    3934:	00004430 	cmpltui	zero,zero,272
    3938:	00004430 	cmpltui	zero,zero,272
    393c:	00004430 	cmpltui	zero,zero,272
    3940:	00004430 	cmpltui	zero,zero,272
    3944:	000043dc 	xori	zero,zero,271
    3948:	0000437c 	xorhi	zero,zero,269
    394c:	00003c48 	cmpgei	zero,zero,241
    3950:	00003c48 	cmpgei	zero,zero,241
    3954:	00003c48 	cmpgei	zero,zero,241
    3958:	0000438c 	andi	zero,zero,270
    395c:	0000437c 	xorhi	zero,zero,269
    3960:	00004430 	cmpltui	zero,zero,272
    3964:	00004430 	cmpltui	zero,zero,272
    3968:	00004398 	cmpnei	zero,zero,270
    396c:	00004430 	cmpltui	zero,zero,272
    3970:	000043a8 	cmpgeui	zero,zero,270
    3974:	0000427c 	xorhi	zero,zero,265
    3978:	000039b8 	rdprs	zero,zero,230
    397c:	0000429c 	xori	zero,zero,266
    3980:	00004430 	cmpltui	zero,zero,272
    3984:	000042a8 	cmpgeui	zero,zero,266
    3988:	00004430 	cmpltui	zero,zero,272
    398c:	00004304 	movi	zero,268
    3990:	00004430 	cmpltui	zero,zero,272
    3994:	00004430 	cmpltui	zero,zero,272
    3998:	00004314 	movui	zero,268
    399c:	d9003117 	ldw	r4,196(sp)
    39a0:	d8802d15 	stw	r2,180(sp)
    39a4:	0109c83a 	sub	r4,zero,r4
    39a8:	d9003115 	stw	r4,196(sp)
    39ac:	94800114 	ori	r18,r18,4
    39b0:	ac400007 	ldb	r17,0(r21)
    39b4:	003f9706 	br	3814 <__alt_data_end+0xff003814>
    39b8:	00800c04 	movi	r2,48
    39bc:	d9002d17 	ldw	r4,180(sp)
    39c0:	d9402917 	ldw	r5,164(sp)
    39c4:	d8802705 	stb	r2,156(sp)
    39c8:	00801e04 	movi	r2,120
    39cc:	d8802745 	stb	r2,157(sp)
    39d0:	d8002785 	stb	zero,158(sp)
    39d4:	20c00104 	addi	r3,r4,4
    39d8:	24c00017 	ldw	r19,0(r4)
    39dc:	002d883a 	mov	r22,zero
    39e0:	90800094 	ori	r2,r18,2
    39e4:	28029a16 	blt	r5,zero,4450 <___vfprintf_internal_r+0xdc0>
    39e8:	00bfdfc4 	movi	r2,-129
    39ec:	90a4703a 	and	r18,r18,r2
    39f0:	d8c02d15 	stw	r3,180(sp)
    39f4:	94800094 	ori	r18,r18,2
    39f8:	9802871e 	bne	r19,zero,4418 <___vfprintf_internal_r+0xd88>
    39fc:	00800074 	movhi	r2,1
    3a00:	1088bf04 	addi	r2,r2,8956
    3a04:	d8803915 	stw	r2,228(sp)
    3a08:	04401e04 	movi	r17,120
    3a0c:	d8802917 	ldw	r2,164(sp)
    3a10:	0039883a 	mov	fp,zero
    3a14:	1001e926 	beq	r2,zero,41bc <___vfprintf_internal_r+0xb2c>
    3a18:	0027883a 	mov	r19,zero
    3a1c:	002d883a 	mov	r22,zero
    3a20:	00020506 	br	4238 <___vfprintf_internal_r+0xba8>
    3a24:	d9002c17 	ldw	r4,176(sp)
    3a28:	b80b883a 	mov	r5,r23
    3a2c:	00059600 	call	5960 <__swsetup_r>
    3a30:	1005ac1e 	bne	r2,zero,50e4 <___vfprintf_internal_r+0x1a54>
    3a34:	b880030b 	ldhu	r2,12(r23)
    3a38:	00c00284 	movi	r3,10
    3a3c:	1080068c 	andi	r2,r2,26
    3a40:	10ff3c1e 	bne	r2,r3,3734 <__alt_data_end+0xff003734>
    3a44:	b880038f 	ldh	r2,14(r23)
    3a48:	103f3a16 	blt	r2,zero,3734 <__alt_data_end+0xff003734>
    3a4c:	d9c02d17 	ldw	r7,180(sp)
    3a50:	d9002c17 	ldw	r4,176(sp)
    3a54:	a80d883a 	mov	r6,r21
    3a58:	b80b883a 	mov	r5,r23
    3a5c:	00058a40 	call	58a4 <__sbprintf>
    3a60:	00001106 	br	3aa8 <___vfprintf_internal_r+0x418>
    3a64:	d9002c17 	ldw	r4,176(sp)
    3a68:	d9801e04 	addi	r6,sp,120
    3a6c:	b80b883a 	mov	r5,r23
    3a70:	000a42c0 	call	a42c <__sprint_r>
    3a74:	1000081e 	bne	r2,zero,3a98 <___vfprintf_internal_r+0x408>
    3a78:	da000404 	addi	r8,sp,16
    3a7c:	003f5306 	br	37cc <__alt_data_end+0xff0037cc>
    3a80:	d8802017 	ldw	r2,128(sp)
    3a84:	10000426 	beq	r2,zero,3a98 <___vfprintf_internal_r+0x408>
    3a88:	d9002c17 	ldw	r4,176(sp)
    3a8c:	d9801e04 	addi	r6,sp,120
    3a90:	b80b883a 	mov	r5,r23
    3a94:	000a42c0 	call	a42c <__sprint_r>
    3a98:	b880030b 	ldhu	r2,12(r23)
    3a9c:	1080100c 	andi	r2,r2,64
    3aa0:	1005901e 	bne	r2,zero,50e4 <___vfprintf_internal_r+0x1a54>
    3aa4:	d8802f17 	ldw	r2,188(sp)
    3aa8:	dfc04717 	ldw	ra,284(sp)
    3aac:	df004617 	ldw	fp,280(sp)
    3ab0:	ddc04517 	ldw	r23,276(sp)
    3ab4:	dd804417 	ldw	r22,272(sp)
    3ab8:	dd404317 	ldw	r21,268(sp)
    3abc:	dd004217 	ldw	r20,264(sp)
    3ac0:	dcc04117 	ldw	r19,260(sp)
    3ac4:	dc804017 	ldw	r18,256(sp)
    3ac8:	dc403f17 	ldw	r17,252(sp)
    3acc:	dc003e17 	ldw	r16,248(sp)
    3ad0:	dec04804 	addi	sp,sp,288
    3ad4:	f800283a 	ret
    3ad8:	d9002c17 	ldw	r4,176(sp)
    3adc:	00079340 	call	7934 <__sinit>
    3ae0:	003f0406 	br	36f4 <__alt_data_end+0xff0036f4>
    3ae4:	d8802d17 	ldw	r2,180(sp)
    3ae8:	d9002d17 	ldw	r4,180(sp)
    3aec:	10800017 	ldw	r2,0(r2)
    3af0:	d8803115 	stw	r2,196(sp)
    3af4:	20800104 	addi	r2,r4,4
    3af8:	d9003117 	ldw	r4,196(sp)
    3afc:	203fa716 	blt	r4,zero,399c <__alt_data_end+0xff00399c>
    3b00:	d8802d15 	stw	r2,180(sp)
    3b04:	ac400007 	ldb	r17,0(r21)
    3b08:	003f4206 	br	3814 <__alt_data_end+0xff003814>
    3b0c:	ac400007 	ldb	r17,0(r21)
    3b10:	aac00044 	addi	r11,r21,1
    3b14:	8a872826 	beq	r17,r10,57b8 <___vfprintf_internal_r+0x2128>
    3b18:	88bff404 	addi	r2,r17,-48
    3b1c:	0009883a 	mov	r4,zero
    3b20:	30867d36 	bltu	r6,r2,5518 <___vfprintf_internal_r+0x1e88>
    3b24:	5c400007 	ldb	r17,0(r11)
    3b28:	210002a4 	muli	r4,r4,10
    3b2c:	5d400044 	addi	r21,r11,1
    3b30:	a817883a 	mov	r11,r21
    3b34:	2089883a 	add	r4,r4,r2
    3b38:	88bff404 	addi	r2,r17,-48
    3b3c:	30bff92e 	bgeu	r6,r2,3b24 <__alt_data_end+0xff003b24>
    3b40:	2005c916 	blt	r4,zero,5268 <___vfprintf_internal_r+0x1bd8>
    3b44:	d9002915 	stw	r4,164(sp)
    3b48:	003f3306 	br	3818 <__alt_data_end+0xff003818>
    3b4c:	94802014 	ori	r18,r18,128
    3b50:	ac400007 	ldb	r17,0(r21)
    3b54:	003f2f06 	br	3814 <__alt_data_end+0xff003814>
    3b58:	a809883a 	mov	r4,r21
    3b5c:	d8003115 	stw	zero,196(sp)
    3b60:	88bff404 	addi	r2,r17,-48
    3b64:	0017883a 	mov	r11,zero
    3b68:	24400007 	ldb	r17,0(r4)
    3b6c:	5ac002a4 	muli	r11,r11,10
    3b70:	ad400044 	addi	r21,r21,1
    3b74:	a809883a 	mov	r4,r21
    3b78:	12d7883a 	add	r11,r2,r11
    3b7c:	88bff404 	addi	r2,r17,-48
    3b80:	30bff92e 	bgeu	r6,r2,3b68 <__alt_data_end+0xff003b68>
    3b84:	dac03115 	stw	r11,196(sp)
    3b88:	003f2306 	br	3818 <__alt_data_end+0xff003818>
    3b8c:	18c03fcc 	andi	r3,r3,255
    3b90:	18072b1e 	bne	r3,zero,5840 <___vfprintf_internal_r+0x21b0>
    3b94:	94800414 	ori	r18,r18,16
    3b98:	9080080c 	andi	r2,r18,32
    3b9c:	10037b26 	beq	r2,zero,498c <___vfprintf_internal_r+0x12fc>
    3ba0:	d9402d17 	ldw	r5,180(sp)
    3ba4:	28800117 	ldw	r2,4(r5)
    3ba8:	2cc00017 	ldw	r19,0(r5)
    3bac:	29400204 	addi	r5,r5,8
    3bb0:	d9402d15 	stw	r5,180(sp)
    3bb4:	102d883a 	mov	r22,r2
    3bb8:	10044b16 	blt	r2,zero,4ce8 <___vfprintf_internal_r+0x1658>
    3bbc:	d9402917 	ldw	r5,164(sp)
    3bc0:	df002783 	ldbu	fp,158(sp)
    3bc4:	2803bc16 	blt	r5,zero,4ab8 <___vfprintf_internal_r+0x1428>
    3bc8:	00ffdfc4 	movi	r3,-129
    3bcc:	9d84b03a 	or	r2,r19,r22
    3bd0:	90e4703a 	and	r18,r18,r3
    3bd4:	10017726 	beq	r2,zero,41b4 <___vfprintf_internal_r+0xb24>
    3bd8:	b0038326 	beq	r22,zero,49e8 <___vfprintf_internal_r+0x1358>
    3bdc:	dc402a15 	stw	r17,168(sp)
    3be0:	dc001e04 	addi	r16,sp,120
    3be4:	b023883a 	mov	r17,r22
    3be8:	402d883a 	mov	r22,r8
    3bec:	9809883a 	mov	r4,r19
    3bf0:	880b883a 	mov	r5,r17
    3bf4:	01800284 	movi	r6,10
    3bf8:	000f883a 	mov	r7,zero
    3bfc:	000c8240 	call	c824 <__umoddi3>
    3c00:	10800c04 	addi	r2,r2,48
    3c04:	843fffc4 	addi	r16,r16,-1
    3c08:	9809883a 	mov	r4,r19
    3c0c:	880b883a 	mov	r5,r17
    3c10:	80800005 	stb	r2,0(r16)
    3c14:	01800284 	movi	r6,10
    3c18:	000f883a 	mov	r7,zero
    3c1c:	000c2ac0 	call	c2ac <__udivdi3>
    3c20:	1027883a 	mov	r19,r2
    3c24:	10c4b03a 	or	r2,r2,r3
    3c28:	1823883a 	mov	r17,r3
    3c2c:	103fef1e 	bne	r2,zero,3bec <__alt_data_end+0xff003bec>
    3c30:	d8c02817 	ldw	r3,160(sp)
    3c34:	dc402a17 	ldw	r17,168(sp)
    3c38:	b011883a 	mov	r8,r22
    3c3c:	1c07c83a 	sub	r3,r3,r16
    3c40:	d8c02e15 	stw	r3,184(sp)
    3c44:	00005906 	br	3dac <___vfprintf_internal_r+0x71c>
    3c48:	18c03fcc 	andi	r3,r3,255
    3c4c:	1806fa1e 	bne	r3,zero,5838 <___vfprintf_internal_r+0x21a8>
    3c50:	9080020c 	andi	r2,r18,8
    3c54:	10048a26 	beq	r2,zero,4e80 <___vfprintf_internal_r+0x17f0>
    3c58:	d8c02d17 	ldw	r3,180(sp)
    3c5c:	d9002d17 	ldw	r4,180(sp)
    3c60:	d9402d17 	ldw	r5,180(sp)
    3c64:	18c00017 	ldw	r3,0(r3)
    3c68:	21000117 	ldw	r4,4(r4)
    3c6c:	29400204 	addi	r5,r5,8
    3c70:	d8c03615 	stw	r3,216(sp)
    3c74:	d9003815 	stw	r4,224(sp)
    3c78:	d9402d15 	stw	r5,180(sp)
    3c7c:	d9003617 	ldw	r4,216(sp)
    3c80:	d9403817 	ldw	r5,224(sp)
    3c84:	da003d15 	stw	r8,244(sp)
    3c88:	04000044 	movi	r16,1
    3c8c:	000a0a40 	call	a0a4 <__fpclassifyd>
    3c90:	da003d17 	ldw	r8,244(sp)
    3c94:	14041f1e 	bne	r2,r16,4d14 <___vfprintf_internal_r+0x1684>
    3c98:	d9003617 	ldw	r4,216(sp)
    3c9c:	d9403817 	ldw	r5,224(sp)
    3ca0:	000d883a 	mov	r6,zero
    3ca4:	000f883a 	mov	r7,zero
    3ca8:	000e0540 	call	e054 <__ledf2>
    3cac:	da003d17 	ldw	r8,244(sp)
    3cb0:	1005be16 	blt	r2,zero,53ac <___vfprintf_internal_r+0x1d1c>
    3cb4:	df002783 	ldbu	fp,158(sp)
    3cb8:	008011c4 	movi	r2,71
    3cbc:	1445330e 	bge	r2,r17,518c <___vfprintf_internal_r+0x1afc>
    3cc0:	04000074 	movhi	r16,1
    3cc4:	8408b704 	addi	r16,r16,8924
    3cc8:	00c000c4 	movi	r3,3
    3ccc:	00bfdfc4 	movi	r2,-129
    3cd0:	d8c02a15 	stw	r3,168(sp)
    3cd4:	90a4703a 	and	r18,r18,r2
    3cd8:	d8c02e15 	stw	r3,184(sp)
    3cdc:	d8002915 	stw	zero,164(sp)
    3ce0:	d8003215 	stw	zero,200(sp)
    3ce4:	00003706 	br	3dc4 <___vfprintf_internal_r+0x734>
    3ce8:	94800214 	ori	r18,r18,8
    3cec:	ac400007 	ldb	r17,0(r21)
    3cf0:	003ec806 	br	3814 <__alt_data_end+0xff003814>
    3cf4:	18c03fcc 	andi	r3,r3,255
    3cf8:	1806db1e 	bne	r3,zero,5868 <___vfprintf_internal_r+0x21d8>
    3cfc:	94800414 	ori	r18,r18,16
    3d00:	9080080c 	andi	r2,r18,32
    3d04:	1002d826 	beq	r2,zero,4868 <___vfprintf_internal_r+0x11d8>
    3d08:	d9402d17 	ldw	r5,180(sp)
    3d0c:	d8c02917 	ldw	r3,164(sp)
    3d10:	d8002785 	stb	zero,158(sp)
    3d14:	28800204 	addi	r2,r5,8
    3d18:	2cc00017 	ldw	r19,0(r5)
    3d1c:	2d800117 	ldw	r22,4(r5)
    3d20:	18048f16 	blt	r3,zero,4f60 <___vfprintf_internal_r+0x18d0>
    3d24:	013fdfc4 	movi	r4,-129
    3d28:	9d86b03a 	or	r3,r19,r22
    3d2c:	d8802d15 	stw	r2,180(sp)
    3d30:	9124703a 	and	r18,r18,r4
    3d34:	1802d91e 	bne	r3,zero,489c <___vfprintf_internal_r+0x120c>
    3d38:	d8c02917 	ldw	r3,164(sp)
    3d3c:	0039883a 	mov	fp,zero
    3d40:	1805c326 	beq	r3,zero,5450 <___vfprintf_internal_r+0x1dc0>
    3d44:	0027883a 	mov	r19,zero
    3d48:	002d883a 	mov	r22,zero
    3d4c:	dc001e04 	addi	r16,sp,120
    3d50:	9806d0fa 	srli	r3,r19,3
    3d54:	b008977a 	slli	r4,r22,29
    3d58:	b02cd0fa 	srli	r22,r22,3
    3d5c:	9cc001cc 	andi	r19,r19,7
    3d60:	98800c04 	addi	r2,r19,48
    3d64:	843fffc4 	addi	r16,r16,-1
    3d68:	20e6b03a 	or	r19,r4,r3
    3d6c:	80800005 	stb	r2,0(r16)
    3d70:	9d86b03a 	or	r3,r19,r22
    3d74:	183ff61e 	bne	r3,zero,3d50 <__alt_data_end+0xff003d50>
    3d78:	90c0004c 	andi	r3,r18,1
    3d7c:	18013b26 	beq	r3,zero,426c <___vfprintf_internal_r+0xbdc>
    3d80:	10803fcc 	andi	r2,r2,255
    3d84:	1080201c 	xori	r2,r2,128
    3d88:	10bfe004 	addi	r2,r2,-128
    3d8c:	00c00c04 	movi	r3,48
    3d90:	10c13626 	beq	r2,r3,426c <___vfprintf_internal_r+0xbdc>
    3d94:	80ffffc5 	stb	r3,-1(r16)
    3d98:	d8c02817 	ldw	r3,160(sp)
    3d9c:	80bfffc4 	addi	r2,r16,-1
    3da0:	1021883a 	mov	r16,r2
    3da4:	1887c83a 	sub	r3,r3,r2
    3da8:	d8c02e15 	stw	r3,184(sp)
    3dac:	d8802e17 	ldw	r2,184(sp)
    3db0:	d9002917 	ldw	r4,164(sp)
    3db4:	1100010e 	bge	r2,r4,3dbc <___vfprintf_internal_r+0x72c>
    3db8:	2005883a 	mov	r2,r4
    3dbc:	d8802a15 	stw	r2,168(sp)
    3dc0:	d8003215 	stw	zero,200(sp)
    3dc4:	e7003fcc 	andi	fp,fp,255
    3dc8:	e700201c 	xori	fp,fp,128
    3dcc:	e73fe004 	addi	fp,fp,-128
    3dd0:	e0000326 	beq	fp,zero,3de0 <___vfprintf_internal_r+0x750>
    3dd4:	d8c02a17 	ldw	r3,168(sp)
    3dd8:	18c00044 	addi	r3,r3,1
    3ddc:	d8c02a15 	stw	r3,168(sp)
    3de0:	90c0008c 	andi	r3,r18,2
    3de4:	d8c02b15 	stw	r3,172(sp)
    3de8:	18000326 	beq	r3,zero,3df8 <___vfprintf_internal_r+0x768>
    3dec:	d8c02a17 	ldw	r3,168(sp)
    3df0:	18c00084 	addi	r3,r3,2
    3df4:	d8c02a15 	stw	r3,168(sp)
    3df8:	90c0210c 	andi	r3,r18,132
    3dfc:	d8c03015 	stw	r3,192(sp)
    3e00:	1801a31e 	bne	r3,zero,4490 <___vfprintf_internal_r+0xe00>
    3e04:	d9003117 	ldw	r4,196(sp)
    3e08:	d8c02a17 	ldw	r3,168(sp)
    3e0c:	20e7c83a 	sub	r19,r4,r3
    3e10:	04c19f0e 	bge	zero,r19,4490 <___vfprintf_internal_r+0xe00>
    3e14:	02400404 	movi	r9,16
    3e18:	d8c02017 	ldw	r3,128(sp)
    3e1c:	d8801f17 	ldw	r2,124(sp)
    3e20:	4cc50d0e 	bge	r9,r19,5258 <___vfprintf_internal_r+0x1bc8>
    3e24:	01400074 	movhi	r5,1
    3e28:	2948ca84 	addi	r5,r5,9002
    3e2c:	dc403b15 	stw	r17,236(sp)
    3e30:	d9403515 	stw	r5,212(sp)
    3e34:	9823883a 	mov	r17,r19
    3e38:	482d883a 	mov	r22,r9
    3e3c:	9027883a 	mov	r19,r18
    3e40:	070001c4 	movi	fp,7
    3e44:	8025883a 	mov	r18,r16
    3e48:	dc002c17 	ldw	r16,176(sp)
    3e4c:	00000306 	br	3e5c <___vfprintf_internal_r+0x7cc>
    3e50:	8c7ffc04 	addi	r17,r17,-16
    3e54:	42000204 	addi	r8,r8,8
    3e58:	b440130e 	bge	r22,r17,3ea8 <___vfprintf_internal_r+0x818>
    3e5c:	01000074 	movhi	r4,1
    3e60:	18c00404 	addi	r3,r3,16
    3e64:	10800044 	addi	r2,r2,1
    3e68:	2108ca84 	addi	r4,r4,9002
    3e6c:	41000015 	stw	r4,0(r8)
    3e70:	45800115 	stw	r22,4(r8)
    3e74:	d8c02015 	stw	r3,128(sp)
    3e78:	d8801f15 	stw	r2,124(sp)
    3e7c:	e0bff40e 	bge	fp,r2,3e50 <__alt_data_end+0xff003e50>
    3e80:	d9801e04 	addi	r6,sp,120
    3e84:	b80b883a 	mov	r5,r23
    3e88:	8009883a 	mov	r4,r16
    3e8c:	000a42c0 	call	a42c <__sprint_r>
    3e90:	103f011e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    3e94:	8c7ffc04 	addi	r17,r17,-16
    3e98:	d8c02017 	ldw	r3,128(sp)
    3e9c:	d8801f17 	ldw	r2,124(sp)
    3ea0:	da000404 	addi	r8,sp,16
    3ea4:	b47fed16 	blt	r22,r17,3e5c <__alt_data_end+0xff003e5c>
    3ea8:	9021883a 	mov	r16,r18
    3eac:	9825883a 	mov	r18,r19
    3eb0:	8827883a 	mov	r19,r17
    3eb4:	dc403b17 	ldw	r17,236(sp)
    3eb8:	d9403517 	ldw	r5,212(sp)
    3ebc:	98c7883a 	add	r3,r19,r3
    3ec0:	10800044 	addi	r2,r2,1
    3ec4:	41400015 	stw	r5,0(r8)
    3ec8:	44c00115 	stw	r19,4(r8)
    3ecc:	d8c02015 	stw	r3,128(sp)
    3ed0:	d8801f15 	stw	r2,124(sp)
    3ed4:	010001c4 	movi	r4,7
    3ed8:	2082a316 	blt	r4,r2,4968 <___vfprintf_internal_r+0x12d8>
    3edc:	df002787 	ldb	fp,158(sp)
    3ee0:	42000204 	addi	r8,r8,8
    3ee4:	e0000c26 	beq	fp,zero,3f18 <___vfprintf_internal_r+0x888>
    3ee8:	d8801f17 	ldw	r2,124(sp)
    3eec:	d9002784 	addi	r4,sp,158
    3ef0:	18c00044 	addi	r3,r3,1
    3ef4:	10800044 	addi	r2,r2,1
    3ef8:	41000015 	stw	r4,0(r8)
    3efc:	01000044 	movi	r4,1
    3f00:	41000115 	stw	r4,4(r8)
    3f04:	d8c02015 	stw	r3,128(sp)
    3f08:	d8801f15 	stw	r2,124(sp)
    3f0c:	010001c4 	movi	r4,7
    3f10:	20823c16 	blt	r4,r2,4804 <___vfprintf_internal_r+0x1174>
    3f14:	42000204 	addi	r8,r8,8
    3f18:	d8802b17 	ldw	r2,172(sp)
    3f1c:	10000c26 	beq	r2,zero,3f50 <___vfprintf_internal_r+0x8c0>
    3f20:	d8801f17 	ldw	r2,124(sp)
    3f24:	d9002704 	addi	r4,sp,156
    3f28:	18c00084 	addi	r3,r3,2
    3f2c:	10800044 	addi	r2,r2,1
    3f30:	41000015 	stw	r4,0(r8)
    3f34:	01000084 	movi	r4,2
    3f38:	41000115 	stw	r4,4(r8)
    3f3c:	d8c02015 	stw	r3,128(sp)
    3f40:	d8801f15 	stw	r2,124(sp)
    3f44:	010001c4 	movi	r4,7
    3f48:	20823616 	blt	r4,r2,4824 <___vfprintf_internal_r+0x1194>
    3f4c:	42000204 	addi	r8,r8,8
    3f50:	d9003017 	ldw	r4,192(sp)
    3f54:	00802004 	movi	r2,128
    3f58:	20819926 	beq	r4,r2,45c0 <___vfprintf_internal_r+0xf30>
    3f5c:	d9402917 	ldw	r5,164(sp)
    3f60:	d8802e17 	ldw	r2,184(sp)
    3f64:	28adc83a 	sub	r22,r5,r2
    3f68:	0580310e 	bge	zero,r22,4030 <___vfprintf_internal_r+0x9a0>
    3f6c:	07000404 	movi	fp,16
    3f70:	d8801f17 	ldw	r2,124(sp)
    3f74:	e584140e 	bge	fp,r22,4fc8 <___vfprintf_internal_r+0x1938>
    3f78:	01400074 	movhi	r5,1
    3f7c:	2948c684 	addi	r5,r5,8986
    3f80:	dc402915 	stw	r17,164(sp)
    3f84:	d9402b15 	stw	r5,172(sp)
    3f88:	b023883a 	mov	r17,r22
    3f8c:	04c001c4 	movi	r19,7
    3f90:	a82d883a 	mov	r22,r21
    3f94:	902b883a 	mov	r21,r18
    3f98:	8025883a 	mov	r18,r16
    3f9c:	dc002c17 	ldw	r16,176(sp)
    3fa0:	00000306 	br	3fb0 <___vfprintf_internal_r+0x920>
    3fa4:	8c7ffc04 	addi	r17,r17,-16
    3fa8:	42000204 	addi	r8,r8,8
    3fac:	e440110e 	bge	fp,r17,3ff4 <___vfprintf_internal_r+0x964>
    3fb0:	18c00404 	addi	r3,r3,16
    3fb4:	10800044 	addi	r2,r2,1
    3fb8:	45000015 	stw	r20,0(r8)
    3fbc:	47000115 	stw	fp,4(r8)
    3fc0:	d8c02015 	stw	r3,128(sp)
    3fc4:	d8801f15 	stw	r2,124(sp)
    3fc8:	98bff60e 	bge	r19,r2,3fa4 <__alt_data_end+0xff003fa4>
    3fcc:	d9801e04 	addi	r6,sp,120
    3fd0:	b80b883a 	mov	r5,r23
    3fd4:	8009883a 	mov	r4,r16
    3fd8:	000a42c0 	call	a42c <__sprint_r>
    3fdc:	103eae1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    3fe0:	8c7ffc04 	addi	r17,r17,-16
    3fe4:	d8c02017 	ldw	r3,128(sp)
    3fe8:	d8801f17 	ldw	r2,124(sp)
    3fec:	da000404 	addi	r8,sp,16
    3ff0:	e47fef16 	blt	fp,r17,3fb0 <__alt_data_end+0xff003fb0>
    3ff4:	9021883a 	mov	r16,r18
    3ff8:	a825883a 	mov	r18,r21
    3ffc:	b02b883a 	mov	r21,r22
    4000:	882d883a 	mov	r22,r17
    4004:	dc402917 	ldw	r17,164(sp)
    4008:	d9002b17 	ldw	r4,172(sp)
    400c:	1d87883a 	add	r3,r3,r22
    4010:	10800044 	addi	r2,r2,1
    4014:	41000015 	stw	r4,0(r8)
    4018:	45800115 	stw	r22,4(r8)
    401c:	d8c02015 	stw	r3,128(sp)
    4020:	d8801f15 	stw	r2,124(sp)
    4024:	010001c4 	movi	r4,7
    4028:	2081ee16 	blt	r4,r2,47e4 <___vfprintf_internal_r+0x1154>
    402c:	42000204 	addi	r8,r8,8
    4030:	9080400c 	andi	r2,r18,256
    4034:	1001181e 	bne	r2,zero,4498 <___vfprintf_internal_r+0xe08>
    4038:	d9402e17 	ldw	r5,184(sp)
    403c:	d8801f17 	ldw	r2,124(sp)
    4040:	44000015 	stw	r16,0(r8)
    4044:	1947883a 	add	r3,r3,r5
    4048:	10800044 	addi	r2,r2,1
    404c:	41400115 	stw	r5,4(r8)
    4050:	d8c02015 	stw	r3,128(sp)
    4054:	d8801f15 	stw	r2,124(sp)
    4058:	010001c4 	movi	r4,7
    405c:	2081d316 	blt	r4,r2,47ac <___vfprintf_internal_r+0x111c>
    4060:	42000204 	addi	r8,r8,8
    4064:	9480010c 	andi	r18,r18,4
    4068:	90003226 	beq	r18,zero,4134 <___vfprintf_internal_r+0xaa4>
    406c:	d9403117 	ldw	r5,196(sp)
    4070:	d8802a17 	ldw	r2,168(sp)
    4074:	28a1c83a 	sub	r16,r5,r2
    4078:	04002e0e 	bge	zero,r16,4134 <___vfprintf_internal_r+0xaa4>
    407c:	04400404 	movi	r17,16
    4080:	d8801f17 	ldw	r2,124(sp)
    4084:	8c04a20e 	bge	r17,r16,5310 <___vfprintf_internal_r+0x1c80>
    4088:	01400074 	movhi	r5,1
    408c:	2948ca84 	addi	r5,r5,9002
    4090:	d9403515 	stw	r5,212(sp)
    4094:	048001c4 	movi	r18,7
    4098:	dcc02c17 	ldw	r19,176(sp)
    409c:	00000306 	br	40ac <___vfprintf_internal_r+0xa1c>
    40a0:	843ffc04 	addi	r16,r16,-16
    40a4:	42000204 	addi	r8,r8,8
    40a8:	8c00130e 	bge	r17,r16,40f8 <___vfprintf_internal_r+0xa68>
    40ac:	01000074 	movhi	r4,1
    40b0:	18c00404 	addi	r3,r3,16
    40b4:	10800044 	addi	r2,r2,1
    40b8:	2108ca84 	addi	r4,r4,9002
    40bc:	41000015 	stw	r4,0(r8)
    40c0:	44400115 	stw	r17,4(r8)
    40c4:	d8c02015 	stw	r3,128(sp)
    40c8:	d8801f15 	stw	r2,124(sp)
    40cc:	90bff40e 	bge	r18,r2,40a0 <__alt_data_end+0xff0040a0>
    40d0:	d9801e04 	addi	r6,sp,120
    40d4:	b80b883a 	mov	r5,r23
    40d8:	9809883a 	mov	r4,r19
    40dc:	000a42c0 	call	a42c <__sprint_r>
    40e0:	103e6d1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    40e4:	843ffc04 	addi	r16,r16,-16
    40e8:	d8c02017 	ldw	r3,128(sp)
    40ec:	d8801f17 	ldw	r2,124(sp)
    40f0:	da000404 	addi	r8,sp,16
    40f4:	8c3fed16 	blt	r17,r16,40ac <__alt_data_end+0xff0040ac>
    40f8:	d9403517 	ldw	r5,212(sp)
    40fc:	1c07883a 	add	r3,r3,r16
    4100:	10800044 	addi	r2,r2,1
    4104:	41400015 	stw	r5,0(r8)
    4108:	44000115 	stw	r16,4(r8)
    410c:	d8c02015 	stw	r3,128(sp)
    4110:	d8801f15 	stw	r2,124(sp)
    4114:	010001c4 	movi	r4,7
    4118:	2080060e 	bge	r4,r2,4134 <___vfprintf_internal_r+0xaa4>
    411c:	d9002c17 	ldw	r4,176(sp)
    4120:	d9801e04 	addi	r6,sp,120
    4124:	b80b883a 	mov	r5,r23
    4128:	000a42c0 	call	a42c <__sprint_r>
    412c:	103e5a1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4130:	d8c02017 	ldw	r3,128(sp)
    4134:	d8803117 	ldw	r2,196(sp)
    4138:	d9002a17 	ldw	r4,168(sp)
    413c:	1100010e 	bge	r2,r4,4144 <___vfprintf_internal_r+0xab4>
    4140:	2005883a 	mov	r2,r4
    4144:	d9402f17 	ldw	r5,188(sp)
    4148:	288b883a 	add	r5,r5,r2
    414c:	d9402f15 	stw	r5,188(sp)
    4150:	18019e1e 	bne	r3,zero,47cc <___vfprintf_internal_r+0x113c>
    4154:	a8800007 	ldb	r2,0(r21)
    4158:	d8001f15 	stw	zero,124(sp)
    415c:	da000404 	addi	r8,sp,16
    4160:	103d851e 	bne	r2,zero,3778 <__alt_data_end+0xff003778>
    4164:	a821883a 	mov	r16,r21
    4168:	003d9b06 	br	37d8 <__alt_data_end+0xff0037d8>
    416c:	18c03fcc 	andi	r3,r3,255
    4170:	1805c11e 	bne	r3,zero,5878 <___vfprintf_internal_r+0x21e8>
    4174:	94800414 	ori	r18,r18,16
    4178:	9080080c 	andi	r2,r18,32
    417c:	10020c26 	beq	r2,zero,49b0 <___vfprintf_internal_r+0x1320>
    4180:	d8802d17 	ldw	r2,180(sp)
    4184:	d9002917 	ldw	r4,164(sp)
    4188:	d8002785 	stb	zero,158(sp)
    418c:	10c00204 	addi	r3,r2,8
    4190:	14c00017 	ldw	r19,0(r2)
    4194:	15800117 	ldw	r22,4(r2)
    4198:	20040f16 	blt	r4,zero,51d8 <___vfprintf_internal_r+0x1b48>
    419c:	013fdfc4 	movi	r4,-129
    41a0:	9d84b03a 	or	r2,r19,r22
    41a4:	d8c02d15 	stw	r3,180(sp)
    41a8:	9124703a 	and	r18,r18,r4
    41ac:	0039883a 	mov	fp,zero
    41b0:	103e891e 	bne	r2,zero,3bd8 <__alt_data_end+0xff003bd8>
    41b4:	d9002917 	ldw	r4,164(sp)
    41b8:	2002c11e 	bne	r4,zero,4cc0 <___vfprintf_internal_r+0x1630>
    41bc:	d8002915 	stw	zero,164(sp)
    41c0:	d8002e15 	stw	zero,184(sp)
    41c4:	dc001e04 	addi	r16,sp,120
    41c8:	003ef806 	br	3dac <__alt_data_end+0xff003dac>
    41cc:	18c03fcc 	andi	r3,r3,255
    41d0:	18059d1e 	bne	r3,zero,5848 <___vfprintf_internal_r+0x21b8>
    41d4:	01400074 	movhi	r5,1
    41d8:	2948ba04 	addi	r5,r5,8936
    41dc:	d9403915 	stw	r5,228(sp)
    41e0:	9080080c 	andi	r2,r18,32
    41e4:	10005226 	beq	r2,zero,4330 <___vfprintf_internal_r+0xca0>
    41e8:	d8802d17 	ldw	r2,180(sp)
    41ec:	14c00017 	ldw	r19,0(r2)
    41f0:	15800117 	ldw	r22,4(r2)
    41f4:	10800204 	addi	r2,r2,8
    41f8:	d8802d15 	stw	r2,180(sp)
    41fc:	9080004c 	andi	r2,r18,1
    4200:	10019026 	beq	r2,zero,4844 <___vfprintf_internal_r+0x11b4>
    4204:	9d84b03a 	or	r2,r19,r22
    4208:	10036926 	beq	r2,zero,4fb0 <___vfprintf_internal_r+0x1920>
    420c:	d8c02917 	ldw	r3,164(sp)
    4210:	00800c04 	movi	r2,48
    4214:	d8802705 	stb	r2,156(sp)
    4218:	dc402745 	stb	r17,157(sp)
    421c:	d8002785 	stb	zero,158(sp)
    4220:	90800094 	ori	r2,r18,2
    4224:	18045d16 	blt	r3,zero,539c <___vfprintf_internal_r+0x1d0c>
    4228:	00bfdfc4 	movi	r2,-129
    422c:	90a4703a 	and	r18,r18,r2
    4230:	94800094 	ori	r18,r18,2
    4234:	0039883a 	mov	fp,zero
    4238:	d9003917 	ldw	r4,228(sp)
    423c:	dc001e04 	addi	r16,sp,120
    4240:	988003cc 	andi	r2,r19,15
    4244:	b006973a 	slli	r3,r22,28
    4248:	2085883a 	add	r2,r4,r2
    424c:	9826d13a 	srli	r19,r19,4
    4250:	10800003 	ldbu	r2,0(r2)
    4254:	b02cd13a 	srli	r22,r22,4
    4258:	843fffc4 	addi	r16,r16,-1
    425c:	1ce6b03a 	or	r19,r3,r19
    4260:	80800005 	stb	r2,0(r16)
    4264:	9d84b03a 	or	r2,r19,r22
    4268:	103ff51e 	bne	r2,zero,4240 <__alt_data_end+0xff004240>
    426c:	d8c02817 	ldw	r3,160(sp)
    4270:	1c07c83a 	sub	r3,r3,r16
    4274:	d8c02e15 	stw	r3,184(sp)
    4278:	003ecc06 	br	3dac <__alt_data_end+0xff003dac>
    427c:	18c03fcc 	andi	r3,r3,255
    4280:	183e9f26 	beq	r3,zero,3d00 <__alt_data_end+0xff003d00>
    4284:	d9c02785 	stb	r7,158(sp)
    4288:	003e9d06 	br	3d00 <__alt_data_end+0xff003d00>
    428c:	00c00044 	movi	r3,1
    4290:	01c00ac4 	movi	r7,43
    4294:	ac400007 	ldb	r17,0(r21)
    4298:	003d5e06 	br	3814 <__alt_data_end+0xff003814>
    429c:	94800814 	ori	r18,r18,32
    42a0:	ac400007 	ldb	r17,0(r21)
    42a4:	003d5b06 	br	3814 <__alt_data_end+0xff003814>
    42a8:	d8c02d17 	ldw	r3,180(sp)
    42ac:	d8002785 	stb	zero,158(sp)
    42b0:	1c000017 	ldw	r16,0(r3)
    42b4:	1cc00104 	addi	r19,r3,4
    42b8:	80041926 	beq	r16,zero,5320 <___vfprintf_internal_r+0x1c90>
    42bc:	d9002917 	ldw	r4,164(sp)
    42c0:	2003d016 	blt	r4,zero,5204 <___vfprintf_internal_r+0x1b74>
    42c4:	200d883a 	mov	r6,r4
    42c8:	000b883a 	mov	r5,zero
    42cc:	8009883a 	mov	r4,r16
    42d0:	da003d15 	stw	r8,244(sp)
    42d4:	00086940 	call	8694 <memchr>
    42d8:	da003d17 	ldw	r8,244(sp)
    42dc:	10045426 	beq	r2,zero,5430 <___vfprintf_internal_r+0x1da0>
    42e0:	1405c83a 	sub	r2,r2,r16
    42e4:	d8802e15 	stw	r2,184(sp)
    42e8:	1003cc16 	blt	r2,zero,521c <___vfprintf_internal_r+0x1b8c>
    42ec:	df002783 	ldbu	fp,158(sp)
    42f0:	d8802a15 	stw	r2,168(sp)
    42f4:	dcc02d15 	stw	r19,180(sp)
    42f8:	d8002915 	stw	zero,164(sp)
    42fc:	d8003215 	stw	zero,200(sp)
    4300:	003eb006 	br	3dc4 <__alt_data_end+0xff003dc4>
    4304:	18c03fcc 	andi	r3,r3,255
    4308:	183f9b26 	beq	r3,zero,4178 <__alt_data_end+0xff004178>
    430c:	d9c02785 	stb	r7,158(sp)
    4310:	003f9906 	br	4178 <__alt_data_end+0xff004178>
    4314:	18c03fcc 	andi	r3,r3,255
    4318:	1805551e 	bne	r3,zero,5870 <___vfprintf_internal_r+0x21e0>
    431c:	01400074 	movhi	r5,1
    4320:	2948bf04 	addi	r5,r5,8956
    4324:	d9403915 	stw	r5,228(sp)
    4328:	9080080c 	andi	r2,r18,32
    432c:	103fae1e 	bne	r2,zero,41e8 <__alt_data_end+0xff0041e8>
    4330:	9080040c 	andi	r2,r18,16
    4334:	1002de26 	beq	r2,zero,4eb0 <___vfprintf_internal_r+0x1820>
    4338:	d8c02d17 	ldw	r3,180(sp)
    433c:	002d883a 	mov	r22,zero
    4340:	1cc00017 	ldw	r19,0(r3)
    4344:	18c00104 	addi	r3,r3,4
    4348:	d8c02d15 	stw	r3,180(sp)
    434c:	003fab06 	br	41fc <__alt_data_end+0xff0041fc>
    4350:	38803fcc 	andi	r2,r7,255
    4354:	1080201c 	xori	r2,r2,128
    4358:	10bfe004 	addi	r2,r2,-128
    435c:	1002d21e 	bne	r2,zero,4ea8 <___vfprintf_internal_r+0x1818>
    4360:	00c00044 	movi	r3,1
    4364:	01c00804 	movi	r7,32
    4368:	ac400007 	ldb	r17,0(r21)
    436c:	003d2906 	br	3814 <__alt_data_end+0xff003814>
    4370:	94800054 	ori	r18,r18,1
    4374:	ac400007 	ldb	r17,0(r21)
    4378:	003d2606 	br	3814 <__alt_data_end+0xff003814>
    437c:	18c03fcc 	andi	r3,r3,255
    4380:	183e0526 	beq	r3,zero,3b98 <__alt_data_end+0xff003b98>
    4384:	d9c02785 	stb	r7,158(sp)
    4388:	003e0306 	br	3b98 <__alt_data_end+0xff003b98>
    438c:	94801014 	ori	r18,r18,64
    4390:	ac400007 	ldb	r17,0(r21)
    4394:	003d1f06 	br	3814 <__alt_data_end+0xff003814>
    4398:	ac400007 	ldb	r17,0(r21)
    439c:	8a438726 	beq	r17,r9,51bc <___vfprintf_internal_r+0x1b2c>
    43a0:	94800414 	ori	r18,r18,16
    43a4:	003d1b06 	br	3814 <__alt_data_end+0xff003814>
    43a8:	18c03fcc 	andi	r3,r3,255
    43ac:	1805341e 	bne	r3,zero,5880 <___vfprintf_internal_r+0x21f0>
    43b0:	9080080c 	andi	r2,r18,32
    43b4:	1002cd26 	beq	r2,zero,4eec <___vfprintf_internal_r+0x185c>
    43b8:	d9402d17 	ldw	r5,180(sp)
    43bc:	d9002f17 	ldw	r4,188(sp)
    43c0:	28800017 	ldw	r2,0(r5)
    43c4:	2007d7fa 	srai	r3,r4,31
    43c8:	29400104 	addi	r5,r5,4
    43cc:	d9402d15 	stw	r5,180(sp)
    43d0:	11000015 	stw	r4,0(r2)
    43d4:	10c00115 	stw	r3,4(r2)
    43d8:	003ce506 	br	3770 <__alt_data_end+0xff003770>
    43dc:	d8c02d17 	ldw	r3,180(sp)
    43e0:	d9002d17 	ldw	r4,180(sp)
    43e4:	d8002785 	stb	zero,158(sp)
    43e8:	18800017 	ldw	r2,0(r3)
    43ec:	21000104 	addi	r4,r4,4
    43f0:	00c00044 	movi	r3,1
    43f4:	d8c02a15 	stw	r3,168(sp)
    43f8:	d8801405 	stb	r2,80(sp)
    43fc:	d9002d15 	stw	r4,180(sp)
    4400:	d8c02e15 	stw	r3,184(sp)
    4404:	d8002915 	stw	zero,164(sp)
    4408:	d8003215 	stw	zero,200(sp)
    440c:	dc001404 	addi	r16,sp,80
    4410:	0039883a 	mov	fp,zero
    4414:	003e7206 	br	3de0 <__alt_data_end+0xff003de0>
    4418:	01000074 	movhi	r4,1
    441c:	2108bf04 	addi	r4,r4,8956
    4420:	0039883a 	mov	fp,zero
    4424:	d9003915 	stw	r4,228(sp)
    4428:	04401e04 	movi	r17,120
    442c:	003f8206 	br	4238 <__alt_data_end+0xff004238>
    4430:	18c03fcc 	andi	r3,r3,255
    4434:	1805061e 	bne	r3,zero,5850 <___vfprintf_internal_r+0x21c0>
    4438:	883d9126 	beq	r17,zero,3a80 <__alt_data_end+0xff003a80>
    443c:	00c00044 	movi	r3,1
    4440:	d8c02a15 	stw	r3,168(sp)
    4444:	dc401405 	stb	r17,80(sp)
    4448:	d8002785 	stb	zero,158(sp)
    444c:	003fec06 	br	4400 <__alt_data_end+0xff004400>
    4450:	01400074 	movhi	r5,1
    4454:	2948bf04 	addi	r5,r5,8956
    4458:	d9403915 	stw	r5,228(sp)
    445c:	d8c02d15 	stw	r3,180(sp)
    4460:	1025883a 	mov	r18,r2
    4464:	04401e04 	movi	r17,120
    4468:	9d84b03a 	or	r2,r19,r22
    446c:	1000fc1e 	bne	r2,zero,4860 <___vfprintf_internal_r+0x11d0>
    4470:	0039883a 	mov	fp,zero
    4474:	00800084 	movi	r2,2
    4478:	10803fcc 	andi	r2,r2,255
    447c:	00c00044 	movi	r3,1
    4480:	10c20f26 	beq	r2,r3,4cc0 <___vfprintf_internal_r+0x1630>
    4484:	00c00084 	movi	r3,2
    4488:	10fd6326 	beq	r2,r3,3a18 <__alt_data_end+0xff003a18>
    448c:	003e2d06 	br	3d44 <__alt_data_end+0xff003d44>
    4490:	d8c02017 	ldw	r3,128(sp)
    4494:	003e9306 	br	3ee4 <__alt_data_end+0xff003ee4>
    4498:	00801944 	movi	r2,101
    449c:	14407e0e 	bge	r2,r17,4698 <___vfprintf_internal_r+0x1008>
    44a0:	d9003617 	ldw	r4,216(sp)
    44a4:	d9403817 	ldw	r5,224(sp)
    44a8:	000d883a 	mov	r6,zero
    44ac:	000f883a 	mov	r7,zero
    44b0:	d8c03c15 	stw	r3,240(sp)
    44b4:	da003d15 	stw	r8,244(sp)
    44b8:	000def00 	call	def0 <__eqdf2>
    44bc:	d8c03c17 	ldw	r3,240(sp)
    44c0:	da003d17 	ldw	r8,244(sp)
    44c4:	1000f71e 	bne	r2,zero,48a4 <___vfprintf_internal_r+0x1214>
    44c8:	d8801f17 	ldw	r2,124(sp)
    44cc:	01000074 	movhi	r4,1
    44d0:	2108c604 	addi	r4,r4,8984
    44d4:	18c00044 	addi	r3,r3,1
    44d8:	10800044 	addi	r2,r2,1
    44dc:	41000015 	stw	r4,0(r8)
    44e0:	01000044 	movi	r4,1
    44e4:	41000115 	stw	r4,4(r8)
    44e8:	d8c02015 	stw	r3,128(sp)
    44ec:	d8801f15 	stw	r2,124(sp)
    44f0:	010001c4 	movi	r4,7
    44f4:	2082b816 	blt	r4,r2,4fd8 <___vfprintf_internal_r+0x1948>
    44f8:	42000204 	addi	r8,r8,8
    44fc:	d8802617 	ldw	r2,152(sp)
    4500:	d9403317 	ldw	r5,204(sp)
    4504:	11400216 	blt	r2,r5,4510 <___vfprintf_internal_r+0xe80>
    4508:	9080004c 	andi	r2,r18,1
    450c:	103ed526 	beq	r2,zero,4064 <__alt_data_end+0xff004064>
    4510:	d8803717 	ldw	r2,220(sp)
    4514:	d9003417 	ldw	r4,208(sp)
    4518:	d9403717 	ldw	r5,220(sp)
    451c:	1887883a 	add	r3,r3,r2
    4520:	d8801f17 	ldw	r2,124(sp)
    4524:	41000015 	stw	r4,0(r8)
    4528:	41400115 	stw	r5,4(r8)
    452c:	10800044 	addi	r2,r2,1
    4530:	d8c02015 	stw	r3,128(sp)
    4534:	d8801f15 	stw	r2,124(sp)
    4538:	010001c4 	movi	r4,7
    453c:	20832916 	blt	r4,r2,51e4 <___vfprintf_internal_r+0x1b54>
    4540:	42000204 	addi	r8,r8,8
    4544:	d8803317 	ldw	r2,204(sp)
    4548:	143fffc4 	addi	r16,r2,-1
    454c:	043ec50e 	bge	zero,r16,4064 <__alt_data_end+0xff004064>
    4550:	04400404 	movi	r17,16
    4554:	d8801f17 	ldw	r2,124(sp)
    4558:	8c00880e 	bge	r17,r16,477c <___vfprintf_internal_r+0x10ec>
    455c:	01400074 	movhi	r5,1
    4560:	2948c684 	addi	r5,r5,8986
    4564:	d9402b15 	stw	r5,172(sp)
    4568:	058001c4 	movi	r22,7
    456c:	dcc02c17 	ldw	r19,176(sp)
    4570:	00000306 	br	4580 <___vfprintf_internal_r+0xef0>
    4574:	42000204 	addi	r8,r8,8
    4578:	843ffc04 	addi	r16,r16,-16
    457c:	8c00820e 	bge	r17,r16,4788 <___vfprintf_internal_r+0x10f8>
    4580:	18c00404 	addi	r3,r3,16
    4584:	10800044 	addi	r2,r2,1
    4588:	45000015 	stw	r20,0(r8)
    458c:	44400115 	stw	r17,4(r8)
    4590:	d8c02015 	stw	r3,128(sp)
    4594:	d8801f15 	stw	r2,124(sp)
    4598:	b0bff60e 	bge	r22,r2,4574 <__alt_data_end+0xff004574>
    459c:	d9801e04 	addi	r6,sp,120
    45a0:	b80b883a 	mov	r5,r23
    45a4:	9809883a 	mov	r4,r19
    45a8:	000a42c0 	call	a42c <__sprint_r>
    45ac:	103d3a1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    45b0:	d8c02017 	ldw	r3,128(sp)
    45b4:	d8801f17 	ldw	r2,124(sp)
    45b8:	da000404 	addi	r8,sp,16
    45bc:	003fee06 	br	4578 <__alt_data_end+0xff004578>
    45c0:	d9403117 	ldw	r5,196(sp)
    45c4:	d8802a17 	ldw	r2,168(sp)
    45c8:	28adc83a 	sub	r22,r5,r2
    45cc:	05be630e 	bge	zero,r22,3f5c <__alt_data_end+0xff003f5c>
    45d0:	07000404 	movi	fp,16
    45d4:	d8801f17 	ldw	r2,124(sp)
    45d8:	e5838f0e 	bge	fp,r22,5418 <___vfprintf_internal_r+0x1d88>
    45dc:	01400074 	movhi	r5,1
    45e0:	2948c684 	addi	r5,r5,8986
    45e4:	dc403015 	stw	r17,192(sp)
    45e8:	d9402b15 	stw	r5,172(sp)
    45ec:	b023883a 	mov	r17,r22
    45f0:	04c001c4 	movi	r19,7
    45f4:	a82d883a 	mov	r22,r21
    45f8:	902b883a 	mov	r21,r18
    45fc:	8025883a 	mov	r18,r16
    4600:	dc002c17 	ldw	r16,176(sp)
    4604:	00000306 	br	4614 <___vfprintf_internal_r+0xf84>
    4608:	8c7ffc04 	addi	r17,r17,-16
    460c:	42000204 	addi	r8,r8,8
    4610:	e440110e 	bge	fp,r17,4658 <___vfprintf_internal_r+0xfc8>
    4614:	18c00404 	addi	r3,r3,16
    4618:	10800044 	addi	r2,r2,1
    461c:	45000015 	stw	r20,0(r8)
    4620:	47000115 	stw	fp,4(r8)
    4624:	d8c02015 	stw	r3,128(sp)
    4628:	d8801f15 	stw	r2,124(sp)
    462c:	98bff60e 	bge	r19,r2,4608 <__alt_data_end+0xff004608>
    4630:	d9801e04 	addi	r6,sp,120
    4634:	b80b883a 	mov	r5,r23
    4638:	8009883a 	mov	r4,r16
    463c:	000a42c0 	call	a42c <__sprint_r>
    4640:	103d151e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4644:	8c7ffc04 	addi	r17,r17,-16
    4648:	d8c02017 	ldw	r3,128(sp)
    464c:	d8801f17 	ldw	r2,124(sp)
    4650:	da000404 	addi	r8,sp,16
    4654:	e47fef16 	blt	fp,r17,4614 <__alt_data_end+0xff004614>
    4658:	9021883a 	mov	r16,r18
    465c:	a825883a 	mov	r18,r21
    4660:	b02b883a 	mov	r21,r22
    4664:	882d883a 	mov	r22,r17
    4668:	dc403017 	ldw	r17,192(sp)
    466c:	d9002b17 	ldw	r4,172(sp)
    4670:	1d87883a 	add	r3,r3,r22
    4674:	10800044 	addi	r2,r2,1
    4678:	41000015 	stw	r4,0(r8)
    467c:	45800115 	stw	r22,4(r8)
    4680:	d8c02015 	stw	r3,128(sp)
    4684:	d8801f15 	stw	r2,124(sp)
    4688:	010001c4 	movi	r4,7
    468c:	20818e16 	blt	r4,r2,4cc8 <___vfprintf_internal_r+0x1638>
    4690:	42000204 	addi	r8,r8,8
    4694:	003e3106 	br	3f5c <__alt_data_end+0xff003f5c>
    4698:	d9403317 	ldw	r5,204(sp)
    469c:	00800044 	movi	r2,1
    46a0:	18c00044 	addi	r3,r3,1
    46a4:	1141530e 	bge	r2,r5,4bf4 <___vfprintf_internal_r+0x1564>
    46a8:	dc401f17 	ldw	r17,124(sp)
    46ac:	00800044 	movi	r2,1
    46b0:	40800115 	stw	r2,4(r8)
    46b4:	8c400044 	addi	r17,r17,1
    46b8:	44000015 	stw	r16,0(r8)
    46bc:	d8c02015 	stw	r3,128(sp)
    46c0:	dc401f15 	stw	r17,124(sp)
    46c4:	008001c4 	movi	r2,7
    46c8:	14416b16 	blt	r2,r17,4c78 <___vfprintf_internal_r+0x15e8>
    46cc:	42000204 	addi	r8,r8,8
    46d0:	d8803717 	ldw	r2,220(sp)
    46d4:	d9003417 	ldw	r4,208(sp)
    46d8:	8c400044 	addi	r17,r17,1
    46dc:	10c7883a 	add	r3,r2,r3
    46e0:	40800115 	stw	r2,4(r8)
    46e4:	41000015 	stw	r4,0(r8)
    46e8:	d8c02015 	stw	r3,128(sp)
    46ec:	dc401f15 	stw	r17,124(sp)
    46f0:	008001c4 	movi	r2,7
    46f4:	14416916 	blt	r2,r17,4c9c <___vfprintf_internal_r+0x160c>
    46f8:	45800204 	addi	r22,r8,8
    46fc:	d9003617 	ldw	r4,216(sp)
    4700:	d9403817 	ldw	r5,224(sp)
    4704:	000d883a 	mov	r6,zero
    4708:	000f883a 	mov	r7,zero
    470c:	d8c03c15 	stw	r3,240(sp)
    4710:	000def00 	call	def0 <__eqdf2>
    4714:	d8c03c17 	ldw	r3,240(sp)
    4718:	1000bc26 	beq	r2,zero,4a0c <___vfprintf_internal_r+0x137c>
    471c:	d9403317 	ldw	r5,204(sp)
    4720:	84000044 	addi	r16,r16,1
    4724:	8c400044 	addi	r17,r17,1
    4728:	28bfffc4 	addi	r2,r5,-1
    472c:	1887883a 	add	r3,r3,r2
    4730:	b0800115 	stw	r2,4(r22)
    4734:	b4000015 	stw	r16,0(r22)
    4738:	d8c02015 	stw	r3,128(sp)
    473c:	dc401f15 	stw	r17,124(sp)
    4740:	008001c4 	movi	r2,7
    4744:	14414316 	blt	r2,r17,4c54 <___vfprintf_internal_r+0x15c4>
    4748:	b5800204 	addi	r22,r22,8
    474c:	d9003a17 	ldw	r4,232(sp)
    4750:	df0022c4 	addi	fp,sp,139
    4754:	8c400044 	addi	r17,r17,1
    4758:	20c7883a 	add	r3,r4,r3
    475c:	b7000015 	stw	fp,0(r22)
    4760:	b1000115 	stw	r4,4(r22)
    4764:	d8c02015 	stw	r3,128(sp)
    4768:	dc401f15 	stw	r17,124(sp)
    476c:	008001c4 	movi	r2,7
    4770:	14400e16 	blt	r2,r17,47ac <___vfprintf_internal_r+0x111c>
    4774:	b2000204 	addi	r8,r22,8
    4778:	003e3a06 	br	4064 <__alt_data_end+0xff004064>
    477c:	01000074 	movhi	r4,1
    4780:	2108c684 	addi	r4,r4,8986
    4784:	d9002b15 	stw	r4,172(sp)
    4788:	d9002b17 	ldw	r4,172(sp)
    478c:	1c07883a 	add	r3,r3,r16
    4790:	44000115 	stw	r16,4(r8)
    4794:	41000015 	stw	r4,0(r8)
    4798:	10800044 	addi	r2,r2,1
    479c:	d8c02015 	stw	r3,128(sp)
    47a0:	d8801f15 	stw	r2,124(sp)
    47a4:	010001c4 	movi	r4,7
    47a8:	20be2d0e 	bge	r4,r2,4060 <__alt_data_end+0xff004060>
    47ac:	d9002c17 	ldw	r4,176(sp)
    47b0:	d9801e04 	addi	r6,sp,120
    47b4:	b80b883a 	mov	r5,r23
    47b8:	000a42c0 	call	a42c <__sprint_r>
    47bc:	103cb61e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    47c0:	d8c02017 	ldw	r3,128(sp)
    47c4:	da000404 	addi	r8,sp,16
    47c8:	003e2606 	br	4064 <__alt_data_end+0xff004064>
    47cc:	d9002c17 	ldw	r4,176(sp)
    47d0:	d9801e04 	addi	r6,sp,120
    47d4:	b80b883a 	mov	r5,r23
    47d8:	000a42c0 	call	a42c <__sprint_r>
    47dc:	103e5d26 	beq	r2,zero,4154 <__alt_data_end+0xff004154>
    47e0:	003cad06 	br	3a98 <__alt_data_end+0xff003a98>
    47e4:	d9002c17 	ldw	r4,176(sp)
    47e8:	d9801e04 	addi	r6,sp,120
    47ec:	b80b883a 	mov	r5,r23
    47f0:	000a42c0 	call	a42c <__sprint_r>
    47f4:	103ca81e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    47f8:	d8c02017 	ldw	r3,128(sp)
    47fc:	da000404 	addi	r8,sp,16
    4800:	003e0b06 	br	4030 <__alt_data_end+0xff004030>
    4804:	d9002c17 	ldw	r4,176(sp)
    4808:	d9801e04 	addi	r6,sp,120
    480c:	b80b883a 	mov	r5,r23
    4810:	000a42c0 	call	a42c <__sprint_r>
    4814:	103ca01e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4818:	d8c02017 	ldw	r3,128(sp)
    481c:	da000404 	addi	r8,sp,16
    4820:	003dbd06 	br	3f18 <__alt_data_end+0xff003f18>
    4824:	d9002c17 	ldw	r4,176(sp)
    4828:	d9801e04 	addi	r6,sp,120
    482c:	b80b883a 	mov	r5,r23
    4830:	000a42c0 	call	a42c <__sprint_r>
    4834:	103c981e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4838:	d8c02017 	ldw	r3,128(sp)
    483c:	da000404 	addi	r8,sp,16
    4840:	003dc306 	br	3f50 <__alt_data_end+0xff003f50>
    4844:	d8802917 	ldw	r2,164(sp)
    4848:	d8002785 	stb	zero,158(sp)
    484c:	103f0616 	blt	r2,zero,4468 <__alt_data_end+0xff004468>
    4850:	00ffdfc4 	movi	r3,-129
    4854:	9d84b03a 	or	r2,r19,r22
    4858:	90e4703a 	and	r18,r18,r3
    485c:	103c6b26 	beq	r2,zero,3a0c <__alt_data_end+0xff003a0c>
    4860:	0039883a 	mov	fp,zero
    4864:	003e7406 	br	4238 <__alt_data_end+0xff004238>
    4868:	9080040c 	andi	r2,r18,16
    486c:	1001b326 	beq	r2,zero,4f3c <___vfprintf_internal_r+0x18ac>
    4870:	d9002d17 	ldw	r4,180(sp)
    4874:	d9402917 	ldw	r5,164(sp)
    4878:	d8002785 	stb	zero,158(sp)
    487c:	20800104 	addi	r2,r4,4
    4880:	24c00017 	ldw	r19,0(r4)
    4884:	002d883a 	mov	r22,zero
    4888:	2801b516 	blt	r5,zero,4f60 <___vfprintf_internal_r+0x18d0>
    488c:	00ffdfc4 	movi	r3,-129
    4890:	d8802d15 	stw	r2,180(sp)
    4894:	90e4703a 	and	r18,r18,r3
    4898:	983d2726 	beq	r19,zero,3d38 <__alt_data_end+0xff003d38>
    489c:	0039883a 	mov	fp,zero
    48a0:	003d2a06 	br	3d4c <__alt_data_end+0xff003d4c>
    48a4:	dc402617 	ldw	r17,152(sp)
    48a8:	0441d30e 	bge	zero,r17,4ff8 <___vfprintf_internal_r+0x1968>
    48ac:	dc403217 	ldw	r17,200(sp)
    48b0:	d8803317 	ldw	r2,204(sp)
    48b4:	1440010e 	bge	r2,r17,48bc <___vfprintf_internal_r+0x122c>
    48b8:	1023883a 	mov	r17,r2
    48bc:	04400a0e 	bge	zero,r17,48e8 <___vfprintf_internal_r+0x1258>
    48c0:	d8801f17 	ldw	r2,124(sp)
    48c4:	1c47883a 	add	r3,r3,r17
    48c8:	44000015 	stw	r16,0(r8)
    48cc:	10800044 	addi	r2,r2,1
    48d0:	44400115 	stw	r17,4(r8)
    48d4:	d8c02015 	stw	r3,128(sp)
    48d8:	d8801f15 	stw	r2,124(sp)
    48dc:	010001c4 	movi	r4,7
    48e0:	20826516 	blt	r4,r2,5278 <___vfprintf_internal_r+0x1be8>
    48e4:	42000204 	addi	r8,r8,8
    48e8:	88026116 	blt	r17,zero,5270 <___vfprintf_internal_r+0x1be0>
    48ec:	d9003217 	ldw	r4,200(sp)
    48f0:	2463c83a 	sub	r17,r4,r17
    48f4:	04407b0e 	bge	zero,r17,4ae4 <___vfprintf_internal_r+0x1454>
    48f8:	05800404 	movi	r22,16
    48fc:	d8801f17 	ldw	r2,124(sp)
    4900:	b4419d0e 	bge	r22,r17,4f78 <___vfprintf_internal_r+0x18e8>
    4904:	01000074 	movhi	r4,1
    4908:	2108c684 	addi	r4,r4,8986
    490c:	d9002b15 	stw	r4,172(sp)
    4910:	070001c4 	movi	fp,7
    4914:	dcc02c17 	ldw	r19,176(sp)
    4918:	00000306 	br	4928 <___vfprintf_internal_r+0x1298>
    491c:	42000204 	addi	r8,r8,8
    4920:	8c7ffc04 	addi	r17,r17,-16
    4924:	b441970e 	bge	r22,r17,4f84 <___vfprintf_internal_r+0x18f4>
    4928:	18c00404 	addi	r3,r3,16
    492c:	10800044 	addi	r2,r2,1
    4930:	45000015 	stw	r20,0(r8)
    4934:	45800115 	stw	r22,4(r8)
    4938:	d8c02015 	stw	r3,128(sp)
    493c:	d8801f15 	stw	r2,124(sp)
    4940:	e0bff60e 	bge	fp,r2,491c <__alt_data_end+0xff00491c>
    4944:	d9801e04 	addi	r6,sp,120
    4948:	b80b883a 	mov	r5,r23
    494c:	9809883a 	mov	r4,r19
    4950:	000a42c0 	call	a42c <__sprint_r>
    4954:	103c501e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4958:	d8c02017 	ldw	r3,128(sp)
    495c:	d8801f17 	ldw	r2,124(sp)
    4960:	da000404 	addi	r8,sp,16
    4964:	003fee06 	br	4920 <__alt_data_end+0xff004920>
    4968:	d9002c17 	ldw	r4,176(sp)
    496c:	d9801e04 	addi	r6,sp,120
    4970:	b80b883a 	mov	r5,r23
    4974:	000a42c0 	call	a42c <__sprint_r>
    4978:	103c471e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    497c:	d8c02017 	ldw	r3,128(sp)
    4980:	df002787 	ldb	fp,158(sp)
    4984:	da000404 	addi	r8,sp,16
    4988:	003d5606 	br	3ee4 <__alt_data_end+0xff003ee4>
    498c:	9080040c 	andi	r2,r18,16
    4990:	10016126 	beq	r2,zero,4f18 <___vfprintf_internal_r+0x1888>
    4994:	d8802d17 	ldw	r2,180(sp)
    4998:	14c00017 	ldw	r19,0(r2)
    499c:	10800104 	addi	r2,r2,4
    49a0:	d8802d15 	stw	r2,180(sp)
    49a4:	982dd7fa 	srai	r22,r19,31
    49a8:	b005883a 	mov	r2,r22
    49ac:	003c8206 	br	3bb8 <__alt_data_end+0xff003bb8>
    49b0:	9080040c 	andi	r2,r18,16
    49b4:	10003526 	beq	r2,zero,4a8c <___vfprintf_internal_r+0x13fc>
    49b8:	d9402d17 	ldw	r5,180(sp)
    49bc:	d8c02917 	ldw	r3,164(sp)
    49c0:	d8002785 	stb	zero,158(sp)
    49c4:	28800104 	addi	r2,r5,4
    49c8:	2cc00017 	ldw	r19,0(r5)
    49cc:	002d883a 	mov	r22,zero
    49d0:	18003716 	blt	r3,zero,4ab0 <___vfprintf_internal_r+0x1420>
    49d4:	00ffdfc4 	movi	r3,-129
    49d8:	d8802d15 	stw	r2,180(sp)
    49dc:	90e4703a 	and	r18,r18,r3
    49e0:	0039883a 	mov	fp,zero
    49e4:	983df326 	beq	r19,zero,41b4 <__alt_data_end+0xff0041b4>
    49e8:	00800244 	movi	r2,9
    49ec:	14fc7b36 	bltu	r2,r19,3bdc <__alt_data_end+0xff003bdc>
    49f0:	d8c02817 	ldw	r3,160(sp)
    49f4:	dc001dc4 	addi	r16,sp,119
    49f8:	9cc00c04 	addi	r19,r19,48
    49fc:	1c07c83a 	sub	r3,r3,r16
    4a00:	dcc01dc5 	stb	r19,119(sp)
    4a04:	d8c02e15 	stw	r3,184(sp)
    4a08:	003ce806 	br	3dac <__alt_data_end+0xff003dac>
    4a0c:	d8803317 	ldw	r2,204(sp)
    4a10:	143fffc4 	addi	r16,r2,-1
    4a14:	043f4d0e 	bge	zero,r16,474c <__alt_data_end+0xff00474c>
    4a18:	07000404 	movi	fp,16
    4a1c:	e400810e 	bge	fp,r16,4c24 <___vfprintf_internal_r+0x1594>
    4a20:	01400074 	movhi	r5,1
    4a24:	2948c684 	addi	r5,r5,8986
    4a28:	d9402b15 	stw	r5,172(sp)
    4a2c:	01c001c4 	movi	r7,7
    4a30:	dcc02c17 	ldw	r19,176(sp)
    4a34:	00000306 	br	4a44 <___vfprintf_internal_r+0x13b4>
    4a38:	b5800204 	addi	r22,r22,8
    4a3c:	843ffc04 	addi	r16,r16,-16
    4a40:	e4007b0e 	bge	fp,r16,4c30 <___vfprintf_internal_r+0x15a0>
    4a44:	18c00404 	addi	r3,r3,16
    4a48:	8c400044 	addi	r17,r17,1
    4a4c:	b5000015 	stw	r20,0(r22)
    4a50:	b7000115 	stw	fp,4(r22)
    4a54:	d8c02015 	stw	r3,128(sp)
    4a58:	dc401f15 	stw	r17,124(sp)
    4a5c:	3c7ff60e 	bge	r7,r17,4a38 <__alt_data_end+0xff004a38>
    4a60:	d9801e04 	addi	r6,sp,120
    4a64:	b80b883a 	mov	r5,r23
    4a68:	9809883a 	mov	r4,r19
    4a6c:	d9c03c15 	stw	r7,240(sp)
    4a70:	000a42c0 	call	a42c <__sprint_r>
    4a74:	d9c03c17 	ldw	r7,240(sp)
    4a78:	103c071e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4a7c:	d8c02017 	ldw	r3,128(sp)
    4a80:	dc401f17 	ldw	r17,124(sp)
    4a84:	dd800404 	addi	r22,sp,16
    4a88:	003fec06 	br	4a3c <__alt_data_end+0xff004a3c>
    4a8c:	9080100c 	andi	r2,r18,64
    4a90:	d8002785 	stb	zero,158(sp)
    4a94:	10010e26 	beq	r2,zero,4ed0 <___vfprintf_internal_r+0x1840>
    4a98:	d9002d17 	ldw	r4,180(sp)
    4a9c:	d9402917 	ldw	r5,164(sp)
    4aa0:	002d883a 	mov	r22,zero
    4aa4:	20800104 	addi	r2,r4,4
    4aa8:	24c0000b 	ldhu	r19,0(r4)
    4aac:	283fc90e 	bge	r5,zero,49d4 <__alt_data_end+0xff0049d4>
    4ab0:	d8802d15 	stw	r2,180(sp)
    4ab4:	0039883a 	mov	fp,zero
    4ab8:	9d84b03a 	or	r2,r19,r22
    4abc:	103c461e 	bne	r2,zero,3bd8 <__alt_data_end+0xff003bd8>
    4ac0:	00800044 	movi	r2,1
    4ac4:	003e6c06 	br	4478 <__alt_data_end+0xff004478>
    4ac8:	d9002c17 	ldw	r4,176(sp)
    4acc:	d9801e04 	addi	r6,sp,120
    4ad0:	b80b883a 	mov	r5,r23
    4ad4:	000a42c0 	call	a42c <__sprint_r>
    4ad8:	103bef1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4adc:	d8c02017 	ldw	r3,128(sp)
    4ae0:	da000404 	addi	r8,sp,16
    4ae4:	d9003217 	ldw	r4,200(sp)
    4ae8:	d8802617 	ldw	r2,152(sp)
    4aec:	d9403317 	ldw	r5,204(sp)
    4af0:	8123883a 	add	r17,r16,r4
    4af4:	11400216 	blt	r2,r5,4b00 <___vfprintf_internal_r+0x1470>
    4af8:	9100004c 	andi	r4,r18,1
    4afc:	20000d26 	beq	r4,zero,4b34 <___vfprintf_internal_r+0x14a4>
    4b00:	d9003717 	ldw	r4,220(sp)
    4b04:	d9403417 	ldw	r5,208(sp)
    4b08:	1907883a 	add	r3,r3,r4
    4b0c:	d9001f17 	ldw	r4,124(sp)
    4b10:	41400015 	stw	r5,0(r8)
    4b14:	d9403717 	ldw	r5,220(sp)
    4b18:	21000044 	addi	r4,r4,1
    4b1c:	d8c02015 	stw	r3,128(sp)
    4b20:	41400115 	stw	r5,4(r8)
    4b24:	d9001f15 	stw	r4,124(sp)
    4b28:	014001c4 	movi	r5,7
    4b2c:	2901e816 	blt	r5,r4,52d0 <___vfprintf_internal_r+0x1c40>
    4b30:	42000204 	addi	r8,r8,8
    4b34:	d9003317 	ldw	r4,204(sp)
    4b38:	8121883a 	add	r16,r16,r4
    4b3c:	2085c83a 	sub	r2,r4,r2
    4b40:	8461c83a 	sub	r16,r16,r17
    4b44:	1400010e 	bge	r2,r16,4b4c <___vfprintf_internal_r+0x14bc>
    4b48:	1021883a 	mov	r16,r2
    4b4c:	04000a0e 	bge	zero,r16,4b78 <___vfprintf_internal_r+0x14e8>
    4b50:	d9001f17 	ldw	r4,124(sp)
    4b54:	1c07883a 	add	r3,r3,r16
    4b58:	44400015 	stw	r17,0(r8)
    4b5c:	21000044 	addi	r4,r4,1
    4b60:	44000115 	stw	r16,4(r8)
    4b64:	d8c02015 	stw	r3,128(sp)
    4b68:	d9001f15 	stw	r4,124(sp)
    4b6c:	014001c4 	movi	r5,7
    4b70:	2901fb16 	blt	r5,r4,5360 <___vfprintf_internal_r+0x1cd0>
    4b74:	42000204 	addi	r8,r8,8
    4b78:	8001f716 	blt	r16,zero,5358 <___vfprintf_internal_r+0x1cc8>
    4b7c:	1421c83a 	sub	r16,r2,r16
    4b80:	043d380e 	bge	zero,r16,4064 <__alt_data_end+0xff004064>
    4b84:	04400404 	movi	r17,16
    4b88:	d8801f17 	ldw	r2,124(sp)
    4b8c:	8c3efb0e 	bge	r17,r16,477c <__alt_data_end+0xff00477c>
    4b90:	01400074 	movhi	r5,1
    4b94:	2948c684 	addi	r5,r5,8986
    4b98:	d9402b15 	stw	r5,172(sp)
    4b9c:	058001c4 	movi	r22,7
    4ba0:	dcc02c17 	ldw	r19,176(sp)
    4ba4:	00000306 	br	4bb4 <___vfprintf_internal_r+0x1524>
    4ba8:	42000204 	addi	r8,r8,8
    4bac:	843ffc04 	addi	r16,r16,-16
    4bb0:	8c3ef50e 	bge	r17,r16,4788 <__alt_data_end+0xff004788>
    4bb4:	18c00404 	addi	r3,r3,16
    4bb8:	10800044 	addi	r2,r2,1
    4bbc:	45000015 	stw	r20,0(r8)
    4bc0:	44400115 	stw	r17,4(r8)
    4bc4:	d8c02015 	stw	r3,128(sp)
    4bc8:	d8801f15 	stw	r2,124(sp)
    4bcc:	b0bff60e 	bge	r22,r2,4ba8 <__alt_data_end+0xff004ba8>
    4bd0:	d9801e04 	addi	r6,sp,120
    4bd4:	b80b883a 	mov	r5,r23
    4bd8:	9809883a 	mov	r4,r19
    4bdc:	000a42c0 	call	a42c <__sprint_r>
    4be0:	103bad1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4be4:	d8c02017 	ldw	r3,128(sp)
    4be8:	d8801f17 	ldw	r2,124(sp)
    4bec:	da000404 	addi	r8,sp,16
    4bf0:	003fee06 	br	4bac <__alt_data_end+0xff004bac>
    4bf4:	9088703a 	and	r4,r18,r2
    4bf8:	203eab1e 	bne	r4,zero,46a8 <__alt_data_end+0xff0046a8>
    4bfc:	dc401f17 	ldw	r17,124(sp)
    4c00:	40800115 	stw	r2,4(r8)
    4c04:	44000015 	stw	r16,0(r8)
    4c08:	8c400044 	addi	r17,r17,1
    4c0c:	d8c02015 	stw	r3,128(sp)
    4c10:	dc401f15 	stw	r17,124(sp)
    4c14:	008001c4 	movi	r2,7
    4c18:	14400e16 	blt	r2,r17,4c54 <___vfprintf_internal_r+0x15c4>
    4c1c:	45800204 	addi	r22,r8,8
    4c20:	003eca06 	br	474c <__alt_data_end+0xff00474c>
    4c24:	01000074 	movhi	r4,1
    4c28:	2108c684 	addi	r4,r4,8986
    4c2c:	d9002b15 	stw	r4,172(sp)
    4c30:	d8802b17 	ldw	r2,172(sp)
    4c34:	1c07883a 	add	r3,r3,r16
    4c38:	8c400044 	addi	r17,r17,1
    4c3c:	b0800015 	stw	r2,0(r22)
    4c40:	b4000115 	stw	r16,4(r22)
    4c44:	d8c02015 	stw	r3,128(sp)
    4c48:	dc401f15 	stw	r17,124(sp)
    4c4c:	008001c4 	movi	r2,7
    4c50:	147ebd0e 	bge	r2,r17,4748 <__alt_data_end+0xff004748>
    4c54:	d9002c17 	ldw	r4,176(sp)
    4c58:	d9801e04 	addi	r6,sp,120
    4c5c:	b80b883a 	mov	r5,r23
    4c60:	000a42c0 	call	a42c <__sprint_r>
    4c64:	103b8c1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4c68:	d8c02017 	ldw	r3,128(sp)
    4c6c:	dc401f17 	ldw	r17,124(sp)
    4c70:	dd800404 	addi	r22,sp,16
    4c74:	003eb506 	br	474c <__alt_data_end+0xff00474c>
    4c78:	d9002c17 	ldw	r4,176(sp)
    4c7c:	d9801e04 	addi	r6,sp,120
    4c80:	b80b883a 	mov	r5,r23
    4c84:	000a42c0 	call	a42c <__sprint_r>
    4c88:	103b831e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4c8c:	d8c02017 	ldw	r3,128(sp)
    4c90:	dc401f17 	ldw	r17,124(sp)
    4c94:	da000404 	addi	r8,sp,16
    4c98:	003e8d06 	br	46d0 <__alt_data_end+0xff0046d0>
    4c9c:	d9002c17 	ldw	r4,176(sp)
    4ca0:	d9801e04 	addi	r6,sp,120
    4ca4:	b80b883a 	mov	r5,r23
    4ca8:	000a42c0 	call	a42c <__sprint_r>
    4cac:	103b7a1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4cb0:	d8c02017 	ldw	r3,128(sp)
    4cb4:	dc401f17 	ldw	r17,124(sp)
    4cb8:	dd800404 	addi	r22,sp,16
    4cbc:	003e8f06 	br	46fc <__alt_data_end+0xff0046fc>
    4cc0:	0027883a 	mov	r19,zero
    4cc4:	003f4a06 	br	49f0 <__alt_data_end+0xff0049f0>
    4cc8:	d9002c17 	ldw	r4,176(sp)
    4ccc:	d9801e04 	addi	r6,sp,120
    4cd0:	b80b883a 	mov	r5,r23
    4cd4:	000a42c0 	call	a42c <__sprint_r>
    4cd8:	103b6f1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4cdc:	d8c02017 	ldw	r3,128(sp)
    4ce0:	da000404 	addi	r8,sp,16
    4ce4:	003c9d06 	br	3f5c <__alt_data_end+0xff003f5c>
    4ce8:	04e7c83a 	sub	r19,zero,r19
    4cec:	9804c03a 	cmpne	r2,r19,zero
    4cf0:	05adc83a 	sub	r22,zero,r22
    4cf4:	b0adc83a 	sub	r22,r22,r2
    4cf8:	d8802917 	ldw	r2,164(sp)
    4cfc:	07000b44 	movi	fp,45
    4d00:	df002785 	stb	fp,158(sp)
    4d04:	10017b16 	blt	r2,zero,52f4 <___vfprintf_internal_r+0x1c64>
    4d08:	00bfdfc4 	movi	r2,-129
    4d0c:	90a4703a 	and	r18,r18,r2
    4d10:	003bb106 	br	3bd8 <__alt_data_end+0xff003bd8>
    4d14:	d9003617 	ldw	r4,216(sp)
    4d18:	d9403817 	ldw	r5,224(sp)
    4d1c:	da003d15 	stw	r8,244(sp)
    4d20:	000a0a40 	call	a0a4 <__fpclassifyd>
    4d24:	da003d17 	ldw	r8,244(sp)
    4d28:	1000f026 	beq	r2,zero,50ec <___vfprintf_internal_r+0x1a5c>
    4d2c:	d9002917 	ldw	r4,164(sp)
    4d30:	05bff7c4 	movi	r22,-33
    4d34:	00bfffc4 	movi	r2,-1
    4d38:	8dac703a 	and	r22,r17,r22
    4d3c:	20820026 	beq	r4,r2,5540 <___vfprintf_internal_r+0x1eb0>
    4d40:	008011c4 	movi	r2,71
    4d44:	b081f726 	beq	r22,r2,5524 <___vfprintf_internal_r+0x1e94>
    4d48:	d9003817 	ldw	r4,224(sp)
    4d4c:	90c04014 	ori	r3,r18,256
    4d50:	d8c02b15 	stw	r3,172(sp)
    4d54:	20021516 	blt	r4,zero,55ac <___vfprintf_internal_r+0x1f1c>
    4d58:	dcc03817 	ldw	r19,224(sp)
    4d5c:	d8002a05 	stb	zero,168(sp)
    4d60:	00801984 	movi	r2,102
    4d64:	8881f926 	beq	r17,r2,554c <___vfprintf_internal_r+0x1ebc>
    4d68:	00801184 	movi	r2,70
    4d6c:	88821c26 	beq	r17,r2,55e0 <___vfprintf_internal_r+0x1f50>
    4d70:	00801144 	movi	r2,69
    4d74:	b081ef26 	beq	r22,r2,5534 <___vfprintf_internal_r+0x1ea4>
    4d78:	d8c02917 	ldw	r3,164(sp)
    4d7c:	d8802104 	addi	r2,sp,132
    4d80:	d8800315 	stw	r2,12(sp)
    4d84:	d9403617 	ldw	r5,216(sp)
    4d88:	d8802504 	addi	r2,sp,148
    4d8c:	d9002c17 	ldw	r4,176(sp)
    4d90:	d8800215 	stw	r2,8(sp)
    4d94:	d8802604 	addi	r2,sp,152
    4d98:	d8c00015 	stw	r3,0(sp)
    4d9c:	d8800115 	stw	r2,4(sp)
    4da0:	01c00084 	movi	r7,2
    4da4:	980d883a 	mov	r6,r19
    4da8:	d8c03c15 	stw	r3,240(sp)
    4dac:	da003d15 	stw	r8,244(sp)
    4db0:	0005cb40 	call	5cb4 <_dtoa_r>
    4db4:	1021883a 	mov	r16,r2
    4db8:	008019c4 	movi	r2,103
    4dbc:	d8c03c17 	ldw	r3,240(sp)
    4dc0:	da003d17 	ldw	r8,244(sp)
    4dc4:	88817126 	beq	r17,r2,538c <___vfprintf_internal_r+0x1cfc>
    4dc8:	008011c4 	movi	r2,71
    4dcc:	88829226 	beq	r17,r2,5818 <___vfprintf_internal_r+0x2188>
    4dd0:	80f9883a 	add	fp,r16,r3
    4dd4:	d9003617 	ldw	r4,216(sp)
    4dd8:	000d883a 	mov	r6,zero
    4ddc:	000f883a 	mov	r7,zero
    4de0:	980b883a 	mov	r5,r19
    4de4:	da003d15 	stw	r8,244(sp)
    4de8:	000def00 	call	def0 <__eqdf2>
    4dec:	da003d17 	ldw	r8,244(sp)
    4df0:	10018d26 	beq	r2,zero,5428 <___vfprintf_internal_r+0x1d98>
    4df4:	d8802117 	ldw	r2,132(sp)
    4df8:	1700062e 	bgeu	r2,fp,4e14 <___vfprintf_internal_r+0x1784>
    4dfc:	01000c04 	movi	r4,48
    4e00:	10c00044 	addi	r3,r2,1
    4e04:	d8c02115 	stw	r3,132(sp)
    4e08:	11000005 	stb	r4,0(r2)
    4e0c:	d8802117 	ldw	r2,132(sp)
    4e10:	173ffb36 	bltu	r2,fp,4e00 <__alt_data_end+0xff004e00>
    4e14:	1405c83a 	sub	r2,r2,r16
    4e18:	d8803315 	stw	r2,204(sp)
    4e1c:	008011c4 	movi	r2,71
    4e20:	b0817626 	beq	r22,r2,53fc <___vfprintf_internal_r+0x1d6c>
    4e24:	00801944 	movi	r2,101
    4e28:	1442810e 	bge	r2,r17,5830 <___vfprintf_internal_r+0x21a0>
    4e2c:	d8c02617 	ldw	r3,152(sp)
    4e30:	00801984 	movi	r2,102
    4e34:	d8c03215 	stw	r3,200(sp)
    4e38:	8881fe26 	beq	r17,r2,5634 <___vfprintf_internal_r+0x1fa4>
    4e3c:	d8c03217 	ldw	r3,200(sp)
    4e40:	d9003317 	ldw	r4,204(sp)
    4e44:	1901dd16 	blt	r3,r4,55bc <___vfprintf_internal_r+0x1f2c>
    4e48:	9480004c 	andi	r18,r18,1
    4e4c:	90022b1e 	bne	r18,zero,56fc <___vfprintf_internal_r+0x206c>
    4e50:	1805883a 	mov	r2,r3
    4e54:	18028016 	blt	r3,zero,5858 <___vfprintf_internal_r+0x21c8>
    4e58:	d8c03217 	ldw	r3,200(sp)
    4e5c:	044019c4 	movi	r17,103
    4e60:	d8c02e15 	stw	r3,184(sp)
    4e64:	df002a07 	ldb	fp,168(sp)
    4e68:	e001531e 	bne	fp,zero,53b8 <___vfprintf_internal_r+0x1d28>
    4e6c:	df002783 	ldbu	fp,158(sp)
    4e70:	d8802a15 	stw	r2,168(sp)
    4e74:	dc802b17 	ldw	r18,172(sp)
    4e78:	d8002915 	stw	zero,164(sp)
    4e7c:	003bd106 	br	3dc4 <__alt_data_end+0xff003dc4>
    4e80:	d8802d17 	ldw	r2,180(sp)
    4e84:	d8c02d17 	ldw	r3,180(sp)
    4e88:	d9002d17 	ldw	r4,180(sp)
    4e8c:	10800017 	ldw	r2,0(r2)
    4e90:	18c00117 	ldw	r3,4(r3)
    4e94:	21000204 	addi	r4,r4,8
    4e98:	d8803615 	stw	r2,216(sp)
    4e9c:	d8c03815 	stw	r3,224(sp)
    4ea0:	d9002d15 	stw	r4,180(sp)
    4ea4:	003b7506 	br	3c7c <__alt_data_end+0xff003c7c>
    4ea8:	ac400007 	ldb	r17,0(r21)
    4eac:	003a5906 	br	3814 <__alt_data_end+0xff003814>
    4eb0:	9080100c 	andi	r2,r18,64
    4eb4:	1000a826 	beq	r2,zero,5158 <___vfprintf_internal_r+0x1ac8>
    4eb8:	d9002d17 	ldw	r4,180(sp)
    4ebc:	002d883a 	mov	r22,zero
    4ec0:	24c0000b 	ldhu	r19,0(r4)
    4ec4:	21000104 	addi	r4,r4,4
    4ec8:	d9002d15 	stw	r4,180(sp)
    4ecc:	003ccb06 	br	41fc <__alt_data_end+0xff0041fc>
    4ed0:	d8c02d17 	ldw	r3,180(sp)
    4ed4:	d9002917 	ldw	r4,164(sp)
    4ed8:	002d883a 	mov	r22,zero
    4edc:	18800104 	addi	r2,r3,4
    4ee0:	1cc00017 	ldw	r19,0(r3)
    4ee4:	203ebb0e 	bge	r4,zero,49d4 <__alt_data_end+0xff0049d4>
    4ee8:	003ef106 	br	4ab0 <__alt_data_end+0xff004ab0>
    4eec:	9080040c 	andi	r2,r18,16
    4ef0:	1000921e 	bne	r2,zero,513c <___vfprintf_internal_r+0x1aac>
    4ef4:	9480100c 	andi	r18,r18,64
    4ef8:	90013926 	beq	r18,zero,53e0 <___vfprintf_internal_r+0x1d50>
    4efc:	d9002d17 	ldw	r4,180(sp)
    4f00:	d9402f17 	ldw	r5,188(sp)
    4f04:	20800017 	ldw	r2,0(r4)
    4f08:	21000104 	addi	r4,r4,4
    4f0c:	d9002d15 	stw	r4,180(sp)
    4f10:	1140000d 	sth	r5,0(r2)
    4f14:	003a1606 	br	3770 <__alt_data_end+0xff003770>
    4f18:	9080100c 	andi	r2,r18,64
    4f1c:	10008026 	beq	r2,zero,5120 <___vfprintf_internal_r+0x1a90>
    4f20:	d8c02d17 	ldw	r3,180(sp)
    4f24:	1cc0000f 	ldh	r19,0(r3)
    4f28:	18c00104 	addi	r3,r3,4
    4f2c:	d8c02d15 	stw	r3,180(sp)
    4f30:	982dd7fa 	srai	r22,r19,31
    4f34:	b005883a 	mov	r2,r22
    4f38:	003b1f06 	br	3bb8 <__alt_data_end+0xff003bb8>
    4f3c:	9080100c 	andi	r2,r18,64
    4f40:	d8002785 	stb	zero,158(sp)
    4f44:	10008a1e 	bne	r2,zero,5170 <___vfprintf_internal_r+0x1ae0>
    4f48:	d9402d17 	ldw	r5,180(sp)
    4f4c:	d8c02917 	ldw	r3,164(sp)
    4f50:	002d883a 	mov	r22,zero
    4f54:	28800104 	addi	r2,r5,4
    4f58:	2cc00017 	ldw	r19,0(r5)
    4f5c:	183e4b0e 	bge	r3,zero,488c <__alt_data_end+0xff00488c>
    4f60:	9d86b03a 	or	r3,r19,r22
    4f64:	d8802d15 	stw	r2,180(sp)
    4f68:	183e4c1e 	bne	r3,zero,489c <__alt_data_end+0xff00489c>
    4f6c:	0039883a 	mov	fp,zero
    4f70:	0005883a 	mov	r2,zero
    4f74:	003d4006 	br	4478 <__alt_data_end+0xff004478>
    4f78:	01400074 	movhi	r5,1
    4f7c:	2948c684 	addi	r5,r5,8986
    4f80:	d9402b15 	stw	r5,172(sp)
    4f84:	d9402b17 	ldw	r5,172(sp)
    4f88:	1c47883a 	add	r3,r3,r17
    4f8c:	10800044 	addi	r2,r2,1
    4f90:	41400015 	stw	r5,0(r8)
    4f94:	44400115 	stw	r17,4(r8)
    4f98:	d8c02015 	stw	r3,128(sp)
    4f9c:	d8801f15 	stw	r2,124(sp)
    4fa0:	010001c4 	movi	r4,7
    4fa4:	20bec816 	blt	r4,r2,4ac8 <__alt_data_end+0xff004ac8>
    4fa8:	42000204 	addi	r8,r8,8
    4fac:	003ecd06 	br	4ae4 <__alt_data_end+0xff004ae4>
    4fb0:	d9002917 	ldw	r4,164(sp)
    4fb4:	d8002785 	stb	zero,158(sp)
    4fb8:	203d2d16 	blt	r4,zero,4470 <__alt_data_end+0xff004470>
    4fbc:	00bfdfc4 	movi	r2,-129
    4fc0:	90a4703a 	and	r18,r18,r2
    4fc4:	003a9106 	br	3a0c <__alt_data_end+0xff003a0c>
    4fc8:	01000074 	movhi	r4,1
    4fcc:	2108c684 	addi	r4,r4,8986
    4fd0:	d9002b15 	stw	r4,172(sp)
    4fd4:	003c0c06 	br	4008 <__alt_data_end+0xff004008>
    4fd8:	d9002c17 	ldw	r4,176(sp)
    4fdc:	d9801e04 	addi	r6,sp,120
    4fe0:	b80b883a 	mov	r5,r23
    4fe4:	000a42c0 	call	a42c <__sprint_r>
    4fe8:	103aab1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    4fec:	d8c02017 	ldw	r3,128(sp)
    4ff0:	da000404 	addi	r8,sp,16
    4ff4:	003d4106 	br	44fc <__alt_data_end+0xff0044fc>
    4ff8:	d8801f17 	ldw	r2,124(sp)
    4ffc:	01400074 	movhi	r5,1
    5000:	01000044 	movi	r4,1
    5004:	18c00044 	addi	r3,r3,1
    5008:	10800044 	addi	r2,r2,1
    500c:	2948c604 	addi	r5,r5,8984
    5010:	41000115 	stw	r4,4(r8)
    5014:	41400015 	stw	r5,0(r8)
    5018:	d8c02015 	stw	r3,128(sp)
    501c:	d8801f15 	stw	r2,124(sp)
    5020:	010001c4 	movi	r4,7
    5024:	20805c16 	blt	r4,r2,5198 <___vfprintf_internal_r+0x1b08>
    5028:	42000204 	addi	r8,r8,8
    502c:	8800041e 	bne	r17,zero,5040 <___vfprintf_internal_r+0x19b0>
    5030:	d8803317 	ldw	r2,204(sp)
    5034:	1000021e 	bne	r2,zero,5040 <___vfprintf_internal_r+0x19b0>
    5038:	9080004c 	andi	r2,r18,1
    503c:	103c0926 	beq	r2,zero,4064 <__alt_data_end+0xff004064>
    5040:	d9003717 	ldw	r4,220(sp)
    5044:	d8801f17 	ldw	r2,124(sp)
    5048:	d9403417 	ldw	r5,208(sp)
    504c:	20c7883a 	add	r3,r4,r3
    5050:	10800044 	addi	r2,r2,1
    5054:	41000115 	stw	r4,4(r8)
    5058:	41400015 	stw	r5,0(r8)
    505c:	d8c02015 	stw	r3,128(sp)
    5060:	d8801f15 	stw	r2,124(sp)
    5064:	010001c4 	movi	r4,7
    5068:	20812116 	blt	r4,r2,54f0 <___vfprintf_internal_r+0x1e60>
    506c:	42000204 	addi	r8,r8,8
    5070:	0463c83a 	sub	r17,zero,r17
    5074:	0440730e 	bge	zero,r17,5244 <___vfprintf_internal_r+0x1bb4>
    5078:	05800404 	movi	r22,16
    507c:	b440860e 	bge	r22,r17,5298 <___vfprintf_internal_r+0x1c08>
    5080:	01400074 	movhi	r5,1
    5084:	2948c684 	addi	r5,r5,8986
    5088:	d9402b15 	stw	r5,172(sp)
    508c:	070001c4 	movi	fp,7
    5090:	dcc02c17 	ldw	r19,176(sp)
    5094:	00000306 	br	50a4 <___vfprintf_internal_r+0x1a14>
    5098:	42000204 	addi	r8,r8,8
    509c:	8c7ffc04 	addi	r17,r17,-16
    50a0:	b440800e 	bge	r22,r17,52a4 <___vfprintf_internal_r+0x1c14>
    50a4:	18c00404 	addi	r3,r3,16
    50a8:	10800044 	addi	r2,r2,1
    50ac:	45000015 	stw	r20,0(r8)
    50b0:	45800115 	stw	r22,4(r8)
    50b4:	d8c02015 	stw	r3,128(sp)
    50b8:	d8801f15 	stw	r2,124(sp)
    50bc:	e0bff60e 	bge	fp,r2,5098 <__alt_data_end+0xff005098>
    50c0:	d9801e04 	addi	r6,sp,120
    50c4:	b80b883a 	mov	r5,r23
    50c8:	9809883a 	mov	r4,r19
    50cc:	000a42c0 	call	a42c <__sprint_r>
    50d0:	103a711e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    50d4:	d8c02017 	ldw	r3,128(sp)
    50d8:	d8801f17 	ldw	r2,124(sp)
    50dc:	da000404 	addi	r8,sp,16
    50e0:	003fee06 	br	509c <__alt_data_end+0xff00509c>
    50e4:	00bfffc4 	movi	r2,-1
    50e8:	003a6f06 	br	3aa8 <__alt_data_end+0xff003aa8>
    50ec:	008011c4 	movi	r2,71
    50f0:	1440b816 	blt	r2,r17,53d4 <___vfprintf_internal_r+0x1d44>
    50f4:	04000074 	movhi	r16,1
    50f8:	8408b804 	addi	r16,r16,8928
    50fc:	00c000c4 	movi	r3,3
    5100:	00bfdfc4 	movi	r2,-129
    5104:	d8c02a15 	stw	r3,168(sp)
    5108:	90a4703a 	and	r18,r18,r2
    510c:	df002783 	ldbu	fp,158(sp)
    5110:	d8c02e15 	stw	r3,184(sp)
    5114:	d8002915 	stw	zero,164(sp)
    5118:	d8003215 	stw	zero,200(sp)
    511c:	003b2906 	br	3dc4 <__alt_data_end+0xff003dc4>
    5120:	d9002d17 	ldw	r4,180(sp)
    5124:	24c00017 	ldw	r19,0(r4)
    5128:	21000104 	addi	r4,r4,4
    512c:	d9002d15 	stw	r4,180(sp)
    5130:	982dd7fa 	srai	r22,r19,31
    5134:	b005883a 	mov	r2,r22
    5138:	003a9f06 	br	3bb8 <__alt_data_end+0xff003bb8>
    513c:	d9402d17 	ldw	r5,180(sp)
    5140:	d8c02f17 	ldw	r3,188(sp)
    5144:	28800017 	ldw	r2,0(r5)
    5148:	29400104 	addi	r5,r5,4
    514c:	d9402d15 	stw	r5,180(sp)
    5150:	10c00015 	stw	r3,0(r2)
    5154:	00398606 	br	3770 <__alt_data_end+0xff003770>
    5158:	d9402d17 	ldw	r5,180(sp)
    515c:	002d883a 	mov	r22,zero
    5160:	2cc00017 	ldw	r19,0(r5)
    5164:	29400104 	addi	r5,r5,4
    5168:	d9402d15 	stw	r5,180(sp)
    516c:	003c2306 	br	41fc <__alt_data_end+0xff0041fc>
    5170:	d8c02d17 	ldw	r3,180(sp)
    5174:	d9002917 	ldw	r4,164(sp)
    5178:	002d883a 	mov	r22,zero
    517c:	18800104 	addi	r2,r3,4
    5180:	1cc0000b 	ldhu	r19,0(r3)
    5184:	203dc10e 	bge	r4,zero,488c <__alt_data_end+0xff00488c>
    5188:	003f7506 	br	4f60 <__alt_data_end+0xff004f60>
    518c:	04000074 	movhi	r16,1
    5190:	8408b604 	addi	r16,r16,8920
    5194:	003acc06 	br	3cc8 <__alt_data_end+0xff003cc8>
    5198:	d9002c17 	ldw	r4,176(sp)
    519c:	d9801e04 	addi	r6,sp,120
    51a0:	b80b883a 	mov	r5,r23
    51a4:	000a42c0 	call	a42c <__sprint_r>
    51a8:	103a3b1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    51ac:	dc402617 	ldw	r17,152(sp)
    51b0:	d8c02017 	ldw	r3,128(sp)
    51b4:	da000404 	addi	r8,sp,16
    51b8:	003f9c06 	br	502c <__alt_data_end+0xff00502c>
    51bc:	ac400043 	ldbu	r17,1(r21)
    51c0:	94800814 	ori	r18,r18,32
    51c4:	ad400044 	addi	r21,r21,1
    51c8:	8c403fcc 	andi	r17,r17,255
    51cc:	8c40201c 	xori	r17,r17,128
    51d0:	8c7fe004 	addi	r17,r17,-128
    51d4:	00398f06 	br	3814 <__alt_data_end+0xff003814>
    51d8:	d8c02d15 	stw	r3,180(sp)
    51dc:	0039883a 	mov	fp,zero
    51e0:	003e3506 	br	4ab8 <__alt_data_end+0xff004ab8>
    51e4:	d9002c17 	ldw	r4,176(sp)
    51e8:	d9801e04 	addi	r6,sp,120
    51ec:	b80b883a 	mov	r5,r23
    51f0:	000a42c0 	call	a42c <__sprint_r>
    51f4:	103a281e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    51f8:	d8c02017 	ldw	r3,128(sp)
    51fc:	da000404 	addi	r8,sp,16
    5200:	003cd006 	br	4544 <__alt_data_end+0xff004544>
    5204:	8009883a 	mov	r4,r16
    5208:	da003d15 	stw	r8,244(sp)
    520c:	00035f80 	call	35f8 <strlen>
    5210:	d8802e15 	stw	r2,184(sp)
    5214:	da003d17 	ldw	r8,244(sp)
    5218:	103c340e 	bge	r2,zero,42ec <__alt_data_end+0xff0042ec>
    521c:	0005883a 	mov	r2,zero
    5220:	003c3206 	br	42ec <__alt_data_end+0xff0042ec>
    5224:	d9002c17 	ldw	r4,176(sp)
    5228:	d9801e04 	addi	r6,sp,120
    522c:	b80b883a 	mov	r5,r23
    5230:	000a42c0 	call	a42c <__sprint_r>
    5234:	103a181e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    5238:	d8c02017 	ldw	r3,128(sp)
    523c:	d8801f17 	ldw	r2,124(sp)
    5240:	da000404 	addi	r8,sp,16
    5244:	d9403317 	ldw	r5,204(sp)
    5248:	10800044 	addi	r2,r2,1
    524c:	44000015 	stw	r16,0(r8)
    5250:	28c7883a 	add	r3,r5,r3
    5254:	003b7d06 	br	404c <__alt_data_end+0xff00404c>
    5258:	01000074 	movhi	r4,1
    525c:	2108ca84 	addi	r4,r4,9002
    5260:	d9003515 	stw	r4,212(sp)
    5264:	003b1406 	br	3eb8 <__alt_data_end+0xff003eb8>
    5268:	013fffc4 	movi	r4,-1
    526c:	003a3506 	br	3b44 <__alt_data_end+0xff003b44>
    5270:	0023883a 	mov	r17,zero
    5274:	003d9d06 	br	48ec <__alt_data_end+0xff0048ec>
    5278:	d9002c17 	ldw	r4,176(sp)
    527c:	d9801e04 	addi	r6,sp,120
    5280:	b80b883a 	mov	r5,r23
    5284:	000a42c0 	call	a42c <__sprint_r>
    5288:	103a031e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    528c:	d8c02017 	ldw	r3,128(sp)
    5290:	da000404 	addi	r8,sp,16
    5294:	003d9406 	br	48e8 <__alt_data_end+0xff0048e8>
    5298:	01000074 	movhi	r4,1
    529c:	2108c684 	addi	r4,r4,8986
    52a0:	d9002b15 	stw	r4,172(sp)
    52a4:	d9002b17 	ldw	r4,172(sp)
    52a8:	1c47883a 	add	r3,r3,r17
    52ac:	10800044 	addi	r2,r2,1
    52b0:	41000015 	stw	r4,0(r8)
    52b4:	44400115 	stw	r17,4(r8)
    52b8:	d8c02015 	stw	r3,128(sp)
    52bc:	d8801f15 	stw	r2,124(sp)
    52c0:	010001c4 	movi	r4,7
    52c4:	20bfd716 	blt	r4,r2,5224 <__alt_data_end+0xff005224>
    52c8:	42000204 	addi	r8,r8,8
    52cc:	003fdd06 	br	5244 <__alt_data_end+0xff005244>
    52d0:	d9002c17 	ldw	r4,176(sp)
    52d4:	d9801e04 	addi	r6,sp,120
    52d8:	b80b883a 	mov	r5,r23
    52dc:	000a42c0 	call	a42c <__sprint_r>
    52e0:	1039ed1e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    52e4:	d8802617 	ldw	r2,152(sp)
    52e8:	d8c02017 	ldw	r3,128(sp)
    52ec:	da000404 	addi	r8,sp,16
    52f0:	003e1006 	br	4b34 <__alt_data_end+0xff004b34>
    52f4:	00800044 	movi	r2,1
    52f8:	10803fcc 	andi	r2,r2,255
    52fc:	00c00044 	movi	r3,1
    5300:	10fa3526 	beq	r2,r3,3bd8 <__alt_data_end+0xff003bd8>
    5304:	00c00084 	movi	r3,2
    5308:	10fbcb26 	beq	r2,r3,4238 <__alt_data_end+0xff004238>
    530c:	003a8f06 	br	3d4c <__alt_data_end+0xff003d4c>
    5310:	01000074 	movhi	r4,1
    5314:	2108ca84 	addi	r4,r4,9002
    5318:	d9003515 	stw	r4,212(sp)
    531c:	003b7606 	br	40f8 <__alt_data_end+0xff0040f8>
    5320:	d8802917 	ldw	r2,164(sp)
    5324:	00c00184 	movi	r3,6
    5328:	1880012e 	bgeu	r3,r2,5330 <___vfprintf_internal_r+0x1ca0>
    532c:	1805883a 	mov	r2,r3
    5330:	d8802e15 	stw	r2,184(sp)
    5334:	1000ef16 	blt	r2,zero,56f4 <___vfprintf_internal_r+0x2064>
    5338:	04000074 	movhi	r16,1
    533c:	d8802a15 	stw	r2,168(sp)
    5340:	dcc02d15 	stw	r19,180(sp)
    5344:	d8002915 	stw	zero,164(sp)
    5348:	d8003215 	stw	zero,200(sp)
    534c:	8408c404 	addi	r16,r16,8976
    5350:	0039883a 	mov	fp,zero
    5354:	003aa206 	br	3de0 <__alt_data_end+0xff003de0>
    5358:	0021883a 	mov	r16,zero
    535c:	003e0706 	br	4b7c <__alt_data_end+0xff004b7c>
    5360:	d9002c17 	ldw	r4,176(sp)
    5364:	d9801e04 	addi	r6,sp,120
    5368:	b80b883a 	mov	r5,r23
    536c:	000a42c0 	call	a42c <__sprint_r>
    5370:	1039c91e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    5374:	d8802617 	ldw	r2,152(sp)
    5378:	d9403317 	ldw	r5,204(sp)
    537c:	d8c02017 	ldw	r3,128(sp)
    5380:	da000404 	addi	r8,sp,16
    5384:	2885c83a 	sub	r2,r5,r2
    5388:	003dfb06 	br	4b78 <__alt_data_end+0xff004b78>
    538c:	9080004c 	andi	r2,r18,1
    5390:	103e8f1e 	bne	r2,zero,4dd0 <__alt_data_end+0xff004dd0>
    5394:	d8802117 	ldw	r2,132(sp)
    5398:	003e9e06 	br	4e14 <__alt_data_end+0xff004e14>
    539c:	1025883a 	mov	r18,r2
    53a0:	0039883a 	mov	fp,zero
    53a4:	00800084 	movi	r2,2
    53a8:	003fd306 	br	52f8 <__alt_data_end+0xff0052f8>
    53ac:	07000b44 	movi	fp,45
    53b0:	df002785 	stb	fp,158(sp)
    53b4:	003a4006 	br	3cb8 <__alt_data_end+0xff003cb8>
    53b8:	00c00b44 	movi	r3,45
    53bc:	d8c02785 	stb	r3,158(sp)
    53c0:	d8802a15 	stw	r2,168(sp)
    53c4:	dc802b17 	ldw	r18,172(sp)
    53c8:	d8002915 	stw	zero,164(sp)
    53cc:	07000b44 	movi	fp,45
    53d0:	003a8006 	br	3dd4 <__alt_data_end+0xff003dd4>
    53d4:	04000074 	movhi	r16,1
    53d8:	8408b904 	addi	r16,r16,8932
    53dc:	003f4706 	br	50fc <__alt_data_end+0xff0050fc>
    53e0:	d8c02d17 	ldw	r3,180(sp)
    53e4:	d9002f17 	ldw	r4,188(sp)
    53e8:	18800017 	ldw	r2,0(r3)
    53ec:	18c00104 	addi	r3,r3,4
    53f0:	d8c02d15 	stw	r3,180(sp)
    53f4:	11000015 	stw	r4,0(r2)
    53f8:	0038dd06 	br	3770 <__alt_data_end+0xff003770>
    53fc:	dd802617 	ldw	r22,152(sp)
    5400:	00bfff44 	movi	r2,-3
    5404:	b0801c16 	blt	r22,r2,5478 <___vfprintf_internal_r+0x1de8>
    5408:	d9402917 	ldw	r5,164(sp)
    540c:	2d801a16 	blt	r5,r22,5478 <___vfprintf_internal_r+0x1de8>
    5410:	dd803215 	stw	r22,200(sp)
    5414:	003e8906 	br	4e3c <__alt_data_end+0xff004e3c>
    5418:	01000074 	movhi	r4,1
    541c:	2108c684 	addi	r4,r4,8986
    5420:	d9002b15 	stw	r4,172(sp)
    5424:	003c9106 	br	466c <__alt_data_end+0xff00466c>
    5428:	e005883a 	mov	r2,fp
    542c:	003e7906 	br	4e14 <__alt_data_end+0xff004e14>
    5430:	d9402917 	ldw	r5,164(sp)
    5434:	df002783 	ldbu	fp,158(sp)
    5438:	dcc02d15 	stw	r19,180(sp)
    543c:	d9402a15 	stw	r5,168(sp)
    5440:	d9402e15 	stw	r5,184(sp)
    5444:	d8002915 	stw	zero,164(sp)
    5448:	d8003215 	stw	zero,200(sp)
    544c:	003a5d06 	br	3dc4 <__alt_data_end+0xff003dc4>
    5450:	9080004c 	andi	r2,r18,1
    5454:	0039883a 	mov	fp,zero
    5458:	10000426 	beq	r2,zero,546c <___vfprintf_internal_r+0x1ddc>
    545c:	00800c04 	movi	r2,48
    5460:	dc001dc4 	addi	r16,sp,119
    5464:	d8801dc5 	stb	r2,119(sp)
    5468:	003b8006 	br	426c <__alt_data_end+0xff00426c>
    546c:	d8002e15 	stw	zero,184(sp)
    5470:	dc001e04 	addi	r16,sp,120
    5474:	003a4d06 	br	3dac <__alt_data_end+0xff003dac>
    5478:	8c7fff84 	addi	r17,r17,-2
    547c:	b5bfffc4 	addi	r22,r22,-1
    5480:	dd802615 	stw	r22,152(sp)
    5484:	dc4022c5 	stb	r17,139(sp)
    5488:	b000bf16 	blt	r22,zero,5788 <___vfprintf_internal_r+0x20f8>
    548c:	00800ac4 	movi	r2,43
    5490:	d8802305 	stb	r2,140(sp)
    5494:	00800244 	movi	r2,9
    5498:	15807016 	blt	r2,r22,565c <___vfprintf_internal_r+0x1fcc>
    549c:	00800c04 	movi	r2,48
    54a0:	b5800c04 	addi	r22,r22,48
    54a4:	d8802345 	stb	r2,141(sp)
    54a8:	dd802385 	stb	r22,142(sp)
    54ac:	d88023c4 	addi	r2,sp,143
    54b0:	df0022c4 	addi	fp,sp,139
    54b4:	d8c03317 	ldw	r3,204(sp)
    54b8:	1739c83a 	sub	fp,r2,fp
    54bc:	d9003317 	ldw	r4,204(sp)
    54c0:	e0c7883a 	add	r3,fp,r3
    54c4:	df003a15 	stw	fp,232(sp)
    54c8:	d8c02e15 	stw	r3,184(sp)
    54cc:	00800044 	movi	r2,1
    54d0:	1100b30e 	bge	r2,r4,57a0 <___vfprintf_internal_r+0x2110>
    54d4:	d8c02e17 	ldw	r3,184(sp)
    54d8:	18c00044 	addi	r3,r3,1
    54dc:	d8c02e15 	stw	r3,184(sp)
    54e0:	1805883a 	mov	r2,r3
    54e4:	1800ac16 	blt	r3,zero,5798 <___vfprintf_internal_r+0x2108>
    54e8:	d8003215 	stw	zero,200(sp)
    54ec:	003e5d06 	br	4e64 <__alt_data_end+0xff004e64>
    54f0:	d9002c17 	ldw	r4,176(sp)
    54f4:	d9801e04 	addi	r6,sp,120
    54f8:	b80b883a 	mov	r5,r23
    54fc:	000a42c0 	call	a42c <__sprint_r>
    5500:	1039651e 	bne	r2,zero,3a98 <__alt_data_end+0xff003a98>
    5504:	dc402617 	ldw	r17,152(sp)
    5508:	d8c02017 	ldw	r3,128(sp)
    550c:	d8801f17 	ldw	r2,124(sp)
    5510:	da000404 	addi	r8,sp,16
    5514:	003ed606 	br	5070 <__alt_data_end+0xff005070>
    5518:	582b883a 	mov	r21,r11
    551c:	d8002915 	stw	zero,164(sp)
    5520:	0038bd06 	br	3818 <__alt_data_end+0xff003818>
    5524:	d8802917 	ldw	r2,164(sp)
    5528:	103e071e 	bne	r2,zero,4d48 <__alt_data_end+0xff004d48>
    552c:	dc002915 	stw	r16,164(sp)
    5530:	003e0506 	br	4d48 <__alt_data_end+0xff004d48>
    5534:	d9002917 	ldw	r4,164(sp)
    5538:	20c00044 	addi	r3,r4,1
    553c:	003e0f06 	br	4d7c <__alt_data_end+0xff004d7c>
    5540:	01400184 	movi	r5,6
    5544:	d9402915 	stw	r5,164(sp)
    5548:	003dff06 	br	4d48 <__alt_data_end+0xff004d48>
    554c:	d8802104 	addi	r2,sp,132
    5550:	d8800315 	stw	r2,12(sp)
    5554:	d8802504 	addi	r2,sp,148
    5558:	d8800215 	stw	r2,8(sp)
    555c:	d8802604 	addi	r2,sp,152
    5560:	d8800115 	stw	r2,4(sp)
    5564:	d8802917 	ldw	r2,164(sp)
    5568:	d9403617 	ldw	r5,216(sp)
    556c:	d9002c17 	ldw	r4,176(sp)
    5570:	d8800015 	stw	r2,0(sp)
    5574:	01c000c4 	movi	r7,3
    5578:	980d883a 	mov	r6,r19
    557c:	da003d15 	stw	r8,244(sp)
    5580:	0005cb40 	call	5cb4 <_dtoa_r>
    5584:	d8c02917 	ldw	r3,164(sp)
    5588:	da003d17 	ldw	r8,244(sp)
    558c:	1021883a 	mov	r16,r2
    5590:	10f9883a 	add	fp,r2,r3
    5594:	81000007 	ldb	r4,0(r16)
    5598:	00800c04 	movi	r2,48
    559c:	20805e26 	beq	r4,r2,5718 <___vfprintf_internal_r+0x2088>
    55a0:	d8c02617 	ldw	r3,152(sp)
    55a4:	e0f9883a 	add	fp,fp,r3
    55a8:	003e0a06 	br	4dd4 <__alt_data_end+0xff004dd4>
    55ac:	00c00b44 	movi	r3,45
    55b0:	24e0003c 	xorhi	r19,r4,32768
    55b4:	d8c02a05 	stb	r3,168(sp)
    55b8:	003de906 	br	4d60 <__alt_data_end+0xff004d60>
    55bc:	d8c03217 	ldw	r3,200(sp)
    55c0:	00c07a0e 	bge	zero,r3,57ac <___vfprintf_internal_r+0x211c>
    55c4:	00800044 	movi	r2,1
    55c8:	d9003317 	ldw	r4,204(sp)
    55cc:	1105883a 	add	r2,r2,r4
    55d0:	d8802e15 	stw	r2,184(sp)
    55d4:	10004e16 	blt	r2,zero,5710 <___vfprintf_internal_r+0x2080>
    55d8:	044019c4 	movi	r17,103
    55dc:	003e2106 	br	4e64 <__alt_data_end+0xff004e64>
    55e0:	d9002917 	ldw	r4,164(sp)
    55e4:	d8802104 	addi	r2,sp,132
    55e8:	d8800315 	stw	r2,12(sp)
    55ec:	d9000015 	stw	r4,0(sp)
    55f0:	d8802504 	addi	r2,sp,148
    55f4:	d9403617 	ldw	r5,216(sp)
    55f8:	d9002c17 	ldw	r4,176(sp)
    55fc:	d8800215 	stw	r2,8(sp)
    5600:	d8802604 	addi	r2,sp,152
    5604:	d8800115 	stw	r2,4(sp)
    5608:	01c000c4 	movi	r7,3
    560c:	980d883a 	mov	r6,r19
    5610:	da003d15 	stw	r8,244(sp)
    5614:	0005cb40 	call	5cb4 <_dtoa_r>
    5618:	d8c02917 	ldw	r3,164(sp)
    561c:	da003d17 	ldw	r8,244(sp)
    5620:	1021883a 	mov	r16,r2
    5624:	00801184 	movi	r2,70
    5628:	80f9883a 	add	fp,r16,r3
    562c:	88bfd926 	beq	r17,r2,5594 <__alt_data_end+0xff005594>
    5630:	003de806 	br	4dd4 <__alt_data_end+0xff004dd4>
    5634:	d9002917 	ldw	r4,164(sp)
    5638:	00c04d0e 	bge	zero,r3,5770 <___vfprintf_internal_r+0x20e0>
    563c:	2000441e 	bne	r4,zero,5750 <___vfprintf_internal_r+0x20c0>
    5640:	9480004c 	andi	r18,r18,1
    5644:	9000421e 	bne	r18,zero,5750 <___vfprintf_internal_r+0x20c0>
    5648:	1805883a 	mov	r2,r3
    564c:	18007016 	blt	r3,zero,5810 <___vfprintf_internal_r+0x2180>
    5650:	d8c03217 	ldw	r3,200(sp)
    5654:	d8c02e15 	stw	r3,184(sp)
    5658:	003e0206 	br	4e64 <__alt_data_end+0xff004e64>
    565c:	df0022c4 	addi	fp,sp,139
    5660:	dc002915 	stw	r16,164(sp)
    5664:	4027883a 	mov	r19,r8
    5668:	e021883a 	mov	r16,fp
    566c:	b009883a 	mov	r4,r22
    5670:	01400284 	movi	r5,10
    5674:	0002b000 	call	2b00 <__modsi3>
    5678:	10800c04 	addi	r2,r2,48
    567c:	843fffc4 	addi	r16,r16,-1
    5680:	b009883a 	mov	r4,r22
    5684:	01400284 	movi	r5,10
    5688:	80800005 	stb	r2,0(r16)
    568c:	0002a7c0 	call	2a7c <__divsi3>
    5690:	102d883a 	mov	r22,r2
    5694:	00800244 	movi	r2,9
    5698:	15bff416 	blt	r2,r22,566c <__alt_data_end+0xff00566c>
    569c:	9811883a 	mov	r8,r19
    56a0:	b0800c04 	addi	r2,r22,48
    56a4:	8027883a 	mov	r19,r16
    56a8:	997fffc4 	addi	r5,r19,-1
    56ac:	98bfffc5 	stb	r2,-1(r19)
    56b0:	dc002917 	ldw	r16,164(sp)
    56b4:	2f006a2e 	bgeu	r5,fp,5860 <___vfprintf_internal_r+0x21d0>
    56b8:	d9c02384 	addi	r7,sp,142
    56bc:	3ccfc83a 	sub	r7,r7,r19
    56c0:	d9002344 	addi	r4,sp,141
    56c4:	e1cf883a 	add	r7,fp,r7
    56c8:	00000106 	br	56d0 <___vfprintf_internal_r+0x2040>
    56cc:	28800003 	ldbu	r2,0(r5)
    56d0:	20800005 	stb	r2,0(r4)
    56d4:	21000044 	addi	r4,r4,1
    56d8:	29400044 	addi	r5,r5,1
    56dc:	393ffb1e 	bne	r7,r4,56cc <__alt_data_end+0xff0056cc>
    56e0:	d8802304 	addi	r2,sp,140
    56e4:	14c5c83a 	sub	r2,r2,r19
    56e8:	d8c02344 	addi	r3,sp,141
    56ec:	1885883a 	add	r2,r3,r2
    56f0:	003f7006 	br	54b4 <__alt_data_end+0xff0054b4>
    56f4:	0005883a 	mov	r2,zero
    56f8:	003f0f06 	br	5338 <__alt_data_end+0xff005338>
    56fc:	d8c03217 	ldw	r3,200(sp)
    5700:	18c00044 	addi	r3,r3,1
    5704:	d8c02e15 	stw	r3,184(sp)
    5708:	1805883a 	mov	r2,r3
    570c:	183fb20e 	bge	r3,zero,55d8 <__alt_data_end+0xff0055d8>
    5710:	0005883a 	mov	r2,zero
    5714:	003fb006 	br	55d8 <__alt_data_end+0xff0055d8>
    5718:	d9003617 	ldw	r4,216(sp)
    571c:	000d883a 	mov	r6,zero
    5720:	000f883a 	mov	r7,zero
    5724:	980b883a 	mov	r5,r19
    5728:	d8c03c15 	stw	r3,240(sp)
    572c:	da003d15 	stw	r8,244(sp)
    5730:	000def00 	call	def0 <__eqdf2>
    5734:	d8c03c17 	ldw	r3,240(sp)
    5738:	da003d17 	ldw	r8,244(sp)
    573c:	103f9826 	beq	r2,zero,55a0 <__alt_data_end+0xff0055a0>
    5740:	00800044 	movi	r2,1
    5744:	10c7c83a 	sub	r3,r2,r3
    5748:	d8c02615 	stw	r3,152(sp)
    574c:	003f9506 	br	55a4 <__alt_data_end+0xff0055a4>
    5750:	d9002917 	ldw	r4,164(sp)
    5754:	d8c03217 	ldw	r3,200(sp)
    5758:	20800044 	addi	r2,r4,1
    575c:	1885883a 	add	r2,r3,r2
    5760:	d8802e15 	stw	r2,184(sp)
    5764:	103dbf0e 	bge	r2,zero,4e64 <__alt_data_end+0xff004e64>
    5768:	0005883a 	mov	r2,zero
    576c:	003dbd06 	br	4e64 <__alt_data_end+0xff004e64>
    5770:	2000211e 	bne	r4,zero,57f8 <___vfprintf_internal_r+0x2168>
    5774:	9480004c 	andi	r18,r18,1
    5778:	90001f1e 	bne	r18,zero,57f8 <___vfprintf_internal_r+0x2168>
    577c:	00800044 	movi	r2,1
    5780:	d8802e15 	stw	r2,184(sp)
    5784:	003db706 	br	4e64 <__alt_data_end+0xff004e64>
    5788:	00800b44 	movi	r2,45
    578c:	05adc83a 	sub	r22,zero,r22
    5790:	d8802305 	stb	r2,140(sp)
    5794:	003f3f06 	br	5494 <__alt_data_end+0xff005494>
    5798:	0005883a 	mov	r2,zero
    579c:	003f5206 	br	54e8 <__alt_data_end+0xff0054e8>
    57a0:	90a4703a 	and	r18,r18,r2
    57a4:	903f4e26 	beq	r18,zero,54e0 <__alt_data_end+0xff0054e0>
    57a8:	003f4a06 	br	54d4 <__alt_data_end+0xff0054d4>
    57ac:	00800084 	movi	r2,2
    57b0:	10c5c83a 	sub	r2,r2,r3
    57b4:	003f8406 	br	55c8 <__alt_data_end+0xff0055c8>
    57b8:	d8802d17 	ldw	r2,180(sp)
    57bc:	d9002d17 	ldw	r4,180(sp)
    57c0:	ac400043 	ldbu	r17,1(r21)
    57c4:	10800017 	ldw	r2,0(r2)
    57c8:	582b883a 	mov	r21,r11
    57cc:	d8802915 	stw	r2,164(sp)
    57d0:	20800104 	addi	r2,r4,4
    57d4:	d9002917 	ldw	r4,164(sp)
    57d8:	d8802d15 	stw	r2,180(sp)
    57dc:	203e7a0e 	bge	r4,zero,51c8 <__alt_data_end+0xff0051c8>
    57e0:	8c403fcc 	andi	r17,r17,255
    57e4:	00bfffc4 	movi	r2,-1
    57e8:	8c40201c 	xori	r17,r17,128
    57ec:	d8802915 	stw	r2,164(sp)
    57f0:	8c7fe004 	addi	r17,r17,-128
    57f4:	00380706 	br	3814 <__alt_data_end+0xff003814>
    57f8:	d8c02917 	ldw	r3,164(sp)
    57fc:	18c00084 	addi	r3,r3,2
    5800:	d8c02e15 	stw	r3,184(sp)
    5804:	1805883a 	mov	r2,r3
    5808:	183d960e 	bge	r3,zero,4e64 <__alt_data_end+0xff004e64>
    580c:	003fd606 	br	5768 <__alt_data_end+0xff005768>
    5810:	0005883a 	mov	r2,zero
    5814:	003f8e06 	br	5650 <__alt_data_end+0xff005650>
    5818:	9080004c 	andi	r2,r18,1
    581c:	103f811e 	bne	r2,zero,5624 <__alt_data_end+0xff005624>
    5820:	d8802117 	ldw	r2,132(sp)
    5824:	1405c83a 	sub	r2,r2,r16
    5828:	d8803315 	stw	r2,204(sp)
    582c:	b47ef326 	beq	r22,r17,53fc <__alt_data_end+0xff0053fc>
    5830:	dd802617 	ldw	r22,152(sp)
    5834:	003f1106 	br	547c <__alt_data_end+0xff00547c>
    5838:	d9c02785 	stb	r7,158(sp)
    583c:	00390406 	br	3c50 <__alt_data_end+0xff003c50>
    5840:	d9c02785 	stb	r7,158(sp)
    5844:	0038d306 	br	3b94 <__alt_data_end+0xff003b94>
    5848:	d9c02785 	stb	r7,158(sp)
    584c:	003a6106 	br	41d4 <__alt_data_end+0xff0041d4>
    5850:	d9c02785 	stb	r7,158(sp)
    5854:	003af806 	br	4438 <__alt_data_end+0xff004438>
    5858:	0005883a 	mov	r2,zero
    585c:	003d7e06 	br	4e58 <__alt_data_end+0xff004e58>
    5860:	d8802344 	addi	r2,sp,141
    5864:	003f1306 	br	54b4 <__alt_data_end+0xff0054b4>
    5868:	d9c02785 	stb	r7,158(sp)
    586c:	00392306 	br	3cfc <__alt_data_end+0xff003cfc>
    5870:	d9c02785 	stb	r7,158(sp)
    5874:	003aa906 	br	431c <__alt_data_end+0xff00431c>
    5878:	d9c02785 	stb	r7,158(sp)
    587c:	003a3d06 	br	4174 <__alt_data_end+0xff004174>
    5880:	d9c02785 	stb	r7,158(sp)
    5884:	003aca06 	br	43b0 <__alt_data_end+0xff0043b0>

00005888 <__vfprintf_internal>:
    5888:	00800074 	movhi	r2,1
    588c:	10902304 	addi	r2,r2,16524
    5890:	300f883a 	mov	r7,r6
    5894:	280d883a 	mov	r6,r5
    5898:	200b883a 	mov	r5,r4
    589c:	11000017 	ldw	r4,0(r2)
    58a0:	00036901 	jmpi	3690 <___vfprintf_internal_r>

000058a4 <__sbprintf>:
    58a4:	2880030b 	ldhu	r2,12(r5)
    58a8:	2ac01917 	ldw	r11,100(r5)
    58ac:	2a80038b 	ldhu	r10,14(r5)
    58b0:	2a400717 	ldw	r9,28(r5)
    58b4:	2a000917 	ldw	r8,36(r5)
    58b8:	defee204 	addi	sp,sp,-1144
    58bc:	00c10004 	movi	r3,1024
    58c0:	dc011a15 	stw	r16,1128(sp)
    58c4:	10bfff4c 	andi	r2,r2,65533
    58c8:	2821883a 	mov	r16,r5
    58cc:	d8cb883a 	add	r5,sp,r3
    58d0:	dc811c15 	stw	r18,1136(sp)
    58d4:	dc411b15 	stw	r17,1132(sp)
    58d8:	dfc11d15 	stw	ra,1140(sp)
    58dc:	2025883a 	mov	r18,r4
    58e0:	d881030d 	sth	r2,1036(sp)
    58e4:	dac11915 	stw	r11,1124(sp)
    58e8:	da81038d 	sth	r10,1038(sp)
    58ec:	da410715 	stw	r9,1052(sp)
    58f0:	da010915 	stw	r8,1060(sp)
    58f4:	dec10015 	stw	sp,1024(sp)
    58f8:	dec10415 	stw	sp,1040(sp)
    58fc:	d8c10215 	stw	r3,1032(sp)
    5900:	d8c10515 	stw	r3,1044(sp)
    5904:	d8010615 	stw	zero,1048(sp)
    5908:	00036900 	call	3690 <___vfprintf_internal_r>
    590c:	1023883a 	mov	r17,r2
    5910:	10000416 	blt	r2,zero,5924 <__sbprintf+0x80>
    5914:	d9410004 	addi	r5,sp,1024
    5918:	9009883a 	mov	r4,r18
    591c:	00075580 	call	7558 <_fflush_r>
    5920:	10000d1e 	bne	r2,zero,5958 <__sbprintf+0xb4>
    5924:	d881030b 	ldhu	r2,1036(sp)
    5928:	1080100c 	andi	r2,r2,64
    592c:	10000326 	beq	r2,zero,593c <__sbprintf+0x98>
    5930:	8080030b 	ldhu	r2,12(r16)
    5934:	10801014 	ori	r2,r2,64
    5938:	8080030d 	sth	r2,12(r16)
    593c:	8805883a 	mov	r2,r17
    5940:	dfc11d17 	ldw	ra,1140(sp)
    5944:	dc811c17 	ldw	r18,1136(sp)
    5948:	dc411b17 	ldw	r17,1132(sp)
    594c:	dc011a17 	ldw	r16,1128(sp)
    5950:	dec11e04 	addi	sp,sp,1144
    5954:	f800283a 	ret
    5958:	047fffc4 	movi	r17,-1
    595c:	003ff106 	br	5924 <__alt_data_end+0xff005924>

00005960 <__swsetup_r>:
    5960:	00800074 	movhi	r2,1
    5964:	defffd04 	addi	sp,sp,-12
    5968:	10902304 	addi	r2,r2,16524
    596c:	dc400115 	stw	r17,4(sp)
    5970:	2023883a 	mov	r17,r4
    5974:	11000017 	ldw	r4,0(r2)
    5978:	dc000015 	stw	r16,0(sp)
    597c:	dfc00215 	stw	ra,8(sp)
    5980:	2821883a 	mov	r16,r5
    5984:	20000226 	beq	r4,zero,5990 <__swsetup_r+0x30>
    5988:	20800e17 	ldw	r2,56(r4)
    598c:	10003126 	beq	r2,zero,5a54 <__swsetup_r+0xf4>
    5990:	8080030b 	ldhu	r2,12(r16)
    5994:	10c0020c 	andi	r3,r2,8
    5998:	1009883a 	mov	r4,r2
    599c:	18000f26 	beq	r3,zero,59dc <__swsetup_r+0x7c>
    59a0:	80c00417 	ldw	r3,16(r16)
    59a4:	18001526 	beq	r3,zero,59fc <__swsetup_r+0x9c>
    59a8:	1100004c 	andi	r4,r2,1
    59ac:	20001c1e 	bne	r4,zero,5a20 <__swsetup_r+0xc0>
    59b0:	1080008c 	andi	r2,r2,2
    59b4:	1000291e 	bne	r2,zero,5a5c <__swsetup_r+0xfc>
    59b8:	80800517 	ldw	r2,20(r16)
    59bc:	80800215 	stw	r2,8(r16)
    59c0:	18001c26 	beq	r3,zero,5a34 <__swsetup_r+0xd4>
    59c4:	0005883a 	mov	r2,zero
    59c8:	dfc00217 	ldw	ra,8(sp)
    59cc:	dc400117 	ldw	r17,4(sp)
    59d0:	dc000017 	ldw	r16,0(sp)
    59d4:	dec00304 	addi	sp,sp,12
    59d8:	f800283a 	ret
    59dc:	2080040c 	andi	r2,r4,16
    59e0:	10002e26 	beq	r2,zero,5a9c <__swsetup_r+0x13c>
    59e4:	2080010c 	andi	r2,r4,4
    59e8:	10001e1e 	bne	r2,zero,5a64 <__swsetup_r+0x104>
    59ec:	80c00417 	ldw	r3,16(r16)
    59f0:	20800214 	ori	r2,r4,8
    59f4:	8080030d 	sth	r2,12(r16)
    59f8:	183feb1e 	bne	r3,zero,59a8 <__alt_data_end+0xff0059a8>
    59fc:	1100a00c 	andi	r4,r2,640
    5a00:	01408004 	movi	r5,512
    5a04:	217fe826 	beq	r4,r5,59a8 <__alt_data_end+0xff0059a8>
    5a08:	800b883a 	mov	r5,r16
    5a0c:	8809883a 	mov	r4,r17
    5a10:	00084d80 	call	84d8 <__smakebuf_r>
    5a14:	8080030b 	ldhu	r2,12(r16)
    5a18:	80c00417 	ldw	r3,16(r16)
    5a1c:	003fe206 	br	59a8 <__alt_data_end+0xff0059a8>
    5a20:	80800517 	ldw	r2,20(r16)
    5a24:	80000215 	stw	zero,8(r16)
    5a28:	0085c83a 	sub	r2,zero,r2
    5a2c:	80800615 	stw	r2,24(r16)
    5a30:	183fe41e 	bne	r3,zero,59c4 <__alt_data_end+0xff0059c4>
    5a34:	80c0030b 	ldhu	r3,12(r16)
    5a38:	0005883a 	mov	r2,zero
    5a3c:	1900200c 	andi	r4,r3,128
    5a40:	203fe126 	beq	r4,zero,59c8 <__alt_data_end+0xff0059c8>
    5a44:	18c01014 	ori	r3,r3,64
    5a48:	80c0030d 	sth	r3,12(r16)
    5a4c:	00bfffc4 	movi	r2,-1
    5a50:	003fdd06 	br	59c8 <__alt_data_end+0xff0059c8>
    5a54:	00079340 	call	7934 <__sinit>
    5a58:	003fcd06 	br	5990 <__alt_data_end+0xff005990>
    5a5c:	0005883a 	mov	r2,zero
    5a60:	003fd606 	br	59bc <__alt_data_end+0xff0059bc>
    5a64:	81400c17 	ldw	r5,48(r16)
    5a68:	28000626 	beq	r5,zero,5a84 <__swsetup_r+0x124>
    5a6c:	80801004 	addi	r2,r16,64
    5a70:	28800326 	beq	r5,r2,5a80 <__swsetup_r+0x120>
    5a74:	8809883a 	mov	r4,r17
    5a78:	0007aa80 	call	7aa8 <_free_r>
    5a7c:	8100030b 	ldhu	r4,12(r16)
    5a80:	80000c15 	stw	zero,48(r16)
    5a84:	80c00417 	ldw	r3,16(r16)
    5a88:	00bff6c4 	movi	r2,-37
    5a8c:	1108703a 	and	r4,r2,r4
    5a90:	80000115 	stw	zero,4(r16)
    5a94:	80c00015 	stw	r3,0(r16)
    5a98:	003fd506 	br	59f0 <__alt_data_end+0xff0059f0>
    5a9c:	00800244 	movi	r2,9
    5aa0:	88800015 	stw	r2,0(r17)
    5aa4:	20801014 	ori	r2,r4,64
    5aa8:	8080030d 	sth	r2,12(r16)
    5aac:	00bfffc4 	movi	r2,-1
    5ab0:	003fc506 	br	59c8 <__alt_data_end+0xff0059c8>

00005ab4 <quorem>:
    5ab4:	defff704 	addi	sp,sp,-36
    5ab8:	dc800215 	stw	r18,8(sp)
    5abc:	20800417 	ldw	r2,16(r4)
    5ac0:	2c800417 	ldw	r18,16(r5)
    5ac4:	dfc00815 	stw	ra,32(sp)
    5ac8:	ddc00715 	stw	r23,28(sp)
    5acc:	dd800615 	stw	r22,24(sp)
    5ad0:	dd400515 	stw	r21,20(sp)
    5ad4:	dd000415 	stw	r20,16(sp)
    5ad8:	dcc00315 	stw	r19,12(sp)
    5adc:	dc400115 	stw	r17,4(sp)
    5ae0:	dc000015 	stw	r16,0(sp)
    5ae4:	14807116 	blt	r2,r18,5cac <quorem+0x1f8>
    5ae8:	94bfffc4 	addi	r18,r18,-1
    5aec:	94ad883a 	add	r22,r18,r18
    5af0:	b5ad883a 	add	r22,r22,r22
    5af4:	2c400504 	addi	r17,r5,20
    5af8:	8da9883a 	add	r20,r17,r22
    5afc:	25400504 	addi	r21,r4,20
    5b00:	282f883a 	mov	r23,r5
    5b04:	adad883a 	add	r22,r21,r22
    5b08:	a1400017 	ldw	r5,0(r20)
    5b0c:	2021883a 	mov	r16,r4
    5b10:	b1000017 	ldw	r4,0(r22)
    5b14:	29400044 	addi	r5,r5,1
    5b18:	0002b740 	call	2b74 <__udivsi3>
    5b1c:	1027883a 	mov	r19,r2
    5b20:	10002c26 	beq	r2,zero,5bd4 <quorem+0x120>
    5b24:	a813883a 	mov	r9,r21
    5b28:	880b883a 	mov	r5,r17
    5b2c:	0009883a 	mov	r4,zero
    5b30:	000d883a 	mov	r6,zero
    5b34:	2a000017 	ldw	r8,0(r5)
    5b38:	49c00017 	ldw	r7,0(r9)
    5b3c:	29400104 	addi	r5,r5,4
    5b40:	40bfffcc 	andi	r2,r8,65535
    5b44:	14c5383a 	mul	r2,r2,r19
    5b48:	4010d43a 	srli	r8,r8,16
    5b4c:	38ffffcc 	andi	r3,r7,65535
    5b50:	1105883a 	add	r2,r2,r4
    5b54:	1008d43a 	srli	r4,r2,16
    5b58:	44d1383a 	mul	r8,r8,r19
    5b5c:	198d883a 	add	r6,r3,r6
    5b60:	10ffffcc 	andi	r3,r2,65535
    5b64:	30c7c83a 	sub	r3,r6,r3
    5b68:	380ed43a 	srli	r7,r7,16
    5b6c:	4105883a 	add	r2,r8,r4
    5b70:	180dd43a 	srai	r6,r3,16
    5b74:	113fffcc 	andi	r4,r2,65535
    5b78:	390fc83a 	sub	r7,r7,r4
    5b7c:	398d883a 	add	r6,r7,r6
    5b80:	300e943a 	slli	r7,r6,16
    5b84:	18ffffcc 	andi	r3,r3,65535
    5b88:	1008d43a 	srli	r4,r2,16
    5b8c:	38ceb03a 	or	r7,r7,r3
    5b90:	49c00015 	stw	r7,0(r9)
    5b94:	300dd43a 	srai	r6,r6,16
    5b98:	4a400104 	addi	r9,r9,4
    5b9c:	a17fe52e 	bgeu	r20,r5,5b34 <__alt_data_end+0xff005b34>
    5ba0:	b0800017 	ldw	r2,0(r22)
    5ba4:	10000b1e 	bne	r2,zero,5bd4 <quorem+0x120>
    5ba8:	b0bfff04 	addi	r2,r22,-4
    5bac:	a880082e 	bgeu	r21,r2,5bd0 <quorem+0x11c>
    5bb0:	b0ffff17 	ldw	r3,-4(r22)
    5bb4:	18000326 	beq	r3,zero,5bc4 <quorem+0x110>
    5bb8:	00000506 	br	5bd0 <quorem+0x11c>
    5bbc:	10c00017 	ldw	r3,0(r2)
    5bc0:	1800031e 	bne	r3,zero,5bd0 <quorem+0x11c>
    5bc4:	10bfff04 	addi	r2,r2,-4
    5bc8:	94bfffc4 	addi	r18,r18,-1
    5bcc:	a8bffb36 	bltu	r21,r2,5bbc <__alt_data_end+0xff005bbc>
    5bd0:	84800415 	stw	r18,16(r16)
    5bd4:	b80b883a 	mov	r5,r23
    5bd8:	8009883a 	mov	r4,r16
    5bdc:	000940c0 	call	940c <__mcmp>
    5be0:	10002616 	blt	r2,zero,5c7c <quorem+0x1c8>
    5be4:	9cc00044 	addi	r19,r19,1
    5be8:	a805883a 	mov	r2,r21
    5bec:	000b883a 	mov	r5,zero
    5bf0:	11000017 	ldw	r4,0(r2)
    5bf4:	89800017 	ldw	r6,0(r17)
    5bf8:	10800104 	addi	r2,r2,4
    5bfc:	20ffffcc 	andi	r3,r4,65535
    5c00:	194b883a 	add	r5,r3,r5
    5c04:	30ffffcc 	andi	r3,r6,65535
    5c08:	28c7c83a 	sub	r3,r5,r3
    5c0c:	300cd43a 	srli	r6,r6,16
    5c10:	2008d43a 	srli	r4,r4,16
    5c14:	180bd43a 	srai	r5,r3,16
    5c18:	18ffffcc 	andi	r3,r3,65535
    5c1c:	2189c83a 	sub	r4,r4,r6
    5c20:	2149883a 	add	r4,r4,r5
    5c24:	200c943a 	slli	r6,r4,16
    5c28:	8c400104 	addi	r17,r17,4
    5c2c:	200bd43a 	srai	r5,r4,16
    5c30:	30c6b03a 	or	r3,r6,r3
    5c34:	10ffff15 	stw	r3,-4(r2)
    5c38:	a47fed2e 	bgeu	r20,r17,5bf0 <__alt_data_end+0xff005bf0>
    5c3c:	9485883a 	add	r2,r18,r18
    5c40:	1085883a 	add	r2,r2,r2
    5c44:	a887883a 	add	r3,r21,r2
    5c48:	18800017 	ldw	r2,0(r3)
    5c4c:	10000b1e 	bne	r2,zero,5c7c <quorem+0x1c8>
    5c50:	18bfff04 	addi	r2,r3,-4
    5c54:	a880082e 	bgeu	r21,r2,5c78 <quorem+0x1c4>
    5c58:	18ffff17 	ldw	r3,-4(r3)
    5c5c:	18000326 	beq	r3,zero,5c6c <quorem+0x1b8>
    5c60:	00000506 	br	5c78 <quorem+0x1c4>
    5c64:	10c00017 	ldw	r3,0(r2)
    5c68:	1800031e 	bne	r3,zero,5c78 <quorem+0x1c4>
    5c6c:	10bfff04 	addi	r2,r2,-4
    5c70:	94bfffc4 	addi	r18,r18,-1
    5c74:	a8bffb36 	bltu	r21,r2,5c64 <__alt_data_end+0xff005c64>
    5c78:	84800415 	stw	r18,16(r16)
    5c7c:	9805883a 	mov	r2,r19
    5c80:	dfc00817 	ldw	ra,32(sp)
    5c84:	ddc00717 	ldw	r23,28(sp)
    5c88:	dd800617 	ldw	r22,24(sp)
    5c8c:	dd400517 	ldw	r21,20(sp)
    5c90:	dd000417 	ldw	r20,16(sp)
    5c94:	dcc00317 	ldw	r19,12(sp)
    5c98:	dc800217 	ldw	r18,8(sp)
    5c9c:	dc400117 	ldw	r17,4(sp)
    5ca0:	dc000017 	ldw	r16,0(sp)
    5ca4:	dec00904 	addi	sp,sp,36
    5ca8:	f800283a 	ret
    5cac:	0005883a 	mov	r2,zero
    5cb0:	003ff306 	br	5c80 <__alt_data_end+0xff005c80>

00005cb4 <_dtoa_r>:
    5cb4:	20801017 	ldw	r2,64(r4)
    5cb8:	deffde04 	addi	sp,sp,-136
    5cbc:	df002015 	stw	fp,128(sp)
    5cc0:	dcc01b15 	stw	r19,108(sp)
    5cc4:	dc801a15 	stw	r18,104(sp)
    5cc8:	dc401915 	stw	r17,100(sp)
    5ccc:	dc001815 	stw	r16,96(sp)
    5cd0:	dfc02115 	stw	ra,132(sp)
    5cd4:	ddc01f15 	stw	r23,124(sp)
    5cd8:	dd801e15 	stw	r22,120(sp)
    5cdc:	dd401d15 	stw	r21,116(sp)
    5ce0:	dd001c15 	stw	r20,112(sp)
    5ce4:	d9c00315 	stw	r7,12(sp)
    5ce8:	2039883a 	mov	fp,r4
    5cec:	3023883a 	mov	r17,r6
    5cf0:	2825883a 	mov	r18,r5
    5cf4:	dc002417 	ldw	r16,144(sp)
    5cf8:	3027883a 	mov	r19,r6
    5cfc:	10000826 	beq	r2,zero,5d20 <_dtoa_r+0x6c>
    5d00:	21801117 	ldw	r6,68(r4)
    5d04:	00c00044 	movi	r3,1
    5d08:	100b883a 	mov	r5,r2
    5d0c:	1986983a 	sll	r3,r3,r6
    5d10:	11800115 	stw	r6,4(r2)
    5d14:	10c00215 	stw	r3,8(r2)
    5d18:	0008bec0 	call	8bec <_Bfree>
    5d1c:	e0001015 	stw	zero,64(fp)
    5d20:	88002e16 	blt	r17,zero,5ddc <_dtoa_r+0x128>
    5d24:	80000015 	stw	zero,0(r16)
    5d28:	889ffc2c 	andhi	r2,r17,32752
    5d2c:	00dffc34 	movhi	r3,32752
    5d30:	10c01c26 	beq	r2,r3,5da4 <_dtoa_r+0xf0>
    5d34:	000d883a 	mov	r6,zero
    5d38:	000f883a 	mov	r7,zero
    5d3c:	9009883a 	mov	r4,r18
    5d40:	980b883a 	mov	r5,r19
    5d44:	000def00 	call	def0 <__eqdf2>
    5d48:	10002b1e 	bne	r2,zero,5df8 <_dtoa_r+0x144>
    5d4c:	d9c02317 	ldw	r7,140(sp)
    5d50:	00800044 	movi	r2,1
    5d54:	38800015 	stw	r2,0(r7)
    5d58:	d8802517 	ldw	r2,148(sp)
    5d5c:	10019e26 	beq	r2,zero,63d8 <_dtoa_r+0x724>
    5d60:	d8c02517 	ldw	r3,148(sp)
    5d64:	00800074 	movhi	r2,1
    5d68:	1088c644 	addi	r2,r2,8985
    5d6c:	18800015 	stw	r2,0(r3)
    5d70:	10bfffc4 	addi	r2,r2,-1
    5d74:	dfc02117 	ldw	ra,132(sp)
    5d78:	df002017 	ldw	fp,128(sp)
    5d7c:	ddc01f17 	ldw	r23,124(sp)
    5d80:	dd801e17 	ldw	r22,120(sp)
    5d84:	dd401d17 	ldw	r21,116(sp)
    5d88:	dd001c17 	ldw	r20,112(sp)
    5d8c:	dcc01b17 	ldw	r19,108(sp)
    5d90:	dc801a17 	ldw	r18,104(sp)
    5d94:	dc401917 	ldw	r17,100(sp)
    5d98:	dc001817 	ldw	r16,96(sp)
    5d9c:	dec02204 	addi	sp,sp,136
    5da0:	f800283a 	ret
    5da4:	d8c02317 	ldw	r3,140(sp)
    5da8:	0089c3c4 	movi	r2,9999
    5dac:	18800015 	stw	r2,0(r3)
    5db0:	90017726 	beq	r18,zero,6390 <_dtoa_r+0x6dc>
    5db4:	00800074 	movhi	r2,1
    5db8:	1088d204 	addi	r2,r2,9032
    5dbc:	d9002517 	ldw	r4,148(sp)
    5dc0:	203fec26 	beq	r4,zero,5d74 <__alt_data_end+0xff005d74>
    5dc4:	10c000c7 	ldb	r3,3(r2)
    5dc8:	1801781e 	bne	r3,zero,63ac <_dtoa_r+0x6f8>
    5dcc:	10c000c4 	addi	r3,r2,3
    5dd0:	d9802517 	ldw	r6,148(sp)
    5dd4:	30c00015 	stw	r3,0(r6)
    5dd8:	003fe606 	br	5d74 <__alt_data_end+0xff005d74>
    5ddc:	04e00034 	movhi	r19,32768
    5de0:	9cffffc4 	addi	r19,r19,-1
    5de4:	00800044 	movi	r2,1
    5de8:	8ce6703a 	and	r19,r17,r19
    5dec:	80800015 	stw	r2,0(r16)
    5df0:	9823883a 	mov	r17,r19
    5df4:	003fcc06 	br	5d28 <__alt_data_end+0xff005d28>
    5df8:	d8800204 	addi	r2,sp,8
    5dfc:	d8800015 	stw	r2,0(sp)
    5e00:	d9c00104 	addi	r7,sp,4
    5e04:	900b883a 	mov	r5,r18
    5e08:	980d883a 	mov	r6,r19
    5e0c:	e009883a 	mov	r4,fp
    5e10:	8820d53a 	srli	r16,r17,20
    5e14:	00097d80 	call	97d8 <__d2b>
    5e18:	d8800915 	stw	r2,36(sp)
    5e1c:	8001651e 	bne	r16,zero,63b4 <_dtoa_r+0x700>
    5e20:	dd800217 	ldw	r22,8(sp)
    5e24:	dc000117 	ldw	r16,4(sp)
    5e28:	00800804 	movi	r2,32
    5e2c:	b421883a 	add	r16,r22,r16
    5e30:	80c10c84 	addi	r3,r16,1074
    5e34:	10c2d10e 	bge	r2,r3,697c <_dtoa_r+0xcc8>
    5e38:	00801004 	movi	r2,64
    5e3c:	81010484 	addi	r4,r16,1042
    5e40:	10c7c83a 	sub	r3,r2,r3
    5e44:	9108d83a 	srl	r4,r18,r4
    5e48:	88e2983a 	sll	r17,r17,r3
    5e4c:	2448b03a 	or	r4,r4,r17
    5e50:	000f2b80 	call	f2b8 <__floatunsidf>
    5e54:	017f8434 	movhi	r5,65040
    5e58:	01800044 	movi	r6,1
    5e5c:	1009883a 	mov	r4,r2
    5e60:	194b883a 	add	r5,r3,r5
    5e64:	843fffc4 	addi	r16,r16,-1
    5e68:	d9801115 	stw	r6,68(sp)
    5e6c:	000d883a 	mov	r6,zero
    5e70:	01cffe34 	movhi	r7,16376
    5e74:	000e8600 	call	e860 <__subdf3>
    5e78:	0198dbf4 	movhi	r6,25455
    5e7c:	01cff4f4 	movhi	r7,16339
    5e80:	3190d844 	addi	r6,r6,17249
    5e84:	39e1e9c4 	addi	r7,r7,-30809
    5e88:	1009883a 	mov	r4,r2
    5e8c:	180b883a 	mov	r5,r3
    5e90:	000e1480 	call	e148 <__muldf3>
    5e94:	01a2d874 	movhi	r6,35681
    5e98:	01cff1f4 	movhi	r7,16327
    5e9c:	31b22cc4 	addi	r6,r6,-14157
    5ea0:	39e28a04 	addi	r7,r7,-30168
    5ea4:	180b883a 	mov	r5,r3
    5ea8:	1009883a 	mov	r4,r2
    5eac:	000cd5c0 	call	cd5c <__adddf3>
    5eb0:	8009883a 	mov	r4,r16
    5eb4:	1029883a 	mov	r20,r2
    5eb8:	1823883a 	mov	r17,r3
    5ebc:	000f1dc0 	call	f1dc <__floatsidf>
    5ec0:	019427f4 	movhi	r6,20639
    5ec4:	01cff4f4 	movhi	r7,16339
    5ec8:	319e7ec4 	addi	r6,r6,31227
    5ecc:	39d104c4 	addi	r7,r7,17427
    5ed0:	1009883a 	mov	r4,r2
    5ed4:	180b883a 	mov	r5,r3
    5ed8:	000e1480 	call	e148 <__muldf3>
    5edc:	100d883a 	mov	r6,r2
    5ee0:	180f883a 	mov	r7,r3
    5ee4:	a009883a 	mov	r4,r20
    5ee8:	880b883a 	mov	r5,r17
    5eec:	000cd5c0 	call	cd5c <__adddf3>
    5ef0:	1009883a 	mov	r4,r2
    5ef4:	180b883a 	mov	r5,r3
    5ef8:	1029883a 	mov	r20,r2
    5efc:	1823883a 	mov	r17,r3
    5f00:	000f15c0 	call	f15c <__fixdfsi>
    5f04:	000d883a 	mov	r6,zero
    5f08:	000f883a 	mov	r7,zero
    5f0c:	a009883a 	mov	r4,r20
    5f10:	880b883a 	mov	r5,r17
    5f14:	d8800515 	stw	r2,20(sp)
    5f18:	000e0540 	call	e054 <__ledf2>
    5f1c:	10028716 	blt	r2,zero,693c <_dtoa_r+0xc88>
    5f20:	d8c00517 	ldw	r3,20(sp)
    5f24:	00800584 	movi	r2,22
    5f28:	10c27536 	bltu	r2,r3,6900 <_dtoa_r+0xc4c>
    5f2c:	180490fa 	slli	r2,r3,3
    5f30:	00c00074 	movhi	r3,1
    5f34:	18c8ee04 	addi	r3,r3,9144
    5f38:	1885883a 	add	r2,r3,r2
    5f3c:	11000017 	ldw	r4,0(r2)
    5f40:	11400117 	ldw	r5,4(r2)
    5f44:	900d883a 	mov	r6,r18
    5f48:	980f883a 	mov	r7,r19
    5f4c:	000df780 	call	df78 <__gedf2>
    5f50:	00828d0e 	bge	zero,r2,6988 <_dtoa_r+0xcd4>
    5f54:	d9000517 	ldw	r4,20(sp)
    5f58:	d8000e15 	stw	zero,56(sp)
    5f5c:	213fffc4 	addi	r4,r4,-1
    5f60:	d9000515 	stw	r4,20(sp)
    5f64:	b42dc83a 	sub	r22,r22,r16
    5f68:	b5bfffc4 	addi	r22,r22,-1
    5f6c:	b0026f16 	blt	r22,zero,692c <_dtoa_r+0xc78>
    5f70:	d8000815 	stw	zero,32(sp)
    5f74:	d9c00517 	ldw	r7,20(sp)
    5f78:	38026416 	blt	r7,zero,690c <_dtoa_r+0xc58>
    5f7c:	b1ed883a 	add	r22,r22,r7
    5f80:	d9c00d15 	stw	r7,52(sp)
    5f84:	d8000a15 	stw	zero,40(sp)
    5f88:	d9800317 	ldw	r6,12(sp)
    5f8c:	00800244 	movi	r2,9
    5f90:	11811436 	bltu	r2,r6,63e4 <_dtoa_r+0x730>
    5f94:	00800144 	movi	r2,5
    5f98:	1184e10e 	bge	r2,r6,7320 <_dtoa_r+0x166c>
    5f9c:	31bfff04 	addi	r6,r6,-4
    5fa0:	d9800315 	stw	r6,12(sp)
    5fa4:	0023883a 	mov	r17,zero
    5fa8:	d9800317 	ldw	r6,12(sp)
    5fac:	008000c4 	movi	r2,3
    5fb0:	30836726 	beq	r6,r2,6d50 <_dtoa_r+0x109c>
    5fb4:	1183410e 	bge	r2,r6,6cbc <_dtoa_r+0x1008>
    5fb8:	d9c00317 	ldw	r7,12(sp)
    5fbc:	00800104 	movi	r2,4
    5fc0:	38827c26 	beq	r7,r2,69b4 <_dtoa_r+0xd00>
    5fc4:	00800144 	movi	r2,5
    5fc8:	3884c41e 	bne	r7,r2,72dc <_dtoa_r+0x1628>
    5fcc:	00800044 	movi	r2,1
    5fd0:	d8800b15 	stw	r2,44(sp)
    5fd4:	d8c00517 	ldw	r3,20(sp)
    5fd8:	d9002217 	ldw	r4,136(sp)
    5fdc:	1907883a 	add	r3,r3,r4
    5fe0:	19800044 	addi	r6,r3,1
    5fe4:	d8c00c15 	stw	r3,48(sp)
    5fe8:	d9800615 	stw	r6,24(sp)
    5fec:	0183a40e 	bge	zero,r6,6e80 <_dtoa_r+0x11cc>
    5ff0:	d9800617 	ldw	r6,24(sp)
    5ff4:	3021883a 	mov	r16,r6
    5ff8:	e0001115 	stw	zero,68(fp)
    5ffc:	008005c4 	movi	r2,23
    6000:	1184c92e 	bgeu	r2,r6,7328 <_dtoa_r+0x1674>
    6004:	00c00044 	movi	r3,1
    6008:	00800104 	movi	r2,4
    600c:	1085883a 	add	r2,r2,r2
    6010:	11000504 	addi	r4,r2,20
    6014:	180b883a 	mov	r5,r3
    6018:	18c00044 	addi	r3,r3,1
    601c:	313ffb2e 	bgeu	r6,r4,600c <__alt_data_end+0xff00600c>
    6020:	e1401115 	stw	r5,68(fp)
    6024:	e009883a 	mov	r4,fp
    6028:	0008b440 	call	8b44 <_Balloc>
    602c:	d8800715 	stw	r2,28(sp)
    6030:	e0801015 	stw	r2,64(fp)
    6034:	00800384 	movi	r2,14
    6038:	1400f736 	bltu	r2,r16,6418 <_dtoa_r+0x764>
    603c:	8800f626 	beq	r17,zero,6418 <_dtoa_r+0x764>
    6040:	d9c00517 	ldw	r7,20(sp)
    6044:	01c39a0e 	bge	zero,r7,6eb0 <_dtoa_r+0x11fc>
    6048:	388003cc 	andi	r2,r7,15
    604c:	100490fa 	slli	r2,r2,3
    6050:	382bd13a 	srai	r21,r7,4
    6054:	00c00074 	movhi	r3,1
    6058:	18c8ee04 	addi	r3,r3,9144
    605c:	1885883a 	add	r2,r3,r2
    6060:	a8c0040c 	andi	r3,r21,16
    6064:	12400017 	ldw	r9,0(r2)
    6068:	12000117 	ldw	r8,4(r2)
    606c:	18037926 	beq	r3,zero,6e54 <_dtoa_r+0x11a0>
    6070:	00800074 	movhi	r2,1
    6074:	1088e404 	addi	r2,r2,9104
    6078:	11800817 	ldw	r6,32(r2)
    607c:	11c00917 	ldw	r7,36(r2)
    6080:	9009883a 	mov	r4,r18
    6084:	980b883a 	mov	r5,r19
    6088:	da001715 	stw	r8,92(sp)
    608c:	da401615 	stw	r9,88(sp)
    6090:	000d6080 	call	d608 <__divdf3>
    6094:	da001717 	ldw	r8,92(sp)
    6098:	da401617 	ldw	r9,88(sp)
    609c:	ad4003cc 	andi	r21,r21,15
    60a0:	040000c4 	movi	r16,3
    60a4:	1023883a 	mov	r17,r2
    60a8:	1829883a 	mov	r20,r3
    60ac:	a8001126 	beq	r21,zero,60f4 <_dtoa_r+0x440>
    60b0:	05c00074 	movhi	r23,1
    60b4:	bdc8e404 	addi	r23,r23,9104
    60b8:	4805883a 	mov	r2,r9
    60bc:	4007883a 	mov	r3,r8
    60c0:	a980004c 	andi	r6,r21,1
    60c4:	1009883a 	mov	r4,r2
    60c8:	a82bd07a 	srai	r21,r21,1
    60cc:	180b883a 	mov	r5,r3
    60d0:	30000426 	beq	r6,zero,60e4 <_dtoa_r+0x430>
    60d4:	b9800017 	ldw	r6,0(r23)
    60d8:	b9c00117 	ldw	r7,4(r23)
    60dc:	84000044 	addi	r16,r16,1
    60e0:	000e1480 	call	e148 <__muldf3>
    60e4:	bdc00204 	addi	r23,r23,8
    60e8:	a83ff51e 	bne	r21,zero,60c0 <__alt_data_end+0xff0060c0>
    60ec:	1013883a 	mov	r9,r2
    60f0:	1811883a 	mov	r8,r3
    60f4:	480d883a 	mov	r6,r9
    60f8:	400f883a 	mov	r7,r8
    60fc:	8809883a 	mov	r4,r17
    6100:	a00b883a 	mov	r5,r20
    6104:	000d6080 	call	d608 <__divdf3>
    6108:	d8800f15 	stw	r2,60(sp)
    610c:	d8c01015 	stw	r3,64(sp)
    6110:	d8c00e17 	ldw	r3,56(sp)
    6114:	18000626 	beq	r3,zero,6130 <_dtoa_r+0x47c>
    6118:	d9000f17 	ldw	r4,60(sp)
    611c:	d9401017 	ldw	r5,64(sp)
    6120:	000d883a 	mov	r6,zero
    6124:	01cffc34 	movhi	r7,16368
    6128:	000e0540 	call	e054 <__ledf2>
    612c:	10040b16 	blt	r2,zero,715c <_dtoa_r+0x14a8>
    6130:	8009883a 	mov	r4,r16
    6134:	000f1dc0 	call	f1dc <__floatsidf>
    6138:	d9800f17 	ldw	r6,60(sp)
    613c:	d9c01017 	ldw	r7,64(sp)
    6140:	1009883a 	mov	r4,r2
    6144:	180b883a 	mov	r5,r3
    6148:	000e1480 	call	e148 <__muldf3>
    614c:	000d883a 	mov	r6,zero
    6150:	01d00734 	movhi	r7,16412
    6154:	1009883a 	mov	r4,r2
    6158:	180b883a 	mov	r5,r3
    615c:	000cd5c0 	call	cd5c <__adddf3>
    6160:	1021883a 	mov	r16,r2
    6164:	d8800617 	ldw	r2,24(sp)
    6168:	047f3034 	movhi	r17,64704
    616c:	1c63883a 	add	r17,r3,r17
    6170:	10031826 	beq	r2,zero,6dd4 <_dtoa_r+0x1120>
    6174:	d8c00517 	ldw	r3,20(sp)
    6178:	db000617 	ldw	r12,24(sp)
    617c:	d8c01315 	stw	r3,76(sp)
    6180:	d9000b17 	ldw	r4,44(sp)
    6184:	20038f26 	beq	r4,zero,6fc4 <_dtoa_r+0x1310>
    6188:	60bfffc4 	addi	r2,r12,-1
    618c:	100490fa 	slli	r2,r2,3
    6190:	00c00074 	movhi	r3,1
    6194:	18c8ee04 	addi	r3,r3,9144
    6198:	1885883a 	add	r2,r3,r2
    619c:	11800017 	ldw	r6,0(r2)
    61a0:	11c00117 	ldw	r7,4(r2)
    61a4:	d8800717 	ldw	r2,28(sp)
    61a8:	0009883a 	mov	r4,zero
    61ac:	014ff834 	movhi	r5,16352
    61b0:	db001615 	stw	r12,88(sp)
    61b4:	15c00044 	addi	r23,r2,1
    61b8:	000d6080 	call	d608 <__divdf3>
    61bc:	800d883a 	mov	r6,r16
    61c0:	880f883a 	mov	r7,r17
    61c4:	1009883a 	mov	r4,r2
    61c8:	180b883a 	mov	r5,r3
    61cc:	000e8600 	call	e860 <__subdf3>
    61d0:	d9401017 	ldw	r5,64(sp)
    61d4:	d9000f17 	ldw	r4,60(sp)
    61d8:	102b883a 	mov	r21,r2
    61dc:	d8c01215 	stw	r3,72(sp)
    61e0:	000f15c0 	call	f15c <__fixdfsi>
    61e4:	1009883a 	mov	r4,r2
    61e8:	1029883a 	mov	r20,r2
    61ec:	000f1dc0 	call	f1dc <__floatsidf>
    61f0:	d9000f17 	ldw	r4,60(sp)
    61f4:	d9401017 	ldw	r5,64(sp)
    61f8:	100d883a 	mov	r6,r2
    61fc:	180f883a 	mov	r7,r3
    6200:	000e8600 	call	e860 <__subdf3>
    6204:	1823883a 	mov	r17,r3
    6208:	d8c00717 	ldw	r3,28(sp)
    620c:	d9401217 	ldw	r5,72(sp)
    6210:	a2000c04 	addi	r8,r20,48
    6214:	1021883a 	mov	r16,r2
    6218:	1a000005 	stb	r8,0(r3)
    621c:	800d883a 	mov	r6,r16
    6220:	880f883a 	mov	r7,r17
    6224:	a809883a 	mov	r4,r21
    6228:	4029883a 	mov	r20,r8
    622c:	000df780 	call	df78 <__gedf2>
    6230:	00841d16 	blt	zero,r2,72a8 <_dtoa_r+0x15f4>
    6234:	800d883a 	mov	r6,r16
    6238:	880f883a 	mov	r7,r17
    623c:	0009883a 	mov	r4,zero
    6240:	014ffc34 	movhi	r5,16368
    6244:	000e8600 	call	e860 <__subdf3>
    6248:	d9401217 	ldw	r5,72(sp)
    624c:	100d883a 	mov	r6,r2
    6250:	180f883a 	mov	r7,r3
    6254:	a809883a 	mov	r4,r21
    6258:	000df780 	call	df78 <__gedf2>
    625c:	db001617 	ldw	r12,88(sp)
    6260:	00840e16 	blt	zero,r2,729c <_dtoa_r+0x15e8>
    6264:	00800044 	movi	r2,1
    6268:	13006b0e 	bge	r2,r12,6418 <_dtoa_r+0x764>
    626c:	d9000717 	ldw	r4,28(sp)
    6270:	dd800f15 	stw	r22,60(sp)
    6274:	dcc01015 	stw	r19,64(sp)
    6278:	2319883a 	add	r12,r4,r12
    627c:	dcc01217 	ldw	r19,72(sp)
    6280:	602d883a 	mov	r22,r12
    6284:	dc801215 	stw	r18,72(sp)
    6288:	b825883a 	mov	r18,r23
    628c:	00000906 	br	62b4 <_dtoa_r+0x600>
    6290:	000e8600 	call	e860 <__subdf3>
    6294:	a80d883a 	mov	r6,r21
    6298:	980f883a 	mov	r7,r19
    629c:	1009883a 	mov	r4,r2
    62a0:	180b883a 	mov	r5,r3
    62a4:	000e0540 	call	e054 <__ledf2>
    62a8:	1003e816 	blt	r2,zero,724c <_dtoa_r+0x1598>
    62ac:	b825883a 	mov	r18,r23
    62b0:	bd83e926 	beq	r23,r22,7258 <_dtoa_r+0x15a4>
    62b4:	a809883a 	mov	r4,r21
    62b8:	980b883a 	mov	r5,r19
    62bc:	000d883a 	mov	r6,zero
    62c0:	01d00934 	movhi	r7,16420
    62c4:	000e1480 	call	e148 <__muldf3>
    62c8:	000d883a 	mov	r6,zero
    62cc:	01d00934 	movhi	r7,16420
    62d0:	8009883a 	mov	r4,r16
    62d4:	880b883a 	mov	r5,r17
    62d8:	102b883a 	mov	r21,r2
    62dc:	1827883a 	mov	r19,r3
    62e0:	000e1480 	call	e148 <__muldf3>
    62e4:	180b883a 	mov	r5,r3
    62e8:	1009883a 	mov	r4,r2
    62ec:	1821883a 	mov	r16,r3
    62f0:	1023883a 	mov	r17,r2
    62f4:	000f15c0 	call	f15c <__fixdfsi>
    62f8:	1009883a 	mov	r4,r2
    62fc:	1029883a 	mov	r20,r2
    6300:	000f1dc0 	call	f1dc <__floatsidf>
    6304:	8809883a 	mov	r4,r17
    6308:	800b883a 	mov	r5,r16
    630c:	100d883a 	mov	r6,r2
    6310:	180f883a 	mov	r7,r3
    6314:	000e8600 	call	e860 <__subdf3>
    6318:	a5000c04 	addi	r20,r20,48
    631c:	a80d883a 	mov	r6,r21
    6320:	980f883a 	mov	r7,r19
    6324:	1009883a 	mov	r4,r2
    6328:	180b883a 	mov	r5,r3
    632c:	95000005 	stb	r20,0(r18)
    6330:	1021883a 	mov	r16,r2
    6334:	1823883a 	mov	r17,r3
    6338:	000e0540 	call	e054 <__ledf2>
    633c:	bdc00044 	addi	r23,r23,1
    6340:	800d883a 	mov	r6,r16
    6344:	880f883a 	mov	r7,r17
    6348:	0009883a 	mov	r4,zero
    634c:	014ffc34 	movhi	r5,16368
    6350:	103fcf0e 	bge	r2,zero,6290 <__alt_data_end+0xff006290>
    6354:	d8c01317 	ldw	r3,76(sp)
    6358:	d8c00515 	stw	r3,20(sp)
    635c:	d9400917 	ldw	r5,36(sp)
    6360:	e009883a 	mov	r4,fp
    6364:	0008bec0 	call	8bec <_Bfree>
    6368:	d9000517 	ldw	r4,20(sp)
    636c:	d9802317 	ldw	r6,140(sp)
    6370:	d9c02517 	ldw	r7,148(sp)
    6374:	b8000005 	stb	zero,0(r23)
    6378:	20800044 	addi	r2,r4,1
    637c:	30800015 	stw	r2,0(r6)
    6380:	3802aa26 	beq	r7,zero,6e2c <_dtoa_r+0x1178>
    6384:	3dc00015 	stw	r23,0(r7)
    6388:	d8800717 	ldw	r2,28(sp)
    638c:	003e7906 	br	5d74 <__alt_data_end+0xff005d74>
    6390:	00800434 	movhi	r2,16
    6394:	10bfffc4 	addi	r2,r2,-1
    6398:	88a2703a 	and	r17,r17,r2
    639c:	883e851e 	bne	r17,zero,5db4 <__alt_data_end+0xff005db4>
    63a0:	00800074 	movhi	r2,1
    63a4:	1088cf04 	addi	r2,r2,9020
    63a8:	003e8406 	br	5dbc <__alt_data_end+0xff005dbc>
    63ac:	10c00204 	addi	r3,r2,8
    63b0:	003e8706 	br	5dd0 <__alt_data_end+0xff005dd0>
    63b4:	01400434 	movhi	r5,16
    63b8:	297fffc4 	addi	r5,r5,-1
    63bc:	994a703a 	and	r5,r19,r5
    63c0:	9009883a 	mov	r4,r18
    63c4:	843f0044 	addi	r16,r16,-1023
    63c8:	294ffc34 	orhi	r5,r5,16368
    63cc:	dd800217 	ldw	r22,8(sp)
    63d0:	d8001115 	stw	zero,68(sp)
    63d4:	003ea506 	br	5e6c <__alt_data_end+0xff005e6c>
    63d8:	00800074 	movhi	r2,1
    63dc:	1088c604 	addi	r2,r2,8984
    63e0:	003e6406 	br	5d74 <__alt_data_end+0xff005d74>
    63e4:	e0001115 	stw	zero,68(fp)
    63e8:	000b883a 	mov	r5,zero
    63ec:	e009883a 	mov	r4,fp
    63f0:	0008b440 	call	8b44 <_Balloc>
    63f4:	01bfffc4 	movi	r6,-1
    63f8:	01c00044 	movi	r7,1
    63fc:	d8800715 	stw	r2,28(sp)
    6400:	d9800c15 	stw	r6,48(sp)
    6404:	e0801015 	stw	r2,64(fp)
    6408:	d8000315 	stw	zero,12(sp)
    640c:	d9c00b15 	stw	r7,44(sp)
    6410:	d9800615 	stw	r6,24(sp)
    6414:	d8002215 	stw	zero,136(sp)
    6418:	d8800117 	ldw	r2,4(sp)
    641c:	10008916 	blt	r2,zero,6644 <_dtoa_r+0x990>
    6420:	d9000517 	ldw	r4,20(sp)
    6424:	00c00384 	movi	r3,14
    6428:	19008616 	blt	r3,r4,6644 <_dtoa_r+0x990>
    642c:	200490fa 	slli	r2,r4,3
    6430:	00c00074 	movhi	r3,1
    6434:	d9802217 	ldw	r6,136(sp)
    6438:	18c8ee04 	addi	r3,r3,9144
    643c:	1885883a 	add	r2,r3,r2
    6440:	14000017 	ldw	r16,0(r2)
    6444:	14400117 	ldw	r17,4(r2)
    6448:	30016316 	blt	r6,zero,69d8 <_dtoa_r+0xd24>
    644c:	800d883a 	mov	r6,r16
    6450:	880f883a 	mov	r7,r17
    6454:	9009883a 	mov	r4,r18
    6458:	980b883a 	mov	r5,r19
    645c:	000d6080 	call	d608 <__divdf3>
    6460:	180b883a 	mov	r5,r3
    6464:	1009883a 	mov	r4,r2
    6468:	000f15c0 	call	f15c <__fixdfsi>
    646c:	1009883a 	mov	r4,r2
    6470:	102b883a 	mov	r21,r2
    6474:	000f1dc0 	call	f1dc <__floatsidf>
    6478:	800d883a 	mov	r6,r16
    647c:	880f883a 	mov	r7,r17
    6480:	1009883a 	mov	r4,r2
    6484:	180b883a 	mov	r5,r3
    6488:	000e1480 	call	e148 <__muldf3>
    648c:	100d883a 	mov	r6,r2
    6490:	180f883a 	mov	r7,r3
    6494:	9009883a 	mov	r4,r18
    6498:	980b883a 	mov	r5,r19
    649c:	000e8600 	call	e860 <__subdf3>
    64a0:	d9c00717 	ldw	r7,28(sp)
    64a4:	1009883a 	mov	r4,r2
    64a8:	a8800c04 	addi	r2,r21,48
    64ac:	38800005 	stb	r2,0(r7)
    64b0:	3dc00044 	addi	r23,r7,1
    64b4:	d9c00617 	ldw	r7,24(sp)
    64b8:	01800044 	movi	r6,1
    64bc:	180b883a 	mov	r5,r3
    64c0:	2005883a 	mov	r2,r4
    64c4:	39803826 	beq	r7,r6,65a8 <_dtoa_r+0x8f4>
    64c8:	000d883a 	mov	r6,zero
    64cc:	01d00934 	movhi	r7,16420
    64d0:	000e1480 	call	e148 <__muldf3>
    64d4:	000d883a 	mov	r6,zero
    64d8:	000f883a 	mov	r7,zero
    64dc:	1009883a 	mov	r4,r2
    64e0:	180b883a 	mov	r5,r3
    64e4:	1025883a 	mov	r18,r2
    64e8:	1827883a 	mov	r19,r3
    64ec:	000def00 	call	def0 <__eqdf2>
    64f0:	103f9a26 	beq	r2,zero,635c <__alt_data_end+0xff00635c>
    64f4:	d9c00617 	ldw	r7,24(sp)
    64f8:	d8c00717 	ldw	r3,28(sp)
    64fc:	b829883a 	mov	r20,r23
    6500:	38bfffc4 	addi	r2,r7,-1
    6504:	18ad883a 	add	r22,r3,r2
    6508:	00000a06 	br	6534 <_dtoa_r+0x880>
    650c:	000e1480 	call	e148 <__muldf3>
    6510:	000d883a 	mov	r6,zero
    6514:	000f883a 	mov	r7,zero
    6518:	1009883a 	mov	r4,r2
    651c:	180b883a 	mov	r5,r3
    6520:	1025883a 	mov	r18,r2
    6524:	1827883a 	mov	r19,r3
    6528:	b829883a 	mov	r20,r23
    652c:	000def00 	call	def0 <__eqdf2>
    6530:	103f8a26 	beq	r2,zero,635c <__alt_data_end+0xff00635c>
    6534:	800d883a 	mov	r6,r16
    6538:	880f883a 	mov	r7,r17
    653c:	9009883a 	mov	r4,r18
    6540:	980b883a 	mov	r5,r19
    6544:	000d6080 	call	d608 <__divdf3>
    6548:	180b883a 	mov	r5,r3
    654c:	1009883a 	mov	r4,r2
    6550:	000f15c0 	call	f15c <__fixdfsi>
    6554:	1009883a 	mov	r4,r2
    6558:	102b883a 	mov	r21,r2
    655c:	000f1dc0 	call	f1dc <__floatsidf>
    6560:	800d883a 	mov	r6,r16
    6564:	880f883a 	mov	r7,r17
    6568:	1009883a 	mov	r4,r2
    656c:	180b883a 	mov	r5,r3
    6570:	000e1480 	call	e148 <__muldf3>
    6574:	100d883a 	mov	r6,r2
    6578:	180f883a 	mov	r7,r3
    657c:	9009883a 	mov	r4,r18
    6580:	980b883a 	mov	r5,r19
    6584:	000e8600 	call	e860 <__subdf3>
    6588:	aa000c04 	addi	r8,r21,48
    658c:	a2000005 	stb	r8,0(r20)
    6590:	000d883a 	mov	r6,zero
    6594:	01d00934 	movhi	r7,16420
    6598:	1009883a 	mov	r4,r2
    659c:	180b883a 	mov	r5,r3
    65a0:	a5c00044 	addi	r23,r20,1
    65a4:	b53fd91e 	bne	r22,r20,650c <__alt_data_end+0xff00650c>
    65a8:	100d883a 	mov	r6,r2
    65ac:	180f883a 	mov	r7,r3
    65b0:	1009883a 	mov	r4,r2
    65b4:	180b883a 	mov	r5,r3
    65b8:	000cd5c0 	call	cd5c <__adddf3>
    65bc:	100d883a 	mov	r6,r2
    65c0:	180f883a 	mov	r7,r3
    65c4:	8009883a 	mov	r4,r16
    65c8:	880b883a 	mov	r5,r17
    65cc:	1027883a 	mov	r19,r2
    65d0:	1825883a 	mov	r18,r3
    65d4:	000e0540 	call	e054 <__ledf2>
    65d8:	10000816 	blt	r2,zero,65fc <_dtoa_r+0x948>
    65dc:	980d883a 	mov	r6,r19
    65e0:	900f883a 	mov	r7,r18
    65e4:	8009883a 	mov	r4,r16
    65e8:	880b883a 	mov	r5,r17
    65ec:	000def00 	call	def0 <__eqdf2>
    65f0:	103f5a1e 	bne	r2,zero,635c <__alt_data_end+0xff00635c>
    65f4:	ad40004c 	andi	r21,r21,1
    65f8:	a83f5826 	beq	r21,zero,635c <__alt_data_end+0xff00635c>
    65fc:	bd3fffc3 	ldbu	r20,-1(r23)
    6600:	b8bfffc4 	addi	r2,r23,-1
    6604:	1007883a 	mov	r3,r2
    6608:	01400e44 	movi	r5,57
    660c:	d9800717 	ldw	r6,28(sp)
    6610:	00000506 	br	6628 <_dtoa_r+0x974>
    6614:	18ffffc4 	addi	r3,r3,-1
    6618:	11824726 	beq	r2,r6,6f38 <_dtoa_r+0x1284>
    661c:	1d000003 	ldbu	r20,0(r3)
    6620:	102f883a 	mov	r23,r2
    6624:	10bfffc4 	addi	r2,r2,-1
    6628:	a1003fcc 	andi	r4,r20,255
    662c:	2100201c 	xori	r4,r4,128
    6630:	213fe004 	addi	r4,r4,-128
    6634:	217ff726 	beq	r4,r5,6614 <__alt_data_end+0xff006614>
    6638:	a2000044 	addi	r8,r20,1
    663c:	12000005 	stb	r8,0(r2)
    6640:	003f4606 	br	635c <__alt_data_end+0xff00635c>
    6644:	d9000b17 	ldw	r4,44(sp)
    6648:	2000c826 	beq	r4,zero,696c <_dtoa_r+0xcb8>
    664c:	d9800317 	ldw	r6,12(sp)
    6650:	00c00044 	movi	r3,1
    6654:	1980f90e 	bge	r3,r6,6a3c <_dtoa_r+0xd88>
    6658:	d8800617 	ldw	r2,24(sp)
    665c:	d8c00a17 	ldw	r3,40(sp)
    6660:	157fffc4 	addi	r21,r2,-1
    6664:	1d41f316 	blt	r3,r21,6e34 <_dtoa_r+0x1180>
    6668:	1d6bc83a 	sub	r21,r3,r21
    666c:	d9c00617 	ldw	r7,24(sp)
    6670:	3802aa16 	blt	r7,zero,711c <_dtoa_r+0x1468>
    6674:	dd000817 	ldw	r20,32(sp)
    6678:	d8800617 	ldw	r2,24(sp)
    667c:	d8c00817 	ldw	r3,32(sp)
    6680:	01400044 	movi	r5,1
    6684:	e009883a 	mov	r4,fp
    6688:	1887883a 	add	r3,r3,r2
    668c:	d8c00815 	stw	r3,32(sp)
    6690:	b0ad883a 	add	r22,r22,r2
    6694:	0008f500 	call	8f50 <__i2b>
    6698:	1023883a 	mov	r17,r2
    669c:	a0000826 	beq	r20,zero,66c0 <_dtoa_r+0xa0c>
    66a0:	0580070e 	bge	zero,r22,66c0 <_dtoa_r+0xa0c>
    66a4:	a005883a 	mov	r2,r20
    66a8:	b500b916 	blt	r22,r20,6990 <_dtoa_r+0xcdc>
    66ac:	d9000817 	ldw	r4,32(sp)
    66b0:	a0a9c83a 	sub	r20,r20,r2
    66b4:	b0adc83a 	sub	r22,r22,r2
    66b8:	2089c83a 	sub	r4,r4,r2
    66bc:	d9000815 	stw	r4,32(sp)
    66c0:	d9800a17 	ldw	r6,40(sp)
    66c4:	0181810e 	bge	zero,r6,6ccc <_dtoa_r+0x1018>
    66c8:	d9c00b17 	ldw	r7,44(sp)
    66cc:	3800b326 	beq	r7,zero,699c <_dtoa_r+0xce8>
    66d0:	a800b226 	beq	r21,zero,699c <_dtoa_r+0xce8>
    66d4:	880b883a 	mov	r5,r17
    66d8:	a80d883a 	mov	r6,r21
    66dc:	e009883a 	mov	r4,fp
    66e0:	00091840 	call	9184 <__pow5mult>
    66e4:	d9800917 	ldw	r6,36(sp)
    66e8:	100b883a 	mov	r5,r2
    66ec:	e009883a 	mov	r4,fp
    66f0:	1023883a 	mov	r17,r2
    66f4:	0008f8c0 	call	8f8c <__multiply>
    66f8:	1021883a 	mov	r16,r2
    66fc:	d8800a17 	ldw	r2,40(sp)
    6700:	d9400917 	ldw	r5,36(sp)
    6704:	e009883a 	mov	r4,fp
    6708:	1545c83a 	sub	r2,r2,r21
    670c:	d8800a15 	stw	r2,40(sp)
    6710:	0008bec0 	call	8bec <_Bfree>
    6714:	d8c00a17 	ldw	r3,40(sp)
    6718:	18009f1e 	bne	r3,zero,6998 <_dtoa_r+0xce4>
    671c:	05c00044 	movi	r23,1
    6720:	e009883a 	mov	r4,fp
    6724:	b80b883a 	mov	r5,r23
    6728:	0008f500 	call	8f50 <__i2b>
    672c:	d9000d17 	ldw	r4,52(sp)
    6730:	102b883a 	mov	r21,r2
    6734:	2000ce26 	beq	r4,zero,6a70 <_dtoa_r+0xdbc>
    6738:	200d883a 	mov	r6,r4
    673c:	100b883a 	mov	r5,r2
    6740:	e009883a 	mov	r4,fp
    6744:	00091840 	call	9184 <__pow5mult>
    6748:	d9800317 	ldw	r6,12(sp)
    674c:	102b883a 	mov	r21,r2
    6750:	b981810e 	bge	r23,r6,6d58 <_dtoa_r+0x10a4>
    6754:	0027883a 	mov	r19,zero
    6758:	a8800417 	ldw	r2,16(r21)
    675c:	05c00804 	movi	r23,32
    6760:	10800104 	addi	r2,r2,4
    6764:	1085883a 	add	r2,r2,r2
    6768:	1085883a 	add	r2,r2,r2
    676c:	a885883a 	add	r2,r21,r2
    6770:	11000017 	ldw	r4,0(r2)
    6774:	0008e380 	call	8e38 <__hi0bits>
    6778:	b885c83a 	sub	r2,r23,r2
    677c:	1585883a 	add	r2,r2,r22
    6780:	108007cc 	andi	r2,r2,31
    6784:	1000b326 	beq	r2,zero,6a54 <_dtoa_r+0xda0>
    6788:	00c00804 	movi	r3,32
    678c:	1887c83a 	sub	r3,r3,r2
    6790:	01000104 	movi	r4,4
    6794:	20c2cd0e 	bge	r4,r3,72cc <_dtoa_r+0x1618>
    6798:	00c00704 	movi	r3,28
    679c:	1885c83a 	sub	r2,r3,r2
    67a0:	d8c00817 	ldw	r3,32(sp)
    67a4:	a0a9883a 	add	r20,r20,r2
    67a8:	b0ad883a 	add	r22,r22,r2
    67ac:	1887883a 	add	r3,r3,r2
    67b0:	d8c00815 	stw	r3,32(sp)
    67b4:	d9800817 	ldw	r6,32(sp)
    67b8:	0180040e 	bge	zero,r6,67cc <_dtoa_r+0xb18>
    67bc:	800b883a 	mov	r5,r16
    67c0:	e009883a 	mov	r4,fp
    67c4:	00092c40 	call	92c4 <__lshift>
    67c8:	1021883a 	mov	r16,r2
    67cc:	0580050e 	bge	zero,r22,67e4 <_dtoa_r+0xb30>
    67d0:	a80b883a 	mov	r5,r21
    67d4:	b00d883a 	mov	r6,r22
    67d8:	e009883a 	mov	r4,fp
    67dc:	00092c40 	call	92c4 <__lshift>
    67e0:	102b883a 	mov	r21,r2
    67e4:	d9c00e17 	ldw	r7,56(sp)
    67e8:	3801211e 	bne	r7,zero,6c70 <_dtoa_r+0xfbc>
    67ec:	d9800617 	ldw	r6,24(sp)
    67f0:	0181380e 	bge	zero,r6,6cd4 <_dtoa_r+0x1020>
    67f4:	d8c00b17 	ldw	r3,44(sp)
    67f8:	1800ab1e 	bne	r3,zero,6aa8 <_dtoa_r+0xdf4>
    67fc:	dc800717 	ldw	r18,28(sp)
    6800:	dcc00617 	ldw	r19,24(sp)
    6804:	9029883a 	mov	r20,r18
    6808:	00000206 	br	6814 <_dtoa_r+0xb60>
    680c:	0008c140 	call	8c14 <__multadd>
    6810:	1021883a 	mov	r16,r2
    6814:	a80b883a 	mov	r5,r21
    6818:	8009883a 	mov	r4,r16
    681c:	0005ab40 	call	5ab4 <quorem>
    6820:	10800c04 	addi	r2,r2,48
    6824:	90800005 	stb	r2,0(r18)
    6828:	94800044 	addi	r18,r18,1
    682c:	9507c83a 	sub	r3,r18,r20
    6830:	000f883a 	mov	r7,zero
    6834:	01800284 	movi	r6,10
    6838:	800b883a 	mov	r5,r16
    683c:	e009883a 	mov	r4,fp
    6840:	1cfff216 	blt	r3,r19,680c <__alt_data_end+0xff00680c>
    6844:	1011883a 	mov	r8,r2
    6848:	d8800617 	ldw	r2,24(sp)
    684c:	0082370e 	bge	zero,r2,712c <_dtoa_r+0x1478>
    6850:	d9000717 	ldw	r4,28(sp)
    6854:	0025883a 	mov	r18,zero
    6858:	20af883a 	add	r23,r4,r2
    685c:	01800044 	movi	r6,1
    6860:	800b883a 	mov	r5,r16
    6864:	e009883a 	mov	r4,fp
    6868:	da001715 	stw	r8,92(sp)
    686c:	00092c40 	call	92c4 <__lshift>
    6870:	a80b883a 	mov	r5,r21
    6874:	1009883a 	mov	r4,r2
    6878:	d8800915 	stw	r2,36(sp)
    687c:	000940c0 	call	940c <__mcmp>
    6880:	da001717 	ldw	r8,92(sp)
    6884:	0081800e 	bge	zero,r2,6e88 <_dtoa_r+0x11d4>
    6888:	b93fffc3 	ldbu	r4,-1(r23)
    688c:	b8bfffc4 	addi	r2,r23,-1
    6890:	1007883a 	mov	r3,r2
    6894:	01800e44 	movi	r6,57
    6898:	d9c00717 	ldw	r7,28(sp)
    689c:	00000506 	br	68b4 <_dtoa_r+0xc00>
    68a0:	18ffffc4 	addi	r3,r3,-1
    68a4:	11c12326 	beq	r2,r7,6d34 <_dtoa_r+0x1080>
    68a8:	19000003 	ldbu	r4,0(r3)
    68ac:	102f883a 	mov	r23,r2
    68b0:	10bfffc4 	addi	r2,r2,-1
    68b4:	21403fcc 	andi	r5,r4,255
    68b8:	2940201c 	xori	r5,r5,128
    68bc:	297fe004 	addi	r5,r5,-128
    68c0:	29bff726 	beq	r5,r6,68a0 <__alt_data_end+0xff0068a0>
    68c4:	21000044 	addi	r4,r4,1
    68c8:	11000005 	stb	r4,0(r2)
    68cc:	a80b883a 	mov	r5,r21
    68d0:	e009883a 	mov	r4,fp
    68d4:	0008bec0 	call	8bec <_Bfree>
    68d8:	883ea026 	beq	r17,zero,635c <__alt_data_end+0xff00635c>
    68dc:	90000426 	beq	r18,zero,68f0 <_dtoa_r+0xc3c>
    68e0:	94400326 	beq	r18,r17,68f0 <_dtoa_r+0xc3c>
    68e4:	900b883a 	mov	r5,r18
    68e8:	e009883a 	mov	r4,fp
    68ec:	0008bec0 	call	8bec <_Bfree>
    68f0:	880b883a 	mov	r5,r17
    68f4:	e009883a 	mov	r4,fp
    68f8:	0008bec0 	call	8bec <_Bfree>
    68fc:	003e9706 	br	635c <__alt_data_end+0xff00635c>
    6900:	01800044 	movi	r6,1
    6904:	d9800e15 	stw	r6,56(sp)
    6908:	003d9606 	br	5f64 <__alt_data_end+0xff005f64>
    690c:	d8800817 	ldw	r2,32(sp)
    6910:	d8c00517 	ldw	r3,20(sp)
    6914:	d8000d15 	stw	zero,52(sp)
    6918:	10c5c83a 	sub	r2,r2,r3
    691c:	00c9c83a 	sub	r4,zero,r3
    6920:	d8800815 	stw	r2,32(sp)
    6924:	d9000a15 	stw	r4,40(sp)
    6928:	003d9706 	br	5f88 <__alt_data_end+0xff005f88>
    692c:	05adc83a 	sub	r22,zero,r22
    6930:	dd800815 	stw	r22,32(sp)
    6934:	002d883a 	mov	r22,zero
    6938:	003d8e06 	br	5f74 <__alt_data_end+0xff005f74>
    693c:	d9000517 	ldw	r4,20(sp)
    6940:	000f1dc0 	call	f1dc <__floatsidf>
    6944:	100d883a 	mov	r6,r2
    6948:	180f883a 	mov	r7,r3
    694c:	a009883a 	mov	r4,r20
    6950:	880b883a 	mov	r5,r17
    6954:	000def00 	call	def0 <__eqdf2>
    6958:	103d7126 	beq	r2,zero,5f20 <__alt_data_end+0xff005f20>
    695c:	d9c00517 	ldw	r7,20(sp)
    6960:	39ffffc4 	addi	r7,r7,-1
    6964:	d9c00515 	stw	r7,20(sp)
    6968:	003d6d06 	br	5f20 <__alt_data_end+0xff005f20>
    696c:	dd400a17 	ldw	r21,40(sp)
    6970:	dd000817 	ldw	r20,32(sp)
    6974:	0023883a 	mov	r17,zero
    6978:	003f4806 	br	669c <__alt_data_end+0xff00669c>
    697c:	10e3c83a 	sub	r17,r2,r3
    6980:	9448983a 	sll	r4,r18,r17
    6984:	003d3206 	br	5e50 <__alt_data_end+0xff005e50>
    6988:	d8000e15 	stw	zero,56(sp)
    698c:	003d7506 	br	5f64 <__alt_data_end+0xff005f64>
    6990:	b005883a 	mov	r2,r22
    6994:	003f4506 	br	66ac <__alt_data_end+0xff0066ac>
    6998:	dc000915 	stw	r16,36(sp)
    699c:	d9800a17 	ldw	r6,40(sp)
    69a0:	d9400917 	ldw	r5,36(sp)
    69a4:	e009883a 	mov	r4,fp
    69a8:	00091840 	call	9184 <__pow5mult>
    69ac:	1021883a 	mov	r16,r2
    69b0:	003f5a06 	br	671c <__alt_data_end+0xff00671c>
    69b4:	01c00044 	movi	r7,1
    69b8:	d9c00b15 	stw	r7,44(sp)
    69bc:	d8802217 	ldw	r2,136(sp)
    69c0:	0081280e 	bge	zero,r2,6e64 <_dtoa_r+0x11b0>
    69c4:	100d883a 	mov	r6,r2
    69c8:	1021883a 	mov	r16,r2
    69cc:	d8800c15 	stw	r2,48(sp)
    69d0:	d8800615 	stw	r2,24(sp)
    69d4:	003d8806 	br	5ff8 <__alt_data_end+0xff005ff8>
    69d8:	d8800617 	ldw	r2,24(sp)
    69dc:	00be9b16 	blt	zero,r2,644c <__alt_data_end+0xff00644c>
    69e0:	10010f1e 	bne	r2,zero,6e20 <_dtoa_r+0x116c>
    69e4:	880b883a 	mov	r5,r17
    69e8:	000d883a 	mov	r6,zero
    69ec:	01d00534 	movhi	r7,16404
    69f0:	8009883a 	mov	r4,r16
    69f4:	000e1480 	call	e148 <__muldf3>
    69f8:	900d883a 	mov	r6,r18
    69fc:	980f883a 	mov	r7,r19
    6a00:	1009883a 	mov	r4,r2
    6a04:	180b883a 	mov	r5,r3
    6a08:	000df780 	call	df78 <__gedf2>
    6a0c:	002b883a 	mov	r21,zero
    6a10:	0023883a 	mov	r17,zero
    6a14:	1000bf16 	blt	r2,zero,6d14 <_dtoa_r+0x1060>
    6a18:	d9802217 	ldw	r6,136(sp)
    6a1c:	ddc00717 	ldw	r23,28(sp)
    6a20:	018c303a 	nor	r6,zero,r6
    6a24:	d9800515 	stw	r6,20(sp)
    6a28:	a80b883a 	mov	r5,r21
    6a2c:	e009883a 	mov	r4,fp
    6a30:	0008bec0 	call	8bec <_Bfree>
    6a34:	883e4926 	beq	r17,zero,635c <__alt_data_end+0xff00635c>
    6a38:	003fad06 	br	68f0 <__alt_data_end+0xff0068f0>
    6a3c:	d9c01117 	ldw	r7,68(sp)
    6a40:	3801bc26 	beq	r7,zero,7134 <_dtoa_r+0x1480>
    6a44:	10810cc4 	addi	r2,r2,1075
    6a48:	dd400a17 	ldw	r21,40(sp)
    6a4c:	dd000817 	ldw	r20,32(sp)
    6a50:	003f0a06 	br	667c <__alt_data_end+0xff00667c>
    6a54:	00800704 	movi	r2,28
    6a58:	d9000817 	ldw	r4,32(sp)
    6a5c:	a0a9883a 	add	r20,r20,r2
    6a60:	b0ad883a 	add	r22,r22,r2
    6a64:	2089883a 	add	r4,r4,r2
    6a68:	d9000815 	stw	r4,32(sp)
    6a6c:	003f5106 	br	67b4 <__alt_data_end+0xff0067b4>
    6a70:	d8c00317 	ldw	r3,12(sp)
    6a74:	b8c1fc0e 	bge	r23,r3,7268 <_dtoa_r+0x15b4>
    6a78:	0027883a 	mov	r19,zero
    6a7c:	b805883a 	mov	r2,r23
    6a80:	003f3e06 	br	677c <__alt_data_end+0xff00677c>
    6a84:	880b883a 	mov	r5,r17
    6a88:	e009883a 	mov	r4,fp
    6a8c:	000f883a 	mov	r7,zero
    6a90:	01800284 	movi	r6,10
    6a94:	0008c140 	call	8c14 <__multadd>
    6a98:	d9000c17 	ldw	r4,48(sp)
    6a9c:	1023883a 	mov	r17,r2
    6aa0:	0102040e 	bge	zero,r4,72b4 <_dtoa_r+0x1600>
    6aa4:	d9000615 	stw	r4,24(sp)
    6aa8:	0500050e 	bge	zero,r20,6ac0 <_dtoa_r+0xe0c>
    6aac:	880b883a 	mov	r5,r17
    6ab0:	a00d883a 	mov	r6,r20
    6ab4:	e009883a 	mov	r4,fp
    6ab8:	00092c40 	call	92c4 <__lshift>
    6abc:	1023883a 	mov	r17,r2
    6ac0:	9801241e 	bne	r19,zero,6f54 <_dtoa_r+0x12a0>
    6ac4:	8829883a 	mov	r20,r17
    6ac8:	d9000617 	ldw	r4,24(sp)
    6acc:	dcc00717 	ldw	r19,28(sp)
    6ad0:	9480004c 	andi	r18,r18,1
    6ad4:	20bfffc4 	addi	r2,r4,-1
    6ad8:	9885883a 	add	r2,r19,r2
    6adc:	d8800415 	stw	r2,16(sp)
    6ae0:	dc800615 	stw	r18,24(sp)
    6ae4:	a80b883a 	mov	r5,r21
    6ae8:	8009883a 	mov	r4,r16
    6aec:	0005ab40 	call	5ab4 <quorem>
    6af0:	880b883a 	mov	r5,r17
    6af4:	8009883a 	mov	r4,r16
    6af8:	102f883a 	mov	r23,r2
    6afc:	000940c0 	call	940c <__mcmp>
    6b00:	a80b883a 	mov	r5,r21
    6b04:	a00d883a 	mov	r6,r20
    6b08:	e009883a 	mov	r4,fp
    6b0c:	102d883a 	mov	r22,r2
    6b10:	000946c0 	call	946c <__mdiff>
    6b14:	1007883a 	mov	r3,r2
    6b18:	10800317 	ldw	r2,12(r2)
    6b1c:	bc800c04 	addi	r18,r23,48
    6b20:	180b883a 	mov	r5,r3
    6b24:	10004e1e 	bne	r2,zero,6c60 <_dtoa_r+0xfac>
    6b28:	8009883a 	mov	r4,r16
    6b2c:	d8c01615 	stw	r3,88(sp)
    6b30:	000940c0 	call	940c <__mcmp>
    6b34:	d8c01617 	ldw	r3,88(sp)
    6b38:	e009883a 	mov	r4,fp
    6b3c:	d8801615 	stw	r2,88(sp)
    6b40:	180b883a 	mov	r5,r3
    6b44:	0008bec0 	call	8bec <_Bfree>
    6b48:	d8801617 	ldw	r2,88(sp)
    6b4c:	1000041e 	bne	r2,zero,6b60 <_dtoa_r+0xeac>
    6b50:	d9800317 	ldw	r6,12(sp)
    6b54:	3000021e 	bne	r6,zero,6b60 <_dtoa_r+0xeac>
    6b58:	d8c00617 	ldw	r3,24(sp)
    6b5c:	18003726 	beq	r3,zero,6c3c <_dtoa_r+0xf88>
    6b60:	b0002016 	blt	r22,zero,6be4 <_dtoa_r+0xf30>
    6b64:	b000041e 	bne	r22,zero,6b78 <_dtoa_r+0xec4>
    6b68:	d9000317 	ldw	r4,12(sp)
    6b6c:	2000021e 	bne	r4,zero,6b78 <_dtoa_r+0xec4>
    6b70:	d8c00617 	ldw	r3,24(sp)
    6b74:	18001b26 	beq	r3,zero,6be4 <_dtoa_r+0xf30>
    6b78:	00810716 	blt	zero,r2,6f98 <_dtoa_r+0x12e4>
    6b7c:	d8c00417 	ldw	r3,16(sp)
    6b80:	9d800044 	addi	r22,r19,1
    6b84:	9c800005 	stb	r18,0(r19)
    6b88:	b02f883a 	mov	r23,r22
    6b8c:	98c10626 	beq	r19,r3,6fa8 <_dtoa_r+0x12f4>
    6b90:	800b883a 	mov	r5,r16
    6b94:	000f883a 	mov	r7,zero
    6b98:	01800284 	movi	r6,10
    6b9c:	e009883a 	mov	r4,fp
    6ba0:	0008c140 	call	8c14 <__multadd>
    6ba4:	1021883a 	mov	r16,r2
    6ba8:	000f883a 	mov	r7,zero
    6bac:	01800284 	movi	r6,10
    6bb0:	880b883a 	mov	r5,r17
    6bb4:	e009883a 	mov	r4,fp
    6bb8:	8d002526 	beq	r17,r20,6c50 <_dtoa_r+0xf9c>
    6bbc:	0008c140 	call	8c14 <__multadd>
    6bc0:	a00b883a 	mov	r5,r20
    6bc4:	000f883a 	mov	r7,zero
    6bc8:	01800284 	movi	r6,10
    6bcc:	e009883a 	mov	r4,fp
    6bd0:	1023883a 	mov	r17,r2
    6bd4:	0008c140 	call	8c14 <__multadd>
    6bd8:	1029883a 	mov	r20,r2
    6bdc:	b027883a 	mov	r19,r22
    6be0:	003fc006 	br	6ae4 <__alt_data_end+0xff006ae4>
    6be4:	9011883a 	mov	r8,r18
    6be8:	00800e0e 	bge	zero,r2,6c24 <_dtoa_r+0xf70>
    6bec:	800b883a 	mov	r5,r16
    6bf0:	01800044 	movi	r6,1
    6bf4:	e009883a 	mov	r4,fp
    6bf8:	da001715 	stw	r8,92(sp)
    6bfc:	00092c40 	call	92c4 <__lshift>
    6c00:	a80b883a 	mov	r5,r21
    6c04:	1009883a 	mov	r4,r2
    6c08:	1021883a 	mov	r16,r2
    6c0c:	000940c0 	call	940c <__mcmp>
    6c10:	da001717 	ldw	r8,92(sp)
    6c14:	0081960e 	bge	zero,r2,7270 <_dtoa_r+0x15bc>
    6c18:	00800e44 	movi	r2,57
    6c1c:	40817026 	beq	r8,r2,71e0 <_dtoa_r+0x152c>
    6c20:	ba000c44 	addi	r8,r23,49
    6c24:	8825883a 	mov	r18,r17
    6c28:	9dc00044 	addi	r23,r19,1
    6c2c:	9a000005 	stb	r8,0(r19)
    6c30:	a023883a 	mov	r17,r20
    6c34:	dc000915 	stw	r16,36(sp)
    6c38:	003f2406 	br	68cc <__alt_data_end+0xff0068cc>
    6c3c:	00800e44 	movi	r2,57
    6c40:	9011883a 	mov	r8,r18
    6c44:	90816626 	beq	r18,r2,71e0 <_dtoa_r+0x152c>
    6c48:	05bff516 	blt	zero,r22,6c20 <__alt_data_end+0xff006c20>
    6c4c:	003ff506 	br	6c24 <__alt_data_end+0xff006c24>
    6c50:	0008c140 	call	8c14 <__multadd>
    6c54:	1023883a 	mov	r17,r2
    6c58:	1029883a 	mov	r20,r2
    6c5c:	003fdf06 	br	6bdc <__alt_data_end+0xff006bdc>
    6c60:	e009883a 	mov	r4,fp
    6c64:	0008bec0 	call	8bec <_Bfree>
    6c68:	00800044 	movi	r2,1
    6c6c:	003fbc06 	br	6b60 <__alt_data_end+0xff006b60>
    6c70:	a80b883a 	mov	r5,r21
    6c74:	8009883a 	mov	r4,r16
    6c78:	000940c0 	call	940c <__mcmp>
    6c7c:	103edb0e 	bge	r2,zero,67ec <__alt_data_end+0xff0067ec>
    6c80:	800b883a 	mov	r5,r16
    6c84:	000f883a 	mov	r7,zero
    6c88:	01800284 	movi	r6,10
    6c8c:	e009883a 	mov	r4,fp
    6c90:	0008c140 	call	8c14 <__multadd>
    6c94:	1021883a 	mov	r16,r2
    6c98:	d8800517 	ldw	r2,20(sp)
    6c9c:	d8c00b17 	ldw	r3,44(sp)
    6ca0:	10bfffc4 	addi	r2,r2,-1
    6ca4:	d8800515 	stw	r2,20(sp)
    6ca8:	183f761e 	bne	r3,zero,6a84 <__alt_data_end+0xff006a84>
    6cac:	d9000c17 	ldw	r4,48(sp)
    6cb0:	0101730e 	bge	zero,r4,7280 <_dtoa_r+0x15cc>
    6cb4:	d9000615 	stw	r4,24(sp)
    6cb8:	003ed006 	br	67fc <__alt_data_end+0xff0067fc>
    6cbc:	00800084 	movi	r2,2
    6cc0:	3081861e 	bne	r6,r2,72dc <_dtoa_r+0x1628>
    6cc4:	d8000b15 	stw	zero,44(sp)
    6cc8:	003f3c06 	br	69bc <__alt_data_end+0xff0069bc>
    6ccc:	dc000917 	ldw	r16,36(sp)
    6cd0:	003e9206 	br	671c <__alt_data_end+0xff00671c>
    6cd4:	d9c00317 	ldw	r7,12(sp)
    6cd8:	00800084 	movi	r2,2
    6cdc:	11fec50e 	bge	r2,r7,67f4 <__alt_data_end+0xff0067f4>
    6ce0:	d9000617 	ldw	r4,24(sp)
    6ce4:	20013c1e 	bne	r4,zero,71d8 <_dtoa_r+0x1524>
    6ce8:	a80b883a 	mov	r5,r21
    6cec:	000f883a 	mov	r7,zero
    6cf0:	01800144 	movi	r6,5
    6cf4:	e009883a 	mov	r4,fp
    6cf8:	0008c140 	call	8c14 <__multadd>
    6cfc:	100b883a 	mov	r5,r2
    6d00:	8009883a 	mov	r4,r16
    6d04:	102b883a 	mov	r21,r2
    6d08:	000940c0 	call	940c <__mcmp>
    6d0c:	dc000915 	stw	r16,36(sp)
    6d10:	00bf410e 	bge	zero,r2,6a18 <__alt_data_end+0xff006a18>
    6d14:	d9c00717 	ldw	r7,28(sp)
    6d18:	00800c44 	movi	r2,49
    6d1c:	38800005 	stb	r2,0(r7)
    6d20:	d8800517 	ldw	r2,20(sp)
    6d24:	3dc00044 	addi	r23,r7,1
    6d28:	10800044 	addi	r2,r2,1
    6d2c:	d8800515 	stw	r2,20(sp)
    6d30:	003f3d06 	br	6a28 <__alt_data_end+0xff006a28>
    6d34:	d9800517 	ldw	r6,20(sp)
    6d38:	d9c00717 	ldw	r7,28(sp)
    6d3c:	00800c44 	movi	r2,49
    6d40:	31800044 	addi	r6,r6,1
    6d44:	d9800515 	stw	r6,20(sp)
    6d48:	38800005 	stb	r2,0(r7)
    6d4c:	003edf06 	br	68cc <__alt_data_end+0xff0068cc>
    6d50:	d8000b15 	stw	zero,44(sp)
    6d54:	003c9f06 	br	5fd4 <__alt_data_end+0xff005fd4>
    6d58:	903e7e1e 	bne	r18,zero,6754 <__alt_data_end+0xff006754>
    6d5c:	00800434 	movhi	r2,16
    6d60:	10bfffc4 	addi	r2,r2,-1
    6d64:	9884703a 	and	r2,r19,r2
    6d68:	1000ea1e 	bne	r2,zero,7114 <_dtoa_r+0x1460>
    6d6c:	9cdffc2c 	andhi	r19,r19,32752
    6d70:	9800e826 	beq	r19,zero,7114 <_dtoa_r+0x1460>
    6d74:	d9c00817 	ldw	r7,32(sp)
    6d78:	b5800044 	addi	r22,r22,1
    6d7c:	04c00044 	movi	r19,1
    6d80:	39c00044 	addi	r7,r7,1
    6d84:	d9c00815 	stw	r7,32(sp)
    6d88:	d8800d17 	ldw	r2,52(sp)
    6d8c:	103e721e 	bne	r2,zero,6758 <__alt_data_end+0xff006758>
    6d90:	00800044 	movi	r2,1
    6d94:	003e7906 	br	677c <__alt_data_end+0xff00677c>
    6d98:	8009883a 	mov	r4,r16
    6d9c:	000f1dc0 	call	f1dc <__floatsidf>
    6da0:	d9800f17 	ldw	r6,60(sp)
    6da4:	d9c01017 	ldw	r7,64(sp)
    6da8:	1009883a 	mov	r4,r2
    6dac:	180b883a 	mov	r5,r3
    6db0:	000e1480 	call	e148 <__muldf3>
    6db4:	000d883a 	mov	r6,zero
    6db8:	01d00734 	movhi	r7,16412
    6dbc:	1009883a 	mov	r4,r2
    6dc0:	180b883a 	mov	r5,r3
    6dc4:	000cd5c0 	call	cd5c <__adddf3>
    6dc8:	047f3034 	movhi	r17,64704
    6dcc:	1021883a 	mov	r16,r2
    6dd0:	1c63883a 	add	r17,r3,r17
    6dd4:	d9000f17 	ldw	r4,60(sp)
    6dd8:	d9401017 	ldw	r5,64(sp)
    6ddc:	000d883a 	mov	r6,zero
    6de0:	01d00534 	movhi	r7,16404
    6de4:	000e8600 	call	e860 <__subdf3>
    6de8:	800d883a 	mov	r6,r16
    6dec:	880f883a 	mov	r7,r17
    6df0:	1009883a 	mov	r4,r2
    6df4:	180b883a 	mov	r5,r3
    6df8:	102b883a 	mov	r21,r2
    6dfc:	1829883a 	mov	r20,r3
    6e00:	000df780 	call	df78 <__gedf2>
    6e04:	00806c16 	blt	zero,r2,6fb8 <_dtoa_r+0x1304>
    6e08:	89e0003c 	xorhi	r7,r17,32768
    6e0c:	800d883a 	mov	r6,r16
    6e10:	a809883a 	mov	r4,r21
    6e14:	a00b883a 	mov	r5,r20
    6e18:	000e0540 	call	e054 <__ledf2>
    6e1c:	103d7e0e 	bge	r2,zero,6418 <__alt_data_end+0xff006418>
    6e20:	002b883a 	mov	r21,zero
    6e24:	0023883a 	mov	r17,zero
    6e28:	003efb06 	br	6a18 <__alt_data_end+0xff006a18>
    6e2c:	d8800717 	ldw	r2,28(sp)
    6e30:	003bd006 	br	5d74 <__alt_data_end+0xff005d74>
    6e34:	d9000a17 	ldw	r4,40(sp)
    6e38:	d9800d17 	ldw	r6,52(sp)
    6e3c:	dd400a15 	stw	r21,40(sp)
    6e40:	a905c83a 	sub	r2,r21,r4
    6e44:	308d883a 	add	r6,r6,r2
    6e48:	d9800d15 	stw	r6,52(sp)
    6e4c:	002b883a 	mov	r21,zero
    6e50:	003e0606 	br	666c <__alt_data_end+0xff00666c>
    6e54:	9023883a 	mov	r17,r18
    6e58:	9829883a 	mov	r20,r19
    6e5c:	04000084 	movi	r16,2
    6e60:	003c9206 	br	60ac <__alt_data_end+0xff0060ac>
    6e64:	04000044 	movi	r16,1
    6e68:	dc000c15 	stw	r16,48(sp)
    6e6c:	dc000615 	stw	r16,24(sp)
    6e70:	dc002215 	stw	r16,136(sp)
    6e74:	e0001115 	stw	zero,68(fp)
    6e78:	000b883a 	mov	r5,zero
    6e7c:	003c6906 	br	6024 <__alt_data_end+0xff006024>
    6e80:	3021883a 	mov	r16,r6
    6e84:	003ffb06 	br	6e74 <__alt_data_end+0xff006e74>
    6e88:	1000021e 	bne	r2,zero,6e94 <_dtoa_r+0x11e0>
    6e8c:	4200004c 	andi	r8,r8,1
    6e90:	403e7d1e 	bne	r8,zero,6888 <__alt_data_end+0xff006888>
    6e94:	01000c04 	movi	r4,48
    6e98:	00000106 	br	6ea0 <_dtoa_r+0x11ec>
    6e9c:	102f883a 	mov	r23,r2
    6ea0:	b8bfffc4 	addi	r2,r23,-1
    6ea4:	10c00007 	ldb	r3,0(r2)
    6ea8:	193ffc26 	beq	r3,r4,6e9c <__alt_data_end+0xff006e9c>
    6eac:	003e8706 	br	68cc <__alt_data_end+0xff0068cc>
    6eb0:	d8800517 	ldw	r2,20(sp)
    6eb4:	00a3c83a 	sub	r17,zero,r2
    6eb8:	8800a426 	beq	r17,zero,714c <_dtoa_r+0x1498>
    6ebc:	888003cc 	andi	r2,r17,15
    6ec0:	100490fa 	slli	r2,r2,3
    6ec4:	00c00074 	movhi	r3,1
    6ec8:	18c8ee04 	addi	r3,r3,9144
    6ecc:	1885883a 	add	r2,r3,r2
    6ed0:	11800017 	ldw	r6,0(r2)
    6ed4:	11c00117 	ldw	r7,4(r2)
    6ed8:	9009883a 	mov	r4,r18
    6edc:	980b883a 	mov	r5,r19
    6ee0:	8823d13a 	srai	r17,r17,4
    6ee4:	000e1480 	call	e148 <__muldf3>
    6ee8:	d8800f15 	stw	r2,60(sp)
    6eec:	d8c01015 	stw	r3,64(sp)
    6ef0:	8800e826 	beq	r17,zero,7294 <_dtoa_r+0x15e0>
    6ef4:	05000074 	movhi	r20,1
    6ef8:	a508e404 	addi	r20,r20,9104
    6efc:	04000084 	movi	r16,2
    6f00:	8980004c 	andi	r6,r17,1
    6f04:	1009883a 	mov	r4,r2
    6f08:	8823d07a 	srai	r17,r17,1
    6f0c:	180b883a 	mov	r5,r3
    6f10:	30000426 	beq	r6,zero,6f24 <_dtoa_r+0x1270>
    6f14:	a1800017 	ldw	r6,0(r20)
    6f18:	a1c00117 	ldw	r7,4(r20)
    6f1c:	84000044 	addi	r16,r16,1
    6f20:	000e1480 	call	e148 <__muldf3>
    6f24:	a5000204 	addi	r20,r20,8
    6f28:	883ff51e 	bne	r17,zero,6f00 <__alt_data_end+0xff006f00>
    6f2c:	d8800f15 	stw	r2,60(sp)
    6f30:	d8c01015 	stw	r3,64(sp)
    6f34:	003c7606 	br	6110 <__alt_data_end+0xff006110>
    6f38:	00c00c04 	movi	r3,48
    6f3c:	10c00005 	stb	r3,0(r2)
    6f40:	d8c00517 	ldw	r3,20(sp)
    6f44:	bd3fffc3 	ldbu	r20,-1(r23)
    6f48:	18c00044 	addi	r3,r3,1
    6f4c:	d8c00515 	stw	r3,20(sp)
    6f50:	003db906 	br	6638 <__alt_data_end+0xff006638>
    6f54:	89400117 	ldw	r5,4(r17)
    6f58:	e009883a 	mov	r4,fp
    6f5c:	0008b440 	call	8b44 <_Balloc>
    6f60:	89800417 	ldw	r6,16(r17)
    6f64:	89400304 	addi	r5,r17,12
    6f68:	11000304 	addi	r4,r2,12
    6f6c:	31800084 	addi	r6,r6,2
    6f70:	318d883a 	add	r6,r6,r6
    6f74:	318d883a 	add	r6,r6,r6
    6f78:	1027883a 	mov	r19,r2
    6f7c:	00087780 	call	8778 <memcpy>
    6f80:	01800044 	movi	r6,1
    6f84:	980b883a 	mov	r5,r19
    6f88:	e009883a 	mov	r4,fp
    6f8c:	00092c40 	call	92c4 <__lshift>
    6f90:	1029883a 	mov	r20,r2
    6f94:	003ecc06 	br	6ac8 <__alt_data_end+0xff006ac8>
    6f98:	00800e44 	movi	r2,57
    6f9c:	90809026 	beq	r18,r2,71e0 <_dtoa_r+0x152c>
    6fa0:	92000044 	addi	r8,r18,1
    6fa4:	003f1f06 	br	6c24 <__alt_data_end+0xff006c24>
    6fa8:	9011883a 	mov	r8,r18
    6fac:	8825883a 	mov	r18,r17
    6fb0:	a023883a 	mov	r17,r20
    6fb4:	003e2906 	br	685c <__alt_data_end+0xff00685c>
    6fb8:	002b883a 	mov	r21,zero
    6fbc:	0023883a 	mov	r17,zero
    6fc0:	003f5406 	br	6d14 <__alt_data_end+0xff006d14>
    6fc4:	61bfffc4 	addi	r6,r12,-1
    6fc8:	300490fa 	slli	r2,r6,3
    6fcc:	00c00074 	movhi	r3,1
    6fd0:	18c8ee04 	addi	r3,r3,9144
    6fd4:	1885883a 	add	r2,r3,r2
    6fd8:	11000017 	ldw	r4,0(r2)
    6fdc:	11400117 	ldw	r5,4(r2)
    6fe0:	d8800717 	ldw	r2,28(sp)
    6fe4:	880f883a 	mov	r7,r17
    6fe8:	d9801215 	stw	r6,72(sp)
    6fec:	800d883a 	mov	r6,r16
    6ff0:	db001615 	stw	r12,88(sp)
    6ff4:	15c00044 	addi	r23,r2,1
    6ff8:	000e1480 	call	e148 <__muldf3>
    6ffc:	d9401017 	ldw	r5,64(sp)
    7000:	d9000f17 	ldw	r4,60(sp)
    7004:	d8c01515 	stw	r3,84(sp)
    7008:	d8801415 	stw	r2,80(sp)
    700c:	000f15c0 	call	f15c <__fixdfsi>
    7010:	1009883a 	mov	r4,r2
    7014:	1021883a 	mov	r16,r2
    7018:	000f1dc0 	call	f1dc <__floatsidf>
    701c:	d9000f17 	ldw	r4,60(sp)
    7020:	d9401017 	ldw	r5,64(sp)
    7024:	100d883a 	mov	r6,r2
    7028:	180f883a 	mov	r7,r3
    702c:	000e8600 	call	e860 <__subdf3>
    7030:	1829883a 	mov	r20,r3
    7034:	d8c00717 	ldw	r3,28(sp)
    7038:	84000c04 	addi	r16,r16,48
    703c:	1023883a 	mov	r17,r2
    7040:	1c000005 	stb	r16,0(r3)
    7044:	db001617 	ldw	r12,88(sp)
    7048:	00800044 	movi	r2,1
    704c:	60802226 	beq	r12,r2,70d8 <_dtoa_r+0x1424>
    7050:	d9c00717 	ldw	r7,28(sp)
    7054:	8805883a 	mov	r2,r17
    7058:	b82b883a 	mov	r21,r23
    705c:	3b19883a 	add	r12,r7,r12
    7060:	6023883a 	mov	r17,r12
    7064:	a007883a 	mov	r3,r20
    7068:	dc800f15 	stw	r18,60(sp)
    706c:	000d883a 	mov	r6,zero
    7070:	01d00934 	movhi	r7,16420
    7074:	1009883a 	mov	r4,r2
    7078:	180b883a 	mov	r5,r3
    707c:	000e1480 	call	e148 <__muldf3>
    7080:	180b883a 	mov	r5,r3
    7084:	1009883a 	mov	r4,r2
    7088:	1829883a 	mov	r20,r3
    708c:	1025883a 	mov	r18,r2
    7090:	000f15c0 	call	f15c <__fixdfsi>
    7094:	1009883a 	mov	r4,r2
    7098:	1021883a 	mov	r16,r2
    709c:	000f1dc0 	call	f1dc <__floatsidf>
    70a0:	100d883a 	mov	r6,r2
    70a4:	180f883a 	mov	r7,r3
    70a8:	9009883a 	mov	r4,r18
    70ac:	a00b883a 	mov	r5,r20
    70b0:	84000c04 	addi	r16,r16,48
    70b4:	000e8600 	call	e860 <__subdf3>
    70b8:	ad400044 	addi	r21,r21,1
    70bc:	ac3fffc5 	stb	r16,-1(r21)
    70c0:	ac7fea1e 	bne	r21,r17,706c <__alt_data_end+0xff00706c>
    70c4:	1023883a 	mov	r17,r2
    70c8:	d8801217 	ldw	r2,72(sp)
    70cc:	dc800f17 	ldw	r18,60(sp)
    70d0:	1829883a 	mov	r20,r3
    70d4:	b8af883a 	add	r23,r23,r2
    70d8:	d9001417 	ldw	r4,80(sp)
    70dc:	d9401517 	ldw	r5,84(sp)
    70e0:	000d883a 	mov	r6,zero
    70e4:	01cff834 	movhi	r7,16352
    70e8:	000cd5c0 	call	cd5c <__adddf3>
    70ec:	880d883a 	mov	r6,r17
    70f0:	a00f883a 	mov	r7,r20
    70f4:	1009883a 	mov	r4,r2
    70f8:	180b883a 	mov	r5,r3
    70fc:	000e0540 	call	e054 <__ledf2>
    7100:	10003e0e 	bge	r2,zero,71fc <_dtoa_r+0x1548>
    7104:	d9001317 	ldw	r4,76(sp)
    7108:	bd3fffc3 	ldbu	r20,-1(r23)
    710c:	d9000515 	stw	r4,20(sp)
    7110:	003d3b06 	br	6600 <__alt_data_end+0xff006600>
    7114:	0027883a 	mov	r19,zero
    7118:	003f1b06 	br	6d88 <__alt_data_end+0xff006d88>
    711c:	d8800817 	ldw	r2,32(sp)
    7120:	11e9c83a 	sub	r20,r2,r7
    7124:	0005883a 	mov	r2,zero
    7128:	003d5406 	br	667c <__alt_data_end+0xff00667c>
    712c:	00800044 	movi	r2,1
    7130:	003dc706 	br	6850 <__alt_data_end+0xff006850>
    7134:	d8c00217 	ldw	r3,8(sp)
    7138:	00800d84 	movi	r2,54
    713c:	dd400a17 	ldw	r21,40(sp)
    7140:	10c5c83a 	sub	r2,r2,r3
    7144:	dd000817 	ldw	r20,32(sp)
    7148:	003d4c06 	br	667c <__alt_data_end+0xff00667c>
    714c:	dc800f15 	stw	r18,60(sp)
    7150:	dcc01015 	stw	r19,64(sp)
    7154:	04000084 	movi	r16,2
    7158:	003bed06 	br	6110 <__alt_data_end+0xff006110>
    715c:	d9000617 	ldw	r4,24(sp)
    7160:	203f0d26 	beq	r4,zero,6d98 <__alt_data_end+0xff006d98>
    7164:	d9800c17 	ldw	r6,48(sp)
    7168:	01bcab0e 	bge	zero,r6,6418 <__alt_data_end+0xff006418>
    716c:	d9401017 	ldw	r5,64(sp)
    7170:	d9000f17 	ldw	r4,60(sp)
    7174:	000d883a 	mov	r6,zero
    7178:	01d00934 	movhi	r7,16420
    717c:	000e1480 	call	e148 <__muldf3>
    7180:	81000044 	addi	r4,r16,1
    7184:	d8800f15 	stw	r2,60(sp)
    7188:	d8c01015 	stw	r3,64(sp)
    718c:	000f1dc0 	call	f1dc <__floatsidf>
    7190:	d9800f17 	ldw	r6,60(sp)
    7194:	d9c01017 	ldw	r7,64(sp)
    7198:	1009883a 	mov	r4,r2
    719c:	180b883a 	mov	r5,r3
    71a0:	000e1480 	call	e148 <__muldf3>
    71a4:	01d00734 	movhi	r7,16412
    71a8:	000d883a 	mov	r6,zero
    71ac:	1009883a 	mov	r4,r2
    71b0:	180b883a 	mov	r5,r3
    71b4:	000cd5c0 	call	cd5c <__adddf3>
    71b8:	d9c00517 	ldw	r7,20(sp)
    71bc:	047f3034 	movhi	r17,64704
    71c0:	1021883a 	mov	r16,r2
    71c4:	39ffffc4 	addi	r7,r7,-1
    71c8:	d9c01315 	stw	r7,76(sp)
    71cc:	1c63883a 	add	r17,r3,r17
    71d0:	db000c17 	ldw	r12,48(sp)
    71d4:	003bea06 	br	6180 <__alt_data_end+0xff006180>
    71d8:	dc000915 	stw	r16,36(sp)
    71dc:	003e0e06 	br	6a18 <__alt_data_end+0xff006a18>
    71e0:	01000e44 	movi	r4,57
    71e4:	8825883a 	mov	r18,r17
    71e8:	9dc00044 	addi	r23,r19,1
    71ec:	99000005 	stb	r4,0(r19)
    71f0:	a023883a 	mov	r17,r20
    71f4:	dc000915 	stw	r16,36(sp)
    71f8:	003da406 	br	688c <__alt_data_end+0xff00688c>
    71fc:	d9801417 	ldw	r6,80(sp)
    7200:	d9c01517 	ldw	r7,84(sp)
    7204:	0009883a 	mov	r4,zero
    7208:	014ff834 	movhi	r5,16352
    720c:	000e8600 	call	e860 <__subdf3>
    7210:	880d883a 	mov	r6,r17
    7214:	a00f883a 	mov	r7,r20
    7218:	1009883a 	mov	r4,r2
    721c:	180b883a 	mov	r5,r3
    7220:	000df780 	call	df78 <__gedf2>
    7224:	00bc7c0e 	bge	zero,r2,6418 <__alt_data_end+0xff006418>
    7228:	01000c04 	movi	r4,48
    722c:	00000106 	br	7234 <_dtoa_r+0x1580>
    7230:	102f883a 	mov	r23,r2
    7234:	b8bfffc4 	addi	r2,r23,-1
    7238:	10c00007 	ldb	r3,0(r2)
    723c:	193ffc26 	beq	r3,r4,7230 <__alt_data_end+0xff007230>
    7240:	d9801317 	ldw	r6,76(sp)
    7244:	d9800515 	stw	r6,20(sp)
    7248:	003c4406 	br	635c <__alt_data_end+0xff00635c>
    724c:	d9801317 	ldw	r6,76(sp)
    7250:	d9800515 	stw	r6,20(sp)
    7254:	003cea06 	br	6600 <__alt_data_end+0xff006600>
    7258:	dd800f17 	ldw	r22,60(sp)
    725c:	dcc01017 	ldw	r19,64(sp)
    7260:	dc801217 	ldw	r18,72(sp)
    7264:	003c6c06 	br	6418 <__alt_data_end+0xff006418>
    7268:	903e031e 	bne	r18,zero,6a78 <__alt_data_end+0xff006a78>
    726c:	003ebb06 	br	6d5c <__alt_data_end+0xff006d5c>
    7270:	103e6c1e 	bne	r2,zero,6c24 <__alt_data_end+0xff006c24>
    7274:	4080004c 	andi	r2,r8,1
    7278:	103e6a26 	beq	r2,zero,6c24 <__alt_data_end+0xff006c24>
    727c:	003e6606 	br	6c18 <__alt_data_end+0xff006c18>
    7280:	d8c00317 	ldw	r3,12(sp)
    7284:	00800084 	movi	r2,2
    7288:	10c02916 	blt	r2,r3,7330 <_dtoa_r+0x167c>
    728c:	d9000c17 	ldw	r4,48(sp)
    7290:	003e8806 	br	6cb4 <__alt_data_end+0xff006cb4>
    7294:	04000084 	movi	r16,2
    7298:	003b9d06 	br	6110 <__alt_data_end+0xff006110>
    729c:	d9001317 	ldw	r4,76(sp)
    72a0:	d9000515 	stw	r4,20(sp)
    72a4:	003cd606 	br	6600 <__alt_data_end+0xff006600>
    72a8:	d8801317 	ldw	r2,76(sp)
    72ac:	d8800515 	stw	r2,20(sp)
    72b0:	003c2a06 	br	635c <__alt_data_end+0xff00635c>
    72b4:	d9800317 	ldw	r6,12(sp)
    72b8:	00800084 	movi	r2,2
    72bc:	11801516 	blt	r2,r6,7314 <_dtoa_r+0x1660>
    72c0:	d9c00c17 	ldw	r7,48(sp)
    72c4:	d9c00615 	stw	r7,24(sp)
    72c8:	003df706 	br	6aa8 <__alt_data_end+0xff006aa8>
    72cc:	193d3926 	beq	r3,r4,67b4 <__alt_data_end+0xff0067b4>
    72d0:	00c00f04 	movi	r3,60
    72d4:	1885c83a 	sub	r2,r3,r2
    72d8:	003ddf06 	br	6a58 <__alt_data_end+0xff006a58>
    72dc:	e009883a 	mov	r4,fp
    72e0:	e0001115 	stw	zero,68(fp)
    72e4:	000b883a 	mov	r5,zero
    72e8:	0008b440 	call	8b44 <_Balloc>
    72ec:	d8800715 	stw	r2,28(sp)
    72f0:	d8c00717 	ldw	r3,28(sp)
    72f4:	00bfffc4 	movi	r2,-1
    72f8:	01000044 	movi	r4,1
    72fc:	d8800c15 	stw	r2,48(sp)
    7300:	e0c01015 	stw	r3,64(fp)
    7304:	d9000b15 	stw	r4,44(sp)
    7308:	d8800615 	stw	r2,24(sp)
    730c:	d8002215 	stw	zero,136(sp)
    7310:	003c4106 	br	6418 <__alt_data_end+0xff006418>
    7314:	d8c00c17 	ldw	r3,48(sp)
    7318:	d8c00615 	stw	r3,24(sp)
    731c:	003e7006 	br	6ce0 <__alt_data_end+0xff006ce0>
    7320:	04400044 	movi	r17,1
    7324:	003b2006 	br	5fa8 <__alt_data_end+0xff005fa8>
    7328:	000b883a 	mov	r5,zero
    732c:	003b3d06 	br	6024 <__alt_data_end+0xff006024>
    7330:	d8800c17 	ldw	r2,48(sp)
    7334:	d8800615 	stw	r2,24(sp)
    7338:	003e6906 	br	6ce0 <__alt_data_end+0xff006ce0>

0000733c <__sflush_r>:
    733c:	2880030b 	ldhu	r2,12(r5)
    7340:	defffb04 	addi	sp,sp,-20
    7344:	dcc00315 	stw	r19,12(sp)
    7348:	dc400115 	stw	r17,4(sp)
    734c:	dfc00415 	stw	ra,16(sp)
    7350:	dc800215 	stw	r18,8(sp)
    7354:	dc000015 	stw	r16,0(sp)
    7358:	10c0020c 	andi	r3,r2,8
    735c:	2823883a 	mov	r17,r5
    7360:	2027883a 	mov	r19,r4
    7364:	1800311e 	bne	r3,zero,742c <__sflush_r+0xf0>
    7368:	28c00117 	ldw	r3,4(r5)
    736c:	10820014 	ori	r2,r2,2048
    7370:	2880030d 	sth	r2,12(r5)
    7374:	00c04b0e 	bge	zero,r3,74a4 <__sflush_r+0x168>
    7378:	8a000a17 	ldw	r8,40(r17)
    737c:	40002326 	beq	r8,zero,740c <__sflush_r+0xd0>
    7380:	9c000017 	ldw	r16,0(r19)
    7384:	10c4000c 	andi	r3,r2,4096
    7388:	98000015 	stw	zero,0(r19)
    738c:	18004826 	beq	r3,zero,74b0 <__sflush_r+0x174>
    7390:	89801417 	ldw	r6,80(r17)
    7394:	10c0010c 	andi	r3,r2,4
    7398:	18000626 	beq	r3,zero,73b4 <__sflush_r+0x78>
    739c:	88c00117 	ldw	r3,4(r17)
    73a0:	88800c17 	ldw	r2,48(r17)
    73a4:	30cdc83a 	sub	r6,r6,r3
    73a8:	10000226 	beq	r2,zero,73b4 <__sflush_r+0x78>
    73ac:	88800f17 	ldw	r2,60(r17)
    73b0:	308dc83a 	sub	r6,r6,r2
    73b4:	89400717 	ldw	r5,28(r17)
    73b8:	000f883a 	mov	r7,zero
    73bc:	9809883a 	mov	r4,r19
    73c0:	403ee83a 	callr	r8
    73c4:	00ffffc4 	movi	r3,-1
    73c8:	10c04426 	beq	r2,r3,74dc <__sflush_r+0x1a0>
    73cc:	88c0030b 	ldhu	r3,12(r17)
    73d0:	89000417 	ldw	r4,16(r17)
    73d4:	88000115 	stw	zero,4(r17)
    73d8:	197dffcc 	andi	r5,r3,63487
    73dc:	8940030d 	sth	r5,12(r17)
    73e0:	89000015 	stw	r4,0(r17)
    73e4:	18c4000c 	andi	r3,r3,4096
    73e8:	18002c1e 	bne	r3,zero,749c <__sflush_r+0x160>
    73ec:	89400c17 	ldw	r5,48(r17)
    73f0:	9c000015 	stw	r16,0(r19)
    73f4:	28000526 	beq	r5,zero,740c <__sflush_r+0xd0>
    73f8:	88801004 	addi	r2,r17,64
    73fc:	28800226 	beq	r5,r2,7408 <__sflush_r+0xcc>
    7400:	9809883a 	mov	r4,r19
    7404:	0007aa80 	call	7aa8 <_free_r>
    7408:	88000c15 	stw	zero,48(r17)
    740c:	0005883a 	mov	r2,zero
    7410:	dfc00417 	ldw	ra,16(sp)
    7414:	dcc00317 	ldw	r19,12(sp)
    7418:	dc800217 	ldw	r18,8(sp)
    741c:	dc400117 	ldw	r17,4(sp)
    7420:	dc000017 	ldw	r16,0(sp)
    7424:	dec00504 	addi	sp,sp,20
    7428:	f800283a 	ret
    742c:	2c800417 	ldw	r18,16(r5)
    7430:	903ff626 	beq	r18,zero,740c <__alt_data_end+0xff00740c>
    7434:	2c000017 	ldw	r16,0(r5)
    7438:	108000cc 	andi	r2,r2,3
    743c:	2c800015 	stw	r18,0(r5)
    7440:	84a1c83a 	sub	r16,r16,r18
    7444:	1000131e 	bne	r2,zero,7494 <__sflush_r+0x158>
    7448:	28800517 	ldw	r2,20(r5)
    744c:	88800215 	stw	r2,8(r17)
    7450:	04000316 	blt	zero,r16,7460 <__sflush_r+0x124>
    7454:	003fed06 	br	740c <__alt_data_end+0xff00740c>
    7458:	90a5883a 	add	r18,r18,r2
    745c:	043feb0e 	bge	zero,r16,740c <__alt_data_end+0xff00740c>
    7460:	88800917 	ldw	r2,36(r17)
    7464:	89400717 	ldw	r5,28(r17)
    7468:	800f883a 	mov	r7,r16
    746c:	900d883a 	mov	r6,r18
    7470:	9809883a 	mov	r4,r19
    7474:	103ee83a 	callr	r2
    7478:	80a1c83a 	sub	r16,r16,r2
    747c:	00bff616 	blt	zero,r2,7458 <__alt_data_end+0xff007458>
    7480:	88c0030b 	ldhu	r3,12(r17)
    7484:	00bfffc4 	movi	r2,-1
    7488:	18c01014 	ori	r3,r3,64
    748c:	88c0030d 	sth	r3,12(r17)
    7490:	003fdf06 	br	7410 <__alt_data_end+0xff007410>
    7494:	0005883a 	mov	r2,zero
    7498:	003fec06 	br	744c <__alt_data_end+0xff00744c>
    749c:	88801415 	stw	r2,80(r17)
    74a0:	003fd206 	br	73ec <__alt_data_end+0xff0073ec>
    74a4:	28c00f17 	ldw	r3,60(r5)
    74a8:	00ffb316 	blt	zero,r3,7378 <__alt_data_end+0xff007378>
    74ac:	003fd706 	br	740c <__alt_data_end+0xff00740c>
    74b0:	89400717 	ldw	r5,28(r17)
    74b4:	000d883a 	mov	r6,zero
    74b8:	01c00044 	movi	r7,1
    74bc:	9809883a 	mov	r4,r19
    74c0:	403ee83a 	callr	r8
    74c4:	100d883a 	mov	r6,r2
    74c8:	00bfffc4 	movi	r2,-1
    74cc:	30801426 	beq	r6,r2,7520 <__sflush_r+0x1e4>
    74d0:	8880030b 	ldhu	r2,12(r17)
    74d4:	8a000a17 	ldw	r8,40(r17)
    74d8:	003fae06 	br	7394 <__alt_data_end+0xff007394>
    74dc:	98c00017 	ldw	r3,0(r19)
    74e0:	183fba26 	beq	r3,zero,73cc <__alt_data_end+0xff0073cc>
    74e4:	01000744 	movi	r4,29
    74e8:	19000626 	beq	r3,r4,7504 <__sflush_r+0x1c8>
    74ec:	01000584 	movi	r4,22
    74f0:	19000426 	beq	r3,r4,7504 <__sflush_r+0x1c8>
    74f4:	88c0030b 	ldhu	r3,12(r17)
    74f8:	18c01014 	ori	r3,r3,64
    74fc:	88c0030d 	sth	r3,12(r17)
    7500:	003fc306 	br	7410 <__alt_data_end+0xff007410>
    7504:	8880030b 	ldhu	r2,12(r17)
    7508:	88c00417 	ldw	r3,16(r17)
    750c:	88000115 	stw	zero,4(r17)
    7510:	10bdffcc 	andi	r2,r2,63487
    7514:	8880030d 	sth	r2,12(r17)
    7518:	88c00015 	stw	r3,0(r17)
    751c:	003fb306 	br	73ec <__alt_data_end+0xff0073ec>
    7520:	98800017 	ldw	r2,0(r19)
    7524:	103fea26 	beq	r2,zero,74d0 <__alt_data_end+0xff0074d0>
    7528:	00c00744 	movi	r3,29
    752c:	10c00226 	beq	r2,r3,7538 <__sflush_r+0x1fc>
    7530:	00c00584 	movi	r3,22
    7534:	10c0031e 	bne	r2,r3,7544 <__sflush_r+0x208>
    7538:	9c000015 	stw	r16,0(r19)
    753c:	0005883a 	mov	r2,zero
    7540:	003fb306 	br	7410 <__alt_data_end+0xff007410>
    7544:	88c0030b 	ldhu	r3,12(r17)
    7548:	3005883a 	mov	r2,r6
    754c:	18c01014 	ori	r3,r3,64
    7550:	88c0030d 	sth	r3,12(r17)
    7554:	003fae06 	br	7410 <__alt_data_end+0xff007410>

00007558 <_fflush_r>:
    7558:	defffd04 	addi	sp,sp,-12
    755c:	dc000115 	stw	r16,4(sp)
    7560:	dfc00215 	stw	ra,8(sp)
    7564:	2021883a 	mov	r16,r4
    7568:	20000226 	beq	r4,zero,7574 <_fflush_r+0x1c>
    756c:	20800e17 	ldw	r2,56(r4)
    7570:	10000c26 	beq	r2,zero,75a4 <_fflush_r+0x4c>
    7574:	2880030f 	ldh	r2,12(r5)
    7578:	1000051e 	bne	r2,zero,7590 <_fflush_r+0x38>
    757c:	0005883a 	mov	r2,zero
    7580:	dfc00217 	ldw	ra,8(sp)
    7584:	dc000117 	ldw	r16,4(sp)
    7588:	dec00304 	addi	sp,sp,12
    758c:	f800283a 	ret
    7590:	8009883a 	mov	r4,r16
    7594:	dfc00217 	ldw	ra,8(sp)
    7598:	dc000117 	ldw	r16,4(sp)
    759c:	dec00304 	addi	sp,sp,12
    75a0:	000733c1 	jmpi	733c <__sflush_r>
    75a4:	d9400015 	stw	r5,0(sp)
    75a8:	00079340 	call	7934 <__sinit>
    75ac:	d9400017 	ldw	r5,0(sp)
    75b0:	003ff006 	br	7574 <__alt_data_end+0xff007574>

000075b4 <fflush>:
    75b4:	20000526 	beq	r4,zero,75cc <fflush+0x18>
    75b8:	00800074 	movhi	r2,1
    75bc:	10902304 	addi	r2,r2,16524
    75c0:	200b883a 	mov	r5,r4
    75c4:	11000017 	ldw	r4,0(r2)
    75c8:	00075581 	jmpi	7558 <_fflush_r>
    75cc:	00800074 	movhi	r2,1
    75d0:	10902204 	addi	r2,r2,16520
    75d4:	11000017 	ldw	r4,0(r2)
    75d8:	01400034 	movhi	r5,0
    75dc:	295d5604 	addi	r5,r5,30040
    75e0:	00083381 	jmpi	8338 <_fwalk_reent>

000075e4 <__fp_unlock>:
    75e4:	0005883a 	mov	r2,zero
    75e8:	f800283a 	ret

000075ec <_cleanup_r>:
    75ec:	01400074 	movhi	r5,1
    75f0:	296ebc04 	addi	r5,r5,-17680
    75f4:	00083381 	jmpi	8338 <_fwalk_reent>

000075f8 <__sinit.part.1>:
    75f8:	defff704 	addi	sp,sp,-36
    75fc:	00c00034 	movhi	r3,0
    7600:	dfc00815 	stw	ra,32(sp)
    7604:	ddc00715 	stw	r23,28(sp)
    7608:	dd800615 	stw	r22,24(sp)
    760c:	dd400515 	stw	r21,20(sp)
    7610:	dd000415 	stw	r20,16(sp)
    7614:	dcc00315 	stw	r19,12(sp)
    7618:	dc800215 	stw	r18,8(sp)
    761c:	dc400115 	stw	r17,4(sp)
    7620:	dc000015 	stw	r16,0(sp)
    7624:	18dd7b04 	addi	r3,r3,30188
    7628:	24000117 	ldw	r16,4(r4)
    762c:	20c00f15 	stw	r3,60(r4)
    7630:	2080bb04 	addi	r2,r4,748
    7634:	00c000c4 	movi	r3,3
    7638:	20c0b915 	stw	r3,740(r4)
    763c:	2080ba15 	stw	r2,744(r4)
    7640:	2000b815 	stw	zero,736(r4)
    7644:	05c00204 	movi	r23,8
    7648:	00800104 	movi	r2,4
    764c:	2025883a 	mov	r18,r4
    7650:	b80d883a 	mov	r6,r23
    7654:	81001704 	addi	r4,r16,92
    7658:	000b883a 	mov	r5,zero
    765c:	80000015 	stw	zero,0(r16)
    7660:	80000115 	stw	zero,4(r16)
    7664:	80000215 	stw	zero,8(r16)
    7668:	8080030d 	sth	r2,12(r16)
    766c:	80001915 	stw	zero,100(r16)
    7670:	8000038d 	sth	zero,14(r16)
    7674:	80000415 	stw	zero,16(r16)
    7678:	80000515 	stw	zero,20(r16)
    767c:	80000615 	stw	zero,24(r16)
    7680:	0008a1c0 	call	8a1c <memset>
    7684:	05800074 	movhi	r22,1
    7688:	94400217 	ldw	r17,8(r18)
    768c:	05400074 	movhi	r21,1
    7690:	05000074 	movhi	r20,1
    7694:	04c00074 	movhi	r19,1
    7698:	b5a84604 	addi	r22,r22,-24296
    769c:	ad685d04 	addi	r21,r21,-24204
    76a0:	a5287c04 	addi	r20,r20,-24080
    76a4:	9ce89304 	addi	r19,r19,-23988
    76a8:	85800815 	stw	r22,32(r16)
    76ac:	85400915 	stw	r21,36(r16)
    76b0:	85000a15 	stw	r20,40(r16)
    76b4:	84c00b15 	stw	r19,44(r16)
    76b8:	84000715 	stw	r16,28(r16)
    76bc:	00800284 	movi	r2,10
    76c0:	8880030d 	sth	r2,12(r17)
    76c4:	00800044 	movi	r2,1
    76c8:	b80d883a 	mov	r6,r23
    76cc:	89001704 	addi	r4,r17,92
    76d0:	000b883a 	mov	r5,zero
    76d4:	88000015 	stw	zero,0(r17)
    76d8:	88000115 	stw	zero,4(r17)
    76dc:	88000215 	stw	zero,8(r17)
    76e0:	88001915 	stw	zero,100(r17)
    76e4:	8880038d 	sth	r2,14(r17)
    76e8:	88000415 	stw	zero,16(r17)
    76ec:	88000515 	stw	zero,20(r17)
    76f0:	88000615 	stw	zero,24(r17)
    76f4:	0008a1c0 	call	8a1c <memset>
    76f8:	94000317 	ldw	r16,12(r18)
    76fc:	00800484 	movi	r2,18
    7700:	8c400715 	stw	r17,28(r17)
    7704:	8d800815 	stw	r22,32(r17)
    7708:	8d400915 	stw	r21,36(r17)
    770c:	8d000a15 	stw	r20,40(r17)
    7710:	8cc00b15 	stw	r19,44(r17)
    7714:	8080030d 	sth	r2,12(r16)
    7718:	00800084 	movi	r2,2
    771c:	80000015 	stw	zero,0(r16)
    7720:	80000115 	stw	zero,4(r16)
    7724:	80000215 	stw	zero,8(r16)
    7728:	80001915 	stw	zero,100(r16)
    772c:	8080038d 	sth	r2,14(r16)
    7730:	80000415 	stw	zero,16(r16)
    7734:	80000515 	stw	zero,20(r16)
    7738:	80000615 	stw	zero,24(r16)
    773c:	b80d883a 	mov	r6,r23
    7740:	000b883a 	mov	r5,zero
    7744:	81001704 	addi	r4,r16,92
    7748:	0008a1c0 	call	8a1c <memset>
    774c:	00800044 	movi	r2,1
    7750:	84000715 	stw	r16,28(r16)
    7754:	85800815 	stw	r22,32(r16)
    7758:	85400915 	stw	r21,36(r16)
    775c:	85000a15 	stw	r20,40(r16)
    7760:	84c00b15 	stw	r19,44(r16)
    7764:	90800e15 	stw	r2,56(r18)
    7768:	dfc00817 	ldw	ra,32(sp)
    776c:	ddc00717 	ldw	r23,28(sp)
    7770:	dd800617 	ldw	r22,24(sp)
    7774:	dd400517 	ldw	r21,20(sp)
    7778:	dd000417 	ldw	r20,16(sp)
    777c:	dcc00317 	ldw	r19,12(sp)
    7780:	dc800217 	ldw	r18,8(sp)
    7784:	dc400117 	ldw	r17,4(sp)
    7788:	dc000017 	ldw	r16,0(sp)
    778c:	dec00904 	addi	sp,sp,36
    7790:	f800283a 	ret

00007794 <__fp_lock>:
    7794:	0005883a 	mov	r2,zero
    7798:	f800283a 	ret

0000779c <__sfmoreglue>:
    779c:	defffc04 	addi	sp,sp,-16
    77a0:	dc400115 	stw	r17,4(sp)
    77a4:	2c7fffc4 	addi	r17,r5,-1
    77a8:	8c401a24 	muli	r17,r17,104
    77ac:	dc800215 	stw	r18,8(sp)
    77b0:	2825883a 	mov	r18,r5
    77b4:	89401d04 	addi	r5,r17,116
    77b8:	dc000015 	stw	r16,0(sp)
    77bc:	dfc00315 	stw	ra,12(sp)
    77c0:	0002c580 	call	2c58 <_malloc_r>
    77c4:	1021883a 	mov	r16,r2
    77c8:	10000726 	beq	r2,zero,77e8 <__sfmoreglue+0x4c>
    77cc:	11000304 	addi	r4,r2,12
    77d0:	10000015 	stw	zero,0(r2)
    77d4:	14800115 	stw	r18,4(r2)
    77d8:	11000215 	stw	r4,8(r2)
    77dc:	89801a04 	addi	r6,r17,104
    77e0:	000b883a 	mov	r5,zero
    77e4:	0008a1c0 	call	8a1c <memset>
    77e8:	8005883a 	mov	r2,r16
    77ec:	dfc00317 	ldw	ra,12(sp)
    77f0:	dc800217 	ldw	r18,8(sp)
    77f4:	dc400117 	ldw	r17,4(sp)
    77f8:	dc000017 	ldw	r16,0(sp)
    77fc:	dec00404 	addi	sp,sp,16
    7800:	f800283a 	ret

00007804 <__sfp>:
    7804:	defffb04 	addi	sp,sp,-20
    7808:	dc000015 	stw	r16,0(sp)
    780c:	04000074 	movhi	r16,1
    7810:	84102204 	addi	r16,r16,16520
    7814:	dcc00315 	stw	r19,12(sp)
    7818:	2027883a 	mov	r19,r4
    781c:	81000017 	ldw	r4,0(r16)
    7820:	dfc00415 	stw	ra,16(sp)
    7824:	dc800215 	stw	r18,8(sp)
    7828:	20800e17 	ldw	r2,56(r4)
    782c:	dc400115 	stw	r17,4(sp)
    7830:	1000021e 	bne	r2,zero,783c <__sfp+0x38>
    7834:	00075f80 	call	75f8 <__sinit.part.1>
    7838:	81000017 	ldw	r4,0(r16)
    783c:	2480b804 	addi	r18,r4,736
    7840:	047fffc4 	movi	r17,-1
    7844:	91000117 	ldw	r4,4(r18)
    7848:	94000217 	ldw	r16,8(r18)
    784c:	213fffc4 	addi	r4,r4,-1
    7850:	20000a16 	blt	r4,zero,787c <__sfp+0x78>
    7854:	8080030f 	ldh	r2,12(r16)
    7858:	10000c26 	beq	r2,zero,788c <__sfp+0x88>
    785c:	80c01d04 	addi	r3,r16,116
    7860:	00000206 	br	786c <__sfp+0x68>
    7864:	18bfe60f 	ldh	r2,-104(r3)
    7868:	10000826 	beq	r2,zero,788c <__sfp+0x88>
    786c:	213fffc4 	addi	r4,r4,-1
    7870:	1c3ffd04 	addi	r16,r3,-12
    7874:	18c01a04 	addi	r3,r3,104
    7878:	247ffa1e 	bne	r4,r17,7864 <__alt_data_end+0xff007864>
    787c:	90800017 	ldw	r2,0(r18)
    7880:	10001d26 	beq	r2,zero,78f8 <__sfp+0xf4>
    7884:	1025883a 	mov	r18,r2
    7888:	003fee06 	br	7844 <__alt_data_end+0xff007844>
    788c:	00bfffc4 	movi	r2,-1
    7890:	8080038d 	sth	r2,14(r16)
    7894:	00800044 	movi	r2,1
    7898:	8080030d 	sth	r2,12(r16)
    789c:	80001915 	stw	zero,100(r16)
    78a0:	80000015 	stw	zero,0(r16)
    78a4:	80000215 	stw	zero,8(r16)
    78a8:	80000115 	stw	zero,4(r16)
    78ac:	80000415 	stw	zero,16(r16)
    78b0:	80000515 	stw	zero,20(r16)
    78b4:	80000615 	stw	zero,24(r16)
    78b8:	01800204 	movi	r6,8
    78bc:	000b883a 	mov	r5,zero
    78c0:	81001704 	addi	r4,r16,92
    78c4:	0008a1c0 	call	8a1c <memset>
    78c8:	8005883a 	mov	r2,r16
    78cc:	80000c15 	stw	zero,48(r16)
    78d0:	80000d15 	stw	zero,52(r16)
    78d4:	80001115 	stw	zero,68(r16)
    78d8:	80001215 	stw	zero,72(r16)
    78dc:	dfc00417 	ldw	ra,16(sp)
    78e0:	dcc00317 	ldw	r19,12(sp)
    78e4:	dc800217 	ldw	r18,8(sp)
    78e8:	dc400117 	ldw	r17,4(sp)
    78ec:	dc000017 	ldw	r16,0(sp)
    78f0:	dec00504 	addi	sp,sp,20
    78f4:	f800283a 	ret
    78f8:	01400104 	movi	r5,4
    78fc:	9809883a 	mov	r4,r19
    7900:	000779c0 	call	779c <__sfmoreglue>
    7904:	90800015 	stw	r2,0(r18)
    7908:	103fde1e 	bne	r2,zero,7884 <__alt_data_end+0xff007884>
    790c:	00800304 	movi	r2,12
    7910:	98800015 	stw	r2,0(r19)
    7914:	0005883a 	mov	r2,zero
    7918:	003ff006 	br	78dc <__alt_data_end+0xff0078dc>

0000791c <_cleanup>:
    791c:	00800074 	movhi	r2,1
    7920:	10902204 	addi	r2,r2,16520
    7924:	11000017 	ldw	r4,0(r2)
    7928:	01400074 	movhi	r5,1
    792c:	296ebc04 	addi	r5,r5,-17680
    7930:	00083381 	jmpi	8338 <_fwalk_reent>

00007934 <__sinit>:
    7934:	20800e17 	ldw	r2,56(r4)
    7938:	10000126 	beq	r2,zero,7940 <__sinit+0xc>
    793c:	f800283a 	ret
    7940:	00075f81 	jmpi	75f8 <__sinit.part.1>

00007944 <__sfp_lock_acquire>:
    7944:	f800283a 	ret

00007948 <__sfp_lock_release>:
    7948:	f800283a 	ret

0000794c <__sinit_lock_acquire>:
    794c:	f800283a 	ret

00007950 <__sinit_lock_release>:
    7950:	f800283a 	ret

00007954 <__fp_lock_all>:
    7954:	00800074 	movhi	r2,1
    7958:	10902304 	addi	r2,r2,16524
    795c:	11000017 	ldw	r4,0(r2)
    7960:	01400034 	movhi	r5,0
    7964:	295de504 	addi	r5,r5,30612
    7968:	00082741 	jmpi	8274 <_fwalk>

0000796c <__fp_unlock_all>:
    796c:	00800074 	movhi	r2,1
    7970:	10902304 	addi	r2,r2,16524
    7974:	11000017 	ldw	r4,0(r2)
    7978:	01400034 	movhi	r5,0
    797c:	295d7904 	addi	r5,r5,30180
    7980:	00082741 	jmpi	8274 <_fwalk>

00007984 <_malloc_trim_r>:
    7984:	defffb04 	addi	sp,sp,-20
    7988:	dcc00315 	stw	r19,12(sp)
    798c:	04c00074 	movhi	r19,1
    7990:	dc800215 	stw	r18,8(sp)
    7994:	dc400115 	stw	r17,4(sp)
    7998:	dc000015 	stw	r16,0(sp)
    799c:	dfc00415 	stw	ra,16(sp)
    79a0:	2821883a 	mov	r16,r5
    79a4:	9cc97304 	addi	r19,r19,9676
    79a8:	2025883a 	mov	r18,r4
    79ac:	000f9400 	call	f940 <__malloc_lock>
    79b0:	98800217 	ldw	r2,8(r19)
    79b4:	14400117 	ldw	r17,4(r2)
    79b8:	00bfff04 	movi	r2,-4
    79bc:	88a2703a 	and	r17,r17,r2
    79c0:	8c21c83a 	sub	r16,r17,r16
    79c4:	8403fbc4 	addi	r16,r16,4079
    79c8:	8020d33a 	srli	r16,r16,12
    79cc:	0083ffc4 	movi	r2,4095
    79d0:	843fffc4 	addi	r16,r16,-1
    79d4:	8020933a 	slli	r16,r16,12
    79d8:	1400060e 	bge	r2,r16,79f4 <_malloc_trim_r+0x70>
    79dc:	000b883a 	mov	r5,zero
    79e0:	9009883a 	mov	r4,r18
    79e4:	00035a40 	call	35a4 <_sbrk_r>
    79e8:	98c00217 	ldw	r3,8(r19)
    79ec:	1c47883a 	add	r3,r3,r17
    79f0:	10c00a26 	beq	r2,r3,7a1c <_malloc_trim_r+0x98>
    79f4:	9009883a 	mov	r4,r18
    79f8:	000f9640 	call	f964 <__malloc_unlock>
    79fc:	0005883a 	mov	r2,zero
    7a00:	dfc00417 	ldw	ra,16(sp)
    7a04:	dcc00317 	ldw	r19,12(sp)
    7a08:	dc800217 	ldw	r18,8(sp)
    7a0c:	dc400117 	ldw	r17,4(sp)
    7a10:	dc000017 	ldw	r16,0(sp)
    7a14:	dec00504 	addi	sp,sp,20
    7a18:	f800283a 	ret
    7a1c:	040bc83a 	sub	r5,zero,r16
    7a20:	9009883a 	mov	r4,r18
    7a24:	00035a40 	call	35a4 <_sbrk_r>
    7a28:	00ffffc4 	movi	r3,-1
    7a2c:	10c00d26 	beq	r2,r3,7a64 <_malloc_trim_r+0xe0>
    7a30:	00c00074 	movhi	r3,1
    7a34:	18d70704 	addi	r3,r3,23580
    7a38:	18800017 	ldw	r2,0(r3)
    7a3c:	99000217 	ldw	r4,8(r19)
    7a40:	8c23c83a 	sub	r17,r17,r16
    7a44:	8c400054 	ori	r17,r17,1
    7a48:	1421c83a 	sub	r16,r2,r16
    7a4c:	24400115 	stw	r17,4(r4)
    7a50:	9009883a 	mov	r4,r18
    7a54:	1c000015 	stw	r16,0(r3)
    7a58:	000f9640 	call	f964 <__malloc_unlock>
    7a5c:	00800044 	movi	r2,1
    7a60:	003fe706 	br	7a00 <__alt_data_end+0xff007a00>
    7a64:	000b883a 	mov	r5,zero
    7a68:	9009883a 	mov	r4,r18
    7a6c:	00035a40 	call	35a4 <_sbrk_r>
    7a70:	99000217 	ldw	r4,8(r19)
    7a74:	014003c4 	movi	r5,15
    7a78:	1107c83a 	sub	r3,r2,r4
    7a7c:	28ffdd0e 	bge	r5,r3,79f4 <__alt_data_end+0xff0079f4>
    7a80:	01400074 	movhi	r5,1
    7a84:	29502004 	addi	r5,r5,16512
    7a88:	29400017 	ldw	r5,0(r5)
    7a8c:	18c00054 	ori	r3,r3,1
    7a90:	20c00115 	stw	r3,4(r4)
    7a94:	00c00074 	movhi	r3,1
    7a98:	1145c83a 	sub	r2,r2,r5
    7a9c:	18d70704 	addi	r3,r3,23580
    7aa0:	18800015 	stw	r2,0(r3)
    7aa4:	003fd306 	br	79f4 <__alt_data_end+0xff0079f4>

00007aa8 <_free_r>:
    7aa8:	28004126 	beq	r5,zero,7bb0 <_free_r+0x108>
    7aac:	defffd04 	addi	sp,sp,-12
    7ab0:	dc400115 	stw	r17,4(sp)
    7ab4:	dc000015 	stw	r16,0(sp)
    7ab8:	2023883a 	mov	r17,r4
    7abc:	2821883a 	mov	r16,r5
    7ac0:	dfc00215 	stw	ra,8(sp)
    7ac4:	000f9400 	call	f940 <__malloc_lock>
    7ac8:	81ffff17 	ldw	r7,-4(r16)
    7acc:	00bfff84 	movi	r2,-2
    7ad0:	01000074 	movhi	r4,1
    7ad4:	81bffe04 	addi	r6,r16,-8
    7ad8:	3884703a 	and	r2,r7,r2
    7adc:	21097304 	addi	r4,r4,9676
    7ae0:	308b883a 	add	r5,r6,r2
    7ae4:	2a400117 	ldw	r9,4(r5)
    7ae8:	22000217 	ldw	r8,8(r4)
    7aec:	00ffff04 	movi	r3,-4
    7af0:	48c6703a 	and	r3,r9,r3
    7af4:	2a005726 	beq	r5,r8,7c54 <_free_r+0x1ac>
    7af8:	28c00115 	stw	r3,4(r5)
    7afc:	39c0004c 	andi	r7,r7,1
    7b00:	3800091e 	bne	r7,zero,7b28 <_free_r+0x80>
    7b04:	823ffe17 	ldw	r8,-8(r16)
    7b08:	22400204 	addi	r9,r4,8
    7b0c:	320dc83a 	sub	r6,r6,r8
    7b10:	31c00217 	ldw	r7,8(r6)
    7b14:	1205883a 	add	r2,r2,r8
    7b18:	3a406526 	beq	r7,r9,7cb0 <_free_r+0x208>
    7b1c:	32000317 	ldw	r8,12(r6)
    7b20:	3a000315 	stw	r8,12(r7)
    7b24:	41c00215 	stw	r7,8(r8)
    7b28:	28cf883a 	add	r7,r5,r3
    7b2c:	39c00117 	ldw	r7,4(r7)
    7b30:	39c0004c 	andi	r7,r7,1
    7b34:	38003a26 	beq	r7,zero,7c20 <_free_r+0x178>
    7b38:	10c00054 	ori	r3,r2,1
    7b3c:	30c00115 	stw	r3,4(r6)
    7b40:	3087883a 	add	r3,r6,r2
    7b44:	18800015 	stw	r2,0(r3)
    7b48:	00c07fc4 	movi	r3,511
    7b4c:	18801936 	bltu	r3,r2,7bb4 <_free_r+0x10c>
    7b50:	1004d0fa 	srli	r2,r2,3
    7b54:	01c00044 	movi	r7,1
    7b58:	21400117 	ldw	r5,4(r4)
    7b5c:	10c00044 	addi	r3,r2,1
    7b60:	18c7883a 	add	r3,r3,r3
    7b64:	1005d0ba 	srai	r2,r2,2
    7b68:	18c7883a 	add	r3,r3,r3
    7b6c:	18c7883a 	add	r3,r3,r3
    7b70:	1907883a 	add	r3,r3,r4
    7b74:	3884983a 	sll	r2,r7,r2
    7b78:	19c00017 	ldw	r7,0(r3)
    7b7c:	1a3ffe04 	addi	r8,r3,-8
    7b80:	1144b03a 	or	r2,r2,r5
    7b84:	32000315 	stw	r8,12(r6)
    7b88:	31c00215 	stw	r7,8(r6)
    7b8c:	20800115 	stw	r2,4(r4)
    7b90:	19800015 	stw	r6,0(r3)
    7b94:	39800315 	stw	r6,12(r7)
    7b98:	8809883a 	mov	r4,r17
    7b9c:	dfc00217 	ldw	ra,8(sp)
    7ba0:	dc400117 	ldw	r17,4(sp)
    7ba4:	dc000017 	ldw	r16,0(sp)
    7ba8:	dec00304 	addi	sp,sp,12
    7bac:	000f9641 	jmpi	f964 <__malloc_unlock>
    7bb0:	f800283a 	ret
    7bb4:	100ad27a 	srli	r5,r2,9
    7bb8:	00c00104 	movi	r3,4
    7bbc:	19404a36 	bltu	r3,r5,7ce8 <_free_r+0x240>
    7bc0:	100ad1ba 	srli	r5,r2,6
    7bc4:	28c00e44 	addi	r3,r5,57
    7bc8:	18c7883a 	add	r3,r3,r3
    7bcc:	29400e04 	addi	r5,r5,56
    7bd0:	18c7883a 	add	r3,r3,r3
    7bd4:	18c7883a 	add	r3,r3,r3
    7bd8:	1909883a 	add	r4,r3,r4
    7bdc:	20c00017 	ldw	r3,0(r4)
    7be0:	01c00074 	movhi	r7,1
    7be4:	213ffe04 	addi	r4,r4,-8
    7be8:	39c97304 	addi	r7,r7,9676
    7bec:	20c04426 	beq	r4,r3,7d00 <_free_r+0x258>
    7bf0:	01ffff04 	movi	r7,-4
    7bf4:	19400117 	ldw	r5,4(r3)
    7bf8:	29ca703a 	and	r5,r5,r7
    7bfc:	1140022e 	bgeu	r2,r5,7c08 <_free_r+0x160>
    7c00:	18c00217 	ldw	r3,8(r3)
    7c04:	20fffb1e 	bne	r4,r3,7bf4 <__alt_data_end+0xff007bf4>
    7c08:	19000317 	ldw	r4,12(r3)
    7c0c:	31000315 	stw	r4,12(r6)
    7c10:	30c00215 	stw	r3,8(r6)
    7c14:	21800215 	stw	r6,8(r4)
    7c18:	19800315 	stw	r6,12(r3)
    7c1c:	003fde06 	br	7b98 <__alt_data_end+0xff007b98>
    7c20:	29c00217 	ldw	r7,8(r5)
    7c24:	10c5883a 	add	r2,r2,r3
    7c28:	00c00074 	movhi	r3,1
    7c2c:	18c97504 	addi	r3,r3,9684
    7c30:	38c03b26 	beq	r7,r3,7d20 <_free_r+0x278>
    7c34:	2a000317 	ldw	r8,12(r5)
    7c38:	11400054 	ori	r5,r2,1
    7c3c:	3087883a 	add	r3,r6,r2
    7c40:	3a000315 	stw	r8,12(r7)
    7c44:	41c00215 	stw	r7,8(r8)
    7c48:	31400115 	stw	r5,4(r6)
    7c4c:	18800015 	stw	r2,0(r3)
    7c50:	003fbd06 	br	7b48 <__alt_data_end+0xff007b48>
    7c54:	39c0004c 	andi	r7,r7,1
    7c58:	10c5883a 	add	r2,r2,r3
    7c5c:	3800071e 	bne	r7,zero,7c7c <_free_r+0x1d4>
    7c60:	81fffe17 	ldw	r7,-8(r16)
    7c64:	31cdc83a 	sub	r6,r6,r7
    7c68:	30c00317 	ldw	r3,12(r6)
    7c6c:	31400217 	ldw	r5,8(r6)
    7c70:	11c5883a 	add	r2,r2,r7
    7c74:	28c00315 	stw	r3,12(r5)
    7c78:	19400215 	stw	r5,8(r3)
    7c7c:	10c00054 	ori	r3,r2,1
    7c80:	30c00115 	stw	r3,4(r6)
    7c84:	00c00074 	movhi	r3,1
    7c88:	18d02104 	addi	r3,r3,16516
    7c8c:	18c00017 	ldw	r3,0(r3)
    7c90:	21800215 	stw	r6,8(r4)
    7c94:	10ffc036 	bltu	r2,r3,7b98 <__alt_data_end+0xff007b98>
    7c98:	00800074 	movhi	r2,1
    7c9c:	1096f904 	addi	r2,r2,23524
    7ca0:	11400017 	ldw	r5,0(r2)
    7ca4:	8809883a 	mov	r4,r17
    7ca8:	00079840 	call	7984 <_malloc_trim_r>
    7cac:	003fba06 	br	7b98 <__alt_data_end+0xff007b98>
    7cb0:	28c9883a 	add	r4,r5,r3
    7cb4:	21000117 	ldw	r4,4(r4)
    7cb8:	2100004c 	andi	r4,r4,1
    7cbc:	2000391e 	bne	r4,zero,7da4 <_free_r+0x2fc>
    7cc0:	29c00217 	ldw	r7,8(r5)
    7cc4:	29000317 	ldw	r4,12(r5)
    7cc8:	1885883a 	add	r2,r3,r2
    7ccc:	10c00054 	ori	r3,r2,1
    7cd0:	39000315 	stw	r4,12(r7)
    7cd4:	21c00215 	stw	r7,8(r4)
    7cd8:	30c00115 	stw	r3,4(r6)
    7cdc:	308d883a 	add	r6,r6,r2
    7ce0:	30800015 	stw	r2,0(r6)
    7ce4:	003fac06 	br	7b98 <__alt_data_end+0xff007b98>
    7ce8:	00c00504 	movi	r3,20
    7cec:	19401536 	bltu	r3,r5,7d44 <_free_r+0x29c>
    7cf0:	28c01704 	addi	r3,r5,92
    7cf4:	18c7883a 	add	r3,r3,r3
    7cf8:	294016c4 	addi	r5,r5,91
    7cfc:	003fb406 	br	7bd0 <__alt_data_end+0xff007bd0>
    7d00:	280bd0ba 	srai	r5,r5,2
    7d04:	00c00044 	movi	r3,1
    7d08:	38800117 	ldw	r2,4(r7)
    7d0c:	194a983a 	sll	r5,r3,r5
    7d10:	2007883a 	mov	r3,r4
    7d14:	2884b03a 	or	r2,r5,r2
    7d18:	38800115 	stw	r2,4(r7)
    7d1c:	003fbb06 	br	7c0c <__alt_data_end+0xff007c0c>
    7d20:	21800515 	stw	r6,20(r4)
    7d24:	21800415 	stw	r6,16(r4)
    7d28:	10c00054 	ori	r3,r2,1
    7d2c:	31c00315 	stw	r7,12(r6)
    7d30:	31c00215 	stw	r7,8(r6)
    7d34:	30c00115 	stw	r3,4(r6)
    7d38:	308d883a 	add	r6,r6,r2
    7d3c:	30800015 	stw	r2,0(r6)
    7d40:	003f9506 	br	7b98 <__alt_data_end+0xff007b98>
    7d44:	00c01504 	movi	r3,84
    7d48:	19400536 	bltu	r3,r5,7d60 <_free_r+0x2b8>
    7d4c:	100ad33a 	srli	r5,r2,12
    7d50:	28c01bc4 	addi	r3,r5,111
    7d54:	18c7883a 	add	r3,r3,r3
    7d58:	29401b84 	addi	r5,r5,110
    7d5c:	003f9c06 	br	7bd0 <__alt_data_end+0xff007bd0>
    7d60:	00c05504 	movi	r3,340
    7d64:	19400536 	bltu	r3,r5,7d7c <_free_r+0x2d4>
    7d68:	100ad3fa 	srli	r5,r2,15
    7d6c:	28c01e04 	addi	r3,r5,120
    7d70:	18c7883a 	add	r3,r3,r3
    7d74:	29401dc4 	addi	r5,r5,119
    7d78:	003f9506 	br	7bd0 <__alt_data_end+0xff007bd0>
    7d7c:	00c15504 	movi	r3,1364
    7d80:	19400536 	bltu	r3,r5,7d98 <_free_r+0x2f0>
    7d84:	100ad4ba 	srli	r5,r2,18
    7d88:	28c01f44 	addi	r3,r5,125
    7d8c:	18c7883a 	add	r3,r3,r3
    7d90:	29401f04 	addi	r5,r5,124
    7d94:	003f8e06 	br	7bd0 <__alt_data_end+0xff007bd0>
    7d98:	00c03f84 	movi	r3,254
    7d9c:	01401f84 	movi	r5,126
    7da0:	003f8b06 	br	7bd0 <__alt_data_end+0xff007bd0>
    7da4:	10c00054 	ori	r3,r2,1
    7da8:	30c00115 	stw	r3,4(r6)
    7dac:	308d883a 	add	r6,r6,r2
    7db0:	30800015 	stw	r2,0(r6)
    7db4:	003f7806 	br	7b98 <__alt_data_end+0xff007b98>

00007db8 <__sfvwrite_r>:
    7db8:	30800217 	ldw	r2,8(r6)
    7dbc:	10006726 	beq	r2,zero,7f5c <__sfvwrite_r+0x1a4>
    7dc0:	28c0030b 	ldhu	r3,12(r5)
    7dc4:	defff404 	addi	sp,sp,-48
    7dc8:	dd400715 	stw	r21,28(sp)
    7dcc:	dd000615 	stw	r20,24(sp)
    7dd0:	dc000215 	stw	r16,8(sp)
    7dd4:	dfc00b15 	stw	ra,44(sp)
    7dd8:	df000a15 	stw	fp,40(sp)
    7ddc:	ddc00915 	stw	r23,36(sp)
    7de0:	dd800815 	stw	r22,32(sp)
    7de4:	dcc00515 	stw	r19,20(sp)
    7de8:	dc800415 	stw	r18,16(sp)
    7dec:	dc400315 	stw	r17,12(sp)
    7df0:	1880020c 	andi	r2,r3,8
    7df4:	2821883a 	mov	r16,r5
    7df8:	202b883a 	mov	r21,r4
    7dfc:	3029883a 	mov	r20,r6
    7e00:	10002726 	beq	r2,zero,7ea0 <__sfvwrite_r+0xe8>
    7e04:	28800417 	ldw	r2,16(r5)
    7e08:	10002526 	beq	r2,zero,7ea0 <__sfvwrite_r+0xe8>
    7e0c:	1880008c 	andi	r2,r3,2
    7e10:	a4400017 	ldw	r17,0(r20)
    7e14:	10002a26 	beq	r2,zero,7ec0 <__sfvwrite_r+0x108>
    7e18:	05a00034 	movhi	r22,32768
    7e1c:	0027883a 	mov	r19,zero
    7e20:	0025883a 	mov	r18,zero
    7e24:	b5bf0004 	addi	r22,r22,-1024
    7e28:	980d883a 	mov	r6,r19
    7e2c:	a809883a 	mov	r4,r21
    7e30:	90004626 	beq	r18,zero,7f4c <__sfvwrite_r+0x194>
    7e34:	900f883a 	mov	r7,r18
    7e38:	b480022e 	bgeu	r22,r18,7e44 <__sfvwrite_r+0x8c>
    7e3c:	01e00034 	movhi	r7,32768
    7e40:	39ff0004 	addi	r7,r7,-1024
    7e44:	80800917 	ldw	r2,36(r16)
    7e48:	81400717 	ldw	r5,28(r16)
    7e4c:	103ee83a 	callr	r2
    7e50:	0080570e 	bge	zero,r2,7fb0 <__sfvwrite_r+0x1f8>
    7e54:	a0c00217 	ldw	r3,8(r20)
    7e58:	98a7883a 	add	r19,r19,r2
    7e5c:	90a5c83a 	sub	r18,r18,r2
    7e60:	1885c83a 	sub	r2,r3,r2
    7e64:	a0800215 	stw	r2,8(r20)
    7e68:	103fef1e 	bne	r2,zero,7e28 <__alt_data_end+0xff007e28>
    7e6c:	0005883a 	mov	r2,zero
    7e70:	dfc00b17 	ldw	ra,44(sp)
    7e74:	df000a17 	ldw	fp,40(sp)
    7e78:	ddc00917 	ldw	r23,36(sp)
    7e7c:	dd800817 	ldw	r22,32(sp)
    7e80:	dd400717 	ldw	r21,28(sp)
    7e84:	dd000617 	ldw	r20,24(sp)
    7e88:	dcc00517 	ldw	r19,20(sp)
    7e8c:	dc800417 	ldw	r18,16(sp)
    7e90:	dc400317 	ldw	r17,12(sp)
    7e94:	dc000217 	ldw	r16,8(sp)
    7e98:	dec00c04 	addi	sp,sp,48
    7e9c:	f800283a 	ret
    7ea0:	800b883a 	mov	r5,r16
    7ea4:	a809883a 	mov	r4,r21
    7ea8:	00059600 	call	5960 <__swsetup_r>
    7eac:	1000eb1e 	bne	r2,zero,825c <__sfvwrite_r+0x4a4>
    7eb0:	80c0030b 	ldhu	r3,12(r16)
    7eb4:	a4400017 	ldw	r17,0(r20)
    7eb8:	1880008c 	andi	r2,r3,2
    7ebc:	103fd61e 	bne	r2,zero,7e18 <__alt_data_end+0xff007e18>
    7ec0:	1880004c 	andi	r2,r3,1
    7ec4:	10003f1e 	bne	r2,zero,7fc4 <__sfvwrite_r+0x20c>
    7ec8:	0039883a 	mov	fp,zero
    7ecc:	0025883a 	mov	r18,zero
    7ed0:	90001a26 	beq	r18,zero,7f3c <__sfvwrite_r+0x184>
    7ed4:	1880800c 	andi	r2,r3,512
    7ed8:	84c00217 	ldw	r19,8(r16)
    7edc:	10002126 	beq	r2,zero,7f64 <__sfvwrite_r+0x1ac>
    7ee0:	982f883a 	mov	r23,r19
    7ee4:	94c09336 	bltu	r18,r19,8134 <__sfvwrite_r+0x37c>
    7ee8:	1881200c 	andi	r2,r3,1152
    7eec:	10009e1e 	bne	r2,zero,8168 <__sfvwrite_r+0x3b0>
    7ef0:	81000017 	ldw	r4,0(r16)
    7ef4:	b80d883a 	mov	r6,r23
    7ef8:	e00b883a 	mov	r5,fp
    7efc:	00088c00 	call	88c0 <memmove>
    7f00:	80c00217 	ldw	r3,8(r16)
    7f04:	81000017 	ldw	r4,0(r16)
    7f08:	9005883a 	mov	r2,r18
    7f0c:	1ce7c83a 	sub	r19,r3,r19
    7f10:	25cf883a 	add	r7,r4,r23
    7f14:	84c00215 	stw	r19,8(r16)
    7f18:	81c00015 	stw	r7,0(r16)
    7f1c:	a0c00217 	ldw	r3,8(r20)
    7f20:	e0b9883a 	add	fp,fp,r2
    7f24:	90a5c83a 	sub	r18,r18,r2
    7f28:	18a7c83a 	sub	r19,r3,r2
    7f2c:	a4c00215 	stw	r19,8(r20)
    7f30:	983fce26 	beq	r19,zero,7e6c <__alt_data_end+0xff007e6c>
    7f34:	80c0030b 	ldhu	r3,12(r16)
    7f38:	903fe61e 	bne	r18,zero,7ed4 <__alt_data_end+0xff007ed4>
    7f3c:	8f000017 	ldw	fp,0(r17)
    7f40:	8c800117 	ldw	r18,4(r17)
    7f44:	8c400204 	addi	r17,r17,8
    7f48:	003fe106 	br	7ed0 <__alt_data_end+0xff007ed0>
    7f4c:	8cc00017 	ldw	r19,0(r17)
    7f50:	8c800117 	ldw	r18,4(r17)
    7f54:	8c400204 	addi	r17,r17,8
    7f58:	003fb306 	br	7e28 <__alt_data_end+0xff007e28>
    7f5c:	0005883a 	mov	r2,zero
    7f60:	f800283a 	ret
    7f64:	81000017 	ldw	r4,0(r16)
    7f68:	80800417 	ldw	r2,16(r16)
    7f6c:	11005736 	bltu	r2,r4,80cc <__sfvwrite_r+0x314>
    7f70:	85c00517 	ldw	r23,20(r16)
    7f74:	95c05536 	bltu	r18,r23,80cc <__sfvwrite_r+0x314>
    7f78:	00a00034 	movhi	r2,32768
    7f7c:	10bfffc4 	addi	r2,r2,-1
    7f80:	9009883a 	mov	r4,r18
    7f84:	1480012e 	bgeu	r2,r18,7f8c <__sfvwrite_r+0x1d4>
    7f88:	1009883a 	mov	r4,r2
    7f8c:	b80b883a 	mov	r5,r23
    7f90:	0002a7c0 	call	2a7c <__divsi3>
    7f94:	15cf383a 	mul	r7,r2,r23
    7f98:	81400717 	ldw	r5,28(r16)
    7f9c:	80800917 	ldw	r2,36(r16)
    7fa0:	e00d883a 	mov	r6,fp
    7fa4:	a809883a 	mov	r4,r21
    7fa8:	103ee83a 	callr	r2
    7fac:	00bfdb16 	blt	zero,r2,7f1c <__alt_data_end+0xff007f1c>
    7fb0:	8080030b 	ldhu	r2,12(r16)
    7fb4:	10801014 	ori	r2,r2,64
    7fb8:	8080030d 	sth	r2,12(r16)
    7fbc:	00bfffc4 	movi	r2,-1
    7fc0:	003fab06 	br	7e70 <__alt_data_end+0xff007e70>
    7fc4:	0027883a 	mov	r19,zero
    7fc8:	0011883a 	mov	r8,zero
    7fcc:	0039883a 	mov	fp,zero
    7fd0:	0025883a 	mov	r18,zero
    7fd4:	90001f26 	beq	r18,zero,8054 <__sfvwrite_r+0x29c>
    7fd8:	40005a26 	beq	r8,zero,8144 <__sfvwrite_r+0x38c>
    7fdc:	982d883a 	mov	r22,r19
    7fe0:	94c0012e 	bgeu	r18,r19,7fe8 <__sfvwrite_r+0x230>
    7fe4:	902d883a 	mov	r22,r18
    7fe8:	81000017 	ldw	r4,0(r16)
    7fec:	80800417 	ldw	r2,16(r16)
    7ff0:	b02f883a 	mov	r23,r22
    7ff4:	81c00517 	ldw	r7,20(r16)
    7ff8:	1100032e 	bgeu	r2,r4,8008 <__sfvwrite_r+0x250>
    7ffc:	80c00217 	ldw	r3,8(r16)
    8000:	38c7883a 	add	r3,r7,r3
    8004:	1d801816 	blt	r3,r22,8068 <__sfvwrite_r+0x2b0>
    8008:	b1c03e16 	blt	r22,r7,8104 <__sfvwrite_r+0x34c>
    800c:	80800917 	ldw	r2,36(r16)
    8010:	81400717 	ldw	r5,28(r16)
    8014:	e00d883a 	mov	r6,fp
    8018:	da000115 	stw	r8,4(sp)
    801c:	a809883a 	mov	r4,r21
    8020:	103ee83a 	callr	r2
    8024:	102f883a 	mov	r23,r2
    8028:	da000117 	ldw	r8,4(sp)
    802c:	00bfe00e 	bge	zero,r2,7fb0 <__alt_data_end+0xff007fb0>
    8030:	9de7c83a 	sub	r19,r19,r23
    8034:	98001f26 	beq	r19,zero,80b4 <__sfvwrite_r+0x2fc>
    8038:	a0800217 	ldw	r2,8(r20)
    803c:	e5f9883a 	add	fp,fp,r23
    8040:	95e5c83a 	sub	r18,r18,r23
    8044:	15efc83a 	sub	r23,r2,r23
    8048:	a5c00215 	stw	r23,8(r20)
    804c:	b83f8726 	beq	r23,zero,7e6c <__alt_data_end+0xff007e6c>
    8050:	903fe11e 	bne	r18,zero,7fd8 <__alt_data_end+0xff007fd8>
    8054:	8f000017 	ldw	fp,0(r17)
    8058:	8c800117 	ldw	r18,4(r17)
    805c:	0011883a 	mov	r8,zero
    8060:	8c400204 	addi	r17,r17,8
    8064:	003fdb06 	br	7fd4 <__alt_data_end+0xff007fd4>
    8068:	180d883a 	mov	r6,r3
    806c:	e00b883a 	mov	r5,fp
    8070:	da000115 	stw	r8,4(sp)
    8074:	d8c00015 	stw	r3,0(sp)
    8078:	00088c00 	call	88c0 <memmove>
    807c:	d8c00017 	ldw	r3,0(sp)
    8080:	80800017 	ldw	r2,0(r16)
    8084:	800b883a 	mov	r5,r16
    8088:	a809883a 	mov	r4,r21
    808c:	10c5883a 	add	r2,r2,r3
    8090:	80800015 	stw	r2,0(r16)
    8094:	d8c00015 	stw	r3,0(sp)
    8098:	00075580 	call	7558 <_fflush_r>
    809c:	d8c00017 	ldw	r3,0(sp)
    80a0:	da000117 	ldw	r8,4(sp)
    80a4:	103fc21e 	bne	r2,zero,7fb0 <__alt_data_end+0xff007fb0>
    80a8:	182f883a 	mov	r23,r3
    80ac:	9de7c83a 	sub	r19,r19,r23
    80b0:	983fe11e 	bne	r19,zero,8038 <__alt_data_end+0xff008038>
    80b4:	800b883a 	mov	r5,r16
    80b8:	a809883a 	mov	r4,r21
    80bc:	00075580 	call	7558 <_fflush_r>
    80c0:	103fbb1e 	bne	r2,zero,7fb0 <__alt_data_end+0xff007fb0>
    80c4:	0011883a 	mov	r8,zero
    80c8:	003fdb06 	br	8038 <__alt_data_end+0xff008038>
    80cc:	94c0012e 	bgeu	r18,r19,80d4 <__sfvwrite_r+0x31c>
    80d0:	9027883a 	mov	r19,r18
    80d4:	980d883a 	mov	r6,r19
    80d8:	e00b883a 	mov	r5,fp
    80dc:	00088c00 	call	88c0 <memmove>
    80e0:	80800217 	ldw	r2,8(r16)
    80e4:	80c00017 	ldw	r3,0(r16)
    80e8:	14c5c83a 	sub	r2,r2,r19
    80ec:	1cc7883a 	add	r3,r3,r19
    80f0:	80800215 	stw	r2,8(r16)
    80f4:	80c00015 	stw	r3,0(r16)
    80f8:	10004326 	beq	r2,zero,8208 <__sfvwrite_r+0x450>
    80fc:	9805883a 	mov	r2,r19
    8100:	003f8606 	br	7f1c <__alt_data_end+0xff007f1c>
    8104:	b00d883a 	mov	r6,r22
    8108:	e00b883a 	mov	r5,fp
    810c:	da000115 	stw	r8,4(sp)
    8110:	00088c00 	call	88c0 <memmove>
    8114:	80800217 	ldw	r2,8(r16)
    8118:	80c00017 	ldw	r3,0(r16)
    811c:	da000117 	ldw	r8,4(sp)
    8120:	1585c83a 	sub	r2,r2,r22
    8124:	1dad883a 	add	r22,r3,r22
    8128:	80800215 	stw	r2,8(r16)
    812c:	85800015 	stw	r22,0(r16)
    8130:	003fbf06 	br	8030 <__alt_data_end+0xff008030>
    8134:	81000017 	ldw	r4,0(r16)
    8138:	9027883a 	mov	r19,r18
    813c:	902f883a 	mov	r23,r18
    8140:	003f6c06 	br	7ef4 <__alt_data_end+0xff007ef4>
    8144:	900d883a 	mov	r6,r18
    8148:	01400284 	movi	r5,10
    814c:	e009883a 	mov	r4,fp
    8150:	00086940 	call	8694 <memchr>
    8154:	10003e26 	beq	r2,zero,8250 <__sfvwrite_r+0x498>
    8158:	10800044 	addi	r2,r2,1
    815c:	1727c83a 	sub	r19,r2,fp
    8160:	02000044 	movi	r8,1
    8164:	003f9d06 	br	7fdc <__alt_data_end+0xff007fdc>
    8168:	80800517 	ldw	r2,20(r16)
    816c:	81400417 	ldw	r5,16(r16)
    8170:	81c00017 	ldw	r7,0(r16)
    8174:	10a7883a 	add	r19,r2,r2
    8178:	9885883a 	add	r2,r19,r2
    817c:	1026d7fa 	srli	r19,r2,31
    8180:	396dc83a 	sub	r22,r7,r5
    8184:	b1000044 	addi	r4,r22,1
    8188:	9885883a 	add	r2,r19,r2
    818c:	1027d07a 	srai	r19,r2,1
    8190:	2485883a 	add	r2,r4,r18
    8194:	980d883a 	mov	r6,r19
    8198:	9880022e 	bgeu	r19,r2,81a4 <__sfvwrite_r+0x3ec>
    819c:	1027883a 	mov	r19,r2
    81a0:	100d883a 	mov	r6,r2
    81a4:	18c1000c 	andi	r3,r3,1024
    81a8:	18001c26 	beq	r3,zero,821c <__sfvwrite_r+0x464>
    81ac:	300b883a 	mov	r5,r6
    81b0:	a809883a 	mov	r4,r21
    81b4:	0002c580 	call	2c58 <_malloc_r>
    81b8:	102f883a 	mov	r23,r2
    81bc:	10002926 	beq	r2,zero,8264 <__sfvwrite_r+0x4ac>
    81c0:	81400417 	ldw	r5,16(r16)
    81c4:	b00d883a 	mov	r6,r22
    81c8:	1009883a 	mov	r4,r2
    81cc:	00087780 	call	8778 <memcpy>
    81d0:	8080030b 	ldhu	r2,12(r16)
    81d4:	00fedfc4 	movi	r3,-1153
    81d8:	10c4703a 	and	r2,r2,r3
    81dc:	10802014 	ori	r2,r2,128
    81e0:	8080030d 	sth	r2,12(r16)
    81e4:	bd89883a 	add	r4,r23,r22
    81e8:	9d8fc83a 	sub	r7,r19,r22
    81ec:	85c00415 	stw	r23,16(r16)
    81f0:	84c00515 	stw	r19,20(r16)
    81f4:	81000015 	stw	r4,0(r16)
    81f8:	9027883a 	mov	r19,r18
    81fc:	81c00215 	stw	r7,8(r16)
    8200:	902f883a 	mov	r23,r18
    8204:	003f3b06 	br	7ef4 <__alt_data_end+0xff007ef4>
    8208:	800b883a 	mov	r5,r16
    820c:	a809883a 	mov	r4,r21
    8210:	00075580 	call	7558 <_fflush_r>
    8214:	103fb926 	beq	r2,zero,80fc <__alt_data_end+0xff0080fc>
    8218:	003f6506 	br	7fb0 <__alt_data_end+0xff007fb0>
    821c:	a809883a 	mov	r4,r21
    8220:	0009b400 	call	9b40 <_realloc_r>
    8224:	102f883a 	mov	r23,r2
    8228:	103fee1e 	bne	r2,zero,81e4 <__alt_data_end+0xff0081e4>
    822c:	81400417 	ldw	r5,16(r16)
    8230:	a809883a 	mov	r4,r21
    8234:	0007aa80 	call	7aa8 <_free_r>
    8238:	8080030b 	ldhu	r2,12(r16)
    823c:	00ffdfc4 	movi	r3,-129
    8240:	1884703a 	and	r2,r3,r2
    8244:	00c00304 	movi	r3,12
    8248:	a8c00015 	stw	r3,0(r21)
    824c:	003f5906 	br	7fb4 <__alt_data_end+0xff007fb4>
    8250:	94c00044 	addi	r19,r18,1
    8254:	02000044 	movi	r8,1
    8258:	003f6006 	br	7fdc <__alt_data_end+0xff007fdc>
    825c:	00bfffc4 	movi	r2,-1
    8260:	003f0306 	br	7e70 <__alt_data_end+0xff007e70>
    8264:	00800304 	movi	r2,12
    8268:	a8800015 	stw	r2,0(r21)
    826c:	8080030b 	ldhu	r2,12(r16)
    8270:	003f5006 	br	7fb4 <__alt_data_end+0xff007fb4>

00008274 <_fwalk>:
    8274:	defff704 	addi	sp,sp,-36
    8278:	dd000415 	stw	r20,16(sp)
    827c:	dfc00815 	stw	ra,32(sp)
    8280:	ddc00715 	stw	r23,28(sp)
    8284:	dd800615 	stw	r22,24(sp)
    8288:	dd400515 	stw	r21,20(sp)
    828c:	dcc00315 	stw	r19,12(sp)
    8290:	dc800215 	stw	r18,8(sp)
    8294:	dc400115 	stw	r17,4(sp)
    8298:	dc000015 	stw	r16,0(sp)
    829c:	2500b804 	addi	r20,r4,736
    82a0:	a0002326 	beq	r20,zero,8330 <_fwalk+0xbc>
    82a4:	282b883a 	mov	r21,r5
    82a8:	002f883a 	mov	r23,zero
    82ac:	05800044 	movi	r22,1
    82b0:	04ffffc4 	movi	r19,-1
    82b4:	a4400117 	ldw	r17,4(r20)
    82b8:	a4800217 	ldw	r18,8(r20)
    82bc:	8c7fffc4 	addi	r17,r17,-1
    82c0:	88000d16 	blt	r17,zero,82f8 <_fwalk+0x84>
    82c4:	94000304 	addi	r16,r18,12
    82c8:	94800384 	addi	r18,r18,14
    82cc:	8080000b 	ldhu	r2,0(r16)
    82d0:	8c7fffc4 	addi	r17,r17,-1
    82d4:	813ffd04 	addi	r4,r16,-12
    82d8:	b080042e 	bgeu	r22,r2,82ec <_fwalk+0x78>
    82dc:	9080000f 	ldh	r2,0(r18)
    82e0:	14c00226 	beq	r2,r19,82ec <_fwalk+0x78>
    82e4:	a83ee83a 	callr	r21
    82e8:	b8aeb03a 	or	r23,r23,r2
    82ec:	84001a04 	addi	r16,r16,104
    82f0:	94801a04 	addi	r18,r18,104
    82f4:	8cfff51e 	bne	r17,r19,82cc <__alt_data_end+0xff0082cc>
    82f8:	a5000017 	ldw	r20,0(r20)
    82fc:	a03fed1e 	bne	r20,zero,82b4 <__alt_data_end+0xff0082b4>
    8300:	b805883a 	mov	r2,r23
    8304:	dfc00817 	ldw	ra,32(sp)
    8308:	ddc00717 	ldw	r23,28(sp)
    830c:	dd800617 	ldw	r22,24(sp)
    8310:	dd400517 	ldw	r21,20(sp)
    8314:	dd000417 	ldw	r20,16(sp)
    8318:	dcc00317 	ldw	r19,12(sp)
    831c:	dc800217 	ldw	r18,8(sp)
    8320:	dc400117 	ldw	r17,4(sp)
    8324:	dc000017 	ldw	r16,0(sp)
    8328:	dec00904 	addi	sp,sp,36
    832c:	f800283a 	ret
    8330:	002f883a 	mov	r23,zero
    8334:	003ff206 	br	8300 <__alt_data_end+0xff008300>

00008338 <_fwalk_reent>:
    8338:	defff704 	addi	sp,sp,-36
    833c:	dd000415 	stw	r20,16(sp)
    8340:	dfc00815 	stw	ra,32(sp)
    8344:	ddc00715 	stw	r23,28(sp)
    8348:	dd800615 	stw	r22,24(sp)
    834c:	dd400515 	stw	r21,20(sp)
    8350:	dcc00315 	stw	r19,12(sp)
    8354:	dc800215 	stw	r18,8(sp)
    8358:	dc400115 	stw	r17,4(sp)
    835c:	dc000015 	stw	r16,0(sp)
    8360:	2500b804 	addi	r20,r4,736
    8364:	a0002326 	beq	r20,zero,83f4 <_fwalk_reent+0xbc>
    8368:	282b883a 	mov	r21,r5
    836c:	2027883a 	mov	r19,r4
    8370:	002f883a 	mov	r23,zero
    8374:	05800044 	movi	r22,1
    8378:	04bfffc4 	movi	r18,-1
    837c:	a4400117 	ldw	r17,4(r20)
    8380:	a4000217 	ldw	r16,8(r20)
    8384:	8c7fffc4 	addi	r17,r17,-1
    8388:	88000c16 	blt	r17,zero,83bc <_fwalk_reent+0x84>
    838c:	84000304 	addi	r16,r16,12
    8390:	8080000b 	ldhu	r2,0(r16)
    8394:	8c7fffc4 	addi	r17,r17,-1
    8398:	817ffd04 	addi	r5,r16,-12
    839c:	b080052e 	bgeu	r22,r2,83b4 <_fwalk_reent+0x7c>
    83a0:	8080008f 	ldh	r2,2(r16)
    83a4:	9809883a 	mov	r4,r19
    83a8:	14800226 	beq	r2,r18,83b4 <_fwalk_reent+0x7c>
    83ac:	a83ee83a 	callr	r21
    83b0:	b8aeb03a 	or	r23,r23,r2
    83b4:	84001a04 	addi	r16,r16,104
    83b8:	8cbff51e 	bne	r17,r18,8390 <__alt_data_end+0xff008390>
    83bc:	a5000017 	ldw	r20,0(r20)
    83c0:	a03fee1e 	bne	r20,zero,837c <__alt_data_end+0xff00837c>
    83c4:	b805883a 	mov	r2,r23
    83c8:	dfc00817 	ldw	ra,32(sp)
    83cc:	ddc00717 	ldw	r23,28(sp)
    83d0:	dd800617 	ldw	r22,24(sp)
    83d4:	dd400517 	ldw	r21,20(sp)
    83d8:	dd000417 	ldw	r20,16(sp)
    83dc:	dcc00317 	ldw	r19,12(sp)
    83e0:	dc800217 	ldw	r18,8(sp)
    83e4:	dc400117 	ldw	r17,4(sp)
    83e8:	dc000017 	ldw	r16,0(sp)
    83ec:	dec00904 	addi	sp,sp,36
    83f0:	f800283a 	ret
    83f4:	002f883a 	mov	r23,zero
    83f8:	003ff206 	br	83c4 <__alt_data_end+0xff0083c4>

000083fc <_setlocale_r>:
    83fc:	30001b26 	beq	r6,zero,846c <_setlocale_r+0x70>
    8400:	01400074 	movhi	r5,1
    8404:	defffe04 	addi	sp,sp,-8
    8408:	2948d404 	addi	r5,r5,9040
    840c:	3009883a 	mov	r4,r6
    8410:	dc000015 	stw	r16,0(sp)
    8414:	dfc00115 	stw	ra,4(sp)
    8418:	3021883a 	mov	r16,r6
    841c:	000a2540 	call	a254 <strcmp>
    8420:	1000061e 	bne	r2,zero,843c <_setlocale_r+0x40>
    8424:	00800074 	movhi	r2,1
    8428:	1088d304 	addi	r2,r2,9036
    842c:	dfc00117 	ldw	ra,4(sp)
    8430:	dc000017 	ldw	r16,0(sp)
    8434:	dec00204 	addi	sp,sp,8
    8438:	f800283a 	ret
    843c:	01400074 	movhi	r5,1
    8440:	2948d304 	addi	r5,r5,9036
    8444:	8009883a 	mov	r4,r16
    8448:	000a2540 	call	a254 <strcmp>
    844c:	103ff526 	beq	r2,zero,8424 <__alt_data_end+0xff008424>
    8450:	01400074 	movhi	r5,1
    8454:	2948be04 	addi	r5,r5,8952
    8458:	8009883a 	mov	r4,r16
    845c:	000a2540 	call	a254 <strcmp>
    8460:	103ff026 	beq	r2,zero,8424 <__alt_data_end+0xff008424>
    8464:	0005883a 	mov	r2,zero
    8468:	003ff006 	br	842c <__alt_data_end+0xff00842c>
    846c:	00800074 	movhi	r2,1
    8470:	1088d304 	addi	r2,r2,9036
    8474:	f800283a 	ret

00008478 <__locale_charset>:
    8478:	00800074 	movhi	r2,1
    847c:	108b8604 	addi	r2,r2,11800
    8480:	f800283a 	ret

00008484 <__locale_mb_cur_max>:
    8484:	00800074 	movhi	r2,1
    8488:	10902404 	addi	r2,r2,16528
    848c:	10800017 	ldw	r2,0(r2)
    8490:	f800283a 	ret

00008494 <__locale_msgcharset>:
    8494:	00800074 	movhi	r2,1
    8498:	108b7e04 	addi	r2,r2,11768
    849c:	f800283a 	ret

000084a0 <__locale_cjk_lang>:
    84a0:	0005883a 	mov	r2,zero
    84a4:	f800283a 	ret

000084a8 <_localeconv_r>:
    84a8:	00800074 	movhi	r2,1
    84ac:	108b8e04 	addi	r2,r2,11832
    84b0:	f800283a 	ret

000084b4 <setlocale>:
    84b4:	00800074 	movhi	r2,1
    84b8:	10902304 	addi	r2,r2,16524
    84bc:	280d883a 	mov	r6,r5
    84c0:	200b883a 	mov	r5,r4
    84c4:	11000017 	ldw	r4,0(r2)
    84c8:	00083fc1 	jmpi	83fc <_setlocale_r>

000084cc <localeconv>:
    84cc:	00800074 	movhi	r2,1
    84d0:	108b8e04 	addi	r2,r2,11832
    84d4:	f800283a 	ret

000084d8 <__smakebuf_r>:
    84d8:	2880030b 	ldhu	r2,12(r5)
    84dc:	10c0008c 	andi	r3,r2,2
    84e0:	1800411e 	bne	r3,zero,85e8 <__smakebuf_r+0x110>
    84e4:	deffec04 	addi	sp,sp,-80
    84e8:	dc000f15 	stw	r16,60(sp)
    84ec:	2821883a 	mov	r16,r5
    84f0:	2940038f 	ldh	r5,14(r5)
    84f4:	dc401015 	stw	r17,64(sp)
    84f8:	dfc01315 	stw	ra,76(sp)
    84fc:	dcc01215 	stw	r19,72(sp)
    8500:	dc801115 	stw	r18,68(sp)
    8504:	2023883a 	mov	r17,r4
    8508:	28001c16 	blt	r5,zero,857c <__smakebuf_r+0xa4>
    850c:	d80d883a 	mov	r6,sp
    8510:	000bdfc0 	call	bdfc <_fstat_r>
    8514:	10001816 	blt	r2,zero,8578 <__smakebuf_r+0xa0>
    8518:	d8800117 	ldw	r2,4(sp)
    851c:	00e00014 	movui	r3,32768
    8520:	10bc000c 	andi	r2,r2,61440
    8524:	14c80020 	cmpeqi	r19,r2,8192
    8528:	10c03726 	beq	r2,r3,8608 <__smakebuf_r+0x130>
    852c:	80c0030b 	ldhu	r3,12(r16)
    8530:	18c20014 	ori	r3,r3,2048
    8534:	80c0030d 	sth	r3,12(r16)
    8538:	00c80004 	movi	r3,8192
    853c:	10c0521e 	bne	r2,r3,8688 <__smakebuf_r+0x1b0>
    8540:	8140038f 	ldh	r5,14(r16)
    8544:	8809883a 	mov	r4,r17
    8548:	000be580 	call	be58 <_isatty_r>
    854c:	10004c26 	beq	r2,zero,8680 <__smakebuf_r+0x1a8>
    8550:	8080030b 	ldhu	r2,12(r16)
    8554:	80c010c4 	addi	r3,r16,67
    8558:	80c00015 	stw	r3,0(r16)
    855c:	10800054 	ori	r2,r2,1
    8560:	8080030d 	sth	r2,12(r16)
    8564:	00800044 	movi	r2,1
    8568:	80c00415 	stw	r3,16(r16)
    856c:	80800515 	stw	r2,20(r16)
    8570:	04810004 	movi	r18,1024
    8574:	00000706 	br	8594 <__smakebuf_r+0xbc>
    8578:	8080030b 	ldhu	r2,12(r16)
    857c:	10c0200c 	andi	r3,r2,128
    8580:	18001f1e 	bne	r3,zero,8600 <__smakebuf_r+0x128>
    8584:	04810004 	movi	r18,1024
    8588:	10820014 	ori	r2,r2,2048
    858c:	8080030d 	sth	r2,12(r16)
    8590:	0027883a 	mov	r19,zero
    8594:	900b883a 	mov	r5,r18
    8598:	8809883a 	mov	r4,r17
    859c:	0002c580 	call	2c58 <_malloc_r>
    85a0:	10002c26 	beq	r2,zero,8654 <__smakebuf_r+0x17c>
    85a4:	80c0030b 	ldhu	r3,12(r16)
    85a8:	01000034 	movhi	r4,0
    85ac:	211d7b04 	addi	r4,r4,30188
    85b0:	89000f15 	stw	r4,60(r17)
    85b4:	18c02014 	ori	r3,r3,128
    85b8:	80c0030d 	sth	r3,12(r16)
    85bc:	80800015 	stw	r2,0(r16)
    85c0:	80800415 	stw	r2,16(r16)
    85c4:	84800515 	stw	r18,20(r16)
    85c8:	98001a1e 	bne	r19,zero,8634 <__smakebuf_r+0x15c>
    85cc:	dfc01317 	ldw	ra,76(sp)
    85d0:	dcc01217 	ldw	r19,72(sp)
    85d4:	dc801117 	ldw	r18,68(sp)
    85d8:	dc401017 	ldw	r17,64(sp)
    85dc:	dc000f17 	ldw	r16,60(sp)
    85e0:	dec01404 	addi	sp,sp,80
    85e4:	f800283a 	ret
    85e8:	288010c4 	addi	r2,r5,67
    85ec:	28800015 	stw	r2,0(r5)
    85f0:	28800415 	stw	r2,16(r5)
    85f4:	00800044 	movi	r2,1
    85f8:	28800515 	stw	r2,20(r5)
    85fc:	f800283a 	ret
    8600:	04801004 	movi	r18,64
    8604:	003fe006 	br	8588 <__alt_data_end+0xff008588>
    8608:	81000a17 	ldw	r4,40(r16)
    860c:	00c00074 	movhi	r3,1
    8610:	18e87c04 	addi	r3,r3,-24080
    8614:	20ffc51e 	bne	r4,r3,852c <__alt_data_end+0xff00852c>
    8618:	8080030b 	ldhu	r2,12(r16)
    861c:	04810004 	movi	r18,1024
    8620:	84801315 	stw	r18,76(r16)
    8624:	1484b03a 	or	r2,r2,r18
    8628:	8080030d 	sth	r2,12(r16)
    862c:	0027883a 	mov	r19,zero
    8630:	003fd806 	br	8594 <__alt_data_end+0xff008594>
    8634:	8140038f 	ldh	r5,14(r16)
    8638:	8809883a 	mov	r4,r17
    863c:	000be580 	call	be58 <_isatty_r>
    8640:	103fe226 	beq	r2,zero,85cc <__alt_data_end+0xff0085cc>
    8644:	8080030b 	ldhu	r2,12(r16)
    8648:	10800054 	ori	r2,r2,1
    864c:	8080030d 	sth	r2,12(r16)
    8650:	003fde06 	br	85cc <__alt_data_end+0xff0085cc>
    8654:	8080030b 	ldhu	r2,12(r16)
    8658:	10c0800c 	andi	r3,r2,512
    865c:	183fdb1e 	bne	r3,zero,85cc <__alt_data_end+0xff0085cc>
    8660:	10800094 	ori	r2,r2,2
    8664:	80c010c4 	addi	r3,r16,67
    8668:	8080030d 	sth	r2,12(r16)
    866c:	00800044 	movi	r2,1
    8670:	80c00015 	stw	r3,0(r16)
    8674:	80c00415 	stw	r3,16(r16)
    8678:	80800515 	stw	r2,20(r16)
    867c:	003fd306 	br	85cc <__alt_data_end+0xff0085cc>
    8680:	04810004 	movi	r18,1024
    8684:	003fc306 	br	8594 <__alt_data_end+0xff008594>
    8688:	0027883a 	mov	r19,zero
    868c:	04810004 	movi	r18,1024
    8690:	003fc006 	br	8594 <__alt_data_end+0xff008594>

00008694 <memchr>:
    8694:	208000cc 	andi	r2,r4,3
    8698:	280f883a 	mov	r7,r5
    869c:	10003426 	beq	r2,zero,8770 <memchr+0xdc>
    86a0:	30bfffc4 	addi	r2,r6,-1
    86a4:	30001a26 	beq	r6,zero,8710 <memchr+0x7c>
    86a8:	20c00003 	ldbu	r3,0(r4)
    86ac:	29803fcc 	andi	r6,r5,255
    86b0:	30c0051e 	bne	r6,r3,86c8 <memchr+0x34>
    86b4:	00001806 	br	8718 <memchr+0x84>
    86b8:	10001526 	beq	r2,zero,8710 <memchr+0x7c>
    86bc:	20c00003 	ldbu	r3,0(r4)
    86c0:	10bfffc4 	addi	r2,r2,-1
    86c4:	30c01426 	beq	r6,r3,8718 <memchr+0x84>
    86c8:	21000044 	addi	r4,r4,1
    86cc:	20c000cc 	andi	r3,r4,3
    86d0:	183ff91e 	bne	r3,zero,86b8 <__alt_data_end+0xff0086b8>
    86d4:	020000c4 	movi	r8,3
    86d8:	40801136 	bltu	r8,r2,8720 <memchr+0x8c>
    86dc:	10000c26 	beq	r2,zero,8710 <memchr+0x7c>
    86e0:	20c00003 	ldbu	r3,0(r4)
    86e4:	29403fcc 	andi	r5,r5,255
    86e8:	28c00b26 	beq	r5,r3,8718 <memchr+0x84>
    86ec:	20c00044 	addi	r3,r4,1
    86f0:	39803fcc 	andi	r6,r7,255
    86f4:	2089883a 	add	r4,r4,r2
    86f8:	00000306 	br	8708 <memchr+0x74>
    86fc:	18c00044 	addi	r3,r3,1
    8700:	197fffc3 	ldbu	r5,-1(r3)
    8704:	31400526 	beq	r6,r5,871c <memchr+0x88>
    8708:	1805883a 	mov	r2,r3
    870c:	20fffb1e 	bne	r4,r3,86fc <__alt_data_end+0xff0086fc>
    8710:	0005883a 	mov	r2,zero
    8714:	f800283a 	ret
    8718:	2005883a 	mov	r2,r4
    871c:	f800283a 	ret
    8720:	28c03fcc 	andi	r3,r5,255
    8724:	1812923a 	slli	r9,r3,8
    8728:	02ffbff4 	movhi	r11,65279
    872c:	02a02074 	movhi	r10,32897
    8730:	48d2b03a 	or	r9,r9,r3
    8734:	4806943a 	slli	r3,r9,16
    8738:	5affbfc4 	addi	r11,r11,-257
    873c:	52a02004 	addi	r10,r10,-32640
    8740:	48d2b03a 	or	r9,r9,r3
    8744:	20c00017 	ldw	r3,0(r4)
    8748:	48c6f03a 	xor	r3,r9,r3
    874c:	1acd883a 	add	r6,r3,r11
    8750:	00c6303a 	nor	r3,zero,r3
    8754:	30c6703a 	and	r3,r6,r3
    8758:	1a86703a 	and	r3,r3,r10
    875c:	183fe01e 	bne	r3,zero,86e0 <__alt_data_end+0xff0086e0>
    8760:	10bfff04 	addi	r2,r2,-4
    8764:	21000104 	addi	r4,r4,4
    8768:	40bff636 	bltu	r8,r2,8744 <__alt_data_end+0xff008744>
    876c:	003fdb06 	br	86dc <__alt_data_end+0xff0086dc>
    8770:	3005883a 	mov	r2,r6
    8774:	003fd706 	br	86d4 <__alt_data_end+0xff0086d4>

00008778 <memcpy>:
    8778:	defffd04 	addi	sp,sp,-12
    877c:	dfc00215 	stw	ra,8(sp)
    8780:	dc400115 	stw	r17,4(sp)
    8784:	dc000015 	stw	r16,0(sp)
    8788:	00c003c4 	movi	r3,15
    878c:	2005883a 	mov	r2,r4
    8790:	1980452e 	bgeu	r3,r6,88a8 <memcpy+0x130>
    8794:	2906b03a 	or	r3,r5,r4
    8798:	18c000cc 	andi	r3,r3,3
    879c:	1800441e 	bne	r3,zero,88b0 <memcpy+0x138>
    87a0:	347ffc04 	addi	r17,r6,-16
    87a4:	8822d13a 	srli	r17,r17,4
    87a8:	28c00104 	addi	r3,r5,4
    87ac:	23400104 	addi	r13,r4,4
    87b0:	8820913a 	slli	r16,r17,4
    87b4:	2b000204 	addi	r12,r5,8
    87b8:	22c00204 	addi	r11,r4,8
    87bc:	84000504 	addi	r16,r16,20
    87c0:	2a800304 	addi	r10,r5,12
    87c4:	22400304 	addi	r9,r4,12
    87c8:	2c21883a 	add	r16,r5,r16
    87cc:	2811883a 	mov	r8,r5
    87d0:	200f883a 	mov	r7,r4
    87d4:	41000017 	ldw	r4,0(r8)
    87d8:	1fc00017 	ldw	ra,0(r3)
    87dc:	63c00017 	ldw	r15,0(r12)
    87e0:	39000015 	stw	r4,0(r7)
    87e4:	53800017 	ldw	r14,0(r10)
    87e8:	6fc00015 	stw	ra,0(r13)
    87ec:	5bc00015 	stw	r15,0(r11)
    87f0:	4b800015 	stw	r14,0(r9)
    87f4:	18c00404 	addi	r3,r3,16
    87f8:	39c00404 	addi	r7,r7,16
    87fc:	42000404 	addi	r8,r8,16
    8800:	6b400404 	addi	r13,r13,16
    8804:	63000404 	addi	r12,r12,16
    8808:	5ac00404 	addi	r11,r11,16
    880c:	52800404 	addi	r10,r10,16
    8810:	4a400404 	addi	r9,r9,16
    8814:	1c3fef1e 	bne	r3,r16,87d4 <__alt_data_end+0xff0087d4>
    8818:	89c00044 	addi	r7,r17,1
    881c:	380e913a 	slli	r7,r7,4
    8820:	310003cc 	andi	r4,r6,15
    8824:	02c000c4 	movi	r11,3
    8828:	11c7883a 	add	r3,r2,r7
    882c:	29cb883a 	add	r5,r5,r7
    8830:	5900212e 	bgeu	r11,r4,88b8 <memcpy+0x140>
    8834:	1813883a 	mov	r9,r3
    8838:	2811883a 	mov	r8,r5
    883c:	200f883a 	mov	r7,r4
    8840:	42800017 	ldw	r10,0(r8)
    8844:	4a400104 	addi	r9,r9,4
    8848:	39ffff04 	addi	r7,r7,-4
    884c:	4abfff15 	stw	r10,-4(r9)
    8850:	42000104 	addi	r8,r8,4
    8854:	59fffa36 	bltu	r11,r7,8840 <__alt_data_end+0xff008840>
    8858:	213fff04 	addi	r4,r4,-4
    885c:	2008d0ba 	srli	r4,r4,2
    8860:	318000cc 	andi	r6,r6,3
    8864:	21000044 	addi	r4,r4,1
    8868:	2109883a 	add	r4,r4,r4
    886c:	2109883a 	add	r4,r4,r4
    8870:	1907883a 	add	r3,r3,r4
    8874:	290b883a 	add	r5,r5,r4
    8878:	30000626 	beq	r6,zero,8894 <memcpy+0x11c>
    887c:	198d883a 	add	r6,r3,r6
    8880:	29c00003 	ldbu	r7,0(r5)
    8884:	18c00044 	addi	r3,r3,1
    8888:	29400044 	addi	r5,r5,1
    888c:	19ffffc5 	stb	r7,-1(r3)
    8890:	19bffb1e 	bne	r3,r6,8880 <__alt_data_end+0xff008880>
    8894:	dfc00217 	ldw	ra,8(sp)
    8898:	dc400117 	ldw	r17,4(sp)
    889c:	dc000017 	ldw	r16,0(sp)
    88a0:	dec00304 	addi	sp,sp,12
    88a4:	f800283a 	ret
    88a8:	2007883a 	mov	r3,r4
    88ac:	003ff206 	br	8878 <__alt_data_end+0xff008878>
    88b0:	2007883a 	mov	r3,r4
    88b4:	003ff106 	br	887c <__alt_data_end+0xff00887c>
    88b8:	200d883a 	mov	r6,r4
    88bc:	003fee06 	br	8878 <__alt_data_end+0xff008878>

000088c0 <memmove>:
    88c0:	2005883a 	mov	r2,r4
    88c4:	29000b2e 	bgeu	r5,r4,88f4 <memmove+0x34>
    88c8:	298f883a 	add	r7,r5,r6
    88cc:	21c0092e 	bgeu	r4,r7,88f4 <memmove+0x34>
    88d0:	2187883a 	add	r3,r4,r6
    88d4:	198bc83a 	sub	r5,r3,r6
    88d8:	30004826 	beq	r6,zero,89fc <memmove+0x13c>
    88dc:	39ffffc4 	addi	r7,r7,-1
    88e0:	39000003 	ldbu	r4,0(r7)
    88e4:	18ffffc4 	addi	r3,r3,-1
    88e8:	19000005 	stb	r4,0(r3)
    88ec:	28fffb1e 	bne	r5,r3,88dc <__alt_data_end+0xff0088dc>
    88f0:	f800283a 	ret
    88f4:	00c003c4 	movi	r3,15
    88f8:	1980412e 	bgeu	r3,r6,8a00 <memmove+0x140>
    88fc:	2886b03a 	or	r3,r5,r2
    8900:	18c000cc 	andi	r3,r3,3
    8904:	1800401e 	bne	r3,zero,8a08 <memmove+0x148>
    8908:	33fffc04 	addi	r15,r6,-16
    890c:	781ed13a 	srli	r15,r15,4
    8910:	28c00104 	addi	r3,r5,4
    8914:	13400104 	addi	r13,r2,4
    8918:	781c913a 	slli	r14,r15,4
    891c:	2b000204 	addi	r12,r5,8
    8920:	12c00204 	addi	r11,r2,8
    8924:	73800504 	addi	r14,r14,20
    8928:	2a800304 	addi	r10,r5,12
    892c:	12400304 	addi	r9,r2,12
    8930:	2b9d883a 	add	r14,r5,r14
    8934:	2811883a 	mov	r8,r5
    8938:	100f883a 	mov	r7,r2
    893c:	41000017 	ldw	r4,0(r8)
    8940:	39c00404 	addi	r7,r7,16
    8944:	18c00404 	addi	r3,r3,16
    8948:	393ffc15 	stw	r4,-16(r7)
    894c:	193ffc17 	ldw	r4,-16(r3)
    8950:	6b400404 	addi	r13,r13,16
    8954:	5ac00404 	addi	r11,r11,16
    8958:	693ffc15 	stw	r4,-16(r13)
    895c:	61000017 	ldw	r4,0(r12)
    8960:	4a400404 	addi	r9,r9,16
    8964:	42000404 	addi	r8,r8,16
    8968:	593ffc15 	stw	r4,-16(r11)
    896c:	51000017 	ldw	r4,0(r10)
    8970:	63000404 	addi	r12,r12,16
    8974:	52800404 	addi	r10,r10,16
    8978:	493ffc15 	stw	r4,-16(r9)
    897c:	1bbfef1e 	bne	r3,r14,893c <__alt_data_end+0xff00893c>
    8980:	79000044 	addi	r4,r15,1
    8984:	2008913a 	slli	r4,r4,4
    8988:	328003cc 	andi	r10,r6,15
    898c:	02c000c4 	movi	r11,3
    8990:	1107883a 	add	r3,r2,r4
    8994:	290b883a 	add	r5,r5,r4
    8998:	5a801e2e 	bgeu	r11,r10,8a14 <memmove+0x154>
    899c:	1813883a 	mov	r9,r3
    89a0:	2811883a 	mov	r8,r5
    89a4:	500f883a 	mov	r7,r10
    89a8:	41000017 	ldw	r4,0(r8)
    89ac:	4a400104 	addi	r9,r9,4
    89b0:	39ffff04 	addi	r7,r7,-4
    89b4:	493fff15 	stw	r4,-4(r9)
    89b8:	42000104 	addi	r8,r8,4
    89bc:	59fffa36 	bltu	r11,r7,89a8 <__alt_data_end+0xff0089a8>
    89c0:	513fff04 	addi	r4,r10,-4
    89c4:	2008d0ba 	srli	r4,r4,2
    89c8:	318000cc 	andi	r6,r6,3
    89cc:	21000044 	addi	r4,r4,1
    89d0:	2109883a 	add	r4,r4,r4
    89d4:	2109883a 	add	r4,r4,r4
    89d8:	1907883a 	add	r3,r3,r4
    89dc:	290b883a 	add	r5,r5,r4
    89e0:	30000b26 	beq	r6,zero,8a10 <memmove+0x150>
    89e4:	198d883a 	add	r6,r3,r6
    89e8:	29c00003 	ldbu	r7,0(r5)
    89ec:	18c00044 	addi	r3,r3,1
    89f0:	29400044 	addi	r5,r5,1
    89f4:	19ffffc5 	stb	r7,-1(r3)
    89f8:	19bffb1e 	bne	r3,r6,89e8 <__alt_data_end+0xff0089e8>
    89fc:	f800283a 	ret
    8a00:	1007883a 	mov	r3,r2
    8a04:	003ff606 	br	89e0 <__alt_data_end+0xff0089e0>
    8a08:	1007883a 	mov	r3,r2
    8a0c:	003ff506 	br	89e4 <__alt_data_end+0xff0089e4>
    8a10:	f800283a 	ret
    8a14:	500d883a 	mov	r6,r10
    8a18:	003ff106 	br	89e0 <__alt_data_end+0xff0089e0>

00008a1c <memset>:
    8a1c:	20c000cc 	andi	r3,r4,3
    8a20:	2005883a 	mov	r2,r4
    8a24:	18004426 	beq	r3,zero,8b38 <memset+0x11c>
    8a28:	31ffffc4 	addi	r7,r6,-1
    8a2c:	30004026 	beq	r6,zero,8b30 <memset+0x114>
    8a30:	2813883a 	mov	r9,r5
    8a34:	200d883a 	mov	r6,r4
    8a38:	2007883a 	mov	r3,r4
    8a3c:	00000406 	br	8a50 <memset+0x34>
    8a40:	3a3fffc4 	addi	r8,r7,-1
    8a44:	31800044 	addi	r6,r6,1
    8a48:	38003926 	beq	r7,zero,8b30 <memset+0x114>
    8a4c:	400f883a 	mov	r7,r8
    8a50:	18c00044 	addi	r3,r3,1
    8a54:	32400005 	stb	r9,0(r6)
    8a58:	1a0000cc 	andi	r8,r3,3
    8a5c:	403ff81e 	bne	r8,zero,8a40 <__alt_data_end+0xff008a40>
    8a60:	010000c4 	movi	r4,3
    8a64:	21c02d2e 	bgeu	r4,r7,8b1c <memset+0x100>
    8a68:	29003fcc 	andi	r4,r5,255
    8a6c:	200c923a 	slli	r6,r4,8
    8a70:	3108b03a 	or	r4,r6,r4
    8a74:	200c943a 	slli	r6,r4,16
    8a78:	218cb03a 	or	r6,r4,r6
    8a7c:	010003c4 	movi	r4,15
    8a80:	21c0182e 	bgeu	r4,r7,8ae4 <memset+0xc8>
    8a84:	3b3ffc04 	addi	r12,r7,-16
    8a88:	6018d13a 	srli	r12,r12,4
    8a8c:	1a000104 	addi	r8,r3,4
    8a90:	1ac00204 	addi	r11,r3,8
    8a94:	6008913a 	slli	r4,r12,4
    8a98:	1a800304 	addi	r10,r3,12
    8a9c:	1813883a 	mov	r9,r3
    8aa0:	21000504 	addi	r4,r4,20
    8aa4:	1909883a 	add	r4,r3,r4
    8aa8:	49800015 	stw	r6,0(r9)
    8aac:	41800015 	stw	r6,0(r8)
    8ab0:	59800015 	stw	r6,0(r11)
    8ab4:	51800015 	stw	r6,0(r10)
    8ab8:	42000404 	addi	r8,r8,16
    8abc:	4a400404 	addi	r9,r9,16
    8ac0:	5ac00404 	addi	r11,r11,16
    8ac4:	52800404 	addi	r10,r10,16
    8ac8:	413ff71e 	bne	r8,r4,8aa8 <__alt_data_end+0xff008aa8>
    8acc:	63000044 	addi	r12,r12,1
    8ad0:	6018913a 	slli	r12,r12,4
    8ad4:	39c003cc 	andi	r7,r7,15
    8ad8:	010000c4 	movi	r4,3
    8adc:	1b07883a 	add	r3,r3,r12
    8ae0:	21c00e2e 	bgeu	r4,r7,8b1c <memset+0x100>
    8ae4:	1813883a 	mov	r9,r3
    8ae8:	3811883a 	mov	r8,r7
    8aec:	010000c4 	movi	r4,3
    8af0:	49800015 	stw	r6,0(r9)
    8af4:	423fff04 	addi	r8,r8,-4
    8af8:	4a400104 	addi	r9,r9,4
    8afc:	223ffc36 	bltu	r4,r8,8af0 <__alt_data_end+0xff008af0>
    8b00:	393fff04 	addi	r4,r7,-4
    8b04:	2008d0ba 	srli	r4,r4,2
    8b08:	39c000cc 	andi	r7,r7,3
    8b0c:	21000044 	addi	r4,r4,1
    8b10:	2109883a 	add	r4,r4,r4
    8b14:	2109883a 	add	r4,r4,r4
    8b18:	1907883a 	add	r3,r3,r4
    8b1c:	38000526 	beq	r7,zero,8b34 <memset+0x118>
    8b20:	19cf883a 	add	r7,r3,r7
    8b24:	19400005 	stb	r5,0(r3)
    8b28:	18c00044 	addi	r3,r3,1
    8b2c:	38fffd1e 	bne	r7,r3,8b24 <__alt_data_end+0xff008b24>
    8b30:	f800283a 	ret
    8b34:	f800283a 	ret
    8b38:	2007883a 	mov	r3,r4
    8b3c:	300f883a 	mov	r7,r6
    8b40:	003fc706 	br	8a60 <__alt_data_end+0xff008a60>

00008b44 <_Balloc>:
    8b44:	20801317 	ldw	r2,76(r4)
    8b48:	defffc04 	addi	sp,sp,-16
    8b4c:	dc400115 	stw	r17,4(sp)
    8b50:	dc000015 	stw	r16,0(sp)
    8b54:	dfc00315 	stw	ra,12(sp)
    8b58:	dc800215 	stw	r18,8(sp)
    8b5c:	2023883a 	mov	r17,r4
    8b60:	2821883a 	mov	r16,r5
    8b64:	10000f26 	beq	r2,zero,8ba4 <_Balloc+0x60>
    8b68:	8407883a 	add	r3,r16,r16
    8b6c:	18c7883a 	add	r3,r3,r3
    8b70:	10c7883a 	add	r3,r2,r3
    8b74:	18800017 	ldw	r2,0(r3)
    8b78:	10001126 	beq	r2,zero,8bc0 <_Balloc+0x7c>
    8b7c:	11000017 	ldw	r4,0(r2)
    8b80:	19000015 	stw	r4,0(r3)
    8b84:	10000415 	stw	zero,16(r2)
    8b88:	10000315 	stw	zero,12(r2)
    8b8c:	dfc00317 	ldw	ra,12(sp)
    8b90:	dc800217 	ldw	r18,8(sp)
    8b94:	dc400117 	ldw	r17,4(sp)
    8b98:	dc000017 	ldw	r16,0(sp)
    8b9c:	dec00404 	addi	sp,sp,16
    8ba0:	f800283a 	ret
    8ba4:	01800844 	movi	r6,33
    8ba8:	01400104 	movi	r5,4
    8bac:	000ba2c0 	call	ba2c <_calloc_r>
    8bb0:	88801315 	stw	r2,76(r17)
    8bb4:	103fec1e 	bne	r2,zero,8b68 <__alt_data_end+0xff008b68>
    8bb8:	0005883a 	mov	r2,zero
    8bbc:	003ff306 	br	8b8c <__alt_data_end+0xff008b8c>
    8bc0:	01400044 	movi	r5,1
    8bc4:	2c24983a 	sll	r18,r5,r16
    8bc8:	8809883a 	mov	r4,r17
    8bcc:	91800144 	addi	r6,r18,5
    8bd0:	318d883a 	add	r6,r6,r6
    8bd4:	318d883a 	add	r6,r6,r6
    8bd8:	000ba2c0 	call	ba2c <_calloc_r>
    8bdc:	103ff626 	beq	r2,zero,8bb8 <__alt_data_end+0xff008bb8>
    8be0:	14000115 	stw	r16,4(r2)
    8be4:	14800215 	stw	r18,8(r2)
    8be8:	003fe606 	br	8b84 <__alt_data_end+0xff008b84>

00008bec <_Bfree>:
    8bec:	28000826 	beq	r5,zero,8c10 <_Bfree+0x24>
    8bf0:	28c00117 	ldw	r3,4(r5)
    8bf4:	20801317 	ldw	r2,76(r4)
    8bf8:	18c7883a 	add	r3,r3,r3
    8bfc:	18c7883a 	add	r3,r3,r3
    8c00:	10c5883a 	add	r2,r2,r3
    8c04:	10c00017 	ldw	r3,0(r2)
    8c08:	28c00015 	stw	r3,0(r5)
    8c0c:	11400015 	stw	r5,0(r2)
    8c10:	f800283a 	ret

00008c14 <__multadd>:
    8c14:	defffa04 	addi	sp,sp,-24
    8c18:	dc800315 	stw	r18,12(sp)
    8c1c:	dc400215 	stw	r17,8(sp)
    8c20:	dc000115 	stw	r16,4(sp)
    8c24:	2823883a 	mov	r17,r5
    8c28:	2c000417 	ldw	r16,16(r5)
    8c2c:	dfc00515 	stw	ra,20(sp)
    8c30:	dcc00415 	stw	r19,16(sp)
    8c34:	2025883a 	mov	r18,r4
    8c38:	29400504 	addi	r5,r5,20
    8c3c:	0011883a 	mov	r8,zero
    8c40:	28c00017 	ldw	r3,0(r5)
    8c44:	29400104 	addi	r5,r5,4
    8c48:	42000044 	addi	r8,r8,1
    8c4c:	18bfffcc 	andi	r2,r3,65535
    8c50:	1185383a 	mul	r2,r2,r6
    8c54:	1806d43a 	srli	r3,r3,16
    8c58:	11cf883a 	add	r7,r2,r7
    8c5c:	3808d43a 	srli	r4,r7,16
    8c60:	1987383a 	mul	r3,r3,r6
    8c64:	38bfffcc 	andi	r2,r7,65535
    8c68:	1907883a 	add	r3,r3,r4
    8c6c:	1808943a 	slli	r4,r3,16
    8c70:	180ed43a 	srli	r7,r3,16
    8c74:	2085883a 	add	r2,r4,r2
    8c78:	28bfff15 	stw	r2,-4(r5)
    8c7c:	443ff016 	blt	r8,r16,8c40 <__alt_data_end+0xff008c40>
    8c80:	38000926 	beq	r7,zero,8ca8 <__multadd+0x94>
    8c84:	88800217 	ldw	r2,8(r17)
    8c88:	80800f0e 	bge	r16,r2,8cc8 <__multadd+0xb4>
    8c8c:	80800144 	addi	r2,r16,5
    8c90:	1085883a 	add	r2,r2,r2
    8c94:	1085883a 	add	r2,r2,r2
    8c98:	8885883a 	add	r2,r17,r2
    8c9c:	11c00015 	stw	r7,0(r2)
    8ca0:	84000044 	addi	r16,r16,1
    8ca4:	8c000415 	stw	r16,16(r17)
    8ca8:	8805883a 	mov	r2,r17
    8cac:	dfc00517 	ldw	ra,20(sp)
    8cb0:	dcc00417 	ldw	r19,16(sp)
    8cb4:	dc800317 	ldw	r18,12(sp)
    8cb8:	dc400217 	ldw	r17,8(sp)
    8cbc:	dc000117 	ldw	r16,4(sp)
    8cc0:	dec00604 	addi	sp,sp,24
    8cc4:	f800283a 	ret
    8cc8:	89400117 	ldw	r5,4(r17)
    8ccc:	9009883a 	mov	r4,r18
    8cd0:	d9c00015 	stw	r7,0(sp)
    8cd4:	29400044 	addi	r5,r5,1
    8cd8:	0008b440 	call	8b44 <_Balloc>
    8cdc:	89800417 	ldw	r6,16(r17)
    8ce0:	89400304 	addi	r5,r17,12
    8ce4:	11000304 	addi	r4,r2,12
    8ce8:	31800084 	addi	r6,r6,2
    8cec:	318d883a 	add	r6,r6,r6
    8cf0:	318d883a 	add	r6,r6,r6
    8cf4:	1027883a 	mov	r19,r2
    8cf8:	00087780 	call	8778 <memcpy>
    8cfc:	d9c00017 	ldw	r7,0(sp)
    8d00:	88000a26 	beq	r17,zero,8d2c <__multadd+0x118>
    8d04:	88c00117 	ldw	r3,4(r17)
    8d08:	90801317 	ldw	r2,76(r18)
    8d0c:	18c7883a 	add	r3,r3,r3
    8d10:	18c7883a 	add	r3,r3,r3
    8d14:	10c5883a 	add	r2,r2,r3
    8d18:	10c00017 	ldw	r3,0(r2)
    8d1c:	88c00015 	stw	r3,0(r17)
    8d20:	14400015 	stw	r17,0(r2)
    8d24:	9823883a 	mov	r17,r19
    8d28:	003fd806 	br	8c8c <__alt_data_end+0xff008c8c>
    8d2c:	9823883a 	mov	r17,r19
    8d30:	003fd606 	br	8c8c <__alt_data_end+0xff008c8c>

00008d34 <__s2b>:
    8d34:	defff904 	addi	sp,sp,-28
    8d38:	dc400115 	stw	r17,4(sp)
    8d3c:	dc000015 	stw	r16,0(sp)
    8d40:	2023883a 	mov	r17,r4
    8d44:	2821883a 	mov	r16,r5
    8d48:	39000204 	addi	r4,r7,8
    8d4c:	01400244 	movi	r5,9
    8d50:	dcc00315 	stw	r19,12(sp)
    8d54:	dc800215 	stw	r18,8(sp)
    8d58:	dfc00615 	stw	ra,24(sp)
    8d5c:	dd400515 	stw	r21,20(sp)
    8d60:	dd000415 	stw	r20,16(sp)
    8d64:	3825883a 	mov	r18,r7
    8d68:	3027883a 	mov	r19,r6
    8d6c:	0002a7c0 	call	2a7c <__divsi3>
    8d70:	00c00044 	movi	r3,1
    8d74:	000b883a 	mov	r5,zero
    8d78:	1880030e 	bge	r3,r2,8d88 <__s2b+0x54>
    8d7c:	18c7883a 	add	r3,r3,r3
    8d80:	29400044 	addi	r5,r5,1
    8d84:	18bffd16 	blt	r3,r2,8d7c <__alt_data_end+0xff008d7c>
    8d88:	8809883a 	mov	r4,r17
    8d8c:	0008b440 	call	8b44 <_Balloc>
    8d90:	d8c00717 	ldw	r3,28(sp)
    8d94:	10c00515 	stw	r3,20(r2)
    8d98:	00c00044 	movi	r3,1
    8d9c:	10c00415 	stw	r3,16(r2)
    8da0:	00c00244 	movi	r3,9
    8da4:	1cc0210e 	bge	r3,r19,8e2c <__s2b+0xf8>
    8da8:	80eb883a 	add	r21,r16,r3
    8dac:	a829883a 	mov	r20,r21
    8db0:	84e1883a 	add	r16,r16,r19
    8db4:	a1c00007 	ldb	r7,0(r20)
    8db8:	01800284 	movi	r6,10
    8dbc:	a5000044 	addi	r20,r20,1
    8dc0:	100b883a 	mov	r5,r2
    8dc4:	39fff404 	addi	r7,r7,-48
    8dc8:	8809883a 	mov	r4,r17
    8dcc:	0008c140 	call	8c14 <__multadd>
    8dd0:	a43ff81e 	bne	r20,r16,8db4 <__alt_data_end+0xff008db4>
    8dd4:	ace1883a 	add	r16,r21,r19
    8dd8:	843ffe04 	addi	r16,r16,-8
    8ddc:	9c800a0e 	bge	r19,r18,8e08 <__s2b+0xd4>
    8de0:	94e5c83a 	sub	r18,r18,r19
    8de4:	84a5883a 	add	r18,r16,r18
    8de8:	81c00007 	ldb	r7,0(r16)
    8dec:	01800284 	movi	r6,10
    8df0:	84000044 	addi	r16,r16,1
    8df4:	100b883a 	mov	r5,r2
    8df8:	39fff404 	addi	r7,r7,-48
    8dfc:	8809883a 	mov	r4,r17
    8e00:	0008c140 	call	8c14 <__multadd>
    8e04:	84bff81e 	bne	r16,r18,8de8 <__alt_data_end+0xff008de8>
    8e08:	dfc00617 	ldw	ra,24(sp)
    8e0c:	dd400517 	ldw	r21,20(sp)
    8e10:	dd000417 	ldw	r20,16(sp)
    8e14:	dcc00317 	ldw	r19,12(sp)
    8e18:	dc800217 	ldw	r18,8(sp)
    8e1c:	dc400117 	ldw	r17,4(sp)
    8e20:	dc000017 	ldw	r16,0(sp)
    8e24:	dec00704 	addi	sp,sp,28
    8e28:	f800283a 	ret
    8e2c:	84000284 	addi	r16,r16,10
    8e30:	1827883a 	mov	r19,r3
    8e34:	003fe906 	br	8ddc <__alt_data_end+0xff008ddc>

00008e38 <__hi0bits>:
    8e38:	20bfffec 	andhi	r2,r4,65535
    8e3c:	1000141e 	bne	r2,zero,8e90 <__hi0bits+0x58>
    8e40:	2008943a 	slli	r4,r4,16
    8e44:	00800404 	movi	r2,16
    8e48:	20ffc02c 	andhi	r3,r4,65280
    8e4c:	1800021e 	bne	r3,zero,8e58 <__hi0bits+0x20>
    8e50:	2008923a 	slli	r4,r4,8
    8e54:	10800204 	addi	r2,r2,8
    8e58:	20fc002c 	andhi	r3,r4,61440
    8e5c:	1800021e 	bne	r3,zero,8e68 <__hi0bits+0x30>
    8e60:	2008913a 	slli	r4,r4,4
    8e64:	10800104 	addi	r2,r2,4
    8e68:	20f0002c 	andhi	r3,r4,49152
    8e6c:	1800031e 	bne	r3,zero,8e7c <__hi0bits+0x44>
    8e70:	2109883a 	add	r4,r4,r4
    8e74:	10800084 	addi	r2,r2,2
    8e78:	2109883a 	add	r4,r4,r4
    8e7c:	20000316 	blt	r4,zero,8e8c <__hi0bits+0x54>
    8e80:	2110002c 	andhi	r4,r4,16384
    8e84:	2000041e 	bne	r4,zero,8e98 <__hi0bits+0x60>
    8e88:	00800804 	movi	r2,32
    8e8c:	f800283a 	ret
    8e90:	0005883a 	mov	r2,zero
    8e94:	003fec06 	br	8e48 <__alt_data_end+0xff008e48>
    8e98:	10800044 	addi	r2,r2,1
    8e9c:	f800283a 	ret

00008ea0 <__lo0bits>:
    8ea0:	20c00017 	ldw	r3,0(r4)
    8ea4:	188001cc 	andi	r2,r3,7
    8ea8:	10000826 	beq	r2,zero,8ecc <__lo0bits+0x2c>
    8eac:	1880004c 	andi	r2,r3,1
    8eb0:	1000211e 	bne	r2,zero,8f38 <__lo0bits+0x98>
    8eb4:	1880008c 	andi	r2,r3,2
    8eb8:	1000211e 	bne	r2,zero,8f40 <__lo0bits+0xa0>
    8ebc:	1806d0ba 	srli	r3,r3,2
    8ec0:	00800084 	movi	r2,2
    8ec4:	20c00015 	stw	r3,0(r4)
    8ec8:	f800283a 	ret
    8ecc:	18bfffcc 	andi	r2,r3,65535
    8ed0:	10001326 	beq	r2,zero,8f20 <__lo0bits+0x80>
    8ed4:	0005883a 	mov	r2,zero
    8ed8:	19403fcc 	andi	r5,r3,255
    8edc:	2800021e 	bne	r5,zero,8ee8 <__lo0bits+0x48>
    8ee0:	1806d23a 	srli	r3,r3,8
    8ee4:	10800204 	addi	r2,r2,8
    8ee8:	194003cc 	andi	r5,r3,15
    8eec:	2800021e 	bne	r5,zero,8ef8 <__lo0bits+0x58>
    8ef0:	1806d13a 	srli	r3,r3,4
    8ef4:	10800104 	addi	r2,r2,4
    8ef8:	194000cc 	andi	r5,r3,3
    8efc:	2800021e 	bne	r5,zero,8f08 <__lo0bits+0x68>
    8f00:	1806d0ba 	srli	r3,r3,2
    8f04:	10800084 	addi	r2,r2,2
    8f08:	1940004c 	andi	r5,r3,1
    8f0c:	2800081e 	bne	r5,zero,8f30 <__lo0bits+0x90>
    8f10:	1806d07a 	srli	r3,r3,1
    8f14:	1800051e 	bne	r3,zero,8f2c <__lo0bits+0x8c>
    8f18:	00800804 	movi	r2,32
    8f1c:	f800283a 	ret
    8f20:	1806d43a 	srli	r3,r3,16
    8f24:	00800404 	movi	r2,16
    8f28:	003feb06 	br	8ed8 <__alt_data_end+0xff008ed8>
    8f2c:	10800044 	addi	r2,r2,1
    8f30:	20c00015 	stw	r3,0(r4)
    8f34:	f800283a 	ret
    8f38:	0005883a 	mov	r2,zero
    8f3c:	f800283a 	ret
    8f40:	1806d07a 	srli	r3,r3,1
    8f44:	00800044 	movi	r2,1
    8f48:	20c00015 	stw	r3,0(r4)
    8f4c:	f800283a 	ret

00008f50 <__i2b>:
    8f50:	defffd04 	addi	sp,sp,-12
    8f54:	dc000015 	stw	r16,0(sp)
    8f58:	04000044 	movi	r16,1
    8f5c:	dc400115 	stw	r17,4(sp)
    8f60:	2823883a 	mov	r17,r5
    8f64:	800b883a 	mov	r5,r16
    8f68:	dfc00215 	stw	ra,8(sp)
    8f6c:	0008b440 	call	8b44 <_Balloc>
    8f70:	14400515 	stw	r17,20(r2)
    8f74:	14000415 	stw	r16,16(r2)
    8f78:	dfc00217 	ldw	ra,8(sp)
    8f7c:	dc400117 	ldw	r17,4(sp)
    8f80:	dc000017 	ldw	r16,0(sp)
    8f84:	dec00304 	addi	sp,sp,12
    8f88:	f800283a 	ret

00008f8c <__multiply>:
    8f8c:	defffa04 	addi	sp,sp,-24
    8f90:	dcc00315 	stw	r19,12(sp)
    8f94:	dc800215 	stw	r18,8(sp)
    8f98:	34c00417 	ldw	r19,16(r6)
    8f9c:	2c800417 	ldw	r18,16(r5)
    8fa0:	dd000415 	stw	r20,16(sp)
    8fa4:	dc400115 	stw	r17,4(sp)
    8fa8:	dfc00515 	stw	ra,20(sp)
    8fac:	dc000015 	stw	r16,0(sp)
    8fb0:	2829883a 	mov	r20,r5
    8fb4:	3023883a 	mov	r17,r6
    8fb8:	94c0050e 	bge	r18,r19,8fd0 <__multiply+0x44>
    8fbc:	9007883a 	mov	r3,r18
    8fc0:	3029883a 	mov	r20,r6
    8fc4:	9825883a 	mov	r18,r19
    8fc8:	2823883a 	mov	r17,r5
    8fcc:	1827883a 	mov	r19,r3
    8fd0:	a0800217 	ldw	r2,8(r20)
    8fd4:	94e1883a 	add	r16,r18,r19
    8fd8:	a1400117 	ldw	r5,4(r20)
    8fdc:	1400010e 	bge	r2,r16,8fe4 <__multiply+0x58>
    8fe0:	29400044 	addi	r5,r5,1
    8fe4:	0008b440 	call	8b44 <_Balloc>
    8fe8:	8415883a 	add	r10,r16,r16
    8fec:	12c00504 	addi	r11,r2,20
    8ff0:	5295883a 	add	r10,r10,r10
    8ff4:	5a95883a 	add	r10,r11,r10
    8ff8:	5807883a 	mov	r3,r11
    8ffc:	5a80032e 	bgeu	r11,r10,900c <__multiply+0x80>
    9000:	18000015 	stw	zero,0(r3)
    9004:	18c00104 	addi	r3,r3,4
    9008:	1abffd36 	bltu	r3,r10,9000 <__alt_data_end+0xff009000>
    900c:	9ce7883a 	add	r19,r19,r19
    9010:	94a5883a 	add	r18,r18,r18
    9014:	89800504 	addi	r6,r17,20
    9018:	9ce7883a 	add	r19,r19,r19
    901c:	a3400504 	addi	r13,r20,20
    9020:	94a5883a 	add	r18,r18,r18
    9024:	34d9883a 	add	r12,r6,r19
    9028:	6c93883a 	add	r9,r13,r18
    902c:	3300422e 	bgeu	r6,r12,9138 <__multiply+0x1ac>
    9030:	37c00017 	ldw	ra,0(r6)
    9034:	fbffffcc 	andi	r15,ra,65535
    9038:	78001b26 	beq	r15,zero,90a8 <__multiply+0x11c>
    903c:	5811883a 	mov	r8,r11
    9040:	681d883a 	mov	r14,r13
    9044:	000f883a 	mov	r7,zero
    9048:	71000017 	ldw	r4,0(r14)
    904c:	40c00017 	ldw	r3,0(r8)
    9050:	73800104 	addi	r14,r14,4
    9054:	217fffcc 	andi	r5,r4,65535
    9058:	2bcb383a 	mul	r5,r5,r15
    905c:	2008d43a 	srli	r4,r4,16
    9060:	1c7fffcc 	andi	r17,r3,65535
    9064:	2c4b883a 	add	r5,r5,r17
    9068:	29cb883a 	add	r5,r5,r7
    906c:	23c9383a 	mul	r4,r4,r15
    9070:	1806d43a 	srli	r3,r3,16
    9074:	280ed43a 	srli	r7,r5,16
    9078:	297fffcc 	andi	r5,r5,65535
    907c:	20c7883a 	add	r3,r4,r3
    9080:	19c7883a 	add	r3,r3,r7
    9084:	1808943a 	slli	r4,r3,16
    9088:	4023883a 	mov	r17,r8
    908c:	180ed43a 	srli	r7,r3,16
    9090:	214ab03a 	or	r5,r4,r5
    9094:	41400015 	stw	r5,0(r8)
    9098:	42000104 	addi	r8,r8,4
    909c:	727fea36 	bltu	r14,r9,9048 <__alt_data_end+0xff009048>
    90a0:	89c00115 	stw	r7,4(r17)
    90a4:	37c00017 	ldw	ra,0(r6)
    90a8:	f83ed43a 	srli	ra,ra,16
    90ac:	f8001f26 	beq	ra,zero,912c <__multiply+0x1a0>
    90b0:	58c00017 	ldw	r3,0(r11)
    90b4:	681d883a 	mov	r14,r13
    90b8:	581f883a 	mov	r15,r11
    90bc:	1811883a 	mov	r8,r3
    90c0:	5825883a 	mov	r18,r11
    90c4:	000f883a 	mov	r7,zero
    90c8:	00000106 	br	90d0 <__multiply+0x144>
    90cc:	8825883a 	mov	r18,r17
    90d0:	7140000b 	ldhu	r5,0(r14)
    90d4:	4010d43a 	srli	r8,r8,16
    90d8:	193fffcc 	andi	r4,r3,65535
    90dc:	2fcb383a 	mul	r5,r5,ra
    90e0:	7bc00104 	addi	r15,r15,4
    90e4:	73800104 	addi	r14,r14,4
    90e8:	2a0b883a 	add	r5,r5,r8
    90ec:	29cb883a 	add	r5,r5,r7
    90f0:	2806943a 	slli	r3,r5,16
    90f4:	94400104 	addi	r17,r18,4
    90f8:	280ad43a 	srli	r5,r5,16
    90fc:	1908b03a 	or	r4,r3,r4
    9100:	793fff15 	stw	r4,-4(r15)
    9104:	70ffff17 	ldw	r3,-4(r14)
    9108:	8a000017 	ldw	r8,0(r17)
    910c:	1806d43a 	srli	r3,r3,16
    9110:	413fffcc 	andi	r4,r8,65535
    9114:	1fc7383a 	mul	r3,r3,ra
    9118:	1907883a 	add	r3,r3,r4
    911c:	1947883a 	add	r3,r3,r5
    9120:	180ed43a 	srli	r7,r3,16
    9124:	727fe936 	bltu	r14,r9,90cc <__alt_data_end+0xff0090cc>
    9128:	90c00115 	stw	r3,4(r18)
    912c:	31800104 	addi	r6,r6,4
    9130:	5ac00104 	addi	r11,r11,4
    9134:	333fbe36 	bltu	r6,r12,9030 <__alt_data_end+0xff009030>
    9138:	0400090e 	bge	zero,r16,9160 <__multiply+0x1d4>
    913c:	50ffff17 	ldw	r3,-4(r10)
    9140:	52bfff04 	addi	r10,r10,-4
    9144:	18000326 	beq	r3,zero,9154 <__multiply+0x1c8>
    9148:	00000506 	br	9160 <__multiply+0x1d4>
    914c:	50c00017 	ldw	r3,0(r10)
    9150:	1800031e 	bne	r3,zero,9160 <__multiply+0x1d4>
    9154:	843fffc4 	addi	r16,r16,-1
    9158:	52bfff04 	addi	r10,r10,-4
    915c:	803ffb1e 	bne	r16,zero,914c <__alt_data_end+0xff00914c>
    9160:	14000415 	stw	r16,16(r2)
    9164:	dfc00517 	ldw	ra,20(sp)
    9168:	dd000417 	ldw	r20,16(sp)
    916c:	dcc00317 	ldw	r19,12(sp)
    9170:	dc800217 	ldw	r18,8(sp)
    9174:	dc400117 	ldw	r17,4(sp)
    9178:	dc000017 	ldw	r16,0(sp)
    917c:	dec00604 	addi	sp,sp,24
    9180:	f800283a 	ret

00009184 <__pow5mult>:
    9184:	defffa04 	addi	sp,sp,-24
    9188:	dcc00315 	stw	r19,12(sp)
    918c:	dc000015 	stw	r16,0(sp)
    9190:	dfc00515 	stw	ra,20(sp)
    9194:	dd000415 	stw	r20,16(sp)
    9198:	dc800215 	stw	r18,8(sp)
    919c:	dc400115 	stw	r17,4(sp)
    91a0:	308000cc 	andi	r2,r6,3
    91a4:	3021883a 	mov	r16,r6
    91a8:	2027883a 	mov	r19,r4
    91ac:	10002f1e 	bne	r2,zero,926c <__pow5mult+0xe8>
    91b0:	2825883a 	mov	r18,r5
    91b4:	8021d0ba 	srai	r16,r16,2
    91b8:	80001a26 	beq	r16,zero,9224 <__pow5mult+0xa0>
    91bc:	9c401217 	ldw	r17,72(r19)
    91c0:	8800061e 	bne	r17,zero,91dc <__pow5mult+0x58>
    91c4:	00003406 	br	9298 <__pow5mult+0x114>
    91c8:	8021d07a 	srai	r16,r16,1
    91cc:	80001526 	beq	r16,zero,9224 <__pow5mult+0xa0>
    91d0:	88800017 	ldw	r2,0(r17)
    91d4:	10001c26 	beq	r2,zero,9248 <__pow5mult+0xc4>
    91d8:	1023883a 	mov	r17,r2
    91dc:	8080004c 	andi	r2,r16,1
    91e0:	103ff926 	beq	r2,zero,91c8 <__alt_data_end+0xff0091c8>
    91e4:	880d883a 	mov	r6,r17
    91e8:	900b883a 	mov	r5,r18
    91ec:	9809883a 	mov	r4,r19
    91f0:	0008f8c0 	call	8f8c <__multiply>
    91f4:	90001b26 	beq	r18,zero,9264 <__pow5mult+0xe0>
    91f8:	91000117 	ldw	r4,4(r18)
    91fc:	98c01317 	ldw	r3,76(r19)
    9200:	8021d07a 	srai	r16,r16,1
    9204:	2109883a 	add	r4,r4,r4
    9208:	2109883a 	add	r4,r4,r4
    920c:	1907883a 	add	r3,r3,r4
    9210:	19000017 	ldw	r4,0(r3)
    9214:	91000015 	stw	r4,0(r18)
    9218:	1c800015 	stw	r18,0(r3)
    921c:	1025883a 	mov	r18,r2
    9220:	803feb1e 	bne	r16,zero,91d0 <__alt_data_end+0xff0091d0>
    9224:	9005883a 	mov	r2,r18
    9228:	dfc00517 	ldw	ra,20(sp)
    922c:	dd000417 	ldw	r20,16(sp)
    9230:	dcc00317 	ldw	r19,12(sp)
    9234:	dc800217 	ldw	r18,8(sp)
    9238:	dc400117 	ldw	r17,4(sp)
    923c:	dc000017 	ldw	r16,0(sp)
    9240:	dec00604 	addi	sp,sp,24
    9244:	f800283a 	ret
    9248:	880d883a 	mov	r6,r17
    924c:	880b883a 	mov	r5,r17
    9250:	9809883a 	mov	r4,r19
    9254:	0008f8c0 	call	8f8c <__multiply>
    9258:	88800015 	stw	r2,0(r17)
    925c:	10000015 	stw	zero,0(r2)
    9260:	003fdd06 	br	91d8 <__alt_data_end+0xff0091d8>
    9264:	1025883a 	mov	r18,r2
    9268:	003fd706 	br	91c8 <__alt_data_end+0xff0091c8>
    926c:	10bfffc4 	addi	r2,r2,-1
    9270:	1085883a 	add	r2,r2,r2
    9274:	00c00074 	movhi	r3,1
    9278:	18c8d704 	addi	r3,r3,9052
    927c:	1085883a 	add	r2,r2,r2
    9280:	1885883a 	add	r2,r3,r2
    9284:	11800017 	ldw	r6,0(r2)
    9288:	000f883a 	mov	r7,zero
    928c:	0008c140 	call	8c14 <__multadd>
    9290:	1025883a 	mov	r18,r2
    9294:	003fc706 	br	91b4 <__alt_data_end+0xff0091b4>
    9298:	05000044 	movi	r20,1
    929c:	a00b883a 	mov	r5,r20
    92a0:	9809883a 	mov	r4,r19
    92a4:	0008b440 	call	8b44 <_Balloc>
    92a8:	1023883a 	mov	r17,r2
    92ac:	00809c44 	movi	r2,625
    92b0:	88800515 	stw	r2,20(r17)
    92b4:	8d000415 	stw	r20,16(r17)
    92b8:	9c401215 	stw	r17,72(r19)
    92bc:	88000015 	stw	zero,0(r17)
    92c0:	003fc606 	br	91dc <__alt_data_end+0xff0091dc>

000092c4 <__lshift>:
    92c4:	defff904 	addi	sp,sp,-28
    92c8:	dd400515 	stw	r21,20(sp)
    92cc:	dcc00315 	stw	r19,12(sp)
    92d0:	302bd17a 	srai	r21,r6,5
    92d4:	2cc00417 	ldw	r19,16(r5)
    92d8:	28800217 	ldw	r2,8(r5)
    92dc:	dd000415 	stw	r20,16(sp)
    92e0:	ace7883a 	add	r19,r21,r19
    92e4:	dc800215 	stw	r18,8(sp)
    92e8:	dc400115 	stw	r17,4(sp)
    92ec:	dc000015 	stw	r16,0(sp)
    92f0:	dfc00615 	stw	ra,24(sp)
    92f4:	9c000044 	addi	r16,r19,1
    92f8:	2823883a 	mov	r17,r5
    92fc:	3029883a 	mov	r20,r6
    9300:	2025883a 	mov	r18,r4
    9304:	29400117 	ldw	r5,4(r5)
    9308:	1400030e 	bge	r2,r16,9318 <__lshift+0x54>
    930c:	1085883a 	add	r2,r2,r2
    9310:	29400044 	addi	r5,r5,1
    9314:	143ffd16 	blt	r2,r16,930c <__alt_data_end+0xff00930c>
    9318:	9009883a 	mov	r4,r18
    931c:	0008b440 	call	8b44 <_Balloc>
    9320:	10c00504 	addi	r3,r2,20
    9324:	0540070e 	bge	zero,r21,9344 <__lshift+0x80>
    9328:	ad6b883a 	add	r21,r21,r21
    932c:	ad6b883a 	add	r21,r21,r21
    9330:	1809883a 	mov	r4,r3
    9334:	1d47883a 	add	r3,r3,r21
    9338:	20000015 	stw	zero,0(r4)
    933c:	21000104 	addi	r4,r4,4
    9340:	193ffd1e 	bne	r3,r4,9338 <__alt_data_end+0xff009338>
    9344:	8a000417 	ldw	r8,16(r17)
    9348:	89000504 	addi	r4,r17,20
    934c:	a18007cc 	andi	r6,r20,31
    9350:	4211883a 	add	r8,r8,r8
    9354:	4211883a 	add	r8,r8,r8
    9358:	2211883a 	add	r8,r4,r8
    935c:	30002326 	beq	r6,zero,93ec <__lshift+0x128>
    9360:	02400804 	movi	r9,32
    9364:	4993c83a 	sub	r9,r9,r6
    9368:	000b883a 	mov	r5,zero
    936c:	21c00017 	ldw	r7,0(r4)
    9370:	1815883a 	mov	r10,r3
    9374:	18c00104 	addi	r3,r3,4
    9378:	398e983a 	sll	r7,r7,r6
    937c:	21000104 	addi	r4,r4,4
    9380:	394ab03a 	or	r5,r7,r5
    9384:	197fff15 	stw	r5,-4(r3)
    9388:	217fff17 	ldw	r5,-4(r4)
    938c:	2a4ad83a 	srl	r5,r5,r9
    9390:	223ff636 	bltu	r4,r8,936c <__alt_data_end+0xff00936c>
    9394:	51400115 	stw	r5,4(r10)
    9398:	28001a1e 	bne	r5,zero,9404 <__lshift+0x140>
    939c:	843fffc4 	addi	r16,r16,-1
    93a0:	14000415 	stw	r16,16(r2)
    93a4:	88000826 	beq	r17,zero,93c8 <__lshift+0x104>
    93a8:	89000117 	ldw	r4,4(r17)
    93ac:	90c01317 	ldw	r3,76(r18)
    93b0:	2109883a 	add	r4,r4,r4
    93b4:	2109883a 	add	r4,r4,r4
    93b8:	1907883a 	add	r3,r3,r4
    93bc:	19000017 	ldw	r4,0(r3)
    93c0:	89000015 	stw	r4,0(r17)
    93c4:	1c400015 	stw	r17,0(r3)
    93c8:	dfc00617 	ldw	ra,24(sp)
    93cc:	dd400517 	ldw	r21,20(sp)
    93d0:	dd000417 	ldw	r20,16(sp)
    93d4:	dcc00317 	ldw	r19,12(sp)
    93d8:	dc800217 	ldw	r18,8(sp)
    93dc:	dc400117 	ldw	r17,4(sp)
    93e0:	dc000017 	ldw	r16,0(sp)
    93e4:	dec00704 	addi	sp,sp,28
    93e8:	f800283a 	ret
    93ec:	21400017 	ldw	r5,0(r4)
    93f0:	18c00104 	addi	r3,r3,4
    93f4:	21000104 	addi	r4,r4,4
    93f8:	197fff15 	stw	r5,-4(r3)
    93fc:	223ffb36 	bltu	r4,r8,93ec <__alt_data_end+0xff0093ec>
    9400:	003fe606 	br	939c <__alt_data_end+0xff00939c>
    9404:	9c000084 	addi	r16,r19,2
    9408:	003fe406 	br	939c <__alt_data_end+0xff00939c>

0000940c <__mcmp>:
    940c:	20800417 	ldw	r2,16(r4)
    9410:	28c00417 	ldw	r3,16(r5)
    9414:	10c5c83a 	sub	r2,r2,r3
    9418:	1000111e 	bne	r2,zero,9460 <__mcmp+0x54>
    941c:	18c7883a 	add	r3,r3,r3
    9420:	18c7883a 	add	r3,r3,r3
    9424:	21000504 	addi	r4,r4,20
    9428:	29400504 	addi	r5,r5,20
    942c:	20c5883a 	add	r2,r4,r3
    9430:	28cb883a 	add	r5,r5,r3
    9434:	00000106 	br	943c <__mcmp+0x30>
    9438:	20800a2e 	bgeu	r4,r2,9464 <__mcmp+0x58>
    943c:	10bfff04 	addi	r2,r2,-4
    9440:	297fff04 	addi	r5,r5,-4
    9444:	11800017 	ldw	r6,0(r2)
    9448:	28c00017 	ldw	r3,0(r5)
    944c:	30fffa26 	beq	r6,r3,9438 <__alt_data_end+0xff009438>
    9450:	30c00236 	bltu	r6,r3,945c <__mcmp+0x50>
    9454:	00800044 	movi	r2,1
    9458:	f800283a 	ret
    945c:	00bfffc4 	movi	r2,-1
    9460:	f800283a 	ret
    9464:	0005883a 	mov	r2,zero
    9468:	f800283a 	ret

0000946c <__mdiff>:
    946c:	28c00417 	ldw	r3,16(r5)
    9470:	30800417 	ldw	r2,16(r6)
    9474:	defffa04 	addi	sp,sp,-24
    9478:	dcc00315 	stw	r19,12(sp)
    947c:	dc800215 	stw	r18,8(sp)
    9480:	dfc00515 	stw	ra,20(sp)
    9484:	dd000415 	stw	r20,16(sp)
    9488:	dc400115 	stw	r17,4(sp)
    948c:	dc000015 	stw	r16,0(sp)
    9490:	1887c83a 	sub	r3,r3,r2
    9494:	2825883a 	mov	r18,r5
    9498:	3027883a 	mov	r19,r6
    949c:	1800141e 	bne	r3,zero,94f0 <__mdiff+0x84>
    94a0:	1085883a 	add	r2,r2,r2
    94a4:	1085883a 	add	r2,r2,r2
    94a8:	2a000504 	addi	r8,r5,20
    94ac:	34000504 	addi	r16,r6,20
    94b0:	4087883a 	add	r3,r8,r2
    94b4:	8085883a 	add	r2,r16,r2
    94b8:	00000106 	br	94c0 <__mdiff+0x54>
    94bc:	40c0592e 	bgeu	r8,r3,9624 <__mdiff+0x1b8>
    94c0:	18ffff04 	addi	r3,r3,-4
    94c4:	10bfff04 	addi	r2,r2,-4
    94c8:	19c00017 	ldw	r7,0(r3)
    94cc:	11400017 	ldw	r5,0(r2)
    94d0:	397ffa26 	beq	r7,r5,94bc <__alt_data_end+0xff0094bc>
    94d4:	3940592e 	bgeu	r7,r5,963c <__mdiff+0x1d0>
    94d8:	9005883a 	mov	r2,r18
    94dc:	4023883a 	mov	r17,r8
    94e0:	9825883a 	mov	r18,r19
    94e4:	05000044 	movi	r20,1
    94e8:	1027883a 	mov	r19,r2
    94ec:	00000406 	br	9500 <__mdiff+0x94>
    94f0:	18005616 	blt	r3,zero,964c <__mdiff+0x1e0>
    94f4:	34400504 	addi	r17,r6,20
    94f8:	2c000504 	addi	r16,r5,20
    94fc:	0029883a 	mov	r20,zero
    9500:	91400117 	ldw	r5,4(r18)
    9504:	0008b440 	call	8b44 <_Balloc>
    9508:	92400417 	ldw	r9,16(r18)
    950c:	9b000417 	ldw	r12,16(r19)
    9510:	12c00504 	addi	r11,r2,20
    9514:	4a51883a 	add	r8,r9,r9
    9518:	6319883a 	add	r12,r12,r12
    951c:	4211883a 	add	r8,r8,r8
    9520:	6319883a 	add	r12,r12,r12
    9524:	15000315 	stw	r20,12(r2)
    9528:	8211883a 	add	r8,r16,r8
    952c:	8b19883a 	add	r12,r17,r12
    9530:	0007883a 	mov	r3,zero
    9534:	81400017 	ldw	r5,0(r16)
    9538:	89c00017 	ldw	r7,0(r17)
    953c:	59800104 	addi	r6,r11,4
    9540:	293fffcc 	andi	r4,r5,65535
    9544:	20c7883a 	add	r3,r4,r3
    9548:	393fffcc 	andi	r4,r7,65535
    954c:	1909c83a 	sub	r4,r3,r4
    9550:	280ad43a 	srli	r5,r5,16
    9554:	380ed43a 	srli	r7,r7,16
    9558:	2007d43a 	srai	r3,r4,16
    955c:	213fffcc 	andi	r4,r4,65535
    9560:	29cbc83a 	sub	r5,r5,r7
    9564:	28c7883a 	add	r3,r5,r3
    9568:	180a943a 	slli	r5,r3,16
    956c:	8c400104 	addi	r17,r17,4
    9570:	84000104 	addi	r16,r16,4
    9574:	2908b03a 	or	r4,r5,r4
    9578:	59000015 	stw	r4,0(r11)
    957c:	1807d43a 	srai	r3,r3,16
    9580:	3015883a 	mov	r10,r6
    9584:	3017883a 	mov	r11,r6
    9588:	8b3fea36 	bltu	r17,r12,9534 <__alt_data_end+0xff009534>
    958c:	8200162e 	bgeu	r16,r8,95e8 <__mdiff+0x17c>
    9590:	8017883a 	mov	r11,r16
    9594:	59400017 	ldw	r5,0(r11)
    9598:	31800104 	addi	r6,r6,4
    959c:	5ac00104 	addi	r11,r11,4
    95a0:	293fffcc 	andi	r4,r5,65535
    95a4:	20c7883a 	add	r3,r4,r3
    95a8:	280ed43a 	srli	r7,r5,16
    95ac:	180bd43a 	srai	r5,r3,16
    95b0:	193fffcc 	andi	r4,r3,65535
    95b4:	3947883a 	add	r3,r7,r5
    95b8:	180a943a 	slli	r5,r3,16
    95bc:	1807d43a 	srai	r3,r3,16
    95c0:	2908b03a 	or	r4,r5,r4
    95c4:	313fff15 	stw	r4,-4(r6)
    95c8:	5a3ff236 	bltu	r11,r8,9594 <__alt_data_end+0xff009594>
    95cc:	0406303a 	nor	r3,zero,r16
    95d0:	1a07883a 	add	r3,r3,r8
    95d4:	1806d0ba 	srli	r3,r3,2
    95d8:	18c00044 	addi	r3,r3,1
    95dc:	18c7883a 	add	r3,r3,r3
    95e0:	18c7883a 	add	r3,r3,r3
    95e4:	50d5883a 	add	r10,r10,r3
    95e8:	50ffff04 	addi	r3,r10,-4
    95ec:	2000041e 	bne	r4,zero,9600 <__mdiff+0x194>
    95f0:	18ffff04 	addi	r3,r3,-4
    95f4:	19000017 	ldw	r4,0(r3)
    95f8:	4a7fffc4 	addi	r9,r9,-1
    95fc:	203ffc26 	beq	r4,zero,95f0 <__alt_data_end+0xff0095f0>
    9600:	12400415 	stw	r9,16(r2)
    9604:	dfc00517 	ldw	ra,20(sp)
    9608:	dd000417 	ldw	r20,16(sp)
    960c:	dcc00317 	ldw	r19,12(sp)
    9610:	dc800217 	ldw	r18,8(sp)
    9614:	dc400117 	ldw	r17,4(sp)
    9618:	dc000017 	ldw	r16,0(sp)
    961c:	dec00604 	addi	sp,sp,24
    9620:	f800283a 	ret
    9624:	000b883a 	mov	r5,zero
    9628:	0008b440 	call	8b44 <_Balloc>
    962c:	00c00044 	movi	r3,1
    9630:	10c00415 	stw	r3,16(r2)
    9634:	10000515 	stw	zero,20(r2)
    9638:	003ff206 	br	9604 <__alt_data_end+0xff009604>
    963c:	8023883a 	mov	r17,r16
    9640:	0029883a 	mov	r20,zero
    9644:	4021883a 	mov	r16,r8
    9648:	003fad06 	br	9500 <__alt_data_end+0xff009500>
    964c:	9005883a 	mov	r2,r18
    9650:	94400504 	addi	r17,r18,20
    9654:	9c000504 	addi	r16,r19,20
    9658:	9825883a 	mov	r18,r19
    965c:	05000044 	movi	r20,1
    9660:	1027883a 	mov	r19,r2
    9664:	003fa606 	br	9500 <__alt_data_end+0xff009500>

00009668 <__ulp>:
    9668:	295ffc2c 	andhi	r5,r5,32752
    966c:	00bf3034 	movhi	r2,64704
    9670:	2887883a 	add	r3,r5,r2
    9674:	00c0020e 	bge	zero,r3,9680 <__ulp+0x18>
    9678:	0005883a 	mov	r2,zero
    967c:	f800283a 	ret
    9680:	00c7c83a 	sub	r3,zero,r3
    9684:	1807d53a 	srai	r3,r3,20
    9688:	008004c4 	movi	r2,19
    968c:	10c00b0e 	bge	r2,r3,96bc <__ulp+0x54>
    9690:	18bffb04 	addi	r2,r3,-20
    9694:	01000784 	movi	r4,30
    9698:	0007883a 	mov	r3,zero
    969c:	20800516 	blt	r4,r2,96b4 <__ulp+0x4c>
    96a0:	010007c4 	movi	r4,31
    96a4:	2089c83a 	sub	r4,r4,r2
    96a8:	00800044 	movi	r2,1
    96ac:	1104983a 	sll	r2,r2,r4
    96b0:	f800283a 	ret
    96b4:	00800044 	movi	r2,1
    96b8:	f800283a 	ret
    96bc:	01400234 	movhi	r5,8
    96c0:	28c7d83a 	sra	r3,r5,r3
    96c4:	0005883a 	mov	r2,zero
    96c8:	f800283a 	ret

000096cc <__b2d>:
    96cc:	defffa04 	addi	sp,sp,-24
    96d0:	dc000015 	stw	r16,0(sp)
    96d4:	24000417 	ldw	r16,16(r4)
    96d8:	dc400115 	stw	r17,4(sp)
    96dc:	24400504 	addi	r17,r4,20
    96e0:	8421883a 	add	r16,r16,r16
    96e4:	8421883a 	add	r16,r16,r16
    96e8:	8c21883a 	add	r16,r17,r16
    96ec:	dc800215 	stw	r18,8(sp)
    96f0:	84bfff17 	ldw	r18,-4(r16)
    96f4:	dd000415 	stw	r20,16(sp)
    96f8:	dcc00315 	stw	r19,12(sp)
    96fc:	9009883a 	mov	r4,r18
    9700:	2829883a 	mov	r20,r5
    9704:	dfc00515 	stw	ra,20(sp)
    9708:	0008e380 	call	8e38 <__hi0bits>
    970c:	00c00804 	movi	r3,32
    9710:	1889c83a 	sub	r4,r3,r2
    9714:	a1000015 	stw	r4,0(r20)
    9718:	01000284 	movi	r4,10
    971c:	84ffff04 	addi	r19,r16,-4
    9720:	20801216 	blt	r4,r2,976c <__b2d+0xa0>
    9724:	018002c4 	movi	r6,11
    9728:	308dc83a 	sub	r6,r6,r2
    972c:	9186d83a 	srl	r3,r18,r6
    9730:	18cffc34 	orhi	r3,r3,16368
    9734:	8cc0212e 	bgeu	r17,r19,97bc <__b2d+0xf0>
    9738:	813ffe17 	ldw	r4,-8(r16)
    973c:	218cd83a 	srl	r6,r4,r6
    9740:	10800544 	addi	r2,r2,21
    9744:	9084983a 	sll	r2,r18,r2
    9748:	1184b03a 	or	r2,r2,r6
    974c:	dfc00517 	ldw	ra,20(sp)
    9750:	dd000417 	ldw	r20,16(sp)
    9754:	dcc00317 	ldw	r19,12(sp)
    9758:	dc800217 	ldw	r18,8(sp)
    975c:	dc400117 	ldw	r17,4(sp)
    9760:	dc000017 	ldw	r16,0(sp)
    9764:	dec00604 	addi	sp,sp,24
    9768:	f800283a 	ret
    976c:	8cc00f2e 	bgeu	r17,r19,97ac <__b2d+0xe0>
    9770:	117ffd44 	addi	r5,r2,-11
    9774:	80bffe17 	ldw	r2,-8(r16)
    9778:	28000e26 	beq	r5,zero,97b4 <__b2d+0xe8>
    977c:	1949c83a 	sub	r4,r3,r5
    9780:	9164983a 	sll	r18,r18,r5
    9784:	1106d83a 	srl	r3,r2,r4
    9788:	81bffe04 	addi	r6,r16,-8
    978c:	948ffc34 	orhi	r18,r18,16368
    9790:	90c6b03a 	or	r3,r18,r3
    9794:	89800e2e 	bgeu	r17,r6,97d0 <__b2d+0x104>
    9798:	81bffd17 	ldw	r6,-12(r16)
    979c:	1144983a 	sll	r2,r2,r5
    97a0:	310ad83a 	srl	r5,r6,r4
    97a4:	2884b03a 	or	r2,r5,r2
    97a8:	003fe806 	br	974c <__alt_data_end+0xff00974c>
    97ac:	10bffd44 	addi	r2,r2,-11
    97b0:	1000041e 	bne	r2,zero,97c4 <__b2d+0xf8>
    97b4:	90cffc34 	orhi	r3,r18,16368
    97b8:	003fe406 	br	974c <__alt_data_end+0xff00974c>
    97bc:	000d883a 	mov	r6,zero
    97c0:	003fdf06 	br	9740 <__alt_data_end+0xff009740>
    97c4:	90a4983a 	sll	r18,r18,r2
    97c8:	0005883a 	mov	r2,zero
    97cc:	003ff906 	br	97b4 <__alt_data_end+0xff0097b4>
    97d0:	1144983a 	sll	r2,r2,r5
    97d4:	003fdd06 	br	974c <__alt_data_end+0xff00974c>

000097d8 <__d2b>:
    97d8:	defff804 	addi	sp,sp,-32
    97dc:	dc000215 	stw	r16,8(sp)
    97e0:	3021883a 	mov	r16,r6
    97e4:	dc400315 	stw	r17,12(sp)
    97e8:	8022907a 	slli	r17,r16,1
    97ec:	dd000615 	stw	r20,24(sp)
    97f0:	2829883a 	mov	r20,r5
    97f4:	01400044 	movi	r5,1
    97f8:	dcc00515 	stw	r19,20(sp)
    97fc:	dc800415 	stw	r18,16(sp)
    9800:	dfc00715 	stw	ra,28(sp)
    9804:	3825883a 	mov	r18,r7
    9808:	8822d57a 	srli	r17,r17,21
    980c:	0008b440 	call	8b44 <_Balloc>
    9810:	1027883a 	mov	r19,r2
    9814:	00800434 	movhi	r2,16
    9818:	10bfffc4 	addi	r2,r2,-1
    981c:	808c703a 	and	r6,r16,r2
    9820:	88000126 	beq	r17,zero,9828 <__d2b+0x50>
    9824:	31800434 	orhi	r6,r6,16
    9828:	d9800015 	stw	r6,0(sp)
    982c:	a0002426 	beq	r20,zero,98c0 <__d2b+0xe8>
    9830:	d9000104 	addi	r4,sp,4
    9834:	dd000115 	stw	r20,4(sp)
    9838:	0008ea00 	call	8ea0 <__lo0bits>
    983c:	d8c00017 	ldw	r3,0(sp)
    9840:	10002f1e 	bne	r2,zero,9900 <__d2b+0x128>
    9844:	d9000117 	ldw	r4,4(sp)
    9848:	99000515 	stw	r4,20(r19)
    984c:	1821003a 	cmpeq	r16,r3,zero
    9850:	01000084 	movi	r4,2
    9854:	2421c83a 	sub	r16,r4,r16
    9858:	98c00615 	stw	r3,24(r19)
    985c:	9c000415 	stw	r16,16(r19)
    9860:	88001f1e 	bne	r17,zero,98e0 <__d2b+0x108>
    9864:	10bef384 	addi	r2,r2,-1074
    9868:	90800015 	stw	r2,0(r18)
    986c:	00900034 	movhi	r2,16384
    9870:	10bfffc4 	addi	r2,r2,-1
    9874:	8085883a 	add	r2,r16,r2
    9878:	1085883a 	add	r2,r2,r2
    987c:	1085883a 	add	r2,r2,r2
    9880:	9885883a 	add	r2,r19,r2
    9884:	11000517 	ldw	r4,20(r2)
    9888:	8020917a 	slli	r16,r16,5
    988c:	0008e380 	call	8e38 <__hi0bits>
    9890:	d8c00817 	ldw	r3,32(sp)
    9894:	8085c83a 	sub	r2,r16,r2
    9898:	18800015 	stw	r2,0(r3)
    989c:	9805883a 	mov	r2,r19
    98a0:	dfc00717 	ldw	ra,28(sp)
    98a4:	dd000617 	ldw	r20,24(sp)
    98a8:	dcc00517 	ldw	r19,20(sp)
    98ac:	dc800417 	ldw	r18,16(sp)
    98b0:	dc400317 	ldw	r17,12(sp)
    98b4:	dc000217 	ldw	r16,8(sp)
    98b8:	dec00804 	addi	sp,sp,32
    98bc:	f800283a 	ret
    98c0:	d809883a 	mov	r4,sp
    98c4:	0008ea00 	call	8ea0 <__lo0bits>
    98c8:	d8c00017 	ldw	r3,0(sp)
    98cc:	04000044 	movi	r16,1
    98d0:	9c000415 	stw	r16,16(r19)
    98d4:	98c00515 	stw	r3,20(r19)
    98d8:	10800804 	addi	r2,r2,32
    98dc:	883fe126 	beq	r17,zero,9864 <__alt_data_end+0xff009864>
    98e0:	00c00d44 	movi	r3,53
    98e4:	8c7ef344 	addi	r17,r17,-1075
    98e8:	88a3883a 	add	r17,r17,r2
    98ec:	1885c83a 	sub	r2,r3,r2
    98f0:	d8c00817 	ldw	r3,32(sp)
    98f4:	94400015 	stw	r17,0(r18)
    98f8:	18800015 	stw	r2,0(r3)
    98fc:	003fe706 	br	989c <__alt_data_end+0xff00989c>
    9900:	01000804 	movi	r4,32
    9904:	2089c83a 	sub	r4,r4,r2
    9908:	1908983a 	sll	r4,r3,r4
    990c:	d9400117 	ldw	r5,4(sp)
    9910:	1886d83a 	srl	r3,r3,r2
    9914:	2148b03a 	or	r4,r4,r5
    9918:	99000515 	stw	r4,20(r19)
    991c:	d8c00015 	stw	r3,0(sp)
    9920:	003fca06 	br	984c <__alt_data_end+0xff00984c>

00009924 <__ratio>:
    9924:	defff904 	addi	sp,sp,-28
    9928:	dc400315 	stw	r17,12(sp)
    992c:	2823883a 	mov	r17,r5
    9930:	d9400104 	addi	r5,sp,4
    9934:	dfc00615 	stw	ra,24(sp)
    9938:	dcc00515 	stw	r19,20(sp)
    993c:	dc800415 	stw	r18,16(sp)
    9940:	2027883a 	mov	r19,r4
    9944:	dc000215 	stw	r16,8(sp)
    9948:	00096cc0 	call	96cc <__b2d>
    994c:	d80b883a 	mov	r5,sp
    9950:	8809883a 	mov	r4,r17
    9954:	1025883a 	mov	r18,r2
    9958:	1821883a 	mov	r16,r3
    995c:	00096cc0 	call	96cc <__b2d>
    9960:	8a000417 	ldw	r8,16(r17)
    9964:	99000417 	ldw	r4,16(r19)
    9968:	d9400117 	ldw	r5,4(sp)
    996c:	2209c83a 	sub	r4,r4,r8
    9970:	2010917a 	slli	r8,r4,5
    9974:	d9000017 	ldw	r4,0(sp)
    9978:	2909c83a 	sub	r4,r5,r4
    997c:	4109883a 	add	r4,r8,r4
    9980:	01000e0e 	bge	zero,r4,99bc <__ratio+0x98>
    9984:	2008953a 	slli	r4,r4,20
    9988:	2421883a 	add	r16,r4,r16
    998c:	100d883a 	mov	r6,r2
    9990:	180f883a 	mov	r7,r3
    9994:	9009883a 	mov	r4,r18
    9998:	800b883a 	mov	r5,r16
    999c:	000d6080 	call	d608 <__divdf3>
    99a0:	dfc00617 	ldw	ra,24(sp)
    99a4:	dcc00517 	ldw	r19,20(sp)
    99a8:	dc800417 	ldw	r18,16(sp)
    99ac:	dc400317 	ldw	r17,12(sp)
    99b0:	dc000217 	ldw	r16,8(sp)
    99b4:	dec00704 	addi	sp,sp,28
    99b8:	f800283a 	ret
    99bc:	2008953a 	slli	r4,r4,20
    99c0:	1907c83a 	sub	r3,r3,r4
    99c4:	003ff106 	br	998c <__alt_data_end+0xff00998c>

000099c8 <_mprec_log10>:
    99c8:	defffe04 	addi	sp,sp,-8
    99cc:	dc000015 	stw	r16,0(sp)
    99d0:	dfc00115 	stw	ra,4(sp)
    99d4:	008005c4 	movi	r2,23
    99d8:	2021883a 	mov	r16,r4
    99dc:	11000d0e 	bge	r2,r4,9a14 <_mprec_log10+0x4c>
    99e0:	0005883a 	mov	r2,zero
    99e4:	00cffc34 	movhi	r3,16368
    99e8:	843fffc4 	addi	r16,r16,-1
    99ec:	000d883a 	mov	r6,zero
    99f0:	01d00934 	movhi	r7,16420
    99f4:	1009883a 	mov	r4,r2
    99f8:	180b883a 	mov	r5,r3
    99fc:	000e1480 	call	e148 <__muldf3>
    9a00:	803ff91e 	bne	r16,zero,99e8 <__alt_data_end+0xff0099e8>
    9a04:	dfc00117 	ldw	ra,4(sp)
    9a08:	dc000017 	ldw	r16,0(sp)
    9a0c:	dec00204 	addi	sp,sp,8
    9a10:	f800283a 	ret
    9a14:	202090fa 	slli	r16,r4,3
    9a18:	00800074 	movhi	r2,1
    9a1c:	1088ee04 	addi	r2,r2,9144
    9a20:	1421883a 	add	r16,r2,r16
    9a24:	80800017 	ldw	r2,0(r16)
    9a28:	80c00117 	ldw	r3,4(r16)
    9a2c:	dfc00117 	ldw	ra,4(sp)
    9a30:	dc000017 	ldw	r16,0(sp)
    9a34:	dec00204 	addi	sp,sp,8
    9a38:	f800283a 	ret

00009a3c <__copybits>:
    9a3c:	297fffc4 	addi	r5,r5,-1
    9a40:	280fd17a 	srai	r7,r5,5
    9a44:	30c00417 	ldw	r3,16(r6)
    9a48:	30800504 	addi	r2,r6,20
    9a4c:	39c00044 	addi	r7,r7,1
    9a50:	18c7883a 	add	r3,r3,r3
    9a54:	39cf883a 	add	r7,r7,r7
    9a58:	18c7883a 	add	r3,r3,r3
    9a5c:	39cf883a 	add	r7,r7,r7
    9a60:	10c7883a 	add	r3,r2,r3
    9a64:	21cf883a 	add	r7,r4,r7
    9a68:	10c00d2e 	bgeu	r2,r3,9aa0 <__copybits+0x64>
    9a6c:	200b883a 	mov	r5,r4
    9a70:	12000017 	ldw	r8,0(r2)
    9a74:	29400104 	addi	r5,r5,4
    9a78:	10800104 	addi	r2,r2,4
    9a7c:	2a3fff15 	stw	r8,-4(r5)
    9a80:	10fffb36 	bltu	r2,r3,9a70 <__alt_data_end+0xff009a70>
    9a84:	1985c83a 	sub	r2,r3,r6
    9a88:	10bffac4 	addi	r2,r2,-21
    9a8c:	1004d0ba 	srli	r2,r2,2
    9a90:	10800044 	addi	r2,r2,1
    9a94:	1085883a 	add	r2,r2,r2
    9a98:	1085883a 	add	r2,r2,r2
    9a9c:	2089883a 	add	r4,r4,r2
    9aa0:	21c0032e 	bgeu	r4,r7,9ab0 <__copybits+0x74>
    9aa4:	20000015 	stw	zero,0(r4)
    9aa8:	21000104 	addi	r4,r4,4
    9aac:	21fffd36 	bltu	r4,r7,9aa4 <__alt_data_end+0xff009aa4>
    9ab0:	f800283a 	ret

00009ab4 <__any_on>:
    9ab4:	20c00417 	ldw	r3,16(r4)
    9ab8:	2805d17a 	srai	r2,r5,5
    9abc:	21000504 	addi	r4,r4,20
    9ac0:	18800d0e 	bge	r3,r2,9af8 <__any_on+0x44>
    9ac4:	18c7883a 	add	r3,r3,r3
    9ac8:	18c7883a 	add	r3,r3,r3
    9acc:	20c7883a 	add	r3,r4,r3
    9ad0:	20c0192e 	bgeu	r4,r3,9b38 <__any_on+0x84>
    9ad4:	18bfff17 	ldw	r2,-4(r3)
    9ad8:	18ffff04 	addi	r3,r3,-4
    9adc:	1000041e 	bne	r2,zero,9af0 <__any_on+0x3c>
    9ae0:	20c0142e 	bgeu	r4,r3,9b34 <__any_on+0x80>
    9ae4:	18ffff04 	addi	r3,r3,-4
    9ae8:	19400017 	ldw	r5,0(r3)
    9aec:	283ffc26 	beq	r5,zero,9ae0 <__alt_data_end+0xff009ae0>
    9af0:	00800044 	movi	r2,1
    9af4:	f800283a 	ret
    9af8:	10c00a0e 	bge	r2,r3,9b24 <__any_on+0x70>
    9afc:	1085883a 	add	r2,r2,r2
    9b00:	1085883a 	add	r2,r2,r2
    9b04:	294007cc 	andi	r5,r5,31
    9b08:	2087883a 	add	r3,r4,r2
    9b0c:	283ff026 	beq	r5,zero,9ad0 <__alt_data_end+0xff009ad0>
    9b10:	19800017 	ldw	r6,0(r3)
    9b14:	3144d83a 	srl	r2,r6,r5
    9b18:	114a983a 	sll	r5,r2,r5
    9b1c:	317ff41e 	bne	r6,r5,9af0 <__alt_data_end+0xff009af0>
    9b20:	003feb06 	br	9ad0 <__alt_data_end+0xff009ad0>
    9b24:	1085883a 	add	r2,r2,r2
    9b28:	1085883a 	add	r2,r2,r2
    9b2c:	2087883a 	add	r3,r4,r2
    9b30:	003fe706 	br	9ad0 <__alt_data_end+0xff009ad0>
    9b34:	f800283a 	ret
    9b38:	0005883a 	mov	r2,zero
    9b3c:	f800283a 	ret

00009b40 <_realloc_r>:
    9b40:	defff604 	addi	sp,sp,-40
    9b44:	dc800215 	stw	r18,8(sp)
    9b48:	dfc00915 	stw	ra,36(sp)
    9b4c:	df000815 	stw	fp,32(sp)
    9b50:	ddc00715 	stw	r23,28(sp)
    9b54:	dd800615 	stw	r22,24(sp)
    9b58:	dd400515 	stw	r21,20(sp)
    9b5c:	dd000415 	stw	r20,16(sp)
    9b60:	dcc00315 	stw	r19,12(sp)
    9b64:	dc400115 	stw	r17,4(sp)
    9b68:	dc000015 	stw	r16,0(sp)
    9b6c:	3025883a 	mov	r18,r6
    9b70:	2800b726 	beq	r5,zero,9e50 <_realloc_r+0x310>
    9b74:	282b883a 	mov	r21,r5
    9b78:	2029883a 	mov	r20,r4
    9b7c:	000f9400 	call	f940 <__malloc_lock>
    9b80:	a8bfff17 	ldw	r2,-4(r21)
    9b84:	043fff04 	movi	r16,-4
    9b88:	90c002c4 	addi	r3,r18,11
    9b8c:	01000584 	movi	r4,22
    9b90:	acfffe04 	addi	r19,r21,-8
    9b94:	1420703a 	and	r16,r2,r16
    9b98:	20c0332e 	bgeu	r4,r3,9c68 <_realloc_r+0x128>
    9b9c:	047ffe04 	movi	r17,-8
    9ba0:	1c62703a 	and	r17,r3,r17
    9ba4:	8807883a 	mov	r3,r17
    9ba8:	88005816 	blt	r17,zero,9d0c <_realloc_r+0x1cc>
    9bac:	8c805736 	bltu	r17,r18,9d0c <_realloc_r+0x1cc>
    9bb0:	80c0300e 	bge	r16,r3,9c74 <_realloc_r+0x134>
    9bb4:	07000074 	movhi	fp,1
    9bb8:	e7097304 	addi	fp,fp,9676
    9bbc:	e1c00217 	ldw	r7,8(fp)
    9bc0:	9c09883a 	add	r4,r19,r16
    9bc4:	22000117 	ldw	r8,4(r4)
    9bc8:	21c06326 	beq	r4,r7,9d58 <_realloc_r+0x218>
    9bcc:	017fff84 	movi	r5,-2
    9bd0:	414a703a 	and	r5,r8,r5
    9bd4:	214b883a 	add	r5,r4,r5
    9bd8:	29800117 	ldw	r6,4(r5)
    9bdc:	3180004c 	andi	r6,r6,1
    9be0:	30003f26 	beq	r6,zero,9ce0 <_realloc_r+0x1a0>
    9be4:	1080004c 	andi	r2,r2,1
    9be8:	10008326 	beq	r2,zero,9df8 <_realloc_r+0x2b8>
    9bec:	900b883a 	mov	r5,r18
    9bf0:	a009883a 	mov	r4,r20
    9bf4:	0002c580 	call	2c58 <_malloc_r>
    9bf8:	1025883a 	mov	r18,r2
    9bfc:	10011e26 	beq	r2,zero,a078 <_realloc_r+0x538>
    9c00:	a93fff17 	ldw	r4,-4(r21)
    9c04:	10fffe04 	addi	r3,r2,-8
    9c08:	00bfff84 	movi	r2,-2
    9c0c:	2084703a 	and	r2,r4,r2
    9c10:	9885883a 	add	r2,r19,r2
    9c14:	1880ee26 	beq	r3,r2,9fd0 <_realloc_r+0x490>
    9c18:	81bfff04 	addi	r6,r16,-4
    9c1c:	00800904 	movi	r2,36
    9c20:	1180b836 	bltu	r2,r6,9f04 <_realloc_r+0x3c4>
    9c24:	00c004c4 	movi	r3,19
    9c28:	19809636 	bltu	r3,r6,9e84 <_realloc_r+0x344>
    9c2c:	9005883a 	mov	r2,r18
    9c30:	a807883a 	mov	r3,r21
    9c34:	19000017 	ldw	r4,0(r3)
    9c38:	11000015 	stw	r4,0(r2)
    9c3c:	19000117 	ldw	r4,4(r3)
    9c40:	11000115 	stw	r4,4(r2)
    9c44:	18c00217 	ldw	r3,8(r3)
    9c48:	10c00215 	stw	r3,8(r2)
    9c4c:	a80b883a 	mov	r5,r21
    9c50:	a009883a 	mov	r4,r20
    9c54:	0007aa80 	call	7aa8 <_free_r>
    9c58:	a009883a 	mov	r4,r20
    9c5c:	000f9640 	call	f964 <__malloc_unlock>
    9c60:	9005883a 	mov	r2,r18
    9c64:	00001206 	br	9cb0 <_realloc_r+0x170>
    9c68:	00c00404 	movi	r3,16
    9c6c:	1823883a 	mov	r17,r3
    9c70:	003fce06 	br	9bac <__alt_data_end+0xff009bac>
    9c74:	a825883a 	mov	r18,r21
    9c78:	8445c83a 	sub	r2,r16,r17
    9c7c:	00c003c4 	movi	r3,15
    9c80:	18802636 	bltu	r3,r2,9d1c <_realloc_r+0x1dc>
    9c84:	99800117 	ldw	r6,4(r19)
    9c88:	9c07883a 	add	r3,r19,r16
    9c8c:	3180004c 	andi	r6,r6,1
    9c90:	3420b03a 	or	r16,r6,r16
    9c94:	9c000115 	stw	r16,4(r19)
    9c98:	18800117 	ldw	r2,4(r3)
    9c9c:	10800054 	ori	r2,r2,1
    9ca0:	18800115 	stw	r2,4(r3)
    9ca4:	a009883a 	mov	r4,r20
    9ca8:	000f9640 	call	f964 <__malloc_unlock>
    9cac:	9005883a 	mov	r2,r18
    9cb0:	dfc00917 	ldw	ra,36(sp)
    9cb4:	df000817 	ldw	fp,32(sp)
    9cb8:	ddc00717 	ldw	r23,28(sp)
    9cbc:	dd800617 	ldw	r22,24(sp)
    9cc0:	dd400517 	ldw	r21,20(sp)
    9cc4:	dd000417 	ldw	r20,16(sp)
    9cc8:	dcc00317 	ldw	r19,12(sp)
    9ccc:	dc800217 	ldw	r18,8(sp)
    9cd0:	dc400117 	ldw	r17,4(sp)
    9cd4:	dc000017 	ldw	r16,0(sp)
    9cd8:	dec00a04 	addi	sp,sp,40
    9cdc:	f800283a 	ret
    9ce0:	017fff04 	movi	r5,-4
    9ce4:	414a703a 	and	r5,r8,r5
    9ce8:	814d883a 	add	r6,r16,r5
    9cec:	30c01f16 	blt	r6,r3,9d6c <_realloc_r+0x22c>
    9cf0:	20800317 	ldw	r2,12(r4)
    9cf4:	20c00217 	ldw	r3,8(r4)
    9cf8:	a825883a 	mov	r18,r21
    9cfc:	3021883a 	mov	r16,r6
    9d00:	18800315 	stw	r2,12(r3)
    9d04:	10c00215 	stw	r3,8(r2)
    9d08:	003fdb06 	br	9c78 <__alt_data_end+0xff009c78>
    9d0c:	00800304 	movi	r2,12
    9d10:	a0800015 	stw	r2,0(r20)
    9d14:	0005883a 	mov	r2,zero
    9d18:	003fe506 	br	9cb0 <__alt_data_end+0xff009cb0>
    9d1c:	98c00117 	ldw	r3,4(r19)
    9d20:	9c4b883a 	add	r5,r19,r17
    9d24:	11000054 	ori	r4,r2,1
    9d28:	18c0004c 	andi	r3,r3,1
    9d2c:	1c62b03a 	or	r17,r3,r17
    9d30:	9c400115 	stw	r17,4(r19)
    9d34:	29000115 	stw	r4,4(r5)
    9d38:	2885883a 	add	r2,r5,r2
    9d3c:	10c00117 	ldw	r3,4(r2)
    9d40:	29400204 	addi	r5,r5,8
    9d44:	a009883a 	mov	r4,r20
    9d48:	18c00054 	ori	r3,r3,1
    9d4c:	10c00115 	stw	r3,4(r2)
    9d50:	0007aa80 	call	7aa8 <_free_r>
    9d54:	003fd306 	br	9ca4 <__alt_data_end+0xff009ca4>
    9d58:	017fff04 	movi	r5,-4
    9d5c:	414a703a 	and	r5,r8,r5
    9d60:	89800404 	addi	r6,r17,16
    9d64:	8151883a 	add	r8,r16,r5
    9d68:	4180590e 	bge	r8,r6,9ed0 <_realloc_r+0x390>
    9d6c:	1080004c 	andi	r2,r2,1
    9d70:	103f9e1e 	bne	r2,zero,9bec <__alt_data_end+0xff009bec>
    9d74:	adbffe17 	ldw	r22,-8(r21)
    9d78:	00bfff04 	movi	r2,-4
    9d7c:	9dadc83a 	sub	r22,r19,r22
    9d80:	b1800117 	ldw	r6,4(r22)
    9d84:	3084703a 	and	r2,r6,r2
    9d88:	20002026 	beq	r4,zero,9e0c <_realloc_r+0x2cc>
    9d8c:	80af883a 	add	r23,r16,r2
    9d90:	b96f883a 	add	r23,r23,r5
    9d94:	21c05f26 	beq	r4,r7,9f14 <_realloc_r+0x3d4>
    9d98:	b8c01c16 	blt	r23,r3,9e0c <_realloc_r+0x2cc>
    9d9c:	20800317 	ldw	r2,12(r4)
    9da0:	20c00217 	ldw	r3,8(r4)
    9da4:	81bfff04 	addi	r6,r16,-4
    9da8:	01000904 	movi	r4,36
    9dac:	18800315 	stw	r2,12(r3)
    9db0:	10c00215 	stw	r3,8(r2)
    9db4:	b0c00217 	ldw	r3,8(r22)
    9db8:	b0800317 	ldw	r2,12(r22)
    9dbc:	b4800204 	addi	r18,r22,8
    9dc0:	18800315 	stw	r2,12(r3)
    9dc4:	10c00215 	stw	r3,8(r2)
    9dc8:	21801b36 	bltu	r4,r6,9e38 <_realloc_r+0x2f8>
    9dcc:	008004c4 	movi	r2,19
    9dd0:	1180352e 	bgeu	r2,r6,9ea8 <_realloc_r+0x368>
    9dd4:	a8800017 	ldw	r2,0(r21)
    9dd8:	b0800215 	stw	r2,8(r22)
    9ddc:	a8800117 	ldw	r2,4(r21)
    9de0:	b0800315 	stw	r2,12(r22)
    9de4:	008006c4 	movi	r2,27
    9de8:	11807f36 	bltu	r2,r6,9fe8 <_realloc_r+0x4a8>
    9dec:	b0800404 	addi	r2,r22,16
    9df0:	ad400204 	addi	r21,r21,8
    9df4:	00002d06 	br	9eac <_realloc_r+0x36c>
    9df8:	adbffe17 	ldw	r22,-8(r21)
    9dfc:	00bfff04 	movi	r2,-4
    9e00:	9dadc83a 	sub	r22,r19,r22
    9e04:	b1000117 	ldw	r4,4(r22)
    9e08:	2084703a 	and	r2,r4,r2
    9e0c:	b03f7726 	beq	r22,zero,9bec <__alt_data_end+0xff009bec>
    9e10:	80af883a 	add	r23,r16,r2
    9e14:	b8ff7516 	blt	r23,r3,9bec <__alt_data_end+0xff009bec>
    9e18:	b0800317 	ldw	r2,12(r22)
    9e1c:	b0c00217 	ldw	r3,8(r22)
    9e20:	81bfff04 	addi	r6,r16,-4
    9e24:	01000904 	movi	r4,36
    9e28:	18800315 	stw	r2,12(r3)
    9e2c:	10c00215 	stw	r3,8(r2)
    9e30:	b4800204 	addi	r18,r22,8
    9e34:	21bfe52e 	bgeu	r4,r6,9dcc <__alt_data_end+0xff009dcc>
    9e38:	a80b883a 	mov	r5,r21
    9e3c:	9009883a 	mov	r4,r18
    9e40:	00088c00 	call	88c0 <memmove>
    9e44:	b821883a 	mov	r16,r23
    9e48:	b027883a 	mov	r19,r22
    9e4c:	003f8a06 	br	9c78 <__alt_data_end+0xff009c78>
    9e50:	300b883a 	mov	r5,r6
    9e54:	dfc00917 	ldw	ra,36(sp)
    9e58:	df000817 	ldw	fp,32(sp)
    9e5c:	ddc00717 	ldw	r23,28(sp)
    9e60:	dd800617 	ldw	r22,24(sp)
    9e64:	dd400517 	ldw	r21,20(sp)
    9e68:	dd000417 	ldw	r20,16(sp)
    9e6c:	dcc00317 	ldw	r19,12(sp)
    9e70:	dc800217 	ldw	r18,8(sp)
    9e74:	dc400117 	ldw	r17,4(sp)
    9e78:	dc000017 	ldw	r16,0(sp)
    9e7c:	dec00a04 	addi	sp,sp,40
    9e80:	0002c581 	jmpi	2c58 <_malloc_r>
    9e84:	a8c00017 	ldw	r3,0(r21)
    9e88:	90c00015 	stw	r3,0(r18)
    9e8c:	a8c00117 	ldw	r3,4(r21)
    9e90:	90c00115 	stw	r3,4(r18)
    9e94:	00c006c4 	movi	r3,27
    9e98:	19804536 	bltu	r3,r6,9fb0 <_realloc_r+0x470>
    9e9c:	90800204 	addi	r2,r18,8
    9ea0:	a8c00204 	addi	r3,r21,8
    9ea4:	003f6306 	br	9c34 <__alt_data_end+0xff009c34>
    9ea8:	9005883a 	mov	r2,r18
    9eac:	a8c00017 	ldw	r3,0(r21)
    9eb0:	b821883a 	mov	r16,r23
    9eb4:	b027883a 	mov	r19,r22
    9eb8:	10c00015 	stw	r3,0(r2)
    9ebc:	a8c00117 	ldw	r3,4(r21)
    9ec0:	10c00115 	stw	r3,4(r2)
    9ec4:	a8c00217 	ldw	r3,8(r21)
    9ec8:	10c00215 	stw	r3,8(r2)
    9ecc:	003f6a06 	br	9c78 <__alt_data_end+0xff009c78>
    9ed0:	9c67883a 	add	r19,r19,r17
    9ed4:	4445c83a 	sub	r2,r8,r17
    9ed8:	e4c00215 	stw	r19,8(fp)
    9edc:	10800054 	ori	r2,r2,1
    9ee0:	98800115 	stw	r2,4(r19)
    9ee4:	a8bfff17 	ldw	r2,-4(r21)
    9ee8:	a009883a 	mov	r4,r20
    9eec:	1080004c 	andi	r2,r2,1
    9ef0:	1462b03a 	or	r17,r2,r17
    9ef4:	ac7fff15 	stw	r17,-4(r21)
    9ef8:	000f9640 	call	f964 <__malloc_unlock>
    9efc:	a805883a 	mov	r2,r21
    9f00:	003f6b06 	br	9cb0 <__alt_data_end+0xff009cb0>
    9f04:	a80b883a 	mov	r5,r21
    9f08:	9009883a 	mov	r4,r18
    9f0c:	00088c00 	call	88c0 <memmove>
    9f10:	003f4e06 	br	9c4c <__alt_data_end+0xff009c4c>
    9f14:	89000404 	addi	r4,r17,16
    9f18:	b93fbc16 	blt	r23,r4,9e0c <__alt_data_end+0xff009e0c>
    9f1c:	b0800317 	ldw	r2,12(r22)
    9f20:	b0c00217 	ldw	r3,8(r22)
    9f24:	81bfff04 	addi	r6,r16,-4
    9f28:	01000904 	movi	r4,36
    9f2c:	18800315 	stw	r2,12(r3)
    9f30:	10c00215 	stw	r3,8(r2)
    9f34:	b4800204 	addi	r18,r22,8
    9f38:	21804336 	bltu	r4,r6,a048 <_realloc_r+0x508>
    9f3c:	008004c4 	movi	r2,19
    9f40:	11803f2e 	bgeu	r2,r6,a040 <_realloc_r+0x500>
    9f44:	a8800017 	ldw	r2,0(r21)
    9f48:	b0800215 	stw	r2,8(r22)
    9f4c:	a8800117 	ldw	r2,4(r21)
    9f50:	b0800315 	stw	r2,12(r22)
    9f54:	008006c4 	movi	r2,27
    9f58:	11803f36 	bltu	r2,r6,a058 <_realloc_r+0x518>
    9f5c:	b0800404 	addi	r2,r22,16
    9f60:	ad400204 	addi	r21,r21,8
    9f64:	a8c00017 	ldw	r3,0(r21)
    9f68:	10c00015 	stw	r3,0(r2)
    9f6c:	a8c00117 	ldw	r3,4(r21)
    9f70:	10c00115 	stw	r3,4(r2)
    9f74:	a8c00217 	ldw	r3,8(r21)
    9f78:	10c00215 	stw	r3,8(r2)
    9f7c:	b447883a 	add	r3,r22,r17
    9f80:	bc45c83a 	sub	r2,r23,r17
    9f84:	e0c00215 	stw	r3,8(fp)
    9f88:	10800054 	ori	r2,r2,1
    9f8c:	18800115 	stw	r2,4(r3)
    9f90:	b0800117 	ldw	r2,4(r22)
    9f94:	a009883a 	mov	r4,r20
    9f98:	1080004c 	andi	r2,r2,1
    9f9c:	1462b03a 	or	r17,r2,r17
    9fa0:	b4400115 	stw	r17,4(r22)
    9fa4:	000f9640 	call	f964 <__malloc_unlock>
    9fa8:	9005883a 	mov	r2,r18
    9fac:	003f4006 	br	9cb0 <__alt_data_end+0xff009cb0>
    9fb0:	a8c00217 	ldw	r3,8(r21)
    9fb4:	90c00215 	stw	r3,8(r18)
    9fb8:	a8c00317 	ldw	r3,12(r21)
    9fbc:	90c00315 	stw	r3,12(r18)
    9fc0:	30801126 	beq	r6,r2,a008 <_realloc_r+0x4c8>
    9fc4:	90800404 	addi	r2,r18,16
    9fc8:	a8c00404 	addi	r3,r21,16
    9fcc:	003f1906 	br	9c34 <__alt_data_end+0xff009c34>
    9fd0:	90ffff17 	ldw	r3,-4(r18)
    9fd4:	00bfff04 	movi	r2,-4
    9fd8:	a825883a 	mov	r18,r21
    9fdc:	1884703a 	and	r2,r3,r2
    9fe0:	80a1883a 	add	r16,r16,r2
    9fe4:	003f2406 	br	9c78 <__alt_data_end+0xff009c78>
    9fe8:	a8800217 	ldw	r2,8(r21)
    9fec:	b0800415 	stw	r2,16(r22)
    9ff0:	a8800317 	ldw	r2,12(r21)
    9ff4:	b0800515 	stw	r2,20(r22)
    9ff8:	31000a26 	beq	r6,r4,a024 <_realloc_r+0x4e4>
    9ffc:	b0800604 	addi	r2,r22,24
    a000:	ad400404 	addi	r21,r21,16
    a004:	003fa906 	br	9eac <__alt_data_end+0xff009eac>
    a008:	a9000417 	ldw	r4,16(r21)
    a00c:	90800604 	addi	r2,r18,24
    a010:	a8c00604 	addi	r3,r21,24
    a014:	91000415 	stw	r4,16(r18)
    a018:	a9000517 	ldw	r4,20(r21)
    a01c:	91000515 	stw	r4,20(r18)
    a020:	003f0406 	br	9c34 <__alt_data_end+0xff009c34>
    a024:	a8c00417 	ldw	r3,16(r21)
    a028:	ad400604 	addi	r21,r21,24
    a02c:	b0800804 	addi	r2,r22,32
    a030:	b0c00615 	stw	r3,24(r22)
    a034:	a8ffff17 	ldw	r3,-4(r21)
    a038:	b0c00715 	stw	r3,28(r22)
    a03c:	003f9b06 	br	9eac <__alt_data_end+0xff009eac>
    a040:	9005883a 	mov	r2,r18
    a044:	003fc706 	br	9f64 <__alt_data_end+0xff009f64>
    a048:	a80b883a 	mov	r5,r21
    a04c:	9009883a 	mov	r4,r18
    a050:	00088c00 	call	88c0 <memmove>
    a054:	003fc906 	br	9f7c <__alt_data_end+0xff009f7c>
    a058:	a8800217 	ldw	r2,8(r21)
    a05c:	b0800415 	stw	r2,16(r22)
    a060:	a8800317 	ldw	r2,12(r21)
    a064:	b0800515 	stw	r2,20(r22)
    a068:	31000726 	beq	r6,r4,a088 <_realloc_r+0x548>
    a06c:	b0800604 	addi	r2,r22,24
    a070:	ad400404 	addi	r21,r21,16
    a074:	003fbb06 	br	9f64 <__alt_data_end+0xff009f64>
    a078:	a009883a 	mov	r4,r20
    a07c:	000f9640 	call	f964 <__malloc_unlock>
    a080:	0005883a 	mov	r2,zero
    a084:	003f0a06 	br	9cb0 <__alt_data_end+0xff009cb0>
    a088:	a8c00417 	ldw	r3,16(r21)
    a08c:	ad400604 	addi	r21,r21,24
    a090:	b0800804 	addi	r2,r22,32
    a094:	b0c00615 	stw	r3,24(r22)
    a098:	a8ffff17 	ldw	r3,-4(r21)
    a09c:	b0c00715 	stw	r3,28(r22)
    a0a0:	003fb006 	br	9f64 <__alt_data_end+0xff009f64>

0000a0a4 <__fpclassifyd>:
    a0a4:	00a00034 	movhi	r2,32768
    a0a8:	10bfffc4 	addi	r2,r2,-1
    a0ac:	2884703a 	and	r2,r5,r2
    a0b0:	10000726 	beq	r2,zero,a0d0 <__fpclassifyd+0x2c>
    a0b4:	00fffc34 	movhi	r3,65520
    a0b8:	019ff834 	movhi	r6,32736
    a0bc:	28c7883a 	add	r3,r5,r3
    a0c0:	31bfffc4 	addi	r6,r6,-1
    a0c4:	30c00536 	bltu	r6,r3,a0dc <__fpclassifyd+0x38>
    a0c8:	00800104 	movi	r2,4
    a0cc:	f800283a 	ret
    a0d0:	2000021e 	bne	r4,zero,a0dc <__fpclassifyd+0x38>
    a0d4:	00800084 	movi	r2,2
    a0d8:	f800283a 	ret
    a0dc:	00dffc34 	movhi	r3,32752
    a0e0:	019ff834 	movhi	r6,32736
    a0e4:	28cb883a 	add	r5,r5,r3
    a0e8:	31bfffc4 	addi	r6,r6,-1
    a0ec:	317ff62e 	bgeu	r6,r5,a0c8 <__alt_data_end+0xff00a0c8>
    a0f0:	01400434 	movhi	r5,16
    a0f4:	297fffc4 	addi	r5,r5,-1
    a0f8:	28800236 	bltu	r5,r2,a104 <__fpclassifyd+0x60>
    a0fc:	008000c4 	movi	r2,3
    a100:	f800283a 	ret
    a104:	10c00226 	beq	r2,r3,a110 <__fpclassifyd+0x6c>
    a108:	0005883a 	mov	r2,zero
    a10c:	f800283a 	ret
    a110:	2005003a 	cmpeq	r2,r4,zero
    a114:	f800283a 	ret

0000a118 <__sread>:
    a118:	defffe04 	addi	sp,sp,-8
    a11c:	dc000015 	stw	r16,0(sp)
    a120:	2821883a 	mov	r16,r5
    a124:	2940038f 	ldh	r5,14(r5)
    a128:	dfc00115 	stw	ra,4(sp)
    a12c:	000bf0c0 	call	bf0c <_read_r>
    a130:	10000716 	blt	r2,zero,a150 <__sread+0x38>
    a134:	80c01417 	ldw	r3,80(r16)
    a138:	1887883a 	add	r3,r3,r2
    a13c:	80c01415 	stw	r3,80(r16)
    a140:	dfc00117 	ldw	ra,4(sp)
    a144:	dc000017 	ldw	r16,0(sp)
    a148:	dec00204 	addi	sp,sp,8
    a14c:	f800283a 	ret
    a150:	80c0030b 	ldhu	r3,12(r16)
    a154:	18fbffcc 	andi	r3,r3,61439
    a158:	80c0030d 	sth	r3,12(r16)
    a15c:	dfc00117 	ldw	ra,4(sp)
    a160:	dc000017 	ldw	r16,0(sp)
    a164:	dec00204 	addi	sp,sp,8
    a168:	f800283a 	ret

0000a16c <__seofread>:
    a16c:	0005883a 	mov	r2,zero
    a170:	f800283a 	ret

0000a174 <__swrite>:
    a174:	2880030b 	ldhu	r2,12(r5)
    a178:	defffb04 	addi	sp,sp,-20
    a17c:	dcc00315 	stw	r19,12(sp)
    a180:	dc800215 	stw	r18,8(sp)
    a184:	dc400115 	stw	r17,4(sp)
    a188:	dc000015 	stw	r16,0(sp)
    a18c:	dfc00415 	stw	ra,16(sp)
    a190:	10c0400c 	andi	r3,r2,256
    a194:	2821883a 	mov	r16,r5
    a198:	2023883a 	mov	r17,r4
    a19c:	3025883a 	mov	r18,r6
    a1a0:	3827883a 	mov	r19,r7
    a1a4:	18000526 	beq	r3,zero,a1bc <__swrite+0x48>
    a1a8:	2940038f 	ldh	r5,14(r5)
    a1ac:	01c00084 	movi	r7,2
    a1b0:	000d883a 	mov	r6,zero
    a1b4:	000beac0 	call	beac <_lseek_r>
    a1b8:	8080030b 	ldhu	r2,12(r16)
    a1bc:	8140038f 	ldh	r5,14(r16)
    a1c0:	10bbffcc 	andi	r2,r2,61439
    a1c4:	980f883a 	mov	r7,r19
    a1c8:	900d883a 	mov	r6,r18
    a1cc:	8809883a 	mov	r4,r17
    a1d0:	8080030d 	sth	r2,12(r16)
    a1d4:	dfc00417 	ldw	ra,16(sp)
    a1d8:	dcc00317 	ldw	r19,12(sp)
    a1dc:	dc800217 	ldw	r18,8(sp)
    a1e0:	dc400117 	ldw	r17,4(sp)
    a1e4:	dc000017 	ldw	r16,0(sp)
    a1e8:	dec00504 	addi	sp,sp,20
    a1ec:	000b9781 	jmpi	b978 <_write_r>

0000a1f0 <__sseek>:
    a1f0:	defffe04 	addi	sp,sp,-8
    a1f4:	dc000015 	stw	r16,0(sp)
    a1f8:	2821883a 	mov	r16,r5
    a1fc:	2940038f 	ldh	r5,14(r5)
    a200:	dfc00115 	stw	ra,4(sp)
    a204:	000beac0 	call	beac <_lseek_r>
    a208:	00ffffc4 	movi	r3,-1
    a20c:	10c00826 	beq	r2,r3,a230 <__sseek+0x40>
    a210:	80c0030b 	ldhu	r3,12(r16)
    a214:	80801415 	stw	r2,80(r16)
    a218:	18c40014 	ori	r3,r3,4096
    a21c:	80c0030d 	sth	r3,12(r16)
    a220:	dfc00117 	ldw	ra,4(sp)
    a224:	dc000017 	ldw	r16,0(sp)
    a228:	dec00204 	addi	sp,sp,8
    a22c:	f800283a 	ret
    a230:	80c0030b 	ldhu	r3,12(r16)
    a234:	18fbffcc 	andi	r3,r3,61439
    a238:	80c0030d 	sth	r3,12(r16)
    a23c:	dfc00117 	ldw	ra,4(sp)
    a240:	dc000017 	ldw	r16,0(sp)
    a244:	dec00204 	addi	sp,sp,8
    a248:	f800283a 	ret

0000a24c <__sclose>:
    a24c:	2940038f 	ldh	r5,14(r5)
    a250:	000b9d81 	jmpi	b9d8 <_close_r>

0000a254 <strcmp>:
    a254:	2144b03a 	or	r2,r4,r5
    a258:	108000cc 	andi	r2,r2,3
    a25c:	1000171e 	bne	r2,zero,a2bc <strcmp+0x68>
    a260:	20800017 	ldw	r2,0(r4)
    a264:	28c00017 	ldw	r3,0(r5)
    a268:	10c0141e 	bne	r2,r3,a2bc <strcmp+0x68>
    a26c:	027fbff4 	movhi	r9,65279
    a270:	4a7fbfc4 	addi	r9,r9,-257
    a274:	0086303a 	nor	r3,zero,r2
    a278:	02202074 	movhi	r8,32897
    a27c:	1245883a 	add	r2,r2,r9
    a280:	42202004 	addi	r8,r8,-32640
    a284:	10c4703a 	and	r2,r2,r3
    a288:	1204703a 	and	r2,r2,r8
    a28c:	10000226 	beq	r2,zero,a298 <strcmp+0x44>
    a290:	00002306 	br	a320 <strcmp+0xcc>
    a294:	1000221e 	bne	r2,zero,a320 <strcmp+0xcc>
    a298:	21000104 	addi	r4,r4,4
    a29c:	20c00017 	ldw	r3,0(r4)
    a2a0:	29400104 	addi	r5,r5,4
    a2a4:	29800017 	ldw	r6,0(r5)
    a2a8:	1a4f883a 	add	r7,r3,r9
    a2ac:	00c4303a 	nor	r2,zero,r3
    a2b0:	3884703a 	and	r2,r7,r2
    a2b4:	1204703a 	and	r2,r2,r8
    a2b8:	19bff626 	beq	r3,r6,a294 <__alt_data_end+0xff00a294>
    a2bc:	20800003 	ldbu	r2,0(r4)
    a2c0:	10c03fcc 	andi	r3,r2,255
    a2c4:	18c0201c 	xori	r3,r3,128
    a2c8:	18ffe004 	addi	r3,r3,-128
    a2cc:	18000c26 	beq	r3,zero,a300 <strcmp+0xac>
    a2d0:	29800007 	ldb	r6,0(r5)
    a2d4:	19800326 	beq	r3,r6,a2e4 <strcmp+0x90>
    a2d8:	00001306 	br	a328 <strcmp+0xd4>
    a2dc:	29800007 	ldb	r6,0(r5)
    a2e0:	11800b1e 	bne	r2,r6,a310 <strcmp+0xbc>
    a2e4:	21000044 	addi	r4,r4,1
    a2e8:	20c00003 	ldbu	r3,0(r4)
    a2ec:	29400044 	addi	r5,r5,1
    a2f0:	18803fcc 	andi	r2,r3,255
    a2f4:	1080201c 	xori	r2,r2,128
    a2f8:	10bfe004 	addi	r2,r2,-128
    a2fc:	103ff71e 	bne	r2,zero,a2dc <__alt_data_end+0xff00a2dc>
    a300:	0007883a 	mov	r3,zero
    a304:	28800003 	ldbu	r2,0(r5)
    a308:	1885c83a 	sub	r2,r3,r2
    a30c:	f800283a 	ret
    a310:	28800003 	ldbu	r2,0(r5)
    a314:	18c03fcc 	andi	r3,r3,255
    a318:	1885c83a 	sub	r2,r3,r2
    a31c:	f800283a 	ret
    a320:	0005883a 	mov	r2,zero
    a324:	f800283a 	ret
    a328:	10c03fcc 	andi	r3,r2,255
    a32c:	003ff506 	br	a304 <__alt_data_end+0xff00a304>

0000a330 <__sprint_r.part.0>:
    a330:	28801917 	ldw	r2,100(r5)
    a334:	defff604 	addi	sp,sp,-40
    a338:	dd400515 	stw	r21,20(sp)
    a33c:	dfc00915 	stw	ra,36(sp)
    a340:	df000815 	stw	fp,32(sp)
    a344:	ddc00715 	stw	r23,28(sp)
    a348:	dd800615 	stw	r22,24(sp)
    a34c:	dd000415 	stw	r20,16(sp)
    a350:	dcc00315 	stw	r19,12(sp)
    a354:	dc800215 	stw	r18,8(sp)
    a358:	dc400115 	stw	r17,4(sp)
    a35c:	dc000015 	stw	r16,0(sp)
    a360:	1088000c 	andi	r2,r2,8192
    a364:	302b883a 	mov	r21,r6
    a368:	10002e26 	beq	r2,zero,a424 <__sprint_r.part.0+0xf4>
    a36c:	30800217 	ldw	r2,8(r6)
    a370:	35800017 	ldw	r22,0(r6)
    a374:	10002926 	beq	r2,zero,a41c <__sprint_r.part.0+0xec>
    a378:	2827883a 	mov	r19,r5
    a37c:	2029883a 	mov	r20,r4
    a380:	b5c00104 	addi	r23,r22,4
    a384:	04bfffc4 	movi	r18,-1
    a388:	bc400017 	ldw	r17,0(r23)
    a38c:	b4000017 	ldw	r16,0(r22)
    a390:	0039883a 	mov	fp,zero
    a394:	8822d0ba 	srli	r17,r17,2
    a398:	8800031e 	bne	r17,zero,a3a8 <__sprint_r.part.0+0x78>
    a39c:	00001806 	br	a400 <__sprint_r.part.0+0xd0>
    a3a0:	84000104 	addi	r16,r16,4
    a3a4:	8f001526 	beq	r17,fp,a3fc <__sprint_r.part.0+0xcc>
    a3a8:	81400017 	ldw	r5,0(r16)
    a3ac:	980d883a 	mov	r6,r19
    a3b0:	a009883a 	mov	r4,r20
    a3b4:	000bd580 	call	bd58 <_fputwc_r>
    a3b8:	e7000044 	addi	fp,fp,1
    a3bc:	14bff81e 	bne	r2,r18,a3a0 <__alt_data_end+0xff00a3a0>
    a3c0:	9005883a 	mov	r2,r18
    a3c4:	a8000215 	stw	zero,8(r21)
    a3c8:	a8000115 	stw	zero,4(r21)
    a3cc:	dfc00917 	ldw	ra,36(sp)
    a3d0:	df000817 	ldw	fp,32(sp)
    a3d4:	ddc00717 	ldw	r23,28(sp)
    a3d8:	dd800617 	ldw	r22,24(sp)
    a3dc:	dd400517 	ldw	r21,20(sp)
    a3e0:	dd000417 	ldw	r20,16(sp)
    a3e4:	dcc00317 	ldw	r19,12(sp)
    a3e8:	dc800217 	ldw	r18,8(sp)
    a3ec:	dc400117 	ldw	r17,4(sp)
    a3f0:	dc000017 	ldw	r16,0(sp)
    a3f4:	dec00a04 	addi	sp,sp,40
    a3f8:	f800283a 	ret
    a3fc:	a8800217 	ldw	r2,8(r21)
    a400:	8c63883a 	add	r17,r17,r17
    a404:	8c63883a 	add	r17,r17,r17
    a408:	1445c83a 	sub	r2,r2,r17
    a40c:	a8800215 	stw	r2,8(r21)
    a410:	b5800204 	addi	r22,r22,8
    a414:	bdc00204 	addi	r23,r23,8
    a418:	103fdb1e 	bne	r2,zero,a388 <__alt_data_end+0xff00a388>
    a41c:	0005883a 	mov	r2,zero
    a420:	003fe806 	br	a3c4 <__alt_data_end+0xff00a3c4>
    a424:	0007db80 	call	7db8 <__sfvwrite_r>
    a428:	003fe606 	br	a3c4 <__alt_data_end+0xff00a3c4>

0000a42c <__sprint_r>:
    a42c:	30c00217 	ldw	r3,8(r6)
    a430:	18000126 	beq	r3,zero,a438 <__sprint_r+0xc>
    a434:	000a3301 	jmpi	a330 <__sprint_r.part.0>
    a438:	30000115 	stw	zero,4(r6)
    a43c:	0005883a 	mov	r2,zero
    a440:	f800283a 	ret

0000a444 <___vfiprintf_internal_r>:
    a444:	deffc904 	addi	sp,sp,-220
    a448:	df003515 	stw	fp,212(sp)
    a44c:	dd003115 	stw	r20,196(sp)
    a450:	dfc03615 	stw	ra,216(sp)
    a454:	ddc03415 	stw	r23,208(sp)
    a458:	dd803315 	stw	r22,204(sp)
    a45c:	dd403215 	stw	r21,200(sp)
    a460:	dcc03015 	stw	r19,192(sp)
    a464:	dc802f15 	stw	r18,188(sp)
    a468:	dc402e15 	stw	r17,184(sp)
    a46c:	dc002d15 	stw	r16,180(sp)
    a470:	d9002015 	stw	r4,128(sp)
    a474:	d9c02215 	stw	r7,136(sp)
    a478:	2829883a 	mov	r20,r5
    a47c:	3039883a 	mov	fp,r6
    a480:	20000226 	beq	r4,zero,a48c <___vfiprintf_internal_r+0x48>
    a484:	20800e17 	ldw	r2,56(r4)
    a488:	1000cf26 	beq	r2,zero,a7c8 <___vfiprintf_internal_r+0x384>
    a48c:	a080030b 	ldhu	r2,12(r20)
    a490:	10c8000c 	andi	r3,r2,8192
    a494:	1800061e 	bne	r3,zero,a4b0 <___vfiprintf_internal_r+0x6c>
    a498:	a1001917 	ldw	r4,100(r20)
    a49c:	00f7ffc4 	movi	r3,-8193
    a4a0:	10880014 	ori	r2,r2,8192
    a4a4:	20c6703a 	and	r3,r4,r3
    a4a8:	a080030d 	sth	r2,12(r20)
    a4ac:	a0c01915 	stw	r3,100(r20)
    a4b0:	10c0020c 	andi	r3,r2,8
    a4b4:	1800a926 	beq	r3,zero,a75c <___vfiprintf_internal_r+0x318>
    a4b8:	a0c00417 	ldw	r3,16(r20)
    a4bc:	1800a726 	beq	r3,zero,a75c <___vfiprintf_internal_r+0x318>
    a4c0:	1080068c 	andi	r2,r2,26
    a4c4:	00c00284 	movi	r3,10
    a4c8:	10c0ac26 	beq	r2,r3,a77c <___vfiprintf_internal_r+0x338>
    a4cc:	da801a04 	addi	r10,sp,104
    a4d0:	da801e15 	stw	r10,120(sp)
    a4d4:	d8801e17 	ldw	r2,120(sp)
    a4d8:	da8019c4 	addi	r10,sp,103
    a4dc:	05800074 	movhi	r22,1
    a4e0:	05c00074 	movhi	r23,1
    a4e4:	da801f15 	stw	r10,124(sp)
    a4e8:	1295c83a 	sub	r10,r2,r10
    a4ec:	b5892404 	addi	r22,r22,9360
    a4f0:	bdc92004 	addi	r23,r23,9344
    a4f4:	dec01a15 	stw	sp,104(sp)
    a4f8:	d8001c15 	stw	zero,112(sp)
    a4fc:	d8001b15 	stw	zero,108(sp)
    a500:	d8002615 	stw	zero,152(sp)
    a504:	d8002315 	stw	zero,140(sp)
    a508:	da802715 	stw	r10,156(sp)
    a50c:	d811883a 	mov	r8,sp
    a510:	dd002115 	stw	r20,132(sp)
    a514:	e021883a 	mov	r16,fp
    a518:	80800007 	ldb	r2,0(r16)
    a51c:	1003ea26 	beq	r2,zero,b4c8 <___vfiprintf_internal_r+0x1084>
    a520:	00c00944 	movi	r3,37
    a524:	8025883a 	mov	r18,r16
    a528:	10c0021e 	bne	r2,r3,a534 <___vfiprintf_internal_r+0xf0>
    a52c:	00001606 	br	a588 <___vfiprintf_internal_r+0x144>
    a530:	10c00326 	beq	r2,r3,a540 <___vfiprintf_internal_r+0xfc>
    a534:	94800044 	addi	r18,r18,1
    a538:	90800007 	ldb	r2,0(r18)
    a53c:	103ffc1e 	bne	r2,zero,a530 <__alt_data_end+0xff00a530>
    a540:	9423c83a 	sub	r17,r18,r16
    a544:	88001026 	beq	r17,zero,a588 <___vfiprintf_internal_r+0x144>
    a548:	d8c01c17 	ldw	r3,112(sp)
    a54c:	d8801b17 	ldw	r2,108(sp)
    a550:	44000015 	stw	r16,0(r8)
    a554:	88c7883a 	add	r3,r17,r3
    a558:	10800044 	addi	r2,r2,1
    a55c:	44400115 	stw	r17,4(r8)
    a560:	d8c01c15 	stw	r3,112(sp)
    a564:	d8801b15 	stw	r2,108(sp)
    a568:	010001c4 	movi	r4,7
    a56c:	2080760e 	bge	r4,r2,a748 <___vfiprintf_internal_r+0x304>
    a570:	1803821e 	bne	r3,zero,b37c <___vfiprintf_internal_r+0xf38>
    a574:	da802317 	ldw	r10,140(sp)
    a578:	d8001b15 	stw	zero,108(sp)
    a57c:	d811883a 	mov	r8,sp
    a580:	5455883a 	add	r10,r10,r17
    a584:	da802315 	stw	r10,140(sp)
    a588:	90800007 	ldb	r2,0(r18)
    a58c:	10044626 	beq	r2,zero,b6a8 <___vfiprintf_internal_r+0x1264>
    a590:	90c00047 	ldb	r3,1(r18)
    a594:	94000044 	addi	r16,r18,1
    a598:	d8001d85 	stb	zero,118(sp)
    a59c:	0009883a 	mov	r4,zero
    a5a0:	000f883a 	mov	r7,zero
    a5a4:	027fffc4 	movi	r9,-1
    a5a8:	0023883a 	mov	r17,zero
    a5ac:	0029883a 	mov	r20,zero
    a5b0:	01401604 	movi	r5,88
    a5b4:	01800244 	movi	r6,9
    a5b8:	03400a84 	movi	r13,42
    a5bc:	03001b04 	movi	r12,108
    a5c0:	84000044 	addi	r16,r16,1
    a5c4:	18bff804 	addi	r2,r3,-32
    a5c8:	28827336 	bltu	r5,r2,af98 <___vfiprintf_internal_r+0xb54>
    a5cc:	100490ba 	slli	r2,r2,2
    a5d0:	02800074 	movhi	r10,1
    a5d4:	52a97904 	addi	r10,r10,-23068
    a5d8:	1285883a 	add	r2,r2,r10
    a5dc:	10800017 	ldw	r2,0(r2)
    a5e0:	1000683a 	jmp	r2
    a5e4:	0000accc 	andi	zero,zero,691
    a5e8:	0000af98 	cmpnei	zero,zero,702
    a5ec:	0000af98 	cmpnei	zero,zero,702
    a5f0:	0000acec 	andhi	zero,zero,691
    a5f4:	0000af98 	cmpnei	zero,zero,702
    a5f8:	0000af98 	cmpnei	zero,zero,702
    a5fc:	0000af98 	cmpnei	zero,zero,702
    a600:	0000af98 	cmpnei	zero,zero,702
    a604:	0000af98 	cmpnei	zero,zero,702
    a608:	0000af98 	cmpnei	zero,zero,702
    a60c:	0000aed4 	movui	zero,699
    a610:	0000aef0 	cmpltui	zero,zero,699
    a614:	0000af98 	cmpnei	zero,zero,702
    a618:	0000a7d8 	cmpnei	zero,zero,671
    a61c:	0000af00 	call	af0 <conv_grayscale+0x3c>
    a620:	0000af98 	cmpnei	zero,zero,702
    a624:	0000acf8 	rdprs	zero,zero,691
    a628:	0000ad04 	movi	zero,692
    a62c:	0000ad04 	movi	zero,692
    a630:	0000ad04 	movi	zero,692
    a634:	0000ad04 	movi	zero,692
    a638:	0000ad04 	movi	zero,692
    a63c:	0000ad04 	movi	zero,692
    a640:	0000ad04 	movi	zero,692
    a644:	0000ad04 	movi	zero,692
    a648:	0000ad04 	movi	zero,692
    a64c:	0000af98 	cmpnei	zero,zero,702
    a650:	0000af98 	cmpnei	zero,zero,702
    a654:	0000af98 	cmpnei	zero,zero,702
    a658:	0000af98 	cmpnei	zero,zero,702
    a65c:	0000af98 	cmpnei	zero,zero,702
    a660:	0000af98 	cmpnei	zero,zero,702
    a664:	0000af98 	cmpnei	zero,zero,702
    a668:	0000af98 	cmpnei	zero,zero,702
    a66c:	0000af98 	cmpnei	zero,zero,702
    a670:	0000af98 	cmpnei	zero,zero,702
    a674:	0000ad30 	cmpltui	zero,zero,692
    a678:	0000af98 	cmpnei	zero,zero,702
    a67c:	0000af98 	cmpnei	zero,zero,702
    a680:	0000af98 	cmpnei	zero,zero,702
    a684:	0000af98 	cmpnei	zero,zero,702
    a688:	0000af98 	cmpnei	zero,zero,702
    a68c:	0000af98 	cmpnei	zero,zero,702
    a690:	0000af98 	cmpnei	zero,zero,702
    a694:	0000af98 	cmpnei	zero,zero,702
    a698:	0000af98 	cmpnei	zero,zero,702
    a69c:	0000af98 	cmpnei	zero,zero,702
    a6a0:	0000ad68 	cmpgeui	zero,zero,693
    a6a4:	0000af98 	cmpnei	zero,zero,702
    a6a8:	0000af98 	cmpnei	zero,zero,702
    a6ac:	0000af98 	cmpnei	zero,zero,702
    a6b0:	0000af98 	cmpnei	zero,zero,702
    a6b4:	0000af98 	cmpnei	zero,zero,702
    a6b8:	0000adc0 	call	adc <conv_grayscale+0x28>
    a6bc:	0000af98 	cmpnei	zero,zero,702
    a6c0:	0000af98 	cmpnei	zero,zero,702
    a6c4:	0000ae30 	cmpltui	zero,zero,696
    a6c8:	0000af98 	cmpnei	zero,zero,702
    a6cc:	0000af98 	cmpnei	zero,zero,702
    a6d0:	0000af98 	cmpnei	zero,zero,702
    a6d4:	0000af98 	cmpnei	zero,zero,702
    a6d8:	0000af98 	cmpnei	zero,zero,702
    a6dc:	0000af98 	cmpnei	zero,zero,702
    a6e0:	0000af98 	cmpnei	zero,zero,702
    a6e4:	0000af98 	cmpnei	zero,zero,702
    a6e8:	0000af98 	cmpnei	zero,zero,702
    a6ec:	0000af98 	cmpnei	zero,zero,702
    a6f0:	0000abdc 	xori	zero,zero,687
    a6f4:	0000ac08 	cmpgei	zero,zero,688
    a6f8:	0000af98 	cmpnei	zero,zero,702
    a6fc:	0000af98 	cmpnei	zero,zero,702
    a700:	0000af98 	cmpnei	zero,zero,702
    a704:	0000af40 	call	af4 <conv_grayscale+0x40>
    a708:	0000ac08 	cmpgei	zero,zero,688
    a70c:	0000af98 	cmpnei	zero,zero,702
    a710:	0000af98 	cmpnei	zero,zero,702
    a714:	0000aa9c 	xori	zero,zero,682
    a718:	0000af98 	cmpnei	zero,zero,702
    a71c:	0000aaac 	andhi	zero,zero,682
    a720:	0000aae8 	cmpgeui	zero,zero,683
    a724:	0000a7e4 	muli	zero,zero,671
    a728:	0000aa90 	cmplti	zero,zero,682
    a72c:	0000af98 	cmpnei	zero,zero,702
    a730:	0000ae6c 	andhi	zero,zero,697
    a734:	0000af98 	cmpnei	zero,zero,702
    a738:	0000aec4 	movi	zero,699
    a73c:	0000af98 	cmpnei	zero,zero,702
    a740:	0000af98 	cmpnei	zero,zero,702
    a744:	0000ab88 	cmpgei	zero,zero,686
    a748:	42000204 	addi	r8,r8,8
    a74c:	da802317 	ldw	r10,140(sp)
    a750:	5455883a 	add	r10,r10,r17
    a754:	da802315 	stw	r10,140(sp)
    a758:	003f8b06 	br	a588 <__alt_data_end+0xff00a588>
    a75c:	d9002017 	ldw	r4,128(sp)
    a760:	a00b883a 	mov	r5,r20
    a764:	00059600 	call	5960 <__swsetup_r>
    a768:	1003b11e 	bne	r2,zero,b630 <___vfiprintf_internal_r+0x11ec>
    a76c:	a080030b 	ldhu	r2,12(r20)
    a770:	00c00284 	movi	r3,10
    a774:	1080068c 	andi	r2,r2,26
    a778:	10ff541e 	bne	r2,r3,a4cc <__alt_data_end+0xff00a4cc>
    a77c:	a080038f 	ldh	r2,14(r20)
    a780:	103f5216 	blt	r2,zero,a4cc <__alt_data_end+0xff00a4cc>
    a784:	d9c02217 	ldw	r7,136(sp)
    a788:	d9002017 	ldw	r4,128(sp)
    a78c:	e00d883a 	mov	r6,fp
    a790:	a00b883a 	mov	r5,r20
    a794:	000b8bc0 	call	b8bc <__sbprintf>
    a798:	dfc03617 	ldw	ra,216(sp)
    a79c:	df003517 	ldw	fp,212(sp)
    a7a0:	ddc03417 	ldw	r23,208(sp)
    a7a4:	dd803317 	ldw	r22,204(sp)
    a7a8:	dd403217 	ldw	r21,200(sp)
    a7ac:	dd003117 	ldw	r20,196(sp)
    a7b0:	dcc03017 	ldw	r19,192(sp)
    a7b4:	dc802f17 	ldw	r18,188(sp)
    a7b8:	dc402e17 	ldw	r17,184(sp)
    a7bc:	dc002d17 	ldw	r16,180(sp)
    a7c0:	dec03704 	addi	sp,sp,220
    a7c4:	f800283a 	ret
    a7c8:	00079340 	call	7934 <__sinit>
    a7cc:	003f2f06 	br	a48c <__alt_data_end+0xff00a48c>
    a7d0:	0463c83a 	sub	r17,zero,r17
    a7d4:	d8802215 	stw	r2,136(sp)
    a7d8:	a5000114 	ori	r20,r20,4
    a7dc:	80c00007 	ldb	r3,0(r16)
    a7e0:	003f7706 	br	a5c0 <__alt_data_end+0xff00a5c0>
    a7e4:	00800c04 	movi	r2,48
    a7e8:	da802217 	ldw	r10,136(sp)
    a7ec:	d8801d05 	stb	r2,116(sp)
    a7f0:	00801e04 	movi	r2,120
    a7f4:	d8801d45 	stb	r2,117(sp)
    a7f8:	d8001d85 	stb	zero,118(sp)
    a7fc:	50c00104 	addi	r3,r10,4
    a800:	54800017 	ldw	r18,0(r10)
    a804:	0027883a 	mov	r19,zero
    a808:	a0800094 	ori	r2,r20,2
    a80c:	48030b16 	blt	r9,zero,b43c <___vfiprintf_internal_r+0xff8>
    a810:	00bfdfc4 	movi	r2,-129
    a814:	a096703a 	and	r11,r20,r2
    a818:	d8c02215 	stw	r3,136(sp)
    a81c:	5d000094 	ori	r20,r11,2
    a820:	90032b1e 	bne	r18,zero,b4d0 <___vfiprintf_internal_r+0x108c>
    a824:	00800074 	movhi	r2,1
    a828:	1088bf04 	addi	r2,r2,8956
    a82c:	d8802615 	stw	r2,152(sp)
    a830:	0039883a 	mov	fp,zero
    a834:	48017b1e 	bne	r9,zero,ae24 <___vfiprintf_internal_r+0x9e0>
    a838:	0013883a 	mov	r9,zero
    a83c:	0027883a 	mov	r19,zero
    a840:	dd401a04 	addi	r21,sp,104
    a844:	4825883a 	mov	r18,r9
    a848:	4cc0010e 	bge	r9,r19,a850 <___vfiprintf_internal_r+0x40c>
    a84c:	9825883a 	mov	r18,r19
    a850:	e7003fcc 	andi	fp,fp,255
    a854:	e700201c 	xori	fp,fp,128
    a858:	e73fe004 	addi	fp,fp,-128
    a85c:	e0000126 	beq	fp,zero,a864 <___vfiprintf_internal_r+0x420>
    a860:	94800044 	addi	r18,r18,1
    a864:	a380008c 	andi	r14,r20,2
    a868:	70000126 	beq	r14,zero,a870 <___vfiprintf_internal_r+0x42c>
    a86c:	94800084 	addi	r18,r18,2
    a870:	a700210c 	andi	fp,r20,132
    a874:	e001df1e 	bne	fp,zero,aff4 <___vfiprintf_internal_r+0xbb0>
    a878:	8c87c83a 	sub	r3,r17,r18
    a87c:	00c1dd0e 	bge	zero,r3,aff4 <___vfiprintf_internal_r+0xbb0>
    a880:	01c00404 	movi	r7,16
    a884:	d8801c17 	ldw	r2,112(sp)
    a888:	38c3ad0e 	bge	r7,r3,b740 <___vfiprintf_internal_r+0x12fc>
    a88c:	02800074 	movhi	r10,1
    a890:	52892404 	addi	r10,r10,9360
    a894:	dc002915 	stw	r16,164(sp)
    a898:	d9801b17 	ldw	r6,108(sp)
    a89c:	da802415 	stw	r10,144(sp)
    a8a0:	03c001c4 	movi	r15,7
    a8a4:	da402515 	stw	r9,148(sp)
    a8a8:	db802815 	stw	r14,160(sp)
    a8ac:	1821883a 	mov	r16,r3
    a8b0:	00000506 	br	a8c8 <___vfiprintf_internal_r+0x484>
    a8b4:	31400084 	addi	r5,r6,2
    a8b8:	42000204 	addi	r8,r8,8
    a8bc:	200d883a 	mov	r6,r4
    a8c0:	843ffc04 	addi	r16,r16,-16
    a8c4:	3c000d0e 	bge	r7,r16,a8fc <___vfiprintf_internal_r+0x4b8>
    a8c8:	10800404 	addi	r2,r2,16
    a8cc:	31000044 	addi	r4,r6,1
    a8d0:	45800015 	stw	r22,0(r8)
    a8d4:	41c00115 	stw	r7,4(r8)
    a8d8:	d8801c15 	stw	r2,112(sp)
    a8dc:	d9001b15 	stw	r4,108(sp)
    a8e0:	793ff40e 	bge	r15,r4,a8b4 <__alt_data_end+0xff00a8b4>
    a8e4:	1001b51e 	bne	r2,zero,afbc <___vfiprintf_internal_r+0xb78>
    a8e8:	843ffc04 	addi	r16,r16,-16
    a8ec:	000d883a 	mov	r6,zero
    a8f0:	01400044 	movi	r5,1
    a8f4:	d811883a 	mov	r8,sp
    a8f8:	3c3ff316 	blt	r7,r16,a8c8 <__alt_data_end+0xff00a8c8>
    a8fc:	8007883a 	mov	r3,r16
    a900:	da402517 	ldw	r9,148(sp)
    a904:	db802817 	ldw	r14,160(sp)
    a908:	dc002917 	ldw	r16,164(sp)
    a90c:	da802417 	ldw	r10,144(sp)
    a910:	1885883a 	add	r2,r3,r2
    a914:	40c00115 	stw	r3,4(r8)
    a918:	42800015 	stw	r10,0(r8)
    a91c:	d8801c15 	stw	r2,112(sp)
    a920:	d9401b15 	stw	r5,108(sp)
    a924:	00c001c4 	movi	r3,7
    a928:	19426016 	blt	r3,r5,b2ac <___vfiprintf_internal_r+0xe68>
    a92c:	d8c01d87 	ldb	r3,118(sp)
    a930:	42000204 	addi	r8,r8,8
    a934:	29000044 	addi	r4,r5,1
    a938:	1801b31e 	bne	r3,zero,b008 <___vfiprintf_internal_r+0xbc4>
    a93c:	7001c026 	beq	r14,zero,b040 <___vfiprintf_internal_r+0xbfc>
    a940:	d8c01d04 	addi	r3,sp,116
    a944:	10800084 	addi	r2,r2,2
    a948:	40c00015 	stw	r3,0(r8)
    a94c:	00c00084 	movi	r3,2
    a950:	40c00115 	stw	r3,4(r8)
    a954:	d8801c15 	stw	r2,112(sp)
    a958:	d9001b15 	stw	r4,108(sp)
    a95c:	00c001c4 	movi	r3,7
    a960:	1902650e 	bge	r3,r4,b2f8 <___vfiprintf_internal_r+0xeb4>
    a964:	10029a1e 	bne	r2,zero,b3d0 <___vfiprintf_internal_r+0xf8c>
    a968:	00c02004 	movi	r3,128
    a96c:	01000044 	movi	r4,1
    a970:	000b883a 	mov	r5,zero
    a974:	d811883a 	mov	r8,sp
    a978:	e0c1b31e 	bne	fp,r3,b048 <___vfiprintf_internal_r+0xc04>
    a97c:	8cb9c83a 	sub	fp,r17,r18
    a980:	0701b10e 	bge	zero,fp,b048 <___vfiprintf_internal_r+0xc04>
    a984:	01c00404 	movi	r7,16
    a988:	3f03890e 	bge	r7,fp,b7b0 <___vfiprintf_internal_r+0x136c>
    a98c:	00c00074 	movhi	r3,1
    a990:	18c92004 	addi	r3,r3,9344
    a994:	d8c02415 	stw	r3,144(sp)
    a998:	8007883a 	mov	r3,r16
    a99c:	034001c4 	movi	r13,7
    a9a0:	e021883a 	mov	r16,fp
    a9a4:	da402515 	stw	r9,148(sp)
    a9a8:	1839883a 	mov	fp,r3
    a9ac:	00000506 	br	a9c4 <___vfiprintf_internal_r+0x580>
    a9b0:	29800084 	addi	r6,r5,2
    a9b4:	42000204 	addi	r8,r8,8
    a9b8:	180b883a 	mov	r5,r3
    a9bc:	843ffc04 	addi	r16,r16,-16
    a9c0:	3c000d0e 	bge	r7,r16,a9f8 <___vfiprintf_internal_r+0x5b4>
    a9c4:	10800404 	addi	r2,r2,16
    a9c8:	28c00044 	addi	r3,r5,1
    a9cc:	45c00015 	stw	r23,0(r8)
    a9d0:	41c00115 	stw	r7,4(r8)
    a9d4:	d8801c15 	stw	r2,112(sp)
    a9d8:	d8c01b15 	stw	r3,108(sp)
    a9dc:	68fff40e 	bge	r13,r3,a9b0 <__alt_data_end+0xff00a9b0>
    a9e0:	1002241e 	bne	r2,zero,b274 <___vfiprintf_internal_r+0xe30>
    a9e4:	843ffc04 	addi	r16,r16,-16
    a9e8:	01800044 	movi	r6,1
    a9ec:	000b883a 	mov	r5,zero
    a9f0:	d811883a 	mov	r8,sp
    a9f4:	3c3ff316 	blt	r7,r16,a9c4 <__alt_data_end+0xff00a9c4>
    a9f8:	da402517 	ldw	r9,148(sp)
    a9fc:	e007883a 	mov	r3,fp
    aa00:	8039883a 	mov	fp,r16
    aa04:	1821883a 	mov	r16,r3
    aa08:	d8c02417 	ldw	r3,144(sp)
    aa0c:	1705883a 	add	r2,r2,fp
    aa10:	47000115 	stw	fp,4(r8)
    aa14:	40c00015 	stw	r3,0(r8)
    aa18:	d8801c15 	stw	r2,112(sp)
    aa1c:	d9801b15 	stw	r6,108(sp)
    aa20:	00c001c4 	movi	r3,7
    aa24:	19827616 	blt	r3,r6,b400 <___vfiprintf_internal_r+0xfbc>
    aa28:	4cf9c83a 	sub	fp,r9,r19
    aa2c:	42000204 	addi	r8,r8,8
    aa30:	31000044 	addi	r4,r6,1
    aa34:	300b883a 	mov	r5,r6
    aa38:	07018516 	blt	zero,fp,b050 <___vfiprintf_internal_r+0xc0c>
    aa3c:	9885883a 	add	r2,r19,r2
    aa40:	45400015 	stw	r21,0(r8)
    aa44:	44c00115 	stw	r19,4(r8)
    aa48:	d8801c15 	stw	r2,112(sp)
    aa4c:	d9001b15 	stw	r4,108(sp)
    aa50:	00c001c4 	movi	r3,7
    aa54:	1901dd0e 	bge	r3,r4,b1cc <___vfiprintf_internal_r+0xd88>
    aa58:	1002401e 	bne	r2,zero,b35c <___vfiprintf_internal_r+0xf18>
    aa5c:	d8001b15 	stw	zero,108(sp)
    aa60:	a2c0010c 	andi	r11,r20,4
    aa64:	58000226 	beq	r11,zero,aa70 <___vfiprintf_internal_r+0x62c>
    aa68:	8ca7c83a 	sub	r19,r17,r18
    aa6c:	04c2f216 	blt	zero,r19,b638 <___vfiprintf_internal_r+0x11f4>
    aa70:	8c80010e 	bge	r17,r18,aa78 <___vfiprintf_internal_r+0x634>
    aa74:	9023883a 	mov	r17,r18
    aa78:	da802317 	ldw	r10,140(sp)
    aa7c:	5455883a 	add	r10,r10,r17
    aa80:	da802315 	stw	r10,140(sp)
    aa84:	d8001b15 	stw	zero,108(sp)
    aa88:	d811883a 	mov	r8,sp
    aa8c:	003ea206 	br	a518 <__alt_data_end+0xff00a518>
    aa90:	a5000814 	ori	r20,r20,32
    aa94:	80c00007 	ldb	r3,0(r16)
    aa98:	003ec906 	br	a5c0 <__alt_data_end+0xff00a5c0>
    aa9c:	80c00007 	ldb	r3,0(r16)
    aaa0:	1b030926 	beq	r3,r12,b6c8 <___vfiprintf_internal_r+0x1284>
    aaa4:	a5000414 	ori	r20,r20,16
    aaa8:	003ec506 	br	a5c0 <__alt_data_end+0xff00a5c0>
    aaac:	21003fcc 	andi	r4,r4,255
    aab0:	20035e1e 	bne	r4,zero,b82c <___vfiprintf_internal_r+0x13e8>
    aab4:	a080080c 	andi	r2,r20,32
    aab8:	1002a526 	beq	r2,zero,b550 <___vfiprintf_internal_r+0x110c>
    aabc:	da802217 	ldw	r10,136(sp)
    aac0:	50800017 	ldw	r2,0(r10)
    aac4:	da802317 	ldw	r10,140(sp)
    aac8:	5007d7fa 	srai	r3,r10,31
    aacc:	da802217 	ldw	r10,136(sp)
    aad0:	10c00115 	stw	r3,4(r2)
    aad4:	52800104 	addi	r10,r10,4
    aad8:	da802215 	stw	r10,136(sp)
    aadc:	da802317 	ldw	r10,140(sp)
    aae0:	12800015 	stw	r10,0(r2)
    aae4:	003e8c06 	br	a518 <__alt_data_end+0xff00a518>
    aae8:	21003fcc 	andi	r4,r4,255
    aaec:	2003511e 	bne	r4,zero,b834 <___vfiprintf_internal_r+0x13f0>
    aaf0:	a080080c 	andi	r2,r20,32
    aaf4:	1000a126 	beq	r2,zero,ad7c <___vfiprintf_internal_r+0x938>
    aaf8:	da802217 	ldw	r10,136(sp)
    aafc:	d8001d85 	stb	zero,118(sp)
    ab00:	50800204 	addi	r2,r10,8
    ab04:	54800017 	ldw	r18,0(r10)
    ab08:	54c00117 	ldw	r19,4(r10)
    ab0c:	4802b416 	blt	r9,zero,b5e0 <___vfiprintf_internal_r+0x119c>
    ab10:	013fdfc4 	movi	r4,-129
    ab14:	94c6b03a 	or	r3,r18,r19
    ab18:	d8802215 	stw	r2,136(sp)
    ab1c:	a128703a 	and	r20,r20,r4
    ab20:	1800a226 	beq	r3,zero,adac <___vfiprintf_internal_r+0x968>
    ab24:	0039883a 	mov	fp,zero
    ab28:	dd401a04 	addi	r21,sp,104
    ab2c:	9006d0fa 	srli	r3,r18,3
    ab30:	9808977a 	slli	r4,r19,29
    ab34:	9826d0fa 	srli	r19,r19,3
    ab38:	948001cc 	andi	r18,r18,7
    ab3c:	90800c04 	addi	r2,r18,48
    ab40:	ad7fffc4 	addi	r21,r21,-1
    ab44:	20e4b03a 	or	r18,r4,r3
    ab48:	a8800005 	stb	r2,0(r21)
    ab4c:	94c6b03a 	or	r3,r18,r19
    ab50:	183ff61e 	bne	r3,zero,ab2c <__alt_data_end+0xff00ab2c>
    ab54:	a0c0004c 	andi	r3,r20,1
    ab58:	18005926 	beq	r3,zero,acc0 <___vfiprintf_internal_r+0x87c>
    ab5c:	10803fcc 	andi	r2,r2,255
    ab60:	1080201c 	xori	r2,r2,128
    ab64:	10bfe004 	addi	r2,r2,-128
    ab68:	00c00c04 	movi	r3,48
    ab6c:	10c05426 	beq	r2,r3,acc0 <___vfiprintf_internal_r+0x87c>
    ab70:	da801e17 	ldw	r10,120(sp)
    ab74:	a8bfffc4 	addi	r2,r21,-1
    ab78:	a8ffffc5 	stb	r3,-1(r21)
    ab7c:	50a7c83a 	sub	r19,r10,r2
    ab80:	102b883a 	mov	r21,r2
    ab84:	003f2f06 	br	a844 <__alt_data_end+0xff00a844>
    ab88:	21003fcc 	andi	r4,r4,255
    ab8c:	2003421e 	bne	r4,zero,b898 <___vfiprintf_internal_r+0x1454>
    ab90:	00800074 	movhi	r2,1
    ab94:	1088bf04 	addi	r2,r2,8956
    ab98:	d8802615 	stw	r2,152(sp)
    ab9c:	a080080c 	andi	r2,r20,32
    aba0:	1000aa26 	beq	r2,zero,ae4c <___vfiprintf_internal_r+0xa08>
    aba4:	da802217 	ldw	r10,136(sp)
    aba8:	54800017 	ldw	r18,0(r10)
    abac:	54c00117 	ldw	r19,4(r10)
    abb0:	52800204 	addi	r10,r10,8
    abb4:	da802215 	stw	r10,136(sp)
    abb8:	a080004c 	andi	r2,r20,1
    abbc:	1001d226 	beq	r2,zero,b308 <___vfiprintf_internal_r+0xec4>
    abc0:	94c4b03a 	or	r2,r18,r19
    abc4:	1002351e 	bne	r2,zero,b49c <___vfiprintf_internal_r+0x1058>
    abc8:	d8001d85 	stb	zero,118(sp)
    abcc:	48022216 	blt	r9,zero,b458 <___vfiprintf_internal_r+0x1014>
    abd0:	00bfdfc4 	movi	r2,-129
    abd4:	a0a8703a 	and	r20,r20,r2
    abd8:	003f1506 	br	a830 <__alt_data_end+0xff00a830>
    abdc:	da802217 	ldw	r10,136(sp)
    abe0:	04800044 	movi	r18,1
    abe4:	d8001d85 	stb	zero,118(sp)
    abe8:	50800017 	ldw	r2,0(r10)
    abec:	52800104 	addi	r10,r10,4
    abf0:	da802215 	stw	r10,136(sp)
    abf4:	d8801005 	stb	r2,64(sp)
    abf8:	9027883a 	mov	r19,r18
    abfc:	dd401004 	addi	r21,sp,64
    ac00:	0013883a 	mov	r9,zero
    ac04:	003f1706 	br	a864 <__alt_data_end+0xff00a864>
    ac08:	21003fcc 	andi	r4,r4,255
    ac0c:	2003201e 	bne	r4,zero,b890 <___vfiprintf_internal_r+0x144c>
    ac10:	a080080c 	andi	r2,r20,32
    ac14:	10004b26 	beq	r2,zero,ad44 <___vfiprintf_internal_r+0x900>
    ac18:	da802217 	ldw	r10,136(sp)
    ac1c:	50800117 	ldw	r2,4(r10)
    ac20:	54800017 	ldw	r18,0(r10)
    ac24:	52800204 	addi	r10,r10,8
    ac28:	da802215 	stw	r10,136(sp)
    ac2c:	1027883a 	mov	r19,r2
    ac30:	10022c16 	blt	r2,zero,b4e4 <___vfiprintf_internal_r+0x10a0>
    ac34:	df001d83 	ldbu	fp,118(sp)
    ac38:	48007216 	blt	r9,zero,ae04 <___vfiprintf_internal_r+0x9c0>
    ac3c:	00ffdfc4 	movi	r3,-129
    ac40:	94c4b03a 	or	r2,r18,r19
    ac44:	a0e8703a 	and	r20,r20,r3
    ac48:	1000cc26 	beq	r2,zero,af7c <___vfiprintf_internal_r+0xb38>
    ac4c:	98021026 	beq	r19,zero,b490 <___vfiprintf_internal_r+0x104c>
    ac50:	dc402415 	stw	r17,144(sp)
    ac54:	dc002515 	stw	r16,148(sp)
    ac58:	9823883a 	mov	r17,r19
    ac5c:	9021883a 	mov	r16,r18
    ac60:	dd401a04 	addi	r21,sp,104
    ac64:	4825883a 	mov	r18,r9
    ac68:	4027883a 	mov	r19,r8
    ac6c:	8009883a 	mov	r4,r16
    ac70:	880b883a 	mov	r5,r17
    ac74:	01800284 	movi	r6,10
    ac78:	000f883a 	mov	r7,zero
    ac7c:	000c8240 	call	c824 <__umoddi3>
    ac80:	10800c04 	addi	r2,r2,48
    ac84:	ad7fffc4 	addi	r21,r21,-1
    ac88:	8009883a 	mov	r4,r16
    ac8c:	880b883a 	mov	r5,r17
    ac90:	a8800005 	stb	r2,0(r21)
    ac94:	01800284 	movi	r6,10
    ac98:	000f883a 	mov	r7,zero
    ac9c:	000c2ac0 	call	c2ac <__udivdi3>
    aca0:	1021883a 	mov	r16,r2
    aca4:	10c4b03a 	or	r2,r2,r3
    aca8:	1823883a 	mov	r17,r3
    acac:	103fef1e 	bne	r2,zero,ac6c <__alt_data_end+0xff00ac6c>
    acb0:	dc402417 	ldw	r17,144(sp)
    acb4:	dc002517 	ldw	r16,148(sp)
    acb8:	9013883a 	mov	r9,r18
    acbc:	9811883a 	mov	r8,r19
    acc0:	da801e17 	ldw	r10,120(sp)
    acc4:	5567c83a 	sub	r19,r10,r21
    acc8:	003ede06 	br	a844 <__alt_data_end+0xff00a844>
    accc:	38803fcc 	andi	r2,r7,255
    acd0:	1080201c 	xori	r2,r2,128
    acd4:	10bfe004 	addi	r2,r2,-128
    acd8:	1002371e 	bne	r2,zero,b5b8 <___vfiprintf_internal_r+0x1174>
    acdc:	01000044 	movi	r4,1
    ace0:	01c00804 	movi	r7,32
    ace4:	80c00007 	ldb	r3,0(r16)
    ace8:	003e3506 	br	a5c0 <__alt_data_end+0xff00a5c0>
    acec:	a5000054 	ori	r20,r20,1
    acf0:	80c00007 	ldb	r3,0(r16)
    acf4:	003e3206 	br	a5c0 <__alt_data_end+0xff00a5c0>
    acf8:	a5002014 	ori	r20,r20,128
    acfc:	80c00007 	ldb	r3,0(r16)
    ad00:	003e2f06 	br	a5c0 <__alt_data_end+0xff00a5c0>
    ad04:	8015883a 	mov	r10,r16
    ad08:	0023883a 	mov	r17,zero
    ad0c:	18bff404 	addi	r2,r3,-48
    ad10:	50c00007 	ldb	r3,0(r10)
    ad14:	8c4002a4 	muli	r17,r17,10
    ad18:	84000044 	addi	r16,r16,1
    ad1c:	8015883a 	mov	r10,r16
    ad20:	1463883a 	add	r17,r2,r17
    ad24:	18bff404 	addi	r2,r3,-48
    ad28:	30bff92e 	bgeu	r6,r2,ad10 <__alt_data_end+0xff00ad10>
    ad2c:	003e2506 	br	a5c4 <__alt_data_end+0xff00a5c4>
    ad30:	21003fcc 	andi	r4,r4,255
    ad34:	2002d41e 	bne	r4,zero,b888 <___vfiprintf_internal_r+0x1444>
    ad38:	a5000414 	ori	r20,r20,16
    ad3c:	a080080c 	andi	r2,r20,32
    ad40:	103fb51e 	bne	r2,zero,ac18 <__alt_data_end+0xff00ac18>
    ad44:	a080040c 	andi	r2,r20,16
    ad48:	1001f826 	beq	r2,zero,b52c <___vfiprintf_internal_r+0x10e8>
    ad4c:	da802217 	ldw	r10,136(sp)
    ad50:	54800017 	ldw	r18,0(r10)
    ad54:	52800104 	addi	r10,r10,4
    ad58:	da802215 	stw	r10,136(sp)
    ad5c:	9027d7fa 	srai	r19,r18,31
    ad60:	9805883a 	mov	r2,r19
    ad64:	003fb206 	br	ac30 <__alt_data_end+0xff00ac30>
    ad68:	21003fcc 	andi	r4,r4,255
    ad6c:	2002c41e 	bne	r4,zero,b880 <___vfiprintf_internal_r+0x143c>
    ad70:	a5000414 	ori	r20,r20,16
    ad74:	a080080c 	andi	r2,r20,32
    ad78:	103f5f1e 	bne	r2,zero,aaf8 <__alt_data_end+0xff00aaf8>
    ad7c:	a080040c 	andi	r2,r20,16
    ad80:	10020f26 	beq	r2,zero,b5c0 <___vfiprintf_internal_r+0x117c>
    ad84:	da802217 	ldw	r10,136(sp)
    ad88:	d8001d85 	stb	zero,118(sp)
    ad8c:	0027883a 	mov	r19,zero
    ad90:	50800104 	addi	r2,r10,4
    ad94:	54800017 	ldw	r18,0(r10)
    ad98:	48021116 	blt	r9,zero,b5e0 <___vfiprintf_internal_r+0x119c>
    ad9c:	00ffdfc4 	movi	r3,-129
    ada0:	d8802215 	stw	r2,136(sp)
    ada4:	a0e8703a 	and	r20,r20,r3
    ada8:	903f5e1e 	bne	r18,zero,ab24 <__alt_data_end+0xff00ab24>
    adac:	0039883a 	mov	fp,zero
    adb0:	4802a626 	beq	r9,zero,b84c <___vfiprintf_internal_r+0x1408>
    adb4:	0025883a 	mov	r18,zero
    adb8:	0027883a 	mov	r19,zero
    adbc:	003f5a06 	br	ab28 <__alt_data_end+0xff00ab28>
    adc0:	21003fcc 	andi	r4,r4,255
    adc4:	20029f1e 	bne	r4,zero,b844 <___vfiprintf_internal_r+0x1400>
    adc8:	a5000414 	ori	r20,r20,16
    adcc:	a080080c 	andi	r2,r20,32
    add0:	10005e1e 	bne	r2,zero,af4c <___vfiprintf_internal_r+0xb08>
    add4:	a080040c 	andi	r2,r20,16
    add8:	1001a21e 	bne	r2,zero,b464 <___vfiprintf_internal_r+0x1020>
    addc:	a080100c 	andi	r2,r20,64
    ade0:	d8001d85 	stb	zero,118(sp)
    ade4:	da802217 	ldw	r10,136(sp)
    ade8:	1002231e 	bne	r2,zero,b678 <___vfiprintf_internal_r+0x1234>
    adec:	50800104 	addi	r2,r10,4
    adf0:	54800017 	ldw	r18,0(r10)
    adf4:	0027883a 	mov	r19,zero
    adf8:	4801a00e 	bge	r9,zero,b47c <___vfiprintf_internal_r+0x1038>
    adfc:	d8802215 	stw	r2,136(sp)
    ae00:	0039883a 	mov	fp,zero
    ae04:	94c4b03a 	or	r2,r18,r19
    ae08:	103f901e 	bne	r2,zero,ac4c <__alt_data_end+0xff00ac4c>
    ae0c:	00800044 	movi	r2,1
    ae10:	10803fcc 	andi	r2,r2,255
    ae14:	00c00044 	movi	r3,1
    ae18:	10c05926 	beq	r2,r3,af80 <___vfiprintf_internal_r+0xb3c>
    ae1c:	00c00084 	movi	r3,2
    ae20:	10ffe41e 	bne	r2,r3,adb4 <__alt_data_end+0xff00adb4>
    ae24:	0025883a 	mov	r18,zero
    ae28:	0027883a 	mov	r19,zero
    ae2c:	00013d06 	br	b324 <___vfiprintf_internal_r+0xee0>
    ae30:	21003fcc 	andi	r4,r4,255
    ae34:	2002811e 	bne	r4,zero,b83c <___vfiprintf_internal_r+0x13f8>
    ae38:	00800074 	movhi	r2,1
    ae3c:	1088ba04 	addi	r2,r2,8936
    ae40:	d8802615 	stw	r2,152(sp)
    ae44:	a080080c 	andi	r2,r20,32
    ae48:	103f561e 	bne	r2,zero,aba4 <__alt_data_end+0xff00aba4>
    ae4c:	a080040c 	andi	r2,r20,16
    ae50:	1001d126 	beq	r2,zero,b598 <___vfiprintf_internal_r+0x1154>
    ae54:	da802217 	ldw	r10,136(sp)
    ae58:	0027883a 	mov	r19,zero
    ae5c:	54800017 	ldw	r18,0(r10)
    ae60:	52800104 	addi	r10,r10,4
    ae64:	da802215 	stw	r10,136(sp)
    ae68:	003f5306 	br	abb8 <__alt_data_end+0xff00abb8>
    ae6c:	da802217 	ldw	r10,136(sp)
    ae70:	d8001d85 	stb	zero,118(sp)
    ae74:	55400017 	ldw	r21,0(r10)
    ae78:	50c00104 	addi	r3,r10,4
    ae7c:	a8024226 	beq	r21,zero,b788 <___vfiprintf_internal_r+0x1344>
    ae80:	48021816 	blt	r9,zero,b6e4 <___vfiprintf_internal_r+0x12a0>
    ae84:	480d883a 	mov	r6,r9
    ae88:	000b883a 	mov	r5,zero
    ae8c:	a809883a 	mov	r4,r21
    ae90:	d8c02a15 	stw	r3,168(sp)
    ae94:	da002b15 	stw	r8,172(sp)
    ae98:	da402c15 	stw	r9,176(sp)
    ae9c:	00086940 	call	8694 <memchr>
    aea0:	d8c02a17 	ldw	r3,168(sp)
    aea4:	da002b17 	ldw	r8,172(sp)
    aea8:	da402c17 	ldw	r9,176(sp)
    aeac:	10024826 	beq	r2,zero,b7d0 <___vfiprintf_internal_r+0x138c>
    aeb0:	1567c83a 	sub	r19,r2,r21
    aeb4:	df001d83 	ldbu	fp,118(sp)
    aeb8:	d8c02215 	stw	r3,136(sp)
    aebc:	0013883a 	mov	r9,zero
    aec0:	003e6006 	br	a844 <__alt_data_end+0xff00a844>
    aec4:	21003fcc 	andi	r4,r4,255
    aec8:	203fc026 	beq	r4,zero,adcc <__alt_data_end+0xff00adcc>
    aecc:	d9c01d85 	stb	r7,118(sp)
    aed0:	003fbe06 	br	adcc <__alt_data_end+0xff00adcc>
    aed4:	da802217 	ldw	r10,136(sp)
    aed8:	54400017 	ldw	r17,0(r10)
    aedc:	50800104 	addi	r2,r10,4
    aee0:	883e3b16 	blt	r17,zero,a7d0 <__alt_data_end+0xff00a7d0>
    aee4:	d8802215 	stw	r2,136(sp)
    aee8:	80c00007 	ldb	r3,0(r16)
    aeec:	003db406 	br	a5c0 <__alt_data_end+0xff00a5c0>
    aef0:	01000044 	movi	r4,1
    aef4:	01c00ac4 	movi	r7,43
    aef8:	80c00007 	ldb	r3,0(r16)
    aefc:	003db006 	br	a5c0 <__alt_data_end+0xff00a5c0>
    af00:	80c00007 	ldb	r3,0(r16)
    af04:	82800044 	addi	r10,r16,1
    af08:	1b423c26 	beq	r3,r13,b7fc <___vfiprintf_internal_r+0x13b8>
    af0c:	18bff404 	addi	r2,r3,-48
    af10:	0013883a 	mov	r9,zero
    af14:	30822b36 	bltu	r6,r2,b7c4 <___vfiprintf_internal_r+0x1380>
    af18:	50c00007 	ldb	r3,0(r10)
    af1c:	4a4002a4 	muli	r9,r9,10
    af20:	54000044 	addi	r16,r10,1
    af24:	8015883a 	mov	r10,r16
    af28:	4893883a 	add	r9,r9,r2
    af2c:	18bff404 	addi	r2,r3,-48
    af30:	30bff92e 	bgeu	r6,r2,af18 <__alt_data_end+0xff00af18>
    af34:	483da30e 	bge	r9,zero,a5c4 <__alt_data_end+0xff00a5c4>
    af38:	027fffc4 	movi	r9,-1
    af3c:	003da106 	br	a5c4 <__alt_data_end+0xff00a5c4>
    af40:	a5001014 	ori	r20,r20,64
    af44:	80c00007 	ldb	r3,0(r16)
    af48:	003d9d06 	br	a5c0 <__alt_data_end+0xff00a5c0>
    af4c:	da802217 	ldw	r10,136(sp)
    af50:	d8001d85 	stb	zero,118(sp)
    af54:	50c00204 	addi	r3,r10,8
    af58:	54800017 	ldw	r18,0(r10)
    af5c:	54c00117 	ldw	r19,4(r10)
    af60:	4801ca16 	blt	r9,zero,b68c <___vfiprintf_internal_r+0x1248>
    af64:	013fdfc4 	movi	r4,-129
    af68:	94c4b03a 	or	r2,r18,r19
    af6c:	d8c02215 	stw	r3,136(sp)
    af70:	a128703a 	and	r20,r20,r4
    af74:	0039883a 	mov	fp,zero
    af78:	103f341e 	bne	r2,zero,ac4c <__alt_data_end+0xff00ac4c>
    af7c:	483e2e26 	beq	r9,zero,a838 <__alt_data_end+0xff00a838>
    af80:	0025883a 	mov	r18,zero
    af84:	94800c04 	addi	r18,r18,48
    af88:	dc8019c5 	stb	r18,103(sp)
    af8c:	dcc02717 	ldw	r19,156(sp)
    af90:	dd4019c4 	addi	r21,sp,103
    af94:	003e2b06 	br	a844 <__alt_data_end+0xff00a844>
    af98:	21003fcc 	andi	r4,r4,255
    af9c:	2002361e 	bne	r4,zero,b878 <___vfiprintf_internal_r+0x1434>
    afa0:	1801c126 	beq	r3,zero,b6a8 <___vfiprintf_internal_r+0x1264>
    afa4:	04800044 	movi	r18,1
    afa8:	d8c01005 	stb	r3,64(sp)
    afac:	d8001d85 	stb	zero,118(sp)
    afb0:	9027883a 	mov	r19,r18
    afb4:	dd401004 	addi	r21,sp,64
    afb8:	003f1106 	br	ac00 <__alt_data_end+0xff00ac00>
    afbc:	d9402117 	ldw	r5,132(sp)
    afc0:	d9002017 	ldw	r4,128(sp)
    afc4:	d9801a04 	addi	r6,sp,104
    afc8:	d9c02b15 	stw	r7,172(sp)
    afcc:	dbc02a15 	stw	r15,168(sp)
    afd0:	000a3300 	call	a330 <__sprint_r.part.0>
    afd4:	d9c02b17 	ldw	r7,172(sp)
    afd8:	dbc02a17 	ldw	r15,168(sp)
    afdc:	10006d1e 	bne	r2,zero,b194 <___vfiprintf_internal_r+0xd50>
    afe0:	d9801b17 	ldw	r6,108(sp)
    afe4:	d8801c17 	ldw	r2,112(sp)
    afe8:	d811883a 	mov	r8,sp
    afec:	31400044 	addi	r5,r6,1
    aff0:	003e3306 	br	a8c0 <__alt_data_end+0xff00a8c0>
    aff4:	d9401b17 	ldw	r5,108(sp)
    aff8:	d8801c17 	ldw	r2,112(sp)
    affc:	29000044 	addi	r4,r5,1
    b000:	d8c01d87 	ldb	r3,118(sp)
    b004:	183e4d26 	beq	r3,zero,a93c <__alt_data_end+0xff00a93c>
    b008:	00c00044 	movi	r3,1
    b00c:	d9401d84 	addi	r5,sp,118
    b010:	10c5883a 	add	r2,r2,r3
    b014:	41400015 	stw	r5,0(r8)
    b018:	40c00115 	stw	r3,4(r8)
    b01c:	d8801c15 	stw	r2,112(sp)
    b020:	d9001b15 	stw	r4,108(sp)
    b024:	014001c4 	movi	r5,7
    b028:	2900a90e 	bge	r5,r4,b2d0 <___vfiprintf_internal_r+0xe8c>
    b02c:	1000da1e 	bne	r2,zero,b398 <___vfiprintf_internal_r+0xf54>
    b030:	7000ab1e 	bne	r14,zero,b2e0 <___vfiprintf_internal_r+0xe9c>
    b034:	000b883a 	mov	r5,zero
    b038:	1809883a 	mov	r4,r3
    b03c:	d811883a 	mov	r8,sp
    b040:	00c02004 	movi	r3,128
    b044:	e0fe4d26 	beq	fp,r3,a97c <__alt_data_end+0xff00a97c>
    b048:	4cf9c83a 	sub	fp,r9,r19
    b04c:	073e7b0e 	bge	zero,fp,aa3c <__alt_data_end+0xff00aa3c>
    b050:	01c00404 	movi	r7,16
    b054:	3f01900e 	bge	r7,fp,b698 <___vfiprintf_internal_r+0x1254>
    b058:	00c00074 	movhi	r3,1
    b05c:	18c92004 	addi	r3,r3,9344
    b060:	d8c02415 	stw	r3,144(sp)
    b064:	034001c4 	movi	r13,7
    b068:	00000506 	br	b080 <___vfiprintf_internal_r+0xc3c>
    b06c:	29000084 	addi	r4,r5,2
    b070:	42000204 	addi	r8,r8,8
    b074:	180b883a 	mov	r5,r3
    b078:	e73ffc04 	addi	fp,fp,-16
    b07c:	3f000d0e 	bge	r7,fp,b0b4 <___vfiprintf_internal_r+0xc70>
    b080:	10800404 	addi	r2,r2,16
    b084:	28c00044 	addi	r3,r5,1
    b088:	45c00015 	stw	r23,0(r8)
    b08c:	41c00115 	stw	r7,4(r8)
    b090:	d8801c15 	stw	r2,112(sp)
    b094:	d8c01b15 	stw	r3,108(sp)
    b098:	68fff40e 	bge	r13,r3,b06c <__alt_data_end+0xff00b06c>
    b09c:	1000101e 	bne	r2,zero,b0e0 <___vfiprintf_internal_r+0xc9c>
    b0a0:	e73ffc04 	addi	fp,fp,-16
    b0a4:	01000044 	movi	r4,1
    b0a8:	000b883a 	mov	r5,zero
    b0ac:	d811883a 	mov	r8,sp
    b0b0:	3f3ff316 	blt	r7,fp,b080 <__alt_data_end+0xff00b080>
    b0b4:	da802417 	ldw	r10,144(sp)
    b0b8:	1705883a 	add	r2,r2,fp
    b0bc:	47000115 	stw	fp,4(r8)
    b0c0:	42800015 	stw	r10,0(r8)
    b0c4:	d8801c15 	stw	r2,112(sp)
    b0c8:	d9001b15 	stw	r4,108(sp)
    b0cc:	00c001c4 	movi	r3,7
    b0d0:	19003616 	blt	r3,r4,b1ac <___vfiprintf_internal_r+0xd68>
    b0d4:	42000204 	addi	r8,r8,8
    b0d8:	21000044 	addi	r4,r4,1
    b0dc:	003e5706 	br	aa3c <__alt_data_end+0xff00aa3c>
    b0e0:	d9402117 	ldw	r5,132(sp)
    b0e4:	d9002017 	ldw	r4,128(sp)
    b0e8:	d9801a04 	addi	r6,sp,104
    b0ec:	d9c02b15 	stw	r7,172(sp)
    b0f0:	db402a15 	stw	r13,168(sp)
    b0f4:	000a3300 	call	a330 <__sprint_r.part.0>
    b0f8:	d9c02b17 	ldw	r7,172(sp)
    b0fc:	db402a17 	ldw	r13,168(sp)
    b100:	1000241e 	bne	r2,zero,b194 <___vfiprintf_internal_r+0xd50>
    b104:	d9401b17 	ldw	r5,108(sp)
    b108:	d8801c17 	ldw	r2,112(sp)
    b10c:	d811883a 	mov	r8,sp
    b110:	29000044 	addi	r4,r5,1
    b114:	003fd806 	br	b078 <__alt_data_end+0xff00b078>
    b118:	d9401b17 	ldw	r5,108(sp)
    b11c:	00c00074 	movhi	r3,1
    b120:	18c92404 	addi	r3,r3,9360
    b124:	d8c02415 	stw	r3,144(sp)
    b128:	29400044 	addi	r5,r5,1
    b12c:	d8c02417 	ldw	r3,144(sp)
    b130:	14c5883a 	add	r2,r2,r19
    b134:	44c00115 	stw	r19,4(r8)
    b138:	40c00015 	stw	r3,0(r8)
    b13c:	d8801c15 	stw	r2,112(sp)
    b140:	d9401b15 	stw	r5,108(sp)
    b144:	00c001c4 	movi	r3,7
    b148:	1940070e 	bge	r3,r5,b168 <___vfiprintf_internal_r+0xd24>
    b14c:	103e4826 	beq	r2,zero,aa70 <__alt_data_end+0xff00aa70>
    b150:	d9402117 	ldw	r5,132(sp)
    b154:	d9002017 	ldw	r4,128(sp)
    b158:	d9801a04 	addi	r6,sp,104
    b15c:	000a3300 	call	a330 <__sprint_r.part.0>
    b160:	10000c1e 	bne	r2,zero,b194 <___vfiprintf_internal_r+0xd50>
    b164:	d8801c17 	ldw	r2,112(sp)
    b168:	8c80010e 	bge	r17,r18,b170 <___vfiprintf_internal_r+0xd2c>
    b16c:	9023883a 	mov	r17,r18
    b170:	da802317 	ldw	r10,140(sp)
    b174:	5455883a 	add	r10,r10,r17
    b178:	da802315 	stw	r10,140(sp)
    b17c:	103e4126 	beq	r2,zero,aa84 <__alt_data_end+0xff00aa84>
    b180:	d9402117 	ldw	r5,132(sp)
    b184:	d9002017 	ldw	r4,128(sp)
    b188:	d9801a04 	addi	r6,sp,104
    b18c:	000a3300 	call	a330 <__sprint_r.part.0>
    b190:	103e3c26 	beq	r2,zero,aa84 <__alt_data_end+0xff00aa84>
    b194:	dd002117 	ldw	r20,132(sp)
    b198:	a080030b 	ldhu	r2,12(r20)
    b19c:	1080100c 	andi	r2,r2,64
    b1a0:	1001231e 	bne	r2,zero,b630 <___vfiprintf_internal_r+0x11ec>
    b1a4:	d8802317 	ldw	r2,140(sp)
    b1a8:	003d7b06 	br	a798 <__alt_data_end+0xff00a798>
    b1ac:	1000991e 	bne	r2,zero,b414 <___vfiprintf_internal_r+0xfd0>
    b1b0:	00c00044 	movi	r3,1
    b1b4:	9805883a 	mov	r2,r19
    b1b8:	dd400015 	stw	r21,0(sp)
    b1bc:	dcc00115 	stw	r19,4(sp)
    b1c0:	dcc01c15 	stw	r19,112(sp)
    b1c4:	d8c01b15 	stw	r3,108(sp)
    b1c8:	d811883a 	mov	r8,sp
    b1cc:	42000204 	addi	r8,r8,8
    b1d0:	a2c0010c 	andi	r11,r20,4
    b1d4:	583fe426 	beq	r11,zero,b168 <__alt_data_end+0xff00b168>
    b1d8:	8ca7c83a 	sub	r19,r17,r18
    b1dc:	04ffe20e 	bge	zero,r19,b168 <__alt_data_end+0xff00b168>
    b1e0:	01c00404 	movi	r7,16
    b1e4:	3cffcc0e 	bge	r7,r19,b118 <__alt_data_end+0xff00b118>
    b1e8:	02800074 	movhi	r10,1
    b1ec:	52892404 	addi	r10,r10,9360
    b1f0:	d9001b17 	ldw	r4,108(sp)
    b1f4:	da802415 	stw	r10,144(sp)
    b1f8:	382b883a 	mov	r21,r7
    b1fc:	050001c4 	movi	r20,7
    b200:	df002017 	ldw	fp,128(sp)
    b204:	00000506 	br	b21c <___vfiprintf_internal_r+0xdd8>
    b208:	21400084 	addi	r5,r4,2
    b20c:	42000204 	addi	r8,r8,8
    b210:	1809883a 	mov	r4,r3
    b214:	9cfffc04 	addi	r19,r19,-16
    b218:	acffc40e 	bge	r21,r19,b12c <__alt_data_end+0xff00b12c>
    b21c:	10800404 	addi	r2,r2,16
    b220:	20c00044 	addi	r3,r4,1
    b224:	45800015 	stw	r22,0(r8)
    b228:	45400115 	stw	r21,4(r8)
    b22c:	d8801c15 	stw	r2,112(sp)
    b230:	d8c01b15 	stw	r3,108(sp)
    b234:	a0fff40e 	bge	r20,r3,b208 <__alt_data_end+0xff00b208>
    b238:	1000041e 	bne	r2,zero,b24c <___vfiprintf_internal_r+0xe08>
    b23c:	01400044 	movi	r5,1
    b240:	0009883a 	mov	r4,zero
    b244:	d811883a 	mov	r8,sp
    b248:	003ff206 	br	b214 <__alt_data_end+0xff00b214>
    b24c:	d9402117 	ldw	r5,132(sp)
    b250:	d9801a04 	addi	r6,sp,104
    b254:	e009883a 	mov	r4,fp
    b258:	000a3300 	call	a330 <__sprint_r.part.0>
    b25c:	103fcd1e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b260:	d9001b17 	ldw	r4,108(sp)
    b264:	d8801c17 	ldw	r2,112(sp)
    b268:	d811883a 	mov	r8,sp
    b26c:	21400044 	addi	r5,r4,1
    b270:	003fe806 	br	b214 <__alt_data_end+0xff00b214>
    b274:	d9402117 	ldw	r5,132(sp)
    b278:	d9002017 	ldw	r4,128(sp)
    b27c:	d9801a04 	addi	r6,sp,104
    b280:	d9c02b15 	stw	r7,172(sp)
    b284:	db402a15 	stw	r13,168(sp)
    b288:	000a3300 	call	a330 <__sprint_r.part.0>
    b28c:	d9c02b17 	ldw	r7,172(sp)
    b290:	db402a17 	ldw	r13,168(sp)
    b294:	103fbf1e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b298:	d9401b17 	ldw	r5,108(sp)
    b29c:	d8801c17 	ldw	r2,112(sp)
    b2a0:	d811883a 	mov	r8,sp
    b2a4:	29800044 	addi	r6,r5,1
    b2a8:	003dc406 	br	a9bc <__alt_data_end+0xff00a9bc>
    b2ac:	1000d21e 	bne	r2,zero,b5f8 <___vfiprintf_internal_r+0x11b4>
    b2b0:	d8c01d87 	ldb	r3,118(sp)
    b2b4:	18009526 	beq	r3,zero,b50c <___vfiprintf_internal_r+0x10c8>
    b2b8:	00800044 	movi	r2,1
    b2bc:	d8c01d84 	addi	r3,sp,118
    b2c0:	1009883a 	mov	r4,r2
    b2c4:	d8c00015 	stw	r3,0(sp)
    b2c8:	d8800115 	stw	r2,4(sp)
    b2cc:	d811883a 	mov	r8,sp
    b2d0:	200b883a 	mov	r5,r4
    b2d4:	42000204 	addi	r8,r8,8
    b2d8:	21000044 	addi	r4,r4,1
    b2dc:	003d9706 	br	a93c <__alt_data_end+0xff00a93c>
    b2e0:	d9001d04 	addi	r4,sp,116
    b2e4:	00800084 	movi	r2,2
    b2e8:	d9000015 	stw	r4,0(sp)
    b2ec:	d8800115 	stw	r2,4(sp)
    b2f0:	1809883a 	mov	r4,r3
    b2f4:	d811883a 	mov	r8,sp
    b2f8:	200b883a 	mov	r5,r4
    b2fc:	42000204 	addi	r8,r8,8
    b300:	21000044 	addi	r4,r4,1
    b304:	003f4e06 	br	b040 <__alt_data_end+0xff00b040>
    b308:	d8001d85 	stb	zero,118(sp)
    b30c:	48005016 	blt	r9,zero,b450 <___vfiprintf_internal_r+0x100c>
    b310:	00ffdfc4 	movi	r3,-129
    b314:	94c4b03a 	or	r2,r18,r19
    b318:	a0e8703a 	and	r20,r20,r3
    b31c:	103d4426 	beq	r2,zero,a830 <__alt_data_end+0xff00a830>
    b320:	0039883a 	mov	fp,zero
    b324:	d9002617 	ldw	r4,152(sp)
    b328:	dd401a04 	addi	r21,sp,104
    b32c:	908003cc 	andi	r2,r18,15
    b330:	9806973a 	slli	r3,r19,28
    b334:	2085883a 	add	r2,r4,r2
    b338:	9024d13a 	srli	r18,r18,4
    b33c:	10800003 	ldbu	r2,0(r2)
    b340:	9826d13a 	srli	r19,r19,4
    b344:	ad7fffc4 	addi	r21,r21,-1
    b348:	1ca4b03a 	or	r18,r3,r18
    b34c:	a8800005 	stb	r2,0(r21)
    b350:	94c4b03a 	or	r2,r18,r19
    b354:	103ff51e 	bne	r2,zero,b32c <__alt_data_end+0xff00b32c>
    b358:	003e5906 	br	acc0 <__alt_data_end+0xff00acc0>
    b35c:	d9402117 	ldw	r5,132(sp)
    b360:	d9002017 	ldw	r4,128(sp)
    b364:	d9801a04 	addi	r6,sp,104
    b368:	000a3300 	call	a330 <__sprint_r.part.0>
    b36c:	103f891e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b370:	d8801c17 	ldw	r2,112(sp)
    b374:	d811883a 	mov	r8,sp
    b378:	003f9506 	br	b1d0 <__alt_data_end+0xff00b1d0>
    b37c:	d9402117 	ldw	r5,132(sp)
    b380:	d9002017 	ldw	r4,128(sp)
    b384:	d9801a04 	addi	r6,sp,104
    b388:	000a3300 	call	a330 <__sprint_r.part.0>
    b38c:	103f811e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b390:	d811883a 	mov	r8,sp
    b394:	003ced06 	br	a74c <__alt_data_end+0xff00a74c>
    b398:	d9402117 	ldw	r5,132(sp)
    b39c:	d9002017 	ldw	r4,128(sp)
    b3a0:	d9801a04 	addi	r6,sp,104
    b3a4:	da402c15 	stw	r9,176(sp)
    b3a8:	db802a15 	stw	r14,168(sp)
    b3ac:	000a3300 	call	a330 <__sprint_r.part.0>
    b3b0:	da402c17 	ldw	r9,176(sp)
    b3b4:	db802a17 	ldw	r14,168(sp)
    b3b8:	103f761e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b3bc:	d9401b17 	ldw	r5,108(sp)
    b3c0:	d8801c17 	ldw	r2,112(sp)
    b3c4:	d811883a 	mov	r8,sp
    b3c8:	29000044 	addi	r4,r5,1
    b3cc:	003d5b06 	br	a93c <__alt_data_end+0xff00a93c>
    b3d0:	d9402117 	ldw	r5,132(sp)
    b3d4:	d9002017 	ldw	r4,128(sp)
    b3d8:	d9801a04 	addi	r6,sp,104
    b3dc:	da402c15 	stw	r9,176(sp)
    b3e0:	000a3300 	call	a330 <__sprint_r.part.0>
    b3e4:	da402c17 	ldw	r9,176(sp)
    b3e8:	103f6a1e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b3ec:	d9401b17 	ldw	r5,108(sp)
    b3f0:	d8801c17 	ldw	r2,112(sp)
    b3f4:	d811883a 	mov	r8,sp
    b3f8:	29000044 	addi	r4,r5,1
    b3fc:	003f1006 	br	b040 <__alt_data_end+0xff00b040>
    b400:	1000c31e 	bne	r2,zero,b710 <___vfiprintf_internal_r+0x12cc>
    b404:	01000044 	movi	r4,1
    b408:	000b883a 	mov	r5,zero
    b40c:	d811883a 	mov	r8,sp
    b410:	003f0d06 	br	b048 <__alt_data_end+0xff00b048>
    b414:	d9402117 	ldw	r5,132(sp)
    b418:	d9002017 	ldw	r4,128(sp)
    b41c:	d9801a04 	addi	r6,sp,104
    b420:	000a3300 	call	a330 <__sprint_r.part.0>
    b424:	103f5b1e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b428:	d9001b17 	ldw	r4,108(sp)
    b42c:	d8801c17 	ldw	r2,112(sp)
    b430:	d811883a 	mov	r8,sp
    b434:	21000044 	addi	r4,r4,1
    b438:	003d8006 	br	aa3c <__alt_data_end+0xff00aa3c>
    b43c:	01000074 	movhi	r4,1
    b440:	2108bf04 	addi	r4,r4,8956
    b444:	d9002615 	stw	r4,152(sp)
    b448:	d8c02215 	stw	r3,136(sp)
    b44c:	1029883a 	mov	r20,r2
    b450:	94c4b03a 	or	r2,r18,r19
    b454:	103fb21e 	bne	r2,zero,b320 <__alt_data_end+0xff00b320>
    b458:	0039883a 	mov	fp,zero
    b45c:	00800084 	movi	r2,2
    b460:	003e6b06 	br	ae10 <__alt_data_end+0xff00ae10>
    b464:	da802217 	ldw	r10,136(sp)
    b468:	d8001d85 	stb	zero,118(sp)
    b46c:	0027883a 	mov	r19,zero
    b470:	50800104 	addi	r2,r10,4
    b474:	54800017 	ldw	r18,0(r10)
    b478:	483e6016 	blt	r9,zero,adfc <__alt_data_end+0xff00adfc>
    b47c:	00ffdfc4 	movi	r3,-129
    b480:	d8802215 	stw	r2,136(sp)
    b484:	a0e8703a 	and	r20,r20,r3
    b488:	0039883a 	mov	fp,zero
    b48c:	903ebb26 	beq	r18,zero,af7c <__alt_data_end+0xff00af7c>
    b490:	00800244 	movi	r2,9
    b494:	14bdee36 	bltu	r2,r18,ac50 <__alt_data_end+0xff00ac50>
    b498:	003eba06 	br	af84 <__alt_data_end+0xff00af84>
    b49c:	00800c04 	movi	r2,48
    b4a0:	d8c01d45 	stb	r3,117(sp)
    b4a4:	d8801d05 	stb	r2,116(sp)
    b4a8:	d8001d85 	stb	zero,118(sp)
    b4ac:	a0c00094 	ori	r3,r20,2
    b4b0:	4800a916 	blt	r9,zero,b758 <___vfiprintf_internal_r+0x1314>
    b4b4:	00bfdfc4 	movi	r2,-129
    b4b8:	a096703a 	and	r11,r20,r2
    b4bc:	5d000094 	ori	r20,r11,2
    b4c0:	0039883a 	mov	fp,zero
    b4c4:	003f9706 	br	b324 <__alt_data_end+0xff00b324>
    b4c8:	8025883a 	mov	r18,r16
    b4cc:	003c2e06 	br	a588 <__alt_data_end+0xff00a588>
    b4d0:	00800074 	movhi	r2,1
    b4d4:	1088bf04 	addi	r2,r2,8956
    b4d8:	0039883a 	mov	fp,zero
    b4dc:	d8802615 	stw	r2,152(sp)
    b4e0:	003f9006 	br	b324 <__alt_data_end+0xff00b324>
    b4e4:	04a5c83a 	sub	r18,zero,r18
    b4e8:	07000b44 	movi	fp,45
    b4ec:	9004c03a 	cmpne	r2,r18,zero
    b4f0:	04e7c83a 	sub	r19,zero,r19
    b4f4:	df001d85 	stb	fp,118(sp)
    b4f8:	98a7c83a 	sub	r19,r19,r2
    b4fc:	48009f16 	blt	r9,zero,b77c <___vfiprintf_internal_r+0x1338>
    b500:	00bfdfc4 	movi	r2,-129
    b504:	a0a8703a 	and	r20,r20,r2
    b508:	003dd006 	br	ac4c <__alt_data_end+0xff00ac4c>
    b50c:	70004c26 	beq	r14,zero,b640 <___vfiprintf_internal_r+0x11fc>
    b510:	00800084 	movi	r2,2
    b514:	d8c01d04 	addi	r3,sp,116
    b518:	d8c00015 	stw	r3,0(sp)
    b51c:	d8800115 	stw	r2,4(sp)
    b520:	01000044 	movi	r4,1
    b524:	d811883a 	mov	r8,sp
    b528:	003f7306 	br	b2f8 <__alt_data_end+0xff00b2f8>
    b52c:	a080100c 	andi	r2,r20,64
    b530:	da802217 	ldw	r10,136(sp)
    b534:	103e0626 	beq	r2,zero,ad50 <__alt_data_end+0xff00ad50>
    b538:	5480000f 	ldh	r18,0(r10)
    b53c:	52800104 	addi	r10,r10,4
    b540:	da802215 	stw	r10,136(sp)
    b544:	9027d7fa 	srai	r19,r18,31
    b548:	9805883a 	mov	r2,r19
    b54c:	003db806 	br	ac30 <__alt_data_end+0xff00ac30>
    b550:	a080040c 	andi	r2,r20,16
    b554:	1000091e 	bne	r2,zero,b57c <___vfiprintf_internal_r+0x1138>
    b558:	a2c0100c 	andi	r11,r20,64
    b55c:	58000726 	beq	r11,zero,b57c <___vfiprintf_internal_r+0x1138>
    b560:	da802217 	ldw	r10,136(sp)
    b564:	50800017 	ldw	r2,0(r10)
    b568:	52800104 	addi	r10,r10,4
    b56c:	da802215 	stw	r10,136(sp)
    b570:	da802317 	ldw	r10,140(sp)
    b574:	1280000d 	sth	r10,0(r2)
    b578:	003be706 	br	a518 <__alt_data_end+0xff00a518>
    b57c:	da802217 	ldw	r10,136(sp)
    b580:	50800017 	ldw	r2,0(r10)
    b584:	52800104 	addi	r10,r10,4
    b588:	da802215 	stw	r10,136(sp)
    b58c:	da802317 	ldw	r10,140(sp)
    b590:	12800015 	stw	r10,0(r2)
    b594:	003be006 	br	a518 <__alt_data_end+0xff00a518>
    b598:	a080100c 	andi	r2,r20,64
    b59c:	da802217 	ldw	r10,136(sp)
    b5a0:	10003026 	beq	r2,zero,b664 <___vfiprintf_internal_r+0x1220>
    b5a4:	5480000b 	ldhu	r18,0(r10)
    b5a8:	52800104 	addi	r10,r10,4
    b5ac:	0027883a 	mov	r19,zero
    b5b0:	da802215 	stw	r10,136(sp)
    b5b4:	003d8006 	br	abb8 <__alt_data_end+0xff00abb8>
    b5b8:	80c00007 	ldb	r3,0(r16)
    b5bc:	003c0006 	br	a5c0 <__alt_data_end+0xff00a5c0>
    b5c0:	a080100c 	andi	r2,r20,64
    b5c4:	d8001d85 	stb	zero,118(sp)
    b5c8:	da802217 	ldw	r10,136(sp)
    b5cc:	1000201e 	bne	r2,zero,b650 <___vfiprintf_internal_r+0x120c>
    b5d0:	50800104 	addi	r2,r10,4
    b5d4:	54800017 	ldw	r18,0(r10)
    b5d8:	0027883a 	mov	r19,zero
    b5dc:	483def0e 	bge	r9,zero,ad9c <__alt_data_end+0xff00ad9c>
    b5e0:	94c6b03a 	or	r3,r18,r19
    b5e4:	d8802215 	stw	r2,136(sp)
    b5e8:	183d4e1e 	bne	r3,zero,ab24 <__alt_data_end+0xff00ab24>
    b5ec:	0039883a 	mov	fp,zero
    b5f0:	0005883a 	mov	r2,zero
    b5f4:	003e0606 	br	ae10 <__alt_data_end+0xff00ae10>
    b5f8:	d9402117 	ldw	r5,132(sp)
    b5fc:	d9002017 	ldw	r4,128(sp)
    b600:	d9801a04 	addi	r6,sp,104
    b604:	da402c15 	stw	r9,176(sp)
    b608:	db802a15 	stw	r14,168(sp)
    b60c:	000a3300 	call	a330 <__sprint_r.part.0>
    b610:	da402c17 	ldw	r9,176(sp)
    b614:	db802a17 	ldw	r14,168(sp)
    b618:	103ede1e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b61c:	d9401b17 	ldw	r5,108(sp)
    b620:	d8801c17 	ldw	r2,112(sp)
    b624:	d811883a 	mov	r8,sp
    b628:	29000044 	addi	r4,r5,1
    b62c:	003e7406 	br	b000 <__alt_data_end+0xff00b000>
    b630:	00bfffc4 	movi	r2,-1
    b634:	003c5806 	br	a798 <__alt_data_end+0xff00a798>
    b638:	d811883a 	mov	r8,sp
    b63c:	003ee806 	br	b1e0 <__alt_data_end+0xff00b1e0>
    b640:	000b883a 	mov	r5,zero
    b644:	01000044 	movi	r4,1
    b648:	d811883a 	mov	r8,sp
    b64c:	003e7c06 	br	b040 <__alt_data_end+0xff00b040>
    b650:	50800104 	addi	r2,r10,4
    b654:	5480000b 	ldhu	r18,0(r10)
    b658:	0027883a 	mov	r19,zero
    b65c:	483dcf0e 	bge	r9,zero,ad9c <__alt_data_end+0xff00ad9c>
    b660:	003fdf06 	br	b5e0 <__alt_data_end+0xff00b5e0>
    b664:	54800017 	ldw	r18,0(r10)
    b668:	52800104 	addi	r10,r10,4
    b66c:	0027883a 	mov	r19,zero
    b670:	da802215 	stw	r10,136(sp)
    b674:	003d5006 	br	abb8 <__alt_data_end+0xff00abb8>
    b678:	50800104 	addi	r2,r10,4
    b67c:	5480000b 	ldhu	r18,0(r10)
    b680:	0027883a 	mov	r19,zero
    b684:	483f7d0e 	bge	r9,zero,b47c <__alt_data_end+0xff00b47c>
    b688:	003ddc06 	br	adfc <__alt_data_end+0xff00adfc>
    b68c:	d8c02215 	stw	r3,136(sp)
    b690:	0039883a 	mov	fp,zero
    b694:	003ddb06 	br	ae04 <__alt_data_end+0xff00ae04>
    b698:	02800074 	movhi	r10,1
    b69c:	52892004 	addi	r10,r10,9344
    b6a0:	da802415 	stw	r10,144(sp)
    b6a4:	003e8306 	br	b0b4 <__alt_data_end+0xff00b0b4>
    b6a8:	d8801c17 	ldw	r2,112(sp)
    b6ac:	dd002117 	ldw	r20,132(sp)
    b6b0:	103eb926 	beq	r2,zero,b198 <__alt_data_end+0xff00b198>
    b6b4:	d9002017 	ldw	r4,128(sp)
    b6b8:	d9801a04 	addi	r6,sp,104
    b6bc:	a00b883a 	mov	r5,r20
    b6c0:	000a3300 	call	a330 <__sprint_r.part.0>
    b6c4:	003eb406 	br	b198 <__alt_data_end+0xff00b198>
    b6c8:	80c00043 	ldbu	r3,1(r16)
    b6cc:	a5000814 	ori	r20,r20,32
    b6d0:	84000044 	addi	r16,r16,1
    b6d4:	18c03fcc 	andi	r3,r3,255
    b6d8:	18c0201c 	xori	r3,r3,128
    b6dc:	18ffe004 	addi	r3,r3,-128
    b6e0:	003bb706 	br	a5c0 <__alt_data_end+0xff00a5c0>
    b6e4:	a809883a 	mov	r4,r21
    b6e8:	d8c02a15 	stw	r3,168(sp)
    b6ec:	da002b15 	stw	r8,172(sp)
    b6f0:	00035f80 	call	35f8 <strlen>
    b6f4:	d8c02a17 	ldw	r3,168(sp)
    b6f8:	1027883a 	mov	r19,r2
    b6fc:	df001d83 	ldbu	fp,118(sp)
    b700:	d8c02215 	stw	r3,136(sp)
    b704:	0013883a 	mov	r9,zero
    b708:	da002b17 	ldw	r8,172(sp)
    b70c:	003c4d06 	br	a844 <__alt_data_end+0xff00a844>
    b710:	d9402117 	ldw	r5,132(sp)
    b714:	d9002017 	ldw	r4,128(sp)
    b718:	d9801a04 	addi	r6,sp,104
    b71c:	da402c15 	stw	r9,176(sp)
    b720:	000a3300 	call	a330 <__sprint_r.part.0>
    b724:	da402c17 	ldw	r9,176(sp)
    b728:	103e9a1e 	bne	r2,zero,b194 <__alt_data_end+0xff00b194>
    b72c:	d9401b17 	ldw	r5,108(sp)
    b730:	d8801c17 	ldw	r2,112(sp)
    b734:	d811883a 	mov	r8,sp
    b738:	29000044 	addi	r4,r5,1
    b73c:	003e4206 	br	b048 <__alt_data_end+0xff00b048>
    b740:	d9401b17 	ldw	r5,108(sp)
    b744:	01000074 	movhi	r4,1
    b748:	21092404 	addi	r4,r4,9360
    b74c:	d9002415 	stw	r4,144(sp)
    b750:	29400044 	addi	r5,r5,1
    b754:	003c6d06 	br	a90c <__alt_data_end+0xff00a90c>
    b758:	0039883a 	mov	fp,zero
    b75c:	00800084 	movi	r2,2
    b760:	10803fcc 	andi	r2,r2,255
    b764:	01000044 	movi	r4,1
    b768:	11001e26 	beq	r2,r4,b7e4 <___vfiprintf_internal_r+0x13a0>
    b76c:	01000084 	movi	r4,2
    b770:	11001e1e 	bne	r2,r4,b7ec <___vfiprintf_internal_r+0x13a8>
    b774:	1829883a 	mov	r20,r3
    b778:	003eea06 	br	b324 <__alt_data_end+0xff00b324>
    b77c:	a007883a 	mov	r3,r20
    b780:	00800044 	movi	r2,1
    b784:	003ff606 	br	b760 <__alt_data_end+0xff00b760>
    b788:	00800184 	movi	r2,6
    b78c:	1240012e 	bgeu	r2,r9,b794 <___vfiprintf_internal_r+0x1350>
    b790:	1013883a 	mov	r9,r2
    b794:	4827883a 	mov	r19,r9
    b798:	4825883a 	mov	r18,r9
    b79c:	48001516 	blt	r9,zero,b7f4 <___vfiprintf_internal_r+0x13b0>
    b7a0:	05400074 	movhi	r21,1
    b7a4:	d8c02215 	stw	r3,136(sp)
    b7a8:	ad48c404 	addi	r21,r21,8976
    b7ac:	003d1406 	br	ac00 <__alt_data_end+0xff00ac00>
    b7b0:	02800074 	movhi	r10,1
    b7b4:	52892004 	addi	r10,r10,9344
    b7b8:	da802415 	stw	r10,144(sp)
    b7bc:	200d883a 	mov	r6,r4
    b7c0:	003c9106 	br	aa08 <__alt_data_end+0xff00aa08>
    b7c4:	5021883a 	mov	r16,r10
    b7c8:	0013883a 	mov	r9,zero
    b7cc:	003b7d06 	br	a5c4 <__alt_data_end+0xff00a5c4>
    b7d0:	4827883a 	mov	r19,r9
    b7d4:	df001d83 	ldbu	fp,118(sp)
    b7d8:	d8c02215 	stw	r3,136(sp)
    b7dc:	0013883a 	mov	r9,zero
    b7e0:	003c1806 	br	a844 <__alt_data_end+0xff00a844>
    b7e4:	1829883a 	mov	r20,r3
    b7e8:	003d1806 	br	ac4c <__alt_data_end+0xff00ac4c>
    b7ec:	1829883a 	mov	r20,r3
    b7f0:	003ccd06 	br	ab28 <__alt_data_end+0xff00ab28>
    b7f4:	0025883a 	mov	r18,zero
    b7f8:	003fe906 	br	b7a0 <__alt_data_end+0xff00b7a0>
    b7fc:	d8802217 	ldw	r2,136(sp)
    b800:	80c00043 	ldbu	r3,1(r16)
    b804:	5021883a 	mov	r16,r10
    b808:	12400017 	ldw	r9,0(r2)
    b80c:	10800104 	addi	r2,r2,4
    b810:	d8802215 	stw	r2,136(sp)
    b814:	483faf0e 	bge	r9,zero,b6d4 <__alt_data_end+0xff00b6d4>
    b818:	18c03fcc 	andi	r3,r3,255
    b81c:	18c0201c 	xori	r3,r3,128
    b820:	027fffc4 	movi	r9,-1
    b824:	18ffe004 	addi	r3,r3,-128
    b828:	003b6506 	br	a5c0 <__alt_data_end+0xff00a5c0>
    b82c:	d9c01d85 	stb	r7,118(sp)
    b830:	003ca006 	br	aab4 <__alt_data_end+0xff00aab4>
    b834:	d9c01d85 	stb	r7,118(sp)
    b838:	003cad06 	br	aaf0 <__alt_data_end+0xff00aaf0>
    b83c:	d9c01d85 	stb	r7,118(sp)
    b840:	003d7d06 	br	ae38 <__alt_data_end+0xff00ae38>
    b844:	d9c01d85 	stb	r7,118(sp)
    b848:	003d5f06 	br	adc8 <__alt_data_end+0xff00adc8>
    b84c:	a080004c 	andi	r2,r20,1
    b850:	0039883a 	mov	fp,zero
    b854:	10000526 	beq	r2,zero,b86c <___vfiprintf_internal_r+0x1428>
    b858:	00800c04 	movi	r2,48
    b85c:	d88019c5 	stb	r2,103(sp)
    b860:	dcc02717 	ldw	r19,156(sp)
    b864:	dd4019c4 	addi	r21,sp,103
    b868:	003bf606 	br	a844 <__alt_data_end+0xff00a844>
    b86c:	0027883a 	mov	r19,zero
    b870:	dd401a04 	addi	r21,sp,104
    b874:	003bf306 	br	a844 <__alt_data_end+0xff00a844>
    b878:	d9c01d85 	stb	r7,118(sp)
    b87c:	003dc806 	br	afa0 <__alt_data_end+0xff00afa0>
    b880:	d9c01d85 	stb	r7,118(sp)
    b884:	003d3a06 	br	ad70 <__alt_data_end+0xff00ad70>
    b888:	d9c01d85 	stb	r7,118(sp)
    b88c:	003d2a06 	br	ad38 <__alt_data_end+0xff00ad38>
    b890:	d9c01d85 	stb	r7,118(sp)
    b894:	003cde06 	br	ac10 <__alt_data_end+0xff00ac10>
    b898:	d9c01d85 	stb	r7,118(sp)
    b89c:	003cbc06 	br	ab90 <__alt_data_end+0xff00ab90>

0000b8a0 <__vfiprintf_internal>:
    b8a0:	00800074 	movhi	r2,1
    b8a4:	10902304 	addi	r2,r2,16524
    b8a8:	300f883a 	mov	r7,r6
    b8ac:	280d883a 	mov	r6,r5
    b8b0:	200b883a 	mov	r5,r4
    b8b4:	11000017 	ldw	r4,0(r2)
    b8b8:	000a4441 	jmpi	a444 <___vfiprintf_internal_r>

0000b8bc <__sbprintf>:
    b8bc:	2880030b 	ldhu	r2,12(r5)
    b8c0:	2ac01917 	ldw	r11,100(r5)
    b8c4:	2a80038b 	ldhu	r10,14(r5)
    b8c8:	2a400717 	ldw	r9,28(r5)
    b8cc:	2a000917 	ldw	r8,36(r5)
    b8d0:	defee204 	addi	sp,sp,-1144
    b8d4:	00c10004 	movi	r3,1024
    b8d8:	dc011a15 	stw	r16,1128(sp)
    b8dc:	10bfff4c 	andi	r2,r2,65533
    b8e0:	2821883a 	mov	r16,r5
    b8e4:	d8cb883a 	add	r5,sp,r3
    b8e8:	dc811c15 	stw	r18,1136(sp)
    b8ec:	dc411b15 	stw	r17,1132(sp)
    b8f0:	dfc11d15 	stw	ra,1140(sp)
    b8f4:	2025883a 	mov	r18,r4
    b8f8:	d881030d 	sth	r2,1036(sp)
    b8fc:	dac11915 	stw	r11,1124(sp)
    b900:	da81038d 	sth	r10,1038(sp)
    b904:	da410715 	stw	r9,1052(sp)
    b908:	da010915 	stw	r8,1060(sp)
    b90c:	dec10015 	stw	sp,1024(sp)
    b910:	dec10415 	stw	sp,1040(sp)
    b914:	d8c10215 	stw	r3,1032(sp)
    b918:	d8c10515 	stw	r3,1044(sp)
    b91c:	d8010615 	stw	zero,1048(sp)
    b920:	000a4440 	call	a444 <___vfiprintf_internal_r>
    b924:	1023883a 	mov	r17,r2
    b928:	10000416 	blt	r2,zero,b93c <__sbprintf+0x80>
    b92c:	d9410004 	addi	r5,sp,1024
    b930:	9009883a 	mov	r4,r18
    b934:	00075580 	call	7558 <_fflush_r>
    b938:	10000d1e 	bne	r2,zero,b970 <__sbprintf+0xb4>
    b93c:	d881030b 	ldhu	r2,1036(sp)
    b940:	1080100c 	andi	r2,r2,64
    b944:	10000326 	beq	r2,zero,b954 <__sbprintf+0x98>
    b948:	8080030b 	ldhu	r2,12(r16)
    b94c:	10801014 	ori	r2,r2,64
    b950:	8080030d 	sth	r2,12(r16)
    b954:	8805883a 	mov	r2,r17
    b958:	dfc11d17 	ldw	ra,1140(sp)
    b95c:	dc811c17 	ldw	r18,1136(sp)
    b960:	dc411b17 	ldw	r17,1132(sp)
    b964:	dc011a17 	ldw	r16,1128(sp)
    b968:	dec11e04 	addi	sp,sp,1144
    b96c:	f800283a 	ret
    b970:	047fffc4 	movi	r17,-1
    b974:	003ff106 	br	b93c <__alt_data_end+0xff00b93c>

0000b978 <_write_r>:
    b978:	defffd04 	addi	sp,sp,-12
    b97c:	2805883a 	mov	r2,r5
    b980:	dc000015 	stw	r16,0(sp)
    b984:	04000074 	movhi	r16,1
    b988:	dc400115 	stw	r17,4(sp)
    b98c:	300b883a 	mov	r5,r6
    b990:	8416fa04 	addi	r16,r16,23528
    b994:	2023883a 	mov	r17,r4
    b998:	380d883a 	mov	r6,r7
    b99c:	1009883a 	mov	r4,r2
    b9a0:	dfc00215 	stw	ra,8(sp)
    b9a4:	80000015 	stw	zero,0(r16)
    b9a8:	000fc400 	call	fc40 <write>
    b9ac:	00ffffc4 	movi	r3,-1
    b9b0:	10c00526 	beq	r2,r3,b9c8 <_write_r+0x50>
    b9b4:	dfc00217 	ldw	ra,8(sp)
    b9b8:	dc400117 	ldw	r17,4(sp)
    b9bc:	dc000017 	ldw	r16,0(sp)
    b9c0:	dec00304 	addi	sp,sp,12
    b9c4:	f800283a 	ret
    b9c8:	80c00017 	ldw	r3,0(r16)
    b9cc:	183ff926 	beq	r3,zero,b9b4 <__alt_data_end+0xff00b9b4>
    b9d0:	88c00015 	stw	r3,0(r17)
    b9d4:	003ff706 	br	b9b4 <__alt_data_end+0xff00b9b4>

0000b9d8 <_close_r>:
    b9d8:	defffd04 	addi	sp,sp,-12
    b9dc:	dc000015 	stw	r16,0(sp)
    b9e0:	04000074 	movhi	r16,1
    b9e4:	dc400115 	stw	r17,4(sp)
    b9e8:	8416fa04 	addi	r16,r16,23528
    b9ec:	2023883a 	mov	r17,r4
    b9f0:	2809883a 	mov	r4,r5
    b9f4:	dfc00215 	stw	ra,8(sp)
    b9f8:	80000015 	stw	zero,0(r16)
    b9fc:	000f4000 	call	f400 <close>
    ba00:	00ffffc4 	movi	r3,-1
    ba04:	10c00526 	beq	r2,r3,ba1c <_close_r+0x44>
    ba08:	dfc00217 	ldw	ra,8(sp)
    ba0c:	dc400117 	ldw	r17,4(sp)
    ba10:	dc000017 	ldw	r16,0(sp)
    ba14:	dec00304 	addi	sp,sp,12
    ba18:	f800283a 	ret
    ba1c:	80c00017 	ldw	r3,0(r16)
    ba20:	183ff926 	beq	r3,zero,ba08 <__alt_data_end+0xff00ba08>
    ba24:	88c00015 	stw	r3,0(r17)
    ba28:	003ff706 	br	ba08 <__alt_data_end+0xff00ba08>

0000ba2c <_calloc_r>:
    ba2c:	298b383a 	mul	r5,r5,r6
    ba30:	defffe04 	addi	sp,sp,-8
    ba34:	dfc00115 	stw	ra,4(sp)
    ba38:	dc000015 	stw	r16,0(sp)
    ba3c:	0002c580 	call	2c58 <_malloc_r>
    ba40:	10002926 	beq	r2,zero,bae8 <_calloc_r+0xbc>
    ba44:	11bfff17 	ldw	r6,-4(r2)
    ba48:	1021883a 	mov	r16,r2
    ba4c:	00bfff04 	movi	r2,-4
    ba50:	308c703a 	and	r6,r6,r2
    ba54:	00c00904 	movi	r3,36
    ba58:	308d883a 	add	r6,r6,r2
    ba5c:	19801636 	bltu	r3,r6,bab8 <_calloc_r+0x8c>
    ba60:	008004c4 	movi	r2,19
    ba64:	11800b2e 	bgeu	r2,r6,ba94 <_calloc_r+0x68>
    ba68:	80000015 	stw	zero,0(r16)
    ba6c:	80000115 	stw	zero,4(r16)
    ba70:	008006c4 	movi	r2,27
    ba74:	11801a2e 	bgeu	r2,r6,bae0 <_calloc_r+0xb4>
    ba78:	80000215 	stw	zero,8(r16)
    ba7c:	80000315 	stw	zero,12(r16)
    ba80:	30c0151e 	bne	r6,r3,bad8 <_calloc_r+0xac>
    ba84:	80000415 	stw	zero,16(r16)
    ba88:	80800604 	addi	r2,r16,24
    ba8c:	80000515 	stw	zero,20(r16)
    ba90:	00000106 	br	ba98 <_calloc_r+0x6c>
    ba94:	8005883a 	mov	r2,r16
    ba98:	10000015 	stw	zero,0(r2)
    ba9c:	10000115 	stw	zero,4(r2)
    baa0:	10000215 	stw	zero,8(r2)
    baa4:	8005883a 	mov	r2,r16
    baa8:	dfc00117 	ldw	ra,4(sp)
    baac:	dc000017 	ldw	r16,0(sp)
    bab0:	dec00204 	addi	sp,sp,8
    bab4:	f800283a 	ret
    bab8:	000b883a 	mov	r5,zero
    babc:	8009883a 	mov	r4,r16
    bac0:	0008a1c0 	call	8a1c <memset>
    bac4:	8005883a 	mov	r2,r16
    bac8:	dfc00117 	ldw	ra,4(sp)
    bacc:	dc000017 	ldw	r16,0(sp)
    bad0:	dec00204 	addi	sp,sp,8
    bad4:	f800283a 	ret
    bad8:	80800404 	addi	r2,r16,16
    badc:	003fee06 	br	ba98 <__alt_data_end+0xff00ba98>
    bae0:	80800204 	addi	r2,r16,8
    bae4:	003fec06 	br	ba98 <__alt_data_end+0xff00ba98>
    bae8:	0005883a 	mov	r2,zero
    baec:	003fee06 	br	baa8 <__alt_data_end+0xff00baa8>

0000baf0 <_fclose_r>:
    baf0:	28003926 	beq	r5,zero,bbd8 <_fclose_r+0xe8>
    baf4:	defffc04 	addi	sp,sp,-16
    baf8:	dc400115 	stw	r17,4(sp)
    bafc:	dc000015 	stw	r16,0(sp)
    bb00:	dfc00315 	stw	ra,12(sp)
    bb04:	dc800215 	stw	r18,8(sp)
    bb08:	2023883a 	mov	r17,r4
    bb0c:	2821883a 	mov	r16,r5
    bb10:	20000226 	beq	r4,zero,bb1c <_fclose_r+0x2c>
    bb14:	20800e17 	ldw	r2,56(r4)
    bb18:	10002726 	beq	r2,zero,bbb8 <_fclose_r+0xc8>
    bb1c:	8080030f 	ldh	r2,12(r16)
    bb20:	1000071e 	bne	r2,zero,bb40 <_fclose_r+0x50>
    bb24:	0005883a 	mov	r2,zero
    bb28:	dfc00317 	ldw	ra,12(sp)
    bb2c:	dc800217 	ldw	r18,8(sp)
    bb30:	dc400117 	ldw	r17,4(sp)
    bb34:	dc000017 	ldw	r16,0(sp)
    bb38:	dec00404 	addi	sp,sp,16
    bb3c:	f800283a 	ret
    bb40:	800b883a 	mov	r5,r16
    bb44:	8809883a 	mov	r4,r17
    bb48:	000733c0 	call	733c <__sflush_r>
    bb4c:	1025883a 	mov	r18,r2
    bb50:	80800b17 	ldw	r2,44(r16)
    bb54:	10000426 	beq	r2,zero,bb68 <_fclose_r+0x78>
    bb58:	81400717 	ldw	r5,28(r16)
    bb5c:	8809883a 	mov	r4,r17
    bb60:	103ee83a 	callr	r2
    bb64:	10001616 	blt	r2,zero,bbc0 <_fclose_r+0xd0>
    bb68:	8080030b 	ldhu	r2,12(r16)
    bb6c:	1080200c 	andi	r2,r2,128
    bb70:	1000151e 	bne	r2,zero,bbc8 <_fclose_r+0xd8>
    bb74:	81400c17 	ldw	r5,48(r16)
    bb78:	28000526 	beq	r5,zero,bb90 <_fclose_r+0xa0>
    bb7c:	80801004 	addi	r2,r16,64
    bb80:	28800226 	beq	r5,r2,bb8c <_fclose_r+0x9c>
    bb84:	8809883a 	mov	r4,r17
    bb88:	0007aa80 	call	7aa8 <_free_r>
    bb8c:	80000c15 	stw	zero,48(r16)
    bb90:	81401117 	ldw	r5,68(r16)
    bb94:	28000326 	beq	r5,zero,bba4 <_fclose_r+0xb4>
    bb98:	8809883a 	mov	r4,r17
    bb9c:	0007aa80 	call	7aa8 <_free_r>
    bba0:	80001115 	stw	zero,68(r16)
    bba4:	00079440 	call	7944 <__sfp_lock_acquire>
    bba8:	8000030d 	sth	zero,12(r16)
    bbac:	00079480 	call	7948 <__sfp_lock_release>
    bbb0:	9005883a 	mov	r2,r18
    bbb4:	003fdc06 	br	bb28 <__alt_data_end+0xff00bb28>
    bbb8:	00079340 	call	7934 <__sinit>
    bbbc:	003fd706 	br	bb1c <__alt_data_end+0xff00bb1c>
    bbc0:	04bfffc4 	movi	r18,-1
    bbc4:	003fe806 	br	bb68 <__alt_data_end+0xff00bb68>
    bbc8:	81400417 	ldw	r5,16(r16)
    bbcc:	8809883a 	mov	r4,r17
    bbd0:	0007aa80 	call	7aa8 <_free_r>
    bbd4:	003fe706 	br	bb74 <__alt_data_end+0xff00bb74>
    bbd8:	0005883a 	mov	r2,zero
    bbdc:	f800283a 	ret

0000bbe0 <fclose>:
    bbe0:	00800074 	movhi	r2,1
    bbe4:	10902304 	addi	r2,r2,16524
    bbe8:	200b883a 	mov	r5,r4
    bbec:	11000017 	ldw	r4,0(r2)
    bbf0:	000baf01 	jmpi	baf0 <_fclose_r>

0000bbf4 <__fputwc>:
    bbf4:	defff804 	addi	sp,sp,-32
    bbf8:	dcc00415 	stw	r19,16(sp)
    bbfc:	dc800315 	stw	r18,12(sp)
    bc00:	dc000115 	stw	r16,4(sp)
    bc04:	dfc00715 	stw	ra,28(sp)
    bc08:	dd400615 	stw	r21,24(sp)
    bc0c:	dd000515 	stw	r20,20(sp)
    bc10:	dc400215 	stw	r17,8(sp)
    bc14:	2027883a 	mov	r19,r4
    bc18:	2825883a 	mov	r18,r5
    bc1c:	3021883a 	mov	r16,r6
    bc20:	00084840 	call	8484 <__locale_mb_cur_max>
    bc24:	00c00044 	movi	r3,1
    bc28:	10c03e26 	beq	r2,r3,bd24 <__fputwc+0x130>
    bc2c:	81c01704 	addi	r7,r16,92
    bc30:	900d883a 	mov	r6,r18
    bc34:	d80b883a 	mov	r5,sp
    bc38:	9809883a 	mov	r4,r19
    bc3c:	000c0c40 	call	c0c4 <_wcrtomb_r>
    bc40:	1029883a 	mov	r20,r2
    bc44:	00bfffc4 	movi	r2,-1
    bc48:	a0802026 	beq	r20,r2,bccc <__fputwc+0xd8>
    bc4c:	d9400003 	ldbu	r5,0(sp)
    bc50:	a0001c26 	beq	r20,zero,bcc4 <__fputwc+0xd0>
    bc54:	0023883a 	mov	r17,zero
    bc58:	05400284 	movi	r21,10
    bc5c:	00000906 	br	bc84 <__fputwc+0x90>
    bc60:	80800017 	ldw	r2,0(r16)
    bc64:	11400005 	stb	r5,0(r2)
    bc68:	80c00017 	ldw	r3,0(r16)
    bc6c:	18c00044 	addi	r3,r3,1
    bc70:	80c00015 	stw	r3,0(r16)
    bc74:	8c400044 	addi	r17,r17,1
    bc78:	dc45883a 	add	r2,sp,r17
    bc7c:	8d00112e 	bgeu	r17,r20,bcc4 <__fputwc+0xd0>
    bc80:	11400003 	ldbu	r5,0(r2)
    bc84:	80c00217 	ldw	r3,8(r16)
    bc88:	18ffffc4 	addi	r3,r3,-1
    bc8c:	80c00215 	stw	r3,8(r16)
    bc90:	183ff30e 	bge	r3,zero,bc60 <__alt_data_end+0xff00bc60>
    bc94:	80800617 	ldw	r2,24(r16)
    bc98:	18801916 	blt	r3,r2,bd00 <__fputwc+0x10c>
    bc9c:	80800017 	ldw	r2,0(r16)
    bca0:	11400005 	stb	r5,0(r2)
    bca4:	80800017 	ldw	r2,0(r16)
    bca8:	10c00003 	ldbu	r3,0(r2)
    bcac:	10800044 	addi	r2,r2,1
    bcb0:	1d402326 	beq	r3,r21,bd40 <__fputwc+0x14c>
    bcb4:	80800015 	stw	r2,0(r16)
    bcb8:	8c400044 	addi	r17,r17,1
    bcbc:	dc45883a 	add	r2,sp,r17
    bcc0:	8d3fef36 	bltu	r17,r20,bc80 <__alt_data_end+0xff00bc80>
    bcc4:	9005883a 	mov	r2,r18
    bcc8:	00000406 	br	bcdc <__fputwc+0xe8>
    bccc:	80c0030b 	ldhu	r3,12(r16)
    bcd0:	a005883a 	mov	r2,r20
    bcd4:	18c01014 	ori	r3,r3,64
    bcd8:	80c0030d 	sth	r3,12(r16)
    bcdc:	dfc00717 	ldw	ra,28(sp)
    bce0:	dd400617 	ldw	r21,24(sp)
    bce4:	dd000517 	ldw	r20,20(sp)
    bce8:	dcc00417 	ldw	r19,16(sp)
    bcec:	dc800317 	ldw	r18,12(sp)
    bcf0:	dc400217 	ldw	r17,8(sp)
    bcf4:	dc000117 	ldw	r16,4(sp)
    bcf8:	dec00804 	addi	sp,sp,32
    bcfc:	f800283a 	ret
    bd00:	800d883a 	mov	r6,r16
    bd04:	29403fcc 	andi	r5,r5,255
    bd08:	9809883a 	mov	r4,r19
    bd0c:	000bf6c0 	call	bf6c <__swbuf_r>
    bd10:	10bfffe0 	cmpeqi	r2,r2,-1
    bd14:	10803fcc 	andi	r2,r2,255
    bd18:	103fd626 	beq	r2,zero,bc74 <__alt_data_end+0xff00bc74>
    bd1c:	00bfffc4 	movi	r2,-1
    bd20:	003fee06 	br	bcdc <__alt_data_end+0xff00bcdc>
    bd24:	90ffffc4 	addi	r3,r18,-1
    bd28:	01003f84 	movi	r4,254
    bd2c:	20ffbf36 	bltu	r4,r3,bc2c <__alt_data_end+0xff00bc2c>
    bd30:	900b883a 	mov	r5,r18
    bd34:	dc800005 	stb	r18,0(sp)
    bd38:	1029883a 	mov	r20,r2
    bd3c:	003fc506 	br	bc54 <__alt_data_end+0xff00bc54>
    bd40:	800d883a 	mov	r6,r16
    bd44:	a80b883a 	mov	r5,r21
    bd48:	9809883a 	mov	r4,r19
    bd4c:	000bf6c0 	call	bf6c <__swbuf_r>
    bd50:	10bfffe0 	cmpeqi	r2,r2,-1
    bd54:	003fef06 	br	bd14 <__alt_data_end+0xff00bd14>

0000bd58 <_fputwc_r>:
    bd58:	3080030b 	ldhu	r2,12(r6)
    bd5c:	10c8000c 	andi	r3,r2,8192
    bd60:	1800051e 	bne	r3,zero,bd78 <_fputwc_r+0x20>
    bd64:	30c01917 	ldw	r3,100(r6)
    bd68:	10880014 	ori	r2,r2,8192
    bd6c:	3080030d 	sth	r2,12(r6)
    bd70:	18880014 	ori	r2,r3,8192
    bd74:	30801915 	stw	r2,100(r6)
    bd78:	000bbf41 	jmpi	bbf4 <__fputwc>

0000bd7c <fputwc>:
    bd7c:	00800074 	movhi	r2,1
    bd80:	defffc04 	addi	sp,sp,-16
    bd84:	10902304 	addi	r2,r2,16524
    bd88:	dc000115 	stw	r16,4(sp)
    bd8c:	14000017 	ldw	r16,0(r2)
    bd90:	dc400215 	stw	r17,8(sp)
    bd94:	dfc00315 	stw	ra,12(sp)
    bd98:	2023883a 	mov	r17,r4
    bd9c:	80000226 	beq	r16,zero,bda8 <fputwc+0x2c>
    bda0:	80800e17 	ldw	r2,56(r16)
    bda4:	10001026 	beq	r2,zero,bde8 <fputwc+0x6c>
    bda8:	2880030b 	ldhu	r2,12(r5)
    bdac:	10c8000c 	andi	r3,r2,8192
    bdb0:	1800051e 	bne	r3,zero,bdc8 <fputwc+0x4c>
    bdb4:	28c01917 	ldw	r3,100(r5)
    bdb8:	10880014 	ori	r2,r2,8192
    bdbc:	2880030d 	sth	r2,12(r5)
    bdc0:	18880014 	ori	r2,r3,8192
    bdc4:	28801915 	stw	r2,100(r5)
    bdc8:	280d883a 	mov	r6,r5
    bdcc:	8009883a 	mov	r4,r16
    bdd0:	880b883a 	mov	r5,r17
    bdd4:	dfc00317 	ldw	ra,12(sp)
    bdd8:	dc400217 	ldw	r17,8(sp)
    bddc:	dc000117 	ldw	r16,4(sp)
    bde0:	dec00404 	addi	sp,sp,16
    bde4:	000bbf41 	jmpi	bbf4 <__fputwc>
    bde8:	8009883a 	mov	r4,r16
    bdec:	d9400015 	stw	r5,0(sp)
    bdf0:	00079340 	call	7934 <__sinit>
    bdf4:	d9400017 	ldw	r5,0(sp)
    bdf8:	003feb06 	br	bda8 <__alt_data_end+0xff00bda8>

0000bdfc <_fstat_r>:
    bdfc:	defffd04 	addi	sp,sp,-12
    be00:	2805883a 	mov	r2,r5
    be04:	dc000015 	stw	r16,0(sp)
    be08:	04000074 	movhi	r16,1
    be0c:	dc400115 	stw	r17,4(sp)
    be10:	8416fa04 	addi	r16,r16,23528
    be14:	2023883a 	mov	r17,r4
    be18:	300b883a 	mov	r5,r6
    be1c:	1009883a 	mov	r4,r2
    be20:	dfc00215 	stw	ra,8(sp)
    be24:	80000015 	stw	zero,0(r16)
    be28:	000f5380 	call	f538 <fstat>
    be2c:	00ffffc4 	movi	r3,-1
    be30:	10c00526 	beq	r2,r3,be48 <_fstat_r+0x4c>
    be34:	dfc00217 	ldw	ra,8(sp)
    be38:	dc400117 	ldw	r17,4(sp)
    be3c:	dc000017 	ldw	r16,0(sp)
    be40:	dec00304 	addi	sp,sp,12
    be44:	f800283a 	ret
    be48:	80c00017 	ldw	r3,0(r16)
    be4c:	183ff926 	beq	r3,zero,be34 <__alt_data_end+0xff00be34>
    be50:	88c00015 	stw	r3,0(r17)
    be54:	003ff706 	br	be34 <__alt_data_end+0xff00be34>

0000be58 <_isatty_r>:
    be58:	defffd04 	addi	sp,sp,-12
    be5c:	dc000015 	stw	r16,0(sp)
    be60:	04000074 	movhi	r16,1
    be64:	dc400115 	stw	r17,4(sp)
    be68:	8416fa04 	addi	r16,r16,23528
    be6c:	2023883a 	mov	r17,r4
    be70:	2809883a 	mov	r4,r5
    be74:	dfc00215 	stw	ra,8(sp)
    be78:	80000015 	stw	zero,0(r16)
    be7c:	000f6240 	call	f624 <isatty>
    be80:	00ffffc4 	movi	r3,-1
    be84:	10c00526 	beq	r2,r3,be9c <_isatty_r+0x44>
    be88:	dfc00217 	ldw	ra,8(sp)
    be8c:	dc400117 	ldw	r17,4(sp)
    be90:	dc000017 	ldw	r16,0(sp)
    be94:	dec00304 	addi	sp,sp,12
    be98:	f800283a 	ret
    be9c:	80c00017 	ldw	r3,0(r16)
    bea0:	183ff926 	beq	r3,zero,be88 <__alt_data_end+0xff00be88>
    bea4:	88c00015 	stw	r3,0(r17)
    bea8:	003ff706 	br	be88 <__alt_data_end+0xff00be88>

0000beac <_lseek_r>:
    beac:	defffd04 	addi	sp,sp,-12
    beb0:	2805883a 	mov	r2,r5
    beb4:	dc000015 	stw	r16,0(sp)
    beb8:	04000074 	movhi	r16,1
    bebc:	dc400115 	stw	r17,4(sp)
    bec0:	300b883a 	mov	r5,r6
    bec4:	8416fa04 	addi	r16,r16,23528
    bec8:	2023883a 	mov	r17,r4
    becc:	380d883a 	mov	r6,r7
    bed0:	1009883a 	mov	r4,r2
    bed4:	dfc00215 	stw	ra,8(sp)
    bed8:	80000015 	stw	zero,0(r16)
    bedc:	000f7f00 	call	f7f0 <lseek>
    bee0:	00ffffc4 	movi	r3,-1
    bee4:	10c00526 	beq	r2,r3,befc <_lseek_r+0x50>
    bee8:	dfc00217 	ldw	ra,8(sp)
    beec:	dc400117 	ldw	r17,4(sp)
    bef0:	dc000017 	ldw	r16,0(sp)
    bef4:	dec00304 	addi	sp,sp,12
    bef8:	f800283a 	ret
    befc:	80c00017 	ldw	r3,0(r16)
    bf00:	183ff926 	beq	r3,zero,bee8 <__alt_data_end+0xff00bee8>
    bf04:	88c00015 	stw	r3,0(r17)
    bf08:	003ff706 	br	bee8 <__alt_data_end+0xff00bee8>

0000bf0c <_read_r>:
    bf0c:	defffd04 	addi	sp,sp,-12
    bf10:	2805883a 	mov	r2,r5
    bf14:	dc000015 	stw	r16,0(sp)
    bf18:	04000074 	movhi	r16,1
    bf1c:	dc400115 	stw	r17,4(sp)
    bf20:	300b883a 	mov	r5,r6
    bf24:	8416fa04 	addi	r16,r16,23528
    bf28:	2023883a 	mov	r17,r4
    bf2c:	380d883a 	mov	r6,r7
    bf30:	1009883a 	mov	r4,r2
    bf34:	dfc00215 	stw	ra,8(sp)
    bf38:	80000015 	stw	zero,0(r16)
    bf3c:	000f9c40 	call	f9c4 <read>
    bf40:	00ffffc4 	movi	r3,-1
    bf44:	10c00526 	beq	r2,r3,bf5c <_read_r+0x50>
    bf48:	dfc00217 	ldw	ra,8(sp)
    bf4c:	dc400117 	ldw	r17,4(sp)
    bf50:	dc000017 	ldw	r16,0(sp)
    bf54:	dec00304 	addi	sp,sp,12
    bf58:	f800283a 	ret
    bf5c:	80c00017 	ldw	r3,0(r16)
    bf60:	183ff926 	beq	r3,zero,bf48 <__alt_data_end+0xff00bf48>
    bf64:	88c00015 	stw	r3,0(r17)
    bf68:	003ff706 	br	bf48 <__alt_data_end+0xff00bf48>

0000bf6c <__swbuf_r>:
    bf6c:	defffb04 	addi	sp,sp,-20
    bf70:	dcc00315 	stw	r19,12(sp)
    bf74:	dc800215 	stw	r18,8(sp)
    bf78:	dc000015 	stw	r16,0(sp)
    bf7c:	dfc00415 	stw	ra,16(sp)
    bf80:	dc400115 	stw	r17,4(sp)
    bf84:	2025883a 	mov	r18,r4
    bf88:	2827883a 	mov	r19,r5
    bf8c:	3021883a 	mov	r16,r6
    bf90:	20000226 	beq	r4,zero,bf9c <__swbuf_r+0x30>
    bf94:	20800e17 	ldw	r2,56(r4)
    bf98:	10004226 	beq	r2,zero,c0a4 <__swbuf_r+0x138>
    bf9c:	80800617 	ldw	r2,24(r16)
    bfa0:	8100030b 	ldhu	r4,12(r16)
    bfa4:	80800215 	stw	r2,8(r16)
    bfa8:	2080020c 	andi	r2,r4,8
    bfac:	10003626 	beq	r2,zero,c088 <__swbuf_r+0x11c>
    bfb0:	80c00417 	ldw	r3,16(r16)
    bfb4:	18003426 	beq	r3,zero,c088 <__swbuf_r+0x11c>
    bfb8:	2088000c 	andi	r2,r4,8192
    bfbc:	9c403fcc 	andi	r17,r19,255
    bfc0:	10001a26 	beq	r2,zero,c02c <__swbuf_r+0xc0>
    bfc4:	80800017 	ldw	r2,0(r16)
    bfc8:	81000517 	ldw	r4,20(r16)
    bfcc:	10c7c83a 	sub	r3,r2,r3
    bfd0:	1900200e 	bge	r3,r4,c054 <__swbuf_r+0xe8>
    bfd4:	18c00044 	addi	r3,r3,1
    bfd8:	81000217 	ldw	r4,8(r16)
    bfdc:	11400044 	addi	r5,r2,1
    bfe0:	81400015 	stw	r5,0(r16)
    bfe4:	213fffc4 	addi	r4,r4,-1
    bfe8:	81000215 	stw	r4,8(r16)
    bfec:	14c00005 	stb	r19,0(r2)
    bff0:	80800517 	ldw	r2,20(r16)
    bff4:	10c01e26 	beq	r2,r3,c070 <__swbuf_r+0x104>
    bff8:	8080030b 	ldhu	r2,12(r16)
    bffc:	1080004c 	andi	r2,r2,1
    c000:	10000226 	beq	r2,zero,c00c <__swbuf_r+0xa0>
    c004:	00800284 	movi	r2,10
    c008:	88801926 	beq	r17,r2,c070 <__swbuf_r+0x104>
    c00c:	8805883a 	mov	r2,r17
    c010:	dfc00417 	ldw	ra,16(sp)
    c014:	dcc00317 	ldw	r19,12(sp)
    c018:	dc800217 	ldw	r18,8(sp)
    c01c:	dc400117 	ldw	r17,4(sp)
    c020:	dc000017 	ldw	r16,0(sp)
    c024:	dec00504 	addi	sp,sp,20
    c028:	f800283a 	ret
    c02c:	81401917 	ldw	r5,100(r16)
    c030:	00b7ffc4 	movi	r2,-8193
    c034:	21080014 	ori	r4,r4,8192
    c038:	2884703a 	and	r2,r5,r2
    c03c:	80801915 	stw	r2,100(r16)
    c040:	80800017 	ldw	r2,0(r16)
    c044:	8100030d 	sth	r4,12(r16)
    c048:	81000517 	ldw	r4,20(r16)
    c04c:	10c7c83a 	sub	r3,r2,r3
    c050:	193fe016 	blt	r3,r4,bfd4 <__alt_data_end+0xff00bfd4>
    c054:	800b883a 	mov	r5,r16
    c058:	9009883a 	mov	r4,r18
    c05c:	00075580 	call	7558 <_fflush_r>
    c060:	1000071e 	bne	r2,zero,c080 <__swbuf_r+0x114>
    c064:	80800017 	ldw	r2,0(r16)
    c068:	00c00044 	movi	r3,1
    c06c:	003fda06 	br	bfd8 <__alt_data_end+0xff00bfd8>
    c070:	800b883a 	mov	r5,r16
    c074:	9009883a 	mov	r4,r18
    c078:	00075580 	call	7558 <_fflush_r>
    c07c:	103fe326 	beq	r2,zero,c00c <__alt_data_end+0xff00c00c>
    c080:	00bfffc4 	movi	r2,-1
    c084:	003fe206 	br	c010 <__alt_data_end+0xff00c010>
    c088:	800b883a 	mov	r5,r16
    c08c:	9009883a 	mov	r4,r18
    c090:	00059600 	call	5960 <__swsetup_r>
    c094:	103ffa1e 	bne	r2,zero,c080 <__alt_data_end+0xff00c080>
    c098:	8100030b 	ldhu	r4,12(r16)
    c09c:	80c00417 	ldw	r3,16(r16)
    c0a0:	003fc506 	br	bfb8 <__alt_data_end+0xff00bfb8>
    c0a4:	00079340 	call	7934 <__sinit>
    c0a8:	003fbc06 	br	bf9c <__alt_data_end+0xff00bf9c>

0000c0ac <__swbuf>:
    c0ac:	00800074 	movhi	r2,1
    c0b0:	10902304 	addi	r2,r2,16524
    c0b4:	280d883a 	mov	r6,r5
    c0b8:	200b883a 	mov	r5,r4
    c0bc:	11000017 	ldw	r4,0(r2)
    c0c0:	000bf6c1 	jmpi	bf6c <__swbuf_r>

0000c0c4 <_wcrtomb_r>:
    c0c4:	defff604 	addi	sp,sp,-40
    c0c8:	00800074 	movhi	r2,1
    c0cc:	dc800815 	stw	r18,32(sp)
    c0d0:	dc400715 	stw	r17,28(sp)
    c0d4:	dc000615 	stw	r16,24(sp)
    c0d8:	10902504 	addi	r2,r2,16532
    c0dc:	dfc00915 	stw	ra,36(sp)
    c0e0:	2021883a 	mov	r16,r4
    c0e4:	3823883a 	mov	r17,r7
    c0e8:	14800017 	ldw	r18,0(r2)
    c0ec:	28001426 	beq	r5,zero,c140 <_wcrtomb_r+0x7c>
    c0f0:	d9400415 	stw	r5,16(sp)
    c0f4:	d9800515 	stw	r6,20(sp)
    c0f8:	00084780 	call	8478 <__locale_charset>
    c0fc:	d9800517 	ldw	r6,20(sp)
    c100:	d9400417 	ldw	r5,16(sp)
    c104:	100f883a 	mov	r7,r2
    c108:	dc400015 	stw	r17,0(sp)
    c10c:	8009883a 	mov	r4,r16
    c110:	903ee83a 	callr	r18
    c114:	00ffffc4 	movi	r3,-1
    c118:	10c0031e 	bne	r2,r3,c128 <_wcrtomb_r+0x64>
    c11c:	88000015 	stw	zero,0(r17)
    c120:	00c02284 	movi	r3,138
    c124:	80c00015 	stw	r3,0(r16)
    c128:	dfc00917 	ldw	ra,36(sp)
    c12c:	dc800817 	ldw	r18,32(sp)
    c130:	dc400717 	ldw	r17,28(sp)
    c134:	dc000617 	ldw	r16,24(sp)
    c138:	dec00a04 	addi	sp,sp,40
    c13c:	f800283a 	ret
    c140:	00084780 	call	8478 <__locale_charset>
    c144:	100f883a 	mov	r7,r2
    c148:	dc400015 	stw	r17,0(sp)
    c14c:	000d883a 	mov	r6,zero
    c150:	d9400104 	addi	r5,sp,4
    c154:	8009883a 	mov	r4,r16
    c158:	903ee83a 	callr	r18
    c15c:	003fed06 	br	c114 <__alt_data_end+0xff00c114>

0000c160 <wcrtomb>:
    c160:	defff604 	addi	sp,sp,-40
    c164:	00800074 	movhi	r2,1
    c168:	dc800615 	stw	r18,24(sp)
    c16c:	dc400515 	stw	r17,20(sp)
    c170:	10902304 	addi	r2,r2,16524
    c174:	dfc00915 	stw	ra,36(sp)
    c178:	dd000815 	stw	r20,32(sp)
    c17c:	dcc00715 	stw	r19,28(sp)
    c180:	dc000415 	stw	r16,16(sp)
    c184:	3025883a 	mov	r18,r6
    c188:	14400017 	ldw	r17,0(r2)
    c18c:	20001926 	beq	r4,zero,c1f4 <wcrtomb+0x94>
    c190:	00800074 	movhi	r2,1
    c194:	10902504 	addi	r2,r2,16532
    c198:	15000017 	ldw	r20,0(r2)
    c19c:	2021883a 	mov	r16,r4
    c1a0:	2827883a 	mov	r19,r5
    c1a4:	00084780 	call	8478 <__locale_charset>
    c1a8:	100f883a 	mov	r7,r2
    c1ac:	dc800015 	stw	r18,0(sp)
    c1b0:	980d883a 	mov	r6,r19
    c1b4:	800b883a 	mov	r5,r16
    c1b8:	8809883a 	mov	r4,r17
    c1bc:	a03ee83a 	callr	r20
    c1c0:	00ffffc4 	movi	r3,-1
    c1c4:	10c0031e 	bne	r2,r3,c1d4 <wcrtomb+0x74>
    c1c8:	90000015 	stw	zero,0(r18)
    c1cc:	00c02284 	movi	r3,138
    c1d0:	88c00015 	stw	r3,0(r17)
    c1d4:	dfc00917 	ldw	ra,36(sp)
    c1d8:	dd000817 	ldw	r20,32(sp)
    c1dc:	dcc00717 	ldw	r19,28(sp)
    c1e0:	dc800617 	ldw	r18,24(sp)
    c1e4:	dc400517 	ldw	r17,20(sp)
    c1e8:	dc000417 	ldw	r16,16(sp)
    c1ec:	dec00a04 	addi	sp,sp,40
    c1f0:	f800283a 	ret
    c1f4:	00800074 	movhi	r2,1
    c1f8:	10902504 	addi	r2,r2,16532
    c1fc:	14000017 	ldw	r16,0(r2)
    c200:	00084780 	call	8478 <__locale_charset>
    c204:	100f883a 	mov	r7,r2
    c208:	dc800015 	stw	r18,0(sp)
    c20c:	000d883a 	mov	r6,zero
    c210:	d9400104 	addi	r5,sp,4
    c214:	8809883a 	mov	r4,r17
    c218:	803ee83a 	callr	r16
    c21c:	003fe806 	br	c1c0 <__alt_data_end+0xff00c1c0>

0000c220 <__ascii_wctomb>:
    c220:	28000526 	beq	r5,zero,c238 <__ascii_wctomb+0x18>
    c224:	00803fc4 	movi	r2,255
    c228:	11800536 	bltu	r2,r6,c240 <__ascii_wctomb+0x20>
    c22c:	29800005 	stb	r6,0(r5)
    c230:	00800044 	movi	r2,1
    c234:	f800283a 	ret
    c238:	0005883a 	mov	r2,zero
    c23c:	f800283a 	ret
    c240:	00802284 	movi	r2,138
    c244:	20800015 	stw	r2,0(r4)
    c248:	00bfffc4 	movi	r2,-1
    c24c:	f800283a 	ret

0000c250 <_wctomb_r>:
    c250:	00800074 	movhi	r2,1
    c254:	defff904 	addi	sp,sp,-28
    c258:	10902504 	addi	r2,r2,16532
    c25c:	dfc00615 	stw	ra,24(sp)
    c260:	dc400515 	stw	r17,20(sp)
    c264:	dc000415 	stw	r16,16(sp)
    c268:	3823883a 	mov	r17,r7
    c26c:	14000017 	ldw	r16,0(r2)
    c270:	d9000115 	stw	r4,4(sp)
    c274:	d9400215 	stw	r5,8(sp)
    c278:	d9800315 	stw	r6,12(sp)
    c27c:	00084780 	call	8478 <__locale_charset>
    c280:	d9800317 	ldw	r6,12(sp)
    c284:	d9400217 	ldw	r5,8(sp)
    c288:	d9000117 	ldw	r4,4(sp)
    c28c:	100f883a 	mov	r7,r2
    c290:	dc400015 	stw	r17,0(sp)
    c294:	803ee83a 	callr	r16
    c298:	dfc00617 	ldw	ra,24(sp)
    c29c:	dc400517 	ldw	r17,20(sp)
    c2a0:	dc000417 	ldw	r16,16(sp)
    c2a4:	dec00704 	addi	sp,sp,28
    c2a8:	f800283a 	ret

0000c2ac <__udivdi3>:
    c2ac:	defff504 	addi	sp,sp,-44
    c2b0:	dcc00415 	stw	r19,16(sp)
    c2b4:	dc000115 	stw	r16,4(sp)
    c2b8:	dfc00a15 	stw	ra,40(sp)
    c2bc:	df000915 	stw	fp,36(sp)
    c2c0:	ddc00815 	stw	r23,32(sp)
    c2c4:	dd800715 	stw	r22,28(sp)
    c2c8:	dd400615 	stw	r21,24(sp)
    c2cc:	dd000515 	stw	r20,20(sp)
    c2d0:	dc800315 	stw	r18,12(sp)
    c2d4:	dc400215 	stw	r17,8(sp)
    c2d8:	2027883a 	mov	r19,r4
    c2dc:	2821883a 	mov	r16,r5
    c2e0:	3800411e 	bne	r7,zero,c3e8 <__udivdi3+0x13c>
    c2e4:	3023883a 	mov	r17,r6
    c2e8:	2025883a 	mov	r18,r4
    c2ec:	2980522e 	bgeu	r5,r6,c438 <__udivdi3+0x18c>
    c2f0:	00bfffd4 	movui	r2,65535
    c2f4:	282d883a 	mov	r22,r5
    c2f8:	1180a836 	bltu	r2,r6,c59c <__udivdi3+0x2f0>
    c2fc:	00803fc4 	movi	r2,255
    c300:	1185803a 	cmpltu	r2,r2,r6
    c304:	100490fa 	slli	r2,r2,3
    c308:	3086d83a 	srl	r3,r6,r2
    c30c:	01000074 	movhi	r4,1
    c310:	21092804 	addi	r4,r4,9376
    c314:	20c7883a 	add	r3,r4,r3
    c318:	18c00003 	ldbu	r3,0(r3)
    c31c:	1885883a 	add	r2,r3,r2
    c320:	00c00804 	movi	r3,32
    c324:	1887c83a 	sub	r3,r3,r2
    c328:	18000526 	beq	r3,zero,c340 <__udivdi3+0x94>
    c32c:	80e0983a 	sll	r16,r16,r3
    c330:	9884d83a 	srl	r2,r19,r2
    c334:	30e2983a 	sll	r17,r6,r3
    c338:	98e4983a 	sll	r18,r19,r3
    c33c:	142cb03a 	or	r22,r2,r16
    c340:	882ad43a 	srli	r21,r17,16
    c344:	b009883a 	mov	r4,r22
    c348:	8d3fffcc 	andi	r20,r17,65535
    c34c:	a80b883a 	mov	r5,r21
    c350:	0002bd80 	call	2bd8 <__umodsi3>
    c354:	b009883a 	mov	r4,r22
    c358:	a80b883a 	mov	r5,r21
    c35c:	1027883a 	mov	r19,r2
    c360:	0002b740 	call	2b74 <__udivsi3>
    c364:	102d883a 	mov	r22,r2
    c368:	9826943a 	slli	r19,r19,16
    c36c:	9004d43a 	srli	r2,r18,16
    c370:	a5a1383a 	mul	r16,r20,r22
    c374:	14c4b03a 	or	r2,r2,r19
    c378:	1400052e 	bgeu	r2,r16,c390 <__udivdi3+0xe4>
    c37c:	1445883a 	add	r2,r2,r17
    c380:	b0ffffc4 	addi	r3,r22,-1
    c384:	14400136 	bltu	r2,r17,c38c <__udivdi3+0xe0>
    c388:	14012336 	bltu	r2,r16,c818 <__udivdi3+0x56c>
    c38c:	182d883a 	mov	r22,r3
    c390:	1421c83a 	sub	r16,r2,r16
    c394:	a80b883a 	mov	r5,r21
    c398:	8009883a 	mov	r4,r16
    c39c:	0002bd80 	call	2bd8 <__umodsi3>
    c3a0:	1027883a 	mov	r19,r2
    c3a4:	a80b883a 	mov	r5,r21
    c3a8:	8009883a 	mov	r4,r16
    c3ac:	0002b740 	call	2b74 <__udivsi3>
    c3b0:	9826943a 	slli	r19,r19,16
    c3b4:	a0a9383a 	mul	r20,r20,r2
    c3b8:	94bfffcc 	andi	r18,r18,65535
    c3bc:	94e4b03a 	or	r18,r18,r19
    c3c0:	9500052e 	bgeu	r18,r20,c3d8 <__udivdi3+0x12c>
    c3c4:	8ca5883a 	add	r18,r17,r18
    c3c8:	10ffffc4 	addi	r3,r2,-1
    c3cc:	9440f136 	bltu	r18,r17,c794 <__udivdi3+0x4e8>
    c3d0:	9500f02e 	bgeu	r18,r20,c794 <__udivdi3+0x4e8>
    c3d4:	10bfff84 	addi	r2,r2,-2
    c3d8:	b00c943a 	slli	r6,r22,16
    c3dc:	0007883a 	mov	r3,zero
    c3e0:	3084b03a 	or	r2,r6,r2
    c3e4:	00005906 	br	c54c <__udivdi3+0x2a0>
    c3e8:	29c05636 	bltu	r5,r7,c544 <__udivdi3+0x298>
    c3ec:	00bfffd4 	movui	r2,65535
    c3f0:	11c0622e 	bgeu	r2,r7,c57c <__udivdi3+0x2d0>
    c3f4:	00804034 	movhi	r2,256
    c3f8:	10bfffc4 	addi	r2,r2,-1
    c3fc:	11c0ee36 	bltu	r2,r7,c7b8 <__udivdi3+0x50c>
    c400:	00800404 	movi	r2,16
    c404:	3886d83a 	srl	r3,r7,r2
    c408:	01000074 	movhi	r4,1
    c40c:	21092804 	addi	r4,r4,9376
    c410:	20c7883a 	add	r3,r4,r3
    c414:	18c00003 	ldbu	r3,0(r3)
    c418:	05400804 	movi	r21,32
    c41c:	1885883a 	add	r2,r3,r2
    c420:	a8abc83a 	sub	r21,r21,r2
    c424:	a800621e 	bne	r21,zero,c5b0 <__udivdi3+0x304>
    c428:	3c00e936 	bltu	r7,r16,c7d0 <__udivdi3+0x524>
    c42c:	9985403a 	cmpgeu	r2,r19,r6
    c430:	0007883a 	mov	r3,zero
    c434:	00004506 	br	c54c <__udivdi3+0x2a0>
    c438:	3000041e 	bne	r6,zero,c44c <__udivdi3+0x1a0>
    c43c:	000b883a 	mov	r5,zero
    c440:	01000044 	movi	r4,1
    c444:	0002b740 	call	2b74 <__udivsi3>
    c448:	1023883a 	mov	r17,r2
    c44c:	00bfffd4 	movui	r2,65535
    c450:	14404e2e 	bgeu	r2,r17,c58c <__udivdi3+0x2e0>
    c454:	00804034 	movhi	r2,256
    c458:	10bfffc4 	addi	r2,r2,-1
    c45c:	1440d836 	bltu	r2,r17,c7c0 <__udivdi3+0x514>
    c460:	00800404 	movi	r2,16
    c464:	8886d83a 	srl	r3,r17,r2
    c468:	01000074 	movhi	r4,1
    c46c:	21092804 	addi	r4,r4,9376
    c470:	20c7883a 	add	r3,r4,r3
    c474:	18c00003 	ldbu	r3,0(r3)
    c478:	1885883a 	add	r2,r3,r2
    c47c:	00c00804 	movi	r3,32
    c480:	1887c83a 	sub	r3,r3,r2
    c484:	18008f1e 	bne	r3,zero,c6c4 <__udivdi3+0x418>
    c488:	882ad43a 	srli	r21,r17,16
    c48c:	8461c83a 	sub	r16,r16,r17
    c490:	8d3fffcc 	andi	r20,r17,65535
    c494:	00c00044 	movi	r3,1
    c498:	8009883a 	mov	r4,r16
    c49c:	a80b883a 	mov	r5,r21
    c4a0:	d8c00015 	stw	r3,0(sp)
    c4a4:	0002bd80 	call	2bd8 <__umodsi3>
    c4a8:	8009883a 	mov	r4,r16
    c4ac:	a80b883a 	mov	r5,r21
    c4b0:	1027883a 	mov	r19,r2
    c4b4:	0002b740 	call	2b74 <__udivsi3>
    c4b8:	9826943a 	slli	r19,r19,16
    c4bc:	9008d43a 	srli	r4,r18,16
    c4c0:	1521383a 	mul	r16,r2,r20
    c4c4:	102d883a 	mov	r22,r2
    c4c8:	24c8b03a 	or	r4,r4,r19
    c4cc:	d8c00017 	ldw	r3,0(sp)
    c4d0:	2400052e 	bgeu	r4,r16,c4e8 <__udivdi3+0x23c>
    c4d4:	2449883a 	add	r4,r4,r17
    c4d8:	b0bfffc4 	addi	r2,r22,-1
    c4dc:	24400136 	bltu	r4,r17,c4e4 <__udivdi3+0x238>
    c4e0:	2400ca36 	bltu	r4,r16,c80c <__udivdi3+0x560>
    c4e4:	102d883a 	mov	r22,r2
    c4e8:	2421c83a 	sub	r16,r4,r16
    c4ec:	a80b883a 	mov	r5,r21
    c4f0:	8009883a 	mov	r4,r16
    c4f4:	d8c00015 	stw	r3,0(sp)
    c4f8:	0002bd80 	call	2bd8 <__umodsi3>
    c4fc:	1027883a 	mov	r19,r2
    c500:	a80b883a 	mov	r5,r21
    c504:	8009883a 	mov	r4,r16
    c508:	0002b740 	call	2b74 <__udivsi3>
    c50c:	9826943a 	slli	r19,r19,16
    c510:	1529383a 	mul	r20,r2,r20
    c514:	94bfffcc 	andi	r18,r18,65535
    c518:	94e4b03a 	or	r18,r18,r19
    c51c:	d8c00017 	ldw	r3,0(sp)
    c520:	9500052e 	bgeu	r18,r20,c538 <__udivdi3+0x28c>
    c524:	8ca5883a 	add	r18,r17,r18
    c528:	113fffc4 	addi	r4,r2,-1
    c52c:	94409736 	bltu	r18,r17,c78c <__udivdi3+0x4e0>
    c530:	9500962e 	bgeu	r18,r20,c78c <__udivdi3+0x4e0>
    c534:	10bfff84 	addi	r2,r2,-2
    c538:	b00c943a 	slli	r6,r22,16
    c53c:	3084b03a 	or	r2,r6,r2
    c540:	00000206 	br	c54c <__udivdi3+0x2a0>
    c544:	0007883a 	mov	r3,zero
    c548:	0005883a 	mov	r2,zero
    c54c:	dfc00a17 	ldw	ra,40(sp)
    c550:	df000917 	ldw	fp,36(sp)
    c554:	ddc00817 	ldw	r23,32(sp)
    c558:	dd800717 	ldw	r22,28(sp)
    c55c:	dd400617 	ldw	r21,24(sp)
    c560:	dd000517 	ldw	r20,20(sp)
    c564:	dcc00417 	ldw	r19,16(sp)
    c568:	dc800317 	ldw	r18,12(sp)
    c56c:	dc400217 	ldw	r17,8(sp)
    c570:	dc000117 	ldw	r16,4(sp)
    c574:	dec00b04 	addi	sp,sp,44
    c578:	f800283a 	ret
    c57c:	00803fc4 	movi	r2,255
    c580:	11c5803a 	cmpltu	r2,r2,r7
    c584:	100490fa 	slli	r2,r2,3
    c588:	003f9e06 	br	c404 <__alt_data_end+0xff00c404>
    c58c:	00803fc4 	movi	r2,255
    c590:	1445803a 	cmpltu	r2,r2,r17
    c594:	100490fa 	slli	r2,r2,3
    c598:	003fb206 	br	c464 <__alt_data_end+0xff00c464>
    c59c:	00804034 	movhi	r2,256
    c5a0:	10bfffc4 	addi	r2,r2,-1
    c5a4:	11808836 	bltu	r2,r6,c7c8 <__udivdi3+0x51c>
    c5a8:	00800404 	movi	r2,16
    c5ac:	003f5606 	br	c308 <__alt_data_end+0xff00c308>
    c5b0:	30aed83a 	srl	r23,r6,r2
    c5b4:	3d4e983a 	sll	r7,r7,r21
    c5b8:	80acd83a 	srl	r22,r16,r2
    c5bc:	9884d83a 	srl	r2,r19,r2
    c5c0:	3deeb03a 	or	r23,r7,r23
    c5c4:	b824d43a 	srli	r18,r23,16
    c5c8:	8560983a 	sll	r16,r16,r21
    c5cc:	b009883a 	mov	r4,r22
    c5d0:	900b883a 	mov	r5,r18
    c5d4:	3568983a 	sll	r20,r6,r21
    c5d8:	1420b03a 	or	r16,r2,r16
    c5dc:	0002bd80 	call	2bd8 <__umodsi3>
    c5e0:	b009883a 	mov	r4,r22
    c5e4:	900b883a 	mov	r5,r18
    c5e8:	1023883a 	mov	r17,r2
    c5ec:	0002b740 	call	2b74 <__udivsi3>
    c5f0:	8808943a 	slli	r4,r17,16
    c5f4:	bf3fffcc 	andi	fp,r23,65535
    c5f8:	8006d43a 	srli	r3,r16,16
    c5fc:	e0a3383a 	mul	r17,fp,r2
    c600:	100d883a 	mov	r6,r2
    c604:	1906b03a 	or	r3,r3,r4
    c608:	1c40042e 	bgeu	r3,r17,c61c <__udivdi3+0x370>
    c60c:	1dc7883a 	add	r3,r3,r23
    c610:	10bfffc4 	addi	r2,r2,-1
    c614:	1dc0752e 	bgeu	r3,r23,c7ec <__udivdi3+0x540>
    c618:	100d883a 	mov	r6,r2
    c61c:	1c63c83a 	sub	r17,r3,r17
    c620:	900b883a 	mov	r5,r18
    c624:	8809883a 	mov	r4,r17
    c628:	d9800015 	stw	r6,0(sp)
    c62c:	0002bd80 	call	2bd8 <__umodsi3>
    c630:	102d883a 	mov	r22,r2
    c634:	8809883a 	mov	r4,r17
    c638:	900b883a 	mov	r5,r18
    c63c:	0002b740 	call	2b74 <__udivsi3>
    c640:	b02c943a 	slli	r22,r22,16
    c644:	e089383a 	mul	r4,fp,r2
    c648:	843fffcc 	andi	r16,r16,65535
    c64c:	85a0b03a 	or	r16,r16,r22
    c650:	d9800017 	ldw	r6,0(sp)
    c654:	8100042e 	bgeu	r16,r4,c668 <__udivdi3+0x3bc>
    c658:	85e1883a 	add	r16,r16,r23
    c65c:	10ffffc4 	addi	r3,r2,-1
    c660:	85c05e2e 	bgeu	r16,r23,c7dc <__udivdi3+0x530>
    c664:	1805883a 	mov	r2,r3
    c668:	300c943a 	slli	r6,r6,16
    c66c:	a17fffcc 	andi	r5,r20,65535
    c670:	a028d43a 	srli	r20,r20,16
    c674:	3084b03a 	or	r2,r6,r2
    c678:	10ffffcc 	andi	r3,r2,65535
    c67c:	100cd43a 	srli	r6,r2,16
    c680:	194f383a 	mul	r7,r3,r5
    c684:	1d07383a 	mul	r3,r3,r20
    c688:	314b383a 	mul	r5,r6,r5
    c68c:	3810d43a 	srli	r8,r7,16
    c690:	8121c83a 	sub	r16,r16,r4
    c694:	1947883a 	add	r3,r3,r5
    c698:	40c7883a 	add	r3,r8,r3
    c69c:	350d383a 	mul	r6,r6,r20
    c6a0:	1940022e 	bgeu	r3,r5,c6ac <__udivdi3+0x400>
    c6a4:	01000074 	movhi	r4,1
    c6a8:	310d883a 	add	r6,r6,r4
    c6ac:	1828d43a 	srli	r20,r3,16
    c6b0:	a18d883a 	add	r6,r20,r6
    c6b4:	81803e36 	bltu	r16,r6,c7b0 <__udivdi3+0x504>
    c6b8:	81803826 	beq	r16,r6,c79c <__udivdi3+0x4f0>
    c6bc:	0007883a 	mov	r3,zero
    c6c0:	003fa206 	br	c54c <__alt_data_end+0xff00c54c>
    c6c4:	88e2983a 	sll	r17,r17,r3
    c6c8:	80a8d83a 	srl	r20,r16,r2
    c6cc:	80e0983a 	sll	r16,r16,r3
    c6d0:	882ad43a 	srli	r21,r17,16
    c6d4:	9884d83a 	srl	r2,r19,r2
    c6d8:	a009883a 	mov	r4,r20
    c6dc:	a80b883a 	mov	r5,r21
    c6e0:	142eb03a 	or	r23,r2,r16
    c6e4:	98e4983a 	sll	r18,r19,r3
    c6e8:	0002bd80 	call	2bd8 <__umodsi3>
    c6ec:	a009883a 	mov	r4,r20
    c6f0:	a80b883a 	mov	r5,r21
    c6f4:	1021883a 	mov	r16,r2
    c6f8:	0002b740 	call	2b74 <__udivsi3>
    c6fc:	1039883a 	mov	fp,r2
    c700:	8d3fffcc 	andi	r20,r17,65535
    c704:	8020943a 	slli	r16,r16,16
    c708:	b804d43a 	srli	r2,r23,16
    c70c:	a72d383a 	mul	r22,r20,fp
    c710:	1404b03a 	or	r2,r2,r16
    c714:	1580062e 	bgeu	r2,r22,c730 <__udivdi3+0x484>
    c718:	1445883a 	add	r2,r2,r17
    c71c:	e0ffffc4 	addi	r3,fp,-1
    c720:	14403836 	bltu	r2,r17,c804 <__udivdi3+0x558>
    c724:	1580372e 	bgeu	r2,r22,c804 <__udivdi3+0x558>
    c728:	e73fff84 	addi	fp,fp,-2
    c72c:	1445883a 	add	r2,r2,r17
    c730:	15adc83a 	sub	r22,r2,r22
    c734:	a80b883a 	mov	r5,r21
    c738:	b009883a 	mov	r4,r22
    c73c:	0002bd80 	call	2bd8 <__umodsi3>
    c740:	1027883a 	mov	r19,r2
    c744:	b009883a 	mov	r4,r22
    c748:	a80b883a 	mov	r5,r21
    c74c:	0002b740 	call	2b74 <__udivsi3>
    c750:	9826943a 	slli	r19,r19,16
    c754:	a0a1383a 	mul	r16,r20,r2
    c758:	b93fffcc 	andi	r4,r23,65535
    c75c:	24c8b03a 	or	r4,r4,r19
    c760:	2400062e 	bgeu	r4,r16,c77c <__udivdi3+0x4d0>
    c764:	2449883a 	add	r4,r4,r17
    c768:	10ffffc4 	addi	r3,r2,-1
    c76c:	24402336 	bltu	r4,r17,c7fc <__udivdi3+0x550>
    c770:	2400222e 	bgeu	r4,r16,c7fc <__udivdi3+0x550>
    c774:	10bfff84 	addi	r2,r2,-2
    c778:	2449883a 	add	r4,r4,r17
    c77c:	e038943a 	slli	fp,fp,16
    c780:	2421c83a 	sub	r16,r4,r16
    c784:	e086b03a 	or	r3,fp,r2
    c788:	003f4306 	br	c498 <__alt_data_end+0xff00c498>
    c78c:	2005883a 	mov	r2,r4
    c790:	003f6906 	br	c538 <__alt_data_end+0xff00c538>
    c794:	1805883a 	mov	r2,r3
    c798:	003f0f06 	br	c3d8 <__alt_data_end+0xff00c3d8>
    c79c:	1806943a 	slli	r3,r3,16
    c7a0:	9d66983a 	sll	r19,r19,r21
    c7a4:	39ffffcc 	andi	r7,r7,65535
    c7a8:	19c7883a 	add	r3,r3,r7
    c7ac:	98ffc32e 	bgeu	r19,r3,c6bc <__alt_data_end+0xff00c6bc>
    c7b0:	10bfffc4 	addi	r2,r2,-1
    c7b4:	003fc106 	br	c6bc <__alt_data_end+0xff00c6bc>
    c7b8:	00800604 	movi	r2,24
    c7bc:	003f1106 	br	c404 <__alt_data_end+0xff00c404>
    c7c0:	00800604 	movi	r2,24
    c7c4:	003f2706 	br	c464 <__alt_data_end+0xff00c464>
    c7c8:	00800604 	movi	r2,24
    c7cc:	003ece06 	br	c308 <__alt_data_end+0xff00c308>
    c7d0:	0007883a 	mov	r3,zero
    c7d4:	00800044 	movi	r2,1
    c7d8:	003f5c06 	br	c54c <__alt_data_end+0xff00c54c>
    c7dc:	813fa12e 	bgeu	r16,r4,c664 <__alt_data_end+0xff00c664>
    c7e0:	10bfff84 	addi	r2,r2,-2
    c7e4:	85e1883a 	add	r16,r16,r23
    c7e8:	003f9f06 	br	c668 <__alt_data_end+0xff00c668>
    c7ec:	1c7f8a2e 	bgeu	r3,r17,c618 <__alt_data_end+0xff00c618>
    c7f0:	31bfff84 	addi	r6,r6,-2
    c7f4:	1dc7883a 	add	r3,r3,r23
    c7f8:	003f8806 	br	c61c <__alt_data_end+0xff00c61c>
    c7fc:	1805883a 	mov	r2,r3
    c800:	003fde06 	br	c77c <__alt_data_end+0xff00c77c>
    c804:	1839883a 	mov	fp,r3
    c808:	003fc906 	br	c730 <__alt_data_end+0xff00c730>
    c80c:	b5bfff84 	addi	r22,r22,-2
    c810:	2449883a 	add	r4,r4,r17
    c814:	003f3406 	br	c4e8 <__alt_data_end+0xff00c4e8>
    c818:	b5bfff84 	addi	r22,r22,-2
    c81c:	1445883a 	add	r2,r2,r17
    c820:	003edb06 	br	c390 <__alt_data_end+0xff00c390>

0000c824 <__umoddi3>:
    c824:	defff404 	addi	sp,sp,-48
    c828:	df000a15 	stw	fp,40(sp)
    c82c:	dc400315 	stw	r17,12(sp)
    c830:	dc000215 	stw	r16,8(sp)
    c834:	dfc00b15 	stw	ra,44(sp)
    c838:	ddc00915 	stw	r23,36(sp)
    c83c:	dd800815 	stw	r22,32(sp)
    c840:	dd400715 	stw	r21,28(sp)
    c844:	dd000615 	stw	r20,24(sp)
    c848:	dcc00515 	stw	r19,20(sp)
    c84c:	dc800415 	stw	r18,16(sp)
    c850:	2021883a 	mov	r16,r4
    c854:	2823883a 	mov	r17,r5
    c858:	2839883a 	mov	fp,r5
    c85c:	38003c1e 	bne	r7,zero,c950 <__umoddi3+0x12c>
    c860:	3027883a 	mov	r19,r6
    c864:	2029883a 	mov	r20,r4
    c868:	2980512e 	bgeu	r5,r6,c9b0 <__umoddi3+0x18c>
    c86c:	00bfffd4 	movui	r2,65535
    c870:	11809a36 	bltu	r2,r6,cadc <__umoddi3+0x2b8>
    c874:	01003fc4 	movi	r4,255
    c878:	2189803a 	cmpltu	r4,r4,r6
    c87c:	200890fa 	slli	r4,r4,3
    c880:	3104d83a 	srl	r2,r6,r4
    c884:	00c00074 	movhi	r3,1
    c888:	18c92804 	addi	r3,r3,9376
    c88c:	1885883a 	add	r2,r3,r2
    c890:	10c00003 	ldbu	r3,0(r2)
    c894:	00800804 	movi	r2,32
    c898:	1909883a 	add	r4,r3,r4
    c89c:	1125c83a 	sub	r18,r2,r4
    c8a0:	90000526 	beq	r18,zero,c8b8 <__umoddi3+0x94>
    c8a4:	8ca2983a 	sll	r17,r17,r18
    c8a8:	8108d83a 	srl	r4,r16,r4
    c8ac:	34a6983a 	sll	r19,r6,r18
    c8b0:	84a8983a 	sll	r20,r16,r18
    c8b4:	2478b03a 	or	fp,r4,r17
    c8b8:	982ed43a 	srli	r23,r19,16
    c8bc:	e009883a 	mov	r4,fp
    c8c0:	9dbfffcc 	andi	r22,r19,65535
    c8c4:	b80b883a 	mov	r5,r23
    c8c8:	0002bd80 	call	2bd8 <__umodsi3>
    c8cc:	e009883a 	mov	r4,fp
    c8d0:	b80b883a 	mov	r5,r23
    c8d4:	102b883a 	mov	r21,r2
    c8d8:	0002b740 	call	2b74 <__udivsi3>
    c8dc:	a806943a 	slli	r3,r21,16
    c8e0:	a008d43a 	srli	r4,r20,16
    c8e4:	b085383a 	mul	r2,r22,r2
    c8e8:	20c8b03a 	or	r4,r4,r3
    c8ec:	2080032e 	bgeu	r4,r2,c8fc <__umoddi3+0xd8>
    c8f0:	24c9883a 	add	r4,r4,r19
    c8f4:	24c00136 	bltu	r4,r19,c8fc <__umoddi3+0xd8>
    c8f8:	20811036 	bltu	r4,r2,cd3c <__umoddi3+0x518>
    c8fc:	20abc83a 	sub	r21,r4,r2
    c900:	b80b883a 	mov	r5,r23
    c904:	a809883a 	mov	r4,r21
    c908:	0002bd80 	call	2bd8 <__umodsi3>
    c90c:	1023883a 	mov	r17,r2
    c910:	b80b883a 	mov	r5,r23
    c914:	a809883a 	mov	r4,r21
    c918:	0002b740 	call	2b74 <__udivsi3>
    c91c:	8822943a 	slli	r17,r17,16
    c920:	b085383a 	mul	r2,r22,r2
    c924:	a0ffffcc 	andi	r3,r20,65535
    c928:	1c46b03a 	or	r3,r3,r17
    c92c:	1880042e 	bgeu	r3,r2,c940 <__umoddi3+0x11c>
    c930:	1cc7883a 	add	r3,r3,r19
    c934:	1cc00236 	bltu	r3,r19,c940 <__umoddi3+0x11c>
    c938:	1880012e 	bgeu	r3,r2,c940 <__umoddi3+0x11c>
    c93c:	1cc7883a 	add	r3,r3,r19
    c940:	1885c83a 	sub	r2,r3,r2
    c944:	1484d83a 	srl	r2,r2,r18
    c948:	0007883a 	mov	r3,zero
    c94c:	00004f06 	br	ca8c <__umoddi3+0x268>
    c950:	29c04c36 	bltu	r5,r7,ca84 <__umoddi3+0x260>
    c954:	00bfffd4 	movui	r2,65535
    c958:	11c0582e 	bgeu	r2,r7,cabc <__umoddi3+0x298>
    c95c:	00804034 	movhi	r2,256
    c960:	10bfffc4 	addi	r2,r2,-1
    c964:	11c0e736 	bltu	r2,r7,cd04 <__umoddi3+0x4e0>
    c968:	01000404 	movi	r4,16
    c96c:	3904d83a 	srl	r2,r7,r4
    c970:	00c00074 	movhi	r3,1
    c974:	18c92804 	addi	r3,r3,9376
    c978:	1885883a 	add	r2,r3,r2
    c97c:	14c00003 	ldbu	r19,0(r2)
    c980:	00c00804 	movi	r3,32
    c984:	9927883a 	add	r19,r19,r4
    c988:	1ce9c83a 	sub	r20,r3,r19
    c98c:	a000581e 	bne	r20,zero,caf0 <__umoddi3+0x2cc>
    c990:	3c400136 	bltu	r7,r17,c998 <__umoddi3+0x174>
    c994:	8180eb36 	bltu	r16,r6,cd44 <__umoddi3+0x520>
    c998:	8185c83a 	sub	r2,r16,r6
    c99c:	89e3c83a 	sub	r17,r17,r7
    c9a0:	8089803a 	cmpltu	r4,r16,r2
    c9a4:	8939c83a 	sub	fp,r17,r4
    c9a8:	e007883a 	mov	r3,fp
    c9ac:	00003706 	br	ca8c <__umoddi3+0x268>
    c9b0:	3000041e 	bne	r6,zero,c9c4 <__umoddi3+0x1a0>
    c9b4:	000b883a 	mov	r5,zero
    c9b8:	01000044 	movi	r4,1
    c9bc:	0002b740 	call	2b74 <__udivsi3>
    c9c0:	1027883a 	mov	r19,r2
    c9c4:	00bfffd4 	movui	r2,65535
    c9c8:	14c0402e 	bgeu	r2,r19,cacc <__umoddi3+0x2a8>
    c9cc:	00804034 	movhi	r2,256
    c9d0:	10bfffc4 	addi	r2,r2,-1
    c9d4:	14c0cd36 	bltu	r2,r19,cd0c <__umoddi3+0x4e8>
    c9d8:	00800404 	movi	r2,16
    c9dc:	9886d83a 	srl	r3,r19,r2
    c9e0:	01000074 	movhi	r4,1
    c9e4:	21092804 	addi	r4,r4,9376
    c9e8:	20c7883a 	add	r3,r4,r3
    c9ec:	18c00003 	ldbu	r3,0(r3)
    c9f0:	1887883a 	add	r3,r3,r2
    c9f4:	00800804 	movi	r2,32
    c9f8:	10e5c83a 	sub	r18,r2,r3
    c9fc:	9000901e 	bne	r18,zero,cc40 <__umoddi3+0x41c>
    ca00:	982cd43a 	srli	r22,r19,16
    ca04:	8ce3c83a 	sub	r17,r17,r19
    ca08:	9d7fffcc 	andi	r21,r19,65535
    ca0c:	b00b883a 	mov	r5,r22
    ca10:	8809883a 	mov	r4,r17
    ca14:	0002bd80 	call	2bd8 <__umodsi3>
    ca18:	8809883a 	mov	r4,r17
    ca1c:	b00b883a 	mov	r5,r22
    ca20:	1021883a 	mov	r16,r2
    ca24:	0002b740 	call	2b74 <__udivsi3>
    ca28:	8006943a 	slli	r3,r16,16
    ca2c:	a008d43a 	srli	r4,r20,16
    ca30:	1545383a 	mul	r2,r2,r21
    ca34:	20c8b03a 	or	r4,r4,r3
    ca38:	2080042e 	bgeu	r4,r2,ca4c <__umoddi3+0x228>
    ca3c:	24c9883a 	add	r4,r4,r19
    ca40:	24c00236 	bltu	r4,r19,ca4c <__umoddi3+0x228>
    ca44:	2080012e 	bgeu	r4,r2,ca4c <__umoddi3+0x228>
    ca48:	24c9883a 	add	r4,r4,r19
    ca4c:	20a1c83a 	sub	r16,r4,r2
    ca50:	b00b883a 	mov	r5,r22
    ca54:	8009883a 	mov	r4,r16
    ca58:	0002bd80 	call	2bd8 <__umodsi3>
    ca5c:	1023883a 	mov	r17,r2
    ca60:	b00b883a 	mov	r5,r22
    ca64:	8009883a 	mov	r4,r16
    ca68:	0002b740 	call	2b74 <__udivsi3>
    ca6c:	8822943a 	slli	r17,r17,16
    ca70:	1545383a 	mul	r2,r2,r21
    ca74:	a53fffcc 	andi	r20,r20,65535
    ca78:	a446b03a 	or	r3,r20,r17
    ca7c:	18bfb02e 	bgeu	r3,r2,c940 <__alt_data_end+0xff00c940>
    ca80:	003fab06 	br	c930 <__alt_data_end+0xff00c930>
    ca84:	2005883a 	mov	r2,r4
    ca88:	2807883a 	mov	r3,r5
    ca8c:	dfc00b17 	ldw	ra,44(sp)
    ca90:	df000a17 	ldw	fp,40(sp)
    ca94:	ddc00917 	ldw	r23,36(sp)
    ca98:	dd800817 	ldw	r22,32(sp)
    ca9c:	dd400717 	ldw	r21,28(sp)
    caa0:	dd000617 	ldw	r20,24(sp)
    caa4:	dcc00517 	ldw	r19,20(sp)
    caa8:	dc800417 	ldw	r18,16(sp)
    caac:	dc400317 	ldw	r17,12(sp)
    cab0:	dc000217 	ldw	r16,8(sp)
    cab4:	dec00c04 	addi	sp,sp,48
    cab8:	f800283a 	ret
    cabc:	04c03fc4 	movi	r19,255
    cac0:	99c9803a 	cmpltu	r4,r19,r7
    cac4:	200890fa 	slli	r4,r4,3
    cac8:	003fa806 	br	c96c <__alt_data_end+0xff00c96c>
    cacc:	00803fc4 	movi	r2,255
    cad0:	14c5803a 	cmpltu	r2,r2,r19
    cad4:	100490fa 	slli	r2,r2,3
    cad8:	003fc006 	br	c9dc <__alt_data_end+0xff00c9dc>
    cadc:	00804034 	movhi	r2,256
    cae0:	10bfffc4 	addi	r2,r2,-1
    cae4:	11808b36 	bltu	r2,r6,cd14 <__umoddi3+0x4f0>
    cae8:	01000404 	movi	r4,16
    caec:	003f6406 	br	c880 <__alt_data_end+0xff00c880>
    caf0:	34c4d83a 	srl	r2,r6,r19
    caf4:	3d0e983a 	sll	r7,r7,r20
    caf8:	8cf8d83a 	srl	fp,r17,r19
    cafc:	8d10983a 	sll	r8,r17,r20
    cb00:	38aab03a 	or	r21,r7,r2
    cb04:	a82cd43a 	srli	r22,r21,16
    cb08:	84e2d83a 	srl	r17,r16,r19
    cb0c:	e009883a 	mov	r4,fp
    cb10:	b00b883a 	mov	r5,r22
    cb14:	8a22b03a 	or	r17,r17,r8
    cb18:	3524983a 	sll	r18,r6,r20
    cb1c:	0002bd80 	call	2bd8 <__umodsi3>
    cb20:	e009883a 	mov	r4,fp
    cb24:	b00b883a 	mov	r5,r22
    cb28:	102f883a 	mov	r23,r2
    cb2c:	0002b740 	call	2b74 <__udivsi3>
    cb30:	100d883a 	mov	r6,r2
    cb34:	b808943a 	slli	r4,r23,16
    cb38:	aa3fffcc 	andi	r8,r21,65535
    cb3c:	8804d43a 	srli	r2,r17,16
    cb40:	41af383a 	mul	r23,r8,r6
    cb44:	8520983a 	sll	r16,r16,r20
    cb48:	1104b03a 	or	r2,r2,r4
    cb4c:	15c0042e 	bgeu	r2,r23,cb60 <__umoddi3+0x33c>
    cb50:	1545883a 	add	r2,r2,r21
    cb54:	30ffffc4 	addi	r3,r6,-1
    cb58:	1540742e 	bgeu	r2,r21,cd2c <__umoddi3+0x508>
    cb5c:	180d883a 	mov	r6,r3
    cb60:	15efc83a 	sub	r23,r2,r23
    cb64:	b00b883a 	mov	r5,r22
    cb68:	b809883a 	mov	r4,r23
    cb6c:	d9800115 	stw	r6,4(sp)
    cb70:	da000015 	stw	r8,0(sp)
    cb74:	0002bd80 	call	2bd8 <__umodsi3>
    cb78:	b00b883a 	mov	r5,r22
    cb7c:	b809883a 	mov	r4,r23
    cb80:	1039883a 	mov	fp,r2
    cb84:	0002b740 	call	2b74 <__udivsi3>
    cb88:	da000017 	ldw	r8,0(sp)
    cb8c:	e038943a 	slli	fp,fp,16
    cb90:	100b883a 	mov	r5,r2
    cb94:	4089383a 	mul	r4,r8,r2
    cb98:	8a3fffcc 	andi	r8,r17,65535
    cb9c:	4710b03a 	or	r8,r8,fp
    cba0:	d9800117 	ldw	r6,4(sp)
    cba4:	4100042e 	bgeu	r8,r4,cbb8 <__umoddi3+0x394>
    cba8:	4551883a 	add	r8,r8,r21
    cbac:	10bfffc4 	addi	r2,r2,-1
    cbb0:	45405a2e 	bgeu	r8,r21,cd1c <__umoddi3+0x4f8>
    cbb4:	100b883a 	mov	r5,r2
    cbb8:	300c943a 	slli	r6,r6,16
    cbbc:	91ffffcc 	andi	r7,r18,65535
    cbc0:	9004d43a 	srli	r2,r18,16
    cbc4:	314cb03a 	or	r6,r6,r5
    cbc8:	317fffcc 	andi	r5,r6,65535
    cbcc:	300cd43a 	srli	r6,r6,16
    cbd0:	29d3383a 	mul	r9,r5,r7
    cbd4:	288b383a 	mul	r5,r5,r2
    cbd8:	31cf383a 	mul	r7,r6,r7
    cbdc:	4806d43a 	srli	r3,r9,16
    cbe0:	4111c83a 	sub	r8,r8,r4
    cbe4:	29cb883a 	add	r5,r5,r7
    cbe8:	194b883a 	add	r5,r3,r5
    cbec:	3085383a 	mul	r2,r6,r2
    cbf0:	29c0022e 	bgeu	r5,r7,cbfc <__umoddi3+0x3d8>
    cbf4:	00c00074 	movhi	r3,1
    cbf8:	10c5883a 	add	r2,r2,r3
    cbfc:	2808d43a 	srli	r4,r5,16
    cc00:	280a943a 	slli	r5,r5,16
    cc04:	4a7fffcc 	andi	r9,r9,65535
    cc08:	2085883a 	add	r2,r4,r2
    cc0c:	2a4b883a 	add	r5,r5,r9
    cc10:	40803636 	bltu	r8,r2,ccec <__umoddi3+0x4c8>
    cc14:	40804d26 	beq	r8,r2,cd4c <__umoddi3+0x528>
    cc18:	4089c83a 	sub	r4,r8,r2
    cc1c:	280f883a 	mov	r7,r5
    cc20:	81cfc83a 	sub	r7,r16,r7
    cc24:	81c7803a 	cmpltu	r3,r16,r7
    cc28:	20c7c83a 	sub	r3,r4,r3
    cc2c:	1cc4983a 	sll	r2,r3,r19
    cc30:	3d0ed83a 	srl	r7,r7,r20
    cc34:	1d06d83a 	srl	r3,r3,r20
    cc38:	11c4b03a 	or	r2,r2,r7
    cc3c:	003f9306 	br	ca8c <__alt_data_end+0xff00ca8c>
    cc40:	9ca6983a 	sll	r19,r19,r18
    cc44:	88e8d83a 	srl	r20,r17,r3
    cc48:	80c4d83a 	srl	r2,r16,r3
    cc4c:	982cd43a 	srli	r22,r19,16
    cc50:	8ca2983a 	sll	r17,r17,r18
    cc54:	a009883a 	mov	r4,r20
    cc58:	b00b883a 	mov	r5,r22
    cc5c:	1478b03a 	or	fp,r2,r17
    cc60:	0002bd80 	call	2bd8 <__umodsi3>
    cc64:	a009883a 	mov	r4,r20
    cc68:	b00b883a 	mov	r5,r22
    cc6c:	1023883a 	mov	r17,r2
    cc70:	0002b740 	call	2b74 <__udivsi3>
    cc74:	9d7fffcc 	andi	r21,r19,65535
    cc78:	880a943a 	slli	r5,r17,16
    cc7c:	e008d43a 	srli	r4,fp,16
    cc80:	a885383a 	mul	r2,r21,r2
    cc84:	84a8983a 	sll	r20,r16,r18
    cc88:	2148b03a 	or	r4,r4,r5
    cc8c:	2080042e 	bgeu	r4,r2,cca0 <__umoddi3+0x47c>
    cc90:	24c9883a 	add	r4,r4,r19
    cc94:	24c00236 	bltu	r4,r19,cca0 <__umoddi3+0x47c>
    cc98:	2080012e 	bgeu	r4,r2,cca0 <__umoddi3+0x47c>
    cc9c:	24c9883a 	add	r4,r4,r19
    cca0:	20a3c83a 	sub	r17,r4,r2
    cca4:	b00b883a 	mov	r5,r22
    cca8:	8809883a 	mov	r4,r17
    ccac:	0002bd80 	call	2bd8 <__umodsi3>
    ccb0:	102f883a 	mov	r23,r2
    ccb4:	8809883a 	mov	r4,r17
    ccb8:	b00b883a 	mov	r5,r22
    ccbc:	0002b740 	call	2b74 <__udivsi3>
    ccc0:	b82e943a 	slli	r23,r23,16
    ccc4:	a885383a 	mul	r2,r21,r2
    ccc8:	e13fffcc 	andi	r4,fp,65535
    cccc:	25c8b03a 	or	r4,r4,r23
    ccd0:	2080042e 	bgeu	r4,r2,cce4 <__umoddi3+0x4c0>
    ccd4:	24c9883a 	add	r4,r4,r19
    ccd8:	24c00236 	bltu	r4,r19,cce4 <__umoddi3+0x4c0>
    ccdc:	2080012e 	bgeu	r4,r2,cce4 <__umoddi3+0x4c0>
    cce0:	24c9883a 	add	r4,r4,r19
    cce4:	20a3c83a 	sub	r17,r4,r2
    cce8:	003f4806 	br	ca0c <__alt_data_end+0xff00ca0c>
    ccec:	2c8fc83a 	sub	r7,r5,r18
    ccf0:	1545c83a 	sub	r2,r2,r21
    ccf4:	29cb803a 	cmpltu	r5,r5,r7
    ccf8:	1145c83a 	sub	r2,r2,r5
    ccfc:	4089c83a 	sub	r4,r8,r2
    cd00:	003fc706 	br	cc20 <__alt_data_end+0xff00cc20>
    cd04:	01000604 	movi	r4,24
    cd08:	003f1806 	br	c96c <__alt_data_end+0xff00c96c>
    cd0c:	00800604 	movi	r2,24
    cd10:	003f3206 	br	c9dc <__alt_data_end+0xff00c9dc>
    cd14:	01000604 	movi	r4,24
    cd18:	003ed906 	br	c880 <__alt_data_end+0xff00c880>
    cd1c:	413fa52e 	bgeu	r8,r4,cbb4 <__alt_data_end+0xff00cbb4>
    cd20:	297fff84 	addi	r5,r5,-2
    cd24:	4551883a 	add	r8,r8,r21
    cd28:	003fa306 	br	cbb8 <__alt_data_end+0xff00cbb8>
    cd2c:	15ff8b2e 	bgeu	r2,r23,cb5c <__alt_data_end+0xff00cb5c>
    cd30:	31bfff84 	addi	r6,r6,-2
    cd34:	1545883a 	add	r2,r2,r21
    cd38:	003f8906 	br	cb60 <__alt_data_end+0xff00cb60>
    cd3c:	24c9883a 	add	r4,r4,r19
    cd40:	003eee06 	br	c8fc <__alt_data_end+0xff00c8fc>
    cd44:	8005883a 	mov	r2,r16
    cd48:	003f1706 	br	c9a8 <__alt_data_end+0xff00c9a8>
    cd4c:	817fe736 	bltu	r16,r5,ccec <__alt_data_end+0xff00ccec>
    cd50:	280f883a 	mov	r7,r5
    cd54:	0009883a 	mov	r4,zero
    cd58:	003fb106 	br	cc20 <__alt_data_end+0xff00cc20>

0000cd5c <__adddf3>:
    cd5c:	02c00434 	movhi	r11,16
    cd60:	5affffc4 	addi	r11,r11,-1
    cd64:	2806d7fa 	srli	r3,r5,31
    cd68:	2ad4703a 	and	r10,r5,r11
    cd6c:	3ad2703a 	and	r9,r7,r11
    cd70:	3804d53a 	srli	r2,r7,20
    cd74:	3018d77a 	srli	r12,r6,29
    cd78:	280ad53a 	srli	r5,r5,20
    cd7c:	501490fa 	slli	r10,r10,3
    cd80:	2010d77a 	srli	r8,r4,29
    cd84:	481290fa 	slli	r9,r9,3
    cd88:	380ed7fa 	srli	r7,r7,31
    cd8c:	defffb04 	addi	sp,sp,-20
    cd90:	dc800215 	stw	r18,8(sp)
    cd94:	dc400115 	stw	r17,4(sp)
    cd98:	dc000015 	stw	r16,0(sp)
    cd9c:	dfc00415 	stw	ra,16(sp)
    cda0:	dcc00315 	stw	r19,12(sp)
    cda4:	1c803fcc 	andi	r18,r3,255
    cda8:	2c01ffcc 	andi	r16,r5,2047
    cdac:	5210b03a 	or	r8,r10,r8
    cdb0:	202290fa 	slli	r17,r4,3
    cdb4:	1081ffcc 	andi	r2,r2,2047
    cdb8:	4b12b03a 	or	r9,r9,r12
    cdbc:	300c90fa 	slli	r6,r6,3
    cdc0:	91c07526 	beq	r18,r7,cf98 <__adddf3+0x23c>
    cdc4:	8087c83a 	sub	r3,r16,r2
    cdc8:	00c0ab0e 	bge	zero,r3,d078 <__adddf3+0x31c>
    cdcc:	10002a1e 	bne	r2,zero,ce78 <__adddf3+0x11c>
    cdd0:	4984b03a 	or	r2,r9,r6
    cdd4:	1000961e 	bne	r2,zero,d030 <__adddf3+0x2d4>
    cdd8:	888001cc 	andi	r2,r17,7
    cddc:	10000726 	beq	r2,zero,cdfc <__adddf3+0xa0>
    cde0:	888003cc 	andi	r2,r17,15
    cde4:	00c00104 	movi	r3,4
    cde8:	10c00426 	beq	r2,r3,cdfc <__adddf3+0xa0>
    cdec:	88c7883a 	add	r3,r17,r3
    cdf0:	1c63803a 	cmpltu	r17,r3,r17
    cdf4:	4451883a 	add	r8,r8,r17
    cdf8:	1823883a 	mov	r17,r3
    cdfc:	4080202c 	andhi	r2,r8,128
    ce00:	10005926 	beq	r2,zero,cf68 <__adddf3+0x20c>
    ce04:	84000044 	addi	r16,r16,1
    ce08:	0081ffc4 	movi	r2,2047
    ce0c:	8080ba26 	beq	r16,r2,d0f8 <__adddf3+0x39c>
    ce10:	00bfe034 	movhi	r2,65408
    ce14:	10bfffc4 	addi	r2,r2,-1
    ce18:	4090703a 	and	r8,r8,r2
    ce1c:	4004977a 	slli	r2,r8,29
    ce20:	4010927a 	slli	r8,r8,9
    ce24:	8822d0fa 	srli	r17,r17,3
    ce28:	8401ffcc 	andi	r16,r16,2047
    ce2c:	4010d33a 	srli	r8,r8,12
    ce30:	9007883a 	mov	r3,r18
    ce34:	1444b03a 	or	r2,r2,r17
    ce38:	8401ffcc 	andi	r16,r16,2047
    ce3c:	8020953a 	slli	r16,r16,20
    ce40:	18c03fcc 	andi	r3,r3,255
    ce44:	01000434 	movhi	r4,16
    ce48:	213fffc4 	addi	r4,r4,-1
    ce4c:	180697fa 	slli	r3,r3,31
    ce50:	4110703a 	and	r8,r8,r4
    ce54:	4410b03a 	or	r8,r8,r16
    ce58:	40c6b03a 	or	r3,r8,r3
    ce5c:	dfc00417 	ldw	ra,16(sp)
    ce60:	dcc00317 	ldw	r19,12(sp)
    ce64:	dc800217 	ldw	r18,8(sp)
    ce68:	dc400117 	ldw	r17,4(sp)
    ce6c:	dc000017 	ldw	r16,0(sp)
    ce70:	dec00504 	addi	sp,sp,20
    ce74:	f800283a 	ret
    ce78:	0081ffc4 	movi	r2,2047
    ce7c:	80bfd626 	beq	r16,r2,cdd8 <__alt_data_end+0xff00cdd8>
    ce80:	4a402034 	orhi	r9,r9,128
    ce84:	00800e04 	movi	r2,56
    ce88:	10c09f16 	blt	r2,r3,d108 <__adddf3+0x3ac>
    ce8c:	008007c4 	movi	r2,31
    ce90:	10c0c216 	blt	r2,r3,d19c <__adddf3+0x440>
    ce94:	00800804 	movi	r2,32
    ce98:	10c5c83a 	sub	r2,r2,r3
    ce9c:	488a983a 	sll	r5,r9,r2
    cea0:	30c8d83a 	srl	r4,r6,r3
    cea4:	3084983a 	sll	r2,r6,r2
    cea8:	48c6d83a 	srl	r3,r9,r3
    ceac:	290cb03a 	or	r6,r5,r4
    ceb0:	1004c03a 	cmpne	r2,r2,zero
    ceb4:	308cb03a 	or	r6,r6,r2
    ceb8:	898dc83a 	sub	r6,r17,r6
    cebc:	89a3803a 	cmpltu	r17,r17,r6
    cec0:	40d1c83a 	sub	r8,r8,r3
    cec4:	4451c83a 	sub	r8,r8,r17
    cec8:	3023883a 	mov	r17,r6
    cecc:	4080202c 	andhi	r2,r8,128
    ced0:	10002326 	beq	r2,zero,cf60 <__adddf3+0x204>
    ced4:	04c02034 	movhi	r19,128
    ced8:	9cffffc4 	addi	r19,r19,-1
    cedc:	44e6703a 	and	r19,r8,r19
    cee0:	98007626 	beq	r19,zero,d0bc <__adddf3+0x360>
    cee4:	9809883a 	mov	r4,r19
    cee8:	000f3600 	call	f360 <__clzsi2>
    ceec:	10fffe04 	addi	r3,r2,-8
    cef0:	010007c4 	movi	r4,31
    cef4:	20c07716 	blt	r4,r3,d0d4 <__adddf3+0x378>
    cef8:	00800804 	movi	r2,32
    cefc:	10c5c83a 	sub	r2,r2,r3
    cf00:	8884d83a 	srl	r2,r17,r2
    cf04:	98d0983a 	sll	r8,r19,r3
    cf08:	88e2983a 	sll	r17,r17,r3
    cf0c:	1204b03a 	or	r2,r2,r8
    cf10:	1c007416 	blt	r3,r16,d0e4 <__adddf3+0x388>
    cf14:	1c21c83a 	sub	r16,r3,r16
    cf18:	82000044 	addi	r8,r16,1
    cf1c:	00c007c4 	movi	r3,31
    cf20:	1a009116 	blt	r3,r8,d168 <__adddf3+0x40c>
    cf24:	00c00804 	movi	r3,32
    cf28:	1a07c83a 	sub	r3,r3,r8
    cf2c:	8a08d83a 	srl	r4,r17,r8
    cf30:	88e2983a 	sll	r17,r17,r3
    cf34:	10c6983a 	sll	r3,r2,r3
    cf38:	1210d83a 	srl	r8,r2,r8
    cf3c:	8804c03a 	cmpne	r2,r17,zero
    cf40:	1906b03a 	or	r3,r3,r4
    cf44:	18a2b03a 	or	r17,r3,r2
    cf48:	0021883a 	mov	r16,zero
    cf4c:	003fa206 	br	cdd8 <__alt_data_end+0xff00cdd8>
    cf50:	1890b03a 	or	r8,r3,r2
    cf54:	40017d26 	beq	r8,zero,d54c <__adddf3+0x7f0>
    cf58:	1011883a 	mov	r8,r2
    cf5c:	1823883a 	mov	r17,r3
    cf60:	888001cc 	andi	r2,r17,7
    cf64:	103f9e1e 	bne	r2,zero,cde0 <__alt_data_end+0xff00cde0>
    cf68:	4004977a 	slli	r2,r8,29
    cf6c:	8822d0fa 	srli	r17,r17,3
    cf70:	4010d0fa 	srli	r8,r8,3
    cf74:	9007883a 	mov	r3,r18
    cf78:	1444b03a 	or	r2,r2,r17
    cf7c:	0101ffc4 	movi	r4,2047
    cf80:	81002426 	beq	r16,r4,d014 <__adddf3+0x2b8>
    cf84:	8120703a 	and	r16,r16,r4
    cf88:	01000434 	movhi	r4,16
    cf8c:	213fffc4 	addi	r4,r4,-1
    cf90:	4110703a 	and	r8,r8,r4
    cf94:	003fa806 	br	ce38 <__alt_data_end+0xff00ce38>
    cf98:	8089c83a 	sub	r4,r16,r2
    cf9c:	01005e0e 	bge	zero,r4,d118 <__adddf3+0x3bc>
    cfa0:	10002b26 	beq	r2,zero,d050 <__adddf3+0x2f4>
    cfa4:	0081ffc4 	movi	r2,2047
    cfa8:	80bf8b26 	beq	r16,r2,cdd8 <__alt_data_end+0xff00cdd8>
    cfac:	4a402034 	orhi	r9,r9,128
    cfb0:	00800e04 	movi	r2,56
    cfb4:	1100a40e 	bge	r2,r4,d248 <__adddf3+0x4ec>
    cfb8:	498cb03a 	or	r6,r9,r6
    cfbc:	300ac03a 	cmpne	r5,r6,zero
    cfc0:	0013883a 	mov	r9,zero
    cfc4:	2c4b883a 	add	r5,r5,r17
    cfc8:	2c63803a 	cmpltu	r17,r5,r17
    cfcc:	4a11883a 	add	r8,r9,r8
    cfd0:	8a11883a 	add	r8,r17,r8
    cfd4:	2823883a 	mov	r17,r5
    cfd8:	4080202c 	andhi	r2,r8,128
    cfdc:	103fe026 	beq	r2,zero,cf60 <__alt_data_end+0xff00cf60>
    cfe0:	84000044 	addi	r16,r16,1
    cfe4:	0081ffc4 	movi	r2,2047
    cfe8:	8080d226 	beq	r16,r2,d334 <__adddf3+0x5d8>
    cfec:	00bfe034 	movhi	r2,65408
    cff0:	10bfffc4 	addi	r2,r2,-1
    cff4:	4090703a 	and	r8,r8,r2
    cff8:	880ad07a 	srli	r5,r17,1
    cffc:	400897fa 	slli	r4,r8,31
    d000:	88c0004c 	andi	r3,r17,1
    d004:	28e2b03a 	or	r17,r5,r3
    d008:	4010d07a 	srli	r8,r8,1
    d00c:	2462b03a 	or	r17,r4,r17
    d010:	003f7106 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d014:	4088b03a 	or	r4,r8,r2
    d018:	20014526 	beq	r4,zero,d530 <__adddf3+0x7d4>
    d01c:	01000434 	movhi	r4,16
    d020:	42000234 	orhi	r8,r8,8
    d024:	213fffc4 	addi	r4,r4,-1
    d028:	4110703a 	and	r8,r8,r4
    d02c:	003f8206 	br	ce38 <__alt_data_end+0xff00ce38>
    d030:	18ffffc4 	addi	r3,r3,-1
    d034:	1800491e 	bne	r3,zero,d15c <__adddf3+0x400>
    d038:	898bc83a 	sub	r5,r17,r6
    d03c:	8963803a 	cmpltu	r17,r17,r5
    d040:	4251c83a 	sub	r8,r8,r9
    d044:	4451c83a 	sub	r8,r8,r17
    d048:	2823883a 	mov	r17,r5
    d04c:	003f9f06 	br	cecc <__alt_data_end+0xff00cecc>
    d050:	4984b03a 	or	r2,r9,r6
    d054:	103f6026 	beq	r2,zero,cdd8 <__alt_data_end+0xff00cdd8>
    d058:	213fffc4 	addi	r4,r4,-1
    d05c:	2000931e 	bne	r4,zero,d2ac <__adddf3+0x550>
    d060:	898d883a 	add	r6,r17,r6
    d064:	3463803a 	cmpltu	r17,r6,r17
    d068:	4251883a 	add	r8,r8,r9
    d06c:	8a11883a 	add	r8,r17,r8
    d070:	3023883a 	mov	r17,r6
    d074:	003fd806 	br	cfd8 <__alt_data_end+0xff00cfd8>
    d078:	1800541e 	bne	r3,zero,d1cc <__adddf3+0x470>
    d07c:	80800044 	addi	r2,r16,1
    d080:	1081ffcc 	andi	r2,r2,2047
    d084:	00c00044 	movi	r3,1
    d088:	1880a00e 	bge	r3,r2,d30c <__adddf3+0x5b0>
    d08c:	8989c83a 	sub	r4,r17,r6
    d090:	8905803a 	cmpltu	r2,r17,r4
    d094:	4267c83a 	sub	r19,r8,r9
    d098:	98a7c83a 	sub	r19,r19,r2
    d09c:	9880202c 	andhi	r2,r19,128
    d0a0:	10006326 	beq	r2,zero,d230 <__adddf3+0x4d4>
    d0a4:	3463c83a 	sub	r17,r6,r17
    d0a8:	4a07c83a 	sub	r3,r9,r8
    d0ac:	344d803a 	cmpltu	r6,r6,r17
    d0b0:	19a7c83a 	sub	r19,r3,r6
    d0b4:	3825883a 	mov	r18,r7
    d0b8:	983f8a1e 	bne	r19,zero,cee4 <__alt_data_end+0xff00cee4>
    d0bc:	8809883a 	mov	r4,r17
    d0c0:	000f3600 	call	f360 <__clzsi2>
    d0c4:	10800804 	addi	r2,r2,32
    d0c8:	10fffe04 	addi	r3,r2,-8
    d0cc:	010007c4 	movi	r4,31
    d0d0:	20ff890e 	bge	r4,r3,cef8 <__alt_data_end+0xff00cef8>
    d0d4:	10bff604 	addi	r2,r2,-40
    d0d8:	8884983a 	sll	r2,r17,r2
    d0dc:	0023883a 	mov	r17,zero
    d0e0:	1c3f8c0e 	bge	r3,r16,cf14 <__alt_data_end+0xff00cf14>
    d0e4:	023fe034 	movhi	r8,65408
    d0e8:	423fffc4 	addi	r8,r8,-1
    d0ec:	80e1c83a 	sub	r16,r16,r3
    d0f0:	1210703a 	and	r8,r2,r8
    d0f4:	003f3806 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d0f8:	9007883a 	mov	r3,r18
    d0fc:	0011883a 	mov	r8,zero
    d100:	0005883a 	mov	r2,zero
    d104:	003f4c06 	br	ce38 <__alt_data_end+0xff00ce38>
    d108:	498cb03a 	or	r6,r9,r6
    d10c:	300cc03a 	cmpne	r6,r6,zero
    d110:	0007883a 	mov	r3,zero
    d114:	003f6806 	br	ceb8 <__alt_data_end+0xff00ceb8>
    d118:	20009c1e 	bne	r4,zero,d38c <__adddf3+0x630>
    d11c:	80800044 	addi	r2,r16,1
    d120:	1141ffcc 	andi	r5,r2,2047
    d124:	01000044 	movi	r4,1
    d128:	2140670e 	bge	r4,r5,d2c8 <__adddf3+0x56c>
    d12c:	0101ffc4 	movi	r4,2047
    d130:	11007f26 	beq	r2,r4,d330 <__adddf3+0x5d4>
    d134:	898d883a 	add	r6,r17,r6
    d138:	4247883a 	add	r3,r8,r9
    d13c:	3451803a 	cmpltu	r8,r6,r17
    d140:	40d1883a 	add	r8,r8,r3
    d144:	402297fa 	slli	r17,r8,31
    d148:	300cd07a 	srli	r6,r6,1
    d14c:	4010d07a 	srli	r8,r8,1
    d150:	1021883a 	mov	r16,r2
    d154:	89a2b03a 	or	r17,r17,r6
    d158:	003f1f06 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d15c:	0081ffc4 	movi	r2,2047
    d160:	80bf481e 	bne	r16,r2,ce84 <__alt_data_end+0xff00ce84>
    d164:	003f1c06 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d168:	843ff844 	addi	r16,r16,-31
    d16c:	01000804 	movi	r4,32
    d170:	1406d83a 	srl	r3,r2,r16
    d174:	41005026 	beq	r8,r4,d2b8 <__adddf3+0x55c>
    d178:	01001004 	movi	r4,64
    d17c:	2211c83a 	sub	r8,r4,r8
    d180:	1204983a 	sll	r2,r2,r8
    d184:	88a2b03a 	or	r17,r17,r2
    d188:	8822c03a 	cmpne	r17,r17,zero
    d18c:	1c62b03a 	or	r17,r3,r17
    d190:	0011883a 	mov	r8,zero
    d194:	0021883a 	mov	r16,zero
    d198:	003f7106 	br	cf60 <__alt_data_end+0xff00cf60>
    d19c:	193ff804 	addi	r4,r3,-32
    d1a0:	00800804 	movi	r2,32
    d1a4:	4908d83a 	srl	r4,r9,r4
    d1a8:	18804526 	beq	r3,r2,d2c0 <__adddf3+0x564>
    d1ac:	00801004 	movi	r2,64
    d1b0:	10c5c83a 	sub	r2,r2,r3
    d1b4:	4886983a 	sll	r3,r9,r2
    d1b8:	198cb03a 	or	r6,r3,r6
    d1bc:	300cc03a 	cmpne	r6,r6,zero
    d1c0:	218cb03a 	or	r6,r4,r6
    d1c4:	0007883a 	mov	r3,zero
    d1c8:	003f3b06 	br	ceb8 <__alt_data_end+0xff00ceb8>
    d1cc:	80002a26 	beq	r16,zero,d278 <__adddf3+0x51c>
    d1d0:	0101ffc4 	movi	r4,2047
    d1d4:	11006826 	beq	r2,r4,d378 <__adddf3+0x61c>
    d1d8:	00c7c83a 	sub	r3,zero,r3
    d1dc:	42002034 	orhi	r8,r8,128
    d1e0:	01000e04 	movi	r4,56
    d1e4:	20c07c16 	blt	r4,r3,d3d8 <__adddf3+0x67c>
    d1e8:	010007c4 	movi	r4,31
    d1ec:	20c0da16 	blt	r4,r3,d558 <__adddf3+0x7fc>
    d1f0:	01000804 	movi	r4,32
    d1f4:	20c9c83a 	sub	r4,r4,r3
    d1f8:	4114983a 	sll	r10,r8,r4
    d1fc:	88cad83a 	srl	r5,r17,r3
    d200:	8908983a 	sll	r4,r17,r4
    d204:	40c6d83a 	srl	r3,r8,r3
    d208:	5162b03a 	or	r17,r10,r5
    d20c:	2008c03a 	cmpne	r4,r4,zero
    d210:	8922b03a 	or	r17,r17,r4
    d214:	3463c83a 	sub	r17,r6,r17
    d218:	48c7c83a 	sub	r3,r9,r3
    d21c:	344d803a 	cmpltu	r6,r6,r17
    d220:	1991c83a 	sub	r8,r3,r6
    d224:	1021883a 	mov	r16,r2
    d228:	3825883a 	mov	r18,r7
    d22c:	003f2706 	br	cecc <__alt_data_end+0xff00cecc>
    d230:	24d0b03a 	or	r8,r4,r19
    d234:	40001b1e 	bne	r8,zero,d2a4 <__adddf3+0x548>
    d238:	0005883a 	mov	r2,zero
    d23c:	0007883a 	mov	r3,zero
    d240:	0021883a 	mov	r16,zero
    d244:	003f4d06 	br	cf7c <__alt_data_end+0xff00cf7c>
    d248:	008007c4 	movi	r2,31
    d24c:	11003c16 	blt	r2,r4,d340 <__adddf3+0x5e4>
    d250:	00800804 	movi	r2,32
    d254:	1105c83a 	sub	r2,r2,r4
    d258:	488e983a 	sll	r7,r9,r2
    d25c:	310ad83a 	srl	r5,r6,r4
    d260:	3084983a 	sll	r2,r6,r2
    d264:	4912d83a 	srl	r9,r9,r4
    d268:	394ab03a 	or	r5,r7,r5
    d26c:	1004c03a 	cmpne	r2,r2,zero
    d270:	288ab03a 	or	r5,r5,r2
    d274:	003f5306 	br	cfc4 <__alt_data_end+0xff00cfc4>
    d278:	4448b03a 	or	r4,r8,r17
    d27c:	20003e26 	beq	r4,zero,d378 <__adddf3+0x61c>
    d280:	00c6303a 	nor	r3,zero,r3
    d284:	18003a1e 	bne	r3,zero,d370 <__adddf3+0x614>
    d288:	3463c83a 	sub	r17,r6,r17
    d28c:	4a07c83a 	sub	r3,r9,r8
    d290:	344d803a 	cmpltu	r6,r6,r17
    d294:	1991c83a 	sub	r8,r3,r6
    d298:	1021883a 	mov	r16,r2
    d29c:	3825883a 	mov	r18,r7
    d2a0:	003f0a06 	br	cecc <__alt_data_end+0xff00cecc>
    d2a4:	2023883a 	mov	r17,r4
    d2a8:	003f0d06 	br	cee0 <__alt_data_end+0xff00cee0>
    d2ac:	0081ffc4 	movi	r2,2047
    d2b0:	80bf3f1e 	bne	r16,r2,cfb0 <__alt_data_end+0xff00cfb0>
    d2b4:	003ec806 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d2b8:	0005883a 	mov	r2,zero
    d2bc:	003fb106 	br	d184 <__alt_data_end+0xff00d184>
    d2c0:	0007883a 	mov	r3,zero
    d2c4:	003fbc06 	br	d1b8 <__alt_data_end+0xff00d1b8>
    d2c8:	4444b03a 	or	r2,r8,r17
    d2cc:	8000871e 	bne	r16,zero,d4ec <__adddf3+0x790>
    d2d0:	1000ba26 	beq	r2,zero,d5bc <__adddf3+0x860>
    d2d4:	4984b03a 	or	r2,r9,r6
    d2d8:	103ebf26 	beq	r2,zero,cdd8 <__alt_data_end+0xff00cdd8>
    d2dc:	8985883a 	add	r2,r17,r6
    d2e0:	4247883a 	add	r3,r8,r9
    d2e4:	1451803a 	cmpltu	r8,r2,r17
    d2e8:	40d1883a 	add	r8,r8,r3
    d2ec:	40c0202c 	andhi	r3,r8,128
    d2f0:	1023883a 	mov	r17,r2
    d2f4:	183f1a26 	beq	r3,zero,cf60 <__alt_data_end+0xff00cf60>
    d2f8:	00bfe034 	movhi	r2,65408
    d2fc:	10bfffc4 	addi	r2,r2,-1
    d300:	2021883a 	mov	r16,r4
    d304:	4090703a 	and	r8,r8,r2
    d308:	003eb306 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d30c:	4444b03a 	or	r2,r8,r17
    d310:	8000291e 	bne	r16,zero,d3b8 <__adddf3+0x65c>
    d314:	10004b1e 	bne	r2,zero,d444 <__adddf3+0x6e8>
    d318:	4990b03a 	or	r8,r9,r6
    d31c:	40008b26 	beq	r8,zero,d54c <__adddf3+0x7f0>
    d320:	4811883a 	mov	r8,r9
    d324:	3023883a 	mov	r17,r6
    d328:	3825883a 	mov	r18,r7
    d32c:	003eaa06 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d330:	1021883a 	mov	r16,r2
    d334:	0011883a 	mov	r8,zero
    d338:	0005883a 	mov	r2,zero
    d33c:	003f0f06 	br	cf7c <__alt_data_end+0xff00cf7c>
    d340:	217ff804 	addi	r5,r4,-32
    d344:	00800804 	movi	r2,32
    d348:	494ad83a 	srl	r5,r9,r5
    d34c:	20807d26 	beq	r4,r2,d544 <__adddf3+0x7e8>
    d350:	00801004 	movi	r2,64
    d354:	1109c83a 	sub	r4,r2,r4
    d358:	4912983a 	sll	r9,r9,r4
    d35c:	498cb03a 	or	r6,r9,r6
    d360:	300cc03a 	cmpne	r6,r6,zero
    d364:	298ab03a 	or	r5,r5,r6
    d368:	0013883a 	mov	r9,zero
    d36c:	003f1506 	br	cfc4 <__alt_data_end+0xff00cfc4>
    d370:	0101ffc4 	movi	r4,2047
    d374:	113f9a1e 	bne	r2,r4,d1e0 <__alt_data_end+0xff00d1e0>
    d378:	4811883a 	mov	r8,r9
    d37c:	3023883a 	mov	r17,r6
    d380:	1021883a 	mov	r16,r2
    d384:	3825883a 	mov	r18,r7
    d388:	003e9306 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d38c:	8000161e 	bne	r16,zero,d3e8 <__adddf3+0x68c>
    d390:	444ab03a 	or	r5,r8,r17
    d394:	28005126 	beq	r5,zero,d4dc <__adddf3+0x780>
    d398:	0108303a 	nor	r4,zero,r4
    d39c:	20004d1e 	bne	r4,zero,d4d4 <__adddf3+0x778>
    d3a0:	89a3883a 	add	r17,r17,r6
    d3a4:	4253883a 	add	r9,r8,r9
    d3a8:	898d803a 	cmpltu	r6,r17,r6
    d3ac:	3251883a 	add	r8,r6,r9
    d3b0:	1021883a 	mov	r16,r2
    d3b4:	003f0806 	br	cfd8 <__alt_data_end+0xff00cfd8>
    d3b8:	1000301e 	bne	r2,zero,d47c <__adddf3+0x720>
    d3bc:	4984b03a 	or	r2,r9,r6
    d3c0:	10007126 	beq	r2,zero,d588 <__adddf3+0x82c>
    d3c4:	4811883a 	mov	r8,r9
    d3c8:	3023883a 	mov	r17,r6
    d3cc:	3825883a 	mov	r18,r7
    d3d0:	0401ffc4 	movi	r16,2047
    d3d4:	003e8006 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d3d8:	4462b03a 	or	r17,r8,r17
    d3dc:	8822c03a 	cmpne	r17,r17,zero
    d3e0:	0007883a 	mov	r3,zero
    d3e4:	003f8b06 	br	d214 <__alt_data_end+0xff00d214>
    d3e8:	0141ffc4 	movi	r5,2047
    d3ec:	11403b26 	beq	r2,r5,d4dc <__adddf3+0x780>
    d3f0:	0109c83a 	sub	r4,zero,r4
    d3f4:	42002034 	orhi	r8,r8,128
    d3f8:	01400e04 	movi	r5,56
    d3fc:	29006716 	blt	r5,r4,d59c <__adddf3+0x840>
    d400:	014007c4 	movi	r5,31
    d404:	29007016 	blt	r5,r4,d5c8 <__adddf3+0x86c>
    d408:	01400804 	movi	r5,32
    d40c:	290bc83a 	sub	r5,r5,r4
    d410:	4154983a 	sll	r10,r8,r5
    d414:	890ed83a 	srl	r7,r17,r4
    d418:	894a983a 	sll	r5,r17,r5
    d41c:	4108d83a 	srl	r4,r8,r4
    d420:	51e2b03a 	or	r17,r10,r7
    d424:	280ac03a 	cmpne	r5,r5,zero
    d428:	8962b03a 	or	r17,r17,r5
    d42c:	89a3883a 	add	r17,r17,r6
    d430:	2253883a 	add	r9,r4,r9
    d434:	898d803a 	cmpltu	r6,r17,r6
    d438:	3251883a 	add	r8,r6,r9
    d43c:	1021883a 	mov	r16,r2
    d440:	003ee506 	br	cfd8 <__alt_data_end+0xff00cfd8>
    d444:	4984b03a 	or	r2,r9,r6
    d448:	103e6326 	beq	r2,zero,cdd8 <__alt_data_end+0xff00cdd8>
    d44c:	8987c83a 	sub	r3,r17,r6
    d450:	88c9803a 	cmpltu	r4,r17,r3
    d454:	4245c83a 	sub	r2,r8,r9
    d458:	1105c83a 	sub	r2,r2,r4
    d45c:	1100202c 	andhi	r4,r2,128
    d460:	203ebb26 	beq	r4,zero,cf50 <__alt_data_end+0xff00cf50>
    d464:	3463c83a 	sub	r17,r6,r17
    d468:	4a07c83a 	sub	r3,r9,r8
    d46c:	344d803a 	cmpltu	r6,r6,r17
    d470:	1991c83a 	sub	r8,r3,r6
    d474:	3825883a 	mov	r18,r7
    d478:	003e5706 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d47c:	4984b03a 	or	r2,r9,r6
    d480:	10002e26 	beq	r2,zero,d53c <__adddf3+0x7e0>
    d484:	4004d0fa 	srli	r2,r8,3
    d488:	8822d0fa 	srli	r17,r17,3
    d48c:	4010977a 	slli	r8,r8,29
    d490:	10c0022c 	andhi	r3,r2,8
    d494:	4462b03a 	or	r17,r8,r17
    d498:	18000826 	beq	r3,zero,d4bc <__adddf3+0x760>
    d49c:	4808d0fa 	srli	r4,r9,3
    d4a0:	20c0022c 	andhi	r3,r4,8
    d4a4:	1800051e 	bne	r3,zero,d4bc <__adddf3+0x760>
    d4a8:	300cd0fa 	srli	r6,r6,3
    d4ac:	4806977a 	slli	r3,r9,29
    d4b0:	2005883a 	mov	r2,r4
    d4b4:	3825883a 	mov	r18,r7
    d4b8:	19a2b03a 	or	r17,r3,r6
    d4bc:	8810d77a 	srli	r8,r17,29
    d4c0:	100490fa 	slli	r2,r2,3
    d4c4:	882290fa 	slli	r17,r17,3
    d4c8:	0401ffc4 	movi	r16,2047
    d4cc:	4090b03a 	or	r8,r8,r2
    d4d0:	003e4106 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d4d4:	0141ffc4 	movi	r5,2047
    d4d8:	117fc71e 	bne	r2,r5,d3f8 <__alt_data_end+0xff00d3f8>
    d4dc:	4811883a 	mov	r8,r9
    d4e0:	3023883a 	mov	r17,r6
    d4e4:	1021883a 	mov	r16,r2
    d4e8:	003e3b06 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d4ec:	10002f26 	beq	r2,zero,d5ac <__adddf3+0x850>
    d4f0:	4984b03a 	or	r2,r9,r6
    d4f4:	10001126 	beq	r2,zero,d53c <__adddf3+0x7e0>
    d4f8:	4004d0fa 	srli	r2,r8,3
    d4fc:	8822d0fa 	srli	r17,r17,3
    d500:	4010977a 	slli	r8,r8,29
    d504:	10c0022c 	andhi	r3,r2,8
    d508:	4462b03a 	or	r17,r8,r17
    d50c:	183feb26 	beq	r3,zero,d4bc <__alt_data_end+0xff00d4bc>
    d510:	4808d0fa 	srli	r4,r9,3
    d514:	20c0022c 	andhi	r3,r4,8
    d518:	183fe81e 	bne	r3,zero,d4bc <__alt_data_end+0xff00d4bc>
    d51c:	300cd0fa 	srli	r6,r6,3
    d520:	4806977a 	slli	r3,r9,29
    d524:	2005883a 	mov	r2,r4
    d528:	19a2b03a 	or	r17,r3,r6
    d52c:	003fe306 	br	d4bc <__alt_data_end+0xff00d4bc>
    d530:	0011883a 	mov	r8,zero
    d534:	0005883a 	mov	r2,zero
    d538:	003e3f06 	br	ce38 <__alt_data_end+0xff00ce38>
    d53c:	0401ffc4 	movi	r16,2047
    d540:	003e2506 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d544:	0013883a 	mov	r9,zero
    d548:	003f8406 	br	d35c <__alt_data_end+0xff00d35c>
    d54c:	0005883a 	mov	r2,zero
    d550:	0007883a 	mov	r3,zero
    d554:	003e8906 	br	cf7c <__alt_data_end+0xff00cf7c>
    d558:	197ff804 	addi	r5,r3,-32
    d55c:	01000804 	movi	r4,32
    d560:	414ad83a 	srl	r5,r8,r5
    d564:	19002426 	beq	r3,r4,d5f8 <__adddf3+0x89c>
    d568:	01001004 	movi	r4,64
    d56c:	20c7c83a 	sub	r3,r4,r3
    d570:	40c6983a 	sll	r3,r8,r3
    d574:	1c46b03a 	or	r3,r3,r17
    d578:	1806c03a 	cmpne	r3,r3,zero
    d57c:	28e2b03a 	or	r17,r5,r3
    d580:	0007883a 	mov	r3,zero
    d584:	003f2306 	br	d214 <__alt_data_end+0xff00d214>
    d588:	0007883a 	mov	r3,zero
    d58c:	5811883a 	mov	r8,r11
    d590:	00bfffc4 	movi	r2,-1
    d594:	0401ffc4 	movi	r16,2047
    d598:	003e7806 	br	cf7c <__alt_data_end+0xff00cf7c>
    d59c:	4462b03a 	or	r17,r8,r17
    d5a0:	8822c03a 	cmpne	r17,r17,zero
    d5a4:	0009883a 	mov	r4,zero
    d5a8:	003fa006 	br	d42c <__alt_data_end+0xff00d42c>
    d5ac:	4811883a 	mov	r8,r9
    d5b0:	3023883a 	mov	r17,r6
    d5b4:	0401ffc4 	movi	r16,2047
    d5b8:	003e0706 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d5bc:	4811883a 	mov	r8,r9
    d5c0:	3023883a 	mov	r17,r6
    d5c4:	003e0406 	br	cdd8 <__alt_data_end+0xff00cdd8>
    d5c8:	21fff804 	addi	r7,r4,-32
    d5cc:	01400804 	movi	r5,32
    d5d0:	41ced83a 	srl	r7,r8,r7
    d5d4:	21400a26 	beq	r4,r5,d600 <__adddf3+0x8a4>
    d5d8:	01401004 	movi	r5,64
    d5dc:	2909c83a 	sub	r4,r5,r4
    d5e0:	4108983a 	sll	r4,r8,r4
    d5e4:	2448b03a 	or	r4,r4,r17
    d5e8:	2008c03a 	cmpne	r4,r4,zero
    d5ec:	3922b03a 	or	r17,r7,r4
    d5f0:	0009883a 	mov	r4,zero
    d5f4:	003f8d06 	br	d42c <__alt_data_end+0xff00d42c>
    d5f8:	0007883a 	mov	r3,zero
    d5fc:	003fdd06 	br	d574 <__alt_data_end+0xff00d574>
    d600:	0009883a 	mov	r4,zero
    d604:	003ff706 	br	d5e4 <__alt_data_end+0xff00d5e4>

0000d608 <__divdf3>:
    d608:	defff204 	addi	sp,sp,-56
    d60c:	dd400915 	stw	r21,36(sp)
    d610:	282ad53a 	srli	r21,r5,20
    d614:	dd000815 	stw	r20,32(sp)
    d618:	2828d7fa 	srli	r20,r5,31
    d61c:	dc000415 	stw	r16,16(sp)
    d620:	04000434 	movhi	r16,16
    d624:	df000c15 	stw	fp,48(sp)
    d628:	843fffc4 	addi	r16,r16,-1
    d62c:	dfc00d15 	stw	ra,52(sp)
    d630:	ddc00b15 	stw	r23,44(sp)
    d634:	dd800a15 	stw	r22,40(sp)
    d638:	dcc00715 	stw	r19,28(sp)
    d63c:	dc800615 	stw	r18,24(sp)
    d640:	dc400515 	stw	r17,20(sp)
    d644:	ad41ffcc 	andi	r21,r21,2047
    d648:	2c20703a 	and	r16,r5,r16
    d64c:	a7003fcc 	andi	fp,r20,255
    d650:	a8006126 	beq	r21,zero,d7d8 <__divdf3+0x1d0>
    d654:	0081ffc4 	movi	r2,2047
    d658:	2025883a 	mov	r18,r4
    d65c:	a8803726 	beq	r21,r2,d73c <__divdf3+0x134>
    d660:	80800434 	orhi	r2,r16,16
    d664:	100490fa 	slli	r2,r2,3
    d668:	2020d77a 	srli	r16,r4,29
    d66c:	202490fa 	slli	r18,r4,3
    d670:	ad7f0044 	addi	r21,r21,-1023
    d674:	80a0b03a 	or	r16,r16,r2
    d678:	0027883a 	mov	r19,zero
    d67c:	0013883a 	mov	r9,zero
    d680:	3804d53a 	srli	r2,r7,20
    d684:	382cd7fa 	srli	r22,r7,31
    d688:	04400434 	movhi	r17,16
    d68c:	8c7fffc4 	addi	r17,r17,-1
    d690:	1081ffcc 	andi	r2,r2,2047
    d694:	3011883a 	mov	r8,r6
    d698:	3c62703a 	and	r17,r7,r17
    d69c:	b5c03fcc 	andi	r23,r22,255
    d6a0:	10006c26 	beq	r2,zero,d854 <__divdf3+0x24c>
    d6a4:	00c1ffc4 	movi	r3,2047
    d6a8:	10c06426 	beq	r2,r3,d83c <__divdf3+0x234>
    d6ac:	88c00434 	orhi	r3,r17,16
    d6b0:	180690fa 	slli	r3,r3,3
    d6b4:	3022d77a 	srli	r17,r6,29
    d6b8:	301090fa 	slli	r8,r6,3
    d6bc:	10bf0044 	addi	r2,r2,-1023
    d6c0:	88e2b03a 	or	r17,r17,r3
    d6c4:	000f883a 	mov	r7,zero
    d6c8:	a58cf03a 	xor	r6,r20,r22
    d6cc:	3cc8b03a 	or	r4,r7,r19
    d6d0:	a8abc83a 	sub	r21,r21,r2
    d6d4:	008003c4 	movi	r2,15
    d6d8:	3007883a 	mov	r3,r6
    d6dc:	34c03fcc 	andi	r19,r6,255
    d6e0:	11009036 	bltu	r2,r4,d924 <__divdf3+0x31c>
    d6e4:	200890ba 	slli	r4,r4,2
    d6e8:	00800074 	movhi	r2,1
    d6ec:	10b5bf04 	addi	r2,r2,-10500
    d6f0:	2089883a 	add	r4,r4,r2
    d6f4:	20800017 	ldw	r2,0(r4)
    d6f8:	1000683a 	jmp	r2
    d6fc:	0000d924 	muli	zero,zero,868
    d700:	0000d774 	movhi	zero,861
    d704:	0000d914 	movui	zero,868
    d708:	0000d768 	cmpgeui	zero,zero,861
    d70c:	0000d914 	movui	zero,868
    d710:	0000d8e8 	cmpgeui	zero,zero,867
    d714:	0000d914 	movui	zero,868
    d718:	0000d768 	cmpgeui	zero,zero,861
    d71c:	0000d774 	movhi	zero,861
    d720:	0000d774 	movhi	zero,861
    d724:	0000d8e8 	cmpgeui	zero,zero,867
    d728:	0000d768 	cmpgeui	zero,zero,861
    d72c:	0000d758 	cmpnei	zero,zero,861
    d730:	0000d758 	cmpnei	zero,zero,861
    d734:	0000d758 	cmpnei	zero,zero,861
    d738:	0000dc08 	cmpgei	zero,zero,880
    d73c:	2404b03a 	or	r2,r4,r16
    d740:	1000661e 	bne	r2,zero,d8dc <__divdf3+0x2d4>
    d744:	04c00204 	movi	r19,8
    d748:	0021883a 	mov	r16,zero
    d74c:	0025883a 	mov	r18,zero
    d750:	02400084 	movi	r9,2
    d754:	003fca06 	br	d680 <__alt_data_end+0xff00d680>
    d758:	8023883a 	mov	r17,r16
    d75c:	9011883a 	mov	r8,r18
    d760:	e02f883a 	mov	r23,fp
    d764:	480f883a 	mov	r7,r9
    d768:	00800084 	movi	r2,2
    d76c:	3881311e 	bne	r7,r2,dc34 <__divdf3+0x62c>
    d770:	b827883a 	mov	r19,r23
    d774:	98c0004c 	andi	r3,r19,1
    d778:	0081ffc4 	movi	r2,2047
    d77c:	000b883a 	mov	r5,zero
    d780:	0025883a 	mov	r18,zero
    d784:	1004953a 	slli	r2,r2,20
    d788:	18c03fcc 	andi	r3,r3,255
    d78c:	04400434 	movhi	r17,16
    d790:	8c7fffc4 	addi	r17,r17,-1
    d794:	180697fa 	slli	r3,r3,31
    d798:	2c4a703a 	and	r5,r5,r17
    d79c:	288ab03a 	or	r5,r5,r2
    d7a0:	28c6b03a 	or	r3,r5,r3
    d7a4:	9005883a 	mov	r2,r18
    d7a8:	dfc00d17 	ldw	ra,52(sp)
    d7ac:	df000c17 	ldw	fp,48(sp)
    d7b0:	ddc00b17 	ldw	r23,44(sp)
    d7b4:	dd800a17 	ldw	r22,40(sp)
    d7b8:	dd400917 	ldw	r21,36(sp)
    d7bc:	dd000817 	ldw	r20,32(sp)
    d7c0:	dcc00717 	ldw	r19,28(sp)
    d7c4:	dc800617 	ldw	r18,24(sp)
    d7c8:	dc400517 	ldw	r17,20(sp)
    d7cc:	dc000417 	ldw	r16,16(sp)
    d7d0:	dec00e04 	addi	sp,sp,56
    d7d4:	f800283a 	ret
    d7d8:	2404b03a 	or	r2,r4,r16
    d7dc:	2027883a 	mov	r19,r4
    d7e0:	10003926 	beq	r2,zero,d8c8 <__divdf3+0x2c0>
    d7e4:	80012e26 	beq	r16,zero,dca0 <__divdf3+0x698>
    d7e8:	8009883a 	mov	r4,r16
    d7ec:	d9800315 	stw	r6,12(sp)
    d7f0:	d9c00215 	stw	r7,8(sp)
    d7f4:	000f3600 	call	f360 <__clzsi2>
    d7f8:	d9800317 	ldw	r6,12(sp)
    d7fc:	d9c00217 	ldw	r7,8(sp)
    d800:	113ffd44 	addi	r4,r2,-11
    d804:	00c00704 	movi	r3,28
    d808:	19012116 	blt	r3,r4,dc90 <__divdf3+0x688>
    d80c:	00c00744 	movi	r3,29
    d810:	147ffe04 	addi	r17,r2,-8
    d814:	1907c83a 	sub	r3,r3,r4
    d818:	8460983a 	sll	r16,r16,r17
    d81c:	98c6d83a 	srl	r3,r19,r3
    d820:	9c64983a 	sll	r18,r19,r17
    d824:	1c20b03a 	or	r16,r3,r16
    d828:	1080fcc4 	addi	r2,r2,1011
    d82c:	00abc83a 	sub	r21,zero,r2
    d830:	0027883a 	mov	r19,zero
    d834:	0013883a 	mov	r9,zero
    d838:	003f9106 	br	d680 <__alt_data_end+0xff00d680>
    d83c:	3446b03a 	or	r3,r6,r17
    d840:	18001f1e 	bne	r3,zero,d8c0 <__divdf3+0x2b8>
    d844:	0023883a 	mov	r17,zero
    d848:	0011883a 	mov	r8,zero
    d84c:	01c00084 	movi	r7,2
    d850:	003f9d06 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d854:	3446b03a 	or	r3,r6,r17
    d858:	18001526 	beq	r3,zero,d8b0 <__divdf3+0x2a8>
    d85c:	88011b26 	beq	r17,zero,dccc <__divdf3+0x6c4>
    d860:	8809883a 	mov	r4,r17
    d864:	d9800315 	stw	r6,12(sp)
    d868:	da400115 	stw	r9,4(sp)
    d86c:	000f3600 	call	f360 <__clzsi2>
    d870:	d9800317 	ldw	r6,12(sp)
    d874:	da400117 	ldw	r9,4(sp)
    d878:	113ffd44 	addi	r4,r2,-11
    d87c:	00c00704 	movi	r3,28
    d880:	19010e16 	blt	r3,r4,dcbc <__divdf3+0x6b4>
    d884:	00c00744 	movi	r3,29
    d888:	123ffe04 	addi	r8,r2,-8
    d88c:	1907c83a 	sub	r3,r3,r4
    d890:	8a22983a 	sll	r17,r17,r8
    d894:	30c6d83a 	srl	r3,r6,r3
    d898:	3210983a 	sll	r8,r6,r8
    d89c:	1c62b03a 	or	r17,r3,r17
    d8a0:	1080fcc4 	addi	r2,r2,1011
    d8a4:	0085c83a 	sub	r2,zero,r2
    d8a8:	000f883a 	mov	r7,zero
    d8ac:	003f8606 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d8b0:	0023883a 	mov	r17,zero
    d8b4:	0011883a 	mov	r8,zero
    d8b8:	01c00044 	movi	r7,1
    d8bc:	003f8206 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d8c0:	01c000c4 	movi	r7,3
    d8c4:	003f8006 	br	d6c8 <__alt_data_end+0xff00d6c8>
    d8c8:	04c00104 	movi	r19,4
    d8cc:	0021883a 	mov	r16,zero
    d8d0:	0025883a 	mov	r18,zero
    d8d4:	02400044 	movi	r9,1
    d8d8:	003f6906 	br	d680 <__alt_data_end+0xff00d680>
    d8dc:	04c00304 	movi	r19,12
    d8e0:	024000c4 	movi	r9,3
    d8e4:	003f6606 	br	d680 <__alt_data_end+0xff00d680>
    d8e8:	01400434 	movhi	r5,16
    d8ec:	0007883a 	mov	r3,zero
    d8f0:	297fffc4 	addi	r5,r5,-1
    d8f4:	04bfffc4 	movi	r18,-1
    d8f8:	0081ffc4 	movi	r2,2047
    d8fc:	003fa106 	br	d784 <__alt_data_end+0xff00d784>
    d900:	00c00044 	movi	r3,1
    d904:	1887c83a 	sub	r3,r3,r2
    d908:	01000e04 	movi	r4,56
    d90c:	20c1210e 	bge	r4,r3,dd94 <__divdf3+0x78c>
    d910:	98c0004c 	andi	r3,r19,1
    d914:	0005883a 	mov	r2,zero
    d918:	000b883a 	mov	r5,zero
    d91c:	0025883a 	mov	r18,zero
    d920:	003f9806 	br	d784 <__alt_data_end+0xff00d784>
    d924:	8c00fd36 	bltu	r17,r16,dd1c <__divdf3+0x714>
    d928:	8440fb26 	beq	r16,r17,dd18 <__divdf3+0x710>
    d92c:	8007883a 	mov	r3,r16
    d930:	ad7fffc4 	addi	r21,r21,-1
    d934:	0021883a 	mov	r16,zero
    d938:	4004d63a 	srli	r2,r8,24
    d93c:	8822923a 	slli	r17,r17,8
    d940:	1809883a 	mov	r4,r3
    d944:	402c923a 	slli	r22,r8,8
    d948:	88b8b03a 	or	fp,r17,r2
    d94c:	e028d43a 	srli	r20,fp,16
    d950:	d8c00015 	stw	r3,0(sp)
    d954:	e5ffffcc 	andi	r23,fp,65535
    d958:	a00b883a 	mov	r5,r20
    d95c:	0002b740 	call	2b74 <__udivsi3>
    d960:	d8c00017 	ldw	r3,0(sp)
    d964:	a00b883a 	mov	r5,r20
    d968:	d8800315 	stw	r2,12(sp)
    d96c:	1809883a 	mov	r4,r3
    d970:	0002bd80 	call	2bd8 <__umodsi3>
    d974:	d9800317 	ldw	r6,12(sp)
    d978:	1006943a 	slli	r3,r2,16
    d97c:	9004d43a 	srli	r2,r18,16
    d980:	b9a3383a 	mul	r17,r23,r6
    d984:	10c4b03a 	or	r2,r2,r3
    d988:	1440062e 	bgeu	r2,r17,d9a4 <__divdf3+0x39c>
    d98c:	1705883a 	add	r2,r2,fp
    d990:	30ffffc4 	addi	r3,r6,-1
    d994:	1700ee36 	bltu	r2,fp,dd50 <__divdf3+0x748>
    d998:	1440ed2e 	bgeu	r2,r17,dd50 <__divdf3+0x748>
    d99c:	31bfff84 	addi	r6,r6,-2
    d9a0:	1705883a 	add	r2,r2,fp
    d9a4:	1463c83a 	sub	r17,r2,r17
    d9a8:	a00b883a 	mov	r5,r20
    d9ac:	8809883a 	mov	r4,r17
    d9b0:	d9800315 	stw	r6,12(sp)
    d9b4:	0002b740 	call	2b74 <__udivsi3>
    d9b8:	a00b883a 	mov	r5,r20
    d9bc:	8809883a 	mov	r4,r17
    d9c0:	d8800215 	stw	r2,8(sp)
    d9c4:	0002bd80 	call	2bd8 <__umodsi3>
    d9c8:	d9c00217 	ldw	r7,8(sp)
    d9cc:	1004943a 	slli	r2,r2,16
    d9d0:	94bfffcc 	andi	r18,r18,65535
    d9d4:	b9d1383a 	mul	r8,r23,r7
    d9d8:	90a4b03a 	or	r18,r18,r2
    d9dc:	d9800317 	ldw	r6,12(sp)
    d9e0:	9200062e 	bgeu	r18,r8,d9fc <__divdf3+0x3f4>
    d9e4:	9725883a 	add	r18,r18,fp
    d9e8:	38bfffc4 	addi	r2,r7,-1
    d9ec:	9700d636 	bltu	r18,fp,dd48 <__divdf3+0x740>
    d9f0:	9200d52e 	bgeu	r18,r8,dd48 <__divdf3+0x740>
    d9f4:	39ffff84 	addi	r7,r7,-2
    d9f8:	9725883a 	add	r18,r18,fp
    d9fc:	3004943a 	slli	r2,r6,16
    da00:	b012d43a 	srli	r9,r22,16
    da04:	b1bfffcc 	andi	r6,r22,65535
    da08:	11e2b03a 	or	r17,r2,r7
    da0c:	8806d43a 	srli	r3,r17,16
    da10:	893fffcc 	andi	r4,r17,65535
    da14:	218b383a 	mul	r5,r4,r6
    da18:	30c5383a 	mul	r2,r6,r3
    da1c:	2249383a 	mul	r4,r4,r9
    da20:	280ed43a 	srli	r7,r5,16
    da24:	9225c83a 	sub	r18,r18,r8
    da28:	2089883a 	add	r4,r4,r2
    da2c:	3909883a 	add	r4,r7,r4
    da30:	1a47383a 	mul	r3,r3,r9
    da34:	2080022e 	bgeu	r4,r2,da40 <__divdf3+0x438>
    da38:	00800074 	movhi	r2,1
    da3c:	1887883a 	add	r3,r3,r2
    da40:	2004d43a 	srli	r2,r4,16
    da44:	2008943a 	slli	r4,r4,16
    da48:	297fffcc 	andi	r5,r5,65535
    da4c:	10c7883a 	add	r3,r2,r3
    da50:	2149883a 	add	r4,r4,r5
    da54:	90c0a536 	bltu	r18,r3,dcec <__divdf3+0x6e4>
    da58:	90c0bf26 	beq	r18,r3,dd58 <__divdf3+0x750>
    da5c:	90c7c83a 	sub	r3,r18,r3
    da60:	810fc83a 	sub	r7,r16,r4
    da64:	81e5803a 	cmpltu	r18,r16,r7
    da68:	1ca5c83a 	sub	r18,r3,r18
    da6c:	e480c126 	beq	fp,r18,dd74 <__divdf3+0x76c>
    da70:	a00b883a 	mov	r5,r20
    da74:	9009883a 	mov	r4,r18
    da78:	d9800315 	stw	r6,12(sp)
    da7c:	d9c00215 	stw	r7,8(sp)
    da80:	da400115 	stw	r9,4(sp)
    da84:	0002b740 	call	2b74 <__udivsi3>
    da88:	a00b883a 	mov	r5,r20
    da8c:	9009883a 	mov	r4,r18
    da90:	d8800015 	stw	r2,0(sp)
    da94:	0002bd80 	call	2bd8 <__umodsi3>
    da98:	d9c00217 	ldw	r7,8(sp)
    da9c:	da000017 	ldw	r8,0(sp)
    daa0:	1006943a 	slli	r3,r2,16
    daa4:	3804d43a 	srli	r2,r7,16
    daa8:	ba21383a 	mul	r16,r23,r8
    daac:	d9800317 	ldw	r6,12(sp)
    dab0:	10c4b03a 	or	r2,r2,r3
    dab4:	da400117 	ldw	r9,4(sp)
    dab8:	1400062e 	bgeu	r2,r16,dad4 <__divdf3+0x4cc>
    dabc:	1705883a 	add	r2,r2,fp
    dac0:	40ffffc4 	addi	r3,r8,-1
    dac4:	1700ad36 	bltu	r2,fp,dd7c <__divdf3+0x774>
    dac8:	1400ac2e 	bgeu	r2,r16,dd7c <__divdf3+0x774>
    dacc:	423fff84 	addi	r8,r8,-2
    dad0:	1705883a 	add	r2,r2,fp
    dad4:	1421c83a 	sub	r16,r2,r16
    dad8:	a00b883a 	mov	r5,r20
    dadc:	8009883a 	mov	r4,r16
    dae0:	d9800315 	stw	r6,12(sp)
    dae4:	d9c00215 	stw	r7,8(sp)
    dae8:	da000015 	stw	r8,0(sp)
    daec:	da400115 	stw	r9,4(sp)
    daf0:	0002b740 	call	2b74 <__udivsi3>
    daf4:	8009883a 	mov	r4,r16
    daf8:	a00b883a 	mov	r5,r20
    dafc:	1025883a 	mov	r18,r2
    db00:	0002bd80 	call	2bd8 <__umodsi3>
    db04:	d9c00217 	ldw	r7,8(sp)
    db08:	1004943a 	slli	r2,r2,16
    db0c:	bcaf383a 	mul	r23,r23,r18
    db10:	393fffcc 	andi	r4,r7,65535
    db14:	2088b03a 	or	r4,r4,r2
    db18:	d9800317 	ldw	r6,12(sp)
    db1c:	da000017 	ldw	r8,0(sp)
    db20:	da400117 	ldw	r9,4(sp)
    db24:	25c0062e 	bgeu	r4,r23,db40 <__divdf3+0x538>
    db28:	2709883a 	add	r4,r4,fp
    db2c:	90bfffc4 	addi	r2,r18,-1
    db30:	27009436 	bltu	r4,fp,dd84 <__divdf3+0x77c>
    db34:	25c0932e 	bgeu	r4,r23,dd84 <__divdf3+0x77c>
    db38:	94bfff84 	addi	r18,r18,-2
    db3c:	2709883a 	add	r4,r4,fp
    db40:	4004943a 	slli	r2,r8,16
    db44:	25efc83a 	sub	r23,r4,r23
    db48:	1490b03a 	or	r8,r2,r18
    db4c:	4008d43a 	srli	r4,r8,16
    db50:	40ffffcc 	andi	r3,r8,65535
    db54:	30c5383a 	mul	r2,r6,r3
    db58:	1a47383a 	mul	r3,r3,r9
    db5c:	310d383a 	mul	r6,r6,r4
    db60:	100ad43a 	srli	r5,r2,16
    db64:	4913383a 	mul	r9,r9,r4
    db68:	1987883a 	add	r3,r3,r6
    db6c:	28c7883a 	add	r3,r5,r3
    db70:	1980022e 	bgeu	r3,r6,db7c <__divdf3+0x574>
    db74:	01000074 	movhi	r4,1
    db78:	4913883a 	add	r9,r9,r4
    db7c:	1808d43a 	srli	r4,r3,16
    db80:	1806943a 	slli	r3,r3,16
    db84:	10bfffcc 	andi	r2,r2,65535
    db88:	2253883a 	add	r9,r4,r9
    db8c:	1887883a 	add	r3,r3,r2
    db90:	ba403836 	bltu	r23,r9,dc74 <__divdf3+0x66c>
    db94:	ba403626 	beq	r23,r9,dc70 <__divdf3+0x668>
    db98:	42000054 	ori	r8,r8,1
    db9c:	a880ffc4 	addi	r2,r21,1023
    dba0:	00bf570e 	bge	zero,r2,d900 <__alt_data_end+0xff00d900>
    dba4:	40c001cc 	andi	r3,r8,7
    dba8:	18000726 	beq	r3,zero,dbc8 <__divdf3+0x5c0>
    dbac:	40c003cc 	andi	r3,r8,15
    dbb0:	01000104 	movi	r4,4
    dbb4:	19000426 	beq	r3,r4,dbc8 <__divdf3+0x5c0>
    dbb8:	4107883a 	add	r3,r8,r4
    dbbc:	1a11803a 	cmpltu	r8,r3,r8
    dbc0:	8a23883a 	add	r17,r17,r8
    dbc4:	1811883a 	mov	r8,r3
    dbc8:	88c0402c 	andhi	r3,r17,256
    dbcc:	18000426 	beq	r3,zero,dbe0 <__divdf3+0x5d8>
    dbd0:	00ffc034 	movhi	r3,65280
    dbd4:	18ffffc4 	addi	r3,r3,-1
    dbd8:	a8810004 	addi	r2,r21,1024
    dbdc:	88e2703a 	and	r17,r17,r3
    dbe0:	00c1ff84 	movi	r3,2046
    dbe4:	18bee316 	blt	r3,r2,d774 <__alt_data_end+0xff00d774>
    dbe8:	8824977a 	slli	r18,r17,29
    dbec:	4010d0fa 	srli	r8,r8,3
    dbf0:	8822927a 	slli	r17,r17,9
    dbf4:	1081ffcc 	andi	r2,r2,2047
    dbf8:	9224b03a 	or	r18,r18,r8
    dbfc:	880ad33a 	srli	r5,r17,12
    dc00:	98c0004c 	andi	r3,r19,1
    dc04:	003edf06 	br	d784 <__alt_data_end+0xff00d784>
    dc08:	8080022c 	andhi	r2,r16,8
    dc0c:	10001226 	beq	r2,zero,dc58 <__divdf3+0x650>
    dc10:	8880022c 	andhi	r2,r17,8
    dc14:	1000101e 	bne	r2,zero,dc58 <__divdf3+0x650>
    dc18:	00800434 	movhi	r2,16
    dc1c:	89400234 	orhi	r5,r17,8
    dc20:	10bfffc4 	addi	r2,r2,-1
    dc24:	b007883a 	mov	r3,r22
    dc28:	288a703a 	and	r5,r5,r2
    dc2c:	4025883a 	mov	r18,r8
    dc30:	003f3106 	br	d8f8 <__alt_data_end+0xff00d8f8>
    dc34:	008000c4 	movi	r2,3
    dc38:	3880a626 	beq	r7,r2,ded4 <__divdf3+0x8cc>
    dc3c:	00800044 	movi	r2,1
    dc40:	3880521e 	bne	r7,r2,dd8c <__divdf3+0x784>
    dc44:	b807883a 	mov	r3,r23
    dc48:	0005883a 	mov	r2,zero
    dc4c:	000b883a 	mov	r5,zero
    dc50:	0025883a 	mov	r18,zero
    dc54:	003ecb06 	br	d784 <__alt_data_end+0xff00d784>
    dc58:	00800434 	movhi	r2,16
    dc5c:	81400234 	orhi	r5,r16,8
    dc60:	10bfffc4 	addi	r2,r2,-1
    dc64:	a007883a 	mov	r3,r20
    dc68:	288a703a 	and	r5,r5,r2
    dc6c:	003f2206 	br	d8f8 <__alt_data_end+0xff00d8f8>
    dc70:	183fca26 	beq	r3,zero,db9c <__alt_data_end+0xff00db9c>
    dc74:	e5ef883a 	add	r23,fp,r23
    dc78:	40bfffc4 	addi	r2,r8,-1
    dc7c:	bf00392e 	bgeu	r23,fp,dd64 <__divdf3+0x75c>
    dc80:	1011883a 	mov	r8,r2
    dc84:	ba7fc41e 	bne	r23,r9,db98 <__alt_data_end+0xff00db98>
    dc88:	b0ffc31e 	bne	r22,r3,db98 <__alt_data_end+0xff00db98>
    dc8c:	003fc306 	br	db9c <__alt_data_end+0xff00db9c>
    dc90:	143ff604 	addi	r16,r2,-40
    dc94:	9c20983a 	sll	r16,r19,r16
    dc98:	0025883a 	mov	r18,zero
    dc9c:	003ee206 	br	d828 <__alt_data_end+0xff00d828>
    dca0:	d9800315 	stw	r6,12(sp)
    dca4:	d9c00215 	stw	r7,8(sp)
    dca8:	000f3600 	call	f360 <__clzsi2>
    dcac:	10800804 	addi	r2,r2,32
    dcb0:	d9c00217 	ldw	r7,8(sp)
    dcb4:	d9800317 	ldw	r6,12(sp)
    dcb8:	003ed106 	br	d800 <__alt_data_end+0xff00d800>
    dcbc:	147ff604 	addi	r17,r2,-40
    dcc0:	3462983a 	sll	r17,r6,r17
    dcc4:	0011883a 	mov	r8,zero
    dcc8:	003ef506 	br	d8a0 <__alt_data_end+0xff00d8a0>
    dccc:	3009883a 	mov	r4,r6
    dcd0:	d9800315 	stw	r6,12(sp)
    dcd4:	da400115 	stw	r9,4(sp)
    dcd8:	000f3600 	call	f360 <__clzsi2>
    dcdc:	10800804 	addi	r2,r2,32
    dce0:	da400117 	ldw	r9,4(sp)
    dce4:	d9800317 	ldw	r6,12(sp)
    dce8:	003ee306 	br	d878 <__alt_data_end+0xff00d878>
    dcec:	85a1883a 	add	r16,r16,r22
    dcf0:	8585803a 	cmpltu	r2,r16,r22
    dcf4:	1705883a 	add	r2,r2,fp
    dcf8:	14a5883a 	add	r18,r2,r18
    dcfc:	88bfffc4 	addi	r2,r17,-1
    dd00:	e4800c2e 	bgeu	fp,r18,dd34 <__divdf3+0x72c>
    dd04:	90c03e36 	bltu	r18,r3,de00 <__divdf3+0x7f8>
    dd08:	1c806926 	beq	r3,r18,deb0 <__divdf3+0x8a8>
    dd0c:	90c7c83a 	sub	r3,r18,r3
    dd10:	1023883a 	mov	r17,r2
    dd14:	003f5206 	br	da60 <__alt_data_end+0xff00da60>
    dd18:	923f0436 	bltu	r18,r8,d92c <__alt_data_end+0xff00d92c>
    dd1c:	800897fa 	slli	r4,r16,31
    dd20:	9004d07a 	srli	r2,r18,1
    dd24:	8006d07a 	srli	r3,r16,1
    dd28:	902097fa 	slli	r16,r18,31
    dd2c:	20a4b03a 	or	r18,r4,r2
    dd30:	003f0106 	br	d938 <__alt_data_end+0xff00d938>
    dd34:	e4bff51e 	bne	fp,r18,dd0c <__alt_data_end+0xff00dd0c>
    dd38:	85bff22e 	bgeu	r16,r22,dd04 <__alt_data_end+0xff00dd04>
    dd3c:	e0c7c83a 	sub	r3,fp,r3
    dd40:	1023883a 	mov	r17,r2
    dd44:	003f4606 	br	da60 <__alt_data_end+0xff00da60>
    dd48:	100f883a 	mov	r7,r2
    dd4c:	003f2b06 	br	d9fc <__alt_data_end+0xff00d9fc>
    dd50:	180d883a 	mov	r6,r3
    dd54:	003f1306 	br	d9a4 <__alt_data_end+0xff00d9a4>
    dd58:	813fe436 	bltu	r16,r4,dcec <__alt_data_end+0xff00dcec>
    dd5c:	0007883a 	mov	r3,zero
    dd60:	003f3f06 	br	da60 <__alt_data_end+0xff00da60>
    dd64:	ba402c36 	bltu	r23,r9,de18 <__divdf3+0x810>
    dd68:	4dc05426 	beq	r9,r23,debc <__divdf3+0x8b4>
    dd6c:	1011883a 	mov	r8,r2
    dd70:	003f8906 	br	db98 <__alt_data_end+0xff00db98>
    dd74:	023fffc4 	movi	r8,-1
    dd78:	003f8806 	br	db9c <__alt_data_end+0xff00db9c>
    dd7c:	1811883a 	mov	r8,r3
    dd80:	003f5406 	br	dad4 <__alt_data_end+0xff00dad4>
    dd84:	1025883a 	mov	r18,r2
    dd88:	003f6d06 	br	db40 <__alt_data_end+0xff00db40>
    dd8c:	b827883a 	mov	r19,r23
    dd90:	003f8206 	br	db9c <__alt_data_end+0xff00db9c>
    dd94:	010007c4 	movi	r4,31
    dd98:	20c02616 	blt	r4,r3,de34 <__divdf3+0x82c>
    dd9c:	00800804 	movi	r2,32
    dda0:	10c5c83a 	sub	r2,r2,r3
    dda4:	888a983a 	sll	r5,r17,r2
    dda8:	40c8d83a 	srl	r4,r8,r3
    ddac:	4084983a 	sll	r2,r8,r2
    ddb0:	88e2d83a 	srl	r17,r17,r3
    ddb4:	2906b03a 	or	r3,r5,r4
    ddb8:	1004c03a 	cmpne	r2,r2,zero
    ddbc:	1886b03a 	or	r3,r3,r2
    ddc0:	188001cc 	andi	r2,r3,7
    ddc4:	10000726 	beq	r2,zero,dde4 <__divdf3+0x7dc>
    ddc8:	188003cc 	andi	r2,r3,15
    ddcc:	01000104 	movi	r4,4
    ddd0:	11000426 	beq	r2,r4,dde4 <__divdf3+0x7dc>
    ddd4:	1805883a 	mov	r2,r3
    ddd8:	10c00104 	addi	r3,r2,4
    dddc:	1885803a 	cmpltu	r2,r3,r2
    dde0:	88a3883a 	add	r17,r17,r2
    dde4:	8880202c 	andhi	r2,r17,128
    dde8:	10002726 	beq	r2,zero,de88 <__divdf3+0x880>
    ddec:	98c0004c 	andi	r3,r19,1
    ddf0:	00800044 	movi	r2,1
    ddf4:	000b883a 	mov	r5,zero
    ddf8:	0025883a 	mov	r18,zero
    ddfc:	003e6106 	br	d784 <__alt_data_end+0xff00d784>
    de00:	85a1883a 	add	r16,r16,r22
    de04:	8585803a 	cmpltu	r2,r16,r22
    de08:	1705883a 	add	r2,r2,fp
    de0c:	14a5883a 	add	r18,r2,r18
    de10:	8c7fff84 	addi	r17,r17,-2
    de14:	003f1106 	br	da5c <__alt_data_end+0xff00da5c>
    de18:	b589883a 	add	r4,r22,r22
    de1c:	25ad803a 	cmpltu	r22,r4,r22
    de20:	b739883a 	add	fp,r22,fp
    de24:	40bfff84 	addi	r2,r8,-2
    de28:	bf2f883a 	add	r23,r23,fp
    de2c:	202d883a 	mov	r22,r4
    de30:	003f9306 	br	dc80 <__alt_data_end+0xff00dc80>
    de34:	013ff844 	movi	r4,-31
    de38:	2085c83a 	sub	r2,r4,r2
    de3c:	8888d83a 	srl	r4,r17,r2
    de40:	00800804 	movi	r2,32
    de44:	18802126 	beq	r3,r2,decc <__divdf3+0x8c4>
    de48:	00801004 	movi	r2,64
    de4c:	10c5c83a 	sub	r2,r2,r3
    de50:	8884983a 	sll	r2,r17,r2
    de54:	1204b03a 	or	r2,r2,r8
    de58:	1004c03a 	cmpne	r2,r2,zero
    de5c:	2084b03a 	or	r2,r4,r2
    de60:	144001cc 	andi	r17,r2,7
    de64:	88000d1e 	bne	r17,zero,de9c <__divdf3+0x894>
    de68:	000b883a 	mov	r5,zero
    de6c:	1024d0fa 	srli	r18,r2,3
    de70:	98c0004c 	andi	r3,r19,1
    de74:	0005883a 	mov	r2,zero
    de78:	9464b03a 	or	r18,r18,r17
    de7c:	003e4106 	br	d784 <__alt_data_end+0xff00d784>
    de80:	1007883a 	mov	r3,r2
    de84:	0023883a 	mov	r17,zero
    de88:	880a927a 	slli	r5,r17,9
    de8c:	1805883a 	mov	r2,r3
    de90:	8822977a 	slli	r17,r17,29
    de94:	280ad33a 	srli	r5,r5,12
    de98:	003ff406 	br	de6c <__alt_data_end+0xff00de6c>
    de9c:	10c003cc 	andi	r3,r2,15
    dea0:	01000104 	movi	r4,4
    dea4:	193ff626 	beq	r3,r4,de80 <__alt_data_end+0xff00de80>
    dea8:	0023883a 	mov	r17,zero
    deac:	003fca06 	br	ddd8 <__alt_data_end+0xff00ddd8>
    deb0:	813fd336 	bltu	r16,r4,de00 <__alt_data_end+0xff00de00>
    deb4:	1023883a 	mov	r17,r2
    deb8:	003fa806 	br	dd5c <__alt_data_end+0xff00dd5c>
    debc:	b0ffd636 	bltu	r22,r3,de18 <__alt_data_end+0xff00de18>
    dec0:	1011883a 	mov	r8,r2
    dec4:	b0ff341e 	bne	r22,r3,db98 <__alt_data_end+0xff00db98>
    dec8:	003f3406 	br	db9c <__alt_data_end+0xff00db9c>
    decc:	0005883a 	mov	r2,zero
    ded0:	003fe006 	br	de54 <__alt_data_end+0xff00de54>
    ded4:	00800434 	movhi	r2,16
    ded8:	89400234 	orhi	r5,r17,8
    dedc:	10bfffc4 	addi	r2,r2,-1
    dee0:	b807883a 	mov	r3,r23
    dee4:	288a703a 	and	r5,r5,r2
    dee8:	4025883a 	mov	r18,r8
    deec:	003e8206 	br	d8f8 <__alt_data_end+0xff00d8f8>

0000def0 <__eqdf2>:
    def0:	2804d53a 	srli	r2,r5,20
    def4:	3806d53a 	srli	r3,r7,20
    def8:	02000434 	movhi	r8,16
    defc:	423fffc4 	addi	r8,r8,-1
    df00:	1081ffcc 	andi	r2,r2,2047
    df04:	0281ffc4 	movi	r10,2047
    df08:	2a12703a 	and	r9,r5,r8
    df0c:	18c1ffcc 	andi	r3,r3,2047
    df10:	3a10703a 	and	r8,r7,r8
    df14:	280ad7fa 	srli	r5,r5,31
    df18:	380ed7fa 	srli	r7,r7,31
    df1c:	12801026 	beq	r2,r10,df60 <__eqdf2+0x70>
    df20:	0281ffc4 	movi	r10,2047
    df24:	1a800a26 	beq	r3,r10,df50 <__eqdf2+0x60>
    df28:	10c00226 	beq	r2,r3,df34 <__eqdf2+0x44>
    df2c:	00800044 	movi	r2,1
    df30:	f800283a 	ret
    df34:	4a3ffd1e 	bne	r9,r8,df2c <__alt_data_end+0xff00df2c>
    df38:	21bffc1e 	bne	r4,r6,df2c <__alt_data_end+0xff00df2c>
    df3c:	29c00c26 	beq	r5,r7,df70 <__eqdf2+0x80>
    df40:	103ffa1e 	bne	r2,zero,df2c <__alt_data_end+0xff00df2c>
    df44:	2244b03a 	or	r2,r4,r9
    df48:	1004c03a 	cmpne	r2,r2,zero
    df4c:	f800283a 	ret
    df50:	3214b03a 	or	r10,r6,r8
    df54:	503ff426 	beq	r10,zero,df28 <__alt_data_end+0xff00df28>
    df58:	00800044 	movi	r2,1
    df5c:	f800283a 	ret
    df60:	2254b03a 	or	r10,r4,r9
    df64:	503fee26 	beq	r10,zero,df20 <__alt_data_end+0xff00df20>
    df68:	00800044 	movi	r2,1
    df6c:	f800283a 	ret
    df70:	0005883a 	mov	r2,zero
    df74:	f800283a 	ret

0000df78 <__gedf2>:
    df78:	2804d53a 	srli	r2,r5,20
    df7c:	3806d53a 	srli	r3,r7,20
    df80:	02000434 	movhi	r8,16
    df84:	423fffc4 	addi	r8,r8,-1
    df88:	1081ffcc 	andi	r2,r2,2047
    df8c:	0241ffc4 	movi	r9,2047
    df90:	2a14703a 	and	r10,r5,r8
    df94:	18c1ffcc 	andi	r3,r3,2047
    df98:	3a10703a 	and	r8,r7,r8
    df9c:	280ad7fa 	srli	r5,r5,31
    dfa0:	380ed7fa 	srli	r7,r7,31
    dfa4:	12401d26 	beq	r2,r9,e01c <__gedf2+0xa4>
    dfa8:	0241ffc4 	movi	r9,2047
    dfac:	1a401226 	beq	r3,r9,dff8 <__gedf2+0x80>
    dfb0:	1000081e 	bne	r2,zero,dfd4 <__gedf2+0x5c>
    dfb4:	2296b03a 	or	r11,r4,r10
    dfb8:	5813003a 	cmpeq	r9,r11,zero
    dfbc:	1800091e 	bne	r3,zero,dfe4 <__gedf2+0x6c>
    dfc0:	3218b03a 	or	r12,r6,r8
    dfc4:	6000071e 	bne	r12,zero,dfe4 <__gedf2+0x6c>
    dfc8:	0005883a 	mov	r2,zero
    dfcc:	5800101e 	bne	r11,zero,e010 <__gedf2+0x98>
    dfd0:	f800283a 	ret
    dfd4:	18000c1e 	bne	r3,zero,e008 <__gedf2+0x90>
    dfd8:	3212b03a 	or	r9,r6,r8
    dfdc:	48000c26 	beq	r9,zero,e010 <__gedf2+0x98>
    dfe0:	0013883a 	mov	r9,zero
    dfe4:	39c03fcc 	andi	r7,r7,255
    dfe8:	48000826 	beq	r9,zero,e00c <__gedf2+0x94>
    dfec:	38000926 	beq	r7,zero,e014 <__gedf2+0x9c>
    dff0:	00800044 	movi	r2,1
    dff4:	f800283a 	ret
    dff8:	3212b03a 	or	r9,r6,r8
    dffc:	483fec26 	beq	r9,zero,dfb0 <__alt_data_end+0xff00dfb0>
    e000:	00bfff84 	movi	r2,-2
    e004:	f800283a 	ret
    e008:	39c03fcc 	andi	r7,r7,255
    e00c:	29c00626 	beq	r5,r7,e028 <__gedf2+0xb0>
    e010:	283ff726 	beq	r5,zero,dff0 <__alt_data_end+0xff00dff0>
    e014:	00bfffc4 	movi	r2,-1
    e018:	f800283a 	ret
    e01c:	2292b03a 	or	r9,r4,r10
    e020:	483fe126 	beq	r9,zero,dfa8 <__alt_data_end+0xff00dfa8>
    e024:	003ff606 	br	e000 <__alt_data_end+0xff00e000>
    e028:	18bff916 	blt	r3,r2,e010 <__alt_data_end+0xff00e010>
    e02c:	10c00316 	blt	r2,r3,e03c <__gedf2+0xc4>
    e030:	42bff736 	bltu	r8,r10,e010 <__alt_data_end+0xff00e010>
    e034:	52000326 	beq	r10,r8,e044 <__gedf2+0xcc>
    e038:	5200042e 	bgeu	r10,r8,e04c <__gedf2+0xd4>
    e03c:	283fec1e 	bne	r5,zero,dff0 <__alt_data_end+0xff00dff0>
    e040:	003ff406 	br	e014 <__alt_data_end+0xff00e014>
    e044:	313ff236 	bltu	r6,r4,e010 <__alt_data_end+0xff00e010>
    e048:	21bffc36 	bltu	r4,r6,e03c <__alt_data_end+0xff00e03c>
    e04c:	0005883a 	mov	r2,zero
    e050:	f800283a 	ret

0000e054 <__ledf2>:
    e054:	2804d53a 	srli	r2,r5,20
    e058:	3810d53a 	srli	r8,r7,20
    e05c:	00c00434 	movhi	r3,16
    e060:	18ffffc4 	addi	r3,r3,-1
    e064:	1081ffcc 	andi	r2,r2,2047
    e068:	0241ffc4 	movi	r9,2047
    e06c:	28d4703a 	and	r10,r5,r3
    e070:	4201ffcc 	andi	r8,r8,2047
    e074:	38c6703a 	and	r3,r7,r3
    e078:	280ad7fa 	srli	r5,r5,31
    e07c:	380ed7fa 	srli	r7,r7,31
    e080:	12401f26 	beq	r2,r9,e100 <__ledf2+0xac>
    e084:	0241ffc4 	movi	r9,2047
    e088:	42401426 	beq	r8,r9,e0dc <__ledf2+0x88>
    e08c:	1000091e 	bne	r2,zero,e0b4 <__ledf2+0x60>
    e090:	2296b03a 	or	r11,r4,r10
    e094:	5813003a 	cmpeq	r9,r11,zero
    e098:	29403fcc 	andi	r5,r5,255
    e09c:	40000a1e 	bne	r8,zero,e0c8 <__ledf2+0x74>
    e0a0:	30d8b03a 	or	r12,r6,r3
    e0a4:	6000081e 	bne	r12,zero,e0c8 <__ledf2+0x74>
    e0a8:	0005883a 	mov	r2,zero
    e0ac:	5800111e 	bne	r11,zero,e0f4 <__ledf2+0xa0>
    e0b0:	f800283a 	ret
    e0b4:	29403fcc 	andi	r5,r5,255
    e0b8:	40000c1e 	bne	r8,zero,e0ec <__ledf2+0x98>
    e0bc:	30d2b03a 	or	r9,r6,r3
    e0c0:	48000c26 	beq	r9,zero,e0f4 <__ledf2+0xa0>
    e0c4:	0013883a 	mov	r9,zero
    e0c8:	39c03fcc 	andi	r7,r7,255
    e0cc:	48000826 	beq	r9,zero,e0f0 <__ledf2+0x9c>
    e0d0:	38001126 	beq	r7,zero,e118 <__ledf2+0xc4>
    e0d4:	00800044 	movi	r2,1
    e0d8:	f800283a 	ret
    e0dc:	30d2b03a 	or	r9,r6,r3
    e0e0:	483fea26 	beq	r9,zero,e08c <__alt_data_end+0xff00e08c>
    e0e4:	00800084 	movi	r2,2
    e0e8:	f800283a 	ret
    e0ec:	39c03fcc 	andi	r7,r7,255
    e0f0:	39400726 	beq	r7,r5,e110 <__ledf2+0xbc>
    e0f4:	2800081e 	bne	r5,zero,e118 <__ledf2+0xc4>
    e0f8:	00800044 	movi	r2,1
    e0fc:	f800283a 	ret
    e100:	2292b03a 	or	r9,r4,r10
    e104:	483fdf26 	beq	r9,zero,e084 <__alt_data_end+0xff00e084>
    e108:	00800084 	movi	r2,2
    e10c:	f800283a 	ret
    e110:	4080030e 	bge	r8,r2,e120 <__ledf2+0xcc>
    e114:	383fef26 	beq	r7,zero,e0d4 <__alt_data_end+0xff00e0d4>
    e118:	00bfffc4 	movi	r2,-1
    e11c:	f800283a 	ret
    e120:	123feb16 	blt	r2,r8,e0d0 <__alt_data_end+0xff00e0d0>
    e124:	1abff336 	bltu	r3,r10,e0f4 <__alt_data_end+0xff00e0f4>
    e128:	50c00326 	beq	r10,r3,e138 <__ledf2+0xe4>
    e12c:	50c0042e 	bgeu	r10,r3,e140 <__ledf2+0xec>
    e130:	283fe81e 	bne	r5,zero,e0d4 <__alt_data_end+0xff00e0d4>
    e134:	003ff806 	br	e118 <__alt_data_end+0xff00e118>
    e138:	313fee36 	bltu	r6,r4,e0f4 <__alt_data_end+0xff00e0f4>
    e13c:	21bffc36 	bltu	r4,r6,e130 <__alt_data_end+0xff00e130>
    e140:	0005883a 	mov	r2,zero
    e144:	f800283a 	ret

0000e148 <__muldf3>:
    e148:	defff304 	addi	sp,sp,-52
    e14c:	2804d53a 	srli	r2,r5,20
    e150:	dd800915 	stw	r22,36(sp)
    e154:	282cd7fa 	srli	r22,r5,31
    e158:	dc000315 	stw	r16,12(sp)
    e15c:	04000434 	movhi	r16,16
    e160:	dd400815 	stw	r21,32(sp)
    e164:	dc800515 	stw	r18,20(sp)
    e168:	843fffc4 	addi	r16,r16,-1
    e16c:	dfc00c15 	stw	ra,48(sp)
    e170:	df000b15 	stw	fp,44(sp)
    e174:	ddc00a15 	stw	r23,40(sp)
    e178:	dd000715 	stw	r20,28(sp)
    e17c:	dcc00615 	stw	r19,24(sp)
    e180:	dc400415 	stw	r17,16(sp)
    e184:	1481ffcc 	andi	r18,r2,2047
    e188:	2c20703a 	and	r16,r5,r16
    e18c:	b02b883a 	mov	r21,r22
    e190:	b2403fcc 	andi	r9,r22,255
    e194:	90006026 	beq	r18,zero,e318 <__muldf3+0x1d0>
    e198:	0081ffc4 	movi	r2,2047
    e19c:	2029883a 	mov	r20,r4
    e1a0:	90803626 	beq	r18,r2,e27c <__muldf3+0x134>
    e1a4:	80800434 	orhi	r2,r16,16
    e1a8:	100490fa 	slli	r2,r2,3
    e1ac:	2020d77a 	srli	r16,r4,29
    e1b0:	202890fa 	slli	r20,r4,3
    e1b4:	94bf0044 	addi	r18,r18,-1023
    e1b8:	80a0b03a 	or	r16,r16,r2
    e1bc:	0027883a 	mov	r19,zero
    e1c0:	0039883a 	mov	fp,zero
    e1c4:	3804d53a 	srli	r2,r7,20
    e1c8:	382ed7fa 	srli	r23,r7,31
    e1cc:	04400434 	movhi	r17,16
    e1d0:	8c7fffc4 	addi	r17,r17,-1
    e1d4:	1081ffcc 	andi	r2,r2,2047
    e1d8:	3011883a 	mov	r8,r6
    e1dc:	3c62703a 	and	r17,r7,r17
    e1e0:	ba803fcc 	andi	r10,r23,255
    e1e4:	10006d26 	beq	r2,zero,e39c <__muldf3+0x254>
    e1e8:	00c1ffc4 	movi	r3,2047
    e1ec:	10c06526 	beq	r2,r3,e384 <__muldf3+0x23c>
    e1f0:	88c00434 	orhi	r3,r17,16
    e1f4:	180690fa 	slli	r3,r3,3
    e1f8:	3022d77a 	srli	r17,r6,29
    e1fc:	301090fa 	slli	r8,r6,3
    e200:	10bf0044 	addi	r2,r2,-1023
    e204:	88e2b03a 	or	r17,r17,r3
    e208:	000b883a 	mov	r5,zero
    e20c:	9085883a 	add	r2,r18,r2
    e210:	2cc8b03a 	or	r4,r5,r19
    e214:	00c003c4 	movi	r3,15
    e218:	bdacf03a 	xor	r22,r23,r22
    e21c:	12c00044 	addi	r11,r2,1
    e220:	19009936 	bltu	r3,r4,e488 <__muldf3+0x340>
    e224:	200890ba 	slli	r4,r4,2
    e228:	00c00074 	movhi	r3,1
    e22c:	18f88f04 	addi	r3,r3,-7620
    e230:	20c9883a 	add	r4,r4,r3
    e234:	20c00017 	ldw	r3,0(r4)
    e238:	1800683a 	jmp	r3
    e23c:	0000e488 	cmpgei	zero,zero,914
    e240:	0000e29c 	xori	zero,zero,906
    e244:	0000e29c 	xori	zero,zero,906
    e248:	0000e298 	cmpnei	zero,zero,906
    e24c:	0000e464 	muli	zero,zero,913
    e250:	0000e464 	muli	zero,zero,913
    e254:	0000e44c 	andi	zero,zero,913
    e258:	0000e298 	cmpnei	zero,zero,906
    e25c:	0000e464 	muli	zero,zero,913
    e260:	0000e44c 	andi	zero,zero,913
    e264:	0000e464 	muli	zero,zero,913
    e268:	0000e298 	cmpnei	zero,zero,906
    e26c:	0000e474 	movhi	zero,913
    e270:	0000e474 	movhi	zero,913
    e274:	0000e474 	movhi	zero,913
    e278:	0000e690 	cmplti	zero,zero,922
    e27c:	2404b03a 	or	r2,r4,r16
    e280:	10006f1e 	bne	r2,zero,e440 <__muldf3+0x2f8>
    e284:	04c00204 	movi	r19,8
    e288:	0021883a 	mov	r16,zero
    e28c:	0029883a 	mov	r20,zero
    e290:	07000084 	movi	fp,2
    e294:	003fcb06 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e298:	502d883a 	mov	r22,r10
    e29c:	00800084 	movi	r2,2
    e2a0:	28805726 	beq	r5,r2,e400 <__muldf3+0x2b8>
    e2a4:	008000c4 	movi	r2,3
    e2a8:	28816626 	beq	r5,r2,e844 <__muldf3+0x6fc>
    e2ac:	00800044 	movi	r2,1
    e2b0:	2881411e 	bne	r5,r2,e7b8 <__muldf3+0x670>
    e2b4:	b02b883a 	mov	r21,r22
    e2b8:	0005883a 	mov	r2,zero
    e2bc:	000b883a 	mov	r5,zero
    e2c0:	0029883a 	mov	r20,zero
    e2c4:	1004953a 	slli	r2,r2,20
    e2c8:	a8c03fcc 	andi	r3,r21,255
    e2cc:	04400434 	movhi	r17,16
    e2d0:	8c7fffc4 	addi	r17,r17,-1
    e2d4:	180697fa 	slli	r3,r3,31
    e2d8:	2c4a703a 	and	r5,r5,r17
    e2dc:	288ab03a 	or	r5,r5,r2
    e2e0:	28c6b03a 	or	r3,r5,r3
    e2e4:	a005883a 	mov	r2,r20
    e2e8:	dfc00c17 	ldw	ra,48(sp)
    e2ec:	df000b17 	ldw	fp,44(sp)
    e2f0:	ddc00a17 	ldw	r23,40(sp)
    e2f4:	dd800917 	ldw	r22,36(sp)
    e2f8:	dd400817 	ldw	r21,32(sp)
    e2fc:	dd000717 	ldw	r20,28(sp)
    e300:	dcc00617 	ldw	r19,24(sp)
    e304:	dc800517 	ldw	r18,20(sp)
    e308:	dc400417 	ldw	r17,16(sp)
    e30c:	dc000317 	ldw	r16,12(sp)
    e310:	dec00d04 	addi	sp,sp,52
    e314:	f800283a 	ret
    e318:	2404b03a 	or	r2,r4,r16
    e31c:	2027883a 	mov	r19,r4
    e320:	10004226 	beq	r2,zero,e42c <__muldf3+0x2e4>
    e324:	8000fc26 	beq	r16,zero,e718 <__muldf3+0x5d0>
    e328:	8009883a 	mov	r4,r16
    e32c:	d9800215 	stw	r6,8(sp)
    e330:	d9c00015 	stw	r7,0(sp)
    e334:	da400115 	stw	r9,4(sp)
    e338:	000f3600 	call	f360 <__clzsi2>
    e33c:	d9800217 	ldw	r6,8(sp)
    e340:	d9c00017 	ldw	r7,0(sp)
    e344:	da400117 	ldw	r9,4(sp)
    e348:	113ffd44 	addi	r4,r2,-11
    e34c:	00c00704 	movi	r3,28
    e350:	1900ed16 	blt	r3,r4,e708 <__muldf3+0x5c0>
    e354:	00c00744 	movi	r3,29
    e358:	147ffe04 	addi	r17,r2,-8
    e35c:	1907c83a 	sub	r3,r3,r4
    e360:	8460983a 	sll	r16,r16,r17
    e364:	98c6d83a 	srl	r3,r19,r3
    e368:	9c68983a 	sll	r20,r19,r17
    e36c:	1c20b03a 	or	r16,r3,r16
    e370:	1080fcc4 	addi	r2,r2,1011
    e374:	00a5c83a 	sub	r18,zero,r2
    e378:	0027883a 	mov	r19,zero
    e37c:	0039883a 	mov	fp,zero
    e380:	003f9006 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e384:	3446b03a 	or	r3,r6,r17
    e388:	1800261e 	bne	r3,zero,e424 <__muldf3+0x2dc>
    e38c:	0023883a 	mov	r17,zero
    e390:	0011883a 	mov	r8,zero
    e394:	01400084 	movi	r5,2
    e398:	003f9c06 	br	e20c <__alt_data_end+0xff00e20c>
    e39c:	3446b03a 	or	r3,r6,r17
    e3a0:	18001c26 	beq	r3,zero,e414 <__muldf3+0x2cc>
    e3a4:	8800ce26 	beq	r17,zero,e6e0 <__muldf3+0x598>
    e3a8:	8809883a 	mov	r4,r17
    e3ac:	d9800215 	stw	r6,8(sp)
    e3b0:	da400115 	stw	r9,4(sp)
    e3b4:	da800015 	stw	r10,0(sp)
    e3b8:	000f3600 	call	f360 <__clzsi2>
    e3bc:	d9800217 	ldw	r6,8(sp)
    e3c0:	da400117 	ldw	r9,4(sp)
    e3c4:	da800017 	ldw	r10,0(sp)
    e3c8:	113ffd44 	addi	r4,r2,-11
    e3cc:	00c00704 	movi	r3,28
    e3d0:	1900bf16 	blt	r3,r4,e6d0 <__muldf3+0x588>
    e3d4:	00c00744 	movi	r3,29
    e3d8:	123ffe04 	addi	r8,r2,-8
    e3dc:	1907c83a 	sub	r3,r3,r4
    e3e0:	8a22983a 	sll	r17,r17,r8
    e3e4:	30c6d83a 	srl	r3,r6,r3
    e3e8:	3210983a 	sll	r8,r6,r8
    e3ec:	1c62b03a 	or	r17,r3,r17
    e3f0:	1080fcc4 	addi	r2,r2,1011
    e3f4:	0085c83a 	sub	r2,zero,r2
    e3f8:	000b883a 	mov	r5,zero
    e3fc:	003f8306 	br	e20c <__alt_data_end+0xff00e20c>
    e400:	b02b883a 	mov	r21,r22
    e404:	0081ffc4 	movi	r2,2047
    e408:	000b883a 	mov	r5,zero
    e40c:	0029883a 	mov	r20,zero
    e410:	003fac06 	br	e2c4 <__alt_data_end+0xff00e2c4>
    e414:	0023883a 	mov	r17,zero
    e418:	0011883a 	mov	r8,zero
    e41c:	01400044 	movi	r5,1
    e420:	003f7a06 	br	e20c <__alt_data_end+0xff00e20c>
    e424:	014000c4 	movi	r5,3
    e428:	003f7806 	br	e20c <__alt_data_end+0xff00e20c>
    e42c:	04c00104 	movi	r19,4
    e430:	0021883a 	mov	r16,zero
    e434:	0029883a 	mov	r20,zero
    e438:	07000044 	movi	fp,1
    e43c:	003f6106 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e440:	04c00304 	movi	r19,12
    e444:	070000c4 	movi	fp,3
    e448:	003f5e06 	br	e1c4 <__alt_data_end+0xff00e1c4>
    e44c:	01400434 	movhi	r5,16
    e450:	002b883a 	mov	r21,zero
    e454:	297fffc4 	addi	r5,r5,-1
    e458:	053fffc4 	movi	r20,-1
    e45c:	0081ffc4 	movi	r2,2047
    e460:	003f9806 	br	e2c4 <__alt_data_end+0xff00e2c4>
    e464:	8023883a 	mov	r17,r16
    e468:	a011883a 	mov	r8,r20
    e46c:	e00b883a 	mov	r5,fp
    e470:	003f8a06 	br	e29c <__alt_data_end+0xff00e29c>
    e474:	8023883a 	mov	r17,r16
    e478:	a011883a 	mov	r8,r20
    e47c:	482d883a 	mov	r22,r9
    e480:	e00b883a 	mov	r5,fp
    e484:	003f8506 	br	e29c <__alt_data_end+0xff00e29c>
    e488:	a00ad43a 	srli	r5,r20,16
    e48c:	401ad43a 	srli	r13,r8,16
    e490:	a53fffcc 	andi	r20,r20,65535
    e494:	423fffcc 	andi	r8,r8,65535
    e498:	4519383a 	mul	r12,r8,r20
    e49c:	4147383a 	mul	r3,r8,r5
    e4a0:	6d09383a 	mul	r4,r13,r20
    e4a4:	600cd43a 	srli	r6,r12,16
    e4a8:	2b5d383a 	mul	r14,r5,r13
    e4ac:	20c9883a 	add	r4,r4,r3
    e4b0:	310d883a 	add	r6,r6,r4
    e4b4:	30c0022e 	bgeu	r6,r3,e4c0 <__muldf3+0x378>
    e4b8:	00c00074 	movhi	r3,1
    e4bc:	70dd883a 	add	r14,r14,r3
    e4c0:	8826d43a 	srli	r19,r17,16
    e4c4:	8bffffcc 	andi	r15,r17,65535
    e4c8:	7d23383a 	mul	r17,r15,r20
    e4cc:	7949383a 	mul	r4,r15,r5
    e4d0:	9d29383a 	mul	r20,r19,r20
    e4d4:	8814d43a 	srli	r10,r17,16
    e4d8:	3012943a 	slli	r9,r6,16
    e4dc:	a129883a 	add	r20,r20,r4
    e4e0:	633fffcc 	andi	r12,r12,65535
    e4e4:	5515883a 	add	r10,r10,r20
    e4e8:	3006d43a 	srli	r3,r6,16
    e4ec:	4b13883a 	add	r9,r9,r12
    e4f0:	2ccb383a 	mul	r5,r5,r19
    e4f4:	5100022e 	bgeu	r10,r4,e500 <__muldf3+0x3b8>
    e4f8:	01000074 	movhi	r4,1
    e4fc:	290b883a 	add	r5,r5,r4
    e500:	802ad43a 	srli	r21,r16,16
    e504:	843fffcc 	andi	r16,r16,65535
    e508:	440d383a 	mul	r6,r8,r16
    e50c:	4565383a 	mul	r18,r8,r21
    e510:	8349383a 	mul	r4,r16,r13
    e514:	500e943a 	slli	r7,r10,16
    e518:	3010d43a 	srli	r8,r6,16
    e51c:	5028d43a 	srli	r20,r10,16
    e520:	2489883a 	add	r4,r4,r18
    e524:	8abfffcc 	andi	r10,r17,65535
    e528:	3a95883a 	add	r10,r7,r10
    e52c:	4119883a 	add	r12,r8,r4
    e530:	a169883a 	add	r20,r20,r5
    e534:	1a87883a 	add	r3,r3,r10
    e538:	6d5b383a 	mul	r13,r13,r21
    e53c:	6480022e 	bgeu	r12,r18,e548 <__muldf3+0x400>
    e540:	01000074 	movhi	r4,1
    e544:	691b883a 	add	r13,r13,r4
    e548:	7c25383a 	mul	r18,r15,r16
    e54c:	7d4b383a 	mul	r5,r15,r21
    e550:	84cf383a 	mul	r7,r16,r19
    e554:	901ed43a 	srli	r15,r18,16
    e558:	6008d43a 	srli	r4,r12,16
    e55c:	6010943a 	slli	r8,r12,16
    e560:	394f883a 	add	r7,r7,r5
    e564:	333fffcc 	andi	r12,r6,65535
    e568:	79df883a 	add	r15,r15,r7
    e56c:	235b883a 	add	r13,r4,r13
    e570:	9d63383a 	mul	r17,r19,r21
    e574:	4309883a 	add	r4,r8,r12
    e578:	7940022e 	bgeu	r15,r5,e584 <__muldf3+0x43c>
    e57c:	01400074 	movhi	r5,1
    e580:	8963883a 	add	r17,r17,r5
    e584:	780a943a 	slli	r5,r15,16
    e588:	91bfffcc 	andi	r6,r18,65535
    e58c:	70c7883a 	add	r3,r14,r3
    e590:	298d883a 	add	r6,r5,r6
    e594:	1a8f803a 	cmpltu	r7,r3,r10
    e598:	350b883a 	add	r5,r6,r20
    e59c:	20c7883a 	add	r3,r4,r3
    e5a0:	3955883a 	add	r10,r7,r5
    e5a4:	1909803a 	cmpltu	r4,r3,r4
    e5a8:	6a91883a 	add	r8,r13,r10
    e5ac:	780cd43a 	srli	r6,r15,16
    e5b0:	2219883a 	add	r12,r4,r8
    e5b4:	2d0b803a 	cmpltu	r5,r5,r20
    e5b8:	51cf803a 	cmpltu	r7,r10,r7
    e5bc:	29ceb03a 	or	r7,r5,r7
    e5c0:	4351803a 	cmpltu	r8,r8,r13
    e5c4:	610b803a 	cmpltu	r5,r12,r4
    e5c8:	4148b03a 	or	r4,r8,r5
    e5cc:	398f883a 	add	r7,r7,r6
    e5d0:	3909883a 	add	r4,r7,r4
    e5d4:	1810927a 	slli	r8,r3,9
    e5d8:	2449883a 	add	r4,r4,r17
    e5dc:	2008927a 	slli	r4,r4,9
    e5e0:	6022d5fa 	srli	r17,r12,23
    e5e4:	1806d5fa 	srli	r3,r3,23
    e5e8:	4252b03a 	or	r9,r8,r9
    e5ec:	600a927a 	slli	r5,r12,9
    e5f0:	4810c03a 	cmpne	r8,r9,zero
    e5f4:	2462b03a 	or	r17,r4,r17
    e5f8:	40c6b03a 	or	r3,r8,r3
    e5fc:	8900402c 	andhi	r4,r17,256
    e600:	1950b03a 	or	r8,r3,r5
    e604:	20000726 	beq	r4,zero,e624 <__muldf3+0x4dc>
    e608:	4006d07a 	srli	r3,r8,1
    e60c:	880497fa 	slli	r2,r17,31
    e610:	4200004c 	andi	r8,r8,1
    e614:	8822d07a 	srli	r17,r17,1
    e618:	1a10b03a 	or	r8,r3,r8
    e61c:	1210b03a 	or	r8,r2,r8
    e620:	5805883a 	mov	r2,r11
    e624:	1140ffc4 	addi	r5,r2,1023
    e628:	0140440e 	bge	zero,r5,e73c <__muldf3+0x5f4>
    e62c:	40c001cc 	andi	r3,r8,7
    e630:	18000726 	beq	r3,zero,e650 <__muldf3+0x508>
    e634:	40c003cc 	andi	r3,r8,15
    e638:	01000104 	movi	r4,4
    e63c:	19000426 	beq	r3,r4,e650 <__muldf3+0x508>
    e640:	4107883a 	add	r3,r8,r4
    e644:	1a11803a 	cmpltu	r8,r3,r8
    e648:	8a23883a 	add	r17,r17,r8
    e64c:	1811883a 	mov	r8,r3
    e650:	88c0402c 	andhi	r3,r17,256
    e654:	18000426 	beq	r3,zero,e668 <__muldf3+0x520>
    e658:	11410004 	addi	r5,r2,1024
    e65c:	00bfc034 	movhi	r2,65280
    e660:	10bfffc4 	addi	r2,r2,-1
    e664:	88a2703a 	and	r17,r17,r2
    e668:	0081ff84 	movi	r2,2046
    e66c:	117f6416 	blt	r2,r5,e400 <__alt_data_end+0xff00e400>
    e670:	8828977a 	slli	r20,r17,29
    e674:	4010d0fa 	srli	r8,r8,3
    e678:	8822927a 	slli	r17,r17,9
    e67c:	2881ffcc 	andi	r2,r5,2047
    e680:	a228b03a 	or	r20,r20,r8
    e684:	880ad33a 	srli	r5,r17,12
    e688:	b02b883a 	mov	r21,r22
    e68c:	003f0d06 	br	e2c4 <__alt_data_end+0xff00e2c4>
    e690:	8080022c 	andhi	r2,r16,8
    e694:	10000926 	beq	r2,zero,e6bc <__muldf3+0x574>
    e698:	8880022c 	andhi	r2,r17,8
    e69c:	1000071e 	bne	r2,zero,e6bc <__muldf3+0x574>
    e6a0:	00800434 	movhi	r2,16
    e6a4:	89400234 	orhi	r5,r17,8
    e6a8:	10bfffc4 	addi	r2,r2,-1
    e6ac:	b82b883a 	mov	r21,r23
    e6b0:	288a703a 	and	r5,r5,r2
    e6b4:	4029883a 	mov	r20,r8
    e6b8:	003f6806 	br	e45c <__alt_data_end+0xff00e45c>
    e6bc:	00800434 	movhi	r2,16
    e6c0:	81400234 	orhi	r5,r16,8
    e6c4:	10bfffc4 	addi	r2,r2,-1
    e6c8:	288a703a 	and	r5,r5,r2
    e6cc:	003f6306 	br	e45c <__alt_data_end+0xff00e45c>
    e6d0:	147ff604 	addi	r17,r2,-40
    e6d4:	3462983a 	sll	r17,r6,r17
    e6d8:	0011883a 	mov	r8,zero
    e6dc:	003f4406 	br	e3f0 <__alt_data_end+0xff00e3f0>
    e6e0:	3009883a 	mov	r4,r6
    e6e4:	d9800215 	stw	r6,8(sp)
    e6e8:	da400115 	stw	r9,4(sp)
    e6ec:	da800015 	stw	r10,0(sp)
    e6f0:	000f3600 	call	f360 <__clzsi2>
    e6f4:	10800804 	addi	r2,r2,32
    e6f8:	da800017 	ldw	r10,0(sp)
    e6fc:	da400117 	ldw	r9,4(sp)
    e700:	d9800217 	ldw	r6,8(sp)
    e704:	003f3006 	br	e3c8 <__alt_data_end+0xff00e3c8>
    e708:	143ff604 	addi	r16,r2,-40
    e70c:	9c20983a 	sll	r16,r19,r16
    e710:	0029883a 	mov	r20,zero
    e714:	003f1606 	br	e370 <__alt_data_end+0xff00e370>
    e718:	d9800215 	stw	r6,8(sp)
    e71c:	d9c00015 	stw	r7,0(sp)
    e720:	da400115 	stw	r9,4(sp)
    e724:	000f3600 	call	f360 <__clzsi2>
    e728:	10800804 	addi	r2,r2,32
    e72c:	da400117 	ldw	r9,4(sp)
    e730:	d9c00017 	ldw	r7,0(sp)
    e734:	d9800217 	ldw	r6,8(sp)
    e738:	003f0306 	br	e348 <__alt_data_end+0xff00e348>
    e73c:	00c00044 	movi	r3,1
    e740:	1947c83a 	sub	r3,r3,r5
    e744:	00800e04 	movi	r2,56
    e748:	10feda16 	blt	r2,r3,e2b4 <__alt_data_end+0xff00e2b4>
    e74c:	008007c4 	movi	r2,31
    e750:	10c01b16 	blt	r2,r3,e7c0 <__muldf3+0x678>
    e754:	00800804 	movi	r2,32
    e758:	10c5c83a 	sub	r2,r2,r3
    e75c:	888a983a 	sll	r5,r17,r2
    e760:	40c8d83a 	srl	r4,r8,r3
    e764:	4084983a 	sll	r2,r8,r2
    e768:	88e2d83a 	srl	r17,r17,r3
    e76c:	2906b03a 	or	r3,r5,r4
    e770:	1004c03a 	cmpne	r2,r2,zero
    e774:	1886b03a 	or	r3,r3,r2
    e778:	188001cc 	andi	r2,r3,7
    e77c:	10000726 	beq	r2,zero,e79c <__muldf3+0x654>
    e780:	188003cc 	andi	r2,r3,15
    e784:	01000104 	movi	r4,4
    e788:	11000426 	beq	r2,r4,e79c <__muldf3+0x654>
    e78c:	1805883a 	mov	r2,r3
    e790:	10c00104 	addi	r3,r2,4
    e794:	1885803a 	cmpltu	r2,r3,r2
    e798:	88a3883a 	add	r17,r17,r2
    e79c:	8880202c 	andhi	r2,r17,128
    e7a0:	10001c26 	beq	r2,zero,e814 <__muldf3+0x6cc>
    e7a4:	b02b883a 	mov	r21,r22
    e7a8:	00800044 	movi	r2,1
    e7ac:	000b883a 	mov	r5,zero
    e7b0:	0029883a 	mov	r20,zero
    e7b4:	003ec306 	br	e2c4 <__alt_data_end+0xff00e2c4>
    e7b8:	5805883a 	mov	r2,r11
    e7bc:	003f9906 	br	e624 <__alt_data_end+0xff00e624>
    e7c0:	00bff844 	movi	r2,-31
    e7c4:	1145c83a 	sub	r2,r2,r5
    e7c8:	8888d83a 	srl	r4,r17,r2
    e7cc:	00800804 	movi	r2,32
    e7d0:	18801a26 	beq	r3,r2,e83c <__muldf3+0x6f4>
    e7d4:	00801004 	movi	r2,64
    e7d8:	10c5c83a 	sub	r2,r2,r3
    e7dc:	8884983a 	sll	r2,r17,r2
    e7e0:	1204b03a 	or	r2,r2,r8
    e7e4:	1004c03a 	cmpne	r2,r2,zero
    e7e8:	2084b03a 	or	r2,r4,r2
    e7ec:	144001cc 	andi	r17,r2,7
    e7f0:	88000d1e 	bne	r17,zero,e828 <__muldf3+0x6e0>
    e7f4:	000b883a 	mov	r5,zero
    e7f8:	1028d0fa 	srli	r20,r2,3
    e7fc:	b02b883a 	mov	r21,r22
    e800:	0005883a 	mov	r2,zero
    e804:	a468b03a 	or	r20,r20,r17
    e808:	003eae06 	br	e2c4 <__alt_data_end+0xff00e2c4>
    e80c:	1007883a 	mov	r3,r2
    e810:	0023883a 	mov	r17,zero
    e814:	880a927a 	slli	r5,r17,9
    e818:	1805883a 	mov	r2,r3
    e81c:	8822977a 	slli	r17,r17,29
    e820:	280ad33a 	srli	r5,r5,12
    e824:	003ff406 	br	e7f8 <__alt_data_end+0xff00e7f8>
    e828:	10c003cc 	andi	r3,r2,15
    e82c:	01000104 	movi	r4,4
    e830:	193ff626 	beq	r3,r4,e80c <__alt_data_end+0xff00e80c>
    e834:	0023883a 	mov	r17,zero
    e838:	003fd506 	br	e790 <__alt_data_end+0xff00e790>
    e83c:	0005883a 	mov	r2,zero
    e840:	003fe706 	br	e7e0 <__alt_data_end+0xff00e7e0>
    e844:	00800434 	movhi	r2,16
    e848:	89400234 	orhi	r5,r17,8
    e84c:	10bfffc4 	addi	r2,r2,-1
    e850:	b02b883a 	mov	r21,r22
    e854:	288a703a 	and	r5,r5,r2
    e858:	4029883a 	mov	r20,r8
    e85c:	003eff06 	br	e45c <__alt_data_end+0xff00e45c>

0000e860 <__subdf3>:
    e860:	02000434 	movhi	r8,16
    e864:	423fffc4 	addi	r8,r8,-1
    e868:	defffb04 	addi	sp,sp,-20
    e86c:	2a14703a 	and	r10,r5,r8
    e870:	3812d53a 	srli	r9,r7,20
    e874:	3a10703a 	and	r8,r7,r8
    e878:	2006d77a 	srli	r3,r4,29
    e87c:	3004d77a 	srli	r2,r6,29
    e880:	dc000015 	stw	r16,0(sp)
    e884:	501490fa 	slli	r10,r10,3
    e888:	2820d53a 	srli	r16,r5,20
    e88c:	401090fa 	slli	r8,r8,3
    e890:	dc800215 	stw	r18,8(sp)
    e894:	dc400115 	stw	r17,4(sp)
    e898:	dfc00415 	stw	ra,16(sp)
    e89c:	202290fa 	slli	r17,r4,3
    e8a0:	dcc00315 	stw	r19,12(sp)
    e8a4:	4a41ffcc 	andi	r9,r9,2047
    e8a8:	0101ffc4 	movi	r4,2047
    e8ac:	2824d7fa 	srli	r18,r5,31
    e8b0:	8401ffcc 	andi	r16,r16,2047
    e8b4:	50c6b03a 	or	r3,r10,r3
    e8b8:	380ed7fa 	srli	r7,r7,31
    e8bc:	408ab03a 	or	r5,r8,r2
    e8c0:	300c90fa 	slli	r6,r6,3
    e8c4:	49009626 	beq	r9,r4,eb20 <__subdf3+0x2c0>
    e8c8:	39c0005c 	xori	r7,r7,1
    e8cc:	8245c83a 	sub	r2,r16,r9
    e8d0:	3c807426 	beq	r7,r18,eaa4 <__subdf3+0x244>
    e8d4:	0080af0e 	bge	zero,r2,eb94 <__subdf3+0x334>
    e8d8:	48002a1e 	bne	r9,zero,e984 <__subdf3+0x124>
    e8dc:	2988b03a 	or	r4,r5,r6
    e8e0:	20009a1e 	bne	r4,zero,eb4c <__subdf3+0x2ec>
    e8e4:	888001cc 	andi	r2,r17,7
    e8e8:	10000726 	beq	r2,zero,e908 <__subdf3+0xa8>
    e8ec:	888003cc 	andi	r2,r17,15
    e8f0:	01000104 	movi	r4,4
    e8f4:	11000426 	beq	r2,r4,e908 <__subdf3+0xa8>
    e8f8:	890b883a 	add	r5,r17,r4
    e8fc:	2c63803a 	cmpltu	r17,r5,r17
    e900:	1c47883a 	add	r3,r3,r17
    e904:	2823883a 	mov	r17,r5
    e908:	1880202c 	andhi	r2,r3,128
    e90c:	10005926 	beq	r2,zero,ea74 <__subdf3+0x214>
    e910:	84000044 	addi	r16,r16,1
    e914:	0081ffc4 	movi	r2,2047
    e918:	8080be26 	beq	r16,r2,ec14 <__subdf3+0x3b4>
    e91c:	017fe034 	movhi	r5,65408
    e920:	297fffc4 	addi	r5,r5,-1
    e924:	1946703a 	and	r3,r3,r5
    e928:	1804977a 	slli	r2,r3,29
    e92c:	1806927a 	slli	r3,r3,9
    e930:	8822d0fa 	srli	r17,r17,3
    e934:	8401ffcc 	andi	r16,r16,2047
    e938:	180ad33a 	srli	r5,r3,12
    e93c:	9100004c 	andi	r4,r18,1
    e940:	1444b03a 	or	r2,r2,r17
    e944:	80c1ffcc 	andi	r3,r16,2047
    e948:	1820953a 	slli	r16,r3,20
    e94c:	20c03fcc 	andi	r3,r4,255
    e950:	180897fa 	slli	r4,r3,31
    e954:	00c00434 	movhi	r3,16
    e958:	18ffffc4 	addi	r3,r3,-1
    e95c:	28c6703a 	and	r3,r5,r3
    e960:	1c06b03a 	or	r3,r3,r16
    e964:	1906b03a 	or	r3,r3,r4
    e968:	dfc00417 	ldw	ra,16(sp)
    e96c:	dcc00317 	ldw	r19,12(sp)
    e970:	dc800217 	ldw	r18,8(sp)
    e974:	dc400117 	ldw	r17,4(sp)
    e978:	dc000017 	ldw	r16,0(sp)
    e97c:	dec00504 	addi	sp,sp,20
    e980:	f800283a 	ret
    e984:	0101ffc4 	movi	r4,2047
    e988:	813fd626 	beq	r16,r4,e8e4 <__alt_data_end+0xff00e8e4>
    e98c:	29402034 	orhi	r5,r5,128
    e990:	01000e04 	movi	r4,56
    e994:	2080a316 	blt	r4,r2,ec24 <__subdf3+0x3c4>
    e998:	010007c4 	movi	r4,31
    e99c:	2080c616 	blt	r4,r2,ecb8 <__subdf3+0x458>
    e9a0:	01000804 	movi	r4,32
    e9a4:	2089c83a 	sub	r4,r4,r2
    e9a8:	2910983a 	sll	r8,r5,r4
    e9ac:	308ed83a 	srl	r7,r6,r2
    e9b0:	3108983a 	sll	r4,r6,r4
    e9b4:	2884d83a 	srl	r2,r5,r2
    e9b8:	41ccb03a 	or	r6,r8,r7
    e9bc:	2008c03a 	cmpne	r4,r4,zero
    e9c0:	310cb03a 	or	r6,r6,r4
    e9c4:	898dc83a 	sub	r6,r17,r6
    e9c8:	89a3803a 	cmpltu	r17,r17,r6
    e9cc:	1887c83a 	sub	r3,r3,r2
    e9d0:	1c47c83a 	sub	r3,r3,r17
    e9d4:	3023883a 	mov	r17,r6
    e9d8:	1880202c 	andhi	r2,r3,128
    e9dc:	10002326 	beq	r2,zero,ea6c <__subdf3+0x20c>
    e9e0:	04c02034 	movhi	r19,128
    e9e4:	9cffffc4 	addi	r19,r19,-1
    e9e8:	1ce6703a 	and	r19,r3,r19
    e9ec:	98007a26 	beq	r19,zero,ebd8 <__subdf3+0x378>
    e9f0:	9809883a 	mov	r4,r19
    e9f4:	000f3600 	call	f360 <__clzsi2>
    e9f8:	113ffe04 	addi	r4,r2,-8
    e9fc:	00c007c4 	movi	r3,31
    ea00:	19007b16 	blt	r3,r4,ebf0 <__subdf3+0x390>
    ea04:	00800804 	movi	r2,32
    ea08:	1105c83a 	sub	r2,r2,r4
    ea0c:	8884d83a 	srl	r2,r17,r2
    ea10:	9906983a 	sll	r3,r19,r4
    ea14:	8922983a 	sll	r17,r17,r4
    ea18:	10c4b03a 	or	r2,r2,r3
    ea1c:	24007816 	blt	r4,r16,ec00 <__subdf3+0x3a0>
    ea20:	2421c83a 	sub	r16,r4,r16
    ea24:	80c00044 	addi	r3,r16,1
    ea28:	010007c4 	movi	r4,31
    ea2c:	20c09516 	blt	r4,r3,ec84 <__subdf3+0x424>
    ea30:	01400804 	movi	r5,32
    ea34:	28cbc83a 	sub	r5,r5,r3
    ea38:	88c8d83a 	srl	r4,r17,r3
    ea3c:	8962983a 	sll	r17,r17,r5
    ea40:	114a983a 	sll	r5,r2,r5
    ea44:	10c6d83a 	srl	r3,r2,r3
    ea48:	8804c03a 	cmpne	r2,r17,zero
    ea4c:	290ab03a 	or	r5,r5,r4
    ea50:	28a2b03a 	or	r17,r5,r2
    ea54:	0021883a 	mov	r16,zero
    ea58:	003fa206 	br	e8e4 <__alt_data_end+0xff00e8e4>
    ea5c:	2090b03a 	or	r8,r4,r2
    ea60:	40018e26 	beq	r8,zero,f09c <__subdf3+0x83c>
    ea64:	1007883a 	mov	r3,r2
    ea68:	2023883a 	mov	r17,r4
    ea6c:	888001cc 	andi	r2,r17,7
    ea70:	103f9e1e 	bne	r2,zero,e8ec <__alt_data_end+0xff00e8ec>
    ea74:	1804977a 	slli	r2,r3,29
    ea78:	8822d0fa 	srli	r17,r17,3
    ea7c:	1810d0fa 	srli	r8,r3,3
    ea80:	9100004c 	andi	r4,r18,1
    ea84:	1444b03a 	or	r2,r2,r17
    ea88:	00c1ffc4 	movi	r3,2047
    ea8c:	80c02826 	beq	r16,r3,eb30 <__subdf3+0x2d0>
    ea90:	01400434 	movhi	r5,16
    ea94:	297fffc4 	addi	r5,r5,-1
    ea98:	80e0703a 	and	r16,r16,r3
    ea9c:	414a703a 	and	r5,r8,r5
    eaa0:	003fa806 	br	e944 <__alt_data_end+0xff00e944>
    eaa4:	0080630e 	bge	zero,r2,ec34 <__subdf3+0x3d4>
    eaa8:	48003026 	beq	r9,zero,eb6c <__subdf3+0x30c>
    eaac:	0101ffc4 	movi	r4,2047
    eab0:	813f8c26 	beq	r16,r4,e8e4 <__alt_data_end+0xff00e8e4>
    eab4:	29402034 	orhi	r5,r5,128
    eab8:	01000e04 	movi	r4,56
    eabc:	2080a90e 	bge	r4,r2,ed64 <__subdf3+0x504>
    eac0:	298cb03a 	or	r6,r5,r6
    eac4:	3012c03a 	cmpne	r9,r6,zero
    eac8:	0005883a 	mov	r2,zero
    eacc:	4c53883a 	add	r9,r9,r17
    ead0:	4c63803a 	cmpltu	r17,r9,r17
    ead4:	10c7883a 	add	r3,r2,r3
    ead8:	88c7883a 	add	r3,r17,r3
    eadc:	4823883a 	mov	r17,r9
    eae0:	1880202c 	andhi	r2,r3,128
    eae4:	1000d026 	beq	r2,zero,ee28 <__subdf3+0x5c8>
    eae8:	84000044 	addi	r16,r16,1
    eaec:	0081ffc4 	movi	r2,2047
    eaf0:	8080fe26 	beq	r16,r2,eeec <__subdf3+0x68c>
    eaf4:	00bfe034 	movhi	r2,65408
    eaf8:	10bfffc4 	addi	r2,r2,-1
    eafc:	1886703a 	and	r3,r3,r2
    eb00:	880ad07a 	srli	r5,r17,1
    eb04:	180497fa 	slli	r2,r3,31
    eb08:	8900004c 	andi	r4,r17,1
    eb0c:	2922b03a 	or	r17,r5,r4
    eb10:	1806d07a 	srli	r3,r3,1
    eb14:	1462b03a 	or	r17,r2,r17
    eb18:	3825883a 	mov	r18,r7
    eb1c:	003f7106 	br	e8e4 <__alt_data_end+0xff00e8e4>
    eb20:	2984b03a 	or	r2,r5,r6
    eb24:	103f6826 	beq	r2,zero,e8c8 <__alt_data_end+0xff00e8c8>
    eb28:	39c03fcc 	andi	r7,r7,255
    eb2c:	003f6706 	br	e8cc <__alt_data_end+0xff00e8cc>
    eb30:	4086b03a 	or	r3,r8,r2
    eb34:	18015226 	beq	r3,zero,f080 <__subdf3+0x820>
    eb38:	00c00434 	movhi	r3,16
    eb3c:	41400234 	orhi	r5,r8,8
    eb40:	18ffffc4 	addi	r3,r3,-1
    eb44:	28ca703a 	and	r5,r5,r3
    eb48:	003f7e06 	br	e944 <__alt_data_end+0xff00e944>
    eb4c:	10bfffc4 	addi	r2,r2,-1
    eb50:	1000491e 	bne	r2,zero,ec78 <__subdf3+0x418>
    eb54:	898fc83a 	sub	r7,r17,r6
    eb58:	89e3803a 	cmpltu	r17,r17,r7
    eb5c:	1947c83a 	sub	r3,r3,r5
    eb60:	1c47c83a 	sub	r3,r3,r17
    eb64:	3823883a 	mov	r17,r7
    eb68:	003f9b06 	br	e9d8 <__alt_data_end+0xff00e9d8>
    eb6c:	2988b03a 	or	r4,r5,r6
    eb70:	203f5c26 	beq	r4,zero,e8e4 <__alt_data_end+0xff00e8e4>
    eb74:	10bfffc4 	addi	r2,r2,-1
    eb78:	1000931e 	bne	r2,zero,edc8 <__subdf3+0x568>
    eb7c:	898d883a 	add	r6,r17,r6
    eb80:	3463803a 	cmpltu	r17,r6,r17
    eb84:	1947883a 	add	r3,r3,r5
    eb88:	88c7883a 	add	r3,r17,r3
    eb8c:	3023883a 	mov	r17,r6
    eb90:	003fd306 	br	eae0 <__alt_data_end+0xff00eae0>
    eb94:	1000541e 	bne	r2,zero,ece8 <__subdf3+0x488>
    eb98:	80800044 	addi	r2,r16,1
    eb9c:	1081ffcc 	andi	r2,r2,2047
    eba0:	01000044 	movi	r4,1
    eba4:	2080a20e 	bge	r4,r2,ee30 <__subdf3+0x5d0>
    eba8:	8989c83a 	sub	r4,r17,r6
    ebac:	8905803a 	cmpltu	r2,r17,r4
    ebb0:	1967c83a 	sub	r19,r3,r5
    ebb4:	98a7c83a 	sub	r19,r19,r2
    ebb8:	9880202c 	andhi	r2,r19,128
    ebbc:	10006326 	beq	r2,zero,ed4c <__subdf3+0x4ec>
    ebc0:	3463c83a 	sub	r17,r6,r17
    ebc4:	28c7c83a 	sub	r3,r5,r3
    ebc8:	344d803a 	cmpltu	r6,r6,r17
    ebcc:	19a7c83a 	sub	r19,r3,r6
    ebd0:	3825883a 	mov	r18,r7
    ebd4:	983f861e 	bne	r19,zero,e9f0 <__alt_data_end+0xff00e9f0>
    ebd8:	8809883a 	mov	r4,r17
    ebdc:	000f3600 	call	f360 <__clzsi2>
    ebe0:	10800804 	addi	r2,r2,32
    ebe4:	113ffe04 	addi	r4,r2,-8
    ebe8:	00c007c4 	movi	r3,31
    ebec:	193f850e 	bge	r3,r4,ea04 <__alt_data_end+0xff00ea04>
    ebf0:	10bff604 	addi	r2,r2,-40
    ebf4:	8884983a 	sll	r2,r17,r2
    ebf8:	0023883a 	mov	r17,zero
    ebfc:	243f880e 	bge	r4,r16,ea20 <__alt_data_end+0xff00ea20>
    ec00:	00ffe034 	movhi	r3,65408
    ec04:	18ffffc4 	addi	r3,r3,-1
    ec08:	8121c83a 	sub	r16,r16,r4
    ec0c:	10c6703a 	and	r3,r2,r3
    ec10:	003f3406 	br	e8e4 <__alt_data_end+0xff00e8e4>
    ec14:	9100004c 	andi	r4,r18,1
    ec18:	000b883a 	mov	r5,zero
    ec1c:	0005883a 	mov	r2,zero
    ec20:	003f4806 	br	e944 <__alt_data_end+0xff00e944>
    ec24:	298cb03a 	or	r6,r5,r6
    ec28:	300cc03a 	cmpne	r6,r6,zero
    ec2c:	0005883a 	mov	r2,zero
    ec30:	003f6406 	br	e9c4 <__alt_data_end+0xff00e9c4>
    ec34:	10009a1e 	bne	r2,zero,eea0 <__subdf3+0x640>
    ec38:	82400044 	addi	r9,r16,1
    ec3c:	4881ffcc 	andi	r2,r9,2047
    ec40:	02800044 	movi	r10,1
    ec44:	5080670e 	bge	r10,r2,ede4 <__subdf3+0x584>
    ec48:	0081ffc4 	movi	r2,2047
    ec4c:	4880af26 	beq	r9,r2,ef0c <__subdf3+0x6ac>
    ec50:	898d883a 	add	r6,r17,r6
    ec54:	1945883a 	add	r2,r3,r5
    ec58:	3447803a 	cmpltu	r3,r6,r17
    ec5c:	1887883a 	add	r3,r3,r2
    ec60:	182297fa 	slli	r17,r3,31
    ec64:	300cd07a 	srli	r6,r6,1
    ec68:	1806d07a 	srli	r3,r3,1
    ec6c:	4821883a 	mov	r16,r9
    ec70:	89a2b03a 	or	r17,r17,r6
    ec74:	003f1b06 	br	e8e4 <__alt_data_end+0xff00e8e4>
    ec78:	0101ffc4 	movi	r4,2047
    ec7c:	813f441e 	bne	r16,r4,e990 <__alt_data_end+0xff00e990>
    ec80:	003f1806 	br	e8e4 <__alt_data_end+0xff00e8e4>
    ec84:	843ff844 	addi	r16,r16,-31
    ec88:	01400804 	movi	r5,32
    ec8c:	1408d83a 	srl	r4,r2,r16
    ec90:	19405026 	beq	r3,r5,edd4 <__subdf3+0x574>
    ec94:	01401004 	movi	r5,64
    ec98:	28c7c83a 	sub	r3,r5,r3
    ec9c:	10c4983a 	sll	r2,r2,r3
    eca0:	88a2b03a 	or	r17,r17,r2
    eca4:	8822c03a 	cmpne	r17,r17,zero
    eca8:	2462b03a 	or	r17,r4,r17
    ecac:	0007883a 	mov	r3,zero
    ecb0:	0021883a 	mov	r16,zero
    ecb4:	003f6d06 	br	ea6c <__alt_data_end+0xff00ea6c>
    ecb8:	11fff804 	addi	r7,r2,-32
    ecbc:	01000804 	movi	r4,32
    ecc0:	29ced83a 	srl	r7,r5,r7
    ecc4:	11004526 	beq	r2,r4,eddc <__subdf3+0x57c>
    ecc8:	01001004 	movi	r4,64
    eccc:	2089c83a 	sub	r4,r4,r2
    ecd0:	2904983a 	sll	r2,r5,r4
    ecd4:	118cb03a 	or	r6,r2,r6
    ecd8:	300cc03a 	cmpne	r6,r6,zero
    ecdc:	398cb03a 	or	r6,r7,r6
    ece0:	0005883a 	mov	r2,zero
    ece4:	003f3706 	br	e9c4 <__alt_data_end+0xff00e9c4>
    ece8:	80002a26 	beq	r16,zero,ed94 <__subdf3+0x534>
    ecec:	0101ffc4 	movi	r4,2047
    ecf0:	49006626 	beq	r9,r4,ee8c <__subdf3+0x62c>
    ecf4:	0085c83a 	sub	r2,zero,r2
    ecf8:	18c02034 	orhi	r3,r3,128
    ecfc:	01000e04 	movi	r4,56
    ed00:	20807e16 	blt	r4,r2,eefc <__subdf3+0x69c>
    ed04:	010007c4 	movi	r4,31
    ed08:	2080e716 	blt	r4,r2,f0a8 <__subdf3+0x848>
    ed0c:	01000804 	movi	r4,32
    ed10:	2089c83a 	sub	r4,r4,r2
    ed14:	1914983a 	sll	r10,r3,r4
    ed18:	8890d83a 	srl	r8,r17,r2
    ed1c:	8908983a 	sll	r4,r17,r4
    ed20:	1884d83a 	srl	r2,r3,r2
    ed24:	5222b03a 	or	r17,r10,r8
    ed28:	2006c03a 	cmpne	r3,r4,zero
    ed2c:	88e2b03a 	or	r17,r17,r3
    ed30:	3463c83a 	sub	r17,r6,r17
    ed34:	2885c83a 	sub	r2,r5,r2
    ed38:	344d803a 	cmpltu	r6,r6,r17
    ed3c:	1187c83a 	sub	r3,r2,r6
    ed40:	4821883a 	mov	r16,r9
    ed44:	3825883a 	mov	r18,r7
    ed48:	003f2306 	br	e9d8 <__alt_data_end+0xff00e9d8>
    ed4c:	24d0b03a 	or	r8,r4,r19
    ed50:	40001b1e 	bne	r8,zero,edc0 <__subdf3+0x560>
    ed54:	0005883a 	mov	r2,zero
    ed58:	0009883a 	mov	r4,zero
    ed5c:	0021883a 	mov	r16,zero
    ed60:	003f4906 	br	ea88 <__alt_data_end+0xff00ea88>
    ed64:	010007c4 	movi	r4,31
    ed68:	20803a16 	blt	r4,r2,ee54 <__subdf3+0x5f4>
    ed6c:	01000804 	movi	r4,32
    ed70:	2089c83a 	sub	r4,r4,r2
    ed74:	2912983a 	sll	r9,r5,r4
    ed78:	3090d83a 	srl	r8,r6,r2
    ed7c:	3108983a 	sll	r4,r6,r4
    ed80:	2884d83a 	srl	r2,r5,r2
    ed84:	4a12b03a 	or	r9,r9,r8
    ed88:	2008c03a 	cmpne	r4,r4,zero
    ed8c:	4912b03a 	or	r9,r9,r4
    ed90:	003f4e06 	br	eacc <__alt_data_end+0xff00eacc>
    ed94:	1c48b03a 	or	r4,r3,r17
    ed98:	20003c26 	beq	r4,zero,ee8c <__subdf3+0x62c>
    ed9c:	0084303a 	nor	r2,zero,r2
    eda0:	1000381e 	bne	r2,zero,ee84 <__subdf3+0x624>
    eda4:	3463c83a 	sub	r17,r6,r17
    eda8:	28c5c83a 	sub	r2,r5,r3
    edac:	344d803a 	cmpltu	r6,r6,r17
    edb0:	1187c83a 	sub	r3,r2,r6
    edb4:	4821883a 	mov	r16,r9
    edb8:	3825883a 	mov	r18,r7
    edbc:	003f0606 	br	e9d8 <__alt_data_end+0xff00e9d8>
    edc0:	2023883a 	mov	r17,r4
    edc4:	003f0906 	br	e9ec <__alt_data_end+0xff00e9ec>
    edc8:	0101ffc4 	movi	r4,2047
    edcc:	813f3a1e 	bne	r16,r4,eab8 <__alt_data_end+0xff00eab8>
    edd0:	003ec406 	br	e8e4 <__alt_data_end+0xff00e8e4>
    edd4:	0005883a 	mov	r2,zero
    edd8:	003fb106 	br	eca0 <__alt_data_end+0xff00eca0>
    eddc:	0005883a 	mov	r2,zero
    ede0:	003fbc06 	br	ecd4 <__alt_data_end+0xff00ecd4>
    ede4:	1c44b03a 	or	r2,r3,r17
    ede8:	80008e1e 	bne	r16,zero,f024 <__subdf3+0x7c4>
    edec:	1000c826 	beq	r2,zero,f110 <__subdf3+0x8b0>
    edf0:	2984b03a 	or	r2,r5,r6
    edf4:	103ebb26 	beq	r2,zero,e8e4 <__alt_data_end+0xff00e8e4>
    edf8:	8989883a 	add	r4,r17,r6
    edfc:	1945883a 	add	r2,r3,r5
    ee00:	2447803a 	cmpltu	r3,r4,r17
    ee04:	1887883a 	add	r3,r3,r2
    ee08:	1880202c 	andhi	r2,r3,128
    ee0c:	2023883a 	mov	r17,r4
    ee10:	103f1626 	beq	r2,zero,ea6c <__alt_data_end+0xff00ea6c>
    ee14:	00bfe034 	movhi	r2,65408
    ee18:	10bfffc4 	addi	r2,r2,-1
    ee1c:	5021883a 	mov	r16,r10
    ee20:	1886703a 	and	r3,r3,r2
    ee24:	003eaf06 	br	e8e4 <__alt_data_end+0xff00e8e4>
    ee28:	3825883a 	mov	r18,r7
    ee2c:	003f0f06 	br	ea6c <__alt_data_end+0xff00ea6c>
    ee30:	1c44b03a 	or	r2,r3,r17
    ee34:	8000251e 	bne	r16,zero,eecc <__subdf3+0x66c>
    ee38:	1000661e 	bne	r2,zero,efd4 <__subdf3+0x774>
    ee3c:	2990b03a 	or	r8,r5,r6
    ee40:	40009626 	beq	r8,zero,f09c <__subdf3+0x83c>
    ee44:	2807883a 	mov	r3,r5
    ee48:	3023883a 	mov	r17,r6
    ee4c:	3825883a 	mov	r18,r7
    ee50:	003ea406 	br	e8e4 <__alt_data_end+0xff00e8e4>
    ee54:	127ff804 	addi	r9,r2,-32
    ee58:	01000804 	movi	r4,32
    ee5c:	2a52d83a 	srl	r9,r5,r9
    ee60:	11008c26 	beq	r2,r4,f094 <__subdf3+0x834>
    ee64:	01001004 	movi	r4,64
    ee68:	2085c83a 	sub	r2,r4,r2
    ee6c:	2884983a 	sll	r2,r5,r2
    ee70:	118cb03a 	or	r6,r2,r6
    ee74:	300cc03a 	cmpne	r6,r6,zero
    ee78:	4992b03a 	or	r9,r9,r6
    ee7c:	0005883a 	mov	r2,zero
    ee80:	003f1206 	br	eacc <__alt_data_end+0xff00eacc>
    ee84:	0101ffc4 	movi	r4,2047
    ee88:	493f9c1e 	bne	r9,r4,ecfc <__alt_data_end+0xff00ecfc>
    ee8c:	2807883a 	mov	r3,r5
    ee90:	3023883a 	mov	r17,r6
    ee94:	4821883a 	mov	r16,r9
    ee98:	3825883a 	mov	r18,r7
    ee9c:	003e9106 	br	e8e4 <__alt_data_end+0xff00e8e4>
    eea0:	80001f1e 	bne	r16,zero,ef20 <__subdf3+0x6c0>
    eea4:	1c48b03a 	or	r4,r3,r17
    eea8:	20005a26 	beq	r4,zero,f014 <__subdf3+0x7b4>
    eeac:	0084303a 	nor	r2,zero,r2
    eeb0:	1000561e 	bne	r2,zero,f00c <__subdf3+0x7ac>
    eeb4:	89a3883a 	add	r17,r17,r6
    eeb8:	1945883a 	add	r2,r3,r5
    eebc:	898d803a 	cmpltu	r6,r17,r6
    eec0:	3087883a 	add	r3,r6,r2
    eec4:	4821883a 	mov	r16,r9
    eec8:	003f0506 	br	eae0 <__alt_data_end+0xff00eae0>
    eecc:	10002b1e 	bne	r2,zero,ef7c <__subdf3+0x71c>
    eed0:	2984b03a 	or	r2,r5,r6
    eed4:	10008026 	beq	r2,zero,f0d8 <__subdf3+0x878>
    eed8:	2807883a 	mov	r3,r5
    eedc:	3023883a 	mov	r17,r6
    eee0:	3825883a 	mov	r18,r7
    eee4:	0401ffc4 	movi	r16,2047
    eee8:	003e7e06 	br	e8e4 <__alt_data_end+0xff00e8e4>
    eeec:	3809883a 	mov	r4,r7
    eef0:	0011883a 	mov	r8,zero
    eef4:	0005883a 	mov	r2,zero
    eef8:	003ee306 	br	ea88 <__alt_data_end+0xff00ea88>
    eefc:	1c62b03a 	or	r17,r3,r17
    ef00:	8822c03a 	cmpne	r17,r17,zero
    ef04:	0005883a 	mov	r2,zero
    ef08:	003f8906 	br	ed30 <__alt_data_end+0xff00ed30>
    ef0c:	3809883a 	mov	r4,r7
    ef10:	4821883a 	mov	r16,r9
    ef14:	0011883a 	mov	r8,zero
    ef18:	0005883a 	mov	r2,zero
    ef1c:	003eda06 	br	ea88 <__alt_data_end+0xff00ea88>
    ef20:	0101ffc4 	movi	r4,2047
    ef24:	49003b26 	beq	r9,r4,f014 <__subdf3+0x7b4>
    ef28:	0085c83a 	sub	r2,zero,r2
    ef2c:	18c02034 	orhi	r3,r3,128
    ef30:	01000e04 	movi	r4,56
    ef34:	20806e16 	blt	r4,r2,f0f0 <__subdf3+0x890>
    ef38:	010007c4 	movi	r4,31
    ef3c:	20807716 	blt	r4,r2,f11c <__subdf3+0x8bc>
    ef40:	01000804 	movi	r4,32
    ef44:	2089c83a 	sub	r4,r4,r2
    ef48:	1914983a 	sll	r10,r3,r4
    ef4c:	8890d83a 	srl	r8,r17,r2
    ef50:	8908983a 	sll	r4,r17,r4
    ef54:	1884d83a 	srl	r2,r3,r2
    ef58:	5222b03a 	or	r17,r10,r8
    ef5c:	2006c03a 	cmpne	r3,r4,zero
    ef60:	88e2b03a 	or	r17,r17,r3
    ef64:	89a3883a 	add	r17,r17,r6
    ef68:	1145883a 	add	r2,r2,r5
    ef6c:	898d803a 	cmpltu	r6,r17,r6
    ef70:	3087883a 	add	r3,r6,r2
    ef74:	4821883a 	mov	r16,r9
    ef78:	003ed906 	br	eae0 <__alt_data_end+0xff00eae0>
    ef7c:	2984b03a 	or	r2,r5,r6
    ef80:	10004226 	beq	r2,zero,f08c <__subdf3+0x82c>
    ef84:	1808d0fa 	srli	r4,r3,3
    ef88:	8822d0fa 	srli	r17,r17,3
    ef8c:	1806977a 	slli	r3,r3,29
    ef90:	2080022c 	andhi	r2,r4,8
    ef94:	1c62b03a 	or	r17,r3,r17
    ef98:	10000826 	beq	r2,zero,efbc <__subdf3+0x75c>
    ef9c:	2812d0fa 	srli	r9,r5,3
    efa0:	4880022c 	andhi	r2,r9,8
    efa4:	1000051e 	bne	r2,zero,efbc <__subdf3+0x75c>
    efa8:	300cd0fa 	srli	r6,r6,3
    efac:	2804977a 	slli	r2,r5,29
    efb0:	4809883a 	mov	r4,r9
    efb4:	3825883a 	mov	r18,r7
    efb8:	11a2b03a 	or	r17,r2,r6
    efbc:	8806d77a 	srli	r3,r17,29
    efc0:	200890fa 	slli	r4,r4,3
    efc4:	882290fa 	slli	r17,r17,3
    efc8:	0401ffc4 	movi	r16,2047
    efcc:	1906b03a 	or	r3,r3,r4
    efd0:	003e4406 	br	e8e4 <__alt_data_end+0xff00e8e4>
    efd4:	2984b03a 	or	r2,r5,r6
    efd8:	103e4226 	beq	r2,zero,e8e4 <__alt_data_end+0xff00e8e4>
    efdc:	8989c83a 	sub	r4,r17,r6
    efe0:	8911803a 	cmpltu	r8,r17,r4
    efe4:	1945c83a 	sub	r2,r3,r5
    efe8:	1205c83a 	sub	r2,r2,r8
    efec:	1200202c 	andhi	r8,r2,128
    eff0:	403e9a26 	beq	r8,zero,ea5c <__alt_data_end+0xff00ea5c>
    eff4:	3463c83a 	sub	r17,r6,r17
    eff8:	28c5c83a 	sub	r2,r5,r3
    effc:	344d803a 	cmpltu	r6,r6,r17
    f000:	1187c83a 	sub	r3,r2,r6
    f004:	3825883a 	mov	r18,r7
    f008:	003e3606 	br	e8e4 <__alt_data_end+0xff00e8e4>
    f00c:	0101ffc4 	movi	r4,2047
    f010:	493fc71e 	bne	r9,r4,ef30 <__alt_data_end+0xff00ef30>
    f014:	2807883a 	mov	r3,r5
    f018:	3023883a 	mov	r17,r6
    f01c:	4821883a 	mov	r16,r9
    f020:	003e3006 	br	e8e4 <__alt_data_end+0xff00e8e4>
    f024:	10003626 	beq	r2,zero,f100 <__subdf3+0x8a0>
    f028:	2984b03a 	or	r2,r5,r6
    f02c:	10001726 	beq	r2,zero,f08c <__subdf3+0x82c>
    f030:	1808d0fa 	srli	r4,r3,3
    f034:	8822d0fa 	srli	r17,r17,3
    f038:	1806977a 	slli	r3,r3,29
    f03c:	2080022c 	andhi	r2,r4,8
    f040:	1c62b03a 	or	r17,r3,r17
    f044:	10000726 	beq	r2,zero,f064 <__subdf3+0x804>
    f048:	2812d0fa 	srli	r9,r5,3
    f04c:	4880022c 	andhi	r2,r9,8
    f050:	1000041e 	bne	r2,zero,f064 <__subdf3+0x804>
    f054:	300cd0fa 	srli	r6,r6,3
    f058:	2804977a 	slli	r2,r5,29
    f05c:	4809883a 	mov	r4,r9
    f060:	11a2b03a 	or	r17,r2,r6
    f064:	8806d77a 	srli	r3,r17,29
    f068:	200890fa 	slli	r4,r4,3
    f06c:	882290fa 	slli	r17,r17,3
    f070:	3825883a 	mov	r18,r7
    f074:	1906b03a 	or	r3,r3,r4
    f078:	0401ffc4 	movi	r16,2047
    f07c:	003e1906 	br	e8e4 <__alt_data_end+0xff00e8e4>
    f080:	000b883a 	mov	r5,zero
    f084:	0005883a 	mov	r2,zero
    f088:	003e2e06 	br	e944 <__alt_data_end+0xff00e944>
    f08c:	0401ffc4 	movi	r16,2047
    f090:	003e1406 	br	e8e4 <__alt_data_end+0xff00e8e4>
    f094:	0005883a 	mov	r2,zero
    f098:	003f7506 	br	ee70 <__alt_data_end+0xff00ee70>
    f09c:	0005883a 	mov	r2,zero
    f0a0:	0009883a 	mov	r4,zero
    f0a4:	003e7806 	br	ea88 <__alt_data_end+0xff00ea88>
    f0a8:	123ff804 	addi	r8,r2,-32
    f0ac:	01000804 	movi	r4,32
    f0b0:	1a10d83a 	srl	r8,r3,r8
    f0b4:	11002526 	beq	r2,r4,f14c <__subdf3+0x8ec>
    f0b8:	01001004 	movi	r4,64
    f0bc:	2085c83a 	sub	r2,r4,r2
    f0c0:	1884983a 	sll	r2,r3,r2
    f0c4:	1444b03a 	or	r2,r2,r17
    f0c8:	1004c03a 	cmpne	r2,r2,zero
    f0cc:	40a2b03a 	or	r17,r8,r2
    f0d0:	0005883a 	mov	r2,zero
    f0d4:	003f1606 	br	ed30 <__alt_data_end+0xff00ed30>
    f0d8:	02000434 	movhi	r8,16
    f0dc:	0009883a 	mov	r4,zero
    f0e0:	423fffc4 	addi	r8,r8,-1
    f0e4:	00bfffc4 	movi	r2,-1
    f0e8:	0401ffc4 	movi	r16,2047
    f0ec:	003e6606 	br	ea88 <__alt_data_end+0xff00ea88>
    f0f0:	1c62b03a 	or	r17,r3,r17
    f0f4:	8822c03a 	cmpne	r17,r17,zero
    f0f8:	0005883a 	mov	r2,zero
    f0fc:	003f9906 	br	ef64 <__alt_data_end+0xff00ef64>
    f100:	2807883a 	mov	r3,r5
    f104:	3023883a 	mov	r17,r6
    f108:	0401ffc4 	movi	r16,2047
    f10c:	003df506 	br	e8e4 <__alt_data_end+0xff00e8e4>
    f110:	2807883a 	mov	r3,r5
    f114:	3023883a 	mov	r17,r6
    f118:	003df206 	br	e8e4 <__alt_data_end+0xff00e8e4>
    f11c:	123ff804 	addi	r8,r2,-32
    f120:	01000804 	movi	r4,32
    f124:	1a10d83a 	srl	r8,r3,r8
    f128:	11000a26 	beq	r2,r4,f154 <__subdf3+0x8f4>
    f12c:	01001004 	movi	r4,64
    f130:	2085c83a 	sub	r2,r4,r2
    f134:	1884983a 	sll	r2,r3,r2
    f138:	1444b03a 	or	r2,r2,r17
    f13c:	1004c03a 	cmpne	r2,r2,zero
    f140:	40a2b03a 	or	r17,r8,r2
    f144:	0005883a 	mov	r2,zero
    f148:	003f8606 	br	ef64 <__alt_data_end+0xff00ef64>
    f14c:	0005883a 	mov	r2,zero
    f150:	003fdc06 	br	f0c4 <__alt_data_end+0xff00f0c4>
    f154:	0005883a 	mov	r2,zero
    f158:	003ff706 	br	f138 <__alt_data_end+0xff00f138>

0000f15c <__fixdfsi>:
    f15c:	280cd53a 	srli	r6,r5,20
    f160:	00c00434 	movhi	r3,16
    f164:	18ffffc4 	addi	r3,r3,-1
    f168:	3181ffcc 	andi	r6,r6,2047
    f16c:	01c0ff84 	movi	r7,1022
    f170:	28c6703a 	and	r3,r5,r3
    f174:	280ad7fa 	srli	r5,r5,31
    f178:	3980120e 	bge	r7,r6,f1c4 <__fixdfsi+0x68>
    f17c:	00810744 	movi	r2,1053
    f180:	11800c16 	blt	r2,r6,f1b4 <__fixdfsi+0x58>
    f184:	00810cc4 	movi	r2,1075
    f188:	1185c83a 	sub	r2,r2,r6
    f18c:	01c007c4 	movi	r7,31
    f190:	18c00434 	orhi	r3,r3,16
    f194:	38800d16 	blt	r7,r2,f1cc <__fixdfsi+0x70>
    f198:	31befb44 	addi	r6,r6,-1043
    f19c:	2084d83a 	srl	r2,r4,r2
    f1a0:	1986983a 	sll	r3,r3,r6
    f1a4:	1884b03a 	or	r2,r3,r2
    f1a8:	28000726 	beq	r5,zero,f1c8 <__fixdfsi+0x6c>
    f1ac:	0085c83a 	sub	r2,zero,r2
    f1b0:	f800283a 	ret
    f1b4:	00a00034 	movhi	r2,32768
    f1b8:	10bfffc4 	addi	r2,r2,-1
    f1bc:	2885883a 	add	r2,r5,r2
    f1c0:	f800283a 	ret
    f1c4:	0005883a 	mov	r2,zero
    f1c8:	f800283a 	ret
    f1cc:	008104c4 	movi	r2,1043
    f1d0:	1185c83a 	sub	r2,r2,r6
    f1d4:	1884d83a 	srl	r2,r3,r2
    f1d8:	003ff306 	br	f1a8 <__alt_data_end+0xff00f1a8>

0000f1dc <__floatsidf>:
    f1dc:	defffd04 	addi	sp,sp,-12
    f1e0:	dfc00215 	stw	ra,8(sp)
    f1e4:	dc400115 	stw	r17,4(sp)
    f1e8:	dc000015 	stw	r16,0(sp)
    f1ec:	20002b26 	beq	r4,zero,f29c <__floatsidf+0xc0>
    f1f0:	2023883a 	mov	r17,r4
    f1f4:	2020d7fa 	srli	r16,r4,31
    f1f8:	20002d16 	blt	r4,zero,f2b0 <__floatsidf+0xd4>
    f1fc:	8809883a 	mov	r4,r17
    f200:	000f3600 	call	f360 <__clzsi2>
    f204:	01410784 	movi	r5,1054
    f208:	288bc83a 	sub	r5,r5,r2
    f20c:	01010cc4 	movi	r4,1075
    f210:	2149c83a 	sub	r4,r4,r5
    f214:	00c007c4 	movi	r3,31
    f218:	1900160e 	bge	r3,r4,f274 <__floatsidf+0x98>
    f21c:	00c104c4 	movi	r3,1043
    f220:	1947c83a 	sub	r3,r3,r5
    f224:	88c6983a 	sll	r3,r17,r3
    f228:	00800434 	movhi	r2,16
    f22c:	10bfffc4 	addi	r2,r2,-1
    f230:	1886703a 	and	r3,r3,r2
    f234:	2941ffcc 	andi	r5,r5,2047
    f238:	800d883a 	mov	r6,r16
    f23c:	0005883a 	mov	r2,zero
    f240:	280a953a 	slli	r5,r5,20
    f244:	31803fcc 	andi	r6,r6,255
    f248:	01000434 	movhi	r4,16
    f24c:	300c97fa 	slli	r6,r6,31
    f250:	213fffc4 	addi	r4,r4,-1
    f254:	1906703a 	and	r3,r3,r4
    f258:	1946b03a 	or	r3,r3,r5
    f25c:	1986b03a 	or	r3,r3,r6
    f260:	dfc00217 	ldw	ra,8(sp)
    f264:	dc400117 	ldw	r17,4(sp)
    f268:	dc000017 	ldw	r16,0(sp)
    f26c:	dec00304 	addi	sp,sp,12
    f270:	f800283a 	ret
    f274:	00c002c4 	movi	r3,11
    f278:	1887c83a 	sub	r3,r3,r2
    f27c:	88c6d83a 	srl	r3,r17,r3
    f280:	8904983a 	sll	r2,r17,r4
    f284:	01000434 	movhi	r4,16
    f288:	213fffc4 	addi	r4,r4,-1
    f28c:	2941ffcc 	andi	r5,r5,2047
    f290:	1906703a 	and	r3,r3,r4
    f294:	800d883a 	mov	r6,r16
    f298:	003fe906 	br	f240 <__alt_data_end+0xff00f240>
    f29c:	000d883a 	mov	r6,zero
    f2a0:	000b883a 	mov	r5,zero
    f2a4:	0007883a 	mov	r3,zero
    f2a8:	0005883a 	mov	r2,zero
    f2ac:	003fe406 	br	f240 <__alt_data_end+0xff00f240>
    f2b0:	0123c83a 	sub	r17,zero,r4
    f2b4:	003fd106 	br	f1fc <__alt_data_end+0xff00f1fc>

0000f2b8 <__floatunsidf>:
    f2b8:	defffe04 	addi	sp,sp,-8
    f2bc:	dc000015 	stw	r16,0(sp)
    f2c0:	dfc00115 	stw	ra,4(sp)
    f2c4:	2021883a 	mov	r16,r4
    f2c8:	20002226 	beq	r4,zero,f354 <__floatunsidf+0x9c>
    f2cc:	000f3600 	call	f360 <__clzsi2>
    f2d0:	01010784 	movi	r4,1054
    f2d4:	2089c83a 	sub	r4,r4,r2
    f2d8:	01810cc4 	movi	r6,1075
    f2dc:	310dc83a 	sub	r6,r6,r4
    f2e0:	00c007c4 	movi	r3,31
    f2e4:	1980120e 	bge	r3,r6,f330 <__floatunsidf+0x78>
    f2e8:	00c104c4 	movi	r3,1043
    f2ec:	1907c83a 	sub	r3,r3,r4
    f2f0:	80ca983a 	sll	r5,r16,r3
    f2f4:	00800434 	movhi	r2,16
    f2f8:	10bfffc4 	addi	r2,r2,-1
    f2fc:	2101ffcc 	andi	r4,r4,2047
    f300:	0021883a 	mov	r16,zero
    f304:	288a703a 	and	r5,r5,r2
    f308:	2008953a 	slli	r4,r4,20
    f30c:	00c00434 	movhi	r3,16
    f310:	18ffffc4 	addi	r3,r3,-1
    f314:	28c6703a 	and	r3,r5,r3
    f318:	8005883a 	mov	r2,r16
    f31c:	1906b03a 	or	r3,r3,r4
    f320:	dfc00117 	ldw	ra,4(sp)
    f324:	dc000017 	ldw	r16,0(sp)
    f328:	dec00204 	addi	sp,sp,8
    f32c:	f800283a 	ret
    f330:	00c002c4 	movi	r3,11
    f334:	188bc83a 	sub	r5,r3,r2
    f338:	814ad83a 	srl	r5,r16,r5
    f33c:	00c00434 	movhi	r3,16
    f340:	18ffffc4 	addi	r3,r3,-1
    f344:	81a0983a 	sll	r16,r16,r6
    f348:	2101ffcc 	andi	r4,r4,2047
    f34c:	28ca703a 	and	r5,r5,r3
    f350:	003fed06 	br	f308 <__alt_data_end+0xff00f308>
    f354:	0009883a 	mov	r4,zero
    f358:	000b883a 	mov	r5,zero
    f35c:	003fea06 	br	f308 <__alt_data_end+0xff00f308>

0000f360 <__clzsi2>:
    f360:	00bfffd4 	movui	r2,65535
    f364:	11000536 	bltu	r2,r4,f37c <__clzsi2+0x1c>
    f368:	00803fc4 	movi	r2,255
    f36c:	11000f36 	bltu	r2,r4,f3ac <__clzsi2+0x4c>
    f370:	00800804 	movi	r2,32
    f374:	0007883a 	mov	r3,zero
    f378:	00000506 	br	f390 <__clzsi2+0x30>
    f37c:	00804034 	movhi	r2,256
    f380:	10bfffc4 	addi	r2,r2,-1
    f384:	11000c2e 	bgeu	r2,r4,f3b8 <__clzsi2+0x58>
    f388:	00800204 	movi	r2,8
    f38c:	00c00604 	movi	r3,24
    f390:	20c8d83a 	srl	r4,r4,r3
    f394:	00c00074 	movhi	r3,1
    f398:	18c92804 	addi	r3,r3,9376
    f39c:	1909883a 	add	r4,r3,r4
    f3a0:	20c00003 	ldbu	r3,0(r4)
    f3a4:	10c5c83a 	sub	r2,r2,r3
    f3a8:	f800283a 	ret
    f3ac:	00800604 	movi	r2,24
    f3b0:	00c00204 	movi	r3,8
    f3b4:	003ff606 	br	f390 <__alt_data_end+0xff00f390>
    f3b8:	00800404 	movi	r2,16
    f3bc:	1007883a 	mov	r3,r2
    f3c0:	003ff306 	br	f390 <__alt_data_end+0xff00f390>

0000f3c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f3c4:	defffe04 	addi	sp,sp,-8
    f3c8:	dfc00115 	stw	ra,4(sp)
    f3cc:	df000015 	stw	fp,0(sp)
    f3d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f3d4:	d0a00d17 	ldw	r2,-32716(gp)
    f3d8:	10000326 	beq	r2,zero,f3e8 <alt_get_errno+0x24>
    f3dc:	d0a00d17 	ldw	r2,-32716(gp)
    f3e0:	103ee83a 	callr	r2
    f3e4:	00000106 	br	f3ec <alt_get_errno+0x28>
    f3e8:	d0a6dc04 	addi	r2,gp,-25744
}
    f3ec:	e037883a 	mov	sp,fp
    f3f0:	dfc00117 	ldw	ra,4(sp)
    f3f4:	df000017 	ldw	fp,0(sp)
    f3f8:	dec00204 	addi	sp,sp,8
    f3fc:	f800283a 	ret

0000f400 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    f400:	defffb04 	addi	sp,sp,-20
    f404:	dfc00415 	stw	ra,16(sp)
    f408:	df000315 	stw	fp,12(sp)
    f40c:	df000304 	addi	fp,sp,12
    f410:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    f414:	e0bfff17 	ldw	r2,-4(fp)
    f418:	10000616 	blt	r2,zero,f434 <close+0x34>
    f41c:	e0bfff17 	ldw	r2,-4(fp)
    f420:	10c00324 	muli	r3,r2,12
    f424:	00800074 	movhi	r2,1
    f428:	108ba604 	addi	r2,r2,11928
    f42c:	1885883a 	add	r2,r3,r2
    f430:	00000106 	br	f438 <close+0x38>
    f434:	0005883a 	mov	r2,zero
    f438:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    f43c:	e0bffd17 	ldw	r2,-12(fp)
    f440:	10001926 	beq	r2,zero,f4a8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    f444:	e0bffd17 	ldw	r2,-12(fp)
    f448:	10800017 	ldw	r2,0(r2)
    f44c:	10800417 	ldw	r2,16(r2)
    f450:	10000626 	beq	r2,zero,f46c <close+0x6c>
    f454:	e0bffd17 	ldw	r2,-12(fp)
    f458:	10800017 	ldw	r2,0(r2)
    f45c:	10800417 	ldw	r2,16(r2)
    f460:	e13ffd17 	ldw	r4,-12(fp)
    f464:	103ee83a 	callr	r2
    f468:	00000106 	br	f470 <close+0x70>
    f46c:	0005883a 	mov	r2,zero
    f470:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    f474:	e13fff17 	ldw	r4,-4(fp)
    f478:	000fac00 	call	fac0 <alt_release_fd>
    if (rval < 0)
    f47c:	e0bffe17 	ldw	r2,-8(fp)
    f480:	1000070e 	bge	r2,zero,f4a0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    f484:	000f3c40 	call	f3c4 <alt_get_errno>
    f488:	1007883a 	mov	r3,r2
    f48c:	e0bffe17 	ldw	r2,-8(fp)
    f490:	0085c83a 	sub	r2,zero,r2
    f494:	18800015 	stw	r2,0(r3)
      return -1;
    f498:	00bfffc4 	movi	r2,-1
    f49c:	00000706 	br	f4bc <close+0xbc>
    }
    return 0;
    f4a0:	0005883a 	mov	r2,zero
    f4a4:	00000506 	br	f4bc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f4a8:	000f3c40 	call	f3c4 <alt_get_errno>
    f4ac:	1007883a 	mov	r3,r2
    f4b0:	00801444 	movi	r2,81
    f4b4:	18800015 	stw	r2,0(r3)
    return -1;
    f4b8:	00bfffc4 	movi	r2,-1
  }
}
    f4bc:	e037883a 	mov	sp,fp
    f4c0:	dfc00117 	ldw	ra,4(sp)
    f4c4:	df000017 	ldw	fp,0(sp)
    f4c8:	dec00204 	addi	sp,sp,8
    f4cc:	f800283a 	ret

0000f4d0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    f4d0:	defffc04 	addi	sp,sp,-16
    f4d4:	df000315 	stw	fp,12(sp)
    f4d8:	df000304 	addi	fp,sp,12
    f4dc:	e13ffd15 	stw	r4,-12(fp)
    f4e0:	e17ffe15 	stw	r5,-8(fp)
    f4e4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    f4e8:	e0bfff17 	ldw	r2,-4(fp)
}
    f4ec:	e037883a 	mov	sp,fp
    f4f0:	df000017 	ldw	fp,0(sp)
    f4f4:	dec00104 	addi	sp,sp,4
    f4f8:	f800283a 	ret

0000f4fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f4fc:	defffe04 	addi	sp,sp,-8
    f500:	dfc00115 	stw	ra,4(sp)
    f504:	df000015 	stw	fp,0(sp)
    f508:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f50c:	d0a00d17 	ldw	r2,-32716(gp)
    f510:	10000326 	beq	r2,zero,f520 <alt_get_errno+0x24>
    f514:	d0a00d17 	ldw	r2,-32716(gp)
    f518:	103ee83a 	callr	r2
    f51c:	00000106 	br	f524 <alt_get_errno+0x28>
    f520:	d0a6dc04 	addi	r2,gp,-25744
}
    f524:	e037883a 	mov	sp,fp
    f528:	dfc00117 	ldw	ra,4(sp)
    f52c:	df000017 	ldw	fp,0(sp)
    f530:	dec00204 	addi	sp,sp,8
    f534:	f800283a 	ret

0000f538 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f538:	defffb04 	addi	sp,sp,-20
    f53c:	dfc00415 	stw	ra,16(sp)
    f540:	df000315 	stw	fp,12(sp)
    f544:	df000304 	addi	fp,sp,12
    f548:	e13ffe15 	stw	r4,-8(fp)
    f54c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f550:	e0bffe17 	ldw	r2,-8(fp)
    f554:	10000616 	blt	r2,zero,f570 <fstat+0x38>
    f558:	e0bffe17 	ldw	r2,-8(fp)
    f55c:	10c00324 	muli	r3,r2,12
    f560:	00800074 	movhi	r2,1
    f564:	108ba604 	addi	r2,r2,11928
    f568:	1885883a 	add	r2,r3,r2
    f56c:	00000106 	br	f574 <fstat+0x3c>
    f570:	0005883a 	mov	r2,zero
    f574:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f578:	e0bffd17 	ldw	r2,-12(fp)
    f57c:	10001026 	beq	r2,zero,f5c0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f580:	e0bffd17 	ldw	r2,-12(fp)
    f584:	10800017 	ldw	r2,0(r2)
    f588:	10800817 	ldw	r2,32(r2)
    f58c:	10000726 	beq	r2,zero,f5ac <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f590:	e0bffd17 	ldw	r2,-12(fp)
    f594:	10800017 	ldw	r2,0(r2)
    f598:	10800817 	ldw	r2,32(r2)
    f59c:	e17fff17 	ldw	r5,-4(fp)
    f5a0:	e13ffd17 	ldw	r4,-12(fp)
    f5a4:	103ee83a 	callr	r2
    f5a8:	00000a06 	br	f5d4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f5ac:	e0bfff17 	ldw	r2,-4(fp)
    f5b0:	00c80004 	movi	r3,8192
    f5b4:	10c00115 	stw	r3,4(r2)
      return 0;
    f5b8:	0005883a 	mov	r2,zero
    f5bc:	00000506 	br	f5d4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f5c0:	000f4fc0 	call	f4fc <alt_get_errno>
    f5c4:	1007883a 	mov	r3,r2
    f5c8:	00801444 	movi	r2,81
    f5cc:	18800015 	stw	r2,0(r3)
    return -1;
    f5d0:	00bfffc4 	movi	r2,-1
  }
}
    f5d4:	e037883a 	mov	sp,fp
    f5d8:	dfc00117 	ldw	ra,4(sp)
    f5dc:	df000017 	ldw	fp,0(sp)
    f5e0:	dec00204 	addi	sp,sp,8
    f5e4:	f800283a 	ret

0000f5e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f5e8:	defffe04 	addi	sp,sp,-8
    f5ec:	dfc00115 	stw	ra,4(sp)
    f5f0:	df000015 	stw	fp,0(sp)
    f5f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f5f8:	d0a00d17 	ldw	r2,-32716(gp)
    f5fc:	10000326 	beq	r2,zero,f60c <alt_get_errno+0x24>
    f600:	d0a00d17 	ldw	r2,-32716(gp)
    f604:	103ee83a 	callr	r2
    f608:	00000106 	br	f610 <alt_get_errno+0x28>
    f60c:	d0a6dc04 	addi	r2,gp,-25744
}
    f610:	e037883a 	mov	sp,fp
    f614:	dfc00117 	ldw	ra,4(sp)
    f618:	df000017 	ldw	fp,0(sp)
    f61c:	dec00204 	addi	sp,sp,8
    f620:	f800283a 	ret

0000f624 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    f624:	deffed04 	addi	sp,sp,-76
    f628:	dfc01215 	stw	ra,72(sp)
    f62c:	df001115 	stw	fp,68(sp)
    f630:	df001104 	addi	fp,sp,68
    f634:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f638:	e0bfff17 	ldw	r2,-4(fp)
    f63c:	10000616 	blt	r2,zero,f658 <isatty+0x34>
    f640:	e0bfff17 	ldw	r2,-4(fp)
    f644:	10c00324 	muli	r3,r2,12
    f648:	00800074 	movhi	r2,1
    f64c:	108ba604 	addi	r2,r2,11928
    f650:	1885883a 	add	r2,r3,r2
    f654:	00000106 	br	f65c <isatty+0x38>
    f658:	0005883a 	mov	r2,zero
    f65c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    f660:	e0bfef17 	ldw	r2,-68(fp)
    f664:	10000e26 	beq	r2,zero,f6a0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    f668:	e0bfef17 	ldw	r2,-68(fp)
    f66c:	10800017 	ldw	r2,0(r2)
    f670:	10800817 	ldw	r2,32(r2)
    f674:	1000021e 	bne	r2,zero,f680 <isatty+0x5c>
    {
      return 1;
    f678:	00800044 	movi	r2,1
    f67c:	00000d06 	br	f6b4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    f680:	e0bff004 	addi	r2,fp,-64
    f684:	100b883a 	mov	r5,r2
    f688:	e13fff17 	ldw	r4,-4(fp)
    f68c:	000f5380 	call	f538 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    f690:	e0bff117 	ldw	r2,-60(fp)
    f694:	10880020 	cmpeqi	r2,r2,8192
    f698:	10803fcc 	andi	r2,r2,255
    f69c:	00000506 	br	f6b4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    f6a0:	000f5e80 	call	f5e8 <alt_get_errno>
    f6a4:	1007883a 	mov	r3,r2
    f6a8:	00801444 	movi	r2,81
    f6ac:	18800015 	stw	r2,0(r3)
    return 0;
    f6b0:	0005883a 	mov	r2,zero
  }
}
    f6b4:	e037883a 	mov	sp,fp
    f6b8:	dfc00117 	ldw	ra,4(sp)
    f6bc:	df000017 	ldw	fp,0(sp)
    f6c0:	dec00204 	addi	sp,sp,8
    f6c4:	f800283a 	ret

0000f6c8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    f6c8:	defffc04 	addi	sp,sp,-16
    f6cc:	df000315 	stw	fp,12(sp)
    f6d0:	df000304 	addi	fp,sp,12
    f6d4:	e13ffd15 	stw	r4,-12(fp)
    f6d8:	e17ffe15 	stw	r5,-8(fp)
    f6dc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    f6e0:	e0fffe17 	ldw	r3,-8(fp)
    f6e4:	e0bffd17 	ldw	r2,-12(fp)
    f6e8:	18800c26 	beq	r3,r2,f71c <alt_load_section+0x54>
  {
    while( to != end )
    f6ec:	00000806 	br	f710 <alt_load_section+0x48>
    {
      *to++ = *from++;
    f6f0:	e0bffe17 	ldw	r2,-8(fp)
    f6f4:	10c00104 	addi	r3,r2,4
    f6f8:	e0fffe15 	stw	r3,-8(fp)
    f6fc:	e0fffd17 	ldw	r3,-12(fp)
    f700:	19000104 	addi	r4,r3,4
    f704:	e13ffd15 	stw	r4,-12(fp)
    f708:	18c00017 	ldw	r3,0(r3)
    f70c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    f710:	e0fffe17 	ldw	r3,-8(fp)
    f714:	e0bfff17 	ldw	r2,-4(fp)
    f718:	18bff51e 	bne	r3,r2,f6f0 <__alt_data_end+0xff00f6f0>
    {
      *to++ = *from++;
    }
  }
}
    f71c:	0001883a 	nop
    f720:	e037883a 	mov	sp,fp
    f724:	df000017 	ldw	fp,0(sp)
    f728:	dec00104 	addi	sp,sp,4
    f72c:	f800283a 	ret

0000f730 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    f730:	defffe04 	addi	sp,sp,-8
    f734:	dfc00115 	stw	ra,4(sp)
    f738:	df000015 	stw	fp,0(sp)
    f73c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    f740:	01800074 	movhi	r6,1
    f744:	31903004 	addi	r6,r6,16576
    f748:	01400074 	movhi	r5,1
    f74c:	29497304 	addi	r5,r5,9676
    f750:	01000074 	movhi	r4,1
    f754:	21103004 	addi	r4,r4,16576
    f758:	000f6c80 	call	f6c8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    f75c:	01800034 	movhi	r6,0
    f760:	31809104 	addi	r6,r6,580
    f764:	01400034 	movhi	r5,0
    f768:	29400804 	addi	r5,r5,32
    f76c:	01000034 	movhi	r4,0
    f770:	21000804 	addi	r4,r4,32
    f774:	000f6c80 	call	f6c8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    f778:	01800074 	movhi	r6,1
    f77c:	31897304 	addi	r6,r6,9676
    f780:	01400074 	movhi	r5,1
    f784:	29478104 	addi	r5,r5,7684
    f788:	01000074 	movhi	r4,1
    f78c:	21078104 	addi	r4,r4,7684
    f790:	000f6c80 	call	f6c8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    f794:	0010d180 	call	10d18 <alt_dcache_flush_all>
  alt_icache_flush_all();
    f798:	0010ed80 	call	10ed8 <alt_icache_flush_all>
}
    f79c:	0001883a 	nop
    f7a0:	e037883a 	mov	sp,fp
    f7a4:	dfc00117 	ldw	ra,4(sp)
    f7a8:	df000017 	ldw	fp,0(sp)
    f7ac:	dec00204 	addi	sp,sp,8
    f7b0:	f800283a 	ret

0000f7b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f7b4:	defffe04 	addi	sp,sp,-8
    f7b8:	dfc00115 	stw	ra,4(sp)
    f7bc:	df000015 	stw	fp,0(sp)
    f7c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f7c4:	d0a00d17 	ldw	r2,-32716(gp)
    f7c8:	10000326 	beq	r2,zero,f7d8 <alt_get_errno+0x24>
    f7cc:	d0a00d17 	ldw	r2,-32716(gp)
    f7d0:	103ee83a 	callr	r2
    f7d4:	00000106 	br	f7dc <alt_get_errno+0x28>
    f7d8:	d0a6dc04 	addi	r2,gp,-25744
}
    f7dc:	e037883a 	mov	sp,fp
    f7e0:	dfc00117 	ldw	ra,4(sp)
    f7e4:	df000017 	ldw	fp,0(sp)
    f7e8:	dec00204 	addi	sp,sp,8
    f7ec:	f800283a 	ret

0000f7f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    f7f0:	defff904 	addi	sp,sp,-28
    f7f4:	dfc00615 	stw	ra,24(sp)
    f7f8:	df000515 	stw	fp,20(sp)
    f7fc:	df000504 	addi	fp,sp,20
    f800:	e13ffd15 	stw	r4,-12(fp)
    f804:	e17ffe15 	stw	r5,-8(fp)
    f808:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    f80c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f810:	e0bffd17 	ldw	r2,-12(fp)
    f814:	10000616 	blt	r2,zero,f830 <lseek+0x40>
    f818:	e0bffd17 	ldw	r2,-12(fp)
    f81c:	10c00324 	muli	r3,r2,12
    f820:	00800074 	movhi	r2,1
    f824:	108ba604 	addi	r2,r2,11928
    f828:	1885883a 	add	r2,r3,r2
    f82c:	00000106 	br	f834 <lseek+0x44>
    f830:	0005883a 	mov	r2,zero
    f834:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    f838:	e0bffc17 	ldw	r2,-16(fp)
    f83c:	10001026 	beq	r2,zero,f880 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    f840:	e0bffc17 	ldw	r2,-16(fp)
    f844:	10800017 	ldw	r2,0(r2)
    f848:	10800717 	ldw	r2,28(r2)
    f84c:	10000926 	beq	r2,zero,f874 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    f850:	e0bffc17 	ldw	r2,-16(fp)
    f854:	10800017 	ldw	r2,0(r2)
    f858:	10800717 	ldw	r2,28(r2)
    f85c:	e1bfff17 	ldw	r6,-4(fp)
    f860:	e17ffe17 	ldw	r5,-8(fp)
    f864:	e13ffc17 	ldw	r4,-16(fp)
    f868:	103ee83a 	callr	r2
    f86c:	e0bffb15 	stw	r2,-20(fp)
    f870:	00000506 	br	f888 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    f874:	00bfde84 	movi	r2,-134
    f878:	e0bffb15 	stw	r2,-20(fp)
    f87c:	00000206 	br	f888 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    f880:	00bfebc4 	movi	r2,-81
    f884:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    f888:	e0bffb17 	ldw	r2,-20(fp)
    f88c:	1000070e 	bge	r2,zero,f8ac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    f890:	000f7b40 	call	f7b4 <alt_get_errno>
    f894:	1007883a 	mov	r3,r2
    f898:	e0bffb17 	ldw	r2,-20(fp)
    f89c:	0085c83a 	sub	r2,zero,r2
    f8a0:	18800015 	stw	r2,0(r3)
    rc = -1;
    f8a4:	00bfffc4 	movi	r2,-1
    f8a8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    f8ac:	e0bffb17 	ldw	r2,-20(fp)
}
    f8b0:	e037883a 	mov	sp,fp
    f8b4:	dfc00117 	ldw	ra,4(sp)
    f8b8:	df000017 	ldw	fp,0(sp)
    f8bc:	dec00204 	addi	sp,sp,8
    f8c0:	f800283a 	ret

0000f8c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    f8c4:	defffd04 	addi	sp,sp,-12
    f8c8:	dfc00215 	stw	ra,8(sp)
    f8cc:	df000115 	stw	fp,4(sp)
    f8d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    f8d4:	0009883a 	mov	r4,zero
    f8d8:	000fd6c0 	call	fd6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    f8dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    f8e0:	000fda40 	call	fda4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    f8e4:	01800074 	movhi	r6,1
    f8e8:	31896b04 	addi	r6,r6,9644
    f8ec:	01400074 	movhi	r5,1
    f8f0:	29496b04 	addi	r5,r5,9644
    f8f4:	01000074 	movhi	r4,1
    f8f8:	21096b04 	addi	r4,r4,9644
    f8fc:	00112700 	call	11270 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    f900:	0010e180 	call	10e18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    f904:	01000074 	movhi	r4,1
    f908:	21039e04 	addi	r4,r4,3704
    f90c:	0011a700 	call	11a70 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    f910:	d0a6e017 	ldw	r2,-25728(gp)
    f914:	d0e6e117 	ldw	r3,-25724(gp)
    f918:	d126e217 	ldw	r4,-25720(gp)
    f91c:	200d883a 	mov	r6,r4
    f920:	180b883a 	mov	r5,r3
    f924:	1009883a 	mov	r4,r2
    f928:	00012d80 	call	12d8 <main>
    f92c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    f930:	01000044 	movi	r4,1
    f934:	000f4000 	call	f400 <close>
  exit (result);
    f938:	e13fff17 	ldw	r4,-4(fp)
    f93c:	0011a840 	call	11a84 <exit>

0000f940 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    f940:	defffe04 	addi	sp,sp,-8
    f944:	df000115 	stw	fp,4(sp)
    f948:	df000104 	addi	fp,sp,4
    f94c:	e13fff15 	stw	r4,-4(fp)
}
    f950:	0001883a 	nop
    f954:	e037883a 	mov	sp,fp
    f958:	df000017 	ldw	fp,0(sp)
    f95c:	dec00104 	addi	sp,sp,4
    f960:	f800283a 	ret

0000f964 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    f964:	defffe04 	addi	sp,sp,-8
    f968:	df000115 	stw	fp,4(sp)
    f96c:	df000104 	addi	fp,sp,4
    f970:	e13fff15 	stw	r4,-4(fp)
}
    f974:	0001883a 	nop
    f978:	e037883a 	mov	sp,fp
    f97c:	df000017 	ldw	fp,0(sp)
    f980:	dec00104 	addi	sp,sp,4
    f984:	f800283a 	ret

0000f988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f988:	defffe04 	addi	sp,sp,-8
    f98c:	dfc00115 	stw	ra,4(sp)
    f990:	df000015 	stw	fp,0(sp)
    f994:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f998:	d0a00d17 	ldw	r2,-32716(gp)
    f99c:	10000326 	beq	r2,zero,f9ac <alt_get_errno+0x24>
    f9a0:	d0a00d17 	ldw	r2,-32716(gp)
    f9a4:	103ee83a 	callr	r2
    f9a8:	00000106 	br	f9b0 <alt_get_errno+0x28>
    f9ac:	d0a6dc04 	addi	r2,gp,-25744
}
    f9b0:	e037883a 	mov	sp,fp
    f9b4:	dfc00117 	ldw	ra,4(sp)
    f9b8:	df000017 	ldw	fp,0(sp)
    f9bc:	dec00204 	addi	sp,sp,8
    f9c0:	f800283a 	ret

0000f9c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    f9c4:	defff904 	addi	sp,sp,-28
    f9c8:	dfc00615 	stw	ra,24(sp)
    f9cc:	df000515 	stw	fp,20(sp)
    f9d0:	df000504 	addi	fp,sp,20
    f9d4:	e13ffd15 	stw	r4,-12(fp)
    f9d8:	e17ffe15 	stw	r5,-8(fp)
    f9dc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f9e0:	e0bffd17 	ldw	r2,-12(fp)
    f9e4:	10000616 	blt	r2,zero,fa00 <read+0x3c>
    f9e8:	e0bffd17 	ldw	r2,-12(fp)
    f9ec:	10c00324 	muli	r3,r2,12
    f9f0:	00800074 	movhi	r2,1
    f9f4:	108ba604 	addi	r2,r2,11928
    f9f8:	1885883a 	add	r2,r3,r2
    f9fc:	00000106 	br	fa04 <read+0x40>
    fa00:	0005883a 	mov	r2,zero
    fa04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fa08:	e0bffb17 	ldw	r2,-20(fp)
    fa0c:	10002226 	beq	r2,zero,fa98 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa10:	e0bffb17 	ldw	r2,-20(fp)
    fa14:	10800217 	ldw	r2,8(r2)
    fa18:	108000cc 	andi	r2,r2,3
    fa1c:	10800060 	cmpeqi	r2,r2,1
    fa20:	1000181e 	bne	r2,zero,fa84 <read+0xc0>
        (fd->dev->read))
    fa24:	e0bffb17 	ldw	r2,-20(fp)
    fa28:	10800017 	ldw	r2,0(r2)
    fa2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fa30:	10001426 	beq	r2,zero,fa84 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fa34:	e0bffb17 	ldw	r2,-20(fp)
    fa38:	10800017 	ldw	r2,0(r2)
    fa3c:	10800517 	ldw	r2,20(r2)
    fa40:	e0ffff17 	ldw	r3,-4(fp)
    fa44:	180d883a 	mov	r6,r3
    fa48:	e17ffe17 	ldw	r5,-8(fp)
    fa4c:	e13ffb17 	ldw	r4,-20(fp)
    fa50:	103ee83a 	callr	r2
    fa54:	e0bffc15 	stw	r2,-16(fp)
    fa58:	e0bffc17 	ldw	r2,-16(fp)
    fa5c:	1000070e 	bge	r2,zero,fa7c <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fa60:	000f9880 	call	f988 <alt_get_errno>
    fa64:	1007883a 	mov	r3,r2
    fa68:	e0bffc17 	ldw	r2,-16(fp)
    fa6c:	0085c83a 	sub	r2,zero,r2
    fa70:	18800015 	stw	r2,0(r3)
          return -1;
    fa74:	00bfffc4 	movi	r2,-1
    fa78:	00000c06 	br	faac <read+0xe8>
        }
        return rval;
    fa7c:	e0bffc17 	ldw	r2,-16(fp)
    fa80:	00000a06 	br	faac <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fa84:	000f9880 	call	f988 <alt_get_errno>
    fa88:	1007883a 	mov	r3,r2
    fa8c:	00800344 	movi	r2,13
    fa90:	18800015 	stw	r2,0(r3)
    fa94:	00000406 	br	faa8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fa98:	000f9880 	call	f988 <alt_get_errno>
    fa9c:	1007883a 	mov	r3,r2
    faa0:	00801444 	movi	r2,81
    faa4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    faa8:	00bfffc4 	movi	r2,-1
}
    faac:	e037883a 	mov	sp,fp
    fab0:	dfc00117 	ldw	ra,4(sp)
    fab4:	df000017 	ldw	fp,0(sp)
    fab8:	dec00204 	addi	sp,sp,8
    fabc:	f800283a 	ret

0000fac0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    fac0:	defffe04 	addi	sp,sp,-8
    fac4:	df000115 	stw	fp,4(sp)
    fac8:	df000104 	addi	fp,sp,4
    facc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    fad0:	e0bfff17 	ldw	r2,-4(fp)
    fad4:	108000d0 	cmplti	r2,r2,3
    fad8:	10000d1e 	bne	r2,zero,fb10 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    fadc:	00800074 	movhi	r2,1
    fae0:	108ba604 	addi	r2,r2,11928
    fae4:	e0ffff17 	ldw	r3,-4(fp)
    fae8:	18c00324 	muli	r3,r3,12
    faec:	10c5883a 	add	r2,r2,r3
    faf0:	10800204 	addi	r2,r2,8
    faf4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    faf8:	00800074 	movhi	r2,1
    fafc:	108ba604 	addi	r2,r2,11928
    fb00:	e0ffff17 	ldw	r3,-4(fp)
    fb04:	18c00324 	muli	r3,r3,12
    fb08:	10c5883a 	add	r2,r2,r3
    fb0c:	10000015 	stw	zero,0(r2)
  }
}
    fb10:	0001883a 	nop
    fb14:	e037883a 	mov	sp,fp
    fb18:	df000017 	ldw	fp,0(sp)
    fb1c:	dec00104 	addi	sp,sp,4
    fb20:	f800283a 	ret

0000fb24 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fb24:	defff904 	addi	sp,sp,-28
    fb28:	df000615 	stw	fp,24(sp)
    fb2c:	df000604 	addi	fp,sp,24
    fb30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fb34:	0005303a 	rdctl	r2,status
    fb38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fb3c:	e0fffe17 	ldw	r3,-8(fp)
    fb40:	00bfff84 	movi	r2,-2
    fb44:	1884703a 	and	r2,r3,r2
    fb48:	1001703a 	wrctl	status,r2
  
  return context;
    fb4c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fb50:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fb54:	d0a00e17 	ldw	r2,-32712(gp)
    fb58:	10c000c4 	addi	r3,r2,3
    fb5c:	00bfff04 	movi	r2,-4
    fb60:	1884703a 	and	r2,r3,r2
    fb64:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fb68:	d0e00e17 	ldw	r3,-32712(gp)
    fb6c:	e0bfff17 	ldw	r2,-4(fp)
    fb70:	1887883a 	add	r3,r3,r2
    fb74:	00804034 	movhi	r2,256
    fb78:	10800004 	addi	r2,r2,0
    fb7c:	10c0062e 	bgeu	r2,r3,fb98 <sbrk+0x74>
    fb80:	e0bffb17 	ldw	r2,-20(fp)
    fb84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fb88:	e0bffa17 	ldw	r2,-24(fp)
    fb8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fb90:	00bfffc4 	movi	r2,-1
    fb94:	00000b06 	br	fbc4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fb98:	d0a00e17 	ldw	r2,-32712(gp)
    fb9c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fba0:	d0e00e17 	ldw	r3,-32712(gp)
    fba4:	e0bfff17 	ldw	r2,-4(fp)
    fba8:	1885883a 	add	r2,r3,r2
    fbac:	d0a00e15 	stw	r2,-32712(gp)
    fbb0:	e0bffb17 	ldw	r2,-20(fp)
    fbb4:	e0bffc15 	stw	r2,-16(fp)
    fbb8:	e0bffc17 	ldw	r2,-16(fp)
    fbbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fbc0:	e0bffd17 	ldw	r2,-12(fp)
} 
    fbc4:	e037883a 	mov	sp,fp
    fbc8:	df000017 	ldw	fp,0(sp)
    fbcc:	dec00104 	addi	sp,sp,4
    fbd0:	f800283a 	ret

0000fbd4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    fbd4:	defffd04 	addi	sp,sp,-12
    fbd8:	dfc00215 	stw	ra,8(sp)
    fbdc:	df000115 	stw	fp,4(sp)
    fbe0:	df000104 	addi	fp,sp,4
    fbe4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    fbe8:	e13fff17 	ldw	r4,-4(fp)
    fbec:	0010bc00 	call	10bc0 <alt_busy_sleep>
}
    fbf0:	e037883a 	mov	sp,fp
    fbf4:	dfc00117 	ldw	ra,4(sp)
    fbf8:	df000017 	ldw	fp,0(sp)
    fbfc:	dec00204 	addi	sp,sp,8
    fc00:	f800283a 	ret

0000fc04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc04:	defffe04 	addi	sp,sp,-8
    fc08:	dfc00115 	stw	ra,4(sp)
    fc0c:	df000015 	stw	fp,0(sp)
    fc10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc14:	d0a00d17 	ldw	r2,-32716(gp)
    fc18:	10000326 	beq	r2,zero,fc28 <alt_get_errno+0x24>
    fc1c:	d0a00d17 	ldw	r2,-32716(gp)
    fc20:	103ee83a 	callr	r2
    fc24:	00000106 	br	fc2c <alt_get_errno+0x28>
    fc28:	d0a6dc04 	addi	r2,gp,-25744
}
    fc2c:	e037883a 	mov	sp,fp
    fc30:	dfc00117 	ldw	ra,4(sp)
    fc34:	df000017 	ldw	fp,0(sp)
    fc38:	dec00204 	addi	sp,sp,8
    fc3c:	f800283a 	ret

0000fc40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fc40:	defff904 	addi	sp,sp,-28
    fc44:	dfc00615 	stw	ra,24(sp)
    fc48:	df000515 	stw	fp,20(sp)
    fc4c:	df000504 	addi	fp,sp,20
    fc50:	e13ffd15 	stw	r4,-12(fp)
    fc54:	e17ffe15 	stw	r5,-8(fp)
    fc58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fc5c:	e0bffd17 	ldw	r2,-12(fp)
    fc60:	10000616 	blt	r2,zero,fc7c <write+0x3c>
    fc64:	e0bffd17 	ldw	r2,-12(fp)
    fc68:	10c00324 	muli	r3,r2,12
    fc6c:	00800074 	movhi	r2,1
    fc70:	108ba604 	addi	r2,r2,11928
    fc74:	1885883a 	add	r2,r3,r2
    fc78:	00000106 	br	fc80 <write+0x40>
    fc7c:	0005883a 	mov	r2,zero
    fc80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fc84:	e0bffb17 	ldw	r2,-20(fp)
    fc88:	10002126 	beq	r2,zero,fd10 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fc8c:	e0bffb17 	ldw	r2,-20(fp)
    fc90:	10800217 	ldw	r2,8(r2)
    fc94:	108000cc 	andi	r2,r2,3
    fc98:	10001826 	beq	r2,zero,fcfc <write+0xbc>
    fc9c:	e0bffb17 	ldw	r2,-20(fp)
    fca0:	10800017 	ldw	r2,0(r2)
    fca4:	10800617 	ldw	r2,24(r2)
    fca8:	10001426 	beq	r2,zero,fcfc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fcac:	e0bffb17 	ldw	r2,-20(fp)
    fcb0:	10800017 	ldw	r2,0(r2)
    fcb4:	10800617 	ldw	r2,24(r2)
    fcb8:	e0ffff17 	ldw	r3,-4(fp)
    fcbc:	180d883a 	mov	r6,r3
    fcc0:	e17ffe17 	ldw	r5,-8(fp)
    fcc4:	e13ffb17 	ldw	r4,-20(fp)
    fcc8:	103ee83a 	callr	r2
    fccc:	e0bffc15 	stw	r2,-16(fp)
    fcd0:	e0bffc17 	ldw	r2,-16(fp)
    fcd4:	1000070e 	bge	r2,zero,fcf4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    fcd8:	000fc040 	call	fc04 <alt_get_errno>
    fcdc:	1007883a 	mov	r3,r2
    fce0:	e0bffc17 	ldw	r2,-16(fp)
    fce4:	0085c83a 	sub	r2,zero,r2
    fce8:	18800015 	stw	r2,0(r3)
        return -1;
    fcec:	00bfffc4 	movi	r2,-1
    fcf0:	00000c06 	br	fd24 <write+0xe4>
      }
      return rval;
    fcf4:	e0bffc17 	ldw	r2,-16(fp)
    fcf8:	00000a06 	br	fd24 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    fcfc:	000fc040 	call	fc04 <alt_get_errno>
    fd00:	1007883a 	mov	r3,r2
    fd04:	00800344 	movi	r2,13
    fd08:	18800015 	stw	r2,0(r3)
    fd0c:	00000406 	br	fd20 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    fd10:	000fc040 	call	fc04 <alt_get_errno>
    fd14:	1007883a 	mov	r3,r2
    fd18:	00801444 	movi	r2,81
    fd1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fd20:	00bfffc4 	movi	r2,-1
}
    fd24:	e037883a 	mov	sp,fp
    fd28:	dfc00117 	ldw	ra,4(sp)
    fd2c:	df000017 	ldw	fp,0(sp)
    fd30:	dec00204 	addi	sp,sp,8
    fd34:	f800283a 	ret

0000fd38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    fd38:	defffd04 	addi	sp,sp,-12
    fd3c:	dfc00215 	stw	ra,8(sp)
    fd40:	df000115 	stw	fp,4(sp)
    fd44:	df000104 	addi	fp,sp,4
    fd48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    fd4c:	d1600a04 	addi	r5,gp,-32728
    fd50:	e13fff17 	ldw	r4,-4(fp)
    fd54:	0010d740 	call	10d74 <alt_dev_llist_insert>
}
    fd58:	e037883a 	mov	sp,fp
    fd5c:	dfc00117 	ldw	ra,4(sp)
    fd60:	df000017 	ldw	fp,0(sp)
    fd64:	dec00204 	addi	sp,sp,8
    fd68:	f800283a 	ret

0000fd6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    fd6c:	defffd04 	addi	sp,sp,-12
    fd70:	dfc00215 	stw	ra,8(sp)
    fd74:	df000115 	stw	fp,4(sp)
    fd78:	df000104 	addi	fp,sp,4
    fd7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    fd80:	00116e40 	call	116e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    fd84:	00800044 	movi	r2,1
    fd88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    fd8c:	0001883a 	nop
    fd90:	e037883a 	mov	sp,fp
    fd94:	dfc00117 	ldw	ra,4(sp)
    fd98:	df000017 	ldw	fp,0(sp)
    fd9c:	dec00204 	addi	sp,sp,8
    fda0:	f800283a 	ret

0000fda4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    fda4:	defffe04 	addi	sp,sp,-8
    fda8:	dfc00115 	stw	ra,4(sp)
    fdac:	df000015 	stw	fp,0(sp)
    fdb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    fdb4:	00804034 	movhi	r2,256
    fdb8:	10840004 	addi	r2,r2,4096
    fdbc:	d0a6e315 	stw	r2,-25716(gp)
    fdc0:	0080bef4 	movhi	r2,763
    fdc4:	10bc2004 	addi	r2,r2,-3968
    fdc8:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    fdcc:	01c0fa04 	movi	r7,1000
    fdd0:	01800104 	movi	r6,4
    fdd4:	000b883a 	mov	r5,zero
    fdd8:	01004034 	movhi	r4,256
    fddc:	21040804 	addi	r4,r4,4128
    fde0:	00109000 	call	10900 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    fde4:	000d883a 	mov	r6,zero
    fde8:	000b883a 	mov	r5,zero
    fdec:	01000074 	movhi	r4,1
    fdf0:	210c1004 	addi	r4,r4,12352
    fdf4:	000ff840 	call	ff84 <altera_avalon_jtag_uart_init>
    fdf8:	01000074 	movhi	r4,1
    fdfc:	210c0604 	addi	r4,r4,12312
    fe00:	000fd380 	call	fd38 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    fe04:	0001883a 	nop
}
    fe08:	0001883a 	nop
    fe0c:	e037883a 	mov	sp,fp
    fe10:	dfc00117 	ldw	ra,4(sp)
    fe14:	df000017 	ldw	fp,0(sp)
    fe18:	dec00204 	addi	sp,sp,8
    fe1c:	f800283a 	ret

0000fe20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    fe20:	defffa04 	addi	sp,sp,-24
    fe24:	dfc00515 	stw	ra,20(sp)
    fe28:	df000415 	stw	fp,16(sp)
    fe2c:	df000404 	addi	fp,sp,16
    fe30:	e13ffd15 	stw	r4,-12(fp)
    fe34:	e17ffe15 	stw	r5,-8(fp)
    fe38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe3c:	e0bffd17 	ldw	r2,-12(fp)
    fe40:	10800017 	ldw	r2,0(r2)
    fe44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    fe48:	e0bffc17 	ldw	r2,-16(fp)
    fe4c:	10c00a04 	addi	r3,r2,40
    fe50:	e0bffd17 	ldw	r2,-12(fp)
    fe54:	10800217 	ldw	r2,8(r2)
    fe58:	100f883a 	mov	r7,r2
    fe5c:	e1bfff17 	ldw	r6,-4(fp)
    fe60:	e17ffe17 	ldw	r5,-8(fp)
    fe64:	1809883a 	mov	r4,r3
    fe68:	00104480 	call	10448 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    fe6c:	e037883a 	mov	sp,fp
    fe70:	dfc00117 	ldw	ra,4(sp)
    fe74:	df000017 	ldw	fp,0(sp)
    fe78:	dec00204 	addi	sp,sp,8
    fe7c:	f800283a 	ret

0000fe80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    fe80:	defffa04 	addi	sp,sp,-24
    fe84:	dfc00515 	stw	ra,20(sp)
    fe88:	df000415 	stw	fp,16(sp)
    fe8c:	df000404 	addi	fp,sp,16
    fe90:	e13ffd15 	stw	r4,-12(fp)
    fe94:	e17ffe15 	stw	r5,-8(fp)
    fe98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fe9c:	e0bffd17 	ldw	r2,-12(fp)
    fea0:	10800017 	ldw	r2,0(r2)
    fea4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    fea8:	e0bffc17 	ldw	r2,-16(fp)
    feac:	10c00a04 	addi	r3,r2,40
    feb0:	e0bffd17 	ldw	r2,-12(fp)
    feb4:	10800217 	ldw	r2,8(r2)
    feb8:	100f883a 	mov	r7,r2
    febc:	e1bfff17 	ldw	r6,-4(fp)
    fec0:	e17ffe17 	ldw	r5,-8(fp)
    fec4:	1809883a 	mov	r4,r3
    fec8:	00106640 	call	10664 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    fecc:	e037883a 	mov	sp,fp
    fed0:	dfc00117 	ldw	ra,4(sp)
    fed4:	df000017 	ldw	fp,0(sp)
    fed8:	dec00204 	addi	sp,sp,8
    fedc:	f800283a 	ret

0000fee0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    fee0:	defffc04 	addi	sp,sp,-16
    fee4:	dfc00315 	stw	ra,12(sp)
    fee8:	df000215 	stw	fp,8(sp)
    feec:	df000204 	addi	fp,sp,8
    fef0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    fef4:	e0bfff17 	ldw	r2,-4(fp)
    fef8:	10800017 	ldw	r2,0(r2)
    fefc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ff00:	e0bffe17 	ldw	r2,-8(fp)
    ff04:	10c00a04 	addi	r3,r2,40
    ff08:	e0bfff17 	ldw	r2,-4(fp)
    ff0c:	10800217 	ldw	r2,8(r2)
    ff10:	100b883a 	mov	r5,r2
    ff14:	1809883a 	mov	r4,r3
    ff18:	00102f00 	call	102f0 <altera_avalon_jtag_uart_close>
}
    ff1c:	e037883a 	mov	sp,fp
    ff20:	dfc00117 	ldw	ra,4(sp)
    ff24:	df000017 	ldw	fp,0(sp)
    ff28:	dec00204 	addi	sp,sp,8
    ff2c:	f800283a 	ret

0000ff30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    ff30:	defffa04 	addi	sp,sp,-24
    ff34:	dfc00515 	stw	ra,20(sp)
    ff38:	df000415 	stw	fp,16(sp)
    ff3c:	df000404 	addi	fp,sp,16
    ff40:	e13ffd15 	stw	r4,-12(fp)
    ff44:	e17ffe15 	stw	r5,-8(fp)
    ff48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ff4c:	e0bffd17 	ldw	r2,-12(fp)
    ff50:	10800017 	ldw	r2,0(r2)
    ff54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ff58:	e0bffc17 	ldw	r2,-16(fp)
    ff5c:	10800a04 	addi	r2,r2,40
    ff60:	e1bfff17 	ldw	r6,-4(fp)
    ff64:	e17ffe17 	ldw	r5,-8(fp)
    ff68:	1009883a 	mov	r4,r2
    ff6c:	00103580 	call	10358 <altera_avalon_jtag_uart_ioctl>
}
    ff70:	e037883a 	mov	sp,fp
    ff74:	dfc00117 	ldw	ra,4(sp)
    ff78:	df000017 	ldw	fp,0(sp)
    ff7c:	dec00204 	addi	sp,sp,8
    ff80:	f800283a 	ret

0000ff84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ff84:	defffa04 	addi	sp,sp,-24
    ff88:	dfc00515 	stw	ra,20(sp)
    ff8c:	df000415 	stw	fp,16(sp)
    ff90:	df000404 	addi	fp,sp,16
    ff94:	e13ffd15 	stw	r4,-12(fp)
    ff98:	e17ffe15 	stw	r5,-8(fp)
    ff9c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ffa0:	e0bffd17 	ldw	r2,-12(fp)
    ffa4:	00c00044 	movi	r3,1
    ffa8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ffac:	e0bffd17 	ldw	r2,-12(fp)
    ffb0:	10800017 	ldw	r2,0(r2)
    ffb4:	10800104 	addi	r2,r2,4
    ffb8:	1007883a 	mov	r3,r2
    ffbc:	e0bffd17 	ldw	r2,-12(fp)
    ffc0:	10800817 	ldw	r2,32(r2)
    ffc4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ffc8:	e0bffe17 	ldw	r2,-8(fp)
    ffcc:	e0ffff17 	ldw	r3,-4(fp)
    ffd0:	d8000015 	stw	zero,0(sp)
    ffd4:	e1fffd17 	ldw	r7,-12(fp)
    ffd8:	01800074 	movhi	r6,1
    ffdc:	31801104 	addi	r6,r6,68
    ffe0:	180b883a 	mov	r5,r3
    ffe4:	1009883a 	mov	r4,r2
    ffe8:	0010f0c0 	call	10f0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ffec:	e0bffd17 	ldw	r2,-12(fp)
    fff0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    fff4:	e0bffd17 	ldw	r2,-12(fp)
    fff8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    fffc:	d0e6e617 	ldw	r3,-25704(gp)
   10000:	e1fffd17 	ldw	r7,-12(fp)
   10004:	01800074 	movhi	r6,1
   10008:	31809404 	addi	r6,r6,592
   1000c:	180b883a 	mov	r5,r3
   10010:	1009883a 	mov	r4,r2
   10014:	0010a940 	call	10a94 <alt_alarm_start>
   10018:	1000040e 	bge	r2,zero,1002c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1001c:	e0fffd17 	ldw	r3,-12(fp)
   10020:	00a00034 	movhi	r2,32768
   10024:	10bfffc4 	addi	r2,r2,-1
   10028:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1002c:	0001883a 	nop
   10030:	e037883a 	mov	sp,fp
   10034:	dfc00117 	ldw	ra,4(sp)
   10038:	df000017 	ldw	fp,0(sp)
   1003c:	dec00204 	addi	sp,sp,8
   10040:	f800283a 	ret

00010044 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   10044:	defff804 	addi	sp,sp,-32
   10048:	df000715 	stw	fp,28(sp)
   1004c:	df000704 	addi	fp,sp,28
   10050:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   10054:	e0bfff17 	ldw	r2,-4(fp)
   10058:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   1005c:	e0bffb17 	ldw	r2,-20(fp)
   10060:	10800017 	ldw	r2,0(r2)
   10064:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10068:	e0bffc17 	ldw	r2,-16(fp)
   1006c:	10800104 	addi	r2,r2,4
   10070:	10800037 	ldwio	r2,0(r2)
   10074:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   10078:	e0bffd17 	ldw	r2,-12(fp)
   1007c:	1080c00c 	andi	r2,r2,768
   10080:	10006d26 	beq	r2,zero,10238 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   10084:	e0bffd17 	ldw	r2,-12(fp)
   10088:	1080400c 	andi	r2,r2,256
   1008c:	10003526 	beq	r2,zero,10164 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   10090:	00800074 	movhi	r2,1
   10094:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10098:	e0bffb17 	ldw	r2,-20(fp)
   1009c:	10800a17 	ldw	r2,40(r2)
   100a0:	10800044 	addi	r2,r2,1
   100a4:	1081ffcc 	andi	r2,r2,2047
   100a8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   100ac:	e0bffb17 	ldw	r2,-20(fp)
   100b0:	10c00b17 	ldw	r3,44(r2)
   100b4:	e0bffe17 	ldw	r2,-8(fp)
   100b8:	18801526 	beq	r3,r2,10110 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   100bc:	e0bffc17 	ldw	r2,-16(fp)
   100c0:	10800037 	ldwio	r2,0(r2)
   100c4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   100c8:	e0bff917 	ldw	r2,-28(fp)
   100cc:	10a0000c 	andi	r2,r2,32768
   100d0:	10001126 	beq	r2,zero,10118 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   100d4:	e0bffb17 	ldw	r2,-20(fp)
   100d8:	10800a17 	ldw	r2,40(r2)
   100dc:	e0fff917 	ldw	r3,-28(fp)
   100e0:	1809883a 	mov	r4,r3
   100e4:	e0fffb17 	ldw	r3,-20(fp)
   100e8:	1885883a 	add	r2,r3,r2
   100ec:	10800e04 	addi	r2,r2,56
   100f0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   100f4:	e0bffb17 	ldw	r2,-20(fp)
   100f8:	10800a17 	ldw	r2,40(r2)
   100fc:	10800044 	addi	r2,r2,1
   10100:	10c1ffcc 	andi	r3,r2,2047
   10104:	e0bffb17 	ldw	r2,-20(fp)
   10108:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1010c:	003fe206 	br	10098 <__alt_data_end+0xff010098>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   10110:	0001883a 	nop
   10114:	00000106 	br	1011c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   10118:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1011c:	e0bff917 	ldw	r2,-28(fp)
   10120:	10bfffec 	andhi	r2,r2,65535
   10124:	10000f26 	beq	r2,zero,10164 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   10128:	e0bffb17 	ldw	r2,-20(fp)
   1012c:	10c00817 	ldw	r3,32(r2)
   10130:	00bfff84 	movi	r2,-2
   10134:	1886703a 	and	r3,r3,r2
   10138:	e0bffb17 	ldw	r2,-20(fp)
   1013c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   10140:	e0bffc17 	ldw	r2,-16(fp)
   10144:	10800104 	addi	r2,r2,4
   10148:	1007883a 	mov	r3,r2
   1014c:	e0bffb17 	ldw	r2,-20(fp)
   10150:	10800817 	ldw	r2,32(r2)
   10154:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10158:	e0bffc17 	ldw	r2,-16(fp)
   1015c:	10800104 	addi	r2,r2,4
   10160:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   10164:	e0bffd17 	ldw	r2,-12(fp)
   10168:	1080800c 	andi	r2,r2,512
   1016c:	103fbe26 	beq	r2,zero,10068 <__alt_data_end+0xff010068>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   10170:	e0bffd17 	ldw	r2,-12(fp)
   10174:	1004d43a 	srli	r2,r2,16
   10178:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1017c:	00001406 	br	101d0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   10180:	e0bffc17 	ldw	r2,-16(fp)
   10184:	e0fffb17 	ldw	r3,-20(fp)
   10188:	18c00d17 	ldw	r3,52(r3)
   1018c:	e13ffb17 	ldw	r4,-20(fp)
   10190:	20c7883a 	add	r3,r4,r3
   10194:	18c20e04 	addi	r3,r3,2104
   10198:	18c00003 	ldbu	r3,0(r3)
   1019c:	18c03fcc 	andi	r3,r3,255
   101a0:	18c0201c 	xori	r3,r3,128
   101a4:	18ffe004 	addi	r3,r3,-128
   101a8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	10800d17 	ldw	r2,52(r2)
   101b4:	10800044 	addi	r2,r2,1
   101b8:	10c1ffcc 	andi	r3,r2,2047
   101bc:	e0bffb17 	ldw	r2,-20(fp)
   101c0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   101c4:	e0bffa17 	ldw	r2,-24(fp)
   101c8:	10bfffc4 	addi	r2,r2,-1
   101cc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   101d0:	e0bffa17 	ldw	r2,-24(fp)
   101d4:	10000526 	beq	r2,zero,101ec <altera_avalon_jtag_uart_irq+0x1a8>
   101d8:	e0bffb17 	ldw	r2,-20(fp)
   101dc:	10c00d17 	ldw	r3,52(r2)
   101e0:	e0bffb17 	ldw	r2,-20(fp)
   101e4:	10800c17 	ldw	r2,48(r2)
   101e8:	18bfe51e 	bne	r3,r2,10180 <__alt_data_end+0xff010180>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   101ec:	e0bffa17 	ldw	r2,-24(fp)
   101f0:	103f9d26 	beq	r2,zero,10068 <__alt_data_end+0xff010068>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   101f4:	e0bffb17 	ldw	r2,-20(fp)
   101f8:	10c00817 	ldw	r3,32(r2)
   101fc:	00bfff44 	movi	r2,-3
   10200:	1886703a 	and	r3,r3,r2
   10204:	e0bffb17 	ldw	r2,-20(fp)
   10208:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1020c:	e0bffb17 	ldw	r2,-20(fp)
   10210:	10800017 	ldw	r2,0(r2)
   10214:	10800104 	addi	r2,r2,4
   10218:	1007883a 	mov	r3,r2
   1021c:	e0bffb17 	ldw	r2,-20(fp)
   10220:	10800817 	ldw	r2,32(r2)
   10224:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   10228:	e0bffc17 	ldw	r2,-16(fp)
   1022c:	10800104 	addi	r2,r2,4
   10230:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   10234:	003f8c06 	br	10068 <__alt_data_end+0xff010068>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   10238:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1023c:	0001883a 	nop
   10240:	e037883a 	mov	sp,fp
   10244:	df000017 	ldw	fp,0(sp)
   10248:	dec00104 	addi	sp,sp,4
   1024c:	f800283a 	ret

00010250 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   10250:	defff804 	addi	sp,sp,-32
   10254:	df000715 	stw	fp,28(sp)
   10258:	df000704 	addi	fp,sp,28
   1025c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   10260:	e0bffb17 	ldw	r2,-20(fp)
   10264:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   10268:	e0bff917 	ldw	r2,-28(fp)
   1026c:	10800017 	ldw	r2,0(r2)
   10270:	10800104 	addi	r2,r2,4
   10274:	10800037 	ldwio	r2,0(r2)
   10278:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1027c:	e0bffa17 	ldw	r2,-24(fp)
   10280:	1081000c 	andi	r2,r2,1024
   10284:	10000b26 	beq	r2,zero,102b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   10288:	e0bff917 	ldw	r2,-28(fp)
   1028c:	10800017 	ldw	r2,0(r2)
   10290:	10800104 	addi	r2,r2,4
   10294:	1007883a 	mov	r3,r2
   10298:	e0bff917 	ldw	r2,-28(fp)
   1029c:	10800817 	ldw	r2,32(r2)
   102a0:	10810014 	ori	r2,r2,1024
   102a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   102a8:	e0bff917 	ldw	r2,-28(fp)
   102ac:	10000915 	stw	zero,36(r2)
   102b0:	00000a06 	br	102dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   102b4:	e0bff917 	ldw	r2,-28(fp)
   102b8:	10c00917 	ldw	r3,36(r2)
   102bc:	00a00034 	movhi	r2,32768
   102c0:	10bfff04 	addi	r2,r2,-4
   102c4:	10c00536 	bltu	r2,r3,102dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   102c8:	e0bff917 	ldw	r2,-28(fp)
   102cc:	10800917 	ldw	r2,36(r2)
   102d0:	10c00044 	addi	r3,r2,1
   102d4:	e0bff917 	ldw	r2,-28(fp)
   102d8:	10c00915 	stw	r3,36(r2)
   102dc:	d0a6e617 	ldw	r2,-25704(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   102e0:	e037883a 	mov	sp,fp
   102e4:	df000017 	ldw	fp,0(sp)
   102e8:	dec00104 	addi	sp,sp,4
   102ec:	f800283a 	ret

000102f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   102f0:	defffd04 	addi	sp,sp,-12
   102f4:	df000215 	stw	fp,8(sp)
   102f8:	df000204 	addi	fp,sp,8
   102fc:	e13ffe15 	stw	r4,-8(fp)
   10300:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   10304:	00000506 	br	1031c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   10308:	e0bfff17 	ldw	r2,-4(fp)
   1030c:	1090000c 	andi	r2,r2,16384
   10310:	10000226 	beq	r2,zero,1031c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   10314:	00bffd44 	movi	r2,-11
   10318:	00000b06 	br	10348 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1031c:	e0bffe17 	ldw	r2,-8(fp)
   10320:	10c00d17 	ldw	r3,52(r2)
   10324:	e0bffe17 	ldw	r2,-8(fp)
   10328:	10800c17 	ldw	r2,48(r2)
   1032c:	18800526 	beq	r3,r2,10344 <altera_avalon_jtag_uart_close+0x54>
   10330:	e0bffe17 	ldw	r2,-8(fp)
   10334:	10c00917 	ldw	r3,36(r2)
   10338:	e0bffe17 	ldw	r2,-8(fp)
   1033c:	10800117 	ldw	r2,4(r2)
   10340:	18bff136 	bltu	r3,r2,10308 <__alt_data_end+0xff010308>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   10344:	0005883a 	mov	r2,zero
}
   10348:	e037883a 	mov	sp,fp
   1034c:	df000017 	ldw	fp,0(sp)
   10350:	dec00104 	addi	sp,sp,4
   10354:	f800283a 	ret

00010358 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   10358:	defffa04 	addi	sp,sp,-24
   1035c:	df000515 	stw	fp,20(sp)
   10360:	df000504 	addi	fp,sp,20
   10364:	e13ffd15 	stw	r4,-12(fp)
   10368:	e17ffe15 	stw	r5,-8(fp)
   1036c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   10370:	00bff9c4 	movi	r2,-25
   10374:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   10378:	e0bffe17 	ldw	r2,-8(fp)
   1037c:	10da8060 	cmpeqi	r3,r2,27137
   10380:	1800031e 	bne	r3,zero,10390 <altera_avalon_jtag_uart_ioctl+0x38>
   10384:	109a80a0 	cmpeqi	r2,r2,27138
   10388:	1000181e 	bne	r2,zero,103ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1038c:	00002906 	br	10434 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   10390:	e0bffd17 	ldw	r2,-12(fp)
   10394:	10c00117 	ldw	r3,4(r2)
   10398:	00a00034 	movhi	r2,32768
   1039c:	10bfffc4 	addi	r2,r2,-1
   103a0:	18802126 	beq	r3,r2,10428 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   103a4:	e0bfff17 	ldw	r2,-4(fp)
   103a8:	10800017 	ldw	r2,0(r2)
   103ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   103b0:	e0bffc17 	ldw	r2,-16(fp)
   103b4:	10800090 	cmplti	r2,r2,2
   103b8:	1000061e 	bne	r2,zero,103d4 <altera_avalon_jtag_uart_ioctl+0x7c>
   103bc:	e0fffc17 	ldw	r3,-16(fp)
   103c0:	00a00034 	movhi	r2,32768
   103c4:	10bfffc4 	addi	r2,r2,-1
   103c8:	18800226 	beq	r3,r2,103d4 <altera_avalon_jtag_uart_ioctl+0x7c>
   103cc:	e0bffc17 	ldw	r2,-16(fp)
   103d0:	00000206 	br	103dc <altera_avalon_jtag_uart_ioctl+0x84>
   103d4:	00a00034 	movhi	r2,32768
   103d8:	10bfff84 	addi	r2,r2,-2
   103dc:	e0fffd17 	ldw	r3,-12(fp)
   103e0:	18800115 	stw	r2,4(r3)
      rc = 0;
   103e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   103e8:	00000f06 	br	10428 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   103ec:	e0bffd17 	ldw	r2,-12(fp)
   103f0:	10c00117 	ldw	r3,4(r2)
   103f4:	00a00034 	movhi	r2,32768
   103f8:	10bfffc4 	addi	r2,r2,-1
   103fc:	18800c26 	beq	r3,r2,10430 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   10400:	e0bffd17 	ldw	r2,-12(fp)
   10404:	10c00917 	ldw	r3,36(r2)
   10408:	e0bffd17 	ldw	r2,-12(fp)
   1040c:	10800117 	ldw	r2,4(r2)
   10410:	1885803a 	cmpltu	r2,r3,r2
   10414:	10c03fcc 	andi	r3,r2,255
   10418:	e0bfff17 	ldw	r2,-4(fp)
   1041c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   10420:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   10424:	00000206 	br	10430 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   10428:	0001883a 	nop
   1042c:	00000106 	br	10434 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   10430:	0001883a 	nop

  default:
    break;
  }

  return rc;
   10434:	e0bffb17 	ldw	r2,-20(fp)
}
   10438:	e037883a 	mov	sp,fp
   1043c:	df000017 	ldw	fp,0(sp)
   10440:	dec00104 	addi	sp,sp,4
   10444:	f800283a 	ret

00010448 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   10448:	defff304 	addi	sp,sp,-52
   1044c:	dfc00c15 	stw	ra,48(sp)
   10450:	df000b15 	stw	fp,44(sp)
   10454:	df000b04 	addi	fp,sp,44
   10458:	e13ffc15 	stw	r4,-16(fp)
   1045c:	e17ffd15 	stw	r5,-12(fp)
   10460:	e1bffe15 	stw	r6,-8(fp)
   10464:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   10468:	e0bffd17 	ldw	r2,-12(fp)
   1046c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10470:	00004706 	br	10590 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   10474:	e0bffc17 	ldw	r2,-16(fp)
   10478:	10800a17 	ldw	r2,40(r2)
   1047c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   10480:	e0bffc17 	ldw	r2,-16(fp)
   10484:	10800b17 	ldw	r2,44(r2)
   10488:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1048c:	e0fff717 	ldw	r3,-36(fp)
   10490:	e0bff817 	ldw	r2,-32(fp)
   10494:	18800536 	bltu	r3,r2,104ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   10498:	e0fff717 	ldw	r3,-36(fp)
   1049c:	e0bff817 	ldw	r2,-32(fp)
   104a0:	1885c83a 	sub	r2,r3,r2
   104a4:	e0bff615 	stw	r2,-40(fp)
   104a8:	00000406 	br	104bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   104ac:	00c20004 	movi	r3,2048
   104b0:	e0bff817 	ldw	r2,-32(fp)
   104b4:	1885c83a 	sub	r2,r3,r2
   104b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   104bc:	e0bff617 	ldw	r2,-40(fp)
   104c0:	10001e26 	beq	r2,zero,1053c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   104c4:	e0fffe17 	ldw	r3,-8(fp)
   104c8:	e0bff617 	ldw	r2,-40(fp)
   104cc:	1880022e 	bgeu	r3,r2,104d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   104d0:	e0bffe17 	ldw	r2,-8(fp)
   104d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	10c00e04 	addi	r3,r2,56
   104e0:	e0bff817 	ldw	r2,-32(fp)
   104e4:	1885883a 	add	r2,r3,r2
   104e8:	e1bff617 	ldw	r6,-40(fp)
   104ec:	100b883a 	mov	r5,r2
   104f0:	e13ff517 	ldw	r4,-44(fp)
   104f4:	00087780 	call	8778 <memcpy>
      ptr   += n;
   104f8:	e0fff517 	ldw	r3,-44(fp)
   104fc:	e0bff617 	ldw	r2,-40(fp)
   10500:	1885883a 	add	r2,r3,r2
   10504:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   10508:	e0fffe17 	ldw	r3,-8(fp)
   1050c:	e0bff617 	ldw	r2,-40(fp)
   10510:	1885c83a 	sub	r2,r3,r2
   10514:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10518:	e0fff817 	ldw	r3,-32(fp)
   1051c:	e0bff617 	ldw	r2,-40(fp)
   10520:	1885883a 	add	r2,r3,r2
   10524:	10c1ffcc 	andi	r3,r2,2047
   10528:	e0bffc17 	ldw	r2,-16(fp)
   1052c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   10530:	e0bffe17 	ldw	r2,-8(fp)
   10534:	00bfcf16 	blt	zero,r2,10474 <__alt_data_end+0xff010474>
   10538:	00000106 	br	10540 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1053c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   10540:	e0fff517 	ldw	r3,-44(fp)
   10544:	e0bffd17 	ldw	r2,-12(fp)
   10548:	1880141e 	bne	r3,r2,1059c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1054c:	e0bfff17 	ldw	r2,-4(fp)
   10550:	1090000c 	andi	r2,r2,16384
   10554:	1000131e 	bne	r2,zero,105a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   10558:	0001883a 	nop
   1055c:	e0bffc17 	ldw	r2,-16(fp)
   10560:	10c00a17 	ldw	r3,40(r2)
   10564:	e0bff717 	ldw	r2,-36(fp)
   10568:	1880051e 	bne	r3,r2,10580 <altera_avalon_jtag_uart_read+0x138>
   1056c:	e0bffc17 	ldw	r2,-16(fp)
   10570:	10c00917 	ldw	r3,36(r2)
   10574:	e0bffc17 	ldw	r2,-16(fp)
   10578:	10800117 	ldw	r2,4(r2)
   1057c:	18bff736 	bltu	r3,r2,1055c <__alt_data_end+0xff01055c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   10580:	e0bffc17 	ldw	r2,-16(fp)
   10584:	10c00a17 	ldw	r3,40(r2)
   10588:	e0bff717 	ldw	r2,-36(fp)
   1058c:	18800726 	beq	r3,r2,105ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   10590:	e0bffe17 	ldw	r2,-8(fp)
   10594:	00bfb716 	blt	zero,r2,10474 <__alt_data_end+0xff010474>
   10598:	00000506 	br	105b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1059c:	0001883a 	nop
   105a0:	00000306 	br	105b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   105a4:	0001883a 	nop
   105a8:	00000106 	br	105b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   105ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   105b0:	e0fff517 	ldw	r3,-44(fp)
   105b4:	e0bffd17 	ldw	r2,-12(fp)
   105b8:	18801826 	beq	r3,r2,1061c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   105bc:	0005303a 	rdctl	r2,status
   105c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   105c4:	e0fffb17 	ldw	r3,-20(fp)
   105c8:	00bfff84 	movi	r2,-2
   105cc:	1884703a 	and	r2,r3,r2
   105d0:	1001703a 	wrctl	status,r2
  
  return context;
   105d4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   105d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   105dc:	e0bffc17 	ldw	r2,-16(fp)
   105e0:	10800817 	ldw	r2,32(r2)
   105e4:	10c00054 	ori	r3,r2,1
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   105f0:	e0bffc17 	ldw	r2,-16(fp)
   105f4:	10800017 	ldw	r2,0(r2)
   105f8:	10800104 	addi	r2,r2,4
   105fc:	1007883a 	mov	r3,r2
   10600:	e0bffc17 	ldw	r2,-16(fp)
   10604:	10800817 	ldw	r2,32(r2)
   10608:	18800035 	stwio	r2,0(r3)
   1060c:	e0bffa17 	ldw	r2,-24(fp)
   10610:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10614:	e0bff917 	ldw	r2,-28(fp)
   10618:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1061c:	e0fff517 	ldw	r3,-44(fp)
   10620:	e0bffd17 	ldw	r2,-12(fp)
   10624:	18800426 	beq	r3,r2,10638 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   10628:	e0fff517 	ldw	r3,-44(fp)
   1062c:	e0bffd17 	ldw	r2,-12(fp)
   10630:	1885c83a 	sub	r2,r3,r2
   10634:	00000606 	br	10650 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   10638:	e0bfff17 	ldw	r2,-4(fp)
   1063c:	1090000c 	andi	r2,r2,16384
   10640:	10000226 	beq	r2,zero,1064c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   10644:	00bffd44 	movi	r2,-11
   10648:	00000106 	br	10650 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1064c:	00bffec4 	movi	r2,-5
}
   10650:	e037883a 	mov	sp,fp
   10654:	dfc00117 	ldw	ra,4(sp)
   10658:	df000017 	ldw	fp,0(sp)
   1065c:	dec00204 	addi	sp,sp,8
   10660:	f800283a 	ret

00010664 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10664:	defff304 	addi	sp,sp,-52
   10668:	dfc00c15 	stw	ra,48(sp)
   1066c:	df000b15 	stw	fp,44(sp)
   10670:	df000b04 	addi	fp,sp,44
   10674:	e13ffc15 	stw	r4,-16(fp)
   10678:	e17ffd15 	stw	r5,-12(fp)
   1067c:	e1bffe15 	stw	r6,-8(fp)
   10680:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   10684:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   10688:	e0bffd17 	ldw	r2,-12(fp)
   1068c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10690:	00003706 	br	10770 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   10694:	e0bffc17 	ldw	r2,-16(fp)
   10698:	10800c17 	ldw	r2,48(r2)
   1069c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   106a0:	e0bffc17 	ldw	r2,-16(fp)
   106a4:	10800d17 	ldw	r2,52(r2)
   106a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   106ac:	e0fff917 	ldw	r3,-28(fp)
   106b0:	e0bff517 	ldw	r2,-44(fp)
   106b4:	1880062e 	bgeu	r3,r2,106d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   106b8:	e0fff517 	ldw	r3,-44(fp)
   106bc:	e0bff917 	ldw	r2,-28(fp)
   106c0:	1885c83a 	sub	r2,r3,r2
   106c4:	10bfffc4 	addi	r2,r2,-1
   106c8:	e0bff615 	stw	r2,-40(fp)
   106cc:	00000b06 	br	106fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   106d0:	e0bff517 	ldw	r2,-44(fp)
   106d4:	10000526 	beq	r2,zero,106ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   106d8:	00c20004 	movi	r3,2048
   106dc:	e0bff917 	ldw	r2,-28(fp)
   106e0:	1885c83a 	sub	r2,r3,r2
   106e4:	e0bff615 	stw	r2,-40(fp)
   106e8:	00000406 	br	106fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   106ec:	00c1ffc4 	movi	r3,2047
   106f0:	e0bff917 	ldw	r2,-28(fp)
   106f4:	1885c83a 	sub	r2,r3,r2
   106f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   106fc:	e0bff617 	ldw	r2,-40(fp)
   10700:	10001e26 	beq	r2,zero,1077c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   10704:	e0fffe17 	ldw	r3,-8(fp)
   10708:	e0bff617 	ldw	r2,-40(fp)
   1070c:	1880022e 	bgeu	r3,r2,10718 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   10710:	e0bffe17 	ldw	r2,-8(fp)
   10714:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   10718:	e0bffc17 	ldw	r2,-16(fp)
   1071c:	10c20e04 	addi	r3,r2,2104
   10720:	e0bff917 	ldw	r2,-28(fp)
   10724:	1885883a 	add	r2,r3,r2
   10728:	e1bff617 	ldw	r6,-40(fp)
   1072c:	e17ffd17 	ldw	r5,-12(fp)
   10730:	1009883a 	mov	r4,r2
   10734:	00087780 	call	8778 <memcpy>
      ptr   += n;
   10738:	e0fffd17 	ldw	r3,-12(fp)
   1073c:	e0bff617 	ldw	r2,-40(fp)
   10740:	1885883a 	add	r2,r3,r2
   10744:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   10748:	e0fffe17 	ldw	r3,-8(fp)
   1074c:	e0bff617 	ldw	r2,-40(fp)
   10750:	1885c83a 	sub	r2,r3,r2
   10754:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   10758:	e0fff917 	ldw	r3,-28(fp)
   1075c:	e0bff617 	ldw	r2,-40(fp)
   10760:	1885883a 	add	r2,r3,r2
   10764:	10c1ffcc 	andi	r3,r2,2047
   10768:	e0bffc17 	ldw	r2,-16(fp)
   1076c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   10770:	e0bffe17 	ldw	r2,-8(fp)
   10774:	00bfc716 	blt	zero,r2,10694 <__alt_data_end+0xff010694>
   10778:	00000106 	br	10780 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1077c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10780:	0005303a 	rdctl	r2,status
   10784:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10788:	e0fffb17 	ldw	r3,-20(fp)
   1078c:	00bfff84 	movi	r2,-2
   10790:	1884703a 	and	r2,r3,r2
   10794:	1001703a 	wrctl	status,r2
  
  return context;
   10798:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1079c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   107a0:	e0bffc17 	ldw	r2,-16(fp)
   107a4:	10800817 	ldw	r2,32(r2)
   107a8:	10c00094 	ori	r3,r2,2
   107ac:	e0bffc17 	ldw	r2,-16(fp)
   107b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   107b4:	e0bffc17 	ldw	r2,-16(fp)
   107b8:	10800017 	ldw	r2,0(r2)
   107bc:	10800104 	addi	r2,r2,4
   107c0:	1007883a 	mov	r3,r2
   107c4:	e0bffc17 	ldw	r2,-16(fp)
   107c8:	10800817 	ldw	r2,32(r2)
   107cc:	18800035 	stwio	r2,0(r3)
   107d0:	e0bffa17 	ldw	r2,-24(fp)
   107d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   107d8:	e0bff817 	ldw	r2,-32(fp)
   107dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   107e0:	e0bffe17 	ldw	r2,-8(fp)
   107e4:	0080100e 	bge	zero,r2,10828 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   107e8:	e0bfff17 	ldw	r2,-4(fp)
   107ec:	1090000c 	andi	r2,r2,16384
   107f0:	1000101e 	bne	r2,zero,10834 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   107f4:	0001883a 	nop
   107f8:	e0bffc17 	ldw	r2,-16(fp)
   107fc:	10c00d17 	ldw	r3,52(r2)
   10800:	e0bff517 	ldw	r2,-44(fp)
   10804:	1880051e 	bne	r3,r2,1081c <altera_avalon_jtag_uart_write+0x1b8>
   10808:	e0bffc17 	ldw	r2,-16(fp)
   1080c:	10c00917 	ldw	r3,36(r2)
   10810:	e0bffc17 	ldw	r2,-16(fp)
   10814:	10800117 	ldw	r2,4(r2)
   10818:	18bff736 	bltu	r3,r2,107f8 <__alt_data_end+0xff0107f8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1081c:	e0bffc17 	ldw	r2,-16(fp)
   10820:	10800917 	ldw	r2,36(r2)
   10824:	1000051e 	bne	r2,zero,1083c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   10828:	e0bffe17 	ldw	r2,-8(fp)
   1082c:	00bfd016 	blt	zero,r2,10770 <__alt_data_end+0xff010770>
   10830:	00000306 	br	10840 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   10834:	0001883a 	nop
   10838:	00000106 	br	10840 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1083c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   10840:	e0fffd17 	ldw	r3,-12(fp)
   10844:	e0bff717 	ldw	r2,-36(fp)
   10848:	18800426 	beq	r3,r2,1085c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1084c:	e0fffd17 	ldw	r3,-12(fp)
   10850:	e0bff717 	ldw	r2,-36(fp)
   10854:	1885c83a 	sub	r2,r3,r2
   10858:	00000606 	br	10874 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1085c:	e0bfff17 	ldw	r2,-4(fp)
   10860:	1090000c 	andi	r2,r2,16384
   10864:	10000226 	beq	r2,zero,10870 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   10868:	00bffd44 	movi	r2,-11
   1086c:	00000106 	br	10874 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   10870:	00bffec4 	movi	r2,-5
}
   10874:	e037883a 	mov	sp,fp
   10878:	dfc00117 	ldw	ra,4(sp)
   1087c:	df000017 	ldw	fp,0(sp)
   10880:	dec00204 	addi	sp,sp,8
   10884:	f800283a 	ret

00010888 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   10888:	defffa04 	addi	sp,sp,-24
   1088c:	dfc00515 	stw	ra,20(sp)
   10890:	df000415 	stw	fp,16(sp)
   10894:	df000404 	addi	fp,sp,16
   10898:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1089c:	0007883a 	mov	r3,zero
   108a0:	e0bfff17 	ldw	r2,-4(fp)
   108a4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   108a8:	e0bfff17 	ldw	r2,-4(fp)
   108ac:	10800104 	addi	r2,r2,4
   108b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   108b4:	0005303a 	rdctl	r2,status
   108b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   108bc:	e0fffd17 	ldw	r3,-12(fp)
   108c0:	00bfff84 	movi	r2,-2
   108c4:	1884703a 	and	r2,r3,r2
   108c8:	1001703a 	wrctl	status,r2
  
  return context;
   108cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   108d0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   108d4:	00115dc0 	call	115dc <alt_tick>
   108d8:	e0bffc17 	ldw	r2,-16(fp)
   108dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   108e0:	e0bffe17 	ldw	r2,-8(fp)
   108e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   108e8:	0001883a 	nop
   108ec:	e037883a 	mov	sp,fp
   108f0:	dfc00117 	ldw	ra,4(sp)
   108f4:	df000017 	ldw	fp,0(sp)
   108f8:	dec00204 	addi	sp,sp,8
   108fc:	f800283a 	ret

00010900 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   10900:	defff804 	addi	sp,sp,-32
   10904:	dfc00715 	stw	ra,28(sp)
   10908:	df000615 	stw	fp,24(sp)
   1090c:	df000604 	addi	fp,sp,24
   10910:	e13ffc15 	stw	r4,-16(fp)
   10914:	e17ffd15 	stw	r5,-12(fp)
   10918:	e1bffe15 	stw	r6,-8(fp)
   1091c:	e1ffff15 	stw	r7,-4(fp)
   10920:	e0bfff17 	ldw	r2,-4(fp)
   10924:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   10928:	d0a6e617 	ldw	r2,-25704(gp)
   1092c:	1000021e 	bne	r2,zero,10938 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   10930:	e0bffb17 	ldw	r2,-20(fp)
   10934:	d0a6e615 	stw	r2,-25704(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   10938:	e0bffc17 	ldw	r2,-16(fp)
   1093c:	10800104 	addi	r2,r2,4
   10940:	00c001c4 	movi	r3,7
   10944:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   10948:	d8000015 	stw	zero,0(sp)
   1094c:	e1fffc17 	ldw	r7,-16(fp)
   10950:	01800074 	movhi	r6,1
   10954:	31822204 	addi	r6,r6,2184
   10958:	e17ffe17 	ldw	r5,-8(fp)
   1095c:	e13ffd17 	ldw	r4,-12(fp)
   10960:	0010f0c0 	call	10f0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   10964:	0001883a 	nop
   10968:	e037883a 	mov	sp,fp
   1096c:	dfc00117 	ldw	ra,4(sp)
   10970:	df000017 	ldw	fp,0(sp)
   10974:	dec00204 	addi	sp,sp,8
   10978:	f800283a 	ret

0001097c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
   1097c:	defffe04 	addi	sp,sp,-8
   10980:	df000115 	stw	fp,4(sp)
   10984:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
   10988:	d0a6e317 	ldw	r2,-25716(gp)
   1098c:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
   10990:	d0a6e417 	ldw	r2,-25712(gp)
   10994:	1000021e 	bne	r2,zero,109a0 <alt_timestamp_start+0x24>
  {
    return -1;
   10998:	00bfffc4 	movi	r2,-1
   1099c:	00001106 	br	109e4 <alt_timestamp_start+0x68>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   109a0:	e0bfff17 	ldw	r2,-4(fp)
   109a4:	10800104 	addi	r2,r2,4
   109a8:	00c00204 	movi	r3,8
   109ac:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
   109b0:	e0bfff17 	ldw	r2,-4(fp)
   109b4:	10800204 	addi	r2,r2,8
   109b8:	00ffffd4 	movui	r3,65535
   109bc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
   109c0:	e0bfff17 	ldw	r2,-4(fp)
   109c4:	10800304 	addi	r2,r2,12
   109c8:	00ffffd4 	movui	r3,65535
   109cc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
   109d0:	e0bfff17 	ldw	r2,-4(fp)
   109d4:	10800104 	addi	r2,r2,4
   109d8:	00c00104 	movi	r3,4
   109dc:	10c00035 	stwio	r3,0(r2)
    } 
  }
  return 0;
   109e0:	0005883a 	mov	r2,zero
}
   109e4:	e037883a 	mov	sp,fp
   109e8:	df000017 	ldw	fp,0(sp)
   109ec:	dec00104 	addi	sp,sp,4
   109f0:	f800283a 	ret

000109f4 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
   109f4:	defffc04 	addi	sp,sp,-16
   109f8:	df000315 	stw	fp,12(sp)
   109fc:	df000304 	addi	fp,sp,12

  void* base = altera_avalon_timer_ts_base;
   10a00:	d0a6e317 	ldw	r2,-25716(gp)
   10a04:	e0bffd15 	stw	r2,-12(fp)

  if (!altera_avalon_timer_ts_freq)
   10a08:	d0a6e417 	ldw	r2,-25712(gp)
   10a0c:	1000021e 	bne	r2,zero,10a18 <alt_timestamp+0x24>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
   10a10:	00bfffc4 	movi	r2,-1
   10a14:	00001306 	br	10a64 <alt_timestamp+0x70>
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
   10a18:	e0bffd17 	ldw	r2,-12(fp)
   10a1c:	10800404 	addi	r2,r2,16
   10a20:	0007883a 	mov	r3,zero
   10a24:	10c00035 	stwio	r3,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
   10a28:	e0bffd17 	ldw	r2,-12(fp)
   10a2c:	10800404 	addi	r2,r2,16
   10a30:	10800037 	ldwio	r2,0(r2)
   10a34:	10bfffcc 	andi	r2,r2,65535
   10a38:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
   10a3c:	e0bffd17 	ldw	r2,-12(fp)
   10a40:	10800504 	addi	r2,r2,20
   10a44:	10800037 	ldwio	r2,0(r2)
   10a48:	10bfffcc 	andi	r2,r2,65535
   10a4c:	e0bfff15 	stw	r2,-4(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
   10a50:	e0bfff17 	ldw	r2,-4(fp)
   10a54:	1006943a 	slli	r3,r2,16
   10a58:	e0bffe17 	ldw	r2,-8(fp)
   10a5c:	1884b03a 	or	r2,r3,r2
   10a60:	0084303a 	nor	r2,zero,r2
#endif
  }
}
   10a64:	e037883a 	mov	sp,fp
   10a68:	df000017 	ldw	fp,0(sp)
   10a6c:	dec00104 	addi	sp,sp,4
   10a70:	f800283a 	ret

00010a74 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
   10a74:	deffff04 	addi	sp,sp,-4
   10a78:	df000015 	stw	fp,0(sp)
   10a7c:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
   10a80:	d0a6e417 	ldw	r2,-25712(gp)
}
   10a84:	e037883a 	mov	sp,fp
   10a88:	df000017 	ldw	fp,0(sp)
   10a8c:	dec00104 	addi	sp,sp,4
   10a90:	f800283a 	ret

00010a94 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   10a94:	defff504 	addi	sp,sp,-44
   10a98:	df000a15 	stw	fp,40(sp)
   10a9c:	df000a04 	addi	fp,sp,40
   10aa0:	e13ffc15 	stw	r4,-16(fp)
   10aa4:	e17ffd15 	stw	r5,-12(fp)
   10aa8:	e1bffe15 	stw	r6,-8(fp)
   10aac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   10ab0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   10ab4:	d0a6e617 	ldw	r2,-25704(gp)
  
  if (alt_ticks_per_second ())
   10ab8:	10003c26 	beq	r2,zero,10bac <alt_alarm_start+0x118>
  {
    if (alarm)
   10abc:	e0bffc17 	ldw	r2,-16(fp)
   10ac0:	10003826 	beq	r2,zero,10ba4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   10ac4:	e0bffc17 	ldw	r2,-16(fp)
   10ac8:	e0fffe17 	ldw	r3,-8(fp)
   10acc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   10ad0:	e0bffc17 	ldw	r2,-16(fp)
   10ad4:	e0ffff17 	ldw	r3,-4(fp)
   10ad8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10adc:	0005303a 	rdctl	r2,status
   10ae0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10ae4:	e0fff917 	ldw	r3,-28(fp)
   10ae8:	00bfff84 	movi	r2,-2
   10aec:	1884703a 	and	r2,r3,r2
   10af0:	1001703a 	wrctl	status,r2
  
  return context;
   10af4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   10af8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   10afc:	d0a6e717 	ldw	r2,-25700(gp)
      
      current_nticks = alt_nticks();
   10b00:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   10b04:	e0fffd17 	ldw	r3,-12(fp)
   10b08:	e0bff617 	ldw	r2,-40(fp)
   10b0c:	1885883a 	add	r2,r3,r2
   10b10:	10c00044 	addi	r3,r2,1
   10b14:	e0bffc17 	ldw	r2,-16(fp)
   10b18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   10b1c:	e0bffc17 	ldw	r2,-16(fp)
   10b20:	10c00217 	ldw	r3,8(r2)
   10b24:	e0bff617 	ldw	r2,-40(fp)
   10b28:	1880042e 	bgeu	r3,r2,10b3c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   10b2c:	e0bffc17 	ldw	r2,-16(fp)
   10b30:	00c00044 	movi	r3,1
   10b34:	10c00405 	stb	r3,16(r2)
   10b38:	00000206 	br	10b44 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   10b3c:	e0bffc17 	ldw	r2,-16(fp)
   10b40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   10b44:	e0bffc17 	ldw	r2,-16(fp)
   10b48:	d0e01004 	addi	r3,gp,-32704
   10b4c:	e0fffa15 	stw	r3,-24(fp)
   10b50:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10b54:	e0bffb17 	ldw	r2,-20(fp)
   10b58:	e0fffa17 	ldw	r3,-24(fp)
   10b5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10b60:	e0bffa17 	ldw	r2,-24(fp)
   10b64:	10c00017 	ldw	r3,0(r2)
   10b68:	e0bffb17 	ldw	r2,-20(fp)
   10b6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10b70:	e0bffa17 	ldw	r2,-24(fp)
   10b74:	10800017 	ldw	r2,0(r2)
   10b78:	e0fffb17 	ldw	r3,-20(fp)
   10b7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10b80:	e0bffa17 	ldw	r2,-24(fp)
   10b84:	e0fffb17 	ldw	r3,-20(fp)
   10b88:	10c00015 	stw	r3,0(r2)
   10b8c:	e0bff817 	ldw	r2,-32(fp)
   10b90:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b94:	e0bff717 	ldw	r2,-36(fp)
   10b98:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   10b9c:	0005883a 	mov	r2,zero
   10ba0:	00000306 	br	10bb0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   10ba4:	00bffa84 	movi	r2,-22
   10ba8:	00000106 	br	10bb0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   10bac:	00bfde84 	movi	r2,-134
  }
}
   10bb0:	e037883a 	mov	sp,fp
   10bb4:	df000017 	ldw	fp,0(sp)
   10bb8:	dec00104 	addi	sp,sp,4
   10bbc:	f800283a 	ret

00010bc0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10bc0:	defffa04 	addi	sp,sp,-24
   10bc4:	dfc00515 	stw	ra,20(sp)
   10bc8:	df000415 	stw	fp,16(sp)
   10bcc:	df000404 	addi	fp,sp,16
   10bd0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   10bd4:	008000c4 	movi	r2,3
   10bd8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   10bdc:	e0fffd17 	ldw	r3,-12(fp)
   10be0:	008003f4 	movhi	r2,15
   10be4:	10909004 	addi	r2,r2,16960
   10be8:	1885383a 	mul	r2,r3,r2
   10bec:	100b883a 	mov	r5,r2
   10bf0:	0100bef4 	movhi	r4,763
   10bf4:	213c2004 	addi	r4,r4,-3968
   10bf8:	0002b740 	call	2b74 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10bfc:	100b883a 	mov	r5,r2
   10c00:	01200034 	movhi	r4,32768
   10c04:	213fffc4 	addi	r4,r4,-1
   10c08:	0002b740 	call	2b74 <__udivsi3>
   10c0c:	100b883a 	mov	r5,r2
   10c10:	e13fff17 	ldw	r4,-4(fp)
   10c14:	0002b740 	call	2b74 <__udivsi3>
   10c18:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10c1c:	e0bffe17 	ldw	r2,-8(fp)
   10c20:	10002a26 	beq	r2,zero,10ccc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   10c24:	e03ffc15 	stw	zero,-16(fp)
   10c28:	00001706 	br	10c88 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10c2c:	00a00034 	movhi	r2,32768
   10c30:	10bfffc4 	addi	r2,r2,-1
   10c34:	10bfffc4 	addi	r2,r2,-1
   10c38:	103ffe1e 	bne	r2,zero,10c34 <__alt_data_end+0xff010c34>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   10c3c:	e0fffd17 	ldw	r3,-12(fp)
   10c40:	008003f4 	movhi	r2,15
   10c44:	10909004 	addi	r2,r2,16960
   10c48:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10c4c:	100b883a 	mov	r5,r2
   10c50:	0100bef4 	movhi	r4,763
   10c54:	213c2004 	addi	r4,r4,-3968
   10c58:	0002b740 	call	2b74 <__udivsi3>
   10c5c:	100b883a 	mov	r5,r2
   10c60:	01200034 	movhi	r4,32768
   10c64:	213fffc4 	addi	r4,r4,-1
   10c68:	0002b740 	call	2b74 <__udivsi3>
   10c6c:	1007883a 	mov	r3,r2
   10c70:	e0bfff17 	ldw	r2,-4(fp)
   10c74:	10c5c83a 	sub	r2,r2,r3
   10c78:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10c7c:	e0bffc17 	ldw	r2,-16(fp)
   10c80:	10800044 	addi	r2,r2,1
   10c84:	e0bffc15 	stw	r2,-16(fp)
   10c88:	e0fffc17 	ldw	r3,-16(fp)
   10c8c:	e0bffe17 	ldw	r2,-8(fp)
   10c90:	18bfe616 	blt	r3,r2,10c2c <__alt_data_end+0xff010c2c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10c94:	e0fffd17 	ldw	r3,-12(fp)
   10c98:	008003f4 	movhi	r2,15
   10c9c:	10909004 	addi	r2,r2,16960
   10ca0:	1885383a 	mul	r2,r3,r2
   10ca4:	100b883a 	mov	r5,r2
   10ca8:	0100bef4 	movhi	r4,763
   10cac:	213c2004 	addi	r4,r4,-3968
   10cb0:	0002b740 	call	2b74 <__udivsi3>
   10cb4:	1007883a 	mov	r3,r2
   10cb8:	e0bfff17 	ldw	r2,-4(fp)
   10cbc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10cc0:	10bfffc4 	addi	r2,r2,-1
   10cc4:	103ffe1e 	bne	r2,zero,10cc0 <__alt_data_end+0xff010cc0>
   10cc8:	00000d06 	br	10d00 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   10ccc:	e0fffd17 	ldw	r3,-12(fp)
   10cd0:	008003f4 	movhi	r2,15
   10cd4:	10909004 	addi	r2,r2,16960
   10cd8:	1885383a 	mul	r2,r3,r2
   10cdc:	100b883a 	mov	r5,r2
   10ce0:	0100bef4 	movhi	r4,763
   10ce4:	213c2004 	addi	r4,r4,-3968
   10ce8:	0002b740 	call	2b74 <__udivsi3>
   10cec:	1007883a 	mov	r3,r2
   10cf0:	e0bfff17 	ldw	r2,-4(fp)
   10cf4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10cf8:	10bfffc4 	addi	r2,r2,-1
   10cfc:	00bffe16 	blt	zero,r2,10cf8 <__alt_data_end+0xff010cf8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   10d00:	0005883a 	mov	r2,zero
}
   10d04:	e037883a 	mov	sp,fp
   10d08:	dfc00117 	ldw	ra,4(sp)
   10d0c:	df000017 	ldw	fp,0(sp)
   10d10:	dec00204 	addi	sp,sp,8
   10d14:	f800283a 	ret

00010d18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10d18:	deffff04 	addi	sp,sp,-4
   10d1c:	df000015 	stw	fp,0(sp)
   10d20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10d24:	0001883a 	nop
   10d28:	e037883a 	mov	sp,fp
   10d2c:	df000017 	ldw	fp,0(sp)
   10d30:	dec00104 	addi	sp,sp,4
   10d34:	f800283a 	ret

00010d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10d38:	defffe04 	addi	sp,sp,-8
   10d3c:	dfc00115 	stw	ra,4(sp)
   10d40:	df000015 	stw	fp,0(sp)
   10d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10d48:	d0a00d17 	ldw	r2,-32716(gp)
   10d4c:	10000326 	beq	r2,zero,10d5c <alt_get_errno+0x24>
   10d50:	d0a00d17 	ldw	r2,-32716(gp)
   10d54:	103ee83a 	callr	r2
   10d58:	00000106 	br	10d60 <alt_get_errno+0x28>
   10d5c:	d0a6dc04 	addi	r2,gp,-25744
}
   10d60:	e037883a 	mov	sp,fp
   10d64:	dfc00117 	ldw	ra,4(sp)
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00204 	addi	sp,sp,8
   10d70:	f800283a 	ret

00010d74 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10d74:	defffa04 	addi	sp,sp,-24
   10d78:	dfc00515 	stw	ra,20(sp)
   10d7c:	df000415 	stw	fp,16(sp)
   10d80:	df000404 	addi	fp,sp,16
   10d84:	e13ffe15 	stw	r4,-8(fp)
   10d88:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10d8c:	e0bffe17 	ldw	r2,-8(fp)
   10d90:	10000326 	beq	r2,zero,10da0 <alt_dev_llist_insert+0x2c>
   10d94:	e0bffe17 	ldw	r2,-8(fp)
   10d98:	10800217 	ldw	r2,8(r2)
   10d9c:	1000061e 	bne	r2,zero,10db8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   10da0:	0010d380 	call	10d38 <alt_get_errno>
   10da4:	1007883a 	mov	r3,r2
   10da8:	00800584 	movi	r2,22
   10dac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   10db0:	00bffa84 	movi	r2,-22
   10db4:	00001306 	br	10e04 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   10db8:	e0bffe17 	ldw	r2,-8(fp)
   10dbc:	e0ffff17 	ldw	r3,-4(fp)
   10dc0:	e0fffc15 	stw	r3,-16(fp)
   10dc4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10dc8:	e0bffd17 	ldw	r2,-12(fp)
   10dcc:	e0fffc17 	ldw	r3,-16(fp)
   10dd0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   10dd4:	e0bffc17 	ldw	r2,-16(fp)
   10dd8:	10c00017 	ldw	r3,0(r2)
   10ddc:	e0bffd17 	ldw	r2,-12(fp)
   10de0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   10de4:	e0bffc17 	ldw	r2,-16(fp)
   10de8:	10800017 	ldw	r2,0(r2)
   10dec:	e0fffd17 	ldw	r3,-12(fp)
   10df0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   10df4:	e0bffc17 	ldw	r2,-16(fp)
   10df8:	e0fffd17 	ldw	r3,-12(fp)
   10dfc:	10c00015 	stw	r3,0(r2)

  return 0;  
   10e00:	0005883a 	mov	r2,zero
}
   10e04:	e037883a 	mov	sp,fp
   10e08:	dfc00117 	ldw	ra,4(sp)
   10e0c:	df000017 	ldw	fp,0(sp)
   10e10:	dec00204 	addi	sp,sp,8
   10e14:	f800283a 	ret

00010e18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   10e18:	defffd04 	addi	sp,sp,-12
   10e1c:	dfc00215 	stw	ra,8(sp)
   10e20:	df000115 	stw	fp,4(sp)
   10e24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10e28:	00800074 	movhi	r2,1
   10e2c:	10878004 	addi	r2,r2,7680
   10e30:	e0bfff15 	stw	r2,-4(fp)
   10e34:	00000606 	br	10e50 <_do_ctors+0x38>
        (*ctor) (); 
   10e38:	e0bfff17 	ldw	r2,-4(fp)
   10e3c:	10800017 	ldw	r2,0(r2)
   10e40:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   10e44:	e0bfff17 	ldw	r2,-4(fp)
   10e48:	10bfff04 	addi	r2,r2,-4
   10e4c:	e0bfff15 	stw	r2,-4(fp)
   10e50:	e0ffff17 	ldw	r3,-4(fp)
   10e54:	00800074 	movhi	r2,1
   10e58:	10878104 	addi	r2,r2,7684
   10e5c:	18bff62e 	bgeu	r3,r2,10e38 <__alt_data_end+0xff010e38>
        (*ctor) (); 
}
   10e60:	0001883a 	nop
   10e64:	e037883a 	mov	sp,fp
   10e68:	dfc00117 	ldw	ra,4(sp)
   10e6c:	df000017 	ldw	fp,0(sp)
   10e70:	dec00204 	addi	sp,sp,8
   10e74:	f800283a 	ret

00010e78 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   10e78:	defffd04 	addi	sp,sp,-12
   10e7c:	dfc00215 	stw	ra,8(sp)
   10e80:	df000115 	stw	fp,4(sp)
   10e84:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10e88:	00800074 	movhi	r2,1
   10e8c:	10878004 	addi	r2,r2,7680
   10e90:	e0bfff15 	stw	r2,-4(fp)
   10e94:	00000606 	br	10eb0 <_do_dtors+0x38>
        (*dtor) (); 
   10e98:	e0bfff17 	ldw	r2,-4(fp)
   10e9c:	10800017 	ldw	r2,0(r2)
   10ea0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   10ea4:	e0bfff17 	ldw	r2,-4(fp)
   10ea8:	10bfff04 	addi	r2,r2,-4
   10eac:	e0bfff15 	stw	r2,-4(fp)
   10eb0:	e0ffff17 	ldw	r3,-4(fp)
   10eb4:	00800074 	movhi	r2,1
   10eb8:	10878104 	addi	r2,r2,7684
   10ebc:	18bff62e 	bgeu	r3,r2,10e98 <__alt_data_end+0xff010e98>
        (*dtor) (); 
}
   10ec0:	0001883a 	nop
   10ec4:	e037883a 	mov	sp,fp
   10ec8:	dfc00117 	ldw	ra,4(sp)
   10ecc:	df000017 	ldw	fp,0(sp)
   10ed0:	dec00204 	addi	sp,sp,8
   10ed4:	f800283a 	ret

00010ed8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10ed8:	defffe04 	addi	sp,sp,-8
   10edc:	dfc00115 	stw	ra,4(sp)
   10ee0:	df000015 	stw	fp,0(sp)
   10ee4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   10ee8:	01440004 	movi	r5,4096
   10eec:	0009883a 	mov	r4,zero
   10ef0:	00119440 	call	11944 <alt_icache_flush>
#endif
}
   10ef4:	0001883a 	nop
   10ef8:	e037883a 	mov	sp,fp
   10efc:	dfc00117 	ldw	ra,4(sp)
   10f00:	df000017 	ldw	fp,0(sp)
   10f04:	dec00204 	addi	sp,sp,8
   10f08:	f800283a 	ret

00010f0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   10f0c:	defff904 	addi	sp,sp,-28
   10f10:	dfc00615 	stw	ra,24(sp)
   10f14:	df000515 	stw	fp,20(sp)
   10f18:	df000504 	addi	fp,sp,20
   10f1c:	e13ffc15 	stw	r4,-16(fp)
   10f20:	e17ffd15 	stw	r5,-12(fp)
   10f24:	e1bffe15 	stw	r6,-8(fp)
   10f28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   10f2c:	e0800217 	ldw	r2,8(fp)
   10f30:	d8800015 	stw	r2,0(sp)
   10f34:	e1ffff17 	ldw	r7,-4(fp)
   10f38:	e1bffe17 	ldw	r6,-8(fp)
   10f3c:	e17ffd17 	ldw	r5,-12(fp)
   10f40:	e13ffc17 	ldw	r4,-16(fp)
   10f44:	00110bc0 	call	110bc <alt_iic_isr_register>
}  
   10f48:	e037883a 	mov	sp,fp
   10f4c:	dfc00117 	ldw	ra,4(sp)
   10f50:	df000017 	ldw	fp,0(sp)
   10f54:	dec00204 	addi	sp,sp,8
   10f58:	f800283a 	ret

00010f5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   10f5c:	defff904 	addi	sp,sp,-28
   10f60:	df000615 	stw	fp,24(sp)
   10f64:	df000604 	addi	fp,sp,24
   10f68:	e13ffe15 	stw	r4,-8(fp)
   10f6c:	e17fff15 	stw	r5,-4(fp)
   10f70:	e0bfff17 	ldw	r2,-4(fp)
   10f74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f78:	0005303a 	rdctl	r2,status
   10f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f80:	e0fffb17 	ldw	r3,-20(fp)
   10f84:	00bfff84 	movi	r2,-2
   10f88:	1884703a 	and	r2,r3,r2
   10f8c:	1001703a 	wrctl	status,r2
  
  return context;
   10f90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   10f94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   10f98:	00c00044 	movi	r3,1
   10f9c:	e0bffa17 	ldw	r2,-24(fp)
   10fa0:	1884983a 	sll	r2,r3,r2
   10fa4:	1007883a 	mov	r3,r2
   10fa8:	d0a6e517 	ldw	r2,-25708(gp)
   10fac:	1884b03a 	or	r2,r3,r2
   10fb0:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10fb4:	d0a6e517 	ldw	r2,-25708(gp)
   10fb8:	100170fa 	wrctl	ienable,r2
   10fbc:	e0bffc17 	ldw	r2,-16(fp)
   10fc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10fc4:	e0bffd17 	ldw	r2,-12(fp)
   10fc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   10fcc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   10fd0:	0001883a 	nop
}
   10fd4:	e037883a 	mov	sp,fp
   10fd8:	df000017 	ldw	fp,0(sp)
   10fdc:	dec00104 	addi	sp,sp,4
   10fe0:	f800283a 	ret

00010fe4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   10fe4:	defff904 	addi	sp,sp,-28
   10fe8:	df000615 	stw	fp,24(sp)
   10fec:	df000604 	addi	fp,sp,24
   10ff0:	e13ffe15 	stw	r4,-8(fp)
   10ff4:	e17fff15 	stw	r5,-4(fp)
   10ff8:	e0bfff17 	ldw	r2,-4(fp)
   10ffc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11000:	0005303a 	rdctl	r2,status
   11004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11008:	e0fffb17 	ldw	r3,-20(fp)
   1100c:	00bfff84 	movi	r2,-2
   11010:	1884703a 	and	r2,r3,r2
   11014:	1001703a 	wrctl	status,r2
  
  return context;
   11018:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1101c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   11020:	00c00044 	movi	r3,1
   11024:	e0bffa17 	ldw	r2,-24(fp)
   11028:	1884983a 	sll	r2,r3,r2
   1102c:	0084303a 	nor	r2,zero,r2
   11030:	1007883a 	mov	r3,r2
   11034:	d0a6e517 	ldw	r2,-25708(gp)
   11038:	1884703a 	and	r2,r3,r2
   1103c:	d0a6e515 	stw	r2,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   11040:	d0a6e517 	ldw	r2,-25708(gp)
   11044:	100170fa 	wrctl	ienable,r2
   11048:	e0bffc17 	ldw	r2,-16(fp)
   1104c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11050:	e0bffd17 	ldw	r2,-12(fp)
   11054:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   11058:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1105c:	0001883a 	nop
}
   11060:	e037883a 	mov	sp,fp
   11064:	df000017 	ldw	fp,0(sp)
   11068:	dec00104 	addi	sp,sp,4
   1106c:	f800283a 	ret

00011070 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   11070:	defffc04 	addi	sp,sp,-16
   11074:	df000315 	stw	fp,12(sp)
   11078:	df000304 	addi	fp,sp,12
   1107c:	e13ffe15 	stw	r4,-8(fp)
   11080:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   11084:	000530fa 	rdctl	r2,ienable
   11088:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1108c:	00c00044 	movi	r3,1
   11090:	e0bfff17 	ldw	r2,-4(fp)
   11094:	1884983a 	sll	r2,r3,r2
   11098:	1007883a 	mov	r3,r2
   1109c:	e0bffd17 	ldw	r2,-12(fp)
   110a0:	1884703a 	and	r2,r3,r2
   110a4:	1004c03a 	cmpne	r2,r2,zero
   110a8:	10803fcc 	andi	r2,r2,255
}
   110ac:	e037883a 	mov	sp,fp
   110b0:	df000017 	ldw	fp,0(sp)
   110b4:	dec00104 	addi	sp,sp,4
   110b8:	f800283a 	ret

000110bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   110bc:	defff504 	addi	sp,sp,-44
   110c0:	dfc00a15 	stw	ra,40(sp)
   110c4:	df000915 	stw	fp,36(sp)
   110c8:	df000904 	addi	fp,sp,36
   110cc:	e13ffc15 	stw	r4,-16(fp)
   110d0:	e17ffd15 	stw	r5,-12(fp)
   110d4:	e1bffe15 	stw	r6,-8(fp)
   110d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   110dc:	00bffa84 	movi	r2,-22
   110e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   110e4:	e0bffd17 	ldw	r2,-12(fp)
   110e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   110ec:	e0bff817 	ldw	r2,-32(fp)
   110f0:	10800808 	cmpgei	r2,r2,32
   110f4:	1000271e 	bne	r2,zero,11194 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   110f8:	0005303a 	rdctl	r2,status
   110fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11100:	e0fffb17 	ldw	r3,-20(fp)
   11104:	00bfff84 	movi	r2,-2
   11108:	1884703a 	and	r2,r3,r2
   1110c:	1001703a 	wrctl	status,r2
  
  return context;
   11110:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   11114:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   11118:	00800074 	movhi	r2,1
   1111c:	10971104 	addi	r2,r2,23620
   11120:	e0fff817 	ldw	r3,-32(fp)
   11124:	180690fa 	slli	r3,r3,3
   11128:	10c5883a 	add	r2,r2,r3
   1112c:	e0fffe17 	ldw	r3,-8(fp)
   11130:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   11134:	00800074 	movhi	r2,1
   11138:	10971104 	addi	r2,r2,23620
   1113c:	e0fff817 	ldw	r3,-32(fp)
   11140:	180690fa 	slli	r3,r3,3
   11144:	10c5883a 	add	r2,r2,r3
   11148:	10800104 	addi	r2,r2,4
   1114c:	e0ffff17 	ldw	r3,-4(fp)
   11150:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   11154:	e0bffe17 	ldw	r2,-8(fp)
   11158:	10000526 	beq	r2,zero,11170 <alt_iic_isr_register+0xb4>
   1115c:	e0bff817 	ldw	r2,-32(fp)
   11160:	100b883a 	mov	r5,r2
   11164:	e13ffc17 	ldw	r4,-16(fp)
   11168:	0010f5c0 	call	10f5c <alt_ic_irq_enable>
   1116c:	00000406 	br	11180 <alt_iic_isr_register+0xc4>
   11170:	e0bff817 	ldw	r2,-32(fp)
   11174:	100b883a 	mov	r5,r2
   11178:	e13ffc17 	ldw	r4,-16(fp)
   1117c:	0010fe40 	call	10fe4 <alt_ic_irq_disable>
   11180:	e0bff715 	stw	r2,-36(fp)
   11184:	e0bffa17 	ldw	r2,-24(fp)
   11188:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1118c:	e0bff917 	ldw	r2,-28(fp)
   11190:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   11194:	e0bff717 	ldw	r2,-36(fp)
}
   11198:	e037883a 	mov	sp,fp
   1119c:	dfc00117 	ldw	ra,4(sp)
   111a0:	df000017 	ldw	fp,0(sp)
   111a4:	dec00204 	addi	sp,sp,8
   111a8:	f800283a 	ret

000111ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   111ac:	defff904 	addi	sp,sp,-28
   111b0:	dfc00615 	stw	ra,24(sp)
   111b4:	df000515 	stw	fp,20(sp)
   111b8:	df000504 	addi	fp,sp,20
   111bc:	e13ffc15 	stw	r4,-16(fp)
   111c0:	e17ffd15 	stw	r5,-12(fp)
   111c4:	e1bffe15 	stw	r6,-8(fp)
   111c8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   111cc:	e1bfff17 	ldw	r6,-4(fp)
   111d0:	e17ffe17 	ldw	r5,-8(fp)
   111d4:	e13ffd17 	ldw	r4,-12(fp)
   111d8:	00113ec0 	call	113ec <open>
   111dc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   111e0:	e0bffb17 	ldw	r2,-20(fp)
   111e4:	10001c16 	blt	r2,zero,11258 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   111e8:	00800074 	movhi	r2,1
   111ec:	108ba604 	addi	r2,r2,11928
   111f0:	e0fffb17 	ldw	r3,-20(fp)
   111f4:	18c00324 	muli	r3,r3,12
   111f8:	10c5883a 	add	r2,r2,r3
   111fc:	10c00017 	ldw	r3,0(r2)
   11200:	e0bffc17 	ldw	r2,-16(fp)
   11204:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   11208:	00800074 	movhi	r2,1
   1120c:	108ba604 	addi	r2,r2,11928
   11210:	e0fffb17 	ldw	r3,-20(fp)
   11214:	18c00324 	muli	r3,r3,12
   11218:	10c5883a 	add	r2,r2,r3
   1121c:	10800104 	addi	r2,r2,4
   11220:	10c00017 	ldw	r3,0(r2)
   11224:	e0bffc17 	ldw	r2,-16(fp)
   11228:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1122c:	00800074 	movhi	r2,1
   11230:	108ba604 	addi	r2,r2,11928
   11234:	e0fffb17 	ldw	r3,-20(fp)
   11238:	18c00324 	muli	r3,r3,12
   1123c:	10c5883a 	add	r2,r2,r3
   11240:	10800204 	addi	r2,r2,8
   11244:	10c00017 	ldw	r3,0(r2)
   11248:	e0bffc17 	ldw	r2,-16(fp)
   1124c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   11250:	e13ffb17 	ldw	r4,-20(fp)
   11254:	000fac00 	call	fac0 <alt_release_fd>
  }
} 
   11258:	0001883a 	nop
   1125c:	e037883a 	mov	sp,fp
   11260:	dfc00117 	ldw	ra,4(sp)
   11264:	df000017 	ldw	fp,0(sp)
   11268:	dec00204 	addi	sp,sp,8
   1126c:	f800283a 	ret

00011270 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   11270:	defffb04 	addi	sp,sp,-20
   11274:	dfc00415 	stw	ra,16(sp)
   11278:	df000315 	stw	fp,12(sp)
   1127c:	df000304 	addi	fp,sp,12
   11280:	e13ffd15 	stw	r4,-12(fp)
   11284:	e17ffe15 	stw	r5,-8(fp)
   11288:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1128c:	01c07fc4 	movi	r7,511
   11290:	01800044 	movi	r6,1
   11294:	e17ffd17 	ldw	r5,-12(fp)
   11298:	01000074 	movhi	r4,1
   1129c:	210ba904 	addi	r4,r4,11940
   112a0:	00111ac0 	call	111ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   112a4:	01c07fc4 	movi	r7,511
   112a8:	000d883a 	mov	r6,zero
   112ac:	e17ffe17 	ldw	r5,-8(fp)
   112b0:	01000074 	movhi	r4,1
   112b4:	210ba604 	addi	r4,r4,11928
   112b8:	00111ac0 	call	111ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   112bc:	01c07fc4 	movi	r7,511
   112c0:	01800044 	movi	r6,1
   112c4:	e17fff17 	ldw	r5,-4(fp)
   112c8:	01000074 	movhi	r4,1
   112cc:	210bac04 	addi	r4,r4,11952
   112d0:	00111ac0 	call	111ac <alt_open_fd>
}  
   112d4:	0001883a 	nop
   112d8:	e037883a 	mov	sp,fp
   112dc:	dfc00117 	ldw	ra,4(sp)
   112e0:	df000017 	ldw	fp,0(sp)
   112e4:	dec00204 	addi	sp,sp,8
   112e8:	f800283a 	ret

000112ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   112ec:	defffe04 	addi	sp,sp,-8
   112f0:	dfc00115 	stw	ra,4(sp)
   112f4:	df000015 	stw	fp,0(sp)
   112f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   112fc:	d0a00d17 	ldw	r2,-32716(gp)
   11300:	10000326 	beq	r2,zero,11310 <alt_get_errno+0x24>
   11304:	d0a00d17 	ldw	r2,-32716(gp)
   11308:	103ee83a 	callr	r2
   1130c:	00000106 	br	11314 <alt_get_errno+0x28>
   11310:	d0a6dc04 	addi	r2,gp,-25744
}
   11314:	e037883a 	mov	sp,fp
   11318:	dfc00117 	ldw	ra,4(sp)
   1131c:	df000017 	ldw	fp,0(sp)
   11320:	dec00204 	addi	sp,sp,8
   11324:	f800283a 	ret

00011328 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   11328:	defffd04 	addi	sp,sp,-12
   1132c:	df000215 	stw	fp,8(sp)
   11330:	df000204 	addi	fp,sp,8
   11334:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   11338:	e0bfff17 	ldw	r2,-4(fp)
   1133c:	10800217 	ldw	r2,8(r2)
   11340:	10d00034 	orhi	r3,r2,16384
   11344:	e0bfff17 	ldw	r2,-4(fp)
   11348:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1134c:	e03ffe15 	stw	zero,-8(fp)
   11350:	00001d06 	br	113c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11354:	00800074 	movhi	r2,1
   11358:	108ba604 	addi	r2,r2,11928
   1135c:	e0fffe17 	ldw	r3,-8(fp)
   11360:	18c00324 	muli	r3,r3,12
   11364:	10c5883a 	add	r2,r2,r3
   11368:	10c00017 	ldw	r3,0(r2)
   1136c:	e0bfff17 	ldw	r2,-4(fp)
   11370:	10800017 	ldw	r2,0(r2)
   11374:	1880111e 	bne	r3,r2,113bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   11378:	00800074 	movhi	r2,1
   1137c:	108ba604 	addi	r2,r2,11928
   11380:	e0fffe17 	ldw	r3,-8(fp)
   11384:	18c00324 	muli	r3,r3,12
   11388:	10c5883a 	add	r2,r2,r3
   1138c:	10800204 	addi	r2,r2,8
   11390:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   11394:	1000090e 	bge	r2,zero,113bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   11398:	e0bffe17 	ldw	r2,-8(fp)
   1139c:	10c00324 	muli	r3,r2,12
   113a0:	00800074 	movhi	r2,1
   113a4:	108ba604 	addi	r2,r2,11928
   113a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   113ac:	e0bfff17 	ldw	r2,-4(fp)
   113b0:	18800226 	beq	r3,r2,113bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   113b4:	00bffcc4 	movi	r2,-13
   113b8:	00000806 	br	113dc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   113bc:	e0bffe17 	ldw	r2,-8(fp)
   113c0:	10800044 	addi	r2,r2,1
   113c4:	e0bffe15 	stw	r2,-8(fp)
   113c8:	d0a00c17 	ldw	r2,-32720(gp)
   113cc:	1007883a 	mov	r3,r2
   113d0:	e0bffe17 	ldw	r2,-8(fp)
   113d4:	18bfdf2e 	bgeu	r3,r2,11354 <__alt_data_end+0xff011354>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   113d8:	0005883a 	mov	r2,zero
}
   113dc:	e037883a 	mov	sp,fp
   113e0:	df000017 	ldw	fp,0(sp)
   113e4:	dec00104 	addi	sp,sp,4
   113e8:	f800283a 	ret

000113ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   113ec:	defff604 	addi	sp,sp,-40
   113f0:	dfc00915 	stw	ra,36(sp)
   113f4:	df000815 	stw	fp,32(sp)
   113f8:	df000804 	addi	fp,sp,32
   113fc:	e13ffd15 	stw	r4,-12(fp)
   11400:	e17ffe15 	stw	r5,-8(fp)
   11404:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   11408:	00bfffc4 	movi	r2,-1
   1140c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   11410:	00bffb44 	movi	r2,-19
   11414:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   11418:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1141c:	d1600a04 	addi	r5,gp,-32728
   11420:	e13ffd17 	ldw	r4,-12(fp)
   11424:	00117080 	call	11708 <alt_find_dev>
   11428:	e0bff815 	stw	r2,-32(fp)
   1142c:	e0bff817 	ldw	r2,-32(fp)
   11430:	1000051e 	bne	r2,zero,11448 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   11434:	e13ffd17 	ldw	r4,-12(fp)
   11438:	00117980 	call	11798 <alt_find_file>
   1143c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   11440:	00800044 	movi	r2,1
   11444:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   11448:	e0bff817 	ldw	r2,-32(fp)
   1144c:	10002926 	beq	r2,zero,114f4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   11450:	e13ff817 	ldw	r4,-32(fp)
   11454:	00118a00 	call	118a0 <alt_get_fd>
   11458:	e0bff915 	stw	r2,-28(fp)
   1145c:	e0bff917 	ldw	r2,-28(fp)
   11460:	1000030e 	bge	r2,zero,11470 <open+0x84>
    {
      status = index;
   11464:	e0bff917 	ldw	r2,-28(fp)
   11468:	e0bffa15 	stw	r2,-24(fp)
   1146c:	00002306 	br	114fc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   11470:	e0bff917 	ldw	r2,-28(fp)
   11474:	10c00324 	muli	r3,r2,12
   11478:	00800074 	movhi	r2,1
   1147c:	108ba604 	addi	r2,r2,11928
   11480:	1885883a 	add	r2,r3,r2
   11484:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   11488:	e0fffe17 	ldw	r3,-8(fp)
   1148c:	00900034 	movhi	r2,16384
   11490:	10bfffc4 	addi	r2,r2,-1
   11494:	1886703a 	and	r3,r3,r2
   11498:	e0bffc17 	ldw	r2,-16(fp)
   1149c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   114a0:	e0bffb17 	ldw	r2,-20(fp)
   114a4:	1000051e 	bne	r2,zero,114bc <open+0xd0>
   114a8:	e13ffc17 	ldw	r4,-16(fp)
   114ac:	00113280 	call	11328 <alt_file_locked>
   114b0:	e0bffa15 	stw	r2,-24(fp)
   114b4:	e0bffa17 	ldw	r2,-24(fp)
   114b8:	10001016 	blt	r2,zero,114fc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   114bc:	e0bff817 	ldw	r2,-32(fp)
   114c0:	10800317 	ldw	r2,12(r2)
   114c4:	10000826 	beq	r2,zero,114e8 <open+0xfc>
   114c8:	e0bff817 	ldw	r2,-32(fp)
   114cc:	10800317 	ldw	r2,12(r2)
   114d0:	e1ffff17 	ldw	r7,-4(fp)
   114d4:	e1bffe17 	ldw	r6,-8(fp)
   114d8:	e17ffd17 	ldw	r5,-12(fp)
   114dc:	e13ffc17 	ldw	r4,-16(fp)
   114e0:	103ee83a 	callr	r2
   114e4:	00000106 	br	114ec <open+0x100>
   114e8:	0005883a 	mov	r2,zero
   114ec:	e0bffa15 	stw	r2,-24(fp)
   114f0:	00000206 	br	114fc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   114f4:	00bffb44 	movi	r2,-19
   114f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   114fc:	e0bffa17 	ldw	r2,-24(fp)
   11500:	1000090e 	bge	r2,zero,11528 <open+0x13c>
  {
    alt_release_fd (index);  
   11504:	e13ff917 	ldw	r4,-28(fp)
   11508:	000fac00 	call	fac0 <alt_release_fd>
    ALT_ERRNO = -status;
   1150c:	00112ec0 	call	112ec <alt_get_errno>
   11510:	1007883a 	mov	r3,r2
   11514:	e0bffa17 	ldw	r2,-24(fp)
   11518:	0085c83a 	sub	r2,zero,r2
   1151c:	18800015 	stw	r2,0(r3)
    return -1;
   11520:	00bfffc4 	movi	r2,-1
   11524:	00000106 	br	1152c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   11528:	e0bff917 	ldw	r2,-28(fp)
}
   1152c:	e037883a 	mov	sp,fp
   11530:	dfc00117 	ldw	ra,4(sp)
   11534:	df000017 	ldw	fp,0(sp)
   11538:	dec00204 	addi	sp,sp,8
   1153c:	f800283a 	ret

00011540 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   11540:	defffa04 	addi	sp,sp,-24
   11544:	df000515 	stw	fp,20(sp)
   11548:	df000504 	addi	fp,sp,20
   1154c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11550:	0005303a 	rdctl	r2,status
   11554:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11558:	e0fffc17 	ldw	r3,-16(fp)
   1155c:	00bfff84 	movi	r2,-2
   11560:	1884703a 	and	r2,r3,r2
   11564:	1001703a 	wrctl	status,r2
  
  return context;
   11568:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1156c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   11570:	e0bfff17 	ldw	r2,-4(fp)
   11574:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   11578:	e0bffd17 	ldw	r2,-12(fp)
   1157c:	10800017 	ldw	r2,0(r2)
   11580:	e0fffd17 	ldw	r3,-12(fp)
   11584:	18c00117 	ldw	r3,4(r3)
   11588:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1158c:	e0bffd17 	ldw	r2,-12(fp)
   11590:	10800117 	ldw	r2,4(r2)
   11594:	e0fffd17 	ldw	r3,-12(fp)
   11598:	18c00017 	ldw	r3,0(r3)
   1159c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   115a0:	e0bffd17 	ldw	r2,-12(fp)
   115a4:	e0fffd17 	ldw	r3,-12(fp)
   115a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   115ac:	e0bffd17 	ldw	r2,-12(fp)
   115b0:	e0fffd17 	ldw	r3,-12(fp)
   115b4:	10c00015 	stw	r3,0(r2)
   115b8:	e0bffb17 	ldw	r2,-20(fp)
   115bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115c0:	e0bffe17 	ldw	r2,-8(fp)
   115c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   115c8:	0001883a 	nop
   115cc:	e037883a 	mov	sp,fp
   115d0:	df000017 	ldw	fp,0(sp)
   115d4:	dec00104 	addi	sp,sp,4
   115d8:	f800283a 	ret

000115dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   115dc:	defffb04 	addi	sp,sp,-20
   115e0:	dfc00415 	stw	ra,16(sp)
   115e4:	df000315 	stw	fp,12(sp)
   115e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   115ec:	d0a01017 	ldw	r2,-32704(gp)
   115f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   115f4:	d0a6e717 	ldw	r2,-25700(gp)
   115f8:	10800044 	addi	r2,r2,1
   115fc:	d0a6e715 	stw	r2,-25700(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   11600:	00002e06 	br	116bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   11604:	e0bffd17 	ldw	r2,-12(fp)
   11608:	10800017 	ldw	r2,0(r2)
   1160c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   11610:	e0bffd17 	ldw	r2,-12(fp)
   11614:	10800403 	ldbu	r2,16(r2)
   11618:	10803fcc 	andi	r2,r2,255
   1161c:	10000426 	beq	r2,zero,11630 <alt_tick+0x54>
   11620:	d0a6e717 	ldw	r2,-25700(gp)
   11624:	1000021e 	bne	r2,zero,11630 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   11628:	e0bffd17 	ldw	r2,-12(fp)
   1162c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   11630:	e0bffd17 	ldw	r2,-12(fp)
   11634:	10800217 	ldw	r2,8(r2)
   11638:	d0e6e717 	ldw	r3,-25700(gp)
   1163c:	18801d36 	bltu	r3,r2,116b4 <alt_tick+0xd8>
   11640:	e0bffd17 	ldw	r2,-12(fp)
   11644:	10800403 	ldbu	r2,16(r2)
   11648:	10803fcc 	andi	r2,r2,255
   1164c:	1000191e 	bne	r2,zero,116b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   11650:	e0bffd17 	ldw	r2,-12(fp)
   11654:	10800317 	ldw	r2,12(r2)
   11658:	e0fffd17 	ldw	r3,-12(fp)
   1165c:	18c00517 	ldw	r3,20(r3)
   11660:	1809883a 	mov	r4,r3
   11664:	103ee83a 	callr	r2
   11668:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1166c:	e0bfff17 	ldw	r2,-4(fp)
   11670:	1000031e 	bne	r2,zero,11680 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   11674:	e13ffd17 	ldw	r4,-12(fp)
   11678:	00115400 	call	11540 <alt_alarm_stop>
   1167c:	00000d06 	br	116b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   11680:	e0bffd17 	ldw	r2,-12(fp)
   11684:	10c00217 	ldw	r3,8(r2)
   11688:	e0bfff17 	ldw	r2,-4(fp)
   1168c:	1887883a 	add	r3,r3,r2
   11690:	e0bffd17 	ldw	r2,-12(fp)
   11694:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   11698:	e0bffd17 	ldw	r2,-12(fp)
   1169c:	10c00217 	ldw	r3,8(r2)
   116a0:	d0a6e717 	ldw	r2,-25700(gp)
   116a4:	1880032e 	bgeu	r3,r2,116b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   116a8:	e0bffd17 	ldw	r2,-12(fp)
   116ac:	00c00044 	movi	r3,1
   116b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   116b4:	e0bffe17 	ldw	r2,-8(fp)
   116b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   116bc:	e0fffd17 	ldw	r3,-12(fp)
   116c0:	d0a01004 	addi	r2,gp,-32704
   116c4:	18bfcf1e 	bne	r3,r2,11604 <__alt_data_end+0xff011604>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   116c8:	0001883a 	nop
}
   116cc:	0001883a 	nop
   116d0:	e037883a 	mov	sp,fp
   116d4:	dfc00117 	ldw	ra,4(sp)
   116d8:	df000017 	ldw	fp,0(sp)
   116dc:	dec00204 	addi	sp,sp,8
   116e0:	f800283a 	ret

000116e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   116e4:	deffff04 	addi	sp,sp,-4
   116e8:	df000015 	stw	fp,0(sp)
   116ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   116f0:	000170fa 	wrctl	ienable,zero
}
   116f4:	0001883a 	nop
   116f8:	e037883a 	mov	sp,fp
   116fc:	df000017 	ldw	fp,0(sp)
   11700:	dec00104 	addi	sp,sp,4
   11704:	f800283a 	ret

00011708 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   11708:	defffa04 	addi	sp,sp,-24
   1170c:	dfc00515 	stw	ra,20(sp)
   11710:	df000415 	stw	fp,16(sp)
   11714:	df000404 	addi	fp,sp,16
   11718:	e13ffe15 	stw	r4,-8(fp)
   1171c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   11720:	e0bfff17 	ldw	r2,-4(fp)
   11724:	10800017 	ldw	r2,0(r2)
   11728:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1172c:	e13ffe17 	ldw	r4,-8(fp)
   11730:	00035f80 	call	35f8 <strlen>
   11734:	10800044 	addi	r2,r2,1
   11738:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1173c:	00000d06 	br	11774 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11740:	e0bffc17 	ldw	r2,-16(fp)
   11744:	10800217 	ldw	r2,8(r2)
   11748:	e0fffd17 	ldw	r3,-12(fp)
   1174c:	180d883a 	mov	r6,r3
   11750:	e17ffe17 	ldw	r5,-8(fp)
   11754:	1009883a 	mov	r4,r2
   11758:	0011abc0 	call	11abc <memcmp>
   1175c:	1000021e 	bne	r2,zero,11768 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   11760:	e0bffc17 	ldw	r2,-16(fp)
   11764:	00000706 	br	11784 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   11768:	e0bffc17 	ldw	r2,-16(fp)
   1176c:	10800017 	ldw	r2,0(r2)
   11770:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   11774:	e0fffc17 	ldw	r3,-16(fp)
   11778:	e0bfff17 	ldw	r2,-4(fp)
   1177c:	18bff01e 	bne	r3,r2,11740 <__alt_data_end+0xff011740>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   11780:	0005883a 	mov	r2,zero
}
   11784:	e037883a 	mov	sp,fp
   11788:	dfc00117 	ldw	ra,4(sp)
   1178c:	df000017 	ldw	fp,0(sp)
   11790:	dec00204 	addi	sp,sp,8
   11794:	f800283a 	ret

00011798 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   11798:	defffb04 	addi	sp,sp,-20
   1179c:	dfc00415 	stw	ra,16(sp)
   117a0:	df000315 	stw	fp,12(sp)
   117a4:	df000304 	addi	fp,sp,12
   117a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   117ac:	d0a00817 	ldw	r2,-32736(gp)
   117b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   117b4:	00003106 	br	1187c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   117b8:	e0bffd17 	ldw	r2,-12(fp)
   117bc:	10800217 	ldw	r2,8(r2)
   117c0:	1009883a 	mov	r4,r2
   117c4:	00035f80 	call	35f8 <strlen>
   117c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   117cc:	e0bffd17 	ldw	r2,-12(fp)
   117d0:	10c00217 	ldw	r3,8(r2)
   117d4:	e0bffe17 	ldw	r2,-8(fp)
   117d8:	10bfffc4 	addi	r2,r2,-1
   117dc:	1885883a 	add	r2,r3,r2
   117e0:	10800003 	ldbu	r2,0(r2)
   117e4:	10803fcc 	andi	r2,r2,255
   117e8:	1080201c 	xori	r2,r2,128
   117ec:	10bfe004 	addi	r2,r2,-128
   117f0:	10800bd8 	cmpnei	r2,r2,47
   117f4:	1000031e 	bne	r2,zero,11804 <alt_find_file+0x6c>
    {
      len -= 1;
   117f8:	e0bffe17 	ldw	r2,-8(fp)
   117fc:	10bfffc4 	addi	r2,r2,-1
   11800:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11804:	e0bffe17 	ldw	r2,-8(fp)
   11808:	e0ffff17 	ldw	r3,-4(fp)
   1180c:	1885883a 	add	r2,r3,r2
   11810:	10800003 	ldbu	r2,0(r2)
   11814:	10803fcc 	andi	r2,r2,255
   11818:	1080201c 	xori	r2,r2,128
   1181c:	10bfe004 	addi	r2,r2,-128
   11820:	10800be0 	cmpeqi	r2,r2,47
   11824:	1000081e 	bne	r2,zero,11848 <alt_find_file+0xb0>
   11828:	e0bffe17 	ldw	r2,-8(fp)
   1182c:	e0ffff17 	ldw	r3,-4(fp)
   11830:	1885883a 	add	r2,r3,r2
   11834:	10800003 	ldbu	r2,0(r2)
   11838:	10803fcc 	andi	r2,r2,255
   1183c:	1080201c 	xori	r2,r2,128
   11840:	10bfe004 	addi	r2,r2,-128
   11844:	10000a1e 	bne	r2,zero,11870 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   11848:	e0bffd17 	ldw	r2,-12(fp)
   1184c:	10800217 	ldw	r2,8(r2)
   11850:	e0fffe17 	ldw	r3,-8(fp)
   11854:	180d883a 	mov	r6,r3
   11858:	e17fff17 	ldw	r5,-4(fp)
   1185c:	1009883a 	mov	r4,r2
   11860:	0011abc0 	call	11abc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   11864:	1000021e 	bne	r2,zero,11870 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   11868:	e0bffd17 	ldw	r2,-12(fp)
   1186c:	00000706 	br	1188c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   11870:	e0bffd17 	ldw	r2,-12(fp)
   11874:	10800017 	ldw	r2,0(r2)
   11878:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1187c:	e0fffd17 	ldw	r3,-12(fp)
   11880:	d0a00804 	addi	r2,gp,-32736
   11884:	18bfcc1e 	bne	r3,r2,117b8 <__alt_data_end+0xff0117b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   11888:	0005883a 	mov	r2,zero
}
   1188c:	e037883a 	mov	sp,fp
   11890:	dfc00117 	ldw	ra,4(sp)
   11894:	df000017 	ldw	fp,0(sp)
   11898:	dec00204 	addi	sp,sp,8
   1189c:	f800283a 	ret

000118a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   118a0:	defffc04 	addi	sp,sp,-16
   118a4:	df000315 	stw	fp,12(sp)
   118a8:	df000304 	addi	fp,sp,12
   118ac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   118b0:	00bffa04 	movi	r2,-24
   118b4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   118b8:	e03ffd15 	stw	zero,-12(fp)
   118bc:	00001906 	br	11924 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   118c0:	00800074 	movhi	r2,1
   118c4:	108ba604 	addi	r2,r2,11928
   118c8:	e0fffd17 	ldw	r3,-12(fp)
   118cc:	18c00324 	muli	r3,r3,12
   118d0:	10c5883a 	add	r2,r2,r3
   118d4:	10800017 	ldw	r2,0(r2)
   118d8:	10000f1e 	bne	r2,zero,11918 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   118dc:	00800074 	movhi	r2,1
   118e0:	108ba604 	addi	r2,r2,11928
   118e4:	e0fffd17 	ldw	r3,-12(fp)
   118e8:	18c00324 	muli	r3,r3,12
   118ec:	10c5883a 	add	r2,r2,r3
   118f0:	e0ffff17 	ldw	r3,-4(fp)
   118f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   118f8:	d0e00c17 	ldw	r3,-32720(gp)
   118fc:	e0bffd17 	ldw	r2,-12(fp)
   11900:	1880020e 	bge	r3,r2,1190c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   11904:	e0bffd17 	ldw	r2,-12(fp)
   11908:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
   1190c:	e0bffd17 	ldw	r2,-12(fp)
   11910:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   11914:	00000606 	br	11930 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   11918:	e0bffd17 	ldw	r2,-12(fp)
   1191c:	10800044 	addi	r2,r2,1
   11920:	e0bffd15 	stw	r2,-12(fp)
   11924:	e0bffd17 	ldw	r2,-12(fp)
   11928:	10800810 	cmplti	r2,r2,32
   1192c:	103fe41e 	bne	r2,zero,118c0 <__alt_data_end+0xff0118c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   11930:	e0bffe17 	ldw	r2,-8(fp)
}
   11934:	e037883a 	mov	sp,fp
   11938:	df000017 	ldw	fp,0(sp)
   1193c:	dec00104 	addi	sp,sp,4
   11940:	f800283a 	ret

00011944 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   11944:	defffb04 	addi	sp,sp,-20
   11948:	df000415 	stw	fp,16(sp)
   1194c:	df000404 	addi	fp,sp,16
   11950:	e13ffe15 	stw	r4,-8(fp)
   11954:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   11958:	e0bfff17 	ldw	r2,-4(fp)
   1195c:	10840070 	cmpltui	r2,r2,4097
   11960:	1000021e 	bne	r2,zero,1196c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   11964:	00840004 	movi	r2,4096
   11968:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1196c:	e0fffe17 	ldw	r3,-8(fp)
   11970:	e0bfff17 	ldw	r2,-4(fp)
   11974:	1885883a 	add	r2,r3,r2
   11978:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1197c:	e0bffe17 	ldw	r2,-8(fp)
   11980:	e0bffc15 	stw	r2,-16(fp)
   11984:	00000506 	br	1199c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   11988:	e0bffc17 	ldw	r2,-16(fp)
   1198c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   11990:	e0bffc17 	ldw	r2,-16(fp)
   11994:	10800804 	addi	r2,r2,32
   11998:	e0bffc15 	stw	r2,-16(fp)
   1199c:	e0fffc17 	ldw	r3,-16(fp)
   119a0:	e0bffd17 	ldw	r2,-12(fp)
   119a4:	18bff836 	bltu	r3,r2,11988 <__alt_data_end+0xff011988>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   119a8:	e0bffe17 	ldw	r2,-8(fp)
   119ac:	108007cc 	andi	r2,r2,31
   119b0:	10000226 	beq	r2,zero,119bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   119b4:	e0bffc17 	ldw	r2,-16(fp)
   119b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   119bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   119c0:	0001883a 	nop
   119c4:	e037883a 	mov	sp,fp
   119c8:	df000017 	ldw	fp,0(sp)
   119cc:	dec00104 	addi	sp,sp,4
   119d0:	f800283a 	ret

000119d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   119d4:	defffe04 	addi	sp,sp,-8
   119d8:	df000115 	stw	fp,4(sp)
   119dc:	df000104 	addi	fp,sp,4
   119e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   119e4:	e0bfff17 	ldw	r2,-4(fp)
   119e8:	10bffe84 	addi	r2,r2,-6
   119ec:	10c00428 	cmpgeui	r3,r2,16
   119f0:	18001a1e 	bne	r3,zero,11a5c <alt_exception_cause_generated_bad_addr+0x88>
   119f4:	100690ba 	slli	r3,r2,2
   119f8:	00800074 	movhi	r2,1
   119fc:	10868304 	addi	r2,r2,6668
   11a00:	1885883a 	add	r2,r3,r2
   11a04:	10800017 	ldw	r2,0(r2)
   11a08:	1000683a 	jmp	r2
   11a0c:	00011a4c 	andi	zero,zero,1129
   11a10:	00011a4c 	andi	zero,zero,1129
   11a14:	00011a5c 	xori	zero,zero,1129
   11a18:	00011a5c 	xori	zero,zero,1129
   11a1c:	00011a5c 	xori	zero,zero,1129
   11a20:	00011a4c 	andi	zero,zero,1129
   11a24:	00011a54 	movui	zero,1129
   11a28:	00011a5c 	xori	zero,zero,1129
   11a2c:	00011a4c 	andi	zero,zero,1129
   11a30:	00011a4c 	andi	zero,zero,1129
   11a34:	00011a5c 	xori	zero,zero,1129
   11a38:	00011a4c 	andi	zero,zero,1129
   11a3c:	00011a54 	movui	zero,1129
   11a40:	00011a5c 	xori	zero,zero,1129
   11a44:	00011a5c 	xori	zero,zero,1129
   11a48:	00011a4c 	andi	zero,zero,1129
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   11a4c:	00800044 	movi	r2,1
   11a50:	00000306 	br	11a60 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11a54:	0005883a 	mov	r2,zero
   11a58:	00000106 	br	11a60 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   11a5c:	0005883a 	mov	r2,zero
  }
}
   11a60:	e037883a 	mov	sp,fp
   11a64:	df000017 	ldw	fp,0(sp)
   11a68:	dec00104 	addi	sp,sp,4
   11a6c:	f800283a 	ret

00011a70 <atexit>:
   11a70:	200b883a 	mov	r5,r4
   11a74:	000f883a 	mov	r7,zero
   11a78:	000d883a 	mov	r6,zero
   11a7c:	0009883a 	mov	r4,zero
   11a80:	0011b381 	jmpi	11b38 <__register_exitproc>

00011a84 <exit>:
   11a84:	defffe04 	addi	sp,sp,-8
   11a88:	000b883a 	mov	r5,zero
   11a8c:	dc000015 	stw	r16,0(sp)
   11a90:	dfc00115 	stw	ra,4(sp)
   11a94:	2021883a 	mov	r16,r4
   11a98:	0011c500 	call	11c50 <__call_exitprocs>
   11a9c:	00800074 	movhi	r2,1
   11aa0:	10902204 	addi	r2,r2,16520
   11aa4:	11000017 	ldw	r4,0(r2)
   11aa8:	20800f17 	ldw	r2,60(r4)
   11aac:	10000126 	beq	r2,zero,11ab4 <exit+0x30>
   11ab0:	103ee83a 	callr	r2
   11ab4:	8009883a 	mov	r4,r16
   11ab8:	0011dd00 	call	11dd0 <_exit>

00011abc <memcmp>:
   11abc:	01c000c4 	movi	r7,3
   11ac0:	3980192e 	bgeu	r7,r6,11b28 <memcmp+0x6c>
   11ac4:	2144b03a 	or	r2,r4,r5
   11ac8:	11c4703a 	and	r2,r2,r7
   11acc:	10000f26 	beq	r2,zero,11b0c <memcmp+0x50>
   11ad0:	20800003 	ldbu	r2,0(r4)
   11ad4:	28c00003 	ldbu	r3,0(r5)
   11ad8:	10c0151e 	bne	r2,r3,11b30 <memcmp+0x74>
   11adc:	31bfff84 	addi	r6,r6,-2
   11ae0:	01ffffc4 	movi	r7,-1
   11ae4:	00000406 	br	11af8 <memcmp+0x3c>
   11ae8:	20800003 	ldbu	r2,0(r4)
   11aec:	28c00003 	ldbu	r3,0(r5)
   11af0:	31bfffc4 	addi	r6,r6,-1
   11af4:	10c00e1e 	bne	r2,r3,11b30 <memcmp+0x74>
   11af8:	21000044 	addi	r4,r4,1
   11afc:	29400044 	addi	r5,r5,1
   11b00:	31fff91e 	bne	r6,r7,11ae8 <__alt_data_end+0xff011ae8>
   11b04:	0005883a 	mov	r2,zero
   11b08:	f800283a 	ret
   11b0c:	20c00017 	ldw	r3,0(r4)
   11b10:	28800017 	ldw	r2,0(r5)
   11b14:	18bfee1e 	bne	r3,r2,11ad0 <__alt_data_end+0xff011ad0>
   11b18:	31bfff04 	addi	r6,r6,-4
   11b1c:	21000104 	addi	r4,r4,4
   11b20:	29400104 	addi	r5,r5,4
   11b24:	39bff936 	bltu	r7,r6,11b0c <__alt_data_end+0xff011b0c>
   11b28:	303fe91e 	bne	r6,zero,11ad0 <__alt_data_end+0xff011ad0>
   11b2c:	003ff506 	br	11b04 <__alt_data_end+0xff011b04>
   11b30:	10c5c83a 	sub	r2,r2,r3
   11b34:	f800283a 	ret

00011b38 <__register_exitproc>:
   11b38:	defffa04 	addi	sp,sp,-24
   11b3c:	dc000315 	stw	r16,12(sp)
   11b40:	04000074 	movhi	r16,1
   11b44:	84102204 	addi	r16,r16,16520
   11b48:	80c00017 	ldw	r3,0(r16)
   11b4c:	dc400415 	stw	r17,16(sp)
   11b50:	dfc00515 	stw	ra,20(sp)
   11b54:	18805217 	ldw	r2,328(r3)
   11b58:	2023883a 	mov	r17,r4
   11b5c:	10003726 	beq	r2,zero,11c3c <__register_exitproc+0x104>
   11b60:	10c00117 	ldw	r3,4(r2)
   11b64:	010007c4 	movi	r4,31
   11b68:	20c00e16 	blt	r4,r3,11ba4 <__register_exitproc+0x6c>
   11b6c:	1a000044 	addi	r8,r3,1
   11b70:	8800221e 	bne	r17,zero,11bfc <__register_exitproc+0xc4>
   11b74:	18c00084 	addi	r3,r3,2
   11b78:	18c7883a 	add	r3,r3,r3
   11b7c:	18c7883a 	add	r3,r3,r3
   11b80:	12000115 	stw	r8,4(r2)
   11b84:	10c7883a 	add	r3,r2,r3
   11b88:	19400015 	stw	r5,0(r3)
   11b8c:	0005883a 	mov	r2,zero
   11b90:	dfc00517 	ldw	ra,20(sp)
   11b94:	dc400417 	ldw	r17,16(sp)
   11b98:	dc000317 	ldw	r16,12(sp)
   11b9c:	dec00604 	addi	sp,sp,24
   11ba0:	f800283a 	ret
   11ba4:	00800034 	movhi	r2,0
   11ba8:	108b0c04 	addi	r2,r2,11312
   11bac:	10002626 	beq	r2,zero,11c48 <__register_exitproc+0x110>
   11bb0:	01006404 	movi	r4,400
   11bb4:	d9400015 	stw	r5,0(sp)
   11bb8:	d9800115 	stw	r6,4(sp)
   11bbc:	d9c00215 	stw	r7,8(sp)
   11bc0:	0002c300 	call	2c30 <malloc>
   11bc4:	d9400017 	ldw	r5,0(sp)
   11bc8:	d9800117 	ldw	r6,4(sp)
   11bcc:	d9c00217 	ldw	r7,8(sp)
   11bd0:	10001d26 	beq	r2,zero,11c48 <__register_exitproc+0x110>
   11bd4:	81000017 	ldw	r4,0(r16)
   11bd8:	10000115 	stw	zero,4(r2)
   11bdc:	02000044 	movi	r8,1
   11be0:	22405217 	ldw	r9,328(r4)
   11be4:	0007883a 	mov	r3,zero
   11be8:	12400015 	stw	r9,0(r2)
   11bec:	20805215 	stw	r2,328(r4)
   11bf0:	10006215 	stw	zero,392(r2)
   11bf4:	10006315 	stw	zero,396(r2)
   11bf8:	883fde26 	beq	r17,zero,11b74 <__alt_data_end+0xff011b74>
   11bfc:	18c9883a 	add	r4,r3,r3
   11c00:	2109883a 	add	r4,r4,r4
   11c04:	1109883a 	add	r4,r2,r4
   11c08:	21802215 	stw	r6,136(r4)
   11c0c:	01800044 	movi	r6,1
   11c10:	12406217 	ldw	r9,392(r2)
   11c14:	30cc983a 	sll	r6,r6,r3
   11c18:	4992b03a 	or	r9,r9,r6
   11c1c:	12406215 	stw	r9,392(r2)
   11c20:	21c04215 	stw	r7,264(r4)
   11c24:	01000084 	movi	r4,2
   11c28:	893fd21e 	bne	r17,r4,11b74 <__alt_data_end+0xff011b74>
   11c2c:	11006317 	ldw	r4,396(r2)
   11c30:	218cb03a 	or	r6,r4,r6
   11c34:	11806315 	stw	r6,396(r2)
   11c38:	003fce06 	br	11b74 <__alt_data_end+0xff011b74>
   11c3c:	18805304 	addi	r2,r3,332
   11c40:	18805215 	stw	r2,328(r3)
   11c44:	003fc606 	br	11b60 <__alt_data_end+0xff011b60>
   11c48:	00bfffc4 	movi	r2,-1
   11c4c:	003fd006 	br	11b90 <__alt_data_end+0xff011b90>

00011c50 <__call_exitprocs>:
   11c50:	defff504 	addi	sp,sp,-44
   11c54:	df000915 	stw	fp,36(sp)
   11c58:	dd400615 	stw	r21,24(sp)
   11c5c:	dc800315 	stw	r18,12(sp)
   11c60:	dfc00a15 	stw	ra,40(sp)
   11c64:	ddc00815 	stw	r23,32(sp)
   11c68:	dd800715 	stw	r22,28(sp)
   11c6c:	dd000515 	stw	r20,20(sp)
   11c70:	dcc00415 	stw	r19,16(sp)
   11c74:	dc400215 	stw	r17,8(sp)
   11c78:	dc000115 	stw	r16,4(sp)
   11c7c:	d9000015 	stw	r4,0(sp)
   11c80:	2839883a 	mov	fp,r5
   11c84:	04800044 	movi	r18,1
   11c88:	057fffc4 	movi	r21,-1
   11c8c:	00800074 	movhi	r2,1
   11c90:	10902204 	addi	r2,r2,16520
   11c94:	12000017 	ldw	r8,0(r2)
   11c98:	45005217 	ldw	r20,328(r8)
   11c9c:	44c05204 	addi	r19,r8,328
   11ca0:	a0001c26 	beq	r20,zero,11d14 <__call_exitprocs+0xc4>
   11ca4:	a0800117 	ldw	r2,4(r20)
   11ca8:	15ffffc4 	addi	r23,r2,-1
   11cac:	b8000d16 	blt	r23,zero,11ce4 <__call_exitprocs+0x94>
   11cb0:	14000044 	addi	r16,r2,1
   11cb4:	8421883a 	add	r16,r16,r16
   11cb8:	8421883a 	add	r16,r16,r16
   11cbc:	84402004 	addi	r17,r16,128
   11cc0:	a463883a 	add	r17,r20,r17
   11cc4:	a421883a 	add	r16,r20,r16
   11cc8:	e0001e26 	beq	fp,zero,11d44 <__call_exitprocs+0xf4>
   11ccc:	80804017 	ldw	r2,256(r16)
   11cd0:	e0801c26 	beq	fp,r2,11d44 <__call_exitprocs+0xf4>
   11cd4:	bdffffc4 	addi	r23,r23,-1
   11cd8:	843fff04 	addi	r16,r16,-4
   11cdc:	8c7fff04 	addi	r17,r17,-4
   11ce0:	bd7ff91e 	bne	r23,r21,11cc8 <__alt_data_end+0xff011cc8>
   11ce4:	00800034 	movhi	r2,0
   11ce8:	108b1104 	addi	r2,r2,11332
   11cec:	10000926 	beq	r2,zero,11d14 <__call_exitprocs+0xc4>
   11cf0:	a0800117 	ldw	r2,4(r20)
   11cf4:	1000301e 	bne	r2,zero,11db8 <__call_exitprocs+0x168>
   11cf8:	a0800017 	ldw	r2,0(r20)
   11cfc:	10003226 	beq	r2,zero,11dc8 <__call_exitprocs+0x178>
   11d00:	a009883a 	mov	r4,r20
   11d04:	98800015 	stw	r2,0(r19)
   11d08:	0002c440 	call	2c44 <free>
   11d0c:	9d000017 	ldw	r20,0(r19)
   11d10:	a03fe41e 	bne	r20,zero,11ca4 <__alt_data_end+0xff011ca4>
   11d14:	dfc00a17 	ldw	ra,40(sp)
   11d18:	df000917 	ldw	fp,36(sp)
   11d1c:	ddc00817 	ldw	r23,32(sp)
   11d20:	dd800717 	ldw	r22,28(sp)
   11d24:	dd400617 	ldw	r21,24(sp)
   11d28:	dd000517 	ldw	r20,20(sp)
   11d2c:	dcc00417 	ldw	r19,16(sp)
   11d30:	dc800317 	ldw	r18,12(sp)
   11d34:	dc400217 	ldw	r17,8(sp)
   11d38:	dc000117 	ldw	r16,4(sp)
   11d3c:	dec00b04 	addi	sp,sp,44
   11d40:	f800283a 	ret
   11d44:	a0800117 	ldw	r2,4(r20)
   11d48:	80c00017 	ldw	r3,0(r16)
   11d4c:	10bfffc4 	addi	r2,r2,-1
   11d50:	15c01426 	beq	r2,r23,11da4 <__call_exitprocs+0x154>
   11d54:	80000015 	stw	zero,0(r16)
   11d58:	183fde26 	beq	r3,zero,11cd4 <__alt_data_end+0xff011cd4>
   11d5c:	95c8983a 	sll	r4,r18,r23
   11d60:	a0806217 	ldw	r2,392(r20)
   11d64:	a5800117 	ldw	r22,4(r20)
   11d68:	2084703a 	and	r2,r4,r2
   11d6c:	10000b26 	beq	r2,zero,11d9c <__call_exitprocs+0x14c>
   11d70:	a0806317 	ldw	r2,396(r20)
   11d74:	2088703a 	and	r4,r4,r2
   11d78:	20000c1e 	bne	r4,zero,11dac <__call_exitprocs+0x15c>
   11d7c:	89400017 	ldw	r5,0(r17)
   11d80:	d9000017 	ldw	r4,0(sp)
   11d84:	183ee83a 	callr	r3
   11d88:	a0800117 	ldw	r2,4(r20)
   11d8c:	15bfbf1e 	bne	r2,r22,11c8c <__alt_data_end+0xff011c8c>
   11d90:	98800017 	ldw	r2,0(r19)
   11d94:	153fcf26 	beq	r2,r20,11cd4 <__alt_data_end+0xff011cd4>
   11d98:	003fbc06 	br	11c8c <__alt_data_end+0xff011c8c>
   11d9c:	183ee83a 	callr	r3
   11da0:	003ff906 	br	11d88 <__alt_data_end+0xff011d88>
   11da4:	a5c00115 	stw	r23,4(r20)
   11da8:	003feb06 	br	11d58 <__alt_data_end+0xff011d58>
   11dac:	89000017 	ldw	r4,0(r17)
   11db0:	183ee83a 	callr	r3
   11db4:	003ff406 	br	11d88 <__alt_data_end+0xff011d88>
   11db8:	a0800017 	ldw	r2,0(r20)
   11dbc:	a027883a 	mov	r19,r20
   11dc0:	1029883a 	mov	r20,r2
   11dc4:	003fb606 	br	11ca0 <__alt_data_end+0xff011ca0>
   11dc8:	0005883a 	mov	r2,zero
   11dcc:	003ffb06 	br	11dbc <__alt_data_end+0xff011dbc>

00011dd0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   11dd0:	defffd04 	addi	sp,sp,-12
   11dd4:	df000215 	stw	fp,8(sp)
   11dd8:	df000204 	addi	fp,sp,8
   11ddc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   11de0:	0001883a 	nop
   11de4:	e0bfff17 	ldw	r2,-4(fp)
   11de8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   11dec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   11df0:	10000226 	beq	r2,zero,11dfc <_exit+0x2c>
    ALT_SIM_FAIL();
   11df4:	002af070 	cmpltui	zero,zero,43969
   11df8:	00000106 	br	11e00 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   11dfc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   11e00:	003fff06 	br	11e00 <__alt_data_end+0xff011e00>
