
sobel.elf:     file format elf32-littlenios2
sobel.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010820 memsz 0x00010820 flags r-x
    LOAD off    0x00011840 vaddr 0x00010840 paddr 0x00012334 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013e28 vaddr 0x00013e28 paddr 0x00013e28 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fefc  0000018c  0000018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b8  00010088  00010088  00011088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00010840  00012334  00011840  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  00013e28  00013e28  00013e28  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_ctrl   00000000  00013fb8  00013fb8  00013334  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013334  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  00013358  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000273c2  00000000  00000000  00014390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a1da  00000000  00000000  0003b752  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c64e  00000000  00000000  0004592c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021b4  00000000  00000000  00051f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003dad  00000000  00000000  00054130  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001c6e5  00000000  00000000  00057edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  000745c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c18  00000000  00000000  00074618  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00079b4e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00079b51  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00079b5d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00079b5e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00079b5f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00079b63  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00079b67  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00079b6b  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00079b74  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00079b7d  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00079b86  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000004e  00000000  00000000  00079b91  2**0
                  CONTENTS, READONLY
 29 .jdi          00005ad8  00000000  00000000  00079bdf  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723e4  00000000  00000000  0007f6b7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0000018c l    d  .text	00000000 .text
00010088 l    d  .rodata	00000000 .rodata
00010840 l    d  .rwdata	00000000 .rwdata
00013e28 l    d  .bss	00000000 .bss
00013fb8 l    d  .sdram_ctrl	00000000 .sdram_ctrl
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/Users/nicis/HESSO/MSc_ElE/TSM_EmbHardw/Labs/Lab_04/mse_demo/software/sobel_bsp//obj/HAL/src/crt0.o
000001c4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 dipswitch.c
00000000 l    df *ABS*	00000000 grayscale.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 lcd_simple.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 sobel.c
00000000 l    df *ABS*	00000000 vga.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001059e l     O .rodata	00000010 zeroes.4404
00004a78 l     F .text	000000bc __sbprintf
000105ae l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00004c88 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000067b8 l     F .text	00000008 __fp_unlock
000067cc l     F .text	0000019c __sinit.part.1
00006968 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010c48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001108c l     O .rwdata	00000020 lc_ctype_charset
0001106c l     O .rwdata	00000020 lc_message_charset
000110ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000105e0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009504 l     F .text	000000fc __sprint_r.part.0
00010714 l     O .rodata	00000010 blanks.4348
00010704 l     O .rodata	00000010 zeroes.4349
0000aa90 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000e808 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012324 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001128c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ed84 l     F .text	0000004c altera_avalon_jtag_uart_timeout
0000edd0 l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000f304 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013e8c g     O .bss	00000004 alt_instruction_exception_handler
00008b9c g     F .text	00000074 _mprec_log10
00008c88 g     F .text	0000008c __any_on
0000b02c g     F .text	00000054 _isatty_r
000105ec g     O .rodata	00000028 __mprec_tinytens
0000ea54 g     F .text	00000060 alt_main
000026a4 g     F .text	000000c0 _puts_r
00013eb8 g     O .bss	00000100 alt_irq
0000b080 g     F .text	00000060 _lseek_r
00010543 g     O .rodata	00000009 gy_array
00012334 g       *ABS*	00000000 __flash_rwdata_start
0000d278 g     F .text	00000088 .hidden __eqdf2
00013fb8 g       *ABS*	00000000 __alt_heap_start
00002668 g     F .text	0000003c printf
0000b298 g     F .text	0000009c _wcrtomb_r
000093c4 g     F .text	0000005c __sseek
00006b08 g     F .text	00000010 __sinit
0000b140 g     F .text	00000140 __swbuf_r
000075d0 g     F .text	0000007c _setlocale_r
00006970 g     F .text	00000068 __sfmoreglue
0000eab8 g     F .text	00000004 __malloc_unlock
0000090c g     F .text	00000014 LCD_Write_Command
00013e38 g     O .bss	00000004 sobel_width
00013e78 g     O .bss	00000004 altera_avalon_timer_ts_freq
00007a94 g     F .text	0000015c memmove
00000920 g     F .text	00000014 LCD_Write_Data
00006af0 g     F .text	00000018 _cleanup
00007d18 g     F .text	000000a8 _Balloc
0000d300 g     F .text	000000dc .hidden __gtdf2
0000fad4 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000004e0 g     F .text	00000024 cam_get_xsize
0000afd0 g     F .text	0000005c _fstat_r
00013e5c g     O .bss	00000004 errno
00009340 g     F .text	00000008 __seofread
00013e70 g     O .bss	00000004 alt_argv
0001a2ec g       *ABS*	00000000 _gp
0000ebf4 g     F .text	00000004 usleep
000005a0 g     F .text	00000074 cam_set_image_pointer
000110e4 g     O .rwdata	00000180 alt_fd_list
00001de4 g     F .text	00000010 vga_set_pointer
0000fadc g     F .text	00000078 alt_find_dev
0000794c g     F .text	00000148 memcpy
000067c0 g     F .text	0000000c _cleanup_r
0000e564 g     F .text	000000dc .hidden __floatsidf
0000f730 g     F .text	00000104 alt_io_redirect
0000d3dc g     F .text	000000f4 .hidden __ltdf2
00010088 g       *ABS*	00000000 __DTOR_END__
00002764 g     F .text	00000014 puts
0000fca0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
00009278 g     F .text	00000074 __fpclassifyd
00008af8 g     F .text	000000a4 __ratio
0000aa74 g     F .text	0000001c __vfiprintf_internal
0000f010 g     F .text	00000154 altera_avalon_jtag_uart_read
00001e04 g     F .text	00000014 malloc
00002638 g     F .text	00000030 _printf_r
00000760 g     F .text	00000008 get_grayscale_picture
0000c028 g     F .text	00000064 .hidden __udivsi3
000100e8 g     O .rodata	00000128 lens_roll_off_tbl
000001c8 g     F .text	00000318 init_camera
0000e888 g     F .text	00000084 isatty
0001063c g     O .rodata	000000c8 __mprec_tens
0000764c g     F .text	0000000c __locale_charset
0000fc50 g     F .text	00000050 alt_icache_flush
00013e58 g     O .bss	00000004 __malloc_top_pad
00012304 g     O .rwdata	00000004 __mb_cur_max
0000767c g     F .text	0000000c _localeconv_r
00001504 g     F .text	00000140 sobel_x
00008124 g     F .text	0000003c __i2b
00006f8c g     F .text	000004bc __sfvwrite_r
00000934 g     F .text	00000414 init_LCD
00002778 g     F .text	00000054 _sbrk_r
000122ec g     O .rwdata	00000004 pgy_array
00000528 g     F .text	00000078 cam_get_profiling
0000b0e0 g     F .text	00000060 _read_r
00013e3c g     O .bss	00000004 sobel_result
0001230c g     O .rwdata	00000004 alt_max_fd
0000acc4 g     F .text	000000f0 _fclose_r
00006788 g     F .text	00000030 fflush
00013e54 g     O .bss	00000004 __malloc_max_sbrked_mem
00013e30 g     O .bss	00000004 grayscale_array
0000c0e4 g     F .text	000008ac .hidden __adddf3
00000504 g     F .text	00000024 cam_get_ysize
000088a0 g     F .text	0000010c __b2d
0000b9f8 g     F .text	00000538 .hidden __umoddi3
0000e9d8 g     F .text	0000007c lseek
00000828 g     F .text	0000008c i2c_short_read
000122fc g     O .rwdata	00000004 _global_impure_ptr
00008d14 g     F .text	00000564 _realloc_r
00013fb8 g       *ABS*	00000000 __bss_end
0000f6c8 g     F .text	00000068 alt_iic_isr_register
0000f9e0 g     F .text	000000f4 alt_tick
0000b480 g     F .text	00000578 .hidden __udivdi3
0000af2c g     F .text	00000024 _fputwc_r
00010614 g     O .rodata	00000028 __mprec_bigtens
00007f08 g     F .text	00000104 __s2b
0000e640 g     F .text	000000a8 .hidden __floatunsidf
000085e0 g     F .text	00000060 __mcmp
00006b28 g     F .text	00000018 __fp_lock_all
0000f6b0 g     F .text	00000018 alt_ic_irq_enabled
00013e28 g     O .bss	00000004 grayscape_height
0000f9ac g     F .text	00000034 alt_alarm_stop
00013e80 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
00011264 g     O .rwdata	00000028 alt_dev_null
00000dd4 g     F .text	00000078 transfer_LCD_with_dma
00001adc g     F .text	000002f8 sobel_complete
0000f4f8 g     F .text	00000004 alt_dcache_flush_all
0000800c g     F .text	00000068 __hi0bits
0000e4e4 g     F .text	00000080 .hidden __fixdfsi
00012334 g       *ABS*	00000000 __ram_rwdata_end
00012310 g     O .rwdata	00000008 alt_dev_list
0000ebf8 g     F .text	000000c4 write
0000f3f8 g     F .text	00000008 alt_timestamp_freq
00010840 g       *ABS*	00000000 __ram_rodata_end
0000e810 g     F .text	00000078 fstat
0000d3dc g     F .text	000000f4 .hidden __ledf2
00008358 g     F .text	00000140 __pow5mult
00009618 g     F .text	0000145c ___vfiprintf_internal_r
00013e68 g     O .bss	00000004 __nlocale_changed
0000c08c g     F .text	00000058 .hidden __umodsi3
00001dd4 g     F .text	00000008 GetSobel_rgb
00013fb8 g       *ABS*	00000000 end
00001ddc g     F .text	00000008 GetSobelResult
00000638 g     F .text	00000020 take_picture_blocking
00000698 g     F .text	00000014 DIPSW_get_value
000018d8 g     F .text	00000168 sobel_y_with_rgb
0000eed8 g     F .text	00000078 altera_avalon_jtag_uart_init
00000160 g     F .exceptions	0000002c alt_instruction_exception_entry
00000628 g     F .text	00000010 current_image_pointer
00010088 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000f340 g     F .text	00000048 alt_avalon_timer_sc_init
0000e6e8 g     F .text	00000064 .hidden __clzsi2
0000f164 g     F .text	000001a0 altera_avalon_jtag_uart_write
00006b18 g     F .text	00000004 __sfp_lock_acquire
00007868 g     F .text	000000e4 memchr
00002864 g     F .text	000021f8 ___vfprintf_internal_r
00006c7c g     F .text	00000310 _free_r
00007658 g     F .text	00000010 __locale_mb_cur_max
000017c0 g     F .text	00000118 sobel_y
00010210 g     O .rodata	00000140 noise_reduction_reg_settings_array
0000fef4 g     F .text	00000180 __call_exitprocs
00013e64 g     O .bss	00000004 __mlocale_changed
000122f4 g     O .rwdata	00000004 __malloc_sbrk_base
0000018c g     F .text	0000003c _start
00013e88 g     O .bss	00000004 _alt_tick_rate
00008498 g     F .text	00000148 __lshift
00013e84 g     O .bss	00000004 _alt_nticks
0000eabc g     F .text	000000c8 read
0000ecdc g     F .text	0000006c alt_sys_init
00001644 g     F .text	0000017c sobel_x_with_rgb
0000fddc g     F .text	00000118 __register_exitproc
00008160 g     F .text	000001f8 __multiply
0000ef50 g     F .text	0000004c altera_avalon_jtag_uart_close
00010840 g       *ABS*	00000000 __ram_rwdata_start
00010088 g       *ABS*	00000000 __ram_rodata_start
00013e90 g     O .bss	00000028 __malloc_current_mallinfo
000089ac g     F .text	0000014c __d2b
00013e40 g     O .bss	00000004 sobel_height
00000658 g     F .text	00000014 enable_continues_mode
0000ed48 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00001364 g     F .text	000000e4 init_sobel_arrays
0000fc00 g     F .text	00000050 alt_get_fd
0000f480 g     F .text	00000078 alt_busy_sleep
00000000 g       *ABS*	00000000 __alt_mem_sdram_ctrl
0000abac g     F .text	00000054 _close_r
0000fd60 g     F .text	0000007c memcmp
0000ed68 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00013fb8 g       *ABS*	00000000 __alt_stack_base
0000ed78 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00004b34 g     F .text	00000154 __swsetup_r
0000c990 g     F .text	000008e8 .hidden __divdf3
000069d8 g     F .text	00000118 __sfp
00008c10 g     F .text	00000078 __copybits
00010840 g     O .rwdata	00000408 __malloc_av_
00006b24 g     F .text	00000004 __sinit_lock_release
0000d4d0 g     F .text	00000718 .hidden __muldf3
000092ec g     F .text	00000054 __sread
0000fb54 g     F .text	000000ac alt_find_file
0000f4fc g     F .text	0000006c alt_dev_llist_insert
0000eab4 g     F .text	00000004 __malloc_lock
0000eba8 g     F .text	0000004c sbrk
0000672c g     F .text	0000005c _fflush_r
0000ac00 g     F .text	000000c4 _calloc_r
00013e28 g       *ABS*	00000000 __bss_start
00007bf0 g     F .text	00000128 memset
00000e4c g     F .text	00000518 main
00013e6c g     O .bss	00000004 alt_envp
00013e50 g     O .bss	00000004 __malloc_max_total_mem
00000750 g     F .text	00000008 get_grayscale_width
0000ed58 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000b280 g     F .text	00000018 __swbuf
00013e44 g     O .bss	00000004 sobel_x_result
00009420 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0000adb4 g     F .text	00000014 fclose
0000f388 g     F .text	0000003c alt_timestamp_start
00004e88 g     F .text	00001688 _dtoa_r
00001e2c g     F .text	0000080c _malloc_r
0000b3f4 g     F .text	00000030 __ascii_wctomb
00012320 g     O .rwdata	00000004 alt_errno
00007448 g     F .text	000000c4 _fwalk
0000bf30 g     F .text	00000084 .hidden __divsi3
00006b58 g     F .text	00000124 _malloc_trim_r
00010088 g       *ABS*	00000000 __CTOR_END__
00013e2c g     O .bss	00000004 grayscale_width
00009428 g     F .text	000000dc strcmp
00000d48 g     F .text	0000008c transfer_LCD_no_dma
00010088 g       *ABS*	00000000 __flash_rodata_start
00010088 g       *ABS*	00000000 __DTOR_LIST__
0000d278 g     F .text	00000088 .hidden __nedf2
00010350 g     O .rodata	00000118 preview_snapshot_mode_reg_settings_array
0000ecbc g     F .text	00000020 alt_irq_init
0000eb84 g     F .text	00000024 alt_release_fd
00000780 g     F .text	000000a8 i2c_auto_detect
00010724 g     O .rodata	00000100 .hidden __clz_tab
00000614 g     F .text	00000014 current_image_valid
00013e60 g     O .bss	00000004 _PathLocale
00000768 g     F .text	00000018 i2c_busy_wait
0000fd14 g     F .text	00000014 atexit
0000ab4c g     F .text	00000060 _write_r
00007688 g     F .text	00000018 setlocale
00012300 g     O .rwdata	00000004 _impure_ptr
00013e74 g     O .bss	00000004 alt_argc
00006510 g     F .text	0000021c __sflush_r
00013e7c g     O .bss	00000004 altera_avalon_timer_ts_base
0000f5cc g     F .text	00000064 _do_dtors
00007674 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
0000883c g     F .text	00000064 __ulp
00006b40 g     F .text	00000018 __fp_unlock_all
00012318 g     O .rwdata	00000008 alt_fs_list
00013e48 g     O .bss	00000004 sobel_y_result
000008b4 g     F .text	00000058 i2c_short_write
00000020 g       *ABS*	00000000 __ram_exceptions_start
00013e34 g     O .bss	00000002 LCD_height
000076a0 g     F .text	0000000c localeconv
0000f3c4 g     F .text	00000034 alt_timestamp
00001df4 g     F .text	00000010 vga_set_swap
0000f63c g     F .text	00000004 alt_ic_isr_register
00001a40 g     F .text	0000009c sobel_threshold
00012334 g       *ABS*	00000000 _edata
000122f0 g     O .rwdata	00000004 pgx_array
00013fb8 g       *ABS*	00000000 _end
0000adc8 g     F .text	00000164 __fputwc
0000018c g       *ABS*	00000000 __ram_exceptions_end
0000ef9c g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0001054c g     O .rodata	00000009 gx_array
0000f678 g     F .text	00000038 alt_ic_irq_disable
00009348 g     F .text	0000007c __swrite
000122f8 g     O .rwdata	00000004 __malloc_trim_threshold
00013e36 g     O .bss	00000002 LCD_width
000006ac g     F .text	000000a4 conv_grayscale
00007668 g     F .text	0000000c __locale_msgcharset
0000fd28 g     F .text	00000038 exit
0000750c g     F .text	000000c4 _fwalk_reent
00008640 g     F .text	000001fc __mdiff
0000bfb4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00006b1c g     F .text	00000004 __sfp_lock_release
00000758 g     F .text	00000008 get_grayscale_height
00010074 g     F .text	00000014 _exit
00001448 g     F .text	000000bc sobel_mac
0000f400 g     F .text	00000080 alt_alarm_start
000076ac g     F .text	000001bc __smakebuf_r
00013e4c g     O .bss	00000004 sobel_rgb565
000027cc g     F .text	00000098 strlen
0000f834 g     F .text	00000178 open
0000d300 g     F .text	000000dc .hidden __gedf2
00012308 g     O .rwdata	00000004 __wctomb
00009600 g     F .text	00000018 __sprint_r
0000f630 g     F .text	0000000c alt_icache_flush_all
00012328 g     O .rwdata	00000004 alt_priority_mask
0000f640 g     F .text	00000038 alt_ic_irq_enable
00004a5c g     F .text	0000001c __vfprintf_internal
0000b424 g     F .text	0000005c _wctomb_r
0000dbe8 g     F .text	000008fc .hidden __subdf3
00008074 g     F .text	000000b0 __lo0bits
0001232c g     O .rwdata	00000008 alt_alarm_list
0000f568 g     F .text	00000064 _do_ctors
0000b334 g     F .text	000000c0 wcrtomb
0000e74c g     F .text	000000bc close
0000e90c g     F .text	000000cc alt_load
0000af50 g     F .text	00000080 fputwc
00001e18 g     F .text	00000014 free
00006b20 g     F .text	00000004 __sinit_lock_acquire
00007de8 g     F .text	00000120 __multadd
00007dc0 g     F .text	00000028 _Bfree
0000066c g     F .text	0000002c new_image_available



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xff000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406314 	ori	at,at,396
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000074 	movhi	r16,1
 110:	840fae04 	addi	r16,r16,16056
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 12c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xff000124>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xff000114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 164:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 16c:	d0a6e817 	ldw	r2,-25696(gp)
 170:	10000326 	beq	r2,zero,180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 174:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 178:	2008d0ba 	srli	r4,r4,2
 17c:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 184:	0005883a 	mov	r2,zero
 188:	f800283a 	ret

Disassembly of section .text:

0000018c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     18c:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     190:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     194:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     198:	d6a8bb14 	ori	gp,gp,41708
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     19c:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1a0:	108f8a14 	ori	r2,r2,15912

    movhi r3, %hi(__bss_end)
     1a4:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1a8:	18cfee14 	ori	r3,r3,16312

    beq r2, r3, 1f
     1ac:	10c00326 	beq	r2,r3,1bc <_start+0x30>

0:
    stw zero, (r2)
     1b0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1b4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1b8:	10fffd36 	bltu	r2,r3,1b0 <__alt_data_end+0xff0001b0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1bc:	000e90c0 	call	e90c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1c0:	000ea540 	call	ea54 <alt_main>

000001c4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1c4:	003fff06 	br	1c4 <__alt_data_end+0xff0001c4>

000001c8 <init_camera>:
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
     1c8:	00804034 	movhi	r2,256
     1cc:	10842744 	addi	r2,r2,4253
     1d0:	00c00084 	movi	r3,2
     1d4:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
     1d8:	00804034 	movhi	r2,256
     1dc:	10841304 	addi	r2,r2,4172
     1e0:	00c00044 	movi	r3,1
     1e4:	10c00025 	stbio	r3,0(r2)
     1e8:	008003f4 	movhi	r2,15
     1ec:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     1f0:	0001883a 	nop
     1f4:	10bfffc4 	addi	r2,r2,-1

void init_camera() {
	int i;
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
     1f8:	103ffd1e 	bne	r2,zero,1f0 <__alt_data_end+0xff0001f0>
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
     1fc:	00804034 	movhi	r2,256
     200:	10841304 	addi	r2,r2,4172
     204:	10000025 	stbio	zero,0(r2)
     208:	008003f4 	movhi	r2,15
     20c:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     210:	0001883a 	nop
     214:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_PRESCALE_REG,2); // Set prescaler
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Reset);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
     218:	103ffd1e 	bne	r2,zero,210 <__alt_data_end+0xff000210>
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     21c:	defffc04 	addi	sp,sp,-16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     220:	01800044 	movi	r6,1
     224:	014ce184 	movi	r5,13190
     228:	01001e04 	movi	r4,120
#include <stdio.h>
#include "i2c.h"
#include "camera.h"
#include "mt9d112.h"

void init_camera() {
     22c:	dfc00315 	stw	ra,12(sp)
     230:	dc800215 	stw	r18,8(sp)
     234:	dc400115 	stw	r17,4(sp)
     238:	dc000015 	stw	r16,0(sp)
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
     23c:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
     240:	000d883a 	mov	r6,zero
     244:	014ce184 	movi	r5,13190
     248:	01001e04 	movi	r4,120
     24c:	00008b40 	call	8b4 <i2c_short_write>
     250:	008003f4 	movhi	r2,15
     254:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     258:	0001883a 	nop
     25c:	10bfffc4 	addi	r2,r2,-1
	IOWR_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,0);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0001);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_MCU_BOOT,0x0000);
	for (i=0; i < 1000000 ; i++)
     260:	103ffd1e 	bne	r2,zero,258 <__alt_data_end+0xff000258>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
     264:	01803104 	movi	r6,196
     268:	014c0684 	movi	r5,12314
     26c:	01001e04 	movi	r4,120
     270:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
     274:	01800204 	movi	r6,8
     278:	014c8084 	movi	r5,12802
     27c:	01001e04 	movi	r4,120
     280:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
     284:	0180c744 	movi	r6,797
     288:	014cfd04 	movi	r5,13300
     28c:	01001e04 	movi	r4,120
     290:	00008b40 	call	8b4 <i2c_short_write>
     294:	008000b4 	movhi	r2,2
     298:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     29c:	0001883a 	nop
     2a0:	10bfffc4 	addi	r2,r2,-1
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_SENSOR_RESET,0x00C4);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_STANDBY_CONTROL,0x0008);
	i2c_short_write(CAM_I2C_ID,0x33F4,0x031D);
	for (i=0; i < 100000 ; i++)
     2a4:	103ffd1e 	bne	r2,zero,29c <__alt_data_end+0xff00029c>
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2a8:	01a3c254 	movui	r6,36617
     2ac:	014d0784 	movi	r5,13342
     2b0:	01001e04 	movi	r4,120
     2b4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
     2b8:	01805404 	movi	r6,336
     2bc:	014d0704 	movi	r5,13340
     2c0:	01001e04 	movi	r4,120
     2c4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
     2c8:	01a3c254 	movui	r6,36617
     2cc:	014d0784 	movi	r5,13342
     2d0:	01001e04 	movi	r4,120
     2d4:	00008b40 	call	8b4 <i2c_short_write>
     2d8:	008000b4 	movhi	r2,2
     2dc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     2e0:	0001883a 	nop
     2e4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	/* enable PLL */
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_DIVIDERS_1,0x0150);
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
     2e8:	103ffd1e 	bne	r2,zero,2e0 <__alt_data_end+0xff0002e0>
     2ec:	04000074 	movhi	r16,1
     2f0:	8400d404 	addi	r16,r16,848
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
     2f4:	01a3c214 	movui	r6,36616
     2f8:	014d0784 	movi	r5,13342
     2fc:	01001e04 	movi	r4,120
     300:	00008b40 	call	8b4 <i2c_short_write>
     304:	84400084 	addi	r17,r16,2
     308:	84804604 	addi	r18,r16,280
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     30c:	8980000b 	ldhu	r6,0(r17)
     310:	8140000b 	ldhu	r5,0(r16)
     314:	01001e04 	movi	r4,120
     318:	84000104 	addi	r16,r16,4
     31c:	00008b40 	call	8b4 <i2c_short_write>
     320:	8c400104 	addi	r17,r17,4
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F09);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,REG_MT9D112_PLL_CLK_IN_CONTROL,0x8F08);
	/* Set regs */
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
     324:	84bff91e 	bne	r16,r18,30c <__alt_data_end+0xff00030c>
     328:	04000074 	movhi	r16,1
     32c:	84008404 	addi	r16,r16,528
     330:	84400084 	addi	r17,r16,2
     334:	84805004 	addi	r18,r16,320
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     338:	8980000b 	ldhu	r6,0(r17)
     33c:	8140000b 	ldhu	r5,0(r16)
     340:	01001e04 	movi	r4,120
     344:	84000104 	addi	r16,r16,4
     348:	00008b40 	call	8b4 <i2c_short_write>
     34c:	8c400104 	addi	r17,r17,4
	for (i = 0 ; i < (sizeof(preview_snapshot_mode_reg_settings_array)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				preview_snapshot_mode_reg_settings_array[i][0],
				preview_snapshot_mode_reg_settings_array[i][1]);
	}
	for (i = 0 ; i < (sizeof(noise_reduction_reg_settings_array)/4); i++) {
     350:	943ff91e 	bne	r18,r16,338 <__alt_data_end+0xff000338>
		i2c_short_write(CAM_I2C_ID,
				noise_reduction_reg_settings_array[i][0],
				noise_reduction_reg_settings_array[i][1]);
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
     354:	018164c4 	movi	r6,1427
     358:	014d6904 	movi	r5,13732
     35c:	01001e04 	movi	r4,120
     360:	00008b40 	call	8b4 <i2c_short_write>
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
     364:	0189e644 	movi	r6,10137
     368:	014ce304 	movi	r5,13196
     36c:	01001e04 	movi	r4,120
     370:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     374:	01991004 	movi	r6,25664
     378:	014ce404 	movi	r5,13200
     37c:	01001e04 	movi	r4,120
     380:	00008b40 	call	8b4 <i2c_short_write>
     384:	008000b4 	movhi	r2,2
     388:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     38c:	0001883a 	nop
     390:	10bfffc4 	addi	r2,r2,-1
	}
	i2c_short_write(CAM_I2C_ID,0x35A4,0x0593);
// sequencer table
	i2c_short_write(CAM_I2C_ID,0x338C,0x2799);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     394:	103ffd1e 	bne	r2,zero,38c <__alt_data_end+0xff00038c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
     398:	0189e6c4 	movi	r6,10139
     39c:	014ce304 	movi	r5,13196
     3a0:	01001e04 	movi	r4,120
     3a4:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
     3a8:	01991004 	movi	r6,25664
     3ac:	014ce404 	movi	r5,13200
     3b0:	01001e04 	movi	r4,120
     3b4:	00008b40 	call	8b4 <i2c_short_write>
     3b8:	008000b4 	movhi	r2,2
     3bc:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3c0:	0001883a 	nop
     3c4:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0x279B);
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
     3c8:	103ffd1e 	bne	r2,zero,3c0 <__alt_data_end+0xff0003c0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     3cc:	01a840d4 	movui	r6,41219
     3d0:	014ce304 	movi	r5,13196
     3d4:	01001e04 	movi	r4,120
     3d8:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
     3dc:	01800144 	movi	r6,5
     3e0:	014ce404 	movi	r5,13200
     3e4:	01001e04 	movi	r4,120
     3e8:	00008b40 	call	8b4 <i2c_short_write>
     3ec:	008000b4 	movhi	r2,2
     3f0:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     3f4:	0001883a 	nop
     3f8:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x6440);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
     3fc:	103ffd1e 	bne	r2,zero,3f4 <__alt_data_end+0xff0003f4>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
     400:	01a840d4 	movui	r6,41219
     404:	014ce304 	movi	r5,13196
     408:	01001e04 	movi	r4,120
     40c:	00008b40 	call	8b4 <i2c_short_write>
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
     410:	01800184 	movi	r6,6
     414:	014ce404 	movi	r5,13200
     418:	01001e04 	movi	r4,120
     41c:	00008b40 	call	8b4 <i2c_short_write>
     420:	008000b4 	movhi	r2,2
     424:	10a1a804 	addi	r2,r2,-31072
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
     428:	0001883a 	nop
     42c:	10bfffc4 	addi	r2,r2,-1
	i2c_short_write(CAM_I2C_ID,0x3390,0x0005);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
     430:	103ffd1e 	bne	r2,zero,428 <__alt_data_end+0xff000428>
     434:	04000074 	movhi	r16,1
     438:	84003a04 	addi	r16,r16,232
     43c:	84400084 	addi	r17,r16,2
     440:	84804a04 	addi	r18,r16,296
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
     444:	8980000b 	ldhu	r6,0(r17)
     448:	8140000b 	ldhu	r5,0(r16)
     44c:	01001e04 	movi	r4,120
     450:	84000104 	addi	r16,r16,4
     454:	00008b40 	call	8b4 <i2c_short_write>
     458:	8c400104 	addi	r17,r17,4
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x338C,0xA103);
	i2c_short_write(CAM_I2C_ID,0x3390,0x0006);
	for (i=0; i < 100000 ; i++)
		asm volatile ("nop");
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
     45c:	943ff91e 	bne	r18,r16,444 <__alt_data_end+0xff000444>
     460:	008003f4 	movhi	r2,15
     464:	10909004 	addi	r2,r2,16960
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     468:	0001883a 	nop
     46c:	10bfffc4 	addi	r2,r2,-1
	for (i = 0 ; i < (sizeof(lens_roll_off_tbl)/4); i++) {
		i2c_short_write(CAM_I2C_ID,
				lens_roll_off_tbl[i][0],
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
     470:	103ffd1e 	bne	r2,zero,468 <__alt_data_end+0xff000468>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
     474:	01800804 	movi	r6,32
     478:	014ccb84 	movi	r5,13102
     47c:	01001e04 	movi	r4,120
     480:	00008b40 	call	8b4 <i2c_short_write>
     484:	008003f4 	movhi	r2,15
     488:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     48c:	0001883a 	nop
     490:	10bfffc4 	addi	r2,r2,-1
				lens_roll_off_tbl[i][1]);
	}
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
     494:	103ffd1e 	bne	r2,zero,48c <__alt_data_end+0xff00048c>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
     498:	01800884 	movi	r6,34
     49c:	014d0104 	movi	r5,13316
     4a0:	01001e04 	movi	r4,120
     4a4:	00008b40 	call	8b4 <i2c_short_write>
     4a8:	008003f4 	movhi	r2,15
     4ac:	10909004 	addi	r2,r2,16960
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
     4b0:	0001883a 	nop
     4b4:	10bfffc4 	addi	r2,r2,-1
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x332E,0x0020);
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
     4b8:	103ffd1e 	bne	r2,zero,4b0 <__alt_data_end+0xff0004b0>
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4bc:	018009c4 	movi	r6,39
     4c0:	014c1004 	movi	r5,12352
     4c4:	01001e04 	movi	r4,120
}
     4c8:	dfc00317 	ldw	ra,12(sp)
     4cc:	dc800217 	ldw	r18,8(sp)
     4d0:	dc400117 	ldw	r17,4(sp)
     4d4:	dc000017 	ldw	r16,0(sp)
     4d8:	dec00404 	addi	sp,sp,16
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3404,0x0022); /* set RGB565 mode */
	for (i=0; i < 1000000 ; i++)
		asm volatile ("nop");
	i2c_short_write(CAM_I2C_ID,0x3040,0x0027); /* mirror */
     4dc:	00008b41 	jmpi	8b4 <i2c_short_write>

000004e0 <cam_get_xsize>:
}

unsigned short cam_get_xsize(){
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     4e0:	00c04034 	movhi	r3,256
     4e4:	18c41304 	addi	r3,r3,4172
     4e8:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     4ec:	1080010c 	andi	r2,r2,4
     4f0:	103ffd26 	beq	r2,zero,4e8 <__alt_data_end+0xff0004e8>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG);
     4f4:	00804034 	movhi	r2,256
     4f8:	10841004 	addi	r2,r2,4160
}
     4fc:	1080002b 	ldhuio	r2,0(r2)
     500:	f800283a 	ret

00000504 <cam_get_ysize>:

unsigned short cam_get_ysize() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     504:	00c04034 	movhi	r3,256
     508:	18c41304 	addi	r3,r3,4172
     50c:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     510:	1080010c 	andi	r2,r2,4
     514:	103ffd26 	beq	r2,zero,50c <__alt_data_end+0xff00050c>
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
     518:	00804034 	movhi	r2,256
     51c:	10841104 	addi	r2,r2,4164
}
     520:	1080002b 	ldhuio	r2,0(r2)
     524:	f800283a 	ret

00000528 <cam_get_profiling>:

void cam_get_profiling() {
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     528:	00c04034 	movhi	r3,256
     52c:	18c41304 	addi	r3,r3,4172
     530:	18800023 	ldbuio	r2,0(r3)
	} while ((control_reg&CAM_Profile_valid)==0);
     534:	1080010c 	andi	r2,r2,4
     538:	103ffd26 	beq	r2,zero,530 <__alt_data_end+0xff000530>
	printf("Nr. of bytes each line    : %d\n",
     53c:	00804034 	movhi	r2,256
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     540:	deffff04 	addi	sp,sp,-4
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     544:	10841004 	addi	r2,r2,4160
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	return IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG);
}

void cam_get_profiling() {
     548:	dfc00015 	stw	ra,0(sp)
	unsigned char control_reg;
	do {
		control_reg = IORD_8DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
     54c:	1140002b 	ldhuio	r5,0(r2)
     550:	01000074 	movhi	r4,1
     554:	21002204 	addi	r4,r4,136
     558:	297fffcc 	andi	r5,r5,65535
     55c:	00026680 	call	2668 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
     560:	00804034 	movhi	r2,256
     564:	10841104 	addi	r2,r2,4164
     568:	1140002b 	ldhuio	r5,0(r2)
     56c:	01000074 	movhi	r4,1
     570:	21002a04 	addi	r4,r4,168
     574:	297fffcc 	andi	r5,r5,65535
     578:	00026680 	call	2668 <printf>
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     57c:	00804034 	movhi	r2,256
     580:	10841204 	addi	r2,r2,4168
     584:	1140002b 	ldhuio	r5,0(r2)
     588:	01000074 	movhi	r4,1
     58c:	21003204 	addi	r4,r4,200
     590:	297fffcc 	andi	r5,r5,65535
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}
     594:	dfc00017 	ldw	ra,0(sp)
     598:	dec00104 	addi	sp,sp,4
	} while ((control_reg&CAM_Profile_valid)==0);
	printf("Nr. of bytes each line    : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_BYTES_EACH_LINE_REG));
	printf("Nr. of lines each frame   : %d\n",
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_LINES_EACH_FRAME_REG));
	printf("Nr. of frames each second : %d\n",
     59c:	00026681 	jmpi	2668 <printf>

000005a0 <cam_set_image_pointer>:
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5a0:	21003fcc 	andi	r4,r4,255
     5a4:	2100201c 	xori	r4,r4,128
     5a8:	213fe004 	addi	r4,r4,-128
     5ac:	00800044 	movi	r2,1
     5b0:	20801226 	beq	r4,r2,5fc <cam_set_image_pointer+0x5c>
     5b4:	11000c0e 	bge	r2,r4,5e8 <cam_set_image_pointer+0x48>
     5b8:	00800084 	movi	r2,2
     5bc:	20800626 	beq	r4,r2,5d8 <cam_set_image_pointer+0x38>
     5c0:	008000c4 	movi	r2,3
     5c4:	2080111e 	bne	r4,r2,60c <cam_set_image_pointer+0x6c>
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
                break;
	   case 3 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_4,(int)memory_pointer);
     5c8:	00804034 	movhi	r2,256
     5cc:	10841704 	addi	r2,r2,4188
     5d0:	11400035 	stwio	r5,0(r2)
     5d4:	f800283a 	ret
	switch (pointer_id) {
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
	            break;
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
                break;
	   case 2 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_3,(int)memory_pointer);
     5d8:	00804034 	movhi	r2,256
     5dc:	10841604 	addi	r2,r2,4184
     5e0:	11400035 	stwio	r5,0(r2)
                break;
     5e4:	f800283a 	ret
			IORD_16DIRECT(CAM_CTRL_BASE,CAM_FRAME_RATE_REG));
}

void cam_set_image_pointer(char pointer_id,
		                   void *memory_pointer) {
	switch (pointer_id) {
     5e8:	2000091e 	bne	r4,zero,610 <cam_set_image_pointer+0x70>
	   case 0 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1,(int)memory_pointer);
     5ec:	00804034 	movhi	r2,256
     5f0:	10841404 	addi	r2,r2,4176
     5f4:	11400035 	stwio	r5,0(r2)
	            break;
     5f8:	f800283a 	ret
	   case 1 : IOWR_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_2,(int)memory_pointer);
     5fc:	00804034 	movhi	r2,256
     600:	10841504 	addi	r2,r2,4180
     604:	11400035 	stwio	r5,0(r2)
                break;
     608:	f800283a 	ret
     60c:	f800283a 	ret
     610:	f800283a 	ret

00000614 <current_image_valid>:
	}
}

short current_image_valid() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     614:	00804034 	movhi	r2,256
     618:	10841304 	addi	r2,r2,4172
     61c:	1080002b 	ldhuio	r2,0(r2)
	return (value&CAM_Current_Image_Valid);
}
     620:	1080800c 	andi	r2,r2,512
     624:	f800283a 	ret

00000628 <current_image_pointer>:

void *current_image_pointer() {
	return (void *)IORD_32DIRECT(CAM_CTRL_BASE,CAM_ADDR_PNTR_1);
     628:	00804034 	movhi	r2,256
     62c:	10841404 	addi	r2,r2,4176
}
     630:	10800037 	ldwio	r2,0(r2)
     634:	f800283a 	ret

00000638 <take_picture_blocking>:

void take_picture_blocking() {
	unsigned short value;
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Take_Picture);
     638:	00c04034 	movhi	r3,256
     63c:	18c41304 	addi	r3,r3,4172
     640:	00800204 	movi	r2,8
     644:	1880002d 	sthio	r2,0(r3)
	do {
		value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     648:	1880002b 	ldhuio	r2,0(r3)
	} while ((value&CAM_Busy)!= 0);
     64c:	1080020c 	andi	r2,r2,8
     650:	103ffd1e 	bne	r2,zero,648 <__alt_data_end+0xff000648>
}
     654:	f800283a 	ret

00000658 <enable_continues_mode>:

void enable_continues_mode() {
	IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Start_Continues);
     658:	00804034 	movhi	r2,256
     65c:	10841304 	addi	r2,r2,4172
     660:	00c00404 	movi	r3,16
     664:	10c0002d 	sthio	r3,0(r2)
     668:	f800283a 	ret

0000066c <new_image_available>:
}

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
     66c:	00c04034 	movhi	r3,256
     670:	18c41304 	addi	r3,r3,4172
     674:	1880002b 	ldhuio	r2,0(r3)
	if ((value&CAM_IRQ_Generated)!=0) {
     678:	1080200c 	andi	r2,r2,128
     67c:	1000021e 	bne	r2,zero,688 <new_image_available+0x1c>
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
		return 1;
	} else return 0;
     680:	0005883a 	mov	r2,zero
}
     684:	f800283a 	ret

char new_image_available() {
	unsigned short value;
	value = IORD_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG);
	if ((value&CAM_IRQ_Generated)!=0) {
		IOWR_16DIRECT(CAM_CTRL_BASE,CAM_CONTROL_REG,CAM_Clear_IRQ);
     688:	00804004 	movi	r2,256
     68c:	1880002d 	sthio	r2,0(r3)
		return 1;
     690:	00800044 	movi	r2,1
     694:	f800283a 	ret

00000698 <DIPSW_get_value>:

#include <system.h>
#include <io.h>

unsigned char DIPSW_get_value() {
	return IORD_8DIRECT(PIO_0_BASE,0)^0xFF;
     698:	00804034 	movhi	r2,256
     69c:	10842804 	addi	r2,r2,4256
     6a0:	10800023 	ldbuio	r2,0(r2)
}
     6a4:	0084303a 	nor	r2,zero,r2
     6a8:	f800283a 	ret

000006ac <conv_grayscale>:
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6ac:	d0a6d117 	ldw	r2,-25788(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6b0:	defffd04 	addi	sp,sp,-12
     6b4:	dc400115 	stw	r17,4(sp)
     6b8:	dc000015 	stw	r16,0(sp)
     6bc:	dfc00215 	stw	ra,8(sp)
  int k,gray;
  int kmax = width*height;
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
     6c0:	d166d015 	stw	r5,-25792(gp)
  grayscape_height = height;
     6c4:	d1a6cf15 	stw	r6,-25796(gp)
int grayscale_width = 0;
int grayscape_height = 0;

void conv_grayscale(void *picture,
                int width,
                int height) {
     6c8:	2021883a 	mov	r16,r4
  int k,gray;
  int kmax = width*height;
     6cc:	29a3383a 	mul	r17,r5,r6
  unsigned short *pixels = (unsigned short *)picture , rgb;
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
     6d0:	10000226 	beq	r2,zero,6dc <conv_grayscale+0x30>
    free(grayscale_array);
     6d4:	1009883a 	mov	r4,r2
     6d8:	0001e180 	call	1e18 <free>
  grayscale_array = (unsigned char *) malloc(kmax);
     6dc:	8809883a 	mov	r4,r17
     6e0:	0001e040 	call	1e04 <malloc>
     6e4:	d0a6d115 	stw	r2,-25788(gp)
  for(k = 0; k<kmax; k++)
     6e8:	0440140e 	bge	zero,r17,73c <conv_grayscale+0x90>
     6ec:	8009883a 	mov	r4,r16
     6f0:	0013883a 	mov	r9,zero
     6f4:	00000106 	br	6fc <conv_grayscale+0x50>
     6f8:	d0a6d117 	ldw	r2,-25788(gp)
  {
	  rgb = pixels[k];
     6fc:	2200000b 	ldhu	r8,0(r4)
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
     700:	1245883a 	add	r2,r2,r9
     704:	40ffffcc 	andi	r3,r8,65535
     708:	180ed17a 	srli	r7,r3,5
     70c:	1806d2fa 	srli	r3,r3,11
     710:	420007cc 	andi	r8,r8,31
     714:	39c00fcc 	andi	r7,r7,63
     718:	39c00a24 	muli	r7,r7,40
     71c:	18c7883a 	add	r3,r3,r3
     720:	380fd13a 	srai	r7,r7,4
     724:	38c7883a 	add	r3,r7,r3
     728:	1a07883a 	add	r3,r3,r8
     72c:	10c00025 	stbio	r3,0(r2)
  grayscale_width = width;
  grayscape_height = height;
  if (grayscale_array != NULL)
    free(grayscale_array);
  grayscale_array = (unsigned char *) malloc(kmax);
  for(k = 0; k<kmax; k++)
     730:	4a400044 	addi	r9,r9,1
     734:	21000084 	addi	r4,r4,2
     738:	8a7fef1e 	bne	r17,r9,6f8 <__alt_data_end+0xff0006f8>
  {
	  rgb = pixels[k];
	  gray = ((rgb>>11)<<1) + ((((rgb>>5)&0x3F)*40)>>4) + (rgb&0x1F); 	// R + G + B
	  IOWR_8DIRECT(grayscale_array,k,gray);
  }
}
     73c:	dfc00217 	ldw	ra,8(sp)
     740:	dc400117 	ldw	r17,4(sp)
     744:	dc000017 	ldw	r16,0(sp)
     748:	dec00304 	addi	sp,sp,12
     74c:	f800283a 	ret

00000750 <get_grayscale_width>:


int get_grayscale_width() {
	return grayscale_width;
}
     750:	d0a6d017 	ldw	r2,-25792(gp)
     754:	f800283a 	ret

00000758 <get_grayscale_height>:

int get_grayscale_height() {
	return grayscape_height;
}
     758:	d0a6cf17 	ldw	r2,-25796(gp)
     75c:	f800283a 	ret

00000760 <get_grayscale_picture>:

unsigned char *get_grayscale_picture() {
	return grayscale_array;
}
     760:	d0a6d117 	ldw	r2,-25788(gp)
     764:	f800283a 	ret

00000768 <i2c_busy_wait>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     768:	00c04034 	movhi	r3,256
     76c:	18c42704 	addi	r3,r3,4252
     770:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     774:	108000cc 	andi	r2,r2,3
     778:	103ffd1e 	bne	r2,zero,770 <__alt_data_end+0xff000770>
}
     77c:	f800283a 	ret

00000780 <i2c_auto_detect>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     780:	01004034 	movhi	r4,256
     784:	21042704 	addi	r4,r4,4252
     788:	00c04034 	movhi	r3,256
     78c:	18c42704 	addi	r3,r3,4252
     790:	20800037 	ldwio	r2,0(r4)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     794:	108000cc 	andi	r2,r2,3
     798:	103ffb1e 	bne	r2,zero,788 <__alt_data_end+0xff000788>
}

void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
     79c:	00800104 	movi	r2,4
     7a0:	18800035 	stwio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     7a4:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     7a8:	108000cc 	andi	r2,r2,3
     7ac:	103ffd1e 	bne	r2,zero,7a4 <__alt_data_end+0xff0007a4>
void i2c_auto_detect() {
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7b0:	00804034 	movhi	r2,256
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7b4:	defffc04 	addi	sp,sp,-16
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7b8:	10842504 	addi	r2,r2,4244
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
}

void i2c_auto_detect() {
     7bc:	dfc00315 	stw	ra,12(sp)
     7c0:	dc800215 	stw	r18,8(sp)
     7c4:	dc400115 	stw	r17,4(sp)
     7c8:	dc000015 	stw	r16,0(sp)
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
     7cc:	14800037 	ldwio	r18,0(r2)
    printf("Number of I2C devices detected: %d\n",nrdef);
     7d0:	01000074 	movhi	r4,1
     7d4:	21011a04 	addi	r4,r4,1128
     7d8:	900b883a 	mov	r5,r18
    for (loop = 0 ; loop < nrdef ; loop++) {
     7dc:	0021883a 	mov	r16,zero
	int nrdef,loop,value;
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
     7e0:	00026680 	call	2668 <printf>
    for (loop = 0 ; loop < nrdef ; loop++) {
     7e4:	04800a0e 	bge	zero,r18,810 <i2c_auto_detect+0x90>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
     7e8:	04404034 	movhi	r17,256
     7ec:	8c442404 	addi	r17,r17,4240
     7f0:	8c000035 	stwio	r16,0(r17)
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     7f4:	89800037 	ldwio	r6,0(r17)
     7f8:	01000074 	movhi	r4,1
     7fc:	800b883a 	mov	r5,r16
     800:	21012304 	addi	r4,r4,1164
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     804:	84000044 	addi	r16,r16,1
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
     808:	00026680 	call	2668 <printf>
    i2c_busy_wait();
    IOWR_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,I2C_Autodetect);
    i2c_busy_wait();
    nrdef = IORD_32DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG);
    printf("Number of I2C devices detected: %d\n",nrdef);
    for (loop = 0 ; loop < nrdef ; loop++) {
     80c:	943ff81e 	bne	r18,r16,7f0 <__alt_data_end+0xff0007f0>
    	IOWR_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,loop);
    	value = IORD_32DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG);
    	printf("Device nr. %d has Address: 0x%02X\n",loop,value);
    }
}
     810:	dfc00317 	ldw	ra,12(sp)
     814:	dc800217 	ldw	r18,8(sp)
     818:	dc400117 	ldw	r17,4(sp)
     81c:	dc000017 	ldw	r16,0(sp)
     820:	dec00404 	addi	sp,sp,16
     824:	f800283a 	ret

00000828 <i2c_short_read>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     828:	01804034 	movhi	r6,256
     82c:	31842704 	addi	r6,r6,4252
     830:	00c04034 	movhi	r3,256
     834:	18c42704 	addi	r3,r3,4252
     838:	30800037 	ldwio	r2,0(r6)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     83c:	108000cc 	andi	r2,r2,3
     840:	103ffb1e 	bne	r2,zero,830 <__alt_data_end+0xff000830>
}

unsigned int i2c_short_read(unsigned char device_id,
		                    unsigned short address) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     844:	00804034 	movhi	r2,256
     848:	21003fcc 	andi	r4,r4,255
     84c:	10842404 	addi	r2,r2,4240
     850:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     854:	00804034 	movhi	r2,256
     858:	10842504 	addi	r2,r2,4244
     85c:	1140002d 	sthio	r5,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     860:	008010c4 	movi	r2,67
     864:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     868:	180b883a 	mov	r5,r3
     86c:	00c04034 	movhi	r3,256
     870:	18c42704 	addi	r3,r3,4252
     874:	28800037 	ldwio	r2,0(r5)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     878:	108000cc 	andi	r2,r2,3
     87c:	103ffb1e 	bne	r2,zero,86c <__alt_data_end+0xff00086c>
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_2Byte_Transfer|I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
     880:	00804034 	movhi	r2,256
     884:	21000044 	addi	r4,r4,1
     888:	10842404 	addi	r2,r2,4240
     88c:	11000025 	stbio	r4,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     890:	00800884 	movi	r2,34
     894:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     898:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     89c:	108000cc 	andi	r2,r2,3
     8a0:	103ffd1e 	bne	r2,zero,898 <__alt_data_end+0xff000898>
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id+1);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_4Byte_Read);
	i2c_busy_wait();
	return IORD_32DIRECT(I2C_CTRL_BASE,I2C_DATA_REG);
     8a4:	00804034 	movhi	r2,256
     8a8:	10842604 	addi	r2,r2,4248
}
     8ac:	10800037 	ldwio	r2,0(r2)
     8b0:	f800283a 	ret

000008b4 <i2c_short_write>:
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8b4:	01c04034 	movhi	r7,256
     8b8:	39c42704 	addi	r7,r7,4252
     8bc:	00c04034 	movhi	r3,256
     8c0:	18c42704 	addi	r3,r3,4252
     8c4:	38800037 	ldwio	r2,0(r7)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     8c8:	108000cc 	andi	r2,r2,3
     8cc:	103ffb1e 	bne	r2,zero,8bc <__alt_data_end+0xff0008bc>

void i2c_short_write(unsigned char device_id,
		             unsigned short address,
		             unsigned short data) {
	i2c_busy_wait();
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_DEVICE_ID_REG,device_id);
     8d0:	00804034 	movhi	r2,256
     8d4:	10842404 	addi	r2,r2,4240
     8d8:	11000025 	stbio	r4,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
     8dc:	00804034 	movhi	r2,256
     8e0:	10842504 	addi	r2,r2,4244
     8e4:	1140002d 	sthio	r5,0(r2)
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
     8e8:	00804034 	movhi	r2,256
     8ec:	10842604 	addi	r2,r2,4248
     8f0:	1180002d 	sthio	r6,0(r2)
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
     8f4:	00801084 	movi	r2,66
     8f8:	18800025 	stbio	r2,0(r3)
#include "i2c.h"

void i2c_busy_wait() {
	int busy;
	do {
		busy = IORD_32DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG);
     8fc:	18800037 	ldwio	r2,0(r3)
	} while ((busy&(I2C_Busy_Flag|I2C_Autodetect_Busy_Flag))!=0);
     900:	108000cc 	andi	r2,r2,3
     904:	103ffd1e 	bne	r2,zero,8fc <__alt_data_end+0xff0008fc>
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_ADDR_REG,address);
	IOWR_16DIRECT(I2C_CTRL_BASE,I2C_DATA_REG,data);
	IOWR_8DIRECT(I2C_CTRL_BASE,I2C_CONTROL_REG,
			     I2C_Start|I2C_Short_Transfer);
	i2c_busy_wait();
}
     908:	f800283a 	ret

0000090c <LCD_Write_Command>:

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     90c:	00804034 	movhi	r2,256
     910:	10841804 	addi	r2,r2,4192
     914:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     918:	01000284 	movi	r4,10
     91c:	000ebf41 	jmpi	ebf4 <usleep>

00000920 <LCD_Write_Data>:
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     920:	00804034 	movhi	r2,256
     924:	10841904 	addi	r2,r2,4196
     928:	1100002d 	sthio	r4,0(r2)
	usleep(10);
     92c:	01000284 	movi	r4,10
     930:	000ebf41 	jmpi	ebf4 <usleep>

00000934 <init_LCD>:
}


void init_LCD() {
     934:	defff704 	addi	sp,sp,-36
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     938:	00804034 	movhi	r2,256
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
}


void init_LCD() {
     93c:	dd400515 	stw	r21,20(sp)
     940:	dfc00815 	stw	ra,32(sp)
     944:	ddc00715 	stw	r23,28(sp)
     948:	dd800615 	stw	r22,24(sp)
     94c:	dd000415 	stw	r20,16(sp)
     950:	dcc00315 	stw	r19,12(sp)
     954:	dc800215 	stw	r18,8(sp)
     958:	dc400115 	stw	r17,4(sp)
     95c:	dc000015 	stw	r16,0(sp)
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     960:	05400084 	movi	r21,2
     964:	10841a04 	addi	r2,r2,4200
     968:	1540002d 	sthio	r21,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     96c:	04804034 	movhi	r18,256
     970:	94841804 	addi	r18,r18,4192
     974:	00800a04 	movi	r2,40
     978:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     97c:	04000284 	movi	r16,10
     980:	8009883a 	mov	r4,r16
     984:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     988:	05c00444 	movi	r23,17
     98c:	95c0002d 	sthio	r23,0(r18)
	usleep(10);
     990:	8009883a 	mov	r4,r16
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     994:	04404034 	movhi	r17,256
     998:	8c441904 	addi	r17,r17,4196
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     99c:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9a0:	0027883a 	mov	r19,zero
     9a4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9a8:	8009883a 	mov	r4,r16
     9ac:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     9b0:	008032c4 	movi	r2,203
     9b4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     9b8:	8009883a 	mov	r4,r16
     9bc:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9c0:	00800e44 	movi	r2,57
     9c4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9c8:	8009883a 	mov	r4,r16
     9cc:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9d0:	00800b04 	movi	r2,44
     9d4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9d8:	8009883a 	mov	r4,r16
     9dc:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9e0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     9e4:	8009883a 	mov	r4,r16
     9e8:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9ec:	00800d04 	movi	r2,52
     9f0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     9f4:	8009883a 	mov	r4,r16
     9f8:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     9fc:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     a00:	8009883a 	mov	r4,r16
     a04:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a08:	008033c4 	movi	r2,207
     a0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a10:	8009883a 	mov	r4,r16
     a14:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a18:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a1c:	8009883a 	mov	r4,r16
     a20:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a24:	05802044 	movi	r22,129
     a28:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     a2c:	8009883a 	mov	r4,r16
     a30:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a34:	00800c04 	movi	r2,48
     a38:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a3c:	8009883a 	mov	r4,r16
     a40:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a44:	00803a04 	movi	r2,232
     a48:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a4c:	8009883a 	mov	r4,r16
     a50:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a54:	00802144 	movi	r2,133
     a58:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a5c:	8009883a 	mov	r4,r16
     a60:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a64:	05000044 	movi	r20,1
     a68:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     a6c:	8009883a 	mov	r4,r16
     a70:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a74:	00801e44 	movi	r2,121
     a78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     a7c:	8009883a 	mov	r4,r16
     a80:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     a84:	00803a84 	movi	r2,234
     a88:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     a8c:	8009883a 	mov	r4,r16
     a90:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     a94:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     a98:	8009883a 	mov	r4,r16
     a9c:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aa0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     aa4:	8009883a 	mov	r4,r16
     aa8:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     aac:	00801904 	movi	r2,100
     ab0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ab4:	8009883a 	mov	r4,r16
     ab8:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     abc:	008000c4 	movi	r2,3
     ac0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ac4:	8009883a 	mov	r4,r16
     ac8:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     acc:	00800484 	movi	r2,18
     ad0:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ad4:	8009883a 	mov	r4,r16
     ad8:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     adc:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     ae0:	8009883a 	mov	r4,r16
     ae4:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ae8:	00803dc4 	movi	r2,247
     aec:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     af0:	8009883a 	mov	r4,r16
     af4:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     af8:	00800804 	movi	r2,32
     afc:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b00:	8009883a 	mov	r4,r16
     b04:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b08:	00803004 	movi	r2,192
     b0c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b10:	8009883a 	mov	r4,r16
     b14:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b18:	05800984 	movi	r22,38
     b1c:	8d80002d 	sthio	r22,0(r17)
	usleep(10);
     b20:	8009883a 	mov	r4,r16
     b24:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b28:	00800104 	movi	r2,4
     b2c:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b30:	8009883a 	mov	r4,r16
     b34:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b38:	00803044 	movi	r2,193
     b3c:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b40:	8009883a 	mov	r4,r16
     b44:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b48:	8dc0002d 	sthio	r23,0(r17)
	usleep(10);
     b4c:	8009883a 	mov	r4,r16
     b50:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b54:	00803144 	movi	r2,197
     b58:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b5c:	8009883a 	mov	r4,r16
     b60:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b64:	00800d44 	movi	r2,53
     b68:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b6c:	8009883a 	mov	r4,r16
     b70:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b74:	00800f84 	movi	r2,62
     b78:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b7c:	8009883a 	mov	r4,r16
     b80:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     b84:	008031c4 	movi	r2,199
     b88:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     b8c:	8009883a 	mov	r4,r16
     b90:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     b94:	00802f84 	movi	r2,190
     b98:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     b9c:	8009883a 	mov	r4,r16
     ba0:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     ba4:	00802c44 	movi	r2,177
     ba8:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bac:	8009883a 	mov	r4,r16
     bb0:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bb4:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     bb8:	8009883a 	mov	r4,r16
     bbc:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     bc0:	00800404 	movi	r2,16
     bc4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     bc8:	8009883a 	mov	r4,r16
     bcc:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bd0:	00800e84 	movi	r2,58
     bd4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bd8:	8009883a 	mov	r4,r16
     bdc:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     be0:	00801544 	movi	r2,85
     be4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     be8:	8009883a 	mov	r4,r16
     bec:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     bf0:	00802d84 	movi	r2,182
     bf4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     bf8:	8009883a 	mov	r4,r16
     bfc:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c00:	8c00002d 	sthio	r16,0(r17)
	usleep(10);
     c04:	8009883a 	mov	r4,r16
     c08:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c0c:	00802884 	movi	r2,162
     c10:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     c14:	8009883a 	mov	r4,r16
     c18:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c1c:	00803c84 	movi	r2,242
     c20:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c24:	8009883a 	mov	r4,r16
     c28:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c2c:	8d40002d 	sthio	r21,0(r17)
	usleep(10);
     c30:	8009883a 	mov	r4,r16
     c34:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c38:	9580002d 	sthio	r22,0(r18)
	usleep(10);
     c3c:	8009883a 	mov	r4,r16
     c40:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c44:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     c48:	8009883a 	mov	r4,r16
     c4c:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c50:	00800d84 	movi	r2,54
     c54:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c58:	8009883a 	mov	r4,r16
     c5c:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c60:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c64:	8009883a 	mov	r4,r16
     c68:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     c6c:	00800a84 	movi	r2,42
     c70:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     c74:	8009883a 	mov	r4,r16
     c78:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c7c:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c80:	8009883a 	mov	r4,r16
     c84:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c88:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c8c:	8009883a 	mov	r4,r16
     c90:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     c94:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     c98:	8009883a 	mov	r4,r16
     c9c:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ca0:	00803bc4 	movi	r2,239
     ca4:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     ca8:	8009883a 	mov	r4,r16
     cac:	000ebf40 	call	ebf4 <usleep>

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     cb0:	00800ac4 	movi	r2,43
     cb4:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     cb8:	8009883a 	mov	r4,r16
     cbc:	000ebf40 	call	ebf4 <usleep>
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cc0:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cc4:	8009883a 	mov	r4,r16
     cc8:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ccc:	8cc0002d 	sthio	r19,0(r17)
	usleep(10);
     cd0:	8009883a 	mov	r4,r16
     cd4:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     cd8:	8d00002d 	sthio	r20,0(r17)
	usleep(10);
     cdc:	8009883a 	mov	r4,r16
     ce0:	000ebf40 	call	ebf4 <usleep>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     ce4:	00800fc4 	movi	r2,63
     ce8:	8880002d 	sthio	r2,0(r17)
	usleep(10);
     cec:	8009883a 	mov	r4,r16
     cf0:	000ebf40 	call	ebf4 <usleep>
	LCD_Write_Command(0x002B);	//page address set 
	LCD_Write_Data(0x0000);
	LCD_Write_Data(0x0000);		//start 0x0000 
	LCD_Write_Data(0x0001);
	LCD_Write_Data(0x003F);		//end 0x013F 
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_NR_PIX_LINE_REG,240);
     cf4:	00c04034 	movhi	r3,256
     cf8:	00803c04 	movi	r2,240
     cfc:	18c41d04 	addi	r3,r3,4212
     d00:	18800035 	stwio	r2,0(r3)
	LCD_width = 240;
     d04:	d0a6d28d 	sth	r2,-25782(gp)
	LCD_height = 320;
     d08:	00805004 	movi	r2,320
     d0c:	d0a6d20d 	sth	r2,-25784(gp)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d10:	00800a44 	movi	r2,41
     d14:	9080002d 	sthio	r2,0(r18)
	usleep(10);
     d18:	8009883a 	mov	r4,r16
	LCD_height = 320;


	LCD_Write_Command(0x0029);

}
     d1c:	dfc00817 	ldw	ra,32(sp)
     d20:	ddc00717 	ldw	r23,28(sp)
     d24:	dd800617 	ldw	r22,24(sp)
     d28:	dd400517 	ldw	r21,20(sp)
     d2c:	dd000417 	ldw	r20,16(sp)
     d30:	dcc00317 	ldw	r19,12(sp)
     d34:	dc800217 	ldw	r18,8(sp)
     d38:	dc400117 	ldw	r17,4(sp)
     d3c:	dc000017 	ldw	r16,0(sp)
     d40:	dec00904 	addi	sp,sp,36
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d44:	000ebf41 	jmpi	ebf4 <usleep>

00000d48 <transfer_LCD_no_dma>:

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d48:	defffb04 	addi	sp,sp,-20
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d4c:	00804034 	movhi	r2,256

}

void transfer_LCD_no_dma( void* array,
		                  int width,
		                  int height) {
     d50:	dc000015 	stw	r16,0(sp)
     d54:	dfc00415 	stw	ra,16(sp)
     d58:	dcc00315 	stw	r19,12(sp)
     d5c:	dc800215 	stw	r18,8(sp)
     d60:	dc400115 	stw	r17,4(sp)
     d64:	2021883a 	mov	r16,r4
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     d68:	10841e04 	addi	r2,r2,4216
     d6c:	11400035 	stwio	r5,0(r2)

unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
     d70:	00804034 	movhi	r2,256
     d74:	10841804 	addi	r2,r2,4192
     d78:	00c00b04 	movi	r3,44
     d7c:	10c0002d 	sthio	r3,0(r2)
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d80:	29a5383a 	mul	r18,r5,r6
unsigned short LCD_width;
unsigned short LCD_height;

void LCD_Write_Command(int command) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
     d84:	01000284 	movi	r4,10
     d88:	000ebf40 	call	ebf4 <usleep>
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d8c:	90000a26 	beq	r18,zero,db8 <transfer_LCD_no_dma+0x70>
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d90:	04c04034 	movhi	r19,256
     d94:	9cc41904 	addi	r19,r19,4196
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     d98:	0023883a 	mov	r17,zero
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_COMMAND_REG,command);
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
     d9c:	8080000b 	ldhu	r2,0(r16)
     da0:	9880002d 	sthio	r2,0(r19)
	usleep(10);
     da4:	01000284 	movi	r4,10
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     da8:	8c400044 	addi	r17,r17,1
	usleep(10);
}

void LCD_Write_Data(int data) {
	IOWR_16DIRECT(LCD_CTRL_BASE,LCD_DATA_REG,data);
	usleep(10);
     dac:	000ebf40 	call	ebf4 <usleep>
     db0:	84000084 	addi	r16,r16,2
		                  int height) {
	unsigned short *data_array = (unsigned short *)array;
	unsigned int pixels;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	LCD_Write_Command(0x002C); 	//command to begin writing to frame memory
	for (pixels = 0 ; pixels < width*height ; pixels++)
     db4:	8cbff91e 	bne	r17,r18,d9c <__alt_data_end+0xff000d9c>
		LCD_Write_Data(data_array[pixels]);
}
     db8:	dfc00417 	ldw	ra,16(sp)
     dbc:	dcc00317 	ldw	r19,12(sp)
     dc0:	dc800217 	ldw	r18,8(sp)
     dc4:	dc400117 	ldw	r17,4(sp)
     dc8:	dc000017 	ldw	r16,0(sp)
     dcc:	dec00504 	addi	sp,sp,20
     dd0:	f800283a 	ret

00000dd4 <transfer_LCD_with_dma>:

void transfer_LCD_with_dma(void *array,
		                   int width,
		                   int height,
		                   char grayscale) {
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
     dd4:	d0a6d20b 	ldhu	r2,-25784(gp)
     dd8:	3080010e 	bge	r6,r2,de0 <transfer_LCD_with_dma+0xc>
     ddc:	3005883a 	mov	r2,r6
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
     de0:	d0e6d28b 	ldhu	r3,-25782(gp)
     de4:	28c0010e 	bge	r5,r3,dec <transfer_LCD_with_dma+0x18>
     de8:	2807883a 	mov	r3,r5
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
     dec:	01804034 	movhi	r6,256
     df0:	31841e04 	addi	r6,r6,4216
     df4:	31400035 	stwio	r5,0(r6)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
     df8:	01404034 	movhi	r5,256
     dfc:	29441b04 	addi	r5,r5,4204
     e00:	29000035 	stwio	r4,0(r5)
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
     e04:	18ffffcc 	andi	r3,r3,65535
     e08:	10bfffcc 	andi	r2,r2,65535
     e0c:	1885383a 	mul	r2,r3,r2
     e10:	00c04034 	movhi	r3,256
     e14:	18c41c04 	addi	r3,r3,4208
     e18:	18800035 	stwio	r2,0(r3)
	if (grayscale==0)
     e1c:	39c03fcc 	andi	r7,r7,255
     e20:	39c0201c 	xori	r7,r7,128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e24:	00804034 	movhi	r2,256
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e28:	39ffe004 	addi	r7,r7,-128
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e2c:	10841a04 	addi	r2,r2,4200
	unsigned short real_height = (height > LCD_height) ? LCD_height : height;
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
     e30:	38000326 	beq	r7,zero,e40 <transfer_LCD_with_dma+0x6c>
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
				         LCD_Sixteen_Bit|LCD_Start_DMA|
				         LCD_RGB565_Mode|LCD_Color_Image);
	else
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e34:	00c04404 	movi	r3,272
     e38:	10c0002d 	sthio	r3,0(r2)
     e3c:	f800283a 	ret
	unsigned short real_width = (width > LCD_width) ? LCD_width : width;
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_Pict_width_reg,width);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_POINTER_REG,(int)array);
	IOWR_32DIRECT(LCD_CTRL_BASE,LCD_IMAGE_SIZE_REG,real_width*real_height);
	if (grayscale==0)
		IOWR_16DIRECT(LCD_CTRL_BASE,LCD_CONTROL_REG,
     e40:	00c04004 	movi	r3,256
     e44:	10c0002d 	sthio	r3,0(r2)
     e48:	f800283a 	ret

00000e4c <main>:
//
//const char * pgx_array = &gx_array;
//const char * pgy_array = &gy_array;

int main()
{
     e4c:	defff204 	addi	sp,sp,-56
     e50:	dfc00d15 	stw	ra,52(sp)
     e54:	df000c15 	stw	fp,48(sp)
     e58:	dd000815 	stw	r20,32(sp)
     e5c:	dcc00715 	stw	r19,28(sp)
     e60:	dc800615 	stw	r18,24(sp)
     e64:	dc400515 	stw	r17,20(sp)
     e68:	dc000415 	stw	r16,16(sp)
     e6c:	ddc00b15 	stw	r23,44(sp)
     e70:	dd800a15 	stw	r22,40(sp)
     e74:	dd400915 	stw	r21,36(sp)
  alt_u32 start_sobel_th = 0;
  alt_u32 end_sobel_th = 0;
  alt_u32 start_grayscale = 0;
  alt_u32 end_grayscale = 0;

  init_LCD();
     e78:	00009340 	call	934 <init_LCD>
  init_camera();
     e7c:	00001c80 	call	1c8 <init_camera>
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
     e80:	01000604 	movi	r4,24
     e84:	0001df40 	call	1df4 <vga_set_swap>
  printf("Hello from Nios II!\n");
     e88:	01000074 	movhi	r4,1
     e8c:	21012c04 	addi	r4,r4,1200
     e90:	00027640 	call	2764 <puts>
  cam_get_profiling();
     e94:	00005280 	call	528 <cam_get_profiling>
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     e98:	00004e00 	call	4e0 <cam_get_xsize>
     e9c:	1021883a 	mov	r16,r2
     ea0:	00005040 	call	504 <cam_get_ysize>
     ea4:	10bfffcc 	andi	r2,r2,65535
     ea8:	813fffcc 	andi	r4,r16,65535
     eac:	2089383a 	mul	r4,r4,r2
	  if (new_image_available() != 0) {
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
     eb0:	05000044 	movi	r20,1
		      case 0 : transfer_LCD_with_dma(&image[16520],
     eb4:	07204414 	movui	fp,33040
  init_LCD();
  init_camera();
  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     eb8:	0001e040 	call	1e04 <malloc>
     ebc:	1027883a 	mov	r19,r2
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ec0:	00004e00 	call	4e0 <cam_get_xsize>
     ec4:	1021883a 	mov	r16,r2
     ec8:	00005040 	call	504 <cam_get_ysize>
     ecc:	10bfffcc 	andi	r2,r2,65535
     ed0:	813fffcc 	andi	r4,r16,65535
     ed4:	2089383a 	mul	r4,r4,r2
     ed8:	0001e040 	call	1e04 <malloc>
     edc:	1025883a 	mov	r18,r2
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     ee0:	00004e00 	call	4e0 <cam_get_xsize>
     ee4:	1021883a 	mov	r16,r2
     ee8:	00005040 	call	504 <cam_get_ysize>
     eec:	10bfffcc 	andi	r2,r2,65535
     ef0:	813fffcc 	andi	r4,r16,65535
     ef4:	2089383a 	mul	r4,r4,r2
     ef8:	0001e040 	call	1e04 <malloc>
     efc:	1023883a 	mov	r17,r2
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f00:	00004e00 	call	4e0 <cam_get_xsize>
     f04:	1021883a 	mov	r16,r2
     f08:	00005040 	call	504 <cam_get_ysize>
     f0c:	10bfffcc 	andi	r2,r2,65535
     f10:	813fffcc 	andi	r4,r16,65535
     f14:	2089383a 	mul	r4,r4,r2
     f18:	0001e040 	call	1e04 <malloc>
  cam_set_image_pointer(0,buffer1);
     f1c:	980b883a 	mov	r5,r19
     f20:	0009883a 	mov	r4,zero
  printf("Hello from Nios II!\n");
  cam_get_profiling();
  buffer1 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer2 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer3 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
  buffer4 = (void *) malloc(cam_get_xsize()*cam_get_ysize());
     f24:	1021883a 	mov	r16,r2
  cam_set_image_pointer(0,buffer1);
     f28:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(1,buffer2);
     f2c:	900b883a 	mov	r5,r18
     f30:	a009883a 	mov	r4,r20
     f34:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(2,buffer3);
     f38:	880b883a 	mov	r5,r17
     f3c:	01000084 	movi	r4,2
     f40:	00005a00 	call	5a0 <cam_set_image_pointer>
  cam_set_image_pointer(3,buffer4);
     f44:	800b883a 	mov	r5,r16
     f48:	010000c4 	movi	r4,3
     f4c:	00005a00 	call	5a0 <cam_set_image_pointer>
  enable_continues_mode();
     f50:	00006580 	call	658 <enable_continues_mode>
  init_sobel_arrays(cam_get_xsize()>>1,cam_get_ysize());
     f54:	00004e00 	call	4e0 <cam_get_xsize>
     f58:	1021883a 	mov	r16,r2
     f5c:	00005040 	call	504 <cam_get_ysize>
     f60:	813fffcc 	andi	r4,r16,65535
     f64:	2508d83a 	srl	r4,r4,r20
     f68:	117fffcc 	andi	r5,r2,65535
     f6c:	00013640 	call	1364 <init_sobel_arrays>
  do {
	  if (new_image_available() != 0) {
     f70:	000066c0 	call	66c <new_image_available>
     f74:	10803fcc 	andi	r2,r2,255
     f78:	1080201c 	xori	r2,r2,128
     f7c:	10bfe004 	addi	r2,r2,-128
     f80:	103ffb26 	beq	r2,zero,f70 <__alt_data_end+0xff000f70>
		  if (current_image_valid()!=0) {
     f84:	00006140 	call	614 <current_image_valid>
     f88:	10bfffcc 	andi	r2,r2,65535
     f8c:	10a0001c 	xori	r2,r2,32768
     f90:	10a00004 	addi	r2,r2,-32768
     f94:	103ff626 	beq	r2,zero,f70 <__alt_data_end+0xff000f70>
			  current_mode = DIPSW_get_value();
     f98:	00006980 	call	698 <DIPSW_get_value>
     f9c:	1021883a 	mov	r16,r2
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
     fa0:	00006280 	call	628 <current_image_pointer>
     fa4:	1023883a 	mov	r17,r2
		      switch (mode) {
     fa8:	808001cc 	andi	r2,r16,7
     fac:	15004426 	beq	r2,r20,10c0 <main+0x274>
     fb0:	1000c526 	beq	r2,zero,12c8 <main+0x47c>
     fb4:	00c00084 	movi	r3,2
     fb8:	10c09f26 	beq	r2,r3,1238 <main+0x3ec>
     fbc:	00c000c4 	movi	r3,3
     fc0:	10c0601e 	bne	r2,r3,1144 <main+0x2f8>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
     fc4:	000f3880 	call	f388 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
     fc8:	000f3c40 	call	f3c4 <alt_timestamp>
     fcc:	102b883a 	mov	r21,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
     fd0:	00004e00 	call	4e0 <cam_get_xsize>
     fd4:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
     fd8:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 3 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
     fdc:	917fffcc 	andi	r5,r18,65535
     fe0:	280ad07a 	srli	r5,r5,1
     fe4:	11bfffcc 	andi	r6,r2,65535
     fe8:	8809883a 	mov	r4,r17
     fec:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
     ff0:	000f3c40 	call	f3c4 <alt_timestamp>
     ff4:	1025883a 	mov	r18,r2
		               grayscale = get_grayscale_picture();
     ff8:	00007600 	call	760 <get_grayscale_picture>
     ffc:	1027883a 	mov	r19,r2
		               alt_timestamp_start();
    1000:	000f3880 	call	f388 <alt_timestamp_start>
		               start_sobel_x = alt_timestamp();
    1004:	000f3c40 	call	f3c4 <alt_timestamp>
		               sobel_x(grayscale);
    1008:	9809883a 	mov	r4,r19
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
    100c:	102f883a 	mov	r23,r2
		               sobel_x(grayscale);
    1010:	00015040 	call	1504 <sobel_x>
		               end_sobel_x = alt_timestamp();
    1014:	000f3c40 	call	f3c4 <alt_timestamp>
		               sobel_y_with_rgb(grayscale);
    1018:	9809883a 	mov	r4,r19
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               alt_timestamp_start();
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
    101c:	1023883a 	mov	r17,r2
		               sobel_y_with_rgb(grayscale);
    1020:	00018d80 	call	18d8 <sobel_y_with_rgb>
		               image = GetSobel_rgb();
    1024:	0001dd40 	call	1dd4 <GetSobel_rgb>
    1028:	102d883a 	mov	r22,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    102c:	00004e00 	call	4e0 <cam_get_xsize>
    1030:	1027883a 	mov	r19,r2
		      		                	cam_get_ysize(),0);
    1034:	00005040 	call	504 <cam_get_ysize>
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1038:	997fffcc 	andi	r5,r19,65535
    103c:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1040:	84003fcc 	andi	r16,r16,255
    1044:	8400201c 	xori	r16,r16,128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1048:	000f883a 	mov	r7,zero
    104c:	11bfffcc 	andi	r6,r2,65535
    1050:	b709883a 	add	r4,r22,fp
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1054:	843fe004 	addi	r16,r16,-128
		               start_sobel_x = alt_timestamp();
		               sobel_x(grayscale);
		               end_sobel_x = alt_timestamp();
		               sobel_y_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    1058:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    105c:	8000ba16 	blt	r16,zero,1348 <main+0x4fc>
    1060:	9561c83a 	sub	r16,r18,r21
    1064:	8de3c83a 	sub	r17,r17,r23
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1068:	0025883a 	mov	r18,zero
    106c:	0027883a 	mov	r19,zero
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      }
		      //print differences
		      printf("-- CYCLE TIME OF FUNCTIONS --\n");
    1070:	01000074 	movhi	r4,1
    1074:	21013104 	addi	r4,r4,1220
    1078:	00027640 	call	2764 <puts>
//		      printf("[sobel_tot] : dC = %d\n",end_sobel_x-start_sobel_x);
		      printf("[sobel_x]   : dC = %d\n",end_sobel_x-start_sobel_x);
    107c:	01000074 	movhi	r4,1
    1080:	880b883a 	mov	r5,r17
    1084:	21013904 	addi	r4,r4,1252
    1088:	00026680 	call	2668 <printf>
		      printf("[sobel_y]   : dC = %d\n",end_sobel_y-start_sobel_y);
    108c:	01000074 	movhi	r4,1
    1090:	980b883a 	mov	r5,r19
    1094:	21013f04 	addi	r4,r4,1276
    1098:	00026680 	call	2668 <printf>
		      printf("[sobel_th]  : dC = %d\n",end_sobel_th-start_sobel_th);
    109c:	01000074 	movhi	r4,1
    10a0:	900b883a 	mov	r5,r18
    10a4:	21014504 	addi	r4,r4,1300
    10a8:	00026680 	call	2668 <printf>
		      printf("[grayscale] : dC = %d\n",end_grayscale-start_grayscale);
    10ac:	01000074 	movhi	r4,1
    10b0:	800b883a 	mov	r5,r16
    10b4:	21014b04 	addi	r4,r4,1324
    10b8:	00026680 	call	2668 <printf>
    10bc:	003fac06 	br	f70 <__alt_data_end+0xff000f70>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
    10c0:	000f3880 	call	f388 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    10c4:	000f3c40 	call	f3c4 <alt_timestamp>
    10c8:	1027883a 	mov	r19,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    10cc:	00004e00 	call	4e0 <cam_get_xsize>
    10d0:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
    10d4:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      case 1 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    10d8:	917fffcc 	andi	r5,r18,65535
    10dc:	280ad07a 	srli	r5,r5,1
    10e0:	8809883a 	mov	r4,r17
    10e4:	11bfffcc 	andi	r6,r2,65535
    10e8:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    10ec:	000f3c40 	call	f3c4 <alt_timestamp>
    10f0:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    10f4:	00007600 	call	760 <get_grayscale_picture>
    10f8:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    10fc:	00004e00 	call	4e0 <cam_get_xsize>
    1100:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),1);
    1104:	00005040 	call	504 <cam_get_ysize>
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1108:	917fffcc 	andi	r5,r18,65535
    110c:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1110:	84003fcc 	andi	r16,r16,255
    1114:	8400201c 	xori	r16,r16,128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1118:	a00f883a 	mov	r7,r20
    111c:	11bfffcc 	andi	r6,r2,65535
    1120:	a9102204 	addi	r4,r21,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1124:	843fe004 	addi	r16,r16,-128
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
    1128:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    112c:	80008b16 	blt	r16,zero,135c <main+0x510>
    1130:	8ce1c83a 	sub	r16,r17,r19
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
    1134:	0025883a 	mov	r18,zero
    1138:	0027883a 	mov	r19,zero
    113c:	0023883a 	mov	r17,zero
    1140:	003fcb06 	br	1070 <__alt_data_end+0xff001070>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
    1144:	000f3880 	call	f388 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    1148:	000f3c40 	call	f3c4 <alt_timestamp>
    114c:	d8800015 	stw	r2,0(sp)
		    	  	   conv_grayscale((void *)image,
	                                  cam_get_xsize()>>1,
    1150:	00004e00 	call	4e0 <cam_get_xsize>
    1154:	1025883a 	mov	r18,r2
	                                  cam_get_ysize());
    1158:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(image);
		      	  	   }
		      	  	   break;
		      default: alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    115c:	917fffcc 	andi	r5,r18,65535
    1160:	280ad07a 	srli	r5,r5,1
    1164:	11bfffcc 	andi	r6,r2,65535
    1168:	8809883a 	mov	r4,r17
    116c:	00006ac0 	call	6ac <conv_grayscale>
	                                  cam_get_xsize()>>1,
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1170:	000f3c40 	call	f3c4 <alt_timestamp>
    1174:	d8800115 	stw	r2,4(sp)
                       grayscale = get_grayscale_picture();
    1178:	00007600 	call	760 <get_grayscale_picture>
    117c:	1025883a 	mov	r18,r2

                       alt_timestamp_start();
    1180:	000f3880 	call	f388 <alt_timestamp_start>
                       start_sobel_x = alt_timestamp();
    1184:	000f3c40 	call	f3c4 <alt_timestamp>
                       sobel_x(grayscale);
    1188:	9009883a 	mov	r4,r18
	                                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
                       grayscale = get_grayscale_picture();

                       alt_timestamp_start();
                       start_sobel_x = alt_timestamp();
    118c:	102f883a 	mov	r23,r2
                       sobel_x(grayscale);
    1190:	00015040 	call	1504 <sobel_x>
//                       sobel_complete(grayscale);//, 128);
                       end_sobel_x = alt_timestamp();
    1194:	000f3c40 	call	f3c4 <alt_timestamp>
    1198:	1023883a 	mov	r17,r2

                       alt_timestamp_start();
    119c:	000f3880 	call	f388 <alt_timestamp_start>
                       start_sobel_y = alt_timestamp();
    11a0:	000f3c40 	call	f3c4 <alt_timestamp>
                       sobel_y(grayscale);
    11a4:	9009883a 	mov	r4,r18
                       sobel_x(grayscale);
//                       sobel_complete(grayscale);//, 128);
                       end_sobel_x = alt_timestamp();

                       alt_timestamp_start();
                       start_sobel_y = alt_timestamp();
    11a8:	102d883a 	mov	r22,r2
                       sobel_y(grayscale);
    11ac:	00017c00 	call	17c0 <sobel_y>
                       end_sobel_y = alt_timestamp();
    11b0:	000f3c40 	call	f3c4 <alt_timestamp>
    11b4:	1027883a 	mov	r19,r2

                       alt_timestamp_start();
    11b8:	000f3880 	call	f388 <alt_timestamp_start>
                       start_sobel_th = alt_timestamp();
    11bc:	000f3c40 	call	f3c4 <alt_timestamp>
                       sobel_threshold(128);
    11c0:	01002004 	movi	r4,128
                       start_sobel_y = alt_timestamp();
                       sobel_y(grayscale);
                       end_sobel_y = alt_timestamp();

                       alt_timestamp_start();
                       start_sobel_th = alt_timestamp();
    11c4:	102b883a 	mov	r21,r2
                       sobel_threshold(128);
    11c8:	0001a400 	call	1a40 <sobel_threshold>
                       end_sobel_th = alt_timestamp();
    11cc:	000f3c40 	call	f3c4 <alt_timestamp>
    11d0:	1025883a 	mov	r18,r2

                       grayscale=GetSobelResult();
    11d4:	0001ddc0 	call	1ddc <GetSobelResult>
    11d8:	d8800215 	stw	r2,8(sp)
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
    11dc:	00004e00 	call	4e0 <cam_get_xsize>
    11e0:	1007883a 	mov	r3,r2
		      		                	cam_get_ysize(),1);
    11e4:	d8c00315 	stw	r3,12(sp)
    11e8:	00005040 	call	504 <cam_get_ysize>
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11ec:	d8c00317 	ldw	r3,12(sp)
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    11f0:	84003fcc 	andi	r16,r16,255
    11f4:	8400201c 	xori	r16,r16,128
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    11f8:	197fffcc 	andi	r5,r3,65535
    11fc:	d8c00217 	ldw	r3,8(sp)
    1200:	280ad07a 	srli	r5,r5,1
    1204:	01c00044 	movi	r7,1
    1208:	11bfffcc 	andi	r6,r2,65535
    120c:	19102204 	addi	r4,r3,16520
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1210:	843fe004 	addi	r16,r16,-128
                       start_sobel_th = alt_timestamp();
                       sobel_threshold(128);
                       end_sobel_th = alt_timestamp();

                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
    1214:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1218:	80003d16 	blt	r16,zero,1310 <main+0x4c4>
    121c:	d8c00117 	ldw	r3,4(sp)
    1220:	d8800017 	ldw	r2,0(sp)
    1224:	8de3c83a 	sub	r17,r17,r23
    1228:	9da7c83a 	sub	r19,r19,r22
    122c:	9565c83a 	sub	r18,r18,r21
    1230:	18a1c83a 	sub	r16,r3,r2
    1234:	003f8e06 	br	1070 <__alt_data_end+0xff001070>
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
    1238:	000f3880 	call	f388 <alt_timestamp_start>
		    	  	   start_grayscale = alt_timestamp();
    123c:	000f3c40 	call	f3c4 <alt_timestamp>
    1240:	1027883a 	mov	r19,r2
		    	  	   conv_grayscale((void *)image,
		    		                  cam_get_xsize()>>1,
    1244:	00004e00 	call	4e0 <cam_get_xsize>
    1248:	1025883a 	mov	r18,r2
		    		                  cam_get_ysize());
    124c:	00005040 	call	504 <cam_get_ysize>
		      	  		  vga_set_pointer(grayscale);
		      	  	   }
		      	  	   break;
		      case 2 : alt_timestamp_start();
		    	  	   start_grayscale = alt_timestamp();
		    	  	   conv_grayscale((void *)image,
    1250:	917fffcc 	andi	r5,r18,65535
    1254:	280ad07a 	srli	r5,r5,1
    1258:	11bfffcc 	andi	r6,r2,65535
    125c:	8809883a 	mov	r4,r17
    1260:	00006ac0 	call	6ac <conv_grayscale>
		    		                  cam_get_xsize()>>1,
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
    1264:	000f3c40 	call	f3c4 <alt_timestamp>
    1268:	1023883a 	mov	r17,r2
		               grayscale = get_grayscale_picture();
    126c:	00007600 	call	760 <get_grayscale_picture>
		               sobel_x_with_rgb(grayscale);
    1270:	1009883a 	mov	r4,r2
    1274:	00016440 	call	1644 <sobel_x_with_rgb>
		               image = GetSobel_rgb();
    1278:	0001dd40 	call	1dd4 <GetSobel_rgb>
    127c:	102b883a 	mov	r21,r2
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
    1280:	00004e00 	call	4e0 <cam_get_xsize>
    1284:	1025883a 	mov	r18,r2
		      		                	cam_get_ysize(),0);
    1288:	00005040 	call	504 <cam_get_ysize>
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    128c:	917fffcc 	andi	r5,r18,65535
    1290:	280ad07a 	srli	r5,r5,1
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    1294:	84003fcc 	andi	r16,r16,255
    1298:	8400201c 	xori	r16,r16,128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    129c:	000f883a 	mov	r7,zero
    12a0:	11bfffcc 	andi	r6,r2,65535
    12a4:	af09883a 	add	r4,r21,fp
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12a8:	843fe004 	addi	r16,r16,-128
		    		                  cam_get_ysize());
		    	  	   end_grayscale = alt_timestamp();
		               grayscale = get_grayscale_picture();
		               sobel_x_with_rgb(grayscale);
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
    12ac:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12b0:	803f9f0e 	bge	r16,zero,1130 <__alt_data_end+0xff001130>
		      	  		  vga_set_swap(VGA_QuarterScreen);
    12b4:	01000204 	movi	r4,8
    12b8:	0001df40 	call	1df4 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    12bc:	a809883a 	mov	r4,r21
    12c0:	0001de40 	call	1de4 <vga_set_pointer>
    12c4:	003f9a06 	br	1130 <__alt_data_end+0xff001130>
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
    12c8:	00004e00 	call	4e0 <cam_get_xsize>
    12cc:	1025883a 	mov	r18,r2
		                	cam_get_ysize(),0);
    12d0:	00005040 	call	504 <cam_get_ysize>
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12d4:	917fffcc 	andi	r5,r18,65535
    12d8:	280ad07a 	srli	r5,r5,1
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12dc:	84003fcc 	andi	r16,r16,255
    12e0:	8400201c 	xori	r16,r16,128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12e4:	000f883a 	mov	r7,zero
    12e8:	11bfffcc 	andi	r6,r2,65535
    12ec:	8f09883a 	add	r4,r17,fp
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12f0:	843fe004 	addi	r16,r16,-128
		  if (current_image_valid()!=0) {
			  current_mode = DIPSW_get_value();
			  mode = current_mode&(DIPSW_SW1_MASK|DIPSW_SW3_MASK|DIPSW_SW2_MASK);
			  image = (unsigned short*)current_image_pointer();
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
    12f4:	0000dd40 	call	dd4 <transfer_LCD_with_dma>
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
    12f8:	80000a16 	blt	r16,zero,1324 <main+0x4d8>
    12fc:	0021883a 	mov	r16,zero
    1300:	0025883a 	mov	r18,zero
    1304:	0027883a 	mov	r19,zero
    1308:	0023883a 	mov	r17,zero
    130c:	003f5806 	br	1070 <__alt_data_end+0xff001070>
                       grayscale=GetSobelResult();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    1310:	01000604 	movi	r4,24
    1314:	0001df40 	call	1df4 <vga_set_swap>
		      	  		  vga_set_pointer(grayscale);
    1318:	d9000217 	ldw	r4,8(sp)
    131c:	0001de40 	call	1de4 <vga_set_pointer>
    1320:	003fbe06 	br	121c <__alt_data_end+0xff00121c>
		      switch (mode) {
		      case 0 : transfer_LCD_with_dma(&image[16520],
		                	cam_get_xsize()>>1,
		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1324:	01000204 	movi	r4,8
    1328:	0001df40 	call	1df4 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    132c:	8809883a 	mov	r4,r17
    1330:	0001de40 	call	1de4 <vga_set_pointer>
    1334:	0021883a 	mov	r16,zero
    1338:	0025883a 	mov	r18,zero
    133c:	0027883a 	mov	r19,zero
    1340:	0023883a 	mov	r17,zero
    1344:	003f4a06 	br	1070 <__alt_data_end+0xff001070>
		               image = GetSobel_rgb();
		               transfer_LCD_with_dma(&image[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),0);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen);
    1348:	01000204 	movi	r4,8
    134c:	0001df40 	call	1df4 <vga_set_swap>
		      	  		  vga_set_pointer(image);
    1350:	b009883a 	mov	r4,r22
    1354:	0001de40 	call	1de4 <vga_set_pointer>
    1358:	003f4106 	br	1060 <__alt_data_end+0xff001060>
		               grayscale = get_grayscale_picture();
		               transfer_LCD_with_dma(&grayscale[16520],
		      		                	cam_get_xsize()>>1,
		      		                	cam_get_ysize(),1);
		      	  	   if ((current_mode&DIPSW_SW8_MASK)!=0) {
		      	  		  vga_set_swap(VGA_QuarterScreen|VGA_Grayscale);
    135c:	01000604 	movi	r4,24
    1360:	003fd506 	br	12b8 <__alt_data_end+0xff0012b8>

00001364 <init_sobel_arrays>:

void init_sobel_arrays(int width , int height) {
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1364:	d0a6d617 	ldw	r2,-25768(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    1368:	defffd04 	addi	sp,sp,-12
    136c:	dc400115 	stw	r17,4(sp)
    1370:	dc000015 	stw	r16,0(sp)
    1374:	dfc00215 	stw	ra,8(sp)
	int loop;
	sobel_width = width;
    1378:	d126d315 	stw	r4,-25780(gp)
	sobel_height = height;
    137c:	d166d515 	stw	r5,-25772(gp)
                   {-1,-2,-1}};

const char * pgx_array = &(gx_array);
const char * pgy_array = &(gy_array);

void init_sobel_arrays(int width , int height) {
    1380:	2023883a 	mov	r17,r4
    1384:	2821883a 	mov	r16,r5
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
    1388:	10000226 	beq	r2,zero,1394 <init_sobel_arrays+0x30>
		free(sobel_x_result);
    138c:	1009883a 	mov	r4,r2
    1390:	0001e180 	call	1e18 <free>
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    1394:	8c21383a 	mul	r16,r17,r16
    1398:	8423883a 	add	r17,r16,r16
    139c:	8809883a 	mov	r4,r17
    13a0:	0001e040 	call	1e04 <malloc>
	if (sobel_y_result != NULL)
    13a4:	d126d717 	ldw	r4,-25764(gp)
	int loop;
	sobel_width = width;
	sobel_height = height;
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
    13a8:	d0a6d615 	stw	r2,-25768(gp)
	if (sobel_y_result != NULL)
    13ac:	20000126 	beq	r4,zero,13b4 <init_sobel_arrays+0x50>
		free(sobel_y_result);
    13b0:	0001e180 	call	1e18 <free>
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    13b4:	8809883a 	mov	r4,r17
    13b8:	0001e040 	call	1e04 <malloc>
	if (sobel_result != NULL)
    13bc:	d126d417 	ldw	r4,-25776(gp)
	if (sobel_x_result != NULL)
		free(sobel_x_result);
	sobel_x_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
    13c0:	d0a6d715 	stw	r2,-25764(gp)
	if (sobel_result != NULL)
    13c4:	20000126 	beq	r4,zero,13cc <init_sobel_arrays+0x68>
		free(sobel_result);
    13c8:	0001e180 	call	1e18 <free>
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    13cc:	8009883a 	mov	r4,r16
    13d0:	0001e040 	call	1e04 <malloc>
	if (sobel_rgb565 != NULL)
    13d4:	d126d817 	ldw	r4,-25760(gp)
	if (sobel_y_result != NULL)
		free(sobel_y_result);
	sobel_y_result = (short *)malloc(width*height*sizeof(short));
	if (sobel_result != NULL)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
    13d8:	d0a6d415 	stw	r2,-25776(gp)
	if (sobel_rgb565 != NULL)
    13dc:	20000126 	beq	r4,zero,13e4 <init_sobel_arrays+0x80>
		free(sobel_rgb565);
    13e0:	0001e180 	call	1e18 <free>
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
    13e4:	8809883a 	mov	r4,r17
    13e8:	0001e040 	call	1e04 <malloc>
    13ec:	d0a6d815 	stw	r2,-25760(gp)
	for (loop = 0 ; loop < width*height ; loop++) {
    13f0:	0005883a 	mov	r2,zero
    13f4:	04000f0e 	bge	zero,r16,1434 <init_sobel_arrays+0xd0>
		sobel_x_result[loop] = 0;
    13f8:	d226d617 	ldw	r8,-25768(gp)
		sobel_y_result[loop] = 0;
    13fc:	d1e6d717 	ldw	r7,-25764(gp)
		sobel_result[loop] = 0;
    1400:	d1a6d417 	ldw	r6,-25776(gp)
    1404:	1087883a 	add	r3,r2,r2
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
    1408:	40d1883a 	add	r8,r8,r3
    140c:	4000000d 	sth	zero,0(r8)
		sobel_y_result[loop] = 0;
    1410:	38cf883a 	add	r7,r7,r3
		sobel_result[loop] = 0;
    1414:	308d883a 	add	r6,r6,r2
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
    1418:	3800000d 	sth	zero,0(r7)
		sobel_result[loop] = 0;
    141c:	30000005 	stb	zero,0(r6)
		sobel_rgb565[loop] = 0;
    1420:	d1a6d817 	ldw	r6,-25760(gp)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1424:	10800044 	addi	r2,r2,1
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
    1428:	30c7883a 	add	r3,r6,r3
    142c:	1800000d 	sth	zero,0(r3)
		free(sobel_result);
	sobel_result = (unsigned char *)malloc(width*height*sizeof(unsigned char));
	if (sobel_rgb565 != NULL)
		free(sobel_rgb565);
	sobel_rgb565 = (unsigned short *)malloc(width*height*sizeof(unsigned short));
	for (loop = 0 ; loop < width*height ; loop++) {
    1430:	80bff11e 	bne	r16,r2,13f8 <__alt_data_end+0xff0013f8>
		sobel_x_result[loop] = 0;
		sobel_y_result[loop] = 0;
		sobel_result[loop] = 0;
		sobel_rgb565[loop] = 0;
	}
}
    1434:	dfc00217 	ldw	ra,8(sp)
    1438:	dc400117 	ldw	r17,4(sp)
    143c:	dc000017 	ldw	r16,0(sp)
    1440:	dec00304 	addi	sp,sp,12
    1444:	f800283a 	ret

00001448 <sobel_mac>:

short sobel_mac( unsigned char *pixels,
                 int x,
                 int y,
                 const char *filter,
                 unsigned int width ) {
    1448:	da800017 	ldw	r10,0(sp)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    144c:	31bfffc4 	addi	r6,r6,-1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1450:	38c00047 	ldb	r3,1(r7)
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1454:	328d383a 	mul	r6,r6,r10
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1458:	3b8000c7 	ldb	r14,3(r7)
    145c:	3a000107 	ldb	r8,4(r7)

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1460:	5185883a 	add	r2,r10,r6
    1464:	2893883a 	add	r9,r5,r2
				   pixels[(y+dy)*width+(x+dx)];
	  }
	}*/

	// modifs
	result += filter[0] * pixels[(y-1)*width+(x-1)];	// dy = -1, dx = -1
    1468:	314d883a 	add	r6,r6,r5
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
    146c:	218d883a 	add	r6,r4,r6
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
    1470:	2253883a 	add	r9,r4,r9
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1474:	33000003 	ldbu	r12,0(r6)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1478:	5095883a 	add	r10,r10,r2
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    147c:	48bfffc3 	ldbu	r2,-1(r9)
	result += filter[1] * pixels[(y-1)*width+x];		// dy = -1, dx = 0
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
    1480:	5155883a 	add	r10,r10,r5
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    1484:	4ac00003 	ldbu	r11,0(r9)
	result += filter[2] * pixels[(y-1)*width+(x+1)];	// dy = -1, dx = 1
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
    1488:	229b883a 	add	r13,r4,r10
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
    148c:	49000043 	ldbu	r4,1(r9)
    1490:	3a800147 	ldb	r10,5(r7)
    1494:	139d383a 	mul	r14,r2,r14
    1498:	60d9383a 	mul	r12,r12,r3
    149c:	68800003 	ldbu	r2,0(r13)
    14a0:	38c001c7 	ldb	r3,7(r7)
    14a4:	5a17383a 	mul	r11,r11,r8
    14a8:	33ffffc3 	ldbu	r15,-1(r6)
    14ac:	3a000007 	ldb	r8,0(r7)
    14b0:	2295383a 	mul	r10,r4,r10
    14b4:	31000043 	ldbu	r4,1(r6)
    14b8:	39800087 	ldb	r6,2(r7)
    14bc:	730b883a 	add	r5,r14,r12
    14c0:	10d3383a 	mul	r9,r2,r3
    14c4:	6b3fffc3 	ldbu	r12,-1(r13)
    14c8:	38c00187 	ldb	r3,6(r7)
    14cc:	2acb883a 	add	r5,r5,r11
    14d0:	7a11383a 	mul	r8,r15,r8
    14d4:	6ac00043 	ldbu	r11,1(r13)
    14d8:	39c00207 	ldb	r7,8(r7)
    14dc:	2a8b883a 	add	r5,r5,r10
    14e0:	2189383a 	mul	r4,r4,r6
    14e4:	2a45883a 	add	r2,r5,r9
    14e8:	60c7383a 	mul	r3,r12,r3
    14ec:	1205883a 	add	r2,r2,r8
    14f0:	59cb383a 	mul	r5,r11,r7
    14f4:	1105883a 	add	r2,r2,r4
    14f8:	10c5883a 	add	r2,r2,r3
}
    14fc:	1145883a 	add	r2,r2,r5
    1500:	f800283a 	ret

00001504 <sobel_x>:

void sobel_x( unsigned char *source ) {
    1504:	defff604 	addi	sp,sp,-40
    1508:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    150c:	d466d517 	ldw	r17,-25772(gp)
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
	return result;
}

void sobel_x( unsigned char *source ) {
    1510:	dfc00915 	stw	ra,36(sp)
    1514:	df000815 	stw	fp,32(sp)
    1518:	ddc00715 	stw	r23,28(sp)
    151c:	dd800615 	stw	r22,24(sp)
    1520:	dd400515 	stw	r21,20(sp)
    1524:	dd000415 	stw	r20,16(sp)
    1528:	dcc00315 	stw	r19,12(sp)
    152c:	dc800215 	stw	r18,8(sp)
    1530:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1534:	8c7fffc4 	addi	r17,r17,-1
    1538:	00800044 	movi	r2,1
    153c:	14402e0e 	bge	r2,r17,15f8 <sobel_x+0xf4>
    1540:	d366d317 	ldw	r13,-25780(gp)
    1544:	d3e6d617 	ldw	r15,-25768(gp)
    1548:	03800084 	movi	r14,2
    154c:	6b65883a 	add	r18,r13,r13
    1550:	9385883a 	add	r2,r18,r14
    1554:	2359883a 	add	r12,r4,r13
    1558:	789f883a 	add	r15,r15,r2
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    155c:	7027883a 	mov	r19,r14
    1560:	736bc83a 	sub	r21,r14,r13
    1564:	6ba9883a 	add	r20,r13,r14
    1568:	9b402f0e 	bge	r19,r13,1628 <sobel_x+0x124>
    156c:	637f883a 	add	ra,r12,r13
    1570:	7021883a 	mov	r16,r14
    1574:	6357c83a 	sub	r11,r12,r13
    1578:	ab0b883a 	add	r5,r21,r12
    157c:	62800084 	addi	r10,r12,2
    1580:	f813883a 	mov	r9,ra
    1584:	a311883a 	add	r8,r20,r12
    1588:	780f883a 	mov	r7,r15
    158c:	600d883a 	mov	r6,r12
         sobel_x_result[y*sobel_width+x] = sobel_mac(source,x,y,gx_array,sobel_width);
    1590:	29000003 	ldbu	r4,0(r5)
    1594:	40c00003 	ldbu	r3,0(r8)
    1598:	37000003 	ldbu	fp,0(r6)
    159c:	50800003 	ldbu	r2,0(r10)
    15a0:	20c7883a 	add	r3,r4,r3
    15a4:	5dc00003 	ldbu	r23,0(r11)
    15a8:	1f07c83a 	sub	r3,r3,fp
    15ac:	4d800003 	ldbu	r22,0(r9)
    15b0:	1f09c83a 	sub	r4,r3,fp
    15b4:	1087883a 	add	r3,r2,r2
    15b8:	20c7883a 	add	r3,r4,r3
    15bc:	1dc5c83a 	sub	r2,r3,r23
    15c0:	1585c83a 	sub	r2,r2,r22
    15c4:	3880000d 	sth	r2,0(r7)
    15c8:	29400044 	addi	r5,r5,1
    15cc:	5ac00044 	addi	r11,r11,1
    15d0:	31800044 	addi	r6,r6,1
    15d4:	52800044 	addi	r10,r10,1
    15d8:	4a400044 	addi	r9,r9,1
    15dc:	42000044 	addi	r8,r8,1
    15e0:	39c00084 	addi	r7,r7,2
void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    15e4:	617fea1e 	bne	r12,r5,1590 <__alt_data_end+0xff001590>
    15e8:	73800044 	addi	r14,r14,1
    15ec:	f819883a 	mov	r12,ra
    15f0:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    15f4:	847fdc16 	blt	r16,r17,1568 <__alt_data_end+0xff001568>
//		  result += pgx_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}
    15f8:	dfc00917 	ldw	ra,36(sp)
    15fc:	df000817 	ldw	fp,32(sp)
    1600:	ddc00717 	ldw	r23,28(sp)
    1604:	dd800617 	ldw	r22,24(sp)
    1608:	dd400517 	ldw	r21,20(sp)
    160c:	dd000417 	ldw	r20,16(sp)
    1610:	dcc00317 	ldw	r19,12(sp)
    1614:	dc800217 	ldw	r18,8(sp)
    1618:	dc400117 	ldw	r17,4(sp)
    161c:	dc000017 	ldw	r16,0(sp)
    1620:	dec00a04 	addi	sp,sp,40
    1624:	f800283a 	ret
    1628:	7021883a 	mov	r16,r14
    162c:	637f883a 	add	ra,r12,r13
    1630:	73800044 	addi	r14,r14,1
    1634:	f819883a 	mov	r12,ra
    1638:	7c9f883a 	add	r15,r15,r18

void sobel_x( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    163c:	847fca16 	blt	r16,r17,1568 <__alt_data_end+0xff001568>
    1640:	003fed06 	br	15f8 <__alt_data_end+0xff0015f8>

00001644 <sobel_x_with_rgb>:
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1644:	defff504 	addi	sp,sp,-44
    1648:	dd800715 	stw	r22,28(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    164c:	d5a6d517 	ldw	r22,-25772(gp)
//		  sobel_x_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_x_with_rgb( unsigned char *source ) {
    1650:	dfc00a15 	stw	ra,40(sp)
    1654:	df000915 	stw	fp,36(sp)
    1658:	ddc00815 	stw	r23,32(sp)
    165c:	dd400615 	stw	r21,24(sp)
    1660:	dd000515 	stw	r20,20(sp)
    1664:	dcc00415 	stw	r19,16(sp)
    1668:	dc800315 	stw	r18,12(sp)
    166c:	dc400215 	stw	r17,8(sp)
    1670:	dc000115 	stw	r16,4(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1674:	b5bfffc4 	addi	r22,r22,-1
    1678:	00800044 	movi	r2,1
    167c:	1580440e 	bge	r2,r22,1790 <sobel_x_with_rgb+0x14c>
    1680:	d7e6d317 	ldw	ra,-25780(gp)
    1684:	d4a6d617 	ldw	r18,-25768(gp)
    1688:	d466d817 	ldw	r17,-25760(gp)
    168c:	ffe9883a 	add	r20,ra,ra
    1690:	a0800084 	addi	r2,r20,2
    1694:	04000084 	movi	r16,2
    1698:	90a5883a 	add	r18,r18,r2
    169c:	88a3883a 	add	r17,r17,r2
    16a0:	fc05883a 	add	r2,ra,r16
    16a4:	27df883a 	add	r15,r4,ra
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    16a8:	802f883a 	mov	r23,r16
    16ac:	87f9c83a 	sub	fp,r16,ra
    16b0:	d8800015 	stw	r2,0(sp)
    16b4:	bfc02f0e 	bge	r23,ra,1774 <sobel_x_with_rgb+0x130>
    16b8:	d8800017 	ldw	r2,0(sp)
    16bc:	7fe7883a 	add	r19,r15,ra
    16c0:	802b883a 	mov	r21,r16
    16c4:	7fdbc83a 	sub	r13,r15,ra
    16c8:	e3cf883a 	add	r7,fp,r15
    16cc:	7b000084 	addi	r12,r15,2
    16d0:	9817883a 	mov	r11,r19
    16d4:	13d5883a 	add	r10,r2,r15
    16d8:	881d883a 	mov	r14,r17
    16dc:	9013883a 	mov	r9,r18
    16e0:	7811883a 	mov	r8,r15
    16e4:	00000b06 	br	1714 <sobel_x_with_rgb+0xd0>
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    16e8:	180692fa 	slli	r3,r3,11
    16ec:	70c0000d 	sth	r3,0(r14)
    16f0:	39c00044 	addi	r7,r7,1
    16f4:	6b400044 	addi	r13,r13,1
    16f8:	42000044 	addi	r8,r8,1
    16fc:	63000044 	addi	r12,r12,1
    1700:	5ac00044 	addi	r11,r11,1
    1704:	52800044 	addi	r10,r10,1
    1708:	4a400084 	addi	r9,r9,2
    170c:	73800084 	addi	r14,r14,2
void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1710:	79c01a26 	beq	r15,r7,177c <sobel_x_with_rgb+0x138>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    1714:	50800003 	ldbu	r2,0(r10)
    1718:	39400003 	ldbu	r5,0(r7)
    171c:	41800003 	ldbu	r6,0(r8)
    1720:	60c00003 	ldbu	r3,0(r12)
    1724:	288b883a 	add	r5,r5,r2
    1728:	298bc83a 	sub	r5,r5,r6
    172c:	68800003 	ldbu	r2,0(r13)
    1730:	59000003 	ldbu	r4,0(r11)
    1734:	298bc83a 	sub	r5,r5,r6
    1738:	18c7883a 	add	r3,r3,r3
    173c:	28c7883a 	add	r3,r5,r3
    1740:	1887c83a 	sub	r3,r3,r2
    1744:	1905c83a 	sub	r2,r3,r4
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
    1748:	4880000d 	sth	r2,0(r9)
          if (result < 0) {
    174c:	10bfffcc 	andi	r2,r2,65535
    1750:	10a0001c 	xori	r2,r2,32768
    1754:	10a00004 	addi	r2,r2,-32768
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1758:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gx_array,sobel_width);
          sobel_x_result[y*sobel_width+x] = result;
          if (result < 0) {
    175c:	103fe20e 	bge	r2,zero,16e8 <__alt_data_end+0xff0016e8>
        	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    1760:	0085c83a 	sub	r2,zero,r2
    1764:	1005d0ba 	srai	r2,r2,2
    1768:	1004917a 	slli	r2,r2,5
    176c:	7080000d 	sth	r2,0(r14)
    1770:	003fdf06 	br	16f0 <__alt_data_end+0xff0016f0>
    1774:	802b883a 	mov	r21,r16
    1778:	7fe7883a 	add	r19,r15,ra
    177c:	84000044 	addi	r16,r16,1
    1780:	981f883a 	mov	r15,r19
    1784:	9525883a 	add	r18,r18,r20
    1788:	8d23883a 	add	r17,r17,r20

void sobel_x_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    178c:	adbfc916 	blt	r21,r22,16b4 <__alt_data_end+0xff0016b4>
          } else {
        	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
          }
      }
   }
}
    1790:	dfc00a17 	ldw	ra,40(sp)
    1794:	df000917 	ldw	fp,36(sp)
    1798:	ddc00817 	ldw	r23,32(sp)
    179c:	dd800717 	ldw	r22,28(sp)
    17a0:	dd400617 	ldw	r21,24(sp)
    17a4:	dd000517 	ldw	r20,20(sp)
    17a8:	dcc00417 	ldw	r19,16(sp)
    17ac:	dc800317 	ldw	r18,12(sp)
    17b0:	dc400217 	ldw	r17,8(sp)
    17b4:	dc000117 	ldw	r16,4(sp)
    17b8:	dec00b04 	addi	sp,sp,44
    17bc:	f800283a 	ret

000017c0 <sobel_y>:

void sobel_y( unsigned char *source ) {
    17c0:	defff704 	addi	sp,sp,-36
    17c4:	dc400115 	stw	r17,4(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17c8:	d466d517 	ldw	r17,-25772(gp)
          }
      }
   }
}

void sobel_y( unsigned char *source ) {
    17cc:	dfc00815 	stw	ra,32(sp)
    17d0:	ddc00715 	stw	r23,28(sp)
    17d4:	dd800615 	stw	r22,24(sp)
    17d8:	dd400515 	stw	r21,20(sp)
    17dc:	dd000415 	stw	r20,16(sp)
    17e0:	dcc00315 	stw	r19,12(sp)
    17e4:	dc800215 	stw	r18,8(sp)
    17e8:	dc000015 	stw	r16,0(sp)
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    17ec:	8c7fffc4 	addi	r17,r17,-1
    17f0:	00800044 	movi	r2,1
    17f4:	14402d0e 	bge	r2,r17,18ac <sobel_y+0xec>
    17f8:	d3e6d317 	ldw	r15,-25780(gp)
    17fc:	d3a6d717 	ldw	r14,-25764(gp)
    1800:	03400084 	movi	r13,2
    1804:	7bff883a 	add	ra,r15,r15
    1808:	fb67883a 	add	r19,ra,r13
    180c:	74dd883a 	add	r14,r14,r19
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1810:	6825883a 	mov	r18,r13
    1814:	f8a9883a 	add	r20,ra,r2
    1818:	6821883a 	mov	r16,r13
    181c:	93c01f0e 	bge	r18,r15,189c <sobel_y+0xdc>
    1820:	27cd883a 	add	r6,r4,ra
    1824:	6821883a 	mov	r16,r13
    1828:	22c00044 	addi	r11,r4,1
    182c:	22800084 	addi	r10,r4,2
    1830:	a113883a 	add	r9,r20,r4
    1834:	990b883a 	add	r5,r19,r4
    1838:	7999883a 	add	r12,r15,r6
    183c:	7011883a 	mov	r8,r14
    1840:	200f883a 	mov	r7,r4
         sobel_y_result[y*sobel_width+x] = sobel_mac(source,x,y,gy_array,sobel_width);
    1844:	3d800003 	ldbu	r22,0(r7)
    1848:	50c00003 	ldbu	r3,0(r10)
    184c:	58800003 	ldbu	r2,0(r11)
    1850:	4d400003 	ldbu	r21,0(r9)
    1854:	b0c7883a 	add	r3,r22,r3
    1858:	1085883a 	add	r2,r2,r2
    185c:	35c00003 	ldbu	r23,0(r6)
    1860:	1887883a 	add	r3,r3,r2
    1864:	2d800003 	ldbu	r22,0(r5)
    1868:	1d47c83a 	sub	r3,r3,r21
    186c:	1d47c83a 	sub	r3,r3,r21
    1870:	1dc5c83a 	sub	r2,r3,r23
    1874:	1585c83a 	sub	r2,r2,r22
    1878:	4080000d 	sth	r2,0(r8)
    187c:	29400044 	addi	r5,r5,1
    1880:	39c00044 	addi	r7,r7,1
    1884:	5ac00044 	addi	r11,r11,1
    1888:	52800044 	addi	r10,r10,1
    188c:	31800044 	addi	r6,r6,1
    1890:	4a400044 	addi	r9,r9,1
    1894:	42000084 	addi	r8,r8,2
void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1898:	617fea1e 	bne	r12,r5,1844 <__alt_data_end+0xff001844>
    189c:	6b400044 	addi	r13,r13,1
    18a0:	23c9883a 	add	r4,r4,r15
    18a4:	77dd883a 	add	r14,r14,ra

void sobel_y( unsigned char *source ) {
   int x,y;
//   short result = 0;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18a8:	847fdb16 	blt	r16,r17,1818 <__alt_data_end+0xff001818>
//		  result += pgy_array[7] * source[(y+1)*sobel_width+x];
//		  result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}
    18ac:	dfc00817 	ldw	ra,32(sp)
    18b0:	ddc00717 	ldw	r23,28(sp)
    18b4:	dd800617 	ldw	r22,24(sp)
    18b8:	dd400517 	ldw	r21,20(sp)
    18bc:	dd000417 	ldw	r20,16(sp)
    18c0:	dcc00317 	ldw	r19,12(sp)
    18c4:	dc800217 	ldw	r18,8(sp)
    18c8:	dc400117 	ldw	r17,4(sp)
    18cc:	dc000017 	ldw	r16,0(sp)
    18d0:	dec00904 	addi	sp,sp,36
    18d4:	f800283a 	ret

000018d8 <sobel_y_with_rgb>:

void sobel_y_with_rgb( unsigned char *source ) {
    18d8:	defff604 	addi	sp,sp,-40
    18dc:	dcc00315 	stw	r19,12(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    18e0:	d4e6d517 	ldw	r19,-25772(gp)
//		  sobel_y_result[(y*sobel_width)+x] = result;
      }
   }
}

void sobel_y_with_rgb( unsigned char *source ) {
    18e4:	dfc00915 	stw	ra,36(sp)
    18e8:	df000815 	stw	fp,32(sp)
    18ec:	ddc00715 	stw	r23,28(sp)
    18f0:	dd800615 	stw	r22,24(sp)
    18f4:	dd400515 	stw	r21,20(sp)
    18f8:	dd000415 	stw	r20,16(sp)
    18fc:	dc800215 	stw	r18,8(sp)
    1900:	dc400115 	stw	r17,4(sp)
    1904:	dc000015 	stw	r16,0(sp)
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1908:	9cffffc4 	addi	r19,r19,-1
    190c:	00800044 	movi	r2,1
    1910:	14c03f0e 	bge	r2,r19,1a10 <sobel_y_with_rgb+0x138>
    1914:	d466d317 	ldw	r17,-25780(gp)
    1918:	d426d717 	ldw	r16,-25764(gp)
    191c:	d7e6d817 	ldw	ra,-25760(gp)
    1920:	8c5d883a 	add	r14,r17,r17
    1924:	75000084 	addi	r20,r14,2
    1928:	03c00084 	movi	r15,2
    192c:	8521883a 	add	r16,r16,r20
    1930:	fd3f883a 	add	ra,ra,r20
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1934:	782b883a 	mov	r21,r15
    1938:	70ad883a 	add	r22,r14,r2
    193c:	7825883a 	mov	r18,r15
    1940:	ac402e0e 	bge	r21,r17,19fc <sobel_y_with_rgb+0x124>
    1944:	238d883a 	add	r6,r4,r14
    1948:	7825883a 	mov	r18,r15
    194c:	22c00044 	addi	r11,r4,1
    1950:	22800084 	addi	r10,r4,2
    1954:	b113883a 	add	r9,r22,r4
    1958:	a10b883a 	add	r5,r20,r4
    195c:	899b883a 	add	r13,r17,r6
    1960:	f819883a 	mov	r12,ra
    1964:	8011883a 	mov	r8,r16
    1968:	200f883a 	mov	r7,r4
    196c:	00000b06 	br	199c <sobel_y_with_rgb+0xc4>
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    1970:	180692fa 	slli	r3,r3,11
    1974:	60c0000d 	sth	r3,0(r12)
    1978:	29400044 	addi	r5,r5,1
    197c:	39c00044 	addi	r7,r7,1
    1980:	5ac00044 	addi	r11,r11,1
    1984:	52800044 	addi	r10,r10,1
    1988:	31800044 	addi	r6,r6,1
    198c:	4a400044 	addi	r9,r9,1
    1990:	42000084 	addi	r8,r8,2
    1994:	63000084 	addi	r12,r12,2
void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    1998:	69401826 	beq	r13,r5,19fc <sobel_y_with_rgb+0x124>
	result += filter[3] * pixels[y*width+(x-1)];		// dy = 0, dx = -1
	result += filter[4] * pixels[y*width+x];			// dy = 0, dx = 0
	result += filter[5] * pixels[y*width+(x+1)];		// dy = 0, dx = 1
	result += filter[6] * pixels[(y+1)*width+(x-1)];	// dy = 1, dx = -1
	result += filter[7] * pixels[(y+1)*width+x];		// dy = 1, dx = 0
	result += filter[8] * pixels[(y+1)*width+(x+1)];	// dy = 1, dx = 1
    199c:	50800003 	ldbu	r2,0(r10)
    19a0:	3f000003 	ldbu	fp,0(r7)
    19a4:	58c00003 	ldbu	r3,0(r11)
    19a8:	4dc00003 	ldbu	r23,0(r9)
    19ac:	e0b9883a 	add	fp,fp,r2
    19b0:	18c7883a 	add	r3,r3,r3
    19b4:	30800003 	ldbu	r2,0(r6)
    19b8:	e0c7883a 	add	r3,fp,r3
    19bc:	1dc7c83a 	sub	r3,r3,r23
    19c0:	2f000003 	ldbu	fp,0(r5)
    19c4:	1dc7c83a 	sub	r3,r3,r23
    19c8:	1885c83a 	sub	r2,r3,r2
    19cc:	1705c83a 	sub	r2,r2,fp
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
    19d0:	4080000d 	sth	r2,0(r8)
         if (result < 0) {
    19d4:	10bfffcc 	andi	r2,r2,65535
    19d8:	10a0001c 	xori	r2,r2,32768
    19dc:	10a00004 	addi	r2,r2,-32768
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
    19e0:	1007d0fa 	srai	r3,r2,3

   for (y = 1 ; y < (sobel_height-1) ; y++) {
      for (x = 1 ; x < (sobel_width-1) ; x++) {
    	  result = sobel_mac(source,x,y,gy_array,sobel_width);
         sobel_y_result[y*sobel_width+x] = result;
         if (result < 0) {
    19e4:	103fe20e 	bge	r2,zero,1970 <__alt_data_end+0xff001970>
       	  sobel_rgb565[y*sobel_width+x] = ((-result)>>2)<<5;
    19e8:	0085c83a 	sub	r2,zero,r2
    19ec:	1005d0ba 	srai	r2,r2,2
    19f0:	1004917a 	slli	r2,r2,5
    19f4:	6080000d 	sth	r2,0(r12)
    19f8:	003fdf06 	br	1978 <__alt_data_end+0xff001978>
    19fc:	7bc00044 	addi	r15,r15,1
    1a00:	2449883a 	add	r4,r4,r17
    1a04:	83a1883a 	add	r16,r16,r14
    1a08:	fbbf883a 	add	ra,ra,r14

void sobel_y_with_rgb( unsigned char *source ) {
   int x,y;
   short result;

   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1a0c:	94ffcb16 	blt	r18,r19,193c <__alt_data_end+0xff00193c>
         } else {
       	  sobel_rgb565[y*sobel_width+x] = ((result>>3)&0x1F)<<11;
         }
      }
   }
}
    1a10:	dfc00917 	ldw	ra,36(sp)
    1a14:	df000817 	ldw	fp,32(sp)
    1a18:	ddc00717 	ldw	r23,28(sp)
    1a1c:	dd800617 	ldw	r22,24(sp)
    1a20:	dd400517 	ldw	r21,20(sp)
    1a24:	dd000417 	ldw	r20,16(sp)
    1a28:	dcc00317 	ldw	r19,12(sp)
    1a2c:	dc800217 	ldw	r18,8(sp)
    1a30:	dc400117 	ldw	r17,4(sp)
    1a34:	dc000017 	ldw	r16,0(sp)
    1a38:	dec00a04 	addi	sp,sp,40
    1a3c:	f800283a 	ret

00001a40 <sobel_threshold>:

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a40:	d0a6d317 	ldw	r2,-25780(gp)
    1a44:	d2a6d517 	ldw	r10,-25772(gp)
	for(k = 1; k<kmax; k++)
    1a48:	01800044 	movi	r6,1
}

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
    1a4c:	5095383a 	mul	r10,r10,r2
	for(k = 1; k<kmax; k++)
    1a50:	3280210e 	bge	r6,r10,1ad8 <sobel_threshold+0x98>
    1a54:	213fffcc 	andi	r4,r4,65535
    1a58:	2120001c 	xori	r4,r4,32768
    1a5c:	21200004 	addi	r4,r4,-32768
	{
		value = sobel_x_result[k];
    1a60:	d166d617 	ldw	r5,-25768(gp)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a64:	d0e6d717 	ldw	r3,-25764(gp)
    1a68:	3185883a 	add	r2,r6,r6
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1a6c:	288b883a 	add	r5,r5,r2
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a70:	1887883a 	add	r3,r3,r2
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
    1a74:	2880000b 	ldhu	r2,0(r5)
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
    1a78:	1940000b 	ldhu	r5,0(r3)
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1a7c:	d266d417 	ldw	r9,-25776(gp)
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a80:	11ffffcc 	andi	r7,r2,65535
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a84:	2a3fffcc 	andi	r8,r5,65535
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a88:	39e0001c 	xori	r7,r7,32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a8c:	4220001c 	xori	r8,r8,32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a90:	39e00004 	addi	r7,r7,-32768
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a94:	42200004 	addi	r8,r8,-32768
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
	{
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a98:	380fd7fa 	srai	r7,r7,31
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1a9c:	4011d7fa 	srai	r8,r8,31
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1aa0:	4993883a 	add	r9,r9,r6
		value = sobel_x_result[k];
//		sum = (value < 0) ? -value : value;
		sum = (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
		value = sobel_y_result[k];
//		sum += (value < 0) ? -value : value;
		sum += (value + (value >> 31)) ^ (value >> 31);		// get absolute value (2 complement)
    1aa4:	3887883a 	add	r3,r7,r2
    1aa8:	414b883a 	add	r5,r8,r5
    1aac:	414af03a 	xor	r5,r8,r5
    1ab0:	38c4f03a 	xor	r2,r7,r3
    1ab4:	2885883a 	add	r2,r5,r2
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
    1ab8:	10bfffcc 	andi	r2,r2,65535
    1abc:	10a0001c 	xori	r2,r2,32768
    1ac0:	10a00004 	addi	r2,r2,-32768
    1ac4:	2084803a 	cmplt	r2,r4,r2
    1ac8:	0085c83a 	sub	r2,zero,r2
    1acc:	48800005 	stb	r2,0(r9)

void sobel_threshold(short threshold) {
	short sum,value;
	int k;
	int kmax = sobel_height*sobel_width;
	for(k = 1; k<kmax; k++)
    1ad0:	31800044 	addi	r6,r6,1
    1ad4:	51bfe21e 	bne	r10,r6,1a60 <__alt_data_end+0xff001a60>
    1ad8:	f800283a 	ret

00001adc <sobel_complete>:
void sobel_complete( unsigned char *source)//, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
//   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1adc:	d0e6d517 	ldw	r3,-25772(gp)
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source)//, short threshold)
{
    1ae0:	deffe804 	addi	sp,sp,-96
    1ae4:	dfc01715 	stw	ra,92(sp)
   short result = 0;
   int x,y,arrayindex;
//   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1ae8:	18ffffc4 	addi	r3,r3,-1
		sobel_result[k] = (sum > threshold) ? 0xFF : 0;
	}
}

void sobel_complete( unsigned char *source)//, short threshold)
{
    1aec:	df001615 	stw	fp,88(sp)
    1af0:	ddc01515 	stw	r23,84(sp)
    1af4:	dd801415 	stw	r22,80(sp)
    1af8:	dd401315 	stw	r21,76(sp)
    1afc:	dd001215 	stw	r20,72(sp)
    1b00:	dcc01115 	stw	r19,68(sp)
    1b04:	dc801015 	stw	r18,64(sp)
    1b08:	dc400f15 	stw	r17,60(sp)
    1b0c:	dc000e15 	stw	r16,56(sp)
   short result = 0;
   int x,y,arrayindex;
//   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1b10:	00800044 	movi	r2,1
    1b14:	d8c00915 	stw	r3,36(sp)
    1b18:	10c09c0e 	bge	r2,r3,1d8c <sobel_complete+0x2b0>
    1b1c:	d0e6d317 	ldw	r3,-25780(gp)
    1b20:	d5a00117 	ldw	r22,-32764(gp)
    1b24:	d7200017 	ldw	fp,-32768(gp)
    1b28:	18cb883a 	add	r5,r3,r3
    1b2c:	d8c00215 	stw	r3,8(sp)
    1b30:	d9400715 	stw	r5,28(sp)
    1b34:	28c00084 	addi	r3,r5,2
    1b38:	01400084 	movi	r5,2
    1b3c:	d9400315 	stw	r5,12(sp)
    1b40:	d9400217 	ldw	r5,8(sp)
    1b44:	2149883a 	add	r4,r4,r5
    1b48:	d9000115 	stw	r4,4(sp)
    1b4c:	d126d617 	ldw	r4,-25768(gp)
    1b50:	1145c83a 	sub	r2,r2,r5
    1b54:	d8800a15 	stw	r2,40(sp)
    1b58:	20c9883a 	add	r4,r4,r3
    1b5c:	d9000415 	stw	r4,16(sp)
    1b60:	d8800317 	ldw	r2,12(sp)
    1b64:	d126d717 	ldw	r4,-25764(gp)
    1b68:	1145c83a 	sub	r2,r2,r5
    1b6c:	20c9883a 	add	r4,r4,r3
    1b70:	28c00044 	addi	r3,r5,1
    1b74:	29400084 	addi	r5,r5,2
    1b78:	d9000515 	stw	r4,20(sp)
    1b7c:	d8800b15 	stw	r2,44(sp)
    1b80:	d8c00c15 	stw	r3,48(sp)
    1b84:	d9400d15 	stw	r5,52(sp)
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1b88:	d8800217 	ldw	r2,8(sp)
    1b8c:	01400084 	movi	r5,2
    1b90:	28808a0e 	bge	r5,r2,1dbc <sobel_complete+0x2e0>
    1b94:	1007883a 	mov	r3,r2
    1b98:	d8800117 	ldw	r2,4(sp)
    1b9c:	d9400317 	ldw	r5,12(sp)
    1ba0:	dfc00517 	ldw	ra,20(sp)
    1ba4:	10c5883a 	add	r2,r2,r3
    1ba8:	d8800615 	stw	r2,24(sp)
    1bac:	d8800117 	ldw	r2,4(sp)
    1bb0:	d9400815 	stw	r5,32(sp)
    1bb4:	d9400b17 	ldw	r5,44(sp)
    1bb8:	10efc83a 	sub	r23,r2,r3
    1bbc:	d8c00a17 	ldw	r3,40(sp)
    1bc0:	289d883a 	add	r14,r5,r2
    1bc4:	d9400d17 	ldw	r5,52(sp)
    1bc8:	18ab883a 	add	r21,r3,r2
    1bcc:	d8c00c17 	ldw	r3,48(sp)
    1bd0:	15000044 	addi	r20,r2,1
    1bd4:	14c00084 	addi	r19,r2,2
    1bd8:	18a3883a 	add	r17,r3,r2
    1bdc:	28a1883a 	add	r16,r5,r2
    1be0:	d8800417 	ldw	r2,16(sp)
    1be4:	dc800617 	ldw	r18,24(sp)
    1be8:	dbc00117 	ldw	r15,4(sp)
    1bec:	d8800015 	stw	r2,0(sp)
	   result += pgx_array[4] * source[y*sobel_width+x];
	   result += pgx_array[5] * source[y*sobel_width+(x+1)];
	   result += pgx_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgx_array[7] * source[(y+1)*sobel_width+x];
	   result += pgx_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_x_result[arrayindex] = result;
    1bf0:	ba400003 	ldbu	r9,0(r23)
    1bf4:	a9400003 	ldbu	r5,0(r21)
    1bf8:	b2800047 	ldb	r10,1(r22)
    1bfc:	b3400007 	ldb	r13,0(r22)
    1c00:	71000003 	ldbu	r4,0(r14)
    1c04:	b2000087 	ldb	r8,2(r22)
    1c08:	78c00003 	ldbu	r3,0(r15)
    1c0c:	b1c000c7 	ldb	r7,3(r22)
    1c10:	a0800003 	ldbu	r2,0(r20)
    1c14:	b1800107 	ldb	r6,4(r22)
    1c18:	6a5b383a 	mul	r13,r13,r9
    1c1c:	5153383a 	mul	r9,r10,r5
    1c20:	b3000147 	ldb	r12,5(r22)
    1c24:	99400003 	ldbu	r5,0(r19)
    1c28:	4111383a 	mul	r8,r8,r4
    1c2c:	b2c00187 	ldb	r11,6(r22)
    1c30:	91000003 	ldbu	r4,0(r18)
    1c34:	38cf383a 	mul	r7,r7,r3
    1c38:	b28001c7 	ldb	r10,7(r22)
    1c3c:	88c00003 	ldbu	r3,0(r17)
    1c40:	6a53883a 	add	r9,r13,r9
    1c44:	308d383a 	mul	r6,r6,r2
    1c48:	4a11883a 	add	r8,r9,r8
    1c4c:	614b383a 	mul	r5,r12,r5
    1c50:	80800003 	ldbu	r2,0(r16)
    1c54:	b3400207 	ldb	r13,8(r22)
    1c58:	41d1883a 	add	r8,r8,r7
    1c5c:	5909383a 	mul	r4,r11,r4
    1c60:	418d883a 	add	r6,r8,r6
    1c64:	50c7383a 	mul	r3,r10,r3
    1c68:	314b883a 	add	r5,r6,r5
    1c6c:	689b383a 	mul	r13,r13,r2
    1c70:	2905883a 	add	r2,r5,r4
    1c74:	10c5883a 	add	r2,r2,r3
    1c78:	d8c00017 	ldw	r3,0(sp)
    1c7c:	1345883a 	add	r2,r2,r13
    1c80:	73800044 	addi	r14,r14,1
    1c84:	1880000d 	sth	r2,0(r3)
	   result += pgy_array[4] * source[y*sobel_width+x];
	   result += pgy_array[5] * source[y*sobel_width+(x+1)];
	   result += pgy_array[6] * source[(y+1)*sobel_width+(x-1)];
	   result += pgy_array[7] * source[(y+1)*sobel_width+x];
	   result += pgy_array[8] * source[(y+1)*sobel_width+(x+1)];
	   sobel_y_result[arrayindex] = result;
    1c88:	ba400003 	ldbu	r9,0(r23)
    1c8c:	a8c00003 	ldbu	r3,0(r21)
    1c90:	e1400047 	ldb	r5,1(fp)
    1c94:	e2800007 	ldb	r10,0(fp)
    1c98:	72ffffc3 	ldbu	r11,-1(r14)
    1c9c:	e2000087 	ldb	r8,2(fp)
    1ca0:	79000003 	ldbu	r4,0(r15)
    1ca4:	e1c000c7 	ldb	r7,3(fp)
    1ca8:	a0800003 	ldbu	r2,0(r20)
    1cac:	28c7383a 	mul	r3,r5,r3
    1cb0:	e1800107 	ldb	r6,4(fp)
    1cb4:	5255383a 	mul	r10,r10,r9
    1cb8:	99400003 	ldbu	r5,0(r19)
    1cbc:	e3400147 	ldb	r13,5(fp)
    1cc0:	42d1383a 	mul	r8,r8,r11
    1cc4:	e3000187 	ldb	r12,6(fp)
    1cc8:	390f383a 	mul	r7,r7,r4
    1ccc:	91000003 	ldbu	r4,0(r18)
    1cd0:	50d3883a 	add	r9,r10,r3
    1cd4:	e2c001c7 	ldb	r11,7(fp)
    1cd8:	88c00003 	ldbu	r3,0(r17)
    1cdc:	308d383a 	mul	r6,r6,r2
    1ce0:	e2800207 	ldb	r10,8(fp)
    1ce4:	80800003 	ldbu	r2,0(r16)
    1ce8:	4a11883a 	add	r8,r9,r8
    1cec:	694b383a 	mul	r5,r13,r5
    1cf0:	41d1883a 	add	r8,r8,r7
    1cf4:	6109383a 	mul	r4,r12,r4
    1cf8:	418d883a 	add	r6,r8,r6
    1cfc:	58c7383a 	mul	r3,r11,r3
    1d00:	314b883a 	add	r5,r6,r5
    1d04:	5095383a 	mul	r10,r10,r2
    1d08:	2905883a 	add	r2,r5,r4
    1d0c:	10c5883a 	add	r2,r2,r3
    1d10:	d9400017 	ldw	r5,0(sp)
    1d14:	1285883a 	add	r2,r2,r10
    1d18:	f880000d 	sth	r2,0(ra)
{
   short result = 0;
   int x,y,arrayindex;
//   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
	 for (x = 1 ; x < (sobel_width-1) ; x++) {
    1d1c:	d8800117 	ldw	r2,4(sp)
    1d20:	29400084 	addi	r5,r5,2
    1d24:	d9400015 	stw	r5,0(sp)
    1d28:	bdc00044 	addi	r23,r23,1
    1d2c:	ad400044 	addi	r21,r21,1
    1d30:	7bc00044 	addi	r15,r15,1
    1d34:	a5000044 	addi	r20,r20,1
    1d38:	9cc00044 	addi	r19,r19,1
    1d3c:	94800044 	addi	r18,r18,1
    1d40:	8c400044 	addi	r17,r17,1
    1d44:	84000044 	addi	r16,r16,1
    1d48:	ffc00084 	addi	ra,ra,2
    1d4c:	13bfa81e 	bne	r2,r14,1bf0 <__alt_data_end+0xff001bf0>
    1d50:	d8c00317 	ldw	r3,12(sp)
    1d54:	d9400617 	ldw	r5,24(sp)
    1d58:	d8800417 	ldw	r2,16(sp)
    1d5c:	18c00044 	addi	r3,r3,1
    1d60:	d8c00315 	stw	r3,12(sp)
    1d64:	d8c00717 	ldw	r3,28(sp)
    1d68:	d9400115 	stw	r5,4(sp)
    1d6c:	d9400517 	ldw	r5,20(sp)
    1d70:	10c5883a 	add	r2,r2,r3
    1d74:	d8800415 	stw	r2,16(sp)
    1d78:	28cb883a 	add	r5,r5,r3
void sobel_complete( unsigned char *source)//, short threshold)
{
   short result = 0;
   int x,y,arrayindex;
//   short sum,value;
   for (y = 1 ; y < (sobel_height-1) ; y++) {
    1d7c:	d8800817 	ldw	r2,32(sp)
    1d80:	d8c00917 	ldw	r3,36(sp)
    1d84:	d9400515 	stw	r5,20(sp)
    1d88:	10ff7f16 	blt	r2,r3,1b88 <__alt_data_end+0xff001b88>
//	   value = sobel_y_result[arrayindex];
//	   sum += (value < 0) ? -value : value;
//	   sobel_result[arrayindex] = (sum > threshold) ? 0xFF : 0;
	 }
   }
}
    1d8c:	dfc01717 	ldw	ra,92(sp)
    1d90:	df001617 	ldw	fp,88(sp)
    1d94:	ddc01517 	ldw	r23,84(sp)
    1d98:	dd801417 	ldw	r22,80(sp)
    1d9c:	dd401317 	ldw	r21,76(sp)
    1da0:	dd001217 	ldw	r20,72(sp)
    1da4:	dcc01117 	ldw	r19,68(sp)
    1da8:	dc801017 	ldw	r18,64(sp)
    1dac:	dc400f17 	ldw	r17,60(sp)
    1db0:	dc000e17 	ldw	r16,56(sp)
    1db4:	dec01804 	addi	sp,sp,96
    1db8:	f800283a 	ret
    1dbc:	d9400117 	ldw	r5,4(sp)
    1dc0:	d8c00317 	ldw	r3,12(sp)
    1dc4:	288b883a 	add	r5,r5,r2
    1dc8:	d8c00815 	stw	r3,32(sp)
    1dcc:	d9400615 	stw	r5,24(sp)
    1dd0:	003fdf06 	br	1d50 <__alt_data_end+0xff001d50>

00001dd4 <GetSobel_rgb>:

unsigned short *GetSobel_rgb() {
	return sobel_rgb565;
}
    1dd4:	d0a6d817 	ldw	r2,-25760(gp)
    1dd8:	f800283a 	ret

00001ddc <GetSobelResult>:

unsigned char *GetSobelResult() {
	return sobel_result;
}
    1ddc:	d0a6d417 	ldw	r2,-25776(gp)
    1de0:	f800283a 	ret

00001de4 <vga_set_pointer>:

#include <system.h>
#include <io.h>

void vga_set_pointer( void* image ) {
	IOWR_32DIRECT(VGA_DMA_0_BASE,0,(int)image);
    1de4:	00804034 	movhi	r2,256
    1de8:	10843404 	addi	r2,r2,4304
    1dec:	11000035 	stwio	r4,0(r2)
    1df0:	f800283a 	ret

00001df4 <vga_set_swap>:
}

void vga_set_swap(char swap) {
	IOWR_8DIRECT(VGA_DMA_0_BASE,4,swap);
    1df4:	00804034 	movhi	r2,256
    1df8:	10843504 	addi	r2,r2,4308
    1dfc:	11000025 	stbio	r4,0(r2)
    1e00:	f800283a 	ret

00001e04 <malloc>:
    1e04:	00800074 	movhi	r2,1
    1e08:	1088c004 	addi	r2,r2,8960
    1e0c:	200b883a 	mov	r5,r4
    1e10:	11000017 	ldw	r4,0(r2)
    1e14:	0001e2c1 	jmpi	1e2c <_malloc_r>

00001e18 <free>:
    1e18:	00800074 	movhi	r2,1
    1e1c:	1088c004 	addi	r2,r2,8960
    1e20:	200b883a 	mov	r5,r4
    1e24:	11000017 	ldw	r4,0(r2)
    1e28:	0006c7c1 	jmpi	6c7c <_free_r>

00001e2c <_malloc_r>:
    1e2c:	defff504 	addi	sp,sp,-44
    1e30:	dc800315 	stw	r18,12(sp)
    1e34:	dfc00a15 	stw	ra,40(sp)
    1e38:	df000915 	stw	fp,36(sp)
    1e3c:	ddc00815 	stw	r23,32(sp)
    1e40:	dd800715 	stw	r22,28(sp)
    1e44:	dd400615 	stw	r21,24(sp)
    1e48:	dd000515 	stw	r20,20(sp)
    1e4c:	dcc00415 	stw	r19,16(sp)
    1e50:	dc400215 	stw	r17,8(sp)
    1e54:	dc000115 	stw	r16,4(sp)
    1e58:	288002c4 	addi	r2,r5,11
    1e5c:	00c00584 	movi	r3,22
    1e60:	2025883a 	mov	r18,r4
    1e64:	18807f2e 	bgeu	r3,r2,2064 <_malloc_r+0x238>
    1e68:	047ffe04 	movi	r17,-8
    1e6c:	1462703a 	and	r17,r2,r17
    1e70:	8800a316 	blt	r17,zero,2100 <_malloc_r+0x2d4>
    1e74:	8940a236 	bltu	r17,r5,2100 <_malloc_r+0x2d4>
    1e78:	000eab40 	call	eab4 <__malloc_lock>
    1e7c:	00807dc4 	movi	r2,503
    1e80:	1441e92e 	bgeu	r2,r17,2628 <_malloc_r+0x7fc>
    1e84:	8804d27a 	srli	r2,r17,9
    1e88:	1000a126 	beq	r2,zero,2110 <_malloc_r+0x2e4>
    1e8c:	00c00104 	movi	r3,4
    1e90:	18811e36 	bltu	r3,r2,230c <_malloc_r+0x4e0>
    1e94:	8804d1ba 	srli	r2,r17,6
    1e98:	12000e44 	addi	r8,r2,57
    1e9c:	11c00e04 	addi	r7,r2,56
    1ea0:	4209883a 	add	r4,r8,r8
    1ea4:	04c00074 	movhi	r19,1
    1ea8:	2109883a 	add	r4,r4,r4
    1eac:	9cc21004 	addi	r19,r19,2112
    1eb0:	2109883a 	add	r4,r4,r4
    1eb4:	9909883a 	add	r4,r19,r4
    1eb8:	24000117 	ldw	r16,4(r4)
    1ebc:	213ffe04 	addi	r4,r4,-8
    1ec0:	24009726 	beq	r4,r16,2120 <_malloc_r+0x2f4>
    1ec4:	80800117 	ldw	r2,4(r16)
    1ec8:	01bfff04 	movi	r6,-4
    1ecc:	014003c4 	movi	r5,15
    1ed0:	1184703a 	and	r2,r2,r6
    1ed4:	1447c83a 	sub	r3,r2,r17
    1ed8:	28c00716 	blt	r5,r3,1ef8 <_malloc_r+0xcc>
    1edc:	1800920e 	bge	r3,zero,2128 <_malloc_r+0x2fc>
    1ee0:	84000317 	ldw	r16,12(r16)
    1ee4:	24008e26 	beq	r4,r16,2120 <_malloc_r+0x2f4>
    1ee8:	80800117 	ldw	r2,4(r16)
    1eec:	1184703a 	and	r2,r2,r6
    1ef0:	1447c83a 	sub	r3,r2,r17
    1ef4:	28fff90e 	bge	r5,r3,1edc <__alt_data_end+0xff001edc>
    1ef8:	3809883a 	mov	r4,r7
    1efc:	01800074 	movhi	r6,1
    1f00:	9c000417 	ldw	r16,16(r19)
    1f04:	31821004 	addi	r6,r6,2112
    1f08:	32000204 	addi	r8,r6,8
    1f0c:	82013426 	beq	r16,r8,23e0 <_malloc_r+0x5b4>
    1f10:	80c00117 	ldw	r3,4(r16)
    1f14:	00bfff04 	movi	r2,-4
    1f18:	188e703a 	and	r7,r3,r2
    1f1c:	3c45c83a 	sub	r2,r7,r17
    1f20:	00c003c4 	movi	r3,15
    1f24:	18811f16 	blt	r3,r2,23a4 <_malloc_r+0x578>
    1f28:	32000515 	stw	r8,20(r6)
    1f2c:	32000415 	stw	r8,16(r6)
    1f30:	10007f0e 	bge	r2,zero,2130 <_malloc_r+0x304>
    1f34:	00807fc4 	movi	r2,511
    1f38:	11c0fd36 	bltu	r2,r7,2330 <_malloc_r+0x504>
    1f3c:	3806d0fa 	srli	r3,r7,3
    1f40:	01c00044 	movi	r7,1
    1f44:	30800117 	ldw	r2,4(r6)
    1f48:	19400044 	addi	r5,r3,1
    1f4c:	294b883a 	add	r5,r5,r5
    1f50:	1807d0ba 	srai	r3,r3,2
    1f54:	294b883a 	add	r5,r5,r5
    1f58:	294b883a 	add	r5,r5,r5
    1f5c:	298b883a 	add	r5,r5,r6
    1f60:	38c6983a 	sll	r3,r7,r3
    1f64:	29c00017 	ldw	r7,0(r5)
    1f68:	2a7ffe04 	addi	r9,r5,-8
    1f6c:	1886b03a 	or	r3,r3,r2
    1f70:	82400315 	stw	r9,12(r16)
    1f74:	81c00215 	stw	r7,8(r16)
    1f78:	30c00115 	stw	r3,4(r6)
    1f7c:	2c000015 	stw	r16,0(r5)
    1f80:	3c000315 	stw	r16,12(r7)
    1f84:	2005d0ba 	srai	r2,r4,2
    1f88:	01400044 	movi	r5,1
    1f8c:	288a983a 	sll	r5,r5,r2
    1f90:	19406f36 	bltu	r3,r5,2150 <_malloc_r+0x324>
    1f94:	28c4703a 	and	r2,r5,r3
    1f98:	10000a1e 	bne	r2,zero,1fc4 <_malloc_r+0x198>
    1f9c:	00bfff04 	movi	r2,-4
    1fa0:	294b883a 	add	r5,r5,r5
    1fa4:	2088703a 	and	r4,r4,r2
    1fa8:	28c4703a 	and	r2,r5,r3
    1fac:	21000104 	addi	r4,r4,4
    1fb0:	1000041e 	bne	r2,zero,1fc4 <_malloc_r+0x198>
    1fb4:	294b883a 	add	r5,r5,r5
    1fb8:	28c4703a 	and	r2,r5,r3
    1fbc:	21000104 	addi	r4,r4,4
    1fc0:	103ffc26 	beq	r2,zero,1fb4 <__alt_data_end+0xff001fb4>
    1fc4:	02bfff04 	movi	r10,-4
    1fc8:	024003c4 	movi	r9,15
    1fcc:	21800044 	addi	r6,r4,1
    1fd0:	318d883a 	add	r6,r6,r6
    1fd4:	318d883a 	add	r6,r6,r6
    1fd8:	318d883a 	add	r6,r6,r6
    1fdc:	998d883a 	add	r6,r19,r6
    1fe0:	333ffe04 	addi	r12,r6,-8
    1fe4:	2017883a 	mov	r11,r4
    1fe8:	31800104 	addi	r6,r6,4
    1fec:	34000017 	ldw	r16,0(r6)
    1ff0:	31fffd04 	addi	r7,r6,-12
    1ff4:	81c0041e 	bne	r16,r7,2008 <_malloc_r+0x1dc>
    1ff8:	0000fb06 	br	23e8 <_malloc_r+0x5bc>
    1ffc:	1801030e 	bge	r3,zero,240c <_malloc_r+0x5e0>
    2000:	84000317 	ldw	r16,12(r16)
    2004:	81c0f826 	beq	r16,r7,23e8 <_malloc_r+0x5bc>
    2008:	80800117 	ldw	r2,4(r16)
    200c:	1284703a 	and	r2,r2,r10
    2010:	1447c83a 	sub	r3,r2,r17
    2014:	48fff90e 	bge	r9,r3,1ffc <__alt_data_end+0xff001ffc>
    2018:	80800317 	ldw	r2,12(r16)
    201c:	81000217 	ldw	r4,8(r16)
    2020:	89400054 	ori	r5,r17,1
    2024:	81400115 	stw	r5,4(r16)
    2028:	20800315 	stw	r2,12(r4)
    202c:	11000215 	stw	r4,8(r2)
    2030:	8463883a 	add	r17,r16,r17
    2034:	9c400515 	stw	r17,20(r19)
    2038:	9c400415 	stw	r17,16(r19)
    203c:	18800054 	ori	r2,r3,1
    2040:	88800115 	stw	r2,4(r17)
    2044:	8a000315 	stw	r8,12(r17)
    2048:	8a000215 	stw	r8,8(r17)
    204c:	88e3883a 	add	r17,r17,r3
    2050:	88c00015 	stw	r3,0(r17)
    2054:	9009883a 	mov	r4,r18
    2058:	000eab80 	call	eab8 <__malloc_unlock>
    205c:	80800204 	addi	r2,r16,8
    2060:	00001b06 	br	20d0 <_malloc_r+0x2a4>
    2064:	04400404 	movi	r17,16
    2068:	89402536 	bltu	r17,r5,2100 <_malloc_r+0x2d4>
    206c:	000eab40 	call	eab4 <__malloc_lock>
    2070:	00800184 	movi	r2,6
    2074:	01000084 	movi	r4,2
    2078:	04c00074 	movhi	r19,1
    207c:	1085883a 	add	r2,r2,r2
    2080:	9cc21004 	addi	r19,r19,2112
    2084:	1085883a 	add	r2,r2,r2
    2088:	9885883a 	add	r2,r19,r2
    208c:	14000117 	ldw	r16,4(r2)
    2090:	10fffe04 	addi	r3,r2,-8
    2094:	80c0d926 	beq	r16,r3,23fc <_malloc_r+0x5d0>
    2098:	80c00117 	ldw	r3,4(r16)
    209c:	81000317 	ldw	r4,12(r16)
    20a0:	00bfff04 	movi	r2,-4
    20a4:	1884703a 	and	r2,r3,r2
    20a8:	81400217 	ldw	r5,8(r16)
    20ac:	8085883a 	add	r2,r16,r2
    20b0:	10c00117 	ldw	r3,4(r2)
    20b4:	29000315 	stw	r4,12(r5)
    20b8:	21400215 	stw	r5,8(r4)
    20bc:	18c00054 	ori	r3,r3,1
    20c0:	10c00115 	stw	r3,4(r2)
    20c4:	9009883a 	mov	r4,r18
    20c8:	000eab80 	call	eab8 <__malloc_unlock>
    20cc:	80800204 	addi	r2,r16,8
    20d0:	dfc00a17 	ldw	ra,40(sp)
    20d4:	df000917 	ldw	fp,36(sp)
    20d8:	ddc00817 	ldw	r23,32(sp)
    20dc:	dd800717 	ldw	r22,28(sp)
    20e0:	dd400617 	ldw	r21,24(sp)
    20e4:	dd000517 	ldw	r20,20(sp)
    20e8:	dcc00417 	ldw	r19,16(sp)
    20ec:	dc800317 	ldw	r18,12(sp)
    20f0:	dc400217 	ldw	r17,8(sp)
    20f4:	dc000117 	ldw	r16,4(sp)
    20f8:	dec00b04 	addi	sp,sp,44
    20fc:	f800283a 	ret
    2100:	00800304 	movi	r2,12
    2104:	90800015 	stw	r2,0(r18)
    2108:	0005883a 	mov	r2,zero
    210c:	003ff006 	br	20d0 <__alt_data_end+0xff0020d0>
    2110:	01002004 	movi	r4,128
    2114:	02001004 	movi	r8,64
    2118:	01c00fc4 	movi	r7,63
    211c:	003f6106 	br	1ea4 <__alt_data_end+0xff001ea4>
    2120:	4009883a 	mov	r4,r8
    2124:	003f7506 	br	1efc <__alt_data_end+0xff001efc>
    2128:	81000317 	ldw	r4,12(r16)
    212c:	003fde06 	br	20a8 <__alt_data_end+0xff0020a8>
    2130:	81c5883a 	add	r2,r16,r7
    2134:	11400117 	ldw	r5,4(r2)
    2138:	9009883a 	mov	r4,r18
    213c:	29400054 	ori	r5,r5,1
    2140:	11400115 	stw	r5,4(r2)
    2144:	000eab80 	call	eab8 <__malloc_unlock>
    2148:	80800204 	addi	r2,r16,8
    214c:	003fe006 	br	20d0 <__alt_data_end+0xff0020d0>
    2150:	9c000217 	ldw	r16,8(r19)
    2154:	00bfff04 	movi	r2,-4
    2158:	85800117 	ldw	r22,4(r16)
    215c:	b0ac703a 	and	r22,r22,r2
    2160:	b4400336 	bltu	r22,r17,2170 <_malloc_r+0x344>
    2164:	b445c83a 	sub	r2,r22,r17
    2168:	00c003c4 	movi	r3,15
    216c:	18805d16 	blt	r3,r2,22e4 <_malloc_r+0x4b8>
    2170:	05c00074 	movhi	r23,1
    2174:	00800074 	movhi	r2,1
    2178:	108f9604 	addi	r2,r2,15960
    217c:	bdc8bd04 	addi	r23,r23,8948
    2180:	15400017 	ldw	r21,0(r2)
    2184:	b8c00017 	ldw	r3,0(r23)
    2188:	00bfffc4 	movi	r2,-1
    218c:	858d883a 	add	r6,r16,r22
    2190:	8d6b883a 	add	r21,r17,r21
    2194:	1880ea26 	beq	r3,r2,2540 <_malloc_r+0x714>
    2198:	ad4403c4 	addi	r21,r21,4111
    219c:	00bc0004 	movi	r2,-4096
    21a0:	a8aa703a 	and	r21,r21,r2
    21a4:	a80b883a 	mov	r5,r21
    21a8:	9009883a 	mov	r4,r18
    21ac:	d9800015 	stw	r6,0(sp)
    21b0:	00027780 	call	2778 <_sbrk_r>
    21b4:	1029883a 	mov	r20,r2
    21b8:	00bfffc4 	movi	r2,-1
    21bc:	d9800017 	ldw	r6,0(sp)
    21c0:	a080e826 	beq	r20,r2,2564 <_malloc_r+0x738>
    21c4:	a180a636 	bltu	r20,r6,2460 <_malloc_r+0x634>
    21c8:	07000074 	movhi	fp,1
    21cc:	e70fa404 	addi	fp,fp,16016
    21d0:	e0800017 	ldw	r2,0(fp)
    21d4:	a887883a 	add	r3,r21,r2
    21d8:	e0c00015 	stw	r3,0(fp)
    21dc:	3500e626 	beq	r6,r20,2578 <_malloc_r+0x74c>
    21e0:	b9000017 	ldw	r4,0(r23)
    21e4:	00bfffc4 	movi	r2,-1
    21e8:	2080ee26 	beq	r4,r2,25a4 <_malloc_r+0x778>
    21ec:	a185c83a 	sub	r2,r20,r6
    21f0:	10c5883a 	add	r2,r2,r3
    21f4:	e0800015 	stw	r2,0(fp)
    21f8:	a0c001cc 	andi	r3,r20,7
    21fc:	1800bc26 	beq	r3,zero,24f0 <_malloc_r+0x6c4>
    2200:	a0e9c83a 	sub	r20,r20,r3
    2204:	00840204 	movi	r2,4104
    2208:	a5000204 	addi	r20,r20,8
    220c:	10c7c83a 	sub	r3,r2,r3
    2210:	a545883a 	add	r2,r20,r21
    2214:	1083ffcc 	andi	r2,r2,4095
    2218:	18abc83a 	sub	r21,r3,r2
    221c:	a80b883a 	mov	r5,r21
    2220:	9009883a 	mov	r4,r18
    2224:	00027780 	call	2778 <_sbrk_r>
    2228:	00ffffc4 	movi	r3,-1
    222c:	10c0e126 	beq	r2,r3,25b4 <_malloc_r+0x788>
    2230:	1505c83a 	sub	r2,r2,r20
    2234:	1545883a 	add	r2,r2,r21
    2238:	10800054 	ori	r2,r2,1
    223c:	e0c00017 	ldw	r3,0(fp)
    2240:	9d000215 	stw	r20,8(r19)
    2244:	a0800115 	stw	r2,4(r20)
    2248:	a8c7883a 	add	r3,r21,r3
    224c:	e0c00015 	stw	r3,0(fp)
    2250:	84c00e26 	beq	r16,r19,228c <_malloc_r+0x460>
    2254:	018003c4 	movi	r6,15
    2258:	3580a72e 	bgeu	r6,r22,24f8 <_malloc_r+0x6cc>
    225c:	81400117 	ldw	r5,4(r16)
    2260:	013ffe04 	movi	r4,-8
    2264:	b0bffd04 	addi	r2,r22,-12
    2268:	1104703a 	and	r2,r2,r4
    226c:	2900004c 	andi	r4,r5,1
    2270:	2088b03a 	or	r4,r4,r2
    2274:	81000115 	stw	r4,4(r16)
    2278:	01400144 	movi	r5,5
    227c:	8089883a 	add	r4,r16,r2
    2280:	21400115 	stw	r5,4(r4)
    2284:	21400215 	stw	r5,8(r4)
    2288:	3080cd36 	bltu	r6,r2,25c0 <_malloc_r+0x794>
    228c:	00800074 	movhi	r2,1
    2290:	108f9504 	addi	r2,r2,15956
    2294:	11000017 	ldw	r4,0(r2)
    2298:	20c0012e 	bgeu	r4,r3,22a0 <_malloc_r+0x474>
    229c:	10c00015 	stw	r3,0(r2)
    22a0:	00800074 	movhi	r2,1
    22a4:	108f9404 	addi	r2,r2,15952
    22a8:	11000017 	ldw	r4,0(r2)
    22ac:	9c000217 	ldw	r16,8(r19)
    22b0:	20c0012e 	bgeu	r4,r3,22b8 <_malloc_r+0x48c>
    22b4:	10c00015 	stw	r3,0(r2)
    22b8:	80c00117 	ldw	r3,4(r16)
    22bc:	00bfff04 	movi	r2,-4
    22c0:	1886703a 	and	r3,r3,r2
    22c4:	1c45c83a 	sub	r2,r3,r17
    22c8:	1c400236 	bltu	r3,r17,22d4 <_malloc_r+0x4a8>
    22cc:	00c003c4 	movi	r3,15
    22d0:	18800416 	blt	r3,r2,22e4 <_malloc_r+0x4b8>
    22d4:	9009883a 	mov	r4,r18
    22d8:	000eab80 	call	eab8 <__malloc_unlock>
    22dc:	0005883a 	mov	r2,zero
    22e0:	003f7b06 	br	20d0 <__alt_data_end+0xff0020d0>
    22e4:	88c00054 	ori	r3,r17,1
    22e8:	80c00115 	stw	r3,4(r16)
    22ec:	8463883a 	add	r17,r16,r17
    22f0:	10800054 	ori	r2,r2,1
    22f4:	9c400215 	stw	r17,8(r19)
    22f8:	88800115 	stw	r2,4(r17)
    22fc:	9009883a 	mov	r4,r18
    2300:	000eab80 	call	eab8 <__malloc_unlock>
    2304:	80800204 	addi	r2,r16,8
    2308:	003f7106 	br	20d0 <__alt_data_end+0xff0020d0>
    230c:	00c00504 	movi	r3,20
    2310:	18804a2e 	bgeu	r3,r2,243c <_malloc_r+0x610>
    2314:	00c01504 	movi	r3,84
    2318:	18806e36 	bltu	r3,r2,24d4 <_malloc_r+0x6a8>
    231c:	8804d33a 	srli	r2,r17,12
    2320:	12001bc4 	addi	r8,r2,111
    2324:	11c01b84 	addi	r7,r2,110
    2328:	4209883a 	add	r4,r8,r8
    232c:	003edd06 	br	1ea4 <__alt_data_end+0xff001ea4>
    2330:	3804d27a 	srli	r2,r7,9
    2334:	00c00104 	movi	r3,4
    2338:	1880442e 	bgeu	r3,r2,244c <_malloc_r+0x620>
    233c:	00c00504 	movi	r3,20
    2340:	18808136 	bltu	r3,r2,2548 <_malloc_r+0x71c>
    2344:	11401704 	addi	r5,r2,92
    2348:	10c016c4 	addi	r3,r2,91
    234c:	294b883a 	add	r5,r5,r5
    2350:	294b883a 	add	r5,r5,r5
    2354:	294b883a 	add	r5,r5,r5
    2358:	994b883a 	add	r5,r19,r5
    235c:	28800017 	ldw	r2,0(r5)
    2360:	01800074 	movhi	r6,1
    2364:	297ffe04 	addi	r5,r5,-8
    2368:	31821004 	addi	r6,r6,2112
    236c:	28806526 	beq	r5,r2,2504 <_malloc_r+0x6d8>
    2370:	01bfff04 	movi	r6,-4
    2374:	10c00117 	ldw	r3,4(r2)
    2378:	1986703a 	and	r3,r3,r6
    237c:	38c0022e 	bgeu	r7,r3,2388 <_malloc_r+0x55c>
    2380:	10800217 	ldw	r2,8(r2)
    2384:	28bffb1e 	bne	r5,r2,2374 <__alt_data_end+0xff002374>
    2388:	11400317 	ldw	r5,12(r2)
    238c:	98c00117 	ldw	r3,4(r19)
    2390:	81400315 	stw	r5,12(r16)
    2394:	80800215 	stw	r2,8(r16)
    2398:	2c000215 	stw	r16,8(r5)
    239c:	14000315 	stw	r16,12(r2)
    23a0:	003ef806 	br	1f84 <__alt_data_end+0xff001f84>
    23a4:	88c00054 	ori	r3,r17,1
    23a8:	80c00115 	stw	r3,4(r16)
    23ac:	8463883a 	add	r17,r16,r17
    23b0:	34400515 	stw	r17,20(r6)
    23b4:	34400415 	stw	r17,16(r6)
    23b8:	10c00054 	ori	r3,r2,1
    23bc:	8a000315 	stw	r8,12(r17)
    23c0:	8a000215 	stw	r8,8(r17)
    23c4:	88c00115 	stw	r3,4(r17)
    23c8:	88a3883a 	add	r17,r17,r2
    23cc:	88800015 	stw	r2,0(r17)
    23d0:	9009883a 	mov	r4,r18
    23d4:	000eab80 	call	eab8 <__malloc_unlock>
    23d8:	80800204 	addi	r2,r16,8
    23dc:	003f3c06 	br	20d0 <__alt_data_end+0xff0020d0>
    23e0:	30c00117 	ldw	r3,4(r6)
    23e4:	003ee706 	br	1f84 <__alt_data_end+0xff001f84>
    23e8:	5ac00044 	addi	r11,r11,1
    23ec:	588000cc 	andi	r2,r11,3
    23f0:	31800204 	addi	r6,r6,8
    23f4:	103efd1e 	bne	r2,zero,1fec <__alt_data_end+0xff001fec>
    23f8:	00002406 	br	248c <_malloc_r+0x660>
    23fc:	14000317 	ldw	r16,12(r2)
    2400:	143f251e 	bne	r2,r16,2098 <__alt_data_end+0xff002098>
    2404:	21000084 	addi	r4,r4,2
    2408:	003ebc06 	br	1efc <__alt_data_end+0xff001efc>
    240c:	8085883a 	add	r2,r16,r2
    2410:	10c00117 	ldw	r3,4(r2)
    2414:	81000317 	ldw	r4,12(r16)
    2418:	81400217 	ldw	r5,8(r16)
    241c:	18c00054 	ori	r3,r3,1
    2420:	10c00115 	stw	r3,4(r2)
    2424:	29000315 	stw	r4,12(r5)
    2428:	21400215 	stw	r5,8(r4)
    242c:	9009883a 	mov	r4,r18
    2430:	000eab80 	call	eab8 <__malloc_unlock>
    2434:	80800204 	addi	r2,r16,8
    2438:	003f2506 	br	20d0 <__alt_data_end+0xff0020d0>
    243c:	12001704 	addi	r8,r2,92
    2440:	11c016c4 	addi	r7,r2,91
    2444:	4209883a 	add	r4,r8,r8
    2448:	003e9606 	br	1ea4 <__alt_data_end+0xff001ea4>
    244c:	3804d1ba 	srli	r2,r7,6
    2450:	11400e44 	addi	r5,r2,57
    2454:	10c00e04 	addi	r3,r2,56
    2458:	294b883a 	add	r5,r5,r5
    245c:	003fbc06 	br	2350 <__alt_data_end+0xff002350>
    2460:	84ff5926 	beq	r16,r19,21c8 <__alt_data_end+0xff0021c8>
    2464:	00800074 	movhi	r2,1
    2468:	10821004 	addi	r2,r2,2112
    246c:	14000217 	ldw	r16,8(r2)
    2470:	00bfff04 	movi	r2,-4
    2474:	80c00117 	ldw	r3,4(r16)
    2478:	1886703a 	and	r3,r3,r2
    247c:	003f9106 	br	22c4 <__alt_data_end+0xff0022c4>
    2480:	60800217 	ldw	r2,8(r12)
    2484:	213fffc4 	addi	r4,r4,-1
    2488:	1300651e 	bne	r2,r12,2620 <_malloc_r+0x7f4>
    248c:	208000cc 	andi	r2,r4,3
    2490:	633ffe04 	addi	r12,r12,-8
    2494:	103ffa1e 	bne	r2,zero,2480 <__alt_data_end+0xff002480>
    2498:	98800117 	ldw	r2,4(r19)
    249c:	0146303a 	nor	r3,zero,r5
    24a0:	1884703a 	and	r2,r3,r2
    24a4:	98800115 	stw	r2,4(r19)
    24a8:	294b883a 	add	r5,r5,r5
    24ac:	117f2836 	bltu	r2,r5,2150 <__alt_data_end+0xff002150>
    24b0:	283f2726 	beq	r5,zero,2150 <__alt_data_end+0xff002150>
    24b4:	2886703a 	and	r3,r5,r2
    24b8:	5809883a 	mov	r4,r11
    24bc:	183ec31e 	bne	r3,zero,1fcc <__alt_data_end+0xff001fcc>
    24c0:	294b883a 	add	r5,r5,r5
    24c4:	2886703a 	and	r3,r5,r2
    24c8:	21000104 	addi	r4,r4,4
    24cc:	183ffc26 	beq	r3,zero,24c0 <__alt_data_end+0xff0024c0>
    24d0:	003ebe06 	br	1fcc <__alt_data_end+0xff001fcc>
    24d4:	00c05504 	movi	r3,340
    24d8:	18801236 	bltu	r3,r2,2524 <_malloc_r+0x6f8>
    24dc:	8804d3fa 	srli	r2,r17,15
    24e0:	12001e04 	addi	r8,r2,120
    24e4:	11c01dc4 	addi	r7,r2,119
    24e8:	4209883a 	add	r4,r8,r8
    24ec:	003e6d06 	br	1ea4 <__alt_data_end+0xff001ea4>
    24f0:	00c40004 	movi	r3,4096
    24f4:	003f4606 	br	2210 <__alt_data_end+0xff002210>
    24f8:	00800044 	movi	r2,1
    24fc:	a0800115 	stw	r2,4(r20)
    2500:	003f7406 	br	22d4 <__alt_data_end+0xff0022d4>
    2504:	1805d0ba 	srai	r2,r3,2
    2508:	01c00044 	movi	r7,1
    250c:	30c00117 	ldw	r3,4(r6)
    2510:	388e983a 	sll	r7,r7,r2
    2514:	2805883a 	mov	r2,r5
    2518:	38c6b03a 	or	r3,r7,r3
    251c:	30c00115 	stw	r3,4(r6)
    2520:	003f9b06 	br	2390 <__alt_data_end+0xff002390>
    2524:	00c15504 	movi	r3,1364
    2528:	18801a36 	bltu	r3,r2,2594 <_malloc_r+0x768>
    252c:	8804d4ba 	srli	r2,r17,18
    2530:	12001f44 	addi	r8,r2,125
    2534:	11c01f04 	addi	r7,r2,124
    2538:	4209883a 	add	r4,r8,r8
    253c:	003e5906 	br	1ea4 <__alt_data_end+0xff001ea4>
    2540:	ad400404 	addi	r21,r21,16
    2544:	003f1706 	br	21a4 <__alt_data_end+0xff0021a4>
    2548:	00c01504 	movi	r3,84
    254c:	18802336 	bltu	r3,r2,25dc <_malloc_r+0x7b0>
    2550:	3804d33a 	srli	r2,r7,12
    2554:	11401bc4 	addi	r5,r2,111
    2558:	10c01b84 	addi	r3,r2,110
    255c:	294b883a 	add	r5,r5,r5
    2560:	003f7b06 	br	2350 <__alt_data_end+0xff002350>
    2564:	9c000217 	ldw	r16,8(r19)
    2568:	00bfff04 	movi	r2,-4
    256c:	80c00117 	ldw	r3,4(r16)
    2570:	1886703a 	and	r3,r3,r2
    2574:	003f5306 	br	22c4 <__alt_data_end+0xff0022c4>
    2578:	3083ffcc 	andi	r2,r6,4095
    257c:	103f181e 	bne	r2,zero,21e0 <__alt_data_end+0xff0021e0>
    2580:	99000217 	ldw	r4,8(r19)
    2584:	b545883a 	add	r2,r22,r21
    2588:	10800054 	ori	r2,r2,1
    258c:	20800115 	stw	r2,4(r4)
    2590:	003f3e06 	br	228c <__alt_data_end+0xff00228c>
    2594:	01003f84 	movi	r4,254
    2598:	02001fc4 	movi	r8,127
    259c:	01c01f84 	movi	r7,126
    25a0:	003e4006 	br	1ea4 <__alt_data_end+0xff001ea4>
    25a4:	00800074 	movhi	r2,1
    25a8:	1088bd04 	addi	r2,r2,8948
    25ac:	15000015 	stw	r20,0(r2)
    25b0:	003f1106 	br	21f8 <__alt_data_end+0xff0021f8>
    25b4:	00800044 	movi	r2,1
    25b8:	002b883a 	mov	r21,zero
    25bc:	003f1f06 	br	223c <__alt_data_end+0xff00223c>
    25c0:	81400204 	addi	r5,r16,8
    25c4:	9009883a 	mov	r4,r18
    25c8:	0006c7c0 	call	6c7c <_free_r>
    25cc:	00800074 	movhi	r2,1
    25d0:	108fa404 	addi	r2,r2,16016
    25d4:	10c00017 	ldw	r3,0(r2)
    25d8:	003f2c06 	br	228c <__alt_data_end+0xff00228c>
    25dc:	00c05504 	movi	r3,340
    25e0:	18800536 	bltu	r3,r2,25f8 <_malloc_r+0x7cc>
    25e4:	3804d3fa 	srli	r2,r7,15
    25e8:	11401e04 	addi	r5,r2,120
    25ec:	10c01dc4 	addi	r3,r2,119
    25f0:	294b883a 	add	r5,r5,r5
    25f4:	003f5606 	br	2350 <__alt_data_end+0xff002350>
    25f8:	00c15504 	movi	r3,1364
    25fc:	18800536 	bltu	r3,r2,2614 <_malloc_r+0x7e8>
    2600:	3804d4ba 	srli	r2,r7,18
    2604:	11401f44 	addi	r5,r2,125
    2608:	10c01f04 	addi	r3,r2,124
    260c:	294b883a 	add	r5,r5,r5
    2610:	003f4f06 	br	2350 <__alt_data_end+0xff002350>
    2614:	01403f84 	movi	r5,254
    2618:	00c01f84 	movi	r3,126
    261c:	003f4c06 	br	2350 <__alt_data_end+0xff002350>
    2620:	98800117 	ldw	r2,4(r19)
    2624:	003fa006 	br	24a8 <__alt_data_end+0xff0024a8>
    2628:	8808d0fa 	srli	r4,r17,3
    262c:	20800044 	addi	r2,r4,1
    2630:	1085883a 	add	r2,r2,r2
    2634:	003e9006 	br	2078 <__alt_data_end+0xff002078>

00002638 <_printf_r>:
    2638:	defffd04 	addi	sp,sp,-12
    263c:	2805883a 	mov	r2,r5
    2640:	dfc00015 	stw	ra,0(sp)
    2644:	d9800115 	stw	r6,4(sp)
    2648:	d9c00215 	stw	r7,8(sp)
    264c:	21400217 	ldw	r5,8(r4)
    2650:	d9c00104 	addi	r7,sp,4
    2654:	100d883a 	mov	r6,r2
    2658:	00028640 	call	2864 <___vfprintf_internal_r>
    265c:	dfc00017 	ldw	ra,0(sp)
    2660:	dec00304 	addi	sp,sp,12
    2664:	f800283a 	ret

00002668 <printf>:
    2668:	defffc04 	addi	sp,sp,-16
    266c:	dfc00015 	stw	ra,0(sp)
    2670:	d9400115 	stw	r5,4(sp)
    2674:	d9800215 	stw	r6,8(sp)
    2678:	d9c00315 	stw	r7,12(sp)
    267c:	00800074 	movhi	r2,1
    2680:	1088c004 	addi	r2,r2,8960
    2684:	10800017 	ldw	r2,0(r2)
    2688:	200b883a 	mov	r5,r4
    268c:	d9800104 	addi	r6,sp,4
    2690:	11000217 	ldw	r4,8(r2)
    2694:	0004a5c0 	call	4a5c <__vfprintf_internal>
    2698:	dfc00017 	ldw	ra,0(sp)
    269c:	dec00404 	addi	sp,sp,16
    26a0:	f800283a 	ret

000026a4 <_puts_r>:
    26a4:	defff604 	addi	sp,sp,-40
    26a8:	dc000715 	stw	r16,28(sp)
    26ac:	2021883a 	mov	r16,r4
    26b0:	2809883a 	mov	r4,r5
    26b4:	dc400815 	stw	r17,32(sp)
    26b8:	dfc00915 	stw	ra,36(sp)
    26bc:	2823883a 	mov	r17,r5
    26c0:	00027cc0 	call	27cc <strlen>
    26c4:	10c00044 	addi	r3,r2,1
    26c8:	d8800115 	stw	r2,4(sp)
    26cc:	00800074 	movhi	r2,1
    26d0:	10815604 	addi	r2,r2,1368
    26d4:	d8800215 	stw	r2,8(sp)
    26d8:	00800044 	movi	r2,1
    26dc:	d8800315 	stw	r2,12(sp)
    26e0:	00800084 	movi	r2,2
    26e4:	dc400015 	stw	r17,0(sp)
    26e8:	d8c00615 	stw	r3,24(sp)
    26ec:	dec00415 	stw	sp,16(sp)
    26f0:	d8800515 	stw	r2,20(sp)
    26f4:	80000226 	beq	r16,zero,2700 <_puts_r+0x5c>
    26f8:	80800e17 	ldw	r2,56(r16)
    26fc:	10001426 	beq	r2,zero,2750 <_puts_r+0xac>
    2700:	81400217 	ldw	r5,8(r16)
    2704:	2880030b 	ldhu	r2,12(r5)
    2708:	10c8000c 	andi	r3,r2,8192
    270c:	1800061e 	bne	r3,zero,2728 <_puts_r+0x84>
    2710:	29001917 	ldw	r4,100(r5)
    2714:	00f7ffc4 	movi	r3,-8193
    2718:	10880014 	ori	r2,r2,8192
    271c:	20c6703a 	and	r3,r4,r3
    2720:	2880030d 	sth	r2,12(r5)
    2724:	28c01915 	stw	r3,100(r5)
    2728:	d9800404 	addi	r6,sp,16
    272c:	8009883a 	mov	r4,r16
    2730:	0006f8c0 	call	6f8c <__sfvwrite_r>
    2734:	1000091e 	bne	r2,zero,275c <_puts_r+0xb8>
    2738:	00800284 	movi	r2,10
    273c:	dfc00917 	ldw	ra,36(sp)
    2740:	dc400817 	ldw	r17,32(sp)
    2744:	dc000717 	ldw	r16,28(sp)
    2748:	dec00a04 	addi	sp,sp,40
    274c:	f800283a 	ret
    2750:	8009883a 	mov	r4,r16
    2754:	0006b080 	call	6b08 <__sinit>
    2758:	003fe906 	br	2700 <__alt_data_end+0xff002700>
    275c:	00bfffc4 	movi	r2,-1
    2760:	003ff606 	br	273c <__alt_data_end+0xff00273c>

00002764 <puts>:
    2764:	00800074 	movhi	r2,1
    2768:	1088c004 	addi	r2,r2,8960
    276c:	200b883a 	mov	r5,r4
    2770:	11000017 	ldw	r4,0(r2)
    2774:	00026a41 	jmpi	26a4 <_puts_r>

00002778 <_sbrk_r>:
    2778:	defffd04 	addi	sp,sp,-12
    277c:	dc000015 	stw	r16,0(sp)
    2780:	04000074 	movhi	r16,1
    2784:	dc400115 	stw	r17,4(sp)
    2788:	840f9704 	addi	r16,r16,15964
    278c:	2023883a 	mov	r17,r4
    2790:	2809883a 	mov	r4,r5
    2794:	dfc00215 	stw	ra,8(sp)
    2798:	80000015 	stw	zero,0(r16)
    279c:	000eba80 	call	eba8 <sbrk>
    27a0:	00ffffc4 	movi	r3,-1
    27a4:	10c00526 	beq	r2,r3,27bc <_sbrk_r+0x44>
    27a8:	dfc00217 	ldw	ra,8(sp)
    27ac:	dc400117 	ldw	r17,4(sp)
    27b0:	dc000017 	ldw	r16,0(sp)
    27b4:	dec00304 	addi	sp,sp,12
    27b8:	f800283a 	ret
    27bc:	80c00017 	ldw	r3,0(r16)
    27c0:	183ff926 	beq	r3,zero,27a8 <__alt_data_end+0xff0027a8>
    27c4:	88c00015 	stw	r3,0(r17)
    27c8:	003ff706 	br	27a8 <__alt_data_end+0xff0027a8>

000027cc <strlen>:
    27cc:	208000cc 	andi	r2,r4,3
    27d0:	10002026 	beq	r2,zero,2854 <strlen+0x88>
    27d4:	20800007 	ldb	r2,0(r4)
    27d8:	10002026 	beq	r2,zero,285c <strlen+0x90>
    27dc:	2005883a 	mov	r2,r4
    27e0:	00000206 	br	27ec <strlen+0x20>
    27e4:	10c00007 	ldb	r3,0(r2)
    27e8:	18001826 	beq	r3,zero,284c <strlen+0x80>
    27ec:	10800044 	addi	r2,r2,1
    27f0:	10c000cc 	andi	r3,r2,3
    27f4:	183ffb1e 	bne	r3,zero,27e4 <__alt_data_end+0xff0027e4>
    27f8:	10c00017 	ldw	r3,0(r2)
    27fc:	01ffbff4 	movhi	r7,65279
    2800:	39ffbfc4 	addi	r7,r7,-257
    2804:	00ca303a 	nor	r5,zero,r3
    2808:	01a02074 	movhi	r6,32897
    280c:	19c7883a 	add	r3,r3,r7
    2810:	31a02004 	addi	r6,r6,-32640
    2814:	1946703a 	and	r3,r3,r5
    2818:	1986703a 	and	r3,r3,r6
    281c:	1800091e 	bne	r3,zero,2844 <strlen+0x78>
    2820:	10800104 	addi	r2,r2,4
    2824:	10c00017 	ldw	r3,0(r2)
    2828:	19cb883a 	add	r5,r3,r7
    282c:	00c6303a 	nor	r3,zero,r3
    2830:	28c6703a 	and	r3,r5,r3
    2834:	1986703a 	and	r3,r3,r6
    2838:	183ff926 	beq	r3,zero,2820 <__alt_data_end+0xff002820>
    283c:	00000106 	br	2844 <strlen+0x78>
    2840:	10800044 	addi	r2,r2,1
    2844:	10c00007 	ldb	r3,0(r2)
    2848:	183ffd1e 	bne	r3,zero,2840 <__alt_data_end+0xff002840>
    284c:	1105c83a 	sub	r2,r2,r4
    2850:	f800283a 	ret
    2854:	2005883a 	mov	r2,r4
    2858:	003fe706 	br	27f8 <__alt_data_end+0xff0027f8>
    285c:	0005883a 	mov	r2,zero
    2860:	f800283a 	ret

00002864 <___vfprintf_internal_r>:
    2864:	deffb804 	addi	sp,sp,-288
    2868:	dfc04715 	stw	ra,284(sp)
    286c:	ddc04515 	stw	r23,276(sp)
    2870:	dd404315 	stw	r21,268(sp)
    2874:	d9002c15 	stw	r4,176(sp)
    2878:	282f883a 	mov	r23,r5
    287c:	302b883a 	mov	r21,r6
    2880:	d9c02d15 	stw	r7,180(sp)
    2884:	df004615 	stw	fp,280(sp)
    2888:	dd804415 	stw	r22,272(sp)
    288c:	dd004215 	stw	r20,264(sp)
    2890:	dcc04115 	stw	r19,260(sp)
    2894:	dc804015 	stw	r18,256(sp)
    2898:	dc403f15 	stw	r17,252(sp)
    289c:	dc003e15 	stw	r16,248(sp)
    28a0:	000767c0 	call	767c <_localeconv_r>
    28a4:	10800017 	ldw	r2,0(r2)
    28a8:	1009883a 	mov	r4,r2
    28ac:	d8803415 	stw	r2,208(sp)
    28b0:	00027cc0 	call	27cc <strlen>
    28b4:	d8803715 	stw	r2,220(sp)
    28b8:	d8802c17 	ldw	r2,176(sp)
    28bc:	10000226 	beq	r2,zero,28c8 <___vfprintf_internal_r+0x64>
    28c0:	10800e17 	ldw	r2,56(r2)
    28c4:	1000f926 	beq	r2,zero,2cac <___vfprintf_internal_r+0x448>
    28c8:	b880030b 	ldhu	r2,12(r23)
    28cc:	10c8000c 	andi	r3,r2,8192
    28d0:	1800061e 	bne	r3,zero,28ec <___vfprintf_internal_r+0x88>
    28d4:	b9001917 	ldw	r4,100(r23)
    28d8:	00f7ffc4 	movi	r3,-8193
    28dc:	10880014 	ori	r2,r2,8192
    28e0:	20c6703a 	and	r3,r4,r3
    28e4:	b880030d 	sth	r2,12(r23)
    28e8:	b8c01915 	stw	r3,100(r23)
    28ec:	10c0020c 	andi	r3,r2,8
    28f0:	1800c126 	beq	r3,zero,2bf8 <___vfprintf_internal_r+0x394>
    28f4:	b8c00417 	ldw	r3,16(r23)
    28f8:	1800bf26 	beq	r3,zero,2bf8 <___vfprintf_internal_r+0x394>
    28fc:	1080068c 	andi	r2,r2,26
    2900:	00c00284 	movi	r3,10
    2904:	10c0c426 	beq	r2,r3,2c18 <___vfprintf_internal_r+0x3b4>
    2908:	d8c00404 	addi	r3,sp,16
    290c:	05000074 	movhi	r20,1
    2910:	d9001e04 	addi	r4,sp,120
    2914:	a5016784 	addi	r20,r20,1438
    2918:	d8c01e15 	stw	r3,120(sp)
    291c:	d8002015 	stw	zero,128(sp)
    2920:	d8001f15 	stw	zero,124(sp)
    2924:	d8003315 	stw	zero,204(sp)
    2928:	d8003615 	stw	zero,216(sp)
    292c:	d8003815 	stw	zero,224(sp)
    2930:	1811883a 	mov	r8,r3
    2934:	d8003915 	stw	zero,228(sp)
    2938:	d8003a15 	stw	zero,232(sp)
    293c:	d8002f15 	stw	zero,188(sp)
    2940:	d9002815 	stw	r4,160(sp)
    2944:	a8800007 	ldb	r2,0(r21)
    2948:	10027b26 	beq	r2,zero,3338 <___vfprintf_internal_r+0xad4>
    294c:	00c00944 	movi	r3,37
    2950:	a821883a 	mov	r16,r21
    2954:	10c0021e 	bne	r2,r3,2960 <___vfprintf_internal_r+0xfc>
    2958:	00001406 	br	29ac <___vfprintf_internal_r+0x148>
    295c:	10c00326 	beq	r2,r3,296c <___vfprintf_internal_r+0x108>
    2960:	84000044 	addi	r16,r16,1
    2964:	80800007 	ldb	r2,0(r16)
    2968:	103ffc1e 	bne	r2,zero,295c <__alt_data_end+0xff00295c>
    296c:	8563c83a 	sub	r17,r16,r21
    2970:	88000e26 	beq	r17,zero,29ac <___vfprintf_internal_r+0x148>
    2974:	d8c02017 	ldw	r3,128(sp)
    2978:	d8801f17 	ldw	r2,124(sp)
    297c:	45400015 	stw	r21,0(r8)
    2980:	1c47883a 	add	r3,r3,r17
    2984:	10800044 	addi	r2,r2,1
    2988:	d8c02015 	stw	r3,128(sp)
    298c:	44400115 	stw	r17,4(r8)
    2990:	d8801f15 	stw	r2,124(sp)
    2994:	00c001c4 	movi	r3,7
    2998:	1880a716 	blt	r3,r2,2c38 <___vfprintf_internal_r+0x3d4>
    299c:	42000204 	addi	r8,r8,8
    29a0:	d9402f17 	ldw	r5,188(sp)
    29a4:	2c4b883a 	add	r5,r5,r17
    29a8:	d9402f15 	stw	r5,188(sp)
    29ac:	80800007 	ldb	r2,0(r16)
    29b0:	1000a826 	beq	r2,zero,2c54 <___vfprintf_internal_r+0x3f0>
    29b4:	84400047 	ldb	r17,1(r16)
    29b8:	00bfffc4 	movi	r2,-1
    29bc:	85400044 	addi	r21,r16,1
    29c0:	d8002785 	stb	zero,158(sp)
    29c4:	0007883a 	mov	r3,zero
    29c8:	000f883a 	mov	r7,zero
    29cc:	d8802915 	stw	r2,164(sp)
    29d0:	d8003115 	stw	zero,196(sp)
    29d4:	0025883a 	mov	r18,zero
    29d8:	01401604 	movi	r5,88
    29dc:	01800244 	movi	r6,9
    29e0:	02800a84 	movi	r10,42
    29e4:	02401b04 	movi	r9,108
    29e8:	ad400044 	addi	r21,r21,1
    29ec:	88bff804 	addi	r2,r17,-32
    29f0:	28830436 	bltu	r5,r2,3604 <___vfprintf_internal_r+0xda0>
    29f4:	100490ba 	slli	r2,r2,2
    29f8:	01000034 	movhi	r4,0
    29fc:	210a8304 	addi	r4,r4,10764
    2a00:	1105883a 	add	r2,r2,r4
    2a04:	10800017 	ldw	r2,0(r2)
    2a08:	1000683a 	jmp	r2
    2a0c:	00003524 	muli	zero,zero,212
    2a10:	00003604 	movi	zero,216
    2a14:	00003604 	movi	zero,216
    2a18:	00003544 	movi	zero,213
    2a1c:	00003604 	movi	zero,216
    2a20:	00003604 	movi	zero,216
    2a24:	00003604 	movi	zero,216
    2a28:	00003604 	movi	zero,216
    2a2c:	00003604 	movi	zero,216
    2a30:	00003604 	movi	zero,216
    2a34:	00002cb8 	rdprs	zero,zero,178
    2a38:	00003460 	cmpeqi	zero,zero,209
    2a3c:	00003604 	movi	zero,216
    2a40:	00002b80 	call	2b8 <init_camera+0xf0>
    2a44:	00002ce0 	cmpeqi	zero,zero,179
    2a48:	00003604 	movi	zero,216
    2a4c:	00002d20 	cmpeqi	zero,zero,180
    2a50:	00002d2c 	andhi	zero,zero,180
    2a54:	00002d2c 	andhi	zero,zero,180
    2a58:	00002d2c 	andhi	zero,zero,180
    2a5c:	00002d2c 	andhi	zero,zero,180
    2a60:	00002d2c 	andhi	zero,zero,180
    2a64:	00002d2c 	andhi	zero,zero,180
    2a68:	00002d2c 	andhi	zero,zero,180
    2a6c:	00002d2c 	andhi	zero,zero,180
    2a70:	00002d2c 	andhi	zero,zero,180
    2a74:	00003604 	movi	zero,216
    2a78:	00003604 	movi	zero,216
    2a7c:	00003604 	movi	zero,216
    2a80:	00003604 	movi	zero,216
    2a84:	00003604 	movi	zero,216
    2a88:	00003604 	movi	zero,216
    2a8c:	00003604 	movi	zero,216
    2a90:	00003604 	movi	zero,216
    2a94:	00003604 	movi	zero,216
    2a98:	00003604 	movi	zero,216
    2a9c:	00002d60 	cmpeqi	zero,zero,181
    2aa0:	00002e1c 	xori	zero,zero,184
    2aa4:	00003604 	movi	zero,216
    2aa8:	00002e1c 	xori	zero,zero,184
    2aac:	00003604 	movi	zero,216
    2ab0:	00003604 	movi	zero,216
    2ab4:	00003604 	movi	zero,216
    2ab8:	00003604 	movi	zero,216
    2abc:	00002ebc 	xorhi	zero,zero,186
    2ac0:	00003604 	movi	zero,216
    2ac4:	00003604 	movi	zero,216
    2ac8:	00002ec8 	cmpgei	zero,zero,187
    2acc:	00003604 	movi	zero,216
    2ad0:	00003604 	movi	zero,216
    2ad4:	00003604 	movi	zero,216
    2ad8:	00003604 	movi	zero,216
    2adc:	00003604 	movi	zero,216
    2ae0:	00003340 	call	334 <init_camera+0x16c>
    2ae4:	00003604 	movi	zero,216
    2ae8:	00003604 	movi	zero,216
    2aec:	000033a0 	cmpeqi	zero,zero,206
    2af0:	00003604 	movi	zero,216
    2af4:	00003604 	movi	zero,216
    2af8:	00003604 	movi	zero,216
    2afc:	00003604 	movi	zero,216
    2b00:	00003604 	movi	zero,216
    2b04:	00003604 	movi	zero,216
    2b08:	00003604 	movi	zero,216
    2b0c:	00003604 	movi	zero,216
    2b10:	00003604 	movi	zero,216
    2b14:	00003604 	movi	zero,216
    2b18:	000035b0 	cmpltui	zero,zero,214
    2b1c:	00003550 	cmplti	zero,zero,213
    2b20:	00002e1c 	xori	zero,zero,184
    2b24:	00002e1c 	xori	zero,zero,184
    2b28:	00002e1c 	xori	zero,zero,184
    2b2c:	00003560 	cmpeqi	zero,zero,213
    2b30:	00003550 	cmplti	zero,zero,213
    2b34:	00003604 	movi	zero,216
    2b38:	00003604 	movi	zero,216
    2b3c:	0000356c 	andhi	zero,zero,213
    2b40:	00003604 	movi	zero,216
    2b44:	0000357c 	xorhi	zero,zero,213
    2b48:	00003450 	cmplti	zero,zero,209
    2b4c:	00002b8c 	andi	zero,zero,174
    2b50:	00003470 	cmpltui	zero,zero,209
    2b54:	00003604 	movi	zero,216
    2b58:	0000347c 	xorhi	zero,zero,209
    2b5c:	00003604 	movi	zero,216
    2b60:	000034d8 	cmpnei	zero,zero,211
    2b64:	00003604 	movi	zero,216
    2b68:	00003604 	movi	zero,216
    2b6c:	000034e8 	cmpgeui	zero,zero,211
    2b70:	d9003117 	ldw	r4,196(sp)
    2b74:	d8802d15 	stw	r2,180(sp)
    2b78:	0109c83a 	sub	r4,zero,r4
    2b7c:	d9003115 	stw	r4,196(sp)
    2b80:	94800114 	ori	r18,r18,4
    2b84:	ac400007 	ldb	r17,0(r21)
    2b88:	003f9706 	br	29e8 <__alt_data_end+0xff0029e8>
    2b8c:	00800c04 	movi	r2,48
    2b90:	d9002d17 	ldw	r4,180(sp)
    2b94:	d9402917 	ldw	r5,164(sp)
    2b98:	d8802705 	stb	r2,156(sp)
    2b9c:	00801e04 	movi	r2,120
    2ba0:	d8802745 	stb	r2,157(sp)
    2ba4:	d8002785 	stb	zero,158(sp)
    2ba8:	20c00104 	addi	r3,r4,4
    2bac:	24c00017 	ldw	r19,0(r4)
    2bb0:	002d883a 	mov	r22,zero
    2bb4:	90800094 	ori	r2,r18,2
    2bb8:	28029a16 	blt	r5,zero,3624 <___vfprintf_internal_r+0xdc0>
    2bbc:	00bfdfc4 	movi	r2,-129
    2bc0:	90a4703a 	and	r18,r18,r2
    2bc4:	d8c02d15 	stw	r3,180(sp)
    2bc8:	94800094 	ori	r18,r18,2
    2bcc:	9802871e 	bne	r19,zero,35ec <___vfprintf_internal_r+0xd88>
    2bd0:	00800074 	movhi	r2,1
    2bd4:	10816004 	addi	r2,r2,1408
    2bd8:	d8803915 	stw	r2,228(sp)
    2bdc:	04401e04 	movi	r17,120
    2be0:	d8802917 	ldw	r2,164(sp)
    2be4:	0039883a 	mov	fp,zero
    2be8:	1001e926 	beq	r2,zero,3390 <___vfprintf_internal_r+0xb2c>
    2bec:	0027883a 	mov	r19,zero
    2bf0:	002d883a 	mov	r22,zero
    2bf4:	00020506 	br	340c <___vfprintf_internal_r+0xba8>
    2bf8:	d9002c17 	ldw	r4,176(sp)
    2bfc:	b80b883a 	mov	r5,r23
    2c00:	0004b340 	call	4b34 <__swsetup_r>
    2c04:	1005ac1e 	bne	r2,zero,42b8 <___vfprintf_internal_r+0x1a54>
    2c08:	b880030b 	ldhu	r2,12(r23)
    2c0c:	00c00284 	movi	r3,10
    2c10:	1080068c 	andi	r2,r2,26
    2c14:	10ff3c1e 	bne	r2,r3,2908 <__alt_data_end+0xff002908>
    2c18:	b880038f 	ldh	r2,14(r23)
    2c1c:	103f3a16 	blt	r2,zero,2908 <__alt_data_end+0xff002908>
    2c20:	d9c02d17 	ldw	r7,180(sp)
    2c24:	d9002c17 	ldw	r4,176(sp)
    2c28:	a80d883a 	mov	r6,r21
    2c2c:	b80b883a 	mov	r5,r23
    2c30:	0004a780 	call	4a78 <__sbprintf>
    2c34:	00001106 	br	2c7c <___vfprintf_internal_r+0x418>
    2c38:	d9002c17 	ldw	r4,176(sp)
    2c3c:	d9801e04 	addi	r6,sp,120
    2c40:	b80b883a 	mov	r5,r23
    2c44:	00096000 	call	9600 <__sprint_r>
    2c48:	1000081e 	bne	r2,zero,2c6c <___vfprintf_internal_r+0x408>
    2c4c:	da000404 	addi	r8,sp,16
    2c50:	003f5306 	br	29a0 <__alt_data_end+0xff0029a0>
    2c54:	d8802017 	ldw	r2,128(sp)
    2c58:	10000426 	beq	r2,zero,2c6c <___vfprintf_internal_r+0x408>
    2c5c:	d9002c17 	ldw	r4,176(sp)
    2c60:	d9801e04 	addi	r6,sp,120
    2c64:	b80b883a 	mov	r5,r23
    2c68:	00096000 	call	9600 <__sprint_r>
    2c6c:	b880030b 	ldhu	r2,12(r23)
    2c70:	1080100c 	andi	r2,r2,64
    2c74:	1005901e 	bne	r2,zero,42b8 <___vfprintf_internal_r+0x1a54>
    2c78:	d8802f17 	ldw	r2,188(sp)
    2c7c:	dfc04717 	ldw	ra,284(sp)
    2c80:	df004617 	ldw	fp,280(sp)
    2c84:	ddc04517 	ldw	r23,276(sp)
    2c88:	dd804417 	ldw	r22,272(sp)
    2c8c:	dd404317 	ldw	r21,268(sp)
    2c90:	dd004217 	ldw	r20,264(sp)
    2c94:	dcc04117 	ldw	r19,260(sp)
    2c98:	dc804017 	ldw	r18,256(sp)
    2c9c:	dc403f17 	ldw	r17,252(sp)
    2ca0:	dc003e17 	ldw	r16,248(sp)
    2ca4:	dec04804 	addi	sp,sp,288
    2ca8:	f800283a 	ret
    2cac:	d9002c17 	ldw	r4,176(sp)
    2cb0:	0006b080 	call	6b08 <__sinit>
    2cb4:	003f0406 	br	28c8 <__alt_data_end+0xff0028c8>
    2cb8:	d8802d17 	ldw	r2,180(sp)
    2cbc:	d9002d17 	ldw	r4,180(sp)
    2cc0:	10800017 	ldw	r2,0(r2)
    2cc4:	d8803115 	stw	r2,196(sp)
    2cc8:	20800104 	addi	r2,r4,4
    2ccc:	d9003117 	ldw	r4,196(sp)
    2cd0:	203fa716 	blt	r4,zero,2b70 <__alt_data_end+0xff002b70>
    2cd4:	d8802d15 	stw	r2,180(sp)
    2cd8:	ac400007 	ldb	r17,0(r21)
    2cdc:	003f4206 	br	29e8 <__alt_data_end+0xff0029e8>
    2ce0:	ac400007 	ldb	r17,0(r21)
    2ce4:	aac00044 	addi	r11,r21,1
    2ce8:	8a872826 	beq	r17,r10,498c <___vfprintf_internal_r+0x2128>
    2cec:	88bff404 	addi	r2,r17,-48
    2cf0:	0009883a 	mov	r4,zero
    2cf4:	30867d36 	bltu	r6,r2,46ec <___vfprintf_internal_r+0x1e88>
    2cf8:	5c400007 	ldb	r17,0(r11)
    2cfc:	210002a4 	muli	r4,r4,10
    2d00:	5d400044 	addi	r21,r11,1
    2d04:	a817883a 	mov	r11,r21
    2d08:	2089883a 	add	r4,r4,r2
    2d0c:	88bff404 	addi	r2,r17,-48
    2d10:	30bff92e 	bgeu	r6,r2,2cf8 <__alt_data_end+0xff002cf8>
    2d14:	2005c916 	blt	r4,zero,443c <___vfprintf_internal_r+0x1bd8>
    2d18:	d9002915 	stw	r4,164(sp)
    2d1c:	003f3306 	br	29ec <__alt_data_end+0xff0029ec>
    2d20:	94802014 	ori	r18,r18,128
    2d24:	ac400007 	ldb	r17,0(r21)
    2d28:	003f2f06 	br	29e8 <__alt_data_end+0xff0029e8>
    2d2c:	a809883a 	mov	r4,r21
    2d30:	d8003115 	stw	zero,196(sp)
    2d34:	88bff404 	addi	r2,r17,-48
    2d38:	0017883a 	mov	r11,zero
    2d3c:	24400007 	ldb	r17,0(r4)
    2d40:	5ac002a4 	muli	r11,r11,10
    2d44:	ad400044 	addi	r21,r21,1
    2d48:	a809883a 	mov	r4,r21
    2d4c:	12d7883a 	add	r11,r2,r11
    2d50:	88bff404 	addi	r2,r17,-48
    2d54:	30bff92e 	bgeu	r6,r2,2d3c <__alt_data_end+0xff002d3c>
    2d58:	dac03115 	stw	r11,196(sp)
    2d5c:	003f2306 	br	29ec <__alt_data_end+0xff0029ec>
    2d60:	18c03fcc 	andi	r3,r3,255
    2d64:	18072b1e 	bne	r3,zero,4a14 <___vfprintf_internal_r+0x21b0>
    2d68:	94800414 	ori	r18,r18,16
    2d6c:	9080080c 	andi	r2,r18,32
    2d70:	10037b26 	beq	r2,zero,3b60 <___vfprintf_internal_r+0x12fc>
    2d74:	d9402d17 	ldw	r5,180(sp)
    2d78:	28800117 	ldw	r2,4(r5)
    2d7c:	2cc00017 	ldw	r19,0(r5)
    2d80:	29400204 	addi	r5,r5,8
    2d84:	d9402d15 	stw	r5,180(sp)
    2d88:	102d883a 	mov	r22,r2
    2d8c:	10044b16 	blt	r2,zero,3ebc <___vfprintf_internal_r+0x1658>
    2d90:	d9402917 	ldw	r5,164(sp)
    2d94:	df002783 	ldbu	fp,158(sp)
    2d98:	2803bc16 	blt	r5,zero,3c8c <___vfprintf_internal_r+0x1428>
    2d9c:	00ffdfc4 	movi	r3,-129
    2da0:	9d84b03a 	or	r2,r19,r22
    2da4:	90e4703a 	and	r18,r18,r3
    2da8:	10017726 	beq	r2,zero,3388 <___vfprintf_internal_r+0xb24>
    2dac:	b0038326 	beq	r22,zero,3bbc <___vfprintf_internal_r+0x1358>
    2db0:	dc402a15 	stw	r17,168(sp)
    2db4:	dc001e04 	addi	r16,sp,120
    2db8:	b023883a 	mov	r17,r22
    2dbc:	402d883a 	mov	r22,r8
    2dc0:	9809883a 	mov	r4,r19
    2dc4:	880b883a 	mov	r5,r17
    2dc8:	01800284 	movi	r6,10
    2dcc:	000f883a 	mov	r7,zero
    2dd0:	000b9f80 	call	b9f8 <__umoddi3>
    2dd4:	10800c04 	addi	r2,r2,48
    2dd8:	843fffc4 	addi	r16,r16,-1
    2ddc:	9809883a 	mov	r4,r19
    2de0:	880b883a 	mov	r5,r17
    2de4:	80800005 	stb	r2,0(r16)
    2de8:	01800284 	movi	r6,10
    2dec:	000f883a 	mov	r7,zero
    2df0:	000b4800 	call	b480 <__udivdi3>
    2df4:	1027883a 	mov	r19,r2
    2df8:	10c4b03a 	or	r2,r2,r3
    2dfc:	1823883a 	mov	r17,r3
    2e00:	103fef1e 	bne	r2,zero,2dc0 <__alt_data_end+0xff002dc0>
    2e04:	d8c02817 	ldw	r3,160(sp)
    2e08:	dc402a17 	ldw	r17,168(sp)
    2e0c:	b011883a 	mov	r8,r22
    2e10:	1c07c83a 	sub	r3,r3,r16
    2e14:	d8c02e15 	stw	r3,184(sp)
    2e18:	00005906 	br	2f80 <___vfprintf_internal_r+0x71c>
    2e1c:	18c03fcc 	andi	r3,r3,255
    2e20:	1806fa1e 	bne	r3,zero,4a0c <___vfprintf_internal_r+0x21a8>
    2e24:	9080020c 	andi	r2,r18,8
    2e28:	10048a26 	beq	r2,zero,4054 <___vfprintf_internal_r+0x17f0>
    2e2c:	d8c02d17 	ldw	r3,180(sp)
    2e30:	d9002d17 	ldw	r4,180(sp)
    2e34:	d9402d17 	ldw	r5,180(sp)
    2e38:	18c00017 	ldw	r3,0(r3)
    2e3c:	21000117 	ldw	r4,4(r4)
    2e40:	29400204 	addi	r5,r5,8
    2e44:	d8c03615 	stw	r3,216(sp)
    2e48:	d9003815 	stw	r4,224(sp)
    2e4c:	d9402d15 	stw	r5,180(sp)
    2e50:	d9003617 	ldw	r4,216(sp)
    2e54:	d9403817 	ldw	r5,224(sp)
    2e58:	da003d15 	stw	r8,244(sp)
    2e5c:	04000044 	movi	r16,1
    2e60:	00092780 	call	9278 <__fpclassifyd>
    2e64:	da003d17 	ldw	r8,244(sp)
    2e68:	14041f1e 	bne	r2,r16,3ee8 <___vfprintf_internal_r+0x1684>
    2e6c:	d9003617 	ldw	r4,216(sp)
    2e70:	d9403817 	ldw	r5,224(sp)
    2e74:	000d883a 	mov	r6,zero
    2e78:	000f883a 	mov	r7,zero
    2e7c:	000d3dc0 	call	d3dc <__ledf2>
    2e80:	da003d17 	ldw	r8,244(sp)
    2e84:	1005be16 	blt	r2,zero,4580 <___vfprintf_internal_r+0x1d1c>
    2e88:	df002783 	ldbu	fp,158(sp)
    2e8c:	008011c4 	movi	r2,71
    2e90:	1445330e 	bge	r2,r17,4360 <___vfprintf_internal_r+0x1afc>
    2e94:	04000074 	movhi	r16,1
    2e98:	84015804 	addi	r16,r16,1376
    2e9c:	00c000c4 	movi	r3,3
    2ea0:	00bfdfc4 	movi	r2,-129
    2ea4:	d8c02a15 	stw	r3,168(sp)
    2ea8:	90a4703a 	and	r18,r18,r2
    2eac:	d8c02e15 	stw	r3,184(sp)
    2eb0:	d8002915 	stw	zero,164(sp)
    2eb4:	d8003215 	stw	zero,200(sp)
    2eb8:	00003706 	br	2f98 <___vfprintf_internal_r+0x734>
    2ebc:	94800214 	ori	r18,r18,8
    2ec0:	ac400007 	ldb	r17,0(r21)
    2ec4:	003ec806 	br	29e8 <__alt_data_end+0xff0029e8>
    2ec8:	18c03fcc 	andi	r3,r3,255
    2ecc:	1806db1e 	bne	r3,zero,4a3c <___vfprintf_internal_r+0x21d8>
    2ed0:	94800414 	ori	r18,r18,16
    2ed4:	9080080c 	andi	r2,r18,32
    2ed8:	1002d826 	beq	r2,zero,3a3c <___vfprintf_internal_r+0x11d8>
    2edc:	d9402d17 	ldw	r5,180(sp)
    2ee0:	d8c02917 	ldw	r3,164(sp)
    2ee4:	d8002785 	stb	zero,158(sp)
    2ee8:	28800204 	addi	r2,r5,8
    2eec:	2cc00017 	ldw	r19,0(r5)
    2ef0:	2d800117 	ldw	r22,4(r5)
    2ef4:	18048f16 	blt	r3,zero,4134 <___vfprintf_internal_r+0x18d0>
    2ef8:	013fdfc4 	movi	r4,-129
    2efc:	9d86b03a 	or	r3,r19,r22
    2f00:	d8802d15 	stw	r2,180(sp)
    2f04:	9124703a 	and	r18,r18,r4
    2f08:	1802d91e 	bne	r3,zero,3a70 <___vfprintf_internal_r+0x120c>
    2f0c:	d8c02917 	ldw	r3,164(sp)
    2f10:	0039883a 	mov	fp,zero
    2f14:	1805c326 	beq	r3,zero,4624 <___vfprintf_internal_r+0x1dc0>
    2f18:	0027883a 	mov	r19,zero
    2f1c:	002d883a 	mov	r22,zero
    2f20:	dc001e04 	addi	r16,sp,120
    2f24:	9806d0fa 	srli	r3,r19,3
    2f28:	b008977a 	slli	r4,r22,29
    2f2c:	b02cd0fa 	srli	r22,r22,3
    2f30:	9cc001cc 	andi	r19,r19,7
    2f34:	98800c04 	addi	r2,r19,48
    2f38:	843fffc4 	addi	r16,r16,-1
    2f3c:	20e6b03a 	or	r19,r4,r3
    2f40:	80800005 	stb	r2,0(r16)
    2f44:	9d86b03a 	or	r3,r19,r22
    2f48:	183ff61e 	bne	r3,zero,2f24 <__alt_data_end+0xff002f24>
    2f4c:	90c0004c 	andi	r3,r18,1
    2f50:	18013b26 	beq	r3,zero,3440 <___vfprintf_internal_r+0xbdc>
    2f54:	10803fcc 	andi	r2,r2,255
    2f58:	1080201c 	xori	r2,r2,128
    2f5c:	10bfe004 	addi	r2,r2,-128
    2f60:	00c00c04 	movi	r3,48
    2f64:	10c13626 	beq	r2,r3,3440 <___vfprintf_internal_r+0xbdc>
    2f68:	80ffffc5 	stb	r3,-1(r16)
    2f6c:	d8c02817 	ldw	r3,160(sp)
    2f70:	80bfffc4 	addi	r2,r16,-1
    2f74:	1021883a 	mov	r16,r2
    2f78:	1887c83a 	sub	r3,r3,r2
    2f7c:	d8c02e15 	stw	r3,184(sp)
    2f80:	d8802e17 	ldw	r2,184(sp)
    2f84:	d9002917 	ldw	r4,164(sp)
    2f88:	1100010e 	bge	r2,r4,2f90 <___vfprintf_internal_r+0x72c>
    2f8c:	2005883a 	mov	r2,r4
    2f90:	d8802a15 	stw	r2,168(sp)
    2f94:	d8003215 	stw	zero,200(sp)
    2f98:	e7003fcc 	andi	fp,fp,255
    2f9c:	e700201c 	xori	fp,fp,128
    2fa0:	e73fe004 	addi	fp,fp,-128
    2fa4:	e0000326 	beq	fp,zero,2fb4 <___vfprintf_internal_r+0x750>
    2fa8:	d8c02a17 	ldw	r3,168(sp)
    2fac:	18c00044 	addi	r3,r3,1
    2fb0:	d8c02a15 	stw	r3,168(sp)
    2fb4:	90c0008c 	andi	r3,r18,2
    2fb8:	d8c02b15 	stw	r3,172(sp)
    2fbc:	18000326 	beq	r3,zero,2fcc <___vfprintf_internal_r+0x768>
    2fc0:	d8c02a17 	ldw	r3,168(sp)
    2fc4:	18c00084 	addi	r3,r3,2
    2fc8:	d8c02a15 	stw	r3,168(sp)
    2fcc:	90c0210c 	andi	r3,r18,132
    2fd0:	d8c03015 	stw	r3,192(sp)
    2fd4:	1801a31e 	bne	r3,zero,3664 <___vfprintf_internal_r+0xe00>
    2fd8:	d9003117 	ldw	r4,196(sp)
    2fdc:	d8c02a17 	ldw	r3,168(sp)
    2fe0:	20e7c83a 	sub	r19,r4,r3
    2fe4:	04c19f0e 	bge	zero,r19,3664 <___vfprintf_internal_r+0xe00>
    2fe8:	02400404 	movi	r9,16
    2fec:	d8c02017 	ldw	r3,128(sp)
    2ff0:	d8801f17 	ldw	r2,124(sp)
    2ff4:	4cc50d0e 	bge	r9,r19,442c <___vfprintf_internal_r+0x1bc8>
    2ff8:	01400074 	movhi	r5,1
    2ffc:	29416b84 	addi	r5,r5,1454
    3000:	dc403b15 	stw	r17,236(sp)
    3004:	d9403515 	stw	r5,212(sp)
    3008:	9823883a 	mov	r17,r19
    300c:	482d883a 	mov	r22,r9
    3010:	9027883a 	mov	r19,r18
    3014:	070001c4 	movi	fp,7
    3018:	8025883a 	mov	r18,r16
    301c:	dc002c17 	ldw	r16,176(sp)
    3020:	00000306 	br	3030 <___vfprintf_internal_r+0x7cc>
    3024:	8c7ffc04 	addi	r17,r17,-16
    3028:	42000204 	addi	r8,r8,8
    302c:	b440130e 	bge	r22,r17,307c <___vfprintf_internal_r+0x818>
    3030:	01000074 	movhi	r4,1
    3034:	18c00404 	addi	r3,r3,16
    3038:	10800044 	addi	r2,r2,1
    303c:	21016b84 	addi	r4,r4,1454
    3040:	41000015 	stw	r4,0(r8)
    3044:	45800115 	stw	r22,4(r8)
    3048:	d8c02015 	stw	r3,128(sp)
    304c:	d8801f15 	stw	r2,124(sp)
    3050:	e0bff40e 	bge	fp,r2,3024 <__alt_data_end+0xff003024>
    3054:	d9801e04 	addi	r6,sp,120
    3058:	b80b883a 	mov	r5,r23
    305c:	8009883a 	mov	r4,r16
    3060:	00096000 	call	9600 <__sprint_r>
    3064:	103f011e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3068:	8c7ffc04 	addi	r17,r17,-16
    306c:	d8c02017 	ldw	r3,128(sp)
    3070:	d8801f17 	ldw	r2,124(sp)
    3074:	da000404 	addi	r8,sp,16
    3078:	b47fed16 	blt	r22,r17,3030 <__alt_data_end+0xff003030>
    307c:	9021883a 	mov	r16,r18
    3080:	9825883a 	mov	r18,r19
    3084:	8827883a 	mov	r19,r17
    3088:	dc403b17 	ldw	r17,236(sp)
    308c:	d9403517 	ldw	r5,212(sp)
    3090:	98c7883a 	add	r3,r19,r3
    3094:	10800044 	addi	r2,r2,1
    3098:	41400015 	stw	r5,0(r8)
    309c:	44c00115 	stw	r19,4(r8)
    30a0:	d8c02015 	stw	r3,128(sp)
    30a4:	d8801f15 	stw	r2,124(sp)
    30a8:	010001c4 	movi	r4,7
    30ac:	2082a316 	blt	r4,r2,3b3c <___vfprintf_internal_r+0x12d8>
    30b0:	df002787 	ldb	fp,158(sp)
    30b4:	42000204 	addi	r8,r8,8
    30b8:	e0000c26 	beq	fp,zero,30ec <___vfprintf_internal_r+0x888>
    30bc:	d8801f17 	ldw	r2,124(sp)
    30c0:	d9002784 	addi	r4,sp,158
    30c4:	18c00044 	addi	r3,r3,1
    30c8:	10800044 	addi	r2,r2,1
    30cc:	41000015 	stw	r4,0(r8)
    30d0:	01000044 	movi	r4,1
    30d4:	41000115 	stw	r4,4(r8)
    30d8:	d8c02015 	stw	r3,128(sp)
    30dc:	d8801f15 	stw	r2,124(sp)
    30e0:	010001c4 	movi	r4,7
    30e4:	20823c16 	blt	r4,r2,39d8 <___vfprintf_internal_r+0x1174>
    30e8:	42000204 	addi	r8,r8,8
    30ec:	d8802b17 	ldw	r2,172(sp)
    30f0:	10000c26 	beq	r2,zero,3124 <___vfprintf_internal_r+0x8c0>
    30f4:	d8801f17 	ldw	r2,124(sp)
    30f8:	d9002704 	addi	r4,sp,156
    30fc:	18c00084 	addi	r3,r3,2
    3100:	10800044 	addi	r2,r2,1
    3104:	41000015 	stw	r4,0(r8)
    3108:	01000084 	movi	r4,2
    310c:	41000115 	stw	r4,4(r8)
    3110:	d8c02015 	stw	r3,128(sp)
    3114:	d8801f15 	stw	r2,124(sp)
    3118:	010001c4 	movi	r4,7
    311c:	20823616 	blt	r4,r2,39f8 <___vfprintf_internal_r+0x1194>
    3120:	42000204 	addi	r8,r8,8
    3124:	d9003017 	ldw	r4,192(sp)
    3128:	00802004 	movi	r2,128
    312c:	20819926 	beq	r4,r2,3794 <___vfprintf_internal_r+0xf30>
    3130:	d9402917 	ldw	r5,164(sp)
    3134:	d8802e17 	ldw	r2,184(sp)
    3138:	28adc83a 	sub	r22,r5,r2
    313c:	0580310e 	bge	zero,r22,3204 <___vfprintf_internal_r+0x9a0>
    3140:	07000404 	movi	fp,16
    3144:	d8801f17 	ldw	r2,124(sp)
    3148:	e584140e 	bge	fp,r22,419c <___vfprintf_internal_r+0x1938>
    314c:	01400074 	movhi	r5,1
    3150:	29416784 	addi	r5,r5,1438
    3154:	dc402915 	stw	r17,164(sp)
    3158:	d9402b15 	stw	r5,172(sp)
    315c:	b023883a 	mov	r17,r22
    3160:	04c001c4 	movi	r19,7
    3164:	a82d883a 	mov	r22,r21
    3168:	902b883a 	mov	r21,r18
    316c:	8025883a 	mov	r18,r16
    3170:	dc002c17 	ldw	r16,176(sp)
    3174:	00000306 	br	3184 <___vfprintf_internal_r+0x920>
    3178:	8c7ffc04 	addi	r17,r17,-16
    317c:	42000204 	addi	r8,r8,8
    3180:	e440110e 	bge	fp,r17,31c8 <___vfprintf_internal_r+0x964>
    3184:	18c00404 	addi	r3,r3,16
    3188:	10800044 	addi	r2,r2,1
    318c:	45000015 	stw	r20,0(r8)
    3190:	47000115 	stw	fp,4(r8)
    3194:	d8c02015 	stw	r3,128(sp)
    3198:	d8801f15 	stw	r2,124(sp)
    319c:	98bff60e 	bge	r19,r2,3178 <__alt_data_end+0xff003178>
    31a0:	d9801e04 	addi	r6,sp,120
    31a4:	b80b883a 	mov	r5,r23
    31a8:	8009883a 	mov	r4,r16
    31ac:	00096000 	call	9600 <__sprint_r>
    31b0:	103eae1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    31b4:	8c7ffc04 	addi	r17,r17,-16
    31b8:	d8c02017 	ldw	r3,128(sp)
    31bc:	d8801f17 	ldw	r2,124(sp)
    31c0:	da000404 	addi	r8,sp,16
    31c4:	e47fef16 	blt	fp,r17,3184 <__alt_data_end+0xff003184>
    31c8:	9021883a 	mov	r16,r18
    31cc:	a825883a 	mov	r18,r21
    31d0:	b02b883a 	mov	r21,r22
    31d4:	882d883a 	mov	r22,r17
    31d8:	dc402917 	ldw	r17,164(sp)
    31dc:	d9002b17 	ldw	r4,172(sp)
    31e0:	1d87883a 	add	r3,r3,r22
    31e4:	10800044 	addi	r2,r2,1
    31e8:	41000015 	stw	r4,0(r8)
    31ec:	45800115 	stw	r22,4(r8)
    31f0:	d8c02015 	stw	r3,128(sp)
    31f4:	d8801f15 	stw	r2,124(sp)
    31f8:	010001c4 	movi	r4,7
    31fc:	2081ee16 	blt	r4,r2,39b8 <___vfprintf_internal_r+0x1154>
    3200:	42000204 	addi	r8,r8,8
    3204:	9080400c 	andi	r2,r18,256
    3208:	1001181e 	bne	r2,zero,366c <___vfprintf_internal_r+0xe08>
    320c:	d9402e17 	ldw	r5,184(sp)
    3210:	d8801f17 	ldw	r2,124(sp)
    3214:	44000015 	stw	r16,0(r8)
    3218:	1947883a 	add	r3,r3,r5
    321c:	10800044 	addi	r2,r2,1
    3220:	41400115 	stw	r5,4(r8)
    3224:	d8c02015 	stw	r3,128(sp)
    3228:	d8801f15 	stw	r2,124(sp)
    322c:	010001c4 	movi	r4,7
    3230:	2081d316 	blt	r4,r2,3980 <___vfprintf_internal_r+0x111c>
    3234:	42000204 	addi	r8,r8,8
    3238:	9480010c 	andi	r18,r18,4
    323c:	90003226 	beq	r18,zero,3308 <___vfprintf_internal_r+0xaa4>
    3240:	d9403117 	ldw	r5,196(sp)
    3244:	d8802a17 	ldw	r2,168(sp)
    3248:	28a1c83a 	sub	r16,r5,r2
    324c:	04002e0e 	bge	zero,r16,3308 <___vfprintf_internal_r+0xaa4>
    3250:	04400404 	movi	r17,16
    3254:	d8801f17 	ldw	r2,124(sp)
    3258:	8c04a20e 	bge	r17,r16,44e4 <___vfprintf_internal_r+0x1c80>
    325c:	01400074 	movhi	r5,1
    3260:	29416b84 	addi	r5,r5,1454
    3264:	d9403515 	stw	r5,212(sp)
    3268:	048001c4 	movi	r18,7
    326c:	dcc02c17 	ldw	r19,176(sp)
    3270:	00000306 	br	3280 <___vfprintf_internal_r+0xa1c>
    3274:	843ffc04 	addi	r16,r16,-16
    3278:	42000204 	addi	r8,r8,8
    327c:	8c00130e 	bge	r17,r16,32cc <___vfprintf_internal_r+0xa68>
    3280:	01000074 	movhi	r4,1
    3284:	18c00404 	addi	r3,r3,16
    3288:	10800044 	addi	r2,r2,1
    328c:	21016b84 	addi	r4,r4,1454
    3290:	41000015 	stw	r4,0(r8)
    3294:	44400115 	stw	r17,4(r8)
    3298:	d8c02015 	stw	r3,128(sp)
    329c:	d8801f15 	stw	r2,124(sp)
    32a0:	90bff40e 	bge	r18,r2,3274 <__alt_data_end+0xff003274>
    32a4:	d9801e04 	addi	r6,sp,120
    32a8:	b80b883a 	mov	r5,r23
    32ac:	9809883a 	mov	r4,r19
    32b0:	00096000 	call	9600 <__sprint_r>
    32b4:	103e6d1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    32b8:	843ffc04 	addi	r16,r16,-16
    32bc:	d8c02017 	ldw	r3,128(sp)
    32c0:	d8801f17 	ldw	r2,124(sp)
    32c4:	da000404 	addi	r8,sp,16
    32c8:	8c3fed16 	blt	r17,r16,3280 <__alt_data_end+0xff003280>
    32cc:	d9403517 	ldw	r5,212(sp)
    32d0:	1c07883a 	add	r3,r3,r16
    32d4:	10800044 	addi	r2,r2,1
    32d8:	41400015 	stw	r5,0(r8)
    32dc:	44000115 	stw	r16,4(r8)
    32e0:	d8c02015 	stw	r3,128(sp)
    32e4:	d8801f15 	stw	r2,124(sp)
    32e8:	010001c4 	movi	r4,7
    32ec:	2080060e 	bge	r4,r2,3308 <___vfprintf_internal_r+0xaa4>
    32f0:	d9002c17 	ldw	r4,176(sp)
    32f4:	d9801e04 	addi	r6,sp,120
    32f8:	b80b883a 	mov	r5,r23
    32fc:	00096000 	call	9600 <__sprint_r>
    3300:	103e5a1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3304:	d8c02017 	ldw	r3,128(sp)
    3308:	d8803117 	ldw	r2,196(sp)
    330c:	d9002a17 	ldw	r4,168(sp)
    3310:	1100010e 	bge	r2,r4,3318 <___vfprintf_internal_r+0xab4>
    3314:	2005883a 	mov	r2,r4
    3318:	d9402f17 	ldw	r5,188(sp)
    331c:	288b883a 	add	r5,r5,r2
    3320:	d9402f15 	stw	r5,188(sp)
    3324:	18019e1e 	bne	r3,zero,39a0 <___vfprintf_internal_r+0x113c>
    3328:	a8800007 	ldb	r2,0(r21)
    332c:	d8001f15 	stw	zero,124(sp)
    3330:	da000404 	addi	r8,sp,16
    3334:	103d851e 	bne	r2,zero,294c <__alt_data_end+0xff00294c>
    3338:	a821883a 	mov	r16,r21
    333c:	003d9b06 	br	29ac <__alt_data_end+0xff0029ac>
    3340:	18c03fcc 	andi	r3,r3,255
    3344:	1805c11e 	bne	r3,zero,4a4c <___vfprintf_internal_r+0x21e8>
    3348:	94800414 	ori	r18,r18,16
    334c:	9080080c 	andi	r2,r18,32
    3350:	10020c26 	beq	r2,zero,3b84 <___vfprintf_internal_r+0x1320>
    3354:	d8802d17 	ldw	r2,180(sp)
    3358:	d9002917 	ldw	r4,164(sp)
    335c:	d8002785 	stb	zero,158(sp)
    3360:	10c00204 	addi	r3,r2,8
    3364:	14c00017 	ldw	r19,0(r2)
    3368:	15800117 	ldw	r22,4(r2)
    336c:	20040f16 	blt	r4,zero,43ac <___vfprintf_internal_r+0x1b48>
    3370:	013fdfc4 	movi	r4,-129
    3374:	9d84b03a 	or	r2,r19,r22
    3378:	d8c02d15 	stw	r3,180(sp)
    337c:	9124703a 	and	r18,r18,r4
    3380:	0039883a 	mov	fp,zero
    3384:	103e891e 	bne	r2,zero,2dac <__alt_data_end+0xff002dac>
    3388:	d9002917 	ldw	r4,164(sp)
    338c:	2002c11e 	bne	r4,zero,3e94 <___vfprintf_internal_r+0x1630>
    3390:	d8002915 	stw	zero,164(sp)
    3394:	d8002e15 	stw	zero,184(sp)
    3398:	dc001e04 	addi	r16,sp,120
    339c:	003ef806 	br	2f80 <__alt_data_end+0xff002f80>
    33a0:	18c03fcc 	andi	r3,r3,255
    33a4:	18059d1e 	bne	r3,zero,4a1c <___vfprintf_internal_r+0x21b8>
    33a8:	01400074 	movhi	r5,1
    33ac:	29415b04 	addi	r5,r5,1388
    33b0:	d9403915 	stw	r5,228(sp)
    33b4:	9080080c 	andi	r2,r18,32
    33b8:	10005226 	beq	r2,zero,3504 <___vfprintf_internal_r+0xca0>
    33bc:	d8802d17 	ldw	r2,180(sp)
    33c0:	14c00017 	ldw	r19,0(r2)
    33c4:	15800117 	ldw	r22,4(r2)
    33c8:	10800204 	addi	r2,r2,8
    33cc:	d8802d15 	stw	r2,180(sp)
    33d0:	9080004c 	andi	r2,r18,1
    33d4:	10019026 	beq	r2,zero,3a18 <___vfprintf_internal_r+0x11b4>
    33d8:	9d84b03a 	or	r2,r19,r22
    33dc:	10036926 	beq	r2,zero,4184 <___vfprintf_internal_r+0x1920>
    33e0:	d8c02917 	ldw	r3,164(sp)
    33e4:	00800c04 	movi	r2,48
    33e8:	d8802705 	stb	r2,156(sp)
    33ec:	dc402745 	stb	r17,157(sp)
    33f0:	d8002785 	stb	zero,158(sp)
    33f4:	90800094 	ori	r2,r18,2
    33f8:	18045d16 	blt	r3,zero,4570 <___vfprintf_internal_r+0x1d0c>
    33fc:	00bfdfc4 	movi	r2,-129
    3400:	90a4703a 	and	r18,r18,r2
    3404:	94800094 	ori	r18,r18,2
    3408:	0039883a 	mov	fp,zero
    340c:	d9003917 	ldw	r4,228(sp)
    3410:	dc001e04 	addi	r16,sp,120
    3414:	988003cc 	andi	r2,r19,15
    3418:	b006973a 	slli	r3,r22,28
    341c:	2085883a 	add	r2,r4,r2
    3420:	9826d13a 	srli	r19,r19,4
    3424:	10800003 	ldbu	r2,0(r2)
    3428:	b02cd13a 	srli	r22,r22,4
    342c:	843fffc4 	addi	r16,r16,-1
    3430:	1ce6b03a 	or	r19,r3,r19
    3434:	80800005 	stb	r2,0(r16)
    3438:	9d84b03a 	or	r2,r19,r22
    343c:	103ff51e 	bne	r2,zero,3414 <__alt_data_end+0xff003414>
    3440:	d8c02817 	ldw	r3,160(sp)
    3444:	1c07c83a 	sub	r3,r3,r16
    3448:	d8c02e15 	stw	r3,184(sp)
    344c:	003ecc06 	br	2f80 <__alt_data_end+0xff002f80>
    3450:	18c03fcc 	andi	r3,r3,255
    3454:	183e9f26 	beq	r3,zero,2ed4 <__alt_data_end+0xff002ed4>
    3458:	d9c02785 	stb	r7,158(sp)
    345c:	003e9d06 	br	2ed4 <__alt_data_end+0xff002ed4>
    3460:	00c00044 	movi	r3,1
    3464:	01c00ac4 	movi	r7,43
    3468:	ac400007 	ldb	r17,0(r21)
    346c:	003d5e06 	br	29e8 <__alt_data_end+0xff0029e8>
    3470:	94800814 	ori	r18,r18,32
    3474:	ac400007 	ldb	r17,0(r21)
    3478:	003d5b06 	br	29e8 <__alt_data_end+0xff0029e8>
    347c:	d8c02d17 	ldw	r3,180(sp)
    3480:	d8002785 	stb	zero,158(sp)
    3484:	1c000017 	ldw	r16,0(r3)
    3488:	1cc00104 	addi	r19,r3,4
    348c:	80041926 	beq	r16,zero,44f4 <___vfprintf_internal_r+0x1c90>
    3490:	d9002917 	ldw	r4,164(sp)
    3494:	2003d016 	blt	r4,zero,43d8 <___vfprintf_internal_r+0x1b74>
    3498:	200d883a 	mov	r6,r4
    349c:	000b883a 	mov	r5,zero
    34a0:	8009883a 	mov	r4,r16
    34a4:	da003d15 	stw	r8,244(sp)
    34a8:	00078680 	call	7868 <memchr>
    34ac:	da003d17 	ldw	r8,244(sp)
    34b0:	10045426 	beq	r2,zero,4604 <___vfprintf_internal_r+0x1da0>
    34b4:	1405c83a 	sub	r2,r2,r16
    34b8:	d8802e15 	stw	r2,184(sp)
    34bc:	1003cc16 	blt	r2,zero,43f0 <___vfprintf_internal_r+0x1b8c>
    34c0:	df002783 	ldbu	fp,158(sp)
    34c4:	d8802a15 	stw	r2,168(sp)
    34c8:	dcc02d15 	stw	r19,180(sp)
    34cc:	d8002915 	stw	zero,164(sp)
    34d0:	d8003215 	stw	zero,200(sp)
    34d4:	003eb006 	br	2f98 <__alt_data_end+0xff002f98>
    34d8:	18c03fcc 	andi	r3,r3,255
    34dc:	183f9b26 	beq	r3,zero,334c <__alt_data_end+0xff00334c>
    34e0:	d9c02785 	stb	r7,158(sp)
    34e4:	003f9906 	br	334c <__alt_data_end+0xff00334c>
    34e8:	18c03fcc 	andi	r3,r3,255
    34ec:	1805551e 	bne	r3,zero,4a44 <___vfprintf_internal_r+0x21e0>
    34f0:	01400074 	movhi	r5,1
    34f4:	29416004 	addi	r5,r5,1408
    34f8:	d9403915 	stw	r5,228(sp)
    34fc:	9080080c 	andi	r2,r18,32
    3500:	103fae1e 	bne	r2,zero,33bc <__alt_data_end+0xff0033bc>
    3504:	9080040c 	andi	r2,r18,16
    3508:	1002de26 	beq	r2,zero,4084 <___vfprintf_internal_r+0x1820>
    350c:	d8c02d17 	ldw	r3,180(sp)
    3510:	002d883a 	mov	r22,zero
    3514:	1cc00017 	ldw	r19,0(r3)
    3518:	18c00104 	addi	r3,r3,4
    351c:	d8c02d15 	stw	r3,180(sp)
    3520:	003fab06 	br	33d0 <__alt_data_end+0xff0033d0>
    3524:	38803fcc 	andi	r2,r7,255
    3528:	1080201c 	xori	r2,r2,128
    352c:	10bfe004 	addi	r2,r2,-128
    3530:	1002d21e 	bne	r2,zero,407c <___vfprintf_internal_r+0x1818>
    3534:	00c00044 	movi	r3,1
    3538:	01c00804 	movi	r7,32
    353c:	ac400007 	ldb	r17,0(r21)
    3540:	003d2906 	br	29e8 <__alt_data_end+0xff0029e8>
    3544:	94800054 	ori	r18,r18,1
    3548:	ac400007 	ldb	r17,0(r21)
    354c:	003d2606 	br	29e8 <__alt_data_end+0xff0029e8>
    3550:	18c03fcc 	andi	r3,r3,255
    3554:	183e0526 	beq	r3,zero,2d6c <__alt_data_end+0xff002d6c>
    3558:	d9c02785 	stb	r7,158(sp)
    355c:	003e0306 	br	2d6c <__alt_data_end+0xff002d6c>
    3560:	94801014 	ori	r18,r18,64
    3564:	ac400007 	ldb	r17,0(r21)
    3568:	003d1f06 	br	29e8 <__alt_data_end+0xff0029e8>
    356c:	ac400007 	ldb	r17,0(r21)
    3570:	8a438726 	beq	r17,r9,4390 <___vfprintf_internal_r+0x1b2c>
    3574:	94800414 	ori	r18,r18,16
    3578:	003d1b06 	br	29e8 <__alt_data_end+0xff0029e8>
    357c:	18c03fcc 	andi	r3,r3,255
    3580:	1805341e 	bne	r3,zero,4a54 <___vfprintf_internal_r+0x21f0>
    3584:	9080080c 	andi	r2,r18,32
    3588:	1002cd26 	beq	r2,zero,40c0 <___vfprintf_internal_r+0x185c>
    358c:	d9402d17 	ldw	r5,180(sp)
    3590:	d9002f17 	ldw	r4,188(sp)
    3594:	28800017 	ldw	r2,0(r5)
    3598:	2007d7fa 	srai	r3,r4,31
    359c:	29400104 	addi	r5,r5,4
    35a0:	d9402d15 	stw	r5,180(sp)
    35a4:	11000015 	stw	r4,0(r2)
    35a8:	10c00115 	stw	r3,4(r2)
    35ac:	003ce506 	br	2944 <__alt_data_end+0xff002944>
    35b0:	d8c02d17 	ldw	r3,180(sp)
    35b4:	d9002d17 	ldw	r4,180(sp)
    35b8:	d8002785 	stb	zero,158(sp)
    35bc:	18800017 	ldw	r2,0(r3)
    35c0:	21000104 	addi	r4,r4,4
    35c4:	00c00044 	movi	r3,1
    35c8:	d8c02a15 	stw	r3,168(sp)
    35cc:	d8801405 	stb	r2,80(sp)
    35d0:	d9002d15 	stw	r4,180(sp)
    35d4:	d8c02e15 	stw	r3,184(sp)
    35d8:	d8002915 	stw	zero,164(sp)
    35dc:	d8003215 	stw	zero,200(sp)
    35e0:	dc001404 	addi	r16,sp,80
    35e4:	0039883a 	mov	fp,zero
    35e8:	003e7206 	br	2fb4 <__alt_data_end+0xff002fb4>
    35ec:	01000074 	movhi	r4,1
    35f0:	21016004 	addi	r4,r4,1408
    35f4:	0039883a 	mov	fp,zero
    35f8:	d9003915 	stw	r4,228(sp)
    35fc:	04401e04 	movi	r17,120
    3600:	003f8206 	br	340c <__alt_data_end+0xff00340c>
    3604:	18c03fcc 	andi	r3,r3,255
    3608:	1805061e 	bne	r3,zero,4a24 <___vfprintf_internal_r+0x21c0>
    360c:	883d9126 	beq	r17,zero,2c54 <__alt_data_end+0xff002c54>
    3610:	00c00044 	movi	r3,1
    3614:	d8c02a15 	stw	r3,168(sp)
    3618:	dc401405 	stb	r17,80(sp)
    361c:	d8002785 	stb	zero,158(sp)
    3620:	003fec06 	br	35d4 <__alt_data_end+0xff0035d4>
    3624:	01400074 	movhi	r5,1
    3628:	29416004 	addi	r5,r5,1408
    362c:	d9403915 	stw	r5,228(sp)
    3630:	d8c02d15 	stw	r3,180(sp)
    3634:	1025883a 	mov	r18,r2
    3638:	04401e04 	movi	r17,120
    363c:	9d84b03a 	or	r2,r19,r22
    3640:	1000fc1e 	bne	r2,zero,3a34 <___vfprintf_internal_r+0x11d0>
    3644:	0039883a 	mov	fp,zero
    3648:	00800084 	movi	r2,2
    364c:	10803fcc 	andi	r2,r2,255
    3650:	00c00044 	movi	r3,1
    3654:	10c20f26 	beq	r2,r3,3e94 <___vfprintf_internal_r+0x1630>
    3658:	00c00084 	movi	r3,2
    365c:	10fd6326 	beq	r2,r3,2bec <__alt_data_end+0xff002bec>
    3660:	003e2d06 	br	2f18 <__alt_data_end+0xff002f18>
    3664:	d8c02017 	ldw	r3,128(sp)
    3668:	003e9306 	br	30b8 <__alt_data_end+0xff0030b8>
    366c:	00801944 	movi	r2,101
    3670:	14407e0e 	bge	r2,r17,386c <___vfprintf_internal_r+0x1008>
    3674:	d9003617 	ldw	r4,216(sp)
    3678:	d9403817 	ldw	r5,224(sp)
    367c:	000d883a 	mov	r6,zero
    3680:	000f883a 	mov	r7,zero
    3684:	d8c03c15 	stw	r3,240(sp)
    3688:	da003d15 	stw	r8,244(sp)
    368c:	000d2780 	call	d278 <__eqdf2>
    3690:	d8c03c17 	ldw	r3,240(sp)
    3694:	da003d17 	ldw	r8,244(sp)
    3698:	1000f71e 	bne	r2,zero,3a78 <___vfprintf_internal_r+0x1214>
    369c:	d8801f17 	ldw	r2,124(sp)
    36a0:	01000074 	movhi	r4,1
    36a4:	21016704 	addi	r4,r4,1436
    36a8:	18c00044 	addi	r3,r3,1
    36ac:	10800044 	addi	r2,r2,1
    36b0:	41000015 	stw	r4,0(r8)
    36b4:	01000044 	movi	r4,1
    36b8:	41000115 	stw	r4,4(r8)
    36bc:	d8c02015 	stw	r3,128(sp)
    36c0:	d8801f15 	stw	r2,124(sp)
    36c4:	010001c4 	movi	r4,7
    36c8:	2082b816 	blt	r4,r2,41ac <___vfprintf_internal_r+0x1948>
    36cc:	42000204 	addi	r8,r8,8
    36d0:	d8802617 	ldw	r2,152(sp)
    36d4:	d9403317 	ldw	r5,204(sp)
    36d8:	11400216 	blt	r2,r5,36e4 <___vfprintf_internal_r+0xe80>
    36dc:	9080004c 	andi	r2,r18,1
    36e0:	103ed526 	beq	r2,zero,3238 <__alt_data_end+0xff003238>
    36e4:	d8803717 	ldw	r2,220(sp)
    36e8:	d9003417 	ldw	r4,208(sp)
    36ec:	d9403717 	ldw	r5,220(sp)
    36f0:	1887883a 	add	r3,r3,r2
    36f4:	d8801f17 	ldw	r2,124(sp)
    36f8:	41000015 	stw	r4,0(r8)
    36fc:	41400115 	stw	r5,4(r8)
    3700:	10800044 	addi	r2,r2,1
    3704:	d8c02015 	stw	r3,128(sp)
    3708:	d8801f15 	stw	r2,124(sp)
    370c:	010001c4 	movi	r4,7
    3710:	20832916 	blt	r4,r2,43b8 <___vfprintf_internal_r+0x1b54>
    3714:	42000204 	addi	r8,r8,8
    3718:	d8803317 	ldw	r2,204(sp)
    371c:	143fffc4 	addi	r16,r2,-1
    3720:	043ec50e 	bge	zero,r16,3238 <__alt_data_end+0xff003238>
    3724:	04400404 	movi	r17,16
    3728:	d8801f17 	ldw	r2,124(sp)
    372c:	8c00880e 	bge	r17,r16,3950 <___vfprintf_internal_r+0x10ec>
    3730:	01400074 	movhi	r5,1
    3734:	29416784 	addi	r5,r5,1438
    3738:	d9402b15 	stw	r5,172(sp)
    373c:	058001c4 	movi	r22,7
    3740:	dcc02c17 	ldw	r19,176(sp)
    3744:	00000306 	br	3754 <___vfprintf_internal_r+0xef0>
    3748:	42000204 	addi	r8,r8,8
    374c:	843ffc04 	addi	r16,r16,-16
    3750:	8c00820e 	bge	r17,r16,395c <___vfprintf_internal_r+0x10f8>
    3754:	18c00404 	addi	r3,r3,16
    3758:	10800044 	addi	r2,r2,1
    375c:	45000015 	stw	r20,0(r8)
    3760:	44400115 	stw	r17,4(r8)
    3764:	d8c02015 	stw	r3,128(sp)
    3768:	d8801f15 	stw	r2,124(sp)
    376c:	b0bff60e 	bge	r22,r2,3748 <__alt_data_end+0xff003748>
    3770:	d9801e04 	addi	r6,sp,120
    3774:	b80b883a 	mov	r5,r23
    3778:	9809883a 	mov	r4,r19
    377c:	00096000 	call	9600 <__sprint_r>
    3780:	103d3a1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3784:	d8c02017 	ldw	r3,128(sp)
    3788:	d8801f17 	ldw	r2,124(sp)
    378c:	da000404 	addi	r8,sp,16
    3790:	003fee06 	br	374c <__alt_data_end+0xff00374c>
    3794:	d9403117 	ldw	r5,196(sp)
    3798:	d8802a17 	ldw	r2,168(sp)
    379c:	28adc83a 	sub	r22,r5,r2
    37a0:	05be630e 	bge	zero,r22,3130 <__alt_data_end+0xff003130>
    37a4:	07000404 	movi	fp,16
    37a8:	d8801f17 	ldw	r2,124(sp)
    37ac:	e5838f0e 	bge	fp,r22,45ec <___vfprintf_internal_r+0x1d88>
    37b0:	01400074 	movhi	r5,1
    37b4:	29416784 	addi	r5,r5,1438
    37b8:	dc403015 	stw	r17,192(sp)
    37bc:	d9402b15 	stw	r5,172(sp)
    37c0:	b023883a 	mov	r17,r22
    37c4:	04c001c4 	movi	r19,7
    37c8:	a82d883a 	mov	r22,r21
    37cc:	902b883a 	mov	r21,r18
    37d0:	8025883a 	mov	r18,r16
    37d4:	dc002c17 	ldw	r16,176(sp)
    37d8:	00000306 	br	37e8 <___vfprintf_internal_r+0xf84>
    37dc:	8c7ffc04 	addi	r17,r17,-16
    37e0:	42000204 	addi	r8,r8,8
    37e4:	e440110e 	bge	fp,r17,382c <___vfprintf_internal_r+0xfc8>
    37e8:	18c00404 	addi	r3,r3,16
    37ec:	10800044 	addi	r2,r2,1
    37f0:	45000015 	stw	r20,0(r8)
    37f4:	47000115 	stw	fp,4(r8)
    37f8:	d8c02015 	stw	r3,128(sp)
    37fc:	d8801f15 	stw	r2,124(sp)
    3800:	98bff60e 	bge	r19,r2,37dc <__alt_data_end+0xff0037dc>
    3804:	d9801e04 	addi	r6,sp,120
    3808:	b80b883a 	mov	r5,r23
    380c:	8009883a 	mov	r4,r16
    3810:	00096000 	call	9600 <__sprint_r>
    3814:	103d151e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3818:	8c7ffc04 	addi	r17,r17,-16
    381c:	d8c02017 	ldw	r3,128(sp)
    3820:	d8801f17 	ldw	r2,124(sp)
    3824:	da000404 	addi	r8,sp,16
    3828:	e47fef16 	blt	fp,r17,37e8 <__alt_data_end+0xff0037e8>
    382c:	9021883a 	mov	r16,r18
    3830:	a825883a 	mov	r18,r21
    3834:	b02b883a 	mov	r21,r22
    3838:	882d883a 	mov	r22,r17
    383c:	dc403017 	ldw	r17,192(sp)
    3840:	d9002b17 	ldw	r4,172(sp)
    3844:	1d87883a 	add	r3,r3,r22
    3848:	10800044 	addi	r2,r2,1
    384c:	41000015 	stw	r4,0(r8)
    3850:	45800115 	stw	r22,4(r8)
    3854:	d8c02015 	stw	r3,128(sp)
    3858:	d8801f15 	stw	r2,124(sp)
    385c:	010001c4 	movi	r4,7
    3860:	20818e16 	blt	r4,r2,3e9c <___vfprintf_internal_r+0x1638>
    3864:	42000204 	addi	r8,r8,8
    3868:	003e3106 	br	3130 <__alt_data_end+0xff003130>
    386c:	d9403317 	ldw	r5,204(sp)
    3870:	00800044 	movi	r2,1
    3874:	18c00044 	addi	r3,r3,1
    3878:	1141530e 	bge	r2,r5,3dc8 <___vfprintf_internal_r+0x1564>
    387c:	dc401f17 	ldw	r17,124(sp)
    3880:	00800044 	movi	r2,1
    3884:	40800115 	stw	r2,4(r8)
    3888:	8c400044 	addi	r17,r17,1
    388c:	44000015 	stw	r16,0(r8)
    3890:	d8c02015 	stw	r3,128(sp)
    3894:	dc401f15 	stw	r17,124(sp)
    3898:	008001c4 	movi	r2,7
    389c:	14416b16 	blt	r2,r17,3e4c <___vfprintf_internal_r+0x15e8>
    38a0:	42000204 	addi	r8,r8,8
    38a4:	d8803717 	ldw	r2,220(sp)
    38a8:	d9003417 	ldw	r4,208(sp)
    38ac:	8c400044 	addi	r17,r17,1
    38b0:	10c7883a 	add	r3,r2,r3
    38b4:	40800115 	stw	r2,4(r8)
    38b8:	41000015 	stw	r4,0(r8)
    38bc:	d8c02015 	stw	r3,128(sp)
    38c0:	dc401f15 	stw	r17,124(sp)
    38c4:	008001c4 	movi	r2,7
    38c8:	14416916 	blt	r2,r17,3e70 <___vfprintf_internal_r+0x160c>
    38cc:	45800204 	addi	r22,r8,8
    38d0:	d9003617 	ldw	r4,216(sp)
    38d4:	d9403817 	ldw	r5,224(sp)
    38d8:	000d883a 	mov	r6,zero
    38dc:	000f883a 	mov	r7,zero
    38e0:	d8c03c15 	stw	r3,240(sp)
    38e4:	000d2780 	call	d278 <__eqdf2>
    38e8:	d8c03c17 	ldw	r3,240(sp)
    38ec:	1000bc26 	beq	r2,zero,3be0 <___vfprintf_internal_r+0x137c>
    38f0:	d9403317 	ldw	r5,204(sp)
    38f4:	84000044 	addi	r16,r16,1
    38f8:	8c400044 	addi	r17,r17,1
    38fc:	28bfffc4 	addi	r2,r5,-1
    3900:	1887883a 	add	r3,r3,r2
    3904:	b0800115 	stw	r2,4(r22)
    3908:	b4000015 	stw	r16,0(r22)
    390c:	d8c02015 	stw	r3,128(sp)
    3910:	dc401f15 	stw	r17,124(sp)
    3914:	008001c4 	movi	r2,7
    3918:	14414316 	blt	r2,r17,3e28 <___vfprintf_internal_r+0x15c4>
    391c:	b5800204 	addi	r22,r22,8
    3920:	d9003a17 	ldw	r4,232(sp)
    3924:	df0022c4 	addi	fp,sp,139
    3928:	8c400044 	addi	r17,r17,1
    392c:	20c7883a 	add	r3,r4,r3
    3930:	b7000015 	stw	fp,0(r22)
    3934:	b1000115 	stw	r4,4(r22)
    3938:	d8c02015 	stw	r3,128(sp)
    393c:	dc401f15 	stw	r17,124(sp)
    3940:	008001c4 	movi	r2,7
    3944:	14400e16 	blt	r2,r17,3980 <___vfprintf_internal_r+0x111c>
    3948:	b2000204 	addi	r8,r22,8
    394c:	003e3a06 	br	3238 <__alt_data_end+0xff003238>
    3950:	01000074 	movhi	r4,1
    3954:	21016784 	addi	r4,r4,1438
    3958:	d9002b15 	stw	r4,172(sp)
    395c:	d9002b17 	ldw	r4,172(sp)
    3960:	1c07883a 	add	r3,r3,r16
    3964:	44000115 	stw	r16,4(r8)
    3968:	41000015 	stw	r4,0(r8)
    396c:	10800044 	addi	r2,r2,1
    3970:	d8c02015 	stw	r3,128(sp)
    3974:	d8801f15 	stw	r2,124(sp)
    3978:	010001c4 	movi	r4,7
    397c:	20be2d0e 	bge	r4,r2,3234 <__alt_data_end+0xff003234>
    3980:	d9002c17 	ldw	r4,176(sp)
    3984:	d9801e04 	addi	r6,sp,120
    3988:	b80b883a 	mov	r5,r23
    398c:	00096000 	call	9600 <__sprint_r>
    3990:	103cb61e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3994:	d8c02017 	ldw	r3,128(sp)
    3998:	da000404 	addi	r8,sp,16
    399c:	003e2606 	br	3238 <__alt_data_end+0xff003238>
    39a0:	d9002c17 	ldw	r4,176(sp)
    39a4:	d9801e04 	addi	r6,sp,120
    39a8:	b80b883a 	mov	r5,r23
    39ac:	00096000 	call	9600 <__sprint_r>
    39b0:	103e5d26 	beq	r2,zero,3328 <__alt_data_end+0xff003328>
    39b4:	003cad06 	br	2c6c <__alt_data_end+0xff002c6c>
    39b8:	d9002c17 	ldw	r4,176(sp)
    39bc:	d9801e04 	addi	r6,sp,120
    39c0:	b80b883a 	mov	r5,r23
    39c4:	00096000 	call	9600 <__sprint_r>
    39c8:	103ca81e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    39cc:	d8c02017 	ldw	r3,128(sp)
    39d0:	da000404 	addi	r8,sp,16
    39d4:	003e0b06 	br	3204 <__alt_data_end+0xff003204>
    39d8:	d9002c17 	ldw	r4,176(sp)
    39dc:	d9801e04 	addi	r6,sp,120
    39e0:	b80b883a 	mov	r5,r23
    39e4:	00096000 	call	9600 <__sprint_r>
    39e8:	103ca01e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    39ec:	d8c02017 	ldw	r3,128(sp)
    39f0:	da000404 	addi	r8,sp,16
    39f4:	003dbd06 	br	30ec <__alt_data_end+0xff0030ec>
    39f8:	d9002c17 	ldw	r4,176(sp)
    39fc:	d9801e04 	addi	r6,sp,120
    3a00:	b80b883a 	mov	r5,r23
    3a04:	00096000 	call	9600 <__sprint_r>
    3a08:	103c981e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3a0c:	d8c02017 	ldw	r3,128(sp)
    3a10:	da000404 	addi	r8,sp,16
    3a14:	003dc306 	br	3124 <__alt_data_end+0xff003124>
    3a18:	d8802917 	ldw	r2,164(sp)
    3a1c:	d8002785 	stb	zero,158(sp)
    3a20:	103f0616 	blt	r2,zero,363c <__alt_data_end+0xff00363c>
    3a24:	00ffdfc4 	movi	r3,-129
    3a28:	9d84b03a 	or	r2,r19,r22
    3a2c:	90e4703a 	and	r18,r18,r3
    3a30:	103c6b26 	beq	r2,zero,2be0 <__alt_data_end+0xff002be0>
    3a34:	0039883a 	mov	fp,zero
    3a38:	003e7406 	br	340c <__alt_data_end+0xff00340c>
    3a3c:	9080040c 	andi	r2,r18,16
    3a40:	1001b326 	beq	r2,zero,4110 <___vfprintf_internal_r+0x18ac>
    3a44:	d9002d17 	ldw	r4,180(sp)
    3a48:	d9402917 	ldw	r5,164(sp)
    3a4c:	d8002785 	stb	zero,158(sp)
    3a50:	20800104 	addi	r2,r4,4
    3a54:	24c00017 	ldw	r19,0(r4)
    3a58:	002d883a 	mov	r22,zero
    3a5c:	2801b516 	blt	r5,zero,4134 <___vfprintf_internal_r+0x18d0>
    3a60:	00ffdfc4 	movi	r3,-129
    3a64:	d8802d15 	stw	r2,180(sp)
    3a68:	90e4703a 	and	r18,r18,r3
    3a6c:	983d2726 	beq	r19,zero,2f0c <__alt_data_end+0xff002f0c>
    3a70:	0039883a 	mov	fp,zero
    3a74:	003d2a06 	br	2f20 <__alt_data_end+0xff002f20>
    3a78:	dc402617 	ldw	r17,152(sp)
    3a7c:	0441d30e 	bge	zero,r17,41cc <___vfprintf_internal_r+0x1968>
    3a80:	dc403217 	ldw	r17,200(sp)
    3a84:	d8803317 	ldw	r2,204(sp)
    3a88:	1440010e 	bge	r2,r17,3a90 <___vfprintf_internal_r+0x122c>
    3a8c:	1023883a 	mov	r17,r2
    3a90:	04400a0e 	bge	zero,r17,3abc <___vfprintf_internal_r+0x1258>
    3a94:	d8801f17 	ldw	r2,124(sp)
    3a98:	1c47883a 	add	r3,r3,r17
    3a9c:	44000015 	stw	r16,0(r8)
    3aa0:	10800044 	addi	r2,r2,1
    3aa4:	44400115 	stw	r17,4(r8)
    3aa8:	d8c02015 	stw	r3,128(sp)
    3aac:	d8801f15 	stw	r2,124(sp)
    3ab0:	010001c4 	movi	r4,7
    3ab4:	20826516 	blt	r4,r2,444c <___vfprintf_internal_r+0x1be8>
    3ab8:	42000204 	addi	r8,r8,8
    3abc:	88026116 	blt	r17,zero,4444 <___vfprintf_internal_r+0x1be0>
    3ac0:	d9003217 	ldw	r4,200(sp)
    3ac4:	2463c83a 	sub	r17,r4,r17
    3ac8:	04407b0e 	bge	zero,r17,3cb8 <___vfprintf_internal_r+0x1454>
    3acc:	05800404 	movi	r22,16
    3ad0:	d8801f17 	ldw	r2,124(sp)
    3ad4:	b4419d0e 	bge	r22,r17,414c <___vfprintf_internal_r+0x18e8>
    3ad8:	01000074 	movhi	r4,1
    3adc:	21016784 	addi	r4,r4,1438
    3ae0:	d9002b15 	stw	r4,172(sp)
    3ae4:	070001c4 	movi	fp,7
    3ae8:	dcc02c17 	ldw	r19,176(sp)
    3aec:	00000306 	br	3afc <___vfprintf_internal_r+0x1298>
    3af0:	42000204 	addi	r8,r8,8
    3af4:	8c7ffc04 	addi	r17,r17,-16
    3af8:	b441970e 	bge	r22,r17,4158 <___vfprintf_internal_r+0x18f4>
    3afc:	18c00404 	addi	r3,r3,16
    3b00:	10800044 	addi	r2,r2,1
    3b04:	45000015 	stw	r20,0(r8)
    3b08:	45800115 	stw	r22,4(r8)
    3b0c:	d8c02015 	stw	r3,128(sp)
    3b10:	d8801f15 	stw	r2,124(sp)
    3b14:	e0bff60e 	bge	fp,r2,3af0 <__alt_data_end+0xff003af0>
    3b18:	d9801e04 	addi	r6,sp,120
    3b1c:	b80b883a 	mov	r5,r23
    3b20:	9809883a 	mov	r4,r19
    3b24:	00096000 	call	9600 <__sprint_r>
    3b28:	103c501e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3b2c:	d8c02017 	ldw	r3,128(sp)
    3b30:	d8801f17 	ldw	r2,124(sp)
    3b34:	da000404 	addi	r8,sp,16
    3b38:	003fee06 	br	3af4 <__alt_data_end+0xff003af4>
    3b3c:	d9002c17 	ldw	r4,176(sp)
    3b40:	d9801e04 	addi	r6,sp,120
    3b44:	b80b883a 	mov	r5,r23
    3b48:	00096000 	call	9600 <__sprint_r>
    3b4c:	103c471e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3b50:	d8c02017 	ldw	r3,128(sp)
    3b54:	df002787 	ldb	fp,158(sp)
    3b58:	da000404 	addi	r8,sp,16
    3b5c:	003d5606 	br	30b8 <__alt_data_end+0xff0030b8>
    3b60:	9080040c 	andi	r2,r18,16
    3b64:	10016126 	beq	r2,zero,40ec <___vfprintf_internal_r+0x1888>
    3b68:	d8802d17 	ldw	r2,180(sp)
    3b6c:	14c00017 	ldw	r19,0(r2)
    3b70:	10800104 	addi	r2,r2,4
    3b74:	d8802d15 	stw	r2,180(sp)
    3b78:	982dd7fa 	srai	r22,r19,31
    3b7c:	b005883a 	mov	r2,r22
    3b80:	003c8206 	br	2d8c <__alt_data_end+0xff002d8c>
    3b84:	9080040c 	andi	r2,r18,16
    3b88:	10003526 	beq	r2,zero,3c60 <___vfprintf_internal_r+0x13fc>
    3b8c:	d9402d17 	ldw	r5,180(sp)
    3b90:	d8c02917 	ldw	r3,164(sp)
    3b94:	d8002785 	stb	zero,158(sp)
    3b98:	28800104 	addi	r2,r5,4
    3b9c:	2cc00017 	ldw	r19,0(r5)
    3ba0:	002d883a 	mov	r22,zero
    3ba4:	18003716 	blt	r3,zero,3c84 <___vfprintf_internal_r+0x1420>
    3ba8:	00ffdfc4 	movi	r3,-129
    3bac:	d8802d15 	stw	r2,180(sp)
    3bb0:	90e4703a 	and	r18,r18,r3
    3bb4:	0039883a 	mov	fp,zero
    3bb8:	983df326 	beq	r19,zero,3388 <__alt_data_end+0xff003388>
    3bbc:	00800244 	movi	r2,9
    3bc0:	14fc7b36 	bltu	r2,r19,2db0 <__alt_data_end+0xff002db0>
    3bc4:	d8c02817 	ldw	r3,160(sp)
    3bc8:	dc001dc4 	addi	r16,sp,119
    3bcc:	9cc00c04 	addi	r19,r19,48
    3bd0:	1c07c83a 	sub	r3,r3,r16
    3bd4:	dcc01dc5 	stb	r19,119(sp)
    3bd8:	d8c02e15 	stw	r3,184(sp)
    3bdc:	003ce806 	br	2f80 <__alt_data_end+0xff002f80>
    3be0:	d8803317 	ldw	r2,204(sp)
    3be4:	143fffc4 	addi	r16,r2,-1
    3be8:	043f4d0e 	bge	zero,r16,3920 <__alt_data_end+0xff003920>
    3bec:	07000404 	movi	fp,16
    3bf0:	e400810e 	bge	fp,r16,3df8 <___vfprintf_internal_r+0x1594>
    3bf4:	01400074 	movhi	r5,1
    3bf8:	29416784 	addi	r5,r5,1438
    3bfc:	d9402b15 	stw	r5,172(sp)
    3c00:	01c001c4 	movi	r7,7
    3c04:	dcc02c17 	ldw	r19,176(sp)
    3c08:	00000306 	br	3c18 <___vfprintf_internal_r+0x13b4>
    3c0c:	b5800204 	addi	r22,r22,8
    3c10:	843ffc04 	addi	r16,r16,-16
    3c14:	e4007b0e 	bge	fp,r16,3e04 <___vfprintf_internal_r+0x15a0>
    3c18:	18c00404 	addi	r3,r3,16
    3c1c:	8c400044 	addi	r17,r17,1
    3c20:	b5000015 	stw	r20,0(r22)
    3c24:	b7000115 	stw	fp,4(r22)
    3c28:	d8c02015 	stw	r3,128(sp)
    3c2c:	dc401f15 	stw	r17,124(sp)
    3c30:	3c7ff60e 	bge	r7,r17,3c0c <__alt_data_end+0xff003c0c>
    3c34:	d9801e04 	addi	r6,sp,120
    3c38:	b80b883a 	mov	r5,r23
    3c3c:	9809883a 	mov	r4,r19
    3c40:	d9c03c15 	stw	r7,240(sp)
    3c44:	00096000 	call	9600 <__sprint_r>
    3c48:	d9c03c17 	ldw	r7,240(sp)
    3c4c:	103c071e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3c50:	d8c02017 	ldw	r3,128(sp)
    3c54:	dc401f17 	ldw	r17,124(sp)
    3c58:	dd800404 	addi	r22,sp,16
    3c5c:	003fec06 	br	3c10 <__alt_data_end+0xff003c10>
    3c60:	9080100c 	andi	r2,r18,64
    3c64:	d8002785 	stb	zero,158(sp)
    3c68:	10010e26 	beq	r2,zero,40a4 <___vfprintf_internal_r+0x1840>
    3c6c:	d9002d17 	ldw	r4,180(sp)
    3c70:	d9402917 	ldw	r5,164(sp)
    3c74:	002d883a 	mov	r22,zero
    3c78:	20800104 	addi	r2,r4,4
    3c7c:	24c0000b 	ldhu	r19,0(r4)
    3c80:	283fc90e 	bge	r5,zero,3ba8 <__alt_data_end+0xff003ba8>
    3c84:	d8802d15 	stw	r2,180(sp)
    3c88:	0039883a 	mov	fp,zero
    3c8c:	9d84b03a 	or	r2,r19,r22
    3c90:	103c461e 	bne	r2,zero,2dac <__alt_data_end+0xff002dac>
    3c94:	00800044 	movi	r2,1
    3c98:	003e6c06 	br	364c <__alt_data_end+0xff00364c>
    3c9c:	d9002c17 	ldw	r4,176(sp)
    3ca0:	d9801e04 	addi	r6,sp,120
    3ca4:	b80b883a 	mov	r5,r23
    3ca8:	00096000 	call	9600 <__sprint_r>
    3cac:	103bef1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3cb0:	d8c02017 	ldw	r3,128(sp)
    3cb4:	da000404 	addi	r8,sp,16
    3cb8:	d9003217 	ldw	r4,200(sp)
    3cbc:	d8802617 	ldw	r2,152(sp)
    3cc0:	d9403317 	ldw	r5,204(sp)
    3cc4:	8123883a 	add	r17,r16,r4
    3cc8:	11400216 	blt	r2,r5,3cd4 <___vfprintf_internal_r+0x1470>
    3ccc:	9100004c 	andi	r4,r18,1
    3cd0:	20000d26 	beq	r4,zero,3d08 <___vfprintf_internal_r+0x14a4>
    3cd4:	d9003717 	ldw	r4,220(sp)
    3cd8:	d9403417 	ldw	r5,208(sp)
    3cdc:	1907883a 	add	r3,r3,r4
    3ce0:	d9001f17 	ldw	r4,124(sp)
    3ce4:	41400015 	stw	r5,0(r8)
    3ce8:	d9403717 	ldw	r5,220(sp)
    3cec:	21000044 	addi	r4,r4,1
    3cf0:	d8c02015 	stw	r3,128(sp)
    3cf4:	41400115 	stw	r5,4(r8)
    3cf8:	d9001f15 	stw	r4,124(sp)
    3cfc:	014001c4 	movi	r5,7
    3d00:	2901e816 	blt	r5,r4,44a4 <___vfprintf_internal_r+0x1c40>
    3d04:	42000204 	addi	r8,r8,8
    3d08:	d9003317 	ldw	r4,204(sp)
    3d0c:	8121883a 	add	r16,r16,r4
    3d10:	2085c83a 	sub	r2,r4,r2
    3d14:	8461c83a 	sub	r16,r16,r17
    3d18:	1400010e 	bge	r2,r16,3d20 <___vfprintf_internal_r+0x14bc>
    3d1c:	1021883a 	mov	r16,r2
    3d20:	04000a0e 	bge	zero,r16,3d4c <___vfprintf_internal_r+0x14e8>
    3d24:	d9001f17 	ldw	r4,124(sp)
    3d28:	1c07883a 	add	r3,r3,r16
    3d2c:	44400015 	stw	r17,0(r8)
    3d30:	21000044 	addi	r4,r4,1
    3d34:	44000115 	stw	r16,4(r8)
    3d38:	d8c02015 	stw	r3,128(sp)
    3d3c:	d9001f15 	stw	r4,124(sp)
    3d40:	014001c4 	movi	r5,7
    3d44:	2901fb16 	blt	r5,r4,4534 <___vfprintf_internal_r+0x1cd0>
    3d48:	42000204 	addi	r8,r8,8
    3d4c:	8001f716 	blt	r16,zero,452c <___vfprintf_internal_r+0x1cc8>
    3d50:	1421c83a 	sub	r16,r2,r16
    3d54:	043d380e 	bge	zero,r16,3238 <__alt_data_end+0xff003238>
    3d58:	04400404 	movi	r17,16
    3d5c:	d8801f17 	ldw	r2,124(sp)
    3d60:	8c3efb0e 	bge	r17,r16,3950 <__alt_data_end+0xff003950>
    3d64:	01400074 	movhi	r5,1
    3d68:	29416784 	addi	r5,r5,1438
    3d6c:	d9402b15 	stw	r5,172(sp)
    3d70:	058001c4 	movi	r22,7
    3d74:	dcc02c17 	ldw	r19,176(sp)
    3d78:	00000306 	br	3d88 <___vfprintf_internal_r+0x1524>
    3d7c:	42000204 	addi	r8,r8,8
    3d80:	843ffc04 	addi	r16,r16,-16
    3d84:	8c3ef50e 	bge	r17,r16,395c <__alt_data_end+0xff00395c>
    3d88:	18c00404 	addi	r3,r3,16
    3d8c:	10800044 	addi	r2,r2,1
    3d90:	45000015 	stw	r20,0(r8)
    3d94:	44400115 	stw	r17,4(r8)
    3d98:	d8c02015 	stw	r3,128(sp)
    3d9c:	d8801f15 	stw	r2,124(sp)
    3da0:	b0bff60e 	bge	r22,r2,3d7c <__alt_data_end+0xff003d7c>
    3da4:	d9801e04 	addi	r6,sp,120
    3da8:	b80b883a 	mov	r5,r23
    3dac:	9809883a 	mov	r4,r19
    3db0:	00096000 	call	9600 <__sprint_r>
    3db4:	103bad1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3db8:	d8c02017 	ldw	r3,128(sp)
    3dbc:	d8801f17 	ldw	r2,124(sp)
    3dc0:	da000404 	addi	r8,sp,16
    3dc4:	003fee06 	br	3d80 <__alt_data_end+0xff003d80>
    3dc8:	9088703a 	and	r4,r18,r2
    3dcc:	203eab1e 	bne	r4,zero,387c <__alt_data_end+0xff00387c>
    3dd0:	dc401f17 	ldw	r17,124(sp)
    3dd4:	40800115 	stw	r2,4(r8)
    3dd8:	44000015 	stw	r16,0(r8)
    3ddc:	8c400044 	addi	r17,r17,1
    3de0:	d8c02015 	stw	r3,128(sp)
    3de4:	dc401f15 	stw	r17,124(sp)
    3de8:	008001c4 	movi	r2,7
    3dec:	14400e16 	blt	r2,r17,3e28 <___vfprintf_internal_r+0x15c4>
    3df0:	45800204 	addi	r22,r8,8
    3df4:	003eca06 	br	3920 <__alt_data_end+0xff003920>
    3df8:	01000074 	movhi	r4,1
    3dfc:	21016784 	addi	r4,r4,1438
    3e00:	d9002b15 	stw	r4,172(sp)
    3e04:	d8802b17 	ldw	r2,172(sp)
    3e08:	1c07883a 	add	r3,r3,r16
    3e0c:	8c400044 	addi	r17,r17,1
    3e10:	b0800015 	stw	r2,0(r22)
    3e14:	b4000115 	stw	r16,4(r22)
    3e18:	d8c02015 	stw	r3,128(sp)
    3e1c:	dc401f15 	stw	r17,124(sp)
    3e20:	008001c4 	movi	r2,7
    3e24:	147ebd0e 	bge	r2,r17,391c <__alt_data_end+0xff00391c>
    3e28:	d9002c17 	ldw	r4,176(sp)
    3e2c:	d9801e04 	addi	r6,sp,120
    3e30:	b80b883a 	mov	r5,r23
    3e34:	00096000 	call	9600 <__sprint_r>
    3e38:	103b8c1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3e3c:	d8c02017 	ldw	r3,128(sp)
    3e40:	dc401f17 	ldw	r17,124(sp)
    3e44:	dd800404 	addi	r22,sp,16
    3e48:	003eb506 	br	3920 <__alt_data_end+0xff003920>
    3e4c:	d9002c17 	ldw	r4,176(sp)
    3e50:	d9801e04 	addi	r6,sp,120
    3e54:	b80b883a 	mov	r5,r23
    3e58:	00096000 	call	9600 <__sprint_r>
    3e5c:	103b831e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3e60:	d8c02017 	ldw	r3,128(sp)
    3e64:	dc401f17 	ldw	r17,124(sp)
    3e68:	da000404 	addi	r8,sp,16
    3e6c:	003e8d06 	br	38a4 <__alt_data_end+0xff0038a4>
    3e70:	d9002c17 	ldw	r4,176(sp)
    3e74:	d9801e04 	addi	r6,sp,120
    3e78:	b80b883a 	mov	r5,r23
    3e7c:	00096000 	call	9600 <__sprint_r>
    3e80:	103b7a1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3e84:	d8c02017 	ldw	r3,128(sp)
    3e88:	dc401f17 	ldw	r17,124(sp)
    3e8c:	dd800404 	addi	r22,sp,16
    3e90:	003e8f06 	br	38d0 <__alt_data_end+0xff0038d0>
    3e94:	0027883a 	mov	r19,zero
    3e98:	003f4a06 	br	3bc4 <__alt_data_end+0xff003bc4>
    3e9c:	d9002c17 	ldw	r4,176(sp)
    3ea0:	d9801e04 	addi	r6,sp,120
    3ea4:	b80b883a 	mov	r5,r23
    3ea8:	00096000 	call	9600 <__sprint_r>
    3eac:	103b6f1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    3eb0:	d8c02017 	ldw	r3,128(sp)
    3eb4:	da000404 	addi	r8,sp,16
    3eb8:	003c9d06 	br	3130 <__alt_data_end+0xff003130>
    3ebc:	04e7c83a 	sub	r19,zero,r19
    3ec0:	9804c03a 	cmpne	r2,r19,zero
    3ec4:	05adc83a 	sub	r22,zero,r22
    3ec8:	b0adc83a 	sub	r22,r22,r2
    3ecc:	d8802917 	ldw	r2,164(sp)
    3ed0:	07000b44 	movi	fp,45
    3ed4:	df002785 	stb	fp,158(sp)
    3ed8:	10017b16 	blt	r2,zero,44c8 <___vfprintf_internal_r+0x1c64>
    3edc:	00bfdfc4 	movi	r2,-129
    3ee0:	90a4703a 	and	r18,r18,r2
    3ee4:	003bb106 	br	2dac <__alt_data_end+0xff002dac>
    3ee8:	d9003617 	ldw	r4,216(sp)
    3eec:	d9403817 	ldw	r5,224(sp)
    3ef0:	da003d15 	stw	r8,244(sp)
    3ef4:	00092780 	call	9278 <__fpclassifyd>
    3ef8:	da003d17 	ldw	r8,244(sp)
    3efc:	1000f026 	beq	r2,zero,42c0 <___vfprintf_internal_r+0x1a5c>
    3f00:	d9002917 	ldw	r4,164(sp)
    3f04:	05bff7c4 	movi	r22,-33
    3f08:	00bfffc4 	movi	r2,-1
    3f0c:	8dac703a 	and	r22,r17,r22
    3f10:	20820026 	beq	r4,r2,4714 <___vfprintf_internal_r+0x1eb0>
    3f14:	008011c4 	movi	r2,71
    3f18:	b081f726 	beq	r22,r2,46f8 <___vfprintf_internal_r+0x1e94>
    3f1c:	d9003817 	ldw	r4,224(sp)
    3f20:	90c04014 	ori	r3,r18,256
    3f24:	d8c02b15 	stw	r3,172(sp)
    3f28:	20021516 	blt	r4,zero,4780 <___vfprintf_internal_r+0x1f1c>
    3f2c:	dcc03817 	ldw	r19,224(sp)
    3f30:	d8002a05 	stb	zero,168(sp)
    3f34:	00801984 	movi	r2,102
    3f38:	8881f926 	beq	r17,r2,4720 <___vfprintf_internal_r+0x1ebc>
    3f3c:	00801184 	movi	r2,70
    3f40:	88821c26 	beq	r17,r2,47b4 <___vfprintf_internal_r+0x1f50>
    3f44:	00801144 	movi	r2,69
    3f48:	b081ef26 	beq	r22,r2,4708 <___vfprintf_internal_r+0x1ea4>
    3f4c:	d8c02917 	ldw	r3,164(sp)
    3f50:	d8802104 	addi	r2,sp,132
    3f54:	d8800315 	stw	r2,12(sp)
    3f58:	d9403617 	ldw	r5,216(sp)
    3f5c:	d8802504 	addi	r2,sp,148
    3f60:	d9002c17 	ldw	r4,176(sp)
    3f64:	d8800215 	stw	r2,8(sp)
    3f68:	d8802604 	addi	r2,sp,152
    3f6c:	d8c00015 	stw	r3,0(sp)
    3f70:	d8800115 	stw	r2,4(sp)
    3f74:	01c00084 	movi	r7,2
    3f78:	980d883a 	mov	r6,r19
    3f7c:	d8c03c15 	stw	r3,240(sp)
    3f80:	da003d15 	stw	r8,244(sp)
    3f84:	0004e880 	call	4e88 <_dtoa_r>
    3f88:	1021883a 	mov	r16,r2
    3f8c:	008019c4 	movi	r2,103
    3f90:	d8c03c17 	ldw	r3,240(sp)
    3f94:	da003d17 	ldw	r8,244(sp)
    3f98:	88817126 	beq	r17,r2,4560 <___vfprintf_internal_r+0x1cfc>
    3f9c:	008011c4 	movi	r2,71
    3fa0:	88829226 	beq	r17,r2,49ec <___vfprintf_internal_r+0x2188>
    3fa4:	80f9883a 	add	fp,r16,r3
    3fa8:	d9003617 	ldw	r4,216(sp)
    3fac:	000d883a 	mov	r6,zero
    3fb0:	000f883a 	mov	r7,zero
    3fb4:	980b883a 	mov	r5,r19
    3fb8:	da003d15 	stw	r8,244(sp)
    3fbc:	000d2780 	call	d278 <__eqdf2>
    3fc0:	da003d17 	ldw	r8,244(sp)
    3fc4:	10018d26 	beq	r2,zero,45fc <___vfprintf_internal_r+0x1d98>
    3fc8:	d8802117 	ldw	r2,132(sp)
    3fcc:	1700062e 	bgeu	r2,fp,3fe8 <___vfprintf_internal_r+0x1784>
    3fd0:	01000c04 	movi	r4,48
    3fd4:	10c00044 	addi	r3,r2,1
    3fd8:	d8c02115 	stw	r3,132(sp)
    3fdc:	11000005 	stb	r4,0(r2)
    3fe0:	d8802117 	ldw	r2,132(sp)
    3fe4:	173ffb36 	bltu	r2,fp,3fd4 <__alt_data_end+0xff003fd4>
    3fe8:	1405c83a 	sub	r2,r2,r16
    3fec:	d8803315 	stw	r2,204(sp)
    3ff0:	008011c4 	movi	r2,71
    3ff4:	b0817626 	beq	r22,r2,45d0 <___vfprintf_internal_r+0x1d6c>
    3ff8:	00801944 	movi	r2,101
    3ffc:	1442810e 	bge	r2,r17,4a04 <___vfprintf_internal_r+0x21a0>
    4000:	d8c02617 	ldw	r3,152(sp)
    4004:	00801984 	movi	r2,102
    4008:	d8c03215 	stw	r3,200(sp)
    400c:	8881fe26 	beq	r17,r2,4808 <___vfprintf_internal_r+0x1fa4>
    4010:	d8c03217 	ldw	r3,200(sp)
    4014:	d9003317 	ldw	r4,204(sp)
    4018:	1901dd16 	blt	r3,r4,4790 <___vfprintf_internal_r+0x1f2c>
    401c:	9480004c 	andi	r18,r18,1
    4020:	90022b1e 	bne	r18,zero,48d0 <___vfprintf_internal_r+0x206c>
    4024:	1805883a 	mov	r2,r3
    4028:	18028016 	blt	r3,zero,4a2c <___vfprintf_internal_r+0x21c8>
    402c:	d8c03217 	ldw	r3,200(sp)
    4030:	044019c4 	movi	r17,103
    4034:	d8c02e15 	stw	r3,184(sp)
    4038:	df002a07 	ldb	fp,168(sp)
    403c:	e001531e 	bne	fp,zero,458c <___vfprintf_internal_r+0x1d28>
    4040:	df002783 	ldbu	fp,158(sp)
    4044:	d8802a15 	stw	r2,168(sp)
    4048:	dc802b17 	ldw	r18,172(sp)
    404c:	d8002915 	stw	zero,164(sp)
    4050:	003bd106 	br	2f98 <__alt_data_end+0xff002f98>
    4054:	d8802d17 	ldw	r2,180(sp)
    4058:	d8c02d17 	ldw	r3,180(sp)
    405c:	d9002d17 	ldw	r4,180(sp)
    4060:	10800017 	ldw	r2,0(r2)
    4064:	18c00117 	ldw	r3,4(r3)
    4068:	21000204 	addi	r4,r4,8
    406c:	d8803615 	stw	r2,216(sp)
    4070:	d8c03815 	stw	r3,224(sp)
    4074:	d9002d15 	stw	r4,180(sp)
    4078:	003b7506 	br	2e50 <__alt_data_end+0xff002e50>
    407c:	ac400007 	ldb	r17,0(r21)
    4080:	003a5906 	br	29e8 <__alt_data_end+0xff0029e8>
    4084:	9080100c 	andi	r2,r18,64
    4088:	1000a826 	beq	r2,zero,432c <___vfprintf_internal_r+0x1ac8>
    408c:	d9002d17 	ldw	r4,180(sp)
    4090:	002d883a 	mov	r22,zero
    4094:	24c0000b 	ldhu	r19,0(r4)
    4098:	21000104 	addi	r4,r4,4
    409c:	d9002d15 	stw	r4,180(sp)
    40a0:	003ccb06 	br	33d0 <__alt_data_end+0xff0033d0>
    40a4:	d8c02d17 	ldw	r3,180(sp)
    40a8:	d9002917 	ldw	r4,164(sp)
    40ac:	002d883a 	mov	r22,zero
    40b0:	18800104 	addi	r2,r3,4
    40b4:	1cc00017 	ldw	r19,0(r3)
    40b8:	203ebb0e 	bge	r4,zero,3ba8 <__alt_data_end+0xff003ba8>
    40bc:	003ef106 	br	3c84 <__alt_data_end+0xff003c84>
    40c0:	9080040c 	andi	r2,r18,16
    40c4:	1000921e 	bne	r2,zero,4310 <___vfprintf_internal_r+0x1aac>
    40c8:	9480100c 	andi	r18,r18,64
    40cc:	90013926 	beq	r18,zero,45b4 <___vfprintf_internal_r+0x1d50>
    40d0:	d9002d17 	ldw	r4,180(sp)
    40d4:	d9402f17 	ldw	r5,188(sp)
    40d8:	20800017 	ldw	r2,0(r4)
    40dc:	21000104 	addi	r4,r4,4
    40e0:	d9002d15 	stw	r4,180(sp)
    40e4:	1140000d 	sth	r5,0(r2)
    40e8:	003a1606 	br	2944 <__alt_data_end+0xff002944>
    40ec:	9080100c 	andi	r2,r18,64
    40f0:	10008026 	beq	r2,zero,42f4 <___vfprintf_internal_r+0x1a90>
    40f4:	d8c02d17 	ldw	r3,180(sp)
    40f8:	1cc0000f 	ldh	r19,0(r3)
    40fc:	18c00104 	addi	r3,r3,4
    4100:	d8c02d15 	stw	r3,180(sp)
    4104:	982dd7fa 	srai	r22,r19,31
    4108:	b005883a 	mov	r2,r22
    410c:	003b1f06 	br	2d8c <__alt_data_end+0xff002d8c>
    4110:	9080100c 	andi	r2,r18,64
    4114:	d8002785 	stb	zero,158(sp)
    4118:	10008a1e 	bne	r2,zero,4344 <___vfprintf_internal_r+0x1ae0>
    411c:	d9402d17 	ldw	r5,180(sp)
    4120:	d8c02917 	ldw	r3,164(sp)
    4124:	002d883a 	mov	r22,zero
    4128:	28800104 	addi	r2,r5,4
    412c:	2cc00017 	ldw	r19,0(r5)
    4130:	183e4b0e 	bge	r3,zero,3a60 <__alt_data_end+0xff003a60>
    4134:	9d86b03a 	or	r3,r19,r22
    4138:	d8802d15 	stw	r2,180(sp)
    413c:	183e4c1e 	bne	r3,zero,3a70 <__alt_data_end+0xff003a70>
    4140:	0039883a 	mov	fp,zero
    4144:	0005883a 	mov	r2,zero
    4148:	003d4006 	br	364c <__alt_data_end+0xff00364c>
    414c:	01400074 	movhi	r5,1
    4150:	29416784 	addi	r5,r5,1438
    4154:	d9402b15 	stw	r5,172(sp)
    4158:	d9402b17 	ldw	r5,172(sp)
    415c:	1c47883a 	add	r3,r3,r17
    4160:	10800044 	addi	r2,r2,1
    4164:	41400015 	stw	r5,0(r8)
    4168:	44400115 	stw	r17,4(r8)
    416c:	d8c02015 	stw	r3,128(sp)
    4170:	d8801f15 	stw	r2,124(sp)
    4174:	010001c4 	movi	r4,7
    4178:	20bec816 	blt	r4,r2,3c9c <__alt_data_end+0xff003c9c>
    417c:	42000204 	addi	r8,r8,8
    4180:	003ecd06 	br	3cb8 <__alt_data_end+0xff003cb8>
    4184:	d9002917 	ldw	r4,164(sp)
    4188:	d8002785 	stb	zero,158(sp)
    418c:	203d2d16 	blt	r4,zero,3644 <__alt_data_end+0xff003644>
    4190:	00bfdfc4 	movi	r2,-129
    4194:	90a4703a 	and	r18,r18,r2
    4198:	003a9106 	br	2be0 <__alt_data_end+0xff002be0>
    419c:	01000074 	movhi	r4,1
    41a0:	21016784 	addi	r4,r4,1438
    41a4:	d9002b15 	stw	r4,172(sp)
    41a8:	003c0c06 	br	31dc <__alt_data_end+0xff0031dc>
    41ac:	d9002c17 	ldw	r4,176(sp)
    41b0:	d9801e04 	addi	r6,sp,120
    41b4:	b80b883a 	mov	r5,r23
    41b8:	00096000 	call	9600 <__sprint_r>
    41bc:	103aab1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    41c0:	d8c02017 	ldw	r3,128(sp)
    41c4:	da000404 	addi	r8,sp,16
    41c8:	003d4106 	br	36d0 <__alt_data_end+0xff0036d0>
    41cc:	d8801f17 	ldw	r2,124(sp)
    41d0:	01400074 	movhi	r5,1
    41d4:	01000044 	movi	r4,1
    41d8:	18c00044 	addi	r3,r3,1
    41dc:	10800044 	addi	r2,r2,1
    41e0:	29416704 	addi	r5,r5,1436
    41e4:	41000115 	stw	r4,4(r8)
    41e8:	41400015 	stw	r5,0(r8)
    41ec:	d8c02015 	stw	r3,128(sp)
    41f0:	d8801f15 	stw	r2,124(sp)
    41f4:	010001c4 	movi	r4,7
    41f8:	20805c16 	blt	r4,r2,436c <___vfprintf_internal_r+0x1b08>
    41fc:	42000204 	addi	r8,r8,8
    4200:	8800041e 	bne	r17,zero,4214 <___vfprintf_internal_r+0x19b0>
    4204:	d8803317 	ldw	r2,204(sp)
    4208:	1000021e 	bne	r2,zero,4214 <___vfprintf_internal_r+0x19b0>
    420c:	9080004c 	andi	r2,r18,1
    4210:	103c0926 	beq	r2,zero,3238 <__alt_data_end+0xff003238>
    4214:	d9003717 	ldw	r4,220(sp)
    4218:	d8801f17 	ldw	r2,124(sp)
    421c:	d9403417 	ldw	r5,208(sp)
    4220:	20c7883a 	add	r3,r4,r3
    4224:	10800044 	addi	r2,r2,1
    4228:	41000115 	stw	r4,4(r8)
    422c:	41400015 	stw	r5,0(r8)
    4230:	d8c02015 	stw	r3,128(sp)
    4234:	d8801f15 	stw	r2,124(sp)
    4238:	010001c4 	movi	r4,7
    423c:	20812116 	blt	r4,r2,46c4 <___vfprintf_internal_r+0x1e60>
    4240:	42000204 	addi	r8,r8,8
    4244:	0463c83a 	sub	r17,zero,r17
    4248:	0440730e 	bge	zero,r17,4418 <___vfprintf_internal_r+0x1bb4>
    424c:	05800404 	movi	r22,16
    4250:	b440860e 	bge	r22,r17,446c <___vfprintf_internal_r+0x1c08>
    4254:	01400074 	movhi	r5,1
    4258:	29416784 	addi	r5,r5,1438
    425c:	d9402b15 	stw	r5,172(sp)
    4260:	070001c4 	movi	fp,7
    4264:	dcc02c17 	ldw	r19,176(sp)
    4268:	00000306 	br	4278 <___vfprintf_internal_r+0x1a14>
    426c:	42000204 	addi	r8,r8,8
    4270:	8c7ffc04 	addi	r17,r17,-16
    4274:	b440800e 	bge	r22,r17,4478 <___vfprintf_internal_r+0x1c14>
    4278:	18c00404 	addi	r3,r3,16
    427c:	10800044 	addi	r2,r2,1
    4280:	45000015 	stw	r20,0(r8)
    4284:	45800115 	stw	r22,4(r8)
    4288:	d8c02015 	stw	r3,128(sp)
    428c:	d8801f15 	stw	r2,124(sp)
    4290:	e0bff60e 	bge	fp,r2,426c <__alt_data_end+0xff00426c>
    4294:	d9801e04 	addi	r6,sp,120
    4298:	b80b883a 	mov	r5,r23
    429c:	9809883a 	mov	r4,r19
    42a0:	00096000 	call	9600 <__sprint_r>
    42a4:	103a711e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    42a8:	d8c02017 	ldw	r3,128(sp)
    42ac:	d8801f17 	ldw	r2,124(sp)
    42b0:	da000404 	addi	r8,sp,16
    42b4:	003fee06 	br	4270 <__alt_data_end+0xff004270>
    42b8:	00bfffc4 	movi	r2,-1
    42bc:	003a6f06 	br	2c7c <__alt_data_end+0xff002c7c>
    42c0:	008011c4 	movi	r2,71
    42c4:	1440b816 	blt	r2,r17,45a8 <___vfprintf_internal_r+0x1d44>
    42c8:	04000074 	movhi	r16,1
    42cc:	84015904 	addi	r16,r16,1380
    42d0:	00c000c4 	movi	r3,3
    42d4:	00bfdfc4 	movi	r2,-129
    42d8:	d8c02a15 	stw	r3,168(sp)
    42dc:	90a4703a 	and	r18,r18,r2
    42e0:	df002783 	ldbu	fp,158(sp)
    42e4:	d8c02e15 	stw	r3,184(sp)
    42e8:	d8002915 	stw	zero,164(sp)
    42ec:	d8003215 	stw	zero,200(sp)
    42f0:	003b2906 	br	2f98 <__alt_data_end+0xff002f98>
    42f4:	d9002d17 	ldw	r4,180(sp)
    42f8:	24c00017 	ldw	r19,0(r4)
    42fc:	21000104 	addi	r4,r4,4
    4300:	d9002d15 	stw	r4,180(sp)
    4304:	982dd7fa 	srai	r22,r19,31
    4308:	b005883a 	mov	r2,r22
    430c:	003a9f06 	br	2d8c <__alt_data_end+0xff002d8c>
    4310:	d9402d17 	ldw	r5,180(sp)
    4314:	d8c02f17 	ldw	r3,188(sp)
    4318:	28800017 	ldw	r2,0(r5)
    431c:	29400104 	addi	r5,r5,4
    4320:	d9402d15 	stw	r5,180(sp)
    4324:	10c00015 	stw	r3,0(r2)
    4328:	00398606 	br	2944 <__alt_data_end+0xff002944>
    432c:	d9402d17 	ldw	r5,180(sp)
    4330:	002d883a 	mov	r22,zero
    4334:	2cc00017 	ldw	r19,0(r5)
    4338:	29400104 	addi	r5,r5,4
    433c:	d9402d15 	stw	r5,180(sp)
    4340:	003c2306 	br	33d0 <__alt_data_end+0xff0033d0>
    4344:	d8c02d17 	ldw	r3,180(sp)
    4348:	d9002917 	ldw	r4,164(sp)
    434c:	002d883a 	mov	r22,zero
    4350:	18800104 	addi	r2,r3,4
    4354:	1cc0000b 	ldhu	r19,0(r3)
    4358:	203dc10e 	bge	r4,zero,3a60 <__alt_data_end+0xff003a60>
    435c:	003f7506 	br	4134 <__alt_data_end+0xff004134>
    4360:	04000074 	movhi	r16,1
    4364:	84015704 	addi	r16,r16,1372
    4368:	003acc06 	br	2e9c <__alt_data_end+0xff002e9c>
    436c:	d9002c17 	ldw	r4,176(sp)
    4370:	d9801e04 	addi	r6,sp,120
    4374:	b80b883a 	mov	r5,r23
    4378:	00096000 	call	9600 <__sprint_r>
    437c:	103a3b1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    4380:	dc402617 	ldw	r17,152(sp)
    4384:	d8c02017 	ldw	r3,128(sp)
    4388:	da000404 	addi	r8,sp,16
    438c:	003f9c06 	br	4200 <__alt_data_end+0xff004200>
    4390:	ac400043 	ldbu	r17,1(r21)
    4394:	94800814 	ori	r18,r18,32
    4398:	ad400044 	addi	r21,r21,1
    439c:	8c403fcc 	andi	r17,r17,255
    43a0:	8c40201c 	xori	r17,r17,128
    43a4:	8c7fe004 	addi	r17,r17,-128
    43a8:	00398f06 	br	29e8 <__alt_data_end+0xff0029e8>
    43ac:	d8c02d15 	stw	r3,180(sp)
    43b0:	0039883a 	mov	fp,zero
    43b4:	003e3506 	br	3c8c <__alt_data_end+0xff003c8c>
    43b8:	d9002c17 	ldw	r4,176(sp)
    43bc:	d9801e04 	addi	r6,sp,120
    43c0:	b80b883a 	mov	r5,r23
    43c4:	00096000 	call	9600 <__sprint_r>
    43c8:	103a281e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    43cc:	d8c02017 	ldw	r3,128(sp)
    43d0:	da000404 	addi	r8,sp,16
    43d4:	003cd006 	br	3718 <__alt_data_end+0xff003718>
    43d8:	8009883a 	mov	r4,r16
    43dc:	da003d15 	stw	r8,244(sp)
    43e0:	00027cc0 	call	27cc <strlen>
    43e4:	d8802e15 	stw	r2,184(sp)
    43e8:	da003d17 	ldw	r8,244(sp)
    43ec:	103c340e 	bge	r2,zero,34c0 <__alt_data_end+0xff0034c0>
    43f0:	0005883a 	mov	r2,zero
    43f4:	003c3206 	br	34c0 <__alt_data_end+0xff0034c0>
    43f8:	d9002c17 	ldw	r4,176(sp)
    43fc:	d9801e04 	addi	r6,sp,120
    4400:	b80b883a 	mov	r5,r23
    4404:	00096000 	call	9600 <__sprint_r>
    4408:	103a181e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    440c:	d8c02017 	ldw	r3,128(sp)
    4410:	d8801f17 	ldw	r2,124(sp)
    4414:	da000404 	addi	r8,sp,16
    4418:	d9403317 	ldw	r5,204(sp)
    441c:	10800044 	addi	r2,r2,1
    4420:	44000015 	stw	r16,0(r8)
    4424:	28c7883a 	add	r3,r5,r3
    4428:	003b7d06 	br	3220 <__alt_data_end+0xff003220>
    442c:	01000074 	movhi	r4,1
    4430:	21016b84 	addi	r4,r4,1454
    4434:	d9003515 	stw	r4,212(sp)
    4438:	003b1406 	br	308c <__alt_data_end+0xff00308c>
    443c:	013fffc4 	movi	r4,-1
    4440:	003a3506 	br	2d18 <__alt_data_end+0xff002d18>
    4444:	0023883a 	mov	r17,zero
    4448:	003d9d06 	br	3ac0 <__alt_data_end+0xff003ac0>
    444c:	d9002c17 	ldw	r4,176(sp)
    4450:	d9801e04 	addi	r6,sp,120
    4454:	b80b883a 	mov	r5,r23
    4458:	00096000 	call	9600 <__sprint_r>
    445c:	103a031e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    4460:	d8c02017 	ldw	r3,128(sp)
    4464:	da000404 	addi	r8,sp,16
    4468:	003d9406 	br	3abc <__alt_data_end+0xff003abc>
    446c:	01000074 	movhi	r4,1
    4470:	21016784 	addi	r4,r4,1438
    4474:	d9002b15 	stw	r4,172(sp)
    4478:	d9002b17 	ldw	r4,172(sp)
    447c:	1c47883a 	add	r3,r3,r17
    4480:	10800044 	addi	r2,r2,1
    4484:	41000015 	stw	r4,0(r8)
    4488:	44400115 	stw	r17,4(r8)
    448c:	d8c02015 	stw	r3,128(sp)
    4490:	d8801f15 	stw	r2,124(sp)
    4494:	010001c4 	movi	r4,7
    4498:	20bfd716 	blt	r4,r2,43f8 <__alt_data_end+0xff0043f8>
    449c:	42000204 	addi	r8,r8,8
    44a0:	003fdd06 	br	4418 <__alt_data_end+0xff004418>
    44a4:	d9002c17 	ldw	r4,176(sp)
    44a8:	d9801e04 	addi	r6,sp,120
    44ac:	b80b883a 	mov	r5,r23
    44b0:	00096000 	call	9600 <__sprint_r>
    44b4:	1039ed1e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    44b8:	d8802617 	ldw	r2,152(sp)
    44bc:	d8c02017 	ldw	r3,128(sp)
    44c0:	da000404 	addi	r8,sp,16
    44c4:	003e1006 	br	3d08 <__alt_data_end+0xff003d08>
    44c8:	00800044 	movi	r2,1
    44cc:	10803fcc 	andi	r2,r2,255
    44d0:	00c00044 	movi	r3,1
    44d4:	10fa3526 	beq	r2,r3,2dac <__alt_data_end+0xff002dac>
    44d8:	00c00084 	movi	r3,2
    44dc:	10fbcb26 	beq	r2,r3,340c <__alt_data_end+0xff00340c>
    44e0:	003a8f06 	br	2f20 <__alt_data_end+0xff002f20>
    44e4:	01000074 	movhi	r4,1
    44e8:	21016b84 	addi	r4,r4,1454
    44ec:	d9003515 	stw	r4,212(sp)
    44f0:	003b7606 	br	32cc <__alt_data_end+0xff0032cc>
    44f4:	d8802917 	ldw	r2,164(sp)
    44f8:	00c00184 	movi	r3,6
    44fc:	1880012e 	bgeu	r3,r2,4504 <___vfprintf_internal_r+0x1ca0>
    4500:	1805883a 	mov	r2,r3
    4504:	d8802e15 	stw	r2,184(sp)
    4508:	1000ef16 	blt	r2,zero,48c8 <___vfprintf_internal_r+0x2064>
    450c:	04000074 	movhi	r16,1
    4510:	d8802a15 	stw	r2,168(sp)
    4514:	dcc02d15 	stw	r19,180(sp)
    4518:	d8002915 	stw	zero,164(sp)
    451c:	d8003215 	stw	zero,200(sp)
    4520:	84016504 	addi	r16,r16,1428
    4524:	0039883a 	mov	fp,zero
    4528:	003aa206 	br	2fb4 <__alt_data_end+0xff002fb4>
    452c:	0021883a 	mov	r16,zero
    4530:	003e0706 	br	3d50 <__alt_data_end+0xff003d50>
    4534:	d9002c17 	ldw	r4,176(sp)
    4538:	d9801e04 	addi	r6,sp,120
    453c:	b80b883a 	mov	r5,r23
    4540:	00096000 	call	9600 <__sprint_r>
    4544:	1039c91e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    4548:	d8802617 	ldw	r2,152(sp)
    454c:	d9403317 	ldw	r5,204(sp)
    4550:	d8c02017 	ldw	r3,128(sp)
    4554:	da000404 	addi	r8,sp,16
    4558:	2885c83a 	sub	r2,r5,r2
    455c:	003dfb06 	br	3d4c <__alt_data_end+0xff003d4c>
    4560:	9080004c 	andi	r2,r18,1
    4564:	103e8f1e 	bne	r2,zero,3fa4 <__alt_data_end+0xff003fa4>
    4568:	d8802117 	ldw	r2,132(sp)
    456c:	003e9e06 	br	3fe8 <__alt_data_end+0xff003fe8>
    4570:	1025883a 	mov	r18,r2
    4574:	0039883a 	mov	fp,zero
    4578:	00800084 	movi	r2,2
    457c:	003fd306 	br	44cc <__alt_data_end+0xff0044cc>
    4580:	07000b44 	movi	fp,45
    4584:	df002785 	stb	fp,158(sp)
    4588:	003a4006 	br	2e8c <__alt_data_end+0xff002e8c>
    458c:	00c00b44 	movi	r3,45
    4590:	d8c02785 	stb	r3,158(sp)
    4594:	d8802a15 	stw	r2,168(sp)
    4598:	dc802b17 	ldw	r18,172(sp)
    459c:	d8002915 	stw	zero,164(sp)
    45a0:	07000b44 	movi	fp,45
    45a4:	003a8006 	br	2fa8 <__alt_data_end+0xff002fa8>
    45a8:	04000074 	movhi	r16,1
    45ac:	84015a04 	addi	r16,r16,1384
    45b0:	003f4706 	br	42d0 <__alt_data_end+0xff0042d0>
    45b4:	d8c02d17 	ldw	r3,180(sp)
    45b8:	d9002f17 	ldw	r4,188(sp)
    45bc:	18800017 	ldw	r2,0(r3)
    45c0:	18c00104 	addi	r3,r3,4
    45c4:	d8c02d15 	stw	r3,180(sp)
    45c8:	11000015 	stw	r4,0(r2)
    45cc:	0038dd06 	br	2944 <__alt_data_end+0xff002944>
    45d0:	dd802617 	ldw	r22,152(sp)
    45d4:	00bfff44 	movi	r2,-3
    45d8:	b0801c16 	blt	r22,r2,464c <___vfprintf_internal_r+0x1de8>
    45dc:	d9402917 	ldw	r5,164(sp)
    45e0:	2d801a16 	blt	r5,r22,464c <___vfprintf_internal_r+0x1de8>
    45e4:	dd803215 	stw	r22,200(sp)
    45e8:	003e8906 	br	4010 <__alt_data_end+0xff004010>
    45ec:	01000074 	movhi	r4,1
    45f0:	21016784 	addi	r4,r4,1438
    45f4:	d9002b15 	stw	r4,172(sp)
    45f8:	003c9106 	br	3840 <__alt_data_end+0xff003840>
    45fc:	e005883a 	mov	r2,fp
    4600:	003e7906 	br	3fe8 <__alt_data_end+0xff003fe8>
    4604:	d9402917 	ldw	r5,164(sp)
    4608:	df002783 	ldbu	fp,158(sp)
    460c:	dcc02d15 	stw	r19,180(sp)
    4610:	d9402a15 	stw	r5,168(sp)
    4614:	d9402e15 	stw	r5,184(sp)
    4618:	d8002915 	stw	zero,164(sp)
    461c:	d8003215 	stw	zero,200(sp)
    4620:	003a5d06 	br	2f98 <__alt_data_end+0xff002f98>
    4624:	9080004c 	andi	r2,r18,1
    4628:	0039883a 	mov	fp,zero
    462c:	10000426 	beq	r2,zero,4640 <___vfprintf_internal_r+0x1ddc>
    4630:	00800c04 	movi	r2,48
    4634:	dc001dc4 	addi	r16,sp,119
    4638:	d8801dc5 	stb	r2,119(sp)
    463c:	003b8006 	br	3440 <__alt_data_end+0xff003440>
    4640:	d8002e15 	stw	zero,184(sp)
    4644:	dc001e04 	addi	r16,sp,120
    4648:	003a4d06 	br	2f80 <__alt_data_end+0xff002f80>
    464c:	8c7fff84 	addi	r17,r17,-2
    4650:	b5bfffc4 	addi	r22,r22,-1
    4654:	dd802615 	stw	r22,152(sp)
    4658:	dc4022c5 	stb	r17,139(sp)
    465c:	b000bf16 	blt	r22,zero,495c <___vfprintf_internal_r+0x20f8>
    4660:	00800ac4 	movi	r2,43
    4664:	d8802305 	stb	r2,140(sp)
    4668:	00800244 	movi	r2,9
    466c:	15807016 	blt	r2,r22,4830 <___vfprintf_internal_r+0x1fcc>
    4670:	00800c04 	movi	r2,48
    4674:	b5800c04 	addi	r22,r22,48
    4678:	d8802345 	stb	r2,141(sp)
    467c:	dd802385 	stb	r22,142(sp)
    4680:	d88023c4 	addi	r2,sp,143
    4684:	df0022c4 	addi	fp,sp,139
    4688:	d8c03317 	ldw	r3,204(sp)
    468c:	1739c83a 	sub	fp,r2,fp
    4690:	d9003317 	ldw	r4,204(sp)
    4694:	e0c7883a 	add	r3,fp,r3
    4698:	df003a15 	stw	fp,232(sp)
    469c:	d8c02e15 	stw	r3,184(sp)
    46a0:	00800044 	movi	r2,1
    46a4:	1100b30e 	bge	r2,r4,4974 <___vfprintf_internal_r+0x2110>
    46a8:	d8c02e17 	ldw	r3,184(sp)
    46ac:	18c00044 	addi	r3,r3,1
    46b0:	d8c02e15 	stw	r3,184(sp)
    46b4:	1805883a 	mov	r2,r3
    46b8:	1800ac16 	blt	r3,zero,496c <___vfprintf_internal_r+0x2108>
    46bc:	d8003215 	stw	zero,200(sp)
    46c0:	003e5d06 	br	4038 <__alt_data_end+0xff004038>
    46c4:	d9002c17 	ldw	r4,176(sp)
    46c8:	d9801e04 	addi	r6,sp,120
    46cc:	b80b883a 	mov	r5,r23
    46d0:	00096000 	call	9600 <__sprint_r>
    46d4:	1039651e 	bne	r2,zero,2c6c <__alt_data_end+0xff002c6c>
    46d8:	dc402617 	ldw	r17,152(sp)
    46dc:	d8c02017 	ldw	r3,128(sp)
    46e0:	d8801f17 	ldw	r2,124(sp)
    46e4:	da000404 	addi	r8,sp,16
    46e8:	003ed606 	br	4244 <__alt_data_end+0xff004244>
    46ec:	582b883a 	mov	r21,r11
    46f0:	d8002915 	stw	zero,164(sp)
    46f4:	0038bd06 	br	29ec <__alt_data_end+0xff0029ec>
    46f8:	d8802917 	ldw	r2,164(sp)
    46fc:	103e071e 	bne	r2,zero,3f1c <__alt_data_end+0xff003f1c>
    4700:	dc002915 	stw	r16,164(sp)
    4704:	003e0506 	br	3f1c <__alt_data_end+0xff003f1c>
    4708:	d9002917 	ldw	r4,164(sp)
    470c:	20c00044 	addi	r3,r4,1
    4710:	003e0f06 	br	3f50 <__alt_data_end+0xff003f50>
    4714:	01400184 	movi	r5,6
    4718:	d9402915 	stw	r5,164(sp)
    471c:	003dff06 	br	3f1c <__alt_data_end+0xff003f1c>
    4720:	d8802104 	addi	r2,sp,132
    4724:	d8800315 	stw	r2,12(sp)
    4728:	d8802504 	addi	r2,sp,148
    472c:	d8800215 	stw	r2,8(sp)
    4730:	d8802604 	addi	r2,sp,152
    4734:	d8800115 	stw	r2,4(sp)
    4738:	d8802917 	ldw	r2,164(sp)
    473c:	d9403617 	ldw	r5,216(sp)
    4740:	d9002c17 	ldw	r4,176(sp)
    4744:	d8800015 	stw	r2,0(sp)
    4748:	01c000c4 	movi	r7,3
    474c:	980d883a 	mov	r6,r19
    4750:	da003d15 	stw	r8,244(sp)
    4754:	0004e880 	call	4e88 <_dtoa_r>
    4758:	d8c02917 	ldw	r3,164(sp)
    475c:	da003d17 	ldw	r8,244(sp)
    4760:	1021883a 	mov	r16,r2
    4764:	10f9883a 	add	fp,r2,r3
    4768:	81000007 	ldb	r4,0(r16)
    476c:	00800c04 	movi	r2,48
    4770:	20805e26 	beq	r4,r2,48ec <___vfprintf_internal_r+0x2088>
    4774:	d8c02617 	ldw	r3,152(sp)
    4778:	e0f9883a 	add	fp,fp,r3
    477c:	003e0a06 	br	3fa8 <__alt_data_end+0xff003fa8>
    4780:	00c00b44 	movi	r3,45
    4784:	24e0003c 	xorhi	r19,r4,32768
    4788:	d8c02a05 	stb	r3,168(sp)
    478c:	003de906 	br	3f34 <__alt_data_end+0xff003f34>
    4790:	d8c03217 	ldw	r3,200(sp)
    4794:	00c07a0e 	bge	zero,r3,4980 <___vfprintf_internal_r+0x211c>
    4798:	00800044 	movi	r2,1
    479c:	d9003317 	ldw	r4,204(sp)
    47a0:	1105883a 	add	r2,r2,r4
    47a4:	d8802e15 	stw	r2,184(sp)
    47a8:	10004e16 	blt	r2,zero,48e4 <___vfprintf_internal_r+0x2080>
    47ac:	044019c4 	movi	r17,103
    47b0:	003e2106 	br	4038 <__alt_data_end+0xff004038>
    47b4:	d9002917 	ldw	r4,164(sp)
    47b8:	d8802104 	addi	r2,sp,132
    47bc:	d8800315 	stw	r2,12(sp)
    47c0:	d9000015 	stw	r4,0(sp)
    47c4:	d8802504 	addi	r2,sp,148
    47c8:	d9403617 	ldw	r5,216(sp)
    47cc:	d9002c17 	ldw	r4,176(sp)
    47d0:	d8800215 	stw	r2,8(sp)
    47d4:	d8802604 	addi	r2,sp,152
    47d8:	d8800115 	stw	r2,4(sp)
    47dc:	01c000c4 	movi	r7,3
    47e0:	980d883a 	mov	r6,r19
    47e4:	da003d15 	stw	r8,244(sp)
    47e8:	0004e880 	call	4e88 <_dtoa_r>
    47ec:	d8c02917 	ldw	r3,164(sp)
    47f0:	da003d17 	ldw	r8,244(sp)
    47f4:	1021883a 	mov	r16,r2
    47f8:	00801184 	movi	r2,70
    47fc:	80f9883a 	add	fp,r16,r3
    4800:	88bfd926 	beq	r17,r2,4768 <__alt_data_end+0xff004768>
    4804:	003de806 	br	3fa8 <__alt_data_end+0xff003fa8>
    4808:	d9002917 	ldw	r4,164(sp)
    480c:	00c04d0e 	bge	zero,r3,4944 <___vfprintf_internal_r+0x20e0>
    4810:	2000441e 	bne	r4,zero,4924 <___vfprintf_internal_r+0x20c0>
    4814:	9480004c 	andi	r18,r18,1
    4818:	9000421e 	bne	r18,zero,4924 <___vfprintf_internal_r+0x20c0>
    481c:	1805883a 	mov	r2,r3
    4820:	18007016 	blt	r3,zero,49e4 <___vfprintf_internal_r+0x2180>
    4824:	d8c03217 	ldw	r3,200(sp)
    4828:	d8c02e15 	stw	r3,184(sp)
    482c:	003e0206 	br	4038 <__alt_data_end+0xff004038>
    4830:	df0022c4 	addi	fp,sp,139
    4834:	dc002915 	stw	r16,164(sp)
    4838:	4027883a 	mov	r19,r8
    483c:	e021883a 	mov	r16,fp
    4840:	b009883a 	mov	r4,r22
    4844:	01400284 	movi	r5,10
    4848:	000bfb40 	call	bfb4 <__modsi3>
    484c:	10800c04 	addi	r2,r2,48
    4850:	843fffc4 	addi	r16,r16,-1
    4854:	b009883a 	mov	r4,r22
    4858:	01400284 	movi	r5,10
    485c:	80800005 	stb	r2,0(r16)
    4860:	000bf300 	call	bf30 <__divsi3>
    4864:	102d883a 	mov	r22,r2
    4868:	00800244 	movi	r2,9
    486c:	15bff416 	blt	r2,r22,4840 <__alt_data_end+0xff004840>
    4870:	9811883a 	mov	r8,r19
    4874:	b0800c04 	addi	r2,r22,48
    4878:	8027883a 	mov	r19,r16
    487c:	997fffc4 	addi	r5,r19,-1
    4880:	98bfffc5 	stb	r2,-1(r19)
    4884:	dc002917 	ldw	r16,164(sp)
    4888:	2f006a2e 	bgeu	r5,fp,4a34 <___vfprintf_internal_r+0x21d0>
    488c:	d9c02384 	addi	r7,sp,142
    4890:	3ccfc83a 	sub	r7,r7,r19
    4894:	d9002344 	addi	r4,sp,141
    4898:	e1cf883a 	add	r7,fp,r7
    489c:	00000106 	br	48a4 <___vfprintf_internal_r+0x2040>
    48a0:	28800003 	ldbu	r2,0(r5)
    48a4:	20800005 	stb	r2,0(r4)
    48a8:	21000044 	addi	r4,r4,1
    48ac:	29400044 	addi	r5,r5,1
    48b0:	393ffb1e 	bne	r7,r4,48a0 <__alt_data_end+0xff0048a0>
    48b4:	d8802304 	addi	r2,sp,140
    48b8:	14c5c83a 	sub	r2,r2,r19
    48bc:	d8c02344 	addi	r3,sp,141
    48c0:	1885883a 	add	r2,r3,r2
    48c4:	003f7006 	br	4688 <__alt_data_end+0xff004688>
    48c8:	0005883a 	mov	r2,zero
    48cc:	003f0f06 	br	450c <__alt_data_end+0xff00450c>
    48d0:	d8c03217 	ldw	r3,200(sp)
    48d4:	18c00044 	addi	r3,r3,1
    48d8:	d8c02e15 	stw	r3,184(sp)
    48dc:	1805883a 	mov	r2,r3
    48e0:	183fb20e 	bge	r3,zero,47ac <__alt_data_end+0xff0047ac>
    48e4:	0005883a 	mov	r2,zero
    48e8:	003fb006 	br	47ac <__alt_data_end+0xff0047ac>
    48ec:	d9003617 	ldw	r4,216(sp)
    48f0:	000d883a 	mov	r6,zero
    48f4:	000f883a 	mov	r7,zero
    48f8:	980b883a 	mov	r5,r19
    48fc:	d8c03c15 	stw	r3,240(sp)
    4900:	da003d15 	stw	r8,244(sp)
    4904:	000d2780 	call	d278 <__eqdf2>
    4908:	d8c03c17 	ldw	r3,240(sp)
    490c:	da003d17 	ldw	r8,244(sp)
    4910:	103f9826 	beq	r2,zero,4774 <__alt_data_end+0xff004774>
    4914:	00800044 	movi	r2,1
    4918:	10c7c83a 	sub	r3,r2,r3
    491c:	d8c02615 	stw	r3,152(sp)
    4920:	003f9506 	br	4778 <__alt_data_end+0xff004778>
    4924:	d9002917 	ldw	r4,164(sp)
    4928:	d8c03217 	ldw	r3,200(sp)
    492c:	20800044 	addi	r2,r4,1
    4930:	1885883a 	add	r2,r3,r2
    4934:	d8802e15 	stw	r2,184(sp)
    4938:	103dbf0e 	bge	r2,zero,4038 <__alt_data_end+0xff004038>
    493c:	0005883a 	mov	r2,zero
    4940:	003dbd06 	br	4038 <__alt_data_end+0xff004038>
    4944:	2000211e 	bne	r4,zero,49cc <___vfprintf_internal_r+0x2168>
    4948:	9480004c 	andi	r18,r18,1
    494c:	90001f1e 	bne	r18,zero,49cc <___vfprintf_internal_r+0x2168>
    4950:	00800044 	movi	r2,1
    4954:	d8802e15 	stw	r2,184(sp)
    4958:	003db706 	br	4038 <__alt_data_end+0xff004038>
    495c:	00800b44 	movi	r2,45
    4960:	05adc83a 	sub	r22,zero,r22
    4964:	d8802305 	stb	r2,140(sp)
    4968:	003f3f06 	br	4668 <__alt_data_end+0xff004668>
    496c:	0005883a 	mov	r2,zero
    4970:	003f5206 	br	46bc <__alt_data_end+0xff0046bc>
    4974:	90a4703a 	and	r18,r18,r2
    4978:	903f4e26 	beq	r18,zero,46b4 <__alt_data_end+0xff0046b4>
    497c:	003f4a06 	br	46a8 <__alt_data_end+0xff0046a8>
    4980:	00800084 	movi	r2,2
    4984:	10c5c83a 	sub	r2,r2,r3
    4988:	003f8406 	br	479c <__alt_data_end+0xff00479c>
    498c:	d8802d17 	ldw	r2,180(sp)
    4990:	d9002d17 	ldw	r4,180(sp)
    4994:	ac400043 	ldbu	r17,1(r21)
    4998:	10800017 	ldw	r2,0(r2)
    499c:	582b883a 	mov	r21,r11
    49a0:	d8802915 	stw	r2,164(sp)
    49a4:	20800104 	addi	r2,r4,4
    49a8:	d9002917 	ldw	r4,164(sp)
    49ac:	d8802d15 	stw	r2,180(sp)
    49b0:	203e7a0e 	bge	r4,zero,439c <__alt_data_end+0xff00439c>
    49b4:	8c403fcc 	andi	r17,r17,255
    49b8:	00bfffc4 	movi	r2,-1
    49bc:	8c40201c 	xori	r17,r17,128
    49c0:	d8802915 	stw	r2,164(sp)
    49c4:	8c7fe004 	addi	r17,r17,-128
    49c8:	00380706 	br	29e8 <__alt_data_end+0xff0029e8>
    49cc:	d8c02917 	ldw	r3,164(sp)
    49d0:	18c00084 	addi	r3,r3,2
    49d4:	d8c02e15 	stw	r3,184(sp)
    49d8:	1805883a 	mov	r2,r3
    49dc:	183d960e 	bge	r3,zero,4038 <__alt_data_end+0xff004038>
    49e0:	003fd606 	br	493c <__alt_data_end+0xff00493c>
    49e4:	0005883a 	mov	r2,zero
    49e8:	003f8e06 	br	4824 <__alt_data_end+0xff004824>
    49ec:	9080004c 	andi	r2,r18,1
    49f0:	103f811e 	bne	r2,zero,47f8 <__alt_data_end+0xff0047f8>
    49f4:	d8802117 	ldw	r2,132(sp)
    49f8:	1405c83a 	sub	r2,r2,r16
    49fc:	d8803315 	stw	r2,204(sp)
    4a00:	b47ef326 	beq	r22,r17,45d0 <__alt_data_end+0xff0045d0>
    4a04:	dd802617 	ldw	r22,152(sp)
    4a08:	003f1106 	br	4650 <__alt_data_end+0xff004650>
    4a0c:	d9c02785 	stb	r7,158(sp)
    4a10:	00390406 	br	2e24 <__alt_data_end+0xff002e24>
    4a14:	d9c02785 	stb	r7,158(sp)
    4a18:	0038d306 	br	2d68 <__alt_data_end+0xff002d68>
    4a1c:	d9c02785 	stb	r7,158(sp)
    4a20:	003a6106 	br	33a8 <__alt_data_end+0xff0033a8>
    4a24:	d9c02785 	stb	r7,158(sp)
    4a28:	003af806 	br	360c <__alt_data_end+0xff00360c>
    4a2c:	0005883a 	mov	r2,zero
    4a30:	003d7e06 	br	402c <__alt_data_end+0xff00402c>
    4a34:	d8802344 	addi	r2,sp,141
    4a38:	003f1306 	br	4688 <__alt_data_end+0xff004688>
    4a3c:	d9c02785 	stb	r7,158(sp)
    4a40:	00392306 	br	2ed0 <__alt_data_end+0xff002ed0>
    4a44:	d9c02785 	stb	r7,158(sp)
    4a48:	003aa906 	br	34f0 <__alt_data_end+0xff0034f0>
    4a4c:	d9c02785 	stb	r7,158(sp)
    4a50:	003a3d06 	br	3348 <__alt_data_end+0xff003348>
    4a54:	d9c02785 	stb	r7,158(sp)
    4a58:	003aca06 	br	3584 <__alt_data_end+0xff003584>

00004a5c <__vfprintf_internal>:
    4a5c:	00800074 	movhi	r2,1
    4a60:	1088c004 	addi	r2,r2,8960
    4a64:	300f883a 	mov	r7,r6
    4a68:	280d883a 	mov	r6,r5
    4a6c:	200b883a 	mov	r5,r4
    4a70:	11000017 	ldw	r4,0(r2)
    4a74:	00028641 	jmpi	2864 <___vfprintf_internal_r>

00004a78 <__sbprintf>:
    4a78:	2880030b 	ldhu	r2,12(r5)
    4a7c:	2ac01917 	ldw	r11,100(r5)
    4a80:	2a80038b 	ldhu	r10,14(r5)
    4a84:	2a400717 	ldw	r9,28(r5)
    4a88:	2a000917 	ldw	r8,36(r5)
    4a8c:	defee204 	addi	sp,sp,-1144
    4a90:	00c10004 	movi	r3,1024
    4a94:	dc011a15 	stw	r16,1128(sp)
    4a98:	10bfff4c 	andi	r2,r2,65533
    4a9c:	2821883a 	mov	r16,r5
    4aa0:	d8cb883a 	add	r5,sp,r3
    4aa4:	dc811c15 	stw	r18,1136(sp)
    4aa8:	dc411b15 	stw	r17,1132(sp)
    4aac:	dfc11d15 	stw	ra,1140(sp)
    4ab0:	2025883a 	mov	r18,r4
    4ab4:	d881030d 	sth	r2,1036(sp)
    4ab8:	dac11915 	stw	r11,1124(sp)
    4abc:	da81038d 	sth	r10,1038(sp)
    4ac0:	da410715 	stw	r9,1052(sp)
    4ac4:	da010915 	stw	r8,1060(sp)
    4ac8:	dec10015 	stw	sp,1024(sp)
    4acc:	dec10415 	stw	sp,1040(sp)
    4ad0:	d8c10215 	stw	r3,1032(sp)
    4ad4:	d8c10515 	stw	r3,1044(sp)
    4ad8:	d8010615 	stw	zero,1048(sp)
    4adc:	00028640 	call	2864 <___vfprintf_internal_r>
    4ae0:	1023883a 	mov	r17,r2
    4ae4:	10000416 	blt	r2,zero,4af8 <__sbprintf+0x80>
    4ae8:	d9410004 	addi	r5,sp,1024
    4aec:	9009883a 	mov	r4,r18
    4af0:	000672c0 	call	672c <_fflush_r>
    4af4:	10000d1e 	bne	r2,zero,4b2c <__sbprintf+0xb4>
    4af8:	d881030b 	ldhu	r2,1036(sp)
    4afc:	1080100c 	andi	r2,r2,64
    4b00:	10000326 	beq	r2,zero,4b10 <__sbprintf+0x98>
    4b04:	8080030b 	ldhu	r2,12(r16)
    4b08:	10801014 	ori	r2,r2,64
    4b0c:	8080030d 	sth	r2,12(r16)
    4b10:	8805883a 	mov	r2,r17
    4b14:	dfc11d17 	ldw	ra,1140(sp)
    4b18:	dc811c17 	ldw	r18,1136(sp)
    4b1c:	dc411b17 	ldw	r17,1132(sp)
    4b20:	dc011a17 	ldw	r16,1128(sp)
    4b24:	dec11e04 	addi	sp,sp,1144
    4b28:	f800283a 	ret
    4b2c:	047fffc4 	movi	r17,-1
    4b30:	003ff106 	br	4af8 <__alt_data_end+0xff004af8>

00004b34 <__swsetup_r>:
    4b34:	00800074 	movhi	r2,1
    4b38:	defffd04 	addi	sp,sp,-12
    4b3c:	1088c004 	addi	r2,r2,8960
    4b40:	dc400115 	stw	r17,4(sp)
    4b44:	2023883a 	mov	r17,r4
    4b48:	11000017 	ldw	r4,0(r2)
    4b4c:	dc000015 	stw	r16,0(sp)
    4b50:	dfc00215 	stw	ra,8(sp)
    4b54:	2821883a 	mov	r16,r5
    4b58:	20000226 	beq	r4,zero,4b64 <__swsetup_r+0x30>
    4b5c:	20800e17 	ldw	r2,56(r4)
    4b60:	10003126 	beq	r2,zero,4c28 <__swsetup_r+0xf4>
    4b64:	8080030b 	ldhu	r2,12(r16)
    4b68:	10c0020c 	andi	r3,r2,8
    4b6c:	1009883a 	mov	r4,r2
    4b70:	18000f26 	beq	r3,zero,4bb0 <__swsetup_r+0x7c>
    4b74:	80c00417 	ldw	r3,16(r16)
    4b78:	18001526 	beq	r3,zero,4bd0 <__swsetup_r+0x9c>
    4b7c:	1100004c 	andi	r4,r2,1
    4b80:	20001c1e 	bne	r4,zero,4bf4 <__swsetup_r+0xc0>
    4b84:	1080008c 	andi	r2,r2,2
    4b88:	1000291e 	bne	r2,zero,4c30 <__swsetup_r+0xfc>
    4b8c:	80800517 	ldw	r2,20(r16)
    4b90:	80800215 	stw	r2,8(r16)
    4b94:	18001c26 	beq	r3,zero,4c08 <__swsetup_r+0xd4>
    4b98:	0005883a 	mov	r2,zero
    4b9c:	dfc00217 	ldw	ra,8(sp)
    4ba0:	dc400117 	ldw	r17,4(sp)
    4ba4:	dc000017 	ldw	r16,0(sp)
    4ba8:	dec00304 	addi	sp,sp,12
    4bac:	f800283a 	ret
    4bb0:	2080040c 	andi	r2,r4,16
    4bb4:	10002e26 	beq	r2,zero,4c70 <__swsetup_r+0x13c>
    4bb8:	2080010c 	andi	r2,r4,4
    4bbc:	10001e1e 	bne	r2,zero,4c38 <__swsetup_r+0x104>
    4bc0:	80c00417 	ldw	r3,16(r16)
    4bc4:	20800214 	ori	r2,r4,8
    4bc8:	8080030d 	sth	r2,12(r16)
    4bcc:	183feb1e 	bne	r3,zero,4b7c <__alt_data_end+0xff004b7c>
    4bd0:	1100a00c 	andi	r4,r2,640
    4bd4:	01408004 	movi	r5,512
    4bd8:	217fe826 	beq	r4,r5,4b7c <__alt_data_end+0xff004b7c>
    4bdc:	800b883a 	mov	r5,r16
    4be0:	8809883a 	mov	r4,r17
    4be4:	00076ac0 	call	76ac <__smakebuf_r>
    4be8:	8080030b 	ldhu	r2,12(r16)
    4bec:	80c00417 	ldw	r3,16(r16)
    4bf0:	003fe206 	br	4b7c <__alt_data_end+0xff004b7c>
    4bf4:	80800517 	ldw	r2,20(r16)
    4bf8:	80000215 	stw	zero,8(r16)
    4bfc:	0085c83a 	sub	r2,zero,r2
    4c00:	80800615 	stw	r2,24(r16)
    4c04:	183fe41e 	bne	r3,zero,4b98 <__alt_data_end+0xff004b98>
    4c08:	80c0030b 	ldhu	r3,12(r16)
    4c0c:	0005883a 	mov	r2,zero
    4c10:	1900200c 	andi	r4,r3,128
    4c14:	203fe126 	beq	r4,zero,4b9c <__alt_data_end+0xff004b9c>
    4c18:	18c01014 	ori	r3,r3,64
    4c1c:	80c0030d 	sth	r3,12(r16)
    4c20:	00bfffc4 	movi	r2,-1
    4c24:	003fdd06 	br	4b9c <__alt_data_end+0xff004b9c>
    4c28:	0006b080 	call	6b08 <__sinit>
    4c2c:	003fcd06 	br	4b64 <__alt_data_end+0xff004b64>
    4c30:	0005883a 	mov	r2,zero
    4c34:	003fd606 	br	4b90 <__alt_data_end+0xff004b90>
    4c38:	81400c17 	ldw	r5,48(r16)
    4c3c:	28000626 	beq	r5,zero,4c58 <__swsetup_r+0x124>
    4c40:	80801004 	addi	r2,r16,64
    4c44:	28800326 	beq	r5,r2,4c54 <__swsetup_r+0x120>
    4c48:	8809883a 	mov	r4,r17
    4c4c:	0006c7c0 	call	6c7c <_free_r>
    4c50:	8100030b 	ldhu	r4,12(r16)
    4c54:	80000c15 	stw	zero,48(r16)
    4c58:	80c00417 	ldw	r3,16(r16)
    4c5c:	00bff6c4 	movi	r2,-37
    4c60:	1108703a 	and	r4,r2,r4
    4c64:	80000115 	stw	zero,4(r16)
    4c68:	80c00015 	stw	r3,0(r16)
    4c6c:	003fd506 	br	4bc4 <__alt_data_end+0xff004bc4>
    4c70:	00800244 	movi	r2,9
    4c74:	88800015 	stw	r2,0(r17)
    4c78:	20801014 	ori	r2,r4,64
    4c7c:	8080030d 	sth	r2,12(r16)
    4c80:	00bfffc4 	movi	r2,-1
    4c84:	003fc506 	br	4b9c <__alt_data_end+0xff004b9c>

00004c88 <quorem>:
    4c88:	defff704 	addi	sp,sp,-36
    4c8c:	dc800215 	stw	r18,8(sp)
    4c90:	20800417 	ldw	r2,16(r4)
    4c94:	2c800417 	ldw	r18,16(r5)
    4c98:	dfc00815 	stw	ra,32(sp)
    4c9c:	ddc00715 	stw	r23,28(sp)
    4ca0:	dd800615 	stw	r22,24(sp)
    4ca4:	dd400515 	stw	r21,20(sp)
    4ca8:	dd000415 	stw	r20,16(sp)
    4cac:	dcc00315 	stw	r19,12(sp)
    4cb0:	dc400115 	stw	r17,4(sp)
    4cb4:	dc000015 	stw	r16,0(sp)
    4cb8:	14807116 	blt	r2,r18,4e80 <quorem+0x1f8>
    4cbc:	94bfffc4 	addi	r18,r18,-1
    4cc0:	94ad883a 	add	r22,r18,r18
    4cc4:	b5ad883a 	add	r22,r22,r22
    4cc8:	2c400504 	addi	r17,r5,20
    4ccc:	8da9883a 	add	r20,r17,r22
    4cd0:	25400504 	addi	r21,r4,20
    4cd4:	282f883a 	mov	r23,r5
    4cd8:	adad883a 	add	r22,r21,r22
    4cdc:	a1400017 	ldw	r5,0(r20)
    4ce0:	2021883a 	mov	r16,r4
    4ce4:	b1000017 	ldw	r4,0(r22)
    4ce8:	29400044 	addi	r5,r5,1
    4cec:	000c0280 	call	c028 <__udivsi3>
    4cf0:	1027883a 	mov	r19,r2
    4cf4:	10002c26 	beq	r2,zero,4da8 <quorem+0x120>
    4cf8:	a813883a 	mov	r9,r21
    4cfc:	880b883a 	mov	r5,r17
    4d00:	0009883a 	mov	r4,zero
    4d04:	000d883a 	mov	r6,zero
    4d08:	2a000017 	ldw	r8,0(r5)
    4d0c:	49c00017 	ldw	r7,0(r9)
    4d10:	29400104 	addi	r5,r5,4
    4d14:	40bfffcc 	andi	r2,r8,65535
    4d18:	14c5383a 	mul	r2,r2,r19
    4d1c:	4010d43a 	srli	r8,r8,16
    4d20:	38ffffcc 	andi	r3,r7,65535
    4d24:	1105883a 	add	r2,r2,r4
    4d28:	1008d43a 	srli	r4,r2,16
    4d2c:	44d1383a 	mul	r8,r8,r19
    4d30:	198d883a 	add	r6,r3,r6
    4d34:	10ffffcc 	andi	r3,r2,65535
    4d38:	30c7c83a 	sub	r3,r6,r3
    4d3c:	380ed43a 	srli	r7,r7,16
    4d40:	4105883a 	add	r2,r8,r4
    4d44:	180dd43a 	srai	r6,r3,16
    4d48:	113fffcc 	andi	r4,r2,65535
    4d4c:	390fc83a 	sub	r7,r7,r4
    4d50:	398d883a 	add	r6,r7,r6
    4d54:	300e943a 	slli	r7,r6,16
    4d58:	18ffffcc 	andi	r3,r3,65535
    4d5c:	1008d43a 	srli	r4,r2,16
    4d60:	38ceb03a 	or	r7,r7,r3
    4d64:	49c00015 	stw	r7,0(r9)
    4d68:	300dd43a 	srai	r6,r6,16
    4d6c:	4a400104 	addi	r9,r9,4
    4d70:	a17fe52e 	bgeu	r20,r5,4d08 <__alt_data_end+0xff004d08>
    4d74:	b0800017 	ldw	r2,0(r22)
    4d78:	10000b1e 	bne	r2,zero,4da8 <quorem+0x120>
    4d7c:	b0bfff04 	addi	r2,r22,-4
    4d80:	a880082e 	bgeu	r21,r2,4da4 <quorem+0x11c>
    4d84:	b0ffff17 	ldw	r3,-4(r22)
    4d88:	18000326 	beq	r3,zero,4d98 <quorem+0x110>
    4d8c:	00000506 	br	4da4 <quorem+0x11c>
    4d90:	10c00017 	ldw	r3,0(r2)
    4d94:	1800031e 	bne	r3,zero,4da4 <quorem+0x11c>
    4d98:	10bfff04 	addi	r2,r2,-4
    4d9c:	94bfffc4 	addi	r18,r18,-1
    4da0:	a8bffb36 	bltu	r21,r2,4d90 <__alt_data_end+0xff004d90>
    4da4:	84800415 	stw	r18,16(r16)
    4da8:	b80b883a 	mov	r5,r23
    4dac:	8009883a 	mov	r4,r16
    4db0:	00085e00 	call	85e0 <__mcmp>
    4db4:	10002616 	blt	r2,zero,4e50 <quorem+0x1c8>
    4db8:	9cc00044 	addi	r19,r19,1
    4dbc:	a805883a 	mov	r2,r21
    4dc0:	000b883a 	mov	r5,zero
    4dc4:	11000017 	ldw	r4,0(r2)
    4dc8:	89800017 	ldw	r6,0(r17)
    4dcc:	10800104 	addi	r2,r2,4
    4dd0:	20ffffcc 	andi	r3,r4,65535
    4dd4:	194b883a 	add	r5,r3,r5
    4dd8:	30ffffcc 	andi	r3,r6,65535
    4ddc:	28c7c83a 	sub	r3,r5,r3
    4de0:	300cd43a 	srli	r6,r6,16
    4de4:	2008d43a 	srli	r4,r4,16
    4de8:	180bd43a 	srai	r5,r3,16
    4dec:	18ffffcc 	andi	r3,r3,65535
    4df0:	2189c83a 	sub	r4,r4,r6
    4df4:	2149883a 	add	r4,r4,r5
    4df8:	200c943a 	slli	r6,r4,16
    4dfc:	8c400104 	addi	r17,r17,4
    4e00:	200bd43a 	srai	r5,r4,16
    4e04:	30c6b03a 	or	r3,r6,r3
    4e08:	10ffff15 	stw	r3,-4(r2)
    4e0c:	a47fed2e 	bgeu	r20,r17,4dc4 <__alt_data_end+0xff004dc4>
    4e10:	9485883a 	add	r2,r18,r18
    4e14:	1085883a 	add	r2,r2,r2
    4e18:	a887883a 	add	r3,r21,r2
    4e1c:	18800017 	ldw	r2,0(r3)
    4e20:	10000b1e 	bne	r2,zero,4e50 <quorem+0x1c8>
    4e24:	18bfff04 	addi	r2,r3,-4
    4e28:	a880082e 	bgeu	r21,r2,4e4c <quorem+0x1c4>
    4e2c:	18ffff17 	ldw	r3,-4(r3)
    4e30:	18000326 	beq	r3,zero,4e40 <quorem+0x1b8>
    4e34:	00000506 	br	4e4c <quorem+0x1c4>
    4e38:	10c00017 	ldw	r3,0(r2)
    4e3c:	1800031e 	bne	r3,zero,4e4c <quorem+0x1c4>
    4e40:	10bfff04 	addi	r2,r2,-4
    4e44:	94bfffc4 	addi	r18,r18,-1
    4e48:	a8bffb36 	bltu	r21,r2,4e38 <__alt_data_end+0xff004e38>
    4e4c:	84800415 	stw	r18,16(r16)
    4e50:	9805883a 	mov	r2,r19
    4e54:	dfc00817 	ldw	ra,32(sp)
    4e58:	ddc00717 	ldw	r23,28(sp)
    4e5c:	dd800617 	ldw	r22,24(sp)
    4e60:	dd400517 	ldw	r21,20(sp)
    4e64:	dd000417 	ldw	r20,16(sp)
    4e68:	dcc00317 	ldw	r19,12(sp)
    4e6c:	dc800217 	ldw	r18,8(sp)
    4e70:	dc400117 	ldw	r17,4(sp)
    4e74:	dc000017 	ldw	r16,0(sp)
    4e78:	dec00904 	addi	sp,sp,36
    4e7c:	f800283a 	ret
    4e80:	0005883a 	mov	r2,zero
    4e84:	003ff306 	br	4e54 <__alt_data_end+0xff004e54>

00004e88 <_dtoa_r>:
    4e88:	20801017 	ldw	r2,64(r4)
    4e8c:	deffde04 	addi	sp,sp,-136
    4e90:	df002015 	stw	fp,128(sp)
    4e94:	dcc01b15 	stw	r19,108(sp)
    4e98:	dc801a15 	stw	r18,104(sp)
    4e9c:	dc401915 	stw	r17,100(sp)
    4ea0:	dc001815 	stw	r16,96(sp)
    4ea4:	dfc02115 	stw	ra,132(sp)
    4ea8:	ddc01f15 	stw	r23,124(sp)
    4eac:	dd801e15 	stw	r22,120(sp)
    4eb0:	dd401d15 	stw	r21,116(sp)
    4eb4:	dd001c15 	stw	r20,112(sp)
    4eb8:	d9c00315 	stw	r7,12(sp)
    4ebc:	2039883a 	mov	fp,r4
    4ec0:	3023883a 	mov	r17,r6
    4ec4:	2825883a 	mov	r18,r5
    4ec8:	dc002417 	ldw	r16,144(sp)
    4ecc:	3027883a 	mov	r19,r6
    4ed0:	10000826 	beq	r2,zero,4ef4 <_dtoa_r+0x6c>
    4ed4:	21801117 	ldw	r6,68(r4)
    4ed8:	00c00044 	movi	r3,1
    4edc:	100b883a 	mov	r5,r2
    4ee0:	1986983a 	sll	r3,r3,r6
    4ee4:	11800115 	stw	r6,4(r2)
    4ee8:	10c00215 	stw	r3,8(r2)
    4eec:	0007dc00 	call	7dc0 <_Bfree>
    4ef0:	e0001015 	stw	zero,64(fp)
    4ef4:	88002e16 	blt	r17,zero,4fb0 <_dtoa_r+0x128>
    4ef8:	80000015 	stw	zero,0(r16)
    4efc:	889ffc2c 	andhi	r2,r17,32752
    4f00:	00dffc34 	movhi	r3,32752
    4f04:	10c01c26 	beq	r2,r3,4f78 <_dtoa_r+0xf0>
    4f08:	000d883a 	mov	r6,zero
    4f0c:	000f883a 	mov	r7,zero
    4f10:	9009883a 	mov	r4,r18
    4f14:	980b883a 	mov	r5,r19
    4f18:	000d2780 	call	d278 <__eqdf2>
    4f1c:	10002b1e 	bne	r2,zero,4fcc <_dtoa_r+0x144>
    4f20:	d9c02317 	ldw	r7,140(sp)
    4f24:	00800044 	movi	r2,1
    4f28:	38800015 	stw	r2,0(r7)
    4f2c:	d8802517 	ldw	r2,148(sp)
    4f30:	10019e26 	beq	r2,zero,55ac <_dtoa_r+0x724>
    4f34:	d8c02517 	ldw	r3,148(sp)
    4f38:	00800074 	movhi	r2,1
    4f3c:	10816744 	addi	r2,r2,1437
    4f40:	18800015 	stw	r2,0(r3)
    4f44:	10bfffc4 	addi	r2,r2,-1
    4f48:	dfc02117 	ldw	ra,132(sp)
    4f4c:	df002017 	ldw	fp,128(sp)
    4f50:	ddc01f17 	ldw	r23,124(sp)
    4f54:	dd801e17 	ldw	r22,120(sp)
    4f58:	dd401d17 	ldw	r21,116(sp)
    4f5c:	dd001c17 	ldw	r20,112(sp)
    4f60:	dcc01b17 	ldw	r19,108(sp)
    4f64:	dc801a17 	ldw	r18,104(sp)
    4f68:	dc401917 	ldw	r17,100(sp)
    4f6c:	dc001817 	ldw	r16,96(sp)
    4f70:	dec02204 	addi	sp,sp,136
    4f74:	f800283a 	ret
    4f78:	d8c02317 	ldw	r3,140(sp)
    4f7c:	0089c3c4 	movi	r2,9999
    4f80:	18800015 	stw	r2,0(r3)
    4f84:	90017726 	beq	r18,zero,5564 <_dtoa_r+0x6dc>
    4f88:	00800074 	movhi	r2,1
    4f8c:	10817304 	addi	r2,r2,1484
    4f90:	d9002517 	ldw	r4,148(sp)
    4f94:	203fec26 	beq	r4,zero,4f48 <__alt_data_end+0xff004f48>
    4f98:	10c000c7 	ldb	r3,3(r2)
    4f9c:	1801781e 	bne	r3,zero,5580 <_dtoa_r+0x6f8>
    4fa0:	10c000c4 	addi	r3,r2,3
    4fa4:	d9802517 	ldw	r6,148(sp)
    4fa8:	30c00015 	stw	r3,0(r6)
    4fac:	003fe606 	br	4f48 <__alt_data_end+0xff004f48>
    4fb0:	04e00034 	movhi	r19,32768
    4fb4:	9cffffc4 	addi	r19,r19,-1
    4fb8:	00800044 	movi	r2,1
    4fbc:	8ce6703a 	and	r19,r17,r19
    4fc0:	80800015 	stw	r2,0(r16)
    4fc4:	9823883a 	mov	r17,r19
    4fc8:	003fcc06 	br	4efc <__alt_data_end+0xff004efc>
    4fcc:	d8800204 	addi	r2,sp,8
    4fd0:	d8800015 	stw	r2,0(sp)
    4fd4:	d9c00104 	addi	r7,sp,4
    4fd8:	900b883a 	mov	r5,r18
    4fdc:	980d883a 	mov	r6,r19
    4fe0:	e009883a 	mov	r4,fp
    4fe4:	8820d53a 	srli	r16,r17,20
    4fe8:	00089ac0 	call	89ac <__d2b>
    4fec:	d8800915 	stw	r2,36(sp)
    4ff0:	8001651e 	bne	r16,zero,5588 <_dtoa_r+0x700>
    4ff4:	dd800217 	ldw	r22,8(sp)
    4ff8:	dc000117 	ldw	r16,4(sp)
    4ffc:	00800804 	movi	r2,32
    5000:	b421883a 	add	r16,r22,r16
    5004:	80c10c84 	addi	r3,r16,1074
    5008:	10c2d10e 	bge	r2,r3,5b50 <_dtoa_r+0xcc8>
    500c:	00801004 	movi	r2,64
    5010:	81010484 	addi	r4,r16,1042
    5014:	10c7c83a 	sub	r3,r2,r3
    5018:	9108d83a 	srl	r4,r18,r4
    501c:	88e2983a 	sll	r17,r17,r3
    5020:	2448b03a 	or	r4,r4,r17
    5024:	000e6400 	call	e640 <__floatunsidf>
    5028:	017f8434 	movhi	r5,65040
    502c:	01800044 	movi	r6,1
    5030:	1009883a 	mov	r4,r2
    5034:	194b883a 	add	r5,r3,r5
    5038:	843fffc4 	addi	r16,r16,-1
    503c:	d9801115 	stw	r6,68(sp)
    5040:	000d883a 	mov	r6,zero
    5044:	01cffe34 	movhi	r7,16376
    5048:	000dbe80 	call	dbe8 <__subdf3>
    504c:	0198dbf4 	movhi	r6,25455
    5050:	01cff4f4 	movhi	r7,16339
    5054:	3190d844 	addi	r6,r6,17249
    5058:	39e1e9c4 	addi	r7,r7,-30809
    505c:	1009883a 	mov	r4,r2
    5060:	180b883a 	mov	r5,r3
    5064:	000d4d00 	call	d4d0 <__muldf3>
    5068:	01a2d874 	movhi	r6,35681
    506c:	01cff1f4 	movhi	r7,16327
    5070:	31b22cc4 	addi	r6,r6,-14157
    5074:	39e28a04 	addi	r7,r7,-30168
    5078:	180b883a 	mov	r5,r3
    507c:	1009883a 	mov	r4,r2
    5080:	000c0e40 	call	c0e4 <__adddf3>
    5084:	8009883a 	mov	r4,r16
    5088:	1029883a 	mov	r20,r2
    508c:	1823883a 	mov	r17,r3
    5090:	000e5640 	call	e564 <__floatsidf>
    5094:	019427f4 	movhi	r6,20639
    5098:	01cff4f4 	movhi	r7,16339
    509c:	319e7ec4 	addi	r6,r6,31227
    50a0:	39d104c4 	addi	r7,r7,17427
    50a4:	1009883a 	mov	r4,r2
    50a8:	180b883a 	mov	r5,r3
    50ac:	000d4d00 	call	d4d0 <__muldf3>
    50b0:	100d883a 	mov	r6,r2
    50b4:	180f883a 	mov	r7,r3
    50b8:	a009883a 	mov	r4,r20
    50bc:	880b883a 	mov	r5,r17
    50c0:	000c0e40 	call	c0e4 <__adddf3>
    50c4:	1009883a 	mov	r4,r2
    50c8:	180b883a 	mov	r5,r3
    50cc:	1029883a 	mov	r20,r2
    50d0:	1823883a 	mov	r17,r3
    50d4:	000e4e40 	call	e4e4 <__fixdfsi>
    50d8:	000d883a 	mov	r6,zero
    50dc:	000f883a 	mov	r7,zero
    50e0:	a009883a 	mov	r4,r20
    50e4:	880b883a 	mov	r5,r17
    50e8:	d8800515 	stw	r2,20(sp)
    50ec:	000d3dc0 	call	d3dc <__ledf2>
    50f0:	10028716 	blt	r2,zero,5b10 <_dtoa_r+0xc88>
    50f4:	d8c00517 	ldw	r3,20(sp)
    50f8:	00800584 	movi	r2,22
    50fc:	10c27536 	bltu	r2,r3,5ad4 <_dtoa_r+0xc4c>
    5100:	180490fa 	slli	r2,r3,3
    5104:	00c00074 	movhi	r3,1
    5108:	18c18f04 	addi	r3,r3,1596
    510c:	1885883a 	add	r2,r3,r2
    5110:	11000017 	ldw	r4,0(r2)
    5114:	11400117 	ldw	r5,4(r2)
    5118:	900d883a 	mov	r6,r18
    511c:	980f883a 	mov	r7,r19
    5120:	000d3000 	call	d300 <__gedf2>
    5124:	00828d0e 	bge	zero,r2,5b5c <_dtoa_r+0xcd4>
    5128:	d9000517 	ldw	r4,20(sp)
    512c:	d8000e15 	stw	zero,56(sp)
    5130:	213fffc4 	addi	r4,r4,-1
    5134:	d9000515 	stw	r4,20(sp)
    5138:	b42dc83a 	sub	r22,r22,r16
    513c:	b5bfffc4 	addi	r22,r22,-1
    5140:	b0026f16 	blt	r22,zero,5b00 <_dtoa_r+0xc78>
    5144:	d8000815 	stw	zero,32(sp)
    5148:	d9c00517 	ldw	r7,20(sp)
    514c:	38026416 	blt	r7,zero,5ae0 <_dtoa_r+0xc58>
    5150:	b1ed883a 	add	r22,r22,r7
    5154:	d9c00d15 	stw	r7,52(sp)
    5158:	d8000a15 	stw	zero,40(sp)
    515c:	d9800317 	ldw	r6,12(sp)
    5160:	00800244 	movi	r2,9
    5164:	11811436 	bltu	r2,r6,55b8 <_dtoa_r+0x730>
    5168:	00800144 	movi	r2,5
    516c:	1184e10e 	bge	r2,r6,64f4 <_dtoa_r+0x166c>
    5170:	31bfff04 	addi	r6,r6,-4
    5174:	d9800315 	stw	r6,12(sp)
    5178:	0023883a 	mov	r17,zero
    517c:	d9800317 	ldw	r6,12(sp)
    5180:	008000c4 	movi	r2,3
    5184:	30836726 	beq	r6,r2,5f24 <_dtoa_r+0x109c>
    5188:	1183410e 	bge	r2,r6,5e90 <_dtoa_r+0x1008>
    518c:	d9c00317 	ldw	r7,12(sp)
    5190:	00800104 	movi	r2,4
    5194:	38827c26 	beq	r7,r2,5b88 <_dtoa_r+0xd00>
    5198:	00800144 	movi	r2,5
    519c:	3884c41e 	bne	r7,r2,64b0 <_dtoa_r+0x1628>
    51a0:	00800044 	movi	r2,1
    51a4:	d8800b15 	stw	r2,44(sp)
    51a8:	d8c00517 	ldw	r3,20(sp)
    51ac:	d9002217 	ldw	r4,136(sp)
    51b0:	1907883a 	add	r3,r3,r4
    51b4:	19800044 	addi	r6,r3,1
    51b8:	d8c00c15 	stw	r3,48(sp)
    51bc:	d9800615 	stw	r6,24(sp)
    51c0:	0183a40e 	bge	zero,r6,6054 <_dtoa_r+0x11cc>
    51c4:	d9800617 	ldw	r6,24(sp)
    51c8:	3021883a 	mov	r16,r6
    51cc:	e0001115 	stw	zero,68(fp)
    51d0:	008005c4 	movi	r2,23
    51d4:	1184c92e 	bgeu	r2,r6,64fc <_dtoa_r+0x1674>
    51d8:	00c00044 	movi	r3,1
    51dc:	00800104 	movi	r2,4
    51e0:	1085883a 	add	r2,r2,r2
    51e4:	11000504 	addi	r4,r2,20
    51e8:	180b883a 	mov	r5,r3
    51ec:	18c00044 	addi	r3,r3,1
    51f0:	313ffb2e 	bgeu	r6,r4,51e0 <__alt_data_end+0xff0051e0>
    51f4:	e1401115 	stw	r5,68(fp)
    51f8:	e009883a 	mov	r4,fp
    51fc:	0007d180 	call	7d18 <_Balloc>
    5200:	d8800715 	stw	r2,28(sp)
    5204:	e0801015 	stw	r2,64(fp)
    5208:	00800384 	movi	r2,14
    520c:	1400f736 	bltu	r2,r16,55ec <_dtoa_r+0x764>
    5210:	8800f626 	beq	r17,zero,55ec <_dtoa_r+0x764>
    5214:	d9c00517 	ldw	r7,20(sp)
    5218:	01c39a0e 	bge	zero,r7,6084 <_dtoa_r+0x11fc>
    521c:	388003cc 	andi	r2,r7,15
    5220:	100490fa 	slli	r2,r2,3
    5224:	382bd13a 	srai	r21,r7,4
    5228:	00c00074 	movhi	r3,1
    522c:	18c18f04 	addi	r3,r3,1596
    5230:	1885883a 	add	r2,r3,r2
    5234:	a8c0040c 	andi	r3,r21,16
    5238:	12400017 	ldw	r9,0(r2)
    523c:	12000117 	ldw	r8,4(r2)
    5240:	18037926 	beq	r3,zero,6028 <_dtoa_r+0x11a0>
    5244:	00800074 	movhi	r2,1
    5248:	10818504 	addi	r2,r2,1556
    524c:	11800817 	ldw	r6,32(r2)
    5250:	11c00917 	ldw	r7,36(r2)
    5254:	9009883a 	mov	r4,r18
    5258:	980b883a 	mov	r5,r19
    525c:	da001715 	stw	r8,92(sp)
    5260:	da401615 	stw	r9,88(sp)
    5264:	000c9900 	call	c990 <__divdf3>
    5268:	da001717 	ldw	r8,92(sp)
    526c:	da401617 	ldw	r9,88(sp)
    5270:	ad4003cc 	andi	r21,r21,15
    5274:	040000c4 	movi	r16,3
    5278:	1023883a 	mov	r17,r2
    527c:	1829883a 	mov	r20,r3
    5280:	a8001126 	beq	r21,zero,52c8 <_dtoa_r+0x440>
    5284:	05c00074 	movhi	r23,1
    5288:	bdc18504 	addi	r23,r23,1556
    528c:	4805883a 	mov	r2,r9
    5290:	4007883a 	mov	r3,r8
    5294:	a980004c 	andi	r6,r21,1
    5298:	1009883a 	mov	r4,r2
    529c:	a82bd07a 	srai	r21,r21,1
    52a0:	180b883a 	mov	r5,r3
    52a4:	30000426 	beq	r6,zero,52b8 <_dtoa_r+0x430>
    52a8:	b9800017 	ldw	r6,0(r23)
    52ac:	b9c00117 	ldw	r7,4(r23)
    52b0:	84000044 	addi	r16,r16,1
    52b4:	000d4d00 	call	d4d0 <__muldf3>
    52b8:	bdc00204 	addi	r23,r23,8
    52bc:	a83ff51e 	bne	r21,zero,5294 <__alt_data_end+0xff005294>
    52c0:	1013883a 	mov	r9,r2
    52c4:	1811883a 	mov	r8,r3
    52c8:	480d883a 	mov	r6,r9
    52cc:	400f883a 	mov	r7,r8
    52d0:	8809883a 	mov	r4,r17
    52d4:	a00b883a 	mov	r5,r20
    52d8:	000c9900 	call	c990 <__divdf3>
    52dc:	d8800f15 	stw	r2,60(sp)
    52e0:	d8c01015 	stw	r3,64(sp)
    52e4:	d8c00e17 	ldw	r3,56(sp)
    52e8:	18000626 	beq	r3,zero,5304 <_dtoa_r+0x47c>
    52ec:	d9000f17 	ldw	r4,60(sp)
    52f0:	d9401017 	ldw	r5,64(sp)
    52f4:	000d883a 	mov	r6,zero
    52f8:	01cffc34 	movhi	r7,16368
    52fc:	000d3dc0 	call	d3dc <__ledf2>
    5300:	10040b16 	blt	r2,zero,6330 <_dtoa_r+0x14a8>
    5304:	8009883a 	mov	r4,r16
    5308:	000e5640 	call	e564 <__floatsidf>
    530c:	d9800f17 	ldw	r6,60(sp)
    5310:	d9c01017 	ldw	r7,64(sp)
    5314:	1009883a 	mov	r4,r2
    5318:	180b883a 	mov	r5,r3
    531c:	000d4d00 	call	d4d0 <__muldf3>
    5320:	000d883a 	mov	r6,zero
    5324:	01d00734 	movhi	r7,16412
    5328:	1009883a 	mov	r4,r2
    532c:	180b883a 	mov	r5,r3
    5330:	000c0e40 	call	c0e4 <__adddf3>
    5334:	1021883a 	mov	r16,r2
    5338:	d8800617 	ldw	r2,24(sp)
    533c:	047f3034 	movhi	r17,64704
    5340:	1c63883a 	add	r17,r3,r17
    5344:	10031826 	beq	r2,zero,5fa8 <_dtoa_r+0x1120>
    5348:	d8c00517 	ldw	r3,20(sp)
    534c:	db000617 	ldw	r12,24(sp)
    5350:	d8c01315 	stw	r3,76(sp)
    5354:	d9000b17 	ldw	r4,44(sp)
    5358:	20038f26 	beq	r4,zero,6198 <_dtoa_r+0x1310>
    535c:	60bfffc4 	addi	r2,r12,-1
    5360:	100490fa 	slli	r2,r2,3
    5364:	00c00074 	movhi	r3,1
    5368:	18c18f04 	addi	r3,r3,1596
    536c:	1885883a 	add	r2,r3,r2
    5370:	11800017 	ldw	r6,0(r2)
    5374:	11c00117 	ldw	r7,4(r2)
    5378:	d8800717 	ldw	r2,28(sp)
    537c:	0009883a 	mov	r4,zero
    5380:	014ff834 	movhi	r5,16352
    5384:	db001615 	stw	r12,88(sp)
    5388:	15c00044 	addi	r23,r2,1
    538c:	000c9900 	call	c990 <__divdf3>
    5390:	800d883a 	mov	r6,r16
    5394:	880f883a 	mov	r7,r17
    5398:	1009883a 	mov	r4,r2
    539c:	180b883a 	mov	r5,r3
    53a0:	000dbe80 	call	dbe8 <__subdf3>
    53a4:	d9401017 	ldw	r5,64(sp)
    53a8:	d9000f17 	ldw	r4,60(sp)
    53ac:	102b883a 	mov	r21,r2
    53b0:	d8c01215 	stw	r3,72(sp)
    53b4:	000e4e40 	call	e4e4 <__fixdfsi>
    53b8:	1009883a 	mov	r4,r2
    53bc:	1029883a 	mov	r20,r2
    53c0:	000e5640 	call	e564 <__floatsidf>
    53c4:	d9000f17 	ldw	r4,60(sp)
    53c8:	d9401017 	ldw	r5,64(sp)
    53cc:	100d883a 	mov	r6,r2
    53d0:	180f883a 	mov	r7,r3
    53d4:	000dbe80 	call	dbe8 <__subdf3>
    53d8:	1823883a 	mov	r17,r3
    53dc:	d8c00717 	ldw	r3,28(sp)
    53e0:	d9401217 	ldw	r5,72(sp)
    53e4:	a2000c04 	addi	r8,r20,48
    53e8:	1021883a 	mov	r16,r2
    53ec:	1a000005 	stb	r8,0(r3)
    53f0:	800d883a 	mov	r6,r16
    53f4:	880f883a 	mov	r7,r17
    53f8:	a809883a 	mov	r4,r21
    53fc:	4029883a 	mov	r20,r8
    5400:	000d3000 	call	d300 <__gedf2>
    5404:	00841d16 	blt	zero,r2,647c <_dtoa_r+0x15f4>
    5408:	800d883a 	mov	r6,r16
    540c:	880f883a 	mov	r7,r17
    5410:	0009883a 	mov	r4,zero
    5414:	014ffc34 	movhi	r5,16368
    5418:	000dbe80 	call	dbe8 <__subdf3>
    541c:	d9401217 	ldw	r5,72(sp)
    5420:	100d883a 	mov	r6,r2
    5424:	180f883a 	mov	r7,r3
    5428:	a809883a 	mov	r4,r21
    542c:	000d3000 	call	d300 <__gedf2>
    5430:	db001617 	ldw	r12,88(sp)
    5434:	00840e16 	blt	zero,r2,6470 <_dtoa_r+0x15e8>
    5438:	00800044 	movi	r2,1
    543c:	13006b0e 	bge	r2,r12,55ec <_dtoa_r+0x764>
    5440:	d9000717 	ldw	r4,28(sp)
    5444:	dd800f15 	stw	r22,60(sp)
    5448:	dcc01015 	stw	r19,64(sp)
    544c:	2319883a 	add	r12,r4,r12
    5450:	dcc01217 	ldw	r19,72(sp)
    5454:	602d883a 	mov	r22,r12
    5458:	dc801215 	stw	r18,72(sp)
    545c:	b825883a 	mov	r18,r23
    5460:	00000906 	br	5488 <_dtoa_r+0x600>
    5464:	000dbe80 	call	dbe8 <__subdf3>
    5468:	a80d883a 	mov	r6,r21
    546c:	980f883a 	mov	r7,r19
    5470:	1009883a 	mov	r4,r2
    5474:	180b883a 	mov	r5,r3
    5478:	000d3dc0 	call	d3dc <__ledf2>
    547c:	1003e816 	blt	r2,zero,6420 <_dtoa_r+0x1598>
    5480:	b825883a 	mov	r18,r23
    5484:	bd83e926 	beq	r23,r22,642c <_dtoa_r+0x15a4>
    5488:	a809883a 	mov	r4,r21
    548c:	980b883a 	mov	r5,r19
    5490:	000d883a 	mov	r6,zero
    5494:	01d00934 	movhi	r7,16420
    5498:	000d4d00 	call	d4d0 <__muldf3>
    549c:	000d883a 	mov	r6,zero
    54a0:	01d00934 	movhi	r7,16420
    54a4:	8009883a 	mov	r4,r16
    54a8:	880b883a 	mov	r5,r17
    54ac:	102b883a 	mov	r21,r2
    54b0:	1827883a 	mov	r19,r3
    54b4:	000d4d00 	call	d4d0 <__muldf3>
    54b8:	180b883a 	mov	r5,r3
    54bc:	1009883a 	mov	r4,r2
    54c0:	1821883a 	mov	r16,r3
    54c4:	1023883a 	mov	r17,r2
    54c8:	000e4e40 	call	e4e4 <__fixdfsi>
    54cc:	1009883a 	mov	r4,r2
    54d0:	1029883a 	mov	r20,r2
    54d4:	000e5640 	call	e564 <__floatsidf>
    54d8:	8809883a 	mov	r4,r17
    54dc:	800b883a 	mov	r5,r16
    54e0:	100d883a 	mov	r6,r2
    54e4:	180f883a 	mov	r7,r3
    54e8:	000dbe80 	call	dbe8 <__subdf3>
    54ec:	a5000c04 	addi	r20,r20,48
    54f0:	a80d883a 	mov	r6,r21
    54f4:	980f883a 	mov	r7,r19
    54f8:	1009883a 	mov	r4,r2
    54fc:	180b883a 	mov	r5,r3
    5500:	95000005 	stb	r20,0(r18)
    5504:	1021883a 	mov	r16,r2
    5508:	1823883a 	mov	r17,r3
    550c:	000d3dc0 	call	d3dc <__ledf2>
    5510:	bdc00044 	addi	r23,r23,1
    5514:	800d883a 	mov	r6,r16
    5518:	880f883a 	mov	r7,r17
    551c:	0009883a 	mov	r4,zero
    5520:	014ffc34 	movhi	r5,16368
    5524:	103fcf0e 	bge	r2,zero,5464 <__alt_data_end+0xff005464>
    5528:	d8c01317 	ldw	r3,76(sp)
    552c:	d8c00515 	stw	r3,20(sp)
    5530:	d9400917 	ldw	r5,36(sp)
    5534:	e009883a 	mov	r4,fp
    5538:	0007dc00 	call	7dc0 <_Bfree>
    553c:	d9000517 	ldw	r4,20(sp)
    5540:	d9802317 	ldw	r6,140(sp)
    5544:	d9c02517 	ldw	r7,148(sp)
    5548:	b8000005 	stb	zero,0(r23)
    554c:	20800044 	addi	r2,r4,1
    5550:	30800015 	stw	r2,0(r6)
    5554:	3802aa26 	beq	r7,zero,6000 <_dtoa_r+0x1178>
    5558:	3dc00015 	stw	r23,0(r7)
    555c:	d8800717 	ldw	r2,28(sp)
    5560:	003e7906 	br	4f48 <__alt_data_end+0xff004f48>
    5564:	00800434 	movhi	r2,16
    5568:	10bfffc4 	addi	r2,r2,-1
    556c:	88a2703a 	and	r17,r17,r2
    5570:	883e851e 	bne	r17,zero,4f88 <__alt_data_end+0xff004f88>
    5574:	00800074 	movhi	r2,1
    5578:	10817004 	addi	r2,r2,1472
    557c:	003e8406 	br	4f90 <__alt_data_end+0xff004f90>
    5580:	10c00204 	addi	r3,r2,8
    5584:	003e8706 	br	4fa4 <__alt_data_end+0xff004fa4>
    5588:	01400434 	movhi	r5,16
    558c:	297fffc4 	addi	r5,r5,-1
    5590:	994a703a 	and	r5,r19,r5
    5594:	9009883a 	mov	r4,r18
    5598:	843f0044 	addi	r16,r16,-1023
    559c:	294ffc34 	orhi	r5,r5,16368
    55a0:	dd800217 	ldw	r22,8(sp)
    55a4:	d8001115 	stw	zero,68(sp)
    55a8:	003ea506 	br	5040 <__alt_data_end+0xff005040>
    55ac:	00800074 	movhi	r2,1
    55b0:	10816704 	addi	r2,r2,1436
    55b4:	003e6406 	br	4f48 <__alt_data_end+0xff004f48>
    55b8:	e0001115 	stw	zero,68(fp)
    55bc:	000b883a 	mov	r5,zero
    55c0:	e009883a 	mov	r4,fp
    55c4:	0007d180 	call	7d18 <_Balloc>
    55c8:	01bfffc4 	movi	r6,-1
    55cc:	01c00044 	movi	r7,1
    55d0:	d8800715 	stw	r2,28(sp)
    55d4:	d9800c15 	stw	r6,48(sp)
    55d8:	e0801015 	stw	r2,64(fp)
    55dc:	d8000315 	stw	zero,12(sp)
    55e0:	d9c00b15 	stw	r7,44(sp)
    55e4:	d9800615 	stw	r6,24(sp)
    55e8:	d8002215 	stw	zero,136(sp)
    55ec:	d8800117 	ldw	r2,4(sp)
    55f0:	10008916 	blt	r2,zero,5818 <_dtoa_r+0x990>
    55f4:	d9000517 	ldw	r4,20(sp)
    55f8:	00c00384 	movi	r3,14
    55fc:	19008616 	blt	r3,r4,5818 <_dtoa_r+0x990>
    5600:	200490fa 	slli	r2,r4,3
    5604:	00c00074 	movhi	r3,1
    5608:	d9802217 	ldw	r6,136(sp)
    560c:	18c18f04 	addi	r3,r3,1596
    5610:	1885883a 	add	r2,r3,r2
    5614:	14000017 	ldw	r16,0(r2)
    5618:	14400117 	ldw	r17,4(r2)
    561c:	30016316 	blt	r6,zero,5bac <_dtoa_r+0xd24>
    5620:	800d883a 	mov	r6,r16
    5624:	880f883a 	mov	r7,r17
    5628:	9009883a 	mov	r4,r18
    562c:	980b883a 	mov	r5,r19
    5630:	000c9900 	call	c990 <__divdf3>
    5634:	180b883a 	mov	r5,r3
    5638:	1009883a 	mov	r4,r2
    563c:	000e4e40 	call	e4e4 <__fixdfsi>
    5640:	1009883a 	mov	r4,r2
    5644:	102b883a 	mov	r21,r2
    5648:	000e5640 	call	e564 <__floatsidf>
    564c:	800d883a 	mov	r6,r16
    5650:	880f883a 	mov	r7,r17
    5654:	1009883a 	mov	r4,r2
    5658:	180b883a 	mov	r5,r3
    565c:	000d4d00 	call	d4d0 <__muldf3>
    5660:	100d883a 	mov	r6,r2
    5664:	180f883a 	mov	r7,r3
    5668:	9009883a 	mov	r4,r18
    566c:	980b883a 	mov	r5,r19
    5670:	000dbe80 	call	dbe8 <__subdf3>
    5674:	d9c00717 	ldw	r7,28(sp)
    5678:	1009883a 	mov	r4,r2
    567c:	a8800c04 	addi	r2,r21,48
    5680:	38800005 	stb	r2,0(r7)
    5684:	3dc00044 	addi	r23,r7,1
    5688:	d9c00617 	ldw	r7,24(sp)
    568c:	01800044 	movi	r6,1
    5690:	180b883a 	mov	r5,r3
    5694:	2005883a 	mov	r2,r4
    5698:	39803826 	beq	r7,r6,577c <_dtoa_r+0x8f4>
    569c:	000d883a 	mov	r6,zero
    56a0:	01d00934 	movhi	r7,16420
    56a4:	000d4d00 	call	d4d0 <__muldf3>
    56a8:	000d883a 	mov	r6,zero
    56ac:	000f883a 	mov	r7,zero
    56b0:	1009883a 	mov	r4,r2
    56b4:	180b883a 	mov	r5,r3
    56b8:	1025883a 	mov	r18,r2
    56bc:	1827883a 	mov	r19,r3
    56c0:	000d2780 	call	d278 <__eqdf2>
    56c4:	103f9a26 	beq	r2,zero,5530 <__alt_data_end+0xff005530>
    56c8:	d9c00617 	ldw	r7,24(sp)
    56cc:	d8c00717 	ldw	r3,28(sp)
    56d0:	b829883a 	mov	r20,r23
    56d4:	38bfffc4 	addi	r2,r7,-1
    56d8:	18ad883a 	add	r22,r3,r2
    56dc:	00000a06 	br	5708 <_dtoa_r+0x880>
    56e0:	000d4d00 	call	d4d0 <__muldf3>
    56e4:	000d883a 	mov	r6,zero
    56e8:	000f883a 	mov	r7,zero
    56ec:	1009883a 	mov	r4,r2
    56f0:	180b883a 	mov	r5,r3
    56f4:	1025883a 	mov	r18,r2
    56f8:	1827883a 	mov	r19,r3
    56fc:	b829883a 	mov	r20,r23
    5700:	000d2780 	call	d278 <__eqdf2>
    5704:	103f8a26 	beq	r2,zero,5530 <__alt_data_end+0xff005530>
    5708:	800d883a 	mov	r6,r16
    570c:	880f883a 	mov	r7,r17
    5710:	9009883a 	mov	r4,r18
    5714:	980b883a 	mov	r5,r19
    5718:	000c9900 	call	c990 <__divdf3>
    571c:	180b883a 	mov	r5,r3
    5720:	1009883a 	mov	r4,r2
    5724:	000e4e40 	call	e4e4 <__fixdfsi>
    5728:	1009883a 	mov	r4,r2
    572c:	102b883a 	mov	r21,r2
    5730:	000e5640 	call	e564 <__floatsidf>
    5734:	800d883a 	mov	r6,r16
    5738:	880f883a 	mov	r7,r17
    573c:	1009883a 	mov	r4,r2
    5740:	180b883a 	mov	r5,r3
    5744:	000d4d00 	call	d4d0 <__muldf3>
    5748:	100d883a 	mov	r6,r2
    574c:	180f883a 	mov	r7,r3
    5750:	9009883a 	mov	r4,r18
    5754:	980b883a 	mov	r5,r19
    5758:	000dbe80 	call	dbe8 <__subdf3>
    575c:	aa000c04 	addi	r8,r21,48
    5760:	a2000005 	stb	r8,0(r20)
    5764:	000d883a 	mov	r6,zero
    5768:	01d00934 	movhi	r7,16420
    576c:	1009883a 	mov	r4,r2
    5770:	180b883a 	mov	r5,r3
    5774:	a5c00044 	addi	r23,r20,1
    5778:	b53fd91e 	bne	r22,r20,56e0 <__alt_data_end+0xff0056e0>
    577c:	100d883a 	mov	r6,r2
    5780:	180f883a 	mov	r7,r3
    5784:	1009883a 	mov	r4,r2
    5788:	180b883a 	mov	r5,r3
    578c:	000c0e40 	call	c0e4 <__adddf3>
    5790:	100d883a 	mov	r6,r2
    5794:	180f883a 	mov	r7,r3
    5798:	8009883a 	mov	r4,r16
    579c:	880b883a 	mov	r5,r17
    57a0:	1027883a 	mov	r19,r2
    57a4:	1825883a 	mov	r18,r3
    57a8:	000d3dc0 	call	d3dc <__ledf2>
    57ac:	10000816 	blt	r2,zero,57d0 <_dtoa_r+0x948>
    57b0:	980d883a 	mov	r6,r19
    57b4:	900f883a 	mov	r7,r18
    57b8:	8009883a 	mov	r4,r16
    57bc:	880b883a 	mov	r5,r17
    57c0:	000d2780 	call	d278 <__eqdf2>
    57c4:	103f5a1e 	bne	r2,zero,5530 <__alt_data_end+0xff005530>
    57c8:	ad40004c 	andi	r21,r21,1
    57cc:	a83f5826 	beq	r21,zero,5530 <__alt_data_end+0xff005530>
    57d0:	bd3fffc3 	ldbu	r20,-1(r23)
    57d4:	b8bfffc4 	addi	r2,r23,-1
    57d8:	1007883a 	mov	r3,r2
    57dc:	01400e44 	movi	r5,57
    57e0:	d9800717 	ldw	r6,28(sp)
    57e4:	00000506 	br	57fc <_dtoa_r+0x974>
    57e8:	18ffffc4 	addi	r3,r3,-1
    57ec:	11824726 	beq	r2,r6,610c <_dtoa_r+0x1284>
    57f0:	1d000003 	ldbu	r20,0(r3)
    57f4:	102f883a 	mov	r23,r2
    57f8:	10bfffc4 	addi	r2,r2,-1
    57fc:	a1003fcc 	andi	r4,r20,255
    5800:	2100201c 	xori	r4,r4,128
    5804:	213fe004 	addi	r4,r4,-128
    5808:	217ff726 	beq	r4,r5,57e8 <__alt_data_end+0xff0057e8>
    580c:	a2000044 	addi	r8,r20,1
    5810:	12000005 	stb	r8,0(r2)
    5814:	003f4606 	br	5530 <__alt_data_end+0xff005530>
    5818:	d9000b17 	ldw	r4,44(sp)
    581c:	2000c826 	beq	r4,zero,5b40 <_dtoa_r+0xcb8>
    5820:	d9800317 	ldw	r6,12(sp)
    5824:	00c00044 	movi	r3,1
    5828:	1980f90e 	bge	r3,r6,5c10 <_dtoa_r+0xd88>
    582c:	d8800617 	ldw	r2,24(sp)
    5830:	d8c00a17 	ldw	r3,40(sp)
    5834:	157fffc4 	addi	r21,r2,-1
    5838:	1d41f316 	blt	r3,r21,6008 <_dtoa_r+0x1180>
    583c:	1d6bc83a 	sub	r21,r3,r21
    5840:	d9c00617 	ldw	r7,24(sp)
    5844:	3802aa16 	blt	r7,zero,62f0 <_dtoa_r+0x1468>
    5848:	dd000817 	ldw	r20,32(sp)
    584c:	d8800617 	ldw	r2,24(sp)
    5850:	d8c00817 	ldw	r3,32(sp)
    5854:	01400044 	movi	r5,1
    5858:	e009883a 	mov	r4,fp
    585c:	1887883a 	add	r3,r3,r2
    5860:	d8c00815 	stw	r3,32(sp)
    5864:	b0ad883a 	add	r22,r22,r2
    5868:	00081240 	call	8124 <__i2b>
    586c:	1023883a 	mov	r17,r2
    5870:	a0000826 	beq	r20,zero,5894 <_dtoa_r+0xa0c>
    5874:	0580070e 	bge	zero,r22,5894 <_dtoa_r+0xa0c>
    5878:	a005883a 	mov	r2,r20
    587c:	b500b916 	blt	r22,r20,5b64 <_dtoa_r+0xcdc>
    5880:	d9000817 	ldw	r4,32(sp)
    5884:	a0a9c83a 	sub	r20,r20,r2
    5888:	b0adc83a 	sub	r22,r22,r2
    588c:	2089c83a 	sub	r4,r4,r2
    5890:	d9000815 	stw	r4,32(sp)
    5894:	d9800a17 	ldw	r6,40(sp)
    5898:	0181810e 	bge	zero,r6,5ea0 <_dtoa_r+0x1018>
    589c:	d9c00b17 	ldw	r7,44(sp)
    58a0:	3800b326 	beq	r7,zero,5b70 <_dtoa_r+0xce8>
    58a4:	a800b226 	beq	r21,zero,5b70 <_dtoa_r+0xce8>
    58a8:	880b883a 	mov	r5,r17
    58ac:	a80d883a 	mov	r6,r21
    58b0:	e009883a 	mov	r4,fp
    58b4:	00083580 	call	8358 <__pow5mult>
    58b8:	d9800917 	ldw	r6,36(sp)
    58bc:	100b883a 	mov	r5,r2
    58c0:	e009883a 	mov	r4,fp
    58c4:	1023883a 	mov	r17,r2
    58c8:	00081600 	call	8160 <__multiply>
    58cc:	1021883a 	mov	r16,r2
    58d0:	d8800a17 	ldw	r2,40(sp)
    58d4:	d9400917 	ldw	r5,36(sp)
    58d8:	e009883a 	mov	r4,fp
    58dc:	1545c83a 	sub	r2,r2,r21
    58e0:	d8800a15 	stw	r2,40(sp)
    58e4:	0007dc00 	call	7dc0 <_Bfree>
    58e8:	d8c00a17 	ldw	r3,40(sp)
    58ec:	18009f1e 	bne	r3,zero,5b6c <_dtoa_r+0xce4>
    58f0:	05c00044 	movi	r23,1
    58f4:	e009883a 	mov	r4,fp
    58f8:	b80b883a 	mov	r5,r23
    58fc:	00081240 	call	8124 <__i2b>
    5900:	d9000d17 	ldw	r4,52(sp)
    5904:	102b883a 	mov	r21,r2
    5908:	2000ce26 	beq	r4,zero,5c44 <_dtoa_r+0xdbc>
    590c:	200d883a 	mov	r6,r4
    5910:	100b883a 	mov	r5,r2
    5914:	e009883a 	mov	r4,fp
    5918:	00083580 	call	8358 <__pow5mult>
    591c:	d9800317 	ldw	r6,12(sp)
    5920:	102b883a 	mov	r21,r2
    5924:	b981810e 	bge	r23,r6,5f2c <_dtoa_r+0x10a4>
    5928:	0027883a 	mov	r19,zero
    592c:	a8800417 	ldw	r2,16(r21)
    5930:	05c00804 	movi	r23,32
    5934:	10800104 	addi	r2,r2,4
    5938:	1085883a 	add	r2,r2,r2
    593c:	1085883a 	add	r2,r2,r2
    5940:	a885883a 	add	r2,r21,r2
    5944:	11000017 	ldw	r4,0(r2)
    5948:	000800c0 	call	800c <__hi0bits>
    594c:	b885c83a 	sub	r2,r23,r2
    5950:	1585883a 	add	r2,r2,r22
    5954:	108007cc 	andi	r2,r2,31
    5958:	1000b326 	beq	r2,zero,5c28 <_dtoa_r+0xda0>
    595c:	00c00804 	movi	r3,32
    5960:	1887c83a 	sub	r3,r3,r2
    5964:	01000104 	movi	r4,4
    5968:	20c2cd0e 	bge	r4,r3,64a0 <_dtoa_r+0x1618>
    596c:	00c00704 	movi	r3,28
    5970:	1885c83a 	sub	r2,r3,r2
    5974:	d8c00817 	ldw	r3,32(sp)
    5978:	a0a9883a 	add	r20,r20,r2
    597c:	b0ad883a 	add	r22,r22,r2
    5980:	1887883a 	add	r3,r3,r2
    5984:	d8c00815 	stw	r3,32(sp)
    5988:	d9800817 	ldw	r6,32(sp)
    598c:	0180040e 	bge	zero,r6,59a0 <_dtoa_r+0xb18>
    5990:	800b883a 	mov	r5,r16
    5994:	e009883a 	mov	r4,fp
    5998:	00084980 	call	8498 <__lshift>
    599c:	1021883a 	mov	r16,r2
    59a0:	0580050e 	bge	zero,r22,59b8 <_dtoa_r+0xb30>
    59a4:	a80b883a 	mov	r5,r21
    59a8:	b00d883a 	mov	r6,r22
    59ac:	e009883a 	mov	r4,fp
    59b0:	00084980 	call	8498 <__lshift>
    59b4:	102b883a 	mov	r21,r2
    59b8:	d9c00e17 	ldw	r7,56(sp)
    59bc:	3801211e 	bne	r7,zero,5e44 <_dtoa_r+0xfbc>
    59c0:	d9800617 	ldw	r6,24(sp)
    59c4:	0181380e 	bge	zero,r6,5ea8 <_dtoa_r+0x1020>
    59c8:	d8c00b17 	ldw	r3,44(sp)
    59cc:	1800ab1e 	bne	r3,zero,5c7c <_dtoa_r+0xdf4>
    59d0:	dc800717 	ldw	r18,28(sp)
    59d4:	dcc00617 	ldw	r19,24(sp)
    59d8:	9029883a 	mov	r20,r18
    59dc:	00000206 	br	59e8 <_dtoa_r+0xb60>
    59e0:	0007de80 	call	7de8 <__multadd>
    59e4:	1021883a 	mov	r16,r2
    59e8:	a80b883a 	mov	r5,r21
    59ec:	8009883a 	mov	r4,r16
    59f0:	0004c880 	call	4c88 <quorem>
    59f4:	10800c04 	addi	r2,r2,48
    59f8:	90800005 	stb	r2,0(r18)
    59fc:	94800044 	addi	r18,r18,1
    5a00:	9507c83a 	sub	r3,r18,r20
    5a04:	000f883a 	mov	r7,zero
    5a08:	01800284 	movi	r6,10
    5a0c:	800b883a 	mov	r5,r16
    5a10:	e009883a 	mov	r4,fp
    5a14:	1cfff216 	blt	r3,r19,59e0 <__alt_data_end+0xff0059e0>
    5a18:	1011883a 	mov	r8,r2
    5a1c:	d8800617 	ldw	r2,24(sp)
    5a20:	0082370e 	bge	zero,r2,6300 <_dtoa_r+0x1478>
    5a24:	d9000717 	ldw	r4,28(sp)
    5a28:	0025883a 	mov	r18,zero
    5a2c:	20af883a 	add	r23,r4,r2
    5a30:	01800044 	movi	r6,1
    5a34:	800b883a 	mov	r5,r16
    5a38:	e009883a 	mov	r4,fp
    5a3c:	da001715 	stw	r8,92(sp)
    5a40:	00084980 	call	8498 <__lshift>
    5a44:	a80b883a 	mov	r5,r21
    5a48:	1009883a 	mov	r4,r2
    5a4c:	d8800915 	stw	r2,36(sp)
    5a50:	00085e00 	call	85e0 <__mcmp>
    5a54:	da001717 	ldw	r8,92(sp)
    5a58:	0081800e 	bge	zero,r2,605c <_dtoa_r+0x11d4>
    5a5c:	b93fffc3 	ldbu	r4,-1(r23)
    5a60:	b8bfffc4 	addi	r2,r23,-1
    5a64:	1007883a 	mov	r3,r2
    5a68:	01800e44 	movi	r6,57
    5a6c:	d9c00717 	ldw	r7,28(sp)
    5a70:	00000506 	br	5a88 <_dtoa_r+0xc00>
    5a74:	18ffffc4 	addi	r3,r3,-1
    5a78:	11c12326 	beq	r2,r7,5f08 <_dtoa_r+0x1080>
    5a7c:	19000003 	ldbu	r4,0(r3)
    5a80:	102f883a 	mov	r23,r2
    5a84:	10bfffc4 	addi	r2,r2,-1
    5a88:	21403fcc 	andi	r5,r4,255
    5a8c:	2940201c 	xori	r5,r5,128
    5a90:	297fe004 	addi	r5,r5,-128
    5a94:	29bff726 	beq	r5,r6,5a74 <__alt_data_end+0xff005a74>
    5a98:	21000044 	addi	r4,r4,1
    5a9c:	11000005 	stb	r4,0(r2)
    5aa0:	a80b883a 	mov	r5,r21
    5aa4:	e009883a 	mov	r4,fp
    5aa8:	0007dc00 	call	7dc0 <_Bfree>
    5aac:	883ea026 	beq	r17,zero,5530 <__alt_data_end+0xff005530>
    5ab0:	90000426 	beq	r18,zero,5ac4 <_dtoa_r+0xc3c>
    5ab4:	94400326 	beq	r18,r17,5ac4 <_dtoa_r+0xc3c>
    5ab8:	900b883a 	mov	r5,r18
    5abc:	e009883a 	mov	r4,fp
    5ac0:	0007dc00 	call	7dc0 <_Bfree>
    5ac4:	880b883a 	mov	r5,r17
    5ac8:	e009883a 	mov	r4,fp
    5acc:	0007dc00 	call	7dc0 <_Bfree>
    5ad0:	003e9706 	br	5530 <__alt_data_end+0xff005530>
    5ad4:	01800044 	movi	r6,1
    5ad8:	d9800e15 	stw	r6,56(sp)
    5adc:	003d9606 	br	5138 <__alt_data_end+0xff005138>
    5ae0:	d8800817 	ldw	r2,32(sp)
    5ae4:	d8c00517 	ldw	r3,20(sp)
    5ae8:	d8000d15 	stw	zero,52(sp)
    5aec:	10c5c83a 	sub	r2,r2,r3
    5af0:	00c9c83a 	sub	r4,zero,r3
    5af4:	d8800815 	stw	r2,32(sp)
    5af8:	d9000a15 	stw	r4,40(sp)
    5afc:	003d9706 	br	515c <__alt_data_end+0xff00515c>
    5b00:	05adc83a 	sub	r22,zero,r22
    5b04:	dd800815 	stw	r22,32(sp)
    5b08:	002d883a 	mov	r22,zero
    5b0c:	003d8e06 	br	5148 <__alt_data_end+0xff005148>
    5b10:	d9000517 	ldw	r4,20(sp)
    5b14:	000e5640 	call	e564 <__floatsidf>
    5b18:	100d883a 	mov	r6,r2
    5b1c:	180f883a 	mov	r7,r3
    5b20:	a009883a 	mov	r4,r20
    5b24:	880b883a 	mov	r5,r17
    5b28:	000d2780 	call	d278 <__eqdf2>
    5b2c:	103d7126 	beq	r2,zero,50f4 <__alt_data_end+0xff0050f4>
    5b30:	d9c00517 	ldw	r7,20(sp)
    5b34:	39ffffc4 	addi	r7,r7,-1
    5b38:	d9c00515 	stw	r7,20(sp)
    5b3c:	003d6d06 	br	50f4 <__alt_data_end+0xff0050f4>
    5b40:	dd400a17 	ldw	r21,40(sp)
    5b44:	dd000817 	ldw	r20,32(sp)
    5b48:	0023883a 	mov	r17,zero
    5b4c:	003f4806 	br	5870 <__alt_data_end+0xff005870>
    5b50:	10e3c83a 	sub	r17,r2,r3
    5b54:	9448983a 	sll	r4,r18,r17
    5b58:	003d3206 	br	5024 <__alt_data_end+0xff005024>
    5b5c:	d8000e15 	stw	zero,56(sp)
    5b60:	003d7506 	br	5138 <__alt_data_end+0xff005138>
    5b64:	b005883a 	mov	r2,r22
    5b68:	003f4506 	br	5880 <__alt_data_end+0xff005880>
    5b6c:	dc000915 	stw	r16,36(sp)
    5b70:	d9800a17 	ldw	r6,40(sp)
    5b74:	d9400917 	ldw	r5,36(sp)
    5b78:	e009883a 	mov	r4,fp
    5b7c:	00083580 	call	8358 <__pow5mult>
    5b80:	1021883a 	mov	r16,r2
    5b84:	003f5a06 	br	58f0 <__alt_data_end+0xff0058f0>
    5b88:	01c00044 	movi	r7,1
    5b8c:	d9c00b15 	stw	r7,44(sp)
    5b90:	d8802217 	ldw	r2,136(sp)
    5b94:	0081280e 	bge	zero,r2,6038 <_dtoa_r+0x11b0>
    5b98:	100d883a 	mov	r6,r2
    5b9c:	1021883a 	mov	r16,r2
    5ba0:	d8800c15 	stw	r2,48(sp)
    5ba4:	d8800615 	stw	r2,24(sp)
    5ba8:	003d8806 	br	51cc <__alt_data_end+0xff0051cc>
    5bac:	d8800617 	ldw	r2,24(sp)
    5bb0:	00be9b16 	blt	zero,r2,5620 <__alt_data_end+0xff005620>
    5bb4:	10010f1e 	bne	r2,zero,5ff4 <_dtoa_r+0x116c>
    5bb8:	880b883a 	mov	r5,r17
    5bbc:	000d883a 	mov	r6,zero
    5bc0:	01d00534 	movhi	r7,16404
    5bc4:	8009883a 	mov	r4,r16
    5bc8:	000d4d00 	call	d4d0 <__muldf3>
    5bcc:	900d883a 	mov	r6,r18
    5bd0:	980f883a 	mov	r7,r19
    5bd4:	1009883a 	mov	r4,r2
    5bd8:	180b883a 	mov	r5,r3
    5bdc:	000d3000 	call	d300 <__gedf2>
    5be0:	002b883a 	mov	r21,zero
    5be4:	0023883a 	mov	r17,zero
    5be8:	1000bf16 	blt	r2,zero,5ee8 <_dtoa_r+0x1060>
    5bec:	d9802217 	ldw	r6,136(sp)
    5bf0:	ddc00717 	ldw	r23,28(sp)
    5bf4:	018c303a 	nor	r6,zero,r6
    5bf8:	d9800515 	stw	r6,20(sp)
    5bfc:	a80b883a 	mov	r5,r21
    5c00:	e009883a 	mov	r4,fp
    5c04:	0007dc00 	call	7dc0 <_Bfree>
    5c08:	883e4926 	beq	r17,zero,5530 <__alt_data_end+0xff005530>
    5c0c:	003fad06 	br	5ac4 <__alt_data_end+0xff005ac4>
    5c10:	d9c01117 	ldw	r7,68(sp)
    5c14:	3801bc26 	beq	r7,zero,6308 <_dtoa_r+0x1480>
    5c18:	10810cc4 	addi	r2,r2,1075
    5c1c:	dd400a17 	ldw	r21,40(sp)
    5c20:	dd000817 	ldw	r20,32(sp)
    5c24:	003f0a06 	br	5850 <__alt_data_end+0xff005850>
    5c28:	00800704 	movi	r2,28
    5c2c:	d9000817 	ldw	r4,32(sp)
    5c30:	a0a9883a 	add	r20,r20,r2
    5c34:	b0ad883a 	add	r22,r22,r2
    5c38:	2089883a 	add	r4,r4,r2
    5c3c:	d9000815 	stw	r4,32(sp)
    5c40:	003f5106 	br	5988 <__alt_data_end+0xff005988>
    5c44:	d8c00317 	ldw	r3,12(sp)
    5c48:	b8c1fc0e 	bge	r23,r3,643c <_dtoa_r+0x15b4>
    5c4c:	0027883a 	mov	r19,zero
    5c50:	b805883a 	mov	r2,r23
    5c54:	003f3e06 	br	5950 <__alt_data_end+0xff005950>
    5c58:	880b883a 	mov	r5,r17
    5c5c:	e009883a 	mov	r4,fp
    5c60:	000f883a 	mov	r7,zero
    5c64:	01800284 	movi	r6,10
    5c68:	0007de80 	call	7de8 <__multadd>
    5c6c:	d9000c17 	ldw	r4,48(sp)
    5c70:	1023883a 	mov	r17,r2
    5c74:	0102040e 	bge	zero,r4,6488 <_dtoa_r+0x1600>
    5c78:	d9000615 	stw	r4,24(sp)
    5c7c:	0500050e 	bge	zero,r20,5c94 <_dtoa_r+0xe0c>
    5c80:	880b883a 	mov	r5,r17
    5c84:	a00d883a 	mov	r6,r20
    5c88:	e009883a 	mov	r4,fp
    5c8c:	00084980 	call	8498 <__lshift>
    5c90:	1023883a 	mov	r17,r2
    5c94:	9801241e 	bne	r19,zero,6128 <_dtoa_r+0x12a0>
    5c98:	8829883a 	mov	r20,r17
    5c9c:	d9000617 	ldw	r4,24(sp)
    5ca0:	dcc00717 	ldw	r19,28(sp)
    5ca4:	9480004c 	andi	r18,r18,1
    5ca8:	20bfffc4 	addi	r2,r4,-1
    5cac:	9885883a 	add	r2,r19,r2
    5cb0:	d8800415 	stw	r2,16(sp)
    5cb4:	dc800615 	stw	r18,24(sp)
    5cb8:	a80b883a 	mov	r5,r21
    5cbc:	8009883a 	mov	r4,r16
    5cc0:	0004c880 	call	4c88 <quorem>
    5cc4:	880b883a 	mov	r5,r17
    5cc8:	8009883a 	mov	r4,r16
    5ccc:	102f883a 	mov	r23,r2
    5cd0:	00085e00 	call	85e0 <__mcmp>
    5cd4:	a80b883a 	mov	r5,r21
    5cd8:	a00d883a 	mov	r6,r20
    5cdc:	e009883a 	mov	r4,fp
    5ce0:	102d883a 	mov	r22,r2
    5ce4:	00086400 	call	8640 <__mdiff>
    5ce8:	1007883a 	mov	r3,r2
    5cec:	10800317 	ldw	r2,12(r2)
    5cf0:	bc800c04 	addi	r18,r23,48
    5cf4:	180b883a 	mov	r5,r3
    5cf8:	10004e1e 	bne	r2,zero,5e34 <_dtoa_r+0xfac>
    5cfc:	8009883a 	mov	r4,r16
    5d00:	d8c01615 	stw	r3,88(sp)
    5d04:	00085e00 	call	85e0 <__mcmp>
    5d08:	d8c01617 	ldw	r3,88(sp)
    5d0c:	e009883a 	mov	r4,fp
    5d10:	d8801615 	stw	r2,88(sp)
    5d14:	180b883a 	mov	r5,r3
    5d18:	0007dc00 	call	7dc0 <_Bfree>
    5d1c:	d8801617 	ldw	r2,88(sp)
    5d20:	1000041e 	bne	r2,zero,5d34 <_dtoa_r+0xeac>
    5d24:	d9800317 	ldw	r6,12(sp)
    5d28:	3000021e 	bne	r6,zero,5d34 <_dtoa_r+0xeac>
    5d2c:	d8c00617 	ldw	r3,24(sp)
    5d30:	18003726 	beq	r3,zero,5e10 <_dtoa_r+0xf88>
    5d34:	b0002016 	blt	r22,zero,5db8 <_dtoa_r+0xf30>
    5d38:	b000041e 	bne	r22,zero,5d4c <_dtoa_r+0xec4>
    5d3c:	d9000317 	ldw	r4,12(sp)
    5d40:	2000021e 	bne	r4,zero,5d4c <_dtoa_r+0xec4>
    5d44:	d8c00617 	ldw	r3,24(sp)
    5d48:	18001b26 	beq	r3,zero,5db8 <_dtoa_r+0xf30>
    5d4c:	00810716 	blt	zero,r2,616c <_dtoa_r+0x12e4>
    5d50:	d8c00417 	ldw	r3,16(sp)
    5d54:	9d800044 	addi	r22,r19,1
    5d58:	9c800005 	stb	r18,0(r19)
    5d5c:	b02f883a 	mov	r23,r22
    5d60:	98c10626 	beq	r19,r3,617c <_dtoa_r+0x12f4>
    5d64:	800b883a 	mov	r5,r16
    5d68:	000f883a 	mov	r7,zero
    5d6c:	01800284 	movi	r6,10
    5d70:	e009883a 	mov	r4,fp
    5d74:	0007de80 	call	7de8 <__multadd>
    5d78:	1021883a 	mov	r16,r2
    5d7c:	000f883a 	mov	r7,zero
    5d80:	01800284 	movi	r6,10
    5d84:	880b883a 	mov	r5,r17
    5d88:	e009883a 	mov	r4,fp
    5d8c:	8d002526 	beq	r17,r20,5e24 <_dtoa_r+0xf9c>
    5d90:	0007de80 	call	7de8 <__multadd>
    5d94:	a00b883a 	mov	r5,r20
    5d98:	000f883a 	mov	r7,zero
    5d9c:	01800284 	movi	r6,10
    5da0:	e009883a 	mov	r4,fp
    5da4:	1023883a 	mov	r17,r2
    5da8:	0007de80 	call	7de8 <__multadd>
    5dac:	1029883a 	mov	r20,r2
    5db0:	b027883a 	mov	r19,r22
    5db4:	003fc006 	br	5cb8 <__alt_data_end+0xff005cb8>
    5db8:	9011883a 	mov	r8,r18
    5dbc:	00800e0e 	bge	zero,r2,5df8 <_dtoa_r+0xf70>
    5dc0:	800b883a 	mov	r5,r16
    5dc4:	01800044 	movi	r6,1
    5dc8:	e009883a 	mov	r4,fp
    5dcc:	da001715 	stw	r8,92(sp)
    5dd0:	00084980 	call	8498 <__lshift>
    5dd4:	a80b883a 	mov	r5,r21
    5dd8:	1009883a 	mov	r4,r2
    5ddc:	1021883a 	mov	r16,r2
    5de0:	00085e00 	call	85e0 <__mcmp>
    5de4:	da001717 	ldw	r8,92(sp)
    5de8:	0081960e 	bge	zero,r2,6444 <_dtoa_r+0x15bc>
    5dec:	00800e44 	movi	r2,57
    5df0:	40817026 	beq	r8,r2,63b4 <_dtoa_r+0x152c>
    5df4:	ba000c44 	addi	r8,r23,49
    5df8:	8825883a 	mov	r18,r17
    5dfc:	9dc00044 	addi	r23,r19,1
    5e00:	9a000005 	stb	r8,0(r19)
    5e04:	a023883a 	mov	r17,r20
    5e08:	dc000915 	stw	r16,36(sp)
    5e0c:	003f2406 	br	5aa0 <__alt_data_end+0xff005aa0>
    5e10:	00800e44 	movi	r2,57
    5e14:	9011883a 	mov	r8,r18
    5e18:	90816626 	beq	r18,r2,63b4 <_dtoa_r+0x152c>
    5e1c:	05bff516 	blt	zero,r22,5df4 <__alt_data_end+0xff005df4>
    5e20:	003ff506 	br	5df8 <__alt_data_end+0xff005df8>
    5e24:	0007de80 	call	7de8 <__multadd>
    5e28:	1023883a 	mov	r17,r2
    5e2c:	1029883a 	mov	r20,r2
    5e30:	003fdf06 	br	5db0 <__alt_data_end+0xff005db0>
    5e34:	e009883a 	mov	r4,fp
    5e38:	0007dc00 	call	7dc0 <_Bfree>
    5e3c:	00800044 	movi	r2,1
    5e40:	003fbc06 	br	5d34 <__alt_data_end+0xff005d34>
    5e44:	a80b883a 	mov	r5,r21
    5e48:	8009883a 	mov	r4,r16
    5e4c:	00085e00 	call	85e0 <__mcmp>
    5e50:	103edb0e 	bge	r2,zero,59c0 <__alt_data_end+0xff0059c0>
    5e54:	800b883a 	mov	r5,r16
    5e58:	000f883a 	mov	r7,zero
    5e5c:	01800284 	movi	r6,10
    5e60:	e009883a 	mov	r4,fp
    5e64:	0007de80 	call	7de8 <__multadd>
    5e68:	1021883a 	mov	r16,r2
    5e6c:	d8800517 	ldw	r2,20(sp)
    5e70:	d8c00b17 	ldw	r3,44(sp)
    5e74:	10bfffc4 	addi	r2,r2,-1
    5e78:	d8800515 	stw	r2,20(sp)
    5e7c:	183f761e 	bne	r3,zero,5c58 <__alt_data_end+0xff005c58>
    5e80:	d9000c17 	ldw	r4,48(sp)
    5e84:	0101730e 	bge	zero,r4,6454 <_dtoa_r+0x15cc>
    5e88:	d9000615 	stw	r4,24(sp)
    5e8c:	003ed006 	br	59d0 <__alt_data_end+0xff0059d0>
    5e90:	00800084 	movi	r2,2
    5e94:	3081861e 	bne	r6,r2,64b0 <_dtoa_r+0x1628>
    5e98:	d8000b15 	stw	zero,44(sp)
    5e9c:	003f3c06 	br	5b90 <__alt_data_end+0xff005b90>
    5ea0:	dc000917 	ldw	r16,36(sp)
    5ea4:	003e9206 	br	58f0 <__alt_data_end+0xff0058f0>
    5ea8:	d9c00317 	ldw	r7,12(sp)
    5eac:	00800084 	movi	r2,2
    5eb0:	11fec50e 	bge	r2,r7,59c8 <__alt_data_end+0xff0059c8>
    5eb4:	d9000617 	ldw	r4,24(sp)
    5eb8:	20013c1e 	bne	r4,zero,63ac <_dtoa_r+0x1524>
    5ebc:	a80b883a 	mov	r5,r21
    5ec0:	000f883a 	mov	r7,zero
    5ec4:	01800144 	movi	r6,5
    5ec8:	e009883a 	mov	r4,fp
    5ecc:	0007de80 	call	7de8 <__multadd>
    5ed0:	100b883a 	mov	r5,r2
    5ed4:	8009883a 	mov	r4,r16
    5ed8:	102b883a 	mov	r21,r2
    5edc:	00085e00 	call	85e0 <__mcmp>
    5ee0:	dc000915 	stw	r16,36(sp)
    5ee4:	00bf410e 	bge	zero,r2,5bec <__alt_data_end+0xff005bec>
    5ee8:	d9c00717 	ldw	r7,28(sp)
    5eec:	00800c44 	movi	r2,49
    5ef0:	38800005 	stb	r2,0(r7)
    5ef4:	d8800517 	ldw	r2,20(sp)
    5ef8:	3dc00044 	addi	r23,r7,1
    5efc:	10800044 	addi	r2,r2,1
    5f00:	d8800515 	stw	r2,20(sp)
    5f04:	003f3d06 	br	5bfc <__alt_data_end+0xff005bfc>
    5f08:	d9800517 	ldw	r6,20(sp)
    5f0c:	d9c00717 	ldw	r7,28(sp)
    5f10:	00800c44 	movi	r2,49
    5f14:	31800044 	addi	r6,r6,1
    5f18:	d9800515 	stw	r6,20(sp)
    5f1c:	38800005 	stb	r2,0(r7)
    5f20:	003edf06 	br	5aa0 <__alt_data_end+0xff005aa0>
    5f24:	d8000b15 	stw	zero,44(sp)
    5f28:	003c9f06 	br	51a8 <__alt_data_end+0xff0051a8>
    5f2c:	903e7e1e 	bne	r18,zero,5928 <__alt_data_end+0xff005928>
    5f30:	00800434 	movhi	r2,16
    5f34:	10bfffc4 	addi	r2,r2,-1
    5f38:	9884703a 	and	r2,r19,r2
    5f3c:	1000ea1e 	bne	r2,zero,62e8 <_dtoa_r+0x1460>
    5f40:	9cdffc2c 	andhi	r19,r19,32752
    5f44:	9800e826 	beq	r19,zero,62e8 <_dtoa_r+0x1460>
    5f48:	d9c00817 	ldw	r7,32(sp)
    5f4c:	b5800044 	addi	r22,r22,1
    5f50:	04c00044 	movi	r19,1
    5f54:	39c00044 	addi	r7,r7,1
    5f58:	d9c00815 	stw	r7,32(sp)
    5f5c:	d8800d17 	ldw	r2,52(sp)
    5f60:	103e721e 	bne	r2,zero,592c <__alt_data_end+0xff00592c>
    5f64:	00800044 	movi	r2,1
    5f68:	003e7906 	br	5950 <__alt_data_end+0xff005950>
    5f6c:	8009883a 	mov	r4,r16
    5f70:	000e5640 	call	e564 <__floatsidf>
    5f74:	d9800f17 	ldw	r6,60(sp)
    5f78:	d9c01017 	ldw	r7,64(sp)
    5f7c:	1009883a 	mov	r4,r2
    5f80:	180b883a 	mov	r5,r3
    5f84:	000d4d00 	call	d4d0 <__muldf3>
    5f88:	000d883a 	mov	r6,zero
    5f8c:	01d00734 	movhi	r7,16412
    5f90:	1009883a 	mov	r4,r2
    5f94:	180b883a 	mov	r5,r3
    5f98:	000c0e40 	call	c0e4 <__adddf3>
    5f9c:	047f3034 	movhi	r17,64704
    5fa0:	1021883a 	mov	r16,r2
    5fa4:	1c63883a 	add	r17,r3,r17
    5fa8:	d9000f17 	ldw	r4,60(sp)
    5fac:	d9401017 	ldw	r5,64(sp)
    5fb0:	000d883a 	mov	r6,zero
    5fb4:	01d00534 	movhi	r7,16404
    5fb8:	000dbe80 	call	dbe8 <__subdf3>
    5fbc:	800d883a 	mov	r6,r16
    5fc0:	880f883a 	mov	r7,r17
    5fc4:	1009883a 	mov	r4,r2
    5fc8:	180b883a 	mov	r5,r3
    5fcc:	102b883a 	mov	r21,r2
    5fd0:	1829883a 	mov	r20,r3
    5fd4:	000d3000 	call	d300 <__gedf2>
    5fd8:	00806c16 	blt	zero,r2,618c <_dtoa_r+0x1304>
    5fdc:	89e0003c 	xorhi	r7,r17,32768
    5fe0:	800d883a 	mov	r6,r16
    5fe4:	a809883a 	mov	r4,r21
    5fe8:	a00b883a 	mov	r5,r20
    5fec:	000d3dc0 	call	d3dc <__ledf2>
    5ff0:	103d7e0e 	bge	r2,zero,55ec <__alt_data_end+0xff0055ec>
    5ff4:	002b883a 	mov	r21,zero
    5ff8:	0023883a 	mov	r17,zero
    5ffc:	003efb06 	br	5bec <__alt_data_end+0xff005bec>
    6000:	d8800717 	ldw	r2,28(sp)
    6004:	003bd006 	br	4f48 <__alt_data_end+0xff004f48>
    6008:	d9000a17 	ldw	r4,40(sp)
    600c:	d9800d17 	ldw	r6,52(sp)
    6010:	dd400a15 	stw	r21,40(sp)
    6014:	a905c83a 	sub	r2,r21,r4
    6018:	308d883a 	add	r6,r6,r2
    601c:	d9800d15 	stw	r6,52(sp)
    6020:	002b883a 	mov	r21,zero
    6024:	003e0606 	br	5840 <__alt_data_end+0xff005840>
    6028:	9023883a 	mov	r17,r18
    602c:	9829883a 	mov	r20,r19
    6030:	04000084 	movi	r16,2
    6034:	003c9206 	br	5280 <__alt_data_end+0xff005280>
    6038:	04000044 	movi	r16,1
    603c:	dc000c15 	stw	r16,48(sp)
    6040:	dc000615 	stw	r16,24(sp)
    6044:	dc002215 	stw	r16,136(sp)
    6048:	e0001115 	stw	zero,68(fp)
    604c:	000b883a 	mov	r5,zero
    6050:	003c6906 	br	51f8 <__alt_data_end+0xff0051f8>
    6054:	3021883a 	mov	r16,r6
    6058:	003ffb06 	br	6048 <__alt_data_end+0xff006048>
    605c:	1000021e 	bne	r2,zero,6068 <_dtoa_r+0x11e0>
    6060:	4200004c 	andi	r8,r8,1
    6064:	403e7d1e 	bne	r8,zero,5a5c <__alt_data_end+0xff005a5c>
    6068:	01000c04 	movi	r4,48
    606c:	00000106 	br	6074 <_dtoa_r+0x11ec>
    6070:	102f883a 	mov	r23,r2
    6074:	b8bfffc4 	addi	r2,r23,-1
    6078:	10c00007 	ldb	r3,0(r2)
    607c:	193ffc26 	beq	r3,r4,6070 <__alt_data_end+0xff006070>
    6080:	003e8706 	br	5aa0 <__alt_data_end+0xff005aa0>
    6084:	d8800517 	ldw	r2,20(sp)
    6088:	00a3c83a 	sub	r17,zero,r2
    608c:	8800a426 	beq	r17,zero,6320 <_dtoa_r+0x1498>
    6090:	888003cc 	andi	r2,r17,15
    6094:	100490fa 	slli	r2,r2,3
    6098:	00c00074 	movhi	r3,1
    609c:	18c18f04 	addi	r3,r3,1596
    60a0:	1885883a 	add	r2,r3,r2
    60a4:	11800017 	ldw	r6,0(r2)
    60a8:	11c00117 	ldw	r7,4(r2)
    60ac:	9009883a 	mov	r4,r18
    60b0:	980b883a 	mov	r5,r19
    60b4:	8823d13a 	srai	r17,r17,4
    60b8:	000d4d00 	call	d4d0 <__muldf3>
    60bc:	d8800f15 	stw	r2,60(sp)
    60c0:	d8c01015 	stw	r3,64(sp)
    60c4:	8800e826 	beq	r17,zero,6468 <_dtoa_r+0x15e0>
    60c8:	05000074 	movhi	r20,1
    60cc:	a5018504 	addi	r20,r20,1556
    60d0:	04000084 	movi	r16,2
    60d4:	8980004c 	andi	r6,r17,1
    60d8:	1009883a 	mov	r4,r2
    60dc:	8823d07a 	srai	r17,r17,1
    60e0:	180b883a 	mov	r5,r3
    60e4:	30000426 	beq	r6,zero,60f8 <_dtoa_r+0x1270>
    60e8:	a1800017 	ldw	r6,0(r20)
    60ec:	a1c00117 	ldw	r7,4(r20)
    60f0:	84000044 	addi	r16,r16,1
    60f4:	000d4d00 	call	d4d0 <__muldf3>
    60f8:	a5000204 	addi	r20,r20,8
    60fc:	883ff51e 	bne	r17,zero,60d4 <__alt_data_end+0xff0060d4>
    6100:	d8800f15 	stw	r2,60(sp)
    6104:	d8c01015 	stw	r3,64(sp)
    6108:	003c7606 	br	52e4 <__alt_data_end+0xff0052e4>
    610c:	00c00c04 	movi	r3,48
    6110:	10c00005 	stb	r3,0(r2)
    6114:	d8c00517 	ldw	r3,20(sp)
    6118:	bd3fffc3 	ldbu	r20,-1(r23)
    611c:	18c00044 	addi	r3,r3,1
    6120:	d8c00515 	stw	r3,20(sp)
    6124:	003db906 	br	580c <__alt_data_end+0xff00580c>
    6128:	89400117 	ldw	r5,4(r17)
    612c:	e009883a 	mov	r4,fp
    6130:	0007d180 	call	7d18 <_Balloc>
    6134:	89800417 	ldw	r6,16(r17)
    6138:	89400304 	addi	r5,r17,12
    613c:	11000304 	addi	r4,r2,12
    6140:	31800084 	addi	r6,r6,2
    6144:	318d883a 	add	r6,r6,r6
    6148:	318d883a 	add	r6,r6,r6
    614c:	1027883a 	mov	r19,r2
    6150:	000794c0 	call	794c <memcpy>
    6154:	01800044 	movi	r6,1
    6158:	980b883a 	mov	r5,r19
    615c:	e009883a 	mov	r4,fp
    6160:	00084980 	call	8498 <__lshift>
    6164:	1029883a 	mov	r20,r2
    6168:	003ecc06 	br	5c9c <__alt_data_end+0xff005c9c>
    616c:	00800e44 	movi	r2,57
    6170:	90809026 	beq	r18,r2,63b4 <_dtoa_r+0x152c>
    6174:	92000044 	addi	r8,r18,1
    6178:	003f1f06 	br	5df8 <__alt_data_end+0xff005df8>
    617c:	9011883a 	mov	r8,r18
    6180:	8825883a 	mov	r18,r17
    6184:	a023883a 	mov	r17,r20
    6188:	003e2906 	br	5a30 <__alt_data_end+0xff005a30>
    618c:	002b883a 	mov	r21,zero
    6190:	0023883a 	mov	r17,zero
    6194:	003f5406 	br	5ee8 <__alt_data_end+0xff005ee8>
    6198:	61bfffc4 	addi	r6,r12,-1
    619c:	300490fa 	slli	r2,r6,3
    61a0:	00c00074 	movhi	r3,1
    61a4:	18c18f04 	addi	r3,r3,1596
    61a8:	1885883a 	add	r2,r3,r2
    61ac:	11000017 	ldw	r4,0(r2)
    61b0:	11400117 	ldw	r5,4(r2)
    61b4:	d8800717 	ldw	r2,28(sp)
    61b8:	880f883a 	mov	r7,r17
    61bc:	d9801215 	stw	r6,72(sp)
    61c0:	800d883a 	mov	r6,r16
    61c4:	db001615 	stw	r12,88(sp)
    61c8:	15c00044 	addi	r23,r2,1
    61cc:	000d4d00 	call	d4d0 <__muldf3>
    61d0:	d9401017 	ldw	r5,64(sp)
    61d4:	d9000f17 	ldw	r4,60(sp)
    61d8:	d8c01515 	stw	r3,84(sp)
    61dc:	d8801415 	stw	r2,80(sp)
    61e0:	000e4e40 	call	e4e4 <__fixdfsi>
    61e4:	1009883a 	mov	r4,r2
    61e8:	1021883a 	mov	r16,r2
    61ec:	000e5640 	call	e564 <__floatsidf>
    61f0:	d9000f17 	ldw	r4,60(sp)
    61f4:	d9401017 	ldw	r5,64(sp)
    61f8:	100d883a 	mov	r6,r2
    61fc:	180f883a 	mov	r7,r3
    6200:	000dbe80 	call	dbe8 <__subdf3>
    6204:	1829883a 	mov	r20,r3
    6208:	d8c00717 	ldw	r3,28(sp)
    620c:	84000c04 	addi	r16,r16,48
    6210:	1023883a 	mov	r17,r2
    6214:	1c000005 	stb	r16,0(r3)
    6218:	db001617 	ldw	r12,88(sp)
    621c:	00800044 	movi	r2,1
    6220:	60802226 	beq	r12,r2,62ac <_dtoa_r+0x1424>
    6224:	d9c00717 	ldw	r7,28(sp)
    6228:	8805883a 	mov	r2,r17
    622c:	b82b883a 	mov	r21,r23
    6230:	3b19883a 	add	r12,r7,r12
    6234:	6023883a 	mov	r17,r12
    6238:	a007883a 	mov	r3,r20
    623c:	dc800f15 	stw	r18,60(sp)
    6240:	000d883a 	mov	r6,zero
    6244:	01d00934 	movhi	r7,16420
    6248:	1009883a 	mov	r4,r2
    624c:	180b883a 	mov	r5,r3
    6250:	000d4d00 	call	d4d0 <__muldf3>
    6254:	180b883a 	mov	r5,r3
    6258:	1009883a 	mov	r4,r2
    625c:	1829883a 	mov	r20,r3
    6260:	1025883a 	mov	r18,r2
    6264:	000e4e40 	call	e4e4 <__fixdfsi>
    6268:	1009883a 	mov	r4,r2
    626c:	1021883a 	mov	r16,r2
    6270:	000e5640 	call	e564 <__floatsidf>
    6274:	100d883a 	mov	r6,r2
    6278:	180f883a 	mov	r7,r3
    627c:	9009883a 	mov	r4,r18
    6280:	a00b883a 	mov	r5,r20
    6284:	84000c04 	addi	r16,r16,48
    6288:	000dbe80 	call	dbe8 <__subdf3>
    628c:	ad400044 	addi	r21,r21,1
    6290:	ac3fffc5 	stb	r16,-1(r21)
    6294:	ac7fea1e 	bne	r21,r17,6240 <__alt_data_end+0xff006240>
    6298:	1023883a 	mov	r17,r2
    629c:	d8801217 	ldw	r2,72(sp)
    62a0:	dc800f17 	ldw	r18,60(sp)
    62a4:	1829883a 	mov	r20,r3
    62a8:	b8af883a 	add	r23,r23,r2
    62ac:	d9001417 	ldw	r4,80(sp)
    62b0:	d9401517 	ldw	r5,84(sp)
    62b4:	000d883a 	mov	r6,zero
    62b8:	01cff834 	movhi	r7,16352
    62bc:	000c0e40 	call	c0e4 <__adddf3>
    62c0:	880d883a 	mov	r6,r17
    62c4:	a00f883a 	mov	r7,r20
    62c8:	1009883a 	mov	r4,r2
    62cc:	180b883a 	mov	r5,r3
    62d0:	000d3dc0 	call	d3dc <__ledf2>
    62d4:	10003e0e 	bge	r2,zero,63d0 <_dtoa_r+0x1548>
    62d8:	d9001317 	ldw	r4,76(sp)
    62dc:	bd3fffc3 	ldbu	r20,-1(r23)
    62e0:	d9000515 	stw	r4,20(sp)
    62e4:	003d3b06 	br	57d4 <__alt_data_end+0xff0057d4>
    62e8:	0027883a 	mov	r19,zero
    62ec:	003f1b06 	br	5f5c <__alt_data_end+0xff005f5c>
    62f0:	d8800817 	ldw	r2,32(sp)
    62f4:	11e9c83a 	sub	r20,r2,r7
    62f8:	0005883a 	mov	r2,zero
    62fc:	003d5406 	br	5850 <__alt_data_end+0xff005850>
    6300:	00800044 	movi	r2,1
    6304:	003dc706 	br	5a24 <__alt_data_end+0xff005a24>
    6308:	d8c00217 	ldw	r3,8(sp)
    630c:	00800d84 	movi	r2,54
    6310:	dd400a17 	ldw	r21,40(sp)
    6314:	10c5c83a 	sub	r2,r2,r3
    6318:	dd000817 	ldw	r20,32(sp)
    631c:	003d4c06 	br	5850 <__alt_data_end+0xff005850>
    6320:	dc800f15 	stw	r18,60(sp)
    6324:	dcc01015 	stw	r19,64(sp)
    6328:	04000084 	movi	r16,2
    632c:	003bed06 	br	52e4 <__alt_data_end+0xff0052e4>
    6330:	d9000617 	ldw	r4,24(sp)
    6334:	203f0d26 	beq	r4,zero,5f6c <__alt_data_end+0xff005f6c>
    6338:	d9800c17 	ldw	r6,48(sp)
    633c:	01bcab0e 	bge	zero,r6,55ec <__alt_data_end+0xff0055ec>
    6340:	d9401017 	ldw	r5,64(sp)
    6344:	d9000f17 	ldw	r4,60(sp)
    6348:	000d883a 	mov	r6,zero
    634c:	01d00934 	movhi	r7,16420
    6350:	000d4d00 	call	d4d0 <__muldf3>
    6354:	81000044 	addi	r4,r16,1
    6358:	d8800f15 	stw	r2,60(sp)
    635c:	d8c01015 	stw	r3,64(sp)
    6360:	000e5640 	call	e564 <__floatsidf>
    6364:	d9800f17 	ldw	r6,60(sp)
    6368:	d9c01017 	ldw	r7,64(sp)
    636c:	1009883a 	mov	r4,r2
    6370:	180b883a 	mov	r5,r3
    6374:	000d4d00 	call	d4d0 <__muldf3>
    6378:	01d00734 	movhi	r7,16412
    637c:	000d883a 	mov	r6,zero
    6380:	1009883a 	mov	r4,r2
    6384:	180b883a 	mov	r5,r3
    6388:	000c0e40 	call	c0e4 <__adddf3>
    638c:	d9c00517 	ldw	r7,20(sp)
    6390:	047f3034 	movhi	r17,64704
    6394:	1021883a 	mov	r16,r2
    6398:	39ffffc4 	addi	r7,r7,-1
    639c:	d9c01315 	stw	r7,76(sp)
    63a0:	1c63883a 	add	r17,r3,r17
    63a4:	db000c17 	ldw	r12,48(sp)
    63a8:	003bea06 	br	5354 <__alt_data_end+0xff005354>
    63ac:	dc000915 	stw	r16,36(sp)
    63b0:	003e0e06 	br	5bec <__alt_data_end+0xff005bec>
    63b4:	01000e44 	movi	r4,57
    63b8:	8825883a 	mov	r18,r17
    63bc:	9dc00044 	addi	r23,r19,1
    63c0:	99000005 	stb	r4,0(r19)
    63c4:	a023883a 	mov	r17,r20
    63c8:	dc000915 	stw	r16,36(sp)
    63cc:	003da406 	br	5a60 <__alt_data_end+0xff005a60>
    63d0:	d9801417 	ldw	r6,80(sp)
    63d4:	d9c01517 	ldw	r7,84(sp)
    63d8:	0009883a 	mov	r4,zero
    63dc:	014ff834 	movhi	r5,16352
    63e0:	000dbe80 	call	dbe8 <__subdf3>
    63e4:	880d883a 	mov	r6,r17
    63e8:	a00f883a 	mov	r7,r20
    63ec:	1009883a 	mov	r4,r2
    63f0:	180b883a 	mov	r5,r3
    63f4:	000d3000 	call	d300 <__gedf2>
    63f8:	00bc7c0e 	bge	zero,r2,55ec <__alt_data_end+0xff0055ec>
    63fc:	01000c04 	movi	r4,48
    6400:	00000106 	br	6408 <_dtoa_r+0x1580>
    6404:	102f883a 	mov	r23,r2
    6408:	b8bfffc4 	addi	r2,r23,-1
    640c:	10c00007 	ldb	r3,0(r2)
    6410:	193ffc26 	beq	r3,r4,6404 <__alt_data_end+0xff006404>
    6414:	d9801317 	ldw	r6,76(sp)
    6418:	d9800515 	stw	r6,20(sp)
    641c:	003c4406 	br	5530 <__alt_data_end+0xff005530>
    6420:	d9801317 	ldw	r6,76(sp)
    6424:	d9800515 	stw	r6,20(sp)
    6428:	003cea06 	br	57d4 <__alt_data_end+0xff0057d4>
    642c:	dd800f17 	ldw	r22,60(sp)
    6430:	dcc01017 	ldw	r19,64(sp)
    6434:	dc801217 	ldw	r18,72(sp)
    6438:	003c6c06 	br	55ec <__alt_data_end+0xff0055ec>
    643c:	903e031e 	bne	r18,zero,5c4c <__alt_data_end+0xff005c4c>
    6440:	003ebb06 	br	5f30 <__alt_data_end+0xff005f30>
    6444:	103e6c1e 	bne	r2,zero,5df8 <__alt_data_end+0xff005df8>
    6448:	4080004c 	andi	r2,r8,1
    644c:	103e6a26 	beq	r2,zero,5df8 <__alt_data_end+0xff005df8>
    6450:	003e6606 	br	5dec <__alt_data_end+0xff005dec>
    6454:	d8c00317 	ldw	r3,12(sp)
    6458:	00800084 	movi	r2,2
    645c:	10c02916 	blt	r2,r3,6504 <_dtoa_r+0x167c>
    6460:	d9000c17 	ldw	r4,48(sp)
    6464:	003e8806 	br	5e88 <__alt_data_end+0xff005e88>
    6468:	04000084 	movi	r16,2
    646c:	003b9d06 	br	52e4 <__alt_data_end+0xff0052e4>
    6470:	d9001317 	ldw	r4,76(sp)
    6474:	d9000515 	stw	r4,20(sp)
    6478:	003cd606 	br	57d4 <__alt_data_end+0xff0057d4>
    647c:	d8801317 	ldw	r2,76(sp)
    6480:	d8800515 	stw	r2,20(sp)
    6484:	003c2a06 	br	5530 <__alt_data_end+0xff005530>
    6488:	d9800317 	ldw	r6,12(sp)
    648c:	00800084 	movi	r2,2
    6490:	11801516 	blt	r2,r6,64e8 <_dtoa_r+0x1660>
    6494:	d9c00c17 	ldw	r7,48(sp)
    6498:	d9c00615 	stw	r7,24(sp)
    649c:	003df706 	br	5c7c <__alt_data_end+0xff005c7c>
    64a0:	193d3926 	beq	r3,r4,5988 <__alt_data_end+0xff005988>
    64a4:	00c00f04 	movi	r3,60
    64a8:	1885c83a 	sub	r2,r3,r2
    64ac:	003ddf06 	br	5c2c <__alt_data_end+0xff005c2c>
    64b0:	e009883a 	mov	r4,fp
    64b4:	e0001115 	stw	zero,68(fp)
    64b8:	000b883a 	mov	r5,zero
    64bc:	0007d180 	call	7d18 <_Balloc>
    64c0:	d8800715 	stw	r2,28(sp)
    64c4:	d8c00717 	ldw	r3,28(sp)
    64c8:	00bfffc4 	movi	r2,-1
    64cc:	01000044 	movi	r4,1
    64d0:	d8800c15 	stw	r2,48(sp)
    64d4:	e0c01015 	stw	r3,64(fp)
    64d8:	d9000b15 	stw	r4,44(sp)
    64dc:	d8800615 	stw	r2,24(sp)
    64e0:	d8002215 	stw	zero,136(sp)
    64e4:	003c4106 	br	55ec <__alt_data_end+0xff0055ec>
    64e8:	d8c00c17 	ldw	r3,48(sp)
    64ec:	d8c00615 	stw	r3,24(sp)
    64f0:	003e7006 	br	5eb4 <__alt_data_end+0xff005eb4>
    64f4:	04400044 	movi	r17,1
    64f8:	003b2006 	br	517c <__alt_data_end+0xff00517c>
    64fc:	000b883a 	mov	r5,zero
    6500:	003b3d06 	br	51f8 <__alt_data_end+0xff0051f8>
    6504:	d8800c17 	ldw	r2,48(sp)
    6508:	d8800615 	stw	r2,24(sp)
    650c:	003e6906 	br	5eb4 <__alt_data_end+0xff005eb4>

00006510 <__sflush_r>:
    6510:	2880030b 	ldhu	r2,12(r5)
    6514:	defffb04 	addi	sp,sp,-20
    6518:	dcc00315 	stw	r19,12(sp)
    651c:	dc400115 	stw	r17,4(sp)
    6520:	dfc00415 	stw	ra,16(sp)
    6524:	dc800215 	stw	r18,8(sp)
    6528:	dc000015 	stw	r16,0(sp)
    652c:	10c0020c 	andi	r3,r2,8
    6530:	2823883a 	mov	r17,r5
    6534:	2027883a 	mov	r19,r4
    6538:	1800311e 	bne	r3,zero,6600 <__sflush_r+0xf0>
    653c:	28c00117 	ldw	r3,4(r5)
    6540:	10820014 	ori	r2,r2,2048
    6544:	2880030d 	sth	r2,12(r5)
    6548:	00c04b0e 	bge	zero,r3,6678 <__sflush_r+0x168>
    654c:	8a000a17 	ldw	r8,40(r17)
    6550:	40002326 	beq	r8,zero,65e0 <__sflush_r+0xd0>
    6554:	9c000017 	ldw	r16,0(r19)
    6558:	10c4000c 	andi	r3,r2,4096
    655c:	98000015 	stw	zero,0(r19)
    6560:	18004826 	beq	r3,zero,6684 <__sflush_r+0x174>
    6564:	89801417 	ldw	r6,80(r17)
    6568:	10c0010c 	andi	r3,r2,4
    656c:	18000626 	beq	r3,zero,6588 <__sflush_r+0x78>
    6570:	88c00117 	ldw	r3,4(r17)
    6574:	88800c17 	ldw	r2,48(r17)
    6578:	30cdc83a 	sub	r6,r6,r3
    657c:	10000226 	beq	r2,zero,6588 <__sflush_r+0x78>
    6580:	88800f17 	ldw	r2,60(r17)
    6584:	308dc83a 	sub	r6,r6,r2
    6588:	89400717 	ldw	r5,28(r17)
    658c:	000f883a 	mov	r7,zero
    6590:	9809883a 	mov	r4,r19
    6594:	403ee83a 	callr	r8
    6598:	00ffffc4 	movi	r3,-1
    659c:	10c04426 	beq	r2,r3,66b0 <__sflush_r+0x1a0>
    65a0:	88c0030b 	ldhu	r3,12(r17)
    65a4:	89000417 	ldw	r4,16(r17)
    65a8:	88000115 	stw	zero,4(r17)
    65ac:	197dffcc 	andi	r5,r3,63487
    65b0:	8940030d 	sth	r5,12(r17)
    65b4:	89000015 	stw	r4,0(r17)
    65b8:	18c4000c 	andi	r3,r3,4096
    65bc:	18002c1e 	bne	r3,zero,6670 <__sflush_r+0x160>
    65c0:	89400c17 	ldw	r5,48(r17)
    65c4:	9c000015 	stw	r16,0(r19)
    65c8:	28000526 	beq	r5,zero,65e0 <__sflush_r+0xd0>
    65cc:	88801004 	addi	r2,r17,64
    65d0:	28800226 	beq	r5,r2,65dc <__sflush_r+0xcc>
    65d4:	9809883a 	mov	r4,r19
    65d8:	0006c7c0 	call	6c7c <_free_r>
    65dc:	88000c15 	stw	zero,48(r17)
    65e0:	0005883a 	mov	r2,zero
    65e4:	dfc00417 	ldw	ra,16(sp)
    65e8:	dcc00317 	ldw	r19,12(sp)
    65ec:	dc800217 	ldw	r18,8(sp)
    65f0:	dc400117 	ldw	r17,4(sp)
    65f4:	dc000017 	ldw	r16,0(sp)
    65f8:	dec00504 	addi	sp,sp,20
    65fc:	f800283a 	ret
    6600:	2c800417 	ldw	r18,16(r5)
    6604:	903ff626 	beq	r18,zero,65e0 <__alt_data_end+0xff0065e0>
    6608:	2c000017 	ldw	r16,0(r5)
    660c:	108000cc 	andi	r2,r2,3
    6610:	2c800015 	stw	r18,0(r5)
    6614:	84a1c83a 	sub	r16,r16,r18
    6618:	1000131e 	bne	r2,zero,6668 <__sflush_r+0x158>
    661c:	28800517 	ldw	r2,20(r5)
    6620:	88800215 	stw	r2,8(r17)
    6624:	04000316 	blt	zero,r16,6634 <__sflush_r+0x124>
    6628:	003fed06 	br	65e0 <__alt_data_end+0xff0065e0>
    662c:	90a5883a 	add	r18,r18,r2
    6630:	043feb0e 	bge	zero,r16,65e0 <__alt_data_end+0xff0065e0>
    6634:	88800917 	ldw	r2,36(r17)
    6638:	89400717 	ldw	r5,28(r17)
    663c:	800f883a 	mov	r7,r16
    6640:	900d883a 	mov	r6,r18
    6644:	9809883a 	mov	r4,r19
    6648:	103ee83a 	callr	r2
    664c:	80a1c83a 	sub	r16,r16,r2
    6650:	00bff616 	blt	zero,r2,662c <__alt_data_end+0xff00662c>
    6654:	88c0030b 	ldhu	r3,12(r17)
    6658:	00bfffc4 	movi	r2,-1
    665c:	18c01014 	ori	r3,r3,64
    6660:	88c0030d 	sth	r3,12(r17)
    6664:	003fdf06 	br	65e4 <__alt_data_end+0xff0065e4>
    6668:	0005883a 	mov	r2,zero
    666c:	003fec06 	br	6620 <__alt_data_end+0xff006620>
    6670:	88801415 	stw	r2,80(r17)
    6674:	003fd206 	br	65c0 <__alt_data_end+0xff0065c0>
    6678:	28c00f17 	ldw	r3,60(r5)
    667c:	00ffb316 	blt	zero,r3,654c <__alt_data_end+0xff00654c>
    6680:	003fd706 	br	65e0 <__alt_data_end+0xff0065e0>
    6684:	89400717 	ldw	r5,28(r17)
    6688:	000d883a 	mov	r6,zero
    668c:	01c00044 	movi	r7,1
    6690:	9809883a 	mov	r4,r19
    6694:	403ee83a 	callr	r8
    6698:	100d883a 	mov	r6,r2
    669c:	00bfffc4 	movi	r2,-1
    66a0:	30801426 	beq	r6,r2,66f4 <__sflush_r+0x1e4>
    66a4:	8880030b 	ldhu	r2,12(r17)
    66a8:	8a000a17 	ldw	r8,40(r17)
    66ac:	003fae06 	br	6568 <__alt_data_end+0xff006568>
    66b0:	98c00017 	ldw	r3,0(r19)
    66b4:	183fba26 	beq	r3,zero,65a0 <__alt_data_end+0xff0065a0>
    66b8:	01000744 	movi	r4,29
    66bc:	19000626 	beq	r3,r4,66d8 <__sflush_r+0x1c8>
    66c0:	01000584 	movi	r4,22
    66c4:	19000426 	beq	r3,r4,66d8 <__sflush_r+0x1c8>
    66c8:	88c0030b 	ldhu	r3,12(r17)
    66cc:	18c01014 	ori	r3,r3,64
    66d0:	88c0030d 	sth	r3,12(r17)
    66d4:	003fc306 	br	65e4 <__alt_data_end+0xff0065e4>
    66d8:	8880030b 	ldhu	r2,12(r17)
    66dc:	88c00417 	ldw	r3,16(r17)
    66e0:	88000115 	stw	zero,4(r17)
    66e4:	10bdffcc 	andi	r2,r2,63487
    66e8:	8880030d 	sth	r2,12(r17)
    66ec:	88c00015 	stw	r3,0(r17)
    66f0:	003fb306 	br	65c0 <__alt_data_end+0xff0065c0>
    66f4:	98800017 	ldw	r2,0(r19)
    66f8:	103fea26 	beq	r2,zero,66a4 <__alt_data_end+0xff0066a4>
    66fc:	00c00744 	movi	r3,29
    6700:	10c00226 	beq	r2,r3,670c <__sflush_r+0x1fc>
    6704:	00c00584 	movi	r3,22
    6708:	10c0031e 	bne	r2,r3,6718 <__sflush_r+0x208>
    670c:	9c000015 	stw	r16,0(r19)
    6710:	0005883a 	mov	r2,zero
    6714:	003fb306 	br	65e4 <__alt_data_end+0xff0065e4>
    6718:	88c0030b 	ldhu	r3,12(r17)
    671c:	3005883a 	mov	r2,r6
    6720:	18c01014 	ori	r3,r3,64
    6724:	88c0030d 	sth	r3,12(r17)
    6728:	003fae06 	br	65e4 <__alt_data_end+0xff0065e4>

0000672c <_fflush_r>:
    672c:	defffd04 	addi	sp,sp,-12
    6730:	dc000115 	stw	r16,4(sp)
    6734:	dfc00215 	stw	ra,8(sp)
    6738:	2021883a 	mov	r16,r4
    673c:	20000226 	beq	r4,zero,6748 <_fflush_r+0x1c>
    6740:	20800e17 	ldw	r2,56(r4)
    6744:	10000c26 	beq	r2,zero,6778 <_fflush_r+0x4c>
    6748:	2880030f 	ldh	r2,12(r5)
    674c:	1000051e 	bne	r2,zero,6764 <_fflush_r+0x38>
    6750:	0005883a 	mov	r2,zero
    6754:	dfc00217 	ldw	ra,8(sp)
    6758:	dc000117 	ldw	r16,4(sp)
    675c:	dec00304 	addi	sp,sp,12
    6760:	f800283a 	ret
    6764:	8009883a 	mov	r4,r16
    6768:	dfc00217 	ldw	ra,8(sp)
    676c:	dc000117 	ldw	r16,4(sp)
    6770:	dec00304 	addi	sp,sp,12
    6774:	00065101 	jmpi	6510 <__sflush_r>
    6778:	d9400015 	stw	r5,0(sp)
    677c:	0006b080 	call	6b08 <__sinit>
    6780:	d9400017 	ldw	r5,0(sp)
    6784:	003ff006 	br	6748 <__alt_data_end+0xff006748>

00006788 <fflush>:
    6788:	20000526 	beq	r4,zero,67a0 <fflush+0x18>
    678c:	00800074 	movhi	r2,1
    6790:	1088c004 	addi	r2,r2,8960
    6794:	200b883a 	mov	r5,r4
    6798:	11000017 	ldw	r4,0(r2)
    679c:	000672c1 	jmpi	672c <_fflush_r>
    67a0:	00800074 	movhi	r2,1
    67a4:	1088bf04 	addi	r2,r2,8956
    67a8:	11000017 	ldw	r4,0(r2)
    67ac:	01400034 	movhi	r5,0
    67b0:	2959cb04 	addi	r5,r5,26412
    67b4:	000750c1 	jmpi	750c <_fwalk_reent>

000067b8 <__fp_unlock>:
    67b8:	0005883a 	mov	r2,zero
    67bc:	f800283a 	ret

000067c0 <_cleanup_r>:
    67c0:	01400074 	movhi	r5,1
    67c4:	296b3104 	addi	r5,r5,-21308
    67c8:	000750c1 	jmpi	750c <_fwalk_reent>

000067cc <__sinit.part.1>:
    67cc:	defff704 	addi	sp,sp,-36
    67d0:	00c00034 	movhi	r3,0
    67d4:	dfc00815 	stw	ra,32(sp)
    67d8:	ddc00715 	stw	r23,28(sp)
    67dc:	dd800615 	stw	r22,24(sp)
    67e0:	dd400515 	stw	r21,20(sp)
    67e4:	dd000415 	stw	r20,16(sp)
    67e8:	dcc00315 	stw	r19,12(sp)
    67ec:	dc800215 	stw	r18,8(sp)
    67f0:	dc400115 	stw	r17,4(sp)
    67f4:	dc000015 	stw	r16,0(sp)
    67f8:	18d9f004 	addi	r3,r3,26560
    67fc:	24000117 	ldw	r16,4(r4)
    6800:	20c00f15 	stw	r3,60(r4)
    6804:	2080bb04 	addi	r2,r4,748
    6808:	00c000c4 	movi	r3,3
    680c:	20c0b915 	stw	r3,740(r4)
    6810:	2080ba15 	stw	r2,744(r4)
    6814:	2000b815 	stw	zero,736(r4)
    6818:	05c00204 	movi	r23,8
    681c:	00800104 	movi	r2,4
    6820:	2025883a 	mov	r18,r4
    6824:	b80d883a 	mov	r6,r23
    6828:	81001704 	addi	r4,r16,92
    682c:	000b883a 	mov	r5,zero
    6830:	80000015 	stw	zero,0(r16)
    6834:	80000115 	stw	zero,4(r16)
    6838:	80000215 	stw	zero,8(r16)
    683c:	8080030d 	sth	r2,12(r16)
    6840:	80001915 	stw	zero,100(r16)
    6844:	8000038d 	sth	zero,14(r16)
    6848:	80000415 	stw	zero,16(r16)
    684c:	80000515 	stw	zero,20(r16)
    6850:	80000615 	stw	zero,24(r16)
    6854:	0007bf00 	call	7bf0 <memset>
    6858:	05800074 	movhi	r22,1
    685c:	94400217 	ldw	r17,8(r18)
    6860:	05400074 	movhi	r21,1
    6864:	05000074 	movhi	r20,1
    6868:	04c00074 	movhi	r19,1
    686c:	b5a4bb04 	addi	r22,r22,-27924
    6870:	ad64d204 	addi	r21,r21,-27832
    6874:	a524f104 	addi	r20,r20,-27708
    6878:	9ce50804 	addi	r19,r19,-27616
    687c:	85800815 	stw	r22,32(r16)
    6880:	85400915 	stw	r21,36(r16)
    6884:	85000a15 	stw	r20,40(r16)
    6888:	84c00b15 	stw	r19,44(r16)
    688c:	84000715 	stw	r16,28(r16)
    6890:	00800284 	movi	r2,10
    6894:	8880030d 	sth	r2,12(r17)
    6898:	00800044 	movi	r2,1
    689c:	b80d883a 	mov	r6,r23
    68a0:	89001704 	addi	r4,r17,92
    68a4:	000b883a 	mov	r5,zero
    68a8:	88000015 	stw	zero,0(r17)
    68ac:	88000115 	stw	zero,4(r17)
    68b0:	88000215 	stw	zero,8(r17)
    68b4:	88001915 	stw	zero,100(r17)
    68b8:	8880038d 	sth	r2,14(r17)
    68bc:	88000415 	stw	zero,16(r17)
    68c0:	88000515 	stw	zero,20(r17)
    68c4:	88000615 	stw	zero,24(r17)
    68c8:	0007bf00 	call	7bf0 <memset>
    68cc:	94000317 	ldw	r16,12(r18)
    68d0:	00800484 	movi	r2,18
    68d4:	8c400715 	stw	r17,28(r17)
    68d8:	8d800815 	stw	r22,32(r17)
    68dc:	8d400915 	stw	r21,36(r17)
    68e0:	8d000a15 	stw	r20,40(r17)
    68e4:	8cc00b15 	stw	r19,44(r17)
    68e8:	8080030d 	sth	r2,12(r16)
    68ec:	00800084 	movi	r2,2
    68f0:	80000015 	stw	zero,0(r16)
    68f4:	80000115 	stw	zero,4(r16)
    68f8:	80000215 	stw	zero,8(r16)
    68fc:	80001915 	stw	zero,100(r16)
    6900:	8080038d 	sth	r2,14(r16)
    6904:	80000415 	stw	zero,16(r16)
    6908:	80000515 	stw	zero,20(r16)
    690c:	80000615 	stw	zero,24(r16)
    6910:	b80d883a 	mov	r6,r23
    6914:	000b883a 	mov	r5,zero
    6918:	81001704 	addi	r4,r16,92
    691c:	0007bf00 	call	7bf0 <memset>
    6920:	00800044 	movi	r2,1
    6924:	84000715 	stw	r16,28(r16)
    6928:	85800815 	stw	r22,32(r16)
    692c:	85400915 	stw	r21,36(r16)
    6930:	85000a15 	stw	r20,40(r16)
    6934:	84c00b15 	stw	r19,44(r16)
    6938:	90800e15 	stw	r2,56(r18)
    693c:	dfc00817 	ldw	ra,32(sp)
    6940:	ddc00717 	ldw	r23,28(sp)
    6944:	dd800617 	ldw	r22,24(sp)
    6948:	dd400517 	ldw	r21,20(sp)
    694c:	dd000417 	ldw	r20,16(sp)
    6950:	dcc00317 	ldw	r19,12(sp)
    6954:	dc800217 	ldw	r18,8(sp)
    6958:	dc400117 	ldw	r17,4(sp)
    695c:	dc000017 	ldw	r16,0(sp)
    6960:	dec00904 	addi	sp,sp,36
    6964:	f800283a 	ret

00006968 <__fp_lock>:
    6968:	0005883a 	mov	r2,zero
    696c:	f800283a 	ret

00006970 <__sfmoreglue>:
    6970:	defffc04 	addi	sp,sp,-16
    6974:	dc400115 	stw	r17,4(sp)
    6978:	2c7fffc4 	addi	r17,r5,-1
    697c:	8c401a24 	muli	r17,r17,104
    6980:	dc800215 	stw	r18,8(sp)
    6984:	2825883a 	mov	r18,r5
    6988:	89401d04 	addi	r5,r17,116
    698c:	dc000015 	stw	r16,0(sp)
    6990:	dfc00315 	stw	ra,12(sp)
    6994:	0001e2c0 	call	1e2c <_malloc_r>
    6998:	1021883a 	mov	r16,r2
    699c:	10000726 	beq	r2,zero,69bc <__sfmoreglue+0x4c>
    69a0:	11000304 	addi	r4,r2,12
    69a4:	10000015 	stw	zero,0(r2)
    69a8:	14800115 	stw	r18,4(r2)
    69ac:	11000215 	stw	r4,8(r2)
    69b0:	89801a04 	addi	r6,r17,104
    69b4:	000b883a 	mov	r5,zero
    69b8:	0007bf00 	call	7bf0 <memset>
    69bc:	8005883a 	mov	r2,r16
    69c0:	dfc00317 	ldw	ra,12(sp)
    69c4:	dc800217 	ldw	r18,8(sp)
    69c8:	dc400117 	ldw	r17,4(sp)
    69cc:	dc000017 	ldw	r16,0(sp)
    69d0:	dec00404 	addi	sp,sp,16
    69d4:	f800283a 	ret

000069d8 <__sfp>:
    69d8:	defffb04 	addi	sp,sp,-20
    69dc:	dc000015 	stw	r16,0(sp)
    69e0:	04000074 	movhi	r16,1
    69e4:	8408bf04 	addi	r16,r16,8956
    69e8:	dcc00315 	stw	r19,12(sp)
    69ec:	2027883a 	mov	r19,r4
    69f0:	81000017 	ldw	r4,0(r16)
    69f4:	dfc00415 	stw	ra,16(sp)
    69f8:	dc800215 	stw	r18,8(sp)
    69fc:	20800e17 	ldw	r2,56(r4)
    6a00:	dc400115 	stw	r17,4(sp)
    6a04:	1000021e 	bne	r2,zero,6a10 <__sfp+0x38>
    6a08:	00067cc0 	call	67cc <__sinit.part.1>
    6a0c:	81000017 	ldw	r4,0(r16)
    6a10:	2480b804 	addi	r18,r4,736
    6a14:	047fffc4 	movi	r17,-1
    6a18:	91000117 	ldw	r4,4(r18)
    6a1c:	94000217 	ldw	r16,8(r18)
    6a20:	213fffc4 	addi	r4,r4,-1
    6a24:	20000a16 	blt	r4,zero,6a50 <__sfp+0x78>
    6a28:	8080030f 	ldh	r2,12(r16)
    6a2c:	10000c26 	beq	r2,zero,6a60 <__sfp+0x88>
    6a30:	80c01d04 	addi	r3,r16,116
    6a34:	00000206 	br	6a40 <__sfp+0x68>
    6a38:	18bfe60f 	ldh	r2,-104(r3)
    6a3c:	10000826 	beq	r2,zero,6a60 <__sfp+0x88>
    6a40:	213fffc4 	addi	r4,r4,-1
    6a44:	1c3ffd04 	addi	r16,r3,-12
    6a48:	18c01a04 	addi	r3,r3,104
    6a4c:	247ffa1e 	bne	r4,r17,6a38 <__alt_data_end+0xff006a38>
    6a50:	90800017 	ldw	r2,0(r18)
    6a54:	10001d26 	beq	r2,zero,6acc <__sfp+0xf4>
    6a58:	1025883a 	mov	r18,r2
    6a5c:	003fee06 	br	6a18 <__alt_data_end+0xff006a18>
    6a60:	00bfffc4 	movi	r2,-1
    6a64:	8080038d 	sth	r2,14(r16)
    6a68:	00800044 	movi	r2,1
    6a6c:	8080030d 	sth	r2,12(r16)
    6a70:	80001915 	stw	zero,100(r16)
    6a74:	80000015 	stw	zero,0(r16)
    6a78:	80000215 	stw	zero,8(r16)
    6a7c:	80000115 	stw	zero,4(r16)
    6a80:	80000415 	stw	zero,16(r16)
    6a84:	80000515 	stw	zero,20(r16)
    6a88:	80000615 	stw	zero,24(r16)
    6a8c:	01800204 	movi	r6,8
    6a90:	000b883a 	mov	r5,zero
    6a94:	81001704 	addi	r4,r16,92
    6a98:	0007bf00 	call	7bf0 <memset>
    6a9c:	8005883a 	mov	r2,r16
    6aa0:	80000c15 	stw	zero,48(r16)
    6aa4:	80000d15 	stw	zero,52(r16)
    6aa8:	80001115 	stw	zero,68(r16)
    6aac:	80001215 	stw	zero,72(r16)
    6ab0:	dfc00417 	ldw	ra,16(sp)
    6ab4:	dcc00317 	ldw	r19,12(sp)
    6ab8:	dc800217 	ldw	r18,8(sp)
    6abc:	dc400117 	ldw	r17,4(sp)
    6ac0:	dc000017 	ldw	r16,0(sp)
    6ac4:	dec00504 	addi	sp,sp,20
    6ac8:	f800283a 	ret
    6acc:	01400104 	movi	r5,4
    6ad0:	9809883a 	mov	r4,r19
    6ad4:	00069700 	call	6970 <__sfmoreglue>
    6ad8:	90800015 	stw	r2,0(r18)
    6adc:	103fde1e 	bne	r2,zero,6a58 <__alt_data_end+0xff006a58>
    6ae0:	00800304 	movi	r2,12
    6ae4:	98800015 	stw	r2,0(r19)
    6ae8:	0005883a 	mov	r2,zero
    6aec:	003ff006 	br	6ab0 <__alt_data_end+0xff006ab0>

00006af0 <_cleanup>:
    6af0:	00800074 	movhi	r2,1
    6af4:	1088bf04 	addi	r2,r2,8956
    6af8:	11000017 	ldw	r4,0(r2)
    6afc:	01400074 	movhi	r5,1
    6b00:	296b3104 	addi	r5,r5,-21308
    6b04:	000750c1 	jmpi	750c <_fwalk_reent>

00006b08 <__sinit>:
    6b08:	20800e17 	ldw	r2,56(r4)
    6b0c:	10000126 	beq	r2,zero,6b14 <__sinit+0xc>
    6b10:	f800283a 	ret
    6b14:	00067cc1 	jmpi	67cc <__sinit.part.1>

00006b18 <__sfp_lock_acquire>:
    6b18:	f800283a 	ret

00006b1c <__sfp_lock_release>:
    6b1c:	f800283a 	ret

00006b20 <__sinit_lock_acquire>:
    6b20:	f800283a 	ret

00006b24 <__sinit_lock_release>:
    6b24:	f800283a 	ret

00006b28 <__fp_lock_all>:
    6b28:	00800074 	movhi	r2,1
    6b2c:	1088c004 	addi	r2,r2,8960
    6b30:	11000017 	ldw	r4,0(r2)
    6b34:	01400034 	movhi	r5,0
    6b38:	295a5a04 	addi	r5,r5,26984
    6b3c:	00074481 	jmpi	7448 <_fwalk>

00006b40 <__fp_unlock_all>:
    6b40:	00800074 	movhi	r2,1
    6b44:	1088c004 	addi	r2,r2,8960
    6b48:	11000017 	ldw	r4,0(r2)
    6b4c:	01400034 	movhi	r5,0
    6b50:	2959ee04 	addi	r5,r5,26552
    6b54:	00074481 	jmpi	7448 <_fwalk>

00006b58 <_malloc_trim_r>:
    6b58:	defffb04 	addi	sp,sp,-20
    6b5c:	dcc00315 	stw	r19,12(sp)
    6b60:	04c00074 	movhi	r19,1
    6b64:	dc800215 	stw	r18,8(sp)
    6b68:	dc400115 	stw	r17,4(sp)
    6b6c:	dc000015 	stw	r16,0(sp)
    6b70:	dfc00415 	stw	ra,16(sp)
    6b74:	2821883a 	mov	r16,r5
    6b78:	9cc21004 	addi	r19,r19,2112
    6b7c:	2025883a 	mov	r18,r4
    6b80:	000eab40 	call	eab4 <__malloc_lock>
    6b84:	98800217 	ldw	r2,8(r19)
    6b88:	14400117 	ldw	r17,4(r2)
    6b8c:	00bfff04 	movi	r2,-4
    6b90:	88a2703a 	and	r17,r17,r2
    6b94:	8c21c83a 	sub	r16,r17,r16
    6b98:	8403fbc4 	addi	r16,r16,4079
    6b9c:	8020d33a 	srli	r16,r16,12
    6ba0:	0083ffc4 	movi	r2,4095
    6ba4:	843fffc4 	addi	r16,r16,-1
    6ba8:	8020933a 	slli	r16,r16,12
    6bac:	1400060e 	bge	r2,r16,6bc8 <_malloc_trim_r+0x70>
    6bb0:	000b883a 	mov	r5,zero
    6bb4:	9009883a 	mov	r4,r18
    6bb8:	00027780 	call	2778 <_sbrk_r>
    6bbc:	98c00217 	ldw	r3,8(r19)
    6bc0:	1c47883a 	add	r3,r3,r17
    6bc4:	10c00a26 	beq	r2,r3,6bf0 <_malloc_trim_r+0x98>
    6bc8:	9009883a 	mov	r4,r18
    6bcc:	000eab80 	call	eab8 <__malloc_unlock>
    6bd0:	0005883a 	mov	r2,zero
    6bd4:	dfc00417 	ldw	ra,16(sp)
    6bd8:	dcc00317 	ldw	r19,12(sp)
    6bdc:	dc800217 	ldw	r18,8(sp)
    6be0:	dc400117 	ldw	r17,4(sp)
    6be4:	dc000017 	ldw	r16,0(sp)
    6be8:	dec00504 	addi	sp,sp,20
    6bec:	f800283a 	ret
    6bf0:	040bc83a 	sub	r5,zero,r16
    6bf4:	9009883a 	mov	r4,r18
    6bf8:	00027780 	call	2778 <_sbrk_r>
    6bfc:	00ffffc4 	movi	r3,-1
    6c00:	10c00d26 	beq	r2,r3,6c38 <_malloc_trim_r+0xe0>
    6c04:	00c00074 	movhi	r3,1
    6c08:	18cfa404 	addi	r3,r3,16016
    6c0c:	18800017 	ldw	r2,0(r3)
    6c10:	99000217 	ldw	r4,8(r19)
    6c14:	8c23c83a 	sub	r17,r17,r16
    6c18:	8c400054 	ori	r17,r17,1
    6c1c:	1421c83a 	sub	r16,r2,r16
    6c20:	24400115 	stw	r17,4(r4)
    6c24:	9009883a 	mov	r4,r18
    6c28:	1c000015 	stw	r16,0(r3)
    6c2c:	000eab80 	call	eab8 <__malloc_unlock>
    6c30:	00800044 	movi	r2,1
    6c34:	003fe706 	br	6bd4 <__alt_data_end+0xff006bd4>
    6c38:	000b883a 	mov	r5,zero
    6c3c:	9009883a 	mov	r4,r18
    6c40:	00027780 	call	2778 <_sbrk_r>
    6c44:	99000217 	ldw	r4,8(r19)
    6c48:	014003c4 	movi	r5,15
    6c4c:	1107c83a 	sub	r3,r2,r4
    6c50:	28ffdd0e 	bge	r5,r3,6bc8 <__alt_data_end+0xff006bc8>
    6c54:	01400074 	movhi	r5,1
    6c58:	2948bd04 	addi	r5,r5,8948
    6c5c:	29400017 	ldw	r5,0(r5)
    6c60:	18c00054 	ori	r3,r3,1
    6c64:	20c00115 	stw	r3,4(r4)
    6c68:	00c00074 	movhi	r3,1
    6c6c:	1145c83a 	sub	r2,r2,r5
    6c70:	18cfa404 	addi	r3,r3,16016
    6c74:	18800015 	stw	r2,0(r3)
    6c78:	003fd306 	br	6bc8 <__alt_data_end+0xff006bc8>

00006c7c <_free_r>:
    6c7c:	28004126 	beq	r5,zero,6d84 <_free_r+0x108>
    6c80:	defffd04 	addi	sp,sp,-12
    6c84:	dc400115 	stw	r17,4(sp)
    6c88:	dc000015 	stw	r16,0(sp)
    6c8c:	2023883a 	mov	r17,r4
    6c90:	2821883a 	mov	r16,r5
    6c94:	dfc00215 	stw	ra,8(sp)
    6c98:	000eab40 	call	eab4 <__malloc_lock>
    6c9c:	81ffff17 	ldw	r7,-4(r16)
    6ca0:	00bfff84 	movi	r2,-2
    6ca4:	01000074 	movhi	r4,1
    6ca8:	81bffe04 	addi	r6,r16,-8
    6cac:	3884703a 	and	r2,r7,r2
    6cb0:	21021004 	addi	r4,r4,2112
    6cb4:	308b883a 	add	r5,r6,r2
    6cb8:	2a400117 	ldw	r9,4(r5)
    6cbc:	22000217 	ldw	r8,8(r4)
    6cc0:	00ffff04 	movi	r3,-4
    6cc4:	48c6703a 	and	r3,r9,r3
    6cc8:	2a005726 	beq	r5,r8,6e28 <_free_r+0x1ac>
    6ccc:	28c00115 	stw	r3,4(r5)
    6cd0:	39c0004c 	andi	r7,r7,1
    6cd4:	3800091e 	bne	r7,zero,6cfc <_free_r+0x80>
    6cd8:	823ffe17 	ldw	r8,-8(r16)
    6cdc:	22400204 	addi	r9,r4,8
    6ce0:	320dc83a 	sub	r6,r6,r8
    6ce4:	31c00217 	ldw	r7,8(r6)
    6ce8:	1205883a 	add	r2,r2,r8
    6cec:	3a406526 	beq	r7,r9,6e84 <_free_r+0x208>
    6cf0:	32000317 	ldw	r8,12(r6)
    6cf4:	3a000315 	stw	r8,12(r7)
    6cf8:	41c00215 	stw	r7,8(r8)
    6cfc:	28cf883a 	add	r7,r5,r3
    6d00:	39c00117 	ldw	r7,4(r7)
    6d04:	39c0004c 	andi	r7,r7,1
    6d08:	38003a26 	beq	r7,zero,6df4 <_free_r+0x178>
    6d0c:	10c00054 	ori	r3,r2,1
    6d10:	30c00115 	stw	r3,4(r6)
    6d14:	3087883a 	add	r3,r6,r2
    6d18:	18800015 	stw	r2,0(r3)
    6d1c:	00c07fc4 	movi	r3,511
    6d20:	18801936 	bltu	r3,r2,6d88 <_free_r+0x10c>
    6d24:	1004d0fa 	srli	r2,r2,3
    6d28:	01c00044 	movi	r7,1
    6d2c:	21400117 	ldw	r5,4(r4)
    6d30:	10c00044 	addi	r3,r2,1
    6d34:	18c7883a 	add	r3,r3,r3
    6d38:	1005d0ba 	srai	r2,r2,2
    6d3c:	18c7883a 	add	r3,r3,r3
    6d40:	18c7883a 	add	r3,r3,r3
    6d44:	1907883a 	add	r3,r3,r4
    6d48:	3884983a 	sll	r2,r7,r2
    6d4c:	19c00017 	ldw	r7,0(r3)
    6d50:	1a3ffe04 	addi	r8,r3,-8
    6d54:	1144b03a 	or	r2,r2,r5
    6d58:	32000315 	stw	r8,12(r6)
    6d5c:	31c00215 	stw	r7,8(r6)
    6d60:	20800115 	stw	r2,4(r4)
    6d64:	19800015 	stw	r6,0(r3)
    6d68:	39800315 	stw	r6,12(r7)
    6d6c:	8809883a 	mov	r4,r17
    6d70:	dfc00217 	ldw	ra,8(sp)
    6d74:	dc400117 	ldw	r17,4(sp)
    6d78:	dc000017 	ldw	r16,0(sp)
    6d7c:	dec00304 	addi	sp,sp,12
    6d80:	000eab81 	jmpi	eab8 <__malloc_unlock>
    6d84:	f800283a 	ret
    6d88:	100ad27a 	srli	r5,r2,9
    6d8c:	00c00104 	movi	r3,4
    6d90:	19404a36 	bltu	r3,r5,6ebc <_free_r+0x240>
    6d94:	100ad1ba 	srli	r5,r2,6
    6d98:	28c00e44 	addi	r3,r5,57
    6d9c:	18c7883a 	add	r3,r3,r3
    6da0:	29400e04 	addi	r5,r5,56
    6da4:	18c7883a 	add	r3,r3,r3
    6da8:	18c7883a 	add	r3,r3,r3
    6dac:	1909883a 	add	r4,r3,r4
    6db0:	20c00017 	ldw	r3,0(r4)
    6db4:	01c00074 	movhi	r7,1
    6db8:	213ffe04 	addi	r4,r4,-8
    6dbc:	39c21004 	addi	r7,r7,2112
    6dc0:	20c04426 	beq	r4,r3,6ed4 <_free_r+0x258>
    6dc4:	01ffff04 	movi	r7,-4
    6dc8:	19400117 	ldw	r5,4(r3)
    6dcc:	29ca703a 	and	r5,r5,r7
    6dd0:	1140022e 	bgeu	r2,r5,6ddc <_free_r+0x160>
    6dd4:	18c00217 	ldw	r3,8(r3)
    6dd8:	20fffb1e 	bne	r4,r3,6dc8 <__alt_data_end+0xff006dc8>
    6ddc:	19000317 	ldw	r4,12(r3)
    6de0:	31000315 	stw	r4,12(r6)
    6de4:	30c00215 	stw	r3,8(r6)
    6de8:	21800215 	stw	r6,8(r4)
    6dec:	19800315 	stw	r6,12(r3)
    6df0:	003fde06 	br	6d6c <__alt_data_end+0xff006d6c>
    6df4:	29c00217 	ldw	r7,8(r5)
    6df8:	10c5883a 	add	r2,r2,r3
    6dfc:	00c00074 	movhi	r3,1
    6e00:	18c21204 	addi	r3,r3,2120
    6e04:	38c03b26 	beq	r7,r3,6ef4 <_free_r+0x278>
    6e08:	2a000317 	ldw	r8,12(r5)
    6e0c:	11400054 	ori	r5,r2,1
    6e10:	3087883a 	add	r3,r6,r2
    6e14:	3a000315 	stw	r8,12(r7)
    6e18:	41c00215 	stw	r7,8(r8)
    6e1c:	31400115 	stw	r5,4(r6)
    6e20:	18800015 	stw	r2,0(r3)
    6e24:	003fbd06 	br	6d1c <__alt_data_end+0xff006d1c>
    6e28:	39c0004c 	andi	r7,r7,1
    6e2c:	10c5883a 	add	r2,r2,r3
    6e30:	3800071e 	bne	r7,zero,6e50 <_free_r+0x1d4>
    6e34:	81fffe17 	ldw	r7,-8(r16)
    6e38:	31cdc83a 	sub	r6,r6,r7
    6e3c:	30c00317 	ldw	r3,12(r6)
    6e40:	31400217 	ldw	r5,8(r6)
    6e44:	11c5883a 	add	r2,r2,r7
    6e48:	28c00315 	stw	r3,12(r5)
    6e4c:	19400215 	stw	r5,8(r3)
    6e50:	10c00054 	ori	r3,r2,1
    6e54:	30c00115 	stw	r3,4(r6)
    6e58:	00c00074 	movhi	r3,1
    6e5c:	18c8be04 	addi	r3,r3,8952
    6e60:	18c00017 	ldw	r3,0(r3)
    6e64:	21800215 	stw	r6,8(r4)
    6e68:	10ffc036 	bltu	r2,r3,6d6c <__alt_data_end+0xff006d6c>
    6e6c:	00800074 	movhi	r2,1
    6e70:	108f9604 	addi	r2,r2,15960
    6e74:	11400017 	ldw	r5,0(r2)
    6e78:	8809883a 	mov	r4,r17
    6e7c:	0006b580 	call	6b58 <_malloc_trim_r>
    6e80:	003fba06 	br	6d6c <__alt_data_end+0xff006d6c>
    6e84:	28c9883a 	add	r4,r5,r3
    6e88:	21000117 	ldw	r4,4(r4)
    6e8c:	2100004c 	andi	r4,r4,1
    6e90:	2000391e 	bne	r4,zero,6f78 <_free_r+0x2fc>
    6e94:	29c00217 	ldw	r7,8(r5)
    6e98:	29000317 	ldw	r4,12(r5)
    6e9c:	1885883a 	add	r2,r3,r2
    6ea0:	10c00054 	ori	r3,r2,1
    6ea4:	39000315 	stw	r4,12(r7)
    6ea8:	21c00215 	stw	r7,8(r4)
    6eac:	30c00115 	stw	r3,4(r6)
    6eb0:	308d883a 	add	r6,r6,r2
    6eb4:	30800015 	stw	r2,0(r6)
    6eb8:	003fac06 	br	6d6c <__alt_data_end+0xff006d6c>
    6ebc:	00c00504 	movi	r3,20
    6ec0:	19401536 	bltu	r3,r5,6f18 <_free_r+0x29c>
    6ec4:	28c01704 	addi	r3,r5,92
    6ec8:	18c7883a 	add	r3,r3,r3
    6ecc:	294016c4 	addi	r5,r5,91
    6ed0:	003fb406 	br	6da4 <__alt_data_end+0xff006da4>
    6ed4:	280bd0ba 	srai	r5,r5,2
    6ed8:	00c00044 	movi	r3,1
    6edc:	38800117 	ldw	r2,4(r7)
    6ee0:	194a983a 	sll	r5,r3,r5
    6ee4:	2007883a 	mov	r3,r4
    6ee8:	2884b03a 	or	r2,r5,r2
    6eec:	38800115 	stw	r2,4(r7)
    6ef0:	003fbb06 	br	6de0 <__alt_data_end+0xff006de0>
    6ef4:	21800515 	stw	r6,20(r4)
    6ef8:	21800415 	stw	r6,16(r4)
    6efc:	10c00054 	ori	r3,r2,1
    6f00:	31c00315 	stw	r7,12(r6)
    6f04:	31c00215 	stw	r7,8(r6)
    6f08:	30c00115 	stw	r3,4(r6)
    6f0c:	308d883a 	add	r6,r6,r2
    6f10:	30800015 	stw	r2,0(r6)
    6f14:	003f9506 	br	6d6c <__alt_data_end+0xff006d6c>
    6f18:	00c01504 	movi	r3,84
    6f1c:	19400536 	bltu	r3,r5,6f34 <_free_r+0x2b8>
    6f20:	100ad33a 	srli	r5,r2,12
    6f24:	28c01bc4 	addi	r3,r5,111
    6f28:	18c7883a 	add	r3,r3,r3
    6f2c:	29401b84 	addi	r5,r5,110
    6f30:	003f9c06 	br	6da4 <__alt_data_end+0xff006da4>
    6f34:	00c05504 	movi	r3,340
    6f38:	19400536 	bltu	r3,r5,6f50 <_free_r+0x2d4>
    6f3c:	100ad3fa 	srli	r5,r2,15
    6f40:	28c01e04 	addi	r3,r5,120
    6f44:	18c7883a 	add	r3,r3,r3
    6f48:	29401dc4 	addi	r5,r5,119
    6f4c:	003f9506 	br	6da4 <__alt_data_end+0xff006da4>
    6f50:	00c15504 	movi	r3,1364
    6f54:	19400536 	bltu	r3,r5,6f6c <_free_r+0x2f0>
    6f58:	100ad4ba 	srli	r5,r2,18
    6f5c:	28c01f44 	addi	r3,r5,125
    6f60:	18c7883a 	add	r3,r3,r3
    6f64:	29401f04 	addi	r5,r5,124
    6f68:	003f8e06 	br	6da4 <__alt_data_end+0xff006da4>
    6f6c:	00c03f84 	movi	r3,254
    6f70:	01401f84 	movi	r5,126
    6f74:	003f8b06 	br	6da4 <__alt_data_end+0xff006da4>
    6f78:	10c00054 	ori	r3,r2,1
    6f7c:	30c00115 	stw	r3,4(r6)
    6f80:	308d883a 	add	r6,r6,r2
    6f84:	30800015 	stw	r2,0(r6)
    6f88:	003f7806 	br	6d6c <__alt_data_end+0xff006d6c>

00006f8c <__sfvwrite_r>:
    6f8c:	30800217 	ldw	r2,8(r6)
    6f90:	10006726 	beq	r2,zero,7130 <__sfvwrite_r+0x1a4>
    6f94:	28c0030b 	ldhu	r3,12(r5)
    6f98:	defff404 	addi	sp,sp,-48
    6f9c:	dd400715 	stw	r21,28(sp)
    6fa0:	dd000615 	stw	r20,24(sp)
    6fa4:	dc000215 	stw	r16,8(sp)
    6fa8:	dfc00b15 	stw	ra,44(sp)
    6fac:	df000a15 	stw	fp,40(sp)
    6fb0:	ddc00915 	stw	r23,36(sp)
    6fb4:	dd800815 	stw	r22,32(sp)
    6fb8:	dcc00515 	stw	r19,20(sp)
    6fbc:	dc800415 	stw	r18,16(sp)
    6fc0:	dc400315 	stw	r17,12(sp)
    6fc4:	1880020c 	andi	r2,r3,8
    6fc8:	2821883a 	mov	r16,r5
    6fcc:	202b883a 	mov	r21,r4
    6fd0:	3029883a 	mov	r20,r6
    6fd4:	10002726 	beq	r2,zero,7074 <__sfvwrite_r+0xe8>
    6fd8:	28800417 	ldw	r2,16(r5)
    6fdc:	10002526 	beq	r2,zero,7074 <__sfvwrite_r+0xe8>
    6fe0:	1880008c 	andi	r2,r3,2
    6fe4:	a4400017 	ldw	r17,0(r20)
    6fe8:	10002a26 	beq	r2,zero,7094 <__sfvwrite_r+0x108>
    6fec:	05a00034 	movhi	r22,32768
    6ff0:	0027883a 	mov	r19,zero
    6ff4:	0025883a 	mov	r18,zero
    6ff8:	b5bf0004 	addi	r22,r22,-1024
    6ffc:	980d883a 	mov	r6,r19
    7000:	a809883a 	mov	r4,r21
    7004:	90004626 	beq	r18,zero,7120 <__sfvwrite_r+0x194>
    7008:	900f883a 	mov	r7,r18
    700c:	b480022e 	bgeu	r22,r18,7018 <__sfvwrite_r+0x8c>
    7010:	01e00034 	movhi	r7,32768
    7014:	39ff0004 	addi	r7,r7,-1024
    7018:	80800917 	ldw	r2,36(r16)
    701c:	81400717 	ldw	r5,28(r16)
    7020:	103ee83a 	callr	r2
    7024:	0080570e 	bge	zero,r2,7184 <__sfvwrite_r+0x1f8>
    7028:	a0c00217 	ldw	r3,8(r20)
    702c:	98a7883a 	add	r19,r19,r2
    7030:	90a5c83a 	sub	r18,r18,r2
    7034:	1885c83a 	sub	r2,r3,r2
    7038:	a0800215 	stw	r2,8(r20)
    703c:	103fef1e 	bne	r2,zero,6ffc <__alt_data_end+0xff006ffc>
    7040:	0005883a 	mov	r2,zero
    7044:	dfc00b17 	ldw	ra,44(sp)
    7048:	df000a17 	ldw	fp,40(sp)
    704c:	ddc00917 	ldw	r23,36(sp)
    7050:	dd800817 	ldw	r22,32(sp)
    7054:	dd400717 	ldw	r21,28(sp)
    7058:	dd000617 	ldw	r20,24(sp)
    705c:	dcc00517 	ldw	r19,20(sp)
    7060:	dc800417 	ldw	r18,16(sp)
    7064:	dc400317 	ldw	r17,12(sp)
    7068:	dc000217 	ldw	r16,8(sp)
    706c:	dec00c04 	addi	sp,sp,48
    7070:	f800283a 	ret
    7074:	800b883a 	mov	r5,r16
    7078:	a809883a 	mov	r4,r21
    707c:	0004b340 	call	4b34 <__swsetup_r>
    7080:	1000eb1e 	bne	r2,zero,7430 <__sfvwrite_r+0x4a4>
    7084:	80c0030b 	ldhu	r3,12(r16)
    7088:	a4400017 	ldw	r17,0(r20)
    708c:	1880008c 	andi	r2,r3,2
    7090:	103fd61e 	bne	r2,zero,6fec <__alt_data_end+0xff006fec>
    7094:	1880004c 	andi	r2,r3,1
    7098:	10003f1e 	bne	r2,zero,7198 <__sfvwrite_r+0x20c>
    709c:	0039883a 	mov	fp,zero
    70a0:	0025883a 	mov	r18,zero
    70a4:	90001a26 	beq	r18,zero,7110 <__sfvwrite_r+0x184>
    70a8:	1880800c 	andi	r2,r3,512
    70ac:	84c00217 	ldw	r19,8(r16)
    70b0:	10002126 	beq	r2,zero,7138 <__sfvwrite_r+0x1ac>
    70b4:	982f883a 	mov	r23,r19
    70b8:	94c09336 	bltu	r18,r19,7308 <__sfvwrite_r+0x37c>
    70bc:	1881200c 	andi	r2,r3,1152
    70c0:	10009e1e 	bne	r2,zero,733c <__sfvwrite_r+0x3b0>
    70c4:	81000017 	ldw	r4,0(r16)
    70c8:	b80d883a 	mov	r6,r23
    70cc:	e00b883a 	mov	r5,fp
    70d0:	0007a940 	call	7a94 <memmove>
    70d4:	80c00217 	ldw	r3,8(r16)
    70d8:	81000017 	ldw	r4,0(r16)
    70dc:	9005883a 	mov	r2,r18
    70e0:	1ce7c83a 	sub	r19,r3,r19
    70e4:	25cf883a 	add	r7,r4,r23
    70e8:	84c00215 	stw	r19,8(r16)
    70ec:	81c00015 	stw	r7,0(r16)
    70f0:	a0c00217 	ldw	r3,8(r20)
    70f4:	e0b9883a 	add	fp,fp,r2
    70f8:	90a5c83a 	sub	r18,r18,r2
    70fc:	18a7c83a 	sub	r19,r3,r2
    7100:	a4c00215 	stw	r19,8(r20)
    7104:	983fce26 	beq	r19,zero,7040 <__alt_data_end+0xff007040>
    7108:	80c0030b 	ldhu	r3,12(r16)
    710c:	903fe61e 	bne	r18,zero,70a8 <__alt_data_end+0xff0070a8>
    7110:	8f000017 	ldw	fp,0(r17)
    7114:	8c800117 	ldw	r18,4(r17)
    7118:	8c400204 	addi	r17,r17,8
    711c:	003fe106 	br	70a4 <__alt_data_end+0xff0070a4>
    7120:	8cc00017 	ldw	r19,0(r17)
    7124:	8c800117 	ldw	r18,4(r17)
    7128:	8c400204 	addi	r17,r17,8
    712c:	003fb306 	br	6ffc <__alt_data_end+0xff006ffc>
    7130:	0005883a 	mov	r2,zero
    7134:	f800283a 	ret
    7138:	81000017 	ldw	r4,0(r16)
    713c:	80800417 	ldw	r2,16(r16)
    7140:	11005736 	bltu	r2,r4,72a0 <__sfvwrite_r+0x314>
    7144:	85c00517 	ldw	r23,20(r16)
    7148:	95c05536 	bltu	r18,r23,72a0 <__sfvwrite_r+0x314>
    714c:	00a00034 	movhi	r2,32768
    7150:	10bfffc4 	addi	r2,r2,-1
    7154:	9009883a 	mov	r4,r18
    7158:	1480012e 	bgeu	r2,r18,7160 <__sfvwrite_r+0x1d4>
    715c:	1009883a 	mov	r4,r2
    7160:	b80b883a 	mov	r5,r23
    7164:	000bf300 	call	bf30 <__divsi3>
    7168:	15cf383a 	mul	r7,r2,r23
    716c:	81400717 	ldw	r5,28(r16)
    7170:	80800917 	ldw	r2,36(r16)
    7174:	e00d883a 	mov	r6,fp
    7178:	a809883a 	mov	r4,r21
    717c:	103ee83a 	callr	r2
    7180:	00bfdb16 	blt	zero,r2,70f0 <__alt_data_end+0xff0070f0>
    7184:	8080030b 	ldhu	r2,12(r16)
    7188:	10801014 	ori	r2,r2,64
    718c:	8080030d 	sth	r2,12(r16)
    7190:	00bfffc4 	movi	r2,-1
    7194:	003fab06 	br	7044 <__alt_data_end+0xff007044>
    7198:	0027883a 	mov	r19,zero
    719c:	0011883a 	mov	r8,zero
    71a0:	0039883a 	mov	fp,zero
    71a4:	0025883a 	mov	r18,zero
    71a8:	90001f26 	beq	r18,zero,7228 <__sfvwrite_r+0x29c>
    71ac:	40005a26 	beq	r8,zero,7318 <__sfvwrite_r+0x38c>
    71b0:	982d883a 	mov	r22,r19
    71b4:	94c0012e 	bgeu	r18,r19,71bc <__sfvwrite_r+0x230>
    71b8:	902d883a 	mov	r22,r18
    71bc:	81000017 	ldw	r4,0(r16)
    71c0:	80800417 	ldw	r2,16(r16)
    71c4:	b02f883a 	mov	r23,r22
    71c8:	81c00517 	ldw	r7,20(r16)
    71cc:	1100032e 	bgeu	r2,r4,71dc <__sfvwrite_r+0x250>
    71d0:	80c00217 	ldw	r3,8(r16)
    71d4:	38c7883a 	add	r3,r7,r3
    71d8:	1d801816 	blt	r3,r22,723c <__sfvwrite_r+0x2b0>
    71dc:	b1c03e16 	blt	r22,r7,72d8 <__sfvwrite_r+0x34c>
    71e0:	80800917 	ldw	r2,36(r16)
    71e4:	81400717 	ldw	r5,28(r16)
    71e8:	e00d883a 	mov	r6,fp
    71ec:	da000115 	stw	r8,4(sp)
    71f0:	a809883a 	mov	r4,r21
    71f4:	103ee83a 	callr	r2
    71f8:	102f883a 	mov	r23,r2
    71fc:	da000117 	ldw	r8,4(sp)
    7200:	00bfe00e 	bge	zero,r2,7184 <__alt_data_end+0xff007184>
    7204:	9de7c83a 	sub	r19,r19,r23
    7208:	98001f26 	beq	r19,zero,7288 <__sfvwrite_r+0x2fc>
    720c:	a0800217 	ldw	r2,8(r20)
    7210:	e5f9883a 	add	fp,fp,r23
    7214:	95e5c83a 	sub	r18,r18,r23
    7218:	15efc83a 	sub	r23,r2,r23
    721c:	a5c00215 	stw	r23,8(r20)
    7220:	b83f8726 	beq	r23,zero,7040 <__alt_data_end+0xff007040>
    7224:	903fe11e 	bne	r18,zero,71ac <__alt_data_end+0xff0071ac>
    7228:	8f000017 	ldw	fp,0(r17)
    722c:	8c800117 	ldw	r18,4(r17)
    7230:	0011883a 	mov	r8,zero
    7234:	8c400204 	addi	r17,r17,8
    7238:	003fdb06 	br	71a8 <__alt_data_end+0xff0071a8>
    723c:	180d883a 	mov	r6,r3
    7240:	e00b883a 	mov	r5,fp
    7244:	da000115 	stw	r8,4(sp)
    7248:	d8c00015 	stw	r3,0(sp)
    724c:	0007a940 	call	7a94 <memmove>
    7250:	d8c00017 	ldw	r3,0(sp)
    7254:	80800017 	ldw	r2,0(r16)
    7258:	800b883a 	mov	r5,r16
    725c:	a809883a 	mov	r4,r21
    7260:	10c5883a 	add	r2,r2,r3
    7264:	80800015 	stw	r2,0(r16)
    7268:	d8c00015 	stw	r3,0(sp)
    726c:	000672c0 	call	672c <_fflush_r>
    7270:	d8c00017 	ldw	r3,0(sp)
    7274:	da000117 	ldw	r8,4(sp)
    7278:	103fc21e 	bne	r2,zero,7184 <__alt_data_end+0xff007184>
    727c:	182f883a 	mov	r23,r3
    7280:	9de7c83a 	sub	r19,r19,r23
    7284:	983fe11e 	bne	r19,zero,720c <__alt_data_end+0xff00720c>
    7288:	800b883a 	mov	r5,r16
    728c:	a809883a 	mov	r4,r21
    7290:	000672c0 	call	672c <_fflush_r>
    7294:	103fbb1e 	bne	r2,zero,7184 <__alt_data_end+0xff007184>
    7298:	0011883a 	mov	r8,zero
    729c:	003fdb06 	br	720c <__alt_data_end+0xff00720c>
    72a0:	94c0012e 	bgeu	r18,r19,72a8 <__sfvwrite_r+0x31c>
    72a4:	9027883a 	mov	r19,r18
    72a8:	980d883a 	mov	r6,r19
    72ac:	e00b883a 	mov	r5,fp
    72b0:	0007a940 	call	7a94 <memmove>
    72b4:	80800217 	ldw	r2,8(r16)
    72b8:	80c00017 	ldw	r3,0(r16)
    72bc:	14c5c83a 	sub	r2,r2,r19
    72c0:	1cc7883a 	add	r3,r3,r19
    72c4:	80800215 	stw	r2,8(r16)
    72c8:	80c00015 	stw	r3,0(r16)
    72cc:	10004326 	beq	r2,zero,73dc <__sfvwrite_r+0x450>
    72d0:	9805883a 	mov	r2,r19
    72d4:	003f8606 	br	70f0 <__alt_data_end+0xff0070f0>
    72d8:	b00d883a 	mov	r6,r22
    72dc:	e00b883a 	mov	r5,fp
    72e0:	da000115 	stw	r8,4(sp)
    72e4:	0007a940 	call	7a94 <memmove>
    72e8:	80800217 	ldw	r2,8(r16)
    72ec:	80c00017 	ldw	r3,0(r16)
    72f0:	da000117 	ldw	r8,4(sp)
    72f4:	1585c83a 	sub	r2,r2,r22
    72f8:	1dad883a 	add	r22,r3,r22
    72fc:	80800215 	stw	r2,8(r16)
    7300:	85800015 	stw	r22,0(r16)
    7304:	003fbf06 	br	7204 <__alt_data_end+0xff007204>
    7308:	81000017 	ldw	r4,0(r16)
    730c:	9027883a 	mov	r19,r18
    7310:	902f883a 	mov	r23,r18
    7314:	003f6c06 	br	70c8 <__alt_data_end+0xff0070c8>
    7318:	900d883a 	mov	r6,r18
    731c:	01400284 	movi	r5,10
    7320:	e009883a 	mov	r4,fp
    7324:	00078680 	call	7868 <memchr>
    7328:	10003e26 	beq	r2,zero,7424 <__sfvwrite_r+0x498>
    732c:	10800044 	addi	r2,r2,1
    7330:	1727c83a 	sub	r19,r2,fp
    7334:	02000044 	movi	r8,1
    7338:	003f9d06 	br	71b0 <__alt_data_end+0xff0071b0>
    733c:	80800517 	ldw	r2,20(r16)
    7340:	81400417 	ldw	r5,16(r16)
    7344:	81c00017 	ldw	r7,0(r16)
    7348:	10a7883a 	add	r19,r2,r2
    734c:	9885883a 	add	r2,r19,r2
    7350:	1026d7fa 	srli	r19,r2,31
    7354:	396dc83a 	sub	r22,r7,r5
    7358:	b1000044 	addi	r4,r22,1
    735c:	9885883a 	add	r2,r19,r2
    7360:	1027d07a 	srai	r19,r2,1
    7364:	2485883a 	add	r2,r4,r18
    7368:	980d883a 	mov	r6,r19
    736c:	9880022e 	bgeu	r19,r2,7378 <__sfvwrite_r+0x3ec>
    7370:	1027883a 	mov	r19,r2
    7374:	100d883a 	mov	r6,r2
    7378:	18c1000c 	andi	r3,r3,1024
    737c:	18001c26 	beq	r3,zero,73f0 <__sfvwrite_r+0x464>
    7380:	300b883a 	mov	r5,r6
    7384:	a809883a 	mov	r4,r21
    7388:	0001e2c0 	call	1e2c <_malloc_r>
    738c:	102f883a 	mov	r23,r2
    7390:	10002926 	beq	r2,zero,7438 <__sfvwrite_r+0x4ac>
    7394:	81400417 	ldw	r5,16(r16)
    7398:	b00d883a 	mov	r6,r22
    739c:	1009883a 	mov	r4,r2
    73a0:	000794c0 	call	794c <memcpy>
    73a4:	8080030b 	ldhu	r2,12(r16)
    73a8:	00fedfc4 	movi	r3,-1153
    73ac:	10c4703a 	and	r2,r2,r3
    73b0:	10802014 	ori	r2,r2,128
    73b4:	8080030d 	sth	r2,12(r16)
    73b8:	bd89883a 	add	r4,r23,r22
    73bc:	9d8fc83a 	sub	r7,r19,r22
    73c0:	85c00415 	stw	r23,16(r16)
    73c4:	84c00515 	stw	r19,20(r16)
    73c8:	81000015 	stw	r4,0(r16)
    73cc:	9027883a 	mov	r19,r18
    73d0:	81c00215 	stw	r7,8(r16)
    73d4:	902f883a 	mov	r23,r18
    73d8:	003f3b06 	br	70c8 <__alt_data_end+0xff0070c8>
    73dc:	800b883a 	mov	r5,r16
    73e0:	a809883a 	mov	r4,r21
    73e4:	000672c0 	call	672c <_fflush_r>
    73e8:	103fb926 	beq	r2,zero,72d0 <__alt_data_end+0xff0072d0>
    73ec:	003f6506 	br	7184 <__alt_data_end+0xff007184>
    73f0:	a809883a 	mov	r4,r21
    73f4:	0008d140 	call	8d14 <_realloc_r>
    73f8:	102f883a 	mov	r23,r2
    73fc:	103fee1e 	bne	r2,zero,73b8 <__alt_data_end+0xff0073b8>
    7400:	81400417 	ldw	r5,16(r16)
    7404:	a809883a 	mov	r4,r21
    7408:	0006c7c0 	call	6c7c <_free_r>
    740c:	8080030b 	ldhu	r2,12(r16)
    7410:	00ffdfc4 	movi	r3,-129
    7414:	1884703a 	and	r2,r3,r2
    7418:	00c00304 	movi	r3,12
    741c:	a8c00015 	stw	r3,0(r21)
    7420:	003f5906 	br	7188 <__alt_data_end+0xff007188>
    7424:	94c00044 	addi	r19,r18,1
    7428:	02000044 	movi	r8,1
    742c:	003f6006 	br	71b0 <__alt_data_end+0xff0071b0>
    7430:	00bfffc4 	movi	r2,-1
    7434:	003f0306 	br	7044 <__alt_data_end+0xff007044>
    7438:	00800304 	movi	r2,12
    743c:	a8800015 	stw	r2,0(r21)
    7440:	8080030b 	ldhu	r2,12(r16)
    7444:	003f5006 	br	7188 <__alt_data_end+0xff007188>

00007448 <_fwalk>:
    7448:	defff704 	addi	sp,sp,-36
    744c:	dd000415 	stw	r20,16(sp)
    7450:	dfc00815 	stw	ra,32(sp)
    7454:	ddc00715 	stw	r23,28(sp)
    7458:	dd800615 	stw	r22,24(sp)
    745c:	dd400515 	stw	r21,20(sp)
    7460:	dcc00315 	stw	r19,12(sp)
    7464:	dc800215 	stw	r18,8(sp)
    7468:	dc400115 	stw	r17,4(sp)
    746c:	dc000015 	stw	r16,0(sp)
    7470:	2500b804 	addi	r20,r4,736
    7474:	a0002326 	beq	r20,zero,7504 <_fwalk+0xbc>
    7478:	282b883a 	mov	r21,r5
    747c:	002f883a 	mov	r23,zero
    7480:	05800044 	movi	r22,1
    7484:	04ffffc4 	movi	r19,-1
    7488:	a4400117 	ldw	r17,4(r20)
    748c:	a4800217 	ldw	r18,8(r20)
    7490:	8c7fffc4 	addi	r17,r17,-1
    7494:	88000d16 	blt	r17,zero,74cc <_fwalk+0x84>
    7498:	94000304 	addi	r16,r18,12
    749c:	94800384 	addi	r18,r18,14
    74a0:	8080000b 	ldhu	r2,0(r16)
    74a4:	8c7fffc4 	addi	r17,r17,-1
    74a8:	813ffd04 	addi	r4,r16,-12
    74ac:	b080042e 	bgeu	r22,r2,74c0 <_fwalk+0x78>
    74b0:	9080000f 	ldh	r2,0(r18)
    74b4:	14c00226 	beq	r2,r19,74c0 <_fwalk+0x78>
    74b8:	a83ee83a 	callr	r21
    74bc:	b8aeb03a 	or	r23,r23,r2
    74c0:	84001a04 	addi	r16,r16,104
    74c4:	94801a04 	addi	r18,r18,104
    74c8:	8cfff51e 	bne	r17,r19,74a0 <__alt_data_end+0xff0074a0>
    74cc:	a5000017 	ldw	r20,0(r20)
    74d0:	a03fed1e 	bne	r20,zero,7488 <__alt_data_end+0xff007488>
    74d4:	b805883a 	mov	r2,r23
    74d8:	dfc00817 	ldw	ra,32(sp)
    74dc:	ddc00717 	ldw	r23,28(sp)
    74e0:	dd800617 	ldw	r22,24(sp)
    74e4:	dd400517 	ldw	r21,20(sp)
    74e8:	dd000417 	ldw	r20,16(sp)
    74ec:	dcc00317 	ldw	r19,12(sp)
    74f0:	dc800217 	ldw	r18,8(sp)
    74f4:	dc400117 	ldw	r17,4(sp)
    74f8:	dc000017 	ldw	r16,0(sp)
    74fc:	dec00904 	addi	sp,sp,36
    7500:	f800283a 	ret
    7504:	002f883a 	mov	r23,zero
    7508:	003ff206 	br	74d4 <__alt_data_end+0xff0074d4>

0000750c <_fwalk_reent>:
    750c:	defff704 	addi	sp,sp,-36
    7510:	dd000415 	stw	r20,16(sp)
    7514:	dfc00815 	stw	ra,32(sp)
    7518:	ddc00715 	stw	r23,28(sp)
    751c:	dd800615 	stw	r22,24(sp)
    7520:	dd400515 	stw	r21,20(sp)
    7524:	dcc00315 	stw	r19,12(sp)
    7528:	dc800215 	stw	r18,8(sp)
    752c:	dc400115 	stw	r17,4(sp)
    7530:	dc000015 	stw	r16,0(sp)
    7534:	2500b804 	addi	r20,r4,736
    7538:	a0002326 	beq	r20,zero,75c8 <_fwalk_reent+0xbc>
    753c:	282b883a 	mov	r21,r5
    7540:	2027883a 	mov	r19,r4
    7544:	002f883a 	mov	r23,zero
    7548:	05800044 	movi	r22,1
    754c:	04bfffc4 	movi	r18,-1
    7550:	a4400117 	ldw	r17,4(r20)
    7554:	a4000217 	ldw	r16,8(r20)
    7558:	8c7fffc4 	addi	r17,r17,-1
    755c:	88000c16 	blt	r17,zero,7590 <_fwalk_reent+0x84>
    7560:	84000304 	addi	r16,r16,12
    7564:	8080000b 	ldhu	r2,0(r16)
    7568:	8c7fffc4 	addi	r17,r17,-1
    756c:	817ffd04 	addi	r5,r16,-12
    7570:	b080052e 	bgeu	r22,r2,7588 <_fwalk_reent+0x7c>
    7574:	8080008f 	ldh	r2,2(r16)
    7578:	9809883a 	mov	r4,r19
    757c:	14800226 	beq	r2,r18,7588 <_fwalk_reent+0x7c>
    7580:	a83ee83a 	callr	r21
    7584:	b8aeb03a 	or	r23,r23,r2
    7588:	84001a04 	addi	r16,r16,104
    758c:	8cbff51e 	bne	r17,r18,7564 <__alt_data_end+0xff007564>
    7590:	a5000017 	ldw	r20,0(r20)
    7594:	a03fee1e 	bne	r20,zero,7550 <__alt_data_end+0xff007550>
    7598:	b805883a 	mov	r2,r23
    759c:	dfc00817 	ldw	ra,32(sp)
    75a0:	ddc00717 	ldw	r23,28(sp)
    75a4:	dd800617 	ldw	r22,24(sp)
    75a8:	dd400517 	ldw	r21,20(sp)
    75ac:	dd000417 	ldw	r20,16(sp)
    75b0:	dcc00317 	ldw	r19,12(sp)
    75b4:	dc800217 	ldw	r18,8(sp)
    75b8:	dc400117 	ldw	r17,4(sp)
    75bc:	dc000017 	ldw	r16,0(sp)
    75c0:	dec00904 	addi	sp,sp,36
    75c4:	f800283a 	ret
    75c8:	002f883a 	mov	r23,zero
    75cc:	003ff206 	br	7598 <__alt_data_end+0xff007598>

000075d0 <_setlocale_r>:
    75d0:	30001b26 	beq	r6,zero,7640 <_setlocale_r+0x70>
    75d4:	01400074 	movhi	r5,1
    75d8:	defffe04 	addi	sp,sp,-8
    75dc:	29417504 	addi	r5,r5,1492
    75e0:	3009883a 	mov	r4,r6
    75e4:	dc000015 	stw	r16,0(sp)
    75e8:	dfc00115 	stw	ra,4(sp)
    75ec:	3021883a 	mov	r16,r6
    75f0:	00094280 	call	9428 <strcmp>
    75f4:	1000061e 	bne	r2,zero,7610 <_setlocale_r+0x40>
    75f8:	00800074 	movhi	r2,1
    75fc:	10817404 	addi	r2,r2,1488
    7600:	dfc00117 	ldw	ra,4(sp)
    7604:	dc000017 	ldw	r16,0(sp)
    7608:	dec00204 	addi	sp,sp,8
    760c:	f800283a 	ret
    7610:	01400074 	movhi	r5,1
    7614:	29417404 	addi	r5,r5,1488
    7618:	8009883a 	mov	r4,r16
    761c:	00094280 	call	9428 <strcmp>
    7620:	103ff526 	beq	r2,zero,75f8 <__alt_data_end+0xff0075f8>
    7624:	01400074 	movhi	r5,1
    7628:	29415f04 	addi	r5,r5,1404
    762c:	8009883a 	mov	r4,r16
    7630:	00094280 	call	9428 <strcmp>
    7634:	103ff026 	beq	r2,zero,75f8 <__alt_data_end+0xff0075f8>
    7638:	0005883a 	mov	r2,zero
    763c:	003ff006 	br	7600 <__alt_data_end+0xff007600>
    7640:	00800074 	movhi	r2,1
    7644:	10817404 	addi	r2,r2,1488
    7648:	f800283a 	ret

0000764c <__locale_charset>:
    764c:	00800074 	movhi	r2,1
    7650:	10842304 	addi	r2,r2,4236
    7654:	f800283a 	ret

00007658 <__locale_mb_cur_max>:
    7658:	00800074 	movhi	r2,1
    765c:	1088c104 	addi	r2,r2,8964
    7660:	10800017 	ldw	r2,0(r2)
    7664:	f800283a 	ret

00007668 <__locale_msgcharset>:
    7668:	00800074 	movhi	r2,1
    766c:	10841b04 	addi	r2,r2,4204
    7670:	f800283a 	ret

00007674 <__locale_cjk_lang>:
    7674:	0005883a 	mov	r2,zero
    7678:	f800283a 	ret

0000767c <_localeconv_r>:
    767c:	00800074 	movhi	r2,1
    7680:	10842b04 	addi	r2,r2,4268
    7684:	f800283a 	ret

00007688 <setlocale>:
    7688:	00800074 	movhi	r2,1
    768c:	1088c004 	addi	r2,r2,8960
    7690:	280d883a 	mov	r6,r5
    7694:	200b883a 	mov	r5,r4
    7698:	11000017 	ldw	r4,0(r2)
    769c:	00075d01 	jmpi	75d0 <_setlocale_r>

000076a0 <localeconv>:
    76a0:	00800074 	movhi	r2,1
    76a4:	10842b04 	addi	r2,r2,4268
    76a8:	f800283a 	ret

000076ac <__smakebuf_r>:
    76ac:	2880030b 	ldhu	r2,12(r5)
    76b0:	10c0008c 	andi	r3,r2,2
    76b4:	1800411e 	bne	r3,zero,77bc <__smakebuf_r+0x110>
    76b8:	deffec04 	addi	sp,sp,-80
    76bc:	dc000f15 	stw	r16,60(sp)
    76c0:	2821883a 	mov	r16,r5
    76c4:	2940038f 	ldh	r5,14(r5)
    76c8:	dc401015 	stw	r17,64(sp)
    76cc:	dfc01315 	stw	ra,76(sp)
    76d0:	dcc01215 	stw	r19,72(sp)
    76d4:	dc801115 	stw	r18,68(sp)
    76d8:	2023883a 	mov	r17,r4
    76dc:	28001c16 	blt	r5,zero,7750 <__smakebuf_r+0xa4>
    76e0:	d80d883a 	mov	r6,sp
    76e4:	000afd00 	call	afd0 <_fstat_r>
    76e8:	10001816 	blt	r2,zero,774c <__smakebuf_r+0xa0>
    76ec:	d8800117 	ldw	r2,4(sp)
    76f0:	00e00014 	movui	r3,32768
    76f4:	10bc000c 	andi	r2,r2,61440
    76f8:	14c80020 	cmpeqi	r19,r2,8192
    76fc:	10c03726 	beq	r2,r3,77dc <__smakebuf_r+0x130>
    7700:	80c0030b 	ldhu	r3,12(r16)
    7704:	18c20014 	ori	r3,r3,2048
    7708:	80c0030d 	sth	r3,12(r16)
    770c:	00c80004 	movi	r3,8192
    7710:	10c0521e 	bne	r2,r3,785c <__smakebuf_r+0x1b0>
    7714:	8140038f 	ldh	r5,14(r16)
    7718:	8809883a 	mov	r4,r17
    771c:	000b02c0 	call	b02c <_isatty_r>
    7720:	10004c26 	beq	r2,zero,7854 <__smakebuf_r+0x1a8>
    7724:	8080030b 	ldhu	r2,12(r16)
    7728:	80c010c4 	addi	r3,r16,67
    772c:	80c00015 	stw	r3,0(r16)
    7730:	10800054 	ori	r2,r2,1
    7734:	8080030d 	sth	r2,12(r16)
    7738:	00800044 	movi	r2,1
    773c:	80c00415 	stw	r3,16(r16)
    7740:	80800515 	stw	r2,20(r16)
    7744:	04810004 	movi	r18,1024
    7748:	00000706 	br	7768 <__smakebuf_r+0xbc>
    774c:	8080030b 	ldhu	r2,12(r16)
    7750:	10c0200c 	andi	r3,r2,128
    7754:	18001f1e 	bne	r3,zero,77d4 <__smakebuf_r+0x128>
    7758:	04810004 	movi	r18,1024
    775c:	10820014 	ori	r2,r2,2048
    7760:	8080030d 	sth	r2,12(r16)
    7764:	0027883a 	mov	r19,zero
    7768:	900b883a 	mov	r5,r18
    776c:	8809883a 	mov	r4,r17
    7770:	0001e2c0 	call	1e2c <_malloc_r>
    7774:	10002c26 	beq	r2,zero,7828 <__smakebuf_r+0x17c>
    7778:	80c0030b 	ldhu	r3,12(r16)
    777c:	01000034 	movhi	r4,0
    7780:	2119f004 	addi	r4,r4,26560
    7784:	89000f15 	stw	r4,60(r17)
    7788:	18c02014 	ori	r3,r3,128
    778c:	80c0030d 	sth	r3,12(r16)
    7790:	80800015 	stw	r2,0(r16)
    7794:	80800415 	stw	r2,16(r16)
    7798:	84800515 	stw	r18,20(r16)
    779c:	98001a1e 	bne	r19,zero,7808 <__smakebuf_r+0x15c>
    77a0:	dfc01317 	ldw	ra,76(sp)
    77a4:	dcc01217 	ldw	r19,72(sp)
    77a8:	dc801117 	ldw	r18,68(sp)
    77ac:	dc401017 	ldw	r17,64(sp)
    77b0:	dc000f17 	ldw	r16,60(sp)
    77b4:	dec01404 	addi	sp,sp,80
    77b8:	f800283a 	ret
    77bc:	288010c4 	addi	r2,r5,67
    77c0:	28800015 	stw	r2,0(r5)
    77c4:	28800415 	stw	r2,16(r5)
    77c8:	00800044 	movi	r2,1
    77cc:	28800515 	stw	r2,20(r5)
    77d0:	f800283a 	ret
    77d4:	04801004 	movi	r18,64
    77d8:	003fe006 	br	775c <__alt_data_end+0xff00775c>
    77dc:	81000a17 	ldw	r4,40(r16)
    77e0:	00c00074 	movhi	r3,1
    77e4:	18e4f104 	addi	r3,r3,-27708
    77e8:	20ffc51e 	bne	r4,r3,7700 <__alt_data_end+0xff007700>
    77ec:	8080030b 	ldhu	r2,12(r16)
    77f0:	04810004 	movi	r18,1024
    77f4:	84801315 	stw	r18,76(r16)
    77f8:	1484b03a 	or	r2,r2,r18
    77fc:	8080030d 	sth	r2,12(r16)
    7800:	0027883a 	mov	r19,zero
    7804:	003fd806 	br	7768 <__alt_data_end+0xff007768>
    7808:	8140038f 	ldh	r5,14(r16)
    780c:	8809883a 	mov	r4,r17
    7810:	000b02c0 	call	b02c <_isatty_r>
    7814:	103fe226 	beq	r2,zero,77a0 <__alt_data_end+0xff0077a0>
    7818:	8080030b 	ldhu	r2,12(r16)
    781c:	10800054 	ori	r2,r2,1
    7820:	8080030d 	sth	r2,12(r16)
    7824:	003fde06 	br	77a0 <__alt_data_end+0xff0077a0>
    7828:	8080030b 	ldhu	r2,12(r16)
    782c:	10c0800c 	andi	r3,r2,512
    7830:	183fdb1e 	bne	r3,zero,77a0 <__alt_data_end+0xff0077a0>
    7834:	10800094 	ori	r2,r2,2
    7838:	80c010c4 	addi	r3,r16,67
    783c:	8080030d 	sth	r2,12(r16)
    7840:	00800044 	movi	r2,1
    7844:	80c00015 	stw	r3,0(r16)
    7848:	80c00415 	stw	r3,16(r16)
    784c:	80800515 	stw	r2,20(r16)
    7850:	003fd306 	br	77a0 <__alt_data_end+0xff0077a0>
    7854:	04810004 	movi	r18,1024
    7858:	003fc306 	br	7768 <__alt_data_end+0xff007768>
    785c:	0027883a 	mov	r19,zero
    7860:	04810004 	movi	r18,1024
    7864:	003fc006 	br	7768 <__alt_data_end+0xff007768>

00007868 <memchr>:
    7868:	208000cc 	andi	r2,r4,3
    786c:	280f883a 	mov	r7,r5
    7870:	10003426 	beq	r2,zero,7944 <memchr+0xdc>
    7874:	30bfffc4 	addi	r2,r6,-1
    7878:	30001a26 	beq	r6,zero,78e4 <memchr+0x7c>
    787c:	20c00003 	ldbu	r3,0(r4)
    7880:	29803fcc 	andi	r6,r5,255
    7884:	30c0051e 	bne	r6,r3,789c <memchr+0x34>
    7888:	00001806 	br	78ec <memchr+0x84>
    788c:	10001526 	beq	r2,zero,78e4 <memchr+0x7c>
    7890:	20c00003 	ldbu	r3,0(r4)
    7894:	10bfffc4 	addi	r2,r2,-1
    7898:	30c01426 	beq	r6,r3,78ec <memchr+0x84>
    789c:	21000044 	addi	r4,r4,1
    78a0:	20c000cc 	andi	r3,r4,3
    78a4:	183ff91e 	bne	r3,zero,788c <__alt_data_end+0xff00788c>
    78a8:	020000c4 	movi	r8,3
    78ac:	40801136 	bltu	r8,r2,78f4 <memchr+0x8c>
    78b0:	10000c26 	beq	r2,zero,78e4 <memchr+0x7c>
    78b4:	20c00003 	ldbu	r3,0(r4)
    78b8:	29403fcc 	andi	r5,r5,255
    78bc:	28c00b26 	beq	r5,r3,78ec <memchr+0x84>
    78c0:	20c00044 	addi	r3,r4,1
    78c4:	39803fcc 	andi	r6,r7,255
    78c8:	2089883a 	add	r4,r4,r2
    78cc:	00000306 	br	78dc <memchr+0x74>
    78d0:	18c00044 	addi	r3,r3,1
    78d4:	197fffc3 	ldbu	r5,-1(r3)
    78d8:	31400526 	beq	r6,r5,78f0 <memchr+0x88>
    78dc:	1805883a 	mov	r2,r3
    78e0:	20fffb1e 	bne	r4,r3,78d0 <__alt_data_end+0xff0078d0>
    78e4:	0005883a 	mov	r2,zero
    78e8:	f800283a 	ret
    78ec:	2005883a 	mov	r2,r4
    78f0:	f800283a 	ret
    78f4:	28c03fcc 	andi	r3,r5,255
    78f8:	1812923a 	slli	r9,r3,8
    78fc:	02ffbff4 	movhi	r11,65279
    7900:	02a02074 	movhi	r10,32897
    7904:	48d2b03a 	or	r9,r9,r3
    7908:	4806943a 	slli	r3,r9,16
    790c:	5affbfc4 	addi	r11,r11,-257
    7910:	52a02004 	addi	r10,r10,-32640
    7914:	48d2b03a 	or	r9,r9,r3
    7918:	20c00017 	ldw	r3,0(r4)
    791c:	48c6f03a 	xor	r3,r9,r3
    7920:	1acd883a 	add	r6,r3,r11
    7924:	00c6303a 	nor	r3,zero,r3
    7928:	30c6703a 	and	r3,r6,r3
    792c:	1a86703a 	and	r3,r3,r10
    7930:	183fe01e 	bne	r3,zero,78b4 <__alt_data_end+0xff0078b4>
    7934:	10bfff04 	addi	r2,r2,-4
    7938:	21000104 	addi	r4,r4,4
    793c:	40bff636 	bltu	r8,r2,7918 <__alt_data_end+0xff007918>
    7940:	003fdb06 	br	78b0 <__alt_data_end+0xff0078b0>
    7944:	3005883a 	mov	r2,r6
    7948:	003fd706 	br	78a8 <__alt_data_end+0xff0078a8>

0000794c <memcpy>:
    794c:	defffd04 	addi	sp,sp,-12
    7950:	dfc00215 	stw	ra,8(sp)
    7954:	dc400115 	stw	r17,4(sp)
    7958:	dc000015 	stw	r16,0(sp)
    795c:	00c003c4 	movi	r3,15
    7960:	2005883a 	mov	r2,r4
    7964:	1980452e 	bgeu	r3,r6,7a7c <memcpy+0x130>
    7968:	2906b03a 	or	r3,r5,r4
    796c:	18c000cc 	andi	r3,r3,3
    7970:	1800441e 	bne	r3,zero,7a84 <memcpy+0x138>
    7974:	347ffc04 	addi	r17,r6,-16
    7978:	8822d13a 	srli	r17,r17,4
    797c:	28c00104 	addi	r3,r5,4
    7980:	23400104 	addi	r13,r4,4
    7984:	8820913a 	slli	r16,r17,4
    7988:	2b000204 	addi	r12,r5,8
    798c:	22c00204 	addi	r11,r4,8
    7990:	84000504 	addi	r16,r16,20
    7994:	2a800304 	addi	r10,r5,12
    7998:	22400304 	addi	r9,r4,12
    799c:	2c21883a 	add	r16,r5,r16
    79a0:	2811883a 	mov	r8,r5
    79a4:	200f883a 	mov	r7,r4
    79a8:	41000017 	ldw	r4,0(r8)
    79ac:	1fc00017 	ldw	ra,0(r3)
    79b0:	63c00017 	ldw	r15,0(r12)
    79b4:	39000015 	stw	r4,0(r7)
    79b8:	53800017 	ldw	r14,0(r10)
    79bc:	6fc00015 	stw	ra,0(r13)
    79c0:	5bc00015 	stw	r15,0(r11)
    79c4:	4b800015 	stw	r14,0(r9)
    79c8:	18c00404 	addi	r3,r3,16
    79cc:	39c00404 	addi	r7,r7,16
    79d0:	42000404 	addi	r8,r8,16
    79d4:	6b400404 	addi	r13,r13,16
    79d8:	63000404 	addi	r12,r12,16
    79dc:	5ac00404 	addi	r11,r11,16
    79e0:	52800404 	addi	r10,r10,16
    79e4:	4a400404 	addi	r9,r9,16
    79e8:	1c3fef1e 	bne	r3,r16,79a8 <__alt_data_end+0xff0079a8>
    79ec:	89c00044 	addi	r7,r17,1
    79f0:	380e913a 	slli	r7,r7,4
    79f4:	310003cc 	andi	r4,r6,15
    79f8:	02c000c4 	movi	r11,3
    79fc:	11c7883a 	add	r3,r2,r7
    7a00:	29cb883a 	add	r5,r5,r7
    7a04:	5900212e 	bgeu	r11,r4,7a8c <memcpy+0x140>
    7a08:	1813883a 	mov	r9,r3
    7a0c:	2811883a 	mov	r8,r5
    7a10:	200f883a 	mov	r7,r4
    7a14:	42800017 	ldw	r10,0(r8)
    7a18:	4a400104 	addi	r9,r9,4
    7a1c:	39ffff04 	addi	r7,r7,-4
    7a20:	4abfff15 	stw	r10,-4(r9)
    7a24:	42000104 	addi	r8,r8,4
    7a28:	59fffa36 	bltu	r11,r7,7a14 <__alt_data_end+0xff007a14>
    7a2c:	213fff04 	addi	r4,r4,-4
    7a30:	2008d0ba 	srli	r4,r4,2
    7a34:	318000cc 	andi	r6,r6,3
    7a38:	21000044 	addi	r4,r4,1
    7a3c:	2109883a 	add	r4,r4,r4
    7a40:	2109883a 	add	r4,r4,r4
    7a44:	1907883a 	add	r3,r3,r4
    7a48:	290b883a 	add	r5,r5,r4
    7a4c:	30000626 	beq	r6,zero,7a68 <memcpy+0x11c>
    7a50:	198d883a 	add	r6,r3,r6
    7a54:	29c00003 	ldbu	r7,0(r5)
    7a58:	18c00044 	addi	r3,r3,1
    7a5c:	29400044 	addi	r5,r5,1
    7a60:	19ffffc5 	stb	r7,-1(r3)
    7a64:	19bffb1e 	bne	r3,r6,7a54 <__alt_data_end+0xff007a54>
    7a68:	dfc00217 	ldw	ra,8(sp)
    7a6c:	dc400117 	ldw	r17,4(sp)
    7a70:	dc000017 	ldw	r16,0(sp)
    7a74:	dec00304 	addi	sp,sp,12
    7a78:	f800283a 	ret
    7a7c:	2007883a 	mov	r3,r4
    7a80:	003ff206 	br	7a4c <__alt_data_end+0xff007a4c>
    7a84:	2007883a 	mov	r3,r4
    7a88:	003ff106 	br	7a50 <__alt_data_end+0xff007a50>
    7a8c:	200d883a 	mov	r6,r4
    7a90:	003fee06 	br	7a4c <__alt_data_end+0xff007a4c>

00007a94 <memmove>:
    7a94:	2005883a 	mov	r2,r4
    7a98:	29000b2e 	bgeu	r5,r4,7ac8 <memmove+0x34>
    7a9c:	298f883a 	add	r7,r5,r6
    7aa0:	21c0092e 	bgeu	r4,r7,7ac8 <memmove+0x34>
    7aa4:	2187883a 	add	r3,r4,r6
    7aa8:	198bc83a 	sub	r5,r3,r6
    7aac:	30004826 	beq	r6,zero,7bd0 <memmove+0x13c>
    7ab0:	39ffffc4 	addi	r7,r7,-1
    7ab4:	39000003 	ldbu	r4,0(r7)
    7ab8:	18ffffc4 	addi	r3,r3,-1
    7abc:	19000005 	stb	r4,0(r3)
    7ac0:	28fffb1e 	bne	r5,r3,7ab0 <__alt_data_end+0xff007ab0>
    7ac4:	f800283a 	ret
    7ac8:	00c003c4 	movi	r3,15
    7acc:	1980412e 	bgeu	r3,r6,7bd4 <memmove+0x140>
    7ad0:	2886b03a 	or	r3,r5,r2
    7ad4:	18c000cc 	andi	r3,r3,3
    7ad8:	1800401e 	bne	r3,zero,7bdc <memmove+0x148>
    7adc:	33fffc04 	addi	r15,r6,-16
    7ae0:	781ed13a 	srli	r15,r15,4
    7ae4:	28c00104 	addi	r3,r5,4
    7ae8:	13400104 	addi	r13,r2,4
    7aec:	781c913a 	slli	r14,r15,4
    7af0:	2b000204 	addi	r12,r5,8
    7af4:	12c00204 	addi	r11,r2,8
    7af8:	73800504 	addi	r14,r14,20
    7afc:	2a800304 	addi	r10,r5,12
    7b00:	12400304 	addi	r9,r2,12
    7b04:	2b9d883a 	add	r14,r5,r14
    7b08:	2811883a 	mov	r8,r5
    7b0c:	100f883a 	mov	r7,r2
    7b10:	41000017 	ldw	r4,0(r8)
    7b14:	39c00404 	addi	r7,r7,16
    7b18:	18c00404 	addi	r3,r3,16
    7b1c:	393ffc15 	stw	r4,-16(r7)
    7b20:	193ffc17 	ldw	r4,-16(r3)
    7b24:	6b400404 	addi	r13,r13,16
    7b28:	5ac00404 	addi	r11,r11,16
    7b2c:	693ffc15 	stw	r4,-16(r13)
    7b30:	61000017 	ldw	r4,0(r12)
    7b34:	4a400404 	addi	r9,r9,16
    7b38:	42000404 	addi	r8,r8,16
    7b3c:	593ffc15 	stw	r4,-16(r11)
    7b40:	51000017 	ldw	r4,0(r10)
    7b44:	63000404 	addi	r12,r12,16
    7b48:	52800404 	addi	r10,r10,16
    7b4c:	493ffc15 	stw	r4,-16(r9)
    7b50:	1bbfef1e 	bne	r3,r14,7b10 <__alt_data_end+0xff007b10>
    7b54:	79000044 	addi	r4,r15,1
    7b58:	2008913a 	slli	r4,r4,4
    7b5c:	328003cc 	andi	r10,r6,15
    7b60:	02c000c4 	movi	r11,3
    7b64:	1107883a 	add	r3,r2,r4
    7b68:	290b883a 	add	r5,r5,r4
    7b6c:	5a801e2e 	bgeu	r11,r10,7be8 <memmove+0x154>
    7b70:	1813883a 	mov	r9,r3
    7b74:	2811883a 	mov	r8,r5
    7b78:	500f883a 	mov	r7,r10
    7b7c:	41000017 	ldw	r4,0(r8)
    7b80:	4a400104 	addi	r9,r9,4
    7b84:	39ffff04 	addi	r7,r7,-4
    7b88:	493fff15 	stw	r4,-4(r9)
    7b8c:	42000104 	addi	r8,r8,4
    7b90:	59fffa36 	bltu	r11,r7,7b7c <__alt_data_end+0xff007b7c>
    7b94:	513fff04 	addi	r4,r10,-4
    7b98:	2008d0ba 	srli	r4,r4,2
    7b9c:	318000cc 	andi	r6,r6,3
    7ba0:	21000044 	addi	r4,r4,1
    7ba4:	2109883a 	add	r4,r4,r4
    7ba8:	2109883a 	add	r4,r4,r4
    7bac:	1907883a 	add	r3,r3,r4
    7bb0:	290b883a 	add	r5,r5,r4
    7bb4:	30000b26 	beq	r6,zero,7be4 <memmove+0x150>
    7bb8:	198d883a 	add	r6,r3,r6
    7bbc:	29c00003 	ldbu	r7,0(r5)
    7bc0:	18c00044 	addi	r3,r3,1
    7bc4:	29400044 	addi	r5,r5,1
    7bc8:	19ffffc5 	stb	r7,-1(r3)
    7bcc:	19bffb1e 	bne	r3,r6,7bbc <__alt_data_end+0xff007bbc>
    7bd0:	f800283a 	ret
    7bd4:	1007883a 	mov	r3,r2
    7bd8:	003ff606 	br	7bb4 <__alt_data_end+0xff007bb4>
    7bdc:	1007883a 	mov	r3,r2
    7be0:	003ff506 	br	7bb8 <__alt_data_end+0xff007bb8>
    7be4:	f800283a 	ret
    7be8:	500d883a 	mov	r6,r10
    7bec:	003ff106 	br	7bb4 <__alt_data_end+0xff007bb4>

00007bf0 <memset>:
    7bf0:	20c000cc 	andi	r3,r4,3
    7bf4:	2005883a 	mov	r2,r4
    7bf8:	18004426 	beq	r3,zero,7d0c <memset+0x11c>
    7bfc:	31ffffc4 	addi	r7,r6,-1
    7c00:	30004026 	beq	r6,zero,7d04 <memset+0x114>
    7c04:	2813883a 	mov	r9,r5
    7c08:	200d883a 	mov	r6,r4
    7c0c:	2007883a 	mov	r3,r4
    7c10:	00000406 	br	7c24 <memset+0x34>
    7c14:	3a3fffc4 	addi	r8,r7,-1
    7c18:	31800044 	addi	r6,r6,1
    7c1c:	38003926 	beq	r7,zero,7d04 <memset+0x114>
    7c20:	400f883a 	mov	r7,r8
    7c24:	18c00044 	addi	r3,r3,1
    7c28:	32400005 	stb	r9,0(r6)
    7c2c:	1a0000cc 	andi	r8,r3,3
    7c30:	403ff81e 	bne	r8,zero,7c14 <__alt_data_end+0xff007c14>
    7c34:	010000c4 	movi	r4,3
    7c38:	21c02d2e 	bgeu	r4,r7,7cf0 <memset+0x100>
    7c3c:	29003fcc 	andi	r4,r5,255
    7c40:	200c923a 	slli	r6,r4,8
    7c44:	3108b03a 	or	r4,r6,r4
    7c48:	200c943a 	slli	r6,r4,16
    7c4c:	218cb03a 	or	r6,r4,r6
    7c50:	010003c4 	movi	r4,15
    7c54:	21c0182e 	bgeu	r4,r7,7cb8 <memset+0xc8>
    7c58:	3b3ffc04 	addi	r12,r7,-16
    7c5c:	6018d13a 	srli	r12,r12,4
    7c60:	1a000104 	addi	r8,r3,4
    7c64:	1ac00204 	addi	r11,r3,8
    7c68:	6008913a 	slli	r4,r12,4
    7c6c:	1a800304 	addi	r10,r3,12
    7c70:	1813883a 	mov	r9,r3
    7c74:	21000504 	addi	r4,r4,20
    7c78:	1909883a 	add	r4,r3,r4
    7c7c:	49800015 	stw	r6,0(r9)
    7c80:	41800015 	stw	r6,0(r8)
    7c84:	59800015 	stw	r6,0(r11)
    7c88:	51800015 	stw	r6,0(r10)
    7c8c:	42000404 	addi	r8,r8,16
    7c90:	4a400404 	addi	r9,r9,16
    7c94:	5ac00404 	addi	r11,r11,16
    7c98:	52800404 	addi	r10,r10,16
    7c9c:	413ff71e 	bne	r8,r4,7c7c <__alt_data_end+0xff007c7c>
    7ca0:	63000044 	addi	r12,r12,1
    7ca4:	6018913a 	slli	r12,r12,4
    7ca8:	39c003cc 	andi	r7,r7,15
    7cac:	010000c4 	movi	r4,3
    7cb0:	1b07883a 	add	r3,r3,r12
    7cb4:	21c00e2e 	bgeu	r4,r7,7cf0 <memset+0x100>
    7cb8:	1813883a 	mov	r9,r3
    7cbc:	3811883a 	mov	r8,r7
    7cc0:	010000c4 	movi	r4,3
    7cc4:	49800015 	stw	r6,0(r9)
    7cc8:	423fff04 	addi	r8,r8,-4
    7ccc:	4a400104 	addi	r9,r9,4
    7cd0:	223ffc36 	bltu	r4,r8,7cc4 <__alt_data_end+0xff007cc4>
    7cd4:	393fff04 	addi	r4,r7,-4
    7cd8:	2008d0ba 	srli	r4,r4,2
    7cdc:	39c000cc 	andi	r7,r7,3
    7ce0:	21000044 	addi	r4,r4,1
    7ce4:	2109883a 	add	r4,r4,r4
    7ce8:	2109883a 	add	r4,r4,r4
    7cec:	1907883a 	add	r3,r3,r4
    7cf0:	38000526 	beq	r7,zero,7d08 <memset+0x118>
    7cf4:	19cf883a 	add	r7,r3,r7
    7cf8:	19400005 	stb	r5,0(r3)
    7cfc:	18c00044 	addi	r3,r3,1
    7d00:	38fffd1e 	bne	r7,r3,7cf8 <__alt_data_end+0xff007cf8>
    7d04:	f800283a 	ret
    7d08:	f800283a 	ret
    7d0c:	2007883a 	mov	r3,r4
    7d10:	300f883a 	mov	r7,r6
    7d14:	003fc706 	br	7c34 <__alt_data_end+0xff007c34>

00007d18 <_Balloc>:
    7d18:	20801317 	ldw	r2,76(r4)
    7d1c:	defffc04 	addi	sp,sp,-16
    7d20:	dc400115 	stw	r17,4(sp)
    7d24:	dc000015 	stw	r16,0(sp)
    7d28:	dfc00315 	stw	ra,12(sp)
    7d2c:	dc800215 	stw	r18,8(sp)
    7d30:	2023883a 	mov	r17,r4
    7d34:	2821883a 	mov	r16,r5
    7d38:	10000f26 	beq	r2,zero,7d78 <_Balloc+0x60>
    7d3c:	8407883a 	add	r3,r16,r16
    7d40:	18c7883a 	add	r3,r3,r3
    7d44:	10c7883a 	add	r3,r2,r3
    7d48:	18800017 	ldw	r2,0(r3)
    7d4c:	10001126 	beq	r2,zero,7d94 <_Balloc+0x7c>
    7d50:	11000017 	ldw	r4,0(r2)
    7d54:	19000015 	stw	r4,0(r3)
    7d58:	10000415 	stw	zero,16(r2)
    7d5c:	10000315 	stw	zero,12(r2)
    7d60:	dfc00317 	ldw	ra,12(sp)
    7d64:	dc800217 	ldw	r18,8(sp)
    7d68:	dc400117 	ldw	r17,4(sp)
    7d6c:	dc000017 	ldw	r16,0(sp)
    7d70:	dec00404 	addi	sp,sp,16
    7d74:	f800283a 	ret
    7d78:	01800844 	movi	r6,33
    7d7c:	01400104 	movi	r5,4
    7d80:	000ac000 	call	ac00 <_calloc_r>
    7d84:	88801315 	stw	r2,76(r17)
    7d88:	103fec1e 	bne	r2,zero,7d3c <__alt_data_end+0xff007d3c>
    7d8c:	0005883a 	mov	r2,zero
    7d90:	003ff306 	br	7d60 <__alt_data_end+0xff007d60>
    7d94:	01400044 	movi	r5,1
    7d98:	2c24983a 	sll	r18,r5,r16
    7d9c:	8809883a 	mov	r4,r17
    7da0:	91800144 	addi	r6,r18,5
    7da4:	318d883a 	add	r6,r6,r6
    7da8:	318d883a 	add	r6,r6,r6
    7dac:	000ac000 	call	ac00 <_calloc_r>
    7db0:	103ff626 	beq	r2,zero,7d8c <__alt_data_end+0xff007d8c>
    7db4:	14000115 	stw	r16,4(r2)
    7db8:	14800215 	stw	r18,8(r2)
    7dbc:	003fe606 	br	7d58 <__alt_data_end+0xff007d58>

00007dc0 <_Bfree>:
    7dc0:	28000826 	beq	r5,zero,7de4 <_Bfree+0x24>
    7dc4:	28c00117 	ldw	r3,4(r5)
    7dc8:	20801317 	ldw	r2,76(r4)
    7dcc:	18c7883a 	add	r3,r3,r3
    7dd0:	18c7883a 	add	r3,r3,r3
    7dd4:	10c5883a 	add	r2,r2,r3
    7dd8:	10c00017 	ldw	r3,0(r2)
    7ddc:	28c00015 	stw	r3,0(r5)
    7de0:	11400015 	stw	r5,0(r2)
    7de4:	f800283a 	ret

00007de8 <__multadd>:
    7de8:	defffa04 	addi	sp,sp,-24
    7dec:	dc800315 	stw	r18,12(sp)
    7df0:	dc400215 	stw	r17,8(sp)
    7df4:	dc000115 	stw	r16,4(sp)
    7df8:	2823883a 	mov	r17,r5
    7dfc:	2c000417 	ldw	r16,16(r5)
    7e00:	dfc00515 	stw	ra,20(sp)
    7e04:	dcc00415 	stw	r19,16(sp)
    7e08:	2025883a 	mov	r18,r4
    7e0c:	29400504 	addi	r5,r5,20
    7e10:	0011883a 	mov	r8,zero
    7e14:	28c00017 	ldw	r3,0(r5)
    7e18:	29400104 	addi	r5,r5,4
    7e1c:	42000044 	addi	r8,r8,1
    7e20:	18bfffcc 	andi	r2,r3,65535
    7e24:	1185383a 	mul	r2,r2,r6
    7e28:	1806d43a 	srli	r3,r3,16
    7e2c:	11cf883a 	add	r7,r2,r7
    7e30:	3808d43a 	srli	r4,r7,16
    7e34:	1987383a 	mul	r3,r3,r6
    7e38:	38bfffcc 	andi	r2,r7,65535
    7e3c:	1907883a 	add	r3,r3,r4
    7e40:	1808943a 	slli	r4,r3,16
    7e44:	180ed43a 	srli	r7,r3,16
    7e48:	2085883a 	add	r2,r4,r2
    7e4c:	28bfff15 	stw	r2,-4(r5)
    7e50:	443ff016 	blt	r8,r16,7e14 <__alt_data_end+0xff007e14>
    7e54:	38000926 	beq	r7,zero,7e7c <__multadd+0x94>
    7e58:	88800217 	ldw	r2,8(r17)
    7e5c:	80800f0e 	bge	r16,r2,7e9c <__multadd+0xb4>
    7e60:	80800144 	addi	r2,r16,5
    7e64:	1085883a 	add	r2,r2,r2
    7e68:	1085883a 	add	r2,r2,r2
    7e6c:	8885883a 	add	r2,r17,r2
    7e70:	11c00015 	stw	r7,0(r2)
    7e74:	84000044 	addi	r16,r16,1
    7e78:	8c000415 	stw	r16,16(r17)
    7e7c:	8805883a 	mov	r2,r17
    7e80:	dfc00517 	ldw	ra,20(sp)
    7e84:	dcc00417 	ldw	r19,16(sp)
    7e88:	dc800317 	ldw	r18,12(sp)
    7e8c:	dc400217 	ldw	r17,8(sp)
    7e90:	dc000117 	ldw	r16,4(sp)
    7e94:	dec00604 	addi	sp,sp,24
    7e98:	f800283a 	ret
    7e9c:	89400117 	ldw	r5,4(r17)
    7ea0:	9009883a 	mov	r4,r18
    7ea4:	d9c00015 	stw	r7,0(sp)
    7ea8:	29400044 	addi	r5,r5,1
    7eac:	0007d180 	call	7d18 <_Balloc>
    7eb0:	89800417 	ldw	r6,16(r17)
    7eb4:	89400304 	addi	r5,r17,12
    7eb8:	11000304 	addi	r4,r2,12
    7ebc:	31800084 	addi	r6,r6,2
    7ec0:	318d883a 	add	r6,r6,r6
    7ec4:	318d883a 	add	r6,r6,r6
    7ec8:	1027883a 	mov	r19,r2
    7ecc:	000794c0 	call	794c <memcpy>
    7ed0:	d9c00017 	ldw	r7,0(sp)
    7ed4:	88000a26 	beq	r17,zero,7f00 <__multadd+0x118>
    7ed8:	88c00117 	ldw	r3,4(r17)
    7edc:	90801317 	ldw	r2,76(r18)
    7ee0:	18c7883a 	add	r3,r3,r3
    7ee4:	18c7883a 	add	r3,r3,r3
    7ee8:	10c5883a 	add	r2,r2,r3
    7eec:	10c00017 	ldw	r3,0(r2)
    7ef0:	88c00015 	stw	r3,0(r17)
    7ef4:	14400015 	stw	r17,0(r2)
    7ef8:	9823883a 	mov	r17,r19
    7efc:	003fd806 	br	7e60 <__alt_data_end+0xff007e60>
    7f00:	9823883a 	mov	r17,r19
    7f04:	003fd606 	br	7e60 <__alt_data_end+0xff007e60>

00007f08 <__s2b>:
    7f08:	defff904 	addi	sp,sp,-28
    7f0c:	dc400115 	stw	r17,4(sp)
    7f10:	dc000015 	stw	r16,0(sp)
    7f14:	2023883a 	mov	r17,r4
    7f18:	2821883a 	mov	r16,r5
    7f1c:	39000204 	addi	r4,r7,8
    7f20:	01400244 	movi	r5,9
    7f24:	dcc00315 	stw	r19,12(sp)
    7f28:	dc800215 	stw	r18,8(sp)
    7f2c:	dfc00615 	stw	ra,24(sp)
    7f30:	dd400515 	stw	r21,20(sp)
    7f34:	dd000415 	stw	r20,16(sp)
    7f38:	3825883a 	mov	r18,r7
    7f3c:	3027883a 	mov	r19,r6
    7f40:	000bf300 	call	bf30 <__divsi3>
    7f44:	00c00044 	movi	r3,1
    7f48:	000b883a 	mov	r5,zero
    7f4c:	1880030e 	bge	r3,r2,7f5c <__s2b+0x54>
    7f50:	18c7883a 	add	r3,r3,r3
    7f54:	29400044 	addi	r5,r5,1
    7f58:	18bffd16 	blt	r3,r2,7f50 <__alt_data_end+0xff007f50>
    7f5c:	8809883a 	mov	r4,r17
    7f60:	0007d180 	call	7d18 <_Balloc>
    7f64:	d8c00717 	ldw	r3,28(sp)
    7f68:	10c00515 	stw	r3,20(r2)
    7f6c:	00c00044 	movi	r3,1
    7f70:	10c00415 	stw	r3,16(r2)
    7f74:	00c00244 	movi	r3,9
    7f78:	1cc0210e 	bge	r3,r19,8000 <__s2b+0xf8>
    7f7c:	80eb883a 	add	r21,r16,r3
    7f80:	a829883a 	mov	r20,r21
    7f84:	84e1883a 	add	r16,r16,r19
    7f88:	a1c00007 	ldb	r7,0(r20)
    7f8c:	01800284 	movi	r6,10
    7f90:	a5000044 	addi	r20,r20,1
    7f94:	100b883a 	mov	r5,r2
    7f98:	39fff404 	addi	r7,r7,-48
    7f9c:	8809883a 	mov	r4,r17
    7fa0:	0007de80 	call	7de8 <__multadd>
    7fa4:	a43ff81e 	bne	r20,r16,7f88 <__alt_data_end+0xff007f88>
    7fa8:	ace1883a 	add	r16,r21,r19
    7fac:	843ffe04 	addi	r16,r16,-8
    7fb0:	9c800a0e 	bge	r19,r18,7fdc <__s2b+0xd4>
    7fb4:	94e5c83a 	sub	r18,r18,r19
    7fb8:	84a5883a 	add	r18,r16,r18
    7fbc:	81c00007 	ldb	r7,0(r16)
    7fc0:	01800284 	movi	r6,10
    7fc4:	84000044 	addi	r16,r16,1
    7fc8:	100b883a 	mov	r5,r2
    7fcc:	39fff404 	addi	r7,r7,-48
    7fd0:	8809883a 	mov	r4,r17
    7fd4:	0007de80 	call	7de8 <__multadd>
    7fd8:	84bff81e 	bne	r16,r18,7fbc <__alt_data_end+0xff007fbc>
    7fdc:	dfc00617 	ldw	ra,24(sp)
    7fe0:	dd400517 	ldw	r21,20(sp)
    7fe4:	dd000417 	ldw	r20,16(sp)
    7fe8:	dcc00317 	ldw	r19,12(sp)
    7fec:	dc800217 	ldw	r18,8(sp)
    7ff0:	dc400117 	ldw	r17,4(sp)
    7ff4:	dc000017 	ldw	r16,0(sp)
    7ff8:	dec00704 	addi	sp,sp,28
    7ffc:	f800283a 	ret
    8000:	84000284 	addi	r16,r16,10
    8004:	1827883a 	mov	r19,r3
    8008:	003fe906 	br	7fb0 <__alt_data_end+0xff007fb0>

0000800c <__hi0bits>:
    800c:	20bfffec 	andhi	r2,r4,65535
    8010:	1000141e 	bne	r2,zero,8064 <__hi0bits+0x58>
    8014:	2008943a 	slli	r4,r4,16
    8018:	00800404 	movi	r2,16
    801c:	20ffc02c 	andhi	r3,r4,65280
    8020:	1800021e 	bne	r3,zero,802c <__hi0bits+0x20>
    8024:	2008923a 	slli	r4,r4,8
    8028:	10800204 	addi	r2,r2,8
    802c:	20fc002c 	andhi	r3,r4,61440
    8030:	1800021e 	bne	r3,zero,803c <__hi0bits+0x30>
    8034:	2008913a 	slli	r4,r4,4
    8038:	10800104 	addi	r2,r2,4
    803c:	20f0002c 	andhi	r3,r4,49152
    8040:	1800031e 	bne	r3,zero,8050 <__hi0bits+0x44>
    8044:	2109883a 	add	r4,r4,r4
    8048:	10800084 	addi	r2,r2,2
    804c:	2109883a 	add	r4,r4,r4
    8050:	20000316 	blt	r4,zero,8060 <__hi0bits+0x54>
    8054:	2110002c 	andhi	r4,r4,16384
    8058:	2000041e 	bne	r4,zero,806c <__hi0bits+0x60>
    805c:	00800804 	movi	r2,32
    8060:	f800283a 	ret
    8064:	0005883a 	mov	r2,zero
    8068:	003fec06 	br	801c <__alt_data_end+0xff00801c>
    806c:	10800044 	addi	r2,r2,1
    8070:	f800283a 	ret

00008074 <__lo0bits>:
    8074:	20c00017 	ldw	r3,0(r4)
    8078:	188001cc 	andi	r2,r3,7
    807c:	10000826 	beq	r2,zero,80a0 <__lo0bits+0x2c>
    8080:	1880004c 	andi	r2,r3,1
    8084:	1000211e 	bne	r2,zero,810c <__lo0bits+0x98>
    8088:	1880008c 	andi	r2,r3,2
    808c:	1000211e 	bne	r2,zero,8114 <__lo0bits+0xa0>
    8090:	1806d0ba 	srli	r3,r3,2
    8094:	00800084 	movi	r2,2
    8098:	20c00015 	stw	r3,0(r4)
    809c:	f800283a 	ret
    80a0:	18bfffcc 	andi	r2,r3,65535
    80a4:	10001326 	beq	r2,zero,80f4 <__lo0bits+0x80>
    80a8:	0005883a 	mov	r2,zero
    80ac:	19403fcc 	andi	r5,r3,255
    80b0:	2800021e 	bne	r5,zero,80bc <__lo0bits+0x48>
    80b4:	1806d23a 	srli	r3,r3,8
    80b8:	10800204 	addi	r2,r2,8
    80bc:	194003cc 	andi	r5,r3,15
    80c0:	2800021e 	bne	r5,zero,80cc <__lo0bits+0x58>
    80c4:	1806d13a 	srli	r3,r3,4
    80c8:	10800104 	addi	r2,r2,4
    80cc:	194000cc 	andi	r5,r3,3
    80d0:	2800021e 	bne	r5,zero,80dc <__lo0bits+0x68>
    80d4:	1806d0ba 	srli	r3,r3,2
    80d8:	10800084 	addi	r2,r2,2
    80dc:	1940004c 	andi	r5,r3,1
    80e0:	2800081e 	bne	r5,zero,8104 <__lo0bits+0x90>
    80e4:	1806d07a 	srli	r3,r3,1
    80e8:	1800051e 	bne	r3,zero,8100 <__lo0bits+0x8c>
    80ec:	00800804 	movi	r2,32
    80f0:	f800283a 	ret
    80f4:	1806d43a 	srli	r3,r3,16
    80f8:	00800404 	movi	r2,16
    80fc:	003feb06 	br	80ac <__alt_data_end+0xff0080ac>
    8100:	10800044 	addi	r2,r2,1
    8104:	20c00015 	stw	r3,0(r4)
    8108:	f800283a 	ret
    810c:	0005883a 	mov	r2,zero
    8110:	f800283a 	ret
    8114:	1806d07a 	srli	r3,r3,1
    8118:	00800044 	movi	r2,1
    811c:	20c00015 	stw	r3,0(r4)
    8120:	f800283a 	ret

00008124 <__i2b>:
    8124:	defffd04 	addi	sp,sp,-12
    8128:	dc000015 	stw	r16,0(sp)
    812c:	04000044 	movi	r16,1
    8130:	dc400115 	stw	r17,4(sp)
    8134:	2823883a 	mov	r17,r5
    8138:	800b883a 	mov	r5,r16
    813c:	dfc00215 	stw	ra,8(sp)
    8140:	0007d180 	call	7d18 <_Balloc>
    8144:	14400515 	stw	r17,20(r2)
    8148:	14000415 	stw	r16,16(r2)
    814c:	dfc00217 	ldw	ra,8(sp)
    8150:	dc400117 	ldw	r17,4(sp)
    8154:	dc000017 	ldw	r16,0(sp)
    8158:	dec00304 	addi	sp,sp,12
    815c:	f800283a 	ret

00008160 <__multiply>:
    8160:	defffa04 	addi	sp,sp,-24
    8164:	dcc00315 	stw	r19,12(sp)
    8168:	dc800215 	stw	r18,8(sp)
    816c:	34c00417 	ldw	r19,16(r6)
    8170:	2c800417 	ldw	r18,16(r5)
    8174:	dd000415 	stw	r20,16(sp)
    8178:	dc400115 	stw	r17,4(sp)
    817c:	dfc00515 	stw	ra,20(sp)
    8180:	dc000015 	stw	r16,0(sp)
    8184:	2829883a 	mov	r20,r5
    8188:	3023883a 	mov	r17,r6
    818c:	94c0050e 	bge	r18,r19,81a4 <__multiply+0x44>
    8190:	9007883a 	mov	r3,r18
    8194:	3029883a 	mov	r20,r6
    8198:	9825883a 	mov	r18,r19
    819c:	2823883a 	mov	r17,r5
    81a0:	1827883a 	mov	r19,r3
    81a4:	a0800217 	ldw	r2,8(r20)
    81a8:	94e1883a 	add	r16,r18,r19
    81ac:	a1400117 	ldw	r5,4(r20)
    81b0:	1400010e 	bge	r2,r16,81b8 <__multiply+0x58>
    81b4:	29400044 	addi	r5,r5,1
    81b8:	0007d180 	call	7d18 <_Balloc>
    81bc:	8415883a 	add	r10,r16,r16
    81c0:	12c00504 	addi	r11,r2,20
    81c4:	5295883a 	add	r10,r10,r10
    81c8:	5a95883a 	add	r10,r11,r10
    81cc:	5807883a 	mov	r3,r11
    81d0:	5a80032e 	bgeu	r11,r10,81e0 <__multiply+0x80>
    81d4:	18000015 	stw	zero,0(r3)
    81d8:	18c00104 	addi	r3,r3,4
    81dc:	1abffd36 	bltu	r3,r10,81d4 <__alt_data_end+0xff0081d4>
    81e0:	9ce7883a 	add	r19,r19,r19
    81e4:	94a5883a 	add	r18,r18,r18
    81e8:	89800504 	addi	r6,r17,20
    81ec:	9ce7883a 	add	r19,r19,r19
    81f0:	a3400504 	addi	r13,r20,20
    81f4:	94a5883a 	add	r18,r18,r18
    81f8:	34d9883a 	add	r12,r6,r19
    81fc:	6c93883a 	add	r9,r13,r18
    8200:	3300422e 	bgeu	r6,r12,830c <__multiply+0x1ac>
    8204:	37c00017 	ldw	ra,0(r6)
    8208:	fbffffcc 	andi	r15,ra,65535
    820c:	78001b26 	beq	r15,zero,827c <__multiply+0x11c>
    8210:	5811883a 	mov	r8,r11
    8214:	681d883a 	mov	r14,r13
    8218:	000f883a 	mov	r7,zero
    821c:	71000017 	ldw	r4,0(r14)
    8220:	40c00017 	ldw	r3,0(r8)
    8224:	73800104 	addi	r14,r14,4
    8228:	217fffcc 	andi	r5,r4,65535
    822c:	2bcb383a 	mul	r5,r5,r15
    8230:	2008d43a 	srli	r4,r4,16
    8234:	1c7fffcc 	andi	r17,r3,65535
    8238:	2c4b883a 	add	r5,r5,r17
    823c:	29cb883a 	add	r5,r5,r7
    8240:	23c9383a 	mul	r4,r4,r15
    8244:	1806d43a 	srli	r3,r3,16
    8248:	280ed43a 	srli	r7,r5,16
    824c:	297fffcc 	andi	r5,r5,65535
    8250:	20c7883a 	add	r3,r4,r3
    8254:	19c7883a 	add	r3,r3,r7
    8258:	1808943a 	slli	r4,r3,16
    825c:	4023883a 	mov	r17,r8
    8260:	180ed43a 	srli	r7,r3,16
    8264:	214ab03a 	or	r5,r4,r5
    8268:	41400015 	stw	r5,0(r8)
    826c:	42000104 	addi	r8,r8,4
    8270:	727fea36 	bltu	r14,r9,821c <__alt_data_end+0xff00821c>
    8274:	89c00115 	stw	r7,4(r17)
    8278:	37c00017 	ldw	ra,0(r6)
    827c:	f83ed43a 	srli	ra,ra,16
    8280:	f8001f26 	beq	ra,zero,8300 <__multiply+0x1a0>
    8284:	58c00017 	ldw	r3,0(r11)
    8288:	681d883a 	mov	r14,r13
    828c:	581f883a 	mov	r15,r11
    8290:	1811883a 	mov	r8,r3
    8294:	5825883a 	mov	r18,r11
    8298:	000f883a 	mov	r7,zero
    829c:	00000106 	br	82a4 <__multiply+0x144>
    82a0:	8825883a 	mov	r18,r17
    82a4:	7140000b 	ldhu	r5,0(r14)
    82a8:	4010d43a 	srli	r8,r8,16
    82ac:	193fffcc 	andi	r4,r3,65535
    82b0:	2fcb383a 	mul	r5,r5,ra
    82b4:	7bc00104 	addi	r15,r15,4
    82b8:	73800104 	addi	r14,r14,4
    82bc:	2a0b883a 	add	r5,r5,r8
    82c0:	29cb883a 	add	r5,r5,r7
    82c4:	2806943a 	slli	r3,r5,16
    82c8:	94400104 	addi	r17,r18,4
    82cc:	280ad43a 	srli	r5,r5,16
    82d0:	1908b03a 	or	r4,r3,r4
    82d4:	793fff15 	stw	r4,-4(r15)
    82d8:	70ffff17 	ldw	r3,-4(r14)
    82dc:	8a000017 	ldw	r8,0(r17)
    82e0:	1806d43a 	srli	r3,r3,16
    82e4:	413fffcc 	andi	r4,r8,65535
    82e8:	1fc7383a 	mul	r3,r3,ra
    82ec:	1907883a 	add	r3,r3,r4
    82f0:	1947883a 	add	r3,r3,r5
    82f4:	180ed43a 	srli	r7,r3,16
    82f8:	727fe936 	bltu	r14,r9,82a0 <__alt_data_end+0xff0082a0>
    82fc:	90c00115 	stw	r3,4(r18)
    8300:	31800104 	addi	r6,r6,4
    8304:	5ac00104 	addi	r11,r11,4
    8308:	333fbe36 	bltu	r6,r12,8204 <__alt_data_end+0xff008204>
    830c:	0400090e 	bge	zero,r16,8334 <__multiply+0x1d4>
    8310:	50ffff17 	ldw	r3,-4(r10)
    8314:	52bfff04 	addi	r10,r10,-4
    8318:	18000326 	beq	r3,zero,8328 <__multiply+0x1c8>
    831c:	00000506 	br	8334 <__multiply+0x1d4>
    8320:	50c00017 	ldw	r3,0(r10)
    8324:	1800031e 	bne	r3,zero,8334 <__multiply+0x1d4>
    8328:	843fffc4 	addi	r16,r16,-1
    832c:	52bfff04 	addi	r10,r10,-4
    8330:	803ffb1e 	bne	r16,zero,8320 <__alt_data_end+0xff008320>
    8334:	14000415 	stw	r16,16(r2)
    8338:	dfc00517 	ldw	ra,20(sp)
    833c:	dd000417 	ldw	r20,16(sp)
    8340:	dcc00317 	ldw	r19,12(sp)
    8344:	dc800217 	ldw	r18,8(sp)
    8348:	dc400117 	ldw	r17,4(sp)
    834c:	dc000017 	ldw	r16,0(sp)
    8350:	dec00604 	addi	sp,sp,24
    8354:	f800283a 	ret

00008358 <__pow5mult>:
    8358:	defffa04 	addi	sp,sp,-24
    835c:	dcc00315 	stw	r19,12(sp)
    8360:	dc000015 	stw	r16,0(sp)
    8364:	dfc00515 	stw	ra,20(sp)
    8368:	dd000415 	stw	r20,16(sp)
    836c:	dc800215 	stw	r18,8(sp)
    8370:	dc400115 	stw	r17,4(sp)
    8374:	308000cc 	andi	r2,r6,3
    8378:	3021883a 	mov	r16,r6
    837c:	2027883a 	mov	r19,r4
    8380:	10002f1e 	bne	r2,zero,8440 <__pow5mult+0xe8>
    8384:	2825883a 	mov	r18,r5
    8388:	8021d0ba 	srai	r16,r16,2
    838c:	80001a26 	beq	r16,zero,83f8 <__pow5mult+0xa0>
    8390:	9c401217 	ldw	r17,72(r19)
    8394:	8800061e 	bne	r17,zero,83b0 <__pow5mult+0x58>
    8398:	00003406 	br	846c <__pow5mult+0x114>
    839c:	8021d07a 	srai	r16,r16,1
    83a0:	80001526 	beq	r16,zero,83f8 <__pow5mult+0xa0>
    83a4:	88800017 	ldw	r2,0(r17)
    83a8:	10001c26 	beq	r2,zero,841c <__pow5mult+0xc4>
    83ac:	1023883a 	mov	r17,r2
    83b0:	8080004c 	andi	r2,r16,1
    83b4:	103ff926 	beq	r2,zero,839c <__alt_data_end+0xff00839c>
    83b8:	880d883a 	mov	r6,r17
    83bc:	900b883a 	mov	r5,r18
    83c0:	9809883a 	mov	r4,r19
    83c4:	00081600 	call	8160 <__multiply>
    83c8:	90001b26 	beq	r18,zero,8438 <__pow5mult+0xe0>
    83cc:	91000117 	ldw	r4,4(r18)
    83d0:	98c01317 	ldw	r3,76(r19)
    83d4:	8021d07a 	srai	r16,r16,1
    83d8:	2109883a 	add	r4,r4,r4
    83dc:	2109883a 	add	r4,r4,r4
    83e0:	1907883a 	add	r3,r3,r4
    83e4:	19000017 	ldw	r4,0(r3)
    83e8:	91000015 	stw	r4,0(r18)
    83ec:	1c800015 	stw	r18,0(r3)
    83f0:	1025883a 	mov	r18,r2
    83f4:	803feb1e 	bne	r16,zero,83a4 <__alt_data_end+0xff0083a4>
    83f8:	9005883a 	mov	r2,r18
    83fc:	dfc00517 	ldw	ra,20(sp)
    8400:	dd000417 	ldw	r20,16(sp)
    8404:	dcc00317 	ldw	r19,12(sp)
    8408:	dc800217 	ldw	r18,8(sp)
    840c:	dc400117 	ldw	r17,4(sp)
    8410:	dc000017 	ldw	r16,0(sp)
    8414:	dec00604 	addi	sp,sp,24
    8418:	f800283a 	ret
    841c:	880d883a 	mov	r6,r17
    8420:	880b883a 	mov	r5,r17
    8424:	9809883a 	mov	r4,r19
    8428:	00081600 	call	8160 <__multiply>
    842c:	88800015 	stw	r2,0(r17)
    8430:	10000015 	stw	zero,0(r2)
    8434:	003fdd06 	br	83ac <__alt_data_end+0xff0083ac>
    8438:	1025883a 	mov	r18,r2
    843c:	003fd706 	br	839c <__alt_data_end+0xff00839c>
    8440:	10bfffc4 	addi	r2,r2,-1
    8444:	1085883a 	add	r2,r2,r2
    8448:	00c00074 	movhi	r3,1
    844c:	18c17804 	addi	r3,r3,1504
    8450:	1085883a 	add	r2,r2,r2
    8454:	1885883a 	add	r2,r3,r2
    8458:	11800017 	ldw	r6,0(r2)
    845c:	000f883a 	mov	r7,zero
    8460:	0007de80 	call	7de8 <__multadd>
    8464:	1025883a 	mov	r18,r2
    8468:	003fc706 	br	8388 <__alt_data_end+0xff008388>
    846c:	05000044 	movi	r20,1
    8470:	a00b883a 	mov	r5,r20
    8474:	9809883a 	mov	r4,r19
    8478:	0007d180 	call	7d18 <_Balloc>
    847c:	1023883a 	mov	r17,r2
    8480:	00809c44 	movi	r2,625
    8484:	88800515 	stw	r2,20(r17)
    8488:	8d000415 	stw	r20,16(r17)
    848c:	9c401215 	stw	r17,72(r19)
    8490:	88000015 	stw	zero,0(r17)
    8494:	003fc606 	br	83b0 <__alt_data_end+0xff0083b0>

00008498 <__lshift>:
    8498:	defff904 	addi	sp,sp,-28
    849c:	dd400515 	stw	r21,20(sp)
    84a0:	dcc00315 	stw	r19,12(sp)
    84a4:	302bd17a 	srai	r21,r6,5
    84a8:	2cc00417 	ldw	r19,16(r5)
    84ac:	28800217 	ldw	r2,8(r5)
    84b0:	dd000415 	stw	r20,16(sp)
    84b4:	ace7883a 	add	r19,r21,r19
    84b8:	dc800215 	stw	r18,8(sp)
    84bc:	dc400115 	stw	r17,4(sp)
    84c0:	dc000015 	stw	r16,0(sp)
    84c4:	dfc00615 	stw	ra,24(sp)
    84c8:	9c000044 	addi	r16,r19,1
    84cc:	2823883a 	mov	r17,r5
    84d0:	3029883a 	mov	r20,r6
    84d4:	2025883a 	mov	r18,r4
    84d8:	29400117 	ldw	r5,4(r5)
    84dc:	1400030e 	bge	r2,r16,84ec <__lshift+0x54>
    84e0:	1085883a 	add	r2,r2,r2
    84e4:	29400044 	addi	r5,r5,1
    84e8:	143ffd16 	blt	r2,r16,84e0 <__alt_data_end+0xff0084e0>
    84ec:	9009883a 	mov	r4,r18
    84f0:	0007d180 	call	7d18 <_Balloc>
    84f4:	10c00504 	addi	r3,r2,20
    84f8:	0540070e 	bge	zero,r21,8518 <__lshift+0x80>
    84fc:	ad6b883a 	add	r21,r21,r21
    8500:	ad6b883a 	add	r21,r21,r21
    8504:	1809883a 	mov	r4,r3
    8508:	1d47883a 	add	r3,r3,r21
    850c:	20000015 	stw	zero,0(r4)
    8510:	21000104 	addi	r4,r4,4
    8514:	193ffd1e 	bne	r3,r4,850c <__alt_data_end+0xff00850c>
    8518:	8a000417 	ldw	r8,16(r17)
    851c:	89000504 	addi	r4,r17,20
    8520:	a18007cc 	andi	r6,r20,31
    8524:	4211883a 	add	r8,r8,r8
    8528:	4211883a 	add	r8,r8,r8
    852c:	2211883a 	add	r8,r4,r8
    8530:	30002326 	beq	r6,zero,85c0 <__lshift+0x128>
    8534:	02400804 	movi	r9,32
    8538:	4993c83a 	sub	r9,r9,r6
    853c:	000b883a 	mov	r5,zero
    8540:	21c00017 	ldw	r7,0(r4)
    8544:	1815883a 	mov	r10,r3
    8548:	18c00104 	addi	r3,r3,4
    854c:	398e983a 	sll	r7,r7,r6
    8550:	21000104 	addi	r4,r4,4
    8554:	394ab03a 	or	r5,r7,r5
    8558:	197fff15 	stw	r5,-4(r3)
    855c:	217fff17 	ldw	r5,-4(r4)
    8560:	2a4ad83a 	srl	r5,r5,r9
    8564:	223ff636 	bltu	r4,r8,8540 <__alt_data_end+0xff008540>
    8568:	51400115 	stw	r5,4(r10)
    856c:	28001a1e 	bne	r5,zero,85d8 <__lshift+0x140>
    8570:	843fffc4 	addi	r16,r16,-1
    8574:	14000415 	stw	r16,16(r2)
    8578:	88000826 	beq	r17,zero,859c <__lshift+0x104>
    857c:	89000117 	ldw	r4,4(r17)
    8580:	90c01317 	ldw	r3,76(r18)
    8584:	2109883a 	add	r4,r4,r4
    8588:	2109883a 	add	r4,r4,r4
    858c:	1907883a 	add	r3,r3,r4
    8590:	19000017 	ldw	r4,0(r3)
    8594:	89000015 	stw	r4,0(r17)
    8598:	1c400015 	stw	r17,0(r3)
    859c:	dfc00617 	ldw	ra,24(sp)
    85a0:	dd400517 	ldw	r21,20(sp)
    85a4:	dd000417 	ldw	r20,16(sp)
    85a8:	dcc00317 	ldw	r19,12(sp)
    85ac:	dc800217 	ldw	r18,8(sp)
    85b0:	dc400117 	ldw	r17,4(sp)
    85b4:	dc000017 	ldw	r16,0(sp)
    85b8:	dec00704 	addi	sp,sp,28
    85bc:	f800283a 	ret
    85c0:	21400017 	ldw	r5,0(r4)
    85c4:	18c00104 	addi	r3,r3,4
    85c8:	21000104 	addi	r4,r4,4
    85cc:	197fff15 	stw	r5,-4(r3)
    85d0:	223ffb36 	bltu	r4,r8,85c0 <__alt_data_end+0xff0085c0>
    85d4:	003fe606 	br	8570 <__alt_data_end+0xff008570>
    85d8:	9c000084 	addi	r16,r19,2
    85dc:	003fe406 	br	8570 <__alt_data_end+0xff008570>

000085e0 <__mcmp>:
    85e0:	20800417 	ldw	r2,16(r4)
    85e4:	28c00417 	ldw	r3,16(r5)
    85e8:	10c5c83a 	sub	r2,r2,r3
    85ec:	1000111e 	bne	r2,zero,8634 <__mcmp+0x54>
    85f0:	18c7883a 	add	r3,r3,r3
    85f4:	18c7883a 	add	r3,r3,r3
    85f8:	21000504 	addi	r4,r4,20
    85fc:	29400504 	addi	r5,r5,20
    8600:	20c5883a 	add	r2,r4,r3
    8604:	28cb883a 	add	r5,r5,r3
    8608:	00000106 	br	8610 <__mcmp+0x30>
    860c:	20800a2e 	bgeu	r4,r2,8638 <__mcmp+0x58>
    8610:	10bfff04 	addi	r2,r2,-4
    8614:	297fff04 	addi	r5,r5,-4
    8618:	11800017 	ldw	r6,0(r2)
    861c:	28c00017 	ldw	r3,0(r5)
    8620:	30fffa26 	beq	r6,r3,860c <__alt_data_end+0xff00860c>
    8624:	30c00236 	bltu	r6,r3,8630 <__mcmp+0x50>
    8628:	00800044 	movi	r2,1
    862c:	f800283a 	ret
    8630:	00bfffc4 	movi	r2,-1
    8634:	f800283a 	ret
    8638:	0005883a 	mov	r2,zero
    863c:	f800283a 	ret

00008640 <__mdiff>:
    8640:	28c00417 	ldw	r3,16(r5)
    8644:	30800417 	ldw	r2,16(r6)
    8648:	defffa04 	addi	sp,sp,-24
    864c:	dcc00315 	stw	r19,12(sp)
    8650:	dc800215 	stw	r18,8(sp)
    8654:	dfc00515 	stw	ra,20(sp)
    8658:	dd000415 	stw	r20,16(sp)
    865c:	dc400115 	stw	r17,4(sp)
    8660:	dc000015 	stw	r16,0(sp)
    8664:	1887c83a 	sub	r3,r3,r2
    8668:	2825883a 	mov	r18,r5
    866c:	3027883a 	mov	r19,r6
    8670:	1800141e 	bne	r3,zero,86c4 <__mdiff+0x84>
    8674:	1085883a 	add	r2,r2,r2
    8678:	1085883a 	add	r2,r2,r2
    867c:	2a000504 	addi	r8,r5,20
    8680:	34000504 	addi	r16,r6,20
    8684:	4087883a 	add	r3,r8,r2
    8688:	8085883a 	add	r2,r16,r2
    868c:	00000106 	br	8694 <__mdiff+0x54>
    8690:	40c0592e 	bgeu	r8,r3,87f8 <__mdiff+0x1b8>
    8694:	18ffff04 	addi	r3,r3,-4
    8698:	10bfff04 	addi	r2,r2,-4
    869c:	19c00017 	ldw	r7,0(r3)
    86a0:	11400017 	ldw	r5,0(r2)
    86a4:	397ffa26 	beq	r7,r5,8690 <__alt_data_end+0xff008690>
    86a8:	3940592e 	bgeu	r7,r5,8810 <__mdiff+0x1d0>
    86ac:	9005883a 	mov	r2,r18
    86b0:	4023883a 	mov	r17,r8
    86b4:	9825883a 	mov	r18,r19
    86b8:	05000044 	movi	r20,1
    86bc:	1027883a 	mov	r19,r2
    86c0:	00000406 	br	86d4 <__mdiff+0x94>
    86c4:	18005616 	blt	r3,zero,8820 <__mdiff+0x1e0>
    86c8:	34400504 	addi	r17,r6,20
    86cc:	2c000504 	addi	r16,r5,20
    86d0:	0029883a 	mov	r20,zero
    86d4:	91400117 	ldw	r5,4(r18)
    86d8:	0007d180 	call	7d18 <_Balloc>
    86dc:	92400417 	ldw	r9,16(r18)
    86e0:	9b000417 	ldw	r12,16(r19)
    86e4:	12c00504 	addi	r11,r2,20
    86e8:	4a51883a 	add	r8,r9,r9
    86ec:	6319883a 	add	r12,r12,r12
    86f0:	4211883a 	add	r8,r8,r8
    86f4:	6319883a 	add	r12,r12,r12
    86f8:	15000315 	stw	r20,12(r2)
    86fc:	8211883a 	add	r8,r16,r8
    8700:	8b19883a 	add	r12,r17,r12
    8704:	0007883a 	mov	r3,zero
    8708:	81400017 	ldw	r5,0(r16)
    870c:	89c00017 	ldw	r7,0(r17)
    8710:	59800104 	addi	r6,r11,4
    8714:	293fffcc 	andi	r4,r5,65535
    8718:	20c7883a 	add	r3,r4,r3
    871c:	393fffcc 	andi	r4,r7,65535
    8720:	1909c83a 	sub	r4,r3,r4
    8724:	280ad43a 	srli	r5,r5,16
    8728:	380ed43a 	srli	r7,r7,16
    872c:	2007d43a 	srai	r3,r4,16
    8730:	213fffcc 	andi	r4,r4,65535
    8734:	29cbc83a 	sub	r5,r5,r7
    8738:	28c7883a 	add	r3,r5,r3
    873c:	180a943a 	slli	r5,r3,16
    8740:	8c400104 	addi	r17,r17,4
    8744:	84000104 	addi	r16,r16,4
    8748:	2908b03a 	or	r4,r5,r4
    874c:	59000015 	stw	r4,0(r11)
    8750:	1807d43a 	srai	r3,r3,16
    8754:	3015883a 	mov	r10,r6
    8758:	3017883a 	mov	r11,r6
    875c:	8b3fea36 	bltu	r17,r12,8708 <__alt_data_end+0xff008708>
    8760:	8200162e 	bgeu	r16,r8,87bc <__mdiff+0x17c>
    8764:	8017883a 	mov	r11,r16
    8768:	59400017 	ldw	r5,0(r11)
    876c:	31800104 	addi	r6,r6,4
    8770:	5ac00104 	addi	r11,r11,4
    8774:	293fffcc 	andi	r4,r5,65535
    8778:	20c7883a 	add	r3,r4,r3
    877c:	280ed43a 	srli	r7,r5,16
    8780:	180bd43a 	srai	r5,r3,16
    8784:	193fffcc 	andi	r4,r3,65535
    8788:	3947883a 	add	r3,r7,r5
    878c:	180a943a 	slli	r5,r3,16
    8790:	1807d43a 	srai	r3,r3,16
    8794:	2908b03a 	or	r4,r5,r4
    8798:	313fff15 	stw	r4,-4(r6)
    879c:	5a3ff236 	bltu	r11,r8,8768 <__alt_data_end+0xff008768>
    87a0:	0406303a 	nor	r3,zero,r16
    87a4:	1a07883a 	add	r3,r3,r8
    87a8:	1806d0ba 	srli	r3,r3,2
    87ac:	18c00044 	addi	r3,r3,1
    87b0:	18c7883a 	add	r3,r3,r3
    87b4:	18c7883a 	add	r3,r3,r3
    87b8:	50d5883a 	add	r10,r10,r3
    87bc:	50ffff04 	addi	r3,r10,-4
    87c0:	2000041e 	bne	r4,zero,87d4 <__mdiff+0x194>
    87c4:	18ffff04 	addi	r3,r3,-4
    87c8:	19000017 	ldw	r4,0(r3)
    87cc:	4a7fffc4 	addi	r9,r9,-1
    87d0:	203ffc26 	beq	r4,zero,87c4 <__alt_data_end+0xff0087c4>
    87d4:	12400415 	stw	r9,16(r2)
    87d8:	dfc00517 	ldw	ra,20(sp)
    87dc:	dd000417 	ldw	r20,16(sp)
    87e0:	dcc00317 	ldw	r19,12(sp)
    87e4:	dc800217 	ldw	r18,8(sp)
    87e8:	dc400117 	ldw	r17,4(sp)
    87ec:	dc000017 	ldw	r16,0(sp)
    87f0:	dec00604 	addi	sp,sp,24
    87f4:	f800283a 	ret
    87f8:	000b883a 	mov	r5,zero
    87fc:	0007d180 	call	7d18 <_Balloc>
    8800:	00c00044 	movi	r3,1
    8804:	10c00415 	stw	r3,16(r2)
    8808:	10000515 	stw	zero,20(r2)
    880c:	003ff206 	br	87d8 <__alt_data_end+0xff0087d8>
    8810:	8023883a 	mov	r17,r16
    8814:	0029883a 	mov	r20,zero
    8818:	4021883a 	mov	r16,r8
    881c:	003fad06 	br	86d4 <__alt_data_end+0xff0086d4>
    8820:	9005883a 	mov	r2,r18
    8824:	94400504 	addi	r17,r18,20
    8828:	9c000504 	addi	r16,r19,20
    882c:	9825883a 	mov	r18,r19
    8830:	05000044 	movi	r20,1
    8834:	1027883a 	mov	r19,r2
    8838:	003fa606 	br	86d4 <__alt_data_end+0xff0086d4>

0000883c <__ulp>:
    883c:	295ffc2c 	andhi	r5,r5,32752
    8840:	00bf3034 	movhi	r2,64704
    8844:	2887883a 	add	r3,r5,r2
    8848:	00c0020e 	bge	zero,r3,8854 <__ulp+0x18>
    884c:	0005883a 	mov	r2,zero
    8850:	f800283a 	ret
    8854:	00c7c83a 	sub	r3,zero,r3
    8858:	1807d53a 	srai	r3,r3,20
    885c:	008004c4 	movi	r2,19
    8860:	10c00b0e 	bge	r2,r3,8890 <__ulp+0x54>
    8864:	18bffb04 	addi	r2,r3,-20
    8868:	01000784 	movi	r4,30
    886c:	0007883a 	mov	r3,zero
    8870:	20800516 	blt	r4,r2,8888 <__ulp+0x4c>
    8874:	010007c4 	movi	r4,31
    8878:	2089c83a 	sub	r4,r4,r2
    887c:	00800044 	movi	r2,1
    8880:	1104983a 	sll	r2,r2,r4
    8884:	f800283a 	ret
    8888:	00800044 	movi	r2,1
    888c:	f800283a 	ret
    8890:	01400234 	movhi	r5,8
    8894:	28c7d83a 	sra	r3,r5,r3
    8898:	0005883a 	mov	r2,zero
    889c:	f800283a 	ret

000088a0 <__b2d>:
    88a0:	defffa04 	addi	sp,sp,-24
    88a4:	dc000015 	stw	r16,0(sp)
    88a8:	24000417 	ldw	r16,16(r4)
    88ac:	dc400115 	stw	r17,4(sp)
    88b0:	24400504 	addi	r17,r4,20
    88b4:	8421883a 	add	r16,r16,r16
    88b8:	8421883a 	add	r16,r16,r16
    88bc:	8c21883a 	add	r16,r17,r16
    88c0:	dc800215 	stw	r18,8(sp)
    88c4:	84bfff17 	ldw	r18,-4(r16)
    88c8:	dd000415 	stw	r20,16(sp)
    88cc:	dcc00315 	stw	r19,12(sp)
    88d0:	9009883a 	mov	r4,r18
    88d4:	2829883a 	mov	r20,r5
    88d8:	dfc00515 	stw	ra,20(sp)
    88dc:	000800c0 	call	800c <__hi0bits>
    88e0:	00c00804 	movi	r3,32
    88e4:	1889c83a 	sub	r4,r3,r2
    88e8:	a1000015 	stw	r4,0(r20)
    88ec:	01000284 	movi	r4,10
    88f0:	84ffff04 	addi	r19,r16,-4
    88f4:	20801216 	blt	r4,r2,8940 <__b2d+0xa0>
    88f8:	018002c4 	movi	r6,11
    88fc:	308dc83a 	sub	r6,r6,r2
    8900:	9186d83a 	srl	r3,r18,r6
    8904:	18cffc34 	orhi	r3,r3,16368
    8908:	8cc0212e 	bgeu	r17,r19,8990 <__b2d+0xf0>
    890c:	813ffe17 	ldw	r4,-8(r16)
    8910:	218cd83a 	srl	r6,r4,r6
    8914:	10800544 	addi	r2,r2,21
    8918:	9084983a 	sll	r2,r18,r2
    891c:	1184b03a 	or	r2,r2,r6
    8920:	dfc00517 	ldw	ra,20(sp)
    8924:	dd000417 	ldw	r20,16(sp)
    8928:	dcc00317 	ldw	r19,12(sp)
    892c:	dc800217 	ldw	r18,8(sp)
    8930:	dc400117 	ldw	r17,4(sp)
    8934:	dc000017 	ldw	r16,0(sp)
    8938:	dec00604 	addi	sp,sp,24
    893c:	f800283a 	ret
    8940:	8cc00f2e 	bgeu	r17,r19,8980 <__b2d+0xe0>
    8944:	117ffd44 	addi	r5,r2,-11
    8948:	80bffe17 	ldw	r2,-8(r16)
    894c:	28000e26 	beq	r5,zero,8988 <__b2d+0xe8>
    8950:	1949c83a 	sub	r4,r3,r5
    8954:	9164983a 	sll	r18,r18,r5
    8958:	1106d83a 	srl	r3,r2,r4
    895c:	81bffe04 	addi	r6,r16,-8
    8960:	948ffc34 	orhi	r18,r18,16368
    8964:	90c6b03a 	or	r3,r18,r3
    8968:	89800e2e 	bgeu	r17,r6,89a4 <__b2d+0x104>
    896c:	81bffd17 	ldw	r6,-12(r16)
    8970:	1144983a 	sll	r2,r2,r5
    8974:	310ad83a 	srl	r5,r6,r4
    8978:	2884b03a 	or	r2,r5,r2
    897c:	003fe806 	br	8920 <__alt_data_end+0xff008920>
    8980:	10bffd44 	addi	r2,r2,-11
    8984:	1000041e 	bne	r2,zero,8998 <__b2d+0xf8>
    8988:	90cffc34 	orhi	r3,r18,16368
    898c:	003fe406 	br	8920 <__alt_data_end+0xff008920>
    8990:	000d883a 	mov	r6,zero
    8994:	003fdf06 	br	8914 <__alt_data_end+0xff008914>
    8998:	90a4983a 	sll	r18,r18,r2
    899c:	0005883a 	mov	r2,zero
    89a0:	003ff906 	br	8988 <__alt_data_end+0xff008988>
    89a4:	1144983a 	sll	r2,r2,r5
    89a8:	003fdd06 	br	8920 <__alt_data_end+0xff008920>

000089ac <__d2b>:
    89ac:	defff804 	addi	sp,sp,-32
    89b0:	dc000215 	stw	r16,8(sp)
    89b4:	3021883a 	mov	r16,r6
    89b8:	dc400315 	stw	r17,12(sp)
    89bc:	8022907a 	slli	r17,r16,1
    89c0:	dd000615 	stw	r20,24(sp)
    89c4:	2829883a 	mov	r20,r5
    89c8:	01400044 	movi	r5,1
    89cc:	dcc00515 	stw	r19,20(sp)
    89d0:	dc800415 	stw	r18,16(sp)
    89d4:	dfc00715 	stw	ra,28(sp)
    89d8:	3825883a 	mov	r18,r7
    89dc:	8822d57a 	srli	r17,r17,21
    89e0:	0007d180 	call	7d18 <_Balloc>
    89e4:	1027883a 	mov	r19,r2
    89e8:	00800434 	movhi	r2,16
    89ec:	10bfffc4 	addi	r2,r2,-1
    89f0:	808c703a 	and	r6,r16,r2
    89f4:	88000126 	beq	r17,zero,89fc <__d2b+0x50>
    89f8:	31800434 	orhi	r6,r6,16
    89fc:	d9800015 	stw	r6,0(sp)
    8a00:	a0002426 	beq	r20,zero,8a94 <__d2b+0xe8>
    8a04:	d9000104 	addi	r4,sp,4
    8a08:	dd000115 	stw	r20,4(sp)
    8a0c:	00080740 	call	8074 <__lo0bits>
    8a10:	d8c00017 	ldw	r3,0(sp)
    8a14:	10002f1e 	bne	r2,zero,8ad4 <__d2b+0x128>
    8a18:	d9000117 	ldw	r4,4(sp)
    8a1c:	99000515 	stw	r4,20(r19)
    8a20:	1821003a 	cmpeq	r16,r3,zero
    8a24:	01000084 	movi	r4,2
    8a28:	2421c83a 	sub	r16,r4,r16
    8a2c:	98c00615 	stw	r3,24(r19)
    8a30:	9c000415 	stw	r16,16(r19)
    8a34:	88001f1e 	bne	r17,zero,8ab4 <__d2b+0x108>
    8a38:	10bef384 	addi	r2,r2,-1074
    8a3c:	90800015 	stw	r2,0(r18)
    8a40:	00900034 	movhi	r2,16384
    8a44:	10bfffc4 	addi	r2,r2,-1
    8a48:	8085883a 	add	r2,r16,r2
    8a4c:	1085883a 	add	r2,r2,r2
    8a50:	1085883a 	add	r2,r2,r2
    8a54:	9885883a 	add	r2,r19,r2
    8a58:	11000517 	ldw	r4,20(r2)
    8a5c:	8020917a 	slli	r16,r16,5
    8a60:	000800c0 	call	800c <__hi0bits>
    8a64:	d8c00817 	ldw	r3,32(sp)
    8a68:	8085c83a 	sub	r2,r16,r2
    8a6c:	18800015 	stw	r2,0(r3)
    8a70:	9805883a 	mov	r2,r19
    8a74:	dfc00717 	ldw	ra,28(sp)
    8a78:	dd000617 	ldw	r20,24(sp)
    8a7c:	dcc00517 	ldw	r19,20(sp)
    8a80:	dc800417 	ldw	r18,16(sp)
    8a84:	dc400317 	ldw	r17,12(sp)
    8a88:	dc000217 	ldw	r16,8(sp)
    8a8c:	dec00804 	addi	sp,sp,32
    8a90:	f800283a 	ret
    8a94:	d809883a 	mov	r4,sp
    8a98:	00080740 	call	8074 <__lo0bits>
    8a9c:	d8c00017 	ldw	r3,0(sp)
    8aa0:	04000044 	movi	r16,1
    8aa4:	9c000415 	stw	r16,16(r19)
    8aa8:	98c00515 	stw	r3,20(r19)
    8aac:	10800804 	addi	r2,r2,32
    8ab0:	883fe126 	beq	r17,zero,8a38 <__alt_data_end+0xff008a38>
    8ab4:	00c00d44 	movi	r3,53
    8ab8:	8c7ef344 	addi	r17,r17,-1075
    8abc:	88a3883a 	add	r17,r17,r2
    8ac0:	1885c83a 	sub	r2,r3,r2
    8ac4:	d8c00817 	ldw	r3,32(sp)
    8ac8:	94400015 	stw	r17,0(r18)
    8acc:	18800015 	stw	r2,0(r3)
    8ad0:	003fe706 	br	8a70 <__alt_data_end+0xff008a70>
    8ad4:	01000804 	movi	r4,32
    8ad8:	2089c83a 	sub	r4,r4,r2
    8adc:	1908983a 	sll	r4,r3,r4
    8ae0:	d9400117 	ldw	r5,4(sp)
    8ae4:	1886d83a 	srl	r3,r3,r2
    8ae8:	2148b03a 	or	r4,r4,r5
    8aec:	99000515 	stw	r4,20(r19)
    8af0:	d8c00015 	stw	r3,0(sp)
    8af4:	003fca06 	br	8a20 <__alt_data_end+0xff008a20>

00008af8 <__ratio>:
    8af8:	defff904 	addi	sp,sp,-28
    8afc:	dc400315 	stw	r17,12(sp)
    8b00:	2823883a 	mov	r17,r5
    8b04:	d9400104 	addi	r5,sp,4
    8b08:	dfc00615 	stw	ra,24(sp)
    8b0c:	dcc00515 	stw	r19,20(sp)
    8b10:	dc800415 	stw	r18,16(sp)
    8b14:	2027883a 	mov	r19,r4
    8b18:	dc000215 	stw	r16,8(sp)
    8b1c:	00088a00 	call	88a0 <__b2d>
    8b20:	d80b883a 	mov	r5,sp
    8b24:	8809883a 	mov	r4,r17
    8b28:	1025883a 	mov	r18,r2
    8b2c:	1821883a 	mov	r16,r3
    8b30:	00088a00 	call	88a0 <__b2d>
    8b34:	8a000417 	ldw	r8,16(r17)
    8b38:	99000417 	ldw	r4,16(r19)
    8b3c:	d9400117 	ldw	r5,4(sp)
    8b40:	2209c83a 	sub	r4,r4,r8
    8b44:	2010917a 	slli	r8,r4,5
    8b48:	d9000017 	ldw	r4,0(sp)
    8b4c:	2909c83a 	sub	r4,r5,r4
    8b50:	4109883a 	add	r4,r8,r4
    8b54:	01000e0e 	bge	zero,r4,8b90 <__ratio+0x98>
    8b58:	2008953a 	slli	r4,r4,20
    8b5c:	2421883a 	add	r16,r4,r16
    8b60:	100d883a 	mov	r6,r2
    8b64:	180f883a 	mov	r7,r3
    8b68:	9009883a 	mov	r4,r18
    8b6c:	800b883a 	mov	r5,r16
    8b70:	000c9900 	call	c990 <__divdf3>
    8b74:	dfc00617 	ldw	ra,24(sp)
    8b78:	dcc00517 	ldw	r19,20(sp)
    8b7c:	dc800417 	ldw	r18,16(sp)
    8b80:	dc400317 	ldw	r17,12(sp)
    8b84:	dc000217 	ldw	r16,8(sp)
    8b88:	dec00704 	addi	sp,sp,28
    8b8c:	f800283a 	ret
    8b90:	2008953a 	slli	r4,r4,20
    8b94:	1907c83a 	sub	r3,r3,r4
    8b98:	003ff106 	br	8b60 <__alt_data_end+0xff008b60>

00008b9c <_mprec_log10>:
    8b9c:	defffe04 	addi	sp,sp,-8
    8ba0:	dc000015 	stw	r16,0(sp)
    8ba4:	dfc00115 	stw	ra,4(sp)
    8ba8:	008005c4 	movi	r2,23
    8bac:	2021883a 	mov	r16,r4
    8bb0:	11000d0e 	bge	r2,r4,8be8 <_mprec_log10+0x4c>
    8bb4:	0005883a 	mov	r2,zero
    8bb8:	00cffc34 	movhi	r3,16368
    8bbc:	843fffc4 	addi	r16,r16,-1
    8bc0:	000d883a 	mov	r6,zero
    8bc4:	01d00934 	movhi	r7,16420
    8bc8:	1009883a 	mov	r4,r2
    8bcc:	180b883a 	mov	r5,r3
    8bd0:	000d4d00 	call	d4d0 <__muldf3>
    8bd4:	803ff91e 	bne	r16,zero,8bbc <__alt_data_end+0xff008bbc>
    8bd8:	dfc00117 	ldw	ra,4(sp)
    8bdc:	dc000017 	ldw	r16,0(sp)
    8be0:	dec00204 	addi	sp,sp,8
    8be4:	f800283a 	ret
    8be8:	202090fa 	slli	r16,r4,3
    8bec:	00800074 	movhi	r2,1
    8bf0:	10818f04 	addi	r2,r2,1596
    8bf4:	1421883a 	add	r16,r2,r16
    8bf8:	80800017 	ldw	r2,0(r16)
    8bfc:	80c00117 	ldw	r3,4(r16)
    8c00:	dfc00117 	ldw	ra,4(sp)
    8c04:	dc000017 	ldw	r16,0(sp)
    8c08:	dec00204 	addi	sp,sp,8
    8c0c:	f800283a 	ret

00008c10 <__copybits>:
    8c10:	297fffc4 	addi	r5,r5,-1
    8c14:	280fd17a 	srai	r7,r5,5
    8c18:	30c00417 	ldw	r3,16(r6)
    8c1c:	30800504 	addi	r2,r6,20
    8c20:	39c00044 	addi	r7,r7,1
    8c24:	18c7883a 	add	r3,r3,r3
    8c28:	39cf883a 	add	r7,r7,r7
    8c2c:	18c7883a 	add	r3,r3,r3
    8c30:	39cf883a 	add	r7,r7,r7
    8c34:	10c7883a 	add	r3,r2,r3
    8c38:	21cf883a 	add	r7,r4,r7
    8c3c:	10c00d2e 	bgeu	r2,r3,8c74 <__copybits+0x64>
    8c40:	200b883a 	mov	r5,r4
    8c44:	12000017 	ldw	r8,0(r2)
    8c48:	29400104 	addi	r5,r5,4
    8c4c:	10800104 	addi	r2,r2,4
    8c50:	2a3fff15 	stw	r8,-4(r5)
    8c54:	10fffb36 	bltu	r2,r3,8c44 <__alt_data_end+0xff008c44>
    8c58:	1985c83a 	sub	r2,r3,r6
    8c5c:	10bffac4 	addi	r2,r2,-21
    8c60:	1004d0ba 	srli	r2,r2,2
    8c64:	10800044 	addi	r2,r2,1
    8c68:	1085883a 	add	r2,r2,r2
    8c6c:	1085883a 	add	r2,r2,r2
    8c70:	2089883a 	add	r4,r4,r2
    8c74:	21c0032e 	bgeu	r4,r7,8c84 <__copybits+0x74>
    8c78:	20000015 	stw	zero,0(r4)
    8c7c:	21000104 	addi	r4,r4,4
    8c80:	21fffd36 	bltu	r4,r7,8c78 <__alt_data_end+0xff008c78>
    8c84:	f800283a 	ret

00008c88 <__any_on>:
    8c88:	20c00417 	ldw	r3,16(r4)
    8c8c:	2805d17a 	srai	r2,r5,5
    8c90:	21000504 	addi	r4,r4,20
    8c94:	18800d0e 	bge	r3,r2,8ccc <__any_on+0x44>
    8c98:	18c7883a 	add	r3,r3,r3
    8c9c:	18c7883a 	add	r3,r3,r3
    8ca0:	20c7883a 	add	r3,r4,r3
    8ca4:	20c0192e 	bgeu	r4,r3,8d0c <__any_on+0x84>
    8ca8:	18bfff17 	ldw	r2,-4(r3)
    8cac:	18ffff04 	addi	r3,r3,-4
    8cb0:	1000041e 	bne	r2,zero,8cc4 <__any_on+0x3c>
    8cb4:	20c0142e 	bgeu	r4,r3,8d08 <__any_on+0x80>
    8cb8:	18ffff04 	addi	r3,r3,-4
    8cbc:	19400017 	ldw	r5,0(r3)
    8cc0:	283ffc26 	beq	r5,zero,8cb4 <__alt_data_end+0xff008cb4>
    8cc4:	00800044 	movi	r2,1
    8cc8:	f800283a 	ret
    8ccc:	10c00a0e 	bge	r2,r3,8cf8 <__any_on+0x70>
    8cd0:	1085883a 	add	r2,r2,r2
    8cd4:	1085883a 	add	r2,r2,r2
    8cd8:	294007cc 	andi	r5,r5,31
    8cdc:	2087883a 	add	r3,r4,r2
    8ce0:	283ff026 	beq	r5,zero,8ca4 <__alt_data_end+0xff008ca4>
    8ce4:	19800017 	ldw	r6,0(r3)
    8ce8:	3144d83a 	srl	r2,r6,r5
    8cec:	114a983a 	sll	r5,r2,r5
    8cf0:	317ff41e 	bne	r6,r5,8cc4 <__alt_data_end+0xff008cc4>
    8cf4:	003feb06 	br	8ca4 <__alt_data_end+0xff008ca4>
    8cf8:	1085883a 	add	r2,r2,r2
    8cfc:	1085883a 	add	r2,r2,r2
    8d00:	2087883a 	add	r3,r4,r2
    8d04:	003fe706 	br	8ca4 <__alt_data_end+0xff008ca4>
    8d08:	f800283a 	ret
    8d0c:	0005883a 	mov	r2,zero
    8d10:	f800283a 	ret

00008d14 <_realloc_r>:
    8d14:	defff604 	addi	sp,sp,-40
    8d18:	dc800215 	stw	r18,8(sp)
    8d1c:	dfc00915 	stw	ra,36(sp)
    8d20:	df000815 	stw	fp,32(sp)
    8d24:	ddc00715 	stw	r23,28(sp)
    8d28:	dd800615 	stw	r22,24(sp)
    8d2c:	dd400515 	stw	r21,20(sp)
    8d30:	dd000415 	stw	r20,16(sp)
    8d34:	dcc00315 	stw	r19,12(sp)
    8d38:	dc400115 	stw	r17,4(sp)
    8d3c:	dc000015 	stw	r16,0(sp)
    8d40:	3025883a 	mov	r18,r6
    8d44:	2800b726 	beq	r5,zero,9024 <_realloc_r+0x310>
    8d48:	282b883a 	mov	r21,r5
    8d4c:	2029883a 	mov	r20,r4
    8d50:	000eab40 	call	eab4 <__malloc_lock>
    8d54:	a8bfff17 	ldw	r2,-4(r21)
    8d58:	043fff04 	movi	r16,-4
    8d5c:	90c002c4 	addi	r3,r18,11
    8d60:	01000584 	movi	r4,22
    8d64:	acfffe04 	addi	r19,r21,-8
    8d68:	1420703a 	and	r16,r2,r16
    8d6c:	20c0332e 	bgeu	r4,r3,8e3c <_realloc_r+0x128>
    8d70:	047ffe04 	movi	r17,-8
    8d74:	1c62703a 	and	r17,r3,r17
    8d78:	8807883a 	mov	r3,r17
    8d7c:	88005816 	blt	r17,zero,8ee0 <_realloc_r+0x1cc>
    8d80:	8c805736 	bltu	r17,r18,8ee0 <_realloc_r+0x1cc>
    8d84:	80c0300e 	bge	r16,r3,8e48 <_realloc_r+0x134>
    8d88:	07000074 	movhi	fp,1
    8d8c:	e7021004 	addi	fp,fp,2112
    8d90:	e1c00217 	ldw	r7,8(fp)
    8d94:	9c09883a 	add	r4,r19,r16
    8d98:	22000117 	ldw	r8,4(r4)
    8d9c:	21c06326 	beq	r4,r7,8f2c <_realloc_r+0x218>
    8da0:	017fff84 	movi	r5,-2
    8da4:	414a703a 	and	r5,r8,r5
    8da8:	214b883a 	add	r5,r4,r5
    8dac:	29800117 	ldw	r6,4(r5)
    8db0:	3180004c 	andi	r6,r6,1
    8db4:	30003f26 	beq	r6,zero,8eb4 <_realloc_r+0x1a0>
    8db8:	1080004c 	andi	r2,r2,1
    8dbc:	10008326 	beq	r2,zero,8fcc <_realloc_r+0x2b8>
    8dc0:	900b883a 	mov	r5,r18
    8dc4:	a009883a 	mov	r4,r20
    8dc8:	0001e2c0 	call	1e2c <_malloc_r>
    8dcc:	1025883a 	mov	r18,r2
    8dd0:	10011e26 	beq	r2,zero,924c <_realloc_r+0x538>
    8dd4:	a93fff17 	ldw	r4,-4(r21)
    8dd8:	10fffe04 	addi	r3,r2,-8
    8ddc:	00bfff84 	movi	r2,-2
    8de0:	2084703a 	and	r2,r4,r2
    8de4:	9885883a 	add	r2,r19,r2
    8de8:	1880ee26 	beq	r3,r2,91a4 <_realloc_r+0x490>
    8dec:	81bfff04 	addi	r6,r16,-4
    8df0:	00800904 	movi	r2,36
    8df4:	1180b836 	bltu	r2,r6,90d8 <_realloc_r+0x3c4>
    8df8:	00c004c4 	movi	r3,19
    8dfc:	19809636 	bltu	r3,r6,9058 <_realloc_r+0x344>
    8e00:	9005883a 	mov	r2,r18
    8e04:	a807883a 	mov	r3,r21
    8e08:	19000017 	ldw	r4,0(r3)
    8e0c:	11000015 	stw	r4,0(r2)
    8e10:	19000117 	ldw	r4,4(r3)
    8e14:	11000115 	stw	r4,4(r2)
    8e18:	18c00217 	ldw	r3,8(r3)
    8e1c:	10c00215 	stw	r3,8(r2)
    8e20:	a80b883a 	mov	r5,r21
    8e24:	a009883a 	mov	r4,r20
    8e28:	0006c7c0 	call	6c7c <_free_r>
    8e2c:	a009883a 	mov	r4,r20
    8e30:	000eab80 	call	eab8 <__malloc_unlock>
    8e34:	9005883a 	mov	r2,r18
    8e38:	00001206 	br	8e84 <_realloc_r+0x170>
    8e3c:	00c00404 	movi	r3,16
    8e40:	1823883a 	mov	r17,r3
    8e44:	003fce06 	br	8d80 <__alt_data_end+0xff008d80>
    8e48:	a825883a 	mov	r18,r21
    8e4c:	8445c83a 	sub	r2,r16,r17
    8e50:	00c003c4 	movi	r3,15
    8e54:	18802636 	bltu	r3,r2,8ef0 <_realloc_r+0x1dc>
    8e58:	99800117 	ldw	r6,4(r19)
    8e5c:	9c07883a 	add	r3,r19,r16
    8e60:	3180004c 	andi	r6,r6,1
    8e64:	3420b03a 	or	r16,r6,r16
    8e68:	9c000115 	stw	r16,4(r19)
    8e6c:	18800117 	ldw	r2,4(r3)
    8e70:	10800054 	ori	r2,r2,1
    8e74:	18800115 	stw	r2,4(r3)
    8e78:	a009883a 	mov	r4,r20
    8e7c:	000eab80 	call	eab8 <__malloc_unlock>
    8e80:	9005883a 	mov	r2,r18
    8e84:	dfc00917 	ldw	ra,36(sp)
    8e88:	df000817 	ldw	fp,32(sp)
    8e8c:	ddc00717 	ldw	r23,28(sp)
    8e90:	dd800617 	ldw	r22,24(sp)
    8e94:	dd400517 	ldw	r21,20(sp)
    8e98:	dd000417 	ldw	r20,16(sp)
    8e9c:	dcc00317 	ldw	r19,12(sp)
    8ea0:	dc800217 	ldw	r18,8(sp)
    8ea4:	dc400117 	ldw	r17,4(sp)
    8ea8:	dc000017 	ldw	r16,0(sp)
    8eac:	dec00a04 	addi	sp,sp,40
    8eb0:	f800283a 	ret
    8eb4:	017fff04 	movi	r5,-4
    8eb8:	414a703a 	and	r5,r8,r5
    8ebc:	814d883a 	add	r6,r16,r5
    8ec0:	30c01f16 	blt	r6,r3,8f40 <_realloc_r+0x22c>
    8ec4:	20800317 	ldw	r2,12(r4)
    8ec8:	20c00217 	ldw	r3,8(r4)
    8ecc:	a825883a 	mov	r18,r21
    8ed0:	3021883a 	mov	r16,r6
    8ed4:	18800315 	stw	r2,12(r3)
    8ed8:	10c00215 	stw	r3,8(r2)
    8edc:	003fdb06 	br	8e4c <__alt_data_end+0xff008e4c>
    8ee0:	00800304 	movi	r2,12
    8ee4:	a0800015 	stw	r2,0(r20)
    8ee8:	0005883a 	mov	r2,zero
    8eec:	003fe506 	br	8e84 <__alt_data_end+0xff008e84>
    8ef0:	98c00117 	ldw	r3,4(r19)
    8ef4:	9c4b883a 	add	r5,r19,r17
    8ef8:	11000054 	ori	r4,r2,1
    8efc:	18c0004c 	andi	r3,r3,1
    8f00:	1c62b03a 	or	r17,r3,r17
    8f04:	9c400115 	stw	r17,4(r19)
    8f08:	29000115 	stw	r4,4(r5)
    8f0c:	2885883a 	add	r2,r5,r2
    8f10:	10c00117 	ldw	r3,4(r2)
    8f14:	29400204 	addi	r5,r5,8
    8f18:	a009883a 	mov	r4,r20
    8f1c:	18c00054 	ori	r3,r3,1
    8f20:	10c00115 	stw	r3,4(r2)
    8f24:	0006c7c0 	call	6c7c <_free_r>
    8f28:	003fd306 	br	8e78 <__alt_data_end+0xff008e78>
    8f2c:	017fff04 	movi	r5,-4
    8f30:	414a703a 	and	r5,r8,r5
    8f34:	89800404 	addi	r6,r17,16
    8f38:	8151883a 	add	r8,r16,r5
    8f3c:	4180590e 	bge	r8,r6,90a4 <_realloc_r+0x390>
    8f40:	1080004c 	andi	r2,r2,1
    8f44:	103f9e1e 	bne	r2,zero,8dc0 <__alt_data_end+0xff008dc0>
    8f48:	adbffe17 	ldw	r22,-8(r21)
    8f4c:	00bfff04 	movi	r2,-4
    8f50:	9dadc83a 	sub	r22,r19,r22
    8f54:	b1800117 	ldw	r6,4(r22)
    8f58:	3084703a 	and	r2,r6,r2
    8f5c:	20002026 	beq	r4,zero,8fe0 <_realloc_r+0x2cc>
    8f60:	80af883a 	add	r23,r16,r2
    8f64:	b96f883a 	add	r23,r23,r5
    8f68:	21c05f26 	beq	r4,r7,90e8 <_realloc_r+0x3d4>
    8f6c:	b8c01c16 	blt	r23,r3,8fe0 <_realloc_r+0x2cc>
    8f70:	20800317 	ldw	r2,12(r4)
    8f74:	20c00217 	ldw	r3,8(r4)
    8f78:	81bfff04 	addi	r6,r16,-4
    8f7c:	01000904 	movi	r4,36
    8f80:	18800315 	stw	r2,12(r3)
    8f84:	10c00215 	stw	r3,8(r2)
    8f88:	b0c00217 	ldw	r3,8(r22)
    8f8c:	b0800317 	ldw	r2,12(r22)
    8f90:	b4800204 	addi	r18,r22,8
    8f94:	18800315 	stw	r2,12(r3)
    8f98:	10c00215 	stw	r3,8(r2)
    8f9c:	21801b36 	bltu	r4,r6,900c <_realloc_r+0x2f8>
    8fa0:	008004c4 	movi	r2,19
    8fa4:	1180352e 	bgeu	r2,r6,907c <_realloc_r+0x368>
    8fa8:	a8800017 	ldw	r2,0(r21)
    8fac:	b0800215 	stw	r2,8(r22)
    8fb0:	a8800117 	ldw	r2,4(r21)
    8fb4:	b0800315 	stw	r2,12(r22)
    8fb8:	008006c4 	movi	r2,27
    8fbc:	11807f36 	bltu	r2,r6,91bc <_realloc_r+0x4a8>
    8fc0:	b0800404 	addi	r2,r22,16
    8fc4:	ad400204 	addi	r21,r21,8
    8fc8:	00002d06 	br	9080 <_realloc_r+0x36c>
    8fcc:	adbffe17 	ldw	r22,-8(r21)
    8fd0:	00bfff04 	movi	r2,-4
    8fd4:	9dadc83a 	sub	r22,r19,r22
    8fd8:	b1000117 	ldw	r4,4(r22)
    8fdc:	2084703a 	and	r2,r4,r2
    8fe0:	b03f7726 	beq	r22,zero,8dc0 <__alt_data_end+0xff008dc0>
    8fe4:	80af883a 	add	r23,r16,r2
    8fe8:	b8ff7516 	blt	r23,r3,8dc0 <__alt_data_end+0xff008dc0>
    8fec:	b0800317 	ldw	r2,12(r22)
    8ff0:	b0c00217 	ldw	r3,8(r22)
    8ff4:	81bfff04 	addi	r6,r16,-4
    8ff8:	01000904 	movi	r4,36
    8ffc:	18800315 	stw	r2,12(r3)
    9000:	10c00215 	stw	r3,8(r2)
    9004:	b4800204 	addi	r18,r22,8
    9008:	21bfe52e 	bgeu	r4,r6,8fa0 <__alt_data_end+0xff008fa0>
    900c:	a80b883a 	mov	r5,r21
    9010:	9009883a 	mov	r4,r18
    9014:	0007a940 	call	7a94 <memmove>
    9018:	b821883a 	mov	r16,r23
    901c:	b027883a 	mov	r19,r22
    9020:	003f8a06 	br	8e4c <__alt_data_end+0xff008e4c>
    9024:	300b883a 	mov	r5,r6
    9028:	dfc00917 	ldw	ra,36(sp)
    902c:	df000817 	ldw	fp,32(sp)
    9030:	ddc00717 	ldw	r23,28(sp)
    9034:	dd800617 	ldw	r22,24(sp)
    9038:	dd400517 	ldw	r21,20(sp)
    903c:	dd000417 	ldw	r20,16(sp)
    9040:	dcc00317 	ldw	r19,12(sp)
    9044:	dc800217 	ldw	r18,8(sp)
    9048:	dc400117 	ldw	r17,4(sp)
    904c:	dc000017 	ldw	r16,0(sp)
    9050:	dec00a04 	addi	sp,sp,40
    9054:	0001e2c1 	jmpi	1e2c <_malloc_r>
    9058:	a8c00017 	ldw	r3,0(r21)
    905c:	90c00015 	stw	r3,0(r18)
    9060:	a8c00117 	ldw	r3,4(r21)
    9064:	90c00115 	stw	r3,4(r18)
    9068:	00c006c4 	movi	r3,27
    906c:	19804536 	bltu	r3,r6,9184 <_realloc_r+0x470>
    9070:	90800204 	addi	r2,r18,8
    9074:	a8c00204 	addi	r3,r21,8
    9078:	003f6306 	br	8e08 <__alt_data_end+0xff008e08>
    907c:	9005883a 	mov	r2,r18
    9080:	a8c00017 	ldw	r3,0(r21)
    9084:	b821883a 	mov	r16,r23
    9088:	b027883a 	mov	r19,r22
    908c:	10c00015 	stw	r3,0(r2)
    9090:	a8c00117 	ldw	r3,4(r21)
    9094:	10c00115 	stw	r3,4(r2)
    9098:	a8c00217 	ldw	r3,8(r21)
    909c:	10c00215 	stw	r3,8(r2)
    90a0:	003f6a06 	br	8e4c <__alt_data_end+0xff008e4c>
    90a4:	9c67883a 	add	r19,r19,r17
    90a8:	4445c83a 	sub	r2,r8,r17
    90ac:	e4c00215 	stw	r19,8(fp)
    90b0:	10800054 	ori	r2,r2,1
    90b4:	98800115 	stw	r2,4(r19)
    90b8:	a8bfff17 	ldw	r2,-4(r21)
    90bc:	a009883a 	mov	r4,r20
    90c0:	1080004c 	andi	r2,r2,1
    90c4:	1462b03a 	or	r17,r2,r17
    90c8:	ac7fff15 	stw	r17,-4(r21)
    90cc:	000eab80 	call	eab8 <__malloc_unlock>
    90d0:	a805883a 	mov	r2,r21
    90d4:	003f6b06 	br	8e84 <__alt_data_end+0xff008e84>
    90d8:	a80b883a 	mov	r5,r21
    90dc:	9009883a 	mov	r4,r18
    90e0:	0007a940 	call	7a94 <memmove>
    90e4:	003f4e06 	br	8e20 <__alt_data_end+0xff008e20>
    90e8:	89000404 	addi	r4,r17,16
    90ec:	b93fbc16 	blt	r23,r4,8fe0 <__alt_data_end+0xff008fe0>
    90f0:	b0800317 	ldw	r2,12(r22)
    90f4:	b0c00217 	ldw	r3,8(r22)
    90f8:	81bfff04 	addi	r6,r16,-4
    90fc:	01000904 	movi	r4,36
    9100:	18800315 	stw	r2,12(r3)
    9104:	10c00215 	stw	r3,8(r2)
    9108:	b4800204 	addi	r18,r22,8
    910c:	21804336 	bltu	r4,r6,921c <_realloc_r+0x508>
    9110:	008004c4 	movi	r2,19
    9114:	11803f2e 	bgeu	r2,r6,9214 <_realloc_r+0x500>
    9118:	a8800017 	ldw	r2,0(r21)
    911c:	b0800215 	stw	r2,8(r22)
    9120:	a8800117 	ldw	r2,4(r21)
    9124:	b0800315 	stw	r2,12(r22)
    9128:	008006c4 	movi	r2,27
    912c:	11803f36 	bltu	r2,r6,922c <_realloc_r+0x518>
    9130:	b0800404 	addi	r2,r22,16
    9134:	ad400204 	addi	r21,r21,8
    9138:	a8c00017 	ldw	r3,0(r21)
    913c:	10c00015 	stw	r3,0(r2)
    9140:	a8c00117 	ldw	r3,4(r21)
    9144:	10c00115 	stw	r3,4(r2)
    9148:	a8c00217 	ldw	r3,8(r21)
    914c:	10c00215 	stw	r3,8(r2)
    9150:	b447883a 	add	r3,r22,r17
    9154:	bc45c83a 	sub	r2,r23,r17
    9158:	e0c00215 	stw	r3,8(fp)
    915c:	10800054 	ori	r2,r2,1
    9160:	18800115 	stw	r2,4(r3)
    9164:	b0800117 	ldw	r2,4(r22)
    9168:	a009883a 	mov	r4,r20
    916c:	1080004c 	andi	r2,r2,1
    9170:	1462b03a 	or	r17,r2,r17
    9174:	b4400115 	stw	r17,4(r22)
    9178:	000eab80 	call	eab8 <__malloc_unlock>
    917c:	9005883a 	mov	r2,r18
    9180:	003f4006 	br	8e84 <__alt_data_end+0xff008e84>
    9184:	a8c00217 	ldw	r3,8(r21)
    9188:	90c00215 	stw	r3,8(r18)
    918c:	a8c00317 	ldw	r3,12(r21)
    9190:	90c00315 	stw	r3,12(r18)
    9194:	30801126 	beq	r6,r2,91dc <_realloc_r+0x4c8>
    9198:	90800404 	addi	r2,r18,16
    919c:	a8c00404 	addi	r3,r21,16
    91a0:	003f1906 	br	8e08 <__alt_data_end+0xff008e08>
    91a4:	90ffff17 	ldw	r3,-4(r18)
    91a8:	00bfff04 	movi	r2,-4
    91ac:	a825883a 	mov	r18,r21
    91b0:	1884703a 	and	r2,r3,r2
    91b4:	80a1883a 	add	r16,r16,r2
    91b8:	003f2406 	br	8e4c <__alt_data_end+0xff008e4c>
    91bc:	a8800217 	ldw	r2,8(r21)
    91c0:	b0800415 	stw	r2,16(r22)
    91c4:	a8800317 	ldw	r2,12(r21)
    91c8:	b0800515 	stw	r2,20(r22)
    91cc:	31000a26 	beq	r6,r4,91f8 <_realloc_r+0x4e4>
    91d0:	b0800604 	addi	r2,r22,24
    91d4:	ad400404 	addi	r21,r21,16
    91d8:	003fa906 	br	9080 <__alt_data_end+0xff009080>
    91dc:	a9000417 	ldw	r4,16(r21)
    91e0:	90800604 	addi	r2,r18,24
    91e4:	a8c00604 	addi	r3,r21,24
    91e8:	91000415 	stw	r4,16(r18)
    91ec:	a9000517 	ldw	r4,20(r21)
    91f0:	91000515 	stw	r4,20(r18)
    91f4:	003f0406 	br	8e08 <__alt_data_end+0xff008e08>
    91f8:	a8c00417 	ldw	r3,16(r21)
    91fc:	ad400604 	addi	r21,r21,24
    9200:	b0800804 	addi	r2,r22,32
    9204:	b0c00615 	stw	r3,24(r22)
    9208:	a8ffff17 	ldw	r3,-4(r21)
    920c:	b0c00715 	stw	r3,28(r22)
    9210:	003f9b06 	br	9080 <__alt_data_end+0xff009080>
    9214:	9005883a 	mov	r2,r18
    9218:	003fc706 	br	9138 <__alt_data_end+0xff009138>
    921c:	a80b883a 	mov	r5,r21
    9220:	9009883a 	mov	r4,r18
    9224:	0007a940 	call	7a94 <memmove>
    9228:	003fc906 	br	9150 <__alt_data_end+0xff009150>
    922c:	a8800217 	ldw	r2,8(r21)
    9230:	b0800415 	stw	r2,16(r22)
    9234:	a8800317 	ldw	r2,12(r21)
    9238:	b0800515 	stw	r2,20(r22)
    923c:	31000726 	beq	r6,r4,925c <_realloc_r+0x548>
    9240:	b0800604 	addi	r2,r22,24
    9244:	ad400404 	addi	r21,r21,16
    9248:	003fbb06 	br	9138 <__alt_data_end+0xff009138>
    924c:	a009883a 	mov	r4,r20
    9250:	000eab80 	call	eab8 <__malloc_unlock>
    9254:	0005883a 	mov	r2,zero
    9258:	003f0a06 	br	8e84 <__alt_data_end+0xff008e84>
    925c:	a8c00417 	ldw	r3,16(r21)
    9260:	ad400604 	addi	r21,r21,24
    9264:	b0800804 	addi	r2,r22,32
    9268:	b0c00615 	stw	r3,24(r22)
    926c:	a8ffff17 	ldw	r3,-4(r21)
    9270:	b0c00715 	stw	r3,28(r22)
    9274:	003fb006 	br	9138 <__alt_data_end+0xff009138>

00009278 <__fpclassifyd>:
    9278:	00a00034 	movhi	r2,32768
    927c:	10bfffc4 	addi	r2,r2,-1
    9280:	2884703a 	and	r2,r5,r2
    9284:	10000726 	beq	r2,zero,92a4 <__fpclassifyd+0x2c>
    9288:	00fffc34 	movhi	r3,65520
    928c:	019ff834 	movhi	r6,32736
    9290:	28c7883a 	add	r3,r5,r3
    9294:	31bfffc4 	addi	r6,r6,-1
    9298:	30c00536 	bltu	r6,r3,92b0 <__fpclassifyd+0x38>
    929c:	00800104 	movi	r2,4
    92a0:	f800283a 	ret
    92a4:	2000021e 	bne	r4,zero,92b0 <__fpclassifyd+0x38>
    92a8:	00800084 	movi	r2,2
    92ac:	f800283a 	ret
    92b0:	00dffc34 	movhi	r3,32752
    92b4:	019ff834 	movhi	r6,32736
    92b8:	28cb883a 	add	r5,r5,r3
    92bc:	31bfffc4 	addi	r6,r6,-1
    92c0:	317ff62e 	bgeu	r6,r5,929c <__alt_data_end+0xff00929c>
    92c4:	01400434 	movhi	r5,16
    92c8:	297fffc4 	addi	r5,r5,-1
    92cc:	28800236 	bltu	r5,r2,92d8 <__fpclassifyd+0x60>
    92d0:	008000c4 	movi	r2,3
    92d4:	f800283a 	ret
    92d8:	10c00226 	beq	r2,r3,92e4 <__fpclassifyd+0x6c>
    92dc:	0005883a 	mov	r2,zero
    92e0:	f800283a 	ret
    92e4:	2005003a 	cmpeq	r2,r4,zero
    92e8:	f800283a 	ret

000092ec <__sread>:
    92ec:	defffe04 	addi	sp,sp,-8
    92f0:	dc000015 	stw	r16,0(sp)
    92f4:	2821883a 	mov	r16,r5
    92f8:	2940038f 	ldh	r5,14(r5)
    92fc:	dfc00115 	stw	ra,4(sp)
    9300:	000b0e00 	call	b0e0 <_read_r>
    9304:	10000716 	blt	r2,zero,9324 <__sread+0x38>
    9308:	80c01417 	ldw	r3,80(r16)
    930c:	1887883a 	add	r3,r3,r2
    9310:	80c01415 	stw	r3,80(r16)
    9314:	dfc00117 	ldw	ra,4(sp)
    9318:	dc000017 	ldw	r16,0(sp)
    931c:	dec00204 	addi	sp,sp,8
    9320:	f800283a 	ret
    9324:	80c0030b 	ldhu	r3,12(r16)
    9328:	18fbffcc 	andi	r3,r3,61439
    932c:	80c0030d 	sth	r3,12(r16)
    9330:	dfc00117 	ldw	ra,4(sp)
    9334:	dc000017 	ldw	r16,0(sp)
    9338:	dec00204 	addi	sp,sp,8
    933c:	f800283a 	ret

00009340 <__seofread>:
    9340:	0005883a 	mov	r2,zero
    9344:	f800283a 	ret

00009348 <__swrite>:
    9348:	2880030b 	ldhu	r2,12(r5)
    934c:	defffb04 	addi	sp,sp,-20
    9350:	dcc00315 	stw	r19,12(sp)
    9354:	dc800215 	stw	r18,8(sp)
    9358:	dc400115 	stw	r17,4(sp)
    935c:	dc000015 	stw	r16,0(sp)
    9360:	dfc00415 	stw	ra,16(sp)
    9364:	10c0400c 	andi	r3,r2,256
    9368:	2821883a 	mov	r16,r5
    936c:	2023883a 	mov	r17,r4
    9370:	3025883a 	mov	r18,r6
    9374:	3827883a 	mov	r19,r7
    9378:	18000526 	beq	r3,zero,9390 <__swrite+0x48>
    937c:	2940038f 	ldh	r5,14(r5)
    9380:	01c00084 	movi	r7,2
    9384:	000d883a 	mov	r6,zero
    9388:	000b0800 	call	b080 <_lseek_r>
    938c:	8080030b 	ldhu	r2,12(r16)
    9390:	8140038f 	ldh	r5,14(r16)
    9394:	10bbffcc 	andi	r2,r2,61439
    9398:	980f883a 	mov	r7,r19
    939c:	900d883a 	mov	r6,r18
    93a0:	8809883a 	mov	r4,r17
    93a4:	8080030d 	sth	r2,12(r16)
    93a8:	dfc00417 	ldw	ra,16(sp)
    93ac:	dcc00317 	ldw	r19,12(sp)
    93b0:	dc800217 	ldw	r18,8(sp)
    93b4:	dc400117 	ldw	r17,4(sp)
    93b8:	dc000017 	ldw	r16,0(sp)
    93bc:	dec00504 	addi	sp,sp,20
    93c0:	000ab4c1 	jmpi	ab4c <_write_r>

000093c4 <__sseek>:
    93c4:	defffe04 	addi	sp,sp,-8
    93c8:	dc000015 	stw	r16,0(sp)
    93cc:	2821883a 	mov	r16,r5
    93d0:	2940038f 	ldh	r5,14(r5)
    93d4:	dfc00115 	stw	ra,4(sp)
    93d8:	000b0800 	call	b080 <_lseek_r>
    93dc:	00ffffc4 	movi	r3,-1
    93e0:	10c00826 	beq	r2,r3,9404 <__sseek+0x40>
    93e4:	80c0030b 	ldhu	r3,12(r16)
    93e8:	80801415 	stw	r2,80(r16)
    93ec:	18c40014 	ori	r3,r3,4096
    93f0:	80c0030d 	sth	r3,12(r16)
    93f4:	dfc00117 	ldw	ra,4(sp)
    93f8:	dc000017 	ldw	r16,0(sp)
    93fc:	dec00204 	addi	sp,sp,8
    9400:	f800283a 	ret
    9404:	80c0030b 	ldhu	r3,12(r16)
    9408:	18fbffcc 	andi	r3,r3,61439
    940c:	80c0030d 	sth	r3,12(r16)
    9410:	dfc00117 	ldw	ra,4(sp)
    9414:	dc000017 	ldw	r16,0(sp)
    9418:	dec00204 	addi	sp,sp,8
    941c:	f800283a 	ret

00009420 <__sclose>:
    9420:	2940038f 	ldh	r5,14(r5)
    9424:	000abac1 	jmpi	abac <_close_r>

00009428 <strcmp>:
    9428:	2144b03a 	or	r2,r4,r5
    942c:	108000cc 	andi	r2,r2,3
    9430:	1000171e 	bne	r2,zero,9490 <strcmp+0x68>
    9434:	20800017 	ldw	r2,0(r4)
    9438:	28c00017 	ldw	r3,0(r5)
    943c:	10c0141e 	bne	r2,r3,9490 <strcmp+0x68>
    9440:	027fbff4 	movhi	r9,65279
    9444:	4a7fbfc4 	addi	r9,r9,-257
    9448:	0086303a 	nor	r3,zero,r2
    944c:	02202074 	movhi	r8,32897
    9450:	1245883a 	add	r2,r2,r9
    9454:	42202004 	addi	r8,r8,-32640
    9458:	10c4703a 	and	r2,r2,r3
    945c:	1204703a 	and	r2,r2,r8
    9460:	10000226 	beq	r2,zero,946c <strcmp+0x44>
    9464:	00002306 	br	94f4 <strcmp+0xcc>
    9468:	1000221e 	bne	r2,zero,94f4 <strcmp+0xcc>
    946c:	21000104 	addi	r4,r4,4
    9470:	20c00017 	ldw	r3,0(r4)
    9474:	29400104 	addi	r5,r5,4
    9478:	29800017 	ldw	r6,0(r5)
    947c:	1a4f883a 	add	r7,r3,r9
    9480:	00c4303a 	nor	r2,zero,r3
    9484:	3884703a 	and	r2,r7,r2
    9488:	1204703a 	and	r2,r2,r8
    948c:	19bff626 	beq	r3,r6,9468 <__alt_data_end+0xff009468>
    9490:	20800003 	ldbu	r2,0(r4)
    9494:	10c03fcc 	andi	r3,r2,255
    9498:	18c0201c 	xori	r3,r3,128
    949c:	18ffe004 	addi	r3,r3,-128
    94a0:	18000c26 	beq	r3,zero,94d4 <strcmp+0xac>
    94a4:	29800007 	ldb	r6,0(r5)
    94a8:	19800326 	beq	r3,r6,94b8 <strcmp+0x90>
    94ac:	00001306 	br	94fc <strcmp+0xd4>
    94b0:	29800007 	ldb	r6,0(r5)
    94b4:	11800b1e 	bne	r2,r6,94e4 <strcmp+0xbc>
    94b8:	21000044 	addi	r4,r4,1
    94bc:	20c00003 	ldbu	r3,0(r4)
    94c0:	29400044 	addi	r5,r5,1
    94c4:	18803fcc 	andi	r2,r3,255
    94c8:	1080201c 	xori	r2,r2,128
    94cc:	10bfe004 	addi	r2,r2,-128
    94d0:	103ff71e 	bne	r2,zero,94b0 <__alt_data_end+0xff0094b0>
    94d4:	0007883a 	mov	r3,zero
    94d8:	28800003 	ldbu	r2,0(r5)
    94dc:	1885c83a 	sub	r2,r3,r2
    94e0:	f800283a 	ret
    94e4:	28800003 	ldbu	r2,0(r5)
    94e8:	18c03fcc 	andi	r3,r3,255
    94ec:	1885c83a 	sub	r2,r3,r2
    94f0:	f800283a 	ret
    94f4:	0005883a 	mov	r2,zero
    94f8:	f800283a 	ret
    94fc:	10c03fcc 	andi	r3,r2,255
    9500:	003ff506 	br	94d8 <__alt_data_end+0xff0094d8>

00009504 <__sprint_r.part.0>:
    9504:	28801917 	ldw	r2,100(r5)
    9508:	defff604 	addi	sp,sp,-40
    950c:	dd400515 	stw	r21,20(sp)
    9510:	dfc00915 	stw	ra,36(sp)
    9514:	df000815 	stw	fp,32(sp)
    9518:	ddc00715 	stw	r23,28(sp)
    951c:	dd800615 	stw	r22,24(sp)
    9520:	dd000415 	stw	r20,16(sp)
    9524:	dcc00315 	stw	r19,12(sp)
    9528:	dc800215 	stw	r18,8(sp)
    952c:	dc400115 	stw	r17,4(sp)
    9530:	dc000015 	stw	r16,0(sp)
    9534:	1088000c 	andi	r2,r2,8192
    9538:	302b883a 	mov	r21,r6
    953c:	10002e26 	beq	r2,zero,95f8 <__sprint_r.part.0+0xf4>
    9540:	30800217 	ldw	r2,8(r6)
    9544:	35800017 	ldw	r22,0(r6)
    9548:	10002926 	beq	r2,zero,95f0 <__sprint_r.part.0+0xec>
    954c:	2827883a 	mov	r19,r5
    9550:	2029883a 	mov	r20,r4
    9554:	b5c00104 	addi	r23,r22,4
    9558:	04bfffc4 	movi	r18,-1
    955c:	bc400017 	ldw	r17,0(r23)
    9560:	b4000017 	ldw	r16,0(r22)
    9564:	0039883a 	mov	fp,zero
    9568:	8822d0ba 	srli	r17,r17,2
    956c:	8800031e 	bne	r17,zero,957c <__sprint_r.part.0+0x78>
    9570:	00001806 	br	95d4 <__sprint_r.part.0+0xd0>
    9574:	84000104 	addi	r16,r16,4
    9578:	8f001526 	beq	r17,fp,95d0 <__sprint_r.part.0+0xcc>
    957c:	81400017 	ldw	r5,0(r16)
    9580:	980d883a 	mov	r6,r19
    9584:	a009883a 	mov	r4,r20
    9588:	000af2c0 	call	af2c <_fputwc_r>
    958c:	e7000044 	addi	fp,fp,1
    9590:	14bff81e 	bne	r2,r18,9574 <__alt_data_end+0xff009574>
    9594:	9005883a 	mov	r2,r18
    9598:	a8000215 	stw	zero,8(r21)
    959c:	a8000115 	stw	zero,4(r21)
    95a0:	dfc00917 	ldw	ra,36(sp)
    95a4:	df000817 	ldw	fp,32(sp)
    95a8:	ddc00717 	ldw	r23,28(sp)
    95ac:	dd800617 	ldw	r22,24(sp)
    95b0:	dd400517 	ldw	r21,20(sp)
    95b4:	dd000417 	ldw	r20,16(sp)
    95b8:	dcc00317 	ldw	r19,12(sp)
    95bc:	dc800217 	ldw	r18,8(sp)
    95c0:	dc400117 	ldw	r17,4(sp)
    95c4:	dc000017 	ldw	r16,0(sp)
    95c8:	dec00a04 	addi	sp,sp,40
    95cc:	f800283a 	ret
    95d0:	a8800217 	ldw	r2,8(r21)
    95d4:	8c63883a 	add	r17,r17,r17
    95d8:	8c63883a 	add	r17,r17,r17
    95dc:	1445c83a 	sub	r2,r2,r17
    95e0:	a8800215 	stw	r2,8(r21)
    95e4:	b5800204 	addi	r22,r22,8
    95e8:	bdc00204 	addi	r23,r23,8
    95ec:	103fdb1e 	bne	r2,zero,955c <__alt_data_end+0xff00955c>
    95f0:	0005883a 	mov	r2,zero
    95f4:	003fe806 	br	9598 <__alt_data_end+0xff009598>
    95f8:	0006f8c0 	call	6f8c <__sfvwrite_r>
    95fc:	003fe606 	br	9598 <__alt_data_end+0xff009598>

00009600 <__sprint_r>:
    9600:	30c00217 	ldw	r3,8(r6)
    9604:	18000126 	beq	r3,zero,960c <__sprint_r+0xc>
    9608:	00095041 	jmpi	9504 <__sprint_r.part.0>
    960c:	30000115 	stw	zero,4(r6)
    9610:	0005883a 	mov	r2,zero
    9614:	f800283a 	ret

00009618 <___vfiprintf_internal_r>:
    9618:	deffc904 	addi	sp,sp,-220
    961c:	df003515 	stw	fp,212(sp)
    9620:	dd003115 	stw	r20,196(sp)
    9624:	dfc03615 	stw	ra,216(sp)
    9628:	ddc03415 	stw	r23,208(sp)
    962c:	dd803315 	stw	r22,204(sp)
    9630:	dd403215 	stw	r21,200(sp)
    9634:	dcc03015 	stw	r19,192(sp)
    9638:	dc802f15 	stw	r18,188(sp)
    963c:	dc402e15 	stw	r17,184(sp)
    9640:	dc002d15 	stw	r16,180(sp)
    9644:	d9002015 	stw	r4,128(sp)
    9648:	d9c02215 	stw	r7,136(sp)
    964c:	2829883a 	mov	r20,r5
    9650:	3039883a 	mov	fp,r6
    9654:	20000226 	beq	r4,zero,9660 <___vfiprintf_internal_r+0x48>
    9658:	20800e17 	ldw	r2,56(r4)
    965c:	1000cf26 	beq	r2,zero,999c <___vfiprintf_internal_r+0x384>
    9660:	a080030b 	ldhu	r2,12(r20)
    9664:	10c8000c 	andi	r3,r2,8192
    9668:	1800061e 	bne	r3,zero,9684 <___vfiprintf_internal_r+0x6c>
    966c:	a1001917 	ldw	r4,100(r20)
    9670:	00f7ffc4 	movi	r3,-8193
    9674:	10880014 	ori	r2,r2,8192
    9678:	20c6703a 	and	r3,r4,r3
    967c:	a080030d 	sth	r2,12(r20)
    9680:	a0c01915 	stw	r3,100(r20)
    9684:	10c0020c 	andi	r3,r2,8
    9688:	1800a926 	beq	r3,zero,9930 <___vfiprintf_internal_r+0x318>
    968c:	a0c00417 	ldw	r3,16(r20)
    9690:	1800a726 	beq	r3,zero,9930 <___vfiprintf_internal_r+0x318>
    9694:	1080068c 	andi	r2,r2,26
    9698:	00c00284 	movi	r3,10
    969c:	10c0ac26 	beq	r2,r3,9950 <___vfiprintf_internal_r+0x338>
    96a0:	da801a04 	addi	r10,sp,104
    96a4:	da801e15 	stw	r10,120(sp)
    96a8:	d8801e17 	ldw	r2,120(sp)
    96ac:	da8019c4 	addi	r10,sp,103
    96b0:	05800074 	movhi	r22,1
    96b4:	05c00074 	movhi	r23,1
    96b8:	da801f15 	stw	r10,124(sp)
    96bc:	1295c83a 	sub	r10,r2,r10
    96c0:	b581c504 	addi	r22,r22,1812
    96c4:	bdc1c104 	addi	r23,r23,1796
    96c8:	dec01a15 	stw	sp,104(sp)
    96cc:	d8001c15 	stw	zero,112(sp)
    96d0:	d8001b15 	stw	zero,108(sp)
    96d4:	d8002615 	stw	zero,152(sp)
    96d8:	d8002315 	stw	zero,140(sp)
    96dc:	da802715 	stw	r10,156(sp)
    96e0:	d811883a 	mov	r8,sp
    96e4:	dd002115 	stw	r20,132(sp)
    96e8:	e021883a 	mov	r16,fp
    96ec:	80800007 	ldb	r2,0(r16)
    96f0:	1003ea26 	beq	r2,zero,a69c <___vfiprintf_internal_r+0x1084>
    96f4:	00c00944 	movi	r3,37
    96f8:	8025883a 	mov	r18,r16
    96fc:	10c0021e 	bne	r2,r3,9708 <___vfiprintf_internal_r+0xf0>
    9700:	00001606 	br	975c <___vfiprintf_internal_r+0x144>
    9704:	10c00326 	beq	r2,r3,9714 <___vfiprintf_internal_r+0xfc>
    9708:	94800044 	addi	r18,r18,1
    970c:	90800007 	ldb	r2,0(r18)
    9710:	103ffc1e 	bne	r2,zero,9704 <__alt_data_end+0xff009704>
    9714:	9423c83a 	sub	r17,r18,r16
    9718:	88001026 	beq	r17,zero,975c <___vfiprintf_internal_r+0x144>
    971c:	d8c01c17 	ldw	r3,112(sp)
    9720:	d8801b17 	ldw	r2,108(sp)
    9724:	44000015 	stw	r16,0(r8)
    9728:	88c7883a 	add	r3,r17,r3
    972c:	10800044 	addi	r2,r2,1
    9730:	44400115 	stw	r17,4(r8)
    9734:	d8c01c15 	stw	r3,112(sp)
    9738:	d8801b15 	stw	r2,108(sp)
    973c:	010001c4 	movi	r4,7
    9740:	2080760e 	bge	r4,r2,991c <___vfiprintf_internal_r+0x304>
    9744:	1803821e 	bne	r3,zero,a550 <___vfiprintf_internal_r+0xf38>
    9748:	da802317 	ldw	r10,140(sp)
    974c:	d8001b15 	stw	zero,108(sp)
    9750:	d811883a 	mov	r8,sp
    9754:	5455883a 	add	r10,r10,r17
    9758:	da802315 	stw	r10,140(sp)
    975c:	90800007 	ldb	r2,0(r18)
    9760:	10044626 	beq	r2,zero,a87c <___vfiprintf_internal_r+0x1264>
    9764:	90c00047 	ldb	r3,1(r18)
    9768:	94000044 	addi	r16,r18,1
    976c:	d8001d85 	stb	zero,118(sp)
    9770:	0009883a 	mov	r4,zero
    9774:	000f883a 	mov	r7,zero
    9778:	027fffc4 	movi	r9,-1
    977c:	0023883a 	mov	r17,zero
    9780:	0029883a 	mov	r20,zero
    9784:	01401604 	movi	r5,88
    9788:	01800244 	movi	r6,9
    978c:	03400a84 	movi	r13,42
    9790:	03001b04 	movi	r12,108
    9794:	84000044 	addi	r16,r16,1
    9798:	18bff804 	addi	r2,r3,-32
    979c:	28827336 	bltu	r5,r2,a16c <___vfiprintf_internal_r+0xb54>
    97a0:	100490ba 	slli	r2,r2,2
    97a4:	02800074 	movhi	r10,1
    97a8:	52a5ee04 	addi	r10,r10,-26696
    97ac:	1285883a 	add	r2,r2,r10
    97b0:	10800017 	ldw	r2,0(r2)
    97b4:	1000683a 	jmp	r2
    97b8:	00009ea0 	cmpeqi	zero,zero,634
    97bc:	0000a16c 	andhi	zero,zero,645
    97c0:	0000a16c 	andhi	zero,zero,645
    97c4:	00009ec0 	call	9ec <init_LCD+0xb8>
    97c8:	0000a16c 	andhi	zero,zero,645
    97cc:	0000a16c 	andhi	zero,zero,645
    97d0:	0000a16c 	andhi	zero,zero,645
    97d4:	0000a16c 	andhi	zero,zero,645
    97d8:	0000a16c 	andhi	zero,zero,645
    97dc:	0000a16c 	andhi	zero,zero,645
    97e0:	0000a0a8 	cmpgeui	zero,zero,642
    97e4:	0000a0c4 	movi	zero,643
    97e8:	0000a16c 	andhi	zero,zero,645
    97ec:	000099ac 	andhi	zero,zero,614
    97f0:	0000a0d4 	movui	zero,643
    97f4:	0000a16c 	andhi	zero,zero,645
    97f8:	00009ecc 	andi	zero,zero,635
    97fc:	00009ed8 	cmpnei	zero,zero,635
    9800:	00009ed8 	cmpnei	zero,zero,635
    9804:	00009ed8 	cmpnei	zero,zero,635
    9808:	00009ed8 	cmpnei	zero,zero,635
    980c:	00009ed8 	cmpnei	zero,zero,635
    9810:	00009ed8 	cmpnei	zero,zero,635
    9814:	00009ed8 	cmpnei	zero,zero,635
    9818:	00009ed8 	cmpnei	zero,zero,635
    981c:	00009ed8 	cmpnei	zero,zero,635
    9820:	0000a16c 	andhi	zero,zero,645
    9824:	0000a16c 	andhi	zero,zero,645
    9828:	0000a16c 	andhi	zero,zero,645
    982c:	0000a16c 	andhi	zero,zero,645
    9830:	0000a16c 	andhi	zero,zero,645
    9834:	0000a16c 	andhi	zero,zero,645
    9838:	0000a16c 	andhi	zero,zero,645
    983c:	0000a16c 	andhi	zero,zero,645
    9840:	0000a16c 	andhi	zero,zero,645
    9844:	0000a16c 	andhi	zero,zero,645
    9848:	00009f04 	movi	zero,636
    984c:	0000a16c 	andhi	zero,zero,645
    9850:	0000a16c 	andhi	zero,zero,645
    9854:	0000a16c 	andhi	zero,zero,645
    9858:	0000a16c 	andhi	zero,zero,645
    985c:	0000a16c 	andhi	zero,zero,645
    9860:	0000a16c 	andhi	zero,zero,645
    9864:	0000a16c 	andhi	zero,zero,645
    9868:	0000a16c 	andhi	zero,zero,645
    986c:	0000a16c 	andhi	zero,zero,645
    9870:	0000a16c 	andhi	zero,zero,645
    9874:	00009f3c 	xorhi	zero,zero,636
    9878:	0000a16c 	andhi	zero,zero,645
    987c:	0000a16c 	andhi	zero,zero,645
    9880:	0000a16c 	andhi	zero,zero,645
    9884:	0000a16c 	andhi	zero,zero,645
    9888:	0000a16c 	andhi	zero,zero,645
    988c:	00009f94 	movui	zero,638
    9890:	0000a16c 	andhi	zero,zero,645
    9894:	0000a16c 	andhi	zero,zero,645
    9898:	0000a004 	movi	zero,640
    989c:	0000a16c 	andhi	zero,zero,645
    98a0:	0000a16c 	andhi	zero,zero,645
    98a4:	0000a16c 	andhi	zero,zero,645
    98a8:	0000a16c 	andhi	zero,zero,645
    98ac:	0000a16c 	andhi	zero,zero,645
    98b0:	0000a16c 	andhi	zero,zero,645
    98b4:	0000a16c 	andhi	zero,zero,645
    98b8:	0000a16c 	andhi	zero,zero,645
    98bc:	0000a16c 	andhi	zero,zero,645
    98c0:	0000a16c 	andhi	zero,zero,645
    98c4:	00009db0 	cmpltui	zero,zero,630
    98c8:	00009ddc 	xori	zero,zero,631
    98cc:	0000a16c 	andhi	zero,zero,645
    98d0:	0000a16c 	andhi	zero,zero,645
    98d4:	0000a16c 	andhi	zero,zero,645
    98d8:	0000a114 	movui	zero,644
    98dc:	00009ddc 	xori	zero,zero,631
    98e0:	0000a16c 	andhi	zero,zero,645
    98e4:	0000a16c 	andhi	zero,zero,645
    98e8:	00009c70 	cmpltui	zero,zero,625
    98ec:	0000a16c 	andhi	zero,zero,645
    98f0:	00009c80 	call	9c8 <init_LCD+0x94>
    98f4:	00009cbc 	xorhi	zero,zero,626
    98f8:	000099b8 	rdprs	zero,zero,614
    98fc:	00009c64 	muli	zero,zero,625
    9900:	0000a16c 	andhi	zero,zero,645
    9904:	0000a040 	call	a04 <init_LCD+0xd0>
    9908:	0000a16c 	andhi	zero,zero,645
    990c:	0000a098 	cmpnei	zero,zero,642
    9910:	0000a16c 	andhi	zero,zero,645
    9914:	0000a16c 	andhi	zero,zero,645
    9918:	00009d5c 	xori	zero,zero,629
    991c:	42000204 	addi	r8,r8,8
    9920:	da802317 	ldw	r10,140(sp)
    9924:	5455883a 	add	r10,r10,r17
    9928:	da802315 	stw	r10,140(sp)
    992c:	003f8b06 	br	975c <__alt_data_end+0xff00975c>
    9930:	d9002017 	ldw	r4,128(sp)
    9934:	a00b883a 	mov	r5,r20
    9938:	0004b340 	call	4b34 <__swsetup_r>
    993c:	1003b11e 	bne	r2,zero,a804 <___vfiprintf_internal_r+0x11ec>
    9940:	a080030b 	ldhu	r2,12(r20)
    9944:	00c00284 	movi	r3,10
    9948:	1080068c 	andi	r2,r2,26
    994c:	10ff541e 	bne	r2,r3,96a0 <__alt_data_end+0xff0096a0>
    9950:	a080038f 	ldh	r2,14(r20)
    9954:	103f5216 	blt	r2,zero,96a0 <__alt_data_end+0xff0096a0>
    9958:	d9c02217 	ldw	r7,136(sp)
    995c:	d9002017 	ldw	r4,128(sp)
    9960:	e00d883a 	mov	r6,fp
    9964:	a00b883a 	mov	r5,r20
    9968:	000aa900 	call	aa90 <__sbprintf>
    996c:	dfc03617 	ldw	ra,216(sp)
    9970:	df003517 	ldw	fp,212(sp)
    9974:	ddc03417 	ldw	r23,208(sp)
    9978:	dd803317 	ldw	r22,204(sp)
    997c:	dd403217 	ldw	r21,200(sp)
    9980:	dd003117 	ldw	r20,196(sp)
    9984:	dcc03017 	ldw	r19,192(sp)
    9988:	dc802f17 	ldw	r18,188(sp)
    998c:	dc402e17 	ldw	r17,184(sp)
    9990:	dc002d17 	ldw	r16,180(sp)
    9994:	dec03704 	addi	sp,sp,220
    9998:	f800283a 	ret
    999c:	0006b080 	call	6b08 <__sinit>
    99a0:	003f2f06 	br	9660 <__alt_data_end+0xff009660>
    99a4:	0463c83a 	sub	r17,zero,r17
    99a8:	d8802215 	stw	r2,136(sp)
    99ac:	a5000114 	ori	r20,r20,4
    99b0:	80c00007 	ldb	r3,0(r16)
    99b4:	003f7706 	br	9794 <__alt_data_end+0xff009794>
    99b8:	00800c04 	movi	r2,48
    99bc:	da802217 	ldw	r10,136(sp)
    99c0:	d8801d05 	stb	r2,116(sp)
    99c4:	00801e04 	movi	r2,120
    99c8:	d8801d45 	stb	r2,117(sp)
    99cc:	d8001d85 	stb	zero,118(sp)
    99d0:	50c00104 	addi	r3,r10,4
    99d4:	54800017 	ldw	r18,0(r10)
    99d8:	0027883a 	mov	r19,zero
    99dc:	a0800094 	ori	r2,r20,2
    99e0:	48030b16 	blt	r9,zero,a610 <___vfiprintf_internal_r+0xff8>
    99e4:	00bfdfc4 	movi	r2,-129
    99e8:	a096703a 	and	r11,r20,r2
    99ec:	d8c02215 	stw	r3,136(sp)
    99f0:	5d000094 	ori	r20,r11,2
    99f4:	90032b1e 	bne	r18,zero,a6a4 <___vfiprintf_internal_r+0x108c>
    99f8:	00800074 	movhi	r2,1
    99fc:	10816004 	addi	r2,r2,1408
    9a00:	d8802615 	stw	r2,152(sp)
    9a04:	0039883a 	mov	fp,zero
    9a08:	48017b1e 	bne	r9,zero,9ff8 <___vfiprintf_internal_r+0x9e0>
    9a0c:	0013883a 	mov	r9,zero
    9a10:	0027883a 	mov	r19,zero
    9a14:	dd401a04 	addi	r21,sp,104
    9a18:	4825883a 	mov	r18,r9
    9a1c:	4cc0010e 	bge	r9,r19,9a24 <___vfiprintf_internal_r+0x40c>
    9a20:	9825883a 	mov	r18,r19
    9a24:	e7003fcc 	andi	fp,fp,255
    9a28:	e700201c 	xori	fp,fp,128
    9a2c:	e73fe004 	addi	fp,fp,-128
    9a30:	e0000126 	beq	fp,zero,9a38 <___vfiprintf_internal_r+0x420>
    9a34:	94800044 	addi	r18,r18,1
    9a38:	a380008c 	andi	r14,r20,2
    9a3c:	70000126 	beq	r14,zero,9a44 <___vfiprintf_internal_r+0x42c>
    9a40:	94800084 	addi	r18,r18,2
    9a44:	a700210c 	andi	fp,r20,132
    9a48:	e001df1e 	bne	fp,zero,a1c8 <___vfiprintf_internal_r+0xbb0>
    9a4c:	8c87c83a 	sub	r3,r17,r18
    9a50:	00c1dd0e 	bge	zero,r3,a1c8 <___vfiprintf_internal_r+0xbb0>
    9a54:	01c00404 	movi	r7,16
    9a58:	d8801c17 	ldw	r2,112(sp)
    9a5c:	38c3ad0e 	bge	r7,r3,a914 <___vfiprintf_internal_r+0x12fc>
    9a60:	02800074 	movhi	r10,1
    9a64:	5281c504 	addi	r10,r10,1812
    9a68:	dc002915 	stw	r16,164(sp)
    9a6c:	d9801b17 	ldw	r6,108(sp)
    9a70:	da802415 	stw	r10,144(sp)
    9a74:	03c001c4 	movi	r15,7
    9a78:	da402515 	stw	r9,148(sp)
    9a7c:	db802815 	stw	r14,160(sp)
    9a80:	1821883a 	mov	r16,r3
    9a84:	00000506 	br	9a9c <___vfiprintf_internal_r+0x484>
    9a88:	31400084 	addi	r5,r6,2
    9a8c:	42000204 	addi	r8,r8,8
    9a90:	200d883a 	mov	r6,r4
    9a94:	843ffc04 	addi	r16,r16,-16
    9a98:	3c000d0e 	bge	r7,r16,9ad0 <___vfiprintf_internal_r+0x4b8>
    9a9c:	10800404 	addi	r2,r2,16
    9aa0:	31000044 	addi	r4,r6,1
    9aa4:	45800015 	stw	r22,0(r8)
    9aa8:	41c00115 	stw	r7,4(r8)
    9aac:	d8801c15 	stw	r2,112(sp)
    9ab0:	d9001b15 	stw	r4,108(sp)
    9ab4:	793ff40e 	bge	r15,r4,9a88 <__alt_data_end+0xff009a88>
    9ab8:	1001b51e 	bne	r2,zero,a190 <___vfiprintf_internal_r+0xb78>
    9abc:	843ffc04 	addi	r16,r16,-16
    9ac0:	000d883a 	mov	r6,zero
    9ac4:	01400044 	movi	r5,1
    9ac8:	d811883a 	mov	r8,sp
    9acc:	3c3ff316 	blt	r7,r16,9a9c <__alt_data_end+0xff009a9c>
    9ad0:	8007883a 	mov	r3,r16
    9ad4:	da402517 	ldw	r9,148(sp)
    9ad8:	db802817 	ldw	r14,160(sp)
    9adc:	dc002917 	ldw	r16,164(sp)
    9ae0:	da802417 	ldw	r10,144(sp)
    9ae4:	1885883a 	add	r2,r3,r2
    9ae8:	40c00115 	stw	r3,4(r8)
    9aec:	42800015 	stw	r10,0(r8)
    9af0:	d8801c15 	stw	r2,112(sp)
    9af4:	d9401b15 	stw	r5,108(sp)
    9af8:	00c001c4 	movi	r3,7
    9afc:	19426016 	blt	r3,r5,a480 <___vfiprintf_internal_r+0xe68>
    9b00:	d8c01d87 	ldb	r3,118(sp)
    9b04:	42000204 	addi	r8,r8,8
    9b08:	29000044 	addi	r4,r5,1
    9b0c:	1801b31e 	bne	r3,zero,a1dc <___vfiprintf_internal_r+0xbc4>
    9b10:	7001c026 	beq	r14,zero,a214 <___vfiprintf_internal_r+0xbfc>
    9b14:	d8c01d04 	addi	r3,sp,116
    9b18:	10800084 	addi	r2,r2,2
    9b1c:	40c00015 	stw	r3,0(r8)
    9b20:	00c00084 	movi	r3,2
    9b24:	40c00115 	stw	r3,4(r8)
    9b28:	d8801c15 	stw	r2,112(sp)
    9b2c:	d9001b15 	stw	r4,108(sp)
    9b30:	00c001c4 	movi	r3,7
    9b34:	1902650e 	bge	r3,r4,a4cc <___vfiprintf_internal_r+0xeb4>
    9b38:	10029a1e 	bne	r2,zero,a5a4 <___vfiprintf_internal_r+0xf8c>
    9b3c:	00c02004 	movi	r3,128
    9b40:	01000044 	movi	r4,1
    9b44:	000b883a 	mov	r5,zero
    9b48:	d811883a 	mov	r8,sp
    9b4c:	e0c1b31e 	bne	fp,r3,a21c <___vfiprintf_internal_r+0xc04>
    9b50:	8cb9c83a 	sub	fp,r17,r18
    9b54:	0701b10e 	bge	zero,fp,a21c <___vfiprintf_internal_r+0xc04>
    9b58:	01c00404 	movi	r7,16
    9b5c:	3f03890e 	bge	r7,fp,a984 <___vfiprintf_internal_r+0x136c>
    9b60:	00c00074 	movhi	r3,1
    9b64:	18c1c104 	addi	r3,r3,1796
    9b68:	d8c02415 	stw	r3,144(sp)
    9b6c:	8007883a 	mov	r3,r16
    9b70:	034001c4 	movi	r13,7
    9b74:	e021883a 	mov	r16,fp
    9b78:	da402515 	stw	r9,148(sp)
    9b7c:	1839883a 	mov	fp,r3
    9b80:	00000506 	br	9b98 <___vfiprintf_internal_r+0x580>
    9b84:	29800084 	addi	r6,r5,2
    9b88:	42000204 	addi	r8,r8,8
    9b8c:	180b883a 	mov	r5,r3
    9b90:	843ffc04 	addi	r16,r16,-16
    9b94:	3c000d0e 	bge	r7,r16,9bcc <___vfiprintf_internal_r+0x5b4>
    9b98:	10800404 	addi	r2,r2,16
    9b9c:	28c00044 	addi	r3,r5,1
    9ba0:	45c00015 	stw	r23,0(r8)
    9ba4:	41c00115 	stw	r7,4(r8)
    9ba8:	d8801c15 	stw	r2,112(sp)
    9bac:	d8c01b15 	stw	r3,108(sp)
    9bb0:	68fff40e 	bge	r13,r3,9b84 <__alt_data_end+0xff009b84>
    9bb4:	1002241e 	bne	r2,zero,a448 <___vfiprintf_internal_r+0xe30>
    9bb8:	843ffc04 	addi	r16,r16,-16
    9bbc:	01800044 	movi	r6,1
    9bc0:	000b883a 	mov	r5,zero
    9bc4:	d811883a 	mov	r8,sp
    9bc8:	3c3ff316 	blt	r7,r16,9b98 <__alt_data_end+0xff009b98>
    9bcc:	da402517 	ldw	r9,148(sp)
    9bd0:	e007883a 	mov	r3,fp
    9bd4:	8039883a 	mov	fp,r16
    9bd8:	1821883a 	mov	r16,r3
    9bdc:	d8c02417 	ldw	r3,144(sp)
    9be0:	1705883a 	add	r2,r2,fp
    9be4:	47000115 	stw	fp,4(r8)
    9be8:	40c00015 	stw	r3,0(r8)
    9bec:	d8801c15 	stw	r2,112(sp)
    9bf0:	d9801b15 	stw	r6,108(sp)
    9bf4:	00c001c4 	movi	r3,7
    9bf8:	19827616 	blt	r3,r6,a5d4 <___vfiprintf_internal_r+0xfbc>
    9bfc:	4cf9c83a 	sub	fp,r9,r19
    9c00:	42000204 	addi	r8,r8,8
    9c04:	31000044 	addi	r4,r6,1
    9c08:	300b883a 	mov	r5,r6
    9c0c:	07018516 	blt	zero,fp,a224 <___vfiprintf_internal_r+0xc0c>
    9c10:	9885883a 	add	r2,r19,r2
    9c14:	45400015 	stw	r21,0(r8)
    9c18:	44c00115 	stw	r19,4(r8)
    9c1c:	d8801c15 	stw	r2,112(sp)
    9c20:	d9001b15 	stw	r4,108(sp)
    9c24:	00c001c4 	movi	r3,7
    9c28:	1901dd0e 	bge	r3,r4,a3a0 <___vfiprintf_internal_r+0xd88>
    9c2c:	1002401e 	bne	r2,zero,a530 <___vfiprintf_internal_r+0xf18>
    9c30:	d8001b15 	stw	zero,108(sp)
    9c34:	a2c0010c 	andi	r11,r20,4
    9c38:	58000226 	beq	r11,zero,9c44 <___vfiprintf_internal_r+0x62c>
    9c3c:	8ca7c83a 	sub	r19,r17,r18
    9c40:	04c2f216 	blt	zero,r19,a80c <___vfiprintf_internal_r+0x11f4>
    9c44:	8c80010e 	bge	r17,r18,9c4c <___vfiprintf_internal_r+0x634>
    9c48:	9023883a 	mov	r17,r18
    9c4c:	da802317 	ldw	r10,140(sp)
    9c50:	5455883a 	add	r10,r10,r17
    9c54:	da802315 	stw	r10,140(sp)
    9c58:	d8001b15 	stw	zero,108(sp)
    9c5c:	d811883a 	mov	r8,sp
    9c60:	003ea206 	br	96ec <__alt_data_end+0xff0096ec>
    9c64:	a5000814 	ori	r20,r20,32
    9c68:	80c00007 	ldb	r3,0(r16)
    9c6c:	003ec906 	br	9794 <__alt_data_end+0xff009794>
    9c70:	80c00007 	ldb	r3,0(r16)
    9c74:	1b030926 	beq	r3,r12,a89c <___vfiprintf_internal_r+0x1284>
    9c78:	a5000414 	ori	r20,r20,16
    9c7c:	003ec506 	br	9794 <__alt_data_end+0xff009794>
    9c80:	21003fcc 	andi	r4,r4,255
    9c84:	20035e1e 	bne	r4,zero,aa00 <___vfiprintf_internal_r+0x13e8>
    9c88:	a080080c 	andi	r2,r20,32
    9c8c:	1002a526 	beq	r2,zero,a724 <___vfiprintf_internal_r+0x110c>
    9c90:	da802217 	ldw	r10,136(sp)
    9c94:	50800017 	ldw	r2,0(r10)
    9c98:	da802317 	ldw	r10,140(sp)
    9c9c:	5007d7fa 	srai	r3,r10,31
    9ca0:	da802217 	ldw	r10,136(sp)
    9ca4:	10c00115 	stw	r3,4(r2)
    9ca8:	52800104 	addi	r10,r10,4
    9cac:	da802215 	stw	r10,136(sp)
    9cb0:	da802317 	ldw	r10,140(sp)
    9cb4:	12800015 	stw	r10,0(r2)
    9cb8:	003e8c06 	br	96ec <__alt_data_end+0xff0096ec>
    9cbc:	21003fcc 	andi	r4,r4,255
    9cc0:	2003511e 	bne	r4,zero,aa08 <___vfiprintf_internal_r+0x13f0>
    9cc4:	a080080c 	andi	r2,r20,32
    9cc8:	1000a126 	beq	r2,zero,9f50 <___vfiprintf_internal_r+0x938>
    9ccc:	da802217 	ldw	r10,136(sp)
    9cd0:	d8001d85 	stb	zero,118(sp)
    9cd4:	50800204 	addi	r2,r10,8
    9cd8:	54800017 	ldw	r18,0(r10)
    9cdc:	54c00117 	ldw	r19,4(r10)
    9ce0:	4802b416 	blt	r9,zero,a7b4 <___vfiprintf_internal_r+0x119c>
    9ce4:	013fdfc4 	movi	r4,-129
    9ce8:	94c6b03a 	or	r3,r18,r19
    9cec:	d8802215 	stw	r2,136(sp)
    9cf0:	a128703a 	and	r20,r20,r4
    9cf4:	1800a226 	beq	r3,zero,9f80 <___vfiprintf_internal_r+0x968>
    9cf8:	0039883a 	mov	fp,zero
    9cfc:	dd401a04 	addi	r21,sp,104
    9d00:	9006d0fa 	srli	r3,r18,3
    9d04:	9808977a 	slli	r4,r19,29
    9d08:	9826d0fa 	srli	r19,r19,3
    9d0c:	948001cc 	andi	r18,r18,7
    9d10:	90800c04 	addi	r2,r18,48
    9d14:	ad7fffc4 	addi	r21,r21,-1
    9d18:	20e4b03a 	or	r18,r4,r3
    9d1c:	a8800005 	stb	r2,0(r21)
    9d20:	94c6b03a 	or	r3,r18,r19
    9d24:	183ff61e 	bne	r3,zero,9d00 <__alt_data_end+0xff009d00>
    9d28:	a0c0004c 	andi	r3,r20,1
    9d2c:	18005926 	beq	r3,zero,9e94 <___vfiprintf_internal_r+0x87c>
    9d30:	10803fcc 	andi	r2,r2,255
    9d34:	1080201c 	xori	r2,r2,128
    9d38:	10bfe004 	addi	r2,r2,-128
    9d3c:	00c00c04 	movi	r3,48
    9d40:	10c05426 	beq	r2,r3,9e94 <___vfiprintf_internal_r+0x87c>
    9d44:	da801e17 	ldw	r10,120(sp)
    9d48:	a8bfffc4 	addi	r2,r21,-1
    9d4c:	a8ffffc5 	stb	r3,-1(r21)
    9d50:	50a7c83a 	sub	r19,r10,r2
    9d54:	102b883a 	mov	r21,r2
    9d58:	003f2f06 	br	9a18 <__alt_data_end+0xff009a18>
    9d5c:	21003fcc 	andi	r4,r4,255
    9d60:	2003421e 	bne	r4,zero,aa6c <___vfiprintf_internal_r+0x1454>
    9d64:	00800074 	movhi	r2,1
    9d68:	10816004 	addi	r2,r2,1408
    9d6c:	d8802615 	stw	r2,152(sp)
    9d70:	a080080c 	andi	r2,r20,32
    9d74:	1000aa26 	beq	r2,zero,a020 <___vfiprintf_internal_r+0xa08>
    9d78:	da802217 	ldw	r10,136(sp)
    9d7c:	54800017 	ldw	r18,0(r10)
    9d80:	54c00117 	ldw	r19,4(r10)
    9d84:	52800204 	addi	r10,r10,8
    9d88:	da802215 	stw	r10,136(sp)
    9d8c:	a080004c 	andi	r2,r20,1
    9d90:	1001d226 	beq	r2,zero,a4dc <___vfiprintf_internal_r+0xec4>
    9d94:	94c4b03a 	or	r2,r18,r19
    9d98:	1002351e 	bne	r2,zero,a670 <___vfiprintf_internal_r+0x1058>
    9d9c:	d8001d85 	stb	zero,118(sp)
    9da0:	48022216 	blt	r9,zero,a62c <___vfiprintf_internal_r+0x1014>
    9da4:	00bfdfc4 	movi	r2,-129
    9da8:	a0a8703a 	and	r20,r20,r2
    9dac:	003f1506 	br	9a04 <__alt_data_end+0xff009a04>
    9db0:	da802217 	ldw	r10,136(sp)
    9db4:	04800044 	movi	r18,1
    9db8:	d8001d85 	stb	zero,118(sp)
    9dbc:	50800017 	ldw	r2,0(r10)
    9dc0:	52800104 	addi	r10,r10,4
    9dc4:	da802215 	stw	r10,136(sp)
    9dc8:	d8801005 	stb	r2,64(sp)
    9dcc:	9027883a 	mov	r19,r18
    9dd0:	dd401004 	addi	r21,sp,64
    9dd4:	0013883a 	mov	r9,zero
    9dd8:	003f1706 	br	9a38 <__alt_data_end+0xff009a38>
    9ddc:	21003fcc 	andi	r4,r4,255
    9de0:	2003201e 	bne	r4,zero,aa64 <___vfiprintf_internal_r+0x144c>
    9de4:	a080080c 	andi	r2,r20,32
    9de8:	10004b26 	beq	r2,zero,9f18 <___vfiprintf_internal_r+0x900>
    9dec:	da802217 	ldw	r10,136(sp)
    9df0:	50800117 	ldw	r2,4(r10)
    9df4:	54800017 	ldw	r18,0(r10)
    9df8:	52800204 	addi	r10,r10,8
    9dfc:	da802215 	stw	r10,136(sp)
    9e00:	1027883a 	mov	r19,r2
    9e04:	10022c16 	blt	r2,zero,a6b8 <___vfiprintf_internal_r+0x10a0>
    9e08:	df001d83 	ldbu	fp,118(sp)
    9e0c:	48007216 	blt	r9,zero,9fd8 <___vfiprintf_internal_r+0x9c0>
    9e10:	00ffdfc4 	movi	r3,-129
    9e14:	94c4b03a 	or	r2,r18,r19
    9e18:	a0e8703a 	and	r20,r20,r3
    9e1c:	1000cc26 	beq	r2,zero,a150 <___vfiprintf_internal_r+0xb38>
    9e20:	98021026 	beq	r19,zero,a664 <___vfiprintf_internal_r+0x104c>
    9e24:	dc402415 	stw	r17,144(sp)
    9e28:	dc002515 	stw	r16,148(sp)
    9e2c:	9823883a 	mov	r17,r19
    9e30:	9021883a 	mov	r16,r18
    9e34:	dd401a04 	addi	r21,sp,104
    9e38:	4825883a 	mov	r18,r9
    9e3c:	4027883a 	mov	r19,r8
    9e40:	8009883a 	mov	r4,r16
    9e44:	880b883a 	mov	r5,r17
    9e48:	01800284 	movi	r6,10
    9e4c:	000f883a 	mov	r7,zero
    9e50:	000b9f80 	call	b9f8 <__umoddi3>
    9e54:	10800c04 	addi	r2,r2,48
    9e58:	ad7fffc4 	addi	r21,r21,-1
    9e5c:	8009883a 	mov	r4,r16
    9e60:	880b883a 	mov	r5,r17
    9e64:	a8800005 	stb	r2,0(r21)
    9e68:	01800284 	movi	r6,10
    9e6c:	000f883a 	mov	r7,zero
    9e70:	000b4800 	call	b480 <__udivdi3>
    9e74:	1021883a 	mov	r16,r2
    9e78:	10c4b03a 	or	r2,r2,r3
    9e7c:	1823883a 	mov	r17,r3
    9e80:	103fef1e 	bne	r2,zero,9e40 <__alt_data_end+0xff009e40>
    9e84:	dc402417 	ldw	r17,144(sp)
    9e88:	dc002517 	ldw	r16,148(sp)
    9e8c:	9013883a 	mov	r9,r18
    9e90:	9811883a 	mov	r8,r19
    9e94:	da801e17 	ldw	r10,120(sp)
    9e98:	5567c83a 	sub	r19,r10,r21
    9e9c:	003ede06 	br	9a18 <__alt_data_end+0xff009a18>
    9ea0:	38803fcc 	andi	r2,r7,255
    9ea4:	1080201c 	xori	r2,r2,128
    9ea8:	10bfe004 	addi	r2,r2,-128
    9eac:	1002371e 	bne	r2,zero,a78c <___vfiprintf_internal_r+0x1174>
    9eb0:	01000044 	movi	r4,1
    9eb4:	01c00804 	movi	r7,32
    9eb8:	80c00007 	ldb	r3,0(r16)
    9ebc:	003e3506 	br	9794 <__alt_data_end+0xff009794>
    9ec0:	a5000054 	ori	r20,r20,1
    9ec4:	80c00007 	ldb	r3,0(r16)
    9ec8:	003e3206 	br	9794 <__alt_data_end+0xff009794>
    9ecc:	a5002014 	ori	r20,r20,128
    9ed0:	80c00007 	ldb	r3,0(r16)
    9ed4:	003e2f06 	br	9794 <__alt_data_end+0xff009794>
    9ed8:	8015883a 	mov	r10,r16
    9edc:	0023883a 	mov	r17,zero
    9ee0:	18bff404 	addi	r2,r3,-48
    9ee4:	50c00007 	ldb	r3,0(r10)
    9ee8:	8c4002a4 	muli	r17,r17,10
    9eec:	84000044 	addi	r16,r16,1
    9ef0:	8015883a 	mov	r10,r16
    9ef4:	1463883a 	add	r17,r2,r17
    9ef8:	18bff404 	addi	r2,r3,-48
    9efc:	30bff92e 	bgeu	r6,r2,9ee4 <__alt_data_end+0xff009ee4>
    9f00:	003e2506 	br	9798 <__alt_data_end+0xff009798>
    9f04:	21003fcc 	andi	r4,r4,255
    9f08:	2002d41e 	bne	r4,zero,aa5c <___vfiprintf_internal_r+0x1444>
    9f0c:	a5000414 	ori	r20,r20,16
    9f10:	a080080c 	andi	r2,r20,32
    9f14:	103fb51e 	bne	r2,zero,9dec <__alt_data_end+0xff009dec>
    9f18:	a080040c 	andi	r2,r20,16
    9f1c:	1001f826 	beq	r2,zero,a700 <___vfiprintf_internal_r+0x10e8>
    9f20:	da802217 	ldw	r10,136(sp)
    9f24:	54800017 	ldw	r18,0(r10)
    9f28:	52800104 	addi	r10,r10,4
    9f2c:	da802215 	stw	r10,136(sp)
    9f30:	9027d7fa 	srai	r19,r18,31
    9f34:	9805883a 	mov	r2,r19
    9f38:	003fb206 	br	9e04 <__alt_data_end+0xff009e04>
    9f3c:	21003fcc 	andi	r4,r4,255
    9f40:	2002c41e 	bne	r4,zero,aa54 <___vfiprintf_internal_r+0x143c>
    9f44:	a5000414 	ori	r20,r20,16
    9f48:	a080080c 	andi	r2,r20,32
    9f4c:	103f5f1e 	bne	r2,zero,9ccc <__alt_data_end+0xff009ccc>
    9f50:	a080040c 	andi	r2,r20,16
    9f54:	10020f26 	beq	r2,zero,a794 <___vfiprintf_internal_r+0x117c>
    9f58:	da802217 	ldw	r10,136(sp)
    9f5c:	d8001d85 	stb	zero,118(sp)
    9f60:	0027883a 	mov	r19,zero
    9f64:	50800104 	addi	r2,r10,4
    9f68:	54800017 	ldw	r18,0(r10)
    9f6c:	48021116 	blt	r9,zero,a7b4 <___vfiprintf_internal_r+0x119c>
    9f70:	00ffdfc4 	movi	r3,-129
    9f74:	d8802215 	stw	r2,136(sp)
    9f78:	a0e8703a 	and	r20,r20,r3
    9f7c:	903f5e1e 	bne	r18,zero,9cf8 <__alt_data_end+0xff009cf8>
    9f80:	0039883a 	mov	fp,zero
    9f84:	4802a626 	beq	r9,zero,aa20 <___vfiprintf_internal_r+0x1408>
    9f88:	0025883a 	mov	r18,zero
    9f8c:	0027883a 	mov	r19,zero
    9f90:	003f5a06 	br	9cfc <__alt_data_end+0xff009cfc>
    9f94:	21003fcc 	andi	r4,r4,255
    9f98:	20029f1e 	bne	r4,zero,aa18 <___vfiprintf_internal_r+0x1400>
    9f9c:	a5000414 	ori	r20,r20,16
    9fa0:	a080080c 	andi	r2,r20,32
    9fa4:	10005e1e 	bne	r2,zero,a120 <___vfiprintf_internal_r+0xb08>
    9fa8:	a080040c 	andi	r2,r20,16
    9fac:	1001a21e 	bne	r2,zero,a638 <___vfiprintf_internal_r+0x1020>
    9fb0:	a080100c 	andi	r2,r20,64
    9fb4:	d8001d85 	stb	zero,118(sp)
    9fb8:	da802217 	ldw	r10,136(sp)
    9fbc:	1002231e 	bne	r2,zero,a84c <___vfiprintf_internal_r+0x1234>
    9fc0:	50800104 	addi	r2,r10,4
    9fc4:	54800017 	ldw	r18,0(r10)
    9fc8:	0027883a 	mov	r19,zero
    9fcc:	4801a00e 	bge	r9,zero,a650 <___vfiprintf_internal_r+0x1038>
    9fd0:	d8802215 	stw	r2,136(sp)
    9fd4:	0039883a 	mov	fp,zero
    9fd8:	94c4b03a 	or	r2,r18,r19
    9fdc:	103f901e 	bne	r2,zero,9e20 <__alt_data_end+0xff009e20>
    9fe0:	00800044 	movi	r2,1
    9fe4:	10803fcc 	andi	r2,r2,255
    9fe8:	00c00044 	movi	r3,1
    9fec:	10c05926 	beq	r2,r3,a154 <___vfiprintf_internal_r+0xb3c>
    9ff0:	00c00084 	movi	r3,2
    9ff4:	10ffe41e 	bne	r2,r3,9f88 <__alt_data_end+0xff009f88>
    9ff8:	0025883a 	mov	r18,zero
    9ffc:	0027883a 	mov	r19,zero
    a000:	00013d06 	br	a4f8 <___vfiprintf_internal_r+0xee0>
    a004:	21003fcc 	andi	r4,r4,255
    a008:	2002811e 	bne	r4,zero,aa10 <___vfiprintf_internal_r+0x13f8>
    a00c:	00800074 	movhi	r2,1
    a010:	10815b04 	addi	r2,r2,1388
    a014:	d8802615 	stw	r2,152(sp)
    a018:	a080080c 	andi	r2,r20,32
    a01c:	103f561e 	bne	r2,zero,9d78 <__alt_data_end+0xff009d78>
    a020:	a080040c 	andi	r2,r20,16
    a024:	1001d126 	beq	r2,zero,a76c <___vfiprintf_internal_r+0x1154>
    a028:	da802217 	ldw	r10,136(sp)
    a02c:	0027883a 	mov	r19,zero
    a030:	54800017 	ldw	r18,0(r10)
    a034:	52800104 	addi	r10,r10,4
    a038:	da802215 	stw	r10,136(sp)
    a03c:	003f5306 	br	9d8c <__alt_data_end+0xff009d8c>
    a040:	da802217 	ldw	r10,136(sp)
    a044:	d8001d85 	stb	zero,118(sp)
    a048:	55400017 	ldw	r21,0(r10)
    a04c:	50c00104 	addi	r3,r10,4
    a050:	a8024226 	beq	r21,zero,a95c <___vfiprintf_internal_r+0x1344>
    a054:	48021816 	blt	r9,zero,a8b8 <___vfiprintf_internal_r+0x12a0>
    a058:	480d883a 	mov	r6,r9
    a05c:	000b883a 	mov	r5,zero
    a060:	a809883a 	mov	r4,r21
    a064:	d8c02a15 	stw	r3,168(sp)
    a068:	da002b15 	stw	r8,172(sp)
    a06c:	da402c15 	stw	r9,176(sp)
    a070:	00078680 	call	7868 <memchr>
    a074:	d8c02a17 	ldw	r3,168(sp)
    a078:	da002b17 	ldw	r8,172(sp)
    a07c:	da402c17 	ldw	r9,176(sp)
    a080:	10024826 	beq	r2,zero,a9a4 <___vfiprintf_internal_r+0x138c>
    a084:	1567c83a 	sub	r19,r2,r21
    a088:	df001d83 	ldbu	fp,118(sp)
    a08c:	d8c02215 	stw	r3,136(sp)
    a090:	0013883a 	mov	r9,zero
    a094:	003e6006 	br	9a18 <__alt_data_end+0xff009a18>
    a098:	21003fcc 	andi	r4,r4,255
    a09c:	203fc026 	beq	r4,zero,9fa0 <__alt_data_end+0xff009fa0>
    a0a0:	d9c01d85 	stb	r7,118(sp)
    a0a4:	003fbe06 	br	9fa0 <__alt_data_end+0xff009fa0>
    a0a8:	da802217 	ldw	r10,136(sp)
    a0ac:	54400017 	ldw	r17,0(r10)
    a0b0:	50800104 	addi	r2,r10,4
    a0b4:	883e3b16 	blt	r17,zero,99a4 <__alt_data_end+0xff0099a4>
    a0b8:	d8802215 	stw	r2,136(sp)
    a0bc:	80c00007 	ldb	r3,0(r16)
    a0c0:	003db406 	br	9794 <__alt_data_end+0xff009794>
    a0c4:	01000044 	movi	r4,1
    a0c8:	01c00ac4 	movi	r7,43
    a0cc:	80c00007 	ldb	r3,0(r16)
    a0d0:	003db006 	br	9794 <__alt_data_end+0xff009794>
    a0d4:	80c00007 	ldb	r3,0(r16)
    a0d8:	82800044 	addi	r10,r16,1
    a0dc:	1b423c26 	beq	r3,r13,a9d0 <___vfiprintf_internal_r+0x13b8>
    a0e0:	18bff404 	addi	r2,r3,-48
    a0e4:	0013883a 	mov	r9,zero
    a0e8:	30822b36 	bltu	r6,r2,a998 <___vfiprintf_internal_r+0x1380>
    a0ec:	50c00007 	ldb	r3,0(r10)
    a0f0:	4a4002a4 	muli	r9,r9,10
    a0f4:	54000044 	addi	r16,r10,1
    a0f8:	8015883a 	mov	r10,r16
    a0fc:	4893883a 	add	r9,r9,r2
    a100:	18bff404 	addi	r2,r3,-48
    a104:	30bff92e 	bgeu	r6,r2,a0ec <__alt_data_end+0xff00a0ec>
    a108:	483da30e 	bge	r9,zero,9798 <__alt_data_end+0xff009798>
    a10c:	027fffc4 	movi	r9,-1
    a110:	003da106 	br	9798 <__alt_data_end+0xff009798>
    a114:	a5001014 	ori	r20,r20,64
    a118:	80c00007 	ldb	r3,0(r16)
    a11c:	003d9d06 	br	9794 <__alt_data_end+0xff009794>
    a120:	da802217 	ldw	r10,136(sp)
    a124:	d8001d85 	stb	zero,118(sp)
    a128:	50c00204 	addi	r3,r10,8
    a12c:	54800017 	ldw	r18,0(r10)
    a130:	54c00117 	ldw	r19,4(r10)
    a134:	4801ca16 	blt	r9,zero,a860 <___vfiprintf_internal_r+0x1248>
    a138:	013fdfc4 	movi	r4,-129
    a13c:	94c4b03a 	or	r2,r18,r19
    a140:	d8c02215 	stw	r3,136(sp)
    a144:	a128703a 	and	r20,r20,r4
    a148:	0039883a 	mov	fp,zero
    a14c:	103f341e 	bne	r2,zero,9e20 <__alt_data_end+0xff009e20>
    a150:	483e2e26 	beq	r9,zero,9a0c <__alt_data_end+0xff009a0c>
    a154:	0025883a 	mov	r18,zero
    a158:	94800c04 	addi	r18,r18,48
    a15c:	dc8019c5 	stb	r18,103(sp)
    a160:	dcc02717 	ldw	r19,156(sp)
    a164:	dd4019c4 	addi	r21,sp,103
    a168:	003e2b06 	br	9a18 <__alt_data_end+0xff009a18>
    a16c:	21003fcc 	andi	r4,r4,255
    a170:	2002361e 	bne	r4,zero,aa4c <___vfiprintf_internal_r+0x1434>
    a174:	1801c126 	beq	r3,zero,a87c <___vfiprintf_internal_r+0x1264>
    a178:	04800044 	movi	r18,1
    a17c:	d8c01005 	stb	r3,64(sp)
    a180:	d8001d85 	stb	zero,118(sp)
    a184:	9027883a 	mov	r19,r18
    a188:	dd401004 	addi	r21,sp,64
    a18c:	003f1106 	br	9dd4 <__alt_data_end+0xff009dd4>
    a190:	d9402117 	ldw	r5,132(sp)
    a194:	d9002017 	ldw	r4,128(sp)
    a198:	d9801a04 	addi	r6,sp,104
    a19c:	d9c02b15 	stw	r7,172(sp)
    a1a0:	dbc02a15 	stw	r15,168(sp)
    a1a4:	00095040 	call	9504 <__sprint_r.part.0>
    a1a8:	d9c02b17 	ldw	r7,172(sp)
    a1ac:	dbc02a17 	ldw	r15,168(sp)
    a1b0:	10006d1e 	bne	r2,zero,a368 <___vfiprintf_internal_r+0xd50>
    a1b4:	d9801b17 	ldw	r6,108(sp)
    a1b8:	d8801c17 	ldw	r2,112(sp)
    a1bc:	d811883a 	mov	r8,sp
    a1c0:	31400044 	addi	r5,r6,1
    a1c4:	003e3306 	br	9a94 <__alt_data_end+0xff009a94>
    a1c8:	d9401b17 	ldw	r5,108(sp)
    a1cc:	d8801c17 	ldw	r2,112(sp)
    a1d0:	29000044 	addi	r4,r5,1
    a1d4:	d8c01d87 	ldb	r3,118(sp)
    a1d8:	183e4d26 	beq	r3,zero,9b10 <__alt_data_end+0xff009b10>
    a1dc:	00c00044 	movi	r3,1
    a1e0:	d9401d84 	addi	r5,sp,118
    a1e4:	10c5883a 	add	r2,r2,r3
    a1e8:	41400015 	stw	r5,0(r8)
    a1ec:	40c00115 	stw	r3,4(r8)
    a1f0:	d8801c15 	stw	r2,112(sp)
    a1f4:	d9001b15 	stw	r4,108(sp)
    a1f8:	014001c4 	movi	r5,7
    a1fc:	2900a90e 	bge	r5,r4,a4a4 <___vfiprintf_internal_r+0xe8c>
    a200:	1000da1e 	bne	r2,zero,a56c <___vfiprintf_internal_r+0xf54>
    a204:	7000ab1e 	bne	r14,zero,a4b4 <___vfiprintf_internal_r+0xe9c>
    a208:	000b883a 	mov	r5,zero
    a20c:	1809883a 	mov	r4,r3
    a210:	d811883a 	mov	r8,sp
    a214:	00c02004 	movi	r3,128
    a218:	e0fe4d26 	beq	fp,r3,9b50 <__alt_data_end+0xff009b50>
    a21c:	4cf9c83a 	sub	fp,r9,r19
    a220:	073e7b0e 	bge	zero,fp,9c10 <__alt_data_end+0xff009c10>
    a224:	01c00404 	movi	r7,16
    a228:	3f01900e 	bge	r7,fp,a86c <___vfiprintf_internal_r+0x1254>
    a22c:	00c00074 	movhi	r3,1
    a230:	18c1c104 	addi	r3,r3,1796
    a234:	d8c02415 	stw	r3,144(sp)
    a238:	034001c4 	movi	r13,7
    a23c:	00000506 	br	a254 <___vfiprintf_internal_r+0xc3c>
    a240:	29000084 	addi	r4,r5,2
    a244:	42000204 	addi	r8,r8,8
    a248:	180b883a 	mov	r5,r3
    a24c:	e73ffc04 	addi	fp,fp,-16
    a250:	3f000d0e 	bge	r7,fp,a288 <___vfiprintf_internal_r+0xc70>
    a254:	10800404 	addi	r2,r2,16
    a258:	28c00044 	addi	r3,r5,1
    a25c:	45c00015 	stw	r23,0(r8)
    a260:	41c00115 	stw	r7,4(r8)
    a264:	d8801c15 	stw	r2,112(sp)
    a268:	d8c01b15 	stw	r3,108(sp)
    a26c:	68fff40e 	bge	r13,r3,a240 <__alt_data_end+0xff00a240>
    a270:	1000101e 	bne	r2,zero,a2b4 <___vfiprintf_internal_r+0xc9c>
    a274:	e73ffc04 	addi	fp,fp,-16
    a278:	01000044 	movi	r4,1
    a27c:	000b883a 	mov	r5,zero
    a280:	d811883a 	mov	r8,sp
    a284:	3f3ff316 	blt	r7,fp,a254 <__alt_data_end+0xff00a254>
    a288:	da802417 	ldw	r10,144(sp)
    a28c:	1705883a 	add	r2,r2,fp
    a290:	47000115 	stw	fp,4(r8)
    a294:	42800015 	stw	r10,0(r8)
    a298:	d8801c15 	stw	r2,112(sp)
    a29c:	d9001b15 	stw	r4,108(sp)
    a2a0:	00c001c4 	movi	r3,7
    a2a4:	19003616 	blt	r3,r4,a380 <___vfiprintf_internal_r+0xd68>
    a2a8:	42000204 	addi	r8,r8,8
    a2ac:	21000044 	addi	r4,r4,1
    a2b0:	003e5706 	br	9c10 <__alt_data_end+0xff009c10>
    a2b4:	d9402117 	ldw	r5,132(sp)
    a2b8:	d9002017 	ldw	r4,128(sp)
    a2bc:	d9801a04 	addi	r6,sp,104
    a2c0:	d9c02b15 	stw	r7,172(sp)
    a2c4:	db402a15 	stw	r13,168(sp)
    a2c8:	00095040 	call	9504 <__sprint_r.part.0>
    a2cc:	d9c02b17 	ldw	r7,172(sp)
    a2d0:	db402a17 	ldw	r13,168(sp)
    a2d4:	1000241e 	bne	r2,zero,a368 <___vfiprintf_internal_r+0xd50>
    a2d8:	d9401b17 	ldw	r5,108(sp)
    a2dc:	d8801c17 	ldw	r2,112(sp)
    a2e0:	d811883a 	mov	r8,sp
    a2e4:	29000044 	addi	r4,r5,1
    a2e8:	003fd806 	br	a24c <__alt_data_end+0xff00a24c>
    a2ec:	d9401b17 	ldw	r5,108(sp)
    a2f0:	00c00074 	movhi	r3,1
    a2f4:	18c1c504 	addi	r3,r3,1812
    a2f8:	d8c02415 	stw	r3,144(sp)
    a2fc:	29400044 	addi	r5,r5,1
    a300:	d8c02417 	ldw	r3,144(sp)
    a304:	14c5883a 	add	r2,r2,r19
    a308:	44c00115 	stw	r19,4(r8)
    a30c:	40c00015 	stw	r3,0(r8)
    a310:	d8801c15 	stw	r2,112(sp)
    a314:	d9401b15 	stw	r5,108(sp)
    a318:	00c001c4 	movi	r3,7
    a31c:	1940070e 	bge	r3,r5,a33c <___vfiprintf_internal_r+0xd24>
    a320:	103e4826 	beq	r2,zero,9c44 <__alt_data_end+0xff009c44>
    a324:	d9402117 	ldw	r5,132(sp)
    a328:	d9002017 	ldw	r4,128(sp)
    a32c:	d9801a04 	addi	r6,sp,104
    a330:	00095040 	call	9504 <__sprint_r.part.0>
    a334:	10000c1e 	bne	r2,zero,a368 <___vfiprintf_internal_r+0xd50>
    a338:	d8801c17 	ldw	r2,112(sp)
    a33c:	8c80010e 	bge	r17,r18,a344 <___vfiprintf_internal_r+0xd2c>
    a340:	9023883a 	mov	r17,r18
    a344:	da802317 	ldw	r10,140(sp)
    a348:	5455883a 	add	r10,r10,r17
    a34c:	da802315 	stw	r10,140(sp)
    a350:	103e4126 	beq	r2,zero,9c58 <__alt_data_end+0xff009c58>
    a354:	d9402117 	ldw	r5,132(sp)
    a358:	d9002017 	ldw	r4,128(sp)
    a35c:	d9801a04 	addi	r6,sp,104
    a360:	00095040 	call	9504 <__sprint_r.part.0>
    a364:	103e3c26 	beq	r2,zero,9c58 <__alt_data_end+0xff009c58>
    a368:	dd002117 	ldw	r20,132(sp)
    a36c:	a080030b 	ldhu	r2,12(r20)
    a370:	1080100c 	andi	r2,r2,64
    a374:	1001231e 	bne	r2,zero,a804 <___vfiprintf_internal_r+0x11ec>
    a378:	d8802317 	ldw	r2,140(sp)
    a37c:	003d7b06 	br	996c <__alt_data_end+0xff00996c>
    a380:	1000991e 	bne	r2,zero,a5e8 <___vfiprintf_internal_r+0xfd0>
    a384:	00c00044 	movi	r3,1
    a388:	9805883a 	mov	r2,r19
    a38c:	dd400015 	stw	r21,0(sp)
    a390:	dcc00115 	stw	r19,4(sp)
    a394:	dcc01c15 	stw	r19,112(sp)
    a398:	d8c01b15 	stw	r3,108(sp)
    a39c:	d811883a 	mov	r8,sp
    a3a0:	42000204 	addi	r8,r8,8
    a3a4:	a2c0010c 	andi	r11,r20,4
    a3a8:	583fe426 	beq	r11,zero,a33c <__alt_data_end+0xff00a33c>
    a3ac:	8ca7c83a 	sub	r19,r17,r18
    a3b0:	04ffe20e 	bge	zero,r19,a33c <__alt_data_end+0xff00a33c>
    a3b4:	01c00404 	movi	r7,16
    a3b8:	3cffcc0e 	bge	r7,r19,a2ec <__alt_data_end+0xff00a2ec>
    a3bc:	02800074 	movhi	r10,1
    a3c0:	5281c504 	addi	r10,r10,1812
    a3c4:	d9001b17 	ldw	r4,108(sp)
    a3c8:	da802415 	stw	r10,144(sp)
    a3cc:	382b883a 	mov	r21,r7
    a3d0:	050001c4 	movi	r20,7
    a3d4:	df002017 	ldw	fp,128(sp)
    a3d8:	00000506 	br	a3f0 <___vfiprintf_internal_r+0xdd8>
    a3dc:	21400084 	addi	r5,r4,2
    a3e0:	42000204 	addi	r8,r8,8
    a3e4:	1809883a 	mov	r4,r3
    a3e8:	9cfffc04 	addi	r19,r19,-16
    a3ec:	acffc40e 	bge	r21,r19,a300 <__alt_data_end+0xff00a300>
    a3f0:	10800404 	addi	r2,r2,16
    a3f4:	20c00044 	addi	r3,r4,1
    a3f8:	45800015 	stw	r22,0(r8)
    a3fc:	45400115 	stw	r21,4(r8)
    a400:	d8801c15 	stw	r2,112(sp)
    a404:	d8c01b15 	stw	r3,108(sp)
    a408:	a0fff40e 	bge	r20,r3,a3dc <__alt_data_end+0xff00a3dc>
    a40c:	1000041e 	bne	r2,zero,a420 <___vfiprintf_internal_r+0xe08>
    a410:	01400044 	movi	r5,1
    a414:	0009883a 	mov	r4,zero
    a418:	d811883a 	mov	r8,sp
    a41c:	003ff206 	br	a3e8 <__alt_data_end+0xff00a3e8>
    a420:	d9402117 	ldw	r5,132(sp)
    a424:	d9801a04 	addi	r6,sp,104
    a428:	e009883a 	mov	r4,fp
    a42c:	00095040 	call	9504 <__sprint_r.part.0>
    a430:	103fcd1e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a434:	d9001b17 	ldw	r4,108(sp)
    a438:	d8801c17 	ldw	r2,112(sp)
    a43c:	d811883a 	mov	r8,sp
    a440:	21400044 	addi	r5,r4,1
    a444:	003fe806 	br	a3e8 <__alt_data_end+0xff00a3e8>
    a448:	d9402117 	ldw	r5,132(sp)
    a44c:	d9002017 	ldw	r4,128(sp)
    a450:	d9801a04 	addi	r6,sp,104
    a454:	d9c02b15 	stw	r7,172(sp)
    a458:	db402a15 	stw	r13,168(sp)
    a45c:	00095040 	call	9504 <__sprint_r.part.0>
    a460:	d9c02b17 	ldw	r7,172(sp)
    a464:	db402a17 	ldw	r13,168(sp)
    a468:	103fbf1e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a46c:	d9401b17 	ldw	r5,108(sp)
    a470:	d8801c17 	ldw	r2,112(sp)
    a474:	d811883a 	mov	r8,sp
    a478:	29800044 	addi	r6,r5,1
    a47c:	003dc406 	br	9b90 <__alt_data_end+0xff009b90>
    a480:	1000d21e 	bne	r2,zero,a7cc <___vfiprintf_internal_r+0x11b4>
    a484:	d8c01d87 	ldb	r3,118(sp)
    a488:	18009526 	beq	r3,zero,a6e0 <___vfiprintf_internal_r+0x10c8>
    a48c:	00800044 	movi	r2,1
    a490:	d8c01d84 	addi	r3,sp,118
    a494:	1009883a 	mov	r4,r2
    a498:	d8c00015 	stw	r3,0(sp)
    a49c:	d8800115 	stw	r2,4(sp)
    a4a0:	d811883a 	mov	r8,sp
    a4a4:	200b883a 	mov	r5,r4
    a4a8:	42000204 	addi	r8,r8,8
    a4ac:	21000044 	addi	r4,r4,1
    a4b0:	003d9706 	br	9b10 <__alt_data_end+0xff009b10>
    a4b4:	d9001d04 	addi	r4,sp,116
    a4b8:	00800084 	movi	r2,2
    a4bc:	d9000015 	stw	r4,0(sp)
    a4c0:	d8800115 	stw	r2,4(sp)
    a4c4:	1809883a 	mov	r4,r3
    a4c8:	d811883a 	mov	r8,sp
    a4cc:	200b883a 	mov	r5,r4
    a4d0:	42000204 	addi	r8,r8,8
    a4d4:	21000044 	addi	r4,r4,1
    a4d8:	003f4e06 	br	a214 <__alt_data_end+0xff00a214>
    a4dc:	d8001d85 	stb	zero,118(sp)
    a4e0:	48005016 	blt	r9,zero,a624 <___vfiprintf_internal_r+0x100c>
    a4e4:	00ffdfc4 	movi	r3,-129
    a4e8:	94c4b03a 	or	r2,r18,r19
    a4ec:	a0e8703a 	and	r20,r20,r3
    a4f0:	103d4426 	beq	r2,zero,9a04 <__alt_data_end+0xff009a04>
    a4f4:	0039883a 	mov	fp,zero
    a4f8:	d9002617 	ldw	r4,152(sp)
    a4fc:	dd401a04 	addi	r21,sp,104
    a500:	908003cc 	andi	r2,r18,15
    a504:	9806973a 	slli	r3,r19,28
    a508:	2085883a 	add	r2,r4,r2
    a50c:	9024d13a 	srli	r18,r18,4
    a510:	10800003 	ldbu	r2,0(r2)
    a514:	9826d13a 	srli	r19,r19,4
    a518:	ad7fffc4 	addi	r21,r21,-1
    a51c:	1ca4b03a 	or	r18,r3,r18
    a520:	a8800005 	stb	r2,0(r21)
    a524:	94c4b03a 	or	r2,r18,r19
    a528:	103ff51e 	bne	r2,zero,a500 <__alt_data_end+0xff00a500>
    a52c:	003e5906 	br	9e94 <__alt_data_end+0xff009e94>
    a530:	d9402117 	ldw	r5,132(sp)
    a534:	d9002017 	ldw	r4,128(sp)
    a538:	d9801a04 	addi	r6,sp,104
    a53c:	00095040 	call	9504 <__sprint_r.part.0>
    a540:	103f891e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a544:	d8801c17 	ldw	r2,112(sp)
    a548:	d811883a 	mov	r8,sp
    a54c:	003f9506 	br	a3a4 <__alt_data_end+0xff00a3a4>
    a550:	d9402117 	ldw	r5,132(sp)
    a554:	d9002017 	ldw	r4,128(sp)
    a558:	d9801a04 	addi	r6,sp,104
    a55c:	00095040 	call	9504 <__sprint_r.part.0>
    a560:	103f811e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a564:	d811883a 	mov	r8,sp
    a568:	003ced06 	br	9920 <__alt_data_end+0xff009920>
    a56c:	d9402117 	ldw	r5,132(sp)
    a570:	d9002017 	ldw	r4,128(sp)
    a574:	d9801a04 	addi	r6,sp,104
    a578:	da402c15 	stw	r9,176(sp)
    a57c:	db802a15 	stw	r14,168(sp)
    a580:	00095040 	call	9504 <__sprint_r.part.0>
    a584:	da402c17 	ldw	r9,176(sp)
    a588:	db802a17 	ldw	r14,168(sp)
    a58c:	103f761e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a590:	d9401b17 	ldw	r5,108(sp)
    a594:	d8801c17 	ldw	r2,112(sp)
    a598:	d811883a 	mov	r8,sp
    a59c:	29000044 	addi	r4,r5,1
    a5a0:	003d5b06 	br	9b10 <__alt_data_end+0xff009b10>
    a5a4:	d9402117 	ldw	r5,132(sp)
    a5a8:	d9002017 	ldw	r4,128(sp)
    a5ac:	d9801a04 	addi	r6,sp,104
    a5b0:	da402c15 	stw	r9,176(sp)
    a5b4:	00095040 	call	9504 <__sprint_r.part.0>
    a5b8:	da402c17 	ldw	r9,176(sp)
    a5bc:	103f6a1e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a5c0:	d9401b17 	ldw	r5,108(sp)
    a5c4:	d8801c17 	ldw	r2,112(sp)
    a5c8:	d811883a 	mov	r8,sp
    a5cc:	29000044 	addi	r4,r5,1
    a5d0:	003f1006 	br	a214 <__alt_data_end+0xff00a214>
    a5d4:	1000c31e 	bne	r2,zero,a8e4 <___vfiprintf_internal_r+0x12cc>
    a5d8:	01000044 	movi	r4,1
    a5dc:	000b883a 	mov	r5,zero
    a5e0:	d811883a 	mov	r8,sp
    a5e4:	003f0d06 	br	a21c <__alt_data_end+0xff00a21c>
    a5e8:	d9402117 	ldw	r5,132(sp)
    a5ec:	d9002017 	ldw	r4,128(sp)
    a5f0:	d9801a04 	addi	r6,sp,104
    a5f4:	00095040 	call	9504 <__sprint_r.part.0>
    a5f8:	103f5b1e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a5fc:	d9001b17 	ldw	r4,108(sp)
    a600:	d8801c17 	ldw	r2,112(sp)
    a604:	d811883a 	mov	r8,sp
    a608:	21000044 	addi	r4,r4,1
    a60c:	003d8006 	br	9c10 <__alt_data_end+0xff009c10>
    a610:	01000074 	movhi	r4,1
    a614:	21016004 	addi	r4,r4,1408
    a618:	d9002615 	stw	r4,152(sp)
    a61c:	d8c02215 	stw	r3,136(sp)
    a620:	1029883a 	mov	r20,r2
    a624:	94c4b03a 	or	r2,r18,r19
    a628:	103fb21e 	bne	r2,zero,a4f4 <__alt_data_end+0xff00a4f4>
    a62c:	0039883a 	mov	fp,zero
    a630:	00800084 	movi	r2,2
    a634:	003e6b06 	br	9fe4 <__alt_data_end+0xff009fe4>
    a638:	da802217 	ldw	r10,136(sp)
    a63c:	d8001d85 	stb	zero,118(sp)
    a640:	0027883a 	mov	r19,zero
    a644:	50800104 	addi	r2,r10,4
    a648:	54800017 	ldw	r18,0(r10)
    a64c:	483e6016 	blt	r9,zero,9fd0 <__alt_data_end+0xff009fd0>
    a650:	00ffdfc4 	movi	r3,-129
    a654:	d8802215 	stw	r2,136(sp)
    a658:	a0e8703a 	and	r20,r20,r3
    a65c:	0039883a 	mov	fp,zero
    a660:	903ebb26 	beq	r18,zero,a150 <__alt_data_end+0xff00a150>
    a664:	00800244 	movi	r2,9
    a668:	14bdee36 	bltu	r2,r18,9e24 <__alt_data_end+0xff009e24>
    a66c:	003eba06 	br	a158 <__alt_data_end+0xff00a158>
    a670:	00800c04 	movi	r2,48
    a674:	d8c01d45 	stb	r3,117(sp)
    a678:	d8801d05 	stb	r2,116(sp)
    a67c:	d8001d85 	stb	zero,118(sp)
    a680:	a0c00094 	ori	r3,r20,2
    a684:	4800a916 	blt	r9,zero,a92c <___vfiprintf_internal_r+0x1314>
    a688:	00bfdfc4 	movi	r2,-129
    a68c:	a096703a 	and	r11,r20,r2
    a690:	5d000094 	ori	r20,r11,2
    a694:	0039883a 	mov	fp,zero
    a698:	003f9706 	br	a4f8 <__alt_data_end+0xff00a4f8>
    a69c:	8025883a 	mov	r18,r16
    a6a0:	003c2e06 	br	975c <__alt_data_end+0xff00975c>
    a6a4:	00800074 	movhi	r2,1
    a6a8:	10816004 	addi	r2,r2,1408
    a6ac:	0039883a 	mov	fp,zero
    a6b0:	d8802615 	stw	r2,152(sp)
    a6b4:	003f9006 	br	a4f8 <__alt_data_end+0xff00a4f8>
    a6b8:	04a5c83a 	sub	r18,zero,r18
    a6bc:	07000b44 	movi	fp,45
    a6c0:	9004c03a 	cmpne	r2,r18,zero
    a6c4:	04e7c83a 	sub	r19,zero,r19
    a6c8:	df001d85 	stb	fp,118(sp)
    a6cc:	98a7c83a 	sub	r19,r19,r2
    a6d0:	48009f16 	blt	r9,zero,a950 <___vfiprintf_internal_r+0x1338>
    a6d4:	00bfdfc4 	movi	r2,-129
    a6d8:	a0a8703a 	and	r20,r20,r2
    a6dc:	003dd006 	br	9e20 <__alt_data_end+0xff009e20>
    a6e0:	70004c26 	beq	r14,zero,a814 <___vfiprintf_internal_r+0x11fc>
    a6e4:	00800084 	movi	r2,2
    a6e8:	d8c01d04 	addi	r3,sp,116
    a6ec:	d8c00015 	stw	r3,0(sp)
    a6f0:	d8800115 	stw	r2,4(sp)
    a6f4:	01000044 	movi	r4,1
    a6f8:	d811883a 	mov	r8,sp
    a6fc:	003f7306 	br	a4cc <__alt_data_end+0xff00a4cc>
    a700:	a080100c 	andi	r2,r20,64
    a704:	da802217 	ldw	r10,136(sp)
    a708:	103e0626 	beq	r2,zero,9f24 <__alt_data_end+0xff009f24>
    a70c:	5480000f 	ldh	r18,0(r10)
    a710:	52800104 	addi	r10,r10,4
    a714:	da802215 	stw	r10,136(sp)
    a718:	9027d7fa 	srai	r19,r18,31
    a71c:	9805883a 	mov	r2,r19
    a720:	003db806 	br	9e04 <__alt_data_end+0xff009e04>
    a724:	a080040c 	andi	r2,r20,16
    a728:	1000091e 	bne	r2,zero,a750 <___vfiprintf_internal_r+0x1138>
    a72c:	a2c0100c 	andi	r11,r20,64
    a730:	58000726 	beq	r11,zero,a750 <___vfiprintf_internal_r+0x1138>
    a734:	da802217 	ldw	r10,136(sp)
    a738:	50800017 	ldw	r2,0(r10)
    a73c:	52800104 	addi	r10,r10,4
    a740:	da802215 	stw	r10,136(sp)
    a744:	da802317 	ldw	r10,140(sp)
    a748:	1280000d 	sth	r10,0(r2)
    a74c:	003be706 	br	96ec <__alt_data_end+0xff0096ec>
    a750:	da802217 	ldw	r10,136(sp)
    a754:	50800017 	ldw	r2,0(r10)
    a758:	52800104 	addi	r10,r10,4
    a75c:	da802215 	stw	r10,136(sp)
    a760:	da802317 	ldw	r10,140(sp)
    a764:	12800015 	stw	r10,0(r2)
    a768:	003be006 	br	96ec <__alt_data_end+0xff0096ec>
    a76c:	a080100c 	andi	r2,r20,64
    a770:	da802217 	ldw	r10,136(sp)
    a774:	10003026 	beq	r2,zero,a838 <___vfiprintf_internal_r+0x1220>
    a778:	5480000b 	ldhu	r18,0(r10)
    a77c:	52800104 	addi	r10,r10,4
    a780:	0027883a 	mov	r19,zero
    a784:	da802215 	stw	r10,136(sp)
    a788:	003d8006 	br	9d8c <__alt_data_end+0xff009d8c>
    a78c:	80c00007 	ldb	r3,0(r16)
    a790:	003c0006 	br	9794 <__alt_data_end+0xff009794>
    a794:	a080100c 	andi	r2,r20,64
    a798:	d8001d85 	stb	zero,118(sp)
    a79c:	da802217 	ldw	r10,136(sp)
    a7a0:	1000201e 	bne	r2,zero,a824 <___vfiprintf_internal_r+0x120c>
    a7a4:	50800104 	addi	r2,r10,4
    a7a8:	54800017 	ldw	r18,0(r10)
    a7ac:	0027883a 	mov	r19,zero
    a7b0:	483def0e 	bge	r9,zero,9f70 <__alt_data_end+0xff009f70>
    a7b4:	94c6b03a 	or	r3,r18,r19
    a7b8:	d8802215 	stw	r2,136(sp)
    a7bc:	183d4e1e 	bne	r3,zero,9cf8 <__alt_data_end+0xff009cf8>
    a7c0:	0039883a 	mov	fp,zero
    a7c4:	0005883a 	mov	r2,zero
    a7c8:	003e0606 	br	9fe4 <__alt_data_end+0xff009fe4>
    a7cc:	d9402117 	ldw	r5,132(sp)
    a7d0:	d9002017 	ldw	r4,128(sp)
    a7d4:	d9801a04 	addi	r6,sp,104
    a7d8:	da402c15 	stw	r9,176(sp)
    a7dc:	db802a15 	stw	r14,168(sp)
    a7e0:	00095040 	call	9504 <__sprint_r.part.0>
    a7e4:	da402c17 	ldw	r9,176(sp)
    a7e8:	db802a17 	ldw	r14,168(sp)
    a7ec:	103ede1e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a7f0:	d9401b17 	ldw	r5,108(sp)
    a7f4:	d8801c17 	ldw	r2,112(sp)
    a7f8:	d811883a 	mov	r8,sp
    a7fc:	29000044 	addi	r4,r5,1
    a800:	003e7406 	br	a1d4 <__alt_data_end+0xff00a1d4>
    a804:	00bfffc4 	movi	r2,-1
    a808:	003c5806 	br	996c <__alt_data_end+0xff00996c>
    a80c:	d811883a 	mov	r8,sp
    a810:	003ee806 	br	a3b4 <__alt_data_end+0xff00a3b4>
    a814:	000b883a 	mov	r5,zero
    a818:	01000044 	movi	r4,1
    a81c:	d811883a 	mov	r8,sp
    a820:	003e7c06 	br	a214 <__alt_data_end+0xff00a214>
    a824:	50800104 	addi	r2,r10,4
    a828:	5480000b 	ldhu	r18,0(r10)
    a82c:	0027883a 	mov	r19,zero
    a830:	483dcf0e 	bge	r9,zero,9f70 <__alt_data_end+0xff009f70>
    a834:	003fdf06 	br	a7b4 <__alt_data_end+0xff00a7b4>
    a838:	54800017 	ldw	r18,0(r10)
    a83c:	52800104 	addi	r10,r10,4
    a840:	0027883a 	mov	r19,zero
    a844:	da802215 	stw	r10,136(sp)
    a848:	003d5006 	br	9d8c <__alt_data_end+0xff009d8c>
    a84c:	50800104 	addi	r2,r10,4
    a850:	5480000b 	ldhu	r18,0(r10)
    a854:	0027883a 	mov	r19,zero
    a858:	483f7d0e 	bge	r9,zero,a650 <__alt_data_end+0xff00a650>
    a85c:	003ddc06 	br	9fd0 <__alt_data_end+0xff009fd0>
    a860:	d8c02215 	stw	r3,136(sp)
    a864:	0039883a 	mov	fp,zero
    a868:	003ddb06 	br	9fd8 <__alt_data_end+0xff009fd8>
    a86c:	02800074 	movhi	r10,1
    a870:	5281c104 	addi	r10,r10,1796
    a874:	da802415 	stw	r10,144(sp)
    a878:	003e8306 	br	a288 <__alt_data_end+0xff00a288>
    a87c:	d8801c17 	ldw	r2,112(sp)
    a880:	dd002117 	ldw	r20,132(sp)
    a884:	103eb926 	beq	r2,zero,a36c <__alt_data_end+0xff00a36c>
    a888:	d9002017 	ldw	r4,128(sp)
    a88c:	d9801a04 	addi	r6,sp,104
    a890:	a00b883a 	mov	r5,r20
    a894:	00095040 	call	9504 <__sprint_r.part.0>
    a898:	003eb406 	br	a36c <__alt_data_end+0xff00a36c>
    a89c:	80c00043 	ldbu	r3,1(r16)
    a8a0:	a5000814 	ori	r20,r20,32
    a8a4:	84000044 	addi	r16,r16,1
    a8a8:	18c03fcc 	andi	r3,r3,255
    a8ac:	18c0201c 	xori	r3,r3,128
    a8b0:	18ffe004 	addi	r3,r3,-128
    a8b4:	003bb706 	br	9794 <__alt_data_end+0xff009794>
    a8b8:	a809883a 	mov	r4,r21
    a8bc:	d8c02a15 	stw	r3,168(sp)
    a8c0:	da002b15 	stw	r8,172(sp)
    a8c4:	00027cc0 	call	27cc <strlen>
    a8c8:	d8c02a17 	ldw	r3,168(sp)
    a8cc:	1027883a 	mov	r19,r2
    a8d0:	df001d83 	ldbu	fp,118(sp)
    a8d4:	d8c02215 	stw	r3,136(sp)
    a8d8:	0013883a 	mov	r9,zero
    a8dc:	da002b17 	ldw	r8,172(sp)
    a8e0:	003c4d06 	br	9a18 <__alt_data_end+0xff009a18>
    a8e4:	d9402117 	ldw	r5,132(sp)
    a8e8:	d9002017 	ldw	r4,128(sp)
    a8ec:	d9801a04 	addi	r6,sp,104
    a8f0:	da402c15 	stw	r9,176(sp)
    a8f4:	00095040 	call	9504 <__sprint_r.part.0>
    a8f8:	da402c17 	ldw	r9,176(sp)
    a8fc:	103e9a1e 	bne	r2,zero,a368 <__alt_data_end+0xff00a368>
    a900:	d9401b17 	ldw	r5,108(sp)
    a904:	d8801c17 	ldw	r2,112(sp)
    a908:	d811883a 	mov	r8,sp
    a90c:	29000044 	addi	r4,r5,1
    a910:	003e4206 	br	a21c <__alt_data_end+0xff00a21c>
    a914:	d9401b17 	ldw	r5,108(sp)
    a918:	01000074 	movhi	r4,1
    a91c:	2101c504 	addi	r4,r4,1812
    a920:	d9002415 	stw	r4,144(sp)
    a924:	29400044 	addi	r5,r5,1
    a928:	003c6d06 	br	9ae0 <__alt_data_end+0xff009ae0>
    a92c:	0039883a 	mov	fp,zero
    a930:	00800084 	movi	r2,2
    a934:	10803fcc 	andi	r2,r2,255
    a938:	01000044 	movi	r4,1
    a93c:	11001e26 	beq	r2,r4,a9b8 <___vfiprintf_internal_r+0x13a0>
    a940:	01000084 	movi	r4,2
    a944:	11001e1e 	bne	r2,r4,a9c0 <___vfiprintf_internal_r+0x13a8>
    a948:	1829883a 	mov	r20,r3
    a94c:	003eea06 	br	a4f8 <__alt_data_end+0xff00a4f8>
    a950:	a007883a 	mov	r3,r20
    a954:	00800044 	movi	r2,1
    a958:	003ff606 	br	a934 <__alt_data_end+0xff00a934>
    a95c:	00800184 	movi	r2,6
    a960:	1240012e 	bgeu	r2,r9,a968 <___vfiprintf_internal_r+0x1350>
    a964:	1013883a 	mov	r9,r2
    a968:	4827883a 	mov	r19,r9
    a96c:	4825883a 	mov	r18,r9
    a970:	48001516 	blt	r9,zero,a9c8 <___vfiprintf_internal_r+0x13b0>
    a974:	05400074 	movhi	r21,1
    a978:	d8c02215 	stw	r3,136(sp)
    a97c:	ad416504 	addi	r21,r21,1428
    a980:	003d1406 	br	9dd4 <__alt_data_end+0xff009dd4>
    a984:	02800074 	movhi	r10,1
    a988:	5281c104 	addi	r10,r10,1796
    a98c:	da802415 	stw	r10,144(sp)
    a990:	200d883a 	mov	r6,r4
    a994:	003c9106 	br	9bdc <__alt_data_end+0xff009bdc>
    a998:	5021883a 	mov	r16,r10
    a99c:	0013883a 	mov	r9,zero
    a9a0:	003b7d06 	br	9798 <__alt_data_end+0xff009798>
    a9a4:	4827883a 	mov	r19,r9
    a9a8:	df001d83 	ldbu	fp,118(sp)
    a9ac:	d8c02215 	stw	r3,136(sp)
    a9b0:	0013883a 	mov	r9,zero
    a9b4:	003c1806 	br	9a18 <__alt_data_end+0xff009a18>
    a9b8:	1829883a 	mov	r20,r3
    a9bc:	003d1806 	br	9e20 <__alt_data_end+0xff009e20>
    a9c0:	1829883a 	mov	r20,r3
    a9c4:	003ccd06 	br	9cfc <__alt_data_end+0xff009cfc>
    a9c8:	0025883a 	mov	r18,zero
    a9cc:	003fe906 	br	a974 <__alt_data_end+0xff00a974>
    a9d0:	d8802217 	ldw	r2,136(sp)
    a9d4:	80c00043 	ldbu	r3,1(r16)
    a9d8:	5021883a 	mov	r16,r10
    a9dc:	12400017 	ldw	r9,0(r2)
    a9e0:	10800104 	addi	r2,r2,4
    a9e4:	d8802215 	stw	r2,136(sp)
    a9e8:	483faf0e 	bge	r9,zero,a8a8 <__alt_data_end+0xff00a8a8>
    a9ec:	18c03fcc 	andi	r3,r3,255
    a9f0:	18c0201c 	xori	r3,r3,128
    a9f4:	027fffc4 	movi	r9,-1
    a9f8:	18ffe004 	addi	r3,r3,-128
    a9fc:	003b6506 	br	9794 <__alt_data_end+0xff009794>
    aa00:	d9c01d85 	stb	r7,118(sp)
    aa04:	003ca006 	br	9c88 <__alt_data_end+0xff009c88>
    aa08:	d9c01d85 	stb	r7,118(sp)
    aa0c:	003cad06 	br	9cc4 <__alt_data_end+0xff009cc4>
    aa10:	d9c01d85 	stb	r7,118(sp)
    aa14:	003d7d06 	br	a00c <__alt_data_end+0xff00a00c>
    aa18:	d9c01d85 	stb	r7,118(sp)
    aa1c:	003d5f06 	br	9f9c <__alt_data_end+0xff009f9c>
    aa20:	a080004c 	andi	r2,r20,1
    aa24:	0039883a 	mov	fp,zero
    aa28:	10000526 	beq	r2,zero,aa40 <___vfiprintf_internal_r+0x1428>
    aa2c:	00800c04 	movi	r2,48
    aa30:	d88019c5 	stb	r2,103(sp)
    aa34:	dcc02717 	ldw	r19,156(sp)
    aa38:	dd4019c4 	addi	r21,sp,103
    aa3c:	003bf606 	br	9a18 <__alt_data_end+0xff009a18>
    aa40:	0027883a 	mov	r19,zero
    aa44:	dd401a04 	addi	r21,sp,104
    aa48:	003bf306 	br	9a18 <__alt_data_end+0xff009a18>
    aa4c:	d9c01d85 	stb	r7,118(sp)
    aa50:	003dc806 	br	a174 <__alt_data_end+0xff00a174>
    aa54:	d9c01d85 	stb	r7,118(sp)
    aa58:	003d3a06 	br	9f44 <__alt_data_end+0xff009f44>
    aa5c:	d9c01d85 	stb	r7,118(sp)
    aa60:	003d2a06 	br	9f0c <__alt_data_end+0xff009f0c>
    aa64:	d9c01d85 	stb	r7,118(sp)
    aa68:	003cde06 	br	9de4 <__alt_data_end+0xff009de4>
    aa6c:	d9c01d85 	stb	r7,118(sp)
    aa70:	003cbc06 	br	9d64 <__alt_data_end+0xff009d64>

0000aa74 <__vfiprintf_internal>:
    aa74:	00800074 	movhi	r2,1
    aa78:	1088c004 	addi	r2,r2,8960
    aa7c:	300f883a 	mov	r7,r6
    aa80:	280d883a 	mov	r6,r5
    aa84:	200b883a 	mov	r5,r4
    aa88:	11000017 	ldw	r4,0(r2)
    aa8c:	00096181 	jmpi	9618 <___vfiprintf_internal_r>

0000aa90 <__sbprintf>:
    aa90:	2880030b 	ldhu	r2,12(r5)
    aa94:	2ac01917 	ldw	r11,100(r5)
    aa98:	2a80038b 	ldhu	r10,14(r5)
    aa9c:	2a400717 	ldw	r9,28(r5)
    aaa0:	2a000917 	ldw	r8,36(r5)
    aaa4:	defee204 	addi	sp,sp,-1144
    aaa8:	00c10004 	movi	r3,1024
    aaac:	dc011a15 	stw	r16,1128(sp)
    aab0:	10bfff4c 	andi	r2,r2,65533
    aab4:	2821883a 	mov	r16,r5
    aab8:	d8cb883a 	add	r5,sp,r3
    aabc:	dc811c15 	stw	r18,1136(sp)
    aac0:	dc411b15 	stw	r17,1132(sp)
    aac4:	dfc11d15 	stw	ra,1140(sp)
    aac8:	2025883a 	mov	r18,r4
    aacc:	d881030d 	sth	r2,1036(sp)
    aad0:	dac11915 	stw	r11,1124(sp)
    aad4:	da81038d 	sth	r10,1038(sp)
    aad8:	da410715 	stw	r9,1052(sp)
    aadc:	da010915 	stw	r8,1060(sp)
    aae0:	dec10015 	stw	sp,1024(sp)
    aae4:	dec10415 	stw	sp,1040(sp)
    aae8:	d8c10215 	stw	r3,1032(sp)
    aaec:	d8c10515 	stw	r3,1044(sp)
    aaf0:	d8010615 	stw	zero,1048(sp)
    aaf4:	00096180 	call	9618 <___vfiprintf_internal_r>
    aaf8:	1023883a 	mov	r17,r2
    aafc:	10000416 	blt	r2,zero,ab10 <__sbprintf+0x80>
    ab00:	d9410004 	addi	r5,sp,1024
    ab04:	9009883a 	mov	r4,r18
    ab08:	000672c0 	call	672c <_fflush_r>
    ab0c:	10000d1e 	bne	r2,zero,ab44 <__sbprintf+0xb4>
    ab10:	d881030b 	ldhu	r2,1036(sp)
    ab14:	1080100c 	andi	r2,r2,64
    ab18:	10000326 	beq	r2,zero,ab28 <__sbprintf+0x98>
    ab1c:	8080030b 	ldhu	r2,12(r16)
    ab20:	10801014 	ori	r2,r2,64
    ab24:	8080030d 	sth	r2,12(r16)
    ab28:	8805883a 	mov	r2,r17
    ab2c:	dfc11d17 	ldw	ra,1140(sp)
    ab30:	dc811c17 	ldw	r18,1136(sp)
    ab34:	dc411b17 	ldw	r17,1132(sp)
    ab38:	dc011a17 	ldw	r16,1128(sp)
    ab3c:	dec11e04 	addi	sp,sp,1144
    ab40:	f800283a 	ret
    ab44:	047fffc4 	movi	r17,-1
    ab48:	003ff106 	br	ab10 <__alt_data_end+0xff00ab10>

0000ab4c <_write_r>:
    ab4c:	defffd04 	addi	sp,sp,-12
    ab50:	2805883a 	mov	r2,r5
    ab54:	dc000015 	stw	r16,0(sp)
    ab58:	04000074 	movhi	r16,1
    ab5c:	dc400115 	stw	r17,4(sp)
    ab60:	300b883a 	mov	r5,r6
    ab64:	840f9704 	addi	r16,r16,15964
    ab68:	2023883a 	mov	r17,r4
    ab6c:	380d883a 	mov	r6,r7
    ab70:	1009883a 	mov	r4,r2
    ab74:	dfc00215 	stw	ra,8(sp)
    ab78:	80000015 	stw	zero,0(r16)
    ab7c:	000ebf80 	call	ebf8 <write>
    ab80:	00ffffc4 	movi	r3,-1
    ab84:	10c00526 	beq	r2,r3,ab9c <_write_r+0x50>
    ab88:	dfc00217 	ldw	ra,8(sp)
    ab8c:	dc400117 	ldw	r17,4(sp)
    ab90:	dc000017 	ldw	r16,0(sp)
    ab94:	dec00304 	addi	sp,sp,12
    ab98:	f800283a 	ret
    ab9c:	80c00017 	ldw	r3,0(r16)
    aba0:	183ff926 	beq	r3,zero,ab88 <__alt_data_end+0xff00ab88>
    aba4:	88c00015 	stw	r3,0(r17)
    aba8:	003ff706 	br	ab88 <__alt_data_end+0xff00ab88>

0000abac <_close_r>:
    abac:	defffd04 	addi	sp,sp,-12
    abb0:	dc000015 	stw	r16,0(sp)
    abb4:	04000074 	movhi	r16,1
    abb8:	dc400115 	stw	r17,4(sp)
    abbc:	840f9704 	addi	r16,r16,15964
    abc0:	2023883a 	mov	r17,r4
    abc4:	2809883a 	mov	r4,r5
    abc8:	dfc00215 	stw	ra,8(sp)
    abcc:	80000015 	stw	zero,0(r16)
    abd0:	000e74c0 	call	e74c <close>
    abd4:	00ffffc4 	movi	r3,-1
    abd8:	10c00526 	beq	r2,r3,abf0 <_close_r+0x44>
    abdc:	dfc00217 	ldw	ra,8(sp)
    abe0:	dc400117 	ldw	r17,4(sp)
    abe4:	dc000017 	ldw	r16,0(sp)
    abe8:	dec00304 	addi	sp,sp,12
    abec:	f800283a 	ret
    abf0:	80c00017 	ldw	r3,0(r16)
    abf4:	183ff926 	beq	r3,zero,abdc <__alt_data_end+0xff00abdc>
    abf8:	88c00015 	stw	r3,0(r17)
    abfc:	003ff706 	br	abdc <__alt_data_end+0xff00abdc>

0000ac00 <_calloc_r>:
    ac00:	298b383a 	mul	r5,r5,r6
    ac04:	defffe04 	addi	sp,sp,-8
    ac08:	dfc00115 	stw	ra,4(sp)
    ac0c:	dc000015 	stw	r16,0(sp)
    ac10:	0001e2c0 	call	1e2c <_malloc_r>
    ac14:	10002926 	beq	r2,zero,acbc <_calloc_r+0xbc>
    ac18:	11bfff17 	ldw	r6,-4(r2)
    ac1c:	1021883a 	mov	r16,r2
    ac20:	00bfff04 	movi	r2,-4
    ac24:	308c703a 	and	r6,r6,r2
    ac28:	00c00904 	movi	r3,36
    ac2c:	308d883a 	add	r6,r6,r2
    ac30:	19801636 	bltu	r3,r6,ac8c <_calloc_r+0x8c>
    ac34:	008004c4 	movi	r2,19
    ac38:	11800b2e 	bgeu	r2,r6,ac68 <_calloc_r+0x68>
    ac3c:	80000015 	stw	zero,0(r16)
    ac40:	80000115 	stw	zero,4(r16)
    ac44:	008006c4 	movi	r2,27
    ac48:	11801a2e 	bgeu	r2,r6,acb4 <_calloc_r+0xb4>
    ac4c:	80000215 	stw	zero,8(r16)
    ac50:	80000315 	stw	zero,12(r16)
    ac54:	30c0151e 	bne	r6,r3,acac <_calloc_r+0xac>
    ac58:	80000415 	stw	zero,16(r16)
    ac5c:	80800604 	addi	r2,r16,24
    ac60:	80000515 	stw	zero,20(r16)
    ac64:	00000106 	br	ac6c <_calloc_r+0x6c>
    ac68:	8005883a 	mov	r2,r16
    ac6c:	10000015 	stw	zero,0(r2)
    ac70:	10000115 	stw	zero,4(r2)
    ac74:	10000215 	stw	zero,8(r2)
    ac78:	8005883a 	mov	r2,r16
    ac7c:	dfc00117 	ldw	ra,4(sp)
    ac80:	dc000017 	ldw	r16,0(sp)
    ac84:	dec00204 	addi	sp,sp,8
    ac88:	f800283a 	ret
    ac8c:	000b883a 	mov	r5,zero
    ac90:	8009883a 	mov	r4,r16
    ac94:	0007bf00 	call	7bf0 <memset>
    ac98:	8005883a 	mov	r2,r16
    ac9c:	dfc00117 	ldw	ra,4(sp)
    aca0:	dc000017 	ldw	r16,0(sp)
    aca4:	dec00204 	addi	sp,sp,8
    aca8:	f800283a 	ret
    acac:	80800404 	addi	r2,r16,16
    acb0:	003fee06 	br	ac6c <__alt_data_end+0xff00ac6c>
    acb4:	80800204 	addi	r2,r16,8
    acb8:	003fec06 	br	ac6c <__alt_data_end+0xff00ac6c>
    acbc:	0005883a 	mov	r2,zero
    acc0:	003fee06 	br	ac7c <__alt_data_end+0xff00ac7c>

0000acc4 <_fclose_r>:
    acc4:	28003926 	beq	r5,zero,adac <_fclose_r+0xe8>
    acc8:	defffc04 	addi	sp,sp,-16
    accc:	dc400115 	stw	r17,4(sp)
    acd0:	dc000015 	stw	r16,0(sp)
    acd4:	dfc00315 	stw	ra,12(sp)
    acd8:	dc800215 	stw	r18,8(sp)
    acdc:	2023883a 	mov	r17,r4
    ace0:	2821883a 	mov	r16,r5
    ace4:	20000226 	beq	r4,zero,acf0 <_fclose_r+0x2c>
    ace8:	20800e17 	ldw	r2,56(r4)
    acec:	10002726 	beq	r2,zero,ad8c <_fclose_r+0xc8>
    acf0:	8080030f 	ldh	r2,12(r16)
    acf4:	1000071e 	bne	r2,zero,ad14 <_fclose_r+0x50>
    acf8:	0005883a 	mov	r2,zero
    acfc:	dfc00317 	ldw	ra,12(sp)
    ad00:	dc800217 	ldw	r18,8(sp)
    ad04:	dc400117 	ldw	r17,4(sp)
    ad08:	dc000017 	ldw	r16,0(sp)
    ad0c:	dec00404 	addi	sp,sp,16
    ad10:	f800283a 	ret
    ad14:	800b883a 	mov	r5,r16
    ad18:	8809883a 	mov	r4,r17
    ad1c:	00065100 	call	6510 <__sflush_r>
    ad20:	1025883a 	mov	r18,r2
    ad24:	80800b17 	ldw	r2,44(r16)
    ad28:	10000426 	beq	r2,zero,ad3c <_fclose_r+0x78>
    ad2c:	81400717 	ldw	r5,28(r16)
    ad30:	8809883a 	mov	r4,r17
    ad34:	103ee83a 	callr	r2
    ad38:	10001616 	blt	r2,zero,ad94 <_fclose_r+0xd0>
    ad3c:	8080030b 	ldhu	r2,12(r16)
    ad40:	1080200c 	andi	r2,r2,128
    ad44:	1000151e 	bne	r2,zero,ad9c <_fclose_r+0xd8>
    ad48:	81400c17 	ldw	r5,48(r16)
    ad4c:	28000526 	beq	r5,zero,ad64 <_fclose_r+0xa0>
    ad50:	80801004 	addi	r2,r16,64
    ad54:	28800226 	beq	r5,r2,ad60 <_fclose_r+0x9c>
    ad58:	8809883a 	mov	r4,r17
    ad5c:	0006c7c0 	call	6c7c <_free_r>
    ad60:	80000c15 	stw	zero,48(r16)
    ad64:	81401117 	ldw	r5,68(r16)
    ad68:	28000326 	beq	r5,zero,ad78 <_fclose_r+0xb4>
    ad6c:	8809883a 	mov	r4,r17
    ad70:	0006c7c0 	call	6c7c <_free_r>
    ad74:	80001115 	stw	zero,68(r16)
    ad78:	0006b180 	call	6b18 <__sfp_lock_acquire>
    ad7c:	8000030d 	sth	zero,12(r16)
    ad80:	0006b1c0 	call	6b1c <__sfp_lock_release>
    ad84:	9005883a 	mov	r2,r18
    ad88:	003fdc06 	br	acfc <__alt_data_end+0xff00acfc>
    ad8c:	0006b080 	call	6b08 <__sinit>
    ad90:	003fd706 	br	acf0 <__alt_data_end+0xff00acf0>
    ad94:	04bfffc4 	movi	r18,-1
    ad98:	003fe806 	br	ad3c <__alt_data_end+0xff00ad3c>
    ad9c:	81400417 	ldw	r5,16(r16)
    ada0:	8809883a 	mov	r4,r17
    ada4:	0006c7c0 	call	6c7c <_free_r>
    ada8:	003fe706 	br	ad48 <__alt_data_end+0xff00ad48>
    adac:	0005883a 	mov	r2,zero
    adb0:	f800283a 	ret

0000adb4 <fclose>:
    adb4:	00800074 	movhi	r2,1
    adb8:	1088c004 	addi	r2,r2,8960
    adbc:	200b883a 	mov	r5,r4
    adc0:	11000017 	ldw	r4,0(r2)
    adc4:	000acc41 	jmpi	acc4 <_fclose_r>

0000adc8 <__fputwc>:
    adc8:	defff804 	addi	sp,sp,-32
    adcc:	dcc00415 	stw	r19,16(sp)
    add0:	dc800315 	stw	r18,12(sp)
    add4:	dc000115 	stw	r16,4(sp)
    add8:	dfc00715 	stw	ra,28(sp)
    addc:	dd400615 	stw	r21,24(sp)
    ade0:	dd000515 	stw	r20,20(sp)
    ade4:	dc400215 	stw	r17,8(sp)
    ade8:	2027883a 	mov	r19,r4
    adec:	2825883a 	mov	r18,r5
    adf0:	3021883a 	mov	r16,r6
    adf4:	00076580 	call	7658 <__locale_mb_cur_max>
    adf8:	00c00044 	movi	r3,1
    adfc:	10c03e26 	beq	r2,r3,aef8 <__fputwc+0x130>
    ae00:	81c01704 	addi	r7,r16,92
    ae04:	900d883a 	mov	r6,r18
    ae08:	d80b883a 	mov	r5,sp
    ae0c:	9809883a 	mov	r4,r19
    ae10:	000b2980 	call	b298 <_wcrtomb_r>
    ae14:	1029883a 	mov	r20,r2
    ae18:	00bfffc4 	movi	r2,-1
    ae1c:	a0802026 	beq	r20,r2,aea0 <__fputwc+0xd8>
    ae20:	d9400003 	ldbu	r5,0(sp)
    ae24:	a0001c26 	beq	r20,zero,ae98 <__fputwc+0xd0>
    ae28:	0023883a 	mov	r17,zero
    ae2c:	05400284 	movi	r21,10
    ae30:	00000906 	br	ae58 <__fputwc+0x90>
    ae34:	80800017 	ldw	r2,0(r16)
    ae38:	11400005 	stb	r5,0(r2)
    ae3c:	80c00017 	ldw	r3,0(r16)
    ae40:	18c00044 	addi	r3,r3,1
    ae44:	80c00015 	stw	r3,0(r16)
    ae48:	8c400044 	addi	r17,r17,1
    ae4c:	dc45883a 	add	r2,sp,r17
    ae50:	8d00112e 	bgeu	r17,r20,ae98 <__fputwc+0xd0>
    ae54:	11400003 	ldbu	r5,0(r2)
    ae58:	80c00217 	ldw	r3,8(r16)
    ae5c:	18ffffc4 	addi	r3,r3,-1
    ae60:	80c00215 	stw	r3,8(r16)
    ae64:	183ff30e 	bge	r3,zero,ae34 <__alt_data_end+0xff00ae34>
    ae68:	80800617 	ldw	r2,24(r16)
    ae6c:	18801916 	blt	r3,r2,aed4 <__fputwc+0x10c>
    ae70:	80800017 	ldw	r2,0(r16)
    ae74:	11400005 	stb	r5,0(r2)
    ae78:	80800017 	ldw	r2,0(r16)
    ae7c:	10c00003 	ldbu	r3,0(r2)
    ae80:	10800044 	addi	r2,r2,1
    ae84:	1d402326 	beq	r3,r21,af14 <__fputwc+0x14c>
    ae88:	80800015 	stw	r2,0(r16)
    ae8c:	8c400044 	addi	r17,r17,1
    ae90:	dc45883a 	add	r2,sp,r17
    ae94:	8d3fef36 	bltu	r17,r20,ae54 <__alt_data_end+0xff00ae54>
    ae98:	9005883a 	mov	r2,r18
    ae9c:	00000406 	br	aeb0 <__fputwc+0xe8>
    aea0:	80c0030b 	ldhu	r3,12(r16)
    aea4:	a005883a 	mov	r2,r20
    aea8:	18c01014 	ori	r3,r3,64
    aeac:	80c0030d 	sth	r3,12(r16)
    aeb0:	dfc00717 	ldw	ra,28(sp)
    aeb4:	dd400617 	ldw	r21,24(sp)
    aeb8:	dd000517 	ldw	r20,20(sp)
    aebc:	dcc00417 	ldw	r19,16(sp)
    aec0:	dc800317 	ldw	r18,12(sp)
    aec4:	dc400217 	ldw	r17,8(sp)
    aec8:	dc000117 	ldw	r16,4(sp)
    aecc:	dec00804 	addi	sp,sp,32
    aed0:	f800283a 	ret
    aed4:	800d883a 	mov	r6,r16
    aed8:	29403fcc 	andi	r5,r5,255
    aedc:	9809883a 	mov	r4,r19
    aee0:	000b1400 	call	b140 <__swbuf_r>
    aee4:	10bfffe0 	cmpeqi	r2,r2,-1
    aee8:	10803fcc 	andi	r2,r2,255
    aeec:	103fd626 	beq	r2,zero,ae48 <__alt_data_end+0xff00ae48>
    aef0:	00bfffc4 	movi	r2,-1
    aef4:	003fee06 	br	aeb0 <__alt_data_end+0xff00aeb0>
    aef8:	90ffffc4 	addi	r3,r18,-1
    aefc:	01003f84 	movi	r4,254
    af00:	20ffbf36 	bltu	r4,r3,ae00 <__alt_data_end+0xff00ae00>
    af04:	900b883a 	mov	r5,r18
    af08:	dc800005 	stb	r18,0(sp)
    af0c:	1029883a 	mov	r20,r2
    af10:	003fc506 	br	ae28 <__alt_data_end+0xff00ae28>
    af14:	800d883a 	mov	r6,r16
    af18:	a80b883a 	mov	r5,r21
    af1c:	9809883a 	mov	r4,r19
    af20:	000b1400 	call	b140 <__swbuf_r>
    af24:	10bfffe0 	cmpeqi	r2,r2,-1
    af28:	003fef06 	br	aee8 <__alt_data_end+0xff00aee8>

0000af2c <_fputwc_r>:
    af2c:	3080030b 	ldhu	r2,12(r6)
    af30:	10c8000c 	andi	r3,r2,8192
    af34:	1800051e 	bne	r3,zero,af4c <_fputwc_r+0x20>
    af38:	30c01917 	ldw	r3,100(r6)
    af3c:	10880014 	ori	r2,r2,8192
    af40:	3080030d 	sth	r2,12(r6)
    af44:	18880014 	ori	r2,r3,8192
    af48:	30801915 	stw	r2,100(r6)
    af4c:	000adc81 	jmpi	adc8 <__fputwc>

0000af50 <fputwc>:
    af50:	00800074 	movhi	r2,1
    af54:	defffc04 	addi	sp,sp,-16
    af58:	1088c004 	addi	r2,r2,8960
    af5c:	dc000115 	stw	r16,4(sp)
    af60:	14000017 	ldw	r16,0(r2)
    af64:	dc400215 	stw	r17,8(sp)
    af68:	dfc00315 	stw	ra,12(sp)
    af6c:	2023883a 	mov	r17,r4
    af70:	80000226 	beq	r16,zero,af7c <fputwc+0x2c>
    af74:	80800e17 	ldw	r2,56(r16)
    af78:	10001026 	beq	r2,zero,afbc <fputwc+0x6c>
    af7c:	2880030b 	ldhu	r2,12(r5)
    af80:	10c8000c 	andi	r3,r2,8192
    af84:	1800051e 	bne	r3,zero,af9c <fputwc+0x4c>
    af88:	28c01917 	ldw	r3,100(r5)
    af8c:	10880014 	ori	r2,r2,8192
    af90:	2880030d 	sth	r2,12(r5)
    af94:	18880014 	ori	r2,r3,8192
    af98:	28801915 	stw	r2,100(r5)
    af9c:	280d883a 	mov	r6,r5
    afa0:	8009883a 	mov	r4,r16
    afa4:	880b883a 	mov	r5,r17
    afa8:	dfc00317 	ldw	ra,12(sp)
    afac:	dc400217 	ldw	r17,8(sp)
    afb0:	dc000117 	ldw	r16,4(sp)
    afb4:	dec00404 	addi	sp,sp,16
    afb8:	000adc81 	jmpi	adc8 <__fputwc>
    afbc:	8009883a 	mov	r4,r16
    afc0:	d9400015 	stw	r5,0(sp)
    afc4:	0006b080 	call	6b08 <__sinit>
    afc8:	d9400017 	ldw	r5,0(sp)
    afcc:	003feb06 	br	af7c <__alt_data_end+0xff00af7c>

0000afd0 <_fstat_r>:
    afd0:	defffd04 	addi	sp,sp,-12
    afd4:	2805883a 	mov	r2,r5
    afd8:	dc000015 	stw	r16,0(sp)
    afdc:	04000074 	movhi	r16,1
    afe0:	dc400115 	stw	r17,4(sp)
    afe4:	840f9704 	addi	r16,r16,15964
    afe8:	2023883a 	mov	r17,r4
    afec:	300b883a 	mov	r5,r6
    aff0:	1009883a 	mov	r4,r2
    aff4:	dfc00215 	stw	ra,8(sp)
    aff8:	80000015 	stw	zero,0(r16)
    affc:	000e8100 	call	e810 <fstat>
    b000:	00ffffc4 	movi	r3,-1
    b004:	10c00526 	beq	r2,r3,b01c <_fstat_r+0x4c>
    b008:	dfc00217 	ldw	ra,8(sp)
    b00c:	dc400117 	ldw	r17,4(sp)
    b010:	dc000017 	ldw	r16,0(sp)
    b014:	dec00304 	addi	sp,sp,12
    b018:	f800283a 	ret
    b01c:	80c00017 	ldw	r3,0(r16)
    b020:	183ff926 	beq	r3,zero,b008 <__alt_data_end+0xff00b008>
    b024:	88c00015 	stw	r3,0(r17)
    b028:	003ff706 	br	b008 <__alt_data_end+0xff00b008>

0000b02c <_isatty_r>:
    b02c:	defffd04 	addi	sp,sp,-12
    b030:	dc000015 	stw	r16,0(sp)
    b034:	04000074 	movhi	r16,1
    b038:	dc400115 	stw	r17,4(sp)
    b03c:	840f9704 	addi	r16,r16,15964
    b040:	2023883a 	mov	r17,r4
    b044:	2809883a 	mov	r4,r5
    b048:	dfc00215 	stw	ra,8(sp)
    b04c:	80000015 	stw	zero,0(r16)
    b050:	000e8880 	call	e888 <isatty>
    b054:	00ffffc4 	movi	r3,-1
    b058:	10c00526 	beq	r2,r3,b070 <_isatty_r+0x44>
    b05c:	dfc00217 	ldw	ra,8(sp)
    b060:	dc400117 	ldw	r17,4(sp)
    b064:	dc000017 	ldw	r16,0(sp)
    b068:	dec00304 	addi	sp,sp,12
    b06c:	f800283a 	ret
    b070:	80c00017 	ldw	r3,0(r16)
    b074:	183ff926 	beq	r3,zero,b05c <__alt_data_end+0xff00b05c>
    b078:	88c00015 	stw	r3,0(r17)
    b07c:	003ff706 	br	b05c <__alt_data_end+0xff00b05c>

0000b080 <_lseek_r>:
    b080:	defffd04 	addi	sp,sp,-12
    b084:	2805883a 	mov	r2,r5
    b088:	dc000015 	stw	r16,0(sp)
    b08c:	04000074 	movhi	r16,1
    b090:	dc400115 	stw	r17,4(sp)
    b094:	300b883a 	mov	r5,r6
    b098:	840f9704 	addi	r16,r16,15964
    b09c:	2023883a 	mov	r17,r4
    b0a0:	380d883a 	mov	r6,r7
    b0a4:	1009883a 	mov	r4,r2
    b0a8:	dfc00215 	stw	ra,8(sp)
    b0ac:	80000015 	stw	zero,0(r16)
    b0b0:	000e9d80 	call	e9d8 <lseek>
    b0b4:	00ffffc4 	movi	r3,-1
    b0b8:	10c00526 	beq	r2,r3,b0d0 <_lseek_r+0x50>
    b0bc:	dfc00217 	ldw	ra,8(sp)
    b0c0:	dc400117 	ldw	r17,4(sp)
    b0c4:	dc000017 	ldw	r16,0(sp)
    b0c8:	dec00304 	addi	sp,sp,12
    b0cc:	f800283a 	ret
    b0d0:	80c00017 	ldw	r3,0(r16)
    b0d4:	183ff926 	beq	r3,zero,b0bc <__alt_data_end+0xff00b0bc>
    b0d8:	88c00015 	stw	r3,0(r17)
    b0dc:	003ff706 	br	b0bc <__alt_data_end+0xff00b0bc>

0000b0e0 <_read_r>:
    b0e0:	defffd04 	addi	sp,sp,-12
    b0e4:	2805883a 	mov	r2,r5
    b0e8:	dc000015 	stw	r16,0(sp)
    b0ec:	04000074 	movhi	r16,1
    b0f0:	dc400115 	stw	r17,4(sp)
    b0f4:	300b883a 	mov	r5,r6
    b0f8:	840f9704 	addi	r16,r16,15964
    b0fc:	2023883a 	mov	r17,r4
    b100:	380d883a 	mov	r6,r7
    b104:	1009883a 	mov	r4,r2
    b108:	dfc00215 	stw	ra,8(sp)
    b10c:	80000015 	stw	zero,0(r16)
    b110:	000eabc0 	call	eabc <read>
    b114:	00ffffc4 	movi	r3,-1
    b118:	10c00526 	beq	r2,r3,b130 <_read_r+0x50>
    b11c:	dfc00217 	ldw	ra,8(sp)
    b120:	dc400117 	ldw	r17,4(sp)
    b124:	dc000017 	ldw	r16,0(sp)
    b128:	dec00304 	addi	sp,sp,12
    b12c:	f800283a 	ret
    b130:	80c00017 	ldw	r3,0(r16)
    b134:	183ff926 	beq	r3,zero,b11c <__alt_data_end+0xff00b11c>
    b138:	88c00015 	stw	r3,0(r17)
    b13c:	003ff706 	br	b11c <__alt_data_end+0xff00b11c>

0000b140 <__swbuf_r>:
    b140:	defffb04 	addi	sp,sp,-20
    b144:	dcc00315 	stw	r19,12(sp)
    b148:	dc800215 	stw	r18,8(sp)
    b14c:	dc000015 	stw	r16,0(sp)
    b150:	dfc00415 	stw	ra,16(sp)
    b154:	dc400115 	stw	r17,4(sp)
    b158:	2025883a 	mov	r18,r4
    b15c:	2827883a 	mov	r19,r5
    b160:	3021883a 	mov	r16,r6
    b164:	20000226 	beq	r4,zero,b170 <__swbuf_r+0x30>
    b168:	20800e17 	ldw	r2,56(r4)
    b16c:	10004226 	beq	r2,zero,b278 <__swbuf_r+0x138>
    b170:	80800617 	ldw	r2,24(r16)
    b174:	8100030b 	ldhu	r4,12(r16)
    b178:	80800215 	stw	r2,8(r16)
    b17c:	2080020c 	andi	r2,r4,8
    b180:	10003626 	beq	r2,zero,b25c <__swbuf_r+0x11c>
    b184:	80c00417 	ldw	r3,16(r16)
    b188:	18003426 	beq	r3,zero,b25c <__swbuf_r+0x11c>
    b18c:	2088000c 	andi	r2,r4,8192
    b190:	9c403fcc 	andi	r17,r19,255
    b194:	10001a26 	beq	r2,zero,b200 <__swbuf_r+0xc0>
    b198:	80800017 	ldw	r2,0(r16)
    b19c:	81000517 	ldw	r4,20(r16)
    b1a0:	10c7c83a 	sub	r3,r2,r3
    b1a4:	1900200e 	bge	r3,r4,b228 <__swbuf_r+0xe8>
    b1a8:	18c00044 	addi	r3,r3,1
    b1ac:	81000217 	ldw	r4,8(r16)
    b1b0:	11400044 	addi	r5,r2,1
    b1b4:	81400015 	stw	r5,0(r16)
    b1b8:	213fffc4 	addi	r4,r4,-1
    b1bc:	81000215 	stw	r4,8(r16)
    b1c0:	14c00005 	stb	r19,0(r2)
    b1c4:	80800517 	ldw	r2,20(r16)
    b1c8:	10c01e26 	beq	r2,r3,b244 <__swbuf_r+0x104>
    b1cc:	8080030b 	ldhu	r2,12(r16)
    b1d0:	1080004c 	andi	r2,r2,1
    b1d4:	10000226 	beq	r2,zero,b1e0 <__swbuf_r+0xa0>
    b1d8:	00800284 	movi	r2,10
    b1dc:	88801926 	beq	r17,r2,b244 <__swbuf_r+0x104>
    b1e0:	8805883a 	mov	r2,r17
    b1e4:	dfc00417 	ldw	ra,16(sp)
    b1e8:	dcc00317 	ldw	r19,12(sp)
    b1ec:	dc800217 	ldw	r18,8(sp)
    b1f0:	dc400117 	ldw	r17,4(sp)
    b1f4:	dc000017 	ldw	r16,0(sp)
    b1f8:	dec00504 	addi	sp,sp,20
    b1fc:	f800283a 	ret
    b200:	81401917 	ldw	r5,100(r16)
    b204:	00b7ffc4 	movi	r2,-8193
    b208:	21080014 	ori	r4,r4,8192
    b20c:	2884703a 	and	r2,r5,r2
    b210:	80801915 	stw	r2,100(r16)
    b214:	80800017 	ldw	r2,0(r16)
    b218:	8100030d 	sth	r4,12(r16)
    b21c:	81000517 	ldw	r4,20(r16)
    b220:	10c7c83a 	sub	r3,r2,r3
    b224:	193fe016 	blt	r3,r4,b1a8 <__alt_data_end+0xff00b1a8>
    b228:	800b883a 	mov	r5,r16
    b22c:	9009883a 	mov	r4,r18
    b230:	000672c0 	call	672c <_fflush_r>
    b234:	1000071e 	bne	r2,zero,b254 <__swbuf_r+0x114>
    b238:	80800017 	ldw	r2,0(r16)
    b23c:	00c00044 	movi	r3,1
    b240:	003fda06 	br	b1ac <__alt_data_end+0xff00b1ac>
    b244:	800b883a 	mov	r5,r16
    b248:	9009883a 	mov	r4,r18
    b24c:	000672c0 	call	672c <_fflush_r>
    b250:	103fe326 	beq	r2,zero,b1e0 <__alt_data_end+0xff00b1e0>
    b254:	00bfffc4 	movi	r2,-1
    b258:	003fe206 	br	b1e4 <__alt_data_end+0xff00b1e4>
    b25c:	800b883a 	mov	r5,r16
    b260:	9009883a 	mov	r4,r18
    b264:	0004b340 	call	4b34 <__swsetup_r>
    b268:	103ffa1e 	bne	r2,zero,b254 <__alt_data_end+0xff00b254>
    b26c:	8100030b 	ldhu	r4,12(r16)
    b270:	80c00417 	ldw	r3,16(r16)
    b274:	003fc506 	br	b18c <__alt_data_end+0xff00b18c>
    b278:	0006b080 	call	6b08 <__sinit>
    b27c:	003fbc06 	br	b170 <__alt_data_end+0xff00b170>

0000b280 <__swbuf>:
    b280:	00800074 	movhi	r2,1
    b284:	1088c004 	addi	r2,r2,8960
    b288:	280d883a 	mov	r6,r5
    b28c:	200b883a 	mov	r5,r4
    b290:	11000017 	ldw	r4,0(r2)
    b294:	000b1401 	jmpi	b140 <__swbuf_r>

0000b298 <_wcrtomb_r>:
    b298:	defff604 	addi	sp,sp,-40
    b29c:	00800074 	movhi	r2,1
    b2a0:	dc800815 	stw	r18,32(sp)
    b2a4:	dc400715 	stw	r17,28(sp)
    b2a8:	dc000615 	stw	r16,24(sp)
    b2ac:	1088c204 	addi	r2,r2,8968
    b2b0:	dfc00915 	stw	ra,36(sp)
    b2b4:	2021883a 	mov	r16,r4
    b2b8:	3823883a 	mov	r17,r7
    b2bc:	14800017 	ldw	r18,0(r2)
    b2c0:	28001426 	beq	r5,zero,b314 <_wcrtomb_r+0x7c>
    b2c4:	d9400415 	stw	r5,16(sp)
    b2c8:	d9800515 	stw	r6,20(sp)
    b2cc:	000764c0 	call	764c <__locale_charset>
    b2d0:	d9800517 	ldw	r6,20(sp)
    b2d4:	d9400417 	ldw	r5,16(sp)
    b2d8:	100f883a 	mov	r7,r2
    b2dc:	dc400015 	stw	r17,0(sp)
    b2e0:	8009883a 	mov	r4,r16
    b2e4:	903ee83a 	callr	r18
    b2e8:	00ffffc4 	movi	r3,-1
    b2ec:	10c0031e 	bne	r2,r3,b2fc <_wcrtomb_r+0x64>
    b2f0:	88000015 	stw	zero,0(r17)
    b2f4:	00c02284 	movi	r3,138
    b2f8:	80c00015 	stw	r3,0(r16)
    b2fc:	dfc00917 	ldw	ra,36(sp)
    b300:	dc800817 	ldw	r18,32(sp)
    b304:	dc400717 	ldw	r17,28(sp)
    b308:	dc000617 	ldw	r16,24(sp)
    b30c:	dec00a04 	addi	sp,sp,40
    b310:	f800283a 	ret
    b314:	000764c0 	call	764c <__locale_charset>
    b318:	100f883a 	mov	r7,r2
    b31c:	dc400015 	stw	r17,0(sp)
    b320:	000d883a 	mov	r6,zero
    b324:	d9400104 	addi	r5,sp,4
    b328:	8009883a 	mov	r4,r16
    b32c:	903ee83a 	callr	r18
    b330:	003fed06 	br	b2e8 <__alt_data_end+0xff00b2e8>

0000b334 <wcrtomb>:
    b334:	defff604 	addi	sp,sp,-40
    b338:	00800074 	movhi	r2,1
    b33c:	dc800615 	stw	r18,24(sp)
    b340:	dc400515 	stw	r17,20(sp)
    b344:	1088c004 	addi	r2,r2,8960
    b348:	dfc00915 	stw	ra,36(sp)
    b34c:	dd000815 	stw	r20,32(sp)
    b350:	dcc00715 	stw	r19,28(sp)
    b354:	dc000415 	stw	r16,16(sp)
    b358:	3025883a 	mov	r18,r6
    b35c:	14400017 	ldw	r17,0(r2)
    b360:	20001926 	beq	r4,zero,b3c8 <wcrtomb+0x94>
    b364:	00800074 	movhi	r2,1
    b368:	1088c204 	addi	r2,r2,8968
    b36c:	15000017 	ldw	r20,0(r2)
    b370:	2021883a 	mov	r16,r4
    b374:	2827883a 	mov	r19,r5
    b378:	000764c0 	call	764c <__locale_charset>
    b37c:	100f883a 	mov	r7,r2
    b380:	dc800015 	stw	r18,0(sp)
    b384:	980d883a 	mov	r6,r19
    b388:	800b883a 	mov	r5,r16
    b38c:	8809883a 	mov	r4,r17
    b390:	a03ee83a 	callr	r20
    b394:	00ffffc4 	movi	r3,-1
    b398:	10c0031e 	bne	r2,r3,b3a8 <wcrtomb+0x74>
    b39c:	90000015 	stw	zero,0(r18)
    b3a0:	00c02284 	movi	r3,138
    b3a4:	88c00015 	stw	r3,0(r17)
    b3a8:	dfc00917 	ldw	ra,36(sp)
    b3ac:	dd000817 	ldw	r20,32(sp)
    b3b0:	dcc00717 	ldw	r19,28(sp)
    b3b4:	dc800617 	ldw	r18,24(sp)
    b3b8:	dc400517 	ldw	r17,20(sp)
    b3bc:	dc000417 	ldw	r16,16(sp)
    b3c0:	dec00a04 	addi	sp,sp,40
    b3c4:	f800283a 	ret
    b3c8:	00800074 	movhi	r2,1
    b3cc:	1088c204 	addi	r2,r2,8968
    b3d0:	14000017 	ldw	r16,0(r2)
    b3d4:	000764c0 	call	764c <__locale_charset>
    b3d8:	100f883a 	mov	r7,r2
    b3dc:	dc800015 	stw	r18,0(sp)
    b3e0:	000d883a 	mov	r6,zero
    b3e4:	d9400104 	addi	r5,sp,4
    b3e8:	8809883a 	mov	r4,r17
    b3ec:	803ee83a 	callr	r16
    b3f0:	003fe806 	br	b394 <__alt_data_end+0xff00b394>

0000b3f4 <__ascii_wctomb>:
    b3f4:	28000526 	beq	r5,zero,b40c <__ascii_wctomb+0x18>
    b3f8:	00803fc4 	movi	r2,255
    b3fc:	11800536 	bltu	r2,r6,b414 <__ascii_wctomb+0x20>
    b400:	29800005 	stb	r6,0(r5)
    b404:	00800044 	movi	r2,1
    b408:	f800283a 	ret
    b40c:	0005883a 	mov	r2,zero
    b410:	f800283a 	ret
    b414:	00802284 	movi	r2,138
    b418:	20800015 	stw	r2,0(r4)
    b41c:	00bfffc4 	movi	r2,-1
    b420:	f800283a 	ret

0000b424 <_wctomb_r>:
    b424:	00800074 	movhi	r2,1
    b428:	defff904 	addi	sp,sp,-28
    b42c:	1088c204 	addi	r2,r2,8968
    b430:	dfc00615 	stw	ra,24(sp)
    b434:	dc400515 	stw	r17,20(sp)
    b438:	dc000415 	stw	r16,16(sp)
    b43c:	3823883a 	mov	r17,r7
    b440:	14000017 	ldw	r16,0(r2)
    b444:	d9000115 	stw	r4,4(sp)
    b448:	d9400215 	stw	r5,8(sp)
    b44c:	d9800315 	stw	r6,12(sp)
    b450:	000764c0 	call	764c <__locale_charset>
    b454:	d9800317 	ldw	r6,12(sp)
    b458:	d9400217 	ldw	r5,8(sp)
    b45c:	d9000117 	ldw	r4,4(sp)
    b460:	100f883a 	mov	r7,r2
    b464:	dc400015 	stw	r17,0(sp)
    b468:	803ee83a 	callr	r16
    b46c:	dfc00617 	ldw	ra,24(sp)
    b470:	dc400517 	ldw	r17,20(sp)
    b474:	dc000417 	ldw	r16,16(sp)
    b478:	dec00704 	addi	sp,sp,28
    b47c:	f800283a 	ret

0000b480 <__udivdi3>:
    b480:	defff504 	addi	sp,sp,-44
    b484:	dcc00415 	stw	r19,16(sp)
    b488:	dc000115 	stw	r16,4(sp)
    b48c:	dfc00a15 	stw	ra,40(sp)
    b490:	df000915 	stw	fp,36(sp)
    b494:	ddc00815 	stw	r23,32(sp)
    b498:	dd800715 	stw	r22,28(sp)
    b49c:	dd400615 	stw	r21,24(sp)
    b4a0:	dd000515 	stw	r20,20(sp)
    b4a4:	dc800315 	stw	r18,12(sp)
    b4a8:	dc400215 	stw	r17,8(sp)
    b4ac:	2027883a 	mov	r19,r4
    b4b0:	2821883a 	mov	r16,r5
    b4b4:	3800411e 	bne	r7,zero,b5bc <__udivdi3+0x13c>
    b4b8:	3023883a 	mov	r17,r6
    b4bc:	2025883a 	mov	r18,r4
    b4c0:	2980522e 	bgeu	r5,r6,b60c <__udivdi3+0x18c>
    b4c4:	00bfffd4 	movui	r2,65535
    b4c8:	282d883a 	mov	r22,r5
    b4cc:	1180a836 	bltu	r2,r6,b770 <__udivdi3+0x2f0>
    b4d0:	00803fc4 	movi	r2,255
    b4d4:	1185803a 	cmpltu	r2,r2,r6
    b4d8:	100490fa 	slli	r2,r2,3
    b4dc:	3086d83a 	srl	r3,r6,r2
    b4e0:	01000074 	movhi	r4,1
    b4e4:	2101c904 	addi	r4,r4,1828
    b4e8:	20c7883a 	add	r3,r4,r3
    b4ec:	18c00003 	ldbu	r3,0(r3)
    b4f0:	1885883a 	add	r2,r3,r2
    b4f4:	00c00804 	movi	r3,32
    b4f8:	1887c83a 	sub	r3,r3,r2
    b4fc:	18000526 	beq	r3,zero,b514 <__udivdi3+0x94>
    b500:	80e0983a 	sll	r16,r16,r3
    b504:	9884d83a 	srl	r2,r19,r2
    b508:	30e2983a 	sll	r17,r6,r3
    b50c:	98e4983a 	sll	r18,r19,r3
    b510:	142cb03a 	or	r22,r2,r16
    b514:	882ad43a 	srli	r21,r17,16
    b518:	b009883a 	mov	r4,r22
    b51c:	8d3fffcc 	andi	r20,r17,65535
    b520:	a80b883a 	mov	r5,r21
    b524:	000c08c0 	call	c08c <__umodsi3>
    b528:	b009883a 	mov	r4,r22
    b52c:	a80b883a 	mov	r5,r21
    b530:	1027883a 	mov	r19,r2
    b534:	000c0280 	call	c028 <__udivsi3>
    b538:	102d883a 	mov	r22,r2
    b53c:	9826943a 	slli	r19,r19,16
    b540:	9004d43a 	srli	r2,r18,16
    b544:	a5a1383a 	mul	r16,r20,r22
    b548:	14c4b03a 	or	r2,r2,r19
    b54c:	1400052e 	bgeu	r2,r16,b564 <__udivdi3+0xe4>
    b550:	1445883a 	add	r2,r2,r17
    b554:	b0ffffc4 	addi	r3,r22,-1
    b558:	14400136 	bltu	r2,r17,b560 <__udivdi3+0xe0>
    b55c:	14012336 	bltu	r2,r16,b9ec <__udivdi3+0x56c>
    b560:	182d883a 	mov	r22,r3
    b564:	1421c83a 	sub	r16,r2,r16
    b568:	a80b883a 	mov	r5,r21
    b56c:	8009883a 	mov	r4,r16
    b570:	000c08c0 	call	c08c <__umodsi3>
    b574:	1027883a 	mov	r19,r2
    b578:	a80b883a 	mov	r5,r21
    b57c:	8009883a 	mov	r4,r16
    b580:	000c0280 	call	c028 <__udivsi3>
    b584:	9826943a 	slli	r19,r19,16
    b588:	a0a9383a 	mul	r20,r20,r2
    b58c:	94bfffcc 	andi	r18,r18,65535
    b590:	94e4b03a 	or	r18,r18,r19
    b594:	9500052e 	bgeu	r18,r20,b5ac <__udivdi3+0x12c>
    b598:	8ca5883a 	add	r18,r17,r18
    b59c:	10ffffc4 	addi	r3,r2,-1
    b5a0:	9440f136 	bltu	r18,r17,b968 <__udivdi3+0x4e8>
    b5a4:	9500f02e 	bgeu	r18,r20,b968 <__udivdi3+0x4e8>
    b5a8:	10bfff84 	addi	r2,r2,-2
    b5ac:	b00c943a 	slli	r6,r22,16
    b5b0:	0007883a 	mov	r3,zero
    b5b4:	3084b03a 	or	r2,r6,r2
    b5b8:	00005906 	br	b720 <__udivdi3+0x2a0>
    b5bc:	29c05636 	bltu	r5,r7,b718 <__udivdi3+0x298>
    b5c0:	00bfffd4 	movui	r2,65535
    b5c4:	11c0622e 	bgeu	r2,r7,b750 <__udivdi3+0x2d0>
    b5c8:	00804034 	movhi	r2,256
    b5cc:	10bfffc4 	addi	r2,r2,-1
    b5d0:	11c0ee36 	bltu	r2,r7,b98c <__udivdi3+0x50c>
    b5d4:	00800404 	movi	r2,16
    b5d8:	3886d83a 	srl	r3,r7,r2
    b5dc:	01000074 	movhi	r4,1
    b5e0:	2101c904 	addi	r4,r4,1828
    b5e4:	20c7883a 	add	r3,r4,r3
    b5e8:	18c00003 	ldbu	r3,0(r3)
    b5ec:	05400804 	movi	r21,32
    b5f0:	1885883a 	add	r2,r3,r2
    b5f4:	a8abc83a 	sub	r21,r21,r2
    b5f8:	a800621e 	bne	r21,zero,b784 <__udivdi3+0x304>
    b5fc:	3c00e936 	bltu	r7,r16,b9a4 <__udivdi3+0x524>
    b600:	9985403a 	cmpgeu	r2,r19,r6
    b604:	0007883a 	mov	r3,zero
    b608:	00004506 	br	b720 <__udivdi3+0x2a0>
    b60c:	3000041e 	bne	r6,zero,b620 <__udivdi3+0x1a0>
    b610:	000b883a 	mov	r5,zero
    b614:	01000044 	movi	r4,1
    b618:	000c0280 	call	c028 <__udivsi3>
    b61c:	1023883a 	mov	r17,r2
    b620:	00bfffd4 	movui	r2,65535
    b624:	14404e2e 	bgeu	r2,r17,b760 <__udivdi3+0x2e0>
    b628:	00804034 	movhi	r2,256
    b62c:	10bfffc4 	addi	r2,r2,-1
    b630:	1440d836 	bltu	r2,r17,b994 <__udivdi3+0x514>
    b634:	00800404 	movi	r2,16
    b638:	8886d83a 	srl	r3,r17,r2
    b63c:	01000074 	movhi	r4,1
    b640:	2101c904 	addi	r4,r4,1828
    b644:	20c7883a 	add	r3,r4,r3
    b648:	18c00003 	ldbu	r3,0(r3)
    b64c:	1885883a 	add	r2,r3,r2
    b650:	00c00804 	movi	r3,32
    b654:	1887c83a 	sub	r3,r3,r2
    b658:	18008f1e 	bne	r3,zero,b898 <__udivdi3+0x418>
    b65c:	882ad43a 	srli	r21,r17,16
    b660:	8461c83a 	sub	r16,r16,r17
    b664:	8d3fffcc 	andi	r20,r17,65535
    b668:	00c00044 	movi	r3,1
    b66c:	8009883a 	mov	r4,r16
    b670:	a80b883a 	mov	r5,r21
    b674:	d8c00015 	stw	r3,0(sp)
    b678:	000c08c0 	call	c08c <__umodsi3>
    b67c:	8009883a 	mov	r4,r16
    b680:	a80b883a 	mov	r5,r21
    b684:	1027883a 	mov	r19,r2
    b688:	000c0280 	call	c028 <__udivsi3>
    b68c:	9826943a 	slli	r19,r19,16
    b690:	9008d43a 	srli	r4,r18,16
    b694:	1521383a 	mul	r16,r2,r20
    b698:	102d883a 	mov	r22,r2
    b69c:	24c8b03a 	or	r4,r4,r19
    b6a0:	d8c00017 	ldw	r3,0(sp)
    b6a4:	2400052e 	bgeu	r4,r16,b6bc <__udivdi3+0x23c>
    b6a8:	2449883a 	add	r4,r4,r17
    b6ac:	b0bfffc4 	addi	r2,r22,-1
    b6b0:	24400136 	bltu	r4,r17,b6b8 <__udivdi3+0x238>
    b6b4:	2400ca36 	bltu	r4,r16,b9e0 <__udivdi3+0x560>
    b6b8:	102d883a 	mov	r22,r2
    b6bc:	2421c83a 	sub	r16,r4,r16
    b6c0:	a80b883a 	mov	r5,r21
    b6c4:	8009883a 	mov	r4,r16
    b6c8:	d8c00015 	stw	r3,0(sp)
    b6cc:	000c08c0 	call	c08c <__umodsi3>
    b6d0:	1027883a 	mov	r19,r2
    b6d4:	a80b883a 	mov	r5,r21
    b6d8:	8009883a 	mov	r4,r16
    b6dc:	000c0280 	call	c028 <__udivsi3>
    b6e0:	9826943a 	slli	r19,r19,16
    b6e4:	1529383a 	mul	r20,r2,r20
    b6e8:	94bfffcc 	andi	r18,r18,65535
    b6ec:	94e4b03a 	or	r18,r18,r19
    b6f0:	d8c00017 	ldw	r3,0(sp)
    b6f4:	9500052e 	bgeu	r18,r20,b70c <__udivdi3+0x28c>
    b6f8:	8ca5883a 	add	r18,r17,r18
    b6fc:	113fffc4 	addi	r4,r2,-1
    b700:	94409736 	bltu	r18,r17,b960 <__udivdi3+0x4e0>
    b704:	9500962e 	bgeu	r18,r20,b960 <__udivdi3+0x4e0>
    b708:	10bfff84 	addi	r2,r2,-2
    b70c:	b00c943a 	slli	r6,r22,16
    b710:	3084b03a 	or	r2,r6,r2
    b714:	00000206 	br	b720 <__udivdi3+0x2a0>
    b718:	0007883a 	mov	r3,zero
    b71c:	0005883a 	mov	r2,zero
    b720:	dfc00a17 	ldw	ra,40(sp)
    b724:	df000917 	ldw	fp,36(sp)
    b728:	ddc00817 	ldw	r23,32(sp)
    b72c:	dd800717 	ldw	r22,28(sp)
    b730:	dd400617 	ldw	r21,24(sp)
    b734:	dd000517 	ldw	r20,20(sp)
    b738:	dcc00417 	ldw	r19,16(sp)
    b73c:	dc800317 	ldw	r18,12(sp)
    b740:	dc400217 	ldw	r17,8(sp)
    b744:	dc000117 	ldw	r16,4(sp)
    b748:	dec00b04 	addi	sp,sp,44
    b74c:	f800283a 	ret
    b750:	00803fc4 	movi	r2,255
    b754:	11c5803a 	cmpltu	r2,r2,r7
    b758:	100490fa 	slli	r2,r2,3
    b75c:	003f9e06 	br	b5d8 <__alt_data_end+0xff00b5d8>
    b760:	00803fc4 	movi	r2,255
    b764:	1445803a 	cmpltu	r2,r2,r17
    b768:	100490fa 	slli	r2,r2,3
    b76c:	003fb206 	br	b638 <__alt_data_end+0xff00b638>
    b770:	00804034 	movhi	r2,256
    b774:	10bfffc4 	addi	r2,r2,-1
    b778:	11808836 	bltu	r2,r6,b99c <__udivdi3+0x51c>
    b77c:	00800404 	movi	r2,16
    b780:	003f5606 	br	b4dc <__alt_data_end+0xff00b4dc>
    b784:	30aed83a 	srl	r23,r6,r2
    b788:	3d4e983a 	sll	r7,r7,r21
    b78c:	80acd83a 	srl	r22,r16,r2
    b790:	9884d83a 	srl	r2,r19,r2
    b794:	3deeb03a 	or	r23,r7,r23
    b798:	b824d43a 	srli	r18,r23,16
    b79c:	8560983a 	sll	r16,r16,r21
    b7a0:	b009883a 	mov	r4,r22
    b7a4:	900b883a 	mov	r5,r18
    b7a8:	3568983a 	sll	r20,r6,r21
    b7ac:	1420b03a 	or	r16,r2,r16
    b7b0:	000c08c0 	call	c08c <__umodsi3>
    b7b4:	b009883a 	mov	r4,r22
    b7b8:	900b883a 	mov	r5,r18
    b7bc:	1023883a 	mov	r17,r2
    b7c0:	000c0280 	call	c028 <__udivsi3>
    b7c4:	8808943a 	slli	r4,r17,16
    b7c8:	bf3fffcc 	andi	fp,r23,65535
    b7cc:	8006d43a 	srli	r3,r16,16
    b7d0:	e0a3383a 	mul	r17,fp,r2
    b7d4:	100d883a 	mov	r6,r2
    b7d8:	1906b03a 	or	r3,r3,r4
    b7dc:	1c40042e 	bgeu	r3,r17,b7f0 <__udivdi3+0x370>
    b7e0:	1dc7883a 	add	r3,r3,r23
    b7e4:	10bfffc4 	addi	r2,r2,-1
    b7e8:	1dc0752e 	bgeu	r3,r23,b9c0 <__udivdi3+0x540>
    b7ec:	100d883a 	mov	r6,r2
    b7f0:	1c63c83a 	sub	r17,r3,r17
    b7f4:	900b883a 	mov	r5,r18
    b7f8:	8809883a 	mov	r4,r17
    b7fc:	d9800015 	stw	r6,0(sp)
    b800:	000c08c0 	call	c08c <__umodsi3>
    b804:	102d883a 	mov	r22,r2
    b808:	8809883a 	mov	r4,r17
    b80c:	900b883a 	mov	r5,r18
    b810:	000c0280 	call	c028 <__udivsi3>
    b814:	b02c943a 	slli	r22,r22,16
    b818:	e089383a 	mul	r4,fp,r2
    b81c:	843fffcc 	andi	r16,r16,65535
    b820:	85a0b03a 	or	r16,r16,r22
    b824:	d9800017 	ldw	r6,0(sp)
    b828:	8100042e 	bgeu	r16,r4,b83c <__udivdi3+0x3bc>
    b82c:	85e1883a 	add	r16,r16,r23
    b830:	10ffffc4 	addi	r3,r2,-1
    b834:	85c05e2e 	bgeu	r16,r23,b9b0 <__udivdi3+0x530>
    b838:	1805883a 	mov	r2,r3
    b83c:	300c943a 	slli	r6,r6,16
    b840:	a17fffcc 	andi	r5,r20,65535
    b844:	a028d43a 	srli	r20,r20,16
    b848:	3084b03a 	or	r2,r6,r2
    b84c:	10ffffcc 	andi	r3,r2,65535
    b850:	100cd43a 	srli	r6,r2,16
    b854:	194f383a 	mul	r7,r3,r5
    b858:	1d07383a 	mul	r3,r3,r20
    b85c:	314b383a 	mul	r5,r6,r5
    b860:	3810d43a 	srli	r8,r7,16
    b864:	8121c83a 	sub	r16,r16,r4
    b868:	1947883a 	add	r3,r3,r5
    b86c:	40c7883a 	add	r3,r8,r3
    b870:	350d383a 	mul	r6,r6,r20
    b874:	1940022e 	bgeu	r3,r5,b880 <__udivdi3+0x400>
    b878:	01000074 	movhi	r4,1
    b87c:	310d883a 	add	r6,r6,r4
    b880:	1828d43a 	srli	r20,r3,16
    b884:	a18d883a 	add	r6,r20,r6
    b888:	81803e36 	bltu	r16,r6,b984 <__udivdi3+0x504>
    b88c:	81803826 	beq	r16,r6,b970 <__udivdi3+0x4f0>
    b890:	0007883a 	mov	r3,zero
    b894:	003fa206 	br	b720 <__alt_data_end+0xff00b720>
    b898:	88e2983a 	sll	r17,r17,r3
    b89c:	80a8d83a 	srl	r20,r16,r2
    b8a0:	80e0983a 	sll	r16,r16,r3
    b8a4:	882ad43a 	srli	r21,r17,16
    b8a8:	9884d83a 	srl	r2,r19,r2
    b8ac:	a009883a 	mov	r4,r20
    b8b0:	a80b883a 	mov	r5,r21
    b8b4:	142eb03a 	or	r23,r2,r16
    b8b8:	98e4983a 	sll	r18,r19,r3
    b8bc:	000c08c0 	call	c08c <__umodsi3>
    b8c0:	a009883a 	mov	r4,r20
    b8c4:	a80b883a 	mov	r5,r21
    b8c8:	1021883a 	mov	r16,r2
    b8cc:	000c0280 	call	c028 <__udivsi3>
    b8d0:	1039883a 	mov	fp,r2
    b8d4:	8d3fffcc 	andi	r20,r17,65535
    b8d8:	8020943a 	slli	r16,r16,16
    b8dc:	b804d43a 	srli	r2,r23,16
    b8e0:	a72d383a 	mul	r22,r20,fp
    b8e4:	1404b03a 	or	r2,r2,r16
    b8e8:	1580062e 	bgeu	r2,r22,b904 <__udivdi3+0x484>
    b8ec:	1445883a 	add	r2,r2,r17
    b8f0:	e0ffffc4 	addi	r3,fp,-1
    b8f4:	14403836 	bltu	r2,r17,b9d8 <__udivdi3+0x558>
    b8f8:	1580372e 	bgeu	r2,r22,b9d8 <__udivdi3+0x558>
    b8fc:	e73fff84 	addi	fp,fp,-2
    b900:	1445883a 	add	r2,r2,r17
    b904:	15adc83a 	sub	r22,r2,r22
    b908:	a80b883a 	mov	r5,r21
    b90c:	b009883a 	mov	r4,r22
    b910:	000c08c0 	call	c08c <__umodsi3>
    b914:	1027883a 	mov	r19,r2
    b918:	b009883a 	mov	r4,r22
    b91c:	a80b883a 	mov	r5,r21
    b920:	000c0280 	call	c028 <__udivsi3>
    b924:	9826943a 	slli	r19,r19,16
    b928:	a0a1383a 	mul	r16,r20,r2
    b92c:	b93fffcc 	andi	r4,r23,65535
    b930:	24c8b03a 	or	r4,r4,r19
    b934:	2400062e 	bgeu	r4,r16,b950 <__udivdi3+0x4d0>
    b938:	2449883a 	add	r4,r4,r17
    b93c:	10ffffc4 	addi	r3,r2,-1
    b940:	24402336 	bltu	r4,r17,b9d0 <__udivdi3+0x550>
    b944:	2400222e 	bgeu	r4,r16,b9d0 <__udivdi3+0x550>
    b948:	10bfff84 	addi	r2,r2,-2
    b94c:	2449883a 	add	r4,r4,r17
    b950:	e038943a 	slli	fp,fp,16
    b954:	2421c83a 	sub	r16,r4,r16
    b958:	e086b03a 	or	r3,fp,r2
    b95c:	003f4306 	br	b66c <__alt_data_end+0xff00b66c>
    b960:	2005883a 	mov	r2,r4
    b964:	003f6906 	br	b70c <__alt_data_end+0xff00b70c>
    b968:	1805883a 	mov	r2,r3
    b96c:	003f0f06 	br	b5ac <__alt_data_end+0xff00b5ac>
    b970:	1806943a 	slli	r3,r3,16
    b974:	9d66983a 	sll	r19,r19,r21
    b978:	39ffffcc 	andi	r7,r7,65535
    b97c:	19c7883a 	add	r3,r3,r7
    b980:	98ffc32e 	bgeu	r19,r3,b890 <__alt_data_end+0xff00b890>
    b984:	10bfffc4 	addi	r2,r2,-1
    b988:	003fc106 	br	b890 <__alt_data_end+0xff00b890>
    b98c:	00800604 	movi	r2,24
    b990:	003f1106 	br	b5d8 <__alt_data_end+0xff00b5d8>
    b994:	00800604 	movi	r2,24
    b998:	003f2706 	br	b638 <__alt_data_end+0xff00b638>
    b99c:	00800604 	movi	r2,24
    b9a0:	003ece06 	br	b4dc <__alt_data_end+0xff00b4dc>
    b9a4:	0007883a 	mov	r3,zero
    b9a8:	00800044 	movi	r2,1
    b9ac:	003f5c06 	br	b720 <__alt_data_end+0xff00b720>
    b9b0:	813fa12e 	bgeu	r16,r4,b838 <__alt_data_end+0xff00b838>
    b9b4:	10bfff84 	addi	r2,r2,-2
    b9b8:	85e1883a 	add	r16,r16,r23
    b9bc:	003f9f06 	br	b83c <__alt_data_end+0xff00b83c>
    b9c0:	1c7f8a2e 	bgeu	r3,r17,b7ec <__alt_data_end+0xff00b7ec>
    b9c4:	31bfff84 	addi	r6,r6,-2
    b9c8:	1dc7883a 	add	r3,r3,r23
    b9cc:	003f8806 	br	b7f0 <__alt_data_end+0xff00b7f0>
    b9d0:	1805883a 	mov	r2,r3
    b9d4:	003fde06 	br	b950 <__alt_data_end+0xff00b950>
    b9d8:	1839883a 	mov	fp,r3
    b9dc:	003fc906 	br	b904 <__alt_data_end+0xff00b904>
    b9e0:	b5bfff84 	addi	r22,r22,-2
    b9e4:	2449883a 	add	r4,r4,r17
    b9e8:	003f3406 	br	b6bc <__alt_data_end+0xff00b6bc>
    b9ec:	b5bfff84 	addi	r22,r22,-2
    b9f0:	1445883a 	add	r2,r2,r17
    b9f4:	003edb06 	br	b564 <__alt_data_end+0xff00b564>

0000b9f8 <__umoddi3>:
    b9f8:	defff404 	addi	sp,sp,-48
    b9fc:	df000a15 	stw	fp,40(sp)
    ba00:	dc400315 	stw	r17,12(sp)
    ba04:	dc000215 	stw	r16,8(sp)
    ba08:	dfc00b15 	stw	ra,44(sp)
    ba0c:	ddc00915 	stw	r23,36(sp)
    ba10:	dd800815 	stw	r22,32(sp)
    ba14:	dd400715 	stw	r21,28(sp)
    ba18:	dd000615 	stw	r20,24(sp)
    ba1c:	dcc00515 	stw	r19,20(sp)
    ba20:	dc800415 	stw	r18,16(sp)
    ba24:	2021883a 	mov	r16,r4
    ba28:	2823883a 	mov	r17,r5
    ba2c:	2839883a 	mov	fp,r5
    ba30:	38003c1e 	bne	r7,zero,bb24 <__umoddi3+0x12c>
    ba34:	3027883a 	mov	r19,r6
    ba38:	2029883a 	mov	r20,r4
    ba3c:	2980512e 	bgeu	r5,r6,bb84 <__umoddi3+0x18c>
    ba40:	00bfffd4 	movui	r2,65535
    ba44:	11809a36 	bltu	r2,r6,bcb0 <__umoddi3+0x2b8>
    ba48:	01003fc4 	movi	r4,255
    ba4c:	2189803a 	cmpltu	r4,r4,r6
    ba50:	200890fa 	slli	r4,r4,3
    ba54:	3104d83a 	srl	r2,r6,r4
    ba58:	00c00074 	movhi	r3,1
    ba5c:	18c1c904 	addi	r3,r3,1828
    ba60:	1885883a 	add	r2,r3,r2
    ba64:	10c00003 	ldbu	r3,0(r2)
    ba68:	00800804 	movi	r2,32
    ba6c:	1909883a 	add	r4,r3,r4
    ba70:	1125c83a 	sub	r18,r2,r4
    ba74:	90000526 	beq	r18,zero,ba8c <__umoddi3+0x94>
    ba78:	8ca2983a 	sll	r17,r17,r18
    ba7c:	8108d83a 	srl	r4,r16,r4
    ba80:	34a6983a 	sll	r19,r6,r18
    ba84:	84a8983a 	sll	r20,r16,r18
    ba88:	2478b03a 	or	fp,r4,r17
    ba8c:	982ed43a 	srli	r23,r19,16
    ba90:	e009883a 	mov	r4,fp
    ba94:	9dbfffcc 	andi	r22,r19,65535
    ba98:	b80b883a 	mov	r5,r23
    ba9c:	000c08c0 	call	c08c <__umodsi3>
    baa0:	e009883a 	mov	r4,fp
    baa4:	b80b883a 	mov	r5,r23
    baa8:	102b883a 	mov	r21,r2
    baac:	000c0280 	call	c028 <__udivsi3>
    bab0:	a806943a 	slli	r3,r21,16
    bab4:	a008d43a 	srli	r4,r20,16
    bab8:	b085383a 	mul	r2,r22,r2
    babc:	20c8b03a 	or	r4,r4,r3
    bac0:	2080032e 	bgeu	r4,r2,bad0 <__umoddi3+0xd8>
    bac4:	24c9883a 	add	r4,r4,r19
    bac8:	24c00136 	bltu	r4,r19,bad0 <__umoddi3+0xd8>
    bacc:	20811036 	bltu	r4,r2,bf10 <__umoddi3+0x518>
    bad0:	20abc83a 	sub	r21,r4,r2
    bad4:	b80b883a 	mov	r5,r23
    bad8:	a809883a 	mov	r4,r21
    badc:	000c08c0 	call	c08c <__umodsi3>
    bae0:	1023883a 	mov	r17,r2
    bae4:	b80b883a 	mov	r5,r23
    bae8:	a809883a 	mov	r4,r21
    baec:	000c0280 	call	c028 <__udivsi3>
    baf0:	8822943a 	slli	r17,r17,16
    baf4:	b085383a 	mul	r2,r22,r2
    baf8:	a0ffffcc 	andi	r3,r20,65535
    bafc:	1c46b03a 	or	r3,r3,r17
    bb00:	1880042e 	bgeu	r3,r2,bb14 <__umoddi3+0x11c>
    bb04:	1cc7883a 	add	r3,r3,r19
    bb08:	1cc00236 	bltu	r3,r19,bb14 <__umoddi3+0x11c>
    bb0c:	1880012e 	bgeu	r3,r2,bb14 <__umoddi3+0x11c>
    bb10:	1cc7883a 	add	r3,r3,r19
    bb14:	1885c83a 	sub	r2,r3,r2
    bb18:	1484d83a 	srl	r2,r2,r18
    bb1c:	0007883a 	mov	r3,zero
    bb20:	00004f06 	br	bc60 <__umoddi3+0x268>
    bb24:	29c04c36 	bltu	r5,r7,bc58 <__umoddi3+0x260>
    bb28:	00bfffd4 	movui	r2,65535
    bb2c:	11c0582e 	bgeu	r2,r7,bc90 <__umoddi3+0x298>
    bb30:	00804034 	movhi	r2,256
    bb34:	10bfffc4 	addi	r2,r2,-1
    bb38:	11c0e736 	bltu	r2,r7,bed8 <__umoddi3+0x4e0>
    bb3c:	01000404 	movi	r4,16
    bb40:	3904d83a 	srl	r2,r7,r4
    bb44:	00c00074 	movhi	r3,1
    bb48:	18c1c904 	addi	r3,r3,1828
    bb4c:	1885883a 	add	r2,r3,r2
    bb50:	14c00003 	ldbu	r19,0(r2)
    bb54:	00c00804 	movi	r3,32
    bb58:	9927883a 	add	r19,r19,r4
    bb5c:	1ce9c83a 	sub	r20,r3,r19
    bb60:	a000581e 	bne	r20,zero,bcc4 <__umoddi3+0x2cc>
    bb64:	3c400136 	bltu	r7,r17,bb6c <__umoddi3+0x174>
    bb68:	8180eb36 	bltu	r16,r6,bf18 <__umoddi3+0x520>
    bb6c:	8185c83a 	sub	r2,r16,r6
    bb70:	89e3c83a 	sub	r17,r17,r7
    bb74:	8089803a 	cmpltu	r4,r16,r2
    bb78:	8939c83a 	sub	fp,r17,r4
    bb7c:	e007883a 	mov	r3,fp
    bb80:	00003706 	br	bc60 <__umoddi3+0x268>
    bb84:	3000041e 	bne	r6,zero,bb98 <__umoddi3+0x1a0>
    bb88:	000b883a 	mov	r5,zero
    bb8c:	01000044 	movi	r4,1
    bb90:	000c0280 	call	c028 <__udivsi3>
    bb94:	1027883a 	mov	r19,r2
    bb98:	00bfffd4 	movui	r2,65535
    bb9c:	14c0402e 	bgeu	r2,r19,bca0 <__umoddi3+0x2a8>
    bba0:	00804034 	movhi	r2,256
    bba4:	10bfffc4 	addi	r2,r2,-1
    bba8:	14c0cd36 	bltu	r2,r19,bee0 <__umoddi3+0x4e8>
    bbac:	00800404 	movi	r2,16
    bbb0:	9886d83a 	srl	r3,r19,r2
    bbb4:	01000074 	movhi	r4,1
    bbb8:	2101c904 	addi	r4,r4,1828
    bbbc:	20c7883a 	add	r3,r4,r3
    bbc0:	18c00003 	ldbu	r3,0(r3)
    bbc4:	1887883a 	add	r3,r3,r2
    bbc8:	00800804 	movi	r2,32
    bbcc:	10e5c83a 	sub	r18,r2,r3
    bbd0:	9000901e 	bne	r18,zero,be14 <__umoddi3+0x41c>
    bbd4:	982cd43a 	srli	r22,r19,16
    bbd8:	8ce3c83a 	sub	r17,r17,r19
    bbdc:	9d7fffcc 	andi	r21,r19,65535
    bbe0:	b00b883a 	mov	r5,r22
    bbe4:	8809883a 	mov	r4,r17
    bbe8:	000c08c0 	call	c08c <__umodsi3>
    bbec:	8809883a 	mov	r4,r17
    bbf0:	b00b883a 	mov	r5,r22
    bbf4:	1021883a 	mov	r16,r2
    bbf8:	000c0280 	call	c028 <__udivsi3>
    bbfc:	8006943a 	slli	r3,r16,16
    bc00:	a008d43a 	srli	r4,r20,16
    bc04:	1545383a 	mul	r2,r2,r21
    bc08:	20c8b03a 	or	r4,r4,r3
    bc0c:	2080042e 	bgeu	r4,r2,bc20 <__umoddi3+0x228>
    bc10:	24c9883a 	add	r4,r4,r19
    bc14:	24c00236 	bltu	r4,r19,bc20 <__umoddi3+0x228>
    bc18:	2080012e 	bgeu	r4,r2,bc20 <__umoddi3+0x228>
    bc1c:	24c9883a 	add	r4,r4,r19
    bc20:	20a1c83a 	sub	r16,r4,r2
    bc24:	b00b883a 	mov	r5,r22
    bc28:	8009883a 	mov	r4,r16
    bc2c:	000c08c0 	call	c08c <__umodsi3>
    bc30:	1023883a 	mov	r17,r2
    bc34:	b00b883a 	mov	r5,r22
    bc38:	8009883a 	mov	r4,r16
    bc3c:	000c0280 	call	c028 <__udivsi3>
    bc40:	8822943a 	slli	r17,r17,16
    bc44:	1545383a 	mul	r2,r2,r21
    bc48:	a53fffcc 	andi	r20,r20,65535
    bc4c:	a446b03a 	or	r3,r20,r17
    bc50:	18bfb02e 	bgeu	r3,r2,bb14 <__alt_data_end+0xff00bb14>
    bc54:	003fab06 	br	bb04 <__alt_data_end+0xff00bb04>
    bc58:	2005883a 	mov	r2,r4
    bc5c:	2807883a 	mov	r3,r5
    bc60:	dfc00b17 	ldw	ra,44(sp)
    bc64:	df000a17 	ldw	fp,40(sp)
    bc68:	ddc00917 	ldw	r23,36(sp)
    bc6c:	dd800817 	ldw	r22,32(sp)
    bc70:	dd400717 	ldw	r21,28(sp)
    bc74:	dd000617 	ldw	r20,24(sp)
    bc78:	dcc00517 	ldw	r19,20(sp)
    bc7c:	dc800417 	ldw	r18,16(sp)
    bc80:	dc400317 	ldw	r17,12(sp)
    bc84:	dc000217 	ldw	r16,8(sp)
    bc88:	dec00c04 	addi	sp,sp,48
    bc8c:	f800283a 	ret
    bc90:	04c03fc4 	movi	r19,255
    bc94:	99c9803a 	cmpltu	r4,r19,r7
    bc98:	200890fa 	slli	r4,r4,3
    bc9c:	003fa806 	br	bb40 <__alt_data_end+0xff00bb40>
    bca0:	00803fc4 	movi	r2,255
    bca4:	14c5803a 	cmpltu	r2,r2,r19
    bca8:	100490fa 	slli	r2,r2,3
    bcac:	003fc006 	br	bbb0 <__alt_data_end+0xff00bbb0>
    bcb0:	00804034 	movhi	r2,256
    bcb4:	10bfffc4 	addi	r2,r2,-1
    bcb8:	11808b36 	bltu	r2,r6,bee8 <__umoddi3+0x4f0>
    bcbc:	01000404 	movi	r4,16
    bcc0:	003f6406 	br	ba54 <__alt_data_end+0xff00ba54>
    bcc4:	34c4d83a 	srl	r2,r6,r19
    bcc8:	3d0e983a 	sll	r7,r7,r20
    bccc:	8cf8d83a 	srl	fp,r17,r19
    bcd0:	8d10983a 	sll	r8,r17,r20
    bcd4:	38aab03a 	or	r21,r7,r2
    bcd8:	a82cd43a 	srli	r22,r21,16
    bcdc:	84e2d83a 	srl	r17,r16,r19
    bce0:	e009883a 	mov	r4,fp
    bce4:	b00b883a 	mov	r5,r22
    bce8:	8a22b03a 	or	r17,r17,r8
    bcec:	3524983a 	sll	r18,r6,r20
    bcf0:	000c08c0 	call	c08c <__umodsi3>
    bcf4:	e009883a 	mov	r4,fp
    bcf8:	b00b883a 	mov	r5,r22
    bcfc:	102f883a 	mov	r23,r2
    bd00:	000c0280 	call	c028 <__udivsi3>
    bd04:	100d883a 	mov	r6,r2
    bd08:	b808943a 	slli	r4,r23,16
    bd0c:	aa3fffcc 	andi	r8,r21,65535
    bd10:	8804d43a 	srli	r2,r17,16
    bd14:	41af383a 	mul	r23,r8,r6
    bd18:	8520983a 	sll	r16,r16,r20
    bd1c:	1104b03a 	or	r2,r2,r4
    bd20:	15c0042e 	bgeu	r2,r23,bd34 <__umoddi3+0x33c>
    bd24:	1545883a 	add	r2,r2,r21
    bd28:	30ffffc4 	addi	r3,r6,-1
    bd2c:	1540742e 	bgeu	r2,r21,bf00 <__umoddi3+0x508>
    bd30:	180d883a 	mov	r6,r3
    bd34:	15efc83a 	sub	r23,r2,r23
    bd38:	b00b883a 	mov	r5,r22
    bd3c:	b809883a 	mov	r4,r23
    bd40:	d9800115 	stw	r6,4(sp)
    bd44:	da000015 	stw	r8,0(sp)
    bd48:	000c08c0 	call	c08c <__umodsi3>
    bd4c:	b00b883a 	mov	r5,r22
    bd50:	b809883a 	mov	r4,r23
    bd54:	1039883a 	mov	fp,r2
    bd58:	000c0280 	call	c028 <__udivsi3>
    bd5c:	da000017 	ldw	r8,0(sp)
    bd60:	e038943a 	slli	fp,fp,16
    bd64:	100b883a 	mov	r5,r2
    bd68:	4089383a 	mul	r4,r8,r2
    bd6c:	8a3fffcc 	andi	r8,r17,65535
    bd70:	4710b03a 	or	r8,r8,fp
    bd74:	d9800117 	ldw	r6,4(sp)
    bd78:	4100042e 	bgeu	r8,r4,bd8c <__umoddi3+0x394>
    bd7c:	4551883a 	add	r8,r8,r21
    bd80:	10bfffc4 	addi	r2,r2,-1
    bd84:	45405a2e 	bgeu	r8,r21,bef0 <__umoddi3+0x4f8>
    bd88:	100b883a 	mov	r5,r2
    bd8c:	300c943a 	slli	r6,r6,16
    bd90:	91ffffcc 	andi	r7,r18,65535
    bd94:	9004d43a 	srli	r2,r18,16
    bd98:	314cb03a 	or	r6,r6,r5
    bd9c:	317fffcc 	andi	r5,r6,65535
    bda0:	300cd43a 	srli	r6,r6,16
    bda4:	29d3383a 	mul	r9,r5,r7
    bda8:	288b383a 	mul	r5,r5,r2
    bdac:	31cf383a 	mul	r7,r6,r7
    bdb0:	4806d43a 	srli	r3,r9,16
    bdb4:	4111c83a 	sub	r8,r8,r4
    bdb8:	29cb883a 	add	r5,r5,r7
    bdbc:	194b883a 	add	r5,r3,r5
    bdc0:	3085383a 	mul	r2,r6,r2
    bdc4:	29c0022e 	bgeu	r5,r7,bdd0 <__umoddi3+0x3d8>
    bdc8:	00c00074 	movhi	r3,1
    bdcc:	10c5883a 	add	r2,r2,r3
    bdd0:	2808d43a 	srli	r4,r5,16
    bdd4:	280a943a 	slli	r5,r5,16
    bdd8:	4a7fffcc 	andi	r9,r9,65535
    bddc:	2085883a 	add	r2,r4,r2
    bde0:	2a4b883a 	add	r5,r5,r9
    bde4:	40803636 	bltu	r8,r2,bec0 <__umoddi3+0x4c8>
    bde8:	40804d26 	beq	r8,r2,bf20 <__umoddi3+0x528>
    bdec:	4089c83a 	sub	r4,r8,r2
    bdf0:	280f883a 	mov	r7,r5
    bdf4:	81cfc83a 	sub	r7,r16,r7
    bdf8:	81c7803a 	cmpltu	r3,r16,r7
    bdfc:	20c7c83a 	sub	r3,r4,r3
    be00:	1cc4983a 	sll	r2,r3,r19
    be04:	3d0ed83a 	srl	r7,r7,r20
    be08:	1d06d83a 	srl	r3,r3,r20
    be0c:	11c4b03a 	or	r2,r2,r7
    be10:	003f9306 	br	bc60 <__alt_data_end+0xff00bc60>
    be14:	9ca6983a 	sll	r19,r19,r18
    be18:	88e8d83a 	srl	r20,r17,r3
    be1c:	80c4d83a 	srl	r2,r16,r3
    be20:	982cd43a 	srli	r22,r19,16
    be24:	8ca2983a 	sll	r17,r17,r18
    be28:	a009883a 	mov	r4,r20
    be2c:	b00b883a 	mov	r5,r22
    be30:	1478b03a 	or	fp,r2,r17
    be34:	000c08c0 	call	c08c <__umodsi3>
    be38:	a009883a 	mov	r4,r20
    be3c:	b00b883a 	mov	r5,r22
    be40:	1023883a 	mov	r17,r2
    be44:	000c0280 	call	c028 <__udivsi3>
    be48:	9d7fffcc 	andi	r21,r19,65535
    be4c:	880a943a 	slli	r5,r17,16
    be50:	e008d43a 	srli	r4,fp,16
    be54:	a885383a 	mul	r2,r21,r2
    be58:	84a8983a 	sll	r20,r16,r18
    be5c:	2148b03a 	or	r4,r4,r5
    be60:	2080042e 	bgeu	r4,r2,be74 <__umoddi3+0x47c>
    be64:	24c9883a 	add	r4,r4,r19
    be68:	24c00236 	bltu	r4,r19,be74 <__umoddi3+0x47c>
    be6c:	2080012e 	bgeu	r4,r2,be74 <__umoddi3+0x47c>
    be70:	24c9883a 	add	r4,r4,r19
    be74:	20a3c83a 	sub	r17,r4,r2
    be78:	b00b883a 	mov	r5,r22
    be7c:	8809883a 	mov	r4,r17
    be80:	000c08c0 	call	c08c <__umodsi3>
    be84:	102f883a 	mov	r23,r2
    be88:	8809883a 	mov	r4,r17
    be8c:	b00b883a 	mov	r5,r22
    be90:	000c0280 	call	c028 <__udivsi3>
    be94:	b82e943a 	slli	r23,r23,16
    be98:	a885383a 	mul	r2,r21,r2
    be9c:	e13fffcc 	andi	r4,fp,65535
    bea0:	25c8b03a 	or	r4,r4,r23
    bea4:	2080042e 	bgeu	r4,r2,beb8 <__umoddi3+0x4c0>
    bea8:	24c9883a 	add	r4,r4,r19
    beac:	24c00236 	bltu	r4,r19,beb8 <__umoddi3+0x4c0>
    beb0:	2080012e 	bgeu	r4,r2,beb8 <__umoddi3+0x4c0>
    beb4:	24c9883a 	add	r4,r4,r19
    beb8:	20a3c83a 	sub	r17,r4,r2
    bebc:	003f4806 	br	bbe0 <__alt_data_end+0xff00bbe0>
    bec0:	2c8fc83a 	sub	r7,r5,r18
    bec4:	1545c83a 	sub	r2,r2,r21
    bec8:	29cb803a 	cmpltu	r5,r5,r7
    becc:	1145c83a 	sub	r2,r2,r5
    bed0:	4089c83a 	sub	r4,r8,r2
    bed4:	003fc706 	br	bdf4 <__alt_data_end+0xff00bdf4>
    bed8:	01000604 	movi	r4,24
    bedc:	003f1806 	br	bb40 <__alt_data_end+0xff00bb40>
    bee0:	00800604 	movi	r2,24
    bee4:	003f3206 	br	bbb0 <__alt_data_end+0xff00bbb0>
    bee8:	01000604 	movi	r4,24
    beec:	003ed906 	br	ba54 <__alt_data_end+0xff00ba54>
    bef0:	413fa52e 	bgeu	r8,r4,bd88 <__alt_data_end+0xff00bd88>
    bef4:	297fff84 	addi	r5,r5,-2
    bef8:	4551883a 	add	r8,r8,r21
    befc:	003fa306 	br	bd8c <__alt_data_end+0xff00bd8c>
    bf00:	15ff8b2e 	bgeu	r2,r23,bd30 <__alt_data_end+0xff00bd30>
    bf04:	31bfff84 	addi	r6,r6,-2
    bf08:	1545883a 	add	r2,r2,r21
    bf0c:	003f8906 	br	bd34 <__alt_data_end+0xff00bd34>
    bf10:	24c9883a 	add	r4,r4,r19
    bf14:	003eee06 	br	bad0 <__alt_data_end+0xff00bad0>
    bf18:	8005883a 	mov	r2,r16
    bf1c:	003f1706 	br	bb7c <__alt_data_end+0xff00bb7c>
    bf20:	817fe736 	bltu	r16,r5,bec0 <__alt_data_end+0xff00bec0>
    bf24:	280f883a 	mov	r7,r5
    bf28:	0009883a 	mov	r4,zero
    bf2c:	003fb106 	br	bdf4 <__alt_data_end+0xff00bdf4>

0000bf30 <__divsi3>:
    bf30:	20001b16 	blt	r4,zero,bfa0 <__divsi3+0x70>
    bf34:	000f883a 	mov	r7,zero
    bf38:	28001616 	blt	r5,zero,bf94 <__divsi3+0x64>
    bf3c:	200d883a 	mov	r6,r4
    bf40:	29001a2e 	bgeu	r5,r4,bfac <__divsi3+0x7c>
    bf44:	00800804 	movi	r2,32
    bf48:	00c00044 	movi	r3,1
    bf4c:	00000106 	br	bf54 <__divsi3+0x24>
    bf50:	10000d26 	beq	r2,zero,bf88 <__divsi3+0x58>
    bf54:	294b883a 	add	r5,r5,r5
    bf58:	10bfffc4 	addi	r2,r2,-1
    bf5c:	18c7883a 	add	r3,r3,r3
    bf60:	293ffb36 	bltu	r5,r4,bf50 <__alt_data_end+0xff00bf50>
    bf64:	0005883a 	mov	r2,zero
    bf68:	18000726 	beq	r3,zero,bf88 <__divsi3+0x58>
    bf6c:	0005883a 	mov	r2,zero
    bf70:	31400236 	bltu	r6,r5,bf7c <__divsi3+0x4c>
    bf74:	314dc83a 	sub	r6,r6,r5
    bf78:	10c4b03a 	or	r2,r2,r3
    bf7c:	1806d07a 	srli	r3,r3,1
    bf80:	280ad07a 	srli	r5,r5,1
    bf84:	183ffa1e 	bne	r3,zero,bf70 <__alt_data_end+0xff00bf70>
    bf88:	38000126 	beq	r7,zero,bf90 <__divsi3+0x60>
    bf8c:	0085c83a 	sub	r2,zero,r2
    bf90:	f800283a 	ret
    bf94:	014bc83a 	sub	r5,zero,r5
    bf98:	39c0005c 	xori	r7,r7,1
    bf9c:	003fe706 	br	bf3c <__alt_data_end+0xff00bf3c>
    bfa0:	0109c83a 	sub	r4,zero,r4
    bfa4:	01c00044 	movi	r7,1
    bfa8:	003fe306 	br	bf38 <__alt_data_end+0xff00bf38>
    bfac:	00c00044 	movi	r3,1
    bfb0:	003fee06 	br	bf6c <__alt_data_end+0xff00bf6c>

0000bfb4 <__modsi3>:
    bfb4:	20001716 	blt	r4,zero,c014 <__modsi3+0x60>
    bfb8:	000f883a 	mov	r7,zero
    bfbc:	2005883a 	mov	r2,r4
    bfc0:	28001216 	blt	r5,zero,c00c <__modsi3+0x58>
    bfc4:	2900162e 	bgeu	r5,r4,c020 <__modsi3+0x6c>
    bfc8:	01800804 	movi	r6,32
    bfcc:	00c00044 	movi	r3,1
    bfd0:	00000106 	br	bfd8 <__modsi3+0x24>
    bfd4:	30000a26 	beq	r6,zero,c000 <__modsi3+0x4c>
    bfd8:	294b883a 	add	r5,r5,r5
    bfdc:	31bfffc4 	addi	r6,r6,-1
    bfe0:	18c7883a 	add	r3,r3,r3
    bfe4:	293ffb36 	bltu	r5,r4,bfd4 <__alt_data_end+0xff00bfd4>
    bfe8:	18000526 	beq	r3,zero,c000 <__modsi3+0x4c>
    bfec:	1806d07a 	srli	r3,r3,1
    bff0:	11400136 	bltu	r2,r5,bff8 <__modsi3+0x44>
    bff4:	1145c83a 	sub	r2,r2,r5
    bff8:	280ad07a 	srli	r5,r5,1
    bffc:	183ffb1e 	bne	r3,zero,bfec <__alt_data_end+0xff00bfec>
    c000:	38000126 	beq	r7,zero,c008 <__modsi3+0x54>
    c004:	0085c83a 	sub	r2,zero,r2
    c008:	f800283a 	ret
    c00c:	014bc83a 	sub	r5,zero,r5
    c010:	003fec06 	br	bfc4 <__alt_data_end+0xff00bfc4>
    c014:	0109c83a 	sub	r4,zero,r4
    c018:	01c00044 	movi	r7,1
    c01c:	003fe706 	br	bfbc <__alt_data_end+0xff00bfbc>
    c020:	00c00044 	movi	r3,1
    c024:	003ff106 	br	bfec <__alt_data_end+0xff00bfec>

0000c028 <__udivsi3>:
    c028:	200d883a 	mov	r6,r4
    c02c:	2900152e 	bgeu	r5,r4,c084 <__udivsi3+0x5c>
    c030:	28001416 	blt	r5,zero,c084 <__udivsi3+0x5c>
    c034:	00800804 	movi	r2,32
    c038:	00c00044 	movi	r3,1
    c03c:	00000206 	br	c048 <__udivsi3+0x20>
    c040:	10000e26 	beq	r2,zero,c07c <__udivsi3+0x54>
    c044:	28000516 	blt	r5,zero,c05c <__udivsi3+0x34>
    c048:	294b883a 	add	r5,r5,r5
    c04c:	10bfffc4 	addi	r2,r2,-1
    c050:	18c7883a 	add	r3,r3,r3
    c054:	293ffa36 	bltu	r5,r4,c040 <__alt_data_end+0xff00c040>
    c058:	18000826 	beq	r3,zero,c07c <__udivsi3+0x54>
    c05c:	0005883a 	mov	r2,zero
    c060:	31400236 	bltu	r6,r5,c06c <__udivsi3+0x44>
    c064:	314dc83a 	sub	r6,r6,r5
    c068:	10c4b03a 	or	r2,r2,r3
    c06c:	1806d07a 	srli	r3,r3,1
    c070:	280ad07a 	srli	r5,r5,1
    c074:	183ffa1e 	bne	r3,zero,c060 <__alt_data_end+0xff00c060>
    c078:	f800283a 	ret
    c07c:	0005883a 	mov	r2,zero
    c080:	f800283a 	ret
    c084:	00c00044 	movi	r3,1
    c088:	003ff406 	br	c05c <__alt_data_end+0xff00c05c>

0000c08c <__umodsi3>:
    c08c:	2005883a 	mov	r2,r4
    c090:	2900122e 	bgeu	r5,r4,c0dc <__umodsi3+0x50>
    c094:	28001116 	blt	r5,zero,c0dc <__umodsi3+0x50>
    c098:	01800804 	movi	r6,32
    c09c:	00c00044 	movi	r3,1
    c0a0:	00000206 	br	c0ac <__umodsi3+0x20>
    c0a4:	30000c26 	beq	r6,zero,c0d8 <__umodsi3+0x4c>
    c0a8:	28000516 	blt	r5,zero,c0c0 <__umodsi3+0x34>
    c0ac:	294b883a 	add	r5,r5,r5
    c0b0:	31bfffc4 	addi	r6,r6,-1
    c0b4:	18c7883a 	add	r3,r3,r3
    c0b8:	293ffa36 	bltu	r5,r4,c0a4 <__alt_data_end+0xff00c0a4>
    c0bc:	18000626 	beq	r3,zero,c0d8 <__umodsi3+0x4c>
    c0c0:	1806d07a 	srli	r3,r3,1
    c0c4:	11400136 	bltu	r2,r5,c0cc <__umodsi3+0x40>
    c0c8:	1145c83a 	sub	r2,r2,r5
    c0cc:	280ad07a 	srli	r5,r5,1
    c0d0:	183ffb1e 	bne	r3,zero,c0c0 <__alt_data_end+0xff00c0c0>
    c0d4:	f800283a 	ret
    c0d8:	f800283a 	ret
    c0dc:	00c00044 	movi	r3,1
    c0e0:	003ff706 	br	c0c0 <__alt_data_end+0xff00c0c0>

0000c0e4 <__adddf3>:
    c0e4:	02c00434 	movhi	r11,16
    c0e8:	5affffc4 	addi	r11,r11,-1
    c0ec:	2806d7fa 	srli	r3,r5,31
    c0f0:	2ad4703a 	and	r10,r5,r11
    c0f4:	3ad2703a 	and	r9,r7,r11
    c0f8:	3804d53a 	srli	r2,r7,20
    c0fc:	3018d77a 	srli	r12,r6,29
    c100:	280ad53a 	srli	r5,r5,20
    c104:	501490fa 	slli	r10,r10,3
    c108:	2010d77a 	srli	r8,r4,29
    c10c:	481290fa 	slli	r9,r9,3
    c110:	380ed7fa 	srli	r7,r7,31
    c114:	defffb04 	addi	sp,sp,-20
    c118:	dc800215 	stw	r18,8(sp)
    c11c:	dc400115 	stw	r17,4(sp)
    c120:	dc000015 	stw	r16,0(sp)
    c124:	dfc00415 	stw	ra,16(sp)
    c128:	dcc00315 	stw	r19,12(sp)
    c12c:	1c803fcc 	andi	r18,r3,255
    c130:	2c01ffcc 	andi	r16,r5,2047
    c134:	5210b03a 	or	r8,r10,r8
    c138:	202290fa 	slli	r17,r4,3
    c13c:	1081ffcc 	andi	r2,r2,2047
    c140:	4b12b03a 	or	r9,r9,r12
    c144:	300c90fa 	slli	r6,r6,3
    c148:	91c07526 	beq	r18,r7,c320 <__adddf3+0x23c>
    c14c:	8087c83a 	sub	r3,r16,r2
    c150:	00c0ab0e 	bge	zero,r3,c400 <__adddf3+0x31c>
    c154:	10002a1e 	bne	r2,zero,c200 <__adddf3+0x11c>
    c158:	4984b03a 	or	r2,r9,r6
    c15c:	1000961e 	bne	r2,zero,c3b8 <__adddf3+0x2d4>
    c160:	888001cc 	andi	r2,r17,7
    c164:	10000726 	beq	r2,zero,c184 <__adddf3+0xa0>
    c168:	888003cc 	andi	r2,r17,15
    c16c:	00c00104 	movi	r3,4
    c170:	10c00426 	beq	r2,r3,c184 <__adddf3+0xa0>
    c174:	88c7883a 	add	r3,r17,r3
    c178:	1c63803a 	cmpltu	r17,r3,r17
    c17c:	4451883a 	add	r8,r8,r17
    c180:	1823883a 	mov	r17,r3
    c184:	4080202c 	andhi	r2,r8,128
    c188:	10005926 	beq	r2,zero,c2f0 <__adddf3+0x20c>
    c18c:	84000044 	addi	r16,r16,1
    c190:	0081ffc4 	movi	r2,2047
    c194:	8080ba26 	beq	r16,r2,c480 <__adddf3+0x39c>
    c198:	00bfe034 	movhi	r2,65408
    c19c:	10bfffc4 	addi	r2,r2,-1
    c1a0:	4090703a 	and	r8,r8,r2
    c1a4:	4004977a 	slli	r2,r8,29
    c1a8:	4010927a 	slli	r8,r8,9
    c1ac:	8822d0fa 	srli	r17,r17,3
    c1b0:	8401ffcc 	andi	r16,r16,2047
    c1b4:	4010d33a 	srli	r8,r8,12
    c1b8:	9007883a 	mov	r3,r18
    c1bc:	1444b03a 	or	r2,r2,r17
    c1c0:	8401ffcc 	andi	r16,r16,2047
    c1c4:	8020953a 	slli	r16,r16,20
    c1c8:	18c03fcc 	andi	r3,r3,255
    c1cc:	01000434 	movhi	r4,16
    c1d0:	213fffc4 	addi	r4,r4,-1
    c1d4:	180697fa 	slli	r3,r3,31
    c1d8:	4110703a 	and	r8,r8,r4
    c1dc:	4410b03a 	or	r8,r8,r16
    c1e0:	40c6b03a 	or	r3,r8,r3
    c1e4:	dfc00417 	ldw	ra,16(sp)
    c1e8:	dcc00317 	ldw	r19,12(sp)
    c1ec:	dc800217 	ldw	r18,8(sp)
    c1f0:	dc400117 	ldw	r17,4(sp)
    c1f4:	dc000017 	ldw	r16,0(sp)
    c1f8:	dec00504 	addi	sp,sp,20
    c1fc:	f800283a 	ret
    c200:	0081ffc4 	movi	r2,2047
    c204:	80bfd626 	beq	r16,r2,c160 <__alt_data_end+0xff00c160>
    c208:	4a402034 	orhi	r9,r9,128
    c20c:	00800e04 	movi	r2,56
    c210:	10c09f16 	blt	r2,r3,c490 <__adddf3+0x3ac>
    c214:	008007c4 	movi	r2,31
    c218:	10c0c216 	blt	r2,r3,c524 <__adddf3+0x440>
    c21c:	00800804 	movi	r2,32
    c220:	10c5c83a 	sub	r2,r2,r3
    c224:	488a983a 	sll	r5,r9,r2
    c228:	30c8d83a 	srl	r4,r6,r3
    c22c:	3084983a 	sll	r2,r6,r2
    c230:	48c6d83a 	srl	r3,r9,r3
    c234:	290cb03a 	or	r6,r5,r4
    c238:	1004c03a 	cmpne	r2,r2,zero
    c23c:	308cb03a 	or	r6,r6,r2
    c240:	898dc83a 	sub	r6,r17,r6
    c244:	89a3803a 	cmpltu	r17,r17,r6
    c248:	40d1c83a 	sub	r8,r8,r3
    c24c:	4451c83a 	sub	r8,r8,r17
    c250:	3023883a 	mov	r17,r6
    c254:	4080202c 	andhi	r2,r8,128
    c258:	10002326 	beq	r2,zero,c2e8 <__adddf3+0x204>
    c25c:	04c02034 	movhi	r19,128
    c260:	9cffffc4 	addi	r19,r19,-1
    c264:	44e6703a 	and	r19,r8,r19
    c268:	98007626 	beq	r19,zero,c444 <__adddf3+0x360>
    c26c:	9809883a 	mov	r4,r19
    c270:	000e6e80 	call	e6e8 <__clzsi2>
    c274:	10fffe04 	addi	r3,r2,-8
    c278:	010007c4 	movi	r4,31
    c27c:	20c07716 	blt	r4,r3,c45c <__adddf3+0x378>
    c280:	00800804 	movi	r2,32
    c284:	10c5c83a 	sub	r2,r2,r3
    c288:	8884d83a 	srl	r2,r17,r2
    c28c:	98d0983a 	sll	r8,r19,r3
    c290:	88e2983a 	sll	r17,r17,r3
    c294:	1204b03a 	or	r2,r2,r8
    c298:	1c007416 	blt	r3,r16,c46c <__adddf3+0x388>
    c29c:	1c21c83a 	sub	r16,r3,r16
    c2a0:	82000044 	addi	r8,r16,1
    c2a4:	00c007c4 	movi	r3,31
    c2a8:	1a009116 	blt	r3,r8,c4f0 <__adddf3+0x40c>
    c2ac:	00c00804 	movi	r3,32
    c2b0:	1a07c83a 	sub	r3,r3,r8
    c2b4:	8a08d83a 	srl	r4,r17,r8
    c2b8:	88e2983a 	sll	r17,r17,r3
    c2bc:	10c6983a 	sll	r3,r2,r3
    c2c0:	1210d83a 	srl	r8,r2,r8
    c2c4:	8804c03a 	cmpne	r2,r17,zero
    c2c8:	1906b03a 	or	r3,r3,r4
    c2cc:	18a2b03a 	or	r17,r3,r2
    c2d0:	0021883a 	mov	r16,zero
    c2d4:	003fa206 	br	c160 <__alt_data_end+0xff00c160>
    c2d8:	1890b03a 	or	r8,r3,r2
    c2dc:	40017d26 	beq	r8,zero,c8d4 <__adddf3+0x7f0>
    c2e0:	1011883a 	mov	r8,r2
    c2e4:	1823883a 	mov	r17,r3
    c2e8:	888001cc 	andi	r2,r17,7
    c2ec:	103f9e1e 	bne	r2,zero,c168 <__alt_data_end+0xff00c168>
    c2f0:	4004977a 	slli	r2,r8,29
    c2f4:	8822d0fa 	srli	r17,r17,3
    c2f8:	4010d0fa 	srli	r8,r8,3
    c2fc:	9007883a 	mov	r3,r18
    c300:	1444b03a 	or	r2,r2,r17
    c304:	0101ffc4 	movi	r4,2047
    c308:	81002426 	beq	r16,r4,c39c <__adddf3+0x2b8>
    c30c:	8120703a 	and	r16,r16,r4
    c310:	01000434 	movhi	r4,16
    c314:	213fffc4 	addi	r4,r4,-1
    c318:	4110703a 	and	r8,r8,r4
    c31c:	003fa806 	br	c1c0 <__alt_data_end+0xff00c1c0>
    c320:	8089c83a 	sub	r4,r16,r2
    c324:	01005e0e 	bge	zero,r4,c4a0 <__adddf3+0x3bc>
    c328:	10002b26 	beq	r2,zero,c3d8 <__adddf3+0x2f4>
    c32c:	0081ffc4 	movi	r2,2047
    c330:	80bf8b26 	beq	r16,r2,c160 <__alt_data_end+0xff00c160>
    c334:	4a402034 	orhi	r9,r9,128
    c338:	00800e04 	movi	r2,56
    c33c:	1100a40e 	bge	r2,r4,c5d0 <__adddf3+0x4ec>
    c340:	498cb03a 	or	r6,r9,r6
    c344:	300ac03a 	cmpne	r5,r6,zero
    c348:	0013883a 	mov	r9,zero
    c34c:	2c4b883a 	add	r5,r5,r17
    c350:	2c63803a 	cmpltu	r17,r5,r17
    c354:	4a11883a 	add	r8,r9,r8
    c358:	8a11883a 	add	r8,r17,r8
    c35c:	2823883a 	mov	r17,r5
    c360:	4080202c 	andhi	r2,r8,128
    c364:	103fe026 	beq	r2,zero,c2e8 <__alt_data_end+0xff00c2e8>
    c368:	84000044 	addi	r16,r16,1
    c36c:	0081ffc4 	movi	r2,2047
    c370:	8080d226 	beq	r16,r2,c6bc <__adddf3+0x5d8>
    c374:	00bfe034 	movhi	r2,65408
    c378:	10bfffc4 	addi	r2,r2,-1
    c37c:	4090703a 	and	r8,r8,r2
    c380:	880ad07a 	srli	r5,r17,1
    c384:	400897fa 	slli	r4,r8,31
    c388:	88c0004c 	andi	r3,r17,1
    c38c:	28e2b03a 	or	r17,r5,r3
    c390:	4010d07a 	srli	r8,r8,1
    c394:	2462b03a 	or	r17,r4,r17
    c398:	003f7106 	br	c160 <__alt_data_end+0xff00c160>
    c39c:	4088b03a 	or	r4,r8,r2
    c3a0:	20014526 	beq	r4,zero,c8b8 <__adddf3+0x7d4>
    c3a4:	01000434 	movhi	r4,16
    c3a8:	42000234 	orhi	r8,r8,8
    c3ac:	213fffc4 	addi	r4,r4,-1
    c3b0:	4110703a 	and	r8,r8,r4
    c3b4:	003f8206 	br	c1c0 <__alt_data_end+0xff00c1c0>
    c3b8:	18ffffc4 	addi	r3,r3,-1
    c3bc:	1800491e 	bne	r3,zero,c4e4 <__adddf3+0x400>
    c3c0:	898bc83a 	sub	r5,r17,r6
    c3c4:	8963803a 	cmpltu	r17,r17,r5
    c3c8:	4251c83a 	sub	r8,r8,r9
    c3cc:	4451c83a 	sub	r8,r8,r17
    c3d0:	2823883a 	mov	r17,r5
    c3d4:	003f9f06 	br	c254 <__alt_data_end+0xff00c254>
    c3d8:	4984b03a 	or	r2,r9,r6
    c3dc:	103f6026 	beq	r2,zero,c160 <__alt_data_end+0xff00c160>
    c3e0:	213fffc4 	addi	r4,r4,-1
    c3e4:	2000931e 	bne	r4,zero,c634 <__adddf3+0x550>
    c3e8:	898d883a 	add	r6,r17,r6
    c3ec:	3463803a 	cmpltu	r17,r6,r17
    c3f0:	4251883a 	add	r8,r8,r9
    c3f4:	8a11883a 	add	r8,r17,r8
    c3f8:	3023883a 	mov	r17,r6
    c3fc:	003fd806 	br	c360 <__alt_data_end+0xff00c360>
    c400:	1800541e 	bne	r3,zero,c554 <__adddf3+0x470>
    c404:	80800044 	addi	r2,r16,1
    c408:	1081ffcc 	andi	r2,r2,2047
    c40c:	00c00044 	movi	r3,1
    c410:	1880a00e 	bge	r3,r2,c694 <__adddf3+0x5b0>
    c414:	8989c83a 	sub	r4,r17,r6
    c418:	8905803a 	cmpltu	r2,r17,r4
    c41c:	4267c83a 	sub	r19,r8,r9
    c420:	98a7c83a 	sub	r19,r19,r2
    c424:	9880202c 	andhi	r2,r19,128
    c428:	10006326 	beq	r2,zero,c5b8 <__adddf3+0x4d4>
    c42c:	3463c83a 	sub	r17,r6,r17
    c430:	4a07c83a 	sub	r3,r9,r8
    c434:	344d803a 	cmpltu	r6,r6,r17
    c438:	19a7c83a 	sub	r19,r3,r6
    c43c:	3825883a 	mov	r18,r7
    c440:	983f8a1e 	bne	r19,zero,c26c <__alt_data_end+0xff00c26c>
    c444:	8809883a 	mov	r4,r17
    c448:	000e6e80 	call	e6e8 <__clzsi2>
    c44c:	10800804 	addi	r2,r2,32
    c450:	10fffe04 	addi	r3,r2,-8
    c454:	010007c4 	movi	r4,31
    c458:	20ff890e 	bge	r4,r3,c280 <__alt_data_end+0xff00c280>
    c45c:	10bff604 	addi	r2,r2,-40
    c460:	8884983a 	sll	r2,r17,r2
    c464:	0023883a 	mov	r17,zero
    c468:	1c3f8c0e 	bge	r3,r16,c29c <__alt_data_end+0xff00c29c>
    c46c:	023fe034 	movhi	r8,65408
    c470:	423fffc4 	addi	r8,r8,-1
    c474:	80e1c83a 	sub	r16,r16,r3
    c478:	1210703a 	and	r8,r2,r8
    c47c:	003f3806 	br	c160 <__alt_data_end+0xff00c160>
    c480:	9007883a 	mov	r3,r18
    c484:	0011883a 	mov	r8,zero
    c488:	0005883a 	mov	r2,zero
    c48c:	003f4c06 	br	c1c0 <__alt_data_end+0xff00c1c0>
    c490:	498cb03a 	or	r6,r9,r6
    c494:	300cc03a 	cmpne	r6,r6,zero
    c498:	0007883a 	mov	r3,zero
    c49c:	003f6806 	br	c240 <__alt_data_end+0xff00c240>
    c4a0:	20009c1e 	bne	r4,zero,c714 <__adddf3+0x630>
    c4a4:	80800044 	addi	r2,r16,1
    c4a8:	1141ffcc 	andi	r5,r2,2047
    c4ac:	01000044 	movi	r4,1
    c4b0:	2140670e 	bge	r4,r5,c650 <__adddf3+0x56c>
    c4b4:	0101ffc4 	movi	r4,2047
    c4b8:	11007f26 	beq	r2,r4,c6b8 <__adddf3+0x5d4>
    c4bc:	898d883a 	add	r6,r17,r6
    c4c0:	4247883a 	add	r3,r8,r9
    c4c4:	3451803a 	cmpltu	r8,r6,r17
    c4c8:	40d1883a 	add	r8,r8,r3
    c4cc:	402297fa 	slli	r17,r8,31
    c4d0:	300cd07a 	srli	r6,r6,1
    c4d4:	4010d07a 	srli	r8,r8,1
    c4d8:	1021883a 	mov	r16,r2
    c4dc:	89a2b03a 	or	r17,r17,r6
    c4e0:	003f1f06 	br	c160 <__alt_data_end+0xff00c160>
    c4e4:	0081ffc4 	movi	r2,2047
    c4e8:	80bf481e 	bne	r16,r2,c20c <__alt_data_end+0xff00c20c>
    c4ec:	003f1c06 	br	c160 <__alt_data_end+0xff00c160>
    c4f0:	843ff844 	addi	r16,r16,-31
    c4f4:	01000804 	movi	r4,32
    c4f8:	1406d83a 	srl	r3,r2,r16
    c4fc:	41005026 	beq	r8,r4,c640 <__adddf3+0x55c>
    c500:	01001004 	movi	r4,64
    c504:	2211c83a 	sub	r8,r4,r8
    c508:	1204983a 	sll	r2,r2,r8
    c50c:	88a2b03a 	or	r17,r17,r2
    c510:	8822c03a 	cmpne	r17,r17,zero
    c514:	1c62b03a 	or	r17,r3,r17
    c518:	0011883a 	mov	r8,zero
    c51c:	0021883a 	mov	r16,zero
    c520:	003f7106 	br	c2e8 <__alt_data_end+0xff00c2e8>
    c524:	193ff804 	addi	r4,r3,-32
    c528:	00800804 	movi	r2,32
    c52c:	4908d83a 	srl	r4,r9,r4
    c530:	18804526 	beq	r3,r2,c648 <__adddf3+0x564>
    c534:	00801004 	movi	r2,64
    c538:	10c5c83a 	sub	r2,r2,r3
    c53c:	4886983a 	sll	r3,r9,r2
    c540:	198cb03a 	or	r6,r3,r6
    c544:	300cc03a 	cmpne	r6,r6,zero
    c548:	218cb03a 	or	r6,r4,r6
    c54c:	0007883a 	mov	r3,zero
    c550:	003f3b06 	br	c240 <__alt_data_end+0xff00c240>
    c554:	80002a26 	beq	r16,zero,c600 <__adddf3+0x51c>
    c558:	0101ffc4 	movi	r4,2047
    c55c:	11006826 	beq	r2,r4,c700 <__adddf3+0x61c>
    c560:	00c7c83a 	sub	r3,zero,r3
    c564:	42002034 	orhi	r8,r8,128
    c568:	01000e04 	movi	r4,56
    c56c:	20c07c16 	blt	r4,r3,c760 <__adddf3+0x67c>
    c570:	010007c4 	movi	r4,31
    c574:	20c0da16 	blt	r4,r3,c8e0 <__adddf3+0x7fc>
    c578:	01000804 	movi	r4,32
    c57c:	20c9c83a 	sub	r4,r4,r3
    c580:	4114983a 	sll	r10,r8,r4
    c584:	88cad83a 	srl	r5,r17,r3
    c588:	8908983a 	sll	r4,r17,r4
    c58c:	40c6d83a 	srl	r3,r8,r3
    c590:	5162b03a 	or	r17,r10,r5
    c594:	2008c03a 	cmpne	r4,r4,zero
    c598:	8922b03a 	or	r17,r17,r4
    c59c:	3463c83a 	sub	r17,r6,r17
    c5a0:	48c7c83a 	sub	r3,r9,r3
    c5a4:	344d803a 	cmpltu	r6,r6,r17
    c5a8:	1991c83a 	sub	r8,r3,r6
    c5ac:	1021883a 	mov	r16,r2
    c5b0:	3825883a 	mov	r18,r7
    c5b4:	003f2706 	br	c254 <__alt_data_end+0xff00c254>
    c5b8:	24d0b03a 	or	r8,r4,r19
    c5bc:	40001b1e 	bne	r8,zero,c62c <__adddf3+0x548>
    c5c0:	0005883a 	mov	r2,zero
    c5c4:	0007883a 	mov	r3,zero
    c5c8:	0021883a 	mov	r16,zero
    c5cc:	003f4d06 	br	c304 <__alt_data_end+0xff00c304>
    c5d0:	008007c4 	movi	r2,31
    c5d4:	11003c16 	blt	r2,r4,c6c8 <__adddf3+0x5e4>
    c5d8:	00800804 	movi	r2,32
    c5dc:	1105c83a 	sub	r2,r2,r4
    c5e0:	488e983a 	sll	r7,r9,r2
    c5e4:	310ad83a 	srl	r5,r6,r4
    c5e8:	3084983a 	sll	r2,r6,r2
    c5ec:	4912d83a 	srl	r9,r9,r4
    c5f0:	394ab03a 	or	r5,r7,r5
    c5f4:	1004c03a 	cmpne	r2,r2,zero
    c5f8:	288ab03a 	or	r5,r5,r2
    c5fc:	003f5306 	br	c34c <__alt_data_end+0xff00c34c>
    c600:	4448b03a 	or	r4,r8,r17
    c604:	20003e26 	beq	r4,zero,c700 <__adddf3+0x61c>
    c608:	00c6303a 	nor	r3,zero,r3
    c60c:	18003a1e 	bne	r3,zero,c6f8 <__adddf3+0x614>
    c610:	3463c83a 	sub	r17,r6,r17
    c614:	4a07c83a 	sub	r3,r9,r8
    c618:	344d803a 	cmpltu	r6,r6,r17
    c61c:	1991c83a 	sub	r8,r3,r6
    c620:	1021883a 	mov	r16,r2
    c624:	3825883a 	mov	r18,r7
    c628:	003f0a06 	br	c254 <__alt_data_end+0xff00c254>
    c62c:	2023883a 	mov	r17,r4
    c630:	003f0d06 	br	c268 <__alt_data_end+0xff00c268>
    c634:	0081ffc4 	movi	r2,2047
    c638:	80bf3f1e 	bne	r16,r2,c338 <__alt_data_end+0xff00c338>
    c63c:	003ec806 	br	c160 <__alt_data_end+0xff00c160>
    c640:	0005883a 	mov	r2,zero
    c644:	003fb106 	br	c50c <__alt_data_end+0xff00c50c>
    c648:	0007883a 	mov	r3,zero
    c64c:	003fbc06 	br	c540 <__alt_data_end+0xff00c540>
    c650:	4444b03a 	or	r2,r8,r17
    c654:	8000871e 	bne	r16,zero,c874 <__adddf3+0x790>
    c658:	1000ba26 	beq	r2,zero,c944 <__adddf3+0x860>
    c65c:	4984b03a 	or	r2,r9,r6
    c660:	103ebf26 	beq	r2,zero,c160 <__alt_data_end+0xff00c160>
    c664:	8985883a 	add	r2,r17,r6
    c668:	4247883a 	add	r3,r8,r9
    c66c:	1451803a 	cmpltu	r8,r2,r17
    c670:	40d1883a 	add	r8,r8,r3
    c674:	40c0202c 	andhi	r3,r8,128
    c678:	1023883a 	mov	r17,r2
    c67c:	183f1a26 	beq	r3,zero,c2e8 <__alt_data_end+0xff00c2e8>
    c680:	00bfe034 	movhi	r2,65408
    c684:	10bfffc4 	addi	r2,r2,-1
    c688:	2021883a 	mov	r16,r4
    c68c:	4090703a 	and	r8,r8,r2
    c690:	003eb306 	br	c160 <__alt_data_end+0xff00c160>
    c694:	4444b03a 	or	r2,r8,r17
    c698:	8000291e 	bne	r16,zero,c740 <__adddf3+0x65c>
    c69c:	10004b1e 	bne	r2,zero,c7cc <__adddf3+0x6e8>
    c6a0:	4990b03a 	or	r8,r9,r6
    c6a4:	40008b26 	beq	r8,zero,c8d4 <__adddf3+0x7f0>
    c6a8:	4811883a 	mov	r8,r9
    c6ac:	3023883a 	mov	r17,r6
    c6b0:	3825883a 	mov	r18,r7
    c6b4:	003eaa06 	br	c160 <__alt_data_end+0xff00c160>
    c6b8:	1021883a 	mov	r16,r2
    c6bc:	0011883a 	mov	r8,zero
    c6c0:	0005883a 	mov	r2,zero
    c6c4:	003f0f06 	br	c304 <__alt_data_end+0xff00c304>
    c6c8:	217ff804 	addi	r5,r4,-32
    c6cc:	00800804 	movi	r2,32
    c6d0:	494ad83a 	srl	r5,r9,r5
    c6d4:	20807d26 	beq	r4,r2,c8cc <__adddf3+0x7e8>
    c6d8:	00801004 	movi	r2,64
    c6dc:	1109c83a 	sub	r4,r2,r4
    c6e0:	4912983a 	sll	r9,r9,r4
    c6e4:	498cb03a 	or	r6,r9,r6
    c6e8:	300cc03a 	cmpne	r6,r6,zero
    c6ec:	298ab03a 	or	r5,r5,r6
    c6f0:	0013883a 	mov	r9,zero
    c6f4:	003f1506 	br	c34c <__alt_data_end+0xff00c34c>
    c6f8:	0101ffc4 	movi	r4,2047
    c6fc:	113f9a1e 	bne	r2,r4,c568 <__alt_data_end+0xff00c568>
    c700:	4811883a 	mov	r8,r9
    c704:	3023883a 	mov	r17,r6
    c708:	1021883a 	mov	r16,r2
    c70c:	3825883a 	mov	r18,r7
    c710:	003e9306 	br	c160 <__alt_data_end+0xff00c160>
    c714:	8000161e 	bne	r16,zero,c770 <__adddf3+0x68c>
    c718:	444ab03a 	or	r5,r8,r17
    c71c:	28005126 	beq	r5,zero,c864 <__adddf3+0x780>
    c720:	0108303a 	nor	r4,zero,r4
    c724:	20004d1e 	bne	r4,zero,c85c <__adddf3+0x778>
    c728:	89a3883a 	add	r17,r17,r6
    c72c:	4253883a 	add	r9,r8,r9
    c730:	898d803a 	cmpltu	r6,r17,r6
    c734:	3251883a 	add	r8,r6,r9
    c738:	1021883a 	mov	r16,r2
    c73c:	003f0806 	br	c360 <__alt_data_end+0xff00c360>
    c740:	1000301e 	bne	r2,zero,c804 <__adddf3+0x720>
    c744:	4984b03a 	or	r2,r9,r6
    c748:	10007126 	beq	r2,zero,c910 <__adddf3+0x82c>
    c74c:	4811883a 	mov	r8,r9
    c750:	3023883a 	mov	r17,r6
    c754:	3825883a 	mov	r18,r7
    c758:	0401ffc4 	movi	r16,2047
    c75c:	003e8006 	br	c160 <__alt_data_end+0xff00c160>
    c760:	4462b03a 	or	r17,r8,r17
    c764:	8822c03a 	cmpne	r17,r17,zero
    c768:	0007883a 	mov	r3,zero
    c76c:	003f8b06 	br	c59c <__alt_data_end+0xff00c59c>
    c770:	0141ffc4 	movi	r5,2047
    c774:	11403b26 	beq	r2,r5,c864 <__adddf3+0x780>
    c778:	0109c83a 	sub	r4,zero,r4
    c77c:	42002034 	orhi	r8,r8,128
    c780:	01400e04 	movi	r5,56
    c784:	29006716 	blt	r5,r4,c924 <__adddf3+0x840>
    c788:	014007c4 	movi	r5,31
    c78c:	29007016 	blt	r5,r4,c950 <__adddf3+0x86c>
    c790:	01400804 	movi	r5,32
    c794:	290bc83a 	sub	r5,r5,r4
    c798:	4154983a 	sll	r10,r8,r5
    c79c:	890ed83a 	srl	r7,r17,r4
    c7a0:	894a983a 	sll	r5,r17,r5
    c7a4:	4108d83a 	srl	r4,r8,r4
    c7a8:	51e2b03a 	or	r17,r10,r7
    c7ac:	280ac03a 	cmpne	r5,r5,zero
    c7b0:	8962b03a 	or	r17,r17,r5
    c7b4:	89a3883a 	add	r17,r17,r6
    c7b8:	2253883a 	add	r9,r4,r9
    c7bc:	898d803a 	cmpltu	r6,r17,r6
    c7c0:	3251883a 	add	r8,r6,r9
    c7c4:	1021883a 	mov	r16,r2
    c7c8:	003ee506 	br	c360 <__alt_data_end+0xff00c360>
    c7cc:	4984b03a 	or	r2,r9,r6
    c7d0:	103e6326 	beq	r2,zero,c160 <__alt_data_end+0xff00c160>
    c7d4:	8987c83a 	sub	r3,r17,r6
    c7d8:	88c9803a 	cmpltu	r4,r17,r3
    c7dc:	4245c83a 	sub	r2,r8,r9
    c7e0:	1105c83a 	sub	r2,r2,r4
    c7e4:	1100202c 	andhi	r4,r2,128
    c7e8:	203ebb26 	beq	r4,zero,c2d8 <__alt_data_end+0xff00c2d8>
    c7ec:	3463c83a 	sub	r17,r6,r17
    c7f0:	4a07c83a 	sub	r3,r9,r8
    c7f4:	344d803a 	cmpltu	r6,r6,r17
    c7f8:	1991c83a 	sub	r8,r3,r6
    c7fc:	3825883a 	mov	r18,r7
    c800:	003e5706 	br	c160 <__alt_data_end+0xff00c160>
    c804:	4984b03a 	or	r2,r9,r6
    c808:	10002e26 	beq	r2,zero,c8c4 <__adddf3+0x7e0>
    c80c:	4004d0fa 	srli	r2,r8,3
    c810:	8822d0fa 	srli	r17,r17,3
    c814:	4010977a 	slli	r8,r8,29
    c818:	10c0022c 	andhi	r3,r2,8
    c81c:	4462b03a 	or	r17,r8,r17
    c820:	18000826 	beq	r3,zero,c844 <__adddf3+0x760>
    c824:	4808d0fa 	srli	r4,r9,3
    c828:	20c0022c 	andhi	r3,r4,8
    c82c:	1800051e 	bne	r3,zero,c844 <__adddf3+0x760>
    c830:	300cd0fa 	srli	r6,r6,3
    c834:	4806977a 	slli	r3,r9,29
    c838:	2005883a 	mov	r2,r4
    c83c:	3825883a 	mov	r18,r7
    c840:	19a2b03a 	or	r17,r3,r6
    c844:	8810d77a 	srli	r8,r17,29
    c848:	100490fa 	slli	r2,r2,3
    c84c:	882290fa 	slli	r17,r17,3
    c850:	0401ffc4 	movi	r16,2047
    c854:	4090b03a 	or	r8,r8,r2
    c858:	003e4106 	br	c160 <__alt_data_end+0xff00c160>
    c85c:	0141ffc4 	movi	r5,2047
    c860:	117fc71e 	bne	r2,r5,c780 <__alt_data_end+0xff00c780>
    c864:	4811883a 	mov	r8,r9
    c868:	3023883a 	mov	r17,r6
    c86c:	1021883a 	mov	r16,r2
    c870:	003e3b06 	br	c160 <__alt_data_end+0xff00c160>
    c874:	10002f26 	beq	r2,zero,c934 <__adddf3+0x850>
    c878:	4984b03a 	or	r2,r9,r6
    c87c:	10001126 	beq	r2,zero,c8c4 <__adddf3+0x7e0>
    c880:	4004d0fa 	srli	r2,r8,3
    c884:	8822d0fa 	srli	r17,r17,3
    c888:	4010977a 	slli	r8,r8,29
    c88c:	10c0022c 	andhi	r3,r2,8
    c890:	4462b03a 	or	r17,r8,r17
    c894:	183feb26 	beq	r3,zero,c844 <__alt_data_end+0xff00c844>
    c898:	4808d0fa 	srli	r4,r9,3
    c89c:	20c0022c 	andhi	r3,r4,8
    c8a0:	183fe81e 	bne	r3,zero,c844 <__alt_data_end+0xff00c844>
    c8a4:	300cd0fa 	srli	r6,r6,3
    c8a8:	4806977a 	slli	r3,r9,29
    c8ac:	2005883a 	mov	r2,r4
    c8b0:	19a2b03a 	or	r17,r3,r6
    c8b4:	003fe306 	br	c844 <__alt_data_end+0xff00c844>
    c8b8:	0011883a 	mov	r8,zero
    c8bc:	0005883a 	mov	r2,zero
    c8c0:	003e3f06 	br	c1c0 <__alt_data_end+0xff00c1c0>
    c8c4:	0401ffc4 	movi	r16,2047
    c8c8:	003e2506 	br	c160 <__alt_data_end+0xff00c160>
    c8cc:	0013883a 	mov	r9,zero
    c8d0:	003f8406 	br	c6e4 <__alt_data_end+0xff00c6e4>
    c8d4:	0005883a 	mov	r2,zero
    c8d8:	0007883a 	mov	r3,zero
    c8dc:	003e8906 	br	c304 <__alt_data_end+0xff00c304>
    c8e0:	197ff804 	addi	r5,r3,-32
    c8e4:	01000804 	movi	r4,32
    c8e8:	414ad83a 	srl	r5,r8,r5
    c8ec:	19002426 	beq	r3,r4,c980 <__adddf3+0x89c>
    c8f0:	01001004 	movi	r4,64
    c8f4:	20c7c83a 	sub	r3,r4,r3
    c8f8:	40c6983a 	sll	r3,r8,r3
    c8fc:	1c46b03a 	or	r3,r3,r17
    c900:	1806c03a 	cmpne	r3,r3,zero
    c904:	28e2b03a 	or	r17,r5,r3
    c908:	0007883a 	mov	r3,zero
    c90c:	003f2306 	br	c59c <__alt_data_end+0xff00c59c>
    c910:	0007883a 	mov	r3,zero
    c914:	5811883a 	mov	r8,r11
    c918:	00bfffc4 	movi	r2,-1
    c91c:	0401ffc4 	movi	r16,2047
    c920:	003e7806 	br	c304 <__alt_data_end+0xff00c304>
    c924:	4462b03a 	or	r17,r8,r17
    c928:	8822c03a 	cmpne	r17,r17,zero
    c92c:	0009883a 	mov	r4,zero
    c930:	003fa006 	br	c7b4 <__alt_data_end+0xff00c7b4>
    c934:	4811883a 	mov	r8,r9
    c938:	3023883a 	mov	r17,r6
    c93c:	0401ffc4 	movi	r16,2047
    c940:	003e0706 	br	c160 <__alt_data_end+0xff00c160>
    c944:	4811883a 	mov	r8,r9
    c948:	3023883a 	mov	r17,r6
    c94c:	003e0406 	br	c160 <__alt_data_end+0xff00c160>
    c950:	21fff804 	addi	r7,r4,-32
    c954:	01400804 	movi	r5,32
    c958:	41ced83a 	srl	r7,r8,r7
    c95c:	21400a26 	beq	r4,r5,c988 <__adddf3+0x8a4>
    c960:	01401004 	movi	r5,64
    c964:	2909c83a 	sub	r4,r5,r4
    c968:	4108983a 	sll	r4,r8,r4
    c96c:	2448b03a 	or	r4,r4,r17
    c970:	2008c03a 	cmpne	r4,r4,zero
    c974:	3922b03a 	or	r17,r7,r4
    c978:	0009883a 	mov	r4,zero
    c97c:	003f8d06 	br	c7b4 <__alt_data_end+0xff00c7b4>
    c980:	0007883a 	mov	r3,zero
    c984:	003fdd06 	br	c8fc <__alt_data_end+0xff00c8fc>
    c988:	0009883a 	mov	r4,zero
    c98c:	003ff706 	br	c96c <__alt_data_end+0xff00c96c>

0000c990 <__divdf3>:
    c990:	defff204 	addi	sp,sp,-56
    c994:	dd400915 	stw	r21,36(sp)
    c998:	282ad53a 	srli	r21,r5,20
    c99c:	dd000815 	stw	r20,32(sp)
    c9a0:	2828d7fa 	srli	r20,r5,31
    c9a4:	dc000415 	stw	r16,16(sp)
    c9a8:	04000434 	movhi	r16,16
    c9ac:	df000c15 	stw	fp,48(sp)
    c9b0:	843fffc4 	addi	r16,r16,-1
    c9b4:	dfc00d15 	stw	ra,52(sp)
    c9b8:	ddc00b15 	stw	r23,44(sp)
    c9bc:	dd800a15 	stw	r22,40(sp)
    c9c0:	dcc00715 	stw	r19,28(sp)
    c9c4:	dc800615 	stw	r18,24(sp)
    c9c8:	dc400515 	stw	r17,20(sp)
    c9cc:	ad41ffcc 	andi	r21,r21,2047
    c9d0:	2c20703a 	and	r16,r5,r16
    c9d4:	a7003fcc 	andi	fp,r20,255
    c9d8:	a8006126 	beq	r21,zero,cb60 <__divdf3+0x1d0>
    c9dc:	0081ffc4 	movi	r2,2047
    c9e0:	2025883a 	mov	r18,r4
    c9e4:	a8803726 	beq	r21,r2,cac4 <__divdf3+0x134>
    c9e8:	80800434 	orhi	r2,r16,16
    c9ec:	100490fa 	slli	r2,r2,3
    c9f0:	2020d77a 	srli	r16,r4,29
    c9f4:	202490fa 	slli	r18,r4,3
    c9f8:	ad7f0044 	addi	r21,r21,-1023
    c9fc:	80a0b03a 	or	r16,r16,r2
    ca00:	0027883a 	mov	r19,zero
    ca04:	0013883a 	mov	r9,zero
    ca08:	3804d53a 	srli	r2,r7,20
    ca0c:	382cd7fa 	srli	r22,r7,31
    ca10:	04400434 	movhi	r17,16
    ca14:	8c7fffc4 	addi	r17,r17,-1
    ca18:	1081ffcc 	andi	r2,r2,2047
    ca1c:	3011883a 	mov	r8,r6
    ca20:	3c62703a 	and	r17,r7,r17
    ca24:	b5c03fcc 	andi	r23,r22,255
    ca28:	10006c26 	beq	r2,zero,cbdc <__divdf3+0x24c>
    ca2c:	00c1ffc4 	movi	r3,2047
    ca30:	10c06426 	beq	r2,r3,cbc4 <__divdf3+0x234>
    ca34:	88c00434 	orhi	r3,r17,16
    ca38:	180690fa 	slli	r3,r3,3
    ca3c:	3022d77a 	srli	r17,r6,29
    ca40:	301090fa 	slli	r8,r6,3
    ca44:	10bf0044 	addi	r2,r2,-1023
    ca48:	88e2b03a 	or	r17,r17,r3
    ca4c:	000f883a 	mov	r7,zero
    ca50:	a58cf03a 	xor	r6,r20,r22
    ca54:	3cc8b03a 	or	r4,r7,r19
    ca58:	a8abc83a 	sub	r21,r21,r2
    ca5c:	008003c4 	movi	r2,15
    ca60:	3007883a 	mov	r3,r6
    ca64:	34c03fcc 	andi	r19,r6,255
    ca68:	11009036 	bltu	r2,r4,ccac <__divdf3+0x31c>
    ca6c:	200890ba 	slli	r4,r4,2
    ca70:	00800074 	movhi	r2,1
    ca74:	10b2a104 	addi	r2,r2,-13692
    ca78:	2089883a 	add	r4,r4,r2
    ca7c:	20800017 	ldw	r2,0(r4)
    ca80:	1000683a 	jmp	r2
    ca84:	0000ccac 	andhi	zero,zero,818
    ca88:	0000cafc 	xorhi	zero,zero,811
    ca8c:	0000cc9c 	xori	zero,zero,818
    ca90:	0000caf0 	cmpltui	zero,zero,811
    ca94:	0000cc9c 	xori	zero,zero,818
    ca98:	0000cc70 	cmpltui	zero,zero,817
    ca9c:	0000cc9c 	xori	zero,zero,818
    caa0:	0000caf0 	cmpltui	zero,zero,811
    caa4:	0000cafc 	xorhi	zero,zero,811
    caa8:	0000cafc 	xorhi	zero,zero,811
    caac:	0000cc70 	cmpltui	zero,zero,817
    cab0:	0000caf0 	cmpltui	zero,zero,811
    cab4:	0000cae0 	cmpeqi	zero,zero,811
    cab8:	0000cae0 	cmpeqi	zero,zero,811
    cabc:	0000cae0 	cmpeqi	zero,zero,811
    cac0:	0000cf90 	cmplti	zero,zero,830
    cac4:	2404b03a 	or	r2,r4,r16
    cac8:	1000661e 	bne	r2,zero,cc64 <__divdf3+0x2d4>
    cacc:	04c00204 	movi	r19,8
    cad0:	0021883a 	mov	r16,zero
    cad4:	0025883a 	mov	r18,zero
    cad8:	02400084 	movi	r9,2
    cadc:	003fca06 	br	ca08 <__alt_data_end+0xff00ca08>
    cae0:	8023883a 	mov	r17,r16
    cae4:	9011883a 	mov	r8,r18
    cae8:	e02f883a 	mov	r23,fp
    caec:	480f883a 	mov	r7,r9
    caf0:	00800084 	movi	r2,2
    caf4:	3881311e 	bne	r7,r2,cfbc <__divdf3+0x62c>
    caf8:	b827883a 	mov	r19,r23
    cafc:	98c0004c 	andi	r3,r19,1
    cb00:	0081ffc4 	movi	r2,2047
    cb04:	000b883a 	mov	r5,zero
    cb08:	0025883a 	mov	r18,zero
    cb0c:	1004953a 	slli	r2,r2,20
    cb10:	18c03fcc 	andi	r3,r3,255
    cb14:	04400434 	movhi	r17,16
    cb18:	8c7fffc4 	addi	r17,r17,-1
    cb1c:	180697fa 	slli	r3,r3,31
    cb20:	2c4a703a 	and	r5,r5,r17
    cb24:	288ab03a 	or	r5,r5,r2
    cb28:	28c6b03a 	or	r3,r5,r3
    cb2c:	9005883a 	mov	r2,r18
    cb30:	dfc00d17 	ldw	ra,52(sp)
    cb34:	df000c17 	ldw	fp,48(sp)
    cb38:	ddc00b17 	ldw	r23,44(sp)
    cb3c:	dd800a17 	ldw	r22,40(sp)
    cb40:	dd400917 	ldw	r21,36(sp)
    cb44:	dd000817 	ldw	r20,32(sp)
    cb48:	dcc00717 	ldw	r19,28(sp)
    cb4c:	dc800617 	ldw	r18,24(sp)
    cb50:	dc400517 	ldw	r17,20(sp)
    cb54:	dc000417 	ldw	r16,16(sp)
    cb58:	dec00e04 	addi	sp,sp,56
    cb5c:	f800283a 	ret
    cb60:	2404b03a 	or	r2,r4,r16
    cb64:	2027883a 	mov	r19,r4
    cb68:	10003926 	beq	r2,zero,cc50 <__divdf3+0x2c0>
    cb6c:	80012e26 	beq	r16,zero,d028 <__divdf3+0x698>
    cb70:	8009883a 	mov	r4,r16
    cb74:	d9800315 	stw	r6,12(sp)
    cb78:	d9c00215 	stw	r7,8(sp)
    cb7c:	000e6e80 	call	e6e8 <__clzsi2>
    cb80:	d9800317 	ldw	r6,12(sp)
    cb84:	d9c00217 	ldw	r7,8(sp)
    cb88:	113ffd44 	addi	r4,r2,-11
    cb8c:	00c00704 	movi	r3,28
    cb90:	19012116 	blt	r3,r4,d018 <__divdf3+0x688>
    cb94:	00c00744 	movi	r3,29
    cb98:	147ffe04 	addi	r17,r2,-8
    cb9c:	1907c83a 	sub	r3,r3,r4
    cba0:	8460983a 	sll	r16,r16,r17
    cba4:	98c6d83a 	srl	r3,r19,r3
    cba8:	9c64983a 	sll	r18,r19,r17
    cbac:	1c20b03a 	or	r16,r3,r16
    cbb0:	1080fcc4 	addi	r2,r2,1011
    cbb4:	00abc83a 	sub	r21,zero,r2
    cbb8:	0027883a 	mov	r19,zero
    cbbc:	0013883a 	mov	r9,zero
    cbc0:	003f9106 	br	ca08 <__alt_data_end+0xff00ca08>
    cbc4:	3446b03a 	or	r3,r6,r17
    cbc8:	18001f1e 	bne	r3,zero,cc48 <__divdf3+0x2b8>
    cbcc:	0023883a 	mov	r17,zero
    cbd0:	0011883a 	mov	r8,zero
    cbd4:	01c00084 	movi	r7,2
    cbd8:	003f9d06 	br	ca50 <__alt_data_end+0xff00ca50>
    cbdc:	3446b03a 	or	r3,r6,r17
    cbe0:	18001526 	beq	r3,zero,cc38 <__divdf3+0x2a8>
    cbe4:	88011b26 	beq	r17,zero,d054 <__divdf3+0x6c4>
    cbe8:	8809883a 	mov	r4,r17
    cbec:	d9800315 	stw	r6,12(sp)
    cbf0:	da400115 	stw	r9,4(sp)
    cbf4:	000e6e80 	call	e6e8 <__clzsi2>
    cbf8:	d9800317 	ldw	r6,12(sp)
    cbfc:	da400117 	ldw	r9,4(sp)
    cc00:	113ffd44 	addi	r4,r2,-11
    cc04:	00c00704 	movi	r3,28
    cc08:	19010e16 	blt	r3,r4,d044 <__divdf3+0x6b4>
    cc0c:	00c00744 	movi	r3,29
    cc10:	123ffe04 	addi	r8,r2,-8
    cc14:	1907c83a 	sub	r3,r3,r4
    cc18:	8a22983a 	sll	r17,r17,r8
    cc1c:	30c6d83a 	srl	r3,r6,r3
    cc20:	3210983a 	sll	r8,r6,r8
    cc24:	1c62b03a 	or	r17,r3,r17
    cc28:	1080fcc4 	addi	r2,r2,1011
    cc2c:	0085c83a 	sub	r2,zero,r2
    cc30:	000f883a 	mov	r7,zero
    cc34:	003f8606 	br	ca50 <__alt_data_end+0xff00ca50>
    cc38:	0023883a 	mov	r17,zero
    cc3c:	0011883a 	mov	r8,zero
    cc40:	01c00044 	movi	r7,1
    cc44:	003f8206 	br	ca50 <__alt_data_end+0xff00ca50>
    cc48:	01c000c4 	movi	r7,3
    cc4c:	003f8006 	br	ca50 <__alt_data_end+0xff00ca50>
    cc50:	04c00104 	movi	r19,4
    cc54:	0021883a 	mov	r16,zero
    cc58:	0025883a 	mov	r18,zero
    cc5c:	02400044 	movi	r9,1
    cc60:	003f6906 	br	ca08 <__alt_data_end+0xff00ca08>
    cc64:	04c00304 	movi	r19,12
    cc68:	024000c4 	movi	r9,3
    cc6c:	003f6606 	br	ca08 <__alt_data_end+0xff00ca08>
    cc70:	01400434 	movhi	r5,16
    cc74:	0007883a 	mov	r3,zero
    cc78:	297fffc4 	addi	r5,r5,-1
    cc7c:	04bfffc4 	movi	r18,-1
    cc80:	0081ffc4 	movi	r2,2047
    cc84:	003fa106 	br	cb0c <__alt_data_end+0xff00cb0c>
    cc88:	00c00044 	movi	r3,1
    cc8c:	1887c83a 	sub	r3,r3,r2
    cc90:	01000e04 	movi	r4,56
    cc94:	20c1210e 	bge	r4,r3,d11c <__divdf3+0x78c>
    cc98:	98c0004c 	andi	r3,r19,1
    cc9c:	0005883a 	mov	r2,zero
    cca0:	000b883a 	mov	r5,zero
    cca4:	0025883a 	mov	r18,zero
    cca8:	003f9806 	br	cb0c <__alt_data_end+0xff00cb0c>
    ccac:	8c00fd36 	bltu	r17,r16,d0a4 <__divdf3+0x714>
    ccb0:	8440fb26 	beq	r16,r17,d0a0 <__divdf3+0x710>
    ccb4:	8007883a 	mov	r3,r16
    ccb8:	ad7fffc4 	addi	r21,r21,-1
    ccbc:	0021883a 	mov	r16,zero
    ccc0:	4004d63a 	srli	r2,r8,24
    ccc4:	8822923a 	slli	r17,r17,8
    ccc8:	1809883a 	mov	r4,r3
    cccc:	402c923a 	slli	r22,r8,8
    ccd0:	88b8b03a 	or	fp,r17,r2
    ccd4:	e028d43a 	srli	r20,fp,16
    ccd8:	d8c00015 	stw	r3,0(sp)
    ccdc:	e5ffffcc 	andi	r23,fp,65535
    cce0:	a00b883a 	mov	r5,r20
    cce4:	000c0280 	call	c028 <__udivsi3>
    cce8:	d8c00017 	ldw	r3,0(sp)
    ccec:	a00b883a 	mov	r5,r20
    ccf0:	d8800315 	stw	r2,12(sp)
    ccf4:	1809883a 	mov	r4,r3
    ccf8:	000c08c0 	call	c08c <__umodsi3>
    ccfc:	d9800317 	ldw	r6,12(sp)
    cd00:	1006943a 	slli	r3,r2,16
    cd04:	9004d43a 	srli	r2,r18,16
    cd08:	b9a3383a 	mul	r17,r23,r6
    cd0c:	10c4b03a 	or	r2,r2,r3
    cd10:	1440062e 	bgeu	r2,r17,cd2c <__divdf3+0x39c>
    cd14:	1705883a 	add	r2,r2,fp
    cd18:	30ffffc4 	addi	r3,r6,-1
    cd1c:	1700ee36 	bltu	r2,fp,d0d8 <__divdf3+0x748>
    cd20:	1440ed2e 	bgeu	r2,r17,d0d8 <__divdf3+0x748>
    cd24:	31bfff84 	addi	r6,r6,-2
    cd28:	1705883a 	add	r2,r2,fp
    cd2c:	1463c83a 	sub	r17,r2,r17
    cd30:	a00b883a 	mov	r5,r20
    cd34:	8809883a 	mov	r4,r17
    cd38:	d9800315 	stw	r6,12(sp)
    cd3c:	000c0280 	call	c028 <__udivsi3>
    cd40:	a00b883a 	mov	r5,r20
    cd44:	8809883a 	mov	r4,r17
    cd48:	d8800215 	stw	r2,8(sp)
    cd4c:	000c08c0 	call	c08c <__umodsi3>
    cd50:	d9c00217 	ldw	r7,8(sp)
    cd54:	1004943a 	slli	r2,r2,16
    cd58:	94bfffcc 	andi	r18,r18,65535
    cd5c:	b9d1383a 	mul	r8,r23,r7
    cd60:	90a4b03a 	or	r18,r18,r2
    cd64:	d9800317 	ldw	r6,12(sp)
    cd68:	9200062e 	bgeu	r18,r8,cd84 <__divdf3+0x3f4>
    cd6c:	9725883a 	add	r18,r18,fp
    cd70:	38bfffc4 	addi	r2,r7,-1
    cd74:	9700d636 	bltu	r18,fp,d0d0 <__divdf3+0x740>
    cd78:	9200d52e 	bgeu	r18,r8,d0d0 <__divdf3+0x740>
    cd7c:	39ffff84 	addi	r7,r7,-2
    cd80:	9725883a 	add	r18,r18,fp
    cd84:	3004943a 	slli	r2,r6,16
    cd88:	b012d43a 	srli	r9,r22,16
    cd8c:	b1bfffcc 	andi	r6,r22,65535
    cd90:	11e2b03a 	or	r17,r2,r7
    cd94:	8806d43a 	srli	r3,r17,16
    cd98:	893fffcc 	andi	r4,r17,65535
    cd9c:	218b383a 	mul	r5,r4,r6
    cda0:	30c5383a 	mul	r2,r6,r3
    cda4:	2249383a 	mul	r4,r4,r9
    cda8:	280ed43a 	srli	r7,r5,16
    cdac:	9225c83a 	sub	r18,r18,r8
    cdb0:	2089883a 	add	r4,r4,r2
    cdb4:	3909883a 	add	r4,r7,r4
    cdb8:	1a47383a 	mul	r3,r3,r9
    cdbc:	2080022e 	bgeu	r4,r2,cdc8 <__divdf3+0x438>
    cdc0:	00800074 	movhi	r2,1
    cdc4:	1887883a 	add	r3,r3,r2
    cdc8:	2004d43a 	srli	r2,r4,16
    cdcc:	2008943a 	slli	r4,r4,16
    cdd0:	297fffcc 	andi	r5,r5,65535
    cdd4:	10c7883a 	add	r3,r2,r3
    cdd8:	2149883a 	add	r4,r4,r5
    cddc:	90c0a536 	bltu	r18,r3,d074 <__divdf3+0x6e4>
    cde0:	90c0bf26 	beq	r18,r3,d0e0 <__divdf3+0x750>
    cde4:	90c7c83a 	sub	r3,r18,r3
    cde8:	810fc83a 	sub	r7,r16,r4
    cdec:	81e5803a 	cmpltu	r18,r16,r7
    cdf0:	1ca5c83a 	sub	r18,r3,r18
    cdf4:	e480c126 	beq	fp,r18,d0fc <__divdf3+0x76c>
    cdf8:	a00b883a 	mov	r5,r20
    cdfc:	9009883a 	mov	r4,r18
    ce00:	d9800315 	stw	r6,12(sp)
    ce04:	d9c00215 	stw	r7,8(sp)
    ce08:	da400115 	stw	r9,4(sp)
    ce0c:	000c0280 	call	c028 <__udivsi3>
    ce10:	a00b883a 	mov	r5,r20
    ce14:	9009883a 	mov	r4,r18
    ce18:	d8800015 	stw	r2,0(sp)
    ce1c:	000c08c0 	call	c08c <__umodsi3>
    ce20:	d9c00217 	ldw	r7,8(sp)
    ce24:	da000017 	ldw	r8,0(sp)
    ce28:	1006943a 	slli	r3,r2,16
    ce2c:	3804d43a 	srli	r2,r7,16
    ce30:	ba21383a 	mul	r16,r23,r8
    ce34:	d9800317 	ldw	r6,12(sp)
    ce38:	10c4b03a 	or	r2,r2,r3
    ce3c:	da400117 	ldw	r9,4(sp)
    ce40:	1400062e 	bgeu	r2,r16,ce5c <__divdf3+0x4cc>
    ce44:	1705883a 	add	r2,r2,fp
    ce48:	40ffffc4 	addi	r3,r8,-1
    ce4c:	1700ad36 	bltu	r2,fp,d104 <__divdf3+0x774>
    ce50:	1400ac2e 	bgeu	r2,r16,d104 <__divdf3+0x774>
    ce54:	423fff84 	addi	r8,r8,-2
    ce58:	1705883a 	add	r2,r2,fp
    ce5c:	1421c83a 	sub	r16,r2,r16
    ce60:	a00b883a 	mov	r5,r20
    ce64:	8009883a 	mov	r4,r16
    ce68:	d9800315 	stw	r6,12(sp)
    ce6c:	d9c00215 	stw	r7,8(sp)
    ce70:	da000015 	stw	r8,0(sp)
    ce74:	da400115 	stw	r9,4(sp)
    ce78:	000c0280 	call	c028 <__udivsi3>
    ce7c:	8009883a 	mov	r4,r16
    ce80:	a00b883a 	mov	r5,r20
    ce84:	1025883a 	mov	r18,r2
    ce88:	000c08c0 	call	c08c <__umodsi3>
    ce8c:	d9c00217 	ldw	r7,8(sp)
    ce90:	1004943a 	slli	r2,r2,16
    ce94:	bcaf383a 	mul	r23,r23,r18
    ce98:	393fffcc 	andi	r4,r7,65535
    ce9c:	2088b03a 	or	r4,r4,r2
    cea0:	d9800317 	ldw	r6,12(sp)
    cea4:	da000017 	ldw	r8,0(sp)
    cea8:	da400117 	ldw	r9,4(sp)
    ceac:	25c0062e 	bgeu	r4,r23,cec8 <__divdf3+0x538>
    ceb0:	2709883a 	add	r4,r4,fp
    ceb4:	90bfffc4 	addi	r2,r18,-1
    ceb8:	27009436 	bltu	r4,fp,d10c <__divdf3+0x77c>
    cebc:	25c0932e 	bgeu	r4,r23,d10c <__divdf3+0x77c>
    cec0:	94bfff84 	addi	r18,r18,-2
    cec4:	2709883a 	add	r4,r4,fp
    cec8:	4004943a 	slli	r2,r8,16
    cecc:	25efc83a 	sub	r23,r4,r23
    ced0:	1490b03a 	or	r8,r2,r18
    ced4:	4008d43a 	srli	r4,r8,16
    ced8:	40ffffcc 	andi	r3,r8,65535
    cedc:	30c5383a 	mul	r2,r6,r3
    cee0:	1a47383a 	mul	r3,r3,r9
    cee4:	310d383a 	mul	r6,r6,r4
    cee8:	100ad43a 	srli	r5,r2,16
    ceec:	4913383a 	mul	r9,r9,r4
    cef0:	1987883a 	add	r3,r3,r6
    cef4:	28c7883a 	add	r3,r5,r3
    cef8:	1980022e 	bgeu	r3,r6,cf04 <__divdf3+0x574>
    cefc:	01000074 	movhi	r4,1
    cf00:	4913883a 	add	r9,r9,r4
    cf04:	1808d43a 	srli	r4,r3,16
    cf08:	1806943a 	slli	r3,r3,16
    cf0c:	10bfffcc 	andi	r2,r2,65535
    cf10:	2253883a 	add	r9,r4,r9
    cf14:	1887883a 	add	r3,r3,r2
    cf18:	ba403836 	bltu	r23,r9,cffc <__divdf3+0x66c>
    cf1c:	ba403626 	beq	r23,r9,cff8 <__divdf3+0x668>
    cf20:	42000054 	ori	r8,r8,1
    cf24:	a880ffc4 	addi	r2,r21,1023
    cf28:	00bf570e 	bge	zero,r2,cc88 <__alt_data_end+0xff00cc88>
    cf2c:	40c001cc 	andi	r3,r8,7
    cf30:	18000726 	beq	r3,zero,cf50 <__divdf3+0x5c0>
    cf34:	40c003cc 	andi	r3,r8,15
    cf38:	01000104 	movi	r4,4
    cf3c:	19000426 	beq	r3,r4,cf50 <__divdf3+0x5c0>
    cf40:	4107883a 	add	r3,r8,r4
    cf44:	1a11803a 	cmpltu	r8,r3,r8
    cf48:	8a23883a 	add	r17,r17,r8
    cf4c:	1811883a 	mov	r8,r3
    cf50:	88c0402c 	andhi	r3,r17,256
    cf54:	18000426 	beq	r3,zero,cf68 <__divdf3+0x5d8>
    cf58:	00ffc034 	movhi	r3,65280
    cf5c:	18ffffc4 	addi	r3,r3,-1
    cf60:	a8810004 	addi	r2,r21,1024
    cf64:	88e2703a 	and	r17,r17,r3
    cf68:	00c1ff84 	movi	r3,2046
    cf6c:	18bee316 	blt	r3,r2,cafc <__alt_data_end+0xff00cafc>
    cf70:	8824977a 	slli	r18,r17,29
    cf74:	4010d0fa 	srli	r8,r8,3
    cf78:	8822927a 	slli	r17,r17,9
    cf7c:	1081ffcc 	andi	r2,r2,2047
    cf80:	9224b03a 	or	r18,r18,r8
    cf84:	880ad33a 	srli	r5,r17,12
    cf88:	98c0004c 	andi	r3,r19,1
    cf8c:	003edf06 	br	cb0c <__alt_data_end+0xff00cb0c>
    cf90:	8080022c 	andhi	r2,r16,8
    cf94:	10001226 	beq	r2,zero,cfe0 <__divdf3+0x650>
    cf98:	8880022c 	andhi	r2,r17,8
    cf9c:	1000101e 	bne	r2,zero,cfe0 <__divdf3+0x650>
    cfa0:	00800434 	movhi	r2,16
    cfa4:	89400234 	orhi	r5,r17,8
    cfa8:	10bfffc4 	addi	r2,r2,-1
    cfac:	b007883a 	mov	r3,r22
    cfb0:	288a703a 	and	r5,r5,r2
    cfb4:	4025883a 	mov	r18,r8
    cfb8:	003f3106 	br	cc80 <__alt_data_end+0xff00cc80>
    cfbc:	008000c4 	movi	r2,3
    cfc0:	3880a626 	beq	r7,r2,d25c <__divdf3+0x8cc>
    cfc4:	00800044 	movi	r2,1
    cfc8:	3880521e 	bne	r7,r2,d114 <__divdf3+0x784>
    cfcc:	b807883a 	mov	r3,r23
    cfd0:	0005883a 	mov	r2,zero
    cfd4:	000b883a 	mov	r5,zero
    cfd8:	0025883a 	mov	r18,zero
    cfdc:	003ecb06 	br	cb0c <__alt_data_end+0xff00cb0c>
    cfe0:	00800434 	movhi	r2,16
    cfe4:	81400234 	orhi	r5,r16,8
    cfe8:	10bfffc4 	addi	r2,r2,-1
    cfec:	a007883a 	mov	r3,r20
    cff0:	288a703a 	and	r5,r5,r2
    cff4:	003f2206 	br	cc80 <__alt_data_end+0xff00cc80>
    cff8:	183fca26 	beq	r3,zero,cf24 <__alt_data_end+0xff00cf24>
    cffc:	e5ef883a 	add	r23,fp,r23
    d000:	40bfffc4 	addi	r2,r8,-1
    d004:	bf00392e 	bgeu	r23,fp,d0ec <__divdf3+0x75c>
    d008:	1011883a 	mov	r8,r2
    d00c:	ba7fc41e 	bne	r23,r9,cf20 <__alt_data_end+0xff00cf20>
    d010:	b0ffc31e 	bne	r22,r3,cf20 <__alt_data_end+0xff00cf20>
    d014:	003fc306 	br	cf24 <__alt_data_end+0xff00cf24>
    d018:	143ff604 	addi	r16,r2,-40
    d01c:	9c20983a 	sll	r16,r19,r16
    d020:	0025883a 	mov	r18,zero
    d024:	003ee206 	br	cbb0 <__alt_data_end+0xff00cbb0>
    d028:	d9800315 	stw	r6,12(sp)
    d02c:	d9c00215 	stw	r7,8(sp)
    d030:	000e6e80 	call	e6e8 <__clzsi2>
    d034:	10800804 	addi	r2,r2,32
    d038:	d9c00217 	ldw	r7,8(sp)
    d03c:	d9800317 	ldw	r6,12(sp)
    d040:	003ed106 	br	cb88 <__alt_data_end+0xff00cb88>
    d044:	147ff604 	addi	r17,r2,-40
    d048:	3462983a 	sll	r17,r6,r17
    d04c:	0011883a 	mov	r8,zero
    d050:	003ef506 	br	cc28 <__alt_data_end+0xff00cc28>
    d054:	3009883a 	mov	r4,r6
    d058:	d9800315 	stw	r6,12(sp)
    d05c:	da400115 	stw	r9,4(sp)
    d060:	000e6e80 	call	e6e8 <__clzsi2>
    d064:	10800804 	addi	r2,r2,32
    d068:	da400117 	ldw	r9,4(sp)
    d06c:	d9800317 	ldw	r6,12(sp)
    d070:	003ee306 	br	cc00 <__alt_data_end+0xff00cc00>
    d074:	85a1883a 	add	r16,r16,r22
    d078:	8585803a 	cmpltu	r2,r16,r22
    d07c:	1705883a 	add	r2,r2,fp
    d080:	14a5883a 	add	r18,r2,r18
    d084:	88bfffc4 	addi	r2,r17,-1
    d088:	e4800c2e 	bgeu	fp,r18,d0bc <__divdf3+0x72c>
    d08c:	90c03e36 	bltu	r18,r3,d188 <__divdf3+0x7f8>
    d090:	1c806926 	beq	r3,r18,d238 <__divdf3+0x8a8>
    d094:	90c7c83a 	sub	r3,r18,r3
    d098:	1023883a 	mov	r17,r2
    d09c:	003f5206 	br	cde8 <__alt_data_end+0xff00cde8>
    d0a0:	923f0436 	bltu	r18,r8,ccb4 <__alt_data_end+0xff00ccb4>
    d0a4:	800897fa 	slli	r4,r16,31
    d0a8:	9004d07a 	srli	r2,r18,1
    d0ac:	8006d07a 	srli	r3,r16,1
    d0b0:	902097fa 	slli	r16,r18,31
    d0b4:	20a4b03a 	or	r18,r4,r2
    d0b8:	003f0106 	br	ccc0 <__alt_data_end+0xff00ccc0>
    d0bc:	e4bff51e 	bne	fp,r18,d094 <__alt_data_end+0xff00d094>
    d0c0:	85bff22e 	bgeu	r16,r22,d08c <__alt_data_end+0xff00d08c>
    d0c4:	e0c7c83a 	sub	r3,fp,r3
    d0c8:	1023883a 	mov	r17,r2
    d0cc:	003f4606 	br	cde8 <__alt_data_end+0xff00cde8>
    d0d0:	100f883a 	mov	r7,r2
    d0d4:	003f2b06 	br	cd84 <__alt_data_end+0xff00cd84>
    d0d8:	180d883a 	mov	r6,r3
    d0dc:	003f1306 	br	cd2c <__alt_data_end+0xff00cd2c>
    d0e0:	813fe436 	bltu	r16,r4,d074 <__alt_data_end+0xff00d074>
    d0e4:	0007883a 	mov	r3,zero
    d0e8:	003f3f06 	br	cde8 <__alt_data_end+0xff00cde8>
    d0ec:	ba402c36 	bltu	r23,r9,d1a0 <__divdf3+0x810>
    d0f0:	4dc05426 	beq	r9,r23,d244 <__divdf3+0x8b4>
    d0f4:	1011883a 	mov	r8,r2
    d0f8:	003f8906 	br	cf20 <__alt_data_end+0xff00cf20>
    d0fc:	023fffc4 	movi	r8,-1
    d100:	003f8806 	br	cf24 <__alt_data_end+0xff00cf24>
    d104:	1811883a 	mov	r8,r3
    d108:	003f5406 	br	ce5c <__alt_data_end+0xff00ce5c>
    d10c:	1025883a 	mov	r18,r2
    d110:	003f6d06 	br	cec8 <__alt_data_end+0xff00cec8>
    d114:	b827883a 	mov	r19,r23
    d118:	003f8206 	br	cf24 <__alt_data_end+0xff00cf24>
    d11c:	010007c4 	movi	r4,31
    d120:	20c02616 	blt	r4,r3,d1bc <__divdf3+0x82c>
    d124:	00800804 	movi	r2,32
    d128:	10c5c83a 	sub	r2,r2,r3
    d12c:	888a983a 	sll	r5,r17,r2
    d130:	40c8d83a 	srl	r4,r8,r3
    d134:	4084983a 	sll	r2,r8,r2
    d138:	88e2d83a 	srl	r17,r17,r3
    d13c:	2906b03a 	or	r3,r5,r4
    d140:	1004c03a 	cmpne	r2,r2,zero
    d144:	1886b03a 	or	r3,r3,r2
    d148:	188001cc 	andi	r2,r3,7
    d14c:	10000726 	beq	r2,zero,d16c <__divdf3+0x7dc>
    d150:	188003cc 	andi	r2,r3,15
    d154:	01000104 	movi	r4,4
    d158:	11000426 	beq	r2,r4,d16c <__divdf3+0x7dc>
    d15c:	1805883a 	mov	r2,r3
    d160:	10c00104 	addi	r3,r2,4
    d164:	1885803a 	cmpltu	r2,r3,r2
    d168:	88a3883a 	add	r17,r17,r2
    d16c:	8880202c 	andhi	r2,r17,128
    d170:	10002726 	beq	r2,zero,d210 <__divdf3+0x880>
    d174:	98c0004c 	andi	r3,r19,1
    d178:	00800044 	movi	r2,1
    d17c:	000b883a 	mov	r5,zero
    d180:	0025883a 	mov	r18,zero
    d184:	003e6106 	br	cb0c <__alt_data_end+0xff00cb0c>
    d188:	85a1883a 	add	r16,r16,r22
    d18c:	8585803a 	cmpltu	r2,r16,r22
    d190:	1705883a 	add	r2,r2,fp
    d194:	14a5883a 	add	r18,r2,r18
    d198:	8c7fff84 	addi	r17,r17,-2
    d19c:	003f1106 	br	cde4 <__alt_data_end+0xff00cde4>
    d1a0:	b589883a 	add	r4,r22,r22
    d1a4:	25ad803a 	cmpltu	r22,r4,r22
    d1a8:	b739883a 	add	fp,r22,fp
    d1ac:	40bfff84 	addi	r2,r8,-2
    d1b0:	bf2f883a 	add	r23,r23,fp
    d1b4:	202d883a 	mov	r22,r4
    d1b8:	003f9306 	br	d008 <__alt_data_end+0xff00d008>
    d1bc:	013ff844 	movi	r4,-31
    d1c0:	2085c83a 	sub	r2,r4,r2
    d1c4:	8888d83a 	srl	r4,r17,r2
    d1c8:	00800804 	movi	r2,32
    d1cc:	18802126 	beq	r3,r2,d254 <__divdf3+0x8c4>
    d1d0:	00801004 	movi	r2,64
    d1d4:	10c5c83a 	sub	r2,r2,r3
    d1d8:	8884983a 	sll	r2,r17,r2
    d1dc:	1204b03a 	or	r2,r2,r8
    d1e0:	1004c03a 	cmpne	r2,r2,zero
    d1e4:	2084b03a 	or	r2,r4,r2
    d1e8:	144001cc 	andi	r17,r2,7
    d1ec:	88000d1e 	bne	r17,zero,d224 <__divdf3+0x894>
    d1f0:	000b883a 	mov	r5,zero
    d1f4:	1024d0fa 	srli	r18,r2,3
    d1f8:	98c0004c 	andi	r3,r19,1
    d1fc:	0005883a 	mov	r2,zero
    d200:	9464b03a 	or	r18,r18,r17
    d204:	003e4106 	br	cb0c <__alt_data_end+0xff00cb0c>
    d208:	1007883a 	mov	r3,r2
    d20c:	0023883a 	mov	r17,zero
    d210:	880a927a 	slli	r5,r17,9
    d214:	1805883a 	mov	r2,r3
    d218:	8822977a 	slli	r17,r17,29
    d21c:	280ad33a 	srli	r5,r5,12
    d220:	003ff406 	br	d1f4 <__alt_data_end+0xff00d1f4>
    d224:	10c003cc 	andi	r3,r2,15
    d228:	01000104 	movi	r4,4
    d22c:	193ff626 	beq	r3,r4,d208 <__alt_data_end+0xff00d208>
    d230:	0023883a 	mov	r17,zero
    d234:	003fca06 	br	d160 <__alt_data_end+0xff00d160>
    d238:	813fd336 	bltu	r16,r4,d188 <__alt_data_end+0xff00d188>
    d23c:	1023883a 	mov	r17,r2
    d240:	003fa806 	br	d0e4 <__alt_data_end+0xff00d0e4>
    d244:	b0ffd636 	bltu	r22,r3,d1a0 <__alt_data_end+0xff00d1a0>
    d248:	1011883a 	mov	r8,r2
    d24c:	b0ff341e 	bne	r22,r3,cf20 <__alt_data_end+0xff00cf20>
    d250:	003f3406 	br	cf24 <__alt_data_end+0xff00cf24>
    d254:	0005883a 	mov	r2,zero
    d258:	003fe006 	br	d1dc <__alt_data_end+0xff00d1dc>
    d25c:	00800434 	movhi	r2,16
    d260:	89400234 	orhi	r5,r17,8
    d264:	10bfffc4 	addi	r2,r2,-1
    d268:	b807883a 	mov	r3,r23
    d26c:	288a703a 	and	r5,r5,r2
    d270:	4025883a 	mov	r18,r8
    d274:	003e8206 	br	cc80 <__alt_data_end+0xff00cc80>

0000d278 <__eqdf2>:
    d278:	2804d53a 	srli	r2,r5,20
    d27c:	3806d53a 	srli	r3,r7,20
    d280:	02000434 	movhi	r8,16
    d284:	423fffc4 	addi	r8,r8,-1
    d288:	1081ffcc 	andi	r2,r2,2047
    d28c:	0281ffc4 	movi	r10,2047
    d290:	2a12703a 	and	r9,r5,r8
    d294:	18c1ffcc 	andi	r3,r3,2047
    d298:	3a10703a 	and	r8,r7,r8
    d29c:	280ad7fa 	srli	r5,r5,31
    d2a0:	380ed7fa 	srli	r7,r7,31
    d2a4:	12801026 	beq	r2,r10,d2e8 <__eqdf2+0x70>
    d2a8:	0281ffc4 	movi	r10,2047
    d2ac:	1a800a26 	beq	r3,r10,d2d8 <__eqdf2+0x60>
    d2b0:	10c00226 	beq	r2,r3,d2bc <__eqdf2+0x44>
    d2b4:	00800044 	movi	r2,1
    d2b8:	f800283a 	ret
    d2bc:	4a3ffd1e 	bne	r9,r8,d2b4 <__alt_data_end+0xff00d2b4>
    d2c0:	21bffc1e 	bne	r4,r6,d2b4 <__alt_data_end+0xff00d2b4>
    d2c4:	29c00c26 	beq	r5,r7,d2f8 <__eqdf2+0x80>
    d2c8:	103ffa1e 	bne	r2,zero,d2b4 <__alt_data_end+0xff00d2b4>
    d2cc:	2244b03a 	or	r2,r4,r9
    d2d0:	1004c03a 	cmpne	r2,r2,zero
    d2d4:	f800283a 	ret
    d2d8:	3214b03a 	or	r10,r6,r8
    d2dc:	503ff426 	beq	r10,zero,d2b0 <__alt_data_end+0xff00d2b0>
    d2e0:	00800044 	movi	r2,1
    d2e4:	f800283a 	ret
    d2e8:	2254b03a 	or	r10,r4,r9
    d2ec:	503fee26 	beq	r10,zero,d2a8 <__alt_data_end+0xff00d2a8>
    d2f0:	00800044 	movi	r2,1
    d2f4:	f800283a 	ret
    d2f8:	0005883a 	mov	r2,zero
    d2fc:	f800283a 	ret

0000d300 <__gedf2>:
    d300:	2804d53a 	srli	r2,r5,20
    d304:	3806d53a 	srli	r3,r7,20
    d308:	02000434 	movhi	r8,16
    d30c:	423fffc4 	addi	r8,r8,-1
    d310:	1081ffcc 	andi	r2,r2,2047
    d314:	0241ffc4 	movi	r9,2047
    d318:	2a14703a 	and	r10,r5,r8
    d31c:	18c1ffcc 	andi	r3,r3,2047
    d320:	3a10703a 	and	r8,r7,r8
    d324:	280ad7fa 	srli	r5,r5,31
    d328:	380ed7fa 	srli	r7,r7,31
    d32c:	12401d26 	beq	r2,r9,d3a4 <__gedf2+0xa4>
    d330:	0241ffc4 	movi	r9,2047
    d334:	1a401226 	beq	r3,r9,d380 <__gedf2+0x80>
    d338:	1000081e 	bne	r2,zero,d35c <__gedf2+0x5c>
    d33c:	2296b03a 	or	r11,r4,r10
    d340:	5813003a 	cmpeq	r9,r11,zero
    d344:	1800091e 	bne	r3,zero,d36c <__gedf2+0x6c>
    d348:	3218b03a 	or	r12,r6,r8
    d34c:	6000071e 	bne	r12,zero,d36c <__gedf2+0x6c>
    d350:	0005883a 	mov	r2,zero
    d354:	5800101e 	bne	r11,zero,d398 <__gedf2+0x98>
    d358:	f800283a 	ret
    d35c:	18000c1e 	bne	r3,zero,d390 <__gedf2+0x90>
    d360:	3212b03a 	or	r9,r6,r8
    d364:	48000c26 	beq	r9,zero,d398 <__gedf2+0x98>
    d368:	0013883a 	mov	r9,zero
    d36c:	39c03fcc 	andi	r7,r7,255
    d370:	48000826 	beq	r9,zero,d394 <__gedf2+0x94>
    d374:	38000926 	beq	r7,zero,d39c <__gedf2+0x9c>
    d378:	00800044 	movi	r2,1
    d37c:	f800283a 	ret
    d380:	3212b03a 	or	r9,r6,r8
    d384:	483fec26 	beq	r9,zero,d338 <__alt_data_end+0xff00d338>
    d388:	00bfff84 	movi	r2,-2
    d38c:	f800283a 	ret
    d390:	39c03fcc 	andi	r7,r7,255
    d394:	29c00626 	beq	r5,r7,d3b0 <__gedf2+0xb0>
    d398:	283ff726 	beq	r5,zero,d378 <__alt_data_end+0xff00d378>
    d39c:	00bfffc4 	movi	r2,-1
    d3a0:	f800283a 	ret
    d3a4:	2292b03a 	or	r9,r4,r10
    d3a8:	483fe126 	beq	r9,zero,d330 <__alt_data_end+0xff00d330>
    d3ac:	003ff606 	br	d388 <__alt_data_end+0xff00d388>
    d3b0:	18bff916 	blt	r3,r2,d398 <__alt_data_end+0xff00d398>
    d3b4:	10c00316 	blt	r2,r3,d3c4 <__gedf2+0xc4>
    d3b8:	42bff736 	bltu	r8,r10,d398 <__alt_data_end+0xff00d398>
    d3bc:	52000326 	beq	r10,r8,d3cc <__gedf2+0xcc>
    d3c0:	5200042e 	bgeu	r10,r8,d3d4 <__gedf2+0xd4>
    d3c4:	283fec1e 	bne	r5,zero,d378 <__alt_data_end+0xff00d378>
    d3c8:	003ff406 	br	d39c <__alt_data_end+0xff00d39c>
    d3cc:	313ff236 	bltu	r6,r4,d398 <__alt_data_end+0xff00d398>
    d3d0:	21bffc36 	bltu	r4,r6,d3c4 <__alt_data_end+0xff00d3c4>
    d3d4:	0005883a 	mov	r2,zero
    d3d8:	f800283a 	ret

0000d3dc <__ledf2>:
    d3dc:	2804d53a 	srli	r2,r5,20
    d3e0:	3810d53a 	srli	r8,r7,20
    d3e4:	00c00434 	movhi	r3,16
    d3e8:	18ffffc4 	addi	r3,r3,-1
    d3ec:	1081ffcc 	andi	r2,r2,2047
    d3f0:	0241ffc4 	movi	r9,2047
    d3f4:	28d4703a 	and	r10,r5,r3
    d3f8:	4201ffcc 	andi	r8,r8,2047
    d3fc:	38c6703a 	and	r3,r7,r3
    d400:	280ad7fa 	srli	r5,r5,31
    d404:	380ed7fa 	srli	r7,r7,31
    d408:	12401f26 	beq	r2,r9,d488 <__ledf2+0xac>
    d40c:	0241ffc4 	movi	r9,2047
    d410:	42401426 	beq	r8,r9,d464 <__ledf2+0x88>
    d414:	1000091e 	bne	r2,zero,d43c <__ledf2+0x60>
    d418:	2296b03a 	or	r11,r4,r10
    d41c:	5813003a 	cmpeq	r9,r11,zero
    d420:	29403fcc 	andi	r5,r5,255
    d424:	40000a1e 	bne	r8,zero,d450 <__ledf2+0x74>
    d428:	30d8b03a 	or	r12,r6,r3
    d42c:	6000081e 	bne	r12,zero,d450 <__ledf2+0x74>
    d430:	0005883a 	mov	r2,zero
    d434:	5800111e 	bne	r11,zero,d47c <__ledf2+0xa0>
    d438:	f800283a 	ret
    d43c:	29403fcc 	andi	r5,r5,255
    d440:	40000c1e 	bne	r8,zero,d474 <__ledf2+0x98>
    d444:	30d2b03a 	or	r9,r6,r3
    d448:	48000c26 	beq	r9,zero,d47c <__ledf2+0xa0>
    d44c:	0013883a 	mov	r9,zero
    d450:	39c03fcc 	andi	r7,r7,255
    d454:	48000826 	beq	r9,zero,d478 <__ledf2+0x9c>
    d458:	38001126 	beq	r7,zero,d4a0 <__ledf2+0xc4>
    d45c:	00800044 	movi	r2,1
    d460:	f800283a 	ret
    d464:	30d2b03a 	or	r9,r6,r3
    d468:	483fea26 	beq	r9,zero,d414 <__alt_data_end+0xff00d414>
    d46c:	00800084 	movi	r2,2
    d470:	f800283a 	ret
    d474:	39c03fcc 	andi	r7,r7,255
    d478:	39400726 	beq	r7,r5,d498 <__ledf2+0xbc>
    d47c:	2800081e 	bne	r5,zero,d4a0 <__ledf2+0xc4>
    d480:	00800044 	movi	r2,1
    d484:	f800283a 	ret
    d488:	2292b03a 	or	r9,r4,r10
    d48c:	483fdf26 	beq	r9,zero,d40c <__alt_data_end+0xff00d40c>
    d490:	00800084 	movi	r2,2
    d494:	f800283a 	ret
    d498:	4080030e 	bge	r8,r2,d4a8 <__ledf2+0xcc>
    d49c:	383fef26 	beq	r7,zero,d45c <__alt_data_end+0xff00d45c>
    d4a0:	00bfffc4 	movi	r2,-1
    d4a4:	f800283a 	ret
    d4a8:	123feb16 	blt	r2,r8,d458 <__alt_data_end+0xff00d458>
    d4ac:	1abff336 	bltu	r3,r10,d47c <__alt_data_end+0xff00d47c>
    d4b0:	50c00326 	beq	r10,r3,d4c0 <__ledf2+0xe4>
    d4b4:	50c0042e 	bgeu	r10,r3,d4c8 <__ledf2+0xec>
    d4b8:	283fe81e 	bne	r5,zero,d45c <__alt_data_end+0xff00d45c>
    d4bc:	003ff806 	br	d4a0 <__alt_data_end+0xff00d4a0>
    d4c0:	313fee36 	bltu	r6,r4,d47c <__alt_data_end+0xff00d47c>
    d4c4:	21bffc36 	bltu	r4,r6,d4b8 <__alt_data_end+0xff00d4b8>
    d4c8:	0005883a 	mov	r2,zero
    d4cc:	f800283a 	ret

0000d4d0 <__muldf3>:
    d4d0:	defff304 	addi	sp,sp,-52
    d4d4:	2804d53a 	srli	r2,r5,20
    d4d8:	dd800915 	stw	r22,36(sp)
    d4dc:	282cd7fa 	srli	r22,r5,31
    d4e0:	dc000315 	stw	r16,12(sp)
    d4e4:	04000434 	movhi	r16,16
    d4e8:	dd400815 	stw	r21,32(sp)
    d4ec:	dc800515 	stw	r18,20(sp)
    d4f0:	843fffc4 	addi	r16,r16,-1
    d4f4:	dfc00c15 	stw	ra,48(sp)
    d4f8:	df000b15 	stw	fp,44(sp)
    d4fc:	ddc00a15 	stw	r23,40(sp)
    d500:	dd000715 	stw	r20,28(sp)
    d504:	dcc00615 	stw	r19,24(sp)
    d508:	dc400415 	stw	r17,16(sp)
    d50c:	1481ffcc 	andi	r18,r2,2047
    d510:	2c20703a 	and	r16,r5,r16
    d514:	b02b883a 	mov	r21,r22
    d518:	b2403fcc 	andi	r9,r22,255
    d51c:	90006026 	beq	r18,zero,d6a0 <__muldf3+0x1d0>
    d520:	0081ffc4 	movi	r2,2047
    d524:	2029883a 	mov	r20,r4
    d528:	90803626 	beq	r18,r2,d604 <__muldf3+0x134>
    d52c:	80800434 	orhi	r2,r16,16
    d530:	100490fa 	slli	r2,r2,3
    d534:	2020d77a 	srli	r16,r4,29
    d538:	202890fa 	slli	r20,r4,3
    d53c:	94bf0044 	addi	r18,r18,-1023
    d540:	80a0b03a 	or	r16,r16,r2
    d544:	0027883a 	mov	r19,zero
    d548:	0039883a 	mov	fp,zero
    d54c:	3804d53a 	srli	r2,r7,20
    d550:	382ed7fa 	srli	r23,r7,31
    d554:	04400434 	movhi	r17,16
    d558:	8c7fffc4 	addi	r17,r17,-1
    d55c:	1081ffcc 	andi	r2,r2,2047
    d560:	3011883a 	mov	r8,r6
    d564:	3c62703a 	and	r17,r7,r17
    d568:	ba803fcc 	andi	r10,r23,255
    d56c:	10006d26 	beq	r2,zero,d724 <__muldf3+0x254>
    d570:	00c1ffc4 	movi	r3,2047
    d574:	10c06526 	beq	r2,r3,d70c <__muldf3+0x23c>
    d578:	88c00434 	orhi	r3,r17,16
    d57c:	180690fa 	slli	r3,r3,3
    d580:	3022d77a 	srli	r17,r6,29
    d584:	301090fa 	slli	r8,r6,3
    d588:	10bf0044 	addi	r2,r2,-1023
    d58c:	88e2b03a 	or	r17,r17,r3
    d590:	000b883a 	mov	r5,zero
    d594:	9085883a 	add	r2,r18,r2
    d598:	2cc8b03a 	or	r4,r5,r19
    d59c:	00c003c4 	movi	r3,15
    d5a0:	bdacf03a 	xor	r22,r23,r22
    d5a4:	12c00044 	addi	r11,r2,1
    d5a8:	19009936 	bltu	r3,r4,d810 <__muldf3+0x340>
    d5ac:	200890ba 	slli	r4,r4,2
    d5b0:	00c00074 	movhi	r3,1
    d5b4:	18f57104 	addi	r3,r3,-10812
    d5b8:	20c9883a 	add	r4,r4,r3
    d5bc:	20c00017 	ldw	r3,0(r4)
    d5c0:	1800683a 	jmp	r3
    d5c4:	0000d810 	cmplti	zero,zero,864
    d5c8:	0000d624 	muli	zero,zero,856
    d5cc:	0000d624 	muli	zero,zero,856
    d5d0:	0000d620 	cmpeqi	zero,zero,856
    d5d4:	0000d7ec 	andhi	zero,zero,863
    d5d8:	0000d7ec 	andhi	zero,zero,863
    d5dc:	0000d7d4 	movui	zero,863
    d5e0:	0000d620 	cmpeqi	zero,zero,856
    d5e4:	0000d7ec 	andhi	zero,zero,863
    d5e8:	0000d7d4 	movui	zero,863
    d5ec:	0000d7ec 	andhi	zero,zero,863
    d5f0:	0000d620 	cmpeqi	zero,zero,856
    d5f4:	0000d7fc 	xorhi	zero,zero,863
    d5f8:	0000d7fc 	xorhi	zero,zero,863
    d5fc:	0000d7fc 	xorhi	zero,zero,863
    d600:	0000da18 	cmpnei	zero,zero,872
    d604:	2404b03a 	or	r2,r4,r16
    d608:	10006f1e 	bne	r2,zero,d7c8 <__muldf3+0x2f8>
    d60c:	04c00204 	movi	r19,8
    d610:	0021883a 	mov	r16,zero
    d614:	0029883a 	mov	r20,zero
    d618:	07000084 	movi	fp,2
    d61c:	003fcb06 	br	d54c <__alt_data_end+0xff00d54c>
    d620:	502d883a 	mov	r22,r10
    d624:	00800084 	movi	r2,2
    d628:	28805726 	beq	r5,r2,d788 <__muldf3+0x2b8>
    d62c:	008000c4 	movi	r2,3
    d630:	28816626 	beq	r5,r2,dbcc <__muldf3+0x6fc>
    d634:	00800044 	movi	r2,1
    d638:	2881411e 	bne	r5,r2,db40 <__muldf3+0x670>
    d63c:	b02b883a 	mov	r21,r22
    d640:	0005883a 	mov	r2,zero
    d644:	000b883a 	mov	r5,zero
    d648:	0029883a 	mov	r20,zero
    d64c:	1004953a 	slli	r2,r2,20
    d650:	a8c03fcc 	andi	r3,r21,255
    d654:	04400434 	movhi	r17,16
    d658:	8c7fffc4 	addi	r17,r17,-1
    d65c:	180697fa 	slli	r3,r3,31
    d660:	2c4a703a 	and	r5,r5,r17
    d664:	288ab03a 	or	r5,r5,r2
    d668:	28c6b03a 	or	r3,r5,r3
    d66c:	a005883a 	mov	r2,r20
    d670:	dfc00c17 	ldw	ra,48(sp)
    d674:	df000b17 	ldw	fp,44(sp)
    d678:	ddc00a17 	ldw	r23,40(sp)
    d67c:	dd800917 	ldw	r22,36(sp)
    d680:	dd400817 	ldw	r21,32(sp)
    d684:	dd000717 	ldw	r20,28(sp)
    d688:	dcc00617 	ldw	r19,24(sp)
    d68c:	dc800517 	ldw	r18,20(sp)
    d690:	dc400417 	ldw	r17,16(sp)
    d694:	dc000317 	ldw	r16,12(sp)
    d698:	dec00d04 	addi	sp,sp,52
    d69c:	f800283a 	ret
    d6a0:	2404b03a 	or	r2,r4,r16
    d6a4:	2027883a 	mov	r19,r4
    d6a8:	10004226 	beq	r2,zero,d7b4 <__muldf3+0x2e4>
    d6ac:	8000fc26 	beq	r16,zero,daa0 <__muldf3+0x5d0>
    d6b0:	8009883a 	mov	r4,r16
    d6b4:	d9800215 	stw	r6,8(sp)
    d6b8:	d9c00015 	stw	r7,0(sp)
    d6bc:	da400115 	stw	r9,4(sp)
    d6c0:	000e6e80 	call	e6e8 <__clzsi2>
    d6c4:	d9800217 	ldw	r6,8(sp)
    d6c8:	d9c00017 	ldw	r7,0(sp)
    d6cc:	da400117 	ldw	r9,4(sp)
    d6d0:	113ffd44 	addi	r4,r2,-11
    d6d4:	00c00704 	movi	r3,28
    d6d8:	1900ed16 	blt	r3,r4,da90 <__muldf3+0x5c0>
    d6dc:	00c00744 	movi	r3,29
    d6e0:	147ffe04 	addi	r17,r2,-8
    d6e4:	1907c83a 	sub	r3,r3,r4
    d6e8:	8460983a 	sll	r16,r16,r17
    d6ec:	98c6d83a 	srl	r3,r19,r3
    d6f0:	9c68983a 	sll	r20,r19,r17
    d6f4:	1c20b03a 	or	r16,r3,r16
    d6f8:	1080fcc4 	addi	r2,r2,1011
    d6fc:	00a5c83a 	sub	r18,zero,r2
    d700:	0027883a 	mov	r19,zero
    d704:	0039883a 	mov	fp,zero
    d708:	003f9006 	br	d54c <__alt_data_end+0xff00d54c>
    d70c:	3446b03a 	or	r3,r6,r17
    d710:	1800261e 	bne	r3,zero,d7ac <__muldf3+0x2dc>
    d714:	0023883a 	mov	r17,zero
    d718:	0011883a 	mov	r8,zero
    d71c:	01400084 	movi	r5,2
    d720:	003f9c06 	br	d594 <__alt_data_end+0xff00d594>
    d724:	3446b03a 	or	r3,r6,r17
    d728:	18001c26 	beq	r3,zero,d79c <__muldf3+0x2cc>
    d72c:	8800ce26 	beq	r17,zero,da68 <__muldf3+0x598>
    d730:	8809883a 	mov	r4,r17
    d734:	d9800215 	stw	r6,8(sp)
    d738:	da400115 	stw	r9,4(sp)
    d73c:	da800015 	stw	r10,0(sp)
    d740:	000e6e80 	call	e6e8 <__clzsi2>
    d744:	d9800217 	ldw	r6,8(sp)
    d748:	da400117 	ldw	r9,4(sp)
    d74c:	da800017 	ldw	r10,0(sp)
    d750:	113ffd44 	addi	r4,r2,-11
    d754:	00c00704 	movi	r3,28
    d758:	1900bf16 	blt	r3,r4,da58 <__muldf3+0x588>
    d75c:	00c00744 	movi	r3,29
    d760:	123ffe04 	addi	r8,r2,-8
    d764:	1907c83a 	sub	r3,r3,r4
    d768:	8a22983a 	sll	r17,r17,r8
    d76c:	30c6d83a 	srl	r3,r6,r3
    d770:	3210983a 	sll	r8,r6,r8
    d774:	1c62b03a 	or	r17,r3,r17
    d778:	1080fcc4 	addi	r2,r2,1011
    d77c:	0085c83a 	sub	r2,zero,r2
    d780:	000b883a 	mov	r5,zero
    d784:	003f8306 	br	d594 <__alt_data_end+0xff00d594>
    d788:	b02b883a 	mov	r21,r22
    d78c:	0081ffc4 	movi	r2,2047
    d790:	000b883a 	mov	r5,zero
    d794:	0029883a 	mov	r20,zero
    d798:	003fac06 	br	d64c <__alt_data_end+0xff00d64c>
    d79c:	0023883a 	mov	r17,zero
    d7a0:	0011883a 	mov	r8,zero
    d7a4:	01400044 	movi	r5,1
    d7a8:	003f7a06 	br	d594 <__alt_data_end+0xff00d594>
    d7ac:	014000c4 	movi	r5,3
    d7b0:	003f7806 	br	d594 <__alt_data_end+0xff00d594>
    d7b4:	04c00104 	movi	r19,4
    d7b8:	0021883a 	mov	r16,zero
    d7bc:	0029883a 	mov	r20,zero
    d7c0:	07000044 	movi	fp,1
    d7c4:	003f6106 	br	d54c <__alt_data_end+0xff00d54c>
    d7c8:	04c00304 	movi	r19,12
    d7cc:	070000c4 	movi	fp,3
    d7d0:	003f5e06 	br	d54c <__alt_data_end+0xff00d54c>
    d7d4:	01400434 	movhi	r5,16
    d7d8:	002b883a 	mov	r21,zero
    d7dc:	297fffc4 	addi	r5,r5,-1
    d7e0:	053fffc4 	movi	r20,-1
    d7e4:	0081ffc4 	movi	r2,2047
    d7e8:	003f9806 	br	d64c <__alt_data_end+0xff00d64c>
    d7ec:	8023883a 	mov	r17,r16
    d7f0:	a011883a 	mov	r8,r20
    d7f4:	e00b883a 	mov	r5,fp
    d7f8:	003f8a06 	br	d624 <__alt_data_end+0xff00d624>
    d7fc:	8023883a 	mov	r17,r16
    d800:	a011883a 	mov	r8,r20
    d804:	482d883a 	mov	r22,r9
    d808:	e00b883a 	mov	r5,fp
    d80c:	003f8506 	br	d624 <__alt_data_end+0xff00d624>
    d810:	a00ad43a 	srli	r5,r20,16
    d814:	401ad43a 	srli	r13,r8,16
    d818:	a53fffcc 	andi	r20,r20,65535
    d81c:	423fffcc 	andi	r8,r8,65535
    d820:	4519383a 	mul	r12,r8,r20
    d824:	4147383a 	mul	r3,r8,r5
    d828:	6d09383a 	mul	r4,r13,r20
    d82c:	600cd43a 	srli	r6,r12,16
    d830:	2b5d383a 	mul	r14,r5,r13
    d834:	20c9883a 	add	r4,r4,r3
    d838:	310d883a 	add	r6,r6,r4
    d83c:	30c0022e 	bgeu	r6,r3,d848 <__muldf3+0x378>
    d840:	00c00074 	movhi	r3,1
    d844:	70dd883a 	add	r14,r14,r3
    d848:	8826d43a 	srli	r19,r17,16
    d84c:	8bffffcc 	andi	r15,r17,65535
    d850:	7d23383a 	mul	r17,r15,r20
    d854:	7949383a 	mul	r4,r15,r5
    d858:	9d29383a 	mul	r20,r19,r20
    d85c:	8814d43a 	srli	r10,r17,16
    d860:	3012943a 	slli	r9,r6,16
    d864:	a129883a 	add	r20,r20,r4
    d868:	633fffcc 	andi	r12,r12,65535
    d86c:	5515883a 	add	r10,r10,r20
    d870:	3006d43a 	srli	r3,r6,16
    d874:	4b13883a 	add	r9,r9,r12
    d878:	2ccb383a 	mul	r5,r5,r19
    d87c:	5100022e 	bgeu	r10,r4,d888 <__muldf3+0x3b8>
    d880:	01000074 	movhi	r4,1
    d884:	290b883a 	add	r5,r5,r4
    d888:	802ad43a 	srli	r21,r16,16
    d88c:	843fffcc 	andi	r16,r16,65535
    d890:	440d383a 	mul	r6,r8,r16
    d894:	4565383a 	mul	r18,r8,r21
    d898:	8349383a 	mul	r4,r16,r13
    d89c:	500e943a 	slli	r7,r10,16
    d8a0:	3010d43a 	srli	r8,r6,16
    d8a4:	5028d43a 	srli	r20,r10,16
    d8a8:	2489883a 	add	r4,r4,r18
    d8ac:	8abfffcc 	andi	r10,r17,65535
    d8b0:	3a95883a 	add	r10,r7,r10
    d8b4:	4119883a 	add	r12,r8,r4
    d8b8:	a169883a 	add	r20,r20,r5
    d8bc:	1a87883a 	add	r3,r3,r10
    d8c0:	6d5b383a 	mul	r13,r13,r21
    d8c4:	6480022e 	bgeu	r12,r18,d8d0 <__muldf3+0x400>
    d8c8:	01000074 	movhi	r4,1
    d8cc:	691b883a 	add	r13,r13,r4
    d8d0:	7c25383a 	mul	r18,r15,r16
    d8d4:	7d4b383a 	mul	r5,r15,r21
    d8d8:	84cf383a 	mul	r7,r16,r19
    d8dc:	901ed43a 	srli	r15,r18,16
    d8e0:	6008d43a 	srli	r4,r12,16
    d8e4:	6010943a 	slli	r8,r12,16
    d8e8:	394f883a 	add	r7,r7,r5
    d8ec:	333fffcc 	andi	r12,r6,65535
    d8f0:	79df883a 	add	r15,r15,r7
    d8f4:	235b883a 	add	r13,r4,r13
    d8f8:	9d63383a 	mul	r17,r19,r21
    d8fc:	4309883a 	add	r4,r8,r12
    d900:	7940022e 	bgeu	r15,r5,d90c <__muldf3+0x43c>
    d904:	01400074 	movhi	r5,1
    d908:	8963883a 	add	r17,r17,r5
    d90c:	780a943a 	slli	r5,r15,16
    d910:	91bfffcc 	andi	r6,r18,65535
    d914:	70c7883a 	add	r3,r14,r3
    d918:	298d883a 	add	r6,r5,r6
    d91c:	1a8f803a 	cmpltu	r7,r3,r10
    d920:	350b883a 	add	r5,r6,r20
    d924:	20c7883a 	add	r3,r4,r3
    d928:	3955883a 	add	r10,r7,r5
    d92c:	1909803a 	cmpltu	r4,r3,r4
    d930:	6a91883a 	add	r8,r13,r10
    d934:	780cd43a 	srli	r6,r15,16
    d938:	2219883a 	add	r12,r4,r8
    d93c:	2d0b803a 	cmpltu	r5,r5,r20
    d940:	51cf803a 	cmpltu	r7,r10,r7
    d944:	29ceb03a 	or	r7,r5,r7
    d948:	4351803a 	cmpltu	r8,r8,r13
    d94c:	610b803a 	cmpltu	r5,r12,r4
    d950:	4148b03a 	or	r4,r8,r5
    d954:	398f883a 	add	r7,r7,r6
    d958:	3909883a 	add	r4,r7,r4
    d95c:	1810927a 	slli	r8,r3,9
    d960:	2449883a 	add	r4,r4,r17
    d964:	2008927a 	slli	r4,r4,9
    d968:	6022d5fa 	srli	r17,r12,23
    d96c:	1806d5fa 	srli	r3,r3,23
    d970:	4252b03a 	or	r9,r8,r9
    d974:	600a927a 	slli	r5,r12,9
    d978:	4810c03a 	cmpne	r8,r9,zero
    d97c:	2462b03a 	or	r17,r4,r17
    d980:	40c6b03a 	or	r3,r8,r3
    d984:	8900402c 	andhi	r4,r17,256
    d988:	1950b03a 	or	r8,r3,r5
    d98c:	20000726 	beq	r4,zero,d9ac <__muldf3+0x4dc>
    d990:	4006d07a 	srli	r3,r8,1
    d994:	880497fa 	slli	r2,r17,31
    d998:	4200004c 	andi	r8,r8,1
    d99c:	8822d07a 	srli	r17,r17,1
    d9a0:	1a10b03a 	or	r8,r3,r8
    d9a4:	1210b03a 	or	r8,r2,r8
    d9a8:	5805883a 	mov	r2,r11
    d9ac:	1140ffc4 	addi	r5,r2,1023
    d9b0:	0140440e 	bge	zero,r5,dac4 <__muldf3+0x5f4>
    d9b4:	40c001cc 	andi	r3,r8,7
    d9b8:	18000726 	beq	r3,zero,d9d8 <__muldf3+0x508>
    d9bc:	40c003cc 	andi	r3,r8,15
    d9c0:	01000104 	movi	r4,4
    d9c4:	19000426 	beq	r3,r4,d9d8 <__muldf3+0x508>
    d9c8:	4107883a 	add	r3,r8,r4
    d9cc:	1a11803a 	cmpltu	r8,r3,r8
    d9d0:	8a23883a 	add	r17,r17,r8
    d9d4:	1811883a 	mov	r8,r3
    d9d8:	88c0402c 	andhi	r3,r17,256
    d9dc:	18000426 	beq	r3,zero,d9f0 <__muldf3+0x520>
    d9e0:	11410004 	addi	r5,r2,1024
    d9e4:	00bfc034 	movhi	r2,65280
    d9e8:	10bfffc4 	addi	r2,r2,-1
    d9ec:	88a2703a 	and	r17,r17,r2
    d9f0:	0081ff84 	movi	r2,2046
    d9f4:	117f6416 	blt	r2,r5,d788 <__alt_data_end+0xff00d788>
    d9f8:	8828977a 	slli	r20,r17,29
    d9fc:	4010d0fa 	srli	r8,r8,3
    da00:	8822927a 	slli	r17,r17,9
    da04:	2881ffcc 	andi	r2,r5,2047
    da08:	a228b03a 	or	r20,r20,r8
    da0c:	880ad33a 	srli	r5,r17,12
    da10:	b02b883a 	mov	r21,r22
    da14:	003f0d06 	br	d64c <__alt_data_end+0xff00d64c>
    da18:	8080022c 	andhi	r2,r16,8
    da1c:	10000926 	beq	r2,zero,da44 <__muldf3+0x574>
    da20:	8880022c 	andhi	r2,r17,8
    da24:	1000071e 	bne	r2,zero,da44 <__muldf3+0x574>
    da28:	00800434 	movhi	r2,16
    da2c:	89400234 	orhi	r5,r17,8
    da30:	10bfffc4 	addi	r2,r2,-1
    da34:	b82b883a 	mov	r21,r23
    da38:	288a703a 	and	r5,r5,r2
    da3c:	4029883a 	mov	r20,r8
    da40:	003f6806 	br	d7e4 <__alt_data_end+0xff00d7e4>
    da44:	00800434 	movhi	r2,16
    da48:	81400234 	orhi	r5,r16,8
    da4c:	10bfffc4 	addi	r2,r2,-1
    da50:	288a703a 	and	r5,r5,r2
    da54:	003f6306 	br	d7e4 <__alt_data_end+0xff00d7e4>
    da58:	147ff604 	addi	r17,r2,-40
    da5c:	3462983a 	sll	r17,r6,r17
    da60:	0011883a 	mov	r8,zero
    da64:	003f4406 	br	d778 <__alt_data_end+0xff00d778>
    da68:	3009883a 	mov	r4,r6
    da6c:	d9800215 	stw	r6,8(sp)
    da70:	da400115 	stw	r9,4(sp)
    da74:	da800015 	stw	r10,0(sp)
    da78:	000e6e80 	call	e6e8 <__clzsi2>
    da7c:	10800804 	addi	r2,r2,32
    da80:	da800017 	ldw	r10,0(sp)
    da84:	da400117 	ldw	r9,4(sp)
    da88:	d9800217 	ldw	r6,8(sp)
    da8c:	003f3006 	br	d750 <__alt_data_end+0xff00d750>
    da90:	143ff604 	addi	r16,r2,-40
    da94:	9c20983a 	sll	r16,r19,r16
    da98:	0029883a 	mov	r20,zero
    da9c:	003f1606 	br	d6f8 <__alt_data_end+0xff00d6f8>
    daa0:	d9800215 	stw	r6,8(sp)
    daa4:	d9c00015 	stw	r7,0(sp)
    daa8:	da400115 	stw	r9,4(sp)
    daac:	000e6e80 	call	e6e8 <__clzsi2>
    dab0:	10800804 	addi	r2,r2,32
    dab4:	da400117 	ldw	r9,4(sp)
    dab8:	d9c00017 	ldw	r7,0(sp)
    dabc:	d9800217 	ldw	r6,8(sp)
    dac0:	003f0306 	br	d6d0 <__alt_data_end+0xff00d6d0>
    dac4:	00c00044 	movi	r3,1
    dac8:	1947c83a 	sub	r3,r3,r5
    dacc:	00800e04 	movi	r2,56
    dad0:	10feda16 	blt	r2,r3,d63c <__alt_data_end+0xff00d63c>
    dad4:	008007c4 	movi	r2,31
    dad8:	10c01b16 	blt	r2,r3,db48 <__muldf3+0x678>
    dadc:	00800804 	movi	r2,32
    dae0:	10c5c83a 	sub	r2,r2,r3
    dae4:	888a983a 	sll	r5,r17,r2
    dae8:	40c8d83a 	srl	r4,r8,r3
    daec:	4084983a 	sll	r2,r8,r2
    daf0:	88e2d83a 	srl	r17,r17,r3
    daf4:	2906b03a 	or	r3,r5,r4
    daf8:	1004c03a 	cmpne	r2,r2,zero
    dafc:	1886b03a 	or	r3,r3,r2
    db00:	188001cc 	andi	r2,r3,7
    db04:	10000726 	beq	r2,zero,db24 <__muldf3+0x654>
    db08:	188003cc 	andi	r2,r3,15
    db0c:	01000104 	movi	r4,4
    db10:	11000426 	beq	r2,r4,db24 <__muldf3+0x654>
    db14:	1805883a 	mov	r2,r3
    db18:	10c00104 	addi	r3,r2,4
    db1c:	1885803a 	cmpltu	r2,r3,r2
    db20:	88a3883a 	add	r17,r17,r2
    db24:	8880202c 	andhi	r2,r17,128
    db28:	10001c26 	beq	r2,zero,db9c <__muldf3+0x6cc>
    db2c:	b02b883a 	mov	r21,r22
    db30:	00800044 	movi	r2,1
    db34:	000b883a 	mov	r5,zero
    db38:	0029883a 	mov	r20,zero
    db3c:	003ec306 	br	d64c <__alt_data_end+0xff00d64c>
    db40:	5805883a 	mov	r2,r11
    db44:	003f9906 	br	d9ac <__alt_data_end+0xff00d9ac>
    db48:	00bff844 	movi	r2,-31
    db4c:	1145c83a 	sub	r2,r2,r5
    db50:	8888d83a 	srl	r4,r17,r2
    db54:	00800804 	movi	r2,32
    db58:	18801a26 	beq	r3,r2,dbc4 <__muldf3+0x6f4>
    db5c:	00801004 	movi	r2,64
    db60:	10c5c83a 	sub	r2,r2,r3
    db64:	8884983a 	sll	r2,r17,r2
    db68:	1204b03a 	or	r2,r2,r8
    db6c:	1004c03a 	cmpne	r2,r2,zero
    db70:	2084b03a 	or	r2,r4,r2
    db74:	144001cc 	andi	r17,r2,7
    db78:	88000d1e 	bne	r17,zero,dbb0 <__muldf3+0x6e0>
    db7c:	000b883a 	mov	r5,zero
    db80:	1028d0fa 	srli	r20,r2,3
    db84:	b02b883a 	mov	r21,r22
    db88:	0005883a 	mov	r2,zero
    db8c:	a468b03a 	or	r20,r20,r17
    db90:	003eae06 	br	d64c <__alt_data_end+0xff00d64c>
    db94:	1007883a 	mov	r3,r2
    db98:	0023883a 	mov	r17,zero
    db9c:	880a927a 	slli	r5,r17,9
    dba0:	1805883a 	mov	r2,r3
    dba4:	8822977a 	slli	r17,r17,29
    dba8:	280ad33a 	srli	r5,r5,12
    dbac:	003ff406 	br	db80 <__alt_data_end+0xff00db80>
    dbb0:	10c003cc 	andi	r3,r2,15
    dbb4:	01000104 	movi	r4,4
    dbb8:	193ff626 	beq	r3,r4,db94 <__alt_data_end+0xff00db94>
    dbbc:	0023883a 	mov	r17,zero
    dbc0:	003fd506 	br	db18 <__alt_data_end+0xff00db18>
    dbc4:	0005883a 	mov	r2,zero
    dbc8:	003fe706 	br	db68 <__alt_data_end+0xff00db68>
    dbcc:	00800434 	movhi	r2,16
    dbd0:	89400234 	orhi	r5,r17,8
    dbd4:	10bfffc4 	addi	r2,r2,-1
    dbd8:	b02b883a 	mov	r21,r22
    dbdc:	288a703a 	and	r5,r5,r2
    dbe0:	4029883a 	mov	r20,r8
    dbe4:	003eff06 	br	d7e4 <__alt_data_end+0xff00d7e4>

0000dbe8 <__subdf3>:
    dbe8:	02000434 	movhi	r8,16
    dbec:	423fffc4 	addi	r8,r8,-1
    dbf0:	defffb04 	addi	sp,sp,-20
    dbf4:	2a14703a 	and	r10,r5,r8
    dbf8:	3812d53a 	srli	r9,r7,20
    dbfc:	3a10703a 	and	r8,r7,r8
    dc00:	2006d77a 	srli	r3,r4,29
    dc04:	3004d77a 	srli	r2,r6,29
    dc08:	dc000015 	stw	r16,0(sp)
    dc0c:	501490fa 	slli	r10,r10,3
    dc10:	2820d53a 	srli	r16,r5,20
    dc14:	401090fa 	slli	r8,r8,3
    dc18:	dc800215 	stw	r18,8(sp)
    dc1c:	dc400115 	stw	r17,4(sp)
    dc20:	dfc00415 	stw	ra,16(sp)
    dc24:	202290fa 	slli	r17,r4,3
    dc28:	dcc00315 	stw	r19,12(sp)
    dc2c:	4a41ffcc 	andi	r9,r9,2047
    dc30:	0101ffc4 	movi	r4,2047
    dc34:	2824d7fa 	srli	r18,r5,31
    dc38:	8401ffcc 	andi	r16,r16,2047
    dc3c:	50c6b03a 	or	r3,r10,r3
    dc40:	380ed7fa 	srli	r7,r7,31
    dc44:	408ab03a 	or	r5,r8,r2
    dc48:	300c90fa 	slli	r6,r6,3
    dc4c:	49009626 	beq	r9,r4,dea8 <__subdf3+0x2c0>
    dc50:	39c0005c 	xori	r7,r7,1
    dc54:	8245c83a 	sub	r2,r16,r9
    dc58:	3c807426 	beq	r7,r18,de2c <__subdf3+0x244>
    dc5c:	0080af0e 	bge	zero,r2,df1c <__subdf3+0x334>
    dc60:	48002a1e 	bne	r9,zero,dd0c <__subdf3+0x124>
    dc64:	2988b03a 	or	r4,r5,r6
    dc68:	20009a1e 	bne	r4,zero,ded4 <__subdf3+0x2ec>
    dc6c:	888001cc 	andi	r2,r17,7
    dc70:	10000726 	beq	r2,zero,dc90 <__subdf3+0xa8>
    dc74:	888003cc 	andi	r2,r17,15
    dc78:	01000104 	movi	r4,4
    dc7c:	11000426 	beq	r2,r4,dc90 <__subdf3+0xa8>
    dc80:	890b883a 	add	r5,r17,r4
    dc84:	2c63803a 	cmpltu	r17,r5,r17
    dc88:	1c47883a 	add	r3,r3,r17
    dc8c:	2823883a 	mov	r17,r5
    dc90:	1880202c 	andhi	r2,r3,128
    dc94:	10005926 	beq	r2,zero,ddfc <__subdf3+0x214>
    dc98:	84000044 	addi	r16,r16,1
    dc9c:	0081ffc4 	movi	r2,2047
    dca0:	8080be26 	beq	r16,r2,df9c <__subdf3+0x3b4>
    dca4:	017fe034 	movhi	r5,65408
    dca8:	297fffc4 	addi	r5,r5,-1
    dcac:	1946703a 	and	r3,r3,r5
    dcb0:	1804977a 	slli	r2,r3,29
    dcb4:	1806927a 	slli	r3,r3,9
    dcb8:	8822d0fa 	srli	r17,r17,3
    dcbc:	8401ffcc 	andi	r16,r16,2047
    dcc0:	180ad33a 	srli	r5,r3,12
    dcc4:	9100004c 	andi	r4,r18,1
    dcc8:	1444b03a 	or	r2,r2,r17
    dccc:	80c1ffcc 	andi	r3,r16,2047
    dcd0:	1820953a 	slli	r16,r3,20
    dcd4:	20c03fcc 	andi	r3,r4,255
    dcd8:	180897fa 	slli	r4,r3,31
    dcdc:	00c00434 	movhi	r3,16
    dce0:	18ffffc4 	addi	r3,r3,-1
    dce4:	28c6703a 	and	r3,r5,r3
    dce8:	1c06b03a 	or	r3,r3,r16
    dcec:	1906b03a 	or	r3,r3,r4
    dcf0:	dfc00417 	ldw	ra,16(sp)
    dcf4:	dcc00317 	ldw	r19,12(sp)
    dcf8:	dc800217 	ldw	r18,8(sp)
    dcfc:	dc400117 	ldw	r17,4(sp)
    dd00:	dc000017 	ldw	r16,0(sp)
    dd04:	dec00504 	addi	sp,sp,20
    dd08:	f800283a 	ret
    dd0c:	0101ffc4 	movi	r4,2047
    dd10:	813fd626 	beq	r16,r4,dc6c <__alt_data_end+0xff00dc6c>
    dd14:	29402034 	orhi	r5,r5,128
    dd18:	01000e04 	movi	r4,56
    dd1c:	2080a316 	blt	r4,r2,dfac <__subdf3+0x3c4>
    dd20:	010007c4 	movi	r4,31
    dd24:	2080c616 	blt	r4,r2,e040 <__subdf3+0x458>
    dd28:	01000804 	movi	r4,32
    dd2c:	2089c83a 	sub	r4,r4,r2
    dd30:	2910983a 	sll	r8,r5,r4
    dd34:	308ed83a 	srl	r7,r6,r2
    dd38:	3108983a 	sll	r4,r6,r4
    dd3c:	2884d83a 	srl	r2,r5,r2
    dd40:	41ccb03a 	or	r6,r8,r7
    dd44:	2008c03a 	cmpne	r4,r4,zero
    dd48:	310cb03a 	or	r6,r6,r4
    dd4c:	898dc83a 	sub	r6,r17,r6
    dd50:	89a3803a 	cmpltu	r17,r17,r6
    dd54:	1887c83a 	sub	r3,r3,r2
    dd58:	1c47c83a 	sub	r3,r3,r17
    dd5c:	3023883a 	mov	r17,r6
    dd60:	1880202c 	andhi	r2,r3,128
    dd64:	10002326 	beq	r2,zero,ddf4 <__subdf3+0x20c>
    dd68:	04c02034 	movhi	r19,128
    dd6c:	9cffffc4 	addi	r19,r19,-1
    dd70:	1ce6703a 	and	r19,r3,r19
    dd74:	98007a26 	beq	r19,zero,df60 <__subdf3+0x378>
    dd78:	9809883a 	mov	r4,r19
    dd7c:	000e6e80 	call	e6e8 <__clzsi2>
    dd80:	113ffe04 	addi	r4,r2,-8
    dd84:	00c007c4 	movi	r3,31
    dd88:	19007b16 	blt	r3,r4,df78 <__subdf3+0x390>
    dd8c:	00800804 	movi	r2,32
    dd90:	1105c83a 	sub	r2,r2,r4
    dd94:	8884d83a 	srl	r2,r17,r2
    dd98:	9906983a 	sll	r3,r19,r4
    dd9c:	8922983a 	sll	r17,r17,r4
    dda0:	10c4b03a 	or	r2,r2,r3
    dda4:	24007816 	blt	r4,r16,df88 <__subdf3+0x3a0>
    dda8:	2421c83a 	sub	r16,r4,r16
    ddac:	80c00044 	addi	r3,r16,1
    ddb0:	010007c4 	movi	r4,31
    ddb4:	20c09516 	blt	r4,r3,e00c <__subdf3+0x424>
    ddb8:	01400804 	movi	r5,32
    ddbc:	28cbc83a 	sub	r5,r5,r3
    ddc0:	88c8d83a 	srl	r4,r17,r3
    ddc4:	8962983a 	sll	r17,r17,r5
    ddc8:	114a983a 	sll	r5,r2,r5
    ddcc:	10c6d83a 	srl	r3,r2,r3
    ddd0:	8804c03a 	cmpne	r2,r17,zero
    ddd4:	290ab03a 	or	r5,r5,r4
    ddd8:	28a2b03a 	or	r17,r5,r2
    dddc:	0021883a 	mov	r16,zero
    dde0:	003fa206 	br	dc6c <__alt_data_end+0xff00dc6c>
    dde4:	2090b03a 	or	r8,r4,r2
    dde8:	40018e26 	beq	r8,zero,e424 <__subdf3+0x83c>
    ddec:	1007883a 	mov	r3,r2
    ddf0:	2023883a 	mov	r17,r4
    ddf4:	888001cc 	andi	r2,r17,7
    ddf8:	103f9e1e 	bne	r2,zero,dc74 <__alt_data_end+0xff00dc74>
    ddfc:	1804977a 	slli	r2,r3,29
    de00:	8822d0fa 	srli	r17,r17,3
    de04:	1810d0fa 	srli	r8,r3,3
    de08:	9100004c 	andi	r4,r18,1
    de0c:	1444b03a 	or	r2,r2,r17
    de10:	00c1ffc4 	movi	r3,2047
    de14:	80c02826 	beq	r16,r3,deb8 <__subdf3+0x2d0>
    de18:	01400434 	movhi	r5,16
    de1c:	297fffc4 	addi	r5,r5,-1
    de20:	80e0703a 	and	r16,r16,r3
    de24:	414a703a 	and	r5,r8,r5
    de28:	003fa806 	br	dccc <__alt_data_end+0xff00dccc>
    de2c:	0080630e 	bge	zero,r2,dfbc <__subdf3+0x3d4>
    de30:	48003026 	beq	r9,zero,def4 <__subdf3+0x30c>
    de34:	0101ffc4 	movi	r4,2047
    de38:	813f8c26 	beq	r16,r4,dc6c <__alt_data_end+0xff00dc6c>
    de3c:	29402034 	orhi	r5,r5,128
    de40:	01000e04 	movi	r4,56
    de44:	2080a90e 	bge	r4,r2,e0ec <__subdf3+0x504>
    de48:	298cb03a 	or	r6,r5,r6
    de4c:	3012c03a 	cmpne	r9,r6,zero
    de50:	0005883a 	mov	r2,zero
    de54:	4c53883a 	add	r9,r9,r17
    de58:	4c63803a 	cmpltu	r17,r9,r17
    de5c:	10c7883a 	add	r3,r2,r3
    de60:	88c7883a 	add	r3,r17,r3
    de64:	4823883a 	mov	r17,r9
    de68:	1880202c 	andhi	r2,r3,128
    de6c:	1000d026 	beq	r2,zero,e1b0 <__subdf3+0x5c8>
    de70:	84000044 	addi	r16,r16,1
    de74:	0081ffc4 	movi	r2,2047
    de78:	8080fe26 	beq	r16,r2,e274 <__subdf3+0x68c>
    de7c:	00bfe034 	movhi	r2,65408
    de80:	10bfffc4 	addi	r2,r2,-1
    de84:	1886703a 	and	r3,r3,r2
    de88:	880ad07a 	srli	r5,r17,1
    de8c:	180497fa 	slli	r2,r3,31
    de90:	8900004c 	andi	r4,r17,1
    de94:	2922b03a 	or	r17,r5,r4
    de98:	1806d07a 	srli	r3,r3,1
    de9c:	1462b03a 	or	r17,r2,r17
    dea0:	3825883a 	mov	r18,r7
    dea4:	003f7106 	br	dc6c <__alt_data_end+0xff00dc6c>
    dea8:	2984b03a 	or	r2,r5,r6
    deac:	103f6826 	beq	r2,zero,dc50 <__alt_data_end+0xff00dc50>
    deb0:	39c03fcc 	andi	r7,r7,255
    deb4:	003f6706 	br	dc54 <__alt_data_end+0xff00dc54>
    deb8:	4086b03a 	or	r3,r8,r2
    debc:	18015226 	beq	r3,zero,e408 <__subdf3+0x820>
    dec0:	00c00434 	movhi	r3,16
    dec4:	41400234 	orhi	r5,r8,8
    dec8:	18ffffc4 	addi	r3,r3,-1
    decc:	28ca703a 	and	r5,r5,r3
    ded0:	003f7e06 	br	dccc <__alt_data_end+0xff00dccc>
    ded4:	10bfffc4 	addi	r2,r2,-1
    ded8:	1000491e 	bne	r2,zero,e000 <__subdf3+0x418>
    dedc:	898fc83a 	sub	r7,r17,r6
    dee0:	89e3803a 	cmpltu	r17,r17,r7
    dee4:	1947c83a 	sub	r3,r3,r5
    dee8:	1c47c83a 	sub	r3,r3,r17
    deec:	3823883a 	mov	r17,r7
    def0:	003f9b06 	br	dd60 <__alt_data_end+0xff00dd60>
    def4:	2988b03a 	or	r4,r5,r6
    def8:	203f5c26 	beq	r4,zero,dc6c <__alt_data_end+0xff00dc6c>
    defc:	10bfffc4 	addi	r2,r2,-1
    df00:	1000931e 	bne	r2,zero,e150 <__subdf3+0x568>
    df04:	898d883a 	add	r6,r17,r6
    df08:	3463803a 	cmpltu	r17,r6,r17
    df0c:	1947883a 	add	r3,r3,r5
    df10:	88c7883a 	add	r3,r17,r3
    df14:	3023883a 	mov	r17,r6
    df18:	003fd306 	br	de68 <__alt_data_end+0xff00de68>
    df1c:	1000541e 	bne	r2,zero,e070 <__subdf3+0x488>
    df20:	80800044 	addi	r2,r16,1
    df24:	1081ffcc 	andi	r2,r2,2047
    df28:	01000044 	movi	r4,1
    df2c:	2080a20e 	bge	r4,r2,e1b8 <__subdf3+0x5d0>
    df30:	8989c83a 	sub	r4,r17,r6
    df34:	8905803a 	cmpltu	r2,r17,r4
    df38:	1967c83a 	sub	r19,r3,r5
    df3c:	98a7c83a 	sub	r19,r19,r2
    df40:	9880202c 	andhi	r2,r19,128
    df44:	10006326 	beq	r2,zero,e0d4 <__subdf3+0x4ec>
    df48:	3463c83a 	sub	r17,r6,r17
    df4c:	28c7c83a 	sub	r3,r5,r3
    df50:	344d803a 	cmpltu	r6,r6,r17
    df54:	19a7c83a 	sub	r19,r3,r6
    df58:	3825883a 	mov	r18,r7
    df5c:	983f861e 	bne	r19,zero,dd78 <__alt_data_end+0xff00dd78>
    df60:	8809883a 	mov	r4,r17
    df64:	000e6e80 	call	e6e8 <__clzsi2>
    df68:	10800804 	addi	r2,r2,32
    df6c:	113ffe04 	addi	r4,r2,-8
    df70:	00c007c4 	movi	r3,31
    df74:	193f850e 	bge	r3,r4,dd8c <__alt_data_end+0xff00dd8c>
    df78:	10bff604 	addi	r2,r2,-40
    df7c:	8884983a 	sll	r2,r17,r2
    df80:	0023883a 	mov	r17,zero
    df84:	243f880e 	bge	r4,r16,dda8 <__alt_data_end+0xff00dda8>
    df88:	00ffe034 	movhi	r3,65408
    df8c:	18ffffc4 	addi	r3,r3,-1
    df90:	8121c83a 	sub	r16,r16,r4
    df94:	10c6703a 	and	r3,r2,r3
    df98:	003f3406 	br	dc6c <__alt_data_end+0xff00dc6c>
    df9c:	9100004c 	andi	r4,r18,1
    dfa0:	000b883a 	mov	r5,zero
    dfa4:	0005883a 	mov	r2,zero
    dfa8:	003f4806 	br	dccc <__alt_data_end+0xff00dccc>
    dfac:	298cb03a 	or	r6,r5,r6
    dfb0:	300cc03a 	cmpne	r6,r6,zero
    dfb4:	0005883a 	mov	r2,zero
    dfb8:	003f6406 	br	dd4c <__alt_data_end+0xff00dd4c>
    dfbc:	10009a1e 	bne	r2,zero,e228 <__subdf3+0x640>
    dfc0:	82400044 	addi	r9,r16,1
    dfc4:	4881ffcc 	andi	r2,r9,2047
    dfc8:	02800044 	movi	r10,1
    dfcc:	5080670e 	bge	r10,r2,e16c <__subdf3+0x584>
    dfd0:	0081ffc4 	movi	r2,2047
    dfd4:	4880af26 	beq	r9,r2,e294 <__subdf3+0x6ac>
    dfd8:	898d883a 	add	r6,r17,r6
    dfdc:	1945883a 	add	r2,r3,r5
    dfe0:	3447803a 	cmpltu	r3,r6,r17
    dfe4:	1887883a 	add	r3,r3,r2
    dfe8:	182297fa 	slli	r17,r3,31
    dfec:	300cd07a 	srli	r6,r6,1
    dff0:	1806d07a 	srli	r3,r3,1
    dff4:	4821883a 	mov	r16,r9
    dff8:	89a2b03a 	or	r17,r17,r6
    dffc:	003f1b06 	br	dc6c <__alt_data_end+0xff00dc6c>
    e000:	0101ffc4 	movi	r4,2047
    e004:	813f441e 	bne	r16,r4,dd18 <__alt_data_end+0xff00dd18>
    e008:	003f1806 	br	dc6c <__alt_data_end+0xff00dc6c>
    e00c:	843ff844 	addi	r16,r16,-31
    e010:	01400804 	movi	r5,32
    e014:	1408d83a 	srl	r4,r2,r16
    e018:	19405026 	beq	r3,r5,e15c <__subdf3+0x574>
    e01c:	01401004 	movi	r5,64
    e020:	28c7c83a 	sub	r3,r5,r3
    e024:	10c4983a 	sll	r2,r2,r3
    e028:	88a2b03a 	or	r17,r17,r2
    e02c:	8822c03a 	cmpne	r17,r17,zero
    e030:	2462b03a 	or	r17,r4,r17
    e034:	0007883a 	mov	r3,zero
    e038:	0021883a 	mov	r16,zero
    e03c:	003f6d06 	br	ddf4 <__alt_data_end+0xff00ddf4>
    e040:	11fff804 	addi	r7,r2,-32
    e044:	01000804 	movi	r4,32
    e048:	29ced83a 	srl	r7,r5,r7
    e04c:	11004526 	beq	r2,r4,e164 <__subdf3+0x57c>
    e050:	01001004 	movi	r4,64
    e054:	2089c83a 	sub	r4,r4,r2
    e058:	2904983a 	sll	r2,r5,r4
    e05c:	118cb03a 	or	r6,r2,r6
    e060:	300cc03a 	cmpne	r6,r6,zero
    e064:	398cb03a 	or	r6,r7,r6
    e068:	0005883a 	mov	r2,zero
    e06c:	003f3706 	br	dd4c <__alt_data_end+0xff00dd4c>
    e070:	80002a26 	beq	r16,zero,e11c <__subdf3+0x534>
    e074:	0101ffc4 	movi	r4,2047
    e078:	49006626 	beq	r9,r4,e214 <__subdf3+0x62c>
    e07c:	0085c83a 	sub	r2,zero,r2
    e080:	18c02034 	orhi	r3,r3,128
    e084:	01000e04 	movi	r4,56
    e088:	20807e16 	blt	r4,r2,e284 <__subdf3+0x69c>
    e08c:	010007c4 	movi	r4,31
    e090:	2080e716 	blt	r4,r2,e430 <__subdf3+0x848>
    e094:	01000804 	movi	r4,32
    e098:	2089c83a 	sub	r4,r4,r2
    e09c:	1914983a 	sll	r10,r3,r4
    e0a0:	8890d83a 	srl	r8,r17,r2
    e0a4:	8908983a 	sll	r4,r17,r4
    e0a8:	1884d83a 	srl	r2,r3,r2
    e0ac:	5222b03a 	or	r17,r10,r8
    e0b0:	2006c03a 	cmpne	r3,r4,zero
    e0b4:	88e2b03a 	or	r17,r17,r3
    e0b8:	3463c83a 	sub	r17,r6,r17
    e0bc:	2885c83a 	sub	r2,r5,r2
    e0c0:	344d803a 	cmpltu	r6,r6,r17
    e0c4:	1187c83a 	sub	r3,r2,r6
    e0c8:	4821883a 	mov	r16,r9
    e0cc:	3825883a 	mov	r18,r7
    e0d0:	003f2306 	br	dd60 <__alt_data_end+0xff00dd60>
    e0d4:	24d0b03a 	or	r8,r4,r19
    e0d8:	40001b1e 	bne	r8,zero,e148 <__subdf3+0x560>
    e0dc:	0005883a 	mov	r2,zero
    e0e0:	0009883a 	mov	r4,zero
    e0e4:	0021883a 	mov	r16,zero
    e0e8:	003f4906 	br	de10 <__alt_data_end+0xff00de10>
    e0ec:	010007c4 	movi	r4,31
    e0f0:	20803a16 	blt	r4,r2,e1dc <__subdf3+0x5f4>
    e0f4:	01000804 	movi	r4,32
    e0f8:	2089c83a 	sub	r4,r4,r2
    e0fc:	2912983a 	sll	r9,r5,r4
    e100:	3090d83a 	srl	r8,r6,r2
    e104:	3108983a 	sll	r4,r6,r4
    e108:	2884d83a 	srl	r2,r5,r2
    e10c:	4a12b03a 	or	r9,r9,r8
    e110:	2008c03a 	cmpne	r4,r4,zero
    e114:	4912b03a 	or	r9,r9,r4
    e118:	003f4e06 	br	de54 <__alt_data_end+0xff00de54>
    e11c:	1c48b03a 	or	r4,r3,r17
    e120:	20003c26 	beq	r4,zero,e214 <__subdf3+0x62c>
    e124:	0084303a 	nor	r2,zero,r2
    e128:	1000381e 	bne	r2,zero,e20c <__subdf3+0x624>
    e12c:	3463c83a 	sub	r17,r6,r17
    e130:	28c5c83a 	sub	r2,r5,r3
    e134:	344d803a 	cmpltu	r6,r6,r17
    e138:	1187c83a 	sub	r3,r2,r6
    e13c:	4821883a 	mov	r16,r9
    e140:	3825883a 	mov	r18,r7
    e144:	003f0606 	br	dd60 <__alt_data_end+0xff00dd60>
    e148:	2023883a 	mov	r17,r4
    e14c:	003f0906 	br	dd74 <__alt_data_end+0xff00dd74>
    e150:	0101ffc4 	movi	r4,2047
    e154:	813f3a1e 	bne	r16,r4,de40 <__alt_data_end+0xff00de40>
    e158:	003ec406 	br	dc6c <__alt_data_end+0xff00dc6c>
    e15c:	0005883a 	mov	r2,zero
    e160:	003fb106 	br	e028 <__alt_data_end+0xff00e028>
    e164:	0005883a 	mov	r2,zero
    e168:	003fbc06 	br	e05c <__alt_data_end+0xff00e05c>
    e16c:	1c44b03a 	or	r2,r3,r17
    e170:	80008e1e 	bne	r16,zero,e3ac <__subdf3+0x7c4>
    e174:	1000c826 	beq	r2,zero,e498 <__subdf3+0x8b0>
    e178:	2984b03a 	or	r2,r5,r6
    e17c:	103ebb26 	beq	r2,zero,dc6c <__alt_data_end+0xff00dc6c>
    e180:	8989883a 	add	r4,r17,r6
    e184:	1945883a 	add	r2,r3,r5
    e188:	2447803a 	cmpltu	r3,r4,r17
    e18c:	1887883a 	add	r3,r3,r2
    e190:	1880202c 	andhi	r2,r3,128
    e194:	2023883a 	mov	r17,r4
    e198:	103f1626 	beq	r2,zero,ddf4 <__alt_data_end+0xff00ddf4>
    e19c:	00bfe034 	movhi	r2,65408
    e1a0:	10bfffc4 	addi	r2,r2,-1
    e1a4:	5021883a 	mov	r16,r10
    e1a8:	1886703a 	and	r3,r3,r2
    e1ac:	003eaf06 	br	dc6c <__alt_data_end+0xff00dc6c>
    e1b0:	3825883a 	mov	r18,r7
    e1b4:	003f0f06 	br	ddf4 <__alt_data_end+0xff00ddf4>
    e1b8:	1c44b03a 	or	r2,r3,r17
    e1bc:	8000251e 	bne	r16,zero,e254 <__subdf3+0x66c>
    e1c0:	1000661e 	bne	r2,zero,e35c <__subdf3+0x774>
    e1c4:	2990b03a 	or	r8,r5,r6
    e1c8:	40009626 	beq	r8,zero,e424 <__subdf3+0x83c>
    e1cc:	2807883a 	mov	r3,r5
    e1d0:	3023883a 	mov	r17,r6
    e1d4:	3825883a 	mov	r18,r7
    e1d8:	003ea406 	br	dc6c <__alt_data_end+0xff00dc6c>
    e1dc:	127ff804 	addi	r9,r2,-32
    e1e0:	01000804 	movi	r4,32
    e1e4:	2a52d83a 	srl	r9,r5,r9
    e1e8:	11008c26 	beq	r2,r4,e41c <__subdf3+0x834>
    e1ec:	01001004 	movi	r4,64
    e1f0:	2085c83a 	sub	r2,r4,r2
    e1f4:	2884983a 	sll	r2,r5,r2
    e1f8:	118cb03a 	or	r6,r2,r6
    e1fc:	300cc03a 	cmpne	r6,r6,zero
    e200:	4992b03a 	or	r9,r9,r6
    e204:	0005883a 	mov	r2,zero
    e208:	003f1206 	br	de54 <__alt_data_end+0xff00de54>
    e20c:	0101ffc4 	movi	r4,2047
    e210:	493f9c1e 	bne	r9,r4,e084 <__alt_data_end+0xff00e084>
    e214:	2807883a 	mov	r3,r5
    e218:	3023883a 	mov	r17,r6
    e21c:	4821883a 	mov	r16,r9
    e220:	3825883a 	mov	r18,r7
    e224:	003e9106 	br	dc6c <__alt_data_end+0xff00dc6c>
    e228:	80001f1e 	bne	r16,zero,e2a8 <__subdf3+0x6c0>
    e22c:	1c48b03a 	or	r4,r3,r17
    e230:	20005a26 	beq	r4,zero,e39c <__subdf3+0x7b4>
    e234:	0084303a 	nor	r2,zero,r2
    e238:	1000561e 	bne	r2,zero,e394 <__subdf3+0x7ac>
    e23c:	89a3883a 	add	r17,r17,r6
    e240:	1945883a 	add	r2,r3,r5
    e244:	898d803a 	cmpltu	r6,r17,r6
    e248:	3087883a 	add	r3,r6,r2
    e24c:	4821883a 	mov	r16,r9
    e250:	003f0506 	br	de68 <__alt_data_end+0xff00de68>
    e254:	10002b1e 	bne	r2,zero,e304 <__subdf3+0x71c>
    e258:	2984b03a 	or	r2,r5,r6
    e25c:	10008026 	beq	r2,zero,e460 <__subdf3+0x878>
    e260:	2807883a 	mov	r3,r5
    e264:	3023883a 	mov	r17,r6
    e268:	3825883a 	mov	r18,r7
    e26c:	0401ffc4 	movi	r16,2047
    e270:	003e7e06 	br	dc6c <__alt_data_end+0xff00dc6c>
    e274:	3809883a 	mov	r4,r7
    e278:	0011883a 	mov	r8,zero
    e27c:	0005883a 	mov	r2,zero
    e280:	003ee306 	br	de10 <__alt_data_end+0xff00de10>
    e284:	1c62b03a 	or	r17,r3,r17
    e288:	8822c03a 	cmpne	r17,r17,zero
    e28c:	0005883a 	mov	r2,zero
    e290:	003f8906 	br	e0b8 <__alt_data_end+0xff00e0b8>
    e294:	3809883a 	mov	r4,r7
    e298:	4821883a 	mov	r16,r9
    e29c:	0011883a 	mov	r8,zero
    e2a0:	0005883a 	mov	r2,zero
    e2a4:	003eda06 	br	de10 <__alt_data_end+0xff00de10>
    e2a8:	0101ffc4 	movi	r4,2047
    e2ac:	49003b26 	beq	r9,r4,e39c <__subdf3+0x7b4>
    e2b0:	0085c83a 	sub	r2,zero,r2
    e2b4:	18c02034 	orhi	r3,r3,128
    e2b8:	01000e04 	movi	r4,56
    e2bc:	20806e16 	blt	r4,r2,e478 <__subdf3+0x890>
    e2c0:	010007c4 	movi	r4,31
    e2c4:	20807716 	blt	r4,r2,e4a4 <__subdf3+0x8bc>
    e2c8:	01000804 	movi	r4,32
    e2cc:	2089c83a 	sub	r4,r4,r2
    e2d0:	1914983a 	sll	r10,r3,r4
    e2d4:	8890d83a 	srl	r8,r17,r2
    e2d8:	8908983a 	sll	r4,r17,r4
    e2dc:	1884d83a 	srl	r2,r3,r2
    e2e0:	5222b03a 	or	r17,r10,r8
    e2e4:	2006c03a 	cmpne	r3,r4,zero
    e2e8:	88e2b03a 	or	r17,r17,r3
    e2ec:	89a3883a 	add	r17,r17,r6
    e2f0:	1145883a 	add	r2,r2,r5
    e2f4:	898d803a 	cmpltu	r6,r17,r6
    e2f8:	3087883a 	add	r3,r6,r2
    e2fc:	4821883a 	mov	r16,r9
    e300:	003ed906 	br	de68 <__alt_data_end+0xff00de68>
    e304:	2984b03a 	or	r2,r5,r6
    e308:	10004226 	beq	r2,zero,e414 <__subdf3+0x82c>
    e30c:	1808d0fa 	srli	r4,r3,3
    e310:	8822d0fa 	srli	r17,r17,3
    e314:	1806977a 	slli	r3,r3,29
    e318:	2080022c 	andhi	r2,r4,8
    e31c:	1c62b03a 	or	r17,r3,r17
    e320:	10000826 	beq	r2,zero,e344 <__subdf3+0x75c>
    e324:	2812d0fa 	srli	r9,r5,3
    e328:	4880022c 	andhi	r2,r9,8
    e32c:	1000051e 	bne	r2,zero,e344 <__subdf3+0x75c>
    e330:	300cd0fa 	srli	r6,r6,3
    e334:	2804977a 	slli	r2,r5,29
    e338:	4809883a 	mov	r4,r9
    e33c:	3825883a 	mov	r18,r7
    e340:	11a2b03a 	or	r17,r2,r6
    e344:	8806d77a 	srli	r3,r17,29
    e348:	200890fa 	slli	r4,r4,3
    e34c:	882290fa 	slli	r17,r17,3
    e350:	0401ffc4 	movi	r16,2047
    e354:	1906b03a 	or	r3,r3,r4
    e358:	003e4406 	br	dc6c <__alt_data_end+0xff00dc6c>
    e35c:	2984b03a 	or	r2,r5,r6
    e360:	103e4226 	beq	r2,zero,dc6c <__alt_data_end+0xff00dc6c>
    e364:	8989c83a 	sub	r4,r17,r6
    e368:	8911803a 	cmpltu	r8,r17,r4
    e36c:	1945c83a 	sub	r2,r3,r5
    e370:	1205c83a 	sub	r2,r2,r8
    e374:	1200202c 	andhi	r8,r2,128
    e378:	403e9a26 	beq	r8,zero,dde4 <__alt_data_end+0xff00dde4>
    e37c:	3463c83a 	sub	r17,r6,r17
    e380:	28c5c83a 	sub	r2,r5,r3
    e384:	344d803a 	cmpltu	r6,r6,r17
    e388:	1187c83a 	sub	r3,r2,r6
    e38c:	3825883a 	mov	r18,r7
    e390:	003e3606 	br	dc6c <__alt_data_end+0xff00dc6c>
    e394:	0101ffc4 	movi	r4,2047
    e398:	493fc71e 	bne	r9,r4,e2b8 <__alt_data_end+0xff00e2b8>
    e39c:	2807883a 	mov	r3,r5
    e3a0:	3023883a 	mov	r17,r6
    e3a4:	4821883a 	mov	r16,r9
    e3a8:	003e3006 	br	dc6c <__alt_data_end+0xff00dc6c>
    e3ac:	10003626 	beq	r2,zero,e488 <__subdf3+0x8a0>
    e3b0:	2984b03a 	or	r2,r5,r6
    e3b4:	10001726 	beq	r2,zero,e414 <__subdf3+0x82c>
    e3b8:	1808d0fa 	srli	r4,r3,3
    e3bc:	8822d0fa 	srli	r17,r17,3
    e3c0:	1806977a 	slli	r3,r3,29
    e3c4:	2080022c 	andhi	r2,r4,8
    e3c8:	1c62b03a 	or	r17,r3,r17
    e3cc:	10000726 	beq	r2,zero,e3ec <__subdf3+0x804>
    e3d0:	2812d0fa 	srli	r9,r5,3
    e3d4:	4880022c 	andhi	r2,r9,8
    e3d8:	1000041e 	bne	r2,zero,e3ec <__subdf3+0x804>
    e3dc:	300cd0fa 	srli	r6,r6,3
    e3e0:	2804977a 	slli	r2,r5,29
    e3e4:	4809883a 	mov	r4,r9
    e3e8:	11a2b03a 	or	r17,r2,r6
    e3ec:	8806d77a 	srli	r3,r17,29
    e3f0:	200890fa 	slli	r4,r4,3
    e3f4:	882290fa 	slli	r17,r17,3
    e3f8:	3825883a 	mov	r18,r7
    e3fc:	1906b03a 	or	r3,r3,r4
    e400:	0401ffc4 	movi	r16,2047
    e404:	003e1906 	br	dc6c <__alt_data_end+0xff00dc6c>
    e408:	000b883a 	mov	r5,zero
    e40c:	0005883a 	mov	r2,zero
    e410:	003e2e06 	br	dccc <__alt_data_end+0xff00dccc>
    e414:	0401ffc4 	movi	r16,2047
    e418:	003e1406 	br	dc6c <__alt_data_end+0xff00dc6c>
    e41c:	0005883a 	mov	r2,zero
    e420:	003f7506 	br	e1f8 <__alt_data_end+0xff00e1f8>
    e424:	0005883a 	mov	r2,zero
    e428:	0009883a 	mov	r4,zero
    e42c:	003e7806 	br	de10 <__alt_data_end+0xff00de10>
    e430:	123ff804 	addi	r8,r2,-32
    e434:	01000804 	movi	r4,32
    e438:	1a10d83a 	srl	r8,r3,r8
    e43c:	11002526 	beq	r2,r4,e4d4 <__subdf3+0x8ec>
    e440:	01001004 	movi	r4,64
    e444:	2085c83a 	sub	r2,r4,r2
    e448:	1884983a 	sll	r2,r3,r2
    e44c:	1444b03a 	or	r2,r2,r17
    e450:	1004c03a 	cmpne	r2,r2,zero
    e454:	40a2b03a 	or	r17,r8,r2
    e458:	0005883a 	mov	r2,zero
    e45c:	003f1606 	br	e0b8 <__alt_data_end+0xff00e0b8>
    e460:	02000434 	movhi	r8,16
    e464:	0009883a 	mov	r4,zero
    e468:	423fffc4 	addi	r8,r8,-1
    e46c:	00bfffc4 	movi	r2,-1
    e470:	0401ffc4 	movi	r16,2047
    e474:	003e6606 	br	de10 <__alt_data_end+0xff00de10>
    e478:	1c62b03a 	or	r17,r3,r17
    e47c:	8822c03a 	cmpne	r17,r17,zero
    e480:	0005883a 	mov	r2,zero
    e484:	003f9906 	br	e2ec <__alt_data_end+0xff00e2ec>
    e488:	2807883a 	mov	r3,r5
    e48c:	3023883a 	mov	r17,r6
    e490:	0401ffc4 	movi	r16,2047
    e494:	003df506 	br	dc6c <__alt_data_end+0xff00dc6c>
    e498:	2807883a 	mov	r3,r5
    e49c:	3023883a 	mov	r17,r6
    e4a0:	003df206 	br	dc6c <__alt_data_end+0xff00dc6c>
    e4a4:	123ff804 	addi	r8,r2,-32
    e4a8:	01000804 	movi	r4,32
    e4ac:	1a10d83a 	srl	r8,r3,r8
    e4b0:	11000a26 	beq	r2,r4,e4dc <__subdf3+0x8f4>
    e4b4:	01001004 	movi	r4,64
    e4b8:	2085c83a 	sub	r2,r4,r2
    e4bc:	1884983a 	sll	r2,r3,r2
    e4c0:	1444b03a 	or	r2,r2,r17
    e4c4:	1004c03a 	cmpne	r2,r2,zero
    e4c8:	40a2b03a 	or	r17,r8,r2
    e4cc:	0005883a 	mov	r2,zero
    e4d0:	003f8606 	br	e2ec <__alt_data_end+0xff00e2ec>
    e4d4:	0005883a 	mov	r2,zero
    e4d8:	003fdc06 	br	e44c <__alt_data_end+0xff00e44c>
    e4dc:	0005883a 	mov	r2,zero
    e4e0:	003ff706 	br	e4c0 <__alt_data_end+0xff00e4c0>

0000e4e4 <__fixdfsi>:
    e4e4:	280cd53a 	srli	r6,r5,20
    e4e8:	00c00434 	movhi	r3,16
    e4ec:	18ffffc4 	addi	r3,r3,-1
    e4f0:	3181ffcc 	andi	r6,r6,2047
    e4f4:	01c0ff84 	movi	r7,1022
    e4f8:	28c6703a 	and	r3,r5,r3
    e4fc:	280ad7fa 	srli	r5,r5,31
    e500:	3980120e 	bge	r7,r6,e54c <__fixdfsi+0x68>
    e504:	00810744 	movi	r2,1053
    e508:	11800c16 	blt	r2,r6,e53c <__fixdfsi+0x58>
    e50c:	00810cc4 	movi	r2,1075
    e510:	1185c83a 	sub	r2,r2,r6
    e514:	01c007c4 	movi	r7,31
    e518:	18c00434 	orhi	r3,r3,16
    e51c:	38800d16 	blt	r7,r2,e554 <__fixdfsi+0x70>
    e520:	31befb44 	addi	r6,r6,-1043
    e524:	2084d83a 	srl	r2,r4,r2
    e528:	1986983a 	sll	r3,r3,r6
    e52c:	1884b03a 	or	r2,r3,r2
    e530:	28000726 	beq	r5,zero,e550 <__fixdfsi+0x6c>
    e534:	0085c83a 	sub	r2,zero,r2
    e538:	f800283a 	ret
    e53c:	00a00034 	movhi	r2,32768
    e540:	10bfffc4 	addi	r2,r2,-1
    e544:	2885883a 	add	r2,r5,r2
    e548:	f800283a 	ret
    e54c:	0005883a 	mov	r2,zero
    e550:	f800283a 	ret
    e554:	008104c4 	movi	r2,1043
    e558:	1185c83a 	sub	r2,r2,r6
    e55c:	1884d83a 	srl	r2,r3,r2
    e560:	003ff306 	br	e530 <__alt_data_end+0xff00e530>

0000e564 <__floatsidf>:
    e564:	defffd04 	addi	sp,sp,-12
    e568:	dfc00215 	stw	ra,8(sp)
    e56c:	dc400115 	stw	r17,4(sp)
    e570:	dc000015 	stw	r16,0(sp)
    e574:	20002b26 	beq	r4,zero,e624 <__floatsidf+0xc0>
    e578:	2023883a 	mov	r17,r4
    e57c:	2020d7fa 	srli	r16,r4,31
    e580:	20002d16 	blt	r4,zero,e638 <__floatsidf+0xd4>
    e584:	8809883a 	mov	r4,r17
    e588:	000e6e80 	call	e6e8 <__clzsi2>
    e58c:	01410784 	movi	r5,1054
    e590:	288bc83a 	sub	r5,r5,r2
    e594:	01010cc4 	movi	r4,1075
    e598:	2149c83a 	sub	r4,r4,r5
    e59c:	00c007c4 	movi	r3,31
    e5a0:	1900160e 	bge	r3,r4,e5fc <__floatsidf+0x98>
    e5a4:	00c104c4 	movi	r3,1043
    e5a8:	1947c83a 	sub	r3,r3,r5
    e5ac:	88c6983a 	sll	r3,r17,r3
    e5b0:	00800434 	movhi	r2,16
    e5b4:	10bfffc4 	addi	r2,r2,-1
    e5b8:	1886703a 	and	r3,r3,r2
    e5bc:	2941ffcc 	andi	r5,r5,2047
    e5c0:	800d883a 	mov	r6,r16
    e5c4:	0005883a 	mov	r2,zero
    e5c8:	280a953a 	slli	r5,r5,20
    e5cc:	31803fcc 	andi	r6,r6,255
    e5d0:	01000434 	movhi	r4,16
    e5d4:	300c97fa 	slli	r6,r6,31
    e5d8:	213fffc4 	addi	r4,r4,-1
    e5dc:	1906703a 	and	r3,r3,r4
    e5e0:	1946b03a 	or	r3,r3,r5
    e5e4:	1986b03a 	or	r3,r3,r6
    e5e8:	dfc00217 	ldw	ra,8(sp)
    e5ec:	dc400117 	ldw	r17,4(sp)
    e5f0:	dc000017 	ldw	r16,0(sp)
    e5f4:	dec00304 	addi	sp,sp,12
    e5f8:	f800283a 	ret
    e5fc:	00c002c4 	movi	r3,11
    e600:	1887c83a 	sub	r3,r3,r2
    e604:	88c6d83a 	srl	r3,r17,r3
    e608:	8904983a 	sll	r2,r17,r4
    e60c:	01000434 	movhi	r4,16
    e610:	213fffc4 	addi	r4,r4,-1
    e614:	2941ffcc 	andi	r5,r5,2047
    e618:	1906703a 	and	r3,r3,r4
    e61c:	800d883a 	mov	r6,r16
    e620:	003fe906 	br	e5c8 <__alt_data_end+0xff00e5c8>
    e624:	000d883a 	mov	r6,zero
    e628:	000b883a 	mov	r5,zero
    e62c:	0007883a 	mov	r3,zero
    e630:	0005883a 	mov	r2,zero
    e634:	003fe406 	br	e5c8 <__alt_data_end+0xff00e5c8>
    e638:	0123c83a 	sub	r17,zero,r4
    e63c:	003fd106 	br	e584 <__alt_data_end+0xff00e584>

0000e640 <__floatunsidf>:
    e640:	defffe04 	addi	sp,sp,-8
    e644:	dc000015 	stw	r16,0(sp)
    e648:	dfc00115 	stw	ra,4(sp)
    e64c:	2021883a 	mov	r16,r4
    e650:	20002226 	beq	r4,zero,e6dc <__floatunsidf+0x9c>
    e654:	000e6e80 	call	e6e8 <__clzsi2>
    e658:	01010784 	movi	r4,1054
    e65c:	2089c83a 	sub	r4,r4,r2
    e660:	01810cc4 	movi	r6,1075
    e664:	310dc83a 	sub	r6,r6,r4
    e668:	00c007c4 	movi	r3,31
    e66c:	1980120e 	bge	r3,r6,e6b8 <__floatunsidf+0x78>
    e670:	00c104c4 	movi	r3,1043
    e674:	1907c83a 	sub	r3,r3,r4
    e678:	80ca983a 	sll	r5,r16,r3
    e67c:	00800434 	movhi	r2,16
    e680:	10bfffc4 	addi	r2,r2,-1
    e684:	2101ffcc 	andi	r4,r4,2047
    e688:	0021883a 	mov	r16,zero
    e68c:	288a703a 	and	r5,r5,r2
    e690:	2008953a 	slli	r4,r4,20
    e694:	00c00434 	movhi	r3,16
    e698:	18ffffc4 	addi	r3,r3,-1
    e69c:	28c6703a 	and	r3,r5,r3
    e6a0:	8005883a 	mov	r2,r16
    e6a4:	1906b03a 	or	r3,r3,r4
    e6a8:	dfc00117 	ldw	ra,4(sp)
    e6ac:	dc000017 	ldw	r16,0(sp)
    e6b0:	dec00204 	addi	sp,sp,8
    e6b4:	f800283a 	ret
    e6b8:	00c002c4 	movi	r3,11
    e6bc:	188bc83a 	sub	r5,r3,r2
    e6c0:	814ad83a 	srl	r5,r16,r5
    e6c4:	00c00434 	movhi	r3,16
    e6c8:	18ffffc4 	addi	r3,r3,-1
    e6cc:	81a0983a 	sll	r16,r16,r6
    e6d0:	2101ffcc 	andi	r4,r4,2047
    e6d4:	28ca703a 	and	r5,r5,r3
    e6d8:	003fed06 	br	e690 <__alt_data_end+0xff00e690>
    e6dc:	0009883a 	mov	r4,zero
    e6e0:	000b883a 	mov	r5,zero
    e6e4:	003fea06 	br	e690 <__alt_data_end+0xff00e690>

0000e6e8 <__clzsi2>:
    e6e8:	00bfffd4 	movui	r2,65535
    e6ec:	11000536 	bltu	r2,r4,e704 <__clzsi2+0x1c>
    e6f0:	00803fc4 	movi	r2,255
    e6f4:	11000f36 	bltu	r2,r4,e734 <__clzsi2+0x4c>
    e6f8:	00800804 	movi	r2,32
    e6fc:	0007883a 	mov	r3,zero
    e700:	00000506 	br	e718 <__clzsi2+0x30>
    e704:	00804034 	movhi	r2,256
    e708:	10bfffc4 	addi	r2,r2,-1
    e70c:	11000c2e 	bgeu	r2,r4,e740 <__clzsi2+0x58>
    e710:	00800204 	movi	r2,8
    e714:	00c00604 	movi	r3,24
    e718:	20c8d83a 	srl	r4,r4,r3
    e71c:	00c00074 	movhi	r3,1
    e720:	18c1c904 	addi	r3,r3,1828
    e724:	1909883a 	add	r4,r3,r4
    e728:	20c00003 	ldbu	r3,0(r4)
    e72c:	10c5c83a 	sub	r2,r2,r3
    e730:	f800283a 	ret
    e734:	00800604 	movi	r2,24
    e738:	00c00204 	movi	r3,8
    e73c:	003ff606 	br	e718 <__alt_data_end+0xff00e718>
    e740:	00800404 	movi	r2,16
    e744:	1007883a 	mov	r3,r2
    e748:	003ff306 	br	e718 <__alt_data_end+0xff00e718>

0000e74c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    e74c:	defffd04 	addi	sp,sp,-12
    e750:	dfc00215 	stw	ra,8(sp)
    e754:	dc400115 	stw	r17,4(sp)
    e758:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    e75c:	20001f16 	blt	r4,zero,e7dc <close+0x90>
    e760:	20c00324 	muli	r3,r4,12
    e764:	00800074 	movhi	r2,1
    e768:	10843904 	addi	r2,r2,4324
    e76c:	1885883a 	add	r2,r3,r2
    e770:	2021883a 	mov	r16,r4

  if (fd)
    e774:	10001926 	beq	r2,zero,e7dc <close+0x90>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e778:	10c00017 	ldw	r3,0(r2)
    e77c:	18c00417 	ldw	r3,16(r3)
    e780:	18000c26 	beq	r3,zero,e7b4 <close+0x68>
    e784:	1009883a 	mov	r4,r2
    e788:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e78c:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    e790:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e794:	000eb840 	call	eb84 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e798:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    e79c:	88000816 	blt	r17,zero,e7c0 <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    e7a0:	dfc00217 	ldw	ra,8(sp)
    e7a4:	dc400117 	ldw	r17,4(sp)
    e7a8:	dc000017 	ldw	r16,0(sp)
    e7ac:	dec00304 	addi	sp,sp,12
    e7b0:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    e7b4:	000eb840 	call	eb84 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    e7b8:	0005883a 	mov	r2,zero
    e7bc:	003ff806 	br	e7a0 <__alt_data_end+0xff00e7a0>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    e7c0:	d0a00d17 	ldw	r2,-32716(gp)
    e7c4:	10000c26 	beq	r2,zero,e7f8 <close+0xac>
    e7c8:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
    e7cc:	0463c83a 	sub	r17,zero,r17
    e7d0:	14400015 	stw	r17,0(r2)
      return -1;
    e7d4:	00bfffc4 	movi	r2,-1
    e7d8:	003ff106 	br	e7a0 <__alt_data_end+0xff00e7a0>
    e7dc:	d0a00d17 	ldw	r2,-32716(gp)
    e7e0:	10000726 	beq	r2,zero,e800 <close+0xb4>
    e7e4:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e7e8:	00c01444 	movi	r3,81
    e7ec:	10c00015 	stw	r3,0(r2)
    return -1;
    e7f0:	00bfffc4 	movi	r2,-1
    e7f4:	003fea06 	br	e7a0 <__alt_data_end+0xff00e7a0>
    e7f8:	d0a6dc04 	addi	r2,gp,-25744
    e7fc:	003ff306 	br	e7cc <__alt_data_end+0xff00e7cc>
    e800:	d0a6dc04 	addi	r2,gp,-25744
    e804:	003ff806 	br	e7e8 <__alt_data_end+0xff00e7e8>

0000e808 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    e808:	3005883a 	mov	r2,r6
    e80c:	f800283a 	ret

0000e810 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e810:	20000d16 	blt	r4,zero,e848 <fstat+0x38>
    e814:	21000324 	muli	r4,r4,12
    e818:	00800074 	movhi	r2,1
    e81c:	10843904 	addi	r2,r2,4324
    e820:	2089883a 	add	r4,r4,r2
  
  if (fd)
    e824:	20000826 	beq	r4,zero,e848 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    e828:	20800017 	ldw	r2,0(r4)
    e82c:	10800817 	ldw	r2,32(r2)
    e830:	10000126 	beq	r2,zero,e838 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
    e834:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    e838:	00880004 	movi	r2,8192
    e83c:	28800115 	stw	r2,4(r5)
      return 0;
    e840:	0005883a 	mov	r2,zero
    e844:	f800283a 	ret
    e848:	d0a00d17 	ldw	r2,-32716(gp)
    e84c:	10000926 	beq	r2,zero,e874 <fstat+0x64>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    e850:	deffff04 	addi	sp,sp,-4
    e854:	dfc00015 	stw	ra,0(sp)
    e858:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e85c:	00c01444 	movi	r3,81
    e860:	10c00015 	stw	r3,0(r2)
    return -1;
    e864:	00bfffc4 	movi	r2,-1
  }
}
    e868:	dfc00017 	ldw	ra,0(sp)
    e86c:	dec00104 	addi	sp,sp,4
    e870:	f800283a 	ret
    e874:	d0a6dc04 	addi	r2,gp,-25744
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e878:	00c01444 	movi	r3,81
    e87c:	10c00015 	stw	r3,0(r2)
    return -1;
    e880:	00bfffc4 	movi	r2,-1
  }
}
    e884:	f800283a 	ret

0000e888 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    e888:	defff004 	addi	sp,sp,-64
    e88c:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e890:	20001316 	blt	r4,zero,e8e0 <isatty+0x58>
    e894:	20800324 	muli	r2,r4,12
    e898:	00c00074 	movhi	r3,1
    e89c:	18c43904 	addi	r3,r3,4324
    e8a0:	10c5883a 	add	r2,r2,r3
  
  if (fd)
    e8a4:	10000e26 	beq	r2,zero,e8e0 <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    e8a8:	10800017 	ldw	r2,0(r2)
    e8ac:	10800817 	ldw	r2,32(r2)
    e8b0:	10000726 	beq	r2,zero,e8d0 <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    e8b4:	d80b883a 	mov	r5,sp
    e8b8:	000e8100 	call	e810 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    e8bc:	d8800117 	ldw	r2,4(sp)
    e8c0:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e8c4:	dfc00f17 	ldw	ra,60(sp)
    e8c8:	dec01004 	addi	sp,sp,64
    e8cc:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    e8d0:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    e8d4:	dfc00f17 	ldw	ra,60(sp)
    e8d8:	dec01004 	addi	sp,sp,64
    e8dc:	f800283a 	ret
    e8e0:	d0a00d17 	ldw	r2,-32716(gp)
    e8e4:	10000726 	beq	r2,zero,e904 <isatty+0x7c>
    e8e8:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    e8ec:	00c01444 	movi	r3,81
    e8f0:	10c00015 	stw	r3,0(r2)
    return 0;
    e8f4:	0005883a 	mov	r2,zero
  }
}
    e8f8:	dfc00f17 	ldw	ra,60(sp)
    e8fc:	dec01004 	addi	sp,sp,64
    e900:	f800283a 	ret
    e904:	d0a6dc04 	addi	r2,gp,-25744
    e908:	003ff806 	br	e8ec <__alt_data_end+0xff00e8ec>

0000e90c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    e90c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e910:	01000074 	movhi	r4,1
    e914:	01400074 	movhi	r5,1
    e918:	dfc00015 	stw	ra,0(sp)
    e91c:	21021004 	addi	r4,r4,2112
    e920:	2948cd04 	addi	r5,r5,9012
    e924:	21400a26 	beq	r4,r5,e950 <alt_load+0x44>
  {
    while( to != end )
    e928:	00800074 	movhi	r2,1
    e92c:	1088cd04 	addi	r2,r2,9012
    e930:	20800726 	beq	r4,r2,e950 <alt_load+0x44>
    {
      *to++ = *from++;
    e934:	21800104 	addi	r6,r4,4
    e938:	118dc83a 	sub	r6,r2,r6
    e93c:	300cd0ba 	srli	r6,r6,2
    e940:	31800044 	addi	r6,r6,1
    e944:	318d883a 	add	r6,r6,r6
    e948:	318d883a 	add	r6,r6,r6
    e94c:	000794c0 	call	794c <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e950:	01000034 	movhi	r4,0
    e954:	01400034 	movhi	r5,0
    e958:	21000804 	addi	r4,r4,32
    e95c:	29400804 	addi	r5,r5,32
    e960:	21400a26 	beq	r4,r5,e98c <alt_load+0x80>
  {
    while( to != end )
    e964:	00800034 	movhi	r2,0
    e968:	10806304 	addi	r2,r2,396
    e96c:	20800726 	beq	r4,r2,e98c <alt_load+0x80>
    {
      *to++ = *from++;
    e970:	21800104 	addi	r6,r4,4
    e974:	118dc83a 	sub	r6,r2,r6
    e978:	300cd0ba 	srli	r6,r6,2
    e97c:	31800044 	addi	r6,r6,1
    e980:	318d883a 	add	r6,r6,r6
    e984:	318d883a 	add	r6,r6,r6
    e988:	000794c0 	call	794c <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    e98c:	01000074 	movhi	r4,1
    e990:	01400074 	movhi	r5,1
    e994:	21002204 	addi	r4,r4,136
    e998:	29402204 	addi	r5,r5,136
    e99c:	21400a26 	beq	r4,r5,e9c8 <alt_load+0xbc>
  {
    while( to != end )
    e9a0:	00800074 	movhi	r2,1
    e9a4:	10821004 	addi	r2,r2,2112
    e9a8:	20800726 	beq	r4,r2,e9c8 <alt_load+0xbc>
    {
      *to++ = *from++;
    e9ac:	21800104 	addi	r6,r4,4
    e9b0:	118dc83a 	sub	r6,r2,r6
    e9b4:	300cd0ba 	srli	r6,r6,2
    e9b8:	31800044 	addi	r6,r6,1
    e9bc:	318d883a 	add	r6,r6,r6
    e9c0:	318d883a 	add	r6,r6,r6
    e9c4:	000794c0 	call	794c <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    e9c8:	000f4f80 	call	f4f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    e9cc:	dfc00017 	ldw	ra,0(sp)
    e9d0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    e9d4:	000f6301 	jmpi	f630 <alt_icache_flush_all>

0000e9d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    e9d8:	defffe04 	addi	sp,sp,-8
    e9dc:	dfc00115 	stw	ra,4(sp)
    e9e0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e9e4:	20000e16 	blt	r4,zero,ea20 <lseek+0x48>
    e9e8:	21000324 	muli	r4,r4,12
    e9ec:	00800074 	movhi	r2,1
    e9f0:	10843904 	addi	r2,r2,4324
    e9f4:	2089883a 	add	r4,r4,r2
  
  if (fd) 
    e9f8:	20000926 	beq	r4,zero,ea20 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    e9fc:	20800017 	ldw	r2,0(r4)
    ea00:	10800717 	ldw	r2,28(r2)
    ea04:	10000d26 	beq	r2,zero,ea3c <lseek+0x64>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    ea08:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    ea0c:	10000f16 	blt	r2,zero,ea4c <lseek+0x74>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    ea10:	dfc00117 	ldw	ra,4(sp)
    ea14:	dc000017 	ldw	r16,0(sp)
    ea18:	dec00204 	addi	sp,sp,8
    ea1c:	f800283a 	ret
    ea20:	04001444 	movi	r16,81
    ea24:	d0a00d17 	ldw	r2,-32716(gp)
    ea28:	10000626 	beq	r2,zero,ea44 <lseek+0x6c>
    ea2c:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    ea30:	14000015 	stw	r16,0(r2)
    rc = -1;
    ea34:	00bfffc4 	movi	r2,-1
  }

  return rc;
    ea38:	003ff506 	br	ea10 <__alt_data_end+0xff00ea10>
    ea3c:	04002184 	movi	r16,134
    ea40:	003ff806 	br	ea24 <__alt_data_end+0xff00ea24>
    ea44:	d0a6dc04 	addi	r2,gp,-25744
    ea48:	003ff906 	br	ea30 <__alt_data_end+0xff00ea30>
    ea4c:	00a1c83a 	sub	r16,zero,r2
    ea50:	003ff406 	br	ea24 <__alt_data_end+0xff00ea24>

0000ea54 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea54:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea58:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    ea5c:	dfc00115 	stw	ra,4(sp)
    ea60:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    ea64:	000ecbc0 	call	ecbc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    ea68:	000ecdc0 	call	ecdc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    ea6c:	01800074 	movhi	r6,1
    ea70:	31820c04 	addi	r6,r6,2096
    ea74:	300b883a 	mov	r5,r6
    ea78:	3009883a 	mov	r4,r6
    ea7c:	000f7300 	call	f730 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    ea80:	000f5680 	call	f568 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    ea84:	01000074 	movhi	r4,1
    ea88:	213d7304 	addi	r4,r4,-2612
    ea8c:	000fd140 	call	fd14 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    ea90:	d1a6e017 	ldw	r6,-25728(gp)
    ea94:	d166e117 	ldw	r5,-25724(gp)
    ea98:	d126e217 	ldw	r4,-25720(gp)
    ea9c:	0000e4c0 	call	e4c <main>
  close(STDOUT_FILENO);
    eaa0:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    eaa4:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
    eaa8:	000e74c0 	call	e74c <close>
  exit (result);
    eaac:	8009883a 	mov	r4,r16
    eab0:	000fd280 	call	fd28 <exit>

0000eab4 <__malloc_lock>:
    eab4:	f800283a 	ret

0000eab8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    eab8:	f800283a 	ret

0000eabc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    eabc:	defffe04 	addi	sp,sp,-8
    eac0:	dfc00115 	stw	ra,4(sp)
    eac4:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    eac8:	20002116 	blt	r4,zero,eb50 <read+0x94>
    eacc:	21000324 	muli	r4,r4,12
    ead0:	00800074 	movhi	r2,1
    ead4:	10843904 	addi	r2,r2,4324
    ead8:	2089883a 	add	r4,r4,r2
  
  if (fd)
    eadc:	20001c26 	beq	r4,zero,eb50 <read+0x94>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eae0:	20800217 	ldw	r2,8(r4)
    eae4:	00c00044 	movi	r3,1
    eae8:	108000cc 	andi	r2,r2,3
    eaec:	10c00a26 	beq	r2,r3,eb18 <read+0x5c>
        (fd->dev->read))
    eaf0:	20800017 	ldw	r2,0(r4)
    eaf4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    eaf8:	10000726 	beq	r2,zero,eb18 <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    eafc:	103ee83a 	callr	r2
    eb00:	1021883a 	mov	r16,r2
    eb04:	10000b16 	blt	r2,zero,eb34 <read+0x78>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    eb08:	dfc00117 	ldw	ra,4(sp)
    eb0c:	dc000017 	ldw	r16,0(sp)
    eb10:	dec00204 	addi	sp,sp,8
    eb14:	f800283a 	ret
    eb18:	d0a00d17 	ldw	r2,-32716(gp)
    eb1c:	10001326 	beq	r2,zero,eb6c <read+0xb0>
    eb20:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    eb24:	00c00344 	movi	r3,13
    eb28:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    eb2c:	00bfffc4 	movi	r2,-1
    eb30:	003ff506 	br	eb08 <__alt_data_end+0xff00eb08>
    eb34:	d0a00d17 	ldw	r2,-32716(gp)
    eb38:	10000e26 	beq	r2,zero,eb74 <read+0xb8>
    eb3c:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
    eb40:	0421c83a 	sub	r16,zero,r16
    eb44:	14000015 	stw	r16,0(r2)
          return -1;
    eb48:	00bfffc4 	movi	r2,-1
    eb4c:	003fee06 	br	eb08 <__alt_data_end+0xff00eb08>
    eb50:	d0a00d17 	ldw	r2,-32716(gp)
    eb54:	10000926 	beq	r2,zero,eb7c <read+0xc0>
    eb58:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    eb5c:	00c01444 	movi	r3,81
    eb60:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eb64:	00bfffc4 	movi	r2,-1
    eb68:	003fe706 	br	eb08 <__alt_data_end+0xff00eb08>
    eb6c:	d0a6dc04 	addi	r2,gp,-25744
    eb70:	003fec06 	br	eb24 <__alt_data_end+0xff00eb24>
    eb74:	d0a6dc04 	addi	r2,gp,-25744
    eb78:	003ff106 	br	eb40 <__alt_data_end+0xff00eb40>
    eb7c:	d0a6dc04 	addi	r2,gp,-25744
    eb80:	003ff606 	br	eb5c <__alt_data_end+0xff00eb5c>

0000eb84 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    eb84:	00800084 	movi	r2,2
    eb88:	1100060e 	bge	r2,r4,eba4 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    eb8c:	21000324 	muli	r4,r4,12
    eb90:	00800074 	movhi	r2,1
    eb94:	10843904 	addi	r2,r2,4324
    eb98:	1109883a 	add	r4,r2,r4
    eb9c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
    eba0:	20000015 	stw	zero,0(r4)
    eba4:	f800283a 	ret

0000eba8 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eba8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebac:	00bfff84 	movi	r2,-2
    ebb0:	2884703a 	and	r2,r5,r2
    ebb4:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ebb8:	d0a00e17 	ldw	r2,-32712(gp)
    ebbc:	00ffff04 	movi	r3,-4
    ebc0:	108000c4 	addi	r2,r2,3
    ebc4:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ebc8:	00c04034 	movhi	r3,256
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ebcc:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ebd0:	1109883a 	add	r4,r2,r4
    ebd4:	18c00004 	addi	r3,r3,0
    ebd8:	19000336 	bltu	r3,r4,ebe8 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    ebdc:	d1200e15 	stw	r4,-32712(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebe0:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    ebe4:	f800283a 	ret
    ebe8:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ebec:	00bfffc4 	movi	r2,-1
    ebf0:	f800283a 	ret

0000ebf4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    ebf4:	000f4801 	jmpi	f480 <alt_busy_sleep>

0000ebf8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    ebf8:	defffe04 	addi	sp,sp,-8
    ebfc:	dfc00115 	stw	ra,4(sp)
    ec00:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ec04:	20002216 	blt	r4,zero,ec90 <write+0x98>
    ec08:	21000324 	muli	r4,r4,12
    ec0c:	00800074 	movhi	r2,1
    ec10:	10843904 	addi	r2,r2,4324
    ec14:	2089883a 	add	r4,r4,r2
  
  if (fd)
    ec18:	20001d26 	beq	r4,zero,ec90 <write+0x98>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    ec1c:	20800217 	ldw	r2,8(r4)
    ec20:	108000cc 	andi	r2,r2,3
    ec24:	10000a26 	beq	r2,zero,ec50 <write+0x58>
    ec28:	20800017 	ldw	r2,0(r4)
    ec2c:	10800617 	ldw	r2,24(r2)
    ec30:	10000726 	beq	r2,zero,ec50 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    ec34:	103ee83a 	callr	r2
    ec38:	1021883a 	mov	r16,r2
    ec3c:	10000d16 	blt	r2,zero,ec74 <write+0x7c>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
    ec40:	dfc00117 	ldw	ra,4(sp)
    ec44:	dc000017 	ldw	r16,0(sp)
    ec48:	dec00204 	addi	sp,sp,8
    ec4c:	f800283a 	ret
    ec50:	d0a00d17 	ldw	r2,-32716(gp)
    ec54:	10000526 	beq	r2,zero,ec6c <write+0x74>
    ec58:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    ec5c:	00c00344 	movi	r3,13
    ec60:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    ec64:	00bfffc4 	movi	r2,-1
    ec68:	003ff506 	br	ec40 <__alt_data_end+0xff00ec40>
    ec6c:	d0a6dc04 	addi	r2,gp,-25744
    ec70:	003ffa06 	br	ec5c <__alt_data_end+0xff00ec5c>
    ec74:	d0a00d17 	ldw	r2,-32716(gp)
    ec78:	10000c26 	beq	r2,zero,ecac <write+0xb4>
    ec7c:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
    ec80:	0421c83a 	sub	r16,zero,r16
    ec84:	14000015 	stw	r16,0(r2)
        return -1;
    ec88:	00bfffc4 	movi	r2,-1
    ec8c:	003fec06 	br	ec40 <__alt_data_end+0xff00ec40>
    ec90:	d0a00d17 	ldw	r2,-32716(gp)
    ec94:	10000726 	beq	r2,zero,ecb4 <write+0xbc>
    ec98:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ec9c:	00c01444 	movi	r3,81
    eca0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    eca4:	00bfffc4 	movi	r2,-1
    eca8:	003fe506 	br	ec40 <__alt_data_end+0xff00ec40>
    ecac:	d0a6dc04 	addi	r2,gp,-25744
    ecb0:	003ff306 	br	ec80 <__alt_data_end+0xff00ec80>
    ecb4:	d0a6dc04 	addi	r2,gp,-25744
    ecb8:	003ff806 	br	ec9c <__alt_data_end+0xff00ec9c>

0000ecbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    ecbc:	deffff04 	addi	sp,sp,-4
    ecc0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    ecc4:	000fad40 	call	fad4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    ecc8:	00800044 	movi	r2,1
    eccc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    ecd0:	dfc00017 	ldw	ra,0(sp)
    ecd4:	dec00104 	addi	sp,sp,4
    ecd8:	f800283a 	ret

0000ecdc <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ecdc:	00804034 	movhi	r2,256
    ece0:	10840004 	addi	r2,r2,4096
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ece4:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ece8:	d0a6e415 	stw	r2,-25712(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ecec:	01004034 	movhi	r4,256
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ecf0:	0080bef4 	movhi	r2,763
    ecf4:	10bc2004 	addi	r2,r2,-3968
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ecf8:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ecfc:	01c0fa04 	movi	r7,1000
    ed00:	21040804 	addi	r4,r4,4128
    ed04:	01800104 	movi	r6,4
    ed08:	000b883a 	mov	r5,zero
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ed0c:	04000074 	movhi	r16,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ed10:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ed14:	8404ad04 	addi	r16,r16,4788
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( PROFILETIMER, ProfileTimer);
    ed18:	d0a6e315 	stw	r2,-25716(gp)
    ALTERA_AVALON_TIMER_INIT ( SYSTIMER, Systimer);
    ed1c:	000f3400 	call	f340 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ed20:	8009883a 	mov	r4,r16
    ed24:	000b883a 	mov	r5,zero
    ed28:	000d883a 	mov	r6,zero
    ed2c:	000eed80 	call	eed8 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    ed30:	d1600904 	addi	r5,gp,-32732
    ed34:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    ed38:	dfc00117 	ldw	ra,4(sp)
    ed3c:	dc000017 	ldw	r16,0(sp)
    ed40:	dec00204 	addi	sp,sp,8
    ed44:	000f4fc1 	jmpi	f4fc <alt_dev_llist_insert>

0000ed48 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    ed48:	20800017 	ldw	r2,0(r4)
    ed4c:	21c00217 	ldw	r7,8(r4)
    ed50:	11000a04 	addi	r4,r2,40
    ed54:	000f0101 	jmpi	f010 <altera_avalon_jtag_uart_read>

0000ed58 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    ed58:	20800017 	ldw	r2,0(r4)
    ed5c:	21c00217 	ldw	r7,8(r4)
    ed60:	11000a04 	addi	r4,r2,40
    ed64:	000f1641 	jmpi	f164 <altera_avalon_jtag_uart_write>

0000ed68 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    ed68:	20800017 	ldw	r2,0(r4)
    ed6c:	21400217 	ldw	r5,8(r4)
    ed70:	11000a04 	addi	r4,r2,40
    ed74:	000ef501 	jmpi	ef50 <altera_avalon_jtag_uart_close>

0000ed78 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ed78:	21000017 	ldw	r4,0(r4)
    ed7c:	21000a04 	addi	r4,r4,40
    ed80:	000ef9c1 	jmpi	ef9c <altera_avalon_jtag_uart_ioctl>

0000ed84 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    ed84:	20800017 	ldw	r2,0(r4)
    ed88:	10800104 	addi	r2,r2,4
    ed8c:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ed90:	18c1000c 	andi	r3,r3,1024
    ed94:	1800081e 	bne	r3,zero,edb8 <altera_avalon_jtag_uart_timeout+0x34>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ed98:	20800917 	ldw	r2,36(r4)
    ed9c:	00e00034 	movhi	r3,32768
    eda0:	18ffff04 	addi	r3,r3,-4
    eda4:	18800236 	bltu	r3,r2,edb0 <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
    eda8:	10800044 	addi	r2,r2,1
    edac:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    edb0:	d0a6e717 	ldw	r2,-25700(gp)
    edb4:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    edb8:	20c00817 	ldw	r3,32(r4)
    edbc:	18c10014 	ori	r3,r3,1024
    edc0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    edc4:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    edc8:	d0a6e717 	ldw	r2,-25700(gp)
    edcc:	f800283a 	ret

0000edd0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
    edd0:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    edd4:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    edd8:	02bfff44 	movi	r10,-3
    eddc:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ede0:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    ede4:	3880c00c 	andi	r2,r7,768
    ede8:	10003426 	beq	r2,zero,eebc <altera_avalon_jtag_uart_irq+0xec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    edec:	3880400c 	andi	r2,r7,256
    edf0:	10001726 	beq	r2,zero,ee50 <altera_avalon_jtag_uart_irq+0x80>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    edf4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    edf8:	20c00b17 	ldw	r3,44(r4)
    edfc:	10800044 	addi	r2,r2,1
    ee00:	1081ffcc 	andi	r2,r2,2047
    ee04:	18800d1e 	bne	r3,r2,ee3c <altera_avalon_jtag_uart_irq+0x6c>
    ee08:	00002d06 	br	eec0 <altera_avalon_jtag_uart_irq+0xf0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ee0c:	20800a17 	ldw	r2,40(r4)
    ee10:	2085883a 	add	r2,r4,r2
    ee14:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee18:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
    ee1c:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee20:	10800044 	addi	r2,r2,1
    ee24:	1081ffcc 	andi	r2,r2,2047
    ee28:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee2c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
    ee30:	10800044 	addi	r2,r2,1
    ee34:	1081ffcc 	andi	r2,r2,2047
    ee38:	11400326 	beq	r2,r5,ee48 <altera_avalon_jtag_uart_irq+0x78>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ee3c:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ee40:	18a0000c 	andi	r2,r3,32768
    ee44:	103ff11e 	bne	r2,zero,ee0c <__alt_data_end+0xff00ee0c>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ee48:	18ffffec 	andhi	r3,r3,65535
    ee4c:	18001c1e 	bne	r3,zero,eec0 <altera_avalon_jtag_uart_irq+0xf0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    ee50:	3880800c 	andi	r2,r7,512
    ee54:	103fe226 	beq	r2,zero,ede0 <__alt_data_end+0xff00ede0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ee58:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    ee5c:	38000b1e 	bne	r7,zero,ee8c <altera_avalon_jtag_uart_irq+0xbc>
    ee60:	003fdf06 	br	ede0 <__alt_data_end+0xff00ede0>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ee64:	20800d17 	ldw	r2,52(r4)
    ee68:	2085883a 	add	r2,r4,r2
    ee6c:	10820e07 	ldb	r2,2104(r2)
    ee70:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee74:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ee78:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ee7c:	10800044 	addi	r2,r2,1
    ee80:	1081ffcc 	andi	r2,r2,2047
    ee84:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ee88:	383fd526 	beq	r7,zero,ede0 <__alt_data_end+0xff00ede0>
    ee8c:	20c00d17 	ldw	r3,52(r4)
    ee90:	20800c17 	ldw	r2,48(r4)
    ee94:	18bff31e 	bne	r3,r2,ee64 <__alt_data_end+0xff00ee64>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ee98:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ee9c:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    eea0:	1284703a 	and	r2,r2,r10
    eea4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    eea8:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eeac:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eeb0:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    eeb4:	3880c00c 	andi	r2,r7,768
    eeb8:	103fcc1e 	bne	r2,zero,edec <__alt_data_end+0xff00edec>
    eebc:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eec0:	20800817 	ldw	r2,32(r4)
    eec4:	1244703a 	and	r2,r2,r9
    eec8:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    eecc:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    eed0:	40800037 	ldwio	r2,0(r8)
    eed4:	003fde06 	br	ee50 <__alt_data_end+0xff00ee50>

0000eed8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eed8:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    eedc:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eee0:	dc000115 	stw	r16,4(sp)
    eee4:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eee8:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eeec:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    eef0:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    eef4:	2809883a 	mov	r4,r5
    eef8:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    eefc:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ef00:	01800074 	movhi	r6,1
    ef04:	31bb7404 	addi	r6,r6,-4656
    ef08:	800f883a 	mov	r7,r16
    ef0c:	d8000015 	stw	zero,0(sp)
    ef10:	000f63c0 	call	f63c <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ef14:	d166e717 	ldw	r5,-25700(gp)
    ef18:	01800074 	movhi	r6,1
    ef1c:	31bb6104 	addi	r6,r6,-4732
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ef20:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ef24:	800f883a 	mov	r7,r16
    ef28:	81000204 	addi	r4,r16,8
    ef2c:	000f4000 	call	f400 <alt_alarm_start>
    ef30:	1000030e 	bge	r2,zero,ef40 <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ef34:	00a00034 	movhi	r2,32768
    ef38:	10bfffc4 	addi	r2,r2,-1
    ef3c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ef40:	dfc00217 	ldw	ra,8(sp)
    ef44:	dc000117 	ldw	r16,4(sp)
    ef48:	dec00304 	addi	sp,sp,12
    ef4c:	f800283a 	ret

0000ef50 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
    ef50:	2890000c 	andi	r2,r5,16384
    ef54:	21c00c17 	ldw	r7,48(r4)
    ef58:	10000426 	beq	r2,zero,ef6c <altera_avalon_jtag_uart_close+0x1c>
    ef5c:	00000606 	br	ef78 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ef60:	21800917 	ldw	r6,36(r4)
    ef64:	20c00117 	ldw	r3,4(r4)
    ef68:	30c00a2e 	bgeu	r6,r3,ef94 <altera_avalon_jtag_uart_close+0x44>
    ef6c:	20c00d17 	ldw	r3,52(r4)
    ef70:	38fffb1e 	bne	r7,r3,ef60 <__alt_data_end+0xff00ef60>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
    ef74:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ef78:	20800d17 	ldw	r2,52(r4)
    ef7c:	11c00526 	beq	r2,r7,ef94 <altera_avalon_jtag_uart_close+0x44>
    ef80:	20c00917 	ldw	r3,36(r4)
    ef84:	20800117 	ldw	r2,4(r4)
    ef88:	1880022e 	bgeu	r3,r2,ef94 <altera_avalon_jtag_uart_close+0x44>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    ef8c:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
    ef90:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ef94:	0005883a 	mov	r2,zero
    ef98:	f800283a 	ret

0000ef9c <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    ef9c:	009a8044 	movi	r2,27137
    efa0:	28800d26 	beq	r5,r2,efd8 <altera_avalon_jtag_uart_ioctl+0x3c>
    efa4:	009a8084 	movi	r2,27138
    efa8:	2880091e 	bne	r5,r2,efd0 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    efac:	21400117 	ldw	r5,4(r4)
    efb0:	00a00034 	movhi	r2,32768
    efb4:	10bfffc4 	addi	r2,r2,-1
    efb8:	28800526 	beq	r5,r2,efd0 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    efbc:	20c00917 	ldw	r3,36(r4)
      rc = 0;
    efc0:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    efc4:	1947803a 	cmpltu	r3,r3,r5
    efc8:	30c00015 	stw	r3,0(r6)
    efcc:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    efd0:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    efd4:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    efd8:	20c00117 	ldw	r3,4(r4)
    efdc:	00a00034 	movhi	r2,32768
    efe0:	10bfffc4 	addi	r2,r2,-1
    efe4:	18bffa26 	beq	r3,r2,efd0 <__alt_data_end+0xff00efd0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    efe8:	30800017 	ldw	r2,0(r6)
    efec:	01600034 	movhi	r5,32768
    eff0:	297fff04 	addi	r5,r5,-4
    eff4:	10ffff84 	addi	r3,r2,-2
    eff8:	28c0022e 	bgeu	r5,r3,f004 <altera_avalon_jtag_uart_ioctl+0x68>
    effc:	00a00034 	movhi	r2,32768
    f000:	10bfff84 	addi	r2,r2,-2
    f004:	20800115 	stw	r2,4(r4)
      rc = 0;
    f008:	0005883a 	mov	r2,zero
    f00c:	f800283a 	ret

0000f010 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f010:	01804e0e 	bge	zero,r6,f14c <altera_avalon_jtag_uart_read+0x13c>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f014:	defff504 	addi	sp,sp,-44
    f018:	dc000115 	stw	r16,4(sp)
    f01c:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f020:	39d0000c 	andi	r7,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f024:	dd800715 	stw	r22,28(sp)
    f028:	dd400615 	stw	r21,24(sp)
    f02c:	dd000515 	stw	r20,20(sp)
    f030:	dcc00415 	stw	r19,16(sp)
    f034:	dc800315 	stw	r18,12(sp)
    f038:	dfc00a15 	stw	ra,40(sp)
    f03c:	df000915 	stw	fp,36(sp)
    f040:	ddc00815 	stw	r23,32(sp)
    f044:	dc400215 	stw	r17,8(sp)
    f048:	3027883a 	mov	r19,r6
    f04c:	2025883a 	mov	r18,r4
    f050:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f054:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f058:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f05c:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    f060:	b02f883a 	mov	r23,r22
    f064:	00000a06 	br	f090 <altera_avalon_jtag_uart_read+0x80>
    f068:	9880012e 	bgeu	r19,r2,f070 <altera_avalon_jtag_uart_read+0x60>
    f06c:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f070:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f074:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f078:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f07c:	000794c0 	call	794c <memcpy>
      ptr   += n;
      space -= n;
    f080:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f084:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
    f088:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
    f08c:	04c0080e 	bge	zero,r19,f0b0 <altera_avalon_jtag_uart_read+0xa0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    f090:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    f094:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
    f098:	e4000136 	bltu	fp,r16,f0a0 <altera_avalon_jtag_uart_read+0x90>
        n = in - out;
    f09c:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    f0a0:	a40b883a 	add	r5,r20,r16
    f0a4:	b809883a 	mov	r4,r23
    f0a8:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
    f0ac:	103fee1e 	bne	r2,zero,f068 <__alt_data_end+0xff00f068>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    f0b0:	bd800d1e 	bne	r23,r22,f0e8 <altera_avalon_jtag_uart_read+0xd8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    f0b4:	d8800017 	ldw	r2,0(sp)
    f0b8:	10000426 	beq	r2,zero,f0cc <altera_avalon_jtag_uart_read+0xbc>
    f0bc:	00002106 	br	f144 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    f0c0:	90c00917 	ldw	r3,36(r18)
    f0c4:	90800117 	ldw	r2,4(r18)
    f0c8:	1880022e 	bgeu	r3,r2,f0d4 <altera_avalon_jtag_uart_read+0xc4>
    f0cc:	90800a17 	ldw	r2,40(r18)
    f0d0:	e0bffb26 	beq	fp,r2,f0c0 <__alt_data_end+0xff00f0c0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    f0d4:	90800a17 	ldw	r2,40(r18)
    f0d8:	e0800126 	beq	fp,r2,f0e0 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    f0dc:	04ffe016 	blt	zero,r19,f060 <__alt_data_end+0xff00f060>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    f0e0:	00bffec4 	movi	r2,-5
    f0e4:	00000b06 	br	f114 <altera_avalon_jtag_uart_read+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0e8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0ec:	00bfff84 	movi	r2,-2
    f0f0:	2084703a 	and	r2,r4,r2
    f0f4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f0f8:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f0fc:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    f100:	10800054 	ori	r2,r2,1
    f104:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f108:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f10c:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    f110:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
    f114:	dfc00a17 	ldw	ra,40(sp)
    f118:	df000917 	ldw	fp,36(sp)
    f11c:	ddc00817 	ldw	r23,32(sp)
    f120:	dd800717 	ldw	r22,28(sp)
    f124:	dd400617 	ldw	r21,24(sp)
    f128:	dd000517 	ldw	r20,20(sp)
    f12c:	dcc00417 	ldw	r19,16(sp)
    f130:	dc800317 	ldw	r18,12(sp)
    f134:	dc400217 	ldw	r17,8(sp)
    f138:	dc000117 	ldw	r16,4(sp)
    f13c:	dec00b04 	addi	sp,sp,44
    f140:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f144:	00bffd44 	movi	r2,-11
    f148:	003ff206 	br	f114 <__alt_data_end+0xff00f114>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    f14c:	39d0000c 	andi	r7,r7,16384
    f150:	3800021e 	bne	r7,zero,f15c <altera_avalon_jtag_uart_read+0x14c>
    return -EWOULDBLOCK;
  else
    return -EIO;
    f154:	00bffec4 	movi	r2,-5
}
    f158:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f15c:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    f160:	f800283a 	ret

0000f164 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    f164:	defff604 	addi	sp,sp,-40
    f168:	dc000015 	stw	r16,0(sp)
    f16c:	dfc00915 	stw	ra,36(sp)
    f170:	df000815 	stw	fp,32(sp)
    f174:	ddc00715 	stw	r23,28(sp)
    f178:	dd800615 	stw	r22,24(sp)
    f17c:	dd400515 	stw	r21,20(sp)
    f180:	dd000415 	stw	r20,16(sp)
    f184:	dcc00315 	stw	r19,12(sp)
    f188:	dc800215 	stw	r18,8(sp)
    f18c:	dc400115 	stw	r17,4(sp)
    f190:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f194:	01804d0e 	bge	zero,r6,f2cc <altera_avalon_jtag_uart_write+0x168>
    f198:	302d883a 	mov	r22,r6
    f19c:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f1a0:	3c50000c 	andi	r17,r7,16384
    f1a4:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1a8:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f1ac:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    f1b0:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
    f1b4:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
    f1b8:	e0c03a2e 	bgeu	fp,r3,f2a4 <altera_avalon_jtag_uart_write+0x140>
        n = out - 1 - in;
    f1bc:	1dffffc4 	addi	r23,r3,-1
    f1c0:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
    f1c4:	b800131e 	bne	r23,zero,f214 <altera_avalon_jtag_uart_write+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1c8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1cc:	24c4703a 	and	r2,r4,r19
    f1d0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1d4:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1d8:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f1dc:	10800094 	ori	r2,r2,2
    f1e0:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f1e4:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1e8:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    f1ec:	8800341e 	bne	r17,zero,f2c0 <altera_avalon_jtag_uart_write+0x15c>
    f1f0:	81000917 	ldw	r4,36(r16)
    f1f4:	00000206 	br	f200 <altera_avalon_jtag_uart_write+0x9c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    f1f8:	80800117 	ldw	r2,4(r16)
    f1fc:	2080022e 	bgeu	r4,r2,f208 <altera_avalon_jtag_uart_write+0xa4>
    f200:	80800d17 	ldw	r2,52(r16)
    f204:	18bffc26 	beq	r3,r2,f1f8 <__alt_data_end+0xff00f1f8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    f208:	203fe926 	beq	r4,zero,f1b0 <__alt_data_end+0xff00f1b0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f20c:	ad00181e 	bne	r21,r20,f270 <altera_avalon_jtag_uart_write+0x10c>
    f210:	00003a06 	br	f2fc <altera_avalon_jtag_uart_write+0x198>
    f214:	b5c0012e 	bgeu	r22,r23,f21c <altera_avalon_jtag_uart_write+0xb8>
    f218:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f21c:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f220:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f224:	a80b883a 	mov	r5,r21
    f228:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f22c:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    f230:	000794c0 	call	794c <memcpy>
      ptr   += n;
      count -= n;
    f234:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    f238:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
    f23c:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    f240:	05bfdb16 	blt	zero,r22,f1b0 <__alt_data_end+0xff00f1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f244:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f248:	00bfff84 	movi	r2,-2
    f24c:	1884703a 	and	r2,r3,r2
    f250:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f254:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f258:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f25c:	10800094 	ori	r2,r2,2
    f260:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f264:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f268:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f26c:	a5402226 	beq	r20,r21,f2f8 <altera_avalon_jtag_uart_write+0x194>
    return ptr - start;
    f270:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    f274:	dfc00917 	ldw	ra,36(sp)
    f278:	df000817 	ldw	fp,32(sp)
    f27c:	ddc00717 	ldw	r23,28(sp)
    f280:	dd800617 	ldw	r22,24(sp)
    f284:	dd400517 	ldw	r21,20(sp)
    f288:	dd000417 	ldw	r20,16(sp)
    f28c:	dcc00317 	ldw	r19,12(sp)
    f290:	dc800217 	ldw	r18,8(sp)
    f294:	dc400117 	ldw	r17,4(sp)
    f298:	dc000017 	ldw	r16,0(sp)
    f29c:	dec00a04 	addi	sp,sp,40
    f2a0:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
    f2a4:	18000326 	beq	r3,zero,f2b4 <altera_avalon_jtag_uart_write+0x150>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    f2a8:	00820004 	movi	r2,2048
    f2ac:	172fc83a 	sub	r23,r2,fp
    f2b0:	003fc406 	br	f1c4 <__alt_data_end+0xff00f1c4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    f2b4:	0081ffc4 	movi	r2,2047
    f2b8:	172fc83a 	sub	r23,r2,fp
    f2bc:	003fc106 	br	f1c4 <__alt_data_end+0xff00f1c4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    f2c0:	ad3feb1e 	bne	r21,r20,f270 <__alt_data_end+0xff00f270>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    f2c4:	00bffd44 	movi	r2,-11
    f2c8:	003fea06 	br	f274 <__alt_data_end+0xff00f274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f2cc:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f2d0:	00bfff84 	movi	r2,-2
    f2d4:	1884703a 	and	r2,r3,r2
    f2d8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2dc:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f2e0:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    f2e4:	10800094 	ori	r2,r2,2
    f2e8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    f2ec:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2f0:	1801703a 	wrctl	status,r3
    f2f4:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    f2f8:	883ff21e 	bne	r17,zero,f2c4 <__alt_data_end+0xff00f2c4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    f2fc:	00bffec4 	movi	r2,-5
    f300:	003fdc06 	br	f274 <__alt_data_end+0xff00f274>

0000f304 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    f304:	defffe04 	addi	sp,sp,-8
    f308:	dfc00115 	stw	ra,4(sp)
    f30c:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    f310:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    f314:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f318:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f31c:	00bfff84 	movi	r2,-2
    f320:	8084703a 	and	r2,r16,r2
    f324:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    f328:	000f9e00 	call	f9e0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f32c:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    f330:	dfc00117 	ldw	ra,4(sp)
    f334:	dc000017 	ldw	r16,0(sp)
    f338:	dec00204 	addi	sp,sp,8
    f33c:	f800283a 	ret

0000f340 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    f340:	d0e6e717 	ldw	r3,-25700(gp)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    f344:	defffe04 	addi	sp,sp,-8
    f348:	dfc00115 	stw	ra,4(sp)
    f34c:	2005883a 	mov	r2,r4
    f350:	2809883a 	mov	r4,r5
    f354:	300b883a 	mov	r5,r6
    f358:	1800011e 	bne	r3,zero,f360 <alt_avalon_timer_sc_init+0x20>
  {
    _alt_tick_rate = nticks;
    f35c:	d1e6e715 	stw	r7,-25700(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    f360:	00c001c4 	movi	r3,7
    f364:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    f368:	01800074 	movhi	r6,1
    f36c:	31bcc104 	addi	r6,r6,-3324
    f370:	d8000015 	stw	zero,0(sp)
    f374:	100f883a 	mov	r7,r2
    f378:	000f63c0 	call	f63c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    f37c:	dfc00117 	ldw	ra,4(sp)
    f380:	dec00204 	addi	sp,sp,8
    f384:	f800283a 	ret

0000f388 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f388:	d0e6e317 	ldw	r3,-25716(gp)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
    f38c:	d0a6e417 	ldw	r2,-25712(gp)

  if (!altera_avalon_timer_ts_freq)
    f390:	18000a26 	beq	r3,zero,f3bc <alt_timestamp_start+0x34>
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    f394:	10c00104 	addi	r3,r2,4
    f398:	01000204 	movi	r4,8
    f39c:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
    f3a0:	013fffd4 	movui	r4,65535
    f3a4:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
    f3a8:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    f3ac:	00800104 	movi	r2,4
    f3b0:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
    f3b4:	0005883a 	mov	r2,zero
    f3b8:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
    f3bc:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
    f3c0:	f800283a 	ret

0000f3c4 <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
    f3c4:	d0a6e317 	ldw	r2,-25716(gp)
    f3c8:	1000021e 	bne	r2,zero,f3d4 <alt_timestamp+0x10>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
#else
        return 0xFFFFFFFF;
    f3cc:	00bfffc4 	movi	r2,-1
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
    f3d0:	f800283a 	ret
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
    f3d4:	d0e6e417 	ldw	r3,-25712(gp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
#else
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
    f3d8:	18800404 	addi	r2,r3,16
    f3dc:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
    f3e0:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
    f3e4:	18c00537 	ldwio	r3,20(r3)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    f3e8:	1806943a 	slli	r3,r3,16
    f3ec:	10bfffcc 	andi	r2,r2,65535
    f3f0:	1884303a 	nor	r2,r3,r2
    f3f4:	f800283a 	ret

0000f3f8 <alt_timestamp_freq>:
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
}
    f3f8:	d0a6e317 	ldw	r2,-25716(gp)
    f3fc:	f800283a 	ret

0000f400 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    f400:	d0a6e717 	ldw	r2,-25700(gp)
    f404:	10001a26 	beq	r2,zero,f470 <alt_alarm_start+0x70>
  {
    if (alarm)
    f408:	20001b26 	beq	r4,zero,f478 <alt_alarm_start+0x78>
    {
      alarm->callback = callback;
    f40c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    f410:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f414:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f418:	00bfff84 	movi	r2,-2
    f41c:	1884703a 	and	r2,r3,r2
    f420:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    f424:	d0a6e617 	ldw	r2,-25704(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    f428:	11800044 	addi	r6,r2,1
    f42c:	314b883a 	add	r5,r6,r5
    f430:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    f434:	28800b36 	bltu	r5,r2,f464 <alt_alarm_start+0x64>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
    f438:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f43c:	d0a01004 	addi	r2,gp,-32704
    f440:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    f444:	d0a01017 	ldw	r2,-32704(gp)
    f448:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    f44c:	d0a01017 	ldw	r2,-32704(gp)
  list->next           = entry;
    f450:	d1201015 	stw	r4,-32704(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
    f454:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f458:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    f45c:	0005883a 	mov	r2,zero
    f460:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
    f464:	00800044 	movi	r2,1
    f468:	20800405 	stb	r2,16(r4)
    f46c:	003ff306 	br	f43c <__alt_data_end+0xff00f43c>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    f470:	00bfde84 	movi	r2,-134
    f474:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    f478:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    f47c:	f800283a 	ret

0000f480 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f480:	01420034 	movhi	r5,2048
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f484:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f488:	297fffc4 	addi	r5,r5,-1
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    f48c:	dc000015 	stw	r16,0(sp)
    f490:	dfc00115 	stw	ra,4(sp)
    f494:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    f498:	000c0280 	call	c028 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    f49c:	10001226 	beq	r2,zero,f4e8 <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f4a0:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f4a4:	013e0034 	movhi	r4,63488
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f4a8:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f4ac:	21000044 	addi	r4,r4,1
    f4b0:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    f4b4:	297fffc4 	addi	r5,r5,-1
    f4b8:	283ffe1e 	bne	r5,zero,f4b4 <__alt_data_end+0xff00f4b4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f4bc:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    f4c0:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    f4c4:	18bffb16 	blt	r3,r2,f4b4 <__alt_data_end+0xff00f4b4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f4c8:	8020913a 	slli	r16,r16,4
    f4cc:	843fffc4 	addi	r16,r16,-1
    f4d0:	803ffe1e 	bne	r16,zero,f4cc <__alt_data_end+0xff00f4cc>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    f4d4:	0005883a 	mov	r2,zero
    f4d8:	dfc00117 	ldw	ra,4(sp)
    f4dc:	dc000017 	ldw	r16,0(sp)
    f4e0:	dec00204 	addi	sp,sp,8
    f4e4:	f800283a 	ret
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    f4e8:	8020913a 	slli	r16,r16,4
    f4ec:	843fffc4 	addi	r16,r16,-1
    f4f0:	043ffe16 	blt	zero,r16,f4ec <__alt_data_end+0xff00f4ec>
    f4f4:	003ff706 	br	f4d4 <__alt_data_end+0xff00f4d4>

0000f4f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    f4f8:	f800283a 	ret

0000f4fc <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    f4fc:	20000a26 	beq	r4,zero,f528 <alt_dev_llist_insert+0x2c>
    f500:	20800217 	ldw	r2,8(r4)
    f504:	10000826 	beq	r2,zero,f528 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
    f508:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    f50c:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    f510:	0005883a 	mov	r2,zero
  entry->next     = list->next;
    f514:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
    f518:	28c00017 	ldw	r3,0(r5)
    f51c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
    f520:	29000015 	stw	r4,0(r5)
    f524:	f800283a 	ret
    f528:	d0a00d17 	ldw	r2,-32716(gp)
    f52c:	10000926 	beq	r2,zero,f554 <alt_dev_llist_insert+0x58>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    f530:	deffff04 	addi	sp,sp,-4
    f534:	dfc00015 	stw	ra,0(sp)
    f538:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f53c:	00c00584 	movi	r3,22
    f540:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f544:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f548:	dfc00017 	ldw	ra,0(sp)
    f54c:	dec00104 	addi	sp,sp,4
    f550:	f800283a 	ret
    f554:	d0a6dc04 	addi	r2,gp,-25744
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    f558:	00c00584 	movi	r3,22
    f55c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    f560:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    f564:	f800283a 	ret

0000f568 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f568:	defffc04 	addi	sp,sp,-16
    f56c:	dc800215 	stw	r18,8(sp)
    f570:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f574:	04800074 	movhi	r18,1
    f578:	04000074 	movhi	r16,1
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f57c:	dfc00315 	stw	ra,12(sp)
    f580:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f584:	84002104 	addi	r16,r16,132
    f588:	94802204 	addi	r18,r18,136
    f58c:	84800936 	bltu	r16,r18,f5b4 <_do_ctors+0x4c>
    f590:	84a5c83a 	sub	r18,r16,r18
    f594:	9024d0ba 	srli	r18,r18,2
    f598:	0023883a 	mov	r17,zero
    f59c:	94800044 	addi	r18,r18,1
        (*ctor) (); 
    f5a0:	80800017 	ldw	r2,0(r16)
    f5a4:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f5a8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
    f5ac:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f5b0:	8cbffb1e 	bne	r17,r18,f5a0 <__alt_data_end+0xff00f5a0>
        (*ctor) (); 
}
    f5b4:	dfc00317 	ldw	ra,12(sp)
    f5b8:	dc800217 	ldw	r18,8(sp)
    f5bc:	dc400117 	ldw	r17,4(sp)
    f5c0:	dc000017 	ldw	r16,0(sp)
    f5c4:	dec00404 	addi	sp,sp,16
    f5c8:	f800283a 	ret

0000f5cc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f5cc:	defffc04 	addi	sp,sp,-16
    f5d0:	dc800215 	stw	r18,8(sp)
    f5d4:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f5d8:	04800074 	movhi	r18,1
    f5dc:	04000074 	movhi	r16,1
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f5e0:	dfc00315 	stw	ra,12(sp)
    f5e4:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f5e8:	84002104 	addi	r16,r16,132
    f5ec:	94802204 	addi	r18,r18,136
    f5f0:	84800936 	bltu	r16,r18,f618 <_do_dtors+0x4c>
    f5f4:	84a5c83a 	sub	r18,r16,r18
    f5f8:	9024d0ba 	srli	r18,r18,2
    f5fc:	0023883a 	mov	r17,zero
    f600:	94800044 	addi	r18,r18,1
        (*dtor) (); 
    f604:	80800017 	ldw	r2,0(r16)
    f608:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f60c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
    f610:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f614:	8cbffb1e 	bne	r17,r18,f604 <__alt_data_end+0xff00f604>
        (*dtor) (); 
}
    f618:	dfc00317 	ldw	ra,12(sp)
    f61c:	dc800217 	ldw	r18,8(sp)
    f620:	dc400117 	ldw	r17,4(sp)
    f624:	dc000017 	ldw	r16,0(sp)
    f628:	dec00404 	addi	sp,sp,16
    f62c:	f800283a 	ret

0000f630 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f630:	01440004 	movi	r5,4096
    f634:	0009883a 	mov	r4,zero
    f638:	000fc501 	jmpi	fc50 <alt_icache_flush>

0000f63c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    f63c:	000f6c81 	jmpi	f6c8 <alt_iic_isr_register>

0000f640 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f640:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f644:	00bfff84 	movi	r2,-2
    f648:	2084703a 	and	r2,r4,r2
    f64c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    f650:	00c00044 	movi	r3,1
    f654:	d0a6e517 	ldw	r2,-25708(gp)
    f658:	194a983a 	sll	r5,r3,r5
    f65c:	288ab03a 	or	r5,r5,r2
    f660:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f664:	d0a6e517 	ldw	r2,-25708(gp)
    f668:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f66c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    f670:	0005883a 	mov	r2,zero
    f674:	f800283a 	ret

0000f678 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f678:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f67c:	00bfff84 	movi	r2,-2
    f680:	2084703a 	and	r2,r4,r2
    f684:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    f688:	00ffff84 	movi	r3,-2
    f68c:	d0a6e517 	ldw	r2,-25708(gp)
    f690:	194a183a 	rol	r5,r3,r5
    f694:	288a703a 	and	r5,r5,r2
    f698:	d166e515 	stw	r5,-25708(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    f69c:	d0a6e517 	ldw	r2,-25708(gp)
    f6a0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f6a4:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    f6a8:	0005883a 	mov	r2,zero
    f6ac:	f800283a 	ret

0000f6b0 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    f6b0:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    f6b4:	00800044 	movi	r2,1
    f6b8:	1144983a 	sll	r2,r2,r5
    f6bc:	10c4703a 	and	r2,r2,r3
}
    f6c0:	1004c03a 	cmpne	r2,r2,zero
    f6c4:	f800283a 	ret

0000f6c8 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    f6c8:	00c007c4 	movi	r3,31
    f6cc:	19401616 	blt	r3,r5,f728 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    f6d0:	defffe04 	addi	sp,sp,-8
    f6d4:	dfc00115 	stw	ra,4(sp)
    f6d8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f6dc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f6e0:	00ffff84 	movi	r3,-2
    f6e4:	80c6703a 	and	r3,r16,r3
    f6e8:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    f6ec:	280490fa 	slli	r2,r5,3
    f6f0:	00c00074 	movhi	r3,1
    f6f4:	18cfae04 	addi	r3,r3,16056
    f6f8:	1885883a 	add	r2,r3,r2
    f6fc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    f700:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f704:	30000626 	beq	r6,zero,f720 <alt_iic_isr_register+0x58>
    f708:	000f6400 	call	f640 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f70c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    f710:	dfc00117 	ldw	ra,4(sp)
    f714:	dc000017 	ldw	r16,0(sp)
    f718:	dec00204 	addi	sp,sp,8
    f71c:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    f720:	000f6780 	call	f678 <alt_ic_irq_disable>
    f724:	003ff906 	br	f70c <__alt_data_end+0xff00f70c>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    f728:	00bffa84 	movi	r2,-22
    f72c:	f800283a 	ret

0000f730 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f730:	defffd04 	addi	sp,sp,-12
    f734:	dc400115 	stw	r17,4(sp)
    f738:	dc000015 	stw	r16,0(sp)
    f73c:	2823883a 	mov	r17,r5
    f740:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f744:	01400044 	movi	r5,1
    f748:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f74c:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f750:	000f8340 	call	f834 <open>

  if (old >= 0)
    f754:	10000c16 	blt	r2,zero,f788 <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
    f758:	10c00324 	muli	r3,r2,12
    f75c:	01400074 	movhi	r5,1
    f760:	29443904 	addi	r5,r5,4324
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f764:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f768:	28c5883a 	add	r2,r5,r3
    f76c:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f770:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f774:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
    f778:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f77c:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f780:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f784:	000eb840 	call	eb84 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f788:	01807fc4 	movi	r6,511
    f78c:	000b883a 	mov	r5,zero
    f790:	8809883a 	mov	r4,r17
    f794:	000f8340 	call	f834 <open>

  if (old >= 0)
    f798:	10000c16 	blt	r2,zero,f7cc <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
    f79c:	10c00324 	muli	r3,r2,12
    f7a0:	01400074 	movhi	r5,1
    f7a4:	29443904 	addi	r5,r5,4324
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f7a8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7ac:	28c5883a 	add	r2,r5,r3
    f7b0:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f7b4:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7b8:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    f7bc:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f7c0:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f7c4:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f7c8:	000eb840 	call	eb84 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
    f7cc:	01807fc4 	movi	r6,511
    f7d0:	01400044 	movi	r5,1
    f7d4:	8009883a 	mov	r4,r16
    f7d8:	000f8340 	call	f834 <open>

  if (old >= 0)
    f7dc:	10001016 	blt	r2,zero,f820 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
    f7e0:	10c00324 	muli	r3,r2,12
    f7e4:	01400074 	movhi	r5,1
    f7e8:	29443904 	addi	r5,r5,4324
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f7ec:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7f0:	28c5883a 	add	r2,r5,r3
    f7f4:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f7f8:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    f7fc:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
    f800:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f804:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    f808:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f80c:	dfc00217 	ldw	ra,8(sp)
    f810:	dc400117 	ldw	r17,4(sp)
    f814:	dc000017 	ldw	r16,0(sp)
    f818:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
    f81c:	000eb841 	jmpi	eb84 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
    f820:	dfc00217 	ldw	ra,8(sp)
    f824:	dc400117 	ldw	r17,4(sp)
    f828:	dc000017 	ldw	r16,0(sp)
    f82c:	dec00304 	addi	sp,sp,12
    f830:	f800283a 	ret

0000f834 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f834:	defffa04 	addi	sp,sp,-24
    f838:	dc000015 	stw	r16,0(sp)
    f83c:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f840:	d1600904 	addi	r5,gp,-32732
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f844:	dc800215 	stw	r18,8(sp)
    f848:	dc400115 	stw	r17,4(sp)
    f84c:	dfc00515 	stw	ra,20(sp)
    f850:	dd000415 	stw	r20,16(sp)
    f854:	dcc00315 	stw	r19,12(sp)
    f858:	2023883a 	mov	r17,r4
    f85c:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f860:	000fadc0 	call	fadc <alt_find_dev>
    f864:	10004626 	beq	r2,zero,f980 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f868:	1009883a 	mov	r4,r2
    f86c:	1029883a 	mov	r20,r2
    f870:	000fc000 	call	fc00 <alt_get_fd>
    f874:	1027883a 	mov	r19,r2
    f878:	1000090e 	bge	r2,zero,f8a0 <open+0x6c>
    f87c:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    f880:	9809883a 	mov	r4,r19
    f884:	000eb840 	call	eb84 <alt_release_fd>
    f888:	d0a00d17 	ldw	r2,-32716(gp)
    f88c:	10004326 	beq	r2,zero,f99c <open+0x168>
    f890:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
    f894:	14000015 	stw	r16,0(r2)
    return -1;
    f898:	00bfffc4 	movi	r2,-1
    f89c:	00002e06 	br	f958 <open+0x124>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8a0:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8a4:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8a8:	00800074 	movhi	r2,1

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8ac:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8b0:	10843904 	addi	r2,r2,4324

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8b4:	80c6703a 	and	r3,r16,r3
    f8b8:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f8bc:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f8c0:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f8c4:	d2200817 	ldw	r8,-32736(gp)
    f8c8:	21c00017 	ldw	r7,0(r4)
    f8cc:	11400204 	addi	r5,r2,8
    f8d0:	0007883a 	mov	r3,zero
    f8d4:	00000306 	br	f8e4 <open+0xb0>
    f8d8:	10800304 	addi	r2,r2,12
    f8dc:	29400304 	addi	r5,r5,12
    f8e0:	40c01436 	bltu	r8,r3,f934 <open+0x100>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f8e4:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f8e8:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f8ec:	31fffa1e 	bne	r6,r7,f8d8 <__alt_data_end+0xff00f8d8>
    f8f0:	29800017 	ldw	r6,0(r5)
    f8f4:	303ff80e 	bge	r6,zero,f8d8 <__alt_data_end+0xff00f8d8>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f8f8:	20bff726 	beq	r4,r2,f8d8 <__alt_data_end+0xff00f8d8>
    f8fc:	04000344 	movi	r16,13
    f900:	003fdf06 	br	f880 <__alt_data_end+0xff00f880>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    f904:	1009883a 	mov	r4,r2
    f908:	000fc000 	call	fc00 <alt_get_fd>
    f90c:	1027883a 	mov	r19,r2
    f910:	103fda16 	blt	r2,zero,f87c <__alt_data_end+0xff00f87c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    f914:	99000324 	muli	r4,r19,12
    f918:	00800074 	movhi	r2,1
    f91c:	10843904 	addi	r2,r2,4324
    f920:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f924:	00900034 	movhi	r2,16384
    f928:	10bfffc4 	addi	r2,r2,-1
    f92c:	8084703a 	and	r2,r16,r2
    f930:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f934:	a0800317 	ldw	r2,12(r20)
    f938:	10000f26 	beq	r2,zero,f978 <open+0x144>
    f93c:	900f883a 	mov	r7,r18
    f940:	800d883a 	mov	r6,r16
    f944:	880b883a 	mov	r5,r17
    f948:	103ee83a 	callr	r2
    f94c:	1007883a 	mov	r3,r2
    f950:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f954:	18001316 	blt	r3,zero,f9a4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
}
    f958:	dfc00517 	ldw	ra,20(sp)
    f95c:	dd000417 	ldw	r20,16(sp)
    f960:	dcc00317 	ldw	r19,12(sp)
    f964:	dc800217 	ldw	r18,8(sp)
    f968:	dc400117 	ldw	r17,4(sp)
    f96c:	dc000017 	ldw	r16,0(sp)
    f970:	dec00604 	addi	sp,sp,24
    f974:	f800283a 	ret
    f978:	9805883a 	mov	r2,r19
    f97c:	003ff606 	br	f958 <__alt_data_end+0xff00f958>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f980:	8809883a 	mov	r4,r17
    f984:	000fb540 	call	fb54 <alt_find_file>
    f988:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f98c:	103fdd1e 	bne	r2,zero,f904 <__alt_data_end+0xff00f904>
    f990:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f994:	04ffffc4 	movi	r19,-1
    f998:	003fb906 	br	f880 <__alt_data_end+0xff00f880>
    f99c:	d0a6dc04 	addi	r2,gp,-25744
    f9a0:	003fbc06 	br	f894 <__alt_data_end+0xff00f894>
    f9a4:	00e1c83a 	sub	r16,zero,r3
    f9a8:	003fb506 	br	f880 <__alt_data_end+0xff00f880>

0000f9ac <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f9ac:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f9b0:	00bfff84 	movi	r2,-2
    f9b4:	1884703a 	and	r2,r3,r2
    f9b8:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f9bc:	21400117 	ldw	r5,4(r4)
    f9c0:	20800017 	ldw	r2,0(r4)
    f9c4:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    f9c8:	21400117 	ldw	r5,4(r4)
    f9cc:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f9d0:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    f9d4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f9d8:	1801703a 	wrctl	status,r3
    f9dc:	f800283a 	ret

0000f9e0 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f9e0:	d0a6e617 	ldw	r2,-25704(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f9e4:	defffa04 	addi	sp,sp,-24
    f9e8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f9ec:	d4201017 	ldw	r16,-32704(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f9f0:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f9f4:	dc800215 	stw	r18,8(sp)
    f9f8:	dfc00515 	stw	ra,20(sp)
    f9fc:	dd000415 	stw	r20,16(sp)
    fa00:	dcc00315 	stw	r19,12(sp)
    fa04:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    fa08:	d4a01004 	addi	r18,gp,-32704

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    fa0c:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa10:	84801126 	beq	r16,r18,fa58 <alt_tick+0x78>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    fa14:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fa18:	053fff84 	movi	r20,-2
    fa1c:	00000606 	br	fa38 <alt_tick+0x58>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
    fa20:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fa24:	d0e6e617 	ldw	r3,-25704(gp)
    fa28:	80800217 	ldw	r2,8(r16)
    fa2c:	1880122e 	bgeu	r3,r2,fa78 <alt_tick+0x98>
    fa30:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa34:	8c800826 	beq	r17,r18,fa58 <alt_tick+0x78>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fa38:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
    fa3c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    fa40:	103ff826 	beq	r2,zero,fa24 <__alt_data_end+0xff00fa24>
    fa44:	d0a6e617 	ldw	r2,-25704(gp)
    fa48:	103ff526 	beq	r2,zero,fa20 <__alt_data_end+0xff00fa20>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    fa4c:	d0a6e617 	ldw	r2,-25704(gp)
    fa50:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    fa54:	8cbff81e 	bne	r17,r18,fa38 <__alt_data_end+0xff00fa38>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    fa58:	dfc00517 	ldw	ra,20(sp)
    fa5c:	dd000417 	ldw	r20,16(sp)
    fa60:	dcc00317 	ldw	r19,12(sp)
    fa64:	dc800217 	ldw	r18,8(sp)
    fa68:	dc400117 	ldw	r17,4(sp)
    fa6c:	dc000017 	ldw	r16,0(sp)
    fa70:	dec00604 	addi	sp,sp,24
    fa74:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    fa78:	80800317 	ldw	r2,12(r16)
    fa7c:	81000517 	ldw	r4,20(r16)
    fa80:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    fa84:	10000726 	beq	r2,zero,faa4 <alt_tick+0xc4>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    fa88:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fa8c:	d126e617 	ldw	r4,-25704(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
    fa90:	10c5883a 	add	r2,r2,r3
    fa94:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    fa98:	113fe52e 	bgeu	r2,r4,fa30 <__alt_data_end+0xff00fa30>
        {
          alarm->rollover = 1;
    fa9c:	84c00405 	stb	r19,16(r16)
    faa0:	003fe306 	br	fa30 <__alt_data_end+0xff00fa30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    faa4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    faa8:	1506703a 	and	r3,r2,r20
    faac:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    fab0:	81000117 	ldw	r4,4(r16)
    fab4:	80c00017 	ldw	r3,0(r16)
    fab8:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
    fabc:	81000117 	ldw	r4,4(r16)
    fac0:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    fac4:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
    fac8:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    facc:	1001703a 	wrctl	status,r2
    fad0:	003fd706 	br	fa30 <__alt_data_end+0xff00fa30>

0000fad4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    fad4:	000170fa 	wrctl	ienable,zero
    fad8:	f800283a 	ret

0000fadc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fadc:	defffb04 	addi	sp,sp,-20
    fae0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
    fae4:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    fae8:	dc400115 	stw	r17,4(sp)
    faec:	2823883a 	mov	r17,r5
    faf0:	dcc00315 	stw	r19,12(sp)
    faf4:	dfc00415 	stw	ra,16(sp)
    faf8:	dc800215 	stw	r18,8(sp)
    fafc:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
    fb00:	00027cc0 	call	27cc <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fb04:	8c000b26 	beq	r17,r16,fb34 <alt_find_dev+0x58>
    fb08:	14800044 	addi	r18,r2,1
    fb0c:	00000206 	br	fb18 <alt_find_dev+0x3c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fb10:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    fb14:	8c000726 	beq	r17,r16,fb34 <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    fb18:	81000217 	ldw	r4,8(r16)
    fb1c:	900d883a 	mov	r6,r18
    fb20:	980b883a 	mov	r5,r19
    fb24:	000fd600 	call	fd60 <memcmp>
    fb28:	103ff91e 	bne	r2,zero,fb10 <__alt_data_end+0xff00fb10>
    fb2c:	8005883a 	mov	r2,r16
    fb30:	00000106 	br	fb38 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    fb34:	0005883a 	mov	r2,zero
}
    fb38:	dfc00417 	ldw	ra,16(sp)
    fb3c:	dcc00317 	ldw	r19,12(sp)
    fb40:	dc800217 	ldw	r18,8(sp)
    fb44:	dc400117 	ldw	r17,4(sp)
    fb48:	dc000017 	ldw	r16,0(sp)
    fb4c:	dec00504 	addi	sp,sp,20
    fb50:	f800283a 	ret

0000fb54 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fb54:	defffa04 	addi	sp,sp,-24
    fb58:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fb5c:	d4200b17 	ldw	r16,-32724(gp)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    fb60:	dd000415 	stw	r20,16(sp)
    fb64:	dfc00515 	stw	ra,20(sp)
    fb68:	dcc00315 	stw	r19,12(sp)
    fb6c:	dc800215 	stw	r18,8(sp)
    fb70:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    fb74:	d5200b04 	addi	r20,gp,-32724
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fb78:	85001626 	beq	r16,r20,fbd4 <alt_find_file+0x80>
    fb7c:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fb80:	04c00bc4 	movi	r19,47
    fb84:	00000806 	br	fba8 <alt_find_file+0x54>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fb88:	9185883a 	add	r2,r18,r6
    fb8c:	10800007 	ldb	r2,0(r2)
    fb90:	14c00126 	beq	r2,r19,fb98 <alt_find_file+0x44>
    fb94:	1000021e 	bne	r2,zero,fba0 <alt_find_file+0x4c>
        !memcmp (next->name, name, len))
    fb98:	000fd600 	call	fd60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    fb9c:	10001626 	beq	r2,zero,fbf8 <alt_find_file+0xa4>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    fba0:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    fba4:	85000b26 	beq	r16,r20,fbd4 <alt_find_file+0x80>
  {
    len = strlen(next->name);
    fba8:	84400217 	ldw	r17,8(r16)
    fbac:	8809883a 	mov	r4,r17
    fbb0:	00027cc0 	call	27cc <strlen>
    fbb4:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
    fbb8:	8885883a 	add	r2,r17,r2
    fbbc:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    fbc0:	900b883a 	mov	r5,r18
    fbc4:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    fbc8:	14ffef1e 	bne	r2,r19,fb88 <__alt_data_end+0xff00fb88>
    {
      len -= 1;
    fbcc:	31bfffc4 	addi	r6,r6,-1
    fbd0:	003fed06 	br	fb88 <__alt_data_end+0xff00fb88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    fbd4:	0005883a 	mov	r2,zero
}
    fbd8:	dfc00517 	ldw	ra,20(sp)
    fbdc:	dd000417 	ldw	r20,16(sp)
    fbe0:	dcc00317 	ldw	r19,12(sp)
    fbe4:	dc800217 	ldw	r18,8(sp)
    fbe8:	dc400117 	ldw	r17,4(sp)
    fbec:	dc000017 	ldw	r16,0(sp)
    fbf0:	dec00604 	addi	sp,sp,24
    fbf4:	f800283a 	ret
    fbf8:	8005883a 	mov	r2,r16
    fbfc:	003ff606 	br	fbd8 <__alt_data_end+0xff00fbd8>

0000fc00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    fc00:	01c00074 	movhi	r7,1
    fc04:	39c43904 	addi	r7,r7,4324
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    fc08:	0005883a 	mov	r2,zero
    fc0c:	3807883a 	mov	r3,r7
    fc10:	01800804 	movi	r6,32
    fc14:	00000206 	br	fc20 <alt_get_fd+0x20>
    fc18:	10800044 	addi	r2,r2,1
    fc1c:	11800a26 	beq	r2,r6,fc48 <alt_get_fd+0x48>
  {
    if (!alt_fd_list[i].dev)
    fc20:	19400017 	ldw	r5,0(r3)
    fc24:	18c00304 	addi	r3,r3,12
    fc28:	283ffb1e 	bne	r5,zero,fc18 <__alt_data_end+0xff00fc18>
    {
      alt_fd_list[i].dev = dev;
    fc2c:	10c00324 	muli	r3,r2,12
    fc30:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
    fc34:	d0e00817 	ldw	r3,-32736(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    fc38:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
    fc3c:	1880030e 	bge	r3,r2,fc4c <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
    fc40:	d0a00815 	stw	r2,-32736(gp)
    fc44:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    fc48:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    fc4c:	f800283a 	ret

0000fc50 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    fc50:	00840004 	movi	r2,4096
    fc54:	1140012e 	bgeu	r2,r5,fc5c <alt_icache_flush+0xc>
    fc58:	100b883a 	mov	r5,r2
    fc5c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fc60:	2005883a 	mov	r2,r4
    fc64:	2140092e 	bgeu	r4,r5,fc8c <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    fc68:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    fc6c:	10800804 	addi	r2,r2,32
    fc70:	117ffd36 	bltu	r2,r5,fc68 <__alt_data_end+0xff00fc68>
    fc74:	0104303a 	nor	r2,zero,r4
    fc78:	2885883a 	add	r2,r5,r2
    fc7c:	1004d17a 	srli	r2,r2,5
    fc80:	10800044 	addi	r2,r2,1
    fc84:	1004917a 	slli	r2,r2,5
    fc88:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    fc8c:	210007cc 	andi	r4,r4,31
    fc90:	20000126 	beq	r4,zero,fc98 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    fc94:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    fc98:	0000203a 	flushp
    fc9c:	f800283a 	ret

0000fca0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    fca0:	213ffe84 	addi	r4,r4,-6
    fca4:	008003c4 	movi	r2,15
    fca8:	11001636 	bltu	r2,r4,fd04 <alt_exception_cause_generated_bad_addr+0x64>
    fcac:	200890ba 	slli	r4,r4,2
    fcb0:	00800074 	movhi	r2,1
    fcb4:	10bf3104 	addi	r2,r2,-828
    fcb8:	2089883a 	add	r4,r4,r2
    fcbc:	20800017 	ldw	r2,0(r4)
    fcc0:	1000683a 	jmp	r2
    fcc4:	0000fd0c 	andi	zero,zero,1012
    fcc8:	0000fd0c 	andi	zero,zero,1012
    fccc:	0000fd04 	movi	zero,1012
    fcd0:	0000fd04 	movi	zero,1012
    fcd4:	0000fd04 	movi	zero,1012
    fcd8:	0000fd0c 	andi	zero,zero,1012
    fcdc:	0000fd04 	movi	zero,1012
    fce0:	0000fd04 	movi	zero,1012
    fce4:	0000fd0c 	andi	zero,zero,1012
    fce8:	0000fd0c 	andi	zero,zero,1012
    fcec:	0000fd04 	movi	zero,1012
    fcf0:	0000fd0c 	andi	zero,zero,1012
    fcf4:	0000fd04 	movi	zero,1012
    fcf8:	0000fd04 	movi	zero,1012
    fcfc:	0000fd04 	movi	zero,1012
    fd00:	0000fd0c 	andi	zero,zero,1012
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    fd04:	0005883a 	mov	r2,zero
    fd08:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    fd0c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    fd10:	f800283a 	ret

0000fd14 <atexit>:
    fd14:	200b883a 	mov	r5,r4
    fd18:	000f883a 	mov	r7,zero
    fd1c:	000d883a 	mov	r6,zero
    fd20:	0009883a 	mov	r4,zero
    fd24:	000fddc1 	jmpi	fddc <__register_exitproc>

0000fd28 <exit>:
    fd28:	defffe04 	addi	sp,sp,-8
    fd2c:	000b883a 	mov	r5,zero
    fd30:	dc000015 	stw	r16,0(sp)
    fd34:	dfc00115 	stw	ra,4(sp)
    fd38:	2021883a 	mov	r16,r4
    fd3c:	000fef40 	call	fef4 <__call_exitprocs>
    fd40:	00800074 	movhi	r2,1
    fd44:	1088bf04 	addi	r2,r2,8956
    fd48:	11000017 	ldw	r4,0(r2)
    fd4c:	20800f17 	ldw	r2,60(r4)
    fd50:	10000126 	beq	r2,zero,fd58 <exit+0x30>
    fd54:	103ee83a 	callr	r2
    fd58:	8009883a 	mov	r4,r16
    fd5c:	00100740 	call	10074 <_exit>

0000fd60 <memcmp>:
    fd60:	01c000c4 	movi	r7,3
    fd64:	3980192e 	bgeu	r7,r6,fdcc <memcmp+0x6c>
    fd68:	2144b03a 	or	r2,r4,r5
    fd6c:	11c4703a 	and	r2,r2,r7
    fd70:	10000f26 	beq	r2,zero,fdb0 <memcmp+0x50>
    fd74:	20800003 	ldbu	r2,0(r4)
    fd78:	28c00003 	ldbu	r3,0(r5)
    fd7c:	10c0151e 	bne	r2,r3,fdd4 <memcmp+0x74>
    fd80:	31bfff84 	addi	r6,r6,-2
    fd84:	01ffffc4 	movi	r7,-1
    fd88:	00000406 	br	fd9c <memcmp+0x3c>
    fd8c:	20800003 	ldbu	r2,0(r4)
    fd90:	28c00003 	ldbu	r3,0(r5)
    fd94:	31bfffc4 	addi	r6,r6,-1
    fd98:	10c00e1e 	bne	r2,r3,fdd4 <memcmp+0x74>
    fd9c:	21000044 	addi	r4,r4,1
    fda0:	29400044 	addi	r5,r5,1
    fda4:	31fff91e 	bne	r6,r7,fd8c <__alt_data_end+0xff00fd8c>
    fda8:	0005883a 	mov	r2,zero
    fdac:	f800283a 	ret
    fdb0:	20c00017 	ldw	r3,0(r4)
    fdb4:	28800017 	ldw	r2,0(r5)
    fdb8:	18bfee1e 	bne	r3,r2,fd74 <__alt_data_end+0xff00fd74>
    fdbc:	31bfff04 	addi	r6,r6,-4
    fdc0:	21000104 	addi	r4,r4,4
    fdc4:	29400104 	addi	r5,r5,4
    fdc8:	39bff936 	bltu	r7,r6,fdb0 <__alt_data_end+0xff00fdb0>
    fdcc:	303fe91e 	bne	r6,zero,fd74 <__alt_data_end+0xff00fd74>
    fdd0:	003ff506 	br	fda8 <__alt_data_end+0xff00fda8>
    fdd4:	10c5c83a 	sub	r2,r2,r3
    fdd8:	f800283a 	ret

0000fddc <__register_exitproc>:
    fddc:	defffa04 	addi	sp,sp,-24
    fde0:	dc000315 	stw	r16,12(sp)
    fde4:	04000074 	movhi	r16,1
    fde8:	8408bf04 	addi	r16,r16,8956
    fdec:	80c00017 	ldw	r3,0(r16)
    fdf0:	dc400415 	stw	r17,16(sp)
    fdf4:	dfc00515 	stw	ra,20(sp)
    fdf8:	18805217 	ldw	r2,328(r3)
    fdfc:	2023883a 	mov	r17,r4
    fe00:	10003726 	beq	r2,zero,fee0 <__register_exitproc+0x104>
    fe04:	10c00117 	ldw	r3,4(r2)
    fe08:	010007c4 	movi	r4,31
    fe0c:	20c00e16 	blt	r4,r3,fe48 <__register_exitproc+0x6c>
    fe10:	1a000044 	addi	r8,r3,1
    fe14:	8800221e 	bne	r17,zero,fea0 <__register_exitproc+0xc4>
    fe18:	18c00084 	addi	r3,r3,2
    fe1c:	18c7883a 	add	r3,r3,r3
    fe20:	18c7883a 	add	r3,r3,r3
    fe24:	12000115 	stw	r8,4(r2)
    fe28:	10c7883a 	add	r3,r2,r3
    fe2c:	19400015 	stw	r5,0(r3)
    fe30:	0005883a 	mov	r2,zero
    fe34:	dfc00517 	ldw	ra,20(sp)
    fe38:	dc400417 	ldw	r17,16(sp)
    fe3c:	dc000317 	ldw	r16,12(sp)
    fe40:	dec00604 	addi	sp,sp,24
    fe44:	f800283a 	ret
    fe48:	00800034 	movhi	r2,0
    fe4c:	10878104 	addi	r2,r2,7684
    fe50:	10002626 	beq	r2,zero,feec <__register_exitproc+0x110>
    fe54:	01006404 	movi	r4,400
    fe58:	d9400015 	stw	r5,0(sp)
    fe5c:	d9800115 	stw	r6,4(sp)
    fe60:	d9c00215 	stw	r7,8(sp)
    fe64:	0001e040 	call	1e04 <malloc>
    fe68:	d9400017 	ldw	r5,0(sp)
    fe6c:	d9800117 	ldw	r6,4(sp)
    fe70:	d9c00217 	ldw	r7,8(sp)
    fe74:	10001d26 	beq	r2,zero,feec <__register_exitproc+0x110>
    fe78:	81000017 	ldw	r4,0(r16)
    fe7c:	10000115 	stw	zero,4(r2)
    fe80:	02000044 	movi	r8,1
    fe84:	22405217 	ldw	r9,328(r4)
    fe88:	0007883a 	mov	r3,zero
    fe8c:	12400015 	stw	r9,0(r2)
    fe90:	20805215 	stw	r2,328(r4)
    fe94:	10006215 	stw	zero,392(r2)
    fe98:	10006315 	stw	zero,396(r2)
    fe9c:	883fde26 	beq	r17,zero,fe18 <__alt_data_end+0xff00fe18>
    fea0:	18c9883a 	add	r4,r3,r3
    fea4:	2109883a 	add	r4,r4,r4
    fea8:	1109883a 	add	r4,r2,r4
    feac:	21802215 	stw	r6,136(r4)
    feb0:	01800044 	movi	r6,1
    feb4:	12406217 	ldw	r9,392(r2)
    feb8:	30cc983a 	sll	r6,r6,r3
    febc:	4992b03a 	or	r9,r9,r6
    fec0:	12406215 	stw	r9,392(r2)
    fec4:	21c04215 	stw	r7,264(r4)
    fec8:	01000084 	movi	r4,2
    fecc:	893fd21e 	bne	r17,r4,fe18 <__alt_data_end+0xff00fe18>
    fed0:	11006317 	ldw	r4,396(r2)
    fed4:	218cb03a 	or	r6,r4,r6
    fed8:	11806315 	stw	r6,396(r2)
    fedc:	003fce06 	br	fe18 <__alt_data_end+0xff00fe18>
    fee0:	18805304 	addi	r2,r3,332
    fee4:	18805215 	stw	r2,328(r3)
    fee8:	003fc606 	br	fe04 <__alt_data_end+0xff00fe04>
    feec:	00bfffc4 	movi	r2,-1
    fef0:	003fd006 	br	fe34 <__alt_data_end+0xff00fe34>

0000fef4 <__call_exitprocs>:
    fef4:	defff504 	addi	sp,sp,-44
    fef8:	df000915 	stw	fp,36(sp)
    fefc:	dd400615 	stw	r21,24(sp)
    ff00:	dc800315 	stw	r18,12(sp)
    ff04:	dfc00a15 	stw	ra,40(sp)
    ff08:	ddc00815 	stw	r23,32(sp)
    ff0c:	dd800715 	stw	r22,28(sp)
    ff10:	dd000515 	stw	r20,20(sp)
    ff14:	dcc00415 	stw	r19,16(sp)
    ff18:	dc400215 	stw	r17,8(sp)
    ff1c:	dc000115 	stw	r16,4(sp)
    ff20:	d9000015 	stw	r4,0(sp)
    ff24:	2839883a 	mov	fp,r5
    ff28:	04800044 	movi	r18,1
    ff2c:	057fffc4 	movi	r21,-1
    ff30:	00800074 	movhi	r2,1
    ff34:	1088bf04 	addi	r2,r2,8956
    ff38:	12000017 	ldw	r8,0(r2)
    ff3c:	45005217 	ldw	r20,328(r8)
    ff40:	44c05204 	addi	r19,r8,328
    ff44:	a0001c26 	beq	r20,zero,ffb8 <__call_exitprocs+0xc4>
    ff48:	a0800117 	ldw	r2,4(r20)
    ff4c:	15ffffc4 	addi	r23,r2,-1
    ff50:	b8000d16 	blt	r23,zero,ff88 <__call_exitprocs+0x94>
    ff54:	14000044 	addi	r16,r2,1
    ff58:	8421883a 	add	r16,r16,r16
    ff5c:	8421883a 	add	r16,r16,r16
    ff60:	84402004 	addi	r17,r16,128
    ff64:	a463883a 	add	r17,r20,r17
    ff68:	a421883a 	add	r16,r20,r16
    ff6c:	e0001e26 	beq	fp,zero,ffe8 <__call_exitprocs+0xf4>
    ff70:	80804017 	ldw	r2,256(r16)
    ff74:	e0801c26 	beq	fp,r2,ffe8 <__call_exitprocs+0xf4>
    ff78:	bdffffc4 	addi	r23,r23,-1
    ff7c:	843fff04 	addi	r16,r16,-4
    ff80:	8c7fff04 	addi	r17,r17,-4
    ff84:	bd7ff91e 	bne	r23,r21,ff6c <__alt_data_end+0xff00ff6c>
    ff88:	00800034 	movhi	r2,0
    ff8c:	10878604 	addi	r2,r2,7704
    ff90:	10000926 	beq	r2,zero,ffb8 <__call_exitprocs+0xc4>
    ff94:	a0800117 	ldw	r2,4(r20)
    ff98:	1000301e 	bne	r2,zero,1005c <__call_exitprocs+0x168>
    ff9c:	a0800017 	ldw	r2,0(r20)
    ffa0:	10003226 	beq	r2,zero,1006c <__call_exitprocs+0x178>
    ffa4:	a009883a 	mov	r4,r20
    ffa8:	98800015 	stw	r2,0(r19)
    ffac:	0001e180 	call	1e18 <free>
    ffb0:	9d000017 	ldw	r20,0(r19)
    ffb4:	a03fe41e 	bne	r20,zero,ff48 <__alt_data_end+0xff00ff48>
    ffb8:	dfc00a17 	ldw	ra,40(sp)
    ffbc:	df000917 	ldw	fp,36(sp)
    ffc0:	ddc00817 	ldw	r23,32(sp)
    ffc4:	dd800717 	ldw	r22,28(sp)
    ffc8:	dd400617 	ldw	r21,24(sp)
    ffcc:	dd000517 	ldw	r20,20(sp)
    ffd0:	dcc00417 	ldw	r19,16(sp)
    ffd4:	dc800317 	ldw	r18,12(sp)
    ffd8:	dc400217 	ldw	r17,8(sp)
    ffdc:	dc000117 	ldw	r16,4(sp)
    ffe0:	dec00b04 	addi	sp,sp,44
    ffe4:	f800283a 	ret
    ffe8:	a0800117 	ldw	r2,4(r20)
    ffec:	80c00017 	ldw	r3,0(r16)
    fff0:	10bfffc4 	addi	r2,r2,-1
    fff4:	15c01426 	beq	r2,r23,10048 <__call_exitprocs+0x154>
    fff8:	80000015 	stw	zero,0(r16)
    fffc:	183fde26 	beq	r3,zero,ff78 <__alt_data_end+0xff00ff78>
   10000:	95c8983a 	sll	r4,r18,r23
   10004:	a0806217 	ldw	r2,392(r20)
   10008:	a5800117 	ldw	r22,4(r20)
   1000c:	2084703a 	and	r2,r4,r2
   10010:	10000b26 	beq	r2,zero,10040 <__call_exitprocs+0x14c>
   10014:	a0806317 	ldw	r2,396(r20)
   10018:	2088703a 	and	r4,r4,r2
   1001c:	20000c1e 	bne	r4,zero,10050 <__call_exitprocs+0x15c>
   10020:	89400017 	ldw	r5,0(r17)
   10024:	d9000017 	ldw	r4,0(sp)
   10028:	183ee83a 	callr	r3
   1002c:	a0800117 	ldw	r2,4(r20)
   10030:	15bfbf1e 	bne	r2,r22,ff30 <__alt_data_end+0xff00ff30>
   10034:	98800017 	ldw	r2,0(r19)
   10038:	153fcf26 	beq	r2,r20,ff78 <__alt_data_end+0xff00ff78>
   1003c:	003fbc06 	br	ff30 <__alt_data_end+0xff00ff30>
   10040:	183ee83a 	callr	r3
   10044:	003ff906 	br	1002c <__alt_data_end+0xff01002c>
   10048:	a5c00115 	stw	r23,4(r20)
   1004c:	003feb06 	br	fffc <__alt_data_end+0xff00fffc>
   10050:	89000017 	ldw	r4,0(r17)
   10054:	183ee83a 	callr	r3
   10058:	003ff406 	br	1002c <__alt_data_end+0xff01002c>
   1005c:	a0800017 	ldw	r2,0(r20)
   10060:	a027883a 	mov	r19,r20
   10064:	1029883a 	mov	r20,r2
   10068:	003fb606 	br	ff44 <__alt_data_end+0xff00ff44>
   1006c:	0005883a 	mov	r2,zero
   10070:	003ffb06 	br	10060 <__alt_data_end+0xff010060>

00010074 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   10074:	20000226 	beq	r4,zero,10080 <_exit+0xc>
    ALT_SIM_FAIL();
   10078:	002af070 	cmpltui	zero,zero,43969
   1007c:	003fff06 	br	1007c <__alt_data_end+0xff01007c>
  } else {
    ALT_SIM_PASS();
   10080:	002af0b0 	cmpltui	zero,zero,43970
   10084:	003ffd06 	br	1007c <__alt_data_end+0xff01007c>
